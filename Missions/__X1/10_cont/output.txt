// starting begin ResetFog ;
   0: CALL_OW 335
// end ; end_of_file end_of_file end_of_file end_of_file end_of_file end_of_file
   4: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
   5: LD_INT 0
   7: PPUSH
   8: PPUSH
// if exist_mode then
   9: LD_VAR 0 2
  13: IFFALSE 38
// unit := CreateCharacter ( prefix & ident ) else
  15: LD_ADDR_VAR 0 5
  19: PUSH
  20: LD_VAR 0 3
  24: PUSH
  25: LD_VAR 0 1
  29: STR
  30: PPUSH
  31: CALL_OW 34
  35: ST_TO_ADDR
  36: GO 53
// unit := NewCharacter ( ident ) ;
  38: LD_ADDR_VAR 0 5
  42: PUSH
  43: LD_VAR 0 1
  47: PPUSH
  48: CALL_OW 25
  52: ST_TO_ADDR
// result := unit ;
  53: LD_ADDR_VAR 0 4
  57: PUSH
  58: LD_VAR 0 5
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 4
  67: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
// if not side or not nation then
  72: LD_VAR 0 1
  76: NOT
  77: PUSH
  78: LD_VAR 0 2
  82: NOT
  83: OR
  84: IFFALSE 88
// exit ;
  86: GO 856
// case nation of nation_american :
  88: LD_VAR 0 2
  92: PUSH
  93: LD_INT 1
  95: DOUBLE
  96: EQUAL
  97: IFTRUE 101
  99: GO 315
 101: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 102: LD_ADDR_VAR 0 4
 106: PUSH
 107: LD_INT 35
 109: PUSH
 110: LD_INT 45
 112: PUSH
 113: LD_INT 46
 115: PUSH
 116: LD_INT 47
 118: PUSH
 119: LD_INT 82
 121: PUSH
 122: LD_INT 83
 124: PUSH
 125: LD_INT 84
 127: PUSH
 128: LD_INT 85
 130: PUSH
 131: LD_INT 86
 133: PUSH
 134: LD_INT 1
 136: PUSH
 137: LD_INT 2
 139: PUSH
 140: LD_INT 6
 142: PUSH
 143: LD_INT 15
 145: PUSH
 146: LD_INT 16
 148: PUSH
 149: LD_INT 7
 151: PUSH
 152: LD_INT 12
 154: PUSH
 155: LD_INT 13
 157: PUSH
 158: LD_INT 10
 160: PUSH
 161: LD_INT 14
 163: PUSH
 164: LD_INT 20
 166: PUSH
 167: LD_INT 21
 169: PUSH
 170: LD_INT 22
 172: PUSH
 173: LD_INT 25
 175: PUSH
 176: LD_INT 32
 178: PUSH
 179: LD_INT 27
 181: PUSH
 182: LD_INT 36
 184: PUSH
 185: LD_INT 69
 187: PUSH
 188: LD_INT 39
 190: PUSH
 191: LD_INT 34
 193: PUSH
 194: LD_INT 40
 196: PUSH
 197: LD_INT 48
 199: PUSH
 200: LD_INT 49
 202: PUSH
 203: LD_INT 50
 205: PUSH
 206: LD_INT 51
 208: PUSH
 209: LD_INT 52
 211: PUSH
 212: LD_INT 53
 214: PUSH
 215: LD_INT 54
 217: PUSH
 218: LD_INT 55
 220: PUSH
 221: LD_INT 56
 223: PUSH
 224: LD_INT 57
 226: PUSH
 227: LD_INT 58
 229: PUSH
 230: LD_INT 59
 232: PUSH
 233: LD_INT 60
 235: PUSH
 236: LD_INT 61
 238: PUSH
 239: LD_INT 62
 241: PUSH
 242: LD_INT 80
 244: PUSH
 245: LD_INT 82
 247: PUSH
 248: LD_INT 83
 250: PUSH
 251: LD_INT 84
 253: PUSH
 254: LD_INT 85
 256: PUSH
 257: LD_INT 86
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: LIST
 268: LIST
 269: LIST
 270: LIST
 271: LIST
 272: LIST
 273: LIST
 274: LIST
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: LIST
 284: LIST
 285: LIST
 286: LIST
 287: LIST
 288: LIST
 289: LIST
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: LIST
 296: LIST
 297: LIST
 298: LIST
 299: LIST
 300: LIST
 301: LIST
 302: LIST
 303: LIST
 304: LIST
 305: LIST
 306: LIST
 307: LIST
 308: LIST
 309: LIST
 310: LIST
 311: LIST
 312: ST_TO_ADDR
 313: GO 780
 315: LD_INT 2
 317: DOUBLE
 318: EQUAL
 319: IFTRUE 323
 321: GO 549
 323: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
 324: LD_ADDR_VAR 0 4
 328: PUSH
 329: LD_INT 35
 331: PUSH
 332: LD_INT 45
 334: PUSH
 335: LD_INT 46
 337: PUSH
 338: LD_INT 47
 340: PUSH
 341: LD_INT 82
 343: PUSH
 344: LD_INT 83
 346: PUSH
 347: LD_INT 84
 349: PUSH
 350: LD_INT 85
 352: PUSH
 353: LD_INT 87
 355: PUSH
 356: LD_INT 70
 358: PUSH
 359: LD_INT 1
 361: PUSH
 362: LD_INT 11
 364: PUSH
 365: LD_INT 3
 367: PUSH
 368: LD_INT 4
 370: PUSH
 371: LD_INT 5
 373: PUSH
 374: LD_INT 6
 376: PUSH
 377: LD_INT 15
 379: PUSH
 380: LD_INT 18
 382: PUSH
 383: LD_INT 7
 385: PUSH
 386: LD_INT 17
 388: PUSH
 389: LD_INT 8
 391: PUSH
 392: LD_INT 20
 394: PUSH
 395: LD_INT 21
 397: PUSH
 398: LD_INT 22
 400: PUSH
 401: LD_INT 72
 403: PUSH
 404: LD_INT 26
 406: PUSH
 407: LD_INT 69
 409: PUSH
 410: LD_INT 39
 412: PUSH
 413: LD_INT 40
 415: PUSH
 416: LD_INT 41
 418: PUSH
 419: LD_INT 42
 421: PUSH
 422: LD_INT 43
 424: PUSH
 425: LD_INT 48
 427: PUSH
 428: LD_INT 49
 430: PUSH
 431: LD_INT 50
 433: PUSH
 434: LD_INT 51
 436: PUSH
 437: LD_INT 52
 439: PUSH
 440: LD_INT 53
 442: PUSH
 443: LD_INT 54
 445: PUSH
 446: LD_INT 55
 448: PUSH
 449: LD_INT 56
 451: PUSH
 452: LD_INT 60
 454: PUSH
 455: LD_INT 61
 457: PUSH
 458: LD_INT 62
 460: PUSH
 461: LD_INT 66
 463: PUSH
 464: LD_INT 67
 466: PUSH
 467: LD_INT 68
 469: PUSH
 470: LD_INT 81
 472: PUSH
 473: LD_INT 82
 475: PUSH
 476: LD_INT 83
 478: PUSH
 479: LD_INT 84
 481: PUSH
 482: LD_INT 85
 484: PUSH
 485: LD_INT 87
 487: PUSH
 488: LD_INT 88
 490: PUSH
 491: EMPTY
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: LIST
 499: LIST
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: LIST
 525: LIST
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: LIST
 534: LIST
 535: LIST
 536: LIST
 537: LIST
 538: LIST
 539: LIST
 540: LIST
 541: LIST
 542: LIST
 543: LIST
 544: LIST
 545: LIST
 546: ST_TO_ADDR
 547: GO 780
 549: LD_INT 3
 551: DOUBLE
 552: EQUAL
 553: IFTRUE 557
 555: GO 779
 557: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
 558: LD_ADDR_VAR 0 4
 562: PUSH
 563: LD_INT 46
 565: PUSH
 566: LD_INT 47
 568: PUSH
 569: LD_INT 1
 571: PUSH
 572: LD_INT 2
 574: PUSH
 575: LD_INT 82
 577: PUSH
 578: LD_INT 83
 580: PUSH
 581: LD_INT 84
 583: PUSH
 584: LD_INT 85
 586: PUSH
 587: LD_INT 86
 589: PUSH
 590: LD_INT 11
 592: PUSH
 593: LD_INT 9
 595: PUSH
 596: LD_INT 20
 598: PUSH
 599: LD_INT 19
 601: PUSH
 602: LD_INT 21
 604: PUSH
 605: LD_INT 24
 607: PUSH
 608: LD_INT 22
 610: PUSH
 611: LD_INT 25
 613: PUSH
 614: LD_INT 28
 616: PUSH
 617: LD_INT 29
 619: PUSH
 620: LD_INT 30
 622: PUSH
 623: LD_INT 31
 625: PUSH
 626: LD_INT 37
 628: PUSH
 629: LD_INT 38
 631: PUSH
 632: LD_INT 32
 634: PUSH
 635: LD_INT 27
 637: PUSH
 638: LD_INT 33
 640: PUSH
 641: LD_INT 69
 643: PUSH
 644: LD_INT 39
 646: PUSH
 647: LD_INT 34
 649: PUSH
 650: LD_INT 40
 652: PUSH
 653: LD_INT 71
 655: PUSH
 656: LD_INT 23
 658: PUSH
 659: LD_INT 44
 661: PUSH
 662: LD_INT 48
 664: PUSH
 665: LD_INT 49
 667: PUSH
 668: LD_INT 50
 670: PUSH
 671: LD_INT 51
 673: PUSH
 674: LD_INT 52
 676: PUSH
 677: LD_INT 53
 679: PUSH
 680: LD_INT 54
 682: PUSH
 683: LD_INT 55
 685: PUSH
 686: LD_INT 56
 688: PUSH
 689: LD_INT 57
 691: PUSH
 692: LD_INT 58
 694: PUSH
 695: LD_INT 59
 697: PUSH
 698: LD_INT 63
 700: PUSH
 701: LD_INT 64
 703: PUSH
 704: LD_INT 65
 706: PUSH
 707: LD_INT 82
 709: PUSH
 710: LD_INT 83
 712: PUSH
 713: LD_INT 84
 715: PUSH
 716: LD_INT 85
 718: PUSH
 719: LD_INT 86
 721: PUSH
 722: EMPTY
 723: LIST
 724: LIST
 725: LIST
 726: LIST
 727: LIST
 728: LIST
 729: LIST
 730: LIST
 731: LIST
 732: LIST
 733: LIST
 734: LIST
 735: LIST
 736: LIST
 737: LIST
 738: LIST
 739: LIST
 740: LIST
 741: LIST
 742: LIST
 743: LIST
 744: LIST
 745: LIST
 746: LIST
 747: LIST
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: LIST
 757: LIST
 758: LIST
 759: LIST
 760: LIST
 761: LIST
 762: LIST
 763: LIST
 764: LIST
 765: LIST
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: LIST
 771: LIST
 772: LIST
 773: LIST
 774: LIST
 775: LIST
 776: ST_TO_ADDR
 777: GO 780
 779: POP
// if state > - 1 and state < 3 then
 780: LD_VAR 0 3
 784: PUSH
 785: LD_INT 1
 787: NEG
 788: GREATER
 789: PUSH
 790: LD_VAR 0 3
 794: PUSH
 795: LD_INT 3
 797: LESS
 798: AND
 799: IFFALSE 856
// for i in result do
 801: LD_ADDR_VAR 0 5
 805: PUSH
 806: LD_VAR 0 4
 810: PUSH
 811: FOR_IN
 812: IFFALSE 854
// if GetTech ( i , side ) <> state then
 814: LD_VAR 0 5
 818: PPUSH
 819: LD_VAR 0 1
 823: PPUSH
 824: CALL_OW 321
 828: PUSH
 829: LD_VAR 0 3
 833: NONEQUAL
 834: IFFALSE 852
// result := result diff i ;
 836: LD_ADDR_VAR 0 4
 840: PUSH
 841: LD_VAR 0 4
 845: PUSH
 846: LD_VAR 0 5
 850: DIFF
 851: ST_TO_ADDR
 852: GO 811
 854: POP
 855: POP
// end ;
 856: LD_VAR 0 4
 860: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
 861: LD_INT 0
 863: PPUSH
 864: PPUSH
 865: PPUSH
// result := true ;
 866: LD_ADDR_VAR 0 3
 870: PUSH
 871: LD_INT 1
 873: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
 874: LD_ADDR_VAR 0 5
 878: PUSH
 879: LD_VAR 0 2
 883: PPUSH
 884: CALL_OW 480
 888: ST_TO_ADDR
// if not tmp then
 889: LD_VAR 0 5
 893: NOT
 894: IFFALSE 898
// exit ;
 896: GO 947
// for i in tmp do
 898: LD_ADDR_VAR 0 4
 902: PUSH
 903: LD_VAR 0 5
 907: PUSH
 908: FOR_IN
 909: IFFALSE 945
// if GetTech ( i , side ) <> state_researched then
 911: LD_VAR 0 4
 915: PPUSH
 916: LD_VAR 0 1
 920: PPUSH
 921: CALL_OW 321
 925: PUSH
 926: LD_INT 2
 928: NONEQUAL
 929: IFFALSE 943
// begin result := false ;
 931: LD_ADDR_VAR 0 3
 935: PUSH
 936: LD_INT 0
 938: ST_TO_ADDR
// exit ;
 939: POP
 940: POP
 941: GO 947
// end ;
 943: GO 908
 945: POP
 946: POP
// end ;
 947: LD_VAR 0 3
 951: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
 952: LD_INT 0
 954: PPUSH
 955: PPUSH
 956: PPUSH
 957: PPUSH
 958: PPUSH
 959: PPUSH
 960: PPUSH
 961: PPUSH
 962: PPUSH
 963: PPUSH
 964: PPUSH
 965: PPUSH
 966: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
 967: LD_VAR 0 1
 971: NOT
 972: PUSH
 973: LD_VAR 0 1
 977: PPUSH
 978: CALL_OW 257
 982: PUSH
 983: LD_INT 9
 985: NONEQUAL
 986: OR
 987: IFFALSE 991
// exit ;
 989: GO 1564
// side := GetSide ( unit ) ;
 991: LD_ADDR_VAR 0 9
 995: PUSH
 996: LD_VAR 0 1
1000: PPUSH
1001: CALL_OW 255
1005: ST_TO_ADDR
// tech_space := tech_spacanom ;
1006: LD_ADDR_VAR 0 12
1010: PUSH
1011: LD_INT 29
1013: ST_TO_ADDR
// tech_time := tech_taurad ;
1014: LD_ADDR_VAR 0 13
1018: PUSH
1019: LD_INT 28
1021: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
1022: LD_ADDR_VAR 0 11
1026: PUSH
1027: LD_VAR 0 1
1031: PPUSH
1032: CALL_OW 310
1036: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
1037: LD_VAR 0 11
1041: PPUSH
1042: CALL_OW 247
1046: PUSH
1047: LD_INT 2
1049: EQUAL
1050: IFFALSE 1054
// exit ;
1052: GO 1564
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1054: LD_ADDR_VAR 0 8
1058: PUSH
1059: LD_INT 81
1061: PUSH
1062: LD_VAR 0 9
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: PUSH
1071: LD_INT 3
1073: PUSH
1074: LD_INT 21
1076: PUSH
1077: LD_INT 3
1079: PUSH
1080: EMPTY
1081: LIST
1082: LIST
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: PPUSH
1092: CALL_OW 69
1096: ST_TO_ADDR
// if not tmp then
1097: LD_VAR 0 8
1101: NOT
1102: IFFALSE 1106
// exit ;
1104: GO 1564
// if in_unit then
1106: LD_VAR 0 11
1110: IFFALSE 1134
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
1112: LD_ADDR_VAR 0 10
1116: PUSH
1117: LD_VAR 0 8
1121: PPUSH
1122: LD_VAR 0 11
1126: PPUSH
1127: CALL_OW 74
1131: ST_TO_ADDR
1132: GO 1154
// enemy := NearestUnitToUnit ( tmp , unit ) ;
1134: LD_ADDR_VAR 0 10
1138: PUSH
1139: LD_VAR 0 8
1143: PPUSH
1144: LD_VAR 0 1
1148: PPUSH
1149: CALL_OW 74
1153: ST_TO_ADDR
// if not enemy then
1154: LD_VAR 0 10
1158: NOT
1159: IFFALSE 1163
// exit ;
1161: GO 1564
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
1163: LD_VAR 0 11
1167: PUSH
1168: LD_VAR 0 11
1172: PPUSH
1173: LD_VAR 0 10
1177: PPUSH
1178: CALL_OW 296
1182: PUSH
1183: LD_INT 13
1185: GREATER
1186: AND
1187: PUSH
1188: LD_VAR 0 1
1192: PPUSH
1193: LD_VAR 0 10
1197: PPUSH
1198: CALL_OW 296
1202: PUSH
1203: LD_INT 12
1205: GREATER
1206: OR
1207: IFFALSE 1211
// exit ;
1209: GO 1564
// missile := [ 1 ] ;
1211: LD_ADDR_VAR 0 14
1215: PUSH
1216: LD_INT 1
1218: PUSH
1219: EMPTY
1220: LIST
1221: ST_TO_ADDR
// if Researched ( side , tech_space ) then
1222: LD_VAR 0 9
1226: PPUSH
1227: LD_VAR 0 12
1231: PPUSH
1232: CALL_OW 325
1236: IFFALSE 1265
// missile := Replace ( missile , missile + 1 , 2 ) ;
1238: LD_ADDR_VAR 0 14
1242: PUSH
1243: LD_VAR 0 14
1247: PPUSH
1248: LD_VAR 0 14
1252: PUSH
1253: LD_INT 1
1255: PLUS
1256: PPUSH
1257: LD_INT 2
1259: PPUSH
1260: CALL_OW 1
1264: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
1265: LD_VAR 0 9
1269: PPUSH
1270: LD_VAR 0 13
1274: PPUSH
1275: CALL_OW 325
1279: PUSH
1280: LD_VAR 0 10
1284: PPUSH
1285: CALL_OW 255
1289: PPUSH
1290: LD_VAR 0 13
1294: PPUSH
1295: CALL_OW 325
1299: NOT
1300: AND
1301: IFFALSE 1330
// missile := Replace ( missile , missile + 1 , 3 ) ;
1303: LD_ADDR_VAR 0 14
1307: PUSH
1308: LD_VAR 0 14
1312: PPUSH
1313: LD_VAR 0 14
1317: PUSH
1318: LD_INT 1
1320: PLUS
1321: PPUSH
1322: LD_INT 3
1324: PPUSH
1325: CALL_OW 1
1329: ST_TO_ADDR
// if missile < 2 then
1330: LD_VAR 0 14
1334: PUSH
1335: LD_INT 2
1337: LESS
1338: IFFALSE 1342
// exit ;
1340: GO 1564
// x := GetX ( enemy ) ;
1342: LD_ADDR_VAR 0 4
1346: PUSH
1347: LD_VAR 0 10
1351: PPUSH
1352: CALL_OW 250
1356: ST_TO_ADDR
// y := GetY ( enemy ) ;
1357: LD_ADDR_VAR 0 5
1361: PUSH
1362: LD_VAR 0 10
1366: PPUSH
1367: CALL_OW 251
1371: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
1372: LD_ADDR_VAR 0 6
1376: PUSH
1377: LD_VAR 0 4
1381: PUSH
1382: LD_INT 1
1384: NEG
1385: PPUSH
1386: LD_INT 1
1388: PPUSH
1389: CALL_OW 12
1393: PLUS
1394: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
1395: LD_ADDR_VAR 0 7
1399: PUSH
1400: LD_VAR 0 5
1404: PUSH
1405: LD_INT 1
1407: NEG
1408: PPUSH
1409: LD_INT 1
1411: PPUSH
1412: CALL_OW 12
1416: PLUS
1417: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
1418: LD_VAR 0 6
1422: PPUSH
1423: LD_VAR 0 7
1427: PPUSH
1428: CALL_OW 488
1432: NOT
1433: IFFALSE 1455
// begin _x := x ;
1435: LD_ADDR_VAR 0 6
1439: PUSH
1440: LD_VAR 0 4
1444: ST_TO_ADDR
// _y := y ;
1445: LD_ADDR_VAR 0 7
1449: PUSH
1450: LD_VAR 0 5
1454: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
1455: LD_ADDR_VAR 0 3
1459: PUSH
1460: LD_INT 1
1462: PPUSH
1463: LD_VAR 0 14
1467: PPUSH
1468: CALL_OW 12
1472: ST_TO_ADDR
// case i of 1 :
1473: LD_VAR 0 3
1477: PUSH
1478: LD_INT 1
1480: DOUBLE
1481: EQUAL
1482: IFTRUE 1486
1484: GO 1503
1486: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
1487: LD_VAR 0 1
1491: PPUSH
1492: LD_VAR 0 10
1496: PPUSH
1497: CALL_OW 115
1501: GO 1564
1503: LD_INT 2
1505: DOUBLE
1506: EQUAL
1507: IFTRUE 1511
1509: GO 1533
1511: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
1512: LD_VAR 0 1
1516: PPUSH
1517: LD_VAR 0 6
1521: PPUSH
1522: LD_VAR 0 7
1526: PPUSH
1527: CALL_OW 153
1531: GO 1564
1533: LD_INT 3
1535: DOUBLE
1536: EQUAL
1537: IFTRUE 1541
1539: GO 1563
1541: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
1542: LD_VAR 0 1
1546: PPUSH
1547: LD_VAR 0 6
1551: PPUSH
1552: LD_VAR 0 7
1556: PPUSH
1557: CALL_OW 154
1561: GO 1564
1563: POP
// end ;
1564: LD_VAR 0 2
1568: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
1569: LD_INT 0
1571: PPUSH
1572: PPUSH
1573: PPUSH
1574: PPUSH
1575: PPUSH
1576: PPUSH
// if not unit or not building then
1577: LD_VAR 0 1
1581: NOT
1582: PUSH
1583: LD_VAR 0 2
1587: NOT
1588: OR
1589: IFFALSE 1593
// exit ;
1591: GO 1751
// x := GetX ( building ) ;
1593: LD_ADDR_VAR 0 5
1597: PUSH
1598: LD_VAR 0 2
1602: PPUSH
1603: CALL_OW 250
1607: ST_TO_ADDR
// y := GetY ( building ) ;
1608: LD_ADDR_VAR 0 6
1612: PUSH
1613: LD_VAR 0 2
1617: PPUSH
1618: CALL_OW 251
1622: ST_TO_ADDR
// for i = 0 to 5 do
1623: LD_ADDR_VAR 0 4
1627: PUSH
1628: DOUBLE
1629: LD_INT 0
1631: DEC
1632: ST_TO_ADDR
1633: LD_INT 5
1635: PUSH
1636: FOR_TO
1637: IFFALSE 1749
// begin _x := ShiftX ( x , i , 3 ) ;
1639: LD_ADDR_VAR 0 7
1643: PUSH
1644: LD_VAR 0 5
1648: PPUSH
1649: LD_VAR 0 4
1653: PPUSH
1654: LD_INT 3
1656: PPUSH
1657: CALL_OW 272
1661: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
1662: LD_ADDR_VAR 0 8
1666: PUSH
1667: LD_VAR 0 6
1671: PPUSH
1672: LD_VAR 0 4
1676: PPUSH
1677: LD_INT 3
1679: PPUSH
1680: CALL_OW 273
1684: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
1685: LD_VAR 0 7
1689: PPUSH
1690: LD_VAR 0 8
1694: PPUSH
1695: CALL_OW 488
1699: NOT
1700: IFFALSE 1704
// continue ;
1702: GO 1636
// if HexInfo ( _x , _y ) = 0 then
1704: LD_VAR 0 7
1708: PPUSH
1709: LD_VAR 0 8
1713: PPUSH
1714: CALL_OW 428
1718: PUSH
1719: LD_INT 0
1721: EQUAL
1722: IFFALSE 1747
// begin ComMoveXY ( unit , _x , _y ) ;
1724: LD_VAR 0 1
1728: PPUSH
1729: LD_VAR 0 7
1733: PPUSH
1734: LD_VAR 0 8
1738: PPUSH
1739: CALL_OW 111
// exit ;
1743: POP
1744: POP
1745: GO 1751
// end ; end ;
1747: GO 1636
1749: POP
1750: POP
// end ;
1751: LD_VAR 0 3
1755: RET
// export function ScanBase ( side , base_area ) ; begin
1756: LD_INT 0
1758: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
1759: LD_ADDR_VAR 0 3
1763: PUSH
1764: LD_VAR 0 2
1768: PPUSH
1769: LD_INT 81
1771: PUSH
1772: LD_VAR 0 1
1776: PUSH
1777: EMPTY
1778: LIST
1779: LIST
1780: PPUSH
1781: CALL_OW 70
1785: ST_TO_ADDR
// end ;
1786: LD_VAR 0 3
1790: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
1791: LD_INT 0
1793: PPUSH
1794: PPUSH
1795: PPUSH
1796: PPUSH
// result := false ;
1797: LD_ADDR_VAR 0 2
1801: PUSH
1802: LD_INT 0
1804: ST_TO_ADDR
// side := GetSide ( unit ) ;
1805: LD_ADDR_VAR 0 3
1809: PUSH
1810: LD_VAR 0 1
1814: PPUSH
1815: CALL_OW 255
1819: ST_TO_ADDR
// nat := GetNation ( unit ) ;
1820: LD_ADDR_VAR 0 4
1824: PUSH
1825: LD_VAR 0 1
1829: PPUSH
1830: CALL_OW 248
1834: ST_TO_ADDR
// case nat of 1 :
1835: LD_VAR 0 4
1839: PUSH
1840: LD_INT 1
1842: DOUBLE
1843: EQUAL
1844: IFTRUE 1848
1846: GO 1859
1848: POP
// tech := tech_lassight ; 2 :
1849: LD_ADDR_VAR 0 5
1853: PUSH
1854: LD_INT 12
1856: ST_TO_ADDR
1857: GO 1898
1859: LD_INT 2
1861: DOUBLE
1862: EQUAL
1863: IFTRUE 1867
1865: GO 1878
1867: POP
// tech := tech_mortar ; 3 :
1868: LD_ADDR_VAR 0 5
1872: PUSH
1873: LD_INT 41
1875: ST_TO_ADDR
1876: GO 1898
1878: LD_INT 3
1880: DOUBLE
1881: EQUAL
1882: IFTRUE 1886
1884: GO 1897
1886: POP
// tech := tech_bazooka ; end ;
1887: LD_ADDR_VAR 0 5
1891: PUSH
1892: LD_INT 44
1894: ST_TO_ADDR
1895: GO 1898
1897: POP
// if Researched ( side , tech ) then
1898: LD_VAR 0 3
1902: PPUSH
1903: LD_VAR 0 5
1907: PPUSH
1908: CALL_OW 325
1912: IFFALSE 1939
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
1914: LD_ADDR_VAR 0 2
1918: PUSH
1919: LD_INT 5
1921: PUSH
1922: LD_INT 8
1924: PUSH
1925: LD_INT 9
1927: PUSH
1928: EMPTY
1929: LIST
1930: LIST
1931: LIST
1932: PUSH
1933: LD_VAR 0 4
1937: ARRAY
1938: ST_TO_ADDR
// end ;
1939: LD_VAR 0 2
1943: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
1944: LD_INT 0
1946: PPUSH
1947: PPUSH
1948: PPUSH
// if not mines then
1949: LD_VAR 0 2
1953: NOT
1954: IFFALSE 1958
// exit ;
1956: GO 2102
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1958: LD_ADDR_VAR 0 5
1962: PUSH
1963: LD_INT 81
1965: PUSH
1966: LD_VAR 0 1
1970: PUSH
1971: EMPTY
1972: LIST
1973: LIST
1974: PUSH
1975: LD_INT 3
1977: PUSH
1978: LD_INT 21
1980: PUSH
1981: LD_INT 3
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: PPUSH
1996: CALL_OW 69
2000: ST_TO_ADDR
// for i in mines do
2001: LD_ADDR_VAR 0 4
2005: PUSH
2006: LD_VAR 0 2
2010: PUSH
2011: FOR_IN
2012: IFFALSE 2100
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
2014: LD_VAR 0 4
2018: PUSH
2019: LD_INT 1
2021: ARRAY
2022: PPUSH
2023: LD_VAR 0 4
2027: PUSH
2028: LD_INT 2
2030: ARRAY
2031: PPUSH
2032: CALL_OW 458
2036: NOT
2037: IFFALSE 2041
// continue ;
2039: GO 2011
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
2041: LD_VAR 0 4
2045: PUSH
2046: LD_INT 1
2048: ARRAY
2049: PPUSH
2050: LD_VAR 0 4
2054: PUSH
2055: LD_INT 2
2057: ARRAY
2058: PPUSH
2059: CALL_OW 428
2063: PUSH
2064: LD_VAR 0 5
2068: IN
2069: IFFALSE 2098
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
2071: LD_VAR 0 4
2075: PUSH
2076: LD_INT 1
2078: ARRAY
2079: PPUSH
2080: LD_VAR 0 4
2084: PUSH
2085: LD_INT 2
2087: ARRAY
2088: PPUSH
2089: LD_VAR 0 1
2093: PPUSH
2094: CALL_OW 456
// end ;
2098: GO 2011
2100: POP
2101: POP
// end ;
2102: LD_VAR 0 3
2106: RET
// export function Count ( array ) ; begin
2107: LD_INT 0
2109: PPUSH
// result := array + 0 ;
2110: LD_ADDR_VAR 0 2
2114: PUSH
2115: LD_VAR 0 1
2119: PUSH
2120: LD_INT 0
2122: PLUS
2123: ST_TO_ADDR
// end ;
2124: LD_VAR 0 2
2128: RET
// export function IsEmpty ( building ) ; begin
2129: LD_INT 0
2131: PPUSH
// if not building then
2132: LD_VAR 0 1
2136: NOT
2137: IFFALSE 2141
// exit ;
2139: GO 2184
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
2141: LD_ADDR_VAR 0 2
2145: PUSH
2146: LD_VAR 0 1
2150: PUSH
2151: LD_INT 22
2153: PUSH
2154: LD_VAR 0 1
2158: PPUSH
2159: CALL_OW 255
2163: PUSH
2164: EMPTY
2165: LIST
2166: LIST
2167: PUSH
2168: LD_INT 58
2170: PUSH
2171: EMPTY
2172: LIST
2173: PUSH
2174: EMPTY
2175: LIST
2176: LIST
2177: PPUSH
2178: CALL_OW 69
2182: IN
2183: ST_TO_ADDR
// end ;
2184: LD_VAR 0 2
2188: RET
// export function IsNotFull ( building ) ; var places ; begin
2189: LD_INT 0
2191: PPUSH
2192: PPUSH
// if not building then
2193: LD_VAR 0 1
2197: NOT
2198: IFFALSE 2202
// exit ;
2200: GO 2230
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
2202: LD_ADDR_VAR 0 2
2206: PUSH
2207: LD_VAR 0 1
2211: PPUSH
2212: LD_INT 3
2214: PUSH
2215: LD_INT 62
2217: PUSH
2218: EMPTY
2219: LIST
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: PPUSH
2225: CALL_OW 72
2229: ST_TO_ADDR
// end ;
2230: LD_VAR 0 2
2234: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
2235: LD_INT 0
2237: PPUSH
2238: PPUSH
2239: PPUSH
2240: PPUSH
// tmp := [ ] ;
2241: LD_ADDR_VAR 0 3
2245: PUSH
2246: EMPTY
2247: ST_TO_ADDR
// list := [ ] ;
2248: LD_ADDR_VAR 0 5
2252: PUSH
2253: EMPTY
2254: ST_TO_ADDR
// for i = 16 to 25 do
2255: LD_ADDR_VAR 0 4
2259: PUSH
2260: DOUBLE
2261: LD_INT 16
2263: DEC
2264: ST_TO_ADDR
2265: LD_INT 25
2267: PUSH
2268: FOR_TO
2269: IFFALSE 2342
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
2271: LD_ADDR_VAR 0 3
2275: PUSH
2276: LD_VAR 0 3
2280: PUSH
2281: LD_INT 22
2283: PUSH
2284: LD_VAR 0 1
2288: PPUSH
2289: CALL_OW 255
2293: PUSH
2294: EMPTY
2295: LIST
2296: LIST
2297: PUSH
2298: LD_INT 91
2300: PUSH
2301: LD_VAR 0 1
2305: PUSH
2306: LD_INT 6
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: LIST
2313: PUSH
2314: LD_INT 30
2316: PUSH
2317: LD_VAR 0 4
2321: PUSH
2322: EMPTY
2323: LIST
2324: LIST
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: LIST
2330: PUSH
2331: EMPTY
2332: LIST
2333: PPUSH
2334: CALL_OW 69
2338: ADD
2339: ST_TO_ADDR
2340: GO 2268
2342: POP
2343: POP
// for i = 1 to tmp do
2344: LD_ADDR_VAR 0 4
2348: PUSH
2349: DOUBLE
2350: LD_INT 1
2352: DEC
2353: ST_TO_ADDR
2354: LD_VAR 0 3
2358: PUSH
2359: FOR_TO
2360: IFFALSE 2448
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
2362: LD_ADDR_VAR 0 5
2366: PUSH
2367: LD_VAR 0 5
2371: PUSH
2372: LD_VAR 0 3
2376: PUSH
2377: LD_VAR 0 4
2381: ARRAY
2382: PPUSH
2383: CALL_OW 266
2387: PUSH
2388: LD_VAR 0 3
2392: PUSH
2393: LD_VAR 0 4
2397: ARRAY
2398: PPUSH
2399: CALL_OW 250
2403: PUSH
2404: LD_VAR 0 3
2408: PUSH
2409: LD_VAR 0 4
2413: ARRAY
2414: PPUSH
2415: CALL_OW 251
2419: PUSH
2420: LD_VAR 0 3
2424: PUSH
2425: LD_VAR 0 4
2429: ARRAY
2430: PPUSH
2431: CALL_OW 254
2435: PUSH
2436: EMPTY
2437: LIST
2438: LIST
2439: LIST
2440: LIST
2441: PUSH
2442: EMPTY
2443: LIST
2444: ADD
2445: ST_TO_ADDR
2446: GO 2359
2448: POP
2449: POP
// result := list ;
2450: LD_ADDR_VAR 0 2
2454: PUSH
2455: LD_VAR 0 5
2459: ST_TO_ADDR
// end ;
2460: LD_VAR 0 2
2464: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
2465: LD_INT 0
2467: PPUSH
2468: PPUSH
2469: PPUSH
2470: PPUSH
2471: PPUSH
2472: PPUSH
2473: PPUSH
// if not factory then
2474: LD_VAR 0 1
2478: NOT
2479: IFFALSE 2483
// exit ;
2481: GO 3076
// if control = control_apeman then
2483: LD_VAR 0 4
2487: PUSH
2488: LD_INT 5
2490: EQUAL
2491: IFFALSE 2600
// begin tmp := UnitsInside ( factory ) ;
2493: LD_ADDR_VAR 0 8
2497: PUSH
2498: LD_VAR 0 1
2502: PPUSH
2503: CALL_OW 313
2507: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
2508: LD_VAR 0 8
2512: PPUSH
2513: LD_INT 25
2515: PUSH
2516: LD_INT 12
2518: PUSH
2519: EMPTY
2520: LIST
2521: LIST
2522: PPUSH
2523: CALL_OW 72
2527: NOT
2528: IFFALSE 2538
// control := control_manual ;
2530: LD_ADDR_VAR 0 4
2534: PUSH
2535: LD_INT 1
2537: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
2538: LD_ADDR_VAR 0 8
2542: PUSH
2543: LD_VAR 0 1
2547: PPUSH
2548: CALL 2235 0 1
2552: ST_TO_ADDR
// if tmp then
2553: LD_VAR 0 8
2557: IFFALSE 2600
// begin for i in tmp do
2559: LD_ADDR_VAR 0 7
2563: PUSH
2564: LD_VAR 0 8
2568: PUSH
2569: FOR_IN
2570: IFFALSE 2598
// if i [ 1 ] = b_ext_radio then
2572: LD_VAR 0 7
2576: PUSH
2577: LD_INT 1
2579: ARRAY
2580: PUSH
2581: LD_INT 22
2583: EQUAL
2584: IFFALSE 2596
// begin control := control_remote ;
2586: LD_ADDR_VAR 0 4
2590: PUSH
2591: LD_INT 2
2593: ST_TO_ADDR
// break ;
2594: GO 2598
// end ;
2596: GO 2569
2598: POP
2599: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
2600: LD_VAR 0 1
2604: PPUSH
2605: LD_VAR 0 2
2609: PPUSH
2610: LD_VAR 0 3
2614: PPUSH
2615: LD_VAR 0 4
2619: PPUSH
2620: LD_VAR 0 5
2624: PPUSH
2625: CALL_OW 448
2629: IFFALSE 2664
// begin result := [ chassis , engine , control , weapon ] ;
2631: LD_ADDR_VAR 0 6
2635: PUSH
2636: LD_VAR 0 2
2640: PUSH
2641: LD_VAR 0 3
2645: PUSH
2646: LD_VAR 0 4
2650: PUSH
2651: LD_VAR 0 5
2655: PUSH
2656: EMPTY
2657: LIST
2658: LIST
2659: LIST
2660: LIST
2661: ST_TO_ADDR
// exit ;
2662: GO 3076
// end ; _chassis := AvailableChassisList ( factory ) ;
2664: LD_ADDR_VAR 0 9
2668: PUSH
2669: LD_VAR 0 1
2673: PPUSH
2674: CALL_OW 475
2678: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
2679: LD_ADDR_VAR 0 11
2683: PUSH
2684: LD_VAR 0 1
2688: PPUSH
2689: CALL_OW 476
2693: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
2694: LD_ADDR_VAR 0 12
2698: PUSH
2699: LD_VAR 0 1
2703: PPUSH
2704: CALL_OW 477
2708: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
2709: LD_ADDR_VAR 0 10
2713: PUSH
2714: LD_VAR 0 1
2718: PPUSH
2719: CALL_OW 478
2723: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
2724: LD_VAR 0 9
2728: NOT
2729: PUSH
2730: LD_VAR 0 11
2734: NOT
2735: OR
2736: PUSH
2737: LD_VAR 0 12
2741: NOT
2742: OR
2743: PUSH
2744: LD_VAR 0 10
2748: NOT
2749: OR
2750: IFFALSE 2785
// begin result := [ chassis , engine , control , weapon ] ;
2752: LD_ADDR_VAR 0 6
2756: PUSH
2757: LD_VAR 0 2
2761: PUSH
2762: LD_VAR 0 3
2766: PUSH
2767: LD_VAR 0 4
2771: PUSH
2772: LD_VAR 0 5
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: LIST
2781: LIST
2782: ST_TO_ADDR
// exit ;
2783: GO 3076
// end ; if not chassis in _chassis then
2785: LD_VAR 0 2
2789: PUSH
2790: LD_VAR 0 9
2794: IN
2795: NOT
2796: IFFALSE 2822
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
2798: LD_ADDR_VAR 0 2
2802: PUSH
2803: LD_VAR 0 9
2807: PUSH
2808: LD_INT 1
2810: PPUSH
2811: LD_VAR 0 9
2815: PPUSH
2816: CALL_OW 12
2820: ARRAY
2821: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
2822: LD_VAR 0 2
2826: PPUSH
2827: LD_VAR 0 3
2831: PPUSH
2832: CALL 3081 0 2
2836: NOT
2837: IFFALSE 2896
// repeat engine := _engine [ 1 ] ;
2839: LD_ADDR_VAR 0 3
2843: PUSH
2844: LD_VAR 0 11
2848: PUSH
2849: LD_INT 1
2851: ARRAY
2852: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
2853: LD_ADDR_VAR 0 11
2857: PUSH
2858: LD_VAR 0 11
2862: PPUSH
2863: LD_INT 1
2865: PPUSH
2866: CALL_OW 3
2870: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
2871: LD_VAR 0 2
2875: PPUSH
2876: LD_VAR 0 3
2880: PPUSH
2881: CALL 3081 0 2
2885: PUSH
2886: LD_VAR 0 11
2890: PUSH
2891: EMPTY
2892: EQUAL
2893: OR
2894: IFFALSE 2839
// if not control in _control then
2896: LD_VAR 0 4
2900: PUSH
2901: LD_VAR 0 12
2905: IN
2906: NOT
2907: IFFALSE 2933
// control := _control [ rand ( 1 , _control ) ] ;
2909: LD_ADDR_VAR 0 4
2913: PUSH
2914: LD_VAR 0 12
2918: PUSH
2919: LD_INT 1
2921: PPUSH
2922: LD_VAR 0 12
2926: PPUSH
2927: CALL_OW 12
2931: ARRAY
2932: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
2933: LD_VAR 0 2
2937: PPUSH
2938: LD_VAR 0 5
2942: PPUSH
2943: CALL 3301 0 2
2947: NOT
2948: IFFALSE 3007
// repeat weapon := _weapon [ 1 ] ;
2950: LD_ADDR_VAR 0 5
2954: PUSH
2955: LD_VAR 0 10
2959: PUSH
2960: LD_INT 1
2962: ARRAY
2963: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
2964: LD_ADDR_VAR 0 10
2968: PUSH
2969: LD_VAR 0 10
2973: PPUSH
2974: LD_INT 1
2976: PPUSH
2977: CALL_OW 3
2981: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
2982: LD_VAR 0 2
2986: PPUSH
2987: LD_VAR 0 5
2991: PPUSH
2992: CALL 3301 0 2
2996: PUSH
2997: LD_VAR 0 10
3001: PUSH
3002: EMPTY
3003: EQUAL
3004: OR
3005: IFFALSE 2950
// result := [ ] ;
3007: LD_ADDR_VAR 0 6
3011: PUSH
3012: EMPTY
3013: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3014: LD_VAR 0 1
3018: PPUSH
3019: LD_VAR 0 2
3023: PPUSH
3024: LD_VAR 0 3
3028: PPUSH
3029: LD_VAR 0 4
3033: PPUSH
3034: LD_VAR 0 5
3038: PPUSH
3039: CALL_OW 448
3043: IFFALSE 3076
// result := [ chassis , engine , control , weapon ] ;
3045: LD_ADDR_VAR 0 6
3049: PUSH
3050: LD_VAR 0 2
3054: PUSH
3055: LD_VAR 0 3
3059: PUSH
3060: LD_VAR 0 4
3064: PUSH
3065: LD_VAR 0 5
3069: PUSH
3070: EMPTY
3071: LIST
3072: LIST
3073: LIST
3074: LIST
3075: ST_TO_ADDR
// end ;
3076: LD_VAR 0 6
3080: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
3081: LD_INT 0
3083: PPUSH
// if not chassis or not engine then
3084: LD_VAR 0 1
3088: NOT
3089: PUSH
3090: LD_VAR 0 2
3094: NOT
3095: OR
3096: IFFALSE 3100
// exit ;
3098: GO 3296
// case engine of engine_solar :
3100: LD_VAR 0 2
3104: PUSH
3105: LD_INT 2
3107: DOUBLE
3108: EQUAL
3109: IFTRUE 3113
3111: GO 3151
3113: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
3114: LD_ADDR_VAR 0 3
3118: PUSH
3119: LD_INT 11
3121: PUSH
3122: LD_INT 12
3124: PUSH
3125: LD_INT 13
3127: PUSH
3128: LD_INT 14
3130: PUSH
3131: LD_INT 1
3133: PUSH
3134: LD_INT 2
3136: PUSH
3137: LD_INT 3
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: LIST
3144: LIST
3145: LIST
3146: LIST
3147: LIST
3148: ST_TO_ADDR
3149: GO 3280
3151: LD_INT 1
3153: DOUBLE
3154: EQUAL
3155: IFTRUE 3159
3157: GO 3221
3159: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
3160: LD_ADDR_VAR 0 3
3164: PUSH
3165: LD_INT 11
3167: PUSH
3168: LD_INT 12
3170: PUSH
3171: LD_INT 13
3173: PUSH
3174: LD_INT 14
3176: PUSH
3177: LD_INT 1
3179: PUSH
3180: LD_INT 2
3182: PUSH
3183: LD_INT 3
3185: PUSH
3186: LD_INT 4
3188: PUSH
3189: LD_INT 5
3191: PUSH
3192: LD_INT 21
3194: PUSH
3195: LD_INT 23
3197: PUSH
3198: LD_INT 22
3200: PUSH
3201: LD_INT 24
3203: PUSH
3204: EMPTY
3205: LIST
3206: LIST
3207: LIST
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: LIST
3214: LIST
3215: LIST
3216: LIST
3217: LIST
3218: ST_TO_ADDR
3219: GO 3280
3221: LD_INT 3
3223: DOUBLE
3224: EQUAL
3225: IFTRUE 3229
3227: GO 3279
3229: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
3230: LD_ADDR_VAR 0 3
3234: PUSH
3235: LD_INT 13
3237: PUSH
3238: LD_INT 14
3240: PUSH
3241: LD_INT 2
3243: PUSH
3244: LD_INT 3
3246: PUSH
3247: LD_INT 4
3249: PUSH
3250: LD_INT 5
3252: PUSH
3253: LD_INT 21
3255: PUSH
3256: LD_INT 22
3258: PUSH
3259: LD_INT 23
3261: PUSH
3262: LD_INT 24
3264: PUSH
3265: EMPTY
3266: LIST
3267: LIST
3268: LIST
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: LIST
3276: ST_TO_ADDR
3277: GO 3280
3279: POP
// result := ( chassis in result ) ;
3280: LD_ADDR_VAR 0 3
3284: PUSH
3285: LD_VAR 0 1
3289: PUSH
3290: LD_VAR 0 3
3294: IN
3295: ST_TO_ADDR
// end ;
3296: LD_VAR 0 3
3300: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
3301: LD_INT 0
3303: PPUSH
// if not chassis or not weapon then
3304: LD_VAR 0 1
3308: NOT
3309: PUSH
3310: LD_VAR 0 2
3314: NOT
3315: OR
3316: IFFALSE 3320
// exit ;
3318: GO 4380
// case weapon of us_machine_gun :
3320: LD_VAR 0 2
3324: PUSH
3325: LD_INT 2
3327: DOUBLE
3328: EQUAL
3329: IFTRUE 3333
3331: GO 3363
3333: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
3334: LD_ADDR_VAR 0 3
3338: PUSH
3339: LD_INT 1
3341: PUSH
3342: LD_INT 2
3344: PUSH
3345: LD_INT 3
3347: PUSH
3348: LD_INT 4
3350: PUSH
3351: LD_INT 5
3353: PUSH
3354: EMPTY
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: LIST
3360: ST_TO_ADDR
3361: GO 4364
3363: LD_INT 3
3365: DOUBLE
3366: EQUAL
3367: IFTRUE 3371
3369: GO 3401
3371: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
3372: LD_ADDR_VAR 0 3
3376: PUSH
3377: LD_INT 1
3379: PUSH
3380: LD_INT 2
3382: PUSH
3383: LD_INT 3
3385: PUSH
3386: LD_INT 4
3388: PUSH
3389: LD_INT 5
3391: PUSH
3392: EMPTY
3393: LIST
3394: LIST
3395: LIST
3396: LIST
3397: LIST
3398: ST_TO_ADDR
3399: GO 4364
3401: LD_INT 11
3403: DOUBLE
3404: EQUAL
3405: IFTRUE 3409
3407: GO 3439
3409: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
3410: LD_ADDR_VAR 0 3
3414: PUSH
3415: LD_INT 1
3417: PUSH
3418: LD_INT 2
3420: PUSH
3421: LD_INT 3
3423: PUSH
3424: LD_INT 4
3426: PUSH
3427: LD_INT 5
3429: PUSH
3430: EMPTY
3431: LIST
3432: LIST
3433: LIST
3434: LIST
3435: LIST
3436: ST_TO_ADDR
3437: GO 4364
3439: LD_INT 4
3441: DOUBLE
3442: EQUAL
3443: IFTRUE 3447
3445: GO 3473
3447: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
3448: LD_ADDR_VAR 0 3
3452: PUSH
3453: LD_INT 2
3455: PUSH
3456: LD_INT 3
3458: PUSH
3459: LD_INT 4
3461: PUSH
3462: LD_INT 5
3464: PUSH
3465: EMPTY
3466: LIST
3467: LIST
3468: LIST
3469: LIST
3470: ST_TO_ADDR
3471: GO 4364
3473: LD_INT 5
3475: DOUBLE
3476: EQUAL
3477: IFTRUE 3481
3479: GO 3507
3481: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
3482: LD_ADDR_VAR 0 3
3486: PUSH
3487: LD_INT 2
3489: PUSH
3490: LD_INT 3
3492: PUSH
3493: LD_INT 4
3495: PUSH
3496: LD_INT 5
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: ST_TO_ADDR
3505: GO 4364
3507: LD_INT 9
3509: DOUBLE
3510: EQUAL
3511: IFTRUE 3515
3513: GO 3541
3515: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
3516: LD_ADDR_VAR 0 3
3520: PUSH
3521: LD_INT 2
3523: PUSH
3524: LD_INT 3
3526: PUSH
3527: LD_INT 4
3529: PUSH
3530: LD_INT 5
3532: PUSH
3533: EMPTY
3534: LIST
3535: LIST
3536: LIST
3537: LIST
3538: ST_TO_ADDR
3539: GO 4364
3541: LD_INT 7
3543: DOUBLE
3544: EQUAL
3545: IFTRUE 3549
3547: GO 3575
3549: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
3550: LD_ADDR_VAR 0 3
3554: PUSH
3555: LD_INT 2
3557: PUSH
3558: LD_INT 3
3560: PUSH
3561: LD_INT 4
3563: PUSH
3564: LD_INT 5
3566: PUSH
3567: EMPTY
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: ST_TO_ADDR
3573: GO 4364
3575: LD_INT 12
3577: DOUBLE
3578: EQUAL
3579: IFTRUE 3583
3581: GO 3609
3583: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
3584: LD_ADDR_VAR 0 3
3588: PUSH
3589: LD_INT 2
3591: PUSH
3592: LD_INT 3
3594: PUSH
3595: LD_INT 4
3597: PUSH
3598: LD_INT 5
3600: PUSH
3601: EMPTY
3602: LIST
3603: LIST
3604: LIST
3605: LIST
3606: ST_TO_ADDR
3607: GO 4364
3609: LD_INT 13
3611: DOUBLE
3612: EQUAL
3613: IFTRUE 3617
3615: GO 3643
3617: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
3618: LD_ADDR_VAR 0 3
3622: PUSH
3623: LD_INT 2
3625: PUSH
3626: LD_INT 3
3628: PUSH
3629: LD_INT 4
3631: PUSH
3632: LD_INT 5
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: LIST
3639: LIST
3640: ST_TO_ADDR
3641: GO 4364
3643: LD_INT 14
3645: DOUBLE
3646: EQUAL
3647: IFTRUE 3651
3649: GO 3669
3651: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
3652: LD_ADDR_VAR 0 3
3656: PUSH
3657: LD_INT 4
3659: PUSH
3660: LD_INT 5
3662: PUSH
3663: EMPTY
3664: LIST
3665: LIST
3666: ST_TO_ADDR
3667: GO 4364
3669: LD_INT 6
3671: DOUBLE
3672: EQUAL
3673: IFTRUE 3677
3675: GO 3695
3677: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
3678: LD_ADDR_VAR 0 3
3682: PUSH
3683: LD_INT 4
3685: PUSH
3686: LD_INT 5
3688: PUSH
3689: EMPTY
3690: LIST
3691: LIST
3692: ST_TO_ADDR
3693: GO 4364
3695: LD_INT 10
3697: DOUBLE
3698: EQUAL
3699: IFTRUE 3703
3701: GO 3721
3703: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
3704: LD_ADDR_VAR 0 3
3708: PUSH
3709: LD_INT 4
3711: PUSH
3712: LD_INT 5
3714: PUSH
3715: EMPTY
3716: LIST
3717: LIST
3718: ST_TO_ADDR
3719: GO 4364
3721: LD_INT 22
3723: DOUBLE
3724: EQUAL
3725: IFTRUE 3729
3727: GO 3755
3729: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
3730: LD_ADDR_VAR 0 3
3734: PUSH
3735: LD_INT 11
3737: PUSH
3738: LD_INT 12
3740: PUSH
3741: LD_INT 13
3743: PUSH
3744: LD_INT 14
3746: PUSH
3747: EMPTY
3748: LIST
3749: LIST
3750: LIST
3751: LIST
3752: ST_TO_ADDR
3753: GO 4364
3755: LD_INT 23
3757: DOUBLE
3758: EQUAL
3759: IFTRUE 3763
3761: GO 3789
3763: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
3764: LD_ADDR_VAR 0 3
3768: PUSH
3769: LD_INT 11
3771: PUSH
3772: LD_INT 12
3774: PUSH
3775: LD_INT 13
3777: PUSH
3778: LD_INT 14
3780: PUSH
3781: EMPTY
3782: LIST
3783: LIST
3784: LIST
3785: LIST
3786: ST_TO_ADDR
3787: GO 4364
3789: LD_INT 24
3791: DOUBLE
3792: EQUAL
3793: IFTRUE 3797
3795: GO 3823
3797: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
3798: LD_ADDR_VAR 0 3
3802: PUSH
3803: LD_INT 11
3805: PUSH
3806: LD_INT 12
3808: PUSH
3809: LD_INT 13
3811: PUSH
3812: LD_INT 14
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: ST_TO_ADDR
3821: GO 4364
3823: LD_INT 30
3825: DOUBLE
3826: EQUAL
3827: IFTRUE 3831
3829: GO 3857
3831: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
3832: LD_ADDR_VAR 0 3
3836: PUSH
3837: LD_INT 11
3839: PUSH
3840: LD_INT 12
3842: PUSH
3843: LD_INT 13
3845: PUSH
3846: LD_INT 14
3848: PUSH
3849: EMPTY
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: ST_TO_ADDR
3855: GO 4364
3857: LD_INT 25
3859: DOUBLE
3860: EQUAL
3861: IFTRUE 3865
3863: GO 3883
3865: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
3866: LD_ADDR_VAR 0 3
3870: PUSH
3871: LD_INT 13
3873: PUSH
3874: LD_INT 14
3876: PUSH
3877: EMPTY
3878: LIST
3879: LIST
3880: ST_TO_ADDR
3881: GO 4364
3883: LD_INT 27
3885: DOUBLE
3886: EQUAL
3887: IFTRUE 3891
3889: GO 3909
3891: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
3892: LD_ADDR_VAR 0 3
3896: PUSH
3897: LD_INT 13
3899: PUSH
3900: LD_INT 14
3902: PUSH
3903: EMPTY
3904: LIST
3905: LIST
3906: ST_TO_ADDR
3907: GO 4364
3909: LD_INT 92
3911: DOUBLE
3912: EQUAL
3913: IFTRUE 3917
3915: GO 3943
3917: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
3918: LD_ADDR_VAR 0 3
3922: PUSH
3923: LD_INT 11
3925: PUSH
3926: LD_INT 12
3928: PUSH
3929: LD_INT 13
3931: PUSH
3932: LD_INT 14
3934: PUSH
3935: EMPTY
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: ST_TO_ADDR
3941: GO 4364
3943: LD_INT 28
3945: DOUBLE
3946: EQUAL
3947: IFTRUE 3951
3949: GO 3969
3951: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
3952: LD_ADDR_VAR 0 3
3956: PUSH
3957: LD_INT 13
3959: PUSH
3960: LD_INT 14
3962: PUSH
3963: EMPTY
3964: LIST
3965: LIST
3966: ST_TO_ADDR
3967: GO 4364
3969: LD_INT 29
3971: DOUBLE
3972: EQUAL
3973: IFTRUE 3977
3975: GO 3995
3977: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
3978: LD_ADDR_VAR 0 3
3982: PUSH
3983: LD_INT 13
3985: PUSH
3986: LD_INT 14
3988: PUSH
3989: EMPTY
3990: LIST
3991: LIST
3992: ST_TO_ADDR
3993: GO 4364
3995: LD_INT 31
3997: DOUBLE
3998: EQUAL
3999: IFTRUE 4003
4001: GO 4021
4003: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
4004: LD_ADDR_VAR 0 3
4008: PUSH
4009: LD_INT 13
4011: PUSH
4012: LD_INT 14
4014: PUSH
4015: EMPTY
4016: LIST
4017: LIST
4018: ST_TO_ADDR
4019: GO 4364
4021: LD_INT 26
4023: DOUBLE
4024: EQUAL
4025: IFTRUE 4029
4027: GO 4047
4029: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
4030: LD_ADDR_VAR 0 3
4034: PUSH
4035: LD_INT 13
4037: PUSH
4038: LD_INT 14
4040: PUSH
4041: EMPTY
4042: LIST
4043: LIST
4044: ST_TO_ADDR
4045: GO 4364
4047: LD_INT 42
4049: DOUBLE
4050: EQUAL
4051: IFTRUE 4055
4053: GO 4081
4055: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
4056: LD_ADDR_VAR 0 3
4060: PUSH
4061: LD_INT 21
4063: PUSH
4064: LD_INT 22
4066: PUSH
4067: LD_INT 23
4069: PUSH
4070: LD_INT 24
4072: PUSH
4073: EMPTY
4074: LIST
4075: LIST
4076: LIST
4077: LIST
4078: ST_TO_ADDR
4079: GO 4364
4081: LD_INT 43
4083: DOUBLE
4084: EQUAL
4085: IFTRUE 4089
4087: GO 4115
4089: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
4090: LD_ADDR_VAR 0 3
4094: PUSH
4095: LD_INT 21
4097: PUSH
4098: LD_INT 22
4100: PUSH
4101: LD_INT 23
4103: PUSH
4104: LD_INT 24
4106: PUSH
4107: EMPTY
4108: LIST
4109: LIST
4110: LIST
4111: LIST
4112: ST_TO_ADDR
4113: GO 4364
4115: LD_INT 44
4117: DOUBLE
4118: EQUAL
4119: IFTRUE 4123
4121: GO 4149
4123: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
4124: LD_ADDR_VAR 0 3
4128: PUSH
4129: LD_INT 21
4131: PUSH
4132: LD_INT 22
4134: PUSH
4135: LD_INT 23
4137: PUSH
4138: LD_INT 24
4140: PUSH
4141: EMPTY
4142: LIST
4143: LIST
4144: LIST
4145: LIST
4146: ST_TO_ADDR
4147: GO 4364
4149: LD_INT 45
4151: DOUBLE
4152: EQUAL
4153: IFTRUE 4157
4155: GO 4183
4157: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
4158: LD_ADDR_VAR 0 3
4162: PUSH
4163: LD_INT 21
4165: PUSH
4166: LD_INT 22
4168: PUSH
4169: LD_INT 23
4171: PUSH
4172: LD_INT 24
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: LIST
4179: LIST
4180: ST_TO_ADDR
4181: GO 4364
4183: LD_INT 49
4185: DOUBLE
4186: EQUAL
4187: IFTRUE 4191
4189: GO 4217
4191: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
4192: LD_ADDR_VAR 0 3
4196: PUSH
4197: LD_INT 21
4199: PUSH
4200: LD_INT 22
4202: PUSH
4203: LD_INT 23
4205: PUSH
4206: LD_INT 24
4208: PUSH
4209: EMPTY
4210: LIST
4211: LIST
4212: LIST
4213: LIST
4214: ST_TO_ADDR
4215: GO 4364
4217: LD_INT 51
4219: DOUBLE
4220: EQUAL
4221: IFTRUE 4225
4223: GO 4251
4225: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
4226: LD_ADDR_VAR 0 3
4230: PUSH
4231: LD_INT 21
4233: PUSH
4234: LD_INT 22
4236: PUSH
4237: LD_INT 23
4239: PUSH
4240: LD_INT 24
4242: PUSH
4243: EMPTY
4244: LIST
4245: LIST
4246: LIST
4247: LIST
4248: ST_TO_ADDR
4249: GO 4364
4251: LD_INT 52
4253: DOUBLE
4254: EQUAL
4255: IFTRUE 4259
4257: GO 4285
4259: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
4260: LD_ADDR_VAR 0 3
4264: PUSH
4265: LD_INT 21
4267: PUSH
4268: LD_INT 22
4270: PUSH
4271: LD_INT 23
4273: PUSH
4274: LD_INT 24
4276: PUSH
4277: EMPTY
4278: LIST
4279: LIST
4280: LIST
4281: LIST
4282: ST_TO_ADDR
4283: GO 4364
4285: LD_INT 53
4287: DOUBLE
4288: EQUAL
4289: IFTRUE 4293
4291: GO 4311
4293: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
4294: LD_ADDR_VAR 0 3
4298: PUSH
4299: LD_INT 23
4301: PUSH
4302: LD_INT 24
4304: PUSH
4305: EMPTY
4306: LIST
4307: LIST
4308: ST_TO_ADDR
4309: GO 4364
4311: LD_INT 46
4313: DOUBLE
4314: EQUAL
4315: IFTRUE 4319
4317: GO 4337
4319: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
4320: LD_ADDR_VAR 0 3
4324: PUSH
4325: LD_INT 23
4327: PUSH
4328: LD_INT 24
4330: PUSH
4331: EMPTY
4332: LIST
4333: LIST
4334: ST_TO_ADDR
4335: GO 4364
4337: LD_INT 47
4339: DOUBLE
4340: EQUAL
4341: IFTRUE 4345
4343: GO 4363
4345: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4346: LD_ADDR_VAR 0 3
4350: PUSH
4351: LD_INT 23
4353: PUSH
4354: LD_INT 24
4356: PUSH
4357: EMPTY
4358: LIST
4359: LIST
4360: ST_TO_ADDR
4361: GO 4364
4363: POP
// result := ( chassis in result ) ;
4364: LD_ADDR_VAR 0 3
4368: PUSH
4369: LD_VAR 0 1
4373: PUSH
4374: LD_VAR 0 3
4378: IN
4379: ST_TO_ADDR
// end ;
4380: LD_VAR 0 3
4384: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
4385: LD_INT 0
4387: PPUSH
4388: PPUSH
4389: PPUSH
4390: PPUSH
4391: PPUSH
4392: PPUSH
4393: PPUSH
// result := array ;
4394: LD_ADDR_VAR 0 5
4398: PUSH
4399: LD_VAR 0 1
4403: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
4404: LD_VAR 0 1
4408: NOT
4409: PUSH
4410: LD_VAR 0 2
4414: NOT
4415: OR
4416: PUSH
4417: LD_VAR 0 3
4421: NOT
4422: OR
4423: PUSH
4424: LD_VAR 0 2
4428: PUSH
4429: LD_VAR 0 1
4433: GREATER
4434: OR
4435: PUSH
4436: LD_VAR 0 3
4440: PUSH
4441: LD_VAR 0 1
4445: GREATER
4446: OR
4447: IFFALSE 4451
// exit ;
4449: GO 4747
// if direction then
4451: LD_VAR 0 4
4455: IFFALSE 4519
// begin d := 1 ;
4457: LD_ADDR_VAR 0 9
4461: PUSH
4462: LD_INT 1
4464: ST_TO_ADDR
// if i_from > i_to then
4465: LD_VAR 0 2
4469: PUSH
4470: LD_VAR 0 3
4474: GREATER
4475: IFFALSE 4501
// length := ( array - i_from ) + i_to else
4477: LD_ADDR_VAR 0 11
4481: PUSH
4482: LD_VAR 0 1
4486: PUSH
4487: LD_VAR 0 2
4491: MINUS
4492: PUSH
4493: LD_VAR 0 3
4497: PLUS
4498: ST_TO_ADDR
4499: GO 4517
// length := i_to - i_from ;
4501: LD_ADDR_VAR 0 11
4505: PUSH
4506: LD_VAR 0 3
4510: PUSH
4511: LD_VAR 0 2
4515: MINUS
4516: ST_TO_ADDR
// end else
4517: GO 4580
// begin d := - 1 ;
4519: LD_ADDR_VAR 0 9
4523: PUSH
4524: LD_INT 1
4526: NEG
4527: ST_TO_ADDR
// if i_from > i_to then
4528: LD_VAR 0 2
4532: PUSH
4533: LD_VAR 0 3
4537: GREATER
4538: IFFALSE 4558
// length := i_from - i_to else
4540: LD_ADDR_VAR 0 11
4544: PUSH
4545: LD_VAR 0 2
4549: PUSH
4550: LD_VAR 0 3
4554: MINUS
4555: ST_TO_ADDR
4556: GO 4580
// length := ( array - i_to ) + i_from ;
4558: LD_ADDR_VAR 0 11
4562: PUSH
4563: LD_VAR 0 1
4567: PUSH
4568: LD_VAR 0 3
4572: MINUS
4573: PUSH
4574: LD_VAR 0 2
4578: PLUS
4579: ST_TO_ADDR
// end ; if not length then
4580: LD_VAR 0 11
4584: NOT
4585: IFFALSE 4589
// exit ;
4587: GO 4747
// tmp := array ;
4589: LD_ADDR_VAR 0 10
4593: PUSH
4594: LD_VAR 0 1
4598: ST_TO_ADDR
// for i = 1 to length do
4599: LD_ADDR_VAR 0 6
4603: PUSH
4604: DOUBLE
4605: LD_INT 1
4607: DEC
4608: ST_TO_ADDR
4609: LD_VAR 0 11
4613: PUSH
4614: FOR_TO
4615: IFFALSE 4735
// begin for j = 1 to array do
4617: LD_ADDR_VAR 0 7
4621: PUSH
4622: DOUBLE
4623: LD_INT 1
4625: DEC
4626: ST_TO_ADDR
4627: LD_VAR 0 1
4631: PUSH
4632: FOR_TO
4633: IFFALSE 4721
// begin k := j + d ;
4635: LD_ADDR_VAR 0 8
4639: PUSH
4640: LD_VAR 0 7
4644: PUSH
4645: LD_VAR 0 9
4649: PLUS
4650: ST_TO_ADDR
// if k > array then
4651: LD_VAR 0 8
4655: PUSH
4656: LD_VAR 0 1
4660: GREATER
4661: IFFALSE 4671
// k := 1 ;
4663: LD_ADDR_VAR 0 8
4667: PUSH
4668: LD_INT 1
4670: ST_TO_ADDR
// if not k then
4671: LD_VAR 0 8
4675: NOT
4676: IFFALSE 4688
// k := array ;
4678: LD_ADDR_VAR 0 8
4682: PUSH
4683: LD_VAR 0 1
4687: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
4688: LD_ADDR_VAR 0 10
4692: PUSH
4693: LD_VAR 0 10
4697: PPUSH
4698: LD_VAR 0 8
4702: PPUSH
4703: LD_VAR 0 1
4707: PUSH
4708: LD_VAR 0 7
4712: ARRAY
4713: PPUSH
4714: CALL_OW 1
4718: ST_TO_ADDR
// end ;
4719: GO 4632
4721: POP
4722: POP
// array := tmp ;
4723: LD_ADDR_VAR 0 1
4727: PUSH
4728: LD_VAR 0 10
4732: ST_TO_ADDR
// end ;
4733: GO 4614
4735: POP
4736: POP
// result := array ;
4737: LD_ADDR_VAR 0 5
4741: PUSH
4742: LD_VAR 0 1
4746: ST_TO_ADDR
// end ;
4747: LD_VAR 0 5
4751: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
4752: LD_INT 0
4754: PPUSH
4755: PPUSH
// result := 0 ;
4756: LD_ADDR_VAR 0 3
4760: PUSH
4761: LD_INT 0
4763: ST_TO_ADDR
// if not array or not value in array then
4764: LD_VAR 0 1
4768: NOT
4769: PUSH
4770: LD_VAR 0 2
4774: PUSH
4775: LD_VAR 0 1
4779: IN
4780: NOT
4781: OR
4782: IFFALSE 4786
// exit ;
4784: GO 4840
// for i = 1 to array do
4786: LD_ADDR_VAR 0 4
4790: PUSH
4791: DOUBLE
4792: LD_INT 1
4794: DEC
4795: ST_TO_ADDR
4796: LD_VAR 0 1
4800: PUSH
4801: FOR_TO
4802: IFFALSE 4838
// if value = array [ i ] then
4804: LD_VAR 0 2
4808: PUSH
4809: LD_VAR 0 1
4813: PUSH
4814: LD_VAR 0 4
4818: ARRAY
4819: EQUAL
4820: IFFALSE 4836
// begin result := i ;
4822: LD_ADDR_VAR 0 3
4826: PUSH
4827: LD_VAR 0 4
4831: ST_TO_ADDR
// exit ;
4832: POP
4833: POP
4834: GO 4840
// end ;
4836: GO 4801
4838: POP
4839: POP
// end ;
4840: LD_VAR 0 3
4844: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
4845: LD_INT 0
4847: PPUSH
// vc_chassis := chassis ;
4848: LD_ADDR_OWVAR 37
4852: PUSH
4853: LD_VAR 0 1
4857: ST_TO_ADDR
// vc_engine := engine ;
4858: LD_ADDR_OWVAR 39
4862: PUSH
4863: LD_VAR 0 2
4867: ST_TO_ADDR
// vc_control := control ;
4868: LD_ADDR_OWVAR 38
4872: PUSH
4873: LD_VAR 0 3
4877: ST_TO_ADDR
// vc_weapon := weapon ;
4878: LD_ADDR_OWVAR 40
4882: PUSH
4883: LD_VAR 0 4
4887: ST_TO_ADDR
// vc_fuel_battery := fuel ;
4888: LD_ADDR_OWVAR 41
4892: PUSH
4893: LD_VAR 0 5
4897: ST_TO_ADDR
// end ;
4898: LD_VAR 0 6
4902: RET
// export function WantPlant ( unit ) ; var task ; begin
4903: LD_INT 0
4905: PPUSH
4906: PPUSH
// result := false ;
4907: LD_ADDR_VAR 0 2
4911: PUSH
4912: LD_INT 0
4914: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
4915: LD_ADDR_VAR 0 3
4919: PUSH
4920: LD_VAR 0 1
4924: PPUSH
4925: CALL_OW 437
4929: ST_TO_ADDR
// if task then
4930: LD_VAR 0 3
4934: IFFALSE 4962
// if task [ 1 ] [ 1 ] = p then
4936: LD_VAR 0 3
4940: PUSH
4941: LD_INT 1
4943: ARRAY
4944: PUSH
4945: LD_INT 1
4947: ARRAY
4948: PUSH
4949: LD_STRING p
4951: EQUAL
4952: IFFALSE 4962
// result := true ;
4954: LD_ADDR_VAR 0 2
4958: PUSH
4959: LD_INT 1
4961: ST_TO_ADDR
// end ;
4962: LD_VAR 0 2
4966: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
4967: LD_INT 0
4969: PPUSH
4970: PPUSH
4971: PPUSH
4972: PPUSH
// if pos < 1 then
4973: LD_VAR 0 2
4977: PUSH
4978: LD_INT 1
4980: LESS
4981: IFFALSE 4985
// exit ;
4983: GO 5288
// if pos = 1 then
4985: LD_VAR 0 2
4989: PUSH
4990: LD_INT 1
4992: EQUAL
4993: IFFALSE 5026
// result := Replace ( arr , pos [ 1 ] , value ) else
4995: LD_ADDR_VAR 0 4
4999: PUSH
5000: LD_VAR 0 1
5004: PPUSH
5005: LD_VAR 0 2
5009: PUSH
5010: LD_INT 1
5012: ARRAY
5013: PPUSH
5014: LD_VAR 0 3
5018: PPUSH
5019: CALL_OW 1
5023: ST_TO_ADDR
5024: GO 5288
// begin tmp := arr ;
5026: LD_ADDR_VAR 0 6
5030: PUSH
5031: LD_VAR 0 1
5035: ST_TO_ADDR
// s_arr := [ tmp ] ;
5036: LD_ADDR_VAR 0 7
5040: PUSH
5041: LD_VAR 0 6
5045: PUSH
5046: EMPTY
5047: LIST
5048: ST_TO_ADDR
// for i = 1 to pos - 1 do
5049: LD_ADDR_VAR 0 5
5053: PUSH
5054: DOUBLE
5055: LD_INT 1
5057: DEC
5058: ST_TO_ADDR
5059: LD_VAR 0 2
5063: PUSH
5064: LD_INT 1
5066: MINUS
5067: PUSH
5068: FOR_TO
5069: IFFALSE 5114
// begin tmp := tmp [ pos [ i ] ] ;
5071: LD_ADDR_VAR 0 6
5075: PUSH
5076: LD_VAR 0 6
5080: PUSH
5081: LD_VAR 0 2
5085: PUSH
5086: LD_VAR 0 5
5090: ARRAY
5091: ARRAY
5092: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
5093: LD_ADDR_VAR 0 7
5097: PUSH
5098: LD_VAR 0 7
5102: PUSH
5103: LD_VAR 0 6
5107: PUSH
5108: EMPTY
5109: LIST
5110: ADD
5111: ST_TO_ADDR
// end ;
5112: GO 5068
5114: POP
5115: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
5116: LD_ADDR_VAR 0 6
5120: PUSH
5121: LD_VAR 0 6
5125: PPUSH
5126: LD_VAR 0 2
5130: PUSH
5131: LD_VAR 0 2
5135: ARRAY
5136: PPUSH
5137: LD_VAR 0 3
5141: PPUSH
5142: CALL_OW 1
5146: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
5147: LD_ADDR_VAR 0 7
5151: PUSH
5152: LD_VAR 0 7
5156: PPUSH
5157: LD_VAR 0 7
5161: PPUSH
5162: LD_VAR 0 6
5166: PPUSH
5167: CALL_OW 1
5171: ST_TO_ADDR
// for i = s_arr downto 2 do
5172: LD_ADDR_VAR 0 5
5176: PUSH
5177: DOUBLE
5178: LD_VAR 0 7
5182: INC
5183: ST_TO_ADDR
5184: LD_INT 2
5186: PUSH
5187: FOR_DOWNTO
5188: IFFALSE 5272
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
5190: LD_ADDR_VAR 0 6
5194: PUSH
5195: LD_VAR 0 7
5199: PUSH
5200: LD_VAR 0 5
5204: PUSH
5205: LD_INT 1
5207: MINUS
5208: ARRAY
5209: PPUSH
5210: LD_VAR 0 2
5214: PUSH
5215: LD_VAR 0 5
5219: PUSH
5220: LD_INT 1
5222: MINUS
5223: ARRAY
5224: PPUSH
5225: LD_VAR 0 7
5229: PUSH
5230: LD_VAR 0 5
5234: ARRAY
5235: PPUSH
5236: CALL_OW 1
5240: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
5241: LD_ADDR_VAR 0 7
5245: PUSH
5246: LD_VAR 0 7
5250: PPUSH
5251: LD_VAR 0 5
5255: PUSH
5256: LD_INT 1
5258: MINUS
5259: PPUSH
5260: LD_VAR 0 6
5264: PPUSH
5265: CALL_OW 1
5269: ST_TO_ADDR
// end ;
5270: GO 5187
5272: POP
5273: POP
// result := s_arr [ 1 ] ;
5274: LD_ADDR_VAR 0 4
5278: PUSH
5279: LD_VAR 0 7
5283: PUSH
5284: LD_INT 1
5286: ARRAY
5287: ST_TO_ADDR
// end ; end ;
5288: LD_VAR 0 4
5292: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
5293: LD_INT 0
5295: PPUSH
5296: PPUSH
// if not list then
5297: LD_VAR 0 1
5301: NOT
5302: IFFALSE 5306
// exit ;
5304: GO 5397
// i := list [ pos1 ] ;
5306: LD_ADDR_VAR 0 5
5310: PUSH
5311: LD_VAR 0 1
5315: PUSH
5316: LD_VAR 0 2
5320: ARRAY
5321: ST_TO_ADDR
// if not i then
5322: LD_VAR 0 5
5326: NOT
5327: IFFALSE 5331
// exit ;
5329: GO 5397
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
5331: LD_ADDR_VAR 0 1
5335: PUSH
5336: LD_VAR 0 1
5340: PPUSH
5341: LD_VAR 0 2
5345: PPUSH
5346: LD_VAR 0 1
5350: PUSH
5351: LD_VAR 0 3
5355: ARRAY
5356: PPUSH
5357: CALL_OW 1
5361: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
5362: LD_ADDR_VAR 0 1
5366: PUSH
5367: LD_VAR 0 1
5371: PPUSH
5372: LD_VAR 0 3
5376: PPUSH
5377: LD_VAR 0 5
5381: PPUSH
5382: CALL_OW 1
5386: ST_TO_ADDR
// result := list ;
5387: LD_ADDR_VAR 0 4
5391: PUSH
5392: LD_VAR 0 1
5396: ST_TO_ADDR
// end ;
5397: LD_VAR 0 4
5401: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
5402: LD_INT 0
5404: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
5405: LD_ADDR_VAR 0 5
5409: PUSH
5410: LD_VAR 0 1
5414: PPUSH
5415: CALL_OW 250
5419: PPUSH
5420: LD_VAR 0 1
5424: PPUSH
5425: CALL_OW 251
5429: PPUSH
5430: LD_VAR 0 2
5434: PPUSH
5435: LD_VAR 0 3
5439: PPUSH
5440: LD_VAR 0 4
5444: PPUSH
5445: CALL 5455 0 5
5449: ST_TO_ADDR
// end ;
5450: LD_VAR 0 5
5454: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
5455: LD_INT 0
5457: PPUSH
5458: PPUSH
5459: PPUSH
5460: PPUSH
// if not list then
5461: LD_VAR 0 3
5465: NOT
5466: IFFALSE 5470
// exit ;
5468: GO 5858
// result := [ ] ;
5470: LD_ADDR_VAR 0 6
5474: PUSH
5475: EMPTY
5476: ST_TO_ADDR
// for i in list do
5477: LD_ADDR_VAR 0 7
5481: PUSH
5482: LD_VAR 0 3
5486: PUSH
5487: FOR_IN
5488: IFFALSE 5690
// begin tmp := GetDistUnitXY ( i , x , y ) ;
5490: LD_ADDR_VAR 0 9
5494: PUSH
5495: LD_VAR 0 7
5499: PPUSH
5500: LD_VAR 0 1
5504: PPUSH
5505: LD_VAR 0 2
5509: PPUSH
5510: CALL_OW 297
5514: ST_TO_ADDR
// if not result then
5515: LD_VAR 0 6
5519: NOT
5520: IFFALSE 5546
// result := [ [ i , tmp ] ] else
5522: LD_ADDR_VAR 0 6
5526: PUSH
5527: LD_VAR 0 7
5531: PUSH
5532: LD_VAR 0 9
5536: PUSH
5537: EMPTY
5538: LIST
5539: LIST
5540: PUSH
5541: EMPTY
5542: LIST
5543: ST_TO_ADDR
5544: GO 5688
// begin if result [ result ] [ 2 ] < tmp then
5546: LD_VAR 0 6
5550: PUSH
5551: LD_VAR 0 6
5555: ARRAY
5556: PUSH
5557: LD_INT 2
5559: ARRAY
5560: PUSH
5561: LD_VAR 0 9
5565: LESS
5566: IFFALSE 5608
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
5568: LD_ADDR_VAR 0 6
5572: PUSH
5573: LD_VAR 0 6
5577: PPUSH
5578: LD_VAR 0 6
5582: PUSH
5583: LD_INT 1
5585: PLUS
5586: PPUSH
5587: LD_VAR 0 7
5591: PUSH
5592: LD_VAR 0 9
5596: PUSH
5597: EMPTY
5598: LIST
5599: LIST
5600: PPUSH
5601: CALL_OW 2
5605: ST_TO_ADDR
5606: GO 5688
// for j = 1 to result do
5608: LD_ADDR_VAR 0 8
5612: PUSH
5613: DOUBLE
5614: LD_INT 1
5616: DEC
5617: ST_TO_ADDR
5618: LD_VAR 0 6
5622: PUSH
5623: FOR_TO
5624: IFFALSE 5686
// begin if tmp < result [ j ] [ 2 ] then
5626: LD_VAR 0 9
5630: PUSH
5631: LD_VAR 0 6
5635: PUSH
5636: LD_VAR 0 8
5640: ARRAY
5641: PUSH
5642: LD_INT 2
5644: ARRAY
5645: LESS
5646: IFFALSE 5684
// begin result := Insert ( result , j , [ i , tmp ] ) ;
5648: LD_ADDR_VAR 0 6
5652: PUSH
5653: LD_VAR 0 6
5657: PPUSH
5658: LD_VAR 0 8
5662: PPUSH
5663: LD_VAR 0 7
5667: PUSH
5668: LD_VAR 0 9
5672: PUSH
5673: EMPTY
5674: LIST
5675: LIST
5676: PPUSH
5677: CALL_OW 2
5681: ST_TO_ADDR
// break ;
5682: GO 5686
// end ; end ;
5684: GO 5623
5686: POP
5687: POP
// end ; end ;
5688: GO 5487
5690: POP
5691: POP
// if result and not asc then
5692: LD_VAR 0 6
5696: PUSH
5697: LD_VAR 0 4
5701: NOT
5702: AND
5703: IFFALSE 5778
// begin tmp := result ;
5705: LD_ADDR_VAR 0 9
5709: PUSH
5710: LD_VAR 0 6
5714: ST_TO_ADDR
// for i = tmp downto 1 do
5715: LD_ADDR_VAR 0 7
5719: PUSH
5720: DOUBLE
5721: LD_VAR 0 9
5725: INC
5726: ST_TO_ADDR
5727: LD_INT 1
5729: PUSH
5730: FOR_DOWNTO
5731: IFFALSE 5776
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
5733: LD_ADDR_VAR 0 6
5737: PUSH
5738: LD_VAR 0 6
5742: PPUSH
5743: LD_VAR 0 9
5747: PUSH
5748: LD_VAR 0 7
5752: MINUS
5753: PUSH
5754: LD_INT 1
5756: PLUS
5757: PPUSH
5758: LD_VAR 0 9
5762: PUSH
5763: LD_VAR 0 7
5767: ARRAY
5768: PPUSH
5769: CALL_OW 1
5773: ST_TO_ADDR
5774: GO 5730
5776: POP
5777: POP
// end ; tmp := [ ] ;
5778: LD_ADDR_VAR 0 9
5782: PUSH
5783: EMPTY
5784: ST_TO_ADDR
// if mode then
5785: LD_VAR 0 5
5789: IFFALSE 5858
// begin for i = 1 to result do
5791: LD_ADDR_VAR 0 7
5795: PUSH
5796: DOUBLE
5797: LD_INT 1
5799: DEC
5800: ST_TO_ADDR
5801: LD_VAR 0 6
5805: PUSH
5806: FOR_TO
5807: IFFALSE 5846
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
5809: LD_ADDR_VAR 0 9
5813: PUSH
5814: LD_VAR 0 9
5818: PPUSH
5819: LD_VAR 0 7
5823: PPUSH
5824: LD_VAR 0 6
5828: PUSH
5829: LD_VAR 0 7
5833: ARRAY
5834: PUSH
5835: LD_INT 1
5837: ARRAY
5838: PPUSH
5839: CALL_OW 1
5843: ST_TO_ADDR
5844: GO 5806
5846: POP
5847: POP
// result := tmp ;
5848: LD_ADDR_VAR 0 6
5852: PUSH
5853: LD_VAR 0 9
5857: ST_TO_ADDR
// end ; end ;
5858: LD_VAR 0 6
5862: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
5863: LD_INT 0
5865: PPUSH
5866: PPUSH
5867: PPUSH
5868: PPUSH
5869: PPUSH
5870: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
5871: LD_ADDR_VAR 0 5
5875: PUSH
5876: LD_INT 0
5878: PUSH
5879: LD_INT 0
5881: PUSH
5882: LD_INT 0
5884: PUSH
5885: EMPTY
5886: PUSH
5887: EMPTY
5888: LIST
5889: LIST
5890: LIST
5891: LIST
5892: ST_TO_ADDR
// if not x or not y then
5893: LD_VAR 0 2
5897: NOT
5898: PUSH
5899: LD_VAR 0 3
5903: NOT
5904: OR
5905: IFFALSE 5909
// exit ;
5907: GO 7559
// if not range then
5909: LD_VAR 0 4
5913: NOT
5914: IFFALSE 5924
// range := 10 ;
5916: LD_ADDR_VAR 0 4
5920: PUSH
5921: LD_INT 10
5923: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5924: LD_ADDR_VAR 0 8
5928: PUSH
5929: LD_INT 81
5931: PUSH
5932: LD_VAR 0 1
5936: PUSH
5937: EMPTY
5938: LIST
5939: LIST
5940: PUSH
5941: LD_INT 92
5943: PUSH
5944: LD_VAR 0 2
5948: PUSH
5949: LD_VAR 0 3
5953: PUSH
5954: LD_VAR 0 4
5958: PUSH
5959: EMPTY
5960: LIST
5961: LIST
5962: LIST
5963: LIST
5964: PUSH
5965: LD_INT 3
5967: PUSH
5968: LD_INT 21
5970: PUSH
5971: LD_INT 3
5973: PUSH
5974: EMPTY
5975: LIST
5976: LIST
5977: PUSH
5978: EMPTY
5979: LIST
5980: LIST
5981: PUSH
5982: EMPTY
5983: LIST
5984: LIST
5985: LIST
5986: PPUSH
5987: CALL_OW 69
5991: ST_TO_ADDR
// if not tmp then
5992: LD_VAR 0 8
5996: NOT
5997: IFFALSE 6001
// exit ;
5999: GO 7559
// for i in tmp do
6001: LD_ADDR_VAR 0 6
6005: PUSH
6006: LD_VAR 0 8
6010: PUSH
6011: FOR_IN
6012: IFFALSE 7534
// begin points := [ 0 , 0 , 0 ] ;
6014: LD_ADDR_VAR 0 9
6018: PUSH
6019: LD_INT 0
6021: PUSH
6022: LD_INT 0
6024: PUSH
6025: LD_INT 0
6027: PUSH
6028: EMPTY
6029: LIST
6030: LIST
6031: LIST
6032: ST_TO_ADDR
// bpoints := 1 ;
6033: LD_ADDR_VAR 0 10
6037: PUSH
6038: LD_INT 1
6040: ST_TO_ADDR
// case GetType ( i ) of unit_human :
6041: LD_VAR 0 6
6045: PPUSH
6046: CALL_OW 247
6050: PUSH
6051: LD_INT 1
6053: DOUBLE
6054: EQUAL
6055: IFTRUE 6059
6057: GO 6637
6059: POP
// begin if GetClass ( i ) = 1 then
6060: LD_VAR 0 6
6064: PPUSH
6065: CALL_OW 257
6069: PUSH
6070: LD_INT 1
6072: EQUAL
6073: IFFALSE 6094
// points := [ 10 , 5 , 3 ] ;
6075: LD_ADDR_VAR 0 9
6079: PUSH
6080: LD_INT 10
6082: PUSH
6083: LD_INT 5
6085: PUSH
6086: LD_INT 3
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: LIST
6093: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
6094: LD_VAR 0 6
6098: PPUSH
6099: CALL_OW 257
6103: PUSH
6104: LD_INT 2
6106: PUSH
6107: LD_INT 3
6109: PUSH
6110: LD_INT 4
6112: PUSH
6113: EMPTY
6114: LIST
6115: LIST
6116: LIST
6117: IN
6118: IFFALSE 6139
// points := [ 3 , 2 , 1 ] ;
6120: LD_ADDR_VAR 0 9
6124: PUSH
6125: LD_INT 3
6127: PUSH
6128: LD_INT 2
6130: PUSH
6131: LD_INT 1
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: LIST
6138: ST_TO_ADDR
// if GetClass ( i ) = 5 then
6139: LD_VAR 0 6
6143: PPUSH
6144: CALL_OW 257
6148: PUSH
6149: LD_INT 5
6151: EQUAL
6152: IFFALSE 6173
// points := [ 130 , 5 , 2 ] ;
6154: LD_ADDR_VAR 0 9
6158: PUSH
6159: LD_INT 130
6161: PUSH
6162: LD_INT 5
6164: PUSH
6165: LD_INT 2
6167: PUSH
6168: EMPTY
6169: LIST
6170: LIST
6171: LIST
6172: ST_TO_ADDR
// if GetClass ( i ) = 8 then
6173: LD_VAR 0 6
6177: PPUSH
6178: CALL_OW 257
6182: PUSH
6183: LD_INT 8
6185: EQUAL
6186: IFFALSE 6207
// points := [ 35 , 35 , 30 ] ;
6188: LD_ADDR_VAR 0 9
6192: PUSH
6193: LD_INT 35
6195: PUSH
6196: LD_INT 35
6198: PUSH
6199: LD_INT 30
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: LIST
6206: ST_TO_ADDR
// if GetClass ( i ) = 9 then
6207: LD_VAR 0 6
6211: PPUSH
6212: CALL_OW 257
6216: PUSH
6217: LD_INT 9
6219: EQUAL
6220: IFFALSE 6241
// points := [ 20 , 55 , 40 ] ;
6222: LD_ADDR_VAR 0 9
6226: PUSH
6227: LD_INT 20
6229: PUSH
6230: LD_INT 55
6232: PUSH
6233: LD_INT 40
6235: PUSH
6236: EMPTY
6237: LIST
6238: LIST
6239: LIST
6240: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
6241: LD_VAR 0 6
6245: PPUSH
6246: CALL_OW 257
6250: PUSH
6251: LD_INT 12
6253: PUSH
6254: LD_INT 16
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: IN
6261: IFFALSE 6282
// points := [ 5 , 3 , 2 ] ;
6263: LD_ADDR_VAR 0 9
6267: PUSH
6268: LD_INT 5
6270: PUSH
6271: LD_INT 3
6273: PUSH
6274: LD_INT 2
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: LIST
6281: ST_TO_ADDR
// if GetClass ( i ) = 17 then
6282: LD_VAR 0 6
6286: PPUSH
6287: CALL_OW 257
6291: PUSH
6292: LD_INT 17
6294: EQUAL
6295: IFFALSE 6316
// points := [ 100 , 50 , 75 ] ;
6297: LD_ADDR_VAR 0 9
6301: PUSH
6302: LD_INT 100
6304: PUSH
6305: LD_INT 50
6307: PUSH
6308: LD_INT 75
6310: PUSH
6311: EMPTY
6312: LIST
6313: LIST
6314: LIST
6315: ST_TO_ADDR
// if GetClass ( i ) = 15 then
6316: LD_VAR 0 6
6320: PPUSH
6321: CALL_OW 257
6325: PUSH
6326: LD_INT 15
6328: EQUAL
6329: IFFALSE 6350
// points := [ 10 , 5 , 3 ] ;
6331: LD_ADDR_VAR 0 9
6335: PUSH
6336: LD_INT 10
6338: PUSH
6339: LD_INT 5
6341: PUSH
6342: LD_INT 3
6344: PUSH
6345: EMPTY
6346: LIST
6347: LIST
6348: LIST
6349: ST_TO_ADDR
// if GetClass ( i ) = 14 then
6350: LD_VAR 0 6
6354: PPUSH
6355: CALL_OW 257
6359: PUSH
6360: LD_INT 14
6362: EQUAL
6363: IFFALSE 6384
// points := [ 10 , 0 , 0 ] ;
6365: LD_ADDR_VAR 0 9
6369: PUSH
6370: LD_INT 10
6372: PUSH
6373: LD_INT 0
6375: PUSH
6376: LD_INT 0
6378: PUSH
6379: EMPTY
6380: LIST
6381: LIST
6382: LIST
6383: ST_TO_ADDR
// if GetClass ( i ) = 11 then
6384: LD_VAR 0 6
6388: PPUSH
6389: CALL_OW 257
6393: PUSH
6394: LD_INT 11
6396: EQUAL
6397: IFFALSE 6418
// points := [ 30 , 10 , 5 ] ;
6399: LD_ADDR_VAR 0 9
6403: PUSH
6404: LD_INT 30
6406: PUSH
6407: LD_INT 10
6409: PUSH
6410: LD_INT 5
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: LIST
6417: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
6418: LD_VAR 0 1
6422: PPUSH
6423: LD_INT 5
6425: PPUSH
6426: CALL_OW 321
6430: PUSH
6431: LD_INT 2
6433: EQUAL
6434: IFFALSE 6451
// bpoints := bpoints * 1.8 ;
6436: LD_ADDR_VAR 0 10
6440: PUSH
6441: LD_VAR 0 10
6445: PUSH
6446: LD_REAL  1.80000000000000E+0000
6449: MUL
6450: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
6451: LD_VAR 0 6
6455: PPUSH
6456: CALL_OW 257
6460: PUSH
6461: LD_INT 1
6463: PUSH
6464: LD_INT 2
6466: PUSH
6467: LD_INT 3
6469: PUSH
6470: LD_INT 4
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: LIST
6477: LIST
6478: IN
6479: PUSH
6480: LD_VAR 0 1
6484: PPUSH
6485: LD_INT 51
6487: PPUSH
6488: CALL_OW 321
6492: PUSH
6493: LD_INT 2
6495: EQUAL
6496: AND
6497: IFFALSE 6514
// bpoints := bpoints * 1.2 ;
6499: LD_ADDR_VAR 0 10
6503: PUSH
6504: LD_VAR 0 10
6508: PUSH
6509: LD_REAL  1.20000000000000E+0000
6512: MUL
6513: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
6514: LD_VAR 0 6
6518: PPUSH
6519: CALL_OW 257
6523: PUSH
6524: LD_INT 5
6526: PUSH
6527: LD_INT 7
6529: PUSH
6530: LD_INT 9
6532: PUSH
6533: EMPTY
6534: LIST
6535: LIST
6536: LIST
6537: IN
6538: PUSH
6539: LD_VAR 0 1
6543: PPUSH
6544: LD_INT 52
6546: PPUSH
6547: CALL_OW 321
6551: PUSH
6552: LD_INT 2
6554: EQUAL
6555: AND
6556: IFFALSE 6573
// bpoints := bpoints * 1.5 ;
6558: LD_ADDR_VAR 0 10
6562: PUSH
6563: LD_VAR 0 10
6567: PUSH
6568: LD_REAL  1.50000000000000E+0000
6571: MUL
6572: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
6573: LD_VAR 0 1
6577: PPUSH
6578: LD_INT 66
6580: PPUSH
6581: CALL_OW 321
6585: PUSH
6586: LD_INT 2
6588: EQUAL
6589: IFFALSE 6606
// bpoints := bpoints * 1.1 ;
6591: LD_ADDR_VAR 0 10
6595: PUSH
6596: LD_VAR 0 10
6600: PUSH
6601: LD_REAL  1.10000000000000E+0000
6604: MUL
6605: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
6606: LD_ADDR_VAR 0 10
6610: PUSH
6611: LD_VAR 0 10
6615: PUSH
6616: LD_VAR 0 6
6620: PPUSH
6621: LD_INT 1
6623: PPUSH
6624: CALL_OW 259
6628: PUSH
6629: LD_REAL  1.15000000000000E+0000
6632: MUL
6633: MUL
6634: ST_TO_ADDR
// end ; unit_vehicle :
6635: GO 7463
6637: LD_INT 2
6639: DOUBLE
6640: EQUAL
6641: IFTRUE 6645
6643: GO 7451
6645: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
6646: LD_VAR 0 6
6650: PPUSH
6651: CALL_OW 264
6655: PUSH
6656: LD_INT 2
6658: PUSH
6659: LD_INT 42
6661: PUSH
6662: LD_INT 24
6664: PUSH
6665: EMPTY
6666: LIST
6667: LIST
6668: LIST
6669: IN
6670: IFFALSE 6691
// points := [ 25 , 5 , 3 ] ;
6672: LD_ADDR_VAR 0 9
6676: PUSH
6677: LD_INT 25
6679: PUSH
6680: LD_INT 5
6682: PUSH
6683: LD_INT 3
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: LIST
6690: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
6691: LD_VAR 0 6
6695: PPUSH
6696: CALL_OW 264
6700: PUSH
6701: LD_INT 4
6703: PUSH
6704: LD_INT 43
6706: PUSH
6707: LD_INT 25
6709: PUSH
6710: EMPTY
6711: LIST
6712: LIST
6713: LIST
6714: IN
6715: IFFALSE 6736
// points := [ 40 , 15 , 5 ] ;
6717: LD_ADDR_VAR 0 9
6721: PUSH
6722: LD_INT 40
6724: PUSH
6725: LD_INT 15
6727: PUSH
6728: LD_INT 5
6730: PUSH
6731: EMPTY
6732: LIST
6733: LIST
6734: LIST
6735: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
6736: LD_VAR 0 6
6740: PPUSH
6741: CALL_OW 264
6745: PUSH
6746: LD_INT 3
6748: PUSH
6749: LD_INT 23
6751: PUSH
6752: EMPTY
6753: LIST
6754: LIST
6755: IN
6756: IFFALSE 6777
// points := [ 7 , 25 , 8 ] ;
6758: LD_ADDR_VAR 0 9
6762: PUSH
6763: LD_INT 7
6765: PUSH
6766: LD_INT 25
6768: PUSH
6769: LD_INT 8
6771: PUSH
6772: EMPTY
6773: LIST
6774: LIST
6775: LIST
6776: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
6777: LD_VAR 0 6
6781: PPUSH
6782: CALL_OW 264
6786: PUSH
6787: LD_INT 5
6789: PUSH
6790: LD_INT 27
6792: PUSH
6793: LD_INT 44
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: LIST
6800: IN
6801: IFFALSE 6822
// points := [ 14 , 50 , 16 ] ;
6803: LD_ADDR_VAR 0 9
6807: PUSH
6808: LD_INT 14
6810: PUSH
6811: LD_INT 50
6813: PUSH
6814: LD_INT 16
6816: PUSH
6817: EMPTY
6818: LIST
6819: LIST
6820: LIST
6821: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
6822: LD_VAR 0 6
6826: PPUSH
6827: CALL_OW 264
6831: PUSH
6832: LD_INT 6
6834: PUSH
6835: LD_INT 46
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: IN
6842: IFFALSE 6863
// points := [ 32 , 120 , 70 ] ;
6844: LD_ADDR_VAR 0 9
6848: PUSH
6849: LD_INT 32
6851: PUSH
6852: LD_INT 120
6854: PUSH
6855: LD_INT 70
6857: PUSH
6858: EMPTY
6859: LIST
6860: LIST
6861: LIST
6862: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
6863: LD_VAR 0 6
6867: PPUSH
6868: CALL_OW 264
6872: PUSH
6873: LD_INT 7
6875: PUSH
6876: LD_INT 28
6878: PUSH
6879: LD_INT 45
6881: PUSH
6882: LD_INT 92
6884: PUSH
6885: EMPTY
6886: LIST
6887: LIST
6888: LIST
6889: LIST
6890: IN
6891: IFFALSE 6912
// points := [ 35 , 20 , 45 ] ;
6893: LD_ADDR_VAR 0 9
6897: PUSH
6898: LD_INT 35
6900: PUSH
6901: LD_INT 20
6903: PUSH
6904: LD_INT 45
6906: PUSH
6907: EMPTY
6908: LIST
6909: LIST
6910: LIST
6911: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
6912: LD_VAR 0 6
6916: PPUSH
6917: CALL_OW 264
6921: PUSH
6922: LD_INT 47
6924: PUSH
6925: EMPTY
6926: LIST
6927: IN
6928: IFFALSE 6949
// points := [ 67 , 45 , 75 ] ;
6930: LD_ADDR_VAR 0 9
6934: PUSH
6935: LD_INT 67
6937: PUSH
6938: LD_INT 45
6940: PUSH
6941: LD_INT 75
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: LIST
6948: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
6949: LD_VAR 0 6
6953: PPUSH
6954: CALL_OW 264
6958: PUSH
6959: LD_INT 26
6961: PUSH
6962: EMPTY
6963: LIST
6964: IN
6965: IFFALSE 6986
// points := [ 120 , 30 , 80 ] ;
6967: LD_ADDR_VAR 0 9
6971: PUSH
6972: LD_INT 120
6974: PUSH
6975: LD_INT 30
6977: PUSH
6978: LD_INT 80
6980: PUSH
6981: EMPTY
6982: LIST
6983: LIST
6984: LIST
6985: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
6986: LD_VAR 0 6
6990: PPUSH
6991: CALL_OW 264
6995: PUSH
6996: LD_INT 22
6998: PUSH
6999: EMPTY
7000: LIST
7001: IN
7002: IFFALSE 7023
// points := [ 40 , 1 , 1 ] ;
7004: LD_ADDR_VAR 0 9
7008: PUSH
7009: LD_INT 40
7011: PUSH
7012: LD_INT 1
7014: PUSH
7015: LD_INT 1
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: LIST
7022: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
7023: LD_VAR 0 6
7027: PPUSH
7028: CALL_OW 264
7032: PUSH
7033: LD_INT 29
7035: PUSH
7036: EMPTY
7037: LIST
7038: IN
7039: IFFALSE 7060
// points := [ 70 , 200 , 400 ] ;
7041: LD_ADDR_VAR 0 9
7045: PUSH
7046: LD_INT 70
7048: PUSH
7049: LD_INT 200
7051: PUSH
7052: LD_INT 400
7054: PUSH
7055: EMPTY
7056: LIST
7057: LIST
7058: LIST
7059: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
7060: LD_VAR 0 6
7064: PPUSH
7065: CALL_OW 264
7069: PUSH
7070: LD_INT 14
7072: PUSH
7073: LD_INT 53
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: IN
7080: IFFALSE 7101
// points := [ 40 , 10 , 20 ] ;
7082: LD_ADDR_VAR 0 9
7086: PUSH
7087: LD_INT 40
7089: PUSH
7090: LD_INT 10
7092: PUSH
7093: LD_INT 20
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: LIST
7100: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
7101: LD_VAR 0 6
7105: PPUSH
7106: CALL_OW 264
7110: PUSH
7111: LD_INT 9
7113: PUSH
7114: EMPTY
7115: LIST
7116: IN
7117: IFFALSE 7138
// points := [ 5 , 70 , 20 ] ;
7119: LD_ADDR_VAR 0 9
7123: PUSH
7124: LD_INT 5
7126: PUSH
7127: LD_INT 70
7129: PUSH
7130: LD_INT 20
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: LIST
7137: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
7138: LD_VAR 0 6
7142: PPUSH
7143: CALL_OW 264
7147: PUSH
7148: LD_INT 10
7150: PUSH
7151: EMPTY
7152: LIST
7153: IN
7154: IFFALSE 7175
// points := [ 35 , 110 , 70 ] ;
7156: LD_ADDR_VAR 0 9
7160: PUSH
7161: LD_INT 35
7163: PUSH
7164: LD_INT 110
7166: PUSH
7167: LD_INT 70
7169: PUSH
7170: EMPTY
7171: LIST
7172: LIST
7173: LIST
7174: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
7175: LD_VAR 0 6
7179: PPUSH
7180: CALL_OW 265
7184: PUSH
7185: LD_INT 25
7187: EQUAL
7188: IFFALSE 7209
// points := [ 80 , 65 , 100 ] ;
7190: LD_ADDR_VAR 0 9
7194: PUSH
7195: LD_INT 80
7197: PUSH
7198: LD_INT 65
7200: PUSH
7201: LD_INT 100
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: LIST
7208: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
7209: LD_VAR 0 6
7213: PPUSH
7214: CALL_OW 263
7218: PUSH
7219: LD_INT 1
7221: EQUAL
7222: IFFALSE 7257
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
7224: LD_ADDR_VAR 0 10
7228: PUSH
7229: LD_VAR 0 10
7233: PUSH
7234: LD_VAR 0 6
7238: PPUSH
7239: CALL_OW 311
7243: PPUSH
7244: LD_INT 3
7246: PPUSH
7247: CALL_OW 259
7251: PUSH
7252: LD_INT 4
7254: MUL
7255: MUL
7256: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
7257: LD_VAR 0 6
7261: PPUSH
7262: CALL_OW 263
7266: PUSH
7267: LD_INT 2
7269: EQUAL
7270: IFFALSE 7321
// begin j := IsControledBy ( i ) ;
7272: LD_ADDR_VAR 0 7
7276: PUSH
7277: LD_VAR 0 6
7281: PPUSH
7282: CALL_OW 312
7286: ST_TO_ADDR
// if j then
7287: LD_VAR 0 7
7291: IFFALSE 7321
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
7293: LD_ADDR_VAR 0 10
7297: PUSH
7298: LD_VAR 0 10
7302: PUSH
7303: LD_VAR 0 7
7307: PPUSH
7308: LD_INT 3
7310: PPUSH
7311: CALL_OW 259
7315: PUSH
7316: LD_INT 3
7318: MUL
7319: MUL
7320: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
7321: LD_VAR 0 6
7325: PPUSH
7326: CALL_OW 264
7330: PUSH
7331: LD_INT 5
7333: PUSH
7334: LD_INT 6
7336: PUSH
7337: LD_INT 46
7339: PUSH
7340: LD_INT 44
7342: PUSH
7343: LD_INT 47
7345: PUSH
7346: LD_INT 45
7348: PUSH
7349: LD_INT 28
7351: PUSH
7352: LD_INT 7
7354: PUSH
7355: LD_INT 27
7357: PUSH
7358: LD_INT 29
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: LIST
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: LIST
7371: LIST
7372: IN
7373: PUSH
7374: LD_VAR 0 1
7378: PPUSH
7379: LD_INT 52
7381: PPUSH
7382: CALL_OW 321
7386: PUSH
7387: LD_INT 2
7389: EQUAL
7390: AND
7391: IFFALSE 7408
// bpoints := bpoints * 1.2 ;
7393: LD_ADDR_VAR 0 10
7397: PUSH
7398: LD_VAR 0 10
7402: PUSH
7403: LD_REAL  1.20000000000000E+0000
7406: MUL
7407: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
7408: LD_VAR 0 6
7412: PPUSH
7413: CALL_OW 264
7417: PUSH
7418: LD_INT 6
7420: PUSH
7421: LD_INT 46
7423: PUSH
7424: LD_INT 47
7426: PUSH
7427: EMPTY
7428: LIST
7429: LIST
7430: LIST
7431: IN
7432: IFFALSE 7449
// bpoints := bpoints * 1.2 ;
7434: LD_ADDR_VAR 0 10
7438: PUSH
7439: LD_VAR 0 10
7443: PUSH
7444: LD_REAL  1.20000000000000E+0000
7447: MUL
7448: ST_TO_ADDR
// end ; unit_building :
7449: GO 7463
7451: LD_INT 3
7453: DOUBLE
7454: EQUAL
7455: IFTRUE 7459
7457: GO 7462
7459: POP
// ; end ;
7460: GO 7463
7462: POP
// for j = 1 to 3 do
7463: LD_ADDR_VAR 0 7
7467: PUSH
7468: DOUBLE
7469: LD_INT 1
7471: DEC
7472: ST_TO_ADDR
7473: LD_INT 3
7475: PUSH
7476: FOR_TO
7477: IFFALSE 7530
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
7479: LD_ADDR_VAR 0 5
7483: PUSH
7484: LD_VAR 0 5
7488: PPUSH
7489: LD_VAR 0 7
7493: PPUSH
7494: LD_VAR 0 5
7498: PUSH
7499: LD_VAR 0 7
7503: ARRAY
7504: PUSH
7505: LD_VAR 0 9
7509: PUSH
7510: LD_VAR 0 7
7514: ARRAY
7515: PUSH
7516: LD_VAR 0 10
7520: MUL
7521: PLUS
7522: PPUSH
7523: CALL_OW 1
7527: ST_TO_ADDR
7528: GO 7476
7530: POP
7531: POP
// end ;
7532: GO 6011
7534: POP
7535: POP
// result := Replace ( result , 4 , tmp ) ;
7536: LD_ADDR_VAR 0 5
7540: PUSH
7541: LD_VAR 0 5
7545: PPUSH
7546: LD_INT 4
7548: PPUSH
7549: LD_VAR 0 8
7553: PPUSH
7554: CALL_OW 1
7558: ST_TO_ADDR
// end ;
7559: LD_VAR 0 5
7563: RET
// export function DangerAtRange ( unit , range ) ; begin
7564: LD_INT 0
7566: PPUSH
// if not unit then
7567: LD_VAR 0 1
7571: NOT
7572: IFFALSE 7576
// exit ;
7574: GO 7621
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
7576: LD_ADDR_VAR 0 3
7580: PUSH
7581: LD_VAR 0 1
7585: PPUSH
7586: CALL_OW 255
7590: PPUSH
7591: LD_VAR 0 1
7595: PPUSH
7596: CALL_OW 250
7600: PPUSH
7601: LD_VAR 0 1
7605: PPUSH
7606: CALL_OW 251
7610: PPUSH
7611: LD_VAR 0 2
7615: PPUSH
7616: CALL 5863 0 4
7620: ST_TO_ADDR
// end ;
7621: LD_VAR 0 3
7625: RET
// export function DangerInArea ( side , area ) ; begin
7626: LD_INT 0
7628: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
7629: LD_ADDR_VAR 0 3
7633: PUSH
7634: LD_VAR 0 2
7638: PPUSH
7639: LD_INT 81
7641: PUSH
7642: LD_VAR 0 1
7646: PUSH
7647: EMPTY
7648: LIST
7649: LIST
7650: PPUSH
7651: CALL_OW 70
7655: ST_TO_ADDR
// end ;
7656: LD_VAR 0 3
7660: RET
// export function IsExtension ( b ) ; begin
7661: LD_INT 0
7663: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
7664: LD_ADDR_VAR 0 2
7668: PUSH
7669: LD_VAR 0 1
7673: PUSH
7674: LD_INT 23
7676: PUSH
7677: LD_INT 20
7679: PUSH
7680: LD_INT 22
7682: PUSH
7683: LD_INT 17
7685: PUSH
7686: LD_INT 24
7688: PUSH
7689: LD_INT 21
7691: PUSH
7692: LD_INT 19
7694: PUSH
7695: LD_INT 16
7697: PUSH
7698: LD_INT 25
7700: PUSH
7701: LD_INT 18
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: LIST
7714: LIST
7715: IN
7716: ST_TO_ADDR
// end ;
7717: LD_VAR 0 2
7721: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
7722: LD_INT 0
7724: PPUSH
7725: PPUSH
7726: PPUSH
// result := [ ] ;
7727: LD_ADDR_VAR 0 4
7731: PUSH
7732: EMPTY
7733: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
7734: LD_ADDR_VAR 0 5
7738: PUSH
7739: LD_VAR 0 2
7743: PPUSH
7744: LD_INT 21
7746: PUSH
7747: LD_INT 3
7749: PUSH
7750: EMPTY
7751: LIST
7752: LIST
7753: PPUSH
7754: CALL_OW 70
7758: ST_TO_ADDR
// if not tmp then
7759: LD_VAR 0 5
7763: NOT
7764: IFFALSE 7768
// exit ;
7766: GO 7832
// if checkLink then
7768: LD_VAR 0 3
7772: IFFALSE 7822
// begin for i in tmp do
7774: LD_ADDR_VAR 0 6
7778: PUSH
7779: LD_VAR 0 5
7783: PUSH
7784: FOR_IN
7785: IFFALSE 7820
// if GetBase ( i ) <> base then
7787: LD_VAR 0 6
7791: PPUSH
7792: CALL_OW 274
7796: PUSH
7797: LD_VAR 0 1
7801: NONEQUAL
7802: IFFALSE 7818
// ComLinkToBase ( base , i ) ;
7804: LD_VAR 0 1
7808: PPUSH
7809: LD_VAR 0 6
7813: PPUSH
7814: CALL_OW 169
7818: GO 7784
7820: POP
7821: POP
// end ; result := tmp ;
7822: LD_ADDR_VAR 0 4
7826: PUSH
7827: LD_VAR 0 5
7831: ST_TO_ADDR
// end ;
7832: LD_VAR 0 4
7836: RET
// export function ComComplete ( units , b ) ; var i ; begin
7837: LD_INT 0
7839: PPUSH
7840: PPUSH
// if not units then
7841: LD_VAR 0 1
7845: NOT
7846: IFFALSE 7850
// exit ;
7848: GO 7940
// for i in units do
7850: LD_ADDR_VAR 0 4
7854: PUSH
7855: LD_VAR 0 1
7859: PUSH
7860: FOR_IN
7861: IFFALSE 7938
// if BuildingStatus ( b ) = bs_build then
7863: LD_VAR 0 2
7867: PPUSH
7868: CALL_OW 461
7872: PUSH
7873: LD_INT 1
7875: EQUAL
7876: IFFALSE 7936
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
7878: LD_VAR 0 4
7882: PPUSH
7883: LD_STRING h
7885: PUSH
7886: LD_VAR 0 2
7890: PPUSH
7891: CALL_OW 250
7895: PUSH
7896: LD_VAR 0 2
7900: PPUSH
7901: CALL_OW 251
7905: PUSH
7906: LD_VAR 0 2
7910: PUSH
7911: LD_INT 0
7913: PUSH
7914: LD_INT 0
7916: PUSH
7917: LD_INT 0
7919: PUSH
7920: EMPTY
7921: LIST
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: PUSH
7929: EMPTY
7930: LIST
7931: PPUSH
7932: CALL_OW 446
7936: GO 7860
7938: POP
7939: POP
// end ;
7940: LD_VAR 0 3
7944: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
7945: LD_INT 0
7947: PPUSH
7948: PPUSH
7949: PPUSH
7950: PPUSH
7951: PPUSH
7952: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
7953: LD_VAR 0 1
7957: NOT
7958: PUSH
7959: LD_VAR 0 1
7963: PPUSH
7964: CALL_OW 263
7968: PUSH
7969: LD_INT 2
7971: NONEQUAL
7972: OR
7973: IFFALSE 7977
// exit ;
7975: GO 8293
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
7977: LD_ADDR_VAR 0 6
7981: PUSH
7982: LD_INT 22
7984: PUSH
7985: LD_VAR 0 1
7989: PPUSH
7990: CALL_OW 255
7994: PUSH
7995: EMPTY
7996: LIST
7997: LIST
7998: PUSH
7999: LD_INT 2
8001: PUSH
8002: LD_INT 30
8004: PUSH
8005: LD_INT 36
8007: PUSH
8008: EMPTY
8009: LIST
8010: LIST
8011: PUSH
8012: LD_INT 34
8014: PUSH
8015: LD_INT 31
8017: PUSH
8018: EMPTY
8019: LIST
8020: LIST
8021: PUSH
8022: EMPTY
8023: LIST
8024: LIST
8025: LIST
8026: PUSH
8027: EMPTY
8028: LIST
8029: LIST
8030: PPUSH
8031: CALL_OW 69
8035: ST_TO_ADDR
// if not tmp then
8036: LD_VAR 0 6
8040: NOT
8041: IFFALSE 8045
// exit ;
8043: GO 8293
// result := [ ] ;
8045: LD_ADDR_VAR 0 2
8049: PUSH
8050: EMPTY
8051: ST_TO_ADDR
// for i in tmp do
8052: LD_ADDR_VAR 0 3
8056: PUSH
8057: LD_VAR 0 6
8061: PUSH
8062: FOR_IN
8063: IFFALSE 8134
// begin t := UnitsInside ( i ) ;
8065: LD_ADDR_VAR 0 4
8069: PUSH
8070: LD_VAR 0 3
8074: PPUSH
8075: CALL_OW 313
8079: ST_TO_ADDR
// if t then
8080: LD_VAR 0 4
8084: IFFALSE 8132
// for j in t do
8086: LD_ADDR_VAR 0 7
8090: PUSH
8091: LD_VAR 0 4
8095: PUSH
8096: FOR_IN
8097: IFFALSE 8130
// result := Replace ( result , result + 1 , j ) ;
8099: LD_ADDR_VAR 0 2
8103: PUSH
8104: LD_VAR 0 2
8108: PPUSH
8109: LD_VAR 0 2
8113: PUSH
8114: LD_INT 1
8116: PLUS
8117: PPUSH
8118: LD_VAR 0 7
8122: PPUSH
8123: CALL_OW 1
8127: ST_TO_ADDR
8128: GO 8096
8130: POP
8131: POP
// end ;
8132: GO 8062
8134: POP
8135: POP
// if not result then
8136: LD_VAR 0 2
8140: NOT
8141: IFFALSE 8145
// exit ;
8143: GO 8293
// mech := result [ 1 ] ;
8145: LD_ADDR_VAR 0 5
8149: PUSH
8150: LD_VAR 0 2
8154: PUSH
8155: LD_INT 1
8157: ARRAY
8158: ST_TO_ADDR
// if result > 1 then
8159: LD_VAR 0 2
8163: PUSH
8164: LD_INT 1
8166: GREATER
8167: IFFALSE 8279
// begin for i = 2 to result do
8169: LD_ADDR_VAR 0 3
8173: PUSH
8174: DOUBLE
8175: LD_INT 2
8177: DEC
8178: ST_TO_ADDR
8179: LD_VAR 0 2
8183: PUSH
8184: FOR_TO
8185: IFFALSE 8277
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
8187: LD_ADDR_VAR 0 4
8191: PUSH
8192: LD_VAR 0 2
8196: PUSH
8197: LD_VAR 0 3
8201: ARRAY
8202: PPUSH
8203: LD_INT 3
8205: PPUSH
8206: CALL_OW 259
8210: PUSH
8211: LD_VAR 0 2
8215: PUSH
8216: LD_VAR 0 3
8220: ARRAY
8221: PPUSH
8222: CALL_OW 432
8226: MINUS
8227: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
8228: LD_VAR 0 4
8232: PUSH
8233: LD_VAR 0 5
8237: PPUSH
8238: LD_INT 3
8240: PPUSH
8241: CALL_OW 259
8245: PUSH
8246: LD_VAR 0 5
8250: PPUSH
8251: CALL_OW 432
8255: MINUS
8256: GREATEREQUAL
8257: IFFALSE 8275
// mech := result [ i ] ;
8259: LD_ADDR_VAR 0 5
8263: PUSH
8264: LD_VAR 0 2
8268: PUSH
8269: LD_VAR 0 3
8273: ARRAY
8274: ST_TO_ADDR
// end ;
8275: GO 8184
8277: POP
8278: POP
// end ; ComLinkTo ( vehicle , mech ) ;
8279: LD_VAR 0 1
8283: PPUSH
8284: LD_VAR 0 5
8288: PPUSH
8289: CALL_OW 135
// end ;
8293: LD_VAR 0 2
8297: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
8298: LD_INT 0
8300: PPUSH
8301: PPUSH
8302: PPUSH
8303: PPUSH
8304: PPUSH
8305: PPUSH
8306: PPUSH
8307: PPUSH
8308: PPUSH
8309: PPUSH
8310: PPUSH
8311: PPUSH
8312: PPUSH
// result := [ ] ;
8313: LD_ADDR_VAR 0 7
8317: PUSH
8318: EMPTY
8319: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
8320: LD_VAR 0 1
8324: PPUSH
8325: CALL_OW 266
8329: PUSH
8330: LD_INT 0
8332: PUSH
8333: LD_INT 1
8335: PUSH
8336: EMPTY
8337: LIST
8338: LIST
8339: IN
8340: NOT
8341: IFFALSE 8345
// exit ;
8343: GO 9979
// if name then
8345: LD_VAR 0 3
8349: IFFALSE 8365
// SetBName ( base_dep , name ) ;
8351: LD_VAR 0 1
8355: PPUSH
8356: LD_VAR 0 3
8360: PPUSH
8361: CALL_OW 500
// base := GetBase ( base_dep ) ;
8365: LD_ADDR_VAR 0 15
8369: PUSH
8370: LD_VAR 0 1
8374: PPUSH
8375: CALL_OW 274
8379: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
8380: LD_ADDR_VAR 0 16
8384: PUSH
8385: LD_VAR 0 1
8389: PPUSH
8390: CALL_OW 255
8394: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
8395: LD_ADDR_VAR 0 17
8399: PUSH
8400: LD_VAR 0 1
8404: PPUSH
8405: CALL_OW 248
8409: ST_TO_ADDR
// if sources then
8410: LD_VAR 0 5
8414: IFFALSE 8461
// for i = 1 to 3 do
8416: LD_ADDR_VAR 0 8
8420: PUSH
8421: DOUBLE
8422: LD_INT 1
8424: DEC
8425: ST_TO_ADDR
8426: LD_INT 3
8428: PUSH
8429: FOR_TO
8430: IFFALSE 8459
// AddResourceType ( base , i , sources [ i ] ) ;
8432: LD_VAR 0 15
8436: PPUSH
8437: LD_VAR 0 8
8441: PPUSH
8442: LD_VAR 0 5
8446: PUSH
8447: LD_VAR 0 8
8451: ARRAY
8452: PPUSH
8453: CALL_OW 276
8457: GO 8429
8459: POP
8460: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
8461: LD_ADDR_VAR 0 18
8465: PUSH
8466: LD_VAR 0 15
8470: PPUSH
8471: LD_VAR 0 2
8475: PPUSH
8476: LD_INT 1
8478: PPUSH
8479: CALL 7722 0 3
8483: ST_TO_ADDR
// InitHc ;
8484: CALL_OW 19
// InitUc ;
8488: CALL_OW 18
// uc_side := side ;
8492: LD_ADDR_OWVAR 20
8496: PUSH
8497: LD_VAR 0 16
8501: ST_TO_ADDR
// uc_nation := nation ;
8502: LD_ADDR_OWVAR 21
8506: PUSH
8507: LD_VAR 0 17
8511: ST_TO_ADDR
// if buildings then
8512: LD_VAR 0 18
8516: IFFALSE 9838
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
8518: LD_ADDR_VAR 0 19
8522: PUSH
8523: LD_VAR 0 18
8527: PPUSH
8528: LD_INT 2
8530: PUSH
8531: LD_INT 30
8533: PUSH
8534: LD_INT 29
8536: PUSH
8537: EMPTY
8538: LIST
8539: LIST
8540: PUSH
8541: LD_INT 30
8543: PUSH
8544: LD_INT 30
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PUSH
8551: EMPTY
8552: LIST
8553: LIST
8554: LIST
8555: PPUSH
8556: CALL_OW 72
8560: ST_TO_ADDR
// if tmp then
8561: LD_VAR 0 19
8565: IFFALSE 8613
// for i in tmp do
8567: LD_ADDR_VAR 0 8
8571: PUSH
8572: LD_VAR 0 19
8576: PUSH
8577: FOR_IN
8578: IFFALSE 8611
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
8580: LD_VAR 0 8
8584: PPUSH
8585: CALL_OW 250
8589: PPUSH
8590: LD_VAR 0 8
8594: PPUSH
8595: CALL_OW 251
8599: PPUSH
8600: LD_VAR 0 16
8604: PPUSH
8605: CALL_OW 441
8609: GO 8577
8611: POP
8612: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
8613: LD_VAR 0 18
8617: PPUSH
8618: LD_INT 2
8620: PUSH
8621: LD_INT 30
8623: PUSH
8624: LD_INT 32
8626: PUSH
8627: EMPTY
8628: LIST
8629: LIST
8630: PUSH
8631: LD_INT 30
8633: PUSH
8634: LD_INT 33
8636: PUSH
8637: EMPTY
8638: LIST
8639: LIST
8640: PUSH
8641: EMPTY
8642: LIST
8643: LIST
8644: LIST
8645: PPUSH
8646: CALL_OW 72
8650: IFFALSE 8738
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
8652: LD_ADDR_VAR 0 8
8656: PUSH
8657: LD_VAR 0 18
8661: PPUSH
8662: LD_INT 2
8664: PUSH
8665: LD_INT 30
8667: PUSH
8668: LD_INT 32
8670: PUSH
8671: EMPTY
8672: LIST
8673: LIST
8674: PUSH
8675: LD_INT 30
8677: PUSH
8678: LD_INT 33
8680: PUSH
8681: EMPTY
8682: LIST
8683: LIST
8684: PUSH
8685: EMPTY
8686: LIST
8687: LIST
8688: LIST
8689: PPUSH
8690: CALL_OW 72
8694: PUSH
8695: FOR_IN
8696: IFFALSE 8736
// begin if not GetBWeapon ( i ) then
8698: LD_VAR 0 8
8702: PPUSH
8703: CALL_OW 269
8707: NOT
8708: IFFALSE 8734
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
8710: LD_VAR 0 8
8714: PPUSH
8715: LD_VAR 0 8
8719: PPUSH
8720: LD_VAR 0 2
8724: PPUSH
8725: CALL 9984 0 2
8729: PPUSH
8730: CALL_OW 431
// end ;
8734: GO 8695
8736: POP
8737: POP
// end ; for i = 1 to personel do
8738: LD_ADDR_VAR 0 8
8742: PUSH
8743: DOUBLE
8744: LD_INT 1
8746: DEC
8747: ST_TO_ADDR
8748: LD_VAR 0 6
8752: PUSH
8753: FOR_TO
8754: IFFALSE 9818
// begin if i > 4 then
8756: LD_VAR 0 8
8760: PUSH
8761: LD_INT 4
8763: GREATER
8764: IFFALSE 8768
// break ;
8766: GO 9818
// case i of 1 :
8768: LD_VAR 0 8
8772: PUSH
8773: LD_INT 1
8775: DOUBLE
8776: EQUAL
8777: IFTRUE 8781
8779: GO 8861
8781: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
8782: LD_ADDR_VAR 0 12
8786: PUSH
8787: LD_VAR 0 18
8791: PPUSH
8792: LD_INT 22
8794: PUSH
8795: LD_VAR 0 16
8799: PUSH
8800: EMPTY
8801: LIST
8802: LIST
8803: PUSH
8804: LD_INT 58
8806: PUSH
8807: EMPTY
8808: LIST
8809: PUSH
8810: LD_INT 2
8812: PUSH
8813: LD_INT 30
8815: PUSH
8816: LD_INT 32
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: PUSH
8823: LD_INT 30
8825: PUSH
8826: LD_INT 4
8828: PUSH
8829: EMPTY
8830: LIST
8831: LIST
8832: PUSH
8833: LD_INT 30
8835: PUSH
8836: LD_INT 5
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: LIST
8853: PPUSH
8854: CALL_OW 72
8858: ST_TO_ADDR
8859: GO 9083
8861: LD_INT 2
8863: DOUBLE
8864: EQUAL
8865: IFTRUE 8869
8867: GO 8931
8869: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
8870: LD_ADDR_VAR 0 12
8874: PUSH
8875: LD_VAR 0 18
8879: PPUSH
8880: LD_INT 22
8882: PUSH
8883: LD_VAR 0 16
8887: PUSH
8888: EMPTY
8889: LIST
8890: LIST
8891: PUSH
8892: LD_INT 2
8894: PUSH
8895: LD_INT 30
8897: PUSH
8898: LD_INT 0
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: PUSH
8905: LD_INT 30
8907: PUSH
8908: LD_INT 1
8910: PUSH
8911: EMPTY
8912: LIST
8913: LIST
8914: PUSH
8915: EMPTY
8916: LIST
8917: LIST
8918: LIST
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: PPUSH
8924: CALL_OW 72
8928: ST_TO_ADDR
8929: GO 9083
8931: LD_INT 3
8933: DOUBLE
8934: EQUAL
8935: IFTRUE 8939
8937: GO 9001
8939: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
8940: LD_ADDR_VAR 0 12
8944: PUSH
8945: LD_VAR 0 18
8949: PPUSH
8950: LD_INT 22
8952: PUSH
8953: LD_VAR 0 16
8957: PUSH
8958: EMPTY
8959: LIST
8960: LIST
8961: PUSH
8962: LD_INT 2
8964: PUSH
8965: LD_INT 30
8967: PUSH
8968: LD_INT 2
8970: PUSH
8971: EMPTY
8972: LIST
8973: LIST
8974: PUSH
8975: LD_INT 30
8977: PUSH
8978: LD_INT 3
8980: PUSH
8981: EMPTY
8982: LIST
8983: LIST
8984: PUSH
8985: EMPTY
8986: LIST
8987: LIST
8988: LIST
8989: PUSH
8990: EMPTY
8991: LIST
8992: LIST
8993: PPUSH
8994: CALL_OW 72
8998: ST_TO_ADDR
8999: GO 9083
9001: LD_INT 4
9003: DOUBLE
9004: EQUAL
9005: IFTRUE 9009
9007: GO 9082
9009: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
9010: LD_ADDR_VAR 0 12
9014: PUSH
9015: LD_VAR 0 18
9019: PPUSH
9020: LD_INT 22
9022: PUSH
9023: LD_VAR 0 16
9027: PUSH
9028: EMPTY
9029: LIST
9030: LIST
9031: PUSH
9032: LD_INT 2
9034: PUSH
9035: LD_INT 30
9037: PUSH
9038: LD_INT 6
9040: PUSH
9041: EMPTY
9042: LIST
9043: LIST
9044: PUSH
9045: LD_INT 30
9047: PUSH
9048: LD_INT 7
9050: PUSH
9051: EMPTY
9052: LIST
9053: LIST
9054: PUSH
9055: LD_INT 30
9057: PUSH
9058: LD_INT 8
9060: PUSH
9061: EMPTY
9062: LIST
9063: LIST
9064: PUSH
9065: EMPTY
9066: LIST
9067: LIST
9068: LIST
9069: LIST
9070: PUSH
9071: EMPTY
9072: LIST
9073: LIST
9074: PPUSH
9075: CALL_OW 72
9079: ST_TO_ADDR
9080: GO 9083
9082: POP
// if i = 1 then
9083: LD_VAR 0 8
9087: PUSH
9088: LD_INT 1
9090: EQUAL
9091: IFFALSE 9202
// begin tmp := [ ] ;
9093: LD_ADDR_VAR 0 19
9097: PUSH
9098: EMPTY
9099: ST_TO_ADDR
// for j in f do
9100: LD_ADDR_VAR 0 9
9104: PUSH
9105: LD_VAR 0 12
9109: PUSH
9110: FOR_IN
9111: IFFALSE 9184
// if GetBType ( j ) = b_bunker then
9113: LD_VAR 0 9
9117: PPUSH
9118: CALL_OW 266
9122: PUSH
9123: LD_INT 32
9125: EQUAL
9126: IFFALSE 9153
// tmp := Insert ( tmp , 1 , j ) else
9128: LD_ADDR_VAR 0 19
9132: PUSH
9133: LD_VAR 0 19
9137: PPUSH
9138: LD_INT 1
9140: PPUSH
9141: LD_VAR 0 9
9145: PPUSH
9146: CALL_OW 2
9150: ST_TO_ADDR
9151: GO 9182
// tmp := Insert ( tmp , tmp + 1 , j ) ;
9153: LD_ADDR_VAR 0 19
9157: PUSH
9158: LD_VAR 0 19
9162: PPUSH
9163: LD_VAR 0 19
9167: PUSH
9168: LD_INT 1
9170: PLUS
9171: PPUSH
9172: LD_VAR 0 9
9176: PPUSH
9177: CALL_OW 2
9181: ST_TO_ADDR
9182: GO 9110
9184: POP
9185: POP
// if tmp then
9186: LD_VAR 0 19
9190: IFFALSE 9202
// f := tmp ;
9192: LD_ADDR_VAR 0 12
9196: PUSH
9197: LD_VAR 0 19
9201: ST_TO_ADDR
// end ; x := personel [ i ] ;
9202: LD_ADDR_VAR 0 13
9206: PUSH
9207: LD_VAR 0 6
9211: PUSH
9212: LD_VAR 0 8
9216: ARRAY
9217: ST_TO_ADDR
// if x = - 1 then
9218: LD_VAR 0 13
9222: PUSH
9223: LD_INT 1
9225: NEG
9226: EQUAL
9227: IFFALSE 9436
// begin for j in f do
9229: LD_ADDR_VAR 0 9
9233: PUSH
9234: LD_VAR 0 12
9238: PUSH
9239: FOR_IN
9240: IFFALSE 9432
// repeat InitHc ;
9242: CALL_OW 19
// if GetBType ( j ) = b_barracks then
9246: LD_VAR 0 9
9250: PPUSH
9251: CALL_OW 266
9255: PUSH
9256: LD_INT 5
9258: EQUAL
9259: IFFALSE 9329
// begin if UnitsInside ( j ) < 3 then
9261: LD_VAR 0 9
9265: PPUSH
9266: CALL_OW 313
9270: PUSH
9271: LD_INT 3
9273: LESS
9274: IFFALSE 9310
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
9276: LD_INT 0
9278: PPUSH
9279: LD_INT 5
9281: PUSH
9282: LD_INT 8
9284: PUSH
9285: LD_INT 9
9287: PUSH
9288: EMPTY
9289: LIST
9290: LIST
9291: LIST
9292: PUSH
9293: LD_VAR 0 17
9297: ARRAY
9298: PPUSH
9299: LD_VAR 0 4
9303: PPUSH
9304: CALL_OW 380
9308: GO 9327
// PrepareHuman ( false , i , skill ) ;
9310: LD_INT 0
9312: PPUSH
9313: LD_VAR 0 8
9317: PPUSH
9318: LD_VAR 0 4
9322: PPUSH
9323: CALL_OW 380
// end else
9327: GO 9346
// PrepareHuman ( false , i , skill ) ;
9329: LD_INT 0
9331: PPUSH
9332: LD_VAR 0 8
9336: PPUSH
9337: LD_VAR 0 4
9341: PPUSH
9342: CALL_OW 380
// un := CreateHuman ;
9346: LD_ADDR_VAR 0 14
9350: PUSH
9351: CALL_OW 44
9355: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
9356: LD_ADDR_VAR 0 7
9360: PUSH
9361: LD_VAR 0 7
9365: PPUSH
9366: LD_INT 1
9368: PPUSH
9369: LD_VAR 0 14
9373: PPUSH
9374: CALL_OW 2
9378: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
9379: LD_VAR 0 14
9383: PPUSH
9384: LD_VAR 0 9
9388: PPUSH
9389: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
9393: LD_VAR 0 9
9397: PPUSH
9398: CALL_OW 313
9402: PUSH
9403: LD_INT 6
9405: EQUAL
9406: PUSH
9407: LD_VAR 0 9
9411: PPUSH
9412: CALL_OW 266
9416: PUSH
9417: LD_INT 32
9419: PUSH
9420: LD_INT 31
9422: PUSH
9423: EMPTY
9424: LIST
9425: LIST
9426: IN
9427: OR
9428: IFFALSE 9242
9430: GO 9239
9432: POP
9433: POP
// end else
9434: GO 9816
// for j = 1 to x do
9436: LD_ADDR_VAR 0 9
9440: PUSH
9441: DOUBLE
9442: LD_INT 1
9444: DEC
9445: ST_TO_ADDR
9446: LD_VAR 0 13
9450: PUSH
9451: FOR_TO
9452: IFFALSE 9814
// begin InitHc ;
9454: CALL_OW 19
// if not f then
9458: LD_VAR 0 12
9462: NOT
9463: IFFALSE 9552
// begin PrepareHuman ( false , i , skill ) ;
9465: LD_INT 0
9467: PPUSH
9468: LD_VAR 0 8
9472: PPUSH
9473: LD_VAR 0 4
9477: PPUSH
9478: CALL_OW 380
// un := CreateHuman ;
9482: LD_ADDR_VAR 0 14
9486: PUSH
9487: CALL_OW 44
9491: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
9492: LD_ADDR_VAR 0 7
9496: PUSH
9497: LD_VAR 0 7
9501: PPUSH
9502: LD_INT 1
9504: PPUSH
9505: LD_VAR 0 14
9509: PPUSH
9510: CALL_OW 2
9514: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
9515: LD_VAR 0 14
9519: PPUSH
9520: LD_VAR 0 1
9524: PPUSH
9525: CALL_OW 250
9529: PPUSH
9530: LD_VAR 0 1
9534: PPUSH
9535: CALL_OW 251
9539: PPUSH
9540: LD_INT 10
9542: PPUSH
9543: LD_INT 0
9545: PPUSH
9546: CALL_OW 50
// continue ;
9550: GO 9451
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
9552: LD_VAR 0 12
9556: PUSH
9557: LD_INT 1
9559: ARRAY
9560: PPUSH
9561: CALL_OW 313
9565: PUSH
9566: LD_VAR 0 12
9570: PUSH
9571: LD_INT 1
9573: ARRAY
9574: PPUSH
9575: CALL_OW 266
9579: PUSH
9580: LD_INT 32
9582: PUSH
9583: LD_INT 31
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: IN
9590: AND
9591: PUSH
9592: LD_VAR 0 12
9596: PUSH
9597: LD_INT 1
9599: ARRAY
9600: PPUSH
9601: CALL_OW 313
9605: PUSH
9606: LD_INT 6
9608: EQUAL
9609: OR
9610: IFFALSE 9630
// f := Delete ( f , 1 ) ;
9612: LD_ADDR_VAR 0 12
9616: PUSH
9617: LD_VAR 0 12
9621: PPUSH
9622: LD_INT 1
9624: PPUSH
9625: CALL_OW 3
9629: ST_TO_ADDR
// if not f then
9630: LD_VAR 0 12
9634: NOT
9635: IFFALSE 9653
// begin x := x + 2 ;
9637: LD_ADDR_VAR 0 13
9641: PUSH
9642: LD_VAR 0 13
9646: PUSH
9647: LD_INT 2
9649: PLUS
9650: ST_TO_ADDR
// continue ;
9651: GO 9451
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
9653: LD_VAR 0 12
9657: PUSH
9658: LD_INT 1
9660: ARRAY
9661: PPUSH
9662: CALL_OW 266
9666: PUSH
9667: LD_INT 5
9669: EQUAL
9670: IFFALSE 9744
// begin if UnitsInside ( f [ 1 ] ) < 3 then
9672: LD_VAR 0 12
9676: PUSH
9677: LD_INT 1
9679: ARRAY
9680: PPUSH
9681: CALL_OW 313
9685: PUSH
9686: LD_INT 3
9688: LESS
9689: IFFALSE 9725
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
9691: LD_INT 0
9693: PPUSH
9694: LD_INT 5
9696: PUSH
9697: LD_INT 8
9699: PUSH
9700: LD_INT 9
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: LIST
9707: PUSH
9708: LD_VAR 0 17
9712: ARRAY
9713: PPUSH
9714: LD_VAR 0 4
9718: PPUSH
9719: CALL_OW 380
9723: GO 9742
// PrepareHuman ( false , i , skill ) ;
9725: LD_INT 0
9727: PPUSH
9728: LD_VAR 0 8
9732: PPUSH
9733: LD_VAR 0 4
9737: PPUSH
9738: CALL_OW 380
// end else
9742: GO 9761
// PrepareHuman ( false , i , skill ) ;
9744: LD_INT 0
9746: PPUSH
9747: LD_VAR 0 8
9751: PPUSH
9752: LD_VAR 0 4
9756: PPUSH
9757: CALL_OW 380
// un := CreateHuman ;
9761: LD_ADDR_VAR 0 14
9765: PUSH
9766: CALL_OW 44
9770: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
9771: LD_ADDR_VAR 0 7
9775: PUSH
9776: LD_VAR 0 7
9780: PPUSH
9781: LD_INT 1
9783: PPUSH
9784: LD_VAR 0 14
9788: PPUSH
9789: CALL_OW 2
9793: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
9794: LD_VAR 0 14
9798: PPUSH
9799: LD_VAR 0 12
9803: PUSH
9804: LD_INT 1
9806: ARRAY
9807: PPUSH
9808: CALL_OW 52
// end ;
9812: GO 9451
9814: POP
9815: POP
// end ;
9816: GO 8753
9818: POP
9819: POP
// result := result ^ buildings ;
9820: LD_ADDR_VAR 0 7
9824: PUSH
9825: LD_VAR 0 7
9829: PUSH
9830: LD_VAR 0 18
9834: ADD
9835: ST_TO_ADDR
// end else
9836: GO 9979
// begin for i = 1 to personel do
9838: LD_ADDR_VAR 0 8
9842: PUSH
9843: DOUBLE
9844: LD_INT 1
9846: DEC
9847: ST_TO_ADDR
9848: LD_VAR 0 6
9852: PUSH
9853: FOR_TO
9854: IFFALSE 9977
// begin if i > 4 then
9856: LD_VAR 0 8
9860: PUSH
9861: LD_INT 4
9863: GREATER
9864: IFFALSE 9868
// break ;
9866: GO 9977
// x := personel [ i ] ;
9868: LD_ADDR_VAR 0 13
9872: PUSH
9873: LD_VAR 0 6
9877: PUSH
9878: LD_VAR 0 8
9882: ARRAY
9883: ST_TO_ADDR
// if x = - 1 then
9884: LD_VAR 0 13
9888: PUSH
9889: LD_INT 1
9891: NEG
9892: EQUAL
9893: IFFALSE 9897
// continue ;
9895: GO 9853
// PrepareHuman ( false , i , skill ) ;
9897: LD_INT 0
9899: PPUSH
9900: LD_VAR 0 8
9904: PPUSH
9905: LD_VAR 0 4
9909: PPUSH
9910: CALL_OW 380
// un := CreateHuman ;
9914: LD_ADDR_VAR 0 14
9918: PUSH
9919: CALL_OW 44
9923: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
9924: LD_VAR 0 14
9928: PPUSH
9929: LD_VAR 0 1
9933: PPUSH
9934: CALL_OW 250
9938: PPUSH
9939: LD_VAR 0 1
9943: PPUSH
9944: CALL_OW 251
9948: PPUSH
9949: LD_INT 10
9951: PPUSH
9952: LD_INT 0
9954: PPUSH
9955: CALL_OW 50
// result := result ^ un ;
9959: LD_ADDR_VAR 0 7
9963: PUSH
9964: LD_VAR 0 7
9968: PUSH
9969: LD_VAR 0 14
9973: ADD
9974: ST_TO_ADDR
// end ;
9975: GO 9853
9977: POP
9978: POP
// end ; end ;
9979: LD_VAR 0 7
9983: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
9984: LD_INT 0
9986: PPUSH
9987: PPUSH
9988: PPUSH
9989: PPUSH
9990: PPUSH
9991: PPUSH
9992: PPUSH
9993: PPUSH
9994: PPUSH
9995: PPUSH
9996: PPUSH
9997: PPUSH
9998: PPUSH
9999: PPUSH
10000: PPUSH
10001: PPUSH
// result := false ;
10002: LD_ADDR_VAR 0 3
10006: PUSH
10007: LD_INT 0
10009: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
10010: LD_VAR 0 1
10014: NOT
10015: PUSH
10016: LD_VAR 0 1
10020: PPUSH
10021: CALL_OW 266
10025: PUSH
10026: LD_INT 32
10028: PUSH
10029: LD_INT 33
10031: PUSH
10032: EMPTY
10033: LIST
10034: LIST
10035: IN
10036: NOT
10037: OR
10038: IFFALSE 10042
// exit ;
10040: GO 11151
// nat := GetNation ( tower ) ;
10042: LD_ADDR_VAR 0 12
10046: PUSH
10047: LD_VAR 0 1
10051: PPUSH
10052: CALL_OW 248
10056: ST_TO_ADDR
// side := GetSide ( tower ) ;
10057: LD_ADDR_VAR 0 16
10061: PUSH
10062: LD_VAR 0 1
10066: PPUSH
10067: CALL_OW 255
10071: ST_TO_ADDR
// x := GetX ( tower ) ;
10072: LD_ADDR_VAR 0 10
10076: PUSH
10077: LD_VAR 0 1
10081: PPUSH
10082: CALL_OW 250
10086: ST_TO_ADDR
// y := GetY ( tower ) ;
10087: LD_ADDR_VAR 0 11
10091: PUSH
10092: LD_VAR 0 1
10096: PPUSH
10097: CALL_OW 251
10101: ST_TO_ADDR
// if not x or not y then
10102: LD_VAR 0 10
10106: NOT
10107: PUSH
10108: LD_VAR 0 11
10112: NOT
10113: OR
10114: IFFALSE 10118
// exit ;
10116: GO 11151
// weapon := 0 ;
10118: LD_ADDR_VAR 0 18
10122: PUSH
10123: LD_INT 0
10125: ST_TO_ADDR
// fac_list := [ ] ;
10126: LD_ADDR_VAR 0 17
10130: PUSH
10131: EMPTY
10132: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
10133: LD_ADDR_VAR 0 6
10137: PUSH
10138: LD_VAR 0 1
10142: PPUSH
10143: CALL_OW 274
10147: PPUSH
10148: LD_VAR 0 2
10152: PPUSH
10153: LD_INT 0
10155: PPUSH
10156: CALL 7722 0 3
10160: PPUSH
10161: LD_INT 30
10163: PUSH
10164: LD_INT 3
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: PPUSH
10171: CALL_OW 72
10175: ST_TO_ADDR
// if not factories then
10176: LD_VAR 0 6
10180: NOT
10181: IFFALSE 10185
// exit ;
10183: GO 11151
// for i in factories do
10185: LD_ADDR_VAR 0 8
10189: PUSH
10190: LD_VAR 0 6
10194: PUSH
10195: FOR_IN
10196: IFFALSE 10221
// fac_list := fac_list union AvailableWeaponList ( i ) ;
10198: LD_ADDR_VAR 0 17
10202: PUSH
10203: LD_VAR 0 17
10207: PUSH
10208: LD_VAR 0 8
10212: PPUSH
10213: CALL_OW 478
10217: UNION
10218: ST_TO_ADDR
10219: GO 10195
10221: POP
10222: POP
// if not fac_list then
10223: LD_VAR 0 17
10227: NOT
10228: IFFALSE 10232
// exit ;
10230: GO 11151
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
10232: LD_ADDR_VAR 0 5
10236: PUSH
10237: LD_INT 4
10239: PUSH
10240: LD_INT 5
10242: PUSH
10243: LD_INT 9
10245: PUSH
10246: LD_INT 10
10248: PUSH
10249: LD_INT 6
10251: PUSH
10252: LD_INT 7
10254: PUSH
10255: LD_INT 11
10257: PUSH
10258: EMPTY
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: LIST
10266: PUSH
10267: LD_INT 27
10269: PUSH
10270: LD_INT 28
10272: PUSH
10273: LD_INT 26
10275: PUSH
10276: LD_INT 30
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: PUSH
10285: LD_INT 43
10287: PUSH
10288: LD_INT 44
10290: PUSH
10291: LD_INT 46
10293: PUSH
10294: LD_INT 45
10296: PUSH
10297: LD_INT 47
10299: PUSH
10300: LD_INT 49
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: PUSH
10311: EMPTY
10312: LIST
10313: LIST
10314: LIST
10315: PUSH
10316: LD_VAR 0 12
10320: ARRAY
10321: ST_TO_ADDR
// list := list isect fac_list ;
10322: LD_ADDR_VAR 0 5
10326: PUSH
10327: LD_VAR 0 5
10331: PUSH
10332: LD_VAR 0 17
10336: ISECT
10337: ST_TO_ADDR
// if not list then
10338: LD_VAR 0 5
10342: NOT
10343: IFFALSE 10347
// exit ;
10345: GO 11151
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
10347: LD_VAR 0 12
10351: PUSH
10352: LD_INT 3
10354: EQUAL
10355: PUSH
10356: LD_INT 49
10358: PUSH
10359: LD_VAR 0 5
10363: IN
10364: AND
10365: PUSH
10366: LD_INT 31
10368: PPUSH
10369: LD_VAR 0 16
10373: PPUSH
10374: CALL_OW 321
10378: PUSH
10379: LD_INT 2
10381: EQUAL
10382: AND
10383: IFFALSE 10443
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
10385: LD_INT 22
10387: PUSH
10388: LD_VAR 0 16
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: PUSH
10397: LD_INT 35
10399: PUSH
10400: LD_INT 49
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PUSH
10407: LD_INT 91
10409: PUSH
10410: LD_VAR 0 1
10414: PUSH
10415: LD_INT 10
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: LIST
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: LIST
10427: PPUSH
10428: CALL_OW 69
10432: NOT
10433: IFFALSE 10443
// weapon := ru_time_lapser ;
10435: LD_ADDR_VAR 0 18
10439: PUSH
10440: LD_INT 49
10442: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
10443: LD_VAR 0 12
10447: PUSH
10448: LD_INT 1
10450: PUSH
10451: LD_INT 2
10453: PUSH
10454: EMPTY
10455: LIST
10456: LIST
10457: IN
10458: PUSH
10459: LD_INT 11
10461: PUSH
10462: LD_VAR 0 5
10466: IN
10467: PUSH
10468: LD_INT 30
10470: PUSH
10471: LD_VAR 0 5
10475: IN
10476: OR
10477: AND
10478: PUSH
10479: LD_INT 6
10481: PPUSH
10482: LD_VAR 0 16
10486: PPUSH
10487: CALL_OW 321
10491: PUSH
10492: LD_INT 2
10494: EQUAL
10495: AND
10496: IFFALSE 10661
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
10498: LD_INT 22
10500: PUSH
10501: LD_VAR 0 16
10505: PUSH
10506: EMPTY
10507: LIST
10508: LIST
10509: PUSH
10510: LD_INT 2
10512: PUSH
10513: LD_INT 35
10515: PUSH
10516: LD_INT 11
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: PUSH
10523: LD_INT 35
10525: PUSH
10526: LD_INT 30
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: PUSH
10533: EMPTY
10534: LIST
10535: LIST
10536: LIST
10537: PUSH
10538: LD_INT 91
10540: PUSH
10541: LD_VAR 0 1
10545: PUSH
10546: LD_INT 18
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: LIST
10553: PUSH
10554: EMPTY
10555: LIST
10556: LIST
10557: LIST
10558: PPUSH
10559: CALL_OW 69
10563: NOT
10564: PUSH
10565: LD_INT 22
10567: PUSH
10568: LD_VAR 0 16
10572: PUSH
10573: EMPTY
10574: LIST
10575: LIST
10576: PUSH
10577: LD_INT 2
10579: PUSH
10580: LD_INT 30
10582: PUSH
10583: LD_INT 32
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: PUSH
10590: LD_INT 30
10592: PUSH
10593: LD_INT 33
10595: PUSH
10596: EMPTY
10597: LIST
10598: LIST
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: LIST
10604: PUSH
10605: LD_INT 91
10607: PUSH
10608: LD_VAR 0 1
10612: PUSH
10613: LD_INT 12
10615: PUSH
10616: EMPTY
10617: LIST
10618: LIST
10619: LIST
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: LIST
10625: PUSH
10626: EMPTY
10627: LIST
10628: PPUSH
10629: CALL_OW 69
10633: PUSH
10634: LD_INT 2
10636: GREATER
10637: AND
10638: IFFALSE 10661
// weapon := [ us_radar , ar_radar ] [ nat ] ;
10640: LD_ADDR_VAR 0 18
10644: PUSH
10645: LD_INT 11
10647: PUSH
10648: LD_INT 30
10650: PUSH
10651: EMPTY
10652: LIST
10653: LIST
10654: PUSH
10655: LD_VAR 0 12
10659: ARRAY
10660: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
10661: LD_VAR 0 18
10665: NOT
10666: PUSH
10667: LD_INT 40
10669: PPUSH
10670: LD_VAR 0 16
10674: PPUSH
10675: CALL_OW 321
10679: PUSH
10680: LD_INT 2
10682: EQUAL
10683: AND
10684: PUSH
10685: LD_INT 7
10687: PUSH
10688: LD_VAR 0 5
10692: IN
10693: PUSH
10694: LD_INT 28
10696: PUSH
10697: LD_VAR 0 5
10701: IN
10702: OR
10703: PUSH
10704: LD_INT 45
10706: PUSH
10707: LD_VAR 0 5
10711: IN
10712: OR
10713: AND
10714: IFFALSE 10968
// begin hex := GetHexInfo ( x , y ) ;
10716: LD_ADDR_VAR 0 4
10720: PUSH
10721: LD_VAR 0 10
10725: PPUSH
10726: LD_VAR 0 11
10730: PPUSH
10731: CALL_OW 546
10735: ST_TO_ADDR
// if hex [ 1 ] then
10736: LD_VAR 0 4
10740: PUSH
10741: LD_INT 1
10743: ARRAY
10744: IFFALSE 10748
// exit ;
10746: GO 11151
// height := hex [ 2 ] ;
10748: LD_ADDR_VAR 0 15
10752: PUSH
10753: LD_VAR 0 4
10757: PUSH
10758: LD_INT 2
10760: ARRAY
10761: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
10762: LD_ADDR_VAR 0 14
10766: PUSH
10767: LD_INT 0
10769: PUSH
10770: LD_INT 2
10772: PUSH
10773: LD_INT 3
10775: PUSH
10776: LD_INT 5
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: ST_TO_ADDR
// for i in tmp do
10785: LD_ADDR_VAR 0 8
10789: PUSH
10790: LD_VAR 0 14
10794: PUSH
10795: FOR_IN
10796: IFFALSE 10966
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
10798: LD_ADDR_VAR 0 9
10802: PUSH
10803: LD_VAR 0 10
10807: PPUSH
10808: LD_VAR 0 8
10812: PPUSH
10813: LD_INT 5
10815: PPUSH
10816: CALL_OW 272
10820: PUSH
10821: LD_VAR 0 11
10825: PPUSH
10826: LD_VAR 0 8
10830: PPUSH
10831: LD_INT 5
10833: PPUSH
10834: CALL_OW 273
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
10843: LD_VAR 0 9
10847: PUSH
10848: LD_INT 1
10850: ARRAY
10851: PPUSH
10852: LD_VAR 0 9
10856: PUSH
10857: LD_INT 2
10859: ARRAY
10860: PPUSH
10861: CALL_OW 488
10865: IFFALSE 10964
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
10867: LD_ADDR_VAR 0 4
10871: PUSH
10872: LD_VAR 0 9
10876: PUSH
10877: LD_INT 1
10879: ARRAY
10880: PPUSH
10881: LD_VAR 0 9
10885: PUSH
10886: LD_INT 2
10888: ARRAY
10889: PPUSH
10890: CALL_OW 546
10894: ST_TO_ADDR
// if hex [ 1 ] then
10895: LD_VAR 0 4
10899: PUSH
10900: LD_INT 1
10902: ARRAY
10903: IFFALSE 10907
// continue ;
10905: GO 10795
// h := hex [ 2 ] ;
10907: LD_ADDR_VAR 0 13
10911: PUSH
10912: LD_VAR 0 4
10916: PUSH
10917: LD_INT 2
10919: ARRAY
10920: ST_TO_ADDR
// if h + 7 < height then
10921: LD_VAR 0 13
10925: PUSH
10926: LD_INT 7
10928: PLUS
10929: PUSH
10930: LD_VAR 0 15
10934: LESS
10935: IFFALSE 10964
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
10937: LD_ADDR_VAR 0 18
10941: PUSH
10942: LD_INT 7
10944: PUSH
10945: LD_INT 28
10947: PUSH
10948: LD_INT 45
10950: PUSH
10951: EMPTY
10952: LIST
10953: LIST
10954: LIST
10955: PUSH
10956: LD_VAR 0 12
10960: ARRAY
10961: ST_TO_ADDR
// break ;
10962: GO 10966
// end ; end ; end ;
10964: GO 10795
10966: POP
10967: POP
// end ; if not weapon then
10968: LD_VAR 0 18
10972: NOT
10973: IFFALSE 11033
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
10975: LD_ADDR_VAR 0 5
10979: PUSH
10980: LD_VAR 0 5
10984: PUSH
10985: LD_INT 11
10987: PUSH
10988: LD_INT 30
10990: PUSH
10991: LD_INT 49
10993: PUSH
10994: EMPTY
10995: LIST
10996: LIST
10997: LIST
10998: DIFF
10999: ST_TO_ADDR
// if not list then
11000: LD_VAR 0 5
11004: NOT
11005: IFFALSE 11009
// exit ;
11007: GO 11151
// weapon := list [ rand ( 1 , list ) ] ;
11009: LD_ADDR_VAR 0 18
11013: PUSH
11014: LD_VAR 0 5
11018: PUSH
11019: LD_INT 1
11021: PPUSH
11022: LD_VAR 0 5
11026: PPUSH
11027: CALL_OW 12
11031: ARRAY
11032: ST_TO_ADDR
// end ; if weapon then
11033: LD_VAR 0 18
11037: IFFALSE 11151
// begin tmp := CostOfWeapon ( weapon ) ;
11039: LD_ADDR_VAR 0 14
11043: PUSH
11044: LD_VAR 0 18
11048: PPUSH
11049: CALL_OW 451
11053: ST_TO_ADDR
// j := GetBase ( tower ) ;
11054: LD_ADDR_VAR 0 9
11058: PUSH
11059: LD_VAR 0 1
11063: PPUSH
11064: CALL_OW 274
11068: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
11069: LD_VAR 0 9
11073: PPUSH
11074: LD_INT 1
11076: PPUSH
11077: CALL_OW 275
11081: PUSH
11082: LD_VAR 0 14
11086: PUSH
11087: LD_INT 1
11089: ARRAY
11090: GREATEREQUAL
11091: PUSH
11092: LD_VAR 0 9
11096: PPUSH
11097: LD_INT 2
11099: PPUSH
11100: CALL_OW 275
11104: PUSH
11105: LD_VAR 0 14
11109: PUSH
11110: LD_INT 2
11112: ARRAY
11113: GREATEREQUAL
11114: AND
11115: PUSH
11116: LD_VAR 0 9
11120: PPUSH
11121: LD_INT 3
11123: PPUSH
11124: CALL_OW 275
11128: PUSH
11129: LD_VAR 0 14
11133: PUSH
11134: LD_INT 3
11136: ARRAY
11137: GREATEREQUAL
11138: AND
11139: IFFALSE 11151
// result := weapon ;
11141: LD_ADDR_VAR 0 3
11145: PUSH
11146: LD_VAR 0 18
11150: ST_TO_ADDR
// end ; end ;
11151: LD_VAR 0 3
11155: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
11156: LD_INT 0
11158: PPUSH
11159: PPUSH
// result := true ;
11160: LD_ADDR_VAR 0 3
11164: PUSH
11165: LD_INT 1
11167: ST_TO_ADDR
// if array1 = array2 then
11168: LD_VAR 0 1
11172: PUSH
11173: LD_VAR 0 2
11177: EQUAL
11178: IFFALSE 11238
// begin for i = 1 to array1 do
11180: LD_ADDR_VAR 0 4
11184: PUSH
11185: DOUBLE
11186: LD_INT 1
11188: DEC
11189: ST_TO_ADDR
11190: LD_VAR 0 1
11194: PUSH
11195: FOR_TO
11196: IFFALSE 11234
// if array1 [ i ] <> array2 [ i ] then
11198: LD_VAR 0 1
11202: PUSH
11203: LD_VAR 0 4
11207: ARRAY
11208: PUSH
11209: LD_VAR 0 2
11213: PUSH
11214: LD_VAR 0 4
11218: ARRAY
11219: NONEQUAL
11220: IFFALSE 11232
// begin result := false ;
11222: LD_ADDR_VAR 0 3
11226: PUSH
11227: LD_INT 0
11229: ST_TO_ADDR
// break ;
11230: GO 11234
// end ;
11232: GO 11195
11234: POP
11235: POP
// end else
11236: GO 11246
// result := false ;
11238: LD_ADDR_VAR 0 3
11242: PUSH
11243: LD_INT 0
11245: ST_TO_ADDR
// end ;
11246: LD_VAR 0 3
11250: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
11251: LD_INT 0
11253: PPUSH
11254: PPUSH
// if not array1 or not array2 then
11255: LD_VAR 0 1
11259: NOT
11260: PUSH
11261: LD_VAR 0 2
11265: NOT
11266: OR
11267: IFFALSE 11271
// exit ;
11269: GO 11335
// result := true ;
11271: LD_ADDR_VAR 0 3
11275: PUSH
11276: LD_INT 1
11278: ST_TO_ADDR
// for i = 1 to array1 do
11279: LD_ADDR_VAR 0 4
11283: PUSH
11284: DOUBLE
11285: LD_INT 1
11287: DEC
11288: ST_TO_ADDR
11289: LD_VAR 0 1
11293: PUSH
11294: FOR_TO
11295: IFFALSE 11333
// if array1 [ i ] <> array2 [ i ] then
11297: LD_VAR 0 1
11301: PUSH
11302: LD_VAR 0 4
11306: ARRAY
11307: PUSH
11308: LD_VAR 0 2
11312: PUSH
11313: LD_VAR 0 4
11317: ARRAY
11318: NONEQUAL
11319: IFFALSE 11331
// begin result := false ;
11321: LD_ADDR_VAR 0 3
11325: PUSH
11326: LD_INT 0
11328: ST_TO_ADDR
// break ;
11329: GO 11333
// end ;
11331: GO 11294
11333: POP
11334: POP
// end ;
11335: LD_VAR 0 3
11339: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
11340: LD_INT 0
11342: PPUSH
11343: PPUSH
11344: PPUSH
// pom := GetBase ( fac ) ;
11345: LD_ADDR_VAR 0 5
11349: PUSH
11350: LD_VAR 0 1
11354: PPUSH
11355: CALL_OW 274
11359: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
11360: LD_ADDR_VAR 0 4
11364: PUSH
11365: LD_VAR 0 2
11369: PUSH
11370: LD_INT 1
11372: ARRAY
11373: PPUSH
11374: LD_VAR 0 2
11378: PUSH
11379: LD_INT 2
11381: ARRAY
11382: PPUSH
11383: LD_VAR 0 2
11387: PUSH
11388: LD_INT 3
11390: ARRAY
11391: PPUSH
11392: LD_VAR 0 2
11396: PUSH
11397: LD_INT 4
11399: ARRAY
11400: PPUSH
11401: CALL_OW 449
11405: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
11406: LD_ADDR_VAR 0 3
11410: PUSH
11411: LD_VAR 0 5
11415: PPUSH
11416: LD_INT 1
11418: PPUSH
11419: CALL_OW 275
11423: PUSH
11424: LD_VAR 0 4
11428: PUSH
11429: LD_INT 1
11431: ARRAY
11432: GREATEREQUAL
11433: PUSH
11434: LD_VAR 0 5
11438: PPUSH
11439: LD_INT 2
11441: PPUSH
11442: CALL_OW 275
11446: PUSH
11447: LD_VAR 0 4
11451: PUSH
11452: LD_INT 2
11454: ARRAY
11455: GREATEREQUAL
11456: AND
11457: PUSH
11458: LD_VAR 0 5
11462: PPUSH
11463: LD_INT 3
11465: PPUSH
11466: CALL_OW 275
11470: PUSH
11471: LD_VAR 0 4
11475: PUSH
11476: LD_INT 3
11478: ARRAY
11479: GREATEREQUAL
11480: AND
11481: ST_TO_ADDR
// end ;
11482: LD_VAR 0 3
11486: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
11487: LD_INT 0
11489: PPUSH
11490: PPUSH
11491: PPUSH
11492: PPUSH
// pom := GetBase ( building ) ;
11493: LD_ADDR_VAR 0 3
11497: PUSH
11498: LD_VAR 0 1
11502: PPUSH
11503: CALL_OW 274
11507: ST_TO_ADDR
// if not pom then
11508: LD_VAR 0 3
11512: NOT
11513: IFFALSE 11517
// exit ;
11515: GO 11687
// btype := GetBType ( building ) ;
11517: LD_ADDR_VAR 0 5
11521: PUSH
11522: LD_VAR 0 1
11526: PPUSH
11527: CALL_OW 266
11531: ST_TO_ADDR
// if btype = b_armoury then
11532: LD_VAR 0 5
11536: PUSH
11537: LD_INT 4
11539: EQUAL
11540: IFFALSE 11550
// btype := b_barracks ;
11542: LD_ADDR_VAR 0 5
11546: PUSH
11547: LD_INT 5
11549: ST_TO_ADDR
// if btype = b_depot then
11550: LD_VAR 0 5
11554: PUSH
11555: LD_INT 0
11557: EQUAL
11558: IFFALSE 11568
// btype := b_warehouse ;
11560: LD_ADDR_VAR 0 5
11564: PUSH
11565: LD_INT 1
11567: ST_TO_ADDR
// if btype = b_workshop then
11568: LD_VAR 0 5
11572: PUSH
11573: LD_INT 2
11575: EQUAL
11576: IFFALSE 11586
// btype := b_factory ;
11578: LD_ADDR_VAR 0 5
11582: PUSH
11583: LD_INT 3
11585: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
11586: LD_ADDR_VAR 0 4
11590: PUSH
11591: LD_VAR 0 5
11595: PPUSH
11596: LD_VAR 0 1
11600: PPUSH
11601: CALL_OW 248
11605: PPUSH
11606: CALL_OW 450
11610: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
11611: LD_ADDR_VAR 0 2
11615: PUSH
11616: LD_VAR 0 3
11620: PPUSH
11621: LD_INT 1
11623: PPUSH
11624: CALL_OW 275
11628: PUSH
11629: LD_VAR 0 4
11633: PUSH
11634: LD_INT 1
11636: ARRAY
11637: GREATEREQUAL
11638: PUSH
11639: LD_VAR 0 3
11643: PPUSH
11644: LD_INT 2
11646: PPUSH
11647: CALL_OW 275
11651: PUSH
11652: LD_VAR 0 4
11656: PUSH
11657: LD_INT 2
11659: ARRAY
11660: GREATEREQUAL
11661: AND
11662: PUSH
11663: LD_VAR 0 3
11667: PPUSH
11668: LD_INT 3
11670: PPUSH
11671: CALL_OW 275
11675: PUSH
11676: LD_VAR 0 4
11680: PUSH
11681: LD_INT 3
11683: ARRAY
11684: GREATEREQUAL
11685: AND
11686: ST_TO_ADDR
// end ;
11687: LD_VAR 0 2
11691: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
11692: LD_INT 0
11694: PPUSH
11695: PPUSH
11696: PPUSH
// pom := GetBase ( building ) ;
11697: LD_ADDR_VAR 0 4
11701: PUSH
11702: LD_VAR 0 1
11706: PPUSH
11707: CALL_OW 274
11711: ST_TO_ADDR
// if not pom then
11712: LD_VAR 0 4
11716: NOT
11717: IFFALSE 11721
// exit ;
11719: GO 11822
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
11721: LD_ADDR_VAR 0 5
11725: PUSH
11726: LD_VAR 0 2
11730: PPUSH
11731: LD_VAR 0 1
11735: PPUSH
11736: CALL_OW 248
11740: PPUSH
11741: CALL_OW 450
11745: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
11746: LD_ADDR_VAR 0 3
11750: PUSH
11751: LD_VAR 0 4
11755: PPUSH
11756: LD_INT 1
11758: PPUSH
11759: CALL_OW 275
11763: PUSH
11764: LD_VAR 0 5
11768: PUSH
11769: LD_INT 1
11771: ARRAY
11772: GREATEREQUAL
11773: PUSH
11774: LD_VAR 0 4
11778: PPUSH
11779: LD_INT 2
11781: PPUSH
11782: CALL_OW 275
11786: PUSH
11787: LD_VAR 0 5
11791: PUSH
11792: LD_INT 2
11794: ARRAY
11795: GREATEREQUAL
11796: AND
11797: PUSH
11798: LD_VAR 0 4
11802: PPUSH
11803: LD_INT 3
11805: PPUSH
11806: CALL_OW 275
11810: PUSH
11811: LD_VAR 0 5
11815: PUSH
11816: LD_INT 3
11818: ARRAY
11819: GREATEREQUAL
11820: AND
11821: ST_TO_ADDR
// end ;
11822: LD_VAR 0 3
11826: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
11827: LD_INT 0
11829: PPUSH
11830: PPUSH
11831: PPUSH
11832: PPUSH
11833: PPUSH
11834: PPUSH
11835: PPUSH
11836: PPUSH
11837: PPUSH
11838: PPUSH
11839: PPUSH
// result := false ;
11840: LD_ADDR_VAR 0 8
11844: PUSH
11845: LD_INT 0
11847: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
11848: LD_VAR 0 5
11852: NOT
11853: PUSH
11854: LD_VAR 0 1
11858: NOT
11859: OR
11860: PUSH
11861: LD_VAR 0 2
11865: NOT
11866: OR
11867: PUSH
11868: LD_VAR 0 3
11872: NOT
11873: OR
11874: IFFALSE 11878
// exit ;
11876: GO 12692
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
11878: LD_ADDR_VAR 0 14
11882: PUSH
11883: LD_VAR 0 1
11887: PPUSH
11888: LD_VAR 0 2
11892: PPUSH
11893: LD_VAR 0 3
11897: PPUSH
11898: LD_VAR 0 4
11902: PPUSH
11903: LD_VAR 0 5
11907: PUSH
11908: LD_INT 1
11910: ARRAY
11911: PPUSH
11912: CALL_OW 248
11916: PPUSH
11917: LD_INT 0
11919: PPUSH
11920: CALL 13945 0 6
11924: ST_TO_ADDR
// if not hexes then
11925: LD_VAR 0 14
11929: NOT
11930: IFFALSE 11934
// exit ;
11932: GO 12692
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11934: LD_ADDR_VAR 0 17
11938: PUSH
11939: LD_VAR 0 5
11943: PPUSH
11944: LD_INT 22
11946: PUSH
11947: LD_VAR 0 13
11951: PPUSH
11952: CALL_OW 255
11956: PUSH
11957: EMPTY
11958: LIST
11959: LIST
11960: PUSH
11961: LD_INT 2
11963: PUSH
11964: LD_INT 30
11966: PUSH
11967: LD_INT 0
11969: PUSH
11970: EMPTY
11971: LIST
11972: LIST
11973: PUSH
11974: LD_INT 30
11976: PUSH
11977: LD_INT 1
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: LIST
11988: PUSH
11989: EMPTY
11990: LIST
11991: LIST
11992: PPUSH
11993: CALL_OW 72
11997: ST_TO_ADDR
// for i = 1 to hexes do
11998: LD_ADDR_VAR 0 9
12002: PUSH
12003: DOUBLE
12004: LD_INT 1
12006: DEC
12007: ST_TO_ADDR
12008: LD_VAR 0 14
12012: PUSH
12013: FOR_TO
12014: IFFALSE 12690
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
12016: LD_ADDR_VAR 0 13
12020: PUSH
12021: LD_VAR 0 14
12025: PUSH
12026: LD_VAR 0 9
12030: ARRAY
12031: PUSH
12032: LD_INT 1
12034: ARRAY
12035: PPUSH
12036: LD_VAR 0 14
12040: PUSH
12041: LD_VAR 0 9
12045: ARRAY
12046: PUSH
12047: LD_INT 2
12049: ARRAY
12050: PPUSH
12051: CALL_OW 428
12055: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
12056: LD_VAR 0 14
12060: PUSH
12061: LD_VAR 0 9
12065: ARRAY
12066: PUSH
12067: LD_INT 1
12069: ARRAY
12070: PPUSH
12071: LD_VAR 0 14
12075: PUSH
12076: LD_VAR 0 9
12080: ARRAY
12081: PUSH
12082: LD_INT 2
12084: ARRAY
12085: PPUSH
12086: CALL_OW 351
12090: PUSH
12091: LD_VAR 0 14
12095: PUSH
12096: LD_VAR 0 9
12100: ARRAY
12101: PUSH
12102: LD_INT 1
12104: ARRAY
12105: PPUSH
12106: LD_VAR 0 14
12110: PUSH
12111: LD_VAR 0 9
12115: ARRAY
12116: PUSH
12117: LD_INT 2
12119: ARRAY
12120: PPUSH
12121: CALL_OW 488
12125: NOT
12126: OR
12127: PUSH
12128: LD_VAR 0 13
12132: PPUSH
12133: CALL_OW 247
12137: PUSH
12138: LD_INT 3
12140: EQUAL
12141: OR
12142: IFFALSE 12148
// exit ;
12144: POP
12145: POP
12146: GO 12692
// if not tmp then
12148: LD_VAR 0 13
12152: NOT
12153: IFFALSE 12157
// continue ;
12155: GO 12013
// result := true ;
12157: LD_ADDR_VAR 0 8
12161: PUSH
12162: LD_INT 1
12164: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
12165: LD_VAR 0 6
12169: PUSH
12170: LD_VAR 0 13
12174: PPUSH
12175: CALL_OW 247
12179: PUSH
12180: LD_INT 2
12182: EQUAL
12183: AND
12184: PUSH
12185: LD_VAR 0 13
12189: PPUSH
12190: CALL_OW 263
12194: PUSH
12195: LD_INT 1
12197: EQUAL
12198: AND
12199: IFFALSE 12363
// begin if IsDrivenBy ( tmp ) then
12201: LD_VAR 0 13
12205: PPUSH
12206: CALL_OW 311
12210: IFFALSE 12214
// continue ;
12212: GO 12013
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
12214: LD_VAR 0 6
12218: PPUSH
12219: LD_INT 3
12221: PUSH
12222: LD_INT 60
12224: PUSH
12225: EMPTY
12226: LIST
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: PUSH
12232: LD_INT 3
12234: PUSH
12235: LD_INT 55
12237: PUSH
12238: EMPTY
12239: LIST
12240: PUSH
12241: EMPTY
12242: LIST
12243: LIST
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: PPUSH
12249: CALL_OW 72
12253: IFFALSE 12361
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
12255: LD_ADDR_VAR 0 18
12259: PUSH
12260: LD_VAR 0 6
12264: PPUSH
12265: LD_INT 3
12267: PUSH
12268: LD_INT 60
12270: PUSH
12271: EMPTY
12272: LIST
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: PUSH
12278: LD_INT 3
12280: PUSH
12281: LD_INT 55
12283: PUSH
12284: EMPTY
12285: LIST
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: PPUSH
12295: CALL_OW 72
12299: PUSH
12300: LD_INT 1
12302: ARRAY
12303: ST_TO_ADDR
// if IsInUnit ( driver ) then
12304: LD_VAR 0 18
12308: PPUSH
12309: CALL_OW 310
12313: IFFALSE 12324
// ComExit ( driver ) ;
12315: LD_VAR 0 18
12319: PPUSH
12320: CALL 37724 0 1
// AddComEnterUnit ( driver , tmp ) ;
12324: LD_VAR 0 18
12328: PPUSH
12329: LD_VAR 0 13
12333: PPUSH
12334: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
12338: LD_VAR 0 18
12342: PPUSH
12343: LD_VAR 0 7
12347: PPUSH
12348: CALL_OW 173
// AddComExitVehicle ( driver ) ;
12352: LD_VAR 0 18
12356: PPUSH
12357: CALL_OW 181
// end ; continue ;
12361: GO 12013
// end ; if not cleaners or not tmp in cleaners then
12363: LD_VAR 0 6
12367: NOT
12368: PUSH
12369: LD_VAR 0 13
12373: PUSH
12374: LD_VAR 0 6
12378: IN
12379: NOT
12380: OR
12381: IFFALSE 12688
// begin if dep then
12383: LD_VAR 0 17
12387: IFFALSE 12523
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
12389: LD_ADDR_VAR 0 16
12393: PUSH
12394: LD_VAR 0 17
12398: PUSH
12399: LD_INT 1
12401: ARRAY
12402: PPUSH
12403: CALL_OW 250
12407: PPUSH
12408: LD_VAR 0 17
12412: PUSH
12413: LD_INT 1
12415: ARRAY
12416: PPUSH
12417: CALL_OW 254
12421: PPUSH
12422: LD_INT 5
12424: PPUSH
12425: CALL_OW 272
12429: PUSH
12430: LD_VAR 0 17
12434: PUSH
12435: LD_INT 1
12437: ARRAY
12438: PPUSH
12439: CALL_OW 251
12443: PPUSH
12444: LD_VAR 0 17
12448: PUSH
12449: LD_INT 1
12451: ARRAY
12452: PPUSH
12453: CALL_OW 254
12457: PPUSH
12458: LD_INT 5
12460: PPUSH
12461: CALL_OW 273
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
12470: LD_VAR 0 16
12474: PUSH
12475: LD_INT 1
12477: ARRAY
12478: PPUSH
12479: LD_VAR 0 16
12483: PUSH
12484: LD_INT 2
12486: ARRAY
12487: PPUSH
12488: CALL_OW 488
12492: IFFALSE 12523
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
12494: LD_VAR 0 13
12498: PPUSH
12499: LD_VAR 0 16
12503: PUSH
12504: LD_INT 1
12506: ARRAY
12507: PPUSH
12508: LD_VAR 0 16
12512: PUSH
12513: LD_INT 2
12515: ARRAY
12516: PPUSH
12517: CALL_OW 111
// continue ;
12521: GO 12013
// end ; end ; r := GetDir ( tmp ) ;
12523: LD_ADDR_VAR 0 15
12527: PUSH
12528: LD_VAR 0 13
12532: PPUSH
12533: CALL_OW 254
12537: ST_TO_ADDR
// if r = 5 then
12538: LD_VAR 0 15
12542: PUSH
12543: LD_INT 5
12545: EQUAL
12546: IFFALSE 12556
// r := 0 ;
12548: LD_ADDR_VAR 0 15
12552: PUSH
12553: LD_INT 0
12555: ST_TO_ADDR
// for j = r to 5 do
12556: LD_ADDR_VAR 0 10
12560: PUSH
12561: DOUBLE
12562: LD_VAR 0 15
12566: DEC
12567: ST_TO_ADDR
12568: LD_INT 5
12570: PUSH
12571: FOR_TO
12572: IFFALSE 12686
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
12574: LD_ADDR_VAR 0 11
12578: PUSH
12579: LD_VAR 0 13
12583: PPUSH
12584: CALL_OW 250
12588: PPUSH
12589: LD_VAR 0 10
12593: PPUSH
12594: LD_INT 2
12596: PPUSH
12597: CALL_OW 272
12601: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
12602: LD_ADDR_VAR 0 12
12606: PUSH
12607: LD_VAR 0 13
12611: PPUSH
12612: CALL_OW 251
12616: PPUSH
12617: LD_VAR 0 10
12621: PPUSH
12622: LD_INT 2
12624: PPUSH
12625: CALL_OW 273
12629: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
12630: LD_VAR 0 11
12634: PPUSH
12635: LD_VAR 0 12
12639: PPUSH
12640: CALL_OW 488
12644: PUSH
12645: LD_VAR 0 11
12649: PPUSH
12650: LD_VAR 0 12
12654: PPUSH
12655: CALL_OW 428
12659: NOT
12660: AND
12661: IFFALSE 12684
// begin ComMoveXY ( tmp , _x , _y ) ;
12663: LD_VAR 0 13
12667: PPUSH
12668: LD_VAR 0 11
12672: PPUSH
12673: LD_VAR 0 12
12677: PPUSH
12678: CALL_OW 111
// break ;
12682: GO 12686
// end ; end ;
12684: GO 12571
12686: POP
12687: POP
// end ; end ;
12688: GO 12013
12690: POP
12691: POP
// end ;
12692: LD_VAR 0 8
12696: RET
// export function BuildingTechInvented ( side , btype ) ; begin
12697: LD_INT 0
12699: PPUSH
// result := true ;
12700: LD_ADDR_VAR 0 3
12704: PUSH
12705: LD_INT 1
12707: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
12708: LD_VAR 0 2
12712: PUSH
12713: LD_INT 24
12715: DOUBLE
12716: EQUAL
12717: IFTRUE 12727
12719: LD_INT 33
12721: DOUBLE
12722: EQUAL
12723: IFTRUE 12727
12725: GO 12752
12727: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
12728: LD_ADDR_VAR 0 3
12732: PUSH
12733: LD_INT 32
12735: PPUSH
12736: LD_VAR 0 1
12740: PPUSH
12741: CALL_OW 321
12745: PUSH
12746: LD_INT 2
12748: EQUAL
12749: ST_TO_ADDR
12750: GO 13068
12752: LD_INT 20
12754: DOUBLE
12755: EQUAL
12756: IFTRUE 12760
12758: GO 12785
12760: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
12761: LD_ADDR_VAR 0 3
12765: PUSH
12766: LD_INT 6
12768: PPUSH
12769: LD_VAR 0 1
12773: PPUSH
12774: CALL_OW 321
12778: PUSH
12779: LD_INT 2
12781: EQUAL
12782: ST_TO_ADDR
12783: GO 13068
12785: LD_INT 22
12787: DOUBLE
12788: EQUAL
12789: IFTRUE 12799
12791: LD_INT 36
12793: DOUBLE
12794: EQUAL
12795: IFTRUE 12799
12797: GO 12824
12799: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
12800: LD_ADDR_VAR 0 3
12804: PUSH
12805: LD_INT 15
12807: PPUSH
12808: LD_VAR 0 1
12812: PPUSH
12813: CALL_OW 321
12817: PUSH
12818: LD_INT 2
12820: EQUAL
12821: ST_TO_ADDR
12822: GO 13068
12824: LD_INT 30
12826: DOUBLE
12827: EQUAL
12828: IFTRUE 12832
12830: GO 12857
12832: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
12833: LD_ADDR_VAR 0 3
12837: PUSH
12838: LD_INT 20
12840: PPUSH
12841: LD_VAR 0 1
12845: PPUSH
12846: CALL_OW 321
12850: PUSH
12851: LD_INT 2
12853: EQUAL
12854: ST_TO_ADDR
12855: GO 13068
12857: LD_INT 28
12859: DOUBLE
12860: EQUAL
12861: IFTRUE 12871
12863: LD_INT 21
12865: DOUBLE
12866: EQUAL
12867: IFTRUE 12871
12869: GO 12896
12871: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
12872: LD_ADDR_VAR 0 3
12876: PUSH
12877: LD_INT 21
12879: PPUSH
12880: LD_VAR 0 1
12884: PPUSH
12885: CALL_OW 321
12889: PUSH
12890: LD_INT 2
12892: EQUAL
12893: ST_TO_ADDR
12894: GO 13068
12896: LD_INT 16
12898: DOUBLE
12899: EQUAL
12900: IFTRUE 12904
12902: GO 12929
12904: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
12905: LD_ADDR_VAR 0 3
12909: PUSH
12910: LD_INT 84
12912: PPUSH
12913: LD_VAR 0 1
12917: PPUSH
12918: CALL_OW 321
12922: PUSH
12923: LD_INT 2
12925: EQUAL
12926: ST_TO_ADDR
12927: GO 13068
12929: LD_INT 19
12931: DOUBLE
12932: EQUAL
12933: IFTRUE 12943
12935: LD_INT 23
12937: DOUBLE
12938: EQUAL
12939: IFTRUE 12943
12941: GO 12968
12943: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
12944: LD_ADDR_VAR 0 3
12948: PUSH
12949: LD_INT 83
12951: PPUSH
12952: LD_VAR 0 1
12956: PPUSH
12957: CALL_OW 321
12961: PUSH
12962: LD_INT 2
12964: EQUAL
12965: ST_TO_ADDR
12966: GO 13068
12968: LD_INT 17
12970: DOUBLE
12971: EQUAL
12972: IFTRUE 12976
12974: GO 13001
12976: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
12977: LD_ADDR_VAR 0 3
12981: PUSH
12982: LD_INT 39
12984: PPUSH
12985: LD_VAR 0 1
12989: PPUSH
12990: CALL_OW 321
12994: PUSH
12995: LD_INT 2
12997: EQUAL
12998: ST_TO_ADDR
12999: GO 13068
13001: LD_INT 18
13003: DOUBLE
13004: EQUAL
13005: IFTRUE 13009
13007: GO 13034
13009: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
13010: LD_ADDR_VAR 0 3
13014: PUSH
13015: LD_INT 40
13017: PPUSH
13018: LD_VAR 0 1
13022: PPUSH
13023: CALL_OW 321
13027: PUSH
13028: LD_INT 2
13030: EQUAL
13031: ST_TO_ADDR
13032: GO 13068
13034: LD_INT 27
13036: DOUBLE
13037: EQUAL
13038: IFTRUE 13042
13040: GO 13067
13042: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
13043: LD_ADDR_VAR 0 3
13047: PUSH
13048: LD_INT 35
13050: PPUSH
13051: LD_VAR 0 1
13055: PPUSH
13056: CALL_OW 321
13060: PUSH
13061: LD_INT 2
13063: EQUAL
13064: ST_TO_ADDR
13065: GO 13068
13067: POP
// end ;
13068: LD_VAR 0 3
13072: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
13073: LD_INT 0
13075: PPUSH
13076: PPUSH
13077: PPUSH
13078: PPUSH
13079: PPUSH
13080: PPUSH
13081: PPUSH
13082: PPUSH
13083: PPUSH
13084: PPUSH
13085: PPUSH
// result := false ;
13086: LD_ADDR_VAR 0 6
13090: PUSH
13091: LD_INT 0
13093: ST_TO_ADDR
// if btype = b_depot then
13094: LD_VAR 0 2
13098: PUSH
13099: LD_INT 0
13101: EQUAL
13102: IFFALSE 13114
// begin result := true ;
13104: LD_ADDR_VAR 0 6
13108: PUSH
13109: LD_INT 1
13111: ST_TO_ADDR
// exit ;
13112: GO 13940
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
13114: LD_VAR 0 1
13118: NOT
13119: PUSH
13120: LD_VAR 0 1
13124: PPUSH
13125: CALL_OW 266
13129: PUSH
13130: LD_INT 0
13132: PUSH
13133: LD_INT 1
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: IN
13140: NOT
13141: OR
13142: PUSH
13143: LD_VAR 0 2
13147: NOT
13148: OR
13149: PUSH
13150: LD_VAR 0 5
13154: PUSH
13155: LD_INT 0
13157: PUSH
13158: LD_INT 1
13160: PUSH
13161: LD_INT 2
13163: PUSH
13164: LD_INT 3
13166: PUSH
13167: LD_INT 4
13169: PUSH
13170: LD_INT 5
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: IN
13181: NOT
13182: OR
13183: PUSH
13184: LD_VAR 0 3
13188: PPUSH
13189: LD_VAR 0 4
13193: PPUSH
13194: CALL_OW 488
13198: NOT
13199: OR
13200: IFFALSE 13204
// exit ;
13202: GO 13940
// side := GetSide ( depot ) ;
13204: LD_ADDR_VAR 0 9
13208: PUSH
13209: LD_VAR 0 1
13213: PPUSH
13214: CALL_OW 255
13218: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
13219: LD_VAR 0 9
13223: PPUSH
13224: LD_VAR 0 2
13228: PPUSH
13229: CALL 12697 0 2
13233: NOT
13234: IFFALSE 13238
// exit ;
13236: GO 13940
// pom := GetBase ( depot ) ;
13238: LD_ADDR_VAR 0 10
13242: PUSH
13243: LD_VAR 0 1
13247: PPUSH
13248: CALL_OW 274
13252: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
13253: LD_ADDR_VAR 0 11
13257: PUSH
13258: LD_VAR 0 2
13262: PPUSH
13263: LD_VAR 0 1
13267: PPUSH
13268: CALL_OW 248
13272: PPUSH
13273: CALL_OW 450
13277: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
13278: LD_VAR 0 10
13282: PPUSH
13283: LD_INT 1
13285: PPUSH
13286: CALL_OW 275
13290: PUSH
13291: LD_VAR 0 11
13295: PUSH
13296: LD_INT 1
13298: ARRAY
13299: GREATEREQUAL
13300: PUSH
13301: LD_VAR 0 10
13305: PPUSH
13306: LD_INT 2
13308: PPUSH
13309: CALL_OW 275
13313: PUSH
13314: LD_VAR 0 11
13318: PUSH
13319: LD_INT 2
13321: ARRAY
13322: GREATEREQUAL
13323: AND
13324: PUSH
13325: LD_VAR 0 10
13329: PPUSH
13330: LD_INT 3
13332: PPUSH
13333: CALL_OW 275
13337: PUSH
13338: LD_VAR 0 11
13342: PUSH
13343: LD_INT 3
13345: ARRAY
13346: GREATEREQUAL
13347: AND
13348: NOT
13349: IFFALSE 13353
// exit ;
13351: GO 13940
// if GetBType ( depot ) = b_depot then
13353: LD_VAR 0 1
13357: PPUSH
13358: CALL_OW 266
13362: PUSH
13363: LD_INT 0
13365: EQUAL
13366: IFFALSE 13378
// dist := 28 else
13368: LD_ADDR_VAR 0 14
13372: PUSH
13373: LD_INT 28
13375: ST_TO_ADDR
13376: GO 13386
// dist := 36 ;
13378: LD_ADDR_VAR 0 14
13382: PUSH
13383: LD_INT 36
13385: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
13386: LD_VAR 0 1
13390: PPUSH
13391: LD_VAR 0 3
13395: PPUSH
13396: LD_VAR 0 4
13400: PPUSH
13401: CALL_OW 297
13405: PUSH
13406: LD_VAR 0 14
13410: GREATER
13411: IFFALSE 13415
// exit ;
13413: GO 13940
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
13415: LD_ADDR_VAR 0 12
13419: PUSH
13420: LD_VAR 0 2
13424: PPUSH
13425: LD_VAR 0 3
13429: PPUSH
13430: LD_VAR 0 4
13434: PPUSH
13435: LD_VAR 0 5
13439: PPUSH
13440: LD_VAR 0 1
13444: PPUSH
13445: CALL_OW 248
13449: PPUSH
13450: LD_INT 0
13452: PPUSH
13453: CALL 13945 0 6
13457: ST_TO_ADDR
// if not hexes then
13458: LD_VAR 0 12
13462: NOT
13463: IFFALSE 13467
// exit ;
13465: GO 13940
// hex := GetHexInfo ( x , y ) ;
13467: LD_ADDR_VAR 0 15
13471: PUSH
13472: LD_VAR 0 3
13476: PPUSH
13477: LD_VAR 0 4
13481: PPUSH
13482: CALL_OW 546
13486: ST_TO_ADDR
// if hex [ 1 ] then
13487: LD_VAR 0 15
13491: PUSH
13492: LD_INT 1
13494: ARRAY
13495: IFFALSE 13499
// exit ;
13497: GO 13940
// height := hex [ 2 ] ;
13499: LD_ADDR_VAR 0 13
13503: PUSH
13504: LD_VAR 0 15
13508: PUSH
13509: LD_INT 2
13511: ARRAY
13512: ST_TO_ADDR
// for i = 1 to hexes do
13513: LD_ADDR_VAR 0 7
13517: PUSH
13518: DOUBLE
13519: LD_INT 1
13521: DEC
13522: ST_TO_ADDR
13523: LD_VAR 0 12
13527: PUSH
13528: FOR_TO
13529: IFFALSE 13859
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
13531: LD_VAR 0 12
13535: PUSH
13536: LD_VAR 0 7
13540: ARRAY
13541: PUSH
13542: LD_INT 1
13544: ARRAY
13545: PPUSH
13546: LD_VAR 0 12
13550: PUSH
13551: LD_VAR 0 7
13555: ARRAY
13556: PUSH
13557: LD_INT 2
13559: ARRAY
13560: PPUSH
13561: CALL_OW 488
13565: NOT
13566: PUSH
13567: LD_VAR 0 12
13571: PUSH
13572: LD_VAR 0 7
13576: ARRAY
13577: PUSH
13578: LD_INT 1
13580: ARRAY
13581: PPUSH
13582: LD_VAR 0 12
13586: PUSH
13587: LD_VAR 0 7
13591: ARRAY
13592: PUSH
13593: LD_INT 2
13595: ARRAY
13596: PPUSH
13597: CALL_OW 428
13601: PUSH
13602: LD_INT 0
13604: GREATER
13605: OR
13606: PUSH
13607: LD_VAR 0 12
13611: PUSH
13612: LD_VAR 0 7
13616: ARRAY
13617: PUSH
13618: LD_INT 1
13620: ARRAY
13621: PPUSH
13622: LD_VAR 0 12
13626: PUSH
13627: LD_VAR 0 7
13631: ARRAY
13632: PUSH
13633: LD_INT 2
13635: ARRAY
13636: PPUSH
13637: CALL_OW 351
13641: OR
13642: IFFALSE 13648
// exit ;
13644: POP
13645: POP
13646: GO 13940
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13648: LD_ADDR_VAR 0 8
13652: PUSH
13653: LD_VAR 0 12
13657: PUSH
13658: LD_VAR 0 7
13662: ARRAY
13663: PUSH
13664: LD_INT 1
13666: ARRAY
13667: PPUSH
13668: LD_VAR 0 12
13672: PUSH
13673: LD_VAR 0 7
13677: ARRAY
13678: PUSH
13679: LD_INT 2
13681: ARRAY
13682: PPUSH
13683: CALL_OW 546
13687: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
13688: LD_VAR 0 8
13692: PUSH
13693: LD_INT 1
13695: ARRAY
13696: PUSH
13697: LD_VAR 0 8
13701: PUSH
13702: LD_INT 2
13704: ARRAY
13705: PUSH
13706: LD_VAR 0 13
13710: PUSH
13711: LD_INT 2
13713: PLUS
13714: GREATER
13715: OR
13716: PUSH
13717: LD_VAR 0 8
13721: PUSH
13722: LD_INT 2
13724: ARRAY
13725: PUSH
13726: LD_VAR 0 13
13730: PUSH
13731: LD_INT 2
13733: MINUS
13734: LESS
13735: OR
13736: PUSH
13737: LD_VAR 0 8
13741: PUSH
13742: LD_INT 3
13744: ARRAY
13745: PUSH
13746: LD_INT 0
13748: PUSH
13749: LD_INT 8
13751: PUSH
13752: LD_INT 9
13754: PUSH
13755: LD_INT 10
13757: PUSH
13758: LD_INT 11
13760: PUSH
13761: LD_INT 12
13763: PUSH
13764: LD_INT 13
13766: PUSH
13767: LD_INT 16
13769: PUSH
13770: LD_INT 17
13772: PUSH
13773: LD_INT 18
13775: PUSH
13776: LD_INT 19
13778: PUSH
13779: LD_INT 20
13781: PUSH
13782: LD_INT 21
13784: PUSH
13785: EMPTY
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: IN
13800: NOT
13801: OR
13802: PUSH
13803: LD_VAR 0 8
13807: PUSH
13808: LD_INT 5
13810: ARRAY
13811: NOT
13812: OR
13813: PUSH
13814: LD_VAR 0 8
13818: PUSH
13819: LD_INT 6
13821: ARRAY
13822: PUSH
13823: LD_INT 1
13825: PUSH
13826: LD_INT 2
13828: PUSH
13829: LD_INT 7
13831: PUSH
13832: LD_INT 9
13834: PUSH
13835: LD_INT 10
13837: PUSH
13838: LD_INT 11
13840: PUSH
13841: EMPTY
13842: LIST
13843: LIST
13844: LIST
13845: LIST
13846: LIST
13847: LIST
13848: IN
13849: NOT
13850: OR
13851: IFFALSE 13857
// exit ;
13853: POP
13854: POP
13855: GO 13940
// end ;
13857: GO 13528
13859: POP
13860: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
13861: LD_VAR 0 9
13865: PPUSH
13866: LD_VAR 0 3
13870: PPUSH
13871: LD_VAR 0 4
13875: PPUSH
13876: LD_INT 20
13878: PPUSH
13879: CALL 5863 0 4
13883: PUSH
13884: LD_INT 4
13886: ARRAY
13887: IFFALSE 13891
// exit ;
13889: GO 13940
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
13891: LD_VAR 0 2
13895: PUSH
13896: LD_INT 29
13898: PUSH
13899: LD_INT 30
13901: PUSH
13902: EMPTY
13903: LIST
13904: LIST
13905: IN
13906: PUSH
13907: LD_VAR 0 3
13911: PPUSH
13912: LD_VAR 0 4
13916: PPUSH
13917: LD_VAR 0 9
13921: PPUSH
13922: CALL_OW 440
13926: NOT
13927: AND
13928: IFFALSE 13932
// exit ;
13930: GO 13940
// result := true ;
13932: LD_ADDR_VAR 0 6
13936: PUSH
13937: LD_INT 1
13939: ST_TO_ADDR
// end ;
13940: LD_VAR 0 6
13944: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
13945: LD_INT 0
13947: PPUSH
13948: PPUSH
13949: PPUSH
13950: PPUSH
13951: PPUSH
13952: PPUSH
13953: PPUSH
13954: PPUSH
13955: PPUSH
13956: PPUSH
13957: PPUSH
13958: PPUSH
13959: PPUSH
13960: PPUSH
13961: PPUSH
13962: PPUSH
13963: PPUSH
13964: PPUSH
13965: PPUSH
13966: PPUSH
13967: PPUSH
13968: PPUSH
13969: PPUSH
13970: PPUSH
13971: PPUSH
13972: PPUSH
13973: PPUSH
13974: PPUSH
13975: PPUSH
13976: PPUSH
13977: PPUSH
13978: PPUSH
13979: PPUSH
13980: PPUSH
13981: PPUSH
13982: PPUSH
13983: PPUSH
13984: PPUSH
13985: PPUSH
13986: PPUSH
13987: PPUSH
13988: PPUSH
13989: PPUSH
13990: PPUSH
13991: PPUSH
13992: PPUSH
13993: PPUSH
13994: PPUSH
13995: PPUSH
13996: PPUSH
13997: PPUSH
13998: PPUSH
13999: PPUSH
14000: PPUSH
14001: PPUSH
14002: PPUSH
14003: PPUSH
14004: PPUSH
// result = [ ] ;
14005: LD_ADDR_VAR 0 7
14009: PUSH
14010: EMPTY
14011: ST_TO_ADDR
// temp_list = [ ] ;
14012: LD_ADDR_VAR 0 9
14016: PUSH
14017: EMPTY
14018: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
14019: LD_VAR 0 4
14023: PUSH
14024: LD_INT 0
14026: PUSH
14027: LD_INT 1
14029: PUSH
14030: LD_INT 2
14032: PUSH
14033: LD_INT 3
14035: PUSH
14036: LD_INT 4
14038: PUSH
14039: LD_INT 5
14041: PUSH
14042: EMPTY
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: IN
14050: NOT
14051: PUSH
14052: LD_VAR 0 1
14056: PUSH
14057: LD_INT 0
14059: PUSH
14060: LD_INT 1
14062: PUSH
14063: EMPTY
14064: LIST
14065: LIST
14066: IN
14067: PUSH
14068: LD_VAR 0 5
14072: PUSH
14073: LD_INT 1
14075: PUSH
14076: LD_INT 2
14078: PUSH
14079: LD_INT 3
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: LIST
14086: IN
14087: NOT
14088: AND
14089: OR
14090: IFFALSE 14094
// exit ;
14092: GO 32485
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
14094: LD_VAR 0 1
14098: PUSH
14099: LD_INT 6
14101: PUSH
14102: LD_INT 7
14104: PUSH
14105: LD_INT 8
14107: PUSH
14108: LD_INT 13
14110: PUSH
14111: LD_INT 12
14113: PUSH
14114: LD_INT 15
14116: PUSH
14117: LD_INT 11
14119: PUSH
14120: LD_INT 14
14122: PUSH
14123: LD_INT 10
14125: PUSH
14126: EMPTY
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: IN
14137: IFFALSE 14147
// btype = b_lab ;
14139: LD_ADDR_VAR 0 1
14143: PUSH
14144: LD_INT 6
14146: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
14147: LD_VAR 0 6
14151: PUSH
14152: LD_INT 0
14154: PUSH
14155: LD_INT 1
14157: PUSH
14158: LD_INT 2
14160: PUSH
14161: EMPTY
14162: LIST
14163: LIST
14164: LIST
14165: IN
14166: NOT
14167: PUSH
14168: LD_VAR 0 1
14172: PUSH
14173: LD_INT 0
14175: PUSH
14176: LD_INT 1
14178: PUSH
14179: LD_INT 2
14181: PUSH
14182: LD_INT 3
14184: PUSH
14185: LD_INT 6
14187: PUSH
14188: LD_INT 36
14190: PUSH
14191: LD_INT 4
14193: PUSH
14194: LD_INT 5
14196: PUSH
14197: LD_INT 31
14199: PUSH
14200: LD_INT 32
14202: PUSH
14203: LD_INT 33
14205: PUSH
14206: EMPTY
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: IN
14219: NOT
14220: PUSH
14221: LD_VAR 0 6
14225: PUSH
14226: LD_INT 1
14228: EQUAL
14229: AND
14230: OR
14231: PUSH
14232: LD_VAR 0 1
14236: PUSH
14237: LD_INT 2
14239: PUSH
14240: LD_INT 3
14242: PUSH
14243: EMPTY
14244: LIST
14245: LIST
14246: IN
14247: NOT
14248: PUSH
14249: LD_VAR 0 6
14253: PUSH
14254: LD_INT 2
14256: EQUAL
14257: AND
14258: OR
14259: IFFALSE 14269
// mode = 0 ;
14261: LD_ADDR_VAR 0 6
14265: PUSH
14266: LD_INT 0
14268: ST_TO_ADDR
// case mode of 0 :
14269: LD_VAR 0 6
14273: PUSH
14274: LD_INT 0
14276: DOUBLE
14277: EQUAL
14278: IFTRUE 14282
14280: GO 25735
14282: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
14283: LD_ADDR_VAR 0 11
14287: PUSH
14288: LD_INT 0
14290: PUSH
14291: LD_INT 0
14293: PUSH
14294: EMPTY
14295: LIST
14296: LIST
14297: PUSH
14298: LD_INT 0
14300: PUSH
14301: LD_INT 1
14303: NEG
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: PUSH
14309: LD_INT 1
14311: PUSH
14312: LD_INT 0
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: PUSH
14319: LD_INT 1
14321: PUSH
14322: LD_INT 1
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: PUSH
14329: LD_INT 0
14331: PUSH
14332: LD_INT 1
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: PUSH
14339: LD_INT 1
14341: NEG
14342: PUSH
14343: LD_INT 0
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: PUSH
14350: LD_INT 1
14352: NEG
14353: PUSH
14354: LD_INT 1
14356: NEG
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PUSH
14362: LD_INT 1
14364: NEG
14365: PUSH
14366: LD_INT 2
14368: NEG
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: PUSH
14374: LD_INT 0
14376: PUSH
14377: LD_INT 2
14379: NEG
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: PUSH
14385: LD_INT 1
14387: PUSH
14388: LD_INT 1
14390: NEG
14391: PUSH
14392: EMPTY
14393: LIST
14394: LIST
14395: PUSH
14396: LD_INT 1
14398: PUSH
14399: LD_INT 2
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: PUSH
14406: LD_INT 0
14408: PUSH
14409: LD_INT 2
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: PUSH
14416: LD_INT 1
14418: NEG
14419: PUSH
14420: LD_INT 1
14422: PUSH
14423: EMPTY
14424: LIST
14425: LIST
14426: PUSH
14427: LD_INT 1
14429: PUSH
14430: LD_INT 3
14432: PUSH
14433: EMPTY
14434: LIST
14435: LIST
14436: PUSH
14437: LD_INT 0
14439: PUSH
14440: LD_INT 3
14442: PUSH
14443: EMPTY
14444: LIST
14445: LIST
14446: PUSH
14447: LD_INT 1
14449: NEG
14450: PUSH
14451: LD_INT 2
14453: PUSH
14454: EMPTY
14455: LIST
14456: LIST
14457: PUSH
14458: EMPTY
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
14476: LD_ADDR_VAR 0 12
14480: PUSH
14481: LD_INT 0
14483: PUSH
14484: LD_INT 0
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: PUSH
14491: LD_INT 0
14493: PUSH
14494: LD_INT 1
14496: NEG
14497: PUSH
14498: EMPTY
14499: LIST
14500: LIST
14501: PUSH
14502: LD_INT 1
14504: PUSH
14505: LD_INT 0
14507: PUSH
14508: EMPTY
14509: LIST
14510: LIST
14511: PUSH
14512: LD_INT 1
14514: PUSH
14515: LD_INT 1
14517: PUSH
14518: EMPTY
14519: LIST
14520: LIST
14521: PUSH
14522: LD_INT 0
14524: PUSH
14525: LD_INT 1
14527: PUSH
14528: EMPTY
14529: LIST
14530: LIST
14531: PUSH
14532: LD_INT 1
14534: NEG
14535: PUSH
14536: LD_INT 0
14538: PUSH
14539: EMPTY
14540: LIST
14541: LIST
14542: PUSH
14543: LD_INT 1
14545: NEG
14546: PUSH
14547: LD_INT 1
14549: NEG
14550: PUSH
14551: EMPTY
14552: LIST
14553: LIST
14554: PUSH
14555: LD_INT 1
14557: PUSH
14558: LD_INT 1
14560: NEG
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: PUSH
14566: LD_INT 2
14568: PUSH
14569: LD_INT 0
14571: PUSH
14572: EMPTY
14573: LIST
14574: LIST
14575: PUSH
14576: LD_INT 2
14578: PUSH
14579: LD_INT 1
14581: PUSH
14582: EMPTY
14583: LIST
14584: LIST
14585: PUSH
14586: LD_INT 1
14588: NEG
14589: PUSH
14590: LD_INT 1
14592: PUSH
14593: EMPTY
14594: LIST
14595: LIST
14596: PUSH
14597: LD_INT 2
14599: NEG
14600: PUSH
14601: LD_INT 0
14603: PUSH
14604: EMPTY
14605: LIST
14606: LIST
14607: PUSH
14608: LD_INT 2
14610: NEG
14611: PUSH
14612: LD_INT 1
14614: NEG
14615: PUSH
14616: EMPTY
14617: LIST
14618: LIST
14619: PUSH
14620: LD_INT 2
14622: NEG
14623: PUSH
14624: LD_INT 1
14626: PUSH
14627: EMPTY
14628: LIST
14629: LIST
14630: PUSH
14631: LD_INT 3
14633: NEG
14634: PUSH
14635: LD_INT 0
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: PUSH
14642: LD_INT 3
14644: NEG
14645: PUSH
14646: LD_INT 1
14648: NEG
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: PUSH
14654: EMPTY
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
14672: LD_ADDR_VAR 0 13
14676: PUSH
14677: LD_INT 0
14679: PUSH
14680: LD_INT 0
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: PUSH
14687: LD_INT 0
14689: PUSH
14690: LD_INT 1
14692: NEG
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: PUSH
14698: LD_INT 1
14700: PUSH
14701: LD_INT 0
14703: PUSH
14704: EMPTY
14705: LIST
14706: LIST
14707: PUSH
14708: LD_INT 1
14710: PUSH
14711: LD_INT 1
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: PUSH
14718: LD_INT 0
14720: PUSH
14721: LD_INT 1
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: PUSH
14728: LD_INT 1
14730: NEG
14731: PUSH
14732: LD_INT 0
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PUSH
14739: LD_INT 1
14741: NEG
14742: PUSH
14743: LD_INT 1
14745: NEG
14746: PUSH
14747: EMPTY
14748: LIST
14749: LIST
14750: PUSH
14751: LD_INT 1
14753: NEG
14754: PUSH
14755: LD_INT 2
14757: NEG
14758: PUSH
14759: EMPTY
14760: LIST
14761: LIST
14762: PUSH
14763: LD_INT 2
14765: PUSH
14766: LD_INT 1
14768: PUSH
14769: EMPTY
14770: LIST
14771: LIST
14772: PUSH
14773: LD_INT 2
14775: PUSH
14776: LD_INT 2
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: PUSH
14783: LD_INT 1
14785: PUSH
14786: LD_INT 2
14788: PUSH
14789: EMPTY
14790: LIST
14791: LIST
14792: PUSH
14793: LD_INT 2
14795: NEG
14796: PUSH
14797: LD_INT 1
14799: NEG
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: PUSH
14805: LD_INT 2
14807: NEG
14808: PUSH
14809: LD_INT 2
14811: NEG
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: PUSH
14817: LD_INT 2
14819: NEG
14820: PUSH
14821: LD_INT 3
14823: NEG
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: PUSH
14829: LD_INT 3
14831: NEG
14832: PUSH
14833: LD_INT 2
14835: NEG
14836: PUSH
14837: EMPTY
14838: LIST
14839: LIST
14840: PUSH
14841: LD_INT 3
14843: NEG
14844: PUSH
14845: LD_INT 3
14847: NEG
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: LIST
14866: LIST
14867: LIST
14868: LIST
14869: LIST
14870: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
14871: LD_ADDR_VAR 0 14
14875: PUSH
14876: LD_INT 0
14878: PUSH
14879: LD_INT 0
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: PUSH
14886: LD_INT 0
14888: PUSH
14889: LD_INT 1
14891: NEG
14892: PUSH
14893: EMPTY
14894: LIST
14895: LIST
14896: PUSH
14897: LD_INT 1
14899: PUSH
14900: LD_INT 0
14902: PUSH
14903: EMPTY
14904: LIST
14905: LIST
14906: PUSH
14907: LD_INT 1
14909: PUSH
14910: LD_INT 1
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: PUSH
14917: LD_INT 0
14919: PUSH
14920: LD_INT 1
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: PUSH
14927: LD_INT 1
14929: NEG
14930: PUSH
14931: LD_INT 0
14933: PUSH
14934: EMPTY
14935: LIST
14936: LIST
14937: PUSH
14938: LD_INT 1
14940: NEG
14941: PUSH
14942: LD_INT 1
14944: NEG
14945: PUSH
14946: EMPTY
14947: LIST
14948: LIST
14949: PUSH
14950: LD_INT 1
14952: NEG
14953: PUSH
14954: LD_INT 2
14956: NEG
14957: PUSH
14958: EMPTY
14959: LIST
14960: LIST
14961: PUSH
14962: LD_INT 0
14964: PUSH
14965: LD_INT 2
14967: NEG
14968: PUSH
14969: EMPTY
14970: LIST
14971: LIST
14972: PUSH
14973: LD_INT 1
14975: PUSH
14976: LD_INT 1
14978: NEG
14979: PUSH
14980: EMPTY
14981: LIST
14982: LIST
14983: PUSH
14984: LD_INT 1
14986: PUSH
14987: LD_INT 2
14989: PUSH
14990: EMPTY
14991: LIST
14992: LIST
14993: PUSH
14994: LD_INT 0
14996: PUSH
14997: LD_INT 2
14999: PUSH
15000: EMPTY
15001: LIST
15002: LIST
15003: PUSH
15004: LD_INT 1
15006: NEG
15007: PUSH
15008: LD_INT 1
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: PUSH
15015: LD_INT 1
15017: NEG
15018: PUSH
15019: LD_INT 3
15021: NEG
15022: PUSH
15023: EMPTY
15024: LIST
15025: LIST
15026: PUSH
15027: LD_INT 0
15029: PUSH
15030: LD_INT 3
15032: NEG
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: PUSH
15038: LD_INT 1
15040: PUSH
15041: LD_INT 2
15043: NEG
15044: PUSH
15045: EMPTY
15046: LIST
15047: LIST
15048: PUSH
15049: EMPTY
15050: LIST
15051: LIST
15052: LIST
15053: LIST
15054: LIST
15055: LIST
15056: LIST
15057: LIST
15058: LIST
15059: LIST
15060: LIST
15061: LIST
15062: LIST
15063: LIST
15064: LIST
15065: LIST
15066: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
15067: LD_ADDR_VAR 0 15
15071: PUSH
15072: LD_INT 0
15074: PUSH
15075: LD_INT 0
15077: PUSH
15078: EMPTY
15079: LIST
15080: LIST
15081: PUSH
15082: LD_INT 0
15084: PUSH
15085: LD_INT 1
15087: NEG
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PUSH
15093: LD_INT 1
15095: PUSH
15096: LD_INT 0
15098: PUSH
15099: EMPTY
15100: LIST
15101: LIST
15102: PUSH
15103: LD_INT 1
15105: PUSH
15106: LD_INT 1
15108: PUSH
15109: EMPTY
15110: LIST
15111: LIST
15112: PUSH
15113: LD_INT 0
15115: PUSH
15116: LD_INT 1
15118: PUSH
15119: EMPTY
15120: LIST
15121: LIST
15122: PUSH
15123: LD_INT 1
15125: NEG
15126: PUSH
15127: LD_INT 0
15129: PUSH
15130: EMPTY
15131: LIST
15132: LIST
15133: PUSH
15134: LD_INT 1
15136: NEG
15137: PUSH
15138: LD_INT 1
15140: NEG
15141: PUSH
15142: EMPTY
15143: LIST
15144: LIST
15145: PUSH
15146: LD_INT 1
15148: PUSH
15149: LD_INT 1
15151: NEG
15152: PUSH
15153: EMPTY
15154: LIST
15155: LIST
15156: PUSH
15157: LD_INT 2
15159: PUSH
15160: LD_INT 0
15162: PUSH
15163: EMPTY
15164: LIST
15165: LIST
15166: PUSH
15167: LD_INT 2
15169: PUSH
15170: LD_INT 1
15172: PUSH
15173: EMPTY
15174: LIST
15175: LIST
15176: PUSH
15177: LD_INT 1
15179: NEG
15180: PUSH
15181: LD_INT 1
15183: PUSH
15184: EMPTY
15185: LIST
15186: LIST
15187: PUSH
15188: LD_INT 2
15190: NEG
15191: PUSH
15192: LD_INT 0
15194: PUSH
15195: EMPTY
15196: LIST
15197: LIST
15198: PUSH
15199: LD_INT 2
15201: NEG
15202: PUSH
15203: LD_INT 1
15205: NEG
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: PUSH
15211: LD_INT 2
15213: PUSH
15214: LD_INT 1
15216: NEG
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: PUSH
15222: LD_INT 3
15224: PUSH
15225: LD_INT 0
15227: PUSH
15228: EMPTY
15229: LIST
15230: LIST
15231: PUSH
15232: LD_INT 3
15234: PUSH
15235: LD_INT 1
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: PUSH
15242: EMPTY
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
15260: LD_ADDR_VAR 0 16
15264: PUSH
15265: LD_INT 0
15267: PUSH
15268: LD_INT 0
15270: PUSH
15271: EMPTY
15272: LIST
15273: LIST
15274: PUSH
15275: LD_INT 0
15277: PUSH
15278: LD_INT 1
15280: NEG
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: PUSH
15286: LD_INT 1
15288: PUSH
15289: LD_INT 0
15291: PUSH
15292: EMPTY
15293: LIST
15294: LIST
15295: PUSH
15296: LD_INT 1
15298: PUSH
15299: LD_INT 1
15301: PUSH
15302: EMPTY
15303: LIST
15304: LIST
15305: PUSH
15306: LD_INT 0
15308: PUSH
15309: LD_INT 1
15311: PUSH
15312: EMPTY
15313: LIST
15314: LIST
15315: PUSH
15316: LD_INT 1
15318: NEG
15319: PUSH
15320: LD_INT 0
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PUSH
15327: LD_INT 1
15329: NEG
15330: PUSH
15331: LD_INT 1
15333: NEG
15334: PUSH
15335: EMPTY
15336: LIST
15337: LIST
15338: PUSH
15339: LD_INT 1
15341: NEG
15342: PUSH
15343: LD_INT 2
15345: NEG
15346: PUSH
15347: EMPTY
15348: LIST
15349: LIST
15350: PUSH
15351: LD_INT 2
15353: PUSH
15354: LD_INT 1
15356: PUSH
15357: EMPTY
15358: LIST
15359: LIST
15360: PUSH
15361: LD_INT 2
15363: PUSH
15364: LD_INT 2
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: PUSH
15371: LD_INT 1
15373: PUSH
15374: LD_INT 2
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: PUSH
15381: LD_INT 2
15383: NEG
15384: PUSH
15385: LD_INT 1
15387: NEG
15388: PUSH
15389: EMPTY
15390: LIST
15391: LIST
15392: PUSH
15393: LD_INT 2
15395: NEG
15396: PUSH
15397: LD_INT 2
15399: NEG
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: PUSH
15405: LD_INT 3
15407: PUSH
15408: LD_INT 2
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: PUSH
15415: LD_INT 3
15417: PUSH
15418: LD_INT 3
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: PUSH
15425: LD_INT 2
15427: PUSH
15428: LD_INT 3
15430: PUSH
15431: EMPTY
15432: LIST
15433: LIST
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15453: LD_ADDR_VAR 0 17
15457: PUSH
15458: LD_INT 0
15460: PUSH
15461: LD_INT 0
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: PUSH
15468: LD_INT 0
15470: PUSH
15471: LD_INT 1
15473: NEG
15474: PUSH
15475: EMPTY
15476: LIST
15477: LIST
15478: PUSH
15479: LD_INT 1
15481: PUSH
15482: LD_INT 0
15484: PUSH
15485: EMPTY
15486: LIST
15487: LIST
15488: PUSH
15489: LD_INT 1
15491: PUSH
15492: LD_INT 1
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PUSH
15499: LD_INT 0
15501: PUSH
15502: LD_INT 1
15504: PUSH
15505: EMPTY
15506: LIST
15507: LIST
15508: PUSH
15509: LD_INT 1
15511: NEG
15512: PUSH
15513: LD_INT 0
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: PUSH
15520: LD_INT 1
15522: NEG
15523: PUSH
15524: LD_INT 1
15526: NEG
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: PUSH
15532: LD_INT 1
15534: NEG
15535: PUSH
15536: LD_INT 2
15538: NEG
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: PUSH
15544: LD_INT 0
15546: PUSH
15547: LD_INT 2
15549: NEG
15550: PUSH
15551: EMPTY
15552: LIST
15553: LIST
15554: PUSH
15555: LD_INT 1
15557: PUSH
15558: LD_INT 1
15560: NEG
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: PUSH
15566: LD_INT 2
15568: PUSH
15569: LD_INT 0
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: PUSH
15576: LD_INT 2
15578: PUSH
15579: LD_INT 1
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: PUSH
15586: LD_INT 2
15588: PUSH
15589: LD_INT 2
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: PUSH
15596: LD_INT 1
15598: PUSH
15599: LD_INT 2
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: PUSH
15606: LD_INT 0
15608: PUSH
15609: LD_INT 2
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: PUSH
15616: LD_INT 1
15618: NEG
15619: PUSH
15620: LD_INT 1
15622: PUSH
15623: EMPTY
15624: LIST
15625: LIST
15626: PUSH
15627: LD_INT 2
15629: NEG
15630: PUSH
15631: LD_INT 0
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: PUSH
15638: LD_INT 2
15640: NEG
15641: PUSH
15642: LD_INT 1
15644: NEG
15645: PUSH
15646: EMPTY
15647: LIST
15648: LIST
15649: PUSH
15650: LD_INT 2
15652: NEG
15653: PUSH
15654: LD_INT 2
15656: NEG
15657: PUSH
15658: EMPTY
15659: LIST
15660: LIST
15661: PUSH
15662: EMPTY
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15683: LD_ADDR_VAR 0 18
15687: PUSH
15688: LD_INT 0
15690: PUSH
15691: LD_INT 0
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: PUSH
15698: LD_INT 0
15700: PUSH
15701: LD_INT 1
15703: NEG
15704: PUSH
15705: EMPTY
15706: LIST
15707: LIST
15708: PUSH
15709: LD_INT 1
15711: PUSH
15712: LD_INT 0
15714: PUSH
15715: EMPTY
15716: LIST
15717: LIST
15718: PUSH
15719: LD_INT 1
15721: PUSH
15722: LD_INT 1
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: PUSH
15729: LD_INT 0
15731: PUSH
15732: LD_INT 1
15734: PUSH
15735: EMPTY
15736: LIST
15737: LIST
15738: PUSH
15739: LD_INT 1
15741: NEG
15742: PUSH
15743: LD_INT 0
15745: PUSH
15746: EMPTY
15747: LIST
15748: LIST
15749: PUSH
15750: LD_INT 1
15752: NEG
15753: PUSH
15754: LD_INT 1
15756: NEG
15757: PUSH
15758: EMPTY
15759: LIST
15760: LIST
15761: PUSH
15762: LD_INT 1
15764: NEG
15765: PUSH
15766: LD_INT 2
15768: NEG
15769: PUSH
15770: EMPTY
15771: LIST
15772: LIST
15773: PUSH
15774: LD_INT 0
15776: PUSH
15777: LD_INT 2
15779: NEG
15780: PUSH
15781: EMPTY
15782: LIST
15783: LIST
15784: PUSH
15785: LD_INT 1
15787: PUSH
15788: LD_INT 1
15790: NEG
15791: PUSH
15792: EMPTY
15793: LIST
15794: LIST
15795: PUSH
15796: LD_INT 2
15798: PUSH
15799: LD_INT 0
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: PUSH
15806: LD_INT 2
15808: PUSH
15809: LD_INT 1
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: PUSH
15816: LD_INT 2
15818: PUSH
15819: LD_INT 2
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: PUSH
15826: LD_INT 1
15828: PUSH
15829: LD_INT 2
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: PUSH
15836: LD_INT 0
15838: PUSH
15839: LD_INT 2
15841: PUSH
15842: EMPTY
15843: LIST
15844: LIST
15845: PUSH
15846: LD_INT 1
15848: NEG
15849: PUSH
15850: LD_INT 1
15852: PUSH
15853: EMPTY
15854: LIST
15855: LIST
15856: PUSH
15857: LD_INT 2
15859: NEG
15860: PUSH
15861: LD_INT 0
15863: PUSH
15864: EMPTY
15865: LIST
15866: LIST
15867: PUSH
15868: LD_INT 2
15870: NEG
15871: PUSH
15872: LD_INT 1
15874: NEG
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: PUSH
15880: LD_INT 2
15882: NEG
15883: PUSH
15884: LD_INT 2
15886: NEG
15887: PUSH
15888: EMPTY
15889: LIST
15890: LIST
15891: PUSH
15892: EMPTY
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15913: LD_ADDR_VAR 0 19
15917: PUSH
15918: LD_INT 0
15920: PUSH
15921: LD_INT 0
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: PUSH
15928: LD_INT 0
15930: PUSH
15931: LD_INT 1
15933: NEG
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: PUSH
15939: LD_INT 1
15941: PUSH
15942: LD_INT 0
15944: PUSH
15945: EMPTY
15946: LIST
15947: LIST
15948: PUSH
15949: LD_INT 1
15951: PUSH
15952: LD_INT 1
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: PUSH
15959: LD_INT 0
15961: PUSH
15962: LD_INT 1
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: PUSH
15969: LD_INT 1
15971: NEG
15972: PUSH
15973: LD_INT 0
15975: PUSH
15976: EMPTY
15977: LIST
15978: LIST
15979: PUSH
15980: LD_INT 1
15982: NEG
15983: PUSH
15984: LD_INT 1
15986: NEG
15987: PUSH
15988: EMPTY
15989: LIST
15990: LIST
15991: PUSH
15992: LD_INT 1
15994: NEG
15995: PUSH
15996: LD_INT 2
15998: NEG
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: PUSH
16004: LD_INT 0
16006: PUSH
16007: LD_INT 2
16009: NEG
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: PUSH
16015: LD_INT 1
16017: PUSH
16018: LD_INT 1
16020: NEG
16021: PUSH
16022: EMPTY
16023: LIST
16024: LIST
16025: PUSH
16026: LD_INT 2
16028: PUSH
16029: LD_INT 0
16031: PUSH
16032: EMPTY
16033: LIST
16034: LIST
16035: PUSH
16036: LD_INT 2
16038: PUSH
16039: LD_INT 1
16041: PUSH
16042: EMPTY
16043: LIST
16044: LIST
16045: PUSH
16046: LD_INT 2
16048: PUSH
16049: LD_INT 2
16051: PUSH
16052: EMPTY
16053: LIST
16054: LIST
16055: PUSH
16056: LD_INT 1
16058: PUSH
16059: LD_INT 2
16061: PUSH
16062: EMPTY
16063: LIST
16064: LIST
16065: PUSH
16066: LD_INT 0
16068: PUSH
16069: LD_INT 2
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: PUSH
16076: LD_INT 1
16078: NEG
16079: PUSH
16080: LD_INT 1
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: PUSH
16087: LD_INT 2
16089: NEG
16090: PUSH
16091: LD_INT 0
16093: PUSH
16094: EMPTY
16095: LIST
16096: LIST
16097: PUSH
16098: LD_INT 2
16100: NEG
16101: PUSH
16102: LD_INT 1
16104: NEG
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: PUSH
16110: LD_INT 2
16112: NEG
16113: PUSH
16114: LD_INT 2
16116: NEG
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: PUSH
16122: EMPTY
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16143: LD_ADDR_VAR 0 20
16147: PUSH
16148: LD_INT 0
16150: PUSH
16151: LD_INT 0
16153: PUSH
16154: EMPTY
16155: LIST
16156: LIST
16157: PUSH
16158: LD_INT 0
16160: PUSH
16161: LD_INT 1
16163: NEG
16164: PUSH
16165: EMPTY
16166: LIST
16167: LIST
16168: PUSH
16169: LD_INT 1
16171: PUSH
16172: LD_INT 0
16174: PUSH
16175: EMPTY
16176: LIST
16177: LIST
16178: PUSH
16179: LD_INT 1
16181: PUSH
16182: LD_INT 1
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: PUSH
16189: LD_INT 0
16191: PUSH
16192: LD_INT 1
16194: PUSH
16195: EMPTY
16196: LIST
16197: LIST
16198: PUSH
16199: LD_INT 1
16201: NEG
16202: PUSH
16203: LD_INT 0
16205: PUSH
16206: EMPTY
16207: LIST
16208: LIST
16209: PUSH
16210: LD_INT 1
16212: NEG
16213: PUSH
16214: LD_INT 1
16216: NEG
16217: PUSH
16218: EMPTY
16219: LIST
16220: LIST
16221: PUSH
16222: LD_INT 1
16224: NEG
16225: PUSH
16226: LD_INT 2
16228: NEG
16229: PUSH
16230: EMPTY
16231: LIST
16232: LIST
16233: PUSH
16234: LD_INT 0
16236: PUSH
16237: LD_INT 2
16239: NEG
16240: PUSH
16241: EMPTY
16242: LIST
16243: LIST
16244: PUSH
16245: LD_INT 1
16247: PUSH
16248: LD_INT 1
16250: NEG
16251: PUSH
16252: EMPTY
16253: LIST
16254: LIST
16255: PUSH
16256: LD_INT 2
16258: PUSH
16259: LD_INT 0
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: PUSH
16266: LD_INT 2
16268: PUSH
16269: LD_INT 1
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: PUSH
16276: LD_INT 2
16278: PUSH
16279: LD_INT 2
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: PUSH
16286: LD_INT 1
16288: PUSH
16289: LD_INT 2
16291: PUSH
16292: EMPTY
16293: LIST
16294: LIST
16295: PUSH
16296: LD_INT 0
16298: PUSH
16299: LD_INT 2
16301: PUSH
16302: EMPTY
16303: LIST
16304: LIST
16305: PUSH
16306: LD_INT 1
16308: NEG
16309: PUSH
16310: LD_INT 1
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: PUSH
16317: LD_INT 2
16319: NEG
16320: PUSH
16321: LD_INT 0
16323: PUSH
16324: EMPTY
16325: LIST
16326: LIST
16327: PUSH
16328: LD_INT 2
16330: NEG
16331: PUSH
16332: LD_INT 1
16334: NEG
16335: PUSH
16336: EMPTY
16337: LIST
16338: LIST
16339: PUSH
16340: LD_INT 2
16342: NEG
16343: PUSH
16344: LD_INT 2
16346: NEG
16347: PUSH
16348: EMPTY
16349: LIST
16350: LIST
16351: PUSH
16352: EMPTY
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16373: LD_ADDR_VAR 0 21
16377: PUSH
16378: LD_INT 0
16380: PUSH
16381: LD_INT 0
16383: PUSH
16384: EMPTY
16385: LIST
16386: LIST
16387: PUSH
16388: LD_INT 0
16390: PUSH
16391: LD_INT 1
16393: NEG
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: PUSH
16399: LD_INT 1
16401: PUSH
16402: LD_INT 0
16404: PUSH
16405: EMPTY
16406: LIST
16407: LIST
16408: PUSH
16409: LD_INT 1
16411: PUSH
16412: LD_INT 1
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: PUSH
16419: LD_INT 0
16421: PUSH
16422: LD_INT 1
16424: PUSH
16425: EMPTY
16426: LIST
16427: LIST
16428: PUSH
16429: LD_INT 1
16431: NEG
16432: PUSH
16433: LD_INT 0
16435: PUSH
16436: EMPTY
16437: LIST
16438: LIST
16439: PUSH
16440: LD_INT 1
16442: NEG
16443: PUSH
16444: LD_INT 1
16446: NEG
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: PUSH
16452: LD_INT 1
16454: NEG
16455: PUSH
16456: LD_INT 2
16458: NEG
16459: PUSH
16460: EMPTY
16461: LIST
16462: LIST
16463: PUSH
16464: LD_INT 0
16466: PUSH
16467: LD_INT 2
16469: NEG
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PUSH
16475: LD_INT 1
16477: PUSH
16478: LD_INT 1
16480: NEG
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: LD_INT 2
16488: PUSH
16489: LD_INT 0
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: LD_INT 2
16498: PUSH
16499: LD_INT 1
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: PUSH
16506: LD_INT 2
16508: PUSH
16509: LD_INT 2
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: PUSH
16516: LD_INT 1
16518: PUSH
16519: LD_INT 2
16521: PUSH
16522: EMPTY
16523: LIST
16524: LIST
16525: PUSH
16526: LD_INT 0
16528: PUSH
16529: LD_INT 2
16531: PUSH
16532: EMPTY
16533: LIST
16534: LIST
16535: PUSH
16536: LD_INT 1
16538: NEG
16539: PUSH
16540: LD_INT 1
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: PUSH
16547: LD_INT 2
16549: NEG
16550: PUSH
16551: LD_INT 0
16553: PUSH
16554: EMPTY
16555: LIST
16556: LIST
16557: PUSH
16558: LD_INT 2
16560: NEG
16561: PUSH
16562: LD_INT 1
16564: NEG
16565: PUSH
16566: EMPTY
16567: LIST
16568: LIST
16569: PUSH
16570: LD_INT 2
16572: NEG
16573: PUSH
16574: LD_INT 2
16576: NEG
16577: PUSH
16578: EMPTY
16579: LIST
16580: LIST
16581: PUSH
16582: EMPTY
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16603: LD_ADDR_VAR 0 22
16607: PUSH
16608: LD_INT 0
16610: PUSH
16611: LD_INT 0
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: PUSH
16618: LD_INT 0
16620: PUSH
16621: LD_INT 1
16623: NEG
16624: PUSH
16625: EMPTY
16626: LIST
16627: LIST
16628: PUSH
16629: LD_INT 1
16631: PUSH
16632: LD_INT 0
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: PUSH
16639: LD_INT 1
16641: PUSH
16642: LD_INT 1
16644: PUSH
16645: EMPTY
16646: LIST
16647: LIST
16648: PUSH
16649: LD_INT 0
16651: PUSH
16652: LD_INT 1
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: PUSH
16659: LD_INT 1
16661: NEG
16662: PUSH
16663: LD_INT 0
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: PUSH
16670: LD_INT 1
16672: NEG
16673: PUSH
16674: LD_INT 1
16676: NEG
16677: PUSH
16678: EMPTY
16679: LIST
16680: LIST
16681: PUSH
16682: LD_INT 1
16684: NEG
16685: PUSH
16686: LD_INT 2
16688: NEG
16689: PUSH
16690: EMPTY
16691: LIST
16692: LIST
16693: PUSH
16694: LD_INT 0
16696: PUSH
16697: LD_INT 2
16699: NEG
16700: PUSH
16701: EMPTY
16702: LIST
16703: LIST
16704: PUSH
16705: LD_INT 1
16707: PUSH
16708: LD_INT 1
16710: NEG
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: PUSH
16716: LD_INT 2
16718: PUSH
16719: LD_INT 0
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: PUSH
16726: LD_INT 2
16728: PUSH
16729: LD_INT 1
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: PUSH
16736: LD_INT 2
16738: PUSH
16739: LD_INT 2
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: PUSH
16746: LD_INT 1
16748: PUSH
16749: LD_INT 2
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: PUSH
16756: LD_INT 0
16758: PUSH
16759: LD_INT 2
16761: PUSH
16762: EMPTY
16763: LIST
16764: LIST
16765: PUSH
16766: LD_INT 1
16768: NEG
16769: PUSH
16770: LD_INT 1
16772: PUSH
16773: EMPTY
16774: LIST
16775: LIST
16776: PUSH
16777: LD_INT 2
16779: NEG
16780: PUSH
16781: LD_INT 0
16783: PUSH
16784: EMPTY
16785: LIST
16786: LIST
16787: PUSH
16788: LD_INT 2
16790: NEG
16791: PUSH
16792: LD_INT 1
16794: NEG
16795: PUSH
16796: EMPTY
16797: LIST
16798: LIST
16799: PUSH
16800: LD_INT 2
16802: NEG
16803: PUSH
16804: LD_INT 2
16806: NEG
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: PUSH
16812: EMPTY
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
16833: LD_ADDR_VAR 0 23
16837: PUSH
16838: LD_INT 0
16840: PUSH
16841: LD_INT 0
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: PUSH
16848: LD_INT 0
16850: PUSH
16851: LD_INT 1
16853: NEG
16854: PUSH
16855: EMPTY
16856: LIST
16857: LIST
16858: PUSH
16859: LD_INT 1
16861: PUSH
16862: LD_INT 0
16864: PUSH
16865: EMPTY
16866: LIST
16867: LIST
16868: PUSH
16869: LD_INT 1
16871: PUSH
16872: LD_INT 1
16874: PUSH
16875: EMPTY
16876: LIST
16877: LIST
16878: PUSH
16879: LD_INT 0
16881: PUSH
16882: LD_INT 1
16884: PUSH
16885: EMPTY
16886: LIST
16887: LIST
16888: PUSH
16889: LD_INT 1
16891: NEG
16892: PUSH
16893: LD_INT 0
16895: PUSH
16896: EMPTY
16897: LIST
16898: LIST
16899: PUSH
16900: LD_INT 1
16902: NEG
16903: PUSH
16904: LD_INT 1
16906: NEG
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: PUSH
16912: LD_INT 1
16914: NEG
16915: PUSH
16916: LD_INT 2
16918: NEG
16919: PUSH
16920: EMPTY
16921: LIST
16922: LIST
16923: PUSH
16924: LD_INT 0
16926: PUSH
16927: LD_INT 2
16929: NEG
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PUSH
16935: LD_INT 1
16937: PUSH
16938: LD_INT 1
16940: NEG
16941: PUSH
16942: EMPTY
16943: LIST
16944: LIST
16945: PUSH
16946: LD_INT 2
16948: PUSH
16949: LD_INT 0
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: PUSH
16956: LD_INT 2
16958: PUSH
16959: LD_INT 1
16961: PUSH
16962: EMPTY
16963: LIST
16964: LIST
16965: PUSH
16966: LD_INT 2
16968: PUSH
16969: LD_INT 2
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: PUSH
16976: LD_INT 1
16978: PUSH
16979: LD_INT 2
16981: PUSH
16982: EMPTY
16983: LIST
16984: LIST
16985: PUSH
16986: LD_INT 0
16988: PUSH
16989: LD_INT 2
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: PUSH
16996: LD_INT 1
16998: NEG
16999: PUSH
17000: LD_INT 1
17002: PUSH
17003: EMPTY
17004: LIST
17005: LIST
17006: PUSH
17007: LD_INT 2
17009: NEG
17010: PUSH
17011: LD_INT 0
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: PUSH
17018: LD_INT 2
17020: NEG
17021: PUSH
17022: LD_INT 1
17024: NEG
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: PUSH
17030: LD_INT 2
17032: NEG
17033: PUSH
17034: LD_INT 2
17036: NEG
17037: PUSH
17038: EMPTY
17039: LIST
17040: LIST
17041: PUSH
17042: LD_INT 2
17044: NEG
17045: PUSH
17046: LD_INT 3
17048: NEG
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: PUSH
17054: LD_INT 1
17056: NEG
17057: PUSH
17058: LD_INT 3
17060: NEG
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: PUSH
17066: LD_INT 1
17068: PUSH
17069: LD_INT 2
17071: NEG
17072: PUSH
17073: EMPTY
17074: LIST
17075: LIST
17076: PUSH
17077: LD_INT 2
17079: PUSH
17080: LD_INT 1
17082: NEG
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: PUSH
17088: EMPTY
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: LIST
17104: LIST
17105: LIST
17106: LIST
17107: LIST
17108: LIST
17109: LIST
17110: LIST
17111: LIST
17112: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
17113: LD_ADDR_VAR 0 24
17117: PUSH
17118: LD_INT 0
17120: PUSH
17121: LD_INT 0
17123: PUSH
17124: EMPTY
17125: LIST
17126: LIST
17127: PUSH
17128: LD_INT 0
17130: PUSH
17131: LD_INT 1
17133: NEG
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: PUSH
17139: LD_INT 1
17141: PUSH
17142: LD_INT 0
17144: PUSH
17145: EMPTY
17146: LIST
17147: LIST
17148: PUSH
17149: LD_INT 1
17151: PUSH
17152: LD_INT 1
17154: PUSH
17155: EMPTY
17156: LIST
17157: LIST
17158: PUSH
17159: LD_INT 0
17161: PUSH
17162: LD_INT 1
17164: PUSH
17165: EMPTY
17166: LIST
17167: LIST
17168: PUSH
17169: LD_INT 1
17171: NEG
17172: PUSH
17173: LD_INT 0
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: PUSH
17180: LD_INT 1
17182: NEG
17183: PUSH
17184: LD_INT 1
17186: NEG
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: PUSH
17192: LD_INT 1
17194: NEG
17195: PUSH
17196: LD_INT 2
17198: NEG
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: PUSH
17204: LD_INT 0
17206: PUSH
17207: LD_INT 2
17209: NEG
17210: PUSH
17211: EMPTY
17212: LIST
17213: LIST
17214: PUSH
17215: LD_INT 1
17217: PUSH
17218: LD_INT 1
17220: NEG
17221: PUSH
17222: EMPTY
17223: LIST
17224: LIST
17225: PUSH
17226: LD_INT 2
17228: PUSH
17229: LD_INT 0
17231: PUSH
17232: EMPTY
17233: LIST
17234: LIST
17235: PUSH
17236: LD_INT 2
17238: PUSH
17239: LD_INT 1
17241: PUSH
17242: EMPTY
17243: LIST
17244: LIST
17245: PUSH
17246: LD_INT 2
17248: PUSH
17249: LD_INT 2
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: PUSH
17256: LD_INT 1
17258: PUSH
17259: LD_INT 2
17261: PUSH
17262: EMPTY
17263: LIST
17264: LIST
17265: PUSH
17266: LD_INT 0
17268: PUSH
17269: LD_INT 2
17271: PUSH
17272: EMPTY
17273: LIST
17274: LIST
17275: PUSH
17276: LD_INT 1
17278: NEG
17279: PUSH
17280: LD_INT 1
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PUSH
17287: LD_INT 2
17289: NEG
17290: PUSH
17291: LD_INT 0
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 2
17300: NEG
17301: PUSH
17302: LD_INT 1
17304: NEG
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: PUSH
17310: LD_INT 2
17312: NEG
17313: PUSH
17314: LD_INT 2
17316: NEG
17317: PUSH
17318: EMPTY
17319: LIST
17320: LIST
17321: PUSH
17322: LD_INT 1
17324: PUSH
17325: LD_INT 2
17327: NEG
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: PUSH
17333: LD_INT 2
17335: PUSH
17336: LD_INT 1
17338: NEG
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: PUSH
17344: LD_INT 3
17346: PUSH
17347: LD_INT 1
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: PUSH
17354: LD_INT 3
17356: PUSH
17357: LD_INT 2
17359: PUSH
17360: EMPTY
17361: LIST
17362: LIST
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: LIST
17368: LIST
17369: LIST
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: LIST
17378: LIST
17379: LIST
17380: LIST
17381: LIST
17382: LIST
17383: LIST
17384: LIST
17385: LIST
17386: LIST
17387: LIST
17388: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
17389: LD_ADDR_VAR 0 25
17393: PUSH
17394: LD_INT 0
17396: PUSH
17397: LD_INT 0
17399: PUSH
17400: EMPTY
17401: LIST
17402: LIST
17403: PUSH
17404: LD_INT 0
17406: PUSH
17407: LD_INT 1
17409: NEG
17410: PUSH
17411: EMPTY
17412: LIST
17413: LIST
17414: PUSH
17415: LD_INT 1
17417: PUSH
17418: LD_INT 0
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: PUSH
17425: LD_INT 1
17427: PUSH
17428: LD_INT 1
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: PUSH
17435: LD_INT 0
17437: PUSH
17438: LD_INT 1
17440: PUSH
17441: EMPTY
17442: LIST
17443: LIST
17444: PUSH
17445: LD_INT 1
17447: NEG
17448: PUSH
17449: LD_INT 0
17451: PUSH
17452: EMPTY
17453: LIST
17454: LIST
17455: PUSH
17456: LD_INT 1
17458: NEG
17459: PUSH
17460: LD_INT 1
17462: NEG
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: PUSH
17468: LD_INT 1
17470: NEG
17471: PUSH
17472: LD_INT 2
17474: NEG
17475: PUSH
17476: EMPTY
17477: LIST
17478: LIST
17479: PUSH
17480: LD_INT 0
17482: PUSH
17483: LD_INT 2
17485: NEG
17486: PUSH
17487: EMPTY
17488: LIST
17489: LIST
17490: PUSH
17491: LD_INT 1
17493: PUSH
17494: LD_INT 1
17496: NEG
17497: PUSH
17498: EMPTY
17499: LIST
17500: LIST
17501: PUSH
17502: LD_INT 2
17504: PUSH
17505: LD_INT 0
17507: PUSH
17508: EMPTY
17509: LIST
17510: LIST
17511: PUSH
17512: LD_INT 2
17514: PUSH
17515: LD_INT 1
17517: PUSH
17518: EMPTY
17519: LIST
17520: LIST
17521: PUSH
17522: LD_INT 2
17524: PUSH
17525: LD_INT 2
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: PUSH
17532: LD_INT 1
17534: PUSH
17535: LD_INT 2
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: PUSH
17542: LD_INT 0
17544: PUSH
17545: LD_INT 2
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: PUSH
17552: LD_INT 1
17554: NEG
17555: PUSH
17556: LD_INT 1
17558: PUSH
17559: EMPTY
17560: LIST
17561: LIST
17562: PUSH
17563: LD_INT 2
17565: NEG
17566: PUSH
17567: LD_INT 0
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PUSH
17574: LD_INT 2
17576: NEG
17577: PUSH
17578: LD_INT 1
17580: NEG
17581: PUSH
17582: EMPTY
17583: LIST
17584: LIST
17585: PUSH
17586: LD_INT 2
17588: NEG
17589: PUSH
17590: LD_INT 2
17592: NEG
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: PUSH
17598: LD_INT 3
17600: PUSH
17601: LD_INT 1
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: PUSH
17608: LD_INT 3
17610: PUSH
17611: LD_INT 2
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PUSH
17618: LD_INT 2
17620: PUSH
17621: LD_INT 3
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: PUSH
17628: LD_INT 1
17630: PUSH
17631: LD_INT 3
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: PUSH
17638: EMPTY
17639: LIST
17640: LIST
17641: LIST
17642: LIST
17643: LIST
17644: LIST
17645: LIST
17646: LIST
17647: LIST
17648: LIST
17649: LIST
17650: LIST
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
17663: LD_ADDR_VAR 0 26
17667: PUSH
17668: LD_INT 0
17670: PUSH
17671: LD_INT 0
17673: PUSH
17674: EMPTY
17675: LIST
17676: LIST
17677: PUSH
17678: LD_INT 0
17680: PUSH
17681: LD_INT 1
17683: NEG
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: LD_INT 1
17691: PUSH
17692: LD_INT 0
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: PUSH
17699: LD_INT 1
17701: PUSH
17702: LD_INT 1
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: PUSH
17709: LD_INT 0
17711: PUSH
17712: LD_INT 1
17714: PUSH
17715: EMPTY
17716: LIST
17717: LIST
17718: PUSH
17719: LD_INT 1
17721: NEG
17722: PUSH
17723: LD_INT 0
17725: PUSH
17726: EMPTY
17727: LIST
17728: LIST
17729: PUSH
17730: LD_INT 1
17732: NEG
17733: PUSH
17734: LD_INT 1
17736: NEG
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: PUSH
17742: LD_INT 1
17744: NEG
17745: PUSH
17746: LD_INT 2
17748: NEG
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: PUSH
17754: LD_INT 0
17756: PUSH
17757: LD_INT 2
17759: NEG
17760: PUSH
17761: EMPTY
17762: LIST
17763: LIST
17764: PUSH
17765: LD_INT 1
17767: PUSH
17768: LD_INT 1
17770: NEG
17771: PUSH
17772: EMPTY
17773: LIST
17774: LIST
17775: PUSH
17776: LD_INT 2
17778: PUSH
17779: LD_INT 0
17781: PUSH
17782: EMPTY
17783: LIST
17784: LIST
17785: PUSH
17786: LD_INT 2
17788: PUSH
17789: LD_INT 1
17791: PUSH
17792: EMPTY
17793: LIST
17794: LIST
17795: PUSH
17796: LD_INT 2
17798: PUSH
17799: LD_INT 2
17801: PUSH
17802: EMPTY
17803: LIST
17804: LIST
17805: PUSH
17806: LD_INT 1
17808: PUSH
17809: LD_INT 2
17811: PUSH
17812: EMPTY
17813: LIST
17814: LIST
17815: PUSH
17816: LD_INT 0
17818: PUSH
17819: LD_INT 2
17821: PUSH
17822: EMPTY
17823: LIST
17824: LIST
17825: PUSH
17826: LD_INT 1
17828: NEG
17829: PUSH
17830: LD_INT 1
17832: PUSH
17833: EMPTY
17834: LIST
17835: LIST
17836: PUSH
17837: LD_INT 2
17839: NEG
17840: PUSH
17841: LD_INT 0
17843: PUSH
17844: EMPTY
17845: LIST
17846: LIST
17847: PUSH
17848: LD_INT 2
17850: NEG
17851: PUSH
17852: LD_INT 1
17854: NEG
17855: PUSH
17856: EMPTY
17857: LIST
17858: LIST
17859: PUSH
17860: LD_INT 2
17862: NEG
17863: PUSH
17864: LD_INT 2
17866: NEG
17867: PUSH
17868: EMPTY
17869: LIST
17870: LIST
17871: PUSH
17872: LD_INT 2
17874: PUSH
17875: LD_INT 3
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: PUSH
17882: LD_INT 1
17884: PUSH
17885: LD_INT 3
17887: PUSH
17888: EMPTY
17889: LIST
17890: LIST
17891: PUSH
17892: LD_INT 1
17894: NEG
17895: PUSH
17896: LD_INT 2
17898: PUSH
17899: EMPTY
17900: LIST
17901: LIST
17902: PUSH
17903: LD_INT 2
17905: NEG
17906: PUSH
17907: LD_INT 1
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: LIST
17918: LIST
17919: LIST
17920: LIST
17921: LIST
17922: LIST
17923: LIST
17924: LIST
17925: LIST
17926: LIST
17927: LIST
17928: LIST
17929: LIST
17930: LIST
17931: LIST
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: LIST
17938: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
17939: LD_ADDR_VAR 0 27
17943: PUSH
17944: LD_INT 0
17946: PUSH
17947: LD_INT 0
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: LD_INT 0
17956: PUSH
17957: LD_INT 1
17959: NEG
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: PUSH
17965: LD_INT 1
17967: PUSH
17968: LD_INT 0
17970: PUSH
17971: EMPTY
17972: LIST
17973: LIST
17974: PUSH
17975: LD_INT 1
17977: PUSH
17978: LD_INT 1
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: PUSH
17985: LD_INT 0
17987: PUSH
17988: LD_INT 1
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: PUSH
17995: LD_INT 1
17997: NEG
17998: PUSH
17999: LD_INT 0
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: PUSH
18006: LD_INT 1
18008: NEG
18009: PUSH
18010: LD_INT 1
18012: NEG
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: PUSH
18018: LD_INT 1
18020: NEG
18021: PUSH
18022: LD_INT 2
18024: NEG
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: PUSH
18030: LD_INT 0
18032: PUSH
18033: LD_INT 2
18035: NEG
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PUSH
18041: LD_INT 1
18043: PUSH
18044: LD_INT 1
18046: NEG
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: PUSH
18052: LD_INT 2
18054: PUSH
18055: LD_INT 0
18057: PUSH
18058: EMPTY
18059: LIST
18060: LIST
18061: PUSH
18062: LD_INT 2
18064: PUSH
18065: LD_INT 1
18067: PUSH
18068: EMPTY
18069: LIST
18070: LIST
18071: PUSH
18072: LD_INT 2
18074: PUSH
18075: LD_INT 2
18077: PUSH
18078: EMPTY
18079: LIST
18080: LIST
18081: PUSH
18082: LD_INT 1
18084: PUSH
18085: LD_INT 2
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: PUSH
18092: LD_INT 0
18094: PUSH
18095: LD_INT 2
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: PUSH
18102: LD_INT 1
18104: NEG
18105: PUSH
18106: LD_INT 1
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: PUSH
18113: LD_INT 2
18115: NEG
18116: PUSH
18117: LD_INT 0
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: PUSH
18124: LD_INT 2
18126: NEG
18127: PUSH
18128: LD_INT 1
18130: NEG
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: PUSH
18136: LD_INT 2
18138: NEG
18139: PUSH
18140: LD_INT 2
18142: NEG
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: PUSH
18148: LD_INT 1
18150: NEG
18151: PUSH
18152: LD_INT 2
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: LD_INT 2
18161: NEG
18162: PUSH
18163: LD_INT 1
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: PUSH
18170: LD_INT 3
18172: NEG
18173: PUSH
18174: LD_INT 1
18176: NEG
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PUSH
18182: LD_INT 3
18184: NEG
18185: PUSH
18186: LD_INT 2
18188: NEG
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18219: LD_ADDR_VAR 0 28
18223: PUSH
18224: LD_INT 0
18226: PUSH
18227: LD_INT 0
18229: PUSH
18230: EMPTY
18231: LIST
18232: LIST
18233: PUSH
18234: LD_INT 0
18236: PUSH
18237: LD_INT 1
18239: NEG
18240: PUSH
18241: EMPTY
18242: LIST
18243: LIST
18244: PUSH
18245: LD_INT 1
18247: PUSH
18248: LD_INT 0
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: PUSH
18255: LD_INT 1
18257: PUSH
18258: LD_INT 1
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: PUSH
18265: LD_INT 0
18267: PUSH
18268: LD_INT 1
18270: PUSH
18271: EMPTY
18272: LIST
18273: LIST
18274: PUSH
18275: LD_INT 1
18277: NEG
18278: PUSH
18279: LD_INT 0
18281: PUSH
18282: EMPTY
18283: LIST
18284: LIST
18285: PUSH
18286: LD_INT 1
18288: NEG
18289: PUSH
18290: LD_INT 1
18292: NEG
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: PUSH
18298: LD_INT 1
18300: NEG
18301: PUSH
18302: LD_INT 2
18304: NEG
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: PUSH
18310: LD_INT 0
18312: PUSH
18313: LD_INT 2
18315: NEG
18316: PUSH
18317: EMPTY
18318: LIST
18319: LIST
18320: PUSH
18321: LD_INT 1
18323: PUSH
18324: LD_INT 1
18326: NEG
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PUSH
18332: LD_INT 2
18334: PUSH
18335: LD_INT 0
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: PUSH
18342: LD_INT 2
18344: PUSH
18345: LD_INT 1
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: PUSH
18352: LD_INT 2
18354: PUSH
18355: LD_INT 2
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: PUSH
18362: LD_INT 1
18364: PUSH
18365: LD_INT 2
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: PUSH
18372: LD_INT 0
18374: PUSH
18375: LD_INT 2
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: LD_INT 1
18384: NEG
18385: PUSH
18386: LD_INT 1
18388: PUSH
18389: EMPTY
18390: LIST
18391: LIST
18392: PUSH
18393: LD_INT 2
18395: NEG
18396: PUSH
18397: LD_INT 0
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: PUSH
18404: LD_INT 2
18406: NEG
18407: PUSH
18408: LD_INT 1
18410: NEG
18411: PUSH
18412: EMPTY
18413: LIST
18414: LIST
18415: PUSH
18416: LD_INT 2
18418: NEG
18419: PUSH
18420: LD_INT 2
18422: NEG
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: PUSH
18428: LD_INT 2
18430: NEG
18431: PUSH
18432: LD_INT 3
18434: NEG
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PUSH
18440: LD_INT 1
18442: NEG
18443: PUSH
18444: LD_INT 3
18446: NEG
18447: PUSH
18448: EMPTY
18449: LIST
18450: LIST
18451: PUSH
18452: LD_INT 3
18454: NEG
18455: PUSH
18456: LD_INT 1
18458: NEG
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: PUSH
18464: LD_INT 3
18466: NEG
18467: PUSH
18468: LD_INT 2
18470: NEG
18471: PUSH
18472: EMPTY
18473: LIST
18474: LIST
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: LIST
18499: LIST
18500: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
18501: LD_ADDR_VAR 0 29
18505: PUSH
18506: LD_INT 0
18508: PUSH
18509: LD_INT 0
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PUSH
18516: LD_INT 0
18518: PUSH
18519: LD_INT 1
18521: NEG
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: LD_INT 1
18529: PUSH
18530: LD_INT 0
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: PUSH
18537: LD_INT 1
18539: PUSH
18540: LD_INT 1
18542: PUSH
18543: EMPTY
18544: LIST
18545: LIST
18546: PUSH
18547: LD_INT 0
18549: PUSH
18550: LD_INT 1
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: PUSH
18557: LD_INT 1
18559: NEG
18560: PUSH
18561: LD_INT 0
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: PUSH
18568: LD_INT 1
18570: NEG
18571: PUSH
18572: LD_INT 1
18574: NEG
18575: PUSH
18576: EMPTY
18577: LIST
18578: LIST
18579: PUSH
18580: LD_INT 1
18582: NEG
18583: PUSH
18584: LD_INT 2
18586: NEG
18587: PUSH
18588: EMPTY
18589: LIST
18590: LIST
18591: PUSH
18592: LD_INT 0
18594: PUSH
18595: LD_INT 2
18597: NEG
18598: PUSH
18599: EMPTY
18600: LIST
18601: LIST
18602: PUSH
18603: LD_INT 1
18605: PUSH
18606: LD_INT 1
18608: NEG
18609: PUSH
18610: EMPTY
18611: LIST
18612: LIST
18613: PUSH
18614: LD_INT 2
18616: PUSH
18617: LD_INT 0
18619: PUSH
18620: EMPTY
18621: LIST
18622: LIST
18623: PUSH
18624: LD_INT 2
18626: PUSH
18627: LD_INT 1
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: PUSH
18634: LD_INT 1
18636: PUSH
18637: LD_INT 2
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: PUSH
18644: LD_INT 0
18646: PUSH
18647: LD_INT 2
18649: PUSH
18650: EMPTY
18651: LIST
18652: LIST
18653: PUSH
18654: LD_INT 1
18656: NEG
18657: PUSH
18658: LD_INT 1
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PUSH
18665: LD_INT 2
18667: NEG
18668: PUSH
18669: LD_INT 1
18671: NEG
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: PUSH
18677: LD_INT 2
18679: NEG
18680: PUSH
18681: LD_INT 2
18683: NEG
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: PUSH
18689: LD_INT 2
18691: NEG
18692: PUSH
18693: LD_INT 3
18695: NEG
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: PUSH
18701: LD_INT 2
18703: PUSH
18704: LD_INT 1
18706: NEG
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: PUSH
18712: LD_INT 3
18714: PUSH
18715: LD_INT 1
18717: PUSH
18718: EMPTY
18719: LIST
18720: LIST
18721: PUSH
18722: LD_INT 1
18724: PUSH
18725: LD_INT 3
18727: PUSH
18728: EMPTY
18729: LIST
18730: LIST
18731: PUSH
18732: LD_INT 1
18734: NEG
18735: PUSH
18736: LD_INT 2
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: PUSH
18743: LD_INT 3
18745: NEG
18746: PUSH
18747: LD_INT 2
18749: NEG
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: PUSH
18755: EMPTY
18756: LIST
18757: LIST
18758: LIST
18759: LIST
18760: LIST
18761: LIST
18762: LIST
18763: LIST
18764: LIST
18765: LIST
18766: LIST
18767: LIST
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
18780: LD_ADDR_VAR 0 30
18784: PUSH
18785: LD_INT 0
18787: PUSH
18788: LD_INT 0
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PUSH
18795: LD_INT 0
18797: PUSH
18798: LD_INT 1
18800: NEG
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: PUSH
18806: LD_INT 1
18808: PUSH
18809: LD_INT 0
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PUSH
18816: LD_INT 1
18818: PUSH
18819: LD_INT 1
18821: PUSH
18822: EMPTY
18823: LIST
18824: LIST
18825: PUSH
18826: LD_INT 0
18828: PUSH
18829: LD_INT 1
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: LD_INT 1
18838: NEG
18839: PUSH
18840: LD_INT 0
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: PUSH
18847: LD_INT 1
18849: NEG
18850: PUSH
18851: LD_INT 1
18853: NEG
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: PUSH
18859: LD_INT 1
18861: NEG
18862: PUSH
18863: LD_INT 2
18865: NEG
18866: PUSH
18867: EMPTY
18868: LIST
18869: LIST
18870: PUSH
18871: LD_INT 0
18873: PUSH
18874: LD_INT 2
18876: NEG
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: PUSH
18882: LD_INT 1
18884: PUSH
18885: LD_INT 1
18887: NEG
18888: PUSH
18889: EMPTY
18890: LIST
18891: LIST
18892: PUSH
18893: LD_INT 2
18895: PUSH
18896: LD_INT 0
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: PUSH
18903: LD_INT 2
18905: PUSH
18906: LD_INT 1
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: PUSH
18913: LD_INT 2
18915: PUSH
18916: LD_INT 2
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: PUSH
18923: LD_INT 1
18925: PUSH
18926: LD_INT 2
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PUSH
18933: LD_INT 1
18935: NEG
18936: PUSH
18937: LD_INT 1
18939: PUSH
18940: EMPTY
18941: LIST
18942: LIST
18943: PUSH
18944: LD_INT 2
18946: NEG
18947: PUSH
18948: LD_INT 0
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PUSH
18955: LD_INT 2
18957: NEG
18958: PUSH
18959: LD_INT 1
18961: NEG
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PUSH
18967: LD_INT 1
18969: NEG
18970: PUSH
18971: LD_INT 3
18973: NEG
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: PUSH
18979: LD_INT 1
18981: PUSH
18982: LD_INT 2
18984: NEG
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PUSH
18990: LD_INT 3
18992: PUSH
18993: LD_INT 2
18995: PUSH
18996: EMPTY
18997: LIST
18998: LIST
18999: PUSH
19000: LD_INT 2
19002: PUSH
19003: LD_INT 3
19005: PUSH
19006: EMPTY
19007: LIST
19008: LIST
19009: PUSH
19010: LD_INT 2
19012: NEG
19013: PUSH
19014: LD_INT 1
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: LD_INT 3
19023: NEG
19024: PUSH
19025: LD_INT 1
19027: NEG
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: LIST
19052: LIST
19053: LIST
19054: LIST
19055: LIST
19056: LIST
19057: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19058: LD_ADDR_VAR 0 31
19062: PUSH
19063: LD_INT 0
19065: PUSH
19066: LD_INT 0
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: PUSH
19073: LD_INT 0
19075: PUSH
19076: LD_INT 1
19078: NEG
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: PUSH
19084: LD_INT 1
19086: PUSH
19087: LD_INT 0
19089: PUSH
19090: EMPTY
19091: LIST
19092: LIST
19093: PUSH
19094: LD_INT 1
19096: PUSH
19097: LD_INT 1
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: PUSH
19104: LD_INT 0
19106: PUSH
19107: LD_INT 1
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: PUSH
19114: LD_INT 1
19116: NEG
19117: PUSH
19118: LD_INT 0
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PUSH
19125: LD_INT 1
19127: NEG
19128: PUSH
19129: LD_INT 1
19131: NEG
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: PUSH
19137: LD_INT 1
19139: NEG
19140: PUSH
19141: LD_INT 2
19143: NEG
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: PUSH
19149: LD_INT 1
19151: PUSH
19152: LD_INT 1
19154: NEG
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: PUSH
19160: LD_INT 2
19162: PUSH
19163: LD_INT 0
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: LD_INT 2
19172: PUSH
19173: LD_INT 1
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: LD_INT 2
19182: PUSH
19183: LD_INT 2
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: PUSH
19190: LD_INT 1
19192: PUSH
19193: LD_INT 2
19195: PUSH
19196: EMPTY
19197: LIST
19198: LIST
19199: PUSH
19200: LD_INT 0
19202: PUSH
19203: LD_INT 2
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PUSH
19210: LD_INT 1
19212: NEG
19213: PUSH
19214: LD_INT 1
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: PUSH
19221: LD_INT 2
19223: NEG
19224: PUSH
19225: LD_INT 1
19227: NEG
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: PUSH
19233: LD_INT 2
19235: NEG
19236: PUSH
19237: LD_INT 2
19239: NEG
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: PUSH
19245: LD_INT 2
19247: NEG
19248: PUSH
19249: LD_INT 3
19251: NEG
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: PUSH
19257: LD_INT 2
19259: PUSH
19260: LD_INT 1
19262: NEG
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: PUSH
19268: LD_INT 3
19270: PUSH
19271: LD_INT 1
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: PUSH
19278: LD_INT 1
19280: PUSH
19281: LD_INT 3
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: PUSH
19288: LD_INT 1
19290: NEG
19291: PUSH
19292: LD_INT 2
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PUSH
19299: LD_INT 3
19301: NEG
19302: PUSH
19303: LD_INT 2
19305: NEG
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19336: LD_ADDR_VAR 0 32
19340: PUSH
19341: LD_INT 0
19343: PUSH
19344: LD_INT 0
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: PUSH
19351: LD_INT 0
19353: PUSH
19354: LD_INT 1
19356: NEG
19357: PUSH
19358: EMPTY
19359: LIST
19360: LIST
19361: PUSH
19362: LD_INT 1
19364: PUSH
19365: LD_INT 0
19367: PUSH
19368: EMPTY
19369: LIST
19370: LIST
19371: PUSH
19372: LD_INT 1
19374: PUSH
19375: LD_INT 1
19377: PUSH
19378: EMPTY
19379: LIST
19380: LIST
19381: PUSH
19382: LD_INT 0
19384: PUSH
19385: LD_INT 1
19387: PUSH
19388: EMPTY
19389: LIST
19390: LIST
19391: PUSH
19392: LD_INT 1
19394: NEG
19395: PUSH
19396: LD_INT 0
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: LD_INT 1
19405: NEG
19406: PUSH
19407: LD_INT 1
19409: NEG
19410: PUSH
19411: EMPTY
19412: LIST
19413: LIST
19414: PUSH
19415: LD_INT 1
19417: NEG
19418: PUSH
19419: LD_INT 2
19421: NEG
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: PUSH
19427: LD_INT 0
19429: PUSH
19430: LD_INT 2
19432: NEG
19433: PUSH
19434: EMPTY
19435: LIST
19436: LIST
19437: PUSH
19438: LD_INT 1
19440: PUSH
19441: LD_INT 1
19443: NEG
19444: PUSH
19445: EMPTY
19446: LIST
19447: LIST
19448: PUSH
19449: LD_INT 2
19451: PUSH
19452: LD_INT 1
19454: PUSH
19455: EMPTY
19456: LIST
19457: LIST
19458: PUSH
19459: LD_INT 2
19461: PUSH
19462: LD_INT 2
19464: PUSH
19465: EMPTY
19466: LIST
19467: LIST
19468: PUSH
19469: LD_INT 1
19471: PUSH
19472: LD_INT 2
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: PUSH
19479: LD_INT 0
19481: PUSH
19482: LD_INT 2
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: PUSH
19489: LD_INT 1
19491: NEG
19492: PUSH
19493: LD_INT 1
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PUSH
19500: LD_INT 2
19502: NEG
19503: PUSH
19504: LD_INT 0
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 2
19513: NEG
19514: PUSH
19515: LD_INT 1
19517: NEG
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PUSH
19523: LD_INT 1
19525: NEG
19526: PUSH
19527: LD_INT 3
19529: NEG
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: PUSH
19535: LD_INT 1
19537: PUSH
19538: LD_INT 2
19540: NEG
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: PUSH
19546: LD_INT 3
19548: PUSH
19549: LD_INT 2
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: PUSH
19556: LD_INT 2
19558: PUSH
19559: LD_INT 3
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PUSH
19566: LD_INT 2
19568: NEG
19569: PUSH
19570: LD_INT 1
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: PUSH
19577: LD_INT 3
19579: NEG
19580: PUSH
19581: LD_INT 1
19583: NEG
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19614: LD_ADDR_VAR 0 33
19618: PUSH
19619: LD_INT 0
19621: PUSH
19622: LD_INT 0
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: PUSH
19629: LD_INT 0
19631: PUSH
19632: LD_INT 1
19634: NEG
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: PUSH
19640: LD_INT 1
19642: PUSH
19643: LD_INT 0
19645: PUSH
19646: EMPTY
19647: LIST
19648: LIST
19649: PUSH
19650: LD_INT 1
19652: PUSH
19653: LD_INT 1
19655: PUSH
19656: EMPTY
19657: LIST
19658: LIST
19659: PUSH
19660: LD_INT 0
19662: PUSH
19663: LD_INT 1
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: PUSH
19670: LD_INT 1
19672: NEG
19673: PUSH
19674: LD_INT 0
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: PUSH
19681: LD_INT 1
19683: NEG
19684: PUSH
19685: LD_INT 1
19687: NEG
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: PUSH
19693: LD_INT 1
19695: NEG
19696: PUSH
19697: LD_INT 2
19699: NEG
19700: PUSH
19701: EMPTY
19702: LIST
19703: LIST
19704: PUSH
19705: LD_INT 1
19707: PUSH
19708: LD_INT 1
19710: NEG
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: PUSH
19716: LD_INT 2
19718: PUSH
19719: LD_INT 0
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: PUSH
19726: LD_INT 2
19728: PUSH
19729: LD_INT 1
19731: PUSH
19732: EMPTY
19733: LIST
19734: LIST
19735: PUSH
19736: LD_INT 1
19738: PUSH
19739: LD_INT 2
19741: PUSH
19742: EMPTY
19743: LIST
19744: LIST
19745: PUSH
19746: LD_INT 0
19748: PUSH
19749: LD_INT 2
19751: PUSH
19752: EMPTY
19753: LIST
19754: LIST
19755: PUSH
19756: LD_INT 1
19758: NEG
19759: PUSH
19760: LD_INT 1
19762: PUSH
19763: EMPTY
19764: LIST
19765: LIST
19766: PUSH
19767: LD_INT 2
19769: NEG
19770: PUSH
19771: LD_INT 0
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: PUSH
19778: LD_INT 2
19780: NEG
19781: PUSH
19782: LD_INT 1
19784: NEG
19785: PUSH
19786: EMPTY
19787: LIST
19788: LIST
19789: PUSH
19790: LD_INT 2
19792: NEG
19793: PUSH
19794: LD_INT 2
19796: NEG
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: LD_INT 2
19804: NEG
19805: PUSH
19806: LD_INT 3
19808: NEG
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: PUSH
19814: LD_INT 2
19816: PUSH
19817: LD_INT 1
19819: NEG
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: PUSH
19825: LD_INT 3
19827: PUSH
19828: LD_INT 1
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: PUSH
19835: LD_INT 1
19837: PUSH
19838: LD_INT 3
19840: PUSH
19841: EMPTY
19842: LIST
19843: LIST
19844: PUSH
19845: LD_INT 1
19847: NEG
19848: PUSH
19849: LD_INT 2
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: PUSH
19856: LD_INT 3
19858: NEG
19859: PUSH
19860: LD_INT 2
19862: NEG
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19893: LD_ADDR_VAR 0 34
19897: PUSH
19898: LD_INT 0
19900: PUSH
19901: LD_INT 0
19903: PUSH
19904: EMPTY
19905: LIST
19906: LIST
19907: PUSH
19908: LD_INT 0
19910: PUSH
19911: LD_INT 1
19913: NEG
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: PUSH
19919: LD_INT 1
19921: PUSH
19922: LD_INT 0
19924: PUSH
19925: EMPTY
19926: LIST
19927: LIST
19928: PUSH
19929: LD_INT 1
19931: PUSH
19932: LD_INT 1
19934: PUSH
19935: EMPTY
19936: LIST
19937: LIST
19938: PUSH
19939: LD_INT 0
19941: PUSH
19942: LD_INT 1
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: PUSH
19949: LD_INT 1
19951: NEG
19952: PUSH
19953: LD_INT 0
19955: PUSH
19956: EMPTY
19957: LIST
19958: LIST
19959: PUSH
19960: LD_INT 1
19962: NEG
19963: PUSH
19964: LD_INT 1
19966: NEG
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: PUSH
19972: LD_INT 1
19974: NEG
19975: PUSH
19976: LD_INT 2
19978: NEG
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: PUSH
19984: LD_INT 0
19986: PUSH
19987: LD_INT 2
19989: NEG
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: PUSH
19995: LD_INT 1
19997: PUSH
19998: LD_INT 1
20000: NEG
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: PUSH
20006: LD_INT 2
20008: PUSH
20009: LD_INT 1
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: PUSH
20016: LD_INT 2
20018: PUSH
20019: LD_INT 2
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PUSH
20026: LD_INT 1
20028: PUSH
20029: LD_INT 2
20031: PUSH
20032: EMPTY
20033: LIST
20034: LIST
20035: PUSH
20036: LD_INT 1
20038: NEG
20039: PUSH
20040: LD_INT 1
20042: PUSH
20043: EMPTY
20044: LIST
20045: LIST
20046: PUSH
20047: LD_INT 2
20049: NEG
20050: PUSH
20051: LD_INT 0
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: PUSH
20058: LD_INT 2
20060: NEG
20061: PUSH
20062: LD_INT 1
20064: NEG
20065: PUSH
20066: EMPTY
20067: LIST
20068: LIST
20069: PUSH
20070: LD_INT 2
20072: NEG
20073: PUSH
20074: LD_INT 2
20076: NEG
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: PUSH
20082: LD_INT 1
20084: NEG
20085: PUSH
20086: LD_INT 3
20088: NEG
20089: PUSH
20090: EMPTY
20091: LIST
20092: LIST
20093: PUSH
20094: LD_INT 1
20096: PUSH
20097: LD_INT 2
20099: NEG
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: PUSH
20105: LD_INT 3
20107: PUSH
20108: LD_INT 2
20110: PUSH
20111: EMPTY
20112: LIST
20113: LIST
20114: PUSH
20115: LD_INT 2
20117: PUSH
20118: LD_INT 3
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: PUSH
20125: LD_INT 2
20127: NEG
20128: PUSH
20129: LD_INT 1
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: PUSH
20136: LD_INT 3
20138: NEG
20139: PUSH
20140: LD_INT 1
20142: NEG
20143: PUSH
20144: EMPTY
20145: LIST
20146: LIST
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
20173: LD_ADDR_VAR 0 35
20177: PUSH
20178: LD_INT 0
20180: PUSH
20181: LD_INT 0
20183: PUSH
20184: EMPTY
20185: LIST
20186: LIST
20187: PUSH
20188: LD_INT 0
20190: PUSH
20191: LD_INT 1
20193: NEG
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: PUSH
20199: LD_INT 1
20201: PUSH
20202: LD_INT 0
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: PUSH
20209: LD_INT 1
20211: PUSH
20212: LD_INT 1
20214: PUSH
20215: EMPTY
20216: LIST
20217: LIST
20218: PUSH
20219: LD_INT 0
20221: PUSH
20222: LD_INT 1
20224: PUSH
20225: EMPTY
20226: LIST
20227: LIST
20228: PUSH
20229: LD_INT 1
20231: NEG
20232: PUSH
20233: LD_INT 0
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: PUSH
20240: LD_INT 1
20242: NEG
20243: PUSH
20244: LD_INT 1
20246: NEG
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: PUSH
20252: LD_INT 2
20254: PUSH
20255: LD_INT 1
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: PUSH
20262: LD_INT 2
20264: NEG
20265: PUSH
20266: LD_INT 1
20268: NEG
20269: PUSH
20270: EMPTY
20271: LIST
20272: LIST
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
20285: LD_ADDR_VAR 0 36
20289: PUSH
20290: LD_INT 0
20292: PUSH
20293: LD_INT 0
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: PUSH
20300: LD_INT 0
20302: PUSH
20303: LD_INT 1
20305: NEG
20306: PUSH
20307: EMPTY
20308: LIST
20309: LIST
20310: PUSH
20311: LD_INT 1
20313: PUSH
20314: LD_INT 0
20316: PUSH
20317: EMPTY
20318: LIST
20319: LIST
20320: PUSH
20321: LD_INT 1
20323: PUSH
20324: LD_INT 1
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: PUSH
20331: LD_INT 0
20333: PUSH
20334: LD_INT 1
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: PUSH
20341: LD_INT 1
20343: NEG
20344: PUSH
20345: LD_INT 0
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: PUSH
20352: LD_INT 1
20354: NEG
20355: PUSH
20356: LD_INT 1
20358: NEG
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: PUSH
20364: LD_INT 1
20366: NEG
20367: PUSH
20368: LD_INT 2
20370: NEG
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: PUSH
20376: LD_INT 1
20378: PUSH
20379: LD_INT 2
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
20397: LD_ADDR_VAR 0 37
20401: PUSH
20402: LD_INT 0
20404: PUSH
20405: LD_INT 0
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: PUSH
20412: LD_INT 0
20414: PUSH
20415: LD_INT 1
20417: NEG
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: PUSH
20423: LD_INT 1
20425: PUSH
20426: LD_INT 0
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PUSH
20433: LD_INT 1
20435: PUSH
20436: LD_INT 1
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 0
20445: PUSH
20446: LD_INT 1
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 1
20455: NEG
20456: PUSH
20457: LD_INT 0
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: PUSH
20464: LD_INT 1
20466: NEG
20467: PUSH
20468: LD_INT 1
20470: NEG
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: PUSH
20476: LD_INT 1
20478: PUSH
20479: LD_INT 1
20481: NEG
20482: PUSH
20483: EMPTY
20484: LIST
20485: LIST
20486: PUSH
20487: LD_INT 1
20489: NEG
20490: PUSH
20491: LD_INT 1
20493: PUSH
20494: EMPTY
20495: LIST
20496: LIST
20497: PUSH
20498: EMPTY
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
20509: LD_ADDR_VAR 0 38
20513: PUSH
20514: LD_INT 0
20516: PUSH
20517: LD_INT 0
20519: PUSH
20520: EMPTY
20521: LIST
20522: LIST
20523: PUSH
20524: LD_INT 0
20526: PUSH
20527: LD_INT 1
20529: NEG
20530: PUSH
20531: EMPTY
20532: LIST
20533: LIST
20534: PUSH
20535: LD_INT 1
20537: PUSH
20538: LD_INT 0
20540: PUSH
20541: EMPTY
20542: LIST
20543: LIST
20544: PUSH
20545: LD_INT 1
20547: PUSH
20548: LD_INT 1
20550: PUSH
20551: EMPTY
20552: LIST
20553: LIST
20554: PUSH
20555: LD_INT 0
20557: PUSH
20558: LD_INT 1
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: PUSH
20565: LD_INT 1
20567: NEG
20568: PUSH
20569: LD_INT 0
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: PUSH
20576: LD_INT 1
20578: NEG
20579: PUSH
20580: LD_INT 1
20582: NEG
20583: PUSH
20584: EMPTY
20585: LIST
20586: LIST
20587: PUSH
20588: LD_INT 2
20590: PUSH
20591: LD_INT 1
20593: PUSH
20594: EMPTY
20595: LIST
20596: LIST
20597: PUSH
20598: LD_INT 2
20600: NEG
20601: PUSH
20602: LD_INT 1
20604: NEG
20605: PUSH
20606: EMPTY
20607: LIST
20608: LIST
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
20621: LD_ADDR_VAR 0 39
20625: PUSH
20626: LD_INT 0
20628: PUSH
20629: LD_INT 0
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: PUSH
20636: LD_INT 0
20638: PUSH
20639: LD_INT 1
20641: NEG
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: LD_INT 1
20649: PUSH
20650: LD_INT 0
20652: PUSH
20653: EMPTY
20654: LIST
20655: LIST
20656: PUSH
20657: LD_INT 1
20659: PUSH
20660: LD_INT 1
20662: PUSH
20663: EMPTY
20664: LIST
20665: LIST
20666: PUSH
20667: LD_INT 0
20669: PUSH
20670: LD_INT 1
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: PUSH
20677: LD_INT 1
20679: NEG
20680: PUSH
20681: LD_INT 0
20683: PUSH
20684: EMPTY
20685: LIST
20686: LIST
20687: PUSH
20688: LD_INT 1
20690: NEG
20691: PUSH
20692: LD_INT 1
20694: NEG
20695: PUSH
20696: EMPTY
20697: LIST
20698: LIST
20699: PUSH
20700: LD_INT 1
20702: NEG
20703: PUSH
20704: LD_INT 2
20706: NEG
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: PUSH
20712: LD_INT 1
20714: PUSH
20715: LD_INT 2
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
20733: LD_ADDR_VAR 0 40
20737: PUSH
20738: LD_INT 0
20740: PUSH
20741: LD_INT 0
20743: PUSH
20744: EMPTY
20745: LIST
20746: LIST
20747: PUSH
20748: LD_INT 0
20750: PUSH
20751: LD_INT 1
20753: NEG
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: PUSH
20759: LD_INT 1
20761: PUSH
20762: LD_INT 0
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: PUSH
20769: LD_INT 1
20771: PUSH
20772: LD_INT 1
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: PUSH
20779: LD_INT 0
20781: PUSH
20782: LD_INT 1
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: PUSH
20789: LD_INT 1
20791: NEG
20792: PUSH
20793: LD_INT 0
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: PUSH
20800: LD_INT 1
20802: NEG
20803: PUSH
20804: LD_INT 1
20806: NEG
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: PUSH
20812: LD_INT 1
20814: PUSH
20815: LD_INT 1
20817: NEG
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: PUSH
20823: LD_INT 1
20825: NEG
20826: PUSH
20827: LD_INT 1
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
20845: LD_ADDR_VAR 0 41
20849: PUSH
20850: LD_INT 0
20852: PUSH
20853: LD_INT 0
20855: PUSH
20856: EMPTY
20857: LIST
20858: LIST
20859: PUSH
20860: LD_INT 0
20862: PUSH
20863: LD_INT 1
20865: NEG
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: PUSH
20871: LD_INT 1
20873: PUSH
20874: LD_INT 0
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: PUSH
20881: LD_INT 1
20883: PUSH
20884: LD_INT 1
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: PUSH
20891: LD_INT 0
20893: PUSH
20894: LD_INT 1
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: PUSH
20901: LD_INT 1
20903: NEG
20904: PUSH
20905: LD_INT 0
20907: PUSH
20908: EMPTY
20909: LIST
20910: LIST
20911: PUSH
20912: LD_INT 1
20914: NEG
20915: PUSH
20916: LD_INT 1
20918: NEG
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: PUSH
20924: LD_INT 1
20926: NEG
20927: PUSH
20928: LD_INT 2
20930: NEG
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: PUSH
20936: LD_INT 1
20938: PUSH
20939: LD_INT 1
20941: NEG
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: PUSH
20947: LD_INT 2
20949: PUSH
20950: LD_INT 0
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: PUSH
20957: LD_INT 2
20959: PUSH
20960: LD_INT 1
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PUSH
20967: LD_INT 2
20969: PUSH
20970: LD_INT 2
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: PUSH
20977: LD_INT 1
20979: PUSH
20980: LD_INT 2
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: PUSH
20987: LD_INT 1
20989: NEG
20990: PUSH
20991: LD_INT 1
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: PUSH
20998: LD_INT 2
21000: NEG
21001: PUSH
21002: LD_INT 0
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: PUSH
21009: LD_INT 2
21011: NEG
21012: PUSH
21013: LD_INT 1
21015: NEG
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: PUSH
21021: LD_INT 2
21023: NEG
21024: PUSH
21025: LD_INT 2
21027: NEG
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: PUSH
21033: LD_INT 2
21035: NEG
21036: PUSH
21037: LD_INT 3
21039: NEG
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: PUSH
21045: LD_INT 2
21047: PUSH
21048: LD_INT 1
21050: NEG
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: PUSH
21056: LD_INT 3
21058: PUSH
21059: LD_INT 0
21061: PUSH
21062: EMPTY
21063: LIST
21064: LIST
21065: PUSH
21066: LD_INT 3
21068: PUSH
21069: LD_INT 1
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: PUSH
21076: LD_INT 3
21078: PUSH
21079: LD_INT 2
21081: PUSH
21082: EMPTY
21083: LIST
21084: LIST
21085: PUSH
21086: LD_INT 3
21088: PUSH
21089: LD_INT 3
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: PUSH
21096: LD_INT 2
21098: PUSH
21099: LD_INT 3
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: PUSH
21106: LD_INT 2
21108: NEG
21109: PUSH
21110: LD_INT 1
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: PUSH
21117: LD_INT 3
21119: NEG
21120: PUSH
21121: LD_INT 0
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PUSH
21128: LD_INT 3
21130: NEG
21131: PUSH
21132: LD_INT 1
21134: NEG
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: PUSH
21140: LD_INT 3
21142: NEG
21143: PUSH
21144: LD_INT 2
21146: NEG
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: PUSH
21152: LD_INT 3
21154: NEG
21155: PUSH
21156: LD_INT 3
21158: NEG
21159: PUSH
21160: EMPTY
21161: LIST
21162: LIST
21163: PUSH
21164: EMPTY
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21195: LD_ADDR_VAR 0 42
21199: PUSH
21200: LD_INT 0
21202: PUSH
21203: LD_INT 0
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: PUSH
21210: LD_INT 0
21212: PUSH
21213: LD_INT 1
21215: NEG
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: PUSH
21221: LD_INT 1
21223: PUSH
21224: LD_INT 0
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: PUSH
21231: LD_INT 1
21233: PUSH
21234: LD_INT 1
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: PUSH
21241: LD_INT 0
21243: PUSH
21244: LD_INT 1
21246: PUSH
21247: EMPTY
21248: LIST
21249: LIST
21250: PUSH
21251: LD_INT 1
21253: NEG
21254: PUSH
21255: LD_INT 0
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: PUSH
21262: LD_INT 1
21264: NEG
21265: PUSH
21266: LD_INT 1
21268: NEG
21269: PUSH
21270: EMPTY
21271: LIST
21272: LIST
21273: PUSH
21274: LD_INT 1
21276: NEG
21277: PUSH
21278: LD_INT 2
21280: NEG
21281: PUSH
21282: EMPTY
21283: LIST
21284: LIST
21285: PUSH
21286: LD_INT 0
21288: PUSH
21289: LD_INT 2
21291: NEG
21292: PUSH
21293: EMPTY
21294: LIST
21295: LIST
21296: PUSH
21297: LD_INT 1
21299: PUSH
21300: LD_INT 1
21302: NEG
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: PUSH
21308: LD_INT 2
21310: PUSH
21311: LD_INT 1
21313: PUSH
21314: EMPTY
21315: LIST
21316: LIST
21317: PUSH
21318: LD_INT 2
21320: PUSH
21321: LD_INT 2
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: PUSH
21328: LD_INT 1
21330: PUSH
21331: LD_INT 2
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: PUSH
21338: LD_INT 0
21340: PUSH
21341: LD_INT 2
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: PUSH
21348: LD_INT 1
21350: NEG
21351: PUSH
21352: LD_INT 1
21354: PUSH
21355: EMPTY
21356: LIST
21357: LIST
21358: PUSH
21359: LD_INT 2
21361: NEG
21362: PUSH
21363: LD_INT 1
21365: NEG
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: PUSH
21371: LD_INT 2
21373: NEG
21374: PUSH
21375: LD_INT 2
21377: NEG
21378: PUSH
21379: EMPTY
21380: LIST
21381: LIST
21382: PUSH
21383: LD_INT 2
21385: NEG
21386: PUSH
21387: LD_INT 3
21389: NEG
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: PUSH
21395: LD_INT 1
21397: NEG
21398: PUSH
21399: LD_INT 3
21401: NEG
21402: PUSH
21403: EMPTY
21404: LIST
21405: LIST
21406: PUSH
21407: LD_INT 0
21409: PUSH
21410: LD_INT 3
21412: NEG
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: PUSH
21418: LD_INT 1
21420: PUSH
21421: LD_INT 2
21423: NEG
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: PUSH
21429: LD_INT 3
21431: PUSH
21432: LD_INT 2
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: PUSH
21439: LD_INT 3
21441: PUSH
21442: LD_INT 3
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PUSH
21449: LD_INT 2
21451: PUSH
21452: LD_INT 3
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: PUSH
21459: LD_INT 1
21461: PUSH
21462: LD_INT 3
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: PUSH
21469: LD_INT 0
21471: PUSH
21472: LD_INT 3
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PUSH
21479: LD_INT 1
21481: NEG
21482: PUSH
21483: LD_INT 2
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: PUSH
21490: LD_INT 3
21492: NEG
21493: PUSH
21494: LD_INT 2
21496: NEG
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: PUSH
21502: LD_INT 3
21504: NEG
21505: PUSH
21506: LD_INT 3
21508: NEG
21509: PUSH
21510: EMPTY
21511: LIST
21512: LIST
21513: PUSH
21514: EMPTY
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21545: LD_ADDR_VAR 0 43
21549: PUSH
21550: LD_INT 0
21552: PUSH
21553: LD_INT 0
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: PUSH
21560: LD_INT 0
21562: PUSH
21563: LD_INT 1
21565: NEG
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: PUSH
21571: LD_INT 1
21573: PUSH
21574: LD_INT 0
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: PUSH
21581: LD_INT 1
21583: PUSH
21584: LD_INT 1
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PUSH
21591: LD_INT 0
21593: PUSH
21594: LD_INT 1
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: PUSH
21601: LD_INT 1
21603: NEG
21604: PUSH
21605: LD_INT 0
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: PUSH
21612: LD_INT 1
21614: NEG
21615: PUSH
21616: LD_INT 1
21618: NEG
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PUSH
21624: LD_INT 1
21626: NEG
21627: PUSH
21628: LD_INT 2
21630: NEG
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: PUSH
21636: LD_INT 0
21638: PUSH
21639: LD_INT 2
21641: NEG
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: PUSH
21647: LD_INT 1
21649: PUSH
21650: LD_INT 1
21652: NEG
21653: PUSH
21654: EMPTY
21655: LIST
21656: LIST
21657: PUSH
21658: LD_INT 2
21660: PUSH
21661: LD_INT 0
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: PUSH
21668: LD_INT 2
21670: PUSH
21671: LD_INT 1
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: PUSH
21678: LD_INT 1
21680: PUSH
21681: LD_INT 2
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: PUSH
21688: LD_INT 0
21690: PUSH
21691: LD_INT 2
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: PUSH
21698: LD_INT 1
21700: NEG
21701: PUSH
21702: LD_INT 1
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: LD_INT 2
21711: NEG
21712: PUSH
21713: LD_INT 0
21715: PUSH
21716: EMPTY
21717: LIST
21718: LIST
21719: PUSH
21720: LD_INT 2
21722: NEG
21723: PUSH
21724: LD_INT 1
21726: NEG
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: PUSH
21732: LD_INT 1
21734: NEG
21735: PUSH
21736: LD_INT 3
21738: NEG
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: PUSH
21744: LD_INT 0
21746: PUSH
21747: LD_INT 3
21749: NEG
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: PUSH
21755: LD_INT 1
21757: PUSH
21758: LD_INT 2
21760: NEG
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: PUSH
21766: LD_INT 2
21768: PUSH
21769: LD_INT 1
21771: NEG
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: PUSH
21777: LD_INT 3
21779: PUSH
21780: LD_INT 0
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: PUSH
21787: LD_INT 3
21789: PUSH
21790: LD_INT 1
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: PUSH
21797: LD_INT 1
21799: PUSH
21800: LD_INT 3
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: PUSH
21807: LD_INT 0
21809: PUSH
21810: LD_INT 3
21812: PUSH
21813: EMPTY
21814: LIST
21815: LIST
21816: PUSH
21817: LD_INT 1
21819: NEG
21820: PUSH
21821: LD_INT 2
21823: PUSH
21824: EMPTY
21825: LIST
21826: LIST
21827: PUSH
21828: LD_INT 2
21830: NEG
21831: PUSH
21832: LD_INT 1
21834: PUSH
21835: EMPTY
21836: LIST
21837: LIST
21838: PUSH
21839: LD_INT 3
21841: NEG
21842: PUSH
21843: LD_INT 0
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PUSH
21850: LD_INT 3
21852: NEG
21853: PUSH
21854: LD_INT 1
21856: NEG
21857: PUSH
21858: EMPTY
21859: LIST
21860: LIST
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21893: LD_ADDR_VAR 0 44
21897: PUSH
21898: LD_INT 0
21900: PUSH
21901: LD_INT 0
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: PUSH
21908: LD_INT 0
21910: PUSH
21911: LD_INT 1
21913: NEG
21914: PUSH
21915: EMPTY
21916: LIST
21917: LIST
21918: PUSH
21919: LD_INT 1
21921: PUSH
21922: LD_INT 0
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: PUSH
21929: LD_INT 1
21931: PUSH
21932: LD_INT 1
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: PUSH
21939: LD_INT 0
21941: PUSH
21942: LD_INT 1
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PUSH
21949: LD_INT 1
21951: NEG
21952: PUSH
21953: LD_INT 0
21955: PUSH
21956: EMPTY
21957: LIST
21958: LIST
21959: PUSH
21960: LD_INT 1
21962: NEG
21963: PUSH
21964: LD_INT 1
21966: NEG
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: PUSH
21972: LD_INT 1
21974: NEG
21975: PUSH
21976: LD_INT 2
21978: NEG
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: PUSH
21984: LD_INT 1
21986: PUSH
21987: LD_INT 1
21989: NEG
21990: PUSH
21991: EMPTY
21992: LIST
21993: LIST
21994: PUSH
21995: LD_INT 2
21997: PUSH
21998: LD_INT 0
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: PUSH
22005: LD_INT 2
22007: PUSH
22008: LD_INT 1
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: PUSH
22015: LD_INT 2
22017: PUSH
22018: LD_INT 2
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: PUSH
22025: LD_INT 1
22027: PUSH
22028: LD_INT 2
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: PUSH
22035: LD_INT 1
22037: NEG
22038: PUSH
22039: LD_INT 1
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: PUSH
22046: LD_INT 2
22048: NEG
22049: PUSH
22050: LD_INT 0
22052: PUSH
22053: EMPTY
22054: LIST
22055: LIST
22056: PUSH
22057: LD_INT 2
22059: NEG
22060: PUSH
22061: LD_INT 1
22063: NEG
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: PUSH
22069: LD_INT 2
22071: NEG
22072: PUSH
22073: LD_INT 2
22075: NEG
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: PUSH
22081: LD_INT 2
22083: NEG
22084: PUSH
22085: LD_INT 3
22087: NEG
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PUSH
22093: LD_INT 2
22095: PUSH
22096: LD_INT 1
22098: NEG
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: PUSH
22104: LD_INT 3
22106: PUSH
22107: LD_INT 0
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: PUSH
22114: LD_INT 3
22116: PUSH
22117: LD_INT 1
22119: PUSH
22120: EMPTY
22121: LIST
22122: LIST
22123: PUSH
22124: LD_INT 3
22126: PUSH
22127: LD_INT 2
22129: PUSH
22130: EMPTY
22131: LIST
22132: LIST
22133: PUSH
22134: LD_INT 3
22136: PUSH
22137: LD_INT 3
22139: PUSH
22140: EMPTY
22141: LIST
22142: LIST
22143: PUSH
22144: LD_INT 2
22146: PUSH
22147: LD_INT 3
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: PUSH
22154: LD_INT 2
22156: NEG
22157: PUSH
22158: LD_INT 1
22160: PUSH
22161: EMPTY
22162: LIST
22163: LIST
22164: PUSH
22165: LD_INT 3
22167: NEG
22168: PUSH
22169: LD_INT 0
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: PUSH
22176: LD_INT 3
22178: NEG
22179: PUSH
22180: LD_INT 1
22182: NEG
22183: PUSH
22184: EMPTY
22185: LIST
22186: LIST
22187: PUSH
22188: LD_INT 3
22190: NEG
22191: PUSH
22192: LD_INT 2
22194: NEG
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: PUSH
22200: LD_INT 3
22202: NEG
22203: PUSH
22204: LD_INT 3
22206: NEG
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22243: LD_ADDR_VAR 0 45
22247: PUSH
22248: LD_INT 0
22250: PUSH
22251: LD_INT 0
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: PUSH
22258: LD_INT 0
22260: PUSH
22261: LD_INT 1
22263: NEG
22264: PUSH
22265: EMPTY
22266: LIST
22267: LIST
22268: PUSH
22269: LD_INT 1
22271: PUSH
22272: LD_INT 0
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: PUSH
22279: LD_INT 1
22281: PUSH
22282: LD_INT 1
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PUSH
22289: LD_INT 0
22291: PUSH
22292: LD_INT 1
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: PUSH
22299: LD_INT 1
22301: NEG
22302: PUSH
22303: LD_INT 0
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PUSH
22310: LD_INT 1
22312: NEG
22313: PUSH
22314: LD_INT 1
22316: NEG
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PUSH
22322: LD_INT 1
22324: NEG
22325: PUSH
22326: LD_INT 2
22328: NEG
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: PUSH
22334: LD_INT 0
22336: PUSH
22337: LD_INT 2
22339: NEG
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: PUSH
22345: LD_INT 1
22347: PUSH
22348: LD_INT 1
22350: NEG
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: PUSH
22356: LD_INT 2
22358: PUSH
22359: LD_INT 1
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: PUSH
22366: LD_INT 2
22368: PUSH
22369: LD_INT 2
22371: PUSH
22372: EMPTY
22373: LIST
22374: LIST
22375: PUSH
22376: LD_INT 1
22378: PUSH
22379: LD_INT 2
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: PUSH
22386: LD_INT 0
22388: PUSH
22389: LD_INT 2
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: PUSH
22396: LD_INT 1
22398: NEG
22399: PUSH
22400: LD_INT 1
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: PUSH
22407: LD_INT 2
22409: NEG
22410: PUSH
22411: LD_INT 1
22413: NEG
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: PUSH
22419: LD_INT 2
22421: NEG
22422: PUSH
22423: LD_INT 2
22425: NEG
22426: PUSH
22427: EMPTY
22428: LIST
22429: LIST
22430: PUSH
22431: LD_INT 2
22433: NEG
22434: PUSH
22435: LD_INT 3
22437: NEG
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: PUSH
22443: LD_INT 1
22445: NEG
22446: PUSH
22447: LD_INT 3
22449: NEG
22450: PUSH
22451: EMPTY
22452: LIST
22453: LIST
22454: PUSH
22455: LD_INT 0
22457: PUSH
22458: LD_INT 3
22460: NEG
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PUSH
22466: LD_INT 1
22468: PUSH
22469: LD_INT 2
22471: NEG
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: PUSH
22477: LD_INT 3
22479: PUSH
22480: LD_INT 2
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: PUSH
22487: LD_INT 3
22489: PUSH
22490: LD_INT 3
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: PUSH
22497: LD_INT 2
22499: PUSH
22500: LD_INT 3
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: PUSH
22507: LD_INT 1
22509: PUSH
22510: LD_INT 3
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: PUSH
22517: LD_INT 0
22519: PUSH
22520: LD_INT 3
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: PUSH
22527: LD_INT 1
22529: NEG
22530: PUSH
22531: LD_INT 2
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: PUSH
22538: LD_INT 3
22540: NEG
22541: PUSH
22542: LD_INT 2
22544: NEG
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 3
22552: NEG
22553: PUSH
22554: LD_INT 3
22556: NEG
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22593: LD_ADDR_VAR 0 46
22597: PUSH
22598: LD_INT 0
22600: PUSH
22601: LD_INT 0
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: PUSH
22608: LD_INT 0
22610: PUSH
22611: LD_INT 1
22613: NEG
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: PUSH
22619: LD_INT 1
22621: PUSH
22622: LD_INT 0
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: PUSH
22629: LD_INT 1
22631: PUSH
22632: LD_INT 1
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: PUSH
22639: LD_INT 0
22641: PUSH
22642: LD_INT 1
22644: PUSH
22645: EMPTY
22646: LIST
22647: LIST
22648: PUSH
22649: LD_INT 1
22651: NEG
22652: PUSH
22653: LD_INT 0
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: PUSH
22660: LD_INT 1
22662: NEG
22663: PUSH
22664: LD_INT 1
22666: NEG
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: PUSH
22672: LD_INT 1
22674: NEG
22675: PUSH
22676: LD_INT 2
22678: NEG
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: PUSH
22684: LD_INT 0
22686: PUSH
22687: LD_INT 2
22689: NEG
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: PUSH
22695: LD_INT 1
22697: PUSH
22698: LD_INT 1
22700: NEG
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: PUSH
22706: LD_INT 2
22708: PUSH
22709: LD_INT 0
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: PUSH
22716: LD_INT 2
22718: PUSH
22719: LD_INT 1
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: PUSH
22726: LD_INT 1
22728: PUSH
22729: LD_INT 2
22731: PUSH
22732: EMPTY
22733: LIST
22734: LIST
22735: PUSH
22736: LD_INT 0
22738: PUSH
22739: LD_INT 2
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: PUSH
22746: LD_INT 1
22748: NEG
22749: PUSH
22750: LD_INT 1
22752: PUSH
22753: EMPTY
22754: LIST
22755: LIST
22756: PUSH
22757: LD_INT 2
22759: NEG
22760: PUSH
22761: LD_INT 0
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: PUSH
22768: LD_INT 2
22770: NEG
22771: PUSH
22772: LD_INT 1
22774: NEG
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: PUSH
22780: LD_INT 1
22782: NEG
22783: PUSH
22784: LD_INT 3
22786: NEG
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 0
22794: PUSH
22795: LD_INT 3
22797: NEG
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: PUSH
22803: LD_INT 1
22805: PUSH
22806: LD_INT 2
22808: NEG
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: PUSH
22814: LD_INT 2
22816: PUSH
22817: LD_INT 1
22819: NEG
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: PUSH
22825: LD_INT 3
22827: PUSH
22828: LD_INT 0
22830: PUSH
22831: EMPTY
22832: LIST
22833: LIST
22834: PUSH
22835: LD_INT 3
22837: PUSH
22838: LD_INT 1
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: PUSH
22845: LD_INT 1
22847: PUSH
22848: LD_INT 3
22850: PUSH
22851: EMPTY
22852: LIST
22853: LIST
22854: PUSH
22855: LD_INT 0
22857: PUSH
22858: LD_INT 3
22860: PUSH
22861: EMPTY
22862: LIST
22863: LIST
22864: PUSH
22865: LD_INT 1
22867: NEG
22868: PUSH
22869: LD_INT 2
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: PUSH
22876: LD_INT 2
22878: NEG
22879: PUSH
22880: LD_INT 1
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: PUSH
22887: LD_INT 3
22889: NEG
22890: PUSH
22891: LD_INT 0
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: PUSH
22898: LD_INT 3
22900: NEG
22901: PUSH
22902: LD_INT 1
22904: NEG
22905: PUSH
22906: EMPTY
22907: LIST
22908: LIST
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22941: LD_ADDR_VAR 0 47
22945: PUSH
22946: LD_INT 0
22948: PUSH
22949: LD_INT 0
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: PUSH
22956: LD_INT 0
22958: PUSH
22959: LD_INT 1
22961: NEG
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: PUSH
22967: LD_INT 1
22969: PUSH
22970: LD_INT 0
22972: PUSH
22973: EMPTY
22974: LIST
22975: LIST
22976: PUSH
22977: LD_INT 1
22979: PUSH
22980: LD_INT 1
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: PUSH
22987: LD_INT 0
22989: PUSH
22990: LD_INT 1
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: PUSH
22997: LD_INT 1
22999: NEG
23000: PUSH
23001: LD_INT 0
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: PUSH
23008: LD_INT 1
23010: NEG
23011: PUSH
23012: LD_INT 1
23014: NEG
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: PUSH
23020: LD_INT 1
23022: NEG
23023: PUSH
23024: LD_INT 2
23026: NEG
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PUSH
23032: LD_INT 0
23034: PUSH
23035: LD_INT 2
23037: NEG
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: PUSH
23043: LD_INT 1
23045: PUSH
23046: LD_INT 1
23048: NEG
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: PUSH
23054: LD_INT 2
23056: NEG
23057: PUSH
23058: LD_INT 1
23060: NEG
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: PUSH
23066: LD_INT 2
23068: NEG
23069: PUSH
23070: LD_INT 2
23072: NEG
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
23092: LD_ADDR_VAR 0 48
23096: PUSH
23097: LD_INT 0
23099: PUSH
23100: LD_INT 0
23102: PUSH
23103: EMPTY
23104: LIST
23105: LIST
23106: PUSH
23107: LD_INT 0
23109: PUSH
23110: LD_INT 1
23112: NEG
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: PUSH
23118: LD_INT 1
23120: PUSH
23121: LD_INT 0
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PUSH
23128: LD_INT 1
23130: PUSH
23131: LD_INT 1
23133: PUSH
23134: EMPTY
23135: LIST
23136: LIST
23137: PUSH
23138: LD_INT 0
23140: PUSH
23141: LD_INT 1
23143: PUSH
23144: EMPTY
23145: LIST
23146: LIST
23147: PUSH
23148: LD_INT 1
23150: NEG
23151: PUSH
23152: LD_INT 0
23154: PUSH
23155: EMPTY
23156: LIST
23157: LIST
23158: PUSH
23159: LD_INT 1
23161: NEG
23162: PUSH
23163: LD_INT 1
23165: NEG
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: PUSH
23171: LD_INT 1
23173: NEG
23174: PUSH
23175: LD_INT 2
23177: NEG
23178: PUSH
23179: EMPTY
23180: LIST
23181: LIST
23182: PUSH
23183: LD_INT 0
23185: PUSH
23186: LD_INT 2
23188: NEG
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PUSH
23194: LD_INT 1
23196: PUSH
23197: LD_INT 1
23199: NEG
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PUSH
23205: LD_INT 2
23207: PUSH
23208: LD_INT 0
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: PUSH
23215: LD_INT 2
23217: PUSH
23218: LD_INT 1
23220: PUSH
23221: EMPTY
23222: LIST
23223: LIST
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
23239: LD_ADDR_VAR 0 49
23243: PUSH
23244: LD_INT 0
23246: PUSH
23247: LD_INT 0
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: PUSH
23254: LD_INT 0
23256: PUSH
23257: LD_INT 1
23259: NEG
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: LD_INT 1
23267: PUSH
23268: LD_INT 0
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: LD_INT 1
23277: PUSH
23278: LD_INT 1
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: PUSH
23285: LD_INT 0
23287: PUSH
23288: LD_INT 1
23290: PUSH
23291: EMPTY
23292: LIST
23293: LIST
23294: PUSH
23295: LD_INT 1
23297: NEG
23298: PUSH
23299: LD_INT 0
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: PUSH
23306: LD_INT 1
23308: NEG
23309: PUSH
23310: LD_INT 1
23312: NEG
23313: PUSH
23314: EMPTY
23315: LIST
23316: LIST
23317: PUSH
23318: LD_INT 1
23320: PUSH
23321: LD_INT 1
23323: NEG
23324: PUSH
23325: EMPTY
23326: LIST
23327: LIST
23328: PUSH
23329: LD_INT 2
23331: PUSH
23332: LD_INT 0
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: PUSH
23339: LD_INT 2
23341: PUSH
23342: LD_INT 1
23344: PUSH
23345: EMPTY
23346: LIST
23347: LIST
23348: PUSH
23349: LD_INT 2
23351: PUSH
23352: LD_INT 2
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: PUSH
23359: LD_INT 1
23361: PUSH
23362: LD_INT 2
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: PUSH
23369: EMPTY
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
23383: LD_ADDR_VAR 0 50
23387: PUSH
23388: LD_INT 0
23390: PUSH
23391: LD_INT 0
23393: PUSH
23394: EMPTY
23395: LIST
23396: LIST
23397: PUSH
23398: LD_INT 0
23400: PUSH
23401: LD_INT 1
23403: NEG
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: PUSH
23409: LD_INT 1
23411: PUSH
23412: LD_INT 0
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: PUSH
23419: LD_INT 1
23421: PUSH
23422: LD_INT 1
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: PUSH
23429: LD_INT 0
23431: PUSH
23432: LD_INT 1
23434: PUSH
23435: EMPTY
23436: LIST
23437: LIST
23438: PUSH
23439: LD_INT 1
23441: NEG
23442: PUSH
23443: LD_INT 0
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: PUSH
23450: LD_INT 1
23452: NEG
23453: PUSH
23454: LD_INT 1
23456: NEG
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: PUSH
23462: LD_INT 2
23464: PUSH
23465: LD_INT 1
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: PUSH
23472: LD_INT 2
23474: PUSH
23475: LD_INT 2
23477: PUSH
23478: EMPTY
23479: LIST
23480: LIST
23481: PUSH
23482: LD_INT 1
23484: PUSH
23485: LD_INT 2
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: PUSH
23492: LD_INT 0
23494: PUSH
23495: LD_INT 2
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: PUSH
23502: LD_INT 1
23504: NEG
23505: PUSH
23506: LD_INT 1
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: PUSH
23513: EMPTY
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
23527: LD_ADDR_VAR 0 51
23531: PUSH
23532: LD_INT 0
23534: PUSH
23535: LD_INT 0
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: PUSH
23542: LD_INT 0
23544: PUSH
23545: LD_INT 1
23547: NEG
23548: PUSH
23549: EMPTY
23550: LIST
23551: LIST
23552: PUSH
23553: LD_INT 1
23555: PUSH
23556: LD_INT 0
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: PUSH
23563: LD_INT 1
23565: PUSH
23566: LD_INT 1
23568: PUSH
23569: EMPTY
23570: LIST
23571: LIST
23572: PUSH
23573: LD_INT 0
23575: PUSH
23576: LD_INT 1
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: PUSH
23583: LD_INT 1
23585: NEG
23586: PUSH
23587: LD_INT 0
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: PUSH
23594: LD_INT 1
23596: NEG
23597: PUSH
23598: LD_INT 1
23600: NEG
23601: PUSH
23602: EMPTY
23603: LIST
23604: LIST
23605: PUSH
23606: LD_INT 1
23608: PUSH
23609: LD_INT 2
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: PUSH
23616: LD_INT 0
23618: PUSH
23619: LD_INT 2
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: PUSH
23626: LD_INT 1
23628: NEG
23629: PUSH
23630: LD_INT 1
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: PUSH
23637: LD_INT 2
23639: NEG
23640: PUSH
23641: LD_INT 0
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: PUSH
23648: LD_INT 2
23650: NEG
23651: PUSH
23652: LD_INT 1
23654: NEG
23655: PUSH
23656: EMPTY
23657: LIST
23658: LIST
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23674: LD_ADDR_VAR 0 52
23678: PUSH
23679: LD_INT 0
23681: PUSH
23682: LD_INT 0
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PUSH
23689: LD_INT 0
23691: PUSH
23692: LD_INT 1
23694: NEG
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PUSH
23700: LD_INT 1
23702: PUSH
23703: LD_INT 0
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PUSH
23710: LD_INT 1
23712: PUSH
23713: LD_INT 1
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: PUSH
23720: LD_INT 0
23722: PUSH
23723: LD_INT 1
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: PUSH
23730: LD_INT 1
23732: NEG
23733: PUSH
23734: LD_INT 0
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: PUSH
23741: LD_INT 1
23743: NEG
23744: PUSH
23745: LD_INT 1
23747: NEG
23748: PUSH
23749: EMPTY
23750: LIST
23751: LIST
23752: PUSH
23753: LD_INT 1
23755: NEG
23756: PUSH
23757: LD_INT 2
23759: NEG
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: PUSH
23765: LD_INT 1
23767: NEG
23768: PUSH
23769: LD_INT 1
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: PUSH
23776: LD_INT 2
23778: NEG
23779: PUSH
23780: LD_INT 0
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: PUSH
23787: LD_INT 2
23789: NEG
23790: PUSH
23791: LD_INT 1
23793: NEG
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: PUSH
23799: LD_INT 2
23801: NEG
23802: PUSH
23803: LD_INT 2
23805: NEG
23806: PUSH
23807: EMPTY
23808: LIST
23809: LIST
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23825: LD_ADDR_VAR 0 53
23829: PUSH
23830: LD_INT 0
23832: PUSH
23833: LD_INT 0
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: PUSH
23840: LD_INT 0
23842: PUSH
23843: LD_INT 1
23845: NEG
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: PUSH
23851: LD_INT 1
23853: PUSH
23854: LD_INT 0
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: PUSH
23861: LD_INT 1
23863: PUSH
23864: LD_INT 1
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: PUSH
23871: LD_INT 0
23873: PUSH
23874: LD_INT 1
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: PUSH
23881: LD_INT 1
23883: NEG
23884: PUSH
23885: LD_INT 0
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: PUSH
23892: LD_INT 1
23894: NEG
23895: PUSH
23896: LD_INT 1
23898: NEG
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PUSH
23904: LD_INT 1
23906: NEG
23907: PUSH
23908: LD_INT 2
23910: NEG
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: PUSH
23916: LD_INT 0
23918: PUSH
23919: LD_INT 2
23921: NEG
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: PUSH
23927: LD_INT 1
23929: PUSH
23930: LD_INT 1
23932: NEG
23933: PUSH
23934: EMPTY
23935: LIST
23936: LIST
23937: PUSH
23938: LD_INT 2
23940: PUSH
23941: LD_INT 0
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: LD_INT 2
23950: PUSH
23951: LD_INT 1
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: PUSH
23958: LD_INT 2
23960: PUSH
23961: LD_INT 2
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: PUSH
23968: LD_INT 1
23970: PUSH
23971: LD_INT 2
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: PUSH
23978: LD_INT 0
23980: PUSH
23981: LD_INT 2
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PUSH
23988: LD_INT 1
23990: NEG
23991: PUSH
23992: LD_INT 1
23994: PUSH
23995: EMPTY
23996: LIST
23997: LIST
23998: PUSH
23999: LD_INT 2
24001: NEG
24002: PUSH
24003: LD_INT 0
24005: PUSH
24006: EMPTY
24007: LIST
24008: LIST
24009: PUSH
24010: LD_INT 2
24012: NEG
24013: PUSH
24014: LD_INT 1
24016: NEG
24017: PUSH
24018: EMPTY
24019: LIST
24020: LIST
24021: PUSH
24022: LD_INT 2
24024: NEG
24025: PUSH
24026: LD_INT 2
24028: NEG
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24055: LD_ADDR_VAR 0 54
24059: PUSH
24060: LD_INT 0
24062: PUSH
24063: LD_INT 0
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: PUSH
24070: LD_INT 0
24072: PUSH
24073: LD_INT 1
24075: NEG
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: PUSH
24081: LD_INT 1
24083: PUSH
24084: LD_INT 0
24086: PUSH
24087: EMPTY
24088: LIST
24089: LIST
24090: PUSH
24091: LD_INT 1
24093: PUSH
24094: LD_INT 1
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: PUSH
24101: LD_INT 0
24103: PUSH
24104: LD_INT 1
24106: PUSH
24107: EMPTY
24108: LIST
24109: LIST
24110: PUSH
24111: LD_INT 1
24113: NEG
24114: PUSH
24115: LD_INT 0
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: PUSH
24122: LD_INT 1
24124: NEG
24125: PUSH
24126: LD_INT 1
24128: NEG
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: PUSH
24134: LD_INT 1
24136: NEG
24137: PUSH
24138: LD_INT 2
24140: NEG
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: PUSH
24146: LD_INT 0
24148: PUSH
24149: LD_INT 2
24151: NEG
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: PUSH
24157: LD_INT 1
24159: PUSH
24160: LD_INT 1
24162: NEG
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: PUSH
24168: LD_INT 2
24170: PUSH
24171: LD_INT 0
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: PUSH
24178: LD_INT 2
24180: PUSH
24181: LD_INT 1
24183: PUSH
24184: EMPTY
24185: LIST
24186: LIST
24187: PUSH
24188: LD_INT 2
24190: PUSH
24191: LD_INT 2
24193: PUSH
24194: EMPTY
24195: LIST
24196: LIST
24197: PUSH
24198: LD_INT 1
24200: PUSH
24201: LD_INT 2
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: PUSH
24208: LD_INT 0
24210: PUSH
24211: LD_INT 2
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: PUSH
24218: LD_INT 1
24220: NEG
24221: PUSH
24222: LD_INT 1
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: PUSH
24229: LD_INT 2
24231: NEG
24232: PUSH
24233: LD_INT 0
24235: PUSH
24236: EMPTY
24237: LIST
24238: LIST
24239: PUSH
24240: LD_INT 2
24242: NEG
24243: PUSH
24244: LD_INT 1
24246: NEG
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: PUSH
24252: LD_INT 2
24254: NEG
24255: PUSH
24256: LD_INT 2
24258: NEG
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24285: LD_ADDR_VAR 0 55
24289: PUSH
24290: LD_INT 0
24292: PUSH
24293: LD_INT 0
24295: PUSH
24296: EMPTY
24297: LIST
24298: LIST
24299: PUSH
24300: LD_INT 0
24302: PUSH
24303: LD_INT 1
24305: NEG
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: PUSH
24311: LD_INT 1
24313: PUSH
24314: LD_INT 0
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: PUSH
24321: LD_INT 1
24323: PUSH
24324: LD_INT 1
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: PUSH
24331: LD_INT 0
24333: PUSH
24334: LD_INT 1
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: PUSH
24341: LD_INT 1
24343: NEG
24344: PUSH
24345: LD_INT 0
24347: PUSH
24348: EMPTY
24349: LIST
24350: LIST
24351: PUSH
24352: LD_INT 1
24354: NEG
24355: PUSH
24356: LD_INT 1
24358: NEG
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: PUSH
24364: LD_INT 1
24366: NEG
24367: PUSH
24368: LD_INT 2
24370: NEG
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: PUSH
24376: LD_INT 0
24378: PUSH
24379: LD_INT 2
24381: NEG
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: PUSH
24387: LD_INT 1
24389: PUSH
24390: LD_INT 1
24392: NEG
24393: PUSH
24394: EMPTY
24395: LIST
24396: LIST
24397: PUSH
24398: LD_INT 2
24400: PUSH
24401: LD_INT 0
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: PUSH
24408: LD_INT 2
24410: PUSH
24411: LD_INT 1
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: PUSH
24418: LD_INT 2
24420: PUSH
24421: LD_INT 2
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: PUSH
24428: LD_INT 1
24430: PUSH
24431: LD_INT 2
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: PUSH
24438: LD_INT 0
24440: PUSH
24441: LD_INT 2
24443: PUSH
24444: EMPTY
24445: LIST
24446: LIST
24447: PUSH
24448: LD_INT 1
24450: NEG
24451: PUSH
24452: LD_INT 1
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: PUSH
24459: LD_INT 2
24461: NEG
24462: PUSH
24463: LD_INT 0
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: PUSH
24470: LD_INT 2
24472: NEG
24473: PUSH
24474: LD_INT 1
24476: NEG
24477: PUSH
24478: EMPTY
24479: LIST
24480: LIST
24481: PUSH
24482: LD_INT 2
24484: NEG
24485: PUSH
24486: LD_INT 2
24488: NEG
24489: PUSH
24490: EMPTY
24491: LIST
24492: LIST
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24515: LD_ADDR_VAR 0 56
24519: PUSH
24520: LD_INT 0
24522: PUSH
24523: LD_INT 0
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: LD_INT 0
24532: PUSH
24533: LD_INT 1
24535: NEG
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: PUSH
24541: LD_INT 1
24543: PUSH
24544: LD_INT 0
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: LD_INT 1
24553: PUSH
24554: LD_INT 1
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: PUSH
24561: LD_INT 0
24563: PUSH
24564: LD_INT 1
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: LD_INT 1
24573: NEG
24574: PUSH
24575: LD_INT 0
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: PUSH
24582: LD_INT 1
24584: NEG
24585: PUSH
24586: LD_INT 1
24588: NEG
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: PUSH
24594: LD_INT 1
24596: NEG
24597: PUSH
24598: LD_INT 2
24600: NEG
24601: PUSH
24602: EMPTY
24603: LIST
24604: LIST
24605: PUSH
24606: LD_INT 0
24608: PUSH
24609: LD_INT 2
24611: NEG
24612: PUSH
24613: EMPTY
24614: LIST
24615: LIST
24616: PUSH
24617: LD_INT 1
24619: PUSH
24620: LD_INT 1
24622: NEG
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: PUSH
24628: LD_INT 2
24630: PUSH
24631: LD_INT 0
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: PUSH
24638: LD_INT 2
24640: PUSH
24641: LD_INT 1
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: PUSH
24648: LD_INT 2
24650: PUSH
24651: LD_INT 2
24653: PUSH
24654: EMPTY
24655: LIST
24656: LIST
24657: PUSH
24658: LD_INT 1
24660: PUSH
24661: LD_INT 2
24663: PUSH
24664: EMPTY
24665: LIST
24666: LIST
24667: PUSH
24668: LD_INT 0
24670: PUSH
24671: LD_INT 2
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: PUSH
24678: LD_INT 1
24680: NEG
24681: PUSH
24682: LD_INT 1
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: PUSH
24689: LD_INT 2
24691: NEG
24692: PUSH
24693: LD_INT 0
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PUSH
24700: LD_INT 2
24702: NEG
24703: PUSH
24704: LD_INT 1
24706: NEG
24707: PUSH
24708: EMPTY
24709: LIST
24710: LIST
24711: PUSH
24712: LD_INT 2
24714: NEG
24715: PUSH
24716: LD_INT 2
24718: NEG
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24745: LD_ADDR_VAR 0 57
24749: PUSH
24750: LD_INT 0
24752: PUSH
24753: LD_INT 0
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: PUSH
24760: LD_INT 0
24762: PUSH
24763: LD_INT 1
24765: NEG
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: PUSH
24771: LD_INT 1
24773: PUSH
24774: LD_INT 0
24776: PUSH
24777: EMPTY
24778: LIST
24779: LIST
24780: PUSH
24781: LD_INT 1
24783: PUSH
24784: LD_INT 1
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: PUSH
24791: LD_INT 0
24793: PUSH
24794: LD_INT 1
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: PUSH
24801: LD_INT 1
24803: NEG
24804: PUSH
24805: LD_INT 0
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: PUSH
24812: LD_INT 1
24814: NEG
24815: PUSH
24816: LD_INT 1
24818: NEG
24819: PUSH
24820: EMPTY
24821: LIST
24822: LIST
24823: PUSH
24824: LD_INT 1
24826: NEG
24827: PUSH
24828: LD_INT 2
24830: NEG
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: PUSH
24836: LD_INT 0
24838: PUSH
24839: LD_INT 2
24841: NEG
24842: PUSH
24843: EMPTY
24844: LIST
24845: LIST
24846: PUSH
24847: LD_INT 1
24849: PUSH
24850: LD_INT 1
24852: NEG
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: PUSH
24858: LD_INT 2
24860: PUSH
24861: LD_INT 0
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: PUSH
24868: LD_INT 2
24870: PUSH
24871: LD_INT 1
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: PUSH
24878: LD_INT 2
24880: PUSH
24881: LD_INT 2
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: LD_INT 1
24890: PUSH
24891: LD_INT 2
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PUSH
24898: LD_INT 0
24900: PUSH
24901: LD_INT 2
24903: PUSH
24904: EMPTY
24905: LIST
24906: LIST
24907: PUSH
24908: LD_INT 1
24910: NEG
24911: PUSH
24912: LD_INT 1
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: PUSH
24919: LD_INT 2
24921: NEG
24922: PUSH
24923: LD_INT 0
24925: PUSH
24926: EMPTY
24927: LIST
24928: LIST
24929: PUSH
24930: LD_INT 2
24932: NEG
24933: PUSH
24934: LD_INT 1
24936: NEG
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: PUSH
24942: LD_INT 2
24944: NEG
24945: PUSH
24946: LD_INT 2
24948: NEG
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24975: LD_ADDR_VAR 0 58
24979: PUSH
24980: LD_INT 0
24982: PUSH
24983: LD_INT 0
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: PUSH
24990: LD_INT 0
24992: PUSH
24993: LD_INT 1
24995: NEG
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 1
25003: PUSH
25004: LD_INT 0
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: PUSH
25011: LD_INT 1
25013: PUSH
25014: LD_INT 1
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 0
25023: PUSH
25024: LD_INT 1
25026: PUSH
25027: EMPTY
25028: LIST
25029: LIST
25030: PUSH
25031: LD_INT 1
25033: NEG
25034: PUSH
25035: LD_INT 0
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PUSH
25042: LD_INT 1
25044: NEG
25045: PUSH
25046: LD_INT 1
25048: NEG
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: LD_INT 1
25056: NEG
25057: PUSH
25058: LD_INT 2
25060: NEG
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PUSH
25066: LD_INT 0
25068: PUSH
25069: LD_INT 2
25071: NEG
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: PUSH
25077: LD_INT 1
25079: PUSH
25080: LD_INT 1
25082: NEG
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: PUSH
25088: LD_INT 2
25090: PUSH
25091: LD_INT 0
25093: PUSH
25094: EMPTY
25095: LIST
25096: LIST
25097: PUSH
25098: LD_INT 2
25100: PUSH
25101: LD_INT 1
25103: PUSH
25104: EMPTY
25105: LIST
25106: LIST
25107: PUSH
25108: LD_INT 2
25110: PUSH
25111: LD_INT 2
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: PUSH
25118: LD_INT 1
25120: PUSH
25121: LD_INT 2
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: LD_INT 0
25130: PUSH
25131: LD_INT 2
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: LD_INT 1
25140: NEG
25141: PUSH
25142: LD_INT 1
25144: PUSH
25145: EMPTY
25146: LIST
25147: LIST
25148: PUSH
25149: LD_INT 2
25151: NEG
25152: PUSH
25153: LD_INT 0
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PUSH
25160: LD_INT 2
25162: NEG
25163: PUSH
25164: LD_INT 1
25166: NEG
25167: PUSH
25168: EMPTY
25169: LIST
25170: LIST
25171: PUSH
25172: LD_INT 2
25174: NEG
25175: PUSH
25176: LD_INT 2
25178: NEG
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25205: LD_ADDR_VAR 0 59
25209: PUSH
25210: LD_INT 0
25212: PUSH
25213: LD_INT 0
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: PUSH
25220: LD_INT 0
25222: PUSH
25223: LD_INT 1
25225: NEG
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: PUSH
25231: LD_INT 1
25233: PUSH
25234: LD_INT 0
25236: PUSH
25237: EMPTY
25238: LIST
25239: LIST
25240: PUSH
25241: LD_INT 1
25243: PUSH
25244: LD_INT 1
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PUSH
25251: LD_INT 0
25253: PUSH
25254: LD_INT 1
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: PUSH
25261: LD_INT 1
25263: NEG
25264: PUSH
25265: LD_INT 0
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: PUSH
25272: LD_INT 1
25274: NEG
25275: PUSH
25276: LD_INT 1
25278: NEG
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: PUSH
25284: EMPTY
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25293: LD_ADDR_VAR 0 60
25297: PUSH
25298: LD_INT 0
25300: PUSH
25301: LD_INT 0
25303: PUSH
25304: EMPTY
25305: LIST
25306: LIST
25307: PUSH
25308: LD_INT 0
25310: PUSH
25311: LD_INT 1
25313: NEG
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: PUSH
25319: LD_INT 1
25321: PUSH
25322: LD_INT 0
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: PUSH
25329: LD_INT 1
25331: PUSH
25332: LD_INT 1
25334: PUSH
25335: EMPTY
25336: LIST
25337: LIST
25338: PUSH
25339: LD_INT 0
25341: PUSH
25342: LD_INT 1
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PUSH
25349: LD_INT 1
25351: NEG
25352: PUSH
25353: LD_INT 0
25355: PUSH
25356: EMPTY
25357: LIST
25358: LIST
25359: PUSH
25360: LD_INT 1
25362: NEG
25363: PUSH
25364: LD_INT 1
25366: NEG
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25381: LD_ADDR_VAR 0 61
25385: PUSH
25386: LD_INT 0
25388: PUSH
25389: LD_INT 0
25391: PUSH
25392: EMPTY
25393: LIST
25394: LIST
25395: PUSH
25396: LD_INT 0
25398: PUSH
25399: LD_INT 1
25401: NEG
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: PUSH
25407: LD_INT 1
25409: PUSH
25410: LD_INT 0
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: PUSH
25417: LD_INT 1
25419: PUSH
25420: LD_INT 1
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PUSH
25427: LD_INT 0
25429: PUSH
25430: LD_INT 1
25432: PUSH
25433: EMPTY
25434: LIST
25435: LIST
25436: PUSH
25437: LD_INT 1
25439: NEG
25440: PUSH
25441: LD_INT 0
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: PUSH
25448: LD_INT 1
25450: NEG
25451: PUSH
25452: LD_INT 1
25454: NEG
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: EMPTY
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25469: LD_ADDR_VAR 0 62
25473: PUSH
25474: LD_INT 0
25476: PUSH
25477: LD_INT 0
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: PUSH
25484: LD_INT 0
25486: PUSH
25487: LD_INT 1
25489: NEG
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: LD_INT 1
25497: PUSH
25498: LD_INT 0
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: LD_INT 1
25507: PUSH
25508: LD_INT 1
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: PUSH
25515: LD_INT 0
25517: PUSH
25518: LD_INT 1
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: PUSH
25525: LD_INT 1
25527: NEG
25528: PUSH
25529: LD_INT 0
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: PUSH
25536: LD_INT 1
25538: NEG
25539: PUSH
25540: LD_INT 1
25542: NEG
25543: PUSH
25544: EMPTY
25545: LIST
25546: LIST
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25557: LD_ADDR_VAR 0 63
25561: PUSH
25562: LD_INT 0
25564: PUSH
25565: LD_INT 0
25567: PUSH
25568: EMPTY
25569: LIST
25570: LIST
25571: PUSH
25572: LD_INT 0
25574: PUSH
25575: LD_INT 1
25577: NEG
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PUSH
25583: LD_INT 1
25585: PUSH
25586: LD_INT 0
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: PUSH
25593: LD_INT 1
25595: PUSH
25596: LD_INT 1
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: PUSH
25603: LD_INT 0
25605: PUSH
25606: LD_INT 1
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: PUSH
25613: LD_INT 1
25615: NEG
25616: PUSH
25617: LD_INT 0
25619: PUSH
25620: EMPTY
25621: LIST
25622: LIST
25623: PUSH
25624: LD_INT 1
25626: NEG
25627: PUSH
25628: LD_INT 1
25630: NEG
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25645: LD_ADDR_VAR 0 64
25649: PUSH
25650: LD_INT 0
25652: PUSH
25653: LD_INT 0
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: PUSH
25660: LD_INT 0
25662: PUSH
25663: LD_INT 1
25665: NEG
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PUSH
25671: LD_INT 1
25673: PUSH
25674: LD_INT 0
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PUSH
25681: LD_INT 1
25683: PUSH
25684: LD_INT 1
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 0
25693: PUSH
25694: LD_INT 1
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PUSH
25701: LD_INT 1
25703: NEG
25704: PUSH
25705: LD_INT 0
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PUSH
25712: LD_INT 1
25714: NEG
25715: PUSH
25716: LD_INT 1
25718: NEG
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: ST_TO_ADDR
// end ; 1 :
25733: GO 31630
25735: LD_INT 1
25737: DOUBLE
25738: EQUAL
25739: IFTRUE 25743
25741: GO 28366
25743: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25744: LD_ADDR_VAR 0 11
25748: PUSH
25749: LD_INT 1
25751: NEG
25752: PUSH
25753: LD_INT 3
25755: NEG
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: PUSH
25761: LD_INT 0
25763: PUSH
25764: LD_INT 3
25766: NEG
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: PUSH
25772: LD_INT 1
25774: PUSH
25775: LD_INT 2
25777: NEG
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: LIST
25787: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25788: LD_ADDR_VAR 0 12
25792: PUSH
25793: LD_INT 2
25795: PUSH
25796: LD_INT 1
25798: NEG
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: PUSH
25804: LD_INT 3
25806: PUSH
25807: LD_INT 0
25809: PUSH
25810: EMPTY
25811: LIST
25812: LIST
25813: PUSH
25814: LD_INT 3
25816: PUSH
25817: LD_INT 1
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: LIST
25828: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25829: LD_ADDR_VAR 0 13
25833: PUSH
25834: LD_INT 3
25836: PUSH
25837: LD_INT 2
25839: PUSH
25840: EMPTY
25841: LIST
25842: LIST
25843: PUSH
25844: LD_INT 3
25846: PUSH
25847: LD_INT 3
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: PUSH
25854: LD_INT 2
25856: PUSH
25857: LD_INT 3
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: LIST
25868: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
25869: LD_ADDR_VAR 0 14
25873: PUSH
25874: LD_INT 1
25876: PUSH
25877: LD_INT 3
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: PUSH
25884: LD_INT 0
25886: PUSH
25887: LD_INT 3
25889: PUSH
25890: EMPTY
25891: LIST
25892: LIST
25893: PUSH
25894: LD_INT 1
25896: NEG
25897: PUSH
25898: LD_INT 2
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: LIST
25909: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25910: LD_ADDR_VAR 0 15
25914: PUSH
25915: LD_INT 2
25917: NEG
25918: PUSH
25919: LD_INT 1
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 3
25928: NEG
25929: PUSH
25930: LD_INT 0
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: PUSH
25937: LD_INT 3
25939: NEG
25940: PUSH
25941: LD_INT 1
25943: NEG
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: LIST
25953: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25954: LD_ADDR_VAR 0 16
25958: PUSH
25959: LD_INT 2
25961: NEG
25962: PUSH
25963: LD_INT 3
25965: NEG
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: PUSH
25971: LD_INT 3
25973: NEG
25974: PUSH
25975: LD_INT 2
25977: NEG
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: PUSH
25983: LD_INT 3
25985: NEG
25986: PUSH
25987: LD_INT 3
25989: NEG
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: LIST
25999: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26000: LD_ADDR_VAR 0 17
26004: PUSH
26005: LD_INT 1
26007: NEG
26008: PUSH
26009: LD_INT 3
26011: NEG
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PUSH
26017: LD_INT 0
26019: PUSH
26020: LD_INT 3
26022: NEG
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: LD_INT 1
26030: PUSH
26031: LD_INT 2
26033: NEG
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: LIST
26043: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26044: LD_ADDR_VAR 0 18
26048: PUSH
26049: LD_INT 2
26051: PUSH
26052: LD_INT 1
26054: NEG
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PUSH
26060: LD_INT 3
26062: PUSH
26063: LD_INT 0
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: LD_INT 3
26072: PUSH
26073: LD_INT 1
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: LIST
26084: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26085: LD_ADDR_VAR 0 19
26089: PUSH
26090: LD_INT 3
26092: PUSH
26093: LD_INT 2
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 3
26102: PUSH
26103: LD_INT 3
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 2
26112: PUSH
26113: LD_INT 3
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: LIST
26124: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26125: LD_ADDR_VAR 0 20
26129: PUSH
26130: LD_INT 1
26132: PUSH
26133: LD_INT 3
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: PUSH
26140: LD_INT 0
26142: PUSH
26143: LD_INT 3
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: PUSH
26150: LD_INT 1
26152: NEG
26153: PUSH
26154: LD_INT 2
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: LIST
26165: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26166: LD_ADDR_VAR 0 21
26170: PUSH
26171: LD_INT 2
26173: NEG
26174: PUSH
26175: LD_INT 1
26177: PUSH
26178: EMPTY
26179: LIST
26180: LIST
26181: PUSH
26182: LD_INT 3
26184: NEG
26185: PUSH
26186: LD_INT 0
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: PUSH
26193: LD_INT 3
26195: NEG
26196: PUSH
26197: LD_INT 1
26199: NEG
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: LIST
26209: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26210: LD_ADDR_VAR 0 22
26214: PUSH
26215: LD_INT 2
26217: NEG
26218: PUSH
26219: LD_INT 3
26221: NEG
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: PUSH
26227: LD_INT 3
26229: NEG
26230: PUSH
26231: LD_INT 2
26233: NEG
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: LD_INT 3
26241: NEG
26242: PUSH
26243: LD_INT 3
26245: NEG
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: LIST
26255: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
26256: LD_ADDR_VAR 0 23
26260: PUSH
26261: LD_INT 0
26263: PUSH
26264: LD_INT 3
26266: NEG
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PUSH
26272: LD_INT 1
26274: NEG
26275: PUSH
26276: LD_INT 4
26278: NEG
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: PUSH
26284: LD_INT 1
26286: PUSH
26287: LD_INT 3
26289: NEG
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: LIST
26299: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
26300: LD_ADDR_VAR 0 24
26304: PUSH
26305: LD_INT 3
26307: PUSH
26308: LD_INT 0
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: PUSH
26315: LD_INT 3
26317: PUSH
26318: LD_INT 1
26320: NEG
26321: PUSH
26322: EMPTY
26323: LIST
26324: LIST
26325: PUSH
26326: LD_INT 4
26328: PUSH
26329: LD_INT 1
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: LIST
26340: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
26341: LD_ADDR_VAR 0 25
26345: PUSH
26346: LD_INT 3
26348: PUSH
26349: LD_INT 3
26351: PUSH
26352: EMPTY
26353: LIST
26354: LIST
26355: PUSH
26356: LD_INT 4
26358: PUSH
26359: LD_INT 3
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PUSH
26366: LD_INT 3
26368: PUSH
26369: LD_INT 4
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: LIST
26380: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
26381: LD_ADDR_VAR 0 26
26385: PUSH
26386: LD_INT 0
26388: PUSH
26389: LD_INT 3
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 1
26398: PUSH
26399: LD_INT 4
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: LD_INT 1
26408: NEG
26409: PUSH
26410: LD_INT 3
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: LIST
26421: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
26422: LD_ADDR_VAR 0 27
26426: PUSH
26427: LD_INT 3
26429: NEG
26430: PUSH
26431: LD_INT 0
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 3
26440: NEG
26441: PUSH
26442: LD_INT 1
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: PUSH
26449: LD_INT 4
26451: NEG
26452: PUSH
26453: LD_INT 1
26455: NEG
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: LIST
26465: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
26466: LD_ADDR_VAR 0 28
26470: PUSH
26471: LD_INT 3
26473: NEG
26474: PUSH
26475: LD_INT 3
26477: NEG
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 3
26485: NEG
26486: PUSH
26487: LD_INT 4
26489: NEG
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: PUSH
26495: LD_INT 4
26497: NEG
26498: PUSH
26499: LD_INT 3
26501: NEG
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: LIST
26511: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
26512: LD_ADDR_VAR 0 29
26516: PUSH
26517: LD_INT 1
26519: NEG
26520: PUSH
26521: LD_INT 3
26523: NEG
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: PUSH
26529: LD_INT 0
26531: PUSH
26532: LD_INT 3
26534: NEG
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PUSH
26540: LD_INT 1
26542: PUSH
26543: LD_INT 2
26545: NEG
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: LD_INT 1
26553: NEG
26554: PUSH
26555: LD_INT 4
26557: NEG
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: LD_INT 0
26565: PUSH
26566: LD_INT 4
26568: NEG
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: PUSH
26574: LD_INT 1
26576: PUSH
26577: LD_INT 3
26579: NEG
26580: PUSH
26581: EMPTY
26582: LIST
26583: LIST
26584: PUSH
26585: LD_INT 1
26587: NEG
26588: PUSH
26589: LD_INT 5
26591: NEG
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: PUSH
26597: LD_INT 0
26599: PUSH
26600: LD_INT 5
26602: NEG
26603: PUSH
26604: EMPTY
26605: LIST
26606: LIST
26607: PUSH
26608: LD_INT 1
26610: PUSH
26611: LD_INT 4
26613: NEG
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: PUSH
26619: LD_INT 1
26621: NEG
26622: PUSH
26623: LD_INT 6
26625: NEG
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 0
26633: PUSH
26634: LD_INT 6
26636: NEG
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PUSH
26642: LD_INT 1
26644: PUSH
26645: LD_INT 5
26647: NEG
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PUSH
26653: EMPTY
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
26667: LD_ADDR_VAR 0 30
26671: PUSH
26672: LD_INT 2
26674: PUSH
26675: LD_INT 1
26677: NEG
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: PUSH
26683: LD_INT 3
26685: PUSH
26686: LD_INT 0
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: PUSH
26693: LD_INT 3
26695: PUSH
26696: LD_INT 1
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: LD_INT 3
26705: PUSH
26706: LD_INT 1
26708: NEG
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: PUSH
26714: LD_INT 4
26716: PUSH
26717: LD_INT 0
26719: PUSH
26720: EMPTY
26721: LIST
26722: LIST
26723: PUSH
26724: LD_INT 4
26726: PUSH
26727: LD_INT 1
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: PUSH
26734: LD_INT 4
26736: PUSH
26737: LD_INT 1
26739: NEG
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: PUSH
26745: LD_INT 5
26747: PUSH
26748: LD_INT 0
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: PUSH
26755: LD_INT 5
26757: PUSH
26758: LD_INT 1
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: LD_INT 5
26767: PUSH
26768: LD_INT 1
26770: NEG
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PUSH
26776: LD_INT 6
26778: PUSH
26779: LD_INT 0
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PUSH
26786: LD_INT 6
26788: PUSH
26789: LD_INT 1
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: LIST
26808: LIST
26809: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
26810: LD_ADDR_VAR 0 31
26814: PUSH
26815: LD_INT 3
26817: PUSH
26818: LD_INT 2
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PUSH
26825: LD_INT 3
26827: PUSH
26828: LD_INT 3
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 2
26837: PUSH
26838: LD_INT 3
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: LD_INT 4
26847: PUSH
26848: LD_INT 3
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PUSH
26855: LD_INT 4
26857: PUSH
26858: LD_INT 4
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: LD_INT 3
26867: PUSH
26868: LD_INT 4
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: PUSH
26875: LD_INT 5
26877: PUSH
26878: LD_INT 4
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: PUSH
26885: LD_INT 5
26887: PUSH
26888: LD_INT 5
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: PUSH
26895: LD_INT 4
26897: PUSH
26898: LD_INT 5
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 6
26907: PUSH
26908: LD_INT 5
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: PUSH
26915: LD_INT 6
26917: PUSH
26918: LD_INT 6
26920: PUSH
26921: EMPTY
26922: LIST
26923: LIST
26924: PUSH
26925: LD_INT 5
26927: PUSH
26928: LD_INT 6
26930: PUSH
26931: EMPTY
26932: LIST
26933: LIST
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
26949: LD_ADDR_VAR 0 32
26953: PUSH
26954: LD_INT 1
26956: PUSH
26957: LD_INT 3
26959: PUSH
26960: EMPTY
26961: LIST
26962: LIST
26963: PUSH
26964: LD_INT 0
26966: PUSH
26967: LD_INT 3
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PUSH
26974: LD_INT 1
26976: NEG
26977: PUSH
26978: LD_INT 2
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PUSH
26985: LD_INT 1
26987: PUSH
26988: LD_INT 4
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 0
26997: PUSH
26998: LD_INT 4
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 1
27007: NEG
27008: PUSH
27009: LD_INT 3
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PUSH
27016: LD_INT 1
27018: PUSH
27019: LD_INT 5
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: LD_INT 0
27028: PUSH
27029: LD_INT 5
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: PUSH
27036: LD_INT 1
27038: NEG
27039: PUSH
27040: LD_INT 4
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: PUSH
27047: LD_INT 1
27049: PUSH
27050: LD_INT 6
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: PUSH
27057: LD_INT 0
27059: PUSH
27060: LD_INT 6
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: LD_INT 1
27069: NEG
27070: PUSH
27071: LD_INT 5
27073: PUSH
27074: EMPTY
27075: LIST
27076: LIST
27077: PUSH
27078: EMPTY
27079: LIST
27080: LIST
27081: LIST
27082: LIST
27083: LIST
27084: LIST
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: LIST
27090: LIST
27091: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
27092: LD_ADDR_VAR 0 33
27096: PUSH
27097: LD_INT 2
27099: NEG
27100: PUSH
27101: LD_INT 1
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PUSH
27108: LD_INT 3
27110: NEG
27111: PUSH
27112: LD_INT 0
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: LD_INT 3
27121: NEG
27122: PUSH
27123: LD_INT 1
27125: NEG
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: PUSH
27131: LD_INT 3
27133: NEG
27134: PUSH
27135: LD_INT 1
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: PUSH
27142: LD_INT 4
27144: NEG
27145: PUSH
27146: LD_INT 0
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: PUSH
27153: LD_INT 4
27155: NEG
27156: PUSH
27157: LD_INT 1
27159: NEG
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: LD_INT 4
27167: NEG
27168: PUSH
27169: LD_INT 1
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: PUSH
27176: LD_INT 5
27178: NEG
27179: PUSH
27180: LD_INT 0
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: LD_INT 5
27189: NEG
27190: PUSH
27191: LD_INT 1
27193: NEG
27194: PUSH
27195: EMPTY
27196: LIST
27197: LIST
27198: PUSH
27199: LD_INT 5
27201: NEG
27202: PUSH
27203: LD_INT 1
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: PUSH
27210: LD_INT 6
27212: NEG
27213: PUSH
27214: LD_INT 0
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: LD_INT 6
27223: NEG
27224: PUSH
27225: LD_INT 1
27227: NEG
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
27247: LD_ADDR_VAR 0 34
27251: PUSH
27252: LD_INT 2
27254: NEG
27255: PUSH
27256: LD_INT 3
27258: NEG
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PUSH
27264: LD_INT 3
27266: NEG
27267: PUSH
27268: LD_INT 2
27270: NEG
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: LD_INT 3
27278: NEG
27279: PUSH
27280: LD_INT 3
27282: NEG
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PUSH
27288: LD_INT 3
27290: NEG
27291: PUSH
27292: LD_INT 4
27294: NEG
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: LD_INT 4
27302: NEG
27303: PUSH
27304: LD_INT 3
27306: NEG
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: PUSH
27312: LD_INT 4
27314: NEG
27315: PUSH
27316: LD_INT 4
27318: NEG
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PUSH
27324: LD_INT 4
27326: NEG
27327: PUSH
27328: LD_INT 5
27330: NEG
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 5
27338: NEG
27339: PUSH
27340: LD_INT 4
27342: NEG
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: PUSH
27348: LD_INT 5
27350: NEG
27351: PUSH
27352: LD_INT 5
27354: NEG
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PUSH
27360: LD_INT 5
27362: NEG
27363: PUSH
27364: LD_INT 6
27366: NEG
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: PUSH
27372: LD_INT 6
27374: NEG
27375: PUSH
27376: LD_INT 5
27378: NEG
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: LD_INT 6
27386: NEG
27387: PUSH
27388: LD_INT 6
27390: NEG
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
27410: LD_ADDR_VAR 0 41
27414: PUSH
27415: LD_INT 0
27417: PUSH
27418: LD_INT 2
27420: NEG
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: PUSH
27426: LD_INT 1
27428: NEG
27429: PUSH
27430: LD_INT 3
27432: NEG
27433: PUSH
27434: EMPTY
27435: LIST
27436: LIST
27437: PUSH
27438: LD_INT 1
27440: PUSH
27441: LD_INT 2
27443: NEG
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: LIST
27453: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
27454: LD_ADDR_VAR 0 42
27458: PUSH
27459: LD_INT 2
27461: PUSH
27462: LD_INT 0
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: PUSH
27469: LD_INT 2
27471: PUSH
27472: LD_INT 1
27474: NEG
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: PUSH
27480: LD_INT 3
27482: PUSH
27483: LD_INT 1
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: LIST
27494: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
27495: LD_ADDR_VAR 0 43
27499: PUSH
27500: LD_INT 2
27502: PUSH
27503: LD_INT 2
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: LD_INT 3
27512: PUSH
27513: LD_INT 2
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 2
27522: PUSH
27523: LD_INT 3
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: LIST
27534: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
27535: LD_ADDR_VAR 0 44
27539: PUSH
27540: LD_INT 0
27542: PUSH
27543: LD_INT 2
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: PUSH
27550: LD_INT 1
27552: PUSH
27553: LD_INT 3
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: PUSH
27560: LD_INT 1
27562: NEG
27563: PUSH
27564: LD_INT 2
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: LIST
27575: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27576: LD_ADDR_VAR 0 45
27580: PUSH
27581: LD_INT 2
27583: NEG
27584: PUSH
27585: LD_INT 0
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: PUSH
27592: LD_INT 2
27594: NEG
27595: PUSH
27596: LD_INT 1
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 3
27605: NEG
27606: PUSH
27607: LD_INT 1
27609: NEG
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: LIST
27619: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
27620: LD_ADDR_VAR 0 46
27624: PUSH
27625: LD_INT 2
27627: NEG
27628: PUSH
27629: LD_INT 2
27631: NEG
27632: PUSH
27633: EMPTY
27634: LIST
27635: LIST
27636: PUSH
27637: LD_INT 2
27639: NEG
27640: PUSH
27641: LD_INT 3
27643: NEG
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: PUSH
27649: LD_INT 3
27651: NEG
27652: PUSH
27653: LD_INT 2
27655: NEG
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: LIST
27665: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
27666: LD_ADDR_VAR 0 47
27670: PUSH
27671: LD_INT 2
27673: NEG
27674: PUSH
27675: LD_INT 3
27677: NEG
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: PUSH
27683: LD_INT 1
27685: NEG
27686: PUSH
27687: LD_INT 3
27689: NEG
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27699: LD_ADDR_VAR 0 48
27703: PUSH
27704: LD_INT 1
27706: PUSH
27707: LD_INT 2
27709: NEG
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: PUSH
27715: LD_INT 2
27717: PUSH
27718: LD_INT 1
27720: NEG
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
27730: LD_ADDR_VAR 0 49
27734: PUSH
27735: LD_INT 3
27737: PUSH
27738: LD_INT 1
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: PUSH
27745: LD_INT 3
27747: PUSH
27748: LD_INT 2
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
27759: LD_ADDR_VAR 0 50
27763: PUSH
27764: LD_INT 2
27766: PUSH
27767: LD_INT 3
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: PUSH
27774: LD_INT 1
27776: PUSH
27777: LD_INT 3
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
27788: LD_ADDR_VAR 0 51
27792: PUSH
27793: LD_INT 1
27795: NEG
27796: PUSH
27797: LD_INT 2
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PUSH
27804: LD_INT 2
27806: NEG
27807: PUSH
27808: LD_INT 1
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27819: LD_ADDR_VAR 0 52
27823: PUSH
27824: LD_INT 3
27826: NEG
27827: PUSH
27828: LD_INT 1
27830: NEG
27831: PUSH
27832: EMPTY
27833: LIST
27834: LIST
27835: PUSH
27836: LD_INT 3
27838: NEG
27839: PUSH
27840: LD_INT 2
27842: NEG
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27852: LD_ADDR_VAR 0 53
27856: PUSH
27857: LD_INT 1
27859: NEG
27860: PUSH
27861: LD_INT 3
27863: NEG
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: PUSH
27869: LD_INT 0
27871: PUSH
27872: LD_INT 3
27874: NEG
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 1
27882: PUSH
27883: LD_INT 2
27885: NEG
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: LIST
27895: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27896: LD_ADDR_VAR 0 54
27900: PUSH
27901: LD_INT 2
27903: PUSH
27904: LD_INT 1
27906: NEG
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: PUSH
27912: LD_INT 3
27914: PUSH
27915: LD_INT 0
27917: PUSH
27918: EMPTY
27919: LIST
27920: LIST
27921: PUSH
27922: LD_INT 3
27924: PUSH
27925: LD_INT 1
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: LIST
27936: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27937: LD_ADDR_VAR 0 55
27941: PUSH
27942: LD_INT 3
27944: PUSH
27945: LD_INT 2
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 3
27954: PUSH
27955: LD_INT 3
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: LD_INT 2
27964: PUSH
27965: LD_INT 3
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: LIST
27976: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27977: LD_ADDR_VAR 0 56
27981: PUSH
27982: LD_INT 1
27984: PUSH
27985: LD_INT 3
27987: PUSH
27988: EMPTY
27989: LIST
27990: LIST
27991: PUSH
27992: LD_INT 0
27994: PUSH
27995: LD_INT 3
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: PUSH
28002: LD_INT 1
28004: NEG
28005: PUSH
28006: LD_INT 2
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: LIST
28017: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28018: LD_ADDR_VAR 0 57
28022: PUSH
28023: LD_INT 2
28025: NEG
28026: PUSH
28027: LD_INT 1
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: PUSH
28034: LD_INT 3
28036: NEG
28037: PUSH
28038: LD_INT 0
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: PUSH
28045: LD_INT 3
28047: NEG
28048: PUSH
28049: LD_INT 1
28051: NEG
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: LIST
28061: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28062: LD_ADDR_VAR 0 58
28066: PUSH
28067: LD_INT 2
28069: NEG
28070: PUSH
28071: LD_INT 3
28073: NEG
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: PUSH
28079: LD_INT 3
28081: NEG
28082: PUSH
28083: LD_INT 2
28085: NEG
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 3
28093: NEG
28094: PUSH
28095: LD_INT 3
28097: NEG
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: LIST
28107: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
28108: LD_ADDR_VAR 0 59
28112: PUSH
28113: LD_INT 1
28115: NEG
28116: PUSH
28117: LD_INT 2
28119: NEG
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: LD_INT 0
28127: PUSH
28128: LD_INT 2
28130: NEG
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: PUSH
28136: LD_INT 1
28138: PUSH
28139: LD_INT 1
28141: NEG
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: LIST
28151: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
28152: LD_ADDR_VAR 0 60
28156: PUSH
28157: LD_INT 1
28159: PUSH
28160: LD_INT 1
28162: NEG
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: PUSH
28168: LD_INT 2
28170: PUSH
28171: LD_INT 0
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: PUSH
28178: LD_INT 2
28180: PUSH
28181: LD_INT 1
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: LIST
28192: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
28193: LD_ADDR_VAR 0 61
28197: PUSH
28198: LD_INT 2
28200: PUSH
28201: LD_INT 1
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: PUSH
28208: LD_INT 2
28210: PUSH
28211: LD_INT 2
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: PUSH
28218: LD_INT 1
28220: PUSH
28221: LD_INT 2
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: LIST
28232: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
28233: LD_ADDR_VAR 0 62
28237: PUSH
28238: LD_INT 1
28240: PUSH
28241: LD_INT 2
28243: PUSH
28244: EMPTY
28245: LIST
28246: LIST
28247: PUSH
28248: LD_INT 0
28250: PUSH
28251: LD_INT 2
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: PUSH
28258: LD_INT 1
28260: NEG
28261: PUSH
28262: LD_INT 1
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: LIST
28273: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28274: LD_ADDR_VAR 0 63
28278: PUSH
28279: LD_INT 1
28281: NEG
28282: PUSH
28283: LD_INT 1
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PUSH
28290: LD_INT 2
28292: NEG
28293: PUSH
28294: LD_INT 0
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: PUSH
28301: LD_INT 2
28303: NEG
28304: PUSH
28305: LD_INT 1
28307: NEG
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: LIST
28317: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28318: LD_ADDR_VAR 0 64
28322: PUSH
28323: LD_INT 1
28325: NEG
28326: PUSH
28327: LD_INT 2
28329: NEG
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PUSH
28335: LD_INT 2
28337: NEG
28338: PUSH
28339: LD_INT 1
28341: NEG
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: LD_INT 2
28349: NEG
28350: PUSH
28351: LD_INT 2
28353: NEG
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: LIST
28363: ST_TO_ADDR
// end ; 2 :
28364: GO 31630
28366: LD_INT 2
28368: DOUBLE
28369: EQUAL
28370: IFTRUE 28374
28372: GO 31629
28374: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
28375: LD_ADDR_VAR 0 29
28379: PUSH
28380: LD_INT 4
28382: PUSH
28383: LD_INT 0
28385: PUSH
28386: EMPTY
28387: LIST
28388: LIST
28389: PUSH
28390: LD_INT 4
28392: PUSH
28393: LD_INT 1
28395: NEG
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: LD_INT 5
28403: PUSH
28404: LD_INT 0
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: PUSH
28411: LD_INT 5
28413: PUSH
28414: LD_INT 1
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PUSH
28421: LD_INT 4
28423: PUSH
28424: LD_INT 1
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 3
28433: PUSH
28434: LD_INT 0
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: LD_INT 3
28443: PUSH
28444: LD_INT 1
28446: NEG
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: PUSH
28452: LD_INT 3
28454: PUSH
28455: LD_INT 2
28457: NEG
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PUSH
28463: LD_INT 5
28465: PUSH
28466: LD_INT 2
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: LD_INT 3
28475: PUSH
28476: LD_INT 3
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: LD_INT 3
28485: PUSH
28486: LD_INT 2
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: LD_INT 4
28495: PUSH
28496: LD_INT 3
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 4
28505: PUSH
28506: LD_INT 4
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PUSH
28513: LD_INT 3
28515: PUSH
28516: LD_INT 4
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: PUSH
28523: LD_INT 2
28525: PUSH
28526: LD_INT 3
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: PUSH
28533: LD_INT 2
28535: PUSH
28536: LD_INT 2
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: LD_INT 4
28545: PUSH
28546: LD_INT 2
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: LD_INT 2
28555: PUSH
28556: LD_INT 4
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 0
28565: PUSH
28566: LD_INT 4
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: LD_INT 0
28575: PUSH
28576: LD_INT 3
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: LD_INT 1
28585: PUSH
28586: LD_INT 4
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: LD_INT 1
28595: PUSH
28596: LD_INT 5
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: PUSH
28603: LD_INT 0
28605: PUSH
28606: LD_INT 5
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PUSH
28613: LD_INT 1
28615: NEG
28616: PUSH
28617: LD_INT 4
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PUSH
28624: LD_INT 1
28626: NEG
28627: PUSH
28628: LD_INT 3
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: PUSH
28635: LD_INT 2
28637: PUSH
28638: LD_INT 5
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 2
28647: NEG
28648: PUSH
28649: LD_INT 3
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: PUSH
28656: LD_INT 3
28658: NEG
28659: PUSH
28660: LD_INT 0
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PUSH
28667: LD_INT 3
28669: NEG
28670: PUSH
28671: LD_INT 1
28673: NEG
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 2
28681: NEG
28682: PUSH
28683: LD_INT 0
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: LD_INT 2
28692: NEG
28693: PUSH
28694: LD_INT 1
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: LD_INT 3
28703: NEG
28704: PUSH
28705: LD_INT 1
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: PUSH
28712: LD_INT 4
28714: NEG
28715: PUSH
28716: LD_INT 0
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: LD_INT 4
28725: NEG
28726: PUSH
28727: LD_INT 1
28729: NEG
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: PUSH
28735: LD_INT 4
28737: NEG
28738: PUSH
28739: LD_INT 2
28741: NEG
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: PUSH
28747: LD_INT 2
28749: NEG
28750: PUSH
28751: LD_INT 2
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PUSH
28758: LD_INT 4
28760: NEG
28761: PUSH
28762: LD_INT 4
28764: NEG
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: LD_INT 4
28772: NEG
28773: PUSH
28774: LD_INT 5
28776: NEG
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: PUSH
28782: LD_INT 3
28784: NEG
28785: PUSH
28786: LD_INT 4
28788: NEG
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: LD_INT 3
28796: NEG
28797: PUSH
28798: LD_INT 3
28800: NEG
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: PUSH
28806: LD_INT 4
28808: NEG
28809: PUSH
28810: LD_INT 3
28812: NEG
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: PUSH
28818: LD_INT 5
28820: NEG
28821: PUSH
28822: LD_INT 4
28824: NEG
28825: PUSH
28826: EMPTY
28827: LIST
28828: LIST
28829: PUSH
28830: LD_INT 5
28832: NEG
28833: PUSH
28834: LD_INT 5
28836: NEG
28837: PUSH
28838: EMPTY
28839: LIST
28840: LIST
28841: PUSH
28842: LD_INT 3
28844: NEG
28845: PUSH
28846: LD_INT 5
28848: NEG
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PUSH
28854: LD_INT 5
28856: NEG
28857: PUSH
28858: LD_INT 3
28860: NEG
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: LIST
28892: LIST
28893: LIST
28894: LIST
28895: LIST
28896: LIST
28897: LIST
28898: LIST
28899: LIST
28900: LIST
28901: LIST
28902: LIST
28903: LIST
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: LIST
28911: LIST
28912: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
28913: LD_ADDR_VAR 0 30
28917: PUSH
28918: LD_INT 4
28920: PUSH
28921: LD_INT 4
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PUSH
28928: LD_INT 4
28930: PUSH
28931: LD_INT 3
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: PUSH
28938: LD_INT 5
28940: PUSH
28941: LD_INT 4
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: PUSH
28948: LD_INT 5
28950: PUSH
28951: LD_INT 5
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: PUSH
28958: LD_INT 4
28960: PUSH
28961: LD_INT 5
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: PUSH
28968: LD_INT 3
28970: PUSH
28971: LD_INT 4
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: PUSH
28978: LD_INT 3
28980: PUSH
28981: LD_INT 3
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: LD_INT 5
28990: PUSH
28991: LD_INT 3
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PUSH
28998: LD_INT 3
29000: PUSH
29001: LD_INT 5
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: LD_INT 0
29010: PUSH
29011: LD_INT 3
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: PUSH
29018: LD_INT 0
29020: PUSH
29021: LD_INT 2
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: LD_INT 1
29030: PUSH
29031: LD_INT 3
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PUSH
29038: LD_INT 1
29040: PUSH
29041: LD_INT 4
29043: PUSH
29044: EMPTY
29045: LIST
29046: LIST
29047: PUSH
29048: LD_INT 0
29050: PUSH
29051: LD_INT 4
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PUSH
29058: LD_INT 1
29060: NEG
29061: PUSH
29062: LD_INT 3
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: PUSH
29069: LD_INT 1
29071: NEG
29072: PUSH
29073: LD_INT 2
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: LD_INT 2
29082: PUSH
29083: LD_INT 4
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: PUSH
29090: LD_INT 2
29092: NEG
29093: PUSH
29094: LD_INT 2
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: LD_INT 4
29103: NEG
29104: PUSH
29105: LD_INT 0
29107: PUSH
29108: EMPTY
29109: LIST
29110: LIST
29111: PUSH
29112: LD_INT 4
29114: NEG
29115: PUSH
29116: LD_INT 1
29118: NEG
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: PUSH
29124: LD_INT 3
29126: NEG
29127: PUSH
29128: LD_INT 0
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: PUSH
29135: LD_INT 3
29137: NEG
29138: PUSH
29139: LD_INT 1
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: PUSH
29146: LD_INT 4
29148: NEG
29149: PUSH
29150: LD_INT 1
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: PUSH
29157: LD_INT 5
29159: NEG
29160: PUSH
29161: LD_INT 0
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: PUSH
29168: LD_INT 5
29170: NEG
29171: PUSH
29172: LD_INT 1
29174: NEG
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PUSH
29180: LD_INT 5
29182: NEG
29183: PUSH
29184: LD_INT 2
29186: NEG
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: LD_INT 3
29194: NEG
29195: PUSH
29196: LD_INT 2
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: LD_INT 3
29205: NEG
29206: PUSH
29207: LD_INT 3
29209: NEG
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PUSH
29215: LD_INT 3
29217: NEG
29218: PUSH
29219: LD_INT 4
29221: NEG
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: PUSH
29227: LD_INT 2
29229: NEG
29230: PUSH
29231: LD_INT 3
29233: NEG
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: LD_INT 2
29241: NEG
29242: PUSH
29243: LD_INT 2
29245: NEG
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: PUSH
29251: LD_INT 3
29253: NEG
29254: PUSH
29255: LD_INT 2
29257: NEG
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: PUSH
29263: LD_INT 4
29265: NEG
29266: PUSH
29267: LD_INT 3
29269: NEG
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: PUSH
29275: LD_INT 4
29277: NEG
29278: PUSH
29279: LD_INT 4
29281: NEG
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: LD_INT 2
29289: NEG
29290: PUSH
29291: LD_INT 4
29293: NEG
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PUSH
29299: LD_INT 4
29301: NEG
29302: PUSH
29303: LD_INT 2
29305: NEG
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PUSH
29311: LD_INT 0
29313: PUSH
29314: LD_INT 4
29316: NEG
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: PUSH
29322: LD_INT 0
29324: PUSH
29325: LD_INT 5
29327: NEG
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: LD_INT 1
29335: PUSH
29336: LD_INT 4
29338: NEG
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: LD_INT 1
29346: PUSH
29347: LD_INT 3
29349: NEG
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: PUSH
29355: LD_INT 0
29357: PUSH
29358: LD_INT 3
29360: NEG
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: PUSH
29366: LD_INT 1
29368: NEG
29369: PUSH
29370: LD_INT 4
29372: NEG
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: PUSH
29378: LD_INT 1
29380: NEG
29381: PUSH
29382: LD_INT 5
29384: NEG
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: PUSH
29390: LD_INT 2
29392: PUSH
29393: LD_INT 3
29395: NEG
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: PUSH
29401: LD_INT 2
29403: NEG
29404: PUSH
29405: LD_INT 5
29407: NEG
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: LIST
29417: LIST
29418: LIST
29419: LIST
29420: LIST
29421: LIST
29422: LIST
29423: LIST
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: LIST
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: LIST
29447: LIST
29448: LIST
29449: LIST
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: LIST
29455: LIST
29456: LIST
29457: LIST
29458: LIST
29459: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
29460: LD_ADDR_VAR 0 31
29464: PUSH
29465: LD_INT 0
29467: PUSH
29468: LD_INT 4
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: PUSH
29475: LD_INT 0
29477: PUSH
29478: LD_INT 3
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: PUSH
29485: LD_INT 1
29487: PUSH
29488: LD_INT 4
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PUSH
29495: LD_INT 1
29497: PUSH
29498: LD_INT 5
29500: PUSH
29501: EMPTY
29502: LIST
29503: LIST
29504: PUSH
29505: LD_INT 0
29507: PUSH
29508: LD_INT 5
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: LD_INT 1
29517: NEG
29518: PUSH
29519: LD_INT 4
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: PUSH
29526: LD_INT 1
29528: NEG
29529: PUSH
29530: LD_INT 3
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: LD_INT 2
29539: PUSH
29540: LD_INT 5
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: PUSH
29547: LD_INT 2
29549: NEG
29550: PUSH
29551: LD_INT 3
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: LD_INT 3
29560: NEG
29561: PUSH
29562: LD_INT 0
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: PUSH
29569: LD_INT 3
29571: NEG
29572: PUSH
29573: LD_INT 1
29575: NEG
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: LD_INT 2
29583: NEG
29584: PUSH
29585: LD_INT 0
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PUSH
29592: LD_INT 2
29594: NEG
29595: PUSH
29596: LD_INT 1
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PUSH
29603: LD_INT 3
29605: NEG
29606: PUSH
29607: LD_INT 1
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: PUSH
29614: LD_INT 4
29616: NEG
29617: PUSH
29618: LD_INT 0
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: PUSH
29625: LD_INT 4
29627: NEG
29628: PUSH
29629: LD_INT 1
29631: NEG
29632: PUSH
29633: EMPTY
29634: LIST
29635: LIST
29636: PUSH
29637: LD_INT 4
29639: NEG
29640: PUSH
29641: LD_INT 2
29643: NEG
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: PUSH
29649: LD_INT 2
29651: NEG
29652: PUSH
29653: LD_INT 2
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: PUSH
29660: LD_INT 4
29662: NEG
29663: PUSH
29664: LD_INT 4
29666: NEG
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: PUSH
29672: LD_INT 4
29674: NEG
29675: PUSH
29676: LD_INT 5
29678: NEG
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: LD_INT 3
29686: NEG
29687: PUSH
29688: LD_INT 4
29690: NEG
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: PUSH
29696: LD_INT 3
29698: NEG
29699: PUSH
29700: LD_INT 3
29702: NEG
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PUSH
29708: LD_INT 4
29710: NEG
29711: PUSH
29712: LD_INT 3
29714: NEG
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PUSH
29720: LD_INT 5
29722: NEG
29723: PUSH
29724: LD_INT 4
29726: NEG
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: PUSH
29732: LD_INT 5
29734: NEG
29735: PUSH
29736: LD_INT 5
29738: NEG
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: LD_INT 3
29746: NEG
29747: PUSH
29748: LD_INT 5
29750: NEG
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: PUSH
29756: LD_INT 5
29758: NEG
29759: PUSH
29760: LD_INT 3
29762: NEG
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PUSH
29768: LD_INT 0
29770: PUSH
29771: LD_INT 3
29773: NEG
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: PUSH
29779: LD_INT 0
29781: PUSH
29782: LD_INT 4
29784: NEG
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PUSH
29790: LD_INT 1
29792: PUSH
29793: LD_INT 3
29795: NEG
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: PUSH
29801: LD_INT 1
29803: PUSH
29804: LD_INT 2
29806: NEG
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PUSH
29812: LD_INT 0
29814: PUSH
29815: LD_INT 2
29817: NEG
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PUSH
29823: LD_INT 1
29825: NEG
29826: PUSH
29827: LD_INT 3
29829: NEG
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: LD_INT 1
29837: NEG
29838: PUSH
29839: LD_INT 4
29841: NEG
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: LD_INT 2
29849: PUSH
29850: LD_INT 2
29852: NEG
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: LD_INT 2
29860: NEG
29861: PUSH
29862: LD_INT 4
29864: NEG
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PUSH
29870: LD_INT 4
29872: PUSH
29873: LD_INT 0
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: LD_INT 4
29882: PUSH
29883: LD_INT 1
29885: NEG
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: PUSH
29891: LD_INT 5
29893: PUSH
29894: LD_INT 0
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: PUSH
29901: LD_INT 5
29903: PUSH
29904: LD_INT 1
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PUSH
29911: LD_INT 4
29913: PUSH
29914: LD_INT 1
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: PUSH
29921: LD_INT 3
29923: PUSH
29924: LD_INT 0
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: PUSH
29931: LD_INT 3
29933: PUSH
29934: LD_INT 1
29936: NEG
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: PUSH
29942: LD_INT 3
29944: PUSH
29945: LD_INT 2
29947: NEG
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PUSH
29953: LD_INT 5
29955: PUSH
29956: LD_INT 2
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
30010: LD_ADDR_VAR 0 32
30014: PUSH
30015: LD_INT 4
30017: NEG
30018: PUSH
30019: LD_INT 0
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: PUSH
30026: LD_INT 4
30028: NEG
30029: PUSH
30030: LD_INT 1
30032: NEG
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: LD_INT 3
30040: NEG
30041: PUSH
30042: LD_INT 0
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PUSH
30049: LD_INT 3
30051: NEG
30052: PUSH
30053: LD_INT 1
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: PUSH
30060: LD_INT 4
30062: NEG
30063: PUSH
30064: LD_INT 1
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: PUSH
30071: LD_INT 5
30073: NEG
30074: PUSH
30075: LD_INT 0
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: LD_INT 5
30084: NEG
30085: PUSH
30086: LD_INT 1
30088: NEG
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 5
30096: NEG
30097: PUSH
30098: LD_INT 2
30100: NEG
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 3
30108: NEG
30109: PUSH
30110: LD_INT 2
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: PUSH
30117: LD_INT 3
30119: NEG
30120: PUSH
30121: LD_INT 3
30123: NEG
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PUSH
30129: LD_INT 3
30131: NEG
30132: PUSH
30133: LD_INT 4
30135: NEG
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: PUSH
30141: LD_INT 2
30143: NEG
30144: PUSH
30145: LD_INT 3
30147: NEG
30148: PUSH
30149: EMPTY
30150: LIST
30151: LIST
30152: PUSH
30153: LD_INT 2
30155: NEG
30156: PUSH
30157: LD_INT 2
30159: NEG
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: LD_INT 3
30167: NEG
30168: PUSH
30169: LD_INT 2
30171: NEG
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: PUSH
30177: LD_INT 4
30179: NEG
30180: PUSH
30181: LD_INT 3
30183: NEG
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: PUSH
30189: LD_INT 4
30191: NEG
30192: PUSH
30193: LD_INT 4
30195: NEG
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: PUSH
30201: LD_INT 2
30203: NEG
30204: PUSH
30205: LD_INT 4
30207: NEG
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: PUSH
30213: LD_INT 4
30215: NEG
30216: PUSH
30217: LD_INT 2
30219: NEG
30220: PUSH
30221: EMPTY
30222: LIST
30223: LIST
30224: PUSH
30225: LD_INT 0
30227: PUSH
30228: LD_INT 4
30230: NEG
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: PUSH
30236: LD_INT 0
30238: PUSH
30239: LD_INT 5
30241: NEG
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: LD_INT 1
30249: PUSH
30250: LD_INT 4
30252: NEG
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PUSH
30258: LD_INT 1
30260: PUSH
30261: LD_INT 3
30263: NEG
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: LD_INT 0
30271: PUSH
30272: LD_INT 3
30274: NEG
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: LD_INT 1
30282: NEG
30283: PUSH
30284: LD_INT 4
30286: NEG
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 1
30294: NEG
30295: PUSH
30296: LD_INT 5
30298: NEG
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: PUSH
30304: LD_INT 2
30306: PUSH
30307: LD_INT 3
30309: NEG
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 2
30317: NEG
30318: PUSH
30319: LD_INT 5
30321: NEG
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: PUSH
30327: LD_INT 3
30329: PUSH
30330: LD_INT 0
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: LD_INT 3
30339: PUSH
30340: LD_INT 1
30342: NEG
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PUSH
30348: LD_INT 4
30350: PUSH
30351: LD_INT 0
30353: PUSH
30354: EMPTY
30355: LIST
30356: LIST
30357: PUSH
30358: LD_INT 4
30360: PUSH
30361: LD_INT 1
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: PUSH
30368: LD_INT 3
30370: PUSH
30371: LD_INT 1
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: PUSH
30378: LD_INT 2
30380: PUSH
30381: LD_INT 0
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PUSH
30388: LD_INT 2
30390: PUSH
30391: LD_INT 1
30393: NEG
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 2
30401: PUSH
30402: LD_INT 2
30404: NEG
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: PUSH
30410: LD_INT 4
30412: PUSH
30413: LD_INT 2
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PUSH
30420: LD_INT 4
30422: PUSH
30423: LD_INT 4
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PUSH
30430: LD_INT 4
30432: PUSH
30433: LD_INT 3
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PUSH
30440: LD_INT 5
30442: PUSH
30443: LD_INT 4
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PUSH
30450: LD_INT 5
30452: PUSH
30453: LD_INT 5
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: PUSH
30460: LD_INT 4
30462: PUSH
30463: LD_INT 5
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: PUSH
30470: LD_INT 3
30472: PUSH
30473: LD_INT 4
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 3
30482: PUSH
30483: LD_INT 3
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PUSH
30490: LD_INT 5
30492: PUSH
30493: LD_INT 3
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 3
30502: PUSH
30503: LD_INT 5
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
30557: LD_ADDR_VAR 0 33
30561: PUSH
30562: LD_INT 4
30564: NEG
30565: PUSH
30566: LD_INT 4
30568: NEG
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PUSH
30574: LD_INT 4
30576: NEG
30577: PUSH
30578: LD_INT 5
30580: NEG
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 3
30588: NEG
30589: PUSH
30590: LD_INT 4
30592: NEG
30593: PUSH
30594: EMPTY
30595: LIST
30596: LIST
30597: PUSH
30598: LD_INT 3
30600: NEG
30601: PUSH
30602: LD_INT 3
30604: NEG
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: LD_INT 4
30612: NEG
30613: PUSH
30614: LD_INT 3
30616: NEG
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: PUSH
30622: LD_INT 5
30624: NEG
30625: PUSH
30626: LD_INT 4
30628: NEG
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: LD_INT 5
30636: NEG
30637: PUSH
30638: LD_INT 5
30640: NEG
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PUSH
30646: LD_INT 3
30648: NEG
30649: PUSH
30650: LD_INT 5
30652: NEG
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: LD_INT 5
30660: NEG
30661: PUSH
30662: LD_INT 3
30664: NEG
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: LD_INT 0
30672: PUSH
30673: LD_INT 3
30675: NEG
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: LD_INT 0
30683: PUSH
30684: LD_INT 4
30686: NEG
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: PUSH
30692: LD_INT 1
30694: PUSH
30695: LD_INT 3
30697: NEG
30698: PUSH
30699: EMPTY
30700: LIST
30701: LIST
30702: PUSH
30703: LD_INT 1
30705: PUSH
30706: LD_INT 2
30708: NEG
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 0
30716: PUSH
30717: LD_INT 2
30719: NEG
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 1
30727: NEG
30728: PUSH
30729: LD_INT 3
30731: NEG
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: LD_INT 1
30739: NEG
30740: PUSH
30741: LD_INT 4
30743: NEG
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: LD_INT 2
30751: PUSH
30752: LD_INT 2
30754: NEG
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: PUSH
30760: LD_INT 2
30762: NEG
30763: PUSH
30764: LD_INT 4
30766: NEG
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: PUSH
30772: LD_INT 4
30774: PUSH
30775: LD_INT 0
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PUSH
30782: LD_INT 4
30784: PUSH
30785: LD_INT 1
30787: NEG
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 5
30795: PUSH
30796: LD_INT 0
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: PUSH
30803: LD_INT 5
30805: PUSH
30806: LD_INT 1
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: LD_INT 4
30815: PUSH
30816: LD_INT 1
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: PUSH
30823: LD_INT 3
30825: PUSH
30826: LD_INT 0
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: PUSH
30833: LD_INT 3
30835: PUSH
30836: LD_INT 1
30838: NEG
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: LD_INT 3
30846: PUSH
30847: LD_INT 2
30849: NEG
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PUSH
30855: LD_INT 5
30857: PUSH
30858: LD_INT 2
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 3
30867: PUSH
30868: LD_INT 3
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: PUSH
30875: LD_INT 3
30877: PUSH
30878: LD_INT 2
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 4
30887: PUSH
30888: LD_INT 3
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 4
30897: PUSH
30898: LD_INT 4
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: LD_INT 3
30907: PUSH
30908: LD_INT 4
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: LD_INT 2
30917: PUSH
30918: LD_INT 3
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: LD_INT 2
30927: PUSH
30928: LD_INT 2
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: PUSH
30935: LD_INT 4
30937: PUSH
30938: LD_INT 2
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: LD_INT 2
30947: PUSH
30948: LD_INT 4
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: PUSH
30955: LD_INT 0
30957: PUSH
30958: LD_INT 4
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: PUSH
30965: LD_INT 0
30967: PUSH
30968: LD_INT 3
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 1
30977: PUSH
30978: LD_INT 4
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 1
30987: PUSH
30988: LD_INT 5
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 0
30997: PUSH
30998: LD_INT 5
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 1
31007: NEG
31008: PUSH
31009: LD_INT 4
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: PUSH
31016: LD_INT 1
31018: NEG
31019: PUSH
31020: LD_INT 3
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: LD_INT 2
31029: PUSH
31030: LD_INT 5
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: PUSH
31037: LD_INT 2
31039: NEG
31040: PUSH
31041: LD_INT 3
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: LIST
31094: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
31095: LD_ADDR_VAR 0 34
31099: PUSH
31100: LD_INT 0
31102: PUSH
31103: LD_INT 4
31105: NEG
31106: PUSH
31107: EMPTY
31108: LIST
31109: LIST
31110: PUSH
31111: LD_INT 0
31113: PUSH
31114: LD_INT 5
31116: NEG
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: PUSH
31122: LD_INT 1
31124: PUSH
31125: LD_INT 4
31127: NEG
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 1
31135: PUSH
31136: LD_INT 3
31138: NEG
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: LD_INT 0
31146: PUSH
31147: LD_INT 3
31149: NEG
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: PUSH
31155: LD_INT 1
31157: NEG
31158: PUSH
31159: LD_INT 4
31161: NEG
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: LD_INT 1
31169: NEG
31170: PUSH
31171: LD_INT 5
31173: NEG
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: LD_INT 2
31181: PUSH
31182: LD_INT 3
31184: NEG
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 2
31192: NEG
31193: PUSH
31194: LD_INT 5
31196: NEG
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PUSH
31202: LD_INT 3
31204: PUSH
31205: LD_INT 0
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: LD_INT 3
31214: PUSH
31215: LD_INT 1
31217: NEG
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PUSH
31223: LD_INT 4
31225: PUSH
31226: LD_INT 0
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: PUSH
31233: LD_INT 4
31235: PUSH
31236: LD_INT 1
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PUSH
31243: LD_INT 3
31245: PUSH
31246: LD_INT 1
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PUSH
31253: LD_INT 2
31255: PUSH
31256: LD_INT 0
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: PUSH
31263: LD_INT 2
31265: PUSH
31266: LD_INT 1
31268: NEG
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: LD_INT 2
31276: PUSH
31277: LD_INT 2
31279: NEG
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PUSH
31285: LD_INT 4
31287: PUSH
31288: LD_INT 2
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: LD_INT 4
31297: PUSH
31298: LD_INT 4
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PUSH
31305: LD_INT 4
31307: PUSH
31308: LD_INT 3
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PUSH
31315: LD_INT 5
31317: PUSH
31318: LD_INT 4
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 5
31327: PUSH
31328: LD_INT 5
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: LD_INT 4
31337: PUSH
31338: LD_INT 5
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 3
31347: PUSH
31348: LD_INT 4
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: LD_INT 3
31357: PUSH
31358: LD_INT 3
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: LD_INT 5
31367: PUSH
31368: LD_INT 3
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: LD_INT 3
31377: PUSH
31378: LD_INT 5
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 0
31387: PUSH
31388: LD_INT 3
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 0
31397: PUSH
31398: LD_INT 2
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: LD_INT 1
31407: PUSH
31408: LD_INT 3
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 1
31417: PUSH
31418: LD_INT 4
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 0
31427: PUSH
31428: LD_INT 4
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 1
31437: NEG
31438: PUSH
31439: LD_INT 3
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: LD_INT 1
31448: NEG
31449: PUSH
31450: LD_INT 2
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: LD_INT 2
31459: PUSH
31460: LD_INT 4
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: LD_INT 2
31469: NEG
31470: PUSH
31471: LD_INT 2
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: LD_INT 4
31480: NEG
31481: PUSH
31482: LD_INT 0
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 4
31491: NEG
31492: PUSH
31493: LD_INT 1
31495: NEG
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: PUSH
31501: LD_INT 3
31503: NEG
31504: PUSH
31505: LD_INT 0
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: PUSH
31512: LD_INT 3
31514: NEG
31515: PUSH
31516: LD_INT 1
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 4
31525: NEG
31526: PUSH
31527: LD_INT 1
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 5
31536: NEG
31537: PUSH
31538: LD_INT 0
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: PUSH
31545: LD_INT 5
31547: NEG
31548: PUSH
31549: LD_INT 1
31551: NEG
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: LD_INT 5
31559: NEG
31560: PUSH
31561: LD_INT 2
31563: NEG
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: LD_INT 3
31571: NEG
31572: PUSH
31573: LD_INT 2
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: ST_TO_ADDR
// end ; end ;
31627: GO 31630
31629: POP
// case btype of b_depot , b_warehouse :
31630: LD_VAR 0 1
31634: PUSH
31635: LD_INT 0
31637: DOUBLE
31638: EQUAL
31639: IFTRUE 31649
31641: LD_INT 1
31643: DOUBLE
31644: EQUAL
31645: IFTRUE 31649
31647: GO 31850
31649: POP
// case nation of nation_american :
31650: LD_VAR 0 5
31654: PUSH
31655: LD_INT 1
31657: DOUBLE
31658: EQUAL
31659: IFTRUE 31663
31661: GO 31719
31663: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
31664: LD_ADDR_VAR 0 9
31668: PUSH
31669: LD_VAR 0 11
31673: PUSH
31674: LD_VAR 0 12
31678: PUSH
31679: LD_VAR 0 13
31683: PUSH
31684: LD_VAR 0 14
31688: PUSH
31689: LD_VAR 0 15
31693: PUSH
31694: LD_VAR 0 16
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: PUSH
31707: LD_VAR 0 4
31711: PUSH
31712: LD_INT 1
31714: PLUS
31715: ARRAY
31716: ST_TO_ADDR
31717: GO 31848
31719: LD_INT 2
31721: DOUBLE
31722: EQUAL
31723: IFTRUE 31727
31725: GO 31783
31727: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
31728: LD_ADDR_VAR 0 9
31732: PUSH
31733: LD_VAR 0 17
31737: PUSH
31738: LD_VAR 0 18
31742: PUSH
31743: LD_VAR 0 19
31747: PUSH
31748: LD_VAR 0 20
31752: PUSH
31753: LD_VAR 0 21
31757: PUSH
31758: LD_VAR 0 22
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: PUSH
31771: LD_VAR 0 4
31775: PUSH
31776: LD_INT 1
31778: PLUS
31779: ARRAY
31780: ST_TO_ADDR
31781: GO 31848
31783: LD_INT 3
31785: DOUBLE
31786: EQUAL
31787: IFTRUE 31791
31789: GO 31847
31791: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
31792: LD_ADDR_VAR 0 9
31796: PUSH
31797: LD_VAR 0 23
31801: PUSH
31802: LD_VAR 0 24
31806: PUSH
31807: LD_VAR 0 25
31811: PUSH
31812: LD_VAR 0 26
31816: PUSH
31817: LD_VAR 0 27
31821: PUSH
31822: LD_VAR 0 28
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: PUSH
31835: LD_VAR 0 4
31839: PUSH
31840: LD_INT 1
31842: PLUS
31843: ARRAY
31844: ST_TO_ADDR
31845: GO 31848
31847: POP
31848: GO 32403
31850: LD_INT 2
31852: DOUBLE
31853: EQUAL
31854: IFTRUE 31864
31856: LD_INT 3
31858: DOUBLE
31859: EQUAL
31860: IFTRUE 31864
31862: GO 31920
31864: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
31865: LD_ADDR_VAR 0 9
31869: PUSH
31870: LD_VAR 0 29
31874: PUSH
31875: LD_VAR 0 30
31879: PUSH
31880: LD_VAR 0 31
31884: PUSH
31885: LD_VAR 0 32
31889: PUSH
31890: LD_VAR 0 33
31894: PUSH
31895: LD_VAR 0 34
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: LIST
31904: LIST
31905: LIST
31906: LIST
31907: PUSH
31908: LD_VAR 0 4
31912: PUSH
31913: LD_INT 1
31915: PLUS
31916: ARRAY
31917: ST_TO_ADDR
31918: GO 32403
31920: LD_INT 16
31922: DOUBLE
31923: EQUAL
31924: IFTRUE 31982
31926: LD_INT 17
31928: DOUBLE
31929: EQUAL
31930: IFTRUE 31982
31932: LD_INT 18
31934: DOUBLE
31935: EQUAL
31936: IFTRUE 31982
31938: LD_INT 19
31940: DOUBLE
31941: EQUAL
31942: IFTRUE 31982
31944: LD_INT 22
31946: DOUBLE
31947: EQUAL
31948: IFTRUE 31982
31950: LD_INT 20
31952: DOUBLE
31953: EQUAL
31954: IFTRUE 31982
31956: LD_INT 21
31958: DOUBLE
31959: EQUAL
31960: IFTRUE 31982
31962: LD_INT 23
31964: DOUBLE
31965: EQUAL
31966: IFTRUE 31982
31968: LD_INT 24
31970: DOUBLE
31971: EQUAL
31972: IFTRUE 31982
31974: LD_INT 25
31976: DOUBLE
31977: EQUAL
31978: IFTRUE 31982
31980: GO 32038
31982: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
31983: LD_ADDR_VAR 0 9
31987: PUSH
31988: LD_VAR 0 35
31992: PUSH
31993: LD_VAR 0 36
31997: PUSH
31998: LD_VAR 0 37
32002: PUSH
32003: LD_VAR 0 38
32007: PUSH
32008: LD_VAR 0 39
32012: PUSH
32013: LD_VAR 0 40
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: PUSH
32026: LD_VAR 0 4
32030: PUSH
32031: LD_INT 1
32033: PLUS
32034: ARRAY
32035: ST_TO_ADDR
32036: GO 32403
32038: LD_INT 6
32040: DOUBLE
32041: EQUAL
32042: IFTRUE 32094
32044: LD_INT 7
32046: DOUBLE
32047: EQUAL
32048: IFTRUE 32094
32050: LD_INT 8
32052: DOUBLE
32053: EQUAL
32054: IFTRUE 32094
32056: LD_INT 13
32058: DOUBLE
32059: EQUAL
32060: IFTRUE 32094
32062: LD_INT 12
32064: DOUBLE
32065: EQUAL
32066: IFTRUE 32094
32068: LD_INT 15
32070: DOUBLE
32071: EQUAL
32072: IFTRUE 32094
32074: LD_INT 11
32076: DOUBLE
32077: EQUAL
32078: IFTRUE 32094
32080: LD_INT 14
32082: DOUBLE
32083: EQUAL
32084: IFTRUE 32094
32086: LD_INT 10
32088: DOUBLE
32089: EQUAL
32090: IFTRUE 32094
32092: GO 32150
32094: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
32095: LD_ADDR_VAR 0 9
32099: PUSH
32100: LD_VAR 0 41
32104: PUSH
32105: LD_VAR 0 42
32109: PUSH
32110: LD_VAR 0 43
32114: PUSH
32115: LD_VAR 0 44
32119: PUSH
32120: LD_VAR 0 45
32124: PUSH
32125: LD_VAR 0 46
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: PUSH
32138: LD_VAR 0 4
32142: PUSH
32143: LD_INT 1
32145: PLUS
32146: ARRAY
32147: ST_TO_ADDR
32148: GO 32403
32150: LD_INT 36
32152: DOUBLE
32153: EQUAL
32154: IFTRUE 32158
32156: GO 32214
32158: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
32159: LD_ADDR_VAR 0 9
32163: PUSH
32164: LD_VAR 0 47
32168: PUSH
32169: LD_VAR 0 48
32173: PUSH
32174: LD_VAR 0 49
32178: PUSH
32179: LD_VAR 0 50
32183: PUSH
32184: LD_VAR 0 51
32188: PUSH
32189: LD_VAR 0 52
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: PUSH
32202: LD_VAR 0 4
32206: PUSH
32207: LD_INT 1
32209: PLUS
32210: ARRAY
32211: ST_TO_ADDR
32212: GO 32403
32214: LD_INT 4
32216: DOUBLE
32217: EQUAL
32218: IFTRUE 32240
32220: LD_INT 5
32222: DOUBLE
32223: EQUAL
32224: IFTRUE 32240
32226: LD_INT 34
32228: DOUBLE
32229: EQUAL
32230: IFTRUE 32240
32232: LD_INT 37
32234: DOUBLE
32235: EQUAL
32236: IFTRUE 32240
32238: GO 32296
32240: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
32241: LD_ADDR_VAR 0 9
32245: PUSH
32246: LD_VAR 0 53
32250: PUSH
32251: LD_VAR 0 54
32255: PUSH
32256: LD_VAR 0 55
32260: PUSH
32261: LD_VAR 0 56
32265: PUSH
32266: LD_VAR 0 57
32270: PUSH
32271: LD_VAR 0 58
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: PUSH
32284: LD_VAR 0 4
32288: PUSH
32289: LD_INT 1
32291: PLUS
32292: ARRAY
32293: ST_TO_ADDR
32294: GO 32403
32296: LD_INT 31
32298: DOUBLE
32299: EQUAL
32300: IFTRUE 32346
32302: LD_INT 32
32304: DOUBLE
32305: EQUAL
32306: IFTRUE 32346
32308: LD_INT 33
32310: DOUBLE
32311: EQUAL
32312: IFTRUE 32346
32314: LD_INT 27
32316: DOUBLE
32317: EQUAL
32318: IFTRUE 32346
32320: LD_INT 26
32322: DOUBLE
32323: EQUAL
32324: IFTRUE 32346
32326: LD_INT 28
32328: DOUBLE
32329: EQUAL
32330: IFTRUE 32346
32332: LD_INT 29
32334: DOUBLE
32335: EQUAL
32336: IFTRUE 32346
32338: LD_INT 30
32340: DOUBLE
32341: EQUAL
32342: IFTRUE 32346
32344: GO 32402
32346: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
32347: LD_ADDR_VAR 0 9
32351: PUSH
32352: LD_VAR 0 59
32356: PUSH
32357: LD_VAR 0 60
32361: PUSH
32362: LD_VAR 0 61
32366: PUSH
32367: LD_VAR 0 62
32371: PUSH
32372: LD_VAR 0 63
32376: PUSH
32377: LD_VAR 0 64
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: PUSH
32390: LD_VAR 0 4
32394: PUSH
32395: LD_INT 1
32397: PLUS
32398: ARRAY
32399: ST_TO_ADDR
32400: GO 32403
32402: POP
// temp_list2 = [ ] ;
32403: LD_ADDR_VAR 0 10
32407: PUSH
32408: EMPTY
32409: ST_TO_ADDR
// for i in temp_list do
32410: LD_ADDR_VAR 0 8
32414: PUSH
32415: LD_VAR 0 9
32419: PUSH
32420: FOR_IN
32421: IFFALSE 32473
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
32423: LD_ADDR_VAR 0 10
32427: PUSH
32428: LD_VAR 0 10
32432: PUSH
32433: LD_VAR 0 8
32437: PUSH
32438: LD_INT 1
32440: ARRAY
32441: PUSH
32442: LD_VAR 0 2
32446: PLUS
32447: PUSH
32448: LD_VAR 0 8
32452: PUSH
32453: LD_INT 2
32455: ARRAY
32456: PUSH
32457: LD_VAR 0 3
32461: PLUS
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: EMPTY
32468: LIST
32469: ADD
32470: ST_TO_ADDR
32471: GO 32420
32473: POP
32474: POP
// result = temp_list2 ;
32475: LD_ADDR_VAR 0 7
32479: PUSH
32480: LD_VAR 0 10
32484: ST_TO_ADDR
// end ;
32485: LD_VAR 0 7
32489: RET
// export function EnemyInRange ( unit , dist ) ; begin
32490: LD_INT 0
32492: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
32493: LD_ADDR_VAR 0 3
32497: PUSH
32498: LD_VAR 0 1
32502: PPUSH
32503: CALL_OW 255
32507: PPUSH
32508: LD_VAR 0 1
32512: PPUSH
32513: CALL_OW 250
32517: PPUSH
32518: LD_VAR 0 1
32522: PPUSH
32523: CALL_OW 251
32527: PPUSH
32528: LD_VAR 0 2
32532: PPUSH
32533: CALL 5863 0 4
32537: PUSH
32538: LD_INT 4
32540: ARRAY
32541: ST_TO_ADDR
// end ;
32542: LD_VAR 0 3
32546: RET
// export function PlayerSeeMe ( unit ) ; begin
32547: LD_INT 0
32549: PPUSH
// result := See ( your_side , unit ) ;
32550: LD_ADDR_VAR 0 2
32554: PUSH
32555: LD_OWVAR 2
32559: PPUSH
32560: LD_VAR 0 1
32564: PPUSH
32565: CALL_OW 292
32569: ST_TO_ADDR
// end ;
32570: LD_VAR 0 2
32574: RET
// export function ReverseDir ( unit ) ; begin
32575: LD_INT 0
32577: PPUSH
// if not unit then
32578: LD_VAR 0 1
32582: NOT
32583: IFFALSE 32587
// exit ;
32585: GO 32610
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
32587: LD_ADDR_VAR 0 2
32591: PUSH
32592: LD_VAR 0 1
32596: PPUSH
32597: CALL_OW 254
32601: PUSH
32602: LD_INT 3
32604: PLUS
32605: PUSH
32606: LD_INT 6
32608: MOD
32609: ST_TO_ADDR
// end ;
32610: LD_VAR 0 2
32614: RET
// export function ReverseArray ( array ) ; var i ; begin
32615: LD_INT 0
32617: PPUSH
32618: PPUSH
// if not array then
32619: LD_VAR 0 1
32623: NOT
32624: IFFALSE 32628
// exit ;
32626: GO 32683
// result := [ ] ;
32628: LD_ADDR_VAR 0 2
32632: PUSH
32633: EMPTY
32634: ST_TO_ADDR
// for i := array downto 1 do
32635: LD_ADDR_VAR 0 3
32639: PUSH
32640: DOUBLE
32641: LD_VAR 0 1
32645: INC
32646: ST_TO_ADDR
32647: LD_INT 1
32649: PUSH
32650: FOR_DOWNTO
32651: IFFALSE 32681
// result := Join ( result , array [ i ] ) ;
32653: LD_ADDR_VAR 0 2
32657: PUSH
32658: LD_VAR 0 2
32662: PPUSH
32663: LD_VAR 0 1
32667: PUSH
32668: LD_VAR 0 3
32672: ARRAY
32673: PPUSH
32674: CALL 37326 0 2
32678: ST_TO_ADDR
32679: GO 32650
32681: POP
32682: POP
// end ;
32683: LD_VAR 0 2
32687: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
32688: LD_INT 0
32690: PPUSH
32691: PPUSH
32692: PPUSH
32693: PPUSH
32694: PPUSH
32695: PPUSH
// if not unit or not hexes then
32696: LD_VAR 0 1
32700: NOT
32701: PUSH
32702: LD_VAR 0 2
32706: NOT
32707: OR
32708: IFFALSE 32712
// exit ;
32710: GO 32835
// dist := 9999 ;
32712: LD_ADDR_VAR 0 5
32716: PUSH
32717: LD_INT 9999
32719: ST_TO_ADDR
// for i = 1 to hexes do
32720: LD_ADDR_VAR 0 4
32724: PUSH
32725: DOUBLE
32726: LD_INT 1
32728: DEC
32729: ST_TO_ADDR
32730: LD_VAR 0 2
32734: PUSH
32735: FOR_TO
32736: IFFALSE 32823
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32738: LD_ADDR_VAR 0 6
32742: PUSH
32743: LD_VAR 0 1
32747: PPUSH
32748: LD_VAR 0 2
32752: PUSH
32753: LD_VAR 0 4
32757: ARRAY
32758: PUSH
32759: LD_INT 1
32761: ARRAY
32762: PPUSH
32763: LD_VAR 0 2
32767: PUSH
32768: LD_VAR 0 4
32772: ARRAY
32773: PUSH
32774: LD_INT 2
32776: ARRAY
32777: PPUSH
32778: CALL_OW 297
32782: ST_TO_ADDR
// if tdist < dist then
32783: LD_VAR 0 6
32787: PUSH
32788: LD_VAR 0 5
32792: LESS
32793: IFFALSE 32821
// begin hex := hexes [ i ] ;
32795: LD_ADDR_VAR 0 8
32799: PUSH
32800: LD_VAR 0 2
32804: PUSH
32805: LD_VAR 0 4
32809: ARRAY
32810: ST_TO_ADDR
// dist := tdist ;
32811: LD_ADDR_VAR 0 5
32815: PUSH
32816: LD_VAR 0 6
32820: ST_TO_ADDR
// end ; end ;
32821: GO 32735
32823: POP
32824: POP
// result := hex ;
32825: LD_ADDR_VAR 0 3
32829: PUSH
32830: LD_VAR 0 8
32834: ST_TO_ADDR
// end ;
32835: LD_VAR 0 3
32839: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
32840: LD_INT 0
32842: PPUSH
32843: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
32844: LD_VAR 0 1
32848: NOT
32849: PUSH
32850: LD_VAR 0 1
32854: PUSH
32855: LD_INT 21
32857: PUSH
32858: LD_INT 2
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: PUSH
32865: LD_INT 23
32867: PUSH
32868: LD_INT 2
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PPUSH
32879: CALL_OW 69
32883: IN
32884: NOT
32885: OR
32886: IFFALSE 32890
// exit ;
32888: GO 32937
// for i = 1 to 3 do
32890: LD_ADDR_VAR 0 3
32894: PUSH
32895: DOUBLE
32896: LD_INT 1
32898: DEC
32899: ST_TO_ADDR
32900: LD_INT 3
32902: PUSH
32903: FOR_TO
32904: IFFALSE 32935
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
32906: LD_VAR 0 1
32910: PPUSH
32911: CALL_OW 250
32915: PPUSH
32916: LD_VAR 0 1
32920: PPUSH
32921: CALL_OW 251
32925: PPUSH
32926: LD_INT 1
32928: PPUSH
32929: CALL_OW 453
32933: GO 32903
32935: POP
32936: POP
// end ;
32937: LD_VAR 0 2
32941: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
32942: LD_INT 0
32944: PPUSH
32945: PPUSH
32946: PPUSH
32947: PPUSH
32948: PPUSH
32949: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
32950: LD_VAR 0 1
32954: NOT
32955: PUSH
32956: LD_VAR 0 2
32960: NOT
32961: OR
32962: PUSH
32963: LD_VAR 0 1
32967: PPUSH
32968: CALL_OW 314
32972: OR
32973: IFFALSE 32977
// exit ;
32975: GO 33444
// if GetLives ( i ) < 250 then
32977: LD_VAR 0 4
32981: PPUSH
32982: CALL_OW 256
32986: PUSH
32987: LD_INT 250
32989: LESS
32990: IFFALSE 33003
// begin ComAutodestruct ( i ) ;
32992: LD_VAR 0 4
32996: PPUSH
32997: CALL 32840 0 1
// exit ;
33001: GO 33444
// end ; x := GetX ( enemy_unit ) ;
33003: LD_ADDR_VAR 0 7
33007: PUSH
33008: LD_VAR 0 2
33012: PPUSH
33013: CALL_OW 250
33017: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
33018: LD_ADDR_VAR 0 8
33022: PUSH
33023: LD_VAR 0 2
33027: PPUSH
33028: CALL_OW 251
33032: ST_TO_ADDR
// if not x or not y then
33033: LD_VAR 0 7
33037: NOT
33038: PUSH
33039: LD_VAR 0 8
33043: NOT
33044: OR
33045: IFFALSE 33049
// exit ;
33047: GO 33444
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
33049: LD_ADDR_VAR 0 6
33053: PUSH
33054: LD_VAR 0 7
33058: PPUSH
33059: LD_INT 0
33061: PPUSH
33062: LD_INT 4
33064: PPUSH
33065: CALL_OW 272
33069: PUSH
33070: LD_VAR 0 8
33074: PPUSH
33075: LD_INT 0
33077: PPUSH
33078: LD_INT 4
33080: PPUSH
33081: CALL_OW 273
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PUSH
33090: LD_VAR 0 7
33094: PPUSH
33095: LD_INT 1
33097: PPUSH
33098: LD_INT 4
33100: PPUSH
33101: CALL_OW 272
33105: PUSH
33106: LD_VAR 0 8
33110: PPUSH
33111: LD_INT 1
33113: PPUSH
33114: LD_INT 4
33116: PPUSH
33117: CALL_OW 273
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PUSH
33126: LD_VAR 0 7
33130: PPUSH
33131: LD_INT 2
33133: PPUSH
33134: LD_INT 4
33136: PPUSH
33137: CALL_OW 272
33141: PUSH
33142: LD_VAR 0 8
33146: PPUSH
33147: LD_INT 2
33149: PPUSH
33150: LD_INT 4
33152: PPUSH
33153: CALL_OW 273
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_VAR 0 7
33166: PPUSH
33167: LD_INT 3
33169: PPUSH
33170: LD_INT 4
33172: PPUSH
33173: CALL_OW 272
33177: PUSH
33178: LD_VAR 0 8
33182: PPUSH
33183: LD_INT 3
33185: PPUSH
33186: LD_INT 4
33188: PPUSH
33189: CALL_OW 273
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: LD_VAR 0 7
33202: PPUSH
33203: LD_INT 4
33205: PPUSH
33206: LD_INT 4
33208: PPUSH
33209: CALL_OW 272
33213: PUSH
33214: LD_VAR 0 8
33218: PPUSH
33219: LD_INT 4
33221: PPUSH
33222: LD_INT 4
33224: PPUSH
33225: CALL_OW 273
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: PUSH
33234: LD_VAR 0 7
33238: PPUSH
33239: LD_INT 5
33241: PPUSH
33242: LD_INT 4
33244: PPUSH
33245: CALL_OW 272
33249: PUSH
33250: LD_VAR 0 8
33254: PPUSH
33255: LD_INT 5
33257: PPUSH
33258: LD_INT 4
33260: PPUSH
33261: CALL_OW 273
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: ST_TO_ADDR
// for i = tmp downto 1 do
33278: LD_ADDR_VAR 0 4
33282: PUSH
33283: DOUBLE
33284: LD_VAR 0 6
33288: INC
33289: ST_TO_ADDR
33290: LD_INT 1
33292: PUSH
33293: FOR_DOWNTO
33294: IFFALSE 33395
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
33296: LD_VAR 0 6
33300: PUSH
33301: LD_VAR 0 4
33305: ARRAY
33306: PUSH
33307: LD_INT 1
33309: ARRAY
33310: PPUSH
33311: LD_VAR 0 6
33315: PUSH
33316: LD_VAR 0 4
33320: ARRAY
33321: PUSH
33322: LD_INT 2
33324: ARRAY
33325: PPUSH
33326: CALL_OW 488
33330: NOT
33331: PUSH
33332: LD_VAR 0 6
33336: PUSH
33337: LD_VAR 0 4
33341: ARRAY
33342: PUSH
33343: LD_INT 1
33345: ARRAY
33346: PPUSH
33347: LD_VAR 0 6
33351: PUSH
33352: LD_VAR 0 4
33356: ARRAY
33357: PUSH
33358: LD_INT 2
33360: ARRAY
33361: PPUSH
33362: CALL_OW 428
33366: PUSH
33367: LD_INT 0
33369: NONEQUAL
33370: OR
33371: IFFALSE 33393
// tmp := Delete ( tmp , i ) ;
33373: LD_ADDR_VAR 0 6
33377: PUSH
33378: LD_VAR 0 6
33382: PPUSH
33383: LD_VAR 0 4
33387: PPUSH
33388: CALL_OW 3
33392: ST_TO_ADDR
33393: GO 33293
33395: POP
33396: POP
// j := GetClosestHex ( unit , tmp ) ;
33397: LD_ADDR_VAR 0 5
33401: PUSH
33402: LD_VAR 0 1
33406: PPUSH
33407: LD_VAR 0 6
33411: PPUSH
33412: CALL 32688 0 2
33416: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
33417: LD_VAR 0 1
33421: PPUSH
33422: LD_VAR 0 5
33426: PUSH
33427: LD_INT 1
33429: ARRAY
33430: PPUSH
33431: LD_VAR 0 5
33435: PUSH
33436: LD_INT 2
33438: ARRAY
33439: PPUSH
33440: CALL_OW 111
// end ;
33444: LD_VAR 0 3
33448: RET
// export function PrepareApemanSoldier ( ) ; begin
33449: LD_INT 0
33451: PPUSH
// uc_nation := 0 ;
33452: LD_ADDR_OWVAR 21
33456: PUSH
33457: LD_INT 0
33459: ST_TO_ADDR
// hc_sex := sex_male ;
33460: LD_ADDR_OWVAR 27
33464: PUSH
33465: LD_INT 1
33467: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
33468: LD_ADDR_OWVAR 28
33472: PUSH
33473: LD_INT 15
33475: ST_TO_ADDR
// hc_gallery :=  ;
33476: LD_ADDR_OWVAR 33
33480: PUSH
33481: LD_STRING 
33483: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
33484: LD_ADDR_OWVAR 31
33488: PUSH
33489: LD_INT 0
33491: PPUSH
33492: LD_INT 3
33494: PPUSH
33495: CALL_OW 12
33499: PUSH
33500: LD_INT 0
33502: PPUSH
33503: LD_INT 3
33505: PPUSH
33506: CALL_OW 12
33510: PUSH
33511: LD_INT 0
33513: PUSH
33514: LD_INT 0
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: ST_TO_ADDR
// end ;
33523: LD_VAR 0 1
33527: RET
// export function PrepareApemanEngineer ( ) ; begin
33528: LD_INT 0
33530: PPUSH
// uc_nation := 0 ;
33531: LD_ADDR_OWVAR 21
33535: PUSH
33536: LD_INT 0
33538: ST_TO_ADDR
// hc_sex := sex_male ;
33539: LD_ADDR_OWVAR 27
33543: PUSH
33544: LD_INT 1
33546: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
33547: LD_ADDR_OWVAR 28
33551: PUSH
33552: LD_INT 16
33554: ST_TO_ADDR
// hc_gallery :=  ;
33555: LD_ADDR_OWVAR 33
33559: PUSH
33560: LD_STRING 
33562: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
33563: LD_ADDR_OWVAR 31
33567: PUSH
33568: LD_INT 0
33570: PPUSH
33571: LD_INT 3
33573: PPUSH
33574: CALL_OW 12
33578: PUSH
33579: LD_INT 0
33581: PPUSH
33582: LD_INT 3
33584: PPUSH
33585: CALL_OW 12
33589: PUSH
33590: LD_INT 0
33592: PUSH
33593: LD_INT 0
33595: PUSH
33596: EMPTY
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: ST_TO_ADDR
// end ;
33602: LD_VAR 0 1
33606: RET
// export function PrepareApeman ( agressivity ) ; begin
33607: LD_INT 0
33609: PPUSH
// uc_side := 0 ;
33610: LD_ADDR_OWVAR 20
33614: PUSH
33615: LD_INT 0
33617: ST_TO_ADDR
// uc_nation := 0 ;
33618: LD_ADDR_OWVAR 21
33622: PUSH
33623: LD_INT 0
33625: ST_TO_ADDR
// hc_sex := sex_male ;
33626: LD_ADDR_OWVAR 27
33630: PUSH
33631: LD_INT 1
33633: ST_TO_ADDR
// hc_class := class_apeman ;
33634: LD_ADDR_OWVAR 28
33638: PUSH
33639: LD_INT 12
33641: ST_TO_ADDR
// hc_gallery :=  ;
33642: LD_ADDR_OWVAR 33
33646: PUSH
33647: LD_STRING 
33649: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
33650: LD_ADDR_OWVAR 35
33654: PUSH
33655: LD_VAR 0 1
33659: NEG
33660: PPUSH
33661: LD_VAR 0 1
33665: PPUSH
33666: CALL_OW 12
33670: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
33671: LD_ADDR_OWVAR 31
33675: PUSH
33676: LD_INT 0
33678: PPUSH
33679: LD_INT 3
33681: PPUSH
33682: CALL_OW 12
33686: PUSH
33687: LD_INT 0
33689: PPUSH
33690: LD_INT 3
33692: PPUSH
33693: CALL_OW 12
33697: PUSH
33698: LD_INT 0
33700: PUSH
33701: LD_INT 0
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: ST_TO_ADDR
// end ;
33710: LD_VAR 0 2
33714: RET
// export function PrepareTiger ( agressivity ) ; begin
33715: LD_INT 0
33717: PPUSH
// uc_side := 0 ;
33718: LD_ADDR_OWVAR 20
33722: PUSH
33723: LD_INT 0
33725: ST_TO_ADDR
// uc_nation := 0 ;
33726: LD_ADDR_OWVAR 21
33730: PUSH
33731: LD_INT 0
33733: ST_TO_ADDR
// hc_class := class_tiger ;
33734: LD_ADDR_OWVAR 28
33738: PUSH
33739: LD_INT 14
33741: ST_TO_ADDR
// hc_gallery :=  ;
33742: LD_ADDR_OWVAR 33
33746: PUSH
33747: LD_STRING 
33749: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
33750: LD_ADDR_OWVAR 35
33754: PUSH
33755: LD_VAR 0 1
33759: NEG
33760: PPUSH
33761: LD_VAR 0 1
33765: PPUSH
33766: CALL_OW 12
33770: ST_TO_ADDR
// end ;
33771: LD_VAR 0 2
33775: RET
// export function PrepareEnchidna ( ) ; begin
33776: LD_INT 0
33778: PPUSH
// uc_side := 0 ;
33779: LD_ADDR_OWVAR 20
33783: PUSH
33784: LD_INT 0
33786: ST_TO_ADDR
// uc_nation := 0 ;
33787: LD_ADDR_OWVAR 21
33791: PUSH
33792: LD_INT 0
33794: ST_TO_ADDR
// hc_class := class_baggie ;
33795: LD_ADDR_OWVAR 28
33799: PUSH
33800: LD_INT 13
33802: ST_TO_ADDR
// hc_gallery :=  ;
33803: LD_ADDR_OWVAR 33
33807: PUSH
33808: LD_STRING 
33810: ST_TO_ADDR
// end ;
33811: LD_VAR 0 1
33815: RET
// export function PrepareFrog ( ) ; begin
33816: LD_INT 0
33818: PPUSH
// uc_side := 0 ;
33819: LD_ADDR_OWVAR 20
33823: PUSH
33824: LD_INT 0
33826: ST_TO_ADDR
// uc_nation := 0 ;
33827: LD_ADDR_OWVAR 21
33831: PUSH
33832: LD_INT 0
33834: ST_TO_ADDR
// hc_class := class_frog ;
33835: LD_ADDR_OWVAR 28
33839: PUSH
33840: LD_INT 19
33842: ST_TO_ADDR
// hc_gallery :=  ;
33843: LD_ADDR_OWVAR 33
33847: PUSH
33848: LD_STRING 
33850: ST_TO_ADDR
// end ;
33851: LD_VAR 0 1
33855: RET
// export function PrepareFish ( ) ; begin
33856: LD_INT 0
33858: PPUSH
// uc_side := 0 ;
33859: LD_ADDR_OWVAR 20
33863: PUSH
33864: LD_INT 0
33866: ST_TO_ADDR
// uc_nation := 0 ;
33867: LD_ADDR_OWVAR 21
33871: PUSH
33872: LD_INT 0
33874: ST_TO_ADDR
// hc_class := class_fish ;
33875: LD_ADDR_OWVAR 28
33879: PUSH
33880: LD_INT 20
33882: ST_TO_ADDR
// hc_gallery :=  ;
33883: LD_ADDR_OWVAR 33
33887: PUSH
33888: LD_STRING 
33890: ST_TO_ADDR
// end ;
33891: LD_VAR 0 1
33895: RET
// export function PrepareBird ( ) ; begin
33896: LD_INT 0
33898: PPUSH
// uc_side := 0 ;
33899: LD_ADDR_OWVAR 20
33903: PUSH
33904: LD_INT 0
33906: ST_TO_ADDR
// uc_nation := 0 ;
33907: LD_ADDR_OWVAR 21
33911: PUSH
33912: LD_INT 0
33914: ST_TO_ADDR
// hc_class := class_phororhacos ;
33915: LD_ADDR_OWVAR 28
33919: PUSH
33920: LD_INT 18
33922: ST_TO_ADDR
// hc_gallery :=  ;
33923: LD_ADDR_OWVAR 33
33927: PUSH
33928: LD_STRING 
33930: ST_TO_ADDR
// end ;
33931: LD_VAR 0 1
33935: RET
// export function PrepareHorse ( ) ; begin
33936: LD_INT 0
33938: PPUSH
// uc_side := 0 ;
33939: LD_ADDR_OWVAR 20
33943: PUSH
33944: LD_INT 0
33946: ST_TO_ADDR
// uc_nation := 0 ;
33947: LD_ADDR_OWVAR 21
33951: PUSH
33952: LD_INT 0
33954: ST_TO_ADDR
// hc_class := class_horse ;
33955: LD_ADDR_OWVAR 28
33959: PUSH
33960: LD_INT 21
33962: ST_TO_ADDR
// hc_gallery :=  ;
33963: LD_ADDR_OWVAR 33
33967: PUSH
33968: LD_STRING 
33970: ST_TO_ADDR
// end ;
33971: LD_VAR 0 1
33975: RET
// export function PrepareMastodont ( ) ; begin
33976: LD_INT 0
33978: PPUSH
// uc_side := 0 ;
33979: LD_ADDR_OWVAR 20
33983: PUSH
33984: LD_INT 0
33986: ST_TO_ADDR
// uc_nation := 0 ;
33987: LD_ADDR_OWVAR 21
33991: PUSH
33992: LD_INT 0
33994: ST_TO_ADDR
// vc_chassis := class_mastodont ;
33995: LD_ADDR_OWVAR 37
33999: PUSH
34000: LD_INT 31
34002: ST_TO_ADDR
// vc_control := control_rider ;
34003: LD_ADDR_OWVAR 38
34007: PUSH
34008: LD_INT 4
34010: ST_TO_ADDR
// end ;
34011: LD_VAR 0 1
34015: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
34016: LD_INT 0
34018: PPUSH
34019: PPUSH
34020: PPUSH
// uc_side = 0 ;
34021: LD_ADDR_OWVAR 20
34025: PUSH
34026: LD_INT 0
34028: ST_TO_ADDR
// uc_nation = 0 ;
34029: LD_ADDR_OWVAR 21
34033: PUSH
34034: LD_INT 0
34036: ST_TO_ADDR
// InitHc_All ( ) ;
34037: CALL_OW 584
// InitVc ;
34041: CALL_OW 20
// if mastodonts then
34045: LD_VAR 0 6
34049: IFFALSE 34116
// for i = 1 to mastodonts do
34051: LD_ADDR_VAR 0 11
34055: PUSH
34056: DOUBLE
34057: LD_INT 1
34059: DEC
34060: ST_TO_ADDR
34061: LD_VAR 0 6
34065: PUSH
34066: FOR_TO
34067: IFFALSE 34114
// begin vc_chassis := 31 ;
34069: LD_ADDR_OWVAR 37
34073: PUSH
34074: LD_INT 31
34076: ST_TO_ADDR
// vc_control := control_rider ;
34077: LD_ADDR_OWVAR 38
34081: PUSH
34082: LD_INT 4
34084: ST_TO_ADDR
// animal := CreateVehicle ;
34085: LD_ADDR_VAR 0 12
34089: PUSH
34090: CALL_OW 45
34094: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34095: LD_VAR 0 12
34099: PPUSH
34100: LD_VAR 0 8
34104: PPUSH
34105: LD_INT 0
34107: PPUSH
34108: CALL 36244 0 3
// end ;
34112: GO 34066
34114: POP
34115: POP
// if horses then
34116: LD_VAR 0 5
34120: IFFALSE 34187
// for i = 1 to horses do
34122: LD_ADDR_VAR 0 11
34126: PUSH
34127: DOUBLE
34128: LD_INT 1
34130: DEC
34131: ST_TO_ADDR
34132: LD_VAR 0 5
34136: PUSH
34137: FOR_TO
34138: IFFALSE 34185
// begin hc_class := 21 ;
34140: LD_ADDR_OWVAR 28
34144: PUSH
34145: LD_INT 21
34147: ST_TO_ADDR
// hc_gallery :=  ;
34148: LD_ADDR_OWVAR 33
34152: PUSH
34153: LD_STRING 
34155: ST_TO_ADDR
// animal := CreateHuman ;
34156: LD_ADDR_VAR 0 12
34160: PUSH
34161: CALL_OW 44
34165: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34166: LD_VAR 0 12
34170: PPUSH
34171: LD_VAR 0 8
34175: PPUSH
34176: LD_INT 0
34178: PPUSH
34179: CALL 36244 0 3
// end ;
34183: GO 34137
34185: POP
34186: POP
// if birds then
34187: LD_VAR 0 1
34191: IFFALSE 34258
// for i = 1 to birds do
34193: LD_ADDR_VAR 0 11
34197: PUSH
34198: DOUBLE
34199: LD_INT 1
34201: DEC
34202: ST_TO_ADDR
34203: LD_VAR 0 1
34207: PUSH
34208: FOR_TO
34209: IFFALSE 34256
// begin hc_class := 18 ;
34211: LD_ADDR_OWVAR 28
34215: PUSH
34216: LD_INT 18
34218: ST_TO_ADDR
// hc_gallery =  ;
34219: LD_ADDR_OWVAR 33
34223: PUSH
34224: LD_STRING 
34226: ST_TO_ADDR
// animal := CreateHuman ;
34227: LD_ADDR_VAR 0 12
34231: PUSH
34232: CALL_OW 44
34236: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34237: LD_VAR 0 12
34241: PPUSH
34242: LD_VAR 0 8
34246: PPUSH
34247: LD_INT 0
34249: PPUSH
34250: CALL 36244 0 3
// end ;
34254: GO 34208
34256: POP
34257: POP
// if tigers then
34258: LD_VAR 0 2
34262: IFFALSE 34346
// for i = 1 to tigers do
34264: LD_ADDR_VAR 0 11
34268: PUSH
34269: DOUBLE
34270: LD_INT 1
34272: DEC
34273: ST_TO_ADDR
34274: LD_VAR 0 2
34278: PUSH
34279: FOR_TO
34280: IFFALSE 34344
// begin hc_class = class_tiger ;
34282: LD_ADDR_OWVAR 28
34286: PUSH
34287: LD_INT 14
34289: ST_TO_ADDR
// hc_gallery =  ;
34290: LD_ADDR_OWVAR 33
34294: PUSH
34295: LD_STRING 
34297: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
34298: LD_ADDR_OWVAR 35
34302: PUSH
34303: LD_INT 7
34305: NEG
34306: PPUSH
34307: LD_INT 7
34309: PPUSH
34310: CALL_OW 12
34314: ST_TO_ADDR
// animal := CreateHuman ;
34315: LD_ADDR_VAR 0 12
34319: PUSH
34320: CALL_OW 44
34324: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34325: LD_VAR 0 12
34329: PPUSH
34330: LD_VAR 0 8
34334: PPUSH
34335: LD_INT 0
34337: PPUSH
34338: CALL 36244 0 3
// end ;
34342: GO 34279
34344: POP
34345: POP
// if apemans then
34346: LD_VAR 0 3
34350: IFFALSE 34473
// for i = 1 to apemans do
34352: LD_ADDR_VAR 0 11
34356: PUSH
34357: DOUBLE
34358: LD_INT 1
34360: DEC
34361: ST_TO_ADDR
34362: LD_VAR 0 3
34366: PUSH
34367: FOR_TO
34368: IFFALSE 34471
// begin hc_class = class_apeman ;
34370: LD_ADDR_OWVAR 28
34374: PUSH
34375: LD_INT 12
34377: ST_TO_ADDR
// hc_gallery =  ;
34378: LD_ADDR_OWVAR 33
34382: PUSH
34383: LD_STRING 
34385: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
34386: LD_ADDR_OWVAR 35
34390: PUSH
34391: LD_INT 2
34393: NEG
34394: PPUSH
34395: LD_INT 2
34397: PPUSH
34398: CALL_OW 12
34402: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
34403: LD_ADDR_OWVAR 31
34407: PUSH
34408: LD_INT 1
34410: PPUSH
34411: LD_INT 3
34413: PPUSH
34414: CALL_OW 12
34418: PUSH
34419: LD_INT 1
34421: PPUSH
34422: LD_INT 3
34424: PPUSH
34425: CALL_OW 12
34429: PUSH
34430: LD_INT 0
34432: PUSH
34433: LD_INT 0
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: ST_TO_ADDR
// animal := CreateHuman ;
34442: LD_ADDR_VAR 0 12
34446: PUSH
34447: CALL_OW 44
34451: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34452: LD_VAR 0 12
34456: PPUSH
34457: LD_VAR 0 8
34461: PPUSH
34462: LD_INT 0
34464: PPUSH
34465: CALL 36244 0 3
// end ;
34469: GO 34367
34471: POP
34472: POP
// if enchidnas then
34473: LD_VAR 0 4
34477: IFFALSE 34544
// for i = 1 to enchidnas do
34479: LD_ADDR_VAR 0 11
34483: PUSH
34484: DOUBLE
34485: LD_INT 1
34487: DEC
34488: ST_TO_ADDR
34489: LD_VAR 0 4
34493: PUSH
34494: FOR_TO
34495: IFFALSE 34542
// begin hc_class = 13 ;
34497: LD_ADDR_OWVAR 28
34501: PUSH
34502: LD_INT 13
34504: ST_TO_ADDR
// hc_gallery =  ;
34505: LD_ADDR_OWVAR 33
34509: PUSH
34510: LD_STRING 
34512: ST_TO_ADDR
// animal := CreateHuman ;
34513: LD_ADDR_VAR 0 12
34517: PUSH
34518: CALL_OW 44
34522: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34523: LD_VAR 0 12
34527: PPUSH
34528: LD_VAR 0 8
34532: PPUSH
34533: LD_INT 0
34535: PPUSH
34536: CALL 36244 0 3
// end ;
34540: GO 34494
34542: POP
34543: POP
// if fishes then
34544: LD_VAR 0 7
34548: IFFALSE 34615
// for i = 1 to fishes do
34550: LD_ADDR_VAR 0 11
34554: PUSH
34555: DOUBLE
34556: LD_INT 1
34558: DEC
34559: ST_TO_ADDR
34560: LD_VAR 0 7
34564: PUSH
34565: FOR_TO
34566: IFFALSE 34613
// begin hc_class = 20 ;
34568: LD_ADDR_OWVAR 28
34572: PUSH
34573: LD_INT 20
34575: ST_TO_ADDR
// hc_gallery =  ;
34576: LD_ADDR_OWVAR 33
34580: PUSH
34581: LD_STRING 
34583: ST_TO_ADDR
// animal := CreateHuman ;
34584: LD_ADDR_VAR 0 12
34588: PUSH
34589: CALL_OW 44
34593: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
34594: LD_VAR 0 12
34598: PPUSH
34599: LD_VAR 0 9
34603: PPUSH
34604: LD_INT 0
34606: PPUSH
34607: CALL 36244 0 3
// end ;
34611: GO 34565
34613: POP
34614: POP
// end ;
34615: LD_VAR 0 10
34619: RET
// export function WantHeal ( sci , unit ) ; begin
34620: LD_INT 0
34622: PPUSH
// if GetTaskList ( sci ) > 0 then
34623: LD_VAR 0 1
34627: PPUSH
34628: CALL_OW 437
34632: PUSH
34633: LD_INT 0
34635: GREATER
34636: IFFALSE 34706
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
34638: LD_VAR 0 1
34642: PPUSH
34643: CALL_OW 437
34647: PUSH
34648: LD_INT 1
34650: ARRAY
34651: PUSH
34652: LD_INT 1
34654: ARRAY
34655: PUSH
34656: LD_STRING l
34658: EQUAL
34659: PUSH
34660: LD_VAR 0 1
34664: PPUSH
34665: CALL_OW 437
34669: PUSH
34670: LD_INT 1
34672: ARRAY
34673: PUSH
34674: LD_INT 4
34676: ARRAY
34677: PUSH
34678: LD_VAR 0 2
34682: EQUAL
34683: AND
34684: IFFALSE 34696
// result := true else
34686: LD_ADDR_VAR 0 3
34690: PUSH
34691: LD_INT 1
34693: ST_TO_ADDR
34694: GO 34704
// result := false ;
34696: LD_ADDR_VAR 0 3
34700: PUSH
34701: LD_INT 0
34703: ST_TO_ADDR
// end else
34704: GO 34714
// result := false ;
34706: LD_ADDR_VAR 0 3
34710: PUSH
34711: LD_INT 0
34713: ST_TO_ADDR
// end ;
34714: LD_VAR 0 3
34718: RET
// export function HealTarget ( sci ) ; begin
34719: LD_INT 0
34721: PPUSH
// if not sci then
34722: LD_VAR 0 1
34726: NOT
34727: IFFALSE 34731
// exit ;
34729: GO 34796
// result := 0 ;
34731: LD_ADDR_VAR 0 2
34735: PUSH
34736: LD_INT 0
34738: ST_TO_ADDR
// if GetTaskList ( sci ) then
34739: LD_VAR 0 1
34743: PPUSH
34744: CALL_OW 437
34748: IFFALSE 34796
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
34750: LD_VAR 0 1
34754: PPUSH
34755: CALL_OW 437
34759: PUSH
34760: LD_INT 1
34762: ARRAY
34763: PUSH
34764: LD_INT 1
34766: ARRAY
34767: PUSH
34768: LD_STRING l
34770: EQUAL
34771: IFFALSE 34796
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
34773: LD_ADDR_VAR 0 2
34777: PUSH
34778: LD_VAR 0 1
34782: PPUSH
34783: CALL_OW 437
34787: PUSH
34788: LD_INT 1
34790: ARRAY
34791: PUSH
34792: LD_INT 4
34794: ARRAY
34795: ST_TO_ADDR
// end ;
34796: LD_VAR 0 2
34800: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
34801: LD_INT 0
34803: PPUSH
34804: PPUSH
34805: PPUSH
34806: PPUSH
// if not base_units then
34807: LD_VAR 0 1
34811: NOT
34812: IFFALSE 34816
// exit ;
34814: GO 34903
// result := false ;
34816: LD_ADDR_VAR 0 2
34820: PUSH
34821: LD_INT 0
34823: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
34824: LD_ADDR_VAR 0 5
34828: PUSH
34829: LD_VAR 0 1
34833: PPUSH
34834: LD_INT 21
34836: PUSH
34837: LD_INT 3
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PPUSH
34844: CALL_OW 72
34848: ST_TO_ADDR
// if not tmp then
34849: LD_VAR 0 5
34853: NOT
34854: IFFALSE 34858
// exit ;
34856: GO 34903
// for i in tmp do
34858: LD_ADDR_VAR 0 3
34862: PUSH
34863: LD_VAR 0 5
34867: PUSH
34868: FOR_IN
34869: IFFALSE 34901
// begin result := EnemyInRange ( i , 22 ) ;
34871: LD_ADDR_VAR 0 2
34875: PUSH
34876: LD_VAR 0 3
34880: PPUSH
34881: LD_INT 22
34883: PPUSH
34884: CALL 32490 0 2
34888: ST_TO_ADDR
// if result then
34889: LD_VAR 0 2
34893: IFFALSE 34899
// exit ;
34895: POP
34896: POP
34897: GO 34903
// end ;
34899: GO 34868
34901: POP
34902: POP
// end ;
34903: LD_VAR 0 2
34907: RET
// export function FilterByTag ( units , tag ) ; begin
34908: LD_INT 0
34910: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
34911: LD_ADDR_VAR 0 3
34915: PUSH
34916: LD_VAR 0 1
34920: PPUSH
34921: LD_INT 120
34923: PUSH
34924: LD_VAR 0 2
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PPUSH
34933: CALL_OW 72
34937: ST_TO_ADDR
// end ;
34938: LD_VAR 0 3
34942: RET
// export function IsDriver ( un ) ; begin
34943: LD_INT 0
34945: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
34946: LD_ADDR_VAR 0 2
34950: PUSH
34951: LD_VAR 0 1
34955: PUSH
34956: LD_INT 55
34958: PUSH
34959: EMPTY
34960: LIST
34961: PPUSH
34962: CALL_OW 69
34966: IN
34967: ST_TO_ADDR
// end ;
34968: LD_VAR 0 2
34972: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
34973: LD_INT 0
34975: PPUSH
34976: PPUSH
// list := [ ] ;
34977: LD_ADDR_VAR 0 5
34981: PUSH
34982: EMPTY
34983: ST_TO_ADDR
// case d of 0 :
34984: LD_VAR 0 3
34988: PUSH
34989: LD_INT 0
34991: DOUBLE
34992: EQUAL
34993: IFTRUE 34997
34995: GO 35130
34997: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
34998: LD_ADDR_VAR 0 5
35002: PUSH
35003: LD_VAR 0 1
35007: PUSH
35008: LD_INT 4
35010: MINUS
35011: PUSH
35012: LD_VAR 0 2
35016: PUSH
35017: LD_INT 4
35019: MINUS
35020: PUSH
35021: LD_INT 2
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: LIST
35028: PUSH
35029: LD_VAR 0 1
35033: PUSH
35034: LD_INT 3
35036: MINUS
35037: PUSH
35038: LD_VAR 0 2
35042: PUSH
35043: LD_INT 1
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: LIST
35050: PUSH
35051: LD_VAR 0 1
35055: PUSH
35056: LD_INT 4
35058: PLUS
35059: PUSH
35060: LD_VAR 0 2
35064: PUSH
35065: LD_INT 4
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: LIST
35072: PUSH
35073: LD_VAR 0 1
35077: PUSH
35078: LD_INT 3
35080: PLUS
35081: PUSH
35082: LD_VAR 0 2
35086: PUSH
35087: LD_INT 3
35089: PLUS
35090: PUSH
35091: LD_INT 5
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: LIST
35098: PUSH
35099: LD_VAR 0 1
35103: PUSH
35104: LD_VAR 0 2
35108: PUSH
35109: LD_INT 4
35111: PLUS
35112: PUSH
35113: LD_INT 0
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: LIST
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: ST_TO_ADDR
// end ; 1 :
35128: GO 35828
35130: LD_INT 1
35132: DOUBLE
35133: EQUAL
35134: IFTRUE 35138
35136: GO 35271
35138: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
35139: LD_ADDR_VAR 0 5
35143: PUSH
35144: LD_VAR 0 1
35148: PUSH
35149: LD_VAR 0 2
35153: PUSH
35154: LD_INT 4
35156: MINUS
35157: PUSH
35158: LD_INT 3
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: LIST
35165: PUSH
35166: LD_VAR 0 1
35170: PUSH
35171: LD_INT 3
35173: MINUS
35174: PUSH
35175: LD_VAR 0 2
35179: PUSH
35180: LD_INT 3
35182: MINUS
35183: PUSH
35184: LD_INT 2
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: LIST
35191: PUSH
35192: LD_VAR 0 1
35196: PUSH
35197: LD_INT 4
35199: MINUS
35200: PUSH
35201: LD_VAR 0 2
35205: PUSH
35206: LD_INT 1
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: LIST
35213: PUSH
35214: LD_VAR 0 1
35218: PUSH
35219: LD_VAR 0 2
35223: PUSH
35224: LD_INT 3
35226: PLUS
35227: PUSH
35228: LD_INT 0
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: LIST
35235: PUSH
35236: LD_VAR 0 1
35240: PUSH
35241: LD_INT 4
35243: PLUS
35244: PUSH
35245: LD_VAR 0 2
35249: PUSH
35250: LD_INT 4
35252: PLUS
35253: PUSH
35254: LD_INT 5
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: LIST
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: ST_TO_ADDR
// end ; 2 :
35269: GO 35828
35271: LD_INT 2
35273: DOUBLE
35274: EQUAL
35275: IFTRUE 35279
35277: GO 35408
35279: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
35280: LD_ADDR_VAR 0 5
35284: PUSH
35285: LD_VAR 0 1
35289: PUSH
35290: LD_VAR 0 2
35294: PUSH
35295: LD_INT 3
35297: MINUS
35298: PUSH
35299: LD_INT 3
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: LIST
35306: PUSH
35307: LD_VAR 0 1
35311: PUSH
35312: LD_INT 4
35314: PLUS
35315: PUSH
35316: LD_VAR 0 2
35320: PUSH
35321: LD_INT 4
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: LIST
35328: PUSH
35329: LD_VAR 0 1
35333: PUSH
35334: LD_VAR 0 2
35338: PUSH
35339: LD_INT 4
35341: PLUS
35342: PUSH
35343: LD_INT 0
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: LIST
35350: PUSH
35351: LD_VAR 0 1
35355: PUSH
35356: LD_INT 3
35358: MINUS
35359: PUSH
35360: LD_VAR 0 2
35364: PUSH
35365: LD_INT 1
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: LIST
35372: PUSH
35373: LD_VAR 0 1
35377: PUSH
35378: LD_INT 4
35380: MINUS
35381: PUSH
35382: LD_VAR 0 2
35386: PUSH
35387: LD_INT 4
35389: MINUS
35390: PUSH
35391: LD_INT 2
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: LIST
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: ST_TO_ADDR
// end ; 3 :
35406: GO 35828
35408: LD_INT 3
35410: DOUBLE
35411: EQUAL
35412: IFTRUE 35416
35414: GO 35549
35416: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
35417: LD_ADDR_VAR 0 5
35421: PUSH
35422: LD_VAR 0 1
35426: PUSH
35427: LD_INT 3
35429: PLUS
35430: PUSH
35431: LD_VAR 0 2
35435: PUSH
35436: LD_INT 4
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: LIST
35443: PUSH
35444: LD_VAR 0 1
35448: PUSH
35449: LD_INT 4
35451: PLUS
35452: PUSH
35453: LD_VAR 0 2
35457: PUSH
35458: LD_INT 4
35460: PLUS
35461: PUSH
35462: LD_INT 5
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: LIST
35469: PUSH
35470: LD_VAR 0 1
35474: PUSH
35475: LD_INT 4
35477: MINUS
35478: PUSH
35479: LD_VAR 0 2
35483: PUSH
35484: LD_INT 1
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: LIST
35491: PUSH
35492: LD_VAR 0 1
35496: PUSH
35497: LD_VAR 0 2
35501: PUSH
35502: LD_INT 4
35504: MINUS
35505: PUSH
35506: LD_INT 3
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: LIST
35513: PUSH
35514: LD_VAR 0 1
35518: PUSH
35519: LD_INT 3
35521: MINUS
35522: PUSH
35523: LD_VAR 0 2
35527: PUSH
35528: LD_INT 3
35530: MINUS
35531: PUSH
35532: LD_INT 2
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: LIST
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: LIST
35544: LIST
35545: LIST
35546: ST_TO_ADDR
// end ; 4 :
35547: GO 35828
35549: LD_INT 4
35551: DOUBLE
35552: EQUAL
35553: IFTRUE 35557
35555: GO 35690
35557: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
35558: LD_ADDR_VAR 0 5
35562: PUSH
35563: LD_VAR 0 1
35567: PUSH
35568: LD_VAR 0 2
35572: PUSH
35573: LD_INT 4
35575: PLUS
35576: PUSH
35577: LD_INT 0
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: LIST
35584: PUSH
35585: LD_VAR 0 1
35589: PUSH
35590: LD_INT 3
35592: PLUS
35593: PUSH
35594: LD_VAR 0 2
35598: PUSH
35599: LD_INT 3
35601: PLUS
35602: PUSH
35603: LD_INT 5
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: LIST
35610: PUSH
35611: LD_VAR 0 1
35615: PUSH
35616: LD_INT 4
35618: PLUS
35619: PUSH
35620: LD_VAR 0 2
35624: PUSH
35625: LD_INT 4
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: LIST
35632: PUSH
35633: LD_VAR 0 1
35637: PUSH
35638: LD_VAR 0 2
35642: PUSH
35643: LD_INT 3
35645: MINUS
35646: PUSH
35647: LD_INT 3
35649: PUSH
35650: EMPTY
35651: LIST
35652: LIST
35653: LIST
35654: PUSH
35655: LD_VAR 0 1
35659: PUSH
35660: LD_INT 4
35662: MINUS
35663: PUSH
35664: LD_VAR 0 2
35668: PUSH
35669: LD_INT 4
35671: MINUS
35672: PUSH
35673: LD_INT 2
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: LIST
35680: PUSH
35681: EMPTY
35682: LIST
35683: LIST
35684: LIST
35685: LIST
35686: LIST
35687: ST_TO_ADDR
// end ; 5 :
35688: GO 35828
35690: LD_INT 5
35692: DOUBLE
35693: EQUAL
35694: IFTRUE 35698
35696: GO 35827
35698: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
35699: LD_ADDR_VAR 0 5
35703: PUSH
35704: LD_VAR 0 1
35708: PUSH
35709: LD_INT 4
35711: MINUS
35712: PUSH
35713: LD_VAR 0 2
35717: PUSH
35718: LD_INT 1
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: LIST
35725: PUSH
35726: LD_VAR 0 1
35730: PUSH
35731: LD_VAR 0 2
35735: PUSH
35736: LD_INT 4
35738: MINUS
35739: PUSH
35740: LD_INT 3
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: LIST
35747: PUSH
35748: LD_VAR 0 1
35752: PUSH
35753: LD_INT 4
35755: PLUS
35756: PUSH
35757: LD_VAR 0 2
35761: PUSH
35762: LD_INT 4
35764: PLUS
35765: PUSH
35766: LD_INT 5
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: LIST
35773: PUSH
35774: LD_VAR 0 1
35778: PUSH
35779: LD_INT 3
35781: PLUS
35782: PUSH
35783: LD_VAR 0 2
35787: PUSH
35788: LD_INT 4
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: LIST
35795: PUSH
35796: LD_VAR 0 1
35800: PUSH
35801: LD_VAR 0 2
35805: PUSH
35806: LD_INT 3
35808: PLUS
35809: PUSH
35810: LD_INT 0
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: LIST
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: ST_TO_ADDR
// end ; end ;
35825: GO 35828
35827: POP
// result := list ;
35828: LD_ADDR_VAR 0 4
35832: PUSH
35833: LD_VAR 0 5
35837: ST_TO_ADDR
// end ;
35838: LD_VAR 0 4
35842: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
35843: LD_INT 0
35845: PPUSH
35846: PPUSH
35847: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
35848: LD_VAR 0 1
35852: NOT
35853: PUSH
35854: LD_VAR 0 2
35858: PUSH
35859: LD_INT 1
35861: PUSH
35862: LD_INT 2
35864: PUSH
35865: LD_INT 3
35867: PUSH
35868: LD_INT 4
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: IN
35877: NOT
35878: OR
35879: IFFALSE 35883
// exit ;
35881: GO 35966
// tmp := [ ] ;
35883: LD_ADDR_VAR 0 5
35887: PUSH
35888: EMPTY
35889: ST_TO_ADDR
// for i in units do
35890: LD_ADDR_VAR 0 4
35894: PUSH
35895: LD_VAR 0 1
35899: PUSH
35900: FOR_IN
35901: IFFALSE 35935
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
35903: LD_ADDR_VAR 0 5
35907: PUSH
35908: LD_VAR 0 5
35912: PPUSH
35913: LD_VAR 0 4
35917: PPUSH
35918: LD_VAR 0 2
35922: PPUSH
35923: CALL_OW 259
35927: PPUSH
35928: CALL 37326 0 2
35932: ST_TO_ADDR
35933: GO 35900
35935: POP
35936: POP
// if not tmp then
35937: LD_VAR 0 5
35941: NOT
35942: IFFALSE 35946
// exit ;
35944: GO 35966
// result := SortListByListDesc ( units , tmp ) ;
35946: LD_ADDR_VAR 0 3
35950: PUSH
35951: LD_VAR 0 1
35955: PPUSH
35956: LD_VAR 0 5
35960: PPUSH
35961: CALL_OW 77
35965: ST_TO_ADDR
// end ;
35966: LD_VAR 0 3
35970: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
35971: LD_INT 0
35973: PPUSH
35974: PPUSH
35975: PPUSH
// result := false ;
35976: LD_ADDR_VAR 0 3
35980: PUSH
35981: LD_INT 0
35983: ST_TO_ADDR
// if not building then
35984: LD_VAR 0 2
35988: NOT
35989: IFFALSE 35993
// exit ;
35991: GO 36131
// x := GetX ( building ) ;
35993: LD_ADDR_VAR 0 4
35997: PUSH
35998: LD_VAR 0 2
36002: PPUSH
36003: CALL_OW 250
36007: ST_TO_ADDR
// y := GetY ( building ) ;
36008: LD_ADDR_VAR 0 5
36012: PUSH
36013: LD_VAR 0 2
36017: PPUSH
36018: CALL_OW 251
36022: ST_TO_ADDR
// if not x or not y then
36023: LD_VAR 0 4
36027: NOT
36028: PUSH
36029: LD_VAR 0 5
36033: NOT
36034: OR
36035: IFFALSE 36039
// exit ;
36037: GO 36131
// if GetTaskList ( unit ) then
36039: LD_VAR 0 1
36043: PPUSH
36044: CALL_OW 437
36048: IFFALSE 36131
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36050: LD_STRING e
36052: PUSH
36053: LD_VAR 0 1
36057: PPUSH
36058: CALL_OW 437
36062: PUSH
36063: LD_INT 1
36065: ARRAY
36066: PUSH
36067: LD_INT 1
36069: ARRAY
36070: EQUAL
36071: PUSH
36072: LD_VAR 0 4
36076: PUSH
36077: LD_VAR 0 1
36081: PPUSH
36082: CALL_OW 437
36086: PUSH
36087: LD_INT 1
36089: ARRAY
36090: PUSH
36091: LD_INT 2
36093: ARRAY
36094: EQUAL
36095: AND
36096: PUSH
36097: LD_VAR 0 5
36101: PUSH
36102: LD_VAR 0 1
36106: PPUSH
36107: CALL_OW 437
36111: PUSH
36112: LD_INT 1
36114: ARRAY
36115: PUSH
36116: LD_INT 3
36118: ARRAY
36119: EQUAL
36120: AND
36121: IFFALSE 36131
// result := true end ;
36123: LD_ADDR_VAR 0 3
36127: PUSH
36128: LD_INT 1
36130: ST_TO_ADDR
// end ;
36131: LD_VAR 0 3
36135: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
36136: LD_INT 0
36138: PPUSH
// result := false ;
36139: LD_ADDR_VAR 0 4
36143: PUSH
36144: LD_INT 0
36146: ST_TO_ADDR
// if GetTaskList ( unit ) then
36147: LD_VAR 0 1
36151: PPUSH
36152: CALL_OW 437
36156: IFFALSE 36239
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36158: LD_STRING M
36160: PUSH
36161: LD_VAR 0 1
36165: PPUSH
36166: CALL_OW 437
36170: PUSH
36171: LD_INT 1
36173: ARRAY
36174: PUSH
36175: LD_INT 1
36177: ARRAY
36178: EQUAL
36179: PUSH
36180: LD_VAR 0 2
36184: PUSH
36185: LD_VAR 0 1
36189: PPUSH
36190: CALL_OW 437
36194: PUSH
36195: LD_INT 1
36197: ARRAY
36198: PUSH
36199: LD_INT 2
36201: ARRAY
36202: EQUAL
36203: AND
36204: PUSH
36205: LD_VAR 0 3
36209: PUSH
36210: LD_VAR 0 1
36214: PPUSH
36215: CALL_OW 437
36219: PUSH
36220: LD_INT 1
36222: ARRAY
36223: PUSH
36224: LD_INT 3
36226: ARRAY
36227: EQUAL
36228: AND
36229: IFFALSE 36239
// result := true ;
36231: LD_ADDR_VAR 0 4
36235: PUSH
36236: LD_INT 1
36238: ST_TO_ADDR
// end ; end ;
36239: LD_VAR 0 4
36243: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
36244: LD_INT 0
36246: PPUSH
36247: PPUSH
36248: PPUSH
36249: PPUSH
// if not unit or not area then
36250: LD_VAR 0 1
36254: NOT
36255: PUSH
36256: LD_VAR 0 2
36260: NOT
36261: OR
36262: IFFALSE 36266
// exit ;
36264: GO 36429
// tmp := AreaToList ( area , i ) ;
36266: LD_ADDR_VAR 0 6
36270: PUSH
36271: LD_VAR 0 2
36275: PPUSH
36276: LD_VAR 0 5
36280: PPUSH
36281: CALL_OW 517
36285: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
36286: LD_ADDR_VAR 0 5
36290: PUSH
36291: DOUBLE
36292: LD_INT 1
36294: DEC
36295: ST_TO_ADDR
36296: LD_VAR 0 6
36300: PUSH
36301: LD_INT 1
36303: ARRAY
36304: PUSH
36305: FOR_TO
36306: IFFALSE 36427
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
36308: LD_ADDR_VAR 0 7
36312: PUSH
36313: LD_VAR 0 6
36317: PUSH
36318: LD_INT 1
36320: ARRAY
36321: PUSH
36322: LD_VAR 0 5
36326: ARRAY
36327: PUSH
36328: LD_VAR 0 6
36332: PUSH
36333: LD_INT 2
36335: ARRAY
36336: PUSH
36337: LD_VAR 0 5
36341: ARRAY
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
36347: LD_INT 92
36349: PUSH
36350: LD_VAR 0 7
36354: PUSH
36355: LD_INT 1
36357: ARRAY
36358: PUSH
36359: LD_VAR 0 7
36363: PUSH
36364: LD_INT 2
36366: ARRAY
36367: PUSH
36368: LD_INT 3
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: LIST
36375: LIST
36376: PPUSH
36377: CALL_OW 69
36381: PUSH
36382: LD_INT 0
36384: EQUAL
36385: IFFALSE 36425
// begin PlaceUnitArea ( unit , area , mode ) ;
36387: LD_VAR 0 1
36391: PPUSH
36392: LD_VAR 0 2
36396: PPUSH
36397: LD_VAR 0 3
36401: PPUSH
36402: CALL_OW 49
// result := IsPlaced ( unit ) ;
36406: LD_ADDR_VAR 0 4
36410: PUSH
36411: LD_VAR 0 1
36415: PPUSH
36416: CALL_OW 305
36420: ST_TO_ADDR
// exit ;
36421: POP
36422: POP
36423: GO 36429
// end ; end ;
36425: GO 36305
36427: POP
36428: POP
// end ;
36429: LD_VAR 0 4
36433: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
36434: LD_INT 0
36436: PPUSH
36437: PPUSH
36438: PPUSH
// if not side or side > 8 then
36439: LD_VAR 0 1
36443: NOT
36444: PUSH
36445: LD_VAR 0 1
36449: PUSH
36450: LD_INT 8
36452: GREATER
36453: OR
36454: IFFALSE 36458
// exit ;
36456: GO 36645
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
36458: LD_ADDR_VAR 0 4
36462: PUSH
36463: LD_INT 22
36465: PUSH
36466: LD_VAR 0 1
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 21
36477: PUSH
36478: LD_INT 3
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PPUSH
36489: CALL_OW 69
36493: ST_TO_ADDR
// if not tmp then
36494: LD_VAR 0 4
36498: NOT
36499: IFFALSE 36503
// exit ;
36501: GO 36645
// enable_addtolog := true ;
36503: LD_ADDR_OWVAR 81
36507: PUSH
36508: LD_INT 1
36510: ST_TO_ADDR
// AddToLog ( [ ) ;
36511: LD_STRING [
36513: PPUSH
36514: CALL_OW 561
// for i in tmp do
36518: LD_ADDR_VAR 0 3
36522: PUSH
36523: LD_VAR 0 4
36527: PUSH
36528: FOR_IN
36529: IFFALSE 36636
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
36531: LD_STRING [
36533: PUSH
36534: LD_VAR 0 3
36538: PPUSH
36539: CALL_OW 266
36543: STR
36544: PUSH
36545: LD_STRING , 
36547: STR
36548: PUSH
36549: LD_VAR 0 3
36553: PPUSH
36554: CALL_OW 250
36558: STR
36559: PUSH
36560: LD_STRING , 
36562: STR
36563: PUSH
36564: LD_VAR 0 3
36568: PPUSH
36569: CALL_OW 251
36573: STR
36574: PUSH
36575: LD_STRING , 
36577: STR
36578: PUSH
36579: LD_VAR 0 3
36583: PPUSH
36584: CALL_OW 254
36588: STR
36589: PUSH
36590: LD_STRING , 
36592: STR
36593: PUSH
36594: LD_VAR 0 3
36598: PPUSH
36599: LD_INT 1
36601: PPUSH
36602: CALL_OW 268
36606: STR
36607: PUSH
36608: LD_STRING , 
36610: STR
36611: PUSH
36612: LD_VAR 0 3
36616: PPUSH
36617: LD_INT 2
36619: PPUSH
36620: CALL_OW 268
36624: STR
36625: PUSH
36626: LD_STRING ],
36628: STR
36629: PPUSH
36630: CALL_OW 561
// end ;
36634: GO 36528
36636: POP
36637: POP
// AddToLog ( ]; ) ;
36638: LD_STRING ];
36640: PPUSH
36641: CALL_OW 561
// end ;
36645: LD_VAR 0 2
36649: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
36650: LD_INT 0
36652: PPUSH
36653: PPUSH
36654: PPUSH
36655: PPUSH
36656: PPUSH
// if not area or not rate or not max then
36657: LD_VAR 0 1
36661: NOT
36662: PUSH
36663: LD_VAR 0 2
36667: NOT
36668: OR
36669: PUSH
36670: LD_VAR 0 4
36674: NOT
36675: OR
36676: IFFALSE 36680
// exit ;
36678: GO 36869
// while 1 do
36680: LD_INT 1
36682: IFFALSE 36869
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
36684: LD_ADDR_VAR 0 9
36688: PUSH
36689: LD_VAR 0 1
36693: PPUSH
36694: LD_INT 1
36696: PPUSH
36697: CALL_OW 287
36701: PUSH
36702: LD_INT 10
36704: MUL
36705: ST_TO_ADDR
// r := rate / 10 ;
36706: LD_ADDR_VAR 0 7
36710: PUSH
36711: LD_VAR 0 2
36715: PUSH
36716: LD_INT 10
36718: DIVREAL
36719: ST_TO_ADDR
// time := 1 1$00 ;
36720: LD_ADDR_VAR 0 8
36724: PUSH
36725: LD_INT 2100
36727: ST_TO_ADDR
// if amount < min then
36728: LD_VAR 0 9
36732: PUSH
36733: LD_VAR 0 3
36737: LESS
36738: IFFALSE 36756
// r := r * 2 else
36740: LD_ADDR_VAR 0 7
36744: PUSH
36745: LD_VAR 0 7
36749: PUSH
36750: LD_INT 2
36752: MUL
36753: ST_TO_ADDR
36754: GO 36782
// if amount > max then
36756: LD_VAR 0 9
36760: PUSH
36761: LD_VAR 0 4
36765: GREATER
36766: IFFALSE 36782
// r := r / 2 ;
36768: LD_ADDR_VAR 0 7
36772: PUSH
36773: LD_VAR 0 7
36777: PUSH
36778: LD_INT 2
36780: DIVREAL
36781: ST_TO_ADDR
// time := time / r ;
36782: LD_ADDR_VAR 0 8
36786: PUSH
36787: LD_VAR 0 8
36791: PUSH
36792: LD_VAR 0 7
36796: DIVREAL
36797: ST_TO_ADDR
// if time < 0 then
36798: LD_VAR 0 8
36802: PUSH
36803: LD_INT 0
36805: LESS
36806: IFFALSE 36823
// time := time * - 1 ;
36808: LD_ADDR_VAR 0 8
36812: PUSH
36813: LD_VAR 0 8
36817: PUSH
36818: LD_INT 1
36820: NEG
36821: MUL
36822: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
36823: LD_VAR 0 8
36827: PUSH
36828: LD_INT 35
36830: PPUSH
36831: LD_INT 875
36833: PPUSH
36834: CALL_OW 12
36838: PLUS
36839: PPUSH
36840: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
36844: LD_INT 1
36846: PPUSH
36847: LD_INT 5
36849: PPUSH
36850: CALL_OW 12
36854: PPUSH
36855: LD_VAR 0 1
36859: PPUSH
36860: LD_INT 1
36862: PPUSH
36863: CALL_OW 55
// end ;
36867: GO 36680
// end ;
36869: LD_VAR 0 5
36873: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
36874: LD_INT 0
36876: PPUSH
36877: PPUSH
36878: PPUSH
36879: PPUSH
36880: PPUSH
36881: PPUSH
36882: PPUSH
36883: PPUSH
// if not turrets or not factories then
36884: LD_VAR 0 1
36888: NOT
36889: PUSH
36890: LD_VAR 0 2
36894: NOT
36895: OR
36896: IFFALSE 36900
// exit ;
36898: GO 37207
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
36900: LD_ADDR_VAR 0 10
36904: PUSH
36905: LD_INT 5
36907: PUSH
36908: LD_INT 6
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: PUSH
36915: LD_INT 2
36917: PUSH
36918: LD_INT 4
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: PUSH
36925: LD_INT 3
36927: PUSH
36928: LD_INT 5
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: LIST
36939: PUSH
36940: LD_INT 24
36942: PUSH
36943: LD_INT 25
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: LD_INT 23
36952: PUSH
36953: LD_INT 27
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: PUSH
36964: LD_INT 42
36966: PUSH
36967: LD_INT 43
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: PUSH
36974: LD_INT 44
36976: PUSH
36977: LD_INT 46
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: PUSH
36984: LD_INT 45
36986: PUSH
36987: LD_INT 47
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: LIST
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: LIST
37003: ST_TO_ADDR
// result := [ ] ;
37004: LD_ADDR_VAR 0 3
37008: PUSH
37009: EMPTY
37010: ST_TO_ADDR
// for i in turrets do
37011: LD_ADDR_VAR 0 4
37015: PUSH
37016: LD_VAR 0 1
37020: PUSH
37021: FOR_IN
37022: IFFALSE 37205
// begin nat := GetNation ( i ) ;
37024: LD_ADDR_VAR 0 7
37028: PUSH
37029: LD_VAR 0 4
37033: PPUSH
37034: CALL_OW 248
37038: ST_TO_ADDR
// weapon := 0 ;
37039: LD_ADDR_VAR 0 8
37043: PUSH
37044: LD_INT 0
37046: ST_TO_ADDR
// if not nat then
37047: LD_VAR 0 7
37051: NOT
37052: IFFALSE 37056
// continue ;
37054: GO 37021
// for j in list [ nat ] do
37056: LD_ADDR_VAR 0 5
37060: PUSH
37061: LD_VAR 0 10
37065: PUSH
37066: LD_VAR 0 7
37070: ARRAY
37071: PUSH
37072: FOR_IN
37073: IFFALSE 37114
// if GetBWeapon ( i ) = j [ 1 ] then
37075: LD_VAR 0 4
37079: PPUSH
37080: CALL_OW 269
37084: PUSH
37085: LD_VAR 0 5
37089: PUSH
37090: LD_INT 1
37092: ARRAY
37093: EQUAL
37094: IFFALSE 37112
// begin weapon := j [ 2 ] ;
37096: LD_ADDR_VAR 0 8
37100: PUSH
37101: LD_VAR 0 5
37105: PUSH
37106: LD_INT 2
37108: ARRAY
37109: ST_TO_ADDR
// break ;
37110: GO 37114
// end ;
37112: GO 37072
37114: POP
37115: POP
// if not weapon then
37116: LD_VAR 0 8
37120: NOT
37121: IFFALSE 37125
// continue ;
37123: GO 37021
// for k in factories do
37125: LD_ADDR_VAR 0 6
37129: PUSH
37130: LD_VAR 0 2
37134: PUSH
37135: FOR_IN
37136: IFFALSE 37201
// begin weapons := AvailableWeaponList ( k ) ;
37138: LD_ADDR_VAR 0 9
37142: PUSH
37143: LD_VAR 0 6
37147: PPUSH
37148: CALL_OW 478
37152: ST_TO_ADDR
// if not weapons then
37153: LD_VAR 0 9
37157: NOT
37158: IFFALSE 37162
// continue ;
37160: GO 37135
// if weapon in weapons then
37162: LD_VAR 0 8
37166: PUSH
37167: LD_VAR 0 9
37171: IN
37172: IFFALSE 37199
// begin result := [ i , weapon ] ;
37174: LD_ADDR_VAR 0 3
37178: PUSH
37179: LD_VAR 0 4
37183: PUSH
37184: LD_VAR 0 8
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: ST_TO_ADDR
// exit ;
37193: POP
37194: POP
37195: POP
37196: POP
37197: GO 37207
// end ; end ;
37199: GO 37135
37201: POP
37202: POP
// end ;
37203: GO 37021
37205: POP
37206: POP
// end ;
37207: LD_VAR 0 3
37211: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
37212: LD_INT 0
37214: PPUSH
// if not side or side > 8 then
37215: LD_VAR 0 3
37219: NOT
37220: PUSH
37221: LD_VAR 0 3
37225: PUSH
37226: LD_INT 8
37228: GREATER
37229: OR
37230: IFFALSE 37234
// exit ;
37232: GO 37293
// if not range then
37234: LD_VAR 0 4
37238: NOT
37239: IFFALSE 37250
// range := - 12 ;
37241: LD_ADDR_VAR 0 4
37245: PUSH
37246: LD_INT 12
37248: NEG
37249: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
37250: LD_VAR 0 1
37254: PPUSH
37255: LD_VAR 0 2
37259: PPUSH
37260: LD_VAR 0 3
37264: PPUSH
37265: LD_VAR 0 4
37269: PPUSH
37270: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
37274: LD_VAR 0 1
37278: PPUSH
37279: LD_VAR 0 2
37283: PPUSH
37284: LD_VAR 0 3
37288: PPUSH
37289: CALL_OW 331
// end ;
37293: LD_VAR 0 5
37297: RET
// export function Video ( mode ) ; begin
37298: LD_INT 0
37300: PPUSH
// ingame_video = mode ;
37301: LD_ADDR_OWVAR 52
37305: PUSH
37306: LD_VAR 0 1
37310: ST_TO_ADDR
// interface_hidden = mode ;
37311: LD_ADDR_OWVAR 54
37315: PUSH
37316: LD_VAR 0 1
37320: ST_TO_ADDR
// end ;
37321: LD_VAR 0 2
37325: RET
// export function Join ( array , element ) ; begin
37326: LD_INT 0
37328: PPUSH
// result := Replace ( array , array + 1 , element ) ;
37329: LD_ADDR_VAR 0 3
37333: PUSH
37334: LD_VAR 0 1
37338: PPUSH
37339: LD_VAR 0 1
37343: PUSH
37344: LD_INT 1
37346: PLUS
37347: PPUSH
37348: LD_VAR 0 2
37352: PPUSH
37353: CALL_OW 1
37357: ST_TO_ADDR
// end ;
37358: LD_VAR 0 3
37362: RET
// export function JoinUnion ( array , element ) ; begin
37363: LD_INT 0
37365: PPUSH
// result := array union element ;
37366: LD_ADDR_VAR 0 3
37370: PUSH
37371: LD_VAR 0 1
37375: PUSH
37376: LD_VAR 0 2
37380: UNION
37381: ST_TO_ADDR
// end ;
37382: LD_VAR 0 3
37386: RET
// export function GetBehemoths ( side ) ; begin
37387: LD_INT 0
37389: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
37390: LD_ADDR_VAR 0 2
37394: PUSH
37395: LD_INT 22
37397: PUSH
37398: LD_VAR 0 1
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 31
37409: PUSH
37410: LD_INT 25
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PPUSH
37421: CALL_OW 69
37425: ST_TO_ADDR
// end ;
37426: LD_VAR 0 2
37430: RET
// export function Shuffle ( array ) ; var i , index ; begin
37431: LD_INT 0
37433: PPUSH
37434: PPUSH
37435: PPUSH
// result := [ ] ;
37436: LD_ADDR_VAR 0 2
37440: PUSH
37441: EMPTY
37442: ST_TO_ADDR
// if not array then
37443: LD_VAR 0 1
37447: NOT
37448: IFFALSE 37452
// exit ;
37450: GO 37551
// Randomize ;
37452: CALL_OW 10
// for i = array downto 1 do
37456: LD_ADDR_VAR 0 3
37460: PUSH
37461: DOUBLE
37462: LD_VAR 0 1
37466: INC
37467: ST_TO_ADDR
37468: LD_INT 1
37470: PUSH
37471: FOR_DOWNTO
37472: IFFALSE 37549
// begin index := rand ( 1 , array ) ;
37474: LD_ADDR_VAR 0 4
37478: PUSH
37479: LD_INT 1
37481: PPUSH
37482: LD_VAR 0 1
37486: PPUSH
37487: CALL_OW 12
37491: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
37492: LD_ADDR_VAR 0 2
37496: PUSH
37497: LD_VAR 0 2
37501: PPUSH
37502: LD_VAR 0 2
37506: PUSH
37507: LD_INT 1
37509: PLUS
37510: PPUSH
37511: LD_VAR 0 1
37515: PUSH
37516: LD_VAR 0 4
37520: ARRAY
37521: PPUSH
37522: CALL_OW 2
37526: ST_TO_ADDR
// array := Delete ( array , index ) ;
37527: LD_ADDR_VAR 0 1
37531: PUSH
37532: LD_VAR 0 1
37536: PPUSH
37537: LD_VAR 0 4
37541: PPUSH
37542: CALL_OW 3
37546: ST_TO_ADDR
// end ;
37547: GO 37471
37549: POP
37550: POP
// end ;
37551: LD_VAR 0 2
37555: RET
// export function GetBaseMaterials ( base ) ; begin
37556: LD_INT 0
37558: PPUSH
// result := [ 0 , 0 , 0 ] ;
37559: LD_ADDR_VAR 0 2
37563: PUSH
37564: LD_INT 0
37566: PUSH
37567: LD_INT 0
37569: PUSH
37570: LD_INT 0
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: LIST
37577: ST_TO_ADDR
// if not base then
37578: LD_VAR 0 1
37582: NOT
37583: IFFALSE 37587
// exit ;
37585: GO 37636
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
37587: LD_ADDR_VAR 0 2
37591: PUSH
37592: LD_VAR 0 1
37596: PPUSH
37597: LD_INT 1
37599: PPUSH
37600: CALL_OW 275
37604: PUSH
37605: LD_VAR 0 1
37609: PPUSH
37610: LD_INT 2
37612: PPUSH
37613: CALL_OW 275
37617: PUSH
37618: LD_VAR 0 1
37622: PPUSH
37623: LD_INT 3
37625: PPUSH
37626: CALL_OW 275
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: LIST
37635: ST_TO_ADDR
// end ;
37636: LD_VAR 0 2
37640: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
37641: LD_INT 0
37643: PPUSH
37644: PPUSH
// result := array ;
37645: LD_ADDR_VAR 0 3
37649: PUSH
37650: LD_VAR 0 1
37654: ST_TO_ADDR
// if size >= result then
37655: LD_VAR 0 2
37659: PUSH
37660: LD_VAR 0 3
37664: GREATEREQUAL
37665: IFFALSE 37669
// exit ;
37667: GO 37719
// if size then
37669: LD_VAR 0 2
37673: IFFALSE 37719
// for i := array downto size do
37675: LD_ADDR_VAR 0 4
37679: PUSH
37680: DOUBLE
37681: LD_VAR 0 1
37685: INC
37686: ST_TO_ADDR
37687: LD_VAR 0 2
37691: PUSH
37692: FOR_DOWNTO
37693: IFFALSE 37717
// result := Delete ( result , result ) ;
37695: LD_ADDR_VAR 0 3
37699: PUSH
37700: LD_VAR 0 3
37704: PPUSH
37705: LD_VAR 0 3
37709: PPUSH
37710: CALL_OW 3
37714: ST_TO_ADDR
37715: GO 37692
37717: POP
37718: POP
// end ;
37719: LD_VAR 0 3
37723: RET
// export function ComExit ( unit ) ; var tmp ; begin
37724: LD_INT 0
37726: PPUSH
37727: PPUSH
// if not IsInUnit ( unit ) then
37728: LD_VAR 0 1
37732: PPUSH
37733: CALL_OW 310
37737: NOT
37738: IFFALSE 37742
// exit ;
37740: GO 37802
// tmp := IsInUnit ( unit ) ;
37742: LD_ADDR_VAR 0 3
37746: PUSH
37747: LD_VAR 0 1
37751: PPUSH
37752: CALL_OW 310
37756: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
37757: LD_VAR 0 3
37761: PPUSH
37762: CALL_OW 247
37766: PUSH
37767: LD_INT 2
37769: EQUAL
37770: IFFALSE 37783
// ComExitVehicle ( unit ) else
37772: LD_VAR 0 1
37776: PPUSH
37777: CALL_OW 121
37781: GO 37792
// ComExitBuilding ( unit ) ;
37783: LD_VAR 0 1
37787: PPUSH
37788: CALL_OW 122
// result := tmp ;
37792: LD_ADDR_VAR 0 2
37796: PUSH
37797: LD_VAR 0 3
37801: ST_TO_ADDR
// end ;
37802: LD_VAR 0 2
37806: RET
// export function ComExitAll ( units ) ; var i ; begin
37807: LD_INT 0
37809: PPUSH
37810: PPUSH
// if not units then
37811: LD_VAR 0 1
37815: NOT
37816: IFFALSE 37820
// exit ;
37818: GO 37846
// for i in units do
37820: LD_ADDR_VAR 0 3
37824: PUSH
37825: LD_VAR 0 1
37829: PUSH
37830: FOR_IN
37831: IFFALSE 37844
// ComExit ( i ) ;
37833: LD_VAR 0 3
37837: PPUSH
37838: CALL 37724 0 1
37842: GO 37830
37844: POP
37845: POP
// end ;
37846: LD_VAR 0 2
37850: RET
// export function ResetHc ; begin
37851: LD_INT 0
37853: PPUSH
// InitHc ;
37854: CALL_OW 19
// hc_importance := 0 ;
37858: LD_ADDR_OWVAR 32
37862: PUSH
37863: LD_INT 0
37865: ST_TO_ADDR
// end ;
37866: LD_VAR 0 1
37870: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
37871: LD_INT 0
37873: PPUSH
37874: PPUSH
37875: PPUSH
// _x := ( x1 + x2 ) div 2 ;
37876: LD_ADDR_VAR 0 6
37880: PUSH
37881: LD_VAR 0 1
37885: PUSH
37886: LD_VAR 0 3
37890: PLUS
37891: PUSH
37892: LD_INT 2
37894: DIV
37895: ST_TO_ADDR
// if _x < 0 then
37896: LD_VAR 0 6
37900: PUSH
37901: LD_INT 0
37903: LESS
37904: IFFALSE 37921
// _x := _x * - 1 ;
37906: LD_ADDR_VAR 0 6
37910: PUSH
37911: LD_VAR 0 6
37915: PUSH
37916: LD_INT 1
37918: NEG
37919: MUL
37920: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
37921: LD_ADDR_VAR 0 7
37925: PUSH
37926: LD_VAR 0 2
37930: PUSH
37931: LD_VAR 0 4
37935: PLUS
37936: PUSH
37937: LD_INT 2
37939: DIV
37940: ST_TO_ADDR
// if _y < 0 then
37941: LD_VAR 0 7
37945: PUSH
37946: LD_INT 0
37948: LESS
37949: IFFALSE 37966
// _y := _y * - 1 ;
37951: LD_ADDR_VAR 0 7
37955: PUSH
37956: LD_VAR 0 7
37960: PUSH
37961: LD_INT 1
37963: NEG
37964: MUL
37965: ST_TO_ADDR
// result := [ _x , _y ] ;
37966: LD_ADDR_VAR 0 5
37970: PUSH
37971: LD_VAR 0 6
37975: PUSH
37976: LD_VAR 0 7
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: ST_TO_ADDR
// end ;
37985: LD_VAR 0 5
37989: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
37990: LD_INT 0
37992: PPUSH
37993: PPUSH
37994: PPUSH
37995: PPUSH
// task := GetTaskList ( unit ) ;
37996: LD_ADDR_VAR 0 7
38000: PUSH
38001: LD_VAR 0 1
38005: PPUSH
38006: CALL_OW 437
38010: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
38011: LD_VAR 0 7
38015: NOT
38016: PUSH
38017: LD_VAR 0 1
38021: PPUSH
38022: LD_VAR 0 2
38026: PPUSH
38027: CALL_OW 308
38031: NOT
38032: AND
38033: IFFALSE 38037
// exit ;
38035: GO 38155
// if IsInArea ( unit , area ) then
38037: LD_VAR 0 1
38041: PPUSH
38042: LD_VAR 0 2
38046: PPUSH
38047: CALL_OW 308
38051: IFFALSE 38069
// begin ComMoveToArea ( unit , goAway ) ;
38053: LD_VAR 0 1
38057: PPUSH
38058: LD_VAR 0 3
38062: PPUSH
38063: CALL_OW 113
// exit ;
38067: GO 38155
// end ; if task [ 1 ] [ 1 ] <> M then
38069: LD_VAR 0 7
38073: PUSH
38074: LD_INT 1
38076: ARRAY
38077: PUSH
38078: LD_INT 1
38080: ARRAY
38081: PUSH
38082: LD_STRING M
38084: NONEQUAL
38085: IFFALSE 38089
// exit ;
38087: GO 38155
// x := task [ 1 ] [ 2 ] ;
38089: LD_ADDR_VAR 0 5
38093: PUSH
38094: LD_VAR 0 7
38098: PUSH
38099: LD_INT 1
38101: ARRAY
38102: PUSH
38103: LD_INT 2
38105: ARRAY
38106: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
38107: LD_ADDR_VAR 0 6
38111: PUSH
38112: LD_VAR 0 7
38116: PUSH
38117: LD_INT 1
38119: ARRAY
38120: PUSH
38121: LD_INT 3
38123: ARRAY
38124: ST_TO_ADDR
// if InArea ( x , y , area ) then
38125: LD_VAR 0 5
38129: PPUSH
38130: LD_VAR 0 6
38134: PPUSH
38135: LD_VAR 0 2
38139: PPUSH
38140: CALL_OW 309
38144: IFFALSE 38155
// ComStop ( unit ) ;
38146: LD_VAR 0 1
38150: PPUSH
38151: CALL_OW 141
// end ;
38155: LD_VAR 0 4
38159: RET
// export function Abs ( value ) ; begin
38160: LD_INT 0
38162: PPUSH
// result := value ;
38163: LD_ADDR_VAR 0 2
38167: PUSH
38168: LD_VAR 0 1
38172: ST_TO_ADDR
// if value < 0 then
38173: LD_VAR 0 1
38177: PUSH
38178: LD_INT 0
38180: LESS
38181: IFFALSE 38198
// result := value * - 1 ;
38183: LD_ADDR_VAR 0 2
38187: PUSH
38188: LD_VAR 0 1
38192: PUSH
38193: LD_INT 1
38195: NEG
38196: MUL
38197: ST_TO_ADDR
// end ;
38198: LD_VAR 0 2
38202: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
38203: LD_INT 0
38205: PPUSH
38206: PPUSH
38207: PPUSH
38208: PPUSH
38209: PPUSH
38210: PPUSH
38211: PPUSH
38212: PPUSH
// if not unit or not building then
38213: LD_VAR 0 1
38217: NOT
38218: PUSH
38219: LD_VAR 0 2
38223: NOT
38224: OR
38225: IFFALSE 38229
// exit ;
38227: GO 38455
// x := GetX ( building ) ;
38229: LD_ADDR_VAR 0 4
38233: PUSH
38234: LD_VAR 0 2
38238: PPUSH
38239: CALL_OW 250
38243: ST_TO_ADDR
// y := GetY ( building ) ;
38244: LD_ADDR_VAR 0 6
38248: PUSH
38249: LD_VAR 0 2
38253: PPUSH
38254: CALL_OW 251
38258: ST_TO_ADDR
// d := GetDir ( building ) ;
38259: LD_ADDR_VAR 0 8
38263: PUSH
38264: LD_VAR 0 2
38268: PPUSH
38269: CALL_OW 254
38273: ST_TO_ADDR
// r := 4 ;
38274: LD_ADDR_VAR 0 9
38278: PUSH
38279: LD_INT 4
38281: ST_TO_ADDR
// for i := 1 to 5 do
38282: LD_ADDR_VAR 0 10
38286: PUSH
38287: DOUBLE
38288: LD_INT 1
38290: DEC
38291: ST_TO_ADDR
38292: LD_INT 5
38294: PUSH
38295: FOR_TO
38296: IFFALSE 38453
// begin _x := ShiftX ( x , d , r + i ) ;
38298: LD_ADDR_VAR 0 5
38302: PUSH
38303: LD_VAR 0 4
38307: PPUSH
38308: LD_VAR 0 8
38312: PPUSH
38313: LD_VAR 0 9
38317: PUSH
38318: LD_VAR 0 10
38322: PLUS
38323: PPUSH
38324: CALL_OW 272
38328: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
38329: LD_ADDR_VAR 0 7
38333: PUSH
38334: LD_VAR 0 6
38338: PPUSH
38339: LD_VAR 0 8
38343: PPUSH
38344: LD_VAR 0 9
38348: PUSH
38349: LD_VAR 0 10
38353: PLUS
38354: PPUSH
38355: CALL_OW 273
38359: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
38360: LD_VAR 0 5
38364: PPUSH
38365: LD_VAR 0 7
38369: PPUSH
38370: CALL_OW 488
38374: PUSH
38375: LD_VAR 0 5
38379: PPUSH
38380: LD_VAR 0 7
38384: PPUSH
38385: CALL_OW 428
38389: PPUSH
38390: CALL_OW 247
38394: PUSH
38395: LD_INT 3
38397: PUSH
38398: LD_INT 2
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: IN
38405: NOT
38406: AND
38407: IFFALSE 38451
// begin ComMoveXY ( unit , _x , _y ) ;
38409: LD_VAR 0 1
38413: PPUSH
38414: LD_VAR 0 5
38418: PPUSH
38419: LD_VAR 0 7
38423: PPUSH
38424: CALL_OW 111
// result := [ _x , _y ] ;
38428: LD_ADDR_VAR 0 3
38432: PUSH
38433: LD_VAR 0 5
38437: PUSH
38438: LD_VAR 0 7
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: ST_TO_ADDR
// exit ;
38447: POP
38448: POP
38449: GO 38455
// end ; end ;
38451: GO 38295
38453: POP
38454: POP
// end ;
38455: LD_VAR 0 3
38459: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
38460: LD_INT 0
38462: PPUSH
38463: PPUSH
38464: PPUSH
// result := 0 ;
38465: LD_ADDR_VAR 0 3
38469: PUSH
38470: LD_INT 0
38472: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
38473: LD_VAR 0 1
38477: PUSH
38478: LD_INT 0
38480: LESS
38481: PUSH
38482: LD_VAR 0 1
38486: PUSH
38487: LD_INT 8
38489: GREATER
38490: OR
38491: PUSH
38492: LD_VAR 0 2
38496: PUSH
38497: LD_INT 0
38499: LESS
38500: OR
38501: PUSH
38502: LD_VAR 0 2
38506: PUSH
38507: LD_INT 8
38509: GREATER
38510: OR
38511: IFFALSE 38515
// exit ;
38513: GO 38590
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
38515: LD_ADDR_VAR 0 4
38519: PUSH
38520: LD_INT 22
38522: PUSH
38523: LD_VAR 0 2
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: PPUSH
38532: CALL_OW 69
38536: PUSH
38537: FOR_IN
38538: IFFALSE 38588
// begin un := UnitShoot ( i ) ;
38540: LD_ADDR_VAR 0 5
38544: PUSH
38545: LD_VAR 0 4
38549: PPUSH
38550: CALL_OW 504
38554: ST_TO_ADDR
// if GetSide ( un ) = side1 then
38555: LD_VAR 0 5
38559: PPUSH
38560: CALL_OW 255
38564: PUSH
38565: LD_VAR 0 1
38569: EQUAL
38570: IFFALSE 38586
// begin result := un ;
38572: LD_ADDR_VAR 0 3
38576: PUSH
38577: LD_VAR 0 5
38581: ST_TO_ADDR
// exit ;
38582: POP
38583: POP
38584: GO 38590
// end ; end ;
38586: GO 38537
38588: POP
38589: POP
// end ;
38590: LD_VAR 0 3
38594: RET
// export function GetCargoBay ( units ) ; begin
38595: LD_INT 0
38597: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
38598: LD_ADDR_VAR 0 2
38602: PUSH
38603: LD_VAR 0 1
38607: PPUSH
38608: LD_INT 2
38610: PUSH
38611: LD_INT 34
38613: PUSH
38614: LD_INT 12
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: LD_INT 34
38623: PUSH
38624: LD_INT 51
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: LD_INT 34
38633: PUSH
38634: LD_INT 32
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: PUSH
38641: LD_INT 34
38643: PUSH
38644: LD_INT 89
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: PPUSH
38658: CALL_OW 72
38662: ST_TO_ADDR
// end ;
38663: LD_VAR 0 2
38667: RET
// export function Negate ( value ) ; begin
38668: LD_INT 0
38670: PPUSH
// result := not value ;
38671: LD_ADDR_VAR 0 2
38675: PUSH
38676: LD_VAR 0 1
38680: NOT
38681: ST_TO_ADDR
// end ;
38682: LD_VAR 0 2
38686: RET
// export function Inc ( value ) ; begin
38687: LD_INT 0
38689: PPUSH
// result := value + 1 ;
38690: LD_ADDR_VAR 0 2
38694: PUSH
38695: LD_VAR 0 1
38699: PUSH
38700: LD_INT 1
38702: PLUS
38703: ST_TO_ADDR
// end ;
38704: LD_VAR 0 2
38708: RET
// export function Dec ( value ) ; begin
38709: LD_INT 0
38711: PPUSH
// result := value - 1 ;
38712: LD_ADDR_VAR 0 2
38716: PUSH
38717: LD_VAR 0 1
38721: PUSH
38722: LD_INT 1
38724: MINUS
38725: ST_TO_ADDR
// end ;
38726: LD_VAR 0 2
38730: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
38731: LD_INT 0
38733: PPUSH
38734: PPUSH
38735: PPUSH
38736: PPUSH
38737: PPUSH
38738: PPUSH
38739: PPUSH
38740: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
38741: LD_VAR 0 1
38745: PPUSH
38746: LD_VAR 0 2
38750: PPUSH
38751: CALL_OW 488
38755: NOT
38756: PUSH
38757: LD_VAR 0 3
38761: PPUSH
38762: LD_VAR 0 4
38766: PPUSH
38767: CALL_OW 488
38771: NOT
38772: OR
38773: IFFALSE 38786
// begin result := - 1 ;
38775: LD_ADDR_VAR 0 5
38779: PUSH
38780: LD_INT 1
38782: NEG
38783: ST_TO_ADDR
// exit ;
38784: GO 39021
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
38786: LD_ADDR_VAR 0 12
38790: PUSH
38791: LD_VAR 0 1
38795: PPUSH
38796: LD_VAR 0 2
38800: PPUSH
38801: LD_VAR 0 3
38805: PPUSH
38806: LD_VAR 0 4
38810: PPUSH
38811: CALL 37871 0 4
38815: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
38816: LD_ADDR_VAR 0 11
38820: PUSH
38821: LD_VAR 0 1
38825: PPUSH
38826: LD_VAR 0 2
38830: PPUSH
38831: LD_VAR 0 12
38835: PUSH
38836: LD_INT 1
38838: ARRAY
38839: PPUSH
38840: LD_VAR 0 12
38844: PUSH
38845: LD_INT 2
38847: ARRAY
38848: PPUSH
38849: CALL_OW 298
38853: ST_TO_ADDR
// distance := 9999 ;
38854: LD_ADDR_VAR 0 10
38858: PUSH
38859: LD_INT 9999
38861: ST_TO_ADDR
// for i := 0 to 5 do
38862: LD_ADDR_VAR 0 6
38866: PUSH
38867: DOUBLE
38868: LD_INT 0
38870: DEC
38871: ST_TO_ADDR
38872: LD_INT 5
38874: PUSH
38875: FOR_TO
38876: IFFALSE 39019
// begin _x := ShiftX ( x1 , i , centerDist ) ;
38878: LD_ADDR_VAR 0 7
38882: PUSH
38883: LD_VAR 0 1
38887: PPUSH
38888: LD_VAR 0 6
38892: PPUSH
38893: LD_VAR 0 11
38897: PPUSH
38898: CALL_OW 272
38902: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
38903: LD_ADDR_VAR 0 8
38907: PUSH
38908: LD_VAR 0 2
38912: PPUSH
38913: LD_VAR 0 6
38917: PPUSH
38918: LD_VAR 0 11
38922: PPUSH
38923: CALL_OW 273
38927: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38928: LD_VAR 0 7
38932: PPUSH
38933: LD_VAR 0 8
38937: PPUSH
38938: CALL_OW 488
38942: NOT
38943: IFFALSE 38947
// continue ;
38945: GO 38875
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
38947: LD_ADDR_VAR 0 9
38951: PUSH
38952: LD_VAR 0 12
38956: PUSH
38957: LD_INT 1
38959: ARRAY
38960: PPUSH
38961: LD_VAR 0 12
38965: PUSH
38966: LD_INT 2
38968: ARRAY
38969: PPUSH
38970: LD_VAR 0 7
38974: PPUSH
38975: LD_VAR 0 8
38979: PPUSH
38980: CALL_OW 298
38984: ST_TO_ADDR
// if tmp < distance then
38985: LD_VAR 0 9
38989: PUSH
38990: LD_VAR 0 10
38994: LESS
38995: IFFALSE 39017
// begin result := i ;
38997: LD_ADDR_VAR 0 5
39001: PUSH
39002: LD_VAR 0 6
39006: ST_TO_ADDR
// distance := tmp ;
39007: LD_ADDR_VAR 0 10
39011: PUSH
39012: LD_VAR 0 9
39016: ST_TO_ADDR
// end ; end ;
39017: GO 38875
39019: POP
39020: POP
// end ;
39021: LD_VAR 0 5
39025: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39026: LD_INT 0
39028: PPUSH
39029: PPUSH
// if not driver or not IsInUnit ( driver ) then
39030: LD_VAR 0 1
39034: NOT
39035: PUSH
39036: LD_VAR 0 1
39040: PPUSH
39041: CALL_OW 310
39045: NOT
39046: OR
39047: IFFALSE 39051
// exit ;
39049: GO 39141
// vehicle := IsInUnit ( driver ) ;
39051: LD_ADDR_VAR 0 3
39055: PUSH
39056: LD_VAR 0 1
39060: PPUSH
39061: CALL_OW 310
39065: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39066: LD_VAR 0 1
39070: PPUSH
39071: LD_STRING \
39073: PUSH
39074: LD_INT 0
39076: PUSH
39077: LD_INT 0
39079: PUSH
39080: LD_INT 0
39082: PUSH
39083: LD_INT 0
39085: PUSH
39086: LD_INT 0
39088: PUSH
39089: LD_INT 0
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: PUSH
39101: LD_STRING E
39103: PUSH
39104: LD_INT 0
39106: PUSH
39107: LD_INT 0
39109: PUSH
39110: LD_VAR 0 3
39114: PUSH
39115: LD_INT 0
39117: PUSH
39118: LD_INT 0
39120: PUSH
39121: LD_INT 0
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PPUSH
39137: CALL_OW 446
// end ;
39141: LD_VAR 0 2
39145: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39146: LD_INT 0
39148: PPUSH
39149: PPUSH
// if not driver or not IsInUnit ( driver ) then
39150: LD_VAR 0 1
39154: NOT
39155: PUSH
39156: LD_VAR 0 1
39160: PPUSH
39161: CALL_OW 310
39165: NOT
39166: OR
39167: IFFALSE 39171
// exit ;
39169: GO 39261
// vehicle := IsInUnit ( driver ) ;
39171: LD_ADDR_VAR 0 3
39175: PUSH
39176: LD_VAR 0 1
39180: PPUSH
39181: CALL_OW 310
39185: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39186: LD_VAR 0 1
39190: PPUSH
39191: LD_STRING \
39193: PUSH
39194: LD_INT 0
39196: PUSH
39197: LD_INT 0
39199: PUSH
39200: LD_INT 0
39202: PUSH
39203: LD_INT 0
39205: PUSH
39206: LD_INT 0
39208: PUSH
39209: LD_INT 0
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: PUSH
39221: LD_STRING E
39223: PUSH
39224: LD_INT 0
39226: PUSH
39227: LD_INT 0
39229: PUSH
39230: LD_VAR 0 3
39234: PUSH
39235: LD_INT 0
39237: PUSH
39238: LD_INT 0
39240: PUSH
39241: LD_INT 0
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PPUSH
39257: CALL_OW 447
// end ;
39261: LD_VAR 0 2
39265: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
39266: LD_INT 0
39268: PPUSH
39269: PPUSH
39270: PPUSH
// tmp := [ ] ;
39271: LD_ADDR_VAR 0 5
39275: PUSH
39276: EMPTY
39277: ST_TO_ADDR
// for i in units do
39278: LD_ADDR_VAR 0 4
39282: PUSH
39283: LD_VAR 0 1
39287: PUSH
39288: FOR_IN
39289: IFFALSE 39327
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
39291: LD_ADDR_VAR 0 5
39295: PUSH
39296: LD_VAR 0 5
39300: PPUSH
39301: LD_VAR 0 5
39305: PUSH
39306: LD_INT 1
39308: PLUS
39309: PPUSH
39310: LD_VAR 0 4
39314: PPUSH
39315: CALL_OW 256
39319: PPUSH
39320: CALL_OW 2
39324: ST_TO_ADDR
39325: GO 39288
39327: POP
39328: POP
// if not tmp then
39329: LD_VAR 0 5
39333: NOT
39334: IFFALSE 39338
// exit ;
39336: GO 39386
// if asc then
39338: LD_VAR 0 2
39342: IFFALSE 39366
// result := SortListByListAsc ( units , tmp ) else
39344: LD_ADDR_VAR 0 3
39348: PUSH
39349: LD_VAR 0 1
39353: PPUSH
39354: LD_VAR 0 5
39358: PPUSH
39359: CALL_OW 76
39363: ST_TO_ADDR
39364: GO 39386
// result := SortListByListDesc ( units , tmp ) ;
39366: LD_ADDR_VAR 0 3
39370: PUSH
39371: LD_VAR 0 1
39375: PPUSH
39376: LD_VAR 0 5
39380: PPUSH
39381: CALL_OW 77
39385: ST_TO_ADDR
// end ;
39386: LD_VAR 0 3
39390: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
39391: LD_INT 0
39393: PPUSH
39394: PPUSH
// task := GetTaskList ( mech ) ;
39395: LD_ADDR_VAR 0 4
39399: PUSH
39400: LD_VAR 0 1
39404: PPUSH
39405: CALL_OW 437
39409: ST_TO_ADDR
// if not task then
39410: LD_VAR 0 4
39414: NOT
39415: IFFALSE 39419
// exit ;
39417: GO 39461
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
39419: LD_ADDR_VAR 0 3
39423: PUSH
39424: LD_VAR 0 4
39428: PUSH
39429: LD_INT 1
39431: ARRAY
39432: PUSH
39433: LD_INT 1
39435: ARRAY
39436: PUSH
39437: LD_STRING r
39439: EQUAL
39440: PUSH
39441: LD_VAR 0 4
39445: PUSH
39446: LD_INT 1
39448: ARRAY
39449: PUSH
39450: LD_INT 4
39452: ARRAY
39453: PUSH
39454: LD_VAR 0 2
39458: EQUAL
39459: AND
39460: ST_TO_ADDR
// end ;
39461: LD_VAR 0 3
39465: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
39466: LD_INT 0
39468: PPUSH
// SetDir ( unit , d ) ;
39469: LD_VAR 0 1
39473: PPUSH
39474: LD_VAR 0 4
39478: PPUSH
39479: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
39483: LD_VAR 0 1
39487: PPUSH
39488: LD_VAR 0 2
39492: PPUSH
39493: LD_VAR 0 3
39497: PPUSH
39498: LD_VAR 0 5
39502: PPUSH
39503: CALL_OW 48
// end ;
39507: LD_VAR 0 6
39511: RET
// export function ToNaturalNumber ( number ) ; begin
39512: LD_INT 0
39514: PPUSH
// result := number div 1 ;
39515: LD_ADDR_VAR 0 2
39519: PUSH
39520: LD_VAR 0 1
39524: PUSH
39525: LD_INT 1
39527: DIV
39528: ST_TO_ADDR
// if number < 0 then
39529: LD_VAR 0 1
39533: PUSH
39534: LD_INT 0
39536: LESS
39537: IFFALSE 39547
// result := 0 ;
39539: LD_ADDR_VAR 0 2
39543: PUSH
39544: LD_INT 0
39546: ST_TO_ADDR
// end ;
39547: LD_VAR 0 2
39551: RET
// export function SortByClass ( units , class ) ; var un ; begin
39552: LD_INT 0
39554: PPUSH
39555: PPUSH
// if not units or not class then
39556: LD_VAR 0 1
39560: NOT
39561: PUSH
39562: LD_VAR 0 2
39566: NOT
39567: OR
39568: IFFALSE 39572
// exit ;
39570: GO 39667
// result := [ ] ;
39572: LD_ADDR_VAR 0 3
39576: PUSH
39577: EMPTY
39578: ST_TO_ADDR
// for un in units do
39579: LD_ADDR_VAR 0 4
39583: PUSH
39584: LD_VAR 0 1
39588: PUSH
39589: FOR_IN
39590: IFFALSE 39665
// if GetClass ( un ) = class then
39592: LD_VAR 0 4
39596: PPUSH
39597: CALL_OW 257
39601: PUSH
39602: LD_VAR 0 2
39606: EQUAL
39607: IFFALSE 39634
// result := Insert ( result , 1 , un ) else
39609: LD_ADDR_VAR 0 3
39613: PUSH
39614: LD_VAR 0 3
39618: PPUSH
39619: LD_INT 1
39621: PPUSH
39622: LD_VAR 0 4
39626: PPUSH
39627: CALL_OW 2
39631: ST_TO_ADDR
39632: GO 39663
// result := Replace ( result , result + 1 , un ) ;
39634: LD_ADDR_VAR 0 3
39638: PUSH
39639: LD_VAR 0 3
39643: PPUSH
39644: LD_VAR 0 3
39648: PUSH
39649: LD_INT 1
39651: PLUS
39652: PPUSH
39653: LD_VAR 0 4
39657: PPUSH
39658: CALL_OW 1
39662: ST_TO_ADDR
39663: GO 39589
39665: POP
39666: POP
// end ;
39667: LD_VAR 0 3
39671: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
39672: LD_INT 0
39674: PPUSH
39675: PPUSH
39676: PPUSH
39677: PPUSH
39678: PPUSH
39679: PPUSH
39680: PPUSH
// result := [ ] ;
39681: LD_ADDR_VAR 0 4
39685: PUSH
39686: EMPTY
39687: ST_TO_ADDR
// if x - r < 0 then
39688: LD_VAR 0 1
39692: PUSH
39693: LD_VAR 0 3
39697: MINUS
39698: PUSH
39699: LD_INT 0
39701: LESS
39702: IFFALSE 39714
// min_x := 0 else
39704: LD_ADDR_VAR 0 8
39708: PUSH
39709: LD_INT 0
39711: ST_TO_ADDR
39712: GO 39730
// min_x := x - r ;
39714: LD_ADDR_VAR 0 8
39718: PUSH
39719: LD_VAR 0 1
39723: PUSH
39724: LD_VAR 0 3
39728: MINUS
39729: ST_TO_ADDR
// if y - r < 0 then
39730: LD_VAR 0 2
39734: PUSH
39735: LD_VAR 0 3
39739: MINUS
39740: PUSH
39741: LD_INT 0
39743: LESS
39744: IFFALSE 39756
// min_y := 0 else
39746: LD_ADDR_VAR 0 7
39750: PUSH
39751: LD_INT 0
39753: ST_TO_ADDR
39754: GO 39772
// min_y := y - r ;
39756: LD_ADDR_VAR 0 7
39760: PUSH
39761: LD_VAR 0 2
39765: PUSH
39766: LD_VAR 0 3
39770: MINUS
39771: ST_TO_ADDR
// max_x := x + r ;
39772: LD_ADDR_VAR 0 9
39776: PUSH
39777: LD_VAR 0 1
39781: PUSH
39782: LD_VAR 0 3
39786: PLUS
39787: ST_TO_ADDR
// max_y := y + r ;
39788: LD_ADDR_VAR 0 10
39792: PUSH
39793: LD_VAR 0 2
39797: PUSH
39798: LD_VAR 0 3
39802: PLUS
39803: ST_TO_ADDR
// for _x = min_x to max_x do
39804: LD_ADDR_VAR 0 5
39808: PUSH
39809: DOUBLE
39810: LD_VAR 0 8
39814: DEC
39815: ST_TO_ADDR
39816: LD_VAR 0 9
39820: PUSH
39821: FOR_TO
39822: IFFALSE 39923
// for _y = min_y to max_y do
39824: LD_ADDR_VAR 0 6
39828: PUSH
39829: DOUBLE
39830: LD_VAR 0 7
39834: DEC
39835: ST_TO_ADDR
39836: LD_VAR 0 10
39840: PUSH
39841: FOR_TO
39842: IFFALSE 39919
// begin if not ValidHex ( _x , _y ) then
39844: LD_VAR 0 5
39848: PPUSH
39849: LD_VAR 0 6
39853: PPUSH
39854: CALL_OW 488
39858: NOT
39859: IFFALSE 39863
// continue ;
39861: GO 39841
// if GetResourceTypeXY ( _x , _y ) then
39863: LD_VAR 0 5
39867: PPUSH
39868: LD_VAR 0 6
39872: PPUSH
39873: CALL_OW 283
39877: IFFALSE 39917
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
39879: LD_ADDR_VAR 0 4
39883: PUSH
39884: LD_VAR 0 4
39888: PPUSH
39889: LD_VAR 0 4
39893: PUSH
39894: LD_INT 1
39896: PLUS
39897: PPUSH
39898: LD_VAR 0 5
39902: PUSH
39903: LD_VAR 0 6
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PPUSH
39912: CALL_OW 1
39916: ST_TO_ADDR
// end ;
39917: GO 39841
39919: POP
39920: POP
39921: GO 39821
39923: POP
39924: POP
// end ;
39925: LD_VAR 0 4
39929: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
39930: LD_INT 0
39932: PPUSH
39933: PPUSH
39934: PPUSH
39935: PPUSH
39936: PPUSH
39937: PPUSH
39938: PPUSH
39939: PPUSH
// if not units then
39940: LD_VAR 0 1
39944: NOT
39945: IFFALSE 39949
// exit ;
39947: GO 40473
// result := UnitFilter ( units , [ f_ok ] ) ;
39949: LD_ADDR_VAR 0 3
39953: PUSH
39954: LD_VAR 0 1
39958: PPUSH
39959: LD_INT 50
39961: PUSH
39962: EMPTY
39963: LIST
39964: PPUSH
39965: CALL_OW 72
39969: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
39970: LD_ADDR_VAR 0 8
39974: PUSH
39975: LD_VAR 0 1
39979: PUSH
39980: LD_INT 1
39982: ARRAY
39983: PPUSH
39984: CALL_OW 255
39988: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
39989: LD_ADDR_VAR 0 10
39993: PUSH
39994: LD_INT 29
39996: PUSH
39997: LD_INT 91
39999: PUSH
40000: LD_INT 49
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: LIST
40007: ST_TO_ADDR
// if not result then
40008: LD_VAR 0 3
40012: NOT
40013: IFFALSE 40017
// exit ;
40015: GO 40473
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
40017: LD_ADDR_VAR 0 5
40021: PUSH
40022: LD_INT 81
40024: PUSH
40025: LD_VAR 0 8
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PPUSH
40034: CALL_OW 69
40038: ST_TO_ADDR
// for i in result do
40039: LD_ADDR_VAR 0 4
40043: PUSH
40044: LD_VAR 0 3
40048: PUSH
40049: FOR_IN
40050: IFFALSE 40471
// begin tag := GetTag ( i ) + 1 ;
40052: LD_ADDR_VAR 0 9
40056: PUSH
40057: LD_VAR 0 4
40061: PPUSH
40062: CALL_OW 110
40066: PUSH
40067: LD_INT 1
40069: PLUS
40070: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
40071: LD_ADDR_VAR 0 7
40075: PUSH
40076: LD_VAR 0 4
40080: PPUSH
40081: CALL_OW 250
40085: PPUSH
40086: LD_VAR 0 4
40090: PPUSH
40091: CALL_OW 251
40095: PPUSH
40096: LD_INT 6
40098: PPUSH
40099: CALL 39672 0 3
40103: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
40104: LD_VAR 0 4
40108: PPUSH
40109: CALL_OW 247
40113: PUSH
40114: LD_INT 2
40116: EQUAL
40117: PUSH
40118: LD_VAR 0 7
40122: AND
40123: PUSH
40124: LD_VAR 0 4
40128: PPUSH
40129: CALL_OW 264
40133: PUSH
40134: LD_VAR 0 10
40138: IN
40139: NOT
40140: AND
40141: IFFALSE 40180
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
40143: LD_VAR 0 4
40147: PPUSH
40148: LD_VAR 0 7
40152: PUSH
40153: LD_INT 1
40155: ARRAY
40156: PUSH
40157: LD_INT 1
40159: ARRAY
40160: PPUSH
40161: LD_VAR 0 7
40165: PUSH
40166: LD_INT 1
40168: ARRAY
40169: PUSH
40170: LD_INT 2
40172: ARRAY
40173: PPUSH
40174: CALL_OW 116
40178: GO 40469
// if path > tag then
40180: LD_VAR 0 2
40184: PUSH
40185: LD_VAR 0 9
40189: GREATER
40190: IFFALSE 40398
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
40192: LD_ADDR_VAR 0 6
40196: PUSH
40197: LD_VAR 0 5
40201: PPUSH
40202: LD_INT 91
40204: PUSH
40205: LD_VAR 0 4
40209: PUSH
40210: LD_INT 8
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: LIST
40217: PPUSH
40218: CALL_OW 72
40222: ST_TO_ADDR
// if nearEnemy then
40223: LD_VAR 0 6
40227: IFFALSE 40296
// begin if GetWeapon ( i ) = ru_time_lapser then
40229: LD_VAR 0 4
40233: PPUSH
40234: CALL_OW 264
40238: PUSH
40239: LD_INT 49
40241: EQUAL
40242: IFFALSE 40270
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
40244: LD_VAR 0 4
40248: PPUSH
40249: LD_VAR 0 6
40253: PPUSH
40254: LD_VAR 0 4
40258: PPUSH
40259: CALL_OW 74
40263: PPUSH
40264: CALL_OW 112
40268: GO 40294
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
40270: LD_VAR 0 4
40274: PPUSH
40275: LD_VAR 0 6
40279: PPUSH
40280: LD_VAR 0 4
40284: PPUSH
40285: CALL_OW 74
40289: PPUSH
40290: CALL 41398 0 2
// end else
40294: GO 40396
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
40296: LD_VAR 0 4
40300: PPUSH
40301: LD_VAR 0 2
40305: PUSH
40306: LD_VAR 0 9
40310: ARRAY
40311: PUSH
40312: LD_INT 1
40314: ARRAY
40315: PPUSH
40316: LD_VAR 0 2
40320: PUSH
40321: LD_VAR 0 9
40325: ARRAY
40326: PUSH
40327: LD_INT 2
40329: ARRAY
40330: PPUSH
40331: CALL_OW 297
40335: PUSH
40336: LD_INT 6
40338: GREATER
40339: IFFALSE 40382
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
40341: LD_VAR 0 4
40345: PPUSH
40346: LD_VAR 0 2
40350: PUSH
40351: LD_VAR 0 9
40355: ARRAY
40356: PUSH
40357: LD_INT 1
40359: ARRAY
40360: PPUSH
40361: LD_VAR 0 2
40365: PUSH
40366: LD_VAR 0 9
40370: ARRAY
40371: PUSH
40372: LD_INT 2
40374: ARRAY
40375: PPUSH
40376: CALL_OW 114
40380: GO 40396
// SetTag ( i , tag ) ;
40382: LD_VAR 0 4
40386: PPUSH
40387: LD_VAR 0 9
40391: PPUSH
40392: CALL_OW 109
// end else
40396: GO 40469
// if enemy then
40398: LD_VAR 0 5
40402: IFFALSE 40469
// begin if GetWeapon ( i ) = ru_time_lapser then
40404: LD_VAR 0 4
40408: PPUSH
40409: CALL_OW 264
40413: PUSH
40414: LD_INT 49
40416: EQUAL
40417: IFFALSE 40445
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
40419: LD_VAR 0 4
40423: PPUSH
40424: LD_VAR 0 5
40428: PPUSH
40429: LD_VAR 0 4
40433: PPUSH
40434: CALL_OW 74
40438: PPUSH
40439: CALL_OW 112
40443: GO 40469
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
40445: LD_VAR 0 4
40449: PPUSH
40450: LD_VAR 0 5
40454: PPUSH
40455: LD_VAR 0 4
40459: PPUSH
40460: CALL_OW 74
40464: PPUSH
40465: CALL 41398 0 2
// end ; end ;
40469: GO 40049
40471: POP
40472: POP
// end ;
40473: LD_VAR 0 3
40477: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
40478: LD_INT 0
40480: PPUSH
40481: PPUSH
40482: PPUSH
// if not unit or IsInUnit ( unit ) then
40483: LD_VAR 0 1
40487: NOT
40488: PUSH
40489: LD_VAR 0 1
40493: PPUSH
40494: CALL_OW 310
40498: OR
40499: IFFALSE 40503
// exit ;
40501: GO 40594
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
40503: LD_ADDR_VAR 0 4
40507: PUSH
40508: LD_VAR 0 1
40512: PPUSH
40513: CALL_OW 250
40517: PPUSH
40518: LD_VAR 0 2
40522: PPUSH
40523: LD_INT 1
40525: PPUSH
40526: CALL_OW 272
40530: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
40531: LD_ADDR_VAR 0 5
40535: PUSH
40536: LD_VAR 0 1
40540: PPUSH
40541: CALL_OW 251
40545: PPUSH
40546: LD_VAR 0 2
40550: PPUSH
40551: LD_INT 1
40553: PPUSH
40554: CALL_OW 273
40558: ST_TO_ADDR
// if ValidHex ( x , y ) then
40559: LD_VAR 0 4
40563: PPUSH
40564: LD_VAR 0 5
40568: PPUSH
40569: CALL_OW 488
40573: IFFALSE 40594
// ComTurnXY ( unit , x , y ) ;
40575: LD_VAR 0 1
40579: PPUSH
40580: LD_VAR 0 4
40584: PPUSH
40585: LD_VAR 0 5
40589: PPUSH
40590: CALL_OW 118
// end ;
40594: LD_VAR 0 3
40598: RET
// export function SeeUnits ( side , units ) ; var i ; begin
40599: LD_INT 0
40601: PPUSH
40602: PPUSH
// result := false ;
40603: LD_ADDR_VAR 0 3
40607: PUSH
40608: LD_INT 0
40610: ST_TO_ADDR
// if not units then
40611: LD_VAR 0 2
40615: NOT
40616: IFFALSE 40620
// exit ;
40618: GO 40665
// for i in units do
40620: LD_ADDR_VAR 0 4
40624: PUSH
40625: LD_VAR 0 2
40629: PUSH
40630: FOR_IN
40631: IFFALSE 40663
// if See ( side , i ) then
40633: LD_VAR 0 1
40637: PPUSH
40638: LD_VAR 0 4
40642: PPUSH
40643: CALL_OW 292
40647: IFFALSE 40661
// begin result := true ;
40649: LD_ADDR_VAR 0 3
40653: PUSH
40654: LD_INT 1
40656: ST_TO_ADDR
// exit ;
40657: POP
40658: POP
40659: GO 40665
// end ;
40661: GO 40630
40663: POP
40664: POP
// end ;
40665: LD_VAR 0 3
40669: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
40670: LD_INT 0
40672: PPUSH
40673: PPUSH
40674: PPUSH
40675: PPUSH
// if not unit or not points then
40676: LD_VAR 0 1
40680: NOT
40681: PUSH
40682: LD_VAR 0 2
40686: NOT
40687: OR
40688: IFFALSE 40692
// exit ;
40690: GO 40782
// dist := 99999 ;
40692: LD_ADDR_VAR 0 5
40696: PUSH
40697: LD_INT 99999
40699: ST_TO_ADDR
// for i in points do
40700: LD_ADDR_VAR 0 4
40704: PUSH
40705: LD_VAR 0 2
40709: PUSH
40710: FOR_IN
40711: IFFALSE 40780
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
40713: LD_ADDR_VAR 0 6
40717: PUSH
40718: LD_VAR 0 1
40722: PPUSH
40723: LD_VAR 0 4
40727: PUSH
40728: LD_INT 1
40730: ARRAY
40731: PPUSH
40732: LD_VAR 0 4
40736: PUSH
40737: LD_INT 2
40739: ARRAY
40740: PPUSH
40741: CALL_OW 297
40745: ST_TO_ADDR
// if tmpDist < dist then
40746: LD_VAR 0 6
40750: PUSH
40751: LD_VAR 0 5
40755: LESS
40756: IFFALSE 40778
// begin result := i ;
40758: LD_ADDR_VAR 0 3
40762: PUSH
40763: LD_VAR 0 4
40767: ST_TO_ADDR
// dist := tmpDist ;
40768: LD_ADDR_VAR 0 5
40772: PUSH
40773: LD_VAR 0 6
40777: ST_TO_ADDR
// end ; end ;
40778: GO 40710
40780: POP
40781: POP
// end ;
40782: LD_VAR 0 3
40786: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
40787: LD_INT 0
40789: PPUSH
// uc_side := side ;
40790: LD_ADDR_OWVAR 20
40794: PUSH
40795: LD_VAR 0 1
40799: ST_TO_ADDR
// uc_nation := 3 ;
40800: LD_ADDR_OWVAR 21
40804: PUSH
40805: LD_INT 3
40807: ST_TO_ADDR
// vc_chassis := 25 ;
40808: LD_ADDR_OWVAR 37
40812: PUSH
40813: LD_INT 25
40815: ST_TO_ADDR
// vc_engine := engine_siberite ;
40816: LD_ADDR_OWVAR 39
40820: PUSH
40821: LD_INT 3
40823: ST_TO_ADDR
// vc_control := control_computer ;
40824: LD_ADDR_OWVAR 38
40828: PUSH
40829: LD_INT 3
40831: ST_TO_ADDR
// vc_weapon := 59 ;
40832: LD_ADDR_OWVAR 40
40836: PUSH
40837: LD_INT 59
40839: ST_TO_ADDR
// result := CreateVehicle ;
40840: LD_ADDR_VAR 0 5
40844: PUSH
40845: CALL_OW 45
40849: ST_TO_ADDR
// SetDir ( result , d ) ;
40850: LD_VAR 0 5
40854: PPUSH
40855: LD_VAR 0 4
40859: PPUSH
40860: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
40864: LD_VAR 0 5
40868: PPUSH
40869: LD_VAR 0 2
40873: PPUSH
40874: LD_VAR 0 3
40878: PPUSH
40879: LD_INT 0
40881: PPUSH
40882: CALL_OW 48
// end ;
40886: LD_VAR 0 5
40890: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
40891: LD_INT 0
40893: PPUSH
40894: PPUSH
40895: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
40896: LD_ADDR_VAR 0 2
40900: PUSH
40901: LD_INT 0
40903: PUSH
40904: LD_INT 0
40906: PUSH
40907: LD_INT 0
40909: PUSH
40910: LD_INT 0
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
40919: LD_VAR 0 1
40923: NOT
40924: PUSH
40925: LD_VAR 0 1
40929: PPUSH
40930: CALL_OW 264
40934: PUSH
40935: LD_INT 12
40937: PUSH
40938: LD_INT 51
40940: PUSH
40941: LD_INT 32
40943: PUSH
40944: LD_INT 89
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: IN
40953: NOT
40954: OR
40955: IFFALSE 40959
// exit ;
40957: GO 41057
// for i := 1 to 3 do
40959: LD_ADDR_VAR 0 3
40963: PUSH
40964: DOUBLE
40965: LD_INT 1
40967: DEC
40968: ST_TO_ADDR
40969: LD_INT 3
40971: PUSH
40972: FOR_TO
40973: IFFALSE 41055
// begin tmp := GetCargo ( cargo , i ) ;
40975: LD_ADDR_VAR 0 4
40979: PUSH
40980: LD_VAR 0 1
40984: PPUSH
40985: LD_VAR 0 3
40989: PPUSH
40990: CALL_OW 289
40994: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
40995: LD_ADDR_VAR 0 2
40999: PUSH
41000: LD_VAR 0 2
41004: PPUSH
41005: LD_VAR 0 3
41009: PPUSH
41010: LD_VAR 0 4
41014: PPUSH
41015: CALL_OW 1
41019: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
41020: LD_ADDR_VAR 0 2
41024: PUSH
41025: LD_VAR 0 2
41029: PPUSH
41030: LD_INT 4
41032: PPUSH
41033: LD_VAR 0 2
41037: PUSH
41038: LD_INT 4
41040: ARRAY
41041: PUSH
41042: LD_VAR 0 4
41046: PLUS
41047: PPUSH
41048: CALL_OW 1
41052: ST_TO_ADDR
// end ;
41053: GO 40972
41055: POP
41056: POP
// end ;
41057: LD_VAR 0 2
41061: RET
// export function Length ( array ) ; begin
41062: LD_INT 0
41064: PPUSH
// result := array + 0 ;
41065: LD_ADDR_VAR 0 2
41069: PUSH
41070: LD_VAR 0 1
41074: PUSH
41075: LD_INT 0
41077: PLUS
41078: ST_TO_ADDR
// end ;
41079: LD_VAR 0 2
41083: RET
// export function PrepareArray ( array ) ; begin
41084: LD_INT 0
41086: PPUSH
// result := array diff 0 ;
41087: LD_ADDR_VAR 0 2
41091: PUSH
41092: LD_VAR 0 1
41096: PUSH
41097: LD_INT 0
41099: DIFF
41100: ST_TO_ADDR
// if not result [ 1 ] then
41101: LD_VAR 0 2
41105: PUSH
41106: LD_INT 1
41108: ARRAY
41109: NOT
41110: IFFALSE 41130
// result := Delete ( result , 1 ) ;
41112: LD_ADDR_VAR 0 2
41116: PUSH
41117: LD_VAR 0 2
41121: PPUSH
41122: LD_INT 1
41124: PPUSH
41125: CALL_OW 3
41129: ST_TO_ADDR
// end ;
41130: LD_VAR 0 2
41134: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
41135: LD_INT 0
41137: PPUSH
41138: PPUSH
41139: PPUSH
41140: PPUSH
// sibRocketRange := 25 ;
41141: LD_ADDR_VAR 0 6
41145: PUSH
41146: LD_INT 25
41148: ST_TO_ADDR
// result := false ;
41149: LD_ADDR_VAR 0 4
41153: PUSH
41154: LD_INT 0
41156: ST_TO_ADDR
// for i := 0 to 5 do
41157: LD_ADDR_VAR 0 5
41161: PUSH
41162: DOUBLE
41163: LD_INT 0
41165: DEC
41166: ST_TO_ADDR
41167: LD_INT 5
41169: PUSH
41170: FOR_TO
41171: IFFALSE 41238
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
41173: LD_VAR 0 1
41177: PPUSH
41178: LD_VAR 0 5
41182: PPUSH
41183: LD_VAR 0 6
41187: PPUSH
41188: CALL_OW 272
41192: PPUSH
41193: LD_VAR 0 2
41197: PPUSH
41198: LD_VAR 0 5
41202: PPUSH
41203: LD_VAR 0 6
41207: PPUSH
41208: CALL_OW 273
41212: PPUSH
41213: LD_VAR 0 3
41217: PPUSH
41218: CALL_OW 309
41222: IFFALSE 41236
// begin result := true ;
41224: LD_ADDR_VAR 0 4
41228: PUSH
41229: LD_INT 1
41231: ST_TO_ADDR
// exit ;
41232: POP
41233: POP
41234: GO 41240
// end ;
41236: GO 41170
41238: POP
41239: POP
// end ;
41240: LD_VAR 0 4
41244: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
41245: LD_INT 0
41247: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
41248: LD_VAR 0 1
41252: PPUSH
41253: LD_VAR 0 2
41257: PPUSH
41258: LD_INT 0
41260: PPUSH
41261: LD_INT 0
41263: PPUSH
41264: LD_INT 1
41266: PPUSH
41267: LD_INT 0
41269: PPUSH
41270: CALL_OW 587
// end ;
41274: LD_VAR 0 3
41278: RET
// export function CenterOnNow ( unit ) ; begin
41279: LD_INT 0
41281: PPUSH
// result := IsInUnit ( unit ) ;
41282: LD_ADDR_VAR 0 2
41286: PUSH
41287: LD_VAR 0 1
41291: PPUSH
41292: CALL_OW 310
41296: ST_TO_ADDR
// if not result then
41297: LD_VAR 0 2
41301: NOT
41302: IFFALSE 41314
// result := unit ;
41304: LD_ADDR_VAR 0 2
41308: PUSH
41309: LD_VAR 0 1
41313: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
41314: LD_VAR 0 1
41318: PPUSH
41319: CALL_OW 87
// end ;
41323: LD_VAR 0 2
41327: RET
// export function ComMoveHex ( unit , hex ) ; begin
41328: LD_INT 0
41330: PPUSH
// if not hex then
41331: LD_VAR 0 2
41335: NOT
41336: IFFALSE 41340
// exit ;
41338: GO 41393
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
41340: LD_VAR 0 2
41344: PUSH
41345: LD_INT 1
41347: ARRAY
41348: PPUSH
41349: LD_VAR 0 2
41353: PUSH
41354: LD_INT 2
41356: ARRAY
41357: PPUSH
41358: CALL_OW 428
41362: IFFALSE 41366
// exit ;
41364: GO 41393
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
41366: LD_VAR 0 1
41370: PPUSH
41371: LD_VAR 0 2
41375: PUSH
41376: LD_INT 1
41378: ARRAY
41379: PPUSH
41380: LD_VAR 0 2
41384: PUSH
41385: LD_INT 2
41387: ARRAY
41388: PPUSH
41389: CALL_OW 111
// end ;
41393: LD_VAR 0 3
41397: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
41398: LD_INT 0
41400: PPUSH
41401: PPUSH
41402: PPUSH
// if not unit or not enemy then
41403: LD_VAR 0 1
41407: NOT
41408: PUSH
41409: LD_VAR 0 2
41413: NOT
41414: OR
41415: IFFALSE 41419
// exit ;
41417: GO 41543
// x := GetX ( enemy ) ;
41419: LD_ADDR_VAR 0 4
41423: PUSH
41424: LD_VAR 0 2
41428: PPUSH
41429: CALL_OW 250
41433: ST_TO_ADDR
// y := GetY ( enemy ) ;
41434: LD_ADDR_VAR 0 5
41438: PUSH
41439: LD_VAR 0 2
41443: PPUSH
41444: CALL_OW 251
41448: ST_TO_ADDR
// if ValidHex ( x , y ) then
41449: LD_VAR 0 4
41453: PPUSH
41454: LD_VAR 0 5
41458: PPUSH
41459: CALL_OW 488
41463: IFFALSE 41543
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
41465: LD_VAR 0 2
41469: PPUSH
41470: CALL_OW 247
41474: PUSH
41475: LD_INT 3
41477: PUSH
41478: LD_INT 2
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: IN
41485: PUSH
41486: LD_VAR 0 1
41490: PPUSH
41491: CALL_OW 255
41495: PPUSH
41496: LD_VAR 0 2
41500: PPUSH
41501: CALL_OW 292
41505: AND
41506: IFFALSE 41524
// ComAttackUnit ( unit , enemy ) else
41508: LD_VAR 0 1
41512: PPUSH
41513: LD_VAR 0 2
41517: PPUSH
41518: CALL_OW 115
41522: GO 41543
// ComAgressiveMove ( unit , x , y ) ;
41524: LD_VAR 0 1
41528: PPUSH
41529: LD_VAR 0 4
41533: PPUSH
41534: LD_VAR 0 5
41538: PPUSH
41539: CALL_OW 114
// end ; end_of_file end_of_file
41543: LD_VAR 0 3
41547: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
41548: LD_VAR 0 1
41552: PPUSH
41553: LD_VAR 0 2
41557: PPUSH
41558: LD_VAR 0 3
41562: PPUSH
41563: LD_VAR 0 4
41567: PPUSH
41568: LD_VAR 0 5
41572: PPUSH
41573: LD_VAR 0 6
41577: PPUSH
41578: CALL 41762 0 6
// end ;
41582: PPOPN 6
41584: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
41585: LD_INT 0
41587: PPUSH
// begin if not units then
41588: LD_VAR 0 1
41592: NOT
41593: IFFALSE 41597
// exit ;
41595: GO 41597
// end ;
41597: PPOPN 7
41599: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
41600: CALL 41666 0 0
// end ; end_of_file
41604: PPOPN 1
41606: END
// export globalGameSaveCounter ; every 0 0$1 do
41607: GO 41609
41609: DISABLE
// begin enable ;
41610: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
41611: LD_STRING updateTimer(
41613: PUSH
41614: LD_OWVAR 1
41618: STR
41619: PUSH
41620: LD_STRING );
41622: STR
41623: PPUSH
41624: CALL_OW 559
// end ;
41628: END
// every 0 0$1 do
41629: GO 41631
41631: DISABLE
// begin globalGameSaveCounter := 0 ;
41632: LD_ADDR_EXP 1
41636: PUSH
41637: LD_INT 0
41639: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
41640: LD_STRING setGameSaveCounter(0)
41642: PPUSH
41643: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
41647: LD_STRING initStreamRollete();
41649: PPUSH
41650: CALL_OW 559
// InitStreamMode ;
41654: CALL 42980 0 0
// DefineStreamItems ( false ) ;
41658: LD_INT 0
41660: PPUSH
41661: CALL 43444 0 1
// end ;
41665: END
// export function SOS_MapStart ( ) ; begin
41666: LD_INT 0
41668: PPUSH
// if streamModeActive then
41669: LD_EXP 2
41673: IFFALSE 41682
// DefineStreamItems ( true ) ;
41675: LD_INT 1
41677: PPUSH
41678: CALL 43444 0 1
// UpdateLuaVariables ( ) ;
41682: CALL 41699 0 0
// UpdateFactoryWaypoints ( ) ;
41686: CALL 56313 0 0
// UpdateWarehouseGatheringPoints ( ) ;
41690: CALL 56570 0 0
// end ;
41694: LD_VAR 0 1
41698: RET
// function UpdateLuaVariables ( ) ; begin
41699: LD_INT 0
41701: PPUSH
// if globalGameSaveCounter then
41702: LD_EXP 1
41706: IFFALSE 41740
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
41708: LD_ADDR_EXP 1
41712: PUSH
41713: LD_EXP 1
41717: PPUSH
41718: CALL 38687 0 1
41722: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
41723: LD_STRING setGameSaveCounter(
41725: PUSH
41726: LD_EXP 1
41730: STR
41731: PUSH
41732: LD_STRING )
41734: STR
41735: PPUSH
41736: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
41740: LD_STRING setGameDifficulty(
41742: PUSH
41743: LD_OWVAR 67
41747: STR
41748: PUSH
41749: LD_STRING )
41751: STR
41752: PPUSH
41753: CALL_OW 559
// end ;
41757: LD_VAR 0 1
41761: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
41762: LD_INT 0
41764: PPUSH
// if p2 = stream_mode then
41765: LD_VAR 0 2
41769: PUSH
41770: LD_INT 100
41772: EQUAL
41773: IFFALSE 42776
// begin if not StreamModeActive then
41775: LD_EXP 2
41779: NOT
41780: IFFALSE 41790
// StreamModeActive := true ;
41782: LD_ADDR_EXP 2
41786: PUSH
41787: LD_INT 1
41789: ST_TO_ADDR
// if p3 = 0 then
41790: LD_VAR 0 3
41794: PUSH
41795: LD_INT 0
41797: EQUAL
41798: IFFALSE 41804
// InitStreamMode ;
41800: CALL 42980 0 0
// if p3 = 1 then
41804: LD_VAR 0 3
41808: PUSH
41809: LD_INT 1
41811: EQUAL
41812: IFFALSE 41822
// sRocket := true ;
41814: LD_ADDR_EXP 7
41818: PUSH
41819: LD_INT 1
41821: ST_TO_ADDR
// if p3 = 2 then
41822: LD_VAR 0 3
41826: PUSH
41827: LD_INT 2
41829: EQUAL
41830: IFFALSE 41840
// sSpeed := true ;
41832: LD_ADDR_EXP 6
41836: PUSH
41837: LD_INT 1
41839: ST_TO_ADDR
// if p3 = 3 then
41840: LD_VAR 0 3
41844: PUSH
41845: LD_INT 3
41847: EQUAL
41848: IFFALSE 41858
// sEngine := true ;
41850: LD_ADDR_EXP 8
41854: PUSH
41855: LD_INT 1
41857: ST_TO_ADDR
// if p3 = 4 then
41858: LD_VAR 0 3
41862: PUSH
41863: LD_INT 4
41865: EQUAL
41866: IFFALSE 41876
// sSpec := true ;
41868: LD_ADDR_EXP 5
41872: PUSH
41873: LD_INT 1
41875: ST_TO_ADDR
// if p3 = 5 then
41876: LD_VAR 0 3
41880: PUSH
41881: LD_INT 5
41883: EQUAL
41884: IFFALSE 41894
// sLevel := true ;
41886: LD_ADDR_EXP 9
41890: PUSH
41891: LD_INT 1
41893: ST_TO_ADDR
// if p3 = 6 then
41894: LD_VAR 0 3
41898: PUSH
41899: LD_INT 6
41901: EQUAL
41902: IFFALSE 41912
// sArmoury := true ;
41904: LD_ADDR_EXP 10
41908: PUSH
41909: LD_INT 1
41911: ST_TO_ADDR
// if p3 = 7 then
41912: LD_VAR 0 3
41916: PUSH
41917: LD_INT 7
41919: EQUAL
41920: IFFALSE 41930
// sRadar := true ;
41922: LD_ADDR_EXP 11
41926: PUSH
41927: LD_INT 1
41929: ST_TO_ADDR
// if p3 = 8 then
41930: LD_VAR 0 3
41934: PUSH
41935: LD_INT 8
41937: EQUAL
41938: IFFALSE 41948
// sBunker := true ;
41940: LD_ADDR_EXP 12
41944: PUSH
41945: LD_INT 1
41947: ST_TO_ADDR
// if p3 = 9 then
41948: LD_VAR 0 3
41952: PUSH
41953: LD_INT 9
41955: EQUAL
41956: IFFALSE 41966
// sHack := true ;
41958: LD_ADDR_EXP 13
41962: PUSH
41963: LD_INT 1
41965: ST_TO_ADDR
// if p3 = 10 then
41966: LD_VAR 0 3
41970: PUSH
41971: LD_INT 10
41973: EQUAL
41974: IFFALSE 41984
// sFire := true ;
41976: LD_ADDR_EXP 14
41980: PUSH
41981: LD_INT 1
41983: ST_TO_ADDR
// if p3 = 11 then
41984: LD_VAR 0 3
41988: PUSH
41989: LD_INT 11
41991: EQUAL
41992: IFFALSE 42002
// sRefresh := true ;
41994: LD_ADDR_EXP 15
41998: PUSH
41999: LD_INT 1
42001: ST_TO_ADDR
// if p3 = 12 then
42002: LD_VAR 0 3
42006: PUSH
42007: LD_INT 12
42009: EQUAL
42010: IFFALSE 42020
// sExp := true ;
42012: LD_ADDR_EXP 16
42016: PUSH
42017: LD_INT 1
42019: ST_TO_ADDR
// if p3 = 13 then
42020: LD_VAR 0 3
42024: PUSH
42025: LD_INT 13
42027: EQUAL
42028: IFFALSE 42038
// sDepot := true ;
42030: LD_ADDR_EXP 17
42034: PUSH
42035: LD_INT 1
42037: ST_TO_ADDR
// if p3 = 14 then
42038: LD_VAR 0 3
42042: PUSH
42043: LD_INT 14
42045: EQUAL
42046: IFFALSE 42056
// sFlag := true ;
42048: LD_ADDR_EXP 18
42052: PUSH
42053: LD_INT 1
42055: ST_TO_ADDR
// if p3 = 15 then
42056: LD_VAR 0 3
42060: PUSH
42061: LD_INT 15
42063: EQUAL
42064: IFFALSE 42074
// sKamikadze := true ;
42066: LD_ADDR_EXP 26
42070: PUSH
42071: LD_INT 1
42073: ST_TO_ADDR
// if p3 = 16 then
42074: LD_VAR 0 3
42078: PUSH
42079: LD_INT 16
42081: EQUAL
42082: IFFALSE 42092
// sTroll := true ;
42084: LD_ADDR_EXP 27
42088: PUSH
42089: LD_INT 1
42091: ST_TO_ADDR
// if p3 = 17 then
42092: LD_VAR 0 3
42096: PUSH
42097: LD_INT 17
42099: EQUAL
42100: IFFALSE 42110
// sSlow := true ;
42102: LD_ADDR_EXP 28
42106: PUSH
42107: LD_INT 1
42109: ST_TO_ADDR
// if p3 = 18 then
42110: LD_VAR 0 3
42114: PUSH
42115: LD_INT 18
42117: EQUAL
42118: IFFALSE 42128
// sLack := true ;
42120: LD_ADDR_EXP 29
42124: PUSH
42125: LD_INT 1
42127: ST_TO_ADDR
// if p3 = 19 then
42128: LD_VAR 0 3
42132: PUSH
42133: LD_INT 19
42135: EQUAL
42136: IFFALSE 42146
// sTank := true ;
42138: LD_ADDR_EXP 31
42142: PUSH
42143: LD_INT 1
42145: ST_TO_ADDR
// if p3 = 20 then
42146: LD_VAR 0 3
42150: PUSH
42151: LD_INT 20
42153: EQUAL
42154: IFFALSE 42164
// sRemote := true ;
42156: LD_ADDR_EXP 32
42160: PUSH
42161: LD_INT 1
42163: ST_TO_ADDR
// if p3 = 21 then
42164: LD_VAR 0 3
42168: PUSH
42169: LD_INT 21
42171: EQUAL
42172: IFFALSE 42182
// sPowell := true ;
42174: LD_ADDR_EXP 33
42178: PUSH
42179: LD_INT 1
42181: ST_TO_ADDR
// if p3 = 22 then
42182: LD_VAR 0 3
42186: PUSH
42187: LD_INT 22
42189: EQUAL
42190: IFFALSE 42200
// sTeleport := true ;
42192: LD_ADDR_EXP 36
42196: PUSH
42197: LD_INT 1
42199: ST_TO_ADDR
// if p3 = 23 then
42200: LD_VAR 0 3
42204: PUSH
42205: LD_INT 23
42207: EQUAL
42208: IFFALSE 42218
// sOilTower := true ;
42210: LD_ADDR_EXP 38
42214: PUSH
42215: LD_INT 1
42217: ST_TO_ADDR
// if p3 = 24 then
42218: LD_VAR 0 3
42222: PUSH
42223: LD_INT 24
42225: EQUAL
42226: IFFALSE 42236
// sShovel := true ;
42228: LD_ADDR_EXP 39
42232: PUSH
42233: LD_INT 1
42235: ST_TO_ADDR
// if p3 = 25 then
42236: LD_VAR 0 3
42240: PUSH
42241: LD_INT 25
42243: EQUAL
42244: IFFALSE 42254
// sSheik := true ;
42246: LD_ADDR_EXP 40
42250: PUSH
42251: LD_INT 1
42253: ST_TO_ADDR
// if p3 = 26 then
42254: LD_VAR 0 3
42258: PUSH
42259: LD_INT 26
42261: EQUAL
42262: IFFALSE 42272
// sEarthquake := true ;
42264: LD_ADDR_EXP 42
42268: PUSH
42269: LD_INT 1
42271: ST_TO_ADDR
// if p3 = 27 then
42272: LD_VAR 0 3
42276: PUSH
42277: LD_INT 27
42279: EQUAL
42280: IFFALSE 42290
// sAI := true ;
42282: LD_ADDR_EXP 43
42286: PUSH
42287: LD_INT 1
42289: ST_TO_ADDR
// if p3 = 28 then
42290: LD_VAR 0 3
42294: PUSH
42295: LD_INT 28
42297: EQUAL
42298: IFFALSE 42308
// sCargo := true ;
42300: LD_ADDR_EXP 46
42304: PUSH
42305: LD_INT 1
42307: ST_TO_ADDR
// if p3 = 29 then
42308: LD_VAR 0 3
42312: PUSH
42313: LD_INT 29
42315: EQUAL
42316: IFFALSE 42326
// sDLaser := true ;
42318: LD_ADDR_EXP 47
42322: PUSH
42323: LD_INT 1
42325: ST_TO_ADDR
// if p3 = 30 then
42326: LD_VAR 0 3
42330: PUSH
42331: LD_INT 30
42333: EQUAL
42334: IFFALSE 42344
// sExchange := true ;
42336: LD_ADDR_EXP 48
42340: PUSH
42341: LD_INT 1
42343: ST_TO_ADDR
// if p3 = 31 then
42344: LD_VAR 0 3
42348: PUSH
42349: LD_INT 31
42351: EQUAL
42352: IFFALSE 42362
// sFac := true ;
42354: LD_ADDR_EXP 49
42358: PUSH
42359: LD_INT 1
42361: ST_TO_ADDR
// if p3 = 32 then
42362: LD_VAR 0 3
42366: PUSH
42367: LD_INT 32
42369: EQUAL
42370: IFFALSE 42380
// sPower := true ;
42372: LD_ADDR_EXP 50
42376: PUSH
42377: LD_INT 1
42379: ST_TO_ADDR
// if p3 = 33 then
42380: LD_VAR 0 3
42384: PUSH
42385: LD_INT 33
42387: EQUAL
42388: IFFALSE 42398
// sRandom := true ;
42390: LD_ADDR_EXP 51
42394: PUSH
42395: LD_INT 1
42397: ST_TO_ADDR
// if p3 = 34 then
42398: LD_VAR 0 3
42402: PUSH
42403: LD_INT 34
42405: EQUAL
42406: IFFALSE 42416
// sShield := true ;
42408: LD_ADDR_EXP 52
42412: PUSH
42413: LD_INT 1
42415: ST_TO_ADDR
// if p3 = 35 then
42416: LD_VAR 0 3
42420: PUSH
42421: LD_INT 35
42423: EQUAL
42424: IFFALSE 42434
// sTime := true ;
42426: LD_ADDR_EXP 53
42430: PUSH
42431: LD_INT 1
42433: ST_TO_ADDR
// if p3 = 36 then
42434: LD_VAR 0 3
42438: PUSH
42439: LD_INT 36
42441: EQUAL
42442: IFFALSE 42452
// sTools := true ;
42444: LD_ADDR_EXP 54
42448: PUSH
42449: LD_INT 1
42451: ST_TO_ADDR
// if p3 = 101 then
42452: LD_VAR 0 3
42456: PUSH
42457: LD_INT 101
42459: EQUAL
42460: IFFALSE 42470
// sSold := true ;
42462: LD_ADDR_EXP 19
42466: PUSH
42467: LD_INT 1
42469: ST_TO_ADDR
// if p3 = 102 then
42470: LD_VAR 0 3
42474: PUSH
42475: LD_INT 102
42477: EQUAL
42478: IFFALSE 42488
// sDiff := true ;
42480: LD_ADDR_EXP 20
42484: PUSH
42485: LD_INT 1
42487: ST_TO_ADDR
// if p3 = 103 then
42488: LD_VAR 0 3
42492: PUSH
42493: LD_INT 103
42495: EQUAL
42496: IFFALSE 42506
// sFog := true ;
42498: LD_ADDR_EXP 23
42502: PUSH
42503: LD_INT 1
42505: ST_TO_ADDR
// if p3 = 104 then
42506: LD_VAR 0 3
42510: PUSH
42511: LD_INT 104
42513: EQUAL
42514: IFFALSE 42524
// sReset := true ;
42516: LD_ADDR_EXP 24
42520: PUSH
42521: LD_INT 1
42523: ST_TO_ADDR
// if p3 = 105 then
42524: LD_VAR 0 3
42528: PUSH
42529: LD_INT 105
42531: EQUAL
42532: IFFALSE 42542
// sSun := true ;
42534: LD_ADDR_EXP 25
42538: PUSH
42539: LD_INT 1
42541: ST_TO_ADDR
// if p3 = 106 then
42542: LD_VAR 0 3
42546: PUSH
42547: LD_INT 106
42549: EQUAL
42550: IFFALSE 42560
// sTiger := true ;
42552: LD_ADDR_EXP 21
42556: PUSH
42557: LD_INT 1
42559: ST_TO_ADDR
// if p3 = 107 then
42560: LD_VAR 0 3
42564: PUSH
42565: LD_INT 107
42567: EQUAL
42568: IFFALSE 42578
// sBomb := true ;
42570: LD_ADDR_EXP 22
42574: PUSH
42575: LD_INT 1
42577: ST_TO_ADDR
// if p3 = 108 then
42578: LD_VAR 0 3
42582: PUSH
42583: LD_INT 108
42585: EQUAL
42586: IFFALSE 42596
// sWound := true ;
42588: LD_ADDR_EXP 30
42592: PUSH
42593: LD_INT 1
42595: ST_TO_ADDR
// if p3 = 109 then
42596: LD_VAR 0 3
42600: PUSH
42601: LD_INT 109
42603: EQUAL
42604: IFFALSE 42614
// sBetray := true ;
42606: LD_ADDR_EXP 34
42610: PUSH
42611: LD_INT 1
42613: ST_TO_ADDR
// if p3 = 110 then
42614: LD_VAR 0 3
42618: PUSH
42619: LD_INT 110
42621: EQUAL
42622: IFFALSE 42632
// sContamin := true ;
42624: LD_ADDR_EXP 35
42628: PUSH
42629: LD_INT 1
42631: ST_TO_ADDR
// if p3 = 111 then
42632: LD_VAR 0 3
42636: PUSH
42637: LD_INT 111
42639: EQUAL
42640: IFFALSE 42650
// sOil := true ;
42642: LD_ADDR_EXP 37
42646: PUSH
42647: LD_INT 1
42649: ST_TO_ADDR
// if p3 = 112 then
42650: LD_VAR 0 3
42654: PUSH
42655: LD_INT 112
42657: EQUAL
42658: IFFALSE 42668
// sStu := true ;
42660: LD_ADDR_EXP 41
42664: PUSH
42665: LD_INT 1
42667: ST_TO_ADDR
// if p3 = 113 then
42668: LD_VAR 0 3
42672: PUSH
42673: LD_INT 113
42675: EQUAL
42676: IFFALSE 42686
// sBazooka := true ;
42678: LD_ADDR_EXP 44
42682: PUSH
42683: LD_INT 1
42685: ST_TO_ADDR
// if p3 = 114 then
42686: LD_VAR 0 3
42690: PUSH
42691: LD_INT 114
42693: EQUAL
42694: IFFALSE 42704
// sMortar := true ;
42696: LD_ADDR_EXP 45
42700: PUSH
42701: LD_INT 1
42703: ST_TO_ADDR
// if p3 = 115 then
42704: LD_VAR 0 3
42708: PUSH
42709: LD_INT 115
42711: EQUAL
42712: IFFALSE 42722
// sRanger := true ;
42714: LD_ADDR_EXP 55
42718: PUSH
42719: LD_INT 1
42721: ST_TO_ADDR
// if p3 = 116 then
42722: LD_VAR 0 3
42726: PUSH
42727: LD_INT 116
42729: EQUAL
42730: IFFALSE 42740
// sComputer := true ;
42732: LD_ADDR_EXP 56
42736: PUSH
42737: LD_INT 1
42739: ST_TO_ADDR
// if p3 = 117 then
42740: LD_VAR 0 3
42744: PUSH
42745: LD_INT 117
42747: EQUAL
42748: IFFALSE 42758
// s30 := true ;
42750: LD_ADDR_EXP 57
42754: PUSH
42755: LD_INT 1
42757: ST_TO_ADDR
// if p3 = 118 then
42758: LD_VAR 0 3
42762: PUSH
42763: LD_INT 118
42765: EQUAL
42766: IFFALSE 42776
// s60 := true ;
42768: LD_ADDR_EXP 58
42772: PUSH
42773: LD_INT 1
42775: ST_TO_ADDR
// end ; if p2 = hack_mode then
42776: LD_VAR 0 2
42780: PUSH
42781: LD_INT 101
42783: EQUAL
42784: IFFALSE 42912
// begin case p3 of 1 :
42786: LD_VAR 0 3
42790: PUSH
42791: LD_INT 1
42793: DOUBLE
42794: EQUAL
42795: IFTRUE 42799
42797: GO 42806
42799: POP
// hHackUnlimitedResources ; 2 :
42800: CALL 55059 0 0
42804: GO 42912
42806: LD_INT 2
42808: DOUBLE
42809: EQUAL
42810: IFTRUE 42814
42812: GO 42821
42814: POP
// hHackSetLevel10 ; 3 :
42815: CALL 55192 0 0
42819: GO 42912
42821: LD_INT 3
42823: DOUBLE
42824: EQUAL
42825: IFTRUE 42829
42827: GO 42836
42829: POP
// hHackSetLevel10YourUnits ; 4 :
42830: CALL 55277 0 0
42834: GO 42912
42836: LD_INT 4
42838: DOUBLE
42839: EQUAL
42840: IFTRUE 42844
42842: GO 42851
42844: POP
// hHackInvincible ; 5 :
42845: CALL 55725 0 0
42849: GO 42912
42851: LD_INT 5
42853: DOUBLE
42854: EQUAL
42855: IFTRUE 42859
42857: GO 42866
42859: POP
// hHackInvisible ; 6 :
42860: CALL 55836 0 0
42864: GO 42912
42866: LD_INT 6
42868: DOUBLE
42869: EQUAL
42870: IFTRUE 42874
42872: GO 42881
42874: POP
// hHackChangeYourSide ; 7 :
42875: CALL 55893 0 0
42879: GO 42912
42881: LD_INT 7
42883: DOUBLE
42884: EQUAL
42885: IFTRUE 42889
42887: GO 42896
42889: POP
// hHackChangeUnitSide ; 8 :
42890: CALL 55935 0 0
42894: GO 42912
42896: LD_INT 8
42898: DOUBLE
42899: EQUAL
42900: IFTRUE 42904
42902: GO 42911
42904: POP
// hHackFog ; end ;
42905: CALL 56036 0 0
42909: GO 42912
42911: POP
// end ; if p2 = game_save_mode then
42912: LD_VAR 0 2
42916: PUSH
42917: LD_INT 102
42919: EQUAL
42920: IFFALSE 42975
// begin if p3 = 1 then
42922: LD_VAR 0 3
42926: PUSH
42927: LD_INT 1
42929: EQUAL
42930: IFFALSE 42942
// globalGameSaveCounter := p4 ;
42932: LD_ADDR_EXP 1
42936: PUSH
42937: LD_VAR 0 4
42941: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
42942: LD_VAR 0 3
42946: PUSH
42947: LD_INT 2
42949: EQUAL
42950: PUSH
42951: LD_EXP 1
42955: AND
42956: IFFALSE 42975
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
42958: LD_STRING setGameSaveCounter(
42960: PUSH
42961: LD_EXP 1
42965: STR
42966: PUSH
42967: LD_STRING )
42969: STR
42970: PPUSH
42971: CALL_OW 559
// end ; end ;
42975: LD_VAR 0 7
42979: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
42980: LD_INT 0
42982: PPUSH
// streamModeActive := false ;
42983: LD_ADDR_EXP 2
42987: PUSH
42988: LD_INT 0
42990: ST_TO_ADDR
// normalCounter := 36 ;
42991: LD_ADDR_EXP 3
42995: PUSH
42996: LD_INT 36
42998: ST_TO_ADDR
// hardcoreCounter := 18 ;
42999: LD_ADDR_EXP 4
43003: PUSH
43004: LD_INT 18
43006: ST_TO_ADDR
// sRocket := false ;
43007: LD_ADDR_EXP 7
43011: PUSH
43012: LD_INT 0
43014: ST_TO_ADDR
// sSpeed := false ;
43015: LD_ADDR_EXP 6
43019: PUSH
43020: LD_INT 0
43022: ST_TO_ADDR
// sEngine := false ;
43023: LD_ADDR_EXP 8
43027: PUSH
43028: LD_INT 0
43030: ST_TO_ADDR
// sSpec := false ;
43031: LD_ADDR_EXP 5
43035: PUSH
43036: LD_INT 0
43038: ST_TO_ADDR
// sLevel := false ;
43039: LD_ADDR_EXP 9
43043: PUSH
43044: LD_INT 0
43046: ST_TO_ADDR
// sArmoury := false ;
43047: LD_ADDR_EXP 10
43051: PUSH
43052: LD_INT 0
43054: ST_TO_ADDR
// sRadar := false ;
43055: LD_ADDR_EXP 11
43059: PUSH
43060: LD_INT 0
43062: ST_TO_ADDR
// sBunker := false ;
43063: LD_ADDR_EXP 12
43067: PUSH
43068: LD_INT 0
43070: ST_TO_ADDR
// sHack := false ;
43071: LD_ADDR_EXP 13
43075: PUSH
43076: LD_INT 0
43078: ST_TO_ADDR
// sFire := false ;
43079: LD_ADDR_EXP 14
43083: PUSH
43084: LD_INT 0
43086: ST_TO_ADDR
// sRefresh := false ;
43087: LD_ADDR_EXP 15
43091: PUSH
43092: LD_INT 0
43094: ST_TO_ADDR
// sExp := false ;
43095: LD_ADDR_EXP 16
43099: PUSH
43100: LD_INT 0
43102: ST_TO_ADDR
// sDepot := false ;
43103: LD_ADDR_EXP 17
43107: PUSH
43108: LD_INT 0
43110: ST_TO_ADDR
// sFlag := false ;
43111: LD_ADDR_EXP 18
43115: PUSH
43116: LD_INT 0
43118: ST_TO_ADDR
// sKamikadze := false ;
43119: LD_ADDR_EXP 26
43123: PUSH
43124: LD_INT 0
43126: ST_TO_ADDR
// sTroll := false ;
43127: LD_ADDR_EXP 27
43131: PUSH
43132: LD_INT 0
43134: ST_TO_ADDR
// sSlow := false ;
43135: LD_ADDR_EXP 28
43139: PUSH
43140: LD_INT 0
43142: ST_TO_ADDR
// sLack := false ;
43143: LD_ADDR_EXP 29
43147: PUSH
43148: LD_INT 0
43150: ST_TO_ADDR
// sTank := false ;
43151: LD_ADDR_EXP 31
43155: PUSH
43156: LD_INT 0
43158: ST_TO_ADDR
// sRemote := false ;
43159: LD_ADDR_EXP 32
43163: PUSH
43164: LD_INT 0
43166: ST_TO_ADDR
// sPowell := false ;
43167: LD_ADDR_EXP 33
43171: PUSH
43172: LD_INT 0
43174: ST_TO_ADDR
// sTeleport := false ;
43175: LD_ADDR_EXP 36
43179: PUSH
43180: LD_INT 0
43182: ST_TO_ADDR
// sOilTower := false ;
43183: LD_ADDR_EXP 38
43187: PUSH
43188: LD_INT 0
43190: ST_TO_ADDR
// sShovel := false ;
43191: LD_ADDR_EXP 39
43195: PUSH
43196: LD_INT 0
43198: ST_TO_ADDR
// sSheik := false ;
43199: LD_ADDR_EXP 40
43203: PUSH
43204: LD_INT 0
43206: ST_TO_ADDR
// sEarthquake := false ;
43207: LD_ADDR_EXP 42
43211: PUSH
43212: LD_INT 0
43214: ST_TO_ADDR
// sAI := false ;
43215: LD_ADDR_EXP 43
43219: PUSH
43220: LD_INT 0
43222: ST_TO_ADDR
// sCargo := false ;
43223: LD_ADDR_EXP 46
43227: PUSH
43228: LD_INT 0
43230: ST_TO_ADDR
// sDLaser := false ;
43231: LD_ADDR_EXP 47
43235: PUSH
43236: LD_INT 0
43238: ST_TO_ADDR
// sExchange := false ;
43239: LD_ADDR_EXP 48
43243: PUSH
43244: LD_INT 0
43246: ST_TO_ADDR
// sFac := false ;
43247: LD_ADDR_EXP 49
43251: PUSH
43252: LD_INT 0
43254: ST_TO_ADDR
// sPower := false ;
43255: LD_ADDR_EXP 50
43259: PUSH
43260: LD_INT 0
43262: ST_TO_ADDR
// sRandom := false ;
43263: LD_ADDR_EXP 51
43267: PUSH
43268: LD_INT 0
43270: ST_TO_ADDR
// sShield := false ;
43271: LD_ADDR_EXP 52
43275: PUSH
43276: LD_INT 0
43278: ST_TO_ADDR
// sTime := false ;
43279: LD_ADDR_EXP 53
43283: PUSH
43284: LD_INT 0
43286: ST_TO_ADDR
// sTools := false ;
43287: LD_ADDR_EXP 54
43291: PUSH
43292: LD_INT 0
43294: ST_TO_ADDR
// sSold := false ;
43295: LD_ADDR_EXP 19
43299: PUSH
43300: LD_INT 0
43302: ST_TO_ADDR
// sDiff := false ;
43303: LD_ADDR_EXP 20
43307: PUSH
43308: LD_INT 0
43310: ST_TO_ADDR
// sFog := false ;
43311: LD_ADDR_EXP 23
43315: PUSH
43316: LD_INT 0
43318: ST_TO_ADDR
// sReset := false ;
43319: LD_ADDR_EXP 24
43323: PUSH
43324: LD_INT 0
43326: ST_TO_ADDR
// sSun := false ;
43327: LD_ADDR_EXP 25
43331: PUSH
43332: LD_INT 0
43334: ST_TO_ADDR
// sTiger := false ;
43335: LD_ADDR_EXP 21
43339: PUSH
43340: LD_INT 0
43342: ST_TO_ADDR
// sBomb := false ;
43343: LD_ADDR_EXP 22
43347: PUSH
43348: LD_INT 0
43350: ST_TO_ADDR
// sWound := false ;
43351: LD_ADDR_EXP 30
43355: PUSH
43356: LD_INT 0
43358: ST_TO_ADDR
// sBetray := false ;
43359: LD_ADDR_EXP 34
43363: PUSH
43364: LD_INT 0
43366: ST_TO_ADDR
// sContamin := false ;
43367: LD_ADDR_EXP 35
43371: PUSH
43372: LD_INT 0
43374: ST_TO_ADDR
// sOil := false ;
43375: LD_ADDR_EXP 37
43379: PUSH
43380: LD_INT 0
43382: ST_TO_ADDR
// sStu := false ;
43383: LD_ADDR_EXP 41
43387: PUSH
43388: LD_INT 0
43390: ST_TO_ADDR
// sBazooka := false ;
43391: LD_ADDR_EXP 44
43395: PUSH
43396: LD_INT 0
43398: ST_TO_ADDR
// sMortar := false ;
43399: LD_ADDR_EXP 45
43403: PUSH
43404: LD_INT 0
43406: ST_TO_ADDR
// sRanger := false ;
43407: LD_ADDR_EXP 55
43411: PUSH
43412: LD_INT 0
43414: ST_TO_ADDR
// sComputer := false ;
43415: LD_ADDR_EXP 56
43419: PUSH
43420: LD_INT 0
43422: ST_TO_ADDR
// s30 := false ;
43423: LD_ADDR_EXP 57
43427: PUSH
43428: LD_INT 0
43430: ST_TO_ADDR
// s60 := false ;
43431: LD_ADDR_EXP 58
43435: PUSH
43436: LD_INT 0
43438: ST_TO_ADDR
// end ;
43439: LD_VAR 0 1
43443: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
43444: LD_INT 0
43446: PPUSH
43447: PPUSH
43448: PPUSH
43449: PPUSH
43450: PPUSH
43451: PPUSH
43452: PPUSH
// result := [ ] ;
43453: LD_ADDR_VAR 0 2
43457: PUSH
43458: EMPTY
43459: ST_TO_ADDR
// if campaign_id = 1 then
43460: LD_OWVAR 69
43464: PUSH
43465: LD_INT 1
43467: EQUAL
43468: IFFALSE 46634
// begin case mission_number of 1 :
43470: LD_OWVAR 70
43474: PUSH
43475: LD_INT 1
43477: DOUBLE
43478: EQUAL
43479: IFTRUE 43483
43481: GO 43559
43483: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
43484: LD_ADDR_VAR 0 2
43488: PUSH
43489: LD_INT 2
43491: PUSH
43492: LD_INT 4
43494: PUSH
43495: LD_INT 11
43497: PUSH
43498: LD_INT 12
43500: PUSH
43501: LD_INT 15
43503: PUSH
43504: LD_INT 16
43506: PUSH
43507: LD_INT 22
43509: PUSH
43510: LD_INT 23
43512: PUSH
43513: LD_INT 26
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 101
43529: PUSH
43530: LD_INT 102
43532: PUSH
43533: LD_INT 106
43535: PUSH
43536: LD_INT 116
43538: PUSH
43539: LD_INT 117
43541: PUSH
43542: LD_INT 118
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: ST_TO_ADDR
43557: GO 46632
43559: LD_INT 2
43561: DOUBLE
43562: EQUAL
43563: IFTRUE 43567
43565: GO 43651
43567: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
43568: LD_ADDR_VAR 0 2
43572: PUSH
43573: LD_INT 2
43575: PUSH
43576: LD_INT 4
43578: PUSH
43579: LD_INT 11
43581: PUSH
43582: LD_INT 12
43584: PUSH
43585: LD_INT 15
43587: PUSH
43588: LD_INT 16
43590: PUSH
43591: LD_INT 22
43593: PUSH
43594: LD_INT 23
43596: PUSH
43597: LD_INT 26
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 101
43613: PUSH
43614: LD_INT 102
43616: PUSH
43617: LD_INT 105
43619: PUSH
43620: LD_INT 106
43622: PUSH
43623: LD_INT 108
43625: PUSH
43626: LD_INT 116
43628: PUSH
43629: LD_INT 117
43631: PUSH
43632: LD_INT 118
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: ST_TO_ADDR
43649: GO 46632
43651: LD_INT 3
43653: DOUBLE
43654: EQUAL
43655: IFTRUE 43659
43657: GO 43747
43659: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
43660: LD_ADDR_VAR 0 2
43664: PUSH
43665: LD_INT 2
43667: PUSH
43668: LD_INT 4
43670: PUSH
43671: LD_INT 5
43673: PUSH
43674: LD_INT 11
43676: PUSH
43677: LD_INT 12
43679: PUSH
43680: LD_INT 15
43682: PUSH
43683: LD_INT 16
43685: PUSH
43686: LD_INT 22
43688: PUSH
43689: LD_INT 26
43691: PUSH
43692: LD_INT 36
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 101
43709: PUSH
43710: LD_INT 102
43712: PUSH
43713: LD_INT 105
43715: PUSH
43716: LD_INT 106
43718: PUSH
43719: LD_INT 108
43721: PUSH
43722: LD_INT 116
43724: PUSH
43725: LD_INT 117
43727: PUSH
43728: LD_INT 118
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: ST_TO_ADDR
43745: GO 46632
43747: LD_INT 4
43749: DOUBLE
43750: EQUAL
43751: IFTRUE 43755
43753: GO 43851
43755: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
43756: LD_ADDR_VAR 0 2
43760: PUSH
43761: LD_INT 2
43763: PUSH
43764: LD_INT 4
43766: PUSH
43767: LD_INT 5
43769: PUSH
43770: LD_INT 8
43772: PUSH
43773: LD_INT 11
43775: PUSH
43776: LD_INT 12
43778: PUSH
43779: LD_INT 15
43781: PUSH
43782: LD_INT 16
43784: PUSH
43785: LD_INT 22
43787: PUSH
43788: LD_INT 23
43790: PUSH
43791: LD_INT 26
43793: PUSH
43794: LD_INT 36
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 101
43813: PUSH
43814: LD_INT 102
43816: PUSH
43817: LD_INT 105
43819: PUSH
43820: LD_INT 106
43822: PUSH
43823: LD_INT 108
43825: PUSH
43826: LD_INT 116
43828: PUSH
43829: LD_INT 117
43831: PUSH
43832: LD_INT 118
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: ST_TO_ADDR
43849: GO 46632
43851: LD_INT 5
43853: DOUBLE
43854: EQUAL
43855: IFTRUE 43859
43857: GO 43971
43859: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
43860: LD_ADDR_VAR 0 2
43864: PUSH
43865: LD_INT 2
43867: PUSH
43868: LD_INT 4
43870: PUSH
43871: LD_INT 5
43873: PUSH
43874: LD_INT 6
43876: PUSH
43877: LD_INT 8
43879: PUSH
43880: LD_INT 11
43882: PUSH
43883: LD_INT 12
43885: PUSH
43886: LD_INT 15
43888: PUSH
43889: LD_INT 16
43891: PUSH
43892: LD_INT 22
43894: PUSH
43895: LD_INT 23
43897: PUSH
43898: LD_INT 25
43900: PUSH
43901: LD_INT 26
43903: PUSH
43904: LD_INT 36
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 101
43925: PUSH
43926: LD_INT 102
43928: PUSH
43929: LD_INT 105
43931: PUSH
43932: LD_INT 106
43934: PUSH
43935: LD_INT 108
43937: PUSH
43938: LD_INT 109
43940: PUSH
43941: LD_INT 112
43943: PUSH
43944: LD_INT 116
43946: PUSH
43947: LD_INT 117
43949: PUSH
43950: LD_INT 118
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: ST_TO_ADDR
43969: GO 46632
43971: LD_INT 6
43973: DOUBLE
43974: EQUAL
43975: IFTRUE 43979
43977: GO 44111
43979: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
43980: LD_ADDR_VAR 0 2
43984: PUSH
43985: LD_INT 2
43987: PUSH
43988: LD_INT 4
43990: PUSH
43991: LD_INT 5
43993: PUSH
43994: LD_INT 6
43996: PUSH
43997: LD_INT 8
43999: PUSH
44000: LD_INT 11
44002: PUSH
44003: LD_INT 12
44005: PUSH
44006: LD_INT 15
44008: PUSH
44009: LD_INT 16
44011: PUSH
44012: LD_INT 20
44014: PUSH
44015: LD_INT 21
44017: PUSH
44018: LD_INT 22
44020: PUSH
44021: LD_INT 23
44023: PUSH
44024: LD_INT 25
44026: PUSH
44027: LD_INT 26
44029: PUSH
44030: LD_INT 30
44032: PUSH
44033: LD_INT 31
44035: PUSH
44036: LD_INT 32
44038: PUSH
44039: LD_INT 36
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 101
44065: PUSH
44066: LD_INT 102
44068: PUSH
44069: LD_INT 105
44071: PUSH
44072: LD_INT 106
44074: PUSH
44075: LD_INT 108
44077: PUSH
44078: LD_INT 109
44080: PUSH
44081: LD_INT 112
44083: PUSH
44084: LD_INT 116
44086: PUSH
44087: LD_INT 117
44089: PUSH
44090: LD_INT 118
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: ST_TO_ADDR
44109: GO 46632
44111: LD_INT 7
44113: DOUBLE
44114: EQUAL
44115: IFTRUE 44119
44117: GO 44231
44119: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
44120: LD_ADDR_VAR 0 2
44124: PUSH
44125: LD_INT 2
44127: PUSH
44128: LD_INT 4
44130: PUSH
44131: LD_INT 5
44133: PUSH
44134: LD_INT 7
44136: PUSH
44137: LD_INT 11
44139: PUSH
44140: LD_INT 12
44142: PUSH
44143: LD_INT 15
44145: PUSH
44146: LD_INT 16
44148: PUSH
44149: LD_INT 20
44151: PUSH
44152: LD_INT 21
44154: PUSH
44155: LD_INT 22
44157: PUSH
44158: LD_INT 23
44160: PUSH
44161: LD_INT 25
44163: PUSH
44164: LD_INT 26
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 101
44185: PUSH
44186: LD_INT 102
44188: PUSH
44189: LD_INT 103
44191: PUSH
44192: LD_INT 105
44194: PUSH
44195: LD_INT 106
44197: PUSH
44198: LD_INT 108
44200: PUSH
44201: LD_INT 112
44203: PUSH
44204: LD_INT 116
44206: PUSH
44207: LD_INT 117
44209: PUSH
44210: LD_INT 118
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: ST_TO_ADDR
44229: GO 46632
44231: LD_INT 8
44233: DOUBLE
44234: EQUAL
44235: IFTRUE 44239
44237: GO 44379
44239: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
44240: LD_ADDR_VAR 0 2
44244: PUSH
44245: LD_INT 2
44247: PUSH
44248: LD_INT 4
44250: PUSH
44251: LD_INT 5
44253: PUSH
44254: LD_INT 6
44256: PUSH
44257: LD_INT 7
44259: PUSH
44260: LD_INT 8
44262: PUSH
44263: LD_INT 11
44265: PUSH
44266: LD_INT 12
44268: PUSH
44269: LD_INT 15
44271: PUSH
44272: LD_INT 16
44274: PUSH
44275: LD_INT 20
44277: PUSH
44278: LD_INT 21
44280: PUSH
44281: LD_INT 22
44283: PUSH
44284: LD_INT 23
44286: PUSH
44287: LD_INT 25
44289: PUSH
44290: LD_INT 26
44292: PUSH
44293: LD_INT 30
44295: PUSH
44296: LD_INT 31
44298: PUSH
44299: LD_INT 32
44301: PUSH
44302: LD_INT 36
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 101
44329: PUSH
44330: LD_INT 102
44332: PUSH
44333: LD_INT 103
44335: PUSH
44336: LD_INT 105
44338: PUSH
44339: LD_INT 106
44341: PUSH
44342: LD_INT 108
44344: PUSH
44345: LD_INT 109
44347: PUSH
44348: LD_INT 112
44350: PUSH
44351: LD_INT 116
44353: PUSH
44354: LD_INT 117
44356: PUSH
44357: LD_INT 118
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: ST_TO_ADDR
44377: GO 46632
44379: LD_INT 9
44381: DOUBLE
44382: EQUAL
44383: IFTRUE 44387
44385: GO 44535
44387: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
44388: LD_ADDR_VAR 0 2
44392: PUSH
44393: LD_INT 2
44395: PUSH
44396: LD_INT 4
44398: PUSH
44399: LD_INT 5
44401: PUSH
44402: LD_INT 6
44404: PUSH
44405: LD_INT 7
44407: PUSH
44408: LD_INT 8
44410: PUSH
44411: LD_INT 11
44413: PUSH
44414: LD_INT 12
44416: PUSH
44417: LD_INT 15
44419: PUSH
44420: LD_INT 16
44422: PUSH
44423: LD_INT 20
44425: PUSH
44426: LD_INT 21
44428: PUSH
44429: LD_INT 22
44431: PUSH
44432: LD_INT 23
44434: PUSH
44435: LD_INT 25
44437: PUSH
44438: LD_INT 26
44440: PUSH
44441: LD_INT 28
44443: PUSH
44444: LD_INT 30
44446: PUSH
44447: LD_INT 31
44449: PUSH
44450: LD_INT 32
44452: PUSH
44453: LD_INT 36
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 101
44481: PUSH
44482: LD_INT 102
44484: PUSH
44485: LD_INT 103
44487: PUSH
44488: LD_INT 105
44490: PUSH
44491: LD_INT 106
44493: PUSH
44494: LD_INT 108
44496: PUSH
44497: LD_INT 109
44499: PUSH
44500: LD_INT 112
44502: PUSH
44503: LD_INT 114
44505: PUSH
44506: LD_INT 116
44508: PUSH
44509: LD_INT 117
44511: PUSH
44512: LD_INT 118
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: ST_TO_ADDR
44533: GO 46632
44535: LD_INT 10
44537: DOUBLE
44538: EQUAL
44539: IFTRUE 44543
44541: GO 44739
44543: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
44544: LD_ADDR_VAR 0 2
44548: PUSH
44549: LD_INT 2
44551: PUSH
44552: LD_INT 4
44554: PUSH
44555: LD_INT 5
44557: PUSH
44558: LD_INT 6
44560: PUSH
44561: LD_INT 7
44563: PUSH
44564: LD_INT 8
44566: PUSH
44567: LD_INT 9
44569: PUSH
44570: LD_INT 10
44572: PUSH
44573: LD_INT 11
44575: PUSH
44576: LD_INT 12
44578: PUSH
44579: LD_INT 13
44581: PUSH
44582: LD_INT 14
44584: PUSH
44585: LD_INT 15
44587: PUSH
44588: LD_INT 16
44590: PUSH
44591: LD_INT 17
44593: PUSH
44594: LD_INT 18
44596: PUSH
44597: LD_INT 19
44599: PUSH
44600: LD_INT 20
44602: PUSH
44603: LD_INT 21
44605: PUSH
44606: LD_INT 22
44608: PUSH
44609: LD_INT 23
44611: PUSH
44612: LD_INT 24
44614: PUSH
44615: LD_INT 25
44617: PUSH
44618: LD_INT 26
44620: PUSH
44621: LD_INT 28
44623: PUSH
44624: LD_INT 30
44626: PUSH
44627: LD_INT 31
44629: PUSH
44630: LD_INT 32
44632: PUSH
44633: LD_INT 36
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 101
44669: PUSH
44670: LD_INT 102
44672: PUSH
44673: LD_INT 103
44675: PUSH
44676: LD_INT 104
44678: PUSH
44679: LD_INT 105
44681: PUSH
44682: LD_INT 106
44684: PUSH
44685: LD_INT 107
44687: PUSH
44688: LD_INT 108
44690: PUSH
44691: LD_INT 109
44693: PUSH
44694: LD_INT 110
44696: PUSH
44697: LD_INT 111
44699: PUSH
44700: LD_INT 112
44702: PUSH
44703: LD_INT 114
44705: PUSH
44706: LD_INT 116
44708: PUSH
44709: LD_INT 117
44711: PUSH
44712: LD_INT 118
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: ST_TO_ADDR
44737: GO 46632
44739: LD_INT 11
44741: DOUBLE
44742: EQUAL
44743: IFTRUE 44747
44745: GO 44951
44747: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
44748: LD_ADDR_VAR 0 2
44752: PUSH
44753: LD_INT 2
44755: PUSH
44756: LD_INT 3
44758: PUSH
44759: LD_INT 4
44761: PUSH
44762: LD_INT 5
44764: PUSH
44765: LD_INT 6
44767: PUSH
44768: LD_INT 7
44770: PUSH
44771: LD_INT 8
44773: PUSH
44774: LD_INT 9
44776: PUSH
44777: LD_INT 10
44779: PUSH
44780: LD_INT 11
44782: PUSH
44783: LD_INT 12
44785: PUSH
44786: LD_INT 13
44788: PUSH
44789: LD_INT 14
44791: PUSH
44792: LD_INT 15
44794: PUSH
44795: LD_INT 16
44797: PUSH
44798: LD_INT 17
44800: PUSH
44801: LD_INT 18
44803: PUSH
44804: LD_INT 19
44806: PUSH
44807: LD_INT 20
44809: PUSH
44810: LD_INT 21
44812: PUSH
44813: LD_INT 22
44815: PUSH
44816: LD_INT 23
44818: PUSH
44819: LD_INT 24
44821: PUSH
44822: LD_INT 25
44824: PUSH
44825: LD_INT 26
44827: PUSH
44828: LD_INT 28
44830: PUSH
44831: LD_INT 30
44833: PUSH
44834: LD_INT 31
44836: PUSH
44837: LD_INT 32
44839: PUSH
44840: LD_INT 34
44842: PUSH
44843: LD_INT 36
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 101
44881: PUSH
44882: LD_INT 102
44884: PUSH
44885: LD_INT 103
44887: PUSH
44888: LD_INT 104
44890: PUSH
44891: LD_INT 105
44893: PUSH
44894: LD_INT 106
44896: PUSH
44897: LD_INT 107
44899: PUSH
44900: LD_INT 108
44902: PUSH
44903: LD_INT 109
44905: PUSH
44906: LD_INT 110
44908: PUSH
44909: LD_INT 111
44911: PUSH
44912: LD_INT 112
44914: PUSH
44915: LD_INT 114
44917: PUSH
44918: LD_INT 116
44920: PUSH
44921: LD_INT 117
44923: PUSH
44924: LD_INT 118
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: ST_TO_ADDR
44949: GO 46632
44951: LD_INT 12
44953: DOUBLE
44954: EQUAL
44955: IFTRUE 44959
44957: GO 45179
44959: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
44960: LD_ADDR_VAR 0 2
44964: PUSH
44965: LD_INT 1
44967: PUSH
44968: LD_INT 2
44970: PUSH
44971: LD_INT 3
44973: PUSH
44974: LD_INT 4
44976: PUSH
44977: LD_INT 5
44979: PUSH
44980: LD_INT 6
44982: PUSH
44983: LD_INT 7
44985: PUSH
44986: LD_INT 8
44988: PUSH
44989: LD_INT 9
44991: PUSH
44992: LD_INT 10
44994: PUSH
44995: LD_INT 11
44997: PUSH
44998: LD_INT 12
45000: PUSH
45001: LD_INT 13
45003: PUSH
45004: LD_INT 14
45006: PUSH
45007: LD_INT 15
45009: PUSH
45010: LD_INT 16
45012: PUSH
45013: LD_INT 17
45015: PUSH
45016: LD_INT 18
45018: PUSH
45019: LD_INT 19
45021: PUSH
45022: LD_INT 20
45024: PUSH
45025: LD_INT 21
45027: PUSH
45028: LD_INT 22
45030: PUSH
45031: LD_INT 23
45033: PUSH
45034: LD_INT 24
45036: PUSH
45037: LD_INT 25
45039: PUSH
45040: LD_INT 26
45042: PUSH
45043: LD_INT 27
45045: PUSH
45046: LD_INT 28
45048: PUSH
45049: LD_INT 30
45051: PUSH
45052: LD_INT 31
45054: PUSH
45055: LD_INT 32
45057: PUSH
45058: LD_INT 33
45060: PUSH
45061: LD_INT 34
45063: PUSH
45064: LD_INT 36
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 101
45105: PUSH
45106: LD_INT 102
45108: PUSH
45109: LD_INT 103
45111: PUSH
45112: LD_INT 104
45114: PUSH
45115: LD_INT 105
45117: PUSH
45118: LD_INT 106
45120: PUSH
45121: LD_INT 107
45123: PUSH
45124: LD_INT 108
45126: PUSH
45127: LD_INT 109
45129: PUSH
45130: LD_INT 110
45132: PUSH
45133: LD_INT 111
45135: PUSH
45136: LD_INT 112
45138: PUSH
45139: LD_INT 113
45141: PUSH
45142: LD_INT 114
45144: PUSH
45145: LD_INT 116
45147: PUSH
45148: LD_INT 117
45150: PUSH
45151: LD_INT 118
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: ST_TO_ADDR
45177: GO 46632
45179: LD_INT 13
45181: DOUBLE
45182: EQUAL
45183: IFTRUE 45187
45185: GO 45395
45187: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
45188: LD_ADDR_VAR 0 2
45192: PUSH
45193: LD_INT 1
45195: PUSH
45196: LD_INT 2
45198: PUSH
45199: LD_INT 3
45201: PUSH
45202: LD_INT 4
45204: PUSH
45205: LD_INT 5
45207: PUSH
45208: LD_INT 8
45210: PUSH
45211: LD_INT 9
45213: PUSH
45214: LD_INT 10
45216: PUSH
45217: LD_INT 11
45219: PUSH
45220: LD_INT 12
45222: PUSH
45223: LD_INT 14
45225: PUSH
45226: LD_INT 15
45228: PUSH
45229: LD_INT 16
45231: PUSH
45232: LD_INT 17
45234: PUSH
45235: LD_INT 18
45237: PUSH
45238: LD_INT 19
45240: PUSH
45241: LD_INT 20
45243: PUSH
45244: LD_INT 21
45246: PUSH
45247: LD_INT 22
45249: PUSH
45250: LD_INT 23
45252: PUSH
45253: LD_INT 24
45255: PUSH
45256: LD_INT 25
45258: PUSH
45259: LD_INT 26
45261: PUSH
45262: LD_INT 27
45264: PUSH
45265: LD_INT 28
45267: PUSH
45268: LD_INT 30
45270: PUSH
45271: LD_INT 31
45273: PUSH
45274: LD_INT 32
45276: PUSH
45277: LD_INT 33
45279: PUSH
45280: LD_INT 34
45282: PUSH
45283: LD_INT 36
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 101
45321: PUSH
45322: LD_INT 102
45324: PUSH
45325: LD_INT 103
45327: PUSH
45328: LD_INT 104
45330: PUSH
45331: LD_INT 105
45333: PUSH
45334: LD_INT 106
45336: PUSH
45337: LD_INT 107
45339: PUSH
45340: LD_INT 108
45342: PUSH
45343: LD_INT 109
45345: PUSH
45346: LD_INT 110
45348: PUSH
45349: LD_INT 111
45351: PUSH
45352: LD_INT 112
45354: PUSH
45355: LD_INT 113
45357: PUSH
45358: LD_INT 114
45360: PUSH
45361: LD_INT 116
45363: PUSH
45364: LD_INT 117
45366: PUSH
45367: LD_INT 118
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: ST_TO_ADDR
45393: GO 46632
45395: LD_INT 14
45397: DOUBLE
45398: EQUAL
45399: IFTRUE 45403
45401: GO 45627
45403: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
45404: LD_ADDR_VAR 0 2
45408: PUSH
45409: LD_INT 1
45411: PUSH
45412: LD_INT 2
45414: PUSH
45415: LD_INT 3
45417: PUSH
45418: LD_INT 4
45420: PUSH
45421: LD_INT 5
45423: PUSH
45424: LD_INT 6
45426: PUSH
45427: LD_INT 7
45429: PUSH
45430: LD_INT 8
45432: PUSH
45433: LD_INT 9
45435: PUSH
45436: LD_INT 10
45438: PUSH
45439: LD_INT 11
45441: PUSH
45442: LD_INT 12
45444: PUSH
45445: LD_INT 13
45447: PUSH
45448: LD_INT 14
45450: PUSH
45451: LD_INT 15
45453: PUSH
45454: LD_INT 16
45456: PUSH
45457: LD_INT 17
45459: PUSH
45460: LD_INT 18
45462: PUSH
45463: LD_INT 19
45465: PUSH
45466: LD_INT 20
45468: PUSH
45469: LD_INT 21
45471: PUSH
45472: LD_INT 22
45474: PUSH
45475: LD_INT 23
45477: PUSH
45478: LD_INT 24
45480: PUSH
45481: LD_INT 25
45483: PUSH
45484: LD_INT 26
45486: PUSH
45487: LD_INT 27
45489: PUSH
45490: LD_INT 28
45492: PUSH
45493: LD_INT 29
45495: PUSH
45496: LD_INT 30
45498: PUSH
45499: LD_INT 31
45501: PUSH
45502: LD_INT 32
45504: PUSH
45505: LD_INT 33
45507: PUSH
45508: LD_INT 34
45510: PUSH
45511: LD_INT 36
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 101
45553: PUSH
45554: LD_INT 102
45556: PUSH
45557: LD_INT 103
45559: PUSH
45560: LD_INT 104
45562: PUSH
45563: LD_INT 105
45565: PUSH
45566: LD_INT 106
45568: PUSH
45569: LD_INT 107
45571: PUSH
45572: LD_INT 108
45574: PUSH
45575: LD_INT 109
45577: PUSH
45578: LD_INT 110
45580: PUSH
45581: LD_INT 111
45583: PUSH
45584: LD_INT 112
45586: PUSH
45587: LD_INT 113
45589: PUSH
45590: LD_INT 114
45592: PUSH
45593: LD_INT 116
45595: PUSH
45596: LD_INT 117
45598: PUSH
45599: LD_INT 118
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: ST_TO_ADDR
45625: GO 46632
45627: LD_INT 15
45629: DOUBLE
45630: EQUAL
45631: IFTRUE 45635
45633: GO 45859
45635: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
45636: LD_ADDR_VAR 0 2
45640: PUSH
45641: LD_INT 1
45643: PUSH
45644: LD_INT 2
45646: PUSH
45647: LD_INT 3
45649: PUSH
45650: LD_INT 4
45652: PUSH
45653: LD_INT 5
45655: PUSH
45656: LD_INT 6
45658: PUSH
45659: LD_INT 7
45661: PUSH
45662: LD_INT 8
45664: PUSH
45665: LD_INT 9
45667: PUSH
45668: LD_INT 10
45670: PUSH
45671: LD_INT 11
45673: PUSH
45674: LD_INT 12
45676: PUSH
45677: LD_INT 13
45679: PUSH
45680: LD_INT 14
45682: PUSH
45683: LD_INT 15
45685: PUSH
45686: LD_INT 16
45688: PUSH
45689: LD_INT 17
45691: PUSH
45692: LD_INT 18
45694: PUSH
45695: LD_INT 19
45697: PUSH
45698: LD_INT 20
45700: PUSH
45701: LD_INT 21
45703: PUSH
45704: LD_INT 22
45706: PUSH
45707: LD_INT 23
45709: PUSH
45710: LD_INT 24
45712: PUSH
45713: LD_INT 25
45715: PUSH
45716: LD_INT 26
45718: PUSH
45719: LD_INT 27
45721: PUSH
45722: LD_INT 28
45724: PUSH
45725: LD_INT 29
45727: PUSH
45728: LD_INT 30
45730: PUSH
45731: LD_INT 31
45733: PUSH
45734: LD_INT 32
45736: PUSH
45737: LD_INT 33
45739: PUSH
45740: LD_INT 34
45742: PUSH
45743: LD_INT 36
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 101
45785: PUSH
45786: LD_INT 102
45788: PUSH
45789: LD_INT 103
45791: PUSH
45792: LD_INT 104
45794: PUSH
45795: LD_INT 105
45797: PUSH
45798: LD_INT 106
45800: PUSH
45801: LD_INT 107
45803: PUSH
45804: LD_INT 108
45806: PUSH
45807: LD_INT 109
45809: PUSH
45810: LD_INT 110
45812: PUSH
45813: LD_INT 111
45815: PUSH
45816: LD_INT 112
45818: PUSH
45819: LD_INT 113
45821: PUSH
45822: LD_INT 114
45824: PUSH
45825: LD_INT 116
45827: PUSH
45828: LD_INT 117
45830: PUSH
45831: LD_INT 118
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: ST_TO_ADDR
45857: GO 46632
45859: LD_INT 16
45861: DOUBLE
45862: EQUAL
45863: IFTRUE 45867
45865: GO 46003
45867: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
45868: LD_ADDR_VAR 0 2
45872: PUSH
45873: LD_INT 2
45875: PUSH
45876: LD_INT 4
45878: PUSH
45879: LD_INT 5
45881: PUSH
45882: LD_INT 7
45884: PUSH
45885: LD_INT 11
45887: PUSH
45888: LD_INT 12
45890: PUSH
45891: LD_INT 15
45893: PUSH
45894: LD_INT 16
45896: PUSH
45897: LD_INT 20
45899: PUSH
45900: LD_INT 21
45902: PUSH
45903: LD_INT 22
45905: PUSH
45906: LD_INT 23
45908: PUSH
45909: LD_INT 25
45911: PUSH
45912: LD_INT 26
45914: PUSH
45915: LD_INT 30
45917: PUSH
45918: LD_INT 31
45920: PUSH
45921: LD_INT 32
45923: PUSH
45924: LD_INT 33
45926: PUSH
45927: LD_INT 34
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 101
45953: PUSH
45954: LD_INT 102
45956: PUSH
45957: LD_INT 103
45959: PUSH
45960: LD_INT 106
45962: PUSH
45963: LD_INT 108
45965: PUSH
45966: LD_INT 112
45968: PUSH
45969: LD_INT 113
45971: PUSH
45972: LD_INT 114
45974: PUSH
45975: LD_INT 116
45977: PUSH
45978: LD_INT 117
45980: PUSH
45981: LD_INT 118
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: ST_TO_ADDR
46001: GO 46632
46003: LD_INT 17
46005: DOUBLE
46006: EQUAL
46007: IFTRUE 46011
46009: GO 46235
46011: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
46012: LD_ADDR_VAR 0 2
46016: PUSH
46017: LD_INT 1
46019: PUSH
46020: LD_INT 2
46022: PUSH
46023: LD_INT 3
46025: PUSH
46026: LD_INT 4
46028: PUSH
46029: LD_INT 5
46031: PUSH
46032: LD_INT 6
46034: PUSH
46035: LD_INT 7
46037: PUSH
46038: LD_INT 8
46040: PUSH
46041: LD_INT 9
46043: PUSH
46044: LD_INT 10
46046: PUSH
46047: LD_INT 11
46049: PUSH
46050: LD_INT 12
46052: PUSH
46053: LD_INT 13
46055: PUSH
46056: LD_INT 14
46058: PUSH
46059: LD_INT 15
46061: PUSH
46062: LD_INT 16
46064: PUSH
46065: LD_INT 17
46067: PUSH
46068: LD_INT 18
46070: PUSH
46071: LD_INT 19
46073: PUSH
46074: LD_INT 20
46076: PUSH
46077: LD_INT 21
46079: PUSH
46080: LD_INT 22
46082: PUSH
46083: LD_INT 23
46085: PUSH
46086: LD_INT 24
46088: PUSH
46089: LD_INT 25
46091: PUSH
46092: LD_INT 26
46094: PUSH
46095: LD_INT 27
46097: PUSH
46098: LD_INT 28
46100: PUSH
46101: LD_INT 29
46103: PUSH
46104: LD_INT 30
46106: PUSH
46107: LD_INT 31
46109: PUSH
46110: LD_INT 32
46112: PUSH
46113: LD_INT 33
46115: PUSH
46116: LD_INT 34
46118: PUSH
46119: LD_INT 36
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 101
46161: PUSH
46162: LD_INT 102
46164: PUSH
46165: LD_INT 103
46167: PUSH
46168: LD_INT 104
46170: PUSH
46171: LD_INT 105
46173: PUSH
46174: LD_INT 106
46176: PUSH
46177: LD_INT 107
46179: PUSH
46180: LD_INT 108
46182: PUSH
46183: LD_INT 109
46185: PUSH
46186: LD_INT 110
46188: PUSH
46189: LD_INT 111
46191: PUSH
46192: LD_INT 112
46194: PUSH
46195: LD_INT 113
46197: PUSH
46198: LD_INT 114
46200: PUSH
46201: LD_INT 116
46203: PUSH
46204: LD_INT 117
46206: PUSH
46207: LD_INT 118
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: ST_TO_ADDR
46233: GO 46632
46235: LD_INT 18
46237: DOUBLE
46238: EQUAL
46239: IFTRUE 46243
46241: GO 46391
46243: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
46244: LD_ADDR_VAR 0 2
46248: PUSH
46249: LD_INT 2
46251: PUSH
46252: LD_INT 4
46254: PUSH
46255: LD_INT 5
46257: PUSH
46258: LD_INT 7
46260: PUSH
46261: LD_INT 11
46263: PUSH
46264: LD_INT 12
46266: PUSH
46267: LD_INT 15
46269: PUSH
46270: LD_INT 16
46272: PUSH
46273: LD_INT 20
46275: PUSH
46276: LD_INT 21
46278: PUSH
46279: LD_INT 22
46281: PUSH
46282: LD_INT 23
46284: PUSH
46285: LD_INT 25
46287: PUSH
46288: LD_INT 26
46290: PUSH
46291: LD_INT 30
46293: PUSH
46294: LD_INT 31
46296: PUSH
46297: LD_INT 32
46299: PUSH
46300: LD_INT 33
46302: PUSH
46303: LD_INT 34
46305: PUSH
46306: LD_INT 35
46308: PUSH
46309: LD_INT 36
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 101
46337: PUSH
46338: LD_INT 102
46340: PUSH
46341: LD_INT 103
46343: PUSH
46344: LD_INT 106
46346: PUSH
46347: LD_INT 108
46349: PUSH
46350: LD_INT 112
46352: PUSH
46353: LD_INT 113
46355: PUSH
46356: LD_INT 114
46358: PUSH
46359: LD_INT 115
46361: PUSH
46362: LD_INT 116
46364: PUSH
46365: LD_INT 117
46367: PUSH
46368: LD_INT 118
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: ST_TO_ADDR
46389: GO 46632
46391: LD_INT 19
46393: DOUBLE
46394: EQUAL
46395: IFTRUE 46399
46397: GO 46631
46399: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
46400: LD_ADDR_VAR 0 2
46404: PUSH
46405: LD_INT 1
46407: PUSH
46408: LD_INT 2
46410: PUSH
46411: LD_INT 3
46413: PUSH
46414: LD_INT 4
46416: PUSH
46417: LD_INT 5
46419: PUSH
46420: LD_INT 6
46422: PUSH
46423: LD_INT 7
46425: PUSH
46426: LD_INT 8
46428: PUSH
46429: LD_INT 9
46431: PUSH
46432: LD_INT 10
46434: PUSH
46435: LD_INT 11
46437: PUSH
46438: LD_INT 12
46440: PUSH
46441: LD_INT 13
46443: PUSH
46444: LD_INT 14
46446: PUSH
46447: LD_INT 15
46449: PUSH
46450: LD_INT 16
46452: PUSH
46453: LD_INT 17
46455: PUSH
46456: LD_INT 18
46458: PUSH
46459: LD_INT 19
46461: PUSH
46462: LD_INT 20
46464: PUSH
46465: LD_INT 21
46467: PUSH
46468: LD_INT 22
46470: PUSH
46471: LD_INT 23
46473: PUSH
46474: LD_INT 24
46476: PUSH
46477: LD_INT 25
46479: PUSH
46480: LD_INT 26
46482: PUSH
46483: LD_INT 27
46485: PUSH
46486: LD_INT 28
46488: PUSH
46489: LD_INT 29
46491: PUSH
46492: LD_INT 30
46494: PUSH
46495: LD_INT 31
46497: PUSH
46498: LD_INT 32
46500: PUSH
46501: LD_INT 33
46503: PUSH
46504: LD_INT 34
46506: PUSH
46507: LD_INT 35
46509: PUSH
46510: LD_INT 36
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 101
46553: PUSH
46554: LD_INT 102
46556: PUSH
46557: LD_INT 103
46559: PUSH
46560: LD_INT 104
46562: PUSH
46563: LD_INT 105
46565: PUSH
46566: LD_INT 106
46568: PUSH
46569: LD_INT 107
46571: PUSH
46572: LD_INT 108
46574: PUSH
46575: LD_INT 109
46577: PUSH
46578: LD_INT 110
46580: PUSH
46581: LD_INT 111
46583: PUSH
46584: LD_INT 112
46586: PUSH
46587: LD_INT 113
46589: PUSH
46590: LD_INT 114
46592: PUSH
46593: LD_INT 115
46595: PUSH
46596: LD_INT 116
46598: PUSH
46599: LD_INT 117
46601: PUSH
46602: LD_INT 118
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: ST_TO_ADDR
46629: GO 46632
46631: POP
// end else
46632: GO 46863
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
46634: LD_ADDR_VAR 0 2
46638: PUSH
46639: LD_INT 1
46641: PUSH
46642: LD_INT 2
46644: PUSH
46645: LD_INT 3
46647: PUSH
46648: LD_INT 4
46650: PUSH
46651: LD_INT 5
46653: PUSH
46654: LD_INT 6
46656: PUSH
46657: LD_INT 7
46659: PUSH
46660: LD_INT 8
46662: PUSH
46663: LD_INT 9
46665: PUSH
46666: LD_INT 10
46668: PUSH
46669: LD_INT 11
46671: PUSH
46672: LD_INT 12
46674: PUSH
46675: LD_INT 13
46677: PUSH
46678: LD_INT 14
46680: PUSH
46681: LD_INT 15
46683: PUSH
46684: LD_INT 16
46686: PUSH
46687: LD_INT 17
46689: PUSH
46690: LD_INT 18
46692: PUSH
46693: LD_INT 19
46695: PUSH
46696: LD_INT 20
46698: PUSH
46699: LD_INT 21
46701: PUSH
46702: LD_INT 22
46704: PUSH
46705: LD_INT 23
46707: PUSH
46708: LD_INT 24
46710: PUSH
46711: LD_INT 25
46713: PUSH
46714: LD_INT 26
46716: PUSH
46717: LD_INT 27
46719: PUSH
46720: LD_INT 28
46722: PUSH
46723: LD_INT 29
46725: PUSH
46726: LD_INT 30
46728: PUSH
46729: LD_INT 31
46731: PUSH
46732: LD_INT 32
46734: PUSH
46735: LD_INT 33
46737: PUSH
46738: LD_INT 34
46740: PUSH
46741: LD_INT 35
46743: PUSH
46744: LD_INT 36
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 101
46787: PUSH
46788: LD_INT 102
46790: PUSH
46791: LD_INT 103
46793: PUSH
46794: LD_INT 104
46796: PUSH
46797: LD_INT 105
46799: PUSH
46800: LD_INT 106
46802: PUSH
46803: LD_INT 107
46805: PUSH
46806: LD_INT 108
46808: PUSH
46809: LD_INT 109
46811: PUSH
46812: LD_INT 110
46814: PUSH
46815: LD_INT 111
46817: PUSH
46818: LD_INT 112
46820: PUSH
46821: LD_INT 113
46823: PUSH
46824: LD_INT 114
46826: PUSH
46827: LD_INT 115
46829: PUSH
46830: LD_INT 116
46832: PUSH
46833: LD_INT 117
46835: PUSH
46836: LD_INT 118
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: ST_TO_ADDR
// if result then
46863: LD_VAR 0 2
46867: IFFALSE 47653
// begin normal :=  ;
46869: LD_ADDR_VAR 0 5
46873: PUSH
46874: LD_STRING 
46876: ST_TO_ADDR
// hardcore :=  ;
46877: LD_ADDR_VAR 0 6
46881: PUSH
46882: LD_STRING 
46884: ST_TO_ADDR
// active :=  ;
46885: LD_ADDR_VAR 0 7
46889: PUSH
46890: LD_STRING 
46892: ST_TO_ADDR
// for i = 1 to normalCounter do
46893: LD_ADDR_VAR 0 8
46897: PUSH
46898: DOUBLE
46899: LD_INT 1
46901: DEC
46902: ST_TO_ADDR
46903: LD_EXP 3
46907: PUSH
46908: FOR_TO
46909: IFFALSE 47010
// begin tmp := 0 ;
46911: LD_ADDR_VAR 0 3
46915: PUSH
46916: LD_STRING 0
46918: ST_TO_ADDR
// if result [ 1 ] then
46919: LD_VAR 0 2
46923: PUSH
46924: LD_INT 1
46926: ARRAY
46927: IFFALSE 46992
// if result [ 1 ] [ 1 ] = i then
46929: LD_VAR 0 2
46933: PUSH
46934: LD_INT 1
46936: ARRAY
46937: PUSH
46938: LD_INT 1
46940: ARRAY
46941: PUSH
46942: LD_VAR 0 8
46946: EQUAL
46947: IFFALSE 46992
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
46949: LD_ADDR_VAR 0 2
46953: PUSH
46954: LD_VAR 0 2
46958: PPUSH
46959: LD_INT 1
46961: PPUSH
46962: LD_VAR 0 2
46966: PUSH
46967: LD_INT 1
46969: ARRAY
46970: PPUSH
46971: LD_INT 1
46973: PPUSH
46974: CALL_OW 3
46978: PPUSH
46979: CALL_OW 1
46983: ST_TO_ADDR
// tmp := 1 ;
46984: LD_ADDR_VAR 0 3
46988: PUSH
46989: LD_STRING 1
46991: ST_TO_ADDR
// end ; normal := normal & tmp ;
46992: LD_ADDR_VAR 0 5
46996: PUSH
46997: LD_VAR 0 5
47001: PUSH
47002: LD_VAR 0 3
47006: STR
47007: ST_TO_ADDR
// end ;
47008: GO 46908
47010: POP
47011: POP
// for i = 1 to hardcoreCounter do
47012: LD_ADDR_VAR 0 8
47016: PUSH
47017: DOUBLE
47018: LD_INT 1
47020: DEC
47021: ST_TO_ADDR
47022: LD_EXP 4
47026: PUSH
47027: FOR_TO
47028: IFFALSE 47133
// begin tmp := 0 ;
47030: LD_ADDR_VAR 0 3
47034: PUSH
47035: LD_STRING 0
47037: ST_TO_ADDR
// if result [ 2 ] then
47038: LD_VAR 0 2
47042: PUSH
47043: LD_INT 2
47045: ARRAY
47046: IFFALSE 47115
// if result [ 2 ] [ 1 ] = 100 + i then
47048: LD_VAR 0 2
47052: PUSH
47053: LD_INT 2
47055: ARRAY
47056: PUSH
47057: LD_INT 1
47059: ARRAY
47060: PUSH
47061: LD_INT 100
47063: PUSH
47064: LD_VAR 0 8
47068: PLUS
47069: EQUAL
47070: IFFALSE 47115
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
47072: LD_ADDR_VAR 0 2
47076: PUSH
47077: LD_VAR 0 2
47081: PPUSH
47082: LD_INT 2
47084: PPUSH
47085: LD_VAR 0 2
47089: PUSH
47090: LD_INT 2
47092: ARRAY
47093: PPUSH
47094: LD_INT 1
47096: PPUSH
47097: CALL_OW 3
47101: PPUSH
47102: CALL_OW 1
47106: ST_TO_ADDR
// tmp := 1 ;
47107: LD_ADDR_VAR 0 3
47111: PUSH
47112: LD_STRING 1
47114: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
47115: LD_ADDR_VAR 0 6
47119: PUSH
47120: LD_VAR 0 6
47124: PUSH
47125: LD_VAR 0 3
47129: STR
47130: ST_TO_ADDR
// end ;
47131: GO 47027
47133: POP
47134: POP
// if isGameLoad then
47135: LD_VAR 0 1
47139: IFFALSE 47614
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
47141: LD_ADDR_VAR 0 4
47145: PUSH
47146: LD_EXP 7
47150: PUSH
47151: LD_EXP 6
47155: PUSH
47156: LD_EXP 8
47160: PUSH
47161: LD_EXP 5
47165: PUSH
47166: LD_EXP 9
47170: PUSH
47171: LD_EXP 10
47175: PUSH
47176: LD_EXP 11
47180: PUSH
47181: LD_EXP 12
47185: PUSH
47186: LD_EXP 13
47190: PUSH
47191: LD_EXP 14
47195: PUSH
47196: LD_EXP 15
47200: PUSH
47201: LD_EXP 16
47205: PUSH
47206: LD_EXP 17
47210: PUSH
47211: LD_EXP 18
47215: PUSH
47216: LD_EXP 26
47220: PUSH
47221: LD_EXP 27
47225: PUSH
47226: LD_EXP 28
47230: PUSH
47231: LD_EXP 29
47235: PUSH
47236: LD_EXP 31
47240: PUSH
47241: LD_EXP 32
47245: PUSH
47246: LD_EXP 33
47250: PUSH
47251: LD_EXP 36
47255: PUSH
47256: LD_EXP 38
47260: PUSH
47261: LD_EXP 39
47265: PUSH
47266: LD_EXP 40
47270: PUSH
47271: LD_EXP 42
47275: PUSH
47276: LD_EXP 43
47280: PUSH
47281: LD_EXP 46
47285: PUSH
47286: LD_EXP 47
47290: PUSH
47291: LD_EXP 48
47295: PUSH
47296: LD_EXP 49
47300: PUSH
47301: LD_EXP 50
47305: PUSH
47306: LD_EXP 51
47310: PUSH
47311: LD_EXP 52
47315: PUSH
47316: LD_EXP 53
47320: PUSH
47321: LD_EXP 54
47325: PUSH
47326: LD_EXP 19
47330: PUSH
47331: LD_EXP 20
47335: PUSH
47336: LD_EXP 23
47340: PUSH
47341: LD_EXP 24
47345: PUSH
47346: LD_EXP 25
47350: PUSH
47351: LD_EXP 21
47355: PUSH
47356: LD_EXP 22
47360: PUSH
47361: LD_EXP 30
47365: PUSH
47366: LD_EXP 34
47370: PUSH
47371: LD_EXP 35
47375: PUSH
47376: LD_EXP 37
47380: PUSH
47381: LD_EXP 41
47385: PUSH
47386: LD_EXP 44
47390: PUSH
47391: LD_EXP 45
47395: PUSH
47396: LD_EXP 55
47400: PUSH
47401: LD_EXP 56
47405: PUSH
47406: LD_EXP 57
47410: PUSH
47411: LD_EXP 58
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: ST_TO_ADDR
// tmp :=  ;
47472: LD_ADDR_VAR 0 3
47476: PUSH
47477: LD_STRING 
47479: ST_TO_ADDR
// for i = 1 to normalCounter do
47480: LD_ADDR_VAR 0 8
47484: PUSH
47485: DOUBLE
47486: LD_INT 1
47488: DEC
47489: ST_TO_ADDR
47490: LD_EXP 3
47494: PUSH
47495: FOR_TO
47496: IFFALSE 47532
// begin if flags [ i ] then
47498: LD_VAR 0 4
47502: PUSH
47503: LD_VAR 0 8
47507: ARRAY
47508: IFFALSE 47530
// tmp := tmp & i & ; ;
47510: LD_ADDR_VAR 0 3
47514: PUSH
47515: LD_VAR 0 3
47519: PUSH
47520: LD_VAR 0 8
47524: STR
47525: PUSH
47526: LD_STRING ;
47528: STR
47529: ST_TO_ADDR
// end ;
47530: GO 47495
47532: POP
47533: POP
// for i = 1 to hardcoreCounter do
47534: LD_ADDR_VAR 0 8
47538: PUSH
47539: DOUBLE
47540: LD_INT 1
47542: DEC
47543: ST_TO_ADDR
47544: LD_EXP 4
47548: PUSH
47549: FOR_TO
47550: IFFALSE 47596
// begin if flags [ normalCounter + i ] then
47552: LD_VAR 0 4
47556: PUSH
47557: LD_EXP 3
47561: PUSH
47562: LD_VAR 0 8
47566: PLUS
47567: ARRAY
47568: IFFALSE 47594
// tmp := tmp & ( 100 + i ) & ; ;
47570: LD_ADDR_VAR 0 3
47574: PUSH
47575: LD_VAR 0 3
47579: PUSH
47580: LD_INT 100
47582: PUSH
47583: LD_VAR 0 8
47587: PLUS
47588: STR
47589: PUSH
47590: LD_STRING ;
47592: STR
47593: ST_TO_ADDR
// end ;
47594: GO 47549
47596: POP
47597: POP
// if tmp then
47598: LD_VAR 0 3
47602: IFFALSE 47614
// active := tmp ;
47604: LD_ADDR_VAR 0 7
47608: PUSH
47609: LD_VAR 0 3
47613: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
47614: LD_STRING getStreamItemsFromMission("
47616: PUSH
47617: LD_VAR 0 5
47621: STR
47622: PUSH
47623: LD_STRING ","
47625: STR
47626: PUSH
47627: LD_VAR 0 6
47631: STR
47632: PUSH
47633: LD_STRING ","
47635: STR
47636: PUSH
47637: LD_VAR 0 7
47641: STR
47642: PUSH
47643: LD_STRING ")
47645: STR
47646: PPUSH
47647: CALL_OW 559
// end else
47651: GO 47660
// ToLua ( getStreamItemsFromMission("","","") ) ;
47653: LD_STRING getStreamItemsFromMission("","","")
47655: PPUSH
47656: CALL_OW 559
// end ;
47660: LD_VAR 0 2
47664: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
47665: LD_EXP 2
47669: PUSH
47670: LD_EXP 7
47674: AND
47675: IFFALSE 47799
47677: GO 47679
47679: DISABLE
47680: LD_INT 0
47682: PPUSH
47683: PPUSH
// begin enable ;
47684: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
47685: LD_ADDR_VAR 0 2
47689: PUSH
47690: LD_INT 22
47692: PUSH
47693: LD_OWVAR 2
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 2
47704: PUSH
47705: LD_INT 34
47707: PUSH
47708: LD_INT 7
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 34
47717: PUSH
47718: LD_INT 45
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 34
47727: PUSH
47728: LD_INT 28
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 34
47737: PUSH
47738: LD_INT 47
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PPUSH
47756: CALL_OW 69
47760: ST_TO_ADDR
// if not tmp then
47761: LD_VAR 0 2
47765: NOT
47766: IFFALSE 47770
// exit ;
47768: GO 47799
// for i in tmp do
47770: LD_ADDR_VAR 0 1
47774: PUSH
47775: LD_VAR 0 2
47779: PUSH
47780: FOR_IN
47781: IFFALSE 47797
// begin SetLives ( i , 0 ) ;
47783: LD_VAR 0 1
47787: PPUSH
47788: LD_INT 0
47790: PPUSH
47791: CALL_OW 234
// end ;
47795: GO 47780
47797: POP
47798: POP
// end ;
47799: PPOPN 2
47801: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
47802: LD_EXP 2
47806: PUSH
47807: LD_EXP 8
47811: AND
47812: IFFALSE 47896
47814: GO 47816
47816: DISABLE
47817: LD_INT 0
47819: PPUSH
47820: PPUSH
// begin enable ;
47821: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
47822: LD_ADDR_VAR 0 2
47826: PUSH
47827: LD_INT 22
47829: PUSH
47830: LD_OWVAR 2
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 32
47841: PUSH
47842: LD_INT 3
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PPUSH
47853: CALL_OW 69
47857: ST_TO_ADDR
// if not tmp then
47858: LD_VAR 0 2
47862: NOT
47863: IFFALSE 47867
// exit ;
47865: GO 47896
// for i in tmp do
47867: LD_ADDR_VAR 0 1
47871: PUSH
47872: LD_VAR 0 2
47876: PUSH
47877: FOR_IN
47878: IFFALSE 47894
// begin SetLives ( i , 0 ) ;
47880: LD_VAR 0 1
47884: PPUSH
47885: LD_INT 0
47887: PPUSH
47888: CALL_OW 234
// end ;
47892: GO 47877
47894: POP
47895: POP
// end ;
47896: PPOPN 2
47898: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
47899: LD_EXP 2
47903: PUSH
47904: LD_EXP 5
47908: AND
47909: IFFALSE 48002
47911: GO 47913
47913: DISABLE
47914: LD_INT 0
47916: PPUSH
// begin enable ;
47917: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
47918: LD_ADDR_VAR 0 1
47922: PUSH
47923: LD_INT 22
47925: PUSH
47926: LD_OWVAR 2
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 2
47937: PUSH
47938: LD_INT 25
47940: PUSH
47941: LD_INT 5
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 25
47950: PUSH
47951: LD_INT 9
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 25
47960: PUSH
47961: LD_INT 8
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PPUSH
47978: CALL_OW 69
47982: PUSH
47983: FOR_IN
47984: IFFALSE 48000
// begin SetClass ( i , 1 ) ;
47986: LD_VAR 0 1
47990: PPUSH
47991: LD_INT 1
47993: PPUSH
47994: CALL_OW 336
// end ;
47998: GO 47983
48000: POP
48001: POP
// end ;
48002: PPOPN 1
48004: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
48005: LD_EXP 2
48009: PUSH
48010: LD_EXP 6
48014: AND
48015: PUSH
48016: LD_OWVAR 65
48020: PUSH
48021: LD_INT 7
48023: LESS
48024: AND
48025: IFFALSE 48039
48027: GO 48029
48029: DISABLE
// begin enable ;
48030: ENABLE
// game_speed := 7 ;
48031: LD_ADDR_OWVAR 65
48035: PUSH
48036: LD_INT 7
48038: ST_TO_ADDR
// end ;
48039: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
48040: LD_EXP 2
48044: PUSH
48045: LD_EXP 9
48049: AND
48050: IFFALSE 48252
48052: GO 48054
48054: DISABLE
48055: LD_INT 0
48057: PPUSH
48058: PPUSH
48059: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
48060: LD_ADDR_VAR 0 3
48064: PUSH
48065: LD_INT 81
48067: PUSH
48068: LD_OWVAR 2
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 21
48079: PUSH
48080: LD_INT 1
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PPUSH
48091: CALL_OW 69
48095: ST_TO_ADDR
// if not tmp then
48096: LD_VAR 0 3
48100: NOT
48101: IFFALSE 48105
// exit ;
48103: GO 48252
// if tmp > 5 then
48105: LD_VAR 0 3
48109: PUSH
48110: LD_INT 5
48112: GREATER
48113: IFFALSE 48125
// k := 5 else
48115: LD_ADDR_VAR 0 2
48119: PUSH
48120: LD_INT 5
48122: ST_TO_ADDR
48123: GO 48135
// k := tmp ;
48125: LD_ADDR_VAR 0 2
48129: PUSH
48130: LD_VAR 0 3
48134: ST_TO_ADDR
// for i := 1 to k do
48135: LD_ADDR_VAR 0 1
48139: PUSH
48140: DOUBLE
48141: LD_INT 1
48143: DEC
48144: ST_TO_ADDR
48145: LD_VAR 0 2
48149: PUSH
48150: FOR_TO
48151: IFFALSE 48250
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
48153: LD_VAR 0 3
48157: PUSH
48158: LD_VAR 0 1
48162: ARRAY
48163: PPUSH
48164: LD_VAR 0 1
48168: PUSH
48169: LD_INT 4
48171: MOD
48172: PUSH
48173: LD_INT 1
48175: PLUS
48176: PPUSH
48177: CALL_OW 259
48181: PUSH
48182: LD_INT 10
48184: LESS
48185: IFFALSE 48248
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
48187: LD_VAR 0 3
48191: PUSH
48192: LD_VAR 0 1
48196: ARRAY
48197: PPUSH
48198: LD_VAR 0 1
48202: PUSH
48203: LD_INT 4
48205: MOD
48206: PUSH
48207: LD_INT 1
48209: PLUS
48210: PPUSH
48211: LD_VAR 0 3
48215: PUSH
48216: LD_VAR 0 1
48220: ARRAY
48221: PPUSH
48222: LD_VAR 0 1
48226: PUSH
48227: LD_INT 4
48229: MOD
48230: PUSH
48231: LD_INT 1
48233: PLUS
48234: PPUSH
48235: CALL_OW 259
48239: PUSH
48240: LD_INT 1
48242: PLUS
48243: PPUSH
48244: CALL_OW 237
48248: GO 48150
48250: POP
48251: POP
// end ;
48252: PPOPN 3
48254: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
48255: LD_EXP 2
48259: PUSH
48260: LD_EXP 10
48264: AND
48265: IFFALSE 48285
48267: GO 48269
48269: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
48270: LD_INT 4
48272: PPUSH
48273: LD_OWVAR 2
48277: PPUSH
48278: LD_INT 0
48280: PPUSH
48281: CALL_OW 324
48285: END
// every 0 0$1 trigger StreamModeActive and sShovel do
48286: LD_EXP 2
48290: PUSH
48291: LD_EXP 39
48295: AND
48296: IFFALSE 48316
48298: GO 48300
48300: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
48301: LD_INT 19
48303: PPUSH
48304: LD_OWVAR 2
48308: PPUSH
48309: LD_INT 0
48311: PPUSH
48312: CALL_OW 324
48316: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
48317: LD_EXP 2
48321: PUSH
48322: LD_EXP 11
48326: AND
48327: IFFALSE 48429
48329: GO 48331
48331: DISABLE
48332: LD_INT 0
48334: PPUSH
48335: PPUSH
// begin enable ;
48336: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
48337: LD_ADDR_VAR 0 2
48341: PUSH
48342: LD_INT 22
48344: PUSH
48345: LD_OWVAR 2
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 2
48356: PUSH
48357: LD_INT 34
48359: PUSH
48360: LD_INT 11
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 34
48369: PUSH
48370: LD_INT 30
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: LIST
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PPUSH
48386: CALL_OW 69
48390: ST_TO_ADDR
// if not tmp then
48391: LD_VAR 0 2
48395: NOT
48396: IFFALSE 48400
// exit ;
48398: GO 48429
// for i in tmp do
48400: LD_ADDR_VAR 0 1
48404: PUSH
48405: LD_VAR 0 2
48409: PUSH
48410: FOR_IN
48411: IFFALSE 48427
// begin SetLives ( i , 0 ) ;
48413: LD_VAR 0 1
48417: PPUSH
48418: LD_INT 0
48420: PPUSH
48421: CALL_OW 234
// end ;
48425: GO 48410
48427: POP
48428: POP
// end ;
48429: PPOPN 2
48431: END
// every 0 0$1 trigger StreamModeActive and sBunker do
48432: LD_EXP 2
48436: PUSH
48437: LD_EXP 12
48441: AND
48442: IFFALSE 48462
48444: GO 48446
48446: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
48447: LD_INT 32
48449: PPUSH
48450: LD_OWVAR 2
48454: PPUSH
48455: LD_INT 0
48457: PPUSH
48458: CALL_OW 324
48462: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
48463: LD_EXP 2
48467: PUSH
48468: LD_EXP 13
48472: AND
48473: IFFALSE 48654
48475: GO 48477
48477: DISABLE
48478: LD_INT 0
48480: PPUSH
48481: PPUSH
48482: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
48483: LD_ADDR_VAR 0 2
48487: PUSH
48488: LD_INT 22
48490: PUSH
48491: LD_OWVAR 2
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 33
48502: PUSH
48503: LD_INT 3
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PPUSH
48514: CALL_OW 69
48518: ST_TO_ADDR
// if not tmp then
48519: LD_VAR 0 2
48523: NOT
48524: IFFALSE 48528
// exit ;
48526: GO 48654
// side := 0 ;
48528: LD_ADDR_VAR 0 3
48532: PUSH
48533: LD_INT 0
48535: ST_TO_ADDR
// for i := 1 to 8 do
48536: LD_ADDR_VAR 0 1
48540: PUSH
48541: DOUBLE
48542: LD_INT 1
48544: DEC
48545: ST_TO_ADDR
48546: LD_INT 8
48548: PUSH
48549: FOR_TO
48550: IFFALSE 48598
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
48552: LD_OWVAR 2
48556: PUSH
48557: LD_VAR 0 1
48561: NONEQUAL
48562: PUSH
48563: LD_OWVAR 2
48567: PPUSH
48568: LD_VAR 0 1
48572: PPUSH
48573: CALL_OW 81
48577: PUSH
48578: LD_INT 2
48580: EQUAL
48581: AND
48582: IFFALSE 48596
// begin side := i ;
48584: LD_ADDR_VAR 0 3
48588: PUSH
48589: LD_VAR 0 1
48593: ST_TO_ADDR
// break ;
48594: GO 48598
// end ;
48596: GO 48549
48598: POP
48599: POP
// if not side then
48600: LD_VAR 0 3
48604: NOT
48605: IFFALSE 48609
// exit ;
48607: GO 48654
// for i := 1 to tmp do
48609: LD_ADDR_VAR 0 1
48613: PUSH
48614: DOUBLE
48615: LD_INT 1
48617: DEC
48618: ST_TO_ADDR
48619: LD_VAR 0 2
48623: PUSH
48624: FOR_TO
48625: IFFALSE 48652
// if Prob ( 60 ) then
48627: LD_INT 60
48629: PPUSH
48630: CALL_OW 13
48634: IFFALSE 48650
// SetSide ( i , side ) ;
48636: LD_VAR 0 1
48640: PPUSH
48641: LD_VAR 0 3
48645: PPUSH
48646: CALL_OW 235
48650: GO 48624
48652: POP
48653: POP
// end ;
48654: PPOPN 3
48656: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
48657: LD_EXP 2
48661: PUSH
48662: LD_EXP 15
48666: AND
48667: IFFALSE 48786
48669: GO 48671
48671: DISABLE
48672: LD_INT 0
48674: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
48675: LD_ADDR_VAR 0 1
48679: PUSH
48680: LD_INT 22
48682: PUSH
48683: LD_OWVAR 2
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 21
48694: PUSH
48695: LD_INT 1
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 3
48704: PUSH
48705: LD_INT 23
48707: PUSH
48708: LD_INT 0
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: LIST
48723: PPUSH
48724: CALL_OW 69
48728: PUSH
48729: FOR_IN
48730: IFFALSE 48784
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
48732: LD_VAR 0 1
48736: PPUSH
48737: CALL_OW 257
48741: PUSH
48742: LD_INT 1
48744: PUSH
48745: LD_INT 2
48747: PUSH
48748: LD_INT 3
48750: PUSH
48751: LD_INT 4
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: IN
48760: IFFALSE 48782
// SetClass ( un , rand ( 1 , 4 ) ) ;
48762: LD_VAR 0 1
48766: PPUSH
48767: LD_INT 1
48769: PPUSH
48770: LD_INT 4
48772: PPUSH
48773: CALL_OW 12
48777: PPUSH
48778: CALL_OW 336
48782: GO 48729
48784: POP
48785: POP
// end ;
48786: PPOPN 1
48788: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
48789: LD_EXP 2
48793: PUSH
48794: LD_EXP 14
48798: AND
48799: IFFALSE 48878
48801: GO 48803
48803: DISABLE
48804: LD_INT 0
48806: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
48807: LD_ADDR_VAR 0 1
48811: PUSH
48812: LD_INT 22
48814: PUSH
48815: LD_OWVAR 2
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 21
48826: PUSH
48827: LD_INT 3
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PPUSH
48838: CALL_OW 69
48842: ST_TO_ADDR
// if not tmp then
48843: LD_VAR 0 1
48847: NOT
48848: IFFALSE 48852
// exit ;
48850: GO 48878
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
48852: LD_VAR 0 1
48856: PUSH
48857: LD_INT 1
48859: PPUSH
48860: LD_VAR 0 1
48864: PPUSH
48865: CALL_OW 12
48869: ARRAY
48870: PPUSH
48871: LD_INT 100
48873: PPUSH
48874: CALL_OW 234
// end ;
48878: PPOPN 1
48880: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
48881: LD_EXP 2
48885: PUSH
48886: LD_EXP 16
48890: AND
48891: IFFALSE 48989
48893: GO 48895
48895: DISABLE
48896: LD_INT 0
48898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
48899: LD_ADDR_VAR 0 1
48903: PUSH
48904: LD_INT 22
48906: PUSH
48907: LD_OWVAR 2
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 21
48918: PUSH
48919: LD_INT 1
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PPUSH
48930: CALL_OW 69
48934: ST_TO_ADDR
// if not tmp then
48935: LD_VAR 0 1
48939: NOT
48940: IFFALSE 48944
// exit ;
48942: GO 48989
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
48944: LD_VAR 0 1
48948: PUSH
48949: LD_INT 1
48951: PPUSH
48952: LD_VAR 0 1
48956: PPUSH
48957: CALL_OW 12
48961: ARRAY
48962: PPUSH
48963: LD_INT 1
48965: PPUSH
48966: LD_INT 4
48968: PPUSH
48969: CALL_OW 12
48973: PPUSH
48974: LD_INT 3000
48976: PPUSH
48977: LD_INT 9000
48979: PPUSH
48980: CALL_OW 12
48984: PPUSH
48985: CALL_OW 492
// end ;
48989: PPOPN 1
48991: END
// every 0 0$1 trigger StreamModeActive and sDepot do
48992: LD_EXP 2
48996: PUSH
48997: LD_EXP 17
49001: AND
49002: IFFALSE 49022
49004: GO 49006
49006: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
49007: LD_INT 1
49009: PPUSH
49010: LD_OWVAR 2
49014: PPUSH
49015: LD_INT 0
49017: PPUSH
49018: CALL_OW 324
49022: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
49023: LD_EXP 2
49027: PUSH
49028: LD_EXP 18
49032: AND
49033: IFFALSE 49116
49035: GO 49037
49037: DISABLE
49038: LD_INT 0
49040: PPUSH
49041: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
49042: LD_ADDR_VAR 0 2
49046: PUSH
49047: LD_INT 22
49049: PUSH
49050: LD_OWVAR 2
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 21
49061: PUSH
49062: LD_INT 3
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PPUSH
49073: CALL_OW 69
49077: ST_TO_ADDR
// if not tmp then
49078: LD_VAR 0 2
49082: NOT
49083: IFFALSE 49087
// exit ;
49085: GO 49116
// for i in tmp do
49087: LD_ADDR_VAR 0 1
49091: PUSH
49092: LD_VAR 0 2
49096: PUSH
49097: FOR_IN
49098: IFFALSE 49114
// SetBLevel ( i , 10 ) ;
49100: LD_VAR 0 1
49104: PPUSH
49105: LD_INT 10
49107: PPUSH
49108: CALL_OW 241
49112: GO 49097
49114: POP
49115: POP
// end ;
49116: PPOPN 2
49118: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
49119: LD_EXP 2
49123: PUSH
49124: LD_EXP 19
49128: AND
49129: IFFALSE 49240
49131: GO 49133
49133: DISABLE
49134: LD_INT 0
49136: PPUSH
49137: PPUSH
49138: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
49139: LD_ADDR_VAR 0 3
49143: PUSH
49144: LD_INT 22
49146: PUSH
49147: LD_OWVAR 2
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 25
49158: PUSH
49159: LD_INT 1
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PPUSH
49170: CALL_OW 69
49174: ST_TO_ADDR
// if not tmp then
49175: LD_VAR 0 3
49179: NOT
49180: IFFALSE 49184
// exit ;
49182: GO 49240
// un := tmp [ rand ( 1 , tmp ) ] ;
49184: LD_ADDR_VAR 0 2
49188: PUSH
49189: LD_VAR 0 3
49193: PUSH
49194: LD_INT 1
49196: PPUSH
49197: LD_VAR 0 3
49201: PPUSH
49202: CALL_OW 12
49206: ARRAY
49207: ST_TO_ADDR
// if Crawls ( un ) then
49208: LD_VAR 0 2
49212: PPUSH
49213: CALL_OW 318
49217: IFFALSE 49228
// ComWalk ( un ) ;
49219: LD_VAR 0 2
49223: PPUSH
49224: CALL_OW 138
// SetClass ( un , class_sniper ) ;
49228: LD_VAR 0 2
49232: PPUSH
49233: LD_INT 5
49235: PPUSH
49236: CALL_OW 336
// end ;
49240: PPOPN 3
49242: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
49243: LD_EXP 2
49247: PUSH
49248: LD_EXP 20
49252: AND
49253: PUSH
49254: LD_OWVAR 67
49258: PUSH
49259: LD_INT 4
49261: LESS
49262: AND
49263: IFFALSE 49282
49265: GO 49267
49267: DISABLE
// begin Difficulty := Difficulty + 1 ;
49268: LD_ADDR_OWVAR 67
49272: PUSH
49273: LD_OWVAR 67
49277: PUSH
49278: LD_INT 1
49280: PLUS
49281: ST_TO_ADDR
// end ;
49282: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
49283: LD_EXP 2
49287: PUSH
49288: LD_EXP 21
49292: AND
49293: IFFALSE 49396
49295: GO 49297
49297: DISABLE
49298: LD_INT 0
49300: PPUSH
// begin for i := 1 to 5 do
49301: LD_ADDR_VAR 0 1
49305: PUSH
49306: DOUBLE
49307: LD_INT 1
49309: DEC
49310: ST_TO_ADDR
49311: LD_INT 5
49313: PUSH
49314: FOR_TO
49315: IFFALSE 49394
// begin uc_nation := nation_nature ;
49317: LD_ADDR_OWVAR 21
49321: PUSH
49322: LD_INT 0
49324: ST_TO_ADDR
// uc_side := 0 ;
49325: LD_ADDR_OWVAR 20
49329: PUSH
49330: LD_INT 0
49332: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
49333: LD_ADDR_OWVAR 29
49337: PUSH
49338: LD_INT 12
49340: PUSH
49341: LD_INT 12
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: ST_TO_ADDR
// hc_agressivity := 20 ;
49348: LD_ADDR_OWVAR 35
49352: PUSH
49353: LD_INT 20
49355: ST_TO_ADDR
// hc_class := class_tiger ;
49356: LD_ADDR_OWVAR 28
49360: PUSH
49361: LD_INT 14
49363: ST_TO_ADDR
// hc_gallery :=  ;
49364: LD_ADDR_OWVAR 33
49368: PUSH
49369: LD_STRING 
49371: ST_TO_ADDR
// hc_name :=  ;
49372: LD_ADDR_OWVAR 26
49376: PUSH
49377: LD_STRING 
49379: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
49380: CALL_OW 44
49384: PPUSH
49385: LD_INT 0
49387: PPUSH
49388: CALL_OW 51
// end ;
49392: GO 49314
49394: POP
49395: POP
// end ;
49396: PPOPN 1
49398: END
// every 0 0$1 trigger StreamModeActive and sBomb do
49399: LD_EXP 2
49403: PUSH
49404: LD_EXP 22
49408: AND
49409: IFFALSE 49418
49411: GO 49413
49413: DISABLE
// StreamSibBomb ;
49414: CALL 49419 0 0
49418: END
// export function StreamSibBomb ; var i , x , y ; begin
49419: LD_INT 0
49421: PPUSH
49422: PPUSH
49423: PPUSH
49424: PPUSH
// result := false ;
49425: LD_ADDR_VAR 0 1
49429: PUSH
49430: LD_INT 0
49432: ST_TO_ADDR
// for i := 1 to 16 do
49433: LD_ADDR_VAR 0 2
49437: PUSH
49438: DOUBLE
49439: LD_INT 1
49441: DEC
49442: ST_TO_ADDR
49443: LD_INT 16
49445: PUSH
49446: FOR_TO
49447: IFFALSE 49646
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
49449: LD_ADDR_VAR 0 3
49453: PUSH
49454: LD_INT 10
49456: PUSH
49457: LD_INT 20
49459: PUSH
49460: LD_INT 30
49462: PUSH
49463: LD_INT 40
49465: PUSH
49466: LD_INT 50
49468: PUSH
49469: LD_INT 60
49471: PUSH
49472: LD_INT 70
49474: PUSH
49475: LD_INT 80
49477: PUSH
49478: LD_INT 90
49480: PUSH
49481: LD_INT 100
49483: PUSH
49484: LD_INT 110
49486: PUSH
49487: LD_INT 120
49489: PUSH
49490: LD_INT 130
49492: PUSH
49493: LD_INT 140
49495: PUSH
49496: LD_INT 150
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 1
49518: PPUSH
49519: LD_INT 15
49521: PPUSH
49522: CALL_OW 12
49526: ARRAY
49527: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
49528: LD_ADDR_VAR 0 4
49532: PUSH
49533: LD_INT 10
49535: PUSH
49536: LD_INT 20
49538: PUSH
49539: LD_INT 30
49541: PUSH
49542: LD_INT 40
49544: PUSH
49545: LD_INT 50
49547: PUSH
49548: LD_INT 60
49550: PUSH
49551: LD_INT 70
49553: PUSH
49554: LD_INT 80
49556: PUSH
49557: LD_INT 90
49559: PUSH
49560: LD_INT 100
49562: PUSH
49563: LD_INT 110
49565: PUSH
49566: LD_INT 120
49568: PUSH
49569: LD_INT 130
49571: PUSH
49572: LD_INT 140
49574: PUSH
49575: LD_INT 150
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 1
49597: PPUSH
49598: LD_INT 15
49600: PPUSH
49601: CALL_OW 12
49605: ARRAY
49606: ST_TO_ADDR
// if ValidHex ( x , y ) then
49607: LD_VAR 0 3
49611: PPUSH
49612: LD_VAR 0 4
49616: PPUSH
49617: CALL_OW 488
49621: IFFALSE 49644
// begin result := [ x , y ] ;
49623: LD_ADDR_VAR 0 1
49627: PUSH
49628: LD_VAR 0 3
49632: PUSH
49633: LD_VAR 0 4
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: ST_TO_ADDR
// break ;
49642: GO 49646
// end ; end ;
49644: GO 49446
49646: POP
49647: POP
// if result then
49648: LD_VAR 0 1
49652: IFFALSE 49712
// begin ToLua ( playSibBomb() ) ;
49654: LD_STRING playSibBomb()
49656: PPUSH
49657: CALL_OW 559
// wait ( 0 0$14 ) ;
49661: LD_INT 490
49663: PPUSH
49664: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
49668: LD_VAR 0 1
49672: PUSH
49673: LD_INT 1
49675: ARRAY
49676: PPUSH
49677: LD_VAR 0 1
49681: PUSH
49682: LD_INT 2
49684: ARRAY
49685: PPUSH
49686: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
49690: LD_VAR 0 1
49694: PUSH
49695: LD_INT 1
49697: ARRAY
49698: PPUSH
49699: LD_VAR 0 1
49703: PUSH
49704: LD_INT 2
49706: ARRAY
49707: PPUSH
49708: CALL_OW 429
// end ; end ;
49712: LD_VAR 0 1
49716: RET
// every 0 0$1 trigger StreamModeActive and sReset do
49717: LD_EXP 2
49721: PUSH
49722: LD_EXP 24
49726: AND
49727: IFFALSE 49739
49729: GO 49731
49731: DISABLE
// YouLost (  ) ;
49732: LD_STRING 
49734: PPUSH
49735: CALL_OW 104
49739: END
// every 0 0$1 trigger StreamModeActive and sFog do
49740: LD_EXP 2
49744: PUSH
49745: LD_EXP 23
49749: AND
49750: IFFALSE 49764
49752: GO 49754
49754: DISABLE
// FogOff ( your_side ) ;
49755: LD_OWVAR 2
49759: PPUSH
49760: CALL_OW 344
49764: END
// every 0 0$1 trigger StreamModeActive and sSun do
49765: LD_EXP 2
49769: PUSH
49770: LD_EXP 25
49774: AND
49775: IFFALSE 49803
49777: GO 49779
49779: DISABLE
// begin solar_recharge_percent := 0 ;
49780: LD_ADDR_OWVAR 79
49784: PUSH
49785: LD_INT 0
49787: ST_TO_ADDR
// wait ( 5 5$00 ) ;
49788: LD_INT 10500
49790: PPUSH
49791: CALL_OW 67
// solar_recharge_percent := 100 ;
49795: LD_ADDR_OWVAR 79
49799: PUSH
49800: LD_INT 100
49802: ST_TO_ADDR
// end ;
49803: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
49804: LD_EXP 2
49808: PUSH
49809: LD_EXP 26
49813: AND
49814: IFFALSE 50053
49816: GO 49818
49818: DISABLE
49819: LD_INT 0
49821: PPUSH
49822: PPUSH
49823: PPUSH
// begin tmp := [ ] ;
49824: LD_ADDR_VAR 0 3
49828: PUSH
49829: EMPTY
49830: ST_TO_ADDR
// for i := 1 to 6 do
49831: LD_ADDR_VAR 0 1
49835: PUSH
49836: DOUBLE
49837: LD_INT 1
49839: DEC
49840: ST_TO_ADDR
49841: LD_INT 6
49843: PUSH
49844: FOR_TO
49845: IFFALSE 49950
// begin uc_nation := nation_nature ;
49847: LD_ADDR_OWVAR 21
49851: PUSH
49852: LD_INT 0
49854: ST_TO_ADDR
// uc_side := 0 ;
49855: LD_ADDR_OWVAR 20
49859: PUSH
49860: LD_INT 0
49862: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
49863: LD_ADDR_OWVAR 29
49867: PUSH
49868: LD_INT 12
49870: PUSH
49871: LD_INT 12
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: ST_TO_ADDR
// hc_agressivity := 20 ;
49878: LD_ADDR_OWVAR 35
49882: PUSH
49883: LD_INT 20
49885: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
49886: LD_ADDR_OWVAR 28
49890: PUSH
49891: LD_INT 17
49893: ST_TO_ADDR
// hc_gallery :=  ;
49894: LD_ADDR_OWVAR 33
49898: PUSH
49899: LD_STRING 
49901: ST_TO_ADDR
// hc_name :=  ;
49902: LD_ADDR_OWVAR 26
49906: PUSH
49907: LD_STRING 
49909: ST_TO_ADDR
// un := CreateHuman ;
49910: LD_ADDR_VAR 0 2
49914: PUSH
49915: CALL_OW 44
49919: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
49920: LD_VAR 0 2
49924: PPUSH
49925: LD_INT 1
49927: PPUSH
49928: CALL_OW 51
// tmp := tmp ^ un ;
49932: LD_ADDR_VAR 0 3
49936: PUSH
49937: LD_VAR 0 3
49941: PUSH
49942: LD_VAR 0 2
49946: ADD
49947: ST_TO_ADDR
// end ;
49948: GO 49844
49950: POP
49951: POP
// repeat wait ( 0 0$1 ) ;
49952: LD_INT 35
49954: PPUSH
49955: CALL_OW 67
// for un in tmp do
49959: LD_ADDR_VAR 0 2
49963: PUSH
49964: LD_VAR 0 3
49968: PUSH
49969: FOR_IN
49970: IFFALSE 50044
// begin if IsDead ( un ) then
49972: LD_VAR 0 2
49976: PPUSH
49977: CALL_OW 301
49981: IFFALSE 50001
// begin tmp := tmp diff un ;
49983: LD_ADDR_VAR 0 3
49987: PUSH
49988: LD_VAR 0 3
49992: PUSH
49993: LD_VAR 0 2
49997: DIFF
49998: ST_TO_ADDR
// continue ;
49999: GO 49969
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
50001: LD_VAR 0 2
50005: PPUSH
50006: LD_INT 3
50008: PUSH
50009: LD_INT 22
50011: PUSH
50012: LD_INT 0
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PPUSH
50023: CALL_OW 69
50027: PPUSH
50028: LD_VAR 0 2
50032: PPUSH
50033: CALL_OW 74
50037: PPUSH
50038: CALL_OW 115
// end ;
50042: GO 49969
50044: POP
50045: POP
// until not tmp ;
50046: LD_VAR 0 3
50050: NOT
50051: IFFALSE 49952
// end ;
50053: PPOPN 3
50055: END
// every 0 0$1 trigger StreamModeActive and sTroll do
50056: LD_EXP 2
50060: PUSH
50061: LD_EXP 27
50065: AND
50066: IFFALSE 50120
50068: GO 50070
50070: DISABLE
// begin ToLua ( displayTroll(); ) ;
50071: LD_STRING displayTroll();
50073: PPUSH
50074: CALL_OW 559
// wait ( 3 3$00 ) ;
50078: LD_INT 6300
50080: PPUSH
50081: CALL_OW 67
// ToLua ( hideTroll(); ) ;
50085: LD_STRING hideTroll();
50087: PPUSH
50088: CALL_OW 559
// wait ( 1 1$00 ) ;
50092: LD_INT 2100
50094: PPUSH
50095: CALL_OW 67
// ToLua ( displayTroll(); ) ;
50099: LD_STRING displayTroll();
50101: PPUSH
50102: CALL_OW 559
// wait ( 1 1$00 ) ;
50106: LD_INT 2100
50108: PPUSH
50109: CALL_OW 67
// ToLua ( hideTroll(); ) ;
50113: LD_STRING hideTroll();
50115: PPUSH
50116: CALL_OW 559
// end ;
50120: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
50121: LD_EXP 2
50125: PUSH
50126: LD_EXP 28
50130: AND
50131: IFFALSE 50194
50133: GO 50135
50135: DISABLE
50136: LD_INT 0
50138: PPUSH
// begin p := 0 ;
50139: LD_ADDR_VAR 0 1
50143: PUSH
50144: LD_INT 0
50146: ST_TO_ADDR
// repeat game_speed := 1 ;
50147: LD_ADDR_OWVAR 65
50151: PUSH
50152: LD_INT 1
50154: ST_TO_ADDR
// wait ( 0 0$1 ) ;
50155: LD_INT 35
50157: PPUSH
50158: CALL_OW 67
// p := p + 1 ;
50162: LD_ADDR_VAR 0 1
50166: PUSH
50167: LD_VAR 0 1
50171: PUSH
50172: LD_INT 1
50174: PLUS
50175: ST_TO_ADDR
// until p >= 60 ;
50176: LD_VAR 0 1
50180: PUSH
50181: LD_INT 60
50183: GREATEREQUAL
50184: IFFALSE 50147
// game_speed := 4 ;
50186: LD_ADDR_OWVAR 65
50190: PUSH
50191: LD_INT 4
50193: ST_TO_ADDR
// end ;
50194: PPOPN 1
50196: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
50197: LD_EXP 2
50201: PUSH
50202: LD_EXP 29
50206: AND
50207: IFFALSE 50353
50209: GO 50211
50211: DISABLE
50212: LD_INT 0
50214: PPUSH
50215: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50216: LD_ADDR_VAR 0 1
50220: PUSH
50221: LD_INT 22
50223: PUSH
50224: LD_OWVAR 2
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 2
50235: PUSH
50236: LD_INT 30
50238: PUSH
50239: LD_INT 0
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 30
50248: PUSH
50249: LD_INT 1
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: LIST
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PPUSH
50265: CALL_OW 69
50269: ST_TO_ADDR
// if not depot then
50270: LD_VAR 0 1
50274: NOT
50275: IFFALSE 50279
// exit ;
50277: GO 50353
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
50279: LD_ADDR_VAR 0 2
50283: PUSH
50284: LD_VAR 0 1
50288: PUSH
50289: LD_INT 1
50291: PPUSH
50292: LD_VAR 0 1
50296: PPUSH
50297: CALL_OW 12
50301: ARRAY
50302: PPUSH
50303: CALL_OW 274
50307: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
50308: LD_VAR 0 2
50312: PPUSH
50313: LD_INT 1
50315: PPUSH
50316: LD_INT 0
50318: PPUSH
50319: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
50323: LD_VAR 0 2
50327: PPUSH
50328: LD_INT 2
50330: PPUSH
50331: LD_INT 0
50333: PPUSH
50334: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
50338: LD_VAR 0 2
50342: PPUSH
50343: LD_INT 3
50345: PPUSH
50346: LD_INT 0
50348: PPUSH
50349: CALL_OW 277
// end ;
50353: PPOPN 2
50355: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
50356: LD_EXP 2
50360: PUSH
50361: LD_EXP 30
50365: AND
50366: IFFALSE 50463
50368: GO 50370
50370: DISABLE
50371: LD_INT 0
50373: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
50374: LD_ADDR_VAR 0 1
50378: PUSH
50379: LD_INT 22
50381: PUSH
50382: LD_OWVAR 2
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 21
50393: PUSH
50394: LD_INT 1
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 3
50403: PUSH
50404: LD_INT 23
50406: PUSH
50407: LD_INT 0
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: LIST
50422: PPUSH
50423: CALL_OW 69
50427: ST_TO_ADDR
// if not tmp then
50428: LD_VAR 0 1
50432: NOT
50433: IFFALSE 50437
// exit ;
50435: GO 50463
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
50437: LD_VAR 0 1
50441: PUSH
50442: LD_INT 1
50444: PPUSH
50445: LD_VAR 0 1
50449: PPUSH
50450: CALL_OW 12
50454: ARRAY
50455: PPUSH
50456: LD_INT 200
50458: PPUSH
50459: CALL_OW 234
// end ;
50463: PPOPN 1
50465: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
50466: LD_EXP 2
50470: PUSH
50471: LD_EXP 31
50475: AND
50476: IFFALSE 50555
50478: GO 50480
50480: DISABLE
50481: LD_INT 0
50483: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
50484: LD_ADDR_VAR 0 1
50488: PUSH
50489: LD_INT 22
50491: PUSH
50492: LD_OWVAR 2
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 21
50503: PUSH
50504: LD_INT 2
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PPUSH
50515: CALL_OW 69
50519: ST_TO_ADDR
// if not tmp then
50520: LD_VAR 0 1
50524: NOT
50525: IFFALSE 50529
// exit ;
50527: GO 50555
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
50529: LD_VAR 0 1
50533: PUSH
50534: LD_INT 1
50536: PPUSH
50537: LD_VAR 0 1
50541: PPUSH
50542: CALL_OW 12
50546: ARRAY
50547: PPUSH
50548: LD_INT 60
50550: PPUSH
50551: CALL_OW 234
// end ;
50555: PPOPN 1
50557: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
50558: LD_EXP 2
50562: PUSH
50563: LD_EXP 32
50567: AND
50568: IFFALSE 50667
50570: GO 50572
50572: DISABLE
50573: LD_INT 0
50575: PPUSH
50576: PPUSH
// begin enable ;
50577: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
50578: LD_ADDR_VAR 0 1
50582: PUSH
50583: LD_INT 22
50585: PUSH
50586: LD_OWVAR 2
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 61
50597: PUSH
50598: EMPTY
50599: LIST
50600: PUSH
50601: LD_INT 33
50603: PUSH
50604: LD_INT 2
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: LIST
50615: PPUSH
50616: CALL_OW 69
50620: ST_TO_ADDR
// if not tmp then
50621: LD_VAR 0 1
50625: NOT
50626: IFFALSE 50630
// exit ;
50628: GO 50667
// for i in tmp do
50630: LD_ADDR_VAR 0 2
50634: PUSH
50635: LD_VAR 0 1
50639: PUSH
50640: FOR_IN
50641: IFFALSE 50665
// if IsControledBy ( i ) then
50643: LD_VAR 0 2
50647: PPUSH
50648: CALL_OW 312
50652: IFFALSE 50663
// ComUnlink ( i ) ;
50654: LD_VAR 0 2
50658: PPUSH
50659: CALL_OW 136
50663: GO 50640
50665: POP
50666: POP
// end ;
50667: PPOPN 2
50669: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
50670: LD_EXP 2
50674: PUSH
50675: LD_EXP 33
50679: AND
50680: IFFALSE 50820
50682: GO 50684
50684: DISABLE
50685: LD_INT 0
50687: PPUSH
50688: PPUSH
// begin ToLua ( displayPowell(); ) ;
50689: LD_STRING displayPowell();
50691: PPUSH
50692: CALL_OW 559
// uc_side := 0 ;
50696: LD_ADDR_OWVAR 20
50700: PUSH
50701: LD_INT 0
50703: ST_TO_ADDR
// uc_nation := 2 ;
50704: LD_ADDR_OWVAR 21
50708: PUSH
50709: LD_INT 2
50711: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
50712: LD_ADDR_OWVAR 37
50716: PUSH
50717: LD_INT 14
50719: ST_TO_ADDR
// vc_engine := engine_siberite ;
50720: LD_ADDR_OWVAR 39
50724: PUSH
50725: LD_INT 3
50727: ST_TO_ADDR
// vc_control := control_apeman ;
50728: LD_ADDR_OWVAR 38
50732: PUSH
50733: LD_INT 5
50735: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
50736: LD_ADDR_OWVAR 40
50740: PUSH
50741: LD_INT 29
50743: ST_TO_ADDR
// un := CreateVehicle ;
50744: LD_ADDR_VAR 0 2
50748: PUSH
50749: CALL_OW 45
50753: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
50754: LD_VAR 0 2
50758: PPUSH
50759: LD_INT 1
50761: PPUSH
50762: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
50766: LD_INT 35
50768: PPUSH
50769: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
50773: LD_VAR 0 2
50777: PPUSH
50778: LD_INT 22
50780: PUSH
50781: LD_OWVAR 2
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PPUSH
50790: CALL_OW 69
50794: PPUSH
50795: LD_VAR 0 2
50799: PPUSH
50800: CALL_OW 74
50804: PPUSH
50805: CALL_OW 115
// until IsDead ( un ) ;
50809: LD_VAR 0 2
50813: PPUSH
50814: CALL_OW 301
50818: IFFALSE 50766
// end ;
50820: PPOPN 2
50822: END
// every 0 0$1 trigger StreamModeActive and sStu do
50823: LD_EXP 2
50827: PUSH
50828: LD_EXP 41
50832: AND
50833: IFFALSE 50849
50835: GO 50837
50837: DISABLE
// begin ToLua ( displayStucuk(); ) ;
50838: LD_STRING displayStucuk();
50840: PPUSH
50841: CALL_OW 559
// ResetFog ;
50845: CALL_OW 335
// end ;
50849: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
50850: LD_EXP 2
50854: PUSH
50855: LD_EXP 34
50859: AND
50860: IFFALSE 51001
50862: GO 50864
50864: DISABLE
50865: LD_INT 0
50867: PPUSH
50868: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
50869: LD_ADDR_VAR 0 2
50873: PUSH
50874: LD_INT 22
50876: PUSH
50877: LD_OWVAR 2
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 21
50888: PUSH
50889: LD_INT 1
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PPUSH
50900: CALL_OW 69
50904: ST_TO_ADDR
// if not tmp then
50905: LD_VAR 0 2
50909: NOT
50910: IFFALSE 50914
// exit ;
50912: GO 51001
// un := tmp [ rand ( 1 , tmp ) ] ;
50914: LD_ADDR_VAR 0 1
50918: PUSH
50919: LD_VAR 0 2
50923: PUSH
50924: LD_INT 1
50926: PPUSH
50927: LD_VAR 0 2
50931: PPUSH
50932: CALL_OW 12
50936: ARRAY
50937: ST_TO_ADDR
// SetSide ( un , 0 ) ;
50938: LD_VAR 0 1
50942: PPUSH
50943: LD_INT 0
50945: PPUSH
50946: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
50950: LD_VAR 0 1
50954: PPUSH
50955: LD_OWVAR 3
50959: PUSH
50960: LD_VAR 0 1
50964: DIFF
50965: PPUSH
50966: LD_VAR 0 1
50970: PPUSH
50971: CALL_OW 74
50975: PPUSH
50976: CALL_OW 115
// wait ( 0 0$20 ) ;
50980: LD_INT 700
50982: PPUSH
50983: CALL_OW 67
// SetSide ( un , your_side ) ;
50987: LD_VAR 0 1
50991: PPUSH
50992: LD_OWVAR 2
50996: PPUSH
50997: CALL_OW 235
// end ;
51001: PPOPN 2
51003: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
51004: LD_EXP 2
51008: PUSH
51009: LD_EXP 35
51013: AND
51014: IFFALSE 51120
51016: GO 51018
51018: DISABLE
51019: LD_INT 0
51021: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51022: LD_ADDR_VAR 0 1
51026: PUSH
51027: LD_INT 22
51029: PUSH
51030: LD_OWVAR 2
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 2
51041: PUSH
51042: LD_INT 30
51044: PUSH
51045: LD_INT 0
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 30
51054: PUSH
51055: LD_INT 1
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: LIST
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PPUSH
51071: CALL_OW 69
51075: ST_TO_ADDR
// if not depot then
51076: LD_VAR 0 1
51080: NOT
51081: IFFALSE 51085
// exit ;
51083: GO 51120
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
51085: LD_VAR 0 1
51089: PUSH
51090: LD_INT 1
51092: ARRAY
51093: PPUSH
51094: CALL_OW 250
51098: PPUSH
51099: LD_VAR 0 1
51103: PUSH
51104: LD_INT 1
51106: ARRAY
51107: PPUSH
51108: CALL_OW 251
51112: PPUSH
51113: LD_INT 70
51115: PPUSH
51116: CALL_OW 495
// end ;
51120: PPOPN 1
51122: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
51123: LD_EXP 2
51127: PUSH
51128: LD_EXP 36
51132: AND
51133: IFFALSE 51344
51135: GO 51137
51137: DISABLE
51138: LD_INT 0
51140: PPUSH
51141: PPUSH
51142: PPUSH
51143: PPUSH
51144: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
51145: LD_ADDR_VAR 0 5
51149: PUSH
51150: LD_INT 22
51152: PUSH
51153: LD_OWVAR 2
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 21
51164: PUSH
51165: LD_INT 1
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PPUSH
51176: CALL_OW 69
51180: ST_TO_ADDR
// if not tmp then
51181: LD_VAR 0 5
51185: NOT
51186: IFFALSE 51190
// exit ;
51188: GO 51344
// for i in tmp do
51190: LD_ADDR_VAR 0 1
51194: PUSH
51195: LD_VAR 0 5
51199: PUSH
51200: FOR_IN
51201: IFFALSE 51342
// begin d := rand ( 0 , 5 ) ;
51203: LD_ADDR_VAR 0 4
51207: PUSH
51208: LD_INT 0
51210: PPUSH
51211: LD_INT 5
51213: PPUSH
51214: CALL_OW 12
51218: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
51219: LD_ADDR_VAR 0 2
51223: PUSH
51224: LD_VAR 0 1
51228: PPUSH
51229: CALL_OW 250
51233: PPUSH
51234: LD_VAR 0 4
51238: PPUSH
51239: LD_INT 3
51241: PPUSH
51242: LD_INT 12
51244: PPUSH
51245: CALL_OW 12
51249: PPUSH
51250: CALL_OW 272
51254: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
51255: LD_ADDR_VAR 0 3
51259: PUSH
51260: LD_VAR 0 1
51264: PPUSH
51265: CALL_OW 251
51269: PPUSH
51270: LD_VAR 0 4
51274: PPUSH
51275: LD_INT 3
51277: PPUSH
51278: LD_INT 12
51280: PPUSH
51281: CALL_OW 12
51285: PPUSH
51286: CALL_OW 273
51290: ST_TO_ADDR
// if ValidHex ( x , y ) then
51291: LD_VAR 0 2
51295: PPUSH
51296: LD_VAR 0 3
51300: PPUSH
51301: CALL_OW 488
51305: IFFALSE 51340
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
51307: LD_VAR 0 1
51311: PPUSH
51312: LD_VAR 0 2
51316: PPUSH
51317: LD_VAR 0 3
51321: PPUSH
51322: LD_INT 3
51324: PPUSH
51325: LD_INT 6
51327: PPUSH
51328: CALL_OW 12
51332: PPUSH
51333: LD_INT 1
51335: PPUSH
51336: CALL_OW 483
// end ;
51340: GO 51200
51342: POP
51343: POP
// end ;
51344: PPOPN 5
51346: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
51347: LD_EXP 2
51351: PUSH
51352: LD_EXP 37
51356: AND
51357: IFFALSE 51451
51359: GO 51361
51361: DISABLE
51362: LD_INT 0
51364: PPUSH
51365: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
51366: LD_ADDR_VAR 0 2
51370: PUSH
51371: LD_INT 22
51373: PUSH
51374: LD_OWVAR 2
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 32
51385: PUSH
51386: LD_INT 1
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 21
51395: PUSH
51396: LD_INT 2
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: LIST
51407: PPUSH
51408: CALL_OW 69
51412: ST_TO_ADDR
// if not tmp then
51413: LD_VAR 0 2
51417: NOT
51418: IFFALSE 51422
// exit ;
51420: GO 51451
// for i in tmp do
51422: LD_ADDR_VAR 0 1
51426: PUSH
51427: LD_VAR 0 2
51431: PUSH
51432: FOR_IN
51433: IFFALSE 51449
// SetFuel ( i , 0 ) ;
51435: LD_VAR 0 1
51439: PPUSH
51440: LD_INT 0
51442: PPUSH
51443: CALL_OW 240
51447: GO 51432
51449: POP
51450: POP
// end ;
51451: PPOPN 2
51453: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
51454: LD_EXP 2
51458: PUSH
51459: LD_EXP 38
51463: AND
51464: IFFALSE 51530
51466: GO 51468
51468: DISABLE
51469: LD_INT 0
51471: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
51472: LD_ADDR_VAR 0 1
51476: PUSH
51477: LD_INT 22
51479: PUSH
51480: LD_OWVAR 2
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 30
51491: PUSH
51492: LD_INT 29
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PPUSH
51503: CALL_OW 69
51507: ST_TO_ADDR
// if not tmp then
51508: LD_VAR 0 1
51512: NOT
51513: IFFALSE 51517
// exit ;
51515: GO 51530
// DestroyUnit ( tmp [ 1 ] ) ;
51517: LD_VAR 0 1
51521: PUSH
51522: LD_INT 1
51524: ARRAY
51525: PPUSH
51526: CALL_OW 65
// end ;
51530: PPOPN 1
51532: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
51533: LD_EXP 2
51537: PUSH
51538: LD_EXP 40
51542: AND
51543: IFFALSE 51672
51545: GO 51547
51547: DISABLE
51548: LD_INT 0
51550: PPUSH
// begin uc_side := 0 ;
51551: LD_ADDR_OWVAR 20
51555: PUSH
51556: LD_INT 0
51558: ST_TO_ADDR
// uc_nation := nation_arabian ;
51559: LD_ADDR_OWVAR 21
51563: PUSH
51564: LD_INT 2
51566: ST_TO_ADDR
// hc_gallery :=  ;
51567: LD_ADDR_OWVAR 33
51571: PUSH
51572: LD_STRING 
51574: ST_TO_ADDR
// hc_name :=  ;
51575: LD_ADDR_OWVAR 26
51579: PUSH
51580: LD_STRING 
51582: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
51583: LD_INT 1
51585: PPUSH
51586: LD_INT 11
51588: PPUSH
51589: LD_INT 10
51591: PPUSH
51592: CALL_OW 380
// un := CreateHuman ;
51596: LD_ADDR_VAR 0 1
51600: PUSH
51601: CALL_OW 44
51605: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
51606: LD_VAR 0 1
51610: PPUSH
51611: LD_INT 1
51613: PPUSH
51614: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
51618: LD_INT 35
51620: PPUSH
51621: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
51625: LD_VAR 0 1
51629: PPUSH
51630: LD_INT 22
51632: PUSH
51633: LD_OWVAR 2
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PPUSH
51642: CALL_OW 69
51646: PPUSH
51647: LD_VAR 0 1
51651: PPUSH
51652: CALL_OW 74
51656: PPUSH
51657: CALL_OW 115
// until IsDead ( un ) ;
51661: LD_VAR 0 1
51665: PPUSH
51666: CALL_OW 301
51670: IFFALSE 51618
// end ;
51672: PPOPN 1
51674: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
51675: LD_EXP 2
51679: PUSH
51680: LD_EXP 42
51684: AND
51685: IFFALSE 51697
51687: GO 51689
51689: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
51690: LD_STRING earthquake(getX(game), 0, 32)
51692: PPUSH
51693: CALL_OW 559
51697: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
51698: LD_EXP 2
51702: PUSH
51703: LD_EXP 43
51707: AND
51708: IFFALSE 51799
51710: GO 51712
51712: DISABLE
51713: LD_INT 0
51715: PPUSH
// begin enable ;
51716: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
51717: LD_ADDR_VAR 0 1
51721: PUSH
51722: LD_INT 22
51724: PUSH
51725: LD_OWVAR 2
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 21
51736: PUSH
51737: LD_INT 2
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 33
51746: PUSH
51747: LD_INT 3
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: LIST
51758: PPUSH
51759: CALL_OW 69
51763: ST_TO_ADDR
// if not tmp then
51764: LD_VAR 0 1
51768: NOT
51769: IFFALSE 51773
// exit ;
51771: GO 51799
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
51773: LD_VAR 0 1
51777: PUSH
51778: LD_INT 1
51780: PPUSH
51781: LD_VAR 0 1
51785: PPUSH
51786: CALL_OW 12
51790: ARRAY
51791: PPUSH
51792: LD_INT 1
51794: PPUSH
51795: CALL_OW 234
// end ;
51799: PPOPN 1
51801: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
51802: LD_EXP 2
51806: PUSH
51807: LD_EXP 44
51811: AND
51812: IFFALSE 51953
51814: GO 51816
51816: DISABLE
51817: LD_INT 0
51819: PPUSH
51820: PPUSH
51821: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
51822: LD_ADDR_VAR 0 3
51826: PUSH
51827: LD_INT 22
51829: PUSH
51830: LD_OWVAR 2
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 25
51841: PUSH
51842: LD_INT 1
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PPUSH
51853: CALL_OW 69
51857: ST_TO_ADDR
// if not tmp then
51858: LD_VAR 0 3
51862: NOT
51863: IFFALSE 51867
// exit ;
51865: GO 51953
// un := tmp [ rand ( 1 , tmp ) ] ;
51867: LD_ADDR_VAR 0 2
51871: PUSH
51872: LD_VAR 0 3
51876: PUSH
51877: LD_INT 1
51879: PPUSH
51880: LD_VAR 0 3
51884: PPUSH
51885: CALL_OW 12
51889: ARRAY
51890: ST_TO_ADDR
// if Crawls ( un ) then
51891: LD_VAR 0 2
51895: PPUSH
51896: CALL_OW 318
51900: IFFALSE 51911
// ComWalk ( un ) ;
51902: LD_VAR 0 2
51906: PPUSH
51907: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
51911: LD_VAR 0 2
51915: PPUSH
51916: LD_INT 9
51918: PPUSH
51919: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
51923: LD_INT 28
51925: PPUSH
51926: LD_OWVAR 2
51930: PPUSH
51931: LD_INT 2
51933: PPUSH
51934: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
51938: LD_INT 29
51940: PPUSH
51941: LD_OWVAR 2
51945: PPUSH
51946: LD_INT 2
51948: PPUSH
51949: CALL_OW 322
// end ;
51953: PPOPN 3
51955: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
51956: LD_EXP 2
51960: PUSH
51961: LD_EXP 45
51965: AND
51966: IFFALSE 52077
51968: GO 51970
51970: DISABLE
51971: LD_INT 0
51973: PPUSH
51974: PPUSH
51975: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
51976: LD_ADDR_VAR 0 3
51980: PUSH
51981: LD_INT 22
51983: PUSH
51984: LD_OWVAR 2
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 25
51995: PUSH
51996: LD_INT 1
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PPUSH
52007: CALL_OW 69
52011: ST_TO_ADDR
// if not tmp then
52012: LD_VAR 0 3
52016: NOT
52017: IFFALSE 52021
// exit ;
52019: GO 52077
// un := tmp [ rand ( 1 , tmp ) ] ;
52021: LD_ADDR_VAR 0 2
52025: PUSH
52026: LD_VAR 0 3
52030: PUSH
52031: LD_INT 1
52033: PPUSH
52034: LD_VAR 0 3
52038: PPUSH
52039: CALL_OW 12
52043: ARRAY
52044: ST_TO_ADDR
// if Crawls ( un ) then
52045: LD_VAR 0 2
52049: PPUSH
52050: CALL_OW 318
52054: IFFALSE 52065
// ComWalk ( un ) ;
52056: LD_VAR 0 2
52060: PPUSH
52061: CALL_OW 138
// SetClass ( un , class_mortar ) ;
52065: LD_VAR 0 2
52069: PPUSH
52070: LD_INT 8
52072: PPUSH
52073: CALL_OW 336
// end ;
52077: PPOPN 3
52079: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
52080: LD_EXP 2
52084: PUSH
52085: LD_EXP 46
52089: AND
52090: IFFALSE 52234
52092: GO 52094
52094: DISABLE
52095: LD_INT 0
52097: PPUSH
52098: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
52099: LD_ADDR_VAR 0 2
52103: PUSH
52104: LD_INT 22
52106: PUSH
52107: LD_OWVAR 2
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 21
52118: PUSH
52119: LD_INT 2
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 2
52128: PUSH
52129: LD_INT 34
52131: PUSH
52132: LD_INT 12
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 34
52141: PUSH
52142: LD_INT 51
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 34
52151: PUSH
52152: LD_INT 32
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: LIST
52169: PPUSH
52170: CALL_OW 69
52174: ST_TO_ADDR
// if not tmp then
52175: LD_VAR 0 2
52179: NOT
52180: IFFALSE 52184
// exit ;
52182: GO 52234
// for i in tmp do
52184: LD_ADDR_VAR 0 1
52188: PUSH
52189: LD_VAR 0 2
52193: PUSH
52194: FOR_IN
52195: IFFALSE 52232
// if GetCargo ( i , mat_artifact ) = 0 then
52197: LD_VAR 0 1
52201: PPUSH
52202: LD_INT 4
52204: PPUSH
52205: CALL_OW 289
52209: PUSH
52210: LD_INT 0
52212: EQUAL
52213: IFFALSE 52230
// SetCargo ( i , mat_siberit , 100 ) ;
52215: LD_VAR 0 1
52219: PPUSH
52220: LD_INT 3
52222: PPUSH
52223: LD_INT 100
52225: PPUSH
52226: CALL_OW 290
52230: GO 52194
52232: POP
52233: POP
// end ;
52234: PPOPN 2
52236: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
52237: LD_EXP 2
52241: PUSH
52242: LD_EXP 47
52246: AND
52247: IFFALSE 52430
52249: GO 52251
52251: DISABLE
52252: LD_INT 0
52254: PPUSH
52255: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
52256: LD_ADDR_VAR 0 2
52260: PUSH
52261: LD_INT 22
52263: PUSH
52264: LD_OWVAR 2
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PPUSH
52273: CALL_OW 69
52277: ST_TO_ADDR
// if not tmp then
52278: LD_VAR 0 2
52282: NOT
52283: IFFALSE 52287
// exit ;
52285: GO 52430
// for i := 1 to 2 do
52287: LD_ADDR_VAR 0 1
52291: PUSH
52292: DOUBLE
52293: LD_INT 1
52295: DEC
52296: ST_TO_ADDR
52297: LD_INT 2
52299: PUSH
52300: FOR_TO
52301: IFFALSE 52428
// begin uc_side := your_side ;
52303: LD_ADDR_OWVAR 20
52307: PUSH
52308: LD_OWVAR 2
52312: ST_TO_ADDR
// uc_nation := nation_american ;
52313: LD_ADDR_OWVAR 21
52317: PUSH
52318: LD_INT 1
52320: ST_TO_ADDR
// vc_chassis := us_morphling ;
52321: LD_ADDR_OWVAR 37
52325: PUSH
52326: LD_INT 5
52328: ST_TO_ADDR
// vc_engine := engine_siberite ;
52329: LD_ADDR_OWVAR 39
52333: PUSH
52334: LD_INT 3
52336: ST_TO_ADDR
// vc_control := control_computer ;
52337: LD_ADDR_OWVAR 38
52341: PUSH
52342: LD_INT 3
52344: ST_TO_ADDR
// vc_weapon := us_double_laser ;
52345: LD_ADDR_OWVAR 40
52349: PUSH
52350: LD_INT 10
52352: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
52353: LD_VAR 0 2
52357: PUSH
52358: LD_INT 1
52360: ARRAY
52361: PPUSH
52362: CALL_OW 310
52366: NOT
52367: IFFALSE 52414
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
52369: CALL_OW 45
52373: PPUSH
52374: LD_VAR 0 2
52378: PUSH
52379: LD_INT 1
52381: ARRAY
52382: PPUSH
52383: CALL_OW 250
52387: PPUSH
52388: LD_VAR 0 2
52392: PUSH
52393: LD_INT 1
52395: ARRAY
52396: PPUSH
52397: CALL_OW 251
52401: PPUSH
52402: LD_INT 12
52404: PPUSH
52405: LD_INT 1
52407: PPUSH
52408: CALL_OW 50
52412: GO 52426
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
52414: CALL_OW 45
52418: PPUSH
52419: LD_INT 1
52421: PPUSH
52422: CALL_OW 51
// end ;
52426: GO 52300
52428: POP
52429: POP
// end ;
52430: PPOPN 2
52432: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
52433: LD_EXP 2
52437: PUSH
52438: LD_EXP 48
52442: AND
52443: IFFALSE 52665
52445: GO 52447
52447: DISABLE
52448: LD_INT 0
52450: PPUSH
52451: PPUSH
52452: PPUSH
52453: PPUSH
52454: PPUSH
52455: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
52456: LD_ADDR_VAR 0 6
52460: PUSH
52461: LD_INT 22
52463: PUSH
52464: LD_OWVAR 2
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 21
52475: PUSH
52476: LD_INT 1
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 3
52485: PUSH
52486: LD_INT 23
52488: PUSH
52489: LD_INT 0
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: LIST
52504: PPUSH
52505: CALL_OW 69
52509: ST_TO_ADDR
// if not tmp then
52510: LD_VAR 0 6
52514: NOT
52515: IFFALSE 52519
// exit ;
52517: GO 52665
// s1 := rand ( 1 , 4 ) ;
52519: LD_ADDR_VAR 0 2
52523: PUSH
52524: LD_INT 1
52526: PPUSH
52527: LD_INT 4
52529: PPUSH
52530: CALL_OW 12
52534: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
52535: LD_ADDR_VAR 0 4
52539: PUSH
52540: LD_VAR 0 6
52544: PUSH
52545: LD_INT 1
52547: ARRAY
52548: PPUSH
52549: LD_VAR 0 2
52553: PPUSH
52554: CALL_OW 259
52558: ST_TO_ADDR
// if s1 = 1 then
52559: LD_VAR 0 2
52563: PUSH
52564: LD_INT 1
52566: EQUAL
52567: IFFALSE 52587
// s2 := rand ( 2 , 4 ) else
52569: LD_ADDR_VAR 0 3
52573: PUSH
52574: LD_INT 2
52576: PPUSH
52577: LD_INT 4
52579: PPUSH
52580: CALL_OW 12
52584: ST_TO_ADDR
52585: GO 52595
// s2 := 1 ;
52587: LD_ADDR_VAR 0 3
52591: PUSH
52592: LD_INT 1
52594: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
52595: LD_ADDR_VAR 0 5
52599: PUSH
52600: LD_VAR 0 6
52604: PUSH
52605: LD_INT 1
52607: ARRAY
52608: PPUSH
52609: LD_VAR 0 3
52613: PPUSH
52614: CALL_OW 259
52618: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
52619: LD_VAR 0 6
52623: PUSH
52624: LD_INT 1
52626: ARRAY
52627: PPUSH
52628: LD_VAR 0 2
52632: PPUSH
52633: LD_VAR 0 5
52637: PPUSH
52638: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
52642: LD_VAR 0 6
52646: PUSH
52647: LD_INT 1
52649: ARRAY
52650: PPUSH
52651: LD_VAR 0 3
52655: PPUSH
52656: LD_VAR 0 4
52660: PPUSH
52661: CALL_OW 237
// end ;
52665: PPOPN 6
52667: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
52668: LD_EXP 2
52672: PUSH
52673: LD_EXP 49
52677: AND
52678: IFFALSE 52757
52680: GO 52682
52682: DISABLE
52683: LD_INT 0
52685: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
52686: LD_ADDR_VAR 0 1
52690: PUSH
52691: LD_INT 22
52693: PUSH
52694: LD_OWVAR 2
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 30
52705: PUSH
52706: LD_INT 3
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PPUSH
52717: CALL_OW 69
52721: ST_TO_ADDR
// if not tmp then
52722: LD_VAR 0 1
52726: NOT
52727: IFFALSE 52731
// exit ;
52729: GO 52757
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
52731: LD_VAR 0 1
52735: PUSH
52736: LD_INT 1
52738: PPUSH
52739: LD_VAR 0 1
52743: PPUSH
52744: CALL_OW 12
52748: ARRAY
52749: PPUSH
52750: LD_INT 1
52752: PPUSH
52753: CALL_OW 234
// end ;
52757: PPOPN 1
52759: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
52760: LD_EXP 2
52764: PUSH
52765: LD_EXP 50
52769: AND
52770: IFFALSE 52882
52772: GO 52774
52774: DISABLE
52775: LD_INT 0
52777: PPUSH
52778: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
52779: LD_ADDR_VAR 0 2
52783: PUSH
52784: LD_INT 22
52786: PUSH
52787: LD_OWVAR 2
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 2
52798: PUSH
52799: LD_INT 30
52801: PUSH
52802: LD_INT 27
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 30
52811: PUSH
52812: LD_INT 26
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 30
52821: PUSH
52822: LD_INT 28
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PPUSH
52839: CALL_OW 69
52843: ST_TO_ADDR
// if not tmp then
52844: LD_VAR 0 2
52848: NOT
52849: IFFALSE 52853
// exit ;
52851: GO 52882
// for i in tmp do
52853: LD_ADDR_VAR 0 1
52857: PUSH
52858: LD_VAR 0 2
52862: PUSH
52863: FOR_IN
52864: IFFALSE 52880
// SetLives ( i , 1 ) ;
52866: LD_VAR 0 1
52870: PPUSH
52871: LD_INT 1
52873: PPUSH
52874: CALL_OW 234
52878: GO 52863
52880: POP
52881: POP
// end ;
52882: PPOPN 2
52884: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
52885: LD_EXP 2
52889: PUSH
52890: LD_EXP 51
52894: AND
52895: IFFALSE 53182
52897: GO 52899
52899: DISABLE
52900: LD_INT 0
52902: PPUSH
52903: PPUSH
52904: PPUSH
// begin i := rand ( 1 , 7 ) ;
52905: LD_ADDR_VAR 0 1
52909: PUSH
52910: LD_INT 1
52912: PPUSH
52913: LD_INT 7
52915: PPUSH
52916: CALL_OW 12
52920: ST_TO_ADDR
// case i of 1 :
52921: LD_VAR 0 1
52925: PUSH
52926: LD_INT 1
52928: DOUBLE
52929: EQUAL
52930: IFTRUE 52934
52932: GO 52944
52934: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
52935: LD_STRING earthquake(getX(game), 0, 32)
52937: PPUSH
52938: CALL_OW 559
52942: GO 53182
52944: LD_INT 2
52946: DOUBLE
52947: EQUAL
52948: IFTRUE 52952
52950: GO 52966
52952: POP
// begin ToLua ( displayStucuk(); ) ;
52953: LD_STRING displayStucuk();
52955: PPUSH
52956: CALL_OW 559
// ResetFog ;
52960: CALL_OW 335
// end ; 3 :
52964: GO 53182
52966: LD_INT 3
52968: DOUBLE
52969: EQUAL
52970: IFTRUE 52974
52972: GO 53078
52974: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
52975: LD_ADDR_VAR 0 2
52979: PUSH
52980: LD_INT 22
52982: PUSH
52983: LD_OWVAR 2
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 25
52994: PUSH
52995: LD_INT 1
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PPUSH
53006: CALL_OW 69
53010: ST_TO_ADDR
// if not tmp then
53011: LD_VAR 0 2
53015: NOT
53016: IFFALSE 53020
// exit ;
53018: GO 53182
// un := tmp [ rand ( 1 , tmp ) ] ;
53020: LD_ADDR_VAR 0 3
53024: PUSH
53025: LD_VAR 0 2
53029: PUSH
53030: LD_INT 1
53032: PPUSH
53033: LD_VAR 0 2
53037: PPUSH
53038: CALL_OW 12
53042: ARRAY
53043: ST_TO_ADDR
// if Crawls ( un ) then
53044: LD_VAR 0 3
53048: PPUSH
53049: CALL_OW 318
53053: IFFALSE 53064
// ComWalk ( un ) ;
53055: LD_VAR 0 3
53059: PPUSH
53060: CALL_OW 138
// SetClass ( un , class_mortar ) ;
53064: LD_VAR 0 3
53068: PPUSH
53069: LD_INT 8
53071: PPUSH
53072: CALL_OW 336
// end ; 4 :
53076: GO 53182
53078: LD_INT 4
53080: DOUBLE
53081: EQUAL
53082: IFTRUE 53086
53084: GO 53160
53086: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
53087: LD_ADDR_VAR 0 2
53091: PUSH
53092: LD_INT 22
53094: PUSH
53095: LD_OWVAR 2
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 30
53106: PUSH
53107: LD_INT 29
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PPUSH
53118: CALL_OW 69
53122: ST_TO_ADDR
// if not tmp then
53123: LD_VAR 0 2
53127: NOT
53128: IFFALSE 53132
// exit ;
53130: GO 53182
// CenterNowOnUnits ( tmp [ 1 ] ) ;
53132: LD_VAR 0 2
53136: PUSH
53137: LD_INT 1
53139: ARRAY
53140: PPUSH
53141: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
53145: LD_VAR 0 2
53149: PUSH
53150: LD_INT 1
53152: ARRAY
53153: PPUSH
53154: CALL_OW 65
// end ; 5 .. 7 :
53158: GO 53182
53160: LD_INT 5
53162: DOUBLE
53163: GREATEREQUAL
53164: IFFALSE 53172
53166: LD_INT 7
53168: DOUBLE
53169: LESSEQUAL
53170: IFTRUE 53174
53172: GO 53181
53174: POP
// StreamSibBomb ; end ;
53175: CALL 49419 0 0
53179: GO 53182
53181: POP
// end ;
53182: PPOPN 3
53184: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
53185: LD_EXP 2
53189: PUSH
53190: LD_EXP 52
53194: AND
53195: IFFALSE 53351
53197: GO 53199
53199: DISABLE
53200: LD_INT 0
53202: PPUSH
53203: PPUSH
53204: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
53205: LD_ADDR_VAR 0 2
53209: PUSH
53210: LD_INT 81
53212: PUSH
53213: LD_OWVAR 2
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 2
53224: PUSH
53225: LD_INT 21
53227: PUSH
53228: LD_INT 1
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 21
53237: PUSH
53238: LD_INT 2
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: LIST
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PPUSH
53254: CALL_OW 69
53258: ST_TO_ADDR
// if not tmp then
53259: LD_VAR 0 2
53263: NOT
53264: IFFALSE 53268
// exit ;
53266: GO 53351
// p := 0 ;
53268: LD_ADDR_VAR 0 3
53272: PUSH
53273: LD_INT 0
53275: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
53276: LD_INT 35
53278: PPUSH
53279: CALL_OW 67
// p := p + 1 ;
53283: LD_ADDR_VAR 0 3
53287: PUSH
53288: LD_VAR 0 3
53292: PUSH
53293: LD_INT 1
53295: PLUS
53296: ST_TO_ADDR
// for i in tmp do
53297: LD_ADDR_VAR 0 1
53301: PUSH
53302: LD_VAR 0 2
53306: PUSH
53307: FOR_IN
53308: IFFALSE 53339
// if GetLives ( i ) < 1000 then
53310: LD_VAR 0 1
53314: PPUSH
53315: CALL_OW 256
53319: PUSH
53320: LD_INT 1000
53322: LESS
53323: IFFALSE 53337
// SetLives ( i , 1000 ) ;
53325: LD_VAR 0 1
53329: PPUSH
53330: LD_INT 1000
53332: PPUSH
53333: CALL_OW 234
53337: GO 53307
53339: POP
53340: POP
// until p > 20 ;
53341: LD_VAR 0 3
53345: PUSH
53346: LD_INT 20
53348: GREATER
53349: IFFALSE 53276
// end ;
53351: PPOPN 3
53353: END
// every 0 0$1 trigger StreamModeActive and sTime do
53354: LD_EXP 2
53358: PUSH
53359: LD_EXP 53
53363: AND
53364: IFFALSE 53399
53366: GO 53368
53368: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
53369: LD_INT 28
53371: PPUSH
53372: LD_OWVAR 2
53376: PPUSH
53377: LD_INT 2
53379: PPUSH
53380: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
53384: LD_INT 30
53386: PPUSH
53387: LD_OWVAR 2
53391: PPUSH
53392: LD_INT 2
53394: PPUSH
53395: CALL_OW 322
// end ;
53399: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
53400: LD_EXP 2
53404: PUSH
53405: LD_EXP 54
53409: AND
53410: IFFALSE 53531
53412: GO 53414
53414: DISABLE
53415: LD_INT 0
53417: PPUSH
53418: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
53419: LD_ADDR_VAR 0 2
53423: PUSH
53424: LD_INT 22
53426: PUSH
53427: LD_OWVAR 2
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 21
53438: PUSH
53439: LD_INT 1
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 3
53448: PUSH
53449: LD_INT 23
53451: PUSH
53452: LD_INT 0
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: LIST
53467: PPUSH
53468: CALL_OW 69
53472: ST_TO_ADDR
// if not tmp then
53473: LD_VAR 0 2
53477: NOT
53478: IFFALSE 53482
// exit ;
53480: GO 53531
// for i in tmp do
53482: LD_ADDR_VAR 0 1
53486: PUSH
53487: LD_VAR 0 2
53491: PUSH
53492: FOR_IN
53493: IFFALSE 53529
// begin if Crawls ( i ) then
53495: LD_VAR 0 1
53499: PPUSH
53500: CALL_OW 318
53504: IFFALSE 53515
// ComWalk ( i ) ;
53506: LD_VAR 0 1
53510: PPUSH
53511: CALL_OW 138
// SetClass ( i , 2 ) ;
53515: LD_VAR 0 1
53519: PPUSH
53520: LD_INT 2
53522: PPUSH
53523: CALL_OW 336
// end ;
53527: GO 53492
53529: POP
53530: POP
// end ;
53531: PPOPN 2
53533: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
53534: LD_EXP 2
53538: PUSH
53539: LD_EXP 55
53543: AND
53544: IFFALSE 53832
53546: GO 53548
53548: DISABLE
53549: LD_INT 0
53551: PPUSH
53552: PPUSH
53553: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
53554: LD_OWVAR 2
53558: PPUSH
53559: LD_INT 9
53561: PPUSH
53562: LD_INT 1
53564: PPUSH
53565: LD_INT 1
53567: PPUSH
53568: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
53572: LD_INT 9
53574: PPUSH
53575: LD_OWVAR 2
53579: PPUSH
53580: CALL_OW 343
// uc_side := 9 ;
53584: LD_ADDR_OWVAR 20
53588: PUSH
53589: LD_INT 9
53591: ST_TO_ADDR
// uc_nation := 2 ;
53592: LD_ADDR_OWVAR 21
53596: PUSH
53597: LD_INT 2
53599: ST_TO_ADDR
// hc_name := Dark Warrior ;
53600: LD_ADDR_OWVAR 26
53604: PUSH
53605: LD_STRING Dark Warrior
53607: ST_TO_ADDR
// hc_gallery :=  ;
53608: LD_ADDR_OWVAR 33
53612: PUSH
53613: LD_STRING 
53615: ST_TO_ADDR
// hc_noskilllimit := true ;
53616: LD_ADDR_OWVAR 76
53620: PUSH
53621: LD_INT 1
53623: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
53624: LD_ADDR_OWVAR 31
53628: PUSH
53629: LD_INT 30
53631: PUSH
53632: LD_INT 30
53634: PUSH
53635: LD_INT 30
53637: PUSH
53638: LD_INT 30
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: ST_TO_ADDR
// un := CreateHuman ;
53647: LD_ADDR_VAR 0 3
53651: PUSH
53652: CALL_OW 44
53656: ST_TO_ADDR
// hc_noskilllimit := false ;
53657: LD_ADDR_OWVAR 76
53661: PUSH
53662: LD_INT 0
53664: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
53665: LD_VAR 0 3
53669: PPUSH
53670: LD_INT 1
53672: PPUSH
53673: CALL_OW 51
// ToLua ( playRanger() ) ;
53677: LD_STRING playRanger()
53679: PPUSH
53680: CALL_OW 559
// p := 0 ;
53684: LD_ADDR_VAR 0 2
53688: PUSH
53689: LD_INT 0
53691: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
53692: LD_INT 35
53694: PPUSH
53695: CALL_OW 67
// p := p + 1 ;
53699: LD_ADDR_VAR 0 2
53703: PUSH
53704: LD_VAR 0 2
53708: PUSH
53709: LD_INT 1
53711: PLUS
53712: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
53713: LD_VAR 0 3
53717: PPUSH
53718: CALL_OW 256
53722: PUSH
53723: LD_INT 1000
53725: LESS
53726: IFFALSE 53740
// SetLives ( un , 1000 ) ;
53728: LD_VAR 0 3
53732: PPUSH
53733: LD_INT 1000
53735: PPUSH
53736: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
53740: LD_VAR 0 3
53744: PPUSH
53745: LD_INT 81
53747: PUSH
53748: LD_OWVAR 2
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 91
53759: PUSH
53760: LD_VAR 0 3
53764: PUSH
53765: LD_INT 30
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: LIST
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PPUSH
53777: CALL_OW 69
53781: PPUSH
53782: LD_VAR 0 3
53786: PPUSH
53787: CALL_OW 74
53791: PPUSH
53792: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
53796: LD_VAR 0 2
53800: PUSH
53801: LD_INT 80
53803: GREATER
53804: PUSH
53805: LD_VAR 0 3
53809: PPUSH
53810: CALL_OW 301
53814: OR
53815: IFFALSE 53692
// if un then
53817: LD_VAR 0 3
53821: IFFALSE 53832
// RemoveUnit ( un ) ;
53823: LD_VAR 0 3
53827: PPUSH
53828: CALL_OW 64
// end ;
53832: PPOPN 3
53834: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
53835: LD_EXP 56
53839: IFFALSE 53955
53841: GO 53843
53843: DISABLE
53844: LD_INT 0
53846: PPUSH
53847: PPUSH
53848: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
53849: LD_ADDR_VAR 0 2
53853: PUSH
53854: LD_INT 81
53856: PUSH
53857: LD_OWVAR 2
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 21
53868: PUSH
53869: LD_INT 1
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PPUSH
53880: CALL_OW 69
53884: ST_TO_ADDR
// ToLua ( playComputer() ) ;
53885: LD_STRING playComputer()
53887: PPUSH
53888: CALL_OW 559
// if not tmp then
53892: LD_VAR 0 2
53896: NOT
53897: IFFALSE 53901
// exit ;
53899: GO 53955
// for i in tmp do
53901: LD_ADDR_VAR 0 1
53905: PUSH
53906: LD_VAR 0 2
53910: PUSH
53911: FOR_IN
53912: IFFALSE 53953
// for j := 1 to 4 do
53914: LD_ADDR_VAR 0 3
53918: PUSH
53919: DOUBLE
53920: LD_INT 1
53922: DEC
53923: ST_TO_ADDR
53924: LD_INT 4
53926: PUSH
53927: FOR_TO
53928: IFFALSE 53949
// SetSkill ( i , j , 10 ) ;
53930: LD_VAR 0 1
53934: PPUSH
53935: LD_VAR 0 3
53939: PPUSH
53940: LD_INT 10
53942: PPUSH
53943: CALL_OW 237
53947: GO 53927
53949: POP
53950: POP
53951: GO 53911
53953: POP
53954: POP
// end ;
53955: PPOPN 3
53957: END
// every 0 0$1 trigger s30 do var i , tmp ;
53958: LD_EXP 57
53962: IFFALSE 54031
53964: GO 53966
53966: DISABLE
53967: LD_INT 0
53969: PPUSH
53970: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
53971: LD_ADDR_VAR 0 2
53975: PUSH
53976: LD_INT 22
53978: PUSH
53979: LD_OWVAR 2
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PPUSH
53988: CALL_OW 69
53992: ST_TO_ADDR
// if not tmp then
53993: LD_VAR 0 2
53997: NOT
53998: IFFALSE 54002
// exit ;
54000: GO 54031
// for i in tmp do
54002: LD_ADDR_VAR 0 1
54006: PUSH
54007: LD_VAR 0 2
54011: PUSH
54012: FOR_IN
54013: IFFALSE 54029
// SetLives ( i , 300 ) ;
54015: LD_VAR 0 1
54019: PPUSH
54020: LD_INT 300
54022: PPUSH
54023: CALL_OW 234
54027: GO 54012
54029: POP
54030: POP
// end ;
54031: PPOPN 2
54033: END
// every 0 0$1 trigger s60 do var i , tmp ;
54034: LD_EXP 58
54038: IFFALSE 54107
54040: GO 54042
54042: DISABLE
54043: LD_INT 0
54045: PPUSH
54046: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
54047: LD_ADDR_VAR 0 2
54051: PUSH
54052: LD_INT 22
54054: PUSH
54055: LD_OWVAR 2
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PPUSH
54064: CALL_OW 69
54068: ST_TO_ADDR
// if not tmp then
54069: LD_VAR 0 2
54073: NOT
54074: IFFALSE 54078
// exit ;
54076: GO 54107
// for i in tmp do
54078: LD_ADDR_VAR 0 1
54082: PUSH
54083: LD_VAR 0 2
54087: PUSH
54088: FOR_IN
54089: IFFALSE 54105
// SetLives ( i , 600 ) ;
54091: LD_VAR 0 1
54095: PPUSH
54096: LD_INT 600
54098: PPUSH
54099: CALL_OW 234
54103: GO 54088
54105: POP
54106: POP
// end ;
54107: PPOPN 2
54109: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
54110: LD_INT 0
54112: PPUSH
// case cmd of 301 :
54113: LD_VAR 0 1
54117: PUSH
54118: LD_INT 301
54120: DOUBLE
54121: EQUAL
54122: IFTRUE 54126
54124: GO 54158
54126: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
54127: LD_VAR 0 6
54131: PPUSH
54132: LD_VAR 0 7
54136: PPUSH
54137: LD_VAR 0 8
54141: PPUSH
54142: LD_VAR 0 4
54146: PPUSH
54147: LD_VAR 0 5
54151: PPUSH
54152: CALL 55367 0 5
54156: GO 54279
54158: LD_INT 302
54160: DOUBLE
54161: EQUAL
54162: IFTRUE 54166
54164: GO 54203
54166: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
54167: LD_VAR 0 6
54171: PPUSH
54172: LD_VAR 0 7
54176: PPUSH
54177: LD_VAR 0 8
54181: PPUSH
54182: LD_VAR 0 9
54186: PPUSH
54187: LD_VAR 0 4
54191: PPUSH
54192: LD_VAR 0 5
54196: PPUSH
54197: CALL 55458 0 6
54201: GO 54279
54203: LD_INT 303
54205: DOUBLE
54206: EQUAL
54207: IFTRUE 54211
54209: GO 54248
54211: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
54212: LD_VAR 0 6
54216: PPUSH
54217: LD_VAR 0 7
54221: PPUSH
54222: LD_VAR 0 8
54226: PPUSH
54227: LD_VAR 0 9
54231: PPUSH
54232: LD_VAR 0 4
54236: PPUSH
54237: LD_VAR 0 5
54241: PPUSH
54242: CALL 54284 0 6
54246: GO 54279
54248: LD_INT 304
54250: DOUBLE
54251: EQUAL
54252: IFTRUE 54256
54254: GO 54278
54256: POP
// hHackTeleport ( unit , x , y ) ; end ;
54257: LD_VAR 0 2
54261: PPUSH
54262: LD_VAR 0 4
54266: PPUSH
54267: LD_VAR 0 5
54271: PPUSH
54272: CALL 56051 0 3
54276: GO 54279
54278: POP
// end ;
54279: LD_VAR 0 12
54283: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
54284: LD_INT 0
54286: PPUSH
54287: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
54288: LD_VAR 0 1
54292: PUSH
54293: LD_INT 1
54295: LESS
54296: PUSH
54297: LD_VAR 0 1
54301: PUSH
54302: LD_INT 3
54304: GREATER
54305: OR
54306: PUSH
54307: LD_VAR 0 5
54311: PPUSH
54312: LD_VAR 0 6
54316: PPUSH
54317: CALL_OW 428
54321: OR
54322: IFFALSE 54326
// exit ;
54324: GO 55054
// uc_side := your_side ;
54326: LD_ADDR_OWVAR 20
54330: PUSH
54331: LD_OWVAR 2
54335: ST_TO_ADDR
// uc_nation := nation ;
54336: LD_ADDR_OWVAR 21
54340: PUSH
54341: LD_VAR 0 1
54345: ST_TO_ADDR
// bc_level = 1 ;
54346: LD_ADDR_OWVAR 43
54350: PUSH
54351: LD_INT 1
54353: ST_TO_ADDR
// case btype of 1 :
54354: LD_VAR 0 2
54358: PUSH
54359: LD_INT 1
54361: DOUBLE
54362: EQUAL
54363: IFTRUE 54367
54365: GO 54378
54367: POP
// bc_type := b_depot ; 2 :
54368: LD_ADDR_OWVAR 42
54372: PUSH
54373: LD_INT 0
54375: ST_TO_ADDR
54376: GO 54998
54378: LD_INT 2
54380: DOUBLE
54381: EQUAL
54382: IFTRUE 54386
54384: GO 54397
54386: POP
// bc_type := b_warehouse ; 3 :
54387: LD_ADDR_OWVAR 42
54391: PUSH
54392: LD_INT 1
54394: ST_TO_ADDR
54395: GO 54998
54397: LD_INT 3
54399: DOUBLE
54400: EQUAL
54401: IFTRUE 54405
54403: GO 54416
54405: POP
// bc_type := b_lab ; 4 .. 9 :
54406: LD_ADDR_OWVAR 42
54410: PUSH
54411: LD_INT 6
54413: ST_TO_ADDR
54414: GO 54998
54416: LD_INT 4
54418: DOUBLE
54419: GREATEREQUAL
54420: IFFALSE 54428
54422: LD_INT 9
54424: DOUBLE
54425: LESSEQUAL
54426: IFTRUE 54430
54428: GO 54490
54430: POP
// begin bc_type := b_lab_half ;
54431: LD_ADDR_OWVAR 42
54435: PUSH
54436: LD_INT 7
54438: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
54439: LD_ADDR_OWVAR 44
54443: PUSH
54444: LD_INT 10
54446: PUSH
54447: LD_INT 11
54449: PUSH
54450: LD_INT 12
54452: PUSH
54453: LD_INT 15
54455: PUSH
54456: LD_INT 14
54458: PUSH
54459: LD_INT 13
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: PUSH
54470: LD_VAR 0 2
54474: PUSH
54475: LD_INT 3
54477: MINUS
54478: ARRAY
54479: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
54480: LD_ADDR_OWVAR 45
54484: PUSH
54485: LD_INT 9
54487: ST_TO_ADDR
// end ; 10 .. 13 :
54488: GO 54998
54490: LD_INT 10
54492: DOUBLE
54493: GREATEREQUAL
54494: IFFALSE 54502
54496: LD_INT 13
54498: DOUBLE
54499: LESSEQUAL
54500: IFTRUE 54504
54502: GO 54581
54504: POP
// begin bc_type := b_lab_full ;
54505: LD_ADDR_OWVAR 42
54509: PUSH
54510: LD_INT 8
54512: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
54513: LD_ADDR_OWVAR 44
54517: PUSH
54518: LD_INT 10
54520: PUSH
54521: LD_INT 12
54523: PUSH
54524: LD_INT 14
54526: PUSH
54527: LD_INT 13
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: PUSH
54536: LD_VAR 0 2
54540: PUSH
54541: LD_INT 9
54543: MINUS
54544: ARRAY
54545: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
54546: LD_ADDR_OWVAR 45
54550: PUSH
54551: LD_INT 11
54553: PUSH
54554: LD_INT 15
54556: PUSH
54557: LD_INT 12
54559: PUSH
54560: LD_INT 15
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: PUSH
54569: LD_VAR 0 2
54573: PUSH
54574: LD_INT 9
54576: MINUS
54577: ARRAY
54578: ST_TO_ADDR
// end ; 14 :
54579: GO 54998
54581: LD_INT 14
54583: DOUBLE
54584: EQUAL
54585: IFTRUE 54589
54587: GO 54600
54589: POP
// bc_type := b_workshop ; 15 :
54590: LD_ADDR_OWVAR 42
54594: PUSH
54595: LD_INT 2
54597: ST_TO_ADDR
54598: GO 54998
54600: LD_INT 15
54602: DOUBLE
54603: EQUAL
54604: IFTRUE 54608
54606: GO 54619
54608: POP
// bc_type := b_factory ; 16 :
54609: LD_ADDR_OWVAR 42
54613: PUSH
54614: LD_INT 3
54616: ST_TO_ADDR
54617: GO 54998
54619: LD_INT 16
54621: DOUBLE
54622: EQUAL
54623: IFTRUE 54627
54625: GO 54638
54627: POP
// bc_type := b_ext_gun ; 17 :
54628: LD_ADDR_OWVAR 42
54632: PUSH
54633: LD_INT 17
54635: ST_TO_ADDR
54636: GO 54998
54638: LD_INT 17
54640: DOUBLE
54641: EQUAL
54642: IFTRUE 54646
54644: GO 54674
54646: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
54647: LD_ADDR_OWVAR 42
54651: PUSH
54652: LD_INT 19
54654: PUSH
54655: LD_INT 23
54657: PUSH
54658: LD_INT 19
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: LIST
54665: PUSH
54666: LD_VAR 0 1
54670: ARRAY
54671: ST_TO_ADDR
54672: GO 54998
54674: LD_INT 18
54676: DOUBLE
54677: EQUAL
54678: IFTRUE 54682
54680: GO 54693
54682: POP
// bc_type := b_ext_radar ; 19 :
54683: LD_ADDR_OWVAR 42
54687: PUSH
54688: LD_INT 20
54690: ST_TO_ADDR
54691: GO 54998
54693: LD_INT 19
54695: DOUBLE
54696: EQUAL
54697: IFTRUE 54701
54699: GO 54712
54701: POP
// bc_type := b_ext_radio ; 20 :
54702: LD_ADDR_OWVAR 42
54706: PUSH
54707: LD_INT 22
54709: ST_TO_ADDR
54710: GO 54998
54712: LD_INT 20
54714: DOUBLE
54715: EQUAL
54716: IFTRUE 54720
54718: GO 54731
54720: POP
// bc_type := b_ext_siberium ; 21 :
54721: LD_ADDR_OWVAR 42
54725: PUSH
54726: LD_INT 21
54728: ST_TO_ADDR
54729: GO 54998
54731: LD_INT 21
54733: DOUBLE
54734: EQUAL
54735: IFTRUE 54739
54737: GO 54750
54739: POP
// bc_type := b_ext_computer ; 22 :
54740: LD_ADDR_OWVAR 42
54744: PUSH
54745: LD_INT 24
54747: ST_TO_ADDR
54748: GO 54998
54750: LD_INT 22
54752: DOUBLE
54753: EQUAL
54754: IFTRUE 54758
54756: GO 54769
54758: POP
// bc_type := b_ext_track ; 23 :
54759: LD_ADDR_OWVAR 42
54763: PUSH
54764: LD_INT 16
54766: ST_TO_ADDR
54767: GO 54998
54769: LD_INT 23
54771: DOUBLE
54772: EQUAL
54773: IFTRUE 54777
54775: GO 54788
54777: POP
// bc_type := b_ext_laser ; 24 :
54778: LD_ADDR_OWVAR 42
54782: PUSH
54783: LD_INT 25
54785: ST_TO_ADDR
54786: GO 54998
54788: LD_INT 24
54790: DOUBLE
54791: EQUAL
54792: IFTRUE 54796
54794: GO 54807
54796: POP
// bc_type := b_control_tower ; 25 :
54797: LD_ADDR_OWVAR 42
54801: PUSH
54802: LD_INT 36
54804: ST_TO_ADDR
54805: GO 54998
54807: LD_INT 25
54809: DOUBLE
54810: EQUAL
54811: IFTRUE 54815
54813: GO 54826
54815: POP
// bc_type := b_breastwork ; 26 :
54816: LD_ADDR_OWVAR 42
54820: PUSH
54821: LD_INT 31
54823: ST_TO_ADDR
54824: GO 54998
54826: LD_INT 26
54828: DOUBLE
54829: EQUAL
54830: IFTRUE 54834
54832: GO 54845
54834: POP
// bc_type := b_bunker ; 27 :
54835: LD_ADDR_OWVAR 42
54839: PUSH
54840: LD_INT 32
54842: ST_TO_ADDR
54843: GO 54998
54845: LD_INT 27
54847: DOUBLE
54848: EQUAL
54849: IFTRUE 54853
54851: GO 54864
54853: POP
// bc_type := b_turret ; 28 :
54854: LD_ADDR_OWVAR 42
54858: PUSH
54859: LD_INT 33
54861: ST_TO_ADDR
54862: GO 54998
54864: LD_INT 28
54866: DOUBLE
54867: EQUAL
54868: IFTRUE 54872
54870: GO 54883
54872: POP
// bc_type := b_armoury ; 29 :
54873: LD_ADDR_OWVAR 42
54877: PUSH
54878: LD_INT 4
54880: ST_TO_ADDR
54881: GO 54998
54883: LD_INT 29
54885: DOUBLE
54886: EQUAL
54887: IFTRUE 54891
54889: GO 54902
54891: POP
// bc_type := b_barracks ; 30 :
54892: LD_ADDR_OWVAR 42
54896: PUSH
54897: LD_INT 5
54899: ST_TO_ADDR
54900: GO 54998
54902: LD_INT 30
54904: DOUBLE
54905: EQUAL
54906: IFTRUE 54910
54908: GO 54921
54910: POP
// bc_type := b_solar_power ; 31 :
54911: LD_ADDR_OWVAR 42
54915: PUSH
54916: LD_INT 27
54918: ST_TO_ADDR
54919: GO 54998
54921: LD_INT 31
54923: DOUBLE
54924: EQUAL
54925: IFTRUE 54929
54927: GO 54940
54929: POP
// bc_type := b_oil_power ; 32 :
54930: LD_ADDR_OWVAR 42
54934: PUSH
54935: LD_INT 26
54937: ST_TO_ADDR
54938: GO 54998
54940: LD_INT 32
54942: DOUBLE
54943: EQUAL
54944: IFTRUE 54948
54946: GO 54959
54948: POP
// bc_type := b_siberite_power ; 33 :
54949: LD_ADDR_OWVAR 42
54953: PUSH
54954: LD_INT 28
54956: ST_TO_ADDR
54957: GO 54998
54959: LD_INT 33
54961: DOUBLE
54962: EQUAL
54963: IFTRUE 54967
54965: GO 54978
54967: POP
// bc_type := b_oil_mine ; 34 :
54968: LD_ADDR_OWVAR 42
54972: PUSH
54973: LD_INT 29
54975: ST_TO_ADDR
54976: GO 54998
54978: LD_INT 34
54980: DOUBLE
54981: EQUAL
54982: IFTRUE 54986
54984: GO 54997
54986: POP
// bc_type := b_siberite_mine ; end ;
54987: LD_ADDR_OWVAR 42
54991: PUSH
54992: LD_INT 30
54994: ST_TO_ADDR
54995: GO 54998
54997: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
54998: LD_ADDR_VAR 0 8
55002: PUSH
55003: LD_VAR 0 5
55007: PPUSH
55008: LD_VAR 0 6
55012: PPUSH
55013: LD_VAR 0 3
55017: PPUSH
55018: CALL_OW 47
55022: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
55023: LD_OWVAR 42
55027: PUSH
55028: LD_INT 32
55030: PUSH
55031: LD_INT 33
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: IN
55038: IFFALSE 55054
// PlaceWeaponTurret ( b , weapon ) ;
55040: LD_VAR 0 8
55044: PPUSH
55045: LD_VAR 0 4
55049: PPUSH
55050: CALL_OW 431
// end ;
55054: LD_VAR 0 7
55058: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
55059: LD_INT 0
55061: PPUSH
55062: PPUSH
55063: PPUSH
55064: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55065: LD_ADDR_VAR 0 4
55069: PUSH
55070: LD_INT 22
55072: PUSH
55073: LD_OWVAR 2
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 2
55084: PUSH
55085: LD_INT 30
55087: PUSH
55088: LD_INT 0
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 30
55097: PUSH
55098: LD_INT 1
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: LIST
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PPUSH
55114: CALL_OW 69
55118: ST_TO_ADDR
// if not tmp then
55119: LD_VAR 0 4
55123: NOT
55124: IFFALSE 55128
// exit ;
55126: GO 55187
// for i in tmp do
55128: LD_ADDR_VAR 0 2
55132: PUSH
55133: LD_VAR 0 4
55137: PUSH
55138: FOR_IN
55139: IFFALSE 55185
// for j = 1 to 3 do
55141: LD_ADDR_VAR 0 3
55145: PUSH
55146: DOUBLE
55147: LD_INT 1
55149: DEC
55150: ST_TO_ADDR
55151: LD_INT 3
55153: PUSH
55154: FOR_TO
55155: IFFALSE 55181
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
55157: LD_VAR 0 2
55161: PPUSH
55162: CALL_OW 274
55166: PPUSH
55167: LD_VAR 0 3
55171: PPUSH
55172: LD_INT 99999
55174: PPUSH
55175: CALL_OW 277
55179: GO 55154
55181: POP
55182: POP
55183: GO 55138
55185: POP
55186: POP
// end ;
55187: LD_VAR 0 1
55191: RET
// export function hHackSetLevel10 ; var i , j ; begin
55192: LD_INT 0
55194: PPUSH
55195: PPUSH
55196: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
55197: LD_ADDR_VAR 0 2
55201: PUSH
55202: LD_INT 21
55204: PUSH
55205: LD_INT 1
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PPUSH
55212: CALL_OW 69
55216: PUSH
55217: FOR_IN
55218: IFFALSE 55270
// if IsSelected ( i ) then
55220: LD_VAR 0 2
55224: PPUSH
55225: CALL_OW 306
55229: IFFALSE 55268
// begin for j := 1 to 4 do
55231: LD_ADDR_VAR 0 3
55235: PUSH
55236: DOUBLE
55237: LD_INT 1
55239: DEC
55240: ST_TO_ADDR
55241: LD_INT 4
55243: PUSH
55244: FOR_TO
55245: IFFALSE 55266
// SetSkill ( i , j , 10 ) ;
55247: LD_VAR 0 2
55251: PPUSH
55252: LD_VAR 0 3
55256: PPUSH
55257: LD_INT 10
55259: PPUSH
55260: CALL_OW 237
55264: GO 55244
55266: POP
55267: POP
// end ;
55268: GO 55217
55270: POP
55271: POP
// end ;
55272: LD_VAR 0 1
55276: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
55277: LD_INT 0
55279: PPUSH
55280: PPUSH
55281: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
55282: LD_ADDR_VAR 0 2
55286: PUSH
55287: LD_INT 22
55289: PUSH
55290: LD_OWVAR 2
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 21
55301: PUSH
55302: LD_INT 1
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PPUSH
55313: CALL_OW 69
55317: PUSH
55318: FOR_IN
55319: IFFALSE 55360
// begin for j := 1 to 4 do
55321: LD_ADDR_VAR 0 3
55325: PUSH
55326: DOUBLE
55327: LD_INT 1
55329: DEC
55330: ST_TO_ADDR
55331: LD_INT 4
55333: PUSH
55334: FOR_TO
55335: IFFALSE 55356
// SetSkill ( i , j , 10 ) ;
55337: LD_VAR 0 2
55341: PPUSH
55342: LD_VAR 0 3
55346: PPUSH
55347: LD_INT 10
55349: PPUSH
55350: CALL_OW 237
55354: GO 55334
55356: POP
55357: POP
// end ;
55358: GO 55318
55360: POP
55361: POP
// end ;
55362: LD_VAR 0 1
55366: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
55367: LD_INT 0
55369: PPUSH
// uc_side := your_side ;
55370: LD_ADDR_OWVAR 20
55374: PUSH
55375: LD_OWVAR 2
55379: ST_TO_ADDR
// uc_nation := nation ;
55380: LD_ADDR_OWVAR 21
55384: PUSH
55385: LD_VAR 0 1
55389: ST_TO_ADDR
// InitHc ;
55390: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
55394: LD_INT 0
55396: PPUSH
55397: LD_VAR 0 2
55401: PPUSH
55402: LD_VAR 0 3
55406: PPUSH
55407: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
55411: LD_VAR 0 4
55415: PPUSH
55416: LD_VAR 0 5
55420: PPUSH
55421: CALL_OW 428
55425: PUSH
55426: LD_INT 0
55428: EQUAL
55429: IFFALSE 55453
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
55431: CALL_OW 44
55435: PPUSH
55436: LD_VAR 0 4
55440: PPUSH
55441: LD_VAR 0 5
55445: PPUSH
55446: LD_INT 1
55448: PPUSH
55449: CALL_OW 48
// end ;
55453: LD_VAR 0 6
55457: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
55458: LD_INT 0
55460: PPUSH
55461: PPUSH
// uc_side := your_side ;
55462: LD_ADDR_OWVAR 20
55466: PUSH
55467: LD_OWVAR 2
55471: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
55472: LD_VAR 0 1
55476: PUSH
55477: LD_INT 1
55479: PUSH
55480: LD_INT 2
55482: PUSH
55483: LD_INT 3
55485: PUSH
55486: LD_INT 4
55488: PUSH
55489: LD_INT 5
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: IN
55499: IFFALSE 55511
// uc_nation := nation_american else
55501: LD_ADDR_OWVAR 21
55505: PUSH
55506: LD_INT 1
55508: ST_TO_ADDR
55509: GO 55554
// if chassis in [ 11 , 12 , 13 , 14 ] then
55511: LD_VAR 0 1
55515: PUSH
55516: LD_INT 11
55518: PUSH
55519: LD_INT 12
55521: PUSH
55522: LD_INT 13
55524: PUSH
55525: LD_INT 14
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: IN
55534: IFFALSE 55546
// uc_nation := nation_arabian else
55536: LD_ADDR_OWVAR 21
55540: PUSH
55541: LD_INT 2
55543: ST_TO_ADDR
55544: GO 55554
// uc_nation := nation_russian ;
55546: LD_ADDR_OWVAR 21
55550: PUSH
55551: LD_INT 3
55553: ST_TO_ADDR
// vc_chassis := chassis ;
55554: LD_ADDR_OWVAR 37
55558: PUSH
55559: LD_VAR 0 1
55563: ST_TO_ADDR
// vc_engine := engine ;
55564: LD_ADDR_OWVAR 39
55568: PUSH
55569: LD_VAR 0 2
55573: ST_TO_ADDR
// vc_control := control ;
55574: LD_ADDR_OWVAR 38
55578: PUSH
55579: LD_VAR 0 3
55583: ST_TO_ADDR
// vc_weapon := weapon ;
55584: LD_ADDR_OWVAR 40
55588: PUSH
55589: LD_VAR 0 4
55593: ST_TO_ADDR
// un := CreateVehicle ;
55594: LD_ADDR_VAR 0 8
55598: PUSH
55599: CALL_OW 45
55603: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
55604: LD_VAR 0 8
55608: PPUSH
55609: LD_INT 0
55611: PPUSH
55612: LD_INT 5
55614: PPUSH
55615: CALL_OW 12
55619: PPUSH
55620: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
55624: LD_VAR 0 8
55628: PPUSH
55629: LD_VAR 0 5
55633: PPUSH
55634: LD_VAR 0 6
55638: PPUSH
55639: LD_INT 1
55641: PPUSH
55642: CALL_OW 48
// end ;
55646: LD_VAR 0 7
55650: RET
// export hInvincible ; every 1 do
55651: GO 55653
55653: DISABLE
// hInvincible := [ ] ;
55654: LD_ADDR_EXP 59
55658: PUSH
55659: EMPTY
55660: ST_TO_ADDR
55661: END
// every 10 do var i ;
55662: GO 55664
55664: DISABLE
55665: LD_INT 0
55667: PPUSH
// begin enable ;
55668: ENABLE
// if not hInvincible then
55669: LD_EXP 59
55673: NOT
55674: IFFALSE 55678
// exit ;
55676: GO 55722
// for i in hInvincible do
55678: LD_ADDR_VAR 0 1
55682: PUSH
55683: LD_EXP 59
55687: PUSH
55688: FOR_IN
55689: IFFALSE 55720
// if GetLives ( i ) < 1000 then
55691: LD_VAR 0 1
55695: PPUSH
55696: CALL_OW 256
55700: PUSH
55701: LD_INT 1000
55703: LESS
55704: IFFALSE 55718
// SetLives ( i , 1000 ) ;
55706: LD_VAR 0 1
55710: PPUSH
55711: LD_INT 1000
55713: PPUSH
55714: CALL_OW 234
55718: GO 55688
55720: POP
55721: POP
// end ;
55722: PPOPN 1
55724: END
// export function hHackInvincible ; var i ; begin
55725: LD_INT 0
55727: PPUSH
55728: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
55729: LD_ADDR_VAR 0 2
55733: PUSH
55734: LD_INT 2
55736: PUSH
55737: LD_INT 21
55739: PUSH
55740: LD_INT 1
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 21
55749: PUSH
55750: LD_INT 2
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: LIST
55761: PPUSH
55762: CALL_OW 69
55766: PUSH
55767: FOR_IN
55768: IFFALSE 55829
// if IsSelected ( i ) then
55770: LD_VAR 0 2
55774: PPUSH
55775: CALL_OW 306
55779: IFFALSE 55827
// begin if i in hInvincible then
55781: LD_VAR 0 2
55785: PUSH
55786: LD_EXP 59
55790: IN
55791: IFFALSE 55811
// hInvincible := hInvincible diff i else
55793: LD_ADDR_EXP 59
55797: PUSH
55798: LD_EXP 59
55802: PUSH
55803: LD_VAR 0 2
55807: DIFF
55808: ST_TO_ADDR
55809: GO 55827
// hInvincible := hInvincible union i ;
55811: LD_ADDR_EXP 59
55815: PUSH
55816: LD_EXP 59
55820: PUSH
55821: LD_VAR 0 2
55825: UNION
55826: ST_TO_ADDR
// end ;
55827: GO 55767
55829: POP
55830: POP
// end ;
55831: LD_VAR 0 1
55835: RET
// export function hHackInvisible ; var i , j ; begin
55836: LD_INT 0
55838: PPUSH
55839: PPUSH
55840: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
55841: LD_ADDR_VAR 0 2
55845: PUSH
55846: LD_INT 21
55848: PUSH
55849: LD_INT 1
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PPUSH
55856: CALL_OW 69
55860: PUSH
55861: FOR_IN
55862: IFFALSE 55886
// if IsSelected ( i ) then
55864: LD_VAR 0 2
55868: PPUSH
55869: CALL_OW 306
55873: IFFALSE 55884
// ComForceInvisible ( i ) ;
55875: LD_VAR 0 2
55879: PPUSH
55880: CALL_OW 496
55884: GO 55861
55886: POP
55887: POP
// end ;
55888: LD_VAR 0 1
55892: RET
// export function hHackChangeYourSide ; begin
55893: LD_INT 0
55895: PPUSH
// if your_side = 8 then
55896: LD_OWVAR 2
55900: PUSH
55901: LD_INT 8
55903: EQUAL
55904: IFFALSE 55916
// your_side := 0 else
55906: LD_ADDR_OWVAR 2
55910: PUSH
55911: LD_INT 0
55913: ST_TO_ADDR
55914: GO 55930
// your_side := your_side + 1 ;
55916: LD_ADDR_OWVAR 2
55920: PUSH
55921: LD_OWVAR 2
55925: PUSH
55926: LD_INT 1
55928: PLUS
55929: ST_TO_ADDR
// end ;
55930: LD_VAR 0 1
55934: RET
// export function hHackChangeUnitSide ; var i , j ; begin
55935: LD_INT 0
55937: PPUSH
55938: PPUSH
55939: PPUSH
// for i in all_units do
55940: LD_ADDR_VAR 0 2
55944: PUSH
55945: LD_OWVAR 3
55949: PUSH
55950: FOR_IN
55951: IFFALSE 56029
// if IsSelected ( i ) then
55953: LD_VAR 0 2
55957: PPUSH
55958: CALL_OW 306
55962: IFFALSE 56027
// begin j := GetSide ( i ) ;
55964: LD_ADDR_VAR 0 3
55968: PUSH
55969: LD_VAR 0 2
55973: PPUSH
55974: CALL_OW 255
55978: ST_TO_ADDR
// if j = 8 then
55979: LD_VAR 0 3
55983: PUSH
55984: LD_INT 8
55986: EQUAL
55987: IFFALSE 55999
// j := 0 else
55989: LD_ADDR_VAR 0 3
55993: PUSH
55994: LD_INT 0
55996: ST_TO_ADDR
55997: GO 56013
// j := j + 1 ;
55999: LD_ADDR_VAR 0 3
56003: PUSH
56004: LD_VAR 0 3
56008: PUSH
56009: LD_INT 1
56011: PLUS
56012: ST_TO_ADDR
// SetSide ( i , j ) ;
56013: LD_VAR 0 2
56017: PPUSH
56018: LD_VAR 0 3
56022: PPUSH
56023: CALL_OW 235
// end ;
56027: GO 55950
56029: POP
56030: POP
// end ;
56031: LD_VAR 0 1
56035: RET
// export function hHackFog ; begin
56036: LD_INT 0
56038: PPUSH
// FogOff ( true ) ;
56039: LD_INT 1
56041: PPUSH
56042: CALL_OW 344
// end ;
56046: LD_VAR 0 1
56050: RET
// export function hHackTeleport ( unit , x , y ) ; begin
56051: LD_INT 0
56053: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
56054: LD_VAR 0 1
56058: PPUSH
56059: LD_VAR 0 2
56063: PPUSH
56064: LD_VAR 0 3
56068: PPUSH
56069: LD_INT 1
56071: PPUSH
56072: LD_INT 1
56074: PPUSH
56075: CALL_OW 483
// CenterOnXY ( x , y ) ;
56079: LD_VAR 0 2
56083: PPUSH
56084: LD_VAR 0 3
56088: PPUSH
56089: CALL_OW 84
// end ;
56093: LD_VAR 0 4
56097: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
56098: LD_INT 0
56100: PPUSH
56101: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
56102: LD_VAR 0 1
56106: NOT
56107: PUSH
56108: LD_VAR 0 2
56112: PPUSH
56113: LD_VAR 0 3
56117: PPUSH
56118: CALL_OW 488
56122: NOT
56123: OR
56124: PUSH
56125: LD_VAR 0 1
56129: PPUSH
56130: CALL_OW 266
56134: PUSH
56135: LD_INT 3
56137: NONEQUAL
56138: PUSH
56139: LD_VAR 0 1
56143: PPUSH
56144: CALL_OW 247
56148: PUSH
56149: LD_INT 1
56151: EQUAL
56152: NOT
56153: AND
56154: OR
56155: IFFALSE 56159
// exit ;
56157: GO 56308
// if GetType ( factory ) = unit_human then
56159: LD_VAR 0 1
56163: PPUSH
56164: CALL_OW 247
56168: PUSH
56169: LD_INT 1
56171: EQUAL
56172: IFFALSE 56189
// factory := IsInUnit ( factory ) ;
56174: LD_ADDR_VAR 0 1
56178: PUSH
56179: LD_VAR 0 1
56183: PPUSH
56184: CALL_OW 310
56188: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
56189: LD_VAR 0 1
56193: PPUSH
56194: CALL_OW 266
56198: PUSH
56199: LD_INT 3
56201: NONEQUAL
56202: IFFALSE 56206
// exit ;
56204: GO 56308
// if HexInfo ( x , y ) = factory then
56206: LD_VAR 0 2
56210: PPUSH
56211: LD_VAR 0 3
56215: PPUSH
56216: CALL_OW 428
56220: PUSH
56221: LD_VAR 0 1
56225: EQUAL
56226: IFFALSE 56253
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
56228: LD_ADDR_EXP 60
56232: PUSH
56233: LD_EXP 60
56237: PPUSH
56238: LD_VAR 0 1
56242: PPUSH
56243: LD_INT 0
56245: PPUSH
56246: CALL_OW 1
56250: ST_TO_ADDR
56251: GO 56304
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
56253: LD_ADDR_EXP 60
56257: PUSH
56258: LD_EXP 60
56262: PPUSH
56263: LD_VAR 0 1
56267: PPUSH
56268: LD_VAR 0 1
56272: PPUSH
56273: CALL_OW 255
56277: PUSH
56278: LD_VAR 0 1
56282: PUSH
56283: LD_VAR 0 2
56287: PUSH
56288: LD_VAR 0 3
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: PPUSH
56299: CALL_OW 1
56303: ST_TO_ADDR
// UpdateFactoryWaypoints ;
56304: CALL 56313 0 0
// end ;
56308: LD_VAR 0 4
56312: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
56313: LD_INT 0
56315: PPUSH
56316: PPUSH
56317: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
56318: LD_STRING resetFactoryWaypoint();
56320: PPUSH
56321: CALL_OW 559
// if factoryWaypoints then
56325: LD_EXP 60
56329: IFFALSE 56455
// begin list := PrepareArray ( factoryWaypoints ) ;
56331: LD_ADDR_VAR 0 3
56335: PUSH
56336: LD_EXP 60
56340: PPUSH
56341: CALL 41084 0 1
56345: ST_TO_ADDR
// for i := 1 to list do
56346: LD_ADDR_VAR 0 2
56350: PUSH
56351: DOUBLE
56352: LD_INT 1
56354: DEC
56355: ST_TO_ADDR
56356: LD_VAR 0 3
56360: PUSH
56361: FOR_TO
56362: IFFALSE 56453
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
56364: LD_STRING setFactoryWaypointXY(
56366: PUSH
56367: LD_VAR 0 3
56371: PUSH
56372: LD_VAR 0 2
56376: ARRAY
56377: PUSH
56378: LD_INT 1
56380: ARRAY
56381: STR
56382: PUSH
56383: LD_STRING ,
56385: STR
56386: PUSH
56387: LD_VAR 0 3
56391: PUSH
56392: LD_VAR 0 2
56396: ARRAY
56397: PUSH
56398: LD_INT 2
56400: ARRAY
56401: STR
56402: PUSH
56403: LD_STRING ,
56405: STR
56406: PUSH
56407: LD_VAR 0 3
56411: PUSH
56412: LD_VAR 0 2
56416: ARRAY
56417: PUSH
56418: LD_INT 3
56420: ARRAY
56421: STR
56422: PUSH
56423: LD_STRING ,
56425: STR
56426: PUSH
56427: LD_VAR 0 3
56431: PUSH
56432: LD_VAR 0 2
56436: ARRAY
56437: PUSH
56438: LD_INT 4
56440: ARRAY
56441: STR
56442: PUSH
56443: LD_STRING )
56445: STR
56446: PPUSH
56447: CALL_OW 559
56451: GO 56361
56453: POP
56454: POP
// end ; end ;
56455: LD_VAR 0 1
56459: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
56460: LD_INT 0
56462: PPUSH
// if HexInfo ( x , y ) = warehouse then
56463: LD_VAR 0 2
56467: PPUSH
56468: LD_VAR 0 3
56472: PPUSH
56473: CALL_OW 428
56477: PUSH
56478: LD_VAR 0 1
56482: EQUAL
56483: IFFALSE 56510
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
56485: LD_ADDR_EXP 61
56489: PUSH
56490: LD_EXP 61
56494: PPUSH
56495: LD_VAR 0 1
56499: PPUSH
56500: LD_INT 0
56502: PPUSH
56503: CALL_OW 1
56507: ST_TO_ADDR
56508: GO 56561
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
56510: LD_ADDR_EXP 61
56514: PUSH
56515: LD_EXP 61
56519: PPUSH
56520: LD_VAR 0 1
56524: PPUSH
56525: LD_VAR 0 1
56529: PPUSH
56530: CALL_OW 255
56534: PUSH
56535: LD_VAR 0 1
56539: PUSH
56540: LD_VAR 0 2
56544: PUSH
56545: LD_VAR 0 3
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: PPUSH
56556: CALL_OW 1
56560: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
56561: CALL 56570 0 0
// end ;
56565: LD_VAR 0 4
56569: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
56570: LD_INT 0
56572: PPUSH
56573: PPUSH
56574: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
56575: LD_STRING resetWarehouseGatheringPoints();
56577: PPUSH
56578: CALL_OW 559
// if warehouseGatheringPoints then
56582: LD_EXP 61
56586: IFFALSE 56712
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
56588: LD_ADDR_VAR 0 3
56592: PUSH
56593: LD_EXP 61
56597: PPUSH
56598: CALL 41084 0 1
56602: ST_TO_ADDR
// for i := 1 to list do
56603: LD_ADDR_VAR 0 2
56607: PUSH
56608: DOUBLE
56609: LD_INT 1
56611: DEC
56612: ST_TO_ADDR
56613: LD_VAR 0 3
56617: PUSH
56618: FOR_TO
56619: IFFALSE 56710
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
56621: LD_STRING setWarehouseGatheringPointXY(
56623: PUSH
56624: LD_VAR 0 3
56628: PUSH
56629: LD_VAR 0 2
56633: ARRAY
56634: PUSH
56635: LD_INT 1
56637: ARRAY
56638: STR
56639: PUSH
56640: LD_STRING ,
56642: STR
56643: PUSH
56644: LD_VAR 0 3
56648: PUSH
56649: LD_VAR 0 2
56653: ARRAY
56654: PUSH
56655: LD_INT 2
56657: ARRAY
56658: STR
56659: PUSH
56660: LD_STRING ,
56662: STR
56663: PUSH
56664: LD_VAR 0 3
56668: PUSH
56669: LD_VAR 0 2
56673: ARRAY
56674: PUSH
56675: LD_INT 3
56677: ARRAY
56678: STR
56679: PUSH
56680: LD_STRING ,
56682: STR
56683: PUSH
56684: LD_VAR 0 3
56688: PUSH
56689: LD_VAR 0 2
56693: ARRAY
56694: PUSH
56695: LD_INT 4
56697: ARRAY
56698: STR
56699: PUSH
56700: LD_STRING )
56702: STR
56703: PPUSH
56704: CALL_OW 559
56708: GO 56618
56710: POP
56711: POP
// end ; end ;
56712: LD_VAR 0 1
56716: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
56717: LD_EXP 61
56721: IFFALSE 57406
56723: GO 56725
56725: DISABLE
56726: LD_INT 0
56728: PPUSH
56729: PPUSH
56730: PPUSH
56731: PPUSH
56732: PPUSH
56733: PPUSH
56734: PPUSH
56735: PPUSH
56736: PPUSH
// begin enable ;
56737: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
56738: LD_ADDR_VAR 0 3
56742: PUSH
56743: LD_EXP 61
56747: PPUSH
56748: CALL 41084 0 1
56752: ST_TO_ADDR
// if not list then
56753: LD_VAR 0 3
56757: NOT
56758: IFFALSE 56762
// exit ;
56760: GO 57406
// for i := 1 to list do
56762: LD_ADDR_VAR 0 1
56766: PUSH
56767: DOUBLE
56768: LD_INT 1
56770: DEC
56771: ST_TO_ADDR
56772: LD_VAR 0 3
56776: PUSH
56777: FOR_TO
56778: IFFALSE 57404
// begin depot := list [ i ] [ 2 ] ;
56780: LD_ADDR_VAR 0 8
56784: PUSH
56785: LD_VAR 0 3
56789: PUSH
56790: LD_VAR 0 1
56794: ARRAY
56795: PUSH
56796: LD_INT 2
56798: ARRAY
56799: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
56800: LD_ADDR_VAR 0 5
56804: PUSH
56805: LD_VAR 0 3
56809: PUSH
56810: LD_VAR 0 1
56814: ARRAY
56815: PUSH
56816: LD_INT 1
56818: ARRAY
56819: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
56820: LD_VAR 0 8
56824: PPUSH
56825: CALL_OW 301
56829: PUSH
56830: LD_VAR 0 5
56834: PUSH
56835: LD_VAR 0 8
56839: PPUSH
56840: CALL_OW 255
56844: NONEQUAL
56845: OR
56846: IFFALSE 56875
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
56848: LD_ADDR_EXP 61
56852: PUSH
56853: LD_EXP 61
56857: PPUSH
56858: LD_VAR 0 8
56862: PPUSH
56863: LD_INT 0
56865: PPUSH
56866: CALL_OW 1
56870: ST_TO_ADDR
// exit ;
56871: POP
56872: POP
56873: GO 57406
// end ; x := list [ i ] [ 3 ] ;
56875: LD_ADDR_VAR 0 6
56879: PUSH
56880: LD_VAR 0 3
56884: PUSH
56885: LD_VAR 0 1
56889: ARRAY
56890: PUSH
56891: LD_INT 3
56893: ARRAY
56894: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
56895: LD_ADDR_VAR 0 7
56899: PUSH
56900: LD_VAR 0 3
56904: PUSH
56905: LD_VAR 0 1
56909: ARRAY
56910: PUSH
56911: LD_INT 4
56913: ARRAY
56914: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
56915: LD_ADDR_VAR 0 9
56919: PUSH
56920: LD_VAR 0 6
56924: PPUSH
56925: LD_VAR 0 7
56929: PPUSH
56930: LD_INT 16
56932: PPUSH
56933: CALL 39672 0 3
56937: ST_TO_ADDR
// if not cratesNearbyPoint then
56938: LD_VAR 0 9
56942: NOT
56943: IFFALSE 56949
// exit ;
56945: POP
56946: POP
56947: GO 57406
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
56949: LD_ADDR_VAR 0 4
56953: PUSH
56954: LD_INT 22
56956: PUSH
56957: LD_VAR 0 5
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 3
56968: PUSH
56969: LD_INT 60
56971: PUSH
56972: EMPTY
56973: LIST
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 91
56981: PUSH
56982: LD_VAR 0 8
56986: PUSH
56987: LD_INT 6
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 2
56997: PUSH
56998: LD_INT 25
57000: PUSH
57001: LD_INT 2
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 25
57010: PUSH
57011: LD_INT 16
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: LIST
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: PPUSH
57029: CALL_OW 69
57033: PUSH
57034: LD_VAR 0 8
57038: PPUSH
57039: CALL_OW 313
57043: PPUSH
57044: LD_INT 3
57046: PUSH
57047: LD_INT 60
57049: PUSH
57050: EMPTY
57051: LIST
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 2
57059: PUSH
57060: LD_INT 25
57062: PUSH
57063: LD_INT 2
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 25
57072: PUSH
57073: LD_INT 16
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: LIST
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PPUSH
57089: CALL_OW 72
57093: UNION
57094: ST_TO_ADDR
// if tmp then
57095: LD_VAR 0 4
57099: IFFALSE 57179
// begin tmp := ShrinkArray ( tmp , 3 ) ;
57101: LD_ADDR_VAR 0 4
57105: PUSH
57106: LD_VAR 0 4
57110: PPUSH
57111: LD_INT 3
57113: PPUSH
57114: CALL 37641 0 2
57118: ST_TO_ADDR
// for j in tmp do
57119: LD_ADDR_VAR 0 2
57123: PUSH
57124: LD_VAR 0 4
57128: PUSH
57129: FOR_IN
57130: IFFALSE 57173
// begin if IsInUnit ( j ) then
57132: LD_VAR 0 2
57136: PPUSH
57137: CALL_OW 310
57141: IFFALSE 57152
// ComExit ( j ) ;
57143: LD_VAR 0 2
57147: PPUSH
57148: CALL 37724 0 1
// AddComCollect ( j , x , y ) ;
57152: LD_VAR 0 2
57156: PPUSH
57157: LD_VAR 0 6
57161: PPUSH
57162: LD_VAR 0 7
57166: PPUSH
57167: CALL_OW 177
// end ;
57171: GO 57129
57173: POP
57174: POP
// exit ;
57175: POP
57176: POP
57177: GO 57406
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
57179: LD_ADDR_VAR 0 4
57183: PUSH
57184: LD_INT 22
57186: PUSH
57187: LD_VAR 0 5
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 91
57198: PUSH
57199: LD_VAR 0 8
57203: PUSH
57204: LD_INT 8
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 2
57214: PUSH
57215: LD_INT 34
57217: PUSH
57218: LD_INT 12
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 34
57227: PUSH
57228: LD_INT 51
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 34
57237: PUSH
57238: LD_INT 32
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 34
57247: PUSH
57248: LD_INT 89
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: LIST
57266: PPUSH
57267: CALL_OW 69
57271: ST_TO_ADDR
// if tmp then
57272: LD_VAR 0 4
57276: IFFALSE 57402
// begin for j in tmp do
57278: LD_ADDR_VAR 0 2
57282: PUSH
57283: LD_VAR 0 4
57287: PUSH
57288: FOR_IN
57289: IFFALSE 57400
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
57291: LD_VAR 0 2
57295: PPUSH
57296: CALL_OW 262
57300: PUSH
57301: LD_INT 3
57303: EQUAL
57304: PUSH
57305: LD_VAR 0 2
57309: PPUSH
57310: CALL_OW 261
57314: PUSH
57315: LD_INT 20
57317: GREATER
57318: OR
57319: PUSH
57320: LD_VAR 0 2
57324: PPUSH
57325: CALL_OW 314
57329: NOT
57330: AND
57331: PUSH
57332: LD_VAR 0 2
57336: PPUSH
57337: CALL_OW 263
57341: PUSH
57342: LD_INT 1
57344: NONEQUAL
57345: PUSH
57346: LD_VAR 0 2
57350: PPUSH
57351: CALL_OW 311
57355: OR
57356: AND
57357: IFFALSE 57398
// begin ComCollect ( j , x , y ) ;
57359: LD_VAR 0 2
57363: PPUSH
57364: LD_VAR 0 6
57368: PPUSH
57369: LD_VAR 0 7
57373: PPUSH
57374: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
57378: LD_VAR 0 2
57382: PPUSH
57383: LD_VAR 0 8
57387: PPUSH
57388: CALL_OW 172
// exit ;
57392: POP
57393: POP
57394: POP
57395: POP
57396: GO 57406
// end ;
57398: GO 57288
57400: POP
57401: POP
// end ; end ;
57402: GO 56777
57404: POP
57405: POP
// end ; end_of_file
57406: PPOPN 9
57408: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
57409: LD_VAR 0 1
57413: PUSH
57414: LD_INT 200
57416: DOUBLE
57417: GREATEREQUAL
57418: IFFALSE 57426
57420: LD_INT 299
57422: DOUBLE
57423: LESSEQUAL
57424: IFTRUE 57428
57426: GO 57460
57428: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
57429: LD_VAR 0 1
57433: PPUSH
57434: LD_VAR 0 2
57438: PPUSH
57439: LD_VAR 0 3
57443: PPUSH
57444: LD_VAR 0 4
57448: PPUSH
57449: LD_VAR 0 5
57453: PPUSH
57454: CALL 57948 0 5
57458: GO 57537
57460: LD_INT 300
57462: DOUBLE
57463: GREATEREQUAL
57464: IFFALSE 57472
57466: LD_INT 399
57468: DOUBLE
57469: LESSEQUAL
57470: IFTRUE 57474
57472: GO 57536
57474: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
57475: LD_VAR 0 1
57479: PPUSH
57480: LD_VAR 0 2
57484: PPUSH
57485: LD_VAR 0 3
57489: PPUSH
57490: LD_VAR 0 4
57494: PPUSH
57495: LD_VAR 0 5
57499: PPUSH
57500: LD_VAR 0 6
57504: PPUSH
57505: LD_VAR 0 7
57509: PPUSH
57510: LD_VAR 0 8
57514: PPUSH
57515: LD_VAR 0 9
57519: PPUSH
57520: LD_VAR 0 10
57524: PPUSH
57525: LD_VAR 0 11
57529: PPUSH
57530: CALL 54110 0 11
57534: GO 57537
57536: POP
// end ;
57537: PPOPN 11
57539: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
57540: LD_VAR 0 1
57544: PPUSH
57545: LD_VAR 0 2
57549: PPUSH
57550: LD_VAR 0 3
57554: PPUSH
57555: LD_VAR 0 4
57559: PPUSH
57560: LD_VAR 0 5
57564: PPUSH
57565: CALL 57684 0 5
// end ; end_of_file
57569: PPOPN 5
57571: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
57572: LD_INT 0
57574: PPUSH
57575: PPUSH
57576: PPUSH
57577: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
57578: LD_VAR 0 1
57582: PPUSH
57583: CALL_OW 264
57587: PUSH
57588: LD_INT 91
57590: EQUAL
57591: IFFALSE 57663
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
57593: LD_INT 68
57595: PPUSH
57596: LD_VAR 0 1
57600: PPUSH
57601: CALL_OW 255
57605: PPUSH
57606: CALL_OW 321
57610: PUSH
57611: LD_INT 2
57613: EQUAL
57614: IFFALSE 57626
// eff := 70 else
57616: LD_ADDR_VAR 0 4
57620: PUSH
57621: LD_INT 70
57623: ST_TO_ADDR
57624: GO 57634
// eff := 30 ;
57626: LD_ADDR_VAR 0 4
57630: PUSH
57631: LD_INT 30
57633: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
57634: LD_VAR 0 1
57638: PPUSH
57639: CALL_OW 250
57643: PPUSH
57644: LD_VAR 0 1
57648: PPUSH
57649: CALL_OW 251
57653: PPUSH
57654: LD_VAR 0 4
57658: PPUSH
57659: CALL_OW 495
// end ; end ;
57663: LD_VAR 0 2
57667: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
57668: LD_INT 0
57670: PPUSH
// end ;
57671: LD_VAR 0 4
57675: RET
// export function SOS_Command ( cmd ) ; begin
57676: LD_INT 0
57678: PPUSH
// end ;
57679: LD_VAR 0 2
57683: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
57684: LD_INT 0
57686: PPUSH
// end ;
57687: LD_VAR 0 6
57691: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
57692: LD_INT 0
57694: PPUSH
57695: PPUSH
// if not vehicle or not factory then
57696: LD_VAR 0 1
57700: NOT
57701: PUSH
57702: LD_VAR 0 2
57706: NOT
57707: OR
57708: IFFALSE 57712
// exit ;
57710: GO 57943
// if factoryWaypoints >= factory then
57712: LD_EXP 60
57716: PUSH
57717: LD_VAR 0 2
57721: GREATEREQUAL
57722: IFFALSE 57943
// if factoryWaypoints [ factory ] then
57724: LD_EXP 60
57728: PUSH
57729: LD_VAR 0 2
57733: ARRAY
57734: IFFALSE 57943
// begin if GetControl ( vehicle ) = control_manual then
57736: LD_VAR 0 1
57740: PPUSH
57741: CALL_OW 263
57745: PUSH
57746: LD_INT 1
57748: EQUAL
57749: IFFALSE 57830
// begin driver := IsDrivenBy ( vehicle ) ;
57751: LD_ADDR_VAR 0 4
57755: PUSH
57756: LD_VAR 0 1
57760: PPUSH
57761: CALL_OW 311
57765: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
57766: LD_VAR 0 4
57770: PPUSH
57771: LD_EXP 60
57775: PUSH
57776: LD_VAR 0 2
57780: ARRAY
57781: PUSH
57782: LD_INT 3
57784: ARRAY
57785: PPUSH
57786: LD_EXP 60
57790: PUSH
57791: LD_VAR 0 2
57795: ARRAY
57796: PUSH
57797: LD_INT 4
57799: ARRAY
57800: PPUSH
57801: CALL_OW 171
// AddComExitVehicle ( driver ) ;
57805: LD_VAR 0 4
57809: PPUSH
57810: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
57814: LD_VAR 0 4
57818: PPUSH
57819: LD_VAR 0 2
57823: PPUSH
57824: CALL_OW 180
// end else
57828: GO 57943
// if GetControl ( vehicle ) = control_remote then
57830: LD_VAR 0 1
57834: PPUSH
57835: CALL_OW 263
57839: PUSH
57840: LD_INT 2
57842: EQUAL
57843: IFFALSE 57904
// begin wait ( 0 0$2 ) ;
57845: LD_INT 70
57847: PPUSH
57848: CALL_OW 67
// if Connect ( vehicle ) then
57852: LD_VAR 0 1
57856: PPUSH
57857: CALL 7945 0 1
57861: IFFALSE 57902
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
57863: LD_VAR 0 1
57867: PPUSH
57868: LD_EXP 60
57872: PUSH
57873: LD_VAR 0 2
57877: ARRAY
57878: PUSH
57879: LD_INT 3
57881: ARRAY
57882: PPUSH
57883: LD_EXP 60
57887: PUSH
57888: LD_VAR 0 2
57892: ARRAY
57893: PUSH
57894: LD_INT 4
57896: ARRAY
57897: PPUSH
57898: CALL_OW 171
// end else
57902: GO 57943
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
57904: LD_VAR 0 1
57908: PPUSH
57909: LD_EXP 60
57913: PUSH
57914: LD_VAR 0 2
57918: ARRAY
57919: PUSH
57920: LD_INT 3
57922: ARRAY
57923: PPUSH
57924: LD_EXP 60
57928: PUSH
57929: LD_VAR 0 2
57933: ARRAY
57934: PUSH
57935: LD_INT 4
57937: ARRAY
57938: PPUSH
57939: CALL_OW 171
// end ; end ;
57943: LD_VAR 0 3
57947: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
57948: LD_INT 0
57950: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
57951: LD_VAR 0 1
57955: PUSH
57956: LD_INT 250
57958: EQUAL
57959: PUSH
57960: LD_VAR 0 2
57964: PPUSH
57965: CALL_OW 264
57969: PUSH
57970: LD_INT 81
57972: EQUAL
57973: AND
57974: IFFALSE 57995
// MinerPlaceMine ( unit , x , y ) ;
57976: LD_VAR 0 2
57980: PPUSH
57981: LD_VAR 0 4
57985: PPUSH
57986: LD_VAR 0 5
57990: PPUSH
57991: CALL 60380 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
57995: LD_VAR 0 1
57999: PUSH
58000: LD_INT 251
58002: EQUAL
58003: PUSH
58004: LD_VAR 0 2
58008: PPUSH
58009: CALL_OW 264
58013: PUSH
58014: LD_INT 81
58016: EQUAL
58017: AND
58018: IFFALSE 58039
// MinerDetonateMine ( unit , x , y ) ;
58020: LD_VAR 0 2
58024: PPUSH
58025: LD_VAR 0 4
58029: PPUSH
58030: LD_VAR 0 5
58034: PPUSH
58035: CALL 60655 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
58039: LD_VAR 0 1
58043: PUSH
58044: LD_INT 252
58046: EQUAL
58047: PUSH
58048: LD_VAR 0 2
58052: PPUSH
58053: CALL_OW 264
58057: PUSH
58058: LD_INT 81
58060: EQUAL
58061: AND
58062: IFFALSE 58083
// MinerCreateMinefield ( unit , x , y ) ;
58064: LD_VAR 0 2
58068: PPUSH
58069: LD_VAR 0 4
58073: PPUSH
58074: LD_VAR 0 5
58078: PPUSH
58079: CALL 61072 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
58083: LD_VAR 0 1
58087: PUSH
58088: LD_INT 253
58090: EQUAL
58091: PUSH
58092: LD_VAR 0 2
58096: PPUSH
58097: CALL_OW 257
58101: PUSH
58102: LD_INT 5
58104: EQUAL
58105: AND
58106: IFFALSE 58127
// ComBinocular ( unit , x , y ) ;
58108: LD_VAR 0 2
58112: PPUSH
58113: LD_VAR 0 4
58117: PPUSH
58118: LD_VAR 0 5
58122: PPUSH
58123: CALL 61441 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
58127: LD_VAR 0 1
58131: PUSH
58132: LD_INT 254
58134: EQUAL
58135: PUSH
58136: LD_VAR 0 2
58140: PPUSH
58141: CALL_OW 264
58145: PUSH
58146: LD_INT 99
58148: EQUAL
58149: AND
58150: PUSH
58151: LD_VAR 0 3
58155: PPUSH
58156: CALL_OW 263
58160: PUSH
58161: LD_INT 3
58163: EQUAL
58164: AND
58165: IFFALSE 58181
// HackDestroyVehicle ( unit , selectedUnit ) ;
58167: LD_VAR 0 2
58171: PPUSH
58172: LD_VAR 0 3
58176: PPUSH
58177: CALL 59744 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
58181: LD_VAR 0 1
58185: PUSH
58186: LD_INT 255
58188: EQUAL
58189: PUSH
58190: LD_VAR 0 2
58194: PPUSH
58195: CALL_OW 264
58199: PUSH
58200: LD_INT 14
58202: PUSH
58203: LD_INT 53
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: IN
58210: AND
58211: PUSH
58212: LD_VAR 0 4
58216: PPUSH
58217: LD_VAR 0 5
58221: PPUSH
58222: CALL_OW 488
58226: AND
58227: IFFALSE 58251
// CutTreeXYR ( unit , x , y , 12 ) ;
58229: LD_VAR 0 2
58233: PPUSH
58234: LD_VAR 0 4
58238: PPUSH
58239: LD_VAR 0 5
58243: PPUSH
58244: LD_INT 12
58246: PPUSH
58247: CALL 58314 0 4
// if cmd = 256 then
58251: LD_VAR 0 1
58255: PUSH
58256: LD_INT 256
58258: EQUAL
58259: IFFALSE 58280
// SetFactoryWaypoint ( unit , x , y ) ;
58261: LD_VAR 0 2
58265: PPUSH
58266: LD_VAR 0 4
58270: PPUSH
58271: LD_VAR 0 5
58275: PPUSH
58276: CALL 56098 0 3
// if cmd = 257 then
58280: LD_VAR 0 1
58284: PUSH
58285: LD_INT 257
58287: EQUAL
58288: IFFALSE 58309
// SetWarehouseGatheringPoint ( unit , x , y ) ;
58290: LD_VAR 0 2
58294: PPUSH
58295: LD_VAR 0 4
58299: PPUSH
58300: LD_VAR 0 5
58304: PPUSH
58305: CALL 56460 0 3
// end ;
58309: LD_VAR 0 6
58313: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
58314: LD_INT 0
58316: PPUSH
58317: PPUSH
58318: PPUSH
58319: PPUSH
58320: PPUSH
58321: PPUSH
58322: PPUSH
58323: PPUSH
58324: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
58325: LD_VAR 0 1
58329: NOT
58330: PUSH
58331: LD_VAR 0 2
58335: PPUSH
58336: LD_VAR 0 3
58340: PPUSH
58341: CALL_OW 488
58345: NOT
58346: OR
58347: PUSH
58348: LD_VAR 0 4
58352: NOT
58353: OR
58354: IFFALSE 58358
// exit ;
58356: GO 58698
// list := [ ] ;
58358: LD_ADDR_VAR 0 13
58362: PUSH
58363: EMPTY
58364: ST_TO_ADDR
// if x - r < 0 then
58365: LD_VAR 0 2
58369: PUSH
58370: LD_VAR 0 4
58374: MINUS
58375: PUSH
58376: LD_INT 0
58378: LESS
58379: IFFALSE 58391
// min_x := 0 else
58381: LD_ADDR_VAR 0 7
58385: PUSH
58386: LD_INT 0
58388: ST_TO_ADDR
58389: GO 58407
// min_x := x - r ;
58391: LD_ADDR_VAR 0 7
58395: PUSH
58396: LD_VAR 0 2
58400: PUSH
58401: LD_VAR 0 4
58405: MINUS
58406: ST_TO_ADDR
// if y - r < 0 then
58407: LD_VAR 0 3
58411: PUSH
58412: LD_VAR 0 4
58416: MINUS
58417: PUSH
58418: LD_INT 0
58420: LESS
58421: IFFALSE 58433
// min_y := 0 else
58423: LD_ADDR_VAR 0 8
58427: PUSH
58428: LD_INT 0
58430: ST_TO_ADDR
58431: GO 58449
// min_y := y - r ;
58433: LD_ADDR_VAR 0 8
58437: PUSH
58438: LD_VAR 0 3
58442: PUSH
58443: LD_VAR 0 4
58447: MINUS
58448: ST_TO_ADDR
// max_x := x + r ;
58449: LD_ADDR_VAR 0 9
58453: PUSH
58454: LD_VAR 0 2
58458: PUSH
58459: LD_VAR 0 4
58463: PLUS
58464: ST_TO_ADDR
// max_y := y + r ;
58465: LD_ADDR_VAR 0 10
58469: PUSH
58470: LD_VAR 0 3
58474: PUSH
58475: LD_VAR 0 4
58479: PLUS
58480: ST_TO_ADDR
// for _x = min_x to max_x do
58481: LD_ADDR_VAR 0 11
58485: PUSH
58486: DOUBLE
58487: LD_VAR 0 7
58491: DEC
58492: ST_TO_ADDR
58493: LD_VAR 0 9
58497: PUSH
58498: FOR_TO
58499: IFFALSE 58616
// for _y = min_y to max_y do
58501: LD_ADDR_VAR 0 12
58505: PUSH
58506: DOUBLE
58507: LD_VAR 0 8
58511: DEC
58512: ST_TO_ADDR
58513: LD_VAR 0 10
58517: PUSH
58518: FOR_TO
58519: IFFALSE 58612
// begin if not ValidHex ( _x , _y ) then
58521: LD_VAR 0 11
58525: PPUSH
58526: LD_VAR 0 12
58530: PPUSH
58531: CALL_OW 488
58535: NOT
58536: IFFALSE 58540
// continue ;
58538: GO 58518
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
58540: LD_VAR 0 11
58544: PPUSH
58545: LD_VAR 0 12
58549: PPUSH
58550: CALL_OW 351
58554: PUSH
58555: LD_VAR 0 11
58559: PPUSH
58560: LD_VAR 0 12
58564: PPUSH
58565: CALL_OW 554
58569: AND
58570: IFFALSE 58610
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
58572: LD_ADDR_VAR 0 13
58576: PUSH
58577: LD_VAR 0 13
58581: PPUSH
58582: LD_VAR 0 13
58586: PUSH
58587: LD_INT 1
58589: PLUS
58590: PPUSH
58591: LD_VAR 0 11
58595: PUSH
58596: LD_VAR 0 12
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PPUSH
58605: CALL_OW 2
58609: ST_TO_ADDR
// end ;
58610: GO 58518
58612: POP
58613: POP
58614: GO 58498
58616: POP
58617: POP
// if not list then
58618: LD_VAR 0 13
58622: NOT
58623: IFFALSE 58627
// exit ;
58625: GO 58698
// for i in list do
58627: LD_ADDR_VAR 0 6
58631: PUSH
58632: LD_VAR 0 13
58636: PUSH
58637: FOR_IN
58638: IFFALSE 58696
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
58640: LD_VAR 0 1
58644: PPUSH
58645: LD_STRING M
58647: PUSH
58648: LD_VAR 0 6
58652: PUSH
58653: LD_INT 1
58655: ARRAY
58656: PUSH
58657: LD_VAR 0 6
58661: PUSH
58662: LD_INT 2
58664: ARRAY
58665: PUSH
58666: LD_INT 0
58668: PUSH
58669: LD_INT 0
58671: PUSH
58672: LD_INT 0
58674: PUSH
58675: LD_INT 0
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: PUSH
58687: EMPTY
58688: LIST
58689: PPUSH
58690: CALL_OW 447
58694: GO 58637
58696: POP
58697: POP
// end ;
58698: LD_VAR 0 5
58702: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
58703: LD_EXP 63
58707: NOT
58708: IFFALSE 58758
58710: GO 58712
58712: DISABLE
// begin initHack := true ;
58713: LD_ADDR_EXP 63
58717: PUSH
58718: LD_INT 1
58720: ST_TO_ADDR
// hackTanks := [ ] ;
58721: LD_ADDR_EXP 64
58725: PUSH
58726: EMPTY
58727: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
58728: LD_ADDR_EXP 65
58732: PUSH
58733: EMPTY
58734: ST_TO_ADDR
// hackLimit := 3 ;
58735: LD_ADDR_EXP 66
58739: PUSH
58740: LD_INT 3
58742: ST_TO_ADDR
// hackDist := 12 ;
58743: LD_ADDR_EXP 67
58747: PUSH
58748: LD_INT 12
58750: ST_TO_ADDR
// hackCounter := [ ] ;
58751: LD_ADDR_EXP 68
58755: PUSH
58756: EMPTY
58757: ST_TO_ADDR
// end ;
58758: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
58759: LD_EXP 63
58763: PUSH
58764: LD_INT 34
58766: PUSH
58767: LD_INT 99
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PPUSH
58774: CALL_OW 69
58778: AND
58779: IFFALSE 59032
58781: GO 58783
58783: DISABLE
58784: LD_INT 0
58786: PPUSH
58787: PPUSH
// begin enable ;
58788: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
58789: LD_ADDR_VAR 0 1
58793: PUSH
58794: LD_INT 34
58796: PUSH
58797: LD_INT 99
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PPUSH
58804: CALL_OW 69
58808: PUSH
58809: FOR_IN
58810: IFFALSE 59030
// begin if not i in hackTanks then
58812: LD_VAR 0 1
58816: PUSH
58817: LD_EXP 64
58821: IN
58822: NOT
58823: IFFALSE 58906
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
58825: LD_ADDR_EXP 64
58829: PUSH
58830: LD_EXP 64
58834: PPUSH
58835: LD_EXP 64
58839: PUSH
58840: LD_INT 1
58842: PLUS
58843: PPUSH
58844: LD_VAR 0 1
58848: PPUSH
58849: CALL_OW 1
58853: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
58854: LD_ADDR_EXP 65
58858: PUSH
58859: LD_EXP 65
58863: PPUSH
58864: LD_EXP 65
58868: PUSH
58869: LD_INT 1
58871: PLUS
58872: PPUSH
58873: EMPTY
58874: PPUSH
58875: CALL_OW 1
58879: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
58880: LD_ADDR_EXP 68
58884: PUSH
58885: LD_EXP 68
58889: PPUSH
58890: LD_EXP 68
58894: PUSH
58895: LD_INT 1
58897: PLUS
58898: PPUSH
58899: EMPTY
58900: PPUSH
58901: CALL_OW 1
58905: ST_TO_ADDR
// end ; if not IsOk ( i ) then
58906: LD_VAR 0 1
58910: PPUSH
58911: CALL_OW 302
58915: NOT
58916: IFFALSE 58929
// begin HackUnlinkAll ( i ) ;
58918: LD_VAR 0 1
58922: PPUSH
58923: CALL 59035 0 1
// continue ;
58927: GO 58809
// end ; HackCheckCapturedStatus ( i ) ;
58929: LD_VAR 0 1
58933: PPUSH
58934: CALL 59478 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
58938: LD_ADDR_VAR 0 2
58942: PUSH
58943: LD_INT 81
58945: PUSH
58946: LD_VAR 0 1
58950: PPUSH
58951: CALL_OW 255
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 33
58962: PUSH
58963: LD_INT 3
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 91
58972: PUSH
58973: LD_VAR 0 1
58977: PUSH
58978: LD_EXP 67
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 50
58990: PUSH
58991: EMPTY
58992: LIST
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: PPUSH
59000: CALL_OW 69
59004: ST_TO_ADDR
// if not tmp then
59005: LD_VAR 0 2
59009: NOT
59010: IFFALSE 59014
// continue ;
59012: GO 58809
// HackLink ( i , tmp ) ;
59014: LD_VAR 0 1
59018: PPUSH
59019: LD_VAR 0 2
59023: PPUSH
59024: CALL 59171 0 2
// end ;
59028: GO 58809
59030: POP
59031: POP
// end ;
59032: PPOPN 2
59034: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
59035: LD_INT 0
59037: PPUSH
59038: PPUSH
59039: PPUSH
// if not hack in hackTanks then
59040: LD_VAR 0 1
59044: PUSH
59045: LD_EXP 64
59049: IN
59050: NOT
59051: IFFALSE 59055
// exit ;
59053: GO 59166
// index := GetElementIndex ( hackTanks , hack ) ;
59055: LD_ADDR_VAR 0 4
59059: PUSH
59060: LD_EXP 64
59064: PPUSH
59065: LD_VAR 0 1
59069: PPUSH
59070: CALL 4752 0 2
59074: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
59075: LD_EXP 65
59079: PUSH
59080: LD_VAR 0 4
59084: ARRAY
59085: IFFALSE 59166
// begin for i in hackTanksCaptured [ index ] do
59087: LD_ADDR_VAR 0 3
59091: PUSH
59092: LD_EXP 65
59096: PUSH
59097: LD_VAR 0 4
59101: ARRAY
59102: PUSH
59103: FOR_IN
59104: IFFALSE 59130
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
59106: LD_VAR 0 3
59110: PUSH
59111: LD_INT 1
59113: ARRAY
59114: PPUSH
59115: LD_VAR 0 3
59119: PUSH
59120: LD_INT 2
59122: ARRAY
59123: PPUSH
59124: CALL_OW 235
59128: GO 59103
59130: POP
59131: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
59132: LD_ADDR_EXP 65
59136: PUSH
59137: LD_EXP 65
59141: PPUSH
59142: LD_VAR 0 4
59146: PPUSH
59147: EMPTY
59148: PPUSH
59149: CALL_OW 1
59153: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
59154: LD_VAR 0 1
59158: PPUSH
59159: LD_INT 0
59161: PPUSH
59162: CALL_OW 505
// end ; end ;
59166: LD_VAR 0 2
59170: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
59171: LD_INT 0
59173: PPUSH
59174: PPUSH
59175: PPUSH
// if not hack in hackTanks or not vehicles then
59176: LD_VAR 0 1
59180: PUSH
59181: LD_EXP 64
59185: IN
59186: NOT
59187: PUSH
59188: LD_VAR 0 2
59192: NOT
59193: OR
59194: IFFALSE 59198
// exit ;
59196: GO 59473
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
59198: LD_ADDR_VAR 0 2
59202: PUSH
59203: LD_VAR 0 1
59207: PPUSH
59208: LD_VAR 0 2
59212: PPUSH
59213: LD_INT 1
59215: PPUSH
59216: LD_INT 1
59218: PPUSH
59219: CALL 5402 0 4
59223: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
59224: LD_ADDR_VAR 0 5
59228: PUSH
59229: LD_EXP 64
59233: PPUSH
59234: LD_VAR 0 1
59238: PPUSH
59239: CALL 4752 0 2
59243: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
59244: LD_EXP 65
59248: PUSH
59249: LD_VAR 0 5
59253: ARRAY
59254: PUSH
59255: LD_EXP 66
59259: LESS
59260: IFFALSE 59449
// begin for i := 1 to vehicles do
59262: LD_ADDR_VAR 0 4
59266: PUSH
59267: DOUBLE
59268: LD_INT 1
59270: DEC
59271: ST_TO_ADDR
59272: LD_VAR 0 2
59276: PUSH
59277: FOR_TO
59278: IFFALSE 59447
// begin if hackTanksCaptured [ index ] = hackLimit then
59280: LD_EXP 65
59284: PUSH
59285: LD_VAR 0 5
59289: ARRAY
59290: PUSH
59291: LD_EXP 66
59295: EQUAL
59296: IFFALSE 59300
// break ;
59298: GO 59447
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
59300: LD_ADDR_EXP 68
59304: PUSH
59305: LD_EXP 68
59309: PPUSH
59310: LD_VAR 0 5
59314: PPUSH
59315: LD_EXP 68
59319: PUSH
59320: LD_VAR 0 5
59324: ARRAY
59325: PUSH
59326: LD_INT 1
59328: PLUS
59329: PPUSH
59330: CALL_OW 1
59334: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
59335: LD_ADDR_EXP 65
59339: PUSH
59340: LD_EXP 65
59344: PPUSH
59345: LD_VAR 0 5
59349: PUSH
59350: LD_EXP 65
59354: PUSH
59355: LD_VAR 0 5
59359: ARRAY
59360: PUSH
59361: LD_INT 1
59363: PLUS
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PPUSH
59369: LD_VAR 0 2
59373: PUSH
59374: LD_VAR 0 4
59378: ARRAY
59379: PUSH
59380: LD_VAR 0 2
59384: PUSH
59385: LD_VAR 0 4
59389: ARRAY
59390: PPUSH
59391: CALL_OW 255
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PPUSH
59400: CALL 4967 0 3
59404: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
59405: LD_VAR 0 2
59409: PUSH
59410: LD_VAR 0 4
59414: ARRAY
59415: PPUSH
59416: LD_VAR 0 1
59420: PPUSH
59421: CALL_OW 255
59425: PPUSH
59426: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
59430: LD_VAR 0 2
59434: PUSH
59435: LD_VAR 0 4
59439: ARRAY
59440: PPUSH
59441: CALL_OW 141
// end ;
59445: GO 59277
59447: POP
59448: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59449: LD_VAR 0 1
59453: PPUSH
59454: LD_EXP 65
59458: PUSH
59459: LD_VAR 0 5
59463: ARRAY
59464: PUSH
59465: LD_INT 0
59467: PLUS
59468: PPUSH
59469: CALL_OW 505
// end ;
59473: LD_VAR 0 3
59477: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
59478: LD_INT 0
59480: PPUSH
59481: PPUSH
59482: PPUSH
59483: PPUSH
// if not hack in hackTanks then
59484: LD_VAR 0 1
59488: PUSH
59489: LD_EXP 64
59493: IN
59494: NOT
59495: IFFALSE 59499
// exit ;
59497: GO 59739
// index := GetElementIndex ( hackTanks , hack ) ;
59499: LD_ADDR_VAR 0 4
59503: PUSH
59504: LD_EXP 64
59508: PPUSH
59509: LD_VAR 0 1
59513: PPUSH
59514: CALL 4752 0 2
59518: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
59519: LD_ADDR_VAR 0 3
59523: PUSH
59524: DOUBLE
59525: LD_EXP 65
59529: PUSH
59530: LD_VAR 0 4
59534: ARRAY
59535: INC
59536: ST_TO_ADDR
59537: LD_INT 1
59539: PUSH
59540: FOR_DOWNTO
59541: IFFALSE 59713
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
59543: LD_ADDR_VAR 0 5
59547: PUSH
59548: LD_EXP 65
59552: PUSH
59553: LD_VAR 0 4
59557: ARRAY
59558: PUSH
59559: LD_VAR 0 3
59563: ARRAY
59564: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
59565: LD_VAR 0 5
59569: PUSH
59570: LD_INT 1
59572: ARRAY
59573: PPUSH
59574: CALL_OW 302
59578: NOT
59579: PUSH
59580: LD_VAR 0 5
59584: PUSH
59585: LD_INT 1
59587: ARRAY
59588: PPUSH
59589: CALL_OW 255
59593: PUSH
59594: LD_VAR 0 1
59598: PPUSH
59599: CALL_OW 255
59603: NONEQUAL
59604: OR
59605: IFFALSE 59711
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
59607: LD_VAR 0 5
59611: PUSH
59612: LD_INT 1
59614: ARRAY
59615: PPUSH
59616: CALL_OW 305
59620: PUSH
59621: LD_VAR 0 5
59625: PUSH
59626: LD_INT 1
59628: ARRAY
59629: PPUSH
59630: CALL_OW 255
59634: PUSH
59635: LD_VAR 0 1
59639: PPUSH
59640: CALL_OW 255
59644: EQUAL
59645: AND
59646: IFFALSE 59670
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
59648: LD_VAR 0 5
59652: PUSH
59653: LD_INT 1
59655: ARRAY
59656: PPUSH
59657: LD_VAR 0 5
59661: PUSH
59662: LD_INT 2
59664: ARRAY
59665: PPUSH
59666: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
59670: LD_ADDR_EXP 65
59674: PUSH
59675: LD_EXP 65
59679: PPUSH
59680: LD_VAR 0 4
59684: PPUSH
59685: LD_EXP 65
59689: PUSH
59690: LD_VAR 0 4
59694: ARRAY
59695: PPUSH
59696: LD_VAR 0 3
59700: PPUSH
59701: CALL_OW 3
59705: PPUSH
59706: CALL_OW 1
59710: ST_TO_ADDR
// end ; end ;
59711: GO 59540
59713: POP
59714: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59715: LD_VAR 0 1
59719: PPUSH
59720: LD_EXP 65
59724: PUSH
59725: LD_VAR 0 4
59729: ARRAY
59730: PUSH
59731: LD_INT 0
59733: PLUS
59734: PPUSH
59735: CALL_OW 505
// end ;
59739: LD_VAR 0 2
59743: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
59744: LD_INT 0
59746: PPUSH
59747: PPUSH
59748: PPUSH
59749: PPUSH
// if not hack in hackTanks then
59750: LD_VAR 0 1
59754: PUSH
59755: LD_EXP 64
59759: IN
59760: NOT
59761: IFFALSE 59765
// exit ;
59763: GO 59850
// index := GetElementIndex ( hackTanks , hack ) ;
59765: LD_ADDR_VAR 0 5
59769: PUSH
59770: LD_EXP 64
59774: PPUSH
59775: LD_VAR 0 1
59779: PPUSH
59780: CALL 4752 0 2
59784: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
59785: LD_ADDR_VAR 0 4
59789: PUSH
59790: DOUBLE
59791: LD_INT 1
59793: DEC
59794: ST_TO_ADDR
59795: LD_EXP 65
59799: PUSH
59800: LD_VAR 0 5
59804: ARRAY
59805: PUSH
59806: FOR_TO
59807: IFFALSE 59848
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
59809: LD_EXP 65
59813: PUSH
59814: LD_VAR 0 5
59818: ARRAY
59819: PUSH
59820: LD_VAR 0 4
59824: ARRAY
59825: PUSH
59826: LD_INT 1
59828: ARRAY
59829: PUSH
59830: LD_VAR 0 2
59834: EQUAL
59835: IFFALSE 59846
// KillUnit ( vehicle ) ;
59837: LD_VAR 0 2
59841: PPUSH
59842: CALL_OW 66
59846: GO 59806
59848: POP
59849: POP
// end ;
59850: LD_VAR 0 3
59854: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
59855: LD_EXP 69
59859: NOT
59860: IFFALSE 59895
59862: GO 59864
59864: DISABLE
// begin initMiner := true ;
59865: LD_ADDR_EXP 69
59869: PUSH
59870: LD_INT 1
59872: ST_TO_ADDR
// minersList := [ ] ;
59873: LD_ADDR_EXP 70
59877: PUSH
59878: EMPTY
59879: ST_TO_ADDR
// minerMinesList := [ ] ;
59880: LD_ADDR_EXP 71
59884: PUSH
59885: EMPTY
59886: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
59887: LD_ADDR_EXP 72
59891: PUSH
59892: LD_INT 5
59894: ST_TO_ADDR
// end ;
59895: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
59896: LD_EXP 69
59900: PUSH
59901: LD_INT 34
59903: PUSH
59904: LD_INT 81
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PPUSH
59911: CALL_OW 69
59915: AND
59916: IFFALSE 60377
59918: GO 59920
59920: DISABLE
59921: LD_INT 0
59923: PPUSH
59924: PPUSH
59925: PPUSH
59926: PPUSH
// begin enable ;
59927: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
59928: LD_ADDR_VAR 0 1
59932: PUSH
59933: LD_INT 34
59935: PUSH
59936: LD_INT 81
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PPUSH
59943: CALL_OW 69
59947: PUSH
59948: FOR_IN
59949: IFFALSE 60021
// begin if not i in minersList then
59951: LD_VAR 0 1
59955: PUSH
59956: LD_EXP 70
59960: IN
59961: NOT
59962: IFFALSE 60019
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
59964: LD_ADDR_EXP 70
59968: PUSH
59969: LD_EXP 70
59973: PPUSH
59974: LD_EXP 70
59978: PUSH
59979: LD_INT 1
59981: PLUS
59982: PPUSH
59983: LD_VAR 0 1
59987: PPUSH
59988: CALL_OW 1
59992: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
59993: LD_ADDR_EXP 71
59997: PUSH
59998: LD_EXP 71
60002: PPUSH
60003: LD_EXP 71
60007: PUSH
60008: LD_INT 1
60010: PLUS
60011: PPUSH
60012: EMPTY
60013: PPUSH
60014: CALL_OW 1
60018: ST_TO_ADDR
// end end ;
60019: GO 59948
60021: POP
60022: POP
// for i := minerMinesList downto 1 do
60023: LD_ADDR_VAR 0 1
60027: PUSH
60028: DOUBLE
60029: LD_EXP 71
60033: INC
60034: ST_TO_ADDR
60035: LD_INT 1
60037: PUSH
60038: FOR_DOWNTO
60039: IFFALSE 60375
// begin if IsLive ( minersList [ i ] ) then
60041: LD_EXP 70
60045: PUSH
60046: LD_VAR 0 1
60050: ARRAY
60051: PPUSH
60052: CALL_OW 300
60056: IFFALSE 60084
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
60058: LD_EXP 70
60062: PUSH
60063: LD_VAR 0 1
60067: ARRAY
60068: PPUSH
60069: LD_EXP 71
60073: PUSH
60074: LD_VAR 0 1
60078: ARRAY
60079: PPUSH
60080: CALL_OW 505
// if not minerMinesList [ i ] then
60084: LD_EXP 71
60088: PUSH
60089: LD_VAR 0 1
60093: ARRAY
60094: NOT
60095: IFFALSE 60099
// continue ;
60097: GO 60038
// for j := minerMinesList [ i ] downto 1 do
60099: LD_ADDR_VAR 0 2
60103: PUSH
60104: DOUBLE
60105: LD_EXP 71
60109: PUSH
60110: LD_VAR 0 1
60114: ARRAY
60115: INC
60116: ST_TO_ADDR
60117: LD_INT 1
60119: PUSH
60120: FOR_DOWNTO
60121: IFFALSE 60371
// begin side := GetSide ( minersList [ i ] ) ;
60123: LD_ADDR_VAR 0 3
60127: PUSH
60128: LD_EXP 70
60132: PUSH
60133: LD_VAR 0 1
60137: ARRAY
60138: PPUSH
60139: CALL_OW 255
60143: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
60144: LD_ADDR_VAR 0 4
60148: PUSH
60149: LD_EXP 71
60153: PUSH
60154: LD_VAR 0 1
60158: ARRAY
60159: PUSH
60160: LD_VAR 0 2
60164: ARRAY
60165: PUSH
60166: LD_INT 1
60168: ARRAY
60169: PPUSH
60170: LD_EXP 71
60174: PUSH
60175: LD_VAR 0 1
60179: ARRAY
60180: PUSH
60181: LD_VAR 0 2
60185: ARRAY
60186: PUSH
60187: LD_INT 2
60189: ARRAY
60190: PPUSH
60191: CALL_OW 428
60195: ST_TO_ADDR
// if not tmp then
60196: LD_VAR 0 4
60200: NOT
60201: IFFALSE 60205
// continue ;
60203: GO 60120
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
60205: LD_VAR 0 4
60209: PUSH
60210: LD_INT 81
60212: PUSH
60213: LD_VAR 0 3
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PPUSH
60222: CALL_OW 69
60226: IN
60227: PUSH
60228: LD_EXP 71
60232: PUSH
60233: LD_VAR 0 1
60237: ARRAY
60238: PUSH
60239: LD_VAR 0 2
60243: ARRAY
60244: PUSH
60245: LD_INT 1
60247: ARRAY
60248: PPUSH
60249: LD_EXP 71
60253: PUSH
60254: LD_VAR 0 1
60258: ARRAY
60259: PUSH
60260: LD_VAR 0 2
60264: ARRAY
60265: PUSH
60266: LD_INT 2
60268: ARRAY
60269: PPUSH
60270: CALL_OW 458
60274: AND
60275: IFFALSE 60369
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
60277: LD_EXP 71
60281: PUSH
60282: LD_VAR 0 1
60286: ARRAY
60287: PUSH
60288: LD_VAR 0 2
60292: ARRAY
60293: PUSH
60294: LD_INT 1
60296: ARRAY
60297: PPUSH
60298: LD_EXP 71
60302: PUSH
60303: LD_VAR 0 1
60307: ARRAY
60308: PUSH
60309: LD_VAR 0 2
60313: ARRAY
60314: PUSH
60315: LD_INT 2
60317: ARRAY
60318: PPUSH
60319: LD_VAR 0 3
60323: PPUSH
60324: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
60328: LD_ADDR_EXP 71
60332: PUSH
60333: LD_EXP 71
60337: PPUSH
60338: LD_VAR 0 1
60342: PPUSH
60343: LD_EXP 71
60347: PUSH
60348: LD_VAR 0 1
60352: ARRAY
60353: PPUSH
60354: LD_VAR 0 2
60358: PPUSH
60359: CALL_OW 3
60363: PPUSH
60364: CALL_OW 1
60368: ST_TO_ADDR
// end ; end ;
60369: GO 60120
60371: POP
60372: POP
// end ;
60373: GO 60038
60375: POP
60376: POP
// end ;
60377: PPOPN 4
60379: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
60380: LD_INT 0
60382: PPUSH
60383: PPUSH
// result := false ;
60384: LD_ADDR_VAR 0 4
60388: PUSH
60389: LD_INT 0
60391: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
60392: LD_VAR 0 1
60396: PPUSH
60397: CALL_OW 264
60401: PUSH
60402: LD_INT 81
60404: EQUAL
60405: NOT
60406: IFFALSE 60410
// exit ;
60408: GO 60650
// index := GetElementIndex ( minersList , unit ) ;
60410: LD_ADDR_VAR 0 5
60414: PUSH
60415: LD_EXP 70
60419: PPUSH
60420: LD_VAR 0 1
60424: PPUSH
60425: CALL 4752 0 2
60429: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
60430: LD_EXP 71
60434: PUSH
60435: LD_VAR 0 5
60439: ARRAY
60440: PUSH
60441: LD_EXP 72
60445: GREATEREQUAL
60446: IFFALSE 60450
// exit ;
60448: GO 60650
// ComMoveXY ( unit , x , y ) ;
60450: LD_VAR 0 1
60454: PPUSH
60455: LD_VAR 0 2
60459: PPUSH
60460: LD_VAR 0 3
60464: PPUSH
60465: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60469: LD_INT 35
60471: PPUSH
60472: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
60476: LD_VAR 0 1
60480: PPUSH
60481: LD_VAR 0 2
60485: PPUSH
60486: LD_VAR 0 3
60490: PPUSH
60491: CALL 36136 0 3
60495: NOT
60496: PUSH
60497: LD_VAR 0 1
60501: PPUSH
60502: CALL_OW 314
60506: AND
60507: IFFALSE 60511
// exit ;
60509: GO 60650
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
60511: LD_VAR 0 2
60515: PPUSH
60516: LD_VAR 0 3
60520: PPUSH
60521: CALL_OW 428
60525: PUSH
60526: LD_VAR 0 1
60530: EQUAL
60531: PUSH
60532: LD_VAR 0 1
60536: PPUSH
60537: CALL_OW 314
60541: NOT
60542: AND
60543: IFFALSE 60469
// PlaySoundXY ( x , y , PlantMine ) ;
60545: LD_VAR 0 2
60549: PPUSH
60550: LD_VAR 0 3
60554: PPUSH
60555: LD_STRING PlantMine
60557: PPUSH
60558: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
60562: LD_VAR 0 2
60566: PPUSH
60567: LD_VAR 0 3
60571: PPUSH
60572: LD_VAR 0 1
60576: PPUSH
60577: CALL_OW 255
60581: PPUSH
60582: LD_INT 0
60584: PPUSH
60585: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
60589: LD_ADDR_EXP 71
60593: PUSH
60594: LD_EXP 71
60598: PPUSH
60599: LD_VAR 0 5
60603: PUSH
60604: LD_EXP 71
60608: PUSH
60609: LD_VAR 0 5
60613: ARRAY
60614: PUSH
60615: LD_INT 1
60617: PLUS
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PPUSH
60623: LD_VAR 0 2
60627: PUSH
60628: LD_VAR 0 3
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PPUSH
60637: CALL 4967 0 3
60641: ST_TO_ADDR
// result := true ;
60642: LD_ADDR_VAR 0 4
60646: PUSH
60647: LD_INT 1
60649: ST_TO_ADDR
// end ;
60650: LD_VAR 0 4
60654: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
60655: LD_INT 0
60657: PPUSH
60658: PPUSH
60659: PPUSH
// if not unit in minersList then
60660: LD_VAR 0 1
60664: PUSH
60665: LD_EXP 70
60669: IN
60670: NOT
60671: IFFALSE 60675
// exit ;
60673: GO 61067
// index := GetElementIndex ( minersList , unit ) ;
60675: LD_ADDR_VAR 0 6
60679: PUSH
60680: LD_EXP 70
60684: PPUSH
60685: LD_VAR 0 1
60689: PPUSH
60690: CALL 4752 0 2
60694: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
60695: LD_ADDR_VAR 0 5
60699: PUSH
60700: DOUBLE
60701: LD_EXP 71
60705: PUSH
60706: LD_VAR 0 6
60710: ARRAY
60711: INC
60712: ST_TO_ADDR
60713: LD_INT 1
60715: PUSH
60716: FOR_DOWNTO
60717: IFFALSE 60878
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
60719: LD_EXP 71
60723: PUSH
60724: LD_VAR 0 6
60728: ARRAY
60729: PUSH
60730: LD_VAR 0 5
60734: ARRAY
60735: PUSH
60736: LD_INT 1
60738: ARRAY
60739: PUSH
60740: LD_VAR 0 2
60744: EQUAL
60745: PUSH
60746: LD_EXP 71
60750: PUSH
60751: LD_VAR 0 6
60755: ARRAY
60756: PUSH
60757: LD_VAR 0 5
60761: ARRAY
60762: PUSH
60763: LD_INT 2
60765: ARRAY
60766: PUSH
60767: LD_VAR 0 3
60771: EQUAL
60772: AND
60773: IFFALSE 60876
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
60775: LD_EXP 71
60779: PUSH
60780: LD_VAR 0 6
60784: ARRAY
60785: PUSH
60786: LD_VAR 0 5
60790: ARRAY
60791: PUSH
60792: LD_INT 1
60794: ARRAY
60795: PPUSH
60796: LD_EXP 71
60800: PUSH
60801: LD_VAR 0 6
60805: ARRAY
60806: PUSH
60807: LD_VAR 0 5
60811: ARRAY
60812: PUSH
60813: LD_INT 2
60815: ARRAY
60816: PPUSH
60817: LD_VAR 0 1
60821: PPUSH
60822: CALL_OW 255
60826: PPUSH
60827: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
60831: LD_ADDR_EXP 71
60835: PUSH
60836: LD_EXP 71
60840: PPUSH
60841: LD_VAR 0 6
60845: PPUSH
60846: LD_EXP 71
60850: PUSH
60851: LD_VAR 0 6
60855: ARRAY
60856: PPUSH
60857: LD_VAR 0 5
60861: PPUSH
60862: CALL_OW 3
60866: PPUSH
60867: CALL_OW 1
60871: ST_TO_ADDR
// exit ;
60872: POP
60873: POP
60874: GO 61067
// end ; end ;
60876: GO 60716
60878: POP
60879: POP
// for i := minerMinesList [ index ] downto 1 do
60880: LD_ADDR_VAR 0 5
60884: PUSH
60885: DOUBLE
60886: LD_EXP 71
60890: PUSH
60891: LD_VAR 0 6
60895: ARRAY
60896: INC
60897: ST_TO_ADDR
60898: LD_INT 1
60900: PUSH
60901: FOR_DOWNTO
60902: IFFALSE 61065
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
60904: LD_EXP 71
60908: PUSH
60909: LD_VAR 0 6
60913: ARRAY
60914: PUSH
60915: LD_VAR 0 5
60919: ARRAY
60920: PUSH
60921: LD_INT 1
60923: ARRAY
60924: PPUSH
60925: LD_EXP 71
60929: PUSH
60930: LD_VAR 0 6
60934: ARRAY
60935: PUSH
60936: LD_VAR 0 5
60940: ARRAY
60941: PUSH
60942: LD_INT 2
60944: ARRAY
60945: PPUSH
60946: LD_VAR 0 2
60950: PPUSH
60951: LD_VAR 0 3
60955: PPUSH
60956: CALL_OW 298
60960: PUSH
60961: LD_INT 6
60963: LESS
60964: IFFALSE 61063
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
60966: LD_EXP 71
60970: PUSH
60971: LD_VAR 0 6
60975: ARRAY
60976: PUSH
60977: LD_VAR 0 5
60981: ARRAY
60982: PUSH
60983: LD_INT 1
60985: ARRAY
60986: PPUSH
60987: LD_EXP 71
60991: PUSH
60992: LD_VAR 0 6
60996: ARRAY
60997: PUSH
60998: LD_VAR 0 5
61002: ARRAY
61003: PUSH
61004: LD_INT 2
61006: ARRAY
61007: PPUSH
61008: LD_VAR 0 1
61012: PPUSH
61013: CALL_OW 255
61017: PPUSH
61018: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
61022: LD_ADDR_EXP 71
61026: PUSH
61027: LD_EXP 71
61031: PPUSH
61032: LD_VAR 0 6
61036: PPUSH
61037: LD_EXP 71
61041: PUSH
61042: LD_VAR 0 6
61046: ARRAY
61047: PPUSH
61048: LD_VAR 0 5
61052: PPUSH
61053: CALL_OW 3
61057: PPUSH
61058: CALL_OW 1
61062: ST_TO_ADDR
// end ; end ;
61063: GO 60901
61065: POP
61066: POP
// end ;
61067: LD_VAR 0 4
61071: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
61072: LD_INT 0
61074: PPUSH
61075: PPUSH
61076: PPUSH
61077: PPUSH
61078: PPUSH
61079: PPUSH
61080: PPUSH
61081: PPUSH
61082: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
61083: LD_VAR 0 1
61087: PPUSH
61088: CALL_OW 264
61092: PUSH
61093: LD_INT 81
61095: EQUAL
61096: NOT
61097: PUSH
61098: LD_VAR 0 1
61102: PUSH
61103: LD_EXP 70
61107: IN
61108: NOT
61109: OR
61110: IFFALSE 61114
// exit ;
61112: GO 61436
// index := GetElementIndex ( minersList , unit ) ;
61114: LD_ADDR_VAR 0 6
61118: PUSH
61119: LD_EXP 70
61123: PPUSH
61124: LD_VAR 0 1
61128: PPUSH
61129: CALL 4752 0 2
61133: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
61134: LD_ADDR_VAR 0 8
61138: PUSH
61139: LD_EXP 72
61143: PUSH
61144: LD_EXP 71
61148: PUSH
61149: LD_VAR 0 6
61153: ARRAY
61154: MINUS
61155: ST_TO_ADDR
// if not minesFreeAmount then
61156: LD_VAR 0 8
61160: NOT
61161: IFFALSE 61165
// exit ;
61163: GO 61436
// tmp := [ ] ;
61165: LD_ADDR_VAR 0 7
61169: PUSH
61170: EMPTY
61171: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
61172: LD_ADDR_VAR 0 5
61176: PUSH
61177: DOUBLE
61178: LD_INT 1
61180: DEC
61181: ST_TO_ADDR
61182: LD_VAR 0 8
61186: PUSH
61187: FOR_TO
61188: IFFALSE 61383
// begin _d := rand ( 0 , 5 ) ;
61190: LD_ADDR_VAR 0 11
61194: PUSH
61195: LD_INT 0
61197: PPUSH
61198: LD_INT 5
61200: PPUSH
61201: CALL_OW 12
61205: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
61206: LD_ADDR_VAR 0 12
61210: PUSH
61211: LD_INT 2
61213: PPUSH
61214: LD_INT 6
61216: PPUSH
61217: CALL_OW 12
61221: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
61222: LD_ADDR_VAR 0 9
61226: PUSH
61227: LD_VAR 0 2
61231: PPUSH
61232: LD_VAR 0 11
61236: PPUSH
61237: LD_VAR 0 12
61241: PPUSH
61242: CALL_OW 272
61246: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
61247: LD_ADDR_VAR 0 10
61251: PUSH
61252: LD_VAR 0 3
61256: PPUSH
61257: LD_VAR 0 11
61261: PPUSH
61262: LD_VAR 0 12
61266: PPUSH
61267: CALL_OW 273
61271: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
61272: LD_VAR 0 9
61276: PPUSH
61277: LD_VAR 0 10
61281: PPUSH
61282: CALL_OW 488
61286: PUSH
61287: LD_VAR 0 9
61291: PUSH
61292: LD_VAR 0 10
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_VAR 0 7
61305: IN
61306: NOT
61307: AND
61308: PUSH
61309: LD_VAR 0 9
61313: PPUSH
61314: LD_VAR 0 10
61318: PPUSH
61319: CALL_OW 458
61323: NOT
61324: AND
61325: IFFALSE 61367
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
61327: LD_ADDR_VAR 0 7
61331: PUSH
61332: LD_VAR 0 7
61336: PPUSH
61337: LD_VAR 0 7
61341: PUSH
61342: LD_INT 1
61344: PLUS
61345: PPUSH
61346: LD_VAR 0 9
61350: PUSH
61351: LD_VAR 0 10
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PPUSH
61360: CALL_OW 1
61364: ST_TO_ADDR
61365: GO 61381
// i := i - 1 ;
61367: LD_ADDR_VAR 0 5
61371: PUSH
61372: LD_VAR 0 5
61376: PUSH
61377: LD_INT 1
61379: MINUS
61380: ST_TO_ADDR
// end ;
61381: GO 61187
61383: POP
61384: POP
// for i in tmp do
61385: LD_ADDR_VAR 0 5
61389: PUSH
61390: LD_VAR 0 7
61394: PUSH
61395: FOR_IN
61396: IFFALSE 61434
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
61398: LD_VAR 0 1
61402: PPUSH
61403: LD_VAR 0 5
61407: PUSH
61408: LD_INT 1
61410: ARRAY
61411: PPUSH
61412: LD_VAR 0 5
61416: PUSH
61417: LD_INT 2
61419: ARRAY
61420: PPUSH
61421: CALL 60380 0 3
61425: NOT
61426: IFFALSE 61432
// exit ;
61428: POP
61429: POP
61430: GO 61436
61432: GO 61395
61434: POP
61435: POP
// end ;
61436: LD_VAR 0 4
61440: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
61441: LD_INT 0
61443: PPUSH
61444: PPUSH
61445: PPUSH
61446: PPUSH
61447: PPUSH
61448: PPUSH
61449: PPUSH
// if not GetClass ( unit ) = class_sniper then
61450: LD_VAR 0 1
61454: PPUSH
61455: CALL_OW 257
61459: PUSH
61460: LD_INT 5
61462: EQUAL
61463: NOT
61464: IFFALSE 61468
// exit ;
61466: GO 61856
// dist := 8 ;
61468: LD_ADDR_VAR 0 5
61472: PUSH
61473: LD_INT 8
61475: ST_TO_ADDR
// viewRange := 12 ;
61476: LD_ADDR_VAR 0 7
61480: PUSH
61481: LD_INT 12
61483: ST_TO_ADDR
// side := GetSide ( unit ) ;
61484: LD_ADDR_VAR 0 6
61488: PUSH
61489: LD_VAR 0 1
61493: PPUSH
61494: CALL_OW 255
61498: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
61499: LD_INT 61
61501: PPUSH
61502: LD_VAR 0 6
61506: PPUSH
61507: CALL_OW 321
61511: PUSH
61512: LD_INT 2
61514: EQUAL
61515: IFFALSE 61525
// viewRange := 16 ;
61517: LD_ADDR_VAR 0 7
61521: PUSH
61522: LD_INT 16
61524: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
61525: LD_VAR 0 1
61529: PPUSH
61530: LD_VAR 0 2
61534: PPUSH
61535: LD_VAR 0 3
61539: PPUSH
61540: CALL_OW 297
61544: PUSH
61545: LD_VAR 0 5
61549: GREATER
61550: IFFALSE 61629
// begin ComMoveXY ( unit , x , y ) ;
61552: LD_VAR 0 1
61556: PPUSH
61557: LD_VAR 0 2
61561: PPUSH
61562: LD_VAR 0 3
61566: PPUSH
61567: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
61571: LD_INT 35
61573: PPUSH
61574: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
61578: LD_VAR 0 1
61582: PPUSH
61583: LD_VAR 0 2
61587: PPUSH
61588: LD_VAR 0 3
61592: PPUSH
61593: CALL 36136 0 3
61597: NOT
61598: IFFALSE 61602
// exit ;
61600: GO 61856
// until GetDistUnitXY ( unit , x , y ) < dist ;
61602: LD_VAR 0 1
61606: PPUSH
61607: LD_VAR 0 2
61611: PPUSH
61612: LD_VAR 0 3
61616: PPUSH
61617: CALL_OW 297
61621: PUSH
61622: LD_VAR 0 5
61626: LESS
61627: IFFALSE 61571
// end ; ComTurnXY ( unit , x , y ) ;
61629: LD_VAR 0 1
61633: PPUSH
61634: LD_VAR 0 2
61638: PPUSH
61639: LD_VAR 0 3
61643: PPUSH
61644: CALL_OW 118
// wait ( 5 ) ;
61648: LD_INT 5
61650: PPUSH
61651: CALL_OW 67
// _d := GetDir ( unit ) ;
61655: LD_ADDR_VAR 0 10
61659: PUSH
61660: LD_VAR 0 1
61664: PPUSH
61665: CALL_OW 254
61669: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
61670: LD_ADDR_VAR 0 8
61674: PUSH
61675: LD_VAR 0 1
61679: PPUSH
61680: CALL_OW 250
61684: PPUSH
61685: LD_VAR 0 10
61689: PPUSH
61690: LD_VAR 0 5
61694: PPUSH
61695: CALL_OW 272
61699: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
61700: LD_ADDR_VAR 0 9
61704: PUSH
61705: LD_VAR 0 1
61709: PPUSH
61710: CALL_OW 251
61714: PPUSH
61715: LD_VAR 0 10
61719: PPUSH
61720: LD_VAR 0 5
61724: PPUSH
61725: CALL_OW 273
61729: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
61730: LD_VAR 0 8
61734: PPUSH
61735: LD_VAR 0 9
61739: PPUSH
61740: CALL_OW 488
61744: NOT
61745: IFFALSE 61749
// exit ;
61747: GO 61856
// ComAnimCustom ( unit , 1 ) ;
61749: LD_VAR 0 1
61753: PPUSH
61754: LD_INT 1
61756: PPUSH
61757: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
61761: LD_VAR 0 8
61765: PPUSH
61766: LD_VAR 0 9
61770: PPUSH
61771: LD_VAR 0 6
61775: PPUSH
61776: LD_VAR 0 7
61780: PPUSH
61781: CALL_OW 330
// repeat wait ( 1 ) ;
61785: LD_INT 1
61787: PPUSH
61788: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
61792: LD_VAR 0 1
61796: PPUSH
61797: CALL_OW 316
61801: PUSH
61802: LD_VAR 0 1
61806: PPUSH
61807: CALL_OW 314
61811: OR
61812: PUSH
61813: LD_VAR 0 1
61817: PPUSH
61818: CALL_OW 302
61822: NOT
61823: OR
61824: PUSH
61825: LD_VAR 0 1
61829: PPUSH
61830: CALL_OW 301
61834: OR
61835: IFFALSE 61785
// RemoveSeeing ( _x , _y , side ) ;
61837: LD_VAR 0 8
61841: PPUSH
61842: LD_VAR 0 9
61846: PPUSH
61847: LD_VAR 0 6
61851: PPUSH
61852: CALL_OW 331
// end ;
61856: LD_VAR 0 4
61860: RET
