// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 42 0 0
// CreateNature ;
   8: CALL 11222 0 0
// PrepareArabian ;
  12: CALL 247 0 0
// PrepareAmerican ;
  16: CALL 682 0 0
// PrepareLegion ;
  20: CALL 5842 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 2 ) ;
  30: LD_INT 2
  32: PPUSH
  33: CALL_OW 344
// Action ;
  37: CALL 11826 0 0
// end ;
  41: END
// export debug , prefix , amScriptActive , legScriptActive , apeAmount , spotAmericanBase , spotArabianBase , spotByAmerican , spotByLegion , spotLegion , americanDestroyed , legionDestroyed , hasMastodont , hasVehicles , hasTigers , hasApes , hasDrugs , canFinish , gameActive , omarCanChangeClass , tigerCounter , americanWave ; function Init ; begin
  42: LD_INT 0
  44: PPUSH
// debug := false ;
  45: LD_ADDR_EXP 1
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// prefix := 09_ ;
  53: LD_ADDR_EXP 2
  57: PUSH
  58: LD_STRING 09_
  60: ST_TO_ADDR
// amScriptActive := true ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_INT 1
  68: ST_TO_ADDR
// legScriptActive := true ;
  69: LD_ADDR_EXP 4
  73: PUSH
  74: LD_INT 1
  76: ST_TO_ADDR
// apeAmount := [ 16 , 14 , 12 , 10 ] [ Difficulty ] ;
  77: LD_ADDR_EXP 5
  81: PUSH
  82: LD_INT 16
  84: PUSH
  85: LD_INT 14
  87: PUSH
  88: LD_INT 12
  90: PUSH
  91: LD_INT 10
  93: PUSH
  94: EMPTY
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: PUSH
 100: LD_OWVAR 67
 104: ARRAY
 105: ST_TO_ADDR
// spotAmericanBase := false ;
 106: LD_ADDR_EXP 6
 110: PUSH
 111: LD_INT 0
 113: ST_TO_ADDR
// spotArabianBase := false ;
 114: LD_ADDR_EXP 7
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// spotLegion := false ;
 122: LD_ADDR_EXP 10
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// spotByAmerican := false ;
 130: LD_ADDR_EXP 8
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// spotByLegion := false ;
 138: LD_ADDR_EXP 9
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// americanDestroyed := false ;
 146: LD_ADDR_EXP 11
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// legionDestroyed := false ;
 154: LD_ADDR_EXP 12
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// hasMastodont := false ;
 162: LD_ADDR_EXP 13
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// hasVehicles := false ;
 170: LD_ADDR_EXP 14
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// hasTigers := false ;
 178: LD_ADDR_EXP 15
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// hasApes := false ;
 186: LD_ADDR_EXP 16
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// hasDrugs := false ;
 194: LD_ADDR_EXP 17
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// canFinish := false ;
 202: LD_ADDR_EXP 18
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// gameActive := false ;
 210: LD_ADDR_EXP 19
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// omarCanChangeClass := false ;
 218: LD_ADDR_EXP 20
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// tigerCounter := 0 ;
 226: LD_ADDR_EXP 21
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// americanWave := 0 ;
 234: LD_ADDR_EXP 22
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// end ; end_of_file
 242: LD_VAR 0 1
 246: RET
// export Heike , Omar ; export heikeVehicle , omarVehicle ; export function PrepareArabian ; var i , tmp , veh ; begin
 247: LD_INT 0
 249: PPUSH
 250: PPUSH
 251: PPUSH
 252: PPUSH
// uc_side := 2 ;
 253: LD_ADDR_OWVAR 20
 257: PUSH
 258: LD_INT 2
 260: ST_TO_ADDR
// uc_nation := nation_arabian ;
 261: LD_ADDR_OWVAR 21
 265: PUSH
 266: LD_INT 2
 268: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 269: LD_ADDR_EXP 23
 273: PUSH
 274: LD_STRING Heike
 276: PPUSH
 277: LD_EXP 1
 281: NOT
 282: PPUSH
 283: LD_EXP 2
 287: PPUSH
 288: CALL 20667 0 3
 292: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 293: LD_INT 14
 295: PPUSH
 296: LD_INT 3
 298: PPUSH
 299: LD_INT 1
 301: PPUSH
 302: LD_INT 27
 304: PPUSH
 305: LD_INT 100
 307: PPUSH
 308: CALL 25591 0 5
// heikeVehicle := CreateVehicle ;
 312: LD_ADDR_EXP 25
 316: PUSH
 317: CALL_OW 45
 321: ST_TO_ADDR
// SetDir ( heikeVehicle , 4 ) ;
 322: LD_EXP 25
 326: PPUSH
 327: LD_INT 4
 329: PPUSH
 330: CALL_OW 233
// PlaceUnitXY ( heikeVehicle , 118 , 37 , false ) ;
 334: LD_EXP 25
 338: PPUSH
 339: LD_INT 118
 341: PPUSH
 342: LD_INT 37
 344: PPUSH
 345: LD_INT 0
 347: PPUSH
 348: CALL_OW 48
// SetClass ( Heike , class_soldier ) ;
 352: LD_EXP 23
 356: PPUSH
 357: LD_INT 1
 359: PPUSH
 360: CALL_OW 336
// PlaceHumanInUnit ( Heike , heikeVehicle ) ;
 364: LD_EXP 23
 368: PPUSH
 369: LD_EXP 25
 373: PPUSH
 374: CALL_OW 52
// uc_side := 5 ;
 378: LD_ADDR_OWVAR 20
 382: PUSH
 383: LD_INT 5
 385: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
 386: LD_ADDR_EXP 24
 390: PUSH
 391: LD_STRING Omar
 393: PPUSH
 394: CALL_OW 25
 398: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 399: LD_INT 14
 401: PPUSH
 402: LD_INT 3
 404: PPUSH
 405: LD_INT 1
 407: PPUSH
 408: LD_INT 27
 410: PPUSH
 411: LD_INT 100
 413: PPUSH
 414: CALL 25591 0 5
// omarVehicle := CreateVehicle ;
 418: LD_ADDR_EXP 26
 422: PUSH
 423: CALL_OW 45
 427: ST_TO_ADDR
// SetDir ( omarVehicle , 0 ) ;
 428: LD_EXP 26
 432: PPUSH
 433: LD_INT 0
 435: PPUSH
 436: CALL_OW 233
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) do
 440: LD_ADDR_VAR 0 2
 444: PUSH
 445: LD_INT 22
 447: PUSH
 448: LD_INT 5
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: PUSH
 455: LD_INT 21
 457: PUSH
 458: LD_INT 3
 460: PUSH
 461: EMPTY
 462: LIST
 463: LIST
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: PPUSH
 469: CALL_OW 69
 473: PUSH
 474: FOR_IN
 475: IFFALSE 499
// SetLives ( i , rand ( 300 , 499 ) ) ;
 477: LD_VAR 0 2
 481: PPUSH
 482: LD_INT 300
 484: PPUSH
 485: LD_INT 499
 487: PPUSH
 488: CALL_OW 12
 492: PPUSH
 493: CALL_OW 234
 497: GO 474
 499: POP
 500: POP
// SetResourceType ( GetBase ( arBase ) , mat_cans , 200 - ( 20 * Difficulty ) ) ;
 501: LD_INT 85
 503: PPUSH
 504: CALL_OW 274
 508: PPUSH
 509: LD_INT 1
 511: PPUSH
 512: LD_INT 200
 514: PUSH
 515: LD_INT 20
 517: PUSH
 518: LD_OWVAR 67
 522: MUL
 523: MINUS
 524: PPUSH
 525: CALL_OW 277
// SetResourceType ( GetBase ( arBase ) , mat_oil , 20 ) ;
 529: LD_INT 85
 531: PPUSH
 532: CALL_OW 274
 536: PPUSH
 537: LD_INT 2
 539: PPUSH
 540: LD_INT 20
 542: PPUSH
 543: CALL_OW 277
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_cargo_bay , 100 ) ;
 547: LD_INT 14
 549: PPUSH
 550: LD_INT 3
 552: PPUSH
 553: LD_INT 1
 555: PPUSH
 556: LD_INT 32
 558: PPUSH
 559: LD_INT 100
 561: PPUSH
 562: CALL 25591 0 5
// veh := CreateVehicle ;
 566: LD_ADDR_VAR 0 4
 570: PUSH
 571: CALL_OW 45
 575: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
 576: LD_VAR 0 4
 580: PPUSH
 581: LD_INT 4
 583: PPUSH
 584: CALL_OW 233
// SetLives ( veh , 420 ) ;
 588: LD_VAR 0 4
 592: PPUSH
 593: LD_INT 420
 595: PPUSH
 596: CALL_OW 234
// PlaceUnitXY ( veh , 193 , 133 , false ) ;
 600: LD_VAR 0 4
 604: PPUSH
 605: LD_INT 193
 607: PPUSH
 608: LD_INT 133
 610: PPUSH
 611: LD_INT 0
 613: PPUSH
 614: CALL_OW 48
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 11 ) ;
 618: LD_INT 14
 620: PPUSH
 621: LD_INT 1
 623: PPUSH
 624: LD_INT 1
 626: PPUSH
 627: LD_INT 26
 629: PPUSH
 630: LD_INT 11
 632: PPUSH
 633: CALL 25591 0 5
// veh := CreateVehicle ;
 637: LD_ADDR_VAR 0 4
 641: PUSH
 642: CALL_OW 45
 646: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
 647: LD_VAR 0 4
 651: PPUSH
 652: LD_INT 0
 654: PPUSH
 655: CALL_OW 233
// PlaceUnitXY ( veh , 261 , 115 , false ) ;
 659: LD_VAR 0 4
 663: PPUSH
 664: LD_INT 261
 666: PPUSH
 667: LD_INT 115
 669: PPUSH
 670: LD_INT 0
 672: PPUSH
 673: CALL_OW 48
// end ; end_of_file
 677: LD_VAR 0 1
 681: RET
// export amForces , amTech , amConstructList , amHealPoint , amBuildings , amTanks , amCommander , amCargo , amPatrol ; export function PrepareAmerican ; var i , j , b , un , skill , sources , patrolSpawnArea ; begin
 682: LD_INT 0
 684: PPUSH
 685: PPUSH
 686: PPUSH
 687: PPUSH
 688: PPUSH
 689: PPUSH
 690: PPUSH
 691: PPUSH
// uc_side := 1 ;
 692: LD_ADDR_OWVAR 20
 696: PUSH
 697: LD_INT 1
 699: ST_TO_ADDR
// uc_nation := nation_american ;
 700: LD_ADDR_OWVAR 21
 704: PUSH
 705: LD_INT 1
 707: ST_TO_ADDR
// amForces := [ ] ;
 708: LD_ADDR_EXP 27
 712: PUSH
 713: EMPTY
 714: ST_TO_ADDR
// amTech := GetTechNation ( 1 , nation_american , state_enabled ) ;
 715: LD_ADDR_EXP 28
 719: PUSH
 720: LD_INT 1
 722: PPUSH
 723: LD_INT 1
 725: PPUSH
 726: LD_INT 1
 728: PPUSH
 729: CALL 20814 0 3
 733: ST_TO_ADDR
// amConstructList := [ [ us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ] , [ us_medium_tracked , engine_combustion , control_remote , us_crane ] ] ;
 734: LD_ADDR_EXP 29
 738: PUSH
 739: LD_INT 2
 741: PUSH
 742: LD_INT 1
 744: PUSH
 745: LD_INT 2
 747: PUSH
 748: LD_INT 12
 750: PUSH
 751: EMPTY
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: PUSH
 757: LD_INT 3
 759: PUSH
 760: LD_INT 1
 762: PUSH
 763: LD_INT 2
 765: PUSH
 766: LD_INT 13
 768: PUSH
 769: EMPTY
 770: LIST
 771: LIST
 772: LIST
 773: LIST
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: ST_TO_ADDR
// amHealPoint := [ 94 , 132 ] ;
 779: LD_ADDR_EXP 30
 783: PUSH
 784: LD_INT 94
 786: PUSH
 787: LD_INT 132
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// amBuildings := [ ] ;
 794: LD_ADDR_EXP 31
 798: PUSH
 799: EMPTY
 800: ST_TO_ADDR
// amTanks := [ ] ;
 801: LD_ADDR_EXP 32
 805: PUSH
 806: EMPTY
 807: ST_TO_ADDR
// amCargo := 0 ;
 808: LD_ADDR_EXP 34
 812: PUSH
 813: LD_INT 0
 815: ST_TO_ADDR
// amPatrol := [ ] ;
 816: LD_ADDR_EXP 35
 820: PUSH
 821: EMPTY
 822: ST_TO_ADDR
// sources := [ [ 77 , 121 ] , [ 98 , 145 ] ] ;
 823: LD_ADDR_VAR 0 7
 827: PUSH
 828: LD_INT 77
 830: PUSH
 831: LD_INT 121
 833: PUSH
 834: EMPTY
 835: LIST
 836: LIST
 837: PUSH
 838: LD_INT 98
 840: PUSH
 841: LD_INT 145
 843: PUSH
 844: EMPTY
 845: LIST
 846: LIST
 847: PUSH
 848: EMPTY
 849: LIST
 850: LIST
 851: ST_TO_ADDR
// for i in sources do
 852: LD_ADDR_VAR 0 2
 856: PUSH
 857: LD_VAR 0 7
 861: PUSH
 862: FOR_IN
 863: IFFALSE 892
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 1 ) ;
 865: LD_VAR 0 2
 869: PUSH
 870: LD_INT 1
 872: ARRAY
 873: PPUSH
 874: LD_VAR 0 2
 878: PUSH
 879: LD_INT 2
 881: ARRAY
 882: PPUSH
 883: LD_INT 1
 885: PPUSH
 886: CALL_OW 441
 890: GO 862
 892: POP
 893: POP
// SetResourceType ( GetBase ( amBase ) , mat_cans , 550 ) ;
 894: LD_INT 2
 896: PPUSH
 897: CALL_OW 274
 901: PPUSH
 902: LD_INT 1
 904: PPUSH
 905: LD_INT 550
 907: PPUSH
 908: CALL_OW 277
// SetResourceType ( GetBase ( amBase ) , mat_oil , 120 ) ;
 912: LD_INT 2
 914: PPUSH
 915: CALL_OW 274
 919: PPUSH
 920: LD_INT 2
 922: PPUSH
 923: LD_INT 120
 925: PPUSH
 926: CALL_OW 277
// SetResourceType ( GetBase ( amBase ) , mat_siberit , 30 ) ;
 930: LD_INT 2
 932: PPUSH
 933: CALL_OW 274
 937: PPUSH
 938: LD_INT 3
 940: PPUSH
 941: LD_INT 30
 943: PPUSH
 944: CALL_OW 277
// skill := [ 6 , 7 , 8 , 9 ] [ Difficulty ] ;
 948: LD_ADDR_VAR 0 6
 952: PUSH
 953: LD_INT 6
 955: PUSH
 956: LD_INT 7
 958: PUSH
 959: LD_INT 8
 961: PUSH
 962: LD_INT 9
 964: PUSH
 965: EMPTY
 966: LIST
 967: LIST
 968: LIST
 969: LIST
 970: PUSH
 971: LD_OWVAR 67
 975: ARRAY
 976: ST_TO_ADDR
// amCommander := PrepareUnit ( Brown , false ,  ) ;
 977: LD_ADDR_EXP 33
 981: PUSH
 982: LD_STRING Brown
 984: PPUSH
 985: LD_INT 0
 987: PPUSH
 988: LD_STRING 
 990: PPUSH
 991: CALL 20667 0 3
 995: ST_TO_ADDR
// PlaceHumanInUnit ( amCommander , amBase ) ;
 996: LD_EXP 33
1000: PPUSH
1001: LD_INT 2
1003: PPUSH
1004: CALL_OW 52
// for i := 1 to 4 do
1008: LD_ADDR_VAR 0 2
1012: PUSH
1013: DOUBLE
1014: LD_INT 1
1016: DEC
1017: ST_TO_ADDR
1018: LD_INT 4
1020: PUSH
1021: FOR_TO
1022: IFFALSE 1546
// for j := 1 to [ [ 6 , 7 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] , [ 5 , 5 , 6 , 7 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
1024: LD_ADDR_VAR 0 3
1028: PUSH
1029: DOUBLE
1030: LD_INT 1
1032: DEC
1033: ST_TO_ADDR
1034: LD_INT 6
1036: PUSH
1037: LD_INT 7
1039: PUSH
1040: LD_INT 8
1042: PUSH
1043: LD_INT 9
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: PUSH
1052: LD_OWVAR 67
1056: ARRAY
1057: PUSH
1058: LD_INT 3
1060: PUSH
1061: LD_INT 4
1063: PUSH
1064: LD_INT 5
1066: PUSH
1067: LD_INT 5
1069: PUSH
1070: EMPTY
1071: LIST
1072: LIST
1073: LIST
1074: LIST
1075: PUSH
1076: LD_OWVAR 67
1080: ARRAY
1081: PUSH
1082: LD_INT 5
1084: PUSH
1085: LD_INT 5
1087: PUSH
1088: LD_INT 6
1090: PUSH
1091: LD_INT 7
1093: PUSH
1094: EMPTY
1095: LIST
1096: LIST
1097: LIST
1098: LIST
1099: PUSH
1100: LD_OWVAR 67
1104: ARRAY
1105: PUSH
1106: LD_INT 2
1108: PUSH
1109: LD_INT 3
1111: PUSH
1112: LD_INT 3
1114: PUSH
1115: LD_INT 3
1117: PUSH
1118: EMPTY
1119: LIST
1120: LIST
1121: LIST
1122: LIST
1123: PUSH
1124: LD_OWVAR 67
1128: ARRAY
1129: PUSH
1130: EMPTY
1131: LIST
1132: LIST
1133: LIST
1134: LIST
1135: PUSH
1136: LD_VAR 0 2
1140: ARRAY
1141: PUSH
1142: FOR_TO
1143: IFFALSE 1542
// begin PrepareHuman ( false , i , skill ) ;
1145: LD_INT 0
1147: PPUSH
1148: LD_VAR 0 2
1152: PPUSH
1153: LD_VAR 0 6
1157: PPUSH
1158: CALL_OW 380
// un := CreateHuman ;
1162: LD_ADDR_VAR 0 5
1166: PUSH
1167: CALL_OW 44
1171: ST_TO_ADDR
// amForces := Join ( amForces , un ) ;
1172: LD_ADDR_EXP 27
1176: PUSH
1177: LD_EXP 27
1181: PPUSH
1182: LD_VAR 0 5
1186: PPUSH
1187: CALL 58462 0 2
1191: ST_TO_ADDR
// case i of 1 :
1192: LD_VAR 0 2
1196: PUSH
1197: LD_INT 1
1199: DOUBLE
1200: EQUAL
1201: IFTRUE 1205
1203: GO 1274
1205: POP
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] ] ) ; 2 :
1206: LD_ADDR_VAR 0 4
1210: PUSH
1211: LD_INT 22
1213: PUSH
1214: LD_INT 1
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: PUSH
1221: LD_INT 2
1223: PUSH
1224: LD_INT 30
1226: PUSH
1227: LD_INT 32
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: PUSH
1234: LD_INT 30
1236: PUSH
1237: LD_INT 5
1239: PUSH
1240: EMPTY
1241: LIST
1242: LIST
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: LIST
1248: PUSH
1249: LD_INT 3
1251: PUSH
1252: LD_INT 62
1254: PUSH
1255: EMPTY
1256: LIST
1257: PUSH
1258: EMPTY
1259: LIST
1260: LIST
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: LIST
1266: PPUSH
1267: CALL_OW 69
1271: ST_TO_ADDR
1272: GO 1453
1274: LD_INT 2
1276: DOUBLE
1277: EQUAL
1278: IFTRUE 1282
1280: GO 1311
1282: POP
// b := UnitFilter ( amBase , [ f_not , [ f_full ] ] ) ; 3 :
1283: LD_ADDR_VAR 0 4
1287: PUSH
1288: LD_INT 2
1290: PPUSH
1291: LD_INT 3
1293: PUSH
1294: LD_INT 62
1296: PUSH
1297: EMPTY
1298: LIST
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: PPUSH
1304: CALL_OW 72
1308: ST_TO_ADDR
1309: GO 1453
1311: LD_INT 3
1313: DOUBLE
1314: EQUAL
1315: IFTRUE 1319
1317: GO 1393
1319: POP
// b := ReverseArray ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_control_tower ] ] , [ f_not , [ f_full ] ] ] ) ) ; 4 :
1320: LD_ADDR_VAR 0 4
1324: PUSH
1325: LD_INT 22
1327: PUSH
1328: LD_INT 1
1330: PUSH
1331: EMPTY
1332: LIST
1333: LIST
1334: PUSH
1335: LD_INT 2
1337: PUSH
1338: LD_INT 30
1340: PUSH
1341: LD_INT 3
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: PUSH
1348: LD_INT 30
1350: PUSH
1351: LD_INT 36
1353: PUSH
1354: EMPTY
1355: LIST
1356: LIST
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: LIST
1362: PUSH
1363: LD_INT 3
1365: PUSH
1366: LD_INT 62
1368: PUSH
1369: EMPTY
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: PUSH
1376: EMPTY
1377: LIST
1378: LIST
1379: LIST
1380: PPUSH
1381: CALL_OW 69
1385: PPUSH
1386: CALL 53729 0 1
1390: ST_TO_ADDR
1391: GO 1453
1393: LD_INT 4
1395: DOUBLE
1396: EQUAL
1397: IFTRUE 1401
1399: GO 1452
1401: POP
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_full ] , [ f_not , [ f_full ] ] ] ) ; end ;
1402: LD_ADDR_VAR 0 4
1406: PUSH
1407: LD_INT 22
1409: PUSH
1410: LD_INT 1
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: PUSH
1417: LD_INT 30
1419: PUSH
1420: LD_INT 8
1422: PUSH
1423: EMPTY
1424: LIST
1425: LIST
1426: PUSH
1427: LD_INT 3
1429: PUSH
1430: LD_INT 62
1432: PUSH
1433: EMPTY
1434: LIST
1435: PUSH
1436: EMPTY
1437: LIST
1438: LIST
1439: PUSH
1440: EMPTY
1441: LIST
1442: LIST
1443: LIST
1444: PPUSH
1445: CALL_OW 69
1449: ST_TO_ADDR
1450: GO 1453
1452: POP
// if b then
1453: LD_VAR 0 4
1457: IFFALSE 1519
// begin if GetBType ( b [ 1 ] ) = b_barracks and Prob ( 60 ) then
1459: LD_VAR 0 4
1463: PUSH
1464: LD_INT 1
1466: ARRAY
1467: PPUSH
1468: CALL_OW 266
1472: PUSH
1473: LD_INT 5
1475: EQUAL
1476: PUSH
1477: LD_INT 60
1479: PPUSH
1480: CALL_OW 13
1484: AND
1485: IFFALSE 1499
// SetClass ( un , class_sniper ) ;
1487: LD_VAR 0 5
1491: PPUSH
1492: LD_INT 5
1494: PPUSH
1495: CALL_OW 336
// PlaceHumanInUnit ( un , b [ 1 ] ) ;
1499: LD_VAR 0 5
1503: PPUSH
1504: LD_VAR 0 4
1508: PUSH
1509: LD_INT 1
1511: ARRAY
1512: PPUSH
1513: CALL_OW 52
// end else
1517: GO 1540
// PlaceUnitXYR ( un , 92 , 137 , 4 , false ) ;
1519: LD_VAR 0 5
1523: PPUSH
1524: LD_INT 92
1526: PPUSH
1527: LD_INT 137
1529: PPUSH
1530: LD_INT 4
1532: PPUSH
1533: LD_INT 0
1535: PPUSH
1536: CALL_OW 50
// end ;
1540: GO 1142
1542: POP
1543: POP
1544: GO 1021
1546: POP
1547: POP
// patrolSpawnArea := [ patrol1aArea , patrol2aArea , patrol3aArea ] ;
1548: LD_ADDR_VAR 0 8
1552: PUSH
1553: LD_INT 30
1555: PUSH
1556: LD_INT 32
1558: PUSH
1559: LD_INT 36
1561: PUSH
1562: EMPTY
1563: LIST
1564: LIST
1565: LIST
1566: ST_TO_ADDR
// for i := 1 to patrolSpawnArea do
1567: LD_ADDR_VAR 0 2
1571: PUSH
1572: DOUBLE
1573: LD_INT 1
1575: DEC
1576: ST_TO_ADDR
1577: LD_VAR 0 8
1581: PUSH
1582: FOR_TO
1583: IFFALSE 1752
// begin for j := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
1585: LD_ADDR_VAR 0 3
1589: PUSH
1590: DOUBLE
1591: LD_INT 1
1593: DEC
1594: ST_TO_ADDR
1595: LD_INT 1
1597: PUSH
1598: LD_INT 2
1600: PUSH
1601: LD_INT 2
1603: PUSH
1604: LD_INT 3
1606: PUSH
1607: EMPTY
1608: LIST
1609: LIST
1610: LIST
1611: LIST
1612: PUSH
1613: LD_OWVAR 67
1617: ARRAY
1618: PUSH
1619: FOR_TO
1620: IFFALSE 1748
// begin PrepareSoldier ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
1622: LD_INT 0
1624: PPUSH
1625: LD_INT 7
1627: PUSH
1628: LD_INT 8
1630: PUSH
1631: LD_INT 9
1633: PUSH
1634: LD_INT 10
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: PUSH
1643: LD_OWVAR 67
1647: ARRAY
1648: PPUSH
1649: CALL_OW 381
// un := CreateHuman ;
1653: LD_ADDR_VAR 0 5
1657: PUSH
1658: CALL_OW 44
1662: ST_TO_ADDR
// if j mod 2 = 0 then
1663: LD_VAR 0 3
1667: PUSH
1668: LD_INT 2
1670: MOD
1671: PUSH
1672: LD_INT 0
1674: EQUAL
1675: IFFALSE 1689
// SetClass ( un , class_sniper ) ;
1677: LD_VAR 0 5
1681: PPUSH
1682: LD_INT 5
1684: PPUSH
1685: CALL_OW 336
// amPatrol := Join ( amPatrol , un ) ;
1689: LD_ADDR_EXP 35
1693: PUSH
1694: LD_EXP 35
1698: PPUSH
1699: LD_VAR 0 5
1703: PPUSH
1704: CALL 58462 0 2
1708: ST_TO_ADDR
// PlaceUnitArea ( un , patrolSpawnArea [ i ] , false ) ;
1709: LD_VAR 0 5
1713: PPUSH
1714: LD_VAR 0 8
1718: PUSH
1719: LD_VAR 0 2
1723: ARRAY
1724: PPUSH
1725: LD_INT 0
1727: PPUSH
1728: CALL_OW 49
// SetTag ( un , i ) ;
1732: LD_VAR 0 5
1736: PPUSH
1737: LD_VAR 0 2
1741: PPUSH
1742: CALL_OW 109
// end ;
1746: GO 1619
1748: POP
1749: POP
// end ;
1750: GO 1582
1752: POP
1753: POP
// end ;
1754: LD_VAR 0 1
1758: RET
// every 0 0$2 trigger amScriptActive and Count ( amForces ) do var i , tmp , remote , undone , side , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
1759: LD_EXP 3
1763: PUSH
1764: LD_EXP 27
1768: PPUSH
1769: CALL 22853 0 1
1773: AND
1774: IFFALSE 4181
1776: GO 1778
1778: DISABLE
1779: LD_INT 0
1781: PPUSH
1782: PPUSH
1783: PPUSH
1784: PPUSH
1785: PPUSH
1786: PPUSH
1787: PPUSH
1788: PPUSH
1789: PPUSH
1790: PPUSH
1791: PPUSH
1792: PPUSH
1793: PPUSH
1794: PPUSH
1795: PPUSH
1796: PPUSH
1797: PPUSH
1798: PPUSH
// begin enable ;
1799: ENABLE
// side := 1 ;
1800: LD_ADDR_VAR 0 5
1804: PUSH
1805: LD_INT 1
1807: ST_TO_ADDR
// remote := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
1808: LD_ADDR_VAR 0 3
1812: PUSH
1813: LD_INT 22
1815: PUSH
1816: LD_VAR 0 5
1820: PUSH
1821: EMPTY
1822: LIST
1823: LIST
1824: PUSH
1825: LD_INT 33
1827: PUSH
1828: LD_INT 2
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: PUSH
1835: LD_INT 50
1837: PUSH
1838: EMPTY
1839: LIST
1840: PUSH
1841: LD_INT 3
1843: PUSH
1844: LD_INT 61
1846: PUSH
1847: EMPTY
1848: LIST
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: PPUSH
1860: CALL_OW 69
1864: ST_TO_ADDR
// if remote and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_btype , b_control_tower ] ] ) ) then
1865: LD_VAR 0 3
1869: PUSH
1870: LD_INT 22
1872: PUSH
1873: LD_VAR 0 5
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: PUSH
1882: LD_INT 50
1884: PUSH
1885: EMPTY
1886: LIST
1887: PUSH
1888: LD_INT 30
1890: PUSH
1891: LD_INT 36
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: PUSH
1898: EMPTY
1899: LIST
1900: LIST
1901: LIST
1902: PPUSH
1903: CALL_OW 69
1907: PPUSH
1908: CALL 22853 0 1
1912: AND
1913: IFFALSE 1941
// for i in remote do
1915: LD_ADDR_VAR 0 1
1919: PUSH
1920: LD_VAR 0 3
1924: PUSH
1925: FOR_IN
1926: IFFALSE 1939
// Connect ( i ) ;
1928: LD_VAR 0 1
1932: PPUSH
1933: CALL 29059 0 1
1937: GO 1925
1939: POP
1940: POP
// if amTech then
1941: LD_EXP 28
1945: IFFALSE 2101
// begin lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1947: LD_ADDR_VAR 0 6
1951: PUSH
1952: LD_INT 22
1954: PUSH
1955: LD_VAR 0 5
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: PUSH
1964: LD_INT 50
1966: PUSH
1967: EMPTY
1968: LIST
1969: PUSH
1970: LD_INT 2
1972: PUSH
1973: LD_INT 30
1975: PUSH
1976: LD_INT 6
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: PUSH
1983: LD_INT 30
1985: PUSH
1986: LD_INT 7
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: PUSH
1993: LD_INT 30
1995: PUSH
1996: LD_INT 8
1998: PUSH
1999: EMPTY
2000: LIST
2001: LIST
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: LIST
2007: LIST
2008: PUSH
2009: EMPTY
2010: LIST
2011: LIST
2012: LIST
2013: PPUSH
2014: CALL_OW 69
2018: ST_TO_ADDR
// if lab then
2019: LD_VAR 0 6
2023: IFFALSE 2101
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
2025: LD_VAR 0 6
2029: PUSH
2030: LD_INT 1
2032: ARRAY
2033: PPUSH
2034: CALL_OW 461
2038: PUSH
2039: LD_INT 2
2041: EQUAL
2042: IFFALSE 2101
// begin for i in amTech do
2044: LD_ADDR_VAR 0 1
2048: PUSH
2049: LD_EXP 28
2053: PUSH
2054: FOR_IN
2055: IFFALSE 2099
// if CanBeResearched ( lab [ 1 ] , i ) then
2057: LD_VAR 0 6
2061: PUSH
2062: LD_INT 1
2064: ARRAY
2065: PPUSH
2066: LD_VAR 0 1
2070: PPUSH
2071: CALL_OW 430
2075: IFFALSE 2097
// begin ComResearch ( lab [ 1 ] , i ) ;
2077: LD_VAR 0 6
2081: PUSH
2082: LD_INT 1
2084: ARRAY
2085: PPUSH
2086: LD_VAR 0 1
2090: PPUSH
2091: CALL_OW 124
// break ;
2095: GO 2099
// end ;
2097: GO 2054
2099: POP
2100: POP
// end ; end ; end ; fac := FilterUnitsInArea ( amBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
2101: LD_ADDR_VAR 0 16
2105: PUSH
2106: LD_INT 1
2108: PPUSH
2109: LD_INT 22
2111: PUSH
2112: LD_VAR 0 5
2116: PUSH
2117: EMPTY
2118: LIST
2119: LIST
2120: PUSH
2121: LD_INT 30
2123: PUSH
2124: LD_INT 3
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: PUSH
2131: LD_INT 50
2133: PUSH
2134: EMPTY
2135: LIST
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: PPUSH
2142: CALL_OW 70
2146: ST_TO_ADDR
// if fac then
2147: LD_VAR 0 16
2151: IFFALSE 2417
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
2153: LD_VAR 0 16
2157: PUSH
2158: LD_INT 1
2160: ARRAY
2161: PPUSH
2162: CALL_OW 461
2166: PUSH
2167: LD_INT 2
2169: EQUAL
2170: IFFALSE 2417
// begin emptyTowers := FilterUnitsInArea ( amBaseArea , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
2172: LD_ADDR_VAR 0 17
2176: PUSH
2177: LD_INT 1
2179: PPUSH
2180: LD_INT 2
2182: PUSH
2183: LD_INT 30
2185: PUSH
2186: LD_INT 32
2188: PUSH
2189: EMPTY
2190: LIST
2191: LIST
2192: PUSH
2193: LD_INT 30
2195: PUSH
2196: LD_INT 33
2198: PUSH
2199: EMPTY
2200: LIST
2201: LIST
2202: PUSH
2203: EMPTY
2204: LIST
2205: LIST
2206: LIST
2207: PUSH
2208: LD_INT 35
2210: PUSH
2211: LD_INT 0
2213: PUSH
2214: EMPTY
2215: LIST
2216: LIST
2217: PUSH
2218: EMPTY
2219: LIST
2220: LIST
2221: PPUSH
2222: CALL_OW 70
2226: ST_TO_ADDR
// if emptyTowers then
2227: LD_VAR 0 17
2231: IFFALSE 2279
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , amBaseArea ) ;
2233: LD_ADDR_VAR 0 18
2237: PUSH
2238: LD_VAR 0 17
2242: PUSH
2243: LD_INT 1
2245: ARRAY
2246: PPUSH
2247: LD_INT 1
2249: PPUSH
2250: CALL 31098 0 2
2254: ST_TO_ADDR
// if weapon then
2255: LD_VAR 0 18
2259: IFFALSE 2279
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
2261: LD_VAR 0 17
2265: PUSH
2266: LD_INT 1
2268: ARRAY
2269: PPUSH
2270: LD_VAR 0 18
2274: PPUSH
2275: CALL_OW 148
// end ; if amConstructList then
2279: LD_EXP 29
2283: IFFALSE 2417
// if CanBeConstructed ( fac [ 1 ] , amConstructList [ 1 ] [ 1 ] , amConstructList [ 1 ] [ 2 ] , amConstructList [ 1 ] [ 3 ] , amConstructList [ 1 ] [ 4 ] ) then
2285: LD_VAR 0 16
2289: PUSH
2290: LD_INT 1
2292: ARRAY
2293: PPUSH
2294: LD_EXP 29
2298: PUSH
2299: LD_INT 1
2301: ARRAY
2302: PUSH
2303: LD_INT 1
2305: ARRAY
2306: PPUSH
2307: LD_EXP 29
2311: PUSH
2312: LD_INT 1
2314: ARRAY
2315: PUSH
2316: LD_INT 2
2318: ARRAY
2319: PPUSH
2320: LD_EXP 29
2324: PUSH
2325: LD_INT 1
2327: ARRAY
2328: PUSH
2329: LD_INT 3
2331: ARRAY
2332: PPUSH
2333: LD_EXP 29
2337: PUSH
2338: LD_INT 1
2340: ARRAY
2341: PUSH
2342: LD_INT 4
2344: ARRAY
2345: PPUSH
2346: CALL_OW 448
2350: IFFALSE 2417
// ComConstruct ( fac [ 1 ] , amConstructList [ 1 ] [ 1 ] , amConstructList [ 1 ] [ 2 ] , amConstructList [ 1 ] [ 3 ] , amConstructList [ 1 ] [ 4 ] ) ;
2352: LD_VAR 0 16
2356: PUSH
2357: LD_INT 1
2359: ARRAY
2360: PPUSH
2361: LD_EXP 29
2365: PUSH
2366: LD_INT 1
2368: ARRAY
2369: PUSH
2370: LD_INT 1
2372: ARRAY
2373: PPUSH
2374: LD_EXP 29
2378: PUSH
2379: LD_INT 1
2381: ARRAY
2382: PUSH
2383: LD_INT 2
2385: ARRAY
2386: PPUSH
2387: LD_EXP 29
2391: PUSH
2392: LD_INT 1
2394: ARRAY
2395: PUSH
2396: LD_INT 3
2398: ARRAY
2399: PPUSH
2400: LD_EXP 29
2404: PUSH
2405: LD_INT 1
2407: ARRAY
2408: PUSH
2409: LD_INT 4
2411: ARRAY
2412: PPUSH
2413: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( amBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2417: LD_ADDR_VAR 0 2
2421: PUSH
2422: LD_INT 1
2424: PPUSH
2425: LD_INT 21
2427: PUSH
2428: LD_INT 3
2430: PUSH
2431: EMPTY
2432: LIST
2433: LIST
2434: PUSH
2435: LD_INT 3
2437: PUSH
2438: LD_INT 57
2440: PUSH
2441: EMPTY
2442: LIST
2443: PUSH
2444: EMPTY
2445: LIST
2446: LIST
2447: PUSH
2448: LD_INT 3
2450: PUSH
2451: LD_INT 24
2453: PUSH
2454: LD_INT 1000
2456: PUSH
2457: EMPTY
2458: LIST
2459: LIST
2460: PUSH
2461: EMPTY
2462: LIST
2463: LIST
2464: PUSH
2465: EMPTY
2466: LIST
2467: LIST
2468: LIST
2469: PPUSH
2470: CALL_OW 70
2474: ST_TO_ADDR
// cr := GetListOfCratesInArea ( amCratesArea ) ;
2475: LD_ADDR_VAR 0 10
2479: PUSH
2480: LD_INT 13
2482: PPUSH
2483: CALL_OW 435
2487: ST_TO_ADDR
// sci := UnitFilter ( amForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
2488: LD_ADDR_VAR 0 11
2492: PUSH
2493: LD_EXP 27
2497: PPUSH
2498: LD_INT 25
2500: PUSH
2501: LD_INT 4
2503: PUSH
2504: EMPTY
2505: LIST
2506: LIST
2507: PUSH
2508: LD_INT 50
2510: PUSH
2511: EMPTY
2512: LIST
2513: PUSH
2514: EMPTY
2515: LIST
2516: LIST
2517: PPUSH
2518: CALL_OW 72
2522: ST_TO_ADDR
// lab := FilterUnitsInArea ( amBaseArea , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
2523: LD_ADDR_VAR 0 6
2527: PUSH
2528: LD_INT 1
2530: PPUSH
2531: LD_INT 2
2533: PUSH
2534: LD_INT 30
2536: PUSH
2537: LD_INT 6
2539: PUSH
2540: EMPTY
2541: LIST
2542: LIST
2543: PUSH
2544: LD_INT 30
2546: PUSH
2547: LD_INT 7
2549: PUSH
2550: EMPTY
2551: LIST
2552: LIST
2553: PUSH
2554: LD_INT 30
2556: PUSH
2557: LD_INT 8
2559: PUSH
2560: EMPTY
2561: LIST
2562: LIST
2563: PUSH
2564: EMPTY
2565: LIST
2566: LIST
2567: LIST
2568: LIST
2569: PPUSH
2570: CALL_OW 70
2574: ST_TO_ADDR
// if sci then
2575: LD_VAR 0 11
2579: IFFALSE 2738
// begin hurtUnits := UnitFilter ( amForces , [ [ f_inarea , amBaseArea ] , [ f_tag , tHeal ] ] ) ;
2581: LD_ADDR_VAR 0 13
2585: PUSH
2586: LD_EXP 27
2590: PPUSH
2591: LD_INT 95
2593: PUSH
2594: LD_INT 1
2596: PUSH
2597: EMPTY
2598: LIST
2599: LIST
2600: PUSH
2601: LD_INT 120
2603: PUSH
2604: LD_INT 1
2606: PUSH
2607: EMPTY
2608: LIST
2609: LIST
2610: PUSH
2611: EMPTY
2612: LIST
2613: LIST
2614: PPUSH
2615: CALL_OW 72
2619: ST_TO_ADDR
// if hurtUnits then
2620: LD_VAR 0 13
2624: IFFALSE 2685
// begin for i in sci do
2626: LD_ADDR_VAR 0 1
2630: PUSH
2631: LD_VAR 0 11
2635: PUSH
2636: FOR_IN
2637: IFFALSE 2681
// if IsInUnit ( i ) then
2639: LD_VAR 0 1
2643: PPUSH
2644: CALL_OW 310
2648: IFFALSE 2661
// ComExitBuilding ( i ) else
2650: LD_VAR 0 1
2654: PPUSH
2655: CALL_OW 122
2659: GO 2679
// ComHeal ( i , hurtUnits [ 1 ] ) ;
2661: LD_VAR 0 1
2665: PPUSH
2666: LD_VAR 0 13
2670: PUSH
2671: LD_INT 1
2673: ARRAY
2674: PPUSH
2675: CALL_OW 128
2679: GO 2636
2681: POP
2682: POP
// end else
2683: GO 2738
// if lab then
2685: LD_VAR 0 6
2689: IFFALSE 2738
// begin for i in sci do
2691: LD_ADDR_VAR 0 1
2695: PUSH
2696: LD_VAR 0 11
2700: PUSH
2701: FOR_IN
2702: IFFALSE 2736
// if not IsInUnit ( i ) then
2704: LD_VAR 0 1
2708: PPUSH
2709: CALL_OW 310
2713: NOT
2714: IFFALSE 2734
// ComEnterUnit ( i , lab [ 1 ] ) ;
2716: LD_VAR 0 1
2720: PPUSH
2721: LD_VAR 0 6
2725: PUSH
2726: LD_INT 1
2728: ARRAY
2729: PPUSH
2730: CALL_OW 120
2734: GO 2701
2736: POP
2737: POP
// end ; end ; eng := UnitFilter ( amForces , [ f_class , 2 ] ) ;
2738: LD_ADDR_VAR 0 7
2742: PUSH
2743: LD_EXP 27
2747: PPUSH
2748: LD_INT 25
2750: PUSH
2751: LD_INT 2
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PPUSH
2758: CALL_OW 72
2762: ST_TO_ADDR
// if eng then
2763: LD_VAR 0 7
2767: IFFALSE 3542
// begin for i in eng do
2769: LD_ADDR_VAR 0 1
2773: PUSH
2774: LD_VAR 0 7
2778: PUSH
2779: FOR_IN
2780: IFFALSE 3540
// begin tag := GetTag ( i ) ;
2782: LD_ADDR_VAR 0 8
2786: PUSH
2787: LD_VAR 0 1
2791: PPUSH
2792: CALL_OW 110
2796: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
2797: LD_VAR 0 1
2801: PPUSH
2802: CALL_OW 256
2806: PUSH
2807: LD_INT 800
2809: LESS
2810: PUSH
2811: LD_VAR 0 8
2815: PUSH
2816: LD_INT 1
2818: NONEQUAL
2819: AND
2820: IFFALSE 2870
// begin SetTag ( i , tHeal ) ;
2822: LD_VAR 0 1
2826: PPUSH
2827: LD_INT 1
2829: PPUSH
2830: CALL_OW 109
// ComMoveXY ( i , amHealPoint [ 1 ] , amHealPoint [ 2 ] ) ;
2834: LD_VAR 0 1
2838: PPUSH
2839: LD_EXP 30
2843: PUSH
2844: LD_INT 1
2846: ARRAY
2847: PPUSH
2848: LD_EXP 30
2852: PUSH
2853: LD_INT 2
2855: ARRAY
2856: PPUSH
2857: CALL_OW 111
// AddComHold ( i ) ;
2861: LD_VAR 0 1
2865: PPUSH
2866: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
2870: LD_VAR 0 8
2874: PUSH
2875: LD_INT 1
2877: EQUAL
2878: PUSH
2879: LD_VAR 0 1
2883: PPUSH
2884: CALL_OW 256
2888: PUSH
2889: LD_INT 1000
2891: EQUAL
2892: AND
2893: IFFALSE 2907
// SetTag ( i , 0 ) ;
2895: LD_VAR 0 1
2899: PPUSH
2900: LD_INT 0
2902: PPUSH
2903: CALL_OW 109
// if not tag then
2907: LD_VAR 0 8
2911: NOT
2912: IFFALSE 3080
// begin undone := FilterUnitsInArea ( amBaseArea , [ f_constructed ] ) ;
2914: LD_ADDR_VAR 0 4
2918: PUSH
2919: LD_INT 1
2921: PPUSH
2922: LD_INT 57
2924: PUSH
2925: EMPTY
2926: LIST
2927: PPUSH
2928: CALL_OW 70
2932: ST_TO_ADDR
// if undone then
2933: LD_VAR 0 4
2937: IFFALSE 2959
// begin ComComplete ( i , undone [ 1 ] ) ;
2939: LD_VAR 0 1
2943: PPUSH
2944: LD_VAR 0 4
2948: PUSH
2949: LD_INT 1
2951: ARRAY
2952: PPUSH
2953: CALL 28951 0 2
// continue ;
2957: GO 2779
// end ; if cr or tmp or Count ( amBuildings ) then
2959: LD_VAR 0 10
2963: PUSH
2964: LD_VAR 0 2
2968: OR
2969: PUSH
2970: LD_EXP 31
2974: PPUSH
2975: CALL 22853 0 1
2979: OR
2980: IFFALSE 3056
// begin if IsInUnit ( i ) then
2982: LD_VAR 0 1
2986: PPUSH
2987: CALL_OW 310
2991: IFFALSE 3002
// ComExitBuilding ( i ) ;
2993: LD_VAR 0 1
2997: PPUSH
2998: CALL_OW 122
// if tmp then
3002: LD_VAR 0 2
3006: IFFALSE 3022
// SetTag ( i , tRepair ) else
3008: LD_VAR 0 1
3012: PPUSH
3013: LD_INT 3
3015: PPUSH
3016: CALL_OW 109
3020: GO 3054
// if cr then
3022: LD_VAR 0 10
3026: IFFALSE 3042
// SetTag ( i , tCrates ) else
3028: LD_VAR 0 1
3032: PPUSH
3033: LD_INT 2
3035: PPUSH
3036: CALL_OW 109
3040: GO 3054
// SetTag ( i , tBuild ) ;
3042: LD_VAR 0 1
3046: PPUSH
3047: LD_INT 5
3049: PPUSH
3050: CALL_OW 109
// end else
3054: GO 3080
// if not IsInUnit ( i ) then
3056: LD_VAR 0 1
3060: PPUSH
3061: CALL_OW 310
3065: NOT
3066: IFFALSE 3080
// ComEnterUnit ( i , amBase ) ;
3068: LD_VAR 0 1
3072: PPUSH
3073: LD_INT 2
3075: PPUSH
3076: CALL_OW 120
// end ; if tag = tRepair then
3080: LD_VAR 0 8
3084: PUSH
3085: LD_INT 3
3087: EQUAL
3088: IFFALSE 3190
// begin if IsInUnit ( i ) then
3090: LD_VAR 0 1
3094: PPUSH
3095: CALL_OW 310
3099: IFFALSE 3112
// begin ComExitBuilding ( i ) ;
3101: LD_VAR 0 1
3105: PPUSH
3106: CALL_OW 122
// continue ;
3110: GO 2779
// end ; if not tmp then
3112: LD_VAR 0 2
3116: NOT
3117: IFFALSE 3133
// begin SetTag ( i , 0 ) ;
3119: LD_VAR 0 1
3123: PPUSH
3124: LD_INT 0
3126: PPUSH
3127: CALL_OW 109
// continue ;
3131: GO 2779
// end ; if not HasTask ( i ) then
3133: LD_VAR 0 1
3137: PPUSH
3138: CALL_OW 314
3142: NOT
3143: IFFALSE 3163
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
3145: LD_VAR 0 1
3149: PPUSH
3150: LD_VAR 0 2
3154: PUSH
3155: LD_INT 1
3157: ARRAY
3158: PPUSH
3159: CALL_OW 130
// if not IsInArea ( i , amBaseArea ) then
3163: LD_VAR 0 1
3167: PPUSH
3168: LD_INT 1
3170: PPUSH
3171: CALL_OW 308
3175: NOT
3176: IFFALSE 3190
// ComMoveToArea ( i , amBaseArea ) ;
3178: LD_VAR 0 1
3182: PPUSH
3183: LD_INT 1
3185: PPUSH
3186: CALL_OW 113
// end ; if tag = tBuild then
3190: LD_VAR 0 8
3194: PUSH
3195: LD_INT 5
3197: EQUAL
3198: IFFALSE 3393
// begin if IsInUnit ( i ) then
3200: LD_VAR 0 1
3204: PPUSH
3205: CALL_OW 310
3209: IFFALSE 3222
// begin ComExitBuilding ( i ) ;
3211: LD_VAR 0 1
3215: PPUSH
3216: CALL_OW 122
// continue ;
3220: GO 2779
// end ; if not Count ( amBuildings ) then
3222: LD_EXP 31
3226: PPUSH
3227: CALL 22853 0 1
3231: NOT
3232: IFFALSE 3250
// begin SetTag ( i , 0 ) ;
3234: LD_VAR 0 1
3238: PPUSH
3239: LD_INT 0
3241: PPUSH
3242: CALL_OW 109
// continue ;
3246: GO 2779
// end else
3248: GO 3287
// if not CanBeBuiltOnlyResources ( amBase , amBuildings [ 1 ] [ 1 ] ) then
3250: LD_INT 2
3252: PPUSH
3253: LD_EXP 31
3257: PUSH
3258: LD_INT 1
3260: ARRAY
3261: PUSH
3262: LD_INT 1
3264: ARRAY
3265: PPUSH
3266: CALL 62391 0 2
3270: NOT
3271: IFFALSE 3287
// begin SetTag ( i , 0 ) ;
3273: LD_VAR 0 1
3277: PPUSH
3278: LD_INT 0
3280: PPUSH
3281: CALL_OW 109
// continue ;
3285: GO 2779
// end ; undone := FilterUnitsInArea ( amBaseArea , [ f_constructed ] ) ;
3287: LD_ADDR_VAR 0 4
3291: PUSH
3292: LD_INT 1
3294: PPUSH
3295: LD_INT 57
3297: PUSH
3298: EMPTY
3299: LIST
3300: PPUSH
3301: CALL_OW 70
3305: ST_TO_ADDR
// if undone then
3306: LD_VAR 0 4
3310: IFFALSE 3332
// begin ComComplete ( i , undone [ 1 ] ) ;
3312: LD_VAR 0 1
3316: PPUSH
3317: LD_VAR 0 4
3321: PUSH
3322: LD_INT 1
3324: ARRAY
3325: PPUSH
3326: CALL 28951 0 2
// continue ;
3330: GO 2779
// end ; ComBuild ( i , amBuildings [ 1 ] [ 1 ] , amBuildings [ 1 ] [ 2 ] , amBuildings [ 1 ] [ 3 ] , amBuildings [ 1 ] [ 4 ] ) ;
3332: LD_VAR 0 1
3336: PPUSH
3337: LD_EXP 31
3341: PUSH
3342: LD_INT 1
3344: ARRAY
3345: PUSH
3346: LD_INT 1
3348: ARRAY
3349: PPUSH
3350: LD_EXP 31
3354: PUSH
3355: LD_INT 1
3357: ARRAY
3358: PUSH
3359: LD_INT 2
3361: ARRAY
3362: PPUSH
3363: LD_EXP 31
3367: PUSH
3368: LD_INT 1
3370: ARRAY
3371: PUSH
3372: LD_INT 3
3374: ARRAY
3375: PPUSH
3376: LD_EXP 31
3380: PUSH
3381: LD_INT 1
3383: ARRAY
3384: PUSH
3385: LD_INT 4
3387: ARRAY
3388: PPUSH
3389: CALL_OW 145
// end ; if tag = tCrates then
3393: LD_VAR 0 8
3397: PUSH
3398: LD_INT 2
3400: EQUAL
3401: IFFALSE 3538
// begin if IsInUnit ( i ) then
3403: LD_VAR 0 1
3407: PPUSH
3408: CALL_OW 310
3412: IFFALSE 3425
// begin ComExitBuilding ( i ) ;
3414: LD_VAR 0 1
3418: PPUSH
3419: CALL_OW 122
// continue ;
3423: GO 2779
// end ; if not cr then
3425: LD_VAR 0 10
3429: NOT
3430: IFFALSE 3446
// begin SetTag ( i , 0 ) ;
3432: LD_VAR 0 1
3436: PPUSH
3437: LD_INT 0
3439: PPUSH
3440: CALL_OW 109
// continue ;
3444: GO 2779
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
3446: LD_VAR 0 1
3450: PPUSH
3451: CALL_OW 314
3455: NOT
3456: PUSH
3457: LD_INT 81
3459: PUSH
3460: LD_VAR 0 5
3464: PUSH
3465: EMPTY
3466: LIST
3467: LIST
3468: PUSH
3469: LD_INT 92
3471: PUSH
3472: LD_VAR 0 10
3476: PUSH
3477: LD_INT 1
3479: ARRAY
3480: PUSH
3481: LD_VAR 0 10
3485: PUSH
3486: LD_INT 2
3488: ARRAY
3489: PUSH
3490: LD_INT 12
3492: PUSH
3493: EMPTY
3494: LIST
3495: LIST
3496: LIST
3497: LIST
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PPUSH
3503: CALL_OW 69
3507: NOT
3508: AND
3509: IFFALSE 3538
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
3511: LD_VAR 0 1
3515: PPUSH
3516: LD_VAR 0 10
3520: PUSH
3521: LD_INT 1
3523: ARRAY
3524: PPUSH
3525: LD_VAR 0 10
3529: PUSH
3530: LD_INT 2
3532: ARRAY
3533: PPUSH
3534: CALL_OW 117
// end ; end ;
3538: GO 2779
3540: POP
3541: POP
// end ; sol := UnitFilter ( amForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] ] , [ f_ok ] ] ) union amCommander ;
3542: LD_ADDR_VAR 0 12
3546: PUSH
3547: LD_EXP 27
3551: PPUSH
3552: LD_INT 2
3554: PUSH
3555: LD_INT 25
3557: PUSH
3558: LD_INT 1
3560: PUSH
3561: EMPTY
3562: LIST
3563: LIST
3564: PUSH
3565: LD_INT 25
3567: PUSH
3568: LD_INT 5
3570: PUSH
3571: EMPTY
3572: LIST
3573: LIST
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: LIST
3579: PUSH
3580: LD_INT 50
3582: PUSH
3583: EMPTY
3584: LIST
3585: PUSH
3586: EMPTY
3587: LIST
3588: LIST
3589: PPUSH
3590: CALL_OW 72
3594: PUSH
3595: LD_EXP 33
3599: UNION
3600: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( amBaseArea , [ f_enemy , side ] ) ;
3601: LD_ADDR_VAR 0 14
3605: PUSH
3606: LD_INT 1
3608: PPUSH
3609: LD_INT 81
3611: PUSH
3612: LD_VAR 0 5
3616: PUSH
3617: EMPTY
3618: LIST
3619: LIST
3620: PPUSH
3621: CALL_OW 70
3625: ST_TO_ADDR
// if sol then
3626: LD_VAR 0 12
3630: IFFALSE 4181
// begin if enemyInBase then
3632: LD_VAR 0 14
3636: IFFALSE 3781
// begin for i in sol do
3638: LD_ADDR_VAR 0 1
3642: PUSH
3643: LD_VAR 0 12
3647: PUSH
3648: FOR_IN
3649: IFFALSE 3777
// begin tw := IsInUnit ( i ) ;
3651: LD_ADDR_VAR 0 9
3655: PUSH
3656: LD_VAR 0 1
3660: PPUSH
3661: CALL_OW 310
3665: ST_TO_ADDR
// if tw then
3666: LD_VAR 0 9
3670: IFFALSE 3751
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
3672: LD_VAR 0 9
3676: PUSH
3677: LD_INT 22
3679: PUSH
3680: LD_VAR 0 5
3684: PUSH
3685: EMPTY
3686: LIST
3687: LIST
3688: PUSH
3689: LD_INT 101
3691: PUSH
3692: LD_INT 2
3694: PUSH
3695: EMPTY
3696: LIST
3697: LIST
3698: PUSH
3699: LD_INT 2
3701: PUSH
3702: LD_INT 30
3704: PUSH
3705: LD_INT 32
3707: PUSH
3708: EMPTY
3709: LIST
3710: LIST
3711: PUSH
3712: LD_INT 30
3714: PUSH
3715: LD_INT 31
3717: PUSH
3718: EMPTY
3719: LIST
3720: LIST
3721: PUSH
3722: EMPTY
3723: LIST
3724: LIST
3725: LIST
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: LIST
3731: PPUSH
3732: CALL_OW 69
3736: IN
3737: NOT
3738: IFFALSE 3749
// ComExitBuilding ( i ) ;
3740: LD_VAR 0 1
3744: PPUSH
3745: CALL_OW 122
// end else
3749: GO 3775
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
3751: LD_VAR 0 1
3755: PPUSH
3756: LD_VAR 0 14
3760: PPUSH
3761: LD_VAR 0 1
3765: PPUSH
3766: CALL_OW 74
3770: PPUSH
3771: CALL_OW 115
// end ;
3775: GO 3648
3777: POP
3778: POP
// end else
3779: GO 4181
// begin empty := FilterUnitsInArea ( amBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
3781: LD_ADDR_VAR 0 15
3785: PUSH
3786: LD_INT 1
3788: PPUSH
3789: LD_INT 3
3791: PUSH
3792: LD_INT 62
3794: PUSH
3795: EMPTY
3796: LIST
3797: PUSH
3798: EMPTY
3799: LIST
3800: LIST
3801: PUSH
3802: LD_INT 2
3804: PUSH
3805: LD_INT 30
3807: PUSH
3808: LD_INT 32
3810: PUSH
3811: EMPTY
3812: LIST
3813: LIST
3814: PUSH
3815: LD_INT 30
3817: PUSH
3818: LD_INT 4
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: PUSH
3825: LD_INT 30
3827: PUSH
3828: LD_INT 5
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: PUSH
3835: LD_INT 30
3837: PUSH
3838: LD_INT 31
3840: PUSH
3841: EMPTY
3842: LIST
3843: LIST
3844: PUSH
3845: EMPTY
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: PUSH
3852: EMPTY
3853: LIST
3854: LIST
3855: PPUSH
3856: CALL_OW 70
3860: ST_TO_ADDR
// if empty then
3861: LD_VAR 0 15
3865: IFFALSE 3882
// empty := ReverseArray ( empty ) ;
3867: LD_ADDR_VAR 0 15
3871: PUSH
3872: LD_VAR 0 15
3876: PPUSH
3877: CALL 53729 0 1
3881: ST_TO_ADDR
// for i in sol do
3882: LD_ADDR_VAR 0 1
3886: PUSH
3887: LD_VAR 0 12
3891: PUSH
3892: FOR_IN
3893: IFFALSE 4179
// begin tag := GetTag ( i ) ;
3895: LD_ADDR_VAR 0 8
3899: PUSH
3900: LD_VAR 0 1
3904: PPUSH
3905: CALL_OW 110
3909: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
3910: LD_VAR 0 1
3914: PPUSH
3915: CALL_OW 256
3919: PUSH
3920: LD_INT 1000
3922: LESS
3923: PUSH
3924: LD_VAR 0 8
3928: PUSH
3929: LD_INT 1
3931: NONEQUAL
3932: AND
3933: IFFALSE 3985
// begin SetTag ( i , tHeal ) ;
3935: LD_VAR 0 1
3939: PPUSH
3940: LD_INT 1
3942: PPUSH
3943: CALL_OW 109
// ComMoveXY ( i , amHealPoint [ 1 ] , amHealPoint [ 2 ] ) ;
3947: LD_VAR 0 1
3951: PPUSH
3952: LD_EXP 30
3956: PUSH
3957: LD_INT 1
3959: ARRAY
3960: PPUSH
3961: LD_EXP 30
3965: PUSH
3966: LD_INT 2
3968: ARRAY
3969: PPUSH
3970: CALL_OW 111
// AddComHold ( i ) ;
3974: LD_VAR 0 1
3978: PPUSH
3979: CALL_OW 200
// continue ;
3983: GO 3892
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
3985: LD_VAR 0 1
3989: PPUSH
3990: CALL_OW 256
3994: PUSH
3995: LD_INT 1000
3997: EQUAL
3998: PUSH
3999: LD_VAR 0 8
4003: PUSH
4004: LD_INT 1
4006: EQUAL
4007: AND
4008: IFFALSE 4024
// begin SetTag ( i , 0 ) ;
4010: LD_VAR 0 1
4014: PPUSH
4015: LD_INT 0
4017: PPUSH
4018: CALL_OW 109
// continue ;
4022: GO 3892
// end ; if not IsInArea ( i , amBaseArea ) and not IsInUnit ( i ) then
4024: LD_VAR 0 1
4028: PPUSH
4029: LD_INT 1
4031: PPUSH
4032: CALL_OW 308
4036: NOT
4037: PUSH
4038: LD_VAR 0 1
4042: PPUSH
4043: CALL_OW 310
4047: NOT
4048: AND
4049: IFFALSE 4063
// ComMoveToArea ( i , amBaseArea ) ;
4051: LD_VAR 0 1
4055: PPUSH
4056: LD_INT 1
4058: PPUSH
4059: CALL_OW 113
// if HasTask ( i ) then
4063: LD_VAR 0 1
4067: PPUSH
4068: CALL_OW 314
4072: IFFALSE 4076
// continue ;
4074: GO 3892
// if not IsInUnit ( i ) and not tag and empty then
4076: LD_VAR 0 1
4080: PPUSH
4081: CALL_OW 310
4085: NOT
4086: PUSH
4087: LD_VAR 0 8
4091: NOT
4092: AND
4093: PUSH
4094: LD_VAR 0 15
4098: AND
4099: IFFALSE 4177
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
4101: LD_VAR 0 1
4105: PPUSH
4106: LD_VAR 0 15
4110: PUSH
4111: LD_INT 1
4113: ARRAY
4114: PPUSH
4115: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
4119: LD_VAR 0 15
4123: PUSH
4124: LD_INT 1
4126: ARRAY
4127: PPUSH
4128: CALL_OW 266
4132: PUSH
4133: LD_INT 5
4135: EQUAL
4136: PUSH
4137: LD_INT 50
4139: PPUSH
4140: CALL_OW 13
4144: AND
4145: IFFALSE 4159
// AddComChangeProfession ( i , class_sniper ) ;
4147: LD_VAR 0 1
4151: PPUSH
4152: LD_INT 5
4154: PPUSH
4155: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
4159: LD_ADDR_VAR 0 15
4163: PUSH
4164: LD_VAR 0 15
4168: PPUSH
4169: LD_INT 1
4171: PPUSH
4172: CALL_OW 3
4176: ST_TO_ADDR
// end ; end ;
4177: GO 3892
4179: POP
4180: POP
// end ; end ; end ;
4181: PPOPN 18
4183: END
// every 0 0$2 trigger IsOk ( amCargo ) and amScriptActive do var cr , enemyInArea ;
4184: LD_EXP 34
4188: PPUSH
4189: CALL_OW 302
4193: PUSH
4194: LD_EXP 3
4198: AND
4199: IFFALSE 4481
4201: GO 4203
4203: DISABLE
4204: LD_INT 0
4206: PPUSH
4207: PPUSH
// begin enable ;
4208: ENABLE
// enemyInArea := FilterUnitsInArea ( amBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
4209: LD_ADDR_VAR 0 2
4213: PUSH
4214: LD_INT 1
4216: PPUSH
4217: LD_INT 81
4219: PUSH
4220: LD_INT 1
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: PUSH
4227: LD_INT 50
4229: PUSH
4230: EMPTY
4231: LIST
4232: PUSH
4233: EMPTY
4234: LIST
4235: LIST
4236: PPUSH
4237: CALL_OW 70
4241: ST_TO_ADDR
// cr := GetListOfCratesInArea ( cratesWestArea ) ;
4242: LD_ADDR_VAR 0 1
4246: PUSH
4247: LD_INT 17
4249: PPUSH
4250: CALL_OW 435
4254: ST_TO_ADDR
// if GetFuel ( amCargo ) < 10 and not See ( 2 , amCargo ) and GetEngine ( amCargo ) = engine_combustion then
4255: LD_EXP 34
4259: PPUSH
4260: CALL_OW 261
4264: PUSH
4265: LD_INT 10
4267: LESS
4268: PUSH
4269: LD_INT 2
4271: PPUSH
4272: LD_EXP 34
4276: PPUSH
4277: CALL_OW 292
4281: NOT
4282: AND
4283: PUSH
4284: LD_EXP 34
4288: PPUSH
4289: CALL_OW 262
4293: PUSH
4294: LD_INT 1
4296: EQUAL
4297: AND
4298: IFFALSE 4312
// SetFuel ( amCargo , 100 ) ;
4300: LD_EXP 34
4304: PPUSH
4305: LD_INT 100
4307: PPUSH
4308: CALL_OW 240
// if not HasTask ( amCargo ) and GetCargo ( amCargo , mat_cans ) < 100 and not enemyInArea then
4312: LD_EXP 34
4316: PPUSH
4317: CALL_OW 314
4321: NOT
4322: PUSH
4323: LD_EXP 34
4327: PPUSH
4328: LD_INT 1
4330: PPUSH
4331: CALL_OW 289
4335: PUSH
4336: LD_INT 100
4338: LESS
4339: AND
4340: PUSH
4341: LD_VAR 0 2
4345: NOT
4346: AND
4347: IFFALSE 4413
// begin if cr then
4349: LD_VAR 0 1
4353: IFFALSE 4384
// ComCollect ( amCargo , cr [ 1 ] , cr [ 2 ] ) else
4355: LD_EXP 34
4359: PPUSH
4360: LD_VAR 0 1
4364: PUSH
4365: LD_INT 1
4367: ARRAY
4368: PPUSH
4369: LD_VAR 0 1
4373: PUSH
4374: LD_INT 2
4376: ARRAY
4377: PPUSH
4378: CALL_OW 117
4382: GO 4411
// if not IsInArea ( amCargo , cratesWestArea ) then
4384: LD_EXP 34
4388: PPUSH
4389: LD_INT 17
4391: PPUSH
4392: CALL_OW 308
4396: NOT
4397: IFFALSE 4411
// ComMoveToArea ( amCargo , cratesWestArea ) ;
4399: LD_EXP 34
4403: PPUSH
4404: LD_INT 17
4406: PPUSH
4407: CALL_OW 113
// exit ;
4411: GO 4481
// end ; if enemyInArea and not IsInArea ( amCargo , amBaseArea ) then
4413: LD_VAR 0 2
4417: PUSH
4418: LD_EXP 34
4422: PPUSH
4423: LD_INT 1
4425: PPUSH
4426: CALL_OW 308
4430: NOT
4431: AND
4432: IFFALSE 4451
// ComMoveXY ( amCargo , 93 , 137 ) else
4434: LD_EXP 34
4438: PPUSH
4439: LD_INT 93
4441: PPUSH
4442: LD_INT 137
4444: PPUSH
4445: CALL_OW 111
4449: GO 4481
// if GetCargo ( amCargo , mat_cans ) = 100 then
4451: LD_EXP 34
4455: PPUSH
4456: LD_INT 1
4458: PPUSH
4459: CALL_OW 289
4463: PUSH
4464: LD_INT 100
4466: EQUAL
4467: IFFALSE 4481
// ComGive ( amCargo , amBase ) ;
4469: LD_EXP 34
4473: PPUSH
4474: LD_INT 2
4476: PPUSH
4477: CALL_OW 161
// end ;
4481: PPOPN 2
4483: END
// every 0 0$2 trigger amScriptActive and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) do var i , tmp , tmp2 ;
4484: LD_EXP 3
4488: PUSH
4489: LD_INT 22
4491: PUSH
4492: LD_INT 1
4494: PUSH
4495: EMPTY
4496: LIST
4497: LIST
4498: PUSH
4499: LD_INT 3
4501: PUSH
4502: LD_INT 60
4504: PUSH
4505: EMPTY
4506: LIST
4507: PUSH
4508: EMPTY
4509: LIST
4510: LIST
4511: PUSH
4512: LD_INT 50
4514: PUSH
4515: EMPTY
4516: LIST
4517: PUSH
4518: LD_INT 34
4520: PUSH
4521: LD_INT 13
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: LIST
4532: LIST
4533: PPUSH
4534: CALL_OW 69
4538: AND
4539: PUSH
4540: LD_INT 22
4542: PUSH
4543: LD_INT 1
4545: PUSH
4546: EMPTY
4547: LIST
4548: LIST
4549: PUSH
4550: LD_INT 3
4552: PUSH
4553: LD_INT 24
4555: PUSH
4556: LD_INT 1000
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: PUSH
4567: LD_INT 21
4569: PUSH
4570: LD_INT 3
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: LIST
4581: PPUSH
4582: CALL_OW 69
4586: AND
4587: IFFALSE 4820
4589: GO 4591
4591: DISABLE
4592: LD_INT 0
4594: PPUSH
4595: PPUSH
4596: PPUSH
// begin enable ;
4597: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
4598: LD_ADDR_VAR 0 2
4602: PUSH
4603: LD_INT 22
4605: PUSH
4606: LD_INT 1
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: PUSH
4613: LD_INT 3
4615: PUSH
4616: LD_INT 24
4618: PUSH
4619: LD_INT 1000
4621: PUSH
4622: EMPTY
4623: LIST
4624: LIST
4625: PUSH
4626: EMPTY
4627: LIST
4628: LIST
4629: PUSH
4630: LD_INT 21
4632: PUSH
4633: LD_INT 3
4635: PUSH
4636: EMPTY
4637: LIST
4638: LIST
4639: PUSH
4640: EMPTY
4641: LIST
4642: LIST
4643: LIST
4644: PPUSH
4645: CALL_OW 69
4649: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 600 ] ] , [ f_type , unit_building ] ] ) ;
4650: LD_ADDR_VAR 0 3
4654: PUSH
4655: LD_INT 22
4657: PUSH
4658: LD_INT 1
4660: PUSH
4661: EMPTY
4662: LIST
4663: LIST
4664: PUSH
4665: LD_INT 3
4667: PUSH
4668: LD_INT 24
4670: PUSH
4671: LD_INT 600
4673: PUSH
4674: EMPTY
4675: LIST
4676: LIST
4677: PUSH
4678: EMPTY
4679: LIST
4680: LIST
4681: PUSH
4682: LD_INT 21
4684: PUSH
4685: LD_INT 3
4687: PUSH
4688: EMPTY
4689: LIST
4690: LIST
4691: PUSH
4692: EMPTY
4693: LIST
4694: LIST
4695: LIST
4696: PPUSH
4697: CALL_OW 69
4701: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
4702: LD_ADDR_VAR 0 1
4706: PUSH
4707: LD_INT 22
4709: PUSH
4710: LD_INT 1
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: PUSH
4717: LD_INT 3
4719: PUSH
4720: LD_INT 60
4722: PUSH
4723: EMPTY
4724: LIST
4725: PUSH
4726: EMPTY
4727: LIST
4728: LIST
4729: PUSH
4730: LD_INT 50
4732: PUSH
4733: EMPTY
4734: LIST
4735: PUSH
4736: LD_INT 34
4738: PUSH
4739: LD_INT 13
4741: PUSH
4742: EMPTY
4743: LIST
4744: LIST
4745: PUSH
4746: EMPTY
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: PPUSH
4752: CALL_OW 69
4756: PUSH
4757: FOR_IN
4758: IFFALSE 4818
// begin if tmp2 then
4760: LD_VAR 0 3
4764: IFFALSE 4792
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp2 , i ) ) else
4766: LD_VAR 0 1
4770: PPUSH
4771: LD_VAR 0 3
4775: PPUSH
4776: LD_VAR 0 1
4780: PPUSH
4781: CALL_OW 74
4785: PPUSH
4786: CALL_OW 130
4790: GO 4816
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
4792: LD_VAR 0 1
4796: PPUSH
4797: LD_VAR 0 2
4801: PPUSH
4802: LD_VAR 0 1
4806: PPUSH
4807: CALL_OW 74
4811: PPUSH
4812: CALL_OW 130
// end ;
4816: GO 4757
4818: POP
4819: POP
// end ;
4820: PPOPN 3
4822: END
// every 0 0$2 trigger amPatrol and gameActive and not americanDestroyed do var i , j , points , x , y , tag , enemy ;
4823: LD_EXP 35
4827: PUSH
4828: LD_EXP 19
4832: AND
4833: PUSH
4834: LD_EXP 11
4838: NOT
4839: AND
4840: IFFALSE 5165
4842: GO 4844
4844: DISABLE
4845: LD_INT 0
4847: PPUSH
4848: PPUSH
4849: PPUSH
4850: PPUSH
4851: PPUSH
4852: PPUSH
4853: PPUSH
// begin enable ;
4854: ENABLE
// points := [ [ patrol1aArea , patrol1bArea ] , [ patrol2aArea , patrol2bArea , patrol2cArea , patrol2dArea , patrol2bArea ] , [ patrol3aArea , patrol3bArea , patrol3cArea , patrol3dArea , patrol3eArea , patrol3fArea , patrol3gArea , patrol3hArea ] ] ;
4855: LD_ADDR_VAR 0 3
4859: PUSH
4860: LD_INT 30
4862: PUSH
4863: LD_INT 31
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: PUSH
4870: LD_INT 32
4872: PUSH
4873: LD_INT 33
4875: PUSH
4876: LD_INT 34
4878: PUSH
4879: LD_INT 35
4881: PUSH
4882: LD_INT 33
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: PUSH
4892: LD_INT 36
4894: PUSH
4895: LD_INT 37
4897: PUSH
4898: LD_INT 38
4900: PUSH
4901: LD_INT 39
4903: PUSH
4904: LD_INT 40
4906: PUSH
4907: LD_INT 41
4909: PUSH
4910: LD_INT 42
4912: PUSH
4913: LD_INT 43
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: PUSH
4926: EMPTY
4927: LIST
4928: LIST
4929: LIST
4930: ST_TO_ADDR
// for i in amPatrol do
4931: LD_ADDR_VAR 0 1
4935: PUSH
4936: LD_EXP 35
4940: PUSH
4941: FOR_IN
4942: IFFALSE 5163
// begin if See ( 2 , i ) then
4944: LD_INT 2
4946: PPUSH
4947: LD_VAR 0 1
4951: PPUSH
4952: CALL_OW 292
4956: IFFALSE 5059
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ;
4958: LD_ADDR_VAR 0 7
4962: PUSH
4963: LD_INT 22
4965: PUSH
4966: LD_INT 2
4968: PUSH
4969: EMPTY
4970: LIST
4971: LIST
4972: PPUSH
4973: CALL_OW 69
4977: PPUSH
4978: LD_VAR 0 1
4982: PPUSH
4983: CALL_OW 74
4987: ST_TO_ADDR
// if enemy then
4988: LD_VAR 0 7
4992: IFFALSE 5059
// begin x := GetX ( enemy ) ;
4994: LD_ADDR_VAR 0 4
4998: PUSH
4999: LD_VAR 0 7
5003: PPUSH
5004: CALL_OW 250
5008: ST_TO_ADDR
// y := GetY ( enemy ) ;
5009: LD_ADDR_VAR 0 5
5013: PUSH
5014: LD_VAR 0 7
5018: PPUSH
5019: CALL_OW 251
5023: ST_TO_ADDR
// if ValidHex ( x , y ) then
5024: LD_VAR 0 4
5028: PPUSH
5029: LD_VAR 0 5
5033: PPUSH
5034: CALL_OW 488
5038: IFFALSE 5059
// ComAgressiveMove ( i , x , y ) ;
5040: LD_VAR 0 1
5044: PPUSH
5045: LD_VAR 0 4
5049: PPUSH
5050: LD_VAR 0 5
5054: PPUSH
5055: CALL_OW 114
// end ; end ; if HasTask ( i ) then
5059: LD_VAR 0 1
5063: PPUSH
5064: CALL_OW 314
5068: IFFALSE 5072
// continue ;
5070: GO 4941
// tag := GetTag ( i ) ;
5072: LD_ADDR_VAR 0 6
5076: PUSH
5077: LD_VAR 0 1
5081: PPUSH
5082: CALL_OW 110
5086: ST_TO_ADDR
// for j := 1 to points [ tag ] do
5087: LD_ADDR_VAR 0 2
5091: PUSH
5092: DOUBLE
5093: LD_INT 1
5095: DEC
5096: ST_TO_ADDR
5097: LD_VAR 0 3
5101: PUSH
5102: LD_VAR 0 6
5106: ARRAY
5107: PUSH
5108: FOR_TO
5109: IFFALSE 5159
// begin AddComMoveToArea ( i , points [ tag ] [ j ] ) ;
5111: LD_VAR 0 1
5115: PPUSH
5116: LD_VAR 0 3
5120: PUSH
5121: LD_VAR 0 6
5125: ARRAY
5126: PUSH
5127: LD_VAR 0 2
5131: ARRAY
5132: PPUSH
5133: CALL_OW 173
// AddComWait ( i , rand ( 0 0$5 , 0 0$11 ) ) ;
5137: LD_VAR 0 1
5141: PPUSH
5142: LD_INT 175
5144: PPUSH
5145: LD_INT 385
5147: PPUSH
5148: CALL_OW 12
5152: PPUSH
5153: CALL_OW 202
// end ;
5157: GO 5108
5159: POP
5160: POP
// end ;
5161: GO 4941
5163: POP
5164: POP
// end ;
5165: PPOPN 7
5167: END
// every 10 10$00 trigger Count ( amTanks ) < 5 and amScriptActive and spotByAmerican and spotArabianBase do var i , parts , part ;
5168: LD_EXP 32
5172: PPUSH
5173: CALL 22853 0 1
5177: PUSH
5178: LD_INT 5
5180: LESS
5181: PUSH
5182: LD_EXP 3
5186: AND
5187: PUSH
5188: LD_EXP 8
5192: AND
5193: PUSH
5194: LD_EXP 7
5198: AND
5199: IFFALSE 5459
5201: GO 5203
5203: DISABLE
5204: LD_INT 0
5206: PPUSH
5207: PPUSH
5208: PPUSH
// begin enable ;
5209: ENABLE
// parts := [ [ us_medium_tracked , us_laser ] , [ us_heavy_tracked , us_laser ] , [ us_heavy_tracked , us_heavy_gun ] , [ us_medium_tracked , us_double_gun ] , [ us_medium_wheeled , us_gatling_gun ] , [ us_light_wheeled , us_machine_gun ] ] ;
5210: LD_ADDR_VAR 0 2
5214: PUSH
5215: LD_INT 3
5217: PUSH
5218: LD_INT 9
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: PUSH
5225: LD_INT 4
5227: PUSH
5228: LD_INT 9
5230: PUSH
5231: EMPTY
5232: LIST
5233: LIST
5234: PUSH
5235: LD_INT 4
5237: PUSH
5238: LD_INT 6
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: PUSH
5245: LD_INT 3
5247: PUSH
5248: LD_INT 5
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: PUSH
5255: LD_INT 2
5257: PUSH
5258: LD_INT 4
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PUSH
5265: LD_INT 1
5267: PUSH
5268: LD_INT 2
5270: PUSH
5271: EMPTY
5272: LIST
5273: LIST
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: LIST
5282: ST_TO_ADDR
// if americanWave > [ 5 , 6 , 7 , 8 ] [ Difficulty ] then
5283: LD_EXP 22
5287: PUSH
5288: LD_INT 5
5290: PUSH
5291: LD_INT 6
5293: PUSH
5294: LD_INT 7
5296: PUSH
5297: LD_INT 8
5299: PUSH
5300: EMPTY
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: PUSH
5306: LD_OWVAR 67
5310: ARRAY
5311: GREATER
5312: IFFALSE 5343
// americanWave := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
5314: LD_ADDR_EXP 22
5318: PUSH
5319: LD_INT 5
5321: PUSH
5322: LD_INT 6
5324: PUSH
5325: LD_INT 7
5327: PUSH
5328: LD_INT 8
5330: PUSH
5331: EMPTY
5332: LIST
5333: LIST
5334: LIST
5335: LIST
5336: PUSH
5337: LD_OWVAR 67
5341: ARRAY
5342: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] + americanWave do
5343: LD_ADDR_VAR 0 1
5347: PUSH
5348: DOUBLE
5349: LD_INT 1
5351: DEC
5352: ST_TO_ADDR
5353: LD_INT 3
5355: PUSH
5356: LD_INT 4
5358: PUSH
5359: LD_INT 5
5361: PUSH
5362: LD_INT 6
5364: PUSH
5365: EMPTY
5366: LIST
5367: LIST
5368: LIST
5369: LIST
5370: PUSH
5371: LD_OWVAR 67
5375: ARRAY
5376: PUSH
5377: LD_EXP 22
5381: PLUS
5382: PUSH
5383: FOR_TO
5384: IFFALSE 5457
// begin part := parts [ rand ( 1 , parts ) ] ;
5386: LD_ADDR_VAR 0 3
5390: PUSH
5391: LD_VAR 0 2
5395: PUSH
5396: LD_INT 1
5398: PPUSH
5399: LD_VAR 0 2
5403: PPUSH
5404: CALL_OW 12
5408: ARRAY
5409: ST_TO_ADDR
// amConstructList := Join ( amConstructList , [ part [ 1 ] , engine_combustion , control_remote , part [ 2 ] ] ) end ;
5410: LD_ADDR_EXP 29
5414: PUSH
5415: LD_EXP 29
5419: PPUSH
5420: LD_VAR 0 3
5424: PUSH
5425: LD_INT 1
5427: ARRAY
5428: PUSH
5429: LD_INT 1
5431: PUSH
5432: LD_INT 2
5434: PUSH
5435: LD_VAR 0 3
5439: PUSH
5440: LD_INT 2
5442: ARRAY
5443: PUSH
5444: EMPTY
5445: LIST
5446: LIST
5447: LIST
5448: LIST
5449: PPUSH
5450: CALL 58462 0 2
5454: ST_TO_ADDR
5455: GO 5383
5457: POP
5458: POP
// end ;
5459: PPOPN 3
5461: END
// every 3 3$00 trigger not americanDestroyed and Count ( amTanks ) and spotByAmerican and spotArabianBase do var i , tmp , tmp2 ;
5462: LD_EXP 11
5466: NOT
5467: PUSH
5468: LD_EXP 32
5472: PPUSH
5473: CALL 22853 0 1
5477: AND
5478: PUSH
5479: LD_EXP 8
5483: AND
5484: PUSH
5485: LD_EXP 7
5489: AND
5490: IFFALSE 5839
5492: GO 5494
5494: DISABLE
5495: LD_INT 0
5497: PPUSH
5498: PPUSH
5499: PPUSH
// begin enable ;
5500: ENABLE
// tmp := UnitFilter ( amTanks , [ [ f_linked ] , [ f_ok ] ] ) ;
5501: LD_ADDR_VAR 0 2
5505: PUSH
5506: LD_EXP 32
5510: PPUSH
5511: LD_INT 61
5513: PUSH
5514: EMPTY
5515: LIST
5516: PUSH
5517: LD_INT 50
5519: PUSH
5520: EMPTY
5521: LIST
5522: PUSH
5523: EMPTY
5524: LIST
5525: LIST
5526: PPUSH
5527: CALL_OW 72
5531: ST_TO_ADDR
// amTanks := amTanks diff tmp ;
5532: LD_ADDR_EXP 32
5536: PUSH
5537: LD_EXP 32
5541: PUSH
5542: LD_VAR 0 2
5546: DIFF
5547: ST_TO_ADDR
// if not tmp then
5548: LD_VAR 0 2
5552: NOT
5553: IFFALSE 5557
// exit ;
5555: GO 5839
// tmp2 := UnitFilter ( tmp , [ f_weapon , us_machine_gun ] ) ;
5557: LD_ADDR_VAR 0 3
5561: PUSH
5562: LD_VAR 0 2
5566: PPUSH
5567: LD_INT 34
5569: PUSH
5570: LD_INT 2
5572: PUSH
5573: EMPTY
5574: LIST
5575: LIST
5576: PPUSH
5577: CALL_OW 72
5581: ST_TO_ADDR
// if tmp2 then
5582: LD_VAR 0 3
5586: IFFALSE 5604
// tmp := tmp diff tmp2 ;
5588: LD_ADDR_VAR 0 2
5592: PUSH
5593: LD_VAR 0 2
5597: PUSH
5598: LD_VAR 0 3
5602: DIFF
5603: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5604: LD_INT 35
5606: PPUSH
5607: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
5611: LD_ADDR_VAR 0 2
5615: PUSH
5616: LD_VAR 0 2
5620: PPUSH
5621: LD_INT 50
5623: PUSH
5624: EMPTY
5625: LIST
5626: PPUSH
5627: CALL_OW 72
5631: ST_TO_ADDR
// for i in tmp do
5632: LD_ADDR_VAR 0 1
5636: PUSH
5637: LD_VAR 0 2
5641: PUSH
5642: FOR_IN
5643: IFFALSE 5691
// AgressiveMove ( i , [ [ 187 , 114 ] , [ 203 , 113 ] , [ 218 , 108 ] ] ) ;
5645: LD_VAR 0 1
5649: PPUSH
5650: LD_INT 187
5652: PUSH
5653: LD_INT 114
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: PUSH
5660: LD_INT 203
5662: PUSH
5663: LD_INT 113
5665: PUSH
5666: EMPTY
5667: LIST
5668: LIST
5669: PUSH
5670: LD_INT 218
5672: PUSH
5673: LD_INT 108
5675: PUSH
5676: EMPTY
5677: LIST
5678: LIST
5679: PUSH
5680: EMPTY
5681: LIST
5682: LIST
5683: LIST
5684: PPUSH
5685: CALL 61072 0 2
5689: GO 5642
5691: POP
5692: POP
// tmp2 := UnitFilter ( tmp2 , [ f_ok ] ) ;
5693: LD_ADDR_VAR 0 3
5697: PUSH
5698: LD_VAR 0 3
5702: PPUSH
5703: LD_INT 50
5705: PUSH
5706: EMPTY
5707: LIST
5708: PPUSH
5709: CALL_OW 72
5713: ST_TO_ADDR
// for i in tmp2 do
5714: LD_ADDR_VAR 0 1
5718: PUSH
5719: LD_VAR 0 3
5723: PUSH
5724: FOR_IN
5725: IFFALSE 5815
// if GetDistUnitXY ( i , 242 , 105 ) > 12 then
5727: LD_VAR 0 1
5731: PPUSH
5732: LD_INT 242
5734: PPUSH
5735: LD_INT 105
5737: PPUSH
5738: CALL_OW 297
5742: PUSH
5743: LD_INT 12
5745: GREATER
5746: IFFALSE 5765
// ComMoveXY ( i , 242 , 105 ) else
5748: LD_VAR 0 1
5752: PPUSH
5753: LD_INT 242
5755: PPUSH
5756: LD_INT 105
5758: PPUSH
5759: CALL_OW 111
5763: GO 5813
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_type , unit_human ] ] ) , i ) ) ;
5765: LD_VAR 0 1
5769: PPUSH
5770: LD_INT 81
5772: PUSH
5773: LD_INT 1
5775: PUSH
5776: EMPTY
5777: LIST
5778: LIST
5779: PUSH
5780: LD_INT 21
5782: PUSH
5783: LD_INT 1
5785: PUSH
5786: EMPTY
5787: LIST
5788: LIST
5789: PUSH
5790: EMPTY
5791: LIST
5792: LIST
5793: PPUSH
5794: CALL_OW 69
5798: PPUSH
5799: LD_VAR 0 1
5803: PPUSH
5804: CALL_OW 74
5808: PPUSH
5809: CALL_OW 115
5813: GO 5724
5815: POP
5816: POP
// until not tmp ;
5817: LD_VAR 0 2
5821: NOT
5822: IFFALSE 5604
// americanWave := Inc ( americanWave ) ;
5824: LD_ADDR_EXP 22
5828: PUSH
5829: LD_EXP 22
5833: PPUSH
5834: CALL 59823 0 1
5838: ST_TO_ADDR
// end ; end_of_file
5839: PPOPN 3
5841: END
// export Farmer ; export legForces , legEForces , legTech , legConstructList , legHealPoint , legBuildings , legTanks , legRTanks , legCargo ; export function PrepareLegion ; var i , j , b , un , skill , sources ; begin
5842: LD_INT 0
5844: PPUSH
5845: PPUSH
5846: PPUSH
5847: PPUSH
5848: PPUSH
5849: PPUSH
5850: PPUSH
// uc_side := 8 ;
5851: LD_ADDR_OWVAR 20
5855: PUSH
5856: LD_INT 8
5858: ST_TO_ADDR
// uc_nation := nation_arabian ;
5859: LD_ADDR_OWVAR 21
5863: PUSH
5864: LD_INT 2
5866: ST_TO_ADDR
// legForces := [ ] ;
5867: LD_ADDR_EXP 37
5871: PUSH
5872: EMPTY
5873: ST_TO_ADDR
// legEForces := [ ] ;
5874: LD_ADDR_EXP 38
5878: PUSH
5879: EMPTY
5880: ST_TO_ADDR
// legTech := GetTechNation ( 8 , nation_arabian , state_enabled ) ;
5881: LD_ADDR_EXP 39
5885: PUSH
5886: LD_INT 8
5888: PPUSH
5889: LD_INT 2
5891: PPUSH
5892: LD_INT 1
5894: PPUSH
5895: CALL 20814 0 3
5899: ST_TO_ADDR
// legConstructList := [ [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ] ;
5900: LD_ADDR_EXP 40
5904: PUSH
5905: LD_INT 13
5907: PUSH
5908: LD_INT 1
5910: PUSH
5911: LD_INT 2
5913: PUSH
5914: LD_INT 32
5916: PUSH
5917: EMPTY
5918: LIST
5919: LIST
5920: LIST
5921: LIST
5922: PUSH
5923: EMPTY
5924: LIST
5925: ST_TO_ADDR
// legHealPoint := [ 195 , 15 ] ;
5926: LD_ADDR_EXP 41
5930: PUSH
5931: LD_INT 195
5933: PUSH
5934: LD_INT 15
5936: PUSH
5937: EMPTY
5938: LIST
5939: LIST
5940: ST_TO_ADDR
// legBuildings := [ ] ;
5941: LD_ADDR_EXP 42
5945: PUSH
5946: EMPTY
5947: ST_TO_ADDR
// legTanks := [ ] ;
5948: LD_ADDR_EXP 43
5952: PUSH
5953: EMPTY
5954: ST_TO_ADDR
// legRTanks := [ ] ;
5955: LD_ADDR_EXP 44
5959: PUSH
5960: EMPTY
5961: ST_TO_ADDR
// legCargo := 0 ;
5962: LD_ADDR_EXP 45
5966: PUSH
5967: LD_INT 0
5969: ST_TO_ADDR
// sources := [ [ 219 , 31 ] , [ 166 , 31 ] ] ;
5970: LD_ADDR_VAR 0 7
5974: PUSH
5975: LD_INT 219
5977: PUSH
5978: LD_INT 31
5980: PUSH
5981: EMPTY
5982: LIST
5983: LIST
5984: PUSH
5985: LD_INT 166
5987: PUSH
5988: LD_INT 31
5990: PUSH
5991: EMPTY
5992: LIST
5993: LIST
5994: PUSH
5995: EMPTY
5996: LIST
5997: LIST
5998: ST_TO_ADDR
// for i in sources do
5999: LD_ADDR_VAR 0 2
6003: PUSH
6004: LD_VAR 0 7
6008: PUSH
6009: FOR_IN
6010: IFFALSE 6039
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 8 ) ;
6012: LD_VAR 0 2
6016: PUSH
6017: LD_INT 1
6019: ARRAY
6020: PPUSH
6021: LD_VAR 0 2
6025: PUSH
6026: LD_INT 2
6028: ARRAY
6029: PPUSH
6030: LD_INT 8
6032: PPUSH
6033: CALL_OW 441
6037: GO 6009
6039: POP
6040: POP
// SetResourceType ( GetBase ( legBase ) , mat_cans , 650 ) ;
6041: LD_INT 38
6043: PPUSH
6044: CALL_OW 274
6048: PPUSH
6049: LD_INT 1
6051: PPUSH
6052: LD_INT 650
6054: PPUSH
6055: CALL_OW 277
// SetResourceType ( GetBase ( legBase ) , mat_oil , 120 ) ;
6059: LD_INT 38
6061: PPUSH
6062: CALL_OW 274
6066: PPUSH
6067: LD_INT 2
6069: PPUSH
6070: LD_INT 120
6072: PPUSH
6073: CALL_OW 277
// SetResourceType ( GetBase ( legBase ) , mat_siberit , 50 ) ;
6077: LD_INT 38
6079: PPUSH
6080: CALL_OW 274
6084: PPUSH
6085: LD_INT 3
6087: PPUSH
6088: LD_INT 50
6090: PPUSH
6091: CALL_OW 277
// skill := [ 6 , 7 , 8 , 9 ] [ Difficulty ] ;
6095: LD_ADDR_VAR 0 6
6099: PUSH
6100: LD_INT 6
6102: PUSH
6103: LD_INT 7
6105: PUSH
6106: LD_INT 8
6108: PUSH
6109: LD_INT 9
6111: PUSH
6112: EMPTY
6113: LIST
6114: LIST
6115: LIST
6116: LIST
6117: PUSH
6118: LD_OWVAR 67
6122: ARRAY
6123: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
6124: LD_ADDR_EXP 36
6128: PUSH
6129: LD_STRING Farmer
6131: PPUSH
6132: LD_INT 0
6134: PPUSH
6135: LD_STRING 
6137: PPUSH
6138: CALL 20667 0 3
6142: ST_TO_ADDR
// for i := 1 to 4 do
6143: LD_ADDR_VAR 0 2
6147: PUSH
6148: DOUBLE
6149: LD_INT 1
6151: DEC
6152: ST_TO_ADDR
6153: LD_INT 4
6155: PUSH
6156: FOR_TO
6157: IFFALSE 6674
// for j := 1 to [ [ 7 , 8 , 9 , 11 ] [ Difficulty ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] , 3 , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
6159: LD_ADDR_VAR 0 3
6163: PUSH
6164: DOUBLE
6165: LD_INT 1
6167: DEC
6168: ST_TO_ADDR
6169: LD_INT 7
6171: PUSH
6172: LD_INT 8
6174: PUSH
6175: LD_INT 9
6177: PUSH
6178: LD_INT 11
6180: PUSH
6181: EMPTY
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: PUSH
6187: LD_OWVAR 67
6191: ARRAY
6192: PUSH
6193: LD_INT 3
6195: PUSH
6196: LD_INT 4
6198: PUSH
6199: LD_INT 5
6201: PUSH
6202: LD_INT 5
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: PUSH
6211: LD_OWVAR 67
6215: ARRAY
6216: PUSH
6217: LD_INT 3
6219: PUSH
6220: LD_INT 2
6222: PUSH
6223: LD_INT 3
6225: PUSH
6226: LD_INT 3
6228: PUSH
6229: LD_INT 3
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: PUSH
6238: LD_OWVAR 67
6242: ARRAY
6243: PUSH
6244: EMPTY
6245: LIST
6246: LIST
6247: LIST
6248: LIST
6249: PUSH
6250: LD_VAR 0 2
6254: ARRAY
6255: PUSH
6256: FOR_TO
6257: IFFALSE 6670
// begin PrepareHuman ( false , i , skill ) ;
6259: LD_INT 0
6261: PPUSH
6262: LD_VAR 0 2
6266: PPUSH
6267: LD_VAR 0 6
6271: PPUSH
6272: CALL_OW 380
// un := CreateHuman ;
6276: LD_ADDR_VAR 0 5
6280: PUSH
6281: CALL_OW 44
6285: ST_TO_ADDR
// legForces := Join ( legForces , un ) ;
6286: LD_ADDR_EXP 37
6290: PUSH
6291: LD_EXP 37
6295: PPUSH
6296: LD_VAR 0 5
6300: PPUSH
6301: CALL 58462 0 2
6305: ST_TO_ADDR
// case i of 1 :
6306: LD_VAR 0 2
6310: PUSH
6311: LD_INT 1
6313: DOUBLE
6314: EQUAL
6315: IFTRUE 6319
6317: GO 6388
6319: POP
// b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] ] ) ; 2 :
6320: LD_ADDR_VAR 0 4
6324: PUSH
6325: LD_INT 22
6327: PUSH
6328: LD_INT 8
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: PUSH
6335: LD_INT 2
6337: PUSH
6338: LD_INT 30
6340: PUSH
6341: LD_INT 32
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: PUSH
6348: LD_INT 30
6350: PUSH
6351: LD_INT 5
6353: PUSH
6354: EMPTY
6355: LIST
6356: LIST
6357: PUSH
6358: EMPTY
6359: LIST
6360: LIST
6361: LIST
6362: PUSH
6363: LD_INT 3
6365: PUSH
6366: LD_INT 62
6368: PUSH
6369: EMPTY
6370: LIST
6371: PUSH
6372: EMPTY
6373: LIST
6374: LIST
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: LIST
6380: PPUSH
6381: CALL_OW 69
6385: ST_TO_ADDR
6386: GO 6567
6388: LD_INT 2
6390: DOUBLE
6391: EQUAL
6392: IFTRUE 6396
6394: GO 6425
6396: POP
// b := UnitFilter ( legBase , [ f_not , [ f_full ] ] ) ; 3 :
6397: LD_ADDR_VAR 0 4
6401: PUSH
6402: LD_INT 38
6404: PPUSH
6405: LD_INT 3
6407: PUSH
6408: LD_INT 62
6410: PUSH
6411: EMPTY
6412: LIST
6413: PUSH
6414: EMPTY
6415: LIST
6416: LIST
6417: PPUSH
6418: CALL_OW 72
6422: ST_TO_ADDR
6423: GO 6567
6425: LD_INT 3
6427: DOUBLE
6428: EQUAL
6429: IFTRUE 6433
6431: GO 6507
6433: POP
// b := ReverseArray ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_control_tower ] ] , [ f_not , [ f_full ] ] ] ) ) ; 4 :
6434: LD_ADDR_VAR 0 4
6438: PUSH
6439: LD_INT 22
6441: PUSH
6442: LD_INT 8
6444: PUSH
6445: EMPTY
6446: LIST
6447: LIST
6448: PUSH
6449: LD_INT 2
6451: PUSH
6452: LD_INT 30
6454: PUSH
6455: LD_INT 3
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: PUSH
6462: LD_INT 30
6464: PUSH
6465: LD_INT 36
6467: PUSH
6468: EMPTY
6469: LIST
6470: LIST
6471: PUSH
6472: EMPTY
6473: LIST
6474: LIST
6475: LIST
6476: PUSH
6477: LD_INT 3
6479: PUSH
6480: LD_INT 62
6482: PUSH
6483: EMPTY
6484: LIST
6485: PUSH
6486: EMPTY
6487: LIST
6488: LIST
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: LIST
6494: PPUSH
6495: CALL_OW 69
6499: PPUSH
6500: CALL 53729 0 1
6504: ST_TO_ADDR
6505: GO 6567
6507: LD_INT 4
6509: DOUBLE
6510: EQUAL
6511: IFTRUE 6515
6513: GO 6566
6515: POP
// b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_lab_full ] , [ f_not , [ f_full ] ] ] ) ; end ;
6516: LD_ADDR_VAR 0 4
6520: PUSH
6521: LD_INT 22
6523: PUSH
6524: LD_INT 8
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: PUSH
6531: LD_INT 30
6533: PUSH
6534: LD_INT 8
6536: PUSH
6537: EMPTY
6538: LIST
6539: LIST
6540: PUSH
6541: LD_INT 3
6543: PUSH
6544: LD_INT 62
6546: PUSH
6547: EMPTY
6548: LIST
6549: PUSH
6550: EMPTY
6551: LIST
6552: LIST
6553: PUSH
6554: EMPTY
6555: LIST
6556: LIST
6557: LIST
6558: PPUSH
6559: CALL_OW 69
6563: ST_TO_ADDR
6564: GO 6567
6566: POP
// if b then
6567: LD_VAR 0 4
6571: IFFALSE 6647
// begin if GetBType ( b [ 1 ] ) = b_barracks then
6573: LD_VAR 0 4
6577: PUSH
6578: LD_INT 1
6580: ARRAY
6581: PPUSH
6582: CALL_OW 266
6586: PUSH
6587: LD_INT 5
6589: EQUAL
6590: IFFALSE 6627
// if Prob ( 50 ) then
6592: LD_INT 50
6594: PPUSH
6595: CALL_OW 13
6599: IFFALSE 6615
// SetClass ( un , class_mortar ) else
6601: LD_VAR 0 5
6605: PPUSH
6606: LD_INT 8
6608: PPUSH
6609: CALL_OW 336
6613: GO 6627
// SetClass ( un , class_sniper ) ;
6615: LD_VAR 0 5
6619: PPUSH
6620: LD_INT 5
6622: PPUSH
6623: CALL_OW 336
// PlaceHumanInUnit ( un , b [ 1 ] ) ;
6627: LD_VAR 0 5
6631: PPUSH
6632: LD_VAR 0 4
6636: PUSH
6637: LD_INT 1
6639: ARRAY
6640: PPUSH
6641: CALL_OW 52
// end else
6645: GO 6668
// PlaceUnitXYR ( un , 188 , 21 , 4 , false ) ;
6647: LD_VAR 0 5
6651: PPUSH
6652: LD_INT 188
6654: PPUSH
6655: LD_INT 21
6657: PPUSH
6658: LD_INT 4
6660: PPUSH
6661: LD_INT 0
6663: PPUSH
6664: CALL_OW 50
// end ;
6668: GO 6256
6670: POP
6671: POP
6672: GO 6156
6674: POP
6675: POP
// b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] ] ) ;
6676: LD_ADDR_VAR 0 4
6680: PUSH
6681: LD_INT 22
6683: PUSH
6684: LD_INT 8
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: PUSH
6691: LD_INT 2
6693: PUSH
6694: LD_INT 30
6696: PUSH
6697: LD_INT 32
6699: PUSH
6700: EMPTY
6701: LIST
6702: LIST
6703: PUSH
6704: LD_INT 30
6706: PUSH
6707: LD_INT 5
6709: PUSH
6710: EMPTY
6711: LIST
6712: LIST
6713: PUSH
6714: EMPTY
6715: LIST
6716: LIST
6717: LIST
6718: PUSH
6719: LD_INT 3
6721: PUSH
6722: LD_INT 62
6724: PUSH
6725: EMPTY
6726: LIST
6727: PUSH
6728: EMPTY
6729: LIST
6730: LIST
6731: PUSH
6732: EMPTY
6733: LIST
6734: LIST
6735: LIST
6736: PPUSH
6737: CALL_OW 69
6741: ST_TO_ADDR
// if b then
6742: LD_VAR 0 4
6746: IFFALSE 6813
// begin for i in b do
6748: LD_ADDR_VAR 0 2
6752: PUSH
6753: LD_VAR 0 4
6757: PUSH
6758: FOR_IN
6759: IFFALSE 6811
// begin PrepareApemanSoldier ( ) ;
6761: CALL 54552 0 0
// un := CreateHuman ;
6765: LD_ADDR_VAR 0 5
6769: PUSH
6770: CALL_OW 44
6774: ST_TO_ADDR
// legForces := Join ( legForces , un ) ;
6775: LD_ADDR_EXP 37
6779: PUSH
6780: LD_EXP 37
6784: PPUSH
6785: LD_VAR 0 5
6789: PPUSH
6790: CALL 58462 0 2
6794: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6795: LD_VAR 0 5
6799: PPUSH
6800: LD_VAR 0 2
6804: PPUSH
6805: CALL_OW 52
// end ;
6809: GO 6758
6811: POP
6812: POP
// end ; for i := 1 to 2 do
6813: LD_ADDR_VAR 0 2
6817: PUSH
6818: DOUBLE
6819: LD_INT 1
6821: DEC
6822: ST_TO_ADDR
6823: LD_INT 2
6825: PUSH
6826: FOR_TO
6827: IFFALSE 6954
// begin uc_nation := nation_arabian ;
6829: LD_ADDR_OWVAR 21
6833: PUSH
6834: LD_INT 2
6836: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_solar , control_manual , ar_control_tower , 100 ) ;
6837: LD_INT 13
6839: PPUSH
6840: LD_INT 2
6842: PPUSH
6843: LD_INT 1
6845: PPUSH
6846: LD_INT 31
6848: PPUSH
6849: LD_INT 100
6851: PPUSH
6852: CALL 25591 0 5
// un := CreateVehicle ;
6856: LD_ADDR_VAR 0 5
6860: PUSH
6861: CALL_OW 45
6865: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6866: LD_VAR 0 5
6870: PPUSH
6871: LD_INT 0
6873: PPUSH
6874: LD_INT 5
6876: PPUSH
6877: CALL_OW 12
6881: PPUSH
6882: CALL_OW 233
// PlaceUnitXYR ( un , 199 , 24 , 4 , false ) ;
6886: LD_VAR 0 5
6890: PPUSH
6891: LD_INT 199
6893: PPUSH
6894: LD_INT 24
6896: PPUSH
6897: LD_INT 4
6899: PPUSH
6900: LD_INT 0
6902: PPUSH
6903: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
6907: LD_INT 0
6909: PPUSH
6910: LD_INT 8
6912: PUSH
6913: LD_INT 9
6915: PUSH
6916: LD_INT 10
6918: PUSH
6919: LD_INT 10
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: LIST
6926: LIST
6927: PUSH
6928: LD_OWVAR 67
6932: ARRAY
6933: PPUSH
6934: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
6938: CALL_OW 44
6942: PPUSH
6943: LD_VAR 0 5
6947: PPUSH
6948: CALL_OW 52
// end ;
6952: GO 6826
6954: POP
6955: POP
// end ;
6956: LD_VAR 0 1
6960: RET
// every 0 0$2 trigger legScriptActive and Count ( legForces ) do var i , tmp , remote , undone , side , lab , eng , tag , tw , cr , sci , mech , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
6961: LD_EXP 4
6965: PUSH
6966: LD_EXP 37
6970: PPUSH
6971: CALL 22853 0 1
6975: AND
6976: IFFALSE 9499
6978: GO 6980
6980: DISABLE
6981: LD_INT 0
6983: PPUSH
6984: PPUSH
6985: PPUSH
6986: PPUSH
6987: PPUSH
6988: PPUSH
6989: PPUSH
6990: PPUSH
6991: PPUSH
6992: PPUSH
6993: PPUSH
6994: PPUSH
6995: PPUSH
6996: PPUSH
6997: PPUSH
6998: PPUSH
6999: PPUSH
7000: PPUSH
7001: PPUSH
// begin enable ;
7002: ENABLE
// side := 8 ;
7003: LD_ADDR_VAR 0 5
7007: PUSH
7008: LD_INT 8
7010: ST_TO_ADDR
// remote := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
7011: LD_ADDR_VAR 0 3
7015: PUSH
7016: LD_INT 22
7018: PUSH
7019: LD_VAR 0 5
7023: PUSH
7024: EMPTY
7025: LIST
7026: LIST
7027: PUSH
7028: LD_INT 33
7030: PUSH
7031: LD_INT 2
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: PUSH
7038: LD_INT 50
7040: PUSH
7041: EMPTY
7042: LIST
7043: PUSH
7044: LD_INT 3
7046: PUSH
7047: LD_INT 61
7049: PUSH
7050: EMPTY
7051: LIST
7052: PUSH
7053: EMPTY
7054: LIST
7055: LIST
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: LIST
7061: LIST
7062: PPUSH
7063: CALL_OW 69
7067: ST_TO_ADDR
// if remote and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_weapon , ar_control_tower ] ] ) ) then
7068: LD_VAR 0 3
7072: PUSH
7073: LD_INT 22
7075: PUSH
7076: LD_VAR 0 5
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: PUSH
7085: LD_INT 50
7087: PUSH
7088: EMPTY
7089: LIST
7090: PUSH
7091: LD_INT 34
7093: PUSH
7094: LD_INT 31
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: LIST
7105: PPUSH
7106: CALL_OW 69
7110: PPUSH
7111: CALL 22853 0 1
7115: AND
7116: IFFALSE 7144
// for i in remote do
7118: LD_ADDR_VAR 0 1
7122: PUSH
7123: LD_VAR 0 3
7127: PUSH
7128: FOR_IN
7129: IFFALSE 7142
// Connect ( i ) ;
7131: LD_VAR 0 1
7135: PPUSH
7136: CALL 29059 0 1
7140: GO 7128
7142: POP
7143: POP
// if legTech then
7144: LD_EXP 39
7148: IFFALSE 7304
// begin lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
7150: LD_ADDR_VAR 0 6
7154: PUSH
7155: LD_INT 22
7157: PUSH
7158: LD_VAR 0 5
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: PUSH
7167: LD_INT 50
7169: PUSH
7170: EMPTY
7171: LIST
7172: PUSH
7173: LD_INT 2
7175: PUSH
7176: LD_INT 30
7178: PUSH
7179: LD_INT 6
7181: PUSH
7182: EMPTY
7183: LIST
7184: LIST
7185: PUSH
7186: LD_INT 30
7188: PUSH
7189: LD_INT 7
7191: PUSH
7192: EMPTY
7193: LIST
7194: LIST
7195: PUSH
7196: LD_INT 30
7198: PUSH
7199: LD_INT 8
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: LIST
7216: PPUSH
7217: CALL_OW 69
7221: ST_TO_ADDR
// if lab then
7222: LD_VAR 0 6
7226: IFFALSE 7304
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
7228: LD_VAR 0 6
7232: PUSH
7233: LD_INT 1
7235: ARRAY
7236: PPUSH
7237: CALL_OW 461
7241: PUSH
7242: LD_INT 2
7244: EQUAL
7245: IFFALSE 7304
// begin for i in legTech do
7247: LD_ADDR_VAR 0 1
7251: PUSH
7252: LD_EXP 39
7256: PUSH
7257: FOR_IN
7258: IFFALSE 7302
// if CanBeResearched ( lab [ 1 ] , i ) then
7260: LD_VAR 0 6
7264: PUSH
7265: LD_INT 1
7267: ARRAY
7268: PPUSH
7269: LD_VAR 0 1
7273: PPUSH
7274: CALL_OW 430
7278: IFFALSE 7300
// begin ComResearch ( lab [ 1 ] , i ) ;
7280: LD_VAR 0 6
7284: PUSH
7285: LD_INT 1
7287: ARRAY
7288: PPUSH
7289: LD_VAR 0 1
7293: PPUSH
7294: CALL_OW 124
// break ;
7298: GO 7302
// end ;
7300: GO 7257
7302: POP
7303: POP
// end ; end ; end ; fac := FilterUnitsInArea ( legBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
7304: LD_ADDR_VAR 0 17
7308: PUSH
7309: LD_INT 2
7311: PPUSH
7312: LD_INT 22
7314: PUSH
7315: LD_VAR 0 5
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: PUSH
7324: LD_INT 30
7326: PUSH
7327: LD_INT 3
7329: PUSH
7330: EMPTY
7331: LIST
7332: LIST
7333: PUSH
7334: LD_INT 50
7336: PUSH
7337: EMPTY
7338: LIST
7339: PUSH
7340: EMPTY
7341: LIST
7342: LIST
7343: LIST
7344: PPUSH
7345: CALL_OW 70
7349: ST_TO_ADDR
// if fac then
7350: LD_VAR 0 17
7354: IFFALSE 7730
// begin mech := UnitFilter ( legForces , [ [ f_tag , tMech ] , [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) ;
7356: LD_ADDR_VAR 0 12
7360: PUSH
7361: LD_EXP 37
7365: PPUSH
7366: LD_INT 120
7368: PUSH
7369: LD_INT 7
7371: PUSH
7372: EMPTY
7373: LIST
7374: LIST
7375: PUSH
7376: LD_INT 25
7378: PUSH
7379: LD_INT 3
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: PUSH
7386: LD_INT 3
7388: PUSH
7389: LD_INT 54
7391: PUSH
7392: EMPTY
7393: LIST
7394: PUSH
7395: EMPTY
7396: LIST
7397: LIST
7398: PUSH
7399: LD_INT 3
7401: PUSH
7402: LD_INT 55
7404: PUSH
7405: EMPTY
7406: LIST
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: PPUSH
7418: CALL_OW 72
7422: ST_TO_ADDR
// if mech and UnitsInside ( fac [ 1 ] ) < 6 then
7423: LD_VAR 0 12
7427: PUSH
7428: LD_VAR 0 17
7432: PUSH
7433: LD_INT 1
7435: ARRAY
7436: PPUSH
7437: CALL_OW 313
7441: PUSH
7442: LD_INT 6
7444: LESS
7445: AND
7446: IFFALSE 7466
// ComEnterUnit ( mech , fac [ 1 ] ) ;
7448: LD_VAR 0 12
7452: PPUSH
7453: LD_VAR 0 17
7457: PUSH
7458: LD_INT 1
7460: ARRAY
7461: PPUSH
7462: CALL_OW 120
// if BuildingStatus ( fac [ 1 ] ) = bs_idle then
7466: LD_VAR 0 17
7470: PUSH
7471: LD_INT 1
7473: ARRAY
7474: PPUSH
7475: CALL_OW 461
7479: PUSH
7480: LD_INT 2
7482: EQUAL
7483: IFFALSE 7730
// begin emptyTowers := FilterUnitsInArea ( legBaseArea , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
7485: LD_ADDR_VAR 0 18
7489: PUSH
7490: LD_INT 2
7492: PPUSH
7493: LD_INT 2
7495: PUSH
7496: LD_INT 30
7498: PUSH
7499: LD_INT 32
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: PUSH
7506: LD_INT 30
7508: PUSH
7509: LD_INT 33
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PUSH
7516: EMPTY
7517: LIST
7518: LIST
7519: LIST
7520: PUSH
7521: LD_INT 35
7523: PUSH
7524: LD_INT 0
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: PUSH
7531: EMPTY
7532: LIST
7533: LIST
7534: PPUSH
7535: CALL_OW 70
7539: ST_TO_ADDR
// if emptyTowers then
7540: LD_VAR 0 18
7544: IFFALSE 7592
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , legBaseArea ) ;
7546: LD_ADDR_VAR 0 19
7550: PUSH
7551: LD_VAR 0 18
7555: PUSH
7556: LD_INT 1
7558: ARRAY
7559: PPUSH
7560: LD_INT 2
7562: PPUSH
7563: CALL 31098 0 2
7567: ST_TO_ADDR
// if weapon then
7568: LD_VAR 0 19
7572: IFFALSE 7592
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
7574: LD_VAR 0 18
7578: PUSH
7579: LD_INT 1
7581: ARRAY
7582: PPUSH
7583: LD_VAR 0 19
7587: PPUSH
7588: CALL_OW 148
// end ; if legConstructList then
7592: LD_EXP 40
7596: IFFALSE 7730
// if CanBeConstructed ( fac [ 1 ] , legConstructList [ 1 ] [ 1 ] , legConstructList [ 1 ] [ 2 ] , legConstructList [ 1 ] [ 3 ] , legConstructList [ 1 ] [ 4 ] ) then
7598: LD_VAR 0 17
7602: PUSH
7603: LD_INT 1
7605: ARRAY
7606: PPUSH
7607: LD_EXP 40
7611: PUSH
7612: LD_INT 1
7614: ARRAY
7615: PUSH
7616: LD_INT 1
7618: ARRAY
7619: PPUSH
7620: LD_EXP 40
7624: PUSH
7625: LD_INT 1
7627: ARRAY
7628: PUSH
7629: LD_INT 2
7631: ARRAY
7632: PPUSH
7633: LD_EXP 40
7637: PUSH
7638: LD_INT 1
7640: ARRAY
7641: PUSH
7642: LD_INT 3
7644: ARRAY
7645: PPUSH
7646: LD_EXP 40
7650: PUSH
7651: LD_INT 1
7653: ARRAY
7654: PUSH
7655: LD_INT 4
7657: ARRAY
7658: PPUSH
7659: CALL_OW 448
7663: IFFALSE 7730
// ComConstruct ( fac [ 1 ] , legConstructList [ 1 ] [ 1 ] , legConstructList [ 1 ] [ 2 ] , legConstructList [ 1 ] [ 3 ] , legConstructList [ 1 ] [ 4 ] ) ;
7665: LD_VAR 0 17
7669: PUSH
7670: LD_INT 1
7672: ARRAY
7673: PPUSH
7674: LD_EXP 40
7678: PUSH
7679: LD_INT 1
7681: ARRAY
7682: PUSH
7683: LD_INT 1
7685: ARRAY
7686: PPUSH
7687: LD_EXP 40
7691: PUSH
7692: LD_INT 1
7694: ARRAY
7695: PUSH
7696: LD_INT 2
7698: ARRAY
7699: PPUSH
7700: LD_EXP 40
7704: PUSH
7705: LD_INT 1
7707: ARRAY
7708: PUSH
7709: LD_INT 3
7711: ARRAY
7712: PPUSH
7713: LD_EXP 40
7717: PUSH
7718: LD_INT 1
7720: ARRAY
7721: PUSH
7722: LD_INT 4
7724: ARRAY
7725: PPUSH
7726: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( legBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7730: LD_ADDR_VAR 0 2
7734: PUSH
7735: LD_INT 2
7737: PPUSH
7738: LD_INT 21
7740: PUSH
7741: LD_INT 3
7743: PUSH
7744: EMPTY
7745: LIST
7746: LIST
7747: PUSH
7748: LD_INT 3
7750: PUSH
7751: LD_INT 57
7753: PUSH
7754: EMPTY
7755: LIST
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: PUSH
7761: LD_INT 3
7763: PUSH
7764: LD_INT 24
7766: PUSH
7767: LD_INT 1000
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: LIST
7782: PPUSH
7783: CALL_OW 70
7787: ST_TO_ADDR
// cr := GetListOfCratesInArea ( legCratesArea ) ;
7788: LD_ADDR_VAR 0 10
7792: PUSH
7793: LD_INT 14
7795: PPUSH
7796: CALL_OW 435
7800: ST_TO_ADDR
// sci := UnitFilter ( legForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
7801: LD_ADDR_VAR 0 11
7805: PUSH
7806: LD_EXP 37
7810: PPUSH
7811: LD_INT 25
7813: PUSH
7814: LD_INT 4
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: PUSH
7821: LD_INT 50
7823: PUSH
7824: EMPTY
7825: LIST
7826: PUSH
7827: EMPTY
7828: LIST
7829: LIST
7830: PPUSH
7831: CALL_OW 72
7835: ST_TO_ADDR
// lab := FilterUnitsInArea ( legBaseArea , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
7836: LD_ADDR_VAR 0 6
7840: PUSH
7841: LD_INT 2
7843: PPUSH
7844: LD_INT 2
7846: PUSH
7847: LD_INT 30
7849: PUSH
7850: LD_INT 6
7852: PUSH
7853: EMPTY
7854: LIST
7855: LIST
7856: PUSH
7857: LD_INT 30
7859: PUSH
7860: LD_INT 7
7862: PUSH
7863: EMPTY
7864: LIST
7865: LIST
7866: PUSH
7867: LD_INT 30
7869: PUSH
7870: LD_INT 8
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: PPUSH
7883: CALL_OW 70
7887: ST_TO_ADDR
// if sci then
7888: LD_VAR 0 11
7892: IFFALSE 8051
// begin hurtUnits := UnitFilter ( legForces , [ [ f_inarea , legBaseArea ] , [ f_tag , tHeal ] ] ) ;
7894: LD_ADDR_VAR 0 14
7898: PUSH
7899: LD_EXP 37
7903: PPUSH
7904: LD_INT 95
7906: PUSH
7907: LD_INT 2
7909: PUSH
7910: EMPTY
7911: LIST
7912: LIST
7913: PUSH
7914: LD_INT 120
7916: PUSH
7917: LD_INT 1
7919: PUSH
7920: EMPTY
7921: LIST
7922: LIST
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PPUSH
7928: CALL_OW 72
7932: ST_TO_ADDR
// if hurtUnits then
7933: LD_VAR 0 14
7937: IFFALSE 7998
// begin for i in sci do
7939: LD_ADDR_VAR 0 1
7943: PUSH
7944: LD_VAR 0 11
7948: PUSH
7949: FOR_IN
7950: IFFALSE 7994
// if IsInUnit ( i ) then
7952: LD_VAR 0 1
7956: PPUSH
7957: CALL_OW 310
7961: IFFALSE 7974
// ComExitBuilding ( i ) else
7963: LD_VAR 0 1
7967: PPUSH
7968: CALL_OW 122
7972: GO 7992
// ComHeal ( i , hurtUnits [ 1 ] ) ;
7974: LD_VAR 0 1
7978: PPUSH
7979: LD_VAR 0 14
7983: PUSH
7984: LD_INT 1
7986: ARRAY
7987: PPUSH
7988: CALL_OW 128
7992: GO 7949
7994: POP
7995: POP
// end else
7996: GO 8051
// if lab then
7998: LD_VAR 0 6
8002: IFFALSE 8051
// begin for i in sci do
8004: LD_ADDR_VAR 0 1
8008: PUSH
8009: LD_VAR 0 11
8013: PUSH
8014: FOR_IN
8015: IFFALSE 8049
// if not IsInUnit ( i ) then
8017: LD_VAR 0 1
8021: PPUSH
8022: CALL_OW 310
8026: NOT
8027: IFFALSE 8047
// ComEnterUnit ( i , lab [ 1 ] ) ;
8029: LD_VAR 0 1
8033: PPUSH
8034: LD_VAR 0 6
8038: PUSH
8039: LD_INT 1
8041: ARRAY
8042: PPUSH
8043: CALL_OW 120
8047: GO 8014
8049: POP
8050: POP
// end ; end ; eng := UnitFilter ( legForces , [ f_class , 2 ] ) ;
8051: LD_ADDR_VAR 0 7
8055: PUSH
8056: LD_EXP 37
8060: PPUSH
8061: LD_INT 25
8063: PUSH
8064: LD_INT 2
8066: PUSH
8067: EMPTY
8068: LIST
8069: LIST
8070: PPUSH
8071: CALL_OW 72
8075: ST_TO_ADDR
// if eng then
8076: LD_VAR 0 7
8080: IFFALSE 8855
// begin for i in eng do
8082: LD_ADDR_VAR 0 1
8086: PUSH
8087: LD_VAR 0 7
8091: PUSH
8092: FOR_IN
8093: IFFALSE 8853
// begin tag := GetTag ( i ) ;
8095: LD_ADDR_VAR 0 8
8099: PUSH
8100: LD_VAR 0 1
8104: PPUSH
8105: CALL_OW 110
8109: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
8110: LD_VAR 0 1
8114: PPUSH
8115: CALL_OW 256
8119: PUSH
8120: LD_INT 800
8122: LESS
8123: PUSH
8124: LD_VAR 0 8
8128: PUSH
8129: LD_INT 1
8131: NONEQUAL
8132: AND
8133: IFFALSE 8183
// begin SetTag ( i , tHeal ) ;
8135: LD_VAR 0 1
8139: PPUSH
8140: LD_INT 1
8142: PPUSH
8143: CALL_OW 109
// ComMoveXY ( i , legHealPoint [ 1 ] , legHealPoint [ 2 ] ) ;
8147: LD_VAR 0 1
8151: PPUSH
8152: LD_EXP 41
8156: PUSH
8157: LD_INT 1
8159: ARRAY
8160: PPUSH
8161: LD_EXP 41
8165: PUSH
8166: LD_INT 2
8168: ARRAY
8169: PPUSH
8170: CALL_OW 111
// AddComHold ( i ) ;
8174: LD_VAR 0 1
8178: PPUSH
8179: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
8183: LD_VAR 0 8
8187: PUSH
8188: LD_INT 1
8190: EQUAL
8191: PUSH
8192: LD_VAR 0 1
8196: PPUSH
8197: CALL_OW 256
8201: PUSH
8202: LD_INT 1000
8204: EQUAL
8205: AND
8206: IFFALSE 8220
// SetTag ( i , 0 ) ;
8208: LD_VAR 0 1
8212: PPUSH
8213: LD_INT 0
8215: PPUSH
8216: CALL_OW 109
// if not tag then
8220: LD_VAR 0 8
8224: NOT
8225: IFFALSE 8393
// begin undone := FilterUnitsInArea ( legBaseArea , [ f_constructed ] ) ;
8227: LD_ADDR_VAR 0 4
8231: PUSH
8232: LD_INT 2
8234: PPUSH
8235: LD_INT 57
8237: PUSH
8238: EMPTY
8239: LIST
8240: PPUSH
8241: CALL_OW 70
8245: ST_TO_ADDR
// if undone then
8246: LD_VAR 0 4
8250: IFFALSE 8272
// begin ComComplete ( i , undone [ 1 ] ) ;
8252: LD_VAR 0 1
8256: PPUSH
8257: LD_VAR 0 4
8261: PUSH
8262: LD_INT 1
8264: ARRAY
8265: PPUSH
8266: CALL 28951 0 2
// continue ;
8270: GO 8092
// end ; if cr or tmp or Count ( legBuildings ) then
8272: LD_VAR 0 10
8276: PUSH
8277: LD_VAR 0 2
8281: OR
8282: PUSH
8283: LD_EXP 42
8287: PPUSH
8288: CALL 22853 0 1
8292: OR
8293: IFFALSE 8369
// begin if IsInUnit ( i ) then
8295: LD_VAR 0 1
8299: PPUSH
8300: CALL_OW 310
8304: IFFALSE 8315
// ComExitBuilding ( i ) ;
8306: LD_VAR 0 1
8310: PPUSH
8311: CALL_OW 122
// if tmp then
8315: LD_VAR 0 2
8319: IFFALSE 8335
// SetTag ( i , tRepair ) else
8321: LD_VAR 0 1
8325: PPUSH
8326: LD_INT 3
8328: PPUSH
8329: CALL_OW 109
8333: GO 8367
// if cr then
8335: LD_VAR 0 10
8339: IFFALSE 8355
// SetTag ( i , tCrates ) else
8341: LD_VAR 0 1
8345: PPUSH
8346: LD_INT 2
8348: PPUSH
8349: CALL_OW 109
8353: GO 8367
// SetTag ( i , tBuild ) ;
8355: LD_VAR 0 1
8359: PPUSH
8360: LD_INT 5
8362: PPUSH
8363: CALL_OW 109
// end else
8367: GO 8393
// if not IsInUnit ( i ) then
8369: LD_VAR 0 1
8373: PPUSH
8374: CALL_OW 310
8378: NOT
8379: IFFALSE 8393
// ComEnterUnit ( i , legBase ) ;
8381: LD_VAR 0 1
8385: PPUSH
8386: LD_INT 38
8388: PPUSH
8389: CALL_OW 120
// end ; if tag = tRepair then
8393: LD_VAR 0 8
8397: PUSH
8398: LD_INT 3
8400: EQUAL
8401: IFFALSE 8503
// begin if IsInUnit ( i ) then
8403: LD_VAR 0 1
8407: PPUSH
8408: CALL_OW 310
8412: IFFALSE 8425
// begin ComExitBuilding ( i ) ;
8414: LD_VAR 0 1
8418: PPUSH
8419: CALL_OW 122
// continue ;
8423: GO 8092
// end ; if not tmp then
8425: LD_VAR 0 2
8429: NOT
8430: IFFALSE 8446
// begin SetTag ( i , 0 ) ;
8432: LD_VAR 0 1
8436: PPUSH
8437: LD_INT 0
8439: PPUSH
8440: CALL_OW 109
// continue ;
8444: GO 8092
// end ; if not HasTask ( i ) then
8446: LD_VAR 0 1
8450: PPUSH
8451: CALL_OW 314
8455: NOT
8456: IFFALSE 8476
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
8458: LD_VAR 0 1
8462: PPUSH
8463: LD_VAR 0 2
8467: PUSH
8468: LD_INT 1
8470: ARRAY
8471: PPUSH
8472: CALL_OW 130
// if not IsInArea ( i , legBaseArea ) then
8476: LD_VAR 0 1
8480: PPUSH
8481: LD_INT 2
8483: PPUSH
8484: CALL_OW 308
8488: NOT
8489: IFFALSE 8503
// ComMoveToArea ( i , legBaseArea ) ;
8491: LD_VAR 0 1
8495: PPUSH
8496: LD_INT 2
8498: PPUSH
8499: CALL_OW 113
// end ; if tag = tBuild then
8503: LD_VAR 0 8
8507: PUSH
8508: LD_INT 5
8510: EQUAL
8511: IFFALSE 8706
// begin if IsInUnit ( i ) then
8513: LD_VAR 0 1
8517: PPUSH
8518: CALL_OW 310
8522: IFFALSE 8535
// begin ComExitBuilding ( i ) ;
8524: LD_VAR 0 1
8528: PPUSH
8529: CALL_OW 122
// continue ;
8533: GO 8092
// end ; if not Count ( legBuildings ) then
8535: LD_EXP 42
8539: PPUSH
8540: CALL 22853 0 1
8544: NOT
8545: IFFALSE 8563
// begin SetTag ( i , 0 ) ;
8547: LD_VAR 0 1
8551: PPUSH
8552: LD_INT 0
8554: PPUSH
8555: CALL_OW 109
// continue ;
8559: GO 8092
// end else
8561: GO 8600
// if not CanBeBuiltOnlyResources ( legBase , legBuildings [ 1 ] [ 1 ] ) then
8563: LD_INT 38
8565: PPUSH
8566: LD_EXP 42
8570: PUSH
8571: LD_INT 1
8573: ARRAY
8574: PUSH
8575: LD_INT 1
8577: ARRAY
8578: PPUSH
8579: CALL 62391 0 2
8583: NOT
8584: IFFALSE 8600
// begin SetTag ( i , 0 ) ;
8586: LD_VAR 0 1
8590: PPUSH
8591: LD_INT 0
8593: PPUSH
8594: CALL_OW 109
// continue ;
8598: GO 8092
// end ; undone := FilterUnitsInArea ( legBaseArea , [ f_constructed ] ) ;
8600: LD_ADDR_VAR 0 4
8604: PUSH
8605: LD_INT 2
8607: PPUSH
8608: LD_INT 57
8610: PUSH
8611: EMPTY
8612: LIST
8613: PPUSH
8614: CALL_OW 70
8618: ST_TO_ADDR
// if undone then
8619: LD_VAR 0 4
8623: IFFALSE 8645
// begin ComComplete ( i , undone [ 1 ] ) ;
8625: LD_VAR 0 1
8629: PPUSH
8630: LD_VAR 0 4
8634: PUSH
8635: LD_INT 1
8637: ARRAY
8638: PPUSH
8639: CALL 28951 0 2
// continue ;
8643: GO 8092
// end ; ComBuild ( i , legBuildings [ 1 ] [ 1 ] , legBuildings [ 1 ] [ 2 ] , legBuildings [ 1 ] [ 3 ] , legBuildings [ 1 ] [ 4 ] ) ;
8645: LD_VAR 0 1
8649: PPUSH
8650: LD_EXP 42
8654: PUSH
8655: LD_INT 1
8657: ARRAY
8658: PUSH
8659: LD_INT 1
8661: ARRAY
8662: PPUSH
8663: LD_EXP 42
8667: PUSH
8668: LD_INT 1
8670: ARRAY
8671: PUSH
8672: LD_INT 2
8674: ARRAY
8675: PPUSH
8676: LD_EXP 42
8680: PUSH
8681: LD_INT 1
8683: ARRAY
8684: PUSH
8685: LD_INT 3
8687: ARRAY
8688: PPUSH
8689: LD_EXP 42
8693: PUSH
8694: LD_INT 1
8696: ARRAY
8697: PUSH
8698: LD_INT 4
8700: ARRAY
8701: PPUSH
8702: CALL_OW 145
// end ; if tag = tCrates then
8706: LD_VAR 0 8
8710: PUSH
8711: LD_INT 2
8713: EQUAL
8714: IFFALSE 8851
// begin if IsInUnit ( i ) then
8716: LD_VAR 0 1
8720: PPUSH
8721: CALL_OW 310
8725: IFFALSE 8738
// begin ComExitBuilding ( i ) ;
8727: LD_VAR 0 1
8731: PPUSH
8732: CALL_OW 122
// continue ;
8736: GO 8092
// end ; if not cr then
8738: LD_VAR 0 10
8742: NOT
8743: IFFALSE 8759
// begin SetTag ( i , 0 ) ;
8745: LD_VAR 0 1
8749: PPUSH
8750: LD_INT 0
8752: PPUSH
8753: CALL_OW 109
// continue ;
8757: GO 8092
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
8759: LD_VAR 0 1
8763: PPUSH
8764: CALL_OW 314
8768: NOT
8769: PUSH
8770: LD_INT 81
8772: PUSH
8773: LD_VAR 0 5
8777: PUSH
8778: EMPTY
8779: LIST
8780: LIST
8781: PUSH
8782: LD_INT 92
8784: PUSH
8785: LD_VAR 0 10
8789: PUSH
8790: LD_INT 1
8792: ARRAY
8793: PUSH
8794: LD_VAR 0 10
8798: PUSH
8799: LD_INT 2
8801: ARRAY
8802: PUSH
8803: LD_INT 12
8805: PUSH
8806: EMPTY
8807: LIST
8808: LIST
8809: LIST
8810: LIST
8811: PUSH
8812: EMPTY
8813: LIST
8814: LIST
8815: PPUSH
8816: CALL_OW 69
8820: NOT
8821: AND
8822: IFFALSE 8851
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
8824: LD_VAR 0 1
8828: PPUSH
8829: LD_VAR 0 10
8833: PUSH
8834: LD_INT 1
8836: ARRAY
8837: PPUSH
8838: LD_VAR 0 10
8842: PUSH
8843: LD_INT 2
8845: ARRAY
8846: PPUSH
8847: CALL_OW 117
// end ; end ;
8851: GO 8092
8853: POP
8854: POP
// end ; sol := UnitFilter ( legForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_mortar ] ] , [ f_ok ] ] ) ;
8855: LD_ADDR_VAR 0 13
8859: PUSH
8860: LD_EXP 37
8864: PPUSH
8865: LD_INT 2
8867: PUSH
8868: LD_INT 25
8870: PUSH
8871: LD_INT 1
8873: PUSH
8874: EMPTY
8875: LIST
8876: LIST
8877: PUSH
8878: LD_INT 25
8880: PUSH
8881: LD_INT 5
8883: PUSH
8884: EMPTY
8885: LIST
8886: LIST
8887: PUSH
8888: LD_INT 25
8890: PUSH
8891: LD_INT 8
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: PUSH
8898: EMPTY
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: PUSH
8904: LD_INT 50
8906: PUSH
8907: EMPTY
8908: LIST
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: PPUSH
8914: CALL_OW 72
8918: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( legBaseArea , [ f_enemy , side ] ) ;
8919: LD_ADDR_VAR 0 15
8923: PUSH
8924: LD_INT 2
8926: PPUSH
8927: LD_INT 81
8929: PUSH
8930: LD_VAR 0 5
8934: PUSH
8935: EMPTY
8936: LIST
8937: LIST
8938: PPUSH
8939: CALL_OW 70
8943: ST_TO_ADDR
// if sol then
8944: LD_VAR 0 13
8948: IFFALSE 9499
// begin if enemyInBase then
8950: LD_VAR 0 15
8954: IFFALSE 9099
// begin for i in sol do
8956: LD_ADDR_VAR 0 1
8960: PUSH
8961: LD_VAR 0 13
8965: PUSH
8966: FOR_IN
8967: IFFALSE 9095
// begin tw := IsInUnit ( i ) ;
8969: LD_ADDR_VAR 0 9
8973: PUSH
8974: LD_VAR 0 1
8978: PPUSH
8979: CALL_OW 310
8983: ST_TO_ADDR
// if tw then
8984: LD_VAR 0 9
8988: IFFALSE 9069
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
8990: LD_VAR 0 9
8994: PUSH
8995: LD_INT 22
8997: PUSH
8998: LD_VAR 0 5
9002: PUSH
9003: EMPTY
9004: LIST
9005: LIST
9006: PUSH
9007: LD_INT 101
9009: PUSH
9010: LD_INT 2
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: PUSH
9017: LD_INT 2
9019: PUSH
9020: LD_INT 30
9022: PUSH
9023: LD_INT 32
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: PUSH
9030: LD_INT 30
9032: PUSH
9033: LD_INT 31
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: PUSH
9040: EMPTY
9041: LIST
9042: LIST
9043: LIST
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: LIST
9049: PPUSH
9050: CALL_OW 69
9054: IN
9055: NOT
9056: IFFALSE 9067
// ComExitBuilding ( i ) ;
9058: LD_VAR 0 1
9062: PPUSH
9063: CALL_OW 122
// end else
9067: GO 9093
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
9069: LD_VAR 0 1
9073: PPUSH
9074: LD_VAR 0 15
9078: PPUSH
9079: LD_VAR 0 1
9083: PPUSH
9084: CALL_OW 74
9088: PPUSH
9089: CALL_OW 115
// end ;
9093: GO 8966
9095: POP
9096: POP
// end else
9097: GO 9499
// begin empty := FilterUnitsInArea ( legBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
9099: LD_ADDR_VAR 0 16
9103: PUSH
9104: LD_INT 2
9106: PPUSH
9107: LD_INT 3
9109: PUSH
9110: LD_INT 62
9112: PUSH
9113: EMPTY
9114: LIST
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PUSH
9120: LD_INT 2
9122: PUSH
9123: LD_INT 30
9125: PUSH
9126: LD_INT 32
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: PUSH
9133: LD_INT 30
9135: PUSH
9136: LD_INT 4
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: PUSH
9143: LD_INT 30
9145: PUSH
9146: LD_INT 5
9148: PUSH
9149: EMPTY
9150: LIST
9151: LIST
9152: PUSH
9153: LD_INT 30
9155: PUSH
9156: LD_INT 31
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: PUSH
9163: EMPTY
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: PUSH
9170: EMPTY
9171: LIST
9172: LIST
9173: PPUSH
9174: CALL_OW 70
9178: ST_TO_ADDR
// if empty then
9179: LD_VAR 0 16
9183: IFFALSE 9200
// empty := ReverseArray ( empty ) ;
9185: LD_ADDR_VAR 0 16
9189: PUSH
9190: LD_VAR 0 16
9194: PPUSH
9195: CALL 53729 0 1
9199: ST_TO_ADDR
// for i in sol do
9200: LD_ADDR_VAR 0 1
9204: PUSH
9205: LD_VAR 0 13
9209: PUSH
9210: FOR_IN
9211: IFFALSE 9497
// begin tag := GetTag ( i ) ;
9213: LD_ADDR_VAR 0 8
9217: PUSH
9218: LD_VAR 0 1
9222: PPUSH
9223: CALL_OW 110
9227: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
9228: LD_VAR 0 1
9232: PPUSH
9233: CALL_OW 256
9237: PUSH
9238: LD_INT 1000
9240: LESS
9241: PUSH
9242: LD_VAR 0 8
9246: PUSH
9247: LD_INT 1
9249: NONEQUAL
9250: AND
9251: IFFALSE 9303
// begin SetTag ( i , tHeal ) ;
9253: LD_VAR 0 1
9257: PPUSH
9258: LD_INT 1
9260: PPUSH
9261: CALL_OW 109
// ComMoveXY ( i , legHealPoint [ 1 ] , legHealPoint [ 2 ] ) ;
9265: LD_VAR 0 1
9269: PPUSH
9270: LD_EXP 41
9274: PUSH
9275: LD_INT 1
9277: ARRAY
9278: PPUSH
9279: LD_EXP 41
9283: PUSH
9284: LD_INT 2
9286: ARRAY
9287: PPUSH
9288: CALL_OW 111
// AddComHold ( i ) ;
9292: LD_VAR 0 1
9296: PPUSH
9297: CALL_OW 200
// continue ;
9301: GO 9210
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
9303: LD_VAR 0 1
9307: PPUSH
9308: CALL_OW 256
9312: PUSH
9313: LD_INT 1000
9315: EQUAL
9316: PUSH
9317: LD_VAR 0 8
9321: PUSH
9322: LD_INT 1
9324: EQUAL
9325: AND
9326: IFFALSE 9342
// begin SetTag ( i , 0 ) ;
9328: LD_VAR 0 1
9332: PPUSH
9333: LD_INT 0
9335: PPUSH
9336: CALL_OW 109
// continue ;
9340: GO 9210
// end ; if not IsInArea ( i , legBaseArea ) and not IsInUnit ( i ) then
9342: LD_VAR 0 1
9346: PPUSH
9347: LD_INT 2
9349: PPUSH
9350: CALL_OW 308
9354: NOT
9355: PUSH
9356: LD_VAR 0 1
9360: PPUSH
9361: CALL_OW 310
9365: NOT
9366: AND
9367: IFFALSE 9381
// ComMoveToArea ( i , legBaseArea ) ;
9369: LD_VAR 0 1
9373: PPUSH
9374: LD_INT 2
9376: PPUSH
9377: CALL_OW 113
// if HasTask ( i ) then
9381: LD_VAR 0 1
9385: PPUSH
9386: CALL_OW 314
9390: IFFALSE 9394
// continue ;
9392: GO 9210
// if not IsInUnit ( i ) and not tag and empty then
9394: LD_VAR 0 1
9398: PPUSH
9399: CALL_OW 310
9403: NOT
9404: PUSH
9405: LD_VAR 0 8
9409: NOT
9410: AND
9411: PUSH
9412: LD_VAR 0 16
9416: AND
9417: IFFALSE 9495
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
9419: LD_VAR 0 1
9423: PPUSH
9424: LD_VAR 0 16
9428: PUSH
9429: LD_INT 1
9431: ARRAY
9432: PPUSH
9433: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
9437: LD_VAR 0 16
9441: PUSH
9442: LD_INT 1
9444: ARRAY
9445: PPUSH
9446: CALL_OW 266
9450: PUSH
9451: LD_INT 5
9453: EQUAL
9454: PUSH
9455: LD_INT 50
9457: PPUSH
9458: CALL_OW 13
9462: AND
9463: IFFALSE 9477
// AddComChangeProfession ( i , class_mortar ) ;
9465: LD_VAR 0 1
9469: PPUSH
9470: LD_INT 8
9472: PPUSH
9473: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
9477: LD_ADDR_VAR 0 16
9481: PUSH
9482: LD_VAR 0 16
9486: PPUSH
9487: LD_INT 1
9489: PPUSH
9490: CALL_OW 3
9494: ST_TO_ADDR
// end ; end ;
9495: GO 9210
9497: POP
9498: POP
// end ; end ; end ;
9499: PPOPN 19
9501: END
// every 0 0$2 trigger IsOk ( legCargo ) and legScriptActive and spotByLegion do var cr , enemyInArea ;
9502: LD_EXP 45
9506: PPUSH
9507: CALL_OW 302
9511: PUSH
9512: LD_EXP 4
9516: AND
9517: PUSH
9518: LD_EXP 9
9522: AND
9523: IFFALSE 9805
9525: GO 9527
9527: DISABLE
9528: LD_INT 0
9530: PPUSH
9531: PPUSH
// begin enable ;
9532: ENABLE
// enemyInArea := FilterUnitsInArea ( legBaseArea , [ [ f_enemy , 8 ] , [ f_ok ] ] ) ;
9533: LD_ADDR_VAR 0 2
9537: PUSH
9538: LD_INT 2
9540: PPUSH
9541: LD_INT 81
9543: PUSH
9544: LD_INT 8
9546: PUSH
9547: EMPTY
9548: LIST
9549: LIST
9550: PUSH
9551: LD_INT 50
9553: PUSH
9554: EMPTY
9555: LIST
9556: PUSH
9557: EMPTY
9558: LIST
9559: LIST
9560: PPUSH
9561: CALL_OW 70
9565: ST_TO_ADDR
// cr := GetListOfCratesInArea ( cratesNorthArea ) ;
9566: LD_ADDR_VAR 0 1
9570: PUSH
9571: LD_INT 16
9573: PPUSH
9574: CALL_OW 435
9578: ST_TO_ADDR
// if GetFuel ( legCargo ) < 10 and not See ( 2 , legCargo ) and GetEngine ( legCargo ) = engine_combustion then
9579: LD_EXP 45
9583: PPUSH
9584: CALL_OW 261
9588: PUSH
9589: LD_INT 10
9591: LESS
9592: PUSH
9593: LD_INT 2
9595: PPUSH
9596: LD_EXP 45
9600: PPUSH
9601: CALL_OW 292
9605: NOT
9606: AND
9607: PUSH
9608: LD_EXP 45
9612: PPUSH
9613: CALL_OW 262
9617: PUSH
9618: LD_INT 1
9620: EQUAL
9621: AND
9622: IFFALSE 9636
// SetFuel ( legCargo , 100 ) ;
9624: LD_EXP 45
9628: PPUSH
9629: LD_INT 100
9631: PPUSH
9632: CALL_OW 240
// if not HasTask ( legCargo ) and GetCargo ( legCargo , mat_cans ) < 100 and not enemyInArea then
9636: LD_EXP 45
9640: PPUSH
9641: CALL_OW 314
9645: NOT
9646: PUSH
9647: LD_EXP 45
9651: PPUSH
9652: LD_INT 1
9654: PPUSH
9655: CALL_OW 289
9659: PUSH
9660: LD_INT 100
9662: LESS
9663: AND
9664: PUSH
9665: LD_VAR 0 2
9669: NOT
9670: AND
9671: IFFALSE 9737
// begin if cr then
9673: LD_VAR 0 1
9677: IFFALSE 9708
// ComCollect ( legCargo , cr [ 1 ] , cr [ 2 ] ) else
9679: LD_EXP 45
9683: PPUSH
9684: LD_VAR 0 1
9688: PUSH
9689: LD_INT 1
9691: ARRAY
9692: PPUSH
9693: LD_VAR 0 1
9697: PUSH
9698: LD_INT 2
9700: ARRAY
9701: PPUSH
9702: CALL_OW 117
9706: GO 9735
// if not IsInArea ( legCargo , cratesNorthArea ) then
9708: LD_EXP 45
9712: PPUSH
9713: LD_INT 16
9715: PPUSH
9716: CALL_OW 308
9720: NOT
9721: IFFALSE 9735
// ComMoveToArea ( legCargo , cratesNorthArea ) ;
9723: LD_EXP 45
9727: PPUSH
9728: LD_INT 16
9730: PPUSH
9731: CALL_OW 113
// exit ;
9735: GO 9805
// end ; if enemyInArea and not IsInArea ( legCargo , legBaseArea ) then
9737: LD_VAR 0 2
9741: PUSH
9742: LD_EXP 45
9746: PPUSH
9747: LD_INT 2
9749: PPUSH
9750: CALL_OW 308
9754: NOT
9755: AND
9756: IFFALSE 9775
// ComMoveXY ( legCargo , 194 , 17 ) else
9758: LD_EXP 45
9762: PPUSH
9763: LD_INT 194
9765: PPUSH
9766: LD_INT 17
9768: PPUSH
9769: CALL_OW 111
9773: GO 9805
// if GetCargo ( legCargo , mat_cans ) = 100 then
9775: LD_EXP 45
9779: PPUSH
9780: LD_INT 1
9782: PPUSH
9783: CALL_OW 289
9787: PUSH
9788: LD_INT 100
9790: EQUAL
9791: IFFALSE 9805
// ComGive ( legCargo , legBase ) ;
9793: LD_EXP 45
9797: PPUSH
9798: LD_INT 38
9800: PPUSH
9801: CALL_OW 161
// end ;
9805: PPOPN 2
9807: END
// every 6 6$00 trigger Count ( UnitFilter ( legRTanks , [ f_ok ] ) ) < 5 and legScriptActive and spotByLegion and spotArabianBase do var i , parts , part , level ;
9808: LD_EXP 44
9812: PPUSH
9813: LD_INT 50
9815: PUSH
9816: EMPTY
9817: LIST
9818: PPUSH
9819: CALL_OW 72
9823: PPUSH
9824: CALL 22853 0 1
9828: PUSH
9829: LD_INT 5
9831: LESS
9832: PUSH
9833: LD_EXP 4
9837: AND
9838: PUSH
9839: LD_EXP 9
9843: AND
9844: PUSH
9845: LD_EXP 7
9849: AND
9850: IFFALSE 10054
9852: GO 9854
9854: DISABLE
9855: LD_INT 0
9857: PPUSH
9858: PPUSH
9859: PPUSH
9860: PPUSH
// begin enable ;
9861: ENABLE
// parts := [ [ ar_medium_trike , ar_rocket_launcher ] , [ ar_medium_trike , ar_gun ] , [ ar_medium_trike , ar_flame_thrower ] , [ ar_half_tracked , ar_rocket_launcher ] , [ ar_half_tracked , ar_gatling_gun ] ] ;
9862: LD_ADDR_VAR 0 2
9866: PUSH
9867: LD_INT 13
9869: PUSH
9870: LD_INT 28
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: PUSH
9877: LD_INT 13
9879: PUSH
9880: LD_INT 27
9882: PUSH
9883: EMPTY
9884: LIST
9885: LIST
9886: PUSH
9887: LD_INT 13
9889: PUSH
9890: LD_INT 26
9892: PUSH
9893: EMPTY
9894: LIST
9895: LIST
9896: PUSH
9897: LD_INT 14
9899: PUSH
9900: LD_INT 28
9902: PUSH
9903: EMPTY
9904: LIST
9905: LIST
9906: PUSH
9907: LD_INT 14
9909: PUSH
9910: LD_INT 25
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: PUSH
9917: EMPTY
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: ST_TO_ADDR
// level := tick div 60 60$00 ;
9924: LD_ADDR_VAR 0 4
9928: PUSH
9929: LD_OWVAR 1
9933: PUSH
9934: LD_INT 126000
9936: DIV
9937: ST_TO_ADDR
// for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] + level do
9938: LD_ADDR_VAR 0 1
9942: PUSH
9943: DOUBLE
9944: LD_INT 1
9946: DEC
9947: ST_TO_ADDR
9948: LD_INT 3
9950: PUSH
9951: LD_INT 3
9953: PUSH
9954: LD_INT 4
9956: PUSH
9957: LD_INT 4
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: PUSH
9966: LD_OWVAR 67
9970: ARRAY
9971: PUSH
9972: LD_VAR 0 4
9976: PLUS
9977: PUSH
9978: FOR_TO
9979: IFFALSE 10052
// begin part := parts [ rand ( 1 , parts ) ] ;
9981: LD_ADDR_VAR 0 3
9985: PUSH
9986: LD_VAR 0 2
9990: PUSH
9991: LD_INT 1
9993: PPUSH
9994: LD_VAR 0 2
9998: PPUSH
9999: CALL_OW 12
10003: ARRAY
10004: ST_TO_ADDR
// legConstructList := Join ( legConstructList , [ part [ 1 ] , engine_combustion , control_remote , part [ 2 ] ] ) end ;
10005: LD_ADDR_EXP 40
10009: PUSH
10010: LD_EXP 40
10014: PPUSH
10015: LD_VAR 0 3
10019: PUSH
10020: LD_INT 1
10022: ARRAY
10023: PUSH
10024: LD_INT 1
10026: PUSH
10027: LD_INT 2
10029: PUSH
10030: LD_VAR 0 3
10034: PUSH
10035: LD_INT 2
10037: ARRAY
10038: PUSH
10039: EMPTY
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: PPUSH
10045: CALL 58462 0 2
10049: ST_TO_ADDR
10050: GO 9978
10052: POP
10053: POP
// end ;
10054: PPOPN 4
10056: END
// every 20 20$00 trigger not legionDestroyed and tick <= 80 80$00 do
10057: LD_EXP 12
10061: NOT
10062: PUSH
10063: LD_OWVAR 1
10067: PUSH
10068: LD_INT 168000
10070: LESSEQUAL
10071: AND
10072: IFFALSE 10111
10074: GO 10076
10076: DISABLE
// begin enable ;
10077: ENABLE
// legConstructList := Join ( legConstructList , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] ) ;
10078: LD_ADDR_EXP 40
10082: PUSH
10083: LD_EXP 40
10087: PPUSH
10088: LD_INT 14
10090: PUSH
10091: LD_INT 1
10093: PUSH
10094: LD_INT 1
10096: PUSH
10097: LD_INT 27
10099: PUSH
10100: EMPTY
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: PPUSH
10106: CALL 58462 0 2
10110: ST_TO_ADDR
// end ;
10111: END
// every 0 0$1 trigger legTanks and spotByLegion and spotArabianBase do var i , mech , enemy ;
10112: LD_EXP 43
10116: PUSH
10117: LD_EXP 9
10121: AND
10122: PUSH
10123: LD_EXP 7
10127: AND
10128: IFFALSE 10721
10130: GO 10132
10132: DISABLE
10133: LD_INT 0
10135: PPUSH
10136: PPUSH
10137: PPUSH
// begin enable ;
10138: ENABLE
// if not legTanks then
10139: LD_EXP 43
10143: NOT
10144: IFFALSE 10148
// exit ;
10146: GO 10721
// for i in legTanks do
10148: LD_ADDR_VAR 0 1
10152: PUSH
10153: LD_EXP 43
10157: PUSH
10158: FOR_IN
10159: IFFALSE 10719
// begin if not IsOk ( i ) or GetSide ( i ) <> 8 then
10161: LD_VAR 0 1
10165: PPUSH
10166: CALL_OW 302
10170: NOT
10171: PUSH
10172: LD_VAR 0 1
10176: PPUSH
10177: CALL_OW 255
10181: PUSH
10182: LD_INT 8
10184: NONEQUAL
10185: OR
10186: IFFALSE 10206
// begin legTanks := legTanks diff i ;
10188: LD_ADDR_EXP 43
10192: PUSH
10193: LD_EXP 43
10197: PUSH
10198: LD_VAR 0 1
10202: DIFF
10203: ST_TO_ADDR
// continue ;
10204: GO 10158
// end ; if not GetTag ( i ) and GetControl ( i ) = control_remote then
10206: LD_VAR 0 1
10210: PPUSH
10211: CALL_OW 110
10215: NOT
10216: PUSH
10217: LD_VAR 0 1
10221: PPUSH
10222: CALL_OW 263
10226: PUSH
10227: LD_INT 2
10229: EQUAL
10230: AND
10231: IFFALSE 10245
// SetTag ( i , tAttack ) ;
10233: LD_VAR 0 1
10237: PPUSH
10238: LD_INT 10
10240: PPUSH
10241: CALL_OW 109
// if not GetTag ( i ) or GetTag ( i ) = 0 then
10245: LD_VAR 0 1
10249: PPUSH
10250: CALL_OW 110
10254: NOT
10255: PUSH
10256: LD_VAR 0 1
10260: PPUSH
10261: CALL_OW 110
10265: PUSH
10266: LD_INT 0
10268: EQUAL
10269: OR
10270: IFFALSE 10400
// begin if GetFuel ( i ) < 50 and GetEngine ( i ) = engine_combustion then
10272: LD_VAR 0 1
10276: PPUSH
10277: CALL_OW 261
10281: PUSH
10282: LD_INT 50
10284: LESS
10285: PUSH
10286: LD_VAR 0 1
10290: PPUSH
10291: CALL_OW 262
10295: PUSH
10296: LD_INT 1
10298: EQUAL
10299: AND
10300: IFFALSE 10359
// begin ComMoveXY ( i , 189 , 19 ) ;
10302: LD_VAR 0 1
10306: PPUSH
10307: LD_INT 189
10309: PPUSH
10310: LD_INT 19
10312: PPUSH
10313: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10317: LD_INT 35
10319: PPUSH
10320: CALL_OW 67
// until GetDistUnitXY ( i , 189 , 19 ) < 4 ;
10324: LD_VAR 0 1
10328: PPUSH
10329: LD_INT 189
10331: PPUSH
10332: LD_INT 19
10334: PPUSH
10335: CALL_OW 297
10339: PUSH
10340: LD_INT 4
10342: LESS
10343: IFFALSE 10317
// SetFuel ( i , 100 ) ;
10345: LD_VAR 0 1
10349: PPUSH
10350: LD_INT 100
10352: PPUSH
10353: CALL_OW 240
// end else
10357: GO 10400
// if not IsInArea ( i , legParkingArea ) then
10359: LD_VAR 0 1
10363: PPUSH
10364: LD_INT 15
10366: PPUSH
10367: CALL_OW 308
10371: NOT
10372: IFFALSE 10388
// ComMoveToArea ( i , legParkingArea ) else
10374: LD_VAR 0 1
10378: PPUSH
10379: LD_INT 15
10381: PPUSH
10382: CALL_OW 113
10386: GO 10400
// SetTag ( i , tParking ) ;
10388: LD_VAR 0 1
10392: PPUSH
10393: LD_INT 9
10395: PPUSH
10396: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
10400: LD_VAR 0 1
10404: PPUSH
10405: CALL_OW 110
10409: PUSH
10410: LD_INT 9
10412: EQUAL
10413: IFFALSE 10543
// begin if GetLives ( i ) < 650 then
10415: LD_VAR 0 1
10419: PPUSH
10420: CALL_OW 256
10424: PUSH
10425: LD_INT 650
10427: LESS
10428: IFFALSE 10520
// begin if not IsDrivenBy ( i ) then
10430: LD_VAR 0 1
10434: PPUSH
10435: CALL_OW 311
10439: NOT
10440: IFFALSE 10444
// continue ;
10442: GO 10158
// mech := IsDrivenBy ( i ) ;
10444: LD_ADDR_VAR 0 2
10448: PUSH
10449: LD_VAR 0 1
10453: PPUSH
10454: CALL_OW 311
10458: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
10459: LD_VAR 0 2
10463: PPUSH
10464: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
10468: LD_VAR 0 2
10472: PPUSH
10473: LD_VAR 0 1
10477: PPUSH
10478: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
10482: LD_INT 35
10484: PPUSH
10485: CALL_OW 67
// until GetLives ( i ) = 1000 ;
10489: LD_VAR 0 1
10493: PPUSH
10494: CALL_OW 256
10498: PUSH
10499: LD_INT 1000
10501: EQUAL
10502: IFFALSE 10482
// ComEnterUnit ( mech , i ) ;
10504: LD_VAR 0 2
10508: PPUSH
10509: LD_VAR 0 1
10513: PPUSH
10514: CALL_OW 120
// end else
10518: GO 10543
// if IsDrivenBy ( i ) then
10520: LD_VAR 0 1
10524: PPUSH
10525: CALL_OW 311
10529: IFFALSE 10543
// SetTag ( i , tAttack ) ;
10531: LD_VAR 0 1
10535: PPUSH
10536: LD_INT 10
10538: PPUSH
10539: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
10543: LD_VAR 0 1
10547: PPUSH
10548: CALL_OW 110
10552: PUSH
10553: LD_INT 10
10555: EQUAL
10556: IFFALSE 10717
// begin enemy := FilterUnitsInArea ( legBaseArea , [ f_enemy , 8 ] ) ;
10558: LD_ADDR_VAR 0 3
10562: PUSH
10563: LD_INT 2
10565: PPUSH
10566: LD_INT 81
10568: PUSH
10569: LD_INT 8
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: PPUSH
10576: CALL_OW 70
10580: ST_TO_ADDR
// if GetLives ( i ) < 650 and GetControl ( i ) = control_manual then
10581: LD_VAR 0 1
10585: PPUSH
10586: CALL_OW 256
10590: PUSH
10591: LD_INT 650
10593: LESS
10594: PUSH
10595: LD_VAR 0 1
10599: PPUSH
10600: CALL_OW 263
10604: PUSH
10605: LD_INT 1
10607: EQUAL
10608: AND
10609: IFFALSE 10634
// begin ComStop ( i ) ;
10611: LD_VAR 0 1
10615: PPUSH
10616: CALL_OW 141
// SetTag ( i , 0 ) ;
10620: LD_VAR 0 1
10624: PPUSH
10625: LD_INT 0
10627: PPUSH
10628: CALL_OW 109
// continue ;
10632: GO 10158
// end ; if enemy then
10634: LD_VAR 0 3
10638: IFFALSE 10678
// begin if not HasTask ( i ) then
10640: LD_VAR 0 1
10644: PPUSH
10645: CALL_OW 314
10649: NOT
10650: IFFALSE 10676
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10652: LD_VAR 0 1
10656: PPUSH
10657: LD_VAR 0 3
10661: PPUSH
10662: LD_VAR 0 1
10666: PPUSH
10667: CALL_OW 74
10671: PPUSH
10672: CALL 62690 0 2
// end else
10676: GO 10717
// if legTanks then
10678: LD_EXP 43
10682: IFFALSE 10717
// AgressiveMove ( i , [ [ 200 , 48 ] , [ 210 , 74 ] ] ) ;
10684: LD_VAR 0 1
10688: PPUSH
10689: LD_INT 200
10691: PUSH
10692: LD_INT 48
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: PUSH
10699: LD_INT 210
10701: PUSH
10702: LD_INT 74
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: PPUSH
10713: CALL 61072 0 2
// end ; end ;
10717: GO 10158
10719: POP
10720: POP
// end ;
10721: PPOPN 3
10723: END
// every 3 3$00 trigger not legionDestroyed and Count ( legRTanks ) and spotByLegion and spotArabianBase do var i , tmp , tmp2 ;
10724: LD_EXP 12
10728: NOT
10729: PUSH
10730: LD_EXP 44
10734: PPUSH
10735: CALL 22853 0 1
10739: AND
10740: PUSH
10741: LD_EXP 9
10745: AND
10746: PUSH
10747: LD_EXP 7
10751: AND
10752: IFFALSE 10950
10754: GO 10756
10756: DISABLE
10757: LD_INT 0
10759: PPUSH
10760: PPUSH
10761: PPUSH
// begin enable ;
10762: ENABLE
// tmp := UnitFilter ( legRTanks , [ [ f_linked ] , [ f_ok ] ] ) ;
10763: LD_ADDR_VAR 0 2
10767: PUSH
10768: LD_EXP 44
10772: PPUSH
10773: LD_INT 61
10775: PUSH
10776: EMPTY
10777: LIST
10778: PUSH
10779: LD_INT 50
10781: PUSH
10782: EMPTY
10783: LIST
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: PPUSH
10789: CALL_OW 72
10793: ST_TO_ADDR
// legRTanks := legRTanks diff tmp ;
10794: LD_ADDR_EXP 44
10798: PUSH
10799: LD_EXP 44
10803: PUSH
10804: LD_VAR 0 2
10808: DIFF
10809: ST_TO_ADDR
// if not tmp then
10810: LD_VAR 0 2
10814: NOT
10815: IFFALSE 10819
// exit ;
10817: GO 10950
// tmp2 := UnitFilter ( tmp , [ f_weapon , ar_double_machine_gun ] ) ;
10819: LD_ADDR_VAR 0 3
10823: PUSH
10824: LD_VAR 0 2
10828: PPUSH
10829: LD_INT 34
10831: PUSH
10832: LD_INT 24
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: PPUSH
10839: CALL_OW 72
10843: ST_TO_ADDR
// if tmp2 then
10844: LD_VAR 0 3
10848: IFFALSE 10865
// ComMoveXY ( tmp2 , 241 , 99 ) ;
10850: LD_VAR 0 3
10854: PPUSH
10855: LD_INT 241
10857: PPUSH
10858: LD_INT 99
10860: PPUSH
10861: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10865: LD_INT 35
10867: PPUSH
10868: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
10872: LD_ADDR_VAR 0 2
10876: PUSH
10877: LD_VAR 0 2
10881: PPUSH
10882: LD_INT 50
10884: PUSH
10885: EMPTY
10886: LIST
10887: PPUSH
10888: CALL_OW 72
10892: ST_TO_ADDR
// for i in tmp do
10893: LD_ADDR_VAR 0 1
10897: PUSH
10898: LD_VAR 0 2
10902: PUSH
10903: FOR_IN
10904: IFFALSE 10941
// AgressiveMove ( i , [ [ 200 , 48 ] , [ 210 , 74 ] ] ) ;
10906: LD_VAR 0 1
10910: PPUSH
10911: LD_INT 200
10913: PUSH
10914: LD_INT 48
10916: PUSH
10917: EMPTY
10918: LIST
10919: LIST
10920: PUSH
10921: LD_INT 210
10923: PUSH
10924: LD_INT 74
10926: PUSH
10927: EMPTY
10928: LIST
10929: LIST
10930: PUSH
10931: EMPTY
10932: LIST
10933: LIST
10934: PPUSH
10935: CALL 61072 0 2
10939: GO 10903
10941: POP
10942: POP
// until not tmp ;
10943: LD_VAR 0 2
10947: NOT
10948: IFFALSE 10865
// end ;
10950: PPOPN 3
10952: END
// every 35 35$0 trigger not spotByLegion do var i , un , veh , tmp ;
10953: LD_EXP 9
10957: NOT
10958: IFFALSE 11219
10960: GO 10962
10962: DISABLE
10963: LD_INT 0
10965: PPUSH
10966: PPUSH
10967: PPUSH
10968: PPUSH
// begin uc_side := 8 ;
10969: LD_ADDR_OWVAR 20
10973: PUSH
10974: LD_INT 8
10976: ST_TO_ADDR
// uc_nation := nation_arabian ;
10977: LD_ADDR_OWVAR 21
10981: PUSH
10982: LD_INT 2
10984: ST_TO_ADDR
// for i := 1 to 3 do
10985: LD_ADDR_VAR 0 1
10989: PUSH
10990: DOUBLE
10991: LD_INT 1
10993: DEC
10994: ST_TO_ADDR
10995: LD_INT 3
10997: PUSH
10998: FOR_TO
10999: IFFALSE 11134
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 100 ) ;
11001: LD_INT 14
11003: PPUSH
11004: LD_INT 3
11006: PPUSH
11007: LD_INT 1
11009: PPUSH
11010: LD_INT 27
11012: PUSH
11013: LD_INT 25
11015: PUSH
11016: EMPTY
11017: LIST
11018: LIST
11019: PUSH
11020: LD_VAR 0 1
11024: PUSH
11025: LD_INT 2
11027: MOD
11028: PUSH
11029: LD_INT 1
11031: PLUS
11032: ARRAY
11033: PPUSH
11034: LD_INT 100
11036: PPUSH
11037: CALL 25591 0 5
// veh := CreateVehicle ;
11041: LD_ADDR_VAR 0 3
11045: PUSH
11046: CALL_OW 45
11050: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
11051: LD_VAR 0 3
11055: PPUSH
11056: LD_INT 5
11058: PPUSH
11059: CALL_OW 233
// PlaceUnitArea ( veh , southSpawnArea , false ) ;
11063: LD_VAR 0 3
11067: PPUSH
11068: LD_INT 44
11070: PPUSH
11071: LD_INT 0
11073: PPUSH
11074: CALL_OW 49
// PrepareMechanic ( false , 6 ) ;
11078: LD_INT 0
11080: PPUSH
11081: LD_INT 6
11083: PPUSH
11084: CALL_OW 383
// un := CreateHuman ;
11088: LD_ADDR_VAR 0 2
11092: PUSH
11093: CALL_OW 44
11097: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
11098: LD_VAR 0 2
11102: PPUSH
11103: LD_VAR 0 3
11107: PPUSH
11108: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
11112: LD_ADDR_VAR 0 4
11116: PUSH
11117: LD_VAR 0 4
11121: PPUSH
11122: LD_VAR 0 3
11126: PPUSH
11127: CALL 58462 0 2
11131: ST_TO_ADDR
// end ;
11132: GO 10998
11134: POP
11135: POP
// ComMoveXY ( tmp , 219 , 110 ) ;
11136: LD_VAR 0 4
11140: PPUSH
11141: LD_INT 219
11143: PPUSH
11144: LD_INT 110
11146: PPUSH
11147: CALL_OW 111
// AddComMoveXY ( tmp , 220 , 94 ) ;
11151: LD_VAR 0 4
11155: PPUSH
11156: LD_INT 220
11158: PPUSH
11159: LD_INT 94
11161: PPUSH
11162: CALL_OW 171
// AddComMoveXY ( tmp , 209 , 66 ) ;
11166: LD_VAR 0 4
11170: PPUSH
11171: LD_INT 209
11173: PPUSH
11174: LD_INT 66
11176: PPUSH
11177: CALL_OW 171
// AddComMoveXY ( tmp , 189 , 22 ) ;
11181: LD_VAR 0 4
11185: PPUSH
11186: LD_INT 189
11188: PPUSH
11189: LD_INT 22
11191: PPUSH
11192: CALL_OW 171
// wait ( 0 0$10 ) ;
11196: LD_INT 350
11198: PPUSH
11199: CALL_OW 67
// legTanks := legTanks union tmp ;
11203: LD_ADDR_EXP 43
11207: PUSH
11208: LD_EXP 43
11212: PUSH
11213: LD_VAR 0 4
11217: UNION
11218: ST_TO_ADDR
// end ; end_of_file
11219: PPOPN 4
11221: END
// export function CreateNature ; var i , areas , amount ; begin
11222: LD_INT 0
11224: PPUSH
11225: PPUSH
11226: PPUSH
11227: PPUSH
// PrepareTiger ( 0 ) ;
11228: LD_INT 0
11230: PPUSH
11231: CALL 54838 0 1
// for i := 1 to [ 10 , 8 , 5 , 5 ] [ Difficulty ] do
11235: LD_ADDR_VAR 0 2
11239: PUSH
11240: DOUBLE
11241: LD_INT 1
11243: DEC
11244: ST_TO_ADDR
11245: LD_INT 10
11247: PUSH
11248: LD_INT 8
11250: PUSH
11251: LD_INT 5
11253: PUSH
11254: LD_INT 5
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: PUSH
11263: LD_OWVAR 67
11267: ARRAY
11268: PUSH
11269: FOR_TO
11270: IFFALSE 11289
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
11272: CALL_OW 44
11276: PPUSH
11277: LD_INT 7
11279: PPUSH
11280: LD_INT 0
11282: PPUSH
11283: CALL_OW 49
11287: GO 11269
11289: POP
11290: POP
// PrepareBird ;
11291: CALL 55019 0 0
// for i := 1 to 3 do
11295: LD_ADDR_VAR 0 2
11299: PUSH
11300: DOUBLE
11301: LD_INT 1
11303: DEC
11304: ST_TO_ADDR
11305: LD_INT 3
11307: PUSH
11308: FOR_TO
11309: IFFALSE 11328
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
11311: CALL_OW 44
11315: PPUSH
11316: LD_INT 7
11318: PPUSH
11319: LD_INT 0
11321: PPUSH
11322: CALL_OW 49
11326: GO 11308
11328: POP
11329: POP
// PrepareHorse ;
11330: CALL 55059 0 0
// for i := 1 to 3 do
11334: LD_ADDR_VAR 0 2
11338: PUSH
11339: DOUBLE
11340: LD_INT 1
11342: DEC
11343: ST_TO_ADDR
11344: LD_INT 3
11346: PUSH
11347: FOR_TO
11348: IFFALSE 11367
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
11350: CALL_OW 44
11354: PPUSH
11355: LD_INT 7
11357: PPUSH
11358: LD_INT 0
11360: PPUSH
11361: CALL_OW 49
11365: GO 11347
11367: POP
11368: POP
// PrepareFrog ;
11369: CALL 54939 0 0
// for i := 1 to 3 do
11373: LD_ADDR_VAR 0 2
11377: PUSH
11378: DOUBLE
11379: LD_INT 1
11381: DEC
11382: ST_TO_ADDR
11383: LD_INT 3
11385: PUSH
11386: FOR_TO
11387: IFFALSE 11406
// PlaceUnitArea ( CreateHuman , frogArea , false ) ;
11389: CALL_OW 44
11393: PPUSH
11394: LD_INT 8
11396: PPUSH
11397: LD_INT 0
11399: PPUSH
11400: CALL_OW 49
11404: GO 11386
11406: POP
11407: POP
// amount := [ 3 , 2 , 2 , 1 ] [ Difficulty ] ;
11408: LD_ADDR_VAR 0 4
11412: PUSH
11413: LD_INT 3
11415: PUSH
11416: LD_INT 2
11418: PUSH
11419: LD_INT 2
11421: PUSH
11422: LD_INT 1
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: PUSH
11431: LD_OWVAR 67
11435: ARRAY
11436: ST_TO_ADDR
// areas := [ mastodont1Area , mastodont2Area , mastodont3Area , mastodont4Area ] ;
11437: LD_ADDR_VAR 0 3
11441: PUSH
11442: LD_INT 18
11444: PUSH
11445: LD_INT 19
11447: PUSH
11448: LD_INT 20
11450: PUSH
11451: LD_INT 21
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: ST_TO_ADDR
// PrepareMastodont ;
11460: CALL 55099 0 0
// for i := 1 to amount do
11464: LD_ADDR_VAR 0 2
11468: PUSH
11469: DOUBLE
11470: LD_INT 1
11472: DEC
11473: ST_TO_ADDR
11474: LD_VAR 0 4
11478: PUSH
11479: FOR_TO
11480: IFFALSE 11517
// PlaceUnitArea ( CreateVehicle , areas [ ( i - 1 ) + Difficulty ] , false ) ;
11482: CALL_OW 45
11486: PPUSH
11487: LD_VAR 0 3
11491: PUSH
11492: LD_VAR 0 2
11496: PUSH
11497: LD_INT 1
11499: MINUS
11500: PUSH
11501: LD_OWVAR 67
11505: PLUS
11506: ARRAY
11507: PPUSH
11508: LD_INT 0
11510: PPUSH
11511: CALL_OW 49
11515: GO 11479
11517: POP
11518: POP
// PrepareApeman ( 0 ) ;
11519: LD_INT 0
11521: PPUSH
11522: CALL 54710 0 1
// hc_skills := [ 4 , 2 , 0 , 0 ] ;
11526: LD_ADDR_OWVAR 31
11530: PUSH
11531: LD_INT 4
11533: PUSH
11534: LD_INT 2
11536: PUSH
11537: LD_INT 0
11539: PUSH
11540: LD_INT 0
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: ST_TO_ADDR
// for i := 1 to [ 9 , 7 , 6 , 5 ] [ Difficulty ] do
11549: LD_ADDR_VAR 0 2
11553: PUSH
11554: DOUBLE
11555: LD_INT 1
11557: DEC
11558: ST_TO_ADDR
11559: LD_INT 9
11561: PUSH
11562: LD_INT 7
11564: PUSH
11565: LD_INT 6
11567: PUSH
11568: LD_INT 5
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: PUSH
11577: LD_OWVAR 67
11581: ARRAY
11582: PUSH
11583: FOR_TO
11584: IFFALSE 11603
// PlaceUnitArea ( CreateHuman , apeArea , false ) ;
11586: CALL_OW 44
11590: PPUSH
11591: LD_INT 6
11593: PPUSH
11594: LD_INT 0
11596: PPUSH
11597: CALL_OW 49
11601: GO 11583
11603: POP
11604: POP
// for i := 1 to [ 8 , 7 , 6 , 5 ] [ Difficulty ] do
11605: LD_ADDR_VAR 0 2
11609: PUSH
11610: DOUBLE
11611: LD_INT 1
11613: DEC
11614: ST_TO_ADDR
11615: LD_INT 8
11617: PUSH
11618: LD_INT 7
11620: PUSH
11621: LD_INT 6
11623: PUSH
11624: LD_INT 5
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: PUSH
11633: LD_OWVAR 67
11637: ARRAY
11638: PUSH
11639: FOR_TO
11640: IFFALSE 11665
// PlaceUnitXYR ( CreateHuman , 274 , 133 , 8 , false ) ;
11642: CALL_OW 44
11646: PPUSH
11647: LD_INT 274
11649: PPUSH
11650: LD_INT 133
11652: PPUSH
11653: LD_INT 8
11655: PPUSH
11656: LD_INT 0
11658: PPUSH
11659: CALL_OW 50
11663: GO 11639
11665: POP
11666: POP
// for i := 1 to [ 6 , 5 , 4 , 4 ] [ Difficulty ] do
11667: LD_ADDR_VAR 0 2
11671: PUSH
11672: DOUBLE
11673: LD_INT 1
11675: DEC
11676: ST_TO_ADDR
11677: LD_INT 6
11679: PUSH
11680: LD_INT 5
11682: PUSH
11683: LD_INT 4
11685: PUSH
11686: LD_INT 4
11688: PUSH
11689: EMPTY
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: PUSH
11695: LD_OWVAR 67
11699: ARRAY
11700: PUSH
11701: FOR_TO
11702: IFFALSE 11727
// PlaceUnitXYR ( CreateHuman , 208 , 142 , 8 , false ) ;
11704: CALL_OW 44
11708: PPUSH
11709: LD_INT 208
11711: PPUSH
11712: LD_INT 142
11714: PPUSH
11715: LD_INT 8
11717: PPUSH
11718: LD_INT 0
11720: PPUSH
11721: CALL_OW 50
11725: GO 11701
11727: POP
11728: POP
// end ;
11729: LD_VAR 0 1
11733: RET
// export function AreInArea ( units , area ) ; var i ; begin
11734: LD_INT 0
11736: PPUSH
11737: PPUSH
// result := false ;
11738: LD_ADDR_VAR 0 3
11742: PUSH
11743: LD_INT 0
11745: ST_TO_ADDR
// if not units then
11746: LD_VAR 0 1
11750: NOT
11751: IFFALSE 11755
// exit ;
11753: GO 11821
// for i in units do
11755: LD_ADDR_VAR 0 4
11759: PUSH
11760: LD_VAR 0 1
11764: PUSH
11765: FOR_IN
11766: IFFALSE 11819
// if IsInArea ( i , area ) or IsInArea ( IsInUnit ( i ) , area ) then
11768: LD_VAR 0 4
11772: PPUSH
11773: LD_VAR 0 2
11777: PPUSH
11778: CALL_OW 308
11782: PUSH
11783: LD_VAR 0 4
11787: PPUSH
11788: CALL_OW 310
11792: PPUSH
11793: LD_VAR 0 2
11797: PPUSH
11798: CALL_OW 308
11802: OR
11803: IFFALSE 11817
// begin result := true ;
11805: LD_ADDR_VAR 0 3
11809: PUSH
11810: LD_INT 1
11812: ST_TO_ADDR
// exit ;
11813: POP
11814: POP
11815: GO 11821
// end ;
11817: GO 11765
11819: POP
11820: POP
// end ; end_of_file
11821: LD_VAR 0 3
11825: RET
// export function Action ; var i , mech , veh , amTroops ; begin
11826: LD_INT 0
11828: PPUSH
11829: PPUSH
11830: PPUSH
11831: PPUSH
11832: PPUSH
// SaveForQuickRestart ;
11833: CALL_OW 22
// InGameOn ;
11837: CALL_OW 8
// CenterNowOnXY ( 84 , 28 ) ;
11841: LD_INT 84
11843: PPUSH
11844: LD_INT 28
11846: PPUSH
11847: CALL_OW 86
// RevealFogArea ( 2 , heikeVisibleRoadArea ) ;
11851: LD_INT 2
11853: PPUSH
11854: LD_INT 9
11856: PPUSH
11857: CALL_OW 332
// ComMoveXY ( Heike , 90 , 30 ) ;
11861: LD_EXP 23
11865: PPUSH
11866: LD_INT 90
11868: PPUSH
11869: LD_INT 30
11871: PPUSH
11872: CALL_OW 111
// uc_side := 1 ;
11876: LD_ADDR_OWVAR 20
11880: PUSH
11881: LD_INT 1
11883: ST_TO_ADDR
// uc_nation := nation_american ;
11884: LD_ADDR_OWVAR 21
11888: PUSH
11889: LD_INT 1
11891: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 66 ) ;
11892: LD_INT 3
11894: PPUSH
11895: LD_INT 1
11897: PPUSH
11898: LD_INT 1
11900: PPUSH
11901: LD_INT 9
11903: PPUSH
11904: LD_INT 66
11906: PPUSH
11907: CALL 25591 0 5
// veh := CreateVehicle ;
11911: LD_ADDR_VAR 0 4
11915: PUSH
11916: CALL_OW 45
11920: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
11921: LD_VAR 0 4
11925: PPUSH
11926: LD_INT 1
11928: PPUSH
11929: CALL_OW 233
// PlaceUnitXY ( veh , 80 , 27 , false ) ;
11933: LD_VAR 0 4
11937: PPUSH
11938: LD_INT 80
11940: PPUSH
11941: LD_INT 27
11943: PPUSH
11944: LD_INT 0
11946: PPUSH
11947: CALL_OW 48
// PrepareMechanic ( sex_male , 8 ) ;
11951: LD_INT 1
11953: PPUSH
11954: LD_INT 8
11956: PPUSH
11957: CALL_OW 383
// mech := CreateHuman ;
11961: LD_ADDR_VAR 0 3
11965: PUSH
11966: CALL_OW 44
11970: ST_TO_ADDR
// PlaceHumanInUnit ( mech , veh ) ;
11971: LD_VAR 0 3
11975: PPUSH
11976: LD_VAR 0 4
11980: PPUSH
11981: CALL_OW 52
// repeat wait ( 0 0$1 ) ;
11985: LD_INT 35
11987: PPUSH
11988: CALL_OW 67
// until HexInfo ( 90 , 30 ) ;
11992: LD_INT 90
11994: PPUSH
11995: LD_INT 30
11997: PPUSH
11998: CALL_OW 428
12002: IFFALSE 11985
// PlaceSeeing ( 80 , 27 , 2 , - 6 ) ;
12004: LD_INT 80
12006: PPUSH
12007: LD_INT 27
12009: PPUSH
12010: LD_INT 2
12012: PPUSH
12013: LD_INT 6
12015: NEG
12016: PPUSH
12017: CALL_OW 330
// CenterNowOnXY ( 80 , 27 ) ;
12021: LD_INT 80
12023: PPUSH
12024: LD_INT 27
12026: PPUSH
12027: CALL_OW 86
// DialogueOn ;
12031: CALL_OW 6
// Say ( Heike , DH-Start-1 ) ;
12035: LD_EXP 23
12039: PPUSH
12040: LD_STRING DH-Start-1
12042: PPUSH
12043: CALL_OW 88
// DialogueOff ;
12047: CALL_OW 7
// ComAttackUnit ( Heike , veh ) ;
12051: LD_EXP 23
12055: PPUSH
12056: LD_VAR 0 4
12060: PPUSH
12061: CALL_OW 115
// wait ( 0 0$1 ) ;
12065: LD_INT 35
12067: PPUSH
12068: CALL_OW 67
// SetLives ( IsInUnit ( Heike ) , 200 ) ;
12072: LD_EXP 23
12076: PPUSH
12077: CALL_OW 310
12081: PPUSH
12082: LD_INT 200
12084: PPUSH
12085: CALL_OW 234
// wait ( 0 0$0.3 ) ;
12089: LD_INT 10
12091: PPUSH
12092: CALL_OW 67
// DialogueOn ;
12096: CALL_OW 6
// Say ( Heike , DH-Start-2 ) ;
12100: LD_EXP 23
12104: PPUSH
12105: LD_STRING DH-Start-2
12107: PPUSH
12108: CALL_OW 88
// DialogueOff ;
12112: CALL_OW 7
// ComAttackUnit ( Heike , veh ) ;
12116: LD_EXP 23
12120: PPUSH
12121: LD_VAR 0 4
12125: PPUSH
12126: CALL_OW 115
// wait ( 0 0$0.2 ) ;
12130: LD_INT 7
12132: PPUSH
12133: CALL_OW 67
// ComCrawl ( Heike ) ;
12137: LD_EXP 23
12141: PPUSH
12142: CALL_OW 137
// wait ( 0 0$3 ) ;
12146: LD_INT 105
12148: PPUSH
12149: CALL_OW 67
// PlaceUnitXY ( omarVehicle , 82 , 43 , false ) ;
12153: LD_EXP 26
12157: PPUSH
12158: LD_INT 82
12160: PPUSH
12161: LD_INT 43
12163: PPUSH
12164: LD_INT 0
12166: PPUSH
12167: CALL_OW 48
// PlaceHumanInUnit ( Omar , omarVehicle ) ;
12171: LD_EXP 24
12175: PPUSH
12176: LD_EXP 26
12180: PPUSH
12181: CALL_OW 52
// ComMoveXY ( Omar , 79 , 32 ) ;
12185: LD_EXP 24
12189: PPUSH
12190: LD_INT 79
12192: PPUSH
12193: LD_INT 32
12195: PPUSH
12196: CALL_OW 111
// wait ( 0 0$1 ) ;
12200: LD_INT 35
12202: PPUSH
12203: CALL_OW 67
// PlaceSeeing ( 79 , 32 , 2 , - 8 ) ;
12207: LD_INT 79
12209: PPUSH
12210: LD_INT 32
12212: PPUSH
12213: LD_INT 2
12215: PPUSH
12216: LD_INT 8
12218: NEG
12219: PPUSH
12220: CALL_OW 330
// wait ( 0 0$3 ) ;
12224: LD_INT 105
12226: PPUSH
12227: CALL_OW 67
// SetLives ( veh , 200 ) ;
12231: LD_VAR 0 4
12235: PPUSH
12236: LD_INT 200
12238: PPUSH
12239: CALL_OW 234
// wait ( 0 0$1 ) ;
12243: LD_INT 35
12245: PPUSH
12246: CALL_OW 67
// SetLives ( mech , 10 ) ;
12250: LD_VAR 0 3
12254: PPUSH
12255: LD_INT 10
12257: PPUSH
12258: CALL_OW 234
// wait ( 0 0$2 ) ;
12262: LD_INT 70
12264: PPUSH
12265: CALL_OW 67
// ComWalk ( Heike ) ;
12269: LD_EXP 23
12273: PPUSH
12274: CALL_OW 138
// wait ( 1 ) ;
12278: LD_INT 1
12280: PPUSH
12281: CALL_OW 67
// ComMoveXY ( Heike , 81 , 25 ) ;
12285: LD_EXP 23
12289: PPUSH
12290: LD_INT 81
12292: PPUSH
12293: LD_INT 25
12295: PPUSH
12296: CALL_OW 111
// AddComMoveXY ( Heike , 72 , 25 ) ;
12300: LD_EXP 23
12304: PPUSH
12305: LD_INT 72
12307: PPUSH
12308: LD_INT 25
12310: PPUSH
12311: CALL_OW 171
// wait ( 0 0$3 ) ;
12315: LD_INT 105
12317: PPUSH
12318: CALL_OW 67
// ComExitVehicle ( Omar ) ;
12322: LD_EXP 24
12326: PPUSH
12327: CALL_OW 121
// wait ( 1 ) ;
12331: LD_INT 1
12333: PPUSH
12334: CALL_OW 67
// ComMoveXY ( Omar , 77 , 28 ) ;
12338: LD_EXP 24
12342: PPUSH
12343: LD_INT 77
12345: PPUSH
12346: LD_INT 28
12348: PPUSH
12349: CALL_OW 111
// AddComTurnUnit ( Omar , Heike ) ;
12353: LD_EXP 24
12357: PPUSH
12358: LD_EXP 23
12362: PPUSH
12363: CALL_OW 179
// Say ( Omar , DO-Start-3 ) ;
12367: LD_EXP 24
12371: PPUSH
12372: LD_STRING DO-Start-3
12374: PPUSH
12375: CALL_OW 88
// repeat wait ( 3 ) ;
12379: LD_INT 3
12381: PPUSH
12382: CALL_OW 67
// until IsAt ( Heike , 72 , 25 ) ;
12386: LD_EXP 23
12390: PPUSH
12391: LD_INT 72
12393: PPUSH
12394: LD_INT 25
12396: PPUSH
12397: CALL_OW 307
12401: IFFALSE 12379
// ComHold ( Heike ) ;
12403: LD_EXP 23
12407: PPUSH
12408: CALL_OW 140
// ComTurnUnit ( Omar , Heike ) ;
12412: LD_EXP 24
12416: PPUSH
12417: LD_EXP 23
12421: PPUSH
12422: CALL_OW 119
// ComMoveUnit ( Heike , Omar ) ;
12426: LD_EXP 23
12430: PPUSH
12431: LD_EXP 24
12435: PPUSH
12436: CALL_OW 112
// wait ( 0 0$1 ) ;
12440: LD_INT 35
12442: PPUSH
12443: CALL_OW 67
// ComTurnUnit ( Heike , Omar ) ;
12447: LD_EXP 23
12451: PPUSH
12452: LD_EXP 24
12456: PPUSH
12457: CALL_OW 119
// Say ( Heike , DH-Start-4 ) ;
12461: LD_EXP 23
12465: PPUSH
12466: LD_STRING DH-Start-4
12468: PPUSH
12469: CALL_OW 88
// Say ( Omar , DO-Start-5 ) ;
12473: LD_EXP 24
12477: PPUSH
12478: LD_STRING DO-Start-5
12480: PPUSH
12481: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
12485: LD_EXP 23
12489: PPUSH
12490: LD_STRING DH-Start-6
12492: PPUSH
12493: CALL_OW 88
// Say ( Omar , DO-Start-7 ) ;
12497: LD_EXP 24
12501: PPUSH
12502: LD_STRING DO-Start-7
12504: PPUSH
12505: CALL_OW 88
// if Query ( QOmar ) = 2 then
12509: LD_STRING QOmar
12511: PPUSH
12512: CALL_OW 97
12516: PUSH
12517: LD_INT 2
12519: EQUAL
12520: IFFALSE 12825
// begin Say ( Heike , DH-QuestionN-1 ) ;
12522: LD_EXP 23
12526: PPUSH
12527: LD_STRING DH-QuestionN-1
12529: PPUSH
12530: CALL_OW 88
// ComMoveXY ( Heike , 58 , 27 ) ;
12534: LD_EXP 23
12538: PPUSH
12539: LD_INT 58
12541: PPUSH
12542: LD_INT 27
12544: PPUSH
12545: CALL_OW 111
// wait ( 0 0$2 ) ;
12549: LD_INT 70
12551: PPUSH
12552: CALL_OW 67
// ComEnterUnit ( Omar , omarVehicle ) ;
12556: LD_EXP 24
12560: PPUSH
12561: LD_EXP 26
12565: PPUSH
12566: CALL_OW 120
// RemoveSeeing ( 79 , 32 , 2 ) ;
12570: LD_INT 79
12572: PPUSH
12573: LD_INT 32
12575: PPUSH
12576: LD_INT 2
12578: PPUSH
12579: CALL_OW 331
// RemoveSeeing ( 80 , 27 , 2 ) ;
12583: LD_INT 80
12585: PPUSH
12586: LD_INT 27
12588: PPUSH
12589: LD_INT 2
12591: PPUSH
12592: CALL_OW 331
// CenterOnXY ( 58 , 27 ) ;
12596: LD_INT 58
12598: PPUSH
12599: LD_INT 27
12601: PPUSH
12602: CALL_OW 84
// repeat wait ( 3 ) ;
12606: LD_INT 3
12608: PPUSH
12609: CALL_OW 67
// until GetDistUnitXY ( Heike , 88 , 27 ) ;
12613: LD_EXP 23
12617: PPUSH
12618: LD_INT 88
12620: PPUSH
12621: LD_INT 27
12623: PPUSH
12624: CALL_OW 297
12628: IFFALSE 12606
// uc_side := 1 ;
12630: LD_ADDR_OWVAR 20
12634: PUSH
12635: LD_INT 1
12637: ST_TO_ADDR
// uc_nation := nation_american ;
12638: LD_ADDR_OWVAR 21
12642: PUSH
12643: LD_INT 1
12645: ST_TO_ADDR
// amTroops := [ ] ;
12646: LD_ADDR_VAR 0 5
12650: PUSH
12651: EMPTY
12652: ST_TO_ADDR
// for i := 1 to 3 do
12653: LD_ADDR_VAR 0 2
12657: PUSH
12658: DOUBLE
12659: LD_INT 1
12661: DEC
12662: ST_TO_ADDR
12663: LD_INT 3
12665: PUSH
12666: FOR_TO
12667: IFFALSE 12760
// begin PrepareSoldier ( false , 10 ) ;
12669: LD_INT 0
12671: PPUSH
12672: LD_INT 10
12674: PPUSH
12675: CALL_OW 381
// amTroops := Join ( amTroops , CreateHuman ) ;
12679: LD_ADDR_VAR 0 5
12683: PUSH
12684: LD_VAR 0 5
12688: PPUSH
12689: CALL_OW 44
12693: PPUSH
12694: CALL 58462 0 2
12698: ST_TO_ADDR
// SetDir ( amTroops [ i ] , 2 ) ;
12699: LD_VAR 0 5
12703: PUSH
12704: LD_VAR 0 2
12708: ARRAY
12709: PPUSH
12710: LD_INT 2
12712: PPUSH
12713: CALL_OW 233
// PlaceUnitArea ( amTroops [ i ] , heikeTrapArea , false ) ;
12717: LD_VAR 0 5
12721: PUSH
12722: LD_VAR 0 2
12726: ARRAY
12727: PPUSH
12728: LD_INT 10
12730: PPUSH
12731: LD_INT 0
12733: PPUSH
12734: CALL_OW 49
// ComAttackUnit ( amTroops [ i ] , Heike ) ;
12738: LD_VAR 0 5
12742: PUSH
12743: LD_VAR 0 2
12747: ARRAY
12748: PPUSH
12749: LD_EXP 23
12753: PPUSH
12754: CALL_OW 115
// end ;
12758: GO 12666
12760: POP
12761: POP
// ComAttackUnit ( Heike , amTroops [ 1 ] ) ;
12762: LD_EXP 23
12766: PPUSH
12767: LD_VAR 0 5
12771: PUSH
12772: LD_INT 1
12774: ARRAY
12775: PPUSH
12776: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
12780: LD_INT 35
12782: PPUSH
12783: CALL_OW 67
// until IsDead ( Heike ) or IsDying ( Heike ) ;
12787: LD_EXP 23
12791: PPUSH
12792: CALL_OW 301
12796: PUSH
12797: LD_EXP 23
12801: PPUSH
12802: CALL_OW 303
12806: OR
12807: IFFALSE 12780
// wait ( 0 0$2 ) ;
12809: LD_INT 70
12811: PPUSH
12812: CALL_OW 67
// YouLost ( Heike ) ;
12816: LD_STRING Heike
12818: PPUSH
12819: CALL_OW 104
// exit ;
12823: GO 13745
// end ; Say ( Heike , DH-QuestionY-1 ) ;
12825: LD_EXP 23
12829: PPUSH
12830: LD_STRING DH-QuestionY-1
12832: PPUSH
12833: CALL_OW 88
// wait ( 0 0$0.3 ) ;
12837: LD_INT 10
12839: PPUSH
12840: CALL_OW 67
// Say ( Omar , DO-Story-1 ) ;
12844: LD_EXP 24
12848: PPUSH
12849: LD_STRING DO-Story-1
12851: PPUSH
12852: CALL_OW 88
// Say ( Omar , DO-Story-2 ) ;
12856: LD_EXP 24
12860: PPUSH
12861: LD_STRING DO-Story-2
12863: PPUSH
12864: CALL_OW 88
// Say ( Omar , DO-Story-3 ) ;
12868: LD_EXP 24
12872: PPUSH
12873: LD_STRING DO-Story-3
12875: PPUSH
12876: CALL_OW 88
// Say ( Omar , DO-Story-4 ) ;
12880: LD_EXP 24
12884: PPUSH
12885: LD_STRING DO-Story-4
12887: PPUSH
12888: CALL_OW 88
// Say ( Heike , DH-Story-5 ) ;
12892: LD_EXP 23
12896: PPUSH
12897: LD_STRING DH-Story-5
12899: PPUSH
12900: CALL_OW 88
// Say ( Omar , DO-Story-6 ) ;
12904: LD_EXP 24
12908: PPUSH
12909: LD_STRING DO-Story-6
12911: PPUSH
12912: CALL_OW 88
// Say ( Omar , DO-Story-7 ) ;
12916: LD_EXP 24
12920: PPUSH
12921: LD_STRING DO-Story-7
12923: PPUSH
12924: CALL_OW 88
// ComMoveXY ( Heike , 82 , 44 ) ;
12928: LD_EXP 23
12932: PPUSH
12933: LD_INT 82
12935: PPUSH
12936: LD_INT 44
12938: PPUSH
12939: CALL_OW 111
// AddComHold ( Heike ) ;
12943: LD_EXP 23
12947: PPUSH
12948: CALL_OW 200
// wait ( 0 0$4 ) ;
12952: LD_INT 140
12954: PPUSH
12955: CALL_OW 67
// ComMoveXY ( Omar , 82 , 41 ) ;
12959: LD_EXP 24
12963: PPUSH
12964: LD_INT 82
12966: PPUSH
12967: LD_INT 41
12969: PPUSH
12970: CALL_OW 111
// AddComTurnUnit ( Omar , Heike ) ;
12974: LD_EXP 24
12978: PPUSH
12979: LD_EXP 23
12983: PPUSH
12984: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
12988: LD_INT 35
12990: PPUSH
12991: CALL_OW 67
// until IsAt ( Heike , 82 , 44 ) ;
12995: LD_EXP 23
12999: PPUSH
13000: LD_INT 82
13002: PPUSH
13003: LD_INT 44
13005: PPUSH
13006: CALL_OW 307
13010: IFFALSE 12988
// ComTurnXY ( Heike , 81 , 47 ) ;
13012: LD_EXP 23
13016: PPUSH
13017: LD_INT 81
13019: PPUSH
13020: LD_INT 47
13022: PPUSH
13023: CALL_OW 118
// Say ( Heike , DH-Story-8 ) ;
13027: LD_EXP 23
13031: PPUSH
13032: LD_STRING DH-Story-8
13034: PPUSH
13035: CALL_OW 88
// Say ( Omar , DO-Story-9 ) ;
13039: LD_EXP 24
13043: PPUSH
13044: LD_STRING DO-Story-9
13046: PPUSH
13047: CALL_OW 88
// Say ( Omar , DO-Story-10 ) ;
13051: LD_EXP 24
13055: PPUSH
13056: LD_STRING DO-Story-10
13058: PPUSH
13059: CALL_OW 88
// ComTurnUnit ( Heike , Omar ) ;
13063: LD_EXP 23
13067: PPUSH
13068: LD_EXP 24
13072: PPUSH
13073: CALL_OW 119
// Say ( Heike , DH-Story-11 ) ;
13077: LD_EXP 23
13081: PPUSH
13082: LD_STRING DH-Story-11
13084: PPUSH
13085: CALL_OW 88
// ComMoveUnit ( Omar , Heike ) ;
13089: LD_EXP 24
13093: PPUSH
13094: LD_EXP 23
13098: PPUSH
13099: CALL_OW 112
// wait ( 0 0$0.3 ) ;
13103: LD_INT 10
13105: PPUSH
13106: CALL_OW 67
// ComTurnUnit ( Omar , Heike ) ;
13110: LD_EXP 24
13114: PPUSH
13115: LD_EXP 23
13119: PPUSH
13120: CALL_OW 119
// Say ( Omar , DO-Story-12 ) ;
13124: LD_EXP 24
13128: PPUSH
13129: LD_STRING DO-Story-12
13131: PPUSH
13132: CALL_OW 88
// Say ( Heike , DH-Story-13 ) ;
13136: LD_EXP 23
13140: PPUSH
13141: LD_STRING DH-Story-13
13143: PPUSH
13144: CALL_OW 88
// Say ( Omar , DO-Story-14 ) ;
13148: LD_EXP 24
13152: PPUSH
13153: LD_STRING DO-Story-14
13155: PPUSH
13156: CALL_OW 88
// Say ( Omar , DO-Story-15 ) ;
13160: LD_EXP 24
13164: PPUSH
13165: LD_STRING DO-Story-15
13167: PPUSH
13168: CALL_OW 88
// CenterOnXY ( 84 , 48 ) ;
13172: LD_INT 84
13174: PPUSH
13175: LD_INT 48
13177: PPUSH
13178: CALL_OW 84
// ComMoveXY ( Heike , 84 , 48 ) ;
13182: LD_EXP 23
13186: PPUSH
13187: LD_INT 84
13189: PPUSH
13190: LD_INT 48
13192: PPUSH
13193: CALL_OW 111
// AddComTurnXY ( Heike , 84 , 49 ) ;
13197: LD_EXP 23
13201: PPUSH
13202: LD_INT 84
13204: PPUSH
13205: LD_INT 49
13207: PPUSH
13208: CALL_OW 178
// wait ( 0 0$1 ) ;
13212: LD_INT 35
13214: PPUSH
13215: CALL_OW 67
// ComMoveUnit ( Omar , Heike ) ;
13219: LD_EXP 24
13223: PPUSH
13224: LD_EXP 23
13228: PPUSH
13229: CALL_OW 112
// wait ( 0 0$1 ) ;
13233: LD_INT 35
13235: PPUSH
13236: CALL_OW 67
// ComTurnUnit ( Omar , Heike ) ;
13240: LD_EXP 24
13244: PPUSH
13245: LD_EXP 23
13249: PPUSH
13250: CALL_OW 119
// wait ( 0 0$0.3 ) ;
13254: LD_INT 10
13256: PPUSH
13257: CALL_OW 67
// Say ( Omar , DO-Story-16 ) ;
13261: LD_EXP 24
13265: PPUSH
13266: LD_STRING DO-Story-16
13268: PPUSH
13269: CALL_OW 88
// if Query ( QOmar2 ) = 2 then
13273: LD_STRING QOmar2
13275: PPUSH
13276: CALL_OW 97
13280: PUSH
13281: LD_INT 2
13283: EQUAL
13284: IFFALSE 13622
// begin ComTurnUnit ( Heike , Omar ) ;
13286: LD_EXP 23
13290: PPUSH
13291: LD_EXP 24
13295: PPUSH
13296: CALL_OW 119
// Say ( Heike , DH-QuestionN-1 ) ;
13300: LD_EXP 23
13304: PPUSH
13305: LD_STRING DH-QuestionN-1
13307: PPUSH
13308: CALL_OW 88
// ComMoveXY ( Heike , 79 , 57 ) ;
13312: LD_EXP 23
13316: PPUSH
13317: LD_INT 79
13319: PPUSH
13320: LD_INT 57
13322: PPUSH
13323: CALL_OW 111
// AddComMoveXY ( Heike , 68 , 53 ) ;
13327: LD_EXP 23
13331: PPUSH
13332: LD_INT 68
13334: PPUSH
13335: LD_INT 53
13337: PPUSH
13338: CALL_OW 171
// wait ( 0 0$2 ) ;
13342: LD_INT 70
13344: PPUSH
13345: CALL_OW 67
// ComEnterUnit ( Omar , omarVehicle ) ;
13349: LD_EXP 24
13353: PPUSH
13354: LD_EXP 26
13358: PPUSH
13359: CALL_OW 120
// RemoveSeeing ( 79 , 32 , 2 ) ;
13363: LD_INT 79
13365: PPUSH
13366: LD_INT 32
13368: PPUSH
13369: LD_INT 2
13371: PPUSH
13372: CALL_OW 331
// RemoveSeeing ( 80 , 27 , 2 ) ;
13376: LD_INT 80
13378: PPUSH
13379: LD_INT 27
13381: PPUSH
13382: LD_INT 2
13384: PPUSH
13385: CALL_OW 331
// CenterOnXY ( 68 , 53 ) ;
13389: LD_INT 68
13391: PPUSH
13392: LD_INT 53
13394: PPUSH
13395: CALL_OW 84
// repeat wait ( 3 ) ;
13399: LD_INT 3
13401: PPUSH
13402: CALL_OW 67
// until GetDistUnitXY ( Heike , 68 , 53 ) < 6 ;
13406: LD_EXP 23
13410: PPUSH
13411: LD_INT 68
13413: PPUSH
13414: LD_INT 53
13416: PPUSH
13417: CALL_OW 297
13421: PUSH
13422: LD_INT 6
13424: LESS
13425: IFFALSE 13399
// uc_side := 1 ;
13427: LD_ADDR_OWVAR 20
13431: PUSH
13432: LD_INT 1
13434: ST_TO_ADDR
// uc_nation := nation_american ;
13435: LD_ADDR_OWVAR 21
13439: PUSH
13440: LD_INT 1
13442: ST_TO_ADDR
// amTroops := [ ] ;
13443: LD_ADDR_VAR 0 5
13447: PUSH
13448: EMPTY
13449: ST_TO_ADDR
// for i := 1 to 3 do
13450: LD_ADDR_VAR 0 2
13454: PUSH
13455: DOUBLE
13456: LD_INT 1
13458: DEC
13459: ST_TO_ADDR
13460: LD_INT 3
13462: PUSH
13463: FOR_TO
13464: IFFALSE 13557
// begin PrepareSoldier ( false , 10 ) ;
13466: LD_INT 0
13468: PPUSH
13469: LD_INT 10
13471: PPUSH
13472: CALL_OW 381
// amTroops := Join ( amTroops , CreateHuman ) ;
13476: LD_ADDR_VAR 0 5
13480: PUSH
13481: LD_VAR 0 5
13485: PPUSH
13486: CALL_OW 44
13490: PPUSH
13491: CALL 58462 0 2
13495: ST_TO_ADDR
// SetDir ( amTroops [ i ] , 2 ) ;
13496: LD_VAR 0 5
13500: PUSH
13501: LD_VAR 0 2
13505: ARRAY
13506: PPUSH
13507: LD_INT 2
13509: PPUSH
13510: CALL_OW 233
// PlaceUnitArea ( amTroops [ i ] , heikeTrap2Area , false ) ;
13514: LD_VAR 0 5
13518: PUSH
13519: LD_VAR 0 2
13523: ARRAY
13524: PPUSH
13525: LD_INT 11
13527: PPUSH
13528: LD_INT 0
13530: PPUSH
13531: CALL_OW 49
// ComAttackUnit ( amTroops [ i ] , Heike ) ;
13535: LD_VAR 0 5
13539: PUSH
13540: LD_VAR 0 2
13544: ARRAY
13545: PPUSH
13546: LD_EXP 23
13550: PPUSH
13551: CALL_OW 115
// end ;
13555: GO 13463
13557: POP
13558: POP
// ComAttackUnit ( Heike , amTroops [ 1 ] ) ;
13559: LD_EXP 23
13563: PPUSH
13564: LD_VAR 0 5
13568: PUSH
13569: LD_INT 1
13571: ARRAY
13572: PPUSH
13573: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
13577: LD_INT 35
13579: PPUSH
13580: CALL_OW 67
// until IsDead ( Heike ) or IsDying ( Heike ) ;
13584: LD_EXP 23
13588: PPUSH
13589: CALL_OW 301
13593: PUSH
13594: LD_EXP 23
13598: PPUSH
13599: CALL_OW 303
13603: OR
13604: IFFALSE 13577
// wait ( 0 0$2 ) ;
13606: LD_INT 70
13608: PPUSH
13609: CALL_OW 67
// YouLost ( Heike ) ;
13613: LD_STRING Heike
13615: PPUSH
13616: CALL_OW 104
// exit ;
13620: GO 13745
// end ; Say ( Omar , DO-Objective-1 ) ;
13622: LD_EXP 24
13626: PPUSH
13627: LD_STRING DO-Objective-1
13629: PPUSH
13630: CALL_OW 88
// ComTurnUnit ( Heike , Omar ) ;
13634: LD_EXP 23
13638: PPUSH
13639: LD_EXP 24
13643: PPUSH
13644: CALL_OW 119
// Say ( Heike , DH-Objective-2 ) ;
13648: LD_EXP 23
13652: PPUSH
13653: LD_STRING DH-Objective-2
13655: PPUSH
13656: CALL_OW 88
// Say ( Omar , DO-Objective-3 ) ;
13660: LD_EXP 24
13664: PPUSH
13665: LD_STRING DO-Objective-3
13667: PPUSH
13668: CALL_OW 88
// RemoveSeeing ( 79 , 32 , 2 ) ;
13672: LD_INT 79
13674: PPUSH
13675: LD_INT 32
13677: PPUSH
13678: LD_INT 2
13680: PPUSH
13681: CALL_OW 331
// RemoveSeeing ( 80 , 27 , 2 ) ;
13685: LD_INT 80
13687: PPUSH
13688: LD_INT 27
13690: PPUSH
13691: LD_INT 2
13693: PPUSH
13694: CALL_OW 331
// SetSide ( Omar , 2 ) ;
13698: LD_EXP 24
13702: PPUSH
13703: LD_INT 2
13705: PPUSH
13706: CALL_OW 235
// SetSide ( omarVehicle , 2 ) ;
13710: LD_EXP 26
13714: PPUSH
13715: LD_INT 2
13717: PPUSH
13718: CALL_OW 235
// ChangeMissionObjectives ( O1 ) ;
13722: LD_STRING O1
13724: PPUSH
13725: CALL_OW 337
// InGameOff ;
13729: CALL_OW 9
// gameActive := true ;
13733: LD_ADDR_EXP 19
13737: PUSH
13738: LD_INT 1
13740: ST_TO_ADDR
// SaveForQuickRestart ;
13741: CALL_OW 22
// end ;
13745: LD_VAR 0 1
13749: RET
// every 0 0$2 trigger gameActive and not spotArabianBase and FilterUnitsInArea ( arBaseArea , [ f_side , 2 ] ) do var i ;
13750: LD_EXP 19
13754: PUSH
13755: LD_EXP 7
13759: NOT
13760: AND
13761: PUSH
13762: LD_INT 4
13764: PPUSH
13765: LD_INT 22
13767: PUSH
13768: LD_INT 2
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: PPUSH
13775: CALL_OW 70
13779: AND
13780: IFFALSE 13931
13782: GO 13784
13784: DISABLE
13785: LD_INT 0
13787: PPUSH
// begin spotArabianBase := true ;
13788: LD_ADDR_EXP 7
13792: PUSH
13793: LD_INT 1
13795: ST_TO_ADDR
// DialogueOn ;
13796: CALL_OW 6
// PlaceSeeing ( 232 , 101 , 2 , - 22 ) ;
13800: LD_INT 232
13802: PPUSH
13803: LD_INT 101
13805: PPUSH
13806: LD_INT 2
13808: PPUSH
13809: LD_INT 22
13811: NEG
13812: PPUSH
13813: CALL_OW 330
// RemoveSeeing ( 232 , 101 , 2 ) ;
13817: LD_INT 232
13819: PPUSH
13820: LD_INT 101
13822: PPUSH
13823: LD_INT 2
13825: PPUSH
13826: CALL_OW 331
// CenterNowOnXY ( 232 , 101 ) ;
13830: LD_INT 232
13832: PPUSH
13833: LD_INT 101
13835: PPUSH
13836: CALL_OW 86
// for i in FilterUnitsInArea ( arBaseArea , [ f_side , 5 ] ) do
13840: LD_ADDR_VAR 0 1
13844: PUSH
13845: LD_INT 4
13847: PPUSH
13848: LD_INT 22
13850: PUSH
13851: LD_INT 5
13853: PUSH
13854: EMPTY
13855: LIST
13856: LIST
13857: PPUSH
13858: CALL_OW 70
13862: PUSH
13863: FOR_IN
13864: IFFALSE 13880
// SetSide ( i , 2 ) ;
13866: LD_VAR 0 1
13870: PPUSH
13871: LD_INT 2
13873: PPUSH
13874: CALL_OW 235
13878: GO 13863
13880: POP
13881: POP
// if not spotAmericanBase then
13882: LD_EXP 6
13886: NOT
13887: IFFALSE 13903
// Say ( Omar , DO-ArBase-1a ) else
13889: LD_EXP 24
13893: PPUSH
13894: LD_STRING DO-ArBase-1a
13896: PPUSH
13897: CALL_OW 88
13901: GO 13915
// Say ( Omar , DO-ArBase-1b ) ;
13903: LD_EXP 24
13907: PPUSH
13908: LD_STRING DO-ArBase-1b
13910: PPUSH
13911: CALL_OW 88
// Say ( Heike , DH-ArBase-2 ) ;
13915: LD_EXP 23
13919: PPUSH
13920: LD_STRING DH-ArBase-2
13922: PPUSH
13923: CALL_OW 88
// DialogueOff ;
13927: CALL_OW 7
// end ;
13931: PPOPN 1
13933: END
// every 0 0$1 trigger gameActive and ( IsSelected ( arFac ) or UnitsInside ( arFac ) ) and IsOk ( Heike ) and IsOk ( Omar ) do
13934: LD_EXP 19
13938: PUSH
13939: LD_INT 87
13941: PPUSH
13942: CALL_OW 306
13946: PUSH
13947: LD_INT 87
13949: PPUSH
13950: CALL_OW 313
13954: OR
13955: AND
13956: PUSH
13957: LD_EXP 23
13961: PPUSH
13962: CALL_OW 302
13966: AND
13967: PUSH
13968: LD_EXP 24
13972: PPUSH
13973: CALL_OW 302
13977: AND
13978: IFFALSE 14322
13980: GO 13982
13982: DISABLE
// begin DialogueOn ;
13983: CALL_OW 6
// Say ( Heike , DH-Fac-1 ) ;
13987: LD_EXP 23
13991: PPUSH
13992: LD_STRING DH-Fac-1
13994: PPUSH
13995: CALL_OW 88
// Say ( Omar , DOm-Fac-2 ) ;
13999: LD_EXP 24
14003: PPUSH
14004: LD_STRING DOm-Fac-2
14006: PPUSH
14007: CALL_OW 88
// if LoadVariable ( 03_CargoRecycled , false ) then
14011: LD_STRING 03_CargoRecycled
14013: PPUSH
14014: LD_INT 0
14016: PPUSH
14017: CALL_OW 30
14021: IFFALSE 14036
// SetTech ( tech_cargo , 2 , state_researched ) ;
14023: LD_INT 83
14025: PPUSH
14026: LD_INT 2
14028: PPUSH
14029: LD_INT 2
14031: PPUSH
14032: CALL_OW 322
// if TestCharacters ( 09_Markov ) then
14036: LD_STRING 09_Markov
14038: PPUSH
14039: CALL_OW 28
14043: IFFALSE 14158
// begin Say ( Heike , DH-Fac-3a ) ;
14045: LD_EXP 23
14049: PPUSH
14050: LD_STRING DH-Fac-3a
14052: PPUSH
14053: CALL_OW 88
// SetTech ( tech_gatling , 2 , state_researched ) ;
14057: LD_INT 69
14059: PPUSH
14060: LD_INT 2
14062: PPUSH
14063: LD_INT 2
14065: PPUSH
14066: CALL_OW 322
// SetTech ( tech_gun , 2 , state_researched ) ;
14070: LD_INT 39
14072: PPUSH
14073: LD_INT 2
14075: PPUSH
14076: LD_INT 2
14078: PPUSH
14079: CALL_OW 322
// SetTech ( tech_radar , 2 , state_researched ) ;
14083: LD_INT 6
14085: PPUSH
14086: LD_INT 2
14088: PPUSH
14089: LD_INT 2
14091: PPUSH
14092: CALL_OW 322
// SetTech ( tech_remCont , 2 , state_researched ) ;
14096: LD_INT 15
14098: PPUSH
14099: LD_INT 2
14101: PPUSH
14102: LD_INT 2
14104: PPUSH
14105: CALL_OW 322
// if GetSkill ( Heike , 3 ) < 10 then
14109: LD_EXP 23
14113: PPUSH
14114: LD_INT 3
14116: PPUSH
14117: CALL_OW 259
14121: PUSH
14122: LD_INT 10
14124: LESS
14125: IFFALSE 14156
// SetSkill ( Heike , 3 , GetSkill ( Heike , 3 ) + 1 ) ;
14127: LD_EXP 23
14131: PPUSH
14132: LD_INT 3
14134: PPUSH
14135: LD_EXP 23
14139: PPUSH
14140: LD_INT 3
14142: PPUSH
14143: CALL_OW 259
14147: PUSH
14148: LD_INT 1
14150: PLUS
14151: PPUSH
14152: CALL_OW 237
// end else
14156: GO 14311
// if TestCharacters ( 09_Olaf ) then
14158: LD_STRING 09_Olaf
14160: PPUSH
14161: CALL_OW 28
14165: IFFALSE 14254
// begin Say ( Heike , DH-Fac-3b ) ;
14167: LD_EXP 23
14171: PPUSH
14172: LD_STRING DH-Fac-3b
14174: PPUSH
14175: CALL_OW 88
// SetTech ( tech_radar , 2 , state_researched ) ;
14179: LD_INT 6
14181: PPUSH
14182: LD_INT 2
14184: PPUSH
14185: LD_INT 2
14187: PPUSH
14188: CALL_OW 322
// SetTech ( tech_remCont , 2 , state_researched ) ;
14192: LD_INT 15
14194: PPUSH
14195: LD_INT 2
14197: PPUSH
14198: LD_INT 2
14200: PPUSH
14201: CALL_OW 322
// if GetSkill ( Heike , 3 ) < 10 then
14205: LD_EXP 23
14209: PPUSH
14210: LD_INT 3
14212: PPUSH
14213: CALL_OW 259
14217: PUSH
14218: LD_INT 10
14220: LESS
14221: IFFALSE 14252
// SetSkill ( Heike , 3 , GetSkill ( Heike , 3 ) + 1 ) ;
14223: LD_EXP 23
14227: PPUSH
14228: LD_INT 3
14230: PPUSH
14231: LD_EXP 23
14235: PPUSH
14236: LD_INT 3
14238: PPUSH
14239: CALL_OW 259
14243: PUSH
14244: LD_INT 1
14246: PLUS
14247: PPUSH
14248: CALL_OW 237
// end else
14252: GO 14311
// if GetSkill ( Heike , skill_mechanical ) > 5 then
14254: LD_EXP 23
14258: PPUSH
14259: LD_INT 3
14261: PPUSH
14262: CALL_OW 259
14266: PUSH
14267: LD_INT 5
14269: GREATER
14270: IFFALSE 14299
// begin Say ( Heike , DH-Fac-3c ) ;
14272: LD_EXP 23
14276: PPUSH
14277: LD_STRING DH-Fac-3c
14279: PPUSH
14280: CALL_OW 88
// SetTech ( tech_radar , 2 , state_researched ) ;
14284: LD_INT 6
14286: PPUSH
14287: LD_INT 2
14289: PPUSH
14290: LD_INT 2
14292: PPUSH
14293: CALL_OW 322
// end else
14297: GO 14311
// Say ( Heike , DH-Fac-3d ) ;
14299: LD_EXP 23
14303: PPUSH
14304: LD_STRING DH-Fac-3d
14306: PPUSH
14307: CALL_OW 88
// ChangeMissionObjectives ( ARemote ) ;
14311: LD_STRING ARemote
14313: PPUSH
14314: CALL_OW 337
// DialogueOff ;
14318: CALL_OW 7
// end ;
14322: END
// every 0 0$1 trigger gameActive and ( IsSelected ( arLab ) or UnitsInside ( arLab ) ) and IsOk ( Heike ) and IsOk ( Omar ) do
14323: LD_EXP 19
14327: PUSH
14328: LD_INT 89
14330: PPUSH
14331: CALL_OW 306
14335: PUSH
14336: LD_INT 89
14338: PPUSH
14339: CALL_OW 313
14343: OR
14344: AND
14345: PUSH
14346: LD_EXP 23
14350: PPUSH
14351: CALL_OW 302
14355: AND
14356: PUSH
14357: LD_EXP 24
14361: PPUSH
14362: CALL_OW 302
14366: AND
14367: IFFALSE 14595
14369: GO 14371
14371: DISABLE
// begin DialogueOn ;
14372: CALL_OW 6
// Say ( Heike , DH-Lab-1 ) ;
14376: LD_EXP 23
14380: PPUSH
14381: LD_STRING DH-Lab-1
14383: PPUSH
14384: CALL_OW 88
// Say ( Omar , DOm-Lab-2 ) ;
14388: LD_EXP 24
14392: PPUSH
14393: LD_STRING DOm-Lab-2
14395: PPUSH
14396: CALL_OW 88
// if TestCharacters ( 09_Aviradze ) then
14400: LD_STRING 09_Aviradze
14402: PPUSH
14403: CALL_OW 28
14407: IFFALSE 14462
// begin SetTech ( tech_apelang , 2 , state_researched ) ;
14409: LD_INT 1
14411: PPUSH
14412: LD_INT 2
14414: PPUSH
14415: LD_INT 2
14417: PPUSH
14418: CALL_OW 322
// SetTech ( tech_apepsych , 2 , state_researched ) ;
14422: LD_INT 2
14424: PPUSH
14425: LD_INT 2
14427: PPUSH
14428: LD_INT 2
14430: PPUSH
14431: CALL_OW 322
// SetTech ( tech_apeagres , 2 , state_researched ) ;
14435: LD_INT 11
14437: PPUSH
14438: LD_INT 2
14440: PPUSH
14441: LD_INT 2
14443: PPUSH
14444: CALL_OW 322
// Say ( Heike , DH-Lab-4a ) ;
14448: LD_EXP 23
14452: PPUSH
14453: LD_STRING DH-Lab-4a
14455: PPUSH
14456: CALL_OW 88
// end else
14460: GO 14474
// Say ( Heike , DH-Lab-4b ) ;
14462: LD_EXP 23
14466: PPUSH
14467: LD_STRING DH-Lab-4b
14469: PPUSH
14470: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
14474: LD_STRING 05_DrugsTested
14476: PPUSH
14477: LD_EXP 1
14481: PPUSH
14482: CALL_OW 30
14486: IFFALSE 14513
// begin Say ( Heike , DH-Lab-5a ) ;
14488: LD_EXP 23
14492: PPUSH
14493: LD_STRING DH-Lab-5a
14495: PPUSH
14496: CALL_OW 88
// SetTech ( tech_stimdrugs , 2 , state_enabled ) ;
14500: LD_INT 5
14502: PPUSH
14503: LD_INT 2
14505: PPUSH
14506: LD_INT 1
14508: PPUSH
14509: CALL_OW 322
// end ; if LoadVariable ( 09_ApeBrain , debug ) then
14513: LD_STRING 09_ApeBrain
14515: PPUSH
14516: LD_EXP 1
14520: PPUSH
14521: CALL_OW 30
14525: IFFALSE 14564
// begin Say ( Heike , DH-Lab-6a ) ;
14527: LD_EXP 23
14531: PPUSH
14532: LD_STRING DH-Lab-6a
14534: PPUSH
14535: CALL_OW 88
// Say ( Omar , DOm-Lab-7a ) ;
14539: LD_EXP 24
14543: PPUSH
14544: LD_STRING DOm-Lab-7a
14546: PPUSH
14547: CALL_OW 88
// SetTech ( tech_apeBrain , 2 , state_enabled ) ;
14551: LD_INT 4
14553: PPUSH
14554: LD_INT 2
14556: PPUSH
14557: LD_INT 1
14559: PPUSH
14560: CALL_OW 322
// end ; if LoadVariable ( 09_ApeNeural , debug ) then
14564: LD_STRING 09_ApeNeural
14566: PPUSH
14567: LD_EXP 1
14571: PPUSH
14572: CALL_OW 30
14576: IFFALSE 14591
// begin SetTech ( tech_apeNeural , 2 , state_enabled ) ;
14578: LD_INT 3
14580: PPUSH
14581: LD_INT 2
14583: PPUSH
14584: LD_INT 1
14586: PPUSH
14587: CALL_OW 322
// end ; DialogueOff ;
14591: CALL_OW 7
// end ;
14595: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) do
14596: LD_EXP 19
14600: PUSH
14601: LD_INT 22
14603: PUSH
14604: LD_INT 2
14606: PUSH
14607: EMPTY
14608: LIST
14609: LIST
14610: PUSH
14611: LD_INT 25
14613: PUSH
14614: LD_INT 12
14616: PUSH
14617: EMPTY
14618: LIST
14619: LIST
14620: PUSH
14621: EMPTY
14622: LIST
14623: LIST
14624: PPUSH
14625: CALL_OW 69
14629: AND
14630: IFFALSE 14665
14632: GO 14634
14634: DISABLE
// begin if IsOk ( Heike ) then
14635: LD_EXP 23
14639: PPUSH
14640: CALL_OW 302
14644: IFFALSE 14658
// Say ( Heike , DH-Ape-1 ) ;
14646: LD_EXP 23
14650: PPUSH
14651: LD_STRING DH-Ape-1
14653: PPUSH
14654: CALL_OW 88
// ChangeMissionObjectives ( AApes ) ;
14658: LD_STRING AApes
14660: PPUSH
14661: CALL_OW 337
// end ;
14665: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 5 do
14666: LD_EXP 19
14670: PUSH
14671: LD_INT 22
14673: PUSH
14674: LD_INT 2
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: PUSH
14681: LD_INT 25
14683: PUSH
14684: LD_INT 15
14686: PUSH
14687: EMPTY
14688: LIST
14689: LIST
14690: PUSH
14691: EMPTY
14692: LIST
14693: LIST
14694: PPUSH
14695: CALL_OW 69
14699: PUSH
14700: LD_INT 5
14702: GREATEREQUAL
14703: AND
14704: IFFALSE 14806
14706: GO 14708
14708: DISABLE
// begin hasApes := true ;
14709: LD_ADDR_EXP 16
14713: PUSH
14714: LD_INT 1
14716: ST_TO_ADDR
// ChangeMissionObjectives ( AApesOut ) ;
14717: LD_STRING AApesOut
14719: PPUSH
14720: CALL_OW 337
// if not IsOk ( Heike ) or not IsOk ( Omar ) then
14724: LD_EXP 23
14728: PPUSH
14729: CALL_OW 302
14733: NOT
14734: PUSH
14735: LD_EXP 24
14739: PPUSH
14740: CALL_OW 302
14744: NOT
14745: OR
14746: IFFALSE 14750
// exit ;
14748: GO 14806
// DialogueOn ;
14750: CALL_OW 6
// Say ( Heike , DH-ApeArmy-1 ) ;
14754: LD_EXP 23
14758: PPUSH
14759: LD_STRING DH-ApeArmy-1
14761: PPUSH
14762: CALL_OW 88
// Say ( Omar , DOm-ApeArmy-2 ) ;
14766: LD_EXP 24
14770: PPUSH
14771: LD_STRING DOm-ApeArmy-2
14773: PPUSH
14774: CALL_OW 88
// Say ( Heike , DH-ApeArmy-3 ) ;
14778: LD_EXP 23
14782: PPUSH
14783: LD_STRING DH-ApeArmy-3
14785: PPUSH
14786: CALL_OW 88
// Say ( Omar , DOm-ApeArmy-4 ) ;
14790: LD_EXP 24
14794: PPUSH
14795: LD_STRING DOm-ApeArmy-4
14797: PPUSH
14798: CALL_OW 88
// DialogueOff ;
14802: CALL_OW 7
// end ;
14806: END
// every 0 0$1 trigger gameActive and GetTech ( tech_stimdrugs , 2 ) = state_researched do
14807: LD_EXP 19
14811: PUSH
14812: LD_INT 5
14814: PPUSH
14815: LD_INT 2
14817: PPUSH
14818: CALL_OW 321
14822: PUSH
14823: LD_INT 2
14825: EQUAL
14826: AND
14827: IFFALSE 14863
14829: GO 14831
14831: DISABLE
// begin hasDrugs := true ;
14832: LD_ADDR_EXP 17
14836: PUSH
14837: LD_INT 1
14839: ST_TO_ADDR
// if IsOk ( Heike ) then
14840: LD_EXP 23
14844: PPUSH
14845: CALL_OW 302
14849: IFFALSE 14863
// Say ( Heike , DH-Stim-1 ) ;
14851: LD_EXP 23
14855: PPUSH
14856: LD_STRING DH-Stim-1
14858: PPUSH
14859: CALL_OW 88
// end ;
14863: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_kamikaze ] ] ) do
14864: LD_EXP 19
14868: PUSH
14869: LD_INT 22
14871: PUSH
14872: LD_INT 2
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: LD_INT 25
14881: PUSH
14882: LD_INT 17
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: PPUSH
14893: CALL_OW 69
14897: AND
14898: IFFALSE 14915
14900: GO 14902
14902: DISABLE
// Say ( Heike , DH-Kamikadze-1 ) ;
14903: LD_EXP 23
14907: PPUSH
14908: LD_STRING DH-Kamikadze-1
14910: PPUSH
14911: CALL_OW 88
14915: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_chassis , class_mastodont ] ] ) and IsOk ( Omar ) and IsOk ( Heike ) do
14916: LD_EXP 19
14920: PUSH
14921: LD_INT 22
14923: PUSH
14924: LD_INT 2
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: PUSH
14931: LD_INT 31
14933: PUSH
14934: LD_INT 31
14936: PUSH
14937: EMPTY
14938: LIST
14939: LIST
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PPUSH
14945: CALL_OW 69
14949: AND
14950: PUSH
14951: LD_EXP 24
14955: PPUSH
14956: CALL_OW 302
14960: AND
14961: PUSH
14962: LD_EXP 23
14966: PPUSH
14967: CALL_OW 302
14971: AND
14972: IFFALSE 15057
14974: GO 14976
14976: DISABLE
// begin InGameOn ;
14977: CALL_OW 8
// CenterNowOnUnits ( Omar ) ;
14981: LD_EXP 24
14985: PPUSH
14986: CALL_OW 87
// Say ( Heike , DH-Mastodont-1 ) ;
14990: LD_EXP 23
14994: PPUSH
14995: LD_STRING DH-Mastodont-1
14997: PPUSH
14998: CALL_OW 88
// Say ( Omar , DOm-Mastodont-2 ) ;
15002: LD_EXP 24
15006: PPUSH
15007: LD_STRING DOm-Mastodont-2
15009: PPUSH
15010: CALL_OW 88
// Say ( Heike , DH-Mastodont-3 ) ;
15014: LD_EXP 23
15018: PPUSH
15019: LD_STRING DH-Mastodont-3
15021: PPUSH
15022: CALL_OW 88
// Say ( Omar , DOm-Mastodont-4 ) ;
15026: LD_EXP 24
15030: PPUSH
15031: LD_STRING DOm-Mastodont-4
15033: PPUSH
15034: CALL_OW 88
// hasMastodont := true ;
15038: LD_ADDR_EXP 13
15042: PUSH
15043: LD_INT 1
15045: ST_TO_ADDR
// InGameOff ;
15046: CALL_OW 9
// SetAchievement ( ACH_MASTODONTTAME ) ;
15050: LD_STRING ACH_MASTODONTTAME
15052: PPUSH
15053: CALL_OW 543
// end ;
15057: END
// every 0 0$1 trigger gameActive and tigerCounter do
15058: LD_EXP 19
15062: PUSH
15063: LD_EXP 21
15067: AND
15068: IFFALSE 15080
15070: GO 15072
15072: DISABLE
// SetAchievement ( ACH_TIGERTAME ) ;
15073: LD_STRING ACH_TIGERTAME
15075: PPUSH
15076: CALL_OW 543
15080: END
// every 0 0$1 trigger gameActive and tigerCounter > 1 do
15081: LD_EXP 19
15085: PUSH
15086: LD_EXP 21
15090: PUSH
15091: LD_INT 1
15093: GREATER
15094: AND
15095: IFFALSE 15199
15097: GO 15099
15099: DISABLE
// begin hasTigers := true ;
15100: LD_ADDR_EXP 15
15104: PUSH
15105: LD_INT 1
15107: ST_TO_ADDR
// if not IsOk ( Omar ) or not IsOk ( Heike ) then
15108: LD_EXP 24
15112: PPUSH
15113: CALL_OW 302
15117: NOT
15118: PUSH
15119: LD_EXP 23
15123: PPUSH
15124: CALL_OW 302
15128: NOT
15129: OR
15130: IFFALSE 15134
// exit ;
15132: GO 15199
// CenterNowOnUnits ( Omar ) ;
15134: LD_EXP 24
15138: PPUSH
15139: CALL_OW 87
// DialogueOn ;
15143: CALL_OW 6
// Say ( Omar , DOm-Tiger-1 ) ;
15147: LD_EXP 24
15151: PPUSH
15152: LD_STRING DOm-Tiger-1
15154: PPUSH
15155: CALL_OW 88
// Say ( Heike , DH-Tiger-2 ) ;
15159: LD_EXP 23
15163: PPUSH
15164: LD_STRING DH-Tiger-2
15166: PPUSH
15167: CALL_OW 88
// Say ( Omar , DOm-Tiger-3 ) ;
15171: LD_EXP 24
15175: PPUSH
15176: LD_STRING DOm-Tiger-3
15178: PPUSH
15179: CALL_OW 88
// Say ( Heike , DH-Tiger-4 ) ;
15183: LD_EXP 23
15187: PPUSH
15188: LD_STRING DH-Tiger-4
15190: PPUSH
15191: CALL_OW 88
// DialogueOff ;
15195: CALL_OW 7
// end ;
15199: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_control , control_remote ] ] ) >= 3 do
15200: LD_EXP 19
15204: PUSH
15205: LD_INT 22
15207: PUSH
15208: LD_INT 2
15210: PUSH
15211: EMPTY
15212: LIST
15213: LIST
15214: PUSH
15215: LD_INT 50
15217: PUSH
15218: EMPTY
15219: LIST
15220: PUSH
15221: LD_INT 33
15223: PUSH
15224: LD_INT 2
15226: PUSH
15227: EMPTY
15228: LIST
15229: LIST
15230: PUSH
15231: EMPTY
15232: LIST
15233: LIST
15234: LIST
15235: PPUSH
15236: CALL_OW 69
15240: PUSH
15241: LD_INT 3
15243: GREATEREQUAL
15244: AND
15245: IFFALSE 15288
15247: GO 15249
15249: DISABLE
// begin ChangeMissionObjectives ( ARemoteOut ) ;
15250: LD_STRING ARemoteOut
15252: PPUSH
15253: CALL_OW 337
// hasVehicles := true ;
15257: LD_ADDR_EXP 14
15261: PUSH
15262: LD_INT 1
15264: ST_TO_ADDR
// if IsOk ( Heike ) then
15265: LD_EXP 23
15269: PPUSH
15270: CALL_OW 302
15274: IFFALSE 15288
// Say ( Heike , DH-Mechanic-1 ) ;
15276: LD_EXP 23
15280: PPUSH
15281: LD_STRING DH-Mechanic-1
15283: PPUSH
15284: CALL_OW 88
// end ;
15288: END
// every 0 0$1 trigger gameActive and ( FilterUnitsInArea ( amBaseOuterArea , [ f_side , 2 ] ) or SeeArea ( 2 , amBaseArea ) ) do
15289: LD_EXP 19
15293: PUSH
15294: LD_INT 29
15296: PPUSH
15297: LD_INT 22
15299: PUSH
15300: LD_INT 2
15302: PUSH
15303: EMPTY
15304: LIST
15305: LIST
15306: PPUSH
15307: CALL_OW 70
15311: PUSH
15312: LD_INT 2
15314: PPUSH
15315: LD_INT 1
15317: PPUSH
15318: CALL_OW 294
15322: OR
15323: AND
15324: IFFALSE 15337
15326: GO 15328
15328: DISABLE
// spotAmericanBase := true ;
15329: LD_ADDR_EXP 6
15333: PUSH
15334: LD_INT 1
15336: ST_TO_ADDR
15337: END
// every 0 0$2 trigger gameActive and spotAmericanBase and IsOk ( Omar ) and IsOk ( Heike ) do
15338: LD_EXP 19
15342: PUSH
15343: LD_EXP 6
15347: AND
15348: PUSH
15349: LD_EXP 24
15353: PPUSH
15354: CALL_OW 302
15358: AND
15359: PUSH
15360: LD_EXP 23
15364: PPUSH
15365: CALL_OW 302
15369: AND
15370: IFFALSE 15610
15372: GO 15374
15374: DISABLE
// begin DialogueOn ;
15375: CALL_OW 6
// PlaceSeeing ( 92 , 129 , 2 , - 22 ) ;
15379: LD_INT 92
15381: PPUSH
15382: LD_INT 129
15384: PPUSH
15385: LD_INT 2
15387: PPUSH
15388: LD_INT 22
15390: NEG
15391: PPUSH
15392: CALL_OW 330
// RemoveSeeing ( 92 , 129 , 2 ) ;
15396: LD_INT 92
15398: PPUSH
15399: LD_INT 129
15401: PPUSH
15402: LD_INT 2
15404: PPUSH
15405: CALL_OW 331
// CenterNowOnXY ( 92 , 129 ) ;
15409: LD_INT 92
15411: PPUSH
15412: LD_INT 129
15414: PPUSH
15415: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
15419: LD_INT 10
15421: PPUSH
15422: CALL_OW 68
// Say ( Omar , DO-AmBase-1 ) ;
15426: LD_EXP 24
15430: PPUSH
15431: LD_STRING DO-AmBase-1
15433: PPUSH
15434: CALL_OW 88
// Say ( Heike , DH-AmBase-2 ) ;
15438: LD_EXP 23
15442: PPUSH
15443: LD_STRING DH-AmBase-2
15445: PPUSH
15446: CALL_OW 88
// Say ( Omar , DO-AmBase-3 ) ;
15450: LD_EXP 24
15454: PPUSH
15455: LD_STRING DO-AmBase-3
15457: PPUSH
15458: CALL_OW 88
// Say ( Heike , DH-AmBase-4 ) ;
15462: LD_EXP 23
15466: PPUSH
15467: LD_STRING DH-AmBase-4
15469: PPUSH
15470: CALL_OW 88
// Say ( Omar , DO-AmBase-5 ) ;
15474: LD_EXP 24
15478: PPUSH
15479: LD_STRING DO-AmBase-5
15481: PPUSH
15482: CALL_OW 88
// Say ( Heike , DH-AmBase-6 ) ;
15486: LD_EXP 23
15490: PPUSH
15491: LD_STRING DH-AmBase-6
15493: PPUSH
15494: CALL_OW 88
// Say ( Omar , DO-AmBase-7 ) ;
15498: LD_EXP 24
15502: PPUSH
15503: LD_STRING DO-AmBase-7
15505: PPUSH
15506: CALL_OW 88
// if not spotArabianBase then
15510: LD_EXP 7
15514: NOT
15515: IFFALSE 15531
// begin Say ( Omar , DO-AmBase-8a ) ;
15517: LD_EXP 24
15521: PPUSH
15522: LD_STRING DO-AmBase-8a
15524: PPUSH
15525: CALL_OW 88
// end else
15529: GO 15543
// begin Say ( Omar , DO-AmBase-8b ) ;
15531: LD_EXP 24
15535: PPUSH
15536: LD_STRING DO-AmBase-8b
15538: PPUSH
15539: CALL_OW 88
// end ; if IsInUnit ( Heike ) then
15543: LD_EXP 23
15547: PPUSH
15548: CALL_OW 310
15552: IFFALSE 15570
// CenterNowOnUnits ( IsInUnit ( Heike ) ) else
15554: LD_EXP 23
15558: PPUSH
15559: CALL_OW 310
15563: PPUSH
15564: CALL_OW 87
15568: GO 15579
// CenterNowOnUnits ( Heike ) ;
15570: LD_EXP 23
15574: PPUSH
15575: CALL_OW 87
// Say ( Heike , DH-AmBase-9 ) ;
15579: LD_EXP 23
15583: PPUSH
15584: LD_STRING DH-AmBase-9
15586: PPUSH
15587: CALL_OW 88
// DialogueOff ;
15591: CALL_OW 7
// spotByAmerican := true ;
15595: LD_ADDR_EXP 8
15599: PUSH
15600: LD_INT 1
15602: ST_TO_ADDR
// ChangeMissionObjectives ( O2 ) ;
15603: LD_STRING O2
15605: PPUSH
15606: CALL_OW 337
// end ;
15610: END
// function TalkAboutLegion ; begin
15611: LD_INT 0
15613: PPUSH
// Say ( Heike , DH-Legion-1 ) ;
15614: LD_EXP 23
15618: PPUSH
15619: LD_STRING DH-Legion-1
15621: PPUSH
15622: CALL_OW 88
// Say ( Omar , DOm-Legion-2 ) ;
15626: LD_EXP 24
15630: PPUSH
15631: LD_STRING DOm-Legion-2
15633: PPUSH
15634: CALL_OW 88
// Say ( Heike , DH-Legion-3 ) ;
15638: LD_EXP 23
15642: PPUSH
15643: LD_STRING DH-Legion-3
15645: PPUSH
15646: CALL_OW 88
// Say ( Omar , DOm-Legion-4 ) ;
15650: LD_EXP 24
15654: PPUSH
15655: LD_STRING DOm-Legion-4
15657: PPUSH
15658: CALL_OW 88
// Say ( Heike , DH-Legion-5 ) ;
15662: LD_EXP 23
15666: PPUSH
15667: LD_STRING DH-Legion-5
15669: PPUSH
15670: CALL_OW 88
// Say ( Omar , DOm-Legion-6 ) ;
15674: LD_EXP 24
15678: PPUSH
15679: LD_STRING DOm-Legion-6
15681: PPUSH
15682: CALL_OW 88
// Say ( Heike , DH-Legion-7 ) ;
15686: LD_EXP 23
15690: PPUSH
15691: LD_STRING DH-Legion-7
15693: PPUSH
15694: CALL_OW 88
// end ;
15698: LD_VAR 0 1
15702: RET
// every 0 0$2 trigger gameActive and AreInArea ( [ Heike , Omar ] , legSpotNorthArea ) and not spotByLegion and not spotLegion do var i , un , veh ;
15703: LD_EXP 19
15707: PUSH
15708: LD_EXP 23
15712: PUSH
15713: LD_EXP 24
15717: PUSH
15718: EMPTY
15719: LIST
15720: LIST
15721: PPUSH
15722: LD_INT 22
15724: PPUSH
15725: CALL 11734 0 2
15729: AND
15730: PUSH
15731: LD_EXP 9
15735: NOT
15736: AND
15737: PUSH
15738: LD_EXP 10
15742: NOT
15743: AND
15744: IFFALSE 16229
15746: GO 15748
15748: DISABLE
15749: LD_INT 0
15751: PPUSH
15752: PPUSH
15753: PPUSH
// begin uc_side := 8 ;
15754: LD_ADDR_OWVAR 20
15758: PUSH
15759: LD_INT 8
15761: ST_TO_ADDR
// uc_nation := nation_american ;
15762: LD_ADDR_OWVAR 21
15766: PUSH
15767: LD_INT 1
15769: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 90 ) ;
15770: LD_INT 3
15772: PPUSH
15773: LD_INT 1
15775: PPUSH
15776: LD_INT 1
15778: PPUSH
15779: LD_INT 9
15781: PPUSH
15782: LD_INT 90
15784: PPUSH
15785: CALL 25591 0 5
// veh := CreateVehicle ;
15789: LD_ADDR_VAR 0 3
15793: PUSH
15794: CALL_OW 45
15798: ST_TO_ADDR
// legTanks := Join ( legTanks , veh ) ;
15799: LD_ADDR_EXP 43
15803: PUSH
15804: LD_EXP 43
15808: PPUSH
15809: LD_VAR 0 3
15813: PPUSH
15814: CALL 58462 0 2
15818: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
15819: LD_VAR 0 3
15823: PPUSH
15824: LD_INT 2
15826: PPUSH
15827: CALL_OW 233
// PlaceUnitXY ( veh , 126 , 18 , false ) ;
15831: LD_VAR 0 3
15835: PPUSH
15836: LD_INT 126
15838: PPUSH
15839: LD_INT 18
15841: PPUSH
15842: LD_INT 0
15844: PPUSH
15845: CALL_OW 48
// uc_nation := nation_arabian ;
15849: LD_ADDR_OWVAR 21
15853: PUSH
15854: LD_INT 2
15856: ST_TO_ADDR
// PrepareMechanic ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
15857: LD_INT 0
15859: PPUSH
15860: LD_INT 6
15862: PUSH
15863: LD_INT 7
15865: PUSH
15866: LD_INT 8
15868: PUSH
15869: LD_INT 9
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: PUSH
15878: LD_OWVAR 67
15882: ARRAY
15883: PPUSH
15884: CALL_OW 383
// un := CreateHuman ;
15888: LD_ADDR_VAR 0 2
15892: PUSH
15893: CALL_OW 44
15897: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
15898: LD_ADDR_EXP 38
15902: PUSH
15903: LD_EXP 38
15907: PPUSH
15908: LD_VAR 0 2
15912: PPUSH
15913: CALL 58462 0 2
15917: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15918: LD_VAR 0 2
15922: PPUSH
15923: LD_VAR 0 3
15927: PPUSH
15928: CALL_OW 52
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
15932: LD_INT 0
15934: PPUSH
15935: LD_INT 6
15937: PUSH
15938: LD_INT 7
15940: PUSH
15941: LD_INT 8
15943: PUSH
15944: LD_INT 9
15946: PUSH
15947: EMPTY
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: PUSH
15953: LD_OWVAR 67
15957: ARRAY
15958: PPUSH
15959: CALL_OW 381
// for i := 1 to 3 do
15963: LD_ADDR_VAR 0 1
15967: PUSH
15968: DOUBLE
15969: LD_INT 1
15971: DEC
15972: ST_TO_ADDR
15973: LD_INT 3
15975: PUSH
15976: FOR_TO
15977: IFFALSE 16044
// begin un := CreateHuman ;
15979: LD_ADDR_VAR 0 2
15983: PUSH
15984: CALL_OW 44
15988: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
15989: LD_ADDR_EXP 38
15993: PUSH
15994: LD_EXP 38
15998: PPUSH
15999: LD_VAR 0 2
16003: PPUSH
16004: CALL 58462 0 2
16008: ST_TO_ADDR
// SetDir ( un , 2 ) ;
16009: LD_VAR 0 2
16013: PPUSH
16014: LD_INT 2
16016: PPUSH
16017: CALL_OW 233
// PlaceUnitXYR ( un , 126 , 18 , 4 , false ) ;
16021: LD_VAR 0 2
16025: PPUSH
16026: LD_INT 126
16028: PPUSH
16029: LD_INT 18
16031: PPUSH
16032: LD_INT 4
16034: PPUSH
16035: LD_INT 0
16037: PPUSH
16038: CALL_OW 50
// end ;
16042: GO 15976
16044: POP
16045: POP
// wait ( 0 0$01 ) ;
16046: LD_INT 35
16048: PPUSH
16049: CALL_OW 67
// DialogueOn ;
16053: CALL_OW 6
// PlaceSeeing ( 126 , 18 , 2 , - 16 ) ;
16057: LD_INT 126
16059: PPUSH
16060: LD_INT 18
16062: PPUSH
16063: LD_INT 2
16065: PPUSH
16066: LD_INT 16
16068: NEG
16069: PPUSH
16070: CALL_OW 330
// CenterNowOnXY ( 126 , 18 ) ;
16074: LD_INT 126
16076: PPUSH
16077: LD_INT 18
16079: PPUSH
16080: CALL_OW 86
// TalkAboutLegion ;
16084: CALL 15611 0 0
// RemoveSeeing ( 126 , 18 , 2 ) ;
16088: LD_INT 126
16090: PPUSH
16091: LD_INT 18
16093: PPUSH
16094: LD_INT 2
16096: PPUSH
16097: CALL_OW 331
// DialogueOff ;
16101: CALL_OW 7
// spotLegion := true ;
16105: LD_ADDR_EXP 10
16109: PUSH
16110: LD_INT 1
16112: ST_TO_ADDR
// ComAgressiveMove ( legEForces , 164 , 47 ) ;
16113: LD_EXP 38
16117: PPUSH
16118: LD_INT 164
16120: PPUSH
16121: LD_INT 47
16123: PPUSH
16124: CALL_OW 114
// AddComAgressiveMove ( legEForces , 179 , 20 ) ;
16128: LD_EXP 38
16132: PPUSH
16133: LD_INT 179
16135: PPUSH
16136: LD_INT 20
16138: PPUSH
16139: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
16143: LD_INT 35
16145: PPUSH
16146: CALL_OW 67
// until not UnitFilter ( legEForces , [ f_hastask ] ) or not UnitFilter ( legEForces , [ f_ok ] ) ;
16150: LD_EXP 38
16154: PPUSH
16155: LD_INT 60
16157: PUSH
16158: EMPTY
16159: LIST
16160: PPUSH
16161: CALL_OW 72
16165: NOT
16166: PUSH
16167: LD_EXP 38
16171: PPUSH
16172: LD_INT 50
16174: PUSH
16175: EMPTY
16176: LIST
16177: PPUSH
16178: CALL_OW 72
16182: NOT
16183: OR
16184: IFFALSE 16143
// if not UnitFilter ( legEForces , [ f_ok ] ) then
16186: LD_EXP 38
16190: PPUSH
16191: LD_INT 50
16193: PUSH
16194: EMPTY
16195: LIST
16196: PPUSH
16197: CALL_OW 72
16201: NOT
16202: IFFALSE 16206
// exit ;
16204: GO 16229
// legForces := legForces union legEForces ;
16206: LD_ADDR_EXP 37
16210: PUSH
16211: LD_EXP 37
16215: PUSH
16216: LD_EXP 38
16220: UNION
16221: ST_TO_ADDR
// legEForces := [ ] ;
16222: LD_ADDR_EXP 38
16226: PUSH
16227: EMPTY
16228: ST_TO_ADDR
// end ;
16229: PPOPN 3
16231: END
// every 0 0$2 trigger gameActive and AreInArea ( [ Heike , Omar ] , legSpotSouthArea ) and not spotByLegion and not spotLegion do var i , un , veh ;
16232: LD_EXP 19
16236: PUSH
16237: LD_EXP 23
16241: PUSH
16242: LD_EXP 24
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: PPUSH
16251: LD_INT 23
16253: PPUSH
16254: CALL 11734 0 2
16258: AND
16259: PUSH
16260: LD_EXP 9
16264: NOT
16265: AND
16266: PUSH
16267: LD_EXP 10
16271: NOT
16272: AND
16273: IFFALSE 16758
16275: GO 16277
16277: DISABLE
16278: LD_INT 0
16280: PPUSH
16281: PPUSH
16282: PPUSH
// begin uc_side := 8 ;
16283: LD_ADDR_OWVAR 20
16287: PUSH
16288: LD_INT 8
16290: ST_TO_ADDR
// uc_nation := nation_american ;
16291: LD_ADDR_OWVAR 21
16295: PUSH
16296: LD_INT 1
16298: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 90 ) ;
16299: LD_INT 3
16301: PPUSH
16302: LD_INT 1
16304: PPUSH
16305: LD_INT 1
16307: PPUSH
16308: LD_INT 9
16310: PPUSH
16311: LD_INT 90
16313: PPUSH
16314: CALL 25591 0 5
// veh := CreateVehicle ;
16318: LD_ADDR_VAR 0 3
16322: PUSH
16323: CALL_OW 45
16327: ST_TO_ADDR
// legTanks := Join ( legTanks , veh ) ;
16328: LD_ADDR_EXP 43
16332: PUSH
16333: LD_EXP 43
16337: PPUSH
16338: LD_VAR 0 3
16342: PPUSH
16343: CALL 58462 0 2
16347: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
16348: LD_VAR 0 3
16352: PPUSH
16353: LD_INT 3
16355: PPUSH
16356: CALL_OW 233
// PlaceUnitXY ( veh , 224 , 57 , false ) ;
16360: LD_VAR 0 3
16364: PPUSH
16365: LD_INT 224
16367: PPUSH
16368: LD_INT 57
16370: PPUSH
16371: LD_INT 0
16373: PPUSH
16374: CALL_OW 48
// uc_nation := nation_arabian ;
16378: LD_ADDR_OWVAR 21
16382: PUSH
16383: LD_INT 2
16385: ST_TO_ADDR
// PrepareMechanic ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
16386: LD_INT 0
16388: PPUSH
16389: LD_INT 6
16391: PUSH
16392: LD_INT 7
16394: PUSH
16395: LD_INT 8
16397: PUSH
16398: LD_INT 9
16400: PUSH
16401: EMPTY
16402: LIST
16403: LIST
16404: LIST
16405: LIST
16406: PUSH
16407: LD_OWVAR 67
16411: ARRAY
16412: PPUSH
16413: CALL_OW 383
// un := CreateHuman ;
16417: LD_ADDR_VAR 0 2
16421: PUSH
16422: CALL_OW 44
16426: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
16427: LD_ADDR_EXP 38
16431: PUSH
16432: LD_EXP 38
16436: PPUSH
16437: LD_VAR 0 2
16441: PPUSH
16442: CALL 58462 0 2
16446: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16447: LD_VAR 0 2
16451: PPUSH
16452: LD_VAR 0 3
16456: PPUSH
16457: CALL_OW 52
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
16461: LD_INT 0
16463: PPUSH
16464: LD_INT 6
16466: PUSH
16467: LD_INT 7
16469: PUSH
16470: LD_INT 8
16472: PUSH
16473: LD_INT 9
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: PUSH
16482: LD_OWVAR 67
16486: ARRAY
16487: PPUSH
16488: CALL_OW 381
// for i := 1 to 3 do
16492: LD_ADDR_VAR 0 1
16496: PUSH
16497: DOUBLE
16498: LD_INT 1
16500: DEC
16501: ST_TO_ADDR
16502: LD_INT 3
16504: PUSH
16505: FOR_TO
16506: IFFALSE 16573
// begin un := CreateHuman ;
16508: LD_ADDR_VAR 0 2
16512: PUSH
16513: CALL_OW 44
16517: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
16518: LD_ADDR_EXP 38
16522: PUSH
16523: LD_EXP 38
16527: PPUSH
16528: LD_VAR 0 2
16532: PPUSH
16533: CALL 58462 0 2
16537: ST_TO_ADDR
// SetDir ( un , 3 ) ;
16538: LD_VAR 0 2
16542: PPUSH
16543: LD_INT 3
16545: PPUSH
16546: CALL_OW 233
// PlaceUnitXYR ( un , 224 , 57 , 4 , false ) ;
16550: LD_VAR 0 2
16554: PPUSH
16555: LD_INT 224
16557: PPUSH
16558: LD_INT 57
16560: PPUSH
16561: LD_INT 4
16563: PPUSH
16564: LD_INT 0
16566: PPUSH
16567: CALL_OW 50
// end ;
16571: GO 16505
16573: POP
16574: POP
// wait ( 0 0$01 ) ;
16575: LD_INT 35
16577: PPUSH
16578: CALL_OW 67
// DialogueOn ;
16582: CALL_OW 6
// PlaceSeeing ( 224 , 57 , 2 , - 16 ) ;
16586: LD_INT 224
16588: PPUSH
16589: LD_INT 57
16591: PPUSH
16592: LD_INT 2
16594: PPUSH
16595: LD_INT 16
16597: NEG
16598: PPUSH
16599: CALL_OW 330
// CenterNowOnXY ( 224 , 57 ) ;
16603: LD_INT 224
16605: PPUSH
16606: LD_INT 57
16608: PPUSH
16609: CALL_OW 86
// TalkAboutLegion ;
16613: CALL 15611 0 0
// RemoveSeeing ( 224 , 57 , 2 ) ;
16617: LD_INT 224
16619: PPUSH
16620: LD_INT 57
16622: PPUSH
16623: LD_INT 2
16625: PPUSH
16626: CALL_OW 331
// DialogueOff ;
16630: CALL_OW 7
// spotLegion := true ;
16634: LD_ADDR_EXP 10
16638: PUSH
16639: LD_INT 1
16641: ST_TO_ADDR
// ComAgressiveMove ( legEForces , 164 , 47 ) ;
16642: LD_EXP 38
16646: PPUSH
16647: LD_INT 164
16649: PPUSH
16650: LD_INT 47
16652: PPUSH
16653: CALL_OW 114
// AddComAgressiveMove ( legEForces , 179 , 20 ) ;
16657: LD_EXP 38
16661: PPUSH
16662: LD_INT 179
16664: PPUSH
16665: LD_INT 20
16667: PPUSH
16668: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
16672: LD_INT 35
16674: PPUSH
16675: CALL_OW 67
// until not UnitFilter ( legEForces , [ f_hastask ] ) or not UnitFilter ( legEForces , [ f_ok ] ) ;
16679: LD_EXP 38
16683: PPUSH
16684: LD_INT 60
16686: PUSH
16687: EMPTY
16688: LIST
16689: PPUSH
16690: CALL_OW 72
16694: NOT
16695: PUSH
16696: LD_EXP 38
16700: PPUSH
16701: LD_INT 50
16703: PUSH
16704: EMPTY
16705: LIST
16706: PPUSH
16707: CALL_OW 72
16711: NOT
16712: OR
16713: IFFALSE 16672
// if not UnitFilter ( legEForces , [ f_ok ] ) then
16715: LD_EXP 38
16719: PPUSH
16720: LD_INT 50
16722: PUSH
16723: EMPTY
16724: LIST
16725: PPUSH
16726: CALL_OW 72
16730: NOT
16731: IFFALSE 16735
// exit ;
16733: GO 16758
// legForces := legForces union legEForces ;
16735: LD_ADDR_EXP 37
16739: PUSH
16740: LD_EXP 37
16744: PUSH
16745: LD_EXP 38
16749: UNION
16750: ST_TO_ADDR
// legEForces := [ ] ;
16751: LD_ADDR_EXP 38
16755: PUSH
16756: EMPTY
16757: ST_TO_ADDR
// end ;
16758: PPOPN 3
16760: END
// every 0 0$1 trigger gameActive and ( See ( 8 , Omar ) or See ( 8 , Heike ) or spotByLegion ) and IsOk ( Heike ) and IsOk ( Omar ) do
16761: LD_EXP 19
16765: PUSH
16766: LD_INT 8
16768: PPUSH
16769: LD_EXP 24
16773: PPUSH
16774: CALL_OW 292
16778: PUSH
16779: LD_INT 8
16781: PPUSH
16782: LD_EXP 23
16786: PPUSH
16787: CALL_OW 292
16791: OR
16792: PUSH
16793: LD_EXP 9
16797: OR
16798: AND
16799: PUSH
16800: LD_EXP 23
16804: PPUSH
16805: CALL_OW 302
16809: AND
16810: PUSH
16811: LD_EXP 24
16815: PPUSH
16816: CALL_OW 302
16820: AND
16821: IFFALSE 16962
16823: GO 16825
16825: DISABLE
// begin DialogueOn ;
16826: CALL_OW 6
// SayRadio ( Farmer , DF-Spot-1 ) ;
16830: LD_EXP 36
16834: PPUSH
16835: LD_STRING DF-Spot-1
16837: PPUSH
16838: CALL_OW 94
// Say ( Heike , DH-Spot-2 ) ;
16842: LD_EXP 23
16846: PPUSH
16847: LD_STRING DH-Spot-2
16849: PPUSH
16850: CALL_OW 88
// SayRadio ( Farmer , DF-Spot-3 ) ;
16854: LD_EXP 36
16858: PPUSH
16859: LD_STRING DF-Spot-3
16861: PPUSH
16862: CALL_OW 94
// Say ( Heike , DH-Spot-4 ) ;
16866: LD_EXP 23
16870: PPUSH
16871: LD_STRING DH-Spot-4
16873: PPUSH
16874: CALL_OW 88
// Say ( Omar , DOm-Spot-5 ) ;
16878: LD_EXP 24
16882: PPUSH
16883: LD_STRING DOm-Spot-5
16885: PPUSH
16886: CALL_OW 88
// SayRadio ( Farmer , DF-Spot-6 ) ;
16890: LD_EXP 36
16894: PPUSH
16895: LD_STRING DF-Spot-6
16897: PPUSH
16898: CALL_OW 94
// SayRadio ( Farmer , DF-Spot-7 ) ;
16902: LD_EXP 36
16906: PPUSH
16907: LD_STRING DF-Spot-7
16909: PPUSH
16910: CALL_OW 94
// SayRadio ( Farmer , DF-Spot-8 ) ;
16914: LD_EXP 36
16918: PPUSH
16919: LD_STRING DF-Spot-8
16921: PPUSH
16922: CALL_OW 94
// Say ( Heike , DH-Spot-9 ) ;
16926: LD_EXP 23
16930: PPUSH
16931: LD_STRING DH-Spot-9
16933: PPUSH
16934: CALL_OW 88
// SayRadio ( Farmer , DF-Spot-10 ) ;
16938: LD_EXP 36
16942: PPUSH
16943: LD_STRING DF-Spot-10
16945: PPUSH
16946: CALL_OW 94
// DialogueOff ;
16950: CALL_OW 7
// spotByLegion := true ;
16954: LD_ADDR_EXP 9
16958: PUSH
16959: LD_INT 1
16961: ST_TO_ADDR
// end ;
16962: END
// every 0 0$1 trigger gameActive and ( spotByLegion or spotLegion ) do
16963: LD_EXP 19
16967: PUSH
16968: LD_EXP 9
16972: PUSH
16973: LD_EXP 10
16977: OR
16978: AND
16979: IFFALSE 16991
16981: GO 16983
16983: DISABLE
// ChangeMissionObjectives ( O3 ) ;
16984: LD_STRING O3
16986: PPUSH
16987: CALL_OW 337
16991: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_ok ] ] ) = 0 do
16992: LD_EXP 19
16996: PUSH
16997: LD_INT 22
16999: PUSH
17000: LD_INT 8
17002: PUSH
17003: EMPTY
17004: LIST
17005: LIST
17006: PUSH
17007: LD_INT 21
17009: PUSH
17010: LD_INT 1
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: PUSH
17017: LD_INT 50
17019: PUSH
17020: EMPTY
17021: LIST
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: LIST
17027: PPUSH
17028: CALL_OW 69
17032: PUSH
17033: LD_INT 0
17035: EQUAL
17036: AND
17037: IFFALSE 17135
17039: GO 17041
17041: DISABLE
// begin legScriptActive := false ;
17042: LD_ADDR_EXP 4
17046: PUSH
17047: LD_INT 0
17049: ST_TO_ADDR
// if not americanDestroyed then
17050: LD_EXP 11
17054: NOT
17055: IFFALSE 17064
// SetAchievement ( ACH_REVANGE ) ;
17057: LD_STRING ACH_REVANGE
17059: PPUSH
17060: CALL_OW 543
// legionDestroyed := true ;
17064: LD_ADDR_EXP 12
17068: PUSH
17069: LD_INT 1
17071: ST_TO_ADDR
// DialogueOn ;
17072: CALL_OW 6
// SayRadio ( Farmer , DF-LegDes-1 ) ;
17076: LD_EXP 36
17080: PPUSH
17081: LD_STRING DF-LegDes-1
17083: PPUSH
17084: CALL_OW 94
// Say ( Heike , DH-LegDes-2 ) ;
17088: LD_EXP 23
17092: PPUSH
17093: LD_STRING DH-LegDes-2
17095: PPUSH
17096: CALL_OW 88
// SayRadio ( Farmer , DF-LegDes-3 ) ;
17100: LD_EXP 36
17104: PPUSH
17105: LD_STRING DF-LegDes-3
17107: PPUSH
17108: CALL_OW 94
// Say ( Heike , DH-LegDes-4 ) ;
17112: LD_EXP 23
17116: PPUSH
17117: LD_STRING DH-LegDes-4
17119: PPUSH
17120: CALL_OW 88
// DialogueOff ;
17124: CALL_OW 7
// ChangeMissionObjectives ( O5 ) ;
17128: LD_STRING O5
17130: PPUSH
17131: CALL_OW 337
// end ;
17135: END
// every 0 0$1 trigger gameActive and UnitFilter ( amForces , [ [ f_type , unit_human ] , [ f_ok ] ] ) < 6 do var i , tmp ;
17136: LD_EXP 19
17140: PUSH
17141: LD_EXP 27
17145: PPUSH
17146: LD_INT 21
17148: PUSH
17149: LD_INT 1
17151: PUSH
17152: EMPTY
17153: LIST
17154: LIST
17155: PUSH
17156: LD_INT 50
17158: PUSH
17159: EMPTY
17160: LIST
17161: PUSH
17162: EMPTY
17163: LIST
17164: LIST
17165: PPUSH
17166: CALL_OW 72
17170: PUSH
17171: LD_INT 6
17173: LESS
17174: AND
17175: IFFALSE 17423
17177: GO 17179
17179: DISABLE
17180: LD_INT 0
17182: PPUSH
17183: PPUSH
// begin amScriptActive := false ;
17184: LD_ADDR_EXP 3
17188: PUSH
17189: LD_INT 0
17191: ST_TO_ADDR
// tmp := UnitFilter ( amForces , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
17192: LD_ADDR_VAR 0 2
17196: PUSH
17197: LD_EXP 27
17201: PPUSH
17202: LD_INT 21
17204: PUSH
17205: LD_INT 1
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: PUSH
17212: LD_INT 50
17214: PUSH
17215: EMPTY
17216: LIST
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: PPUSH
17222: CALL_OW 72
17226: ST_TO_ADDR
// for i in tmp do
17227: LD_ADDR_VAR 0 1
17231: PUSH
17232: LD_VAR 0 2
17236: PUSH
17237: FOR_IN
17238: IFFALSE 17266
// begin ComExit ( i ) ;
17240: LD_VAR 0 1
17244: PPUSH
17245: CALL 58860 0 1
// AddComMoveXY ( i , 63 , 124 ) ;
17249: LD_VAR 0 1
17253: PPUSH
17254: LD_INT 63
17256: PPUSH
17257: LD_INT 124
17259: PPUSH
17260: CALL_OW 171
// end ;
17264: GO 17237
17266: POP
17267: POP
// wait ( 0 0$2 ) ;
17268: LD_INT 70
17270: PPUSH
17271: CALL_OW 67
// americanDestroyed := true ;
17275: LD_ADDR_EXP 11
17279: PUSH
17280: LD_INT 1
17282: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17283: LD_INT 35
17285: PPUSH
17286: CALL_OW 67
// tmp := UnitFilter ( amForces , [ [ f_type , unit_human ] , [ f_ok ] ] ) union UnitFilter ( amPatrol , [ f_ok ] ) ;
17290: LD_ADDR_VAR 0 2
17294: PUSH
17295: LD_EXP 27
17299: PPUSH
17300: LD_INT 21
17302: PUSH
17303: LD_INT 1
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: PUSH
17310: LD_INT 50
17312: PUSH
17313: EMPTY
17314: LIST
17315: PUSH
17316: EMPTY
17317: LIST
17318: LIST
17319: PPUSH
17320: CALL_OW 72
17324: PUSH
17325: LD_EXP 35
17329: PPUSH
17330: LD_INT 50
17332: PUSH
17333: EMPTY
17334: LIST
17335: PPUSH
17336: CALL_OW 72
17340: UNION
17341: ST_TO_ADDR
// for i in tmp do
17342: LD_ADDR_VAR 0 1
17346: PUSH
17347: LD_VAR 0 2
17351: PUSH
17352: FOR_IN
17353: IFFALSE 17414
// begin if IsAt ( i , 63 , 124 ) or IsInArea ( i , amEscapeArea ) then
17355: LD_VAR 0 1
17359: PPUSH
17360: LD_INT 63
17362: PPUSH
17363: LD_INT 124
17365: PPUSH
17366: CALL_OW 307
17370: PUSH
17371: LD_VAR 0 1
17375: PPUSH
17376: LD_INT 25
17378: PPUSH
17379: CALL_OW 308
17383: OR
17384: IFFALSE 17397
// RemoveUnit ( i ) else
17386: LD_VAR 0 1
17390: PPUSH
17391: CALL_OW 64
17395: GO 17412
// ComMoveXY ( i , 63 , 124 ) ;
17397: LD_VAR 0 1
17401: PPUSH
17402: LD_INT 63
17404: PPUSH
17405: LD_INT 124
17407: PPUSH
17408: CALL_OW 111
// end ;
17412: GO 17352
17414: POP
17415: POP
// until not tmp ;
17416: LD_VAR 0 2
17420: NOT
17421: IFFALSE 17283
// end ;
17423: PPOPN 2
17425: END
// every 0 0$1 trigger gameActive and americanDestroyed and IsOk ( Heike ) and IsOk ( Omar ) do var i , un , veh ;
17426: LD_EXP 19
17430: PUSH
17431: LD_EXP 11
17435: AND
17436: PUSH
17437: LD_EXP 23
17441: PPUSH
17442: CALL_OW 302
17446: AND
17447: PUSH
17448: LD_EXP 24
17452: PPUSH
17453: CALL_OW 302
17457: AND
17458: IFFALSE 17948
17460: GO 17462
17462: DISABLE
17463: LD_INT 0
17465: PPUSH
17466: PPUSH
17467: PPUSH
// begin DialogueOn ;
17468: CALL_OW 6
// Say ( Heike , DH-Victory-1 ) ;
17472: LD_EXP 23
17476: PPUSH
17477: LD_STRING DH-Victory-1
17479: PPUSH
17480: CALL_OW 88
// Say ( Omar , DOm-Victory-2 ) ;
17484: LD_EXP 24
17488: PPUSH
17489: LD_STRING DOm-Victory-2
17491: PPUSH
17492: CALL_OW 88
// Say ( Omar , DOm-Victory-3 ) ;
17496: LD_EXP 24
17500: PPUSH
17501: LD_STRING DOm-Victory-3
17503: PPUSH
17504: CALL_OW 88
// Say ( Heike , DH-Victory-4 ) ;
17508: LD_EXP 23
17512: PPUSH
17513: LD_STRING DH-Victory-4
17515: PPUSH
17516: CALL_OW 88
// Say ( Omar , DOm-Victory-5 ) ;
17520: LD_EXP 24
17524: PPUSH
17525: LD_STRING DOm-Victory-5
17527: PPUSH
17528: CALL_OW 88
// Say ( Omar , DOm-Victory-6 ) ;
17532: LD_EXP 24
17536: PPUSH
17537: LD_STRING DOm-Victory-6
17539: PPUSH
17540: CALL_OW 88
// DialogueOff ;
17544: CALL_OW 7
// ChangeMissionObjectives ( O4 ) ;
17548: LD_STRING O4
17550: PPUSH
17551: CALL_OW 337
// canFinish := true ;
17555: LD_ADDR_EXP 18
17559: PUSH
17560: LD_INT 1
17562: ST_TO_ADDR
// SetAreaMapShow ( finalArea , 1 ) ;
17563: LD_INT 24
17565: PPUSH
17566: LD_INT 1
17568: PPUSH
17569: CALL_OW 424
// if not legionDestroyed then
17573: LD_EXP 12
17577: NOT
17578: IFFALSE 17948
// begin uc_nation := nation_arabian ;
17580: LD_ADDR_OWVAR 21
17584: PUSH
17585: LD_INT 2
17587: ST_TO_ADDR
// uc_side := 8 ;
17588: LD_ADDR_OWVAR 20
17592: PUSH
17593: LD_INT 8
17595: ST_TO_ADDR
// for i := 1 to 4 do
17596: LD_ADDR_VAR 0 1
17600: PUSH
17601: DOUBLE
17602: LD_INT 1
17604: DEC
17605: ST_TO_ADDR
17606: LD_INT 4
17608: PUSH
17609: FOR_TO
17610: IFFALSE 17691
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
17612: LD_INT 0
17614: PPUSH
17615: LD_INT 8
17617: PUSH
17618: LD_INT 9
17620: PUSH
17621: LD_INT 10
17623: PUSH
17624: LD_INT 10
17626: PUSH
17627: EMPTY
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: PUSH
17633: LD_OWVAR 67
17637: ARRAY
17638: PPUSH
17639: CALL_OW 381
// un := CreateHuman ;
17643: LD_ADDR_VAR 0 2
17647: PUSH
17648: CALL_OW 44
17652: ST_TO_ADDR
// SetDir ( un , 3 ) ;
17653: LD_VAR 0 2
17657: PPUSH
17658: LD_INT 3
17660: PPUSH
17661: CALL_OW 233
// PlaceUnitArea ( un , legDefArea , false ) ;
17665: LD_VAR 0 2
17669: PPUSH
17670: LD_INT 26
17672: PPUSH
17673: LD_INT 0
17675: PPUSH
17676: CALL_OW 49
// ComCrawl ( un ) ;
17680: LD_VAR 0 2
17684: PPUSH
17685: CALL_OW 137
// end ;
17689: GO 17609
17691: POP
17692: POP
// for i := 1 to 3 do
17693: LD_ADDR_VAR 0 1
17697: PUSH
17698: DOUBLE
17699: LD_INT 1
17701: DEC
17702: ST_TO_ADDR
17703: LD_INT 3
17705: PUSH
17706: FOR_TO
17707: IFFALSE 17791
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
17709: LD_INT 0
17711: PPUSH
17712: LD_INT 8
17714: PUSH
17715: LD_INT 9
17717: PUSH
17718: LD_INT 10
17720: PUSH
17721: LD_INT 10
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: PUSH
17730: LD_OWVAR 67
17734: ARRAY
17735: PPUSH
17736: CALL_OW 381
// un := CreateHuman ;
17740: LD_ADDR_VAR 0 2
17744: PUSH
17745: CALL_OW 44
17749: ST_TO_ADDR
// SetClass ( un , class_mortar ) ;
17750: LD_VAR 0 2
17754: PPUSH
17755: LD_INT 8
17757: PPUSH
17758: CALL_OW 336
// SetDir ( un , 3 ) ;
17762: LD_VAR 0 2
17766: PPUSH
17767: LD_INT 3
17769: PPUSH
17770: CALL_OW 233
// PlaceUnitArea ( un , legDefArea , false ) ;
17774: LD_VAR 0 2
17778: PPUSH
17779: LD_INT 26
17781: PPUSH
17782: LD_INT 0
17784: PPUSH
17785: CALL_OW 49
// end ;
17789: GO 17706
17791: POP
17792: POP
// for i := 1 to 2 do
17793: LD_ADDR_VAR 0 1
17797: PUSH
17798: DOUBLE
17799: LD_INT 1
17801: DEC
17802: ST_TO_ADDR
17803: LD_INT 2
17805: PUSH
17806: FOR_TO
17807: IFFALSE 17946
// begin uc_side := 8 ;
17809: LD_ADDR_OWVAR 20
17813: PUSH
17814: LD_INT 8
17816: ST_TO_ADDR
// uc_nation := nation_american ;
17817: LD_ADDR_OWVAR 21
17821: PUSH
17822: LD_INT 1
17824: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_combustion , control_manual , us_laser , 90 ) ;
17825: LD_INT 4
17827: PPUSH
17828: LD_INT 1
17830: PPUSH
17831: LD_INT 1
17833: PPUSH
17834: LD_INT 9
17836: PPUSH
17837: LD_INT 90
17839: PPUSH
17840: CALL 25591 0 5
// veh := CreateVehicle ;
17844: LD_ADDR_VAR 0 3
17848: PUSH
17849: CALL_OW 45
17853: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
17854: LD_VAR 0 3
17858: PPUSH
17859: LD_INT 3
17861: PPUSH
17862: CALL_OW 233
// PlaceUnitArea ( veh , legVDefArea , false ) ;
17866: LD_VAR 0 3
17870: PPUSH
17871: LD_INT 27
17873: PPUSH
17874: LD_INT 0
17876: PPUSH
17877: CALL_OW 49
// uc_nation := nation_arabian ;
17881: LD_ADDR_OWVAR 21
17885: PUSH
17886: LD_INT 2
17888: ST_TO_ADDR
// PrepareMechanic ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
17889: LD_INT 0
17891: PPUSH
17892: LD_INT 8
17894: PUSH
17895: LD_INT 9
17897: PUSH
17898: LD_INT 10
17900: PUSH
17901: LD_INT 10
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: PUSH
17910: LD_OWVAR 67
17914: ARRAY
17915: PPUSH
17916: CALL_OW 383
// un := CreateHuman ;
17920: LD_ADDR_VAR 0 2
17924: PUSH
17925: CALL_OW 44
17929: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17930: LD_VAR 0 2
17934: PPUSH
17935: LD_VAR 0 3
17939: PPUSH
17940: CALL_OW 52
// end ;
17944: GO 17806
17946: POP
17947: POP
// end ; end ;
17948: PPOPN 3
17950: END
// every 0 0$1 trigger gameActive and canFinish and AreInArea ( [ Omar ] , finalArea ) and AreInArea ( [ Heike ] , finalArea ) do
17951: LD_EXP 19
17955: PUSH
17956: LD_EXP 18
17960: AND
17961: PUSH
17962: LD_EXP 24
17966: PUSH
17967: EMPTY
17968: LIST
17969: PPUSH
17970: LD_INT 24
17972: PPUSH
17973: CALL 11734 0 2
17977: AND
17978: PUSH
17979: LD_EXP 23
17983: PUSH
17984: EMPTY
17985: LIST
17986: PPUSH
17987: LD_INT 24
17989: PPUSH
17990: CALL 11734 0 2
17994: AND
17995: IFFALSE 18168
17997: GO 17999
17999: DISABLE
// begin if tick <= 50 50$00 then
18000: LD_OWVAR 1
18004: PUSH
18005: LD_INT 105000
18007: LESSEQUAL
18008: IFFALSE 18017
// SetAchievement ( ACH_HSPEED_10 ) ;
18010: LD_STRING ACH_HSPEED_10
18012: PPUSH
18013: CALL_OW 543
// if legionDestroyed then
18017: LD_EXP 12
18021: IFFALSE 18035
// AddMedal ( med1 , 1 ) else
18023: LD_STRING med1
18025: PPUSH
18026: LD_INT 1
18028: PPUSH
18029: CALL_OW 101
18033: GO 18046
// AddMedal ( med1 , - 1 ) ;
18035: LD_STRING med1
18037: PPUSH
18038: LD_INT 1
18040: NEG
18041: PPUSH
18042: CALL_OW 101
// if tick <= [ 90 90$00 , 80 80$00 , 70 70$00 , 60 60$00 ] [ Difficulty ] then
18046: LD_OWVAR 1
18050: PUSH
18051: LD_INT 189000
18053: PUSH
18054: LD_INT 168000
18056: PUSH
18057: LD_INT 147000
18059: PUSH
18060: LD_INT 126000
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: PUSH
18069: LD_OWVAR 67
18073: ARRAY
18074: LESSEQUAL
18075: IFFALSE 18089
// AddMedal ( med2 , 1 ) else
18077: LD_STRING med2
18079: PPUSH
18080: LD_INT 1
18082: PPUSH
18083: CALL_OW 101
18087: GO 18100
// AddMedal ( med2 , - 1 ) ;
18089: LD_STRING med2
18091: PPUSH
18092: LD_INT 1
18094: NEG
18095: PPUSH
18096: CALL_OW 101
// if hasApes + hasVehicles + hasTigers + hasMastodont + hasDrugs >= 3 then
18100: LD_EXP 16
18104: PUSH
18105: LD_EXP 14
18109: PLUS
18110: PUSH
18111: LD_EXP 15
18115: PLUS
18116: PUSH
18117: LD_EXP 13
18121: PLUS
18122: PUSH
18123: LD_EXP 17
18127: PLUS
18128: PUSH
18129: LD_INT 3
18131: GREATEREQUAL
18132: IFFALSE 18146
// AddMedal ( med3 , 1 ) else
18134: LD_STRING med3
18136: PPUSH
18137: LD_INT 1
18139: PPUSH
18140: CALL_OW 101
18144: GO 18157
// AddMedal ( med3 , - 1 ) ;
18146: LD_STRING med3
18148: PPUSH
18149: LD_INT 1
18151: NEG
18152: PPUSH
18153: CALL_OW 101
// GiveMedals ( MAIN ) ;
18157: LD_STRING MAIN
18159: PPUSH
18160: CALL_OW 102
// YouWin ;
18164: CALL_OW 103
// end ; end_of_file
18168: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
18169: LD_VAR 0 1
18173: PPUSH
18174: CALL 79721 0 1
// if apeAmount and GetSide ( unit ) = 2 and ( GetControl ( unit ) = control_apeman or GetClass ( unit ) in [ class_apeman , class_apeman_soldier , class_apeman_engineer , class_apeman_kamikaze ] ) then
18178: LD_EXP 5
18182: PUSH
18183: LD_VAR 0 1
18187: PPUSH
18188: CALL_OW 255
18192: PUSH
18193: LD_INT 2
18195: EQUAL
18196: AND
18197: PUSH
18198: LD_VAR 0 1
18202: PPUSH
18203: CALL_OW 263
18207: PUSH
18208: LD_INT 5
18210: EQUAL
18211: PUSH
18212: LD_VAR 0 1
18216: PPUSH
18217: CALL_OW 257
18221: PUSH
18222: LD_INT 12
18224: PUSH
18225: LD_INT 15
18227: PUSH
18228: LD_INT 16
18230: PUSH
18231: LD_INT 17
18233: PUSH
18234: EMPTY
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: IN
18240: OR
18241: AND
18242: IFFALSE 18312
// begin apeAmount := Dec ( apeAmount ) ;
18244: LD_ADDR_EXP 5
18248: PUSH
18249: LD_EXP 5
18253: PPUSH
18254: CALL 59845 0 1
18258: ST_TO_ADDR
// wait ( rand ( 0 0$1 , 1 1$00 ) ) ;
18259: LD_INT 35
18261: PPUSH
18262: LD_INT 2100
18264: PPUSH
18265: CALL_OW 12
18269: PPUSH
18270: CALL_OW 67
// uc_side := 0 ;
18274: LD_ADDR_OWVAR 20
18278: PUSH
18279: LD_INT 0
18281: ST_TO_ADDR
// uc_nation := nation_nature ;
18282: LD_ADDR_OWVAR 21
18286: PUSH
18287: LD_INT 0
18289: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
18290: LD_INT 0
18292: PPUSH
18293: CALL 54710 0 1
// PlaceUnitArea ( CreateHuman , apeArea , false ) ;
18297: CALL_OW 44
18301: PPUSH
18302: LD_INT 6
18304: PPUSH
18305: LD_INT 0
18307: PPUSH
18308: CALL_OW 49
// end ; if unit = Heike then
18312: LD_VAR 0 1
18316: PUSH
18317: LD_EXP 23
18321: EQUAL
18322: IFFALSE 18331
// YouLost ( Heike ) ;
18324: LD_STRING Heike
18326: PPUSH
18327: CALL_OW 104
// if unit = Omar then
18331: LD_VAR 0 1
18335: PUSH
18336: LD_EXP 24
18340: EQUAL
18341: IFFALSE 18350
// YouLost ( Omar ) ;
18343: LD_STRING Omar
18345: PPUSH
18346: CALL_OW 104
// if unit in amForces then
18350: LD_VAR 0 1
18354: PUSH
18355: LD_EXP 27
18359: IN
18360: IFFALSE 18378
// amForces := amForces diff unit ;
18362: LD_ADDR_EXP 27
18366: PUSH
18367: LD_EXP 27
18371: PUSH
18372: LD_VAR 0 1
18376: DIFF
18377: ST_TO_ADDR
// if unit in amTanks then
18378: LD_VAR 0 1
18382: PUSH
18383: LD_EXP 32
18387: IN
18388: IFFALSE 18406
// amTanks := amTanks diff unit ;
18390: LD_ADDR_EXP 32
18394: PUSH
18395: LD_EXP 32
18399: PUSH
18400: LD_VAR 0 1
18404: DIFF
18405: ST_TO_ADDR
// if unit in amPatrol then
18406: LD_VAR 0 1
18410: PUSH
18411: LD_EXP 35
18415: IN
18416: IFFALSE 18434
// amPatrol := amPatrol diff unit ;
18418: LD_ADDR_EXP 35
18422: PUSH
18423: LD_EXP 35
18427: PUSH
18428: LD_VAR 0 1
18432: DIFF
18433: ST_TO_ADDR
// if GetBType ( unit ) in [ b_bunker , b_turret ] and GetSide ( unit ) = 1 then
18434: LD_VAR 0 1
18438: PPUSH
18439: CALL_OW 266
18443: PUSH
18444: LD_INT 32
18446: PUSH
18447: LD_INT 33
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: IN
18454: PUSH
18455: LD_VAR 0 1
18459: PPUSH
18460: CALL_OW 255
18464: PUSH
18465: LD_INT 1
18467: EQUAL
18468: AND
18469: IFFALSE 18532
// amBuildings := Join ( amBuildings , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
18471: LD_ADDR_EXP 31
18475: PUSH
18476: LD_EXP 31
18480: PPUSH
18481: LD_VAR 0 1
18485: PPUSH
18486: CALL_OW 266
18490: PUSH
18491: LD_VAR 0 1
18495: PPUSH
18496: CALL_OW 250
18500: PUSH
18501: LD_VAR 0 1
18505: PPUSH
18506: CALL_OW 251
18510: PUSH
18511: LD_VAR 0 1
18515: PPUSH
18516: CALL_OW 254
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: PPUSH
18527: CALL 58462 0 2
18531: ST_TO_ADDR
// if unit in legForces then
18532: LD_VAR 0 1
18536: PUSH
18537: LD_EXP 37
18541: IN
18542: IFFALSE 18560
// legForces := legForces diff unit ;
18544: LD_ADDR_EXP 37
18548: PUSH
18549: LD_EXP 37
18553: PUSH
18554: LD_VAR 0 1
18558: DIFF
18559: ST_TO_ADDR
// if unit in legTanks then
18560: LD_VAR 0 1
18564: PUSH
18565: LD_EXP 43
18569: IN
18570: IFFALSE 18588
// legTanks := legTanks diff unit ;
18572: LD_ADDR_EXP 43
18576: PUSH
18577: LD_EXP 43
18581: PUSH
18582: LD_VAR 0 1
18586: DIFF
18587: ST_TO_ADDR
// if unit in legRTanks then
18588: LD_VAR 0 1
18592: PUSH
18593: LD_EXP 44
18597: IN
18598: IFFALSE 18616
// legRTanks := legRTanks diff unit ;
18600: LD_ADDR_EXP 44
18604: PUSH
18605: LD_EXP 44
18609: PUSH
18610: LD_VAR 0 1
18614: DIFF
18615: ST_TO_ADDR
// if GetBType ( unit ) in [ b_bunker , b_turret ] and GetSide ( unit ) = 8 then
18616: LD_VAR 0 1
18620: PPUSH
18621: CALL_OW 266
18625: PUSH
18626: LD_INT 32
18628: PUSH
18629: LD_INT 33
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: IN
18636: PUSH
18637: LD_VAR 0 1
18641: PPUSH
18642: CALL_OW 255
18646: PUSH
18647: LD_INT 8
18649: EQUAL
18650: AND
18651: IFFALSE 18714
// legBuildings := Join ( legBuildings , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
18653: LD_ADDR_EXP 42
18657: PUSH
18658: LD_EXP 42
18662: PPUSH
18663: LD_VAR 0 1
18667: PPUSH
18668: CALL_OW 266
18672: PUSH
18673: LD_VAR 0 1
18677: PPUSH
18678: CALL_OW 250
18682: PUSH
18683: LD_VAR 0 1
18687: PPUSH
18688: CALL_OW 251
18692: PUSH
18693: LD_VAR 0 1
18697: PPUSH
18698: CALL_OW 254
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: PPUSH
18709: CALL 58462 0 2
18713: ST_TO_ADDR
// if GetWeapon ( unit ) = us_crane and GetSide ( unit ) = 1 then
18714: LD_VAR 0 1
18718: PPUSH
18719: CALL_OW 264
18723: PUSH
18724: LD_INT 13
18726: EQUAL
18727: PUSH
18728: LD_VAR 0 1
18732: PPUSH
18733: CALL_OW 255
18737: PUSH
18738: LD_INT 1
18740: EQUAL
18741: AND
18742: IFFALSE 18777
// amConstructList := Join ( amConstructList , [ us_medium_wheeled , engine_combustion , control_remote , us_crane ] ) ;
18744: LD_ADDR_EXP 29
18748: PUSH
18749: LD_EXP 29
18753: PPUSH
18754: LD_INT 2
18756: PUSH
18757: LD_INT 1
18759: PUSH
18760: LD_INT 2
18762: PUSH
18763: LD_INT 13
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: LIST
18770: LIST
18771: PPUSH
18772: CALL 58462 0 2
18776: ST_TO_ADDR
// if GetWeapon ( unit ) = ar_crane and GetSide ( unit ) = 8 then
18777: LD_VAR 0 1
18781: PPUSH
18782: CALL_OW 264
18786: PUSH
18787: LD_INT 88
18789: EQUAL
18790: PUSH
18791: LD_VAR 0 1
18795: PPUSH
18796: CALL_OW 255
18800: PUSH
18801: LD_INT 8
18803: EQUAL
18804: AND
18805: IFFALSE 18840
// legConstructList := Join ( legConstructList , [ ar_medium_trike , engine_combustion , control_remote , ar_crane ] ) ;
18807: LD_ADDR_EXP 40
18811: PUSH
18812: LD_EXP 40
18816: PPUSH
18817: LD_INT 13
18819: PUSH
18820: LD_INT 1
18822: PUSH
18823: LD_INT 2
18825: PUSH
18826: LD_INT 88
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: LIST
18833: LIST
18834: PPUSH
18835: CALL 58462 0 2
18839: ST_TO_ADDR
// if unit = amCargo then
18840: LD_VAR 0 1
18844: PUSH
18845: LD_EXP 34
18849: EQUAL
18850: IFFALSE 18893
// begin amCargo := 0 ;
18852: LD_ADDR_EXP 34
18856: PUSH
18857: LD_INT 0
18859: ST_TO_ADDR
// amConstructList := Join ( amConstructList , [ us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ] ) ;
18860: LD_ADDR_EXP 29
18864: PUSH
18865: LD_EXP 29
18869: PPUSH
18870: LD_INT 2
18872: PUSH
18873: LD_INT 1
18875: PUSH
18876: LD_INT 2
18878: PUSH
18879: LD_INT 12
18881: PUSH
18882: EMPTY
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: PPUSH
18888: CALL 58462 0 2
18892: ST_TO_ADDR
// end ; if unit = legCargo then
18893: LD_VAR 0 1
18897: PUSH
18898: LD_EXP 45
18902: EQUAL
18903: IFFALSE 18946
// begin legCargo := 0 ;
18905: LD_ADDR_EXP 45
18909: PUSH
18910: LD_INT 0
18912: ST_TO_ADDR
// legConstructList := Join ( legConstructList , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ) ;
18913: LD_ADDR_EXP 40
18917: PUSH
18918: LD_EXP 40
18922: PPUSH
18923: LD_INT 13
18925: PUSH
18926: LD_INT 1
18928: PUSH
18929: LD_INT 2
18931: PUSH
18932: LD_INT 32
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: PPUSH
18941: CALL 58462 0 2
18945: ST_TO_ADDR
// end ; end ;
18946: PPOPN 1
18948: END
// on TigerTamed ( tiger , sheik ) do begin tigerCounter := Inc ( tigerCounter ) ;
18949: LD_ADDR_EXP 21
18953: PUSH
18954: LD_EXP 21
18958: PPUSH
18959: CALL 59823 0 1
18963: ST_TO_ADDR
// end ;
18964: PPOPN 2
18966: END
// on EnterBuilding ( b , un ) do begin if un in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_class , class_mechanic ] ] ) and GetBType ( b ) = b_factory and GetLives ( un ) < 1000 then
18967: LD_VAR 0 2
18971: PUSH
18972: LD_INT 3
18974: PUSH
18975: LD_INT 22
18977: PUSH
18978: LD_INT 2
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: PUSH
18985: EMPTY
18986: LIST
18987: LIST
18988: PUSH
18989: LD_INT 25
18991: PUSH
18992: LD_INT 3
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PPUSH
19003: CALL_OW 69
19007: IN
19008: PUSH
19009: LD_VAR 0 1
19013: PPUSH
19014: CALL_OW 266
19018: PUSH
19019: LD_INT 3
19021: EQUAL
19022: AND
19023: PUSH
19024: LD_VAR 0 2
19028: PPUSH
19029: CALL_OW 256
19033: PUSH
19034: LD_INT 1000
19036: LESS
19037: AND
19038: IFFALSE 19064
// begin SetTag ( un , 0 ) ;
19040: LD_VAR 0 2
19044: PPUSH
19045: LD_INT 0
19047: PPUSH
19048: CALL_OW 109
// SetLives ( un , 1000 ) ;
19052: LD_VAR 0 2
19056: PPUSH
19057: LD_INT 1000
19059: PPUSH
19060: CALL_OW 234
// end ; end ;
19064: PPOPN 2
19066: END
// on VehicleConstructed ( veh , fac ) do var side , weapon ;
19067: LD_INT 0
19069: PPUSH
19070: PPUSH
// begin SOS_VehicleConstructed ( veh , fac ) ;
19071: LD_VAR 0 1
19075: PPUSH
19076: LD_VAR 0 2
19080: PPUSH
19081: CALL 79779 0 2
// side := GetSide ( fac ) ;
19085: LD_ADDR_VAR 0 3
19089: PUSH
19090: LD_VAR 0 2
19094: PPUSH
19095: CALL_OW 255
19099: ST_TO_ADDR
// weapon := GetWeapon ( veh ) ;
19100: LD_ADDR_VAR 0 4
19104: PUSH
19105: LD_VAR 0 1
19109: PPUSH
19110: CALL_OW 264
19114: ST_TO_ADDR
// if side = 1 then
19115: LD_VAR 0 3
19119: PUSH
19120: LD_INT 1
19122: EQUAL
19123: IFFALSE 19232
// begin amConstructList := Delete ( amConstructList , 1 ) ;
19125: LD_ADDR_EXP 29
19129: PUSH
19130: LD_EXP 29
19134: PPUSH
19135: LD_INT 1
19137: PPUSH
19138: CALL_OW 3
19142: ST_TO_ADDR
// if weapon = us_cargo_bay and not amCargo then
19143: LD_VAR 0 4
19147: PUSH
19148: LD_INT 12
19150: EQUAL
19151: PUSH
19152: LD_EXP 34
19156: NOT
19157: AND
19158: IFFALSE 19170
// amCargo := veh ;
19160: LD_ADDR_EXP 34
19164: PUSH
19165: LD_VAR 0 1
19169: ST_TO_ADDR
// if weapon in [ us_cargo_bay , us_crane , us_bulldozer ] then
19170: LD_VAR 0 4
19174: PUSH
19175: LD_INT 12
19177: PUSH
19178: LD_INT 13
19180: PUSH
19181: LD_INT 14
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: LIST
19188: IN
19189: IFFALSE 19193
// exit ;
19191: GO 19382
// amTanks := Join ( amTanks , veh ) ;
19193: LD_ADDR_EXP 32
19197: PUSH
19198: LD_EXP 32
19202: PPUSH
19203: LD_VAR 0 1
19207: PPUSH
19208: CALL 58462 0 2
19212: ST_TO_ADDR
// wait ( 0 0$01 ) ;
19213: LD_INT 35
19215: PPUSH
19216: CALL_OW 67
// AddComMoveToArea ( veh , amParkingArea ) ;
19220: LD_VAR 0 1
19224: PPUSH
19225: LD_INT 12
19227: PPUSH
19228: CALL_OW 173
// end ; if side = 8 then
19232: LD_VAR 0 3
19236: PUSH
19237: LD_INT 8
19239: EQUAL
19240: IFFALSE 19382
// begin legConstructList := Delete ( legConstructList , 1 ) ;
19242: LD_ADDR_EXP 40
19246: PUSH
19247: LD_EXP 40
19251: PPUSH
19252: LD_INT 1
19254: PPUSH
19255: CALL_OW 3
19259: ST_TO_ADDR
// if weapon = ar_cargo_bay and not legCargo then
19260: LD_VAR 0 4
19264: PUSH
19265: LD_INT 32
19267: EQUAL
19268: PUSH
19269: LD_EXP 45
19273: NOT
19274: AND
19275: IFFALSE 19287
// legCargo := veh ;
19277: LD_ADDR_EXP 45
19281: PUSH
19282: LD_VAR 0 1
19286: ST_TO_ADDR
// if weapon in [ ar_cargo_bay , ar_crane ] then
19287: LD_VAR 0 4
19291: PUSH
19292: LD_INT 32
19294: PUSH
19295: LD_INT 88
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: IN
19302: IFFALSE 19306
// exit ;
19304: GO 19382
// if GetControl ( veh ) = control_manual then
19306: LD_VAR 0 1
19310: PPUSH
19311: CALL_OW 263
19315: PUSH
19316: LD_INT 1
19318: EQUAL
19319: IFFALSE 19343
// legTanks := Join ( legTanks , veh ) else
19321: LD_ADDR_EXP 43
19325: PUSH
19326: LD_EXP 43
19330: PPUSH
19331: LD_VAR 0 1
19335: PPUSH
19336: CALL 58462 0 2
19340: ST_TO_ADDR
19341: GO 19363
// legRTanks := Join ( legRTanks , veh ) ;
19343: LD_ADDR_EXP 44
19347: PUSH
19348: LD_EXP 44
19352: PPUSH
19353: LD_VAR 0 1
19357: PPUSH
19358: CALL 58462 0 2
19362: ST_TO_ADDR
// wait ( 0 0$01 ) ;
19363: LD_INT 35
19365: PPUSH
19366: CALL_OW 67
// AddComMoveToArea ( veh , legParkingArea ) ;
19370: LD_VAR 0 1
19374: PPUSH
19375: LD_INT 15
19377: PPUSH
19378: CALL_OW 173
// end ; end ;
19382: PPOPN 4
19384: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do var arm , fac , side ;
19385: LD_INT 0
19387: PPUSH
19388: PPUSH
19389: PPUSH
// begin side := GetSide ( driver ) ;
19390: LD_ADDR_VAR 0 7
19394: PUSH
19395: LD_VAR 0 1
19399: PPUSH
19400: CALL_OW 255
19404: ST_TO_ADDR
// if side = 1 and driver in amForces then
19405: LD_VAR 0 7
19409: PUSH
19410: LD_INT 1
19412: EQUAL
19413: PUSH
19414: LD_VAR 0 1
19418: PUSH
19419: LD_EXP 27
19423: IN
19424: AND
19425: IFFALSE 19637
// begin ComMoveToArea ( driver , amBaseArea ) ;
19427: LD_VAR 0 1
19431: PPUSH
19432: LD_INT 1
19434: PPUSH
19435: CALL_OW 113
// SetTag ( driver , tMech ) ;
19439: LD_VAR 0 1
19443: PPUSH
19444: LD_INT 7
19446: PPUSH
19447: CALL_OW 109
// fac := FilterUnitsInArea ( amBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
19451: LD_ADDR_VAR 0 6
19455: PUSH
19456: LD_INT 1
19458: PPUSH
19459: LD_INT 22
19461: PUSH
19462: LD_VAR 0 7
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PUSH
19471: LD_INT 30
19473: PUSH
19474: LD_INT 3
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PUSH
19481: LD_INT 50
19483: PUSH
19484: EMPTY
19485: LIST
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: LIST
19491: PPUSH
19492: CALL_OW 70
19496: ST_TO_ADDR
// if fac then
19497: LD_VAR 0 6
19501: IFFALSE 19523
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
19503: LD_VAR 0 1
19507: PPUSH
19508: LD_VAR 0 6
19512: PUSH
19513: LD_INT 1
19515: ARRAY
19516: PPUSH
19517: CALL_OW 180
// exit ;
19521: GO 19890
// end ; arm := FilterUnitsInArea ( amBaseArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
19523: LD_ADDR_VAR 0 5
19527: PUSH
19528: LD_INT 1
19530: PPUSH
19531: LD_INT 22
19533: PUSH
19534: LD_VAR 0 7
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: PUSH
19543: LD_INT 2
19545: PUSH
19546: LD_INT 30
19548: PUSH
19549: LD_INT 4
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: PUSH
19556: LD_INT 30
19558: PUSH
19559: LD_INT 5
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: LIST
19570: PUSH
19571: LD_INT 3
19573: PUSH
19574: LD_INT 62
19576: PUSH
19577: EMPTY
19578: LIST
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: PUSH
19584: LD_INT 50
19586: PUSH
19587: EMPTY
19588: LIST
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: PPUSH
19596: CALL_OW 70
19600: ST_TO_ADDR
// if arm then
19601: LD_VAR 0 5
19605: IFFALSE 19637
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
19607: LD_VAR 0 1
19611: PPUSH
19612: LD_VAR 0 5
19616: PUSH
19617: LD_INT 1
19619: ARRAY
19620: PPUSH
19621: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
19625: LD_VAR 0 1
19629: PPUSH
19630: LD_INT 1
19632: PPUSH
19633: CALL_OW 183
// end ; end ; if side = 8 then
19637: LD_VAR 0 7
19641: PUSH
19642: LD_INT 8
19644: EQUAL
19645: IFFALSE 19890
// begin ComMoveToArea ( driver , legBaseArea ) ;
19647: LD_VAR 0 1
19651: PPUSH
19652: LD_INT 2
19654: PPUSH
19655: CALL_OW 113
// if not driver in legForces then
19659: LD_VAR 0 1
19663: PUSH
19664: LD_EXP 37
19668: IN
19669: NOT
19670: IFFALSE 19692
// legForces := Join ( legForces , driver ) ;
19672: LD_ADDR_EXP 37
19676: PUSH
19677: LD_EXP 37
19681: PPUSH
19682: LD_VAR 0 1
19686: PPUSH
19687: CALL 58462 0 2
19691: ST_TO_ADDR
// SetTag ( driver , tMech ) ;
19692: LD_VAR 0 1
19696: PPUSH
19697: LD_INT 7
19699: PPUSH
19700: CALL_OW 109
// fac := FilterUnitsInArea ( legBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
19704: LD_ADDR_VAR 0 6
19708: PUSH
19709: LD_INT 2
19711: PPUSH
19712: LD_INT 22
19714: PUSH
19715: LD_VAR 0 7
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: PUSH
19724: LD_INT 30
19726: PUSH
19727: LD_INT 3
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PUSH
19734: LD_INT 50
19736: PUSH
19737: EMPTY
19738: LIST
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: LIST
19744: PPUSH
19745: CALL_OW 70
19749: ST_TO_ADDR
// if fac then
19750: LD_VAR 0 6
19754: IFFALSE 19776
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
19756: LD_VAR 0 1
19760: PPUSH
19761: LD_VAR 0 6
19765: PUSH
19766: LD_INT 1
19768: ARRAY
19769: PPUSH
19770: CALL_OW 180
// exit ;
19774: GO 19890
// end ; arm := FilterUnitsInArea ( legBaseArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
19776: LD_ADDR_VAR 0 5
19780: PUSH
19781: LD_INT 2
19783: PPUSH
19784: LD_INT 22
19786: PUSH
19787: LD_VAR 0 7
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: PUSH
19796: LD_INT 2
19798: PUSH
19799: LD_INT 30
19801: PUSH
19802: LD_INT 4
19804: PUSH
19805: EMPTY
19806: LIST
19807: LIST
19808: PUSH
19809: LD_INT 30
19811: PUSH
19812: LD_INT 5
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: LIST
19823: PUSH
19824: LD_INT 3
19826: PUSH
19827: LD_INT 62
19829: PUSH
19830: EMPTY
19831: LIST
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: PUSH
19837: LD_INT 50
19839: PUSH
19840: EMPTY
19841: LIST
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: PPUSH
19849: CALL_OW 70
19853: ST_TO_ADDR
// if arm then
19854: LD_VAR 0 5
19858: IFFALSE 19890
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
19860: LD_VAR 0 1
19864: PPUSH
19865: LD_VAR 0 5
19869: PUSH
19870: LD_INT 1
19872: ARRAY
19873: PPUSH
19874: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
19878: LD_VAR 0 1
19882: PPUSH
19883: LD_INT 1
19885: PPUSH
19886: CALL_OW 183
// end ; end ; end ;
19890: PPOPN 7
19892: END
// on BuildingComplete ( b ) do var side , type ;
19893: LD_INT 0
19895: PPUSH
19896: PPUSH
// begin side := GetSide ( b ) ;
19897: LD_ADDR_VAR 0 2
19901: PUSH
19902: LD_VAR 0 1
19906: PPUSH
19907: CALL_OW 255
19911: ST_TO_ADDR
// type := GetBType ( b ) ;
19912: LD_ADDR_VAR 0 3
19916: PUSH
19917: LD_VAR 0 1
19921: PPUSH
19922: CALL_OW 266
19926: ST_TO_ADDR
// if side = 1 then
19927: LD_VAR 0 2
19931: PUSH
19932: LD_INT 1
19934: EQUAL
19935: IFFALSE 19985
// begin amBuildings := Delete ( amBuildings , 1 ) ;
19937: LD_ADDR_EXP 31
19941: PUSH
19942: LD_EXP 31
19946: PPUSH
19947: LD_INT 1
19949: PPUSH
19950: CALL_OW 3
19954: ST_TO_ADDR
// if type in [ b_depot , b_armoury , b_workshop ] then
19955: LD_VAR 0 3
19959: PUSH
19960: LD_INT 0
19962: PUSH
19963: LD_INT 4
19965: PUSH
19966: LD_INT 2
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: LIST
19973: IN
19974: IFFALSE 19985
// ComUpgrade ( b ) ;
19976: LD_VAR 0 1
19980: PPUSH
19981: CALL_OW 146
// end ; end ;
19985: PPOPN 3
19987: END
// on ResearchComplete ( tech , lab ) do var side ;
19988: LD_INT 0
19990: PPUSH
// begin side := GetSide ( lab ) ;
19991: LD_ADDR_VAR 0 3
19995: PUSH
19996: LD_VAR 0 2
20000: PPUSH
20001: CALL_OW 255
20005: ST_TO_ADDR
// if side = 1 then
20006: LD_VAR 0 3
20010: PUSH
20011: LD_INT 1
20013: EQUAL
20014: IFFALSE 20032
// amTech := amTech diff tech ;
20016: LD_ADDR_EXP 28
20020: PUSH
20021: LD_EXP 28
20025: PUSH
20026: LD_VAR 0 1
20030: DIFF
20031: ST_TO_ADDR
// end ;
20032: PPOPN 3
20034: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
20035: LD_VAR 0 1
20039: PPUSH
20040: CALL 79763 0 1
// end ;
20044: PPOPN 1
20046: END
// on SailEvent ( event ) do begin case event of end ;
20047: LD_VAR 0 1
20051: PUSH
20052: POP
// end ;
20053: PPOPN 1
20055: END
// on Contact ( s1 , s2 ) do begin if not gameActive then
20056: LD_EXP 19
20060: NOT
20061: IFFALSE 20065
// exit ;
20063: GO 20163
// if not spotByAmerican and s1 in [ 2 , 1 ] and s2 in [ 1 , 2 ] then
20065: LD_EXP 8
20069: NOT
20070: PUSH
20071: LD_VAR 0 1
20075: PUSH
20076: LD_INT 2
20078: PUSH
20079: LD_INT 1
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: IN
20086: AND
20087: PUSH
20088: LD_VAR 0 2
20092: PUSH
20093: LD_INT 1
20095: PUSH
20096: LD_INT 2
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: IN
20103: AND
20104: IFFALSE 20114
// spotByAmerican := true ;
20106: LD_ADDR_EXP 8
20110: PUSH
20111: LD_INT 1
20113: ST_TO_ADDR
// if not spotByLegion and s1 in [ 2 , 8 ] and s2 in [ 8 , 2 ] then
20114: LD_EXP 9
20118: NOT
20119: PUSH
20120: LD_VAR 0 1
20124: PUSH
20125: LD_INT 2
20127: PUSH
20128: LD_INT 8
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: IN
20135: AND
20136: PUSH
20137: LD_VAR 0 2
20141: PUSH
20142: LD_INT 8
20144: PUSH
20145: LD_INT 2
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: IN
20152: AND
20153: IFFALSE 20163
// spotByLegion := true ;
20155: LD_ADDR_EXP 9
20159: PUSH
20160: LD_INT 1
20162: ST_TO_ADDR
// end ; end_of_file
20163: PPOPN 2
20165: END
// every 1 1$05 + 0 0$20 trigger spotArabianBase do var i , tmp ;
20166: LD_EXP 7
20170: IFFALSE 20277
20172: GO 20174
20174: DISABLE
20175: LD_INT 0
20177: PPUSH
20178: PPUSH
// begin enable ;
20179: ENABLE
// wait ( rand ( 0 0$1 , 0 0$11 ) ) ;
20180: LD_INT 35
20182: PPUSH
20183: LD_INT 385
20185: PPUSH
20186: CALL_OW 12
20190: PPUSH
20191: CALL_OW 67
// tmp := [ cratesNorthArea , cratesWestArea ] ;
20195: LD_ADDR_VAR 0 2
20199: PUSH
20200: LD_INT 16
20202: PUSH
20203: LD_INT 17
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: ST_TO_ADDR
// i := tmp [ rand ( 1 , Count ( tmp ) ) ] ;
20210: LD_ADDR_VAR 0 1
20214: PUSH
20215: LD_VAR 0 2
20219: PUSH
20220: LD_INT 1
20222: PPUSH
20223: LD_VAR 0 2
20227: PPUSH
20228: CALL 22853 0 1
20232: PPUSH
20233: CALL_OW 12
20237: ARRAY
20238: ST_TO_ADDR
// if GetListOfCratesInArea ( i ) < 4 then
20239: LD_VAR 0 1
20243: PPUSH
20244: CALL_OW 435
20248: PUSH
20249: LD_INT 4
20251: LESS
20252: IFFALSE 20277
// CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
20254: LD_INT 1
20256: PPUSH
20257: LD_INT 5
20259: PPUSH
20260: CALL_OW 12
20264: PPUSH
20265: LD_VAR 0 1
20269: PPUSH
20270: LD_INT 1
20272: PPUSH
20273: CALL_OW 55
// end ;
20277: PPOPN 2
20279: END
// every 0 0$25 trigger tick < [ 5 5$00 , 4 4$00 , 3 3$00 , 2 2$30 ] [ Difficulty ] and spotArabianBase do
20280: LD_OWVAR 1
20284: PUSH
20285: LD_INT 10500
20287: PUSH
20288: LD_INT 8400
20290: PUSH
20291: LD_INT 6300
20293: PUSH
20294: LD_INT 5250
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: PUSH
20303: LD_OWVAR 67
20307: ARRAY
20308: LESS
20309: PUSH
20310: LD_EXP 7
20314: AND
20315: IFFALSE 20348
20317: GO 20319
20319: DISABLE
// begin enable ;
20320: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 218 , 92 , 11 , true ) ;
20321: LD_INT 1
20323: PPUSH
20324: LD_INT 5
20326: PPUSH
20327: CALL_OW 12
20331: PPUSH
20332: LD_INT 218
20334: PPUSH
20335: LD_INT 92
20337: PPUSH
20338: LD_INT 11
20340: PPUSH
20341: LD_INT 1
20343: PPUSH
20344: CALL_OW 56
// end ;
20348: END
// every 0 0$45 trigger tick > [ 6 6$00 , 5 5$00 , 4 4$00 , 3 3$30 ] [ Difficulty ] and spotArabianBase do
20349: LD_OWVAR 1
20353: PUSH
20354: LD_INT 12600
20356: PUSH
20357: LD_INT 10500
20359: PUSH
20360: LD_INT 8400
20362: PUSH
20363: LD_INT 7350
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: PUSH
20372: LD_OWVAR 67
20376: ARRAY
20377: GREATER
20378: PUSH
20379: LD_EXP 7
20383: AND
20384: IFFALSE 20449
20386: GO 20388
20388: DISABLE
// begin enable ;
20389: ENABLE
// if Prob ( 100 - ( 10 * Difficulty ) ) and GetListOfCratesInArea ( arBaseArea ) < 12 then
20390: LD_INT 100
20392: PUSH
20393: LD_INT 10
20395: PUSH
20396: LD_OWVAR 67
20400: MUL
20401: MINUS
20402: PPUSH
20403: CALL_OW 13
20407: PUSH
20408: LD_INT 4
20410: PPUSH
20411: CALL_OW 435
20415: PUSH
20416: LD_INT 12
20418: LESS
20419: AND
20420: IFFALSE 20449
// CreateCratesXYR ( rand ( 1 , 5 ) , 218 , 92 , 11 , true ) ;
20422: LD_INT 1
20424: PPUSH
20425: LD_INT 5
20427: PPUSH
20428: CALL_OW 12
20432: PPUSH
20433: LD_INT 218
20435: PPUSH
20436: LD_INT 92
20438: PPUSH
20439: LD_INT 11
20441: PPUSH
20442: LD_INT 1
20444: PPUSH
20445: CALL_OW 56
// end ;
20449: END
// every 0 0$55 trigger IsOk ( amBase ) do
20450: LD_INT 2
20452: PPUSH
20453: CALL_OW 302
20457: IFFALSE 20497
20459: GO 20461
20461: DISABLE
// begin enable ;
20462: ENABLE
// if GetListOfCratesInArea ( amCratesArea ) < 3 then
20463: LD_INT 13
20465: PPUSH
20466: CALL_OW 435
20470: PUSH
20471: LD_INT 3
20473: LESS
20474: IFFALSE 20497
// CreateCratesArea ( rand ( 1 , 5 ) , amCratesArea , true ) ;
20476: LD_INT 1
20478: PPUSH
20479: LD_INT 5
20481: PPUSH
20482: CALL_OW 12
20486: PPUSH
20487: LD_INT 13
20489: PPUSH
20490: LD_INT 1
20492: PPUSH
20493: CALL_OW 55
// end ;
20497: END
// every 1 1$05 trigger IsOk ( legBase ) do
20498: LD_INT 38
20500: PPUSH
20501: CALL_OW 302
20505: IFFALSE 20545
20507: GO 20509
20509: DISABLE
// begin enable ;
20510: ENABLE
// if GetListOfCratesInArea ( legCratesArea ) < 3 then
20511: LD_INT 14
20513: PPUSH
20514: CALL_OW 435
20518: PUSH
20519: LD_INT 3
20521: LESS
20522: IFFALSE 20545
// CreateCratesArea ( rand ( 1 , 5 ) , legCratesArea , true ) ;
20524: LD_INT 1
20526: PPUSH
20527: LD_INT 5
20529: PPUSH
20530: CALL_OW 12
20534: PPUSH
20535: LD_INT 14
20537: PPUSH
20538: LD_INT 1
20540: PPUSH
20541: CALL_OW 55
// end ; end_of_file
20545: END
// every 0 0$1 trigger gameActive and GetClass ( Omar ) <> class_desert_warior and spotArabianBase and IsOk ( arBase ) do
20546: LD_EXP 19
20550: PUSH
20551: LD_EXP 24
20555: PPUSH
20556: CALL_OW 257
20560: PUSH
20561: LD_INT 11
20563: NONEQUAL
20564: AND
20565: PUSH
20566: LD_EXP 7
20570: AND
20571: PUSH
20572: LD_INT 85
20574: PPUSH
20575: CALL_OW 302
20579: AND
20580: IFFALSE 20600
20582: GO 20584
20584: DISABLE
// begin Query ( QSheik ) ;
20585: LD_STRING QSheik
20587: PPUSH
20588: CALL_OW 97
// omarCanChangeClass := true ;
20592: LD_ADDR_EXP 20
20596: PUSH
20597: LD_INT 1
20599: ST_TO_ADDR
// end ;
20600: END
// every 0 0$3 trigger omarCanChangeClass and GetClass ( Omar ) <> class_desert_warior and IsInUnit ( Omar ) = arBase do
20601: LD_EXP 20
20605: PUSH
20606: LD_EXP 24
20610: PPUSH
20611: CALL_OW 257
20615: PUSH
20616: LD_INT 11
20618: NONEQUAL
20619: AND
20620: PUSH
20621: LD_EXP 24
20625: PPUSH
20626: CALL_OW 310
20630: PUSH
20631: LD_INT 85
20633: EQUAL
20634: AND
20635: IFFALSE 20666
20637: GO 20639
20639: DISABLE
// begin enable ;
20640: ENABLE
// if Query ( QChangeClass ) = 1 then
20641: LD_STRING QChangeClass
20643: PPUSH
20644: CALL_OW 97
20648: PUSH
20649: LD_INT 1
20651: EQUAL
20652: IFFALSE 20666
// SetClass ( Omar , class_desert_warior ) ;
20654: LD_EXP 24
20658: PPUSH
20659: LD_INT 11
20661: PPUSH
20662: CALL_OW 336
// end ; end_of_file
20666: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
20667: LD_INT 0
20669: PPUSH
20670: PPUSH
// if exist_mode then
20671: LD_VAR 0 2
20675: IFFALSE 20721
// begin unit := CreateCharacter ( prefix & ident ) ;
20677: LD_ADDR_VAR 0 5
20681: PUSH
20682: LD_VAR 0 3
20686: PUSH
20687: LD_VAR 0 1
20691: STR
20692: PPUSH
20693: CALL_OW 34
20697: ST_TO_ADDR
// if unit then
20698: LD_VAR 0 5
20702: IFFALSE 20719
// DeleteCharacters ( prefix & ident ) ;
20704: LD_VAR 0 3
20708: PUSH
20709: LD_VAR 0 1
20713: STR
20714: PPUSH
20715: CALL_OW 40
// end else
20719: GO 20736
// unit := NewCharacter ( ident ) ;
20721: LD_ADDR_VAR 0 5
20725: PUSH
20726: LD_VAR 0 1
20730: PPUSH
20731: CALL_OW 25
20735: ST_TO_ADDR
// result := unit ;
20736: LD_ADDR_VAR 0 4
20740: PUSH
20741: LD_VAR 0 5
20745: ST_TO_ADDR
// end ;
20746: LD_VAR 0 4
20750: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
20751: LD_INT 0
20753: PPUSH
20754: PPUSH
// if exist_mode then
20755: LD_VAR 0 2
20759: IFFALSE 20784
// unit := CreateCharacter ( prefix & ident ) else
20761: LD_ADDR_VAR 0 5
20765: PUSH
20766: LD_VAR 0 3
20770: PUSH
20771: LD_VAR 0 1
20775: STR
20776: PPUSH
20777: CALL_OW 34
20781: ST_TO_ADDR
20782: GO 20799
// unit := NewCharacter ( ident ) ;
20784: LD_ADDR_VAR 0 5
20788: PUSH
20789: LD_VAR 0 1
20793: PPUSH
20794: CALL_OW 25
20798: ST_TO_ADDR
// result := unit ;
20799: LD_ADDR_VAR 0 4
20803: PUSH
20804: LD_VAR 0 5
20808: ST_TO_ADDR
// end ;
20809: LD_VAR 0 4
20813: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
20814: LD_INT 0
20816: PPUSH
20817: PPUSH
// if not side or not nation then
20818: LD_VAR 0 1
20822: NOT
20823: PUSH
20824: LD_VAR 0 2
20828: NOT
20829: OR
20830: IFFALSE 20834
// exit ;
20832: GO 21602
// case nation of nation_american :
20834: LD_VAR 0 2
20838: PUSH
20839: LD_INT 1
20841: DOUBLE
20842: EQUAL
20843: IFTRUE 20847
20845: GO 21061
20847: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
20848: LD_ADDR_VAR 0 4
20852: PUSH
20853: LD_INT 35
20855: PUSH
20856: LD_INT 45
20858: PUSH
20859: LD_INT 46
20861: PUSH
20862: LD_INT 47
20864: PUSH
20865: LD_INT 82
20867: PUSH
20868: LD_INT 83
20870: PUSH
20871: LD_INT 84
20873: PUSH
20874: LD_INT 85
20876: PUSH
20877: LD_INT 86
20879: PUSH
20880: LD_INT 1
20882: PUSH
20883: LD_INT 2
20885: PUSH
20886: LD_INT 6
20888: PUSH
20889: LD_INT 15
20891: PUSH
20892: LD_INT 16
20894: PUSH
20895: LD_INT 7
20897: PUSH
20898: LD_INT 12
20900: PUSH
20901: LD_INT 13
20903: PUSH
20904: LD_INT 10
20906: PUSH
20907: LD_INT 14
20909: PUSH
20910: LD_INT 20
20912: PUSH
20913: LD_INT 21
20915: PUSH
20916: LD_INT 22
20918: PUSH
20919: LD_INT 25
20921: PUSH
20922: LD_INT 32
20924: PUSH
20925: LD_INT 27
20927: PUSH
20928: LD_INT 36
20930: PUSH
20931: LD_INT 69
20933: PUSH
20934: LD_INT 39
20936: PUSH
20937: LD_INT 34
20939: PUSH
20940: LD_INT 40
20942: PUSH
20943: LD_INT 48
20945: PUSH
20946: LD_INT 49
20948: PUSH
20949: LD_INT 50
20951: PUSH
20952: LD_INT 51
20954: PUSH
20955: LD_INT 52
20957: PUSH
20958: LD_INT 53
20960: PUSH
20961: LD_INT 54
20963: PUSH
20964: LD_INT 55
20966: PUSH
20967: LD_INT 56
20969: PUSH
20970: LD_INT 57
20972: PUSH
20973: LD_INT 58
20975: PUSH
20976: LD_INT 59
20978: PUSH
20979: LD_INT 60
20981: PUSH
20982: LD_INT 61
20984: PUSH
20985: LD_INT 62
20987: PUSH
20988: LD_INT 80
20990: PUSH
20991: LD_INT 82
20993: PUSH
20994: LD_INT 83
20996: PUSH
20997: LD_INT 84
20999: PUSH
21000: LD_INT 85
21002: PUSH
21003: LD_INT 86
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: ST_TO_ADDR
21059: GO 21526
21061: LD_INT 2
21063: DOUBLE
21064: EQUAL
21065: IFTRUE 21069
21067: GO 21295
21069: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
21070: LD_ADDR_VAR 0 4
21074: PUSH
21075: LD_INT 35
21077: PUSH
21078: LD_INT 45
21080: PUSH
21081: LD_INT 46
21083: PUSH
21084: LD_INT 47
21086: PUSH
21087: LD_INT 82
21089: PUSH
21090: LD_INT 83
21092: PUSH
21093: LD_INT 84
21095: PUSH
21096: LD_INT 85
21098: PUSH
21099: LD_INT 87
21101: PUSH
21102: LD_INT 70
21104: PUSH
21105: LD_INT 1
21107: PUSH
21108: LD_INT 11
21110: PUSH
21111: LD_INT 3
21113: PUSH
21114: LD_INT 4
21116: PUSH
21117: LD_INT 5
21119: PUSH
21120: LD_INT 6
21122: PUSH
21123: LD_INT 15
21125: PUSH
21126: LD_INT 18
21128: PUSH
21129: LD_INT 7
21131: PUSH
21132: LD_INT 17
21134: PUSH
21135: LD_INT 8
21137: PUSH
21138: LD_INT 20
21140: PUSH
21141: LD_INT 21
21143: PUSH
21144: LD_INT 22
21146: PUSH
21147: LD_INT 72
21149: PUSH
21150: LD_INT 26
21152: PUSH
21153: LD_INT 69
21155: PUSH
21156: LD_INT 39
21158: PUSH
21159: LD_INT 40
21161: PUSH
21162: LD_INT 41
21164: PUSH
21165: LD_INT 42
21167: PUSH
21168: LD_INT 43
21170: PUSH
21171: LD_INT 48
21173: PUSH
21174: LD_INT 49
21176: PUSH
21177: LD_INT 50
21179: PUSH
21180: LD_INT 51
21182: PUSH
21183: LD_INT 52
21185: PUSH
21186: LD_INT 53
21188: PUSH
21189: LD_INT 54
21191: PUSH
21192: LD_INT 55
21194: PUSH
21195: LD_INT 56
21197: PUSH
21198: LD_INT 60
21200: PUSH
21201: LD_INT 61
21203: PUSH
21204: LD_INT 62
21206: PUSH
21207: LD_INT 66
21209: PUSH
21210: LD_INT 67
21212: PUSH
21213: LD_INT 68
21215: PUSH
21216: LD_INT 81
21218: PUSH
21219: LD_INT 82
21221: PUSH
21222: LD_INT 83
21224: PUSH
21225: LD_INT 84
21227: PUSH
21228: LD_INT 85
21230: PUSH
21231: LD_INT 87
21233: PUSH
21234: LD_INT 88
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: ST_TO_ADDR
21293: GO 21526
21295: LD_INT 3
21297: DOUBLE
21298: EQUAL
21299: IFTRUE 21303
21301: GO 21525
21303: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
21304: LD_ADDR_VAR 0 4
21308: PUSH
21309: LD_INT 46
21311: PUSH
21312: LD_INT 47
21314: PUSH
21315: LD_INT 1
21317: PUSH
21318: LD_INT 2
21320: PUSH
21321: LD_INT 82
21323: PUSH
21324: LD_INT 83
21326: PUSH
21327: LD_INT 84
21329: PUSH
21330: LD_INT 85
21332: PUSH
21333: LD_INT 86
21335: PUSH
21336: LD_INT 11
21338: PUSH
21339: LD_INT 9
21341: PUSH
21342: LD_INT 20
21344: PUSH
21345: LD_INT 19
21347: PUSH
21348: LD_INT 21
21350: PUSH
21351: LD_INT 24
21353: PUSH
21354: LD_INT 22
21356: PUSH
21357: LD_INT 25
21359: PUSH
21360: LD_INT 28
21362: PUSH
21363: LD_INT 29
21365: PUSH
21366: LD_INT 30
21368: PUSH
21369: LD_INT 31
21371: PUSH
21372: LD_INT 37
21374: PUSH
21375: LD_INT 38
21377: PUSH
21378: LD_INT 32
21380: PUSH
21381: LD_INT 27
21383: PUSH
21384: LD_INT 33
21386: PUSH
21387: LD_INT 69
21389: PUSH
21390: LD_INT 39
21392: PUSH
21393: LD_INT 34
21395: PUSH
21396: LD_INT 40
21398: PUSH
21399: LD_INT 71
21401: PUSH
21402: LD_INT 23
21404: PUSH
21405: LD_INT 44
21407: PUSH
21408: LD_INT 48
21410: PUSH
21411: LD_INT 49
21413: PUSH
21414: LD_INT 50
21416: PUSH
21417: LD_INT 51
21419: PUSH
21420: LD_INT 52
21422: PUSH
21423: LD_INT 53
21425: PUSH
21426: LD_INT 54
21428: PUSH
21429: LD_INT 55
21431: PUSH
21432: LD_INT 56
21434: PUSH
21435: LD_INT 57
21437: PUSH
21438: LD_INT 58
21440: PUSH
21441: LD_INT 59
21443: PUSH
21444: LD_INT 63
21446: PUSH
21447: LD_INT 64
21449: PUSH
21450: LD_INT 65
21452: PUSH
21453: LD_INT 82
21455: PUSH
21456: LD_INT 83
21458: PUSH
21459: LD_INT 84
21461: PUSH
21462: LD_INT 85
21464: PUSH
21465: LD_INT 86
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: ST_TO_ADDR
21523: GO 21526
21525: POP
// if state > - 1 and state < 3 then
21526: LD_VAR 0 3
21530: PUSH
21531: LD_INT 1
21533: NEG
21534: GREATER
21535: PUSH
21536: LD_VAR 0 3
21540: PUSH
21541: LD_INT 3
21543: LESS
21544: AND
21545: IFFALSE 21602
// for i in result do
21547: LD_ADDR_VAR 0 5
21551: PUSH
21552: LD_VAR 0 4
21556: PUSH
21557: FOR_IN
21558: IFFALSE 21600
// if GetTech ( i , side ) <> state then
21560: LD_VAR 0 5
21564: PPUSH
21565: LD_VAR 0 1
21569: PPUSH
21570: CALL_OW 321
21574: PUSH
21575: LD_VAR 0 3
21579: NONEQUAL
21580: IFFALSE 21598
// result := result diff i ;
21582: LD_ADDR_VAR 0 4
21586: PUSH
21587: LD_VAR 0 4
21591: PUSH
21592: LD_VAR 0 5
21596: DIFF
21597: ST_TO_ADDR
21598: GO 21557
21600: POP
21601: POP
// end ;
21602: LD_VAR 0 4
21606: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
21607: LD_INT 0
21609: PPUSH
21610: PPUSH
21611: PPUSH
// result := true ;
21612: LD_ADDR_VAR 0 3
21616: PUSH
21617: LD_INT 1
21619: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
21620: LD_ADDR_VAR 0 5
21624: PUSH
21625: LD_VAR 0 2
21629: PPUSH
21630: CALL_OW 480
21634: ST_TO_ADDR
// if not tmp then
21635: LD_VAR 0 5
21639: NOT
21640: IFFALSE 21644
// exit ;
21642: GO 21693
// for i in tmp do
21644: LD_ADDR_VAR 0 4
21648: PUSH
21649: LD_VAR 0 5
21653: PUSH
21654: FOR_IN
21655: IFFALSE 21691
// if GetTech ( i , side ) <> state_researched then
21657: LD_VAR 0 4
21661: PPUSH
21662: LD_VAR 0 1
21666: PPUSH
21667: CALL_OW 321
21671: PUSH
21672: LD_INT 2
21674: NONEQUAL
21675: IFFALSE 21689
// begin result := false ;
21677: LD_ADDR_VAR 0 3
21681: PUSH
21682: LD_INT 0
21684: ST_TO_ADDR
// exit ;
21685: POP
21686: POP
21687: GO 21693
// end ;
21689: GO 21654
21691: POP
21692: POP
// end ;
21693: LD_VAR 0 3
21697: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
21698: LD_INT 0
21700: PPUSH
21701: PPUSH
21702: PPUSH
21703: PPUSH
21704: PPUSH
21705: PPUSH
21706: PPUSH
21707: PPUSH
21708: PPUSH
21709: PPUSH
21710: PPUSH
21711: PPUSH
21712: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
21713: LD_VAR 0 1
21717: NOT
21718: PUSH
21719: LD_VAR 0 1
21723: PPUSH
21724: CALL_OW 257
21728: PUSH
21729: LD_INT 9
21731: NONEQUAL
21732: OR
21733: IFFALSE 21737
// exit ;
21735: GO 22310
// side := GetSide ( unit ) ;
21737: LD_ADDR_VAR 0 9
21741: PUSH
21742: LD_VAR 0 1
21746: PPUSH
21747: CALL_OW 255
21751: ST_TO_ADDR
// tech_space := tech_spacanom ;
21752: LD_ADDR_VAR 0 12
21756: PUSH
21757: LD_INT 29
21759: ST_TO_ADDR
// tech_time := tech_taurad ;
21760: LD_ADDR_VAR 0 13
21764: PUSH
21765: LD_INT 28
21767: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
21768: LD_ADDR_VAR 0 11
21772: PUSH
21773: LD_VAR 0 1
21777: PPUSH
21778: CALL_OW 310
21782: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
21783: LD_VAR 0 11
21787: PPUSH
21788: CALL_OW 247
21792: PUSH
21793: LD_INT 2
21795: EQUAL
21796: IFFALSE 21800
// exit ;
21798: GO 22310
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21800: LD_ADDR_VAR 0 8
21804: PUSH
21805: LD_INT 81
21807: PUSH
21808: LD_VAR 0 9
21812: PUSH
21813: EMPTY
21814: LIST
21815: LIST
21816: PUSH
21817: LD_INT 3
21819: PUSH
21820: LD_INT 21
21822: PUSH
21823: LD_INT 3
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PUSH
21834: EMPTY
21835: LIST
21836: LIST
21837: PPUSH
21838: CALL_OW 69
21842: ST_TO_ADDR
// if not tmp then
21843: LD_VAR 0 8
21847: NOT
21848: IFFALSE 21852
// exit ;
21850: GO 22310
// if in_unit then
21852: LD_VAR 0 11
21856: IFFALSE 21880
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
21858: LD_ADDR_VAR 0 10
21862: PUSH
21863: LD_VAR 0 8
21867: PPUSH
21868: LD_VAR 0 11
21872: PPUSH
21873: CALL_OW 74
21877: ST_TO_ADDR
21878: GO 21900
// enemy := NearestUnitToUnit ( tmp , unit ) ;
21880: LD_ADDR_VAR 0 10
21884: PUSH
21885: LD_VAR 0 8
21889: PPUSH
21890: LD_VAR 0 1
21894: PPUSH
21895: CALL_OW 74
21899: ST_TO_ADDR
// if not enemy then
21900: LD_VAR 0 10
21904: NOT
21905: IFFALSE 21909
// exit ;
21907: GO 22310
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
21909: LD_VAR 0 11
21913: PUSH
21914: LD_VAR 0 11
21918: PPUSH
21919: LD_VAR 0 10
21923: PPUSH
21924: CALL_OW 296
21928: PUSH
21929: LD_INT 13
21931: GREATER
21932: AND
21933: PUSH
21934: LD_VAR 0 1
21938: PPUSH
21939: LD_VAR 0 10
21943: PPUSH
21944: CALL_OW 296
21948: PUSH
21949: LD_INT 12
21951: GREATER
21952: OR
21953: IFFALSE 21957
// exit ;
21955: GO 22310
// missile := [ 1 ] ;
21957: LD_ADDR_VAR 0 14
21961: PUSH
21962: LD_INT 1
21964: PUSH
21965: EMPTY
21966: LIST
21967: ST_TO_ADDR
// if Researched ( side , tech_space ) then
21968: LD_VAR 0 9
21972: PPUSH
21973: LD_VAR 0 12
21977: PPUSH
21978: CALL_OW 325
21982: IFFALSE 22011
// missile := Replace ( missile , missile + 1 , 2 ) ;
21984: LD_ADDR_VAR 0 14
21988: PUSH
21989: LD_VAR 0 14
21993: PPUSH
21994: LD_VAR 0 14
21998: PUSH
21999: LD_INT 1
22001: PLUS
22002: PPUSH
22003: LD_INT 2
22005: PPUSH
22006: CALL_OW 1
22010: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22011: LD_VAR 0 9
22015: PPUSH
22016: LD_VAR 0 13
22020: PPUSH
22021: CALL_OW 325
22025: PUSH
22026: LD_VAR 0 10
22030: PPUSH
22031: CALL_OW 255
22035: PPUSH
22036: LD_VAR 0 13
22040: PPUSH
22041: CALL_OW 325
22045: NOT
22046: AND
22047: IFFALSE 22076
// missile := Replace ( missile , missile + 1 , 3 ) ;
22049: LD_ADDR_VAR 0 14
22053: PUSH
22054: LD_VAR 0 14
22058: PPUSH
22059: LD_VAR 0 14
22063: PUSH
22064: LD_INT 1
22066: PLUS
22067: PPUSH
22068: LD_INT 3
22070: PPUSH
22071: CALL_OW 1
22075: ST_TO_ADDR
// if missile < 2 then
22076: LD_VAR 0 14
22080: PUSH
22081: LD_INT 2
22083: LESS
22084: IFFALSE 22088
// exit ;
22086: GO 22310
// x := GetX ( enemy ) ;
22088: LD_ADDR_VAR 0 4
22092: PUSH
22093: LD_VAR 0 10
22097: PPUSH
22098: CALL_OW 250
22102: ST_TO_ADDR
// y := GetY ( enemy ) ;
22103: LD_ADDR_VAR 0 5
22107: PUSH
22108: LD_VAR 0 10
22112: PPUSH
22113: CALL_OW 251
22117: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22118: LD_ADDR_VAR 0 6
22122: PUSH
22123: LD_VAR 0 4
22127: PUSH
22128: LD_INT 1
22130: NEG
22131: PPUSH
22132: LD_INT 1
22134: PPUSH
22135: CALL_OW 12
22139: PLUS
22140: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22141: LD_ADDR_VAR 0 7
22145: PUSH
22146: LD_VAR 0 5
22150: PUSH
22151: LD_INT 1
22153: NEG
22154: PPUSH
22155: LD_INT 1
22157: PPUSH
22158: CALL_OW 12
22162: PLUS
22163: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22164: LD_VAR 0 6
22168: PPUSH
22169: LD_VAR 0 7
22173: PPUSH
22174: CALL_OW 488
22178: NOT
22179: IFFALSE 22201
// begin _x := x ;
22181: LD_ADDR_VAR 0 6
22185: PUSH
22186: LD_VAR 0 4
22190: ST_TO_ADDR
// _y := y ;
22191: LD_ADDR_VAR 0 7
22195: PUSH
22196: LD_VAR 0 5
22200: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22201: LD_ADDR_VAR 0 3
22205: PUSH
22206: LD_INT 1
22208: PPUSH
22209: LD_VAR 0 14
22213: PPUSH
22214: CALL_OW 12
22218: ST_TO_ADDR
// case i of 1 :
22219: LD_VAR 0 3
22223: PUSH
22224: LD_INT 1
22226: DOUBLE
22227: EQUAL
22228: IFTRUE 22232
22230: GO 22249
22232: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22233: LD_VAR 0 1
22237: PPUSH
22238: LD_VAR 0 10
22242: PPUSH
22243: CALL_OW 115
22247: GO 22310
22249: LD_INT 2
22251: DOUBLE
22252: EQUAL
22253: IFTRUE 22257
22255: GO 22279
22257: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
22258: LD_VAR 0 1
22262: PPUSH
22263: LD_VAR 0 6
22267: PPUSH
22268: LD_VAR 0 7
22272: PPUSH
22273: CALL_OW 153
22277: GO 22310
22279: LD_INT 3
22281: DOUBLE
22282: EQUAL
22283: IFTRUE 22287
22285: GO 22309
22287: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
22288: LD_VAR 0 1
22292: PPUSH
22293: LD_VAR 0 6
22297: PPUSH
22298: LD_VAR 0 7
22302: PPUSH
22303: CALL_OW 154
22307: GO 22310
22309: POP
// end ;
22310: LD_VAR 0 2
22314: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
22315: LD_INT 0
22317: PPUSH
22318: PPUSH
22319: PPUSH
22320: PPUSH
22321: PPUSH
22322: PPUSH
// if not unit or not building then
22323: LD_VAR 0 1
22327: NOT
22328: PUSH
22329: LD_VAR 0 2
22333: NOT
22334: OR
22335: IFFALSE 22339
// exit ;
22337: GO 22497
// x := GetX ( building ) ;
22339: LD_ADDR_VAR 0 5
22343: PUSH
22344: LD_VAR 0 2
22348: PPUSH
22349: CALL_OW 250
22353: ST_TO_ADDR
// y := GetY ( building ) ;
22354: LD_ADDR_VAR 0 6
22358: PUSH
22359: LD_VAR 0 2
22363: PPUSH
22364: CALL_OW 251
22368: ST_TO_ADDR
// for i = 0 to 5 do
22369: LD_ADDR_VAR 0 4
22373: PUSH
22374: DOUBLE
22375: LD_INT 0
22377: DEC
22378: ST_TO_ADDR
22379: LD_INT 5
22381: PUSH
22382: FOR_TO
22383: IFFALSE 22495
// begin _x := ShiftX ( x , i , 3 ) ;
22385: LD_ADDR_VAR 0 7
22389: PUSH
22390: LD_VAR 0 5
22394: PPUSH
22395: LD_VAR 0 4
22399: PPUSH
22400: LD_INT 3
22402: PPUSH
22403: CALL_OW 272
22407: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
22408: LD_ADDR_VAR 0 8
22412: PUSH
22413: LD_VAR 0 6
22417: PPUSH
22418: LD_VAR 0 4
22422: PPUSH
22423: LD_INT 3
22425: PPUSH
22426: CALL_OW 273
22430: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22431: LD_VAR 0 7
22435: PPUSH
22436: LD_VAR 0 8
22440: PPUSH
22441: CALL_OW 488
22445: NOT
22446: IFFALSE 22450
// continue ;
22448: GO 22382
// if HexInfo ( _x , _y ) = 0 then
22450: LD_VAR 0 7
22454: PPUSH
22455: LD_VAR 0 8
22459: PPUSH
22460: CALL_OW 428
22464: PUSH
22465: LD_INT 0
22467: EQUAL
22468: IFFALSE 22493
// begin ComMoveXY ( unit , _x , _y ) ;
22470: LD_VAR 0 1
22474: PPUSH
22475: LD_VAR 0 7
22479: PPUSH
22480: LD_VAR 0 8
22484: PPUSH
22485: CALL_OW 111
// exit ;
22489: POP
22490: POP
22491: GO 22497
// end ; end ;
22493: GO 22382
22495: POP
22496: POP
// end ;
22497: LD_VAR 0 3
22501: RET
// export function ScanBase ( side , base_area ) ; begin
22502: LD_INT 0
22504: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
22505: LD_ADDR_VAR 0 3
22509: PUSH
22510: LD_VAR 0 2
22514: PPUSH
22515: LD_INT 81
22517: PUSH
22518: LD_VAR 0 1
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: PPUSH
22527: CALL_OW 70
22531: ST_TO_ADDR
// end ;
22532: LD_VAR 0 3
22536: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22537: LD_INT 0
22539: PPUSH
22540: PPUSH
22541: PPUSH
22542: PPUSH
// result := false ;
22543: LD_ADDR_VAR 0 2
22547: PUSH
22548: LD_INT 0
22550: ST_TO_ADDR
// side := GetSide ( unit ) ;
22551: LD_ADDR_VAR 0 3
22555: PUSH
22556: LD_VAR 0 1
22560: PPUSH
22561: CALL_OW 255
22565: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22566: LD_ADDR_VAR 0 4
22570: PUSH
22571: LD_VAR 0 1
22575: PPUSH
22576: CALL_OW 248
22580: ST_TO_ADDR
// case nat of 1 :
22581: LD_VAR 0 4
22585: PUSH
22586: LD_INT 1
22588: DOUBLE
22589: EQUAL
22590: IFTRUE 22594
22592: GO 22605
22594: POP
// tech := tech_lassight ; 2 :
22595: LD_ADDR_VAR 0 5
22599: PUSH
22600: LD_INT 12
22602: ST_TO_ADDR
22603: GO 22644
22605: LD_INT 2
22607: DOUBLE
22608: EQUAL
22609: IFTRUE 22613
22611: GO 22624
22613: POP
// tech := tech_mortar ; 3 :
22614: LD_ADDR_VAR 0 5
22618: PUSH
22619: LD_INT 41
22621: ST_TO_ADDR
22622: GO 22644
22624: LD_INT 3
22626: DOUBLE
22627: EQUAL
22628: IFTRUE 22632
22630: GO 22643
22632: POP
// tech := tech_bazooka ; end ;
22633: LD_ADDR_VAR 0 5
22637: PUSH
22638: LD_INT 44
22640: ST_TO_ADDR
22641: GO 22644
22643: POP
// if Researched ( side , tech ) then
22644: LD_VAR 0 3
22648: PPUSH
22649: LD_VAR 0 5
22653: PPUSH
22654: CALL_OW 325
22658: IFFALSE 22685
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
22660: LD_ADDR_VAR 0 2
22664: PUSH
22665: LD_INT 5
22667: PUSH
22668: LD_INT 8
22670: PUSH
22671: LD_INT 9
22673: PUSH
22674: EMPTY
22675: LIST
22676: LIST
22677: LIST
22678: PUSH
22679: LD_VAR 0 4
22683: ARRAY
22684: ST_TO_ADDR
// end ;
22685: LD_VAR 0 2
22689: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
22690: LD_INT 0
22692: PPUSH
22693: PPUSH
22694: PPUSH
// if not mines then
22695: LD_VAR 0 2
22699: NOT
22700: IFFALSE 22704
// exit ;
22702: GO 22848
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22704: LD_ADDR_VAR 0 5
22708: PUSH
22709: LD_INT 81
22711: PUSH
22712: LD_VAR 0 1
22716: PUSH
22717: EMPTY
22718: LIST
22719: LIST
22720: PUSH
22721: LD_INT 3
22723: PUSH
22724: LD_INT 21
22726: PUSH
22727: LD_INT 3
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: PUSH
22738: EMPTY
22739: LIST
22740: LIST
22741: PPUSH
22742: CALL_OW 69
22746: ST_TO_ADDR
// for i in mines do
22747: LD_ADDR_VAR 0 4
22751: PUSH
22752: LD_VAR 0 2
22756: PUSH
22757: FOR_IN
22758: IFFALSE 22846
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
22760: LD_VAR 0 4
22764: PUSH
22765: LD_INT 1
22767: ARRAY
22768: PPUSH
22769: LD_VAR 0 4
22773: PUSH
22774: LD_INT 2
22776: ARRAY
22777: PPUSH
22778: CALL_OW 458
22782: NOT
22783: IFFALSE 22787
// continue ;
22785: GO 22757
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
22787: LD_VAR 0 4
22791: PUSH
22792: LD_INT 1
22794: ARRAY
22795: PPUSH
22796: LD_VAR 0 4
22800: PUSH
22801: LD_INT 2
22803: ARRAY
22804: PPUSH
22805: CALL_OW 428
22809: PUSH
22810: LD_VAR 0 5
22814: IN
22815: IFFALSE 22844
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
22817: LD_VAR 0 4
22821: PUSH
22822: LD_INT 1
22824: ARRAY
22825: PPUSH
22826: LD_VAR 0 4
22830: PUSH
22831: LD_INT 2
22833: ARRAY
22834: PPUSH
22835: LD_VAR 0 1
22839: PPUSH
22840: CALL_OW 456
// end ;
22844: GO 22757
22846: POP
22847: POP
// end ;
22848: LD_VAR 0 3
22852: RET
// export function Count ( array ) ; begin
22853: LD_INT 0
22855: PPUSH
// result := array + 0 ;
22856: LD_ADDR_VAR 0 2
22860: PUSH
22861: LD_VAR 0 1
22865: PUSH
22866: LD_INT 0
22868: PLUS
22869: ST_TO_ADDR
// end ;
22870: LD_VAR 0 2
22874: RET
// export function IsEmpty ( building ) ; begin
22875: LD_INT 0
22877: PPUSH
// if not building then
22878: LD_VAR 0 1
22882: NOT
22883: IFFALSE 22887
// exit ;
22885: GO 22930
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
22887: LD_ADDR_VAR 0 2
22891: PUSH
22892: LD_VAR 0 1
22896: PUSH
22897: LD_INT 22
22899: PUSH
22900: LD_VAR 0 1
22904: PPUSH
22905: CALL_OW 255
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: PUSH
22914: LD_INT 58
22916: PUSH
22917: EMPTY
22918: LIST
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PPUSH
22924: CALL_OW 69
22928: IN
22929: ST_TO_ADDR
// end ;
22930: LD_VAR 0 2
22934: RET
// export function IsNotFull ( building ) ; var places ; begin
22935: LD_INT 0
22937: PPUSH
22938: PPUSH
// if not building then
22939: LD_VAR 0 1
22943: NOT
22944: IFFALSE 22948
// exit ;
22946: GO 22976
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
22948: LD_ADDR_VAR 0 2
22952: PUSH
22953: LD_VAR 0 1
22957: PPUSH
22958: LD_INT 3
22960: PUSH
22961: LD_INT 62
22963: PUSH
22964: EMPTY
22965: LIST
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PPUSH
22971: CALL_OW 72
22975: ST_TO_ADDR
// end ;
22976: LD_VAR 0 2
22980: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
22981: LD_INT 0
22983: PPUSH
22984: PPUSH
22985: PPUSH
22986: PPUSH
// tmp := [ ] ;
22987: LD_ADDR_VAR 0 3
22991: PUSH
22992: EMPTY
22993: ST_TO_ADDR
// list := [ ] ;
22994: LD_ADDR_VAR 0 5
22998: PUSH
22999: EMPTY
23000: ST_TO_ADDR
// for i = 16 to 25 do
23001: LD_ADDR_VAR 0 4
23005: PUSH
23006: DOUBLE
23007: LD_INT 16
23009: DEC
23010: ST_TO_ADDR
23011: LD_INT 25
23013: PUSH
23014: FOR_TO
23015: IFFALSE 23088
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23017: LD_ADDR_VAR 0 3
23021: PUSH
23022: LD_VAR 0 3
23026: PUSH
23027: LD_INT 22
23029: PUSH
23030: LD_VAR 0 1
23034: PPUSH
23035: CALL_OW 255
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: PUSH
23044: LD_INT 91
23046: PUSH
23047: LD_VAR 0 1
23051: PUSH
23052: LD_INT 6
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: LIST
23059: PUSH
23060: LD_INT 30
23062: PUSH
23063: LD_VAR 0 4
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: PUSH
23072: EMPTY
23073: LIST
23074: LIST
23075: LIST
23076: PUSH
23077: EMPTY
23078: LIST
23079: PPUSH
23080: CALL_OW 69
23084: ADD
23085: ST_TO_ADDR
23086: GO 23014
23088: POP
23089: POP
// for i = 1 to tmp do
23090: LD_ADDR_VAR 0 4
23094: PUSH
23095: DOUBLE
23096: LD_INT 1
23098: DEC
23099: ST_TO_ADDR
23100: LD_VAR 0 3
23104: PUSH
23105: FOR_TO
23106: IFFALSE 23194
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23108: LD_ADDR_VAR 0 5
23112: PUSH
23113: LD_VAR 0 5
23117: PUSH
23118: LD_VAR 0 3
23122: PUSH
23123: LD_VAR 0 4
23127: ARRAY
23128: PPUSH
23129: CALL_OW 266
23133: PUSH
23134: LD_VAR 0 3
23138: PUSH
23139: LD_VAR 0 4
23143: ARRAY
23144: PPUSH
23145: CALL_OW 250
23149: PUSH
23150: LD_VAR 0 3
23154: PUSH
23155: LD_VAR 0 4
23159: ARRAY
23160: PPUSH
23161: CALL_OW 251
23165: PUSH
23166: LD_VAR 0 3
23170: PUSH
23171: LD_VAR 0 4
23175: ARRAY
23176: PPUSH
23177: CALL_OW 254
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: PUSH
23188: EMPTY
23189: LIST
23190: ADD
23191: ST_TO_ADDR
23192: GO 23105
23194: POP
23195: POP
// result := list ;
23196: LD_ADDR_VAR 0 2
23200: PUSH
23201: LD_VAR 0 5
23205: ST_TO_ADDR
// end ;
23206: LD_VAR 0 2
23210: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23211: LD_INT 0
23213: PPUSH
23214: PPUSH
23215: PPUSH
23216: PPUSH
23217: PPUSH
23218: PPUSH
23219: PPUSH
// if not factory then
23220: LD_VAR 0 1
23224: NOT
23225: IFFALSE 23229
// exit ;
23227: GO 23822
// if control = control_apeman then
23229: LD_VAR 0 4
23233: PUSH
23234: LD_INT 5
23236: EQUAL
23237: IFFALSE 23346
// begin tmp := UnitsInside ( factory ) ;
23239: LD_ADDR_VAR 0 8
23243: PUSH
23244: LD_VAR 0 1
23248: PPUSH
23249: CALL_OW 313
23253: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23254: LD_VAR 0 8
23258: PPUSH
23259: LD_INT 25
23261: PUSH
23262: LD_INT 12
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: PPUSH
23269: CALL_OW 72
23273: NOT
23274: IFFALSE 23284
// control := control_manual ;
23276: LD_ADDR_VAR 0 4
23280: PUSH
23281: LD_INT 1
23283: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23284: LD_ADDR_VAR 0 8
23288: PUSH
23289: LD_VAR 0 1
23293: PPUSH
23294: CALL 22981 0 1
23298: ST_TO_ADDR
// if tmp then
23299: LD_VAR 0 8
23303: IFFALSE 23346
// begin for i in tmp do
23305: LD_ADDR_VAR 0 7
23309: PUSH
23310: LD_VAR 0 8
23314: PUSH
23315: FOR_IN
23316: IFFALSE 23344
// if i [ 1 ] = b_ext_radio then
23318: LD_VAR 0 7
23322: PUSH
23323: LD_INT 1
23325: ARRAY
23326: PUSH
23327: LD_INT 22
23329: EQUAL
23330: IFFALSE 23342
// begin control := control_remote ;
23332: LD_ADDR_VAR 0 4
23336: PUSH
23337: LD_INT 2
23339: ST_TO_ADDR
// break ;
23340: GO 23344
// end ;
23342: GO 23315
23344: POP
23345: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23346: LD_VAR 0 1
23350: PPUSH
23351: LD_VAR 0 2
23355: PPUSH
23356: LD_VAR 0 3
23360: PPUSH
23361: LD_VAR 0 4
23365: PPUSH
23366: LD_VAR 0 5
23370: PPUSH
23371: CALL_OW 448
23375: IFFALSE 23410
// begin result := [ chassis , engine , control , weapon ] ;
23377: LD_ADDR_VAR 0 6
23381: PUSH
23382: LD_VAR 0 2
23386: PUSH
23387: LD_VAR 0 3
23391: PUSH
23392: LD_VAR 0 4
23396: PUSH
23397: LD_VAR 0 5
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: ST_TO_ADDR
// exit ;
23408: GO 23822
// end ; _chassis := AvailableChassisList ( factory ) ;
23410: LD_ADDR_VAR 0 9
23414: PUSH
23415: LD_VAR 0 1
23419: PPUSH
23420: CALL_OW 475
23424: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23425: LD_ADDR_VAR 0 11
23429: PUSH
23430: LD_VAR 0 1
23434: PPUSH
23435: CALL_OW 476
23439: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23440: LD_ADDR_VAR 0 12
23444: PUSH
23445: LD_VAR 0 1
23449: PPUSH
23450: CALL_OW 477
23454: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23455: LD_ADDR_VAR 0 10
23459: PUSH
23460: LD_VAR 0 1
23464: PPUSH
23465: CALL_OW 478
23469: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
23470: LD_VAR 0 9
23474: NOT
23475: PUSH
23476: LD_VAR 0 11
23480: NOT
23481: OR
23482: PUSH
23483: LD_VAR 0 12
23487: NOT
23488: OR
23489: PUSH
23490: LD_VAR 0 10
23494: NOT
23495: OR
23496: IFFALSE 23531
// begin result := [ chassis , engine , control , weapon ] ;
23498: LD_ADDR_VAR 0 6
23502: PUSH
23503: LD_VAR 0 2
23507: PUSH
23508: LD_VAR 0 3
23512: PUSH
23513: LD_VAR 0 4
23517: PUSH
23518: LD_VAR 0 5
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: ST_TO_ADDR
// exit ;
23529: GO 23822
// end ; if not chassis in _chassis then
23531: LD_VAR 0 2
23535: PUSH
23536: LD_VAR 0 9
23540: IN
23541: NOT
23542: IFFALSE 23568
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23544: LD_ADDR_VAR 0 2
23548: PUSH
23549: LD_VAR 0 9
23553: PUSH
23554: LD_INT 1
23556: PPUSH
23557: LD_VAR 0 9
23561: PPUSH
23562: CALL_OW 12
23566: ARRAY
23567: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23568: LD_VAR 0 2
23572: PPUSH
23573: LD_VAR 0 3
23577: PPUSH
23578: CALL 23827 0 2
23582: NOT
23583: IFFALSE 23642
// repeat engine := _engine [ 1 ] ;
23585: LD_ADDR_VAR 0 3
23589: PUSH
23590: LD_VAR 0 11
23594: PUSH
23595: LD_INT 1
23597: ARRAY
23598: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23599: LD_ADDR_VAR 0 11
23603: PUSH
23604: LD_VAR 0 11
23608: PPUSH
23609: LD_INT 1
23611: PPUSH
23612: CALL_OW 3
23616: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23617: LD_VAR 0 2
23621: PPUSH
23622: LD_VAR 0 3
23626: PPUSH
23627: CALL 23827 0 2
23631: PUSH
23632: LD_VAR 0 11
23636: PUSH
23637: EMPTY
23638: EQUAL
23639: OR
23640: IFFALSE 23585
// if not control in _control then
23642: LD_VAR 0 4
23646: PUSH
23647: LD_VAR 0 12
23651: IN
23652: NOT
23653: IFFALSE 23679
// control := _control [ rand ( 1 , _control ) ] ;
23655: LD_ADDR_VAR 0 4
23659: PUSH
23660: LD_VAR 0 12
23664: PUSH
23665: LD_INT 1
23667: PPUSH
23668: LD_VAR 0 12
23672: PPUSH
23673: CALL_OW 12
23677: ARRAY
23678: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
23679: LD_VAR 0 2
23683: PPUSH
23684: LD_VAR 0 5
23688: PPUSH
23689: CALL 24047 0 2
23693: NOT
23694: IFFALSE 23753
// repeat weapon := _weapon [ 1 ] ;
23696: LD_ADDR_VAR 0 5
23700: PUSH
23701: LD_VAR 0 10
23705: PUSH
23706: LD_INT 1
23708: ARRAY
23709: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
23710: LD_ADDR_VAR 0 10
23714: PUSH
23715: LD_VAR 0 10
23719: PPUSH
23720: LD_INT 1
23722: PPUSH
23723: CALL_OW 3
23727: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
23728: LD_VAR 0 2
23732: PPUSH
23733: LD_VAR 0 5
23737: PPUSH
23738: CALL 24047 0 2
23742: PUSH
23743: LD_VAR 0 10
23747: PUSH
23748: EMPTY
23749: EQUAL
23750: OR
23751: IFFALSE 23696
// result := [ ] ;
23753: LD_ADDR_VAR 0 6
23757: PUSH
23758: EMPTY
23759: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23760: LD_VAR 0 1
23764: PPUSH
23765: LD_VAR 0 2
23769: PPUSH
23770: LD_VAR 0 3
23774: PPUSH
23775: LD_VAR 0 4
23779: PPUSH
23780: LD_VAR 0 5
23784: PPUSH
23785: CALL_OW 448
23789: IFFALSE 23822
// result := [ chassis , engine , control , weapon ] ;
23791: LD_ADDR_VAR 0 6
23795: PUSH
23796: LD_VAR 0 2
23800: PUSH
23801: LD_VAR 0 3
23805: PUSH
23806: LD_VAR 0 4
23810: PUSH
23811: LD_VAR 0 5
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: ST_TO_ADDR
// end ;
23822: LD_VAR 0 6
23826: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
23827: LD_INT 0
23829: PPUSH
// if not chassis or not engine then
23830: LD_VAR 0 1
23834: NOT
23835: PUSH
23836: LD_VAR 0 2
23840: NOT
23841: OR
23842: IFFALSE 23846
// exit ;
23844: GO 24042
// case engine of engine_solar :
23846: LD_VAR 0 2
23850: PUSH
23851: LD_INT 2
23853: DOUBLE
23854: EQUAL
23855: IFTRUE 23859
23857: GO 23897
23859: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
23860: LD_ADDR_VAR 0 3
23864: PUSH
23865: LD_INT 11
23867: PUSH
23868: LD_INT 12
23870: PUSH
23871: LD_INT 13
23873: PUSH
23874: LD_INT 14
23876: PUSH
23877: LD_INT 1
23879: PUSH
23880: LD_INT 2
23882: PUSH
23883: LD_INT 3
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: ST_TO_ADDR
23895: GO 24026
23897: LD_INT 1
23899: DOUBLE
23900: EQUAL
23901: IFTRUE 23905
23903: GO 23967
23905: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
23906: LD_ADDR_VAR 0 3
23910: PUSH
23911: LD_INT 11
23913: PUSH
23914: LD_INT 12
23916: PUSH
23917: LD_INT 13
23919: PUSH
23920: LD_INT 14
23922: PUSH
23923: LD_INT 1
23925: PUSH
23926: LD_INT 2
23928: PUSH
23929: LD_INT 3
23931: PUSH
23932: LD_INT 4
23934: PUSH
23935: LD_INT 5
23937: PUSH
23938: LD_INT 21
23940: PUSH
23941: LD_INT 23
23943: PUSH
23944: LD_INT 22
23946: PUSH
23947: LD_INT 24
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: ST_TO_ADDR
23965: GO 24026
23967: LD_INT 3
23969: DOUBLE
23970: EQUAL
23971: IFTRUE 23975
23973: GO 24025
23975: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23976: LD_ADDR_VAR 0 3
23980: PUSH
23981: LD_INT 13
23983: PUSH
23984: LD_INT 14
23986: PUSH
23987: LD_INT 2
23989: PUSH
23990: LD_INT 3
23992: PUSH
23993: LD_INT 4
23995: PUSH
23996: LD_INT 5
23998: PUSH
23999: LD_INT 21
24001: PUSH
24002: LD_INT 22
24004: PUSH
24005: LD_INT 23
24007: PUSH
24008: LD_INT 24
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: ST_TO_ADDR
24023: GO 24026
24025: POP
// result := ( chassis in result ) ;
24026: LD_ADDR_VAR 0 3
24030: PUSH
24031: LD_VAR 0 1
24035: PUSH
24036: LD_VAR 0 3
24040: IN
24041: ST_TO_ADDR
// end ;
24042: LD_VAR 0 3
24046: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24047: LD_INT 0
24049: PPUSH
// if not chassis or not weapon then
24050: LD_VAR 0 1
24054: NOT
24055: PUSH
24056: LD_VAR 0 2
24060: NOT
24061: OR
24062: IFFALSE 24066
// exit ;
24064: GO 25126
// case weapon of us_machine_gun :
24066: LD_VAR 0 2
24070: PUSH
24071: LD_INT 2
24073: DOUBLE
24074: EQUAL
24075: IFTRUE 24079
24077: GO 24109
24079: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24080: LD_ADDR_VAR 0 3
24084: PUSH
24085: LD_INT 1
24087: PUSH
24088: LD_INT 2
24090: PUSH
24091: LD_INT 3
24093: PUSH
24094: LD_INT 4
24096: PUSH
24097: LD_INT 5
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: ST_TO_ADDR
24107: GO 25110
24109: LD_INT 3
24111: DOUBLE
24112: EQUAL
24113: IFTRUE 24117
24115: GO 24147
24117: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24118: LD_ADDR_VAR 0 3
24122: PUSH
24123: LD_INT 1
24125: PUSH
24126: LD_INT 2
24128: PUSH
24129: LD_INT 3
24131: PUSH
24132: LD_INT 4
24134: PUSH
24135: LD_INT 5
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: ST_TO_ADDR
24145: GO 25110
24147: LD_INT 11
24149: DOUBLE
24150: EQUAL
24151: IFTRUE 24155
24153: GO 24185
24155: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24156: LD_ADDR_VAR 0 3
24160: PUSH
24161: LD_INT 1
24163: PUSH
24164: LD_INT 2
24166: PUSH
24167: LD_INT 3
24169: PUSH
24170: LD_INT 4
24172: PUSH
24173: LD_INT 5
24175: PUSH
24176: EMPTY
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: ST_TO_ADDR
24183: GO 25110
24185: LD_INT 4
24187: DOUBLE
24188: EQUAL
24189: IFTRUE 24193
24191: GO 24219
24193: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24194: LD_ADDR_VAR 0 3
24198: PUSH
24199: LD_INT 2
24201: PUSH
24202: LD_INT 3
24204: PUSH
24205: LD_INT 4
24207: PUSH
24208: LD_INT 5
24210: PUSH
24211: EMPTY
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: ST_TO_ADDR
24217: GO 25110
24219: LD_INT 5
24221: DOUBLE
24222: EQUAL
24223: IFTRUE 24227
24225: GO 24253
24227: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24228: LD_ADDR_VAR 0 3
24232: PUSH
24233: LD_INT 2
24235: PUSH
24236: LD_INT 3
24238: PUSH
24239: LD_INT 4
24241: PUSH
24242: LD_INT 5
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: ST_TO_ADDR
24251: GO 25110
24253: LD_INT 9
24255: DOUBLE
24256: EQUAL
24257: IFTRUE 24261
24259: GO 24287
24261: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24262: LD_ADDR_VAR 0 3
24266: PUSH
24267: LD_INT 2
24269: PUSH
24270: LD_INT 3
24272: PUSH
24273: LD_INT 4
24275: PUSH
24276: LD_INT 5
24278: PUSH
24279: EMPTY
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: ST_TO_ADDR
24285: GO 25110
24287: LD_INT 7
24289: DOUBLE
24290: EQUAL
24291: IFTRUE 24295
24293: GO 24321
24295: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24296: LD_ADDR_VAR 0 3
24300: PUSH
24301: LD_INT 2
24303: PUSH
24304: LD_INT 3
24306: PUSH
24307: LD_INT 4
24309: PUSH
24310: LD_INT 5
24312: PUSH
24313: EMPTY
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: ST_TO_ADDR
24319: GO 25110
24321: LD_INT 12
24323: DOUBLE
24324: EQUAL
24325: IFTRUE 24329
24327: GO 24355
24329: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24330: LD_ADDR_VAR 0 3
24334: PUSH
24335: LD_INT 2
24337: PUSH
24338: LD_INT 3
24340: PUSH
24341: LD_INT 4
24343: PUSH
24344: LD_INT 5
24346: PUSH
24347: EMPTY
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: ST_TO_ADDR
24353: GO 25110
24355: LD_INT 13
24357: DOUBLE
24358: EQUAL
24359: IFTRUE 24363
24361: GO 24389
24363: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24364: LD_ADDR_VAR 0 3
24368: PUSH
24369: LD_INT 2
24371: PUSH
24372: LD_INT 3
24374: PUSH
24375: LD_INT 4
24377: PUSH
24378: LD_INT 5
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: ST_TO_ADDR
24387: GO 25110
24389: LD_INT 14
24391: DOUBLE
24392: EQUAL
24393: IFTRUE 24397
24395: GO 24415
24397: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24398: LD_ADDR_VAR 0 3
24402: PUSH
24403: LD_INT 4
24405: PUSH
24406: LD_INT 5
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: ST_TO_ADDR
24413: GO 25110
24415: LD_INT 6
24417: DOUBLE
24418: EQUAL
24419: IFTRUE 24423
24421: GO 24441
24423: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24424: LD_ADDR_VAR 0 3
24428: PUSH
24429: LD_INT 4
24431: PUSH
24432: LD_INT 5
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: ST_TO_ADDR
24439: GO 25110
24441: LD_INT 10
24443: DOUBLE
24444: EQUAL
24445: IFTRUE 24449
24447: GO 24467
24449: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24450: LD_ADDR_VAR 0 3
24454: PUSH
24455: LD_INT 4
24457: PUSH
24458: LD_INT 5
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: ST_TO_ADDR
24465: GO 25110
24467: LD_INT 22
24469: DOUBLE
24470: EQUAL
24471: IFTRUE 24475
24473: GO 24501
24475: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24476: LD_ADDR_VAR 0 3
24480: PUSH
24481: LD_INT 11
24483: PUSH
24484: LD_INT 12
24486: PUSH
24487: LD_INT 13
24489: PUSH
24490: LD_INT 14
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: ST_TO_ADDR
24499: GO 25110
24501: LD_INT 23
24503: DOUBLE
24504: EQUAL
24505: IFTRUE 24509
24507: GO 24535
24509: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24510: LD_ADDR_VAR 0 3
24514: PUSH
24515: LD_INT 11
24517: PUSH
24518: LD_INT 12
24520: PUSH
24521: LD_INT 13
24523: PUSH
24524: LD_INT 14
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: ST_TO_ADDR
24533: GO 25110
24535: LD_INT 24
24537: DOUBLE
24538: EQUAL
24539: IFTRUE 24543
24541: GO 24569
24543: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24544: LD_ADDR_VAR 0 3
24548: PUSH
24549: LD_INT 11
24551: PUSH
24552: LD_INT 12
24554: PUSH
24555: LD_INT 13
24557: PUSH
24558: LD_INT 14
24560: PUSH
24561: EMPTY
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: ST_TO_ADDR
24567: GO 25110
24569: LD_INT 30
24571: DOUBLE
24572: EQUAL
24573: IFTRUE 24577
24575: GO 24603
24577: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24578: LD_ADDR_VAR 0 3
24582: PUSH
24583: LD_INT 11
24585: PUSH
24586: LD_INT 12
24588: PUSH
24589: LD_INT 13
24591: PUSH
24592: LD_INT 14
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: ST_TO_ADDR
24601: GO 25110
24603: LD_INT 25
24605: DOUBLE
24606: EQUAL
24607: IFTRUE 24611
24609: GO 24629
24611: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24612: LD_ADDR_VAR 0 3
24616: PUSH
24617: LD_INT 13
24619: PUSH
24620: LD_INT 14
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: ST_TO_ADDR
24627: GO 25110
24629: LD_INT 27
24631: DOUBLE
24632: EQUAL
24633: IFTRUE 24637
24635: GO 24655
24637: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
24638: LD_ADDR_VAR 0 3
24642: PUSH
24643: LD_INT 13
24645: PUSH
24646: LD_INT 14
24648: PUSH
24649: EMPTY
24650: LIST
24651: LIST
24652: ST_TO_ADDR
24653: GO 25110
24655: LD_INT 92
24657: DOUBLE
24658: EQUAL
24659: IFTRUE 24663
24661: GO 24689
24663: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
24664: LD_ADDR_VAR 0 3
24668: PUSH
24669: LD_INT 11
24671: PUSH
24672: LD_INT 12
24674: PUSH
24675: LD_INT 13
24677: PUSH
24678: LD_INT 14
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: ST_TO_ADDR
24687: GO 25110
24689: LD_INT 28
24691: DOUBLE
24692: EQUAL
24693: IFTRUE 24697
24695: GO 24715
24697: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
24698: LD_ADDR_VAR 0 3
24702: PUSH
24703: LD_INT 13
24705: PUSH
24706: LD_INT 14
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: ST_TO_ADDR
24713: GO 25110
24715: LD_INT 29
24717: DOUBLE
24718: EQUAL
24719: IFTRUE 24723
24721: GO 24741
24723: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
24724: LD_ADDR_VAR 0 3
24728: PUSH
24729: LD_INT 13
24731: PUSH
24732: LD_INT 14
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: ST_TO_ADDR
24739: GO 25110
24741: LD_INT 31
24743: DOUBLE
24744: EQUAL
24745: IFTRUE 24749
24747: GO 24767
24749: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
24750: LD_ADDR_VAR 0 3
24754: PUSH
24755: LD_INT 13
24757: PUSH
24758: LD_INT 14
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: ST_TO_ADDR
24765: GO 25110
24767: LD_INT 26
24769: DOUBLE
24770: EQUAL
24771: IFTRUE 24775
24773: GO 24793
24775: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
24776: LD_ADDR_VAR 0 3
24780: PUSH
24781: LD_INT 13
24783: PUSH
24784: LD_INT 14
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: ST_TO_ADDR
24791: GO 25110
24793: LD_INT 42
24795: DOUBLE
24796: EQUAL
24797: IFTRUE 24801
24799: GO 24827
24801: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
24802: LD_ADDR_VAR 0 3
24806: PUSH
24807: LD_INT 21
24809: PUSH
24810: LD_INT 22
24812: PUSH
24813: LD_INT 23
24815: PUSH
24816: LD_INT 24
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: ST_TO_ADDR
24825: GO 25110
24827: LD_INT 43
24829: DOUBLE
24830: EQUAL
24831: IFTRUE 24835
24833: GO 24861
24835: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
24836: LD_ADDR_VAR 0 3
24840: PUSH
24841: LD_INT 21
24843: PUSH
24844: LD_INT 22
24846: PUSH
24847: LD_INT 23
24849: PUSH
24850: LD_INT 24
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: ST_TO_ADDR
24859: GO 25110
24861: LD_INT 44
24863: DOUBLE
24864: EQUAL
24865: IFTRUE 24869
24867: GO 24895
24869: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24870: LD_ADDR_VAR 0 3
24874: PUSH
24875: LD_INT 21
24877: PUSH
24878: LD_INT 22
24880: PUSH
24881: LD_INT 23
24883: PUSH
24884: LD_INT 24
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: ST_TO_ADDR
24893: GO 25110
24895: LD_INT 45
24897: DOUBLE
24898: EQUAL
24899: IFTRUE 24903
24901: GO 24929
24903: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
24904: LD_ADDR_VAR 0 3
24908: PUSH
24909: LD_INT 21
24911: PUSH
24912: LD_INT 22
24914: PUSH
24915: LD_INT 23
24917: PUSH
24918: LD_INT 24
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: ST_TO_ADDR
24927: GO 25110
24929: LD_INT 49
24931: DOUBLE
24932: EQUAL
24933: IFTRUE 24937
24935: GO 24963
24937: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
24938: LD_ADDR_VAR 0 3
24942: PUSH
24943: LD_INT 21
24945: PUSH
24946: LD_INT 22
24948: PUSH
24949: LD_INT 23
24951: PUSH
24952: LD_INT 24
24954: PUSH
24955: EMPTY
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: ST_TO_ADDR
24961: GO 25110
24963: LD_INT 51
24965: DOUBLE
24966: EQUAL
24967: IFTRUE 24971
24969: GO 24997
24971: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
24972: LD_ADDR_VAR 0 3
24976: PUSH
24977: LD_INT 21
24979: PUSH
24980: LD_INT 22
24982: PUSH
24983: LD_INT 23
24985: PUSH
24986: LD_INT 24
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: ST_TO_ADDR
24995: GO 25110
24997: LD_INT 52
24999: DOUBLE
25000: EQUAL
25001: IFTRUE 25005
25003: GO 25031
25005: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25006: LD_ADDR_VAR 0 3
25010: PUSH
25011: LD_INT 21
25013: PUSH
25014: LD_INT 22
25016: PUSH
25017: LD_INT 23
25019: PUSH
25020: LD_INT 24
25022: PUSH
25023: EMPTY
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: ST_TO_ADDR
25029: GO 25110
25031: LD_INT 53
25033: DOUBLE
25034: EQUAL
25035: IFTRUE 25039
25037: GO 25057
25039: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25040: LD_ADDR_VAR 0 3
25044: PUSH
25045: LD_INT 23
25047: PUSH
25048: LD_INT 24
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: ST_TO_ADDR
25055: GO 25110
25057: LD_INT 46
25059: DOUBLE
25060: EQUAL
25061: IFTRUE 25065
25063: GO 25083
25065: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25066: LD_ADDR_VAR 0 3
25070: PUSH
25071: LD_INT 23
25073: PUSH
25074: LD_INT 24
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: ST_TO_ADDR
25081: GO 25110
25083: LD_INT 47
25085: DOUBLE
25086: EQUAL
25087: IFTRUE 25091
25089: GO 25109
25091: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25092: LD_ADDR_VAR 0 3
25096: PUSH
25097: LD_INT 23
25099: PUSH
25100: LD_INT 24
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: ST_TO_ADDR
25107: GO 25110
25109: POP
// result := ( chassis in result ) ;
25110: LD_ADDR_VAR 0 3
25114: PUSH
25115: LD_VAR 0 1
25119: PUSH
25120: LD_VAR 0 3
25124: IN
25125: ST_TO_ADDR
// end ;
25126: LD_VAR 0 3
25130: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25131: LD_INT 0
25133: PPUSH
25134: PPUSH
25135: PPUSH
25136: PPUSH
25137: PPUSH
25138: PPUSH
25139: PPUSH
// result := array ;
25140: LD_ADDR_VAR 0 5
25144: PUSH
25145: LD_VAR 0 1
25149: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25150: LD_VAR 0 1
25154: NOT
25155: PUSH
25156: LD_VAR 0 2
25160: NOT
25161: OR
25162: PUSH
25163: LD_VAR 0 3
25167: NOT
25168: OR
25169: PUSH
25170: LD_VAR 0 2
25174: PUSH
25175: LD_VAR 0 1
25179: GREATER
25180: OR
25181: PUSH
25182: LD_VAR 0 3
25186: PUSH
25187: LD_VAR 0 1
25191: GREATER
25192: OR
25193: IFFALSE 25197
// exit ;
25195: GO 25493
// if direction then
25197: LD_VAR 0 4
25201: IFFALSE 25265
// begin d := 1 ;
25203: LD_ADDR_VAR 0 9
25207: PUSH
25208: LD_INT 1
25210: ST_TO_ADDR
// if i_from > i_to then
25211: LD_VAR 0 2
25215: PUSH
25216: LD_VAR 0 3
25220: GREATER
25221: IFFALSE 25247
// length := ( array - i_from ) + i_to else
25223: LD_ADDR_VAR 0 11
25227: PUSH
25228: LD_VAR 0 1
25232: PUSH
25233: LD_VAR 0 2
25237: MINUS
25238: PUSH
25239: LD_VAR 0 3
25243: PLUS
25244: ST_TO_ADDR
25245: GO 25263
// length := i_to - i_from ;
25247: LD_ADDR_VAR 0 11
25251: PUSH
25252: LD_VAR 0 3
25256: PUSH
25257: LD_VAR 0 2
25261: MINUS
25262: ST_TO_ADDR
// end else
25263: GO 25326
// begin d := - 1 ;
25265: LD_ADDR_VAR 0 9
25269: PUSH
25270: LD_INT 1
25272: NEG
25273: ST_TO_ADDR
// if i_from > i_to then
25274: LD_VAR 0 2
25278: PUSH
25279: LD_VAR 0 3
25283: GREATER
25284: IFFALSE 25304
// length := i_from - i_to else
25286: LD_ADDR_VAR 0 11
25290: PUSH
25291: LD_VAR 0 2
25295: PUSH
25296: LD_VAR 0 3
25300: MINUS
25301: ST_TO_ADDR
25302: GO 25326
// length := ( array - i_to ) + i_from ;
25304: LD_ADDR_VAR 0 11
25308: PUSH
25309: LD_VAR 0 1
25313: PUSH
25314: LD_VAR 0 3
25318: MINUS
25319: PUSH
25320: LD_VAR 0 2
25324: PLUS
25325: ST_TO_ADDR
// end ; if not length then
25326: LD_VAR 0 11
25330: NOT
25331: IFFALSE 25335
// exit ;
25333: GO 25493
// tmp := array ;
25335: LD_ADDR_VAR 0 10
25339: PUSH
25340: LD_VAR 0 1
25344: ST_TO_ADDR
// for i = 1 to length do
25345: LD_ADDR_VAR 0 6
25349: PUSH
25350: DOUBLE
25351: LD_INT 1
25353: DEC
25354: ST_TO_ADDR
25355: LD_VAR 0 11
25359: PUSH
25360: FOR_TO
25361: IFFALSE 25481
// begin for j = 1 to array do
25363: LD_ADDR_VAR 0 7
25367: PUSH
25368: DOUBLE
25369: LD_INT 1
25371: DEC
25372: ST_TO_ADDR
25373: LD_VAR 0 1
25377: PUSH
25378: FOR_TO
25379: IFFALSE 25467
// begin k := j + d ;
25381: LD_ADDR_VAR 0 8
25385: PUSH
25386: LD_VAR 0 7
25390: PUSH
25391: LD_VAR 0 9
25395: PLUS
25396: ST_TO_ADDR
// if k > array then
25397: LD_VAR 0 8
25401: PUSH
25402: LD_VAR 0 1
25406: GREATER
25407: IFFALSE 25417
// k := 1 ;
25409: LD_ADDR_VAR 0 8
25413: PUSH
25414: LD_INT 1
25416: ST_TO_ADDR
// if not k then
25417: LD_VAR 0 8
25421: NOT
25422: IFFALSE 25434
// k := array ;
25424: LD_ADDR_VAR 0 8
25428: PUSH
25429: LD_VAR 0 1
25433: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25434: LD_ADDR_VAR 0 10
25438: PUSH
25439: LD_VAR 0 10
25443: PPUSH
25444: LD_VAR 0 8
25448: PPUSH
25449: LD_VAR 0 1
25453: PUSH
25454: LD_VAR 0 7
25458: ARRAY
25459: PPUSH
25460: CALL_OW 1
25464: ST_TO_ADDR
// end ;
25465: GO 25378
25467: POP
25468: POP
// array := tmp ;
25469: LD_ADDR_VAR 0 1
25473: PUSH
25474: LD_VAR 0 10
25478: ST_TO_ADDR
// end ;
25479: GO 25360
25481: POP
25482: POP
// result := array ;
25483: LD_ADDR_VAR 0 5
25487: PUSH
25488: LD_VAR 0 1
25492: ST_TO_ADDR
// end ;
25493: LD_VAR 0 5
25497: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25498: LD_INT 0
25500: PPUSH
25501: PPUSH
// result := 0 ;
25502: LD_ADDR_VAR 0 3
25506: PUSH
25507: LD_INT 0
25509: ST_TO_ADDR
// if not array or not value in array then
25510: LD_VAR 0 1
25514: NOT
25515: PUSH
25516: LD_VAR 0 2
25520: PUSH
25521: LD_VAR 0 1
25525: IN
25526: NOT
25527: OR
25528: IFFALSE 25532
// exit ;
25530: GO 25586
// for i = 1 to array do
25532: LD_ADDR_VAR 0 4
25536: PUSH
25537: DOUBLE
25538: LD_INT 1
25540: DEC
25541: ST_TO_ADDR
25542: LD_VAR 0 1
25546: PUSH
25547: FOR_TO
25548: IFFALSE 25584
// if value = array [ i ] then
25550: LD_VAR 0 2
25554: PUSH
25555: LD_VAR 0 1
25559: PUSH
25560: LD_VAR 0 4
25564: ARRAY
25565: EQUAL
25566: IFFALSE 25582
// begin result := i ;
25568: LD_ADDR_VAR 0 3
25572: PUSH
25573: LD_VAR 0 4
25577: ST_TO_ADDR
// exit ;
25578: POP
25579: POP
25580: GO 25586
// end ;
25582: GO 25547
25584: POP
25585: POP
// end ;
25586: LD_VAR 0 3
25590: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25591: LD_INT 0
25593: PPUSH
// vc_chassis := chassis ;
25594: LD_ADDR_OWVAR 37
25598: PUSH
25599: LD_VAR 0 1
25603: ST_TO_ADDR
// vc_engine := engine ;
25604: LD_ADDR_OWVAR 39
25608: PUSH
25609: LD_VAR 0 2
25613: ST_TO_ADDR
// vc_control := control ;
25614: LD_ADDR_OWVAR 38
25618: PUSH
25619: LD_VAR 0 3
25623: ST_TO_ADDR
// vc_weapon := weapon ;
25624: LD_ADDR_OWVAR 40
25628: PUSH
25629: LD_VAR 0 4
25633: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25634: LD_ADDR_OWVAR 41
25638: PUSH
25639: LD_VAR 0 5
25643: ST_TO_ADDR
// end ;
25644: LD_VAR 0 6
25648: RET
// export function WantPlant ( unit ) ; var task ; begin
25649: LD_INT 0
25651: PPUSH
25652: PPUSH
// result := false ;
25653: LD_ADDR_VAR 0 2
25657: PUSH
25658: LD_INT 0
25660: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25661: LD_ADDR_VAR 0 3
25665: PUSH
25666: LD_VAR 0 1
25670: PPUSH
25671: CALL_OW 437
25675: ST_TO_ADDR
// if task then
25676: LD_VAR 0 3
25680: IFFALSE 25708
// if task [ 1 ] [ 1 ] = p then
25682: LD_VAR 0 3
25686: PUSH
25687: LD_INT 1
25689: ARRAY
25690: PUSH
25691: LD_INT 1
25693: ARRAY
25694: PUSH
25695: LD_STRING p
25697: EQUAL
25698: IFFALSE 25708
// result := true ;
25700: LD_ADDR_VAR 0 2
25704: PUSH
25705: LD_INT 1
25707: ST_TO_ADDR
// end ;
25708: LD_VAR 0 2
25712: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
25713: LD_INT 0
25715: PPUSH
25716: PPUSH
25717: PPUSH
25718: PPUSH
// if pos < 1 then
25719: LD_VAR 0 2
25723: PUSH
25724: LD_INT 1
25726: LESS
25727: IFFALSE 25731
// exit ;
25729: GO 26034
// if pos = 1 then
25731: LD_VAR 0 2
25735: PUSH
25736: LD_INT 1
25738: EQUAL
25739: IFFALSE 25772
// result := Replace ( arr , pos [ 1 ] , value ) else
25741: LD_ADDR_VAR 0 4
25745: PUSH
25746: LD_VAR 0 1
25750: PPUSH
25751: LD_VAR 0 2
25755: PUSH
25756: LD_INT 1
25758: ARRAY
25759: PPUSH
25760: LD_VAR 0 3
25764: PPUSH
25765: CALL_OW 1
25769: ST_TO_ADDR
25770: GO 26034
// begin tmp := arr ;
25772: LD_ADDR_VAR 0 6
25776: PUSH
25777: LD_VAR 0 1
25781: ST_TO_ADDR
// s_arr := [ tmp ] ;
25782: LD_ADDR_VAR 0 7
25786: PUSH
25787: LD_VAR 0 6
25791: PUSH
25792: EMPTY
25793: LIST
25794: ST_TO_ADDR
// for i = 1 to pos - 1 do
25795: LD_ADDR_VAR 0 5
25799: PUSH
25800: DOUBLE
25801: LD_INT 1
25803: DEC
25804: ST_TO_ADDR
25805: LD_VAR 0 2
25809: PUSH
25810: LD_INT 1
25812: MINUS
25813: PUSH
25814: FOR_TO
25815: IFFALSE 25860
// begin tmp := tmp [ pos [ i ] ] ;
25817: LD_ADDR_VAR 0 6
25821: PUSH
25822: LD_VAR 0 6
25826: PUSH
25827: LD_VAR 0 2
25831: PUSH
25832: LD_VAR 0 5
25836: ARRAY
25837: ARRAY
25838: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
25839: LD_ADDR_VAR 0 7
25843: PUSH
25844: LD_VAR 0 7
25848: PUSH
25849: LD_VAR 0 6
25853: PUSH
25854: EMPTY
25855: LIST
25856: ADD
25857: ST_TO_ADDR
// end ;
25858: GO 25814
25860: POP
25861: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25862: LD_ADDR_VAR 0 6
25866: PUSH
25867: LD_VAR 0 6
25871: PPUSH
25872: LD_VAR 0 2
25876: PUSH
25877: LD_VAR 0 2
25881: ARRAY
25882: PPUSH
25883: LD_VAR 0 3
25887: PPUSH
25888: CALL_OW 1
25892: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
25893: LD_ADDR_VAR 0 7
25897: PUSH
25898: LD_VAR 0 7
25902: PPUSH
25903: LD_VAR 0 7
25907: PPUSH
25908: LD_VAR 0 6
25912: PPUSH
25913: CALL_OW 1
25917: ST_TO_ADDR
// for i = s_arr downto 2 do
25918: LD_ADDR_VAR 0 5
25922: PUSH
25923: DOUBLE
25924: LD_VAR 0 7
25928: INC
25929: ST_TO_ADDR
25930: LD_INT 2
25932: PUSH
25933: FOR_DOWNTO
25934: IFFALSE 26018
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
25936: LD_ADDR_VAR 0 6
25940: PUSH
25941: LD_VAR 0 7
25945: PUSH
25946: LD_VAR 0 5
25950: PUSH
25951: LD_INT 1
25953: MINUS
25954: ARRAY
25955: PPUSH
25956: LD_VAR 0 2
25960: PUSH
25961: LD_VAR 0 5
25965: PUSH
25966: LD_INT 1
25968: MINUS
25969: ARRAY
25970: PPUSH
25971: LD_VAR 0 7
25975: PUSH
25976: LD_VAR 0 5
25980: ARRAY
25981: PPUSH
25982: CALL_OW 1
25986: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
25987: LD_ADDR_VAR 0 7
25991: PUSH
25992: LD_VAR 0 7
25996: PPUSH
25997: LD_VAR 0 5
26001: PUSH
26002: LD_INT 1
26004: MINUS
26005: PPUSH
26006: LD_VAR 0 6
26010: PPUSH
26011: CALL_OW 1
26015: ST_TO_ADDR
// end ;
26016: GO 25933
26018: POP
26019: POP
// result := s_arr [ 1 ] ;
26020: LD_ADDR_VAR 0 4
26024: PUSH
26025: LD_VAR 0 7
26029: PUSH
26030: LD_INT 1
26032: ARRAY
26033: ST_TO_ADDR
// end ; end ;
26034: LD_VAR 0 4
26038: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26039: LD_INT 0
26041: PPUSH
26042: PPUSH
// if not list then
26043: LD_VAR 0 1
26047: NOT
26048: IFFALSE 26052
// exit ;
26050: GO 26143
// i := list [ pos1 ] ;
26052: LD_ADDR_VAR 0 5
26056: PUSH
26057: LD_VAR 0 1
26061: PUSH
26062: LD_VAR 0 2
26066: ARRAY
26067: ST_TO_ADDR
// if not i then
26068: LD_VAR 0 5
26072: NOT
26073: IFFALSE 26077
// exit ;
26075: GO 26143
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26077: LD_ADDR_VAR 0 1
26081: PUSH
26082: LD_VAR 0 1
26086: PPUSH
26087: LD_VAR 0 2
26091: PPUSH
26092: LD_VAR 0 1
26096: PUSH
26097: LD_VAR 0 3
26101: ARRAY
26102: PPUSH
26103: CALL_OW 1
26107: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26108: LD_ADDR_VAR 0 1
26112: PUSH
26113: LD_VAR 0 1
26117: PPUSH
26118: LD_VAR 0 3
26122: PPUSH
26123: LD_VAR 0 5
26127: PPUSH
26128: CALL_OW 1
26132: ST_TO_ADDR
// result := list ;
26133: LD_ADDR_VAR 0 4
26137: PUSH
26138: LD_VAR 0 1
26142: ST_TO_ADDR
// end ;
26143: LD_VAR 0 4
26147: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26148: LD_INT 0
26150: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26151: LD_ADDR_VAR 0 5
26155: PUSH
26156: LD_VAR 0 1
26160: PPUSH
26161: CALL_OW 250
26165: PPUSH
26166: LD_VAR 0 1
26170: PPUSH
26171: CALL_OW 251
26175: PPUSH
26176: LD_VAR 0 2
26180: PPUSH
26181: LD_VAR 0 3
26185: PPUSH
26186: LD_VAR 0 4
26190: PPUSH
26191: CALL 26569 0 5
26195: ST_TO_ADDR
// end ;
26196: LD_VAR 0 5
26200: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
26201: LD_INT 0
26203: PPUSH
26204: PPUSH
26205: PPUSH
26206: PPUSH
// if not list or not unit then
26207: LD_VAR 0 2
26211: NOT
26212: PUSH
26213: LD_VAR 0 1
26217: NOT
26218: OR
26219: IFFALSE 26223
// exit ;
26221: GO 26564
// result := [ ] ;
26223: LD_ADDR_VAR 0 5
26227: PUSH
26228: EMPTY
26229: ST_TO_ADDR
// for i in list do
26230: LD_ADDR_VAR 0 6
26234: PUSH
26235: LD_VAR 0 2
26239: PUSH
26240: FOR_IN
26241: IFFALSE 26459
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
26243: LD_ADDR_VAR 0 8
26247: PUSH
26248: LD_VAR 0 1
26252: PPUSH
26253: LD_VAR 0 6
26257: PUSH
26258: LD_INT 1
26260: ARRAY
26261: PPUSH
26262: LD_VAR 0 6
26266: PUSH
26267: LD_INT 2
26269: ARRAY
26270: PPUSH
26271: CALL_OW 297
26275: ST_TO_ADDR
// if not Count ( result ) then
26276: LD_VAR 0 5
26280: PPUSH
26281: CALL 22853 0 1
26285: NOT
26286: IFFALSE 26319
// begin result := Join ( result , [ i , tmp ] ) ;
26288: LD_ADDR_VAR 0 5
26292: PUSH
26293: LD_VAR 0 5
26297: PPUSH
26298: LD_VAR 0 6
26302: PUSH
26303: LD_VAR 0 8
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: PPUSH
26312: CALL 58462 0 2
26316: ST_TO_ADDR
// continue ;
26317: GO 26240
// end ; if result [ result ] [ 2 ] <= tmp then
26319: LD_VAR 0 5
26323: PUSH
26324: LD_VAR 0 5
26328: ARRAY
26329: PUSH
26330: LD_INT 2
26332: ARRAY
26333: PUSH
26334: LD_VAR 0 8
26338: LESSEQUAL
26339: IFFALSE 26372
// result := Join ( result , [ i , tmp ] ) else
26341: LD_ADDR_VAR 0 5
26345: PUSH
26346: LD_VAR 0 5
26350: PPUSH
26351: LD_VAR 0 6
26355: PUSH
26356: LD_VAR 0 8
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: PPUSH
26365: CALL 58462 0 2
26369: ST_TO_ADDR
26370: GO 26457
// begin for j := 1 to Count ( result ) do
26372: LD_ADDR_VAR 0 7
26376: PUSH
26377: DOUBLE
26378: LD_INT 1
26380: DEC
26381: ST_TO_ADDR
26382: LD_VAR 0 5
26386: PPUSH
26387: CALL 22853 0 1
26391: PUSH
26392: FOR_TO
26393: IFFALSE 26455
// begin if tmp < result [ j ] [ 2 ] then
26395: LD_VAR 0 8
26399: PUSH
26400: LD_VAR 0 5
26404: PUSH
26405: LD_VAR 0 7
26409: ARRAY
26410: PUSH
26411: LD_INT 2
26413: ARRAY
26414: LESS
26415: IFFALSE 26453
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26417: LD_ADDR_VAR 0 5
26421: PUSH
26422: LD_VAR 0 5
26426: PPUSH
26427: LD_VAR 0 7
26431: PPUSH
26432: LD_VAR 0 6
26436: PUSH
26437: LD_VAR 0 8
26441: PUSH
26442: EMPTY
26443: LIST
26444: LIST
26445: PPUSH
26446: CALL_OW 2
26450: ST_TO_ADDR
// break ;
26451: GO 26455
// end ; end ;
26453: GO 26392
26455: POP
26456: POP
// end ; end ;
26457: GO 26240
26459: POP
26460: POP
// if result and not asc then
26461: LD_VAR 0 5
26465: PUSH
26466: LD_VAR 0 3
26470: NOT
26471: AND
26472: IFFALSE 26489
// result := ReverseArray ( result ) ;
26474: LD_ADDR_VAR 0 5
26478: PUSH
26479: LD_VAR 0 5
26483: PPUSH
26484: CALL 53729 0 1
26488: ST_TO_ADDR
// tmp := [ ] ;
26489: LD_ADDR_VAR 0 8
26493: PUSH
26494: EMPTY
26495: ST_TO_ADDR
// if mode then
26496: LD_VAR 0 4
26500: IFFALSE 26564
// begin for i := 1 to result do
26502: LD_ADDR_VAR 0 6
26506: PUSH
26507: DOUBLE
26508: LD_INT 1
26510: DEC
26511: ST_TO_ADDR
26512: LD_VAR 0 5
26516: PUSH
26517: FOR_TO
26518: IFFALSE 26552
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
26520: LD_ADDR_VAR 0 8
26524: PUSH
26525: LD_VAR 0 8
26529: PPUSH
26530: LD_VAR 0 5
26534: PUSH
26535: LD_VAR 0 6
26539: ARRAY
26540: PUSH
26541: LD_INT 1
26543: ARRAY
26544: PPUSH
26545: CALL 58462 0 2
26549: ST_TO_ADDR
26550: GO 26517
26552: POP
26553: POP
// result := tmp ;
26554: LD_ADDR_VAR 0 5
26558: PUSH
26559: LD_VAR 0 8
26563: ST_TO_ADDR
// end ; end ;
26564: LD_VAR 0 5
26568: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26569: LD_INT 0
26571: PPUSH
26572: PPUSH
26573: PPUSH
26574: PPUSH
// if not list then
26575: LD_VAR 0 3
26579: NOT
26580: IFFALSE 26584
// exit ;
26582: GO 26972
// result := [ ] ;
26584: LD_ADDR_VAR 0 6
26588: PUSH
26589: EMPTY
26590: ST_TO_ADDR
// for i in list do
26591: LD_ADDR_VAR 0 7
26595: PUSH
26596: LD_VAR 0 3
26600: PUSH
26601: FOR_IN
26602: IFFALSE 26804
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26604: LD_ADDR_VAR 0 9
26608: PUSH
26609: LD_VAR 0 7
26613: PPUSH
26614: LD_VAR 0 1
26618: PPUSH
26619: LD_VAR 0 2
26623: PPUSH
26624: CALL_OW 297
26628: ST_TO_ADDR
// if not result then
26629: LD_VAR 0 6
26633: NOT
26634: IFFALSE 26660
// result := [ [ i , tmp ] ] else
26636: LD_ADDR_VAR 0 6
26640: PUSH
26641: LD_VAR 0 7
26645: PUSH
26646: LD_VAR 0 9
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PUSH
26655: EMPTY
26656: LIST
26657: ST_TO_ADDR
26658: GO 26802
// begin if result [ result ] [ 2 ] <= tmp then
26660: LD_VAR 0 6
26664: PUSH
26665: LD_VAR 0 6
26669: ARRAY
26670: PUSH
26671: LD_INT 2
26673: ARRAY
26674: PUSH
26675: LD_VAR 0 9
26679: LESSEQUAL
26680: IFFALSE 26722
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26682: LD_ADDR_VAR 0 6
26686: PUSH
26687: LD_VAR 0 6
26691: PPUSH
26692: LD_VAR 0 6
26696: PUSH
26697: LD_INT 1
26699: PLUS
26700: PPUSH
26701: LD_VAR 0 7
26705: PUSH
26706: LD_VAR 0 9
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PPUSH
26715: CALL_OW 2
26719: ST_TO_ADDR
26720: GO 26802
// for j := 1 to result do
26722: LD_ADDR_VAR 0 8
26726: PUSH
26727: DOUBLE
26728: LD_INT 1
26730: DEC
26731: ST_TO_ADDR
26732: LD_VAR 0 6
26736: PUSH
26737: FOR_TO
26738: IFFALSE 26800
// begin if tmp < result [ j ] [ 2 ] then
26740: LD_VAR 0 9
26744: PUSH
26745: LD_VAR 0 6
26749: PUSH
26750: LD_VAR 0 8
26754: ARRAY
26755: PUSH
26756: LD_INT 2
26758: ARRAY
26759: LESS
26760: IFFALSE 26798
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26762: LD_ADDR_VAR 0 6
26766: PUSH
26767: LD_VAR 0 6
26771: PPUSH
26772: LD_VAR 0 8
26776: PPUSH
26777: LD_VAR 0 7
26781: PUSH
26782: LD_VAR 0 9
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PPUSH
26791: CALL_OW 2
26795: ST_TO_ADDR
// break ;
26796: GO 26800
// end ; end ;
26798: GO 26737
26800: POP
26801: POP
// end ; end ;
26802: GO 26601
26804: POP
26805: POP
// if result and not asc then
26806: LD_VAR 0 6
26810: PUSH
26811: LD_VAR 0 4
26815: NOT
26816: AND
26817: IFFALSE 26892
// begin tmp := result ;
26819: LD_ADDR_VAR 0 9
26823: PUSH
26824: LD_VAR 0 6
26828: ST_TO_ADDR
// for i = tmp downto 1 do
26829: LD_ADDR_VAR 0 7
26833: PUSH
26834: DOUBLE
26835: LD_VAR 0 9
26839: INC
26840: ST_TO_ADDR
26841: LD_INT 1
26843: PUSH
26844: FOR_DOWNTO
26845: IFFALSE 26890
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26847: LD_ADDR_VAR 0 6
26851: PUSH
26852: LD_VAR 0 6
26856: PPUSH
26857: LD_VAR 0 9
26861: PUSH
26862: LD_VAR 0 7
26866: MINUS
26867: PUSH
26868: LD_INT 1
26870: PLUS
26871: PPUSH
26872: LD_VAR 0 9
26876: PUSH
26877: LD_VAR 0 7
26881: ARRAY
26882: PPUSH
26883: CALL_OW 1
26887: ST_TO_ADDR
26888: GO 26844
26890: POP
26891: POP
// end ; tmp := [ ] ;
26892: LD_ADDR_VAR 0 9
26896: PUSH
26897: EMPTY
26898: ST_TO_ADDR
// if mode then
26899: LD_VAR 0 5
26903: IFFALSE 26972
// begin for i = 1 to result do
26905: LD_ADDR_VAR 0 7
26909: PUSH
26910: DOUBLE
26911: LD_INT 1
26913: DEC
26914: ST_TO_ADDR
26915: LD_VAR 0 6
26919: PUSH
26920: FOR_TO
26921: IFFALSE 26960
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
26923: LD_ADDR_VAR 0 9
26927: PUSH
26928: LD_VAR 0 9
26932: PPUSH
26933: LD_VAR 0 7
26937: PPUSH
26938: LD_VAR 0 6
26942: PUSH
26943: LD_VAR 0 7
26947: ARRAY
26948: PUSH
26949: LD_INT 1
26951: ARRAY
26952: PPUSH
26953: CALL_OW 1
26957: ST_TO_ADDR
26958: GO 26920
26960: POP
26961: POP
// result := tmp ;
26962: LD_ADDR_VAR 0 6
26966: PUSH
26967: LD_VAR 0 9
26971: ST_TO_ADDR
// end ; end ;
26972: LD_VAR 0 6
26976: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26977: LD_INT 0
26979: PPUSH
26980: PPUSH
26981: PPUSH
26982: PPUSH
26983: PPUSH
26984: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26985: LD_ADDR_VAR 0 5
26989: PUSH
26990: LD_INT 0
26992: PUSH
26993: LD_INT 0
26995: PUSH
26996: LD_INT 0
26998: PUSH
26999: EMPTY
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: ST_TO_ADDR
// if not x or not y then
27007: LD_VAR 0 2
27011: NOT
27012: PUSH
27013: LD_VAR 0 3
27017: NOT
27018: OR
27019: IFFALSE 27023
// exit ;
27021: GO 28673
// if not range then
27023: LD_VAR 0 4
27027: NOT
27028: IFFALSE 27038
// range := 10 ;
27030: LD_ADDR_VAR 0 4
27034: PUSH
27035: LD_INT 10
27037: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27038: LD_ADDR_VAR 0 8
27042: PUSH
27043: LD_INT 81
27045: PUSH
27046: LD_VAR 0 1
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: PUSH
27055: LD_INT 92
27057: PUSH
27058: LD_VAR 0 2
27062: PUSH
27063: LD_VAR 0 3
27067: PUSH
27068: LD_VAR 0 4
27072: PUSH
27073: EMPTY
27074: LIST
27075: LIST
27076: LIST
27077: LIST
27078: PUSH
27079: LD_INT 3
27081: PUSH
27082: LD_INT 21
27084: PUSH
27085: LD_INT 3
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: LIST
27100: PPUSH
27101: CALL_OW 69
27105: ST_TO_ADDR
// if not tmp then
27106: LD_VAR 0 8
27110: NOT
27111: IFFALSE 27115
// exit ;
27113: GO 28673
// for i in tmp do
27115: LD_ADDR_VAR 0 6
27119: PUSH
27120: LD_VAR 0 8
27124: PUSH
27125: FOR_IN
27126: IFFALSE 28648
// begin points := [ 0 , 0 , 0 ] ;
27128: LD_ADDR_VAR 0 9
27132: PUSH
27133: LD_INT 0
27135: PUSH
27136: LD_INT 0
27138: PUSH
27139: LD_INT 0
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: LIST
27146: ST_TO_ADDR
// bpoints := 1 ;
27147: LD_ADDR_VAR 0 10
27151: PUSH
27152: LD_INT 1
27154: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27155: LD_VAR 0 6
27159: PPUSH
27160: CALL_OW 247
27164: PUSH
27165: LD_INT 1
27167: DOUBLE
27168: EQUAL
27169: IFTRUE 27173
27171: GO 27751
27173: POP
// begin if GetClass ( i ) = 1 then
27174: LD_VAR 0 6
27178: PPUSH
27179: CALL_OW 257
27183: PUSH
27184: LD_INT 1
27186: EQUAL
27187: IFFALSE 27208
// points := [ 10 , 5 , 3 ] ;
27189: LD_ADDR_VAR 0 9
27193: PUSH
27194: LD_INT 10
27196: PUSH
27197: LD_INT 5
27199: PUSH
27200: LD_INT 3
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: LIST
27207: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27208: LD_VAR 0 6
27212: PPUSH
27213: CALL_OW 257
27217: PUSH
27218: LD_INT 2
27220: PUSH
27221: LD_INT 3
27223: PUSH
27224: LD_INT 4
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: LIST
27231: IN
27232: IFFALSE 27253
// points := [ 3 , 2 , 1 ] ;
27234: LD_ADDR_VAR 0 9
27238: PUSH
27239: LD_INT 3
27241: PUSH
27242: LD_INT 2
27244: PUSH
27245: LD_INT 1
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: LIST
27252: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27253: LD_VAR 0 6
27257: PPUSH
27258: CALL_OW 257
27262: PUSH
27263: LD_INT 5
27265: EQUAL
27266: IFFALSE 27287
// points := [ 130 , 5 , 2 ] ;
27268: LD_ADDR_VAR 0 9
27272: PUSH
27273: LD_INT 130
27275: PUSH
27276: LD_INT 5
27278: PUSH
27279: LD_INT 2
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: LIST
27286: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27287: LD_VAR 0 6
27291: PPUSH
27292: CALL_OW 257
27296: PUSH
27297: LD_INT 8
27299: EQUAL
27300: IFFALSE 27321
// points := [ 35 , 35 , 30 ] ;
27302: LD_ADDR_VAR 0 9
27306: PUSH
27307: LD_INT 35
27309: PUSH
27310: LD_INT 35
27312: PUSH
27313: LD_INT 30
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: LIST
27320: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27321: LD_VAR 0 6
27325: PPUSH
27326: CALL_OW 257
27330: PUSH
27331: LD_INT 9
27333: EQUAL
27334: IFFALSE 27355
// points := [ 20 , 55 , 40 ] ;
27336: LD_ADDR_VAR 0 9
27340: PUSH
27341: LD_INT 20
27343: PUSH
27344: LD_INT 55
27346: PUSH
27347: LD_INT 40
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: LIST
27354: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27355: LD_VAR 0 6
27359: PPUSH
27360: CALL_OW 257
27364: PUSH
27365: LD_INT 12
27367: PUSH
27368: LD_INT 16
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: IN
27375: IFFALSE 27396
// points := [ 5 , 3 , 2 ] ;
27377: LD_ADDR_VAR 0 9
27381: PUSH
27382: LD_INT 5
27384: PUSH
27385: LD_INT 3
27387: PUSH
27388: LD_INT 2
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: LIST
27395: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27396: LD_VAR 0 6
27400: PPUSH
27401: CALL_OW 257
27405: PUSH
27406: LD_INT 17
27408: EQUAL
27409: IFFALSE 27430
// points := [ 100 , 50 , 75 ] ;
27411: LD_ADDR_VAR 0 9
27415: PUSH
27416: LD_INT 100
27418: PUSH
27419: LD_INT 50
27421: PUSH
27422: LD_INT 75
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: LIST
27429: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27430: LD_VAR 0 6
27434: PPUSH
27435: CALL_OW 257
27439: PUSH
27440: LD_INT 15
27442: EQUAL
27443: IFFALSE 27464
// points := [ 10 , 5 , 3 ] ;
27445: LD_ADDR_VAR 0 9
27449: PUSH
27450: LD_INT 10
27452: PUSH
27453: LD_INT 5
27455: PUSH
27456: LD_INT 3
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: LIST
27463: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27464: LD_VAR 0 6
27468: PPUSH
27469: CALL_OW 257
27473: PUSH
27474: LD_INT 14
27476: EQUAL
27477: IFFALSE 27498
// points := [ 10 , 0 , 0 ] ;
27479: LD_ADDR_VAR 0 9
27483: PUSH
27484: LD_INT 10
27486: PUSH
27487: LD_INT 0
27489: PUSH
27490: LD_INT 0
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: LIST
27497: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27498: LD_VAR 0 6
27502: PPUSH
27503: CALL_OW 257
27507: PUSH
27508: LD_INT 11
27510: EQUAL
27511: IFFALSE 27532
// points := [ 30 , 10 , 5 ] ;
27513: LD_ADDR_VAR 0 9
27517: PUSH
27518: LD_INT 30
27520: PUSH
27521: LD_INT 10
27523: PUSH
27524: LD_INT 5
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: LIST
27531: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27532: LD_VAR 0 1
27536: PPUSH
27537: LD_INT 5
27539: PPUSH
27540: CALL_OW 321
27544: PUSH
27545: LD_INT 2
27547: EQUAL
27548: IFFALSE 27565
// bpoints := bpoints * 1.8 ;
27550: LD_ADDR_VAR 0 10
27554: PUSH
27555: LD_VAR 0 10
27559: PUSH
27560: LD_REAL  1.80000000000000E+0000
27563: MUL
27564: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27565: LD_VAR 0 6
27569: PPUSH
27570: CALL_OW 257
27574: PUSH
27575: LD_INT 1
27577: PUSH
27578: LD_INT 2
27580: PUSH
27581: LD_INT 3
27583: PUSH
27584: LD_INT 4
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: IN
27593: PUSH
27594: LD_VAR 0 1
27598: PPUSH
27599: LD_INT 51
27601: PPUSH
27602: CALL_OW 321
27606: PUSH
27607: LD_INT 2
27609: EQUAL
27610: AND
27611: IFFALSE 27628
// bpoints := bpoints * 1.2 ;
27613: LD_ADDR_VAR 0 10
27617: PUSH
27618: LD_VAR 0 10
27622: PUSH
27623: LD_REAL  1.20000000000000E+0000
27626: MUL
27627: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27628: LD_VAR 0 6
27632: PPUSH
27633: CALL_OW 257
27637: PUSH
27638: LD_INT 5
27640: PUSH
27641: LD_INT 7
27643: PUSH
27644: LD_INT 9
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: LIST
27651: IN
27652: PUSH
27653: LD_VAR 0 1
27657: PPUSH
27658: LD_INT 52
27660: PPUSH
27661: CALL_OW 321
27665: PUSH
27666: LD_INT 2
27668: EQUAL
27669: AND
27670: IFFALSE 27687
// bpoints := bpoints * 1.5 ;
27672: LD_ADDR_VAR 0 10
27676: PUSH
27677: LD_VAR 0 10
27681: PUSH
27682: LD_REAL  1.50000000000000E+0000
27685: MUL
27686: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27687: LD_VAR 0 1
27691: PPUSH
27692: LD_INT 66
27694: PPUSH
27695: CALL_OW 321
27699: PUSH
27700: LD_INT 2
27702: EQUAL
27703: IFFALSE 27720
// bpoints := bpoints * 1.1 ;
27705: LD_ADDR_VAR 0 10
27709: PUSH
27710: LD_VAR 0 10
27714: PUSH
27715: LD_REAL  1.10000000000000E+0000
27718: MUL
27719: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27720: LD_ADDR_VAR 0 10
27724: PUSH
27725: LD_VAR 0 10
27729: PUSH
27730: LD_VAR 0 6
27734: PPUSH
27735: LD_INT 1
27737: PPUSH
27738: CALL_OW 259
27742: PUSH
27743: LD_REAL  1.15000000000000E+0000
27746: MUL
27747: MUL
27748: ST_TO_ADDR
// end ; unit_vehicle :
27749: GO 28577
27751: LD_INT 2
27753: DOUBLE
27754: EQUAL
27755: IFTRUE 27759
27757: GO 28565
27759: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27760: LD_VAR 0 6
27764: PPUSH
27765: CALL_OW 264
27769: PUSH
27770: LD_INT 2
27772: PUSH
27773: LD_INT 42
27775: PUSH
27776: LD_INT 24
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: LIST
27783: IN
27784: IFFALSE 27805
// points := [ 25 , 5 , 3 ] ;
27786: LD_ADDR_VAR 0 9
27790: PUSH
27791: LD_INT 25
27793: PUSH
27794: LD_INT 5
27796: PUSH
27797: LD_INT 3
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: LIST
27804: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27805: LD_VAR 0 6
27809: PPUSH
27810: CALL_OW 264
27814: PUSH
27815: LD_INT 4
27817: PUSH
27818: LD_INT 43
27820: PUSH
27821: LD_INT 25
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: LIST
27828: IN
27829: IFFALSE 27850
// points := [ 40 , 15 , 5 ] ;
27831: LD_ADDR_VAR 0 9
27835: PUSH
27836: LD_INT 40
27838: PUSH
27839: LD_INT 15
27841: PUSH
27842: LD_INT 5
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: LIST
27849: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27850: LD_VAR 0 6
27854: PPUSH
27855: CALL_OW 264
27859: PUSH
27860: LD_INT 3
27862: PUSH
27863: LD_INT 23
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: IN
27870: IFFALSE 27891
// points := [ 7 , 25 , 8 ] ;
27872: LD_ADDR_VAR 0 9
27876: PUSH
27877: LD_INT 7
27879: PUSH
27880: LD_INT 25
27882: PUSH
27883: LD_INT 8
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: LIST
27890: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27891: LD_VAR 0 6
27895: PPUSH
27896: CALL_OW 264
27900: PUSH
27901: LD_INT 5
27903: PUSH
27904: LD_INT 27
27906: PUSH
27907: LD_INT 44
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: LIST
27914: IN
27915: IFFALSE 27936
// points := [ 14 , 50 , 16 ] ;
27917: LD_ADDR_VAR 0 9
27921: PUSH
27922: LD_INT 14
27924: PUSH
27925: LD_INT 50
27927: PUSH
27928: LD_INT 16
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: LIST
27935: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
27936: LD_VAR 0 6
27940: PPUSH
27941: CALL_OW 264
27945: PUSH
27946: LD_INT 6
27948: PUSH
27949: LD_INT 46
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: IN
27956: IFFALSE 27977
// points := [ 32 , 120 , 70 ] ;
27958: LD_ADDR_VAR 0 9
27962: PUSH
27963: LD_INT 32
27965: PUSH
27966: LD_INT 120
27968: PUSH
27969: LD_INT 70
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: LIST
27976: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
27977: LD_VAR 0 6
27981: PPUSH
27982: CALL_OW 264
27986: PUSH
27987: LD_INT 7
27989: PUSH
27990: LD_INT 28
27992: PUSH
27993: LD_INT 45
27995: PUSH
27996: LD_INT 92
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: IN
28005: IFFALSE 28026
// points := [ 35 , 20 , 45 ] ;
28007: LD_ADDR_VAR 0 9
28011: PUSH
28012: LD_INT 35
28014: PUSH
28015: LD_INT 20
28017: PUSH
28018: LD_INT 45
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: LIST
28025: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28026: LD_VAR 0 6
28030: PPUSH
28031: CALL_OW 264
28035: PUSH
28036: LD_INT 47
28038: PUSH
28039: EMPTY
28040: LIST
28041: IN
28042: IFFALSE 28063
// points := [ 67 , 45 , 75 ] ;
28044: LD_ADDR_VAR 0 9
28048: PUSH
28049: LD_INT 67
28051: PUSH
28052: LD_INT 45
28054: PUSH
28055: LD_INT 75
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: LIST
28062: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28063: LD_VAR 0 6
28067: PPUSH
28068: CALL_OW 264
28072: PUSH
28073: LD_INT 26
28075: PUSH
28076: EMPTY
28077: LIST
28078: IN
28079: IFFALSE 28100
// points := [ 120 , 30 , 80 ] ;
28081: LD_ADDR_VAR 0 9
28085: PUSH
28086: LD_INT 120
28088: PUSH
28089: LD_INT 30
28091: PUSH
28092: LD_INT 80
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: LIST
28099: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28100: LD_VAR 0 6
28104: PPUSH
28105: CALL_OW 264
28109: PUSH
28110: LD_INT 22
28112: PUSH
28113: EMPTY
28114: LIST
28115: IN
28116: IFFALSE 28137
// points := [ 40 , 1 , 1 ] ;
28118: LD_ADDR_VAR 0 9
28122: PUSH
28123: LD_INT 40
28125: PUSH
28126: LD_INT 1
28128: PUSH
28129: LD_INT 1
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: LIST
28136: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28137: LD_VAR 0 6
28141: PPUSH
28142: CALL_OW 264
28146: PUSH
28147: LD_INT 29
28149: PUSH
28150: EMPTY
28151: LIST
28152: IN
28153: IFFALSE 28174
// points := [ 70 , 200 , 400 ] ;
28155: LD_ADDR_VAR 0 9
28159: PUSH
28160: LD_INT 70
28162: PUSH
28163: LD_INT 200
28165: PUSH
28166: LD_INT 400
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: LIST
28173: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28174: LD_VAR 0 6
28178: PPUSH
28179: CALL_OW 264
28183: PUSH
28184: LD_INT 14
28186: PUSH
28187: LD_INT 53
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: IN
28194: IFFALSE 28215
// points := [ 40 , 10 , 20 ] ;
28196: LD_ADDR_VAR 0 9
28200: PUSH
28201: LD_INT 40
28203: PUSH
28204: LD_INT 10
28206: PUSH
28207: LD_INT 20
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: LIST
28214: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28215: LD_VAR 0 6
28219: PPUSH
28220: CALL_OW 264
28224: PUSH
28225: LD_INT 9
28227: PUSH
28228: EMPTY
28229: LIST
28230: IN
28231: IFFALSE 28252
// points := [ 5 , 70 , 20 ] ;
28233: LD_ADDR_VAR 0 9
28237: PUSH
28238: LD_INT 5
28240: PUSH
28241: LD_INT 70
28243: PUSH
28244: LD_INT 20
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: LIST
28251: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28252: LD_VAR 0 6
28256: PPUSH
28257: CALL_OW 264
28261: PUSH
28262: LD_INT 10
28264: PUSH
28265: EMPTY
28266: LIST
28267: IN
28268: IFFALSE 28289
// points := [ 35 , 110 , 70 ] ;
28270: LD_ADDR_VAR 0 9
28274: PUSH
28275: LD_INT 35
28277: PUSH
28278: LD_INT 110
28280: PUSH
28281: LD_INT 70
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: LIST
28288: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28289: LD_VAR 0 6
28293: PPUSH
28294: CALL_OW 265
28298: PUSH
28299: LD_INT 25
28301: EQUAL
28302: IFFALSE 28323
// points := [ 80 , 65 , 100 ] ;
28304: LD_ADDR_VAR 0 9
28308: PUSH
28309: LD_INT 80
28311: PUSH
28312: LD_INT 65
28314: PUSH
28315: LD_INT 100
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: LIST
28322: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28323: LD_VAR 0 6
28327: PPUSH
28328: CALL_OW 263
28332: PUSH
28333: LD_INT 1
28335: EQUAL
28336: IFFALSE 28371
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28338: LD_ADDR_VAR 0 10
28342: PUSH
28343: LD_VAR 0 10
28347: PUSH
28348: LD_VAR 0 6
28352: PPUSH
28353: CALL_OW 311
28357: PPUSH
28358: LD_INT 3
28360: PPUSH
28361: CALL_OW 259
28365: PUSH
28366: LD_INT 4
28368: MUL
28369: MUL
28370: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28371: LD_VAR 0 6
28375: PPUSH
28376: CALL_OW 263
28380: PUSH
28381: LD_INT 2
28383: EQUAL
28384: IFFALSE 28435
// begin j := IsControledBy ( i ) ;
28386: LD_ADDR_VAR 0 7
28390: PUSH
28391: LD_VAR 0 6
28395: PPUSH
28396: CALL_OW 312
28400: ST_TO_ADDR
// if j then
28401: LD_VAR 0 7
28405: IFFALSE 28435
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28407: LD_ADDR_VAR 0 10
28411: PUSH
28412: LD_VAR 0 10
28416: PUSH
28417: LD_VAR 0 7
28421: PPUSH
28422: LD_INT 3
28424: PPUSH
28425: CALL_OW 259
28429: PUSH
28430: LD_INT 3
28432: MUL
28433: MUL
28434: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28435: LD_VAR 0 6
28439: PPUSH
28440: CALL_OW 264
28444: PUSH
28445: LD_INT 5
28447: PUSH
28448: LD_INT 6
28450: PUSH
28451: LD_INT 46
28453: PUSH
28454: LD_INT 44
28456: PUSH
28457: LD_INT 47
28459: PUSH
28460: LD_INT 45
28462: PUSH
28463: LD_INT 28
28465: PUSH
28466: LD_INT 7
28468: PUSH
28469: LD_INT 27
28471: PUSH
28472: LD_INT 29
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: LIST
28479: LIST
28480: LIST
28481: LIST
28482: LIST
28483: LIST
28484: LIST
28485: LIST
28486: IN
28487: PUSH
28488: LD_VAR 0 1
28492: PPUSH
28493: LD_INT 52
28495: PPUSH
28496: CALL_OW 321
28500: PUSH
28501: LD_INT 2
28503: EQUAL
28504: AND
28505: IFFALSE 28522
// bpoints := bpoints * 1.2 ;
28507: LD_ADDR_VAR 0 10
28511: PUSH
28512: LD_VAR 0 10
28516: PUSH
28517: LD_REAL  1.20000000000000E+0000
28520: MUL
28521: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28522: LD_VAR 0 6
28526: PPUSH
28527: CALL_OW 264
28531: PUSH
28532: LD_INT 6
28534: PUSH
28535: LD_INT 46
28537: PUSH
28538: LD_INT 47
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: LIST
28545: IN
28546: IFFALSE 28563
// bpoints := bpoints * 1.2 ;
28548: LD_ADDR_VAR 0 10
28552: PUSH
28553: LD_VAR 0 10
28557: PUSH
28558: LD_REAL  1.20000000000000E+0000
28561: MUL
28562: ST_TO_ADDR
// end ; unit_building :
28563: GO 28577
28565: LD_INT 3
28567: DOUBLE
28568: EQUAL
28569: IFTRUE 28573
28571: GO 28576
28573: POP
// ; end ;
28574: GO 28577
28576: POP
// for j = 1 to 3 do
28577: LD_ADDR_VAR 0 7
28581: PUSH
28582: DOUBLE
28583: LD_INT 1
28585: DEC
28586: ST_TO_ADDR
28587: LD_INT 3
28589: PUSH
28590: FOR_TO
28591: IFFALSE 28644
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28593: LD_ADDR_VAR 0 5
28597: PUSH
28598: LD_VAR 0 5
28602: PPUSH
28603: LD_VAR 0 7
28607: PPUSH
28608: LD_VAR 0 5
28612: PUSH
28613: LD_VAR 0 7
28617: ARRAY
28618: PUSH
28619: LD_VAR 0 9
28623: PUSH
28624: LD_VAR 0 7
28628: ARRAY
28629: PUSH
28630: LD_VAR 0 10
28634: MUL
28635: PLUS
28636: PPUSH
28637: CALL_OW 1
28641: ST_TO_ADDR
28642: GO 28590
28644: POP
28645: POP
// end ;
28646: GO 27125
28648: POP
28649: POP
// result := Replace ( result , 4 , tmp ) ;
28650: LD_ADDR_VAR 0 5
28654: PUSH
28655: LD_VAR 0 5
28659: PPUSH
28660: LD_INT 4
28662: PPUSH
28663: LD_VAR 0 8
28667: PPUSH
28668: CALL_OW 1
28672: ST_TO_ADDR
// end ;
28673: LD_VAR 0 5
28677: RET
// export function DangerAtRange ( unit , range ) ; begin
28678: LD_INT 0
28680: PPUSH
// if not unit then
28681: LD_VAR 0 1
28685: NOT
28686: IFFALSE 28690
// exit ;
28688: GO 28735
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28690: LD_ADDR_VAR 0 3
28694: PUSH
28695: LD_VAR 0 1
28699: PPUSH
28700: CALL_OW 255
28704: PPUSH
28705: LD_VAR 0 1
28709: PPUSH
28710: CALL_OW 250
28714: PPUSH
28715: LD_VAR 0 1
28719: PPUSH
28720: CALL_OW 251
28724: PPUSH
28725: LD_VAR 0 2
28729: PPUSH
28730: CALL 26977 0 4
28734: ST_TO_ADDR
// end ;
28735: LD_VAR 0 3
28739: RET
// export function DangerInArea ( side , area ) ; begin
28740: LD_INT 0
28742: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28743: LD_ADDR_VAR 0 3
28747: PUSH
28748: LD_VAR 0 2
28752: PPUSH
28753: LD_INT 81
28755: PUSH
28756: LD_VAR 0 1
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: PPUSH
28765: CALL_OW 70
28769: ST_TO_ADDR
// end ;
28770: LD_VAR 0 3
28774: RET
// export function IsExtension ( b ) ; begin
28775: LD_INT 0
28777: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28778: LD_ADDR_VAR 0 2
28782: PUSH
28783: LD_VAR 0 1
28787: PUSH
28788: LD_INT 23
28790: PUSH
28791: LD_INT 20
28793: PUSH
28794: LD_INT 22
28796: PUSH
28797: LD_INT 17
28799: PUSH
28800: LD_INT 24
28802: PUSH
28803: LD_INT 21
28805: PUSH
28806: LD_INT 19
28808: PUSH
28809: LD_INT 16
28811: PUSH
28812: LD_INT 25
28814: PUSH
28815: LD_INT 18
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: IN
28830: ST_TO_ADDR
// end ;
28831: LD_VAR 0 2
28835: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
28836: LD_INT 0
28838: PPUSH
28839: PPUSH
28840: PPUSH
// result := [ ] ;
28841: LD_ADDR_VAR 0 4
28845: PUSH
28846: EMPTY
28847: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28848: LD_ADDR_VAR 0 5
28852: PUSH
28853: LD_VAR 0 2
28857: PPUSH
28858: LD_INT 21
28860: PUSH
28861: LD_INT 3
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PPUSH
28868: CALL_OW 70
28872: ST_TO_ADDR
// if not tmp then
28873: LD_VAR 0 5
28877: NOT
28878: IFFALSE 28882
// exit ;
28880: GO 28946
// if checkLink then
28882: LD_VAR 0 3
28886: IFFALSE 28936
// begin for i in tmp do
28888: LD_ADDR_VAR 0 6
28892: PUSH
28893: LD_VAR 0 5
28897: PUSH
28898: FOR_IN
28899: IFFALSE 28934
// if GetBase ( i ) <> base then
28901: LD_VAR 0 6
28905: PPUSH
28906: CALL_OW 274
28910: PUSH
28911: LD_VAR 0 1
28915: NONEQUAL
28916: IFFALSE 28932
// ComLinkToBase ( base , i ) ;
28918: LD_VAR 0 1
28922: PPUSH
28923: LD_VAR 0 6
28927: PPUSH
28928: CALL_OW 169
28932: GO 28898
28934: POP
28935: POP
// end ; result := tmp ;
28936: LD_ADDR_VAR 0 4
28940: PUSH
28941: LD_VAR 0 5
28945: ST_TO_ADDR
// end ;
28946: LD_VAR 0 4
28950: RET
// export function ComComplete ( units , b ) ; var i ; begin
28951: LD_INT 0
28953: PPUSH
28954: PPUSH
// if not units then
28955: LD_VAR 0 1
28959: NOT
28960: IFFALSE 28964
// exit ;
28962: GO 29054
// for i in units do
28964: LD_ADDR_VAR 0 4
28968: PUSH
28969: LD_VAR 0 1
28973: PUSH
28974: FOR_IN
28975: IFFALSE 29052
// if BuildingStatus ( b ) = bs_build then
28977: LD_VAR 0 2
28981: PPUSH
28982: CALL_OW 461
28986: PUSH
28987: LD_INT 1
28989: EQUAL
28990: IFFALSE 29050
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
28992: LD_VAR 0 4
28996: PPUSH
28997: LD_STRING h
28999: PUSH
29000: LD_VAR 0 2
29004: PPUSH
29005: CALL_OW 250
29009: PUSH
29010: LD_VAR 0 2
29014: PPUSH
29015: CALL_OW 251
29019: PUSH
29020: LD_VAR 0 2
29024: PUSH
29025: LD_INT 0
29027: PUSH
29028: LD_INT 0
29030: PUSH
29031: LD_INT 0
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: LIST
29038: LIST
29039: LIST
29040: LIST
29041: LIST
29042: PUSH
29043: EMPTY
29044: LIST
29045: PPUSH
29046: CALL_OW 446
29050: GO 28974
29052: POP
29053: POP
// end ;
29054: LD_VAR 0 3
29058: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29059: LD_INT 0
29061: PPUSH
29062: PPUSH
29063: PPUSH
29064: PPUSH
29065: PPUSH
29066: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
29067: LD_VAR 0 1
29071: NOT
29072: PUSH
29073: LD_VAR 0 1
29077: PPUSH
29078: CALL_OW 263
29082: PUSH
29083: LD_INT 2
29085: NONEQUAL
29086: OR
29087: IFFALSE 29091
// exit ;
29089: GO 29407
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29091: LD_ADDR_VAR 0 6
29095: PUSH
29096: LD_INT 22
29098: PUSH
29099: LD_VAR 0 1
29103: PPUSH
29104: CALL_OW 255
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: LD_INT 2
29115: PUSH
29116: LD_INT 30
29118: PUSH
29119: LD_INT 36
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: PUSH
29126: LD_INT 34
29128: PUSH
29129: LD_INT 31
29131: PUSH
29132: EMPTY
29133: LIST
29134: LIST
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: LIST
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PPUSH
29145: CALL_OW 69
29149: ST_TO_ADDR
// if not tmp then
29150: LD_VAR 0 6
29154: NOT
29155: IFFALSE 29159
// exit ;
29157: GO 29407
// result := [ ] ;
29159: LD_ADDR_VAR 0 2
29163: PUSH
29164: EMPTY
29165: ST_TO_ADDR
// for i in tmp do
29166: LD_ADDR_VAR 0 3
29170: PUSH
29171: LD_VAR 0 6
29175: PUSH
29176: FOR_IN
29177: IFFALSE 29248
// begin t := UnitsInside ( i ) ;
29179: LD_ADDR_VAR 0 4
29183: PUSH
29184: LD_VAR 0 3
29188: PPUSH
29189: CALL_OW 313
29193: ST_TO_ADDR
// if t then
29194: LD_VAR 0 4
29198: IFFALSE 29246
// for j in t do
29200: LD_ADDR_VAR 0 7
29204: PUSH
29205: LD_VAR 0 4
29209: PUSH
29210: FOR_IN
29211: IFFALSE 29244
// result := Replace ( result , result + 1 , j ) ;
29213: LD_ADDR_VAR 0 2
29217: PUSH
29218: LD_VAR 0 2
29222: PPUSH
29223: LD_VAR 0 2
29227: PUSH
29228: LD_INT 1
29230: PLUS
29231: PPUSH
29232: LD_VAR 0 7
29236: PPUSH
29237: CALL_OW 1
29241: ST_TO_ADDR
29242: GO 29210
29244: POP
29245: POP
// end ;
29246: GO 29176
29248: POP
29249: POP
// if not result then
29250: LD_VAR 0 2
29254: NOT
29255: IFFALSE 29259
// exit ;
29257: GO 29407
// mech := result [ 1 ] ;
29259: LD_ADDR_VAR 0 5
29263: PUSH
29264: LD_VAR 0 2
29268: PUSH
29269: LD_INT 1
29271: ARRAY
29272: ST_TO_ADDR
// if result > 1 then
29273: LD_VAR 0 2
29277: PUSH
29278: LD_INT 1
29280: GREATER
29281: IFFALSE 29393
// begin for i = 2 to result do
29283: LD_ADDR_VAR 0 3
29287: PUSH
29288: DOUBLE
29289: LD_INT 2
29291: DEC
29292: ST_TO_ADDR
29293: LD_VAR 0 2
29297: PUSH
29298: FOR_TO
29299: IFFALSE 29391
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29301: LD_ADDR_VAR 0 4
29305: PUSH
29306: LD_VAR 0 2
29310: PUSH
29311: LD_VAR 0 3
29315: ARRAY
29316: PPUSH
29317: LD_INT 3
29319: PPUSH
29320: CALL_OW 259
29324: PUSH
29325: LD_VAR 0 2
29329: PUSH
29330: LD_VAR 0 3
29334: ARRAY
29335: PPUSH
29336: CALL_OW 432
29340: MINUS
29341: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29342: LD_VAR 0 4
29346: PUSH
29347: LD_VAR 0 5
29351: PPUSH
29352: LD_INT 3
29354: PPUSH
29355: CALL_OW 259
29359: PUSH
29360: LD_VAR 0 5
29364: PPUSH
29365: CALL_OW 432
29369: MINUS
29370: GREATEREQUAL
29371: IFFALSE 29389
// mech := result [ i ] ;
29373: LD_ADDR_VAR 0 5
29377: PUSH
29378: LD_VAR 0 2
29382: PUSH
29383: LD_VAR 0 3
29387: ARRAY
29388: ST_TO_ADDR
// end ;
29389: GO 29298
29391: POP
29392: POP
// end ; ComLinkTo ( vehicle , mech ) ;
29393: LD_VAR 0 1
29397: PPUSH
29398: LD_VAR 0 5
29402: PPUSH
29403: CALL_OW 135
// end ;
29407: LD_VAR 0 2
29411: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29412: LD_INT 0
29414: PPUSH
29415: PPUSH
29416: PPUSH
29417: PPUSH
29418: PPUSH
29419: PPUSH
29420: PPUSH
29421: PPUSH
29422: PPUSH
29423: PPUSH
29424: PPUSH
29425: PPUSH
29426: PPUSH
// result := [ ] ;
29427: LD_ADDR_VAR 0 7
29431: PUSH
29432: EMPTY
29433: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29434: LD_VAR 0 1
29438: PPUSH
29439: CALL_OW 266
29443: PUSH
29444: LD_INT 0
29446: PUSH
29447: LD_INT 1
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: IN
29454: NOT
29455: IFFALSE 29459
// exit ;
29457: GO 31093
// if name then
29459: LD_VAR 0 3
29463: IFFALSE 29479
// SetBName ( base_dep , name ) ;
29465: LD_VAR 0 1
29469: PPUSH
29470: LD_VAR 0 3
29474: PPUSH
29475: CALL_OW 500
// base := GetBase ( base_dep ) ;
29479: LD_ADDR_VAR 0 15
29483: PUSH
29484: LD_VAR 0 1
29488: PPUSH
29489: CALL_OW 274
29493: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29494: LD_ADDR_VAR 0 16
29498: PUSH
29499: LD_VAR 0 1
29503: PPUSH
29504: CALL_OW 255
29508: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29509: LD_ADDR_VAR 0 17
29513: PUSH
29514: LD_VAR 0 1
29518: PPUSH
29519: CALL_OW 248
29523: ST_TO_ADDR
// if sources then
29524: LD_VAR 0 5
29528: IFFALSE 29575
// for i = 1 to 3 do
29530: LD_ADDR_VAR 0 8
29534: PUSH
29535: DOUBLE
29536: LD_INT 1
29538: DEC
29539: ST_TO_ADDR
29540: LD_INT 3
29542: PUSH
29543: FOR_TO
29544: IFFALSE 29573
// AddResourceType ( base , i , sources [ i ] ) ;
29546: LD_VAR 0 15
29550: PPUSH
29551: LD_VAR 0 8
29555: PPUSH
29556: LD_VAR 0 5
29560: PUSH
29561: LD_VAR 0 8
29565: ARRAY
29566: PPUSH
29567: CALL_OW 276
29571: GO 29543
29573: POP
29574: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
29575: LD_ADDR_VAR 0 18
29579: PUSH
29580: LD_VAR 0 15
29584: PPUSH
29585: LD_VAR 0 2
29589: PPUSH
29590: LD_INT 1
29592: PPUSH
29593: CALL 28836 0 3
29597: ST_TO_ADDR
// InitHc ;
29598: CALL_OW 19
// InitUc ;
29602: CALL_OW 18
// uc_side := side ;
29606: LD_ADDR_OWVAR 20
29610: PUSH
29611: LD_VAR 0 16
29615: ST_TO_ADDR
// uc_nation := nation ;
29616: LD_ADDR_OWVAR 21
29620: PUSH
29621: LD_VAR 0 17
29625: ST_TO_ADDR
// if buildings then
29626: LD_VAR 0 18
29630: IFFALSE 30952
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29632: LD_ADDR_VAR 0 19
29636: PUSH
29637: LD_VAR 0 18
29641: PPUSH
29642: LD_INT 2
29644: PUSH
29645: LD_INT 30
29647: PUSH
29648: LD_INT 29
29650: PUSH
29651: EMPTY
29652: LIST
29653: LIST
29654: PUSH
29655: LD_INT 30
29657: PUSH
29658: LD_INT 30
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: LIST
29669: PPUSH
29670: CALL_OW 72
29674: ST_TO_ADDR
// if tmp then
29675: LD_VAR 0 19
29679: IFFALSE 29727
// for i in tmp do
29681: LD_ADDR_VAR 0 8
29685: PUSH
29686: LD_VAR 0 19
29690: PUSH
29691: FOR_IN
29692: IFFALSE 29725
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29694: LD_VAR 0 8
29698: PPUSH
29699: CALL_OW 250
29703: PPUSH
29704: LD_VAR 0 8
29708: PPUSH
29709: CALL_OW 251
29713: PPUSH
29714: LD_VAR 0 16
29718: PPUSH
29719: CALL_OW 441
29723: GO 29691
29725: POP
29726: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29727: LD_VAR 0 18
29731: PPUSH
29732: LD_INT 2
29734: PUSH
29735: LD_INT 30
29737: PUSH
29738: LD_INT 32
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: PUSH
29745: LD_INT 30
29747: PUSH
29748: LD_INT 33
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: LIST
29759: PPUSH
29760: CALL_OW 72
29764: IFFALSE 29852
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29766: LD_ADDR_VAR 0 8
29770: PUSH
29771: LD_VAR 0 18
29775: PPUSH
29776: LD_INT 2
29778: PUSH
29779: LD_INT 30
29781: PUSH
29782: LD_INT 32
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: PUSH
29789: LD_INT 30
29791: PUSH
29792: LD_INT 33
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: LIST
29803: PPUSH
29804: CALL_OW 72
29808: PUSH
29809: FOR_IN
29810: IFFALSE 29850
// begin if not GetBWeapon ( i ) then
29812: LD_VAR 0 8
29816: PPUSH
29817: CALL_OW 269
29821: NOT
29822: IFFALSE 29848
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29824: LD_VAR 0 8
29828: PPUSH
29829: LD_VAR 0 8
29833: PPUSH
29834: LD_VAR 0 2
29838: PPUSH
29839: CALL 31098 0 2
29843: PPUSH
29844: CALL_OW 431
// end ;
29848: GO 29809
29850: POP
29851: POP
// end ; for i = 1 to personel do
29852: LD_ADDR_VAR 0 8
29856: PUSH
29857: DOUBLE
29858: LD_INT 1
29860: DEC
29861: ST_TO_ADDR
29862: LD_VAR 0 6
29866: PUSH
29867: FOR_TO
29868: IFFALSE 30932
// begin if i > 4 then
29870: LD_VAR 0 8
29874: PUSH
29875: LD_INT 4
29877: GREATER
29878: IFFALSE 29882
// break ;
29880: GO 30932
// case i of 1 :
29882: LD_VAR 0 8
29886: PUSH
29887: LD_INT 1
29889: DOUBLE
29890: EQUAL
29891: IFTRUE 29895
29893: GO 29975
29895: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29896: LD_ADDR_VAR 0 12
29900: PUSH
29901: LD_VAR 0 18
29905: PPUSH
29906: LD_INT 22
29908: PUSH
29909: LD_VAR 0 16
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 58
29920: PUSH
29921: EMPTY
29922: LIST
29923: PUSH
29924: LD_INT 2
29926: PUSH
29927: LD_INT 30
29929: PUSH
29930: LD_INT 32
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: LD_INT 30
29939: PUSH
29940: LD_INT 4
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 30
29949: PUSH
29950: LD_INT 5
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: LIST
29967: PPUSH
29968: CALL_OW 72
29972: ST_TO_ADDR
29973: GO 30197
29975: LD_INT 2
29977: DOUBLE
29978: EQUAL
29979: IFTRUE 29983
29981: GO 30045
29983: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
29984: LD_ADDR_VAR 0 12
29988: PUSH
29989: LD_VAR 0 18
29993: PPUSH
29994: LD_INT 22
29996: PUSH
29997: LD_VAR 0 16
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 2
30008: PUSH
30009: LD_INT 30
30011: PUSH
30012: LD_INT 0
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: LD_INT 30
30021: PUSH
30022: LD_INT 1
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: LIST
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PPUSH
30038: CALL_OW 72
30042: ST_TO_ADDR
30043: GO 30197
30045: LD_INT 3
30047: DOUBLE
30048: EQUAL
30049: IFTRUE 30053
30051: GO 30115
30053: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30054: LD_ADDR_VAR 0 12
30058: PUSH
30059: LD_VAR 0 18
30063: PPUSH
30064: LD_INT 22
30066: PUSH
30067: LD_VAR 0 16
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: LD_INT 2
30078: PUSH
30079: LD_INT 30
30081: PUSH
30082: LD_INT 2
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PUSH
30089: LD_INT 30
30091: PUSH
30092: LD_INT 3
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: LIST
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PPUSH
30108: CALL_OW 72
30112: ST_TO_ADDR
30113: GO 30197
30115: LD_INT 4
30117: DOUBLE
30118: EQUAL
30119: IFTRUE 30123
30121: GO 30196
30123: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30124: LD_ADDR_VAR 0 12
30128: PUSH
30129: LD_VAR 0 18
30133: PPUSH
30134: LD_INT 22
30136: PUSH
30137: LD_VAR 0 16
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 2
30148: PUSH
30149: LD_INT 30
30151: PUSH
30152: LD_INT 6
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 30
30161: PUSH
30162: LD_INT 7
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PUSH
30169: LD_INT 30
30171: PUSH
30172: LD_INT 8
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: PPUSH
30189: CALL_OW 72
30193: ST_TO_ADDR
30194: GO 30197
30196: POP
// if i = 1 then
30197: LD_VAR 0 8
30201: PUSH
30202: LD_INT 1
30204: EQUAL
30205: IFFALSE 30316
// begin tmp := [ ] ;
30207: LD_ADDR_VAR 0 19
30211: PUSH
30212: EMPTY
30213: ST_TO_ADDR
// for j in f do
30214: LD_ADDR_VAR 0 9
30218: PUSH
30219: LD_VAR 0 12
30223: PUSH
30224: FOR_IN
30225: IFFALSE 30298
// if GetBType ( j ) = b_bunker then
30227: LD_VAR 0 9
30231: PPUSH
30232: CALL_OW 266
30236: PUSH
30237: LD_INT 32
30239: EQUAL
30240: IFFALSE 30267
// tmp := Insert ( tmp , 1 , j ) else
30242: LD_ADDR_VAR 0 19
30246: PUSH
30247: LD_VAR 0 19
30251: PPUSH
30252: LD_INT 1
30254: PPUSH
30255: LD_VAR 0 9
30259: PPUSH
30260: CALL_OW 2
30264: ST_TO_ADDR
30265: GO 30296
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30267: LD_ADDR_VAR 0 19
30271: PUSH
30272: LD_VAR 0 19
30276: PPUSH
30277: LD_VAR 0 19
30281: PUSH
30282: LD_INT 1
30284: PLUS
30285: PPUSH
30286: LD_VAR 0 9
30290: PPUSH
30291: CALL_OW 2
30295: ST_TO_ADDR
30296: GO 30224
30298: POP
30299: POP
// if tmp then
30300: LD_VAR 0 19
30304: IFFALSE 30316
// f := tmp ;
30306: LD_ADDR_VAR 0 12
30310: PUSH
30311: LD_VAR 0 19
30315: ST_TO_ADDR
// end ; x := personel [ i ] ;
30316: LD_ADDR_VAR 0 13
30320: PUSH
30321: LD_VAR 0 6
30325: PUSH
30326: LD_VAR 0 8
30330: ARRAY
30331: ST_TO_ADDR
// if x = - 1 then
30332: LD_VAR 0 13
30336: PUSH
30337: LD_INT 1
30339: NEG
30340: EQUAL
30341: IFFALSE 30550
// begin for j in f do
30343: LD_ADDR_VAR 0 9
30347: PUSH
30348: LD_VAR 0 12
30352: PUSH
30353: FOR_IN
30354: IFFALSE 30546
// repeat InitHc ;
30356: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30360: LD_VAR 0 9
30364: PPUSH
30365: CALL_OW 266
30369: PUSH
30370: LD_INT 5
30372: EQUAL
30373: IFFALSE 30443
// begin if UnitsInside ( j ) < 3 then
30375: LD_VAR 0 9
30379: PPUSH
30380: CALL_OW 313
30384: PUSH
30385: LD_INT 3
30387: LESS
30388: IFFALSE 30424
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30390: LD_INT 0
30392: PPUSH
30393: LD_INT 5
30395: PUSH
30396: LD_INT 8
30398: PUSH
30399: LD_INT 9
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: LIST
30406: PUSH
30407: LD_VAR 0 17
30411: ARRAY
30412: PPUSH
30413: LD_VAR 0 4
30417: PPUSH
30418: CALL_OW 380
30422: GO 30441
// PrepareHuman ( false , i , skill ) ;
30424: LD_INT 0
30426: PPUSH
30427: LD_VAR 0 8
30431: PPUSH
30432: LD_VAR 0 4
30436: PPUSH
30437: CALL_OW 380
// end else
30441: GO 30460
// PrepareHuman ( false , i , skill ) ;
30443: LD_INT 0
30445: PPUSH
30446: LD_VAR 0 8
30450: PPUSH
30451: LD_VAR 0 4
30455: PPUSH
30456: CALL_OW 380
// un := CreateHuman ;
30460: LD_ADDR_VAR 0 14
30464: PUSH
30465: CALL_OW 44
30469: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30470: LD_ADDR_VAR 0 7
30474: PUSH
30475: LD_VAR 0 7
30479: PPUSH
30480: LD_INT 1
30482: PPUSH
30483: LD_VAR 0 14
30487: PPUSH
30488: CALL_OW 2
30492: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30493: LD_VAR 0 14
30497: PPUSH
30498: LD_VAR 0 9
30502: PPUSH
30503: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30507: LD_VAR 0 9
30511: PPUSH
30512: CALL_OW 313
30516: PUSH
30517: LD_INT 6
30519: EQUAL
30520: PUSH
30521: LD_VAR 0 9
30525: PPUSH
30526: CALL_OW 266
30530: PUSH
30531: LD_INT 32
30533: PUSH
30534: LD_INT 31
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: IN
30541: OR
30542: IFFALSE 30356
30544: GO 30353
30546: POP
30547: POP
// end else
30548: GO 30930
// for j = 1 to x do
30550: LD_ADDR_VAR 0 9
30554: PUSH
30555: DOUBLE
30556: LD_INT 1
30558: DEC
30559: ST_TO_ADDR
30560: LD_VAR 0 13
30564: PUSH
30565: FOR_TO
30566: IFFALSE 30928
// begin InitHc ;
30568: CALL_OW 19
// if not f then
30572: LD_VAR 0 12
30576: NOT
30577: IFFALSE 30666
// begin PrepareHuman ( false , i , skill ) ;
30579: LD_INT 0
30581: PPUSH
30582: LD_VAR 0 8
30586: PPUSH
30587: LD_VAR 0 4
30591: PPUSH
30592: CALL_OW 380
// un := CreateHuman ;
30596: LD_ADDR_VAR 0 14
30600: PUSH
30601: CALL_OW 44
30605: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30606: LD_ADDR_VAR 0 7
30610: PUSH
30611: LD_VAR 0 7
30615: PPUSH
30616: LD_INT 1
30618: PPUSH
30619: LD_VAR 0 14
30623: PPUSH
30624: CALL_OW 2
30628: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30629: LD_VAR 0 14
30633: PPUSH
30634: LD_VAR 0 1
30638: PPUSH
30639: CALL_OW 250
30643: PPUSH
30644: LD_VAR 0 1
30648: PPUSH
30649: CALL_OW 251
30653: PPUSH
30654: LD_INT 10
30656: PPUSH
30657: LD_INT 0
30659: PPUSH
30660: CALL_OW 50
// continue ;
30664: GO 30565
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30666: LD_VAR 0 12
30670: PUSH
30671: LD_INT 1
30673: ARRAY
30674: PPUSH
30675: CALL_OW 313
30679: PUSH
30680: LD_VAR 0 12
30684: PUSH
30685: LD_INT 1
30687: ARRAY
30688: PPUSH
30689: CALL_OW 266
30693: PUSH
30694: LD_INT 32
30696: PUSH
30697: LD_INT 31
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: IN
30704: AND
30705: PUSH
30706: LD_VAR 0 12
30710: PUSH
30711: LD_INT 1
30713: ARRAY
30714: PPUSH
30715: CALL_OW 313
30719: PUSH
30720: LD_INT 6
30722: EQUAL
30723: OR
30724: IFFALSE 30744
// f := Delete ( f , 1 ) ;
30726: LD_ADDR_VAR 0 12
30730: PUSH
30731: LD_VAR 0 12
30735: PPUSH
30736: LD_INT 1
30738: PPUSH
30739: CALL_OW 3
30743: ST_TO_ADDR
// if not f then
30744: LD_VAR 0 12
30748: NOT
30749: IFFALSE 30767
// begin x := x + 2 ;
30751: LD_ADDR_VAR 0 13
30755: PUSH
30756: LD_VAR 0 13
30760: PUSH
30761: LD_INT 2
30763: PLUS
30764: ST_TO_ADDR
// continue ;
30765: GO 30565
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30767: LD_VAR 0 12
30771: PUSH
30772: LD_INT 1
30774: ARRAY
30775: PPUSH
30776: CALL_OW 266
30780: PUSH
30781: LD_INT 5
30783: EQUAL
30784: IFFALSE 30858
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30786: LD_VAR 0 12
30790: PUSH
30791: LD_INT 1
30793: ARRAY
30794: PPUSH
30795: CALL_OW 313
30799: PUSH
30800: LD_INT 3
30802: LESS
30803: IFFALSE 30839
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30805: LD_INT 0
30807: PPUSH
30808: LD_INT 5
30810: PUSH
30811: LD_INT 8
30813: PUSH
30814: LD_INT 9
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: LIST
30821: PUSH
30822: LD_VAR 0 17
30826: ARRAY
30827: PPUSH
30828: LD_VAR 0 4
30832: PPUSH
30833: CALL_OW 380
30837: GO 30856
// PrepareHuman ( false , i , skill ) ;
30839: LD_INT 0
30841: PPUSH
30842: LD_VAR 0 8
30846: PPUSH
30847: LD_VAR 0 4
30851: PPUSH
30852: CALL_OW 380
// end else
30856: GO 30875
// PrepareHuman ( false , i , skill ) ;
30858: LD_INT 0
30860: PPUSH
30861: LD_VAR 0 8
30865: PPUSH
30866: LD_VAR 0 4
30870: PPUSH
30871: CALL_OW 380
// un := CreateHuman ;
30875: LD_ADDR_VAR 0 14
30879: PUSH
30880: CALL_OW 44
30884: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30885: LD_ADDR_VAR 0 7
30889: PUSH
30890: LD_VAR 0 7
30894: PPUSH
30895: LD_INT 1
30897: PPUSH
30898: LD_VAR 0 14
30902: PPUSH
30903: CALL_OW 2
30907: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30908: LD_VAR 0 14
30912: PPUSH
30913: LD_VAR 0 12
30917: PUSH
30918: LD_INT 1
30920: ARRAY
30921: PPUSH
30922: CALL_OW 52
// end ;
30926: GO 30565
30928: POP
30929: POP
// end ;
30930: GO 29867
30932: POP
30933: POP
// result := result ^ buildings ;
30934: LD_ADDR_VAR 0 7
30938: PUSH
30939: LD_VAR 0 7
30943: PUSH
30944: LD_VAR 0 18
30948: ADD
30949: ST_TO_ADDR
// end else
30950: GO 31093
// begin for i = 1 to personel do
30952: LD_ADDR_VAR 0 8
30956: PUSH
30957: DOUBLE
30958: LD_INT 1
30960: DEC
30961: ST_TO_ADDR
30962: LD_VAR 0 6
30966: PUSH
30967: FOR_TO
30968: IFFALSE 31091
// begin if i > 4 then
30970: LD_VAR 0 8
30974: PUSH
30975: LD_INT 4
30977: GREATER
30978: IFFALSE 30982
// break ;
30980: GO 31091
// x := personel [ i ] ;
30982: LD_ADDR_VAR 0 13
30986: PUSH
30987: LD_VAR 0 6
30991: PUSH
30992: LD_VAR 0 8
30996: ARRAY
30997: ST_TO_ADDR
// if x = - 1 then
30998: LD_VAR 0 13
31002: PUSH
31003: LD_INT 1
31005: NEG
31006: EQUAL
31007: IFFALSE 31011
// continue ;
31009: GO 30967
// PrepareHuman ( false , i , skill ) ;
31011: LD_INT 0
31013: PPUSH
31014: LD_VAR 0 8
31018: PPUSH
31019: LD_VAR 0 4
31023: PPUSH
31024: CALL_OW 380
// un := CreateHuman ;
31028: LD_ADDR_VAR 0 14
31032: PUSH
31033: CALL_OW 44
31037: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31038: LD_VAR 0 14
31042: PPUSH
31043: LD_VAR 0 1
31047: PPUSH
31048: CALL_OW 250
31052: PPUSH
31053: LD_VAR 0 1
31057: PPUSH
31058: CALL_OW 251
31062: PPUSH
31063: LD_INT 10
31065: PPUSH
31066: LD_INT 0
31068: PPUSH
31069: CALL_OW 50
// result := result ^ un ;
31073: LD_ADDR_VAR 0 7
31077: PUSH
31078: LD_VAR 0 7
31082: PUSH
31083: LD_VAR 0 14
31087: ADD
31088: ST_TO_ADDR
// end ;
31089: GO 30967
31091: POP
31092: POP
// end ; end ;
31093: LD_VAR 0 7
31097: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31098: LD_INT 0
31100: PPUSH
31101: PPUSH
31102: PPUSH
31103: PPUSH
31104: PPUSH
31105: PPUSH
31106: PPUSH
31107: PPUSH
31108: PPUSH
31109: PPUSH
31110: PPUSH
31111: PPUSH
31112: PPUSH
31113: PPUSH
31114: PPUSH
31115: PPUSH
// result := false ;
31116: LD_ADDR_VAR 0 3
31120: PUSH
31121: LD_INT 0
31123: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31124: LD_VAR 0 1
31128: NOT
31129: PUSH
31130: LD_VAR 0 1
31134: PPUSH
31135: CALL_OW 266
31139: PUSH
31140: LD_INT 32
31142: PUSH
31143: LD_INT 33
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: IN
31150: NOT
31151: OR
31152: IFFALSE 31156
// exit ;
31154: GO 32265
// nat := GetNation ( tower ) ;
31156: LD_ADDR_VAR 0 12
31160: PUSH
31161: LD_VAR 0 1
31165: PPUSH
31166: CALL_OW 248
31170: ST_TO_ADDR
// side := GetSide ( tower ) ;
31171: LD_ADDR_VAR 0 16
31175: PUSH
31176: LD_VAR 0 1
31180: PPUSH
31181: CALL_OW 255
31185: ST_TO_ADDR
// x := GetX ( tower ) ;
31186: LD_ADDR_VAR 0 10
31190: PUSH
31191: LD_VAR 0 1
31195: PPUSH
31196: CALL_OW 250
31200: ST_TO_ADDR
// y := GetY ( tower ) ;
31201: LD_ADDR_VAR 0 11
31205: PUSH
31206: LD_VAR 0 1
31210: PPUSH
31211: CALL_OW 251
31215: ST_TO_ADDR
// if not x or not y then
31216: LD_VAR 0 10
31220: NOT
31221: PUSH
31222: LD_VAR 0 11
31226: NOT
31227: OR
31228: IFFALSE 31232
// exit ;
31230: GO 32265
// weapon := 0 ;
31232: LD_ADDR_VAR 0 18
31236: PUSH
31237: LD_INT 0
31239: ST_TO_ADDR
// fac_list := [ ] ;
31240: LD_ADDR_VAR 0 17
31244: PUSH
31245: EMPTY
31246: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
31247: LD_ADDR_VAR 0 6
31251: PUSH
31252: LD_VAR 0 1
31256: PPUSH
31257: CALL_OW 274
31261: PPUSH
31262: LD_VAR 0 2
31266: PPUSH
31267: LD_INT 0
31269: PPUSH
31270: CALL 28836 0 3
31274: PPUSH
31275: LD_INT 30
31277: PUSH
31278: LD_INT 3
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PPUSH
31285: CALL_OW 72
31289: ST_TO_ADDR
// if not factories then
31290: LD_VAR 0 6
31294: NOT
31295: IFFALSE 31299
// exit ;
31297: GO 32265
// for i in factories do
31299: LD_ADDR_VAR 0 8
31303: PUSH
31304: LD_VAR 0 6
31308: PUSH
31309: FOR_IN
31310: IFFALSE 31335
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31312: LD_ADDR_VAR 0 17
31316: PUSH
31317: LD_VAR 0 17
31321: PUSH
31322: LD_VAR 0 8
31326: PPUSH
31327: CALL_OW 478
31331: UNION
31332: ST_TO_ADDR
31333: GO 31309
31335: POP
31336: POP
// if not fac_list then
31337: LD_VAR 0 17
31341: NOT
31342: IFFALSE 31346
// exit ;
31344: GO 32265
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31346: LD_ADDR_VAR 0 5
31350: PUSH
31351: LD_INT 4
31353: PUSH
31354: LD_INT 5
31356: PUSH
31357: LD_INT 9
31359: PUSH
31360: LD_INT 10
31362: PUSH
31363: LD_INT 6
31365: PUSH
31366: LD_INT 7
31368: PUSH
31369: LD_INT 11
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: PUSH
31381: LD_INT 27
31383: PUSH
31384: LD_INT 28
31386: PUSH
31387: LD_INT 26
31389: PUSH
31390: LD_INT 30
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: PUSH
31399: LD_INT 43
31401: PUSH
31402: LD_INT 44
31404: PUSH
31405: LD_INT 46
31407: PUSH
31408: LD_INT 45
31410: PUSH
31411: LD_INT 47
31413: PUSH
31414: LD_INT 49
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: LIST
31429: PUSH
31430: LD_VAR 0 12
31434: ARRAY
31435: ST_TO_ADDR
// list := list isect fac_list ;
31436: LD_ADDR_VAR 0 5
31440: PUSH
31441: LD_VAR 0 5
31445: PUSH
31446: LD_VAR 0 17
31450: ISECT
31451: ST_TO_ADDR
// if not list then
31452: LD_VAR 0 5
31456: NOT
31457: IFFALSE 31461
// exit ;
31459: GO 32265
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31461: LD_VAR 0 12
31465: PUSH
31466: LD_INT 3
31468: EQUAL
31469: PUSH
31470: LD_INT 49
31472: PUSH
31473: LD_VAR 0 5
31477: IN
31478: AND
31479: PUSH
31480: LD_INT 31
31482: PPUSH
31483: LD_VAR 0 16
31487: PPUSH
31488: CALL_OW 321
31492: PUSH
31493: LD_INT 2
31495: EQUAL
31496: AND
31497: IFFALSE 31557
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31499: LD_INT 22
31501: PUSH
31502: LD_VAR 0 16
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: PUSH
31511: LD_INT 35
31513: PUSH
31514: LD_INT 49
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: PUSH
31521: LD_INT 91
31523: PUSH
31524: LD_VAR 0 1
31528: PUSH
31529: LD_INT 10
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: LIST
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: LIST
31541: PPUSH
31542: CALL_OW 69
31546: NOT
31547: IFFALSE 31557
// weapon := ru_time_lapser ;
31549: LD_ADDR_VAR 0 18
31553: PUSH
31554: LD_INT 49
31556: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31557: LD_VAR 0 12
31561: PUSH
31562: LD_INT 1
31564: PUSH
31565: LD_INT 2
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: IN
31572: PUSH
31573: LD_INT 11
31575: PUSH
31576: LD_VAR 0 5
31580: IN
31581: PUSH
31582: LD_INT 30
31584: PUSH
31585: LD_VAR 0 5
31589: IN
31590: OR
31591: AND
31592: PUSH
31593: LD_INT 6
31595: PPUSH
31596: LD_VAR 0 16
31600: PPUSH
31601: CALL_OW 321
31605: PUSH
31606: LD_INT 2
31608: EQUAL
31609: AND
31610: IFFALSE 31775
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31612: LD_INT 22
31614: PUSH
31615: LD_VAR 0 16
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 2
31626: PUSH
31627: LD_INT 35
31629: PUSH
31630: LD_INT 11
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 35
31639: PUSH
31640: LD_INT 30
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 91
31654: PUSH
31655: LD_VAR 0 1
31659: PUSH
31660: LD_INT 18
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: LIST
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: LIST
31672: PPUSH
31673: CALL_OW 69
31677: NOT
31678: PUSH
31679: LD_INT 22
31681: PUSH
31682: LD_VAR 0 16
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PUSH
31691: LD_INT 2
31693: PUSH
31694: LD_INT 30
31696: PUSH
31697: LD_INT 32
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: PUSH
31704: LD_INT 30
31706: PUSH
31707: LD_INT 33
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: LIST
31718: PUSH
31719: LD_INT 91
31721: PUSH
31722: LD_VAR 0 1
31726: PUSH
31727: LD_INT 12
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: LIST
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: LIST
31739: PUSH
31740: EMPTY
31741: LIST
31742: PPUSH
31743: CALL_OW 69
31747: PUSH
31748: LD_INT 2
31750: GREATER
31751: AND
31752: IFFALSE 31775
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31754: LD_ADDR_VAR 0 18
31758: PUSH
31759: LD_INT 11
31761: PUSH
31762: LD_INT 30
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: LD_VAR 0 12
31773: ARRAY
31774: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31775: LD_VAR 0 18
31779: NOT
31780: PUSH
31781: LD_INT 40
31783: PPUSH
31784: LD_VAR 0 16
31788: PPUSH
31789: CALL_OW 321
31793: PUSH
31794: LD_INT 2
31796: EQUAL
31797: AND
31798: PUSH
31799: LD_INT 7
31801: PUSH
31802: LD_VAR 0 5
31806: IN
31807: PUSH
31808: LD_INT 28
31810: PUSH
31811: LD_VAR 0 5
31815: IN
31816: OR
31817: PUSH
31818: LD_INT 45
31820: PUSH
31821: LD_VAR 0 5
31825: IN
31826: OR
31827: AND
31828: IFFALSE 32082
// begin hex := GetHexInfo ( x , y ) ;
31830: LD_ADDR_VAR 0 4
31834: PUSH
31835: LD_VAR 0 10
31839: PPUSH
31840: LD_VAR 0 11
31844: PPUSH
31845: CALL_OW 546
31849: ST_TO_ADDR
// if hex [ 1 ] then
31850: LD_VAR 0 4
31854: PUSH
31855: LD_INT 1
31857: ARRAY
31858: IFFALSE 31862
// exit ;
31860: GO 32265
// height := hex [ 2 ] ;
31862: LD_ADDR_VAR 0 15
31866: PUSH
31867: LD_VAR 0 4
31871: PUSH
31872: LD_INT 2
31874: ARRAY
31875: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31876: LD_ADDR_VAR 0 14
31880: PUSH
31881: LD_INT 0
31883: PUSH
31884: LD_INT 2
31886: PUSH
31887: LD_INT 3
31889: PUSH
31890: LD_INT 5
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: ST_TO_ADDR
// for i in tmp do
31899: LD_ADDR_VAR 0 8
31903: PUSH
31904: LD_VAR 0 14
31908: PUSH
31909: FOR_IN
31910: IFFALSE 32080
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
31912: LD_ADDR_VAR 0 9
31916: PUSH
31917: LD_VAR 0 10
31921: PPUSH
31922: LD_VAR 0 8
31926: PPUSH
31927: LD_INT 5
31929: PPUSH
31930: CALL_OW 272
31934: PUSH
31935: LD_VAR 0 11
31939: PPUSH
31940: LD_VAR 0 8
31944: PPUSH
31945: LD_INT 5
31947: PPUSH
31948: CALL_OW 273
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31957: LD_VAR 0 9
31961: PUSH
31962: LD_INT 1
31964: ARRAY
31965: PPUSH
31966: LD_VAR 0 9
31970: PUSH
31971: LD_INT 2
31973: ARRAY
31974: PPUSH
31975: CALL_OW 488
31979: IFFALSE 32078
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
31981: LD_ADDR_VAR 0 4
31985: PUSH
31986: LD_VAR 0 9
31990: PUSH
31991: LD_INT 1
31993: ARRAY
31994: PPUSH
31995: LD_VAR 0 9
31999: PUSH
32000: LD_INT 2
32002: ARRAY
32003: PPUSH
32004: CALL_OW 546
32008: ST_TO_ADDR
// if hex [ 1 ] then
32009: LD_VAR 0 4
32013: PUSH
32014: LD_INT 1
32016: ARRAY
32017: IFFALSE 32021
// continue ;
32019: GO 31909
// h := hex [ 2 ] ;
32021: LD_ADDR_VAR 0 13
32025: PUSH
32026: LD_VAR 0 4
32030: PUSH
32031: LD_INT 2
32033: ARRAY
32034: ST_TO_ADDR
// if h + 7 < height then
32035: LD_VAR 0 13
32039: PUSH
32040: LD_INT 7
32042: PLUS
32043: PUSH
32044: LD_VAR 0 15
32048: LESS
32049: IFFALSE 32078
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32051: LD_ADDR_VAR 0 18
32055: PUSH
32056: LD_INT 7
32058: PUSH
32059: LD_INT 28
32061: PUSH
32062: LD_INT 45
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: LIST
32069: PUSH
32070: LD_VAR 0 12
32074: ARRAY
32075: ST_TO_ADDR
// break ;
32076: GO 32080
// end ; end ; end ;
32078: GO 31909
32080: POP
32081: POP
// end ; if not weapon then
32082: LD_VAR 0 18
32086: NOT
32087: IFFALSE 32147
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32089: LD_ADDR_VAR 0 5
32093: PUSH
32094: LD_VAR 0 5
32098: PUSH
32099: LD_INT 11
32101: PUSH
32102: LD_INT 30
32104: PUSH
32105: LD_INT 49
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: LIST
32112: DIFF
32113: ST_TO_ADDR
// if not list then
32114: LD_VAR 0 5
32118: NOT
32119: IFFALSE 32123
// exit ;
32121: GO 32265
// weapon := list [ rand ( 1 , list ) ] ;
32123: LD_ADDR_VAR 0 18
32127: PUSH
32128: LD_VAR 0 5
32132: PUSH
32133: LD_INT 1
32135: PPUSH
32136: LD_VAR 0 5
32140: PPUSH
32141: CALL_OW 12
32145: ARRAY
32146: ST_TO_ADDR
// end ; if weapon then
32147: LD_VAR 0 18
32151: IFFALSE 32265
// begin tmp := CostOfWeapon ( weapon ) ;
32153: LD_ADDR_VAR 0 14
32157: PUSH
32158: LD_VAR 0 18
32162: PPUSH
32163: CALL_OW 451
32167: ST_TO_ADDR
// j := GetBase ( tower ) ;
32168: LD_ADDR_VAR 0 9
32172: PUSH
32173: LD_VAR 0 1
32177: PPUSH
32178: CALL_OW 274
32182: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32183: LD_VAR 0 9
32187: PPUSH
32188: LD_INT 1
32190: PPUSH
32191: CALL_OW 275
32195: PUSH
32196: LD_VAR 0 14
32200: PUSH
32201: LD_INT 1
32203: ARRAY
32204: GREATEREQUAL
32205: PUSH
32206: LD_VAR 0 9
32210: PPUSH
32211: LD_INT 2
32213: PPUSH
32214: CALL_OW 275
32218: PUSH
32219: LD_VAR 0 14
32223: PUSH
32224: LD_INT 2
32226: ARRAY
32227: GREATEREQUAL
32228: AND
32229: PUSH
32230: LD_VAR 0 9
32234: PPUSH
32235: LD_INT 3
32237: PPUSH
32238: CALL_OW 275
32242: PUSH
32243: LD_VAR 0 14
32247: PUSH
32248: LD_INT 3
32250: ARRAY
32251: GREATEREQUAL
32252: AND
32253: IFFALSE 32265
// result := weapon ;
32255: LD_ADDR_VAR 0 3
32259: PUSH
32260: LD_VAR 0 18
32264: ST_TO_ADDR
// end ; end ;
32265: LD_VAR 0 3
32269: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32270: LD_INT 0
32272: PPUSH
32273: PPUSH
// result := true ;
32274: LD_ADDR_VAR 0 3
32278: PUSH
32279: LD_INT 1
32281: ST_TO_ADDR
// if array1 = array2 then
32282: LD_VAR 0 1
32286: PUSH
32287: LD_VAR 0 2
32291: EQUAL
32292: IFFALSE 32352
// begin for i = 1 to array1 do
32294: LD_ADDR_VAR 0 4
32298: PUSH
32299: DOUBLE
32300: LD_INT 1
32302: DEC
32303: ST_TO_ADDR
32304: LD_VAR 0 1
32308: PUSH
32309: FOR_TO
32310: IFFALSE 32348
// if array1 [ i ] <> array2 [ i ] then
32312: LD_VAR 0 1
32316: PUSH
32317: LD_VAR 0 4
32321: ARRAY
32322: PUSH
32323: LD_VAR 0 2
32327: PUSH
32328: LD_VAR 0 4
32332: ARRAY
32333: NONEQUAL
32334: IFFALSE 32346
// begin result := false ;
32336: LD_ADDR_VAR 0 3
32340: PUSH
32341: LD_INT 0
32343: ST_TO_ADDR
// break ;
32344: GO 32348
// end ;
32346: GO 32309
32348: POP
32349: POP
// end else
32350: GO 32360
// result := false ;
32352: LD_ADDR_VAR 0 3
32356: PUSH
32357: LD_INT 0
32359: ST_TO_ADDR
// end ;
32360: LD_VAR 0 3
32364: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
32365: LD_INT 0
32367: PPUSH
32368: PPUSH
// if not array1 or not array2 then
32369: LD_VAR 0 1
32373: NOT
32374: PUSH
32375: LD_VAR 0 2
32379: NOT
32380: OR
32381: IFFALSE 32385
// exit ;
32383: GO 32449
// result := true ;
32385: LD_ADDR_VAR 0 3
32389: PUSH
32390: LD_INT 1
32392: ST_TO_ADDR
// for i = 1 to array1 do
32393: LD_ADDR_VAR 0 4
32397: PUSH
32398: DOUBLE
32399: LD_INT 1
32401: DEC
32402: ST_TO_ADDR
32403: LD_VAR 0 1
32407: PUSH
32408: FOR_TO
32409: IFFALSE 32447
// if array1 [ i ] <> array2 [ i ] then
32411: LD_VAR 0 1
32415: PUSH
32416: LD_VAR 0 4
32420: ARRAY
32421: PUSH
32422: LD_VAR 0 2
32426: PUSH
32427: LD_VAR 0 4
32431: ARRAY
32432: NONEQUAL
32433: IFFALSE 32445
// begin result := false ;
32435: LD_ADDR_VAR 0 3
32439: PUSH
32440: LD_INT 0
32442: ST_TO_ADDR
// break ;
32443: GO 32447
// end ;
32445: GO 32408
32447: POP
32448: POP
// end ;
32449: LD_VAR 0 3
32453: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32454: LD_INT 0
32456: PPUSH
32457: PPUSH
32458: PPUSH
// pom := GetBase ( fac ) ;
32459: LD_ADDR_VAR 0 5
32463: PUSH
32464: LD_VAR 0 1
32468: PPUSH
32469: CALL_OW 274
32473: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32474: LD_ADDR_VAR 0 4
32478: PUSH
32479: LD_VAR 0 2
32483: PUSH
32484: LD_INT 1
32486: ARRAY
32487: PPUSH
32488: LD_VAR 0 2
32492: PUSH
32493: LD_INT 2
32495: ARRAY
32496: PPUSH
32497: LD_VAR 0 2
32501: PUSH
32502: LD_INT 3
32504: ARRAY
32505: PPUSH
32506: LD_VAR 0 2
32510: PUSH
32511: LD_INT 4
32513: ARRAY
32514: PPUSH
32515: CALL_OW 449
32519: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32520: LD_ADDR_VAR 0 3
32524: PUSH
32525: LD_VAR 0 5
32529: PPUSH
32530: LD_INT 1
32532: PPUSH
32533: CALL_OW 275
32537: PUSH
32538: LD_VAR 0 4
32542: PUSH
32543: LD_INT 1
32545: ARRAY
32546: GREATEREQUAL
32547: PUSH
32548: LD_VAR 0 5
32552: PPUSH
32553: LD_INT 2
32555: PPUSH
32556: CALL_OW 275
32560: PUSH
32561: LD_VAR 0 4
32565: PUSH
32566: LD_INT 2
32568: ARRAY
32569: GREATEREQUAL
32570: AND
32571: PUSH
32572: LD_VAR 0 5
32576: PPUSH
32577: LD_INT 3
32579: PPUSH
32580: CALL_OW 275
32584: PUSH
32585: LD_VAR 0 4
32589: PUSH
32590: LD_INT 3
32592: ARRAY
32593: GREATEREQUAL
32594: AND
32595: ST_TO_ADDR
// end ;
32596: LD_VAR 0 3
32600: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32601: LD_INT 0
32603: PPUSH
32604: PPUSH
32605: PPUSH
32606: PPUSH
// pom := GetBase ( building ) ;
32607: LD_ADDR_VAR 0 3
32611: PUSH
32612: LD_VAR 0 1
32616: PPUSH
32617: CALL_OW 274
32621: ST_TO_ADDR
// if not pom then
32622: LD_VAR 0 3
32626: NOT
32627: IFFALSE 32631
// exit ;
32629: GO 32801
// btype := GetBType ( building ) ;
32631: LD_ADDR_VAR 0 5
32635: PUSH
32636: LD_VAR 0 1
32640: PPUSH
32641: CALL_OW 266
32645: ST_TO_ADDR
// if btype = b_armoury then
32646: LD_VAR 0 5
32650: PUSH
32651: LD_INT 4
32653: EQUAL
32654: IFFALSE 32664
// btype := b_barracks ;
32656: LD_ADDR_VAR 0 5
32660: PUSH
32661: LD_INT 5
32663: ST_TO_ADDR
// if btype = b_depot then
32664: LD_VAR 0 5
32668: PUSH
32669: LD_INT 0
32671: EQUAL
32672: IFFALSE 32682
// btype := b_warehouse ;
32674: LD_ADDR_VAR 0 5
32678: PUSH
32679: LD_INT 1
32681: ST_TO_ADDR
// if btype = b_workshop then
32682: LD_VAR 0 5
32686: PUSH
32687: LD_INT 2
32689: EQUAL
32690: IFFALSE 32700
// btype := b_factory ;
32692: LD_ADDR_VAR 0 5
32696: PUSH
32697: LD_INT 3
32699: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32700: LD_ADDR_VAR 0 4
32704: PUSH
32705: LD_VAR 0 5
32709: PPUSH
32710: LD_VAR 0 1
32714: PPUSH
32715: CALL_OW 248
32719: PPUSH
32720: CALL_OW 450
32724: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32725: LD_ADDR_VAR 0 2
32729: PUSH
32730: LD_VAR 0 3
32734: PPUSH
32735: LD_INT 1
32737: PPUSH
32738: CALL_OW 275
32742: PUSH
32743: LD_VAR 0 4
32747: PUSH
32748: LD_INT 1
32750: ARRAY
32751: GREATEREQUAL
32752: PUSH
32753: LD_VAR 0 3
32757: PPUSH
32758: LD_INT 2
32760: PPUSH
32761: CALL_OW 275
32765: PUSH
32766: LD_VAR 0 4
32770: PUSH
32771: LD_INT 2
32773: ARRAY
32774: GREATEREQUAL
32775: AND
32776: PUSH
32777: LD_VAR 0 3
32781: PPUSH
32782: LD_INT 3
32784: PPUSH
32785: CALL_OW 275
32789: PUSH
32790: LD_VAR 0 4
32794: PUSH
32795: LD_INT 3
32797: ARRAY
32798: GREATEREQUAL
32799: AND
32800: ST_TO_ADDR
// end ;
32801: LD_VAR 0 2
32805: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32806: LD_INT 0
32808: PPUSH
32809: PPUSH
32810: PPUSH
// pom := GetBase ( building ) ;
32811: LD_ADDR_VAR 0 4
32815: PUSH
32816: LD_VAR 0 1
32820: PPUSH
32821: CALL_OW 274
32825: ST_TO_ADDR
// if not pom then
32826: LD_VAR 0 4
32830: NOT
32831: IFFALSE 32835
// exit ;
32833: GO 32936
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32835: LD_ADDR_VAR 0 5
32839: PUSH
32840: LD_VAR 0 2
32844: PPUSH
32845: LD_VAR 0 1
32849: PPUSH
32850: CALL_OW 248
32854: PPUSH
32855: CALL_OW 450
32859: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32860: LD_ADDR_VAR 0 3
32864: PUSH
32865: LD_VAR 0 4
32869: PPUSH
32870: LD_INT 1
32872: PPUSH
32873: CALL_OW 275
32877: PUSH
32878: LD_VAR 0 5
32882: PUSH
32883: LD_INT 1
32885: ARRAY
32886: GREATEREQUAL
32887: PUSH
32888: LD_VAR 0 4
32892: PPUSH
32893: LD_INT 2
32895: PPUSH
32896: CALL_OW 275
32900: PUSH
32901: LD_VAR 0 5
32905: PUSH
32906: LD_INT 2
32908: ARRAY
32909: GREATEREQUAL
32910: AND
32911: PUSH
32912: LD_VAR 0 4
32916: PPUSH
32917: LD_INT 3
32919: PPUSH
32920: CALL_OW 275
32924: PUSH
32925: LD_VAR 0 5
32929: PUSH
32930: LD_INT 3
32932: ARRAY
32933: GREATEREQUAL
32934: AND
32935: ST_TO_ADDR
// end ;
32936: LD_VAR 0 3
32940: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
32941: LD_INT 0
32943: PPUSH
32944: PPUSH
32945: PPUSH
32946: PPUSH
32947: PPUSH
32948: PPUSH
32949: PPUSH
32950: PPUSH
32951: PPUSH
32952: PPUSH
32953: PPUSH
// result := false ;
32954: LD_ADDR_VAR 0 8
32958: PUSH
32959: LD_INT 0
32961: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
32962: LD_VAR 0 5
32966: NOT
32967: PUSH
32968: LD_VAR 0 1
32972: NOT
32973: OR
32974: PUSH
32975: LD_VAR 0 2
32979: NOT
32980: OR
32981: PUSH
32982: LD_VAR 0 3
32986: NOT
32987: OR
32988: IFFALSE 32992
// exit ;
32990: GO 33806
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
32992: LD_ADDR_VAR 0 14
32996: PUSH
32997: LD_VAR 0 1
33001: PPUSH
33002: LD_VAR 0 2
33006: PPUSH
33007: LD_VAR 0 3
33011: PPUSH
33012: LD_VAR 0 4
33016: PPUSH
33017: LD_VAR 0 5
33021: PUSH
33022: LD_INT 1
33024: ARRAY
33025: PPUSH
33026: CALL_OW 248
33030: PPUSH
33031: LD_INT 0
33033: PPUSH
33034: CALL 35059 0 6
33038: ST_TO_ADDR
// if not hexes then
33039: LD_VAR 0 14
33043: NOT
33044: IFFALSE 33048
// exit ;
33046: GO 33806
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33048: LD_ADDR_VAR 0 17
33052: PUSH
33053: LD_VAR 0 5
33057: PPUSH
33058: LD_INT 22
33060: PUSH
33061: LD_VAR 0 13
33065: PPUSH
33066: CALL_OW 255
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 2
33077: PUSH
33078: LD_INT 30
33080: PUSH
33081: LD_INT 0
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PUSH
33088: LD_INT 30
33090: PUSH
33091: LD_INT 1
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: LIST
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: PPUSH
33107: CALL_OW 72
33111: ST_TO_ADDR
// for i = 1 to hexes do
33112: LD_ADDR_VAR 0 9
33116: PUSH
33117: DOUBLE
33118: LD_INT 1
33120: DEC
33121: ST_TO_ADDR
33122: LD_VAR 0 14
33126: PUSH
33127: FOR_TO
33128: IFFALSE 33804
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33130: LD_ADDR_VAR 0 13
33134: PUSH
33135: LD_VAR 0 14
33139: PUSH
33140: LD_VAR 0 9
33144: ARRAY
33145: PUSH
33146: LD_INT 1
33148: ARRAY
33149: PPUSH
33150: LD_VAR 0 14
33154: PUSH
33155: LD_VAR 0 9
33159: ARRAY
33160: PUSH
33161: LD_INT 2
33163: ARRAY
33164: PPUSH
33165: CALL_OW 428
33169: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33170: LD_VAR 0 14
33174: PUSH
33175: LD_VAR 0 9
33179: ARRAY
33180: PUSH
33181: LD_INT 1
33183: ARRAY
33184: PPUSH
33185: LD_VAR 0 14
33189: PUSH
33190: LD_VAR 0 9
33194: ARRAY
33195: PUSH
33196: LD_INT 2
33198: ARRAY
33199: PPUSH
33200: CALL_OW 351
33204: PUSH
33205: LD_VAR 0 14
33209: PUSH
33210: LD_VAR 0 9
33214: ARRAY
33215: PUSH
33216: LD_INT 1
33218: ARRAY
33219: PPUSH
33220: LD_VAR 0 14
33224: PUSH
33225: LD_VAR 0 9
33229: ARRAY
33230: PUSH
33231: LD_INT 2
33233: ARRAY
33234: PPUSH
33235: CALL_OW 488
33239: NOT
33240: OR
33241: PUSH
33242: LD_VAR 0 13
33246: PPUSH
33247: CALL_OW 247
33251: PUSH
33252: LD_INT 3
33254: EQUAL
33255: OR
33256: IFFALSE 33262
// exit ;
33258: POP
33259: POP
33260: GO 33806
// if not tmp then
33262: LD_VAR 0 13
33266: NOT
33267: IFFALSE 33271
// continue ;
33269: GO 33127
// result := true ;
33271: LD_ADDR_VAR 0 8
33275: PUSH
33276: LD_INT 1
33278: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
33279: LD_VAR 0 6
33283: PUSH
33284: LD_VAR 0 13
33288: PPUSH
33289: CALL_OW 247
33293: PUSH
33294: LD_INT 2
33296: EQUAL
33297: AND
33298: PUSH
33299: LD_VAR 0 13
33303: PPUSH
33304: CALL_OW 263
33308: PUSH
33309: LD_INT 1
33311: EQUAL
33312: AND
33313: IFFALSE 33477
// begin if IsDrivenBy ( tmp ) then
33315: LD_VAR 0 13
33319: PPUSH
33320: CALL_OW 311
33324: IFFALSE 33328
// continue ;
33326: GO 33127
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
33328: LD_VAR 0 6
33332: PPUSH
33333: LD_INT 3
33335: PUSH
33336: LD_INT 60
33338: PUSH
33339: EMPTY
33340: LIST
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PUSH
33346: LD_INT 3
33348: PUSH
33349: LD_INT 55
33351: PUSH
33352: EMPTY
33353: LIST
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PPUSH
33363: CALL_OW 72
33367: IFFALSE 33475
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
33369: LD_ADDR_VAR 0 18
33373: PUSH
33374: LD_VAR 0 6
33378: PPUSH
33379: LD_INT 3
33381: PUSH
33382: LD_INT 60
33384: PUSH
33385: EMPTY
33386: LIST
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: PUSH
33392: LD_INT 3
33394: PUSH
33395: LD_INT 55
33397: PUSH
33398: EMPTY
33399: LIST
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: PPUSH
33409: CALL_OW 72
33413: PUSH
33414: LD_INT 1
33416: ARRAY
33417: ST_TO_ADDR
// if IsInUnit ( driver ) then
33418: LD_VAR 0 18
33422: PPUSH
33423: CALL_OW 310
33427: IFFALSE 33438
// ComExit ( driver ) ;
33429: LD_VAR 0 18
33433: PPUSH
33434: CALL 58860 0 1
// AddComEnterUnit ( driver , tmp ) ;
33438: LD_VAR 0 18
33442: PPUSH
33443: LD_VAR 0 13
33447: PPUSH
33448: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
33452: LD_VAR 0 18
33456: PPUSH
33457: LD_VAR 0 7
33461: PPUSH
33462: CALL_OW 173
// AddComExitVehicle ( driver ) ;
33466: LD_VAR 0 18
33470: PPUSH
33471: CALL_OW 181
// end ; continue ;
33475: GO 33127
// end ; if not cleaners or not tmp in cleaners then
33477: LD_VAR 0 6
33481: NOT
33482: PUSH
33483: LD_VAR 0 13
33487: PUSH
33488: LD_VAR 0 6
33492: IN
33493: NOT
33494: OR
33495: IFFALSE 33802
// begin if dep then
33497: LD_VAR 0 17
33501: IFFALSE 33637
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33503: LD_ADDR_VAR 0 16
33507: PUSH
33508: LD_VAR 0 17
33512: PUSH
33513: LD_INT 1
33515: ARRAY
33516: PPUSH
33517: CALL_OW 250
33521: PPUSH
33522: LD_VAR 0 17
33526: PUSH
33527: LD_INT 1
33529: ARRAY
33530: PPUSH
33531: CALL_OW 254
33535: PPUSH
33536: LD_INT 5
33538: PPUSH
33539: CALL_OW 272
33543: PUSH
33544: LD_VAR 0 17
33548: PUSH
33549: LD_INT 1
33551: ARRAY
33552: PPUSH
33553: CALL_OW 251
33557: PPUSH
33558: LD_VAR 0 17
33562: PUSH
33563: LD_INT 1
33565: ARRAY
33566: PPUSH
33567: CALL_OW 254
33571: PPUSH
33572: LD_INT 5
33574: PPUSH
33575: CALL_OW 273
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33584: LD_VAR 0 16
33588: PUSH
33589: LD_INT 1
33591: ARRAY
33592: PPUSH
33593: LD_VAR 0 16
33597: PUSH
33598: LD_INT 2
33600: ARRAY
33601: PPUSH
33602: CALL_OW 488
33606: IFFALSE 33637
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33608: LD_VAR 0 13
33612: PPUSH
33613: LD_VAR 0 16
33617: PUSH
33618: LD_INT 1
33620: ARRAY
33621: PPUSH
33622: LD_VAR 0 16
33626: PUSH
33627: LD_INT 2
33629: ARRAY
33630: PPUSH
33631: CALL_OW 111
// continue ;
33635: GO 33127
// end ; end ; r := GetDir ( tmp ) ;
33637: LD_ADDR_VAR 0 15
33641: PUSH
33642: LD_VAR 0 13
33646: PPUSH
33647: CALL_OW 254
33651: ST_TO_ADDR
// if r = 5 then
33652: LD_VAR 0 15
33656: PUSH
33657: LD_INT 5
33659: EQUAL
33660: IFFALSE 33670
// r := 0 ;
33662: LD_ADDR_VAR 0 15
33666: PUSH
33667: LD_INT 0
33669: ST_TO_ADDR
// for j = r to 5 do
33670: LD_ADDR_VAR 0 10
33674: PUSH
33675: DOUBLE
33676: LD_VAR 0 15
33680: DEC
33681: ST_TO_ADDR
33682: LD_INT 5
33684: PUSH
33685: FOR_TO
33686: IFFALSE 33800
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33688: LD_ADDR_VAR 0 11
33692: PUSH
33693: LD_VAR 0 13
33697: PPUSH
33698: CALL_OW 250
33702: PPUSH
33703: LD_VAR 0 10
33707: PPUSH
33708: LD_INT 2
33710: PPUSH
33711: CALL_OW 272
33715: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33716: LD_ADDR_VAR 0 12
33720: PUSH
33721: LD_VAR 0 13
33725: PPUSH
33726: CALL_OW 251
33730: PPUSH
33731: LD_VAR 0 10
33735: PPUSH
33736: LD_INT 2
33738: PPUSH
33739: CALL_OW 273
33743: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33744: LD_VAR 0 11
33748: PPUSH
33749: LD_VAR 0 12
33753: PPUSH
33754: CALL_OW 488
33758: PUSH
33759: LD_VAR 0 11
33763: PPUSH
33764: LD_VAR 0 12
33768: PPUSH
33769: CALL_OW 428
33773: NOT
33774: AND
33775: IFFALSE 33798
// begin ComMoveXY ( tmp , _x , _y ) ;
33777: LD_VAR 0 13
33781: PPUSH
33782: LD_VAR 0 11
33786: PPUSH
33787: LD_VAR 0 12
33791: PPUSH
33792: CALL_OW 111
// break ;
33796: GO 33800
// end ; end ;
33798: GO 33685
33800: POP
33801: POP
// end ; end ;
33802: GO 33127
33804: POP
33805: POP
// end ;
33806: LD_VAR 0 8
33810: RET
// export function BuildingTechInvented ( side , btype ) ; begin
33811: LD_INT 0
33813: PPUSH
// result := true ;
33814: LD_ADDR_VAR 0 3
33818: PUSH
33819: LD_INT 1
33821: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
33822: LD_VAR 0 2
33826: PUSH
33827: LD_INT 24
33829: DOUBLE
33830: EQUAL
33831: IFTRUE 33841
33833: LD_INT 33
33835: DOUBLE
33836: EQUAL
33837: IFTRUE 33841
33839: GO 33866
33841: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
33842: LD_ADDR_VAR 0 3
33846: PUSH
33847: LD_INT 32
33849: PPUSH
33850: LD_VAR 0 1
33854: PPUSH
33855: CALL_OW 321
33859: PUSH
33860: LD_INT 2
33862: EQUAL
33863: ST_TO_ADDR
33864: GO 34182
33866: LD_INT 20
33868: DOUBLE
33869: EQUAL
33870: IFTRUE 33874
33872: GO 33899
33874: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
33875: LD_ADDR_VAR 0 3
33879: PUSH
33880: LD_INT 6
33882: PPUSH
33883: LD_VAR 0 1
33887: PPUSH
33888: CALL_OW 321
33892: PUSH
33893: LD_INT 2
33895: EQUAL
33896: ST_TO_ADDR
33897: GO 34182
33899: LD_INT 22
33901: DOUBLE
33902: EQUAL
33903: IFTRUE 33913
33905: LD_INT 36
33907: DOUBLE
33908: EQUAL
33909: IFTRUE 33913
33911: GO 33938
33913: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
33914: LD_ADDR_VAR 0 3
33918: PUSH
33919: LD_INT 15
33921: PPUSH
33922: LD_VAR 0 1
33926: PPUSH
33927: CALL_OW 321
33931: PUSH
33932: LD_INT 2
33934: EQUAL
33935: ST_TO_ADDR
33936: GO 34182
33938: LD_INT 30
33940: DOUBLE
33941: EQUAL
33942: IFTRUE 33946
33944: GO 33971
33946: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
33947: LD_ADDR_VAR 0 3
33951: PUSH
33952: LD_INT 20
33954: PPUSH
33955: LD_VAR 0 1
33959: PPUSH
33960: CALL_OW 321
33964: PUSH
33965: LD_INT 2
33967: EQUAL
33968: ST_TO_ADDR
33969: GO 34182
33971: LD_INT 28
33973: DOUBLE
33974: EQUAL
33975: IFTRUE 33985
33977: LD_INT 21
33979: DOUBLE
33980: EQUAL
33981: IFTRUE 33985
33983: GO 34010
33985: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
33986: LD_ADDR_VAR 0 3
33990: PUSH
33991: LD_INT 21
33993: PPUSH
33994: LD_VAR 0 1
33998: PPUSH
33999: CALL_OW 321
34003: PUSH
34004: LD_INT 2
34006: EQUAL
34007: ST_TO_ADDR
34008: GO 34182
34010: LD_INT 16
34012: DOUBLE
34013: EQUAL
34014: IFTRUE 34018
34016: GO 34043
34018: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
34019: LD_ADDR_VAR 0 3
34023: PUSH
34024: LD_INT 84
34026: PPUSH
34027: LD_VAR 0 1
34031: PPUSH
34032: CALL_OW 321
34036: PUSH
34037: LD_INT 2
34039: EQUAL
34040: ST_TO_ADDR
34041: GO 34182
34043: LD_INT 19
34045: DOUBLE
34046: EQUAL
34047: IFTRUE 34057
34049: LD_INT 23
34051: DOUBLE
34052: EQUAL
34053: IFTRUE 34057
34055: GO 34082
34057: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
34058: LD_ADDR_VAR 0 3
34062: PUSH
34063: LD_INT 83
34065: PPUSH
34066: LD_VAR 0 1
34070: PPUSH
34071: CALL_OW 321
34075: PUSH
34076: LD_INT 2
34078: EQUAL
34079: ST_TO_ADDR
34080: GO 34182
34082: LD_INT 17
34084: DOUBLE
34085: EQUAL
34086: IFTRUE 34090
34088: GO 34115
34090: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
34091: LD_ADDR_VAR 0 3
34095: PUSH
34096: LD_INT 39
34098: PPUSH
34099: LD_VAR 0 1
34103: PPUSH
34104: CALL_OW 321
34108: PUSH
34109: LD_INT 2
34111: EQUAL
34112: ST_TO_ADDR
34113: GO 34182
34115: LD_INT 18
34117: DOUBLE
34118: EQUAL
34119: IFTRUE 34123
34121: GO 34148
34123: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
34124: LD_ADDR_VAR 0 3
34128: PUSH
34129: LD_INT 40
34131: PPUSH
34132: LD_VAR 0 1
34136: PPUSH
34137: CALL_OW 321
34141: PUSH
34142: LD_INT 2
34144: EQUAL
34145: ST_TO_ADDR
34146: GO 34182
34148: LD_INT 27
34150: DOUBLE
34151: EQUAL
34152: IFTRUE 34156
34154: GO 34181
34156: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
34157: LD_ADDR_VAR 0 3
34161: PUSH
34162: LD_INT 35
34164: PPUSH
34165: LD_VAR 0 1
34169: PPUSH
34170: CALL_OW 321
34174: PUSH
34175: LD_INT 2
34177: EQUAL
34178: ST_TO_ADDR
34179: GO 34182
34181: POP
// end ;
34182: LD_VAR 0 3
34186: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
34187: LD_INT 0
34189: PPUSH
34190: PPUSH
34191: PPUSH
34192: PPUSH
34193: PPUSH
34194: PPUSH
34195: PPUSH
34196: PPUSH
34197: PPUSH
34198: PPUSH
34199: PPUSH
// result := false ;
34200: LD_ADDR_VAR 0 6
34204: PUSH
34205: LD_INT 0
34207: ST_TO_ADDR
// if btype = b_depot then
34208: LD_VAR 0 2
34212: PUSH
34213: LD_INT 0
34215: EQUAL
34216: IFFALSE 34228
// begin result := true ;
34218: LD_ADDR_VAR 0 6
34222: PUSH
34223: LD_INT 1
34225: ST_TO_ADDR
// exit ;
34226: GO 35054
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34228: LD_VAR 0 1
34232: NOT
34233: PUSH
34234: LD_VAR 0 1
34238: PPUSH
34239: CALL_OW 266
34243: PUSH
34244: LD_INT 0
34246: PUSH
34247: LD_INT 1
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: IN
34254: NOT
34255: OR
34256: PUSH
34257: LD_VAR 0 2
34261: NOT
34262: OR
34263: PUSH
34264: LD_VAR 0 5
34268: PUSH
34269: LD_INT 0
34271: PUSH
34272: LD_INT 1
34274: PUSH
34275: LD_INT 2
34277: PUSH
34278: LD_INT 3
34280: PUSH
34281: LD_INT 4
34283: PUSH
34284: LD_INT 5
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: IN
34295: NOT
34296: OR
34297: PUSH
34298: LD_VAR 0 3
34302: PPUSH
34303: LD_VAR 0 4
34307: PPUSH
34308: CALL_OW 488
34312: NOT
34313: OR
34314: IFFALSE 34318
// exit ;
34316: GO 35054
// side := GetSide ( depot ) ;
34318: LD_ADDR_VAR 0 9
34322: PUSH
34323: LD_VAR 0 1
34327: PPUSH
34328: CALL_OW 255
34332: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
34333: LD_VAR 0 9
34337: PPUSH
34338: LD_VAR 0 2
34342: PPUSH
34343: CALL 33811 0 2
34347: NOT
34348: IFFALSE 34352
// exit ;
34350: GO 35054
// pom := GetBase ( depot ) ;
34352: LD_ADDR_VAR 0 10
34356: PUSH
34357: LD_VAR 0 1
34361: PPUSH
34362: CALL_OW 274
34366: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34367: LD_ADDR_VAR 0 11
34371: PUSH
34372: LD_VAR 0 2
34376: PPUSH
34377: LD_VAR 0 1
34381: PPUSH
34382: CALL_OW 248
34386: PPUSH
34387: CALL_OW 450
34391: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34392: LD_VAR 0 10
34396: PPUSH
34397: LD_INT 1
34399: PPUSH
34400: CALL_OW 275
34404: PUSH
34405: LD_VAR 0 11
34409: PUSH
34410: LD_INT 1
34412: ARRAY
34413: GREATEREQUAL
34414: PUSH
34415: LD_VAR 0 10
34419: PPUSH
34420: LD_INT 2
34422: PPUSH
34423: CALL_OW 275
34427: PUSH
34428: LD_VAR 0 11
34432: PUSH
34433: LD_INT 2
34435: ARRAY
34436: GREATEREQUAL
34437: AND
34438: PUSH
34439: LD_VAR 0 10
34443: PPUSH
34444: LD_INT 3
34446: PPUSH
34447: CALL_OW 275
34451: PUSH
34452: LD_VAR 0 11
34456: PUSH
34457: LD_INT 3
34459: ARRAY
34460: GREATEREQUAL
34461: AND
34462: NOT
34463: IFFALSE 34467
// exit ;
34465: GO 35054
// if GetBType ( depot ) = b_depot then
34467: LD_VAR 0 1
34471: PPUSH
34472: CALL_OW 266
34476: PUSH
34477: LD_INT 0
34479: EQUAL
34480: IFFALSE 34492
// dist := 28 else
34482: LD_ADDR_VAR 0 14
34486: PUSH
34487: LD_INT 28
34489: ST_TO_ADDR
34490: GO 34500
// dist := 36 ;
34492: LD_ADDR_VAR 0 14
34496: PUSH
34497: LD_INT 36
34499: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34500: LD_VAR 0 1
34504: PPUSH
34505: LD_VAR 0 3
34509: PPUSH
34510: LD_VAR 0 4
34514: PPUSH
34515: CALL_OW 297
34519: PUSH
34520: LD_VAR 0 14
34524: GREATER
34525: IFFALSE 34529
// exit ;
34527: GO 35054
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34529: LD_ADDR_VAR 0 12
34533: PUSH
34534: LD_VAR 0 2
34538: PPUSH
34539: LD_VAR 0 3
34543: PPUSH
34544: LD_VAR 0 4
34548: PPUSH
34549: LD_VAR 0 5
34553: PPUSH
34554: LD_VAR 0 1
34558: PPUSH
34559: CALL_OW 248
34563: PPUSH
34564: LD_INT 0
34566: PPUSH
34567: CALL 35059 0 6
34571: ST_TO_ADDR
// if not hexes then
34572: LD_VAR 0 12
34576: NOT
34577: IFFALSE 34581
// exit ;
34579: GO 35054
// hex := GetHexInfo ( x , y ) ;
34581: LD_ADDR_VAR 0 15
34585: PUSH
34586: LD_VAR 0 3
34590: PPUSH
34591: LD_VAR 0 4
34595: PPUSH
34596: CALL_OW 546
34600: ST_TO_ADDR
// if hex [ 1 ] then
34601: LD_VAR 0 15
34605: PUSH
34606: LD_INT 1
34608: ARRAY
34609: IFFALSE 34613
// exit ;
34611: GO 35054
// height := hex [ 2 ] ;
34613: LD_ADDR_VAR 0 13
34617: PUSH
34618: LD_VAR 0 15
34622: PUSH
34623: LD_INT 2
34625: ARRAY
34626: ST_TO_ADDR
// for i = 1 to hexes do
34627: LD_ADDR_VAR 0 7
34631: PUSH
34632: DOUBLE
34633: LD_INT 1
34635: DEC
34636: ST_TO_ADDR
34637: LD_VAR 0 12
34641: PUSH
34642: FOR_TO
34643: IFFALSE 34973
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34645: LD_VAR 0 12
34649: PUSH
34650: LD_VAR 0 7
34654: ARRAY
34655: PUSH
34656: LD_INT 1
34658: ARRAY
34659: PPUSH
34660: LD_VAR 0 12
34664: PUSH
34665: LD_VAR 0 7
34669: ARRAY
34670: PUSH
34671: LD_INT 2
34673: ARRAY
34674: PPUSH
34675: CALL_OW 488
34679: NOT
34680: PUSH
34681: LD_VAR 0 12
34685: PUSH
34686: LD_VAR 0 7
34690: ARRAY
34691: PUSH
34692: LD_INT 1
34694: ARRAY
34695: PPUSH
34696: LD_VAR 0 12
34700: PUSH
34701: LD_VAR 0 7
34705: ARRAY
34706: PUSH
34707: LD_INT 2
34709: ARRAY
34710: PPUSH
34711: CALL_OW 428
34715: PUSH
34716: LD_INT 0
34718: GREATER
34719: OR
34720: PUSH
34721: LD_VAR 0 12
34725: PUSH
34726: LD_VAR 0 7
34730: ARRAY
34731: PUSH
34732: LD_INT 1
34734: ARRAY
34735: PPUSH
34736: LD_VAR 0 12
34740: PUSH
34741: LD_VAR 0 7
34745: ARRAY
34746: PUSH
34747: LD_INT 2
34749: ARRAY
34750: PPUSH
34751: CALL_OW 351
34755: OR
34756: IFFALSE 34762
// exit ;
34758: POP
34759: POP
34760: GO 35054
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34762: LD_ADDR_VAR 0 8
34766: PUSH
34767: LD_VAR 0 12
34771: PUSH
34772: LD_VAR 0 7
34776: ARRAY
34777: PUSH
34778: LD_INT 1
34780: ARRAY
34781: PPUSH
34782: LD_VAR 0 12
34786: PUSH
34787: LD_VAR 0 7
34791: ARRAY
34792: PUSH
34793: LD_INT 2
34795: ARRAY
34796: PPUSH
34797: CALL_OW 546
34801: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34802: LD_VAR 0 8
34806: PUSH
34807: LD_INT 1
34809: ARRAY
34810: PUSH
34811: LD_VAR 0 8
34815: PUSH
34816: LD_INT 2
34818: ARRAY
34819: PUSH
34820: LD_VAR 0 13
34824: PUSH
34825: LD_INT 2
34827: PLUS
34828: GREATER
34829: OR
34830: PUSH
34831: LD_VAR 0 8
34835: PUSH
34836: LD_INT 2
34838: ARRAY
34839: PUSH
34840: LD_VAR 0 13
34844: PUSH
34845: LD_INT 2
34847: MINUS
34848: LESS
34849: OR
34850: PUSH
34851: LD_VAR 0 8
34855: PUSH
34856: LD_INT 3
34858: ARRAY
34859: PUSH
34860: LD_INT 0
34862: PUSH
34863: LD_INT 8
34865: PUSH
34866: LD_INT 9
34868: PUSH
34869: LD_INT 10
34871: PUSH
34872: LD_INT 11
34874: PUSH
34875: LD_INT 12
34877: PUSH
34878: LD_INT 13
34880: PUSH
34881: LD_INT 16
34883: PUSH
34884: LD_INT 17
34886: PUSH
34887: LD_INT 18
34889: PUSH
34890: LD_INT 19
34892: PUSH
34893: LD_INT 20
34895: PUSH
34896: LD_INT 21
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: IN
34914: NOT
34915: OR
34916: PUSH
34917: LD_VAR 0 8
34921: PUSH
34922: LD_INT 5
34924: ARRAY
34925: NOT
34926: OR
34927: PUSH
34928: LD_VAR 0 8
34932: PUSH
34933: LD_INT 6
34935: ARRAY
34936: PUSH
34937: LD_INT 1
34939: PUSH
34940: LD_INT 2
34942: PUSH
34943: LD_INT 7
34945: PUSH
34946: LD_INT 9
34948: PUSH
34949: LD_INT 10
34951: PUSH
34952: LD_INT 11
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: IN
34963: NOT
34964: OR
34965: IFFALSE 34971
// exit ;
34967: POP
34968: POP
34969: GO 35054
// end ;
34971: GO 34642
34973: POP
34974: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34975: LD_VAR 0 9
34979: PPUSH
34980: LD_VAR 0 3
34984: PPUSH
34985: LD_VAR 0 4
34989: PPUSH
34990: LD_INT 20
34992: PPUSH
34993: CALL 26977 0 4
34997: PUSH
34998: LD_INT 4
35000: ARRAY
35001: IFFALSE 35005
// exit ;
35003: GO 35054
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35005: LD_VAR 0 2
35009: PUSH
35010: LD_INT 29
35012: PUSH
35013: LD_INT 30
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: IN
35020: PUSH
35021: LD_VAR 0 3
35025: PPUSH
35026: LD_VAR 0 4
35030: PPUSH
35031: LD_VAR 0 9
35035: PPUSH
35036: CALL_OW 440
35040: NOT
35041: AND
35042: IFFALSE 35046
// exit ;
35044: GO 35054
// result := true ;
35046: LD_ADDR_VAR 0 6
35050: PUSH
35051: LD_INT 1
35053: ST_TO_ADDR
// end ;
35054: LD_VAR 0 6
35058: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
35059: LD_INT 0
35061: PPUSH
35062: PPUSH
35063: PPUSH
35064: PPUSH
35065: PPUSH
35066: PPUSH
35067: PPUSH
35068: PPUSH
35069: PPUSH
35070: PPUSH
35071: PPUSH
35072: PPUSH
35073: PPUSH
35074: PPUSH
35075: PPUSH
35076: PPUSH
35077: PPUSH
35078: PPUSH
35079: PPUSH
35080: PPUSH
35081: PPUSH
35082: PPUSH
35083: PPUSH
35084: PPUSH
35085: PPUSH
35086: PPUSH
35087: PPUSH
35088: PPUSH
35089: PPUSH
35090: PPUSH
35091: PPUSH
35092: PPUSH
35093: PPUSH
35094: PPUSH
35095: PPUSH
35096: PPUSH
35097: PPUSH
35098: PPUSH
35099: PPUSH
35100: PPUSH
35101: PPUSH
35102: PPUSH
35103: PPUSH
35104: PPUSH
35105: PPUSH
35106: PPUSH
35107: PPUSH
35108: PPUSH
35109: PPUSH
35110: PPUSH
35111: PPUSH
35112: PPUSH
35113: PPUSH
35114: PPUSH
35115: PPUSH
35116: PPUSH
35117: PPUSH
35118: PPUSH
// result = [ ] ;
35119: LD_ADDR_VAR 0 7
35123: PUSH
35124: EMPTY
35125: ST_TO_ADDR
// temp_list = [ ] ;
35126: LD_ADDR_VAR 0 9
35130: PUSH
35131: EMPTY
35132: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35133: LD_VAR 0 4
35137: PUSH
35138: LD_INT 0
35140: PUSH
35141: LD_INT 1
35143: PUSH
35144: LD_INT 2
35146: PUSH
35147: LD_INT 3
35149: PUSH
35150: LD_INT 4
35152: PUSH
35153: LD_INT 5
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: IN
35164: NOT
35165: PUSH
35166: LD_VAR 0 1
35170: PUSH
35171: LD_INT 0
35173: PUSH
35174: LD_INT 1
35176: PUSH
35177: EMPTY
35178: LIST
35179: LIST
35180: IN
35181: PUSH
35182: LD_VAR 0 5
35186: PUSH
35187: LD_INT 1
35189: PUSH
35190: LD_INT 2
35192: PUSH
35193: LD_INT 3
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: LIST
35200: IN
35201: NOT
35202: AND
35203: OR
35204: IFFALSE 35208
// exit ;
35206: GO 53599
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35208: LD_VAR 0 1
35212: PUSH
35213: LD_INT 6
35215: PUSH
35216: LD_INT 7
35218: PUSH
35219: LD_INT 8
35221: PUSH
35222: LD_INT 13
35224: PUSH
35225: LD_INT 12
35227: PUSH
35228: LD_INT 15
35230: PUSH
35231: LD_INT 11
35233: PUSH
35234: LD_INT 14
35236: PUSH
35237: LD_INT 10
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: IN
35251: IFFALSE 35261
// btype = b_lab ;
35253: LD_ADDR_VAR 0 1
35257: PUSH
35258: LD_INT 6
35260: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35261: LD_VAR 0 6
35265: PUSH
35266: LD_INT 0
35268: PUSH
35269: LD_INT 1
35271: PUSH
35272: LD_INT 2
35274: PUSH
35275: EMPTY
35276: LIST
35277: LIST
35278: LIST
35279: IN
35280: NOT
35281: PUSH
35282: LD_VAR 0 1
35286: PUSH
35287: LD_INT 0
35289: PUSH
35290: LD_INT 1
35292: PUSH
35293: LD_INT 2
35295: PUSH
35296: LD_INT 3
35298: PUSH
35299: LD_INT 6
35301: PUSH
35302: LD_INT 36
35304: PUSH
35305: LD_INT 4
35307: PUSH
35308: LD_INT 5
35310: PUSH
35311: LD_INT 31
35313: PUSH
35314: LD_INT 32
35316: PUSH
35317: LD_INT 33
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: IN
35333: NOT
35334: PUSH
35335: LD_VAR 0 6
35339: PUSH
35340: LD_INT 1
35342: EQUAL
35343: AND
35344: OR
35345: PUSH
35346: LD_VAR 0 1
35350: PUSH
35351: LD_INT 2
35353: PUSH
35354: LD_INT 3
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: IN
35361: NOT
35362: PUSH
35363: LD_VAR 0 6
35367: PUSH
35368: LD_INT 2
35370: EQUAL
35371: AND
35372: OR
35373: IFFALSE 35383
// mode = 0 ;
35375: LD_ADDR_VAR 0 6
35379: PUSH
35380: LD_INT 0
35382: ST_TO_ADDR
// case mode of 0 :
35383: LD_VAR 0 6
35387: PUSH
35388: LD_INT 0
35390: DOUBLE
35391: EQUAL
35392: IFTRUE 35396
35394: GO 46849
35396: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35397: LD_ADDR_VAR 0 11
35401: PUSH
35402: LD_INT 0
35404: PUSH
35405: LD_INT 0
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: LD_INT 0
35414: PUSH
35415: LD_INT 1
35417: NEG
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: PUSH
35423: LD_INT 1
35425: PUSH
35426: LD_INT 0
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: LD_INT 1
35435: PUSH
35436: LD_INT 1
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: PUSH
35443: LD_INT 0
35445: PUSH
35446: LD_INT 1
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PUSH
35453: LD_INT 1
35455: NEG
35456: PUSH
35457: LD_INT 0
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: PUSH
35464: LD_INT 1
35466: NEG
35467: PUSH
35468: LD_INT 1
35470: NEG
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: PUSH
35476: LD_INT 1
35478: NEG
35479: PUSH
35480: LD_INT 2
35482: NEG
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: PUSH
35488: LD_INT 0
35490: PUSH
35491: LD_INT 2
35493: NEG
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 1
35501: PUSH
35502: LD_INT 1
35504: NEG
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 1
35512: PUSH
35513: LD_INT 2
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 0
35522: PUSH
35523: LD_INT 2
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: LD_INT 1
35532: NEG
35533: PUSH
35534: LD_INT 1
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PUSH
35541: LD_INT 1
35543: PUSH
35544: LD_INT 3
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: LD_INT 0
35553: PUSH
35554: LD_INT 3
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: LD_INT 1
35563: NEG
35564: PUSH
35565: LD_INT 2
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35590: LD_ADDR_VAR 0 12
35594: PUSH
35595: LD_INT 0
35597: PUSH
35598: LD_INT 0
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: PUSH
35605: LD_INT 0
35607: PUSH
35608: LD_INT 1
35610: NEG
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: LD_INT 1
35618: PUSH
35619: LD_INT 0
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: PUSH
35626: LD_INT 1
35628: PUSH
35629: LD_INT 1
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: PUSH
35636: LD_INT 0
35638: PUSH
35639: LD_INT 1
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_INT 1
35648: NEG
35649: PUSH
35650: LD_INT 0
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: LD_INT 1
35659: NEG
35660: PUSH
35661: LD_INT 1
35663: NEG
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: LD_INT 1
35671: PUSH
35672: LD_INT 1
35674: NEG
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: PUSH
35680: LD_INT 2
35682: PUSH
35683: LD_INT 0
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: LD_INT 2
35692: PUSH
35693: LD_INT 1
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: PUSH
35700: LD_INT 1
35702: NEG
35703: PUSH
35704: LD_INT 1
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: PUSH
35711: LD_INT 2
35713: NEG
35714: PUSH
35715: LD_INT 0
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: LD_INT 2
35724: NEG
35725: PUSH
35726: LD_INT 1
35728: NEG
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 2
35736: NEG
35737: PUSH
35738: LD_INT 1
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 3
35747: NEG
35748: PUSH
35749: LD_INT 0
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: PUSH
35756: LD_INT 3
35758: NEG
35759: PUSH
35760: LD_INT 1
35762: NEG
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: LIST
35772: LIST
35773: LIST
35774: LIST
35775: LIST
35776: LIST
35777: LIST
35778: LIST
35779: LIST
35780: LIST
35781: LIST
35782: LIST
35783: LIST
35784: LIST
35785: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35786: LD_ADDR_VAR 0 13
35790: PUSH
35791: LD_INT 0
35793: PUSH
35794: LD_INT 0
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PUSH
35801: LD_INT 0
35803: PUSH
35804: LD_INT 1
35806: NEG
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: PUSH
35812: LD_INT 1
35814: PUSH
35815: LD_INT 0
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PUSH
35822: LD_INT 1
35824: PUSH
35825: LD_INT 1
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: PUSH
35832: LD_INT 0
35834: PUSH
35835: LD_INT 1
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: PUSH
35842: LD_INT 1
35844: NEG
35845: PUSH
35846: LD_INT 0
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: PUSH
35853: LD_INT 1
35855: NEG
35856: PUSH
35857: LD_INT 1
35859: NEG
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: PUSH
35865: LD_INT 1
35867: NEG
35868: PUSH
35869: LD_INT 2
35871: NEG
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PUSH
35877: LD_INT 2
35879: PUSH
35880: LD_INT 1
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: LD_INT 2
35889: PUSH
35890: LD_INT 2
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 1
35899: PUSH
35900: LD_INT 2
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PUSH
35907: LD_INT 2
35909: NEG
35910: PUSH
35911: LD_INT 1
35913: NEG
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: LD_INT 2
35921: NEG
35922: PUSH
35923: LD_INT 2
35925: NEG
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: PUSH
35931: LD_INT 2
35933: NEG
35934: PUSH
35935: LD_INT 3
35937: NEG
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: PUSH
35943: LD_INT 3
35945: NEG
35946: PUSH
35947: LD_INT 2
35949: NEG
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: PUSH
35955: LD_INT 3
35957: NEG
35958: PUSH
35959: LD_INT 3
35961: NEG
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: LIST
35971: LIST
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35985: LD_ADDR_VAR 0 14
35989: PUSH
35990: LD_INT 0
35992: PUSH
35993: LD_INT 0
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 0
36002: PUSH
36003: LD_INT 1
36005: NEG
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 1
36013: PUSH
36014: LD_INT 0
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: LD_INT 1
36023: PUSH
36024: LD_INT 1
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 0
36033: PUSH
36034: LD_INT 1
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: LD_INT 1
36043: NEG
36044: PUSH
36045: LD_INT 0
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: LD_INT 1
36054: NEG
36055: PUSH
36056: LD_INT 1
36058: NEG
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: PUSH
36064: LD_INT 1
36066: NEG
36067: PUSH
36068: LD_INT 2
36070: NEG
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: LD_INT 0
36078: PUSH
36079: LD_INT 2
36081: NEG
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 1
36089: PUSH
36090: LD_INT 1
36092: NEG
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: PUSH
36098: LD_INT 1
36100: PUSH
36101: LD_INT 2
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: LD_INT 0
36110: PUSH
36111: LD_INT 2
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 1
36120: NEG
36121: PUSH
36122: LD_INT 1
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 1
36131: NEG
36132: PUSH
36133: LD_INT 3
36135: NEG
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: LD_INT 0
36143: PUSH
36144: LD_INT 3
36146: NEG
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 1
36154: PUSH
36155: LD_INT 2
36157: NEG
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: LIST
36167: LIST
36168: LIST
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36181: LD_ADDR_VAR 0 15
36185: PUSH
36186: LD_INT 0
36188: PUSH
36189: LD_INT 0
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 0
36198: PUSH
36199: LD_INT 1
36201: NEG
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: PUSH
36207: LD_INT 1
36209: PUSH
36210: LD_INT 0
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: PUSH
36217: LD_INT 1
36219: PUSH
36220: LD_INT 1
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: LD_INT 0
36229: PUSH
36230: LD_INT 1
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: PUSH
36237: LD_INT 1
36239: NEG
36240: PUSH
36241: LD_INT 0
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PUSH
36248: LD_INT 1
36250: NEG
36251: PUSH
36252: LD_INT 1
36254: NEG
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 1
36262: PUSH
36263: LD_INT 1
36265: NEG
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: LD_INT 2
36273: PUSH
36274: LD_INT 0
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: PUSH
36281: LD_INT 2
36283: PUSH
36284: LD_INT 1
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: PUSH
36291: LD_INT 1
36293: NEG
36294: PUSH
36295: LD_INT 1
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: PUSH
36302: LD_INT 2
36304: NEG
36305: PUSH
36306: LD_INT 0
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: PUSH
36313: LD_INT 2
36315: NEG
36316: PUSH
36317: LD_INT 1
36319: NEG
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 2
36327: PUSH
36328: LD_INT 1
36330: NEG
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 3
36338: PUSH
36339: LD_INT 0
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PUSH
36346: LD_INT 3
36348: PUSH
36349: LD_INT 1
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: EMPTY
36357: LIST
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: LIST
36367: LIST
36368: LIST
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36374: LD_ADDR_VAR 0 16
36378: PUSH
36379: LD_INT 0
36381: PUSH
36382: LD_INT 0
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 0
36391: PUSH
36392: LD_INT 1
36394: NEG
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: LD_INT 1
36402: PUSH
36403: LD_INT 0
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: PUSH
36410: LD_INT 1
36412: PUSH
36413: LD_INT 1
36415: PUSH
36416: EMPTY
36417: LIST
36418: LIST
36419: PUSH
36420: LD_INT 0
36422: PUSH
36423: LD_INT 1
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: PUSH
36430: LD_INT 1
36432: NEG
36433: PUSH
36434: LD_INT 0
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 1
36443: NEG
36444: PUSH
36445: LD_INT 1
36447: NEG
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PUSH
36453: LD_INT 1
36455: NEG
36456: PUSH
36457: LD_INT 2
36459: NEG
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: PUSH
36465: LD_INT 2
36467: PUSH
36468: LD_INT 1
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 2
36477: PUSH
36478: LD_INT 2
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 1
36487: PUSH
36488: LD_INT 2
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PUSH
36495: LD_INT 2
36497: NEG
36498: PUSH
36499: LD_INT 1
36501: NEG
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: PUSH
36507: LD_INT 2
36509: NEG
36510: PUSH
36511: LD_INT 2
36513: NEG
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: LD_INT 3
36521: PUSH
36522: LD_INT 2
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 3
36531: PUSH
36532: LD_INT 3
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 2
36541: PUSH
36542: LD_INT 3
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: LIST
36562: LIST
36563: LIST
36564: LIST
36565: LIST
36566: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36567: LD_ADDR_VAR 0 17
36571: PUSH
36572: LD_INT 0
36574: PUSH
36575: LD_INT 0
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 0
36584: PUSH
36585: LD_INT 1
36587: NEG
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: LD_INT 1
36595: PUSH
36596: LD_INT 0
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: PUSH
36603: LD_INT 1
36605: PUSH
36606: LD_INT 1
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: PUSH
36613: LD_INT 0
36615: PUSH
36616: LD_INT 1
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: PUSH
36623: LD_INT 1
36625: NEG
36626: PUSH
36627: LD_INT 0
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: PUSH
36634: LD_INT 1
36636: NEG
36637: PUSH
36638: LD_INT 1
36640: NEG
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 1
36648: NEG
36649: PUSH
36650: LD_INT 2
36652: NEG
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: LD_INT 0
36660: PUSH
36661: LD_INT 2
36663: NEG
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: LD_INT 1
36671: PUSH
36672: LD_INT 1
36674: NEG
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: LD_INT 2
36682: PUSH
36683: LD_INT 0
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: LD_INT 2
36692: PUSH
36693: LD_INT 1
36695: PUSH
36696: EMPTY
36697: LIST
36698: LIST
36699: PUSH
36700: LD_INT 2
36702: PUSH
36703: LD_INT 2
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: PUSH
36710: LD_INT 1
36712: PUSH
36713: LD_INT 2
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: PUSH
36720: LD_INT 0
36722: PUSH
36723: LD_INT 2
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 1
36732: NEG
36733: PUSH
36734: LD_INT 1
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PUSH
36741: LD_INT 2
36743: NEG
36744: PUSH
36745: LD_INT 0
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: LD_INT 2
36754: NEG
36755: PUSH
36756: LD_INT 1
36758: NEG
36759: PUSH
36760: EMPTY
36761: LIST
36762: LIST
36763: PUSH
36764: LD_INT 2
36766: NEG
36767: PUSH
36768: LD_INT 2
36770: NEG
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36797: LD_ADDR_VAR 0 18
36801: PUSH
36802: LD_INT 0
36804: PUSH
36805: LD_INT 0
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 0
36814: PUSH
36815: LD_INT 1
36817: NEG
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: LD_INT 1
36825: PUSH
36826: LD_INT 0
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: PUSH
36833: LD_INT 1
36835: PUSH
36836: LD_INT 1
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: PUSH
36843: LD_INT 0
36845: PUSH
36846: LD_INT 1
36848: PUSH
36849: EMPTY
36850: LIST
36851: LIST
36852: PUSH
36853: LD_INT 1
36855: NEG
36856: PUSH
36857: LD_INT 0
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PUSH
36864: LD_INT 1
36866: NEG
36867: PUSH
36868: LD_INT 1
36870: NEG
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: PUSH
36876: LD_INT 1
36878: NEG
36879: PUSH
36880: LD_INT 2
36882: NEG
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: PUSH
36888: LD_INT 0
36890: PUSH
36891: LD_INT 2
36893: NEG
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PUSH
36899: LD_INT 1
36901: PUSH
36902: LD_INT 1
36904: NEG
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PUSH
36910: LD_INT 2
36912: PUSH
36913: LD_INT 0
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: LD_INT 2
36922: PUSH
36923: LD_INT 1
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 2
36932: PUSH
36933: LD_INT 2
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: LD_INT 1
36942: PUSH
36943: LD_INT 2
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: LD_INT 0
36952: PUSH
36953: LD_INT 2
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: PUSH
36960: LD_INT 1
36962: NEG
36963: PUSH
36964: LD_INT 1
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: LD_INT 2
36973: NEG
36974: PUSH
36975: LD_INT 0
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: PUSH
36982: LD_INT 2
36984: NEG
36985: PUSH
36986: LD_INT 1
36988: NEG
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: PUSH
36994: LD_INT 2
36996: NEG
36997: PUSH
36998: LD_INT 2
37000: NEG
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: LIST
37026: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37027: LD_ADDR_VAR 0 19
37031: PUSH
37032: LD_INT 0
37034: PUSH
37035: LD_INT 0
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: PUSH
37042: LD_INT 0
37044: PUSH
37045: LD_INT 1
37047: NEG
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 1
37055: PUSH
37056: LD_INT 0
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 1
37065: PUSH
37066: LD_INT 1
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: PUSH
37073: LD_INT 0
37075: PUSH
37076: LD_INT 1
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PUSH
37083: LD_INT 1
37085: NEG
37086: PUSH
37087: LD_INT 0
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: PUSH
37094: LD_INT 1
37096: NEG
37097: PUSH
37098: LD_INT 1
37100: NEG
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: PUSH
37106: LD_INT 1
37108: NEG
37109: PUSH
37110: LD_INT 2
37112: NEG
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PUSH
37118: LD_INT 0
37120: PUSH
37121: LD_INT 2
37123: NEG
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 1
37131: PUSH
37132: LD_INT 1
37134: NEG
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PUSH
37140: LD_INT 2
37142: PUSH
37143: LD_INT 0
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: LD_INT 2
37152: PUSH
37153: LD_INT 1
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 2
37162: PUSH
37163: LD_INT 2
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: PUSH
37170: LD_INT 1
37172: PUSH
37173: LD_INT 2
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: PUSH
37180: LD_INT 0
37182: PUSH
37183: LD_INT 2
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: LD_INT 1
37192: NEG
37193: PUSH
37194: LD_INT 1
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: PUSH
37201: LD_INT 2
37203: NEG
37204: PUSH
37205: LD_INT 0
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: PUSH
37212: LD_INT 2
37214: NEG
37215: PUSH
37216: LD_INT 1
37218: NEG
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: LD_INT 2
37226: NEG
37227: PUSH
37228: LD_INT 2
37230: NEG
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: LIST
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37257: LD_ADDR_VAR 0 20
37261: PUSH
37262: LD_INT 0
37264: PUSH
37265: LD_INT 0
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: PUSH
37272: LD_INT 0
37274: PUSH
37275: LD_INT 1
37277: NEG
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: PUSH
37283: LD_INT 1
37285: PUSH
37286: LD_INT 0
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: PUSH
37293: LD_INT 1
37295: PUSH
37296: LD_INT 1
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: PUSH
37303: LD_INT 0
37305: PUSH
37306: LD_INT 1
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PUSH
37313: LD_INT 1
37315: NEG
37316: PUSH
37317: LD_INT 0
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PUSH
37324: LD_INT 1
37326: NEG
37327: PUSH
37328: LD_INT 1
37330: NEG
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PUSH
37336: LD_INT 1
37338: NEG
37339: PUSH
37340: LD_INT 2
37342: NEG
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: PUSH
37348: LD_INT 0
37350: PUSH
37351: LD_INT 2
37353: NEG
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: LD_INT 1
37361: PUSH
37362: LD_INT 1
37364: NEG
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: LD_INT 2
37372: PUSH
37373: LD_INT 0
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: LD_INT 2
37382: PUSH
37383: LD_INT 1
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: LD_INT 2
37392: PUSH
37393: LD_INT 2
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: PUSH
37400: LD_INT 1
37402: PUSH
37403: LD_INT 2
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: LD_INT 0
37412: PUSH
37413: LD_INT 2
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PUSH
37420: LD_INT 1
37422: NEG
37423: PUSH
37424: LD_INT 1
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: PUSH
37431: LD_INT 2
37433: NEG
37434: PUSH
37435: LD_INT 0
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 2
37444: NEG
37445: PUSH
37446: LD_INT 1
37448: NEG
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: LD_INT 2
37456: NEG
37457: PUSH
37458: LD_INT 2
37460: NEG
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37487: LD_ADDR_VAR 0 21
37491: PUSH
37492: LD_INT 0
37494: PUSH
37495: LD_INT 0
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 0
37504: PUSH
37505: LD_INT 1
37507: NEG
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 1
37515: PUSH
37516: LD_INT 0
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: PUSH
37523: LD_INT 1
37525: PUSH
37526: LD_INT 1
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: LD_INT 0
37535: PUSH
37536: LD_INT 1
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 1
37545: NEG
37546: PUSH
37547: LD_INT 0
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 1
37556: NEG
37557: PUSH
37558: LD_INT 1
37560: NEG
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PUSH
37566: LD_INT 1
37568: NEG
37569: PUSH
37570: LD_INT 2
37572: NEG
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: PUSH
37578: LD_INT 0
37580: PUSH
37581: LD_INT 2
37583: NEG
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: LD_INT 1
37591: PUSH
37592: LD_INT 1
37594: NEG
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: LD_INT 2
37602: PUSH
37603: LD_INT 0
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PUSH
37610: LD_INT 2
37612: PUSH
37613: LD_INT 1
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PUSH
37620: LD_INT 2
37622: PUSH
37623: LD_INT 2
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: PUSH
37630: LD_INT 1
37632: PUSH
37633: LD_INT 2
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: PUSH
37640: LD_INT 0
37642: PUSH
37643: LD_INT 2
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: PUSH
37650: LD_INT 1
37652: NEG
37653: PUSH
37654: LD_INT 1
37656: PUSH
37657: EMPTY
37658: LIST
37659: LIST
37660: PUSH
37661: LD_INT 2
37663: NEG
37664: PUSH
37665: LD_INT 0
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: LD_INT 2
37674: NEG
37675: PUSH
37676: LD_INT 1
37678: NEG
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: PUSH
37684: LD_INT 2
37686: NEG
37687: PUSH
37688: LD_INT 2
37690: NEG
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: LIST
37700: LIST
37701: LIST
37702: LIST
37703: LIST
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37717: LD_ADDR_VAR 0 22
37721: PUSH
37722: LD_INT 0
37724: PUSH
37725: LD_INT 0
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 0
37734: PUSH
37735: LD_INT 1
37737: NEG
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 1
37745: PUSH
37746: LD_INT 0
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: LD_INT 1
37755: PUSH
37756: LD_INT 1
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 0
37765: PUSH
37766: LD_INT 1
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: LD_INT 1
37775: NEG
37776: PUSH
37777: LD_INT 0
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: LD_INT 1
37786: NEG
37787: PUSH
37788: LD_INT 1
37790: NEG
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 1
37798: NEG
37799: PUSH
37800: LD_INT 2
37802: NEG
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 0
37810: PUSH
37811: LD_INT 2
37813: NEG
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 1
37821: PUSH
37822: LD_INT 1
37824: NEG
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 2
37832: PUSH
37833: LD_INT 0
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: PUSH
37840: LD_INT 2
37842: PUSH
37843: LD_INT 1
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 2
37852: PUSH
37853: LD_INT 2
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: LD_INT 1
37862: PUSH
37863: LD_INT 2
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: PUSH
37870: LD_INT 0
37872: PUSH
37873: LD_INT 2
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: PUSH
37880: LD_INT 1
37882: NEG
37883: PUSH
37884: LD_INT 1
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: PUSH
37891: LD_INT 2
37893: NEG
37894: PUSH
37895: LD_INT 0
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 2
37904: NEG
37905: PUSH
37906: LD_INT 1
37908: NEG
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PUSH
37914: LD_INT 2
37916: NEG
37917: PUSH
37918: LD_INT 2
37920: NEG
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37947: LD_ADDR_VAR 0 23
37951: PUSH
37952: LD_INT 0
37954: PUSH
37955: LD_INT 0
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 0
37964: PUSH
37965: LD_INT 1
37967: NEG
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 1
37975: PUSH
37976: LD_INT 0
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 1
37985: PUSH
37986: LD_INT 1
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 0
37995: PUSH
37996: LD_INT 1
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: LD_INT 1
38005: NEG
38006: PUSH
38007: LD_INT 0
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 1
38016: NEG
38017: PUSH
38018: LD_INT 1
38020: NEG
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: LD_INT 1
38028: NEG
38029: PUSH
38030: LD_INT 2
38032: NEG
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 0
38040: PUSH
38041: LD_INT 2
38043: NEG
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 1
38051: PUSH
38052: LD_INT 1
38054: NEG
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: LD_INT 2
38062: PUSH
38063: LD_INT 0
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: LD_INT 2
38072: PUSH
38073: LD_INT 1
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: LD_INT 2
38082: PUSH
38083: LD_INT 2
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PUSH
38090: LD_INT 1
38092: PUSH
38093: LD_INT 2
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 0
38102: PUSH
38103: LD_INT 2
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: PUSH
38110: LD_INT 1
38112: NEG
38113: PUSH
38114: LD_INT 1
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 2
38123: NEG
38124: PUSH
38125: LD_INT 0
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PUSH
38132: LD_INT 2
38134: NEG
38135: PUSH
38136: LD_INT 1
38138: NEG
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 2
38146: NEG
38147: PUSH
38148: LD_INT 2
38150: NEG
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: LD_INT 2
38158: NEG
38159: PUSH
38160: LD_INT 3
38162: NEG
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: LD_INT 1
38170: NEG
38171: PUSH
38172: LD_INT 3
38174: NEG
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PUSH
38180: LD_INT 1
38182: PUSH
38183: LD_INT 2
38185: NEG
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: LD_INT 2
38193: PUSH
38194: LD_INT 1
38196: NEG
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: LIST
38221: LIST
38222: LIST
38223: LIST
38224: LIST
38225: LIST
38226: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38227: LD_ADDR_VAR 0 24
38231: PUSH
38232: LD_INT 0
38234: PUSH
38235: LD_INT 0
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: LD_INT 0
38244: PUSH
38245: LD_INT 1
38247: NEG
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: LD_INT 1
38255: PUSH
38256: LD_INT 0
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 1
38265: PUSH
38266: LD_INT 1
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 0
38275: PUSH
38276: LD_INT 1
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: PUSH
38283: LD_INT 1
38285: NEG
38286: PUSH
38287: LD_INT 0
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: LD_INT 1
38296: NEG
38297: PUSH
38298: LD_INT 1
38300: NEG
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 1
38308: NEG
38309: PUSH
38310: LD_INT 2
38312: NEG
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: LD_INT 0
38320: PUSH
38321: LD_INT 2
38323: NEG
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: LD_INT 1
38331: PUSH
38332: LD_INT 1
38334: NEG
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 2
38342: PUSH
38343: LD_INT 0
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 2
38352: PUSH
38353: LD_INT 1
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PUSH
38360: LD_INT 2
38362: PUSH
38363: LD_INT 2
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 1
38372: PUSH
38373: LD_INT 2
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PUSH
38380: LD_INT 0
38382: PUSH
38383: LD_INT 2
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: PUSH
38390: LD_INT 1
38392: NEG
38393: PUSH
38394: LD_INT 1
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 2
38403: NEG
38404: PUSH
38405: LD_INT 0
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PUSH
38412: LD_INT 2
38414: NEG
38415: PUSH
38416: LD_INT 1
38418: NEG
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: PUSH
38424: LD_INT 2
38426: NEG
38427: PUSH
38428: LD_INT 2
38430: NEG
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: LD_INT 1
38438: PUSH
38439: LD_INT 2
38441: NEG
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: LD_INT 2
38449: PUSH
38450: LD_INT 1
38452: NEG
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: PUSH
38458: LD_INT 3
38460: PUSH
38461: LD_INT 1
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: PUSH
38468: LD_INT 3
38470: PUSH
38471: LD_INT 2
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38503: LD_ADDR_VAR 0 25
38507: PUSH
38508: LD_INT 0
38510: PUSH
38511: LD_INT 0
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: LD_INT 0
38520: PUSH
38521: LD_INT 1
38523: NEG
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 1
38531: PUSH
38532: LD_INT 0
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 1
38541: PUSH
38542: LD_INT 1
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: LD_INT 0
38551: PUSH
38552: LD_INT 1
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: LD_INT 1
38561: NEG
38562: PUSH
38563: LD_INT 0
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: LD_INT 1
38572: NEG
38573: PUSH
38574: LD_INT 1
38576: NEG
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: PUSH
38582: LD_INT 1
38584: NEG
38585: PUSH
38586: LD_INT 2
38588: NEG
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: LD_INT 0
38596: PUSH
38597: LD_INT 2
38599: NEG
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: PUSH
38605: LD_INT 1
38607: PUSH
38608: LD_INT 1
38610: NEG
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: PUSH
38616: LD_INT 2
38618: PUSH
38619: LD_INT 0
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PUSH
38626: LD_INT 2
38628: PUSH
38629: LD_INT 1
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: LD_INT 2
38638: PUSH
38639: LD_INT 2
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: PUSH
38646: LD_INT 1
38648: PUSH
38649: LD_INT 2
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 0
38658: PUSH
38659: LD_INT 2
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: LD_INT 1
38668: NEG
38669: PUSH
38670: LD_INT 1
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_INT 2
38679: NEG
38680: PUSH
38681: LD_INT 0
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: LD_INT 2
38690: NEG
38691: PUSH
38692: LD_INT 1
38694: NEG
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: PUSH
38700: LD_INT 2
38702: NEG
38703: PUSH
38704: LD_INT 2
38706: NEG
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 3
38714: PUSH
38715: LD_INT 1
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 3
38724: PUSH
38725: LD_INT 2
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 2
38734: PUSH
38735: LD_INT 3
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 1
38744: PUSH
38745: LD_INT 3
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38777: LD_ADDR_VAR 0 26
38781: PUSH
38782: LD_INT 0
38784: PUSH
38785: LD_INT 0
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: LD_INT 0
38794: PUSH
38795: LD_INT 1
38797: NEG
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: PUSH
38803: LD_INT 1
38805: PUSH
38806: LD_INT 0
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 1
38815: PUSH
38816: LD_INT 1
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 0
38825: PUSH
38826: LD_INT 1
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 1
38835: NEG
38836: PUSH
38837: LD_INT 0
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: LD_INT 1
38846: NEG
38847: PUSH
38848: LD_INT 1
38850: NEG
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 1
38858: NEG
38859: PUSH
38860: LD_INT 2
38862: NEG
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 0
38870: PUSH
38871: LD_INT 2
38873: NEG
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 1
38881: PUSH
38882: LD_INT 1
38884: NEG
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: LD_INT 2
38892: PUSH
38893: LD_INT 0
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: PUSH
38900: LD_INT 2
38902: PUSH
38903: LD_INT 1
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: PUSH
38910: LD_INT 2
38912: PUSH
38913: LD_INT 2
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: PUSH
38920: LD_INT 1
38922: PUSH
38923: LD_INT 2
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: PUSH
38930: LD_INT 0
38932: PUSH
38933: LD_INT 2
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PUSH
38940: LD_INT 1
38942: NEG
38943: PUSH
38944: LD_INT 1
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 2
38953: NEG
38954: PUSH
38955: LD_INT 0
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 2
38964: NEG
38965: PUSH
38966: LD_INT 1
38968: NEG
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 2
38976: NEG
38977: PUSH
38978: LD_INT 2
38980: NEG
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: LD_INT 2
38988: PUSH
38989: LD_INT 3
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 1
38998: PUSH
38999: LD_INT 3
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PUSH
39006: LD_INT 1
39008: NEG
39009: PUSH
39010: LD_INT 2
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: LD_INT 2
39019: NEG
39020: PUSH
39021: LD_INT 1
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: LIST
39032: LIST
39033: LIST
39034: LIST
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: LIST
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39053: LD_ADDR_VAR 0 27
39057: PUSH
39058: LD_INT 0
39060: PUSH
39061: LD_INT 0
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 0
39070: PUSH
39071: LD_INT 1
39073: NEG
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 1
39081: PUSH
39082: LD_INT 0
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 1
39091: PUSH
39092: LD_INT 1
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 0
39101: PUSH
39102: LD_INT 1
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 1
39111: NEG
39112: PUSH
39113: LD_INT 0
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 1
39122: NEG
39123: PUSH
39124: LD_INT 1
39126: NEG
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 1
39134: NEG
39135: PUSH
39136: LD_INT 2
39138: NEG
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PUSH
39144: LD_INT 0
39146: PUSH
39147: LD_INT 2
39149: NEG
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: PUSH
39155: LD_INT 1
39157: PUSH
39158: LD_INT 1
39160: NEG
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 2
39168: PUSH
39169: LD_INT 0
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: PUSH
39176: LD_INT 2
39178: PUSH
39179: LD_INT 1
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: PUSH
39186: LD_INT 2
39188: PUSH
39189: LD_INT 2
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 1
39198: PUSH
39199: LD_INT 2
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 0
39208: PUSH
39209: LD_INT 2
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 1
39218: NEG
39219: PUSH
39220: LD_INT 1
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: PUSH
39227: LD_INT 2
39229: NEG
39230: PUSH
39231: LD_INT 0
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: LD_INT 2
39240: NEG
39241: PUSH
39242: LD_INT 1
39244: NEG
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 2
39252: NEG
39253: PUSH
39254: LD_INT 2
39256: NEG
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: LD_INT 1
39264: NEG
39265: PUSH
39266: LD_INT 2
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 2
39275: NEG
39276: PUSH
39277: LD_INT 1
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 3
39286: NEG
39287: PUSH
39288: LD_INT 1
39290: NEG
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 3
39298: NEG
39299: PUSH
39300: LD_INT 2
39302: NEG
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39333: LD_ADDR_VAR 0 28
39337: PUSH
39338: LD_INT 0
39340: PUSH
39341: LD_INT 0
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: PUSH
39348: LD_INT 0
39350: PUSH
39351: LD_INT 1
39353: NEG
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 1
39361: PUSH
39362: LD_INT 0
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: LD_INT 1
39371: PUSH
39372: LD_INT 1
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 0
39381: PUSH
39382: LD_INT 1
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 1
39391: NEG
39392: PUSH
39393: LD_INT 0
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 1
39402: NEG
39403: PUSH
39404: LD_INT 1
39406: NEG
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 1
39414: NEG
39415: PUSH
39416: LD_INT 2
39418: NEG
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PUSH
39424: LD_INT 0
39426: PUSH
39427: LD_INT 2
39429: NEG
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: PUSH
39435: LD_INT 1
39437: PUSH
39438: LD_INT 1
39440: NEG
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PUSH
39446: LD_INT 2
39448: PUSH
39449: LD_INT 0
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 2
39458: PUSH
39459: LD_INT 1
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 2
39468: PUSH
39469: LD_INT 2
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: LD_INT 1
39478: PUSH
39479: LD_INT 2
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: PUSH
39486: LD_INT 0
39488: PUSH
39489: LD_INT 2
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: LD_INT 1
39498: NEG
39499: PUSH
39500: LD_INT 1
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 2
39509: NEG
39510: PUSH
39511: LD_INT 0
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_INT 2
39520: NEG
39521: PUSH
39522: LD_INT 1
39524: NEG
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 2
39532: NEG
39533: PUSH
39534: LD_INT 2
39536: NEG
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 2
39544: NEG
39545: PUSH
39546: LD_INT 3
39548: NEG
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: PUSH
39554: LD_INT 1
39556: NEG
39557: PUSH
39558: LD_INT 3
39560: NEG
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 3
39568: NEG
39569: PUSH
39570: LD_INT 1
39572: NEG
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: LD_INT 3
39580: NEG
39581: PUSH
39582: LD_INT 2
39584: NEG
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39615: LD_ADDR_VAR 0 29
39619: PUSH
39620: LD_INT 0
39622: PUSH
39623: LD_INT 0
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: LD_INT 0
39632: PUSH
39633: LD_INT 1
39635: NEG
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 1
39643: PUSH
39644: LD_INT 0
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: LD_INT 1
39653: PUSH
39654: LD_INT 1
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: LD_INT 0
39663: PUSH
39664: LD_INT 1
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 1
39673: NEG
39674: PUSH
39675: LD_INT 0
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: LD_INT 1
39684: NEG
39685: PUSH
39686: LD_INT 1
39688: NEG
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 1
39696: NEG
39697: PUSH
39698: LD_INT 2
39700: NEG
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 0
39708: PUSH
39709: LD_INT 2
39711: NEG
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 1
39719: PUSH
39720: LD_INT 1
39722: NEG
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: LD_INT 2
39730: PUSH
39731: LD_INT 0
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 2
39740: PUSH
39741: LD_INT 1
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 1
39750: PUSH
39751: LD_INT 2
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 0
39760: PUSH
39761: LD_INT 2
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 1
39770: NEG
39771: PUSH
39772: LD_INT 1
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 2
39781: NEG
39782: PUSH
39783: LD_INT 1
39785: NEG
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PUSH
39791: LD_INT 2
39793: NEG
39794: PUSH
39795: LD_INT 2
39797: NEG
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 2
39805: NEG
39806: PUSH
39807: LD_INT 3
39809: NEG
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: LD_INT 2
39817: PUSH
39818: LD_INT 1
39820: NEG
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: LD_INT 3
39828: PUSH
39829: LD_INT 1
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 1
39838: PUSH
39839: LD_INT 3
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 1
39848: NEG
39849: PUSH
39850: LD_INT 2
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 3
39859: NEG
39860: PUSH
39861: LD_INT 2
39863: NEG
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: LIST
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39894: LD_ADDR_VAR 0 30
39898: PUSH
39899: LD_INT 0
39901: PUSH
39902: LD_INT 0
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 0
39911: PUSH
39912: LD_INT 1
39914: NEG
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 1
39922: PUSH
39923: LD_INT 0
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 1
39932: PUSH
39933: LD_INT 1
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 0
39942: PUSH
39943: LD_INT 1
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 1
39952: NEG
39953: PUSH
39954: LD_INT 0
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 1
39963: NEG
39964: PUSH
39965: LD_INT 1
39967: NEG
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 1
39975: NEG
39976: PUSH
39977: LD_INT 2
39979: NEG
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 0
39987: PUSH
39988: LD_INT 2
39990: NEG
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 1
39998: PUSH
39999: LD_INT 1
40001: NEG
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 2
40009: PUSH
40010: LD_INT 0
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 2
40019: PUSH
40020: LD_INT 1
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 2
40029: PUSH
40030: LD_INT 2
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PUSH
40037: LD_INT 1
40039: PUSH
40040: LD_INT 2
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: LD_INT 1
40049: NEG
40050: PUSH
40051: LD_INT 1
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 2
40060: NEG
40061: PUSH
40062: LD_INT 0
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 2
40071: NEG
40072: PUSH
40073: LD_INT 1
40075: NEG
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 1
40083: NEG
40084: PUSH
40085: LD_INT 3
40087: NEG
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 1
40095: PUSH
40096: LD_INT 2
40098: NEG
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 3
40106: PUSH
40107: LD_INT 2
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 2
40116: PUSH
40117: LD_INT 3
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PUSH
40124: LD_INT 2
40126: NEG
40127: PUSH
40128: LD_INT 1
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 3
40137: NEG
40138: PUSH
40139: LD_INT 1
40141: NEG
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40172: LD_ADDR_VAR 0 31
40176: PUSH
40177: LD_INT 0
40179: PUSH
40180: LD_INT 0
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 0
40189: PUSH
40190: LD_INT 1
40192: NEG
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 1
40200: PUSH
40201: LD_INT 0
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 1
40210: PUSH
40211: LD_INT 1
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 0
40220: PUSH
40221: LD_INT 1
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 1
40230: NEG
40231: PUSH
40232: LD_INT 0
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 1
40241: NEG
40242: PUSH
40243: LD_INT 1
40245: NEG
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 1
40253: NEG
40254: PUSH
40255: LD_INT 2
40257: NEG
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 1
40265: PUSH
40266: LD_INT 1
40268: NEG
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 2
40276: PUSH
40277: LD_INT 0
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: LD_INT 2
40286: PUSH
40287: LD_INT 1
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 2
40296: PUSH
40297: LD_INT 2
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 1
40306: PUSH
40307: LD_INT 2
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 0
40316: PUSH
40317: LD_INT 2
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 1
40326: NEG
40327: PUSH
40328: LD_INT 1
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 2
40337: NEG
40338: PUSH
40339: LD_INT 1
40341: NEG
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 2
40349: NEG
40350: PUSH
40351: LD_INT 2
40353: NEG
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 2
40361: NEG
40362: PUSH
40363: LD_INT 3
40365: NEG
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PUSH
40371: LD_INT 2
40373: PUSH
40374: LD_INT 1
40376: NEG
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PUSH
40382: LD_INT 3
40384: PUSH
40385: LD_INT 1
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: LD_INT 1
40394: PUSH
40395: LD_INT 3
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 1
40404: NEG
40405: PUSH
40406: LD_INT 2
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 3
40415: NEG
40416: PUSH
40417: LD_INT 2
40419: NEG
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40450: LD_ADDR_VAR 0 32
40454: PUSH
40455: LD_INT 0
40457: PUSH
40458: LD_INT 0
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 0
40467: PUSH
40468: LD_INT 1
40470: NEG
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 1
40478: PUSH
40479: LD_INT 0
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 1
40488: PUSH
40489: LD_INT 1
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 0
40498: PUSH
40499: LD_INT 1
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 1
40508: NEG
40509: PUSH
40510: LD_INT 0
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 1
40519: NEG
40520: PUSH
40521: LD_INT 1
40523: NEG
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 1
40531: NEG
40532: PUSH
40533: LD_INT 2
40535: NEG
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 0
40543: PUSH
40544: LD_INT 2
40546: NEG
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 1
40554: PUSH
40555: LD_INT 1
40557: NEG
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 2
40565: PUSH
40566: LD_INT 1
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 2
40575: PUSH
40576: LD_INT 2
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 1
40585: PUSH
40586: LD_INT 2
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: LD_INT 0
40595: PUSH
40596: LD_INT 2
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: PUSH
40603: LD_INT 1
40605: NEG
40606: PUSH
40607: LD_INT 1
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 2
40616: NEG
40617: PUSH
40618: LD_INT 0
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: PUSH
40625: LD_INT 2
40627: NEG
40628: PUSH
40629: LD_INT 1
40631: NEG
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: LD_INT 1
40639: NEG
40640: PUSH
40641: LD_INT 3
40643: NEG
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 1
40651: PUSH
40652: LD_INT 2
40654: NEG
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 3
40662: PUSH
40663: LD_INT 2
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 2
40672: PUSH
40673: LD_INT 3
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 2
40682: NEG
40683: PUSH
40684: LD_INT 1
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 3
40693: NEG
40694: PUSH
40695: LD_INT 1
40697: NEG
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: LIST
40713: LIST
40714: LIST
40715: LIST
40716: LIST
40717: LIST
40718: LIST
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: LIST
40725: LIST
40726: LIST
40727: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40728: LD_ADDR_VAR 0 33
40732: PUSH
40733: LD_INT 0
40735: PUSH
40736: LD_INT 0
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 0
40745: PUSH
40746: LD_INT 1
40748: NEG
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 1
40756: PUSH
40757: LD_INT 0
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 1
40766: PUSH
40767: LD_INT 1
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 0
40776: PUSH
40777: LD_INT 1
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 1
40786: NEG
40787: PUSH
40788: LD_INT 0
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: LD_INT 1
40797: NEG
40798: PUSH
40799: LD_INT 1
40801: NEG
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 1
40809: NEG
40810: PUSH
40811: LD_INT 2
40813: NEG
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: LD_INT 1
40821: PUSH
40822: LD_INT 1
40824: NEG
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 2
40832: PUSH
40833: LD_INT 0
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 2
40842: PUSH
40843: LD_INT 1
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 1
40852: PUSH
40853: LD_INT 2
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 0
40862: PUSH
40863: LD_INT 2
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 1
40872: NEG
40873: PUSH
40874: LD_INT 1
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 2
40883: NEG
40884: PUSH
40885: LD_INT 0
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 2
40894: NEG
40895: PUSH
40896: LD_INT 1
40898: NEG
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 2
40906: NEG
40907: PUSH
40908: LD_INT 2
40910: NEG
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: LD_INT 2
40918: NEG
40919: PUSH
40920: LD_INT 3
40922: NEG
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 2
40930: PUSH
40931: LD_INT 1
40933: NEG
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 3
40941: PUSH
40942: LD_INT 1
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 1
40951: PUSH
40952: LD_INT 3
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 1
40961: NEG
40962: PUSH
40963: LD_INT 2
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 3
40972: NEG
40973: PUSH
40974: LD_INT 2
40976: NEG
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: LIST
41000: LIST
41001: LIST
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41007: LD_ADDR_VAR 0 34
41011: PUSH
41012: LD_INT 0
41014: PUSH
41015: LD_INT 0
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 0
41024: PUSH
41025: LD_INT 1
41027: NEG
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 1
41035: PUSH
41036: LD_INT 0
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 1
41045: PUSH
41046: LD_INT 1
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: PUSH
41053: LD_INT 0
41055: PUSH
41056: LD_INT 1
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 1
41065: NEG
41066: PUSH
41067: LD_INT 0
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 1
41076: NEG
41077: PUSH
41078: LD_INT 1
41080: NEG
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 1
41088: NEG
41089: PUSH
41090: LD_INT 2
41092: NEG
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PUSH
41098: LD_INT 0
41100: PUSH
41101: LD_INT 2
41103: NEG
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: LD_INT 1
41111: PUSH
41112: LD_INT 1
41114: NEG
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 2
41122: PUSH
41123: LD_INT 1
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 2
41132: PUSH
41133: LD_INT 2
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 1
41142: PUSH
41143: LD_INT 2
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: LD_INT 1
41152: NEG
41153: PUSH
41154: LD_INT 1
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 2
41163: NEG
41164: PUSH
41165: LD_INT 0
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 2
41174: NEG
41175: PUSH
41176: LD_INT 1
41178: NEG
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 2
41186: NEG
41187: PUSH
41188: LD_INT 2
41190: NEG
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 1
41198: NEG
41199: PUSH
41200: LD_INT 3
41202: NEG
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: PUSH
41208: LD_INT 1
41210: PUSH
41211: LD_INT 2
41213: NEG
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 3
41221: PUSH
41222: LD_INT 2
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 2
41231: PUSH
41232: LD_INT 3
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 2
41241: NEG
41242: PUSH
41243: LD_INT 1
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 3
41252: NEG
41253: PUSH
41254: LD_INT 1
41256: NEG
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: LIST
41284: LIST
41285: LIST
41286: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41287: LD_ADDR_VAR 0 35
41291: PUSH
41292: LD_INT 0
41294: PUSH
41295: LD_INT 0
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 0
41304: PUSH
41305: LD_INT 1
41307: NEG
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: LD_INT 1
41315: PUSH
41316: LD_INT 0
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 1
41325: PUSH
41326: LD_INT 1
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 0
41335: PUSH
41336: LD_INT 1
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: PUSH
41343: LD_INT 1
41345: NEG
41346: PUSH
41347: LD_INT 0
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 1
41356: NEG
41357: PUSH
41358: LD_INT 1
41360: NEG
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 2
41368: PUSH
41369: LD_INT 1
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 2
41378: NEG
41379: PUSH
41380: LD_INT 1
41382: NEG
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41399: LD_ADDR_VAR 0 36
41403: PUSH
41404: LD_INT 0
41406: PUSH
41407: LD_INT 0
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 0
41416: PUSH
41417: LD_INT 1
41419: NEG
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: LD_INT 1
41427: PUSH
41428: LD_INT 0
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: PUSH
41435: LD_INT 1
41437: PUSH
41438: LD_INT 1
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: LD_INT 0
41447: PUSH
41448: LD_INT 1
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PUSH
41455: LD_INT 1
41457: NEG
41458: PUSH
41459: LD_INT 0
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 1
41468: NEG
41469: PUSH
41470: LD_INT 1
41472: NEG
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 1
41480: NEG
41481: PUSH
41482: LD_INT 2
41484: NEG
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 1
41492: PUSH
41493: LD_INT 2
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41511: LD_ADDR_VAR 0 37
41515: PUSH
41516: LD_INT 0
41518: PUSH
41519: LD_INT 0
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 0
41528: PUSH
41529: LD_INT 1
41531: NEG
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: LD_INT 1
41539: PUSH
41540: LD_INT 0
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 1
41549: PUSH
41550: LD_INT 1
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 0
41559: PUSH
41560: LD_INT 1
41562: PUSH
41563: EMPTY
41564: LIST
41565: LIST
41566: PUSH
41567: LD_INT 1
41569: NEG
41570: PUSH
41571: LD_INT 0
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: LD_INT 1
41580: NEG
41581: PUSH
41582: LD_INT 1
41584: NEG
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 1
41592: PUSH
41593: LD_INT 1
41595: NEG
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 1
41603: NEG
41604: PUSH
41605: LD_INT 1
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41623: LD_ADDR_VAR 0 38
41627: PUSH
41628: LD_INT 0
41630: PUSH
41631: LD_INT 0
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: PUSH
41638: LD_INT 0
41640: PUSH
41641: LD_INT 1
41643: NEG
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 1
41651: PUSH
41652: LD_INT 0
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 1
41661: PUSH
41662: LD_INT 1
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 0
41671: PUSH
41672: LD_INT 1
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 1
41681: NEG
41682: PUSH
41683: LD_INT 0
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 1
41692: NEG
41693: PUSH
41694: LD_INT 1
41696: NEG
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 2
41704: PUSH
41705: LD_INT 1
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 2
41714: NEG
41715: PUSH
41716: LD_INT 1
41718: NEG
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41735: LD_ADDR_VAR 0 39
41739: PUSH
41740: LD_INT 0
41742: PUSH
41743: LD_INT 0
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 0
41752: PUSH
41753: LD_INT 1
41755: NEG
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 1
41763: PUSH
41764: LD_INT 0
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 1
41773: PUSH
41774: LD_INT 1
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 0
41783: PUSH
41784: LD_INT 1
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 1
41793: NEG
41794: PUSH
41795: LD_INT 0
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 1
41804: NEG
41805: PUSH
41806: LD_INT 1
41808: NEG
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 1
41816: NEG
41817: PUSH
41818: LD_INT 2
41820: NEG
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 1
41828: PUSH
41829: LD_INT 2
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41847: LD_ADDR_VAR 0 40
41851: PUSH
41852: LD_INT 0
41854: PUSH
41855: LD_INT 0
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 0
41864: PUSH
41865: LD_INT 1
41867: NEG
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 1
41875: PUSH
41876: LD_INT 0
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 1
41885: PUSH
41886: LD_INT 1
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 0
41895: PUSH
41896: LD_INT 1
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 1
41905: NEG
41906: PUSH
41907: LD_INT 0
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 1
41916: NEG
41917: PUSH
41918: LD_INT 1
41920: NEG
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 1
41928: PUSH
41929: LD_INT 1
41931: NEG
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: LD_INT 1
41939: NEG
41940: PUSH
41941: LD_INT 1
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41959: LD_ADDR_VAR 0 41
41963: PUSH
41964: LD_INT 0
41966: PUSH
41967: LD_INT 0
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 0
41976: PUSH
41977: LD_INT 1
41979: NEG
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: LD_INT 1
41987: PUSH
41988: LD_INT 0
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 1
41997: PUSH
41998: LD_INT 1
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 0
42007: PUSH
42008: LD_INT 1
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 1
42017: NEG
42018: PUSH
42019: LD_INT 0
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 1
42028: NEG
42029: PUSH
42030: LD_INT 1
42032: NEG
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 1
42040: NEG
42041: PUSH
42042: LD_INT 2
42044: NEG
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 1
42052: PUSH
42053: LD_INT 1
42055: NEG
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 2
42063: PUSH
42064: LD_INT 0
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 2
42073: PUSH
42074: LD_INT 1
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 2
42083: PUSH
42084: LD_INT 2
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 1
42093: PUSH
42094: LD_INT 2
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 1
42103: NEG
42104: PUSH
42105: LD_INT 1
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PUSH
42112: LD_INT 2
42114: NEG
42115: PUSH
42116: LD_INT 0
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: LD_INT 2
42125: NEG
42126: PUSH
42127: LD_INT 1
42129: NEG
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 2
42137: NEG
42138: PUSH
42139: LD_INT 2
42141: NEG
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 2
42149: NEG
42150: PUSH
42151: LD_INT 3
42153: NEG
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 2
42161: PUSH
42162: LD_INT 1
42164: NEG
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 3
42172: PUSH
42173: LD_INT 0
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 3
42182: PUSH
42183: LD_INT 1
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 3
42192: PUSH
42193: LD_INT 2
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 3
42202: PUSH
42203: LD_INT 3
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: LD_INT 2
42212: PUSH
42213: LD_INT 3
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 2
42222: NEG
42223: PUSH
42224: LD_INT 1
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: PUSH
42231: LD_INT 3
42233: NEG
42234: PUSH
42235: LD_INT 0
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 3
42244: NEG
42245: PUSH
42246: LD_INT 1
42248: NEG
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 3
42256: NEG
42257: PUSH
42258: LD_INT 2
42260: NEG
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 3
42268: NEG
42269: PUSH
42270: LD_INT 3
42272: NEG
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42309: LD_ADDR_VAR 0 42
42313: PUSH
42314: LD_INT 0
42316: PUSH
42317: LD_INT 0
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 0
42326: PUSH
42327: LD_INT 1
42329: NEG
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 1
42337: PUSH
42338: LD_INT 0
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 1
42347: PUSH
42348: LD_INT 1
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 0
42357: PUSH
42358: LD_INT 1
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 1
42367: NEG
42368: PUSH
42369: LD_INT 0
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 1
42378: NEG
42379: PUSH
42380: LD_INT 1
42382: NEG
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 1
42390: NEG
42391: PUSH
42392: LD_INT 2
42394: NEG
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 0
42402: PUSH
42403: LD_INT 2
42405: NEG
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 1
42413: PUSH
42414: LD_INT 1
42416: NEG
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 2
42424: PUSH
42425: LD_INT 1
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 2
42434: PUSH
42435: LD_INT 2
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 1
42444: PUSH
42445: LD_INT 2
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PUSH
42452: LD_INT 0
42454: PUSH
42455: LD_INT 2
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 1
42464: NEG
42465: PUSH
42466: LD_INT 1
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 2
42475: NEG
42476: PUSH
42477: LD_INT 1
42479: NEG
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 2
42487: NEG
42488: PUSH
42489: LD_INT 2
42491: NEG
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 2
42499: NEG
42500: PUSH
42501: LD_INT 3
42503: NEG
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 1
42511: NEG
42512: PUSH
42513: LD_INT 3
42515: NEG
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 0
42523: PUSH
42524: LD_INT 3
42526: NEG
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 1
42534: PUSH
42535: LD_INT 2
42537: NEG
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 3
42545: PUSH
42546: LD_INT 2
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 3
42555: PUSH
42556: LD_INT 3
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 2
42565: PUSH
42566: LD_INT 3
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 1
42575: PUSH
42576: LD_INT 3
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 0
42585: PUSH
42586: LD_INT 3
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 1
42595: NEG
42596: PUSH
42597: LD_INT 2
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 3
42606: NEG
42607: PUSH
42608: LD_INT 2
42610: NEG
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 3
42618: NEG
42619: PUSH
42620: LD_INT 3
42622: NEG
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42659: LD_ADDR_VAR 0 43
42663: PUSH
42664: LD_INT 0
42666: PUSH
42667: LD_INT 0
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: LD_INT 0
42676: PUSH
42677: LD_INT 1
42679: NEG
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 1
42687: PUSH
42688: LD_INT 0
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 1
42697: PUSH
42698: LD_INT 1
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 0
42707: PUSH
42708: LD_INT 1
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 1
42717: NEG
42718: PUSH
42719: LD_INT 0
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 1
42728: NEG
42729: PUSH
42730: LD_INT 1
42732: NEG
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 1
42740: NEG
42741: PUSH
42742: LD_INT 2
42744: NEG
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 0
42752: PUSH
42753: LD_INT 2
42755: NEG
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 1
42763: PUSH
42764: LD_INT 1
42766: NEG
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 2
42774: PUSH
42775: LD_INT 0
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 2
42784: PUSH
42785: LD_INT 1
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 1
42794: PUSH
42795: LD_INT 2
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 0
42804: PUSH
42805: LD_INT 2
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 1
42814: NEG
42815: PUSH
42816: LD_INT 1
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 2
42825: NEG
42826: PUSH
42827: LD_INT 0
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 2
42836: NEG
42837: PUSH
42838: LD_INT 1
42840: NEG
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 1
42848: NEG
42849: PUSH
42850: LD_INT 3
42852: NEG
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 0
42860: PUSH
42861: LD_INT 3
42863: NEG
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 1
42871: PUSH
42872: LD_INT 2
42874: NEG
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 2
42882: PUSH
42883: LD_INT 1
42885: NEG
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 3
42893: PUSH
42894: LD_INT 0
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 3
42903: PUSH
42904: LD_INT 1
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 1
42913: PUSH
42914: LD_INT 3
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 0
42923: PUSH
42924: LD_INT 3
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 1
42933: NEG
42934: PUSH
42935: LD_INT 2
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 2
42944: NEG
42945: PUSH
42946: LD_INT 1
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 3
42955: NEG
42956: PUSH
42957: LD_INT 0
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 3
42966: NEG
42967: PUSH
42968: LD_INT 1
42970: NEG
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43007: LD_ADDR_VAR 0 44
43011: PUSH
43012: LD_INT 0
43014: PUSH
43015: LD_INT 0
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 0
43024: PUSH
43025: LD_INT 1
43027: NEG
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: LD_INT 1
43035: PUSH
43036: LD_INT 0
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 1
43045: PUSH
43046: LD_INT 1
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 0
43055: PUSH
43056: LD_INT 1
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 1
43065: NEG
43066: PUSH
43067: LD_INT 0
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 1
43076: NEG
43077: PUSH
43078: LD_INT 1
43080: NEG
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 1
43088: NEG
43089: PUSH
43090: LD_INT 2
43092: NEG
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 1
43100: PUSH
43101: LD_INT 1
43103: NEG
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 2
43111: PUSH
43112: LD_INT 0
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 2
43121: PUSH
43122: LD_INT 1
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 2
43131: PUSH
43132: LD_INT 2
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 1
43141: PUSH
43142: LD_INT 2
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 1
43151: NEG
43152: PUSH
43153: LD_INT 1
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 2
43162: NEG
43163: PUSH
43164: LD_INT 0
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 2
43173: NEG
43174: PUSH
43175: LD_INT 1
43177: NEG
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 2
43185: NEG
43186: PUSH
43187: LD_INT 2
43189: NEG
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 2
43197: NEG
43198: PUSH
43199: LD_INT 3
43201: NEG
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 2
43209: PUSH
43210: LD_INT 1
43212: NEG
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 3
43220: PUSH
43221: LD_INT 0
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 3
43230: PUSH
43231: LD_INT 1
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 3
43240: PUSH
43241: LD_INT 2
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 3
43250: PUSH
43251: LD_INT 3
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 2
43260: PUSH
43261: LD_INT 3
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 2
43270: NEG
43271: PUSH
43272: LD_INT 1
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 3
43281: NEG
43282: PUSH
43283: LD_INT 0
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 3
43292: NEG
43293: PUSH
43294: LD_INT 1
43296: NEG
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 3
43304: NEG
43305: PUSH
43306: LD_INT 2
43308: NEG
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 3
43316: NEG
43317: PUSH
43318: LD_INT 3
43320: NEG
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43357: LD_ADDR_VAR 0 45
43361: PUSH
43362: LD_INT 0
43364: PUSH
43365: LD_INT 0
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 0
43374: PUSH
43375: LD_INT 1
43377: NEG
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: LD_INT 1
43385: PUSH
43386: LD_INT 0
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 1
43395: PUSH
43396: LD_INT 1
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 0
43405: PUSH
43406: LD_INT 1
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 1
43415: NEG
43416: PUSH
43417: LD_INT 0
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 1
43426: NEG
43427: PUSH
43428: LD_INT 1
43430: NEG
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 1
43438: NEG
43439: PUSH
43440: LD_INT 2
43442: NEG
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 0
43450: PUSH
43451: LD_INT 2
43453: NEG
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 1
43461: PUSH
43462: LD_INT 1
43464: NEG
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 2
43472: PUSH
43473: LD_INT 1
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 2
43482: PUSH
43483: LD_INT 2
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 1
43492: PUSH
43493: LD_INT 2
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 0
43502: PUSH
43503: LD_INT 2
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 1
43512: NEG
43513: PUSH
43514: LD_INT 1
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 2
43523: NEG
43524: PUSH
43525: LD_INT 1
43527: NEG
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 2
43535: NEG
43536: PUSH
43537: LD_INT 2
43539: NEG
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 2
43547: NEG
43548: PUSH
43549: LD_INT 3
43551: NEG
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 1
43559: NEG
43560: PUSH
43561: LD_INT 3
43563: NEG
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 0
43571: PUSH
43572: LD_INT 3
43574: NEG
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 1
43582: PUSH
43583: LD_INT 2
43585: NEG
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 3
43593: PUSH
43594: LD_INT 2
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 3
43603: PUSH
43604: LD_INT 3
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 2
43613: PUSH
43614: LD_INT 3
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 1
43623: PUSH
43624: LD_INT 3
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 0
43633: PUSH
43634: LD_INT 3
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 1
43643: NEG
43644: PUSH
43645: LD_INT 2
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 3
43654: NEG
43655: PUSH
43656: LD_INT 2
43658: NEG
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_INT 3
43666: NEG
43667: PUSH
43668: LD_INT 3
43670: NEG
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43707: LD_ADDR_VAR 0 46
43711: PUSH
43712: LD_INT 0
43714: PUSH
43715: LD_INT 0
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 0
43724: PUSH
43725: LD_INT 1
43727: NEG
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 1
43735: PUSH
43736: LD_INT 0
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 1
43745: PUSH
43746: LD_INT 1
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 0
43755: PUSH
43756: LD_INT 1
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 1
43765: NEG
43766: PUSH
43767: LD_INT 0
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 1
43776: NEG
43777: PUSH
43778: LD_INT 1
43780: NEG
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 1
43788: NEG
43789: PUSH
43790: LD_INT 2
43792: NEG
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 0
43800: PUSH
43801: LD_INT 2
43803: NEG
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 1
43811: PUSH
43812: LD_INT 1
43814: NEG
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 2
43822: PUSH
43823: LD_INT 0
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 2
43832: PUSH
43833: LD_INT 1
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 1
43842: PUSH
43843: LD_INT 2
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 0
43852: PUSH
43853: LD_INT 2
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 1
43862: NEG
43863: PUSH
43864: LD_INT 1
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 2
43873: NEG
43874: PUSH
43875: LD_INT 0
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 2
43884: NEG
43885: PUSH
43886: LD_INT 1
43888: NEG
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 1
43896: NEG
43897: PUSH
43898: LD_INT 3
43900: NEG
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 0
43908: PUSH
43909: LD_INT 3
43911: NEG
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 1
43919: PUSH
43920: LD_INT 2
43922: NEG
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 2
43930: PUSH
43931: LD_INT 1
43933: NEG
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 3
43941: PUSH
43942: LD_INT 0
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 3
43951: PUSH
43952: LD_INT 1
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 1
43961: PUSH
43962: LD_INT 3
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 0
43971: PUSH
43972: LD_INT 3
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 1
43981: NEG
43982: PUSH
43983: LD_INT 2
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 2
43992: NEG
43993: PUSH
43994: LD_INT 1
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 3
44003: NEG
44004: PUSH
44005: LD_INT 0
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 3
44014: NEG
44015: PUSH
44016: LD_INT 1
44018: NEG
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44055: LD_ADDR_VAR 0 47
44059: PUSH
44060: LD_INT 0
44062: PUSH
44063: LD_INT 0
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 0
44072: PUSH
44073: LD_INT 1
44075: NEG
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 1
44083: PUSH
44084: LD_INT 0
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 1
44093: PUSH
44094: LD_INT 1
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 0
44103: PUSH
44104: LD_INT 1
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 1
44113: NEG
44114: PUSH
44115: LD_INT 0
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 1
44124: NEG
44125: PUSH
44126: LD_INT 1
44128: NEG
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: LD_INT 1
44136: NEG
44137: PUSH
44138: LD_INT 2
44140: NEG
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 0
44148: PUSH
44149: LD_INT 2
44151: NEG
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 1
44159: PUSH
44160: LD_INT 1
44162: NEG
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 2
44170: NEG
44171: PUSH
44172: LD_INT 1
44174: NEG
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 2
44182: NEG
44183: PUSH
44184: LD_INT 2
44186: NEG
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: LIST
44196: LIST
44197: LIST
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44206: LD_ADDR_VAR 0 48
44210: PUSH
44211: LD_INT 0
44213: PUSH
44214: LD_INT 0
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 0
44223: PUSH
44224: LD_INT 1
44226: NEG
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 1
44234: PUSH
44235: LD_INT 0
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 1
44244: PUSH
44245: LD_INT 1
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 0
44254: PUSH
44255: LD_INT 1
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 1
44264: NEG
44265: PUSH
44266: LD_INT 0
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 1
44275: NEG
44276: PUSH
44277: LD_INT 1
44279: NEG
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 1
44287: NEG
44288: PUSH
44289: LD_INT 2
44291: NEG
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 0
44299: PUSH
44300: LD_INT 2
44302: NEG
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 1
44310: PUSH
44311: LD_INT 1
44313: NEG
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: LD_INT 2
44321: PUSH
44322: LD_INT 0
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 2
44331: PUSH
44332: LD_INT 1
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44353: LD_ADDR_VAR 0 49
44357: PUSH
44358: LD_INT 0
44360: PUSH
44361: LD_INT 0
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 0
44370: PUSH
44371: LD_INT 1
44373: NEG
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 1
44381: PUSH
44382: LD_INT 0
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 1
44391: PUSH
44392: LD_INT 1
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 0
44401: PUSH
44402: LD_INT 1
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 1
44411: NEG
44412: PUSH
44413: LD_INT 0
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 1
44422: NEG
44423: PUSH
44424: LD_INT 1
44426: NEG
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 1
44434: PUSH
44435: LD_INT 1
44437: NEG
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 2
44445: PUSH
44446: LD_INT 0
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 2
44455: PUSH
44456: LD_INT 1
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 2
44465: PUSH
44466: LD_INT 2
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 1
44475: PUSH
44476: LD_INT 2
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44497: LD_ADDR_VAR 0 50
44501: PUSH
44502: LD_INT 0
44504: PUSH
44505: LD_INT 0
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 0
44514: PUSH
44515: LD_INT 1
44517: NEG
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 1
44525: PUSH
44526: LD_INT 0
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 1
44535: PUSH
44536: LD_INT 1
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 0
44545: PUSH
44546: LD_INT 1
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 1
44555: NEG
44556: PUSH
44557: LD_INT 0
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 1
44566: NEG
44567: PUSH
44568: LD_INT 1
44570: NEG
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 2
44578: PUSH
44579: LD_INT 1
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 2
44588: PUSH
44589: LD_INT 2
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 1
44598: PUSH
44599: LD_INT 2
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 0
44608: PUSH
44609: LD_INT 2
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 1
44618: NEG
44619: PUSH
44620: LD_INT 1
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44641: LD_ADDR_VAR 0 51
44645: PUSH
44646: LD_INT 0
44648: PUSH
44649: LD_INT 0
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 0
44658: PUSH
44659: LD_INT 1
44661: NEG
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 1
44669: PUSH
44670: LD_INT 0
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 1
44679: PUSH
44680: LD_INT 1
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 0
44689: PUSH
44690: LD_INT 1
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 1
44699: NEG
44700: PUSH
44701: LD_INT 0
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 1
44710: NEG
44711: PUSH
44712: LD_INT 1
44714: NEG
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 1
44722: PUSH
44723: LD_INT 2
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 0
44732: PUSH
44733: LD_INT 2
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 1
44742: NEG
44743: PUSH
44744: LD_INT 1
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 2
44753: NEG
44754: PUSH
44755: LD_INT 0
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 2
44764: NEG
44765: PUSH
44766: LD_INT 1
44768: NEG
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44788: LD_ADDR_VAR 0 52
44792: PUSH
44793: LD_INT 0
44795: PUSH
44796: LD_INT 0
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 0
44805: PUSH
44806: LD_INT 1
44808: NEG
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 1
44816: PUSH
44817: LD_INT 0
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 1
44826: PUSH
44827: LD_INT 1
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 0
44836: PUSH
44837: LD_INT 1
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 1
44846: NEG
44847: PUSH
44848: LD_INT 0
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 1
44857: NEG
44858: PUSH
44859: LD_INT 1
44861: NEG
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 1
44869: NEG
44870: PUSH
44871: LD_INT 2
44873: NEG
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 1
44881: NEG
44882: PUSH
44883: LD_INT 1
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 2
44892: NEG
44893: PUSH
44894: LD_INT 0
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 2
44903: NEG
44904: PUSH
44905: LD_INT 1
44907: NEG
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 2
44915: NEG
44916: PUSH
44917: LD_INT 2
44919: NEG
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44939: LD_ADDR_VAR 0 53
44943: PUSH
44944: LD_INT 0
44946: PUSH
44947: LD_INT 0
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 0
44956: PUSH
44957: LD_INT 1
44959: NEG
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 1
44967: PUSH
44968: LD_INT 0
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 1
44977: PUSH
44978: LD_INT 1
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 0
44987: PUSH
44988: LD_INT 1
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 1
44997: NEG
44998: PUSH
44999: LD_INT 0
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 1
45008: NEG
45009: PUSH
45010: LD_INT 1
45012: NEG
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 1
45020: NEG
45021: PUSH
45022: LD_INT 2
45024: NEG
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 0
45032: PUSH
45033: LD_INT 2
45035: NEG
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 1
45043: PUSH
45044: LD_INT 1
45046: NEG
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 2
45054: PUSH
45055: LD_INT 0
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 2
45064: PUSH
45065: LD_INT 1
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 2
45074: PUSH
45075: LD_INT 2
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 1
45084: PUSH
45085: LD_INT 2
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 0
45094: PUSH
45095: LD_INT 2
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 1
45104: NEG
45105: PUSH
45106: LD_INT 1
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 2
45115: NEG
45116: PUSH
45117: LD_INT 0
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 2
45126: NEG
45127: PUSH
45128: LD_INT 1
45130: NEG
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 2
45138: NEG
45139: PUSH
45140: LD_INT 2
45142: NEG
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45169: LD_ADDR_VAR 0 54
45173: PUSH
45174: LD_INT 0
45176: PUSH
45177: LD_INT 0
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 0
45186: PUSH
45187: LD_INT 1
45189: NEG
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 1
45197: PUSH
45198: LD_INT 0
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 1
45207: PUSH
45208: LD_INT 1
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 0
45217: PUSH
45218: LD_INT 1
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 1
45227: NEG
45228: PUSH
45229: LD_INT 0
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 1
45238: NEG
45239: PUSH
45240: LD_INT 1
45242: NEG
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 1
45250: NEG
45251: PUSH
45252: LD_INT 2
45254: NEG
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 0
45262: PUSH
45263: LD_INT 2
45265: NEG
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 1
45273: PUSH
45274: LD_INT 1
45276: NEG
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 2
45284: PUSH
45285: LD_INT 0
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 2
45294: PUSH
45295: LD_INT 1
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 2
45304: PUSH
45305: LD_INT 2
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 1
45314: PUSH
45315: LD_INT 2
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 0
45324: PUSH
45325: LD_INT 2
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 1
45334: NEG
45335: PUSH
45336: LD_INT 1
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 2
45345: NEG
45346: PUSH
45347: LD_INT 0
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 2
45356: NEG
45357: PUSH
45358: LD_INT 1
45360: NEG
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 2
45368: NEG
45369: PUSH
45370: LD_INT 2
45372: NEG
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45399: LD_ADDR_VAR 0 55
45403: PUSH
45404: LD_INT 0
45406: PUSH
45407: LD_INT 0
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 0
45416: PUSH
45417: LD_INT 1
45419: NEG
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 1
45427: PUSH
45428: LD_INT 0
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 1
45437: PUSH
45438: LD_INT 1
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 0
45447: PUSH
45448: LD_INT 1
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 1
45457: NEG
45458: PUSH
45459: LD_INT 0
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 1
45468: NEG
45469: PUSH
45470: LD_INT 1
45472: NEG
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 1
45480: NEG
45481: PUSH
45482: LD_INT 2
45484: NEG
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 0
45492: PUSH
45493: LD_INT 2
45495: NEG
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 1
45503: PUSH
45504: LD_INT 1
45506: NEG
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 2
45514: PUSH
45515: LD_INT 0
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 2
45524: PUSH
45525: LD_INT 1
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 2
45534: PUSH
45535: LD_INT 2
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 1
45544: PUSH
45545: LD_INT 2
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 0
45554: PUSH
45555: LD_INT 2
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 1
45564: NEG
45565: PUSH
45566: LD_INT 1
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 2
45575: NEG
45576: PUSH
45577: LD_INT 0
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 2
45586: NEG
45587: PUSH
45588: LD_INT 1
45590: NEG
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 2
45598: NEG
45599: PUSH
45600: LD_INT 2
45602: NEG
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45629: LD_ADDR_VAR 0 56
45633: PUSH
45634: LD_INT 0
45636: PUSH
45637: LD_INT 0
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 0
45646: PUSH
45647: LD_INT 1
45649: NEG
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 1
45657: PUSH
45658: LD_INT 0
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 1
45667: PUSH
45668: LD_INT 1
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 0
45677: PUSH
45678: LD_INT 1
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 1
45687: NEG
45688: PUSH
45689: LD_INT 0
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 1
45698: NEG
45699: PUSH
45700: LD_INT 1
45702: NEG
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 1
45710: NEG
45711: PUSH
45712: LD_INT 2
45714: NEG
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 0
45722: PUSH
45723: LD_INT 2
45725: NEG
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 1
45733: PUSH
45734: LD_INT 1
45736: NEG
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 2
45744: PUSH
45745: LD_INT 0
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 2
45754: PUSH
45755: LD_INT 1
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 2
45764: PUSH
45765: LD_INT 2
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 1
45774: PUSH
45775: LD_INT 2
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 0
45784: PUSH
45785: LD_INT 2
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 1
45794: NEG
45795: PUSH
45796: LD_INT 1
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 2
45805: NEG
45806: PUSH
45807: LD_INT 0
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 2
45816: NEG
45817: PUSH
45818: LD_INT 1
45820: NEG
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 2
45828: NEG
45829: PUSH
45830: LD_INT 2
45832: NEG
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45859: LD_ADDR_VAR 0 57
45863: PUSH
45864: LD_INT 0
45866: PUSH
45867: LD_INT 0
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 0
45876: PUSH
45877: LD_INT 1
45879: NEG
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 1
45887: PUSH
45888: LD_INT 0
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 1
45897: PUSH
45898: LD_INT 1
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 0
45907: PUSH
45908: LD_INT 1
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 1
45917: NEG
45918: PUSH
45919: LD_INT 0
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 1
45928: NEG
45929: PUSH
45930: LD_INT 1
45932: NEG
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 1
45940: NEG
45941: PUSH
45942: LD_INT 2
45944: NEG
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 0
45952: PUSH
45953: LD_INT 2
45955: NEG
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 1
45963: PUSH
45964: LD_INT 1
45966: NEG
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 2
45974: PUSH
45975: LD_INT 0
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 2
45984: PUSH
45985: LD_INT 1
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 2
45994: PUSH
45995: LD_INT 2
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 1
46004: PUSH
46005: LD_INT 2
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 0
46014: PUSH
46015: LD_INT 2
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 1
46024: NEG
46025: PUSH
46026: LD_INT 1
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 2
46035: NEG
46036: PUSH
46037: LD_INT 0
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 2
46046: NEG
46047: PUSH
46048: LD_INT 1
46050: NEG
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 2
46058: NEG
46059: PUSH
46060: LD_INT 2
46062: NEG
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46089: LD_ADDR_VAR 0 58
46093: PUSH
46094: LD_INT 0
46096: PUSH
46097: LD_INT 0
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 0
46106: PUSH
46107: LD_INT 1
46109: NEG
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 1
46117: PUSH
46118: LD_INT 0
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 1
46127: PUSH
46128: LD_INT 1
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 0
46137: PUSH
46138: LD_INT 1
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 1
46147: NEG
46148: PUSH
46149: LD_INT 0
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 1
46158: NEG
46159: PUSH
46160: LD_INT 1
46162: NEG
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 1
46170: NEG
46171: PUSH
46172: LD_INT 2
46174: NEG
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 0
46182: PUSH
46183: LD_INT 2
46185: NEG
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 1
46193: PUSH
46194: LD_INT 1
46196: NEG
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 2
46204: PUSH
46205: LD_INT 0
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 2
46214: PUSH
46215: LD_INT 1
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 2
46224: PUSH
46225: LD_INT 2
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 1
46234: PUSH
46235: LD_INT 2
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 0
46244: PUSH
46245: LD_INT 2
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 1
46254: NEG
46255: PUSH
46256: LD_INT 1
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 2
46265: NEG
46266: PUSH
46267: LD_INT 0
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 2
46276: NEG
46277: PUSH
46278: LD_INT 1
46280: NEG
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 2
46288: NEG
46289: PUSH
46290: LD_INT 2
46292: NEG
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46319: LD_ADDR_VAR 0 59
46323: PUSH
46324: LD_INT 0
46326: PUSH
46327: LD_INT 0
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 0
46336: PUSH
46337: LD_INT 1
46339: NEG
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 1
46347: PUSH
46348: LD_INT 0
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 1
46357: PUSH
46358: LD_INT 1
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 0
46367: PUSH
46368: LD_INT 1
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 1
46377: NEG
46378: PUSH
46379: LD_INT 0
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 1
46388: NEG
46389: PUSH
46390: LD_INT 1
46392: NEG
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46407: LD_ADDR_VAR 0 60
46411: PUSH
46412: LD_INT 0
46414: PUSH
46415: LD_INT 0
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 0
46424: PUSH
46425: LD_INT 1
46427: NEG
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 1
46435: PUSH
46436: LD_INT 0
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 1
46445: PUSH
46446: LD_INT 1
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 0
46455: PUSH
46456: LD_INT 1
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 1
46465: NEG
46466: PUSH
46467: LD_INT 0
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 1
46476: NEG
46477: PUSH
46478: LD_INT 1
46480: NEG
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46495: LD_ADDR_VAR 0 61
46499: PUSH
46500: LD_INT 0
46502: PUSH
46503: LD_INT 0
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 0
46512: PUSH
46513: LD_INT 1
46515: NEG
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 1
46523: PUSH
46524: LD_INT 0
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 1
46533: PUSH
46534: LD_INT 1
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 0
46543: PUSH
46544: LD_INT 1
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 1
46553: NEG
46554: PUSH
46555: LD_INT 0
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 1
46564: NEG
46565: PUSH
46566: LD_INT 1
46568: NEG
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46583: LD_ADDR_VAR 0 62
46587: PUSH
46588: LD_INT 0
46590: PUSH
46591: LD_INT 0
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 0
46600: PUSH
46601: LD_INT 1
46603: NEG
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 1
46611: PUSH
46612: LD_INT 0
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 1
46621: PUSH
46622: LD_INT 1
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 0
46631: PUSH
46632: LD_INT 1
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 1
46641: NEG
46642: PUSH
46643: LD_INT 0
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 1
46652: NEG
46653: PUSH
46654: LD_INT 1
46656: NEG
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46671: LD_ADDR_VAR 0 63
46675: PUSH
46676: LD_INT 0
46678: PUSH
46679: LD_INT 0
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 0
46688: PUSH
46689: LD_INT 1
46691: NEG
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 1
46699: PUSH
46700: LD_INT 0
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 1
46709: PUSH
46710: LD_INT 1
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 0
46719: PUSH
46720: LD_INT 1
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 1
46729: NEG
46730: PUSH
46731: LD_INT 0
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 1
46740: NEG
46741: PUSH
46742: LD_INT 1
46744: NEG
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46759: LD_ADDR_VAR 0 64
46763: PUSH
46764: LD_INT 0
46766: PUSH
46767: LD_INT 0
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 0
46776: PUSH
46777: LD_INT 1
46779: NEG
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 1
46787: PUSH
46788: LD_INT 0
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 1
46797: PUSH
46798: LD_INT 1
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 0
46807: PUSH
46808: LD_INT 1
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 1
46817: NEG
46818: PUSH
46819: LD_INT 0
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: LD_INT 1
46832: NEG
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: ST_TO_ADDR
// end ; 1 :
46847: GO 52744
46849: LD_INT 1
46851: DOUBLE
46852: EQUAL
46853: IFTRUE 46857
46855: GO 49480
46857: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46858: LD_ADDR_VAR 0 11
46862: PUSH
46863: LD_INT 1
46865: NEG
46866: PUSH
46867: LD_INT 3
46869: NEG
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 0
46877: PUSH
46878: LD_INT 3
46880: NEG
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 1
46888: PUSH
46889: LD_INT 2
46891: NEG
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: LIST
46901: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46902: LD_ADDR_VAR 0 12
46906: PUSH
46907: LD_INT 2
46909: PUSH
46910: LD_INT 1
46912: NEG
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 3
46920: PUSH
46921: LD_INT 0
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 3
46930: PUSH
46931: LD_INT 1
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: LIST
46942: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46943: LD_ADDR_VAR 0 13
46947: PUSH
46948: LD_INT 3
46950: PUSH
46951: LD_INT 2
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 3
46960: PUSH
46961: LD_INT 3
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 2
46970: PUSH
46971: LD_INT 3
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: LIST
46982: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46983: LD_ADDR_VAR 0 14
46987: PUSH
46988: LD_INT 1
46990: PUSH
46991: LD_INT 3
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 0
47000: PUSH
47001: LD_INT 3
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 1
47010: NEG
47011: PUSH
47012: LD_INT 2
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: LIST
47023: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47024: LD_ADDR_VAR 0 15
47028: PUSH
47029: LD_INT 2
47031: NEG
47032: PUSH
47033: LD_INT 1
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 3
47042: NEG
47043: PUSH
47044: LD_INT 0
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 3
47053: NEG
47054: PUSH
47055: LD_INT 1
47057: NEG
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: LIST
47067: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47068: LD_ADDR_VAR 0 16
47072: PUSH
47073: LD_INT 2
47075: NEG
47076: PUSH
47077: LD_INT 3
47079: NEG
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 3
47087: NEG
47088: PUSH
47089: LD_INT 2
47091: NEG
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 3
47099: NEG
47100: PUSH
47101: LD_INT 3
47103: NEG
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: LIST
47113: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47114: LD_ADDR_VAR 0 17
47118: PUSH
47119: LD_INT 1
47121: NEG
47122: PUSH
47123: LD_INT 3
47125: NEG
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 0
47133: PUSH
47134: LD_INT 3
47136: NEG
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 1
47144: PUSH
47145: LD_INT 2
47147: NEG
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: LIST
47157: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47158: LD_ADDR_VAR 0 18
47162: PUSH
47163: LD_INT 2
47165: PUSH
47166: LD_INT 1
47168: NEG
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 3
47176: PUSH
47177: LD_INT 0
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 3
47186: PUSH
47187: LD_INT 1
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: LIST
47198: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47199: LD_ADDR_VAR 0 19
47203: PUSH
47204: LD_INT 3
47206: PUSH
47207: LD_INT 2
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 3
47216: PUSH
47217: LD_INT 3
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 2
47226: PUSH
47227: LD_INT 3
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: LIST
47238: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47239: LD_ADDR_VAR 0 20
47243: PUSH
47244: LD_INT 1
47246: PUSH
47247: LD_INT 3
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 0
47256: PUSH
47257: LD_INT 3
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 1
47266: NEG
47267: PUSH
47268: LD_INT 2
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: LIST
47279: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47280: LD_ADDR_VAR 0 21
47284: PUSH
47285: LD_INT 2
47287: NEG
47288: PUSH
47289: LD_INT 1
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 3
47298: NEG
47299: PUSH
47300: LD_INT 0
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 3
47309: NEG
47310: PUSH
47311: LD_INT 1
47313: NEG
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: LIST
47323: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47324: LD_ADDR_VAR 0 22
47328: PUSH
47329: LD_INT 2
47331: NEG
47332: PUSH
47333: LD_INT 3
47335: NEG
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 3
47343: NEG
47344: PUSH
47345: LD_INT 2
47347: NEG
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 3
47355: NEG
47356: PUSH
47357: LD_INT 3
47359: NEG
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: LIST
47369: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47370: LD_ADDR_VAR 0 23
47374: PUSH
47375: LD_INT 0
47377: PUSH
47378: LD_INT 3
47380: NEG
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 1
47388: NEG
47389: PUSH
47390: LD_INT 4
47392: NEG
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 1
47400: PUSH
47401: LD_INT 3
47403: NEG
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: LIST
47413: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47414: LD_ADDR_VAR 0 24
47418: PUSH
47419: LD_INT 3
47421: PUSH
47422: LD_INT 0
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 3
47431: PUSH
47432: LD_INT 1
47434: NEG
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 4
47442: PUSH
47443: LD_INT 1
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: LIST
47454: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47455: LD_ADDR_VAR 0 25
47459: PUSH
47460: LD_INT 3
47462: PUSH
47463: LD_INT 3
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 4
47472: PUSH
47473: LD_INT 3
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 3
47482: PUSH
47483: LD_INT 4
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: LIST
47494: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47495: LD_ADDR_VAR 0 26
47499: PUSH
47500: LD_INT 0
47502: PUSH
47503: LD_INT 3
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 1
47512: PUSH
47513: LD_INT 4
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 1
47522: NEG
47523: PUSH
47524: LD_INT 3
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: LIST
47535: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47536: LD_ADDR_VAR 0 27
47540: PUSH
47541: LD_INT 3
47543: NEG
47544: PUSH
47545: LD_INT 0
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 3
47554: NEG
47555: PUSH
47556: LD_INT 1
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 4
47565: NEG
47566: PUSH
47567: LD_INT 1
47569: NEG
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: LIST
47579: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47580: LD_ADDR_VAR 0 28
47584: PUSH
47585: LD_INT 3
47587: NEG
47588: PUSH
47589: LD_INT 3
47591: NEG
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 3
47599: NEG
47600: PUSH
47601: LD_INT 4
47603: NEG
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 4
47611: NEG
47612: PUSH
47613: LD_INT 3
47615: NEG
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: LIST
47625: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47626: LD_ADDR_VAR 0 29
47630: PUSH
47631: LD_INT 1
47633: NEG
47634: PUSH
47635: LD_INT 3
47637: NEG
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 0
47645: PUSH
47646: LD_INT 3
47648: NEG
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 1
47656: PUSH
47657: LD_INT 2
47659: NEG
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 1
47667: NEG
47668: PUSH
47669: LD_INT 4
47671: NEG
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 0
47679: PUSH
47680: LD_INT 4
47682: NEG
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 1
47690: PUSH
47691: LD_INT 3
47693: NEG
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 1
47701: NEG
47702: PUSH
47703: LD_INT 5
47705: NEG
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 0
47713: PUSH
47714: LD_INT 5
47716: NEG
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 1
47724: PUSH
47725: LD_INT 4
47727: NEG
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 1
47735: NEG
47736: PUSH
47737: LD_INT 6
47739: NEG
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 0
47747: PUSH
47748: LD_INT 6
47750: NEG
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 1
47758: PUSH
47759: LD_INT 5
47761: NEG
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47781: LD_ADDR_VAR 0 30
47785: PUSH
47786: LD_INT 2
47788: PUSH
47789: LD_INT 1
47791: NEG
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 3
47799: PUSH
47800: LD_INT 0
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 3
47809: PUSH
47810: LD_INT 1
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 3
47819: PUSH
47820: LD_INT 1
47822: NEG
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 4
47830: PUSH
47831: LD_INT 0
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 4
47840: PUSH
47841: LD_INT 1
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 4
47850: PUSH
47851: LD_INT 1
47853: NEG
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 5
47861: PUSH
47862: LD_INT 0
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 5
47871: PUSH
47872: LD_INT 1
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 5
47881: PUSH
47882: LD_INT 1
47884: NEG
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 6
47892: PUSH
47893: LD_INT 0
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 6
47902: PUSH
47903: LD_INT 1
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47924: LD_ADDR_VAR 0 31
47928: PUSH
47929: LD_INT 3
47931: PUSH
47932: LD_INT 2
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 3
47941: PUSH
47942: LD_INT 3
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 2
47951: PUSH
47952: LD_INT 3
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 4
47961: PUSH
47962: LD_INT 3
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 4
47971: PUSH
47972: LD_INT 4
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 3
47981: PUSH
47982: LD_INT 4
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 5
47991: PUSH
47992: LD_INT 4
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 5
48001: PUSH
48002: LD_INT 5
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 4
48011: PUSH
48012: LD_INT 5
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 6
48021: PUSH
48022: LD_INT 5
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 6
48031: PUSH
48032: LD_INT 6
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 5
48041: PUSH
48042: LD_INT 6
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48063: LD_ADDR_VAR 0 32
48067: PUSH
48068: LD_INT 1
48070: PUSH
48071: LD_INT 3
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 0
48080: PUSH
48081: LD_INT 3
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 1
48090: NEG
48091: PUSH
48092: LD_INT 2
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 1
48101: PUSH
48102: LD_INT 4
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 0
48111: PUSH
48112: LD_INT 4
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 1
48121: NEG
48122: PUSH
48123: LD_INT 3
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 1
48132: PUSH
48133: LD_INT 5
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 0
48142: PUSH
48143: LD_INT 5
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 1
48152: NEG
48153: PUSH
48154: LD_INT 4
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 1
48163: PUSH
48164: LD_INT 6
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 0
48173: PUSH
48174: LD_INT 6
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 1
48183: NEG
48184: PUSH
48185: LD_INT 5
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48206: LD_ADDR_VAR 0 33
48210: PUSH
48211: LD_INT 2
48213: NEG
48214: PUSH
48215: LD_INT 1
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 3
48224: NEG
48225: PUSH
48226: LD_INT 0
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 3
48235: NEG
48236: PUSH
48237: LD_INT 1
48239: NEG
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 3
48247: NEG
48248: PUSH
48249: LD_INT 1
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 4
48258: NEG
48259: PUSH
48260: LD_INT 0
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 4
48269: NEG
48270: PUSH
48271: LD_INT 1
48273: NEG
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 4
48281: NEG
48282: PUSH
48283: LD_INT 1
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 5
48292: NEG
48293: PUSH
48294: LD_INT 0
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 5
48303: NEG
48304: PUSH
48305: LD_INT 1
48307: NEG
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 5
48315: NEG
48316: PUSH
48317: LD_INT 1
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 6
48326: NEG
48327: PUSH
48328: LD_INT 0
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 6
48337: NEG
48338: PUSH
48339: LD_INT 1
48341: NEG
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48361: LD_ADDR_VAR 0 34
48365: PUSH
48366: LD_INT 2
48368: NEG
48369: PUSH
48370: LD_INT 3
48372: NEG
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 3
48380: NEG
48381: PUSH
48382: LD_INT 2
48384: NEG
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 3
48392: NEG
48393: PUSH
48394: LD_INT 3
48396: NEG
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 3
48404: NEG
48405: PUSH
48406: LD_INT 4
48408: NEG
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 4
48416: NEG
48417: PUSH
48418: LD_INT 3
48420: NEG
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 4
48428: NEG
48429: PUSH
48430: LD_INT 4
48432: NEG
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 4
48440: NEG
48441: PUSH
48442: LD_INT 5
48444: NEG
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 5
48452: NEG
48453: PUSH
48454: LD_INT 4
48456: NEG
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 5
48464: NEG
48465: PUSH
48466: LD_INT 5
48468: NEG
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 5
48476: NEG
48477: PUSH
48478: LD_INT 6
48480: NEG
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 6
48488: NEG
48489: PUSH
48490: LD_INT 5
48492: NEG
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 6
48500: NEG
48501: PUSH
48502: LD_INT 6
48504: NEG
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48524: LD_ADDR_VAR 0 41
48528: PUSH
48529: LD_INT 0
48531: PUSH
48532: LD_INT 2
48534: NEG
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 1
48542: NEG
48543: PUSH
48544: LD_INT 3
48546: NEG
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 1
48554: PUSH
48555: LD_INT 2
48557: NEG
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: LIST
48567: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48568: LD_ADDR_VAR 0 42
48572: PUSH
48573: LD_INT 2
48575: PUSH
48576: LD_INT 0
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 2
48585: PUSH
48586: LD_INT 1
48588: NEG
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 3
48596: PUSH
48597: LD_INT 1
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: LIST
48608: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48609: LD_ADDR_VAR 0 43
48613: PUSH
48614: LD_INT 2
48616: PUSH
48617: LD_INT 2
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 3
48626: PUSH
48627: LD_INT 2
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 2
48636: PUSH
48637: LD_INT 3
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: LIST
48648: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48649: LD_ADDR_VAR 0 44
48653: PUSH
48654: LD_INT 0
48656: PUSH
48657: LD_INT 2
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 1
48666: PUSH
48667: LD_INT 3
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 1
48676: NEG
48677: PUSH
48678: LD_INT 2
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: LIST
48689: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48690: LD_ADDR_VAR 0 45
48694: PUSH
48695: LD_INT 2
48697: NEG
48698: PUSH
48699: LD_INT 0
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 2
48708: NEG
48709: PUSH
48710: LD_INT 1
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 3
48719: NEG
48720: PUSH
48721: LD_INT 1
48723: NEG
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: LIST
48733: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48734: LD_ADDR_VAR 0 46
48738: PUSH
48739: LD_INT 2
48741: NEG
48742: PUSH
48743: LD_INT 2
48745: NEG
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 2
48753: NEG
48754: PUSH
48755: LD_INT 3
48757: NEG
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 3
48765: NEG
48766: PUSH
48767: LD_INT 2
48769: NEG
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: LIST
48779: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48780: LD_ADDR_VAR 0 47
48784: PUSH
48785: LD_INT 2
48787: NEG
48788: PUSH
48789: LD_INT 3
48791: NEG
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 1
48799: NEG
48800: PUSH
48801: LD_INT 3
48803: NEG
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48813: LD_ADDR_VAR 0 48
48817: PUSH
48818: LD_INT 1
48820: PUSH
48821: LD_INT 2
48823: NEG
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 2
48831: PUSH
48832: LD_INT 1
48834: NEG
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48844: LD_ADDR_VAR 0 49
48848: PUSH
48849: LD_INT 3
48851: PUSH
48852: LD_INT 1
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 3
48861: PUSH
48862: LD_INT 2
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48873: LD_ADDR_VAR 0 50
48877: PUSH
48878: LD_INT 2
48880: PUSH
48881: LD_INT 3
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 1
48890: PUSH
48891: LD_INT 3
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48902: LD_ADDR_VAR 0 51
48906: PUSH
48907: LD_INT 1
48909: NEG
48910: PUSH
48911: LD_INT 2
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 2
48920: NEG
48921: PUSH
48922: LD_INT 1
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48933: LD_ADDR_VAR 0 52
48937: PUSH
48938: LD_INT 3
48940: NEG
48941: PUSH
48942: LD_INT 1
48944: NEG
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 3
48952: NEG
48953: PUSH
48954: LD_INT 2
48956: NEG
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48966: LD_ADDR_VAR 0 53
48970: PUSH
48971: LD_INT 1
48973: NEG
48974: PUSH
48975: LD_INT 3
48977: NEG
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 0
48985: PUSH
48986: LD_INT 3
48988: NEG
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 1
48996: PUSH
48997: LD_INT 2
48999: NEG
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: LIST
49009: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49010: LD_ADDR_VAR 0 54
49014: PUSH
49015: LD_INT 2
49017: PUSH
49018: LD_INT 1
49020: NEG
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 3
49028: PUSH
49029: LD_INT 0
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 3
49038: PUSH
49039: LD_INT 1
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: LIST
49050: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49051: LD_ADDR_VAR 0 55
49055: PUSH
49056: LD_INT 3
49058: PUSH
49059: LD_INT 2
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 3
49068: PUSH
49069: LD_INT 3
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 2
49078: PUSH
49079: LD_INT 3
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: LIST
49090: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49091: LD_ADDR_VAR 0 56
49095: PUSH
49096: LD_INT 1
49098: PUSH
49099: LD_INT 3
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 0
49108: PUSH
49109: LD_INT 3
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 1
49118: NEG
49119: PUSH
49120: LD_INT 2
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: LIST
49131: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49132: LD_ADDR_VAR 0 57
49136: PUSH
49137: LD_INT 2
49139: NEG
49140: PUSH
49141: LD_INT 1
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 3
49150: NEG
49151: PUSH
49152: LD_INT 0
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 3
49161: NEG
49162: PUSH
49163: LD_INT 1
49165: NEG
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: LIST
49175: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49176: LD_ADDR_VAR 0 58
49180: PUSH
49181: LD_INT 2
49183: NEG
49184: PUSH
49185: LD_INT 3
49187: NEG
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 3
49195: NEG
49196: PUSH
49197: LD_INT 2
49199: NEG
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 3
49207: NEG
49208: PUSH
49209: LD_INT 3
49211: NEG
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: LIST
49221: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49222: LD_ADDR_VAR 0 59
49226: PUSH
49227: LD_INT 1
49229: NEG
49230: PUSH
49231: LD_INT 2
49233: NEG
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 0
49241: PUSH
49242: LD_INT 2
49244: NEG
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 1
49252: PUSH
49253: LD_INT 1
49255: NEG
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: LIST
49265: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49266: LD_ADDR_VAR 0 60
49270: PUSH
49271: LD_INT 1
49273: PUSH
49274: LD_INT 1
49276: NEG
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 2
49284: PUSH
49285: LD_INT 0
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 2
49294: PUSH
49295: LD_INT 1
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: LIST
49306: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49307: LD_ADDR_VAR 0 61
49311: PUSH
49312: LD_INT 2
49314: PUSH
49315: LD_INT 1
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 2
49324: PUSH
49325: LD_INT 2
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 1
49334: PUSH
49335: LD_INT 2
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: LIST
49346: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49347: LD_ADDR_VAR 0 62
49351: PUSH
49352: LD_INT 1
49354: PUSH
49355: LD_INT 2
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 0
49364: PUSH
49365: LD_INT 2
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 1
49374: NEG
49375: PUSH
49376: LD_INT 1
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: LIST
49387: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49388: LD_ADDR_VAR 0 63
49392: PUSH
49393: LD_INT 1
49395: NEG
49396: PUSH
49397: LD_INT 1
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 2
49406: NEG
49407: PUSH
49408: LD_INT 0
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 2
49417: NEG
49418: PUSH
49419: LD_INT 1
49421: NEG
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: LIST
49431: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49432: LD_ADDR_VAR 0 64
49436: PUSH
49437: LD_INT 1
49439: NEG
49440: PUSH
49441: LD_INT 2
49443: NEG
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 2
49451: NEG
49452: PUSH
49453: LD_INT 1
49455: NEG
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 2
49463: NEG
49464: PUSH
49465: LD_INT 2
49467: NEG
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: LIST
49477: ST_TO_ADDR
// end ; 2 :
49478: GO 52744
49480: LD_INT 2
49482: DOUBLE
49483: EQUAL
49484: IFTRUE 49488
49486: GO 52743
49488: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49489: LD_ADDR_VAR 0 29
49493: PUSH
49494: LD_INT 4
49496: PUSH
49497: LD_INT 0
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 4
49506: PUSH
49507: LD_INT 1
49509: NEG
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 5
49517: PUSH
49518: LD_INT 0
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 5
49527: PUSH
49528: LD_INT 1
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 4
49537: PUSH
49538: LD_INT 1
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 3
49547: PUSH
49548: LD_INT 0
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 3
49557: PUSH
49558: LD_INT 1
49560: NEG
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 3
49568: PUSH
49569: LD_INT 2
49571: NEG
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 5
49579: PUSH
49580: LD_INT 2
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 3
49589: PUSH
49590: LD_INT 3
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 3
49599: PUSH
49600: LD_INT 2
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 4
49609: PUSH
49610: LD_INT 3
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 4
49619: PUSH
49620: LD_INT 4
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 3
49629: PUSH
49630: LD_INT 4
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 2
49639: PUSH
49640: LD_INT 3
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 2
49649: PUSH
49650: LD_INT 2
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 4
49659: PUSH
49660: LD_INT 2
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 2
49669: PUSH
49670: LD_INT 4
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 0
49679: PUSH
49680: LD_INT 4
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 0
49689: PUSH
49690: LD_INT 3
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 1
49699: PUSH
49700: LD_INT 4
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 1
49709: PUSH
49710: LD_INT 5
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 0
49719: PUSH
49720: LD_INT 5
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 1
49729: NEG
49730: PUSH
49731: LD_INT 4
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 1
49740: NEG
49741: PUSH
49742: LD_INT 3
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 2
49751: PUSH
49752: LD_INT 5
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 2
49761: NEG
49762: PUSH
49763: LD_INT 3
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 3
49772: NEG
49773: PUSH
49774: LD_INT 0
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 3
49783: NEG
49784: PUSH
49785: LD_INT 1
49787: NEG
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 2
49795: NEG
49796: PUSH
49797: LD_INT 0
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 2
49806: NEG
49807: PUSH
49808: LD_INT 1
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 3
49817: NEG
49818: PUSH
49819: LD_INT 1
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 4
49828: NEG
49829: PUSH
49830: LD_INT 0
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 4
49839: NEG
49840: PUSH
49841: LD_INT 1
49843: NEG
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 4
49851: NEG
49852: PUSH
49853: LD_INT 2
49855: NEG
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 2
49863: NEG
49864: PUSH
49865: LD_INT 2
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 4
49874: NEG
49875: PUSH
49876: LD_INT 4
49878: NEG
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 4
49886: NEG
49887: PUSH
49888: LD_INT 5
49890: NEG
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 3
49898: NEG
49899: PUSH
49900: LD_INT 4
49902: NEG
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 3
49910: NEG
49911: PUSH
49912: LD_INT 3
49914: NEG
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 4
49922: NEG
49923: PUSH
49924: LD_INT 3
49926: NEG
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 5
49934: NEG
49935: PUSH
49936: LD_INT 4
49938: NEG
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 5
49946: NEG
49947: PUSH
49948: LD_INT 5
49950: NEG
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 3
49958: NEG
49959: PUSH
49960: LD_INT 5
49962: NEG
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 5
49970: NEG
49971: PUSH
49972: LD_INT 3
49974: NEG
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50027: LD_ADDR_VAR 0 30
50031: PUSH
50032: LD_INT 4
50034: PUSH
50035: LD_INT 4
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 4
50044: PUSH
50045: LD_INT 3
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 5
50054: PUSH
50055: LD_INT 4
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 5
50064: PUSH
50065: LD_INT 5
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 4
50074: PUSH
50075: LD_INT 5
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 3
50084: PUSH
50085: LD_INT 4
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 3
50094: PUSH
50095: LD_INT 3
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 5
50104: PUSH
50105: LD_INT 3
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 3
50114: PUSH
50115: LD_INT 5
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 0
50124: PUSH
50125: LD_INT 3
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 0
50134: PUSH
50135: LD_INT 2
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 1
50144: PUSH
50145: LD_INT 3
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 1
50154: PUSH
50155: LD_INT 4
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 0
50164: PUSH
50165: LD_INT 4
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 1
50174: NEG
50175: PUSH
50176: LD_INT 3
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 1
50185: NEG
50186: PUSH
50187: LD_INT 2
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 2
50196: PUSH
50197: LD_INT 4
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 2
50206: NEG
50207: PUSH
50208: LD_INT 2
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 4
50217: NEG
50218: PUSH
50219: LD_INT 0
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 4
50228: NEG
50229: PUSH
50230: LD_INT 1
50232: NEG
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 3
50240: NEG
50241: PUSH
50242: LD_INT 0
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 3
50251: NEG
50252: PUSH
50253: LD_INT 1
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 4
50262: NEG
50263: PUSH
50264: LD_INT 1
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 5
50273: NEG
50274: PUSH
50275: LD_INT 0
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 5
50284: NEG
50285: PUSH
50286: LD_INT 1
50288: NEG
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 5
50296: NEG
50297: PUSH
50298: LD_INT 2
50300: NEG
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 3
50308: NEG
50309: PUSH
50310: LD_INT 2
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 3
50319: NEG
50320: PUSH
50321: LD_INT 3
50323: NEG
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 3
50331: NEG
50332: PUSH
50333: LD_INT 4
50335: NEG
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 2
50343: NEG
50344: PUSH
50345: LD_INT 3
50347: NEG
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 2
50355: NEG
50356: PUSH
50357: LD_INT 2
50359: NEG
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 3
50367: NEG
50368: PUSH
50369: LD_INT 2
50371: NEG
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 4
50379: NEG
50380: PUSH
50381: LD_INT 3
50383: NEG
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 4
50391: NEG
50392: PUSH
50393: LD_INT 4
50395: NEG
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 2
50403: NEG
50404: PUSH
50405: LD_INT 4
50407: NEG
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 4
50415: NEG
50416: PUSH
50417: LD_INT 2
50419: NEG
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 0
50427: PUSH
50428: LD_INT 4
50430: NEG
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 0
50438: PUSH
50439: LD_INT 5
50441: NEG
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 1
50449: PUSH
50450: LD_INT 4
50452: NEG
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 1
50460: PUSH
50461: LD_INT 3
50463: NEG
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 0
50471: PUSH
50472: LD_INT 3
50474: NEG
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 1
50482: NEG
50483: PUSH
50484: LD_INT 4
50486: NEG
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 1
50494: NEG
50495: PUSH
50496: LD_INT 5
50498: NEG
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 2
50506: PUSH
50507: LD_INT 3
50509: NEG
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 2
50517: NEG
50518: PUSH
50519: LD_INT 5
50521: NEG
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50574: LD_ADDR_VAR 0 31
50578: PUSH
50579: LD_INT 0
50581: PUSH
50582: LD_INT 4
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 0
50591: PUSH
50592: LD_INT 3
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 1
50601: PUSH
50602: LD_INT 4
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 1
50611: PUSH
50612: LD_INT 5
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 0
50621: PUSH
50622: LD_INT 5
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 1
50631: NEG
50632: PUSH
50633: LD_INT 4
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 1
50642: NEG
50643: PUSH
50644: LD_INT 3
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 2
50653: PUSH
50654: LD_INT 5
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 2
50663: NEG
50664: PUSH
50665: LD_INT 3
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 3
50674: NEG
50675: PUSH
50676: LD_INT 0
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 3
50685: NEG
50686: PUSH
50687: LD_INT 1
50689: NEG
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 2
50697: NEG
50698: PUSH
50699: LD_INT 0
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 2
50708: NEG
50709: PUSH
50710: LD_INT 1
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 3
50719: NEG
50720: PUSH
50721: LD_INT 1
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 4
50730: NEG
50731: PUSH
50732: LD_INT 0
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 4
50741: NEG
50742: PUSH
50743: LD_INT 1
50745: NEG
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 4
50753: NEG
50754: PUSH
50755: LD_INT 2
50757: NEG
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 2
50765: NEG
50766: PUSH
50767: LD_INT 2
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 4
50776: NEG
50777: PUSH
50778: LD_INT 4
50780: NEG
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 4
50788: NEG
50789: PUSH
50790: LD_INT 5
50792: NEG
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 3
50800: NEG
50801: PUSH
50802: LD_INT 4
50804: NEG
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 3
50812: NEG
50813: PUSH
50814: LD_INT 3
50816: NEG
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 4
50824: NEG
50825: PUSH
50826: LD_INT 3
50828: NEG
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 5
50836: NEG
50837: PUSH
50838: LD_INT 4
50840: NEG
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 5
50848: NEG
50849: PUSH
50850: LD_INT 5
50852: NEG
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 3
50860: NEG
50861: PUSH
50862: LD_INT 5
50864: NEG
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 5
50872: NEG
50873: PUSH
50874: LD_INT 3
50876: NEG
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 0
50884: PUSH
50885: LD_INT 3
50887: NEG
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 0
50895: PUSH
50896: LD_INT 4
50898: NEG
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 1
50906: PUSH
50907: LD_INT 3
50909: NEG
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 1
50917: PUSH
50918: LD_INT 2
50920: NEG
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 0
50928: PUSH
50929: LD_INT 2
50931: NEG
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 1
50939: NEG
50940: PUSH
50941: LD_INT 3
50943: NEG
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 1
50951: NEG
50952: PUSH
50953: LD_INT 4
50955: NEG
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 2
50963: PUSH
50964: LD_INT 2
50966: NEG
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 2
50974: NEG
50975: PUSH
50976: LD_INT 4
50978: NEG
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 4
50986: PUSH
50987: LD_INT 0
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 4
50996: PUSH
50997: LD_INT 1
50999: NEG
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 5
51007: PUSH
51008: LD_INT 0
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 5
51017: PUSH
51018: LD_INT 1
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 4
51027: PUSH
51028: LD_INT 1
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 3
51037: PUSH
51038: LD_INT 0
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 3
51047: PUSH
51048: LD_INT 1
51050: NEG
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 3
51058: PUSH
51059: LD_INT 2
51061: NEG
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 5
51069: PUSH
51070: LD_INT 2
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51124: LD_ADDR_VAR 0 32
51128: PUSH
51129: LD_INT 4
51131: NEG
51132: PUSH
51133: LD_INT 0
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 4
51142: NEG
51143: PUSH
51144: LD_INT 1
51146: NEG
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 3
51154: NEG
51155: PUSH
51156: LD_INT 0
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 3
51165: NEG
51166: PUSH
51167: LD_INT 1
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 4
51176: NEG
51177: PUSH
51178: LD_INT 1
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 5
51187: NEG
51188: PUSH
51189: LD_INT 0
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 5
51198: NEG
51199: PUSH
51200: LD_INT 1
51202: NEG
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 5
51210: NEG
51211: PUSH
51212: LD_INT 2
51214: NEG
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 3
51222: NEG
51223: PUSH
51224: LD_INT 2
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 3
51233: NEG
51234: PUSH
51235: LD_INT 3
51237: NEG
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 3
51245: NEG
51246: PUSH
51247: LD_INT 4
51249: NEG
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 2
51257: NEG
51258: PUSH
51259: LD_INT 3
51261: NEG
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 2
51269: NEG
51270: PUSH
51271: LD_INT 2
51273: NEG
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 3
51281: NEG
51282: PUSH
51283: LD_INT 2
51285: NEG
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 4
51293: NEG
51294: PUSH
51295: LD_INT 3
51297: NEG
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 4
51305: NEG
51306: PUSH
51307: LD_INT 4
51309: NEG
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 2
51317: NEG
51318: PUSH
51319: LD_INT 4
51321: NEG
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 4
51329: NEG
51330: PUSH
51331: LD_INT 2
51333: NEG
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 0
51341: PUSH
51342: LD_INT 4
51344: NEG
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 0
51352: PUSH
51353: LD_INT 5
51355: NEG
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 1
51363: PUSH
51364: LD_INT 4
51366: NEG
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 1
51374: PUSH
51375: LD_INT 3
51377: NEG
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 0
51385: PUSH
51386: LD_INT 3
51388: NEG
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 1
51396: NEG
51397: PUSH
51398: LD_INT 4
51400: NEG
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 1
51408: NEG
51409: PUSH
51410: LD_INT 5
51412: NEG
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 2
51420: PUSH
51421: LD_INT 3
51423: NEG
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 2
51431: NEG
51432: PUSH
51433: LD_INT 5
51435: NEG
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 3
51443: PUSH
51444: LD_INT 0
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 3
51453: PUSH
51454: LD_INT 1
51456: NEG
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 4
51464: PUSH
51465: LD_INT 0
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 4
51474: PUSH
51475: LD_INT 1
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 3
51484: PUSH
51485: LD_INT 1
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 2
51494: PUSH
51495: LD_INT 0
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 2
51504: PUSH
51505: LD_INT 1
51507: NEG
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 2
51515: PUSH
51516: LD_INT 2
51518: NEG
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 4
51526: PUSH
51527: LD_INT 2
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 4
51536: PUSH
51537: LD_INT 4
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 4
51546: PUSH
51547: LD_INT 3
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 5
51556: PUSH
51557: LD_INT 4
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 5
51566: PUSH
51567: LD_INT 5
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 4
51576: PUSH
51577: LD_INT 5
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 3
51586: PUSH
51587: LD_INT 4
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 3
51596: PUSH
51597: LD_INT 3
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 5
51606: PUSH
51607: LD_INT 3
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 3
51616: PUSH
51617: LD_INT 5
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51671: LD_ADDR_VAR 0 33
51675: PUSH
51676: LD_INT 4
51678: NEG
51679: PUSH
51680: LD_INT 4
51682: NEG
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 4
51690: NEG
51691: PUSH
51692: LD_INT 5
51694: NEG
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 3
51702: NEG
51703: PUSH
51704: LD_INT 4
51706: NEG
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 3
51714: NEG
51715: PUSH
51716: LD_INT 3
51718: NEG
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 4
51726: NEG
51727: PUSH
51728: LD_INT 3
51730: NEG
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 5
51738: NEG
51739: PUSH
51740: LD_INT 4
51742: NEG
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 5
51750: NEG
51751: PUSH
51752: LD_INT 5
51754: NEG
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 3
51762: NEG
51763: PUSH
51764: LD_INT 5
51766: NEG
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 5
51774: NEG
51775: PUSH
51776: LD_INT 3
51778: NEG
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 0
51786: PUSH
51787: LD_INT 3
51789: NEG
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 0
51797: PUSH
51798: LD_INT 4
51800: NEG
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 1
51808: PUSH
51809: LD_INT 3
51811: NEG
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 1
51819: PUSH
51820: LD_INT 2
51822: NEG
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 0
51830: PUSH
51831: LD_INT 2
51833: NEG
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 1
51841: NEG
51842: PUSH
51843: LD_INT 3
51845: NEG
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 1
51853: NEG
51854: PUSH
51855: LD_INT 4
51857: NEG
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 2
51865: PUSH
51866: LD_INT 2
51868: NEG
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 2
51876: NEG
51877: PUSH
51878: LD_INT 4
51880: NEG
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 4
51888: PUSH
51889: LD_INT 0
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 4
51898: PUSH
51899: LD_INT 1
51901: NEG
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 5
51909: PUSH
51910: LD_INT 0
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 5
51919: PUSH
51920: LD_INT 1
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 4
51929: PUSH
51930: LD_INT 1
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 3
51939: PUSH
51940: LD_INT 0
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 3
51949: PUSH
51950: LD_INT 1
51952: NEG
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 3
51960: PUSH
51961: LD_INT 2
51963: NEG
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 5
51971: PUSH
51972: LD_INT 2
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 3
51981: PUSH
51982: LD_INT 3
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 3
51991: PUSH
51992: LD_INT 2
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 4
52001: PUSH
52002: LD_INT 3
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 4
52011: PUSH
52012: LD_INT 4
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 3
52021: PUSH
52022: LD_INT 4
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 2
52031: PUSH
52032: LD_INT 3
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 2
52041: PUSH
52042: LD_INT 2
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 4
52051: PUSH
52052: LD_INT 2
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 2
52061: PUSH
52062: LD_INT 4
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 0
52071: PUSH
52072: LD_INT 4
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 0
52081: PUSH
52082: LD_INT 3
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 1
52091: PUSH
52092: LD_INT 4
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 1
52101: PUSH
52102: LD_INT 5
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 0
52111: PUSH
52112: LD_INT 5
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 1
52121: NEG
52122: PUSH
52123: LD_INT 4
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 1
52132: NEG
52133: PUSH
52134: LD_INT 3
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 2
52143: PUSH
52144: LD_INT 5
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 2
52153: NEG
52154: PUSH
52155: LD_INT 3
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52209: LD_ADDR_VAR 0 34
52213: PUSH
52214: LD_INT 0
52216: PUSH
52217: LD_INT 4
52219: NEG
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 0
52227: PUSH
52228: LD_INT 5
52230: NEG
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 1
52238: PUSH
52239: LD_INT 4
52241: NEG
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 1
52249: PUSH
52250: LD_INT 3
52252: NEG
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 0
52260: PUSH
52261: LD_INT 3
52263: NEG
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 1
52271: NEG
52272: PUSH
52273: LD_INT 4
52275: NEG
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 1
52283: NEG
52284: PUSH
52285: LD_INT 5
52287: NEG
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 2
52295: PUSH
52296: LD_INT 3
52298: NEG
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 2
52306: NEG
52307: PUSH
52308: LD_INT 5
52310: NEG
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 3
52318: PUSH
52319: LD_INT 0
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 3
52328: PUSH
52329: LD_INT 1
52331: NEG
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 4
52339: PUSH
52340: LD_INT 0
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 4
52349: PUSH
52350: LD_INT 1
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 3
52359: PUSH
52360: LD_INT 1
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 2
52369: PUSH
52370: LD_INT 0
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 2
52379: PUSH
52380: LD_INT 1
52382: NEG
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 2
52390: PUSH
52391: LD_INT 2
52393: NEG
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 4
52401: PUSH
52402: LD_INT 2
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 4
52411: PUSH
52412: LD_INT 4
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 4
52421: PUSH
52422: LD_INT 3
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 5
52431: PUSH
52432: LD_INT 4
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 5
52441: PUSH
52442: LD_INT 5
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 4
52451: PUSH
52452: LD_INT 5
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 3
52461: PUSH
52462: LD_INT 4
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 3
52471: PUSH
52472: LD_INT 3
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 5
52481: PUSH
52482: LD_INT 3
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 3
52491: PUSH
52492: LD_INT 5
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 0
52501: PUSH
52502: LD_INT 3
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 0
52511: PUSH
52512: LD_INT 2
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 1
52521: PUSH
52522: LD_INT 3
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 1
52531: PUSH
52532: LD_INT 4
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 0
52541: PUSH
52542: LD_INT 4
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 1
52551: NEG
52552: PUSH
52553: LD_INT 3
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 1
52562: NEG
52563: PUSH
52564: LD_INT 2
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 2
52573: PUSH
52574: LD_INT 4
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 2
52583: NEG
52584: PUSH
52585: LD_INT 2
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 4
52594: NEG
52595: PUSH
52596: LD_INT 0
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 4
52605: NEG
52606: PUSH
52607: LD_INT 1
52609: NEG
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 3
52617: NEG
52618: PUSH
52619: LD_INT 0
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 3
52628: NEG
52629: PUSH
52630: LD_INT 1
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 4
52639: NEG
52640: PUSH
52641: LD_INT 1
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 5
52650: NEG
52651: PUSH
52652: LD_INT 0
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 5
52661: NEG
52662: PUSH
52663: LD_INT 1
52665: NEG
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 5
52673: NEG
52674: PUSH
52675: LD_INT 2
52677: NEG
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 3
52685: NEG
52686: PUSH
52687: LD_INT 2
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: ST_TO_ADDR
// end ; end ;
52741: GO 52744
52743: POP
// case btype of b_depot , b_warehouse :
52744: LD_VAR 0 1
52748: PUSH
52749: LD_INT 0
52751: DOUBLE
52752: EQUAL
52753: IFTRUE 52763
52755: LD_INT 1
52757: DOUBLE
52758: EQUAL
52759: IFTRUE 52763
52761: GO 52964
52763: POP
// case nation of nation_american :
52764: LD_VAR 0 5
52768: PUSH
52769: LD_INT 1
52771: DOUBLE
52772: EQUAL
52773: IFTRUE 52777
52775: GO 52833
52777: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
52778: LD_ADDR_VAR 0 9
52782: PUSH
52783: LD_VAR 0 11
52787: PUSH
52788: LD_VAR 0 12
52792: PUSH
52793: LD_VAR 0 13
52797: PUSH
52798: LD_VAR 0 14
52802: PUSH
52803: LD_VAR 0 15
52807: PUSH
52808: LD_VAR 0 16
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: PUSH
52821: LD_VAR 0 4
52825: PUSH
52826: LD_INT 1
52828: PLUS
52829: ARRAY
52830: ST_TO_ADDR
52831: GO 52962
52833: LD_INT 2
52835: DOUBLE
52836: EQUAL
52837: IFTRUE 52841
52839: GO 52897
52841: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
52842: LD_ADDR_VAR 0 9
52846: PUSH
52847: LD_VAR 0 17
52851: PUSH
52852: LD_VAR 0 18
52856: PUSH
52857: LD_VAR 0 19
52861: PUSH
52862: LD_VAR 0 20
52866: PUSH
52867: LD_VAR 0 21
52871: PUSH
52872: LD_VAR 0 22
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: PUSH
52885: LD_VAR 0 4
52889: PUSH
52890: LD_INT 1
52892: PLUS
52893: ARRAY
52894: ST_TO_ADDR
52895: GO 52962
52897: LD_INT 3
52899: DOUBLE
52900: EQUAL
52901: IFTRUE 52905
52903: GO 52961
52905: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52906: LD_ADDR_VAR 0 9
52910: PUSH
52911: LD_VAR 0 23
52915: PUSH
52916: LD_VAR 0 24
52920: PUSH
52921: LD_VAR 0 25
52925: PUSH
52926: LD_VAR 0 26
52930: PUSH
52931: LD_VAR 0 27
52935: PUSH
52936: LD_VAR 0 28
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: PUSH
52949: LD_VAR 0 4
52953: PUSH
52954: LD_INT 1
52956: PLUS
52957: ARRAY
52958: ST_TO_ADDR
52959: GO 52962
52961: POP
52962: GO 53517
52964: LD_INT 2
52966: DOUBLE
52967: EQUAL
52968: IFTRUE 52978
52970: LD_INT 3
52972: DOUBLE
52973: EQUAL
52974: IFTRUE 52978
52976: GO 53034
52978: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52979: LD_ADDR_VAR 0 9
52983: PUSH
52984: LD_VAR 0 29
52988: PUSH
52989: LD_VAR 0 30
52993: PUSH
52994: LD_VAR 0 31
52998: PUSH
52999: LD_VAR 0 32
53003: PUSH
53004: LD_VAR 0 33
53008: PUSH
53009: LD_VAR 0 34
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: PUSH
53022: LD_VAR 0 4
53026: PUSH
53027: LD_INT 1
53029: PLUS
53030: ARRAY
53031: ST_TO_ADDR
53032: GO 53517
53034: LD_INT 16
53036: DOUBLE
53037: EQUAL
53038: IFTRUE 53096
53040: LD_INT 17
53042: DOUBLE
53043: EQUAL
53044: IFTRUE 53096
53046: LD_INT 18
53048: DOUBLE
53049: EQUAL
53050: IFTRUE 53096
53052: LD_INT 19
53054: DOUBLE
53055: EQUAL
53056: IFTRUE 53096
53058: LD_INT 22
53060: DOUBLE
53061: EQUAL
53062: IFTRUE 53096
53064: LD_INT 20
53066: DOUBLE
53067: EQUAL
53068: IFTRUE 53096
53070: LD_INT 21
53072: DOUBLE
53073: EQUAL
53074: IFTRUE 53096
53076: LD_INT 23
53078: DOUBLE
53079: EQUAL
53080: IFTRUE 53096
53082: LD_INT 24
53084: DOUBLE
53085: EQUAL
53086: IFTRUE 53096
53088: LD_INT 25
53090: DOUBLE
53091: EQUAL
53092: IFTRUE 53096
53094: GO 53152
53096: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53097: LD_ADDR_VAR 0 9
53101: PUSH
53102: LD_VAR 0 35
53106: PUSH
53107: LD_VAR 0 36
53111: PUSH
53112: LD_VAR 0 37
53116: PUSH
53117: LD_VAR 0 38
53121: PUSH
53122: LD_VAR 0 39
53126: PUSH
53127: LD_VAR 0 40
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: PUSH
53140: LD_VAR 0 4
53144: PUSH
53145: LD_INT 1
53147: PLUS
53148: ARRAY
53149: ST_TO_ADDR
53150: GO 53517
53152: LD_INT 6
53154: DOUBLE
53155: EQUAL
53156: IFTRUE 53208
53158: LD_INT 7
53160: DOUBLE
53161: EQUAL
53162: IFTRUE 53208
53164: LD_INT 8
53166: DOUBLE
53167: EQUAL
53168: IFTRUE 53208
53170: LD_INT 13
53172: DOUBLE
53173: EQUAL
53174: IFTRUE 53208
53176: LD_INT 12
53178: DOUBLE
53179: EQUAL
53180: IFTRUE 53208
53182: LD_INT 15
53184: DOUBLE
53185: EQUAL
53186: IFTRUE 53208
53188: LD_INT 11
53190: DOUBLE
53191: EQUAL
53192: IFTRUE 53208
53194: LD_INT 14
53196: DOUBLE
53197: EQUAL
53198: IFTRUE 53208
53200: LD_INT 10
53202: DOUBLE
53203: EQUAL
53204: IFTRUE 53208
53206: GO 53264
53208: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
53209: LD_ADDR_VAR 0 9
53213: PUSH
53214: LD_VAR 0 41
53218: PUSH
53219: LD_VAR 0 42
53223: PUSH
53224: LD_VAR 0 43
53228: PUSH
53229: LD_VAR 0 44
53233: PUSH
53234: LD_VAR 0 45
53238: PUSH
53239: LD_VAR 0 46
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: PUSH
53252: LD_VAR 0 4
53256: PUSH
53257: LD_INT 1
53259: PLUS
53260: ARRAY
53261: ST_TO_ADDR
53262: GO 53517
53264: LD_INT 36
53266: DOUBLE
53267: EQUAL
53268: IFTRUE 53272
53270: GO 53328
53272: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53273: LD_ADDR_VAR 0 9
53277: PUSH
53278: LD_VAR 0 47
53282: PUSH
53283: LD_VAR 0 48
53287: PUSH
53288: LD_VAR 0 49
53292: PUSH
53293: LD_VAR 0 50
53297: PUSH
53298: LD_VAR 0 51
53302: PUSH
53303: LD_VAR 0 52
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: PUSH
53316: LD_VAR 0 4
53320: PUSH
53321: LD_INT 1
53323: PLUS
53324: ARRAY
53325: ST_TO_ADDR
53326: GO 53517
53328: LD_INT 4
53330: DOUBLE
53331: EQUAL
53332: IFTRUE 53354
53334: LD_INT 5
53336: DOUBLE
53337: EQUAL
53338: IFTRUE 53354
53340: LD_INT 34
53342: DOUBLE
53343: EQUAL
53344: IFTRUE 53354
53346: LD_INT 37
53348: DOUBLE
53349: EQUAL
53350: IFTRUE 53354
53352: GO 53410
53354: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53355: LD_ADDR_VAR 0 9
53359: PUSH
53360: LD_VAR 0 53
53364: PUSH
53365: LD_VAR 0 54
53369: PUSH
53370: LD_VAR 0 55
53374: PUSH
53375: LD_VAR 0 56
53379: PUSH
53380: LD_VAR 0 57
53384: PUSH
53385: LD_VAR 0 58
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: PUSH
53398: LD_VAR 0 4
53402: PUSH
53403: LD_INT 1
53405: PLUS
53406: ARRAY
53407: ST_TO_ADDR
53408: GO 53517
53410: LD_INT 31
53412: DOUBLE
53413: EQUAL
53414: IFTRUE 53460
53416: LD_INT 32
53418: DOUBLE
53419: EQUAL
53420: IFTRUE 53460
53422: LD_INT 33
53424: DOUBLE
53425: EQUAL
53426: IFTRUE 53460
53428: LD_INT 27
53430: DOUBLE
53431: EQUAL
53432: IFTRUE 53460
53434: LD_INT 26
53436: DOUBLE
53437: EQUAL
53438: IFTRUE 53460
53440: LD_INT 28
53442: DOUBLE
53443: EQUAL
53444: IFTRUE 53460
53446: LD_INT 29
53448: DOUBLE
53449: EQUAL
53450: IFTRUE 53460
53452: LD_INT 30
53454: DOUBLE
53455: EQUAL
53456: IFTRUE 53460
53458: GO 53516
53460: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
53461: LD_ADDR_VAR 0 9
53465: PUSH
53466: LD_VAR 0 59
53470: PUSH
53471: LD_VAR 0 60
53475: PUSH
53476: LD_VAR 0 61
53480: PUSH
53481: LD_VAR 0 62
53485: PUSH
53486: LD_VAR 0 63
53490: PUSH
53491: LD_VAR 0 64
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: PUSH
53504: LD_VAR 0 4
53508: PUSH
53509: LD_INT 1
53511: PLUS
53512: ARRAY
53513: ST_TO_ADDR
53514: GO 53517
53516: POP
// temp_list2 = [ ] ;
53517: LD_ADDR_VAR 0 10
53521: PUSH
53522: EMPTY
53523: ST_TO_ADDR
// for i in temp_list do
53524: LD_ADDR_VAR 0 8
53528: PUSH
53529: LD_VAR 0 9
53533: PUSH
53534: FOR_IN
53535: IFFALSE 53587
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53537: LD_ADDR_VAR 0 10
53541: PUSH
53542: LD_VAR 0 10
53546: PUSH
53547: LD_VAR 0 8
53551: PUSH
53552: LD_INT 1
53554: ARRAY
53555: PUSH
53556: LD_VAR 0 2
53560: PLUS
53561: PUSH
53562: LD_VAR 0 8
53566: PUSH
53567: LD_INT 2
53569: ARRAY
53570: PUSH
53571: LD_VAR 0 3
53575: PLUS
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: EMPTY
53582: LIST
53583: ADD
53584: ST_TO_ADDR
53585: GO 53534
53587: POP
53588: POP
// result = temp_list2 ;
53589: LD_ADDR_VAR 0 7
53593: PUSH
53594: LD_VAR 0 10
53598: ST_TO_ADDR
// end ;
53599: LD_VAR 0 7
53603: RET
// export function EnemyInRange ( unit , dist ) ; begin
53604: LD_INT 0
53606: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53607: LD_ADDR_VAR 0 3
53611: PUSH
53612: LD_VAR 0 1
53616: PPUSH
53617: CALL_OW 255
53621: PPUSH
53622: LD_VAR 0 1
53626: PPUSH
53627: CALL_OW 250
53631: PPUSH
53632: LD_VAR 0 1
53636: PPUSH
53637: CALL_OW 251
53641: PPUSH
53642: LD_VAR 0 2
53646: PPUSH
53647: CALL 26977 0 4
53651: PUSH
53652: LD_INT 4
53654: ARRAY
53655: ST_TO_ADDR
// end ;
53656: LD_VAR 0 3
53660: RET
// export function PlayerSeeMe ( unit ) ; begin
53661: LD_INT 0
53663: PPUSH
// result := See ( your_side , unit ) ;
53664: LD_ADDR_VAR 0 2
53668: PUSH
53669: LD_OWVAR 2
53673: PPUSH
53674: LD_VAR 0 1
53678: PPUSH
53679: CALL_OW 292
53683: ST_TO_ADDR
// end ;
53684: LD_VAR 0 2
53688: RET
// export function ReverseDir ( unit ) ; begin
53689: LD_INT 0
53691: PPUSH
// if not unit then
53692: LD_VAR 0 1
53696: NOT
53697: IFFALSE 53701
// exit ;
53699: GO 53724
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
53701: LD_ADDR_VAR 0 2
53705: PUSH
53706: LD_VAR 0 1
53710: PPUSH
53711: CALL_OW 254
53715: PUSH
53716: LD_INT 3
53718: PLUS
53719: PUSH
53720: LD_INT 6
53722: MOD
53723: ST_TO_ADDR
// end ;
53724: LD_VAR 0 2
53728: RET
// export function ReverseArray ( array ) ; var i ; begin
53729: LD_INT 0
53731: PPUSH
53732: PPUSH
// if not array then
53733: LD_VAR 0 1
53737: NOT
53738: IFFALSE 53742
// exit ;
53740: GO 53797
// result := [ ] ;
53742: LD_ADDR_VAR 0 2
53746: PUSH
53747: EMPTY
53748: ST_TO_ADDR
// for i := array downto 1 do
53749: LD_ADDR_VAR 0 3
53753: PUSH
53754: DOUBLE
53755: LD_VAR 0 1
53759: INC
53760: ST_TO_ADDR
53761: LD_INT 1
53763: PUSH
53764: FOR_DOWNTO
53765: IFFALSE 53795
// result := Join ( result , array [ i ] ) ;
53767: LD_ADDR_VAR 0 2
53771: PUSH
53772: LD_VAR 0 2
53776: PPUSH
53777: LD_VAR 0 1
53781: PUSH
53782: LD_VAR 0 3
53786: ARRAY
53787: PPUSH
53788: CALL 58462 0 2
53792: ST_TO_ADDR
53793: GO 53764
53795: POP
53796: POP
// end ;
53797: LD_VAR 0 2
53801: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
53802: LD_INT 0
53804: PPUSH
53805: PPUSH
53806: PPUSH
53807: PPUSH
53808: PPUSH
53809: PPUSH
// if not unit or not hexes then
53810: LD_VAR 0 1
53814: NOT
53815: PUSH
53816: LD_VAR 0 2
53820: NOT
53821: OR
53822: IFFALSE 53826
// exit ;
53824: GO 53949
// dist := 9999 ;
53826: LD_ADDR_VAR 0 5
53830: PUSH
53831: LD_INT 9999
53833: ST_TO_ADDR
// for i = 1 to hexes do
53834: LD_ADDR_VAR 0 4
53838: PUSH
53839: DOUBLE
53840: LD_INT 1
53842: DEC
53843: ST_TO_ADDR
53844: LD_VAR 0 2
53848: PUSH
53849: FOR_TO
53850: IFFALSE 53937
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53852: LD_ADDR_VAR 0 6
53856: PUSH
53857: LD_VAR 0 1
53861: PPUSH
53862: LD_VAR 0 2
53866: PUSH
53867: LD_VAR 0 4
53871: ARRAY
53872: PUSH
53873: LD_INT 1
53875: ARRAY
53876: PPUSH
53877: LD_VAR 0 2
53881: PUSH
53882: LD_VAR 0 4
53886: ARRAY
53887: PUSH
53888: LD_INT 2
53890: ARRAY
53891: PPUSH
53892: CALL_OW 297
53896: ST_TO_ADDR
// if tdist < dist then
53897: LD_VAR 0 6
53901: PUSH
53902: LD_VAR 0 5
53906: LESS
53907: IFFALSE 53935
// begin hex := hexes [ i ] ;
53909: LD_ADDR_VAR 0 8
53913: PUSH
53914: LD_VAR 0 2
53918: PUSH
53919: LD_VAR 0 4
53923: ARRAY
53924: ST_TO_ADDR
// dist := tdist ;
53925: LD_ADDR_VAR 0 5
53929: PUSH
53930: LD_VAR 0 6
53934: ST_TO_ADDR
// end ; end ;
53935: GO 53849
53937: POP
53938: POP
// result := hex ;
53939: LD_ADDR_VAR 0 3
53943: PUSH
53944: LD_VAR 0 8
53948: ST_TO_ADDR
// end ;
53949: LD_VAR 0 3
53953: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53954: LD_INT 0
53956: PPUSH
53957: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53958: LD_VAR 0 1
53962: NOT
53963: PUSH
53964: LD_VAR 0 1
53968: PUSH
53969: LD_INT 21
53971: PUSH
53972: LD_INT 2
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 23
53981: PUSH
53982: LD_INT 2
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PPUSH
53993: CALL_OW 69
53997: IN
53998: NOT
53999: OR
54000: IFFALSE 54004
// exit ;
54002: GO 54051
// for i = 1 to 3 do
54004: LD_ADDR_VAR 0 3
54008: PUSH
54009: DOUBLE
54010: LD_INT 1
54012: DEC
54013: ST_TO_ADDR
54014: LD_INT 3
54016: PUSH
54017: FOR_TO
54018: IFFALSE 54049
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54020: LD_VAR 0 1
54024: PPUSH
54025: CALL_OW 250
54029: PPUSH
54030: LD_VAR 0 1
54034: PPUSH
54035: CALL_OW 251
54039: PPUSH
54040: LD_INT 1
54042: PPUSH
54043: CALL_OW 453
54047: GO 54017
54049: POP
54050: POP
// end ;
54051: LD_VAR 0 2
54055: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54056: LD_INT 0
54058: PPUSH
54059: PPUSH
54060: PPUSH
54061: PPUSH
54062: PPUSH
54063: PPUSH
// if not unit or not enemy_unit then
54064: LD_VAR 0 1
54068: NOT
54069: PUSH
54070: LD_VAR 0 2
54074: NOT
54075: OR
54076: IFFALSE 54080
// exit ;
54078: GO 54547
// if GetLives ( i ) < 250 then
54080: LD_VAR 0 4
54084: PPUSH
54085: CALL_OW 256
54089: PUSH
54090: LD_INT 250
54092: LESS
54093: IFFALSE 54106
// begin ComAutodestruct ( i ) ;
54095: LD_VAR 0 4
54099: PPUSH
54100: CALL 53954 0 1
// exit ;
54104: GO 54547
// end ; x := GetX ( enemy_unit ) ;
54106: LD_ADDR_VAR 0 7
54110: PUSH
54111: LD_VAR 0 2
54115: PPUSH
54116: CALL_OW 250
54120: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54121: LD_ADDR_VAR 0 8
54125: PUSH
54126: LD_VAR 0 2
54130: PPUSH
54131: CALL_OW 251
54135: ST_TO_ADDR
// if not x or not y then
54136: LD_VAR 0 7
54140: NOT
54141: PUSH
54142: LD_VAR 0 8
54146: NOT
54147: OR
54148: IFFALSE 54152
// exit ;
54150: GO 54547
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54152: LD_ADDR_VAR 0 6
54156: PUSH
54157: LD_VAR 0 7
54161: PPUSH
54162: LD_INT 0
54164: PPUSH
54165: LD_INT 4
54167: PPUSH
54168: CALL_OW 272
54172: PUSH
54173: LD_VAR 0 8
54177: PPUSH
54178: LD_INT 0
54180: PPUSH
54181: LD_INT 4
54183: PPUSH
54184: CALL_OW 273
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_VAR 0 7
54197: PPUSH
54198: LD_INT 1
54200: PPUSH
54201: LD_INT 4
54203: PPUSH
54204: CALL_OW 272
54208: PUSH
54209: LD_VAR 0 8
54213: PPUSH
54214: LD_INT 1
54216: PPUSH
54217: LD_INT 4
54219: PPUSH
54220: CALL_OW 273
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_VAR 0 7
54233: PPUSH
54234: LD_INT 2
54236: PPUSH
54237: LD_INT 4
54239: PPUSH
54240: CALL_OW 272
54244: PUSH
54245: LD_VAR 0 8
54249: PPUSH
54250: LD_INT 2
54252: PPUSH
54253: LD_INT 4
54255: PPUSH
54256: CALL_OW 273
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_VAR 0 7
54269: PPUSH
54270: LD_INT 3
54272: PPUSH
54273: LD_INT 4
54275: PPUSH
54276: CALL_OW 272
54280: PUSH
54281: LD_VAR 0 8
54285: PPUSH
54286: LD_INT 3
54288: PPUSH
54289: LD_INT 4
54291: PPUSH
54292: CALL_OW 273
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_VAR 0 7
54305: PPUSH
54306: LD_INT 4
54308: PPUSH
54309: LD_INT 4
54311: PPUSH
54312: CALL_OW 272
54316: PUSH
54317: LD_VAR 0 8
54321: PPUSH
54322: LD_INT 4
54324: PPUSH
54325: LD_INT 4
54327: PPUSH
54328: CALL_OW 273
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_VAR 0 7
54341: PPUSH
54342: LD_INT 5
54344: PPUSH
54345: LD_INT 4
54347: PPUSH
54348: CALL_OW 272
54352: PUSH
54353: LD_VAR 0 8
54357: PPUSH
54358: LD_INT 5
54360: PPUSH
54361: LD_INT 4
54363: PPUSH
54364: CALL_OW 273
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: ST_TO_ADDR
// for i = tmp downto 1 do
54381: LD_ADDR_VAR 0 4
54385: PUSH
54386: DOUBLE
54387: LD_VAR 0 6
54391: INC
54392: ST_TO_ADDR
54393: LD_INT 1
54395: PUSH
54396: FOR_DOWNTO
54397: IFFALSE 54498
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54399: LD_VAR 0 6
54403: PUSH
54404: LD_VAR 0 4
54408: ARRAY
54409: PUSH
54410: LD_INT 1
54412: ARRAY
54413: PPUSH
54414: LD_VAR 0 6
54418: PUSH
54419: LD_VAR 0 4
54423: ARRAY
54424: PUSH
54425: LD_INT 2
54427: ARRAY
54428: PPUSH
54429: CALL_OW 488
54433: NOT
54434: PUSH
54435: LD_VAR 0 6
54439: PUSH
54440: LD_VAR 0 4
54444: ARRAY
54445: PUSH
54446: LD_INT 1
54448: ARRAY
54449: PPUSH
54450: LD_VAR 0 6
54454: PUSH
54455: LD_VAR 0 4
54459: ARRAY
54460: PUSH
54461: LD_INT 2
54463: ARRAY
54464: PPUSH
54465: CALL_OW 428
54469: PUSH
54470: LD_INT 0
54472: NONEQUAL
54473: OR
54474: IFFALSE 54496
// tmp := Delete ( tmp , i ) ;
54476: LD_ADDR_VAR 0 6
54480: PUSH
54481: LD_VAR 0 6
54485: PPUSH
54486: LD_VAR 0 4
54490: PPUSH
54491: CALL_OW 3
54495: ST_TO_ADDR
54496: GO 54396
54498: POP
54499: POP
// j := GetClosestHex ( unit , tmp ) ;
54500: LD_ADDR_VAR 0 5
54504: PUSH
54505: LD_VAR 0 1
54509: PPUSH
54510: LD_VAR 0 6
54514: PPUSH
54515: CALL 53802 0 2
54519: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54520: LD_VAR 0 1
54524: PPUSH
54525: LD_VAR 0 5
54529: PUSH
54530: LD_INT 1
54532: ARRAY
54533: PPUSH
54534: LD_VAR 0 5
54538: PUSH
54539: LD_INT 2
54541: ARRAY
54542: PPUSH
54543: CALL_OW 111
// end ;
54547: LD_VAR 0 3
54551: RET
// export function PrepareApemanSoldier ( ) ; begin
54552: LD_INT 0
54554: PPUSH
// uc_nation := 0 ;
54555: LD_ADDR_OWVAR 21
54559: PUSH
54560: LD_INT 0
54562: ST_TO_ADDR
// hc_sex := sex_male ;
54563: LD_ADDR_OWVAR 27
54567: PUSH
54568: LD_INT 1
54570: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
54571: LD_ADDR_OWVAR 28
54575: PUSH
54576: LD_INT 15
54578: ST_TO_ADDR
// hc_gallery :=  ;
54579: LD_ADDR_OWVAR 33
54583: PUSH
54584: LD_STRING 
54586: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54587: LD_ADDR_OWVAR 31
54591: PUSH
54592: LD_INT 0
54594: PPUSH
54595: LD_INT 3
54597: PPUSH
54598: CALL_OW 12
54602: PUSH
54603: LD_INT 0
54605: PPUSH
54606: LD_INT 3
54608: PPUSH
54609: CALL_OW 12
54613: PUSH
54614: LD_INT 0
54616: PUSH
54617: LD_INT 0
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: ST_TO_ADDR
// end ;
54626: LD_VAR 0 1
54630: RET
// export function PrepareApemanEngineer ( ) ; begin
54631: LD_INT 0
54633: PPUSH
// uc_nation := 0 ;
54634: LD_ADDR_OWVAR 21
54638: PUSH
54639: LD_INT 0
54641: ST_TO_ADDR
// hc_sex := sex_male ;
54642: LD_ADDR_OWVAR 27
54646: PUSH
54647: LD_INT 1
54649: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
54650: LD_ADDR_OWVAR 28
54654: PUSH
54655: LD_INT 16
54657: ST_TO_ADDR
// hc_gallery :=  ;
54658: LD_ADDR_OWVAR 33
54662: PUSH
54663: LD_STRING 
54665: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54666: LD_ADDR_OWVAR 31
54670: PUSH
54671: LD_INT 0
54673: PPUSH
54674: LD_INT 3
54676: PPUSH
54677: CALL_OW 12
54681: PUSH
54682: LD_INT 0
54684: PPUSH
54685: LD_INT 3
54687: PPUSH
54688: CALL_OW 12
54692: PUSH
54693: LD_INT 0
54695: PUSH
54696: LD_INT 0
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: ST_TO_ADDR
// end ;
54705: LD_VAR 0 1
54709: RET
// export function PrepareApeman ( agressivity ) ; begin
54710: LD_INT 0
54712: PPUSH
// uc_side := 0 ;
54713: LD_ADDR_OWVAR 20
54717: PUSH
54718: LD_INT 0
54720: ST_TO_ADDR
// uc_nation := 0 ;
54721: LD_ADDR_OWVAR 21
54725: PUSH
54726: LD_INT 0
54728: ST_TO_ADDR
// hc_sex := sex_male ;
54729: LD_ADDR_OWVAR 27
54733: PUSH
54734: LD_INT 1
54736: ST_TO_ADDR
// hc_class := class_apeman ;
54737: LD_ADDR_OWVAR 28
54741: PUSH
54742: LD_INT 12
54744: ST_TO_ADDR
// hc_gallery :=  ;
54745: LD_ADDR_OWVAR 33
54749: PUSH
54750: LD_STRING 
54752: ST_TO_ADDR
// if agressivity = 0 then
54753: LD_VAR 0 1
54757: PUSH
54758: LD_INT 0
54760: EQUAL
54761: IFFALSE 54773
// hc_agressivity := 0 else
54763: LD_ADDR_OWVAR 35
54767: PUSH
54768: LD_INT 0
54770: ST_TO_ADDR
54771: GO 54794
// hc_agressivity := rand ( - agressivity , agressivity ) ;
54773: LD_ADDR_OWVAR 35
54777: PUSH
54778: LD_VAR 0 1
54782: NEG
54783: PPUSH
54784: LD_VAR 0 1
54788: PPUSH
54789: CALL_OW 12
54793: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54794: LD_ADDR_OWVAR 31
54798: PUSH
54799: LD_INT 0
54801: PPUSH
54802: LD_INT 3
54804: PPUSH
54805: CALL_OW 12
54809: PUSH
54810: LD_INT 0
54812: PPUSH
54813: LD_INT 3
54815: PPUSH
54816: CALL_OW 12
54820: PUSH
54821: LD_INT 0
54823: PUSH
54824: LD_INT 0
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: ST_TO_ADDR
// end ;
54833: LD_VAR 0 2
54837: RET
// export function PrepareTiger ( agressivity ) ; begin
54838: LD_INT 0
54840: PPUSH
// uc_side := 0 ;
54841: LD_ADDR_OWVAR 20
54845: PUSH
54846: LD_INT 0
54848: ST_TO_ADDR
// uc_nation := 0 ;
54849: LD_ADDR_OWVAR 21
54853: PUSH
54854: LD_INT 0
54856: ST_TO_ADDR
// hc_class := class_tiger ;
54857: LD_ADDR_OWVAR 28
54861: PUSH
54862: LD_INT 14
54864: ST_TO_ADDR
// hc_gallery :=  ;
54865: LD_ADDR_OWVAR 33
54869: PUSH
54870: LD_STRING 
54872: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
54873: LD_ADDR_OWVAR 35
54877: PUSH
54878: LD_VAR 0 1
54882: NEG
54883: PPUSH
54884: LD_VAR 0 1
54888: PPUSH
54889: CALL_OW 12
54893: ST_TO_ADDR
// end ;
54894: LD_VAR 0 2
54898: RET
// export function PrepareEnchidna ( ) ; begin
54899: LD_INT 0
54901: PPUSH
// uc_side := 0 ;
54902: LD_ADDR_OWVAR 20
54906: PUSH
54907: LD_INT 0
54909: ST_TO_ADDR
// uc_nation := 0 ;
54910: LD_ADDR_OWVAR 21
54914: PUSH
54915: LD_INT 0
54917: ST_TO_ADDR
// hc_class := class_baggie ;
54918: LD_ADDR_OWVAR 28
54922: PUSH
54923: LD_INT 13
54925: ST_TO_ADDR
// hc_gallery :=  ;
54926: LD_ADDR_OWVAR 33
54930: PUSH
54931: LD_STRING 
54933: ST_TO_ADDR
// end ;
54934: LD_VAR 0 1
54938: RET
// export function PrepareFrog ( ) ; begin
54939: LD_INT 0
54941: PPUSH
// uc_side := 0 ;
54942: LD_ADDR_OWVAR 20
54946: PUSH
54947: LD_INT 0
54949: ST_TO_ADDR
// uc_nation := 0 ;
54950: LD_ADDR_OWVAR 21
54954: PUSH
54955: LD_INT 0
54957: ST_TO_ADDR
// hc_class := class_frog ;
54958: LD_ADDR_OWVAR 28
54962: PUSH
54963: LD_INT 19
54965: ST_TO_ADDR
// hc_gallery :=  ;
54966: LD_ADDR_OWVAR 33
54970: PUSH
54971: LD_STRING 
54973: ST_TO_ADDR
// end ;
54974: LD_VAR 0 1
54978: RET
// export function PrepareFish ( ) ; begin
54979: LD_INT 0
54981: PPUSH
// uc_side := 0 ;
54982: LD_ADDR_OWVAR 20
54986: PUSH
54987: LD_INT 0
54989: ST_TO_ADDR
// uc_nation := 0 ;
54990: LD_ADDR_OWVAR 21
54994: PUSH
54995: LD_INT 0
54997: ST_TO_ADDR
// hc_class := class_fish ;
54998: LD_ADDR_OWVAR 28
55002: PUSH
55003: LD_INT 20
55005: ST_TO_ADDR
// hc_gallery :=  ;
55006: LD_ADDR_OWVAR 33
55010: PUSH
55011: LD_STRING 
55013: ST_TO_ADDR
// end ;
55014: LD_VAR 0 1
55018: RET
// export function PrepareBird ( ) ; begin
55019: LD_INT 0
55021: PPUSH
// uc_side := 0 ;
55022: LD_ADDR_OWVAR 20
55026: PUSH
55027: LD_INT 0
55029: ST_TO_ADDR
// uc_nation := 0 ;
55030: LD_ADDR_OWVAR 21
55034: PUSH
55035: LD_INT 0
55037: ST_TO_ADDR
// hc_class := class_phororhacos ;
55038: LD_ADDR_OWVAR 28
55042: PUSH
55043: LD_INT 18
55045: ST_TO_ADDR
// hc_gallery :=  ;
55046: LD_ADDR_OWVAR 33
55050: PUSH
55051: LD_STRING 
55053: ST_TO_ADDR
// end ;
55054: LD_VAR 0 1
55058: RET
// export function PrepareHorse ( ) ; begin
55059: LD_INT 0
55061: PPUSH
// uc_side := 0 ;
55062: LD_ADDR_OWVAR 20
55066: PUSH
55067: LD_INT 0
55069: ST_TO_ADDR
// uc_nation := 0 ;
55070: LD_ADDR_OWVAR 21
55074: PUSH
55075: LD_INT 0
55077: ST_TO_ADDR
// hc_class := class_horse ;
55078: LD_ADDR_OWVAR 28
55082: PUSH
55083: LD_INT 21
55085: ST_TO_ADDR
// hc_gallery :=  ;
55086: LD_ADDR_OWVAR 33
55090: PUSH
55091: LD_STRING 
55093: ST_TO_ADDR
// end ;
55094: LD_VAR 0 1
55098: RET
// export function PrepareMastodont ( ) ; begin
55099: LD_INT 0
55101: PPUSH
// uc_side := 0 ;
55102: LD_ADDR_OWVAR 20
55106: PUSH
55107: LD_INT 0
55109: ST_TO_ADDR
// uc_nation := 0 ;
55110: LD_ADDR_OWVAR 21
55114: PUSH
55115: LD_INT 0
55117: ST_TO_ADDR
// vc_chassis := class_mastodont ;
55118: LD_ADDR_OWVAR 37
55122: PUSH
55123: LD_INT 31
55125: ST_TO_ADDR
// vc_control := control_rider ;
55126: LD_ADDR_OWVAR 38
55130: PUSH
55131: LD_INT 4
55133: ST_TO_ADDR
// end ;
55134: LD_VAR 0 1
55138: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55139: LD_INT 0
55141: PPUSH
55142: PPUSH
55143: PPUSH
// uc_side = 0 ;
55144: LD_ADDR_OWVAR 20
55148: PUSH
55149: LD_INT 0
55151: ST_TO_ADDR
// uc_nation = 0 ;
55152: LD_ADDR_OWVAR 21
55156: PUSH
55157: LD_INT 0
55159: ST_TO_ADDR
// InitHc_All ( ) ;
55160: CALL_OW 584
// InitVc ;
55164: CALL_OW 20
// if mastodonts then
55168: LD_VAR 0 6
55172: IFFALSE 55239
// for i = 1 to mastodonts do
55174: LD_ADDR_VAR 0 11
55178: PUSH
55179: DOUBLE
55180: LD_INT 1
55182: DEC
55183: ST_TO_ADDR
55184: LD_VAR 0 6
55188: PUSH
55189: FOR_TO
55190: IFFALSE 55237
// begin vc_chassis := 31 ;
55192: LD_ADDR_OWVAR 37
55196: PUSH
55197: LD_INT 31
55199: ST_TO_ADDR
// vc_control := control_rider ;
55200: LD_ADDR_OWVAR 38
55204: PUSH
55205: LD_INT 4
55207: ST_TO_ADDR
// animal := CreateVehicle ;
55208: LD_ADDR_VAR 0 12
55212: PUSH
55213: CALL_OW 45
55217: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55218: LD_VAR 0 12
55222: PPUSH
55223: LD_VAR 0 8
55227: PPUSH
55228: LD_INT 0
55230: PPUSH
55231: CALL 57367 0 3
// end ;
55235: GO 55189
55237: POP
55238: POP
// if horses then
55239: LD_VAR 0 5
55243: IFFALSE 55310
// for i = 1 to horses do
55245: LD_ADDR_VAR 0 11
55249: PUSH
55250: DOUBLE
55251: LD_INT 1
55253: DEC
55254: ST_TO_ADDR
55255: LD_VAR 0 5
55259: PUSH
55260: FOR_TO
55261: IFFALSE 55308
// begin hc_class := 21 ;
55263: LD_ADDR_OWVAR 28
55267: PUSH
55268: LD_INT 21
55270: ST_TO_ADDR
// hc_gallery :=  ;
55271: LD_ADDR_OWVAR 33
55275: PUSH
55276: LD_STRING 
55278: ST_TO_ADDR
// animal := CreateHuman ;
55279: LD_ADDR_VAR 0 12
55283: PUSH
55284: CALL_OW 44
55288: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55289: LD_VAR 0 12
55293: PPUSH
55294: LD_VAR 0 8
55298: PPUSH
55299: LD_INT 0
55301: PPUSH
55302: CALL 57367 0 3
// end ;
55306: GO 55260
55308: POP
55309: POP
// if birds then
55310: LD_VAR 0 1
55314: IFFALSE 55381
// for i = 1 to birds do
55316: LD_ADDR_VAR 0 11
55320: PUSH
55321: DOUBLE
55322: LD_INT 1
55324: DEC
55325: ST_TO_ADDR
55326: LD_VAR 0 1
55330: PUSH
55331: FOR_TO
55332: IFFALSE 55379
// begin hc_class := 18 ;
55334: LD_ADDR_OWVAR 28
55338: PUSH
55339: LD_INT 18
55341: ST_TO_ADDR
// hc_gallery =  ;
55342: LD_ADDR_OWVAR 33
55346: PUSH
55347: LD_STRING 
55349: ST_TO_ADDR
// animal := CreateHuman ;
55350: LD_ADDR_VAR 0 12
55354: PUSH
55355: CALL_OW 44
55359: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55360: LD_VAR 0 12
55364: PPUSH
55365: LD_VAR 0 8
55369: PPUSH
55370: LD_INT 0
55372: PPUSH
55373: CALL 57367 0 3
// end ;
55377: GO 55331
55379: POP
55380: POP
// if tigers then
55381: LD_VAR 0 2
55385: IFFALSE 55469
// for i = 1 to tigers do
55387: LD_ADDR_VAR 0 11
55391: PUSH
55392: DOUBLE
55393: LD_INT 1
55395: DEC
55396: ST_TO_ADDR
55397: LD_VAR 0 2
55401: PUSH
55402: FOR_TO
55403: IFFALSE 55467
// begin hc_class = class_tiger ;
55405: LD_ADDR_OWVAR 28
55409: PUSH
55410: LD_INT 14
55412: ST_TO_ADDR
// hc_gallery =  ;
55413: LD_ADDR_OWVAR 33
55417: PUSH
55418: LD_STRING 
55420: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
55421: LD_ADDR_OWVAR 35
55425: PUSH
55426: LD_INT 7
55428: NEG
55429: PPUSH
55430: LD_INT 7
55432: PPUSH
55433: CALL_OW 12
55437: ST_TO_ADDR
// animal := CreateHuman ;
55438: LD_ADDR_VAR 0 12
55442: PUSH
55443: CALL_OW 44
55447: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55448: LD_VAR 0 12
55452: PPUSH
55453: LD_VAR 0 8
55457: PPUSH
55458: LD_INT 0
55460: PPUSH
55461: CALL 57367 0 3
// end ;
55465: GO 55402
55467: POP
55468: POP
// if apemans then
55469: LD_VAR 0 3
55473: IFFALSE 55596
// for i = 1 to apemans do
55475: LD_ADDR_VAR 0 11
55479: PUSH
55480: DOUBLE
55481: LD_INT 1
55483: DEC
55484: ST_TO_ADDR
55485: LD_VAR 0 3
55489: PUSH
55490: FOR_TO
55491: IFFALSE 55594
// begin hc_class = class_apeman ;
55493: LD_ADDR_OWVAR 28
55497: PUSH
55498: LD_INT 12
55500: ST_TO_ADDR
// hc_gallery =  ;
55501: LD_ADDR_OWVAR 33
55505: PUSH
55506: LD_STRING 
55508: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
55509: LD_ADDR_OWVAR 35
55513: PUSH
55514: LD_INT 2
55516: NEG
55517: PPUSH
55518: LD_INT 2
55520: PPUSH
55521: CALL_OW 12
55525: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
55526: LD_ADDR_OWVAR 31
55530: PUSH
55531: LD_INT 1
55533: PPUSH
55534: LD_INT 3
55536: PPUSH
55537: CALL_OW 12
55541: PUSH
55542: LD_INT 1
55544: PPUSH
55545: LD_INT 3
55547: PPUSH
55548: CALL_OW 12
55552: PUSH
55553: LD_INT 0
55555: PUSH
55556: LD_INT 0
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: ST_TO_ADDR
// animal := CreateHuman ;
55565: LD_ADDR_VAR 0 12
55569: PUSH
55570: CALL_OW 44
55574: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55575: LD_VAR 0 12
55579: PPUSH
55580: LD_VAR 0 8
55584: PPUSH
55585: LD_INT 0
55587: PPUSH
55588: CALL 57367 0 3
// end ;
55592: GO 55490
55594: POP
55595: POP
// if enchidnas then
55596: LD_VAR 0 4
55600: IFFALSE 55667
// for i = 1 to enchidnas do
55602: LD_ADDR_VAR 0 11
55606: PUSH
55607: DOUBLE
55608: LD_INT 1
55610: DEC
55611: ST_TO_ADDR
55612: LD_VAR 0 4
55616: PUSH
55617: FOR_TO
55618: IFFALSE 55665
// begin hc_class = 13 ;
55620: LD_ADDR_OWVAR 28
55624: PUSH
55625: LD_INT 13
55627: ST_TO_ADDR
// hc_gallery =  ;
55628: LD_ADDR_OWVAR 33
55632: PUSH
55633: LD_STRING 
55635: ST_TO_ADDR
// animal := CreateHuman ;
55636: LD_ADDR_VAR 0 12
55640: PUSH
55641: CALL_OW 44
55645: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55646: LD_VAR 0 12
55650: PPUSH
55651: LD_VAR 0 8
55655: PPUSH
55656: LD_INT 0
55658: PPUSH
55659: CALL 57367 0 3
// end ;
55663: GO 55617
55665: POP
55666: POP
// if fishes then
55667: LD_VAR 0 7
55671: IFFALSE 55738
// for i = 1 to fishes do
55673: LD_ADDR_VAR 0 11
55677: PUSH
55678: DOUBLE
55679: LD_INT 1
55681: DEC
55682: ST_TO_ADDR
55683: LD_VAR 0 7
55687: PUSH
55688: FOR_TO
55689: IFFALSE 55736
// begin hc_class = 20 ;
55691: LD_ADDR_OWVAR 28
55695: PUSH
55696: LD_INT 20
55698: ST_TO_ADDR
// hc_gallery =  ;
55699: LD_ADDR_OWVAR 33
55703: PUSH
55704: LD_STRING 
55706: ST_TO_ADDR
// animal := CreateHuman ;
55707: LD_ADDR_VAR 0 12
55711: PUSH
55712: CALL_OW 44
55716: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
55717: LD_VAR 0 12
55721: PPUSH
55722: LD_VAR 0 9
55726: PPUSH
55727: LD_INT 0
55729: PPUSH
55730: CALL 57367 0 3
// end ;
55734: GO 55688
55736: POP
55737: POP
// end ;
55738: LD_VAR 0 10
55742: RET
// export function WantHeal ( sci , unit ) ; begin
55743: LD_INT 0
55745: PPUSH
// if GetTaskList ( sci ) > 0 then
55746: LD_VAR 0 1
55750: PPUSH
55751: CALL_OW 437
55755: PUSH
55756: LD_INT 0
55758: GREATER
55759: IFFALSE 55829
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
55761: LD_VAR 0 1
55765: PPUSH
55766: CALL_OW 437
55770: PUSH
55771: LD_INT 1
55773: ARRAY
55774: PUSH
55775: LD_INT 1
55777: ARRAY
55778: PUSH
55779: LD_STRING l
55781: EQUAL
55782: PUSH
55783: LD_VAR 0 1
55787: PPUSH
55788: CALL_OW 437
55792: PUSH
55793: LD_INT 1
55795: ARRAY
55796: PUSH
55797: LD_INT 4
55799: ARRAY
55800: PUSH
55801: LD_VAR 0 2
55805: EQUAL
55806: AND
55807: IFFALSE 55819
// result := true else
55809: LD_ADDR_VAR 0 3
55813: PUSH
55814: LD_INT 1
55816: ST_TO_ADDR
55817: GO 55827
// result := false ;
55819: LD_ADDR_VAR 0 3
55823: PUSH
55824: LD_INT 0
55826: ST_TO_ADDR
// end else
55827: GO 55837
// result := false ;
55829: LD_ADDR_VAR 0 3
55833: PUSH
55834: LD_INT 0
55836: ST_TO_ADDR
// end ;
55837: LD_VAR 0 3
55841: RET
// export function HealTarget ( sci ) ; begin
55842: LD_INT 0
55844: PPUSH
// if not sci then
55845: LD_VAR 0 1
55849: NOT
55850: IFFALSE 55854
// exit ;
55852: GO 55919
// result := 0 ;
55854: LD_ADDR_VAR 0 2
55858: PUSH
55859: LD_INT 0
55861: ST_TO_ADDR
// if GetTaskList ( sci ) then
55862: LD_VAR 0 1
55866: PPUSH
55867: CALL_OW 437
55871: IFFALSE 55919
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
55873: LD_VAR 0 1
55877: PPUSH
55878: CALL_OW 437
55882: PUSH
55883: LD_INT 1
55885: ARRAY
55886: PUSH
55887: LD_INT 1
55889: ARRAY
55890: PUSH
55891: LD_STRING l
55893: EQUAL
55894: IFFALSE 55919
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
55896: LD_ADDR_VAR 0 2
55900: PUSH
55901: LD_VAR 0 1
55905: PPUSH
55906: CALL_OW 437
55910: PUSH
55911: LD_INT 1
55913: ARRAY
55914: PUSH
55915: LD_INT 4
55917: ARRAY
55918: ST_TO_ADDR
// end ;
55919: LD_VAR 0 2
55923: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
55924: LD_INT 0
55926: PPUSH
55927: PPUSH
55928: PPUSH
55929: PPUSH
// if not base_units then
55930: LD_VAR 0 1
55934: NOT
55935: IFFALSE 55939
// exit ;
55937: GO 56026
// result := false ;
55939: LD_ADDR_VAR 0 2
55943: PUSH
55944: LD_INT 0
55946: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
55947: LD_ADDR_VAR 0 5
55951: PUSH
55952: LD_VAR 0 1
55956: PPUSH
55957: LD_INT 21
55959: PUSH
55960: LD_INT 3
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PPUSH
55967: CALL_OW 72
55971: ST_TO_ADDR
// if not tmp then
55972: LD_VAR 0 5
55976: NOT
55977: IFFALSE 55981
// exit ;
55979: GO 56026
// for i in tmp do
55981: LD_ADDR_VAR 0 3
55985: PUSH
55986: LD_VAR 0 5
55990: PUSH
55991: FOR_IN
55992: IFFALSE 56024
// begin result := EnemyInRange ( i , 22 ) ;
55994: LD_ADDR_VAR 0 2
55998: PUSH
55999: LD_VAR 0 3
56003: PPUSH
56004: LD_INT 22
56006: PPUSH
56007: CALL 53604 0 2
56011: ST_TO_ADDR
// if result then
56012: LD_VAR 0 2
56016: IFFALSE 56022
// exit ;
56018: POP
56019: POP
56020: GO 56026
// end ;
56022: GO 55991
56024: POP
56025: POP
// end ;
56026: LD_VAR 0 2
56030: RET
// export function FilterByTag ( units , tag ) ; begin
56031: LD_INT 0
56033: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
56034: LD_ADDR_VAR 0 3
56038: PUSH
56039: LD_VAR 0 1
56043: PPUSH
56044: LD_INT 120
56046: PUSH
56047: LD_VAR 0 2
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PPUSH
56056: CALL_OW 72
56060: ST_TO_ADDR
// end ;
56061: LD_VAR 0 3
56065: RET
// export function IsDriver ( un ) ; begin
56066: LD_INT 0
56068: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56069: LD_ADDR_VAR 0 2
56073: PUSH
56074: LD_VAR 0 1
56078: PUSH
56079: LD_INT 55
56081: PUSH
56082: EMPTY
56083: LIST
56084: PPUSH
56085: CALL_OW 69
56089: IN
56090: ST_TO_ADDR
// end ;
56091: LD_VAR 0 2
56095: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56096: LD_INT 0
56098: PPUSH
56099: PPUSH
// list := [ ] ;
56100: LD_ADDR_VAR 0 5
56104: PUSH
56105: EMPTY
56106: ST_TO_ADDR
// case d of 0 :
56107: LD_VAR 0 3
56111: PUSH
56112: LD_INT 0
56114: DOUBLE
56115: EQUAL
56116: IFTRUE 56120
56118: GO 56253
56120: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56121: LD_ADDR_VAR 0 5
56125: PUSH
56126: LD_VAR 0 1
56130: PUSH
56131: LD_INT 4
56133: MINUS
56134: PUSH
56135: LD_VAR 0 2
56139: PUSH
56140: LD_INT 4
56142: MINUS
56143: PUSH
56144: LD_INT 2
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: LIST
56151: PUSH
56152: LD_VAR 0 1
56156: PUSH
56157: LD_INT 3
56159: MINUS
56160: PUSH
56161: LD_VAR 0 2
56165: PUSH
56166: LD_INT 1
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: LIST
56173: PUSH
56174: LD_VAR 0 1
56178: PUSH
56179: LD_INT 4
56181: PLUS
56182: PUSH
56183: LD_VAR 0 2
56187: PUSH
56188: LD_INT 4
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: LIST
56195: PUSH
56196: LD_VAR 0 1
56200: PUSH
56201: LD_INT 3
56203: PLUS
56204: PUSH
56205: LD_VAR 0 2
56209: PUSH
56210: LD_INT 3
56212: PLUS
56213: PUSH
56214: LD_INT 5
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: LIST
56221: PUSH
56222: LD_VAR 0 1
56226: PUSH
56227: LD_VAR 0 2
56231: PUSH
56232: LD_INT 4
56234: PLUS
56235: PUSH
56236: LD_INT 0
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: LIST
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: ST_TO_ADDR
// end ; 1 :
56251: GO 56951
56253: LD_INT 1
56255: DOUBLE
56256: EQUAL
56257: IFTRUE 56261
56259: GO 56394
56261: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
56262: LD_ADDR_VAR 0 5
56266: PUSH
56267: LD_VAR 0 1
56271: PUSH
56272: LD_VAR 0 2
56276: PUSH
56277: LD_INT 4
56279: MINUS
56280: PUSH
56281: LD_INT 3
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: LIST
56288: PUSH
56289: LD_VAR 0 1
56293: PUSH
56294: LD_INT 3
56296: MINUS
56297: PUSH
56298: LD_VAR 0 2
56302: PUSH
56303: LD_INT 3
56305: MINUS
56306: PUSH
56307: LD_INT 2
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: LIST
56314: PUSH
56315: LD_VAR 0 1
56319: PUSH
56320: LD_INT 4
56322: MINUS
56323: PUSH
56324: LD_VAR 0 2
56328: PUSH
56329: LD_INT 1
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: LIST
56336: PUSH
56337: LD_VAR 0 1
56341: PUSH
56342: LD_VAR 0 2
56346: PUSH
56347: LD_INT 3
56349: PLUS
56350: PUSH
56351: LD_INT 0
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: LIST
56358: PUSH
56359: LD_VAR 0 1
56363: PUSH
56364: LD_INT 4
56366: PLUS
56367: PUSH
56368: LD_VAR 0 2
56372: PUSH
56373: LD_INT 4
56375: PLUS
56376: PUSH
56377: LD_INT 5
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: LIST
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: ST_TO_ADDR
// end ; 2 :
56392: GO 56951
56394: LD_INT 2
56396: DOUBLE
56397: EQUAL
56398: IFTRUE 56402
56400: GO 56531
56402: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
56403: LD_ADDR_VAR 0 5
56407: PUSH
56408: LD_VAR 0 1
56412: PUSH
56413: LD_VAR 0 2
56417: PUSH
56418: LD_INT 3
56420: MINUS
56421: PUSH
56422: LD_INT 3
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: LIST
56429: PUSH
56430: LD_VAR 0 1
56434: PUSH
56435: LD_INT 4
56437: PLUS
56438: PUSH
56439: LD_VAR 0 2
56443: PUSH
56444: LD_INT 4
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: LIST
56451: PUSH
56452: LD_VAR 0 1
56456: PUSH
56457: LD_VAR 0 2
56461: PUSH
56462: LD_INT 4
56464: PLUS
56465: PUSH
56466: LD_INT 0
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: LIST
56473: PUSH
56474: LD_VAR 0 1
56478: PUSH
56479: LD_INT 3
56481: MINUS
56482: PUSH
56483: LD_VAR 0 2
56487: PUSH
56488: LD_INT 1
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: LIST
56495: PUSH
56496: LD_VAR 0 1
56500: PUSH
56501: LD_INT 4
56503: MINUS
56504: PUSH
56505: LD_VAR 0 2
56509: PUSH
56510: LD_INT 4
56512: MINUS
56513: PUSH
56514: LD_INT 2
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: LIST
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: ST_TO_ADDR
// end ; 3 :
56529: GO 56951
56531: LD_INT 3
56533: DOUBLE
56534: EQUAL
56535: IFTRUE 56539
56537: GO 56672
56539: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
56540: LD_ADDR_VAR 0 5
56544: PUSH
56545: LD_VAR 0 1
56549: PUSH
56550: LD_INT 3
56552: PLUS
56553: PUSH
56554: LD_VAR 0 2
56558: PUSH
56559: LD_INT 4
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: LIST
56566: PUSH
56567: LD_VAR 0 1
56571: PUSH
56572: LD_INT 4
56574: PLUS
56575: PUSH
56576: LD_VAR 0 2
56580: PUSH
56581: LD_INT 4
56583: PLUS
56584: PUSH
56585: LD_INT 5
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: LIST
56592: PUSH
56593: LD_VAR 0 1
56597: PUSH
56598: LD_INT 4
56600: MINUS
56601: PUSH
56602: LD_VAR 0 2
56606: PUSH
56607: LD_INT 1
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: LIST
56614: PUSH
56615: LD_VAR 0 1
56619: PUSH
56620: LD_VAR 0 2
56624: PUSH
56625: LD_INT 4
56627: MINUS
56628: PUSH
56629: LD_INT 3
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: LIST
56636: PUSH
56637: LD_VAR 0 1
56641: PUSH
56642: LD_INT 3
56644: MINUS
56645: PUSH
56646: LD_VAR 0 2
56650: PUSH
56651: LD_INT 3
56653: MINUS
56654: PUSH
56655: LD_INT 2
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: LIST
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: ST_TO_ADDR
// end ; 4 :
56670: GO 56951
56672: LD_INT 4
56674: DOUBLE
56675: EQUAL
56676: IFTRUE 56680
56678: GO 56813
56680: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
56681: LD_ADDR_VAR 0 5
56685: PUSH
56686: LD_VAR 0 1
56690: PUSH
56691: LD_VAR 0 2
56695: PUSH
56696: LD_INT 4
56698: PLUS
56699: PUSH
56700: LD_INT 0
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: LIST
56707: PUSH
56708: LD_VAR 0 1
56712: PUSH
56713: LD_INT 3
56715: PLUS
56716: PUSH
56717: LD_VAR 0 2
56721: PUSH
56722: LD_INT 3
56724: PLUS
56725: PUSH
56726: LD_INT 5
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: LIST
56733: PUSH
56734: LD_VAR 0 1
56738: PUSH
56739: LD_INT 4
56741: PLUS
56742: PUSH
56743: LD_VAR 0 2
56747: PUSH
56748: LD_INT 4
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: LIST
56755: PUSH
56756: LD_VAR 0 1
56760: PUSH
56761: LD_VAR 0 2
56765: PUSH
56766: LD_INT 3
56768: MINUS
56769: PUSH
56770: LD_INT 3
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: LIST
56777: PUSH
56778: LD_VAR 0 1
56782: PUSH
56783: LD_INT 4
56785: MINUS
56786: PUSH
56787: LD_VAR 0 2
56791: PUSH
56792: LD_INT 4
56794: MINUS
56795: PUSH
56796: LD_INT 2
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: LIST
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: ST_TO_ADDR
// end ; 5 :
56811: GO 56951
56813: LD_INT 5
56815: DOUBLE
56816: EQUAL
56817: IFTRUE 56821
56819: GO 56950
56821: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
56822: LD_ADDR_VAR 0 5
56826: PUSH
56827: LD_VAR 0 1
56831: PUSH
56832: LD_INT 4
56834: MINUS
56835: PUSH
56836: LD_VAR 0 2
56840: PUSH
56841: LD_INT 1
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: LIST
56848: PUSH
56849: LD_VAR 0 1
56853: PUSH
56854: LD_VAR 0 2
56858: PUSH
56859: LD_INT 4
56861: MINUS
56862: PUSH
56863: LD_INT 3
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: LIST
56870: PUSH
56871: LD_VAR 0 1
56875: PUSH
56876: LD_INT 4
56878: PLUS
56879: PUSH
56880: LD_VAR 0 2
56884: PUSH
56885: LD_INT 4
56887: PLUS
56888: PUSH
56889: LD_INT 5
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: LIST
56896: PUSH
56897: LD_VAR 0 1
56901: PUSH
56902: LD_INT 3
56904: PLUS
56905: PUSH
56906: LD_VAR 0 2
56910: PUSH
56911: LD_INT 4
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: LIST
56918: PUSH
56919: LD_VAR 0 1
56923: PUSH
56924: LD_VAR 0 2
56928: PUSH
56929: LD_INT 3
56931: PLUS
56932: PUSH
56933: LD_INT 0
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: LIST
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: ST_TO_ADDR
// end ; end ;
56948: GO 56951
56950: POP
// result := list ;
56951: LD_ADDR_VAR 0 4
56955: PUSH
56956: LD_VAR 0 5
56960: ST_TO_ADDR
// end ;
56961: LD_VAR 0 4
56965: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
56966: LD_INT 0
56968: PPUSH
56969: PPUSH
56970: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
56971: LD_VAR 0 1
56975: NOT
56976: PUSH
56977: LD_VAR 0 2
56981: PUSH
56982: LD_INT 1
56984: PUSH
56985: LD_INT 2
56987: PUSH
56988: LD_INT 3
56990: PUSH
56991: LD_INT 4
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: IN
57000: NOT
57001: OR
57002: IFFALSE 57006
// exit ;
57004: GO 57089
// tmp := [ ] ;
57006: LD_ADDR_VAR 0 5
57010: PUSH
57011: EMPTY
57012: ST_TO_ADDR
// for i in units do
57013: LD_ADDR_VAR 0 4
57017: PUSH
57018: LD_VAR 0 1
57022: PUSH
57023: FOR_IN
57024: IFFALSE 57058
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
57026: LD_ADDR_VAR 0 5
57030: PUSH
57031: LD_VAR 0 5
57035: PPUSH
57036: LD_VAR 0 4
57040: PPUSH
57041: LD_VAR 0 2
57045: PPUSH
57046: CALL_OW 259
57050: PPUSH
57051: CALL 58462 0 2
57055: ST_TO_ADDR
57056: GO 57023
57058: POP
57059: POP
// if not tmp then
57060: LD_VAR 0 5
57064: NOT
57065: IFFALSE 57069
// exit ;
57067: GO 57089
// result := SortListByListDesc ( units , tmp ) ;
57069: LD_ADDR_VAR 0 3
57073: PUSH
57074: LD_VAR 0 1
57078: PPUSH
57079: LD_VAR 0 5
57083: PPUSH
57084: CALL_OW 77
57088: ST_TO_ADDR
// end ;
57089: LD_VAR 0 3
57093: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57094: LD_INT 0
57096: PPUSH
57097: PPUSH
57098: PPUSH
// result := false ;
57099: LD_ADDR_VAR 0 3
57103: PUSH
57104: LD_INT 0
57106: ST_TO_ADDR
// if not building then
57107: LD_VAR 0 2
57111: NOT
57112: IFFALSE 57116
// exit ;
57114: GO 57254
// x := GetX ( building ) ;
57116: LD_ADDR_VAR 0 4
57120: PUSH
57121: LD_VAR 0 2
57125: PPUSH
57126: CALL_OW 250
57130: ST_TO_ADDR
// y := GetY ( building ) ;
57131: LD_ADDR_VAR 0 5
57135: PUSH
57136: LD_VAR 0 2
57140: PPUSH
57141: CALL_OW 251
57145: ST_TO_ADDR
// if not x or not y then
57146: LD_VAR 0 4
57150: NOT
57151: PUSH
57152: LD_VAR 0 5
57156: NOT
57157: OR
57158: IFFALSE 57162
// exit ;
57160: GO 57254
// if GetTaskList ( unit ) then
57162: LD_VAR 0 1
57166: PPUSH
57167: CALL_OW 437
57171: IFFALSE 57254
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57173: LD_STRING e
57175: PUSH
57176: LD_VAR 0 1
57180: PPUSH
57181: CALL_OW 437
57185: PUSH
57186: LD_INT 1
57188: ARRAY
57189: PUSH
57190: LD_INT 1
57192: ARRAY
57193: EQUAL
57194: PUSH
57195: LD_VAR 0 4
57199: PUSH
57200: LD_VAR 0 1
57204: PPUSH
57205: CALL_OW 437
57209: PUSH
57210: LD_INT 1
57212: ARRAY
57213: PUSH
57214: LD_INT 2
57216: ARRAY
57217: EQUAL
57218: AND
57219: PUSH
57220: LD_VAR 0 5
57224: PUSH
57225: LD_VAR 0 1
57229: PPUSH
57230: CALL_OW 437
57234: PUSH
57235: LD_INT 1
57237: ARRAY
57238: PUSH
57239: LD_INT 3
57241: ARRAY
57242: EQUAL
57243: AND
57244: IFFALSE 57254
// result := true end ;
57246: LD_ADDR_VAR 0 3
57250: PUSH
57251: LD_INT 1
57253: ST_TO_ADDR
// end ;
57254: LD_VAR 0 3
57258: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
57259: LD_INT 0
57261: PPUSH
// result := false ;
57262: LD_ADDR_VAR 0 4
57266: PUSH
57267: LD_INT 0
57269: ST_TO_ADDR
// if GetTaskList ( unit ) then
57270: LD_VAR 0 1
57274: PPUSH
57275: CALL_OW 437
57279: IFFALSE 57362
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57281: LD_STRING M
57283: PUSH
57284: LD_VAR 0 1
57288: PPUSH
57289: CALL_OW 437
57293: PUSH
57294: LD_INT 1
57296: ARRAY
57297: PUSH
57298: LD_INT 1
57300: ARRAY
57301: EQUAL
57302: PUSH
57303: LD_VAR 0 2
57307: PUSH
57308: LD_VAR 0 1
57312: PPUSH
57313: CALL_OW 437
57317: PUSH
57318: LD_INT 1
57320: ARRAY
57321: PUSH
57322: LD_INT 2
57324: ARRAY
57325: EQUAL
57326: AND
57327: PUSH
57328: LD_VAR 0 3
57332: PUSH
57333: LD_VAR 0 1
57337: PPUSH
57338: CALL_OW 437
57342: PUSH
57343: LD_INT 1
57345: ARRAY
57346: PUSH
57347: LD_INT 3
57349: ARRAY
57350: EQUAL
57351: AND
57352: IFFALSE 57362
// result := true ;
57354: LD_ADDR_VAR 0 4
57358: PUSH
57359: LD_INT 1
57361: ST_TO_ADDR
// end ; end ;
57362: LD_VAR 0 4
57366: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
57367: LD_INT 0
57369: PPUSH
57370: PPUSH
57371: PPUSH
57372: PPUSH
// if not unit or not area then
57373: LD_VAR 0 1
57377: NOT
57378: PUSH
57379: LD_VAR 0 2
57383: NOT
57384: OR
57385: IFFALSE 57389
// exit ;
57387: GO 57565
// tmp := AreaToList ( area , i ) ;
57389: LD_ADDR_VAR 0 6
57393: PUSH
57394: LD_VAR 0 2
57398: PPUSH
57399: LD_VAR 0 5
57403: PPUSH
57404: CALL_OW 517
57408: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
57409: LD_ADDR_VAR 0 5
57413: PUSH
57414: DOUBLE
57415: LD_INT 1
57417: DEC
57418: ST_TO_ADDR
57419: LD_VAR 0 6
57423: PUSH
57424: LD_INT 1
57426: ARRAY
57427: PUSH
57428: FOR_TO
57429: IFFALSE 57563
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
57431: LD_ADDR_VAR 0 7
57435: PUSH
57436: LD_VAR 0 6
57440: PUSH
57441: LD_INT 1
57443: ARRAY
57444: PUSH
57445: LD_VAR 0 5
57449: ARRAY
57450: PUSH
57451: LD_VAR 0 6
57455: PUSH
57456: LD_INT 2
57458: ARRAY
57459: PUSH
57460: LD_VAR 0 5
57464: ARRAY
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
57470: LD_INT 92
57472: PUSH
57473: LD_VAR 0 7
57477: PUSH
57478: LD_INT 1
57480: ARRAY
57481: PUSH
57482: LD_VAR 0 7
57486: PUSH
57487: LD_INT 2
57489: ARRAY
57490: PUSH
57491: LD_INT 2
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: PPUSH
57500: CALL_OW 69
57504: PUSH
57505: LD_INT 0
57507: EQUAL
57508: IFFALSE 57561
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
57510: LD_VAR 0 1
57514: PPUSH
57515: LD_VAR 0 7
57519: PUSH
57520: LD_INT 1
57522: ARRAY
57523: PPUSH
57524: LD_VAR 0 7
57528: PUSH
57529: LD_INT 2
57531: ARRAY
57532: PPUSH
57533: LD_VAR 0 3
57537: PPUSH
57538: CALL_OW 48
// result := IsPlaced ( unit ) ;
57542: LD_ADDR_VAR 0 4
57546: PUSH
57547: LD_VAR 0 1
57551: PPUSH
57552: CALL_OW 305
57556: ST_TO_ADDR
// exit ;
57557: POP
57558: POP
57559: GO 57565
// end ; end ;
57561: GO 57428
57563: POP
57564: POP
// end ;
57565: LD_VAR 0 4
57569: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
57570: LD_INT 0
57572: PPUSH
57573: PPUSH
57574: PPUSH
// if not side or side > 8 then
57575: LD_VAR 0 1
57579: NOT
57580: PUSH
57581: LD_VAR 0 1
57585: PUSH
57586: LD_INT 8
57588: GREATER
57589: OR
57590: IFFALSE 57594
// exit ;
57592: GO 57781
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
57594: LD_ADDR_VAR 0 4
57598: PUSH
57599: LD_INT 22
57601: PUSH
57602: LD_VAR 0 1
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 21
57613: PUSH
57614: LD_INT 3
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PPUSH
57625: CALL_OW 69
57629: ST_TO_ADDR
// if not tmp then
57630: LD_VAR 0 4
57634: NOT
57635: IFFALSE 57639
// exit ;
57637: GO 57781
// enable_addtolog := true ;
57639: LD_ADDR_OWVAR 81
57643: PUSH
57644: LD_INT 1
57646: ST_TO_ADDR
// AddToLog ( [ ) ;
57647: LD_STRING [
57649: PPUSH
57650: CALL_OW 561
// for i in tmp do
57654: LD_ADDR_VAR 0 3
57658: PUSH
57659: LD_VAR 0 4
57663: PUSH
57664: FOR_IN
57665: IFFALSE 57772
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
57667: LD_STRING [
57669: PUSH
57670: LD_VAR 0 3
57674: PPUSH
57675: CALL_OW 266
57679: STR
57680: PUSH
57681: LD_STRING , 
57683: STR
57684: PUSH
57685: LD_VAR 0 3
57689: PPUSH
57690: CALL_OW 250
57694: STR
57695: PUSH
57696: LD_STRING , 
57698: STR
57699: PUSH
57700: LD_VAR 0 3
57704: PPUSH
57705: CALL_OW 251
57709: STR
57710: PUSH
57711: LD_STRING , 
57713: STR
57714: PUSH
57715: LD_VAR 0 3
57719: PPUSH
57720: CALL_OW 254
57724: STR
57725: PUSH
57726: LD_STRING , 
57728: STR
57729: PUSH
57730: LD_VAR 0 3
57734: PPUSH
57735: LD_INT 1
57737: PPUSH
57738: CALL_OW 268
57742: STR
57743: PUSH
57744: LD_STRING , 
57746: STR
57747: PUSH
57748: LD_VAR 0 3
57752: PPUSH
57753: LD_INT 2
57755: PPUSH
57756: CALL_OW 268
57760: STR
57761: PUSH
57762: LD_STRING ],
57764: STR
57765: PPUSH
57766: CALL_OW 561
// end ;
57770: GO 57664
57772: POP
57773: POP
// AddToLog ( ]; ) ;
57774: LD_STRING ];
57776: PPUSH
57777: CALL_OW 561
// end ;
57781: LD_VAR 0 2
57785: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
57786: LD_INT 0
57788: PPUSH
57789: PPUSH
57790: PPUSH
57791: PPUSH
57792: PPUSH
// if not area or not rate or not max then
57793: LD_VAR 0 1
57797: NOT
57798: PUSH
57799: LD_VAR 0 2
57803: NOT
57804: OR
57805: PUSH
57806: LD_VAR 0 4
57810: NOT
57811: OR
57812: IFFALSE 57816
// exit ;
57814: GO 58005
// while 1 do
57816: LD_INT 1
57818: IFFALSE 58005
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
57820: LD_ADDR_VAR 0 9
57824: PUSH
57825: LD_VAR 0 1
57829: PPUSH
57830: LD_INT 1
57832: PPUSH
57833: CALL_OW 287
57837: PUSH
57838: LD_INT 10
57840: MUL
57841: ST_TO_ADDR
// r := rate / 10 ;
57842: LD_ADDR_VAR 0 7
57846: PUSH
57847: LD_VAR 0 2
57851: PUSH
57852: LD_INT 10
57854: DIVREAL
57855: ST_TO_ADDR
// time := 1 1$00 ;
57856: LD_ADDR_VAR 0 8
57860: PUSH
57861: LD_INT 2100
57863: ST_TO_ADDR
// if amount < min then
57864: LD_VAR 0 9
57868: PUSH
57869: LD_VAR 0 3
57873: LESS
57874: IFFALSE 57892
// r := r * 2 else
57876: LD_ADDR_VAR 0 7
57880: PUSH
57881: LD_VAR 0 7
57885: PUSH
57886: LD_INT 2
57888: MUL
57889: ST_TO_ADDR
57890: GO 57918
// if amount > max then
57892: LD_VAR 0 9
57896: PUSH
57897: LD_VAR 0 4
57901: GREATER
57902: IFFALSE 57918
// r := r / 2 ;
57904: LD_ADDR_VAR 0 7
57908: PUSH
57909: LD_VAR 0 7
57913: PUSH
57914: LD_INT 2
57916: DIVREAL
57917: ST_TO_ADDR
// time := time / r ;
57918: LD_ADDR_VAR 0 8
57922: PUSH
57923: LD_VAR 0 8
57927: PUSH
57928: LD_VAR 0 7
57932: DIVREAL
57933: ST_TO_ADDR
// if time < 0 then
57934: LD_VAR 0 8
57938: PUSH
57939: LD_INT 0
57941: LESS
57942: IFFALSE 57959
// time := time * - 1 ;
57944: LD_ADDR_VAR 0 8
57948: PUSH
57949: LD_VAR 0 8
57953: PUSH
57954: LD_INT 1
57956: NEG
57957: MUL
57958: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
57959: LD_VAR 0 8
57963: PUSH
57964: LD_INT 35
57966: PPUSH
57967: LD_INT 875
57969: PPUSH
57970: CALL_OW 12
57974: PLUS
57975: PPUSH
57976: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
57980: LD_INT 1
57982: PPUSH
57983: LD_INT 5
57985: PPUSH
57986: CALL_OW 12
57990: PPUSH
57991: LD_VAR 0 1
57995: PPUSH
57996: LD_INT 1
57998: PPUSH
57999: CALL_OW 55
// end ;
58003: GO 57816
// end ;
58005: LD_VAR 0 5
58009: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58010: LD_INT 0
58012: PPUSH
58013: PPUSH
58014: PPUSH
58015: PPUSH
58016: PPUSH
58017: PPUSH
58018: PPUSH
58019: PPUSH
// if not turrets or not factories then
58020: LD_VAR 0 1
58024: NOT
58025: PUSH
58026: LD_VAR 0 2
58030: NOT
58031: OR
58032: IFFALSE 58036
// exit ;
58034: GO 58343
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58036: LD_ADDR_VAR 0 10
58040: PUSH
58041: LD_INT 5
58043: PUSH
58044: LD_INT 6
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 2
58053: PUSH
58054: LD_INT 4
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 3
58063: PUSH
58064: LD_INT 5
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 24
58078: PUSH
58079: LD_INT 25
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 23
58088: PUSH
58089: LD_INT 27
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 42
58102: PUSH
58103: LD_INT 43
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 44
58112: PUSH
58113: LD_INT 46
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 45
58122: PUSH
58123: LD_INT 47
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: LIST
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: LIST
58139: ST_TO_ADDR
// result := [ ] ;
58140: LD_ADDR_VAR 0 3
58144: PUSH
58145: EMPTY
58146: ST_TO_ADDR
// for i in turrets do
58147: LD_ADDR_VAR 0 4
58151: PUSH
58152: LD_VAR 0 1
58156: PUSH
58157: FOR_IN
58158: IFFALSE 58341
// begin nat := GetNation ( i ) ;
58160: LD_ADDR_VAR 0 7
58164: PUSH
58165: LD_VAR 0 4
58169: PPUSH
58170: CALL_OW 248
58174: ST_TO_ADDR
// weapon := 0 ;
58175: LD_ADDR_VAR 0 8
58179: PUSH
58180: LD_INT 0
58182: ST_TO_ADDR
// if not nat then
58183: LD_VAR 0 7
58187: NOT
58188: IFFALSE 58192
// continue ;
58190: GO 58157
// for j in list [ nat ] do
58192: LD_ADDR_VAR 0 5
58196: PUSH
58197: LD_VAR 0 10
58201: PUSH
58202: LD_VAR 0 7
58206: ARRAY
58207: PUSH
58208: FOR_IN
58209: IFFALSE 58250
// if GetBWeapon ( i ) = j [ 1 ] then
58211: LD_VAR 0 4
58215: PPUSH
58216: CALL_OW 269
58220: PUSH
58221: LD_VAR 0 5
58225: PUSH
58226: LD_INT 1
58228: ARRAY
58229: EQUAL
58230: IFFALSE 58248
// begin weapon := j [ 2 ] ;
58232: LD_ADDR_VAR 0 8
58236: PUSH
58237: LD_VAR 0 5
58241: PUSH
58242: LD_INT 2
58244: ARRAY
58245: ST_TO_ADDR
// break ;
58246: GO 58250
// end ;
58248: GO 58208
58250: POP
58251: POP
// if not weapon then
58252: LD_VAR 0 8
58256: NOT
58257: IFFALSE 58261
// continue ;
58259: GO 58157
// for k in factories do
58261: LD_ADDR_VAR 0 6
58265: PUSH
58266: LD_VAR 0 2
58270: PUSH
58271: FOR_IN
58272: IFFALSE 58337
// begin weapons := AvailableWeaponList ( k ) ;
58274: LD_ADDR_VAR 0 9
58278: PUSH
58279: LD_VAR 0 6
58283: PPUSH
58284: CALL_OW 478
58288: ST_TO_ADDR
// if not weapons then
58289: LD_VAR 0 9
58293: NOT
58294: IFFALSE 58298
// continue ;
58296: GO 58271
// if weapon in weapons then
58298: LD_VAR 0 8
58302: PUSH
58303: LD_VAR 0 9
58307: IN
58308: IFFALSE 58335
// begin result := [ i , weapon ] ;
58310: LD_ADDR_VAR 0 3
58314: PUSH
58315: LD_VAR 0 4
58319: PUSH
58320: LD_VAR 0 8
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: ST_TO_ADDR
// exit ;
58329: POP
58330: POP
58331: POP
58332: POP
58333: GO 58343
// end ; end ;
58335: GO 58271
58337: POP
58338: POP
// end ;
58339: GO 58157
58341: POP
58342: POP
// end ;
58343: LD_VAR 0 3
58347: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
58348: LD_INT 0
58350: PPUSH
// if not side or side > 8 then
58351: LD_VAR 0 3
58355: NOT
58356: PUSH
58357: LD_VAR 0 3
58361: PUSH
58362: LD_INT 8
58364: GREATER
58365: OR
58366: IFFALSE 58370
// exit ;
58368: GO 58429
// if not range then
58370: LD_VAR 0 4
58374: NOT
58375: IFFALSE 58386
// range := - 12 ;
58377: LD_ADDR_VAR 0 4
58381: PUSH
58382: LD_INT 12
58384: NEG
58385: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
58386: LD_VAR 0 1
58390: PPUSH
58391: LD_VAR 0 2
58395: PPUSH
58396: LD_VAR 0 3
58400: PPUSH
58401: LD_VAR 0 4
58405: PPUSH
58406: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
58410: LD_VAR 0 1
58414: PPUSH
58415: LD_VAR 0 2
58419: PPUSH
58420: LD_VAR 0 3
58424: PPUSH
58425: CALL_OW 331
// end ;
58429: LD_VAR 0 5
58433: RET
// export function Video ( mode ) ; begin
58434: LD_INT 0
58436: PPUSH
// ingame_video = mode ;
58437: LD_ADDR_OWVAR 52
58441: PUSH
58442: LD_VAR 0 1
58446: ST_TO_ADDR
// interface_hidden = mode ;
58447: LD_ADDR_OWVAR 54
58451: PUSH
58452: LD_VAR 0 1
58456: ST_TO_ADDR
// end ;
58457: LD_VAR 0 2
58461: RET
// export function Join ( array , element ) ; begin
58462: LD_INT 0
58464: PPUSH
// result := Replace ( array , array + 1 , element ) ;
58465: LD_ADDR_VAR 0 3
58469: PUSH
58470: LD_VAR 0 1
58474: PPUSH
58475: LD_VAR 0 1
58479: PUSH
58480: LD_INT 1
58482: PLUS
58483: PPUSH
58484: LD_VAR 0 2
58488: PPUSH
58489: CALL_OW 1
58493: ST_TO_ADDR
// end ;
58494: LD_VAR 0 3
58498: RET
// export function JoinUnion ( array , element ) ; begin
58499: LD_INT 0
58501: PPUSH
// result := array union element ;
58502: LD_ADDR_VAR 0 3
58506: PUSH
58507: LD_VAR 0 1
58511: PUSH
58512: LD_VAR 0 2
58516: UNION
58517: ST_TO_ADDR
// end ;
58518: LD_VAR 0 3
58522: RET
// export function GetBehemoths ( side ) ; begin
58523: LD_INT 0
58525: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
58526: LD_ADDR_VAR 0 2
58530: PUSH
58531: LD_INT 22
58533: PUSH
58534: LD_VAR 0 1
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 31
58545: PUSH
58546: LD_INT 25
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PPUSH
58557: CALL_OW 69
58561: ST_TO_ADDR
// end ;
58562: LD_VAR 0 2
58566: RET
// export function Shuffle ( array ) ; var i , index ; begin
58567: LD_INT 0
58569: PPUSH
58570: PPUSH
58571: PPUSH
// result := [ ] ;
58572: LD_ADDR_VAR 0 2
58576: PUSH
58577: EMPTY
58578: ST_TO_ADDR
// if not array then
58579: LD_VAR 0 1
58583: NOT
58584: IFFALSE 58588
// exit ;
58586: GO 58687
// Randomize ;
58588: CALL_OW 10
// for i = array downto 1 do
58592: LD_ADDR_VAR 0 3
58596: PUSH
58597: DOUBLE
58598: LD_VAR 0 1
58602: INC
58603: ST_TO_ADDR
58604: LD_INT 1
58606: PUSH
58607: FOR_DOWNTO
58608: IFFALSE 58685
// begin index := rand ( 1 , array ) ;
58610: LD_ADDR_VAR 0 4
58614: PUSH
58615: LD_INT 1
58617: PPUSH
58618: LD_VAR 0 1
58622: PPUSH
58623: CALL_OW 12
58627: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
58628: LD_ADDR_VAR 0 2
58632: PUSH
58633: LD_VAR 0 2
58637: PPUSH
58638: LD_VAR 0 2
58642: PUSH
58643: LD_INT 1
58645: PLUS
58646: PPUSH
58647: LD_VAR 0 1
58651: PUSH
58652: LD_VAR 0 4
58656: ARRAY
58657: PPUSH
58658: CALL_OW 2
58662: ST_TO_ADDR
// array := Delete ( array , index ) ;
58663: LD_ADDR_VAR 0 1
58667: PUSH
58668: LD_VAR 0 1
58672: PPUSH
58673: LD_VAR 0 4
58677: PPUSH
58678: CALL_OW 3
58682: ST_TO_ADDR
// end ;
58683: GO 58607
58685: POP
58686: POP
// end ;
58687: LD_VAR 0 2
58691: RET
// export function GetBaseMaterials ( base ) ; begin
58692: LD_INT 0
58694: PPUSH
// result := [ 0 , 0 , 0 ] ;
58695: LD_ADDR_VAR 0 2
58699: PUSH
58700: LD_INT 0
58702: PUSH
58703: LD_INT 0
58705: PUSH
58706: LD_INT 0
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: LIST
58713: ST_TO_ADDR
// if not base then
58714: LD_VAR 0 1
58718: NOT
58719: IFFALSE 58723
// exit ;
58721: GO 58772
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
58723: LD_ADDR_VAR 0 2
58727: PUSH
58728: LD_VAR 0 1
58732: PPUSH
58733: LD_INT 1
58735: PPUSH
58736: CALL_OW 275
58740: PUSH
58741: LD_VAR 0 1
58745: PPUSH
58746: LD_INT 2
58748: PPUSH
58749: CALL_OW 275
58753: PUSH
58754: LD_VAR 0 1
58758: PPUSH
58759: LD_INT 3
58761: PPUSH
58762: CALL_OW 275
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: LIST
58771: ST_TO_ADDR
// end ;
58772: LD_VAR 0 2
58776: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
58777: LD_INT 0
58779: PPUSH
58780: PPUSH
// result := array ;
58781: LD_ADDR_VAR 0 3
58785: PUSH
58786: LD_VAR 0 1
58790: ST_TO_ADDR
// if size >= result then
58791: LD_VAR 0 2
58795: PUSH
58796: LD_VAR 0 3
58800: GREATEREQUAL
58801: IFFALSE 58805
// exit ;
58803: GO 58855
// if size then
58805: LD_VAR 0 2
58809: IFFALSE 58855
// for i := array downto size do
58811: LD_ADDR_VAR 0 4
58815: PUSH
58816: DOUBLE
58817: LD_VAR 0 1
58821: INC
58822: ST_TO_ADDR
58823: LD_VAR 0 2
58827: PUSH
58828: FOR_DOWNTO
58829: IFFALSE 58853
// result := Delete ( result , result ) ;
58831: LD_ADDR_VAR 0 3
58835: PUSH
58836: LD_VAR 0 3
58840: PPUSH
58841: LD_VAR 0 3
58845: PPUSH
58846: CALL_OW 3
58850: ST_TO_ADDR
58851: GO 58828
58853: POP
58854: POP
// end ;
58855: LD_VAR 0 3
58859: RET
// export function ComExit ( unit ) ; var tmp ; begin
58860: LD_INT 0
58862: PPUSH
58863: PPUSH
// if not IsInUnit ( unit ) then
58864: LD_VAR 0 1
58868: PPUSH
58869: CALL_OW 310
58873: NOT
58874: IFFALSE 58878
// exit ;
58876: GO 58938
// tmp := IsInUnit ( unit ) ;
58878: LD_ADDR_VAR 0 3
58882: PUSH
58883: LD_VAR 0 1
58887: PPUSH
58888: CALL_OW 310
58892: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
58893: LD_VAR 0 3
58897: PPUSH
58898: CALL_OW 247
58902: PUSH
58903: LD_INT 2
58905: EQUAL
58906: IFFALSE 58919
// ComExitVehicle ( unit ) else
58908: LD_VAR 0 1
58912: PPUSH
58913: CALL_OW 121
58917: GO 58928
// ComExitBuilding ( unit ) ;
58919: LD_VAR 0 1
58923: PPUSH
58924: CALL_OW 122
// result := tmp ;
58928: LD_ADDR_VAR 0 2
58932: PUSH
58933: LD_VAR 0 3
58937: ST_TO_ADDR
// end ;
58938: LD_VAR 0 2
58942: RET
// export function ComExitAll ( units ) ; var i ; begin
58943: LD_INT 0
58945: PPUSH
58946: PPUSH
// if not units then
58947: LD_VAR 0 1
58951: NOT
58952: IFFALSE 58956
// exit ;
58954: GO 58982
// for i in units do
58956: LD_ADDR_VAR 0 3
58960: PUSH
58961: LD_VAR 0 1
58965: PUSH
58966: FOR_IN
58967: IFFALSE 58980
// ComExit ( i ) ;
58969: LD_VAR 0 3
58973: PPUSH
58974: CALL 58860 0 1
58978: GO 58966
58980: POP
58981: POP
// end ;
58982: LD_VAR 0 2
58986: RET
// export function ResetHc ; begin
58987: LD_INT 0
58989: PPUSH
// InitHc ;
58990: CALL_OW 19
// hc_importance := 0 ;
58994: LD_ADDR_OWVAR 32
58998: PUSH
58999: LD_INT 0
59001: ST_TO_ADDR
// end ;
59002: LD_VAR 0 1
59006: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
59007: LD_INT 0
59009: PPUSH
59010: PPUSH
59011: PPUSH
// _x := ( x1 + x2 ) div 2 ;
59012: LD_ADDR_VAR 0 6
59016: PUSH
59017: LD_VAR 0 1
59021: PUSH
59022: LD_VAR 0 3
59026: PLUS
59027: PUSH
59028: LD_INT 2
59030: DIV
59031: ST_TO_ADDR
// if _x < 0 then
59032: LD_VAR 0 6
59036: PUSH
59037: LD_INT 0
59039: LESS
59040: IFFALSE 59057
// _x := _x * - 1 ;
59042: LD_ADDR_VAR 0 6
59046: PUSH
59047: LD_VAR 0 6
59051: PUSH
59052: LD_INT 1
59054: NEG
59055: MUL
59056: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
59057: LD_ADDR_VAR 0 7
59061: PUSH
59062: LD_VAR 0 2
59066: PUSH
59067: LD_VAR 0 4
59071: PLUS
59072: PUSH
59073: LD_INT 2
59075: DIV
59076: ST_TO_ADDR
// if _y < 0 then
59077: LD_VAR 0 7
59081: PUSH
59082: LD_INT 0
59084: LESS
59085: IFFALSE 59102
// _y := _y * - 1 ;
59087: LD_ADDR_VAR 0 7
59091: PUSH
59092: LD_VAR 0 7
59096: PUSH
59097: LD_INT 1
59099: NEG
59100: MUL
59101: ST_TO_ADDR
// result := [ _x , _y ] ;
59102: LD_ADDR_VAR 0 5
59106: PUSH
59107: LD_VAR 0 6
59111: PUSH
59112: LD_VAR 0 7
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: ST_TO_ADDR
// end ;
59121: LD_VAR 0 5
59125: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
59126: LD_INT 0
59128: PPUSH
59129: PPUSH
59130: PPUSH
59131: PPUSH
// task := GetTaskList ( unit ) ;
59132: LD_ADDR_VAR 0 7
59136: PUSH
59137: LD_VAR 0 1
59141: PPUSH
59142: CALL_OW 437
59146: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
59147: LD_VAR 0 7
59151: NOT
59152: PUSH
59153: LD_VAR 0 1
59157: PPUSH
59158: LD_VAR 0 2
59162: PPUSH
59163: CALL_OW 308
59167: NOT
59168: AND
59169: IFFALSE 59173
// exit ;
59171: GO 59291
// if IsInArea ( unit , area ) then
59173: LD_VAR 0 1
59177: PPUSH
59178: LD_VAR 0 2
59182: PPUSH
59183: CALL_OW 308
59187: IFFALSE 59205
// begin ComMoveToArea ( unit , goAway ) ;
59189: LD_VAR 0 1
59193: PPUSH
59194: LD_VAR 0 3
59198: PPUSH
59199: CALL_OW 113
// exit ;
59203: GO 59291
// end ; if task [ 1 ] [ 1 ] <> M then
59205: LD_VAR 0 7
59209: PUSH
59210: LD_INT 1
59212: ARRAY
59213: PUSH
59214: LD_INT 1
59216: ARRAY
59217: PUSH
59218: LD_STRING M
59220: NONEQUAL
59221: IFFALSE 59225
// exit ;
59223: GO 59291
// x := task [ 1 ] [ 2 ] ;
59225: LD_ADDR_VAR 0 5
59229: PUSH
59230: LD_VAR 0 7
59234: PUSH
59235: LD_INT 1
59237: ARRAY
59238: PUSH
59239: LD_INT 2
59241: ARRAY
59242: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
59243: LD_ADDR_VAR 0 6
59247: PUSH
59248: LD_VAR 0 7
59252: PUSH
59253: LD_INT 1
59255: ARRAY
59256: PUSH
59257: LD_INT 3
59259: ARRAY
59260: ST_TO_ADDR
// if InArea ( x , y , area ) then
59261: LD_VAR 0 5
59265: PPUSH
59266: LD_VAR 0 6
59270: PPUSH
59271: LD_VAR 0 2
59275: PPUSH
59276: CALL_OW 309
59280: IFFALSE 59291
// ComStop ( unit ) ;
59282: LD_VAR 0 1
59286: PPUSH
59287: CALL_OW 141
// end ;
59291: LD_VAR 0 4
59295: RET
// export function Abs ( value ) ; begin
59296: LD_INT 0
59298: PPUSH
// result := value ;
59299: LD_ADDR_VAR 0 2
59303: PUSH
59304: LD_VAR 0 1
59308: ST_TO_ADDR
// if value < 0 then
59309: LD_VAR 0 1
59313: PUSH
59314: LD_INT 0
59316: LESS
59317: IFFALSE 59334
// result := value * - 1 ;
59319: LD_ADDR_VAR 0 2
59323: PUSH
59324: LD_VAR 0 1
59328: PUSH
59329: LD_INT 1
59331: NEG
59332: MUL
59333: ST_TO_ADDR
// end ;
59334: LD_VAR 0 2
59338: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
59339: LD_INT 0
59341: PPUSH
59342: PPUSH
59343: PPUSH
59344: PPUSH
59345: PPUSH
59346: PPUSH
59347: PPUSH
59348: PPUSH
// if not unit or not building then
59349: LD_VAR 0 1
59353: NOT
59354: PUSH
59355: LD_VAR 0 2
59359: NOT
59360: OR
59361: IFFALSE 59365
// exit ;
59363: GO 59591
// x := GetX ( building ) ;
59365: LD_ADDR_VAR 0 4
59369: PUSH
59370: LD_VAR 0 2
59374: PPUSH
59375: CALL_OW 250
59379: ST_TO_ADDR
// y := GetY ( building ) ;
59380: LD_ADDR_VAR 0 6
59384: PUSH
59385: LD_VAR 0 2
59389: PPUSH
59390: CALL_OW 251
59394: ST_TO_ADDR
// d := GetDir ( building ) ;
59395: LD_ADDR_VAR 0 8
59399: PUSH
59400: LD_VAR 0 2
59404: PPUSH
59405: CALL_OW 254
59409: ST_TO_ADDR
// r := 4 ;
59410: LD_ADDR_VAR 0 9
59414: PUSH
59415: LD_INT 4
59417: ST_TO_ADDR
// for i := 1 to 5 do
59418: LD_ADDR_VAR 0 10
59422: PUSH
59423: DOUBLE
59424: LD_INT 1
59426: DEC
59427: ST_TO_ADDR
59428: LD_INT 5
59430: PUSH
59431: FOR_TO
59432: IFFALSE 59589
// begin _x := ShiftX ( x , d , r + i ) ;
59434: LD_ADDR_VAR 0 5
59438: PUSH
59439: LD_VAR 0 4
59443: PPUSH
59444: LD_VAR 0 8
59448: PPUSH
59449: LD_VAR 0 9
59453: PUSH
59454: LD_VAR 0 10
59458: PLUS
59459: PPUSH
59460: CALL_OW 272
59464: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
59465: LD_ADDR_VAR 0 7
59469: PUSH
59470: LD_VAR 0 6
59474: PPUSH
59475: LD_VAR 0 8
59479: PPUSH
59480: LD_VAR 0 9
59484: PUSH
59485: LD_VAR 0 10
59489: PLUS
59490: PPUSH
59491: CALL_OW 273
59495: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
59496: LD_VAR 0 5
59500: PPUSH
59501: LD_VAR 0 7
59505: PPUSH
59506: CALL_OW 488
59510: PUSH
59511: LD_VAR 0 5
59515: PPUSH
59516: LD_VAR 0 7
59520: PPUSH
59521: CALL_OW 428
59525: PPUSH
59526: CALL_OW 247
59530: PUSH
59531: LD_INT 3
59533: PUSH
59534: LD_INT 2
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: IN
59541: NOT
59542: AND
59543: IFFALSE 59587
// begin ComMoveXY ( unit , _x , _y ) ;
59545: LD_VAR 0 1
59549: PPUSH
59550: LD_VAR 0 5
59554: PPUSH
59555: LD_VAR 0 7
59559: PPUSH
59560: CALL_OW 111
// result := [ _x , _y ] ;
59564: LD_ADDR_VAR 0 3
59568: PUSH
59569: LD_VAR 0 5
59573: PUSH
59574: LD_VAR 0 7
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: ST_TO_ADDR
// exit ;
59583: POP
59584: POP
59585: GO 59591
// end ; end ;
59587: GO 59431
59589: POP
59590: POP
// end ;
59591: LD_VAR 0 3
59595: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
59596: LD_INT 0
59598: PPUSH
59599: PPUSH
59600: PPUSH
// result := 0 ;
59601: LD_ADDR_VAR 0 3
59605: PUSH
59606: LD_INT 0
59608: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
59609: LD_VAR 0 1
59613: PUSH
59614: LD_INT 0
59616: LESS
59617: PUSH
59618: LD_VAR 0 1
59622: PUSH
59623: LD_INT 8
59625: GREATER
59626: OR
59627: PUSH
59628: LD_VAR 0 2
59632: PUSH
59633: LD_INT 0
59635: LESS
59636: OR
59637: PUSH
59638: LD_VAR 0 2
59642: PUSH
59643: LD_INT 8
59645: GREATER
59646: OR
59647: IFFALSE 59651
// exit ;
59649: GO 59726
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
59651: LD_ADDR_VAR 0 4
59655: PUSH
59656: LD_INT 22
59658: PUSH
59659: LD_VAR 0 2
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PPUSH
59668: CALL_OW 69
59672: PUSH
59673: FOR_IN
59674: IFFALSE 59724
// begin un := UnitShoot ( i ) ;
59676: LD_ADDR_VAR 0 5
59680: PUSH
59681: LD_VAR 0 4
59685: PPUSH
59686: CALL_OW 504
59690: ST_TO_ADDR
// if GetSide ( un ) = side1 then
59691: LD_VAR 0 5
59695: PPUSH
59696: CALL_OW 255
59700: PUSH
59701: LD_VAR 0 1
59705: EQUAL
59706: IFFALSE 59722
// begin result := un ;
59708: LD_ADDR_VAR 0 3
59712: PUSH
59713: LD_VAR 0 5
59717: ST_TO_ADDR
// exit ;
59718: POP
59719: POP
59720: GO 59726
// end ; end ;
59722: GO 59673
59724: POP
59725: POP
// end ;
59726: LD_VAR 0 3
59730: RET
// export function GetCargoBay ( units ) ; begin
59731: LD_INT 0
59733: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
59734: LD_ADDR_VAR 0 2
59738: PUSH
59739: LD_VAR 0 1
59743: PPUSH
59744: LD_INT 2
59746: PUSH
59747: LD_INT 34
59749: PUSH
59750: LD_INT 12
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 34
59759: PUSH
59760: LD_INT 51
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 34
59769: PUSH
59770: LD_INT 32
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 34
59779: PUSH
59780: LD_INT 89
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: PPUSH
59794: CALL_OW 72
59798: ST_TO_ADDR
// end ;
59799: LD_VAR 0 2
59803: RET
// export function Negate ( value ) ; begin
59804: LD_INT 0
59806: PPUSH
// result := not value ;
59807: LD_ADDR_VAR 0 2
59811: PUSH
59812: LD_VAR 0 1
59816: NOT
59817: ST_TO_ADDR
// end ;
59818: LD_VAR 0 2
59822: RET
// export function Inc ( value ) ; begin
59823: LD_INT 0
59825: PPUSH
// result := value + 1 ;
59826: LD_ADDR_VAR 0 2
59830: PUSH
59831: LD_VAR 0 1
59835: PUSH
59836: LD_INT 1
59838: PLUS
59839: ST_TO_ADDR
// end ;
59840: LD_VAR 0 2
59844: RET
// export function Dec ( value ) ; begin
59845: LD_INT 0
59847: PPUSH
// result := value - 1 ;
59848: LD_ADDR_VAR 0 2
59852: PUSH
59853: LD_VAR 0 1
59857: PUSH
59858: LD_INT 1
59860: MINUS
59861: ST_TO_ADDR
// end ;
59862: LD_VAR 0 2
59866: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
59867: LD_INT 0
59869: PPUSH
59870: PPUSH
59871: PPUSH
59872: PPUSH
59873: PPUSH
59874: PPUSH
59875: PPUSH
59876: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
59877: LD_VAR 0 1
59881: PPUSH
59882: LD_VAR 0 2
59886: PPUSH
59887: CALL_OW 488
59891: NOT
59892: PUSH
59893: LD_VAR 0 3
59897: PPUSH
59898: LD_VAR 0 4
59902: PPUSH
59903: CALL_OW 488
59907: NOT
59908: OR
59909: IFFALSE 59922
// begin result := - 1 ;
59911: LD_ADDR_VAR 0 5
59915: PUSH
59916: LD_INT 1
59918: NEG
59919: ST_TO_ADDR
// exit ;
59920: GO 60157
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
59922: LD_ADDR_VAR 0 12
59926: PUSH
59927: LD_VAR 0 1
59931: PPUSH
59932: LD_VAR 0 2
59936: PPUSH
59937: LD_VAR 0 3
59941: PPUSH
59942: LD_VAR 0 4
59946: PPUSH
59947: CALL 59007 0 4
59951: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
59952: LD_ADDR_VAR 0 11
59956: PUSH
59957: LD_VAR 0 1
59961: PPUSH
59962: LD_VAR 0 2
59966: PPUSH
59967: LD_VAR 0 12
59971: PUSH
59972: LD_INT 1
59974: ARRAY
59975: PPUSH
59976: LD_VAR 0 12
59980: PUSH
59981: LD_INT 2
59983: ARRAY
59984: PPUSH
59985: CALL_OW 298
59989: ST_TO_ADDR
// distance := 9999 ;
59990: LD_ADDR_VAR 0 10
59994: PUSH
59995: LD_INT 9999
59997: ST_TO_ADDR
// for i := 0 to 5 do
59998: LD_ADDR_VAR 0 6
60002: PUSH
60003: DOUBLE
60004: LD_INT 0
60006: DEC
60007: ST_TO_ADDR
60008: LD_INT 5
60010: PUSH
60011: FOR_TO
60012: IFFALSE 60155
// begin _x := ShiftX ( x1 , i , centerDist ) ;
60014: LD_ADDR_VAR 0 7
60018: PUSH
60019: LD_VAR 0 1
60023: PPUSH
60024: LD_VAR 0 6
60028: PPUSH
60029: LD_VAR 0 11
60033: PPUSH
60034: CALL_OW 272
60038: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
60039: LD_ADDR_VAR 0 8
60043: PUSH
60044: LD_VAR 0 2
60048: PPUSH
60049: LD_VAR 0 6
60053: PPUSH
60054: LD_VAR 0 11
60058: PPUSH
60059: CALL_OW 273
60063: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60064: LD_VAR 0 7
60068: PPUSH
60069: LD_VAR 0 8
60073: PPUSH
60074: CALL_OW 488
60078: NOT
60079: IFFALSE 60083
// continue ;
60081: GO 60011
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
60083: LD_ADDR_VAR 0 9
60087: PUSH
60088: LD_VAR 0 12
60092: PUSH
60093: LD_INT 1
60095: ARRAY
60096: PPUSH
60097: LD_VAR 0 12
60101: PUSH
60102: LD_INT 2
60104: ARRAY
60105: PPUSH
60106: LD_VAR 0 7
60110: PPUSH
60111: LD_VAR 0 8
60115: PPUSH
60116: CALL_OW 298
60120: ST_TO_ADDR
// if tmp < distance then
60121: LD_VAR 0 9
60125: PUSH
60126: LD_VAR 0 10
60130: LESS
60131: IFFALSE 60153
// begin result := i ;
60133: LD_ADDR_VAR 0 5
60137: PUSH
60138: LD_VAR 0 6
60142: ST_TO_ADDR
// distance := tmp ;
60143: LD_ADDR_VAR 0 10
60147: PUSH
60148: LD_VAR 0 9
60152: ST_TO_ADDR
// end ; end ;
60153: GO 60011
60155: POP
60156: POP
// end ;
60157: LD_VAR 0 5
60161: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60162: LD_INT 0
60164: PPUSH
60165: PPUSH
// if not driver or not IsInUnit ( driver ) then
60166: LD_VAR 0 1
60170: NOT
60171: PUSH
60172: LD_VAR 0 1
60176: PPUSH
60177: CALL_OW 310
60181: NOT
60182: OR
60183: IFFALSE 60187
// exit ;
60185: GO 60277
// vehicle := IsInUnit ( driver ) ;
60187: LD_ADDR_VAR 0 3
60191: PUSH
60192: LD_VAR 0 1
60196: PPUSH
60197: CALL_OW 310
60201: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60202: LD_VAR 0 1
60206: PPUSH
60207: LD_STRING \
60209: PUSH
60210: LD_INT 0
60212: PUSH
60213: LD_INT 0
60215: PUSH
60216: LD_INT 0
60218: PUSH
60219: LD_INT 0
60221: PUSH
60222: LD_INT 0
60224: PUSH
60225: LD_INT 0
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: PUSH
60237: LD_STRING E
60239: PUSH
60240: LD_INT 0
60242: PUSH
60243: LD_INT 0
60245: PUSH
60246: LD_VAR 0 3
60250: PUSH
60251: LD_INT 0
60253: PUSH
60254: LD_INT 0
60256: PUSH
60257: LD_INT 0
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PPUSH
60273: CALL_OW 446
// end ;
60277: LD_VAR 0 2
60281: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60282: LD_INT 0
60284: PPUSH
60285: PPUSH
// if not driver or not IsInUnit ( driver ) then
60286: LD_VAR 0 1
60290: NOT
60291: PUSH
60292: LD_VAR 0 1
60296: PPUSH
60297: CALL_OW 310
60301: NOT
60302: OR
60303: IFFALSE 60307
// exit ;
60305: GO 60397
// vehicle := IsInUnit ( driver ) ;
60307: LD_ADDR_VAR 0 3
60311: PUSH
60312: LD_VAR 0 1
60316: PPUSH
60317: CALL_OW 310
60321: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60322: LD_VAR 0 1
60326: PPUSH
60327: LD_STRING \
60329: PUSH
60330: LD_INT 0
60332: PUSH
60333: LD_INT 0
60335: PUSH
60336: LD_INT 0
60338: PUSH
60339: LD_INT 0
60341: PUSH
60342: LD_INT 0
60344: PUSH
60345: LD_INT 0
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: PUSH
60357: LD_STRING E
60359: PUSH
60360: LD_INT 0
60362: PUSH
60363: LD_INT 0
60365: PUSH
60366: LD_VAR 0 3
60370: PUSH
60371: LD_INT 0
60373: PUSH
60374: LD_INT 0
60376: PUSH
60377: LD_INT 0
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PPUSH
60393: CALL_OW 447
// end ;
60397: LD_VAR 0 2
60401: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
60402: LD_INT 0
60404: PPUSH
60405: PPUSH
60406: PPUSH
// tmp := [ ] ;
60407: LD_ADDR_VAR 0 5
60411: PUSH
60412: EMPTY
60413: ST_TO_ADDR
// for i in units do
60414: LD_ADDR_VAR 0 4
60418: PUSH
60419: LD_VAR 0 1
60423: PUSH
60424: FOR_IN
60425: IFFALSE 60463
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
60427: LD_ADDR_VAR 0 5
60431: PUSH
60432: LD_VAR 0 5
60436: PPUSH
60437: LD_VAR 0 5
60441: PUSH
60442: LD_INT 1
60444: PLUS
60445: PPUSH
60446: LD_VAR 0 4
60450: PPUSH
60451: CALL_OW 256
60455: PPUSH
60456: CALL_OW 2
60460: ST_TO_ADDR
60461: GO 60424
60463: POP
60464: POP
// if not tmp then
60465: LD_VAR 0 5
60469: NOT
60470: IFFALSE 60474
// exit ;
60472: GO 60522
// if asc then
60474: LD_VAR 0 2
60478: IFFALSE 60502
// result := SortListByListAsc ( units , tmp ) else
60480: LD_ADDR_VAR 0 3
60484: PUSH
60485: LD_VAR 0 1
60489: PPUSH
60490: LD_VAR 0 5
60494: PPUSH
60495: CALL_OW 76
60499: ST_TO_ADDR
60500: GO 60522
// result := SortListByListDesc ( units , tmp ) ;
60502: LD_ADDR_VAR 0 3
60506: PUSH
60507: LD_VAR 0 1
60511: PPUSH
60512: LD_VAR 0 5
60516: PPUSH
60517: CALL_OW 77
60521: ST_TO_ADDR
// end ;
60522: LD_VAR 0 3
60526: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
60527: LD_INT 0
60529: PPUSH
60530: PPUSH
// task := GetTaskList ( mech ) ;
60531: LD_ADDR_VAR 0 4
60535: PUSH
60536: LD_VAR 0 1
60540: PPUSH
60541: CALL_OW 437
60545: ST_TO_ADDR
// if not task then
60546: LD_VAR 0 4
60550: NOT
60551: IFFALSE 60555
// exit ;
60553: GO 60597
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
60555: LD_ADDR_VAR 0 3
60559: PUSH
60560: LD_VAR 0 4
60564: PUSH
60565: LD_INT 1
60567: ARRAY
60568: PUSH
60569: LD_INT 1
60571: ARRAY
60572: PUSH
60573: LD_STRING r
60575: EQUAL
60576: PUSH
60577: LD_VAR 0 4
60581: PUSH
60582: LD_INT 1
60584: ARRAY
60585: PUSH
60586: LD_INT 4
60588: ARRAY
60589: PUSH
60590: LD_VAR 0 2
60594: EQUAL
60595: AND
60596: ST_TO_ADDR
// end ;
60597: LD_VAR 0 3
60601: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
60602: LD_INT 0
60604: PPUSH
// SetDir ( unit , d ) ;
60605: LD_VAR 0 1
60609: PPUSH
60610: LD_VAR 0 4
60614: PPUSH
60615: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
60619: LD_ADDR_VAR 0 6
60623: PUSH
60624: LD_VAR 0 1
60628: PPUSH
60629: LD_VAR 0 2
60633: PPUSH
60634: LD_VAR 0 3
60638: PPUSH
60639: LD_VAR 0 5
60643: PPUSH
60644: CALL_OW 48
60648: ST_TO_ADDR
// end ;
60649: LD_VAR 0 6
60653: RET
// export function ToNaturalNumber ( number ) ; begin
60654: LD_INT 0
60656: PPUSH
// result := number div 1 ;
60657: LD_ADDR_VAR 0 2
60661: PUSH
60662: LD_VAR 0 1
60666: PUSH
60667: LD_INT 1
60669: DIV
60670: ST_TO_ADDR
// if number < 0 then
60671: LD_VAR 0 1
60675: PUSH
60676: LD_INT 0
60678: LESS
60679: IFFALSE 60689
// result := 0 ;
60681: LD_ADDR_VAR 0 2
60685: PUSH
60686: LD_INT 0
60688: ST_TO_ADDR
// end ;
60689: LD_VAR 0 2
60693: RET
// export function SortByClass ( units , class ) ; var un ; begin
60694: LD_INT 0
60696: PPUSH
60697: PPUSH
// if not units or not class then
60698: LD_VAR 0 1
60702: NOT
60703: PUSH
60704: LD_VAR 0 2
60708: NOT
60709: OR
60710: IFFALSE 60714
// exit ;
60712: GO 60809
// result := [ ] ;
60714: LD_ADDR_VAR 0 3
60718: PUSH
60719: EMPTY
60720: ST_TO_ADDR
// for un in units do
60721: LD_ADDR_VAR 0 4
60725: PUSH
60726: LD_VAR 0 1
60730: PUSH
60731: FOR_IN
60732: IFFALSE 60807
// if GetClass ( un ) = class then
60734: LD_VAR 0 4
60738: PPUSH
60739: CALL_OW 257
60743: PUSH
60744: LD_VAR 0 2
60748: EQUAL
60749: IFFALSE 60776
// result := Insert ( result , 1 , un ) else
60751: LD_ADDR_VAR 0 3
60755: PUSH
60756: LD_VAR 0 3
60760: PPUSH
60761: LD_INT 1
60763: PPUSH
60764: LD_VAR 0 4
60768: PPUSH
60769: CALL_OW 2
60773: ST_TO_ADDR
60774: GO 60805
// result := Replace ( result , result + 1 , un ) ;
60776: LD_ADDR_VAR 0 3
60780: PUSH
60781: LD_VAR 0 3
60785: PPUSH
60786: LD_VAR 0 3
60790: PUSH
60791: LD_INT 1
60793: PLUS
60794: PPUSH
60795: LD_VAR 0 4
60799: PPUSH
60800: CALL_OW 1
60804: ST_TO_ADDR
60805: GO 60731
60807: POP
60808: POP
// end ;
60809: LD_VAR 0 3
60813: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
60814: LD_INT 0
60816: PPUSH
60817: PPUSH
60818: PPUSH
60819: PPUSH
60820: PPUSH
60821: PPUSH
60822: PPUSH
// result := [ ] ;
60823: LD_ADDR_VAR 0 4
60827: PUSH
60828: EMPTY
60829: ST_TO_ADDR
// if x - r < 0 then
60830: LD_VAR 0 1
60834: PUSH
60835: LD_VAR 0 3
60839: MINUS
60840: PUSH
60841: LD_INT 0
60843: LESS
60844: IFFALSE 60856
// min_x := 0 else
60846: LD_ADDR_VAR 0 8
60850: PUSH
60851: LD_INT 0
60853: ST_TO_ADDR
60854: GO 60872
// min_x := x - r ;
60856: LD_ADDR_VAR 0 8
60860: PUSH
60861: LD_VAR 0 1
60865: PUSH
60866: LD_VAR 0 3
60870: MINUS
60871: ST_TO_ADDR
// if y - r < 0 then
60872: LD_VAR 0 2
60876: PUSH
60877: LD_VAR 0 3
60881: MINUS
60882: PUSH
60883: LD_INT 0
60885: LESS
60886: IFFALSE 60898
// min_y := 0 else
60888: LD_ADDR_VAR 0 7
60892: PUSH
60893: LD_INT 0
60895: ST_TO_ADDR
60896: GO 60914
// min_y := y - r ;
60898: LD_ADDR_VAR 0 7
60902: PUSH
60903: LD_VAR 0 2
60907: PUSH
60908: LD_VAR 0 3
60912: MINUS
60913: ST_TO_ADDR
// max_x := x + r ;
60914: LD_ADDR_VAR 0 9
60918: PUSH
60919: LD_VAR 0 1
60923: PUSH
60924: LD_VAR 0 3
60928: PLUS
60929: ST_TO_ADDR
// max_y := y + r ;
60930: LD_ADDR_VAR 0 10
60934: PUSH
60935: LD_VAR 0 2
60939: PUSH
60940: LD_VAR 0 3
60944: PLUS
60945: ST_TO_ADDR
// for _x = min_x to max_x do
60946: LD_ADDR_VAR 0 5
60950: PUSH
60951: DOUBLE
60952: LD_VAR 0 8
60956: DEC
60957: ST_TO_ADDR
60958: LD_VAR 0 9
60962: PUSH
60963: FOR_TO
60964: IFFALSE 61065
// for _y = min_y to max_y do
60966: LD_ADDR_VAR 0 6
60970: PUSH
60971: DOUBLE
60972: LD_VAR 0 7
60976: DEC
60977: ST_TO_ADDR
60978: LD_VAR 0 10
60982: PUSH
60983: FOR_TO
60984: IFFALSE 61061
// begin if not ValidHex ( _x , _y ) then
60986: LD_VAR 0 5
60990: PPUSH
60991: LD_VAR 0 6
60995: PPUSH
60996: CALL_OW 488
61000: NOT
61001: IFFALSE 61005
// continue ;
61003: GO 60983
// if GetResourceTypeXY ( _x , _y ) then
61005: LD_VAR 0 5
61009: PPUSH
61010: LD_VAR 0 6
61014: PPUSH
61015: CALL_OW 283
61019: IFFALSE 61059
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
61021: LD_ADDR_VAR 0 4
61025: PUSH
61026: LD_VAR 0 4
61030: PPUSH
61031: LD_VAR 0 4
61035: PUSH
61036: LD_INT 1
61038: PLUS
61039: PPUSH
61040: LD_VAR 0 5
61044: PUSH
61045: LD_VAR 0 6
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PPUSH
61054: CALL_OW 1
61058: ST_TO_ADDR
// end ;
61059: GO 60983
61061: POP
61062: POP
61063: GO 60963
61065: POP
61066: POP
// end ;
61067: LD_VAR 0 4
61071: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
61072: LD_INT 0
61074: PPUSH
61075: PPUSH
61076: PPUSH
61077: PPUSH
61078: PPUSH
61079: PPUSH
61080: PPUSH
61081: PPUSH
// if not units then
61082: LD_VAR 0 1
61086: NOT
61087: IFFALSE 61091
// exit ;
61089: GO 61619
// result := UnitFilter ( units , [ f_ok ] ) ;
61091: LD_ADDR_VAR 0 3
61095: PUSH
61096: LD_VAR 0 1
61100: PPUSH
61101: LD_INT 50
61103: PUSH
61104: EMPTY
61105: LIST
61106: PPUSH
61107: CALL_OW 72
61111: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
61112: LD_ADDR_VAR 0 8
61116: PUSH
61117: LD_VAR 0 1
61121: PUSH
61122: LD_INT 1
61124: ARRAY
61125: PPUSH
61126: CALL_OW 255
61130: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
61131: LD_ADDR_VAR 0 10
61135: PUSH
61136: LD_INT 29
61138: PUSH
61139: LD_INT 91
61141: PUSH
61142: LD_INT 49
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: LIST
61149: ST_TO_ADDR
// if not result then
61150: LD_VAR 0 3
61154: NOT
61155: IFFALSE 61159
// exit ;
61157: GO 61619
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
61159: LD_ADDR_VAR 0 5
61163: PUSH
61164: LD_INT 81
61166: PUSH
61167: LD_VAR 0 8
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PPUSH
61176: CALL_OW 69
61180: ST_TO_ADDR
// for i in result do
61181: LD_ADDR_VAR 0 4
61185: PUSH
61186: LD_VAR 0 3
61190: PUSH
61191: FOR_IN
61192: IFFALSE 61617
// begin tag := GetTag ( i ) + 1 ;
61194: LD_ADDR_VAR 0 9
61198: PUSH
61199: LD_VAR 0 4
61203: PPUSH
61204: CALL_OW 110
61208: PUSH
61209: LD_INT 1
61211: PLUS
61212: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
61213: LD_ADDR_VAR 0 7
61217: PUSH
61218: LD_VAR 0 4
61222: PPUSH
61223: CALL_OW 250
61227: PPUSH
61228: LD_VAR 0 4
61232: PPUSH
61233: CALL_OW 251
61237: PPUSH
61238: LD_INT 4
61240: PPUSH
61241: CALL 60814 0 3
61245: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
61246: LD_VAR 0 4
61250: PPUSH
61251: CALL_OW 247
61255: PUSH
61256: LD_INT 2
61258: EQUAL
61259: PUSH
61260: LD_VAR 0 7
61264: PUSH
61265: LD_INT 2
61267: GREATER
61268: AND
61269: PUSH
61270: LD_VAR 0 4
61274: PPUSH
61275: CALL_OW 264
61279: PUSH
61280: LD_VAR 0 10
61284: IN
61285: NOT
61286: AND
61287: IFFALSE 61326
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
61289: LD_VAR 0 4
61293: PPUSH
61294: LD_VAR 0 7
61298: PUSH
61299: LD_INT 1
61301: ARRAY
61302: PUSH
61303: LD_INT 1
61305: ARRAY
61306: PPUSH
61307: LD_VAR 0 7
61311: PUSH
61312: LD_INT 1
61314: ARRAY
61315: PUSH
61316: LD_INT 2
61318: ARRAY
61319: PPUSH
61320: CALL_OW 116
61324: GO 61615
// if path > tag then
61326: LD_VAR 0 2
61330: PUSH
61331: LD_VAR 0 9
61335: GREATER
61336: IFFALSE 61544
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
61338: LD_ADDR_VAR 0 6
61342: PUSH
61343: LD_VAR 0 5
61347: PPUSH
61348: LD_INT 91
61350: PUSH
61351: LD_VAR 0 4
61355: PUSH
61356: LD_INT 8
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: LIST
61363: PPUSH
61364: CALL_OW 72
61368: ST_TO_ADDR
// if nearEnemy then
61369: LD_VAR 0 6
61373: IFFALSE 61442
// begin if GetWeapon ( i ) = ru_time_lapser then
61375: LD_VAR 0 4
61379: PPUSH
61380: CALL_OW 264
61384: PUSH
61385: LD_INT 49
61387: EQUAL
61388: IFFALSE 61416
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
61390: LD_VAR 0 4
61394: PPUSH
61395: LD_VAR 0 6
61399: PPUSH
61400: LD_VAR 0 4
61404: PPUSH
61405: CALL_OW 74
61409: PPUSH
61410: CALL_OW 112
61414: GO 61440
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
61416: LD_VAR 0 4
61420: PPUSH
61421: LD_VAR 0 6
61425: PPUSH
61426: LD_VAR 0 4
61430: PPUSH
61431: CALL_OW 74
61435: PPUSH
61436: CALL 62690 0 2
// end else
61440: GO 61542
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
61442: LD_VAR 0 4
61446: PPUSH
61447: LD_VAR 0 2
61451: PUSH
61452: LD_VAR 0 9
61456: ARRAY
61457: PUSH
61458: LD_INT 1
61460: ARRAY
61461: PPUSH
61462: LD_VAR 0 2
61466: PUSH
61467: LD_VAR 0 9
61471: ARRAY
61472: PUSH
61473: LD_INT 2
61475: ARRAY
61476: PPUSH
61477: CALL_OW 297
61481: PUSH
61482: LD_INT 6
61484: GREATER
61485: IFFALSE 61528
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
61487: LD_VAR 0 4
61491: PPUSH
61492: LD_VAR 0 2
61496: PUSH
61497: LD_VAR 0 9
61501: ARRAY
61502: PUSH
61503: LD_INT 1
61505: ARRAY
61506: PPUSH
61507: LD_VAR 0 2
61511: PUSH
61512: LD_VAR 0 9
61516: ARRAY
61517: PUSH
61518: LD_INT 2
61520: ARRAY
61521: PPUSH
61522: CALL_OW 114
61526: GO 61542
// SetTag ( i , tag ) ;
61528: LD_VAR 0 4
61532: PPUSH
61533: LD_VAR 0 9
61537: PPUSH
61538: CALL_OW 109
// end else
61542: GO 61615
// if enemy then
61544: LD_VAR 0 5
61548: IFFALSE 61615
// begin if GetWeapon ( i ) = ru_time_lapser then
61550: LD_VAR 0 4
61554: PPUSH
61555: CALL_OW 264
61559: PUSH
61560: LD_INT 49
61562: EQUAL
61563: IFFALSE 61591
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
61565: LD_VAR 0 4
61569: PPUSH
61570: LD_VAR 0 5
61574: PPUSH
61575: LD_VAR 0 4
61579: PPUSH
61580: CALL_OW 74
61584: PPUSH
61585: CALL_OW 112
61589: GO 61615
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
61591: LD_VAR 0 4
61595: PPUSH
61596: LD_VAR 0 5
61600: PPUSH
61601: LD_VAR 0 4
61605: PPUSH
61606: CALL_OW 74
61610: PPUSH
61611: CALL 62690 0 2
// end ; end ;
61615: GO 61191
61617: POP
61618: POP
// end ;
61619: LD_VAR 0 3
61623: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
61624: LD_INT 0
61626: PPUSH
61627: PPUSH
61628: PPUSH
// if not unit or IsInUnit ( unit ) then
61629: LD_VAR 0 1
61633: NOT
61634: PUSH
61635: LD_VAR 0 1
61639: PPUSH
61640: CALL_OW 310
61644: OR
61645: IFFALSE 61649
// exit ;
61647: GO 61740
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
61649: LD_ADDR_VAR 0 4
61653: PUSH
61654: LD_VAR 0 1
61658: PPUSH
61659: CALL_OW 250
61663: PPUSH
61664: LD_VAR 0 2
61668: PPUSH
61669: LD_INT 1
61671: PPUSH
61672: CALL_OW 272
61676: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
61677: LD_ADDR_VAR 0 5
61681: PUSH
61682: LD_VAR 0 1
61686: PPUSH
61687: CALL_OW 251
61691: PPUSH
61692: LD_VAR 0 2
61696: PPUSH
61697: LD_INT 1
61699: PPUSH
61700: CALL_OW 273
61704: ST_TO_ADDR
// if ValidHex ( x , y ) then
61705: LD_VAR 0 4
61709: PPUSH
61710: LD_VAR 0 5
61714: PPUSH
61715: CALL_OW 488
61719: IFFALSE 61740
// ComTurnXY ( unit , x , y ) ;
61721: LD_VAR 0 1
61725: PPUSH
61726: LD_VAR 0 4
61730: PPUSH
61731: LD_VAR 0 5
61735: PPUSH
61736: CALL_OW 118
// end ;
61740: LD_VAR 0 3
61744: RET
// export function SeeUnits ( side , units ) ; var i ; begin
61745: LD_INT 0
61747: PPUSH
61748: PPUSH
// result := false ;
61749: LD_ADDR_VAR 0 3
61753: PUSH
61754: LD_INT 0
61756: ST_TO_ADDR
// if not units then
61757: LD_VAR 0 2
61761: NOT
61762: IFFALSE 61766
// exit ;
61764: GO 61811
// for i in units do
61766: LD_ADDR_VAR 0 4
61770: PUSH
61771: LD_VAR 0 2
61775: PUSH
61776: FOR_IN
61777: IFFALSE 61809
// if See ( side , i ) then
61779: LD_VAR 0 1
61783: PPUSH
61784: LD_VAR 0 4
61788: PPUSH
61789: CALL_OW 292
61793: IFFALSE 61807
// begin result := true ;
61795: LD_ADDR_VAR 0 3
61799: PUSH
61800: LD_INT 1
61802: ST_TO_ADDR
// exit ;
61803: POP
61804: POP
61805: GO 61811
// end ;
61807: GO 61776
61809: POP
61810: POP
// end ;
61811: LD_VAR 0 3
61815: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
61816: LD_INT 0
61818: PPUSH
61819: PPUSH
61820: PPUSH
61821: PPUSH
// if not unit or not points then
61822: LD_VAR 0 1
61826: NOT
61827: PUSH
61828: LD_VAR 0 2
61832: NOT
61833: OR
61834: IFFALSE 61838
// exit ;
61836: GO 61928
// dist := 99999 ;
61838: LD_ADDR_VAR 0 5
61842: PUSH
61843: LD_INT 99999
61845: ST_TO_ADDR
// for i in points do
61846: LD_ADDR_VAR 0 4
61850: PUSH
61851: LD_VAR 0 2
61855: PUSH
61856: FOR_IN
61857: IFFALSE 61926
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
61859: LD_ADDR_VAR 0 6
61863: PUSH
61864: LD_VAR 0 1
61868: PPUSH
61869: LD_VAR 0 4
61873: PUSH
61874: LD_INT 1
61876: ARRAY
61877: PPUSH
61878: LD_VAR 0 4
61882: PUSH
61883: LD_INT 2
61885: ARRAY
61886: PPUSH
61887: CALL_OW 297
61891: ST_TO_ADDR
// if tmpDist < dist then
61892: LD_VAR 0 6
61896: PUSH
61897: LD_VAR 0 5
61901: LESS
61902: IFFALSE 61924
// begin result := i ;
61904: LD_ADDR_VAR 0 3
61908: PUSH
61909: LD_VAR 0 4
61913: ST_TO_ADDR
// dist := tmpDist ;
61914: LD_ADDR_VAR 0 5
61918: PUSH
61919: LD_VAR 0 6
61923: ST_TO_ADDR
// end ; end ;
61924: GO 61856
61926: POP
61927: POP
// end ;
61928: LD_VAR 0 3
61932: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
61933: LD_INT 0
61935: PPUSH
// uc_side := side ;
61936: LD_ADDR_OWVAR 20
61940: PUSH
61941: LD_VAR 0 1
61945: ST_TO_ADDR
// uc_nation := 3 ;
61946: LD_ADDR_OWVAR 21
61950: PUSH
61951: LD_INT 3
61953: ST_TO_ADDR
// vc_chassis := 25 ;
61954: LD_ADDR_OWVAR 37
61958: PUSH
61959: LD_INT 25
61961: ST_TO_ADDR
// vc_engine := engine_siberite ;
61962: LD_ADDR_OWVAR 39
61966: PUSH
61967: LD_INT 3
61969: ST_TO_ADDR
// vc_control := control_computer ;
61970: LD_ADDR_OWVAR 38
61974: PUSH
61975: LD_INT 3
61977: ST_TO_ADDR
// vc_weapon := 59 ;
61978: LD_ADDR_OWVAR 40
61982: PUSH
61983: LD_INT 59
61985: ST_TO_ADDR
// result := CreateVehicle ;
61986: LD_ADDR_VAR 0 5
61990: PUSH
61991: CALL_OW 45
61995: ST_TO_ADDR
// SetDir ( result , d ) ;
61996: LD_VAR 0 5
62000: PPUSH
62001: LD_VAR 0 4
62005: PPUSH
62006: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
62010: LD_VAR 0 5
62014: PPUSH
62015: LD_VAR 0 2
62019: PPUSH
62020: LD_VAR 0 3
62024: PPUSH
62025: LD_INT 0
62027: PPUSH
62028: CALL_OW 48
// end ;
62032: LD_VAR 0 5
62036: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
62037: LD_INT 0
62039: PPUSH
62040: PPUSH
62041: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
62042: LD_ADDR_VAR 0 2
62046: PUSH
62047: LD_INT 0
62049: PUSH
62050: LD_INT 0
62052: PUSH
62053: LD_INT 0
62055: PUSH
62056: LD_INT 0
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
62065: LD_VAR 0 1
62069: NOT
62070: PUSH
62071: LD_VAR 0 1
62075: PPUSH
62076: CALL_OW 264
62080: PUSH
62081: LD_INT 12
62083: PUSH
62084: LD_INT 51
62086: PUSH
62087: LD_INT 32
62089: PUSH
62090: LD_INT 89
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: IN
62099: NOT
62100: OR
62101: IFFALSE 62105
// exit ;
62103: GO 62203
// for i := 1 to 3 do
62105: LD_ADDR_VAR 0 3
62109: PUSH
62110: DOUBLE
62111: LD_INT 1
62113: DEC
62114: ST_TO_ADDR
62115: LD_INT 3
62117: PUSH
62118: FOR_TO
62119: IFFALSE 62201
// begin tmp := GetCargo ( cargo , i ) ;
62121: LD_ADDR_VAR 0 4
62125: PUSH
62126: LD_VAR 0 1
62130: PPUSH
62131: LD_VAR 0 3
62135: PPUSH
62136: CALL_OW 289
62140: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
62141: LD_ADDR_VAR 0 2
62145: PUSH
62146: LD_VAR 0 2
62150: PPUSH
62151: LD_VAR 0 3
62155: PPUSH
62156: LD_VAR 0 4
62160: PPUSH
62161: CALL_OW 1
62165: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
62166: LD_ADDR_VAR 0 2
62170: PUSH
62171: LD_VAR 0 2
62175: PPUSH
62176: LD_INT 4
62178: PPUSH
62179: LD_VAR 0 2
62183: PUSH
62184: LD_INT 4
62186: ARRAY
62187: PUSH
62188: LD_VAR 0 4
62192: PLUS
62193: PPUSH
62194: CALL_OW 1
62198: ST_TO_ADDR
// end ;
62199: GO 62118
62201: POP
62202: POP
// end ;
62203: LD_VAR 0 2
62207: RET
// export function Length ( array ) ; begin
62208: LD_INT 0
62210: PPUSH
// result := array + 0 ;
62211: LD_ADDR_VAR 0 2
62215: PUSH
62216: LD_VAR 0 1
62220: PUSH
62221: LD_INT 0
62223: PLUS
62224: ST_TO_ADDR
// end ;
62225: LD_VAR 0 2
62229: RET
// export function PrepareArray ( array ) ; begin
62230: LD_INT 0
62232: PPUSH
// result := array diff 0 ;
62233: LD_ADDR_VAR 0 2
62237: PUSH
62238: LD_VAR 0 1
62242: PUSH
62243: LD_INT 0
62245: DIFF
62246: ST_TO_ADDR
// if not result [ 1 ] then
62247: LD_VAR 0 2
62251: PUSH
62252: LD_INT 1
62254: ARRAY
62255: NOT
62256: IFFALSE 62276
// result := Delete ( result , 1 ) ;
62258: LD_ADDR_VAR 0 2
62262: PUSH
62263: LD_VAR 0 2
62267: PPUSH
62268: LD_INT 1
62270: PPUSH
62271: CALL_OW 3
62275: ST_TO_ADDR
// end ;
62276: LD_VAR 0 2
62280: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
62281: LD_INT 0
62283: PPUSH
62284: PPUSH
62285: PPUSH
62286: PPUSH
// sibRocketRange := 25 ;
62287: LD_ADDR_VAR 0 6
62291: PUSH
62292: LD_INT 25
62294: ST_TO_ADDR
// result := false ;
62295: LD_ADDR_VAR 0 4
62299: PUSH
62300: LD_INT 0
62302: ST_TO_ADDR
// for i := 0 to 5 do
62303: LD_ADDR_VAR 0 5
62307: PUSH
62308: DOUBLE
62309: LD_INT 0
62311: DEC
62312: ST_TO_ADDR
62313: LD_INT 5
62315: PUSH
62316: FOR_TO
62317: IFFALSE 62384
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
62319: LD_VAR 0 1
62323: PPUSH
62324: LD_VAR 0 5
62328: PPUSH
62329: LD_VAR 0 6
62333: PPUSH
62334: CALL_OW 272
62338: PPUSH
62339: LD_VAR 0 2
62343: PPUSH
62344: LD_VAR 0 5
62348: PPUSH
62349: LD_VAR 0 6
62353: PPUSH
62354: CALL_OW 273
62358: PPUSH
62359: LD_VAR 0 3
62363: PPUSH
62364: CALL_OW 309
62368: IFFALSE 62382
// begin result := true ;
62370: LD_ADDR_VAR 0 4
62374: PUSH
62375: LD_INT 1
62377: ST_TO_ADDR
// exit ;
62378: POP
62379: POP
62380: GO 62386
// end ;
62382: GO 62316
62384: POP
62385: POP
// end ;
62386: LD_VAR 0 4
62390: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
62391: LD_INT 0
62393: PPUSH
62394: PPUSH
62395: PPUSH
// if btype = b_depot then
62396: LD_VAR 0 2
62400: PUSH
62401: LD_INT 0
62403: EQUAL
62404: IFFALSE 62416
// begin result := true ;
62406: LD_ADDR_VAR 0 3
62410: PUSH
62411: LD_INT 1
62413: ST_TO_ADDR
// exit ;
62414: GO 62532
// end ; pom := GetBase ( depot ) ;
62416: LD_ADDR_VAR 0 4
62420: PUSH
62421: LD_VAR 0 1
62425: PPUSH
62426: CALL_OW 274
62430: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
62431: LD_ADDR_VAR 0 5
62435: PUSH
62436: LD_VAR 0 2
62440: PPUSH
62441: LD_VAR 0 1
62445: PPUSH
62446: CALL_OW 248
62450: PPUSH
62451: CALL_OW 450
62455: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
62456: LD_ADDR_VAR 0 3
62460: PUSH
62461: LD_VAR 0 4
62465: PPUSH
62466: LD_INT 1
62468: PPUSH
62469: CALL_OW 275
62473: PUSH
62474: LD_VAR 0 5
62478: PUSH
62479: LD_INT 1
62481: ARRAY
62482: GREATEREQUAL
62483: PUSH
62484: LD_VAR 0 4
62488: PPUSH
62489: LD_INT 2
62491: PPUSH
62492: CALL_OW 275
62496: PUSH
62497: LD_VAR 0 5
62501: PUSH
62502: LD_INT 2
62504: ARRAY
62505: GREATEREQUAL
62506: AND
62507: PUSH
62508: LD_VAR 0 4
62512: PPUSH
62513: LD_INT 3
62515: PPUSH
62516: CALL_OW 275
62520: PUSH
62521: LD_VAR 0 5
62525: PUSH
62526: LD_INT 3
62528: ARRAY
62529: GREATEREQUAL
62530: AND
62531: ST_TO_ADDR
// end ;
62532: LD_VAR 0 3
62536: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
62537: LD_INT 0
62539: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
62540: LD_VAR 0 1
62544: PPUSH
62545: LD_VAR 0 2
62549: PPUSH
62550: LD_INT 0
62552: PPUSH
62553: LD_INT 0
62555: PPUSH
62556: LD_INT 1
62558: PPUSH
62559: LD_INT 0
62561: PPUSH
62562: CALL_OW 587
// end ;
62566: LD_VAR 0 3
62570: RET
// export function CenterOnNow ( unit ) ; begin
62571: LD_INT 0
62573: PPUSH
// result := IsInUnit ( unit ) ;
62574: LD_ADDR_VAR 0 2
62578: PUSH
62579: LD_VAR 0 1
62583: PPUSH
62584: CALL_OW 310
62588: ST_TO_ADDR
// if not result then
62589: LD_VAR 0 2
62593: NOT
62594: IFFALSE 62606
// result := unit ;
62596: LD_ADDR_VAR 0 2
62600: PUSH
62601: LD_VAR 0 1
62605: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
62606: LD_VAR 0 1
62610: PPUSH
62611: CALL_OW 87
// end ;
62615: LD_VAR 0 2
62619: RET
// export function ComMoveHex ( unit , hex ) ; begin
62620: LD_INT 0
62622: PPUSH
// if not hex then
62623: LD_VAR 0 2
62627: NOT
62628: IFFALSE 62632
// exit ;
62630: GO 62685
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
62632: LD_VAR 0 2
62636: PUSH
62637: LD_INT 1
62639: ARRAY
62640: PPUSH
62641: LD_VAR 0 2
62645: PUSH
62646: LD_INT 2
62648: ARRAY
62649: PPUSH
62650: CALL_OW 428
62654: IFFALSE 62658
// exit ;
62656: GO 62685
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
62658: LD_VAR 0 1
62662: PPUSH
62663: LD_VAR 0 2
62667: PUSH
62668: LD_INT 1
62670: ARRAY
62671: PPUSH
62672: LD_VAR 0 2
62676: PUSH
62677: LD_INT 2
62679: ARRAY
62680: PPUSH
62681: CALL_OW 111
// end ;
62685: LD_VAR 0 3
62689: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
62690: LD_INT 0
62692: PPUSH
62693: PPUSH
62694: PPUSH
// if not unit or not enemy then
62695: LD_VAR 0 1
62699: NOT
62700: PUSH
62701: LD_VAR 0 2
62705: NOT
62706: OR
62707: IFFALSE 62711
// exit ;
62709: GO 62835
// x := GetX ( enemy ) ;
62711: LD_ADDR_VAR 0 4
62715: PUSH
62716: LD_VAR 0 2
62720: PPUSH
62721: CALL_OW 250
62725: ST_TO_ADDR
// y := GetY ( enemy ) ;
62726: LD_ADDR_VAR 0 5
62730: PUSH
62731: LD_VAR 0 2
62735: PPUSH
62736: CALL_OW 251
62740: ST_TO_ADDR
// if ValidHex ( x , y ) then
62741: LD_VAR 0 4
62745: PPUSH
62746: LD_VAR 0 5
62750: PPUSH
62751: CALL_OW 488
62755: IFFALSE 62835
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
62757: LD_VAR 0 2
62761: PPUSH
62762: CALL_OW 247
62766: PUSH
62767: LD_INT 3
62769: PUSH
62770: LD_INT 2
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: IN
62777: PUSH
62778: LD_VAR 0 1
62782: PPUSH
62783: CALL_OW 255
62787: PPUSH
62788: LD_VAR 0 2
62792: PPUSH
62793: CALL_OW 292
62797: OR
62798: IFFALSE 62816
// ComAttackUnit ( unit , enemy ) else
62800: LD_VAR 0 1
62804: PPUSH
62805: LD_VAR 0 2
62809: PPUSH
62810: CALL_OW 115
62814: GO 62835
// ComAgressiveMove ( unit , x , y ) ;
62816: LD_VAR 0 1
62820: PPUSH
62821: LD_VAR 0 4
62825: PPUSH
62826: LD_VAR 0 5
62830: PPUSH
62831: CALL_OW 114
// end ;
62835: LD_VAR 0 3
62839: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
62840: LD_INT 0
62842: PPUSH
62843: PPUSH
62844: PPUSH
// list := AreaToList ( area , 0 ) ;
62845: LD_ADDR_VAR 0 5
62849: PUSH
62850: LD_VAR 0 1
62854: PPUSH
62855: LD_INT 0
62857: PPUSH
62858: CALL_OW 517
62862: ST_TO_ADDR
// if not list then
62863: LD_VAR 0 5
62867: NOT
62868: IFFALSE 62872
// exit ;
62870: GO 63002
// if all then
62872: LD_VAR 0 2
62876: IFFALSE 62964
// begin for i := 1 to list [ 1 ] do
62878: LD_ADDR_VAR 0 4
62882: PUSH
62883: DOUBLE
62884: LD_INT 1
62886: DEC
62887: ST_TO_ADDR
62888: LD_VAR 0 5
62892: PUSH
62893: LD_INT 1
62895: ARRAY
62896: PUSH
62897: FOR_TO
62898: IFFALSE 62960
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
62900: LD_ADDR_VAR 0 3
62904: PUSH
62905: LD_VAR 0 3
62909: PPUSH
62910: LD_VAR 0 3
62914: PUSH
62915: LD_INT 1
62917: PLUS
62918: PPUSH
62919: LD_VAR 0 5
62923: PUSH
62924: LD_INT 1
62926: ARRAY
62927: PUSH
62928: LD_VAR 0 4
62932: ARRAY
62933: PUSH
62934: LD_VAR 0 5
62938: PUSH
62939: LD_INT 2
62941: ARRAY
62942: PUSH
62943: LD_VAR 0 4
62947: ARRAY
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: PPUSH
62953: CALL_OW 1
62957: ST_TO_ADDR
62958: GO 62897
62960: POP
62961: POP
// exit ;
62962: GO 63002
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
62964: LD_ADDR_VAR 0 3
62968: PUSH
62969: LD_VAR 0 5
62973: PUSH
62974: LD_INT 1
62976: ARRAY
62977: PUSH
62978: LD_INT 1
62980: ARRAY
62981: PUSH
62982: LD_VAR 0 5
62986: PUSH
62987: LD_INT 2
62989: ARRAY
62990: PUSH
62991: LD_INT 1
62993: ARRAY
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: PUSH
62999: EMPTY
63000: LIST
63001: ST_TO_ADDR
// end ;
63002: LD_VAR 0 3
63006: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
63007: LD_INT 0
63009: PPUSH
63010: PPUSH
// list := AreaToList ( area , 0 ) ;
63011: LD_ADDR_VAR 0 4
63015: PUSH
63016: LD_VAR 0 1
63020: PPUSH
63021: LD_INT 0
63023: PPUSH
63024: CALL_OW 517
63028: ST_TO_ADDR
// if not list then
63029: LD_VAR 0 4
63033: NOT
63034: IFFALSE 63038
// exit ;
63036: GO 63079
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
63038: LD_ADDR_VAR 0 3
63042: PUSH
63043: LD_VAR 0 4
63047: PUSH
63048: LD_INT 1
63050: ARRAY
63051: PUSH
63052: LD_INT 1
63054: ARRAY
63055: PUSH
63056: LD_VAR 0 4
63060: PUSH
63061: LD_INT 2
63063: ARRAY
63064: PUSH
63065: LD_INT 1
63067: ARRAY
63068: PUSH
63069: LD_VAR 0 2
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: LIST
63078: ST_TO_ADDR
// end ;
63079: LD_VAR 0 3
63083: RET
// export function First ( array ) ; begin
63084: LD_INT 0
63086: PPUSH
// if not array then
63087: LD_VAR 0 1
63091: NOT
63092: IFFALSE 63096
// exit ;
63094: GO 63110
// result := array [ 1 ] ;
63096: LD_ADDR_VAR 0 2
63100: PUSH
63101: LD_VAR 0 1
63105: PUSH
63106: LD_INT 1
63108: ARRAY
63109: ST_TO_ADDR
// end ;
63110: LD_VAR 0 2
63114: RET
// export function Last ( array ) ; begin
63115: LD_INT 0
63117: PPUSH
// if not array then
63118: LD_VAR 0 1
63122: NOT
63123: IFFALSE 63127
// exit ;
63125: GO 63143
// result := array [ array ] ;
63127: LD_ADDR_VAR 0 2
63131: PUSH
63132: LD_VAR 0 1
63136: PUSH
63137: LD_VAR 0 1
63141: ARRAY
63142: ST_TO_ADDR
// end ;
63143: LD_VAR 0 2
63147: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
63148: LD_INT 0
63150: PPUSH
63151: PPUSH
// result := [ ] ;
63152: LD_ADDR_VAR 0 5
63156: PUSH
63157: EMPTY
63158: ST_TO_ADDR
// if not array then
63159: LD_VAR 0 1
63163: NOT
63164: IFFALSE 63168
// exit ;
63166: GO 63280
// for i := 1 to array do
63168: LD_ADDR_VAR 0 6
63172: PUSH
63173: DOUBLE
63174: LD_INT 1
63176: DEC
63177: ST_TO_ADDR
63178: LD_VAR 0 1
63182: PUSH
63183: FOR_TO
63184: IFFALSE 63278
// if array [ i ] [ index ] = value then
63186: LD_VAR 0 1
63190: PUSH
63191: LD_VAR 0 6
63195: ARRAY
63196: PUSH
63197: LD_VAR 0 2
63201: ARRAY
63202: PUSH
63203: LD_VAR 0 3
63207: EQUAL
63208: IFFALSE 63276
// begin if indexColumn then
63210: LD_VAR 0 4
63214: IFFALSE 63250
// result := Join ( result , array [ i ] [ indexColumn ] ) else
63216: LD_ADDR_VAR 0 5
63220: PUSH
63221: LD_VAR 0 5
63225: PPUSH
63226: LD_VAR 0 1
63230: PUSH
63231: LD_VAR 0 6
63235: ARRAY
63236: PUSH
63237: LD_VAR 0 4
63241: ARRAY
63242: PPUSH
63243: CALL 58462 0 2
63247: ST_TO_ADDR
63248: GO 63276
// result := Join ( result , array [ i ] ) ;
63250: LD_ADDR_VAR 0 5
63254: PUSH
63255: LD_VAR 0 5
63259: PPUSH
63260: LD_VAR 0 1
63264: PUSH
63265: LD_VAR 0 6
63269: ARRAY
63270: PPUSH
63271: CALL 58462 0 2
63275: ST_TO_ADDR
// end ;
63276: GO 63183
63278: POP
63279: POP
// end ;
63280: LD_VAR 0 5
63284: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
63285: LD_INT 0
63287: PPUSH
// if not vehicles or not parkingPoint then
63288: LD_VAR 0 1
63292: NOT
63293: PUSH
63294: LD_VAR 0 2
63298: NOT
63299: OR
63300: IFFALSE 63304
// exit ;
63302: GO 63402
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
63304: LD_ADDR_VAR 0 1
63308: PUSH
63309: LD_VAR 0 1
63313: PPUSH
63314: LD_INT 50
63316: PUSH
63317: EMPTY
63318: LIST
63319: PUSH
63320: LD_INT 3
63322: PUSH
63323: LD_INT 92
63325: PUSH
63326: LD_VAR 0 2
63330: PUSH
63331: LD_INT 1
63333: ARRAY
63334: PUSH
63335: LD_VAR 0 2
63339: PUSH
63340: LD_INT 2
63342: ARRAY
63343: PUSH
63344: LD_INT 8
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: PUSH
63353: EMPTY
63354: LIST
63355: LIST
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: PPUSH
63361: CALL_OW 72
63365: ST_TO_ADDR
// if not vehicles then
63366: LD_VAR 0 1
63370: NOT
63371: IFFALSE 63375
// exit ;
63373: GO 63402
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
63375: LD_VAR 0 1
63379: PPUSH
63380: LD_VAR 0 2
63384: PUSH
63385: LD_INT 1
63387: ARRAY
63388: PPUSH
63389: LD_VAR 0 2
63393: PUSH
63394: LD_INT 2
63396: ARRAY
63397: PPUSH
63398: CALL_OW 111
// end ;
63402: LD_VAR 0 3
63406: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
63407: LD_INT 0
63409: PPUSH
63410: PPUSH
63411: PPUSH
// if not side or not area then
63412: LD_VAR 0 1
63416: NOT
63417: PUSH
63418: LD_VAR 0 2
63422: NOT
63423: OR
63424: IFFALSE 63428
// exit ;
63426: GO 63547
// tmp := AreaToList ( area , 0 ) ;
63428: LD_ADDR_VAR 0 5
63432: PUSH
63433: LD_VAR 0 2
63437: PPUSH
63438: LD_INT 0
63440: PPUSH
63441: CALL_OW 517
63445: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
63446: LD_ADDR_VAR 0 4
63450: PUSH
63451: DOUBLE
63452: LD_INT 1
63454: DEC
63455: ST_TO_ADDR
63456: LD_VAR 0 5
63460: PUSH
63461: LD_INT 1
63463: ARRAY
63464: PUSH
63465: FOR_TO
63466: IFFALSE 63545
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
63468: LD_VAR 0 5
63472: PUSH
63473: LD_INT 1
63475: ARRAY
63476: PUSH
63477: LD_VAR 0 4
63481: ARRAY
63482: PPUSH
63483: LD_VAR 0 5
63487: PUSH
63488: LD_INT 2
63490: ARRAY
63491: PUSH
63492: LD_VAR 0 4
63496: ARRAY
63497: PPUSH
63498: CALL_OW 351
63502: IFFALSE 63543
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
63504: LD_VAR 0 5
63508: PUSH
63509: LD_INT 1
63511: ARRAY
63512: PUSH
63513: LD_VAR 0 4
63517: ARRAY
63518: PPUSH
63519: LD_VAR 0 5
63523: PUSH
63524: LD_INT 2
63526: ARRAY
63527: PUSH
63528: LD_VAR 0 4
63532: ARRAY
63533: PPUSH
63534: LD_VAR 0 1
63538: PPUSH
63539: CALL_OW 244
// end ;
63543: GO 63465
63545: POP
63546: POP
// end ; end_of_file end_of_file
63547: LD_VAR 0 3
63551: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
63552: LD_VAR 0 1
63556: PPUSH
63557: LD_VAR 0 2
63561: PPUSH
63562: LD_VAR 0 3
63566: PPUSH
63567: LD_VAR 0 4
63571: PPUSH
63572: LD_VAR 0 5
63576: PPUSH
63577: LD_VAR 0 6
63581: PPUSH
63582: CALL 63783 0 6
// end ;
63586: PPOPN 6
63588: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
63589: LD_INT 0
63591: PPUSH
// begin if not units then
63592: LD_VAR 0 1
63596: NOT
63597: IFFALSE 63601
// exit ;
63599: GO 63601
// end ;
63601: PPOPN 7
63603: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
63604: CALL 63670 0 0
// end ; end_of_file
63608: PPOPN 1
63610: END
// export globalGameSaveCounter ; every 0 0$1 do
63611: GO 63613
63613: DISABLE
// begin enable ;
63614: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
63615: LD_STRING updateTimer(
63617: PUSH
63618: LD_OWVAR 1
63622: STR
63623: PUSH
63624: LD_STRING );
63626: STR
63627: PPUSH
63628: CALL_OW 559
// end ;
63632: END
// every 0 0$1 do
63633: GO 63635
63635: DISABLE
// begin globalGameSaveCounter := 0 ;
63636: LD_ADDR_EXP 46
63640: PUSH
63641: LD_INT 0
63643: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
63644: LD_STRING setGameSaveCounter(0)
63646: PPUSH
63647: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
63651: LD_STRING initStreamRollete();
63653: PPUSH
63654: CALL_OW 559
// InitStreamMode ;
63658: CALL 65001 0 0
// DefineStreamItems ( false ) ;
63662: LD_INT 0
63664: PPUSH
63665: CALL 65465 0 1
// end ;
63669: END
// export function SOS_MapStart ( ) ; begin
63670: LD_INT 0
63672: PPUSH
// if streamModeActive then
63673: LD_EXP 47
63677: IFFALSE 63686
// DefineStreamItems ( true ) ;
63679: LD_INT 1
63681: PPUSH
63682: CALL 65465 0 1
// UpdateLuaVariables ( ) ;
63686: CALL 63703 0 0
// UpdateFactoryWaypoints ( ) ;
63690: CALL 78467 0 0
// UpdateWarehouseGatheringPoints ( ) ;
63694: CALL 78719 0 0
// end ;
63698: LD_VAR 0 1
63702: RET
// function UpdateLuaVariables ( ) ; begin
63703: LD_INT 0
63705: PPUSH
// if globalGameSaveCounter then
63706: LD_EXP 46
63710: IFFALSE 63744
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
63712: LD_ADDR_EXP 46
63716: PUSH
63717: LD_EXP 46
63721: PPUSH
63722: CALL 59823 0 1
63726: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
63727: LD_STRING setGameSaveCounter(
63729: PUSH
63730: LD_EXP 46
63734: STR
63735: PUSH
63736: LD_STRING )
63738: STR
63739: PPUSH
63740: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
63744: LD_STRING setGameDifficulty(
63746: PUSH
63747: LD_OWVAR 67
63751: STR
63752: PUSH
63753: LD_STRING )
63755: STR
63756: PPUSH
63757: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
63761: LD_STRING displayDifficulty(
63763: PUSH
63764: LD_OWVAR 67
63768: STR
63769: PUSH
63770: LD_STRING )
63772: STR
63773: PPUSH
63774: CALL_OW 559
// end ;
63778: LD_VAR 0 1
63782: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63783: LD_INT 0
63785: PPUSH
// if p2 = stream_mode then
63786: LD_VAR 0 2
63790: PUSH
63791: LD_INT 100
63793: EQUAL
63794: IFFALSE 64797
// begin if not StreamModeActive then
63796: LD_EXP 47
63800: NOT
63801: IFFALSE 63811
// StreamModeActive := true ;
63803: LD_ADDR_EXP 47
63807: PUSH
63808: LD_INT 1
63810: ST_TO_ADDR
// if p3 = 0 then
63811: LD_VAR 0 3
63815: PUSH
63816: LD_INT 0
63818: EQUAL
63819: IFFALSE 63825
// InitStreamMode ;
63821: CALL 65001 0 0
// if p3 = 1 then
63825: LD_VAR 0 3
63829: PUSH
63830: LD_INT 1
63832: EQUAL
63833: IFFALSE 63843
// sRocket := true ;
63835: LD_ADDR_EXP 52
63839: PUSH
63840: LD_INT 1
63842: ST_TO_ADDR
// if p3 = 2 then
63843: LD_VAR 0 3
63847: PUSH
63848: LD_INT 2
63850: EQUAL
63851: IFFALSE 63861
// sSpeed := true ;
63853: LD_ADDR_EXP 51
63857: PUSH
63858: LD_INT 1
63860: ST_TO_ADDR
// if p3 = 3 then
63861: LD_VAR 0 3
63865: PUSH
63866: LD_INT 3
63868: EQUAL
63869: IFFALSE 63879
// sEngine := true ;
63871: LD_ADDR_EXP 53
63875: PUSH
63876: LD_INT 1
63878: ST_TO_ADDR
// if p3 = 4 then
63879: LD_VAR 0 3
63883: PUSH
63884: LD_INT 4
63886: EQUAL
63887: IFFALSE 63897
// sSpec := true ;
63889: LD_ADDR_EXP 50
63893: PUSH
63894: LD_INT 1
63896: ST_TO_ADDR
// if p3 = 5 then
63897: LD_VAR 0 3
63901: PUSH
63902: LD_INT 5
63904: EQUAL
63905: IFFALSE 63915
// sLevel := true ;
63907: LD_ADDR_EXP 54
63911: PUSH
63912: LD_INT 1
63914: ST_TO_ADDR
// if p3 = 6 then
63915: LD_VAR 0 3
63919: PUSH
63920: LD_INT 6
63922: EQUAL
63923: IFFALSE 63933
// sArmoury := true ;
63925: LD_ADDR_EXP 55
63929: PUSH
63930: LD_INT 1
63932: ST_TO_ADDR
// if p3 = 7 then
63933: LD_VAR 0 3
63937: PUSH
63938: LD_INT 7
63940: EQUAL
63941: IFFALSE 63951
// sRadar := true ;
63943: LD_ADDR_EXP 56
63947: PUSH
63948: LD_INT 1
63950: ST_TO_ADDR
// if p3 = 8 then
63951: LD_VAR 0 3
63955: PUSH
63956: LD_INT 8
63958: EQUAL
63959: IFFALSE 63969
// sBunker := true ;
63961: LD_ADDR_EXP 57
63965: PUSH
63966: LD_INT 1
63968: ST_TO_ADDR
// if p3 = 9 then
63969: LD_VAR 0 3
63973: PUSH
63974: LD_INT 9
63976: EQUAL
63977: IFFALSE 63987
// sHack := true ;
63979: LD_ADDR_EXP 58
63983: PUSH
63984: LD_INT 1
63986: ST_TO_ADDR
// if p3 = 10 then
63987: LD_VAR 0 3
63991: PUSH
63992: LD_INT 10
63994: EQUAL
63995: IFFALSE 64005
// sFire := true ;
63997: LD_ADDR_EXP 59
64001: PUSH
64002: LD_INT 1
64004: ST_TO_ADDR
// if p3 = 11 then
64005: LD_VAR 0 3
64009: PUSH
64010: LD_INT 11
64012: EQUAL
64013: IFFALSE 64023
// sRefresh := true ;
64015: LD_ADDR_EXP 60
64019: PUSH
64020: LD_INT 1
64022: ST_TO_ADDR
// if p3 = 12 then
64023: LD_VAR 0 3
64027: PUSH
64028: LD_INT 12
64030: EQUAL
64031: IFFALSE 64041
// sExp := true ;
64033: LD_ADDR_EXP 61
64037: PUSH
64038: LD_INT 1
64040: ST_TO_ADDR
// if p3 = 13 then
64041: LD_VAR 0 3
64045: PUSH
64046: LD_INT 13
64048: EQUAL
64049: IFFALSE 64059
// sDepot := true ;
64051: LD_ADDR_EXP 62
64055: PUSH
64056: LD_INT 1
64058: ST_TO_ADDR
// if p3 = 14 then
64059: LD_VAR 0 3
64063: PUSH
64064: LD_INT 14
64066: EQUAL
64067: IFFALSE 64077
// sFlag := true ;
64069: LD_ADDR_EXP 63
64073: PUSH
64074: LD_INT 1
64076: ST_TO_ADDR
// if p3 = 15 then
64077: LD_VAR 0 3
64081: PUSH
64082: LD_INT 15
64084: EQUAL
64085: IFFALSE 64095
// sKamikadze := true ;
64087: LD_ADDR_EXP 71
64091: PUSH
64092: LD_INT 1
64094: ST_TO_ADDR
// if p3 = 16 then
64095: LD_VAR 0 3
64099: PUSH
64100: LD_INT 16
64102: EQUAL
64103: IFFALSE 64113
// sTroll := true ;
64105: LD_ADDR_EXP 72
64109: PUSH
64110: LD_INT 1
64112: ST_TO_ADDR
// if p3 = 17 then
64113: LD_VAR 0 3
64117: PUSH
64118: LD_INT 17
64120: EQUAL
64121: IFFALSE 64131
// sSlow := true ;
64123: LD_ADDR_EXP 73
64127: PUSH
64128: LD_INT 1
64130: ST_TO_ADDR
// if p3 = 18 then
64131: LD_VAR 0 3
64135: PUSH
64136: LD_INT 18
64138: EQUAL
64139: IFFALSE 64149
// sLack := true ;
64141: LD_ADDR_EXP 74
64145: PUSH
64146: LD_INT 1
64148: ST_TO_ADDR
// if p3 = 19 then
64149: LD_VAR 0 3
64153: PUSH
64154: LD_INT 19
64156: EQUAL
64157: IFFALSE 64167
// sTank := true ;
64159: LD_ADDR_EXP 76
64163: PUSH
64164: LD_INT 1
64166: ST_TO_ADDR
// if p3 = 20 then
64167: LD_VAR 0 3
64171: PUSH
64172: LD_INT 20
64174: EQUAL
64175: IFFALSE 64185
// sRemote := true ;
64177: LD_ADDR_EXP 77
64181: PUSH
64182: LD_INT 1
64184: ST_TO_ADDR
// if p3 = 21 then
64185: LD_VAR 0 3
64189: PUSH
64190: LD_INT 21
64192: EQUAL
64193: IFFALSE 64203
// sPowell := true ;
64195: LD_ADDR_EXP 78
64199: PUSH
64200: LD_INT 1
64202: ST_TO_ADDR
// if p3 = 22 then
64203: LD_VAR 0 3
64207: PUSH
64208: LD_INT 22
64210: EQUAL
64211: IFFALSE 64221
// sTeleport := true ;
64213: LD_ADDR_EXP 81
64217: PUSH
64218: LD_INT 1
64220: ST_TO_ADDR
// if p3 = 23 then
64221: LD_VAR 0 3
64225: PUSH
64226: LD_INT 23
64228: EQUAL
64229: IFFALSE 64239
// sOilTower := true ;
64231: LD_ADDR_EXP 83
64235: PUSH
64236: LD_INT 1
64238: ST_TO_ADDR
// if p3 = 24 then
64239: LD_VAR 0 3
64243: PUSH
64244: LD_INT 24
64246: EQUAL
64247: IFFALSE 64257
// sShovel := true ;
64249: LD_ADDR_EXP 84
64253: PUSH
64254: LD_INT 1
64256: ST_TO_ADDR
// if p3 = 25 then
64257: LD_VAR 0 3
64261: PUSH
64262: LD_INT 25
64264: EQUAL
64265: IFFALSE 64275
// sSheik := true ;
64267: LD_ADDR_EXP 85
64271: PUSH
64272: LD_INT 1
64274: ST_TO_ADDR
// if p3 = 26 then
64275: LD_VAR 0 3
64279: PUSH
64280: LD_INT 26
64282: EQUAL
64283: IFFALSE 64293
// sEarthquake := true ;
64285: LD_ADDR_EXP 87
64289: PUSH
64290: LD_INT 1
64292: ST_TO_ADDR
// if p3 = 27 then
64293: LD_VAR 0 3
64297: PUSH
64298: LD_INT 27
64300: EQUAL
64301: IFFALSE 64311
// sAI := true ;
64303: LD_ADDR_EXP 88
64307: PUSH
64308: LD_INT 1
64310: ST_TO_ADDR
// if p3 = 28 then
64311: LD_VAR 0 3
64315: PUSH
64316: LD_INT 28
64318: EQUAL
64319: IFFALSE 64329
// sCargo := true ;
64321: LD_ADDR_EXP 91
64325: PUSH
64326: LD_INT 1
64328: ST_TO_ADDR
// if p3 = 29 then
64329: LD_VAR 0 3
64333: PUSH
64334: LD_INT 29
64336: EQUAL
64337: IFFALSE 64347
// sDLaser := true ;
64339: LD_ADDR_EXP 92
64343: PUSH
64344: LD_INT 1
64346: ST_TO_ADDR
// if p3 = 30 then
64347: LD_VAR 0 3
64351: PUSH
64352: LD_INT 30
64354: EQUAL
64355: IFFALSE 64365
// sExchange := true ;
64357: LD_ADDR_EXP 93
64361: PUSH
64362: LD_INT 1
64364: ST_TO_ADDR
// if p3 = 31 then
64365: LD_VAR 0 3
64369: PUSH
64370: LD_INT 31
64372: EQUAL
64373: IFFALSE 64383
// sFac := true ;
64375: LD_ADDR_EXP 94
64379: PUSH
64380: LD_INT 1
64382: ST_TO_ADDR
// if p3 = 32 then
64383: LD_VAR 0 3
64387: PUSH
64388: LD_INT 32
64390: EQUAL
64391: IFFALSE 64401
// sPower := true ;
64393: LD_ADDR_EXP 95
64397: PUSH
64398: LD_INT 1
64400: ST_TO_ADDR
// if p3 = 33 then
64401: LD_VAR 0 3
64405: PUSH
64406: LD_INT 33
64408: EQUAL
64409: IFFALSE 64419
// sRandom := true ;
64411: LD_ADDR_EXP 96
64415: PUSH
64416: LD_INT 1
64418: ST_TO_ADDR
// if p3 = 34 then
64419: LD_VAR 0 3
64423: PUSH
64424: LD_INT 34
64426: EQUAL
64427: IFFALSE 64437
// sShield := true ;
64429: LD_ADDR_EXP 97
64433: PUSH
64434: LD_INT 1
64436: ST_TO_ADDR
// if p3 = 35 then
64437: LD_VAR 0 3
64441: PUSH
64442: LD_INT 35
64444: EQUAL
64445: IFFALSE 64455
// sTime := true ;
64447: LD_ADDR_EXP 98
64451: PUSH
64452: LD_INT 1
64454: ST_TO_ADDR
// if p3 = 36 then
64455: LD_VAR 0 3
64459: PUSH
64460: LD_INT 36
64462: EQUAL
64463: IFFALSE 64473
// sTools := true ;
64465: LD_ADDR_EXP 99
64469: PUSH
64470: LD_INT 1
64472: ST_TO_ADDR
// if p3 = 101 then
64473: LD_VAR 0 3
64477: PUSH
64478: LD_INT 101
64480: EQUAL
64481: IFFALSE 64491
// sSold := true ;
64483: LD_ADDR_EXP 64
64487: PUSH
64488: LD_INT 1
64490: ST_TO_ADDR
// if p3 = 102 then
64491: LD_VAR 0 3
64495: PUSH
64496: LD_INT 102
64498: EQUAL
64499: IFFALSE 64509
// sDiff := true ;
64501: LD_ADDR_EXP 65
64505: PUSH
64506: LD_INT 1
64508: ST_TO_ADDR
// if p3 = 103 then
64509: LD_VAR 0 3
64513: PUSH
64514: LD_INT 103
64516: EQUAL
64517: IFFALSE 64527
// sFog := true ;
64519: LD_ADDR_EXP 68
64523: PUSH
64524: LD_INT 1
64526: ST_TO_ADDR
// if p3 = 104 then
64527: LD_VAR 0 3
64531: PUSH
64532: LD_INT 104
64534: EQUAL
64535: IFFALSE 64545
// sReset := true ;
64537: LD_ADDR_EXP 69
64541: PUSH
64542: LD_INT 1
64544: ST_TO_ADDR
// if p3 = 105 then
64545: LD_VAR 0 3
64549: PUSH
64550: LD_INT 105
64552: EQUAL
64553: IFFALSE 64563
// sSun := true ;
64555: LD_ADDR_EXP 70
64559: PUSH
64560: LD_INT 1
64562: ST_TO_ADDR
// if p3 = 106 then
64563: LD_VAR 0 3
64567: PUSH
64568: LD_INT 106
64570: EQUAL
64571: IFFALSE 64581
// sTiger := true ;
64573: LD_ADDR_EXP 66
64577: PUSH
64578: LD_INT 1
64580: ST_TO_ADDR
// if p3 = 107 then
64581: LD_VAR 0 3
64585: PUSH
64586: LD_INT 107
64588: EQUAL
64589: IFFALSE 64599
// sBomb := true ;
64591: LD_ADDR_EXP 67
64595: PUSH
64596: LD_INT 1
64598: ST_TO_ADDR
// if p3 = 108 then
64599: LD_VAR 0 3
64603: PUSH
64604: LD_INT 108
64606: EQUAL
64607: IFFALSE 64617
// sWound := true ;
64609: LD_ADDR_EXP 75
64613: PUSH
64614: LD_INT 1
64616: ST_TO_ADDR
// if p3 = 109 then
64617: LD_VAR 0 3
64621: PUSH
64622: LD_INT 109
64624: EQUAL
64625: IFFALSE 64635
// sBetray := true ;
64627: LD_ADDR_EXP 79
64631: PUSH
64632: LD_INT 1
64634: ST_TO_ADDR
// if p3 = 110 then
64635: LD_VAR 0 3
64639: PUSH
64640: LD_INT 110
64642: EQUAL
64643: IFFALSE 64653
// sContamin := true ;
64645: LD_ADDR_EXP 80
64649: PUSH
64650: LD_INT 1
64652: ST_TO_ADDR
// if p3 = 111 then
64653: LD_VAR 0 3
64657: PUSH
64658: LD_INT 111
64660: EQUAL
64661: IFFALSE 64671
// sOil := true ;
64663: LD_ADDR_EXP 82
64667: PUSH
64668: LD_INT 1
64670: ST_TO_ADDR
// if p3 = 112 then
64671: LD_VAR 0 3
64675: PUSH
64676: LD_INT 112
64678: EQUAL
64679: IFFALSE 64689
// sStu := true ;
64681: LD_ADDR_EXP 86
64685: PUSH
64686: LD_INT 1
64688: ST_TO_ADDR
// if p3 = 113 then
64689: LD_VAR 0 3
64693: PUSH
64694: LD_INT 113
64696: EQUAL
64697: IFFALSE 64707
// sBazooka := true ;
64699: LD_ADDR_EXP 89
64703: PUSH
64704: LD_INT 1
64706: ST_TO_ADDR
// if p3 = 114 then
64707: LD_VAR 0 3
64711: PUSH
64712: LD_INT 114
64714: EQUAL
64715: IFFALSE 64725
// sMortar := true ;
64717: LD_ADDR_EXP 90
64721: PUSH
64722: LD_INT 1
64724: ST_TO_ADDR
// if p3 = 115 then
64725: LD_VAR 0 3
64729: PUSH
64730: LD_INT 115
64732: EQUAL
64733: IFFALSE 64743
// sRanger := true ;
64735: LD_ADDR_EXP 100
64739: PUSH
64740: LD_INT 1
64742: ST_TO_ADDR
// if p3 = 116 then
64743: LD_VAR 0 3
64747: PUSH
64748: LD_INT 116
64750: EQUAL
64751: IFFALSE 64761
// sComputer := true ;
64753: LD_ADDR_EXP 101
64757: PUSH
64758: LD_INT 1
64760: ST_TO_ADDR
// if p3 = 117 then
64761: LD_VAR 0 3
64765: PUSH
64766: LD_INT 117
64768: EQUAL
64769: IFFALSE 64779
// s30 := true ;
64771: LD_ADDR_EXP 102
64775: PUSH
64776: LD_INT 1
64778: ST_TO_ADDR
// if p3 = 118 then
64779: LD_VAR 0 3
64783: PUSH
64784: LD_INT 118
64786: EQUAL
64787: IFFALSE 64797
// s60 := true ;
64789: LD_ADDR_EXP 103
64793: PUSH
64794: LD_INT 1
64796: ST_TO_ADDR
// end ; if p2 = hack_mode then
64797: LD_VAR 0 2
64801: PUSH
64802: LD_INT 101
64804: EQUAL
64805: IFFALSE 64933
// begin case p3 of 1 :
64807: LD_VAR 0 3
64811: PUSH
64812: LD_INT 1
64814: DOUBLE
64815: EQUAL
64816: IFTRUE 64820
64818: GO 64827
64820: POP
// hHackUnlimitedResources ; 2 :
64821: CALL 77080 0 0
64825: GO 64933
64827: LD_INT 2
64829: DOUBLE
64830: EQUAL
64831: IFTRUE 64835
64833: GO 64842
64835: POP
// hHackSetLevel10 ; 3 :
64836: CALL 77213 0 0
64840: GO 64933
64842: LD_INT 3
64844: DOUBLE
64845: EQUAL
64846: IFTRUE 64850
64848: GO 64857
64850: POP
// hHackSetLevel10YourUnits ; 4 :
64851: CALL 77298 0 0
64855: GO 64933
64857: LD_INT 4
64859: DOUBLE
64860: EQUAL
64861: IFTRUE 64865
64863: GO 64872
64865: POP
// hHackInvincible ; 5 :
64866: CALL 77746 0 0
64870: GO 64933
64872: LD_INT 5
64874: DOUBLE
64875: EQUAL
64876: IFTRUE 64880
64878: GO 64887
64880: POP
// hHackInvisible ; 6 :
64881: CALL 77857 0 0
64885: GO 64933
64887: LD_INT 6
64889: DOUBLE
64890: EQUAL
64891: IFTRUE 64895
64893: GO 64902
64895: POP
// hHackChangeYourSide ; 7 :
64896: CALL 77914 0 0
64900: GO 64933
64902: LD_INT 7
64904: DOUBLE
64905: EQUAL
64906: IFTRUE 64910
64908: GO 64917
64910: POP
// hHackChangeUnitSide ; 8 :
64911: CALL 77956 0 0
64915: GO 64933
64917: LD_INT 8
64919: DOUBLE
64920: EQUAL
64921: IFTRUE 64925
64923: GO 64932
64925: POP
// hHackFog ; end ;
64926: CALL 78057 0 0
64930: GO 64933
64932: POP
// end ; if p2 = game_save_mode then
64933: LD_VAR 0 2
64937: PUSH
64938: LD_INT 102
64940: EQUAL
64941: IFFALSE 64996
// begin if p3 = 1 then
64943: LD_VAR 0 3
64947: PUSH
64948: LD_INT 1
64950: EQUAL
64951: IFFALSE 64963
// globalGameSaveCounter := p4 ;
64953: LD_ADDR_EXP 46
64957: PUSH
64958: LD_VAR 0 4
64962: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
64963: LD_VAR 0 3
64967: PUSH
64968: LD_INT 2
64970: EQUAL
64971: PUSH
64972: LD_EXP 46
64976: AND
64977: IFFALSE 64996
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
64979: LD_STRING setGameSaveCounter(
64981: PUSH
64982: LD_EXP 46
64986: STR
64987: PUSH
64988: LD_STRING )
64990: STR
64991: PPUSH
64992: CALL_OW 559
// end ; end ;
64996: LD_VAR 0 7
65000: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
65001: LD_INT 0
65003: PPUSH
// streamModeActive := false ;
65004: LD_ADDR_EXP 47
65008: PUSH
65009: LD_INT 0
65011: ST_TO_ADDR
// normalCounter := 36 ;
65012: LD_ADDR_EXP 48
65016: PUSH
65017: LD_INT 36
65019: ST_TO_ADDR
// hardcoreCounter := 18 ;
65020: LD_ADDR_EXP 49
65024: PUSH
65025: LD_INT 18
65027: ST_TO_ADDR
// sRocket := false ;
65028: LD_ADDR_EXP 52
65032: PUSH
65033: LD_INT 0
65035: ST_TO_ADDR
// sSpeed := false ;
65036: LD_ADDR_EXP 51
65040: PUSH
65041: LD_INT 0
65043: ST_TO_ADDR
// sEngine := false ;
65044: LD_ADDR_EXP 53
65048: PUSH
65049: LD_INT 0
65051: ST_TO_ADDR
// sSpec := false ;
65052: LD_ADDR_EXP 50
65056: PUSH
65057: LD_INT 0
65059: ST_TO_ADDR
// sLevel := false ;
65060: LD_ADDR_EXP 54
65064: PUSH
65065: LD_INT 0
65067: ST_TO_ADDR
// sArmoury := false ;
65068: LD_ADDR_EXP 55
65072: PUSH
65073: LD_INT 0
65075: ST_TO_ADDR
// sRadar := false ;
65076: LD_ADDR_EXP 56
65080: PUSH
65081: LD_INT 0
65083: ST_TO_ADDR
// sBunker := false ;
65084: LD_ADDR_EXP 57
65088: PUSH
65089: LD_INT 0
65091: ST_TO_ADDR
// sHack := false ;
65092: LD_ADDR_EXP 58
65096: PUSH
65097: LD_INT 0
65099: ST_TO_ADDR
// sFire := false ;
65100: LD_ADDR_EXP 59
65104: PUSH
65105: LD_INT 0
65107: ST_TO_ADDR
// sRefresh := false ;
65108: LD_ADDR_EXP 60
65112: PUSH
65113: LD_INT 0
65115: ST_TO_ADDR
// sExp := false ;
65116: LD_ADDR_EXP 61
65120: PUSH
65121: LD_INT 0
65123: ST_TO_ADDR
// sDepot := false ;
65124: LD_ADDR_EXP 62
65128: PUSH
65129: LD_INT 0
65131: ST_TO_ADDR
// sFlag := false ;
65132: LD_ADDR_EXP 63
65136: PUSH
65137: LD_INT 0
65139: ST_TO_ADDR
// sKamikadze := false ;
65140: LD_ADDR_EXP 71
65144: PUSH
65145: LD_INT 0
65147: ST_TO_ADDR
// sTroll := false ;
65148: LD_ADDR_EXP 72
65152: PUSH
65153: LD_INT 0
65155: ST_TO_ADDR
// sSlow := false ;
65156: LD_ADDR_EXP 73
65160: PUSH
65161: LD_INT 0
65163: ST_TO_ADDR
// sLack := false ;
65164: LD_ADDR_EXP 74
65168: PUSH
65169: LD_INT 0
65171: ST_TO_ADDR
// sTank := false ;
65172: LD_ADDR_EXP 76
65176: PUSH
65177: LD_INT 0
65179: ST_TO_ADDR
// sRemote := false ;
65180: LD_ADDR_EXP 77
65184: PUSH
65185: LD_INT 0
65187: ST_TO_ADDR
// sPowell := false ;
65188: LD_ADDR_EXP 78
65192: PUSH
65193: LD_INT 0
65195: ST_TO_ADDR
// sTeleport := false ;
65196: LD_ADDR_EXP 81
65200: PUSH
65201: LD_INT 0
65203: ST_TO_ADDR
// sOilTower := false ;
65204: LD_ADDR_EXP 83
65208: PUSH
65209: LD_INT 0
65211: ST_TO_ADDR
// sShovel := false ;
65212: LD_ADDR_EXP 84
65216: PUSH
65217: LD_INT 0
65219: ST_TO_ADDR
// sSheik := false ;
65220: LD_ADDR_EXP 85
65224: PUSH
65225: LD_INT 0
65227: ST_TO_ADDR
// sEarthquake := false ;
65228: LD_ADDR_EXP 87
65232: PUSH
65233: LD_INT 0
65235: ST_TO_ADDR
// sAI := false ;
65236: LD_ADDR_EXP 88
65240: PUSH
65241: LD_INT 0
65243: ST_TO_ADDR
// sCargo := false ;
65244: LD_ADDR_EXP 91
65248: PUSH
65249: LD_INT 0
65251: ST_TO_ADDR
// sDLaser := false ;
65252: LD_ADDR_EXP 92
65256: PUSH
65257: LD_INT 0
65259: ST_TO_ADDR
// sExchange := false ;
65260: LD_ADDR_EXP 93
65264: PUSH
65265: LD_INT 0
65267: ST_TO_ADDR
// sFac := false ;
65268: LD_ADDR_EXP 94
65272: PUSH
65273: LD_INT 0
65275: ST_TO_ADDR
// sPower := false ;
65276: LD_ADDR_EXP 95
65280: PUSH
65281: LD_INT 0
65283: ST_TO_ADDR
// sRandom := false ;
65284: LD_ADDR_EXP 96
65288: PUSH
65289: LD_INT 0
65291: ST_TO_ADDR
// sShield := false ;
65292: LD_ADDR_EXP 97
65296: PUSH
65297: LD_INT 0
65299: ST_TO_ADDR
// sTime := false ;
65300: LD_ADDR_EXP 98
65304: PUSH
65305: LD_INT 0
65307: ST_TO_ADDR
// sTools := false ;
65308: LD_ADDR_EXP 99
65312: PUSH
65313: LD_INT 0
65315: ST_TO_ADDR
// sSold := false ;
65316: LD_ADDR_EXP 64
65320: PUSH
65321: LD_INT 0
65323: ST_TO_ADDR
// sDiff := false ;
65324: LD_ADDR_EXP 65
65328: PUSH
65329: LD_INT 0
65331: ST_TO_ADDR
// sFog := false ;
65332: LD_ADDR_EXP 68
65336: PUSH
65337: LD_INT 0
65339: ST_TO_ADDR
// sReset := false ;
65340: LD_ADDR_EXP 69
65344: PUSH
65345: LD_INT 0
65347: ST_TO_ADDR
// sSun := false ;
65348: LD_ADDR_EXP 70
65352: PUSH
65353: LD_INT 0
65355: ST_TO_ADDR
// sTiger := false ;
65356: LD_ADDR_EXP 66
65360: PUSH
65361: LD_INT 0
65363: ST_TO_ADDR
// sBomb := false ;
65364: LD_ADDR_EXP 67
65368: PUSH
65369: LD_INT 0
65371: ST_TO_ADDR
// sWound := false ;
65372: LD_ADDR_EXP 75
65376: PUSH
65377: LD_INT 0
65379: ST_TO_ADDR
// sBetray := false ;
65380: LD_ADDR_EXP 79
65384: PUSH
65385: LD_INT 0
65387: ST_TO_ADDR
// sContamin := false ;
65388: LD_ADDR_EXP 80
65392: PUSH
65393: LD_INT 0
65395: ST_TO_ADDR
// sOil := false ;
65396: LD_ADDR_EXP 82
65400: PUSH
65401: LD_INT 0
65403: ST_TO_ADDR
// sStu := false ;
65404: LD_ADDR_EXP 86
65408: PUSH
65409: LD_INT 0
65411: ST_TO_ADDR
// sBazooka := false ;
65412: LD_ADDR_EXP 89
65416: PUSH
65417: LD_INT 0
65419: ST_TO_ADDR
// sMortar := false ;
65420: LD_ADDR_EXP 90
65424: PUSH
65425: LD_INT 0
65427: ST_TO_ADDR
// sRanger := false ;
65428: LD_ADDR_EXP 100
65432: PUSH
65433: LD_INT 0
65435: ST_TO_ADDR
// sComputer := false ;
65436: LD_ADDR_EXP 101
65440: PUSH
65441: LD_INT 0
65443: ST_TO_ADDR
// s30 := false ;
65444: LD_ADDR_EXP 102
65448: PUSH
65449: LD_INT 0
65451: ST_TO_ADDR
// s60 := false ;
65452: LD_ADDR_EXP 103
65456: PUSH
65457: LD_INT 0
65459: ST_TO_ADDR
// end ;
65460: LD_VAR 0 1
65464: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
65465: LD_INT 0
65467: PPUSH
65468: PPUSH
65469: PPUSH
65470: PPUSH
65471: PPUSH
65472: PPUSH
65473: PPUSH
// result := [ ] ;
65474: LD_ADDR_VAR 0 2
65478: PUSH
65479: EMPTY
65480: ST_TO_ADDR
// if campaign_id = 1 then
65481: LD_OWVAR 69
65485: PUSH
65486: LD_INT 1
65488: EQUAL
65489: IFFALSE 68655
// begin case mission_number of 1 :
65491: LD_OWVAR 70
65495: PUSH
65496: LD_INT 1
65498: DOUBLE
65499: EQUAL
65500: IFTRUE 65504
65502: GO 65580
65504: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
65505: LD_ADDR_VAR 0 2
65509: PUSH
65510: LD_INT 2
65512: PUSH
65513: LD_INT 4
65515: PUSH
65516: LD_INT 11
65518: PUSH
65519: LD_INT 12
65521: PUSH
65522: LD_INT 15
65524: PUSH
65525: LD_INT 16
65527: PUSH
65528: LD_INT 22
65530: PUSH
65531: LD_INT 23
65533: PUSH
65534: LD_INT 26
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: PUSH
65548: LD_INT 101
65550: PUSH
65551: LD_INT 102
65553: PUSH
65554: LD_INT 106
65556: PUSH
65557: LD_INT 116
65559: PUSH
65560: LD_INT 117
65562: PUSH
65563: LD_INT 118
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: LIST
65570: LIST
65571: LIST
65572: LIST
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: ST_TO_ADDR
65578: GO 68653
65580: LD_INT 2
65582: DOUBLE
65583: EQUAL
65584: IFTRUE 65588
65586: GO 65672
65588: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
65589: LD_ADDR_VAR 0 2
65593: PUSH
65594: LD_INT 2
65596: PUSH
65597: LD_INT 4
65599: PUSH
65600: LD_INT 11
65602: PUSH
65603: LD_INT 12
65605: PUSH
65606: LD_INT 15
65608: PUSH
65609: LD_INT 16
65611: PUSH
65612: LD_INT 22
65614: PUSH
65615: LD_INT 23
65617: PUSH
65618: LD_INT 26
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: LIST
65625: LIST
65626: LIST
65627: LIST
65628: LIST
65629: LIST
65630: LIST
65631: PUSH
65632: LD_INT 101
65634: PUSH
65635: LD_INT 102
65637: PUSH
65638: LD_INT 105
65640: PUSH
65641: LD_INT 106
65643: PUSH
65644: LD_INT 108
65646: PUSH
65647: LD_INT 116
65649: PUSH
65650: LD_INT 117
65652: PUSH
65653: LD_INT 118
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: PUSH
65666: EMPTY
65667: LIST
65668: LIST
65669: ST_TO_ADDR
65670: GO 68653
65672: LD_INT 3
65674: DOUBLE
65675: EQUAL
65676: IFTRUE 65680
65678: GO 65768
65680: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
65681: LD_ADDR_VAR 0 2
65685: PUSH
65686: LD_INT 2
65688: PUSH
65689: LD_INT 4
65691: PUSH
65692: LD_INT 5
65694: PUSH
65695: LD_INT 11
65697: PUSH
65698: LD_INT 12
65700: PUSH
65701: LD_INT 15
65703: PUSH
65704: LD_INT 16
65706: PUSH
65707: LD_INT 22
65709: PUSH
65710: LD_INT 26
65712: PUSH
65713: LD_INT 36
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: LIST
65720: LIST
65721: LIST
65722: LIST
65723: LIST
65724: LIST
65725: LIST
65726: LIST
65727: PUSH
65728: LD_INT 101
65730: PUSH
65731: LD_INT 102
65733: PUSH
65734: LD_INT 105
65736: PUSH
65737: LD_INT 106
65739: PUSH
65740: LD_INT 108
65742: PUSH
65743: LD_INT 116
65745: PUSH
65746: LD_INT 117
65748: PUSH
65749: LD_INT 118
65751: PUSH
65752: EMPTY
65753: LIST
65754: LIST
65755: LIST
65756: LIST
65757: LIST
65758: LIST
65759: LIST
65760: LIST
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: ST_TO_ADDR
65766: GO 68653
65768: LD_INT 4
65770: DOUBLE
65771: EQUAL
65772: IFTRUE 65776
65774: GO 65872
65776: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
65777: LD_ADDR_VAR 0 2
65781: PUSH
65782: LD_INT 2
65784: PUSH
65785: LD_INT 4
65787: PUSH
65788: LD_INT 5
65790: PUSH
65791: LD_INT 8
65793: PUSH
65794: LD_INT 11
65796: PUSH
65797: LD_INT 12
65799: PUSH
65800: LD_INT 15
65802: PUSH
65803: LD_INT 16
65805: PUSH
65806: LD_INT 22
65808: PUSH
65809: LD_INT 23
65811: PUSH
65812: LD_INT 26
65814: PUSH
65815: LD_INT 36
65817: PUSH
65818: EMPTY
65819: LIST
65820: LIST
65821: LIST
65822: LIST
65823: LIST
65824: LIST
65825: LIST
65826: LIST
65827: LIST
65828: LIST
65829: LIST
65830: LIST
65831: PUSH
65832: LD_INT 101
65834: PUSH
65835: LD_INT 102
65837: PUSH
65838: LD_INT 105
65840: PUSH
65841: LD_INT 106
65843: PUSH
65844: LD_INT 108
65846: PUSH
65847: LD_INT 116
65849: PUSH
65850: LD_INT 117
65852: PUSH
65853: LD_INT 118
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: LIST
65860: LIST
65861: LIST
65862: LIST
65863: LIST
65864: LIST
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: ST_TO_ADDR
65870: GO 68653
65872: LD_INT 5
65874: DOUBLE
65875: EQUAL
65876: IFTRUE 65880
65878: GO 65992
65880: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
65881: LD_ADDR_VAR 0 2
65885: PUSH
65886: LD_INT 2
65888: PUSH
65889: LD_INT 4
65891: PUSH
65892: LD_INT 5
65894: PUSH
65895: LD_INT 6
65897: PUSH
65898: LD_INT 8
65900: PUSH
65901: LD_INT 11
65903: PUSH
65904: LD_INT 12
65906: PUSH
65907: LD_INT 15
65909: PUSH
65910: LD_INT 16
65912: PUSH
65913: LD_INT 22
65915: PUSH
65916: LD_INT 23
65918: PUSH
65919: LD_INT 25
65921: PUSH
65922: LD_INT 26
65924: PUSH
65925: LD_INT 36
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: LIST
65932: LIST
65933: LIST
65934: LIST
65935: LIST
65936: LIST
65937: LIST
65938: LIST
65939: LIST
65940: LIST
65941: LIST
65942: LIST
65943: PUSH
65944: LD_INT 101
65946: PUSH
65947: LD_INT 102
65949: PUSH
65950: LD_INT 105
65952: PUSH
65953: LD_INT 106
65955: PUSH
65956: LD_INT 108
65958: PUSH
65959: LD_INT 109
65961: PUSH
65962: LD_INT 112
65964: PUSH
65965: LD_INT 116
65967: PUSH
65968: LD_INT 117
65970: PUSH
65971: LD_INT 118
65973: PUSH
65974: EMPTY
65975: LIST
65976: LIST
65977: LIST
65978: LIST
65979: LIST
65980: LIST
65981: LIST
65982: LIST
65983: LIST
65984: LIST
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: ST_TO_ADDR
65990: GO 68653
65992: LD_INT 6
65994: DOUBLE
65995: EQUAL
65996: IFTRUE 66000
65998: GO 66132
66000: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
66001: LD_ADDR_VAR 0 2
66005: PUSH
66006: LD_INT 2
66008: PUSH
66009: LD_INT 4
66011: PUSH
66012: LD_INT 5
66014: PUSH
66015: LD_INT 6
66017: PUSH
66018: LD_INT 8
66020: PUSH
66021: LD_INT 11
66023: PUSH
66024: LD_INT 12
66026: PUSH
66027: LD_INT 15
66029: PUSH
66030: LD_INT 16
66032: PUSH
66033: LD_INT 20
66035: PUSH
66036: LD_INT 21
66038: PUSH
66039: LD_INT 22
66041: PUSH
66042: LD_INT 23
66044: PUSH
66045: LD_INT 25
66047: PUSH
66048: LD_INT 26
66050: PUSH
66051: LD_INT 30
66053: PUSH
66054: LD_INT 31
66056: PUSH
66057: LD_INT 32
66059: PUSH
66060: LD_INT 36
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: LIST
66067: LIST
66068: LIST
66069: LIST
66070: LIST
66071: LIST
66072: LIST
66073: LIST
66074: LIST
66075: LIST
66076: LIST
66077: LIST
66078: LIST
66079: LIST
66080: LIST
66081: LIST
66082: LIST
66083: PUSH
66084: LD_INT 101
66086: PUSH
66087: LD_INT 102
66089: PUSH
66090: LD_INT 105
66092: PUSH
66093: LD_INT 106
66095: PUSH
66096: LD_INT 108
66098: PUSH
66099: LD_INT 109
66101: PUSH
66102: LD_INT 112
66104: PUSH
66105: LD_INT 116
66107: PUSH
66108: LD_INT 117
66110: PUSH
66111: LD_INT 118
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: ST_TO_ADDR
66130: GO 68653
66132: LD_INT 7
66134: DOUBLE
66135: EQUAL
66136: IFTRUE 66140
66138: GO 66252
66140: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
66141: LD_ADDR_VAR 0 2
66145: PUSH
66146: LD_INT 2
66148: PUSH
66149: LD_INT 4
66151: PUSH
66152: LD_INT 5
66154: PUSH
66155: LD_INT 7
66157: PUSH
66158: LD_INT 11
66160: PUSH
66161: LD_INT 12
66163: PUSH
66164: LD_INT 15
66166: PUSH
66167: LD_INT 16
66169: PUSH
66170: LD_INT 20
66172: PUSH
66173: LD_INT 21
66175: PUSH
66176: LD_INT 22
66178: PUSH
66179: LD_INT 23
66181: PUSH
66182: LD_INT 25
66184: PUSH
66185: LD_INT 26
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: LIST
66196: LIST
66197: LIST
66198: LIST
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: PUSH
66204: LD_INT 101
66206: PUSH
66207: LD_INT 102
66209: PUSH
66210: LD_INT 103
66212: PUSH
66213: LD_INT 105
66215: PUSH
66216: LD_INT 106
66218: PUSH
66219: LD_INT 108
66221: PUSH
66222: LD_INT 112
66224: PUSH
66225: LD_INT 116
66227: PUSH
66228: LD_INT 117
66230: PUSH
66231: LD_INT 118
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: LIST
66238: LIST
66239: LIST
66240: LIST
66241: LIST
66242: LIST
66243: LIST
66244: LIST
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: ST_TO_ADDR
66250: GO 68653
66252: LD_INT 8
66254: DOUBLE
66255: EQUAL
66256: IFTRUE 66260
66258: GO 66400
66260: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
66261: LD_ADDR_VAR 0 2
66265: PUSH
66266: LD_INT 2
66268: PUSH
66269: LD_INT 4
66271: PUSH
66272: LD_INT 5
66274: PUSH
66275: LD_INT 6
66277: PUSH
66278: LD_INT 7
66280: PUSH
66281: LD_INT 8
66283: PUSH
66284: LD_INT 11
66286: PUSH
66287: LD_INT 12
66289: PUSH
66290: LD_INT 15
66292: PUSH
66293: LD_INT 16
66295: PUSH
66296: LD_INT 20
66298: PUSH
66299: LD_INT 21
66301: PUSH
66302: LD_INT 22
66304: PUSH
66305: LD_INT 23
66307: PUSH
66308: LD_INT 25
66310: PUSH
66311: LD_INT 26
66313: PUSH
66314: LD_INT 30
66316: PUSH
66317: LD_INT 31
66319: PUSH
66320: LD_INT 32
66322: PUSH
66323: LD_INT 36
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: LIST
66330: LIST
66331: LIST
66332: LIST
66333: LIST
66334: LIST
66335: LIST
66336: LIST
66337: LIST
66338: LIST
66339: LIST
66340: LIST
66341: LIST
66342: LIST
66343: LIST
66344: LIST
66345: LIST
66346: LIST
66347: PUSH
66348: LD_INT 101
66350: PUSH
66351: LD_INT 102
66353: PUSH
66354: LD_INT 103
66356: PUSH
66357: LD_INT 105
66359: PUSH
66360: LD_INT 106
66362: PUSH
66363: LD_INT 108
66365: PUSH
66366: LD_INT 109
66368: PUSH
66369: LD_INT 112
66371: PUSH
66372: LD_INT 116
66374: PUSH
66375: LD_INT 117
66377: PUSH
66378: LD_INT 118
66380: PUSH
66381: EMPTY
66382: LIST
66383: LIST
66384: LIST
66385: LIST
66386: LIST
66387: LIST
66388: LIST
66389: LIST
66390: LIST
66391: LIST
66392: LIST
66393: PUSH
66394: EMPTY
66395: LIST
66396: LIST
66397: ST_TO_ADDR
66398: GO 68653
66400: LD_INT 9
66402: DOUBLE
66403: EQUAL
66404: IFTRUE 66408
66406: GO 66556
66408: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
66409: LD_ADDR_VAR 0 2
66413: PUSH
66414: LD_INT 2
66416: PUSH
66417: LD_INT 4
66419: PUSH
66420: LD_INT 5
66422: PUSH
66423: LD_INT 6
66425: PUSH
66426: LD_INT 7
66428: PUSH
66429: LD_INT 8
66431: PUSH
66432: LD_INT 11
66434: PUSH
66435: LD_INT 12
66437: PUSH
66438: LD_INT 15
66440: PUSH
66441: LD_INT 16
66443: PUSH
66444: LD_INT 20
66446: PUSH
66447: LD_INT 21
66449: PUSH
66450: LD_INT 22
66452: PUSH
66453: LD_INT 23
66455: PUSH
66456: LD_INT 25
66458: PUSH
66459: LD_INT 26
66461: PUSH
66462: LD_INT 28
66464: PUSH
66465: LD_INT 30
66467: PUSH
66468: LD_INT 31
66470: PUSH
66471: LD_INT 32
66473: PUSH
66474: LD_INT 36
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: LIST
66481: LIST
66482: LIST
66483: LIST
66484: LIST
66485: LIST
66486: LIST
66487: LIST
66488: LIST
66489: LIST
66490: LIST
66491: LIST
66492: LIST
66493: LIST
66494: LIST
66495: LIST
66496: LIST
66497: LIST
66498: LIST
66499: PUSH
66500: LD_INT 101
66502: PUSH
66503: LD_INT 102
66505: PUSH
66506: LD_INT 103
66508: PUSH
66509: LD_INT 105
66511: PUSH
66512: LD_INT 106
66514: PUSH
66515: LD_INT 108
66517: PUSH
66518: LD_INT 109
66520: PUSH
66521: LD_INT 112
66523: PUSH
66524: LD_INT 114
66526: PUSH
66527: LD_INT 116
66529: PUSH
66530: LD_INT 117
66532: PUSH
66533: LD_INT 118
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: LIST
66540: LIST
66541: LIST
66542: LIST
66543: LIST
66544: LIST
66545: LIST
66546: LIST
66547: LIST
66548: LIST
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: ST_TO_ADDR
66554: GO 68653
66556: LD_INT 10
66558: DOUBLE
66559: EQUAL
66560: IFTRUE 66564
66562: GO 66760
66564: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
66565: LD_ADDR_VAR 0 2
66569: PUSH
66570: LD_INT 2
66572: PUSH
66573: LD_INT 4
66575: PUSH
66576: LD_INT 5
66578: PUSH
66579: LD_INT 6
66581: PUSH
66582: LD_INT 7
66584: PUSH
66585: LD_INT 8
66587: PUSH
66588: LD_INT 9
66590: PUSH
66591: LD_INT 10
66593: PUSH
66594: LD_INT 11
66596: PUSH
66597: LD_INT 12
66599: PUSH
66600: LD_INT 13
66602: PUSH
66603: LD_INT 14
66605: PUSH
66606: LD_INT 15
66608: PUSH
66609: LD_INT 16
66611: PUSH
66612: LD_INT 17
66614: PUSH
66615: LD_INT 18
66617: PUSH
66618: LD_INT 19
66620: PUSH
66621: LD_INT 20
66623: PUSH
66624: LD_INT 21
66626: PUSH
66627: LD_INT 22
66629: PUSH
66630: LD_INT 23
66632: PUSH
66633: LD_INT 24
66635: PUSH
66636: LD_INT 25
66638: PUSH
66639: LD_INT 26
66641: PUSH
66642: LD_INT 28
66644: PUSH
66645: LD_INT 30
66647: PUSH
66648: LD_INT 31
66650: PUSH
66651: LD_INT 32
66653: PUSH
66654: LD_INT 36
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: LIST
66669: LIST
66670: LIST
66671: LIST
66672: LIST
66673: LIST
66674: LIST
66675: LIST
66676: LIST
66677: LIST
66678: LIST
66679: LIST
66680: LIST
66681: LIST
66682: LIST
66683: LIST
66684: LIST
66685: LIST
66686: LIST
66687: PUSH
66688: LD_INT 101
66690: PUSH
66691: LD_INT 102
66693: PUSH
66694: LD_INT 103
66696: PUSH
66697: LD_INT 104
66699: PUSH
66700: LD_INT 105
66702: PUSH
66703: LD_INT 106
66705: PUSH
66706: LD_INT 107
66708: PUSH
66709: LD_INT 108
66711: PUSH
66712: LD_INT 109
66714: PUSH
66715: LD_INT 110
66717: PUSH
66718: LD_INT 111
66720: PUSH
66721: LD_INT 112
66723: PUSH
66724: LD_INT 114
66726: PUSH
66727: LD_INT 116
66729: PUSH
66730: LD_INT 117
66732: PUSH
66733: LD_INT 118
66735: PUSH
66736: EMPTY
66737: LIST
66738: LIST
66739: LIST
66740: LIST
66741: LIST
66742: LIST
66743: LIST
66744: LIST
66745: LIST
66746: LIST
66747: LIST
66748: LIST
66749: LIST
66750: LIST
66751: LIST
66752: LIST
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: ST_TO_ADDR
66758: GO 68653
66760: LD_INT 11
66762: DOUBLE
66763: EQUAL
66764: IFTRUE 66768
66766: GO 66972
66768: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
66769: LD_ADDR_VAR 0 2
66773: PUSH
66774: LD_INT 2
66776: PUSH
66777: LD_INT 3
66779: PUSH
66780: LD_INT 4
66782: PUSH
66783: LD_INT 5
66785: PUSH
66786: LD_INT 6
66788: PUSH
66789: LD_INT 7
66791: PUSH
66792: LD_INT 8
66794: PUSH
66795: LD_INT 9
66797: PUSH
66798: LD_INT 10
66800: PUSH
66801: LD_INT 11
66803: PUSH
66804: LD_INT 12
66806: PUSH
66807: LD_INT 13
66809: PUSH
66810: LD_INT 14
66812: PUSH
66813: LD_INT 15
66815: PUSH
66816: LD_INT 16
66818: PUSH
66819: LD_INT 17
66821: PUSH
66822: LD_INT 18
66824: PUSH
66825: LD_INT 19
66827: PUSH
66828: LD_INT 20
66830: PUSH
66831: LD_INT 21
66833: PUSH
66834: LD_INT 22
66836: PUSH
66837: LD_INT 23
66839: PUSH
66840: LD_INT 24
66842: PUSH
66843: LD_INT 25
66845: PUSH
66846: LD_INT 26
66848: PUSH
66849: LD_INT 28
66851: PUSH
66852: LD_INT 30
66854: PUSH
66855: LD_INT 31
66857: PUSH
66858: LD_INT 32
66860: PUSH
66861: LD_INT 34
66863: PUSH
66864: LD_INT 36
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: LIST
66871: LIST
66872: LIST
66873: LIST
66874: LIST
66875: LIST
66876: LIST
66877: LIST
66878: LIST
66879: LIST
66880: LIST
66881: LIST
66882: LIST
66883: LIST
66884: LIST
66885: LIST
66886: LIST
66887: LIST
66888: LIST
66889: LIST
66890: LIST
66891: LIST
66892: LIST
66893: LIST
66894: LIST
66895: LIST
66896: LIST
66897: LIST
66898: LIST
66899: PUSH
66900: LD_INT 101
66902: PUSH
66903: LD_INT 102
66905: PUSH
66906: LD_INT 103
66908: PUSH
66909: LD_INT 104
66911: PUSH
66912: LD_INT 105
66914: PUSH
66915: LD_INT 106
66917: PUSH
66918: LD_INT 107
66920: PUSH
66921: LD_INT 108
66923: PUSH
66924: LD_INT 109
66926: PUSH
66927: LD_INT 110
66929: PUSH
66930: LD_INT 111
66932: PUSH
66933: LD_INT 112
66935: PUSH
66936: LD_INT 114
66938: PUSH
66939: LD_INT 116
66941: PUSH
66942: LD_INT 117
66944: PUSH
66945: LD_INT 118
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: LIST
66952: LIST
66953: LIST
66954: LIST
66955: LIST
66956: LIST
66957: LIST
66958: LIST
66959: LIST
66960: LIST
66961: LIST
66962: LIST
66963: LIST
66964: LIST
66965: PUSH
66966: EMPTY
66967: LIST
66968: LIST
66969: ST_TO_ADDR
66970: GO 68653
66972: LD_INT 12
66974: DOUBLE
66975: EQUAL
66976: IFTRUE 66980
66978: GO 67200
66980: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
66981: LD_ADDR_VAR 0 2
66985: PUSH
66986: LD_INT 1
66988: PUSH
66989: LD_INT 2
66991: PUSH
66992: LD_INT 3
66994: PUSH
66995: LD_INT 4
66997: PUSH
66998: LD_INT 5
67000: PUSH
67001: LD_INT 6
67003: PUSH
67004: LD_INT 7
67006: PUSH
67007: LD_INT 8
67009: PUSH
67010: LD_INT 9
67012: PUSH
67013: LD_INT 10
67015: PUSH
67016: LD_INT 11
67018: PUSH
67019: LD_INT 12
67021: PUSH
67022: LD_INT 13
67024: PUSH
67025: LD_INT 14
67027: PUSH
67028: LD_INT 15
67030: PUSH
67031: LD_INT 16
67033: PUSH
67034: LD_INT 17
67036: PUSH
67037: LD_INT 18
67039: PUSH
67040: LD_INT 19
67042: PUSH
67043: LD_INT 20
67045: PUSH
67046: LD_INT 21
67048: PUSH
67049: LD_INT 22
67051: PUSH
67052: LD_INT 23
67054: PUSH
67055: LD_INT 24
67057: PUSH
67058: LD_INT 25
67060: PUSH
67061: LD_INT 26
67063: PUSH
67064: LD_INT 27
67066: PUSH
67067: LD_INT 28
67069: PUSH
67070: LD_INT 30
67072: PUSH
67073: LD_INT 31
67075: PUSH
67076: LD_INT 32
67078: PUSH
67079: LD_INT 33
67081: PUSH
67082: LD_INT 34
67084: PUSH
67085: LD_INT 36
67087: PUSH
67088: EMPTY
67089: LIST
67090: LIST
67091: LIST
67092: LIST
67093: LIST
67094: LIST
67095: LIST
67096: LIST
67097: LIST
67098: LIST
67099: LIST
67100: LIST
67101: LIST
67102: LIST
67103: LIST
67104: LIST
67105: LIST
67106: LIST
67107: LIST
67108: LIST
67109: LIST
67110: LIST
67111: LIST
67112: LIST
67113: LIST
67114: LIST
67115: LIST
67116: LIST
67117: LIST
67118: LIST
67119: LIST
67120: LIST
67121: LIST
67122: LIST
67123: PUSH
67124: LD_INT 101
67126: PUSH
67127: LD_INT 102
67129: PUSH
67130: LD_INT 103
67132: PUSH
67133: LD_INT 104
67135: PUSH
67136: LD_INT 105
67138: PUSH
67139: LD_INT 106
67141: PUSH
67142: LD_INT 107
67144: PUSH
67145: LD_INT 108
67147: PUSH
67148: LD_INT 109
67150: PUSH
67151: LD_INT 110
67153: PUSH
67154: LD_INT 111
67156: PUSH
67157: LD_INT 112
67159: PUSH
67160: LD_INT 113
67162: PUSH
67163: LD_INT 114
67165: PUSH
67166: LD_INT 116
67168: PUSH
67169: LD_INT 117
67171: PUSH
67172: LD_INT 118
67174: PUSH
67175: EMPTY
67176: LIST
67177: LIST
67178: LIST
67179: LIST
67180: LIST
67181: LIST
67182: LIST
67183: LIST
67184: LIST
67185: LIST
67186: LIST
67187: LIST
67188: LIST
67189: LIST
67190: LIST
67191: LIST
67192: LIST
67193: PUSH
67194: EMPTY
67195: LIST
67196: LIST
67197: ST_TO_ADDR
67198: GO 68653
67200: LD_INT 13
67202: DOUBLE
67203: EQUAL
67204: IFTRUE 67208
67206: GO 67416
67208: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
67209: LD_ADDR_VAR 0 2
67213: PUSH
67214: LD_INT 1
67216: PUSH
67217: LD_INT 2
67219: PUSH
67220: LD_INT 3
67222: PUSH
67223: LD_INT 4
67225: PUSH
67226: LD_INT 5
67228: PUSH
67229: LD_INT 8
67231: PUSH
67232: LD_INT 9
67234: PUSH
67235: LD_INT 10
67237: PUSH
67238: LD_INT 11
67240: PUSH
67241: LD_INT 12
67243: PUSH
67244: LD_INT 14
67246: PUSH
67247: LD_INT 15
67249: PUSH
67250: LD_INT 16
67252: PUSH
67253: LD_INT 17
67255: PUSH
67256: LD_INT 18
67258: PUSH
67259: LD_INT 19
67261: PUSH
67262: LD_INT 20
67264: PUSH
67265: LD_INT 21
67267: PUSH
67268: LD_INT 22
67270: PUSH
67271: LD_INT 23
67273: PUSH
67274: LD_INT 24
67276: PUSH
67277: LD_INT 25
67279: PUSH
67280: LD_INT 26
67282: PUSH
67283: LD_INT 27
67285: PUSH
67286: LD_INT 28
67288: PUSH
67289: LD_INT 30
67291: PUSH
67292: LD_INT 31
67294: PUSH
67295: LD_INT 32
67297: PUSH
67298: LD_INT 33
67300: PUSH
67301: LD_INT 34
67303: PUSH
67304: LD_INT 36
67306: PUSH
67307: EMPTY
67308: LIST
67309: LIST
67310: LIST
67311: LIST
67312: LIST
67313: LIST
67314: LIST
67315: LIST
67316: LIST
67317: LIST
67318: LIST
67319: LIST
67320: LIST
67321: LIST
67322: LIST
67323: LIST
67324: LIST
67325: LIST
67326: LIST
67327: LIST
67328: LIST
67329: LIST
67330: LIST
67331: LIST
67332: LIST
67333: LIST
67334: LIST
67335: LIST
67336: LIST
67337: LIST
67338: LIST
67339: PUSH
67340: LD_INT 101
67342: PUSH
67343: LD_INT 102
67345: PUSH
67346: LD_INT 103
67348: PUSH
67349: LD_INT 104
67351: PUSH
67352: LD_INT 105
67354: PUSH
67355: LD_INT 106
67357: PUSH
67358: LD_INT 107
67360: PUSH
67361: LD_INT 108
67363: PUSH
67364: LD_INT 109
67366: PUSH
67367: LD_INT 110
67369: PUSH
67370: LD_INT 111
67372: PUSH
67373: LD_INT 112
67375: PUSH
67376: LD_INT 113
67378: PUSH
67379: LD_INT 114
67381: PUSH
67382: LD_INT 116
67384: PUSH
67385: LD_INT 117
67387: PUSH
67388: LD_INT 118
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: LIST
67395: LIST
67396: LIST
67397: LIST
67398: LIST
67399: LIST
67400: LIST
67401: LIST
67402: LIST
67403: LIST
67404: LIST
67405: LIST
67406: LIST
67407: LIST
67408: LIST
67409: PUSH
67410: EMPTY
67411: LIST
67412: LIST
67413: ST_TO_ADDR
67414: GO 68653
67416: LD_INT 14
67418: DOUBLE
67419: EQUAL
67420: IFTRUE 67424
67422: GO 67648
67424: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
67425: LD_ADDR_VAR 0 2
67429: PUSH
67430: LD_INT 1
67432: PUSH
67433: LD_INT 2
67435: PUSH
67436: LD_INT 3
67438: PUSH
67439: LD_INT 4
67441: PUSH
67442: LD_INT 5
67444: PUSH
67445: LD_INT 6
67447: PUSH
67448: LD_INT 7
67450: PUSH
67451: LD_INT 8
67453: PUSH
67454: LD_INT 9
67456: PUSH
67457: LD_INT 10
67459: PUSH
67460: LD_INT 11
67462: PUSH
67463: LD_INT 12
67465: PUSH
67466: LD_INT 13
67468: PUSH
67469: LD_INT 14
67471: PUSH
67472: LD_INT 15
67474: PUSH
67475: LD_INT 16
67477: PUSH
67478: LD_INT 17
67480: PUSH
67481: LD_INT 18
67483: PUSH
67484: LD_INT 19
67486: PUSH
67487: LD_INT 20
67489: PUSH
67490: LD_INT 21
67492: PUSH
67493: LD_INT 22
67495: PUSH
67496: LD_INT 23
67498: PUSH
67499: LD_INT 24
67501: PUSH
67502: LD_INT 25
67504: PUSH
67505: LD_INT 26
67507: PUSH
67508: LD_INT 27
67510: PUSH
67511: LD_INT 28
67513: PUSH
67514: LD_INT 29
67516: PUSH
67517: LD_INT 30
67519: PUSH
67520: LD_INT 31
67522: PUSH
67523: LD_INT 32
67525: PUSH
67526: LD_INT 33
67528: PUSH
67529: LD_INT 34
67531: PUSH
67532: LD_INT 36
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: LIST
67539: LIST
67540: LIST
67541: LIST
67542: LIST
67543: LIST
67544: LIST
67545: LIST
67546: LIST
67547: LIST
67548: LIST
67549: LIST
67550: LIST
67551: LIST
67552: LIST
67553: LIST
67554: LIST
67555: LIST
67556: LIST
67557: LIST
67558: LIST
67559: LIST
67560: LIST
67561: LIST
67562: LIST
67563: LIST
67564: LIST
67565: LIST
67566: LIST
67567: LIST
67568: LIST
67569: LIST
67570: LIST
67571: PUSH
67572: LD_INT 101
67574: PUSH
67575: LD_INT 102
67577: PUSH
67578: LD_INT 103
67580: PUSH
67581: LD_INT 104
67583: PUSH
67584: LD_INT 105
67586: PUSH
67587: LD_INT 106
67589: PUSH
67590: LD_INT 107
67592: PUSH
67593: LD_INT 108
67595: PUSH
67596: LD_INT 109
67598: PUSH
67599: LD_INT 110
67601: PUSH
67602: LD_INT 111
67604: PUSH
67605: LD_INT 112
67607: PUSH
67608: LD_INT 113
67610: PUSH
67611: LD_INT 114
67613: PUSH
67614: LD_INT 116
67616: PUSH
67617: LD_INT 117
67619: PUSH
67620: LD_INT 118
67622: PUSH
67623: EMPTY
67624: LIST
67625: LIST
67626: LIST
67627: LIST
67628: LIST
67629: LIST
67630: LIST
67631: LIST
67632: LIST
67633: LIST
67634: LIST
67635: LIST
67636: LIST
67637: LIST
67638: LIST
67639: LIST
67640: LIST
67641: PUSH
67642: EMPTY
67643: LIST
67644: LIST
67645: ST_TO_ADDR
67646: GO 68653
67648: LD_INT 15
67650: DOUBLE
67651: EQUAL
67652: IFTRUE 67656
67654: GO 67880
67656: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
67657: LD_ADDR_VAR 0 2
67661: PUSH
67662: LD_INT 1
67664: PUSH
67665: LD_INT 2
67667: PUSH
67668: LD_INT 3
67670: PUSH
67671: LD_INT 4
67673: PUSH
67674: LD_INT 5
67676: PUSH
67677: LD_INT 6
67679: PUSH
67680: LD_INT 7
67682: PUSH
67683: LD_INT 8
67685: PUSH
67686: LD_INT 9
67688: PUSH
67689: LD_INT 10
67691: PUSH
67692: LD_INT 11
67694: PUSH
67695: LD_INT 12
67697: PUSH
67698: LD_INT 13
67700: PUSH
67701: LD_INT 14
67703: PUSH
67704: LD_INT 15
67706: PUSH
67707: LD_INT 16
67709: PUSH
67710: LD_INT 17
67712: PUSH
67713: LD_INT 18
67715: PUSH
67716: LD_INT 19
67718: PUSH
67719: LD_INT 20
67721: PUSH
67722: LD_INT 21
67724: PUSH
67725: LD_INT 22
67727: PUSH
67728: LD_INT 23
67730: PUSH
67731: LD_INT 24
67733: PUSH
67734: LD_INT 25
67736: PUSH
67737: LD_INT 26
67739: PUSH
67740: LD_INT 27
67742: PUSH
67743: LD_INT 28
67745: PUSH
67746: LD_INT 29
67748: PUSH
67749: LD_INT 30
67751: PUSH
67752: LD_INT 31
67754: PUSH
67755: LD_INT 32
67757: PUSH
67758: LD_INT 33
67760: PUSH
67761: LD_INT 34
67763: PUSH
67764: LD_INT 36
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: LIST
67771: LIST
67772: LIST
67773: LIST
67774: LIST
67775: LIST
67776: LIST
67777: LIST
67778: LIST
67779: LIST
67780: LIST
67781: LIST
67782: LIST
67783: LIST
67784: LIST
67785: LIST
67786: LIST
67787: LIST
67788: LIST
67789: LIST
67790: LIST
67791: LIST
67792: LIST
67793: LIST
67794: LIST
67795: LIST
67796: LIST
67797: LIST
67798: LIST
67799: LIST
67800: LIST
67801: LIST
67802: LIST
67803: PUSH
67804: LD_INT 101
67806: PUSH
67807: LD_INT 102
67809: PUSH
67810: LD_INT 103
67812: PUSH
67813: LD_INT 104
67815: PUSH
67816: LD_INT 105
67818: PUSH
67819: LD_INT 106
67821: PUSH
67822: LD_INT 107
67824: PUSH
67825: LD_INT 108
67827: PUSH
67828: LD_INT 109
67830: PUSH
67831: LD_INT 110
67833: PUSH
67834: LD_INT 111
67836: PUSH
67837: LD_INT 112
67839: PUSH
67840: LD_INT 113
67842: PUSH
67843: LD_INT 114
67845: PUSH
67846: LD_INT 116
67848: PUSH
67849: LD_INT 117
67851: PUSH
67852: LD_INT 118
67854: PUSH
67855: EMPTY
67856: LIST
67857: LIST
67858: LIST
67859: LIST
67860: LIST
67861: LIST
67862: LIST
67863: LIST
67864: LIST
67865: LIST
67866: LIST
67867: LIST
67868: LIST
67869: LIST
67870: LIST
67871: LIST
67872: LIST
67873: PUSH
67874: EMPTY
67875: LIST
67876: LIST
67877: ST_TO_ADDR
67878: GO 68653
67880: LD_INT 16
67882: DOUBLE
67883: EQUAL
67884: IFTRUE 67888
67886: GO 68024
67888: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
67889: LD_ADDR_VAR 0 2
67893: PUSH
67894: LD_INT 2
67896: PUSH
67897: LD_INT 4
67899: PUSH
67900: LD_INT 5
67902: PUSH
67903: LD_INT 7
67905: PUSH
67906: LD_INT 11
67908: PUSH
67909: LD_INT 12
67911: PUSH
67912: LD_INT 15
67914: PUSH
67915: LD_INT 16
67917: PUSH
67918: LD_INT 20
67920: PUSH
67921: LD_INT 21
67923: PUSH
67924: LD_INT 22
67926: PUSH
67927: LD_INT 23
67929: PUSH
67930: LD_INT 25
67932: PUSH
67933: LD_INT 26
67935: PUSH
67936: LD_INT 30
67938: PUSH
67939: LD_INT 31
67941: PUSH
67942: LD_INT 32
67944: PUSH
67945: LD_INT 33
67947: PUSH
67948: LD_INT 34
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: LIST
67955: LIST
67956: LIST
67957: LIST
67958: LIST
67959: LIST
67960: LIST
67961: LIST
67962: LIST
67963: LIST
67964: LIST
67965: LIST
67966: LIST
67967: LIST
67968: LIST
67969: LIST
67970: LIST
67971: PUSH
67972: LD_INT 101
67974: PUSH
67975: LD_INT 102
67977: PUSH
67978: LD_INT 103
67980: PUSH
67981: LD_INT 106
67983: PUSH
67984: LD_INT 108
67986: PUSH
67987: LD_INT 112
67989: PUSH
67990: LD_INT 113
67992: PUSH
67993: LD_INT 114
67995: PUSH
67996: LD_INT 116
67998: PUSH
67999: LD_INT 117
68001: PUSH
68002: LD_INT 118
68004: PUSH
68005: EMPTY
68006: LIST
68007: LIST
68008: LIST
68009: LIST
68010: LIST
68011: LIST
68012: LIST
68013: LIST
68014: LIST
68015: LIST
68016: LIST
68017: PUSH
68018: EMPTY
68019: LIST
68020: LIST
68021: ST_TO_ADDR
68022: GO 68653
68024: LD_INT 17
68026: DOUBLE
68027: EQUAL
68028: IFTRUE 68032
68030: GO 68256
68032: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
68033: LD_ADDR_VAR 0 2
68037: PUSH
68038: LD_INT 1
68040: PUSH
68041: LD_INT 2
68043: PUSH
68044: LD_INT 3
68046: PUSH
68047: LD_INT 4
68049: PUSH
68050: LD_INT 5
68052: PUSH
68053: LD_INT 6
68055: PUSH
68056: LD_INT 7
68058: PUSH
68059: LD_INT 8
68061: PUSH
68062: LD_INT 9
68064: PUSH
68065: LD_INT 10
68067: PUSH
68068: LD_INT 11
68070: PUSH
68071: LD_INT 12
68073: PUSH
68074: LD_INT 13
68076: PUSH
68077: LD_INT 14
68079: PUSH
68080: LD_INT 15
68082: PUSH
68083: LD_INT 16
68085: PUSH
68086: LD_INT 17
68088: PUSH
68089: LD_INT 18
68091: PUSH
68092: LD_INT 19
68094: PUSH
68095: LD_INT 20
68097: PUSH
68098: LD_INT 21
68100: PUSH
68101: LD_INT 22
68103: PUSH
68104: LD_INT 23
68106: PUSH
68107: LD_INT 24
68109: PUSH
68110: LD_INT 25
68112: PUSH
68113: LD_INT 26
68115: PUSH
68116: LD_INT 27
68118: PUSH
68119: LD_INT 28
68121: PUSH
68122: LD_INT 29
68124: PUSH
68125: LD_INT 30
68127: PUSH
68128: LD_INT 31
68130: PUSH
68131: LD_INT 32
68133: PUSH
68134: LD_INT 33
68136: PUSH
68137: LD_INT 34
68139: PUSH
68140: LD_INT 36
68142: PUSH
68143: EMPTY
68144: LIST
68145: LIST
68146: LIST
68147: LIST
68148: LIST
68149: LIST
68150: LIST
68151: LIST
68152: LIST
68153: LIST
68154: LIST
68155: LIST
68156: LIST
68157: LIST
68158: LIST
68159: LIST
68160: LIST
68161: LIST
68162: LIST
68163: LIST
68164: LIST
68165: LIST
68166: LIST
68167: LIST
68168: LIST
68169: LIST
68170: LIST
68171: LIST
68172: LIST
68173: LIST
68174: LIST
68175: LIST
68176: LIST
68177: LIST
68178: LIST
68179: PUSH
68180: LD_INT 101
68182: PUSH
68183: LD_INT 102
68185: PUSH
68186: LD_INT 103
68188: PUSH
68189: LD_INT 104
68191: PUSH
68192: LD_INT 105
68194: PUSH
68195: LD_INT 106
68197: PUSH
68198: LD_INT 107
68200: PUSH
68201: LD_INT 108
68203: PUSH
68204: LD_INT 109
68206: PUSH
68207: LD_INT 110
68209: PUSH
68210: LD_INT 111
68212: PUSH
68213: LD_INT 112
68215: PUSH
68216: LD_INT 113
68218: PUSH
68219: LD_INT 114
68221: PUSH
68222: LD_INT 116
68224: PUSH
68225: LD_INT 117
68227: PUSH
68228: LD_INT 118
68230: PUSH
68231: EMPTY
68232: LIST
68233: LIST
68234: LIST
68235: LIST
68236: LIST
68237: LIST
68238: LIST
68239: LIST
68240: LIST
68241: LIST
68242: LIST
68243: LIST
68244: LIST
68245: LIST
68246: LIST
68247: LIST
68248: LIST
68249: PUSH
68250: EMPTY
68251: LIST
68252: LIST
68253: ST_TO_ADDR
68254: GO 68653
68256: LD_INT 18
68258: DOUBLE
68259: EQUAL
68260: IFTRUE 68264
68262: GO 68412
68264: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
68265: LD_ADDR_VAR 0 2
68269: PUSH
68270: LD_INT 2
68272: PUSH
68273: LD_INT 4
68275: PUSH
68276: LD_INT 5
68278: PUSH
68279: LD_INT 7
68281: PUSH
68282: LD_INT 11
68284: PUSH
68285: LD_INT 12
68287: PUSH
68288: LD_INT 15
68290: PUSH
68291: LD_INT 16
68293: PUSH
68294: LD_INT 20
68296: PUSH
68297: LD_INT 21
68299: PUSH
68300: LD_INT 22
68302: PUSH
68303: LD_INT 23
68305: PUSH
68306: LD_INT 25
68308: PUSH
68309: LD_INT 26
68311: PUSH
68312: LD_INT 30
68314: PUSH
68315: LD_INT 31
68317: PUSH
68318: LD_INT 32
68320: PUSH
68321: LD_INT 33
68323: PUSH
68324: LD_INT 34
68326: PUSH
68327: LD_INT 35
68329: PUSH
68330: LD_INT 36
68332: PUSH
68333: EMPTY
68334: LIST
68335: LIST
68336: LIST
68337: LIST
68338: LIST
68339: LIST
68340: LIST
68341: LIST
68342: LIST
68343: LIST
68344: LIST
68345: LIST
68346: LIST
68347: LIST
68348: LIST
68349: LIST
68350: LIST
68351: LIST
68352: LIST
68353: LIST
68354: LIST
68355: PUSH
68356: LD_INT 101
68358: PUSH
68359: LD_INT 102
68361: PUSH
68362: LD_INT 103
68364: PUSH
68365: LD_INT 106
68367: PUSH
68368: LD_INT 108
68370: PUSH
68371: LD_INT 112
68373: PUSH
68374: LD_INT 113
68376: PUSH
68377: LD_INT 114
68379: PUSH
68380: LD_INT 115
68382: PUSH
68383: LD_INT 116
68385: PUSH
68386: LD_INT 117
68388: PUSH
68389: LD_INT 118
68391: PUSH
68392: EMPTY
68393: LIST
68394: LIST
68395: LIST
68396: LIST
68397: LIST
68398: LIST
68399: LIST
68400: LIST
68401: LIST
68402: LIST
68403: LIST
68404: LIST
68405: PUSH
68406: EMPTY
68407: LIST
68408: LIST
68409: ST_TO_ADDR
68410: GO 68653
68412: LD_INT 19
68414: DOUBLE
68415: EQUAL
68416: IFTRUE 68420
68418: GO 68652
68420: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
68421: LD_ADDR_VAR 0 2
68425: PUSH
68426: LD_INT 1
68428: PUSH
68429: LD_INT 2
68431: PUSH
68432: LD_INT 3
68434: PUSH
68435: LD_INT 4
68437: PUSH
68438: LD_INT 5
68440: PUSH
68441: LD_INT 6
68443: PUSH
68444: LD_INT 7
68446: PUSH
68447: LD_INT 8
68449: PUSH
68450: LD_INT 9
68452: PUSH
68453: LD_INT 10
68455: PUSH
68456: LD_INT 11
68458: PUSH
68459: LD_INT 12
68461: PUSH
68462: LD_INT 13
68464: PUSH
68465: LD_INT 14
68467: PUSH
68468: LD_INT 15
68470: PUSH
68471: LD_INT 16
68473: PUSH
68474: LD_INT 17
68476: PUSH
68477: LD_INT 18
68479: PUSH
68480: LD_INT 19
68482: PUSH
68483: LD_INT 20
68485: PUSH
68486: LD_INT 21
68488: PUSH
68489: LD_INT 22
68491: PUSH
68492: LD_INT 23
68494: PUSH
68495: LD_INT 24
68497: PUSH
68498: LD_INT 25
68500: PUSH
68501: LD_INT 26
68503: PUSH
68504: LD_INT 27
68506: PUSH
68507: LD_INT 28
68509: PUSH
68510: LD_INT 29
68512: PUSH
68513: LD_INT 30
68515: PUSH
68516: LD_INT 31
68518: PUSH
68519: LD_INT 32
68521: PUSH
68522: LD_INT 33
68524: PUSH
68525: LD_INT 34
68527: PUSH
68528: LD_INT 35
68530: PUSH
68531: LD_INT 36
68533: PUSH
68534: EMPTY
68535: LIST
68536: LIST
68537: LIST
68538: LIST
68539: LIST
68540: LIST
68541: LIST
68542: LIST
68543: LIST
68544: LIST
68545: LIST
68546: LIST
68547: LIST
68548: LIST
68549: LIST
68550: LIST
68551: LIST
68552: LIST
68553: LIST
68554: LIST
68555: LIST
68556: LIST
68557: LIST
68558: LIST
68559: LIST
68560: LIST
68561: LIST
68562: LIST
68563: LIST
68564: LIST
68565: LIST
68566: LIST
68567: LIST
68568: LIST
68569: LIST
68570: LIST
68571: PUSH
68572: LD_INT 101
68574: PUSH
68575: LD_INT 102
68577: PUSH
68578: LD_INT 103
68580: PUSH
68581: LD_INT 104
68583: PUSH
68584: LD_INT 105
68586: PUSH
68587: LD_INT 106
68589: PUSH
68590: LD_INT 107
68592: PUSH
68593: LD_INT 108
68595: PUSH
68596: LD_INT 109
68598: PUSH
68599: LD_INT 110
68601: PUSH
68602: LD_INT 111
68604: PUSH
68605: LD_INT 112
68607: PUSH
68608: LD_INT 113
68610: PUSH
68611: LD_INT 114
68613: PUSH
68614: LD_INT 115
68616: PUSH
68617: LD_INT 116
68619: PUSH
68620: LD_INT 117
68622: PUSH
68623: LD_INT 118
68625: PUSH
68626: EMPTY
68627: LIST
68628: LIST
68629: LIST
68630: LIST
68631: LIST
68632: LIST
68633: LIST
68634: LIST
68635: LIST
68636: LIST
68637: LIST
68638: LIST
68639: LIST
68640: LIST
68641: LIST
68642: LIST
68643: LIST
68644: LIST
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: ST_TO_ADDR
68650: GO 68653
68652: POP
// end else
68653: GO 68884
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
68655: LD_ADDR_VAR 0 2
68659: PUSH
68660: LD_INT 1
68662: PUSH
68663: LD_INT 2
68665: PUSH
68666: LD_INT 3
68668: PUSH
68669: LD_INT 4
68671: PUSH
68672: LD_INT 5
68674: PUSH
68675: LD_INT 6
68677: PUSH
68678: LD_INT 7
68680: PUSH
68681: LD_INT 8
68683: PUSH
68684: LD_INT 9
68686: PUSH
68687: LD_INT 10
68689: PUSH
68690: LD_INT 11
68692: PUSH
68693: LD_INT 12
68695: PUSH
68696: LD_INT 13
68698: PUSH
68699: LD_INT 14
68701: PUSH
68702: LD_INT 15
68704: PUSH
68705: LD_INT 16
68707: PUSH
68708: LD_INT 17
68710: PUSH
68711: LD_INT 18
68713: PUSH
68714: LD_INT 19
68716: PUSH
68717: LD_INT 20
68719: PUSH
68720: LD_INT 21
68722: PUSH
68723: LD_INT 22
68725: PUSH
68726: LD_INT 23
68728: PUSH
68729: LD_INT 24
68731: PUSH
68732: LD_INT 25
68734: PUSH
68735: LD_INT 26
68737: PUSH
68738: LD_INT 27
68740: PUSH
68741: LD_INT 28
68743: PUSH
68744: LD_INT 29
68746: PUSH
68747: LD_INT 30
68749: PUSH
68750: LD_INT 31
68752: PUSH
68753: LD_INT 32
68755: PUSH
68756: LD_INT 33
68758: PUSH
68759: LD_INT 34
68761: PUSH
68762: LD_INT 35
68764: PUSH
68765: LD_INT 36
68767: PUSH
68768: EMPTY
68769: LIST
68770: LIST
68771: LIST
68772: LIST
68773: LIST
68774: LIST
68775: LIST
68776: LIST
68777: LIST
68778: LIST
68779: LIST
68780: LIST
68781: LIST
68782: LIST
68783: LIST
68784: LIST
68785: LIST
68786: LIST
68787: LIST
68788: LIST
68789: LIST
68790: LIST
68791: LIST
68792: LIST
68793: LIST
68794: LIST
68795: LIST
68796: LIST
68797: LIST
68798: LIST
68799: LIST
68800: LIST
68801: LIST
68802: LIST
68803: LIST
68804: LIST
68805: PUSH
68806: LD_INT 101
68808: PUSH
68809: LD_INT 102
68811: PUSH
68812: LD_INT 103
68814: PUSH
68815: LD_INT 104
68817: PUSH
68818: LD_INT 105
68820: PUSH
68821: LD_INT 106
68823: PUSH
68824: LD_INT 107
68826: PUSH
68827: LD_INT 108
68829: PUSH
68830: LD_INT 109
68832: PUSH
68833: LD_INT 110
68835: PUSH
68836: LD_INT 111
68838: PUSH
68839: LD_INT 112
68841: PUSH
68842: LD_INT 113
68844: PUSH
68845: LD_INT 114
68847: PUSH
68848: LD_INT 115
68850: PUSH
68851: LD_INT 116
68853: PUSH
68854: LD_INT 117
68856: PUSH
68857: LD_INT 118
68859: PUSH
68860: EMPTY
68861: LIST
68862: LIST
68863: LIST
68864: LIST
68865: LIST
68866: LIST
68867: LIST
68868: LIST
68869: LIST
68870: LIST
68871: LIST
68872: LIST
68873: LIST
68874: LIST
68875: LIST
68876: LIST
68877: LIST
68878: LIST
68879: PUSH
68880: EMPTY
68881: LIST
68882: LIST
68883: ST_TO_ADDR
// if result then
68884: LD_VAR 0 2
68888: IFFALSE 69674
// begin normal :=  ;
68890: LD_ADDR_VAR 0 5
68894: PUSH
68895: LD_STRING 
68897: ST_TO_ADDR
// hardcore :=  ;
68898: LD_ADDR_VAR 0 6
68902: PUSH
68903: LD_STRING 
68905: ST_TO_ADDR
// active :=  ;
68906: LD_ADDR_VAR 0 7
68910: PUSH
68911: LD_STRING 
68913: ST_TO_ADDR
// for i = 1 to normalCounter do
68914: LD_ADDR_VAR 0 8
68918: PUSH
68919: DOUBLE
68920: LD_INT 1
68922: DEC
68923: ST_TO_ADDR
68924: LD_EXP 48
68928: PUSH
68929: FOR_TO
68930: IFFALSE 69031
// begin tmp := 0 ;
68932: LD_ADDR_VAR 0 3
68936: PUSH
68937: LD_STRING 0
68939: ST_TO_ADDR
// if result [ 1 ] then
68940: LD_VAR 0 2
68944: PUSH
68945: LD_INT 1
68947: ARRAY
68948: IFFALSE 69013
// if result [ 1 ] [ 1 ] = i then
68950: LD_VAR 0 2
68954: PUSH
68955: LD_INT 1
68957: ARRAY
68958: PUSH
68959: LD_INT 1
68961: ARRAY
68962: PUSH
68963: LD_VAR 0 8
68967: EQUAL
68968: IFFALSE 69013
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
68970: LD_ADDR_VAR 0 2
68974: PUSH
68975: LD_VAR 0 2
68979: PPUSH
68980: LD_INT 1
68982: PPUSH
68983: LD_VAR 0 2
68987: PUSH
68988: LD_INT 1
68990: ARRAY
68991: PPUSH
68992: LD_INT 1
68994: PPUSH
68995: CALL_OW 3
68999: PPUSH
69000: CALL_OW 1
69004: ST_TO_ADDR
// tmp := 1 ;
69005: LD_ADDR_VAR 0 3
69009: PUSH
69010: LD_STRING 1
69012: ST_TO_ADDR
// end ; normal := normal & tmp ;
69013: LD_ADDR_VAR 0 5
69017: PUSH
69018: LD_VAR 0 5
69022: PUSH
69023: LD_VAR 0 3
69027: STR
69028: ST_TO_ADDR
// end ;
69029: GO 68929
69031: POP
69032: POP
// for i = 1 to hardcoreCounter do
69033: LD_ADDR_VAR 0 8
69037: PUSH
69038: DOUBLE
69039: LD_INT 1
69041: DEC
69042: ST_TO_ADDR
69043: LD_EXP 49
69047: PUSH
69048: FOR_TO
69049: IFFALSE 69154
// begin tmp := 0 ;
69051: LD_ADDR_VAR 0 3
69055: PUSH
69056: LD_STRING 0
69058: ST_TO_ADDR
// if result [ 2 ] then
69059: LD_VAR 0 2
69063: PUSH
69064: LD_INT 2
69066: ARRAY
69067: IFFALSE 69136
// if result [ 2 ] [ 1 ] = 100 + i then
69069: LD_VAR 0 2
69073: PUSH
69074: LD_INT 2
69076: ARRAY
69077: PUSH
69078: LD_INT 1
69080: ARRAY
69081: PUSH
69082: LD_INT 100
69084: PUSH
69085: LD_VAR 0 8
69089: PLUS
69090: EQUAL
69091: IFFALSE 69136
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
69093: LD_ADDR_VAR 0 2
69097: PUSH
69098: LD_VAR 0 2
69102: PPUSH
69103: LD_INT 2
69105: PPUSH
69106: LD_VAR 0 2
69110: PUSH
69111: LD_INT 2
69113: ARRAY
69114: PPUSH
69115: LD_INT 1
69117: PPUSH
69118: CALL_OW 3
69122: PPUSH
69123: CALL_OW 1
69127: ST_TO_ADDR
// tmp := 1 ;
69128: LD_ADDR_VAR 0 3
69132: PUSH
69133: LD_STRING 1
69135: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
69136: LD_ADDR_VAR 0 6
69140: PUSH
69141: LD_VAR 0 6
69145: PUSH
69146: LD_VAR 0 3
69150: STR
69151: ST_TO_ADDR
// end ;
69152: GO 69048
69154: POP
69155: POP
// if isGameLoad then
69156: LD_VAR 0 1
69160: IFFALSE 69635
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
69162: LD_ADDR_VAR 0 4
69166: PUSH
69167: LD_EXP 52
69171: PUSH
69172: LD_EXP 51
69176: PUSH
69177: LD_EXP 53
69181: PUSH
69182: LD_EXP 50
69186: PUSH
69187: LD_EXP 54
69191: PUSH
69192: LD_EXP 55
69196: PUSH
69197: LD_EXP 56
69201: PUSH
69202: LD_EXP 57
69206: PUSH
69207: LD_EXP 58
69211: PUSH
69212: LD_EXP 59
69216: PUSH
69217: LD_EXP 60
69221: PUSH
69222: LD_EXP 61
69226: PUSH
69227: LD_EXP 62
69231: PUSH
69232: LD_EXP 63
69236: PUSH
69237: LD_EXP 71
69241: PUSH
69242: LD_EXP 72
69246: PUSH
69247: LD_EXP 73
69251: PUSH
69252: LD_EXP 74
69256: PUSH
69257: LD_EXP 76
69261: PUSH
69262: LD_EXP 77
69266: PUSH
69267: LD_EXP 78
69271: PUSH
69272: LD_EXP 81
69276: PUSH
69277: LD_EXP 83
69281: PUSH
69282: LD_EXP 84
69286: PUSH
69287: LD_EXP 85
69291: PUSH
69292: LD_EXP 87
69296: PUSH
69297: LD_EXP 88
69301: PUSH
69302: LD_EXP 91
69306: PUSH
69307: LD_EXP 92
69311: PUSH
69312: LD_EXP 93
69316: PUSH
69317: LD_EXP 94
69321: PUSH
69322: LD_EXP 95
69326: PUSH
69327: LD_EXP 96
69331: PUSH
69332: LD_EXP 97
69336: PUSH
69337: LD_EXP 98
69341: PUSH
69342: LD_EXP 99
69346: PUSH
69347: LD_EXP 64
69351: PUSH
69352: LD_EXP 65
69356: PUSH
69357: LD_EXP 68
69361: PUSH
69362: LD_EXP 69
69366: PUSH
69367: LD_EXP 70
69371: PUSH
69372: LD_EXP 66
69376: PUSH
69377: LD_EXP 67
69381: PUSH
69382: LD_EXP 75
69386: PUSH
69387: LD_EXP 79
69391: PUSH
69392: LD_EXP 80
69396: PUSH
69397: LD_EXP 82
69401: PUSH
69402: LD_EXP 86
69406: PUSH
69407: LD_EXP 89
69411: PUSH
69412: LD_EXP 90
69416: PUSH
69417: LD_EXP 100
69421: PUSH
69422: LD_EXP 101
69426: PUSH
69427: LD_EXP 102
69431: PUSH
69432: LD_EXP 103
69436: PUSH
69437: EMPTY
69438: LIST
69439: LIST
69440: LIST
69441: LIST
69442: LIST
69443: LIST
69444: LIST
69445: LIST
69446: LIST
69447: LIST
69448: LIST
69449: LIST
69450: LIST
69451: LIST
69452: LIST
69453: LIST
69454: LIST
69455: LIST
69456: LIST
69457: LIST
69458: LIST
69459: LIST
69460: LIST
69461: LIST
69462: LIST
69463: LIST
69464: LIST
69465: LIST
69466: LIST
69467: LIST
69468: LIST
69469: LIST
69470: LIST
69471: LIST
69472: LIST
69473: LIST
69474: LIST
69475: LIST
69476: LIST
69477: LIST
69478: LIST
69479: LIST
69480: LIST
69481: LIST
69482: LIST
69483: LIST
69484: LIST
69485: LIST
69486: LIST
69487: LIST
69488: LIST
69489: LIST
69490: LIST
69491: LIST
69492: ST_TO_ADDR
// tmp :=  ;
69493: LD_ADDR_VAR 0 3
69497: PUSH
69498: LD_STRING 
69500: ST_TO_ADDR
// for i = 1 to normalCounter do
69501: LD_ADDR_VAR 0 8
69505: PUSH
69506: DOUBLE
69507: LD_INT 1
69509: DEC
69510: ST_TO_ADDR
69511: LD_EXP 48
69515: PUSH
69516: FOR_TO
69517: IFFALSE 69553
// begin if flags [ i ] then
69519: LD_VAR 0 4
69523: PUSH
69524: LD_VAR 0 8
69528: ARRAY
69529: IFFALSE 69551
// tmp := tmp & i & ; ;
69531: LD_ADDR_VAR 0 3
69535: PUSH
69536: LD_VAR 0 3
69540: PUSH
69541: LD_VAR 0 8
69545: STR
69546: PUSH
69547: LD_STRING ;
69549: STR
69550: ST_TO_ADDR
// end ;
69551: GO 69516
69553: POP
69554: POP
// for i = 1 to hardcoreCounter do
69555: LD_ADDR_VAR 0 8
69559: PUSH
69560: DOUBLE
69561: LD_INT 1
69563: DEC
69564: ST_TO_ADDR
69565: LD_EXP 49
69569: PUSH
69570: FOR_TO
69571: IFFALSE 69617
// begin if flags [ normalCounter + i ] then
69573: LD_VAR 0 4
69577: PUSH
69578: LD_EXP 48
69582: PUSH
69583: LD_VAR 0 8
69587: PLUS
69588: ARRAY
69589: IFFALSE 69615
// tmp := tmp & ( 100 + i ) & ; ;
69591: LD_ADDR_VAR 0 3
69595: PUSH
69596: LD_VAR 0 3
69600: PUSH
69601: LD_INT 100
69603: PUSH
69604: LD_VAR 0 8
69608: PLUS
69609: STR
69610: PUSH
69611: LD_STRING ;
69613: STR
69614: ST_TO_ADDR
// end ;
69615: GO 69570
69617: POP
69618: POP
// if tmp then
69619: LD_VAR 0 3
69623: IFFALSE 69635
// active := tmp ;
69625: LD_ADDR_VAR 0 7
69629: PUSH
69630: LD_VAR 0 3
69634: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
69635: LD_STRING getStreamItemsFromMission("
69637: PUSH
69638: LD_VAR 0 5
69642: STR
69643: PUSH
69644: LD_STRING ","
69646: STR
69647: PUSH
69648: LD_VAR 0 6
69652: STR
69653: PUSH
69654: LD_STRING ","
69656: STR
69657: PUSH
69658: LD_VAR 0 7
69662: STR
69663: PUSH
69664: LD_STRING ")
69666: STR
69667: PPUSH
69668: CALL_OW 559
// end else
69672: GO 69681
// ToLua ( getStreamItemsFromMission("","","") ) ;
69674: LD_STRING getStreamItemsFromMission("","","")
69676: PPUSH
69677: CALL_OW 559
// end ;
69681: LD_VAR 0 2
69685: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
69686: LD_EXP 47
69690: PUSH
69691: LD_EXP 52
69695: AND
69696: IFFALSE 69820
69698: GO 69700
69700: DISABLE
69701: LD_INT 0
69703: PPUSH
69704: PPUSH
// begin enable ;
69705: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
69706: LD_ADDR_VAR 0 2
69710: PUSH
69711: LD_INT 22
69713: PUSH
69714: LD_OWVAR 2
69718: PUSH
69719: EMPTY
69720: LIST
69721: LIST
69722: PUSH
69723: LD_INT 2
69725: PUSH
69726: LD_INT 34
69728: PUSH
69729: LD_INT 7
69731: PUSH
69732: EMPTY
69733: LIST
69734: LIST
69735: PUSH
69736: LD_INT 34
69738: PUSH
69739: LD_INT 45
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: PUSH
69746: LD_INT 34
69748: PUSH
69749: LD_INT 28
69751: PUSH
69752: EMPTY
69753: LIST
69754: LIST
69755: PUSH
69756: LD_INT 34
69758: PUSH
69759: LD_INT 47
69761: PUSH
69762: EMPTY
69763: LIST
69764: LIST
69765: PUSH
69766: EMPTY
69767: LIST
69768: LIST
69769: LIST
69770: LIST
69771: LIST
69772: PUSH
69773: EMPTY
69774: LIST
69775: LIST
69776: PPUSH
69777: CALL_OW 69
69781: ST_TO_ADDR
// if not tmp then
69782: LD_VAR 0 2
69786: NOT
69787: IFFALSE 69791
// exit ;
69789: GO 69820
// for i in tmp do
69791: LD_ADDR_VAR 0 1
69795: PUSH
69796: LD_VAR 0 2
69800: PUSH
69801: FOR_IN
69802: IFFALSE 69818
// begin SetLives ( i , 0 ) ;
69804: LD_VAR 0 1
69808: PPUSH
69809: LD_INT 0
69811: PPUSH
69812: CALL_OW 234
// end ;
69816: GO 69801
69818: POP
69819: POP
// end ;
69820: PPOPN 2
69822: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
69823: LD_EXP 47
69827: PUSH
69828: LD_EXP 53
69832: AND
69833: IFFALSE 69917
69835: GO 69837
69837: DISABLE
69838: LD_INT 0
69840: PPUSH
69841: PPUSH
// begin enable ;
69842: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
69843: LD_ADDR_VAR 0 2
69847: PUSH
69848: LD_INT 22
69850: PUSH
69851: LD_OWVAR 2
69855: PUSH
69856: EMPTY
69857: LIST
69858: LIST
69859: PUSH
69860: LD_INT 32
69862: PUSH
69863: LD_INT 3
69865: PUSH
69866: EMPTY
69867: LIST
69868: LIST
69869: PUSH
69870: EMPTY
69871: LIST
69872: LIST
69873: PPUSH
69874: CALL_OW 69
69878: ST_TO_ADDR
// if not tmp then
69879: LD_VAR 0 2
69883: NOT
69884: IFFALSE 69888
// exit ;
69886: GO 69917
// for i in tmp do
69888: LD_ADDR_VAR 0 1
69892: PUSH
69893: LD_VAR 0 2
69897: PUSH
69898: FOR_IN
69899: IFFALSE 69915
// begin SetLives ( i , 0 ) ;
69901: LD_VAR 0 1
69905: PPUSH
69906: LD_INT 0
69908: PPUSH
69909: CALL_OW 234
// end ;
69913: GO 69898
69915: POP
69916: POP
// end ;
69917: PPOPN 2
69919: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
69920: LD_EXP 47
69924: PUSH
69925: LD_EXP 50
69929: AND
69930: IFFALSE 70023
69932: GO 69934
69934: DISABLE
69935: LD_INT 0
69937: PPUSH
// begin enable ;
69938: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
69939: LD_ADDR_VAR 0 1
69943: PUSH
69944: LD_INT 22
69946: PUSH
69947: LD_OWVAR 2
69951: PUSH
69952: EMPTY
69953: LIST
69954: LIST
69955: PUSH
69956: LD_INT 2
69958: PUSH
69959: LD_INT 25
69961: PUSH
69962: LD_INT 5
69964: PUSH
69965: EMPTY
69966: LIST
69967: LIST
69968: PUSH
69969: LD_INT 25
69971: PUSH
69972: LD_INT 9
69974: PUSH
69975: EMPTY
69976: LIST
69977: LIST
69978: PUSH
69979: LD_INT 25
69981: PUSH
69982: LD_INT 8
69984: PUSH
69985: EMPTY
69986: LIST
69987: LIST
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: LIST
69993: LIST
69994: PUSH
69995: EMPTY
69996: LIST
69997: LIST
69998: PPUSH
69999: CALL_OW 69
70003: PUSH
70004: FOR_IN
70005: IFFALSE 70021
// begin SetClass ( i , 1 ) ;
70007: LD_VAR 0 1
70011: PPUSH
70012: LD_INT 1
70014: PPUSH
70015: CALL_OW 336
// end ;
70019: GO 70004
70021: POP
70022: POP
// end ;
70023: PPOPN 1
70025: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
70026: LD_EXP 47
70030: PUSH
70031: LD_EXP 51
70035: AND
70036: PUSH
70037: LD_OWVAR 65
70041: PUSH
70042: LD_INT 7
70044: LESS
70045: AND
70046: IFFALSE 70060
70048: GO 70050
70050: DISABLE
// begin enable ;
70051: ENABLE
// game_speed := 7 ;
70052: LD_ADDR_OWVAR 65
70056: PUSH
70057: LD_INT 7
70059: ST_TO_ADDR
// end ;
70060: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
70061: LD_EXP 47
70065: PUSH
70066: LD_EXP 54
70070: AND
70071: IFFALSE 70273
70073: GO 70075
70075: DISABLE
70076: LD_INT 0
70078: PPUSH
70079: PPUSH
70080: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
70081: LD_ADDR_VAR 0 3
70085: PUSH
70086: LD_INT 81
70088: PUSH
70089: LD_OWVAR 2
70093: PUSH
70094: EMPTY
70095: LIST
70096: LIST
70097: PUSH
70098: LD_INT 21
70100: PUSH
70101: LD_INT 1
70103: PUSH
70104: EMPTY
70105: LIST
70106: LIST
70107: PUSH
70108: EMPTY
70109: LIST
70110: LIST
70111: PPUSH
70112: CALL_OW 69
70116: ST_TO_ADDR
// if not tmp then
70117: LD_VAR 0 3
70121: NOT
70122: IFFALSE 70126
// exit ;
70124: GO 70273
// if tmp > 5 then
70126: LD_VAR 0 3
70130: PUSH
70131: LD_INT 5
70133: GREATER
70134: IFFALSE 70146
// k := 5 else
70136: LD_ADDR_VAR 0 2
70140: PUSH
70141: LD_INT 5
70143: ST_TO_ADDR
70144: GO 70156
// k := tmp ;
70146: LD_ADDR_VAR 0 2
70150: PUSH
70151: LD_VAR 0 3
70155: ST_TO_ADDR
// for i := 1 to k do
70156: LD_ADDR_VAR 0 1
70160: PUSH
70161: DOUBLE
70162: LD_INT 1
70164: DEC
70165: ST_TO_ADDR
70166: LD_VAR 0 2
70170: PUSH
70171: FOR_TO
70172: IFFALSE 70271
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
70174: LD_VAR 0 3
70178: PUSH
70179: LD_VAR 0 1
70183: ARRAY
70184: PPUSH
70185: LD_VAR 0 1
70189: PUSH
70190: LD_INT 4
70192: MOD
70193: PUSH
70194: LD_INT 1
70196: PLUS
70197: PPUSH
70198: CALL_OW 259
70202: PUSH
70203: LD_INT 10
70205: LESS
70206: IFFALSE 70269
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
70208: LD_VAR 0 3
70212: PUSH
70213: LD_VAR 0 1
70217: ARRAY
70218: PPUSH
70219: LD_VAR 0 1
70223: PUSH
70224: LD_INT 4
70226: MOD
70227: PUSH
70228: LD_INT 1
70230: PLUS
70231: PPUSH
70232: LD_VAR 0 3
70236: PUSH
70237: LD_VAR 0 1
70241: ARRAY
70242: PPUSH
70243: LD_VAR 0 1
70247: PUSH
70248: LD_INT 4
70250: MOD
70251: PUSH
70252: LD_INT 1
70254: PLUS
70255: PPUSH
70256: CALL_OW 259
70260: PUSH
70261: LD_INT 1
70263: PLUS
70264: PPUSH
70265: CALL_OW 237
70269: GO 70171
70271: POP
70272: POP
// end ;
70273: PPOPN 3
70275: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
70276: LD_EXP 47
70280: PUSH
70281: LD_EXP 55
70285: AND
70286: IFFALSE 70306
70288: GO 70290
70290: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
70291: LD_INT 4
70293: PPUSH
70294: LD_OWVAR 2
70298: PPUSH
70299: LD_INT 0
70301: PPUSH
70302: CALL_OW 324
70306: END
// every 0 0$1 trigger StreamModeActive and sShovel do
70307: LD_EXP 47
70311: PUSH
70312: LD_EXP 84
70316: AND
70317: IFFALSE 70337
70319: GO 70321
70321: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
70322: LD_INT 19
70324: PPUSH
70325: LD_OWVAR 2
70329: PPUSH
70330: LD_INT 0
70332: PPUSH
70333: CALL_OW 324
70337: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
70338: LD_EXP 47
70342: PUSH
70343: LD_EXP 56
70347: AND
70348: IFFALSE 70450
70350: GO 70352
70352: DISABLE
70353: LD_INT 0
70355: PPUSH
70356: PPUSH
// begin enable ;
70357: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
70358: LD_ADDR_VAR 0 2
70362: PUSH
70363: LD_INT 22
70365: PUSH
70366: LD_OWVAR 2
70370: PUSH
70371: EMPTY
70372: LIST
70373: LIST
70374: PUSH
70375: LD_INT 2
70377: PUSH
70378: LD_INT 34
70380: PUSH
70381: LD_INT 11
70383: PUSH
70384: EMPTY
70385: LIST
70386: LIST
70387: PUSH
70388: LD_INT 34
70390: PUSH
70391: LD_INT 30
70393: PUSH
70394: EMPTY
70395: LIST
70396: LIST
70397: PUSH
70398: EMPTY
70399: LIST
70400: LIST
70401: LIST
70402: PUSH
70403: EMPTY
70404: LIST
70405: LIST
70406: PPUSH
70407: CALL_OW 69
70411: ST_TO_ADDR
// if not tmp then
70412: LD_VAR 0 2
70416: NOT
70417: IFFALSE 70421
// exit ;
70419: GO 70450
// for i in tmp do
70421: LD_ADDR_VAR 0 1
70425: PUSH
70426: LD_VAR 0 2
70430: PUSH
70431: FOR_IN
70432: IFFALSE 70448
// begin SetLives ( i , 0 ) ;
70434: LD_VAR 0 1
70438: PPUSH
70439: LD_INT 0
70441: PPUSH
70442: CALL_OW 234
// end ;
70446: GO 70431
70448: POP
70449: POP
// end ;
70450: PPOPN 2
70452: END
// every 0 0$1 trigger StreamModeActive and sBunker do
70453: LD_EXP 47
70457: PUSH
70458: LD_EXP 57
70462: AND
70463: IFFALSE 70483
70465: GO 70467
70467: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
70468: LD_INT 32
70470: PPUSH
70471: LD_OWVAR 2
70475: PPUSH
70476: LD_INT 0
70478: PPUSH
70479: CALL_OW 324
70483: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
70484: LD_EXP 47
70488: PUSH
70489: LD_EXP 58
70493: AND
70494: IFFALSE 70675
70496: GO 70498
70498: DISABLE
70499: LD_INT 0
70501: PPUSH
70502: PPUSH
70503: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
70504: LD_ADDR_VAR 0 2
70508: PUSH
70509: LD_INT 22
70511: PUSH
70512: LD_OWVAR 2
70516: PUSH
70517: EMPTY
70518: LIST
70519: LIST
70520: PUSH
70521: LD_INT 33
70523: PUSH
70524: LD_INT 3
70526: PUSH
70527: EMPTY
70528: LIST
70529: LIST
70530: PUSH
70531: EMPTY
70532: LIST
70533: LIST
70534: PPUSH
70535: CALL_OW 69
70539: ST_TO_ADDR
// if not tmp then
70540: LD_VAR 0 2
70544: NOT
70545: IFFALSE 70549
// exit ;
70547: GO 70675
// side := 0 ;
70549: LD_ADDR_VAR 0 3
70553: PUSH
70554: LD_INT 0
70556: ST_TO_ADDR
// for i := 1 to 8 do
70557: LD_ADDR_VAR 0 1
70561: PUSH
70562: DOUBLE
70563: LD_INT 1
70565: DEC
70566: ST_TO_ADDR
70567: LD_INT 8
70569: PUSH
70570: FOR_TO
70571: IFFALSE 70619
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
70573: LD_OWVAR 2
70577: PUSH
70578: LD_VAR 0 1
70582: NONEQUAL
70583: PUSH
70584: LD_OWVAR 2
70588: PPUSH
70589: LD_VAR 0 1
70593: PPUSH
70594: CALL_OW 81
70598: PUSH
70599: LD_INT 2
70601: EQUAL
70602: AND
70603: IFFALSE 70617
// begin side := i ;
70605: LD_ADDR_VAR 0 3
70609: PUSH
70610: LD_VAR 0 1
70614: ST_TO_ADDR
// break ;
70615: GO 70619
// end ;
70617: GO 70570
70619: POP
70620: POP
// if not side then
70621: LD_VAR 0 3
70625: NOT
70626: IFFALSE 70630
// exit ;
70628: GO 70675
// for i := 1 to tmp do
70630: LD_ADDR_VAR 0 1
70634: PUSH
70635: DOUBLE
70636: LD_INT 1
70638: DEC
70639: ST_TO_ADDR
70640: LD_VAR 0 2
70644: PUSH
70645: FOR_TO
70646: IFFALSE 70673
// if Prob ( 60 ) then
70648: LD_INT 60
70650: PPUSH
70651: CALL_OW 13
70655: IFFALSE 70671
// SetSide ( i , side ) ;
70657: LD_VAR 0 1
70661: PPUSH
70662: LD_VAR 0 3
70666: PPUSH
70667: CALL_OW 235
70671: GO 70645
70673: POP
70674: POP
// end ;
70675: PPOPN 3
70677: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
70678: LD_EXP 47
70682: PUSH
70683: LD_EXP 60
70687: AND
70688: IFFALSE 70807
70690: GO 70692
70692: DISABLE
70693: LD_INT 0
70695: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
70696: LD_ADDR_VAR 0 1
70700: PUSH
70701: LD_INT 22
70703: PUSH
70704: LD_OWVAR 2
70708: PUSH
70709: EMPTY
70710: LIST
70711: LIST
70712: PUSH
70713: LD_INT 21
70715: PUSH
70716: LD_INT 1
70718: PUSH
70719: EMPTY
70720: LIST
70721: LIST
70722: PUSH
70723: LD_INT 3
70725: PUSH
70726: LD_INT 23
70728: PUSH
70729: LD_INT 0
70731: PUSH
70732: EMPTY
70733: LIST
70734: LIST
70735: PUSH
70736: EMPTY
70737: LIST
70738: LIST
70739: PUSH
70740: EMPTY
70741: LIST
70742: LIST
70743: LIST
70744: PPUSH
70745: CALL_OW 69
70749: PUSH
70750: FOR_IN
70751: IFFALSE 70805
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
70753: LD_VAR 0 1
70757: PPUSH
70758: CALL_OW 257
70762: PUSH
70763: LD_INT 1
70765: PUSH
70766: LD_INT 2
70768: PUSH
70769: LD_INT 3
70771: PUSH
70772: LD_INT 4
70774: PUSH
70775: EMPTY
70776: LIST
70777: LIST
70778: LIST
70779: LIST
70780: IN
70781: IFFALSE 70803
// SetClass ( un , rand ( 1 , 4 ) ) ;
70783: LD_VAR 0 1
70787: PPUSH
70788: LD_INT 1
70790: PPUSH
70791: LD_INT 4
70793: PPUSH
70794: CALL_OW 12
70798: PPUSH
70799: CALL_OW 336
70803: GO 70750
70805: POP
70806: POP
// end ;
70807: PPOPN 1
70809: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
70810: LD_EXP 47
70814: PUSH
70815: LD_EXP 59
70819: AND
70820: IFFALSE 70899
70822: GO 70824
70824: DISABLE
70825: LD_INT 0
70827: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
70828: LD_ADDR_VAR 0 1
70832: PUSH
70833: LD_INT 22
70835: PUSH
70836: LD_OWVAR 2
70840: PUSH
70841: EMPTY
70842: LIST
70843: LIST
70844: PUSH
70845: LD_INT 21
70847: PUSH
70848: LD_INT 3
70850: PUSH
70851: EMPTY
70852: LIST
70853: LIST
70854: PUSH
70855: EMPTY
70856: LIST
70857: LIST
70858: PPUSH
70859: CALL_OW 69
70863: ST_TO_ADDR
// if not tmp then
70864: LD_VAR 0 1
70868: NOT
70869: IFFALSE 70873
// exit ;
70871: GO 70899
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
70873: LD_VAR 0 1
70877: PUSH
70878: LD_INT 1
70880: PPUSH
70881: LD_VAR 0 1
70885: PPUSH
70886: CALL_OW 12
70890: ARRAY
70891: PPUSH
70892: LD_INT 100
70894: PPUSH
70895: CALL_OW 234
// end ;
70899: PPOPN 1
70901: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
70902: LD_EXP 47
70906: PUSH
70907: LD_EXP 61
70911: AND
70912: IFFALSE 71010
70914: GO 70916
70916: DISABLE
70917: LD_INT 0
70919: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
70920: LD_ADDR_VAR 0 1
70924: PUSH
70925: LD_INT 22
70927: PUSH
70928: LD_OWVAR 2
70932: PUSH
70933: EMPTY
70934: LIST
70935: LIST
70936: PUSH
70937: LD_INT 21
70939: PUSH
70940: LD_INT 1
70942: PUSH
70943: EMPTY
70944: LIST
70945: LIST
70946: PUSH
70947: EMPTY
70948: LIST
70949: LIST
70950: PPUSH
70951: CALL_OW 69
70955: ST_TO_ADDR
// if not tmp then
70956: LD_VAR 0 1
70960: NOT
70961: IFFALSE 70965
// exit ;
70963: GO 71010
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
70965: LD_VAR 0 1
70969: PUSH
70970: LD_INT 1
70972: PPUSH
70973: LD_VAR 0 1
70977: PPUSH
70978: CALL_OW 12
70982: ARRAY
70983: PPUSH
70984: LD_INT 1
70986: PPUSH
70987: LD_INT 4
70989: PPUSH
70990: CALL_OW 12
70994: PPUSH
70995: LD_INT 3000
70997: PPUSH
70998: LD_INT 9000
71000: PPUSH
71001: CALL_OW 12
71005: PPUSH
71006: CALL_OW 492
// end ;
71010: PPOPN 1
71012: END
// every 0 0$1 trigger StreamModeActive and sDepot do
71013: LD_EXP 47
71017: PUSH
71018: LD_EXP 62
71022: AND
71023: IFFALSE 71043
71025: GO 71027
71027: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
71028: LD_INT 1
71030: PPUSH
71031: LD_OWVAR 2
71035: PPUSH
71036: LD_INT 0
71038: PPUSH
71039: CALL_OW 324
71043: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
71044: LD_EXP 47
71048: PUSH
71049: LD_EXP 63
71053: AND
71054: IFFALSE 71137
71056: GO 71058
71058: DISABLE
71059: LD_INT 0
71061: PPUSH
71062: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
71063: LD_ADDR_VAR 0 2
71067: PUSH
71068: LD_INT 22
71070: PUSH
71071: LD_OWVAR 2
71075: PUSH
71076: EMPTY
71077: LIST
71078: LIST
71079: PUSH
71080: LD_INT 21
71082: PUSH
71083: LD_INT 3
71085: PUSH
71086: EMPTY
71087: LIST
71088: LIST
71089: PUSH
71090: EMPTY
71091: LIST
71092: LIST
71093: PPUSH
71094: CALL_OW 69
71098: ST_TO_ADDR
// if not tmp then
71099: LD_VAR 0 2
71103: NOT
71104: IFFALSE 71108
// exit ;
71106: GO 71137
// for i in tmp do
71108: LD_ADDR_VAR 0 1
71112: PUSH
71113: LD_VAR 0 2
71117: PUSH
71118: FOR_IN
71119: IFFALSE 71135
// SetBLevel ( i , 10 ) ;
71121: LD_VAR 0 1
71125: PPUSH
71126: LD_INT 10
71128: PPUSH
71129: CALL_OW 241
71133: GO 71118
71135: POP
71136: POP
// end ;
71137: PPOPN 2
71139: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
71140: LD_EXP 47
71144: PUSH
71145: LD_EXP 64
71149: AND
71150: IFFALSE 71261
71152: GO 71154
71154: DISABLE
71155: LD_INT 0
71157: PPUSH
71158: PPUSH
71159: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71160: LD_ADDR_VAR 0 3
71164: PUSH
71165: LD_INT 22
71167: PUSH
71168: LD_OWVAR 2
71172: PUSH
71173: EMPTY
71174: LIST
71175: LIST
71176: PUSH
71177: LD_INT 25
71179: PUSH
71180: LD_INT 1
71182: PUSH
71183: EMPTY
71184: LIST
71185: LIST
71186: PUSH
71187: EMPTY
71188: LIST
71189: LIST
71190: PPUSH
71191: CALL_OW 69
71195: ST_TO_ADDR
// if not tmp then
71196: LD_VAR 0 3
71200: NOT
71201: IFFALSE 71205
// exit ;
71203: GO 71261
// un := tmp [ rand ( 1 , tmp ) ] ;
71205: LD_ADDR_VAR 0 2
71209: PUSH
71210: LD_VAR 0 3
71214: PUSH
71215: LD_INT 1
71217: PPUSH
71218: LD_VAR 0 3
71222: PPUSH
71223: CALL_OW 12
71227: ARRAY
71228: ST_TO_ADDR
// if Crawls ( un ) then
71229: LD_VAR 0 2
71233: PPUSH
71234: CALL_OW 318
71238: IFFALSE 71249
// ComWalk ( un ) ;
71240: LD_VAR 0 2
71244: PPUSH
71245: CALL_OW 138
// SetClass ( un , class_sniper ) ;
71249: LD_VAR 0 2
71253: PPUSH
71254: LD_INT 5
71256: PPUSH
71257: CALL_OW 336
// end ;
71261: PPOPN 3
71263: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
71264: LD_EXP 47
71268: PUSH
71269: LD_EXP 65
71273: AND
71274: PUSH
71275: LD_OWVAR 67
71279: PUSH
71280: LD_INT 4
71282: LESS
71283: AND
71284: IFFALSE 71303
71286: GO 71288
71288: DISABLE
// begin Difficulty := Difficulty + 1 ;
71289: LD_ADDR_OWVAR 67
71293: PUSH
71294: LD_OWVAR 67
71298: PUSH
71299: LD_INT 1
71301: PLUS
71302: ST_TO_ADDR
// end ;
71303: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
71304: LD_EXP 47
71308: PUSH
71309: LD_EXP 66
71313: AND
71314: IFFALSE 71417
71316: GO 71318
71318: DISABLE
71319: LD_INT 0
71321: PPUSH
// begin for i := 1 to 5 do
71322: LD_ADDR_VAR 0 1
71326: PUSH
71327: DOUBLE
71328: LD_INT 1
71330: DEC
71331: ST_TO_ADDR
71332: LD_INT 5
71334: PUSH
71335: FOR_TO
71336: IFFALSE 71415
// begin uc_nation := nation_nature ;
71338: LD_ADDR_OWVAR 21
71342: PUSH
71343: LD_INT 0
71345: ST_TO_ADDR
// uc_side := 0 ;
71346: LD_ADDR_OWVAR 20
71350: PUSH
71351: LD_INT 0
71353: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
71354: LD_ADDR_OWVAR 29
71358: PUSH
71359: LD_INT 12
71361: PUSH
71362: LD_INT 12
71364: PUSH
71365: EMPTY
71366: LIST
71367: LIST
71368: ST_TO_ADDR
// hc_agressivity := 20 ;
71369: LD_ADDR_OWVAR 35
71373: PUSH
71374: LD_INT 20
71376: ST_TO_ADDR
// hc_class := class_tiger ;
71377: LD_ADDR_OWVAR 28
71381: PUSH
71382: LD_INT 14
71384: ST_TO_ADDR
// hc_gallery :=  ;
71385: LD_ADDR_OWVAR 33
71389: PUSH
71390: LD_STRING 
71392: ST_TO_ADDR
// hc_name :=  ;
71393: LD_ADDR_OWVAR 26
71397: PUSH
71398: LD_STRING 
71400: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
71401: CALL_OW 44
71405: PPUSH
71406: LD_INT 0
71408: PPUSH
71409: CALL_OW 51
// end ;
71413: GO 71335
71415: POP
71416: POP
// end ;
71417: PPOPN 1
71419: END
// every 0 0$1 trigger StreamModeActive and sBomb do
71420: LD_EXP 47
71424: PUSH
71425: LD_EXP 67
71429: AND
71430: IFFALSE 71439
71432: GO 71434
71434: DISABLE
// StreamSibBomb ;
71435: CALL 71440 0 0
71439: END
// export function StreamSibBomb ; var i , x , y ; begin
71440: LD_INT 0
71442: PPUSH
71443: PPUSH
71444: PPUSH
71445: PPUSH
// result := false ;
71446: LD_ADDR_VAR 0 1
71450: PUSH
71451: LD_INT 0
71453: ST_TO_ADDR
// for i := 1 to 16 do
71454: LD_ADDR_VAR 0 2
71458: PUSH
71459: DOUBLE
71460: LD_INT 1
71462: DEC
71463: ST_TO_ADDR
71464: LD_INT 16
71466: PUSH
71467: FOR_TO
71468: IFFALSE 71667
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
71470: LD_ADDR_VAR 0 3
71474: PUSH
71475: LD_INT 10
71477: PUSH
71478: LD_INT 20
71480: PUSH
71481: LD_INT 30
71483: PUSH
71484: LD_INT 40
71486: PUSH
71487: LD_INT 50
71489: PUSH
71490: LD_INT 60
71492: PUSH
71493: LD_INT 70
71495: PUSH
71496: LD_INT 80
71498: PUSH
71499: LD_INT 90
71501: PUSH
71502: LD_INT 100
71504: PUSH
71505: LD_INT 110
71507: PUSH
71508: LD_INT 120
71510: PUSH
71511: LD_INT 130
71513: PUSH
71514: LD_INT 140
71516: PUSH
71517: LD_INT 150
71519: PUSH
71520: EMPTY
71521: LIST
71522: LIST
71523: LIST
71524: LIST
71525: LIST
71526: LIST
71527: LIST
71528: LIST
71529: LIST
71530: LIST
71531: LIST
71532: LIST
71533: LIST
71534: LIST
71535: LIST
71536: PUSH
71537: LD_INT 1
71539: PPUSH
71540: LD_INT 15
71542: PPUSH
71543: CALL_OW 12
71547: ARRAY
71548: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
71549: LD_ADDR_VAR 0 4
71553: PUSH
71554: LD_INT 10
71556: PUSH
71557: LD_INT 20
71559: PUSH
71560: LD_INT 30
71562: PUSH
71563: LD_INT 40
71565: PUSH
71566: LD_INT 50
71568: PUSH
71569: LD_INT 60
71571: PUSH
71572: LD_INT 70
71574: PUSH
71575: LD_INT 80
71577: PUSH
71578: LD_INT 90
71580: PUSH
71581: LD_INT 100
71583: PUSH
71584: LD_INT 110
71586: PUSH
71587: LD_INT 120
71589: PUSH
71590: LD_INT 130
71592: PUSH
71593: LD_INT 140
71595: PUSH
71596: LD_INT 150
71598: PUSH
71599: EMPTY
71600: LIST
71601: LIST
71602: LIST
71603: LIST
71604: LIST
71605: LIST
71606: LIST
71607: LIST
71608: LIST
71609: LIST
71610: LIST
71611: LIST
71612: LIST
71613: LIST
71614: LIST
71615: PUSH
71616: LD_INT 1
71618: PPUSH
71619: LD_INT 15
71621: PPUSH
71622: CALL_OW 12
71626: ARRAY
71627: ST_TO_ADDR
// if ValidHex ( x , y ) then
71628: LD_VAR 0 3
71632: PPUSH
71633: LD_VAR 0 4
71637: PPUSH
71638: CALL_OW 488
71642: IFFALSE 71665
// begin result := [ x , y ] ;
71644: LD_ADDR_VAR 0 1
71648: PUSH
71649: LD_VAR 0 3
71653: PUSH
71654: LD_VAR 0 4
71658: PUSH
71659: EMPTY
71660: LIST
71661: LIST
71662: ST_TO_ADDR
// break ;
71663: GO 71667
// end ; end ;
71665: GO 71467
71667: POP
71668: POP
// if result then
71669: LD_VAR 0 1
71673: IFFALSE 71733
// begin ToLua ( playSibBomb() ) ;
71675: LD_STRING playSibBomb()
71677: PPUSH
71678: CALL_OW 559
// wait ( 0 0$14 ) ;
71682: LD_INT 490
71684: PPUSH
71685: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
71689: LD_VAR 0 1
71693: PUSH
71694: LD_INT 1
71696: ARRAY
71697: PPUSH
71698: LD_VAR 0 1
71702: PUSH
71703: LD_INT 2
71705: ARRAY
71706: PPUSH
71707: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
71711: LD_VAR 0 1
71715: PUSH
71716: LD_INT 1
71718: ARRAY
71719: PPUSH
71720: LD_VAR 0 1
71724: PUSH
71725: LD_INT 2
71727: ARRAY
71728: PPUSH
71729: CALL_OW 429
// end ; end ;
71733: LD_VAR 0 1
71737: RET
// every 0 0$1 trigger StreamModeActive and sReset do
71738: LD_EXP 47
71742: PUSH
71743: LD_EXP 69
71747: AND
71748: IFFALSE 71760
71750: GO 71752
71752: DISABLE
// YouLost (  ) ;
71753: LD_STRING 
71755: PPUSH
71756: CALL_OW 104
71760: END
// every 0 0$1 trigger StreamModeActive and sFog do
71761: LD_EXP 47
71765: PUSH
71766: LD_EXP 68
71770: AND
71771: IFFALSE 71785
71773: GO 71775
71775: DISABLE
// FogOff ( your_side ) ;
71776: LD_OWVAR 2
71780: PPUSH
71781: CALL_OW 344
71785: END
// every 0 0$1 trigger StreamModeActive and sSun do
71786: LD_EXP 47
71790: PUSH
71791: LD_EXP 70
71795: AND
71796: IFFALSE 71824
71798: GO 71800
71800: DISABLE
// begin solar_recharge_percent := 0 ;
71801: LD_ADDR_OWVAR 79
71805: PUSH
71806: LD_INT 0
71808: ST_TO_ADDR
// wait ( 5 5$00 ) ;
71809: LD_INT 10500
71811: PPUSH
71812: CALL_OW 67
// solar_recharge_percent := 100 ;
71816: LD_ADDR_OWVAR 79
71820: PUSH
71821: LD_INT 100
71823: ST_TO_ADDR
// end ;
71824: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
71825: LD_EXP 47
71829: PUSH
71830: LD_EXP 71
71834: AND
71835: IFFALSE 72074
71837: GO 71839
71839: DISABLE
71840: LD_INT 0
71842: PPUSH
71843: PPUSH
71844: PPUSH
// begin tmp := [ ] ;
71845: LD_ADDR_VAR 0 3
71849: PUSH
71850: EMPTY
71851: ST_TO_ADDR
// for i := 1 to 6 do
71852: LD_ADDR_VAR 0 1
71856: PUSH
71857: DOUBLE
71858: LD_INT 1
71860: DEC
71861: ST_TO_ADDR
71862: LD_INT 6
71864: PUSH
71865: FOR_TO
71866: IFFALSE 71971
// begin uc_nation := nation_nature ;
71868: LD_ADDR_OWVAR 21
71872: PUSH
71873: LD_INT 0
71875: ST_TO_ADDR
// uc_side := 0 ;
71876: LD_ADDR_OWVAR 20
71880: PUSH
71881: LD_INT 0
71883: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
71884: LD_ADDR_OWVAR 29
71888: PUSH
71889: LD_INT 12
71891: PUSH
71892: LD_INT 12
71894: PUSH
71895: EMPTY
71896: LIST
71897: LIST
71898: ST_TO_ADDR
// hc_agressivity := 20 ;
71899: LD_ADDR_OWVAR 35
71903: PUSH
71904: LD_INT 20
71906: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
71907: LD_ADDR_OWVAR 28
71911: PUSH
71912: LD_INT 17
71914: ST_TO_ADDR
// hc_gallery :=  ;
71915: LD_ADDR_OWVAR 33
71919: PUSH
71920: LD_STRING 
71922: ST_TO_ADDR
// hc_name :=  ;
71923: LD_ADDR_OWVAR 26
71927: PUSH
71928: LD_STRING 
71930: ST_TO_ADDR
// un := CreateHuman ;
71931: LD_ADDR_VAR 0 2
71935: PUSH
71936: CALL_OW 44
71940: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
71941: LD_VAR 0 2
71945: PPUSH
71946: LD_INT 1
71948: PPUSH
71949: CALL_OW 51
// tmp := tmp ^ un ;
71953: LD_ADDR_VAR 0 3
71957: PUSH
71958: LD_VAR 0 3
71962: PUSH
71963: LD_VAR 0 2
71967: ADD
71968: ST_TO_ADDR
// end ;
71969: GO 71865
71971: POP
71972: POP
// repeat wait ( 0 0$1 ) ;
71973: LD_INT 35
71975: PPUSH
71976: CALL_OW 67
// for un in tmp do
71980: LD_ADDR_VAR 0 2
71984: PUSH
71985: LD_VAR 0 3
71989: PUSH
71990: FOR_IN
71991: IFFALSE 72065
// begin if IsDead ( un ) then
71993: LD_VAR 0 2
71997: PPUSH
71998: CALL_OW 301
72002: IFFALSE 72022
// begin tmp := tmp diff un ;
72004: LD_ADDR_VAR 0 3
72008: PUSH
72009: LD_VAR 0 3
72013: PUSH
72014: LD_VAR 0 2
72018: DIFF
72019: ST_TO_ADDR
// continue ;
72020: GO 71990
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
72022: LD_VAR 0 2
72026: PPUSH
72027: LD_INT 3
72029: PUSH
72030: LD_INT 22
72032: PUSH
72033: LD_INT 0
72035: PUSH
72036: EMPTY
72037: LIST
72038: LIST
72039: PUSH
72040: EMPTY
72041: LIST
72042: LIST
72043: PPUSH
72044: CALL_OW 69
72048: PPUSH
72049: LD_VAR 0 2
72053: PPUSH
72054: CALL_OW 74
72058: PPUSH
72059: CALL_OW 115
// end ;
72063: GO 71990
72065: POP
72066: POP
// until not tmp ;
72067: LD_VAR 0 3
72071: NOT
72072: IFFALSE 71973
// end ;
72074: PPOPN 3
72076: END
// every 0 0$1 trigger StreamModeActive and sTroll do
72077: LD_EXP 47
72081: PUSH
72082: LD_EXP 72
72086: AND
72087: IFFALSE 72141
72089: GO 72091
72091: DISABLE
// begin ToLua ( displayTroll(); ) ;
72092: LD_STRING displayTroll();
72094: PPUSH
72095: CALL_OW 559
// wait ( 3 3$00 ) ;
72099: LD_INT 6300
72101: PPUSH
72102: CALL_OW 67
// ToLua ( hideTroll(); ) ;
72106: LD_STRING hideTroll();
72108: PPUSH
72109: CALL_OW 559
// wait ( 1 1$00 ) ;
72113: LD_INT 2100
72115: PPUSH
72116: CALL_OW 67
// ToLua ( displayTroll(); ) ;
72120: LD_STRING displayTroll();
72122: PPUSH
72123: CALL_OW 559
// wait ( 1 1$00 ) ;
72127: LD_INT 2100
72129: PPUSH
72130: CALL_OW 67
// ToLua ( hideTroll(); ) ;
72134: LD_STRING hideTroll();
72136: PPUSH
72137: CALL_OW 559
// end ;
72141: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
72142: LD_EXP 47
72146: PUSH
72147: LD_EXP 73
72151: AND
72152: IFFALSE 72215
72154: GO 72156
72156: DISABLE
72157: LD_INT 0
72159: PPUSH
// begin p := 0 ;
72160: LD_ADDR_VAR 0 1
72164: PUSH
72165: LD_INT 0
72167: ST_TO_ADDR
// repeat game_speed := 1 ;
72168: LD_ADDR_OWVAR 65
72172: PUSH
72173: LD_INT 1
72175: ST_TO_ADDR
// wait ( 0 0$1 ) ;
72176: LD_INT 35
72178: PPUSH
72179: CALL_OW 67
// p := p + 1 ;
72183: LD_ADDR_VAR 0 1
72187: PUSH
72188: LD_VAR 0 1
72192: PUSH
72193: LD_INT 1
72195: PLUS
72196: ST_TO_ADDR
// until p >= 60 ;
72197: LD_VAR 0 1
72201: PUSH
72202: LD_INT 60
72204: GREATEREQUAL
72205: IFFALSE 72168
// game_speed := 4 ;
72207: LD_ADDR_OWVAR 65
72211: PUSH
72212: LD_INT 4
72214: ST_TO_ADDR
// end ;
72215: PPOPN 1
72217: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
72218: LD_EXP 47
72222: PUSH
72223: LD_EXP 74
72227: AND
72228: IFFALSE 72374
72230: GO 72232
72232: DISABLE
72233: LD_INT 0
72235: PPUSH
72236: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
72237: LD_ADDR_VAR 0 1
72241: PUSH
72242: LD_INT 22
72244: PUSH
72245: LD_OWVAR 2
72249: PUSH
72250: EMPTY
72251: LIST
72252: LIST
72253: PUSH
72254: LD_INT 2
72256: PUSH
72257: LD_INT 30
72259: PUSH
72260: LD_INT 0
72262: PUSH
72263: EMPTY
72264: LIST
72265: LIST
72266: PUSH
72267: LD_INT 30
72269: PUSH
72270: LD_INT 1
72272: PUSH
72273: EMPTY
72274: LIST
72275: LIST
72276: PUSH
72277: EMPTY
72278: LIST
72279: LIST
72280: LIST
72281: PUSH
72282: EMPTY
72283: LIST
72284: LIST
72285: PPUSH
72286: CALL_OW 69
72290: ST_TO_ADDR
// if not depot then
72291: LD_VAR 0 1
72295: NOT
72296: IFFALSE 72300
// exit ;
72298: GO 72374
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
72300: LD_ADDR_VAR 0 2
72304: PUSH
72305: LD_VAR 0 1
72309: PUSH
72310: LD_INT 1
72312: PPUSH
72313: LD_VAR 0 1
72317: PPUSH
72318: CALL_OW 12
72322: ARRAY
72323: PPUSH
72324: CALL_OW 274
72328: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
72329: LD_VAR 0 2
72333: PPUSH
72334: LD_INT 1
72336: PPUSH
72337: LD_INT 0
72339: PPUSH
72340: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
72344: LD_VAR 0 2
72348: PPUSH
72349: LD_INT 2
72351: PPUSH
72352: LD_INT 0
72354: PPUSH
72355: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
72359: LD_VAR 0 2
72363: PPUSH
72364: LD_INT 3
72366: PPUSH
72367: LD_INT 0
72369: PPUSH
72370: CALL_OW 277
// end ;
72374: PPOPN 2
72376: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
72377: LD_EXP 47
72381: PUSH
72382: LD_EXP 75
72386: AND
72387: IFFALSE 72484
72389: GO 72391
72391: DISABLE
72392: LD_INT 0
72394: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
72395: LD_ADDR_VAR 0 1
72399: PUSH
72400: LD_INT 22
72402: PUSH
72403: LD_OWVAR 2
72407: PUSH
72408: EMPTY
72409: LIST
72410: LIST
72411: PUSH
72412: LD_INT 21
72414: PUSH
72415: LD_INT 1
72417: PUSH
72418: EMPTY
72419: LIST
72420: LIST
72421: PUSH
72422: LD_INT 3
72424: PUSH
72425: LD_INT 23
72427: PUSH
72428: LD_INT 0
72430: PUSH
72431: EMPTY
72432: LIST
72433: LIST
72434: PUSH
72435: EMPTY
72436: LIST
72437: LIST
72438: PUSH
72439: EMPTY
72440: LIST
72441: LIST
72442: LIST
72443: PPUSH
72444: CALL_OW 69
72448: ST_TO_ADDR
// if not tmp then
72449: LD_VAR 0 1
72453: NOT
72454: IFFALSE 72458
// exit ;
72456: GO 72484
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
72458: LD_VAR 0 1
72462: PUSH
72463: LD_INT 1
72465: PPUSH
72466: LD_VAR 0 1
72470: PPUSH
72471: CALL_OW 12
72475: ARRAY
72476: PPUSH
72477: LD_INT 200
72479: PPUSH
72480: CALL_OW 234
// end ;
72484: PPOPN 1
72486: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
72487: LD_EXP 47
72491: PUSH
72492: LD_EXP 76
72496: AND
72497: IFFALSE 72576
72499: GO 72501
72501: DISABLE
72502: LD_INT 0
72504: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
72505: LD_ADDR_VAR 0 1
72509: PUSH
72510: LD_INT 22
72512: PUSH
72513: LD_OWVAR 2
72517: PUSH
72518: EMPTY
72519: LIST
72520: LIST
72521: PUSH
72522: LD_INT 21
72524: PUSH
72525: LD_INT 2
72527: PUSH
72528: EMPTY
72529: LIST
72530: LIST
72531: PUSH
72532: EMPTY
72533: LIST
72534: LIST
72535: PPUSH
72536: CALL_OW 69
72540: ST_TO_ADDR
// if not tmp then
72541: LD_VAR 0 1
72545: NOT
72546: IFFALSE 72550
// exit ;
72548: GO 72576
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
72550: LD_VAR 0 1
72554: PUSH
72555: LD_INT 1
72557: PPUSH
72558: LD_VAR 0 1
72562: PPUSH
72563: CALL_OW 12
72567: ARRAY
72568: PPUSH
72569: LD_INT 60
72571: PPUSH
72572: CALL_OW 234
// end ;
72576: PPOPN 1
72578: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
72579: LD_EXP 47
72583: PUSH
72584: LD_EXP 77
72588: AND
72589: IFFALSE 72688
72591: GO 72593
72593: DISABLE
72594: LD_INT 0
72596: PPUSH
72597: PPUSH
// begin enable ;
72598: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
72599: LD_ADDR_VAR 0 1
72603: PUSH
72604: LD_INT 22
72606: PUSH
72607: LD_OWVAR 2
72611: PUSH
72612: EMPTY
72613: LIST
72614: LIST
72615: PUSH
72616: LD_INT 61
72618: PUSH
72619: EMPTY
72620: LIST
72621: PUSH
72622: LD_INT 33
72624: PUSH
72625: LD_INT 2
72627: PUSH
72628: EMPTY
72629: LIST
72630: LIST
72631: PUSH
72632: EMPTY
72633: LIST
72634: LIST
72635: LIST
72636: PPUSH
72637: CALL_OW 69
72641: ST_TO_ADDR
// if not tmp then
72642: LD_VAR 0 1
72646: NOT
72647: IFFALSE 72651
// exit ;
72649: GO 72688
// for i in tmp do
72651: LD_ADDR_VAR 0 2
72655: PUSH
72656: LD_VAR 0 1
72660: PUSH
72661: FOR_IN
72662: IFFALSE 72686
// if IsControledBy ( i ) then
72664: LD_VAR 0 2
72668: PPUSH
72669: CALL_OW 312
72673: IFFALSE 72684
// ComUnlink ( i ) ;
72675: LD_VAR 0 2
72679: PPUSH
72680: CALL_OW 136
72684: GO 72661
72686: POP
72687: POP
// end ;
72688: PPOPN 2
72690: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
72691: LD_EXP 47
72695: PUSH
72696: LD_EXP 78
72700: AND
72701: IFFALSE 72841
72703: GO 72705
72705: DISABLE
72706: LD_INT 0
72708: PPUSH
72709: PPUSH
// begin ToLua ( displayPowell(); ) ;
72710: LD_STRING displayPowell();
72712: PPUSH
72713: CALL_OW 559
// uc_side := 0 ;
72717: LD_ADDR_OWVAR 20
72721: PUSH
72722: LD_INT 0
72724: ST_TO_ADDR
// uc_nation := 2 ;
72725: LD_ADDR_OWVAR 21
72729: PUSH
72730: LD_INT 2
72732: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
72733: LD_ADDR_OWVAR 37
72737: PUSH
72738: LD_INT 14
72740: ST_TO_ADDR
// vc_engine := engine_siberite ;
72741: LD_ADDR_OWVAR 39
72745: PUSH
72746: LD_INT 3
72748: ST_TO_ADDR
// vc_control := control_apeman ;
72749: LD_ADDR_OWVAR 38
72753: PUSH
72754: LD_INT 5
72756: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
72757: LD_ADDR_OWVAR 40
72761: PUSH
72762: LD_INT 29
72764: ST_TO_ADDR
// un := CreateVehicle ;
72765: LD_ADDR_VAR 0 2
72769: PUSH
72770: CALL_OW 45
72774: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
72775: LD_VAR 0 2
72779: PPUSH
72780: LD_INT 1
72782: PPUSH
72783: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
72787: LD_INT 35
72789: PPUSH
72790: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
72794: LD_VAR 0 2
72798: PPUSH
72799: LD_INT 22
72801: PUSH
72802: LD_OWVAR 2
72806: PUSH
72807: EMPTY
72808: LIST
72809: LIST
72810: PPUSH
72811: CALL_OW 69
72815: PPUSH
72816: LD_VAR 0 2
72820: PPUSH
72821: CALL_OW 74
72825: PPUSH
72826: CALL_OW 115
// until IsDead ( un ) ;
72830: LD_VAR 0 2
72834: PPUSH
72835: CALL_OW 301
72839: IFFALSE 72787
// end ;
72841: PPOPN 2
72843: END
// every 0 0$1 trigger StreamModeActive and sStu do
72844: LD_EXP 47
72848: PUSH
72849: LD_EXP 86
72853: AND
72854: IFFALSE 72870
72856: GO 72858
72858: DISABLE
// begin ToLua ( displayStucuk(); ) ;
72859: LD_STRING displayStucuk();
72861: PPUSH
72862: CALL_OW 559
// ResetFog ;
72866: CALL_OW 335
// end ;
72870: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
72871: LD_EXP 47
72875: PUSH
72876: LD_EXP 79
72880: AND
72881: IFFALSE 73022
72883: GO 72885
72885: DISABLE
72886: LD_INT 0
72888: PPUSH
72889: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
72890: LD_ADDR_VAR 0 2
72894: PUSH
72895: LD_INT 22
72897: PUSH
72898: LD_OWVAR 2
72902: PUSH
72903: EMPTY
72904: LIST
72905: LIST
72906: PUSH
72907: LD_INT 21
72909: PUSH
72910: LD_INT 1
72912: PUSH
72913: EMPTY
72914: LIST
72915: LIST
72916: PUSH
72917: EMPTY
72918: LIST
72919: LIST
72920: PPUSH
72921: CALL_OW 69
72925: ST_TO_ADDR
// if not tmp then
72926: LD_VAR 0 2
72930: NOT
72931: IFFALSE 72935
// exit ;
72933: GO 73022
// un := tmp [ rand ( 1 , tmp ) ] ;
72935: LD_ADDR_VAR 0 1
72939: PUSH
72940: LD_VAR 0 2
72944: PUSH
72945: LD_INT 1
72947: PPUSH
72948: LD_VAR 0 2
72952: PPUSH
72953: CALL_OW 12
72957: ARRAY
72958: ST_TO_ADDR
// SetSide ( un , 0 ) ;
72959: LD_VAR 0 1
72963: PPUSH
72964: LD_INT 0
72966: PPUSH
72967: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
72971: LD_VAR 0 1
72975: PPUSH
72976: LD_OWVAR 3
72980: PUSH
72981: LD_VAR 0 1
72985: DIFF
72986: PPUSH
72987: LD_VAR 0 1
72991: PPUSH
72992: CALL_OW 74
72996: PPUSH
72997: CALL_OW 115
// wait ( 0 0$20 ) ;
73001: LD_INT 700
73003: PPUSH
73004: CALL_OW 67
// SetSide ( un , your_side ) ;
73008: LD_VAR 0 1
73012: PPUSH
73013: LD_OWVAR 2
73017: PPUSH
73018: CALL_OW 235
// end ;
73022: PPOPN 2
73024: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
73025: LD_EXP 47
73029: PUSH
73030: LD_EXP 80
73034: AND
73035: IFFALSE 73141
73037: GO 73039
73039: DISABLE
73040: LD_INT 0
73042: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
73043: LD_ADDR_VAR 0 1
73047: PUSH
73048: LD_INT 22
73050: PUSH
73051: LD_OWVAR 2
73055: PUSH
73056: EMPTY
73057: LIST
73058: LIST
73059: PUSH
73060: LD_INT 2
73062: PUSH
73063: LD_INT 30
73065: PUSH
73066: LD_INT 0
73068: PUSH
73069: EMPTY
73070: LIST
73071: LIST
73072: PUSH
73073: LD_INT 30
73075: PUSH
73076: LD_INT 1
73078: PUSH
73079: EMPTY
73080: LIST
73081: LIST
73082: PUSH
73083: EMPTY
73084: LIST
73085: LIST
73086: LIST
73087: PUSH
73088: EMPTY
73089: LIST
73090: LIST
73091: PPUSH
73092: CALL_OW 69
73096: ST_TO_ADDR
// if not depot then
73097: LD_VAR 0 1
73101: NOT
73102: IFFALSE 73106
// exit ;
73104: GO 73141
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
73106: LD_VAR 0 1
73110: PUSH
73111: LD_INT 1
73113: ARRAY
73114: PPUSH
73115: CALL_OW 250
73119: PPUSH
73120: LD_VAR 0 1
73124: PUSH
73125: LD_INT 1
73127: ARRAY
73128: PPUSH
73129: CALL_OW 251
73133: PPUSH
73134: LD_INT 70
73136: PPUSH
73137: CALL_OW 495
// end ;
73141: PPOPN 1
73143: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
73144: LD_EXP 47
73148: PUSH
73149: LD_EXP 81
73153: AND
73154: IFFALSE 73365
73156: GO 73158
73158: DISABLE
73159: LD_INT 0
73161: PPUSH
73162: PPUSH
73163: PPUSH
73164: PPUSH
73165: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
73166: LD_ADDR_VAR 0 5
73170: PUSH
73171: LD_INT 22
73173: PUSH
73174: LD_OWVAR 2
73178: PUSH
73179: EMPTY
73180: LIST
73181: LIST
73182: PUSH
73183: LD_INT 21
73185: PUSH
73186: LD_INT 1
73188: PUSH
73189: EMPTY
73190: LIST
73191: LIST
73192: PUSH
73193: EMPTY
73194: LIST
73195: LIST
73196: PPUSH
73197: CALL_OW 69
73201: ST_TO_ADDR
// if not tmp then
73202: LD_VAR 0 5
73206: NOT
73207: IFFALSE 73211
// exit ;
73209: GO 73365
// for i in tmp do
73211: LD_ADDR_VAR 0 1
73215: PUSH
73216: LD_VAR 0 5
73220: PUSH
73221: FOR_IN
73222: IFFALSE 73363
// begin d := rand ( 0 , 5 ) ;
73224: LD_ADDR_VAR 0 4
73228: PUSH
73229: LD_INT 0
73231: PPUSH
73232: LD_INT 5
73234: PPUSH
73235: CALL_OW 12
73239: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
73240: LD_ADDR_VAR 0 2
73244: PUSH
73245: LD_VAR 0 1
73249: PPUSH
73250: CALL_OW 250
73254: PPUSH
73255: LD_VAR 0 4
73259: PPUSH
73260: LD_INT 3
73262: PPUSH
73263: LD_INT 12
73265: PPUSH
73266: CALL_OW 12
73270: PPUSH
73271: CALL_OW 272
73275: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
73276: LD_ADDR_VAR 0 3
73280: PUSH
73281: LD_VAR 0 1
73285: PPUSH
73286: CALL_OW 251
73290: PPUSH
73291: LD_VAR 0 4
73295: PPUSH
73296: LD_INT 3
73298: PPUSH
73299: LD_INT 12
73301: PPUSH
73302: CALL_OW 12
73306: PPUSH
73307: CALL_OW 273
73311: ST_TO_ADDR
// if ValidHex ( x , y ) then
73312: LD_VAR 0 2
73316: PPUSH
73317: LD_VAR 0 3
73321: PPUSH
73322: CALL_OW 488
73326: IFFALSE 73361
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
73328: LD_VAR 0 1
73332: PPUSH
73333: LD_VAR 0 2
73337: PPUSH
73338: LD_VAR 0 3
73342: PPUSH
73343: LD_INT 3
73345: PPUSH
73346: LD_INT 6
73348: PPUSH
73349: CALL_OW 12
73353: PPUSH
73354: LD_INT 1
73356: PPUSH
73357: CALL_OW 483
// end ;
73361: GO 73221
73363: POP
73364: POP
// end ;
73365: PPOPN 5
73367: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
73368: LD_EXP 47
73372: PUSH
73373: LD_EXP 82
73377: AND
73378: IFFALSE 73472
73380: GO 73382
73382: DISABLE
73383: LD_INT 0
73385: PPUSH
73386: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
73387: LD_ADDR_VAR 0 2
73391: PUSH
73392: LD_INT 22
73394: PUSH
73395: LD_OWVAR 2
73399: PUSH
73400: EMPTY
73401: LIST
73402: LIST
73403: PUSH
73404: LD_INT 32
73406: PUSH
73407: LD_INT 1
73409: PUSH
73410: EMPTY
73411: LIST
73412: LIST
73413: PUSH
73414: LD_INT 21
73416: PUSH
73417: LD_INT 2
73419: PUSH
73420: EMPTY
73421: LIST
73422: LIST
73423: PUSH
73424: EMPTY
73425: LIST
73426: LIST
73427: LIST
73428: PPUSH
73429: CALL_OW 69
73433: ST_TO_ADDR
// if not tmp then
73434: LD_VAR 0 2
73438: NOT
73439: IFFALSE 73443
// exit ;
73441: GO 73472
// for i in tmp do
73443: LD_ADDR_VAR 0 1
73447: PUSH
73448: LD_VAR 0 2
73452: PUSH
73453: FOR_IN
73454: IFFALSE 73470
// SetFuel ( i , 0 ) ;
73456: LD_VAR 0 1
73460: PPUSH
73461: LD_INT 0
73463: PPUSH
73464: CALL_OW 240
73468: GO 73453
73470: POP
73471: POP
// end ;
73472: PPOPN 2
73474: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
73475: LD_EXP 47
73479: PUSH
73480: LD_EXP 83
73484: AND
73485: IFFALSE 73551
73487: GO 73489
73489: DISABLE
73490: LD_INT 0
73492: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
73493: LD_ADDR_VAR 0 1
73497: PUSH
73498: LD_INT 22
73500: PUSH
73501: LD_OWVAR 2
73505: PUSH
73506: EMPTY
73507: LIST
73508: LIST
73509: PUSH
73510: LD_INT 30
73512: PUSH
73513: LD_INT 29
73515: PUSH
73516: EMPTY
73517: LIST
73518: LIST
73519: PUSH
73520: EMPTY
73521: LIST
73522: LIST
73523: PPUSH
73524: CALL_OW 69
73528: ST_TO_ADDR
// if not tmp then
73529: LD_VAR 0 1
73533: NOT
73534: IFFALSE 73538
// exit ;
73536: GO 73551
// DestroyUnit ( tmp [ 1 ] ) ;
73538: LD_VAR 0 1
73542: PUSH
73543: LD_INT 1
73545: ARRAY
73546: PPUSH
73547: CALL_OW 65
// end ;
73551: PPOPN 1
73553: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
73554: LD_EXP 47
73558: PUSH
73559: LD_EXP 85
73563: AND
73564: IFFALSE 73693
73566: GO 73568
73568: DISABLE
73569: LD_INT 0
73571: PPUSH
// begin uc_side := 0 ;
73572: LD_ADDR_OWVAR 20
73576: PUSH
73577: LD_INT 0
73579: ST_TO_ADDR
// uc_nation := nation_arabian ;
73580: LD_ADDR_OWVAR 21
73584: PUSH
73585: LD_INT 2
73587: ST_TO_ADDR
// hc_gallery :=  ;
73588: LD_ADDR_OWVAR 33
73592: PUSH
73593: LD_STRING 
73595: ST_TO_ADDR
// hc_name :=  ;
73596: LD_ADDR_OWVAR 26
73600: PUSH
73601: LD_STRING 
73603: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
73604: LD_INT 1
73606: PPUSH
73607: LD_INT 11
73609: PPUSH
73610: LD_INT 10
73612: PPUSH
73613: CALL_OW 380
// un := CreateHuman ;
73617: LD_ADDR_VAR 0 1
73621: PUSH
73622: CALL_OW 44
73626: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
73627: LD_VAR 0 1
73631: PPUSH
73632: LD_INT 1
73634: PPUSH
73635: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
73639: LD_INT 35
73641: PPUSH
73642: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
73646: LD_VAR 0 1
73650: PPUSH
73651: LD_INT 22
73653: PUSH
73654: LD_OWVAR 2
73658: PUSH
73659: EMPTY
73660: LIST
73661: LIST
73662: PPUSH
73663: CALL_OW 69
73667: PPUSH
73668: LD_VAR 0 1
73672: PPUSH
73673: CALL_OW 74
73677: PPUSH
73678: CALL_OW 115
// until IsDead ( un ) ;
73682: LD_VAR 0 1
73686: PPUSH
73687: CALL_OW 301
73691: IFFALSE 73639
// end ;
73693: PPOPN 1
73695: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
73696: LD_EXP 47
73700: PUSH
73701: LD_EXP 87
73705: AND
73706: IFFALSE 73718
73708: GO 73710
73710: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
73711: LD_STRING earthquake(getX(game), 0, 32)
73713: PPUSH
73714: CALL_OW 559
73718: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
73719: LD_EXP 47
73723: PUSH
73724: LD_EXP 88
73728: AND
73729: IFFALSE 73820
73731: GO 73733
73733: DISABLE
73734: LD_INT 0
73736: PPUSH
// begin enable ;
73737: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
73738: LD_ADDR_VAR 0 1
73742: PUSH
73743: LD_INT 22
73745: PUSH
73746: LD_OWVAR 2
73750: PUSH
73751: EMPTY
73752: LIST
73753: LIST
73754: PUSH
73755: LD_INT 21
73757: PUSH
73758: LD_INT 2
73760: PUSH
73761: EMPTY
73762: LIST
73763: LIST
73764: PUSH
73765: LD_INT 33
73767: PUSH
73768: LD_INT 3
73770: PUSH
73771: EMPTY
73772: LIST
73773: LIST
73774: PUSH
73775: EMPTY
73776: LIST
73777: LIST
73778: LIST
73779: PPUSH
73780: CALL_OW 69
73784: ST_TO_ADDR
// if not tmp then
73785: LD_VAR 0 1
73789: NOT
73790: IFFALSE 73794
// exit ;
73792: GO 73820
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
73794: LD_VAR 0 1
73798: PUSH
73799: LD_INT 1
73801: PPUSH
73802: LD_VAR 0 1
73806: PPUSH
73807: CALL_OW 12
73811: ARRAY
73812: PPUSH
73813: LD_INT 1
73815: PPUSH
73816: CALL_OW 234
// end ;
73820: PPOPN 1
73822: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
73823: LD_EXP 47
73827: PUSH
73828: LD_EXP 89
73832: AND
73833: IFFALSE 73974
73835: GO 73837
73837: DISABLE
73838: LD_INT 0
73840: PPUSH
73841: PPUSH
73842: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
73843: LD_ADDR_VAR 0 3
73847: PUSH
73848: LD_INT 22
73850: PUSH
73851: LD_OWVAR 2
73855: PUSH
73856: EMPTY
73857: LIST
73858: LIST
73859: PUSH
73860: LD_INT 25
73862: PUSH
73863: LD_INT 1
73865: PUSH
73866: EMPTY
73867: LIST
73868: LIST
73869: PUSH
73870: EMPTY
73871: LIST
73872: LIST
73873: PPUSH
73874: CALL_OW 69
73878: ST_TO_ADDR
// if not tmp then
73879: LD_VAR 0 3
73883: NOT
73884: IFFALSE 73888
// exit ;
73886: GO 73974
// un := tmp [ rand ( 1 , tmp ) ] ;
73888: LD_ADDR_VAR 0 2
73892: PUSH
73893: LD_VAR 0 3
73897: PUSH
73898: LD_INT 1
73900: PPUSH
73901: LD_VAR 0 3
73905: PPUSH
73906: CALL_OW 12
73910: ARRAY
73911: ST_TO_ADDR
// if Crawls ( un ) then
73912: LD_VAR 0 2
73916: PPUSH
73917: CALL_OW 318
73921: IFFALSE 73932
// ComWalk ( un ) ;
73923: LD_VAR 0 2
73927: PPUSH
73928: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
73932: LD_VAR 0 2
73936: PPUSH
73937: LD_INT 9
73939: PPUSH
73940: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
73944: LD_INT 28
73946: PPUSH
73947: LD_OWVAR 2
73951: PPUSH
73952: LD_INT 2
73954: PPUSH
73955: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
73959: LD_INT 29
73961: PPUSH
73962: LD_OWVAR 2
73966: PPUSH
73967: LD_INT 2
73969: PPUSH
73970: CALL_OW 322
// end ;
73974: PPOPN 3
73976: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
73977: LD_EXP 47
73981: PUSH
73982: LD_EXP 90
73986: AND
73987: IFFALSE 74098
73989: GO 73991
73991: DISABLE
73992: LD_INT 0
73994: PPUSH
73995: PPUSH
73996: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
73997: LD_ADDR_VAR 0 3
74001: PUSH
74002: LD_INT 22
74004: PUSH
74005: LD_OWVAR 2
74009: PUSH
74010: EMPTY
74011: LIST
74012: LIST
74013: PUSH
74014: LD_INT 25
74016: PUSH
74017: LD_INT 1
74019: PUSH
74020: EMPTY
74021: LIST
74022: LIST
74023: PUSH
74024: EMPTY
74025: LIST
74026: LIST
74027: PPUSH
74028: CALL_OW 69
74032: ST_TO_ADDR
// if not tmp then
74033: LD_VAR 0 3
74037: NOT
74038: IFFALSE 74042
// exit ;
74040: GO 74098
// un := tmp [ rand ( 1 , tmp ) ] ;
74042: LD_ADDR_VAR 0 2
74046: PUSH
74047: LD_VAR 0 3
74051: PUSH
74052: LD_INT 1
74054: PPUSH
74055: LD_VAR 0 3
74059: PPUSH
74060: CALL_OW 12
74064: ARRAY
74065: ST_TO_ADDR
// if Crawls ( un ) then
74066: LD_VAR 0 2
74070: PPUSH
74071: CALL_OW 318
74075: IFFALSE 74086
// ComWalk ( un ) ;
74077: LD_VAR 0 2
74081: PPUSH
74082: CALL_OW 138
// SetClass ( un , class_mortar ) ;
74086: LD_VAR 0 2
74090: PPUSH
74091: LD_INT 8
74093: PPUSH
74094: CALL_OW 336
// end ;
74098: PPOPN 3
74100: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
74101: LD_EXP 47
74105: PUSH
74106: LD_EXP 91
74110: AND
74111: IFFALSE 74255
74113: GO 74115
74115: DISABLE
74116: LD_INT 0
74118: PPUSH
74119: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
74120: LD_ADDR_VAR 0 2
74124: PUSH
74125: LD_INT 22
74127: PUSH
74128: LD_OWVAR 2
74132: PUSH
74133: EMPTY
74134: LIST
74135: LIST
74136: PUSH
74137: LD_INT 21
74139: PUSH
74140: LD_INT 2
74142: PUSH
74143: EMPTY
74144: LIST
74145: LIST
74146: PUSH
74147: LD_INT 2
74149: PUSH
74150: LD_INT 34
74152: PUSH
74153: LD_INT 12
74155: PUSH
74156: EMPTY
74157: LIST
74158: LIST
74159: PUSH
74160: LD_INT 34
74162: PUSH
74163: LD_INT 51
74165: PUSH
74166: EMPTY
74167: LIST
74168: LIST
74169: PUSH
74170: LD_INT 34
74172: PUSH
74173: LD_INT 32
74175: PUSH
74176: EMPTY
74177: LIST
74178: LIST
74179: PUSH
74180: EMPTY
74181: LIST
74182: LIST
74183: LIST
74184: LIST
74185: PUSH
74186: EMPTY
74187: LIST
74188: LIST
74189: LIST
74190: PPUSH
74191: CALL_OW 69
74195: ST_TO_ADDR
// if not tmp then
74196: LD_VAR 0 2
74200: NOT
74201: IFFALSE 74205
// exit ;
74203: GO 74255
// for i in tmp do
74205: LD_ADDR_VAR 0 1
74209: PUSH
74210: LD_VAR 0 2
74214: PUSH
74215: FOR_IN
74216: IFFALSE 74253
// if GetCargo ( i , mat_artifact ) = 0 then
74218: LD_VAR 0 1
74222: PPUSH
74223: LD_INT 4
74225: PPUSH
74226: CALL_OW 289
74230: PUSH
74231: LD_INT 0
74233: EQUAL
74234: IFFALSE 74251
// SetCargo ( i , mat_siberit , 100 ) ;
74236: LD_VAR 0 1
74240: PPUSH
74241: LD_INT 3
74243: PPUSH
74244: LD_INT 100
74246: PPUSH
74247: CALL_OW 290
74251: GO 74215
74253: POP
74254: POP
// end ;
74255: PPOPN 2
74257: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
74258: LD_EXP 47
74262: PUSH
74263: LD_EXP 92
74267: AND
74268: IFFALSE 74451
74270: GO 74272
74272: DISABLE
74273: LD_INT 0
74275: PPUSH
74276: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
74277: LD_ADDR_VAR 0 2
74281: PUSH
74282: LD_INT 22
74284: PUSH
74285: LD_OWVAR 2
74289: PUSH
74290: EMPTY
74291: LIST
74292: LIST
74293: PPUSH
74294: CALL_OW 69
74298: ST_TO_ADDR
// if not tmp then
74299: LD_VAR 0 2
74303: NOT
74304: IFFALSE 74308
// exit ;
74306: GO 74451
// for i := 1 to 2 do
74308: LD_ADDR_VAR 0 1
74312: PUSH
74313: DOUBLE
74314: LD_INT 1
74316: DEC
74317: ST_TO_ADDR
74318: LD_INT 2
74320: PUSH
74321: FOR_TO
74322: IFFALSE 74449
// begin uc_side := your_side ;
74324: LD_ADDR_OWVAR 20
74328: PUSH
74329: LD_OWVAR 2
74333: ST_TO_ADDR
// uc_nation := nation_american ;
74334: LD_ADDR_OWVAR 21
74338: PUSH
74339: LD_INT 1
74341: ST_TO_ADDR
// vc_chassis := us_morphling ;
74342: LD_ADDR_OWVAR 37
74346: PUSH
74347: LD_INT 5
74349: ST_TO_ADDR
// vc_engine := engine_siberite ;
74350: LD_ADDR_OWVAR 39
74354: PUSH
74355: LD_INT 3
74357: ST_TO_ADDR
// vc_control := control_computer ;
74358: LD_ADDR_OWVAR 38
74362: PUSH
74363: LD_INT 3
74365: ST_TO_ADDR
// vc_weapon := us_double_laser ;
74366: LD_ADDR_OWVAR 40
74370: PUSH
74371: LD_INT 10
74373: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
74374: LD_VAR 0 2
74378: PUSH
74379: LD_INT 1
74381: ARRAY
74382: PPUSH
74383: CALL_OW 310
74387: NOT
74388: IFFALSE 74435
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
74390: CALL_OW 45
74394: PPUSH
74395: LD_VAR 0 2
74399: PUSH
74400: LD_INT 1
74402: ARRAY
74403: PPUSH
74404: CALL_OW 250
74408: PPUSH
74409: LD_VAR 0 2
74413: PUSH
74414: LD_INT 1
74416: ARRAY
74417: PPUSH
74418: CALL_OW 251
74422: PPUSH
74423: LD_INT 12
74425: PPUSH
74426: LD_INT 1
74428: PPUSH
74429: CALL_OW 50
74433: GO 74447
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
74435: CALL_OW 45
74439: PPUSH
74440: LD_INT 1
74442: PPUSH
74443: CALL_OW 51
// end ;
74447: GO 74321
74449: POP
74450: POP
// end ;
74451: PPOPN 2
74453: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
74454: LD_EXP 47
74458: PUSH
74459: LD_EXP 93
74463: AND
74464: IFFALSE 74686
74466: GO 74468
74468: DISABLE
74469: LD_INT 0
74471: PPUSH
74472: PPUSH
74473: PPUSH
74474: PPUSH
74475: PPUSH
74476: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
74477: LD_ADDR_VAR 0 6
74481: PUSH
74482: LD_INT 22
74484: PUSH
74485: LD_OWVAR 2
74489: PUSH
74490: EMPTY
74491: LIST
74492: LIST
74493: PUSH
74494: LD_INT 21
74496: PUSH
74497: LD_INT 1
74499: PUSH
74500: EMPTY
74501: LIST
74502: LIST
74503: PUSH
74504: LD_INT 3
74506: PUSH
74507: LD_INT 23
74509: PUSH
74510: LD_INT 0
74512: PUSH
74513: EMPTY
74514: LIST
74515: LIST
74516: PUSH
74517: EMPTY
74518: LIST
74519: LIST
74520: PUSH
74521: EMPTY
74522: LIST
74523: LIST
74524: LIST
74525: PPUSH
74526: CALL_OW 69
74530: ST_TO_ADDR
// if not tmp then
74531: LD_VAR 0 6
74535: NOT
74536: IFFALSE 74540
// exit ;
74538: GO 74686
// s1 := rand ( 1 , 4 ) ;
74540: LD_ADDR_VAR 0 2
74544: PUSH
74545: LD_INT 1
74547: PPUSH
74548: LD_INT 4
74550: PPUSH
74551: CALL_OW 12
74555: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
74556: LD_ADDR_VAR 0 4
74560: PUSH
74561: LD_VAR 0 6
74565: PUSH
74566: LD_INT 1
74568: ARRAY
74569: PPUSH
74570: LD_VAR 0 2
74574: PPUSH
74575: CALL_OW 259
74579: ST_TO_ADDR
// if s1 = 1 then
74580: LD_VAR 0 2
74584: PUSH
74585: LD_INT 1
74587: EQUAL
74588: IFFALSE 74608
// s2 := rand ( 2 , 4 ) else
74590: LD_ADDR_VAR 0 3
74594: PUSH
74595: LD_INT 2
74597: PPUSH
74598: LD_INT 4
74600: PPUSH
74601: CALL_OW 12
74605: ST_TO_ADDR
74606: GO 74616
// s2 := 1 ;
74608: LD_ADDR_VAR 0 3
74612: PUSH
74613: LD_INT 1
74615: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
74616: LD_ADDR_VAR 0 5
74620: PUSH
74621: LD_VAR 0 6
74625: PUSH
74626: LD_INT 1
74628: ARRAY
74629: PPUSH
74630: LD_VAR 0 3
74634: PPUSH
74635: CALL_OW 259
74639: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
74640: LD_VAR 0 6
74644: PUSH
74645: LD_INT 1
74647: ARRAY
74648: PPUSH
74649: LD_VAR 0 2
74653: PPUSH
74654: LD_VAR 0 5
74658: PPUSH
74659: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
74663: LD_VAR 0 6
74667: PUSH
74668: LD_INT 1
74670: ARRAY
74671: PPUSH
74672: LD_VAR 0 3
74676: PPUSH
74677: LD_VAR 0 4
74681: PPUSH
74682: CALL_OW 237
// end ;
74686: PPOPN 6
74688: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
74689: LD_EXP 47
74693: PUSH
74694: LD_EXP 94
74698: AND
74699: IFFALSE 74778
74701: GO 74703
74703: DISABLE
74704: LD_INT 0
74706: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
74707: LD_ADDR_VAR 0 1
74711: PUSH
74712: LD_INT 22
74714: PUSH
74715: LD_OWVAR 2
74719: PUSH
74720: EMPTY
74721: LIST
74722: LIST
74723: PUSH
74724: LD_INT 30
74726: PUSH
74727: LD_INT 3
74729: PUSH
74730: EMPTY
74731: LIST
74732: LIST
74733: PUSH
74734: EMPTY
74735: LIST
74736: LIST
74737: PPUSH
74738: CALL_OW 69
74742: ST_TO_ADDR
// if not tmp then
74743: LD_VAR 0 1
74747: NOT
74748: IFFALSE 74752
// exit ;
74750: GO 74778
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
74752: LD_VAR 0 1
74756: PUSH
74757: LD_INT 1
74759: PPUSH
74760: LD_VAR 0 1
74764: PPUSH
74765: CALL_OW 12
74769: ARRAY
74770: PPUSH
74771: LD_INT 1
74773: PPUSH
74774: CALL_OW 234
// end ;
74778: PPOPN 1
74780: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
74781: LD_EXP 47
74785: PUSH
74786: LD_EXP 95
74790: AND
74791: IFFALSE 74903
74793: GO 74795
74795: DISABLE
74796: LD_INT 0
74798: PPUSH
74799: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
74800: LD_ADDR_VAR 0 2
74804: PUSH
74805: LD_INT 22
74807: PUSH
74808: LD_OWVAR 2
74812: PUSH
74813: EMPTY
74814: LIST
74815: LIST
74816: PUSH
74817: LD_INT 2
74819: PUSH
74820: LD_INT 30
74822: PUSH
74823: LD_INT 27
74825: PUSH
74826: EMPTY
74827: LIST
74828: LIST
74829: PUSH
74830: LD_INT 30
74832: PUSH
74833: LD_INT 26
74835: PUSH
74836: EMPTY
74837: LIST
74838: LIST
74839: PUSH
74840: LD_INT 30
74842: PUSH
74843: LD_INT 28
74845: PUSH
74846: EMPTY
74847: LIST
74848: LIST
74849: PUSH
74850: EMPTY
74851: LIST
74852: LIST
74853: LIST
74854: LIST
74855: PUSH
74856: EMPTY
74857: LIST
74858: LIST
74859: PPUSH
74860: CALL_OW 69
74864: ST_TO_ADDR
// if not tmp then
74865: LD_VAR 0 2
74869: NOT
74870: IFFALSE 74874
// exit ;
74872: GO 74903
// for i in tmp do
74874: LD_ADDR_VAR 0 1
74878: PUSH
74879: LD_VAR 0 2
74883: PUSH
74884: FOR_IN
74885: IFFALSE 74901
// SetLives ( i , 1 ) ;
74887: LD_VAR 0 1
74891: PPUSH
74892: LD_INT 1
74894: PPUSH
74895: CALL_OW 234
74899: GO 74884
74901: POP
74902: POP
// end ;
74903: PPOPN 2
74905: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
74906: LD_EXP 47
74910: PUSH
74911: LD_EXP 96
74915: AND
74916: IFFALSE 75203
74918: GO 74920
74920: DISABLE
74921: LD_INT 0
74923: PPUSH
74924: PPUSH
74925: PPUSH
// begin i := rand ( 1 , 7 ) ;
74926: LD_ADDR_VAR 0 1
74930: PUSH
74931: LD_INT 1
74933: PPUSH
74934: LD_INT 7
74936: PPUSH
74937: CALL_OW 12
74941: ST_TO_ADDR
// case i of 1 :
74942: LD_VAR 0 1
74946: PUSH
74947: LD_INT 1
74949: DOUBLE
74950: EQUAL
74951: IFTRUE 74955
74953: GO 74965
74955: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
74956: LD_STRING earthquake(getX(game), 0, 32)
74958: PPUSH
74959: CALL_OW 559
74963: GO 75203
74965: LD_INT 2
74967: DOUBLE
74968: EQUAL
74969: IFTRUE 74973
74971: GO 74987
74973: POP
// begin ToLua ( displayStucuk(); ) ;
74974: LD_STRING displayStucuk();
74976: PPUSH
74977: CALL_OW 559
// ResetFog ;
74981: CALL_OW 335
// end ; 3 :
74985: GO 75203
74987: LD_INT 3
74989: DOUBLE
74990: EQUAL
74991: IFTRUE 74995
74993: GO 75099
74995: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
74996: LD_ADDR_VAR 0 2
75000: PUSH
75001: LD_INT 22
75003: PUSH
75004: LD_OWVAR 2
75008: PUSH
75009: EMPTY
75010: LIST
75011: LIST
75012: PUSH
75013: LD_INT 25
75015: PUSH
75016: LD_INT 1
75018: PUSH
75019: EMPTY
75020: LIST
75021: LIST
75022: PUSH
75023: EMPTY
75024: LIST
75025: LIST
75026: PPUSH
75027: CALL_OW 69
75031: ST_TO_ADDR
// if not tmp then
75032: LD_VAR 0 2
75036: NOT
75037: IFFALSE 75041
// exit ;
75039: GO 75203
// un := tmp [ rand ( 1 , tmp ) ] ;
75041: LD_ADDR_VAR 0 3
75045: PUSH
75046: LD_VAR 0 2
75050: PUSH
75051: LD_INT 1
75053: PPUSH
75054: LD_VAR 0 2
75058: PPUSH
75059: CALL_OW 12
75063: ARRAY
75064: ST_TO_ADDR
// if Crawls ( un ) then
75065: LD_VAR 0 3
75069: PPUSH
75070: CALL_OW 318
75074: IFFALSE 75085
// ComWalk ( un ) ;
75076: LD_VAR 0 3
75080: PPUSH
75081: CALL_OW 138
// SetClass ( un , class_mortar ) ;
75085: LD_VAR 0 3
75089: PPUSH
75090: LD_INT 8
75092: PPUSH
75093: CALL_OW 336
// end ; 4 :
75097: GO 75203
75099: LD_INT 4
75101: DOUBLE
75102: EQUAL
75103: IFTRUE 75107
75105: GO 75181
75107: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
75108: LD_ADDR_VAR 0 2
75112: PUSH
75113: LD_INT 22
75115: PUSH
75116: LD_OWVAR 2
75120: PUSH
75121: EMPTY
75122: LIST
75123: LIST
75124: PUSH
75125: LD_INT 30
75127: PUSH
75128: LD_INT 29
75130: PUSH
75131: EMPTY
75132: LIST
75133: LIST
75134: PUSH
75135: EMPTY
75136: LIST
75137: LIST
75138: PPUSH
75139: CALL_OW 69
75143: ST_TO_ADDR
// if not tmp then
75144: LD_VAR 0 2
75148: NOT
75149: IFFALSE 75153
// exit ;
75151: GO 75203
// CenterNowOnUnits ( tmp [ 1 ] ) ;
75153: LD_VAR 0 2
75157: PUSH
75158: LD_INT 1
75160: ARRAY
75161: PPUSH
75162: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
75166: LD_VAR 0 2
75170: PUSH
75171: LD_INT 1
75173: ARRAY
75174: PPUSH
75175: CALL_OW 65
// end ; 5 .. 7 :
75179: GO 75203
75181: LD_INT 5
75183: DOUBLE
75184: GREATEREQUAL
75185: IFFALSE 75193
75187: LD_INT 7
75189: DOUBLE
75190: LESSEQUAL
75191: IFTRUE 75195
75193: GO 75202
75195: POP
// StreamSibBomb ; end ;
75196: CALL 71440 0 0
75200: GO 75203
75202: POP
// end ;
75203: PPOPN 3
75205: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
75206: LD_EXP 47
75210: PUSH
75211: LD_EXP 97
75215: AND
75216: IFFALSE 75372
75218: GO 75220
75220: DISABLE
75221: LD_INT 0
75223: PPUSH
75224: PPUSH
75225: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
75226: LD_ADDR_VAR 0 2
75230: PUSH
75231: LD_INT 81
75233: PUSH
75234: LD_OWVAR 2
75238: PUSH
75239: EMPTY
75240: LIST
75241: LIST
75242: PUSH
75243: LD_INT 2
75245: PUSH
75246: LD_INT 21
75248: PUSH
75249: LD_INT 1
75251: PUSH
75252: EMPTY
75253: LIST
75254: LIST
75255: PUSH
75256: LD_INT 21
75258: PUSH
75259: LD_INT 2
75261: PUSH
75262: EMPTY
75263: LIST
75264: LIST
75265: PUSH
75266: EMPTY
75267: LIST
75268: LIST
75269: LIST
75270: PUSH
75271: EMPTY
75272: LIST
75273: LIST
75274: PPUSH
75275: CALL_OW 69
75279: ST_TO_ADDR
// if not tmp then
75280: LD_VAR 0 2
75284: NOT
75285: IFFALSE 75289
// exit ;
75287: GO 75372
// p := 0 ;
75289: LD_ADDR_VAR 0 3
75293: PUSH
75294: LD_INT 0
75296: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
75297: LD_INT 35
75299: PPUSH
75300: CALL_OW 67
// p := p + 1 ;
75304: LD_ADDR_VAR 0 3
75308: PUSH
75309: LD_VAR 0 3
75313: PUSH
75314: LD_INT 1
75316: PLUS
75317: ST_TO_ADDR
// for i in tmp do
75318: LD_ADDR_VAR 0 1
75322: PUSH
75323: LD_VAR 0 2
75327: PUSH
75328: FOR_IN
75329: IFFALSE 75360
// if GetLives ( i ) < 1000 then
75331: LD_VAR 0 1
75335: PPUSH
75336: CALL_OW 256
75340: PUSH
75341: LD_INT 1000
75343: LESS
75344: IFFALSE 75358
// SetLives ( i , 1000 ) ;
75346: LD_VAR 0 1
75350: PPUSH
75351: LD_INT 1000
75353: PPUSH
75354: CALL_OW 234
75358: GO 75328
75360: POP
75361: POP
// until p > 20 ;
75362: LD_VAR 0 3
75366: PUSH
75367: LD_INT 20
75369: GREATER
75370: IFFALSE 75297
// end ;
75372: PPOPN 3
75374: END
// every 0 0$1 trigger StreamModeActive and sTime do
75375: LD_EXP 47
75379: PUSH
75380: LD_EXP 98
75384: AND
75385: IFFALSE 75420
75387: GO 75389
75389: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
75390: LD_INT 28
75392: PPUSH
75393: LD_OWVAR 2
75397: PPUSH
75398: LD_INT 2
75400: PPUSH
75401: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
75405: LD_INT 30
75407: PPUSH
75408: LD_OWVAR 2
75412: PPUSH
75413: LD_INT 2
75415: PPUSH
75416: CALL_OW 322
// end ;
75420: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
75421: LD_EXP 47
75425: PUSH
75426: LD_EXP 99
75430: AND
75431: IFFALSE 75552
75433: GO 75435
75435: DISABLE
75436: LD_INT 0
75438: PPUSH
75439: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
75440: LD_ADDR_VAR 0 2
75444: PUSH
75445: LD_INT 22
75447: PUSH
75448: LD_OWVAR 2
75452: PUSH
75453: EMPTY
75454: LIST
75455: LIST
75456: PUSH
75457: LD_INT 21
75459: PUSH
75460: LD_INT 1
75462: PUSH
75463: EMPTY
75464: LIST
75465: LIST
75466: PUSH
75467: LD_INT 3
75469: PUSH
75470: LD_INT 23
75472: PUSH
75473: LD_INT 0
75475: PUSH
75476: EMPTY
75477: LIST
75478: LIST
75479: PUSH
75480: EMPTY
75481: LIST
75482: LIST
75483: PUSH
75484: EMPTY
75485: LIST
75486: LIST
75487: LIST
75488: PPUSH
75489: CALL_OW 69
75493: ST_TO_ADDR
// if not tmp then
75494: LD_VAR 0 2
75498: NOT
75499: IFFALSE 75503
// exit ;
75501: GO 75552
// for i in tmp do
75503: LD_ADDR_VAR 0 1
75507: PUSH
75508: LD_VAR 0 2
75512: PUSH
75513: FOR_IN
75514: IFFALSE 75550
// begin if Crawls ( i ) then
75516: LD_VAR 0 1
75520: PPUSH
75521: CALL_OW 318
75525: IFFALSE 75536
// ComWalk ( i ) ;
75527: LD_VAR 0 1
75531: PPUSH
75532: CALL_OW 138
// SetClass ( i , 2 ) ;
75536: LD_VAR 0 1
75540: PPUSH
75541: LD_INT 2
75543: PPUSH
75544: CALL_OW 336
// end ;
75548: GO 75513
75550: POP
75551: POP
// end ;
75552: PPOPN 2
75554: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
75555: LD_EXP 47
75559: PUSH
75560: LD_EXP 100
75564: AND
75565: IFFALSE 75853
75567: GO 75569
75569: DISABLE
75570: LD_INT 0
75572: PPUSH
75573: PPUSH
75574: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
75575: LD_OWVAR 2
75579: PPUSH
75580: LD_INT 9
75582: PPUSH
75583: LD_INT 1
75585: PPUSH
75586: LD_INT 1
75588: PPUSH
75589: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
75593: LD_INT 9
75595: PPUSH
75596: LD_OWVAR 2
75600: PPUSH
75601: CALL_OW 343
// uc_side := 9 ;
75605: LD_ADDR_OWVAR 20
75609: PUSH
75610: LD_INT 9
75612: ST_TO_ADDR
// uc_nation := 2 ;
75613: LD_ADDR_OWVAR 21
75617: PUSH
75618: LD_INT 2
75620: ST_TO_ADDR
// hc_name := Dark Warrior ;
75621: LD_ADDR_OWVAR 26
75625: PUSH
75626: LD_STRING Dark Warrior
75628: ST_TO_ADDR
// hc_gallery :=  ;
75629: LD_ADDR_OWVAR 33
75633: PUSH
75634: LD_STRING 
75636: ST_TO_ADDR
// hc_noskilllimit := true ;
75637: LD_ADDR_OWVAR 76
75641: PUSH
75642: LD_INT 1
75644: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
75645: LD_ADDR_OWVAR 31
75649: PUSH
75650: LD_INT 30
75652: PUSH
75653: LD_INT 30
75655: PUSH
75656: LD_INT 30
75658: PUSH
75659: LD_INT 30
75661: PUSH
75662: EMPTY
75663: LIST
75664: LIST
75665: LIST
75666: LIST
75667: ST_TO_ADDR
// un := CreateHuman ;
75668: LD_ADDR_VAR 0 3
75672: PUSH
75673: CALL_OW 44
75677: ST_TO_ADDR
// hc_noskilllimit := false ;
75678: LD_ADDR_OWVAR 76
75682: PUSH
75683: LD_INT 0
75685: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
75686: LD_VAR 0 3
75690: PPUSH
75691: LD_INT 1
75693: PPUSH
75694: CALL_OW 51
// ToLua ( playRanger() ) ;
75698: LD_STRING playRanger()
75700: PPUSH
75701: CALL_OW 559
// p := 0 ;
75705: LD_ADDR_VAR 0 2
75709: PUSH
75710: LD_INT 0
75712: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
75713: LD_INT 35
75715: PPUSH
75716: CALL_OW 67
// p := p + 1 ;
75720: LD_ADDR_VAR 0 2
75724: PUSH
75725: LD_VAR 0 2
75729: PUSH
75730: LD_INT 1
75732: PLUS
75733: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
75734: LD_VAR 0 3
75738: PPUSH
75739: CALL_OW 256
75743: PUSH
75744: LD_INT 1000
75746: LESS
75747: IFFALSE 75761
// SetLives ( un , 1000 ) ;
75749: LD_VAR 0 3
75753: PPUSH
75754: LD_INT 1000
75756: PPUSH
75757: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
75761: LD_VAR 0 3
75765: PPUSH
75766: LD_INT 81
75768: PUSH
75769: LD_OWVAR 2
75773: PUSH
75774: EMPTY
75775: LIST
75776: LIST
75777: PUSH
75778: LD_INT 91
75780: PUSH
75781: LD_VAR 0 3
75785: PUSH
75786: LD_INT 30
75788: PUSH
75789: EMPTY
75790: LIST
75791: LIST
75792: LIST
75793: PUSH
75794: EMPTY
75795: LIST
75796: LIST
75797: PPUSH
75798: CALL_OW 69
75802: PPUSH
75803: LD_VAR 0 3
75807: PPUSH
75808: CALL_OW 74
75812: PPUSH
75813: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
75817: LD_VAR 0 2
75821: PUSH
75822: LD_INT 80
75824: GREATER
75825: PUSH
75826: LD_VAR 0 3
75830: PPUSH
75831: CALL_OW 301
75835: OR
75836: IFFALSE 75713
// if un then
75838: LD_VAR 0 3
75842: IFFALSE 75853
// RemoveUnit ( un ) ;
75844: LD_VAR 0 3
75848: PPUSH
75849: CALL_OW 64
// end ;
75853: PPOPN 3
75855: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
75856: LD_EXP 101
75860: IFFALSE 75976
75862: GO 75864
75864: DISABLE
75865: LD_INT 0
75867: PPUSH
75868: PPUSH
75869: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
75870: LD_ADDR_VAR 0 2
75874: PUSH
75875: LD_INT 81
75877: PUSH
75878: LD_OWVAR 2
75882: PUSH
75883: EMPTY
75884: LIST
75885: LIST
75886: PUSH
75887: LD_INT 21
75889: PUSH
75890: LD_INT 1
75892: PUSH
75893: EMPTY
75894: LIST
75895: LIST
75896: PUSH
75897: EMPTY
75898: LIST
75899: LIST
75900: PPUSH
75901: CALL_OW 69
75905: ST_TO_ADDR
// ToLua ( playComputer() ) ;
75906: LD_STRING playComputer()
75908: PPUSH
75909: CALL_OW 559
// if not tmp then
75913: LD_VAR 0 2
75917: NOT
75918: IFFALSE 75922
// exit ;
75920: GO 75976
// for i in tmp do
75922: LD_ADDR_VAR 0 1
75926: PUSH
75927: LD_VAR 0 2
75931: PUSH
75932: FOR_IN
75933: IFFALSE 75974
// for j := 1 to 4 do
75935: LD_ADDR_VAR 0 3
75939: PUSH
75940: DOUBLE
75941: LD_INT 1
75943: DEC
75944: ST_TO_ADDR
75945: LD_INT 4
75947: PUSH
75948: FOR_TO
75949: IFFALSE 75970
// SetSkill ( i , j , 10 ) ;
75951: LD_VAR 0 1
75955: PPUSH
75956: LD_VAR 0 3
75960: PPUSH
75961: LD_INT 10
75963: PPUSH
75964: CALL_OW 237
75968: GO 75948
75970: POP
75971: POP
75972: GO 75932
75974: POP
75975: POP
// end ;
75976: PPOPN 3
75978: END
// every 0 0$1 trigger s30 do var i , tmp ;
75979: LD_EXP 102
75983: IFFALSE 76052
75985: GO 75987
75987: DISABLE
75988: LD_INT 0
75990: PPUSH
75991: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
75992: LD_ADDR_VAR 0 2
75996: PUSH
75997: LD_INT 22
75999: PUSH
76000: LD_OWVAR 2
76004: PUSH
76005: EMPTY
76006: LIST
76007: LIST
76008: PPUSH
76009: CALL_OW 69
76013: ST_TO_ADDR
// if not tmp then
76014: LD_VAR 0 2
76018: NOT
76019: IFFALSE 76023
// exit ;
76021: GO 76052
// for i in tmp do
76023: LD_ADDR_VAR 0 1
76027: PUSH
76028: LD_VAR 0 2
76032: PUSH
76033: FOR_IN
76034: IFFALSE 76050
// SetLives ( i , 300 ) ;
76036: LD_VAR 0 1
76040: PPUSH
76041: LD_INT 300
76043: PPUSH
76044: CALL_OW 234
76048: GO 76033
76050: POP
76051: POP
// end ;
76052: PPOPN 2
76054: END
// every 0 0$1 trigger s60 do var i , tmp ;
76055: LD_EXP 103
76059: IFFALSE 76128
76061: GO 76063
76063: DISABLE
76064: LD_INT 0
76066: PPUSH
76067: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
76068: LD_ADDR_VAR 0 2
76072: PUSH
76073: LD_INT 22
76075: PUSH
76076: LD_OWVAR 2
76080: PUSH
76081: EMPTY
76082: LIST
76083: LIST
76084: PPUSH
76085: CALL_OW 69
76089: ST_TO_ADDR
// if not tmp then
76090: LD_VAR 0 2
76094: NOT
76095: IFFALSE 76099
// exit ;
76097: GO 76128
// for i in tmp do
76099: LD_ADDR_VAR 0 1
76103: PUSH
76104: LD_VAR 0 2
76108: PUSH
76109: FOR_IN
76110: IFFALSE 76126
// SetLives ( i , 600 ) ;
76112: LD_VAR 0 1
76116: PPUSH
76117: LD_INT 600
76119: PPUSH
76120: CALL_OW 234
76124: GO 76109
76126: POP
76127: POP
// end ;
76128: PPOPN 2
76130: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
76131: LD_INT 0
76133: PPUSH
// case cmd of 301 :
76134: LD_VAR 0 1
76138: PUSH
76139: LD_INT 301
76141: DOUBLE
76142: EQUAL
76143: IFTRUE 76147
76145: GO 76179
76147: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
76148: LD_VAR 0 6
76152: PPUSH
76153: LD_VAR 0 7
76157: PPUSH
76158: LD_VAR 0 8
76162: PPUSH
76163: LD_VAR 0 4
76167: PPUSH
76168: LD_VAR 0 5
76172: PPUSH
76173: CALL 77388 0 5
76177: GO 76300
76179: LD_INT 302
76181: DOUBLE
76182: EQUAL
76183: IFTRUE 76187
76185: GO 76224
76187: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
76188: LD_VAR 0 6
76192: PPUSH
76193: LD_VAR 0 7
76197: PPUSH
76198: LD_VAR 0 8
76202: PPUSH
76203: LD_VAR 0 9
76207: PPUSH
76208: LD_VAR 0 4
76212: PPUSH
76213: LD_VAR 0 5
76217: PPUSH
76218: CALL 77479 0 6
76222: GO 76300
76224: LD_INT 303
76226: DOUBLE
76227: EQUAL
76228: IFTRUE 76232
76230: GO 76269
76232: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
76233: LD_VAR 0 6
76237: PPUSH
76238: LD_VAR 0 7
76242: PPUSH
76243: LD_VAR 0 8
76247: PPUSH
76248: LD_VAR 0 9
76252: PPUSH
76253: LD_VAR 0 4
76257: PPUSH
76258: LD_VAR 0 5
76262: PPUSH
76263: CALL 76305 0 6
76267: GO 76300
76269: LD_INT 304
76271: DOUBLE
76272: EQUAL
76273: IFTRUE 76277
76275: GO 76299
76277: POP
// hHackTeleport ( unit , x , y ) ; end ;
76278: LD_VAR 0 2
76282: PPUSH
76283: LD_VAR 0 4
76287: PPUSH
76288: LD_VAR 0 5
76292: PPUSH
76293: CALL 78072 0 3
76297: GO 76300
76299: POP
// end ;
76300: LD_VAR 0 12
76304: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
76305: LD_INT 0
76307: PPUSH
76308: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
76309: LD_VAR 0 1
76313: PUSH
76314: LD_INT 1
76316: LESS
76317: PUSH
76318: LD_VAR 0 1
76322: PUSH
76323: LD_INT 3
76325: GREATER
76326: OR
76327: PUSH
76328: LD_VAR 0 5
76332: PPUSH
76333: LD_VAR 0 6
76337: PPUSH
76338: CALL_OW 428
76342: OR
76343: IFFALSE 76347
// exit ;
76345: GO 77075
// uc_side := your_side ;
76347: LD_ADDR_OWVAR 20
76351: PUSH
76352: LD_OWVAR 2
76356: ST_TO_ADDR
// uc_nation := nation ;
76357: LD_ADDR_OWVAR 21
76361: PUSH
76362: LD_VAR 0 1
76366: ST_TO_ADDR
// bc_level = 1 ;
76367: LD_ADDR_OWVAR 43
76371: PUSH
76372: LD_INT 1
76374: ST_TO_ADDR
// case btype of 1 :
76375: LD_VAR 0 2
76379: PUSH
76380: LD_INT 1
76382: DOUBLE
76383: EQUAL
76384: IFTRUE 76388
76386: GO 76399
76388: POP
// bc_type := b_depot ; 2 :
76389: LD_ADDR_OWVAR 42
76393: PUSH
76394: LD_INT 0
76396: ST_TO_ADDR
76397: GO 77019
76399: LD_INT 2
76401: DOUBLE
76402: EQUAL
76403: IFTRUE 76407
76405: GO 76418
76407: POP
// bc_type := b_warehouse ; 3 :
76408: LD_ADDR_OWVAR 42
76412: PUSH
76413: LD_INT 1
76415: ST_TO_ADDR
76416: GO 77019
76418: LD_INT 3
76420: DOUBLE
76421: EQUAL
76422: IFTRUE 76426
76424: GO 76437
76426: POP
// bc_type := b_lab ; 4 .. 9 :
76427: LD_ADDR_OWVAR 42
76431: PUSH
76432: LD_INT 6
76434: ST_TO_ADDR
76435: GO 77019
76437: LD_INT 4
76439: DOUBLE
76440: GREATEREQUAL
76441: IFFALSE 76449
76443: LD_INT 9
76445: DOUBLE
76446: LESSEQUAL
76447: IFTRUE 76451
76449: GO 76511
76451: POP
// begin bc_type := b_lab_half ;
76452: LD_ADDR_OWVAR 42
76456: PUSH
76457: LD_INT 7
76459: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
76460: LD_ADDR_OWVAR 44
76464: PUSH
76465: LD_INT 10
76467: PUSH
76468: LD_INT 11
76470: PUSH
76471: LD_INT 12
76473: PUSH
76474: LD_INT 15
76476: PUSH
76477: LD_INT 14
76479: PUSH
76480: LD_INT 13
76482: PUSH
76483: EMPTY
76484: LIST
76485: LIST
76486: LIST
76487: LIST
76488: LIST
76489: LIST
76490: PUSH
76491: LD_VAR 0 2
76495: PUSH
76496: LD_INT 3
76498: MINUS
76499: ARRAY
76500: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
76501: LD_ADDR_OWVAR 45
76505: PUSH
76506: LD_INT 9
76508: ST_TO_ADDR
// end ; 10 .. 13 :
76509: GO 77019
76511: LD_INT 10
76513: DOUBLE
76514: GREATEREQUAL
76515: IFFALSE 76523
76517: LD_INT 13
76519: DOUBLE
76520: LESSEQUAL
76521: IFTRUE 76525
76523: GO 76602
76525: POP
// begin bc_type := b_lab_full ;
76526: LD_ADDR_OWVAR 42
76530: PUSH
76531: LD_INT 8
76533: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
76534: LD_ADDR_OWVAR 44
76538: PUSH
76539: LD_INT 10
76541: PUSH
76542: LD_INT 12
76544: PUSH
76545: LD_INT 14
76547: PUSH
76548: LD_INT 13
76550: PUSH
76551: EMPTY
76552: LIST
76553: LIST
76554: LIST
76555: LIST
76556: PUSH
76557: LD_VAR 0 2
76561: PUSH
76562: LD_INT 9
76564: MINUS
76565: ARRAY
76566: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
76567: LD_ADDR_OWVAR 45
76571: PUSH
76572: LD_INT 11
76574: PUSH
76575: LD_INT 15
76577: PUSH
76578: LD_INT 12
76580: PUSH
76581: LD_INT 15
76583: PUSH
76584: EMPTY
76585: LIST
76586: LIST
76587: LIST
76588: LIST
76589: PUSH
76590: LD_VAR 0 2
76594: PUSH
76595: LD_INT 9
76597: MINUS
76598: ARRAY
76599: ST_TO_ADDR
// end ; 14 :
76600: GO 77019
76602: LD_INT 14
76604: DOUBLE
76605: EQUAL
76606: IFTRUE 76610
76608: GO 76621
76610: POP
// bc_type := b_workshop ; 15 :
76611: LD_ADDR_OWVAR 42
76615: PUSH
76616: LD_INT 2
76618: ST_TO_ADDR
76619: GO 77019
76621: LD_INT 15
76623: DOUBLE
76624: EQUAL
76625: IFTRUE 76629
76627: GO 76640
76629: POP
// bc_type := b_factory ; 16 :
76630: LD_ADDR_OWVAR 42
76634: PUSH
76635: LD_INT 3
76637: ST_TO_ADDR
76638: GO 77019
76640: LD_INT 16
76642: DOUBLE
76643: EQUAL
76644: IFTRUE 76648
76646: GO 76659
76648: POP
// bc_type := b_ext_gun ; 17 :
76649: LD_ADDR_OWVAR 42
76653: PUSH
76654: LD_INT 17
76656: ST_TO_ADDR
76657: GO 77019
76659: LD_INT 17
76661: DOUBLE
76662: EQUAL
76663: IFTRUE 76667
76665: GO 76695
76667: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
76668: LD_ADDR_OWVAR 42
76672: PUSH
76673: LD_INT 19
76675: PUSH
76676: LD_INT 23
76678: PUSH
76679: LD_INT 19
76681: PUSH
76682: EMPTY
76683: LIST
76684: LIST
76685: LIST
76686: PUSH
76687: LD_VAR 0 1
76691: ARRAY
76692: ST_TO_ADDR
76693: GO 77019
76695: LD_INT 18
76697: DOUBLE
76698: EQUAL
76699: IFTRUE 76703
76701: GO 76714
76703: POP
// bc_type := b_ext_radar ; 19 :
76704: LD_ADDR_OWVAR 42
76708: PUSH
76709: LD_INT 20
76711: ST_TO_ADDR
76712: GO 77019
76714: LD_INT 19
76716: DOUBLE
76717: EQUAL
76718: IFTRUE 76722
76720: GO 76733
76722: POP
// bc_type := b_ext_radio ; 20 :
76723: LD_ADDR_OWVAR 42
76727: PUSH
76728: LD_INT 22
76730: ST_TO_ADDR
76731: GO 77019
76733: LD_INT 20
76735: DOUBLE
76736: EQUAL
76737: IFTRUE 76741
76739: GO 76752
76741: POP
// bc_type := b_ext_siberium ; 21 :
76742: LD_ADDR_OWVAR 42
76746: PUSH
76747: LD_INT 21
76749: ST_TO_ADDR
76750: GO 77019
76752: LD_INT 21
76754: DOUBLE
76755: EQUAL
76756: IFTRUE 76760
76758: GO 76771
76760: POP
// bc_type := b_ext_computer ; 22 :
76761: LD_ADDR_OWVAR 42
76765: PUSH
76766: LD_INT 24
76768: ST_TO_ADDR
76769: GO 77019
76771: LD_INT 22
76773: DOUBLE
76774: EQUAL
76775: IFTRUE 76779
76777: GO 76790
76779: POP
// bc_type := b_ext_track ; 23 :
76780: LD_ADDR_OWVAR 42
76784: PUSH
76785: LD_INT 16
76787: ST_TO_ADDR
76788: GO 77019
76790: LD_INT 23
76792: DOUBLE
76793: EQUAL
76794: IFTRUE 76798
76796: GO 76809
76798: POP
// bc_type := b_ext_laser ; 24 :
76799: LD_ADDR_OWVAR 42
76803: PUSH
76804: LD_INT 25
76806: ST_TO_ADDR
76807: GO 77019
76809: LD_INT 24
76811: DOUBLE
76812: EQUAL
76813: IFTRUE 76817
76815: GO 76828
76817: POP
// bc_type := b_control_tower ; 25 :
76818: LD_ADDR_OWVAR 42
76822: PUSH
76823: LD_INT 36
76825: ST_TO_ADDR
76826: GO 77019
76828: LD_INT 25
76830: DOUBLE
76831: EQUAL
76832: IFTRUE 76836
76834: GO 76847
76836: POP
// bc_type := b_breastwork ; 26 :
76837: LD_ADDR_OWVAR 42
76841: PUSH
76842: LD_INT 31
76844: ST_TO_ADDR
76845: GO 77019
76847: LD_INT 26
76849: DOUBLE
76850: EQUAL
76851: IFTRUE 76855
76853: GO 76866
76855: POP
// bc_type := b_bunker ; 27 :
76856: LD_ADDR_OWVAR 42
76860: PUSH
76861: LD_INT 32
76863: ST_TO_ADDR
76864: GO 77019
76866: LD_INT 27
76868: DOUBLE
76869: EQUAL
76870: IFTRUE 76874
76872: GO 76885
76874: POP
// bc_type := b_turret ; 28 :
76875: LD_ADDR_OWVAR 42
76879: PUSH
76880: LD_INT 33
76882: ST_TO_ADDR
76883: GO 77019
76885: LD_INT 28
76887: DOUBLE
76888: EQUAL
76889: IFTRUE 76893
76891: GO 76904
76893: POP
// bc_type := b_armoury ; 29 :
76894: LD_ADDR_OWVAR 42
76898: PUSH
76899: LD_INT 4
76901: ST_TO_ADDR
76902: GO 77019
76904: LD_INT 29
76906: DOUBLE
76907: EQUAL
76908: IFTRUE 76912
76910: GO 76923
76912: POP
// bc_type := b_barracks ; 30 :
76913: LD_ADDR_OWVAR 42
76917: PUSH
76918: LD_INT 5
76920: ST_TO_ADDR
76921: GO 77019
76923: LD_INT 30
76925: DOUBLE
76926: EQUAL
76927: IFTRUE 76931
76929: GO 76942
76931: POP
// bc_type := b_solar_power ; 31 :
76932: LD_ADDR_OWVAR 42
76936: PUSH
76937: LD_INT 27
76939: ST_TO_ADDR
76940: GO 77019
76942: LD_INT 31
76944: DOUBLE
76945: EQUAL
76946: IFTRUE 76950
76948: GO 76961
76950: POP
// bc_type := b_oil_power ; 32 :
76951: LD_ADDR_OWVAR 42
76955: PUSH
76956: LD_INT 26
76958: ST_TO_ADDR
76959: GO 77019
76961: LD_INT 32
76963: DOUBLE
76964: EQUAL
76965: IFTRUE 76969
76967: GO 76980
76969: POP
// bc_type := b_siberite_power ; 33 :
76970: LD_ADDR_OWVAR 42
76974: PUSH
76975: LD_INT 28
76977: ST_TO_ADDR
76978: GO 77019
76980: LD_INT 33
76982: DOUBLE
76983: EQUAL
76984: IFTRUE 76988
76986: GO 76999
76988: POP
// bc_type := b_oil_mine ; 34 :
76989: LD_ADDR_OWVAR 42
76993: PUSH
76994: LD_INT 29
76996: ST_TO_ADDR
76997: GO 77019
76999: LD_INT 34
77001: DOUBLE
77002: EQUAL
77003: IFTRUE 77007
77005: GO 77018
77007: POP
// bc_type := b_siberite_mine ; end ;
77008: LD_ADDR_OWVAR 42
77012: PUSH
77013: LD_INT 30
77015: ST_TO_ADDR
77016: GO 77019
77018: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
77019: LD_ADDR_VAR 0 8
77023: PUSH
77024: LD_VAR 0 5
77028: PPUSH
77029: LD_VAR 0 6
77033: PPUSH
77034: LD_VAR 0 3
77038: PPUSH
77039: CALL_OW 47
77043: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
77044: LD_OWVAR 42
77048: PUSH
77049: LD_INT 32
77051: PUSH
77052: LD_INT 33
77054: PUSH
77055: EMPTY
77056: LIST
77057: LIST
77058: IN
77059: IFFALSE 77075
// PlaceWeaponTurret ( b , weapon ) ;
77061: LD_VAR 0 8
77065: PPUSH
77066: LD_VAR 0 4
77070: PPUSH
77071: CALL_OW 431
// end ;
77075: LD_VAR 0 7
77079: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
77080: LD_INT 0
77082: PPUSH
77083: PPUSH
77084: PPUSH
77085: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
77086: LD_ADDR_VAR 0 4
77090: PUSH
77091: LD_INT 22
77093: PUSH
77094: LD_OWVAR 2
77098: PUSH
77099: EMPTY
77100: LIST
77101: LIST
77102: PUSH
77103: LD_INT 2
77105: PUSH
77106: LD_INT 30
77108: PUSH
77109: LD_INT 0
77111: PUSH
77112: EMPTY
77113: LIST
77114: LIST
77115: PUSH
77116: LD_INT 30
77118: PUSH
77119: LD_INT 1
77121: PUSH
77122: EMPTY
77123: LIST
77124: LIST
77125: PUSH
77126: EMPTY
77127: LIST
77128: LIST
77129: LIST
77130: PUSH
77131: EMPTY
77132: LIST
77133: LIST
77134: PPUSH
77135: CALL_OW 69
77139: ST_TO_ADDR
// if not tmp then
77140: LD_VAR 0 4
77144: NOT
77145: IFFALSE 77149
// exit ;
77147: GO 77208
// for i in tmp do
77149: LD_ADDR_VAR 0 2
77153: PUSH
77154: LD_VAR 0 4
77158: PUSH
77159: FOR_IN
77160: IFFALSE 77206
// for j = 1 to 3 do
77162: LD_ADDR_VAR 0 3
77166: PUSH
77167: DOUBLE
77168: LD_INT 1
77170: DEC
77171: ST_TO_ADDR
77172: LD_INT 3
77174: PUSH
77175: FOR_TO
77176: IFFALSE 77202
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
77178: LD_VAR 0 2
77182: PPUSH
77183: CALL_OW 274
77187: PPUSH
77188: LD_VAR 0 3
77192: PPUSH
77193: LD_INT 99999
77195: PPUSH
77196: CALL_OW 277
77200: GO 77175
77202: POP
77203: POP
77204: GO 77159
77206: POP
77207: POP
// end ;
77208: LD_VAR 0 1
77212: RET
// export function hHackSetLevel10 ; var i , j ; begin
77213: LD_INT 0
77215: PPUSH
77216: PPUSH
77217: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
77218: LD_ADDR_VAR 0 2
77222: PUSH
77223: LD_INT 21
77225: PUSH
77226: LD_INT 1
77228: PUSH
77229: EMPTY
77230: LIST
77231: LIST
77232: PPUSH
77233: CALL_OW 69
77237: PUSH
77238: FOR_IN
77239: IFFALSE 77291
// if IsSelected ( i ) then
77241: LD_VAR 0 2
77245: PPUSH
77246: CALL_OW 306
77250: IFFALSE 77289
// begin for j := 1 to 4 do
77252: LD_ADDR_VAR 0 3
77256: PUSH
77257: DOUBLE
77258: LD_INT 1
77260: DEC
77261: ST_TO_ADDR
77262: LD_INT 4
77264: PUSH
77265: FOR_TO
77266: IFFALSE 77287
// SetSkill ( i , j , 10 ) ;
77268: LD_VAR 0 2
77272: PPUSH
77273: LD_VAR 0 3
77277: PPUSH
77278: LD_INT 10
77280: PPUSH
77281: CALL_OW 237
77285: GO 77265
77287: POP
77288: POP
// end ;
77289: GO 77238
77291: POP
77292: POP
// end ;
77293: LD_VAR 0 1
77297: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
77298: LD_INT 0
77300: PPUSH
77301: PPUSH
77302: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
77303: LD_ADDR_VAR 0 2
77307: PUSH
77308: LD_INT 22
77310: PUSH
77311: LD_OWVAR 2
77315: PUSH
77316: EMPTY
77317: LIST
77318: LIST
77319: PUSH
77320: LD_INT 21
77322: PUSH
77323: LD_INT 1
77325: PUSH
77326: EMPTY
77327: LIST
77328: LIST
77329: PUSH
77330: EMPTY
77331: LIST
77332: LIST
77333: PPUSH
77334: CALL_OW 69
77338: PUSH
77339: FOR_IN
77340: IFFALSE 77381
// begin for j := 1 to 4 do
77342: LD_ADDR_VAR 0 3
77346: PUSH
77347: DOUBLE
77348: LD_INT 1
77350: DEC
77351: ST_TO_ADDR
77352: LD_INT 4
77354: PUSH
77355: FOR_TO
77356: IFFALSE 77377
// SetSkill ( i , j , 10 ) ;
77358: LD_VAR 0 2
77362: PPUSH
77363: LD_VAR 0 3
77367: PPUSH
77368: LD_INT 10
77370: PPUSH
77371: CALL_OW 237
77375: GO 77355
77377: POP
77378: POP
// end ;
77379: GO 77339
77381: POP
77382: POP
// end ;
77383: LD_VAR 0 1
77387: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
77388: LD_INT 0
77390: PPUSH
// uc_side := your_side ;
77391: LD_ADDR_OWVAR 20
77395: PUSH
77396: LD_OWVAR 2
77400: ST_TO_ADDR
// uc_nation := nation ;
77401: LD_ADDR_OWVAR 21
77405: PUSH
77406: LD_VAR 0 1
77410: ST_TO_ADDR
// InitHc ;
77411: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
77415: LD_INT 0
77417: PPUSH
77418: LD_VAR 0 2
77422: PPUSH
77423: LD_VAR 0 3
77427: PPUSH
77428: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
77432: LD_VAR 0 4
77436: PPUSH
77437: LD_VAR 0 5
77441: PPUSH
77442: CALL_OW 428
77446: PUSH
77447: LD_INT 0
77449: EQUAL
77450: IFFALSE 77474
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
77452: CALL_OW 44
77456: PPUSH
77457: LD_VAR 0 4
77461: PPUSH
77462: LD_VAR 0 5
77466: PPUSH
77467: LD_INT 1
77469: PPUSH
77470: CALL_OW 48
// end ;
77474: LD_VAR 0 6
77478: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
77479: LD_INT 0
77481: PPUSH
77482: PPUSH
// uc_side := your_side ;
77483: LD_ADDR_OWVAR 20
77487: PUSH
77488: LD_OWVAR 2
77492: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
77493: LD_VAR 0 1
77497: PUSH
77498: LD_INT 1
77500: PUSH
77501: LD_INT 2
77503: PUSH
77504: LD_INT 3
77506: PUSH
77507: LD_INT 4
77509: PUSH
77510: LD_INT 5
77512: PUSH
77513: EMPTY
77514: LIST
77515: LIST
77516: LIST
77517: LIST
77518: LIST
77519: IN
77520: IFFALSE 77532
// uc_nation := nation_american else
77522: LD_ADDR_OWVAR 21
77526: PUSH
77527: LD_INT 1
77529: ST_TO_ADDR
77530: GO 77575
// if chassis in [ 11 , 12 , 13 , 14 ] then
77532: LD_VAR 0 1
77536: PUSH
77537: LD_INT 11
77539: PUSH
77540: LD_INT 12
77542: PUSH
77543: LD_INT 13
77545: PUSH
77546: LD_INT 14
77548: PUSH
77549: EMPTY
77550: LIST
77551: LIST
77552: LIST
77553: LIST
77554: IN
77555: IFFALSE 77567
// uc_nation := nation_arabian else
77557: LD_ADDR_OWVAR 21
77561: PUSH
77562: LD_INT 2
77564: ST_TO_ADDR
77565: GO 77575
// uc_nation := nation_russian ;
77567: LD_ADDR_OWVAR 21
77571: PUSH
77572: LD_INT 3
77574: ST_TO_ADDR
// vc_chassis := chassis ;
77575: LD_ADDR_OWVAR 37
77579: PUSH
77580: LD_VAR 0 1
77584: ST_TO_ADDR
// vc_engine := engine ;
77585: LD_ADDR_OWVAR 39
77589: PUSH
77590: LD_VAR 0 2
77594: ST_TO_ADDR
// vc_control := control ;
77595: LD_ADDR_OWVAR 38
77599: PUSH
77600: LD_VAR 0 3
77604: ST_TO_ADDR
// vc_weapon := weapon ;
77605: LD_ADDR_OWVAR 40
77609: PUSH
77610: LD_VAR 0 4
77614: ST_TO_ADDR
// un := CreateVehicle ;
77615: LD_ADDR_VAR 0 8
77619: PUSH
77620: CALL_OW 45
77624: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
77625: LD_VAR 0 8
77629: PPUSH
77630: LD_INT 0
77632: PPUSH
77633: LD_INT 5
77635: PPUSH
77636: CALL_OW 12
77640: PPUSH
77641: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
77645: LD_VAR 0 8
77649: PPUSH
77650: LD_VAR 0 5
77654: PPUSH
77655: LD_VAR 0 6
77659: PPUSH
77660: LD_INT 1
77662: PPUSH
77663: CALL_OW 48
// end ;
77667: LD_VAR 0 7
77671: RET
// export hInvincible ; every 1 do
77672: GO 77674
77674: DISABLE
// hInvincible := [ ] ;
77675: LD_ADDR_EXP 104
77679: PUSH
77680: EMPTY
77681: ST_TO_ADDR
77682: END
// every 10 do var i ;
77683: GO 77685
77685: DISABLE
77686: LD_INT 0
77688: PPUSH
// begin enable ;
77689: ENABLE
// if not hInvincible then
77690: LD_EXP 104
77694: NOT
77695: IFFALSE 77699
// exit ;
77697: GO 77743
// for i in hInvincible do
77699: LD_ADDR_VAR 0 1
77703: PUSH
77704: LD_EXP 104
77708: PUSH
77709: FOR_IN
77710: IFFALSE 77741
// if GetLives ( i ) < 1000 then
77712: LD_VAR 0 1
77716: PPUSH
77717: CALL_OW 256
77721: PUSH
77722: LD_INT 1000
77724: LESS
77725: IFFALSE 77739
// SetLives ( i , 1000 ) ;
77727: LD_VAR 0 1
77731: PPUSH
77732: LD_INT 1000
77734: PPUSH
77735: CALL_OW 234
77739: GO 77709
77741: POP
77742: POP
// end ;
77743: PPOPN 1
77745: END
// export function hHackInvincible ; var i ; begin
77746: LD_INT 0
77748: PPUSH
77749: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
77750: LD_ADDR_VAR 0 2
77754: PUSH
77755: LD_INT 2
77757: PUSH
77758: LD_INT 21
77760: PUSH
77761: LD_INT 1
77763: PUSH
77764: EMPTY
77765: LIST
77766: LIST
77767: PUSH
77768: LD_INT 21
77770: PUSH
77771: LD_INT 2
77773: PUSH
77774: EMPTY
77775: LIST
77776: LIST
77777: PUSH
77778: EMPTY
77779: LIST
77780: LIST
77781: LIST
77782: PPUSH
77783: CALL_OW 69
77787: PUSH
77788: FOR_IN
77789: IFFALSE 77850
// if IsSelected ( i ) then
77791: LD_VAR 0 2
77795: PPUSH
77796: CALL_OW 306
77800: IFFALSE 77848
// begin if i in hInvincible then
77802: LD_VAR 0 2
77806: PUSH
77807: LD_EXP 104
77811: IN
77812: IFFALSE 77832
// hInvincible := hInvincible diff i else
77814: LD_ADDR_EXP 104
77818: PUSH
77819: LD_EXP 104
77823: PUSH
77824: LD_VAR 0 2
77828: DIFF
77829: ST_TO_ADDR
77830: GO 77848
// hInvincible := hInvincible union i ;
77832: LD_ADDR_EXP 104
77836: PUSH
77837: LD_EXP 104
77841: PUSH
77842: LD_VAR 0 2
77846: UNION
77847: ST_TO_ADDR
// end ;
77848: GO 77788
77850: POP
77851: POP
// end ;
77852: LD_VAR 0 1
77856: RET
// export function hHackInvisible ; var i , j ; begin
77857: LD_INT 0
77859: PPUSH
77860: PPUSH
77861: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
77862: LD_ADDR_VAR 0 2
77866: PUSH
77867: LD_INT 21
77869: PUSH
77870: LD_INT 1
77872: PUSH
77873: EMPTY
77874: LIST
77875: LIST
77876: PPUSH
77877: CALL_OW 69
77881: PUSH
77882: FOR_IN
77883: IFFALSE 77907
// if IsSelected ( i ) then
77885: LD_VAR 0 2
77889: PPUSH
77890: CALL_OW 306
77894: IFFALSE 77905
// ComForceInvisible ( i ) ;
77896: LD_VAR 0 2
77900: PPUSH
77901: CALL_OW 496
77905: GO 77882
77907: POP
77908: POP
// end ;
77909: LD_VAR 0 1
77913: RET
// export function hHackChangeYourSide ; begin
77914: LD_INT 0
77916: PPUSH
// if your_side = 8 then
77917: LD_OWVAR 2
77921: PUSH
77922: LD_INT 8
77924: EQUAL
77925: IFFALSE 77937
// your_side := 0 else
77927: LD_ADDR_OWVAR 2
77931: PUSH
77932: LD_INT 0
77934: ST_TO_ADDR
77935: GO 77951
// your_side := your_side + 1 ;
77937: LD_ADDR_OWVAR 2
77941: PUSH
77942: LD_OWVAR 2
77946: PUSH
77947: LD_INT 1
77949: PLUS
77950: ST_TO_ADDR
// end ;
77951: LD_VAR 0 1
77955: RET
// export function hHackChangeUnitSide ; var i , j ; begin
77956: LD_INT 0
77958: PPUSH
77959: PPUSH
77960: PPUSH
// for i in all_units do
77961: LD_ADDR_VAR 0 2
77965: PUSH
77966: LD_OWVAR 3
77970: PUSH
77971: FOR_IN
77972: IFFALSE 78050
// if IsSelected ( i ) then
77974: LD_VAR 0 2
77978: PPUSH
77979: CALL_OW 306
77983: IFFALSE 78048
// begin j := GetSide ( i ) ;
77985: LD_ADDR_VAR 0 3
77989: PUSH
77990: LD_VAR 0 2
77994: PPUSH
77995: CALL_OW 255
77999: ST_TO_ADDR
// if j = 8 then
78000: LD_VAR 0 3
78004: PUSH
78005: LD_INT 8
78007: EQUAL
78008: IFFALSE 78020
// j := 0 else
78010: LD_ADDR_VAR 0 3
78014: PUSH
78015: LD_INT 0
78017: ST_TO_ADDR
78018: GO 78034
// j := j + 1 ;
78020: LD_ADDR_VAR 0 3
78024: PUSH
78025: LD_VAR 0 3
78029: PUSH
78030: LD_INT 1
78032: PLUS
78033: ST_TO_ADDR
// SetSide ( i , j ) ;
78034: LD_VAR 0 2
78038: PPUSH
78039: LD_VAR 0 3
78043: PPUSH
78044: CALL_OW 235
// end ;
78048: GO 77971
78050: POP
78051: POP
// end ;
78052: LD_VAR 0 1
78056: RET
// export function hHackFog ; begin
78057: LD_INT 0
78059: PPUSH
// FogOff ( true ) ;
78060: LD_INT 1
78062: PPUSH
78063: CALL_OW 344
// end ;
78067: LD_VAR 0 1
78071: RET
// export function hHackTeleport ( unit , x , y ) ; begin
78072: LD_INT 0
78074: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
78075: LD_VAR 0 1
78079: PPUSH
78080: LD_VAR 0 2
78084: PPUSH
78085: LD_VAR 0 3
78089: PPUSH
78090: LD_INT 1
78092: PPUSH
78093: LD_INT 1
78095: PPUSH
78096: CALL_OW 483
// CenterOnXY ( x , y ) ;
78100: LD_VAR 0 2
78104: PPUSH
78105: LD_VAR 0 3
78109: PPUSH
78110: CALL_OW 84
// end ;
78114: LD_VAR 0 4
78118: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
78119: LD_INT 0
78121: PPUSH
78122: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
78123: LD_VAR 0 1
78127: NOT
78128: PUSH
78129: LD_VAR 0 2
78133: PPUSH
78134: LD_VAR 0 3
78138: PPUSH
78139: CALL_OW 488
78143: NOT
78144: OR
78145: PUSH
78146: LD_VAR 0 1
78150: PPUSH
78151: CALL_OW 266
78155: PUSH
78156: LD_INT 3
78158: NONEQUAL
78159: PUSH
78160: LD_VAR 0 1
78164: PPUSH
78165: CALL_OW 247
78169: PUSH
78170: LD_INT 1
78172: EQUAL
78173: NOT
78174: AND
78175: OR
78176: IFFALSE 78180
// exit ;
78178: GO 78462
// if GetType ( factory ) = unit_human then
78180: LD_VAR 0 1
78184: PPUSH
78185: CALL_OW 247
78189: PUSH
78190: LD_INT 1
78192: EQUAL
78193: IFFALSE 78210
// factory := IsInUnit ( factory ) ;
78195: LD_ADDR_VAR 0 1
78199: PUSH
78200: LD_VAR 0 1
78204: PPUSH
78205: CALL_OW 310
78209: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
78210: LD_VAR 0 1
78214: PPUSH
78215: CALL_OW 266
78219: PUSH
78220: LD_INT 3
78222: NONEQUAL
78223: IFFALSE 78227
// exit ;
78225: GO 78462
// for i := 1 to Count ( factoryWaypoints ) do
78227: LD_ADDR_VAR 0 5
78231: PUSH
78232: DOUBLE
78233: LD_INT 1
78235: DEC
78236: ST_TO_ADDR
78237: LD_EXP 105
78241: PPUSH
78242: CALL 22853 0 1
78246: PUSH
78247: FOR_TO
78248: IFFALSE 78410
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
78250: LD_VAR 0 2
78254: PPUSH
78255: LD_VAR 0 3
78259: PPUSH
78260: CALL_OW 428
78264: PUSH
78265: LD_EXP 105
78269: PUSH
78270: LD_VAR 0 5
78274: ARRAY
78275: PUSH
78276: LD_INT 2
78278: ARRAY
78279: EQUAL
78280: IFFALSE 78312
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
78282: LD_ADDR_EXP 105
78286: PUSH
78287: LD_EXP 105
78291: PPUSH
78292: LD_VAR 0 5
78296: PPUSH
78297: CALL_OW 3
78301: ST_TO_ADDR
// UpdateFactoryWaypoints ;
78302: CALL 78467 0 0
// exit ;
78306: POP
78307: POP
78308: GO 78462
// end else
78310: GO 78408
// if factory = factoryWaypoints [ i ] [ 2 ] then
78312: LD_VAR 0 1
78316: PUSH
78317: LD_EXP 105
78321: PUSH
78322: LD_VAR 0 5
78326: ARRAY
78327: PUSH
78328: LD_INT 2
78330: ARRAY
78331: EQUAL
78332: IFFALSE 78408
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
78334: LD_ADDR_EXP 105
78338: PUSH
78339: LD_EXP 105
78343: PPUSH
78344: LD_VAR 0 5
78348: PPUSH
78349: CALL_OW 3
78353: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
78354: LD_ADDR_EXP 105
78358: PUSH
78359: LD_EXP 105
78363: PPUSH
78364: LD_VAR 0 1
78368: PPUSH
78369: CALL_OW 255
78373: PUSH
78374: LD_VAR 0 1
78378: PUSH
78379: LD_VAR 0 2
78383: PUSH
78384: LD_VAR 0 3
78388: PUSH
78389: EMPTY
78390: LIST
78391: LIST
78392: LIST
78393: LIST
78394: PPUSH
78395: CALL 58462 0 2
78399: ST_TO_ADDR
// UpdateFactoryWaypoints ;
78400: CALL 78467 0 0
// exit ;
78404: POP
78405: POP
78406: GO 78462
// end ; end ;
78408: GO 78247
78410: POP
78411: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
78412: LD_ADDR_EXP 105
78416: PUSH
78417: LD_EXP 105
78421: PPUSH
78422: LD_VAR 0 1
78426: PPUSH
78427: CALL_OW 255
78431: PUSH
78432: LD_VAR 0 1
78436: PUSH
78437: LD_VAR 0 2
78441: PUSH
78442: LD_VAR 0 3
78446: PUSH
78447: EMPTY
78448: LIST
78449: LIST
78450: LIST
78451: LIST
78452: PPUSH
78453: CALL 58462 0 2
78457: ST_TO_ADDR
// UpdateFactoryWaypoints ;
78458: CALL 78467 0 0
// end ;
78462: LD_VAR 0 4
78466: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
78467: LD_INT 0
78469: PPUSH
78470: PPUSH
78471: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
78472: LD_STRING resetFactoryWaypoint();
78474: PPUSH
78475: CALL_OW 559
// if factoryWaypoints then
78479: LD_EXP 105
78483: IFFALSE 78604
// begin list := factoryWaypoints ;
78485: LD_ADDR_VAR 0 3
78489: PUSH
78490: LD_EXP 105
78494: ST_TO_ADDR
// for i := 1 to list do
78495: LD_ADDR_VAR 0 2
78499: PUSH
78500: DOUBLE
78501: LD_INT 1
78503: DEC
78504: ST_TO_ADDR
78505: LD_VAR 0 3
78509: PUSH
78510: FOR_TO
78511: IFFALSE 78602
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
78513: LD_STRING setFactoryWaypointXY(
78515: PUSH
78516: LD_VAR 0 3
78520: PUSH
78521: LD_VAR 0 2
78525: ARRAY
78526: PUSH
78527: LD_INT 1
78529: ARRAY
78530: STR
78531: PUSH
78532: LD_STRING ,
78534: STR
78535: PUSH
78536: LD_VAR 0 3
78540: PUSH
78541: LD_VAR 0 2
78545: ARRAY
78546: PUSH
78547: LD_INT 2
78549: ARRAY
78550: STR
78551: PUSH
78552: LD_STRING ,
78554: STR
78555: PUSH
78556: LD_VAR 0 3
78560: PUSH
78561: LD_VAR 0 2
78565: ARRAY
78566: PUSH
78567: LD_INT 3
78569: ARRAY
78570: STR
78571: PUSH
78572: LD_STRING ,
78574: STR
78575: PUSH
78576: LD_VAR 0 3
78580: PUSH
78581: LD_VAR 0 2
78585: ARRAY
78586: PUSH
78587: LD_INT 4
78589: ARRAY
78590: STR
78591: PUSH
78592: LD_STRING )
78594: STR
78595: PPUSH
78596: CALL_OW 559
78600: GO 78510
78602: POP
78603: POP
// end ; end ;
78604: LD_VAR 0 1
78608: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
78609: LD_INT 0
78611: PPUSH
// if HexInfo ( x , y ) = warehouse then
78612: LD_VAR 0 2
78616: PPUSH
78617: LD_VAR 0 3
78621: PPUSH
78622: CALL_OW 428
78626: PUSH
78627: LD_VAR 0 1
78631: EQUAL
78632: IFFALSE 78659
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
78634: LD_ADDR_EXP 106
78638: PUSH
78639: LD_EXP 106
78643: PPUSH
78644: LD_VAR 0 1
78648: PPUSH
78649: LD_INT 0
78651: PPUSH
78652: CALL_OW 1
78656: ST_TO_ADDR
78657: GO 78710
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
78659: LD_ADDR_EXP 106
78663: PUSH
78664: LD_EXP 106
78668: PPUSH
78669: LD_VAR 0 1
78673: PPUSH
78674: LD_VAR 0 1
78678: PPUSH
78679: CALL_OW 255
78683: PUSH
78684: LD_VAR 0 1
78688: PUSH
78689: LD_VAR 0 2
78693: PUSH
78694: LD_VAR 0 3
78698: PUSH
78699: EMPTY
78700: LIST
78701: LIST
78702: LIST
78703: LIST
78704: PPUSH
78705: CALL_OW 1
78709: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
78710: CALL 78719 0 0
// end ;
78714: LD_VAR 0 4
78718: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
78719: LD_INT 0
78721: PPUSH
78722: PPUSH
78723: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
78724: LD_STRING resetWarehouseGatheringPoints();
78726: PPUSH
78727: CALL_OW 559
// if warehouseGatheringPoints then
78731: LD_EXP 106
78735: IFFALSE 78861
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
78737: LD_ADDR_VAR 0 3
78741: PUSH
78742: LD_EXP 106
78746: PPUSH
78747: CALL 62230 0 1
78751: ST_TO_ADDR
// for i := 1 to list do
78752: LD_ADDR_VAR 0 2
78756: PUSH
78757: DOUBLE
78758: LD_INT 1
78760: DEC
78761: ST_TO_ADDR
78762: LD_VAR 0 3
78766: PUSH
78767: FOR_TO
78768: IFFALSE 78859
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
78770: LD_STRING setWarehouseGatheringPointXY(
78772: PUSH
78773: LD_VAR 0 3
78777: PUSH
78778: LD_VAR 0 2
78782: ARRAY
78783: PUSH
78784: LD_INT 1
78786: ARRAY
78787: STR
78788: PUSH
78789: LD_STRING ,
78791: STR
78792: PUSH
78793: LD_VAR 0 3
78797: PUSH
78798: LD_VAR 0 2
78802: ARRAY
78803: PUSH
78804: LD_INT 2
78806: ARRAY
78807: STR
78808: PUSH
78809: LD_STRING ,
78811: STR
78812: PUSH
78813: LD_VAR 0 3
78817: PUSH
78818: LD_VAR 0 2
78822: ARRAY
78823: PUSH
78824: LD_INT 3
78826: ARRAY
78827: STR
78828: PUSH
78829: LD_STRING ,
78831: STR
78832: PUSH
78833: LD_VAR 0 3
78837: PUSH
78838: LD_VAR 0 2
78842: ARRAY
78843: PUSH
78844: LD_INT 4
78846: ARRAY
78847: STR
78848: PUSH
78849: LD_STRING )
78851: STR
78852: PPUSH
78853: CALL_OW 559
78857: GO 78767
78859: POP
78860: POP
// end ; end ;
78861: LD_VAR 0 1
78865: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
78866: LD_EXP 106
78870: IFFALSE 79555
78872: GO 78874
78874: DISABLE
78875: LD_INT 0
78877: PPUSH
78878: PPUSH
78879: PPUSH
78880: PPUSH
78881: PPUSH
78882: PPUSH
78883: PPUSH
78884: PPUSH
78885: PPUSH
// begin enable ;
78886: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
78887: LD_ADDR_VAR 0 3
78891: PUSH
78892: LD_EXP 106
78896: PPUSH
78897: CALL 62230 0 1
78901: ST_TO_ADDR
// if not list then
78902: LD_VAR 0 3
78906: NOT
78907: IFFALSE 78911
// exit ;
78909: GO 79555
// for i := 1 to list do
78911: LD_ADDR_VAR 0 1
78915: PUSH
78916: DOUBLE
78917: LD_INT 1
78919: DEC
78920: ST_TO_ADDR
78921: LD_VAR 0 3
78925: PUSH
78926: FOR_TO
78927: IFFALSE 79553
// begin depot := list [ i ] [ 2 ] ;
78929: LD_ADDR_VAR 0 8
78933: PUSH
78934: LD_VAR 0 3
78938: PUSH
78939: LD_VAR 0 1
78943: ARRAY
78944: PUSH
78945: LD_INT 2
78947: ARRAY
78948: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
78949: LD_ADDR_VAR 0 5
78953: PUSH
78954: LD_VAR 0 3
78958: PUSH
78959: LD_VAR 0 1
78963: ARRAY
78964: PUSH
78965: LD_INT 1
78967: ARRAY
78968: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
78969: LD_VAR 0 8
78973: PPUSH
78974: CALL_OW 301
78978: PUSH
78979: LD_VAR 0 5
78983: PUSH
78984: LD_VAR 0 8
78988: PPUSH
78989: CALL_OW 255
78993: NONEQUAL
78994: OR
78995: IFFALSE 79024
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
78997: LD_ADDR_EXP 106
79001: PUSH
79002: LD_EXP 106
79006: PPUSH
79007: LD_VAR 0 8
79011: PPUSH
79012: LD_INT 0
79014: PPUSH
79015: CALL_OW 1
79019: ST_TO_ADDR
// exit ;
79020: POP
79021: POP
79022: GO 79555
// end ; x := list [ i ] [ 3 ] ;
79024: LD_ADDR_VAR 0 6
79028: PUSH
79029: LD_VAR 0 3
79033: PUSH
79034: LD_VAR 0 1
79038: ARRAY
79039: PUSH
79040: LD_INT 3
79042: ARRAY
79043: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
79044: LD_ADDR_VAR 0 7
79048: PUSH
79049: LD_VAR 0 3
79053: PUSH
79054: LD_VAR 0 1
79058: ARRAY
79059: PUSH
79060: LD_INT 4
79062: ARRAY
79063: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
79064: LD_ADDR_VAR 0 9
79068: PUSH
79069: LD_VAR 0 6
79073: PPUSH
79074: LD_VAR 0 7
79078: PPUSH
79079: LD_INT 16
79081: PPUSH
79082: CALL 60814 0 3
79086: ST_TO_ADDR
// if not cratesNearbyPoint then
79087: LD_VAR 0 9
79091: NOT
79092: IFFALSE 79098
// exit ;
79094: POP
79095: POP
79096: GO 79555
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
79098: LD_ADDR_VAR 0 4
79102: PUSH
79103: LD_INT 22
79105: PUSH
79106: LD_VAR 0 5
79110: PUSH
79111: EMPTY
79112: LIST
79113: LIST
79114: PUSH
79115: LD_INT 3
79117: PUSH
79118: LD_INT 60
79120: PUSH
79121: EMPTY
79122: LIST
79123: PUSH
79124: EMPTY
79125: LIST
79126: LIST
79127: PUSH
79128: LD_INT 91
79130: PUSH
79131: LD_VAR 0 8
79135: PUSH
79136: LD_INT 6
79138: PUSH
79139: EMPTY
79140: LIST
79141: LIST
79142: LIST
79143: PUSH
79144: LD_INT 2
79146: PUSH
79147: LD_INT 25
79149: PUSH
79150: LD_INT 2
79152: PUSH
79153: EMPTY
79154: LIST
79155: LIST
79156: PUSH
79157: LD_INT 25
79159: PUSH
79160: LD_INT 16
79162: PUSH
79163: EMPTY
79164: LIST
79165: LIST
79166: PUSH
79167: EMPTY
79168: LIST
79169: LIST
79170: LIST
79171: PUSH
79172: EMPTY
79173: LIST
79174: LIST
79175: LIST
79176: LIST
79177: PPUSH
79178: CALL_OW 69
79182: PUSH
79183: LD_VAR 0 8
79187: PPUSH
79188: CALL_OW 313
79192: PPUSH
79193: LD_INT 3
79195: PUSH
79196: LD_INT 60
79198: PUSH
79199: EMPTY
79200: LIST
79201: PUSH
79202: EMPTY
79203: LIST
79204: LIST
79205: PUSH
79206: LD_INT 2
79208: PUSH
79209: LD_INT 25
79211: PUSH
79212: LD_INT 2
79214: PUSH
79215: EMPTY
79216: LIST
79217: LIST
79218: PUSH
79219: LD_INT 25
79221: PUSH
79222: LD_INT 16
79224: PUSH
79225: EMPTY
79226: LIST
79227: LIST
79228: PUSH
79229: EMPTY
79230: LIST
79231: LIST
79232: LIST
79233: PUSH
79234: EMPTY
79235: LIST
79236: LIST
79237: PPUSH
79238: CALL_OW 72
79242: UNION
79243: ST_TO_ADDR
// if tmp then
79244: LD_VAR 0 4
79248: IFFALSE 79328
// begin tmp := ShrinkArray ( tmp , 3 ) ;
79250: LD_ADDR_VAR 0 4
79254: PUSH
79255: LD_VAR 0 4
79259: PPUSH
79260: LD_INT 3
79262: PPUSH
79263: CALL 58777 0 2
79267: ST_TO_ADDR
// for j in tmp do
79268: LD_ADDR_VAR 0 2
79272: PUSH
79273: LD_VAR 0 4
79277: PUSH
79278: FOR_IN
79279: IFFALSE 79322
// begin if IsInUnit ( j ) then
79281: LD_VAR 0 2
79285: PPUSH
79286: CALL_OW 310
79290: IFFALSE 79301
// ComExit ( j ) ;
79292: LD_VAR 0 2
79296: PPUSH
79297: CALL 58860 0 1
// AddComCollect ( j , x , y ) ;
79301: LD_VAR 0 2
79305: PPUSH
79306: LD_VAR 0 6
79310: PPUSH
79311: LD_VAR 0 7
79315: PPUSH
79316: CALL_OW 177
// end ;
79320: GO 79278
79322: POP
79323: POP
// exit ;
79324: POP
79325: POP
79326: GO 79555
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
79328: LD_ADDR_VAR 0 4
79332: PUSH
79333: LD_INT 22
79335: PUSH
79336: LD_VAR 0 5
79340: PUSH
79341: EMPTY
79342: LIST
79343: LIST
79344: PUSH
79345: LD_INT 91
79347: PUSH
79348: LD_VAR 0 8
79352: PUSH
79353: LD_INT 8
79355: PUSH
79356: EMPTY
79357: LIST
79358: LIST
79359: LIST
79360: PUSH
79361: LD_INT 2
79363: PUSH
79364: LD_INT 34
79366: PUSH
79367: LD_INT 12
79369: PUSH
79370: EMPTY
79371: LIST
79372: LIST
79373: PUSH
79374: LD_INT 34
79376: PUSH
79377: LD_INT 51
79379: PUSH
79380: EMPTY
79381: LIST
79382: LIST
79383: PUSH
79384: LD_INT 34
79386: PUSH
79387: LD_INT 32
79389: PUSH
79390: EMPTY
79391: LIST
79392: LIST
79393: PUSH
79394: LD_INT 34
79396: PUSH
79397: LD_INT 89
79399: PUSH
79400: EMPTY
79401: LIST
79402: LIST
79403: PUSH
79404: EMPTY
79405: LIST
79406: LIST
79407: LIST
79408: LIST
79409: LIST
79410: PUSH
79411: EMPTY
79412: LIST
79413: LIST
79414: LIST
79415: PPUSH
79416: CALL_OW 69
79420: ST_TO_ADDR
// if tmp then
79421: LD_VAR 0 4
79425: IFFALSE 79551
// begin for j in tmp do
79427: LD_ADDR_VAR 0 2
79431: PUSH
79432: LD_VAR 0 4
79436: PUSH
79437: FOR_IN
79438: IFFALSE 79549
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
79440: LD_VAR 0 2
79444: PPUSH
79445: CALL_OW 262
79449: PUSH
79450: LD_INT 3
79452: EQUAL
79453: PUSH
79454: LD_VAR 0 2
79458: PPUSH
79459: CALL_OW 261
79463: PUSH
79464: LD_INT 20
79466: GREATER
79467: OR
79468: PUSH
79469: LD_VAR 0 2
79473: PPUSH
79474: CALL_OW 314
79478: NOT
79479: AND
79480: PUSH
79481: LD_VAR 0 2
79485: PPUSH
79486: CALL_OW 263
79490: PUSH
79491: LD_INT 1
79493: NONEQUAL
79494: PUSH
79495: LD_VAR 0 2
79499: PPUSH
79500: CALL_OW 311
79504: OR
79505: AND
79506: IFFALSE 79547
// begin ComCollect ( j , x , y ) ;
79508: LD_VAR 0 2
79512: PPUSH
79513: LD_VAR 0 6
79517: PPUSH
79518: LD_VAR 0 7
79522: PPUSH
79523: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
79527: LD_VAR 0 2
79531: PPUSH
79532: LD_VAR 0 8
79536: PPUSH
79537: CALL_OW 172
// exit ;
79541: POP
79542: POP
79543: POP
79544: POP
79545: GO 79555
// end ;
79547: GO 79437
79549: POP
79550: POP
// end ; end ;
79551: GO 78926
79553: POP
79554: POP
// end ; end_of_file
79555: PPOPN 9
79557: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
79558: LD_VAR 0 1
79562: PUSH
79563: LD_INT 200
79565: DOUBLE
79566: GREATEREQUAL
79567: IFFALSE 79575
79569: LD_INT 299
79571: DOUBLE
79572: LESSEQUAL
79573: IFTRUE 79577
79575: GO 79609
79577: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
79578: LD_VAR 0 1
79582: PPUSH
79583: LD_VAR 0 2
79587: PPUSH
79588: LD_VAR 0 3
79592: PPUSH
79593: LD_VAR 0 4
79597: PPUSH
79598: LD_VAR 0 5
79602: PPUSH
79603: CALL 80306 0 5
79607: GO 79686
79609: LD_INT 300
79611: DOUBLE
79612: GREATEREQUAL
79613: IFFALSE 79621
79615: LD_INT 399
79617: DOUBLE
79618: LESSEQUAL
79619: IFTRUE 79623
79621: GO 79685
79623: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
79624: LD_VAR 0 1
79628: PPUSH
79629: LD_VAR 0 2
79633: PPUSH
79634: LD_VAR 0 3
79638: PPUSH
79639: LD_VAR 0 4
79643: PPUSH
79644: LD_VAR 0 5
79648: PPUSH
79649: LD_VAR 0 6
79653: PPUSH
79654: LD_VAR 0 7
79658: PPUSH
79659: LD_VAR 0 8
79663: PPUSH
79664: LD_VAR 0 9
79668: PPUSH
79669: LD_VAR 0 10
79673: PPUSH
79674: LD_VAR 0 11
79678: PPUSH
79679: CALL 76131 0 11
79683: GO 79686
79685: POP
// end ;
79686: PPOPN 11
79688: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
79689: LD_VAR 0 1
79693: PPUSH
79694: LD_VAR 0 2
79698: PPUSH
79699: LD_VAR 0 3
79703: PPUSH
79704: LD_VAR 0 4
79708: PPUSH
79709: LD_VAR 0 5
79713: PPUSH
79714: CALL 79771 0 5
// end ; end_of_file
79718: PPOPN 5
79720: END
// export function SOS_UnitDestroyed ( un ) ; begin
79721: LD_INT 0
79723: PPUSH
// ComRadiation ( un ) ;
79724: LD_VAR 0 1
79728: PPUSH
79729: CALL 80710 0 1
// end ;
79733: LD_VAR 0 2
79737: RET
// export function SOS_UnitKamikazed ( un ) ; begin
79738: LD_INT 0
79740: PPUSH
// ComRadiation ( un ) ;
79741: LD_VAR 0 1
79745: PPUSH
79746: CALL 80710 0 1
// end ;
79750: LD_VAR 0 2
79754: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
79755: LD_INT 0
79757: PPUSH
// end ;
79758: LD_VAR 0 4
79762: RET
// export function SOS_Command ( cmd ) ; begin
79763: LD_INT 0
79765: PPUSH
// end ;
79766: LD_VAR 0 2
79770: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
79771: LD_INT 0
79773: PPUSH
// end ;
79774: LD_VAR 0 6
79778: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
79779: LD_INT 0
79781: PPUSH
79782: PPUSH
79783: PPUSH
79784: PPUSH
79785: PPUSH
// if not vehicle or not factory then
79786: LD_VAR 0 1
79790: NOT
79791: PUSH
79792: LD_VAR 0 2
79796: NOT
79797: OR
79798: IFFALSE 79802
// exit ;
79800: GO 80301
// if not factoryWaypoints then
79802: LD_EXP 105
79806: NOT
79807: IFFALSE 79811
// exit ;
79809: GO 80301
// for i := 1 to Count ( factoryWaypoints ) do
79811: LD_ADDR_VAR 0 4
79815: PUSH
79816: DOUBLE
79817: LD_INT 1
79819: DEC
79820: ST_TO_ADDR
79821: LD_EXP 105
79825: PPUSH
79826: CALL 22853 0 1
79830: PUSH
79831: FOR_TO
79832: IFFALSE 80299
// if factoryWaypoints [ i ] [ 2 ] = factory then
79834: LD_EXP 105
79838: PUSH
79839: LD_VAR 0 4
79843: ARRAY
79844: PUSH
79845: LD_INT 2
79847: ARRAY
79848: PUSH
79849: LD_VAR 0 2
79853: EQUAL
79854: IFFALSE 80297
// begin if GetControl ( vehicle ) = control_manual then
79856: LD_VAR 0 1
79860: PPUSH
79861: CALL_OW 263
79865: PUSH
79866: LD_INT 1
79868: EQUAL
79869: IFFALSE 80180
// begin driver := IsDrivenBy ( vehicle ) ;
79871: LD_ADDR_VAR 0 6
79875: PUSH
79876: LD_VAR 0 1
79880: PPUSH
79881: CALL_OW 311
79885: ST_TO_ADDR
// tag := GetTag ( driver ) ;
79886: LD_ADDR_VAR 0 5
79890: PUSH
79891: LD_VAR 0 6
79895: PPUSH
79896: CALL_OW 110
79900: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
79901: LD_VAR 0 5
79905: PUSH
79906: LD_INT 501
79908: EQUAL
79909: PUSH
79910: LD_VAR 0 1
79914: PPUSH
79915: CALL_OW 110
79919: PUSH
79920: LD_INT 501
79922: EQUAL
79923: OR
79924: IFFALSE 79930
// exit ;
79926: POP
79927: POP
79928: GO 80301
// if not HasTask ( driver ) then
79930: LD_VAR 0 6
79934: PPUSH
79935: CALL_OW 314
79939: NOT
79940: IFFALSE 80178
// begin SetTag ( driver , tDriver ) ;
79942: LD_VAR 0 6
79946: PPUSH
79947: LD_INT 501
79949: PPUSH
79950: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
79954: LD_VAR 0 1
79958: PPUSH
79959: LD_INT 501
79961: PPUSH
79962: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
79966: LD_ADDR_VAR 0 7
79970: PUSH
79971: LD_EXP 105
79975: PUSH
79976: LD_VAR 0 4
79980: ARRAY
79981: PUSH
79982: LD_INT 3
79984: ARRAY
79985: PPUSH
79986: LD_EXP 105
79990: PUSH
79991: LD_VAR 0 4
79995: ARRAY
79996: PUSH
79997: LD_INT 4
79999: ARRAY
80000: PPUSH
80001: CALL_OW 428
80005: ST_TO_ADDR
// if hex then
80006: LD_VAR 0 7
80010: IFFALSE 80028
// ComMoveUnit ( driver , hex ) else
80012: LD_VAR 0 6
80016: PPUSH
80017: LD_VAR 0 7
80021: PPUSH
80022: CALL_OW 112
80026: GO 80067
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
80028: LD_VAR 0 6
80032: PPUSH
80033: LD_EXP 105
80037: PUSH
80038: LD_VAR 0 4
80042: ARRAY
80043: PUSH
80044: LD_INT 3
80046: ARRAY
80047: PPUSH
80048: LD_EXP 105
80052: PUSH
80053: LD_VAR 0 4
80057: ARRAY
80058: PUSH
80059: LD_INT 4
80061: ARRAY
80062: PPUSH
80063: CALL_OW 111
// AddComExitVehicle ( driver ) ;
80067: LD_VAR 0 6
80071: PPUSH
80072: CALL_OW 181
// if Multiplayer then
80076: LD_OWVAR 4
80080: IFFALSE 80129
// begin repeat wait ( 10 ) ;
80082: LD_INT 10
80084: PPUSH
80085: CALL_OW 67
// until not IsInUnit ( driver ) ;
80089: LD_VAR 0 6
80093: PPUSH
80094: CALL_OW 310
80098: NOT
80099: IFFALSE 80082
// if not HasTask ( driver ) then
80101: LD_VAR 0 6
80105: PPUSH
80106: CALL_OW 314
80110: NOT
80111: IFFALSE 80127
// ComEnterUnit ( driver , factory ) ;
80113: LD_VAR 0 6
80117: PPUSH
80118: LD_VAR 0 2
80122: PPUSH
80123: CALL_OW 120
// end else
80127: GO 80143
// AddComEnterUnit ( driver , factory ) ;
80129: LD_VAR 0 6
80133: PPUSH
80134: LD_VAR 0 2
80138: PPUSH
80139: CALL_OW 180
// wait ( 0 0$1 ) ;
80143: LD_INT 35
80145: PPUSH
80146: CALL_OW 67
// SetTag ( driver , tag ) ;
80150: LD_VAR 0 6
80154: PPUSH
80155: LD_VAR 0 5
80159: PPUSH
80160: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
80164: LD_VAR 0 1
80168: PPUSH
80169: LD_INT 0
80171: PPUSH
80172: CALL_OW 109
// break ;
80176: GO 80299
// end ; end else
80178: GO 80297
// if GetControl ( vehicle ) = control_remote then
80180: LD_VAR 0 1
80184: PPUSH
80185: CALL_OW 263
80189: PUSH
80190: LD_INT 2
80192: EQUAL
80193: IFFALSE 80256
// begin wait ( 0 0$2 ) ;
80195: LD_INT 70
80197: PPUSH
80198: CALL_OW 67
// if Connect ( vehicle ) then
80202: LD_VAR 0 1
80206: PPUSH
80207: CALL 29059 0 1
80211: IFFALSE 80252
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
80213: LD_VAR 0 1
80217: PPUSH
80218: LD_EXP 105
80222: PUSH
80223: LD_VAR 0 4
80227: ARRAY
80228: PUSH
80229: LD_INT 3
80231: ARRAY
80232: PPUSH
80233: LD_EXP 105
80237: PUSH
80238: LD_VAR 0 4
80242: ARRAY
80243: PUSH
80244: LD_INT 4
80246: ARRAY
80247: PPUSH
80248: CALL_OW 171
// break ;
80252: GO 80299
// end else
80254: GO 80297
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
80256: LD_VAR 0 1
80260: PPUSH
80261: LD_EXP 105
80265: PUSH
80266: LD_VAR 0 4
80270: ARRAY
80271: PUSH
80272: LD_INT 3
80274: ARRAY
80275: PPUSH
80276: LD_EXP 105
80280: PUSH
80281: LD_VAR 0 4
80285: ARRAY
80286: PUSH
80287: LD_INT 4
80289: ARRAY
80290: PPUSH
80291: CALL_OW 171
// break ;
80295: GO 80299
// end ; end ;
80297: GO 79831
80299: POP
80300: POP
// end ;
80301: LD_VAR 0 3
80305: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
80306: LD_INT 0
80308: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
80309: LD_VAR 0 1
80313: PUSH
80314: LD_INT 250
80316: EQUAL
80317: PUSH
80318: LD_VAR 0 2
80322: PPUSH
80323: CALL_OW 264
80327: PUSH
80328: LD_INT 81
80330: EQUAL
80331: AND
80332: IFFALSE 80353
// MinerPlaceMine ( unit , x , y ) ;
80334: LD_VAR 0 2
80338: PPUSH
80339: LD_VAR 0 4
80343: PPUSH
80344: LD_VAR 0 5
80348: PPUSH
80349: CALL 83445 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
80353: LD_VAR 0 1
80357: PUSH
80358: LD_INT 251
80360: EQUAL
80361: PUSH
80362: LD_VAR 0 2
80366: PPUSH
80367: CALL_OW 264
80371: PUSH
80372: LD_INT 81
80374: EQUAL
80375: AND
80376: IFFALSE 80397
// MinerDetonateMine ( unit , x , y ) ;
80378: LD_VAR 0 2
80382: PPUSH
80383: LD_VAR 0 4
80387: PPUSH
80388: LD_VAR 0 5
80392: PPUSH
80393: CALL 83720 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
80397: LD_VAR 0 1
80401: PUSH
80402: LD_INT 252
80404: EQUAL
80405: PUSH
80406: LD_VAR 0 2
80410: PPUSH
80411: CALL_OW 264
80415: PUSH
80416: LD_INT 81
80418: EQUAL
80419: AND
80420: IFFALSE 80441
// MinerCreateMinefield ( unit , x , y ) ;
80422: LD_VAR 0 2
80426: PPUSH
80427: LD_VAR 0 4
80431: PPUSH
80432: LD_VAR 0 5
80436: PPUSH
80437: CALL 84137 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
80441: LD_VAR 0 1
80445: PUSH
80446: LD_INT 253
80448: EQUAL
80449: PUSH
80450: LD_VAR 0 2
80454: PPUSH
80455: CALL_OW 257
80459: PUSH
80460: LD_INT 5
80462: EQUAL
80463: AND
80464: IFFALSE 80485
// ComBinocular ( unit , x , y ) ;
80466: LD_VAR 0 2
80470: PPUSH
80471: LD_VAR 0 4
80475: PPUSH
80476: LD_VAR 0 5
80480: PPUSH
80481: CALL 84506 0 3
// if selectedUnit then
80485: LD_VAR 0 3
80489: IFFALSE 80545
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
80491: LD_VAR 0 1
80495: PUSH
80496: LD_INT 254
80498: EQUAL
80499: PUSH
80500: LD_VAR 0 2
80504: PPUSH
80505: CALL_OW 264
80509: PUSH
80510: LD_INT 99
80512: EQUAL
80513: AND
80514: PUSH
80515: LD_VAR 0 3
80519: PPUSH
80520: CALL_OW 263
80524: PUSH
80525: LD_INT 3
80527: EQUAL
80528: AND
80529: IFFALSE 80545
// HackDestroyVehicle ( unit , selectedUnit ) ;
80531: LD_VAR 0 2
80535: PPUSH
80536: LD_VAR 0 3
80540: PPUSH
80541: CALL 82809 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
80545: LD_VAR 0 1
80549: PUSH
80550: LD_INT 255
80552: EQUAL
80553: PUSH
80554: LD_VAR 0 2
80558: PPUSH
80559: CALL_OW 264
80563: PUSH
80564: LD_INT 14
80566: PUSH
80567: LD_INT 53
80569: PUSH
80570: EMPTY
80571: LIST
80572: LIST
80573: IN
80574: AND
80575: PUSH
80576: LD_VAR 0 4
80580: PPUSH
80581: LD_VAR 0 5
80585: PPUSH
80586: CALL_OW 488
80590: AND
80591: IFFALSE 80615
// CutTreeXYR ( unit , x , y , 12 ) ;
80593: LD_VAR 0 2
80597: PPUSH
80598: LD_VAR 0 4
80602: PPUSH
80603: LD_VAR 0 5
80607: PPUSH
80608: LD_INT 12
80610: PPUSH
80611: CALL 80806 0 4
// if cmd = 256 then
80615: LD_VAR 0 1
80619: PUSH
80620: LD_INT 256
80622: EQUAL
80623: IFFALSE 80644
// SetFactoryWaypoint ( unit , x , y ) ;
80625: LD_VAR 0 2
80629: PPUSH
80630: LD_VAR 0 4
80634: PPUSH
80635: LD_VAR 0 5
80639: PPUSH
80640: CALL 78119 0 3
// if cmd = 257 then
80644: LD_VAR 0 1
80648: PUSH
80649: LD_INT 257
80651: EQUAL
80652: IFFALSE 80673
// SetWarehouseGatheringPoint ( unit , x , y ) ;
80654: LD_VAR 0 2
80658: PPUSH
80659: LD_VAR 0 4
80663: PPUSH
80664: LD_VAR 0 5
80668: PPUSH
80669: CALL 78609 0 3
// if cmd = 258 then
80673: LD_VAR 0 1
80677: PUSH
80678: LD_INT 258
80680: EQUAL
80681: IFFALSE 80705
// BurnTreeXYR ( unit , x , y , 8 ) ;
80683: LD_VAR 0 2
80687: PPUSH
80688: LD_VAR 0 4
80692: PPUSH
80693: LD_VAR 0 5
80697: PPUSH
80698: LD_INT 8
80700: PPUSH
80701: CALL 81200 0 4
// end ;
80705: LD_VAR 0 6
80709: RET
// export function ComRadiation ( un ) ; var eff ; begin
80710: LD_INT 0
80712: PPUSH
80713: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
80714: LD_VAR 0 1
80718: PPUSH
80719: CALL_OW 264
80723: PUSH
80724: LD_INT 91
80726: NONEQUAL
80727: IFFALSE 80731
// exit ;
80729: GO 80801
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
80731: LD_INT 68
80733: PPUSH
80734: LD_VAR 0 1
80738: PPUSH
80739: CALL_OW 255
80743: PPUSH
80744: CALL_OW 321
80748: PUSH
80749: LD_INT 2
80751: EQUAL
80752: IFFALSE 80764
// eff := 70 else
80754: LD_ADDR_VAR 0 3
80758: PUSH
80759: LD_INT 70
80761: ST_TO_ADDR
80762: GO 80772
// eff := 30 ;
80764: LD_ADDR_VAR 0 3
80768: PUSH
80769: LD_INT 30
80771: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
80772: LD_VAR 0 1
80776: PPUSH
80777: CALL_OW 250
80781: PPUSH
80782: LD_VAR 0 1
80786: PPUSH
80787: CALL_OW 251
80791: PPUSH
80792: LD_VAR 0 3
80796: PPUSH
80797: CALL_OW 495
// end ;
80801: LD_VAR 0 2
80805: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
80806: LD_INT 0
80808: PPUSH
80809: PPUSH
80810: PPUSH
80811: PPUSH
80812: PPUSH
80813: PPUSH
80814: PPUSH
80815: PPUSH
80816: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
80817: LD_VAR 0 1
80821: PPUSH
80822: CALL_OW 302
80826: NOT
80827: PUSH
80828: LD_VAR 0 2
80832: PPUSH
80833: LD_VAR 0 3
80837: PPUSH
80838: CALL_OW 488
80842: NOT
80843: OR
80844: PUSH
80845: LD_VAR 0 4
80849: NOT
80850: OR
80851: IFFALSE 80855
// exit ;
80853: GO 81195
// list := [ ] ;
80855: LD_ADDR_VAR 0 13
80859: PUSH
80860: EMPTY
80861: ST_TO_ADDR
// if x - r < 0 then
80862: LD_VAR 0 2
80866: PUSH
80867: LD_VAR 0 4
80871: MINUS
80872: PUSH
80873: LD_INT 0
80875: LESS
80876: IFFALSE 80888
// min_x := 0 else
80878: LD_ADDR_VAR 0 7
80882: PUSH
80883: LD_INT 0
80885: ST_TO_ADDR
80886: GO 80904
// min_x := x - r ;
80888: LD_ADDR_VAR 0 7
80892: PUSH
80893: LD_VAR 0 2
80897: PUSH
80898: LD_VAR 0 4
80902: MINUS
80903: ST_TO_ADDR
// if y - r < 0 then
80904: LD_VAR 0 3
80908: PUSH
80909: LD_VAR 0 4
80913: MINUS
80914: PUSH
80915: LD_INT 0
80917: LESS
80918: IFFALSE 80930
// min_y := 0 else
80920: LD_ADDR_VAR 0 8
80924: PUSH
80925: LD_INT 0
80927: ST_TO_ADDR
80928: GO 80946
// min_y := y - r ;
80930: LD_ADDR_VAR 0 8
80934: PUSH
80935: LD_VAR 0 3
80939: PUSH
80940: LD_VAR 0 4
80944: MINUS
80945: ST_TO_ADDR
// max_x := x + r ;
80946: LD_ADDR_VAR 0 9
80950: PUSH
80951: LD_VAR 0 2
80955: PUSH
80956: LD_VAR 0 4
80960: PLUS
80961: ST_TO_ADDR
// max_y := y + r ;
80962: LD_ADDR_VAR 0 10
80966: PUSH
80967: LD_VAR 0 3
80971: PUSH
80972: LD_VAR 0 4
80976: PLUS
80977: ST_TO_ADDR
// for _x = min_x to max_x do
80978: LD_ADDR_VAR 0 11
80982: PUSH
80983: DOUBLE
80984: LD_VAR 0 7
80988: DEC
80989: ST_TO_ADDR
80990: LD_VAR 0 9
80994: PUSH
80995: FOR_TO
80996: IFFALSE 81113
// for _y = min_y to max_y do
80998: LD_ADDR_VAR 0 12
81002: PUSH
81003: DOUBLE
81004: LD_VAR 0 8
81008: DEC
81009: ST_TO_ADDR
81010: LD_VAR 0 10
81014: PUSH
81015: FOR_TO
81016: IFFALSE 81109
// begin if not ValidHex ( _x , _y ) then
81018: LD_VAR 0 11
81022: PPUSH
81023: LD_VAR 0 12
81027: PPUSH
81028: CALL_OW 488
81032: NOT
81033: IFFALSE 81037
// continue ;
81035: GO 81015
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
81037: LD_VAR 0 11
81041: PPUSH
81042: LD_VAR 0 12
81046: PPUSH
81047: CALL_OW 351
81051: PUSH
81052: LD_VAR 0 11
81056: PPUSH
81057: LD_VAR 0 12
81061: PPUSH
81062: CALL_OW 554
81066: AND
81067: IFFALSE 81107
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
81069: LD_ADDR_VAR 0 13
81073: PUSH
81074: LD_VAR 0 13
81078: PPUSH
81079: LD_VAR 0 13
81083: PUSH
81084: LD_INT 1
81086: PLUS
81087: PPUSH
81088: LD_VAR 0 11
81092: PUSH
81093: LD_VAR 0 12
81097: PUSH
81098: EMPTY
81099: LIST
81100: LIST
81101: PPUSH
81102: CALL_OW 2
81106: ST_TO_ADDR
// end ;
81107: GO 81015
81109: POP
81110: POP
81111: GO 80995
81113: POP
81114: POP
// if not list then
81115: LD_VAR 0 13
81119: NOT
81120: IFFALSE 81124
// exit ;
81122: GO 81195
// for i in list do
81124: LD_ADDR_VAR 0 6
81128: PUSH
81129: LD_VAR 0 13
81133: PUSH
81134: FOR_IN
81135: IFFALSE 81193
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
81137: LD_VAR 0 1
81141: PPUSH
81142: LD_STRING M
81144: PUSH
81145: LD_VAR 0 6
81149: PUSH
81150: LD_INT 1
81152: ARRAY
81153: PUSH
81154: LD_VAR 0 6
81158: PUSH
81159: LD_INT 2
81161: ARRAY
81162: PUSH
81163: LD_INT 0
81165: PUSH
81166: LD_INT 0
81168: PUSH
81169: LD_INT 0
81171: PUSH
81172: LD_INT 0
81174: PUSH
81175: EMPTY
81176: LIST
81177: LIST
81178: LIST
81179: LIST
81180: LIST
81181: LIST
81182: LIST
81183: PUSH
81184: EMPTY
81185: LIST
81186: PPUSH
81187: CALL_OW 447
81191: GO 81134
81193: POP
81194: POP
// end ;
81195: LD_VAR 0 5
81199: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
81200: LD_INT 0
81202: PPUSH
81203: PPUSH
81204: PPUSH
81205: PPUSH
81206: PPUSH
81207: PPUSH
81208: PPUSH
81209: PPUSH
81210: PPUSH
81211: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
81212: LD_VAR 0 1
81216: PPUSH
81217: CALL_OW 302
81221: NOT
81222: PUSH
81223: LD_VAR 0 2
81227: PPUSH
81228: LD_VAR 0 3
81232: PPUSH
81233: CALL_OW 488
81237: NOT
81238: OR
81239: PUSH
81240: LD_VAR 0 4
81244: NOT
81245: OR
81246: IFFALSE 81250
// exit ;
81248: GO 81763
// list := [ ] ;
81250: LD_ADDR_VAR 0 13
81254: PUSH
81255: EMPTY
81256: ST_TO_ADDR
// if x - r < 0 then
81257: LD_VAR 0 2
81261: PUSH
81262: LD_VAR 0 4
81266: MINUS
81267: PUSH
81268: LD_INT 0
81270: LESS
81271: IFFALSE 81283
// min_x := 0 else
81273: LD_ADDR_VAR 0 7
81277: PUSH
81278: LD_INT 0
81280: ST_TO_ADDR
81281: GO 81299
// min_x := x - r ;
81283: LD_ADDR_VAR 0 7
81287: PUSH
81288: LD_VAR 0 2
81292: PUSH
81293: LD_VAR 0 4
81297: MINUS
81298: ST_TO_ADDR
// if y - r < 0 then
81299: LD_VAR 0 3
81303: PUSH
81304: LD_VAR 0 4
81308: MINUS
81309: PUSH
81310: LD_INT 0
81312: LESS
81313: IFFALSE 81325
// min_y := 0 else
81315: LD_ADDR_VAR 0 8
81319: PUSH
81320: LD_INT 0
81322: ST_TO_ADDR
81323: GO 81341
// min_y := y - r ;
81325: LD_ADDR_VAR 0 8
81329: PUSH
81330: LD_VAR 0 3
81334: PUSH
81335: LD_VAR 0 4
81339: MINUS
81340: ST_TO_ADDR
// max_x := x + r ;
81341: LD_ADDR_VAR 0 9
81345: PUSH
81346: LD_VAR 0 2
81350: PUSH
81351: LD_VAR 0 4
81355: PLUS
81356: ST_TO_ADDR
// max_y := y + r ;
81357: LD_ADDR_VAR 0 10
81361: PUSH
81362: LD_VAR 0 3
81366: PUSH
81367: LD_VAR 0 4
81371: PLUS
81372: ST_TO_ADDR
// for _x = min_x to max_x do
81373: LD_ADDR_VAR 0 11
81377: PUSH
81378: DOUBLE
81379: LD_VAR 0 7
81383: DEC
81384: ST_TO_ADDR
81385: LD_VAR 0 9
81389: PUSH
81390: FOR_TO
81391: IFFALSE 81508
// for _y = min_y to max_y do
81393: LD_ADDR_VAR 0 12
81397: PUSH
81398: DOUBLE
81399: LD_VAR 0 8
81403: DEC
81404: ST_TO_ADDR
81405: LD_VAR 0 10
81409: PUSH
81410: FOR_TO
81411: IFFALSE 81504
// begin if not ValidHex ( _x , _y ) then
81413: LD_VAR 0 11
81417: PPUSH
81418: LD_VAR 0 12
81422: PPUSH
81423: CALL_OW 488
81427: NOT
81428: IFFALSE 81432
// continue ;
81430: GO 81410
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
81432: LD_VAR 0 11
81436: PPUSH
81437: LD_VAR 0 12
81441: PPUSH
81442: CALL_OW 351
81446: PUSH
81447: LD_VAR 0 11
81451: PPUSH
81452: LD_VAR 0 12
81456: PPUSH
81457: CALL_OW 554
81461: AND
81462: IFFALSE 81502
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
81464: LD_ADDR_VAR 0 13
81468: PUSH
81469: LD_VAR 0 13
81473: PPUSH
81474: LD_VAR 0 13
81478: PUSH
81479: LD_INT 1
81481: PLUS
81482: PPUSH
81483: LD_VAR 0 11
81487: PUSH
81488: LD_VAR 0 12
81492: PUSH
81493: EMPTY
81494: LIST
81495: LIST
81496: PPUSH
81497: CALL_OW 2
81501: ST_TO_ADDR
// end ;
81502: GO 81410
81504: POP
81505: POP
81506: GO 81390
81508: POP
81509: POP
// if not list then
81510: LD_VAR 0 13
81514: NOT
81515: IFFALSE 81519
// exit ;
81517: GO 81763
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
81519: LD_ADDR_VAR 0 13
81523: PUSH
81524: LD_VAR 0 1
81528: PPUSH
81529: LD_VAR 0 13
81533: PPUSH
81534: LD_INT 1
81536: PPUSH
81537: LD_INT 1
81539: PPUSH
81540: CALL 26201 0 4
81544: ST_TO_ADDR
// ComStop ( flame ) ;
81545: LD_VAR 0 1
81549: PPUSH
81550: CALL_OW 141
// for i in list do
81554: LD_ADDR_VAR 0 6
81558: PUSH
81559: LD_VAR 0 13
81563: PUSH
81564: FOR_IN
81565: IFFALSE 81596
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
81567: LD_VAR 0 1
81571: PPUSH
81572: LD_VAR 0 6
81576: PUSH
81577: LD_INT 1
81579: ARRAY
81580: PPUSH
81581: LD_VAR 0 6
81585: PUSH
81586: LD_INT 2
81588: ARRAY
81589: PPUSH
81590: CALL_OW 176
81594: GO 81564
81596: POP
81597: POP
// repeat wait ( 0 0$1 ) ;
81598: LD_INT 35
81600: PPUSH
81601: CALL_OW 67
// task := GetTaskList ( flame ) ;
81605: LD_ADDR_VAR 0 14
81609: PUSH
81610: LD_VAR 0 1
81614: PPUSH
81615: CALL_OW 437
81619: ST_TO_ADDR
// if not task then
81620: LD_VAR 0 14
81624: NOT
81625: IFFALSE 81629
// exit ;
81627: GO 81763
// if task [ 1 ] [ 1 ] <> | then
81629: LD_VAR 0 14
81633: PUSH
81634: LD_INT 1
81636: ARRAY
81637: PUSH
81638: LD_INT 1
81640: ARRAY
81641: PUSH
81642: LD_STRING |
81644: NONEQUAL
81645: IFFALSE 81649
// exit ;
81647: GO 81763
// _x := task [ 1 ] [ 2 ] ;
81649: LD_ADDR_VAR 0 11
81653: PUSH
81654: LD_VAR 0 14
81658: PUSH
81659: LD_INT 1
81661: ARRAY
81662: PUSH
81663: LD_INT 2
81665: ARRAY
81666: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
81667: LD_ADDR_VAR 0 12
81671: PUSH
81672: LD_VAR 0 14
81676: PUSH
81677: LD_INT 1
81679: ARRAY
81680: PUSH
81681: LD_INT 3
81683: ARRAY
81684: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
81685: LD_VAR 0 11
81689: PPUSH
81690: LD_VAR 0 12
81694: PPUSH
81695: CALL_OW 351
81699: NOT
81700: PUSH
81701: LD_VAR 0 11
81705: PPUSH
81706: LD_VAR 0 12
81710: PPUSH
81711: CALL_OW 554
81715: NOT
81716: OR
81717: IFFALSE 81751
// begin task := Delete ( task , 1 ) ;
81719: LD_ADDR_VAR 0 14
81723: PUSH
81724: LD_VAR 0 14
81728: PPUSH
81729: LD_INT 1
81731: PPUSH
81732: CALL_OW 3
81736: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
81737: LD_VAR 0 1
81741: PPUSH
81742: LD_VAR 0 14
81746: PPUSH
81747: CALL_OW 446
// end ; until not HasTask ( flame ) ;
81751: LD_VAR 0 1
81755: PPUSH
81756: CALL_OW 314
81760: NOT
81761: IFFALSE 81598
// end ;
81763: LD_VAR 0 5
81767: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
81768: LD_EXP 108
81772: NOT
81773: IFFALSE 81823
81775: GO 81777
81777: DISABLE
// begin initHack := true ;
81778: LD_ADDR_EXP 108
81782: PUSH
81783: LD_INT 1
81785: ST_TO_ADDR
// hackTanks := [ ] ;
81786: LD_ADDR_EXP 109
81790: PUSH
81791: EMPTY
81792: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
81793: LD_ADDR_EXP 110
81797: PUSH
81798: EMPTY
81799: ST_TO_ADDR
// hackLimit := 3 ;
81800: LD_ADDR_EXP 111
81804: PUSH
81805: LD_INT 3
81807: ST_TO_ADDR
// hackDist := 12 ;
81808: LD_ADDR_EXP 112
81812: PUSH
81813: LD_INT 12
81815: ST_TO_ADDR
// hackCounter := [ ] ;
81816: LD_ADDR_EXP 113
81820: PUSH
81821: EMPTY
81822: ST_TO_ADDR
// end ;
81823: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
81824: LD_EXP 108
81828: PUSH
81829: LD_INT 34
81831: PUSH
81832: LD_INT 99
81834: PUSH
81835: EMPTY
81836: LIST
81837: LIST
81838: PPUSH
81839: CALL_OW 69
81843: AND
81844: IFFALSE 82097
81846: GO 81848
81848: DISABLE
81849: LD_INT 0
81851: PPUSH
81852: PPUSH
// begin enable ;
81853: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
81854: LD_ADDR_VAR 0 1
81858: PUSH
81859: LD_INT 34
81861: PUSH
81862: LD_INT 99
81864: PUSH
81865: EMPTY
81866: LIST
81867: LIST
81868: PPUSH
81869: CALL_OW 69
81873: PUSH
81874: FOR_IN
81875: IFFALSE 82095
// begin if not i in hackTanks then
81877: LD_VAR 0 1
81881: PUSH
81882: LD_EXP 109
81886: IN
81887: NOT
81888: IFFALSE 81971
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
81890: LD_ADDR_EXP 109
81894: PUSH
81895: LD_EXP 109
81899: PPUSH
81900: LD_EXP 109
81904: PUSH
81905: LD_INT 1
81907: PLUS
81908: PPUSH
81909: LD_VAR 0 1
81913: PPUSH
81914: CALL_OW 1
81918: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
81919: LD_ADDR_EXP 110
81923: PUSH
81924: LD_EXP 110
81928: PPUSH
81929: LD_EXP 110
81933: PUSH
81934: LD_INT 1
81936: PLUS
81937: PPUSH
81938: EMPTY
81939: PPUSH
81940: CALL_OW 1
81944: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
81945: LD_ADDR_EXP 113
81949: PUSH
81950: LD_EXP 113
81954: PPUSH
81955: LD_EXP 113
81959: PUSH
81960: LD_INT 1
81962: PLUS
81963: PPUSH
81964: EMPTY
81965: PPUSH
81966: CALL_OW 1
81970: ST_TO_ADDR
// end ; if not IsOk ( i ) then
81971: LD_VAR 0 1
81975: PPUSH
81976: CALL_OW 302
81980: NOT
81981: IFFALSE 81994
// begin HackUnlinkAll ( i ) ;
81983: LD_VAR 0 1
81987: PPUSH
81988: CALL 82100 0 1
// continue ;
81992: GO 81874
// end ; HackCheckCapturedStatus ( i ) ;
81994: LD_VAR 0 1
81998: PPUSH
81999: CALL 82543 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
82003: LD_ADDR_VAR 0 2
82007: PUSH
82008: LD_INT 81
82010: PUSH
82011: LD_VAR 0 1
82015: PPUSH
82016: CALL_OW 255
82020: PUSH
82021: EMPTY
82022: LIST
82023: LIST
82024: PUSH
82025: LD_INT 33
82027: PUSH
82028: LD_INT 3
82030: PUSH
82031: EMPTY
82032: LIST
82033: LIST
82034: PUSH
82035: LD_INT 91
82037: PUSH
82038: LD_VAR 0 1
82042: PUSH
82043: LD_EXP 112
82047: PUSH
82048: EMPTY
82049: LIST
82050: LIST
82051: LIST
82052: PUSH
82053: LD_INT 50
82055: PUSH
82056: EMPTY
82057: LIST
82058: PUSH
82059: EMPTY
82060: LIST
82061: LIST
82062: LIST
82063: LIST
82064: PPUSH
82065: CALL_OW 69
82069: ST_TO_ADDR
// if not tmp then
82070: LD_VAR 0 2
82074: NOT
82075: IFFALSE 82079
// continue ;
82077: GO 81874
// HackLink ( i , tmp ) ;
82079: LD_VAR 0 1
82083: PPUSH
82084: LD_VAR 0 2
82088: PPUSH
82089: CALL 82236 0 2
// end ;
82093: GO 81874
82095: POP
82096: POP
// end ;
82097: PPOPN 2
82099: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
82100: LD_INT 0
82102: PPUSH
82103: PPUSH
82104: PPUSH
// if not hack in hackTanks then
82105: LD_VAR 0 1
82109: PUSH
82110: LD_EXP 109
82114: IN
82115: NOT
82116: IFFALSE 82120
// exit ;
82118: GO 82231
// index := GetElementIndex ( hackTanks , hack ) ;
82120: LD_ADDR_VAR 0 4
82124: PUSH
82125: LD_EXP 109
82129: PPUSH
82130: LD_VAR 0 1
82134: PPUSH
82135: CALL 25498 0 2
82139: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
82140: LD_EXP 110
82144: PUSH
82145: LD_VAR 0 4
82149: ARRAY
82150: IFFALSE 82231
// begin for i in hackTanksCaptured [ index ] do
82152: LD_ADDR_VAR 0 3
82156: PUSH
82157: LD_EXP 110
82161: PUSH
82162: LD_VAR 0 4
82166: ARRAY
82167: PUSH
82168: FOR_IN
82169: IFFALSE 82195
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
82171: LD_VAR 0 3
82175: PUSH
82176: LD_INT 1
82178: ARRAY
82179: PPUSH
82180: LD_VAR 0 3
82184: PUSH
82185: LD_INT 2
82187: ARRAY
82188: PPUSH
82189: CALL_OW 235
82193: GO 82168
82195: POP
82196: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
82197: LD_ADDR_EXP 110
82201: PUSH
82202: LD_EXP 110
82206: PPUSH
82207: LD_VAR 0 4
82211: PPUSH
82212: EMPTY
82213: PPUSH
82214: CALL_OW 1
82218: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
82219: LD_VAR 0 1
82223: PPUSH
82224: LD_INT 0
82226: PPUSH
82227: CALL_OW 505
// end ; end ;
82231: LD_VAR 0 2
82235: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
82236: LD_INT 0
82238: PPUSH
82239: PPUSH
82240: PPUSH
// if not hack in hackTanks or not vehicles then
82241: LD_VAR 0 1
82245: PUSH
82246: LD_EXP 109
82250: IN
82251: NOT
82252: PUSH
82253: LD_VAR 0 2
82257: NOT
82258: OR
82259: IFFALSE 82263
// exit ;
82261: GO 82538
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
82263: LD_ADDR_VAR 0 2
82267: PUSH
82268: LD_VAR 0 1
82272: PPUSH
82273: LD_VAR 0 2
82277: PPUSH
82278: LD_INT 1
82280: PPUSH
82281: LD_INT 1
82283: PPUSH
82284: CALL 26148 0 4
82288: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
82289: LD_ADDR_VAR 0 5
82293: PUSH
82294: LD_EXP 109
82298: PPUSH
82299: LD_VAR 0 1
82303: PPUSH
82304: CALL 25498 0 2
82308: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
82309: LD_EXP 110
82313: PUSH
82314: LD_VAR 0 5
82318: ARRAY
82319: PUSH
82320: LD_EXP 111
82324: LESS
82325: IFFALSE 82514
// begin for i := 1 to vehicles do
82327: LD_ADDR_VAR 0 4
82331: PUSH
82332: DOUBLE
82333: LD_INT 1
82335: DEC
82336: ST_TO_ADDR
82337: LD_VAR 0 2
82341: PUSH
82342: FOR_TO
82343: IFFALSE 82512
// begin if hackTanksCaptured [ index ] = hackLimit then
82345: LD_EXP 110
82349: PUSH
82350: LD_VAR 0 5
82354: ARRAY
82355: PUSH
82356: LD_EXP 111
82360: EQUAL
82361: IFFALSE 82365
// break ;
82363: GO 82512
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
82365: LD_ADDR_EXP 113
82369: PUSH
82370: LD_EXP 113
82374: PPUSH
82375: LD_VAR 0 5
82379: PPUSH
82380: LD_EXP 113
82384: PUSH
82385: LD_VAR 0 5
82389: ARRAY
82390: PUSH
82391: LD_INT 1
82393: PLUS
82394: PPUSH
82395: CALL_OW 1
82399: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
82400: LD_ADDR_EXP 110
82404: PUSH
82405: LD_EXP 110
82409: PPUSH
82410: LD_VAR 0 5
82414: PUSH
82415: LD_EXP 110
82419: PUSH
82420: LD_VAR 0 5
82424: ARRAY
82425: PUSH
82426: LD_INT 1
82428: PLUS
82429: PUSH
82430: EMPTY
82431: LIST
82432: LIST
82433: PPUSH
82434: LD_VAR 0 2
82438: PUSH
82439: LD_VAR 0 4
82443: ARRAY
82444: PUSH
82445: LD_VAR 0 2
82449: PUSH
82450: LD_VAR 0 4
82454: ARRAY
82455: PPUSH
82456: CALL_OW 255
82460: PUSH
82461: EMPTY
82462: LIST
82463: LIST
82464: PPUSH
82465: CALL 25713 0 3
82469: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
82470: LD_VAR 0 2
82474: PUSH
82475: LD_VAR 0 4
82479: ARRAY
82480: PPUSH
82481: LD_VAR 0 1
82485: PPUSH
82486: CALL_OW 255
82490: PPUSH
82491: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
82495: LD_VAR 0 2
82499: PUSH
82500: LD_VAR 0 4
82504: ARRAY
82505: PPUSH
82506: CALL_OW 141
// end ;
82510: GO 82342
82512: POP
82513: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
82514: LD_VAR 0 1
82518: PPUSH
82519: LD_EXP 110
82523: PUSH
82524: LD_VAR 0 5
82528: ARRAY
82529: PUSH
82530: LD_INT 0
82532: PLUS
82533: PPUSH
82534: CALL_OW 505
// end ;
82538: LD_VAR 0 3
82542: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
82543: LD_INT 0
82545: PPUSH
82546: PPUSH
82547: PPUSH
82548: PPUSH
// if not hack in hackTanks then
82549: LD_VAR 0 1
82553: PUSH
82554: LD_EXP 109
82558: IN
82559: NOT
82560: IFFALSE 82564
// exit ;
82562: GO 82804
// index := GetElementIndex ( hackTanks , hack ) ;
82564: LD_ADDR_VAR 0 4
82568: PUSH
82569: LD_EXP 109
82573: PPUSH
82574: LD_VAR 0 1
82578: PPUSH
82579: CALL 25498 0 2
82583: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
82584: LD_ADDR_VAR 0 3
82588: PUSH
82589: DOUBLE
82590: LD_EXP 110
82594: PUSH
82595: LD_VAR 0 4
82599: ARRAY
82600: INC
82601: ST_TO_ADDR
82602: LD_INT 1
82604: PUSH
82605: FOR_DOWNTO
82606: IFFALSE 82778
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
82608: LD_ADDR_VAR 0 5
82612: PUSH
82613: LD_EXP 110
82617: PUSH
82618: LD_VAR 0 4
82622: ARRAY
82623: PUSH
82624: LD_VAR 0 3
82628: ARRAY
82629: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
82630: LD_VAR 0 5
82634: PUSH
82635: LD_INT 1
82637: ARRAY
82638: PPUSH
82639: CALL_OW 302
82643: NOT
82644: PUSH
82645: LD_VAR 0 5
82649: PUSH
82650: LD_INT 1
82652: ARRAY
82653: PPUSH
82654: CALL_OW 255
82658: PUSH
82659: LD_VAR 0 1
82663: PPUSH
82664: CALL_OW 255
82668: NONEQUAL
82669: OR
82670: IFFALSE 82776
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
82672: LD_VAR 0 5
82676: PUSH
82677: LD_INT 1
82679: ARRAY
82680: PPUSH
82681: CALL_OW 305
82685: PUSH
82686: LD_VAR 0 5
82690: PUSH
82691: LD_INT 1
82693: ARRAY
82694: PPUSH
82695: CALL_OW 255
82699: PUSH
82700: LD_VAR 0 1
82704: PPUSH
82705: CALL_OW 255
82709: EQUAL
82710: AND
82711: IFFALSE 82735
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
82713: LD_VAR 0 5
82717: PUSH
82718: LD_INT 1
82720: ARRAY
82721: PPUSH
82722: LD_VAR 0 5
82726: PUSH
82727: LD_INT 2
82729: ARRAY
82730: PPUSH
82731: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
82735: LD_ADDR_EXP 110
82739: PUSH
82740: LD_EXP 110
82744: PPUSH
82745: LD_VAR 0 4
82749: PPUSH
82750: LD_EXP 110
82754: PUSH
82755: LD_VAR 0 4
82759: ARRAY
82760: PPUSH
82761: LD_VAR 0 3
82765: PPUSH
82766: CALL_OW 3
82770: PPUSH
82771: CALL_OW 1
82775: ST_TO_ADDR
// end ; end ;
82776: GO 82605
82778: POP
82779: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
82780: LD_VAR 0 1
82784: PPUSH
82785: LD_EXP 110
82789: PUSH
82790: LD_VAR 0 4
82794: ARRAY
82795: PUSH
82796: LD_INT 0
82798: PLUS
82799: PPUSH
82800: CALL_OW 505
// end ;
82804: LD_VAR 0 2
82808: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
82809: LD_INT 0
82811: PPUSH
82812: PPUSH
82813: PPUSH
82814: PPUSH
// if not hack in hackTanks then
82815: LD_VAR 0 1
82819: PUSH
82820: LD_EXP 109
82824: IN
82825: NOT
82826: IFFALSE 82830
// exit ;
82828: GO 82915
// index := GetElementIndex ( hackTanks , hack ) ;
82830: LD_ADDR_VAR 0 5
82834: PUSH
82835: LD_EXP 109
82839: PPUSH
82840: LD_VAR 0 1
82844: PPUSH
82845: CALL 25498 0 2
82849: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
82850: LD_ADDR_VAR 0 4
82854: PUSH
82855: DOUBLE
82856: LD_INT 1
82858: DEC
82859: ST_TO_ADDR
82860: LD_EXP 110
82864: PUSH
82865: LD_VAR 0 5
82869: ARRAY
82870: PUSH
82871: FOR_TO
82872: IFFALSE 82913
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
82874: LD_EXP 110
82878: PUSH
82879: LD_VAR 0 5
82883: ARRAY
82884: PUSH
82885: LD_VAR 0 4
82889: ARRAY
82890: PUSH
82891: LD_INT 1
82893: ARRAY
82894: PUSH
82895: LD_VAR 0 2
82899: EQUAL
82900: IFFALSE 82911
// KillUnit ( vehicle ) ;
82902: LD_VAR 0 2
82906: PPUSH
82907: CALL_OW 66
82911: GO 82871
82913: POP
82914: POP
// end ;
82915: LD_VAR 0 3
82919: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
82920: LD_EXP 114
82924: NOT
82925: IFFALSE 82960
82927: GO 82929
82929: DISABLE
// begin initMiner := true ;
82930: LD_ADDR_EXP 114
82934: PUSH
82935: LD_INT 1
82937: ST_TO_ADDR
// minersList := [ ] ;
82938: LD_ADDR_EXP 115
82942: PUSH
82943: EMPTY
82944: ST_TO_ADDR
// minerMinesList := [ ] ;
82945: LD_ADDR_EXP 116
82949: PUSH
82950: EMPTY
82951: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
82952: LD_ADDR_EXP 117
82956: PUSH
82957: LD_INT 5
82959: ST_TO_ADDR
// end ;
82960: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
82961: LD_EXP 114
82965: PUSH
82966: LD_INT 34
82968: PUSH
82969: LD_INT 81
82971: PUSH
82972: EMPTY
82973: LIST
82974: LIST
82975: PPUSH
82976: CALL_OW 69
82980: AND
82981: IFFALSE 83442
82983: GO 82985
82985: DISABLE
82986: LD_INT 0
82988: PPUSH
82989: PPUSH
82990: PPUSH
82991: PPUSH
// begin enable ;
82992: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
82993: LD_ADDR_VAR 0 1
82997: PUSH
82998: LD_INT 34
83000: PUSH
83001: LD_INT 81
83003: PUSH
83004: EMPTY
83005: LIST
83006: LIST
83007: PPUSH
83008: CALL_OW 69
83012: PUSH
83013: FOR_IN
83014: IFFALSE 83086
// begin if not i in minersList then
83016: LD_VAR 0 1
83020: PUSH
83021: LD_EXP 115
83025: IN
83026: NOT
83027: IFFALSE 83084
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
83029: LD_ADDR_EXP 115
83033: PUSH
83034: LD_EXP 115
83038: PPUSH
83039: LD_EXP 115
83043: PUSH
83044: LD_INT 1
83046: PLUS
83047: PPUSH
83048: LD_VAR 0 1
83052: PPUSH
83053: CALL_OW 1
83057: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
83058: LD_ADDR_EXP 116
83062: PUSH
83063: LD_EXP 116
83067: PPUSH
83068: LD_EXP 116
83072: PUSH
83073: LD_INT 1
83075: PLUS
83076: PPUSH
83077: EMPTY
83078: PPUSH
83079: CALL_OW 1
83083: ST_TO_ADDR
// end end ;
83084: GO 83013
83086: POP
83087: POP
// for i := minerMinesList downto 1 do
83088: LD_ADDR_VAR 0 1
83092: PUSH
83093: DOUBLE
83094: LD_EXP 116
83098: INC
83099: ST_TO_ADDR
83100: LD_INT 1
83102: PUSH
83103: FOR_DOWNTO
83104: IFFALSE 83440
// begin if IsLive ( minersList [ i ] ) then
83106: LD_EXP 115
83110: PUSH
83111: LD_VAR 0 1
83115: ARRAY
83116: PPUSH
83117: CALL_OW 300
83121: IFFALSE 83149
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
83123: LD_EXP 115
83127: PUSH
83128: LD_VAR 0 1
83132: ARRAY
83133: PPUSH
83134: LD_EXP 116
83138: PUSH
83139: LD_VAR 0 1
83143: ARRAY
83144: PPUSH
83145: CALL_OW 505
// if not minerMinesList [ i ] then
83149: LD_EXP 116
83153: PUSH
83154: LD_VAR 0 1
83158: ARRAY
83159: NOT
83160: IFFALSE 83164
// continue ;
83162: GO 83103
// for j := minerMinesList [ i ] downto 1 do
83164: LD_ADDR_VAR 0 2
83168: PUSH
83169: DOUBLE
83170: LD_EXP 116
83174: PUSH
83175: LD_VAR 0 1
83179: ARRAY
83180: INC
83181: ST_TO_ADDR
83182: LD_INT 1
83184: PUSH
83185: FOR_DOWNTO
83186: IFFALSE 83436
// begin side := GetSide ( minersList [ i ] ) ;
83188: LD_ADDR_VAR 0 3
83192: PUSH
83193: LD_EXP 115
83197: PUSH
83198: LD_VAR 0 1
83202: ARRAY
83203: PPUSH
83204: CALL_OW 255
83208: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
83209: LD_ADDR_VAR 0 4
83213: PUSH
83214: LD_EXP 116
83218: PUSH
83219: LD_VAR 0 1
83223: ARRAY
83224: PUSH
83225: LD_VAR 0 2
83229: ARRAY
83230: PUSH
83231: LD_INT 1
83233: ARRAY
83234: PPUSH
83235: LD_EXP 116
83239: PUSH
83240: LD_VAR 0 1
83244: ARRAY
83245: PUSH
83246: LD_VAR 0 2
83250: ARRAY
83251: PUSH
83252: LD_INT 2
83254: ARRAY
83255: PPUSH
83256: CALL_OW 428
83260: ST_TO_ADDR
// if not tmp then
83261: LD_VAR 0 4
83265: NOT
83266: IFFALSE 83270
// continue ;
83268: GO 83185
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
83270: LD_VAR 0 4
83274: PUSH
83275: LD_INT 81
83277: PUSH
83278: LD_VAR 0 3
83282: PUSH
83283: EMPTY
83284: LIST
83285: LIST
83286: PPUSH
83287: CALL_OW 69
83291: IN
83292: PUSH
83293: LD_EXP 116
83297: PUSH
83298: LD_VAR 0 1
83302: ARRAY
83303: PUSH
83304: LD_VAR 0 2
83308: ARRAY
83309: PUSH
83310: LD_INT 1
83312: ARRAY
83313: PPUSH
83314: LD_EXP 116
83318: PUSH
83319: LD_VAR 0 1
83323: ARRAY
83324: PUSH
83325: LD_VAR 0 2
83329: ARRAY
83330: PUSH
83331: LD_INT 2
83333: ARRAY
83334: PPUSH
83335: CALL_OW 458
83339: AND
83340: IFFALSE 83434
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
83342: LD_EXP 116
83346: PUSH
83347: LD_VAR 0 1
83351: ARRAY
83352: PUSH
83353: LD_VAR 0 2
83357: ARRAY
83358: PUSH
83359: LD_INT 1
83361: ARRAY
83362: PPUSH
83363: LD_EXP 116
83367: PUSH
83368: LD_VAR 0 1
83372: ARRAY
83373: PUSH
83374: LD_VAR 0 2
83378: ARRAY
83379: PUSH
83380: LD_INT 2
83382: ARRAY
83383: PPUSH
83384: LD_VAR 0 3
83388: PPUSH
83389: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
83393: LD_ADDR_EXP 116
83397: PUSH
83398: LD_EXP 116
83402: PPUSH
83403: LD_VAR 0 1
83407: PPUSH
83408: LD_EXP 116
83412: PUSH
83413: LD_VAR 0 1
83417: ARRAY
83418: PPUSH
83419: LD_VAR 0 2
83423: PPUSH
83424: CALL_OW 3
83428: PPUSH
83429: CALL_OW 1
83433: ST_TO_ADDR
// end ; end ;
83434: GO 83185
83436: POP
83437: POP
// end ;
83438: GO 83103
83440: POP
83441: POP
// end ;
83442: PPOPN 4
83444: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
83445: LD_INT 0
83447: PPUSH
83448: PPUSH
// result := false ;
83449: LD_ADDR_VAR 0 4
83453: PUSH
83454: LD_INT 0
83456: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
83457: LD_VAR 0 1
83461: PPUSH
83462: CALL_OW 264
83466: PUSH
83467: LD_INT 81
83469: EQUAL
83470: NOT
83471: IFFALSE 83475
// exit ;
83473: GO 83715
// index := GetElementIndex ( minersList , unit ) ;
83475: LD_ADDR_VAR 0 5
83479: PUSH
83480: LD_EXP 115
83484: PPUSH
83485: LD_VAR 0 1
83489: PPUSH
83490: CALL 25498 0 2
83494: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
83495: LD_EXP 116
83499: PUSH
83500: LD_VAR 0 5
83504: ARRAY
83505: PUSH
83506: LD_EXP 117
83510: GREATEREQUAL
83511: IFFALSE 83515
// exit ;
83513: GO 83715
// ComMoveXY ( unit , x , y ) ;
83515: LD_VAR 0 1
83519: PPUSH
83520: LD_VAR 0 2
83524: PPUSH
83525: LD_VAR 0 3
83529: PPUSH
83530: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
83534: LD_INT 35
83536: PPUSH
83537: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
83541: LD_VAR 0 1
83545: PPUSH
83546: LD_VAR 0 2
83550: PPUSH
83551: LD_VAR 0 3
83555: PPUSH
83556: CALL 57259 0 3
83560: NOT
83561: PUSH
83562: LD_VAR 0 1
83566: PPUSH
83567: CALL_OW 314
83571: AND
83572: IFFALSE 83576
// exit ;
83574: GO 83715
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
83576: LD_VAR 0 2
83580: PPUSH
83581: LD_VAR 0 3
83585: PPUSH
83586: CALL_OW 428
83590: PUSH
83591: LD_VAR 0 1
83595: EQUAL
83596: PUSH
83597: LD_VAR 0 1
83601: PPUSH
83602: CALL_OW 314
83606: NOT
83607: AND
83608: IFFALSE 83534
// PlaySoundXY ( x , y , PlantMine ) ;
83610: LD_VAR 0 2
83614: PPUSH
83615: LD_VAR 0 3
83619: PPUSH
83620: LD_STRING PlantMine
83622: PPUSH
83623: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
83627: LD_VAR 0 2
83631: PPUSH
83632: LD_VAR 0 3
83636: PPUSH
83637: LD_VAR 0 1
83641: PPUSH
83642: CALL_OW 255
83646: PPUSH
83647: LD_INT 0
83649: PPUSH
83650: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
83654: LD_ADDR_EXP 116
83658: PUSH
83659: LD_EXP 116
83663: PPUSH
83664: LD_VAR 0 5
83668: PUSH
83669: LD_EXP 116
83673: PUSH
83674: LD_VAR 0 5
83678: ARRAY
83679: PUSH
83680: LD_INT 1
83682: PLUS
83683: PUSH
83684: EMPTY
83685: LIST
83686: LIST
83687: PPUSH
83688: LD_VAR 0 2
83692: PUSH
83693: LD_VAR 0 3
83697: PUSH
83698: EMPTY
83699: LIST
83700: LIST
83701: PPUSH
83702: CALL 25713 0 3
83706: ST_TO_ADDR
// result := true ;
83707: LD_ADDR_VAR 0 4
83711: PUSH
83712: LD_INT 1
83714: ST_TO_ADDR
// end ;
83715: LD_VAR 0 4
83719: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
83720: LD_INT 0
83722: PPUSH
83723: PPUSH
83724: PPUSH
// if not unit in minersList then
83725: LD_VAR 0 1
83729: PUSH
83730: LD_EXP 115
83734: IN
83735: NOT
83736: IFFALSE 83740
// exit ;
83738: GO 84132
// index := GetElementIndex ( minersList , unit ) ;
83740: LD_ADDR_VAR 0 6
83744: PUSH
83745: LD_EXP 115
83749: PPUSH
83750: LD_VAR 0 1
83754: PPUSH
83755: CALL 25498 0 2
83759: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
83760: LD_ADDR_VAR 0 5
83764: PUSH
83765: DOUBLE
83766: LD_EXP 116
83770: PUSH
83771: LD_VAR 0 6
83775: ARRAY
83776: INC
83777: ST_TO_ADDR
83778: LD_INT 1
83780: PUSH
83781: FOR_DOWNTO
83782: IFFALSE 83943
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
83784: LD_EXP 116
83788: PUSH
83789: LD_VAR 0 6
83793: ARRAY
83794: PUSH
83795: LD_VAR 0 5
83799: ARRAY
83800: PUSH
83801: LD_INT 1
83803: ARRAY
83804: PUSH
83805: LD_VAR 0 2
83809: EQUAL
83810: PUSH
83811: LD_EXP 116
83815: PUSH
83816: LD_VAR 0 6
83820: ARRAY
83821: PUSH
83822: LD_VAR 0 5
83826: ARRAY
83827: PUSH
83828: LD_INT 2
83830: ARRAY
83831: PUSH
83832: LD_VAR 0 3
83836: EQUAL
83837: AND
83838: IFFALSE 83941
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
83840: LD_EXP 116
83844: PUSH
83845: LD_VAR 0 6
83849: ARRAY
83850: PUSH
83851: LD_VAR 0 5
83855: ARRAY
83856: PUSH
83857: LD_INT 1
83859: ARRAY
83860: PPUSH
83861: LD_EXP 116
83865: PUSH
83866: LD_VAR 0 6
83870: ARRAY
83871: PUSH
83872: LD_VAR 0 5
83876: ARRAY
83877: PUSH
83878: LD_INT 2
83880: ARRAY
83881: PPUSH
83882: LD_VAR 0 1
83886: PPUSH
83887: CALL_OW 255
83891: PPUSH
83892: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
83896: LD_ADDR_EXP 116
83900: PUSH
83901: LD_EXP 116
83905: PPUSH
83906: LD_VAR 0 6
83910: PPUSH
83911: LD_EXP 116
83915: PUSH
83916: LD_VAR 0 6
83920: ARRAY
83921: PPUSH
83922: LD_VAR 0 5
83926: PPUSH
83927: CALL_OW 3
83931: PPUSH
83932: CALL_OW 1
83936: ST_TO_ADDR
// exit ;
83937: POP
83938: POP
83939: GO 84132
// end ; end ;
83941: GO 83781
83943: POP
83944: POP
// for i := minerMinesList [ index ] downto 1 do
83945: LD_ADDR_VAR 0 5
83949: PUSH
83950: DOUBLE
83951: LD_EXP 116
83955: PUSH
83956: LD_VAR 0 6
83960: ARRAY
83961: INC
83962: ST_TO_ADDR
83963: LD_INT 1
83965: PUSH
83966: FOR_DOWNTO
83967: IFFALSE 84130
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
83969: LD_EXP 116
83973: PUSH
83974: LD_VAR 0 6
83978: ARRAY
83979: PUSH
83980: LD_VAR 0 5
83984: ARRAY
83985: PUSH
83986: LD_INT 1
83988: ARRAY
83989: PPUSH
83990: LD_EXP 116
83994: PUSH
83995: LD_VAR 0 6
83999: ARRAY
84000: PUSH
84001: LD_VAR 0 5
84005: ARRAY
84006: PUSH
84007: LD_INT 2
84009: ARRAY
84010: PPUSH
84011: LD_VAR 0 2
84015: PPUSH
84016: LD_VAR 0 3
84020: PPUSH
84021: CALL_OW 298
84025: PUSH
84026: LD_INT 6
84028: LESS
84029: IFFALSE 84128
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
84031: LD_EXP 116
84035: PUSH
84036: LD_VAR 0 6
84040: ARRAY
84041: PUSH
84042: LD_VAR 0 5
84046: ARRAY
84047: PUSH
84048: LD_INT 1
84050: ARRAY
84051: PPUSH
84052: LD_EXP 116
84056: PUSH
84057: LD_VAR 0 6
84061: ARRAY
84062: PUSH
84063: LD_VAR 0 5
84067: ARRAY
84068: PUSH
84069: LD_INT 2
84071: ARRAY
84072: PPUSH
84073: LD_VAR 0 1
84077: PPUSH
84078: CALL_OW 255
84082: PPUSH
84083: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
84087: LD_ADDR_EXP 116
84091: PUSH
84092: LD_EXP 116
84096: PPUSH
84097: LD_VAR 0 6
84101: PPUSH
84102: LD_EXP 116
84106: PUSH
84107: LD_VAR 0 6
84111: ARRAY
84112: PPUSH
84113: LD_VAR 0 5
84117: PPUSH
84118: CALL_OW 3
84122: PPUSH
84123: CALL_OW 1
84127: ST_TO_ADDR
// end ; end ;
84128: GO 83966
84130: POP
84131: POP
// end ;
84132: LD_VAR 0 4
84136: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
84137: LD_INT 0
84139: PPUSH
84140: PPUSH
84141: PPUSH
84142: PPUSH
84143: PPUSH
84144: PPUSH
84145: PPUSH
84146: PPUSH
84147: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
84148: LD_VAR 0 1
84152: PPUSH
84153: CALL_OW 264
84157: PUSH
84158: LD_INT 81
84160: EQUAL
84161: NOT
84162: PUSH
84163: LD_VAR 0 1
84167: PUSH
84168: LD_EXP 115
84172: IN
84173: NOT
84174: OR
84175: IFFALSE 84179
// exit ;
84177: GO 84501
// index := GetElementIndex ( minersList , unit ) ;
84179: LD_ADDR_VAR 0 6
84183: PUSH
84184: LD_EXP 115
84188: PPUSH
84189: LD_VAR 0 1
84193: PPUSH
84194: CALL 25498 0 2
84198: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
84199: LD_ADDR_VAR 0 8
84203: PUSH
84204: LD_EXP 117
84208: PUSH
84209: LD_EXP 116
84213: PUSH
84214: LD_VAR 0 6
84218: ARRAY
84219: MINUS
84220: ST_TO_ADDR
// if not minesFreeAmount then
84221: LD_VAR 0 8
84225: NOT
84226: IFFALSE 84230
// exit ;
84228: GO 84501
// tmp := [ ] ;
84230: LD_ADDR_VAR 0 7
84234: PUSH
84235: EMPTY
84236: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
84237: LD_ADDR_VAR 0 5
84241: PUSH
84242: DOUBLE
84243: LD_INT 1
84245: DEC
84246: ST_TO_ADDR
84247: LD_VAR 0 8
84251: PUSH
84252: FOR_TO
84253: IFFALSE 84448
// begin _d := rand ( 0 , 5 ) ;
84255: LD_ADDR_VAR 0 11
84259: PUSH
84260: LD_INT 0
84262: PPUSH
84263: LD_INT 5
84265: PPUSH
84266: CALL_OW 12
84270: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
84271: LD_ADDR_VAR 0 12
84275: PUSH
84276: LD_INT 2
84278: PPUSH
84279: LD_INT 6
84281: PPUSH
84282: CALL_OW 12
84286: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
84287: LD_ADDR_VAR 0 9
84291: PUSH
84292: LD_VAR 0 2
84296: PPUSH
84297: LD_VAR 0 11
84301: PPUSH
84302: LD_VAR 0 12
84306: PPUSH
84307: CALL_OW 272
84311: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
84312: LD_ADDR_VAR 0 10
84316: PUSH
84317: LD_VAR 0 3
84321: PPUSH
84322: LD_VAR 0 11
84326: PPUSH
84327: LD_VAR 0 12
84331: PPUSH
84332: CALL_OW 273
84336: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
84337: LD_VAR 0 9
84341: PPUSH
84342: LD_VAR 0 10
84346: PPUSH
84347: CALL_OW 488
84351: PUSH
84352: LD_VAR 0 9
84356: PUSH
84357: LD_VAR 0 10
84361: PUSH
84362: EMPTY
84363: LIST
84364: LIST
84365: PUSH
84366: LD_VAR 0 7
84370: IN
84371: NOT
84372: AND
84373: PUSH
84374: LD_VAR 0 9
84378: PPUSH
84379: LD_VAR 0 10
84383: PPUSH
84384: CALL_OW 458
84388: NOT
84389: AND
84390: IFFALSE 84432
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
84392: LD_ADDR_VAR 0 7
84396: PUSH
84397: LD_VAR 0 7
84401: PPUSH
84402: LD_VAR 0 7
84406: PUSH
84407: LD_INT 1
84409: PLUS
84410: PPUSH
84411: LD_VAR 0 9
84415: PUSH
84416: LD_VAR 0 10
84420: PUSH
84421: EMPTY
84422: LIST
84423: LIST
84424: PPUSH
84425: CALL_OW 1
84429: ST_TO_ADDR
84430: GO 84446
// i := i - 1 ;
84432: LD_ADDR_VAR 0 5
84436: PUSH
84437: LD_VAR 0 5
84441: PUSH
84442: LD_INT 1
84444: MINUS
84445: ST_TO_ADDR
// end ;
84446: GO 84252
84448: POP
84449: POP
// for i in tmp do
84450: LD_ADDR_VAR 0 5
84454: PUSH
84455: LD_VAR 0 7
84459: PUSH
84460: FOR_IN
84461: IFFALSE 84499
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
84463: LD_VAR 0 1
84467: PPUSH
84468: LD_VAR 0 5
84472: PUSH
84473: LD_INT 1
84475: ARRAY
84476: PPUSH
84477: LD_VAR 0 5
84481: PUSH
84482: LD_INT 2
84484: ARRAY
84485: PPUSH
84486: CALL 83445 0 3
84490: NOT
84491: IFFALSE 84497
// exit ;
84493: POP
84494: POP
84495: GO 84501
84497: GO 84460
84499: POP
84500: POP
// end ;
84501: LD_VAR 0 4
84505: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
84506: LD_INT 0
84508: PPUSH
84509: PPUSH
84510: PPUSH
84511: PPUSH
84512: PPUSH
84513: PPUSH
84514: PPUSH
84515: PPUSH
84516: PPUSH
// if GetClass ( unit ) <> class_sniper then
84517: LD_VAR 0 1
84521: PPUSH
84522: CALL_OW 257
84526: PUSH
84527: LD_INT 5
84529: NONEQUAL
84530: IFFALSE 84534
// exit ;
84532: GO 85000
// dist := 8 ;
84534: LD_ADDR_VAR 0 5
84538: PUSH
84539: LD_INT 8
84541: ST_TO_ADDR
// viewRange := 12 ;
84542: LD_ADDR_VAR 0 8
84546: PUSH
84547: LD_INT 12
84549: ST_TO_ADDR
// side := GetSide ( unit ) ;
84550: LD_ADDR_VAR 0 6
84554: PUSH
84555: LD_VAR 0 1
84559: PPUSH
84560: CALL_OW 255
84564: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
84565: LD_INT 61
84567: PPUSH
84568: LD_VAR 0 6
84572: PPUSH
84573: CALL_OW 321
84577: PUSH
84578: LD_INT 2
84580: EQUAL
84581: IFFALSE 84591
// viewRange := 16 ;
84583: LD_ADDR_VAR 0 8
84587: PUSH
84588: LD_INT 16
84590: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
84591: LD_VAR 0 1
84595: PPUSH
84596: LD_VAR 0 2
84600: PPUSH
84601: LD_VAR 0 3
84605: PPUSH
84606: CALL_OW 297
84610: PUSH
84611: LD_VAR 0 5
84615: GREATER
84616: IFFALSE 84695
// begin ComMoveXY ( unit , x , y ) ;
84618: LD_VAR 0 1
84622: PPUSH
84623: LD_VAR 0 2
84627: PPUSH
84628: LD_VAR 0 3
84632: PPUSH
84633: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
84637: LD_INT 35
84639: PPUSH
84640: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
84644: LD_VAR 0 1
84648: PPUSH
84649: LD_VAR 0 2
84653: PPUSH
84654: LD_VAR 0 3
84658: PPUSH
84659: CALL 57259 0 3
84663: NOT
84664: IFFALSE 84668
// exit ;
84666: GO 85000
// until GetDistUnitXY ( unit , x , y ) < dist ;
84668: LD_VAR 0 1
84672: PPUSH
84673: LD_VAR 0 2
84677: PPUSH
84678: LD_VAR 0 3
84682: PPUSH
84683: CALL_OW 297
84687: PUSH
84688: LD_VAR 0 5
84692: LESS
84693: IFFALSE 84637
// end ; ComTurnXY ( unit , x , y ) ;
84695: LD_VAR 0 1
84699: PPUSH
84700: LD_VAR 0 2
84704: PPUSH
84705: LD_VAR 0 3
84709: PPUSH
84710: CALL_OW 118
// repeat if Multiplayer then
84714: LD_OWVAR 4
84718: IFFALSE 84729
// wait ( 35 ) else
84720: LD_INT 35
84722: PPUSH
84723: CALL_OW 67
84727: GO 84736
// wait ( 5 ) ;
84729: LD_INT 5
84731: PPUSH
84732: CALL_OW 67
// _d := GetDir ( unit ) ;
84736: LD_ADDR_VAR 0 11
84740: PUSH
84741: LD_VAR 0 1
84745: PPUSH
84746: CALL_OW 254
84750: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
84751: LD_ADDR_VAR 0 7
84755: PUSH
84756: LD_VAR 0 1
84760: PPUSH
84761: CALL_OW 250
84765: PPUSH
84766: LD_VAR 0 1
84770: PPUSH
84771: CALL_OW 251
84775: PPUSH
84776: LD_VAR 0 2
84780: PPUSH
84781: LD_VAR 0 3
84785: PPUSH
84786: CALL 59867 0 4
84790: ST_TO_ADDR
// until dir = _d ;
84791: LD_VAR 0 7
84795: PUSH
84796: LD_VAR 0 11
84800: EQUAL
84801: IFFALSE 84714
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
84803: LD_ADDR_VAR 0 9
84807: PUSH
84808: LD_VAR 0 1
84812: PPUSH
84813: CALL_OW 250
84817: PPUSH
84818: LD_VAR 0 7
84822: PPUSH
84823: LD_VAR 0 5
84827: PPUSH
84828: CALL_OW 272
84832: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
84833: LD_ADDR_VAR 0 10
84837: PUSH
84838: LD_VAR 0 1
84842: PPUSH
84843: CALL_OW 251
84847: PPUSH
84848: LD_VAR 0 7
84852: PPUSH
84853: LD_VAR 0 5
84857: PPUSH
84858: CALL_OW 273
84862: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
84863: LD_VAR 0 9
84867: PPUSH
84868: LD_VAR 0 10
84872: PPUSH
84873: CALL_OW 488
84877: NOT
84878: IFFALSE 84882
// exit ;
84880: GO 85000
// ComAnimCustom ( unit , 1 ) ;
84882: LD_VAR 0 1
84886: PPUSH
84887: LD_INT 1
84889: PPUSH
84890: CALL_OW 592
// p := 0 ;
84894: LD_ADDR_VAR 0 12
84898: PUSH
84899: LD_INT 0
84901: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
84902: LD_VAR 0 9
84906: PPUSH
84907: LD_VAR 0 10
84911: PPUSH
84912: LD_VAR 0 6
84916: PPUSH
84917: LD_VAR 0 8
84921: PPUSH
84922: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
84926: LD_INT 35
84928: PPUSH
84929: CALL_OW 67
// p := Inc ( p ) ;
84933: LD_ADDR_VAR 0 12
84937: PUSH
84938: LD_VAR 0 12
84942: PPUSH
84943: CALL 59823 0 1
84947: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
84948: LD_VAR 0 12
84952: PUSH
84953: LD_INT 3
84955: EQUAL
84956: PUSH
84957: LD_VAR 0 1
84961: PPUSH
84962: CALL_OW 302
84966: NOT
84967: OR
84968: PUSH
84969: LD_VAR 0 1
84973: PPUSH
84974: CALL_OW 301
84978: OR
84979: IFFALSE 84926
// RemoveSeeing ( _x , _y , side ) ;
84981: LD_VAR 0 9
84985: PPUSH
84986: LD_VAR 0 10
84990: PPUSH
84991: LD_VAR 0 6
84995: PPUSH
84996: CALL_OW 331
// end ;
85000: LD_VAR 0 4
85004: RET
