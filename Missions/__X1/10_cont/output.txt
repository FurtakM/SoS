// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 42 0 0
// CreateNature ;
   8: CALL 11222 0 0
// PrepareArabian ;
  12: CALL 247 0 0
// PrepareAmerican ;
  16: CALL 682 0 0
// PrepareLegion ;
  20: CALL 5842 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 2 ) ;
  30: LD_INT 2
  32: PPUSH
  33: CALL_OW 344
// Action ;
  37: CALL 11826 0 0
// end ;
  41: END
// export debug , prefix , amScriptActive , legScriptActive , apeAmount , spotAmericanBase , spotArabianBase , spotByAmerican , spotByLegion , spotLegion , americanDestroyed , legionDestroyed , hasMastodont , hasVehicles , hasTigers , hasApes , hasDrugs , canFinish , gameActive , omarCanChangeClass , tigerCounter , americanWave ; function Init ; begin
  42: LD_INT 0
  44: PPUSH
// debug := false ;
  45: LD_ADDR_EXP 1
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// prefix := 09_ ;
  53: LD_ADDR_EXP 2
  57: PUSH
  58: LD_STRING 09_
  60: ST_TO_ADDR
// amScriptActive := true ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_INT 1
  68: ST_TO_ADDR
// legScriptActive := true ;
  69: LD_ADDR_EXP 4
  73: PUSH
  74: LD_INT 1
  76: ST_TO_ADDR
// apeAmount := [ 16 , 14 , 12 , 10 ] [ Difficulty ] ;
  77: LD_ADDR_EXP 5
  81: PUSH
  82: LD_INT 16
  84: PUSH
  85: LD_INT 14
  87: PUSH
  88: LD_INT 12
  90: PUSH
  91: LD_INT 10
  93: PUSH
  94: EMPTY
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: PUSH
 100: LD_OWVAR 67
 104: ARRAY
 105: ST_TO_ADDR
// spotAmericanBase := false ;
 106: LD_ADDR_EXP 6
 110: PUSH
 111: LD_INT 0
 113: ST_TO_ADDR
// spotArabianBase := false ;
 114: LD_ADDR_EXP 7
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// spotLegion := false ;
 122: LD_ADDR_EXP 10
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// spotByAmerican := false ;
 130: LD_ADDR_EXP 8
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// spotByLegion := false ;
 138: LD_ADDR_EXP 9
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// americanDestroyed := false ;
 146: LD_ADDR_EXP 11
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// legionDestroyed := false ;
 154: LD_ADDR_EXP 12
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// hasMastodont := false ;
 162: LD_ADDR_EXP 13
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// hasVehicles := false ;
 170: LD_ADDR_EXP 14
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// hasTigers := false ;
 178: LD_ADDR_EXP 15
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// hasApes := false ;
 186: LD_ADDR_EXP 16
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// hasDrugs := false ;
 194: LD_ADDR_EXP 17
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// canFinish := false ;
 202: LD_ADDR_EXP 18
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// gameActive := false ;
 210: LD_ADDR_EXP 19
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// omarCanChangeClass := false ;
 218: LD_ADDR_EXP 20
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// tigerCounter := 0 ;
 226: LD_ADDR_EXP 21
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// americanWave := 0 ;
 234: LD_ADDR_EXP 22
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// end ; end_of_file
 242: LD_VAR 0 1
 246: RET
// export Heike , Omar ; export heikeVehicle , omarVehicle ; export function PrepareArabian ; var i , tmp , veh ; begin
 247: LD_INT 0
 249: PPUSH
 250: PPUSH
 251: PPUSH
 252: PPUSH
// uc_side := 2 ;
 253: LD_ADDR_OWVAR 20
 257: PUSH
 258: LD_INT 2
 260: ST_TO_ADDR
// uc_nation := nation_arabian ;
 261: LD_ADDR_OWVAR 21
 265: PUSH
 266: LD_INT 2
 268: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 269: LD_ADDR_EXP 23
 273: PUSH
 274: LD_STRING Heike
 276: PPUSH
 277: LD_EXP 1
 281: NOT
 282: PPUSH
 283: LD_EXP 2
 287: PPUSH
 288: CALL 20667 0 3
 292: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 293: LD_INT 14
 295: PPUSH
 296: LD_INT 3
 298: PPUSH
 299: LD_INT 1
 301: PPUSH
 302: LD_INT 27
 304: PPUSH
 305: LD_INT 100
 307: PPUSH
 308: CALL 25507 0 5
// heikeVehicle := CreateVehicle ;
 312: LD_ADDR_EXP 25
 316: PUSH
 317: CALL_OW 45
 321: ST_TO_ADDR
// SetDir ( heikeVehicle , 4 ) ;
 322: LD_EXP 25
 326: PPUSH
 327: LD_INT 4
 329: PPUSH
 330: CALL_OW 233
// PlaceUnitXY ( heikeVehicle , 118 , 37 , false ) ;
 334: LD_EXP 25
 338: PPUSH
 339: LD_INT 118
 341: PPUSH
 342: LD_INT 37
 344: PPUSH
 345: LD_INT 0
 347: PPUSH
 348: CALL_OW 48
// SetClass ( Heike , class_soldier ) ;
 352: LD_EXP 23
 356: PPUSH
 357: LD_INT 1
 359: PPUSH
 360: CALL_OW 336
// PlaceHumanInUnit ( Heike , heikeVehicle ) ;
 364: LD_EXP 23
 368: PPUSH
 369: LD_EXP 25
 373: PPUSH
 374: CALL_OW 52
// uc_side := 5 ;
 378: LD_ADDR_OWVAR 20
 382: PUSH
 383: LD_INT 5
 385: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
 386: LD_ADDR_EXP 24
 390: PUSH
 391: LD_STRING Omar
 393: PPUSH
 394: CALL_OW 25
 398: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 399: LD_INT 14
 401: PPUSH
 402: LD_INT 3
 404: PPUSH
 405: LD_INT 1
 407: PPUSH
 408: LD_INT 27
 410: PPUSH
 411: LD_INT 100
 413: PPUSH
 414: CALL 25507 0 5
// omarVehicle := CreateVehicle ;
 418: LD_ADDR_EXP 26
 422: PUSH
 423: CALL_OW 45
 427: ST_TO_ADDR
// SetDir ( omarVehicle , 0 ) ;
 428: LD_EXP 26
 432: PPUSH
 433: LD_INT 0
 435: PPUSH
 436: CALL_OW 233
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) do
 440: LD_ADDR_VAR 0 2
 444: PUSH
 445: LD_INT 22
 447: PUSH
 448: LD_INT 5
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: PUSH
 455: LD_INT 21
 457: PUSH
 458: LD_INT 3
 460: PUSH
 461: EMPTY
 462: LIST
 463: LIST
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: PPUSH
 469: CALL_OW 69
 473: PUSH
 474: FOR_IN
 475: IFFALSE 499
// SetLives ( i , rand ( 300 , 499 ) ) ;
 477: LD_VAR 0 2
 481: PPUSH
 482: LD_INT 300
 484: PPUSH
 485: LD_INT 499
 487: PPUSH
 488: CALL_OW 12
 492: PPUSH
 493: CALL_OW 234
 497: GO 474
 499: POP
 500: POP
// SetResourceType ( GetBase ( arBase ) , mat_cans , 200 - ( 20 * Difficulty ) ) ;
 501: LD_INT 85
 503: PPUSH
 504: CALL_OW 274
 508: PPUSH
 509: LD_INT 1
 511: PPUSH
 512: LD_INT 200
 514: PUSH
 515: LD_INT 20
 517: PUSH
 518: LD_OWVAR 67
 522: MUL
 523: MINUS
 524: PPUSH
 525: CALL_OW 277
// SetResourceType ( GetBase ( arBase ) , mat_oil , 20 ) ;
 529: LD_INT 85
 531: PPUSH
 532: CALL_OW 274
 536: PPUSH
 537: LD_INT 2
 539: PPUSH
 540: LD_INT 20
 542: PPUSH
 543: CALL_OW 277
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_cargo_bay , 100 ) ;
 547: LD_INT 14
 549: PPUSH
 550: LD_INT 3
 552: PPUSH
 553: LD_INT 1
 555: PPUSH
 556: LD_INT 32
 558: PPUSH
 559: LD_INT 100
 561: PPUSH
 562: CALL 25507 0 5
// veh := CreateVehicle ;
 566: LD_ADDR_VAR 0 4
 570: PUSH
 571: CALL_OW 45
 575: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
 576: LD_VAR 0 4
 580: PPUSH
 581: LD_INT 4
 583: PPUSH
 584: CALL_OW 233
// SetLives ( veh , 420 ) ;
 588: LD_VAR 0 4
 592: PPUSH
 593: LD_INT 420
 595: PPUSH
 596: CALL_OW 234
// PlaceUnitXY ( veh , 193 , 133 , false ) ;
 600: LD_VAR 0 4
 604: PPUSH
 605: LD_INT 193
 607: PPUSH
 608: LD_INT 133
 610: PPUSH
 611: LD_INT 0
 613: PPUSH
 614: CALL_OW 48
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 11 ) ;
 618: LD_INT 14
 620: PPUSH
 621: LD_INT 1
 623: PPUSH
 624: LD_INT 1
 626: PPUSH
 627: LD_INT 26
 629: PPUSH
 630: LD_INT 11
 632: PPUSH
 633: CALL 25507 0 5
// veh := CreateVehicle ;
 637: LD_ADDR_VAR 0 4
 641: PUSH
 642: CALL_OW 45
 646: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
 647: LD_VAR 0 4
 651: PPUSH
 652: LD_INT 0
 654: PPUSH
 655: CALL_OW 233
// PlaceUnitXY ( veh , 261 , 115 , false ) ;
 659: LD_VAR 0 4
 663: PPUSH
 664: LD_INT 261
 666: PPUSH
 667: LD_INT 115
 669: PPUSH
 670: LD_INT 0
 672: PPUSH
 673: CALL_OW 48
// end ; end_of_file
 677: LD_VAR 0 1
 681: RET
// export amForces , amTech , amConstructList , amHealPoint , amBuildings , amTanks , amCommander , amCargo , amPatrol ; export function PrepareAmerican ; var i , j , b , un , skill , sources , patrolSpawnArea ; begin
 682: LD_INT 0
 684: PPUSH
 685: PPUSH
 686: PPUSH
 687: PPUSH
 688: PPUSH
 689: PPUSH
 690: PPUSH
 691: PPUSH
// uc_side := 1 ;
 692: LD_ADDR_OWVAR 20
 696: PUSH
 697: LD_INT 1
 699: ST_TO_ADDR
// uc_nation := nation_american ;
 700: LD_ADDR_OWVAR 21
 704: PUSH
 705: LD_INT 1
 707: ST_TO_ADDR
// amForces := [ ] ;
 708: LD_ADDR_EXP 27
 712: PUSH
 713: EMPTY
 714: ST_TO_ADDR
// amTech := GetTechNation ( 1 , nation_american , state_enabled ) ;
 715: LD_ADDR_EXP 28
 719: PUSH
 720: LD_INT 1
 722: PPUSH
 723: LD_INT 1
 725: PPUSH
 726: LD_INT 1
 728: PPUSH
 729: CALL 20730 0 3
 733: ST_TO_ADDR
// amConstructList := [ [ us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ] , [ us_medium_tracked , engine_combustion , control_remote , us_crane ] ] ;
 734: LD_ADDR_EXP 29
 738: PUSH
 739: LD_INT 2
 741: PUSH
 742: LD_INT 1
 744: PUSH
 745: LD_INT 2
 747: PUSH
 748: LD_INT 12
 750: PUSH
 751: EMPTY
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: PUSH
 757: LD_INT 3
 759: PUSH
 760: LD_INT 1
 762: PUSH
 763: LD_INT 2
 765: PUSH
 766: LD_INT 13
 768: PUSH
 769: EMPTY
 770: LIST
 771: LIST
 772: LIST
 773: LIST
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: ST_TO_ADDR
// amHealPoint := [ 94 , 132 ] ;
 779: LD_ADDR_EXP 30
 783: PUSH
 784: LD_INT 94
 786: PUSH
 787: LD_INT 132
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// amBuildings := [ ] ;
 794: LD_ADDR_EXP 31
 798: PUSH
 799: EMPTY
 800: ST_TO_ADDR
// amTanks := [ ] ;
 801: LD_ADDR_EXP 32
 805: PUSH
 806: EMPTY
 807: ST_TO_ADDR
// amCargo := 0 ;
 808: LD_ADDR_EXP 34
 812: PUSH
 813: LD_INT 0
 815: ST_TO_ADDR
// amPatrol := [ ] ;
 816: LD_ADDR_EXP 35
 820: PUSH
 821: EMPTY
 822: ST_TO_ADDR
// sources := [ [ 77 , 121 ] , [ 98 , 145 ] ] ;
 823: LD_ADDR_VAR 0 7
 827: PUSH
 828: LD_INT 77
 830: PUSH
 831: LD_INT 121
 833: PUSH
 834: EMPTY
 835: LIST
 836: LIST
 837: PUSH
 838: LD_INT 98
 840: PUSH
 841: LD_INT 145
 843: PUSH
 844: EMPTY
 845: LIST
 846: LIST
 847: PUSH
 848: EMPTY
 849: LIST
 850: LIST
 851: ST_TO_ADDR
// for i in sources do
 852: LD_ADDR_VAR 0 2
 856: PUSH
 857: LD_VAR 0 7
 861: PUSH
 862: FOR_IN
 863: IFFALSE 892
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 1 ) ;
 865: LD_VAR 0 2
 869: PUSH
 870: LD_INT 1
 872: ARRAY
 873: PPUSH
 874: LD_VAR 0 2
 878: PUSH
 879: LD_INT 2
 881: ARRAY
 882: PPUSH
 883: LD_INT 1
 885: PPUSH
 886: CALL_OW 441
 890: GO 862
 892: POP
 893: POP
// SetResourceType ( GetBase ( amBase ) , mat_cans , 550 ) ;
 894: LD_INT 2
 896: PPUSH
 897: CALL_OW 274
 901: PPUSH
 902: LD_INT 1
 904: PPUSH
 905: LD_INT 550
 907: PPUSH
 908: CALL_OW 277
// SetResourceType ( GetBase ( amBase ) , mat_oil , 120 ) ;
 912: LD_INT 2
 914: PPUSH
 915: CALL_OW 274
 919: PPUSH
 920: LD_INT 2
 922: PPUSH
 923: LD_INT 120
 925: PPUSH
 926: CALL_OW 277
// SetResourceType ( GetBase ( amBase ) , mat_siberit , 30 ) ;
 930: LD_INT 2
 932: PPUSH
 933: CALL_OW 274
 937: PPUSH
 938: LD_INT 3
 940: PPUSH
 941: LD_INT 30
 943: PPUSH
 944: CALL_OW 277
// skill := [ 6 , 7 , 8 , 9 ] [ Difficulty ] ;
 948: LD_ADDR_VAR 0 6
 952: PUSH
 953: LD_INT 6
 955: PUSH
 956: LD_INT 7
 958: PUSH
 959: LD_INT 8
 961: PUSH
 962: LD_INT 9
 964: PUSH
 965: EMPTY
 966: LIST
 967: LIST
 968: LIST
 969: LIST
 970: PUSH
 971: LD_OWVAR 67
 975: ARRAY
 976: ST_TO_ADDR
// amCommander := PrepareUnit ( Brown , false ,  ) ;
 977: LD_ADDR_EXP 33
 981: PUSH
 982: LD_STRING Brown
 984: PPUSH
 985: LD_INT 0
 987: PPUSH
 988: LD_STRING 
 990: PPUSH
 991: CALL 20667 0 3
 995: ST_TO_ADDR
// PlaceHumanInUnit ( amCommander , amBase ) ;
 996: LD_EXP 33
1000: PPUSH
1001: LD_INT 2
1003: PPUSH
1004: CALL_OW 52
// for i := 1 to 4 do
1008: LD_ADDR_VAR 0 2
1012: PUSH
1013: DOUBLE
1014: LD_INT 1
1016: DEC
1017: ST_TO_ADDR
1018: LD_INT 4
1020: PUSH
1021: FOR_TO
1022: IFFALSE 1546
// for j := 1 to [ [ 6 , 7 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] , [ 5 , 5 , 6 , 7 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
1024: LD_ADDR_VAR 0 3
1028: PUSH
1029: DOUBLE
1030: LD_INT 1
1032: DEC
1033: ST_TO_ADDR
1034: LD_INT 6
1036: PUSH
1037: LD_INT 7
1039: PUSH
1040: LD_INT 8
1042: PUSH
1043: LD_INT 9
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: PUSH
1052: LD_OWVAR 67
1056: ARRAY
1057: PUSH
1058: LD_INT 3
1060: PUSH
1061: LD_INT 4
1063: PUSH
1064: LD_INT 5
1066: PUSH
1067: LD_INT 5
1069: PUSH
1070: EMPTY
1071: LIST
1072: LIST
1073: LIST
1074: LIST
1075: PUSH
1076: LD_OWVAR 67
1080: ARRAY
1081: PUSH
1082: LD_INT 5
1084: PUSH
1085: LD_INT 5
1087: PUSH
1088: LD_INT 6
1090: PUSH
1091: LD_INT 7
1093: PUSH
1094: EMPTY
1095: LIST
1096: LIST
1097: LIST
1098: LIST
1099: PUSH
1100: LD_OWVAR 67
1104: ARRAY
1105: PUSH
1106: LD_INT 2
1108: PUSH
1109: LD_INT 3
1111: PUSH
1112: LD_INT 3
1114: PUSH
1115: LD_INT 3
1117: PUSH
1118: EMPTY
1119: LIST
1120: LIST
1121: LIST
1122: LIST
1123: PUSH
1124: LD_OWVAR 67
1128: ARRAY
1129: PUSH
1130: EMPTY
1131: LIST
1132: LIST
1133: LIST
1134: LIST
1135: PUSH
1136: LD_VAR 0 2
1140: ARRAY
1141: PUSH
1142: FOR_TO
1143: IFFALSE 1542
// begin PrepareHuman ( false , i , skill ) ;
1145: LD_INT 0
1147: PPUSH
1148: LD_VAR 0 2
1152: PPUSH
1153: LD_VAR 0 6
1157: PPUSH
1158: CALL_OW 380
// un := CreateHuman ;
1162: LD_ADDR_VAR 0 5
1166: PUSH
1167: CALL_OW 44
1171: ST_TO_ADDR
// amForces := Join ( amForces , un ) ;
1172: LD_ADDR_EXP 27
1176: PUSH
1177: LD_EXP 27
1181: PPUSH
1182: LD_VAR 0 5
1186: PPUSH
1187: CALL 58358 0 2
1191: ST_TO_ADDR
// case i of 1 :
1192: LD_VAR 0 2
1196: PUSH
1197: LD_INT 1
1199: DOUBLE
1200: EQUAL
1201: IFTRUE 1205
1203: GO 1274
1205: POP
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] ] ) ; 2 :
1206: LD_ADDR_VAR 0 4
1210: PUSH
1211: LD_INT 22
1213: PUSH
1214: LD_INT 1
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: PUSH
1221: LD_INT 2
1223: PUSH
1224: LD_INT 30
1226: PUSH
1227: LD_INT 32
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: PUSH
1234: LD_INT 30
1236: PUSH
1237: LD_INT 5
1239: PUSH
1240: EMPTY
1241: LIST
1242: LIST
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: LIST
1248: PUSH
1249: LD_INT 3
1251: PUSH
1252: LD_INT 62
1254: PUSH
1255: EMPTY
1256: LIST
1257: PUSH
1258: EMPTY
1259: LIST
1260: LIST
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: LIST
1266: PPUSH
1267: CALL_OW 69
1271: ST_TO_ADDR
1272: GO 1453
1274: LD_INT 2
1276: DOUBLE
1277: EQUAL
1278: IFTRUE 1282
1280: GO 1311
1282: POP
// b := UnitFilter ( amBase , [ f_not , [ f_full ] ] ) ; 3 :
1283: LD_ADDR_VAR 0 4
1287: PUSH
1288: LD_INT 2
1290: PPUSH
1291: LD_INT 3
1293: PUSH
1294: LD_INT 62
1296: PUSH
1297: EMPTY
1298: LIST
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: PPUSH
1304: CALL_OW 72
1308: ST_TO_ADDR
1309: GO 1453
1311: LD_INT 3
1313: DOUBLE
1314: EQUAL
1315: IFTRUE 1319
1317: GO 1393
1319: POP
// b := ReverseArray ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_control_tower ] ] , [ f_not , [ f_full ] ] ] ) ) ; 4 :
1320: LD_ADDR_VAR 0 4
1324: PUSH
1325: LD_INT 22
1327: PUSH
1328: LD_INT 1
1330: PUSH
1331: EMPTY
1332: LIST
1333: LIST
1334: PUSH
1335: LD_INT 2
1337: PUSH
1338: LD_INT 30
1340: PUSH
1341: LD_INT 3
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: PUSH
1348: LD_INT 30
1350: PUSH
1351: LD_INT 36
1353: PUSH
1354: EMPTY
1355: LIST
1356: LIST
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: LIST
1362: PUSH
1363: LD_INT 3
1365: PUSH
1366: LD_INT 62
1368: PUSH
1369: EMPTY
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: PUSH
1376: EMPTY
1377: LIST
1378: LIST
1379: LIST
1380: PPUSH
1381: CALL_OW 69
1385: PPUSH
1386: CALL 53645 0 1
1390: ST_TO_ADDR
1391: GO 1453
1393: LD_INT 4
1395: DOUBLE
1396: EQUAL
1397: IFTRUE 1401
1399: GO 1452
1401: POP
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_full ] , [ f_not , [ f_full ] ] ] ) ; end ;
1402: LD_ADDR_VAR 0 4
1406: PUSH
1407: LD_INT 22
1409: PUSH
1410: LD_INT 1
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: PUSH
1417: LD_INT 30
1419: PUSH
1420: LD_INT 8
1422: PUSH
1423: EMPTY
1424: LIST
1425: LIST
1426: PUSH
1427: LD_INT 3
1429: PUSH
1430: LD_INT 62
1432: PUSH
1433: EMPTY
1434: LIST
1435: PUSH
1436: EMPTY
1437: LIST
1438: LIST
1439: PUSH
1440: EMPTY
1441: LIST
1442: LIST
1443: LIST
1444: PPUSH
1445: CALL_OW 69
1449: ST_TO_ADDR
1450: GO 1453
1452: POP
// if b then
1453: LD_VAR 0 4
1457: IFFALSE 1519
// begin if GetBType ( b [ 1 ] ) = b_barracks and Prob ( 60 ) then
1459: LD_VAR 0 4
1463: PUSH
1464: LD_INT 1
1466: ARRAY
1467: PPUSH
1468: CALL_OW 266
1472: PUSH
1473: LD_INT 5
1475: EQUAL
1476: PUSH
1477: LD_INT 60
1479: PPUSH
1480: CALL_OW 13
1484: AND
1485: IFFALSE 1499
// SetClass ( un , class_sniper ) ;
1487: LD_VAR 0 5
1491: PPUSH
1492: LD_INT 5
1494: PPUSH
1495: CALL_OW 336
// PlaceHumanInUnit ( un , b [ 1 ] ) ;
1499: LD_VAR 0 5
1503: PPUSH
1504: LD_VAR 0 4
1508: PUSH
1509: LD_INT 1
1511: ARRAY
1512: PPUSH
1513: CALL_OW 52
// end else
1517: GO 1540
// PlaceUnitXYR ( un , 92 , 137 , 4 , false ) ;
1519: LD_VAR 0 5
1523: PPUSH
1524: LD_INT 92
1526: PPUSH
1527: LD_INT 137
1529: PPUSH
1530: LD_INT 4
1532: PPUSH
1533: LD_INT 0
1535: PPUSH
1536: CALL_OW 50
// end ;
1540: GO 1142
1542: POP
1543: POP
1544: GO 1021
1546: POP
1547: POP
// patrolSpawnArea := [ patrol1aArea , patrol2aArea , patrol3aArea ] ;
1548: LD_ADDR_VAR 0 8
1552: PUSH
1553: LD_INT 30
1555: PUSH
1556: LD_INT 32
1558: PUSH
1559: LD_INT 36
1561: PUSH
1562: EMPTY
1563: LIST
1564: LIST
1565: LIST
1566: ST_TO_ADDR
// for i := 1 to patrolSpawnArea do
1567: LD_ADDR_VAR 0 2
1571: PUSH
1572: DOUBLE
1573: LD_INT 1
1575: DEC
1576: ST_TO_ADDR
1577: LD_VAR 0 8
1581: PUSH
1582: FOR_TO
1583: IFFALSE 1752
// begin for j := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
1585: LD_ADDR_VAR 0 3
1589: PUSH
1590: DOUBLE
1591: LD_INT 1
1593: DEC
1594: ST_TO_ADDR
1595: LD_INT 1
1597: PUSH
1598: LD_INT 2
1600: PUSH
1601: LD_INT 2
1603: PUSH
1604: LD_INT 3
1606: PUSH
1607: EMPTY
1608: LIST
1609: LIST
1610: LIST
1611: LIST
1612: PUSH
1613: LD_OWVAR 67
1617: ARRAY
1618: PUSH
1619: FOR_TO
1620: IFFALSE 1748
// begin PrepareSoldier ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
1622: LD_INT 0
1624: PPUSH
1625: LD_INT 7
1627: PUSH
1628: LD_INT 8
1630: PUSH
1631: LD_INT 9
1633: PUSH
1634: LD_INT 10
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: PUSH
1643: LD_OWVAR 67
1647: ARRAY
1648: PPUSH
1649: CALL_OW 381
// un := CreateHuman ;
1653: LD_ADDR_VAR 0 5
1657: PUSH
1658: CALL_OW 44
1662: ST_TO_ADDR
// if j mod 2 = 0 then
1663: LD_VAR 0 3
1667: PUSH
1668: LD_INT 2
1670: MOD
1671: PUSH
1672: LD_INT 0
1674: EQUAL
1675: IFFALSE 1689
// SetClass ( un , class_sniper ) ;
1677: LD_VAR 0 5
1681: PPUSH
1682: LD_INT 5
1684: PPUSH
1685: CALL_OW 336
// amPatrol := Join ( amPatrol , un ) ;
1689: LD_ADDR_EXP 35
1693: PUSH
1694: LD_EXP 35
1698: PPUSH
1699: LD_VAR 0 5
1703: PPUSH
1704: CALL 58358 0 2
1708: ST_TO_ADDR
// PlaceUnitArea ( un , patrolSpawnArea [ i ] , false ) ;
1709: LD_VAR 0 5
1713: PPUSH
1714: LD_VAR 0 8
1718: PUSH
1719: LD_VAR 0 2
1723: ARRAY
1724: PPUSH
1725: LD_INT 0
1727: PPUSH
1728: CALL_OW 49
// SetTag ( un , i ) ;
1732: LD_VAR 0 5
1736: PPUSH
1737: LD_VAR 0 2
1741: PPUSH
1742: CALL_OW 109
// end ;
1746: GO 1619
1748: POP
1749: POP
// end ;
1750: GO 1582
1752: POP
1753: POP
// end ;
1754: LD_VAR 0 1
1758: RET
// every 0 0$2 trigger amScriptActive and Count ( amForces ) do var i , tmp , remote , undone , side , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
1759: LD_EXP 3
1763: PUSH
1764: LD_EXP 27
1768: PPUSH
1769: CALL 22769 0 1
1773: AND
1774: IFFALSE 4181
1776: GO 1778
1778: DISABLE
1779: LD_INT 0
1781: PPUSH
1782: PPUSH
1783: PPUSH
1784: PPUSH
1785: PPUSH
1786: PPUSH
1787: PPUSH
1788: PPUSH
1789: PPUSH
1790: PPUSH
1791: PPUSH
1792: PPUSH
1793: PPUSH
1794: PPUSH
1795: PPUSH
1796: PPUSH
1797: PPUSH
1798: PPUSH
// begin enable ;
1799: ENABLE
// side := 1 ;
1800: LD_ADDR_VAR 0 5
1804: PUSH
1805: LD_INT 1
1807: ST_TO_ADDR
// remote := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
1808: LD_ADDR_VAR 0 3
1812: PUSH
1813: LD_INT 22
1815: PUSH
1816: LD_VAR 0 5
1820: PUSH
1821: EMPTY
1822: LIST
1823: LIST
1824: PUSH
1825: LD_INT 33
1827: PUSH
1828: LD_INT 2
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: PUSH
1835: LD_INT 50
1837: PUSH
1838: EMPTY
1839: LIST
1840: PUSH
1841: LD_INT 3
1843: PUSH
1844: LD_INT 61
1846: PUSH
1847: EMPTY
1848: LIST
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: PPUSH
1860: CALL_OW 69
1864: ST_TO_ADDR
// if remote and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_btype , b_control_tower ] ] ) ) then
1865: LD_VAR 0 3
1869: PUSH
1870: LD_INT 22
1872: PUSH
1873: LD_VAR 0 5
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: PUSH
1882: LD_INT 50
1884: PUSH
1885: EMPTY
1886: LIST
1887: PUSH
1888: LD_INT 30
1890: PUSH
1891: LD_INT 36
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: PUSH
1898: EMPTY
1899: LIST
1900: LIST
1901: LIST
1902: PPUSH
1903: CALL_OW 69
1907: PPUSH
1908: CALL 22769 0 1
1912: AND
1913: IFFALSE 1941
// for i in remote do
1915: LD_ADDR_VAR 0 1
1919: PUSH
1920: LD_VAR 0 3
1924: PUSH
1925: FOR_IN
1926: IFFALSE 1939
// Connect ( i ) ;
1928: LD_VAR 0 1
1932: PPUSH
1933: CALL 28975 0 1
1937: GO 1925
1939: POP
1940: POP
// if amTech then
1941: LD_EXP 28
1945: IFFALSE 2101
// begin lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1947: LD_ADDR_VAR 0 6
1951: PUSH
1952: LD_INT 22
1954: PUSH
1955: LD_VAR 0 5
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: PUSH
1964: LD_INT 50
1966: PUSH
1967: EMPTY
1968: LIST
1969: PUSH
1970: LD_INT 2
1972: PUSH
1973: LD_INT 30
1975: PUSH
1976: LD_INT 6
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: PUSH
1983: LD_INT 30
1985: PUSH
1986: LD_INT 7
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: PUSH
1993: LD_INT 30
1995: PUSH
1996: LD_INT 8
1998: PUSH
1999: EMPTY
2000: LIST
2001: LIST
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: LIST
2007: LIST
2008: PUSH
2009: EMPTY
2010: LIST
2011: LIST
2012: LIST
2013: PPUSH
2014: CALL_OW 69
2018: ST_TO_ADDR
// if lab then
2019: LD_VAR 0 6
2023: IFFALSE 2101
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
2025: LD_VAR 0 6
2029: PUSH
2030: LD_INT 1
2032: ARRAY
2033: PPUSH
2034: CALL_OW 461
2038: PUSH
2039: LD_INT 2
2041: EQUAL
2042: IFFALSE 2101
// begin for i in amTech do
2044: LD_ADDR_VAR 0 1
2048: PUSH
2049: LD_EXP 28
2053: PUSH
2054: FOR_IN
2055: IFFALSE 2099
// if CanBeResearched ( lab [ 1 ] , i ) then
2057: LD_VAR 0 6
2061: PUSH
2062: LD_INT 1
2064: ARRAY
2065: PPUSH
2066: LD_VAR 0 1
2070: PPUSH
2071: CALL_OW 430
2075: IFFALSE 2097
// begin ComResearch ( lab [ 1 ] , i ) ;
2077: LD_VAR 0 6
2081: PUSH
2082: LD_INT 1
2084: ARRAY
2085: PPUSH
2086: LD_VAR 0 1
2090: PPUSH
2091: CALL_OW 124
// break ;
2095: GO 2099
// end ;
2097: GO 2054
2099: POP
2100: POP
// end ; end ; end ; fac := FilterUnitsInArea ( amBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
2101: LD_ADDR_VAR 0 16
2105: PUSH
2106: LD_INT 1
2108: PPUSH
2109: LD_INT 22
2111: PUSH
2112: LD_VAR 0 5
2116: PUSH
2117: EMPTY
2118: LIST
2119: LIST
2120: PUSH
2121: LD_INT 30
2123: PUSH
2124: LD_INT 3
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: PUSH
2131: LD_INT 50
2133: PUSH
2134: EMPTY
2135: LIST
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: PPUSH
2142: CALL_OW 70
2146: ST_TO_ADDR
// if fac then
2147: LD_VAR 0 16
2151: IFFALSE 2417
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
2153: LD_VAR 0 16
2157: PUSH
2158: LD_INT 1
2160: ARRAY
2161: PPUSH
2162: CALL_OW 461
2166: PUSH
2167: LD_INT 2
2169: EQUAL
2170: IFFALSE 2417
// begin emptyTowers := FilterUnitsInArea ( amBaseArea , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
2172: LD_ADDR_VAR 0 17
2176: PUSH
2177: LD_INT 1
2179: PPUSH
2180: LD_INT 2
2182: PUSH
2183: LD_INT 30
2185: PUSH
2186: LD_INT 32
2188: PUSH
2189: EMPTY
2190: LIST
2191: LIST
2192: PUSH
2193: LD_INT 30
2195: PUSH
2196: LD_INT 33
2198: PUSH
2199: EMPTY
2200: LIST
2201: LIST
2202: PUSH
2203: EMPTY
2204: LIST
2205: LIST
2206: LIST
2207: PUSH
2208: LD_INT 35
2210: PUSH
2211: LD_INT 0
2213: PUSH
2214: EMPTY
2215: LIST
2216: LIST
2217: PUSH
2218: EMPTY
2219: LIST
2220: LIST
2221: PPUSH
2222: CALL_OW 70
2226: ST_TO_ADDR
// if emptyTowers then
2227: LD_VAR 0 17
2231: IFFALSE 2279
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , amBaseArea ) ;
2233: LD_ADDR_VAR 0 18
2237: PUSH
2238: LD_VAR 0 17
2242: PUSH
2243: LD_INT 1
2245: ARRAY
2246: PPUSH
2247: LD_INT 1
2249: PPUSH
2250: CALL 31014 0 2
2254: ST_TO_ADDR
// if weapon then
2255: LD_VAR 0 18
2259: IFFALSE 2279
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
2261: LD_VAR 0 17
2265: PUSH
2266: LD_INT 1
2268: ARRAY
2269: PPUSH
2270: LD_VAR 0 18
2274: PPUSH
2275: CALL_OW 148
// end ; if amConstructList then
2279: LD_EXP 29
2283: IFFALSE 2417
// if CanBeConstructed ( fac [ 1 ] , amConstructList [ 1 ] [ 1 ] , amConstructList [ 1 ] [ 2 ] , amConstructList [ 1 ] [ 3 ] , amConstructList [ 1 ] [ 4 ] ) then
2285: LD_VAR 0 16
2289: PUSH
2290: LD_INT 1
2292: ARRAY
2293: PPUSH
2294: LD_EXP 29
2298: PUSH
2299: LD_INT 1
2301: ARRAY
2302: PUSH
2303: LD_INT 1
2305: ARRAY
2306: PPUSH
2307: LD_EXP 29
2311: PUSH
2312: LD_INT 1
2314: ARRAY
2315: PUSH
2316: LD_INT 2
2318: ARRAY
2319: PPUSH
2320: LD_EXP 29
2324: PUSH
2325: LD_INT 1
2327: ARRAY
2328: PUSH
2329: LD_INT 3
2331: ARRAY
2332: PPUSH
2333: LD_EXP 29
2337: PUSH
2338: LD_INT 1
2340: ARRAY
2341: PUSH
2342: LD_INT 4
2344: ARRAY
2345: PPUSH
2346: CALL_OW 448
2350: IFFALSE 2417
// ComConstruct ( fac [ 1 ] , amConstructList [ 1 ] [ 1 ] , amConstructList [ 1 ] [ 2 ] , amConstructList [ 1 ] [ 3 ] , amConstructList [ 1 ] [ 4 ] ) ;
2352: LD_VAR 0 16
2356: PUSH
2357: LD_INT 1
2359: ARRAY
2360: PPUSH
2361: LD_EXP 29
2365: PUSH
2366: LD_INT 1
2368: ARRAY
2369: PUSH
2370: LD_INT 1
2372: ARRAY
2373: PPUSH
2374: LD_EXP 29
2378: PUSH
2379: LD_INT 1
2381: ARRAY
2382: PUSH
2383: LD_INT 2
2385: ARRAY
2386: PPUSH
2387: LD_EXP 29
2391: PUSH
2392: LD_INT 1
2394: ARRAY
2395: PUSH
2396: LD_INT 3
2398: ARRAY
2399: PPUSH
2400: LD_EXP 29
2404: PUSH
2405: LD_INT 1
2407: ARRAY
2408: PUSH
2409: LD_INT 4
2411: ARRAY
2412: PPUSH
2413: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( amBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2417: LD_ADDR_VAR 0 2
2421: PUSH
2422: LD_INT 1
2424: PPUSH
2425: LD_INT 21
2427: PUSH
2428: LD_INT 3
2430: PUSH
2431: EMPTY
2432: LIST
2433: LIST
2434: PUSH
2435: LD_INT 3
2437: PUSH
2438: LD_INT 57
2440: PUSH
2441: EMPTY
2442: LIST
2443: PUSH
2444: EMPTY
2445: LIST
2446: LIST
2447: PUSH
2448: LD_INT 3
2450: PUSH
2451: LD_INT 24
2453: PUSH
2454: LD_INT 1000
2456: PUSH
2457: EMPTY
2458: LIST
2459: LIST
2460: PUSH
2461: EMPTY
2462: LIST
2463: LIST
2464: PUSH
2465: EMPTY
2466: LIST
2467: LIST
2468: LIST
2469: PPUSH
2470: CALL_OW 70
2474: ST_TO_ADDR
// cr := GetListOfCratesInArea ( amCratesArea ) ;
2475: LD_ADDR_VAR 0 10
2479: PUSH
2480: LD_INT 13
2482: PPUSH
2483: CALL_OW 435
2487: ST_TO_ADDR
// sci := UnitFilter ( amForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
2488: LD_ADDR_VAR 0 11
2492: PUSH
2493: LD_EXP 27
2497: PPUSH
2498: LD_INT 25
2500: PUSH
2501: LD_INT 4
2503: PUSH
2504: EMPTY
2505: LIST
2506: LIST
2507: PUSH
2508: LD_INT 50
2510: PUSH
2511: EMPTY
2512: LIST
2513: PUSH
2514: EMPTY
2515: LIST
2516: LIST
2517: PPUSH
2518: CALL_OW 72
2522: ST_TO_ADDR
// lab := FilterUnitsInArea ( amBaseArea , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
2523: LD_ADDR_VAR 0 6
2527: PUSH
2528: LD_INT 1
2530: PPUSH
2531: LD_INT 2
2533: PUSH
2534: LD_INT 30
2536: PUSH
2537: LD_INT 6
2539: PUSH
2540: EMPTY
2541: LIST
2542: LIST
2543: PUSH
2544: LD_INT 30
2546: PUSH
2547: LD_INT 7
2549: PUSH
2550: EMPTY
2551: LIST
2552: LIST
2553: PUSH
2554: LD_INT 30
2556: PUSH
2557: LD_INT 8
2559: PUSH
2560: EMPTY
2561: LIST
2562: LIST
2563: PUSH
2564: EMPTY
2565: LIST
2566: LIST
2567: LIST
2568: LIST
2569: PPUSH
2570: CALL_OW 70
2574: ST_TO_ADDR
// if sci then
2575: LD_VAR 0 11
2579: IFFALSE 2738
// begin hurtUnits := UnitFilter ( amForces , [ [ f_inarea , amBaseArea ] , [ f_tag , tHeal ] ] ) ;
2581: LD_ADDR_VAR 0 13
2585: PUSH
2586: LD_EXP 27
2590: PPUSH
2591: LD_INT 95
2593: PUSH
2594: LD_INT 1
2596: PUSH
2597: EMPTY
2598: LIST
2599: LIST
2600: PUSH
2601: LD_INT 120
2603: PUSH
2604: LD_INT 1
2606: PUSH
2607: EMPTY
2608: LIST
2609: LIST
2610: PUSH
2611: EMPTY
2612: LIST
2613: LIST
2614: PPUSH
2615: CALL_OW 72
2619: ST_TO_ADDR
// if hurtUnits then
2620: LD_VAR 0 13
2624: IFFALSE 2685
// begin for i in sci do
2626: LD_ADDR_VAR 0 1
2630: PUSH
2631: LD_VAR 0 11
2635: PUSH
2636: FOR_IN
2637: IFFALSE 2681
// if IsInUnit ( i ) then
2639: LD_VAR 0 1
2643: PPUSH
2644: CALL_OW 310
2648: IFFALSE 2661
// ComExitBuilding ( i ) else
2650: LD_VAR 0 1
2654: PPUSH
2655: CALL_OW 122
2659: GO 2679
// ComHeal ( i , hurtUnits [ 1 ] ) ;
2661: LD_VAR 0 1
2665: PPUSH
2666: LD_VAR 0 13
2670: PUSH
2671: LD_INT 1
2673: ARRAY
2674: PPUSH
2675: CALL_OW 128
2679: GO 2636
2681: POP
2682: POP
// end else
2683: GO 2738
// if lab then
2685: LD_VAR 0 6
2689: IFFALSE 2738
// begin for i in sci do
2691: LD_ADDR_VAR 0 1
2695: PUSH
2696: LD_VAR 0 11
2700: PUSH
2701: FOR_IN
2702: IFFALSE 2736
// if not IsInUnit ( i ) then
2704: LD_VAR 0 1
2708: PPUSH
2709: CALL_OW 310
2713: NOT
2714: IFFALSE 2734
// ComEnterUnit ( i , lab [ 1 ] ) ;
2716: LD_VAR 0 1
2720: PPUSH
2721: LD_VAR 0 6
2725: PUSH
2726: LD_INT 1
2728: ARRAY
2729: PPUSH
2730: CALL_OW 120
2734: GO 2701
2736: POP
2737: POP
// end ; end ; eng := UnitFilter ( amForces , [ f_class , 2 ] ) ;
2738: LD_ADDR_VAR 0 7
2742: PUSH
2743: LD_EXP 27
2747: PPUSH
2748: LD_INT 25
2750: PUSH
2751: LD_INT 2
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PPUSH
2758: CALL_OW 72
2762: ST_TO_ADDR
// if eng then
2763: LD_VAR 0 7
2767: IFFALSE 3542
// begin for i in eng do
2769: LD_ADDR_VAR 0 1
2773: PUSH
2774: LD_VAR 0 7
2778: PUSH
2779: FOR_IN
2780: IFFALSE 3540
// begin tag := GetTag ( i ) ;
2782: LD_ADDR_VAR 0 8
2786: PUSH
2787: LD_VAR 0 1
2791: PPUSH
2792: CALL_OW 110
2796: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
2797: LD_VAR 0 1
2801: PPUSH
2802: CALL_OW 256
2806: PUSH
2807: LD_INT 800
2809: LESS
2810: PUSH
2811: LD_VAR 0 8
2815: PUSH
2816: LD_INT 1
2818: NONEQUAL
2819: AND
2820: IFFALSE 2870
// begin SetTag ( i , tHeal ) ;
2822: LD_VAR 0 1
2826: PPUSH
2827: LD_INT 1
2829: PPUSH
2830: CALL_OW 109
// ComMoveXY ( i , amHealPoint [ 1 ] , amHealPoint [ 2 ] ) ;
2834: LD_VAR 0 1
2838: PPUSH
2839: LD_EXP 30
2843: PUSH
2844: LD_INT 1
2846: ARRAY
2847: PPUSH
2848: LD_EXP 30
2852: PUSH
2853: LD_INT 2
2855: ARRAY
2856: PPUSH
2857: CALL_OW 111
// AddComHold ( i ) ;
2861: LD_VAR 0 1
2865: PPUSH
2866: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
2870: LD_VAR 0 8
2874: PUSH
2875: LD_INT 1
2877: EQUAL
2878: PUSH
2879: LD_VAR 0 1
2883: PPUSH
2884: CALL_OW 256
2888: PUSH
2889: LD_INT 1000
2891: EQUAL
2892: AND
2893: IFFALSE 2907
// SetTag ( i , 0 ) ;
2895: LD_VAR 0 1
2899: PPUSH
2900: LD_INT 0
2902: PPUSH
2903: CALL_OW 109
// if not tag then
2907: LD_VAR 0 8
2911: NOT
2912: IFFALSE 3080
// begin undone := FilterUnitsInArea ( amBaseArea , [ f_constructed ] ) ;
2914: LD_ADDR_VAR 0 4
2918: PUSH
2919: LD_INT 1
2921: PPUSH
2922: LD_INT 57
2924: PUSH
2925: EMPTY
2926: LIST
2927: PPUSH
2928: CALL_OW 70
2932: ST_TO_ADDR
// if undone then
2933: LD_VAR 0 4
2937: IFFALSE 2959
// begin ComComplete ( i , undone [ 1 ] ) ;
2939: LD_VAR 0 1
2943: PPUSH
2944: LD_VAR 0 4
2948: PUSH
2949: LD_INT 1
2951: ARRAY
2952: PPUSH
2953: CALL 28867 0 2
// continue ;
2957: GO 2779
// end ; if cr or tmp or Count ( amBuildings ) then
2959: LD_VAR 0 10
2963: PUSH
2964: LD_VAR 0 2
2968: OR
2969: PUSH
2970: LD_EXP 31
2974: PPUSH
2975: CALL 22769 0 1
2979: OR
2980: IFFALSE 3056
// begin if IsInUnit ( i ) then
2982: LD_VAR 0 1
2986: PPUSH
2987: CALL_OW 310
2991: IFFALSE 3002
// ComExitBuilding ( i ) ;
2993: LD_VAR 0 1
2997: PPUSH
2998: CALL_OW 122
// if tmp then
3002: LD_VAR 0 2
3006: IFFALSE 3022
// SetTag ( i , tRepair ) else
3008: LD_VAR 0 1
3012: PPUSH
3013: LD_INT 3
3015: PPUSH
3016: CALL_OW 109
3020: GO 3054
// if cr then
3022: LD_VAR 0 10
3026: IFFALSE 3042
// SetTag ( i , tCrates ) else
3028: LD_VAR 0 1
3032: PPUSH
3033: LD_INT 2
3035: PPUSH
3036: CALL_OW 109
3040: GO 3054
// SetTag ( i , tBuild ) ;
3042: LD_VAR 0 1
3046: PPUSH
3047: LD_INT 5
3049: PPUSH
3050: CALL_OW 109
// end else
3054: GO 3080
// if not IsInUnit ( i ) then
3056: LD_VAR 0 1
3060: PPUSH
3061: CALL_OW 310
3065: NOT
3066: IFFALSE 3080
// ComEnterUnit ( i , amBase ) ;
3068: LD_VAR 0 1
3072: PPUSH
3073: LD_INT 2
3075: PPUSH
3076: CALL_OW 120
// end ; if tag = tRepair then
3080: LD_VAR 0 8
3084: PUSH
3085: LD_INT 3
3087: EQUAL
3088: IFFALSE 3190
// begin if IsInUnit ( i ) then
3090: LD_VAR 0 1
3094: PPUSH
3095: CALL_OW 310
3099: IFFALSE 3112
// begin ComExitBuilding ( i ) ;
3101: LD_VAR 0 1
3105: PPUSH
3106: CALL_OW 122
// continue ;
3110: GO 2779
// end ; if not tmp then
3112: LD_VAR 0 2
3116: NOT
3117: IFFALSE 3133
// begin SetTag ( i , 0 ) ;
3119: LD_VAR 0 1
3123: PPUSH
3124: LD_INT 0
3126: PPUSH
3127: CALL_OW 109
// continue ;
3131: GO 2779
// end ; if not HasTask ( i ) then
3133: LD_VAR 0 1
3137: PPUSH
3138: CALL_OW 314
3142: NOT
3143: IFFALSE 3163
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
3145: LD_VAR 0 1
3149: PPUSH
3150: LD_VAR 0 2
3154: PUSH
3155: LD_INT 1
3157: ARRAY
3158: PPUSH
3159: CALL_OW 130
// if not IsInArea ( i , amBaseArea ) then
3163: LD_VAR 0 1
3167: PPUSH
3168: LD_INT 1
3170: PPUSH
3171: CALL_OW 308
3175: NOT
3176: IFFALSE 3190
// ComMoveToArea ( i , amBaseArea ) ;
3178: LD_VAR 0 1
3182: PPUSH
3183: LD_INT 1
3185: PPUSH
3186: CALL_OW 113
// end ; if tag = tBuild then
3190: LD_VAR 0 8
3194: PUSH
3195: LD_INT 5
3197: EQUAL
3198: IFFALSE 3393
// begin if IsInUnit ( i ) then
3200: LD_VAR 0 1
3204: PPUSH
3205: CALL_OW 310
3209: IFFALSE 3222
// begin ComExitBuilding ( i ) ;
3211: LD_VAR 0 1
3215: PPUSH
3216: CALL_OW 122
// continue ;
3220: GO 2779
// end ; if not Count ( amBuildings ) then
3222: LD_EXP 31
3226: PPUSH
3227: CALL 22769 0 1
3231: NOT
3232: IFFALSE 3250
// begin SetTag ( i , 0 ) ;
3234: LD_VAR 0 1
3238: PPUSH
3239: LD_INT 0
3241: PPUSH
3242: CALL_OW 109
// continue ;
3246: GO 2779
// end else
3248: GO 3287
// if not CanBeBuiltOnlyResources ( amBase , amBuildings [ 1 ] [ 1 ] ) then
3250: LD_INT 2
3252: PPUSH
3253: LD_EXP 31
3257: PUSH
3258: LD_INT 1
3260: ARRAY
3261: PUSH
3262: LD_INT 1
3264: ARRAY
3265: PPUSH
3266: CALL 62277 0 2
3270: NOT
3271: IFFALSE 3287
// begin SetTag ( i , 0 ) ;
3273: LD_VAR 0 1
3277: PPUSH
3278: LD_INT 0
3280: PPUSH
3281: CALL_OW 109
// continue ;
3285: GO 2779
// end ; undone := FilterUnitsInArea ( amBaseArea , [ f_constructed ] ) ;
3287: LD_ADDR_VAR 0 4
3291: PUSH
3292: LD_INT 1
3294: PPUSH
3295: LD_INT 57
3297: PUSH
3298: EMPTY
3299: LIST
3300: PPUSH
3301: CALL_OW 70
3305: ST_TO_ADDR
// if undone then
3306: LD_VAR 0 4
3310: IFFALSE 3332
// begin ComComplete ( i , undone [ 1 ] ) ;
3312: LD_VAR 0 1
3316: PPUSH
3317: LD_VAR 0 4
3321: PUSH
3322: LD_INT 1
3324: ARRAY
3325: PPUSH
3326: CALL 28867 0 2
// continue ;
3330: GO 2779
// end ; ComBuild ( i , amBuildings [ 1 ] [ 1 ] , amBuildings [ 1 ] [ 2 ] , amBuildings [ 1 ] [ 3 ] , amBuildings [ 1 ] [ 4 ] ) ;
3332: LD_VAR 0 1
3336: PPUSH
3337: LD_EXP 31
3341: PUSH
3342: LD_INT 1
3344: ARRAY
3345: PUSH
3346: LD_INT 1
3348: ARRAY
3349: PPUSH
3350: LD_EXP 31
3354: PUSH
3355: LD_INT 1
3357: ARRAY
3358: PUSH
3359: LD_INT 2
3361: ARRAY
3362: PPUSH
3363: LD_EXP 31
3367: PUSH
3368: LD_INT 1
3370: ARRAY
3371: PUSH
3372: LD_INT 3
3374: ARRAY
3375: PPUSH
3376: LD_EXP 31
3380: PUSH
3381: LD_INT 1
3383: ARRAY
3384: PUSH
3385: LD_INT 4
3387: ARRAY
3388: PPUSH
3389: CALL_OW 145
// end ; if tag = tCrates then
3393: LD_VAR 0 8
3397: PUSH
3398: LD_INT 2
3400: EQUAL
3401: IFFALSE 3538
// begin if IsInUnit ( i ) then
3403: LD_VAR 0 1
3407: PPUSH
3408: CALL_OW 310
3412: IFFALSE 3425
// begin ComExitBuilding ( i ) ;
3414: LD_VAR 0 1
3418: PPUSH
3419: CALL_OW 122
// continue ;
3423: GO 2779
// end ; if not cr then
3425: LD_VAR 0 10
3429: NOT
3430: IFFALSE 3446
// begin SetTag ( i , 0 ) ;
3432: LD_VAR 0 1
3436: PPUSH
3437: LD_INT 0
3439: PPUSH
3440: CALL_OW 109
// continue ;
3444: GO 2779
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
3446: LD_VAR 0 1
3450: PPUSH
3451: CALL_OW 314
3455: NOT
3456: PUSH
3457: LD_INT 81
3459: PUSH
3460: LD_VAR 0 5
3464: PUSH
3465: EMPTY
3466: LIST
3467: LIST
3468: PUSH
3469: LD_INT 92
3471: PUSH
3472: LD_VAR 0 10
3476: PUSH
3477: LD_INT 1
3479: ARRAY
3480: PUSH
3481: LD_VAR 0 10
3485: PUSH
3486: LD_INT 2
3488: ARRAY
3489: PUSH
3490: LD_INT 12
3492: PUSH
3493: EMPTY
3494: LIST
3495: LIST
3496: LIST
3497: LIST
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PPUSH
3503: CALL_OW 69
3507: NOT
3508: AND
3509: IFFALSE 3538
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
3511: LD_VAR 0 1
3515: PPUSH
3516: LD_VAR 0 10
3520: PUSH
3521: LD_INT 1
3523: ARRAY
3524: PPUSH
3525: LD_VAR 0 10
3529: PUSH
3530: LD_INT 2
3532: ARRAY
3533: PPUSH
3534: CALL_OW 117
// end ; end ;
3538: GO 2779
3540: POP
3541: POP
// end ; sol := UnitFilter ( amForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] ] , [ f_ok ] ] ) union amCommander ;
3542: LD_ADDR_VAR 0 12
3546: PUSH
3547: LD_EXP 27
3551: PPUSH
3552: LD_INT 2
3554: PUSH
3555: LD_INT 25
3557: PUSH
3558: LD_INT 1
3560: PUSH
3561: EMPTY
3562: LIST
3563: LIST
3564: PUSH
3565: LD_INT 25
3567: PUSH
3568: LD_INT 5
3570: PUSH
3571: EMPTY
3572: LIST
3573: LIST
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: LIST
3579: PUSH
3580: LD_INT 50
3582: PUSH
3583: EMPTY
3584: LIST
3585: PUSH
3586: EMPTY
3587: LIST
3588: LIST
3589: PPUSH
3590: CALL_OW 72
3594: PUSH
3595: LD_EXP 33
3599: UNION
3600: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( amBaseArea , [ f_enemy , side ] ) ;
3601: LD_ADDR_VAR 0 14
3605: PUSH
3606: LD_INT 1
3608: PPUSH
3609: LD_INT 81
3611: PUSH
3612: LD_VAR 0 5
3616: PUSH
3617: EMPTY
3618: LIST
3619: LIST
3620: PPUSH
3621: CALL_OW 70
3625: ST_TO_ADDR
// if sol then
3626: LD_VAR 0 12
3630: IFFALSE 4181
// begin if enemyInBase then
3632: LD_VAR 0 14
3636: IFFALSE 3781
// begin for i in sol do
3638: LD_ADDR_VAR 0 1
3642: PUSH
3643: LD_VAR 0 12
3647: PUSH
3648: FOR_IN
3649: IFFALSE 3777
// begin tw := IsInUnit ( i ) ;
3651: LD_ADDR_VAR 0 9
3655: PUSH
3656: LD_VAR 0 1
3660: PPUSH
3661: CALL_OW 310
3665: ST_TO_ADDR
// if tw then
3666: LD_VAR 0 9
3670: IFFALSE 3751
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
3672: LD_VAR 0 9
3676: PUSH
3677: LD_INT 22
3679: PUSH
3680: LD_VAR 0 5
3684: PUSH
3685: EMPTY
3686: LIST
3687: LIST
3688: PUSH
3689: LD_INT 101
3691: PUSH
3692: LD_INT 2
3694: PUSH
3695: EMPTY
3696: LIST
3697: LIST
3698: PUSH
3699: LD_INT 2
3701: PUSH
3702: LD_INT 30
3704: PUSH
3705: LD_INT 32
3707: PUSH
3708: EMPTY
3709: LIST
3710: LIST
3711: PUSH
3712: LD_INT 30
3714: PUSH
3715: LD_INT 31
3717: PUSH
3718: EMPTY
3719: LIST
3720: LIST
3721: PUSH
3722: EMPTY
3723: LIST
3724: LIST
3725: LIST
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: LIST
3731: PPUSH
3732: CALL_OW 69
3736: IN
3737: NOT
3738: IFFALSE 3749
// ComExitBuilding ( i ) ;
3740: LD_VAR 0 1
3744: PPUSH
3745: CALL_OW 122
// end else
3749: GO 3775
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
3751: LD_VAR 0 1
3755: PPUSH
3756: LD_VAR 0 14
3760: PPUSH
3761: LD_VAR 0 1
3765: PPUSH
3766: CALL_OW 74
3770: PPUSH
3771: CALL_OW 115
// end ;
3775: GO 3648
3777: POP
3778: POP
// end else
3779: GO 4181
// begin empty := FilterUnitsInArea ( amBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
3781: LD_ADDR_VAR 0 15
3785: PUSH
3786: LD_INT 1
3788: PPUSH
3789: LD_INT 3
3791: PUSH
3792: LD_INT 62
3794: PUSH
3795: EMPTY
3796: LIST
3797: PUSH
3798: EMPTY
3799: LIST
3800: LIST
3801: PUSH
3802: LD_INT 2
3804: PUSH
3805: LD_INT 30
3807: PUSH
3808: LD_INT 32
3810: PUSH
3811: EMPTY
3812: LIST
3813: LIST
3814: PUSH
3815: LD_INT 30
3817: PUSH
3818: LD_INT 4
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: PUSH
3825: LD_INT 30
3827: PUSH
3828: LD_INT 5
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: PUSH
3835: LD_INT 30
3837: PUSH
3838: LD_INT 31
3840: PUSH
3841: EMPTY
3842: LIST
3843: LIST
3844: PUSH
3845: EMPTY
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: PUSH
3852: EMPTY
3853: LIST
3854: LIST
3855: PPUSH
3856: CALL_OW 70
3860: ST_TO_ADDR
// if empty then
3861: LD_VAR 0 15
3865: IFFALSE 3882
// empty := ReverseArray ( empty ) ;
3867: LD_ADDR_VAR 0 15
3871: PUSH
3872: LD_VAR 0 15
3876: PPUSH
3877: CALL 53645 0 1
3881: ST_TO_ADDR
// for i in sol do
3882: LD_ADDR_VAR 0 1
3886: PUSH
3887: LD_VAR 0 12
3891: PUSH
3892: FOR_IN
3893: IFFALSE 4179
// begin tag := GetTag ( i ) ;
3895: LD_ADDR_VAR 0 8
3899: PUSH
3900: LD_VAR 0 1
3904: PPUSH
3905: CALL_OW 110
3909: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
3910: LD_VAR 0 1
3914: PPUSH
3915: CALL_OW 256
3919: PUSH
3920: LD_INT 1000
3922: LESS
3923: PUSH
3924: LD_VAR 0 8
3928: PUSH
3929: LD_INT 1
3931: NONEQUAL
3932: AND
3933: IFFALSE 3985
// begin SetTag ( i , tHeal ) ;
3935: LD_VAR 0 1
3939: PPUSH
3940: LD_INT 1
3942: PPUSH
3943: CALL_OW 109
// ComMoveXY ( i , amHealPoint [ 1 ] , amHealPoint [ 2 ] ) ;
3947: LD_VAR 0 1
3951: PPUSH
3952: LD_EXP 30
3956: PUSH
3957: LD_INT 1
3959: ARRAY
3960: PPUSH
3961: LD_EXP 30
3965: PUSH
3966: LD_INT 2
3968: ARRAY
3969: PPUSH
3970: CALL_OW 111
// AddComHold ( i ) ;
3974: LD_VAR 0 1
3978: PPUSH
3979: CALL_OW 200
// continue ;
3983: GO 3892
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
3985: LD_VAR 0 1
3989: PPUSH
3990: CALL_OW 256
3994: PUSH
3995: LD_INT 1000
3997: EQUAL
3998: PUSH
3999: LD_VAR 0 8
4003: PUSH
4004: LD_INT 1
4006: EQUAL
4007: AND
4008: IFFALSE 4024
// begin SetTag ( i , 0 ) ;
4010: LD_VAR 0 1
4014: PPUSH
4015: LD_INT 0
4017: PPUSH
4018: CALL_OW 109
// continue ;
4022: GO 3892
// end ; if not IsInArea ( i , amBaseArea ) and not IsInUnit ( i ) then
4024: LD_VAR 0 1
4028: PPUSH
4029: LD_INT 1
4031: PPUSH
4032: CALL_OW 308
4036: NOT
4037: PUSH
4038: LD_VAR 0 1
4042: PPUSH
4043: CALL_OW 310
4047: NOT
4048: AND
4049: IFFALSE 4063
// ComMoveToArea ( i , amBaseArea ) ;
4051: LD_VAR 0 1
4055: PPUSH
4056: LD_INT 1
4058: PPUSH
4059: CALL_OW 113
// if HasTask ( i ) then
4063: LD_VAR 0 1
4067: PPUSH
4068: CALL_OW 314
4072: IFFALSE 4076
// continue ;
4074: GO 3892
// if not IsInUnit ( i ) and not tag and empty then
4076: LD_VAR 0 1
4080: PPUSH
4081: CALL_OW 310
4085: NOT
4086: PUSH
4087: LD_VAR 0 8
4091: NOT
4092: AND
4093: PUSH
4094: LD_VAR 0 15
4098: AND
4099: IFFALSE 4177
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
4101: LD_VAR 0 1
4105: PPUSH
4106: LD_VAR 0 15
4110: PUSH
4111: LD_INT 1
4113: ARRAY
4114: PPUSH
4115: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
4119: LD_VAR 0 15
4123: PUSH
4124: LD_INT 1
4126: ARRAY
4127: PPUSH
4128: CALL_OW 266
4132: PUSH
4133: LD_INT 5
4135: EQUAL
4136: PUSH
4137: LD_INT 50
4139: PPUSH
4140: CALL_OW 13
4144: AND
4145: IFFALSE 4159
// AddComChangeProfession ( i , class_sniper ) ;
4147: LD_VAR 0 1
4151: PPUSH
4152: LD_INT 5
4154: PPUSH
4155: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
4159: LD_ADDR_VAR 0 15
4163: PUSH
4164: LD_VAR 0 15
4168: PPUSH
4169: LD_INT 1
4171: PPUSH
4172: CALL_OW 3
4176: ST_TO_ADDR
// end ; end ;
4177: GO 3892
4179: POP
4180: POP
// end ; end ; end ;
4181: PPOPN 18
4183: END
// every 0 0$2 trigger IsOk ( amCargo ) and amScriptActive do var cr , enemyInArea ;
4184: LD_EXP 34
4188: PPUSH
4189: CALL_OW 302
4193: PUSH
4194: LD_EXP 3
4198: AND
4199: IFFALSE 4481
4201: GO 4203
4203: DISABLE
4204: LD_INT 0
4206: PPUSH
4207: PPUSH
// begin enable ;
4208: ENABLE
// enemyInArea := FilterUnitsInArea ( amBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
4209: LD_ADDR_VAR 0 2
4213: PUSH
4214: LD_INT 1
4216: PPUSH
4217: LD_INT 81
4219: PUSH
4220: LD_INT 1
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: PUSH
4227: LD_INT 50
4229: PUSH
4230: EMPTY
4231: LIST
4232: PUSH
4233: EMPTY
4234: LIST
4235: LIST
4236: PPUSH
4237: CALL_OW 70
4241: ST_TO_ADDR
// cr := GetListOfCratesInArea ( cratesWestArea ) ;
4242: LD_ADDR_VAR 0 1
4246: PUSH
4247: LD_INT 17
4249: PPUSH
4250: CALL_OW 435
4254: ST_TO_ADDR
// if GetFuel ( amCargo ) < 10 and not See ( 2 , amCargo ) and GetEngine ( amCargo ) = engine_combustion then
4255: LD_EXP 34
4259: PPUSH
4260: CALL_OW 261
4264: PUSH
4265: LD_INT 10
4267: LESS
4268: PUSH
4269: LD_INT 2
4271: PPUSH
4272: LD_EXP 34
4276: PPUSH
4277: CALL_OW 292
4281: NOT
4282: AND
4283: PUSH
4284: LD_EXP 34
4288: PPUSH
4289: CALL_OW 262
4293: PUSH
4294: LD_INT 1
4296: EQUAL
4297: AND
4298: IFFALSE 4312
// SetFuel ( amCargo , 100 ) ;
4300: LD_EXP 34
4304: PPUSH
4305: LD_INT 100
4307: PPUSH
4308: CALL_OW 240
// if not HasTask ( amCargo ) and GetCargo ( amCargo , mat_cans ) < 100 and not enemyInArea then
4312: LD_EXP 34
4316: PPUSH
4317: CALL_OW 314
4321: NOT
4322: PUSH
4323: LD_EXP 34
4327: PPUSH
4328: LD_INT 1
4330: PPUSH
4331: CALL_OW 289
4335: PUSH
4336: LD_INT 100
4338: LESS
4339: AND
4340: PUSH
4341: LD_VAR 0 2
4345: NOT
4346: AND
4347: IFFALSE 4413
// begin if cr then
4349: LD_VAR 0 1
4353: IFFALSE 4384
// ComCollect ( amCargo , cr [ 1 ] , cr [ 2 ] ) else
4355: LD_EXP 34
4359: PPUSH
4360: LD_VAR 0 1
4364: PUSH
4365: LD_INT 1
4367: ARRAY
4368: PPUSH
4369: LD_VAR 0 1
4373: PUSH
4374: LD_INT 2
4376: ARRAY
4377: PPUSH
4378: CALL_OW 117
4382: GO 4411
// if not IsInArea ( amCargo , cratesWestArea ) then
4384: LD_EXP 34
4388: PPUSH
4389: LD_INT 17
4391: PPUSH
4392: CALL_OW 308
4396: NOT
4397: IFFALSE 4411
// ComMoveToArea ( amCargo , cratesWestArea ) ;
4399: LD_EXP 34
4403: PPUSH
4404: LD_INT 17
4406: PPUSH
4407: CALL_OW 113
// exit ;
4411: GO 4481
// end ; if enemyInArea and not IsInArea ( amCargo , amBaseArea ) then
4413: LD_VAR 0 2
4417: PUSH
4418: LD_EXP 34
4422: PPUSH
4423: LD_INT 1
4425: PPUSH
4426: CALL_OW 308
4430: NOT
4431: AND
4432: IFFALSE 4451
// ComMoveXY ( amCargo , 93 , 137 ) else
4434: LD_EXP 34
4438: PPUSH
4439: LD_INT 93
4441: PPUSH
4442: LD_INT 137
4444: PPUSH
4445: CALL_OW 111
4449: GO 4481
// if GetCargo ( amCargo , mat_cans ) = 100 then
4451: LD_EXP 34
4455: PPUSH
4456: LD_INT 1
4458: PPUSH
4459: CALL_OW 289
4463: PUSH
4464: LD_INT 100
4466: EQUAL
4467: IFFALSE 4481
// ComGive ( amCargo , amBase ) ;
4469: LD_EXP 34
4473: PPUSH
4474: LD_INT 2
4476: PPUSH
4477: CALL_OW 161
// end ;
4481: PPOPN 2
4483: END
// every 0 0$2 trigger amScriptActive and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) do var i , tmp , tmp2 ;
4484: LD_EXP 3
4488: PUSH
4489: LD_INT 22
4491: PUSH
4492: LD_INT 1
4494: PUSH
4495: EMPTY
4496: LIST
4497: LIST
4498: PUSH
4499: LD_INT 3
4501: PUSH
4502: LD_INT 60
4504: PUSH
4505: EMPTY
4506: LIST
4507: PUSH
4508: EMPTY
4509: LIST
4510: LIST
4511: PUSH
4512: LD_INT 50
4514: PUSH
4515: EMPTY
4516: LIST
4517: PUSH
4518: LD_INT 34
4520: PUSH
4521: LD_INT 13
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: LIST
4532: LIST
4533: PPUSH
4534: CALL_OW 69
4538: AND
4539: PUSH
4540: LD_INT 22
4542: PUSH
4543: LD_INT 1
4545: PUSH
4546: EMPTY
4547: LIST
4548: LIST
4549: PUSH
4550: LD_INT 3
4552: PUSH
4553: LD_INT 24
4555: PUSH
4556: LD_INT 1000
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: PUSH
4567: LD_INT 21
4569: PUSH
4570: LD_INT 3
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: LIST
4581: PPUSH
4582: CALL_OW 69
4586: AND
4587: IFFALSE 4820
4589: GO 4591
4591: DISABLE
4592: LD_INT 0
4594: PPUSH
4595: PPUSH
4596: PPUSH
// begin enable ;
4597: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
4598: LD_ADDR_VAR 0 2
4602: PUSH
4603: LD_INT 22
4605: PUSH
4606: LD_INT 1
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: PUSH
4613: LD_INT 3
4615: PUSH
4616: LD_INT 24
4618: PUSH
4619: LD_INT 1000
4621: PUSH
4622: EMPTY
4623: LIST
4624: LIST
4625: PUSH
4626: EMPTY
4627: LIST
4628: LIST
4629: PUSH
4630: LD_INT 21
4632: PUSH
4633: LD_INT 3
4635: PUSH
4636: EMPTY
4637: LIST
4638: LIST
4639: PUSH
4640: EMPTY
4641: LIST
4642: LIST
4643: LIST
4644: PPUSH
4645: CALL_OW 69
4649: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 600 ] ] , [ f_type , unit_building ] ] ) ;
4650: LD_ADDR_VAR 0 3
4654: PUSH
4655: LD_INT 22
4657: PUSH
4658: LD_INT 1
4660: PUSH
4661: EMPTY
4662: LIST
4663: LIST
4664: PUSH
4665: LD_INT 3
4667: PUSH
4668: LD_INT 24
4670: PUSH
4671: LD_INT 600
4673: PUSH
4674: EMPTY
4675: LIST
4676: LIST
4677: PUSH
4678: EMPTY
4679: LIST
4680: LIST
4681: PUSH
4682: LD_INT 21
4684: PUSH
4685: LD_INT 3
4687: PUSH
4688: EMPTY
4689: LIST
4690: LIST
4691: PUSH
4692: EMPTY
4693: LIST
4694: LIST
4695: LIST
4696: PPUSH
4697: CALL_OW 69
4701: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
4702: LD_ADDR_VAR 0 1
4706: PUSH
4707: LD_INT 22
4709: PUSH
4710: LD_INT 1
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: PUSH
4717: LD_INT 3
4719: PUSH
4720: LD_INT 60
4722: PUSH
4723: EMPTY
4724: LIST
4725: PUSH
4726: EMPTY
4727: LIST
4728: LIST
4729: PUSH
4730: LD_INT 50
4732: PUSH
4733: EMPTY
4734: LIST
4735: PUSH
4736: LD_INT 34
4738: PUSH
4739: LD_INT 13
4741: PUSH
4742: EMPTY
4743: LIST
4744: LIST
4745: PUSH
4746: EMPTY
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: PPUSH
4752: CALL_OW 69
4756: PUSH
4757: FOR_IN
4758: IFFALSE 4818
// begin if tmp2 then
4760: LD_VAR 0 3
4764: IFFALSE 4792
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp2 , i ) ) else
4766: LD_VAR 0 1
4770: PPUSH
4771: LD_VAR 0 3
4775: PPUSH
4776: LD_VAR 0 1
4780: PPUSH
4781: CALL_OW 74
4785: PPUSH
4786: CALL_OW 130
4790: GO 4816
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
4792: LD_VAR 0 1
4796: PPUSH
4797: LD_VAR 0 2
4801: PPUSH
4802: LD_VAR 0 1
4806: PPUSH
4807: CALL_OW 74
4811: PPUSH
4812: CALL_OW 130
// end ;
4816: GO 4757
4818: POP
4819: POP
// end ;
4820: PPOPN 3
4822: END
// every 0 0$2 trigger amPatrol and gameActive and not americanDestroyed do var i , j , points , x , y , tag , enemy ;
4823: LD_EXP 35
4827: PUSH
4828: LD_EXP 19
4832: AND
4833: PUSH
4834: LD_EXP 11
4838: NOT
4839: AND
4840: IFFALSE 5165
4842: GO 4844
4844: DISABLE
4845: LD_INT 0
4847: PPUSH
4848: PPUSH
4849: PPUSH
4850: PPUSH
4851: PPUSH
4852: PPUSH
4853: PPUSH
// begin enable ;
4854: ENABLE
// points := [ [ patrol1aArea , patrol1bArea ] , [ patrol2aArea , patrol2bArea , patrol2cArea , patrol2dArea , patrol2bArea ] , [ patrol3aArea , patrol3bArea , patrol3cArea , patrol3dArea , patrol3eArea , patrol3fArea , patrol3gArea , patrol3hArea ] ] ;
4855: LD_ADDR_VAR 0 3
4859: PUSH
4860: LD_INT 30
4862: PUSH
4863: LD_INT 31
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: PUSH
4870: LD_INT 32
4872: PUSH
4873: LD_INT 33
4875: PUSH
4876: LD_INT 34
4878: PUSH
4879: LD_INT 35
4881: PUSH
4882: LD_INT 33
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: PUSH
4892: LD_INT 36
4894: PUSH
4895: LD_INT 37
4897: PUSH
4898: LD_INT 38
4900: PUSH
4901: LD_INT 39
4903: PUSH
4904: LD_INT 40
4906: PUSH
4907: LD_INT 41
4909: PUSH
4910: LD_INT 42
4912: PUSH
4913: LD_INT 43
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: PUSH
4926: EMPTY
4927: LIST
4928: LIST
4929: LIST
4930: ST_TO_ADDR
// for i in amPatrol do
4931: LD_ADDR_VAR 0 1
4935: PUSH
4936: LD_EXP 35
4940: PUSH
4941: FOR_IN
4942: IFFALSE 5163
// begin if See ( 2 , i ) then
4944: LD_INT 2
4946: PPUSH
4947: LD_VAR 0 1
4951: PPUSH
4952: CALL_OW 292
4956: IFFALSE 5059
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ;
4958: LD_ADDR_VAR 0 7
4962: PUSH
4963: LD_INT 22
4965: PUSH
4966: LD_INT 2
4968: PUSH
4969: EMPTY
4970: LIST
4971: LIST
4972: PPUSH
4973: CALL_OW 69
4977: PPUSH
4978: LD_VAR 0 1
4982: PPUSH
4983: CALL_OW 74
4987: ST_TO_ADDR
// if enemy then
4988: LD_VAR 0 7
4992: IFFALSE 5059
// begin x := GetX ( enemy ) ;
4994: LD_ADDR_VAR 0 4
4998: PUSH
4999: LD_VAR 0 7
5003: PPUSH
5004: CALL_OW 250
5008: ST_TO_ADDR
// y := GetY ( enemy ) ;
5009: LD_ADDR_VAR 0 5
5013: PUSH
5014: LD_VAR 0 7
5018: PPUSH
5019: CALL_OW 251
5023: ST_TO_ADDR
// if ValidHex ( x , y ) then
5024: LD_VAR 0 4
5028: PPUSH
5029: LD_VAR 0 5
5033: PPUSH
5034: CALL_OW 488
5038: IFFALSE 5059
// ComAgressiveMove ( i , x , y ) ;
5040: LD_VAR 0 1
5044: PPUSH
5045: LD_VAR 0 4
5049: PPUSH
5050: LD_VAR 0 5
5054: PPUSH
5055: CALL_OW 114
// end ; end ; if HasTask ( i ) then
5059: LD_VAR 0 1
5063: PPUSH
5064: CALL_OW 314
5068: IFFALSE 5072
// continue ;
5070: GO 4941
// tag := GetTag ( i ) ;
5072: LD_ADDR_VAR 0 6
5076: PUSH
5077: LD_VAR 0 1
5081: PPUSH
5082: CALL_OW 110
5086: ST_TO_ADDR
// for j := 1 to points [ tag ] do
5087: LD_ADDR_VAR 0 2
5091: PUSH
5092: DOUBLE
5093: LD_INT 1
5095: DEC
5096: ST_TO_ADDR
5097: LD_VAR 0 3
5101: PUSH
5102: LD_VAR 0 6
5106: ARRAY
5107: PUSH
5108: FOR_TO
5109: IFFALSE 5159
// begin AddComMoveToArea ( i , points [ tag ] [ j ] ) ;
5111: LD_VAR 0 1
5115: PPUSH
5116: LD_VAR 0 3
5120: PUSH
5121: LD_VAR 0 6
5125: ARRAY
5126: PUSH
5127: LD_VAR 0 2
5131: ARRAY
5132: PPUSH
5133: CALL_OW 173
// AddComWait ( i , rand ( 0 0$5 , 0 0$11 ) ) ;
5137: LD_VAR 0 1
5141: PPUSH
5142: LD_INT 175
5144: PPUSH
5145: LD_INT 385
5147: PPUSH
5148: CALL_OW 12
5152: PPUSH
5153: CALL_OW 202
// end ;
5157: GO 5108
5159: POP
5160: POP
// end ;
5161: GO 4941
5163: POP
5164: POP
// end ;
5165: PPOPN 7
5167: END
// every 10 10$00 trigger Count ( amTanks ) < 5 and amScriptActive and spotByAmerican and spotArabianBase do var i , parts , part ;
5168: LD_EXP 32
5172: PPUSH
5173: CALL 22769 0 1
5177: PUSH
5178: LD_INT 5
5180: LESS
5181: PUSH
5182: LD_EXP 3
5186: AND
5187: PUSH
5188: LD_EXP 8
5192: AND
5193: PUSH
5194: LD_EXP 7
5198: AND
5199: IFFALSE 5459
5201: GO 5203
5203: DISABLE
5204: LD_INT 0
5206: PPUSH
5207: PPUSH
5208: PPUSH
// begin enable ;
5209: ENABLE
// parts := [ [ us_medium_tracked , us_laser ] , [ us_heavy_tracked , us_laser ] , [ us_heavy_tracked , us_heavy_gun ] , [ us_medium_tracked , us_double_gun ] , [ us_medium_wheeled , us_gatling_gun ] , [ us_light_wheeled , us_machine_gun ] ] ;
5210: LD_ADDR_VAR 0 2
5214: PUSH
5215: LD_INT 3
5217: PUSH
5218: LD_INT 9
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: PUSH
5225: LD_INT 4
5227: PUSH
5228: LD_INT 9
5230: PUSH
5231: EMPTY
5232: LIST
5233: LIST
5234: PUSH
5235: LD_INT 4
5237: PUSH
5238: LD_INT 6
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: PUSH
5245: LD_INT 3
5247: PUSH
5248: LD_INT 5
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: PUSH
5255: LD_INT 2
5257: PUSH
5258: LD_INT 4
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PUSH
5265: LD_INT 1
5267: PUSH
5268: LD_INT 2
5270: PUSH
5271: EMPTY
5272: LIST
5273: LIST
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: LIST
5282: ST_TO_ADDR
// if americanWave > [ 5 , 6 , 7 , 8 ] [ Difficulty ] then
5283: LD_EXP 22
5287: PUSH
5288: LD_INT 5
5290: PUSH
5291: LD_INT 6
5293: PUSH
5294: LD_INT 7
5296: PUSH
5297: LD_INT 8
5299: PUSH
5300: EMPTY
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: PUSH
5306: LD_OWVAR 67
5310: ARRAY
5311: GREATER
5312: IFFALSE 5343
// americanWave := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
5314: LD_ADDR_EXP 22
5318: PUSH
5319: LD_INT 5
5321: PUSH
5322: LD_INT 6
5324: PUSH
5325: LD_INT 7
5327: PUSH
5328: LD_INT 8
5330: PUSH
5331: EMPTY
5332: LIST
5333: LIST
5334: LIST
5335: LIST
5336: PUSH
5337: LD_OWVAR 67
5341: ARRAY
5342: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] + americanWave do
5343: LD_ADDR_VAR 0 1
5347: PUSH
5348: DOUBLE
5349: LD_INT 1
5351: DEC
5352: ST_TO_ADDR
5353: LD_INT 3
5355: PUSH
5356: LD_INT 4
5358: PUSH
5359: LD_INT 5
5361: PUSH
5362: LD_INT 6
5364: PUSH
5365: EMPTY
5366: LIST
5367: LIST
5368: LIST
5369: LIST
5370: PUSH
5371: LD_OWVAR 67
5375: ARRAY
5376: PUSH
5377: LD_EXP 22
5381: PLUS
5382: PUSH
5383: FOR_TO
5384: IFFALSE 5457
// begin part := parts [ rand ( 1 , parts ) ] ;
5386: LD_ADDR_VAR 0 3
5390: PUSH
5391: LD_VAR 0 2
5395: PUSH
5396: LD_INT 1
5398: PPUSH
5399: LD_VAR 0 2
5403: PPUSH
5404: CALL_OW 12
5408: ARRAY
5409: ST_TO_ADDR
// amConstructList := Join ( amConstructList , [ part [ 1 ] , engine_combustion , control_remote , part [ 2 ] ] ) end ;
5410: LD_ADDR_EXP 29
5414: PUSH
5415: LD_EXP 29
5419: PPUSH
5420: LD_VAR 0 3
5424: PUSH
5425: LD_INT 1
5427: ARRAY
5428: PUSH
5429: LD_INT 1
5431: PUSH
5432: LD_INT 2
5434: PUSH
5435: LD_VAR 0 3
5439: PUSH
5440: LD_INT 2
5442: ARRAY
5443: PUSH
5444: EMPTY
5445: LIST
5446: LIST
5447: LIST
5448: LIST
5449: PPUSH
5450: CALL 58358 0 2
5454: ST_TO_ADDR
5455: GO 5383
5457: POP
5458: POP
// end ;
5459: PPOPN 3
5461: END
// every 3 3$00 trigger not americanDestroyed and Count ( amTanks ) and spotByAmerican and spotArabianBase do var i , tmp , tmp2 ;
5462: LD_EXP 11
5466: NOT
5467: PUSH
5468: LD_EXP 32
5472: PPUSH
5473: CALL 22769 0 1
5477: AND
5478: PUSH
5479: LD_EXP 8
5483: AND
5484: PUSH
5485: LD_EXP 7
5489: AND
5490: IFFALSE 5839
5492: GO 5494
5494: DISABLE
5495: LD_INT 0
5497: PPUSH
5498: PPUSH
5499: PPUSH
// begin enable ;
5500: ENABLE
// tmp := UnitFilter ( amTanks , [ [ f_linked ] , [ f_ok ] ] ) ;
5501: LD_ADDR_VAR 0 2
5505: PUSH
5506: LD_EXP 32
5510: PPUSH
5511: LD_INT 61
5513: PUSH
5514: EMPTY
5515: LIST
5516: PUSH
5517: LD_INT 50
5519: PUSH
5520: EMPTY
5521: LIST
5522: PUSH
5523: EMPTY
5524: LIST
5525: LIST
5526: PPUSH
5527: CALL_OW 72
5531: ST_TO_ADDR
// amTanks := amTanks diff tmp ;
5532: LD_ADDR_EXP 32
5536: PUSH
5537: LD_EXP 32
5541: PUSH
5542: LD_VAR 0 2
5546: DIFF
5547: ST_TO_ADDR
// if not tmp then
5548: LD_VAR 0 2
5552: NOT
5553: IFFALSE 5557
// exit ;
5555: GO 5839
// tmp2 := UnitFilter ( tmp , [ f_weapon , us_machine_gun ] ) ;
5557: LD_ADDR_VAR 0 3
5561: PUSH
5562: LD_VAR 0 2
5566: PPUSH
5567: LD_INT 34
5569: PUSH
5570: LD_INT 2
5572: PUSH
5573: EMPTY
5574: LIST
5575: LIST
5576: PPUSH
5577: CALL_OW 72
5581: ST_TO_ADDR
// if tmp2 then
5582: LD_VAR 0 3
5586: IFFALSE 5604
// tmp := tmp diff tmp2 ;
5588: LD_ADDR_VAR 0 2
5592: PUSH
5593: LD_VAR 0 2
5597: PUSH
5598: LD_VAR 0 3
5602: DIFF
5603: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5604: LD_INT 35
5606: PPUSH
5607: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
5611: LD_ADDR_VAR 0 2
5615: PUSH
5616: LD_VAR 0 2
5620: PPUSH
5621: LD_INT 50
5623: PUSH
5624: EMPTY
5625: LIST
5626: PPUSH
5627: CALL_OW 72
5631: ST_TO_ADDR
// for i in tmp do
5632: LD_ADDR_VAR 0 1
5636: PUSH
5637: LD_VAR 0 2
5641: PUSH
5642: FOR_IN
5643: IFFALSE 5691
// AgressiveMove ( i , [ [ 187 , 114 ] , [ 203 , 113 ] , [ 218 , 108 ] ] ) ;
5645: LD_VAR 0 1
5649: PPUSH
5650: LD_INT 187
5652: PUSH
5653: LD_INT 114
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: PUSH
5660: LD_INT 203
5662: PUSH
5663: LD_INT 113
5665: PUSH
5666: EMPTY
5667: LIST
5668: LIST
5669: PUSH
5670: LD_INT 218
5672: PUSH
5673: LD_INT 108
5675: PUSH
5676: EMPTY
5677: LIST
5678: LIST
5679: PUSH
5680: EMPTY
5681: LIST
5682: LIST
5683: LIST
5684: PPUSH
5685: CALL 60962 0 2
5689: GO 5642
5691: POP
5692: POP
// tmp2 := UnitFilter ( tmp2 , [ f_ok ] ) ;
5693: LD_ADDR_VAR 0 3
5697: PUSH
5698: LD_VAR 0 3
5702: PPUSH
5703: LD_INT 50
5705: PUSH
5706: EMPTY
5707: LIST
5708: PPUSH
5709: CALL_OW 72
5713: ST_TO_ADDR
// for i in tmp2 do
5714: LD_ADDR_VAR 0 1
5718: PUSH
5719: LD_VAR 0 3
5723: PUSH
5724: FOR_IN
5725: IFFALSE 5815
// if GetDistUnitXY ( i , 242 , 105 ) > 12 then
5727: LD_VAR 0 1
5731: PPUSH
5732: LD_INT 242
5734: PPUSH
5735: LD_INT 105
5737: PPUSH
5738: CALL_OW 297
5742: PUSH
5743: LD_INT 12
5745: GREATER
5746: IFFALSE 5765
// ComMoveXY ( i , 242 , 105 ) else
5748: LD_VAR 0 1
5752: PPUSH
5753: LD_INT 242
5755: PPUSH
5756: LD_INT 105
5758: PPUSH
5759: CALL_OW 111
5763: GO 5813
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_type , unit_human ] ] ) , i ) ) ;
5765: LD_VAR 0 1
5769: PPUSH
5770: LD_INT 81
5772: PUSH
5773: LD_INT 1
5775: PUSH
5776: EMPTY
5777: LIST
5778: LIST
5779: PUSH
5780: LD_INT 21
5782: PUSH
5783: LD_INT 1
5785: PUSH
5786: EMPTY
5787: LIST
5788: LIST
5789: PUSH
5790: EMPTY
5791: LIST
5792: LIST
5793: PPUSH
5794: CALL_OW 69
5798: PPUSH
5799: LD_VAR 0 1
5803: PPUSH
5804: CALL_OW 74
5808: PPUSH
5809: CALL_OW 115
5813: GO 5724
5815: POP
5816: POP
// until not tmp ;
5817: LD_VAR 0 2
5821: NOT
5822: IFFALSE 5604
// americanWave := Inc ( americanWave ) ;
5824: LD_ADDR_EXP 22
5828: PUSH
5829: LD_EXP 22
5833: PPUSH
5834: CALL 59719 0 1
5838: ST_TO_ADDR
// end ; end_of_file
5839: PPOPN 3
5841: END
// export Farmer ; export legForces , legEForces , legTech , legConstructList , legHealPoint , legBuildings , legTanks , legRTanks , legCargo ; export function PrepareLegion ; var i , j , b , un , skill , sources ; begin
5842: LD_INT 0
5844: PPUSH
5845: PPUSH
5846: PPUSH
5847: PPUSH
5848: PPUSH
5849: PPUSH
5850: PPUSH
// uc_side := 8 ;
5851: LD_ADDR_OWVAR 20
5855: PUSH
5856: LD_INT 8
5858: ST_TO_ADDR
// uc_nation := nation_arabian ;
5859: LD_ADDR_OWVAR 21
5863: PUSH
5864: LD_INT 2
5866: ST_TO_ADDR
// legForces := [ ] ;
5867: LD_ADDR_EXP 37
5871: PUSH
5872: EMPTY
5873: ST_TO_ADDR
// legEForces := [ ] ;
5874: LD_ADDR_EXP 38
5878: PUSH
5879: EMPTY
5880: ST_TO_ADDR
// legTech := GetTechNation ( 8 , nation_arabian , state_enabled ) ;
5881: LD_ADDR_EXP 39
5885: PUSH
5886: LD_INT 8
5888: PPUSH
5889: LD_INT 2
5891: PPUSH
5892: LD_INT 1
5894: PPUSH
5895: CALL 20730 0 3
5899: ST_TO_ADDR
// legConstructList := [ [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ] ;
5900: LD_ADDR_EXP 40
5904: PUSH
5905: LD_INT 13
5907: PUSH
5908: LD_INT 1
5910: PUSH
5911: LD_INT 2
5913: PUSH
5914: LD_INT 32
5916: PUSH
5917: EMPTY
5918: LIST
5919: LIST
5920: LIST
5921: LIST
5922: PUSH
5923: EMPTY
5924: LIST
5925: ST_TO_ADDR
// legHealPoint := [ 195 , 15 ] ;
5926: LD_ADDR_EXP 41
5930: PUSH
5931: LD_INT 195
5933: PUSH
5934: LD_INT 15
5936: PUSH
5937: EMPTY
5938: LIST
5939: LIST
5940: ST_TO_ADDR
// legBuildings := [ ] ;
5941: LD_ADDR_EXP 42
5945: PUSH
5946: EMPTY
5947: ST_TO_ADDR
// legTanks := [ ] ;
5948: LD_ADDR_EXP 43
5952: PUSH
5953: EMPTY
5954: ST_TO_ADDR
// legRTanks := [ ] ;
5955: LD_ADDR_EXP 44
5959: PUSH
5960: EMPTY
5961: ST_TO_ADDR
// legCargo := 0 ;
5962: LD_ADDR_EXP 45
5966: PUSH
5967: LD_INT 0
5969: ST_TO_ADDR
// sources := [ [ 219 , 31 ] , [ 166 , 31 ] ] ;
5970: LD_ADDR_VAR 0 7
5974: PUSH
5975: LD_INT 219
5977: PUSH
5978: LD_INT 31
5980: PUSH
5981: EMPTY
5982: LIST
5983: LIST
5984: PUSH
5985: LD_INT 166
5987: PUSH
5988: LD_INT 31
5990: PUSH
5991: EMPTY
5992: LIST
5993: LIST
5994: PUSH
5995: EMPTY
5996: LIST
5997: LIST
5998: ST_TO_ADDR
// for i in sources do
5999: LD_ADDR_VAR 0 2
6003: PUSH
6004: LD_VAR 0 7
6008: PUSH
6009: FOR_IN
6010: IFFALSE 6039
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 8 ) ;
6012: LD_VAR 0 2
6016: PUSH
6017: LD_INT 1
6019: ARRAY
6020: PPUSH
6021: LD_VAR 0 2
6025: PUSH
6026: LD_INT 2
6028: ARRAY
6029: PPUSH
6030: LD_INT 8
6032: PPUSH
6033: CALL_OW 441
6037: GO 6009
6039: POP
6040: POP
// SetResourceType ( GetBase ( legBase ) , mat_cans , 650 ) ;
6041: LD_INT 38
6043: PPUSH
6044: CALL_OW 274
6048: PPUSH
6049: LD_INT 1
6051: PPUSH
6052: LD_INT 650
6054: PPUSH
6055: CALL_OW 277
// SetResourceType ( GetBase ( legBase ) , mat_oil , 120 ) ;
6059: LD_INT 38
6061: PPUSH
6062: CALL_OW 274
6066: PPUSH
6067: LD_INT 2
6069: PPUSH
6070: LD_INT 120
6072: PPUSH
6073: CALL_OW 277
// SetResourceType ( GetBase ( legBase ) , mat_siberit , 50 ) ;
6077: LD_INT 38
6079: PPUSH
6080: CALL_OW 274
6084: PPUSH
6085: LD_INT 3
6087: PPUSH
6088: LD_INT 50
6090: PPUSH
6091: CALL_OW 277
// skill := [ 6 , 7 , 8 , 9 ] [ Difficulty ] ;
6095: LD_ADDR_VAR 0 6
6099: PUSH
6100: LD_INT 6
6102: PUSH
6103: LD_INT 7
6105: PUSH
6106: LD_INT 8
6108: PUSH
6109: LD_INT 9
6111: PUSH
6112: EMPTY
6113: LIST
6114: LIST
6115: LIST
6116: LIST
6117: PUSH
6118: LD_OWVAR 67
6122: ARRAY
6123: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
6124: LD_ADDR_EXP 36
6128: PUSH
6129: LD_STRING Farmer
6131: PPUSH
6132: LD_INT 0
6134: PPUSH
6135: LD_STRING 
6137: PPUSH
6138: CALL 20667 0 3
6142: ST_TO_ADDR
// for i := 1 to 4 do
6143: LD_ADDR_VAR 0 2
6147: PUSH
6148: DOUBLE
6149: LD_INT 1
6151: DEC
6152: ST_TO_ADDR
6153: LD_INT 4
6155: PUSH
6156: FOR_TO
6157: IFFALSE 6674
// for j := 1 to [ [ 7 , 8 , 9 , 11 ] [ Difficulty ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] , 3 , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
6159: LD_ADDR_VAR 0 3
6163: PUSH
6164: DOUBLE
6165: LD_INT 1
6167: DEC
6168: ST_TO_ADDR
6169: LD_INT 7
6171: PUSH
6172: LD_INT 8
6174: PUSH
6175: LD_INT 9
6177: PUSH
6178: LD_INT 11
6180: PUSH
6181: EMPTY
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: PUSH
6187: LD_OWVAR 67
6191: ARRAY
6192: PUSH
6193: LD_INT 3
6195: PUSH
6196: LD_INT 4
6198: PUSH
6199: LD_INT 5
6201: PUSH
6202: LD_INT 5
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: PUSH
6211: LD_OWVAR 67
6215: ARRAY
6216: PUSH
6217: LD_INT 3
6219: PUSH
6220: LD_INT 2
6222: PUSH
6223: LD_INT 3
6225: PUSH
6226: LD_INT 3
6228: PUSH
6229: LD_INT 3
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: PUSH
6238: LD_OWVAR 67
6242: ARRAY
6243: PUSH
6244: EMPTY
6245: LIST
6246: LIST
6247: LIST
6248: LIST
6249: PUSH
6250: LD_VAR 0 2
6254: ARRAY
6255: PUSH
6256: FOR_TO
6257: IFFALSE 6670
// begin PrepareHuman ( false , i , skill ) ;
6259: LD_INT 0
6261: PPUSH
6262: LD_VAR 0 2
6266: PPUSH
6267: LD_VAR 0 6
6271: PPUSH
6272: CALL_OW 380
// un := CreateHuman ;
6276: LD_ADDR_VAR 0 5
6280: PUSH
6281: CALL_OW 44
6285: ST_TO_ADDR
// legForces := Join ( legForces , un ) ;
6286: LD_ADDR_EXP 37
6290: PUSH
6291: LD_EXP 37
6295: PPUSH
6296: LD_VAR 0 5
6300: PPUSH
6301: CALL 58358 0 2
6305: ST_TO_ADDR
// case i of 1 :
6306: LD_VAR 0 2
6310: PUSH
6311: LD_INT 1
6313: DOUBLE
6314: EQUAL
6315: IFTRUE 6319
6317: GO 6388
6319: POP
// b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] ] ) ; 2 :
6320: LD_ADDR_VAR 0 4
6324: PUSH
6325: LD_INT 22
6327: PUSH
6328: LD_INT 8
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: PUSH
6335: LD_INT 2
6337: PUSH
6338: LD_INT 30
6340: PUSH
6341: LD_INT 32
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: PUSH
6348: LD_INT 30
6350: PUSH
6351: LD_INT 5
6353: PUSH
6354: EMPTY
6355: LIST
6356: LIST
6357: PUSH
6358: EMPTY
6359: LIST
6360: LIST
6361: LIST
6362: PUSH
6363: LD_INT 3
6365: PUSH
6366: LD_INT 62
6368: PUSH
6369: EMPTY
6370: LIST
6371: PUSH
6372: EMPTY
6373: LIST
6374: LIST
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: LIST
6380: PPUSH
6381: CALL_OW 69
6385: ST_TO_ADDR
6386: GO 6567
6388: LD_INT 2
6390: DOUBLE
6391: EQUAL
6392: IFTRUE 6396
6394: GO 6425
6396: POP
// b := UnitFilter ( legBase , [ f_not , [ f_full ] ] ) ; 3 :
6397: LD_ADDR_VAR 0 4
6401: PUSH
6402: LD_INT 38
6404: PPUSH
6405: LD_INT 3
6407: PUSH
6408: LD_INT 62
6410: PUSH
6411: EMPTY
6412: LIST
6413: PUSH
6414: EMPTY
6415: LIST
6416: LIST
6417: PPUSH
6418: CALL_OW 72
6422: ST_TO_ADDR
6423: GO 6567
6425: LD_INT 3
6427: DOUBLE
6428: EQUAL
6429: IFTRUE 6433
6431: GO 6507
6433: POP
// b := ReverseArray ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_control_tower ] ] , [ f_not , [ f_full ] ] ] ) ) ; 4 :
6434: LD_ADDR_VAR 0 4
6438: PUSH
6439: LD_INT 22
6441: PUSH
6442: LD_INT 8
6444: PUSH
6445: EMPTY
6446: LIST
6447: LIST
6448: PUSH
6449: LD_INT 2
6451: PUSH
6452: LD_INT 30
6454: PUSH
6455: LD_INT 3
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: PUSH
6462: LD_INT 30
6464: PUSH
6465: LD_INT 36
6467: PUSH
6468: EMPTY
6469: LIST
6470: LIST
6471: PUSH
6472: EMPTY
6473: LIST
6474: LIST
6475: LIST
6476: PUSH
6477: LD_INT 3
6479: PUSH
6480: LD_INT 62
6482: PUSH
6483: EMPTY
6484: LIST
6485: PUSH
6486: EMPTY
6487: LIST
6488: LIST
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: LIST
6494: PPUSH
6495: CALL_OW 69
6499: PPUSH
6500: CALL 53645 0 1
6504: ST_TO_ADDR
6505: GO 6567
6507: LD_INT 4
6509: DOUBLE
6510: EQUAL
6511: IFTRUE 6515
6513: GO 6566
6515: POP
// b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_lab_full ] , [ f_not , [ f_full ] ] ] ) ; end ;
6516: LD_ADDR_VAR 0 4
6520: PUSH
6521: LD_INT 22
6523: PUSH
6524: LD_INT 8
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: PUSH
6531: LD_INT 30
6533: PUSH
6534: LD_INT 8
6536: PUSH
6537: EMPTY
6538: LIST
6539: LIST
6540: PUSH
6541: LD_INT 3
6543: PUSH
6544: LD_INT 62
6546: PUSH
6547: EMPTY
6548: LIST
6549: PUSH
6550: EMPTY
6551: LIST
6552: LIST
6553: PUSH
6554: EMPTY
6555: LIST
6556: LIST
6557: LIST
6558: PPUSH
6559: CALL_OW 69
6563: ST_TO_ADDR
6564: GO 6567
6566: POP
// if b then
6567: LD_VAR 0 4
6571: IFFALSE 6647
// begin if GetBType ( b [ 1 ] ) = b_barracks then
6573: LD_VAR 0 4
6577: PUSH
6578: LD_INT 1
6580: ARRAY
6581: PPUSH
6582: CALL_OW 266
6586: PUSH
6587: LD_INT 5
6589: EQUAL
6590: IFFALSE 6627
// if Prob ( 50 ) then
6592: LD_INT 50
6594: PPUSH
6595: CALL_OW 13
6599: IFFALSE 6615
// SetClass ( un , class_mortar ) else
6601: LD_VAR 0 5
6605: PPUSH
6606: LD_INT 8
6608: PPUSH
6609: CALL_OW 336
6613: GO 6627
// SetClass ( un , class_sniper ) ;
6615: LD_VAR 0 5
6619: PPUSH
6620: LD_INT 5
6622: PPUSH
6623: CALL_OW 336
// PlaceHumanInUnit ( un , b [ 1 ] ) ;
6627: LD_VAR 0 5
6631: PPUSH
6632: LD_VAR 0 4
6636: PUSH
6637: LD_INT 1
6639: ARRAY
6640: PPUSH
6641: CALL_OW 52
// end else
6645: GO 6668
// PlaceUnitXYR ( un , 188 , 21 , 4 , false ) ;
6647: LD_VAR 0 5
6651: PPUSH
6652: LD_INT 188
6654: PPUSH
6655: LD_INT 21
6657: PPUSH
6658: LD_INT 4
6660: PPUSH
6661: LD_INT 0
6663: PPUSH
6664: CALL_OW 50
// end ;
6668: GO 6256
6670: POP
6671: POP
6672: GO 6156
6674: POP
6675: POP
// b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] ] ) ;
6676: LD_ADDR_VAR 0 4
6680: PUSH
6681: LD_INT 22
6683: PUSH
6684: LD_INT 8
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: PUSH
6691: LD_INT 2
6693: PUSH
6694: LD_INT 30
6696: PUSH
6697: LD_INT 32
6699: PUSH
6700: EMPTY
6701: LIST
6702: LIST
6703: PUSH
6704: LD_INT 30
6706: PUSH
6707: LD_INT 5
6709: PUSH
6710: EMPTY
6711: LIST
6712: LIST
6713: PUSH
6714: EMPTY
6715: LIST
6716: LIST
6717: LIST
6718: PUSH
6719: LD_INT 3
6721: PUSH
6722: LD_INT 62
6724: PUSH
6725: EMPTY
6726: LIST
6727: PUSH
6728: EMPTY
6729: LIST
6730: LIST
6731: PUSH
6732: EMPTY
6733: LIST
6734: LIST
6735: LIST
6736: PPUSH
6737: CALL_OW 69
6741: ST_TO_ADDR
// if b then
6742: LD_VAR 0 4
6746: IFFALSE 6813
// begin for i in b do
6748: LD_ADDR_VAR 0 2
6752: PUSH
6753: LD_VAR 0 4
6757: PUSH
6758: FOR_IN
6759: IFFALSE 6811
// begin PrepareApemanSoldier ( ) ;
6761: CALL 54468 0 0
// un := CreateHuman ;
6765: LD_ADDR_VAR 0 5
6769: PUSH
6770: CALL_OW 44
6774: ST_TO_ADDR
// legForces := Join ( legForces , un ) ;
6775: LD_ADDR_EXP 37
6779: PUSH
6780: LD_EXP 37
6784: PPUSH
6785: LD_VAR 0 5
6789: PPUSH
6790: CALL 58358 0 2
6794: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6795: LD_VAR 0 5
6799: PPUSH
6800: LD_VAR 0 2
6804: PPUSH
6805: CALL_OW 52
// end ;
6809: GO 6758
6811: POP
6812: POP
// end ; for i := 1 to 2 do
6813: LD_ADDR_VAR 0 2
6817: PUSH
6818: DOUBLE
6819: LD_INT 1
6821: DEC
6822: ST_TO_ADDR
6823: LD_INT 2
6825: PUSH
6826: FOR_TO
6827: IFFALSE 6954
// begin uc_nation := nation_arabian ;
6829: LD_ADDR_OWVAR 21
6833: PUSH
6834: LD_INT 2
6836: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_solar , control_manual , ar_control_tower , 100 ) ;
6837: LD_INT 13
6839: PPUSH
6840: LD_INT 2
6842: PPUSH
6843: LD_INT 1
6845: PPUSH
6846: LD_INT 31
6848: PPUSH
6849: LD_INT 100
6851: PPUSH
6852: CALL 25507 0 5
// un := CreateVehicle ;
6856: LD_ADDR_VAR 0 5
6860: PUSH
6861: CALL_OW 45
6865: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6866: LD_VAR 0 5
6870: PPUSH
6871: LD_INT 0
6873: PPUSH
6874: LD_INT 5
6876: PPUSH
6877: CALL_OW 12
6881: PPUSH
6882: CALL_OW 233
// PlaceUnitXYR ( un , 199 , 24 , 4 , false ) ;
6886: LD_VAR 0 5
6890: PPUSH
6891: LD_INT 199
6893: PPUSH
6894: LD_INT 24
6896: PPUSH
6897: LD_INT 4
6899: PPUSH
6900: LD_INT 0
6902: PPUSH
6903: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
6907: LD_INT 0
6909: PPUSH
6910: LD_INT 8
6912: PUSH
6913: LD_INT 9
6915: PUSH
6916: LD_INT 10
6918: PUSH
6919: LD_INT 10
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: LIST
6926: LIST
6927: PUSH
6928: LD_OWVAR 67
6932: ARRAY
6933: PPUSH
6934: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
6938: CALL_OW 44
6942: PPUSH
6943: LD_VAR 0 5
6947: PPUSH
6948: CALL_OW 52
// end ;
6952: GO 6826
6954: POP
6955: POP
// end ;
6956: LD_VAR 0 1
6960: RET
// every 0 0$2 trigger legScriptActive and Count ( legForces ) do var i , tmp , remote , undone , side , lab , eng , tag , tw , cr , sci , mech , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
6961: LD_EXP 4
6965: PUSH
6966: LD_EXP 37
6970: PPUSH
6971: CALL 22769 0 1
6975: AND
6976: IFFALSE 9499
6978: GO 6980
6980: DISABLE
6981: LD_INT 0
6983: PPUSH
6984: PPUSH
6985: PPUSH
6986: PPUSH
6987: PPUSH
6988: PPUSH
6989: PPUSH
6990: PPUSH
6991: PPUSH
6992: PPUSH
6993: PPUSH
6994: PPUSH
6995: PPUSH
6996: PPUSH
6997: PPUSH
6998: PPUSH
6999: PPUSH
7000: PPUSH
7001: PPUSH
// begin enable ;
7002: ENABLE
// side := 8 ;
7003: LD_ADDR_VAR 0 5
7007: PUSH
7008: LD_INT 8
7010: ST_TO_ADDR
// remote := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
7011: LD_ADDR_VAR 0 3
7015: PUSH
7016: LD_INT 22
7018: PUSH
7019: LD_VAR 0 5
7023: PUSH
7024: EMPTY
7025: LIST
7026: LIST
7027: PUSH
7028: LD_INT 33
7030: PUSH
7031: LD_INT 2
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: PUSH
7038: LD_INT 50
7040: PUSH
7041: EMPTY
7042: LIST
7043: PUSH
7044: LD_INT 3
7046: PUSH
7047: LD_INT 61
7049: PUSH
7050: EMPTY
7051: LIST
7052: PUSH
7053: EMPTY
7054: LIST
7055: LIST
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: LIST
7061: LIST
7062: PPUSH
7063: CALL_OW 69
7067: ST_TO_ADDR
// if remote and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_weapon , ar_control_tower ] ] ) ) then
7068: LD_VAR 0 3
7072: PUSH
7073: LD_INT 22
7075: PUSH
7076: LD_VAR 0 5
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: PUSH
7085: LD_INT 50
7087: PUSH
7088: EMPTY
7089: LIST
7090: PUSH
7091: LD_INT 34
7093: PUSH
7094: LD_INT 31
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: LIST
7105: PPUSH
7106: CALL_OW 69
7110: PPUSH
7111: CALL 22769 0 1
7115: AND
7116: IFFALSE 7144
// for i in remote do
7118: LD_ADDR_VAR 0 1
7122: PUSH
7123: LD_VAR 0 3
7127: PUSH
7128: FOR_IN
7129: IFFALSE 7142
// Connect ( i ) ;
7131: LD_VAR 0 1
7135: PPUSH
7136: CALL 28975 0 1
7140: GO 7128
7142: POP
7143: POP
// if legTech then
7144: LD_EXP 39
7148: IFFALSE 7304
// begin lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
7150: LD_ADDR_VAR 0 6
7154: PUSH
7155: LD_INT 22
7157: PUSH
7158: LD_VAR 0 5
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: PUSH
7167: LD_INT 50
7169: PUSH
7170: EMPTY
7171: LIST
7172: PUSH
7173: LD_INT 2
7175: PUSH
7176: LD_INT 30
7178: PUSH
7179: LD_INT 6
7181: PUSH
7182: EMPTY
7183: LIST
7184: LIST
7185: PUSH
7186: LD_INT 30
7188: PUSH
7189: LD_INT 7
7191: PUSH
7192: EMPTY
7193: LIST
7194: LIST
7195: PUSH
7196: LD_INT 30
7198: PUSH
7199: LD_INT 8
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: LIST
7216: PPUSH
7217: CALL_OW 69
7221: ST_TO_ADDR
// if lab then
7222: LD_VAR 0 6
7226: IFFALSE 7304
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
7228: LD_VAR 0 6
7232: PUSH
7233: LD_INT 1
7235: ARRAY
7236: PPUSH
7237: CALL_OW 461
7241: PUSH
7242: LD_INT 2
7244: EQUAL
7245: IFFALSE 7304
// begin for i in legTech do
7247: LD_ADDR_VAR 0 1
7251: PUSH
7252: LD_EXP 39
7256: PUSH
7257: FOR_IN
7258: IFFALSE 7302
// if CanBeResearched ( lab [ 1 ] , i ) then
7260: LD_VAR 0 6
7264: PUSH
7265: LD_INT 1
7267: ARRAY
7268: PPUSH
7269: LD_VAR 0 1
7273: PPUSH
7274: CALL_OW 430
7278: IFFALSE 7300
// begin ComResearch ( lab [ 1 ] , i ) ;
7280: LD_VAR 0 6
7284: PUSH
7285: LD_INT 1
7287: ARRAY
7288: PPUSH
7289: LD_VAR 0 1
7293: PPUSH
7294: CALL_OW 124
// break ;
7298: GO 7302
// end ;
7300: GO 7257
7302: POP
7303: POP
// end ; end ; end ; fac := FilterUnitsInArea ( legBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
7304: LD_ADDR_VAR 0 17
7308: PUSH
7309: LD_INT 2
7311: PPUSH
7312: LD_INT 22
7314: PUSH
7315: LD_VAR 0 5
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: PUSH
7324: LD_INT 30
7326: PUSH
7327: LD_INT 3
7329: PUSH
7330: EMPTY
7331: LIST
7332: LIST
7333: PUSH
7334: LD_INT 50
7336: PUSH
7337: EMPTY
7338: LIST
7339: PUSH
7340: EMPTY
7341: LIST
7342: LIST
7343: LIST
7344: PPUSH
7345: CALL_OW 70
7349: ST_TO_ADDR
// if fac then
7350: LD_VAR 0 17
7354: IFFALSE 7730
// begin mech := UnitFilter ( legForces , [ [ f_tag , tMech ] , [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) ;
7356: LD_ADDR_VAR 0 12
7360: PUSH
7361: LD_EXP 37
7365: PPUSH
7366: LD_INT 120
7368: PUSH
7369: LD_INT 7
7371: PUSH
7372: EMPTY
7373: LIST
7374: LIST
7375: PUSH
7376: LD_INT 25
7378: PUSH
7379: LD_INT 3
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: PUSH
7386: LD_INT 3
7388: PUSH
7389: LD_INT 54
7391: PUSH
7392: EMPTY
7393: LIST
7394: PUSH
7395: EMPTY
7396: LIST
7397: LIST
7398: PUSH
7399: LD_INT 3
7401: PUSH
7402: LD_INT 55
7404: PUSH
7405: EMPTY
7406: LIST
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: PPUSH
7418: CALL_OW 72
7422: ST_TO_ADDR
// if mech and UnitsInside ( fac [ 1 ] ) < 6 then
7423: LD_VAR 0 12
7427: PUSH
7428: LD_VAR 0 17
7432: PUSH
7433: LD_INT 1
7435: ARRAY
7436: PPUSH
7437: CALL_OW 313
7441: PUSH
7442: LD_INT 6
7444: LESS
7445: AND
7446: IFFALSE 7466
// ComEnterUnit ( mech , fac [ 1 ] ) ;
7448: LD_VAR 0 12
7452: PPUSH
7453: LD_VAR 0 17
7457: PUSH
7458: LD_INT 1
7460: ARRAY
7461: PPUSH
7462: CALL_OW 120
// if BuildingStatus ( fac [ 1 ] ) = bs_idle then
7466: LD_VAR 0 17
7470: PUSH
7471: LD_INT 1
7473: ARRAY
7474: PPUSH
7475: CALL_OW 461
7479: PUSH
7480: LD_INT 2
7482: EQUAL
7483: IFFALSE 7730
// begin emptyTowers := FilterUnitsInArea ( legBaseArea , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
7485: LD_ADDR_VAR 0 18
7489: PUSH
7490: LD_INT 2
7492: PPUSH
7493: LD_INT 2
7495: PUSH
7496: LD_INT 30
7498: PUSH
7499: LD_INT 32
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: PUSH
7506: LD_INT 30
7508: PUSH
7509: LD_INT 33
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PUSH
7516: EMPTY
7517: LIST
7518: LIST
7519: LIST
7520: PUSH
7521: LD_INT 35
7523: PUSH
7524: LD_INT 0
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: PUSH
7531: EMPTY
7532: LIST
7533: LIST
7534: PPUSH
7535: CALL_OW 70
7539: ST_TO_ADDR
// if emptyTowers then
7540: LD_VAR 0 18
7544: IFFALSE 7592
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , legBaseArea ) ;
7546: LD_ADDR_VAR 0 19
7550: PUSH
7551: LD_VAR 0 18
7555: PUSH
7556: LD_INT 1
7558: ARRAY
7559: PPUSH
7560: LD_INT 2
7562: PPUSH
7563: CALL 31014 0 2
7567: ST_TO_ADDR
// if weapon then
7568: LD_VAR 0 19
7572: IFFALSE 7592
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
7574: LD_VAR 0 18
7578: PUSH
7579: LD_INT 1
7581: ARRAY
7582: PPUSH
7583: LD_VAR 0 19
7587: PPUSH
7588: CALL_OW 148
// end ; if legConstructList then
7592: LD_EXP 40
7596: IFFALSE 7730
// if CanBeConstructed ( fac [ 1 ] , legConstructList [ 1 ] [ 1 ] , legConstructList [ 1 ] [ 2 ] , legConstructList [ 1 ] [ 3 ] , legConstructList [ 1 ] [ 4 ] ) then
7598: LD_VAR 0 17
7602: PUSH
7603: LD_INT 1
7605: ARRAY
7606: PPUSH
7607: LD_EXP 40
7611: PUSH
7612: LD_INT 1
7614: ARRAY
7615: PUSH
7616: LD_INT 1
7618: ARRAY
7619: PPUSH
7620: LD_EXP 40
7624: PUSH
7625: LD_INT 1
7627: ARRAY
7628: PUSH
7629: LD_INT 2
7631: ARRAY
7632: PPUSH
7633: LD_EXP 40
7637: PUSH
7638: LD_INT 1
7640: ARRAY
7641: PUSH
7642: LD_INT 3
7644: ARRAY
7645: PPUSH
7646: LD_EXP 40
7650: PUSH
7651: LD_INT 1
7653: ARRAY
7654: PUSH
7655: LD_INT 4
7657: ARRAY
7658: PPUSH
7659: CALL_OW 448
7663: IFFALSE 7730
// ComConstruct ( fac [ 1 ] , legConstructList [ 1 ] [ 1 ] , legConstructList [ 1 ] [ 2 ] , legConstructList [ 1 ] [ 3 ] , legConstructList [ 1 ] [ 4 ] ) ;
7665: LD_VAR 0 17
7669: PUSH
7670: LD_INT 1
7672: ARRAY
7673: PPUSH
7674: LD_EXP 40
7678: PUSH
7679: LD_INT 1
7681: ARRAY
7682: PUSH
7683: LD_INT 1
7685: ARRAY
7686: PPUSH
7687: LD_EXP 40
7691: PUSH
7692: LD_INT 1
7694: ARRAY
7695: PUSH
7696: LD_INT 2
7698: ARRAY
7699: PPUSH
7700: LD_EXP 40
7704: PUSH
7705: LD_INT 1
7707: ARRAY
7708: PUSH
7709: LD_INT 3
7711: ARRAY
7712: PPUSH
7713: LD_EXP 40
7717: PUSH
7718: LD_INT 1
7720: ARRAY
7721: PUSH
7722: LD_INT 4
7724: ARRAY
7725: PPUSH
7726: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( legBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7730: LD_ADDR_VAR 0 2
7734: PUSH
7735: LD_INT 2
7737: PPUSH
7738: LD_INT 21
7740: PUSH
7741: LD_INT 3
7743: PUSH
7744: EMPTY
7745: LIST
7746: LIST
7747: PUSH
7748: LD_INT 3
7750: PUSH
7751: LD_INT 57
7753: PUSH
7754: EMPTY
7755: LIST
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: PUSH
7761: LD_INT 3
7763: PUSH
7764: LD_INT 24
7766: PUSH
7767: LD_INT 1000
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: LIST
7782: PPUSH
7783: CALL_OW 70
7787: ST_TO_ADDR
// cr := GetListOfCratesInArea ( legCratesArea ) ;
7788: LD_ADDR_VAR 0 10
7792: PUSH
7793: LD_INT 14
7795: PPUSH
7796: CALL_OW 435
7800: ST_TO_ADDR
// sci := UnitFilter ( legForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
7801: LD_ADDR_VAR 0 11
7805: PUSH
7806: LD_EXP 37
7810: PPUSH
7811: LD_INT 25
7813: PUSH
7814: LD_INT 4
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: PUSH
7821: LD_INT 50
7823: PUSH
7824: EMPTY
7825: LIST
7826: PUSH
7827: EMPTY
7828: LIST
7829: LIST
7830: PPUSH
7831: CALL_OW 72
7835: ST_TO_ADDR
// lab := FilterUnitsInArea ( legBaseArea , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
7836: LD_ADDR_VAR 0 6
7840: PUSH
7841: LD_INT 2
7843: PPUSH
7844: LD_INT 2
7846: PUSH
7847: LD_INT 30
7849: PUSH
7850: LD_INT 6
7852: PUSH
7853: EMPTY
7854: LIST
7855: LIST
7856: PUSH
7857: LD_INT 30
7859: PUSH
7860: LD_INT 7
7862: PUSH
7863: EMPTY
7864: LIST
7865: LIST
7866: PUSH
7867: LD_INT 30
7869: PUSH
7870: LD_INT 8
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: PPUSH
7883: CALL_OW 70
7887: ST_TO_ADDR
// if sci then
7888: LD_VAR 0 11
7892: IFFALSE 8051
// begin hurtUnits := UnitFilter ( legForces , [ [ f_inarea , legBaseArea ] , [ f_tag , tHeal ] ] ) ;
7894: LD_ADDR_VAR 0 14
7898: PUSH
7899: LD_EXP 37
7903: PPUSH
7904: LD_INT 95
7906: PUSH
7907: LD_INT 2
7909: PUSH
7910: EMPTY
7911: LIST
7912: LIST
7913: PUSH
7914: LD_INT 120
7916: PUSH
7917: LD_INT 1
7919: PUSH
7920: EMPTY
7921: LIST
7922: LIST
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PPUSH
7928: CALL_OW 72
7932: ST_TO_ADDR
// if hurtUnits then
7933: LD_VAR 0 14
7937: IFFALSE 7998
// begin for i in sci do
7939: LD_ADDR_VAR 0 1
7943: PUSH
7944: LD_VAR 0 11
7948: PUSH
7949: FOR_IN
7950: IFFALSE 7994
// if IsInUnit ( i ) then
7952: LD_VAR 0 1
7956: PPUSH
7957: CALL_OW 310
7961: IFFALSE 7974
// ComExitBuilding ( i ) else
7963: LD_VAR 0 1
7967: PPUSH
7968: CALL_OW 122
7972: GO 7992
// ComHeal ( i , hurtUnits [ 1 ] ) ;
7974: LD_VAR 0 1
7978: PPUSH
7979: LD_VAR 0 14
7983: PUSH
7984: LD_INT 1
7986: ARRAY
7987: PPUSH
7988: CALL_OW 128
7992: GO 7949
7994: POP
7995: POP
// end else
7996: GO 8051
// if lab then
7998: LD_VAR 0 6
8002: IFFALSE 8051
// begin for i in sci do
8004: LD_ADDR_VAR 0 1
8008: PUSH
8009: LD_VAR 0 11
8013: PUSH
8014: FOR_IN
8015: IFFALSE 8049
// if not IsInUnit ( i ) then
8017: LD_VAR 0 1
8021: PPUSH
8022: CALL_OW 310
8026: NOT
8027: IFFALSE 8047
// ComEnterUnit ( i , lab [ 1 ] ) ;
8029: LD_VAR 0 1
8033: PPUSH
8034: LD_VAR 0 6
8038: PUSH
8039: LD_INT 1
8041: ARRAY
8042: PPUSH
8043: CALL_OW 120
8047: GO 8014
8049: POP
8050: POP
// end ; end ; eng := UnitFilter ( legForces , [ f_class , 2 ] ) ;
8051: LD_ADDR_VAR 0 7
8055: PUSH
8056: LD_EXP 37
8060: PPUSH
8061: LD_INT 25
8063: PUSH
8064: LD_INT 2
8066: PUSH
8067: EMPTY
8068: LIST
8069: LIST
8070: PPUSH
8071: CALL_OW 72
8075: ST_TO_ADDR
// if eng then
8076: LD_VAR 0 7
8080: IFFALSE 8855
// begin for i in eng do
8082: LD_ADDR_VAR 0 1
8086: PUSH
8087: LD_VAR 0 7
8091: PUSH
8092: FOR_IN
8093: IFFALSE 8853
// begin tag := GetTag ( i ) ;
8095: LD_ADDR_VAR 0 8
8099: PUSH
8100: LD_VAR 0 1
8104: PPUSH
8105: CALL_OW 110
8109: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
8110: LD_VAR 0 1
8114: PPUSH
8115: CALL_OW 256
8119: PUSH
8120: LD_INT 800
8122: LESS
8123: PUSH
8124: LD_VAR 0 8
8128: PUSH
8129: LD_INT 1
8131: NONEQUAL
8132: AND
8133: IFFALSE 8183
// begin SetTag ( i , tHeal ) ;
8135: LD_VAR 0 1
8139: PPUSH
8140: LD_INT 1
8142: PPUSH
8143: CALL_OW 109
// ComMoveXY ( i , legHealPoint [ 1 ] , legHealPoint [ 2 ] ) ;
8147: LD_VAR 0 1
8151: PPUSH
8152: LD_EXP 41
8156: PUSH
8157: LD_INT 1
8159: ARRAY
8160: PPUSH
8161: LD_EXP 41
8165: PUSH
8166: LD_INT 2
8168: ARRAY
8169: PPUSH
8170: CALL_OW 111
// AddComHold ( i ) ;
8174: LD_VAR 0 1
8178: PPUSH
8179: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
8183: LD_VAR 0 8
8187: PUSH
8188: LD_INT 1
8190: EQUAL
8191: PUSH
8192: LD_VAR 0 1
8196: PPUSH
8197: CALL_OW 256
8201: PUSH
8202: LD_INT 1000
8204: EQUAL
8205: AND
8206: IFFALSE 8220
// SetTag ( i , 0 ) ;
8208: LD_VAR 0 1
8212: PPUSH
8213: LD_INT 0
8215: PPUSH
8216: CALL_OW 109
// if not tag then
8220: LD_VAR 0 8
8224: NOT
8225: IFFALSE 8393
// begin undone := FilterUnitsInArea ( legBaseArea , [ f_constructed ] ) ;
8227: LD_ADDR_VAR 0 4
8231: PUSH
8232: LD_INT 2
8234: PPUSH
8235: LD_INT 57
8237: PUSH
8238: EMPTY
8239: LIST
8240: PPUSH
8241: CALL_OW 70
8245: ST_TO_ADDR
// if undone then
8246: LD_VAR 0 4
8250: IFFALSE 8272
// begin ComComplete ( i , undone [ 1 ] ) ;
8252: LD_VAR 0 1
8256: PPUSH
8257: LD_VAR 0 4
8261: PUSH
8262: LD_INT 1
8264: ARRAY
8265: PPUSH
8266: CALL 28867 0 2
// continue ;
8270: GO 8092
// end ; if cr or tmp or Count ( legBuildings ) then
8272: LD_VAR 0 10
8276: PUSH
8277: LD_VAR 0 2
8281: OR
8282: PUSH
8283: LD_EXP 42
8287: PPUSH
8288: CALL 22769 0 1
8292: OR
8293: IFFALSE 8369
// begin if IsInUnit ( i ) then
8295: LD_VAR 0 1
8299: PPUSH
8300: CALL_OW 310
8304: IFFALSE 8315
// ComExitBuilding ( i ) ;
8306: LD_VAR 0 1
8310: PPUSH
8311: CALL_OW 122
// if tmp then
8315: LD_VAR 0 2
8319: IFFALSE 8335
// SetTag ( i , tRepair ) else
8321: LD_VAR 0 1
8325: PPUSH
8326: LD_INT 3
8328: PPUSH
8329: CALL_OW 109
8333: GO 8367
// if cr then
8335: LD_VAR 0 10
8339: IFFALSE 8355
// SetTag ( i , tCrates ) else
8341: LD_VAR 0 1
8345: PPUSH
8346: LD_INT 2
8348: PPUSH
8349: CALL_OW 109
8353: GO 8367
// SetTag ( i , tBuild ) ;
8355: LD_VAR 0 1
8359: PPUSH
8360: LD_INT 5
8362: PPUSH
8363: CALL_OW 109
// end else
8367: GO 8393
// if not IsInUnit ( i ) then
8369: LD_VAR 0 1
8373: PPUSH
8374: CALL_OW 310
8378: NOT
8379: IFFALSE 8393
// ComEnterUnit ( i , legBase ) ;
8381: LD_VAR 0 1
8385: PPUSH
8386: LD_INT 38
8388: PPUSH
8389: CALL_OW 120
// end ; if tag = tRepair then
8393: LD_VAR 0 8
8397: PUSH
8398: LD_INT 3
8400: EQUAL
8401: IFFALSE 8503
// begin if IsInUnit ( i ) then
8403: LD_VAR 0 1
8407: PPUSH
8408: CALL_OW 310
8412: IFFALSE 8425
// begin ComExitBuilding ( i ) ;
8414: LD_VAR 0 1
8418: PPUSH
8419: CALL_OW 122
// continue ;
8423: GO 8092
// end ; if not tmp then
8425: LD_VAR 0 2
8429: NOT
8430: IFFALSE 8446
// begin SetTag ( i , 0 ) ;
8432: LD_VAR 0 1
8436: PPUSH
8437: LD_INT 0
8439: PPUSH
8440: CALL_OW 109
// continue ;
8444: GO 8092
// end ; if not HasTask ( i ) then
8446: LD_VAR 0 1
8450: PPUSH
8451: CALL_OW 314
8455: NOT
8456: IFFALSE 8476
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
8458: LD_VAR 0 1
8462: PPUSH
8463: LD_VAR 0 2
8467: PUSH
8468: LD_INT 1
8470: ARRAY
8471: PPUSH
8472: CALL_OW 130
// if not IsInArea ( i , legBaseArea ) then
8476: LD_VAR 0 1
8480: PPUSH
8481: LD_INT 2
8483: PPUSH
8484: CALL_OW 308
8488: NOT
8489: IFFALSE 8503
// ComMoveToArea ( i , legBaseArea ) ;
8491: LD_VAR 0 1
8495: PPUSH
8496: LD_INT 2
8498: PPUSH
8499: CALL_OW 113
// end ; if tag = tBuild then
8503: LD_VAR 0 8
8507: PUSH
8508: LD_INT 5
8510: EQUAL
8511: IFFALSE 8706
// begin if IsInUnit ( i ) then
8513: LD_VAR 0 1
8517: PPUSH
8518: CALL_OW 310
8522: IFFALSE 8535
// begin ComExitBuilding ( i ) ;
8524: LD_VAR 0 1
8528: PPUSH
8529: CALL_OW 122
// continue ;
8533: GO 8092
// end ; if not Count ( legBuildings ) then
8535: LD_EXP 42
8539: PPUSH
8540: CALL 22769 0 1
8544: NOT
8545: IFFALSE 8563
// begin SetTag ( i , 0 ) ;
8547: LD_VAR 0 1
8551: PPUSH
8552: LD_INT 0
8554: PPUSH
8555: CALL_OW 109
// continue ;
8559: GO 8092
// end else
8561: GO 8600
// if not CanBeBuiltOnlyResources ( legBase , legBuildings [ 1 ] [ 1 ] ) then
8563: LD_INT 38
8565: PPUSH
8566: LD_EXP 42
8570: PUSH
8571: LD_INT 1
8573: ARRAY
8574: PUSH
8575: LD_INT 1
8577: ARRAY
8578: PPUSH
8579: CALL 62277 0 2
8583: NOT
8584: IFFALSE 8600
// begin SetTag ( i , 0 ) ;
8586: LD_VAR 0 1
8590: PPUSH
8591: LD_INT 0
8593: PPUSH
8594: CALL_OW 109
// continue ;
8598: GO 8092
// end ; undone := FilterUnitsInArea ( legBaseArea , [ f_constructed ] ) ;
8600: LD_ADDR_VAR 0 4
8604: PUSH
8605: LD_INT 2
8607: PPUSH
8608: LD_INT 57
8610: PUSH
8611: EMPTY
8612: LIST
8613: PPUSH
8614: CALL_OW 70
8618: ST_TO_ADDR
// if undone then
8619: LD_VAR 0 4
8623: IFFALSE 8645
// begin ComComplete ( i , undone [ 1 ] ) ;
8625: LD_VAR 0 1
8629: PPUSH
8630: LD_VAR 0 4
8634: PUSH
8635: LD_INT 1
8637: ARRAY
8638: PPUSH
8639: CALL 28867 0 2
// continue ;
8643: GO 8092
// end ; ComBuild ( i , legBuildings [ 1 ] [ 1 ] , legBuildings [ 1 ] [ 2 ] , legBuildings [ 1 ] [ 3 ] , legBuildings [ 1 ] [ 4 ] ) ;
8645: LD_VAR 0 1
8649: PPUSH
8650: LD_EXP 42
8654: PUSH
8655: LD_INT 1
8657: ARRAY
8658: PUSH
8659: LD_INT 1
8661: ARRAY
8662: PPUSH
8663: LD_EXP 42
8667: PUSH
8668: LD_INT 1
8670: ARRAY
8671: PUSH
8672: LD_INT 2
8674: ARRAY
8675: PPUSH
8676: LD_EXP 42
8680: PUSH
8681: LD_INT 1
8683: ARRAY
8684: PUSH
8685: LD_INT 3
8687: ARRAY
8688: PPUSH
8689: LD_EXP 42
8693: PUSH
8694: LD_INT 1
8696: ARRAY
8697: PUSH
8698: LD_INT 4
8700: ARRAY
8701: PPUSH
8702: CALL_OW 145
// end ; if tag = tCrates then
8706: LD_VAR 0 8
8710: PUSH
8711: LD_INT 2
8713: EQUAL
8714: IFFALSE 8851
// begin if IsInUnit ( i ) then
8716: LD_VAR 0 1
8720: PPUSH
8721: CALL_OW 310
8725: IFFALSE 8738
// begin ComExitBuilding ( i ) ;
8727: LD_VAR 0 1
8731: PPUSH
8732: CALL_OW 122
// continue ;
8736: GO 8092
// end ; if not cr then
8738: LD_VAR 0 10
8742: NOT
8743: IFFALSE 8759
// begin SetTag ( i , 0 ) ;
8745: LD_VAR 0 1
8749: PPUSH
8750: LD_INT 0
8752: PPUSH
8753: CALL_OW 109
// continue ;
8757: GO 8092
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
8759: LD_VAR 0 1
8763: PPUSH
8764: CALL_OW 314
8768: NOT
8769: PUSH
8770: LD_INT 81
8772: PUSH
8773: LD_VAR 0 5
8777: PUSH
8778: EMPTY
8779: LIST
8780: LIST
8781: PUSH
8782: LD_INT 92
8784: PUSH
8785: LD_VAR 0 10
8789: PUSH
8790: LD_INT 1
8792: ARRAY
8793: PUSH
8794: LD_VAR 0 10
8798: PUSH
8799: LD_INT 2
8801: ARRAY
8802: PUSH
8803: LD_INT 12
8805: PUSH
8806: EMPTY
8807: LIST
8808: LIST
8809: LIST
8810: LIST
8811: PUSH
8812: EMPTY
8813: LIST
8814: LIST
8815: PPUSH
8816: CALL_OW 69
8820: NOT
8821: AND
8822: IFFALSE 8851
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
8824: LD_VAR 0 1
8828: PPUSH
8829: LD_VAR 0 10
8833: PUSH
8834: LD_INT 1
8836: ARRAY
8837: PPUSH
8838: LD_VAR 0 10
8842: PUSH
8843: LD_INT 2
8845: ARRAY
8846: PPUSH
8847: CALL_OW 117
// end ; end ;
8851: GO 8092
8853: POP
8854: POP
// end ; sol := UnitFilter ( legForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_mortar ] ] , [ f_ok ] ] ) ;
8855: LD_ADDR_VAR 0 13
8859: PUSH
8860: LD_EXP 37
8864: PPUSH
8865: LD_INT 2
8867: PUSH
8868: LD_INT 25
8870: PUSH
8871: LD_INT 1
8873: PUSH
8874: EMPTY
8875: LIST
8876: LIST
8877: PUSH
8878: LD_INT 25
8880: PUSH
8881: LD_INT 5
8883: PUSH
8884: EMPTY
8885: LIST
8886: LIST
8887: PUSH
8888: LD_INT 25
8890: PUSH
8891: LD_INT 8
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: PUSH
8898: EMPTY
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: PUSH
8904: LD_INT 50
8906: PUSH
8907: EMPTY
8908: LIST
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: PPUSH
8914: CALL_OW 72
8918: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( legBaseArea , [ f_enemy , side ] ) ;
8919: LD_ADDR_VAR 0 15
8923: PUSH
8924: LD_INT 2
8926: PPUSH
8927: LD_INT 81
8929: PUSH
8930: LD_VAR 0 5
8934: PUSH
8935: EMPTY
8936: LIST
8937: LIST
8938: PPUSH
8939: CALL_OW 70
8943: ST_TO_ADDR
// if sol then
8944: LD_VAR 0 13
8948: IFFALSE 9499
// begin if enemyInBase then
8950: LD_VAR 0 15
8954: IFFALSE 9099
// begin for i in sol do
8956: LD_ADDR_VAR 0 1
8960: PUSH
8961: LD_VAR 0 13
8965: PUSH
8966: FOR_IN
8967: IFFALSE 9095
// begin tw := IsInUnit ( i ) ;
8969: LD_ADDR_VAR 0 9
8973: PUSH
8974: LD_VAR 0 1
8978: PPUSH
8979: CALL_OW 310
8983: ST_TO_ADDR
// if tw then
8984: LD_VAR 0 9
8988: IFFALSE 9069
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
8990: LD_VAR 0 9
8994: PUSH
8995: LD_INT 22
8997: PUSH
8998: LD_VAR 0 5
9002: PUSH
9003: EMPTY
9004: LIST
9005: LIST
9006: PUSH
9007: LD_INT 101
9009: PUSH
9010: LD_INT 2
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: PUSH
9017: LD_INT 2
9019: PUSH
9020: LD_INT 30
9022: PUSH
9023: LD_INT 32
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: PUSH
9030: LD_INT 30
9032: PUSH
9033: LD_INT 31
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: PUSH
9040: EMPTY
9041: LIST
9042: LIST
9043: LIST
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: LIST
9049: PPUSH
9050: CALL_OW 69
9054: IN
9055: NOT
9056: IFFALSE 9067
// ComExitBuilding ( i ) ;
9058: LD_VAR 0 1
9062: PPUSH
9063: CALL_OW 122
// end else
9067: GO 9093
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
9069: LD_VAR 0 1
9073: PPUSH
9074: LD_VAR 0 15
9078: PPUSH
9079: LD_VAR 0 1
9083: PPUSH
9084: CALL_OW 74
9088: PPUSH
9089: CALL_OW 115
// end ;
9093: GO 8966
9095: POP
9096: POP
// end else
9097: GO 9499
// begin empty := FilterUnitsInArea ( legBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
9099: LD_ADDR_VAR 0 16
9103: PUSH
9104: LD_INT 2
9106: PPUSH
9107: LD_INT 3
9109: PUSH
9110: LD_INT 62
9112: PUSH
9113: EMPTY
9114: LIST
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PUSH
9120: LD_INT 2
9122: PUSH
9123: LD_INT 30
9125: PUSH
9126: LD_INT 32
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: PUSH
9133: LD_INT 30
9135: PUSH
9136: LD_INT 4
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: PUSH
9143: LD_INT 30
9145: PUSH
9146: LD_INT 5
9148: PUSH
9149: EMPTY
9150: LIST
9151: LIST
9152: PUSH
9153: LD_INT 30
9155: PUSH
9156: LD_INT 31
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: PUSH
9163: EMPTY
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: PUSH
9170: EMPTY
9171: LIST
9172: LIST
9173: PPUSH
9174: CALL_OW 70
9178: ST_TO_ADDR
// if empty then
9179: LD_VAR 0 16
9183: IFFALSE 9200
// empty := ReverseArray ( empty ) ;
9185: LD_ADDR_VAR 0 16
9189: PUSH
9190: LD_VAR 0 16
9194: PPUSH
9195: CALL 53645 0 1
9199: ST_TO_ADDR
// for i in sol do
9200: LD_ADDR_VAR 0 1
9204: PUSH
9205: LD_VAR 0 13
9209: PUSH
9210: FOR_IN
9211: IFFALSE 9497
// begin tag := GetTag ( i ) ;
9213: LD_ADDR_VAR 0 8
9217: PUSH
9218: LD_VAR 0 1
9222: PPUSH
9223: CALL_OW 110
9227: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
9228: LD_VAR 0 1
9232: PPUSH
9233: CALL_OW 256
9237: PUSH
9238: LD_INT 1000
9240: LESS
9241: PUSH
9242: LD_VAR 0 8
9246: PUSH
9247: LD_INT 1
9249: NONEQUAL
9250: AND
9251: IFFALSE 9303
// begin SetTag ( i , tHeal ) ;
9253: LD_VAR 0 1
9257: PPUSH
9258: LD_INT 1
9260: PPUSH
9261: CALL_OW 109
// ComMoveXY ( i , legHealPoint [ 1 ] , legHealPoint [ 2 ] ) ;
9265: LD_VAR 0 1
9269: PPUSH
9270: LD_EXP 41
9274: PUSH
9275: LD_INT 1
9277: ARRAY
9278: PPUSH
9279: LD_EXP 41
9283: PUSH
9284: LD_INT 2
9286: ARRAY
9287: PPUSH
9288: CALL_OW 111
// AddComHold ( i ) ;
9292: LD_VAR 0 1
9296: PPUSH
9297: CALL_OW 200
// continue ;
9301: GO 9210
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
9303: LD_VAR 0 1
9307: PPUSH
9308: CALL_OW 256
9312: PUSH
9313: LD_INT 1000
9315: EQUAL
9316: PUSH
9317: LD_VAR 0 8
9321: PUSH
9322: LD_INT 1
9324: EQUAL
9325: AND
9326: IFFALSE 9342
// begin SetTag ( i , 0 ) ;
9328: LD_VAR 0 1
9332: PPUSH
9333: LD_INT 0
9335: PPUSH
9336: CALL_OW 109
// continue ;
9340: GO 9210
// end ; if not IsInArea ( i , legBaseArea ) and not IsInUnit ( i ) then
9342: LD_VAR 0 1
9346: PPUSH
9347: LD_INT 2
9349: PPUSH
9350: CALL_OW 308
9354: NOT
9355: PUSH
9356: LD_VAR 0 1
9360: PPUSH
9361: CALL_OW 310
9365: NOT
9366: AND
9367: IFFALSE 9381
// ComMoveToArea ( i , legBaseArea ) ;
9369: LD_VAR 0 1
9373: PPUSH
9374: LD_INT 2
9376: PPUSH
9377: CALL_OW 113
// if HasTask ( i ) then
9381: LD_VAR 0 1
9385: PPUSH
9386: CALL_OW 314
9390: IFFALSE 9394
// continue ;
9392: GO 9210
// if not IsInUnit ( i ) and not tag and empty then
9394: LD_VAR 0 1
9398: PPUSH
9399: CALL_OW 310
9403: NOT
9404: PUSH
9405: LD_VAR 0 8
9409: NOT
9410: AND
9411: PUSH
9412: LD_VAR 0 16
9416: AND
9417: IFFALSE 9495
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
9419: LD_VAR 0 1
9423: PPUSH
9424: LD_VAR 0 16
9428: PUSH
9429: LD_INT 1
9431: ARRAY
9432: PPUSH
9433: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
9437: LD_VAR 0 16
9441: PUSH
9442: LD_INT 1
9444: ARRAY
9445: PPUSH
9446: CALL_OW 266
9450: PUSH
9451: LD_INT 5
9453: EQUAL
9454: PUSH
9455: LD_INT 50
9457: PPUSH
9458: CALL_OW 13
9462: AND
9463: IFFALSE 9477
// AddComChangeProfession ( i , class_mortar ) ;
9465: LD_VAR 0 1
9469: PPUSH
9470: LD_INT 8
9472: PPUSH
9473: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
9477: LD_ADDR_VAR 0 16
9481: PUSH
9482: LD_VAR 0 16
9486: PPUSH
9487: LD_INT 1
9489: PPUSH
9490: CALL_OW 3
9494: ST_TO_ADDR
// end ; end ;
9495: GO 9210
9497: POP
9498: POP
// end ; end ; end ;
9499: PPOPN 19
9501: END
// every 0 0$2 trigger IsOk ( legCargo ) and legScriptActive and spotByLegion do var cr , enemyInArea ;
9502: LD_EXP 45
9506: PPUSH
9507: CALL_OW 302
9511: PUSH
9512: LD_EXP 4
9516: AND
9517: PUSH
9518: LD_EXP 9
9522: AND
9523: IFFALSE 9805
9525: GO 9527
9527: DISABLE
9528: LD_INT 0
9530: PPUSH
9531: PPUSH
// begin enable ;
9532: ENABLE
// enemyInArea := FilterUnitsInArea ( legBaseArea , [ [ f_enemy , 8 ] , [ f_ok ] ] ) ;
9533: LD_ADDR_VAR 0 2
9537: PUSH
9538: LD_INT 2
9540: PPUSH
9541: LD_INT 81
9543: PUSH
9544: LD_INT 8
9546: PUSH
9547: EMPTY
9548: LIST
9549: LIST
9550: PUSH
9551: LD_INT 50
9553: PUSH
9554: EMPTY
9555: LIST
9556: PUSH
9557: EMPTY
9558: LIST
9559: LIST
9560: PPUSH
9561: CALL_OW 70
9565: ST_TO_ADDR
// cr := GetListOfCratesInArea ( cratesNorthArea ) ;
9566: LD_ADDR_VAR 0 1
9570: PUSH
9571: LD_INT 16
9573: PPUSH
9574: CALL_OW 435
9578: ST_TO_ADDR
// if GetFuel ( legCargo ) < 10 and not See ( 2 , legCargo ) and GetEngine ( legCargo ) = engine_combustion then
9579: LD_EXP 45
9583: PPUSH
9584: CALL_OW 261
9588: PUSH
9589: LD_INT 10
9591: LESS
9592: PUSH
9593: LD_INT 2
9595: PPUSH
9596: LD_EXP 45
9600: PPUSH
9601: CALL_OW 292
9605: NOT
9606: AND
9607: PUSH
9608: LD_EXP 45
9612: PPUSH
9613: CALL_OW 262
9617: PUSH
9618: LD_INT 1
9620: EQUAL
9621: AND
9622: IFFALSE 9636
// SetFuel ( legCargo , 100 ) ;
9624: LD_EXP 45
9628: PPUSH
9629: LD_INT 100
9631: PPUSH
9632: CALL_OW 240
// if not HasTask ( legCargo ) and GetCargo ( legCargo , mat_cans ) < 100 and not enemyInArea then
9636: LD_EXP 45
9640: PPUSH
9641: CALL_OW 314
9645: NOT
9646: PUSH
9647: LD_EXP 45
9651: PPUSH
9652: LD_INT 1
9654: PPUSH
9655: CALL_OW 289
9659: PUSH
9660: LD_INT 100
9662: LESS
9663: AND
9664: PUSH
9665: LD_VAR 0 2
9669: NOT
9670: AND
9671: IFFALSE 9737
// begin if cr then
9673: LD_VAR 0 1
9677: IFFALSE 9708
// ComCollect ( legCargo , cr [ 1 ] , cr [ 2 ] ) else
9679: LD_EXP 45
9683: PPUSH
9684: LD_VAR 0 1
9688: PUSH
9689: LD_INT 1
9691: ARRAY
9692: PPUSH
9693: LD_VAR 0 1
9697: PUSH
9698: LD_INT 2
9700: ARRAY
9701: PPUSH
9702: CALL_OW 117
9706: GO 9735
// if not IsInArea ( legCargo , cratesNorthArea ) then
9708: LD_EXP 45
9712: PPUSH
9713: LD_INT 16
9715: PPUSH
9716: CALL_OW 308
9720: NOT
9721: IFFALSE 9735
// ComMoveToArea ( legCargo , cratesNorthArea ) ;
9723: LD_EXP 45
9727: PPUSH
9728: LD_INT 16
9730: PPUSH
9731: CALL_OW 113
// exit ;
9735: GO 9805
// end ; if enemyInArea and not IsInArea ( legCargo , legBaseArea ) then
9737: LD_VAR 0 2
9741: PUSH
9742: LD_EXP 45
9746: PPUSH
9747: LD_INT 2
9749: PPUSH
9750: CALL_OW 308
9754: NOT
9755: AND
9756: IFFALSE 9775
// ComMoveXY ( legCargo , 194 , 17 ) else
9758: LD_EXP 45
9762: PPUSH
9763: LD_INT 194
9765: PPUSH
9766: LD_INT 17
9768: PPUSH
9769: CALL_OW 111
9773: GO 9805
// if GetCargo ( legCargo , mat_cans ) = 100 then
9775: LD_EXP 45
9779: PPUSH
9780: LD_INT 1
9782: PPUSH
9783: CALL_OW 289
9787: PUSH
9788: LD_INT 100
9790: EQUAL
9791: IFFALSE 9805
// ComGive ( legCargo , legBase ) ;
9793: LD_EXP 45
9797: PPUSH
9798: LD_INT 38
9800: PPUSH
9801: CALL_OW 161
// end ;
9805: PPOPN 2
9807: END
// every 6 6$00 trigger Count ( UnitFilter ( legRTanks , [ f_ok ] ) ) < 5 and legScriptActive and spotByLegion and spotArabianBase do var i , parts , part , level ;
9808: LD_EXP 44
9812: PPUSH
9813: LD_INT 50
9815: PUSH
9816: EMPTY
9817: LIST
9818: PPUSH
9819: CALL_OW 72
9823: PPUSH
9824: CALL 22769 0 1
9828: PUSH
9829: LD_INT 5
9831: LESS
9832: PUSH
9833: LD_EXP 4
9837: AND
9838: PUSH
9839: LD_EXP 9
9843: AND
9844: PUSH
9845: LD_EXP 7
9849: AND
9850: IFFALSE 10054
9852: GO 9854
9854: DISABLE
9855: LD_INT 0
9857: PPUSH
9858: PPUSH
9859: PPUSH
9860: PPUSH
// begin enable ;
9861: ENABLE
// parts := [ [ ar_medium_trike , ar_rocket_launcher ] , [ ar_medium_trike , ar_gun ] , [ ar_medium_trike , ar_flame_thrower ] , [ ar_half_tracked , ar_rocket_launcher ] , [ ar_half_tracked , ar_gatling_gun ] ] ;
9862: LD_ADDR_VAR 0 2
9866: PUSH
9867: LD_INT 13
9869: PUSH
9870: LD_INT 28
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: PUSH
9877: LD_INT 13
9879: PUSH
9880: LD_INT 27
9882: PUSH
9883: EMPTY
9884: LIST
9885: LIST
9886: PUSH
9887: LD_INT 13
9889: PUSH
9890: LD_INT 26
9892: PUSH
9893: EMPTY
9894: LIST
9895: LIST
9896: PUSH
9897: LD_INT 14
9899: PUSH
9900: LD_INT 28
9902: PUSH
9903: EMPTY
9904: LIST
9905: LIST
9906: PUSH
9907: LD_INT 14
9909: PUSH
9910: LD_INT 25
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: PUSH
9917: EMPTY
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: ST_TO_ADDR
// level := tick div 60 60$00 ;
9924: LD_ADDR_VAR 0 4
9928: PUSH
9929: LD_OWVAR 1
9933: PUSH
9934: LD_INT 126000
9936: DIV
9937: ST_TO_ADDR
// for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] + level do
9938: LD_ADDR_VAR 0 1
9942: PUSH
9943: DOUBLE
9944: LD_INT 1
9946: DEC
9947: ST_TO_ADDR
9948: LD_INT 3
9950: PUSH
9951: LD_INT 3
9953: PUSH
9954: LD_INT 4
9956: PUSH
9957: LD_INT 4
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: PUSH
9966: LD_OWVAR 67
9970: ARRAY
9971: PUSH
9972: LD_VAR 0 4
9976: PLUS
9977: PUSH
9978: FOR_TO
9979: IFFALSE 10052
// begin part := parts [ rand ( 1 , parts ) ] ;
9981: LD_ADDR_VAR 0 3
9985: PUSH
9986: LD_VAR 0 2
9990: PUSH
9991: LD_INT 1
9993: PPUSH
9994: LD_VAR 0 2
9998: PPUSH
9999: CALL_OW 12
10003: ARRAY
10004: ST_TO_ADDR
// legConstructList := Join ( legConstructList , [ part [ 1 ] , engine_combustion , control_remote , part [ 2 ] ] ) end ;
10005: LD_ADDR_EXP 40
10009: PUSH
10010: LD_EXP 40
10014: PPUSH
10015: LD_VAR 0 3
10019: PUSH
10020: LD_INT 1
10022: ARRAY
10023: PUSH
10024: LD_INT 1
10026: PUSH
10027: LD_INT 2
10029: PUSH
10030: LD_VAR 0 3
10034: PUSH
10035: LD_INT 2
10037: ARRAY
10038: PUSH
10039: EMPTY
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: PPUSH
10045: CALL 58358 0 2
10049: ST_TO_ADDR
10050: GO 9978
10052: POP
10053: POP
// end ;
10054: PPOPN 4
10056: END
// every 20 20$00 trigger not legionDestroyed and tick <= 80 80$00 do
10057: LD_EXP 12
10061: NOT
10062: PUSH
10063: LD_OWVAR 1
10067: PUSH
10068: LD_INT 168000
10070: LESSEQUAL
10071: AND
10072: IFFALSE 10111
10074: GO 10076
10076: DISABLE
// begin enable ;
10077: ENABLE
// legConstructList := Join ( legConstructList , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] ) ;
10078: LD_ADDR_EXP 40
10082: PUSH
10083: LD_EXP 40
10087: PPUSH
10088: LD_INT 14
10090: PUSH
10091: LD_INT 1
10093: PUSH
10094: LD_INT 1
10096: PUSH
10097: LD_INT 27
10099: PUSH
10100: EMPTY
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: PPUSH
10106: CALL 58358 0 2
10110: ST_TO_ADDR
// end ;
10111: END
// every 0 0$1 trigger legTanks and spotByLegion and spotArabianBase do var i , mech , enemy ;
10112: LD_EXP 43
10116: PUSH
10117: LD_EXP 9
10121: AND
10122: PUSH
10123: LD_EXP 7
10127: AND
10128: IFFALSE 10721
10130: GO 10132
10132: DISABLE
10133: LD_INT 0
10135: PPUSH
10136: PPUSH
10137: PPUSH
// begin enable ;
10138: ENABLE
// if not legTanks then
10139: LD_EXP 43
10143: NOT
10144: IFFALSE 10148
// exit ;
10146: GO 10721
// for i in legTanks do
10148: LD_ADDR_VAR 0 1
10152: PUSH
10153: LD_EXP 43
10157: PUSH
10158: FOR_IN
10159: IFFALSE 10719
// begin if not IsOk ( i ) or GetSide ( i ) <> 8 then
10161: LD_VAR 0 1
10165: PPUSH
10166: CALL_OW 302
10170: NOT
10171: PUSH
10172: LD_VAR 0 1
10176: PPUSH
10177: CALL_OW 255
10181: PUSH
10182: LD_INT 8
10184: NONEQUAL
10185: OR
10186: IFFALSE 10206
// begin legTanks := legTanks diff i ;
10188: LD_ADDR_EXP 43
10192: PUSH
10193: LD_EXP 43
10197: PUSH
10198: LD_VAR 0 1
10202: DIFF
10203: ST_TO_ADDR
// continue ;
10204: GO 10158
// end ; if not GetTag ( i ) and GetControl ( i ) = control_remote then
10206: LD_VAR 0 1
10210: PPUSH
10211: CALL_OW 110
10215: NOT
10216: PUSH
10217: LD_VAR 0 1
10221: PPUSH
10222: CALL_OW 263
10226: PUSH
10227: LD_INT 2
10229: EQUAL
10230: AND
10231: IFFALSE 10245
// SetTag ( i , tAttack ) ;
10233: LD_VAR 0 1
10237: PPUSH
10238: LD_INT 10
10240: PPUSH
10241: CALL_OW 109
// if not GetTag ( i ) or GetTag ( i ) = 0 then
10245: LD_VAR 0 1
10249: PPUSH
10250: CALL_OW 110
10254: NOT
10255: PUSH
10256: LD_VAR 0 1
10260: PPUSH
10261: CALL_OW 110
10265: PUSH
10266: LD_INT 0
10268: EQUAL
10269: OR
10270: IFFALSE 10400
// begin if GetFuel ( i ) < 50 and GetEngine ( i ) = engine_combustion then
10272: LD_VAR 0 1
10276: PPUSH
10277: CALL_OW 261
10281: PUSH
10282: LD_INT 50
10284: LESS
10285: PUSH
10286: LD_VAR 0 1
10290: PPUSH
10291: CALL_OW 262
10295: PUSH
10296: LD_INT 1
10298: EQUAL
10299: AND
10300: IFFALSE 10359
// begin ComMoveXY ( i , 189 , 19 ) ;
10302: LD_VAR 0 1
10306: PPUSH
10307: LD_INT 189
10309: PPUSH
10310: LD_INT 19
10312: PPUSH
10313: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10317: LD_INT 35
10319: PPUSH
10320: CALL_OW 67
// until GetDistUnitXY ( i , 189 , 19 ) < 4 ;
10324: LD_VAR 0 1
10328: PPUSH
10329: LD_INT 189
10331: PPUSH
10332: LD_INT 19
10334: PPUSH
10335: CALL_OW 297
10339: PUSH
10340: LD_INT 4
10342: LESS
10343: IFFALSE 10317
// SetFuel ( i , 100 ) ;
10345: LD_VAR 0 1
10349: PPUSH
10350: LD_INT 100
10352: PPUSH
10353: CALL_OW 240
// end else
10357: GO 10400
// if not IsInArea ( i , legParkingArea ) then
10359: LD_VAR 0 1
10363: PPUSH
10364: LD_INT 15
10366: PPUSH
10367: CALL_OW 308
10371: NOT
10372: IFFALSE 10388
// ComMoveToArea ( i , legParkingArea ) else
10374: LD_VAR 0 1
10378: PPUSH
10379: LD_INT 15
10381: PPUSH
10382: CALL_OW 113
10386: GO 10400
// SetTag ( i , tParking ) ;
10388: LD_VAR 0 1
10392: PPUSH
10393: LD_INT 9
10395: PPUSH
10396: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
10400: LD_VAR 0 1
10404: PPUSH
10405: CALL_OW 110
10409: PUSH
10410: LD_INT 9
10412: EQUAL
10413: IFFALSE 10543
// begin if GetLives ( i ) < 650 then
10415: LD_VAR 0 1
10419: PPUSH
10420: CALL_OW 256
10424: PUSH
10425: LD_INT 650
10427: LESS
10428: IFFALSE 10520
// begin if not IsDrivenBy ( i ) then
10430: LD_VAR 0 1
10434: PPUSH
10435: CALL_OW 311
10439: NOT
10440: IFFALSE 10444
// continue ;
10442: GO 10158
// mech := IsDrivenBy ( i ) ;
10444: LD_ADDR_VAR 0 2
10448: PUSH
10449: LD_VAR 0 1
10453: PPUSH
10454: CALL_OW 311
10458: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
10459: LD_VAR 0 2
10463: PPUSH
10464: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
10468: LD_VAR 0 2
10472: PPUSH
10473: LD_VAR 0 1
10477: PPUSH
10478: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
10482: LD_INT 35
10484: PPUSH
10485: CALL_OW 67
// until GetLives ( i ) = 1000 ;
10489: LD_VAR 0 1
10493: PPUSH
10494: CALL_OW 256
10498: PUSH
10499: LD_INT 1000
10501: EQUAL
10502: IFFALSE 10482
// ComEnterUnit ( mech , i ) ;
10504: LD_VAR 0 2
10508: PPUSH
10509: LD_VAR 0 1
10513: PPUSH
10514: CALL_OW 120
// end else
10518: GO 10543
// if IsDrivenBy ( i ) then
10520: LD_VAR 0 1
10524: PPUSH
10525: CALL_OW 311
10529: IFFALSE 10543
// SetTag ( i , tAttack ) ;
10531: LD_VAR 0 1
10535: PPUSH
10536: LD_INT 10
10538: PPUSH
10539: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
10543: LD_VAR 0 1
10547: PPUSH
10548: CALL_OW 110
10552: PUSH
10553: LD_INT 10
10555: EQUAL
10556: IFFALSE 10717
// begin enemy := FilterUnitsInArea ( legBaseArea , [ f_enemy , 8 ] ) ;
10558: LD_ADDR_VAR 0 3
10562: PUSH
10563: LD_INT 2
10565: PPUSH
10566: LD_INT 81
10568: PUSH
10569: LD_INT 8
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: PPUSH
10576: CALL_OW 70
10580: ST_TO_ADDR
// if GetLives ( i ) < 650 and GetControl ( i ) = control_manual then
10581: LD_VAR 0 1
10585: PPUSH
10586: CALL_OW 256
10590: PUSH
10591: LD_INT 650
10593: LESS
10594: PUSH
10595: LD_VAR 0 1
10599: PPUSH
10600: CALL_OW 263
10604: PUSH
10605: LD_INT 1
10607: EQUAL
10608: AND
10609: IFFALSE 10634
// begin ComStop ( i ) ;
10611: LD_VAR 0 1
10615: PPUSH
10616: CALL_OW 141
// SetTag ( i , 0 ) ;
10620: LD_VAR 0 1
10624: PPUSH
10625: LD_INT 0
10627: PPUSH
10628: CALL_OW 109
// continue ;
10632: GO 10158
// end ; if enemy then
10634: LD_VAR 0 3
10638: IFFALSE 10678
// begin if not HasTask ( i ) then
10640: LD_VAR 0 1
10644: PPUSH
10645: CALL_OW 314
10649: NOT
10650: IFFALSE 10676
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10652: LD_VAR 0 1
10656: PPUSH
10657: LD_VAR 0 3
10661: PPUSH
10662: LD_VAR 0 1
10666: PPUSH
10667: CALL_OW 74
10671: PPUSH
10672: CALL 62576 0 2
// end else
10676: GO 10717
// if legTanks then
10678: LD_EXP 43
10682: IFFALSE 10717
// AgressiveMove ( i , [ [ 200 , 48 ] , [ 210 , 74 ] ] ) ;
10684: LD_VAR 0 1
10688: PPUSH
10689: LD_INT 200
10691: PUSH
10692: LD_INT 48
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: PUSH
10699: LD_INT 210
10701: PUSH
10702: LD_INT 74
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: PPUSH
10713: CALL 60962 0 2
// end ; end ;
10717: GO 10158
10719: POP
10720: POP
// end ;
10721: PPOPN 3
10723: END
// every 3 3$00 trigger not legionDestroyed and Count ( legRTanks ) and spotByLegion and spotArabianBase do var i , tmp , tmp2 ;
10724: LD_EXP 12
10728: NOT
10729: PUSH
10730: LD_EXP 44
10734: PPUSH
10735: CALL 22769 0 1
10739: AND
10740: PUSH
10741: LD_EXP 9
10745: AND
10746: PUSH
10747: LD_EXP 7
10751: AND
10752: IFFALSE 10950
10754: GO 10756
10756: DISABLE
10757: LD_INT 0
10759: PPUSH
10760: PPUSH
10761: PPUSH
// begin enable ;
10762: ENABLE
// tmp := UnitFilter ( legRTanks , [ [ f_linked ] , [ f_ok ] ] ) ;
10763: LD_ADDR_VAR 0 2
10767: PUSH
10768: LD_EXP 44
10772: PPUSH
10773: LD_INT 61
10775: PUSH
10776: EMPTY
10777: LIST
10778: PUSH
10779: LD_INT 50
10781: PUSH
10782: EMPTY
10783: LIST
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: PPUSH
10789: CALL_OW 72
10793: ST_TO_ADDR
// legRTanks := legRTanks diff tmp ;
10794: LD_ADDR_EXP 44
10798: PUSH
10799: LD_EXP 44
10803: PUSH
10804: LD_VAR 0 2
10808: DIFF
10809: ST_TO_ADDR
// if not tmp then
10810: LD_VAR 0 2
10814: NOT
10815: IFFALSE 10819
// exit ;
10817: GO 10950
// tmp2 := UnitFilter ( tmp , [ f_weapon , ar_double_machine_gun ] ) ;
10819: LD_ADDR_VAR 0 3
10823: PUSH
10824: LD_VAR 0 2
10828: PPUSH
10829: LD_INT 34
10831: PUSH
10832: LD_INT 24
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: PPUSH
10839: CALL_OW 72
10843: ST_TO_ADDR
// if tmp2 then
10844: LD_VAR 0 3
10848: IFFALSE 10865
// ComMoveXY ( tmp2 , 241 , 99 ) ;
10850: LD_VAR 0 3
10854: PPUSH
10855: LD_INT 241
10857: PPUSH
10858: LD_INT 99
10860: PPUSH
10861: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10865: LD_INT 35
10867: PPUSH
10868: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
10872: LD_ADDR_VAR 0 2
10876: PUSH
10877: LD_VAR 0 2
10881: PPUSH
10882: LD_INT 50
10884: PUSH
10885: EMPTY
10886: LIST
10887: PPUSH
10888: CALL_OW 72
10892: ST_TO_ADDR
// for i in tmp do
10893: LD_ADDR_VAR 0 1
10897: PUSH
10898: LD_VAR 0 2
10902: PUSH
10903: FOR_IN
10904: IFFALSE 10941
// AgressiveMove ( i , [ [ 200 , 48 ] , [ 210 , 74 ] ] ) ;
10906: LD_VAR 0 1
10910: PPUSH
10911: LD_INT 200
10913: PUSH
10914: LD_INT 48
10916: PUSH
10917: EMPTY
10918: LIST
10919: LIST
10920: PUSH
10921: LD_INT 210
10923: PUSH
10924: LD_INT 74
10926: PUSH
10927: EMPTY
10928: LIST
10929: LIST
10930: PUSH
10931: EMPTY
10932: LIST
10933: LIST
10934: PPUSH
10935: CALL 60962 0 2
10939: GO 10903
10941: POP
10942: POP
// until not tmp ;
10943: LD_VAR 0 2
10947: NOT
10948: IFFALSE 10865
// end ;
10950: PPOPN 3
10952: END
// every 35 35$0 trigger not spotByLegion do var i , un , veh , tmp ;
10953: LD_EXP 9
10957: NOT
10958: IFFALSE 11219
10960: GO 10962
10962: DISABLE
10963: LD_INT 0
10965: PPUSH
10966: PPUSH
10967: PPUSH
10968: PPUSH
// begin uc_side := 8 ;
10969: LD_ADDR_OWVAR 20
10973: PUSH
10974: LD_INT 8
10976: ST_TO_ADDR
// uc_nation := nation_arabian ;
10977: LD_ADDR_OWVAR 21
10981: PUSH
10982: LD_INT 2
10984: ST_TO_ADDR
// for i := 1 to 3 do
10985: LD_ADDR_VAR 0 1
10989: PUSH
10990: DOUBLE
10991: LD_INT 1
10993: DEC
10994: ST_TO_ADDR
10995: LD_INT 3
10997: PUSH
10998: FOR_TO
10999: IFFALSE 11134
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 100 ) ;
11001: LD_INT 14
11003: PPUSH
11004: LD_INT 3
11006: PPUSH
11007: LD_INT 1
11009: PPUSH
11010: LD_INT 27
11012: PUSH
11013: LD_INT 25
11015: PUSH
11016: EMPTY
11017: LIST
11018: LIST
11019: PUSH
11020: LD_VAR 0 1
11024: PUSH
11025: LD_INT 2
11027: MOD
11028: PUSH
11029: LD_INT 1
11031: PLUS
11032: ARRAY
11033: PPUSH
11034: LD_INT 100
11036: PPUSH
11037: CALL 25507 0 5
// veh := CreateVehicle ;
11041: LD_ADDR_VAR 0 3
11045: PUSH
11046: CALL_OW 45
11050: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
11051: LD_VAR 0 3
11055: PPUSH
11056: LD_INT 5
11058: PPUSH
11059: CALL_OW 233
// PlaceUnitArea ( veh , southSpawnArea , false ) ;
11063: LD_VAR 0 3
11067: PPUSH
11068: LD_INT 44
11070: PPUSH
11071: LD_INT 0
11073: PPUSH
11074: CALL_OW 49
// PrepareMechanic ( false , 6 ) ;
11078: LD_INT 0
11080: PPUSH
11081: LD_INT 6
11083: PPUSH
11084: CALL_OW 383
// un := CreateHuman ;
11088: LD_ADDR_VAR 0 2
11092: PUSH
11093: CALL_OW 44
11097: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
11098: LD_VAR 0 2
11102: PPUSH
11103: LD_VAR 0 3
11107: PPUSH
11108: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
11112: LD_ADDR_VAR 0 4
11116: PUSH
11117: LD_VAR 0 4
11121: PPUSH
11122: LD_VAR 0 3
11126: PPUSH
11127: CALL 58358 0 2
11131: ST_TO_ADDR
// end ;
11132: GO 10998
11134: POP
11135: POP
// ComMoveXY ( tmp , 219 , 110 ) ;
11136: LD_VAR 0 4
11140: PPUSH
11141: LD_INT 219
11143: PPUSH
11144: LD_INT 110
11146: PPUSH
11147: CALL_OW 111
// AddComMoveXY ( tmp , 220 , 94 ) ;
11151: LD_VAR 0 4
11155: PPUSH
11156: LD_INT 220
11158: PPUSH
11159: LD_INT 94
11161: PPUSH
11162: CALL_OW 171
// AddComMoveXY ( tmp , 209 , 66 ) ;
11166: LD_VAR 0 4
11170: PPUSH
11171: LD_INT 209
11173: PPUSH
11174: LD_INT 66
11176: PPUSH
11177: CALL_OW 171
// AddComMoveXY ( tmp , 189 , 22 ) ;
11181: LD_VAR 0 4
11185: PPUSH
11186: LD_INT 189
11188: PPUSH
11189: LD_INT 22
11191: PPUSH
11192: CALL_OW 171
// wait ( 0 0$10 ) ;
11196: LD_INT 350
11198: PPUSH
11199: CALL_OW 67
// legTanks := legTanks union tmp ;
11203: LD_ADDR_EXP 43
11207: PUSH
11208: LD_EXP 43
11212: PUSH
11213: LD_VAR 0 4
11217: UNION
11218: ST_TO_ADDR
// end ; end_of_file
11219: PPOPN 4
11221: END
// export function CreateNature ; var i , areas , amount ; begin
11222: LD_INT 0
11224: PPUSH
11225: PPUSH
11226: PPUSH
11227: PPUSH
// PrepareTiger ( 0 ) ;
11228: LD_INT 0
11230: PPUSH
11231: CALL 54734 0 1
// for i := 1 to [ 10 , 8 , 5 , 5 ] [ Difficulty ] do
11235: LD_ADDR_VAR 0 2
11239: PUSH
11240: DOUBLE
11241: LD_INT 1
11243: DEC
11244: ST_TO_ADDR
11245: LD_INT 10
11247: PUSH
11248: LD_INT 8
11250: PUSH
11251: LD_INT 5
11253: PUSH
11254: LD_INT 5
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: PUSH
11263: LD_OWVAR 67
11267: ARRAY
11268: PUSH
11269: FOR_TO
11270: IFFALSE 11289
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
11272: CALL_OW 44
11276: PPUSH
11277: LD_INT 7
11279: PPUSH
11280: LD_INT 0
11282: PPUSH
11283: CALL_OW 49
11287: GO 11269
11289: POP
11290: POP
// PrepareBird ;
11291: CALL 54915 0 0
// for i := 1 to 3 do
11295: LD_ADDR_VAR 0 2
11299: PUSH
11300: DOUBLE
11301: LD_INT 1
11303: DEC
11304: ST_TO_ADDR
11305: LD_INT 3
11307: PUSH
11308: FOR_TO
11309: IFFALSE 11328
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
11311: CALL_OW 44
11315: PPUSH
11316: LD_INT 7
11318: PPUSH
11319: LD_INT 0
11321: PPUSH
11322: CALL_OW 49
11326: GO 11308
11328: POP
11329: POP
// PrepareHorse ;
11330: CALL 54955 0 0
// for i := 1 to 3 do
11334: LD_ADDR_VAR 0 2
11338: PUSH
11339: DOUBLE
11340: LD_INT 1
11342: DEC
11343: ST_TO_ADDR
11344: LD_INT 3
11346: PUSH
11347: FOR_TO
11348: IFFALSE 11367
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
11350: CALL_OW 44
11354: PPUSH
11355: LD_INT 7
11357: PPUSH
11358: LD_INT 0
11360: PPUSH
11361: CALL_OW 49
11365: GO 11347
11367: POP
11368: POP
// PrepareFrog ;
11369: CALL 54835 0 0
// for i := 1 to 3 do
11373: LD_ADDR_VAR 0 2
11377: PUSH
11378: DOUBLE
11379: LD_INT 1
11381: DEC
11382: ST_TO_ADDR
11383: LD_INT 3
11385: PUSH
11386: FOR_TO
11387: IFFALSE 11406
// PlaceUnitArea ( CreateHuman , frogArea , false ) ;
11389: CALL_OW 44
11393: PPUSH
11394: LD_INT 8
11396: PPUSH
11397: LD_INT 0
11399: PPUSH
11400: CALL_OW 49
11404: GO 11386
11406: POP
11407: POP
// amount := [ 3 , 2 , 2 , 1 ] [ Difficulty ] ;
11408: LD_ADDR_VAR 0 4
11412: PUSH
11413: LD_INT 3
11415: PUSH
11416: LD_INT 2
11418: PUSH
11419: LD_INT 2
11421: PUSH
11422: LD_INT 1
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: PUSH
11431: LD_OWVAR 67
11435: ARRAY
11436: ST_TO_ADDR
// areas := [ mastodont1Area , mastodont2Area , mastodont3Area , mastodont4Area ] ;
11437: LD_ADDR_VAR 0 3
11441: PUSH
11442: LD_INT 18
11444: PUSH
11445: LD_INT 19
11447: PUSH
11448: LD_INT 20
11450: PUSH
11451: LD_INT 21
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: ST_TO_ADDR
// PrepareMastodont ;
11460: CALL 54995 0 0
// for i := 1 to amount do
11464: LD_ADDR_VAR 0 2
11468: PUSH
11469: DOUBLE
11470: LD_INT 1
11472: DEC
11473: ST_TO_ADDR
11474: LD_VAR 0 4
11478: PUSH
11479: FOR_TO
11480: IFFALSE 11517
// PlaceUnitArea ( CreateVehicle , areas [ ( i - 1 ) + Difficulty ] , false ) ;
11482: CALL_OW 45
11486: PPUSH
11487: LD_VAR 0 3
11491: PUSH
11492: LD_VAR 0 2
11496: PUSH
11497: LD_INT 1
11499: MINUS
11500: PUSH
11501: LD_OWVAR 67
11505: PLUS
11506: ARRAY
11507: PPUSH
11508: LD_INT 0
11510: PPUSH
11511: CALL_OW 49
11515: GO 11479
11517: POP
11518: POP
// PrepareApeman ( 0 ) ;
11519: LD_INT 0
11521: PPUSH
11522: CALL 54626 0 1
// hc_skills := [ 4 , 2 , 0 , 0 ] ;
11526: LD_ADDR_OWVAR 31
11530: PUSH
11531: LD_INT 4
11533: PUSH
11534: LD_INT 2
11536: PUSH
11537: LD_INT 0
11539: PUSH
11540: LD_INT 0
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: ST_TO_ADDR
// for i := 1 to [ 9 , 7 , 6 , 5 ] [ Difficulty ] do
11549: LD_ADDR_VAR 0 2
11553: PUSH
11554: DOUBLE
11555: LD_INT 1
11557: DEC
11558: ST_TO_ADDR
11559: LD_INT 9
11561: PUSH
11562: LD_INT 7
11564: PUSH
11565: LD_INT 6
11567: PUSH
11568: LD_INT 5
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: PUSH
11577: LD_OWVAR 67
11581: ARRAY
11582: PUSH
11583: FOR_TO
11584: IFFALSE 11603
// PlaceUnitArea ( CreateHuman , apeArea , false ) ;
11586: CALL_OW 44
11590: PPUSH
11591: LD_INT 6
11593: PPUSH
11594: LD_INT 0
11596: PPUSH
11597: CALL_OW 49
11601: GO 11583
11603: POP
11604: POP
// for i := 1 to [ 8 , 7 , 6 , 5 ] [ Difficulty ] do
11605: LD_ADDR_VAR 0 2
11609: PUSH
11610: DOUBLE
11611: LD_INT 1
11613: DEC
11614: ST_TO_ADDR
11615: LD_INT 8
11617: PUSH
11618: LD_INT 7
11620: PUSH
11621: LD_INT 6
11623: PUSH
11624: LD_INT 5
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: PUSH
11633: LD_OWVAR 67
11637: ARRAY
11638: PUSH
11639: FOR_TO
11640: IFFALSE 11665
// PlaceUnitXYR ( CreateHuman , 274 , 133 , 8 , false ) ;
11642: CALL_OW 44
11646: PPUSH
11647: LD_INT 274
11649: PPUSH
11650: LD_INT 133
11652: PPUSH
11653: LD_INT 8
11655: PPUSH
11656: LD_INT 0
11658: PPUSH
11659: CALL_OW 50
11663: GO 11639
11665: POP
11666: POP
// for i := 1 to [ 6 , 5 , 4 , 4 ] [ Difficulty ] do
11667: LD_ADDR_VAR 0 2
11671: PUSH
11672: DOUBLE
11673: LD_INT 1
11675: DEC
11676: ST_TO_ADDR
11677: LD_INT 6
11679: PUSH
11680: LD_INT 5
11682: PUSH
11683: LD_INT 4
11685: PUSH
11686: LD_INT 4
11688: PUSH
11689: EMPTY
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: PUSH
11695: LD_OWVAR 67
11699: ARRAY
11700: PUSH
11701: FOR_TO
11702: IFFALSE 11727
// PlaceUnitXYR ( CreateHuman , 208 , 142 , 8 , false ) ;
11704: CALL_OW 44
11708: PPUSH
11709: LD_INT 208
11711: PPUSH
11712: LD_INT 142
11714: PPUSH
11715: LD_INT 8
11717: PPUSH
11718: LD_INT 0
11720: PPUSH
11721: CALL_OW 50
11725: GO 11701
11727: POP
11728: POP
// end ;
11729: LD_VAR 0 1
11733: RET
// export function AreInArea ( units , area ) ; var i ; begin
11734: LD_INT 0
11736: PPUSH
11737: PPUSH
// result := false ;
11738: LD_ADDR_VAR 0 3
11742: PUSH
11743: LD_INT 0
11745: ST_TO_ADDR
// if not units then
11746: LD_VAR 0 1
11750: NOT
11751: IFFALSE 11755
// exit ;
11753: GO 11821
// for i in units do
11755: LD_ADDR_VAR 0 4
11759: PUSH
11760: LD_VAR 0 1
11764: PUSH
11765: FOR_IN
11766: IFFALSE 11819
// if IsInArea ( i , area ) or IsInArea ( IsInUnit ( i ) , area ) then
11768: LD_VAR 0 4
11772: PPUSH
11773: LD_VAR 0 2
11777: PPUSH
11778: CALL_OW 308
11782: PUSH
11783: LD_VAR 0 4
11787: PPUSH
11788: CALL_OW 310
11792: PPUSH
11793: LD_VAR 0 2
11797: PPUSH
11798: CALL_OW 308
11802: OR
11803: IFFALSE 11817
// begin result := true ;
11805: LD_ADDR_VAR 0 3
11809: PUSH
11810: LD_INT 1
11812: ST_TO_ADDR
// exit ;
11813: POP
11814: POP
11815: GO 11821
// end ;
11817: GO 11765
11819: POP
11820: POP
// end ; end_of_file
11821: LD_VAR 0 3
11825: RET
// export function Action ; var i , mech , veh , amTroops ; begin
11826: LD_INT 0
11828: PPUSH
11829: PPUSH
11830: PPUSH
11831: PPUSH
11832: PPUSH
// SaveForQuickRestart ;
11833: CALL_OW 22
// InGameOn ;
11837: CALL_OW 8
// CenterNowOnXY ( 84 , 28 ) ;
11841: LD_INT 84
11843: PPUSH
11844: LD_INT 28
11846: PPUSH
11847: CALL_OW 86
// RevealFogArea ( 2 , heikeVisibleRoadArea ) ;
11851: LD_INT 2
11853: PPUSH
11854: LD_INT 9
11856: PPUSH
11857: CALL_OW 332
// ComMoveXY ( Heike , 90 , 30 ) ;
11861: LD_EXP 23
11865: PPUSH
11866: LD_INT 90
11868: PPUSH
11869: LD_INT 30
11871: PPUSH
11872: CALL_OW 111
// uc_side := 1 ;
11876: LD_ADDR_OWVAR 20
11880: PUSH
11881: LD_INT 1
11883: ST_TO_ADDR
// uc_nation := nation_american ;
11884: LD_ADDR_OWVAR 21
11888: PUSH
11889: LD_INT 1
11891: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 66 ) ;
11892: LD_INT 3
11894: PPUSH
11895: LD_INT 1
11897: PPUSH
11898: LD_INT 1
11900: PPUSH
11901: LD_INT 9
11903: PPUSH
11904: LD_INT 66
11906: PPUSH
11907: CALL 25507 0 5
// veh := CreateVehicle ;
11911: LD_ADDR_VAR 0 4
11915: PUSH
11916: CALL_OW 45
11920: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
11921: LD_VAR 0 4
11925: PPUSH
11926: LD_INT 1
11928: PPUSH
11929: CALL_OW 233
// PlaceUnitXY ( veh , 80 , 27 , false ) ;
11933: LD_VAR 0 4
11937: PPUSH
11938: LD_INT 80
11940: PPUSH
11941: LD_INT 27
11943: PPUSH
11944: LD_INT 0
11946: PPUSH
11947: CALL_OW 48
// PrepareMechanic ( sex_male , 8 ) ;
11951: LD_INT 1
11953: PPUSH
11954: LD_INT 8
11956: PPUSH
11957: CALL_OW 383
// mech := CreateHuman ;
11961: LD_ADDR_VAR 0 3
11965: PUSH
11966: CALL_OW 44
11970: ST_TO_ADDR
// PlaceHumanInUnit ( mech , veh ) ;
11971: LD_VAR 0 3
11975: PPUSH
11976: LD_VAR 0 4
11980: PPUSH
11981: CALL_OW 52
// repeat wait ( 0 0$1 ) ;
11985: LD_INT 35
11987: PPUSH
11988: CALL_OW 67
// until HexInfo ( 90 , 30 ) ;
11992: LD_INT 90
11994: PPUSH
11995: LD_INT 30
11997: PPUSH
11998: CALL_OW 428
12002: IFFALSE 11985
// PlaceSeeing ( 80 , 27 , 2 , - 6 ) ;
12004: LD_INT 80
12006: PPUSH
12007: LD_INT 27
12009: PPUSH
12010: LD_INT 2
12012: PPUSH
12013: LD_INT 6
12015: NEG
12016: PPUSH
12017: CALL_OW 330
// CenterNowOnXY ( 80 , 27 ) ;
12021: LD_INT 80
12023: PPUSH
12024: LD_INT 27
12026: PPUSH
12027: CALL_OW 86
// DialogueOn ;
12031: CALL_OW 6
// Say ( Heike , DH-Start-1 ) ;
12035: LD_EXP 23
12039: PPUSH
12040: LD_STRING DH-Start-1
12042: PPUSH
12043: CALL_OW 88
// DialogueOff ;
12047: CALL_OW 7
// ComAttackUnit ( Heike , veh ) ;
12051: LD_EXP 23
12055: PPUSH
12056: LD_VAR 0 4
12060: PPUSH
12061: CALL_OW 115
// wait ( 0 0$1 ) ;
12065: LD_INT 35
12067: PPUSH
12068: CALL_OW 67
// SetLives ( IsInUnit ( Heike ) , 200 ) ;
12072: LD_EXP 23
12076: PPUSH
12077: CALL_OW 310
12081: PPUSH
12082: LD_INT 200
12084: PPUSH
12085: CALL_OW 234
// wait ( 0 0$0.3 ) ;
12089: LD_INT 10
12091: PPUSH
12092: CALL_OW 67
// DialogueOn ;
12096: CALL_OW 6
// Say ( Heike , DH-Start-2 ) ;
12100: LD_EXP 23
12104: PPUSH
12105: LD_STRING DH-Start-2
12107: PPUSH
12108: CALL_OW 88
// DialogueOff ;
12112: CALL_OW 7
// ComAttackUnit ( Heike , veh ) ;
12116: LD_EXP 23
12120: PPUSH
12121: LD_VAR 0 4
12125: PPUSH
12126: CALL_OW 115
// wait ( 0 0$0.2 ) ;
12130: LD_INT 7
12132: PPUSH
12133: CALL_OW 67
// ComCrawl ( Heike ) ;
12137: LD_EXP 23
12141: PPUSH
12142: CALL_OW 137
// wait ( 0 0$3 ) ;
12146: LD_INT 105
12148: PPUSH
12149: CALL_OW 67
// PlaceUnitXY ( omarVehicle , 82 , 43 , false ) ;
12153: LD_EXP 26
12157: PPUSH
12158: LD_INT 82
12160: PPUSH
12161: LD_INT 43
12163: PPUSH
12164: LD_INT 0
12166: PPUSH
12167: CALL_OW 48
// PlaceHumanInUnit ( Omar , omarVehicle ) ;
12171: LD_EXP 24
12175: PPUSH
12176: LD_EXP 26
12180: PPUSH
12181: CALL_OW 52
// ComMoveXY ( Omar , 79 , 32 ) ;
12185: LD_EXP 24
12189: PPUSH
12190: LD_INT 79
12192: PPUSH
12193: LD_INT 32
12195: PPUSH
12196: CALL_OW 111
// wait ( 0 0$1 ) ;
12200: LD_INT 35
12202: PPUSH
12203: CALL_OW 67
// PlaceSeeing ( 79 , 32 , 2 , - 8 ) ;
12207: LD_INT 79
12209: PPUSH
12210: LD_INT 32
12212: PPUSH
12213: LD_INT 2
12215: PPUSH
12216: LD_INT 8
12218: NEG
12219: PPUSH
12220: CALL_OW 330
// wait ( 0 0$3 ) ;
12224: LD_INT 105
12226: PPUSH
12227: CALL_OW 67
// SetLives ( veh , 200 ) ;
12231: LD_VAR 0 4
12235: PPUSH
12236: LD_INT 200
12238: PPUSH
12239: CALL_OW 234
// wait ( 0 0$1 ) ;
12243: LD_INT 35
12245: PPUSH
12246: CALL_OW 67
// SetLives ( mech , 10 ) ;
12250: LD_VAR 0 3
12254: PPUSH
12255: LD_INT 10
12257: PPUSH
12258: CALL_OW 234
// wait ( 0 0$2 ) ;
12262: LD_INT 70
12264: PPUSH
12265: CALL_OW 67
// ComWalk ( Heike ) ;
12269: LD_EXP 23
12273: PPUSH
12274: CALL_OW 138
// wait ( 1 ) ;
12278: LD_INT 1
12280: PPUSH
12281: CALL_OW 67
// ComMoveXY ( Heike , 81 , 25 ) ;
12285: LD_EXP 23
12289: PPUSH
12290: LD_INT 81
12292: PPUSH
12293: LD_INT 25
12295: PPUSH
12296: CALL_OW 111
// AddComMoveXY ( Heike , 72 , 25 ) ;
12300: LD_EXP 23
12304: PPUSH
12305: LD_INT 72
12307: PPUSH
12308: LD_INT 25
12310: PPUSH
12311: CALL_OW 171
// wait ( 0 0$3 ) ;
12315: LD_INT 105
12317: PPUSH
12318: CALL_OW 67
// ComExitVehicle ( Omar ) ;
12322: LD_EXP 24
12326: PPUSH
12327: CALL_OW 121
// wait ( 1 ) ;
12331: LD_INT 1
12333: PPUSH
12334: CALL_OW 67
// ComMoveXY ( Omar , 77 , 28 ) ;
12338: LD_EXP 24
12342: PPUSH
12343: LD_INT 77
12345: PPUSH
12346: LD_INT 28
12348: PPUSH
12349: CALL_OW 111
// AddComTurnUnit ( Omar , Heike ) ;
12353: LD_EXP 24
12357: PPUSH
12358: LD_EXP 23
12362: PPUSH
12363: CALL_OW 179
// Say ( Omar , DO-Start-3 ) ;
12367: LD_EXP 24
12371: PPUSH
12372: LD_STRING DO-Start-3
12374: PPUSH
12375: CALL_OW 88
// repeat wait ( 3 ) ;
12379: LD_INT 3
12381: PPUSH
12382: CALL_OW 67
// until IsAt ( Heike , 72 , 25 ) ;
12386: LD_EXP 23
12390: PPUSH
12391: LD_INT 72
12393: PPUSH
12394: LD_INT 25
12396: PPUSH
12397: CALL_OW 307
12401: IFFALSE 12379
// ComHold ( Heike ) ;
12403: LD_EXP 23
12407: PPUSH
12408: CALL_OW 140
// ComTurnUnit ( Omar , Heike ) ;
12412: LD_EXP 24
12416: PPUSH
12417: LD_EXP 23
12421: PPUSH
12422: CALL_OW 119
// ComMoveUnit ( Heike , Omar ) ;
12426: LD_EXP 23
12430: PPUSH
12431: LD_EXP 24
12435: PPUSH
12436: CALL_OW 112
// wait ( 0 0$1 ) ;
12440: LD_INT 35
12442: PPUSH
12443: CALL_OW 67
// ComTurnUnit ( Heike , Omar ) ;
12447: LD_EXP 23
12451: PPUSH
12452: LD_EXP 24
12456: PPUSH
12457: CALL_OW 119
// Say ( Heike , DH-Start-4 ) ;
12461: LD_EXP 23
12465: PPUSH
12466: LD_STRING DH-Start-4
12468: PPUSH
12469: CALL_OW 88
// Say ( Omar , DO-Start-5 ) ;
12473: LD_EXP 24
12477: PPUSH
12478: LD_STRING DO-Start-5
12480: PPUSH
12481: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
12485: LD_EXP 23
12489: PPUSH
12490: LD_STRING DH-Start-6
12492: PPUSH
12493: CALL_OW 88
// Say ( Omar , DO-Start-7 ) ;
12497: LD_EXP 24
12501: PPUSH
12502: LD_STRING DO-Start-7
12504: PPUSH
12505: CALL_OW 88
// if Query ( QOmar ) = 2 then
12509: LD_STRING QOmar
12511: PPUSH
12512: CALL_OW 97
12516: PUSH
12517: LD_INT 2
12519: EQUAL
12520: IFFALSE 12825
// begin Say ( Heike , DH-QuestionN-1 ) ;
12522: LD_EXP 23
12526: PPUSH
12527: LD_STRING DH-QuestionN-1
12529: PPUSH
12530: CALL_OW 88
// ComMoveXY ( Heike , 58 , 27 ) ;
12534: LD_EXP 23
12538: PPUSH
12539: LD_INT 58
12541: PPUSH
12542: LD_INT 27
12544: PPUSH
12545: CALL_OW 111
// wait ( 0 0$2 ) ;
12549: LD_INT 70
12551: PPUSH
12552: CALL_OW 67
// ComEnterUnit ( Omar , omarVehicle ) ;
12556: LD_EXP 24
12560: PPUSH
12561: LD_EXP 26
12565: PPUSH
12566: CALL_OW 120
// RemoveSeeing ( 79 , 32 , 2 ) ;
12570: LD_INT 79
12572: PPUSH
12573: LD_INT 32
12575: PPUSH
12576: LD_INT 2
12578: PPUSH
12579: CALL_OW 331
// RemoveSeeing ( 80 , 27 , 2 ) ;
12583: LD_INT 80
12585: PPUSH
12586: LD_INT 27
12588: PPUSH
12589: LD_INT 2
12591: PPUSH
12592: CALL_OW 331
// CenterOnXY ( 58 , 27 ) ;
12596: LD_INT 58
12598: PPUSH
12599: LD_INT 27
12601: PPUSH
12602: CALL_OW 84
// repeat wait ( 3 ) ;
12606: LD_INT 3
12608: PPUSH
12609: CALL_OW 67
// until GetDistUnitXY ( Heike , 88 , 27 ) ;
12613: LD_EXP 23
12617: PPUSH
12618: LD_INT 88
12620: PPUSH
12621: LD_INT 27
12623: PPUSH
12624: CALL_OW 297
12628: IFFALSE 12606
// uc_side := 1 ;
12630: LD_ADDR_OWVAR 20
12634: PUSH
12635: LD_INT 1
12637: ST_TO_ADDR
// uc_nation := nation_american ;
12638: LD_ADDR_OWVAR 21
12642: PUSH
12643: LD_INT 1
12645: ST_TO_ADDR
// amTroops := [ ] ;
12646: LD_ADDR_VAR 0 5
12650: PUSH
12651: EMPTY
12652: ST_TO_ADDR
// for i := 1 to 3 do
12653: LD_ADDR_VAR 0 2
12657: PUSH
12658: DOUBLE
12659: LD_INT 1
12661: DEC
12662: ST_TO_ADDR
12663: LD_INT 3
12665: PUSH
12666: FOR_TO
12667: IFFALSE 12760
// begin PrepareSoldier ( false , 10 ) ;
12669: LD_INT 0
12671: PPUSH
12672: LD_INT 10
12674: PPUSH
12675: CALL_OW 381
// amTroops := Join ( amTroops , CreateHuman ) ;
12679: LD_ADDR_VAR 0 5
12683: PUSH
12684: LD_VAR 0 5
12688: PPUSH
12689: CALL_OW 44
12693: PPUSH
12694: CALL 58358 0 2
12698: ST_TO_ADDR
// SetDir ( amTroops [ i ] , 2 ) ;
12699: LD_VAR 0 5
12703: PUSH
12704: LD_VAR 0 2
12708: ARRAY
12709: PPUSH
12710: LD_INT 2
12712: PPUSH
12713: CALL_OW 233
// PlaceUnitArea ( amTroops [ i ] , heikeTrapArea , false ) ;
12717: LD_VAR 0 5
12721: PUSH
12722: LD_VAR 0 2
12726: ARRAY
12727: PPUSH
12728: LD_INT 10
12730: PPUSH
12731: LD_INT 0
12733: PPUSH
12734: CALL_OW 49
// ComAttackUnit ( amTroops [ i ] , Heike ) ;
12738: LD_VAR 0 5
12742: PUSH
12743: LD_VAR 0 2
12747: ARRAY
12748: PPUSH
12749: LD_EXP 23
12753: PPUSH
12754: CALL_OW 115
// end ;
12758: GO 12666
12760: POP
12761: POP
// ComAttackUnit ( Heike , amTroops [ 1 ] ) ;
12762: LD_EXP 23
12766: PPUSH
12767: LD_VAR 0 5
12771: PUSH
12772: LD_INT 1
12774: ARRAY
12775: PPUSH
12776: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
12780: LD_INT 35
12782: PPUSH
12783: CALL_OW 67
// until IsDead ( Heike ) or IsDying ( Heike ) ;
12787: LD_EXP 23
12791: PPUSH
12792: CALL_OW 301
12796: PUSH
12797: LD_EXP 23
12801: PPUSH
12802: CALL_OW 303
12806: OR
12807: IFFALSE 12780
// wait ( 0 0$2 ) ;
12809: LD_INT 70
12811: PPUSH
12812: CALL_OW 67
// YouLost ( Heike ) ;
12816: LD_STRING Heike
12818: PPUSH
12819: CALL_OW 104
// exit ;
12823: GO 13745
// end ; Say ( Heike , DH-QuestionY-1 ) ;
12825: LD_EXP 23
12829: PPUSH
12830: LD_STRING DH-QuestionY-1
12832: PPUSH
12833: CALL_OW 88
// wait ( 0 0$0.3 ) ;
12837: LD_INT 10
12839: PPUSH
12840: CALL_OW 67
// Say ( Omar , DO-Story-1 ) ;
12844: LD_EXP 24
12848: PPUSH
12849: LD_STRING DO-Story-1
12851: PPUSH
12852: CALL_OW 88
// Say ( Omar , DO-Story-2 ) ;
12856: LD_EXP 24
12860: PPUSH
12861: LD_STRING DO-Story-2
12863: PPUSH
12864: CALL_OW 88
// Say ( Omar , DO-Story-3 ) ;
12868: LD_EXP 24
12872: PPUSH
12873: LD_STRING DO-Story-3
12875: PPUSH
12876: CALL_OW 88
// Say ( Omar , DO-Story-4 ) ;
12880: LD_EXP 24
12884: PPUSH
12885: LD_STRING DO-Story-4
12887: PPUSH
12888: CALL_OW 88
// Say ( Heike , DH-Story-5 ) ;
12892: LD_EXP 23
12896: PPUSH
12897: LD_STRING DH-Story-5
12899: PPUSH
12900: CALL_OW 88
// Say ( Omar , DO-Story-6 ) ;
12904: LD_EXP 24
12908: PPUSH
12909: LD_STRING DO-Story-6
12911: PPUSH
12912: CALL_OW 88
// Say ( Omar , DO-Story-7 ) ;
12916: LD_EXP 24
12920: PPUSH
12921: LD_STRING DO-Story-7
12923: PPUSH
12924: CALL_OW 88
// ComMoveXY ( Heike , 82 , 44 ) ;
12928: LD_EXP 23
12932: PPUSH
12933: LD_INT 82
12935: PPUSH
12936: LD_INT 44
12938: PPUSH
12939: CALL_OW 111
// AddComHold ( Heike ) ;
12943: LD_EXP 23
12947: PPUSH
12948: CALL_OW 200
// wait ( 0 0$4 ) ;
12952: LD_INT 140
12954: PPUSH
12955: CALL_OW 67
// ComMoveXY ( Omar , 82 , 41 ) ;
12959: LD_EXP 24
12963: PPUSH
12964: LD_INT 82
12966: PPUSH
12967: LD_INT 41
12969: PPUSH
12970: CALL_OW 111
// AddComTurnUnit ( Omar , Heike ) ;
12974: LD_EXP 24
12978: PPUSH
12979: LD_EXP 23
12983: PPUSH
12984: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
12988: LD_INT 35
12990: PPUSH
12991: CALL_OW 67
// until IsAt ( Heike , 82 , 44 ) ;
12995: LD_EXP 23
12999: PPUSH
13000: LD_INT 82
13002: PPUSH
13003: LD_INT 44
13005: PPUSH
13006: CALL_OW 307
13010: IFFALSE 12988
// ComTurnXY ( Heike , 81 , 47 ) ;
13012: LD_EXP 23
13016: PPUSH
13017: LD_INT 81
13019: PPUSH
13020: LD_INT 47
13022: PPUSH
13023: CALL_OW 118
// Say ( Heike , DH-Story-8 ) ;
13027: LD_EXP 23
13031: PPUSH
13032: LD_STRING DH-Story-8
13034: PPUSH
13035: CALL_OW 88
// Say ( Omar , DO-Story-9 ) ;
13039: LD_EXP 24
13043: PPUSH
13044: LD_STRING DO-Story-9
13046: PPUSH
13047: CALL_OW 88
// Say ( Omar , DO-Story-10 ) ;
13051: LD_EXP 24
13055: PPUSH
13056: LD_STRING DO-Story-10
13058: PPUSH
13059: CALL_OW 88
// ComTurnUnit ( Heike , Omar ) ;
13063: LD_EXP 23
13067: PPUSH
13068: LD_EXP 24
13072: PPUSH
13073: CALL_OW 119
// Say ( Heike , DH-Story-11 ) ;
13077: LD_EXP 23
13081: PPUSH
13082: LD_STRING DH-Story-11
13084: PPUSH
13085: CALL_OW 88
// ComMoveUnit ( Omar , Heike ) ;
13089: LD_EXP 24
13093: PPUSH
13094: LD_EXP 23
13098: PPUSH
13099: CALL_OW 112
// wait ( 0 0$0.3 ) ;
13103: LD_INT 10
13105: PPUSH
13106: CALL_OW 67
// ComTurnUnit ( Omar , Heike ) ;
13110: LD_EXP 24
13114: PPUSH
13115: LD_EXP 23
13119: PPUSH
13120: CALL_OW 119
// Say ( Omar , DO-Story-12 ) ;
13124: LD_EXP 24
13128: PPUSH
13129: LD_STRING DO-Story-12
13131: PPUSH
13132: CALL_OW 88
// Say ( Heike , DH-Story-13 ) ;
13136: LD_EXP 23
13140: PPUSH
13141: LD_STRING DH-Story-13
13143: PPUSH
13144: CALL_OW 88
// Say ( Omar , DO-Story-14 ) ;
13148: LD_EXP 24
13152: PPUSH
13153: LD_STRING DO-Story-14
13155: PPUSH
13156: CALL_OW 88
// Say ( Omar , DO-Story-15 ) ;
13160: LD_EXP 24
13164: PPUSH
13165: LD_STRING DO-Story-15
13167: PPUSH
13168: CALL_OW 88
// CenterOnXY ( 84 , 48 ) ;
13172: LD_INT 84
13174: PPUSH
13175: LD_INT 48
13177: PPUSH
13178: CALL_OW 84
// ComMoveXY ( Heike , 84 , 48 ) ;
13182: LD_EXP 23
13186: PPUSH
13187: LD_INT 84
13189: PPUSH
13190: LD_INT 48
13192: PPUSH
13193: CALL_OW 111
// AddComTurnXY ( Heike , 84 , 49 ) ;
13197: LD_EXP 23
13201: PPUSH
13202: LD_INT 84
13204: PPUSH
13205: LD_INT 49
13207: PPUSH
13208: CALL_OW 178
// wait ( 0 0$1 ) ;
13212: LD_INT 35
13214: PPUSH
13215: CALL_OW 67
// ComMoveUnit ( Omar , Heike ) ;
13219: LD_EXP 24
13223: PPUSH
13224: LD_EXP 23
13228: PPUSH
13229: CALL_OW 112
// wait ( 0 0$1 ) ;
13233: LD_INT 35
13235: PPUSH
13236: CALL_OW 67
// ComTurnUnit ( Omar , Heike ) ;
13240: LD_EXP 24
13244: PPUSH
13245: LD_EXP 23
13249: PPUSH
13250: CALL_OW 119
// wait ( 0 0$0.3 ) ;
13254: LD_INT 10
13256: PPUSH
13257: CALL_OW 67
// Say ( Omar , DO-Story-16 ) ;
13261: LD_EXP 24
13265: PPUSH
13266: LD_STRING DO-Story-16
13268: PPUSH
13269: CALL_OW 88
// if Query ( QOmar2 ) = 2 then
13273: LD_STRING QOmar2
13275: PPUSH
13276: CALL_OW 97
13280: PUSH
13281: LD_INT 2
13283: EQUAL
13284: IFFALSE 13622
// begin ComTurnUnit ( Heike , Omar ) ;
13286: LD_EXP 23
13290: PPUSH
13291: LD_EXP 24
13295: PPUSH
13296: CALL_OW 119
// Say ( Heike , DH-QuestionN-1 ) ;
13300: LD_EXP 23
13304: PPUSH
13305: LD_STRING DH-QuestionN-1
13307: PPUSH
13308: CALL_OW 88
// ComMoveXY ( Heike , 79 , 57 ) ;
13312: LD_EXP 23
13316: PPUSH
13317: LD_INT 79
13319: PPUSH
13320: LD_INT 57
13322: PPUSH
13323: CALL_OW 111
// AddComMoveXY ( Heike , 68 , 53 ) ;
13327: LD_EXP 23
13331: PPUSH
13332: LD_INT 68
13334: PPUSH
13335: LD_INT 53
13337: PPUSH
13338: CALL_OW 171
// wait ( 0 0$2 ) ;
13342: LD_INT 70
13344: PPUSH
13345: CALL_OW 67
// ComEnterUnit ( Omar , omarVehicle ) ;
13349: LD_EXP 24
13353: PPUSH
13354: LD_EXP 26
13358: PPUSH
13359: CALL_OW 120
// RemoveSeeing ( 79 , 32 , 2 ) ;
13363: LD_INT 79
13365: PPUSH
13366: LD_INT 32
13368: PPUSH
13369: LD_INT 2
13371: PPUSH
13372: CALL_OW 331
// RemoveSeeing ( 80 , 27 , 2 ) ;
13376: LD_INT 80
13378: PPUSH
13379: LD_INT 27
13381: PPUSH
13382: LD_INT 2
13384: PPUSH
13385: CALL_OW 331
// CenterOnXY ( 68 , 53 ) ;
13389: LD_INT 68
13391: PPUSH
13392: LD_INT 53
13394: PPUSH
13395: CALL_OW 84
// repeat wait ( 3 ) ;
13399: LD_INT 3
13401: PPUSH
13402: CALL_OW 67
// until GetDistUnitXY ( Heike , 68 , 53 ) < 6 ;
13406: LD_EXP 23
13410: PPUSH
13411: LD_INT 68
13413: PPUSH
13414: LD_INT 53
13416: PPUSH
13417: CALL_OW 297
13421: PUSH
13422: LD_INT 6
13424: LESS
13425: IFFALSE 13399
// uc_side := 1 ;
13427: LD_ADDR_OWVAR 20
13431: PUSH
13432: LD_INT 1
13434: ST_TO_ADDR
// uc_nation := nation_american ;
13435: LD_ADDR_OWVAR 21
13439: PUSH
13440: LD_INT 1
13442: ST_TO_ADDR
// amTroops := [ ] ;
13443: LD_ADDR_VAR 0 5
13447: PUSH
13448: EMPTY
13449: ST_TO_ADDR
// for i := 1 to 3 do
13450: LD_ADDR_VAR 0 2
13454: PUSH
13455: DOUBLE
13456: LD_INT 1
13458: DEC
13459: ST_TO_ADDR
13460: LD_INT 3
13462: PUSH
13463: FOR_TO
13464: IFFALSE 13557
// begin PrepareSoldier ( false , 10 ) ;
13466: LD_INT 0
13468: PPUSH
13469: LD_INT 10
13471: PPUSH
13472: CALL_OW 381
// amTroops := Join ( amTroops , CreateHuman ) ;
13476: LD_ADDR_VAR 0 5
13480: PUSH
13481: LD_VAR 0 5
13485: PPUSH
13486: CALL_OW 44
13490: PPUSH
13491: CALL 58358 0 2
13495: ST_TO_ADDR
// SetDir ( amTroops [ i ] , 2 ) ;
13496: LD_VAR 0 5
13500: PUSH
13501: LD_VAR 0 2
13505: ARRAY
13506: PPUSH
13507: LD_INT 2
13509: PPUSH
13510: CALL_OW 233
// PlaceUnitArea ( amTroops [ i ] , heikeTrap2Area , false ) ;
13514: LD_VAR 0 5
13518: PUSH
13519: LD_VAR 0 2
13523: ARRAY
13524: PPUSH
13525: LD_INT 11
13527: PPUSH
13528: LD_INT 0
13530: PPUSH
13531: CALL_OW 49
// ComAttackUnit ( amTroops [ i ] , Heike ) ;
13535: LD_VAR 0 5
13539: PUSH
13540: LD_VAR 0 2
13544: ARRAY
13545: PPUSH
13546: LD_EXP 23
13550: PPUSH
13551: CALL_OW 115
// end ;
13555: GO 13463
13557: POP
13558: POP
// ComAttackUnit ( Heike , amTroops [ 1 ] ) ;
13559: LD_EXP 23
13563: PPUSH
13564: LD_VAR 0 5
13568: PUSH
13569: LD_INT 1
13571: ARRAY
13572: PPUSH
13573: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
13577: LD_INT 35
13579: PPUSH
13580: CALL_OW 67
// until IsDead ( Heike ) or IsDying ( Heike ) ;
13584: LD_EXP 23
13588: PPUSH
13589: CALL_OW 301
13593: PUSH
13594: LD_EXP 23
13598: PPUSH
13599: CALL_OW 303
13603: OR
13604: IFFALSE 13577
// wait ( 0 0$2 ) ;
13606: LD_INT 70
13608: PPUSH
13609: CALL_OW 67
// YouLost ( Heike ) ;
13613: LD_STRING Heike
13615: PPUSH
13616: CALL_OW 104
// exit ;
13620: GO 13745
// end ; Say ( Omar , DO-Objective-1 ) ;
13622: LD_EXP 24
13626: PPUSH
13627: LD_STRING DO-Objective-1
13629: PPUSH
13630: CALL_OW 88
// ComTurnUnit ( Heike , Omar ) ;
13634: LD_EXP 23
13638: PPUSH
13639: LD_EXP 24
13643: PPUSH
13644: CALL_OW 119
// Say ( Heike , DH-Objective-2 ) ;
13648: LD_EXP 23
13652: PPUSH
13653: LD_STRING DH-Objective-2
13655: PPUSH
13656: CALL_OW 88
// Say ( Omar , DO-Objective-3 ) ;
13660: LD_EXP 24
13664: PPUSH
13665: LD_STRING DO-Objective-3
13667: PPUSH
13668: CALL_OW 88
// RemoveSeeing ( 79 , 32 , 2 ) ;
13672: LD_INT 79
13674: PPUSH
13675: LD_INT 32
13677: PPUSH
13678: LD_INT 2
13680: PPUSH
13681: CALL_OW 331
// RemoveSeeing ( 80 , 27 , 2 ) ;
13685: LD_INT 80
13687: PPUSH
13688: LD_INT 27
13690: PPUSH
13691: LD_INT 2
13693: PPUSH
13694: CALL_OW 331
// SetSide ( Omar , 2 ) ;
13698: LD_EXP 24
13702: PPUSH
13703: LD_INT 2
13705: PPUSH
13706: CALL_OW 235
// SetSide ( omarVehicle , 2 ) ;
13710: LD_EXP 26
13714: PPUSH
13715: LD_INT 2
13717: PPUSH
13718: CALL_OW 235
// ChangeMissionObjectives ( O1 ) ;
13722: LD_STRING O1
13724: PPUSH
13725: CALL_OW 337
// InGameOff ;
13729: CALL_OW 9
// gameActive := true ;
13733: LD_ADDR_EXP 19
13737: PUSH
13738: LD_INT 1
13740: ST_TO_ADDR
// SaveForQuickRestart ;
13741: CALL_OW 22
// end ;
13745: LD_VAR 0 1
13749: RET
// every 0 0$2 trigger gameActive and not spotArabianBase and FilterUnitsInArea ( arBaseArea , [ f_side , 2 ] ) do var i ;
13750: LD_EXP 19
13754: PUSH
13755: LD_EXP 7
13759: NOT
13760: AND
13761: PUSH
13762: LD_INT 4
13764: PPUSH
13765: LD_INT 22
13767: PUSH
13768: LD_INT 2
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: PPUSH
13775: CALL_OW 70
13779: AND
13780: IFFALSE 13931
13782: GO 13784
13784: DISABLE
13785: LD_INT 0
13787: PPUSH
// begin spotArabianBase := true ;
13788: LD_ADDR_EXP 7
13792: PUSH
13793: LD_INT 1
13795: ST_TO_ADDR
// DialogueOn ;
13796: CALL_OW 6
// PlaceSeeing ( 232 , 101 , 2 , - 22 ) ;
13800: LD_INT 232
13802: PPUSH
13803: LD_INT 101
13805: PPUSH
13806: LD_INT 2
13808: PPUSH
13809: LD_INT 22
13811: NEG
13812: PPUSH
13813: CALL_OW 330
// RemoveSeeing ( 232 , 101 , 2 ) ;
13817: LD_INT 232
13819: PPUSH
13820: LD_INT 101
13822: PPUSH
13823: LD_INT 2
13825: PPUSH
13826: CALL_OW 331
// CenterNowOnXY ( 232 , 101 ) ;
13830: LD_INT 232
13832: PPUSH
13833: LD_INT 101
13835: PPUSH
13836: CALL_OW 86
// for i in FilterUnitsInArea ( arBaseArea , [ f_side , 5 ] ) do
13840: LD_ADDR_VAR 0 1
13844: PUSH
13845: LD_INT 4
13847: PPUSH
13848: LD_INT 22
13850: PUSH
13851: LD_INT 5
13853: PUSH
13854: EMPTY
13855: LIST
13856: LIST
13857: PPUSH
13858: CALL_OW 70
13862: PUSH
13863: FOR_IN
13864: IFFALSE 13880
// SetSide ( i , 2 ) ;
13866: LD_VAR 0 1
13870: PPUSH
13871: LD_INT 2
13873: PPUSH
13874: CALL_OW 235
13878: GO 13863
13880: POP
13881: POP
// if not spotAmericanBase then
13882: LD_EXP 6
13886: NOT
13887: IFFALSE 13903
// Say ( Omar , DO-ArBase-1a ) else
13889: LD_EXP 24
13893: PPUSH
13894: LD_STRING DO-ArBase-1a
13896: PPUSH
13897: CALL_OW 88
13901: GO 13915
// Say ( Omar , DO-ArBase-1b ) ;
13903: LD_EXP 24
13907: PPUSH
13908: LD_STRING DO-ArBase-1b
13910: PPUSH
13911: CALL_OW 88
// Say ( Heike , DH-ArBase-2 ) ;
13915: LD_EXP 23
13919: PPUSH
13920: LD_STRING DH-ArBase-2
13922: PPUSH
13923: CALL_OW 88
// DialogueOff ;
13927: CALL_OW 7
// end ;
13931: PPOPN 1
13933: END
// every 0 0$1 trigger gameActive and ( IsSelected ( arFac ) or UnitsInside ( arFac ) ) and IsOk ( Heike ) and IsOk ( Omar ) do
13934: LD_EXP 19
13938: PUSH
13939: LD_INT 87
13941: PPUSH
13942: CALL_OW 306
13946: PUSH
13947: LD_INT 87
13949: PPUSH
13950: CALL_OW 313
13954: OR
13955: AND
13956: PUSH
13957: LD_EXP 23
13961: PPUSH
13962: CALL_OW 302
13966: AND
13967: PUSH
13968: LD_EXP 24
13972: PPUSH
13973: CALL_OW 302
13977: AND
13978: IFFALSE 14322
13980: GO 13982
13982: DISABLE
// begin DialogueOn ;
13983: CALL_OW 6
// Say ( Heike , DH-Fac-1 ) ;
13987: LD_EXP 23
13991: PPUSH
13992: LD_STRING DH-Fac-1
13994: PPUSH
13995: CALL_OW 88
// Say ( Omar , DOm-Fac-2 ) ;
13999: LD_EXP 24
14003: PPUSH
14004: LD_STRING DOm-Fac-2
14006: PPUSH
14007: CALL_OW 88
// if LoadVariable ( 03_CargoRecycled , false ) then
14011: LD_STRING 03_CargoRecycled
14013: PPUSH
14014: LD_INT 0
14016: PPUSH
14017: CALL_OW 30
14021: IFFALSE 14036
// SetTech ( tech_cargo , 2 , state_researched ) ;
14023: LD_INT 83
14025: PPUSH
14026: LD_INT 2
14028: PPUSH
14029: LD_INT 2
14031: PPUSH
14032: CALL_OW 322
// if TestCharacters ( 09_Markov ) then
14036: LD_STRING 09_Markov
14038: PPUSH
14039: CALL_OW 28
14043: IFFALSE 14158
// begin Say ( Heike , DH-Fac-3a ) ;
14045: LD_EXP 23
14049: PPUSH
14050: LD_STRING DH-Fac-3a
14052: PPUSH
14053: CALL_OW 88
// SetTech ( tech_gatling , 2 , state_researched ) ;
14057: LD_INT 69
14059: PPUSH
14060: LD_INT 2
14062: PPUSH
14063: LD_INT 2
14065: PPUSH
14066: CALL_OW 322
// SetTech ( tech_gun , 2 , state_researched ) ;
14070: LD_INT 39
14072: PPUSH
14073: LD_INT 2
14075: PPUSH
14076: LD_INT 2
14078: PPUSH
14079: CALL_OW 322
// SetTech ( tech_radar , 2 , state_researched ) ;
14083: LD_INT 6
14085: PPUSH
14086: LD_INT 2
14088: PPUSH
14089: LD_INT 2
14091: PPUSH
14092: CALL_OW 322
// SetTech ( tech_remCont , 2 , state_researched ) ;
14096: LD_INT 15
14098: PPUSH
14099: LD_INT 2
14101: PPUSH
14102: LD_INT 2
14104: PPUSH
14105: CALL_OW 322
// if GetSkill ( Heike , 3 ) < 10 then
14109: LD_EXP 23
14113: PPUSH
14114: LD_INT 3
14116: PPUSH
14117: CALL_OW 259
14121: PUSH
14122: LD_INT 10
14124: LESS
14125: IFFALSE 14156
// SetSkill ( Heike , 3 , GetSkill ( Heike , 3 ) + 1 ) ;
14127: LD_EXP 23
14131: PPUSH
14132: LD_INT 3
14134: PPUSH
14135: LD_EXP 23
14139: PPUSH
14140: LD_INT 3
14142: PPUSH
14143: CALL_OW 259
14147: PUSH
14148: LD_INT 1
14150: PLUS
14151: PPUSH
14152: CALL_OW 237
// end else
14156: GO 14311
// if TestCharacters ( 09_Olaf ) then
14158: LD_STRING 09_Olaf
14160: PPUSH
14161: CALL_OW 28
14165: IFFALSE 14254
// begin Say ( Heike , DH-Fac-3b ) ;
14167: LD_EXP 23
14171: PPUSH
14172: LD_STRING DH-Fac-3b
14174: PPUSH
14175: CALL_OW 88
// SetTech ( tech_radar , 2 , state_researched ) ;
14179: LD_INT 6
14181: PPUSH
14182: LD_INT 2
14184: PPUSH
14185: LD_INT 2
14187: PPUSH
14188: CALL_OW 322
// SetTech ( tech_remCont , 2 , state_researched ) ;
14192: LD_INT 15
14194: PPUSH
14195: LD_INT 2
14197: PPUSH
14198: LD_INT 2
14200: PPUSH
14201: CALL_OW 322
// if GetSkill ( Heike , 3 ) < 10 then
14205: LD_EXP 23
14209: PPUSH
14210: LD_INT 3
14212: PPUSH
14213: CALL_OW 259
14217: PUSH
14218: LD_INT 10
14220: LESS
14221: IFFALSE 14252
// SetSkill ( Heike , 3 , GetSkill ( Heike , 3 ) + 1 ) ;
14223: LD_EXP 23
14227: PPUSH
14228: LD_INT 3
14230: PPUSH
14231: LD_EXP 23
14235: PPUSH
14236: LD_INT 3
14238: PPUSH
14239: CALL_OW 259
14243: PUSH
14244: LD_INT 1
14246: PLUS
14247: PPUSH
14248: CALL_OW 237
// end else
14252: GO 14311
// if GetSkill ( Heike , skill_mechanical ) > 5 then
14254: LD_EXP 23
14258: PPUSH
14259: LD_INT 3
14261: PPUSH
14262: CALL_OW 259
14266: PUSH
14267: LD_INT 5
14269: GREATER
14270: IFFALSE 14299
// begin Say ( Heike , DH-Fac-3c ) ;
14272: LD_EXP 23
14276: PPUSH
14277: LD_STRING DH-Fac-3c
14279: PPUSH
14280: CALL_OW 88
// SetTech ( tech_radar , 2 , state_researched ) ;
14284: LD_INT 6
14286: PPUSH
14287: LD_INT 2
14289: PPUSH
14290: LD_INT 2
14292: PPUSH
14293: CALL_OW 322
// end else
14297: GO 14311
// Say ( Heike , DH-Fac-3d ) ;
14299: LD_EXP 23
14303: PPUSH
14304: LD_STRING DH-Fac-3d
14306: PPUSH
14307: CALL_OW 88
// ChangeMissionObjectives ( ARemote ) ;
14311: LD_STRING ARemote
14313: PPUSH
14314: CALL_OW 337
// DialogueOff ;
14318: CALL_OW 7
// end ;
14322: END
// every 0 0$1 trigger gameActive and ( IsSelected ( arLab ) or UnitsInside ( arLab ) ) and IsOk ( Heike ) and IsOk ( Omar ) do
14323: LD_EXP 19
14327: PUSH
14328: LD_INT 89
14330: PPUSH
14331: CALL_OW 306
14335: PUSH
14336: LD_INT 89
14338: PPUSH
14339: CALL_OW 313
14343: OR
14344: AND
14345: PUSH
14346: LD_EXP 23
14350: PPUSH
14351: CALL_OW 302
14355: AND
14356: PUSH
14357: LD_EXP 24
14361: PPUSH
14362: CALL_OW 302
14366: AND
14367: IFFALSE 14595
14369: GO 14371
14371: DISABLE
// begin DialogueOn ;
14372: CALL_OW 6
// Say ( Heike , DH-Lab-1 ) ;
14376: LD_EXP 23
14380: PPUSH
14381: LD_STRING DH-Lab-1
14383: PPUSH
14384: CALL_OW 88
// Say ( Omar , DOm-Lab-2 ) ;
14388: LD_EXP 24
14392: PPUSH
14393: LD_STRING DOm-Lab-2
14395: PPUSH
14396: CALL_OW 88
// if TestCharacters ( 09_Aviradze ) then
14400: LD_STRING 09_Aviradze
14402: PPUSH
14403: CALL_OW 28
14407: IFFALSE 14462
// begin SetTech ( tech_apelang , 2 , state_researched ) ;
14409: LD_INT 1
14411: PPUSH
14412: LD_INT 2
14414: PPUSH
14415: LD_INT 2
14417: PPUSH
14418: CALL_OW 322
// SetTech ( tech_apepsych , 2 , state_researched ) ;
14422: LD_INT 2
14424: PPUSH
14425: LD_INT 2
14427: PPUSH
14428: LD_INT 2
14430: PPUSH
14431: CALL_OW 322
// SetTech ( tech_apeagres , 2 , state_researched ) ;
14435: LD_INT 11
14437: PPUSH
14438: LD_INT 2
14440: PPUSH
14441: LD_INT 2
14443: PPUSH
14444: CALL_OW 322
// Say ( Heike , DH-Lab-4a ) ;
14448: LD_EXP 23
14452: PPUSH
14453: LD_STRING DH-Lab-4a
14455: PPUSH
14456: CALL_OW 88
// end else
14460: GO 14474
// Say ( Heike , DH-Lab-4b ) ;
14462: LD_EXP 23
14466: PPUSH
14467: LD_STRING DH-Lab-4b
14469: PPUSH
14470: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
14474: LD_STRING 05_DrugsTested
14476: PPUSH
14477: LD_EXP 1
14481: PPUSH
14482: CALL_OW 30
14486: IFFALSE 14513
// begin Say ( Heike , DH-Lab-5a ) ;
14488: LD_EXP 23
14492: PPUSH
14493: LD_STRING DH-Lab-5a
14495: PPUSH
14496: CALL_OW 88
// SetTech ( tech_stimdrugs , 2 , state_enabled ) ;
14500: LD_INT 5
14502: PPUSH
14503: LD_INT 2
14505: PPUSH
14506: LD_INT 1
14508: PPUSH
14509: CALL_OW 322
// end ; if LoadVariable ( 09_ApeBrain , debug ) then
14513: LD_STRING 09_ApeBrain
14515: PPUSH
14516: LD_EXP 1
14520: PPUSH
14521: CALL_OW 30
14525: IFFALSE 14564
// begin Say ( Heike , DH-Lab-6a ) ;
14527: LD_EXP 23
14531: PPUSH
14532: LD_STRING DH-Lab-6a
14534: PPUSH
14535: CALL_OW 88
// Say ( Omar , DOm-Lab-7a ) ;
14539: LD_EXP 24
14543: PPUSH
14544: LD_STRING DOm-Lab-7a
14546: PPUSH
14547: CALL_OW 88
// SetTech ( tech_apeBrain , 2 , state_enabled ) ;
14551: LD_INT 4
14553: PPUSH
14554: LD_INT 2
14556: PPUSH
14557: LD_INT 1
14559: PPUSH
14560: CALL_OW 322
// end ; if LoadVariable ( 09_ApeNeural , debug ) then
14564: LD_STRING 09_ApeNeural
14566: PPUSH
14567: LD_EXP 1
14571: PPUSH
14572: CALL_OW 30
14576: IFFALSE 14591
// begin SetTech ( tech_apeNeural , 2 , state_enabled ) ;
14578: LD_INT 3
14580: PPUSH
14581: LD_INT 2
14583: PPUSH
14584: LD_INT 1
14586: PPUSH
14587: CALL_OW 322
// end ; DialogueOff ;
14591: CALL_OW 7
// end ;
14595: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) do
14596: LD_EXP 19
14600: PUSH
14601: LD_INT 22
14603: PUSH
14604: LD_INT 2
14606: PUSH
14607: EMPTY
14608: LIST
14609: LIST
14610: PUSH
14611: LD_INT 25
14613: PUSH
14614: LD_INT 12
14616: PUSH
14617: EMPTY
14618: LIST
14619: LIST
14620: PUSH
14621: EMPTY
14622: LIST
14623: LIST
14624: PPUSH
14625: CALL_OW 69
14629: AND
14630: IFFALSE 14665
14632: GO 14634
14634: DISABLE
// begin if IsOk ( Heike ) then
14635: LD_EXP 23
14639: PPUSH
14640: CALL_OW 302
14644: IFFALSE 14658
// Say ( Heike , DH-Ape-1 ) ;
14646: LD_EXP 23
14650: PPUSH
14651: LD_STRING DH-Ape-1
14653: PPUSH
14654: CALL_OW 88
// ChangeMissionObjectives ( AApes ) ;
14658: LD_STRING AApes
14660: PPUSH
14661: CALL_OW 337
// end ;
14665: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 5 do
14666: LD_EXP 19
14670: PUSH
14671: LD_INT 22
14673: PUSH
14674: LD_INT 2
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: PUSH
14681: LD_INT 25
14683: PUSH
14684: LD_INT 15
14686: PUSH
14687: EMPTY
14688: LIST
14689: LIST
14690: PUSH
14691: EMPTY
14692: LIST
14693: LIST
14694: PPUSH
14695: CALL_OW 69
14699: PUSH
14700: LD_INT 5
14702: GREATEREQUAL
14703: AND
14704: IFFALSE 14806
14706: GO 14708
14708: DISABLE
// begin hasApes := true ;
14709: LD_ADDR_EXP 16
14713: PUSH
14714: LD_INT 1
14716: ST_TO_ADDR
// ChangeMissionObjectives ( AApesOut ) ;
14717: LD_STRING AApesOut
14719: PPUSH
14720: CALL_OW 337
// if not IsOk ( Heike ) or not IsOk ( Omar ) then
14724: LD_EXP 23
14728: PPUSH
14729: CALL_OW 302
14733: NOT
14734: PUSH
14735: LD_EXP 24
14739: PPUSH
14740: CALL_OW 302
14744: NOT
14745: OR
14746: IFFALSE 14750
// exit ;
14748: GO 14806
// DialogueOn ;
14750: CALL_OW 6
// Say ( Heike , DH-ApeArmy-1 ) ;
14754: LD_EXP 23
14758: PPUSH
14759: LD_STRING DH-ApeArmy-1
14761: PPUSH
14762: CALL_OW 88
// Say ( Omar , DOm-ApeArmy-2 ) ;
14766: LD_EXP 24
14770: PPUSH
14771: LD_STRING DOm-ApeArmy-2
14773: PPUSH
14774: CALL_OW 88
// Say ( Heike , DH-ApeArmy-3 ) ;
14778: LD_EXP 23
14782: PPUSH
14783: LD_STRING DH-ApeArmy-3
14785: PPUSH
14786: CALL_OW 88
// Say ( Omar , DOm-ApeArmy-4 ) ;
14790: LD_EXP 24
14794: PPUSH
14795: LD_STRING DOm-ApeArmy-4
14797: PPUSH
14798: CALL_OW 88
// DialogueOff ;
14802: CALL_OW 7
// end ;
14806: END
// every 0 0$1 trigger gameActive and GetTech ( tech_stimdrugs , 2 ) = state_researched do
14807: LD_EXP 19
14811: PUSH
14812: LD_INT 5
14814: PPUSH
14815: LD_INT 2
14817: PPUSH
14818: CALL_OW 321
14822: PUSH
14823: LD_INT 2
14825: EQUAL
14826: AND
14827: IFFALSE 14863
14829: GO 14831
14831: DISABLE
// begin hasDrugs := true ;
14832: LD_ADDR_EXP 17
14836: PUSH
14837: LD_INT 1
14839: ST_TO_ADDR
// if IsOk ( Heike ) then
14840: LD_EXP 23
14844: PPUSH
14845: CALL_OW 302
14849: IFFALSE 14863
// Say ( Heike , DH-Stim-1 ) ;
14851: LD_EXP 23
14855: PPUSH
14856: LD_STRING DH-Stim-1
14858: PPUSH
14859: CALL_OW 88
// end ;
14863: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_kamikaze ] ] ) do
14864: LD_EXP 19
14868: PUSH
14869: LD_INT 22
14871: PUSH
14872: LD_INT 2
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: LD_INT 25
14881: PUSH
14882: LD_INT 17
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: PPUSH
14893: CALL_OW 69
14897: AND
14898: IFFALSE 14915
14900: GO 14902
14902: DISABLE
// Say ( Heike , DH-Kamikadze-1 ) ;
14903: LD_EXP 23
14907: PPUSH
14908: LD_STRING DH-Kamikadze-1
14910: PPUSH
14911: CALL_OW 88
14915: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_chassis , class_mastodont ] ] ) and IsOk ( Omar ) and IsOk ( Heike ) do
14916: LD_EXP 19
14920: PUSH
14921: LD_INT 22
14923: PUSH
14924: LD_INT 2
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: PUSH
14931: LD_INT 31
14933: PUSH
14934: LD_INT 31
14936: PUSH
14937: EMPTY
14938: LIST
14939: LIST
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PPUSH
14945: CALL_OW 69
14949: AND
14950: PUSH
14951: LD_EXP 24
14955: PPUSH
14956: CALL_OW 302
14960: AND
14961: PUSH
14962: LD_EXP 23
14966: PPUSH
14967: CALL_OW 302
14971: AND
14972: IFFALSE 15057
14974: GO 14976
14976: DISABLE
// begin InGameOn ;
14977: CALL_OW 8
// CenterNowOnUnits ( Omar ) ;
14981: LD_EXP 24
14985: PPUSH
14986: CALL_OW 87
// Say ( Heike , DH-Mastodont-1 ) ;
14990: LD_EXP 23
14994: PPUSH
14995: LD_STRING DH-Mastodont-1
14997: PPUSH
14998: CALL_OW 88
// Say ( Omar , DOm-Mastodont-2 ) ;
15002: LD_EXP 24
15006: PPUSH
15007: LD_STRING DOm-Mastodont-2
15009: PPUSH
15010: CALL_OW 88
// Say ( Heike , DH-Mastodont-3 ) ;
15014: LD_EXP 23
15018: PPUSH
15019: LD_STRING DH-Mastodont-3
15021: PPUSH
15022: CALL_OW 88
// Say ( Omar , DOm-Mastodont-4 ) ;
15026: LD_EXP 24
15030: PPUSH
15031: LD_STRING DOm-Mastodont-4
15033: PPUSH
15034: CALL_OW 88
// hasMastodont := true ;
15038: LD_ADDR_EXP 13
15042: PUSH
15043: LD_INT 1
15045: ST_TO_ADDR
// InGameOff ;
15046: CALL_OW 9
// SetAchievement ( ACH_MASTODONTTAME ) ;
15050: LD_STRING ACH_MASTODONTTAME
15052: PPUSH
15053: CALL_OW 543
// end ;
15057: END
// every 0 0$1 trigger gameActive and tigerCounter do
15058: LD_EXP 19
15062: PUSH
15063: LD_EXP 21
15067: AND
15068: IFFALSE 15080
15070: GO 15072
15072: DISABLE
// SetAchievement ( ACH_TIGERTAME ) ;
15073: LD_STRING ACH_TIGERTAME
15075: PPUSH
15076: CALL_OW 543
15080: END
// every 0 0$1 trigger gameActive and tigerCounter > 1 do
15081: LD_EXP 19
15085: PUSH
15086: LD_EXP 21
15090: PUSH
15091: LD_INT 1
15093: GREATER
15094: AND
15095: IFFALSE 15199
15097: GO 15099
15099: DISABLE
// begin hasTigers := true ;
15100: LD_ADDR_EXP 15
15104: PUSH
15105: LD_INT 1
15107: ST_TO_ADDR
// if not IsOk ( Omar ) or not IsOk ( Heike ) then
15108: LD_EXP 24
15112: PPUSH
15113: CALL_OW 302
15117: NOT
15118: PUSH
15119: LD_EXP 23
15123: PPUSH
15124: CALL_OW 302
15128: NOT
15129: OR
15130: IFFALSE 15134
// exit ;
15132: GO 15199
// CenterNowOnUnits ( Omar ) ;
15134: LD_EXP 24
15138: PPUSH
15139: CALL_OW 87
// DialogueOn ;
15143: CALL_OW 6
// Say ( Omar , DOm-Tiger-1 ) ;
15147: LD_EXP 24
15151: PPUSH
15152: LD_STRING DOm-Tiger-1
15154: PPUSH
15155: CALL_OW 88
// Say ( Heike , DH-Tiger-2 ) ;
15159: LD_EXP 23
15163: PPUSH
15164: LD_STRING DH-Tiger-2
15166: PPUSH
15167: CALL_OW 88
// Say ( Omar , DOm-Tiger-3 ) ;
15171: LD_EXP 24
15175: PPUSH
15176: LD_STRING DOm-Tiger-3
15178: PPUSH
15179: CALL_OW 88
// Say ( Heike , DH-Tiger-4 ) ;
15183: LD_EXP 23
15187: PPUSH
15188: LD_STRING DH-Tiger-4
15190: PPUSH
15191: CALL_OW 88
// DialogueOff ;
15195: CALL_OW 7
// end ;
15199: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_control , control_remote ] ] ) >= 3 do
15200: LD_EXP 19
15204: PUSH
15205: LD_INT 22
15207: PUSH
15208: LD_INT 2
15210: PUSH
15211: EMPTY
15212: LIST
15213: LIST
15214: PUSH
15215: LD_INT 50
15217: PUSH
15218: EMPTY
15219: LIST
15220: PUSH
15221: LD_INT 33
15223: PUSH
15224: LD_INT 2
15226: PUSH
15227: EMPTY
15228: LIST
15229: LIST
15230: PUSH
15231: EMPTY
15232: LIST
15233: LIST
15234: LIST
15235: PPUSH
15236: CALL_OW 69
15240: PUSH
15241: LD_INT 3
15243: GREATEREQUAL
15244: AND
15245: IFFALSE 15288
15247: GO 15249
15249: DISABLE
// begin ChangeMissionObjectives ( ARemoteOut ) ;
15250: LD_STRING ARemoteOut
15252: PPUSH
15253: CALL_OW 337
// hasVehicles := true ;
15257: LD_ADDR_EXP 14
15261: PUSH
15262: LD_INT 1
15264: ST_TO_ADDR
// if IsOk ( Heike ) then
15265: LD_EXP 23
15269: PPUSH
15270: CALL_OW 302
15274: IFFALSE 15288
// Say ( Heike , DH-Mechanic-1 ) ;
15276: LD_EXP 23
15280: PPUSH
15281: LD_STRING DH-Mechanic-1
15283: PPUSH
15284: CALL_OW 88
// end ;
15288: END
// every 0 0$1 trigger gameActive and ( FilterUnitsInArea ( amBaseOuterArea , [ f_side , 2 ] ) or SeeArea ( 2 , amBaseArea ) ) do
15289: LD_EXP 19
15293: PUSH
15294: LD_INT 29
15296: PPUSH
15297: LD_INT 22
15299: PUSH
15300: LD_INT 2
15302: PUSH
15303: EMPTY
15304: LIST
15305: LIST
15306: PPUSH
15307: CALL_OW 70
15311: PUSH
15312: LD_INT 2
15314: PPUSH
15315: LD_INT 1
15317: PPUSH
15318: CALL_OW 294
15322: OR
15323: AND
15324: IFFALSE 15337
15326: GO 15328
15328: DISABLE
// spotAmericanBase := true ;
15329: LD_ADDR_EXP 6
15333: PUSH
15334: LD_INT 1
15336: ST_TO_ADDR
15337: END
// every 0 0$2 trigger gameActive and spotAmericanBase and IsOk ( Omar ) and IsOk ( Heike ) do
15338: LD_EXP 19
15342: PUSH
15343: LD_EXP 6
15347: AND
15348: PUSH
15349: LD_EXP 24
15353: PPUSH
15354: CALL_OW 302
15358: AND
15359: PUSH
15360: LD_EXP 23
15364: PPUSH
15365: CALL_OW 302
15369: AND
15370: IFFALSE 15610
15372: GO 15374
15374: DISABLE
// begin DialogueOn ;
15375: CALL_OW 6
// PlaceSeeing ( 92 , 129 , 2 , - 22 ) ;
15379: LD_INT 92
15381: PPUSH
15382: LD_INT 129
15384: PPUSH
15385: LD_INT 2
15387: PPUSH
15388: LD_INT 22
15390: NEG
15391: PPUSH
15392: CALL_OW 330
// RemoveSeeing ( 92 , 129 , 2 ) ;
15396: LD_INT 92
15398: PPUSH
15399: LD_INT 129
15401: PPUSH
15402: LD_INT 2
15404: PPUSH
15405: CALL_OW 331
// CenterNowOnXY ( 92 , 129 ) ;
15409: LD_INT 92
15411: PPUSH
15412: LD_INT 129
15414: PPUSH
15415: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
15419: LD_INT 10
15421: PPUSH
15422: CALL_OW 68
// Say ( Omar , DO-AmBase-1 ) ;
15426: LD_EXP 24
15430: PPUSH
15431: LD_STRING DO-AmBase-1
15433: PPUSH
15434: CALL_OW 88
// Say ( Heike , DH-AmBase-2 ) ;
15438: LD_EXP 23
15442: PPUSH
15443: LD_STRING DH-AmBase-2
15445: PPUSH
15446: CALL_OW 88
// Say ( Omar , DO-AmBase-3 ) ;
15450: LD_EXP 24
15454: PPUSH
15455: LD_STRING DO-AmBase-3
15457: PPUSH
15458: CALL_OW 88
// Say ( Heike , DH-AmBase-4 ) ;
15462: LD_EXP 23
15466: PPUSH
15467: LD_STRING DH-AmBase-4
15469: PPUSH
15470: CALL_OW 88
// Say ( Omar , DO-AmBase-5 ) ;
15474: LD_EXP 24
15478: PPUSH
15479: LD_STRING DO-AmBase-5
15481: PPUSH
15482: CALL_OW 88
// Say ( Heike , DH-AmBase-6 ) ;
15486: LD_EXP 23
15490: PPUSH
15491: LD_STRING DH-AmBase-6
15493: PPUSH
15494: CALL_OW 88
// Say ( Omar , DO-AmBase-7 ) ;
15498: LD_EXP 24
15502: PPUSH
15503: LD_STRING DO-AmBase-7
15505: PPUSH
15506: CALL_OW 88
// if not spotArabianBase then
15510: LD_EXP 7
15514: NOT
15515: IFFALSE 15531
// begin Say ( Omar , DO-AmBase-8a ) ;
15517: LD_EXP 24
15521: PPUSH
15522: LD_STRING DO-AmBase-8a
15524: PPUSH
15525: CALL_OW 88
// end else
15529: GO 15543
// begin Say ( Omar , DO-AmBase-8b ) ;
15531: LD_EXP 24
15535: PPUSH
15536: LD_STRING DO-AmBase-8b
15538: PPUSH
15539: CALL_OW 88
// end ; if IsInUnit ( Heike ) then
15543: LD_EXP 23
15547: PPUSH
15548: CALL_OW 310
15552: IFFALSE 15570
// CenterNowOnUnits ( IsInUnit ( Heike ) ) else
15554: LD_EXP 23
15558: PPUSH
15559: CALL_OW 310
15563: PPUSH
15564: CALL_OW 87
15568: GO 15579
// CenterNowOnUnits ( Heike ) ;
15570: LD_EXP 23
15574: PPUSH
15575: CALL_OW 87
// Say ( Heike , DH-AmBase-9 ) ;
15579: LD_EXP 23
15583: PPUSH
15584: LD_STRING DH-AmBase-9
15586: PPUSH
15587: CALL_OW 88
// DialogueOff ;
15591: CALL_OW 7
// spotByAmerican := true ;
15595: LD_ADDR_EXP 8
15599: PUSH
15600: LD_INT 1
15602: ST_TO_ADDR
// ChangeMissionObjectives ( O2 ) ;
15603: LD_STRING O2
15605: PPUSH
15606: CALL_OW 337
// end ;
15610: END
// function TalkAboutLegion ; begin
15611: LD_INT 0
15613: PPUSH
// Say ( Heike , DH-Legion-1 ) ;
15614: LD_EXP 23
15618: PPUSH
15619: LD_STRING DH-Legion-1
15621: PPUSH
15622: CALL_OW 88
// Say ( Omar , DOm-Legion-2 ) ;
15626: LD_EXP 24
15630: PPUSH
15631: LD_STRING DOm-Legion-2
15633: PPUSH
15634: CALL_OW 88
// Say ( Heike , DH-Legion-3 ) ;
15638: LD_EXP 23
15642: PPUSH
15643: LD_STRING DH-Legion-3
15645: PPUSH
15646: CALL_OW 88
// Say ( Omar , DOm-Legion-4 ) ;
15650: LD_EXP 24
15654: PPUSH
15655: LD_STRING DOm-Legion-4
15657: PPUSH
15658: CALL_OW 88
// Say ( Heike , DH-Legion-5 ) ;
15662: LD_EXP 23
15666: PPUSH
15667: LD_STRING DH-Legion-5
15669: PPUSH
15670: CALL_OW 88
// Say ( Omar , DOm-Legion-6 ) ;
15674: LD_EXP 24
15678: PPUSH
15679: LD_STRING DOm-Legion-6
15681: PPUSH
15682: CALL_OW 88
// Say ( Heike , DH-Legion-7 ) ;
15686: LD_EXP 23
15690: PPUSH
15691: LD_STRING DH-Legion-7
15693: PPUSH
15694: CALL_OW 88
// end ;
15698: LD_VAR 0 1
15702: RET
// every 0 0$2 trigger gameActive and AreInArea ( [ Heike , Omar ] , legSpotNorthArea ) and not spotByLegion and not spotLegion do var i , un , veh ;
15703: LD_EXP 19
15707: PUSH
15708: LD_EXP 23
15712: PUSH
15713: LD_EXP 24
15717: PUSH
15718: EMPTY
15719: LIST
15720: LIST
15721: PPUSH
15722: LD_INT 22
15724: PPUSH
15725: CALL 11734 0 2
15729: AND
15730: PUSH
15731: LD_EXP 9
15735: NOT
15736: AND
15737: PUSH
15738: LD_EXP 10
15742: NOT
15743: AND
15744: IFFALSE 16229
15746: GO 15748
15748: DISABLE
15749: LD_INT 0
15751: PPUSH
15752: PPUSH
15753: PPUSH
// begin uc_side := 8 ;
15754: LD_ADDR_OWVAR 20
15758: PUSH
15759: LD_INT 8
15761: ST_TO_ADDR
// uc_nation := nation_american ;
15762: LD_ADDR_OWVAR 21
15766: PUSH
15767: LD_INT 1
15769: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 90 ) ;
15770: LD_INT 3
15772: PPUSH
15773: LD_INT 1
15775: PPUSH
15776: LD_INT 1
15778: PPUSH
15779: LD_INT 9
15781: PPUSH
15782: LD_INT 90
15784: PPUSH
15785: CALL 25507 0 5
// veh := CreateVehicle ;
15789: LD_ADDR_VAR 0 3
15793: PUSH
15794: CALL_OW 45
15798: ST_TO_ADDR
// legTanks := Join ( legTanks , veh ) ;
15799: LD_ADDR_EXP 43
15803: PUSH
15804: LD_EXP 43
15808: PPUSH
15809: LD_VAR 0 3
15813: PPUSH
15814: CALL 58358 0 2
15818: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
15819: LD_VAR 0 3
15823: PPUSH
15824: LD_INT 2
15826: PPUSH
15827: CALL_OW 233
// PlaceUnitXY ( veh , 126 , 18 , false ) ;
15831: LD_VAR 0 3
15835: PPUSH
15836: LD_INT 126
15838: PPUSH
15839: LD_INT 18
15841: PPUSH
15842: LD_INT 0
15844: PPUSH
15845: CALL_OW 48
// uc_nation := nation_arabian ;
15849: LD_ADDR_OWVAR 21
15853: PUSH
15854: LD_INT 2
15856: ST_TO_ADDR
// PrepareMechanic ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
15857: LD_INT 0
15859: PPUSH
15860: LD_INT 6
15862: PUSH
15863: LD_INT 7
15865: PUSH
15866: LD_INT 8
15868: PUSH
15869: LD_INT 9
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: PUSH
15878: LD_OWVAR 67
15882: ARRAY
15883: PPUSH
15884: CALL_OW 383
// un := CreateHuman ;
15888: LD_ADDR_VAR 0 2
15892: PUSH
15893: CALL_OW 44
15897: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
15898: LD_ADDR_EXP 38
15902: PUSH
15903: LD_EXP 38
15907: PPUSH
15908: LD_VAR 0 2
15912: PPUSH
15913: CALL 58358 0 2
15917: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15918: LD_VAR 0 2
15922: PPUSH
15923: LD_VAR 0 3
15927: PPUSH
15928: CALL_OW 52
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
15932: LD_INT 0
15934: PPUSH
15935: LD_INT 6
15937: PUSH
15938: LD_INT 7
15940: PUSH
15941: LD_INT 8
15943: PUSH
15944: LD_INT 9
15946: PUSH
15947: EMPTY
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: PUSH
15953: LD_OWVAR 67
15957: ARRAY
15958: PPUSH
15959: CALL_OW 381
// for i := 1 to 3 do
15963: LD_ADDR_VAR 0 1
15967: PUSH
15968: DOUBLE
15969: LD_INT 1
15971: DEC
15972: ST_TO_ADDR
15973: LD_INT 3
15975: PUSH
15976: FOR_TO
15977: IFFALSE 16044
// begin un := CreateHuman ;
15979: LD_ADDR_VAR 0 2
15983: PUSH
15984: CALL_OW 44
15988: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
15989: LD_ADDR_EXP 38
15993: PUSH
15994: LD_EXP 38
15998: PPUSH
15999: LD_VAR 0 2
16003: PPUSH
16004: CALL 58358 0 2
16008: ST_TO_ADDR
// SetDir ( un , 2 ) ;
16009: LD_VAR 0 2
16013: PPUSH
16014: LD_INT 2
16016: PPUSH
16017: CALL_OW 233
// PlaceUnitXYR ( un , 126 , 18 , 4 , false ) ;
16021: LD_VAR 0 2
16025: PPUSH
16026: LD_INT 126
16028: PPUSH
16029: LD_INT 18
16031: PPUSH
16032: LD_INT 4
16034: PPUSH
16035: LD_INT 0
16037: PPUSH
16038: CALL_OW 50
// end ;
16042: GO 15976
16044: POP
16045: POP
// wait ( 0 0$01 ) ;
16046: LD_INT 35
16048: PPUSH
16049: CALL_OW 67
// DialogueOn ;
16053: CALL_OW 6
// PlaceSeeing ( 126 , 18 , 2 , - 16 ) ;
16057: LD_INT 126
16059: PPUSH
16060: LD_INT 18
16062: PPUSH
16063: LD_INT 2
16065: PPUSH
16066: LD_INT 16
16068: NEG
16069: PPUSH
16070: CALL_OW 330
// CenterNowOnXY ( 126 , 18 ) ;
16074: LD_INT 126
16076: PPUSH
16077: LD_INT 18
16079: PPUSH
16080: CALL_OW 86
// TalkAboutLegion ;
16084: CALL 15611 0 0
// RemoveSeeing ( 126 , 18 , 2 ) ;
16088: LD_INT 126
16090: PPUSH
16091: LD_INT 18
16093: PPUSH
16094: LD_INT 2
16096: PPUSH
16097: CALL_OW 331
// DialogueOff ;
16101: CALL_OW 7
// spotLegion := true ;
16105: LD_ADDR_EXP 10
16109: PUSH
16110: LD_INT 1
16112: ST_TO_ADDR
// ComAgressiveMove ( legEForces , 164 , 47 ) ;
16113: LD_EXP 38
16117: PPUSH
16118: LD_INT 164
16120: PPUSH
16121: LD_INT 47
16123: PPUSH
16124: CALL_OW 114
// AddComAgressiveMove ( legEForces , 179 , 20 ) ;
16128: LD_EXP 38
16132: PPUSH
16133: LD_INT 179
16135: PPUSH
16136: LD_INT 20
16138: PPUSH
16139: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
16143: LD_INT 35
16145: PPUSH
16146: CALL_OW 67
// until not UnitFilter ( legEForces , [ f_hastask ] ) or not UnitFilter ( legEForces , [ f_ok ] ) ;
16150: LD_EXP 38
16154: PPUSH
16155: LD_INT 60
16157: PUSH
16158: EMPTY
16159: LIST
16160: PPUSH
16161: CALL_OW 72
16165: NOT
16166: PUSH
16167: LD_EXP 38
16171: PPUSH
16172: LD_INT 50
16174: PUSH
16175: EMPTY
16176: LIST
16177: PPUSH
16178: CALL_OW 72
16182: NOT
16183: OR
16184: IFFALSE 16143
// if not UnitFilter ( legEForces , [ f_ok ] ) then
16186: LD_EXP 38
16190: PPUSH
16191: LD_INT 50
16193: PUSH
16194: EMPTY
16195: LIST
16196: PPUSH
16197: CALL_OW 72
16201: NOT
16202: IFFALSE 16206
// exit ;
16204: GO 16229
// legForces := legForces union legEForces ;
16206: LD_ADDR_EXP 37
16210: PUSH
16211: LD_EXP 37
16215: PUSH
16216: LD_EXP 38
16220: UNION
16221: ST_TO_ADDR
// legEForces := [ ] ;
16222: LD_ADDR_EXP 38
16226: PUSH
16227: EMPTY
16228: ST_TO_ADDR
// end ;
16229: PPOPN 3
16231: END
// every 0 0$2 trigger gameActive and AreInArea ( [ Heike , Omar ] , legSpotSouthArea ) and not spotByLegion and not spotLegion do var i , un , veh ;
16232: LD_EXP 19
16236: PUSH
16237: LD_EXP 23
16241: PUSH
16242: LD_EXP 24
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: PPUSH
16251: LD_INT 23
16253: PPUSH
16254: CALL 11734 0 2
16258: AND
16259: PUSH
16260: LD_EXP 9
16264: NOT
16265: AND
16266: PUSH
16267: LD_EXP 10
16271: NOT
16272: AND
16273: IFFALSE 16758
16275: GO 16277
16277: DISABLE
16278: LD_INT 0
16280: PPUSH
16281: PPUSH
16282: PPUSH
// begin uc_side := 8 ;
16283: LD_ADDR_OWVAR 20
16287: PUSH
16288: LD_INT 8
16290: ST_TO_ADDR
// uc_nation := nation_american ;
16291: LD_ADDR_OWVAR 21
16295: PUSH
16296: LD_INT 1
16298: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 90 ) ;
16299: LD_INT 3
16301: PPUSH
16302: LD_INT 1
16304: PPUSH
16305: LD_INT 1
16307: PPUSH
16308: LD_INT 9
16310: PPUSH
16311: LD_INT 90
16313: PPUSH
16314: CALL 25507 0 5
// veh := CreateVehicle ;
16318: LD_ADDR_VAR 0 3
16322: PUSH
16323: CALL_OW 45
16327: ST_TO_ADDR
// legTanks := Join ( legTanks , veh ) ;
16328: LD_ADDR_EXP 43
16332: PUSH
16333: LD_EXP 43
16337: PPUSH
16338: LD_VAR 0 3
16342: PPUSH
16343: CALL 58358 0 2
16347: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
16348: LD_VAR 0 3
16352: PPUSH
16353: LD_INT 3
16355: PPUSH
16356: CALL_OW 233
// PlaceUnitXY ( veh , 224 , 57 , false ) ;
16360: LD_VAR 0 3
16364: PPUSH
16365: LD_INT 224
16367: PPUSH
16368: LD_INT 57
16370: PPUSH
16371: LD_INT 0
16373: PPUSH
16374: CALL_OW 48
// uc_nation := nation_arabian ;
16378: LD_ADDR_OWVAR 21
16382: PUSH
16383: LD_INT 2
16385: ST_TO_ADDR
// PrepareMechanic ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
16386: LD_INT 0
16388: PPUSH
16389: LD_INT 6
16391: PUSH
16392: LD_INT 7
16394: PUSH
16395: LD_INT 8
16397: PUSH
16398: LD_INT 9
16400: PUSH
16401: EMPTY
16402: LIST
16403: LIST
16404: LIST
16405: LIST
16406: PUSH
16407: LD_OWVAR 67
16411: ARRAY
16412: PPUSH
16413: CALL_OW 383
// un := CreateHuman ;
16417: LD_ADDR_VAR 0 2
16421: PUSH
16422: CALL_OW 44
16426: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
16427: LD_ADDR_EXP 38
16431: PUSH
16432: LD_EXP 38
16436: PPUSH
16437: LD_VAR 0 2
16441: PPUSH
16442: CALL 58358 0 2
16446: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16447: LD_VAR 0 2
16451: PPUSH
16452: LD_VAR 0 3
16456: PPUSH
16457: CALL_OW 52
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
16461: LD_INT 0
16463: PPUSH
16464: LD_INT 6
16466: PUSH
16467: LD_INT 7
16469: PUSH
16470: LD_INT 8
16472: PUSH
16473: LD_INT 9
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: PUSH
16482: LD_OWVAR 67
16486: ARRAY
16487: PPUSH
16488: CALL_OW 381
// for i := 1 to 3 do
16492: LD_ADDR_VAR 0 1
16496: PUSH
16497: DOUBLE
16498: LD_INT 1
16500: DEC
16501: ST_TO_ADDR
16502: LD_INT 3
16504: PUSH
16505: FOR_TO
16506: IFFALSE 16573
// begin un := CreateHuman ;
16508: LD_ADDR_VAR 0 2
16512: PUSH
16513: CALL_OW 44
16517: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
16518: LD_ADDR_EXP 38
16522: PUSH
16523: LD_EXP 38
16527: PPUSH
16528: LD_VAR 0 2
16532: PPUSH
16533: CALL 58358 0 2
16537: ST_TO_ADDR
// SetDir ( un , 3 ) ;
16538: LD_VAR 0 2
16542: PPUSH
16543: LD_INT 3
16545: PPUSH
16546: CALL_OW 233
// PlaceUnitXYR ( un , 224 , 57 , 4 , false ) ;
16550: LD_VAR 0 2
16554: PPUSH
16555: LD_INT 224
16557: PPUSH
16558: LD_INT 57
16560: PPUSH
16561: LD_INT 4
16563: PPUSH
16564: LD_INT 0
16566: PPUSH
16567: CALL_OW 50
// end ;
16571: GO 16505
16573: POP
16574: POP
// wait ( 0 0$01 ) ;
16575: LD_INT 35
16577: PPUSH
16578: CALL_OW 67
// DialogueOn ;
16582: CALL_OW 6
// PlaceSeeing ( 224 , 57 , 2 , - 16 ) ;
16586: LD_INT 224
16588: PPUSH
16589: LD_INT 57
16591: PPUSH
16592: LD_INT 2
16594: PPUSH
16595: LD_INT 16
16597: NEG
16598: PPUSH
16599: CALL_OW 330
// CenterNowOnXY ( 224 , 57 ) ;
16603: LD_INT 224
16605: PPUSH
16606: LD_INT 57
16608: PPUSH
16609: CALL_OW 86
// TalkAboutLegion ;
16613: CALL 15611 0 0
// RemoveSeeing ( 224 , 57 , 2 ) ;
16617: LD_INT 224
16619: PPUSH
16620: LD_INT 57
16622: PPUSH
16623: LD_INT 2
16625: PPUSH
16626: CALL_OW 331
// DialogueOff ;
16630: CALL_OW 7
// spotLegion := true ;
16634: LD_ADDR_EXP 10
16638: PUSH
16639: LD_INT 1
16641: ST_TO_ADDR
// ComAgressiveMove ( legEForces , 164 , 47 ) ;
16642: LD_EXP 38
16646: PPUSH
16647: LD_INT 164
16649: PPUSH
16650: LD_INT 47
16652: PPUSH
16653: CALL_OW 114
// AddComAgressiveMove ( legEForces , 179 , 20 ) ;
16657: LD_EXP 38
16661: PPUSH
16662: LD_INT 179
16664: PPUSH
16665: LD_INT 20
16667: PPUSH
16668: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
16672: LD_INT 35
16674: PPUSH
16675: CALL_OW 67
// until not UnitFilter ( legEForces , [ f_hastask ] ) or not UnitFilter ( legEForces , [ f_ok ] ) ;
16679: LD_EXP 38
16683: PPUSH
16684: LD_INT 60
16686: PUSH
16687: EMPTY
16688: LIST
16689: PPUSH
16690: CALL_OW 72
16694: NOT
16695: PUSH
16696: LD_EXP 38
16700: PPUSH
16701: LD_INT 50
16703: PUSH
16704: EMPTY
16705: LIST
16706: PPUSH
16707: CALL_OW 72
16711: NOT
16712: OR
16713: IFFALSE 16672
// if not UnitFilter ( legEForces , [ f_ok ] ) then
16715: LD_EXP 38
16719: PPUSH
16720: LD_INT 50
16722: PUSH
16723: EMPTY
16724: LIST
16725: PPUSH
16726: CALL_OW 72
16730: NOT
16731: IFFALSE 16735
// exit ;
16733: GO 16758
// legForces := legForces union legEForces ;
16735: LD_ADDR_EXP 37
16739: PUSH
16740: LD_EXP 37
16744: PUSH
16745: LD_EXP 38
16749: UNION
16750: ST_TO_ADDR
// legEForces := [ ] ;
16751: LD_ADDR_EXP 38
16755: PUSH
16756: EMPTY
16757: ST_TO_ADDR
// end ;
16758: PPOPN 3
16760: END
// every 0 0$1 trigger gameActive and ( See ( 8 , Omar ) or See ( 8 , Heike ) or spotByLegion ) and IsOk ( Heike ) and IsOk ( Omar ) do
16761: LD_EXP 19
16765: PUSH
16766: LD_INT 8
16768: PPUSH
16769: LD_EXP 24
16773: PPUSH
16774: CALL_OW 292
16778: PUSH
16779: LD_INT 8
16781: PPUSH
16782: LD_EXP 23
16786: PPUSH
16787: CALL_OW 292
16791: OR
16792: PUSH
16793: LD_EXP 9
16797: OR
16798: AND
16799: PUSH
16800: LD_EXP 23
16804: PPUSH
16805: CALL_OW 302
16809: AND
16810: PUSH
16811: LD_EXP 24
16815: PPUSH
16816: CALL_OW 302
16820: AND
16821: IFFALSE 16962
16823: GO 16825
16825: DISABLE
// begin DialogueOn ;
16826: CALL_OW 6
// SayRadio ( Farmer , DF-Spot-1 ) ;
16830: LD_EXP 36
16834: PPUSH
16835: LD_STRING DF-Spot-1
16837: PPUSH
16838: CALL_OW 94
// Say ( Heike , DH-Spot-2 ) ;
16842: LD_EXP 23
16846: PPUSH
16847: LD_STRING DH-Spot-2
16849: PPUSH
16850: CALL_OW 88
// SayRadio ( Farmer , DF-Spot-3 ) ;
16854: LD_EXP 36
16858: PPUSH
16859: LD_STRING DF-Spot-3
16861: PPUSH
16862: CALL_OW 94
// Say ( Heike , DH-Spot-4 ) ;
16866: LD_EXP 23
16870: PPUSH
16871: LD_STRING DH-Spot-4
16873: PPUSH
16874: CALL_OW 88
// Say ( Omar , DOm-Spot-5 ) ;
16878: LD_EXP 24
16882: PPUSH
16883: LD_STRING DOm-Spot-5
16885: PPUSH
16886: CALL_OW 88
// SayRadio ( Farmer , DF-Spot-6 ) ;
16890: LD_EXP 36
16894: PPUSH
16895: LD_STRING DF-Spot-6
16897: PPUSH
16898: CALL_OW 94
// SayRadio ( Farmer , DF-Spot-7 ) ;
16902: LD_EXP 36
16906: PPUSH
16907: LD_STRING DF-Spot-7
16909: PPUSH
16910: CALL_OW 94
// SayRadio ( Farmer , DF-Spot-8 ) ;
16914: LD_EXP 36
16918: PPUSH
16919: LD_STRING DF-Spot-8
16921: PPUSH
16922: CALL_OW 94
// Say ( Heike , DH-Spot-9 ) ;
16926: LD_EXP 23
16930: PPUSH
16931: LD_STRING DH-Spot-9
16933: PPUSH
16934: CALL_OW 88
// SayRadio ( Farmer , DF-Spot-10 ) ;
16938: LD_EXP 36
16942: PPUSH
16943: LD_STRING DF-Spot-10
16945: PPUSH
16946: CALL_OW 94
// DialogueOff ;
16950: CALL_OW 7
// spotByLegion := true ;
16954: LD_ADDR_EXP 9
16958: PUSH
16959: LD_INT 1
16961: ST_TO_ADDR
// end ;
16962: END
// every 0 0$1 trigger gameActive and ( spotByLegion or spotLegion ) do
16963: LD_EXP 19
16967: PUSH
16968: LD_EXP 9
16972: PUSH
16973: LD_EXP 10
16977: OR
16978: AND
16979: IFFALSE 16991
16981: GO 16983
16983: DISABLE
// ChangeMissionObjectives ( O3 ) ;
16984: LD_STRING O3
16986: PPUSH
16987: CALL_OW 337
16991: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_ok ] ] ) = 0 do
16992: LD_EXP 19
16996: PUSH
16997: LD_INT 22
16999: PUSH
17000: LD_INT 8
17002: PUSH
17003: EMPTY
17004: LIST
17005: LIST
17006: PUSH
17007: LD_INT 21
17009: PUSH
17010: LD_INT 1
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: PUSH
17017: LD_INT 50
17019: PUSH
17020: EMPTY
17021: LIST
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: LIST
17027: PPUSH
17028: CALL_OW 69
17032: PUSH
17033: LD_INT 0
17035: EQUAL
17036: AND
17037: IFFALSE 17135
17039: GO 17041
17041: DISABLE
// begin legScriptActive := false ;
17042: LD_ADDR_EXP 4
17046: PUSH
17047: LD_INT 0
17049: ST_TO_ADDR
// if not americanDestroyed then
17050: LD_EXP 11
17054: NOT
17055: IFFALSE 17064
// SetAchievement ( ACH_REVANGE ) ;
17057: LD_STRING ACH_REVANGE
17059: PPUSH
17060: CALL_OW 543
// legionDestroyed := true ;
17064: LD_ADDR_EXP 12
17068: PUSH
17069: LD_INT 1
17071: ST_TO_ADDR
// DialogueOn ;
17072: CALL_OW 6
// SayRadio ( Farmer , DF-LegDes-1 ) ;
17076: LD_EXP 36
17080: PPUSH
17081: LD_STRING DF-LegDes-1
17083: PPUSH
17084: CALL_OW 94
// Say ( Heike , DH-LegDes-2 ) ;
17088: LD_EXP 23
17092: PPUSH
17093: LD_STRING DH-LegDes-2
17095: PPUSH
17096: CALL_OW 88
// SayRadio ( Farmer , DF-LegDes-3 ) ;
17100: LD_EXP 36
17104: PPUSH
17105: LD_STRING DF-LegDes-3
17107: PPUSH
17108: CALL_OW 94
// Say ( Heike , DH-LegDes-4 ) ;
17112: LD_EXP 23
17116: PPUSH
17117: LD_STRING DH-LegDes-4
17119: PPUSH
17120: CALL_OW 88
// DialogueOff ;
17124: CALL_OW 7
// ChangeMissionObjectives ( O5 ) ;
17128: LD_STRING O5
17130: PPUSH
17131: CALL_OW 337
// end ;
17135: END
// every 0 0$1 trigger gameActive and UnitFilter ( amForces , [ [ f_type , unit_human ] , [ f_ok ] ] ) < 6 do var i , tmp ;
17136: LD_EXP 19
17140: PUSH
17141: LD_EXP 27
17145: PPUSH
17146: LD_INT 21
17148: PUSH
17149: LD_INT 1
17151: PUSH
17152: EMPTY
17153: LIST
17154: LIST
17155: PUSH
17156: LD_INT 50
17158: PUSH
17159: EMPTY
17160: LIST
17161: PUSH
17162: EMPTY
17163: LIST
17164: LIST
17165: PPUSH
17166: CALL_OW 72
17170: PUSH
17171: LD_INT 6
17173: LESS
17174: AND
17175: IFFALSE 17423
17177: GO 17179
17179: DISABLE
17180: LD_INT 0
17182: PPUSH
17183: PPUSH
// begin amScriptActive := false ;
17184: LD_ADDR_EXP 3
17188: PUSH
17189: LD_INT 0
17191: ST_TO_ADDR
// tmp := UnitFilter ( amForces , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
17192: LD_ADDR_VAR 0 2
17196: PUSH
17197: LD_EXP 27
17201: PPUSH
17202: LD_INT 21
17204: PUSH
17205: LD_INT 1
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: PUSH
17212: LD_INT 50
17214: PUSH
17215: EMPTY
17216: LIST
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: PPUSH
17222: CALL_OW 72
17226: ST_TO_ADDR
// for i in tmp do
17227: LD_ADDR_VAR 0 1
17231: PUSH
17232: LD_VAR 0 2
17236: PUSH
17237: FOR_IN
17238: IFFALSE 17266
// begin ComExit ( i ) ;
17240: LD_VAR 0 1
17244: PPUSH
17245: CALL 58756 0 1
// AddComMoveXY ( i , 63 , 124 ) ;
17249: LD_VAR 0 1
17253: PPUSH
17254: LD_INT 63
17256: PPUSH
17257: LD_INT 124
17259: PPUSH
17260: CALL_OW 171
// end ;
17264: GO 17237
17266: POP
17267: POP
// wait ( 0 0$2 ) ;
17268: LD_INT 70
17270: PPUSH
17271: CALL_OW 67
// americanDestroyed := true ;
17275: LD_ADDR_EXP 11
17279: PUSH
17280: LD_INT 1
17282: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17283: LD_INT 35
17285: PPUSH
17286: CALL_OW 67
// tmp := UnitFilter ( amForces , [ [ f_type , unit_human ] , [ f_ok ] ] ) union UnitFilter ( amPatrol , [ f_ok ] ) ;
17290: LD_ADDR_VAR 0 2
17294: PUSH
17295: LD_EXP 27
17299: PPUSH
17300: LD_INT 21
17302: PUSH
17303: LD_INT 1
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: PUSH
17310: LD_INT 50
17312: PUSH
17313: EMPTY
17314: LIST
17315: PUSH
17316: EMPTY
17317: LIST
17318: LIST
17319: PPUSH
17320: CALL_OW 72
17324: PUSH
17325: LD_EXP 35
17329: PPUSH
17330: LD_INT 50
17332: PUSH
17333: EMPTY
17334: LIST
17335: PPUSH
17336: CALL_OW 72
17340: UNION
17341: ST_TO_ADDR
// for i in tmp do
17342: LD_ADDR_VAR 0 1
17346: PUSH
17347: LD_VAR 0 2
17351: PUSH
17352: FOR_IN
17353: IFFALSE 17414
// begin if IsAt ( i , 63 , 124 ) or IsInArea ( i , amEscapeArea ) then
17355: LD_VAR 0 1
17359: PPUSH
17360: LD_INT 63
17362: PPUSH
17363: LD_INT 124
17365: PPUSH
17366: CALL_OW 307
17370: PUSH
17371: LD_VAR 0 1
17375: PPUSH
17376: LD_INT 25
17378: PPUSH
17379: CALL_OW 308
17383: OR
17384: IFFALSE 17397
// RemoveUnit ( i ) else
17386: LD_VAR 0 1
17390: PPUSH
17391: CALL_OW 64
17395: GO 17412
// ComMoveXY ( i , 63 , 124 ) ;
17397: LD_VAR 0 1
17401: PPUSH
17402: LD_INT 63
17404: PPUSH
17405: LD_INT 124
17407: PPUSH
17408: CALL_OW 111
// end ;
17412: GO 17352
17414: POP
17415: POP
// until not tmp ;
17416: LD_VAR 0 2
17420: NOT
17421: IFFALSE 17283
// end ;
17423: PPOPN 2
17425: END
// every 0 0$1 trigger gameActive and americanDestroyed and IsOk ( Heike ) and IsOk ( Omar ) do var i , un , veh ;
17426: LD_EXP 19
17430: PUSH
17431: LD_EXP 11
17435: AND
17436: PUSH
17437: LD_EXP 23
17441: PPUSH
17442: CALL_OW 302
17446: AND
17447: PUSH
17448: LD_EXP 24
17452: PPUSH
17453: CALL_OW 302
17457: AND
17458: IFFALSE 17948
17460: GO 17462
17462: DISABLE
17463: LD_INT 0
17465: PPUSH
17466: PPUSH
17467: PPUSH
// begin DialogueOn ;
17468: CALL_OW 6
// Say ( Heike , DH-Victory-1 ) ;
17472: LD_EXP 23
17476: PPUSH
17477: LD_STRING DH-Victory-1
17479: PPUSH
17480: CALL_OW 88
// Say ( Omar , DOm-Victory-2 ) ;
17484: LD_EXP 24
17488: PPUSH
17489: LD_STRING DOm-Victory-2
17491: PPUSH
17492: CALL_OW 88
// Say ( Omar , DOm-Victory-3 ) ;
17496: LD_EXP 24
17500: PPUSH
17501: LD_STRING DOm-Victory-3
17503: PPUSH
17504: CALL_OW 88
// Say ( Heike , DH-Victory-4 ) ;
17508: LD_EXP 23
17512: PPUSH
17513: LD_STRING DH-Victory-4
17515: PPUSH
17516: CALL_OW 88
// Say ( Omar , DOm-Victory-5 ) ;
17520: LD_EXP 24
17524: PPUSH
17525: LD_STRING DOm-Victory-5
17527: PPUSH
17528: CALL_OW 88
// Say ( Omar , DOm-Victory-6 ) ;
17532: LD_EXP 24
17536: PPUSH
17537: LD_STRING DOm-Victory-6
17539: PPUSH
17540: CALL_OW 88
// DialogueOff ;
17544: CALL_OW 7
// ChangeMissionObjectives ( O4 ) ;
17548: LD_STRING O4
17550: PPUSH
17551: CALL_OW 337
// canFinish := true ;
17555: LD_ADDR_EXP 18
17559: PUSH
17560: LD_INT 1
17562: ST_TO_ADDR
// SetAreaMapShow ( finalArea , 1 ) ;
17563: LD_INT 24
17565: PPUSH
17566: LD_INT 1
17568: PPUSH
17569: CALL_OW 424
// if not legionDestroyed then
17573: LD_EXP 12
17577: NOT
17578: IFFALSE 17948
// begin uc_nation := nation_arabian ;
17580: LD_ADDR_OWVAR 21
17584: PUSH
17585: LD_INT 2
17587: ST_TO_ADDR
// uc_side := 8 ;
17588: LD_ADDR_OWVAR 20
17592: PUSH
17593: LD_INT 8
17595: ST_TO_ADDR
// for i := 1 to 4 do
17596: LD_ADDR_VAR 0 1
17600: PUSH
17601: DOUBLE
17602: LD_INT 1
17604: DEC
17605: ST_TO_ADDR
17606: LD_INT 4
17608: PUSH
17609: FOR_TO
17610: IFFALSE 17691
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
17612: LD_INT 0
17614: PPUSH
17615: LD_INT 8
17617: PUSH
17618: LD_INT 9
17620: PUSH
17621: LD_INT 10
17623: PUSH
17624: LD_INT 10
17626: PUSH
17627: EMPTY
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: PUSH
17633: LD_OWVAR 67
17637: ARRAY
17638: PPUSH
17639: CALL_OW 381
// un := CreateHuman ;
17643: LD_ADDR_VAR 0 2
17647: PUSH
17648: CALL_OW 44
17652: ST_TO_ADDR
// SetDir ( un , 3 ) ;
17653: LD_VAR 0 2
17657: PPUSH
17658: LD_INT 3
17660: PPUSH
17661: CALL_OW 233
// PlaceUnitArea ( un , legDefArea , false ) ;
17665: LD_VAR 0 2
17669: PPUSH
17670: LD_INT 26
17672: PPUSH
17673: LD_INT 0
17675: PPUSH
17676: CALL_OW 49
// ComCrawl ( un ) ;
17680: LD_VAR 0 2
17684: PPUSH
17685: CALL_OW 137
// end ;
17689: GO 17609
17691: POP
17692: POP
// for i := 1 to 3 do
17693: LD_ADDR_VAR 0 1
17697: PUSH
17698: DOUBLE
17699: LD_INT 1
17701: DEC
17702: ST_TO_ADDR
17703: LD_INT 3
17705: PUSH
17706: FOR_TO
17707: IFFALSE 17791
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
17709: LD_INT 0
17711: PPUSH
17712: LD_INT 8
17714: PUSH
17715: LD_INT 9
17717: PUSH
17718: LD_INT 10
17720: PUSH
17721: LD_INT 10
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: PUSH
17730: LD_OWVAR 67
17734: ARRAY
17735: PPUSH
17736: CALL_OW 381
// un := CreateHuman ;
17740: LD_ADDR_VAR 0 2
17744: PUSH
17745: CALL_OW 44
17749: ST_TO_ADDR
// SetClass ( un , class_mortar ) ;
17750: LD_VAR 0 2
17754: PPUSH
17755: LD_INT 8
17757: PPUSH
17758: CALL_OW 336
// SetDir ( un , 3 ) ;
17762: LD_VAR 0 2
17766: PPUSH
17767: LD_INT 3
17769: PPUSH
17770: CALL_OW 233
// PlaceUnitArea ( un , legDefArea , false ) ;
17774: LD_VAR 0 2
17778: PPUSH
17779: LD_INT 26
17781: PPUSH
17782: LD_INT 0
17784: PPUSH
17785: CALL_OW 49
// end ;
17789: GO 17706
17791: POP
17792: POP
// for i := 1 to 2 do
17793: LD_ADDR_VAR 0 1
17797: PUSH
17798: DOUBLE
17799: LD_INT 1
17801: DEC
17802: ST_TO_ADDR
17803: LD_INT 2
17805: PUSH
17806: FOR_TO
17807: IFFALSE 17946
// begin uc_side := 8 ;
17809: LD_ADDR_OWVAR 20
17813: PUSH
17814: LD_INT 8
17816: ST_TO_ADDR
// uc_nation := nation_american ;
17817: LD_ADDR_OWVAR 21
17821: PUSH
17822: LD_INT 1
17824: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_combustion , control_manual , us_laser , 90 ) ;
17825: LD_INT 4
17827: PPUSH
17828: LD_INT 1
17830: PPUSH
17831: LD_INT 1
17833: PPUSH
17834: LD_INT 9
17836: PPUSH
17837: LD_INT 90
17839: PPUSH
17840: CALL 25507 0 5
// veh := CreateVehicle ;
17844: LD_ADDR_VAR 0 3
17848: PUSH
17849: CALL_OW 45
17853: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
17854: LD_VAR 0 3
17858: PPUSH
17859: LD_INT 3
17861: PPUSH
17862: CALL_OW 233
// PlaceUnitArea ( veh , legVDefArea , false ) ;
17866: LD_VAR 0 3
17870: PPUSH
17871: LD_INT 27
17873: PPUSH
17874: LD_INT 0
17876: PPUSH
17877: CALL_OW 49
// uc_nation := nation_arabian ;
17881: LD_ADDR_OWVAR 21
17885: PUSH
17886: LD_INT 2
17888: ST_TO_ADDR
// PrepareMechanic ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
17889: LD_INT 0
17891: PPUSH
17892: LD_INT 8
17894: PUSH
17895: LD_INT 9
17897: PUSH
17898: LD_INT 10
17900: PUSH
17901: LD_INT 10
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: PUSH
17910: LD_OWVAR 67
17914: ARRAY
17915: PPUSH
17916: CALL_OW 383
// un := CreateHuman ;
17920: LD_ADDR_VAR 0 2
17924: PUSH
17925: CALL_OW 44
17929: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17930: LD_VAR 0 2
17934: PPUSH
17935: LD_VAR 0 3
17939: PPUSH
17940: CALL_OW 52
// end ;
17944: GO 17806
17946: POP
17947: POP
// end ; end ;
17948: PPOPN 3
17950: END
// every 0 0$1 trigger gameActive and canFinish and AreInArea ( [ Omar ] , finalArea ) and AreInArea ( [ Heike ] , finalArea ) do
17951: LD_EXP 19
17955: PUSH
17956: LD_EXP 18
17960: AND
17961: PUSH
17962: LD_EXP 24
17966: PUSH
17967: EMPTY
17968: LIST
17969: PPUSH
17970: LD_INT 24
17972: PPUSH
17973: CALL 11734 0 2
17977: AND
17978: PUSH
17979: LD_EXP 23
17983: PUSH
17984: EMPTY
17985: LIST
17986: PPUSH
17987: LD_INT 24
17989: PPUSH
17990: CALL 11734 0 2
17994: AND
17995: IFFALSE 18168
17997: GO 17999
17999: DISABLE
// begin if tick <= 50 50$00 then
18000: LD_OWVAR 1
18004: PUSH
18005: LD_INT 105000
18007: LESSEQUAL
18008: IFFALSE 18017
// SetAchievement ( ACH_HSPEED_10 ) ;
18010: LD_STRING ACH_HSPEED_10
18012: PPUSH
18013: CALL_OW 543
// if legionDestroyed then
18017: LD_EXP 12
18021: IFFALSE 18035
// AddMedal ( med1 , 1 ) else
18023: LD_STRING med1
18025: PPUSH
18026: LD_INT 1
18028: PPUSH
18029: CALL_OW 101
18033: GO 18046
// AddMedal ( med1 , - 1 ) ;
18035: LD_STRING med1
18037: PPUSH
18038: LD_INT 1
18040: NEG
18041: PPUSH
18042: CALL_OW 101
// if tick <= [ 90 90$00 , 80 80$00 , 70 70$00 , 60 60$00 ] [ Difficulty ] then
18046: LD_OWVAR 1
18050: PUSH
18051: LD_INT 189000
18053: PUSH
18054: LD_INT 168000
18056: PUSH
18057: LD_INT 147000
18059: PUSH
18060: LD_INT 126000
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: PUSH
18069: LD_OWVAR 67
18073: ARRAY
18074: LESSEQUAL
18075: IFFALSE 18089
// AddMedal ( med2 , 1 ) else
18077: LD_STRING med2
18079: PPUSH
18080: LD_INT 1
18082: PPUSH
18083: CALL_OW 101
18087: GO 18100
// AddMedal ( med2 , - 1 ) ;
18089: LD_STRING med2
18091: PPUSH
18092: LD_INT 1
18094: NEG
18095: PPUSH
18096: CALL_OW 101
// if hasApes + hasVehicles + hasTigers + hasMastodont + hasDrugs >= 3 then
18100: LD_EXP 16
18104: PUSH
18105: LD_EXP 14
18109: PLUS
18110: PUSH
18111: LD_EXP 15
18115: PLUS
18116: PUSH
18117: LD_EXP 13
18121: PLUS
18122: PUSH
18123: LD_EXP 17
18127: PLUS
18128: PUSH
18129: LD_INT 3
18131: GREATEREQUAL
18132: IFFALSE 18146
// AddMedal ( med3 , 1 ) else
18134: LD_STRING med3
18136: PPUSH
18137: LD_INT 1
18139: PPUSH
18140: CALL_OW 101
18144: GO 18157
// AddMedal ( med3 , - 1 ) ;
18146: LD_STRING med3
18148: PPUSH
18149: LD_INT 1
18151: NEG
18152: PPUSH
18153: CALL_OW 101
// GiveMedals ( MAIN ) ;
18157: LD_STRING MAIN
18159: PPUSH
18160: CALL_OW 102
// YouWin ;
18164: CALL_OW 103
// end ; end_of_file
18168: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
18169: LD_VAR 0 1
18173: PPUSH
18174: CALL 79479 0 1
// if apeAmount and GetSide ( unit ) = 2 and ( GetControl ( unit ) = control_apeman or GetClass ( unit ) in [ class_apeman , class_apeman_soldier , class_apeman_engineer , class_apeman_kamikaze ] ) then
18178: LD_EXP 5
18182: PUSH
18183: LD_VAR 0 1
18187: PPUSH
18188: CALL_OW 255
18192: PUSH
18193: LD_INT 2
18195: EQUAL
18196: AND
18197: PUSH
18198: LD_VAR 0 1
18202: PPUSH
18203: CALL_OW 263
18207: PUSH
18208: LD_INT 5
18210: EQUAL
18211: PUSH
18212: LD_VAR 0 1
18216: PPUSH
18217: CALL_OW 257
18221: PUSH
18222: LD_INT 12
18224: PUSH
18225: LD_INT 15
18227: PUSH
18228: LD_INT 16
18230: PUSH
18231: LD_INT 17
18233: PUSH
18234: EMPTY
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: IN
18240: OR
18241: AND
18242: IFFALSE 18312
// begin apeAmount := Dec ( apeAmount ) ;
18244: LD_ADDR_EXP 5
18248: PUSH
18249: LD_EXP 5
18253: PPUSH
18254: CALL 59741 0 1
18258: ST_TO_ADDR
// wait ( rand ( 0 0$1 , 1 1$00 ) ) ;
18259: LD_INT 35
18261: PPUSH
18262: LD_INT 2100
18264: PPUSH
18265: CALL_OW 12
18269: PPUSH
18270: CALL_OW 67
// uc_side := 0 ;
18274: LD_ADDR_OWVAR 20
18278: PUSH
18279: LD_INT 0
18281: ST_TO_ADDR
// uc_nation := nation_nature ;
18282: LD_ADDR_OWVAR 21
18286: PUSH
18287: LD_INT 0
18289: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
18290: LD_INT 0
18292: PPUSH
18293: CALL 54626 0 1
// PlaceUnitArea ( CreateHuman , apeArea , false ) ;
18297: CALL_OW 44
18301: PPUSH
18302: LD_INT 6
18304: PPUSH
18305: LD_INT 0
18307: PPUSH
18308: CALL_OW 49
// end ; if unit = Heike then
18312: LD_VAR 0 1
18316: PUSH
18317: LD_EXP 23
18321: EQUAL
18322: IFFALSE 18331
// YouLost ( Heike ) ;
18324: LD_STRING Heike
18326: PPUSH
18327: CALL_OW 104
// if unit = Omar then
18331: LD_VAR 0 1
18335: PUSH
18336: LD_EXP 24
18340: EQUAL
18341: IFFALSE 18350
// YouLost ( Omar ) ;
18343: LD_STRING Omar
18345: PPUSH
18346: CALL_OW 104
// if unit in amForces then
18350: LD_VAR 0 1
18354: PUSH
18355: LD_EXP 27
18359: IN
18360: IFFALSE 18378
// amForces := amForces diff unit ;
18362: LD_ADDR_EXP 27
18366: PUSH
18367: LD_EXP 27
18371: PUSH
18372: LD_VAR 0 1
18376: DIFF
18377: ST_TO_ADDR
// if unit in amTanks then
18378: LD_VAR 0 1
18382: PUSH
18383: LD_EXP 32
18387: IN
18388: IFFALSE 18406
// amTanks := amTanks diff unit ;
18390: LD_ADDR_EXP 32
18394: PUSH
18395: LD_EXP 32
18399: PUSH
18400: LD_VAR 0 1
18404: DIFF
18405: ST_TO_ADDR
// if unit in amPatrol then
18406: LD_VAR 0 1
18410: PUSH
18411: LD_EXP 35
18415: IN
18416: IFFALSE 18434
// amPatrol := amPatrol diff unit ;
18418: LD_ADDR_EXP 35
18422: PUSH
18423: LD_EXP 35
18427: PUSH
18428: LD_VAR 0 1
18432: DIFF
18433: ST_TO_ADDR
// if GetBType ( unit ) in [ b_bunker , b_turret ] and GetSide ( unit ) = 1 then
18434: LD_VAR 0 1
18438: PPUSH
18439: CALL_OW 266
18443: PUSH
18444: LD_INT 32
18446: PUSH
18447: LD_INT 33
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: IN
18454: PUSH
18455: LD_VAR 0 1
18459: PPUSH
18460: CALL_OW 255
18464: PUSH
18465: LD_INT 1
18467: EQUAL
18468: AND
18469: IFFALSE 18532
// amBuildings := Join ( amBuildings , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
18471: LD_ADDR_EXP 31
18475: PUSH
18476: LD_EXP 31
18480: PPUSH
18481: LD_VAR 0 1
18485: PPUSH
18486: CALL_OW 266
18490: PUSH
18491: LD_VAR 0 1
18495: PPUSH
18496: CALL_OW 250
18500: PUSH
18501: LD_VAR 0 1
18505: PPUSH
18506: CALL_OW 251
18510: PUSH
18511: LD_VAR 0 1
18515: PPUSH
18516: CALL_OW 254
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: PPUSH
18527: CALL 58358 0 2
18531: ST_TO_ADDR
// if unit in legForces then
18532: LD_VAR 0 1
18536: PUSH
18537: LD_EXP 37
18541: IN
18542: IFFALSE 18560
// legForces := legForces diff unit ;
18544: LD_ADDR_EXP 37
18548: PUSH
18549: LD_EXP 37
18553: PUSH
18554: LD_VAR 0 1
18558: DIFF
18559: ST_TO_ADDR
// if unit in legTanks then
18560: LD_VAR 0 1
18564: PUSH
18565: LD_EXP 43
18569: IN
18570: IFFALSE 18588
// legTanks := legTanks diff unit ;
18572: LD_ADDR_EXP 43
18576: PUSH
18577: LD_EXP 43
18581: PUSH
18582: LD_VAR 0 1
18586: DIFF
18587: ST_TO_ADDR
// if unit in legRTanks then
18588: LD_VAR 0 1
18592: PUSH
18593: LD_EXP 44
18597: IN
18598: IFFALSE 18616
// legRTanks := legRTanks diff unit ;
18600: LD_ADDR_EXP 44
18604: PUSH
18605: LD_EXP 44
18609: PUSH
18610: LD_VAR 0 1
18614: DIFF
18615: ST_TO_ADDR
// if GetBType ( unit ) in [ b_bunker , b_turret ] and GetSide ( unit ) = 8 then
18616: LD_VAR 0 1
18620: PPUSH
18621: CALL_OW 266
18625: PUSH
18626: LD_INT 32
18628: PUSH
18629: LD_INT 33
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: IN
18636: PUSH
18637: LD_VAR 0 1
18641: PPUSH
18642: CALL_OW 255
18646: PUSH
18647: LD_INT 8
18649: EQUAL
18650: AND
18651: IFFALSE 18714
// legBuildings := Join ( legBuildings , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
18653: LD_ADDR_EXP 42
18657: PUSH
18658: LD_EXP 42
18662: PPUSH
18663: LD_VAR 0 1
18667: PPUSH
18668: CALL_OW 266
18672: PUSH
18673: LD_VAR 0 1
18677: PPUSH
18678: CALL_OW 250
18682: PUSH
18683: LD_VAR 0 1
18687: PPUSH
18688: CALL_OW 251
18692: PUSH
18693: LD_VAR 0 1
18697: PPUSH
18698: CALL_OW 254
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: PPUSH
18709: CALL 58358 0 2
18713: ST_TO_ADDR
// if GetWeapon ( unit ) = us_crane and GetSide ( unit ) = 1 then
18714: LD_VAR 0 1
18718: PPUSH
18719: CALL_OW 264
18723: PUSH
18724: LD_INT 13
18726: EQUAL
18727: PUSH
18728: LD_VAR 0 1
18732: PPUSH
18733: CALL_OW 255
18737: PUSH
18738: LD_INT 1
18740: EQUAL
18741: AND
18742: IFFALSE 18777
// amConstructList := Join ( amConstructList , [ us_medium_wheeled , engine_combustion , control_remote , us_crane ] ) ;
18744: LD_ADDR_EXP 29
18748: PUSH
18749: LD_EXP 29
18753: PPUSH
18754: LD_INT 2
18756: PUSH
18757: LD_INT 1
18759: PUSH
18760: LD_INT 2
18762: PUSH
18763: LD_INT 13
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: LIST
18770: LIST
18771: PPUSH
18772: CALL 58358 0 2
18776: ST_TO_ADDR
// if GetWeapon ( unit ) = ar_crane and GetSide ( unit ) = 8 then
18777: LD_VAR 0 1
18781: PPUSH
18782: CALL_OW 264
18786: PUSH
18787: LD_INT 88
18789: EQUAL
18790: PUSH
18791: LD_VAR 0 1
18795: PPUSH
18796: CALL_OW 255
18800: PUSH
18801: LD_INT 8
18803: EQUAL
18804: AND
18805: IFFALSE 18840
// legConstructList := Join ( legConstructList , [ ar_medium_trike , engine_combustion , control_remote , ar_crane ] ) ;
18807: LD_ADDR_EXP 40
18811: PUSH
18812: LD_EXP 40
18816: PPUSH
18817: LD_INT 13
18819: PUSH
18820: LD_INT 1
18822: PUSH
18823: LD_INT 2
18825: PUSH
18826: LD_INT 88
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: LIST
18833: LIST
18834: PPUSH
18835: CALL 58358 0 2
18839: ST_TO_ADDR
// if unit = amCargo then
18840: LD_VAR 0 1
18844: PUSH
18845: LD_EXP 34
18849: EQUAL
18850: IFFALSE 18893
// begin amCargo := 0 ;
18852: LD_ADDR_EXP 34
18856: PUSH
18857: LD_INT 0
18859: ST_TO_ADDR
// amConstructList := Join ( amConstructList , [ us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ] ) ;
18860: LD_ADDR_EXP 29
18864: PUSH
18865: LD_EXP 29
18869: PPUSH
18870: LD_INT 2
18872: PUSH
18873: LD_INT 1
18875: PUSH
18876: LD_INT 2
18878: PUSH
18879: LD_INT 12
18881: PUSH
18882: EMPTY
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: PPUSH
18888: CALL 58358 0 2
18892: ST_TO_ADDR
// end ; if unit = legCargo then
18893: LD_VAR 0 1
18897: PUSH
18898: LD_EXP 45
18902: EQUAL
18903: IFFALSE 18946
// begin legCargo := 0 ;
18905: LD_ADDR_EXP 45
18909: PUSH
18910: LD_INT 0
18912: ST_TO_ADDR
// legConstructList := Join ( legConstructList , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ) ;
18913: LD_ADDR_EXP 40
18917: PUSH
18918: LD_EXP 40
18922: PPUSH
18923: LD_INT 13
18925: PUSH
18926: LD_INT 1
18928: PUSH
18929: LD_INT 2
18931: PUSH
18932: LD_INT 32
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: PPUSH
18941: CALL 58358 0 2
18945: ST_TO_ADDR
// end ; end ;
18946: PPOPN 1
18948: END
// on TigerTamed ( tiger , sheik ) do begin tigerCounter := Inc ( tigerCounter ) ;
18949: LD_ADDR_EXP 21
18953: PUSH
18954: LD_EXP 21
18958: PPUSH
18959: CALL 59719 0 1
18963: ST_TO_ADDR
// end ;
18964: PPOPN 2
18966: END
// on EnterBuilding ( b , un ) do begin if un in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_class , class_mechanic ] ] ) and GetBType ( b ) = b_factory and GetLives ( un ) < 1000 then
18967: LD_VAR 0 2
18971: PUSH
18972: LD_INT 3
18974: PUSH
18975: LD_INT 22
18977: PUSH
18978: LD_INT 2
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: PUSH
18985: EMPTY
18986: LIST
18987: LIST
18988: PUSH
18989: LD_INT 25
18991: PUSH
18992: LD_INT 3
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PPUSH
19003: CALL_OW 69
19007: IN
19008: PUSH
19009: LD_VAR 0 1
19013: PPUSH
19014: CALL_OW 266
19018: PUSH
19019: LD_INT 3
19021: EQUAL
19022: AND
19023: PUSH
19024: LD_VAR 0 2
19028: PPUSH
19029: CALL_OW 256
19033: PUSH
19034: LD_INT 1000
19036: LESS
19037: AND
19038: IFFALSE 19064
// begin SetTag ( un , 0 ) ;
19040: LD_VAR 0 2
19044: PPUSH
19045: LD_INT 0
19047: PPUSH
19048: CALL_OW 109
// SetLives ( un , 1000 ) ;
19052: LD_VAR 0 2
19056: PPUSH
19057: LD_INT 1000
19059: PPUSH
19060: CALL_OW 234
// end ; end ;
19064: PPOPN 2
19066: END
// on VehicleConstructed ( veh , fac ) do var side , weapon ;
19067: LD_INT 0
19069: PPUSH
19070: PPUSH
// begin SOS_VehicleConstructed ( veh , fac ) ;
19071: LD_VAR 0 1
19075: PPUSH
19076: LD_VAR 0 2
19080: PPUSH
19081: CALL 79599 0 2
// side := GetSide ( fac ) ;
19085: LD_ADDR_VAR 0 3
19089: PUSH
19090: LD_VAR 0 2
19094: PPUSH
19095: CALL_OW 255
19099: ST_TO_ADDR
// weapon := GetWeapon ( veh ) ;
19100: LD_ADDR_VAR 0 4
19104: PUSH
19105: LD_VAR 0 1
19109: PPUSH
19110: CALL_OW 264
19114: ST_TO_ADDR
// if side = 1 then
19115: LD_VAR 0 3
19119: PUSH
19120: LD_INT 1
19122: EQUAL
19123: IFFALSE 19232
// begin amConstructList := Delete ( amConstructList , 1 ) ;
19125: LD_ADDR_EXP 29
19129: PUSH
19130: LD_EXP 29
19134: PPUSH
19135: LD_INT 1
19137: PPUSH
19138: CALL_OW 3
19142: ST_TO_ADDR
// if weapon = us_cargo_bay and not amCargo then
19143: LD_VAR 0 4
19147: PUSH
19148: LD_INT 12
19150: EQUAL
19151: PUSH
19152: LD_EXP 34
19156: NOT
19157: AND
19158: IFFALSE 19170
// amCargo := veh ;
19160: LD_ADDR_EXP 34
19164: PUSH
19165: LD_VAR 0 1
19169: ST_TO_ADDR
// if weapon in [ us_cargo_bay , us_crane , us_bulldozer ] then
19170: LD_VAR 0 4
19174: PUSH
19175: LD_INT 12
19177: PUSH
19178: LD_INT 13
19180: PUSH
19181: LD_INT 14
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: LIST
19188: IN
19189: IFFALSE 19193
// exit ;
19191: GO 19382
// amTanks := Join ( amTanks , veh ) ;
19193: LD_ADDR_EXP 32
19197: PUSH
19198: LD_EXP 32
19202: PPUSH
19203: LD_VAR 0 1
19207: PPUSH
19208: CALL 58358 0 2
19212: ST_TO_ADDR
// wait ( 0 0$01 ) ;
19213: LD_INT 35
19215: PPUSH
19216: CALL_OW 67
// AddComMoveToArea ( veh , amParkingArea ) ;
19220: LD_VAR 0 1
19224: PPUSH
19225: LD_INT 12
19227: PPUSH
19228: CALL_OW 173
// end ; if side = 8 then
19232: LD_VAR 0 3
19236: PUSH
19237: LD_INT 8
19239: EQUAL
19240: IFFALSE 19382
// begin legConstructList := Delete ( legConstructList , 1 ) ;
19242: LD_ADDR_EXP 40
19246: PUSH
19247: LD_EXP 40
19251: PPUSH
19252: LD_INT 1
19254: PPUSH
19255: CALL_OW 3
19259: ST_TO_ADDR
// if weapon = ar_cargo_bay and not legCargo then
19260: LD_VAR 0 4
19264: PUSH
19265: LD_INT 32
19267: EQUAL
19268: PUSH
19269: LD_EXP 45
19273: NOT
19274: AND
19275: IFFALSE 19287
// legCargo := veh ;
19277: LD_ADDR_EXP 45
19281: PUSH
19282: LD_VAR 0 1
19286: ST_TO_ADDR
// if weapon in [ ar_cargo_bay , ar_crane ] then
19287: LD_VAR 0 4
19291: PUSH
19292: LD_INT 32
19294: PUSH
19295: LD_INT 88
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: IN
19302: IFFALSE 19306
// exit ;
19304: GO 19382
// if GetControl ( veh ) = control_manual then
19306: LD_VAR 0 1
19310: PPUSH
19311: CALL_OW 263
19315: PUSH
19316: LD_INT 1
19318: EQUAL
19319: IFFALSE 19343
// legTanks := Join ( legTanks , veh ) else
19321: LD_ADDR_EXP 43
19325: PUSH
19326: LD_EXP 43
19330: PPUSH
19331: LD_VAR 0 1
19335: PPUSH
19336: CALL 58358 0 2
19340: ST_TO_ADDR
19341: GO 19363
// legRTanks := Join ( legRTanks , veh ) ;
19343: LD_ADDR_EXP 44
19347: PUSH
19348: LD_EXP 44
19352: PPUSH
19353: LD_VAR 0 1
19357: PPUSH
19358: CALL 58358 0 2
19362: ST_TO_ADDR
// wait ( 0 0$01 ) ;
19363: LD_INT 35
19365: PPUSH
19366: CALL_OW 67
// AddComMoveToArea ( veh , legParkingArea ) ;
19370: LD_VAR 0 1
19374: PPUSH
19375: LD_INT 15
19377: PPUSH
19378: CALL_OW 173
// end ; end ;
19382: PPOPN 4
19384: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do var arm , fac , side ;
19385: LD_INT 0
19387: PPUSH
19388: PPUSH
19389: PPUSH
// begin side := GetSide ( driver ) ;
19390: LD_ADDR_VAR 0 7
19394: PUSH
19395: LD_VAR 0 1
19399: PPUSH
19400: CALL_OW 255
19404: ST_TO_ADDR
// if side = 1 and driver in amForces then
19405: LD_VAR 0 7
19409: PUSH
19410: LD_INT 1
19412: EQUAL
19413: PUSH
19414: LD_VAR 0 1
19418: PUSH
19419: LD_EXP 27
19423: IN
19424: AND
19425: IFFALSE 19637
// begin ComMoveToArea ( driver , amBaseArea ) ;
19427: LD_VAR 0 1
19431: PPUSH
19432: LD_INT 1
19434: PPUSH
19435: CALL_OW 113
// SetTag ( driver , tMech ) ;
19439: LD_VAR 0 1
19443: PPUSH
19444: LD_INT 7
19446: PPUSH
19447: CALL_OW 109
// fac := FilterUnitsInArea ( amBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
19451: LD_ADDR_VAR 0 6
19455: PUSH
19456: LD_INT 1
19458: PPUSH
19459: LD_INT 22
19461: PUSH
19462: LD_VAR 0 7
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PUSH
19471: LD_INT 30
19473: PUSH
19474: LD_INT 3
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PUSH
19481: LD_INT 50
19483: PUSH
19484: EMPTY
19485: LIST
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: LIST
19491: PPUSH
19492: CALL_OW 70
19496: ST_TO_ADDR
// if fac then
19497: LD_VAR 0 6
19501: IFFALSE 19523
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
19503: LD_VAR 0 1
19507: PPUSH
19508: LD_VAR 0 6
19512: PUSH
19513: LD_INT 1
19515: ARRAY
19516: PPUSH
19517: CALL_OW 180
// exit ;
19521: GO 19890
// end ; arm := FilterUnitsInArea ( amBaseArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
19523: LD_ADDR_VAR 0 5
19527: PUSH
19528: LD_INT 1
19530: PPUSH
19531: LD_INT 22
19533: PUSH
19534: LD_VAR 0 7
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: PUSH
19543: LD_INT 2
19545: PUSH
19546: LD_INT 30
19548: PUSH
19549: LD_INT 4
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: PUSH
19556: LD_INT 30
19558: PUSH
19559: LD_INT 5
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: LIST
19570: PUSH
19571: LD_INT 3
19573: PUSH
19574: LD_INT 62
19576: PUSH
19577: EMPTY
19578: LIST
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: PUSH
19584: LD_INT 50
19586: PUSH
19587: EMPTY
19588: LIST
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: PPUSH
19596: CALL_OW 70
19600: ST_TO_ADDR
// if arm then
19601: LD_VAR 0 5
19605: IFFALSE 19637
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
19607: LD_VAR 0 1
19611: PPUSH
19612: LD_VAR 0 5
19616: PUSH
19617: LD_INT 1
19619: ARRAY
19620: PPUSH
19621: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
19625: LD_VAR 0 1
19629: PPUSH
19630: LD_INT 1
19632: PPUSH
19633: CALL_OW 183
// end ; end ; if side = 8 then
19637: LD_VAR 0 7
19641: PUSH
19642: LD_INT 8
19644: EQUAL
19645: IFFALSE 19890
// begin ComMoveToArea ( driver , legBaseArea ) ;
19647: LD_VAR 0 1
19651: PPUSH
19652: LD_INT 2
19654: PPUSH
19655: CALL_OW 113
// if not driver in legForces then
19659: LD_VAR 0 1
19663: PUSH
19664: LD_EXP 37
19668: IN
19669: NOT
19670: IFFALSE 19692
// legForces := Join ( legForces , driver ) ;
19672: LD_ADDR_EXP 37
19676: PUSH
19677: LD_EXP 37
19681: PPUSH
19682: LD_VAR 0 1
19686: PPUSH
19687: CALL 58358 0 2
19691: ST_TO_ADDR
// SetTag ( driver , tMech ) ;
19692: LD_VAR 0 1
19696: PPUSH
19697: LD_INT 7
19699: PPUSH
19700: CALL_OW 109
// fac := FilterUnitsInArea ( legBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
19704: LD_ADDR_VAR 0 6
19708: PUSH
19709: LD_INT 2
19711: PPUSH
19712: LD_INT 22
19714: PUSH
19715: LD_VAR 0 7
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: PUSH
19724: LD_INT 30
19726: PUSH
19727: LD_INT 3
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PUSH
19734: LD_INT 50
19736: PUSH
19737: EMPTY
19738: LIST
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: LIST
19744: PPUSH
19745: CALL_OW 70
19749: ST_TO_ADDR
// if fac then
19750: LD_VAR 0 6
19754: IFFALSE 19776
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
19756: LD_VAR 0 1
19760: PPUSH
19761: LD_VAR 0 6
19765: PUSH
19766: LD_INT 1
19768: ARRAY
19769: PPUSH
19770: CALL_OW 180
// exit ;
19774: GO 19890
// end ; arm := FilterUnitsInArea ( legBaseArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
19776: LD_ADDR_VAR 0 5
19780: PUSH
19781: LD_INT 2
19783: PPUSH
19784: LD_INT 22
19786: PUSH
19787: LD_VAR 0 7
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: PUSH
19796: LD_INT 2
19798: PUSH
19799: LD_INT 30
19801: PUSH
19802: LD_INT 4
19804: PUSH
19805: EMPTY
19806: LIST
19807: LIST
19808: PUSH
19809: LD_INT 30
19811: PUSH
19812: LD_INT 5
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: LIST
19823: PUSH
19824: LD_INT 3
19826: PUSH
19827: LD_INT 62
19829: PUSH
19830: EMPTY
19831: LIST
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: PUSH
19837: LD_INT 50
19839: PUSH
19840: EMPTY
19841: LIST
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: PPUSH
19849: CALL_OW 70
19853: ST_TO_ADDR
// if arm then
19854: LD_VAR 0 5
19858: IFFALSE 19890
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
19860: LD_VAR 0 1
19864: PPUSH
19865: LD_VAR 0 5
19869: PUSH
19870: LD_INT 1
19872: ARRAY
19873: PPUSH
19874: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
19878: LD_VAR 0 1
19882: PPUSH
19883: LD_INT 1
19885: PPUSH
19886: CALL_OW 183
// end ; end ; end ;
19890: PPOPN 7
19892: END
// on BuildingComplete ( b ) do var side , type ;
19893: LD_INT 0
19895: PPUSH
19896: PPUSH
// begin side := GetSide ( b ) ;
19897: LD_ADDR_VAR 0 2
19901: PUSH
19902: LD_VAR 0 1
19906: PPUSH
19907: CALL_OW 255
19911: ST_TO_ADDR
// type := GetBType ( b ) ;
19912: LD_ADDR_VAR 0 3
19916: PUSH
19917: LD_VAR 0 1
19921: PPUSH
19922: CALL_OW 266
19926: ST_TO_ADDR
// if side = 1 then
19927: LD_VAR 0 2
19931: PUSH
19932: LD_INT 1
19934: EQUAL
19935: IFFALSE 19985
// begin amBuildings := Delete ( amBuildings , 1 ) ;
19937: LD_ADDR_EXP 31
19941: PUSH
19942: LD_EXP 31
19946: PPUSH
19947: LD_INT 1
19949: PPUSH
19950: CALL_OW 3
19954: ST_TO_ADDR
// if type in [ b_depot , b_armoury , b_workshop ] then
19955: LD_VAR 0 3
19959: PUSH
19960: LD_INT 0
19962: PUSH
19963: LD_INT 4
19965: PUSH
19966: LD_INT 2
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: LIST
19973: IN
19974: IFFALSE 19985
// ComUpgrade ( b ) ;
19976: LD_VAR 0 1
19980: PPUSH
19981: CALL_OW 146
// end ; end ;
19985: PPOPN 3
19987: END
// on ResearchComplete ( tech , lab ) do var side ;
19988: LD_INT 0
19990: PPUSH
// begin side := GetSide ( lab ) ;
19991: LD_ADDR_VAR 0 3
19995: PUSH
19996: LD_VAR 0 2
20000: PPUSH
20001: CALL_OW 255
20005: ST_TO_ADDR
// if side = 1 then
20006: LD_VAR 0 3
20010: PUSH
20011: LD_INT 1
20013: EQUAL
20014: IFFALSE 20032
// amTech := amTech diff tech ;
20016: LD_ADDR_EXP 28
20020: PUSH
20021: LD_EXP 28
20025: PUSH
20026: LD_VAR 0 1
20030: DIFF
20031: ST_TO_ADDR
// end ;
20032: PPOPN 3
20034: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
20035: LD_VAR 0 1
20039: PPUSH
20040: CALL 79583 0 1
// end ;
20044: PPOPN 1
20046: END
// on SailEvent ( event ) do begin case event of end ;
20047: LD_VAR 0 1
20051: PUSH
20052: POP
// end ;
20053: PPOPN 1
20055: END
// on Contact ( s1 , s2 ) do begin if not gameActive then
20056: LD_EXP 19
20060: NOT
20061: IFFALSE 20065
// exit ;
20063: GO 20163
// if not spotByAmerican and s1 in [ 2 , 1 ] and s2 in [ 1 , 2 ] then
20065: LD_EXP 8
20069: NOT
20070: PUSH
20071: LD_VAR 0 1
20075: PUSH
20076: LD_INT 2
20078: PUSH
20079: LD_INT 1
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: IN
20086: AND
20087: PUSH
20088: LD_VAR 0 2
20092: PUSH
20093: LD_INT 1
20095: PUSH
20096: LD_INT 2
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: IN
20103: AND
20104: IFFALSE 20114
// spotByAmerican := true ;
20106: LD_ADDR_EXP 8
20110: PUSH
20111: LD_INT 1
20113: ST_TO_ADDR
// if not spotByLegion and s1 in [ 2 , 8 ] and s2 in [ 8 , 2 ] then
20114: LD_EXP 9
20118: NOT
20119: PUSH
20120: LD_VAR 0 1
20124: PUSH
20125: LD_INT 2
20127: PUSH
20128: LD_INT 8
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: IN
20135: AND
20136: PUSH
20137: LD_VAR 0 2
20141: PUSH
20142: LD_INT 8
20144: PUSH
20145: LD_INT 2
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: IN
20152: AND
20153: IFFALSE 20163
// spotByLegion := true ;
20155: LD_ADDR_EXP 9
20159: PUSH
20160: LD_INT 1
20162: ST_TO_ADDR
// end ; end_of_file
20163: PPOPN 2
20165: END
// every 1 1$05 + 0 0$20 trigger spotArabianBase do var i , tmp ;
20166: LD_EXP 7
20170: IFFALSE 20277
20172: GO 20174
20174: DISABLE
20175: LD_INT 0
20177: PPUSH
20178: PPUSH
// begin enable ;
20179: ENABLE
// wait ( rand ( 0 0$1 , 0 0$11 ) ) ;
20180: LD_INT 35
20182: PPUSH
20183: LD_INT 385
20185: PPUSH
20186: CALL_OW 12
20190: PPUSH
20191: CALL_OW 67
// tmp := [ cratesNorthArea , cratesWestArea ] ;
20195: LD_ADDR_VAR 0 2
20199: PUSH
20200: LD_INT 16
20202: PUSH
20203: LD_INT 17
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: ST_TO_ADDR
// i := tmp [ rand ( 1 , Count ( tmp ) ) ] ;
20210: LD_ADDR_VAR 0 1
20214: PUSH
20215: LD_VAR 0 2
20219: PUSH
20220: LD_INT 1
20222: PPUSH
20223: LD_VAR 0 2
20227: PPUSH
20228: CALL 22769 0 1
20232: PPUSH
20233: CALL_OW 12
20237: ARRAY
20238: ST_TO_ADDR
// if GetListOfCratesInArea ( i ) < 4 then
20239: LD_VAR 0 1
20243: PPUSH
20244: CALL_OW 435
20248: PUSH
20249: LD_INT 4
20251: LESS
20252: IFFALSE 20277
// CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
20254: LD_INT 1
20256: PPUSH
20257: LD_INT 5
20259: PPUSH
20260: CALL_OW 12
20264: PPUSH
20265: LD_VAR 0 1
20269: PPUSH
20270: LD_INT 1
20272: PPUSH
20273: CALL_OW 55
// end ;
20277: PPOPN 2
20279: END
// every 0 0$25 trigger tick < [ 5 5$00 , 4 4$00 , 3 3$00 , 2 2$30 ] [ Difficulty ] and spotArabianBase do
20280: LD_OWVAR 1
20284: PUSH
20285: LD_INT 10500
20287: PUSH
20288: LD_INT 8400
20290: PUSH
20291: LD_INT 6300
20293: PUSH
20294: LD_INT 5250
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: PUSH
20303: LD_OWVAR 67
20307: ARRAY
20308: LESS
20309: PUSH
20310: LD_EXP 7
20314: AND
20315: IFFALSE 20348
20317: GO 20319
20319: DISABLE
// begin enable ;
20320: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 218 , 92 , 11 , true ) ;
20321: LD_INT 1
20323: PPUSH
20324: LD_INT 5
20326: PPUSH
20327: CALL_OW 12
20331: PPUSH
20332: LD_INT 218
20334: PPUSH
20335: LD_INT 92
20337: PPUSH
20338: LD_INT 11
20340: PPUSH
20341: LD_INT 1
20343: PPUSH
20344: CALL_OW 56
// end ;
20348: END
// every 0 0$45 trigger tick > [ 6 6$00 , 5 5$00 , 4 4$00 , 3 3$30 ] [ Difficulty ] and spotArabianBase do
20349: LD_OWVAR 1
20353: PUSH
20354: LD_INT 12600
20356: PUSH
20357: LD_INT 10500
20359: PUSH
20360: LD_INT 8400
20362: PUSH
20363: LD_INT 7350
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: PUSH
20372: LD_OWVAR 67
20376: ARRAY
20377: GREATER
20378: PUSH
20379: LD_EXP 7
20383: AND
20384: IFFALSE 20449
20386: GO 20388
20388: DISABLE
// begin enable ;
20389: ENABLE
// if Prob ( 100 - ( 10 * Difficulty ) ) and GetListOfCratesInArea ( arBaseArea ) < 12 then
20390: LD_INT 100
20392: PUSH
20393: LD_INT 10
20395: PUSH
20396: LD_OWVAR 67
20400: MUL
20401: MINUS
20402: PPUSH
20403: CALL_OW 13
20407: PUSH
20408: LD_INT 4
20410: PPUSH
20411: CALL_OW 435
20415: PUSH
20416: LD_INT 12
20418: LESS
20419: AND
20420: IFFALSE 20449
// CreateCratesXYR ( rand ( 1 , 5 ) , 218 , 92 , 11 , true ) ;
20422: LD_INT 1
20424: PPUSH
20425: LD_INT 5
20427: PPUSH
20428: CALL_OW 12
20432: PPUSH
20433: LD_INT 218
20435: PPUSH
20436: LD_INT 92
20438: PPUSH
20439: LD_INT 11
20441: PPUSH
20442: LD_INT 1
20444: PPUSH
20445: CALL_OW 56
// end ;
20449: END
// every 0 0$55 trigger IsOk ( amBase ) do
20450: LD_INT 2
20452: PPUSH
20453: CALL_OW 302
20457: IFFALSE 20497
20459: GO 20461
20461: DISABLE
// begin enable ;
20462: ENABLE
// if GetListOfCratesInArea ( amCratesArea ) < 3 then
20463: LD_INT 13
20465: PPUSH
20466: CALL_OW 435
20470: PUSH
20471: LD_INT 3
20473: LESS
20474: IFFALSE 20497
// CreateCratesArea ( rand ( 1 , 5 ) , amCratesArea , true ) ;
20476: LD_INT 1
20478: PPUSH
20479: LD_INT 5
20481: PPUSH
20482: CALL_OW 12
20486: PPUSH
20487: LD_INT 13
20489: PPUSH
20490: LD_INT 1
20492: PPUSH
20493: CALL_OW 55
// end ;
20497: END
// every 1 1$05 trigger IsOk ( legBase ) do
20498: LD_INT 38
20500: PPUSH
20501: CALL_OW 302
20505: IFFALSE 20545
20507: GO 20509
20509: DISABLE
// begin enable ;
20510: ENABLE
// if GetListOfCratesInArea ( legCratesArea ) < 3 then
20511: LD_INT 14
20513: PPUSH
20514: CALL_OW 435
20518: PUSH
20519: LD_INT 3
20521: LESS
20522: IFFALSE 20545
// CreateCratesArea ( rand ( 1 , 5 ) , legCratesArea , true ) ;
20524: LD_INT 1
20526: PPUSH
20527: LD_INT 5
20529: PPUSH
20530: CALL_OW 12
20534: PPUSH
20535: LD_INT 14
20537: PPUSH
20538: LD_INT 1
20540: PPUSH
20541: CALL_OW 55
// end ; end_of_file
20545: END
// every 0 0$1 trigger gameActive and GetClass ( Omar ) <> class_desert_warior and spotArabianBase and IsOk ( arBase ) do
20546: LD_EXP 19
20550: PUSH
20551: LD_EXP 24
20555: PPUSH
20556: CALL_OW 257
20560: PUSH
20561: LD_INT 11
20563: NONEQUAL
20564: AND
20565: PUSH
20566: LD_EXP 7
20570: AND
20571: PUSH
20572: LD_INT 85
20574: PPUSH
20575: CALL_OW 302
20579: AND
20580: IFFALSE 20600
20582: GO 20584
20584: DISABLE
// begin Query ( QSheik ) ;
20585: LD_STRING QSheik
20587: PPUSH
20588: CALL_OW 97
// omarCanChangeClass := true ;
20592: LD_ADDR_EXP 20
20596: PUSH
20597: LD_INT 1
20599: ST_TO_ADDR
// end ;
20600: END
// every 0 0$3 trigger omarCanChangeClass and GetClass ( Omar ) <> class_desert_warior and IsInUnit ( Omar ) = arBase do
20601: LD_EXP 20
20605: PUSH
20606: LD_EXP 24
20610: PPUSH
20611: CALL_OW 257
20615: PUSH
20616: LD_INT 11
20618: NONEQUAL
20619: AND
20620: PUSH
20621: LD_EXP 24
20625: PPUSH
20626: CALL_OW 310
20630: PUSH
20631: LD_INT 85
20633: EQUAL
20634: AND
20635: IFFALSE 20666
20637: GO 20639
20639: DISABLE
// begin enable ;
20640: ENABLE
// if Query ( QChangeClass ) = 1 then
20641: LD_STRING QChangeClass
20643: PPUSH
20644: CALL_OW 97
20648: PUSH
20649: LD_INT 1
20651: EQUAL
20652: IFFALSE 20666
// SetClass ( Omar , class_desert_warior ) ;
20654: LD_EXP 24
20658: PPUSH
20659: LD_INT 11
20661: PPUSH
20662: CALL_OW 336
// end ; end_of_file
20666: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
20667: LD_INT 0
20669: PPUSH
20670: PPUSH
// if exist_mode then
20671: LD_VAR 0 2
20675: IFFALSE 20700
// unit := CreateCharacter ( prefix & ident ) else
20677: LD_ADDR_VAR 0 5
20681: PUSH
20682: LD_VAR 0 3
20686: PUSH
20687: LD_VAR 0 1
20691: STR
20692: PPUSH
20693: CALL_OW 34
20697: ST_TO_ADDR
20698: GO 20715
// unit := NewCharacter ( ident ) ;
20700: LD_ADDR_VAR 0 5
20704: PUSH
20705: LD_VAR 0 1
20709: PPUSH
20710: CALL_OW 25
20714: ST_TO_ADDR
// result := unit ;
20715: LD_ADDR_VAR 0 4
20719: PUSH
20720: LD_VAR 0 5
20724: ST_TO_ADDR
// end ;
20725: LD_VAR 0 4
20729: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
20730: LD_INT 0
20732: PPUSH
20733: PPUSH
// if not side or not nation then
20734: LD_VAR 0 1
20738: NOT
20739: PUSH
20740: LD_VAR 0 2
20744: NOT
20745: OR
20746: IFFALSE 20750
// exit ;
20748: GO 21518
// case nation of nation_american :
20750: LD_VAR 0 2
20754: PUSH
20755: LD_INT 1
20757: DOUBLE
20758: EQUAL
20759: IFTRUE 20763
20761: GO 20977
20763: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
20764: LD_ADDR_VAR 0 4
20768: PUSH
20769: LD_INT 35
20771: PUSH
20772: LD_INT 45
20774: PUSH
20775: LD_INT 46
20777: PUSH
20778: LD_INT 47
20780: PUSH
20781: LD_INT 82
20783: PUSH
20784: LD_INT 83
20786: PUSH
20787: LD_INT 84
20789: PUSH
20790: LD_INT 85
20792: PUSH
20793: LD_INT 86
20795: PUSH
20796: LD_INT 1
20798: PUSH
20799: LD_INT 2
20801: PUSH
20802: LD_INT 6
20804: PUSH
20805: LD_INT 15
20807: PUSH
20808: LD_INT 16
20810: PUSH
20811: LD_INT 7
20813: PUSH
20814: LD_INT 12
20816: PUSH
20817: LD_INT 13
20819: PUSH
20820: LD_INT 10
20822: PUSH
20823: LD_INT 14
20825: PUSH
20826: LD_INT 20
20828: PUSH
20829: LD_INT 21
20831: PUSH
20832: LD_INT 22
20834: PUSH
20835: LD_INT 25
20837: PUSH
20838: LD_INT 32
20840: PUSH
20841: LD_INT 27
20843: PUSH
20844: LD_INT 36
20846: PUSH
20847: LD_INT 69
20849: PUSH
20850: LD_INT 39
20852: PUSH
20853: LD_INT 34
20855: PUSH
20856: LD_INT 40
20858: PUSH
20859: LD_INT 48
20861: PUSH
20862: LD_INT 49
20864: PUSH
20865: LD_INT 50
20867: PUSH
20868: LD_INT 51
20870: PUSH
20871: LD_INT 52
20873: PUSH
20874: LD_INT 53
20876: PUSH
20877: LD_INT 54
20879: PUSH
20880: LD_INT 55
20882: PUSH
20883: LD_INT 56
20885: PUSH
20886: LD_INT 57
20888: PUSH
20889: LD_INT 58
20891: PUSH
20892: LD_INT 59
20894: PUSH
20895: LD_INT 60
20897: PUSH
20898: LD_INT 61
20900: PUSH
20901: LD_INT 62
20903: PUSH
20904: LD_INT 80
20906: PUSH
20907: LD_INT 82
20909: PUSH
20910: LD_INT 83
20912: PUSH
20913: LD_INT 84
20915: PUSH
20916: LD_INT 85
20918: PUSH
20919: LD_INT 86
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: ST_TO_ADDR
20975: GO 21442
20977: LD_INT 2
20979: DOUBLE
20980: EQUAL
20981: IFTRUE 20985
20983: GO 21211
20985: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
20986: LD_ADDR_VAR 0 4
20990: PUSH
20991: LD_INT 35
20993: PUSH
20994: LD_INT 45
20996: PUSH
20997: LD_INT 46
20999: PUSH
21000: LD_INT 47
21002: PUSH
21003: LD_INT 82
21005: PUSH
21006: LD_INT 83
21008: PUSH
21009: LD_INT 84
21011: PUSH
21012: LD_INT 85
21014: PUSH
21015: LD_INT 87
21017: PUSH
21018: LD_INT 70
21020: PUSH
21021: LD_INT 1
21023: PUSH
21024: LD_INT 11
21026: PUSH
21027: LD_INT 3
21029: PUSH
21030: LD_INT 4
21032: PUSH
21033: LD_INT 5
21035: PUSH
21036: LD_INT 6
21038: PUSH
21039: LD_INT 15
21041: PUSH
21042: LD_INT 18
21044: PUSH
21045: LD_INT 7
21047: PUSH
21048: LD_INT 17
21050: PUSH
21051: LD_INT 8
21053: PUSH
21054: LD_INT 20
21056: PUSH
21057: LD_INT 21
21059: PUSH
21060: LD_INT 22
21062: PUSH
21063: LD_INT 72
21065: PUSH
21066: LD_INT 26
21068: PUSH
21069: LD_INT 69
21071: PUSH
21072: LD_INT 39
21074: PUSH
21075: LD_INT 40
21077: PUSH
21078: LD_INT 41
21080: PUSH
21081: LD_INT 42
21083: PUSH
21084: LD_INT 43
21086: PUSH
21087: LD_INT 48
21089: PUSH
21090: LD_INT 49
21092: PUSH
21093: LD_INT 50
21095: PUSH
21096: LD_INT 51
21098: PUSH
21099: LD_INT 52
21101: PUSH
21102: LD_INT 53
21104: PUSH
21105: LD_INT 54
21107: PUSH
21108: LD_INT 55
21110: PUSH
21111: LD_INT 56
21113: PUSH
21114: LD_INT 60
21116: PUSH
21117: LD_INT 61
21119: PUSH
21120: LD_INT 62
21122: PUSH
21123: LD_INT 66
21125: PUSH
21126: LD_INT 67
21128: PUSH
21129: LD_INT 68
21131: PUSH
21132: LD_INT 81
21134: PUSH
21135: LD_INT 82
21137: PUSH
21138: LD_INT 83
21140: PUSH
21141: LD_INT 84
21143: PUSH
21144: LD_INT 85
21146: PUSH
21147: LD_INT 87
21149: PUSH
21150: LD_INT 88
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: ST_TO_ADDR
21209: GO 21442
21211: LD_INT 3
21213: DOUBLE
21214: EQUAL
21215: IFTRUE 21219
21217: GO 21441
21219: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
21220: LD_ADDR_VAR 0 4
21224: PUSH
21225: LD_INT 46
21227: PUSH
21228: LD_INT 47
21230: PUSH
21231: LD_INT 1
21233: PUSH
21234: LD_INT 2
21236: PUSH
21237: LD_INT 82
21239: PUSH
21240: LD_INT 83
21242: PUSH
21243: LD_INT 84
21245: PUSH
21246: LD_INT 85
21248: PUSH
21249: LD_INT 86
21251: PUSH
21252: LD_INT 11
21254: PUSH
21255: LD_INT 9
21257: PUSH
21258: LD_INT 20
21260: PUSH
21261: LD_INT 19
21263: PUSH
21264: LD_INT 21
21266: PUSH
21267: LD_INT 24
21269: PUSH
21270: LD_INT 22
21272: PUSH
21273: LD_INT 25
21275: PUSH
21276: LD_INT 28
21278: PUSH
21279: LD_INT 29
21281: PUSH
21282: LD_INT 30
21284: PUSH
21285: LD_INT 31
21287: PUSH
21288: LD_INT 37
21290: PUSH
21291: LD_INT 38
21293: PUSH
21294: LD_INT 32
21296: PUSH
21297: LD_INT 27
21299: PUSH
21300: LD_INT 33
21302: PUSH
21303: LD_INT 69
21305: PUSH
21306: LD_INT 39
21308: PUSH
21309: LD_INT 34
21311: PUSH
21312: LD_INT 40
21314: PUSH
21315: LD_INT 71
21317: PUSH
21318: LD_INT 23
21320: PUSH
21321: LD_INT 44
21323: PUSH
21324: LD_INT 48
21326: PUSH
21327: LD_INT 49
21329: PUSH
21330: LD_INT 50
21332: PUSH
21333: LD_INT 51
21335: PUSH
21336: LD_INT 52
21338: PUSH
21339: LD_INT 53
21341: PUSH
21342: LD_INT 54
21344: PUSH
21345: LD_INT 55
21347: PUSH
21348: LD_INT 56
21350: PUSH
21351: LD_INT 57
21353: PUSH
21354: LD_INT 58
21356: PUSH
21357: LD_INT 59
21359: PUSH
21360: LD_INT 63
21362: PUSH
21363: LD_INT 64
21365: PUSH
21366: LD_INT 65
21368: PUSH
21369: LD_INT 82
21371: PUSH
21372: LD_INT 83
21374: PUSH
21375: LD_INT 84
21377: PUSH
21378: LD_INT 85
21380: PUSH
21381: LD_INT 86
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: ST_TO_ADDR
21439: GO 21442
21441: POP
// if state > - 1 and state < 3 then
21442: LD_VAR 0 3
21446: PUSH
21447: LD_INT 1
21449: NEG
21450: GREATER
21451: PUSH
21452: LD_VAR 0 3
21456: PUSH
21457: LD_INT 3
21459: LESS
21460: AND
21461: IFFALSE 21518
// for i in result do
21463: LD_ADDR_VAR 0 5
21467: PUSH
21468: LD_VAR 0 4
21472: PUSH
21473: FOR_IN
21474: IFFALSE 21516
// if GetTech ( i , side ) <> state then
21476: LD_VAR 0 5
21480: PPUSH
21481: LD_VAR 0 1
21485: PPUSH
21486: CALL_OW 321
21490: PUSH
21491: LD_VAR 0 3
21495: NONEQUAL
21496: IFFALSE 21514
// result := result diff i ;
21498: LD_ADDR_VAR 0 4
21502: PUSH
21503: LD_VAR 0 4
21507: PUSH
21508: LD_VAR 0 5
21512: DIFF
21513: ST_TO_ADDR
21514: GO 21473
21516: POP
21517: POP
// end ;
21518: LD_VAR 0 4
21522: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
21523: LD_INT 0
21525: PPUSH
21526: PPUSH
21527: PPUSH
// result := true ;
21528: LD_ADDR_VAR 0 3
21532: PUSH
21533: LD_INT 1
21535: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
21536: LD_ADDR_VAR 0 5
21540: PUSH
21541: LD_VAR 0 2
21545: PPUSH
21546: CALL_OW 480
21550: ST_TO_ADDR
// if not tmp then
21551: LD_VAR 0 5
21555: NOT
21556: IFFALSE 21560
// exit ;
21558: GO 21609
// for i in tmp do
21560: LD_ADDR_VAR 0 4
21564: PUSH
21565: LD_VAR 0 5
21569: PUSH
21570: FOR_IN
21571: IFFALSE 21607
// if GetTech ( i , side ) <> state_researched then
21573: LD_VAR 0 4
21577: PPUSH
21578: LD_VAR 0 1
21582: PPUSH
21583: CALL_OW 321
21587: PUSH
21588: LD_INT 2
21590: NONEQUAL
21591: IFFALSE 21605
// begin result := false ;
21593: LD_ADDR_VAR 0 3
21597: PUSH
21598: LD_INT 0
21600: ST_TO_ADDR
// exit ;
21601: POP
21602: POP
21603: GO 21609
// end ;
21605: GO 21570
21607: POP
21608: POP
// end ;
21609: LD_VAR 0 3
21613: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
21614: LD_INT 0
21616: PPUSH
21617: PPUSH
21618: PPUSH
21619: PPUSH
21620: PPUSH
21621: PPUSH
21622: PPUSH
21623: PPUSH
21624: PPUSH
21625: PPUSH
21626: PPUSH
21627: PPUSH
21628: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
21629: LD_VAR 0 1
21633: NOT
21634: PUSH
21635: LD_VAR 0 1
21639: PPUSH
21640: CALL_OW 257
21644: PUSH
21645: LD_INT 9
21647: NONEQUAL
21648: OR
21649: IFFALSE 21653
// exit ;
21651: GO 22226
// side := GetSide ( unit ) ;
21653: LD_ADDR_VAR 0 9
21657: PUSH
21658: LD_VAR 0 1
21662: PPUSH
21663: CALL_OW 255
21667: ST_TO_ADDR
// tech_space := tech_spacanom ;
21668: LD_ADDR_VAR 0 12
21672: PUSH
21673: LD_INT 29
21675: ST_TO_ADDR
// tech_time := tech_taurad ;
21676: LD_ADDR_VAR 0 13
21680: PUSH
21681: LD_INT 28
21683: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
21684: LD_ADDR_VAR 0 11
21688: PUSH
21689: LD_VAR 0 1
21693: PPUSH
21694: CALL_OW 310
21698: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
21699: LD_VAR 0 11
21703: PPUSH
21704: CALL_OW 247
21708: PUSH
21709: LD_INT 2
21711: EQUAL
21712: IFFALSE 21716
// exit ;
21714: GO 22226
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21716: LD_ADDR_VAR 0 8
21720: PUSH
21721: LD_INT 81
21723: PUSH
21724: LD_VAR 0 9
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: PUSH
21733: LD_INT 3
21735: PUSH
21736: LD_INT 21
21738: PUSH
21739: LD_INT 3
21741: PUSH
21742: EMPTY
21743: LIST
21744: LIST
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: PPUSH
21754: CALL_OW 69
21758: ST_TO_ADDR
// if not tmp then
21759: LD_VAR 0 8
21763: NOT
21764: IFFALSE 21768
// exit ;
21766: GO 22226
// if in_unit then
21768: LD_VAR 0 11
21772: IFFALSE 21796
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
21774: LD_ADDR_VAR 0 10
21778: PUSH
21779: LD_VAR 0 8
21783: PPUSH
21784: LD_VAR 0 11
21788: PPUSH
21789: CALL_OW 74
21793: ST_TO_ADDR
21794: GO 21816
// enemy := NearestUnitToUnit ( tmp , unit ) ;
21796: LD_ADDR_VAR 0 10
21800: PUSH
21801: LD_VAR 0 8
21805: PPUSH
21806: LD_VAR 0 1
21810: PPUSH
21811: CALL_OW 74
21815: ST_TO_ADDR
// if not enemy then
21816: LD_VAR 0 10
21820: NOT
21821: IFFALSE 21825
// exit ;
21823: GO 22226
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
21825: LD_VAR 0 11
21829: PUSH
21830: LD_VAR 0 11
21834: PPUSH
21835: LD_VAR 0 10
21839: PPUSH
21840: CALL_OW 296
21844: PUSH
21845: LD_INT 13
21847: GREATER
21848: AND
21849: PUSH
21850: LD_VAR 0 1
21854: PPUSH
21855: LD_VAR 0 10
21859: PPUSH
21860: CALL_OW 296
21864: PUSH
21865: LD_INT 12
21867: GREATER
21868: OR
21869: IFFALSE 21873
// exit ;
21871: GO 22226
// missile := [ 1 ] ;
21873: LD_ADDR_VAR 0 14
21877: PUSH
21878: LD_INT 1
21880: PUSH
21881: EMPTY
21882: LIST
21883: ST_TO_ADDR
// if Researched ( side , tech_space ) then
21884: LD_VAR 0 9
21888: PPUSH
21889: LD_VAR 0 12
21893: PPUSH
21894: CALL_OW 325
21898: IFFALSE 21927
// missile := Replace ( missile , missile + 1 , 2 ) ;
21900: LD_ADDR_VAR 0 14
21904: PUSH
21905: LD_VAR 0 14
21909: PPUSH
21910: LD_VAR 0 14
21914: PUSH
21915: LD_INT 1
21917: PLUS
21918: PPUSH
21919: LD_INT 2
21921: PPUSH
21922: CALL_OW 1
21926: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
21927: LD_VAR 0 9
21931: PPUSH
21932: LD_VAR 0 13
21936: PPUSH
21937: CALL_OW 325
21941: PUSH
21942: LD_VAR 0 10
21946: PPUSH
21947: CALL_OW 255
21951: PPUSH
21952: LD_VAR 0 13
21956: PPUSH
21957: CALL_OW 325
21961: NOT
21962: AND
21963: IFFALSE 21992
// missile := Replace ( missile , missile + 1 , 3 ) ;
21965: LD_ADDR_VAR 0 14
21969: PUSH
21970: LD_VAR 0 14
21974: PPUSH
21975: LD_VAR 0 14
21979: PUSH
21980: LD_INT 1
21982: PLUS
21983: PPUSH
21984: LD_INT 3
21986: PPUSH
21987: CALL_OW 1
21991: ST_TO_ADDR
// if missile < 2 then
21992: LD_VAR 0 14
21996: PUSH
21997: LD_INT 2
21999: LESS
22000: IFFALSE 22004
// exit ;
22002: GO 22226
// x := GetX ( enemy ) ;
22004: LD_ADDR_VAR 0 4
22008: PUSH
22009: LD_VAR 0 10
22013: PPUSH
22014: CALL_OW 250
22018: ST_TO_ADDR
// y := GetY ( enemy ) ;
22019: LD_ADDR_VAR 0 5
22023: PUSH
22024: LD_VAR 0 10
22028: PPUSH
22029: CALL_OW 251
22033: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22034: LD_ADDR_VAR 0 6
22038: PUSH
22039: LD_VAR 0 4
22043: PUSH
22044: LD_INT 1
22046: NEG
22047: PPUSH
22048: LD_INT 1
22050: PPUSH
22051: CALL_OW 12
22055: PLUS
22056: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22057: LD_ADDR_VAR 0 7
22061: PUSH
22062: LD_VAR 0 5
22066: PUSH
22067: LD_INT 1
22069: NEG
22070: PPUSH
22071: LD_INT 1
22073: PPUSH
22074: CALL_OW 12
22078: PLUS
22079: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22080: LD_VAR 0 6
22084: PPUSH
22085: LD_VAR 0 7
22089: PPUSH
22090: CALL_OW 488
22094: NOT
22095: IFFALSE 22117
// begin _x := x ;
22097: LD_ADDR_VAR 0 6
22101: PUSH
22102: LD_VAR 0 4
22106: ST_TO_ADDR
// _y := y ;
22107: LD_ADDR_VAR 0 7
22111: PUSH
22112: LD_VAR 0 5
22116: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22117: LD_ADDR_VAR 0 3
22121: PUSH
22122: LD_INT 1
22124: PPUSH
22125: LD_VAR 0 14
22129: PPUSH
22130: CALL_OW 12
22134: ST_TO_ADDR
// case i of 1 :
22135: LD_VAR 0 3
22139: PUSH
22140: LD_INT 1
22142: DOUBLE
22143: EQUAL
22144: IFTRUE 22148
22146: GO 22165
22148: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22149: LD_VAR 0 1
22153: PPUSH
22154: LD_VAR 0 10
22158: PPUSH
22159: CALL_OW 115
22163: GO 22226
22165: LD_INT 2
22167: DOUBLE
22168: EQUAL
22169: IFTRUE 22173
22171: GO 22195
22173: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
22174: LD_VAR 0 1
22178: PPUSH
22179: LD_VAR 0 6
22183: PPUSH
22184: LD_VAR 0 7
22188: PPUSH
22189: CALL_OW 153
22193: GO 22226
22195: LD_INT 3
22197: DOUBLE
22198: EQUAL
22199: IFTRUE 22203
22201: GO 22225
22203: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
22204: LD_VAR 0 1
22208: PPUSH
22209: LD_VAR 0 6
22213: PPUSH
22214: LD_VAR 0 7
22218: PPUSH
22219: CALL_OW 154
22223: GO 22226
22225: POP
// end ;
22226: LD_VAR 0 2
22230: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
22231: LD_INT 0
22233: PPUSH
22234: PPUSH
22235: PPUSH
22236: PPUSH
22237: PPUSH
22238: PPUSH
// if not unit or not building then
22239: LD_VAR 0 1
22243: NOT
22244: PUSH
22245: LD_VAR 0 2
22249: NOT
22250: OR
22251: IFFALSE 22255
// exit ;
22253: GO 22413
// x := GetX ( building ) ;
22255: LD_ADDR_VAR 0 5
22259: PUSH
22260: LD_VAR 0 2
22264: PPUSH
22265: CALL_OW 250
22269: ST_TO_ADDR
// y := GetY ( building ) ;
22270: LD_ADDR_VAR 0 6
22274: PUSH
22275: LD_VAR 0 2
22279: PPUSH
22280: CALL_OW 251
22284: ST_TO_ADDR
// for i = 0 to 5 do
22285: LD_ADDR_VAR 0 4
22289: PUSH
22290: DOUBLE
22291: LD_INT 0
22293: DEC
22294: ST_TO_ADDR
22295: LD_INT 5
22297: PUSH
22298: FOR_TO
22299: IFFALSE 22411
// begin _x := ShiftX ( x , i , 3 ) ;
22301: LD_ADDR_VAR 0 7
22305: PUSH
22306: LD_VAR 0 5
22310: PPUSH
22311: LD_VAR 0 4
22315: PPUSH
22316: LD_INT 3
22318: PPUSH
22319: CALL_OW 272
22323: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
22324: LD_ADDR_VAR 0 8
22328: PUSH
22329: LD_VAR 0 6
22333: PPUSH
22334: LD_VAR 0 4
22338: PPUSH
22339: LD_INT 3
22341: PPUSH
22342: CALL_OW 273
22346: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22347: LD_VAR 0 7
22351: PPUSH
22352: LD_VAR 0 8
22356: PPUSH
22357: CALL_OW 488
22361: NOT
22362: IFFALSE 22366
// continue ;
22364: GO 22298
// if HexInfo ( _x , _y ) = 0 then
22366: LD_VAR 0 7
22370: PPUSH
22371: LD_VAR 0 8
22375: PPUSH
22376: CALL_OW 428
22380: PUSH
22381: LD_INT 0
22383: EQUAL
22384: IFFALSE 22409
// begin ComMoveXY ( unit , _x , _y ) ;
22386: LD_VAR 0 1
22390: PPUSH
22391: LD_VAR 0 7
22395: PPUSH
22396: LD_VAR 0 8
22400: PPUSH
22401: CALL_OW 111
// exit ;
22405: POP
22406: POP
22407: GO 22413
// end ; end ;
22409: GO 22298
22411: POP
22412: POP
// end ;
22413: LD_VAR 0 3
22417: RET
// export function ScanBase ( side , base_area ) ; begin
22418: LD_INT 0
22420: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
22421: LD_ADDR_VAR 0 3
22425: PUSH
22426: LD_VAR 0 2
22430: PPUSH
22431: LD_INT 81
22433: PUSH
22434: LD_VAR 0 1
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: PPUSH
22443: CALL_OW 70
22447: ST_TO_ADDR
// end ;
22448: LD_VAR 0 3
22452: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22453: LD_INT 0
22455: PPUSH
22456: PPUSH
22457: PPUSH
22458: PPUSH
// result := false ;
22459: LD_ADDR_VAR 0 2
22463: PUSH
22464: LD_INT 0
22466: ST_TO_ADDR
// side := GetSide ( unit ) ;
22467: LD_ADDR_VAR 0 3
22471: PUSH
22472: LD_VAR 0 1
22476: PPUSH
22477: CALL_OW 255
22481: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22482: LD_ADDR_VAR 0 4
22486: PUSH
22487: LD_VAR 0 1
22491: PPUSH
22492: CALL_OW 248
22496: ST_TO_ADDR
// case nat of 1 :
22497: LD_VAR 0 4
22501: PUSH
22502: LD_INT 1
22504: DOUBLE
22505: EQUAL
22506: IFTRUE 22510
22508: GO 22521
22510: POP
// tech := tech_lassight ; 2 :
22511: LD_ADDR_VAR 0 5
22515: PUSH
22516: LD_INT 12
22518: ST_TO_ADDR
22519: GO 22560
22521: LD_INT 2
22523: DOUBLE
22524: EQUAL
22525: IFTRUE 22529
22527: GO 22540
22529: POP
// tech := tech_mortar ; 3 :
22530: LD_ADDR_VAR 0 5
22534: PUSH
22535: LD_INT 41
22537: ST_TO_ADDR
22538: GO 22560
22540: LD_INT 3
22542: DOUBLE
22543: EQUAL
22544: IFTRUE 22548
22546: GO 22559
22548: POP
// tech := tech_bazooka ; end ;
22549: LD_ADDR_VAR 0 5
22553: PUSH
22554: LD_INT 44
22556: ST_TO_ADDR
22557: GO 22560
22559: POP
// if Researched ( side , tech ) then
22560: LD_VAR 0 3
22564: PPUSH
22565: LD_VAR 0 5
22569: PPUSH
22570: CALL_OW 325
22574: IFFALSE 22601
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
22576: LD_ADDR_VAR 0 2
22580: PUSH
22581: LD_INT 5
22583: PUSH
22584: LD_INT 8
22586: PUSH
22587: LD_INT 9
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: LIST
22594: PUSH
22595: LD_VAR 0 4
22599: ARRAY
22600: ST_TO_ADDR
// end ;
22601: LD_VAR 0 2
22605: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
22606: LD_INT 0
22608: PPUSH
22609: PPUSH
22610: PPUSH
// if not mines then
22611: LD_VAR 0 2
22615: NOT
22616: IFFALSE 22620
// exit ;
22618: GO 22764
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22620: LD_ADDR_VAR 0 5
22624: PUSH
22625: LD_INT 81
22627: PUSH
22628: LD_VAR 0 1
22632: PUSH
22633: EMPTY
22634: LIST
22635: LIST
22636: PUSH
22637: LD_INT 3
22639: PUSH
22640: LD_INT 21
22642: PUSH
22643: LD_INT 3
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: PUSH
22650: EMPTY
22651: LIST
22652: LIST
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: PPUSH
22658: CALL_OW 69
22662: ST_TO_ADDR
// for i in mines do
22663: LD_ADDR_VAR 0 4
22667: PUSH
22668: LD_VAR 0 2
22672: PUSH
22673: FOR_IN
22674: IFFALSE 22762
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
22676: LD_VAR 0 4
22680: PUSH
22681: LD_INT 1
22683: ARRAY
22684: PPUSH
22685: LD_VAR 0 4
22689: PUSH
22690: LD_INT 2
22692: ARRAY
22693: PPUSH
22694: CALL_OW 458
22698: NOT
22699: IFFALSE 22703
// continue ;
22701: GO 22673
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
22703: LD_VAR 0 4
22707: PUSH
22708: LD_INT 1
22710: ARRAY
22711: PPUSH
22712: LD_VAR 0 4
22716: PUSH
22717: LD_INT 2
22719: ARRAY
22720: PPUSH
22721: CALL_OW 428
22725: PUSH
22726: LD_VAR 0 5
22730: IN
22731: IFFALSE 22760
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
22733: LD_VAR 0 4
22737: PUSH
22738: LD_INT 1
22740: ARRAY
22741: PPUSH
22742: LD_VAR 0 4
22746: PUSH
22747: LD_INT 2
22749: ARRAY
22750: PPUSH
22751: LD_VAR 0 1
22755: PPUSH
22756: CALL_OW 456
// end ;
22760: GO 22673
22762: POP
22763: POP
// end ;
22764: LD_VAR 0 3
22768: RET
// export function Count ( array ) ; begin
22769: LD_INT 0
22771: PPUSH
// result := array + 0 ;
22772: LD_ADDR_VAR 0 2
22776: PUSH
22777: LD_VAR 0 1
22781: PUSH
22782: LD_INT 0
22784: PLUS
22785: ST_TO_ADDR
// end ;
22786: LD_VAR 0 2
22790: RET
// export function IsEmpty ( building ) ; begin
22791: LD_INT 0
22793: PPUSH
// if not building then
22794: LD_VAR 0 1
22798: NOT
22799: IFFALSE 22803
// exit ;
22801: GO 22846
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
22803: LD_ADDR_VAR 0 2
22807: PUSH
22808: LD_VAR 0 1
22812: PUSH
22813: LD_INT 22
22815: PUSH
22816: LD_VAR 0 1
22820: PPUSH
22821: CALL_OW 255
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: PUSH
22830: LD_INT 58
22832: PUSH
22833: EMPTY
22834: LIST
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PPUSH
22840: CALL_OW 69
22844: IN
22845: ST_TO_ADDR
// end ;
22846: LD_VAR 0 2
22850: RET
// export function IsNotFull ( building ) ; var places ; begin
22851: LD_INT 0
22853: PPUSH
22854: PPUSH
// if not building then
22855: LD_VAR 0 1
22859: NOT
22860: IFFALSE 22864
// exit ;
22862: GO 22892
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
22864: LD_ADDR_VAR 0 2
22868: PUSH
22869: LD_VAR 0 1
22873: PPUSH
22874: LD_INT 3
22876: PUSH
22877: LD_INT 62
22879: PUSH
22880: EMPTY
22881: LIST
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: PPUSH
22887: CALL_OW 72
22891: ST_TO_ADDR
// end ;
22892: LD_VAR 0 2
22896: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
22897: LD_INT 0
22899: PPUSH
22900: PPUSH
22901: PPUSH
22902: PPUSH
// tmp := [ ] ;
22903: LD_ADDR_VAR 0 3
22907: PUSH
22908: EMPTY
22909: ST_TO_ADDR
// list := [ ] ;
22910: LD_ADDR_VAR 0 5
22914: PUSH
22915: EMPTY
22916: ST_TO_ADDR
// for i = 16 to 25 do
22917: LD_ADDR_VAR 0 4
22921: PUSH
22922: DOUBLE
22923: LD_INT 16
22925: DEC
22926: ST_TO_ADDR
22927: LD_INT 25
22929: PUSH
22930: FOR_TO
22931: IFFALSE 23004
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
22933: LD_ADDR_VAR 0 3
22937: PUSH
22938: LD_VAR 0 3
22942: PUSH
22943: LD_INT 22
22945: PUSH
22946: LD_VAR 0 1
22950: PPUSH
22951: CALL_OW 255
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: PUSH
22960: LD_INT 91
22962: PUSH
22963: LD_VAR 0 1
22967: PUSH
22968: LD_INT 6
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: LIST
22975: PUSH
22976: LD_INT 30
22978: PUSH
22979: LD_VAR 0 4
22983: PUSH
22984: EMPTY
22985: LIST
22986: LIST
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: LIST
22992: PUSH
22993: EMPTY
22994: LIST
22995: PPUSH
22996: CALL_OW 69
23000: ADD
23001: ST_TO_ADDR
23002: GO 22930
23004: POP
23005: POP
// for i = 1 to tmp do
23006: LD_ADDR_VAR 0 4
23010: PUSH
23011: DOUBLE
23012: LD_INT 1
23014: DEC
23015: ST_TO_ADDR
23016: LD_VAR 0 3
23020: PUSH
23021: FOR_TO
23022: IFFALSE 23110
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23024: LD_ADDR_VAR 0 5
23028: PUSH
23029: LD_VAR 0 5
23033: PUSH
23034: LD_VAR 0 3
23038: PUSH
23039: LD_VAR 0 4
23043: ARRAY
23044: PPUSH
23045: CALL_OW 266
23049: PUSH
23050: LD_VAR 0 3
23054: PUSH
23055: LD_VAR 0 4
23059: ARRAY
23060: PPUSH
23061: CALL_OW 250
23065: PUSH
23066: LD_VAR 0 3
23070: PUSH
23071: LD_VAR 0 4
23075: ARRAY
23076: PPUSH
23077: CALL_OW 251
23081: PUSH
23082: LD_VAR 0 3
23086: PUSH
23087: LD_VAR 0 4
23091: ARRAY
23092: PPUSH
23093: CALL_OW 254
23097: PUSH
23098: EMPTY
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: PUSH
23104: EMPTY
23105: LIST
23106: ADD
23107: ST_TO_ADDR
23108: GO 23021
23110: POP
23111: POP
// result := list ;
23112: LD_ADDR_VAR 0 2
23116: PUSH
23117: LD_VAR 0 5
23121: ST_TO_ADDR
// end ;
23122: LD_VAR 0 2
23126: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23127: LD_INT 0
23129: PPUSH
23130: PPUSH
23131: PPUSH
23132: PPUSH
23133: PPUSH
23134: PPUSH
23135: PPUSH
// if not factory then
23136: LD_VAR 0 1
23140: NOT
23141: IFFALSE 23145
// exit ;
23143: GO 23738
// if control = control_apeman then
23145: LD_VAR 0 4
23149: PUSH
23150: LD_INT 5
23152: EQUAL
23153: IFFALSE 23262
// begin tmp := UnitsInside ( factory ) ;
23155: LD_ADDR_VAR 0 8
23159: PUSH
23160: LD_VAR 0 1
23164: PPUSH
23165: CALL_OW 313
23169: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23170: LD_VAR 0 8
23174: PPUSH
23175: LD_INT 25
23177: PUSH
23178: LD_INT 12
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PPUSH
23185: CALL_OW 72
23189: NOT
23190: IFFALSE 23200
// control := control_manual ;
23192: LD_ADDR_VAR 0 4
23196: PUSH
23197: LD_INT 1
23199: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23200: LD_ADDR_VAR 0 8
23204: PUSH
23205: LD_VAR 0 1
23209: PPUSH
23210: CALL 22897 0 1
23214: ST_TO_ADDR
// if tmp then
23215: LD_VAR 0 8
23219: IFFALSE 23262
// begin for i in tmp do
23221: LD_ADDR_VAR 0 7
23225: PUSH
23226: LD_VAR 0 8
23230: PUSH
23231: FOR_IN
23232: IFFALSE 23260
// if i [ 1 ] = b_ext_radio then
23234: LD_VAR 0 7
23238: PUSH
23239: LD_INT 1
23241: ARRAY
23242: PUSH
23243: LD_INT 22
23245: EQUAL
23246: IFFALSE 23258
// begin control := control_remote ;
23248: LD_ADDR_VAR 0 4
23252: PUSH
23253: LD_INT 2
23255: ST_TO_ADDR
// break ;
23256: GO 23260
// end ;
23258: GO 23231
23260: POP
23261: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23262: LD_VAR 0 1
23266: PPUSH
23267: LD_VAR 0 2
23271: PPUSH
23272: LD_VAR 0 3
23276: PPUSH
23277: LD_VAR 0 4
23281: PPUSH
23282: LD_VAR 0 5
23286: PPUSH
23287: CALL_OW 448
23291: IFFALSE 23326
// begin result := [ chassis , engine , control , weapon ] ;
23293: LD_ADDR_VAR 0 6
23297: PUSH
23298: LD_VAR 0 2
23302: PUSH
23303: LD_VAR 0 3
23307: PUSH
23308: LD_VAR 0 4
23312: PUSH
23313: LD_VAR 0 5
23317: PUSH
23318: EMPTY
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: ST_TO_ADDR
// exit ;
23324: GO 23738
// end ; _chassis := AvailableChassisList ( factory ) ;
23326: LD_ADDR_VAR 0 9
23330: PUSH
23331: LD_VAR 0 1
23335: PPUSH
23336: CALL_OW 475
23340: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23341: LD_ADDR_VAR 0 11
23345: PUSH
23346: LD_VAR 0 1
23350: PPUSH
23351: CALL_OW 476
23355: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23356: LD_ADDR_VAR 0 12
23360: PUSH
23361: LD_VAR 0 1
23365: PPUSH
23366: CALL_OW 477
23370: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23371: LD_ADDR_VAR 0 10
23375: PUSH
23376: LD_VAR 0 1
23380: PPUSH
23381: CALL_OW 478
23385: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
23386: LD_VAR 0 9
23390: NOT
23391: PUSH
23392: LD_VAR 0 11
23396: NOT
23397: OR
23398: PUSH
23399: LD_VAR 0 12
23403: NOT
23404: OR
23405: PUSH
23406: LD_VAR 0 10
23410: NOT
23411: OR
23412: IFFALSE 23447
// begin result := [ chassis , engine , control , weapon ] ;
23414: LD_ADDR_VAR 0 6
23418: PUSH
23419: LD_VAR 0 2
23423: PUSH
23424: LD_VAR 0 3
23428: PUSH
23429: LD_VAR 0 4
23433: PUSH
23434: LD_VAR 0 5
23438: PUSH
23439: EMPTY
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: ST_TO_ADDR
// exit ;
23445: GO 23738
// end ; if not chassis in _chassis then
23447: LD_VAR 0 2
23451: PUSH
23452: LD_VAR 0 9
23456: IN
23457: NOT
23458: IFFALSE 23484
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23460: LD_ADDR_VAR 0 2
23464: PUSH
23465: LD_VAR 0 9
23469: PUSH
23470: LD_INT 1
23472: PPUSH
23473: LD_VAR 0 9
23477: PPUSH
23478: CALL_OW 12
23482: ARRAY
23483: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23484: LD_VAR 0 2
23488: PPUSH
23489: LD_VAR 0 3
23493: PPUSH
23494: CALL 23743 0 2
23498: NOT
23499: IFFALSE 23558
// repeat engine := _engine [ 1 ] ;
23501: LD_ADDR_VAR 0 3
23505: PUSH
23506: LD_VAR 0 11
23510: PUSH
23511: LD_INT 1
23513: ARRAY
23514: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23515: LD_ADDR_VAR 0 11
23519: PUSH
23520: LD_VAR 0 11
23524: PPUSH
23525: LD_INT 1
23527: PPUSH
23528: CALL_OW 3
23532: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23533: LD_VAR 0 2
23537: PPUSH
23538: LD_VAR 0 3
23542: PPUSH
23543: CALL 23743 0 2
23547: PUSH
23548: LD_VAR 0 11
23552: PUSH
23553: EMPTY
23554: EQUAL
23555: OR
23556: IFFALSE 23501
// if not control in _control then
23558: LD_VAR 0 4
23562: PUSH
23563: LD_VAR 0 12
23567: IN
23568: NOT
23569: IFFALSE 23595
// control := _control [ rand ( 1 , _control ) ] ;
23571: LD_ADDR_VAR 0 4
23575: PUSH
23576: LD_VAR 0 12
23580: PUSH
23581: LD_INT 1
23583: PPUSH
23584: LD_VAR 0 12
23588: PPUSH
23589: CALL_OW 12
23593: ARRAY
23594: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
23595: LD_VAR 0 2
23599: PPUSH
23600: LD_VAR 0 5
23604: PPUSH
23605: CALL 23963 0 2
23609: NOT
23610: IFFALSE 23669
// repeat weapon := _weapon [ 1 ] ;
23612: LD_ADDR_VAR 0 5
23616: PUSH
23617: LD_VAR 0 10
23621: PUSH
23622: LD_INT 1
23624: ARRAY
23625: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
23626: LD_ADDR_VAR 0 10
23630: PUSH
23631: LD_VAR 0 10
23635: PPUSH
23636: LD_INT 1
23638: PPUSH
23639: CALL_OW 3
23643: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
23644: LD_VAR 0 2
23648: PPUSH
23649: LD_VAR 0 5
23653: PPUSH
23654: CALL 23963 0 2
23658: PUSH
23659: LD_VAR 0 10
23663: PUSH
23664: EMPTY
23665: EQUAL
23666: OR
23667: IFFALSE 23612
// result := [ ] ;
23669: LD_ADDR_VAR 0 6
23673: PUSH
23674: EMPTY
23675: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23676: LD_VAR 0 1
23680: PPUSH
23681: LD_VAR 0 2
23685: PPUSH
23686: LD_VAR 0 3
23690: PPUSH
23691: LD_VAR 0 4
23695: PPUSH
23696: LD_VAR 0 5
23700: PPUSH
23701: CALL_OW 448
23705: IFFALSE 23738
// result := [ chassis , engine , control , weapon ] ;
23707: LD_ADDR_VAR 0 6
23711: PUSH
23712: LD_VAR 0 2
23716: PUSH
23717: LD_VAR 0 3
23721: PUSH
23722: LD_VAR 0 4
23726: PUSH
23727: LD_VAR 0 5
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: ST_TO_ADDR
// end ;
23738: LD_VAR 0 6
23742: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
23743: LD_INT 0
23745: PPUSH
// if not chassis or not engine then
23746: LD_VAR 0 1
23750: NOT
23751: PUSH
23752: LD_VAR 0 2
23756: NOT
23757: OR
23758: IFFALSE 23762
// exit ;
23760: GO 23958
// case engine of engine_solar :
23762: LD_VAR 0 2
23766: PUSH
23767: LD_INT 2
23769: DOUBLE
23770: EQUAL
23771: IFTRUE 23775
23773: GO 23813
23775: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
23776: LD_ADDR_VAR 0 3
23780: PUSH
23781: LD_INT 11
23783: PUSH
23784: LD_INT 12
23786: PUSH
23787: LD_INT 13
23789: PUSH
23790: LD_INT 14
23792: PUSH
23793: LD_INT 1
23795: PUSH
23796: LD_INT 2
23798: PUSH
23799: LD_INT 3
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: ST_TO_ADDR
23811: GO 23942
23813: LD_INT 1
23815: DOUBLE
23816: EQUAL
23817: IFTRUE 23821
23819: GO 23883
23821: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
23822: LD_ADDR_VAR 0 3
23826: PUSH
23827: LD_INT 11
23829: PUSH
23830: LD_INT 12
23832: PUSH
23833: LD_INT 13
23835: PUSH
23836: LD_INT 14
23838: PUSH
23839: LD_INT 1
23841: PUSH
23842: LD_INT 2
23844: PUSH
23845: LD_INT 3
23847: PUSH
23848: LD_INT 4
23850: PUSH
23851: LD_INT 5
23853: PUSH
23854: LD_INT 21
23856: PUSH
23857: LD_INT 23
23859: PUSH
23860: LD_INT 22
23862: PUSH
23863: LD_INT 24
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: ST_TO_ADDR
23881: GO 23942
23883: LD_INT 3
23885: DOUBLE
23886: EQUAL
23887: IFTRUE 23891
23889: GO 23941
23891: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23892: LD_ADDR_VAR 0 3
23896: PUSH
23897: LD_INT 13
23899: PUSH
23900: LD_INT 14
23902: PUSH
23903: LD_INT 2
23905: PUSH
23906: LD_INT 3
23908: PUSH
23909: LD_INT 4
23911: PUSH
23912: LD_INT 5
23914: PUSH
23915: LD_INT 21
23917: PUSH
23918: LD_INT 22
23920: PUSH
23921: LD_INT 23
23923: PUSH
23924: LD_INT 24
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: ST_TO_ADDR
23939: GO 23942
23941: POP
// result := ( chassis in result ) ;
23942: LD_ADDR_VAR 0 3
23946: PUSH
23947: LD_VAR 0 1
23951: PUSH
23952: LD_VAR 0 3
23956: IN
23957: ST_TO_ADDR
// end ;
23958: LD_VAR 0 3
23962: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
23963: LD_INT 0
23965: PPUSH
// if not chassis or not weapon then
23966: LD_VAR 0 1
23970: NOT
23971: PUSH
23972: LD_VAR 0 2
23976: NOT
23977: OR
23978: IFFALSE 23982
// exit ;
23980: GO 25042
// case weapon of us_machine_gun :
23982: LD_VAR 0 2
23986: PUSH
23987: LD_INT 2
23989: DOUBLE
23990: EQUAL
23991: IFTRUE 23995
23993: GO 24025
23995: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
23996: LD_ADDR_VAR 0 3
24000: PUSH
24001: LD_INT 1
24003: PUSH
24004: LD_INT 2
24006: PUSH
24007: LD_INT 3
24009: PUSH
24010: LD_INT 4
24012: PUSH
24013: LD_INT 5
24015: PUSH
24016: EMPTY
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: ST_TO_ADDR
24023: GO 25026
24025: LD_INT 3
24027: DOUBLE
24028: EQUAL
24029: IFTRUE 24033
24031: GO 24063
24033: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24034: LD_ADDR_VAR 0 3
24038: PUSH
24039: LD_INT 1
24041: PUSH
24042: LD_INT 2
24044: PUSH
24045: LD_INT 3
24047: PUSH
24048: LD_INT 4
24050: PUSH
24051: LD_INT 5
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: ST_TO_ADDR
24061: GO 25026
24063: LD_INT 11
24065: DOUBLE
24066: EQUAL
24067: IFTRUE 24071
24069: GO 24101
24071: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24072: LD_ADDR_VAR 0 3
24076: PUSH
24077: LD_INT 1
24079: PUSH
24080: LD_INT 2
24082: PUSH
24083: LD_INT 3
24085: PUSH
24086: LD_INT 4
24088: PUSH
24089: LD_INT 5
24091: PUSH
24092: EMPTY
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: ST_TO_ADDR
24099: GO 25026
24101: LD_INT 4
24103: DOUBLE
24104: EQUAL
24105: IFTRUE 24109
24107: GO 24135
24109: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24110: LD_ADDR_VAR 0 3
24114: PUSH
24115: LD_INT 2
24117: PUSH
24118: LD_INT 3
24120: PUSH
24121: LD_INT 4
24123: PUSH
24124: LD_INT 5
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: ST_TO_ADDR
24133: GO 25026
24135: LD_INT 5
24137: DOUBLE
24138: EQUAL
24139: IFTRUE 24143
24141: GO 24169
24143: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24144: LD_ADDR_VAR 0 3
24148: PUSH
24149: LD_INT 2
24151: PUSH
24152: LD_INT 3
24154: PUSH
24155: LD_INT 4
24157: PUSH
24158: LD_INT 5
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: ST_TO_ADDR
24167: GO 25026
24169: LD_INT 9
24171: DOUBLE
24172: EQUAL
24173: IFTRUE 24177
24175: GO 24203
24177: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24178: LD_ADDR_VAR 0 3
24182: PUSH
24183: LD_INT 2
24185: PUSH
24186: LD_INT 3
24188: PUSH
24189: LD_INT 4
24191: PUSH
24192: LD_INT 5
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: ST_TO_ADDR
24201: GO 25026
24203: LD_INT 7
24205: DOUBLE
24206: EQUAL
24207: IFTRUE 24211
24209: GO 24237
24211: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24212: LD_ADDR_VAR 0 3
24216: PUSH
24217: LD_INT 2
24219: PUSH
24220: LD_INT 3
24222: PUSH
24223: LD_INT 4
24225: PUSH
24226: LD_INT 5
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: ST_TO_ADDR
24235: GO 25026
24237: LD_INT 12
24239: DOUBLE
24240: EQUAL
24241: IFTRUE 24245
24243: GO 24271
24245: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24246: LD_ADDR_VAR 0 3
24250: PUSH
24251: LD_INT 2
24253: PUSH
24254: LD_INT 3
24256: PUSH
24257: LD_INT 4
24259: PUSH
24260: LD_INT 5
24262: PUSH
24263: EMPTY
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: ST_TO_ADDR
24269: GO 25026
24271: LD_INT 13
24273: DOUBLE
24274: EQUAL
24275: IFTRUE 24279
24277: GO 24305
24279: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24280: LD_ADDR_VAR 0 3
24284: PUSH
24285: LD_INT 2
24287: PUSH
24288: LD_INT 3
24290: PUSH
24291: LD_INT 4
24293: PUSH
24294: LD_INT 5
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: ST_TO_ADDR
24303: GO 25026
24305: LD_INT 14
24307: DOUBLE
24308: EQUAL
24309: IFTRUE 24313
24311: GO 24331
24313: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24314: LD_ADDR_VAR 0 3
24318: PUSH
24319: LD_INT 4
24321: PUSH
24322: LD_INT 5
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: ST_TO_ADDR
24329: GO 25026
24331: LD_INT 6
24333: DOUBLE
24334: EQUAL
24335: IFTRUE 24339
24337: GO 24357
24339: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24340: LD_ADDR_VAR 0 3
24344: PUSH
24345: LD_INT 4
24347: PUSH
24348: LD_INT 5
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: ST_TO_ADDR
24355: GO 25026
24357: LD_INT 10
24359: DOUBLE
24360: EQUAL
24361: IFTRUE 24365
24363: GO 24383
24365: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24366: LD_ADDR_VAR 0 3
24370: PUSH
24371: LD_INT 4
24373: PUSH
24374: LD_INT 5
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: ST_TO_ADDR
24381: GO 25026
24383: LD_INT 22
24385: DOUBLE
24386: EQUAL
24387: IFTRUE 24391
24389: GO 24417
24391: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24392: LD_ADDR_VAR 0 3
24396: PUSH
24397: LD_INT 11
24399: PUSH
24400: LD_INT 12
24402: PUSH
24403: LD_INT 13
24405: PUSH
24406: LD_INT 14
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: ST_TO_ADDR
24415: GO 25026
24417: LD_INT 23
24419: DOUBLE
24420: EQUAL
24421: IFTRUE 24425
24423: GO 24451
24425: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24426: LD_ADDR_VAR 0 3
24430: PUSH
24431: LD_INT 11
24433: PUSH
24434: LD_INT 12
24436: PUSH
24437: LD_INT 13
24439: PUSH
24440: LD_INT 14
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: ST_TO_ADDR
24449: GO 25026
24451: LD_INT 24
24453: DOUBLE
24454: EQUAL
24455: IFTRUE 24459
24457: GO 24485
24459: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24460: LD_ADDR_VAR 0 3
24464: PUSH
24465: LD_INT 11
24467: PUSH
24468: LD_INT 12
24470: PUSH
24471: LD_INT 13
24473: PUSH
24474: LD_INT 14
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: ST_TO_ADDR
24483: GO 25026
24485: LD_INT 30
24487: DOUBLE
24488: EQUAL
24489: IFTRUE 24493
24491: GO 24519
24493: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24494: LD_ADDR_VAR 0 3
24498: PUSH
24499: LD_INT 11
24501: PUSH
24502: LD_INT 12
24504: PUSH
24505: LD_INT 13
24507: PUSH
24508: LD_INT 14
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: ST_TO_ADDR
24517: GO 25026
24519: LD_INT 25
24521: DOUBLE
24522: EQUAL
24523: IFTRUE 24527
24525: GO 24545
24527: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24528: LD_ADDR_VAR 0 3
24532: PUSH
24533: LD_INT 13
24535: PUSH
24536: LD_INT 14
24538: PUSH
24539: EMPTY
24540: LIST
24541: LIST
24542: ST_TO_ADDR
24543: GO 25026
24545: LD_INT 27
24547: DOUBLE
24548: EQUAL
24549: IFTRUE 24553
24551: GO 24571
24553: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
24554: LD_ADDR_VAR 0 3
24558: PUSH
24559: LD_INT 13
24561: PUSH
24562: LD_INT 14
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: ST_TO_ADDR
24569: GO 25026
24571: LD_INT 92
24573: DOUBLE
24574: EQUAL
24575: IFTRUE 24579
24577: GO 24605
24579: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
24580: LD_ADDR_VAR 0 3
24584: PUSH
24585: LD_INT 11
24587: PUSH
24588: LD_INT 12
24590: PUSH
24591: LD_INT 13
24593: PUSH
24594: LD_INT 14
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: ST_TO_ADDR
24603: GO 25026
24605: LD_INT 28
24607: DOUBLE
24608: EQUAL
24609: IFTRUE 24613
24611: GO 24631
24613: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
24614: LD_ADDR_VAR 0 3
24618: PUSH
24619: LD_INT 13
24621: PUSH
24622: LD_INT 14
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: ST_TO_ADDR
24629: GO 25026
24631: LD_INT 29
24633: DOUBLE
24634: EQUAL
24635: IFTRUE 24639
24637: GO 24657
24639: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
24640: LD_ADDR_VAR 0 3
24644: PUSH
24645: LD_INT 13
24647: PUSH
24648: LD_INT 14
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: ST_TO_ADDR
24655: GO 25026
24657: LD_INT 31
24659: DOUBLE
24660: EQUAL
24661: IFTRUE 24665
24663: GO 24683
24665: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
24666: LD_ADDR_VAR 0 3
24670: PUSH
24671: LD_INT 13
24673: PUSH
24674: LD_INT 14
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: ST_TO_ADDR
24681: GO 25026
24683: LD_INT 26
24685: DOUBLE
24686: EQUAL
24687: IFTRUE 24691
24689: GO 24709
24691: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
24692: LD_ADDR_VAR 0 3
24696: PUSH
24697: LD_INT 13
24699: PUSH
24700: LD_INT 14
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: ST_TO_ADDR
24707: GO 25026
24709: LD_INT 42
24711: DOUBLE
24712: EQUAL
24713: IFTRUE 24717
24715: GO 24743
24717: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
24718: LD_ADDR_VAR 0 3
24722: PUSH
24723: LD_INT 21
24725: PUSH
24726: LD_INT 22
24728: PUSH
24729: LD_INT 23
24731: PUSH
24732: LD_INT 24
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: ST_TO_ADDR
24741: GO 25026
24743: LD_INT 43
24745: DOUBLE
24746: EQUAL
24747: IFTRUE 24751
24749: GO 24777
24751: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
24752: LD_ADDR_VAR 0 3
24756: PUSH
24757: LD_INT 21
24759: PUSH
24760: LD_INT 22
24762: PUSH
24763: LD_INT 23
24765: PUSH
24766: LD_INT 24
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: ST_TO_ADDR
24775: GO 25026
24777: LD_INT 44
24779: DOUBLE
24780: EQUAL
24781: IFTRUE 24785
24783: GO 24811
24785: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24786: LD_ADDR_VAR 0 3
24790: PUSH
24791: LD_INT 21
24793: PUSH
24794: LD_INT 22
24796: PUSH
24797: LD_INT 23
24799: PUSH
24800: LD_INT 24
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: ST_TO_ADDR
24809: GO 25026
24811: LD_INT 45
24813: DOUBLE
24814: EQUAL
24815: IFTRUE 24819
24817: GO 24845
24819: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
24820: LD_ADDR_VAR 0 3
24824: PUSH
24825: LD_INT 21
24827: PUSH
24828: LD_INT 22
24830: PUSH
24831: LD_INT 23
24833: PUSH
24834: LD_INT 24
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: ST_TO_ADDR
24843: GO 25026
24845: LD_INT 49
24847: DOUBLE
24848: EQUAL
24849: IFTRUE 24853
24851: GO 24879
24853: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
24854: LD_ADDR_VAR 0 3
24858: PUSH
24859: LD_INT 21
24861: PUSH
24862: LD_INT 22
24864: PUSH
24865: LD_INT 23
24867: PUSH
24868: LD_INT 24
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: ST_TO_ADDR
24877: GO 25026
24879: LD_INT 51
24881: DOUBLE
24882: EQUAL
24883: IFTRUE 24887
24885: GO 24913
24887: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
24888: LD_ADDR_VAR 0 3
24892: PUSH
24893: LD_INT 21
24895: PUSH
24896: LD_INT 22
24898: PUSH
24899: LD_INT 23
24901: PUSH
24902: LD_INT 24
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: ST_TO_ADDR
24911: GO 25026
24913: LD_INT 52
24915: DOUBLE
24916: EQUAL
24917: IFTRUE 24921
24919: GO 24947
24921: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
24922: LD_ADDR_VAR 0 3
24926: PUSH
24927: LD_INT 21
24929: PUSH
24930: LD_INT 22
24932: PUSH
24933: LD_INT 23
24935: PUSH
24936: LD_INT 24
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: ST_TO_ADDR
24945: GO 25026
24947: LD_INT 53
24949: DOUBLE
24950: EQUAL
24951: IFTRUE 24955
24953: GO 24973
24955: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
24956: LD_ADDR_VAR 0 3
24960: PUSH
24961: LD_INT 23
24963: PUSH
24964: LD_INT 24
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: ST_TO_ADDR
24971: GO 25026
24973: LD_INT 46
24975: DOUBLE
24976: EQUAL
24977: IFTRUE 24981
24979: GO 24999
24981: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
24982: LD_ADDR_VAR 0 3
24986: PUSH
24987: LD_INT 23
24989: PUSH
24990: LD_INT 24
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: ST_TO_ADDR
24997: GO 25026
24999: LD_INT 47
25001: DOUBLE
25002: EQUAL
25003: IFTRUE 25007
25005: GO 25025
25007: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25008: LD_ADDR_VAR 0 3
25012: PUSH
25013: LD_INT 23
25015: PUSH
25016: LD_INT 24
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: ST_TO_ADDR
25023: GO 25026
25025: POP
// result := ( chassis in result ) ;
25026: LD_ADDR_VAR 0 3
25030: PUSH
25031: LD_VAR 0 1
25035: PUSH
25036: LD_VAR 0 3
25040: IN
25041: ST_TO_ADDR
// end ;
25042: LD_VAR 0 3
25046: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25047: LD_INT 0
25049: PPUSH
25050: PPUSH
25051: PPUSH
25052: PPUSH
25053: PPUSH
25054: PPUSH
25055: PPUSH
// result := array ;
25056: LD_ADDR_VAR 0 5
25060: PUSH
25061: LD_VAR 0 1
25065: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25066: LD_VAR 0 1
25070: NOT
25071: PUSH
25072: LD_VAR 0 2
25076: NOT
25077: OR
25078: PUSH
25079: LD_VAR 0 3
25083: NOT
25084: OR
25085: PUSH
25086: LD_VAR 0 2
25090: PUSH
25091: LD_VAR 0 1
25095: GREATER
25096: OR
25097: PUSH
25098: LD_VAR 0 3
25102: PUSH
25103: LD_VAR 0 1
25107: GREATER
25108: OR
25109: IFFALSE 25113
// exit ;
25111: GO 25409
// if direction then
25113: LD_VAR 0 4
25117: IFFALSE 25181
// begin d := 1 ;
25119: LD_ADDR_VAR 0 9
25123: PUSH
25124: LD_INT 1
25126: ST_TO_ADDR
// if i_from > i_to then
25127: LD_VAR 0 2
25131: PUSH
25132: LD_VAR 0 3
25136: GREATER
25137: IFFALSE 25163
// length := ( array - i_from ) + i_to else
25139: LD_ADDR_VAR 0 11
25143: PUSH
25144: LD_VAR 0 1
25148: PUSH
25149: LD_VAR 0 2
25153: MINUS
25154: PUSH
25155: LD_VAR 0 3
25159: PLUS
25160: ST_TO_ADDR
25161: GO 25179
// length := i_to - i_from ;
25163: LD_ADDR_VAR 0 11
25167: PUSH
25168: LD_VAR 0 3
25172: PUSH
25173: LD_VAR 0 2
25177: MINUS
25178: ST_TO_ADDR
// end else
25179: GO 25242
// begin d := - 1 ;
25181: LD_ADDR_VAR 0 9
25185: PUSH
25186: LD_INT 1
25188: NEG
25189: ST_TO_ADDR
// if i_from > i_to then
25190: LD_VAR 0 2
25194: PUSH
25195: LD_VAR 0 3
25199: GREATER
25200: IFFALSE 25220
// length := i_from - i_to else
25202: LD_ADDR_VAR 0 11
25206: PUSH
25207: LD_VAR 0 2
25211: PUSH
25212: LD_VAR 0 3
25216: MINUS
25217: ST_TO_ADDR
25218: GO 25242
// length := ( array - i_to ) + i_from ;
25220: LD_ADDR_VAR 0 11
25224: PUSH
25225: LD_VAR 0 1
25229: PUSH
25230: LD_VAR 0 3
25234: MINUS
25235: PUSH
25236: LD_VAR 0 2
25240: PLUS
25241: ST_TO_ADDR
// end ; if not length then
25242: LD_VAR 0 11
25246: NOT
25247: IFFALSE 25251
// exit ;
25249: GO 25409
// tmp := array ;
25251: LD_ADDR_VAR 0 10
25255: PUSH
25256: LD_VAR 0 1
25260: ST_TO_ADDR
// for i = 1 to length do
25261: LD_ADDR_VAR 0 6
25265: PUSH
25266: DOUBLE
25267: LD_INT 1
25269: DEC
25270: ST_TO_ADDR
25271: LD_VAR 0 11
25275: PUSH
25276: FOR_TO
25277: IFFALSE 25397
// begin for j = 1 to array do
25279: LD_ADDR_VAR 0 7
25283: PUSH
25284: DOUBLE
25285: LD_INT 1
25287: DEC
25288: ST_TO_ADDR
25289: LD_VAR 0 1
25293: PUSH
25294: FOR_TO
25295: IFFALSE 25383
// begin k := j + d ;
25297: LD_ADDR_VAR 0 8
25301: PUSH
25302: LD_VAR 0 7
25306: PUSH
25307: LD_VAR 0 9
25311: PLUS
25312: ST_TO_ADDR
// if k > array then
25313: LD_VAR 0 8
25317: PUSH
25318: LD_VAR 0 1
25322: GREATER
25323: IFFALSE 25333
// k := 1 ;
25325: LD_ADDR_VAR 0 8
25329: PUSH
25330: LD_INT 1
25332: ST_TO_ADDR
// if not k then
25333: LD_VAR 0 8
25337: NOT
25338: IFFALSE 25350
// k := array ;
25340: LD_ADDR_VAR 0 8
25344: PUSH
25345: LD_VAR 0 1
25349: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25350: LD_ADDR_VAR 0 10
25354: PUSH
25355: LD_VAR 0 10
25359: PPUSH
25360: LD_VAR 0 8
25364: PPUSH
25365: LD_VAR 0 1
25369: PUSH
25370: LD_VAR 0 7
25374: ARRAY
25375: PPUSH
25376: CALL_OW 1
25380: ST_TO_ADDR
// end ;
25381: GO 25294
25383: POP
25384: POP
// array := tmp ;
25385: LD_ADDR_VAR 0 1
25389: PUSH
25390: LD_VAR 0 10
25394: ST_TO_ADDR
// end ;
25395: GO 25276
25397: POP
25398: POP
// result := array ;
25399: LD_ADDR_VAR 0 5
25403: PUSH
25404: LD_VAR 0 1
25408: ST_TO_ADDR
// end ;
25409: LD_VAR 0 5
25413: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25414: LD_INT 0
25416: PPUSH
25417: PPUSH
// result := 0 ;
25418: LD_ADDR_VAR 0 3
25422: PUSH
25423: LD_INT 0
25425: ST_TO_ADDR
// if not array or not value in array then
25426: LD_VAR 0 1
25430: NOT
25431: PUSH
25432: LD_VAR 0 2
25436: PUSH
25437: LD_VAR 0 1
25441: IN
25442: NOT
25443: OR
25444: IFFALSE 25448
// exit ;
25446: GO 25502
// for i = 1 to array do
25448: LD_ADDR_VAR 0 4
25452: PUSH
25453: DOUBLE
25454: LD_INT 1
25456: DEC
25457: ST_TO_ADDR
25458: LD_VAR 0 1
25462: PUSH
25463: FOR_TO
25464: IFFALSE 25500
// if value = array [ i ] then
25466: LD_VAR 0 2
25470: PUSH
25471: LD_VAR 0 1
25475: PUSH
25476: LD_VAR 0 4
25480: ARRAY
25481: EQUAL
25482: IFFALSE 25498
// begin result := i ;
25484: LD_ADDR_VAR 0 3
25488: PUSH
25489: LD_VAR 0 4
25493: ST_TO_ADDR
// exit ;
25494: POP
25495: POP
25496: GO 25502
// end ;
25498: GO 25463
25500: POP
25501: POP
// end ;
25502: LD_VAR 0 3
25506: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25507: LD_INT 0
25509: PPUSH
// vc_chassis := chassis ;
25510: LD_ADDR_OWVAR 37
25514: PUSH
25515: LD_VAR 0 1
25519: ST_TO_ADDR
// vc_engine := engine ;
25520: LD_ADDR_OWVAR 39
25524: PUSH
25525: LD_VAR 0 2
25529: ST_TO_ADDR
// vc_control := control ;
25530: LD_ADDR_OWVAR 38
25534: PUSH
25535: LD_VAR 0 3
25539: ST_TO_ADDR
// vc_weapon := weapon ;
25540: LD_ADDR_OWVAR 40
25544: PUSH
25545: LD_VAR 0 4
25549: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25550: LD_ADDR_OWVAR 41
25554: PUSH
25555: LD_VAR 0 5
25559: ST_TO_ADDR
// end ;
25560: LD_VAR 0 6
25564: RET
// export function WantPlant ( unit ) ; var task ; begin
25565: LD_INT 0
25567: PPUSH
25568: PPUSH
// result := false ;
25569: LD_ADDR_VAR 0 2
25573: PUSH
25574: LD_INT 0
25576: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25577: LD_ADDR_VAR 0 3
25581: PUSH
25582: LD_VAR 0 1
25586: PPUSH
25587: CALL_OW 437
25591: ST_TO_ADDR
// if task then
25592: LD_VAR 0 3
25596: IFFALSE 25624
// if task [ 1 ] [ 1 ] = p then
25598: LD_VAR 0 3
25602: PUSH
25603: LD_INT 1
25605: ARRAY
25606: PUSH
25607: LD_INT 1
25609: ARRAY
25610: PUSH
25611: LD_STRING p
25613: EQUAL
25614: IFFALSE 25624
// result := true ;
25616: LD_ADDR_VAR 0 2
25620: PUSH
25621: LD_INT 1
25623: ST_TO_ADDR
// end ;
25624: LD_VAR 0 2
25628: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
25629: LD_INT 0
25631: PPUSH
25632: PPUSH
25633: PPUSH
25634: PPUSH
// if pos < 1 then
25635: LD_VAR 0 2
25639: PUSH
25640: LD_INT 1
25642: LESS
25643: IFFALSE 25647
// exit ;
25645: GO 25950
// if pos = 1 then
25647: LD_VAR 0 2
25651: PUSH
25652: LD_INT 1
25654: EQUAL
25655: IFFALSE 25688
// result := Replace ( arr , pos [ 1 ] , value ) else
25657: LD_ADDR_VAR 0 4
25661: PUSH
25662: LD_VAR 0 1
25666: PPUSH
25667: LD_VAR 0 2
25671: PUSH
25672: LD_INT 1
25674: ARRAY
25675: PPUSH
25676: LD_VAR 0 3
25680: PPUSH
25681: CALL_OW 1
25685: ST_TO_ADDR
25686: GO 25950
// begin tmp := arr ;
25688: LD_ADDR_VAR 0 6
25692: PUSH
25693: LD_VAR 0 1
25697: ST_TO_ADDR
// s_arr := [ tmp ] ;
25698: LD_ADDR_VAR 0 7
25702: PUSH
25703: LD_VAR 0 6
25707: PUSH
25708: EMPTY
25709: LIST
25710: ST_TO_ADDR
// for i = 1 to pos - 1 do
25711: LD_ADDR_VAR 0 5
25715: PUSH
25716: DOUBLE
25717: LD_INT 1
25719: DEC
25720: ST_TO_ADDR
25721: LD_VAR 0 2
25725: PUSH
25726: LD_INT 1
25728: MINUS
25729: PUSH
25730: FOR_TO
25731: IFFALSE 25776
// begin tmp := tmp [ pos [ i ] ] ;
25733: LD_ADDR_VAR 0 6
25737: PUSH
25738: LD_VAR 0 6
25742: PUSH
25743: LD_VAR 0 2
25747: PUSH
25748: LD_VAR 0 5
25752: ARRAY
25753: ARRAY
25754: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
25755: LD_ADDR_VAR 0 7
25759: PUSH
25760: LD_VAR 0 7
25764: PUSH
25765: LD_VAR 0 6
25769: PUSH
25770: EMPTY
25771: LIST
25772: ADD
25773: ST_TO_ADDR
// end ;
25774: GO 25730
25776: POP
25777: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25778: LD_ADDR_VAR 0 6
25782: PUSH
25783: LD_VAR 0 6
25787: PPUSH
25788: LD_VAR 0 2
25792: PUSH
25793: LD_VAR 0 2
25797: ARRAY
25798: PPUSH
25799: LD_VAR 0 3
25803: PPUSH
25804: CALL_OW 1
25808: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
25809: LD_ADDR_VAR 0 7
25813: PUSH
25814: LD_VAR 0 7
25818: PPUSH
25819: LD_VAR 0 7
25823: PPUSH
25824: LD_VAR 0 6
25828: PPUSH
25829: CALL_OW 1
25833: ST_TO_ADDR
// for i = s_arr downto 2 do
25834: LD_ADDR_VAR 0 5
25838: PUSH
25839: DOUBLE
25840: LD_VAR 0 7
25844: INC
25845: ST_TO_ADDR
25846: LD_INT 2
25848: PUSH
25849: FOR_DOWNTO
25850: IFFALSE 25934
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
25852: LD_ADDR_VAR 0 6
25856: PUSH
25857: LD_VAR 0 7
25861: PUSH
25862: LD_VAR 0 5
25866: PUSH
25867: LD_INT 1
25869: MINUS
25870: ARRAY
25871: PPUSH
25872: LD_VAR 0 2
25876: PUSH
25877: LD_VAR 0 5
25881: PUSH
25882: LD_INT 1
25884: MINUS
25885: ARRAY
25886: PPUSH
25887: LD_VAR 0 7
25891: PUSH
25892: LD_VAR 0 5
25896: ARRAY
25897: PPUSH
25898: CALL_OW 1
25902: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
25903: LD_ADDR_VAR 0 7
25907: PUSH
25908: LD_VAR 0 7
25912: PPUSH
25913: LD_VAR 0 5
25917: PUSH
25918: LD_INT 1
25920: MINUS
25921: PPUSH
25922: LD_VAR 0 6
25926: PPUSH
25927: CALL_OW 1
25931: ST_TO_ADDR
// end ;
25932: GO 25849
25934: POP
25935: POP
// result := s_arr [ 1 ] ;
25936: LD_ADDR_VAR 0 4
25940: PUSH
25941: LD_VAR 0 7
25945: PUSH
25946: LD_INT 1
25948: ARRAY
25949: ST_TO_ADDR
// end ; end ;
25950: LD_VAR 0 4
25954: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
25955: LD_INT 0
25957: PPUSH
25958: PPUSH
// if not list then
25959: LD_VAR 0 1
25963: NOT
25964: IFFALSE 25968
// exit ;
25966: GO 26059
// i := list [ pos1 ] ;
25968: LD_ADDR_VAR 0 5
25972: PUSH
25973: LD_VAR 0 1
25977: PUSH
25978: LD_VAR 0 2
25982: ARRAY
25983: ST_TO_ADDR
// if not i then
25984: LD_VAR 0 5
25988: NOT
25989: IFFALSE 25993
// exit ;
25991: GO 26059
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
25993: LD_ADDR_VAR 0 1
25997: PUSH
25998: LD_VAR 0 1
26002: PPUSH
26003: LD_VAR 0 2
26007: PPUSH
26008: LD_VAR 0 1
26012: PUSH
26013: LD_VAR 0 3
26017: ARRAY
26018: PPUSH
26019: CALL_OW 1
26023: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26024: LD_ADDR_VAR 0 1
26028: PUSH
26029: LD_VAR 0 1
26033: PPUSH
26034: LD_VAR 0 3
26038: PPUSH
26039: LD_VAR 0 5
26043: PPUSH
26044: CALL_OW 1
26048: ST_TO_ADDR
// result := list ;
26049: LD_ADDR_VAR 0 4
26053: PUSH
26054: LD_VAR 0 1
26058: ST_TO_ADDR
// end ;
26059: LD_VAR 0 4
26063: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26064: LD_INT 0
26066: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26067: LD_ADDR_VAR 0 5
26071: PUSH
26072: LD_VAR 0 1
26076: PPUSH
26077: CALL_OW 250
26081: PPUSH
26082: LD_VAR 0 1
26086: PPUSH
26087: CALL_OW 251
26091: PPUSH
26092: LD_VAR 0 2
26096: PPUSH
26097: LD_VAR 0 3
26101: PPUSH
26102: LD_VAR 0 4
26106: PPUSH
26107: CALL 26485 0 5
26111: ST_TO_ADDR
// end ;
26112: LD_VAR 0 5
26116: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
26117: LD_INT 0
26119: PPUSH
26120: PPUSH
26121: PPUSH
26122: PPUSH
// if not list or not unit then
26123: LD_VAR 0 2
26127: NOT
26128: PUSH
26129: LD_VAR 0 1
26133: NOT
26134: OR
26135: IFFALSE 26139
// exit ;
26137: GO 26480
// result := [ ] ;
26139: LD_ADDR_VAR 0 5
26143: PUSH
26144: EMPTY
26145: ST_TO_ADDR
// for i in list do
26146: LD_ADDR_VAR 0 6
26150: PUSH
26151: LD_VAR 0 2
26155: PUSH
26156: FOR_IN
26157: IFFALSE 26375
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
26159: LD_ADDR_VAR 0 8
26163: PUSH
26164: LD_VAR 0 1
26168: PPUSH
26169: LD_VAR 0 6
26173: PUSH
26174: LD_INT 1
26176: ARRAY
26177: PPUSH
26178: LD_VAR 0 6
26182: PUSH
26183: LD_INT 2
26185: ARRAY
26186: PPUSH
26187: CALL_OW 297
26191: ST_TO_ADDR
// if not Count ( result ) then
26192: LD_VAR 0 5
26196: PPUSH
26197: CALL 22769 0 1
26201: NOT
26202: IFFALSE 26235
// begin result := Join ( result , [ i , tmp ] ) ;
26204: LD_ADDR_VAR 0 5
26208: PUSH
26209: LD_VAR 0 5
26213: PPUSH
26214: LD_VAR 0 6
26218: PUSH
26219: LD_VAR 0 8
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PPUSH
26228: CALL 58358 0 2
26232: ST_TO_ADDR
// continue ;
26233: GO 26156
// end ; if result [ result ] [ 2 ] <= tmp then
26235: LD_VAR 0 5
26239: PUSH
26240: LD_VAR 0 5
26244: ARRAY
26245: PUSH
26246: LD_INT 2
26248: ARRAY
26249: PUSH
26250: LD_VAR 0 8
26254: LESSEQUAL
26255: IFFALSE 26288
// result := Join ( result , [ i , tmp ] ) else
26257: LD_ADDR_VAR 0 5
26261: PUSH
26262: LD_VAR 0 5
26266: PPUSH
26267: LD_VAR 0 6
26271: PUSH
26272: LD_VAR 0 8
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PPUSH
26281: CALL 58358 0 2
26285: ST_TO_ADDR
26286: GO 26373
// begin for j := 1 to Count ( result ) do
26288: LD_ADDR_VAR 0 7
26292: PUSH
26293: DOUBLE
26294: LD_INT 1
26296: DEC
26297: ST_TO_ADDR
26298: LD_VAR 0 5
26302: PPUSH
26303: CALL 22769 0 1
26307: PUSH
26308: FOR_TO
26309: IFFALSE 26371
// begin if tmp < result [ j ] [ 2 ] then
26311: LD_VAR 0 8
26315: PUSH
26316: LD_VAR 0 5
26320: PUSH
26321: LD_VAR 0 7
26325: ARRAY
26326: PUSH
26327: LD_INT 2
26329: ARRAY
26330: LESS
26331: IFFALSE 26369
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26333: LD_ADDR_VAR 0 5
26337: PUSH
26338: LD_VAR 0 5
26342: PPUSH
26343: LD_VAR 0 7
26347: PPUSH
26348: LD_VAR 0 6
26352: PUSH
26353: LD_VAR 0 8
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PPUSH
26362: CALL_OW 2
26366: ST_TO_ADDR
// break ;
26367: GO 26371
// end ; end ;
26369: GO 26308
26371: POP
26372: POP
// end ; end ;
26373: GO 26156
26375: POP
26376: POP
// if result and not asc then
26377: LD_VAR 0 5
26381: PUSH
26382: LD_VAR 0 3
26386: NOT
26387: AND
26388: IFFALSE 26405
// result := ReverseArray ( result ) ;
26390: LD_ADDR_VAR 0 5
26394: PUSH
26395: LD_VAR 0 5
26399: PPUSH
26400: CALL 53645 0 1
26404: ST_TO_ADDR
// tmp := [ ] ;
26405: LD_ADDR_VAR 0 8
26409: PUSH
26410: EMPTY
26411: ST_TO_ADDR
// if mode then
26412: LD_VAR 0 4
26416: IFFALSE 26480
// begin for i := 1 to result do
26418: LD_ADDR_VAR 0 6
26422: PUSH
26423: DOUBLE
26424: LD_INT 1
26426: DEC
26427: ST_TO_ADDR
26428: LD_VAR 0 5
26432: PUSH
26433: FOR_TO
26434: IFFALSE 26468
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
26436: LD_ADDR_VAR 0 8
26440: PUSH
26441: LD_VAR 0 8
26445: PPUSH
26446: LD_VAR 0 5
26450: PUSH
26451: LD_VAR 0 6
26455: ARRAY
26456: PUSH
26457: LD_INT 1
26459: ARRAY
26460: PPUSH
26461: CALL 58358 0 2
26465: ST_TO_ADDR
26466: GO 26433
26468: POP
26469: POP
// result := tmp ;
26470: LD_ADDR_VAR 0 5
26474: PUSH
26475: LD_VAR 0 8
26479: ST_TO_ADDR
// end ; end ;
26480: LD_VAR 0 5
26484: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26485: LD_INT 0
26487: PPUSH
26488: PPUSH
26489: PPUSH
26490: PPUSH
// if not list then
26491: LD_VAR 0 3
26495: NOT
26496: IFFALSE 26500
// exit ;
26498: GO 26888
// result := [ ] ;
26500: LD_ADDR_VAR 0 6
26504: PUSH
26505: EMPTY
26506: ST_TO_ADDR
// for i in list do
26507: LD_ADDR_VAR 0 7
26511: PUSH
26512: LD_VAR 0 3
26516: PUSH
26517: FOR_IN
26518: IFFALSE 26720
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26520: LD_ADDR_VAR 0 9
26524: PUSH
26525: LD_VAR 0 7
26529: PPUSH
26530: LD_VAR 0 1
26534: PPUSH
26535: LD_VAR 0 2
26539: PPUSH
26540: CALL_OW 297
26544: ST_TO_ADDR
// if not result then
26545: LD_VAR 0 6
26549: NOT
26550: IFFALSE 26576
// result := [ [ i , tmp ] ] else
26552: LD_ADDR_VAR 0 6
26556: PUSH
26557: LD_VAR 0 7
26561: PUSH
26562: LD_VAR 0 9
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: EMPTY
26572: LIST
26573: ST_TO_ADDR
26574: GO 26718
// begin if result [ result ] [ 2 ] < tmp then
26576: LD_VAR 0 6
26580: PUSH
26581: LD_VAR 0 6
26585: ARRAY
26586: PUSH
26587: LD_INT 2
26589: ARRAY
26590: PUSH
26591: LD_VAR 0 9
26595: LESS
26596: IFFALSE 26638
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26598: LD_ADDR_VAR 0 6
26602: PUSH
26603: LD_VAR 0 6
26607: PPUSH
26608: LD_VAR 0 6
26612: PUSH
26613: LD_INT 1
26615: PLUS
26616: PPUSH
26617: LD_VAR 0 7
26621: PUSH
26622: LD_VAR 0 9
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PPUSH
26631: CALL_OW 2
26635: ST_TO_ADDR
26636: GO 26718
// for j = 1 to result do
26638: LD_ADDR_VAR 0 8
26642: PUSH
26643: DOUBLE
26644: LD_INT 1
26646: DEC
26647: ST_TO_ADDR
26648: LD_VAR 0 6
26652: PUSH
26653: FOR_TO
26654: IFFALSE 26716
// begin if tmp < result [ j ] [ 2 ] then
26656: LD_VAR 0 9
26660: PUSH
26661: LD_VAR 0 6
26665: PUSH
26666: LD_VAR 0 8
26670: ARRAY
26671: PUSH
26672: LD_INT 2
26674: ARRAY
26675: LESS
26676: IFFALSE 26714
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26678: LD_ADDR_VAR 0 6
26682: PUSH
26683: LD_VAR 0 6
26687: PPUSH
26688: LD_VAR 0 8
26692: PPUSH
26693: LD_VAR 0 7
26697: PUSH
26698: LD_VAR 0 9
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PPUSH
26707: CALL_OW 2
26711: ST_TO_ADDR
// break ;
26712: GO 26716
// end ; end ;
26714: GO 26653
26716: POP
26717: POP
// end ; end ;
26718: GO 26517
26720: POP
26721: POP
// if result and not asc then
26722: LD_VAR 0 6
26726: PUSH
26727: LD_VAR 0 4
26731: NOT
26732: AND
26733: IFFALSE 26808
// begin tmp := result ;
26735: LD_ADDR_VAR 0 9
26739: PUSH
26740: LD_VAR 0 6
26744: ST_TO_ADDR
// for i = tmp downto 1 do
26745: LD_ADDR_VAR 0 7
26749: PUSH
26750: DOUBLE
26751: LD_VAR 0 9
26755: INC
26756: ST_TO_ADDR
26757: LD_INT 1
26759: PUSH
26760: FOR_DOWNTO
26761: IFFALSE 26806
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26763: LD_ADDR_VAR 0 6
26767: PUSH
26768: LD_VAR 0 6
26772: PPUSH
26773: LD_VAR 0 9
26777: PUSH
26778: LD_VAR 0 7
26782: MINUS
26783: PUSH
26784: LD_INT 1
26786: PLUS
26787: PPUSH
26788: LD_VAR 0 9
26792: PUSH
26793: LD_VAR 0 7
26797: ARRAY
26798: PPUSH
26799: CALL_OW 1
26803: ST_TO_ADDR
26804: GO 26760
26806: POP
26807: POP
// end ; tmp := [ ] ;
26808: LD_ADDR_VAR 0 9
26812: PUSH
26813: EMPTY
26814: ST_TO_ADDR
// if mode then
26815: LD_VAR 0 5
26819: IFFALSE 26888
// begin for i = 1 to result do
26821: LD_ADDR_VAR 0 7
26825: PUSH
26826: DOUBLE
26827: LD_INT 1
26829: DEC
26830: ST_TO_ADDR
26831: LD_VAR 0 6
26835: PUSH
26836: FOR_TO
26837: IFFALSE 26876
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
26839: LD_ADDR_VAR 0 9
26843: PUSH
26844: LD_VAR 0 9
26848: PPUSH
26849: LD_VAR 0 7
26853: PPUSH
26854: LD_VAR 0 6
26858: PUSH
26859: LD_VAR 0 7
26863: ARRAY
26864: PUSH
26865: LD_INT 1
26867: ARRAY
26868: PPUSH
26869: CALL_OW 1
26873: ST_TO_ADDR
26874: GO 26836
26876: POP
26877: POP
// result := tmp ;
26878: LD_ADDR_VAR 0 6
26882: PUSH
26883: LD_VAR 0 9
26887: ST_TO_ADDR
// end ; end ;
26888: LD_VAR 0 6
26892: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26893: LD_INT 0
26895: PPUSH
26896: PPUSH
26897: PPUSH
26898: PPUSH
26899: PPUSH
26900: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26901: LD_ADDR_VAR 0 5
26905: PUSH
26906: LD_INT 0
26908: PUSH
26909: LD_INT 0
26911: PUSH
26912: LD_INT 0
26914: PUSH
26915: EMPTY
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: ST_TO_ADDR
// if not x or not y then
26923: LD_VAR 0 2
26927: NOT
26928: PUSH
26929: LD_VAR 0 3
26933: NOT
26934: OR
26935: IFFALSE 26939
// exit ;
26937: GO 28589
// if not range then
26939: LD_VAR 0 4
26943: NOT
26944: IFFALSE 26954
// range := 10 ;
26946: LD_ADDR_VAR 0 4
26950: PUSH
26951: LD_INT 10
26953: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26954: LD_ADDR_VAR 0 8
26958: PUSH
26959: LD_INT 81
26961: PUSH
26962: LD_VAR 0 1
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: PUSH
26971: LD_INT 92
26973: PUSH
26974: LD_VAR 0 2
26978: PUSH
26979: LD_VAR 0 3
26983: PUSH
26984: LD_VAR 0 4
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 3
26997: PUSH
26998: LD_INT 21
27000: PUSH
27001: LD_INT 3
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: LIST
27016: PPUSH
27017: CALL_OW 69
27021: ST_TO_ADDR
// if not tmp then
27022: LD_VAR 0 8
27026: NOT
27027: IFFALSE 27031
// exit ;
27029: GO 28589
// for i in tmp do
27031: LD_ADDR_VAR 0 6
27035: PUSH
27036: LD_VAR 0 8
27040: PUSH
27041: FOR_IN
27042: IFFALSE 28564
// begin points := [ 0 , 0 , 0 ] ;
27044: LD_ADDR_VAR 0 9
27048: PUSH
27049: LD_INT 0
27051: PUSH
27052: LD_INT 0
27054: PUSH
27055: LD_INT 0
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: LIST
27062: ST_TO_ADDR
// bpoints := 1 ;
27063: LD_ADDR_VAR 0 10
27067: PUSH
27068: LD_INT 1
27070: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27071: LD_VAR 0 6
27075: PPUSH
27076: CALL_OW 247
27080: PUSH
27081: LD_INT 1
27083: DOUBLE
27084: EQUAL
27085: IFTRUE 27089
27087: GO 27667
27089: POP
// begin if GetClass ( i ) = 1 then
27090: LD_VAR 0 6
27094: PPUSH
27095: CALL_OW 257
27099: PUSH
27100: LD_INT 1
27102: EQUAL
27103: IFFALSE 27124
// points := [ 10 , 5 , 3 ] ;
27105: LD_ADDR_VAR 0 9
27109: PUSH
27110: LD_INT 10
27112: PUSH
27113: LD_INT 5
27115: PUSH
27116: LD_INT 3
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: LIST
27123: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27124: LD_VAR 0 6
27128: PPUSH
27129: CALL_OW 257
27133: PUSH
27134: LD_INT 2
27136: PUSH
27137: LD_INT 3
27139: PUSH
27140: LD_INT 4
27142: PUSH
27143: EMPTY
27144: LIST
27145: LIST
27146: LIST
27147: IN
27148: IFFALSE 27169
// points := [ 3 , 2 , 1 ] ;
27150: LD_ADDR_VAR 0 9
27154: PUSH
27155: LD_INT 3
27157: PUSH
27158: LD_INT 2
27160: PUSH
27161: LD_INT 1
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: LIST
27168: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27169: LD_VAR 0 6
27173: PPUSH
27174: CALL_OW 257
27178: PUSH
27179: LD_INT 5
27181: EQUAL
27182: IFFALSE 27203
// points := [ 130 , 5 , 2 ] ;
27184: LD_ADDR_VAR 0 9
27188: PUSH
27189: LD_INT 130
27191: PUSH
27192: LD_INT 5
27194: PUSH
27195: LD_INT 2
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: LIST
27202: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27203: LD_VAR 0 6
27207: PPUSH
27208: CALL_OW 257
27212: PUSH
27213: LD_INT 8
27215: EQUAL
27216: IFFALSE 27237
// points := [ 35 , 35 , 30 ] ;
27218: LD_ADDR_VAR 0 9
27222: PUSH
27223: LD_INT 35
27225: PUSH
27226: LD_INT 35
27228: PUSH
27229: LD_INT 30
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: LIST
27236: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27237: LD_VAR 0 6
27241: PPUSH
27242: CALL_OW 257
27246: PUSH
27247: LD_INT 9
27249: EQUAL
27250: IFFALSE 27271
// points := [ 20 , 55 , 40 ] ;
27252: LD_ADDR_VAR 0 9
27256: PUSH
27257: LD_INT 20
27259: PUSH
27260: LD_INT 55
27262: PUSH
27263: LD_INT 40
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: LIST
27270: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27271: LD_VAR 0 6
27275: PPUSH
27276: CALL_OW 257
27280: PUSH
27281: LD_INT 12
27283: PUSH
27284: LD_INT 16
27286: PUSH
27287: EMPTY
27288: LIST
27289: LIST
27290: IN
27291: IFFALSE 27312
// points := [ 5 , 3 , 2 ] ;
27293: LD_ADDR_VAR 0 9
27297: PUSH
27298: LD_INT 5
27300: PUSH
27301: LD_INT 3
27303: PUSH
27304: LD_INT 2
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: LIST
27311: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27312: LD_VAR 0 6
27316: PPUSH
27317: CALL_OW 257
27321: PUSH
27322: LD_INT 17
27324: EQUAL
27325: IFFALSE 27346
// points := [ 100 , 50 , 75 ] ;
27327: LD_ADDR_VAR 0 9
27331: PUSH
27332: LD_INT 100
27334: PUSH
27335: LD_INT 50
27337: PUSH
27338: LD_INT 75
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: LIST
27345: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27346: LD_VAR 0 6
27350: PPUSH
27351: CALL_OW 257
27355: PUSH
27356: LD_INT 15
27358: EQUAL
27359: IFFALSE 27380
// points := [ 10 , 5 , 3 ] ;
27361: LD_ADDR_VAR 0 9
27365: PUSH
27366: LD_INT 10
27368: PUSH
27369: LD_INT 5
27371: PUSH
27372: LD_INT 3
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: LIST
27379: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27380: LD_VAR 0 6
27384: PPUSH
27385: CALL_OW 257
27389: PUSH
27390: LD_INT 14
27392: EQUAL
27393: IFFALSE 27414
// points := [ 10 , 0 , 0 ] ;
27395: LD_ADDR_VAR 0 9
27399: PUSH
27400: LD_INT 10
27402: PUSH
27403: LD_INT 0
27405: PUSH
27406: LD_INT 0
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: LIST
27413: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27414: LD_VAR 0 6
27418: PPUSH
27419: CALL_OW 257
27423: PUSH
27424: LD_INT 11
27426: EQUAL
27427: IFFALSE 27448
// points := [ 30 , 10 , 5 ] ;
27429: LD_ADDR_VAR 0 9
27433: PUSH
27434: LD_INT 30
27436: PUSH
27437: LD_INT 10
27439: PUSH
27440: LD_INT 5
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: LIST
27447: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27448: LD_VAR 0 1
27452: PPUSH
27453: LD_INT 5
27455: PPUSH
27456: CALL_OW 321
27460: PUSH
27461: LD_INT 2
27463: EQUAL
27464: IFFALSE 27481
// bpoints := bpoints * 1.8 ;
27466: LD_ADDR_VAR 0 10
27470: PUSH
27471: LD_VAR 0 10
27475: PUSH
27476: LD_REAL  1.80000000000000E+0000
27479: MUL
27480: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27481: LD_VAR 0 6
27485: PPUSH
27486: CALL_OW 257
27490: PUSH
27491: LD_INT 1
27493: PUSH
27494: LD_INT 2
27496: PUSH
27497: LD_INT 3
27499: PUSH
27500: LD_INT 4
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: IN
27509: PUSH
27510: LD_VAR 0 1
27514: PPUSH
27515: LD_INT 51
27517: PPUSH
27518: CALL_OW 321
27522: PUSH
27523: LD_INT 2
27525: EQUAL
27526: AND
27527: IFFALSE 27544
// bpoints := bpoints * 1.2 ;
27529: LD_ADDR_VAR 0 10
27533: PUSH
27534: LD_VAR 0 10
27538: PUSH
27539: LD_REAL  1.20000000000000E+0000
27542: MUL
27543: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27544: LD_VAR 0 6
27548: PPUSH
27549: CALL_OW 257
27553: PUSH
27554: LD_INT 5
27556: PUSH
27557: LD_INT 7
27559: PUSH
27560: LD_INT 9
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: LIST
27567: IN
27568: PUSH
27569: LD_VAR 0 1
27573: PPUSH
27574: LD_INT 52
27576: PPUSH
27577: CALL_OW 321
27581: PUSH
27582: LD_INT 2
27584: EQUAL
27585: AND
27586: IFFALSE 27603
// bpoints := bpoints * 1.5 ;
27588: LD_ADDR_VAR 0 10
27592: PUSH
27593: LD_VAR 0 10
27597: PUSH
27598: LD_REAL  1.50000000000000E+0000
27601: MUL
27602: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27603: LD_VAR 0 1
27607: PPUSH
27608: LD_INT 66
27610: PPUSH
27611: CALL_OW 321
27615: PUSH
27616: LD_INT 2
27618: EQUAL
27619: IFFALSE 27636
// bpoints := bpoints * 1.1 ;
27621: LD_ADDR_VAR 0 10
27625: PUSH
27626: LD_VAR 0 10
27630: PUSH
27631: LD_REAL  1.10000000000000E+0000
27634: MUL
27635: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27636: LD_ADDR_VAR 0 10
27640: PUSH
27641: LD_VAR 0 10
27645: PUSH
27646: LD_VAR 0 6
27650: PPUSH
27651: LD_INT 1
27653: PPUSH
27654: CALL_OW 259
27658: PUSH
27659: LD_REAL  1.15000000000000E+0000
27662: MUL
27663: MUL
27664: ST_TO_ADDR
// end ; unit_vehicle :
27665: GO 28493
27667: LD_INT 2
27669: DOUBLE
27670: EQUAL
27671: IFTRUE 27675
27673: GO 28481
27675: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27676: LD_VAR 0 6
27680: PPUSH
27681: CALL_OW 264
27685: PUSH
27686: LD_INT 2
27688: PUSH
27689: LD_INT 42
27691: PUSH
27692: LD_INT 24
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: LIST
27699: IN
27700: IFFALSE 27721
// points := [ 25 , 5 , 3 ] ;
27702: LD_ADDR_VAR 0 9
27706: PUSH
27707: LD_INT 25
27709: PUSH
27710: LD_INT 5
27712: PUSH
27713: LD_INT 3
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: LIST
27720: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27721: LD_VAR 0 6
27725: PPUSH
27726: CALL_OW 264
27730: PUSH
27731: LD_INT 4
27733: PUSH
27734: LD_INT 43
27736: PUSH
27737: LD_INT 25
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: LIST
27744: IN
27745: IFFALSE 27766
// points := [ 40 , 15 , 5 ] ;
27747: LD_ADDR_VAR 0 9
27751: PUSH
27752: LD_INT 40
27754: PUSH
27755: LD_INT 15
27757: PUSH
27758: LD_INT 5
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: LIST
27765: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27766: LD_VAR 0 6
27770: PPUSH
27771: CALL_OW 264
27775: PUSH
27776: LD_INT 3
27778: PUSH
27779: LD_INT 23
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: IN
27786: IFFALSE 27807
// points := [ 7 , 25 , 8 ] ;
27788: LD_ADDR_VAR 0 9
27792: PUSH
27793: LD_INT 7
27795: PUSH
27796: LD_INT 25
27798: PUSH
27799: LD_INT 8
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: LIST
27806: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27807: LD_VAR 0 6
27811: PPUSH
27812: CALL_OW 264
27816: PUSH
27817: LD_INT 5
27819: PUSH
27820: LD_INT 27
27822: PUSH
27823: LD_INT 44
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: LIST
27830: IN
27831: IFFALSE 27852
// points := [ 14 , 50 , 16 ] ;
27833: LD_ADDR_VAR 0 9
27837: PUSH
27838: LD_INT 14
27840: PUSH
27841: LD_INT 50
27843: PUSH
27844: LD_INT 16
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: LIST
27851: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
27852: LD_VAR 0 6
27856: PPUSH
27857: CALL_OW 264
27861: PUSH
27862: LD_INT 6
27864: PUSH
27865: LD_INT 46
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: IN
27872: IFFALSE 27893
// points := [ 32 , 120 , 70 ] ;
27874: LD_ADDR_VAR 0 9
27878: PUSH
27879: LD_INT 32
27881: PUSH
27882: LD_INT 120
27884: PUSH
27885: LD_INT 70
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: LIST
27892: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
27893: LD_VAR 0 6
27897: PPUSH
27898: CALL_OW 264
27902: PUSH
27903: LD_INT 7
27905: PUSH
27906: LD_INT 28
27908: PUSH
27909: LD_INT 45
27911: PUSH
27912: LD_INT 92
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: IN
27921: IFFALSE 27942
// points := [ 35 , 20 , 45 ] ;
27923: LD_ADDR_VAR 0 9
27927: PUSH
27928: LD_INT 35
27930: PUSH
27931: LD_INT 20
27933: PUSH
27934: LD_INT 45
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: LIST
27941: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
27942: LD_VAR 0 6
27946: PPUSH
27947: CALL_OW 264
27951: PUSH
27952: LD_INT 47
27954: PUSH
27955: EMPTY
27956: LIST
27957: IN
27958: IFFALSE 27979
// points := [ 67 , 45 , 75 ] ;
27960: LD_ADDR_VAR 0 9
27964: PUSH
27965: LD_INT 67
27967: PUSH
27968: LD_INT 45
27970: PUSH
27971: LD_INT 75
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: LIST
27978: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
27979: LD_VAR 0 6
27983: PPUSH
27984: CALL_OW 264
27988: PUSH
27989: LD_INT 26
27991: PUSH
27992: EMPTY
27993: LIST
27994: IN
27995: IFFALSE 28016
// points := [ 120 , 30 , 80 ] ;
27997: LD_ADDR_VAR 0 9
28001: PUSH
28002: LD_INT 120
28004: PUSH
28005: LD_INT 30
28007: PUSH
28008: LD_INT 80
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: LIST
28015: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28016: LD_VAR 0 6
28020: PPUSH
28021: CALL_OW 264
28025: PUSH
28026: LD_INT 22
28028: PUSH
28029: EMPTY
28030: LIST
28031: IN
28032: IFFALSE 28053
// points := [ 40 , 1 , 1 ] ;
28034: LD_ADDR_VAR 0 9
28038: PUSH
28039: LD_INT 40
28041: PUSH
28042: LD_INT 1
28044: PUSH
28045: LD_INT 1
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: LIST
28052: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28053: LD_VAR 0 6
28057: PPUSH
28058: CALL_OW 264
28062: PUSH
28063: LD_INT 29
28065: PUSH
28066: EMPTY
28067: LIST
28068: IN
28069: IFFALSE 28090
// points := [ 70 , 200 , 400 ] ;
28071: LD_ADDR_VAR 0 9
28075: PUSH
28076: LD_INT 70
28078: PUSH
28079: LD_INT 200
28081: PUSH
28082: LD_INT 400
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: LIST
28089: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28090: LD_VAR 0 6
28094: PPUSH
28095: CALL_OW 264
28099: PUSH
28100: LD_INT 14
28102: PUSH
28103: LD_INT 53
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: IN
28110: IFFALSE 28131
// points := [ 40 , 10 , 20 ] ;
28112: LD_ADDR_VAR 0 9
28116: PUSH
28117: LD_INT 40
28119: PUSH
28120: LD_INT 10
28122: PUSH
28123: LD_INT 20
28125: PUSH
28126: EMPTY
28127: LIST
28128: LIST
28129: LIST
28130: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28131: LD_VAR 0 6
28135: PPUSH
28136: CALL_OW 264
28140: PUSH
28141: LD_INT 9
28143: PUSH
28144: EMPTY
28145: LIST
28146: IN
28147: IFFALSE 28168
// points := [ 5 , 70 , 20 ] ;
28149: LD_ADDR_VAR 0 9
28153: PUSH
28154: LD_INT 5
28156: PUSH
28157: LD_INT 70
28159: PUSH
28160: LD_INT 20
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: LIST
28167: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28168: LD_VAR 0 6
28172: PPUSH
28173: CALL_OW 264
28177: PUSH
28178: LD_INT 10
28180: PUSH
28181: EMPTY
28182: LIST
28183: IN
28184: IFFALSE 28205
// points := [ 35 , 110 , 70 ] ;
28186: LD_ADDR_VAR 0 9
28190: PUSH
28191: LD_INT 35
28193: PUSH
28194: LD_INT 110
28196: PUSH
28197: LD_INT 70
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: LIST
28204: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28205: LD_VAR 0 6
28209: PPUSH
28210: CALL_OW 265
28214: PUSH
28215: LD_INT 25
28217: EQUAL
28218: IFFALSE 28239
// points := [ 80 , 65 , 100 ] ;
28220: LD_ADDR_VAR 0 9
28224: PUSH
28225: LD_INT 80
28227: PUSH
28228: LD_INT 65
28230: PUSH
28231: LD_INT 100
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: LIST
28238: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28239: LD_VAR 0 6
28243: PPUSH
28244: CALL_OW 263
28248: PUSH
28249: LD_INT 1
28251: EQUAL
28252: IFFALSE 28287
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28254: LD_ADDR_VAR 0 10
28258: PUSH
28259: LD_VAR 0 10
28263: PUSH
28264: LD_VAR 0 6
28268: PPUSH
28269: CALL_OW 311
28273: PPUSH
28274: LD_INT 3
28276: PPUSH
28277: CALL_OW 259
28281: PUSH
28282: LD_INT 4
28284: MUL
28285: MUL
28286: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28287: LD_VAR 0 6
28291: PPUSH
28292: CALL_OW 263
28296: PUSH
28297: LD_INT 2
28299: EQUAL
28300: IFFALSE 28351
// begin j := IsControledBy ( i ) ;
28302: LD_ADDR_VAR 0 7
28306: PUSH
28307: LD_VAR 0 6
28311: PPUSH
28312: CALL_OW 312
28316: ST_TO_ADDR
// if j then
28317: LD_VAR 0 7
28321: IFFALSE 28351
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28323: LD_ADDR_VAR 0 10
28327: PUSH
28328: LD_VAR 0 10
28332: PUSH
28333: LD_VAR 0 7
28337: PPUSH
28338: LD_INT 3
28340: PPUSH
28341: CALL_OW 259
28345: PUSH
28346: LD_INT 3
28348: MUL
28349: MUL
28350: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28351: LD_VAR 0 6
28355: PPUSH
28356: CALL_OW 264
28360: PUSH
28361: LD_INT 5
28363: PUSH
28364: LD_INT 6
28366: PUSH
28367: LD_INT 46
28369: PUSH
28370: LD_INT 44
28372: PUSH
28373: LD_INT 47
28375: PUSH
28376: LD_INT 45
28378: PUSH
28379: LD_INT 28
28381: PUSH
28382: LD_INT 7
28384: PUSH
28385: LD_INT 27
28387: PUSH
28388: LD_INT 29
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: LIST
28397: LIST
28398: LIST
28399: LIST
28400: LIST
28401: LIST
28402: IN
28403: PUSH
28404: LD_VAR 0 1
28408: PPUSH
28409: LD_INT 52
28411: PPUSH
28412: CALL_OW 321
28416: PUSH
28417: LD_INT 2
28419: EQUAL
28420: AND
28421: IFFALSE 28438
// bpoints := bpoints * 1.2 ;
28423: LD_ADDR_VAR 0 10
28427: PUSH
28428: LD_VAR 0 10
28432: PUSH
28433: LD_REAL  1.20000000000000E+0000
28436: MUL
28437: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28438: LD_VAR 0 6
28442: PPUSH
28443: CALL_OW 264
28447: PUSH
28448: LD_INT 6
28450: PUSH
28451: LD_INT 46
28453: PUSH
28454: LD_INT 47
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: LIST
28461: IN
28462: IFFALSE 28479
// bpoints := bpoints * 1.2 ;
28464: LD_ADDR_VAR 0 10
28468: PUSH
28469: LD_VAR 0 10
28473: PUSH
28474: LD_REAL  1.20000000000000E+0000
28477: MUL
28478: ST_TO_ADDR
// end ; unit_building :
28479: GO 28493
28481: LD_INT 3
28483: DOUBLE
28484: EQUAL
28485: IFTRUE 28489
28487: GO 28492
28489: POP
// ; end ;
28490: GO 28493
28492: POP
// for j = 1 to 3 do
28493: LD_ADDR_VAR 0 7
28497: PUSH
28498: DOUBLE
28499: LD_INT 1
28501: DEC
28502: ST_TO_ADDR
28503: LD_INT 3
28505: PUSH
28506: FOR_TO
28507: IFFALSE 28560
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28509: LD_ADDR_VAR 0 5
28513: PUSH
28514: LD_VAR 0 5
28518: PPUSH
28519: LD_VAR 0 7
28523: PPUSH
28524: LD_VAR 0 5
28528: PUSH
28529: LD_VAR 0 7
28533: ARRAY
28534: PUSH
28535: LD_VAR 0 9
28539: PUSH
28540: LD_VAR 0 7
28544: ARRAY
28545: PUSH
28546: LD_VAR 0 10
28550: MUL
28551: PLUS
28552: PPUSH
28553: CALL_OW 1
28557: ST_TO_ADDR
28558: GO 28506
28560: POP
28561: POP
// end ;
28562: GO 27041
28564: POP
28565: POP
// result := Replace ( result , 4 , tmp ) ;
28566: LD_ADDR_VAR 0 5
28570: PUSH
28571: LD_VAR 0 5
28575: PPUSH
28576: LD_INT 4
28578: PPUSH
28579: LD_VAR 0 8
28583: PPUSH
28584: CALL_OW 1
28588: ST_TO_ADDR
// end ;
28589: LD_VAR 0 5
28593: RET
// export function DangerAtRange ( unit , range ) ; begin
28594: LD_INT 0
28596: PPUSH
// if not unit then
28597: LD_VAR 0 1
28601: NOT
28602: IFFALSE 28606
// exit ;
28604: GO 28651
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28606: LD_ADDR_VAR 0 3
28610: PUSH
28611: LD_VAR 0 1
28615: PPUSH
28616: CALL_OW 255
28620: PPUSH
28621: LD_VAR 0 1
28625: PPUSH
28626: CALL_OW 250
28630: PPUSH
28631: LD_VAR 0 1
28635: PPUSH
28636: CALL_OW 251
28640: PPUSH
28641: LD_VAR 0 2
28645: PPUSH
28646: CALL 26893 0 4
28650: ST_TO_ADDR
// end ;
28651: LD_VAR 0 3
28655: RET
// export function DangerInArea ( side , area ) ; begin
28656: LD_INT 0
28658: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28659: LD_ADDR_VAR 0 3
28663: PUSH
28664: LD_VAR 0 2
28668: PPUSH
28669: LD_INT 81
28671: PUSH
28672: LD_VAR 0 1
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PPUSH
28681: CALL_OW 70
28685: ST_TO_ADDR
// end ;
28686: LD_VAR 0 3
28690: RET
// export function IsExtension ( b ) ; begin
28691: LD_INT 0
28693: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28694: LD_ADDR_VAR 0 2
28698: PUSH
28699: LD_VAR 0 1
28703: PUSH
28704: LD_INT 23
28706: PUSH
28707: LD_INT 20
28709: PUSH
28710: LD_INT 22
28712: PUSH
28713: LD_INT 17
28715: PUSH
28716: LD_INT 24
28718: PUSH
28719: LD_INT 21
28721: PUSH
28722: LD_INT 19
28724: PUSH
28725: LD_INT 16
28727: PUSH
28728: LD_INT 25
28730: PUSH
28731: LD_INT 18
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: LIST
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: IN
28746: ST_TO_ADDR
// end ;
28747: LD_VAR 0 2
28751: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
28752: LD_INT 0
28754: PPUSH
28755: PPUSH
28756: PPUSH
// result := [ ] ;
28757: LD_ADDR_VAR 0 4
28761: PUSH
28762: EMPTY
28763: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28764: LD_ADDR_VAR 0 5
28768: PUSH
28769: LD_VAR 0 2
28773: PPUSH
28774: LD_INT 21
28776: PUSH
28777: LD_INT 3
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PPUSH
28784: CALL_OW 70
28788: ST_TO_ADDR
// if not tmp then
28789: LD_VAR 0 5
28793: NOT
28794: IFFALSE 28798
// exit ;
28796: GO 28862
// if checkLink then
28798: LD_VAR 0 3
28802: IFFALSE 28852
// begin for i in tmp do
28804: LD_ADDR_VAR 0 6
28808: PUSH
28809: LD_VAR 0 5
28813: PUSH
28814: FOR_IN
28815: IFFALSE 28850
// if GetBase ( i ) <> base then
28817: LD_VAR 0 6
28821: PPUSH
28822: CALL_OW 274
28826: PUSH
28827: LD_VAR 0 1
28831: NONEQUAL
28832: IFFALSE 28848
// ComLinkToBase ( base , i ) ;
28834: LD_VAR 0 1
28838: PPUSH
28839: LD_VAR 0 6
28843: PPUSH
28844: CALL_OW 169
28848: GO 28814
28850: POP
28851: POP
// end ; result := tmp ;
28852: LD_ADDR_VAR 0 4
28856: PUSH
28857: LD_VAR 0 5
28861: ST_TO_ADDR
// end ;
28862: LD_VAR 0 4
28866: RET
// export function ComComplete ( units , b ) ; var i ; begin
28867: LD_INT 0
28869: PPUSH
28870: PPUSH
// if not units then
28871: LD_VAR 0 1
28875: NOT
28876: IFFALSE 28880
// exit ;
28878: GO 28970
// for i in units do
28880: LD_ADDR_VAR 0 4
28884: PUSH
28885: LD_VAR 0 1
28889: PUSH
28890: FOR_IN
28891: IFFALSE 28968
// if BuildingStatus ( b ) = bs_build then
28893: LD_VAR 0 2
28897: PPUSH
28898: CALL_OW 461
28902: PUSH
28903: LD_INT 1
28905: EQUAL
28906: IFFALSE 28966
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
28908: LD_VAR 0 4
28912: PPUSH
28913: LD_STRING h
28915: PUSH
28916: LD_VAR 0 2
28920: PPUSH
28921: CALL_OW 250
28925: PUSH
28926: LD_VAR 0 2
28930: PPUSH
28931: CALL_OW 251
28935: PUSH
28936: LD_VAR 0 2
28940: PUSH
28941: LD_INT 0
28943: PUSH
28944: LD_INT 0
28946: PUSH
28947: LD_INT 0
28949: PUSH
28950: EMPTY
28951: LIST
28952: LIST
28953: LIST
28954: LIST
28955: LIST
28956: LIST
28957: LIST
28958: PUSH
28959: EMPTY
28960: LIST
28961: PPUSH
28962: CALL_OW 446
28966: GO 28890
28968: POP
28969: POP
// end ;
28970: LD_VAR 0 3
28974: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
28975: LD_INT 0
28977: PPUSH
28978: PPUSH
28979: PPUSH
28980: PPUSH
28981: PPUSH
28982: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
28983: LD_VAR 0 1
28987: NOT
28988: PUSH
28989: LD_VAR 0 1
28993: PPUSH
28994: CALL_OW 263
28998: PUSH
28999: LD_INT 2
29001: NONEQUAL
29002: OR
29003: IFFALSE 29007
// exit ;
29005: GO 29323
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29007: LD_ADDR_VAR 0 6
29011: PUSH
29012: LD_INT 22
29014: PUSH
29015: LD_VAR 0 1
29019: PPUSH
29020: CALL_OW 255
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: LD_INT 2
29031: PUSH
29032: LD_INT 30
29034: PUSH
29035: LD_INT 36
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: PUSH
29042: LD_INT 34
29044: PUSH
29045: LD_INT 31
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: LIST
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PPUSH
29061: CALL_OW 69
29065: ST_TO_ADDR
// if not tmp then
29066: LD_VAR 0 6
29070: NOT
29071: IFFALSE 29075
// exit ;
29073: GO 29323
// result := [ ] ;
29075: LD_ADDR_VAR 0 2
29079: PUSH
29080: EMPTY
29081: ST_TO_ADDR
// for i in tmp do
29082: LD_ADDR_VAR 0 3
29086: PUSH
29087: LD_VAR 0 6
29091: PUSH
29092: FOR_IN
29093: IFFALSE 29164
// begin t := UnitsInside ( i ) ;
29095: LD_ADDR_VAR 0 4
29099: PUSH
29100: LD_VAR 0 3
29104: PPUSH
29105: CALL_OW 313
29109: ST_TO_ADDR
// if t then
29110: LD_VAR 0 4
29114: IFFALSE 29162
// for j in t do
29116: LD_ADDR_VAR 0 7
29120: PUSH
29121: LD_VAR 0 4
29125: PUSH
29126: FOR_IN
29127: IFFALSE 29160
// result := Replace ( result , result + 1 , j ) ;
29129: LD_ADDR_VAR 0 2
29133: PUSH
29134: LD_VAR 0 2
29138: PPUSH
29139: LD_VAR 0 2
29143: PUSH
29144: LD_INT 1
29146: PLUS
29147: PPUSH
29148: LD_VAR 0 7
29152: PPUSH
29153: CALL_OW 1
29157: ST_TO_ADDR
29158: GO 29126
29160: POP
29161: POP
// end ;
29162: GO 29092
29164: POP
29165: POP
// if not result then
29166: LD_VAR 0 2
29170: NOT
29171: IFFALSE 29175
// exit ;
29173: GO 29323
// mech := result [ 1 ] ;
29175: LD_ADDR_VAR 0 5
29179: PUSH
29180: LD_VAR 0 2
29184: PUSH
29185: LD_INT 1
29187: ARRAY
29188: ST_TO_ADDR
// if result > 1 then
29189: LD_VAR 0 2
29193: PUSH
29194: LD_INT 1
29196: GREATER
29197: IFFALSE 29309
// begin for i = 2 to result do
29199: LD_ADDR_VAR 0 3
29203: PUSH
29204: DOUBLE
29205: LD_INT 2
29207: DEC
29208: ST_TO_ADDR
29209: LD_VAR 0 2
29213: PUSH
29214: FOR_TO
29215: IFFALSE 29307
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29217: LD_ADDR_VAR 0 4
29221: PUSH
29222: LD_VAR 0 2
29226: PUSH
29227: LD_VAR 0 3
29231: ARRAY
29232: PPUSH
29233: LD_INT 3
29235: PPUSH
29236: CALL_OW 259
29240: PUSH
29241: LD_VAR 0 2
29245: PUSH
29246: LD_VAR 0 3
29250: ARRAY
29251: PPUSH
29252: CALL_OW 432
29256: MINUS
29257: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29258: LD_VAR 0 4
29262: PUSH
29263: LD_VAR 0 5
29267: PPUSH
29268: LD_INT 3
29270: PPUSH
29271: CALL_OW 259
29275: PUSH
29276: LD_VAR 0 5
29280: PPUSH
29281: CALL_OW 432
29285: MINUS
29286: GREATEREQUAL
29287: IFFALSE 29305
// mech := result [ i ] ;
29289: LD_ADDR_VAR 0 5
29293: PUSH
29294: LD_VAR 0 2
29298: PUSH
29299: LD_VAR 0 3
29303: ARRAY
29304: ST_TO_ADDR
// end ;
29305: GO 29214
29307: POP
29308: POP
// end ; ComLinkTo ( vehicle , mech ) ;
29309: LD_VAR 0 1
29313: PPUSH
29314: LD_VAR 0 5
29318: PPUSH
29319: CALL_OW 135
// end ;
29323: LD_VAR 0 2
29327: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29328: LD_INT 0
29330: PPUSH
29331: PPUSH
29332: PPUSH
29333: PPUSH
29334: PPUSH
29335: PPUSH
29336: PPUSH
29337: PPUSH
29338: PPUSH
29339: PPUSH
29340: PPUSH
29341: PPUSH
29342: PPUSH
// result := [ ] ;
29343: LD_ADDR_VAR 0 7
29347: PUSH
29348: EMPTY
29349: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29350: LD_VAR 0 1
29354: PPUSH
29355: CALL_OW 266
29359: PUSH
29360: LD_INT 0
29362: PUSH
29363: LD_INT 1
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: IN
29370: NOT
29371: IFFALSE 29375
// exit ;
29373: GO 31009
// if name then
29375: LD_VAR 0 3
29379: IFFALSE 29395
// SetBName ( base_dep , name ) ;
29381: LD_VAR 0 1
29385: PPUSH
29386: LD_VAR 0 3
29390: PPUSH
29391: CALL_OW 500
// base := GetBase ( base_dep ) ;
29395: LD_ADDR_VAR 0 15
29399: PUSH
29400: LD_VAR 0 1
29404: PPUSH
29405: CALL_OW 274
29409: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29410: LD_ADDR_VAR 0 16
29414: PUSH
29415: LD_VAR 0 1
29419: PPUSH
29420: CALL_OW 255
29424: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29425: LD_ADDR_VAR 0 17
29429: PUSH
29430: LD_VAR 0 1
29434: PPUSH
29435: CALL_OW 248
29439: ST_TO_ADDR
// if sources then
29440: LD_VAR 0 5
29444: IFFALSE 29491
// for i = 1 to 3 do
29446: LD_ADDR_VAR 0 8
29450: PUSH
29451: DOUBLE
29452: LD_INT 1
29454: DEC
29455: ST_TO_ADDR
29456: LD_INT 3
29458: PUSH
29459: FOR_TO
29460: IFFALSE 29489
// AddResourceType ( base , i , sources [ i ] ) ;
29462: LD_VAR 0 15
29466: PPUSH
29467: LD_VAR 0 8
29471: PPUSH
29472: LD_VAR 0 5
29476: PUSH
29477: LD_VAR 0 8
29481: ARRAY
29482: PPUSH
29483: CALL_OW 276
29487: GO 29459
29489: POP
29490: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
29491: LD_ADDR_VAR 0 18
29495: PUSH
29496: LD_VAR 0 15
29500: PPUSH
29501: LD_VAR 0 2
29505: PPUSH
29506: LD_INT 1
29508: PPUSH
29509: CALL 28752 0 3
29513: ST_TO_ADDR
// InitHc ;
29514: CALL_OW 19
// InitUc ;
29518: CALL_OW 18
// uc_side := side ;
29522: LD_ADDR_OWVAR 20
29526: PUSH
29527: LD_VAR 0 16
29531: ST_TO_ADDR
// uc_nation := nation ;
29532: LD_ADDR_OWVAR 21
29536: PUSH
29537: LD_VAR 0 17
29541: ST_TO_ADDR
// if buildings then
29542: LD_VAR 0 18
29546: IFFALSE 30868
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29548: LD_ADDR_VAR 0 19
29552: PUSH
29553: LD_VAR 0 18
29557: PPUSH
29558: LD_INT 2
29560: PUSH
29561: LD_INT 30
29563: PUSH
29564: LD_INT 29
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 30
29573: PUSH
29574: LD_INT 30
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: LIST
29585: PPUSH
29586: CALL_OW 72
29590: ST_TO_ADDR
// if tmp then
29591: LD_VAR 0 19
29595: IFFALSE 29643
// for i in tmp do
29597: LD_ADDR_VAR 0 8
29601: PUSH
29602: LD_VAR 0 19
29606: PUSH
29607: FOR_IN
29608: IFFALSE 29641
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29610: LD_VAR 0 8
29614: PPUSH
29615: CALL_OW 250
29619: PPUSH
29620: LD_VAR 0 8
29624: PPUSH
29625: CALL_OW 251
29629: PPUSH
29630: LD_VAR 0 16
29634: PPUSH
29635: CALL_OW 441
29639: GO 29607
29641: POP
29642: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29643: LD_VAR 0 18
29647: PPUSH
29648: LD_INT 2
29650: PUSH
29651: LD_INT 30
29653: PUSH
29654: LD_INT 32
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: PUSH
29661: LD_INT 30
29663: PUSH
29664: LD_INT 33
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: LIST
29675: PPUSH
29676: CALL_OW 72
29680: IFFALSE 29768
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29682: LD_ADDR_VAR 0 8
29686: PUSH
29687: LD_VAR 0 18
29691: PPUSH
29692: LD_INT 2
29694: PUSH
29695: LD_INT 30
29697: PUSH
29698: LD_INT 32
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: LD_INT 30
29707: PUSH
29708: LD_INT 33
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: LIST
29719: PPUSH
29720: CALL_OW 72
29724: PUSH
29725: FOR_IN
29726: IFFALSE 29766
// begin if not GetBWeapon ( i ) then
29728: LD_VAR 0 8
29732: PPUSH
29733: CALL_OW 269
29737: NOT
29738: IFFALSE 29764
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29740: LD_VAR 0 8
29744: PPUSH
29745: LD_VAR 0 8
29749: PPUSH
29750: LD_VAR 0 2
29754: PPUSH
29755: CALL 31014 0 2
29759: PPUSH
29760: CALL_OW 431
// end ;
29764: GO 29725
29766: POP
29767: POP
// end ; for i = 1 to personel do
29768: LD_ADDR_VAR 0 8
29772: PUSH
29773: DOUBLE
29774: LD_INT 1
29776: DEC
29777: ST_TO_ADDR
29778: LD_VAR 0 6
29782: PUSH
29783: FOR_TO
29784: IFFALSE 30848
// begin if i > 4 then
29786: LD_VAR 0 8
29790: PUSH
29791: LD_INT 4
29793: GREATER
29794: IFFALSE 29798
// break ;
29796: GO 30848
// case i of 1 :
29798: LD_VAR 0 8
29802: PUSH
29803: LD_INT 1
29805: DOUBLE
29806: EQUAL
29807: IFTRUE 29811
29809: GO 29891
29811: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29812: LD_ADDR_VAR 0 12
29816: PUSH
29817: LD_VAR 0 18
29821: PPUSH
29822: LD_INT 22
29824: PUSH
29825: LD_VAR 0 16
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: PUSH
29834: LD_INT 58
29836: PUSH
29837: EMPTY
29838: LIST
29839: PUSH
29840: LD_INT 2
29842: PUSH
29843: LD_INT 30
29845: PUSH
29846: LD_INT 32
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: PUSH
29853: LD_INT 30
29855: PUSH
29856: LD_INT 4
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 30
29865: PUSH
29866: LD_INT 5
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: LIST
29883: PPUSH
29884: CALL_OW 72
29888: ST_TO_ADDR
29889: GO 30113
29891: LD_INT 2
29893: DOUBLE
29894: EQUAL
29895: IFTRUE 29899
29897: GO 29961
29899: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
29900: LD_ADDR_VAR 0 12
29904: PUSH
29905: LD_VAR 0 18
29909: PPUSH
29910: LD_INT 22
29912: PUSH
29913: LD_VAR 0 16
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: PUSH
29922: LD_INT 2
29924: PUSH
29925: LD_INT 30
29927: PUSH
29928: LD_INT 0
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: LD_INT 30
29937: PUSH
29938: LD_INT 1
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: LIST
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: PPUSH
29954: CALL_OW 72
29958: ST_TO_ADDR
29959: GO 30113
29961: LD_INT 3
29963: DOUBLE
29964: EQUAL
29965: IFTRUE 29969
29967: GO 30031
29969: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
29970: LD_ADDR_VAR 0 12
29974: PUSH
29975: LD_VAR 0 18
29979: PPUSH
29980: LD_INT 22
29982: PUSH
29983: LD_VAR 0 16
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: LD_INT 2
29994: PUSH
29995: LD_INT 30
29997: PUSH
29998: LD_INT 2
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: PUSH
30005: LD_INT 30
30007: PUSH
30008: LD_INT 3
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: LIST
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: PPUSH
30024: CALL_OW 72
30028: ST_TO_ADDR
30029: GO 30113
30031: LD_INT 4
30033: DOUBLE
30034: EQUAL
30035: IFTRUE 30039
30037: GO 30112
30039: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30040: LD_ADDR_VAR 0 12
30044: PUSH
30045: LD_VAR 0 18
30049: PPUSH
30050: LD_INT 22
30052: PUSH
30053: LD_VAR 0 16
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: PUSH
30062: LD_INT 2
30064: PUSH
30065: LD_INT 30
30067: PUSH
30068: LD_INT 6
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: LD_INT 30
30077: PUSH
30078: LD_INT 7
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: PUSH
30085: LD_INT 30
30087: PUSH
30088: LD_INT 8
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: PPUSH
30105: CALL_OW 72
30109: ST_TO_ADDR
30110: GO 30113
30112: POP
// if i = 1 then
30113: LD_VAR 0 8
30117: PUSH
30118: LD_INT 1
30120: EQUAL
30121: IFFALSE 30232
// begin tmp := [ ] ;
30123: LD_ADDR_VAR 0 19
30127: PUSH
30128: EMPTY
30129: ST_TO_ADDR
// for j in f do
30130: LD_ADDR_VAR 0 9
30134: PUSH
30135: LD_VAR 0 12
30139: PUSH
30140: FOR_IN
30141: IFFALSE 30214
// if GetBType ( j ) = b_bunker then
30143: LD_VAR 0 9
30147: PPUSH
30148: CALL_OW 266
30152: PUSH
30153: LD_INT 32
30155: EQUAL
30156: IFFALSE 30183
// tmp := Insert ( tmp , 1 , j ) else
30158: LD_ADDR_VAR 0 19
30162: PUSH
30163: LD_VAR 0 19
30167: PPUSH
30168: LD_INT 1
30170: PPUSH
30171: LD_VAR 0 9
30175: PPUSH
30176: CALL_OW 2
30180: ST_TO_ADDR
30181: GO 30212
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30183: LD_ADDR_VAR 0 19
30187: PUSH
30188: LD_VAR 0 19
30192: PPUSH
30193: LD_VAR 0 19
30197: PUSH
30198: LD_INT 1
30200: PLUS
30201: PPUSH
30202: LD_VAR 0 9
30206: PPUSH
30207: CALL_OW 2
30211: ST_TO_ADDR
30212: GO 30140
30214: POP
30215: POP
// if tmp then
30216: LD_VAR 0 19
30220: IFFALSE 30232
// f := tmp ;
30222: LD_ADDR_VAR 0 12
30226: PUSH
30227: LD_VAR 0 19
30231: ST_TO_ADDR
// end ; x := personel [ i ] ;
30232: LD_ADDR_VAR 0 13
30236: PUSH
30237: LD_VAR 0 6
30241: PUSH
30242: LD_VAR 0 8
30246: ARRAY
30247: ST_TO_ADDR
// if x = - 1 then
30248: LD_VAR 0 13
30252: PUSH
30253: LD_INT 1
30255: NEG
30256: EQUAL
30257: IFFALSE 30466
// begin for j in f do
30259: LD_ADDR_VAR 0 9
30263: PUSH
30264: LD_VAR 0 12
30268: PUSH
30269: FOR_IN
30270: IFFALSE 30462
// repeat InitHc ;
30272: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30276: LD_VAR 0 9
30280: PPUSH
30281: CALL_OW 266
30285: PUSH
30286: LD_INT 5
30288: EQUAL
30289: IFFALSE 30359
// begin if UnitsInside ( j ) < 3 then
30291: LD_VAR 0 9
30295: PPUSH
30296: CALL_OW 313
30300: PUSH
30301: LD_INT 3
30303: LESS
30304: IFFALSE 30340
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30306: LD_INT 0
30308: PPUSH
30309: LD_INT 5
30311: PUSH
30312: LD_INT 8
30314: PUSH
30315: LD_INT 9
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: LIST
30322: PUSH
30323: LD_VAR 0 17
30327: ARRAY
30328: PPUSH
30329: LD_VAR 0 4
30333: PPUSH
30334: CALL_OW 380
30338: GO 30357
// PrepareHuman ( false , i , skill ) ;
30340: LD_INT 0
30342: PPUSH
30343: LD_VAR 0 8
30347: PPUSH
30348: LD_VAR 0 4
30352: PPUSH
30353: CALL_OW 380
// end else
30357: GO 30376
// PrepareHuman ( false , i , skill ) ;
30359: LD_INT 0
30361: PPUSH
30362: LD_VAR 0 8
30366: PPUSH
30367: LD_VAR 0 4
30371: PPUSH
30372: CALL_OW 380
// un := CreateHuman ;
30376: LD_ADDR_VAR 0 14
30380: PUSH
30381: CALL_OW 44
30385: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30386: LD_ADDR_VAR 0 7
30390: PUSH
30391: LD_VAR 0 7
30395: PPUSH
30396: LD_INT 1
30398: PPUSH
30399: LD_VAR 0 14
30403: PPUSH
30404: CALL_OW 2
30408: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30409: LD_VAR 0 14
30413: PPUSH
30414: LD_VAR 0 9
30418: PPUSH
30419: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30423: LD_VAR 0 9
30427: PPUSH
30428: CALL_OW 313
30432: PUSH
30433: LD_INT 6
30435: EQUAL
30436: PUSH
30437: LD_VAR 0 9
30441: PPUSH
30442: CALL_OW 266
30446: PUSH
30447: LD_INT 32
30449: PUSH
30450: LD_INT 31
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: IN
30457: OR
30458: IFFALSE 30272
30460: GO 30269
30462: POP
30463: POP
// end else
30464: GO 30846
// for j = 1 to x do
30466: LD_ADDR_VAR 0 9
30470: PUSH
30471: DOUBLE
30472: LD_INT 1
30474: DEC
30475: ST_TO_ADDR
30476: LD_VAR 0 13
30480: PUSH
30481: FOR_TO
30482: IFFALSE 30844
// begin InitHc ;
30484: CALL_OW 19
// if not f then
30488: LD_VAR 0 12
30492: NOT
30493: IFFALSE 30582
// begin PrepareHuman ( false , i , skill ) ;
30495: LD_INT 0
30497: PPUSH
30498: LD_VAR 0 8
30502: PPUSH
30503: LD_VAR 0 4
30507: PPUSH
30508: CALL_OW 380
// un := CreateHuman ;
30512: LD_ADDR_VAR 0 14
30516: PUSH
30517: CALL_OW 44
30521: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30522: LD_ADDR_VAR 0 7
30526: PUSH
30527: LD_VAR 0 7
30531: PPUSH
30532: LD_INT 1
30534: PPUSH
30535: LD_VAR 0 14
30539: PPUSH
30540: CALL_OW 2
30544: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30545: LD_VAR 0 14
30549: PPUSH
30550: LD_VAR 0 1
30554: PPUSH
30555: CALL_OW 250
30559: PPUSH
30560: LD_VAR 0 1
30564: PPUSH
30565: CALL_OW 251
30569: PPUSH
30570: LD_INT 10
30572: PPUSH
30573: LD_INT 0
30575: PPUSH
30576: CALL_OW 50
// continue ;
30580: GO 30481
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30582: LD_VAR 0 12
30586: PUSH
30587: LD_INT 1
30589: ARRAY
30590: PPUSH
30591: CALL_OW 313
30595: PUSH
30596: LD_VAR 0 12
30600: PUSH
30601: LD_INT 1
30603: ARRAY
30604: PPUSH
30605: CALL_OW 266
30609: PUSH
30610: LD_INT 32
30612: PUSH
30613: LD_INT 31
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: IN
30620: AND
30621: PUSH
30622: LD_VAR 0 12
30626: PUSH
30627: LD_INT 1
30629: ARRAY
30630: PPUSH
30631: CALL_OW 313
30635: PUSH
30636: LD_INT 6
30638: EQUAL
30639: OR
30640: IFFALSE 30660
// f := Delete ( f , 1 ) ;
30642: LD_ADDR_VAR 0 12
30646: PUSH
30647: LD_VAR 0 12
30651: PPUSH
30652: LD_INT 1
30654: PPUSH
30655: CALL_OW 3
30659: ST_TO_ADDR
// if not f then
30660: LD_VAR 0 12
30664: NOT
30665: IFFALSE 30683
// begin x := x + 2 ;
30667: LD_ADDR_VAR 0 13
30671: PUSH
30672: LD_VAR 0 13
30676: PUSH
30677: LD_INT 2
30679: PLUS
30680: ST_TO_ADDR
// continue ;
30681: GO 30481
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30683: LD_VAR 0 12
30687: PUSH
30688: LD_INT 1
30690: ARRAY
30691: PPUSH
30692: CALL_OW 266
30696: PUSH
30697: LD_INT 5
30699: EQUAL
30700: IFFALSE 30774
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30702: LD_VAR 0 12
30706: PUSH
30707: LD_INT 1
30709: ARRAY
30710: PPUSH
30711: CALL_OW 313
30715: PUSH
30716: LD_INT 3
30718: LESS
30719: IFFALSE 30755
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30721: LD_INT 0
30723: PPUSH
30724: LD_INT 5
30726: PUSH
30727: LD_INT 8
30729: PUSH
30730: LD_INT 9
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: LIST
30737: PUSH
30738: LD_VAR 0 17
30742: ARRAY
30743: PPUSH
30744: LD_VAR 0 4
30748: PPUSH
30749: CALL_OW 380
30753: GO 30772
// PrepareHuman ( false , i , skill ) ;
30755: LD_INT 0
30757: PPUSH
30758: LD_VAR 0 8
30762: PPUSH
30763: LD_VAR 0 4
30767: PPUSH
30768: CALL_OW 380
// end else
30772: GO 30791
// PrepareHuman ( false , i , skill ) ;
30774: LD_INT 0
30776: PPUSH
30777: LD_VAR 0 8
30781: PPUSH
30782: LD_VAR 0 4
30786: PPUSH
30787: CALL_OW 380
// un := CreateHuman ;
30791: LD_ADDR_VAR 0 14
30795: PUSH
30796: CALL_OW 44
30800: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30801: LD_ADDR_VAR 0 7
30805: PUSH
30806: LD_VAR 0 7
30810: PPUSH
30811: LD_INT 1
30813: PPUSH
30814: LD_VAR 0 14
30818: PPUSH
30819: CALL_OW 2
30823: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30824: LD_VAR 0 14
30828: PPUSH
30829: LD_VAR 0 12
30833: PUSH
30834: LD_INT 1
30836: ARRAY
30837: PPUSH
30838: CALL_OW 52
// end ;
30842: GO 30481
30844: POP
30845: POP
// end ;
30846: GO 29783
30848: POP
30849: POP
// result := result ^ buildings ;
30850: LD_ADDR_VAR 0 7
30854: PUSH
30855: LD_VAR 0 7
30859: PUSH
30860: LD_VAR 0 18
30864: ADD
30865: ST_TO_ADDR
// end else
30866: GO 31009
// begin for i = 1 to personel do
30868: LD_ADDR_VAR 0 8
30872: PUSH
30873: DOUBLE
30874: LD_INT 1
30876: DEC
30877: ST_TO_ADDR
30878: LD_VAR 0 6
30882: PUSH
30883: FOR_TO
30884: IFFALSE 31007
// begin if i > 4 then
30886: LD_VAR 0 8
30890: PUSH
30891: LD_INT 4
30893: GREATER
30894: IFFALSE 30898
// break ;
30896: GO 31007
// x := personel [ i ] ;
30898: LD_ADDR_VAR 0 13
30902: PUSH
30903: LD_VAR 0 6
30907: PUSH
30908: LD_VAR 0 8
30912: ARRAY
30913: ST_TO_ADDR
// if x = - 1 then
30914: LD_VAR 0 13
30918: PUSH
30919: LD_INT 1
30921: NEG
30922: EQUAL
30923: IFFALSE 30927
// continue ;
30925: GO 30883
// PrepareHuman ( false , i , skill ) ;
30927: LD_INT 0
30929: PPUSH
30930: LD_VAR 0 8
30934: PPUSH
30935: LD_VAR 0 4
30939: PPUSH
30940: CALL_OW 380
// un := CreateHuman ;
30944: LD_ADDR_VAR 0 14
30948: PUSH
30949: CALL_OW 44
30953: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30954: LD_VAR 0 14
30958: PPUSH
30959: LD_VAR 0 1
30963: PPUSH
30964: CALL_OW 250
30968: PPUSH
30969: LD_VAR 0 1
30973: PPUSH
30974: CALL_OW 251
30978: PPUSH
30979: LD_INT 10
30981: PPUSH
30982: LD_INT 0
30984: PPUSH
30985: CALL_OW 50
// result := result ^ un ;
30989: LD_ADDR_VAR 0 7
30993: PUSH
30994: LD_VAR 0 7
30998: PUSH
30999: LD_VAR 0 14
31003: ADD
31004: ST_TO_ADDR
// end ;
31005: GO 30883
31007: POP
31008: POP
// end ; end ;
31009: LD_VAR 0 7
31013: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31014: LD_INT 0
31016: PPUSH
31017: PPUSH
31018: PPUSH
31019: PPUSH
31020: PPUSH
31021: PPUSH
31022: PPUSH
31023: PPUSH
31024: PPUSH
31025: PPUSH
31026: PPUSH
31027: PPUSH
31028: PPUSH
31029: PPUSH
31030: PPUSH
31031: PPUSH
// result := false ;
31032: LD_ADDR_VAR 0 3
31036: PUSH
31037: LD_INT 0
31039: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31040: LD_VAR 0 1
31044: NOT
31045: PUSH
31046: LD_VAR 0 1
31050: PPUSH
31051: CALL_OW 266
31055: PUSH
31056: LD_INT 32
31058: PUSH
31059: LD_INT 33
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: IN
31066: NOT
31067: OR
31068: IFFALSE 31072
// exit ;
31070: GO 32181
// nat := GetNation ( tower ) ;
31072: LD_ADDR_VAR 0 12
31076: PUSH
31077: LD_VAR 0 1
31081: PPUSH
31082: CALL_OW 248
31086: ST_TO_ADDR
// side := GetSide ( tower ) ;
31087: LD_ADDR_VAR 0 16
31091: PUSH
31092: LD_VAR 0 1
31096: PPUSH
31097: CALL_OW 255
31101: ST_TO_ADDR
// x := GetX ( tower ) ;
31102: LD_ADDR_VAR 0 10
31106: PUSH
31107: LD_VAR 0 1
31111: PPUSH
31112: CALL_OW 250
31116: ST_TO_ADDR
// y := GetY ( tower ) ;
31117: LD_ADDR_VAR 0 11
31121: PUSH
31122: LD_VAR 0 1
31126: PPUSH
31127: CALL_OW 251
31131: ST_TO_ADDR
// if not x or not y then
31132: LD_VAR 0 10
31136: NOT
31137: PUSH
31138: LD_VAR 0 11
31142: NOT
31143: OR
31144: IFFALSE 31148
// exit ;
31146: GO 32181
// weapon := 0 ;
31148: LD_ADDR_VAR 0 18
31152: PUSH
31153: LD_INT 0
31155: ST_TO_ADDR
// fac_list := [ ] ;
31156: LD_ADDR_VAR 0 17
31160: PUSH
31161: EMPTY
31162: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
31163: LD_ADDR_VAR 0 6
31167: PUSH
31168: LD_VAR 0 1
31172: PPUSH
31173: CALL_OW 274
31177: PPUSH
31178: LD_VAR 0 2
31182: PPUSH
31183: LD_INT 0
31185: PPUSH
31186: CALL 28752 0 3
31190: PPUSH
31191: LD_INT 30
31193: PUSH
31194: LD_INT 3
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PPUSH
31201: CALL_OW 72
31205: ST_TO_ADDR
// if not factories then
31206: LD_VAR 0 6
31210: NOT
31211: IFFALSE 31215
// exit ;
31213: GO 32181
// for i in factories do
31215: LD_ADDR_VAR 0 8
31219: PUSH
31220: LD_VAR 0 6
31224: PUSH
31225: FOR_IN
31226: IFFALSE 31251
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31228: LD_ADDR_VAR 0 17
31232: PUSH
31233: LD_VAR 0 17
31237: PUSH
31238: LD_VAR 0 8
31242: PPUSH
31243: CALL_OW 478
31247: UNION
31248: ST_TO_ADDR
31249: GO 31225
31251: POP
31252: POP
// if not fac_list then
31253: LD_VAR 0 17
31257: NOT
31258: IFFALSE 31262
// exit ;
31260: GO 32181
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31262: LD_ADDR_VAR 0 5
31266: PUSH
31267: LD_INT 4
31269: PUSH
31270: LD_INT 5
31272: PUSH
31273: LD_INT 9
31275: PUSH
31276: LD_INT 10
31278: PUSH
31279: LD_INT 6
31281: PUSH
31282: LD_INT 7
31284: PUSH
31285: LD_INT 11
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: PUSH
31297: LD_INT 27
31299: PUSH
31300: LD_INT 28
31302: PUSH
31303: LD_INT 26
31305: PUSH
31306: LD_INT 30
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: PUSH
31315: LD_INT 43
31317: PUSH
31318: LD_INT 44
31320: PUSH
31321: LD_INT 46
31323: PUSH
31324: LD_INT 45
31326: PUSH
31327: LD_INT 47
31329: PUSH
31330: LD_INT 49
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: LIST
31345: PUSH
31346: LD_VAR 0 12
31350: ARRAY
31351: ST_TO_ADDR
// list := list isect fac_list ;
31352: LD_ADDR_VAR 0 5
31356: PUSH
31357: LD_VAR 0 5
31361: PUSH
31362: LD_VAR 0 17
31366: ISECT
31367: ST_TO_ADDR
// if not list then
31368: LD_VAR 0 5
31372: NOT
31373: IFFALSE 31377
// exit ;
31375: GO 32181
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31377: LD_VAR 0 12
31381: PUSH
31382: LD_INT 3
31384: EQUAL
31385: PUSH
31386: LD_INT 49
31388: PUSH
31389: LD_VAR 0 5
31393: IN
31394: AND
31395: PUSH
31396: LD_INT 31
31398: PPUSH
31399: LD_VAR 0 16
31403: PPUSH
31404: CALL_OW 321
31408: PUSH
31409: LD_INT 2
31411: EQUAL
31412: AND
31413: IFFALSE 31473
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31415: LD_INT 22
31417: PUSH
31418: LD_VAR 0 16
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: LD_INT 35
31429: PUSH
31430: LD_INT 49
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: LD_INT 91
31439: PUSH
31440: LD_VAR 0 1
31444: PUSH
31445: LD_INT 10
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: LIST
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: LIST
31457: PPUSH
31458: CALL_OW 69
31462: NOT
31463: IFFALSE 31473
// weapon := ru_time_lapser ;
31465: LD_ADDR_VAR 0 18
31469: PUSH
31470: LD_INT 49
31472: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31473: LD_VAR 0 12
31477: PUSH
31478: LD_INT 1
31480: PUSH
31481: LD_INT 2
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: IN
31488: PUSH
31489: LD_INT 11
31491: PUSH
31492: LD_VAR 0 5
31496: IN
31497: PUSH
31498: LD_INT 30
31500: PUSH
31501: LD_VAR 0 5
31505: IN
31506: OR
31507: AND
31508: PUSH
31509: LD_INT 6
31511: PPUSH
31512: LD_VAR 0 16
31516: PPUSH
31517: CALL_OW 321
31521: PUSH
31522: LD_INT 2
31524: EQUAL
31525: AND
31526: IFFALSE 31691
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31528: LD_INT 22
31530: PUSH
31531: LD_VAR 0 16
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: LD_INT 2
31542: PUSH
31543: LD_INT 35
31545: PUSH
31546: LD_INT 11
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: LD_INT 35
31555: PUSH
31556: LD_INT 30
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: LIST
31567: PUSH
31568: LD_INT 91
31570: PUSH
31571: LD_VAR 0 1
31575: PUSH
31576: LD_INT 18
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: LIST
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: LIST
31588: PPUSH
31589: CALL_OW 69
31593: NOT
31594: PUSH
31595: LD_INT 22
31597: PUSH
31598: LD_VAR 0 16
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 2
31609: PUSH
31610: LD_INT 30
31612: PUSH
31613: LD_INT 32
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PUSH
31620: LD_INT 30
31622: PUSH
31623: LD_INT 33
31625: PUSH
31626: EMPTY
31627: LIST
31628: LIST
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 91
31637: PUSH
31638: LD_VAR 0 1
31642: PUSH
31643: LD_INT 12
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: LIST
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: LIST
31655: PUSH
31656: EMPTY
31657: LIST
31658: PPUSH
31659: CALL_OW 69
31663: PUSH
31664: LD_INT 2
31666: GREATER
31667: AND
31668: IFFALSE 31691
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31670: LD_ADDR_VAR 0 18
31674: PUSH
31675: LD_INT 11
31677: PUSH
31678: LD_INT 30
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: LD_VAR 0 12
31689: ARRAY
31690: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31691: LD_VAR 0 18
31695: NOT
31696: PUSH
31697: LD_INT 40
31699: PPUSH
31700: LD_VAR 0 16
31704: PPUSH
31705: CALL_OW 321
31709: PUSH
31710: LD_INT 2
31712: EQUAL
31713: AND
31714: PUSH
31715: LD_INT 7
31717: PUSH
31718: LD_VAR 0 5
31722: IN
31723: PUSH
31724: LD_INT 28
31726: PUSH
31727: LD_VAR 0 5
31731: IN
31732: OR
31733: PUSH
31734: LD_INT 45
31736: PUSH
31737: LD_VAR 0 5
31741: IN
31742: OR
31743: AND
31744: IFFALSE 31998
// begin hex := GetHexInfo ( x , y ) ;
31746: LD_ADDR_VAR 0 4
31750: PUSH
31751: LD_VAR 0 10
31755: PPUSH
31756: LD_VAR 0 11
31760: PPUSH
31761: CALL_OW 546
31765: ST_TO_ADDR
// if hex [ 1 ] then
31766: LD_VAR 0 4
31770: PUSH
31771: LD_INT 1
31773: ARRAY
31774: IFFALSE 31778
// exit ;
31776: GO 32181
// height := hex [ 2 ] ;
31778: LD_ADDR_VAR 0 15
31782: PUSH
31783: LD_VAR 0 4
31787: PUSH
31788: LD_INT 2
31790: ARRAY
31791: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31792: LD_ADDR_VAR 0 14
31796: PUSH
31797: LD_INT 0
31799: PUSH
31800: LD_INT 2
31802: PUSH
31803: LD_INT 3
31805: PUSH
31806: LD_INT 5
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: ST_TO_ADDR
// for i in tmp do
31815: LD_ADDR_VAR 0 8
31819: PUSH
31820: LD_VAR 0 14
31824: PUSH
31825: FOR_IN
31826: IFFALSE 31996
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
31828: LD_ADDR_VAR 0 9
31832: PUSH
31833: LD_VAR 0 10
31837: PPUSH
31838: LD_VAR 0 8
31842: PPUSH
31843: LD_INT 5
31845: PPUSH
31846: CALL_OW 272
31850: PUSH
31851: LD_VAR 0 11
31855: PPUSH
31856: LD_VAR 0 8
31860: PPUSH
31861: LD_INT 5
31863: PPUSH
31864: CALL_OW 273
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31873: LD_VAR 0 9
31877: PUSH
31878: LD_INT 1
31880: ARRAY
31881: PPUSH
31882: LD_VAR 0 9
31886: PUSH
31887: LD_INT 2
31889: ARRAY
31890: PPUSH
31891: CALL_OW 488
31895: IFFALSE 31994
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
31897: LD_ADDR_VAR 0 4
31901: PUSH
31902: LD_VAR 0 9
31906: PUSH
31907: LD_INT 1
31909: ARRAY
31910: PPUSH
31911: LD_VAR 0 9
31915: PUSH
31916: LD_INT 2
31918: ARRAY
31919: PPUSH
31920: CALL_OW 546
31924: ST_TO_ADDR
// if hex [ 1 ] then
31925: LD_VAR 0 4
31929: PUSH
31930: LD_INT 1
31932: ARRAY
31933: IFFALSE 31937
// continue ;
31935: GO 31825
// h := hex [ 2 ] ;
31937: LD_ADDR_VAR 0 13
31941: PUSH
31942: LD_VAR 0 4
31946: PUSH
31947: LD_INT 2
31949: ARRAY
31950: ST_TO_ADDR
// if h + 7 < height then
31951: LD_VAR 0 13
31955: PUSH
31956: LD_INT 7
31958: PLUS
31959: PUSH
31960: LD_VAR 0 15
31964: LESS
31965: IFFALSE 31994
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
31967: LD_ADDR_VAR 0 18
31971: PUSH
31972: LD_INT 7
31974: PUSH
31975: LD_INT 28
31977: PUSH
31978: LD_INT 45
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: LIST
31985: PUSH
31986: LD_VAR 0 12
31990: ARRAY
31991: ST_TO_ADDR
// break ;
31992: GO 31996
// end ; end ; end ;
31994: GO 31825
31996: POP
31997: POP
// end ; if not weapon then
31998: LD_VAR 0 18
32002: NOT
32003: IFFALSE 32063
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32005: LD_ADDR_VAR 0 5
32009: PUSH
32010: LD_VAR 0 5
32014: PUSH
32015: LD_INT 11
32017: PUSH
32018: LD_INT 30
32020: PUSH
32021: LD_INT 49
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: LIST
32028: DIFF
32029: ST_TO_ADDR
// if not list then
32030: LD_VAR 0 5
32034: NOT
32035: IFFALSE 32039
// exit ;
32037: GO 32181
// weapon := list [ rand ( 1 , list ) ] ;
32039: LD_ADDR_VAR 0 18
32043: PUSH
32044: LD_VAR 0 5
32048: PUSH
32049: LD_INT 1
32051: PPUSH
32052: LD_VAR 0 5
32056: PPUSH
32057: CALL_OW 12
32061: ARRAY
32062: ST_TO_ADDR
// end ; if weapon then
32063: LD_VAR 0 18
32067: IFFALSE 32181
// begin tmp := CostOfWeapon ( weapon ) ;
32069: LD_ADDR_VAR 0 14
32073: PUSH
32074: LD_VAR 0 18
32078: PPUSH
32079: CALL_OW 451
32083: ST_TO_ADDR
// j := GetBase ( tower ) ;
32084: LD_ADDR_VAR 0 9
32088: PUSH
32089: LD_VAR 0 1
32093: PPUSH
32094: CALL_OW 274
32098: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32099: LD_VAR 0 9
32103: PPUSH
32104: LD_INT 1
32106: PPUSH
32107: CALL_OW 275
32111: PUSH
32112: LD_VAR 0 14
32116: PUSH
32117: LD_INT 1
32119: ARRAY
32120: GREATEREQUAL
32121: PUSH
32122: LD_VAR 0 9
32126: PPUSH
32127: LD_INT 2
32129: PPUSH
32130: CALL_OW 275
32134: PUSH
32135: LD_VAR 0 14
32139: PUSH
32140: LD_INT 2
32142: ARRAY
32143: GREATEREQUAL
32144: AND
32145: PUSH
32146: LD_VAR 0 9
32150: PPUSH
32151: LD_INT 3
32153: PPUSH
32154: CALL_OW 275
32158: PUSH
32159: LD_VAR 0 14
32163: PUSH
32164: LD_INT 3
32166: ARRAY
32167: GREATEREQUAL
32168: AND
32169: IFFALSE 32181
// result := weapon ;
32171: LD_ADDR_VAR 0 3
32175: PUSH
32176: LD_VAR 0 18
32180: ST_TO_ADDR
// end ; end ;
32181: LD_VAR 0 3
32185: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32186: LD_INT 0
32188: PPUSH
32189: PPUSH
// result := true ;
32190: LD_ADDR_VAR 0 3
32194: PUSH
32195: LD_INT 1
32197: ST_TO_ADDR
// if array1 = array2 then
32198: LD_VAR 0 1
32202: PUSH
32203: LD_VAR 0 2
32207: EQUAL
32208: IFFALSE 32268
// begin for i = 1 to array1 do
32210: LD_ADDR_VAR 0 4
32214: PUSH
32215: DOUBLE
32216: LD_INT 1
32218: DEC
32219: ST_TO_ADDR
32220: LD_VAR 0 1
32224: PUSH
32225: FOR_TO
32226: IFFALSE 32264
// if array1 [ i ] <> array2 [ i ] then
32228: LD_VAR 0 1
32232: PUSH
32233: LD_VAR 0 4
32237: ARRAY
32238: PUSH
32239: LD_VAR 0 2
32243: PUSH
32244: LD_VAR 0 4
32248: ARRAY
32249: NONEQUAL
32250: IFFALSE 32262
// begin result := false ;
32252: LD_ADDR_VAR 0 3
32256: PUSH
32257: LD_INT 0
32259: ST_TO_ADDR
// break ;
32260: GO 32264
// end ;
32262: GO 32225
32264: POP
32265: POP
// end else
32266: GO 32276
// result := false ;
32268: LD_ADDR_VAR 0 3
32272: PUSH
32273: LD_INT 0
32275: ST_TO_ADDR
// end ;
32276: LD_VAR 0 3
32280: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
32281: LD_INT 0
32283: PPUSH
32284: PPUSH
// if not array1 or not array2 then
32285: LD_VAR 0 1
32289: NOT
32290: PUSH
32291: LD_VAR 0 2
32295: NOT
32296: OR
32297: IFFALSE 32301
// exit ;
32299: GO 32365
// result := true ;
32301: LD_ADDR_VAR 0 3
32305: PUSH
32306: LD_INT 1
32308: ST_TO_ADDR
// for i = 1 to array1 do
32309: LD_ADDR_VAR 0 4
32313: PUSH
32314: DOUBLE
32315: LD_INT 1
32317: DEC
32318: ST_TO_ADDR
32319: LD_VAR 0 1
32323: PUSH
32324: FOR_TO
32325: IFFALSE 32363
// if array1 [ i ] <> array2 [ i ] then
32327: LD_VAR 0 1
32331: PUSH
32332: LD_VAR 0 4
32336: ARRAY
32337: PUSH
32338: LD_VAR 0 2
32342: PUSH
32343: LD_VAR 0 4
32347: ARRAY
32348: NONEQUAL
32349: IFFALSE 32361
// begin result := false ;
32351: LD_ADDR_VAR 0 3
32355: PUSH
32356: LD_INT 0
32358: ST_TO_ADDR
// break ;
32359: GO 32363
// end ;
32361: GO 32324
32363: POP
32364: POP
// end ;
32365: LD_VAR 0 3
32369: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32370: LD_INT 0
32372: PPUSH
32373: PPUSH
32374: PPUSH
// pom := GetBase ( fac ) ;
32375: LD_ADDR_VAR 0 5
32379: PUSH
32380: LD_VAR 0 1
32384: PPUSH
32385: CALL_OW 274
32389: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32390: LD_ADDR_VAR 0 4
32394: PUSH
32395: LD_VAR 0 2
32399: PUSH
32400: LD_INT 1
32402: ARRAY
32403: PPUSH
32404: LD_VAR 0 2
32408: PUSH
32409: LD_INT 2
32411: ARRAY
32412: PPUSH
32413: LD_VAR 0 2
32417: PUSH
32418: LD_INT 3
32420: ARRAY
32421: PPUSH
32422: LD_VAR 0 2
32426: PUSH
32427: LD_INT 4
32429: ARRAY
32430: PPUSH
32431: CALL_OW 449
32435: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32436: LD_ADDR_VAR 0 3
32440: PUSH
32441: LD_VAR 0 5
32445: PPUSH
32446: LD_INT 1
32448: PPUSH
32449: CALL_OW 275
32453: PUSH
32454: LD_VAR 0 4
32458: PUSH
32459: LD_INT 1
32461: ARRAY
32462: GREATEREQUAL
32463: PUSH
32464: LD_VAR 0 5
32468: PPUSH
32469: LD_INT 2
32471: PPUSH
32472: CALL_OW 275
32476: PUSH
32477: LD_VAR 0 4
32481: PUSH
32482: LD_INT 2
32484: ARRAY
32485: GREATEREQUAL
32486: AND
32487: PUSH
32488: LD_VAR 0 5
32492: PPUSH
32493: LD_INT 3
32495: PPUSH
32496: CALL_OW 275
32500: PUSH
32501: LD_VAR 0 4
32505: PUSH
32506: LD_INT 3
32508: ARRAY
32509: GREATEREQUAL
32510: AND
32511: ST_TO_ADDR
// end ;
32512: LD_VAR 0 3
32516: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32517: LD_INT 0
32519: PPUSH
32520: PPUSH
32521: PPUSH
32522: PPUSH
// pom := GetBase ( building ) ;
32523: LD_ADDR_VAR 0 3
32527: PUSH
32528: LD_VAR 0 1
32532: PPUSH
32533: CALL_OW 274
32537: ST_TO_ADDR
// if not pom then
32538: LD_VAR 0 3
32542: NOT
32543: IFFALSE 32547
// exit ;
32545: GO 32717
// btype := GetBType ( building ) ;
32547: LD_ADDR_VAR 0 5
32551: PUSH
32552: LD_VAR 0 1
32556: PPUSH
32557: CALL_OW 266
32561: ST_TO_ADDR
// if btype = b_armoury then
32562: LD_VAR 0 5
32566: PUSH
32567: LD_INT 4
32569: EQUAL
32570: IFFALSE 32580
// btype := b_barracks ;
32572: LD_ADDR_VAR 0 5
32576: PUSH
32577: LD_INT 5
32579: ST_TO_ADDR
// if btype = b_depot then
32580: LD_VAR 0 5
32584: PUSH
32585: LD_INT 0
32587: EQUAL
32588: IFFALSE 32598
// btype := b_warehouse ;
32590: LD_ADDR_VAR 0 5
32594: PUSH
32595: LD_INT 1
32597: ST_TO_ADDR
// if btype = b_workshop then
32598: LD_VAR 0 5
32602: PUSH
32603: LD_INT 2
32605: EQUAL
32606: IFFALSE 32616
// btype := b_factory ;
32608: LD_ADDR_VAR 0 5
32612: PUSH
32613: LD_INT 3
32615: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32616: LD_ADDR_VAR 0 4
32620: PUSH
32621: LD_VAR 0 5
32625: PPUSH
32626: LD_VAR 0 1
32630: PPUSH
32631: CALL_OW 248
32635: PPUSH
32636: CALL_OW 450
32640: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32641: LD_ADDR_VAR 0 2
32645: PUSH
32646: LD_VAR 0 3
32650: PPUSH
32651: LD_INT 1
32653: PPUSH
32654: CALL_OW 275
32658: PUSH
32659: LD_VAR 0 4
32663: PUSH
32664: LD_INT 1
32666: ARRAY
32667: GREATEREQUAL
32668: PUSH
32669: LD_VAR 0 3
32673: PPUSH
32674: LD_INT 2
32676: PPUSH
32677: CALL_OW 275
32681: PUSH
32682: LD_VAR 0 4
32686: PUSH
32687: LD_INT 2
32689: ARRAY
32690: GREATEREQUAL
32691: AND
32692: PUSH
32693: LD_VAR 0 3
32697: PPUSH
32698: LD_INT 3
32700: PPUSH
32701: CALL_OW 275
32705: PUSH
32706: LD_VAR 0 4
32710: PUSH
32711: LD_INT 3
32713: ARRAY
32714: GREATEREQUAL
32715: AND
32716: ST_TO_ADDR
// end ;
32717: LD_VAR 0 2
32721: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32722: LD_INT 0
32724: PPUSH
32725: PPUSH
32726: PPUSH
// pom := GetBase ( building ) ;
32727: LD_ADDR_VAR 0 4
32731: PUSH
32732: LD_VAR 0 1
32736: PPUSH
32737: CALL_OW 274
32741: ST_TO_ADDR
// if not pom then
32742: LD_VAR 0 4
32746: NOT
32747: IFFALSE 32751
// exit ;
32749: GO 32852
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32751: LD_ADDR_VAR 0 5
32755: PUSH
32756: LD_VAR 0 2
32760: PPUSH
32761: LD_VAR 0 1
32765: PPUSH
32766: CALL_OW 248
32770: PPUSH
32771: CALL_OW 450
32775: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32776: LD_ADDR_VAR 0 3
32780: PUSH
32781: LD_VAR 0 4
32785: PPUSH
32786: LD_INT 1
32788: PPUSH
32789: CALL_OW 275
32793: PUSH
32794: LD_VAR 0 5
32798: PUSH
32799: LD_INT 1
32801: ARRAY
32802: GREATEREQUAL
32803: PUSH
32804: LD_VAR 0 4
32808: PPUSH
32809: LD_INT 2
32811: PPUSH
32812: CALL_OW 275
32816: PUSH
32817: LD_VAR 0 5
32821: PUSH
32822: LD_INT 2
32824: ARRAY
32825: GREATEREQUAL
32826: AND
32827: PUSH
32828: LD_VAR 0 4
32832: PPUSH
32833: LD_INT 3
32835: PPUSH
32836: CALL_OW 275
32840: PUSH
32841: LD_VAR 0 5
32845: PUSH
32846: LD_INT 3
32848: ARRAY
32849: GREATEREQUAL
32850: AND
32851: ST_TO_ADDR
// end ;
32852: LD_VAR 0 3
32856: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
32857: LD_INT 0
32859: PPUSH
32860: PPUSH
32861: PPUSH
32862: PPUSH
32863: PPUSH
32864: PPUSH
32865: PPUSH
32866: PPUSH
32867: PPUSH
32868: PPUSH
32869: PPUSH
// result := false ;
32870: LD_ADDR_VAR 0 8
32874: PUSH
32875: LD_INT 0
32877: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
32878: LD_VAR 0 5
32882: NOT
32883: PUSH
32884: LD_VAR 0 1
32888: NOT
32889: OR
32890: PUSH
32891: LD_VAR 0 2
32895: NOT
32896: OR
32897: PUSH
32898: LD_VAR 0 3
32902: NOT
32903: OR
32904: IFFALSE 32908
// exit ;
32906: GO 33722
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
32908: LD_ADDR_VAR 0 14
32912: PUSH
32913: LD_VAR 0 1
32917: PPUSH
32918: LD_VAR 0 2
32922: PPUSH
32923: LD_VAR 0 3
32927: PPUSH
32928: LD_VAR 0 4
32932: PPUSH
32933: LD_VAR 0 5
32937: PUSH
32938: LD_INT 1
32940: ARRAY
32941: PPUSH
32942: CALL_OW 248
32946: PPUSH
32947: LD_INT 0
32949: PPUSH
32950: CALL 34975 0 6
32954: ST_TO_ADDR
// if not hexes then
32955: LD_VAR 0 14
32959: NOT
32960: IFFALSE 32964
// exit ;
32962: GO 33722
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32964: LD_ADDR_VAR 0 17
32968: PUSH
32969: LD_VAR 0 5
32973: PPUSH
32974: LD_INT 22
32976: PUSH
32977: LD_VAR 0 13
32981: PPUSH
32982: CALL_OW 255
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: LD_INT 2
32993: PUSH
32994: LD_INT 30
32996: PUSH
32997: LD_INT 0
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 30
33006: PUSH
33007: LD_INT 1
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: LIST
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PPUSH
33023: CALL_OW 72
33027: ST_TO_ADDR
// for i = 1 to hexes do
33028: LD_ADDR_VAR 0 9
33032: PUSH
33033: DOUBLE
33034: LD_INT 1
33036: DEC
33037: ST_TO_ADDR
33038: LD_VAR 0 14
33042: PUSH
33043: FOR_TO
33044: IFFALSE 33720
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33046: LD_ADDR_VAR 0 13
33050: PUSH
33051: LD_VAR 0 14
33055: PUSH
33056: LD_VAR 0 9
33060: ARRAY
33061: PUSH
33062: LD_INT 1
33064: ARRAY
33065: PPUSH
33066: LD_VAR 0 14
33070: PUSH
33071: LD_VAR 0 9
33075: ARRAY
33076: PUSH
33077: LD_INT 2
33079: ARRAY
33080: PPUSH
33081: CALL_OW 428
33085: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33086: LD_VAR 0 14
33090: PUSH
33091: LD_VAR 0 9
33095: ARRAY
33096: PUSH
33097: LD_INT 1
33099: ARRAY
33100: PPUSH
33101: LD_VAR 0 14
33105: PUSH
33106: LD_VAR 0 9
33110: ARRAY
33111: PUSH
33112: LD_INT 2
33114: ARRAY
33115: PPUSH
33116: CALL_OW 351
33120: PUSH
33121: LD_VAR 0 14
33125: PUSH
33126: LD_VAR 0 9
33130: ARRAY
33131: PUSH
33132: LD_INT 1
33134: ARRAY
33135: PPUSH
33136: LD_VAR 0 14
33140: PUSH
33141: LD_VAR 0 9
33145: ARRAY
33146: PUSH
33147: LD_INT 2
33149: ARRAY
33150: PPUSH
33151: CALL_OW 488
33155: NOT
33156: OR
33157: PUSH
33158: LD_VAR 0 13
33162: PPUSH
33163: CALL_OW 247
33167: PUSH
33168: LD_INT 3
33170: EQUAL
33171: OR
33172: IFFALSE 33178
// exit ;
33174: POP
33175: POP
33176: GO 33722
// if not tmp then
33178: LD_VAR 0 13
33182: NOT
33183: IFFALSE 33187
// continue ;
33185: GO 33043
// result := true ;
33187: LD_ADDR_VAR 0 8
33191: PUSH
33192: LD_INT 1
33194: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
33195: LD_VAR 0 6
33199: PUSH
33200: LD_VAR 0 13
33204: PPUSH
33205: CALL_OW 247
33209: PUSH
33210: LD_INT 2
33212: EQUAL
33213: AND
33214: PUSH
33215: LD_VAR 0 13
33219: PPUSH
33220: CALL_OW 263
33224: PUSH
33225: LD_INT 1
33227: EQUAL
33228: AND
33229: IFFALSE 33393
// begin if IsDrivenBy ( tmp ) then
33231: LD_VAR 0 13
33235: PPUSH
33236: CALL_OW 311
33240: IFFALSE 33244
// continue ;
33242: GO 33043
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
33244: LD_VAR 0 6
33248: PPUSH
33249: LD_INT 3
33251: PUSH
33252: LD_INT 60
33254: PUSH
33255: EMPTY
33256: LIST
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 3
33264: PUSH
33265: LD_INT 55
33267: PUSH
33268: EMPTY
33269: LIST
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PPUSH
33279: CALL_OW 72
33283: IFFALSE 33391
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
33285: LD_ADDR_VAR 0 18
33289: PUSH
33290: LD_VAR 0 6
33294: PPUSH
33295: LD_INT 3
33297: PUSH
33298: LD_INT 60
33300: PUSH
33301: EMPTY
33302: LIST
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PUSH
33308: LD_INT 3
33310: PUSH
33311: LD_INT 55
33313: PUSH
33314: EMPTY
33315: LIST
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PPUSH
33325: CALL_OW 72
33329: PUSH
33330: LD_INT 1
33332: ARRAY
33333: ST_TO_ADDR
// if IsInUnit ( driver ) then
33334: LD_VAR 0 18
33338: PPUSH
33339: CALL_OW 310
33343: IFFALSE 33354
// ComExit ( driver ) ;
33345: LD_VAR 0 18
33349: PPUSH
33350: CALL 58756 0 1
// AddComEnterUnit ( driver , tmp ) ;
33354: LD_VAR 0 18
33358: PPUSH
33359: LD_VAR 0 13
33363: PPUSH
33364: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
33368: LD_VAR 0 18
33372: PPUSH
33373: LD_VAR 0 7
33377: PPUSH
33378: CALL_OW 173
// AddComExitVehicle ( driver ) ;
33382: LD_VAR 0 18
33386: PPUSH
33387: CALL_OW 181
// end ; continue ;
33391: GO 33043
// end ; if not cleaners or not tmp in cleaners then
33393: LD_VAR 0 6
33397: NOT
33398: PUSH
33399: LD_VAR 0 13
33403: PUSH
33404: LD_VAR 0 6
33408: IN
33409: NOT
33410: OR
33411: IFFALSE 33718
// begin if dep then
33413: LD_VAR 0 17
33417: IFFALSE 33553
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33419: LD_ADDR_VAR 0 16
33423: PUSH
33424: LD_VAR 0 17
33428: PUSH
33429: LD_INT 1
33431: ARRAY
33432: PPUSH
33433: CALL_OW 250
33437: PPUSH
33438: LD_VAR 0 17
33442: PUSH
33443: LD_INT 1
33445: ARRAY
33446: PPUSH
33447: CALL_OW 254
33451: PPUSH
33452: LD_INT 5
33454: PPUSH
33455: CALL_OW 272
33459: PUSH
33460: LD_VAR 0 17
33464: PUSH
33465: LD_INT 1
33467: ARRAY
33468: PPUSH
33469: CALL_OW 251
33473: PPUSH
33474: LD_VAR 0 17
33478: PUSH
33479: LD_INT 1
33481: ARRAY
33482: PPUSH
33483: CALL_OW 254
33487: PPUSH
33488: LD_INT 5
33490: PPUSH
33491: CALL_OW 273
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33500: LD_VAR 0 16
33504: PUSH
33505: LD_INT 1
33507: ARRAY
33508: PPUSH
33509: LD_VAR 0 16
33513: PUSH
33514: LD_INT 2
33516: ARRAY
33517: PPUSH
33518: CALL_OW 488
33522: IFFALSE 33553
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33524: LD_VAR 0 13
33528: PPUSH
33529: LD_VAR 0 16
33533: PUSH
33534: LD_INT 1
33536: ARRAY
33537: PPUSH
33538: LD_VAR 0 16
33542: PUSH
33543: LD_INT 2
33545: ARRAY
33546: PPUSH
33547: CALL_OW 111
// continue ;
33551: GO 33043
// end ; end ; r := GetDir ( tmp ) ;
33553: LD_ADDR_VAR 0 15
33557: PUSH
33558: LD_VAR 0 13
33562: PPUSH
33563: CALL_OW 254
33567: ST_TO_ADDR
// if r = 5 then
33568: LD_VAR 0 15
33572: PUSH
33573: LD_INT 5
33575: EQUAL
33576: IFFALSE 33586
// r := 0 ;
33578: LD_ADDR_VAR 0 15
33582: PUSH
33583: LD_INT 0
33585: ST_TO_ADDR
// for j = r to 5 do
33586: LD_ADDR_VAR 0 10
33590: PUSH
33591: DOUBLE
33592: LD_VAR 0 15
33596: DEC
33597: ST_TO_ADDR
33598: LD_INT 5
33600: PUSH
33601: FOR_TO
33602: IFFALSE 33716
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33604: LD_ADDR_VAR 0 11
33608: PUSH
33609: LD_VAR 0 13
33613: PPUSH
33614: CALL_OW 250
33618: PPUSH
33619: LD_VAR 0 10
33623: PPUSH
33624: LD_INT 2
33626: PPUSH
33627: CALL_OW 272
33631: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33632: LD_ADDR_VAR 0 12
33636: PUSH
33637: LD_VAR 0 13
33641: PPUSH
33642: CALL_OW 251
33646: PPUSH
33647: LD_VAR 0 10
33651: PPUSH
33652: LD_INT 2
33654: PPUSH
33655: CALL_OW 273
33659: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33660: LD_VAR 0 11
33664: PPUSH
33665: LD_VAR 0 12
33669: PPUSH
33670: CALL_OW 488
33674: PUSH
33675: LD_VAR 0 11
33679: PPUSH
33680: LD_VAR 0 12
33684: PPUSH
33685: CALL_OW 428
33689: NOT
33690: AND
33691: IFFALSE 33714
// begin ComMoveXY ( tmp , _x , _y ) ;
33693: LD_VAR 0 13
33697: PPUSH
33698: LD_VAR 0 11
33702: PPUSH
33703: LD_VAR 0 12
33707: PPUSH
33708: CALL_OW 111
// break ;
33712: GO 33716
// end ; end ;
33714: GO 33601
33716: POP
33717: POP
// end ; end ;
33718: GO 33043
33720: POP
33721: POP
// end ;
33722: LD_VAR 0 8
33726: RET
// export function BuildingTechInvented ( side , btype ) ; begin
33727: LD_INT 0
33729: PPUSH
// result := true ;
33730: LD_ADDR_VAR 0 3
33734: PUSH
33735: LD_INT 1
33737: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
33738: LD_VAR 0 2
33742: PUSH
33743: LD_INT 24
33745: DOUBLE
33746: EQUAL
33747: IFTRUE 33757
33749: LD_INT 33
33751: DOUBLE
33752: EQUAL
33753: IFTRUE 33757
33755: GO 33782
33757: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
33758: LD_ADDR_VAR 0 3
33762: PUSH
33763: LD_INT 32
33765: PPUSH
33766: LD_VAR 0 1
33770: PPUSH
33771: CALL_OW 321
33775: PUSH
33776: LD_INT 2
33778: EQUAL
33779: ST_TO_ADDR
33780: GO 34098
33782: LD_INT 20
33784: DOUBLE
33785: EQUAL
33786: IFTRUE 33790
33788: GO 33815
33790: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
33791: LD_ADDR_VAR 0 3
33795: PUSH
33796: LD_INT 6
33798: PPUSH
33799: LD_VAR 0 1
33803: PPUSH
33804: CALL_OW 321
33808: PUSH
33809: LD_INT 2
33811: EQUAL
33812: ST_TO_ADDR
33813: GO 34098
33815: LD_INT 22
33817: DOUBLE
33818: EQUAL
33819: IFTRUE 33829
33821: LD_INT 36
33823: DOUBLE
33824: EQUAL
33825: IFTRUE 33829
33827: GO 33854
33829: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
33830: LD_ADDR_VAR 0 3
33834: PUSH
33835: LD_INT 15
33837: PPUSH
33838: LD_VAR 0 1
33842: PPUSH
33843: CALL_OW 321
33847: PUSH
33848: LD_INT 2
33850: EQUAL
33851: ST_TO_ADDR
33852: GO 34098
33854: LD_INT 30
33856: DOUBLE
33857: EQUAL
33858: IFTRUE 33862
33860: GO 33887
33862: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
33863: LD_ADDR_VAR 0 3
33867: PUSH
33868: LD_INT 20
33870: PPUSH
33871: LD_VAR 0 1
33875: PPUSH
33876: CALL_OW 321
33880: PUSH
33881: LD_INT 2
33883: EQUAL
33884: ST_TO_ADDR
33885: GO 34098
33887: LD_INT 28
33889: DOUBLE
33890: EQUAL
33891: IFTRUE 33901
33893: LD_INT 21
33895: DOUBLE
33896: EQUAL
33897: IFTRUE 33901
33899: GO 33926
33901: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
33902: LD_ADDR_VAR 0 3
33906: PUSH
33907: LD_INT 21
33909: PPUSH
33910: LD_VAR 0 1
33914: PPUSH
33915: CALL_OW 321
33919: PUSH
33920: LD_INT 2
33922: EQUAL
33923: ST_TO_ADDR
33924: GO 34098
33926: LD_INT 16
33928: DOUBLE
33929: EQUAL
33930: IFTRUE 33934
33932: GO 33959
33934: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
33935: LD_ADDR_VAR 0 3
33939: PUSH
33940: LD_INT 84
33942: PPUSH
33943: LD_VAR 0 1
33947: PPUSH
33948: CALL_OW 321
33952: PUSH
33953: LD_INT 2
33955: EQUAL
33956: ST_TO_ADDR
33957: GO 34098
33959: LD_INT 19
33961: DOUBLE
33962: EQUAL
33963: IFTRUE 33973
33965: LD_INT 23
33967: DOUBLE
33968: EQUAL
33969: IFTRUE 33973
33971: GO 33998
33973: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
33974: LD_ADDR_VAR 0 3
33978: PUSH
33979: LD_INT 83
33981: PPUSH
33982: LD_VAR 0 1
33986: PPUSH
33987: CALL_OW 321
33991: PUSH
33992: LD_INT 2
33994: EQUAL
33995: ST_TO_ADDR
33996: GO 34098
33998: LD_INT 17
34000: DOUBLE
34001: EQUAL
34002: IFTRUE 34006
34004: GO 34031
34006: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
34007: LD_ADDR_VAR 0 3
34011: PUSH
34012: LD_INT 39
34014: PPUSH
34015: LD_VAR 0 1
34019: PPUSH
34020: CALL_OW 321
34024: PUSH
34025: LD_INT 2
34027: EQUAL
34028: ST_TO_ADDR
34029: GO 34098
34031: LD_INT 18
34033: DOUBLE
34034: EQUAL
34035: IFTRUE 34039
34037: GO 34064
34039: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
34040: LD_ADDR_VAR 0 3
34044: PUSH
34045: LD_INT 40
34047: PPUSH
34048: LD_VAR 0 1
34052: PPUSH
34053: CALL_OW 321
34057: PUSH
34058: LD_INT 2
34060: EQUAL
34061: ST_TO_ADDR
34062: GO 34098
34064: LD_INT 27
34066: DOUBLE
34067: EQUAL
34068: IFTRUE 34072
34070: GO 34097
34072: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
34073: LD_ADDR_VAR 0 3
34077: PUSH
34078: LD_INT 35
34080: PPUSH
34081: LD_VAR 0 1
34085: PPUSH
34086: CALL_OW 321
34090: PUSH
34091: LD_INT 2
34093: EQUAL
34094: ST_TO_ADDR
34095: GO 34098
34097: POP
// end ;
34098: LD_VAR 0 3
34102: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
34103: LD_INT 0
34105: PPUSH
34106: PPUSH
34107: PPUSH
34108: PPUSH
34109: PPUSH
34110: PPUSH
34111: PPUSH
34112: PPUSH
34113: PPUSH
34114: PPUSH
34115: PPUSH
// result := false ;
34116: LD_ADDR_VAR 0 6
34120: PUSH
34121: LD_INT 0
34123: ST_TO_ADDR
// if btype = b_depot then
34124: LD_VAR 0 2
34128: PUSH
34129: LD_INT 0
34131: EQUAL
34132: IFFALSE 34144
// begin result := true ;
34134: LD_ADDR_VAR 0 6
34138: PUSH
34139: LD_INT 1
34141: ST_TO_ADDR
// exit ;
34142: GO 34970
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34144: LD_VAR 0 1
34148: NOT
34149: PUSH
34150: LD_VAR 0 1
34154: PPUSH
34155: CALL_OW 266
34159: PUSH
34160: LD_INT 0
34162: PUSH
34163: LD_INT 1
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: IN
34170: NOT
34171: OR
34172: PUSH
34173: LD_VAR 0 2
34177: NOT
34178: OR
34179: PUSH
34180: LD_VAR 0 5
34184: PUSH
34185: LD_INT 0
34187: PUSH
34188: LD_INT 1
34190: PUSH
34191: LD_INT 2
34193: PUSH
34194: LD_INT 3
34196: PUSH
34197: LD_INT 4
34199: PUSH
34200: LD_INT 5
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: LIST
34210: IN
34211: NOT
34212: OR
34213: PUSH
34214: LD_VAR 0 3
34218: PPUSH
34219: LD_VAR 0 4
34223: PPUSH
34224: CALL_OW 488
34228: NOT
34229: OR
34230: IFFALSE 34234
// exit ;
34232: GO 34970
// side := GetSide ( depot ) ;
34234: LD_ADDR_VAR 0 9
34238: PUSH
34239: LD_VAR 0 1
34243: PPUSH
34244: CALL_OW 255
34248: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
34249: LD_VAR 0 9
34253: PPUSH
34254: LD_VAR 0 2
34258: PPUSH
34259: CALL 33727 0 2
34263: NOT
34264: IFFALSE 34268
// exit ;
34266: GO 34970
// pom := GetBase ( depot ) ;
34268: LD_ADDR_VAR 0 10
34272: PUSH
34273: LD_VAR 0 1
34277: PPUSH
34278: CALL_OW 274
34282: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34283: LD_ADDR_VAR 0 11
34287: PUSH
34288: LD_VAR 0 2
34292: PPUSH
34293: LD_VAR 0 1
34297: PPUSH
34298: CALL_OW 248
34302: PPUSH
34303: CALL_OW 450
34307: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34308: LD_VAR 0 10
34312: PPUSH
34313: LD_INT 1
34315: PPUSH
34316: CALL_OW 275
34320: PUSH
34321: LD_VAR 0 11
34325: PUSH
34326: LD_INT 1
34328: ARRAY
34329: GREATEREQUAL
34330: PUSH
34331: LD_VAR 0 10
34335: PPUSH
34336: LD_INT 2
34338: PPUSH
34339: CALL_OW 275
34343: PUSH
34344: LD_VAR 0 11
34348: PUSH
34349: LD_INT 2
34351: ARRAY
34352: GREATEREQUAL
34353: AND
34354: PUSH
34355: LD_VAR 0 10
34359: PPUSH
34360: LD_INT 3
34362: PPUSH
34363: CALL_OW 275
34367: PUSH
34368: LD_VAR 0 11
34372: PUSH
34373: LD_INT 3
34375: ARRAY
34376: GREATEREQUAL
34377: AND
34378: NOT
34379: IFFALSE 34383
// exit ;
34381: GO 34970
// if GetBType ( depot ) = b_depot then
34383: LD_VAR 0 1
34387: PPUSH
34388: CALL_OW 266
34392: PUSH
34393: LD_INT 0
34395: EQUAL
34396: IFFALSE 34408
// dist := 28 else
34398: LD_ADDR_VAR 0 14
34402: PUSH
34403: LD_INT 28
34405: ST_TO_ADDR
34406: GO 34416
// dist := 36 ;
34408: LD_ADDR_VAR 0 14
34412: PUSH
34413: LD_INT 36
34415: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34416: LD_VAR 0 1
34420: PPUSH
34421: LD_VAR 0 3
34425: PPUSH
34426: LD_VAR 0 4
34430: PPUSH
34431: CALL_OW 297
34435: PUSH
34436: LD_VAR 0 14
34440: GREATER
34441: IFFALSE 34445
// exit ;
34443: GO 34970
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34445: LD_ADDR_VAR 0 12
34449: PUSH
34450: LD_VAR 0 2
34454: PPUSH
34455: LD_VAR 0 3
34459: PPUSH
34460: LD_VAR 0 4
34464: PPUSH
34465: LD_VAR 0 5
34469: PPUSH
34470: LD_VAR 0 1
34474: PPUSH
34475: CALL_OW 248
34479: PPUSH
34480: LD_INT 0
34482: PPUSH
34483: CALL 34975 0 6
34487: ST_TO_ADDR
// if not hexes then
34488: LD_VAR 0 12
34492: NOT
34493: IFFALSE 34497
// exit ;
34495: GO 34970
// hex := GetHexInfo ( x , y ) ;
34497: LD_ADDR_VAR 0 15
34501: PUSH
34502: LD_VAR 0 3
34506: PPUSH
34507: LD_VAR 0 4
34511: PPUSH
34512: CALL_OW 546
34516: ST_TO_ADDR
// if hex [ 1 ] then
34517: LD_VAR 0 15
34521: PUSH
34522: LD_INT 1
34524: ARRAY
34525: IFFALSE 34529
// exit ;
34527: GO 34970
// height := hex [ 2 ] ;
34529: LD_ADDR_VAR 0 13
34533: PUSH
34534: LD_VAR 0 15
34538: PUSH
34539: LD_INT 2
34541: ARRAY
34542: ST_TO_ADDR
// for i = 1 to hexes do
34543: LD_ADDR_VAR 0 7
34547: PUSH
34548: DOUBLE
34549: LD_INT 1
34551: DEC
34552: ST_TO_ADDR
34553: LD_VAR 0 12
34557: PUSH
34558: FOR_TO
34559: IFFALSE 34889
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34561: LD_VAR 0 12
34565: PUSH
34566: LD_VAR 0 7
34570: ARRAY
34571: PUSH
34572: LD_INT 1
34574: ARRAY
34575: PPUSH
34576: LD_VAR 0 12
34580: PUSH
34581: LD_VAR 0 7
34585: ARRAY
34586: PUSH
34587: LD_INT 2
34589: ARRAY
34590: PPUSH
34591: CALL_OW 488
34595: NOT
34596: PUSH
34597: LD_VAR 0 12
34601: PUSH
34602: LD_VAR 0 7
34606: ARRAY
34607: PUSH
34608: LD_INT 1
34610: ARRAY
34611: PPUSH
34612: LD_VAR 0 12
34616: PUSH
34617: LD_VAR 0 7
34621: ARRAY
34622: PUSH
34623: LD_INT 2
34625: ARRAY
34626: PPUSH
34627: CALL_OW 428
34631: PUSH
34632: LD_INT 0
34634: GREATER
34635: OR
34636: PUSH
34637: LD_VAR 0 12
34641: PUSH
34642: LD_VAR 0 7
34646: ARRAY
34647: PUSH
34648: LD_INT 1
34650: ARRAY
34651: PPUSH
34652: LD_VAR 0 12
34656: PUSH
34657: LD_VAR 0 7
34661: ARRAY
34662: PUSH
34663: LD_INT 2
34665: ARRAY
34666: PPUSH
34667: CALL_OW 351
34671: OR
34672: IFFALSE 34678
// exit ;
34674: POP
34675: POP
34676: GO 34970
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34678: LD_ADDR_VAR 0 8
34682: PUSH
34683: LD_VAR 0 12
34687: PUSH
34688: LD_VAR 0 7
34692: ARRAY
34693: PUSH
34694: LD_INT 1
34696: ARRAY
34697: PPUSH
34698: LD_VAR 0 12
34702: PUSH
34703: LD_VAR 0 7
34707: ARRAY
34708: PUSH
34709: LD_INT 2
34711: ARRAY
34712: PPUSH
34713: CALL_OW 546
34717: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34718: LD_VAR 0 8
34722: PUSH
34723: LD_INT 1
34725: ARRAY
34726: PUSH
34727: LD_VAR 0 8
34731: PUSH
34732: LD_INT 2
34734: ARRAY
34735: PUSH
34736: LD_VAR 0 13
34740: PUSH
34741: LD_INT 2
34743: PLUS
34744: GREATER
34745: OR
34746: PUSH
34747: LD_VAR 0 8
34751: PUSH
34752: LD_INT 2
34754: ARRAY
34755: PUSH
34756: LD_VAR 0 13
34760: PUSH
34761: LD_INT 2
34763: MINUS
34764: LESS
34765: OR
34766: PUSH
34767: LD_VAR 0 8
34771: PUSH
34772: LD_INT 3
34774: ARRAY
34775: PUSH
34776: LD_INT 0
34778: PUSH
34779: LD_INT 8
34781: PUSH
34782: LD_INT 9
34784: PUSH
34785: LD_INT 10
34787: PUSH
34788: LD_INT 11
34790: PUSH
34791: LD_INT 12
34793: PUSH
34794: LD_INT 13
34796: PUSH
34797: LD_INT 16
34799: PUSH
34800: LD_INT 17
34802: PUSH
34803: LD_INT 18
34805: PUSH
34806: LD_INT 19
34808: PUSH
34809: LD_INT 20
34811: PUSH
34812: LD_INT 21
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: IN
34830: NOT
34831: OR
34832: PUSH
34833: LD_VAR 0 8
34837: PUSH
34838: LD_INT 5
34840: ARRAY
34841: NOT
34842: OR
34843: PUSH
34844: LD_VAR 0 8
34848: PUSH
34849: LD_INT 6
34851: ARRAY
34852: PUSH
34853: LD_INT 1
34855: PUSH
34856: LD_INT 2
34858: PUSH
34859: LD_INT 7
34861: PUSH
34862: LD_INT 9
34864: PUSH
34865: LD_INT 10
34867: PUSH
34868: LD_INT 11
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: LIST
34878: IN
34879: NOT
34880: OR
34881: IFFALSE 34887
// exit ;
34883: POP
34884: POP
34885: GO 34970
// end ;
34887: GO 34558
34889: POP
34890: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34891: LD_VAR 0 9
34895: PPUSH
34896: LD_VAR 0 3
34900: PPUSH
34901: LD_VAR 0 4
34905: PPUSH
34906: LD_INT 20
34908: PPUSH
34909: CALL 26893 0 4
34913: PUSH
34914: LD_INT 4
34916: ARRAY
34917: IFFALSE 34921
// exit ;
34919: GO 34970
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34921: LD_VAR 0 2
34925: PUSH
34926: LD_INT 29
34928: PUSH
34929: LD_INT 30
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: IN
34936: PUSH
34937: LD_VAR 0 3
34941: PPUSH
34942: LD_VAR 0 4
34946: PPUSH
34947: LD_VAR 0 9
34951: PPUSH
34952: CALL_OW 440
34956: NOT
34957: AND
34958: IFFALSE 34962
// exit ;
34960: GO 34970
// result := true ;
34962: LD_ADDR_VAR 0 6
34966: PUSH
34967: LD_INT 1
34969: ST_TO_ADDR
// end ;
34970: LD_VAR 0 6
34974: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
34975: LD_INT 0
34977: PPUSH
34978: PPUSH
34979: PPUSH
34980: PPUSH
34981: PPUSH
34982: PPUSH
34983: PPUSH
34984: PPUSH
34985: PPUSH
34986: PPUSH
34987: PPUSH
34988: PPUSH
34989: PPUSH
34990: PPUSH
34991: PPUSH
34992: PPUSH
34993: PPUSH
34994: PPUSH
34995: PPUSH
34996: PPUSH
34997: PPUSH
34998: PPUSH
34999: PPUSH
35000: PPUSH
35001: PPUSH
35002: PPUSH
35003: PPUSH
35004: PPUSH
35005: PPUSH
35006: PPUSH
35007: PPUSH
35008: PPUSH
35009: PPUSH
35010: PPUSH
35011: PPUSH
35012: PPUSH
35013: PPUSH
35014: PPUSH
35015: PPUSH
35016: PPUSH
35017: PPUSH
35018: PPUSH
35019: PPUSH
35020: PPUSH
35021: PPUSH
35022: PPUSH
35023: PPUSH
35024: PPUSH
35025: PPUSH
35026: PPUSH
35027: PPUSH
35028: PPUSH
35029: PPUSH
35030: PPUSH
35031: PPUSH
35032: PPUSH
35033: PPUSH
35034: PPUSH
// result = [ ] ;
35035: LD_ADDR_VAR 0 7
35039: PUSH
35040: EMPTY
35041: ST_TO_ADDR
// temp_list = [ ] ;
35042: LD_ADDR_VAR 0 9
35046: PUSH
35047: EMPTY
35048: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35049: LD_VAR 0 4
35053: PUSH
35054: LD_INT 0
35056: PUSH
35057: LD_INT 1
35059: PUSH
35060: LD_INT 2
35062: PUSH
35063: LD_INT 3
35065: PUSH
35066: LD_INT 4
35068: PUSH
35069: LD_INT 5
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: LIST
35079: IN
35080: NOT
35081: PUSH
35082: LD_VAR 0 1
35086: PUSH
35087: LD_INT 0
35089: PUSH
35090: LD_INT 1
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: IN
35097: PUSH
35098: LD_VAR 0 5
35102: PUSH
35103: LD_INT 1
35105: PUSH
35106: LD_INT 2
35108: PUSH
35109: LD_INT 3
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: LIST
35116: IN
35117: NOT
35118: AND
35119: OR
35120: IFFALSE 35124
// exit ;
35122: GO 53515
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35124: LD_VAR 0 1
35128: PUSH
35129: LD_INT 6
35131: PUSH
35132: LD_INT 7
35134: PUSH
35135: LD_INT 8
35137: PUSH
35138: LD_INT 13
35140: PUSH
35141: LD_INT 12
35143: PUSH
35144: LD_INT 15
35146: PUSH
35147: LD_INT 11
35149: PUSH
35150: LD_INT 14
35152: PUSH
35153: LD_INT 10
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: LIST
35166: IN
35167: IFFALSE 35177
// btype = b_lab ;
35169: LD_ADDR_VAR 0 1
35173: PUSH
35174: LD_INT 6
35176: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35177: LD_VAR 0 6
35181: PUSH
35182: LD_INT 0
35184: PUSH
35185: LD_INT 1
35187: PUSH
35188: LD_INT 2
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: LIST
35195: IN
35196: NOT
35197: PUSH
35198: LD_VAR 0 1
35202: PUSH
35203: LD_INT 0
35205: PUSH
35206: LD_INT 1
35208: PUSH
35209: LD_INT 2
35211: PUSH
35212: LD_INT 3
35214: PUSH
35215: LD_INT 6
35217: PUSH
35218: LD_INT 36
35220: PUSH
35221: LD_INT 4
35223: PUSH
35224: LD_INT 5
35226: PUSH
35227: LD_INT 31
35229: PUSH
35230: LD_INT 32
35232: PUSH
35233: LD_INT 33
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: LIST
35240: LIST
35241: LIST
35242: LIST
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: IN
35249: NOT
35250: PUSH
35251: LD_VAR 0 6
35255: PUSH
35256: LD_INT 1
35258: EQUAL
35259: AND
35260: OR
35261: PUSH
35262: LD_VAR 0 1
35266: PUSH
35267: LD_INT 2
35269: PUSH
35270: LD_INT 3
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: IN
35277: NOT
35278: PUSH
35279: LD_VAR 0 6
35283: PUSH
35284: LD_INT 2
35286: EQUAL
35287: AND
35288: OR
35289: IFFALSE 35299
// mode = 0 ;
35291: LD_ADDR_VAR 0 6
35295: PUSH
35296: LD_INT 0
35298: ST_TO_ADDR
// case mode of 0 :
35299: LD_VAR 0 6
35303: PUSH
35304: LD_INT 0
35306: DOUBLE
35307: EQUAL
35308: IFTRUE 35312
35310: GO 46765
35312: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35313: LD_ADDR_VAR 0 11
35317: PUSH
35318: LD_INT 0
35320: PUSH
35321: LD_INT 0
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: LD_INT 0
35330: PUSH
35331: LD_INT 1
35333: NEG
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: LD_INT 1
35341: PUSH
35342: LD_INT 0
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: LD_INT 1
35351: PUSH
35352: LD_INT 1
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: PUSH
35359: LD_INT 0
35361: PUSH
35362: LD_INT 1
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: LD_INT 1
35371: NEG
35372: PUSH
35373: LD_INT 0
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: PUSH
35380: LD_INT 1
35382: NEG
35383: PUSH
35384: LD_INT 1
35386: NEG
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: LD_INT 1
35394: NEG
35395: PUSH
35396: LD_INT 2
35398: NEG
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: LD_INT 0
35406: PUSH
35407: LD_INT 2
35409: NEG
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PUSH
35415: LD_INT 1
35417: PUSH
35418: LD_INT 1
35420: NEG
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: PUSH
35426: LD_INT 1
35428: PUSH
35429: LD_INT 2
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: LD_INT 0
35438: PUSH
35439: LD_INT 2
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 1
35448: NEG
35449: PUSH
35450: LD_INT 1
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: LD_INT 1
35459: PUSH
35460: LD_INT 3
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: PUSH
35467: LD_INT 0
35469: PUSH
35470: LD_INT 3
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: PUSH
35477: LD_INT 1
35479: NEG
35480: PUSH
35481: LD_INT 2
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: LIST
35492: LIST
35493: LIST
35494: LIST
35495: LIST
35496: LIST
35497: LIST
35498: LIST
35499: LIST
35500: LIST
35501: LIST
35502: LIST
35503: LIST
35504: LIST
35505: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35506: LD_ADDR_VAR 0 12
35510: PUSH
35511: LD_INT 0
35513: PUSH
35514: LD_INT 0
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: PUSH
35521: LD_INT 0
35523: PUSH
35524: LD_INT 1
35526: NEG
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 1
35534: PUSH
35535: LD_INT 0
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: LD_INT 1
35544: PUSH
35545: LD_INT 1
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: LD_INT 0
35554: PUSH
35555: LD_INT 1
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: LD_INT 1
35564: NEG
35565: PUSH
35566: LD_INT 0
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 1
35575: NEG
35576: PUSH
35577: LD_INT 1
35579: NEG
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: PUSH
35585: LD_INT 1
35587: PUSH
35588: LD_INT 1
35590: NEG
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PUSH
35596: LD_INT 2
35598: PUSH
35599: LD_INT 0
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PUSH
35606: LD_INT 2
35608: PUSH
35609: LD_INT 1
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: LD_INT 1
35618: NEG
35619: PUSH
35620: LD_INT 1
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 2
35629: NEG
35630: PUSH
35631: LD_INT 0
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: PUSH
35638: LD_INT 2
35640: NEG
35641: PUSH
35642: LD_INT 1
35644: NEG
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 2
35652: NEG
35653: PUSH
35654: LD_INT 1
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PUSH
35661: LD_INT 3
35663: NEG
35664: PUSH
35665: LD_INT 0
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: LD_INT 3
35674: NEG
35675: PUSH
35676: LD_INT 1
35678: NEG
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35702: LD_ADDR_VAR 0 13
35706: PUSH
35707: LD_INT 0
35709: PUSH
35710: LD_INT 0
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: LD_INT 0
35719: PUSH
35720: LD_INT 1
35722: NEG
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: PUSH
35728: LD_INT 1
35730: PUSH
35731: LD_INT 0
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: LD_INT 1
35740: PUSH
35741: LD_INT 1
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: PUSH
35748: LD_INT 0
35750: PUSH
35751: LD_INT 1
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PUSH
35758: LD_INT 1
35760: NEG
35761: PUSH
35762: LD_INT 0
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PUSH
35769: LD_INT 1
35771: NEG
35772: PUSH
35773: LD_INT 1
35775: NEG
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: PUSH
35781: LD_INT 1
35783: NEG
35784: PUSH
35785: LD_INT 2
35787: NEG
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: PUSH
35793: LD_INT 2
35795: PUSH
35796: LD_INT 1
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: PUSH
35803: LD_INT 2
35805: PUSH
35806: LD_INT 2
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: PUSH
35813: LD_INT 1
35815: PUSH
35816: LD_INT 2
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: LD_INT 2
35825: NEG
35826: PUSH
35827: LD_INT 1
35829: NEG
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PUSH
35835: LD_INT 2
35837: NEG
35838: PUSH
35839: LD_INT 2
35841: NEG
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 2
35849: NEG
35850: PUSH
35851: LD_INT 3
35853: NEG
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: LD_INT 3
35861: NEG
35862: PUSH
35863: LD_INT 2
35865: NEG
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: PUSH
35871: LD_INT 3
35873: NEG
35874: PUSH
35875: LD_INT 3
35877: NEG
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: LIST
35887: LIST
35888: LIST
35889: LIST
35890: LIST
35891: LIST
35892: LIST
35893: LIST
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: LIST
35900: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35901: LD_ADDR_VAR 0 14
35905: PUSH
35906: LD_INT 0
35908: PUSH
35909: LD_INT 0
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 0
35918: PUSH
35919: LD_INT 1
35921: NEG
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: LD_INT 1
35929: PUSH
35930: LD_INT 0
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 1
35939: PUSH
35940: LD_INT 1
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 0
35949: PUSH
35950: LD_INT 1
35952: PUSH
35953: EMPTY
35954: LIST
35955: LIST
35956: PUSH
35957: LD_INT 1
35959: NEG
35960: PUSH
35961: LD_INT 0
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 1
35970: NEG
35971: PUSH
35972: LD_INT 1
35974: NEG
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: PUSH
35980: LD_INT 1
35982: NEG
35983: PUSH
35984: LD_INT 2
35986: NEG
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PUSH
35992: LD_INT 0
35994: PUSH
35995: LD_INT 2
35997: NEG
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 1
36005: PUSH
36006: LD_INT 1
36008: NEG
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: PUSH
36014: LD_INT 1
36016: PUSH
36017: LD_INT 2
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: PUSH
36024: LD_INT 0
36026: PUSH
36027: LD_INT 2
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PUSH
36034: LD_INT 1
36036: NEG
36037: PUSH
36038: LD_INT 1
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 1
36047: NEG
36048: PUSH
36049: LD_INT 3
36051: NEG
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: LD_INT 0
36059: PUSH
36060: LD_INT 3
36062: NEG
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: PUSH
36068: LD_INT 1
36070: PUSH
36071: LD_INT 2
36073: NEG
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: LIST
36091: LIST
36092: LIST
36093: LIST
36094: LIST
36095: LIST
36096: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36097: LD_ADDR_VAR 0 15
36101: PUSH
36102: LD_INT 0
36104: PUSH
36105: LD_INT 0
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: LD_INT 0
36114: PUSH
36115: LD_INT 1
36117: NEG
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: PUSH
36123: LD_INT 1
36125: PUSH
36126: LD_INT 0
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: LD_INT 1
36135: PUSH
36136: LD_INT 1
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: PUSH
36143: LD_INT 0
36145: PUSH
36146: LD_INT 1
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: PUSH
36153: LD_INT 1
36155: NEG
36156: PUSH
36157: LD_INT 0
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PUSH
36164: LD_INT 1
36166: NEG
36167: PUSH
36168: LD_INT 1
36170: NEG
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: PUSH
36176: LD_INT 1
36178: PUSH
36179: LD_INT 1
36181: NEG
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: PUSH
36187: LD_INT 2
36189: PUSH
36190: LD_INT 0
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: PUSH
36197: LD_INT 2
36199: PUSH
36200: LD_INT 1
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: PUSH
36207: LD_INT 1
36209: NEG
36210: PUSH
36211: LD_INT 1
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: LD_INT 2
36220: NEG
36221: PUSH
36222: LD_INT 0
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: PUSH
36229: LD_INT 2
36231: NEG
36232: PUSH
36233: LD_INT 1
36235: NEG
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: PUSH
36241: LD_INT 2
36243: PUSH
36244: LD_INT 1
36246: NEG
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: PUSH
36252: LD_INT 3
36254: PUSH
36255: LD_INT 0
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: PUSH
36262: LD_INT 3
36264: PUSH
36265: LD_INT 1
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: LIST
36276: LIST
36277: LIST
36278: LIST
36279: LIST
36280: LIST
36281: LIST
36282: LIST
36283: LIST
36284: LIST
36285: LIST
36286: LIST
36287: LIST
36288: LIST
36289: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36290: LD_ADDR_VAR 0 16
36294: PUSH
36295: LD_INT 0
36297: PUSH
36298: LD_INT 0
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: LD_INT 0
36307: PUSH
36308: LD_INT 1
36310: NEG
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: PUSH
36316: LD_INT 1
36318: PUSH
36319: LD_INT 0
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: PUSH
36326: LD_INT 1
36328: PUSH
36329: LD_INT 1
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 0
36338: PUSH
36339: LD_INT 1
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PUSH
36346: LD_INT 1
36348: NEG
36349: PUSH
36350: LD_INT 0
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 1
36359: NEG
36360: PUSH
36361: LD_INT 1
36363: NEG
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: PUSH
36369: LD_INT 1
36371: NEG
36372: PUSH
36373: LD_INT 2
36375: NEG
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: PUSH
36381: LD_INT 2
36383: PUSH
36384: LD_INT 1
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PUSH
36391: LD_INT 2
36393: PUSH
36394: LD_INT 2
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: LD_INT 1
36403: PUSH
36404: LD_INT 2
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 2
36413: NEG
36414: PUSH
36415: LD_INT 1
36417: NEG
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 2
36425: NEG
36426: PUSH
36427: LD_INT 2
36429: NEG
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: PUSH
36435: LD_INT 3
36437: PUSH
36438: LD_INT 2
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: PUSH
36445: LD_INT 3
36447: PUSH
36448: LD_INT 3
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: PUSH
36455: LD_INT 2
36457: PUSH
36458: LD_INT 3
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: LIST
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: LIST
36481: LIST
36482: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36483: LD_ADDR_VAR 0 17
36487: PUSH
36488: LD_INT 0
36490: PUSH
36491: LD_INT 0
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: PUSH
36498: LD_INT 0
36500: PUSH
36501: LD_INT 1
36503: NEG
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: LD_INT 1
36511: PUSH
36512: LD_INT 0
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: LD_INT 1
36521: PUSH
36522: LD_INT 1
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 0
36531: PUSH
36532: LD_INT 1
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 1
36541: NEG
36542: PUSH
36543: LD_INT 0
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 1
36552: NEG
36553: PUSH
36554: LD_INT 1
36556: NEG
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: LD_INT 1
36564: NEG
36565: PUSH
36566: LD_INT 2
36568: NEG
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: PUSH
36574: LD_INT 0
36576: PUSH
36577: LD_INT 2
36579: NEG
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: PUSH
36585: LD_INT 1
36587: PUSH
36588: LD_INT 1
36590: NEG
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: PUSH
36596: LD_INT 2
36598: PUSH
36599: LD_INT 0
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: PUSH
36606: LD_INT 2
36608: PUSH
36609: LD_INT 1
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 2
36618: PUSH
36619: LD_INT 2
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 1
36628: PUSH
36629: LD_INT 2
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 0
36638: PUSH
36639: LD_INT 2
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 1
36648: NEG
36649: PUSH
36650: LD_INT 1
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: PUSH
36657: LD_INT 2
36659: NEG
36660: PUSH
36661: LD_INT 0
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PUSH
36668: LD_INT 2
36670: NEG
36671: PUSH
36672: LD_INT 1
36674: NEG
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: LD_INT 2
36682: NEG
36683: PUSH
36684: LD_INT 2
36686: NEG
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36713: LD_ADDR_VAR 0 18
36717: PUSH
36718: LD_INT 0
36720: PUSH
36721: LD_INT 0
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PUSH
36728: LD_INT 0
36730: PUSH
36731: LD_INT 1
36733: NEG
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: LD_INT 1
36741: PUSH
36742: LD_INT 0
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: PUSH
36749: LD_INT 1
36751: PUSH
36752: LD_INT 1
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: LD_INT 0
36761: PUSH
36762: LD_INT 1
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PUSH
36769: LD_INT 1
36771: NEG
36772: PUSH
36773: LD_INT 0
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_INT 1
36782: NEG
36783: PUSH
36784: LD_INT 1
36786: NEG
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 1
36794: NEG
36795: PUSH
36796: LD_INT 2
36798: NEG
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: PUSH
36804: LD_INT 0
36806: PUSH
36807: LD_INT 2
36809: NEG
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: PUSH
36815: LD_INT 1
36817: PUSH
36818: LD_INT 1
36820: NEG
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: LD_INT 2
36828: PUSH
36829: LD_INT 0
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: LD_INT 2
36838: PUSH
36839: LD_INT 1
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: LD_INT 2
36848: PUSH
36849: LD_INT 2
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: PUSH
36856: LD_INT 1
36858: PUSH
36859: LD_INT 2
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: LD_INT 0
36868: PUSH
36869: LD_INT 2
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: PUSH
36876: LD_INT 1
36878: NEG
36879: PUSH
36880: LD_INT 1
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: PUSH
36887: LD_INT 2
36889: NEG
36890: PUSH
36891: LD_INT 0
36893: PUSH
36894: EMPTY
36895: LIST
36896: LIST
36897: PUSH
36898: LD_INT 2
36900: NEG
36901: PUSH
36902: LD_INT 1
36904: NEG
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PUSH
36910: LD_INT 2
36912: NEG
36913: PUSH
36914: LD_INT 2
36916: NEG
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: LIST
36929: LIST
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: LIST
36935: LIST
36936: LIST
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36943: LD_ADDR_VAR 0 19
36947: PUSH
36948: LD_INT 0
36950: PUSH
36951: LD_INT 0
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: LD_INT 0
36960: PUSH
36961: LD_INT 1
36963: NEG
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: PUSH
36969: LD_INT 1
36971: PUSH
36972: LD_INT 0
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PUSH
36979: LD_INT 1
36981: PUSH
36982: LD_INT 1
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: LD_INT 0
36991: PUSH
36992: LD_INT 1
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PUSH
36999: LD_INT 1
37001: NEG
37002: PUSH
37003: LD_INT 0
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: LD_INT 1
37012: NEG
37013: PUSH
37014: LD_INT 1
37016: NEG
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: PUSH
37022: LD_INT 1
37024: NEG
37025: PUSH
37026: LD_INT 2
37028: NEG
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: LD_INT 0
37036: PUSH
37037: LD_INT 2
37039: NEG
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 1
37047: PUSH
37048: LD_INT 1
37050: NEG
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: PUSH
37056: LD_INT 2
37058: PUSH
37059: LD_INT 0
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: PUSH
37066: LD_INT 2
37068: PUSH
37069: LD_INT 1
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PUSH
37076: LD_INT 2
37078: PUSH
37079: LD_INT 2
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: LD_INT 1
37088: PUSH
37089: LD_INT 2
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: PUSH
37096: LD_INT 0
37098: PUSH
37099: LD_INT 2
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: PUSH
37106: LD_INT 1
37108: NEG
37109: PUSH
37110: LD_INT 1
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: LD_INT 2
37119: NEG
37120: PUSH
37121: LD_INT 0
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: PUSH
37128: LD_INT 2
37130: NEG
37131: PUSH
37132: LD_INT 1
37134: NEG
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PUSH
37140: LD_INT 2
37142: NEG
37143: PUSH
37144: LD_INT 2
37146: NEG
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: LIST
37156: LIST
37157: LIST
37158: LIST
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37173: LD_ADDR_VAR 0 20
37177: PUSH
37178: LD_INT 0
37180: PUSH
37181: LD_INT 0
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 0
37190: PUSH
37191: LD_INT 1
37193: NEG
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: LD_INT 1
37201: PUSH
37202: LD_INT 0
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: PUSH
37209: LD_INT 1
37211: PUSH
37212: LD_INT 1
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PUSH
37219: LD_INT 0
37221: PUSH
37222: LD_INT 1
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: PUSH
37229: LD_INT 1
37231: NEG
37232: PUSH
37233: LD_INT 0
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 1
37242: NEG
37243: PUSH
37244: LD_INT 1
37246: NEG
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 1
37254: NEG
37255: PUSH
37256: LD_INT 2
37258: NEG
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 0
37266: PUSH
37267: LD_INT 2
37269: NEG
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 1
37277: PUSH
37278: LD_INT 1
37280: NEG
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PUSH
37286: LD_INT 2
37288: PUSH
37289: LD_INT 0
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: PUSH
37296: LD_INT 2
37298: PUSH
37299: LD_INT 1
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PUSH
37306: LD_INT 2
37308: PUSH
37309: LD_INT 2
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PUSH
37316: LD_INT 1
37318: PUSH
37319: LD_INT 2
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: PUSH
37326: LD_INT 0
37328: PUSH
37329: LD_INT 2
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PUSH
37336: LD_INT 1
37338: NEG
37339: PUSH
37340: LD_INT 1
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: PUSH
37347: LD_INT 2
37349: NEG
37350: PUSH
37351: LD_INT 0
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: PUSH
37358: LD_INT 2
37360: NEG
37361: PUSH
37362: LD_INT 1
37364: NEG
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: LD_INT 2
37372: NEG
37373: PUSH
37374: LD_INT 2
37376: NEG
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37403: LD_ADDR_VAR 0 21
37407: PUSH
37408: LD_INT 0
37410: PUSH
37411: LD_INT 0
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 0
37420: PUSH
37421: LD_INT 1
37423: NEG
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: PUSH
37429: LD_INT 1
37431: PUSH
37432: LD_INT 0
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: LD_INT 1
37441: PUSH
37442: LD_INT 1
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PUSH
37449: LD_INT 0
37451: PUSH
37452: LD_INT 1
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: PUSH
37459: LD_INT 1
37461: NEG
37462: PUSH
37463: LD_INT 0
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PUSH
37470: LD_INT 1
37472: NEG
37473: PUSH
37474: LD_INT 1
37476: NEG
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: LD_INT 1
37484: NEG
37485: PUSH
37486: LD_INT 2
37488: NEG
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: PUSH
37494: LD_INT 0
37496: PUSH
37497: LD_INT 2
37499: NEG
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: PUSH
37505: LD_INT 1
37507: PUSH
37508: LD_INT 1
37510: NEG
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: LD_INT 2
37518: PUSH
37519: LD_INT 0
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: PUSH
37526: LD_INT 2
37528: PUSH
37529: LD_INT 1
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: PUSH
37536: LD_INT 2
37538: PUSH
37539: LD_INT 2
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: PUSH
37546: LD_INT 1
37548: PUSH
37549: LD_INT 2
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: PUSH
37556: LD_INT 0
37558: PUSH
37559: LD_INT 2
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PUSH
37566: LD_INT 1
37568: NEG
37569: PUSH
37570: LD_INT 1
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: LD_INT 2
37579: NEG
37580: PUSH
37581: LD_INT 0
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: LD_INT 2
37590: NEG
37591: PUSH
37592: LD_INT 1
37594: NEG
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: LD_INT 2
37602: NEG
37603: PUSH
37604: LD_INT 2
37606: NEG
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: LIST
37631: LIST
37632: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37633: LD_ADDR_VAR 0 22
37637: PUSH
37638: LD_INT 0
37640: PUSH
37641: LD_INT 0
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: LD_INT 0
37650: PUSH
37651: LD_INT 1
37653: NEG
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: LD_INT 1
37661: PUSH
37662: LD_INT 0
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: LD_INT 1
37671: PUSH
37672: LD_INT 1
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PUSH
37679: LD_INT 0
37681: PUSH
37682: LD_INT 1
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: PUSH
37689: LD_INT 1
37691: NEG
37692: PUSH
37693: LD_INT 0
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: PUSH
37700: LD_INT 1
37702: NEG
37703: PUSH
37704: LD_INT 1
37706: NEG
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 1
37714: NEG
37715: PUSH
37716: LD_INT 2
37718: NEG
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 0
37726: PUSH
37727: LD_INT 2
37729: NEG
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PUSH
37735: LD_INT 1
37737: PUSH
37738: LD_INT 1
37740: NEG
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: PUSH
37746: LD_INT 2
37748: PUSH
37749: LD_INT 0
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: PUSH
37756: LD_INT 2
37758: PUSH
37759: LD_INT 1
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: PUSH
37766: LD_INT 2
37768: PUSH
37769: LD_INT 2
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: LD_INT 1
37778: PUSH
37779: LD_INT 2
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 0
37788: PUSH
37789: LD_INT 2
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 1
37798: NEG
37799: PUSH
37800: LD_INT 1
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PUSH
37807: LD_INT 2
37809: NEG
37810: PUSH
37811: LD_INT 0
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: PUSH
37818: LD_INT 2
37820: NEG
37821: PUSH
37822: LD_INT 1
37824: NEG
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 2
37832: NEG
37833: PUSH
37834: LD_INT 2
37836: NEG
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37863: LD_ADDR_VAR 0 23
37867: PUSH
37868: LD_INT 0
37870: PUSH
37871: LD_INT 0
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: PUSH
37878: LD_INT 0
37880: PUSH
37881: LD_INT 1
37883: NEG
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: LD_INT 1
37891: PUSH
37892: LD_INT 0
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 1
37901: PUSH
37902: LD_INT 1
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PUSH
37909: LD_INT 0
37911: PUSH
37912: LD_INT 1
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: PUSH
37919: LD_INT 1
37921: NEG
37922: PUSH
37923: LD_INT 0
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: LD_INT 1
37932: NEG
37933: PUSH
37934: LD_INT 1
37936: NEG
37937: PUSH
37938: EMPTY
37939: LIST
37940: LIST
37941: PUSH
37942: LD_INT 1
37944: NEG
37945: PUSH
37946: LD_INT 2
37948: NEG
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 0
37956: PUSH
37957: LD_INT 2
37959: NEG
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 1
37967: PUSH
37968: LD_INT 1
37970: NEG
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: PUSH
37976: LD_INT 2
37978: PUSH
37979: LD_INT 0
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PUSH
37986: LD_INT 2
37988: PUSH
37989: LD_INT 1
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: LD_INT 2
37998: PUSH
37999: LD_INT 2
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 1
38008: PUSH
38009: LD_INT 2
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 0
38018: PUSH
38019: LD_INT 2
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: LD_INT 1
38028: NEG
38029: PUSH
38030: LD_INT 1
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: LD_INT 2
38039: NEG
38040: PUSH
38041: LD_INT 0
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: LD_INT 2
38050: NEG
38051: PUSH
38052: LD_INT 1
38054: NEG
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: LD_INT 2
38062: NEG
38063: PUSH
38064: LD_INT 2
38066: NEG
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 2
38074: NEG
38075: PUSH
38076: LD_INT 3
38078: NEG
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PUSH
38084: LD_INT 1
38086: NEG
38087: PUSH
38088: LD_INT 3
38090: NEG
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: PUSH
38096: LD_INT 1
38098: PUSH
38099: LD_INT 2
38101: NEG
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: LD_INT 2
38109: PUSH
38110: LD_INT 1
38112: NEG
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38143: LD_ADDR_VAR 0 24
38147: PUSH
38148: LD_INT 0
38150: PUSH
38151: LD_INT 0
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 0
38160: PUSH
38161: LD_INT 1
38163: NEG
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 1
38171: PUSH
38172: LD_INT 0
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 1
38181: PUSH
38182: LD_INT 1
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 0
38191: PUSH
38192: LD_INT 1
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: PUSH
38199: LD_INT 1
38201: NEG
38202: PUSH
38203: LD_INT 0
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 1
38212: NEG
38213: PUSH
38214: LD_INT 1
38216: NEG
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 1
38224: NEG
38225: PUSH
38226: LD_INT 2
38228: NEG
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_INT 0
38236: PUSH
38237: LD_INT 2
38239: NEG
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: LD_INT 1
38247: PUSH
38248: LD_INT 1
38250: NEG
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 2
38258: PUSH
38259: LD_INT 0
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 2
38268: PUSH
38269: LD_INT 1
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: LD_INT 2
38278: PUSH
38279: LD_INT 2
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: LD_INT 1
38288: PUSH
38289: LD_INT 2
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: LD_INT 0
38298: PUSH
38299: LD_INT 2
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 1
38308: NEG
38309: PUSH
38310: LD_INT 1
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 2
38319: NEG
38320: PUSH
38321: LD_INT 0
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 2
38330: NEG
38331: PUSH
38332: LD_INT 1
38334: NEG
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 2
38342: NEG
38343: PUSH
38344: LD_INT 2
38346: NEG
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 1
38354: PUSH
38355: LD_INT 2
38357: NEG
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 2
38365: PUSH
38366: LD_INT 1
38368: NEG
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 3
38376: PUSH
38377: LD_INT 1
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 3
38386: PUSH
38387: LD_INT 2
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38419: LD_ADDR_VAR 0 25
38423: PUSH
38424: LD_INT 0
38426: PUSH
38427: LD_INT 0
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: PUSH
38434: LD_INT 0
38436: PUSH
38437: LD_INT 1
38439: NEG
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: PUSH
38445: LD_INT 1
38447: PUSH
38448: LD_INT 0
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 1
38457: PUSH
38458: LD_INT 1
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PUSH
38465: LD_INT 0
38467: PUSH
38468: LD_INT 1
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 1
38477: NEG
38478: PUSH
38479: LD_INT 0
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: LD_INT 1
38488: NEG
38489: PUSH
38490: LD_INT 1
38492: NEG
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: LD_INT 1
38500: NEG
38501: PUSH
38502: LD_INT 2
38504: NEG
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 0
38512: PUSH
38513: LD_INT 2
38515: NEG
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: LD_INT 1
38523: PUSH
38524: LD_INT 1
38526: NEG
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: PUSH
38532: LD_INT 2
38534: PUSH
38535: LD_INT 0
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 2
38544: PUSH
38545: LD_INT 1
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PUSH
38552: LD_INT 2
38554: PUSH
38555: LD_INT 2
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: PUSH
38562: LD_INT 1
38564: PUSH
38565: LD_INT 2
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 0
38574: PUSH
38575: LD_INT 2
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: PUSH
38582: LD_INT 1
38584: NEG
38585: PUSH
38586: LD_INT 1
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: LD_INT 2
38595: NEG
38596: PUSH
38597: LD_INT 0
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 2
38606: NEG
38607: PUSH
38608: LD_INT 1
38610: NEG
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: PUSH
38616: LD_INT 2
38618: NEG
38619: PUSH
38620: LD_INT 2
38622: NEG
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PUSH
38628: LD_INT 3
38630: PUSH
38631: LD_INT 1
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 3
38640: PUSH
38641: LD_INT 2
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PUSH
38648: LD_INT 2
38650: PUSH
38651: LD_INT 3
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: PUSH
38658: LD_INT 1
38660: PUSH
38661: LD_INT 3
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38693: LD_ADDR_VAR 0 26
38697: PUSH
38698: LD_INT 0
38700: PUSH
38701: LD_INT 0
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 0
38710: PUSH
38711: LD_INT 1
38713: NEG
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: LD_INT 1
38721: PUSH
38722: LD_INT 0
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 1
38731: PUSH
38732: LD_INT 1
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 0
38741: PUSH
38742: LD_INT 1
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 1
38751: NEG
38752: PUSH
38753: LD_INT 0
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: LD_INT 1
38762: NEG
38763: PUSH
38764: LD_INT 1
38766: NEG
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PUSH
38772: LD_INT 1
38774: NEG
38775: PUSH
38776: LD_INT 2
38778: NEG
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 0
38786: PUSH
38787: LD_INT 2
38789: NEG
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: LD_INT 1
38797: PUSH
38798: LD_INT 1
38800: NEG
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 2
38808: PUSH
38809: LD_INT 0
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 2
38818: PUSH
38819: LD_INT 1
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: LD_INT 2
38828: PUSH
38829: LD_INT 2
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 1
38838: PUSH
38839: LD_INT 2
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 0
38848: PUSH
38849: LD_INT 2
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 1
38858: NEG
38859: PUSH
38860: LD_INT 1
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 2
38869: NEG
38870: PUSH
38871: LD_INT 0
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: LD_INT 2
38880: NEG
38881: PUSH
38882: LD_INT 1
38884: NEG
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: LD_INT 2
38892: NEG
38893: PUSH
38894: LD_INT 2
38896: NEG
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 2
38904: PUSH
38905: LD_INT 3
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: PUSH
38912: LD_INT 1
38914: PUSH
38915: LD_INT 3
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 1
38924: NEG
38925: PUSH
38926: LD_INT 2
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 2
38935: NEG
38936: PUSH
38937: LD_INT 1
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38969: LD_ADDR_VAR 0 27
38973: PUSH
38974: LD_INT 0
38976: PUSH
38977: LD_INT 0
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 0
38986: PUSH
38987: LD_INT 1
38989: NEG
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: PUSH
38995: LD_INT 1
38997: PUSH
38998: LD_INT 0
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 1
39007: PUSH
39008: LD_INT 1
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 0
39017: PUSH
39018: LD_INT 1
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: PUSH
39025: LD_INT 1
39027: NEG
39028: PUSH
39029: LD_INT 0
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 1
39038: NEG
39039: PUSH
39040: LD_INT 1
39042: NEG
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 1
39050: NEG
39051: PUSH
39052: LD_INT 2
39054: NEG
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 0
39062: PUSH
39063: LD_INT 2
39065: NEG
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: PUSH
39071: LD_INT 1
39073: PUSH
39074: LD_INT 1
39076: NEG
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 2
39084: PUSH
39085: LD_INT 0
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 2
39094: PUSH
39095: LD_INT 1
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 2
39104: PUSH
39105: LD_INT 2
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 1
39114: PUSH
39115: LD_INT 2
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 0
39124: PUSH
39125: LD_INT 2
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 1
39134: NEG
39135: PUSH
39136: LD_INT 1
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 2
39145: NEG
39146: PUSH
39147: LD_INT 0
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 2
39156: NEG
39157: PUSH
39158: LD_INT 1
39160: NEG
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 2
39168: NEG
39169: PUSH
39170: LD_INT 2
39172: NEG
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: LD_INT 1
39180: NEG
39181: PUSH
39182: LD_INT 2
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 2
39191: NEG
39192: PUSH
39193: LD_INT 1
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 3
39202: NEG
39203: PUSH
39204: LD_INT 1
39206: NEG
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 3
39214: NEG
39215: PUSH
39216: LD_INT 2
39218: NEG
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39249: LD_ADDR_VAR 0 28
39253: PUSH
39254: LD_INT 0
39256: PUSH
39257: LD_INT 0
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: LD_INT 0
39266: PUSH
39267: LD_INT 1
39269: NEG
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 1
39277: PUSH
39278: LD_INT 0
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 1
39287: PUSH
39288: LD_INT 1
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 0
39297: PUSH
39298: LD_INT 1
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 1
39307: NEG
39308: PUSH
39309: LD_INT 0
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: LD_INT 1
39318: NEG
39319: PUSH
39320: LD_INT 1
39322: NEG
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: PUSH
39328: LD_INT 1
39330: NEG
39331: PUSH
39332: LD_INT 2
39334: NEG
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 0
39342: PUSH
39343: LD_INT 2
39345: NEG
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: LD_INT 1
39353: PUSH
39354: LD_INT 1
39356: NEG
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 2
39364: PUSH
39365: LD_INT 0
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 2
39374: PUSH
39375: LD_INT 1
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 2
39384: PUSH
39385: LD_INT 2
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 1
39394: PUSH
39395: LD_INT 2
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 0
39404: PUSH
39405: LD_INT 2
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 1
39414: NEG
39415: PUSH
39416: LD_INT 1
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PUSH
39423: LD_INT 2
39425: NEG
39426: PUSH
39427: LD_INT 0
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 2
39436: NEG
39437: PUSH
39438: LD_INT 1
39440: NEG
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PUSH
39446: LD_INT 2
39448: NEG
39449: PUSH
39450: LD_INT 2
39452: NEG
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: LD_INT 2
39460: NEG
39461: PUSH
39462: LD_INT 3
39464: NEG
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: PUSH
39470: LD_INT 1
39472: NEG
39473: PUSH
39474: LD_INT 3
39476: NEG
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 3
39484: NEG
39485: PUSH
39486: LD_INT 1
39488: NEG
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: LD_INT 3
39496: NEG
39497: PUSH
39498: LD_INT 2
39500: NEG
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39531: LD_ADDR_VAR 0 29
39535: PUSH
39536: LD_INT 0
39538: PUSH
39539: LD_INT 0
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 0
39548: PUSH
39549: LD_INT 1
39551: NEG
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: PUSH
39557: LD_INT 1
39559: PUSH
39560: LD_INT 0
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 1
39569: PUSH
39570: LD_INT 1
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: LD_INT 0
39579: PUSH
39580: LD_INT 1
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 1
39589: NEG
39590: PUSH
39591: LD_INT 0
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PUSH
39598: LD_INT 1
39600: NEG
39601: PUSH
39602: LD_INT 1
39604: NEG
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: LD_INT 1
39612: NEG
39613: PUSH
39614: LD_INT 2
39616: NEG
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 0
39624: PUSH
39625: LD_INT 2
39627: NEG
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: LD_INT 1
39635: PUSH
39636: LD_INT 1
39638: NEG
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: LD_INT 2
39646: PUSH
39647: LD_INT 0
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: PUSH
39654: LD_INT 2
39656: PUSH
39657: LD_INT 1
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: PUSH
39664: LD_INT 1
39666: PUSH
39667: LD_INT 2
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PUSH
39674: LD_INT 0
39676: PUSH
39677: LD_INT 2
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 1
39686: NEG
39687: PUSH
39688: LD_INT 1
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 2
39697: NEG
39698: PUSH
39699: LD_INT 1
39701: NEG
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 2
39709: NEG
39710: PUSH
39711: LD_INT 2
39713: NEG
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 2
39721: NEG
39722: PUSH
39723: LD_INT 3
39725: NEG
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: LD_INT 2
39733: PUSH
39734: LD_INT 1
39736: NEG
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PUSH
39742: LD_INT 3
39744: PUSH
39745: LD_INT 1
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 1
39754: PUSH
39755: LD_INT 3
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 1
39764: NEG
39765: PUSH
39766: LD_INT 2
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 3
39775: NEG
39776: PUSH
39777: LD_INT 2
39779: NEG
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39810: LD_ADDR_VAR 0 30
39814: PUSH
39815: LD_INT 0
39817: PUSH
39818: LD_INT 0
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 0
39827: PUSH
39828: LD_INT 1
39830: NEG
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 1
39838: PUSH
39839: LD_INT 0
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 1
39848: PUSH
39849: LD_INT 1
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: LD_INT 0
39858: PUSH
39859: LD_INT 1
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PUSH
39866: LD_INT 1
39868: NEG
39869: PUSH
39870: LD_INT 0
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 1
39879: NEG
39880: PUSH
39881: LD_INT 1
39883: NEG
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: LD_INT 1
39891: NEG
39892: PUSH
39893: LD_INT 2
39895: NEG
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 0
39903: PUSH
39904: LD_INT 2
39906: NEG
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PUSH
39912: LD_INT 1
39914: PUSH
39915: LD_INT 1
39917: NEG
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 2
39925: PUSH
39926: LD_INT 0
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 2
39935: PUSH
39936: LD_INT 1
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: LD_INT 2
39945: PUSH
39946: LD_INT 2
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: LD_INT 1
39955: PUSH
39956: LD_INT 2
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 1
39965: NEG
39966: PUSH
39967: LD_INT 1
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 2
39976: NEG
39977: PUSH
39978: LD_INT 0
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 2
39987: NEG
39988: PUSH
39989: LD_INT 1
39991: NEG
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 1
39999: NEG
40000: PUSH
40001: LD_INT 3
40003: NEG
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 1
40011: PUSH
40012: LD_INT 2
40014: NEG
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 3
40022: PUSH
40023: LD_INT 2
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 2
40032: PUSH
40033: LD_INT 3
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 2
40042: NEG
40043: PUSH
40044: LD_INT 1
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: LD_INT 3
40053: NEG
40054: PUSH
40055: LD_INT 1
40057: NEG
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40088: LD_ADDR_VAR 0 31
40092: PUSH
40093: LD_INT 0
40095: PUSH
40096: LD_INT 0
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: LD_INT 0
40105: PUSH
40106: LD_INT 1
40108: NEG
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 1
40116: PUSH
40117: LD_INT 0
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PUSH
40124: LD_INT 1
40126: PUSH
40127: LD_INT 1
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 0
40136: PUSH
40137: LD_INT 1
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: PUSH
40144: LD_INT 1
40146: NEG
40147: PUSH
40148: LD_INT 0
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PUSH
40155: LD_INT 1
40157: NEG
40158: PUSH
40159: LD_INT 1
40161: NEG
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 1
40169: NEG
40170: PUSH
40171: LD_INT 2
40173: NEG
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 1
40181: PUSH
40182: LD_INT 1
40184: NEG
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: LD_INT 2
40192: PUSH
40193: LD_INT 0
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PUSH
40200: LD_INT 2
40202: PUSH
40203: LD_INT 1
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 2
40212: PUSH
40213: LD_INT 2
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 1
40222: PUSH
40223: LD_INT 2
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: LD_INT 0
40232: PUSH
40233: LD_INT 2
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PUSH
40240: LD_INT 1
40242: NEG
40243: PUSH
40244: LD_INT 1
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 2
40253: NEG
40254: PUSH
40255: LD_INT 1
40257: NEG
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 2
40265: NEG
40266: PUSH
40267: LD_INT 2
40269: NEG
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: LD_INT 2
40277: NEG
40278: PUSH
40279: LD_INT 3
40281: NEG
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: LD_INT 2
40289: PUSH
40290: LD_INT 1
40292: NEG
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PUSH
40298: LD_INT 3
40300: PUSH
40301: LD_INT 1
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: PUSH
40308: LD_INT 1
40310: PUSH
40311: LD_INT 3
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: PUSH
40318: LD_INT 1
40320: NEG
40321: PUSH
40322: LD_INT 2
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 3
40331: NEG
40332: PUSH
40333: LD_INT 2
40335: NEG
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40366: LD_ADDR_VAR 0 32
40370: PUSH
40371: LD_INT 0
40373: PUSH
40374: LD_INT 0
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 0
40383: PUSH
40384: LD_INT 1
40386: NEG
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: LD_INT 1
40394: PUSH
40395: LD_INT 0
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 1
40404: PUSH
40405: LD_INT 1
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: PUSH
40412: LD_INT 0
40414: PUSH
40415: LD_INT 1
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: LD_INT 1
40424: NEG
40425: PUSH
40426: LD_INT 0
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 1
40435: NEG
40436: PUSH
40437: LD_INT 1
40439: NEG
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: LD_INT 1
40447: NEG
40448: PUSH
40449: LD_INT 2
40451: NEG
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 0
40459: PUSH
40460: LD_INT 2
40462: NEG
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 1
40470: PUSH
40471: LD_INT 1
40473: NEG
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 2
40481: PUSH
40482: LD_INT 1
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 2
40491: PUSH
40492: LD_INT 2
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PUSH
40499: LD_INT 1
40501: PUSH
40502: LD_INT 2
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 0
40511: PUSH
40512: LD_INT 2
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 1
40521: NEG
40522: PUSH
40523: LD_INT 1
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 2
40532: NEG
40533: PUSH
40534: LD_INT 0
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 2
40543: NEG
40544: PUSH
40545: LD_INT 1
40547: NEG
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 1
40555: NEG
40556: PUSH
40557: LD_INT 3
40559: NEG
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: LD_INT 1
40567: PUSH
40568: LD_INT 2
40570: NEG
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 3
40578: PUSH
40579: LD_INT 2
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 2
40588: PUSH
40589: LD_INT 3
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 2
40598: NEG
40599: PUSH
40600: LD_INT 1
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 3
40609: NEG
40610: PUSH
40611: LD_INT 1
40613: NEG
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40644: LD_ADDR_VAR 0 33
40648: PUSH
40649: LD_INT 0
40651: PUSH
40652: LD_INT 0
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 0
40661: PUSH
40662: LD_INT 1
40664: NEG
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 1
40672: PUSH
40673: LD_INT 0
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 1
40682: PUSH
40683: LD_INT 1
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 0
40692: PUSH
40693: LD_INT 1
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 1
40702: NEG
40703: PUSH
40704: LD_INT 0
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 1
40713: NEG
40714: PUSH
40715: LD_INT 1
40717: NEG
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 1
40725: NEG
40726: PUSH
40727: LD_INT 2
40729: NEG
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 1
40737: PUSH
40738: LD_INT 1
40740: NEG
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 2
40748: PUSH
40749: LD_INT 0
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 2
40758: PUSH
40759: LD_INT 1
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 1
40768: PUSH
40769: LD_INT 2
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: LD_INT 0
40778: PUSH
40779: LD_INT 2
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 1
40788: NEG
40789: PUSH
40790: LD_INT 1
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 2
40799: NEG
40800: PUSH
40801: LD_INT 0
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 2
40810: NEG
40811: PUSH
40812: LD_INT 1
40814: NEG
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 2
40822: NEG
40823: PUSH
40824: LD_INT 2
40826: NEG
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 2
40834: NEG
40835: PUSH
40836: LD_INT 3
40838: NEG
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 2
40846: PUSH
40847: LD_INT 1
40849: NEG
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: LD_INT 3
40857: PUSH
40858: LD_INT 1
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 1
40867: PUSH
40868: LD_INT 3
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 1
40877: NEG
40878: PUSH
40879: LD_INT 2
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 3
40888: NEG
40889: PUSH
40890: LD_INT 2
40892: NEG
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40923: LD_ADDR_VAR 0 34
40927: PUSH
40928: LD_INT 0
40930: PUSH
40931: LD_INT 0
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 0
40940: PUSH
40941: LD_INT 1
40943: NEG
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 1
40951: PUSH
40952: LD_INT 0
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 1
40961: PUSH
40962: LD_INT 1
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 0
40971: PUSH
40972: LD_INT 1
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 1
40981: NEG
40982: PUSH
40983: LD_INT 0
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 1
40992: NEG
40993: PUSH
40994: LD_INT 1
40996: NEG
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 1
41004: NEG
41005: PUSH
41006: LD_INT 2
41008: NEG
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 0
41016: PUSH
41017: LD_INT 2
41019: NEG
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 1
41027: PUSH
41028: LD_INT 1
41030: NEG
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 2
41038: PUSH
41039: LD_INT 1
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 2
41048: PUSH
41049: LD_INT 2
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 1
41058: PUSH
41059: LD_INT 2
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 1
41068: NEG
41069: PUSH
41070: LD_INT 1
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 2
41079: NEG
41080: PUSH
41081: LD_INT 0
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 2
41090: NEG
41091: PUSH
41092: LD_INT 1
41094: NEG
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 2
41102: NEG
41103: PUSH
41104: LD_INT 2
41106: NEG
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 1
41114: NEG
41115: PUSH
41116: LD_INT 3
41118: NEG
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 1
41126: PUSH
41127: LD_INT 2
41129: NEG
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 3
41137: PUSH
41138: LD_INT 2
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 2
41147: PUSH
41148: LD_INT 3
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 2
41157: NEG
41158: PUSH
41159: LD_INT 1
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 3
41168: NEG
41169: PUSH
41170: LD_INT 1
41172: NEG
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41203: LD_ADDR_VAR 0 35
41207: PUSH
41208: LD_INT 0
41210: PUSH
41211: LD_INT 0
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: LD_INT 0
41220: PUSH
41221: LD_INT 1
41223: NEG
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 1
41231: PUSH
41232: LD_INT 0
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 1
41241: PUSH
41242: LD_INT 1
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 0
41251: PUSH
41252: LD_INT 1
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 1
41261: NEG
41262: PUSH
41263: LD_INT 0
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 1
41272: NEG
41273: PUSH
41274: LD_INT 1
41276: NEG
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: LD_INT 2
41284: PUSH
41285: LD_INT 1
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 2
41294: NEG
41295: PUSH
41296: LD_INT 1
41298: NEG
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: LIST
41308: LIST
41309: LIST
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41315: LD_ADDR_VAR 0 36
41319: PUSH
41320: LD_INT 0
41322: PUSH
41323: LD_INT 0
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 0
41332: PUSH
41333: LD_INT 1
41335: NEG
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 1
41343: PUSH
41344: LD_INT 0
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 1
41353: PUSH
41354: LD_INT 1
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 0
41363: PUSH
41364: LD_INT 1
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 1
41373: NEG
41374: PUSH
41375: LD_INT 0
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 1
41384: NEG
41385: PUSH
41386: LD_INT 1
41388: NEG
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 1
41396: NEG
41397: PUSH
41398: LD_INT 2
41400: NEG
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 1
41408: PUSH
41409: LD_INT 2
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41427: LD_ADDR_VAR 0 37
41431: PUSH
41432: LD_INT 0
41434: PUSH
41435: LD_INT 0
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 0
41444: PUSH
41445: LD_INT 1
41447: NEG
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 1
41455: PUSH
41456: LD_INT 0
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 1
41465: PUSH
41466: LD_INT 1
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 0
41475: PUSH
41476: LD_INT 1
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 1
41485: NEG
41486: PUSH
41487: LD_INT 0
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 1
41496: NEG
41497: PUSH
41498: LD_INT 1
41500: NEG
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 1
41508: PUSH
41509: LD_INT 1
41511: NEG
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 1
41519: NEG
41520: PUSH
41521: LD_INT 1
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41539: LD_ADDR_VAR 0 38
41543: PUSH
41544: LD_INT 0
41546: PUSH
41547: LD_INT 0
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 0
41556: PUSH
41557: LD_INT 1
41559: NEG
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 1
41567: PUSH
41568: LD_INT 0
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: LD_INT 1
41577: PUSH
41578: LD_INT 1
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 0
41587: PUSH
41588: LD_INT 1
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 1
41597: NEG
41598: PUSH
41599: LD_INT 0
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 1
41608: NEG
41609: PUSH
41610: LD_INT 1
41612: NEG
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: LD_INT 2
41620: PUSH
41621: LD_INT 1
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: LD_INT 2
41630: NEG
41631: PUSH
41632: LD_INT 1
41634: NEG
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41651: LD_ADDR_VAR 0 39
41655: PUSH
41656: LD_INT 0
41658: PUSH
41659: LD_INT 0
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 0
41668: PUSH
41669: LD_INT 1
41671: NEG
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 1
41679: PUSH
41680: LD_INT 0
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 1
41689: PUSH
41690: LD_INT 1
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 0
41699: PUSH
41700: LD_INT 1
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 1
41709: NEG
41710: PUSH
41711: LD_INT 0
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 1
41720: NEG
41721: PUSH
41722: LD_INT 1
41724: NEG
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 1
41732: NEG
41733: PUSH
41734: LD_INT 2
41736: NEG
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 1
41744: PUSH
41745: LD_INT 2
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41763: LD_ADDR_VAR 0 40
41767: PUSH
41768: LD_INT 0
41770: PUSH
41771: LD_INT 0
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 0
41780: PUSH
41781: LD_INT 1
41783: NEG
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 1
41791: PUSH
41792: LD_INT 0
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 1
41801: PUSH
41802: LD_INT 1
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 0
41811: PUSH
41812: LD_INT 1
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 1
41821: NEG
41822: PUSH
41823: LD_INT 0
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 1
41832: NEG
41833: PUSH
41834: LD_INT 1
41836: NEG
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 1
41844: PUSH
41845: LD_INT 1
41847: NEG
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 1
41855: NEG
41856: PUSH
41857: LD_INT 1
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41875: LD_ADDR_VAR 0 41
41879: PUSH
41880: LD_INT 0
41882: PUSH
41883: LD_INT 0
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: LD_INT 0
41892: PUSH
41893: LD_INT 1
41895: NEG
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 1
41903: PUSH
41904: LD_INT 0
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 1
41913: PUSH
41914: LD_INT 1
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 0
41923: PUSH
41924: LD_INT 1
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 1
41933: NEG
41934: PUSH
41935: LD_INT 0
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 1
41944: NEG
41945: PUSH
41946: LD_INT 1
41948: NEG
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 1
41956: NEG
41957: PUSH
41958: LD_INT 2
41960: NEG
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 1
41968: PUSH
41969: LD_INT 1
41971: NEG
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 2
41979: PUSH
41980: LD_INT 0
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 2
41989: PUSH
41990: LD_INT 1
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 2
41999: PUSH
42000: LD_INT 2
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 1
42009: PUSH
42010: LD_INT 2
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 1
42019: NEG
42020: PUSH
42021: LD_INT 1
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 2
42030: NEG
42031: PUSH
42032: LD_INT 0
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 2
42041: NEG
42042: PUSH
42043: LD_INT 1
42045: NEG
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 2
42053: NEG
42054: PUSH
42055: LD_INT 2
42057: NEG
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 2
42065: NEG
42066: PUSH
42067: LD_INT 3
42069: NEG
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 2
42077: PUSH
42078: LD_INT 1
42080: NEG
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: LD_INT 3
42088: PUSH
42089: LD_INT 0
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 3
42098: PUSH
42099: LD_INT 1
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 3
42108: PUSH
42109: LD_INT 2
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 3
42118: PUSH
42119: LD_INT 3
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 2
42128: PUSH
42129: LD_INT 3
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 2
42138: NEG
42139: PUSH
42140: LD_INT 1
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 3
42149: NEG
42150: PUSH
42151: LD_INT 0
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 3
42160: NEG
42161: PUSH
42162: LD_INT 1
42164: NEG
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 3
42172: NEG
42173: PUSH
42174: LD_INT 2
42176: NEG
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 3
42184: NEG
42185: PUSH
42186: LD_INT 3
42188: NEG
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42225: LD_ADDR_VAR 0 42
42229: PUSH
42230: LD_INT 0
42232: PUSH
42233: LD_INT 0
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 0
42242: PUSH
42243: LD_INT 1
42245: NEG
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 1
42253: PUSH
42254: LD_INT 0
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 1
42263: PUSH
42264: LD_INT 1
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 0
42273: PUSH
42274: LD_INT 1
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 1
42283: NEG
42284: PUSH
42285: LD_INT 0
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 1
42294: NEG
42295: PUSH
42296: LD_INT 1
42298: NEG
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 1
42306: NEG
42307: PUSH
42308: LD_INT 2
42310: NEG
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 0
42318: PUSH
42319: LD_INT 2
42321: NEG
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 1
42329: PUSH
42330: LD_INT 1
42332: NEG
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 2
42340: PUSH
42341: LD_INT 1
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 2
42350: PUSH
42351: LD_INT 2
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 1
42360: PUSH
42361: LD_INT 2
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 0
42370: PUSH
42371: LD_INT 2
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 1
42380: NEG
42381: PUSH
42382: LD_INT 1
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 2
42391: NEG
42392: PUSH
42393: LD_INT 1
42395: NEG
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 2
42403: NEG
42404: PUSH
42405: LD_INT 2
42407: NEG
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 2
42415: NEG
42416: PUSH
42417: LD_INT 3
42419: NEG
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 1
42427: NEG
42428: PUSH
42429: LD_INT 3
42431: NEG
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 0
42439: PUSH
42440: LD_INT 3
42442: NEG
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 1
42450: PUSH
42451: LD_INT 2
42453: NEG
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PUSH
42459: LD_INT 3
42461: PUSH
42462: LD_INT 2
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: LD_INT 3
42471: PUSH
42472: LD_INT 3
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 2
42481: PUSH
42482: LD_INT 3
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 1
42491: PUSH
42492: LD_INT 3
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 0
42501: PUSH
42502: LD_INT 3
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 1
42511: NEG
42512: PUSH
42513: LD_INT 2
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 3
42522: NEG
42523: PUSH
42524: LD_INT 2
42526: NEG
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 3
42534: NEG
42535: PUSH
42536: LD_INT 3
42538: NEG
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42575: LD_ADDR_VAR 0 43
42579: PUSH
42580: LD_INT 0
42582: PUSH
42583: LD_INT 0
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 0
42592: PUSH
42593: LD_INT 1
42595: NEG
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 1
42603: PUSH
42604: LD_INT 0
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 1
42613: PUSH
42614: LD_INT 1
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 0
42623: PUSH
42624: LD_INT 1
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 1
42633: NEG
42634: PUSH
42635: LD_INT 0
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 1
42644: NEG
42645: PUSH
42646: LD_INT 1
42648: NEG
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 1
42656: NEG
42657: PUSH
42658: LD_INT 2
42660: NEG
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 0
42668: PUSH
42669: LD_INT 2
42671: NEG
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 1
42679: PUSH
42680: LD_INT 1
42682: NEG
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 2
42690: PUSH
42691: LD_INT 0
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 2
42700: PUSH
42701: LD_INT 1
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 1
42710: PUSH
42711: LD_INT 2
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 0
42720: PUSH
42721: LD_INT 2
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 1
42730: NEG
42731: PUSH
42732: LD_INT 1
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 2
42741: NEG
42742: PUSH
42743: LD_INT 0
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 2
42752: NEG
42753: PUSH
42754: LD_INT 1
42756: NEG
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: PUSH
42762: LD_INT 1
42764: NEG
42765: PUSH
42766: LD_INT 3
42768: NEG
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: LD_INT 0
42776: PUSH
42777: LD_INT 3
42779: NEG
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 1
42787: PUSH
42788: LD_INT 2
42790: NEG
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 2
42798: PUSH
42799: LD_INT 1
42801: NEG
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 3
42809: PUSH
42810: LD_INT 0
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: LD_INT 3
42819: PUSH
42820: LD_INT 1
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: LD_INT 1
42829: PUSH
42830: LD_INT 3
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: LD_INT 0
42839: PUSH
42840: LD_INT 3
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 1
42849: NEG
42850: PUSH
42851: LD_INT 2
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 2
42860: NEG
42861: PUSH
42862: LD_INT 1
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 3
42871: NEG
42872: PUSH
42873: LD_INT 0
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 3
42882: NEG
42883: PUSH
42884: LD_INT 1
42886: NEG
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42923: LD_ADDR_VAR 0 44
42927: PUSH
42928: LD_INT 0
42930: PUSH
42931: LD_INT 0
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 0
42940: PUSH
42941: LD_INT 1
42943: NEG
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 1
42951: PUSH
42952: LD_INT 0
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 1
42961: PUSH
42962: LD_INT 1
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 0
42971: PUSH
42972: LD_INT 1
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 1
42981: NEG
42982: PUSH
42983: LD_INT 0
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 1
42992: NEG
42993: PUSH
42994: LD_INT 1
42996: NEG
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 1
43004: NEG
43005: PUSH
43006: LD_INT 2
43008: NEG
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 1
43016: PUSH
43017: LD_INT 1
43019: NEG
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 2
43027: PUSH
43028: LD_INT 0
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 2
43037: PUSH
43038: LD_INT 1
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 2
43047: PUSH
43048: LD_INT 2
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 1
43057: PUSH
43058: LD_INT 2
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 1
43067: NEG
43068: PUSH
43069: LD_INT 1
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 2
43078: NEG
43079: PUSH
43080: LD_INT 0
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 2
43089: NEG
43090: PUSH
43091: LD_INT 1
43093: NEG
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 2
43101: NEG
43102: PUSH
43103: LD_INT 2
43105: NEG
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 2
43113: NEG
43114: PUSH
43115: LD_INT 3
43117: NEG
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 2
43125: PUSH
43126: LD_INT 1
43128: NEG
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 3
43136: PUSH
43137: LD_INT 0
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 3
43146: PUSH
43147: LD_INT 1
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 3
43156: PUSH
43157: LD_INT 2
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 3
43166: PUSH
43167: LD_INT 3
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 2
43176: PUSH
43177: LD_INT 3
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 2
43186: NEG
43187: PUSH
43188: LD_INT 1
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 3
43197: NEG
43198: PUSH
43199: LD_INT 0
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 3
43208: NEG
43209: PUSH
43210: LD_INT 1
43212: NEG
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 3
43220: NEG
43221: PUSH
43222: LD_INT 2
43224: NEG
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 3
43232: NEG
43233: PUSH
43234: LD_INT 3
43236: NEG
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43273: LD_ADDR_VAR 0 45
43277: PUSH
43278: LD_INT 0
43280: PUSH
43281: LD_INT 0
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 0
43290: PUSH
43291: LD_INT 1
43293: NEG
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 1
43301: PUSH
43302: LD_INT 0
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 1
43311: PUSH
43312: LD_INT 1
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 0
43321: PUSH
43322: LD_INT 1
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 1
43331: NEG
43332: PUSH
43333: LD_INT 0
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 1
43342: NEG
43343: PUSH
43344: LD_INT 1
43346: NEG
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: LD_INT 1
43354: NEG
43355: PUSH
43356: LD_INT 2
43358: NEG
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 0
43366: PUSH
43367: LD_INT 2
43369: NEG
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 1
43377: PUSH
43378: LD_INT 1
43380: NEG
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 2
43388: PUSH
43389: LD_INT 1
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 2
43398: PUSH
43399: LD_INT 2
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 1
43408: PUSH
43409: LD_INT 2
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 0
43418: PUSH
43419: LD_INT 2
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 1
43428: NEG
43429: PUSH
43430: LD_INT 1
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 2
43439: NEG
43440: PUSH
43441: LD_INT 1
43443: NEG
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: LD_INT 2
43451: NEG
43452: PUSH
43453: LD_INT 2
43455: NEG
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 2
43463: NEG
43464: PUSH
43465: LD_INT 3
43467: NEG
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 1
43475: NEG
43476: PUSH
43477: LD_INT 3
43479: NEG
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 0
43487: PUSH
43488: LD_INT 3
43490: NEG
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 1
43498: PUSH
43499: LD_INT 2
43501: NEG
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 3
43509: PUSH
43510: LD_INT 2
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 3
43519: PUSH
43520: LD_INT 3
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 2
43529: PUSH
43530: LD_INT 3
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 1
43539: PUSH
43540: LD_INT 3
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 0
43549: PUSH
43550: LD_INT 3
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 1
43559: NEG
43560: PUSH
43561: LD_INT 2
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 3
43570: NEG
43571: PUSH
43572: LD_INT 2
43574: NEG
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 3
43582: NEG
43583: PUSH
43584: LD_INT 3
43586: NEG
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43623: LD_ADDR_VAR 0 46
43627: PUSH
43628: LD_INT 0
43630: PUSH
43631: LD_INT 0
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 0
43640: PUSH
43641: LD_INT 1
43643: NEG
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 1
43651: PUSH
43652: LD_INT 0
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 1
43661: PUSH
43662: LD_INT 1
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 0
43671: PUSH
43672: LD_INT 1
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 1
43681: NEG
43682: PUSH
43683: LD_INT 0
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 1
43692: NEG
43693: PUSH
43694: LD_INT 1
43696: NEG
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 1
43704: NEG
43705: PUSH
43706: LD_INT 2
43708: NEG
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 0
43716: PUSH
43717: LD_INT 2
43719: NEG
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 1
43727: PUSH
43728: LD_INT 1
43730: NEG
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 2
43738: PUSH
43739: LD_INT 0
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 2
43748: PUSH
43749: LD_INT 1
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 1
43758: PUSH
43759: LD_INT 2
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 0
43768: PUSH
43769: LD_INT 2
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 1
43778: NEG
43779: PUSH
43780: LD_INT 1
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 2
43789: NEG
43790: PUSH
43791: LD_INT 0
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 2
43800: NEG
43801: PUSH
43802: LD_INT 1
43804: NEG
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 1
43812: NEG
43813: PUSH
43814: LD_INT 3
43816: NEG
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 0
43824: PUSH
43825: LD_INT 3
43827: NEG
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 1
43835: PUSH
43836: LD_INT 2
43838: NEG
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 2
43846: PUSH
43847: LD_INT 1
43849: NEG
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 3
43857: PUSH
43858: LD_INT 0
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 3
43867: PUSH
43868: LD_INT 1
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 1
43877: PUSH
43878: LD_INT 3
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 0
43887: PUSH
43888: LD_INT 3
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 1
43897: NEG
43898: PUSH
43899: LD_INT 2
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 2
43908: NEG
43909: PUSH
43910: LD_INT 1
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 3
43919: NEG
43920: PUSH
43921: LD_INT 0
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 3
43930: NEG
43931: PUSH
43932: LD_INT 1
43934: NEG
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43971: LD_ADDR_VAR 0 47
43975: PUSH
43976: LD_INT 0
43978: PUSH
43979: LD_INT 0
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: LD_INT 0
43988: PUSH
43989: LD_INT 1
43991: NEG
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 1
43999: PUSH
44000: LD_INT 0
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 1
44009: PUSH
44010: LD_INT 1
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 0
44019: PUSH
44020: LD_INT 1
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 1
44029: NEG
44030: PUSH
44031: LD_INT 0
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 1
44040: NEG
44041: PUSH
44042: LD_INT 1
44044: NEG
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 1
44052: NEG
44053: PUSH
44054: LD_INT 2
44056: NEG
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PUSH
44062: LD_INT 0
44064: PUSH
44065: LD_INT 2
44067: NEG
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 1
44075: PUSH
44076: LD_INT 1
44078: NEG
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 2
44086: NEG
44087: PUSH
44088: LD_INT 1
44090: NEG
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 2
44098: NEG
44099: PUSH
44100: LD_INT 2
44102: NEG
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44122: LD_ADDR_VAR 0 48
44126: PUSH
44127: LD_INT 0
44129: PUSH
44130: LD_INT 0
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 0
44139: PUSH
44140: LD_INT 1
44142: NEG
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 1
44150: PUSH
44151: LD_INT 0
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 1
44160: PUSH
44161: LD_INT 1
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 0
44170: PUSH
44171: LD_INT 1
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 1
44180: NEG
44181: PUSH
44182: LD_INT 0
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 1
44191: NEG
44192: PUSH
44193: LD_INT 1
44195: NEG
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 1
44203: NEG
44204: PUSH
44205: LD_INT 2
44207: NEG
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 0
44215: PUSH
44216: LD_INT 2
44218: NEG
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 1
44226: PUSH
44227: LD_INT 1
44229: NEG
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 2
44237: PUSH
44238: LD_INT 0
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 2
44247: PUSH
44248: LD_INT 1
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44269: LD_ADDR_VAR 0 49
44273: PUSH
44274: LD_INT 0
44276: PUSH
44277: LD_INT 0
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 0
44286: PUSH
44287: LD_INT 1
44289: NEG
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 1
44297: PUSH
44298: LD_INT 0
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 1
44307: PUSH
44308: LD_INT 1
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 0
44317: PUSH
44318: LD_INT 1
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 1
44327: NEG
44328: PUSH
44329: LD_INT 0
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 1
44338: NEG
44339: PUSH
44340: LD_INT 1
44342: NEG
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 1
44350: PUSH
44351: LD_INT 1
44353: NEG
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 2
44361: PUSH
44362: LD_INT 0
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 2
44371: PUSH
44372: LD_INT 1
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 2
44381: PUSH
44382: LD_INT 2
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 1
44391: PUSH
44392: LD_INT 2
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44413: LD_ADDR_VAR 0 50
44417: PUSH
44418: LD_INT 0
44420: PUSH
44421: LD_INT 0
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 0
44430: PUSH
44431: LD_INT 1
44433: NEG
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 1
44441: PUSH
44442: LD_INT 0
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 1
44451: PUSH
44452: LD_INT 1
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 0
44461: PUSH
44462: LD_INT 1
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 1
44471: NEG
44472: PUSH
44473: LD_INT 0
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 1
44482: NEG
44483: PUSH
44484: LD_INT 1
44486: NEG
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 2
44494: PUSH
44495: LD_INT 1
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 2
44504: PUSH
44505: LD_INT 2
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 1
44514: PUSH
44515: LD_INT 2
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 0
44524: PUSH
44525: LD_INT 2
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 1
44534: NEG
44535: PUSH
44536: LD_INT 1
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44557: LD_ADDR_VAR 0 51
44561: PUSH
44562: LD_INT 0
44564: PUSH
44565: LD_INT 0
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 0
44574: PUSH
44575: LD_INT 1
44577: NEG
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 1
44585: PUSH
44586: LD_INT 0
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 1
44595: PUSH
44596: LD_INT 1
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 0
44605: PUSH
44606: LD_INT 1
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 1
44615: NEG
44616: PUSH
44617: LD_INT 0
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 1
44626: NEG
44627: PUSH
44628: LD_INT 1
44630: NEG
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 1
44638: PUSH
44639: LD_INT 2
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 0
44648: PUSH
44649: LD_INT 2
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 1
44658: NEG
44659: PUSH
44660: LD_INT 1
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 2
44669: NEG
44670: PUSH
44671: LD_INT 0
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 2
44680: NEG
44681: PUSH
44682: LD_INT 1
44684: NEG
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44704: LD_ADDR_VAR 0 52
44708: PUSH
44709: LD_INT 0
44711: PUSH
44712: LD_INT 0
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 0
44721: PUSH
44722: LD_INT 1
44724: NEG
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 1
44732: PUSH
44733: LD_INT 0
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 1
44742: PUSH
44743: LD_INT 1
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 0
44752: PUSH
44753: LD_INT 1
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 1
44762: NEG
44763: PUSH
44764: LD_INT 0
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 1
44773: NEG
44774: PUSH
44775: LD_INT 1
44777: NEG
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 1
44785: NEG
44786: PUSH
44787: LD_INT 2
44789: NEG
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 1
44797: NEG
44798: PUSH
44799: LD_INT 1
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 2
44808: NEG
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 2
44819: NEG
44820: PUSH
44821: LD_INT 1
44823: NEG
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 2
44831: NEG
44832: PUSH
44833: LD_INT 2
44835: NEG
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44855: LD_ADDR_VAR 0 53
44859: PUSH
44860: LD_INT 0
44862: PUSH
44863: LD_INT 0
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 0
44872: PUSH
44873: LD_INT 1
44875: NEG
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 1
44883: PUSH
44884: LD_INT 0
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 1
44893: PUSH
44894: LD_INT 1
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 0
44903: PUSH
44904: LD_INT 1
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 1
44913: NEG
44914: PUSH
44915: LD_INT 0
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 1
44924: NEG
44925: PUSH
44926: LD_INT 1
44928: NEG
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 1
44936: NEG
44937: PUSH
44938: LD_INT 2
44940: NEG
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 0
44948: PUSH
44949: LD_INT 2
44951: NEG
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 1
44959: PUSH
44960: LD_INT 1
44962: NEG
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 2
44970: PUSH
44971: LD_INT 0
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 2
44980: PUSH
44981: LD_INT 1
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 2
44990: PUSH
44991: LD_INT 2
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 1
45000: PUSH
45001: LD_INT 2
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 0
45010: PUSH
45011: LD_INT 2
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 1
45020: NEG
45021: PUSH
45022: LD_INT 1
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 2
45031: NEG
45032: PUSH
45033: LD_INT 0
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 2
45042: NEG
45043: PUSH
45044: LD_INT 1
45046: NEG
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 2
45054: NEG
45055: PUSH
45056: LD_INT 2
45058: NEG
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45085: LD_ADDR_VAR 0 54
45089: PUSH
45090: LD_INT 0
45092: PUSH
45093: LD_INT 0
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 0
45102: PUSH
45103: LD_INT 1
45105: NEG
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 1
45113: PUSH
45114: LD_INT 0
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 1
45123: PUSH
45124: LD_INT 1
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 0
45133: PUSH
45134: LD_INT 1
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 1
45143: NEG
45144: PUSH
45145: LD_INT 0
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 1
45154: NEG
45155: PUSH
45156: LD_INT 1
45158: NEG
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 1
45166: NEG
45167: PUSH
45168: LD_INT 2
45170: NEG
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 0
45178: PUSH
45179: LD_INT 2
45181: NEG
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 1
45189: PUSH
45190: LD_INT 1
45192: NEG
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 2
45200: PUSH
45201: LD_INT 0
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 2
45210: PUSH
45211: LD_INT 1
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 2
45220: PUSH
45221: LD_INT 2
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 1
45230: PUSH
45231: LD_INT 2
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 0
45240: PUSH
45241: LD_INT 2
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 1
45250: NEG
45251: PUSH
45252: LD_INT 1
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 2
45261: NEG
45262: PUSH
45263: LD_INT 0
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 2
45272: NEG
45273: PUSH
45274: LD_INT 1
45276: NEG
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 2
45284: NEG
45285: PUSH
45286: LD_INT 2
45288: NEG
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45315: LD_ADDR_VAR 0 55
45319: PUSH
45320: LD_INT 0
45322: PUSH
45323: LD_INT 0
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 0
45332: PUSH
45333: LD_INT 1
45335: NEG
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 1
45343: PUSH
45344: LD_INT 0
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 1
45353: PUSH
45354: LD_INT 1
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 0
45363: PUSH
45364: LD_INT 1
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 1
45373: NEG
45374: PUSH
45375: LD_INT 0
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 1
45384: NEG
45385: PUSH
45386: LD_INT 1
45388: NEG
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 1
45396: NEG
45397: PUSH
45398: LD_INT 2
45400: NEG
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 0
45408: PUSH
45409: LD_INT 2
45411: NEG
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 1
45419: PUSH
45420: LD_INT 1
45422: NEG
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 2
45430: PUSH
45431: LD_INT 0
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 2
45440: PUSH
45441: LD_INT 1
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 2
45450: PUSH
45451: LD_INT 2
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 1
45460: PUSH
45461: LD_INT 2
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 0
45470: PUSH
45471: LD_INT 2
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 1
45480: NEG
45481: PUSH
45482: LD_INT 1
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 2
45491: NEG
45492: PUSH
45493: LD_INT 0
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 2
45502: NEG
45503: PUSH
45504: LD_INT 1
45506: NEG
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 2
45514: NEG
45515: PUSH
45516: LD_INT 2
45518: NEG
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45545: LD_ADDR_VAR 0 56
45549: PUSH
45550: LD_INT 0
45552: PUSH
45553: LD_INT 0
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 0
45562: PUSH
45563: LD_INT 1
45565: NEG
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 1
45573: PUSH
45574: LD_INT 0
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 1
45583: PUSH
45584: LD_INT 1
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 0
45593: PUSH
45594: LD_INT 1
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 1
45603: NEG
45604: PUSH
45605: LD_INT 0
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 1
45614: NEG
45615: PUSH
45616: LD_INT 1
45618: NEG
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 1
45626: NEG
45627: PUSH
45628: LD_INT 2
45630: NEG
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 0
45638: PUSH
45639: LD_INT 2
45641: NEG
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 1
45649: PUSH
45650: LD_INT 1
45652: NEG
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 2
45660: PUSH
45661: LD_INT 0
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 2
45670: PUSH
45671: LD_INT 1
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 2
45680: PUSH
45681: LD_INT 2
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 1
45690: PUSH
45691: LD_INT 2
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 0
45700: PUSH
45701: LD_INT 2
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 1
45710: NEG
45711: PUSH
45712: LD_INT 1
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 2
45721: NEG
45722: PUSH
45723: LD_INT 0
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 2
45732: NEG
45733: PUSH
45734: LD_INT 1
45736: NEG
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 2
45744: NEG
45745: PUSH
45746: LD_INT 2
45748: NEG
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45775: LD_ADDR_VAR 0 57
45779: PUSH
45780: LD_INT 0
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 0
45792: PUSH
45793: LD_INT 1
45795: NEG
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 1
45803: PUSH
45804: LD_INT 0
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 1
45813: PUSH
45814: LD_INT 1
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 0
45823: PUSH
45824: LD_INT 1
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 1
45833: NEG
45834: PUSH
45835: LD_INT 0
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 1
45844: NEG
45845: PUSH
45846: LD_INT 1
45848: NEG
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 1
45856: NEG
45857: PUSH
45858: LD_INT 2
45860: NEG
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 0
45868: PUSH
45869: LD_INT 2
45871: NEG
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 1
45879: PUSH
45880: LD_INT 1
45882: NEG
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 2
45890: PUSH
45891: LD_INT 0
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 2
45900: PUSH
45901: LD_INT 1
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 2
45910: PUSH
45911: LD_INT 2
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 1
45920: PUSH
45921: LD_INT 2
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 0
45930: PUSH
45931: LD_INT 2
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 1
45940: NEG
45941: PUSH
45942: LD_INT 1
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 2
45951: NEG
45952: PUSH
45953: LD_INT 0
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 2
45962: NEG
45963: PUSH
45964: LD_INT 1
45966: NEG
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 2
45974: NEG
45975: PUSH
45976: LD_INT 2
45978: NEG
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46005: LD_ADDR_VAR 0 58
46009: PUSH
46010: LD_INT 0
46012: PUSH
46013: LD_INT 0
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 0
46022: PUSH
46023: LD_INT 1
46025: NEG
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 1
46033: PUSH
46034: LD_INT 0
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 1
46043: PUSH
46044: LD_INT 1
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 0
46053: PUSH
46054: LD_INT 1
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 1
46063: NEG
46064: PUSH
46065: LD_INT 0
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 1
46074: NEG
46075: PUSH
46076: LD_INT 1
46078: NEG
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 1
46086: NEG
46087: PUSH
46088: LD_INT 2
46090: NEG
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 0
46098: PUSH
46099: LD_INT 2
46101: NEG
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 1
46109: PUSH
46110: LD_INT 1
46112: NEG
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 2
46120: PUSH
46121: LD_INT 0
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 2
46130: PUSH
46131: LD_INT 1
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 2
46140: PUSH
46141: LD_INT 2
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 1
46150: PUSH
46151: LD_INT 2
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 0
46160: PUSH
46161: LD_INT 2
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 1
46170: NEG
46171: PUSH
46172: LD_INT 1
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 2
46181: NEG
46182: PUSH
46183: LD_INT 0
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 2
46192: NEG
46193: PUSH
46194: LD_INT 1
46196: NEG
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 2
46204: NEG
46205: PUSH
46206: LD_INT 2
46208: NEG
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46235: LD_ADDR_VAR 0 59
46239: PUSH
46240: LD_INT 0
46242: PUSH
46243: LD_INT 0
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 0
46252: PUSH
46253: LD_INT 1
46255: NEG
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 1
46263: PUSH
46264: LD_INT 0
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 1
46273: PUSH
46274: LD_INT 1
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 0
46283: PUSH
46284: LD_INT 1
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 1
46293: NEG
46294: PUSH
46295: LD_INT 0
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 1
46304: NEG
46305: PUSH
46306: LD_INT 1
46308: NEG
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46323: LD_ADDR_VAR 0 60
46327: PUSH
46328: LD_INT 0
46330: PUSH
46331: LD_INT 0
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 0
46340: PUSH
46341: LD_INT 1
46343: NEG
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 1
46351: PUSH
46352: LD_INT 0
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 1
46361: PUSH
46362: LD_INT 1
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 0
46371: PUSH
46372: LD_INT 1
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 1
46381: NEG
46382: PUSH
46383: LD_INT 0
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 1
46392: NEG
46393: PUSH
46394: LD_INT 1
46396: NEG
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46411: LD_ADDR_VAR 0 61
46415: PUSH
46416: LD_INT 0
46418: PUSH
46419: LD_INT 0
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 0
46428: PUSH
46429: LD_INT 1
46431: NEG
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 1
46439: PUSH
46440: LD_INT 0
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 1
46449: PUSH
46450: LD_INT 1
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 0
46459: PUSH
46460: LD_INT 1
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 1
46469: NEG
46470: PUSH
46471: LD_INT 0
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 1
46480: NEG
46481: PUSH
46482: LD_INT 1
46484: NEG
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46499: LD_ADDR_VAR 0 62
46503: PUSH
46504: LD_INT 0
46506: PUSH
46507: LD_INT 0
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 0
46516: PUSH
46517: LD_INT 1
46519: NEG
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 1
46527: PUSH
46528: LD_INT 0
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 1
46537: PUSH
46538: LD_INT 1
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 0
46547: PUSH
46548: LD_INT 1
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 1
46557: NEG
46558: PUSH
46559: LD_INT 0
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 1
46568: NEG
46569: PUSH
46570: LD_INT 1
46572: NEG
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46587: LD_ADDR_VAR 0 63
46591: PUSH
46592: LD_INT 0
46594: PUSH
46595: LD_INT 0
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 0
46604: PUSH
46605: LD_INT 1
46607: NEG
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 1
46615: PUSH
46616: LD_INT 0
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 1
46625: PUSH
46626: LD_INT 1
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 0
46635: PUSH
46636: LD_INT 1
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 1
46645: NEG
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 1
46656: NEG
46657: PUSH
46658: LD_INT 1
46660: NEG
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46675: LD_ADDR_VAR 0 64
46679: PUSH
46680: LD_INT 0
46682: PUSH
46683: LD_INT 0
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 0
46692: PUSH
46693: LD_INT 1
46695: NEG
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 1
46703: PUSH
46704: LD_INT 0
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 1
46713: PUSH
46714: LD_INT 1
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 0
46723: PUSH
46724: LD_INT 1
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 1
46733: NEG
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 1
46744: NEG
46745: PUSH
46746: LD_INT 1
46748: NEG
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: ST_TO_ADDR
// end ; 1 :
46763: GO 52660
46765: LD_INT 1
46767: DOUBLE
46768: EQUAL
46769: IFTRUE 46773
46771: GO 49396
46773: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46774: LD_ADDR_VAR 0 11
46778: PUSH
46779: LD_INT 1
46781: NEG
46782: PUSH
46783: LD_INT 3
46785: NEG
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 0
46793: PUSH
46794: LD_INT 3
46796: NEG
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 1
46804: PUSH
46805: LD_INT 2
46807: NEG
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: LIST
46817: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46818: LD_ADDR_VAR 0 12
46822: PUSH
46823: LD_INT 2
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 3
46836: PUSH
46837: LD_INT 0
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 3
46846: PUSH
46847: LD_INT 1
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: LIST
46858: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46859: LD_ADDR_VAR 0 13
46863: PUSH
46864: LD_INT 3
46866: PUSH
46867: LD_INT 2
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 3
46876: PUSH
46877: LD_INT 3
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 2
46886: PUSH
46887: LD_INT 3
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: LIST
46898: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46899: LD_ADDR_VAR 0 14
46903: PUSH
46904: LD_INT 1
46906: PUSH
46907: LD_INT 3
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 0
46916: PUSH
46917: LD_INT 3
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 1
46926: NEG
46927: PUSH
46928: LD_INT 2
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: LIST
46939: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46940: LD_ADDR_VAR 0 15
46944: PUSH
46945: LD_INT 2
46947: NEG
46948: PUSH
46949: LD_INT 1
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 3
46958: NEG
46959: PUSH
46960: LD_INT 0
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 3
46969: NEG
46970: PUSH
46971: LD_INT 1
46973: NEG
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: LIST
46983: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46984: LD_ADDR_VAR 0 16
46988: PUSH
46989: LD_INT 2
46991: NEG
46992: PUSH
46993: LD_INT 3
46995: NEG
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 3
47003: NEG
47004: PUSH
47005: LD_INT 2
47007: NEG
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 3
47015: NEG
47016: PUSH
47017: LD_INT 3
47019: NEG
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: LIST
47029: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47030: LD_ADDR_VAR 0 17
47034: PUSH
47035: LD_INT 1
47037: NEG
47038: PUSH
47039: LD_INT 3
47041: NEG
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 0
47049: PUSH
47050: LD_INT 3
47052: NEG
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 1
47060: PUSH
47061: LD_INT 2
47063: NEG
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: LIST
47073: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47074: LD_ADDR_VAR 0 18
47078: PUSH
47079: LD_INT 2
47081: PUSH
47082: LD_INT 1
47084: NEG
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 3
47092: PUSH
47093: LD_INT 0
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 3
47102: PUSH
47103: LD_INT 1
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: LIST
47114: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47115: LD_ADDR_VAR 0 19
47119: PUSH
47120: LD_INT 3
47122: PUSH
47123: LD_INT 2
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 3
47132: PUSH
47133: LD_INT 3
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 2
47142: PUSH
47143: LD_INT 3
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: LIST
47154: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47155: LD_ADDR_VAR 0 20
47159: PUSH
47160: LD_INT 1
47162: PUSH
47163: LD_INT 3
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 0
47172: PUSH
47173: LD_INT 3
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 1
47182: NEG
47183: PUSH
47184: LD_INT 2
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: LIST
47195: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47196: LD_ADDR_VAR 0 21
47200: PUSH
47201: LD_INT 2
47203: NEG
47204: PUSH
47205: LD_INT 1
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 3
47214: NEG
47215: PUSH
47216: LD_INT 0
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 3
47225: NEG
47226: PUSH
47227: LD_INT 1
47229: NEG
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: LIST
47239: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47240: LD_ADDR_VAR 0 22
47244: PUSH
47245: LD_INT 2
47247: NEG
47248: PUSH
47249: LD_INT 3
47251: NEG
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 3
47259: NEG
47260: PUSH
47261: LD_INT 2
47263: NEG
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 3
47271: NEG
47272: PUSH
47273: LD_INT 3
47275: NEG
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: LIST
47285: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47286: LD_ADDR_VAR 0 23
47290: PUSH
47291: LD_INT 0
47293: PUSH
47294: LD_INT 3
47296: NEG
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 1
47304: NEG
47305: PUSH
47306: LD_INT 4
47308: NEG
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 1
47316: PUSH
47317: LD_INT 3
47319: NEG
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: LIST
47329: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47330: LD_ADDR_VAR 0 24
47334: PUSH
47335: LD_INT 3
47337: PUSH
47338: LD_INT 0
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 3
47347: PUSH
47348: LD_INT 1
47350: NEG
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 4
47358: PUSH
47359: LD_INT 1
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: LIST
47370: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47371: LD_ADDR_VAR 0 25
47375: PUSH
47376: LD_INT 3
47378: PUSH
47379: LD_INT 3
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 4
47388: PUSH
47389: LD_INT 3
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 3
47398: PUSH
47399: LD_INT 4
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: LIST
47410: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47411: LD_ADDR_VAR 0 26
47415: PUSH
47416: LD_INT 0
47418: PUSH
47419: LD_INT 3
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 1
47428: PUSH
47429: LD_INT 4
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 1
47438: NEG
47439: PUSH
47440: LD_INT 3
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: LIST
47451: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47452: LD_ADDR_VAR 0 27
47456: PUSH
47457: LD_INT 3
47459: NEG
47460: PUSH
47461: LD_INT 0
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 3
47470: NEG
47471: PUSH
47472: LD_INT 1
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 4
47481: NEG
47482: PUSH
47483: LD_INT 1
47485: NEG
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: LIST
47495: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47496: LD_ADDR_VAR 0 28
47500: PUSH
47501: LD_INT 3
47503: NEG
47504: PUSH
47505: LD_INT 3
47507: NEG
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 3
47515: NEG
47516: PUSH
47517: LD_INT 4
47519: NEG
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 4
47527: NEG
47528: PUSH
47529: LD_INT 3
47531: NEG
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: LIST
47541: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47542: LD_ADDR_VAR 0 29
47546: PUSH
47547: LD_INT 1
47549: NEG
47550: PUSH
47551: LD_INT 3
47553: NEG
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 0
47561: PUSH
47562: LD_INT 3
47564: NEG
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 1
47572: PUSH
47573: LD_INT 2
47575: NEG
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 1
47583: NEG
47584: PUSH
47585: LD_INT 4
47587: NEG
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 0
47595: PUSH
47596: LD_INT 4
47598: NEG
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 1
47606: PUSH
47607: LD_INT 3
47609: NEG
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 1
47617: NEG
47618: PUSH
47619: LD_INT 5
47621: NEG
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 0
47629: PUSH
47630: LD_INT 5
47632: NEG
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 1
47640: PUSH
47641: LD_INT 4
47643: NEG
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 1
47651: NEG
47652: PUSH
47653: LD_INT 6
47655: NEG
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 0
47663: PUSH
47664: LD_INT 6
47666: NEG
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 1
47674: PUSH
47675: LD_INT 5
47677: NEG
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47697: LD_ADDR_VAR 0 30
47701: PUSH
47702: LD_INT 2
47704: PUSH
47705: LD_INT 1
47707: NEG
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 3
47715: PUSH
47716: LD_INT 0
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 3
47725: PUSH
47726: LD_INT 1
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 3
47735: PUSH
47736: LD_INT 1
47738: NEG
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 4
47746: PUSH
47747: LD_INT 0
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 4
47756: PUSH
47757: LD_INT 1
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 4
47766: PUSH
47767: LD_INT 1
47769: NEG
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 5
47777: PUSH
47778: LD_INT 0
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 5
47787: PUSH
47788: LD_INT 1
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 5
47797: PUSH
47798: LD_INT 1
47800: NEG
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 6
47808: PUSH
47809: LD_INT 0
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 6
47818: PUSH
47819: LD_INT 1
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47840: LD_ADDR_VAR 0 31
47844: PUSH
47845: LD_INT 3
47847: PUSH
47848: LD_INT 2
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 3
47857: PUSH
47858: LD_INT 3
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 2
47867: PUSH
47868: LD_INT 3
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 4
47877: PUSH
47878: LD_INT 3
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 4
47887: PUSH
47888: LD_INT 4
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 3
47897: PUSH
47898: LD_INT 4
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 5
47907: PUSH
47908: LD_INT 4
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 5
47917: PUSH
47918: LD_INT 5
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 4
47927: PUSH
47928: LD_INT 5
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 6
47937: PUSH
47938: LD_INT 5
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 6
47947: PUSH
47948: LD_INT 6
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 5
47957: PUSH
47958: LD_INT 6
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47979: LD_ADDR_VAR 0 32
47983: PUSH
47984: LD_INT 1
47986: PUSH
47987: LD_INT 3
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 0
47996: PUSH
47997: LD_INT 3
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 1
48006: NEG
48007: PUSH
48008: LD_INT 2
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 1
48017: PUSH
48018: LD_INT 4
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 0
48027: PUSH
48028: LD_INT 4
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 1
48037: NEG
48038: PUSH
48039: LD_INT 3
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 1
48048: PUSH
48049: LD_INT 5
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 0
48058: PUSH
48059: LD_INT 5
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 1
48068: NEG
48069: PUSH
48070: LD_INT 4
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 1
48079: PUSH
48080: LD_INT 6
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 0
48089: PUSH
48090: LD_INT 6
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 1
48099: NEG
48100: PUSH
48101: LD_INT 5
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48122: LD_ADDR_VAR 0 33
48126: PUSH
48127: LD_INT 2
48129: NEG
48130: PUSH
48131: LD_INT 1
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 3
48140: NEG
48141: PUSH
48142: LD_INT 0
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 3
48151: NEG
48152: PUSH
48153: LD_INT 1
48155: NEG
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 3
48163: NEG
48164: PUSH
48165: LD_INT 1
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 4
48174: NEG
48175: PUSH
48176: LD_INT 0
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 4
48185: NEG
48186: PUSH
48187: LD_INT 1
48189: NEG
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 4
48197: NEG
48198: PUSH
48199: LD_INT 1
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 5
48208: NEG
48209: PUSH
48210: LD_INT 0
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 5
48219: NEG
48220: PUSH
48221: LD_INT 1
48223: NEG
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 5
48231: NEG
48232: PUSH
48233: LD_INT 1
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 6
48242: NEG
48243: PUSH
48244: LD_INT 0
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 6
48253: NEG
48254: PUSH
48255: LD_INT 1
48257: NEG
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48277: LD_ADDR_VAR 0 34
48281: PUSH
48282: LD_INT 2
48284: NEG
48285: PUSH
48286: LD_INT 3
48288: NEG
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 3
48296: NEG
48297: PUSH
48298: LD_INT 2
48300: NEG
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 3
48308: NEG
48309: PUSH
48310: LD_INT 3
48312: NEG
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 3
48320: NEG
48321: PUSH
48322: LD_INT 4
48324: NEG
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 4
48332: NEG
48333: PUSH
48334: LD_INT 3
48336: NEG
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 4
48344: NEG
48345: PUSH
48346: LD_INT 4
48348: NEG
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 4
48356: NEG
48357: PUSH
48358: LD_INT 5
48360: NEG
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 5
48368: NEG
48369: PUSH
48370: LD_INT 4
48372: NEG
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 5
48380: NEG
48381: PUSH
48382: LD_INT 5
48384: NEG
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 5
48392: NEG
48393: PUSH
48394: LD_INT 6
48396: NEG
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 6
48404: NEG
48405: PUSH
48406: LD_INT 5
48408: NEG
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 6
48416: NEG
48417: PUSH
48418: LD_INT 6
48420: NEG
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48440: LD_ADDR_VAR 0 41
48444: PUSH
48445: LD_INT 0
48447: PUSH
48448: LD_INT 2
48450: NEG
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 1
48458: NEG
48459: PUSH
48460: LD_INT 3
48462: NEG
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 1
48470: PUSH
48471: LD_INT 2
48473: NEG
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: LIST
48483: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48484: LD_ADDR_VAR 0 42
48488: PUSH
48489: LD_INT 2
48491: PUSH
48492: LD_INT 0
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 2
48501: PUSH
48502: LD_INT 1
48504: NEG
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 3
48512: PUSH
48513: LD_INT 1
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: LIST
48524: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48525: LD_ADDR_VAR 0 43
48529: PUSH
48530: LD_INT 2
48532: PUSH
48533: LD_INT 2
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 3
48542: PUSH
48543: LD_INT 2
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 2
48552: PUSH
48553: LD_INT 3
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: LIST
48564: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48565: LD_ADDR_VAR 0 44
48569: PUSH
48570: LD_INT 0
48572: PUSH
48573: LD_INT 2
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 1
48582: PUSH
48583: LD_INT 3
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 1
48592: NEG
48593: PUSH
48594: LD_INT 2
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: LIST
48605: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48606: LD_ADDR_VAR 0 45
48610: PUSH
48611: LD_INT 2
48613: NEG
48614: PUSH
48615: LD_INT 0
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 2
48624: NEG
48625: PUSH
48626: LD_INT 1
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 3
48635: NEG
48636: PUSH
48637: LD_INT 1
48639: NEG
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: LIST
48649: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48650: LD_ADDR_VAR 0 46
48654: PUSH
48655: LD_INT 2
48657: NEG
48658: PUSH
48659: LD_INT 2
48661: NEG
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 2
48669: NEG
48670: PUSH
48671: LD_INT 3
48673: NEG
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 3
48681: NEG
48682: PUSH
48683: LD_INT 2
48685: NEG
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: LIST
48695: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48696: LD_ADDR_VAR 0 47
48700: PUSH
48701: LD_INT 2
48703: NEG
48704: PUSH
48705: LD_INT 3
48707: NEG
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 1
48715: NEG
48716: PUSH
48717: LD_INT 3
48719: NEG
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48729: LD_ADDR_VAR 0 48
48733: PUSH
48734: LD_INT 1
48736: PUSH
48737: LD_INT 2
48739: NEG
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 2
48747: PUSH
48748: LD_INT 1
48750: NEG
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48760: LD_ADDR_VAR 0 49
48764: PUSH
48765: LD_INT 3
48767: PUSH
48768: LD_INT 1
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 3
48777: PUSH
48778: LD_INT 2
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48789: LD_ADDR_VAR 0 50
48793: PUSH
48794: LD_INT 2
48796: PUSH
48797: LD_INT 3
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 1
48806: PUSH
48807: LD_INT 3
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48818: LD_ADDR_VAR 0 51
48822: PUSH
48823: LD_INT 1
48825: NEG
48826: PUSH
48827: LD_INT 2
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 2
48836: NEG
48837: PUSH
48838: LD_INT 1
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48849: LD_ADDR_VAR 0 52
48853: PUSH
48854: LD_INT 3
48856: NEG
48857: PUSH
48858: LD_INT 1
48860: NEG
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 3
48868: NEG
48869: PUSH
48870: LD_INT 2
48872: NEG
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48882: LD_ADDR_VAR 0 53
48886: PUSH
48887: LD_INT 1
48889: NEG
48890: PUSH
48891: LD_INT 3
48893: NEG
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 0
48901: PUSH
48902: LD_INT 3
48904: NEG
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 1
48912: PUSH
48913: LD_INT 2
48915: NEG
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: LIST
48925: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48926: LD_ADDR_VAR 0 54
48930: PUSH
48931: LD_INT 2
48933: PUSH
48934: LD_INT 1
48936: NEG
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 3
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 3
48954: PUSH
48955: LD_INT 1
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: LIST
48966: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48967: LD_ADDR_VAR 0 55
48971: PUSH
48972: LD_INT 3
48974: PUSH
48975: LD_INT 2
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 3
48984: PUSH
48985: LD_INT 3
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 2
48994: PUSH
48995: LD_INT 3
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: LIST
49006: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49007: LD_ADDR_VAR 0 56
49011: PUSH
49012: LD_INT 1
49014: PUSH
49015: LD_INT 3
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 0
49024: PUSH
49025: LD_INT 3
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 1
49034: NEG
49035: PUSH
49036: LD_INT 2
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: LIST
49047: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49048: LD_ADDR_VAR 0 57
49052: PUSH
49053: LD_INT 2
49055: NEG
49056: PUSH
49057: LD_INT 1
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 3
49066: NEG
49067: PUSH
49068: LD_INT 0
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 3
49077: NEG
49078: PUSH
49079: LD_INT 1
49081: NEG
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: LIST
49091: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49092: LD_ADDR_VAR 0 58
49096: PUSH
49097: LD_INT 2
49099: NEG
49100: PUSH
49101: LD_INT 3
49103: NEG
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 3
49111: NEG
49112: PUSH
49113: LD_INT 2
49115: NEG
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 3
49123: NEG
49124: PUSH
49125: LD_INT 3
49127: NEG
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: LIST
49137: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49138: LD_ADDR_VAR 0 59
49142: PUSH
49143: LD_INT 1
49145: NEG
49146: PUSH
49147: LD_INT 2
49149: NEG
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 0
49157: PUSH
49158: LD_INT 2
49160: NEG
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 1
49168: PUSH
49169: LD_INT 1
49171: NEG
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: LIST
49181: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49182: LD_ADDR_VAR 0 60
49186: PUSH
49187: LD_INT 1
49189: PUSH
49190: LD_INT 1
49192: NEG
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 2
49200: PUSH
49201: LD_INT 0
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 2
49210: PUSH
49211: LD_INT 1
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: LIST
49222: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49223: LD_ADDR_VAR 0 61
49227: PUSH
49228: LD_INT 2
49230: PUSH
49231: LD_INT 1
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 2
49240: PUSH
49241: LD_INT 2
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 1
49250: PUSH
49251: LD_INT 2
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: LIST
49262: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49263: LD_ADDR_VAR 0 62
49267: PUSH
49268: LD_INT 1
49270: PUSH
49271: LD_INT 2
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 0
49280: PUSH
49281: LD_INT 2
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 1
49290: NEG
49291: PUSH
49292: LD_INT 1
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: LIST
49303: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49304: LD_ADDR_VAR 0 63
49308: PUSH
49309: LD_INT 1
49311: NEG
49312: PUSH
49313: LD_INT 1
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 2
49322: NEG
49323: PUSH
49324: LD_INT 0
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 2
49333: NEG
49334: PUSH
49335: LD_INT 1
49337: NEG
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: LIST
49347: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49348: LD_ADDR_VAR 0 64
49352: PUSH
49353: LD_INT 1
49355: NEG
49356: PUSH
49357: LD_INT 2
49359: NEG
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 2
49367: NEG
49368: PUSH
49369: LD_INT 1
49371: NEG
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 2
49379: NEG
49380: PUSH
49381: LD_INT 2
49383: NEG
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: LIST
49393: ST_TO_ADDR
// end ; 2 :
49394: GO 52660
49396: LD_INT 2
49398: DOUBLE
49399: EQUAL
49400: IFTRUE 49404
49402: GO 52659
49404: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49405: LD_ADDR_VAR 0 29
49409: PUSH
49410: LD_INT 4
49412: PUSH
49413: LD_INT 0
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 4
49422: PUSH
49423: LD_INT 1
49425: NEG
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 5
49433: PUSH
49434: LD_INT 0
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 5
49443: PUSH
49444: LD_INT 1
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 4
49453: PUSH
49454: LD_INT 1
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 3
49463: PUSH
49464: LD_INT 0
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 3
49473: PUSH
49474: LD_INT 1
49476: NEG
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 3
49484: PUSH
49485: LD_INT 2
49487: NEG
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 5
49495: PUSH
49496: LD_INT 2
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 3
49505: PUSH
49506: LD_INT 3
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 3
49515: PUSH
49516: LD_INT 2
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 4
49525: PUSH
49526: LD_INT 3
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 4
49535: PUSH
49536: LD_INT 4
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 3
49545: PUSH
49546: LD_INT 4
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 2
49555: PUSH
49556: LD_INT 3
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 2
49565: PUSH
49566: LD_INT 2
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 4
49575: PUSH
49576: LD_INT 2
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 2
49585: PUSH
49586: LD_INT 4
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 0
49595: PUSH
49596: LD_INT 4
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 0
49605: PUSH
49606: LD_INT 3
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 1
49615: PUSH
49616: LD_INT 4
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 1
49625: PUSH
49626: LD_INT 5
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 0
49635: PUSH
49636: LD_INT 5
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 1
49645: NEG
49646: PUSH
49647: LD_INT 4
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 1
49656: NEG
49657: PUSH
49658: LD_INT 3
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 2
49667: PUSH
49668: LD_INT 5
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 2
49677: NEG
49678: PUSH
49679: LD_INT 3
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 3
49688: NEG
49689: PUSH
49690: LD_INT 0
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 3
49699: NEG
49700: PUSH
49701: LD_INT 1
49703: NEG
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 2
49711: NEG
49712: PUSH
49713: LD_INT 0
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 2
49722: NEG
49723: PUSH
49724: LD_INT 1
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 3
49733: NEG
49734: PUSH
49735: LD_INT 1
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 4
49744: NEG
49745: PUSH
49746: LD_INT 0
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 4
49755: NEG
49756: PUSH
49757: LD_INT 1
49759: NEG
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 4
49767: NEG
49768: PUSH
49769: LD_INT 2
49771: NEG
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 2
49779: NEG
49780: PUSH
49781: LD_INT 2
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 4
49790: NEG
49791: PUSH
49792: LD_INT 4
49794: NEG
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 4
49802: NEG
49803: PUSH
49804: LD_INT 5
49806: NEG
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 3
49814: NEG
49815: PUSH
49816: LD_INT 4
49818: NEG
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 3
49826: NEG
49827: PUSH
49828: LD_INT 3
49830: NEG
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 4
49838: NEG
49839: PUSH
49840: LD_INT 3
49842: NEG
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 5
49850: NEG
49851: PUSH
49852: LD_INT 4
49854: NEG
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 5
49862: NEG
49863: PUSH
49864: LD_INT 5
49866: NEG
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 3
49874: NEG
49875: PUSH
49876: LD_INT 5
49878: NEG
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 5
49886: NEG
49887: PUSH
49888: LD_INT 3
49890: NEG
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49943: LD_ADDR_VAR 0 30
49947: PUSH
49948: LD_INT 4
49950: PUSH
49951: LD_INT 4
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 4
49960: PUSH
49961: LD_INT 3
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 5
49970: PUSH
49971: LD_INT 4
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 5
49980: PUSH
49981: LD_INT 5
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 4
49990: PUSH
49991: LD_INT 5
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 3
50000: PUSH
50001: LD_INT 4
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 3
50010: PUSH
50011: LD_INT 3
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 5
50020: PUSH
50021: LD_INT 3
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 3
50030: PUSH
50031: LD_INT 5
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 0
50040: PUSH
50041: LD_INT 3
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 0
50050: PUSH
50051: LD_INT 2
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 1
50060: PUSH
50061: LD_INT 3
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 1
50070: PUSH
50071: LD_INT 4
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 0
50080: PUSH
50081: LD_INT 4
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 1
50090: NEG
50091: PUSH
50092: LD_INT 3
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 1
50101: NEG
50102: PUSH
50103: LD_INT 2
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 2
50112: PUSH
50113: LD_INT 4
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 2
50122: NEG
50123: PUSH
50124: LD_INT 2
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 4
50133: NEG
50134: PUSH
50135: LD_INT 0
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 4
50144: NEG
50145: PUSH
50146: LD_INT 1
50148: NEG
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 3
50156: NEG
50157: PUSH
50158: LD_INT 0
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 3
50167: NEG
50168: PUSH
50169: LD_INT 1
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 4
50178: NEG
50179: PUSH
50180: LD_INT 1
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 5
50189: NEG
50190: PUSH
50191: LD_INT 0
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 5
50200: NEG
50201: PUSH
50202: LD_INT 1
50204: NEG
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 5
50212: NEG
50213: PUSH
50214: LD_INT 2
50216: NEG
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 3
50224: NEG
50225: PUSH
50226: LD_INT 2
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 3
50235: NEG
50236: PUSH
50237: LD_INT 3
50239: NEG
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 3
50247: NEG
50248: PUSH
50249: LD_INT 4
50251: NEG
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 2
50259: NEG
50260: PUSH
50261: LD_INT 3
50263: NEG
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 2
50271: NEG
50272: PUSH
50273: LD_INT 2
50275: NEG
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 3
50283: NEG
50284: PUSH
50285: LD_INT 2
50287: NEG
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 4
50295: NEG
50296: PUSH
50297: LD_INT 3
50299: NEG
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 4
50307: NEG
50308: PUSH
50309: LD_INT 4
50311: NEG
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 2
50319: NEG
50320: PUSH
50321: LD_INT 4
50323: NEG
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 4
50331: NEG
50332: PUSH
50333: LD_INT 2
50335: NEG
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: LD_INT 4
50346: NEG
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 0
50354: PUSH
50355: LD_INT 5
50357: NEG
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 1
50365: PUSH
50366: LD_INT 4
50368: NEG
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 1
50376: PUSH
50377: LD_INT 3
50379: NEG
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 0
50387: PUSH
50388: LD_INT 3
50390: NEG
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 1
50398: NEG
50399: PUSH
50400: LD_INT 4
50402: NEG
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 1
50410: NEG
50411: PUSH
50412: LD_INT 5
50414: NEG
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 2
50422: PUSH
50423: LD_INT 3
50425: NEG
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 2
50433: NEG
50434: PUSH
50435: LD_INT 5
50437: NEG
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50490: LD_ADDR_VAR 0 31
50494: PUSH
50495: LD_INT 0
50497: PUSH
50498: LD_INT 4
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 0
50507: PUSH
50508: LD_INT 3
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 1
50517: PUSH
50518: LD_INT 4
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 1
50527: PUSH
50528: LD_INT 5
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 0
50537: PUSH
50538: LD_INT 5
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 1
50547: NEG
50548: PUSH
50549: LD_INT 4
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 1
50558: NEG
50559: PUSH
50560: LD_INT 3
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 2
50569: PUSH
50570: LD_INT 5
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 2
50579: NEG
50580: PUSH
50581: LD_INT 3
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 3
50590: NEG
50591: PUSH
50592: LD_INT 0
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 3
50601: NEG
50602: PUSH
50603: LD_INT 1
50605: NEG
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 2
50613: NEG
50614: PUSH
50615: LD_INT 0
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 2
50624: NEG
50625: PUSH
50626: LD_INT 1
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 3
50635: NEG
50636: PUSH
50637: LD_INT 1
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 4
50646: NEG
50647: PUSH
50648: LD_INT 0
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 4
50657: NEG
50658: PUSH
50659: LD_INT 1
50661: NEG
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 4
50669: NEG
50670: PUSH
50671: LD_INT 2
50673: NEG
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 2
50681: NEG
50682: PUSH
50683: LD_INT 2
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 4
50692: NEG
50693: PUSH
50694: LD_INT 4
50696: NEG
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 4
50704: NEG
50705: PUSH
50706: LD_INT 5
50708: NEG
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 3
50716: NEG
50717: PUSH
50718: LD_INT 4
50720: NEG
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 3
50728: NEG
50729: PUSH
50730: LD_INT 3
50732: NEG
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 4
50740: NEG
50741: PUSH
50742: LD_INT 3
50744: NEG
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 5
50752: NEG
50753: PUSH
50754: LD_INT 4
50756: NEG
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 5
50764: NEG
50765: PUSH
50766: LD_INT 5
50768: NEG
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 3
50776: NEG
50777: PUSH
50778: LD_INT 5
50780: NEG
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 5
50788: NEG
50789: PUSH
50790: LD_INT 3
50792: NEG
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 0
50800: PUSH
50801: LD_INT 3
50803: NEG
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 0
50811: PUSH
50812: LD_INT 4
50814: NEG
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 1
50822: PUSH
50823: LD_INT 3
50825: NEG
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 1
50833: PUSH
50834: LD_INT 2
50836: NEG
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 0
50844: PUSH
50845: LD_INT 2
50847: NEG
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 1
50855: NEG
50856: PUSH
50857: LD_INT 3
50859: NEG
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 1
50867: NEG
50868: PUSH
50869: LD_INT 4
50871: NEG
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 2
50879: PUSH
50880: LD_INT 2
50882: NEG
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 2
50890: NEG
50891: PUSH
50892: LD_INT 4
50894: NEG
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 4
50902: PUSH
50903: LD_INT 0
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 4
50912: PUSH
50913: LD_INT 1
50915: NEG
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 5
50923: PUSH
50924: LD_INT 0
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 5
50933: PUSH
50934: LD_INT 1
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 4
50943: PUSH
50944: LD_INT 1
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 3
50953: PUSH
50954: LD_INT 0
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 3
50963: PUSH
50964: LD_INT 1
50966: NEG
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 3
50974: PUSH
50975: LD_INT 2
50977: NEG
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 5
50985: PUSH
50986: LD_INT 2
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51040: LD_ADDR_VAR 0 32
51044: PUSH
51045: LD_INT 4
51047: NEG
51048: PUSH
51049: LD_INT 0
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 4
51058: NEG
51059: PUSH
51060: LD_INT 1
51062: NEG
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 3
51070: NEG
51071: PUSH
51072: LD_INT 0
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 3
51081: NEG
51082: PUSH
51083: LD_INT 1
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 4
51092: NEG
51093: PUSH
51094: LD_INT 1
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 5
51103: NEG
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 5
51114: NEG
51115: PUSH
51116: LD_INT 1
51118: NEG
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 5
51126: NEG
51127: PUSH
51128: LD_INT 2
51130: NEG
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 3
51138: NEG
51139: PUSH
51140: LD_INT 2
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 3
51149: NEG
51150: PUSH
51151: LD_INT 3
51153: NEG
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 3
51161: NEG
51162: PUSH
51163: LD_INT 4
51165: NEG
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 2
51173: NEG
51174: PUSH
51175: LD_INT 3
51177: NEG
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 2
51185: NEG
51186: PUSH
51187: LD_INT 2
51189: NEG
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 3
51197: NEG
51198: PUSH
51199: LD_INT 2
51201: NEG
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 4
51209: NEG
51210: PUSH
51211: LD_INT 3
51213: NEG
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 4
51221: NEG
51222: PUSH
51223: LD_INT 4
51225: NEG
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 2
51233: NEG
51234: PUSH
51235: LD_INT 4
51237: NEG
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 4
51245: NEG
51246: PUSH
51247: LD_INT 2
51249: NEG
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 0
51257: PUSH
51258: LD_INT 4
51260: NEG
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 0
51268: PUSH
51269: LD_INT 5
51271: NEG
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 1
51279: PUSH
51280: LD_INT 4
51282: NEG
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 1
51290: PUSH
51291: LD_INT 3
51293: NEG
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 0
51301: PUSH
51302: LD_INT 3
51304: NEG
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 1
51312: NEG
51313: PUSH
51314: LD_INT 4
51316: NEG
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 1
51324: NEG
51325: PUSH
51326: LD_INT 5
51328: NEG
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 2
51336: PUSH
51337: LD_INT 3
51339: NEG
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 2
51347: NEG
51348: PUSH
51349: LD_INT 5
51351: NEG
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 3
51359: PUSH
51360: LD_INT 0
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 3
51369: PUSH
51370: LD_INT 1
51372: NEG
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 4
51380: PUSH
51381: LD_INT 0
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 4
51390: PUSH
51391: LD_INT 1
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 3
51400: PUSH
51401: LD_INT 1
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 2
51410: PUSH
51411: LD_INT 0
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 2
51420: PUSH
51421: LD_INT 1
51423: NEG
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 2
51431: PUSH
51432: LD_INT 2
51434: NEG
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 4
51442: PUSH
51443: LD_INT 2
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 4
51452: PUSH
51453: LD_INT 4
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 4
51462: PUSH
51463: LD_INT 3
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 5
51472: PUSH
51473: LD_INT 4
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 5
51482: PUSH
51483: LD_INT 5
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 4
51492: PUSH
51493: LD_INT 5
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 3
51502: PUSH
51503: LD_INT 4
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 3
51512: PUSH
51513: LD_INT 3
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 5
51522: PUSH
51523: LD_INT 3
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 3
51532: PUSH
51533: LD_INT 5
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51587: LD_ADDR_VAR 0 33
51591: PUSH
51592: LD_INT 4
51594: NEG
51595: PUSH
51596: LD_INT 4
51598: NEG
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 4
51606: NEG
51607: PUSH
51608: LD_INT 5
51610: NEG
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 3
51618: NEG
51619: PUSH
51620: LD_INT 4
51622: NEG
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 3
51630: NEG
51631: PUSH
51632: LD_INT 3
51634: NEG
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 4
51642: NEG
51643: PUSH
51644: LD_INT 3
51646: NEG
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 5
51654: NEG
51655: PUSH
51656: LD_INT 4
51658: NEG
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 5
51666: NEG
51667: PUSH
51668: LD_INT 5
51670: NEG
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 3
51678: NEG
51679: PUSH
51680: LD_INT 5
51682: NEG
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 5
51690: NEG
51691: PUSH
51692: LD_INT 3
51694: NEG
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 0
51702: PUSH
51703: LD_INT 3
51705: NEG
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 0
51713: PUSH
51714: LD_INT 4
51716: NEG
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 1
51724: PUSH
51725: LD_INT 3
51727: NEG
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 1
51735: PUSH
51736: LD_INT 2
51738: NEG
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 0
51746: PUSH
51747: LD_INT 2
51749: NEG
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 1
51757: NEG
51758: PUSH
51759: LD_INT 3
51761: NEG
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 1
51769: NEG
51770: PUSH
51771: LD_INT 4
51773: NEG
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 2
51781: PUSH
51782: LD_INT 2
51784: NEG
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 2
51792: NEG
51793: PUSH
51794: LD_INT 4
51796: NEG
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 4
51804: PUSH
51805: LD_INT 0
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 4
51814: PUSH
51815: LD_INT 1
51817: NEG
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 5
51825: PUSH
51826: LD_INT 0
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 5
51835: PUSH
51836: LD_INT 1
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 4
51845: PUSH
51846: LD_INT 1
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 3
51855: PUSH
51856: LD_INT 0
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 3
51865: PUSH
51866: LD_INT 1
51868: NEG
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 3
51876: PUSH
51877: LD_INT 2
51879: NEG
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 5
51887: PUSH
51888: LD_INT 2
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 3
51897: PUSH
51898: LD_INT 3
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 3
51907: PUSH
51908: LD_INT 2
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 4
51917: PUSH
51918: LD_INT 3
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 4
51927: PUSH
51928: LD_INT 4
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 3
51937: PUSH
51938: LD_INT 4
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 2
51947: PUSH
51948: LD_INT 3
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 2
51957: PUSH
51958: LD_INT 2
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 4
51967: PUSH
51968: LD_INT 2
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 2
51977: PUSH
51978: LD_INT 4
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 0
51987: PUSH
51988: LD_INT 4
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 0
51997: PUSH
51998: LD_INT 3
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 1
52007: PUSH
52008: LD_INT 4
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 1
52017: PUSH
52018: LD_INT 5
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 0
52027: PUSH
52028: LD_INT 5
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 1
52037: NEG
52038: PUSH
52039: LD_INT 4
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 1
52048: NEG
52049: PUSH
52050: LD_INT 3
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 2
52059: PUSH
52060: LD_INT 5
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 2
52069: NEG
52070: PUSH
52071: LD_INT 3
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52125: LD_ADDR_VAR 0 34
52129: PUSH
52130: LD_INT 0
52132: PUSH
52133: LD_INT 4
52135: NEG
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 0
52143: PUSH
52144: LD_INT 5
52146: NEG
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 1
52154: PUSH
52155: LD_INT 4
52157: NEG
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 1
52165: PUSH
52166: LD_INT 3
52168: NEG
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 0
52176: PUSH
52177: LD_INT 3
52179: NEG
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 1
52187: NEG
52188: PUSH
52189: LD_INT 4
52191: NEG
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 1
52199: NEG
52200: PUSH
52201: LD_INT 5
52203: NEG
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 2
52211: PUSH
52212: LD_INT 3
52214: NEG
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 2
52222: NEG
52223: PUSH
52224: LD_INT 5
52226: NEG
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 3
52234: PUSH
52235: LD_INT 0
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 3
52244: PUSH
52245: LD_INT 1
52247: NEG
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 4
52255: PUSH
52256: LD_INT 0
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 4
52265: PUSH
52266: LD_INT 1
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 3
52275: PUSH
52276: LD_INT 1
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 2
52285: PUSH
52286: LD_INT 0
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 2
52295: PUSH
52296: LD_INT 1
52298: NEG
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 2
52306: PUSH
52307: LD_INT 2
52309: NEG
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 4
52317: PUSH
52318: LD_INT 2
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 4
52327: PUSH
52328: LD_INT 4
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 4
52337: PUSH
52338: LD_INT 3
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 5
52347: PUSH
52348: LD_INT 4
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 5
52357: PUSH
52358: LD_INT 5
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 4
52367: PUSH
52368: LD_INT 5
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 3
52377: PUSH
52378: LD_INT 4
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 3
52387: PUSH
52388: LD_INT 3
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 5
52397: PUSH
52398: LD_INT 3
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 3
52407: PUSH
52408: LD_INT 5
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 0
52417: PUSH
52418: LD_INT 3
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 0
52427: PUSH
52428: LD_INT 2
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 1
52437: PUSH
52438: LD_INT 3
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 1
52447: PUSH
52448: LD_INT 4
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 0
52457: PUSH
52458: LD_INT 4
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 1
52467: NEG
52468: PUSH
52469: LD_INT 3
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 1
52478: NEG
52479: PUSH
52480: LD_INT 2
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 2
52489: PUSH
52490: LD_INT 4
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 2
52499: NEG
52500: PUSH
52501: LD_INT 2
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 4
52510: NEG
52511: PUSH
52512: LD_INT 0
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 4
52521: NEG
52522: PUSH
52523: LD_INT 1
52525: NEG
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 3
52533: NEG
52534: PUSH
52535: LD_INT 0
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 3
52544: NEG
52545: PUSH
52546: LD_INT 1
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 4
52555: NEG
52556: PUSH
52557: LD_INT 1
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 5
52566: NEG
52567: PUSH
52568: LD_INT 0
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 5
52577: NEG
52578: PUSH
52579: LD_INT 1
52581: NEG
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 5
52589: NEG
52590: PUSH
52591: LD_INT 2
52593: NEG
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 3
52601: NEG
52602: PUSH
52603: LD_INT 2
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: ST_TO_ADDR
// end ; end ;
52657: GO 52660
52659: POP
// case btype of b_depot , b_warehouse :
52660: LD_VAR 0 1
52664: PUSH
52665: LD_INT 0
52667: DOUBLE
52668: EQUAL
52669: IFTRUE 52679
52671: LD_INT 1
52673: DOUBLE
52674: EQUAL
52675: IFTRUE 52679
52677: GO 52880
52679: POP
// case nation of nation_american :
52680: LD_VAR 0 5
52684: PUSH
52685: LD_INT 1
52687: DOUBLE
52688: EQUAL
52689: IFTRUE 52693
52691: GO 52749
52693: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
52694: LD_ADDR_VAR 0 9
52698: PUSH
52699: LD_VAR 0 11
52703: PUSH
52704: LD_VAR 0 12
52708: PUSH
52709: LD_VAR 0 13
52713: PUSH
52714: LD_VAR 0 14
52718: PUSH
52719: LD_VAR 0 15
52723: PUSH
52724: LD_VAR 0 16
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: PUSH
52737: LD_VAR 0 4
52741: PUSH
52742: LD_INT 1
52744: PLUS
52745: ARRAY
52746: ST_TO_ADDR
52747: GO 52878
52749: LD_INT 2
52751: DOUBLE
52752: EQUAL
52753: IFTRUE 52757
52755: GO 52813
52757: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
52758: LD_ADDR_VAR 0 9
52762: PUSH
52763: LD_VAR 0 17
52767: PUSH
52768: LD_VAR 0 18
52772: PUSH
52773: LD_VAR 0 19
52777: PUSH
52778: LD_VAR 0 20
52782: PUSH
52783: LD_VAR 0 21
52787: PUSH
52788: LD_VAR 0 22
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: PUSH
52801: LD_VAR 0 4
52805: PUSH
52806: LD_INT 1
52808: PLUS
52809: ARRAY
52810: ST_TO_ADDR
52811: GO 52878
52813: LD_INT 3
52815: DOUBLE
52816: EQUAL
52817: IFTRUE 52821
52819: GO 52877
52821: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52822: LD_ADDR_VAR 0 9
52826: PUSH
52827: LD_VAR 0 23
52831: PUSH
52832: LD_VAR 0 24
52836: PUSH
52837: LD_VAR 0 25
52841: PUSH
52842: LD_VAR 0 26
52846: PUSH
52847: LD_VAR 0 27
52851: PUSH
52852: LD_VAR 0 28
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: PUSH
52865: LD_VAR 0 4
52869: PUSH
52870: LD_INT 1
52872: PLUS
52873: ARRAY
52874: ST_TO_ADDR
52875: GO 52878
52877: POP
52878: GO 53433
52880: LD_INT 2
52882: DOUBLE
52883: EQUAL
52884: IFTRUE 52894
52886: LD_INT 3
52888: DOUBLE
52889: EQUAL
52890: IFTRUE 52894
52892: GO 52950
52894: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52895: LD_ADDR_VAR 0 9
52899: PUSH
52900: LD_VAR 0 29
52904: PUSH
52905: LD_VAR 0 30
52909: PUSH
52910: LD_VAR 0 31
52914: PUSH
52915: LD_VAR 0 32
52919: PUSH
52920: LD_VAR 0 33
52924: PUSH
52925: LD_VAR 0 34
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: PUSH
52938: LD_VAR 0 4
52942: PUSH
52943: LD_INT 1
52945: PLUS
52946: ARRAY
52947: ST_TO_ADDR
52948: GO 53433
52950: LD_INT 16
52952: DOUBLE
52953: EQUAL
52954: IFTRUE 53012
52956: LD_INT 17
52958: DOUBLE
52959: EQUAL
52960: IFTRUE 53012
52962: LD_INT 18
52964: DOUBLE
52965: EQUAL
52966: IFTRUE 53012
52968: LD_INT 19
52970: DOUBLE
52971: EQUAL
52972: IFTRUE 53012
52974: LD_INT 22
52976: DOUBLE
52977: EQUAL
52978: IFTRUE 53012
52980: LD_INT 20
52982: DOUBLE
52983: EQUAL
52984: IFTRUE 53012
52986: LD_INT 21
52988: DOUBLE
52989: EQUAL
52990: IFTRUE 53012
52992: LD_INT 23
52994: DOUBLE
52995: EQUAL
52996: IFTRUE 53012
52998: LD_INT 24
53000: DOUBLE
53001: EQUAL
53002: IFTRUE 53012
53004: LD_INT 25
53006: DOUBLE
53007: EQUAL
53008: IFTRUE 53012
53010: GO 53068
53012: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53013: LD_ADDR_VAR 0 9
53017: PUSH
53018: LD_VAR 0 35
53022: PUSH
53023: LD_VAR 0 36
53027: PUSH
53028: LD_VAR 0 37
53032: PUSH
53033: LD_VAR 0 38
53037: PUSH
53038: LD_VAR 0 39
53042: PUSH
53043: LD_VAR 0 40
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: PUSH
53056: LD_VAR 0 4
53060: PUSH
53061: LD_INT 1
53063: PLUS
53064: ARRAY
53065: ST_TO_ADDR
53066: GO 53433
53068: LD_INT 6
53070: DOUBLE
53071: EQUAL
53072: IFTRUE 53124
53074: LD_INT 7
53076: DOUBLE
53077: EQUAL
53078: IFTRUE 53124
53080: LD_INT 8
53082: DOUBLE
53083: EQUAL
53084: IFTRUE 53124
53086: LD_INT 13
53088: DOUBLE
53089: EQUAL
53090: IFTRUE 53124
53092: LD_INT 12
53094: DOUBLE
53095: EQUAL
53096: IFTRUE 53124
53098: LD_INT 15
53100: DOUBLE
53101: EQUAL
53102: IFTRUE 53124
53104: LD_INT 11
53106: DOUBLE
53107: EQUAL
53108: IFTRUE 53124
53110: LD_INT 14
53112: DOUBLE
53113: EQUAL
53114: IFTRUE 53124
53116: LD_INT 10
53118: DOUBLE
53119: EQUAL
53120: IFTRUE 53124
53122: GO 53180
53124: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
53125: LD_ADDR_VAR 0 9
53129: PUSH
53130: LD_VAR 0 41
53134: PUSH
53135: LD_VAR 0 42
53139: PUSH
53140: LD_VAR 0 43
53144: PUSH
53145: LD_VAR 0 44
53149: PUSH
53150: LD_VAR 0 45
53154: PUSH
53155: LD_VAR 0 46
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: PUSH
53168: LD_VAR 0 4
53172: PUSH
53173: LD_INT 1
53175: PLUS
53176: ARRAY
53177: ST_TO_ADDR
53178: GO 53433
53180: LD_INT 36
53182: DOUBLE
53183: EQUAL
53184: IFTRUE 53188
53186: GO 53244
53188: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53189: LD_ADDR_VAR 0 9
53193: PUSH
53194: LD_VAR 0 47
53198: PUSH
53199: LD_VAR 0 48
53203: PUSH
53204: LD_VAR 0 49
53208: PUSH
53209: LD_VAR 0 50
53213: PUSH
53214: LD_VAR 0 51
53218: PUSH
53219: LD_VAR 0 52
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: PUSH
53232: LD_VAR 0 4
53236: PUSH
53237: LD_INT 1
53239: PLUS
53240: ARRAY
53241: ST_TO_ADDR
53242: GO 53433
53244: LD_INT 4
53246: DOUBLE
53247: EQUAL
53248: IFTRUE 53270
53250: LD_INT 5
53252: DOUBLE
53253: EQUAL
53254: IFTRUE 53270
53256: LD_INT 34
53258: DOUBLE
53259: EQUAL
53260: IFTRUE 53270
53262: LD_INT 37
53264: DOUBLE
53265: EQUAL
53266: IFTRUE 53270
53268: GO 53326
53270: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53271: LD_ADDR_VAR 0 9
53275: PUSH
53276: LD_VAR 0 53
53280: PUSH
53281: LD_VAR 0 54
53285: PUSH
53286: LD_VAR 0 55
53290: PUSH
53291: LD_VAR 0 56
53295: PUSH
53296: LD_VAR 0 57
53300: PUSH
53301: LD_VAR 0 58
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: PUSH
53314: LD_VAR 0 4
53318: PUSH
53319: LD_INT 1
53321: PLUS
53322: ARRAY
53323: ST_TO_ADDR
53324: GO 53433
53326: LD_INT 31
53328: DOUBLE
53329: EQUAL
53330: IFTRUE 53376
53332: LD_INT 32
53334: DOUBLE
53335: EQUAL
53336: IFTRUE 53376
53338: LD_INT 33
53340: DOUBLE
53341: EQUAL
53342: IFTRUE 53376
53344: LD_INT 27
53346: DOUBLE
53347: EQUAL
53348: IFTRUE 53376
53350: LD_INT 26
53352: DOUBLE
53353: EQUAL
53354: IFTRUE 53376
53356: LD_INT 28
53358: DOUBLE
53359: EQUAL
53360: IFTRUE 53376
53362: LD_INT 29
53364: DOUBLE
53365: EQUAL
53366: IFTRUE 53376
53368: LD_INT 30
53370: DOUBLE
53371: EQUAL
53372: IFTRUE 53376
53374: GO 53432
53376: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
53377: LD_ADDR_VAR 0 9
53381: PUSH
53382: LD_VAR 0 59
53386: PUSH
53387: LD_VAR 0 60
53391: PUSH
53392: LD_VAR 0 61
53396: PUSH
53397: LD_VAR 0 62
53401: PUSH
53402: LD_VAR 0 63
53406: PUSH
53407: LD_VAR 0 64
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: PUSH
53420: LD_VAR 0 4
53424: PUSH
53425: LD_INT 1
53427: PLUS
53428: ARRAY
53429: ST_TO_ADDR
53430: GO 53433
53432: POP
// temp_list2 = [ ] ;
53433: LD_ADDR_VAR 0 10
53437: PUSH
53438: EMPTY
53439: ST_TO_ADDR
// for i in temp_list do
53440: LD_ADDR_VAR 0 8
53444: PUSH
53445: LD_VAR 0 9
53449: PUSH
53450: FOR_IN
53451: IFFALSE 53503
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53453: LD_ADDR_VAR 0 10
53457: PUSH
53458: LD_VAR 0 10
53462: PUSH
53463: LD_VAR 0 8
53467: PUSH
53468: LD_INT 1
53470: ARRAY
53471: PUSH
53472: LD_VAR 0 2
53476: PLUS
53477: PUSH
53478: LD_VAR 0 8
53482: PUSH
53483: LD_INT 2
53485: ARRAY
53486: PUSH
53487: LD_VAR 0 3
53491: PLUS
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: EMPTY
53498: LIST
53499: ADD
53500: ST_TO_ADDR
53501: GO 53450
53503: POP
53504: POP
// result = temp_list2 ;
53505: LD_ADDR_VAR 0 7
53509: PUSH
53510: LD_VAR 0 10
53514: ST_TO_ADDR
// end ;
53515: LD_VAR 0 7
53519: RET
// export function EnemyInRange ( unit , dist ) ; begin
53520: LD_INT 0
53522: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53523: LD_ADDR_VAR 0 3
53527: PUSH
53528: LD_VAR 0 1
53532: PPUSH
53533: CALL_OW 255
53537: PPUSH
53538: LD_VAR 0 1
53542: PPUSH
53543: CALL_OW 250
53547: PPUSH
53548: LD_VAR 0 1
53552: PPUSH
53553: CALL_OW 251
53557: PPUSH
53558: LD_VAR 0 2
53562: PPUSH
53563: CALL 26893 0 4
53567: PUSH
53568: LD_INT 4
53570: ARRAY
53571: ST_TO_ADDR
// end ;
53572: LD_VAR 0 3
53576: RET
// export function PlayerSeeMe ( unit ) ; begin
53577: LD_INT 0
53579: PPUSH
// result := See ( your_side , unit ) ;
53580: LD_ADDR_VAR 0 2
53584: PUSH
53585: LD_OWVAR 2
53589: PPUSH
53590: LD_VAR 0 1
53594: PPUSH
53595: CALL_OW 292
53599: ST_TO_ADDR
// end ;
53600: LD_VAR 0 2
53604: RET
// export function ReverseDir ( unit ) ; begin
53605: LD_INT 0
53607: PPUSH
// if not unit then
53608: LD_VAR 0 1
53612: NOT
53613: IFFALSE 53617
// exit ;
53615: GO 53640
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
53617: LD_ADDR_VAR 0 2
53621: PUSH
53622: LD_VAR 0 1
53626: PPUSH
53627: CALL_OW 254
53631: PUSH
53632: LD_INT 3
53634: PLUS
53635: PUSH
53636: LD_INT 6
53638: MOD
53639: ST_TO_ADDR
// end ;
53640: LD_VAR 0 2
53644: RET
// export function ReverseArray ( array ) ; var i ; begin
53645: LD_INT 0
53647: PPUSH
53648: PPUSH
// if not array then
53649: LD_VAR 0 1
53653: NOT
53654: IFFALSE 53658
// exit ;
53656: GO 53713
// result := [ ] ;
53658: LD_ADDR_VAR 0 2
53662: PUSH
53663: EMPTY
53664: ST_TO_ADDR
// for i := array downto 1 do
53665: LD_ADDR_VAR 0 3
53669: PUSH
53670: DOUBLE
53671: LD_VAR 0 1
53675: INC
53676: ST_TO_ADDR
53677: LD_INT 1
53679: PUSH
53680: FOR_DOWNTO
53681: IFFALSE 53711
// result := Join ( result , array [ i ] ) ;
53683: LD_ADDR_VAR 0 2
53687: PUSH
53688: LD_VAR 0 2
53692: PPUSH
53693: LD_VAR 0 1
53697: PUSH
53698: LD_VAR 0 3
53702: ARRAY
53703: PPUSH
53704: CALL 58358 0 2
53708: ST_TO_ADDR
53709: GO 53680
53711: POP
53712: POP
// end ;
53713: LD_VAR 0 2
53717: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
53718: LD_INT 0
53720: PPUSH
53721: PPUSH
53722: PPUSH
53723: PPUSH
53724: PPUSH
53725: PPUSH
// if not unit or not hexes then
53726: LD_VAR 0 1
53730: NOT
53731: PUSH
53732: LD_VAR 0 2
53736: NOT
53737: OR
53738: IFFALSE 53742
// exit ;
53740: GO 53865
// dist := 9999 ;
53742: LD_ADDR_VAR 0 5
53746: PUSH
53747: LD_INT 9999
53749: ST_TO_ADDR
// for i = 1 to hexes do
53750: LD_ADDR_VAR 0 4
53754: PUSH
53755: DOUBLE
53756: LD_INT 1
53758: DEC
53759: ST_TO_ADDR
53760: LD_VAR 0 2
53764: PUSH
53765: FOR_TO
53766: IFFALSE 53853
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53768: LD_ADDR_VAR 0 6
53772: PUSH
53773: LD_VAR 0 1
53777: PPUSH
53778: LD_VAR 0 2
53782: PUSH
53783: LD_VAR 0 4
53787: ARRAY
53788: PUSH
53789: LD_INT 1
53791: ARRAY
53792: PPUSH
53793: LD_VAR 0 2
53797: PUSH
53798: LD_VAR 0 4
53802: ARRAY
53803: PUSH
53804: LD_INT 2
53806: ARRAY
53807: PPUSH
53808: CALL_OW 297
53812: ST_TO_ADDR
// if tdist < dist then
53813: LD_VAR 0 6
53817: PUSH
53818: LD_VAR 0 5
53822: LESS
53823: IFFALSE 53851
// begin hex := hexes [ i ] ;
53825: LD_ADDR_VAR 0 8
53829: PUSH
53830: LD_VAR 0 2
53834: PUSH
53835: LD_VAR 0 4
53839: ARRAY
53840: ST_TO_ADDR
// dist := tdist ;
53841: LD_ADDR_VAR 0 5
53845: PUSH
53846: LD_VAR 0 6
53850: ST_TO_ADDR
// end ; end ;
53851: GO 53765
53853: POP
53854: POP
// result := hex ;
53855: LD_ADDR_VAR 0 3
53859: PUSH
53860: LD_VAR 0 8
53864: ST_TO_ADDR
// end ;
53865: LD_VAR 0 3
53869: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53870: LD_INT 0
53872: PPUSH
53873: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53874: LD_VAR 0 1
53878: NOT
53879: PUSH
53880: LD_VAR 0 1
53884: PUSH
53885: LD_INT 21
53887: PUSH
53888: LD_INT 2
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 23
53897: PUSH
53898: LD_INT 2
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PPUSH
53909: CALL_OW 69
53913: IN
53914: NOT
53915: OR
53916: IFFALSE 53920
// exit ;
53918: GO 53967
// for i = 1 to 3 do
53920: LD_ADDR_VAR 0 3
53924: PUSH
53925: DOUBLE
53926: LD_INT 1
53928: DEC
53929: ST_TO_ADDR
53930: LD_INT 3
53932: PUSH
53933: FOR_TO
53934: IFFALSE 53965
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53936: LD_VAR 0 1
53940: PPUSH
53941: CALL_OW 250
53945: PPUSH
53946: LD_VAR 0 1
53950: PPUSH
53951: CALL_OW 251
53955: PPUSH
53956: LD_INT 1
53958: PPUSH
53959: CALL_OW 453
53963: GO 53933
53965: POP
53966: POP
// end ;
53967: LD_VAR 0 2
53971: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53972: LD_INT 0
53974: PPUSH
53975: PPUSH
53976: PPUSH
53977: PPUSH
53978: PPUSH
53979: PPUSH
// if not unit or not enemy_unit then
53980: LD_VAR 0 1
53984: NOT
53985: PUSH
53986: LD_VAR 0 2
53990: NOT
53991: OR
53992: IFFALSE 53996
// exit ;
53994: GO 54463
// if GetLives ( i ) < 250 then
53996: LD_VAR 0 4
54000: PPUSH
54001: CALL_OW 256
54005: PUSH
54006: LD_INT 250
54008: LESS
54009: IFFALSE 54022
// begin ComAutodestruct ( i ) ;
54011: LD_VAR 0 4
54015: PPUSH
54016: CALL 53870 0 1
// exit ;
54020: GO 54463
// end ; x := GetX ( enemy_unit ) ;
54022: LD_ADDR_VAR 0 7
54026: PUSH
54027: LD_VAR 0 2
54031: PPUSH
54032: CALL_OW 250
54036: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54037: LD_ADDR_VAR 0 8
54041: PUSH
54042: LD_VAR 0 2
54046: PPUSH
54047: CALL_OW 251
54051: ST_TO_ADDR
// if not x or not y then
54052: LD_VAR 0 7
54056: NOT
54057: PUSH
54058: LD_VAR 0 8
54062: NOT
54063: OR
54064: IFFALSE 54068
// exit ;
54066: GO 54463
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54068: LD_ADDR_VAR 0 6
54072: PUSH
54073: LD_VAR 0 7
54077: PPUSH
54078: LD_INT 0
54080: PPUSH
54081: LD_INT 4
54083: PPUSH
54084: CALL_OW 272
54088: PUSH
54089: LD_VAR 0 8
54093: PPUSH
54094: LD_INT 0
54096: PPUSH
54097: LD_INT 4
54099: PPUSH
54100: CALL_OW 273
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_VAR 0 7
54113: PPUSH
54114: LD_INT 1
54116: PPUSH
54117: LD_INT 4
54119: PPUSH
54120: CALL_OW 272
54124: PUSH
54125: LD_VAR 0 8
54129: PPUSH
54130: LD_INT 1
54132: PPUSH
54133: LD_INT 4
54135: PPUSH
54136: CALL_OW 273
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_VAR 0 7
54149: PPUSH
54150: LD_INT 2
54152: PPUSH
54153: LD_INT 4
54155: PPUSH
54156: CALL_OW 272
54160: PUSH
54161: LD_VAR 0 8
54165: PPUSH
54166: LD_INT 2
54168: PPUSH
54169: LD_INT 4
54171: PPUSH
54172: CALL_OW 273
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_VAR 0 7
54185: PPUSH
54186: LD_INT 3
54188: PPUSH
54189: LD_INT 4
54191: PPUSH
54192: CALL_OW 272
54196: PUSH
54197: LD_VAR 0 8
54201: PPUSH
54202: LD_INT 3
54204: PPUSH
54205: LD_INT 4
54207: PPUSH
54208: CALL_OW 273
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_VAR 0 7
54221: PPUSH
54222: LD_INT 4
54224: PPUSH
54225: LD_INT 4
54227: PPUSH
54228: CALL_OW 272
54232: PUSH
54233: LD_VAR 0 8
54237: PPUSH
54238: LD_INT 4
54240: PPUSH
54241: LD_INT 4
54243: PPUSH
54244: CALL_OW 273
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_VAR 0 7
54257: PPUSH
54258: LD_INT 5
54260: PPUSH
54261: LD_INT 4
54263: PPUSH
54264: CALL_OW 272
54268: PUSH
54269: LD_VAR 0 8
54273: PPUSH
54274: LD_INT 5
54276: PPUSH
54277: LD_INT 4
54279: PPUSH
54280: CALL_OW 273
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: ST_TO_ADDR
// for i = tmp downto 1 do
54297: LD_ADDR_VAR 0 4
54301: PUSH
54302: DOUBLE
54303: LD_VAR 0 6
54307: INC
54308: ST_TO_ADDR
54309: LD_INT 1
54311: PUSH
54312: FOR_DOWNTO
54313: IFFALSE 54414
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54315: LD_VAR 0 6
54319: PUSH
54320: LD_VAR 0 4
54324: ARRAY
54325: PUSH
54326: LD_INT 1
54328: ARRAY
54329: PPUSH
54330: LD_VAR 0 6
54334: PUSH
54335: LD_VAR 0 4
54339: ARRAY
54340: PUSH
54341: LD_INT 2
54343: ARRAY
54344: PPUSH
54345: CALL_OW 488
54349: NOT
54350: PUSH
54351: LD_VAR 0 6
54355: PUSH
54356: LD_VAR 0 4
54360: ARRAY
54361: PUSH
54362: LD_INT 1
54364: ARRAY
54365: PPUSH
54366: LD_VAR 0 6
54370: PUSH
54371: LD_VAR 0 4
54375: ARRAY
54376: PUSH
54377: LD_INT 2
54379: ARRAY
54380: PPUSH
54381: CALL_OW 428
54385: PUSH
54386: LD_INT 0
54388: NONEQUAL
54389: OR
54390: IFFALSE 54412
// tmp := Delete ( tmp , i ) ;
54392: LD_ADDR_VAR 0 6
54396: PUSH
54397: LD_VAR 0 6
54401: PPUSH
54402: LD_VAR 0 4
54406: PPUSH
54407: CALL_OW 3
54411: ST_TO_ADDR
54412: GO 54312
54414: POP
54415: POP
// j := GetClosestHex ( unit , tmp ) ;
54416: LD_ADDR_VAR 0 5
54420: PUSH
54421: LD_VAR 0 1
54425: PPUSH
54426: LD_VAR 0 6
54430: PPUSH
54431: CALL 53718 0 2
54435: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54436: LD_VAR 0 1
54440: PPUSH
54441: LD_VAR 0 5
54445: PUSH
54446: LD_INT 1
54448: ARRAY
54449: PPUSH
54450: LD_VAR 0 5
54454: PUSH
54455: LD_INT 2
54457: ARRAY
54458: PPUSH
54459: CALL_OW 111
// end ;
54463: LD_VAR 0 3
54467: RET
// export function PrepareApemanSoldier ( ) ; begin
54468: LD_INT 0
54470: PPUSH
// uc_nation := 0 ;
54471: LD_ADDR_OWVAR 21
54475: PUSH
54476: LD_INT 0
54478: ST_TO_ADDR
// hc_sex := sex_male ;
54479: LD_ADDR_OWVAR 27
54483: PUSH
54484: LD_INT 1
54486: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
54487: LD_ADDR_OWVAR 28
54491: PUSH
54492: LD_INT 15
54494: ST_TO_ADDR
// hc_gallery :=  ;
54495: LD_ADDR_OWVAR 33
54499: PUSH
54500: LD_STRING 
54502: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54503: LD_ADDR_OWVAR 31
54507: PUSH
54508: LD_INT 0
54510: PPUSH
54511: LD_INT 3
54513: PPUSH
54514: CALL_OW 12
54518: PUSH
54519: LD_INT 0
54521: PPUSH
54522: LD_INT 3
54524: PPUSH
54525: CALL_OW 12
54529: PUSH
54530: LD_INT 0
54532: PUSH
54533: LD_INT 0
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: ST_TO_ADDR
// end ;
54542: LD_VAR 0 1
54546: RET
// export function PrepareApemanEngineer ( ) ; begin
54547: LD_INT 0
54549: PPUSH
// uc_nation := 0 ;
54550: LD_ADDR_OWVAR 21
54554: PUSH
54555: LD_INT 0
54557: ST_TO_ADDR
// hc_sex := sex_male ;
54558: LD_ADDR_OWVAR 27
54562: PUSH
54563: LD_INT 1
54565: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
54566: LD_ADDR_OWVAR 28
54570: PUSH
54571: LD_INT 16
54573: ST_TO_ADDR
// hc_gallery :=  ;
54574: LD_ADDR_OWVAR 33
54578: PUSH
54579: LD_STRING 
54581: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54582: LD_ADDR_OWVAR 31
54586: PUSH
54587: LD_INT 0
54589: PPUSH
54590: LD_INT 3
54592: PPUSH
54593: CALL_OW 12
54597: PUSH
54598: LD_INT 0
54600: PPUSH
54601: LD_INT 3
54603: PPUSH
54604: CALL_OW 12
54608: PUSH
54609: LD_INT 0
54611: PUSH
54612: LD_INT 0
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: ST_TO_ADDR
// end ;
54621: LD_VAR 0 1
54625: RET
// export function PrepareApeman ( agressivity ) ; begin
54626: LD_INT 0
54628: PPUSH
// uc_side := 0 ;
54629: LD_ADDR_OWVAR 20
54633: PUSH
54634: LD_INT 0
54636: ST_TO_ADDR
// uc_nation := 0 ;
54637: LD_ADDR_OWVAR 21
54641: PUSH
54642: LD_INT 0
54644: ST_TO_ADDR
// hc_sex := sex_male ;
54645: LD_ADDR_OWVAR 27
54649: PUSH
54650: LD_INT 1
54652: ST_TO_ADDR
// hc_class := class_apeman ;
54653: LD_ADDR_OWVAR 28
54657: PUSH
54658: LD_INT 12
54660: ST_TO_ADDR
// hc_gallery :=  ;
54661: LD_ADDR_OWVAR 33
54665: PUSH
54666: LD_STRING 
54668: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
54669: LD_ADDR_OWVAR 35
54673: PUSH
54674: LD_VAR 0 1
54678: NEG
54679: PPUSH
54680: LD_VAR 0 1
54684: PPUSH
54685: CALL_OW 12
54689: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54690: LD_ADDR_OWVAR 31
54694: PUSH
54695: LD_INT 0
54697: PPUSH
54698: LD_INT 3
54700: PPUSH
54701: CALL_OW 12
54705: PUSH
54706: LD_INT 0
54708: PPUSH
54709: LD_INT 3
54711: PPUSH
54712: CALL_OW 12
54716: PUSH
54717: LD_INT 0
54719: PUSH
54720: LD_INT 0
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: ST_TO_ADDR
// end ;
54729: LD_VAR 0 2
54733: RET
// export function PrepareTiger ( agressivity ) ; begin
54734: LD_INT 0
54736: PPUSH
// uc_side := 0 ;
54737: LD_ADDR_OWVAR 20
54741: PUSH
54742: LD_INT 0
54744: ST_TO_ADDR
// uc_nation := 0 ;
54745: LD_ADDR_OWVAR 21
54749: PUSH
54750: LD_INT 0
54752: ST_TO_ADDR
// hc_class := class_tiger ;
54753: LD_ADDR_OWVAR 28
54757: PUSH
54758: LD_INT 14
54760: ST_TO_ADDR
// hc_gallery :=  ;
54761: LD_ADDR_OWVAR 33
54765: PUSH
54766: LD_STRING 
54768: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
54769: LD_ADDR_OWVAR 35
54773: PUSH
54774: LD_VAR 0 1
54778: NEG
54779: PPUSH
54780: LD_VAR 0 1
54784: PPUSH
54785: CALL_OW 12
54789: ST_TO_ADDR
// end ;
54790: LD_VAR 0 2
54794: RET
// export function PrepareEnchidna ( ) ; begin
54795: LD_INT 0
54797: PPUSH
// uc_side := 0 ;
54798: LD_ADDR_OWVAR 20
54802: PUSH
54803: LD_INT 0
54805: ST_TO_ADDR
// uc_nation := 0 ;
54806: LD_ADDR_OWVAR 21
54810: PUSH
54811: LD_INT 0
54813: ST_TO_ADDR
// hc_class := class_baggie ;
54814: LD_ADDR_OWVAR 28
54818: PUSH
54819: LD_INT 13
54821: ST_TO_ADDR
// hc_gallery :=  ;
54822: LD_ADDR_OWVAR 33
54826: PUSH
54827: LD_STRING 
54829: ST_TO_ADDR
// end ;
54830: LD_VAR 0 1
54834: RET
// export function PrepareFrog ( ) ; begin
54835: LD_INT 0
54837: PPUSH
// uc_side := 0 ;
54838: LD_ADDR_OWVAR 20
54842: PUSH
54843: LD_INT 0
54845: ST_TO_ADDR
// uc_nation := 0 ;
54846: LD_ADDR_OWVAR 21
54850: PUSH
54851: LD_INT 0
54853: ST_TO_ADDR
// hc_class := class_frog ;
54854: LD_ADDR_OWVAR 28
54858: PUSH
54859: LD_INT 19
54861: ST_TO_ADDR
// hc_gallery :=  ;
54862: LD_ADDR_OWVAR 33
54866: PUSH
54867: LD_STRING 
54869: ST_TO_ADDR
// end ;
54870: LD_VAR 0 1
54874: RET
// export function PrepareFish ( ) ; begin
54875: LD_INT 0
54877: PPUSH
// uc_side := 0 ;
54878: LD_ADDR_OWVAR 20
54882: PUSH
54883: LD_INT 0
54885: ST_TO_ADDR
// uc_nation := 0 ;
54886: LD_ADDR_OWVAR 21
54890: PUSH
54891: LD_INT 0
54893: ST_TO_ADDR
// hc_class := class_fish ;
54894: LD_ADDR_OWVAR 28
54898: PUSH
54899: LD_INT 20
54901: ST_TO_ADDR
// hc_gallery :=  ;
54902: LD_ADDR_OWVAR 33
54906: PUSH
54907: LD_STRING 
54909: ST_TO_ADDR
// end ;
54910: LD_VAR 0 1
54914: RET
// export function PrepareBird ( ) ; begin
54915: LD_INT 0
54917: PPUSH
// uc_side := 0 ;
54918: LD_ADDR_OWVAR 20
54922: PUSH
54923: LD_INT 0
54925: ST_TO_ADDR
// uc_nation := 0 ;
54926: LD_ADDR_OWVAR 21
54930: PUSH
54931: LD_INT 0
54933: ST_TO_ADDR
// hc_class := class_phororhacos ;
54934: LD_ADDR_OWVAR 28
54938: PUSH
54939: LD_INT 18
54941: ST_TO_ADDR
// hc_gallery :=  ;
54942: LD_ADDR_OWVAR 33
54946: PUSH
54947: LD_STRING 
54949: ST_TO_ADDR
// end ;
54950: LD_VAR 0 1
54954: RET
// export function PrepareHorse ( ) ; begin
54955: LD_INT 0
54957: PPUSH
// uc_side := 0 ;
54958: LD_ADDR_OWVAR 20
54962: PUSH
54963: LD_INT 0
54965: ST_TO_ADDR
// uc_nation := 0 ;
54966: LD_ADDR_OWVAR 21
54970: PUSH
54971: LD_INT 0
54973: ST_TO_ADDR
// hc_class := class_horse ;
54974: LD_ADDR_OWVAR 28
54978: PUSH
54979: LD_INT 21
54981: ST_TO_ADDR
// hc_gallery :=  ;
54982: LD_ADDR_OWVAR 33
54986: PUSH
54987: LD_STRING 
54989: ST_TO_ADDR
// end ;
54990: LD_VAR 0 1
54994: RET
// export function PrepareMastodont ( ) ; begin
54995: LD_INT 0
54997: PPUSH
// uc_side := 0 ;
54998: LD_ADDR_OWVAR 20
55002: PUSH
55003: LD_INT 0
55005: ST_TO_ADDR
// uc_nation := 0 ;
55006: LD_ADDR_OWVAR 21
55010: PUSH
55011: LD_INT 0
55013: ST_TO_ADDR
// vc_chassis := class_mastodont ;
55014: LD_ADDR_OWVAR 37
55018: PUSH
55019: LD_INT 31
55021: ST_TO_ADDR
// vc_control := control_rider ;
55022: LD_ADDR_OWVAR 38
55026: PUSH
55027: LD_INT 4
55029: ST_TO_ADDR
// end ;
55030: LD_VAR 0 1
55034: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55035: LD_INT 0
55037: PPUSH
55038: PPUSH
55039: PPUSH
// uc_side = 0 ;
55040: LD_ADDR_OWVAR 20
55044: PUSH
55045: LD_INT 0
55047: ST_TO_ADDR
// uc_nation = 0 ;
55048: LD_ADDR_OWVAR 21
55052: PUSH
55053: LD_INT 0
55055: ST_TO_ADDR
// InitHc_All ( ) ;
55056: CALL_OW 584
// InitVc ;
55060: CALL_OW 20
// if mastodonts then
55064: LD_VAR 0 6
55068: IFFALSE 55135
// for i = 1 to mastodonts do
55070: LD_ADDR_VAR 0 11
55074: PUSH
55075: DOUBLE
55076: LD_INT 1
55078: DEC
55079: ST_TO_ADDR
55080: LD_VAR 0 6
55084: PUSH
55085: FOR_TO
55086: IFFALSE 55133
// begin vc_chassis := 31 ;
55088: LD_ADDR_OWVAR 37
55092: PUSH
55093: LD_INT 31
55095: ST_TO_ADDR
// vc_control := control_rider ;
55096: LD_ADDR_OWVAR 38
55100: PUSH
55101: LD_INT 4
55103: ST_TO_ADDR
// animal := CreateVehicle ;
55104: LD_ADDR_VAR 0 12
55108: PUSH
55109: CALL_OW 45
55113: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55114: LD_VAR 0 12
55118: PPUSH
55119: LD_VAR 0 8
55123: PPUSH
55124: LD_INT 0
55126: PPUSH
55127: CALL 57263 0 3
// end ;
55131: GO 55085
55133: POP
55134: POP
// if horses then
55135: LD_VAR 0 5
55139: IFFALSE 55206
// for i = 1 to horses do
55141: LD_ADDR_VAR 0 11
55145: PUSH
55146: DOUBLE
55147: LD_INT 1
55149: DEC
55150: ST_TO_ADDR
55151: LD_VAR 0 5
55155: PUSH
55156: FOR_TO
55157: IFFALSE 55204
// begin hc_class := 21 ;
55159: LD_ADDR_OWVAR 28
55163: PUSH
55164: LD_INT 21
55166: ST_TO_ADDR
// hc_gallery :=  ;
55167: LD_ADDR_OWVAR 33
55171: PUSH
55172: LD_STRING 
55174: ST_TO_ADDR
// animal := CreateHuman ;
55175: LD_ADDR_VAR 0 12
55179: PUSH
55180: CALL_OW 44
55184: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55185: LD_VAR 0 12
55189: PPUSH
55190: LD_VAR 0 8
55194: PPUSH
55195: LD_INT 0
55197: PPUSH
55198: CALL 57263 0 3
// end ;
55202: GO 55156
55204: POP
55205: POP
// if birds then
55206: LD_VAR 0 1
55210: IFFALSE 55277
// for i = 1 to birds do
55212: LD_ADDR_VAR 0 11
55216: PUSH
55217: DOUBLE
55218: LD_INT 1
55220: DEC
55221: ST_TO_ADDR
55222: LD_VAR 0 1
55226: PUSH
55227: FOR_TO
55228: IFFALSE 55275
// begin hc_class := 18 ;
55230: LD_ADDR_OWVAR 28
55234: PUSH
55235: LD_INT 18
55237: ST_TO_ADDR
// hc_gallery =  ;
55238: LD_ADDR_OWVAR 33
55242: PUSH
55243: LD_STRING 
55245: ST_TO_ADDR
// animal := CreateHuman ;
55246: LD_ADDR_VAR 0 12
55250: PUSH
55251: CALL_OW 44
55255: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55256: LD_VAR 0 12
55260: PPUSH
55261: LD_VAR 0 8
55265: PPUSH
55266: LD_INT 0
55268: PPUSH
55269: CALL 57263 0 3
// end ;
55273: GO 55227
55275: POP
55276: POP
// if tigers then
55277: LD_VAR 0 2
55281: IFFALSE 55365
// for i = 1 to tigers do
55283: LD_ADDR_VAR 0 11
55287: PUSH
55288: DOUBLE
55289: LD_INT 1
55291: DEC
55292: ST_TO_ADDR
55293: LD_VAR 0 2
55297: PUSH
55298: FOR_TO
55299: IFFALSE 55363
// begin hc_class = class_tiger ;
55301: LD_ADDR_OWVAR 28
55305: PUSH
55306: LD_INT 14
55308: ST_TO_ADDR
// hc_gallery =  ;
55309: LD_ADDR_OWVAR 33
55313: PUSH
55314: LD_STRING 
55316: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
55317: LD_ADDR_OWVAR 35
55321: PUSH
55322: LD_INT 7
55324: NEG
55325: PPUSH
55326: LD_INT 7
55328: PPUSH
55329: CALL_OW 12
55333: ST_TO_ADDR
// animal := CreateHuman ;
55334: LD_ADDR_VAR 0 12
55338: PUSH
55339: CALL_OW 44
55343: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55344: LD_VAR 0 12
55348: PPUSH
55349: LD_VAR 0 8
55353: PPUSH
55354: LD_INT 0
55356: PPUSH
55357: CALL 57263 0 3
// end ;
55361: GO 55298
55363: POP
55364: POP
// if apemans then
55365: LD_VAR 0 3
55369: IFFALSE 55492
// for i = 1 to apemans do
55371: LD_ADDR_VAR 0 11
55375: PUSH
55376: DOUBLE
55377: LD_INT 1
55379: DEC
55380: ST_TO_ADDR
55381: LD_VAR 0 3
55385: PUSH
55386: FOR_TO
55387: IFFALSE 55490
// begin hc_class = class_apeman ;
55389: LD_ADDR_OWVAR 28
55393: PUSH
55394: LD_INT 12
55396: ST_TO_ADDR
// hc_gallery =  ;
55397: LD_ADDR_OWVAR 33
55401: PUSH
55402: LD_STRING 
55404: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
55405: LD_ADDR_OWVAR 35
55409: PUSH
55410: LD_INT 2
55412: NEG
55413: PPUSH
55414: LD_INT 2
55416: PPUSH
55417: CALL_OW 12
55421: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
55422: LD_ADDR_OWVAR 31
55426: PUSH
55427: LD_INT 1
55429: PPUSH
55430: LD_INT 3
55432: PPUSH
55433: CALL_OW 12
55437: PUSH
55438: LD_INT 1
55440: PPUSH
55441: LD_INT 3
55443: PPUSH
55444: CALL_OW 12
55448: PUSH
55449: LD_INT 0
55451: PUSH
55452: LD_INT 0
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: ST_TO_ADDR
// animal := CreateHuman ;
55461: LD_ADDR_VAR 0 12
55465: PUSH
55466: CALL_OW 44
55470: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55471: LD_VAR 0 12
55475: PPUSH
55476: LD_VAR 0 8
55480: PPUSH
55481: LD_INT 0
55483: PPUSH
55484: CALL 57263 0 3
// end ;
55488: GO 55386
55490: POP
55491: POP
// if enchidnas then
55492: LD_VAR 0 4
55496: IFFALSE 55563
// for i = 1 to enchidnas do
55498: LD_ADDR_VAR 0 11
55502: PUSH
55503: DOUBLE
55504: LD_INT 1
55506: DEC
55507: ST_TO_ADDR
55508: LD_VAR 0 4
55512: PUSH
55513: FOR_TO
55514: IFFALSE 55561
// begin hc_class = 13 ;
55516: LD_ADDR_OWVAR 28
55520: PUSH
55521: LD_INT 13
55523: ST_TO_ADDR
// hc_gallery =  ;
55524: LD_ADDR_OWVAR 33
55528: PUSH
55529: LD_STRING 
55531: ST_TO_ADDR
// animal := CreateHuman ;
55532: LD_ADDR_VAR 0 12
55536: PUSH
55537: CALL_OW 44
55541: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55542: LD_VAR 0 12
55546: PPUSH
55547: LD_VAR 0 8
55551: PPUSH
55552: LD_INT 0
55554: PPUSH
55555: CALL 57263 0 3
// end ;
55559: GO 55513
55561: POP
55562: POP
// if fishes then
55563: LD_VAR 0 7
55567: IFFALSE 55634
// for i = 1 to fishes do
55569: LD_ADDR_VAR 0 11
55573: PUSH
55574: DOUBLE
55575: LD_INT 1
55577: DEC
55578: ST_TO_ADDR
55579: LD_VAR 0 7
55583: PUSH
55584: FOR_TO
55585: IFFALSE 55632
// begin hc_class = 20 ;
55587: LD_ADDR_OWVAR 28
55591: PUSH
55592: LD_INT 20
55594: ST_TO_ADDR
// hc_gallery =  ;
55595: LD_ADDR_OWVAR 33
55599: PUSH
55600: LD_STRING 
55602: ST_TO_ADDR
// animal := CreateHuman ;
55603: LD_ADDR_VAR 0 12
55607: PUSH
55608: CALL_OW 44
55612: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
55613: LD_VAR 0 12
55617: PPUSH
55618: LD_VAR 0 9
55622: PPUSH
55623: LD_INT 0
55625: PPUSH
55626: CALL 57263 0 3
// end ;
55630: GO 55584
55632: POP
55633: POP
// end ;
55634: LD_VAR 0 10
55638: RET
// export function WantHeal ( sci , unit ) ; begin
55639: LD_INT 0
55641: PPUSH
// if GetTaskList ( sci ) > 0 then
55642: LD_VAR 0 1
55646: PPUSH
55647: CALL_OW 437
55651: PUSH
55652: LD_INT 0
55654: GREATER
55655: IFFALSE 55725
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
55657: LD_VAR 0 1
55661: PPUSH
55662: CALL_OW 437
55666: PUSH
55667: LD_INT 1
55669: ARRAY
55670: PUSH
55671: LD_INT 1
55673: ARRAY
55674: PUSH
55675: LD_STRING l
55677: EQUAL
55678: PUSH
55679: LD_VAR 0 1
55683: PPUSH
55684: CALL_OW 437
55688: PUSH
55689: LD_INT 1
55691: ARRAY
55692: PUSH
55693: LD_INT 4
55695: ARRAY
55696: PUSH
55697: LD_VAR 0 2
55701: EQUAL
55702: AND
55703: IFFALSE 55715
// result := true else
55705: LD_ADDR_VAR 0 3
55709: PUSH
55710: LD_INT 1
55712: ST_TO_ADDR
55713: GO 55723
// result := false ;
55715: LD_ADDR_VAR 0 3
55719: PUSH
55720: LD_INT 0
55722: ST_TO_ADDR
// end else
55723: GO 55733
// result := false ;
55725: LD_ADDR_VAR 0 3
55729: PUSH
55730: LD_INT 0
55732: ST_TO_ADDR
// end ;
55733: LD_VAR 0 3
55737: RET
// export function HealTarget ( sci ) ; begin
55738: LD_INT 0
55740: PPUSH
// if not sci then
55741: LD_VAR 0 1
55745: NOT
55746: IFFALSE 55750
// exit ;
55748: GO 55815
// result := 0 ;
55750: LD_ADDR_VAR 0 2
55754: PUSH
55755: LD_INT 0
55757: ST_TO_ADDR
// if GetTaskList ( sci ) then
55758: LD_VAR 0 1
55762: PPUSH
55763: CALL_OW 437
55767: IFFALSE 55815
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
55769: LD_VAR 0 1
55773: PPUSH
55774: CALL_OW 437
55778: PUSH
55779: LD_INT 1
55781: ARRAY
55782: PUSH
55783: LD_INT 1
55785: ARRAY
55786: PUSH
55787: LD_STRING l
55789: EQUAL
55790: IFFALSE 55815
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
55792: LD_ADDR_VAR 0 2
55796: PUSH
55797: LD_VAR 0 1
55801: PPUSH
55802: CALL_OW 437
55806: PUSH
55807: LD_INT 1
55809: ARRAY
55810: PUSH
55811: LD_INT 4
55813: ARRAY
55814: ST_TO_ADDR
// end ;
55815: LD_VAR 0 2
55819: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
55820: LD_INT 0
55822: PPUSH
55823: PPUSH
55824: PPUSH
55825: PPUSH
// if not base_units then
55826: LD_VAR 0 1
55830: NOT
55831: IFFALSE 55835
// exit ;
55833: GO 55922
// result := false ;
55835: LD_ADDR_VAR 0 2
55839: PUSH
55840: LD_INT 0
55842: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
55843: LD_ADDR_VAR 0 5
55847: PUSH
55848: LD_VAR 0 1
55852: PPUSH
55853: LD_INT 21
55855: PUSH
55856: LD_INT 3
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PPUSH
55863: CALL_OW 72
55867: ST_TO_ADDR
// if not tmp then
55868: LD_VAR 0 5
55872: NOT
55873: IFFALSE 55877
// exit ;
55875: GO 55922
// for i in tmp do
55877: LD_ADDR_VAR 0 3
55881: PUSH
55882: LD_VAR 0 5
55886: PUSH
55887: FOR_IN
55888: IFFALSE 55920
// begin result := EnemyInRange ( i , 22 ) ;
55890: LD_ADDR_VAR 0 2
55894: PUSH
55895: LD_VAR 0 3
55899: PPUSH
55900: LD_INT 22
55902: PPUSH
55903: CALL 53520 0 2
55907: ST_TO_ADDR
// if result then
55908: LD_VAR 0 2
55912: IFFALSE 55918
// exit ;
55914: POP
55915: POP
55916: GO 55922
// end ;
55918: GO 55887
55920: POP
55921: POP
// end ;
55922: LD_VAR 0 2
55926: RET
// export function FilterByTag ( units , tag ) ; begin
55927: LD_INT 0
55929: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
55930: LD_ADDR_VAR 0 3
55934: PUSH
55935: LD_VAR 0 1
55939: PPUSH
55940: LD_INT 120
55942: PUSH
55943: LD_VAR 0 2
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PPUSH
55952: CALL_OW 72
55956: ST_TO_ADDR
// end ;
55957: LD_VAR 0 3
55961: RET
// export function IsDriver ( un ) ; begin
55962: LD_INT 0
55964: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
55965: LD_ADDR_VAR 0 2
55969: PUSH
55970: LD_VAR 0 1
55974: PUSH
55975: LD_INT 55
55977: PUSH
55978: EMPTY
55979: LIST
55980: PPUSH
55981: CALL_OW 69
55985: IN
55986: ST_TO_ADDR
// end ;
55987: LD_VAR 0 2
55991: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
55992: LD_INT 0
55994: PPUSH
55995: PPUSH
// list := [ ] ;
55996: LD_ADDR_VAR 0 5
56000: PUSH
56001: EMPTY
56002: ST_TO_ADDR
// case d of 0 :
56003: LD_VAR 0 3
56007: PUSH
56008: LD_INT 0
56010: DOUBLE
56011: EQUAL
56012: IFTRUE 56016
56014: GO 56149
56016: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56017: LD_ADDR_VAR 0 5
56021: PUSH
56022: LD_VAR 0 1
56026: PUSH
56027: LD_INT 4
56029: MINUS
56030: PUSH
56031: LD_VAR 0 2
56035: PUSH
56036: LD_INT 4
56038: MINUS
56039: PUSH
56040: LD_INT 2
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: LIST
56047: PUSH
56048: LD_VAR 0 1
56052: PUSH
56053: LD_INT 3
56055: MINUS
56056: PUSH
56057: LD_VAR 0 2
56061: PUSH
56062: LD_INT 1
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: LIST
56069: PUSH
56070: LD_VAR 0 1
56074: PUSH
56075: LD_INT 4
56077: PLUS
56078: PUSH
56079: LD_VAR 0 2
56083: PUSH
56084: LD_INT 4
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: LIST
56091: PUSH
56092: LD_VAR 0 1
56096: PUSH
56097: LD_INT 3
56099: PLUS
56100: PUSH
56101: LD_VAR 0 2
56105: PUSH
56106: LD_INT 3
56108: PLUS
56109: PUSH
56110: LD_INT 5
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: LIST
56117: PUSH
56118: LD_VAR 0 1
56122: PUSH
56123: LD_VAR 0 2
56127: PUSH
56128: LD_INT 4
56130: PLUS
56131: PUSH
56132: LD_INT 0
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: LIST
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: ST_TO_ADDR
// end ; 1 :
56147: GO 56847
56149: LD_INT 1
56151: DOUBLE
56152: EQUAL
56153: IFTRUE 56157
56155: GO 56290
56157: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
56158: LD_ADDR_VAR 0 5
56162: PUSH
56163: LD_VAR 0 1
56167: PUSH
56168: LD_VAR 0 2
56172: PUSH
56173: LD_INT 4
56175: MINUS
56176: PUSH
56177: LD_INT 3
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: LIST
56184: PUSH
56185: LD_VAR 0 1
56189: PUSH
56190: LD_INT 3
56192: MINUS
56193: PUSH
56194: LD_VAR 0 2
56198: PUSH
56199: LD_INT 3
56201: MINUS
56202: PUSH
56203: LD_INT 2
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: LIST
56210: PUSH
56211: LD_VAR 0 1
56215: PUSH
56216: LD_INT 4
56218: MINUS
56219: PUSH
56220: LD_VAR 0 2
56224: PUSH
56225: LD_INT 1
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: LIST
56232: PUSH
56233: LD_VAR 0 1
56237: PUSH
56238: LD_VAR 0 2
56242: PUSH
56243: LD_INT 3
56245: PLUS
56246: PUSH
56247: LD_INT 0
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: LIST
56254: PUSH
56255: LD_VAR 0 1
56259: PUSH
56260: LD_INT 4
56262: PLUS
56263: PUSH
56264: LD_VAR 0 2
56268: PUSH
56269: LD_INT 4
56271: PLUS
56272: PUSH
56273: LD_INT 5
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: LIST
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: ST_TO_ADDR
// end ; 2 :
56288: GO 56847
56290: LD_INT 2
56292: DOUBLE
56293: EQUAL
56294: IFTRUE 56298
56296: GO 56427
56298: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
56299: LD_ADDR_VAR 0 5
56303: PUSH
56304: LD_VAR 0 1
56308: PUSH
56309: LD_VAR 0 2
56313: PUSH
56314: LD_INT 3
56316: MINUS
56317: PUSH
56318: LD_INT 3
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: LIST
56325: PUSH
56326: LD_VAR 0 1
56330: PUSH
56331: LD_INT 4
56333: PLUS
56334: PUSH
56335: LD_VAR 0 2
56339: PUSH
56340: LD_INT 4
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: LIST
56347: PUSH
56348: LD_VAR 0 1
56352: PUSH
56353: LD_VAR 0 2
56357: PUSH
56358: LD_INT 4
56360: PLUS
56361: PUSH
56362: LD_INT 0
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: LIST
56369: PUSH
56370: LD_VAR 0 1
56374: PUSH
56375: LD_INT 3
56377: MINUS
56378: PUSH
56379: LD_VAR 0 2
56383: PUSH
56384: LD_INT 1
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: LIST
56391: PUSH
56392: LD_VAR 0 1
56396: PUSH
56397: LD_INT 4
56399: MINUS
56400: PUSH
56401: LD_VAR 0 2
56405: PUSH
56406: LD_INT 4
56408: MINUS
56409: PUSH
56410: LD_INT 2
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: LIST
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: ST_TO_ADDR
// end ; 3 :
56425: GO 56847
56427: LD_INT 3
56429: DOUBLE
56430: EQUAL
56431: IFTRUE 56435
56433: GO 56568
56435: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
56436: LD_ADDR_VAR 0 5
56440: PUSH
56441: LD_VAR 0 1
56445: PUSH
56446: LD_INT 3
56448: PLUS
56449: PUSH
56450: LD_VAR 0 2
56454: PUSH
56455: LD_INT 4
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: LIST
56462: PUSH
56463: LD_VAR 0 1
56467: PUSH
56468: LD_INT 4
56470: PLUS
56471: PUSH
56472: LD_VAR 0 2
56476: PUSH
56477: LD_INT 4
56479: PLUS
56480: PUSH
56481: LD_INT 5
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: LIST
56488: PUSH
56489: LD_VAR 0 1
56493: PUSH
56494: LD_INT 4
56496: MINUS
56497: PUSH
56498: LD_VAR 0 2
56502: PUSH
56503: LD_INT 1
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: LIST
56510: PUSH
56511: LD_VAR 0 1
56515: PUSH
56516: LD_VAR 0 2
56520: PUSH
56521: LD_INT 4
56523: MINUS
56524: PUSH
56525: LD_INT 3
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: LIST
56532: PUSH
56533: LD_VAR 0 1
56537: PUSH
56538: LD_INT 3
56540: MINUS
56541: PUSH
56542: LD_VAR 0 2
56546: PUSH
56547: LD_INT 3
56549: MINUS
56550: PUSH
56551: LD_INT 2
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: LIST
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: ST_TO_ADDR
// end ; 4 :
56566: GO 56847
56568: LD_INT 4
56570: DOUBLE
56571: EQUAL
56572: IFTRUE 56576
56574: GO 56709
56576: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
56577: LD_ADDR_VAR 0 5
56581: PUSH
56582: LD_VAR 0 1
56586: PUSH
56587: LD_VAR 0 2
56591: PUSH
56592: LD_INT 4
56594: PLUS
56595: PUSH
56596: LD_INT 0
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: LIST
56603: PUSH
56604: LD_VAR 0 1
56608: PUSH
56609: LD_INT 3
56611: PLUS
56612: PUSH
56613: LD_VAR 0 2
56617: PUSH
56618: LD_INT 3
56620: PLUS
56621: PUSH
56622: LD_INT 5
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: LIST
56629: PUSH
56630: LD_VAR 0 1
56634: PUSH
56635: LD_INT 4
56637: PLUS
56638: PUSH
56639: LD_VAR 0 2
56643: PUSH
56644: LD_INT 4
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: LIST
56651: PUSH
56652: LD_VAR 0 1
56656: PUSH
56657: LD_VAR 0 2
56661: PUSH
56662: LD_INT 3
56664: MINUS
56665: PUSH
56666: LD_INT 3
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: LIST
56673: PUSH
56674: LD_VAR 0 1
56678: PUSH
56679: LD_INT 4
56681: MINUS
56682: PUSH
56683: LD_VAR 0 2
56687: PUSH
56688: LD_INT 4
56690: MINUS
56691: PUSH
56692: LD_INT 2
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: LIST
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: ST_TO_ADDR
// end ; 5 :
56707: GO 56847
56709: LD_INT 5
56711: DOUBLE
56712: EQUAL
56713: IFTRUE 56717
56715: GO 56846
56717: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
56718: LD_ADDR_VAR 0 5
56722: PUSH
56723: LD_VAR 0 1
56727: PUSH
56728: LD_INT 4
56730: MINUS
56731: PUSH
56732: LD_VAR 0 2
56736: PUSH
56737: LD_INT 1
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: LIST
56744: PUSH
56745: LD_VAR 0 1
56749: PUSH
56750: LD_VAR 0 2
56754: PUSH
56755: LD_INT 4
56757: MINUS
56758: PUSH
56759: LD_INT 3
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: LIST
56766: PUSH
56767: LD_VAR 0 1
56771: PUSH
56772: LD_INT 4
56774: PLUS
56775: PUSH
56776: LD_VAR 0 2
56780: PUSH
56781: LD_INT 4
56783: PLUS
56784: PUSH
56785: LD_INT 5
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: LIST
56792: PUSH
56793: LD_VAR 0 1
56797: PUSH
56798: LD_INT 3
56800: PLUS
56801: PUSH
56802: LD_VAR 0 2
56806: PUSH
56807: LD_INT 4
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: LIST
56814: PUSH
56815: LD_VAR 0 1
56819: PUSH
56820: LD_VAR 0 2
56824: PUSH
56825: LD_INT 3
56827: PLUS
56828: PUSH
56829: LD_INT 0
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: LIST
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: ST_TO_ADDR
// end ; end ;
56844: GO 56847
56846: POP
// result := list ;
56847: LD_ADDR_VAR 0 4
56851: PUSH
56852: LD_VAR 0 5
56856: ST_TO_ADDR
// end ;
56857: LD_VAR 0 4
56861: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
56862: LD_INT 0
56864: PPUSH
56865: PPUSH
56866: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
56867: LD_VAR 0 1
56871: NOT
56872: PUSH
56873: LD_VAR 0 2
56877: PUSH
56878: LD_INT 1
56880: PUSH
56881: LD_INT 2
56883: PUSH
56884: LD_INT 3
56886: PUSH
56887: LD_INT 4
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: IN
56896: NOT
56897: OR
56898: IFFALSE 56902
// exit ;
56900: GO 56985
// tmp := [ ] ;
56902: LD_ADDR_VAR 0 5
56906: PUSH
56907: EMPTY
56908: ST_TO_ADDR
// for i in units do
56909: LD_ADDR_VAR 0 4
56913: PUSH
56914: LD_VAR 0 1
56918: PUSH
56919: FOR_IN
56920: IFFALSE 56954
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
56922: LD_ADDR_VAR 0 5
56926: PUSH
56927: LD_VAR 0 5
56931: PPUSH
56932: LD_VAR 0 4
56936: PPUSH
56937: LD_VAR 0 2
56941: PPUSH
56942: CALL_OW 259
56946: PPUSH
56947: CALL 58358 0 2
56951: ST_TO_ADDR
56952: GO 56919
56954: POP
56955: POP
// if not tmp then
56956: LD_VAR 0 5
56960: NOT
56961: IFFALSE 56965
// exit ;
56963: GO 56985
// result := SortListByListDesc ( units , tmp ) ;
56965: LD_ADDR_VAR 0 3
56969: PUSH
56970: LD_VAR 0 1
56974: PPUSH
56975: LD_VAR 0 5
56979: PPUSH
56980: CALL_OW 77
56984: ST_TO_ADDR
// end ;
56985: LD_VAR 0 3
56989: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
56990: LD_INT 0
56992: PPUSH
56993: PPUSH
56994: PPUSH
// result := false ;
56995: LD_ADDR_VAR 0 3
56999: PUSH
57000: LD_INT 0
57002: ST_TO_ADDR
// if not building then
57003: LD_VAR 0 2
57007: NOT
57008: IFFALSE 57012
// exit ;
57010: GO 57150
// x := GetX ( building ) ;
57012: LD_ADDR_VAR 0 4
57016: PUSH
57017: LD_VAR 0 2
57021: PPUSH
57022: CALL_OW 250
57026: ST_TO_ADDR
// y := GetY ( building ) ;
57027: LD_ADDR_VAR 0 5
57031: PUSH
57032: LD_VAR 0 2
57036: PPUSH
57037: CALL_OW 251
57041: ST_TO_ADDR
// if not x or not y then
57042: LD_VAR 0 4
57046: NOT
57047: PUSH
57048: LD_VAR 0 5
57052: NOT
57053: OR
57054: IFFALSE 57058
// exit ;
57056: GO 57150
// if GetTaskList ( unit ) then
57058: LD_VAR 0 1
57062: PPUSH
57063: CALL_OW 437
57067: IFFALSE 57150
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57069: LD_STRING e
57071: PUSH
57072: LD_VAR 0 1
57076: PPUSH
57077: CALL_OW 437
57081: PUSH
57082: LD_INT 1
57084: ARRAY
57085: PUSH
57086: LD_INT 1
57088: ARRAY
57089: EQUAL
57090: PUSH
57091: LD_VAR 0 4
57095: PUSH
57096: LD_VAR 0 1
57100: PPUSH
57101: CALL_OW 437
57105: PUSH
57106: LD_INT 1
57108: ARRAY
57109: PUSH
57110: LD_INT 2
57112: ARRAY
57113: EQUAL
57114: AND
57115: PUSH
57116: LD_VAR 0 5
57120: PUSH
57121: LD_VAR 0 1
57125: PPUSH
57126: CALL_OW 437
57130: PUSH
57131: LD_INT 1
57133: ARRAY
57134: PUSH
57135: LD_INT 3
57137: ARRAY
57138: EQUAL
57139: AND
57140: IFFALSE 57150
// result := true end ;
57142: LD_ADDR_VAR 0 3
57146: PUSH
57147: LD_INT 1
57149: ST_TO_ADDR
// end ;
57150: LD_VAR 0 3
57154: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
57155: LD_INT 0
57157: PPUSH
// result := false ;
57158: LD_ADDR_VAR 0 4
57162: PUSH
57163: LD_INT 0
57165: ST_TO_ADDR
// if GetTaskList ( unit ) then
57166: LD_VAR 0 1
57170: PPUSH
57171: CALL_OW 437
57175: IFFALSE 57258
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57177: LD_STRING M
57179: PUSH
57180: LD_VAR 0 1
57184: PPUSH
57185: CALL_OW 437
57189: PUSH
57190: LD_INT 1
57192: ARRAY
57193: PUSH
57194: LD_INT 1
57196: ARRAY
57197: EQUAL
57198: PUSH
57199: LD_VAR 0 2
57203: PUSH
57204: LD_VAR 0 1
57208: PPUSH
57209: CALL_OW 437
57213: PUSH
57214: LD_INT 1
57216: ARRAY
57217: PUSH
57218: LD_INT 2
57220: ARRAY
57221: EQUAL
57222: AND
57223: PUSH
57224: LD_VAR 0 3
57228: PUSH
57229: LD_VAR 0 1
57233: PPUSH
57234: CALL_OW 437
57238: PUSH
57239: LD_INT 1
57241: ARRAY
57242: PUSH
57243: LD_INT 3
57245: ARRAY
57246: EQUAL
57247: AND
57248: IFFALSE 57258
// result := true ;
57250: LD_ADDR_VAR 0 4
57254: PUSH
57255: LD_INT 1
57257: ST_TO_ADDR
// end ; end ;
57258: LD_VAR 0 4
57262: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
57263: LD_INT 0
57265: PPUSH
57266: PPUSH
57267: PPUSH
57268: PPUSH
// if not unit or not area then
57269: LD_VAR 0 1
57273: NOT
57274: PUSH
57275: LD_VAR 0 2
57279: NOT
57280: OR
57281: IFFALSE 57285
// exit ;
57283: GO 57461
// tmp := AreaToList ( area , i ) ;
57285: LD_ADDR_VAR 0 6
57289: PUSH
57290: LD_VAR 0 2
57294: PPUSH
57295: LD_VAR 0 5
57299: PPUSH
57300: CALL_OW 517
57304: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
57305: LD_ADDR_VAR 0 5
57309: PUSH
57310: DOUBLE
57311: LD_INT 1
57313: DEC
57314: ST_TO_ADDR
57315: LD_VAR 0 6
57319: PUSH
57320: LD_INT 1
57322: ARRAY
57323: PUSH
57324: FOR_TO
57325: IFFALSE 57459
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
57327: LD_ADDR_VAR 0 7
57331: PUSH
57332: LD_VAR 0 6
57336: PUSH
57337: LD_INT 1
57339: ARRAY
57340: PUSH
57341: LD_VAR 0 5
57345: ARRAY
57346: PUSH
57347: LD_VAR 0 6
57351: PUSH
57352: LD_INT 2
57354: ARRAY
57355: PUSH
57356: LD_VAR 0 5
57360: ARRAY
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
57366: LD_INT 92
57368: PUSH
57369: LD_VAR 0 7
57373: PUSH
57374: LD_INT 1
57376: ARRAY
57377: PUSH
57378: LD_VAR 0 7
57382: PUSH
57383: LD_INT 2
57385: ARRAY
57386: PUSH
57387: LD_INT 2
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: PPUSH
57396: CALL_OW 69
57400: PUSH
57401: LD_INT 0
57403: EQUAL
57404: IFFALSE 57457
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
57406: LD_VAR 0 1
57410: PPUSH
57411: LD_VAR 0 7
57415: PUSH
57416: LD_INT 1
57418: ARRAY
57419: PPUSH
57420: LD_VAR 0 7
57424: PUSH
57425: LD_INT 2
57427: ARRAY
57428: PPUSH
57429: LD_VAR 0 3
57433: PPUSH
57434: CALL_OW 48
// result := IsPlaced ( unit ) ;
57438: LD_ADDR_VAR 0 4
57442: PUSH
57443: LD_VAR 0 1
57447: PPUSH
57448: CALL_OW 305
57452: ST_TO_ADDR
// exit ;
57453: POP
57454: POP
57455: GO 57461
// end ; end ;
57457: GO 57324
57459: POP
57460: POP
// end ;
57461: LD_VAR 0 4
57465: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
57466: LD_INT 0
57468: PPUSH
57469: PPUSH
57470: PPUSH
// if not side or side > 8 then
57471: LD_VAR 0 1
57475: NOT
57476: PUSH
57477: LD_VAR 0 1
57481: PUSH
57482: LD_INT 8
57484: GREATER
57485: OR
57486: IFFALSE 57490
// exit ;
57488: GO 57677
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
57490: LD_ADDR_VAR 0 4
57494: PUSH
57495: LD_INT 22
57497: PUSH
57498: LD_VAR 0 1
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 21
57509: PUSH
57510: LD_INT 3
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PPUSH
57521: CALL_OW 69
57525: ST_TO_ADDR
// if not tmp then
57526: LD_VAR 0 4
57530: NOT
57531: IFFALSE 57535
// exit ;
57533: GO 57677
// enable_addtolog := true ;
57535: LD_ADDR_OWVAR 81
57539: PUSH
57540: LD_INT 1
57542: ST_TO_ADDR
// AddToLog ( [ ) ;
57543: LD_STRING [
57545: PPUSH
57546: CALL_OW 561
// for i in tmp do
57550: LD_ADDR_VAR 0 3
57554: PUSH
57555: LD_VAR 0 4
57559: PUSH
57560: FOR_IN
57561: IFFALSE 57668
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
57563: LD_STRING [
57565: PUSH
57566: LD_VAR 0 3
57570: PPUSH
57571: CALL_OW 266
57575: STR
57576: PUSH
57577: LD_STRING , 
57579: STR
57580: PUSH
57581: LD_VAR 0 3
57585: PPUSH
57586: CALL_OW 250
57590: STR
57591: PUSH
57592: LD_STRING , 
57594: STR
57595: PUSH
57596: LD_VAR 0 3
57600: PPUSH
57601: CALL_OW 251
57605: STR
57606: PUSH
57607: LD_STRING , 
57609: STR
57610: PUSH
57611: LD_VAR 0 3
57615: PPUSH
57616: CALL_OW 254
57620: STR
57621: PUSH
57622: LD_STRING , 
57624: STR
57625: PUSH
57626: LD_VAR 0 3
57630: PPUSH
57631: LD_INT 1
57633: PPUSH
57634: CALL_OW 268
57638: STR
57639: PUSH
57640: LD_STRING , 
57642: STR
57643: PUSH
57644: LD_VAR 0 3
57648: PPUSH
57649: LD_INT 2
57651: PPUSH
57652: CALL_OW 268
57656: STR
57657: PUSH
57658: LD_STRING ],
57660: STR
57661: PPUSH
57662: CALL_OW 561
// end ;
57666: GO 57560
57668: POP
57669: POP
// AddToLog ( ]; ) ;
57670: LD_STRING ];
57672: PPUSH
57673: CALL_OW 561
// end ;
57677: LD_VAR 0 2
57681: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
57682: LD_INT 0
57684: PPUSH
57685: PPUSH
57686: PPUSH
57687: PPUSH
57688: PPUSH
// if not area or not rate or not max then
57689: LD_VAR 0 1
57693: NOT
57694: PUSH
57695: LD_VAR 0 2
57699: NOT
57700: OR
57701: PUSH
57702: LD_VAR 0 4
57706: NOT
57707: OR
57708: IFFALSE 57712
// exit ;
57710: GO 57901
// while 1 do
57712: LD_INT 1
57714: IFFALSE 57901
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
57716: LD_ADDR_VAR 0 9
57720: PUSH
57721: LD_VAR 0 1
57725: PPUSH
57726: LD_INT 1
57728: PPUSH
57729: CALL_OW 287
57733: PUSH
57734: LD_INT 10
57736: MUL
57737: ST_TO_ADDR
// r := rate / 10 ;
57738: LD_ADDR_VAR 0 7
57742: PUSH
57743: LD_VAR 0 2
57747: PUSH
57748: LD_INT 10
57750: DIVREAL
57751: ST_TO_ADDR
// time := 1 1$00 ;
57752: LD_ADDR_VAR 0 8
57756: PUSH
57757: LD_INT 2100
57759: ST_TO_ADDR
// if amount < min then
57760: LD_VAR 0 9
57764: PUSH
57765: LD_VAR 0 3
57769: LESS
57770: IFFALSE 57788
// r := r * 2 else
57772: LD_ADDR_VAR 0 7
57776: PUSH
57777: LD_VAR 0 7
57781: PUSH
57782: LD_INT 2
57784: MUL
57785: ST_TO_ADDR
57786: GO 57814
// if amount > max then
57788: LD_VAR 0 9
57792: PUSH
57793: LD_VAR 0 4
57797: GREATER
57798: IFFALSE 57814
// r := r / 2 ;
57800: LD_ADDR_VAR 0 7
57804: PUSH
57805: LD_VAR 0 7
57809: PUSH
57810: LD_INT 2
57812: DIVREAL
57813: ST_TO_ADDR
// time := time / r ;
57814: LD_ADDR_VAR 0 8
57818: PUSH
57819: LD_VAR 0 8
57823: PUSH
57824: LD_VAR 0 7
57828: DIVREAL
57829: ST_TO_ADDR
// if time < 0 then
57830: LD_VAR 0 8
57834: PUSH
57835: LD_INT 0
57837: LESS
57838: IFFALSE 57855
// time := time * - 1 ;
57840: LD_ADDR_VAR 0 8
57844: PUSH
57845: LD_VAR 0 8
57849: PUSH
57850: LD_INT 1
57852: NEG
57853: MUL
57854: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
57855: LD_VAR 0 8
57859: PUSH
57860: LD_INT 35
57862: PPUSH
57863: LD_INT 875
57865: PPUSH
57866: CALL_OW 12
57870: PLUS
57871: PPUSH
57872: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
57876: LD_INT 1
57878: PPUSH
57879: LD_INT 5
57881: PPUSH
57882: CALL_OW 12
57886: PPUSH
57887: LD_VAR 0 1
57891: PPUSH
57892: LD_INT 1
57894: PPUSH
57895: CALL_OW 55
// end ;
57899: GO 57712
// end ;
57901: LD_VAR 0 5
57905: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
57906: LD_INT 0
57908: PPUSH
57909: PPUSH
57910: PPUSH
57911: PPUSH
57912: PPUSH
57913: PPUSH
57914: PPUSH
57915: PPUSH
// if not turrets or not factories then
57916: LD_VAR 0 1
57920: NOT
57921: PUSH
57922: LD_VAR 0 2
57926: NOT
57927: OR
57928: IFFALSE 57932
// exit ;
57930: GO 58239
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
57932: LD_ADDR_VAR 0 10
57936: PUSH
57937: LD_INT 5
57939: PUSH
57940: LD_INT 6
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 2
57949: PUSH
57950: LD_INT 4
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 3
57959: PUSH
57960: LD_INT 5
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 24
57974: PUSH
57975: LD_INT 25
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 23
57984: PUSH
57985: LD_INT 27
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 42
57998: PUSH
57999: LD_INT 43
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 44
58008: PUSH
58009: LD_INT 46
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 45
58018: PUSH
58019: LD_INT 47
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: LIST
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: LIST
58035: ST_TO_ADDR
// result := [ ] ;
58036: LD_ADDR_VAR 0 3
58040: PUSH
58041: EMPTY
58042: ST_TO_ADDR
// for i in turrets do
58043: LD_ADDR_VAR 0 4
58047: PUSH
58048: LD_VAR 0 1
58052: PUSH
58053: FOR_IN
58054: IFFALSE 58237
// begin nat := GetNation ( i ) ;
58056: LD_ADDR_VAR 0 7
58060: PUSH
58061: LD_VAR 0 4
58065: PPUSH
58066: CALL_OW 248
58070: ST_TO_ADDR
// weapon := 0 ;
58071: LD_ADDR_VAR 0 8
58075: PUSH
58076: LD_INT 0
58078: ST_TO_ADDR
// if not nat then
58079: LD_VAR 0 7
58083: NOT
58084: IFFALSE 58088
// continue ;
58086: GO 58053
// for j in list [ nat ] do
58088: LD_ADDR_VAR 0 5
58092: PUSH
58093: LD_VAR 0 10
58097: PUSH
58098: LD_VAR 0 7
58102: ARRAY
58103: PUSH
58104: FOR_IN
58105: IFFALSE 58146
// if GetBWeapon ( i ) = j [ 1 ] then
58107: LD_VAR 0 4
58111: PPUSH
58112: CALL_OW 269
58116: PUSH
58117: LD_VAR 0 5
58121: PUSH
58122: LD_INT 1
58124: ARRAY
58125: EQUAL
58126: IFFALSE 58144
// begin weapon := j [ 2 ] ;
58128: LD_ADDR_VAR 0 8
58132: PUSH
58133: LD_VAR 0 5
58137: PUSH
58138: LD_INT 2
58140: ARRAY
58141: ST_TO_ADDR
// break ;
58142: GO 58146
// end ;
58144: GO 58104
58146: POP
58147: POP
// if not weapon then
58148: LD_VAR 0 8
58152: NOT
58153: IFFALSE 58157
// continue ;
58155: GO 58053
// for k in factories do
58157: LD_ADDR_VAR 0 6
58161: PUSH
58162: LD_VAR 0 2
58166: PUSH
58167: FOR_IN
58168: IFFALSE 58233
// begin weapons := AvailableWeaponList ( k ) ;
58170: LD_ADDR_VAR 0 9
58174: PUSH
58175: LD_VAR 0 6
58179: PPUSH
58180: CALL_OW 478
58184: ST_TO_ADDR
// if not weapons then
58185: LD_VAR 0 9
58189: NOT
58190: IFFALSE 58194
// continue ;
58192: GO 58167
// if weapon in weapons then
58194: LD_VAR 0 8
58198: PUSH
58199: LD_VAR 0 9
58203: IN
58204: IFFALSE 58231
// begin result := [ i , weapon ] ;
58206: LD_ADDR_VAR 0 3
58210: PUSH
58211: LD_VAR 0 4
58215: PUSH
58216: LD_VAR 0 8
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: ST_TO_ADDR
// exit ;
58225: POP
58226: POP
58227: POP
58228: POP
58229: GO 58239
// end ; end ;
58231: GO 58167
58233: POP
58234: POP
// end ;
58235: GO 58053
58237: POP
58238: POP
// end ;
58239: LD_VAR 0 3
58243: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
58244: LD_INT 0
58246: PPUSH
// if not side or side > 8 then
58247: LD_VAR 0 3
58251: NOT
58252: PUSH
58253: LD_VAR 0 3
58257: PUSH
58258: LD_INT 8
58260: GREATER
58261: OR
58262: IFFALSE 58266
// exit ;
58264: GO 58325
// if not range then
58266: LD_VAR 0 4
58270: NOT
58271: IFFALSE 58282
// range := - 12 ;
58273: LD_ADDR_VAR 0 4
58277: PUSH
58278: LD_INT 12
58280: NEG
58281: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
58282: LD_VAR 0 1
58286: PPUSH
58287: LD_VAR 0 2
58291: PPUSH
58292: LD_VAR 0 3
58296: PPUSH
58297: LD_VAR 0 4
58301: PPUSH
58302: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
58306: LD_VAR 0 1
58310: PPUSH
58311: LD_VAR 0 2
58315: PPUSH
58316: LD_VAR 0 3
58320: PPUSH
58321: CALL_OW 331
// end ;
58325: LD_VAR 0 5
58329: RET
// export function Video ( mode ) ; begin
58330: LD_INT 0
58332: PPUSH
// ingame_video = mode ;
58333: LD_ADDR_OWVAR 52
58337: PUSH
58338: LD_VAR 0 1
58342: ST_TO_ADDR
// interface_hidden = mode ;
58343: LD_ADDR_OWVAR 54
58347: PUSH
58348: LD_VAR 0 1
58352: ST_TO_ADDR
// end ;
58353: LD_VAR 0 2
58357: RET
// export function Join ( array , element ) ; begin
58358: LD_INT 0
58360: PPUSH
// result := Replace ( array , array + 1 , element ) ;
58361: LD_ADDR_VAR 0 3
58365: PUSH
58366: LD_VAR 0 1
58370: PPUSH
58371: LD_VAR 0 1
58375: PUSH
58376: LD_INT 1
58378: PLUS
58379: PPUSH
58380: LD_VAR 0 2
58384: PPUSH
58385: CALL_OW 1
58389: ST_TO_ADDR
// end ;
58390: LD_VAR 0 3
58394: RET
// export function JoinUnion ( array , element ) ; begin
58395: LD_INT 0
58397: PPUSH
// result := array union element ;
58398: LD_ADDR_VAR 0 3
58402: PUSH
58403: LD_VAR 0 1
58407: PUSH
58408: LD_VAR 0 2
58412: UNION
58413: ST_TO_ADDR
// end ;
58414: LD_VAR 0 3
58418: RET
// export function GetBehemoths ( side ) ; begin
58419: LD_INT 0
58421: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
58422: LD_ADDR_VAR 0 2
58426: PUSH
58427: LD_INT 22
58429: PUSH
58430: LD_VAR 0 1
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 31
58441: PUSH
58442: LD_INT 25
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PPUSH
58453: CALL_OW 69
58457: ST_TO_ADDR
// end ;
58458: LD_VAR 0 2
58462: RET
// export function Shuffle ( array ) ; var i , index ; begin
58463: LD_INT 0
58465: PPUSH
58466: PPUSH
58467: PPUSH
// result := [ ] ;
58468: LD_ADDR_VAR 0 2
58472: PUSH
58473: EMPTY
58474: ST_TO_ADDR
// if not array then
58475: LD_VAR 0 1
58479: NOT
58480: IFFALSE 58484
// exit ;
58482: GO 58583
// Randomize ;
58484: CALL_OW 10
// for i = array downto 1 do
58488: LD_ADDR_VAR 0 3
58492: PUSH
58493: DOUBLE
58494: LD_VAR 0 1
58498: INC
58499: ST_TO_ADDR
58500: LD_INT 1
58502: PUSH
58503: FOR_DOWNTO
58504: IFFALSE 58581
// begin index := rand ( 1 , array ) ;
58506: LD_ADDR_VAR 0 4
58510: PUSH
58511: LD_INT 1
58513: PPUSH
58514: LD_VAR 0 1
58518: PPUSH
58519: CALL_OW 12
58523: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
58524: LD_ADDR_VAR 0 2
58528: PUSH
58529: LD_VAR 0 2
58533: PPUSH
58534: LD_VAR 0 2
58538: PUSH
58539: LD_INT 1
58541: PLUS
58542: PPUSH
58543: LD_VAR 0 1
58547: PUSH
58548: LD_VAR 0 4
58552: ARRAY
58553: PPUSH
58554: CALL_OW 2
58558: ST_TO_ADDR
// array := Delete ( array , index ) ;
58559: LD_ADDR_VAR 0 1
58563: PUSH
58564: LD_VAR 0 1
58568: PPUSH
58569: LD_VAR 0 4
58573: PPUSH
58574: CALL_OW 3
58578: ST_TO_ADDR
// end ;
58579: GO 58503
58581: POP
58582: POP
// end ;
58583: LD_VAR 0 2
58587: RET
// export function GetBaseMaterials ( base ) ; begin
58588: LD_INT 0
58590: PPUSH
// result := [ 0 , 0 , 0 ] ;
58591: LD_ADDR_VAR 0 2
58595: PUSH
58596: LD_INT 0
58598: PUSH
58599: LD_INT 0
58601: PUSH
58602: LD_INT 0
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: LIST
58609: ST_TO_ADDR
// if not base then
58610: LD_VAR 0 1
58614: NOT
58615: IFFALSE 58619
// exit ;
58617: GO 58668
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
58619: LD_ADDR_VAR 0 2
58623: PUSH
58624: LD_VAR 0 1
58628: PPUSH
58629: LD_INT 1
58631: PPUSH
58632: CALL_OW 275
58636: PUSH
58637: LD_VAR 0 1
58641: PPUSH
58642: LD_INT 2
58644: PPUSH
58645: CALL_OW 275
58649: PUSH
58650: LD_VAR 0 1
58654: PPUSH
58655: LD_INT 3
58657: PPUSH
58658: CALL_OW 275
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: LIST
58667: ST_TO_ADDR
// end ;
58668: LD_VAR 0 2
58672: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
58673: LD_INT 0
58675: PPUSH
58676: PPUSH
// result := array ;
58677: LD_ADDR_VAR 0 3
58681: PUSH
58682: LD_VAR 0 1
58686: ST_TO_ADDR
// if size >= result then
58687: LD_VAR 0 2
58691: PUSH
58692: LD_VAR 0 3
58696: GREATEREQUAL
58697: IFFALSE 58701
// exit ;
58699: GO 58751
// if size then
58701: LD_VAR 0 2
58705: IFFALSE 58751
// for i := array downto size do
58707: LD_ADDR_VAR 0 4
58711: PUSH
58712: DOUBLE
58713: LD_VAR 0 1
58717: INC
58718: ST_TO_ADDR
58719: LD_VAR 0 2
58723: PUSH
58724: FOR_DOWNTO
58725: IFFALSE 58749
// result := Delete ( result , result ) ;
58727: LD_ADDR_VAR 0 3
58731: PUSH
58732: LD_VAR 0 3
58736: PPUSH
58737: LD_VAR 0 3
58741: PPUSH
58742: CALL_OW 3
58746: ST_TO_ADDR
58747: GO 58724
58749: POP
58750: POP
// end ;
58751: LD_VAR 0 3
58755: RET
// export function ComExit ( unit ) ; var tmp ; begin
58756: LD_INT 0
58758: PPUSH
58759: PPUSH
// if not IsInUnit ( unit ) then
58760: LD_VAR 0 1
58764: PPUSH
58765: CALL_OW 310
58769: NOT
58770: IFFALSE 58774
// exit ;
58772: GO 58834
// tmp := IsInUnit ( unit ) ;
58774: LD_ADDR_VAR 0 3
58778: PUSH
58779: LD_VAR 0 1
58783: PPUSH
58784: CALL_OW 310
58788: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
58789: LD_VAR 0 3
58793: PPUSH
58794: CALL_OW 247
58798: PUSH
58799: LD_INT 2
58801: EQUAL
58802: IFFALSE 58815
// ComExitVehicle ( unit ) else
58804: LD_VAR 0 1
58808: PPUSH
58809: CALL_OW 121
58813: GO 58824
// ComExitBuilding ( unit ) ;
58815: LD_VAR 0 1
58819: PPUSH
58820: CALL_OW 122
// result := tmp ;
58824: LD_ADDR_VAR 0 2
58828: PUSH
58829: LD_VAR 0 3
58833: ST_TO_ADDR
// end ;
58834: LD_VAR 0 2
58838: RET
// export function ComExitAll ( units ) ; var i ; begin
58839: LD_INT 0
58841: PPUSH
58842: PPUSH
// if not units then
58843: LD_VAR 0 1
58847: NOT
58848: IFFALSE 58852
// exit ;
58850: GO 58878
// for i in units do
58852: LD_ADDR_VAR 0 3
58856: PUSH
58857: LD_VAR 0 1
58861: PUSH
58862: FOR_IN
58863: IFFALSE 58876
// ComExit ( i ) ;
58865: LD_VAR 0 3
58869: PPUSH
58870: CALL 58756 0 1
58874: GO 58862
58876: POP
58877: POP
// end ;
58878: LD_VAR 0 2
58882: RET
// export function ResetHc ; begin
58883: LD_INT 0
58885: PPUSH
// InitHc ;
58886: CALL_OW 19
// hc_importance := 0 ;
58890: LD_ADDR_OWVAR 32
58894: PUSH
58895: LD_INT 0
58897: ST_TO_ADDR
// end ;
58898: LD_VAR 0 1
58902: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
58903: LD_INT 0
58905: PPUSH
58906: PPUSH
58907: PPUSH
// _x := ( x1 + x2 ) div 2 ;
58908: LD_ADDR_VAR 0 6
58912: PUSH
58913: LD_VAR 0 1
58917: PUSH
58918: LD_VAR 0 3
58922: PLUS
58923: PUSH
58924: LD_INT 2
58926: DIV
58927: ST_TO_ADDR
// if _x < 0 then
58928: LD_VAR 0 6
58932: PUSH
58933: LD_INT 0
58935: LESS
58936: IFFALSE 58953
// _x := _x * - 1 ;
58938: LD_ADDR_VAR 0 6
58942: PUSH
58943: LD_VAR 0 6
58947: PUSH
58948: LD_INT 1
58950: NEG
58951: MUL
58952: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
58953: LD_ADDR_VAR 0 7
58957: PUSH
58958: LD_VAR 0 2
58962: PUSH
58963: LD_VAR 0 4
58967: PLUS
58968: PUSH
58969: LD_INT 2
58971: DIV
58972: ST_TO_ADDR
// if _y < 0 then
58973: LD_VAR 0 7
58977: PUSH
58978: LD_INT 0
58980: LESS
58981: IFFALSE 58998
// _y := _y * - 1 ;
58983: LD_ADDR_VAR 0 7
58987: PUSH
58988: LD_VAR 0 7
58992: PUSH
58993: LD_INT 1
58995: NEG
58996: MUL
58997: ST_TO_ADDR
// result := [ _x , _y ] ;
58998: LD_ADDR_VAR 0 5
59002: PUSH
59003: LD_VAR 0 6
59007: PUSH
59008: LD_VAR 0 7
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: ST_TO_ADDR
// end ;
59017: LD_VAR 0 5
59021: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
59022: LD_INT 0
59024: PPUSH
59025: PPUSH
59026: PPUSH
59027: PPUSH
// task := GetTaskList ( unit ) ;
59028: LD_ADDR_VAR 0 7
59032: PUSH
59033: LD_VAR 0 1
59037: PPUSH
59038: CALL_OW 437
59042: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
59043: LD_VAR 0 7
59047: NOT
59048: PUSH
59049: LD_VAR 0 1
59053: PPUSH
59054: LD_VAR 0 2
59058: PPUSH
59059: CALL_OW 308
59063: NOT
59064: AND
59065: IFFALSE 59069
// exit ;
59067: GO 59187
// if IsInArea ( unit , area ) then
59069: LD_VAR 0 1
59073: PPUSH
59074: LD_VAR 0 2
59078: PPUSH
59079: CALL_OW 308
59083: IFFALSE 59101
// begin ComMoveToArea ( unit , goAway ) ;
59085: LD_VAR 0 1
59089: PPUSH
59090: LD_VAR 0 3
59094: PPUSH
59095: CALL_OW 113
// exit ;
59099: GO 59187
// end ; if task [ 1 ] [ 1 ] <> M then
59101: LD_VAR 0 7
59105: PUSH
59106: LD_INT 1
59108: ARRAY
59109: PUSH
59110: LD_INT 1
59112: ARRAY
59113: PUSH
59114: LD_STRING M
59116: NONEQUAL
59117: IFFALSE 59121
// exit ;
59119: GO 59187
// x := task [ 1 ] [ 2 ] ;
59121: LD_ADDR_VAR 0 5
59125: PUSH
59126: LD_VAR 0 7
59130: PUSH
59131: LD_INT 1
59133: ARRAY
59134: PUSH
59135: LD_INT 2
59137: ARRAY
59138: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
59139: LD_ADDR_VAR 0 6
59143: PUSH
59144: LD_VAR 0 7
59148: PUSH
59149: LD_INT 1
59151: ARRAY
59152: PUSH
59153: LD_INT 3
59155: ARRAY
59156: ST_TO_ADDR
// if InArea ( x , y , area ) then
59157: LD_VAR 0 5
59161: PPUSH
59162: LD_VAR 0 6
59166: PPUSH
59167: LD_VAR 0 2
59171: PPUSH
59172: CALL_OW 309
59176: IFFALSE 59187
// ComStop ( unit ) ;
59178: LD_VAR 0 1
59182: PPUSH
59183: CALL_OW 141
// end ;
59187: LD_VAR 0 4
59191: RET
// export function Abs ( value ) ; begin
59192: LD_INT 0
59194: PPUSH
// result := value ;
59195: LD_ADDR_VAR 0 2
59199: PUSH
59200: LD_VAR 0 1
59204: ST_TO_ADDR
// if value < 0 then
59205: LD_VAR 0 1
59209: PUSH
59210: LD_INT 0
59212: LESS
59213: IFFALSE 59230
// result := value * - 1 ;
59215: LD_ADDR_VAR 0 2
59219: PUSH
59220: LD_VAR 0 1
59224: PUSH
59225: LD_INT 1
59227: NEG
59228: MUL
59229: ST_TO_ADDR
// end ;
59230: LD_VAR 0 2
59234: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
59235: LD_INT 0
59237: PPUSH
59238: PPUSH
59239: PPUSH
59240: PPUSH
59241: PPUSH
59242: PPUSH
59243: PPUSH
59244: PPUSH
// if not unit or not building then
59245: LD_VAR 0 1
59249: NOT
59250: PUSH
59251: LD_VAR 0 2
59255: NOT
59256: OR
59257: IFFALSE 59261
// exit ;
59259: GO 59487
// x := GetX ( building ) ;
59261: LD_ADDR_VAR 0 4
59265: PUSH
59266: LD_VAR 0 2
59270: PPUSH
59271: CALL_OW 250
59275: ST_TO_ADDR
// y := GetY ( building ) ;
59276: LD_ADDR_VAR 0 6
59280: PUSH
59281: LD_VAR 0 2
59285: PPUSH
59286: CALL_OW 251
59290: ST_TO_ADDR
// d := GetDir ( building ) ;
59291: LD_ADDR_VAR 0 8
59295: PUSH
59296: LD_VAR 0 2
59300: PPUSH
59301: CALL_OW 254
59305: ST_TO_ADDR
// r := 4 ;
59306: LD_ADDR_VAR 0 9
59310: PUSH
59311: LD_INT 4
59313: ST_TO_ADDR
// for i := 1 to 5 do
59314: LD_ADDR_VAR 0 10
59318: PUSH
59319: DOUBLE
59320: LD_INT 1
59322: DEC
59323: ST_TO_ADDR
59324: LD_INT 5
59326: PUSH
59327: FOR_TO
59328: IFFALSE 59485
// begin _x := ShiftX ( x , d , r + i ) ;
59330: LD_ADDR_VAR 0 5
59334: PUSH
59335: LD_VAR 0 4
59339: PPUSH
59340: LD_VAR 0 8
59344: PPUSH
59345: LD_VAR 0 9
59349: PUSH
59350: LD_VAR 0 10
59354: PLUS
59355: PPUSH
59356: CALL_OW 272
59360: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
59361: LD_ADDR_VAR 0 7
59365: PUSH
59366: LD_VAR 0 6
59370: PPUSH
59371: LD_VAR 0 8
59375: PPUSH
59376: LD_VAR 0 9
59380: PUSH
59381: LD_VAR 0 10
59385: PLUS
59386: PPUSH
59387: CALL_OW 273
59391: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
59392: LD_VAR 0 5
59396: PPUSH
59397: LD_VAR 0 7
59401: PPUSH
59402: CALL_OW 488
59406: PUSH
59407: LD_VAR 0 5
59411: PPUSH
59412: LD_VAR 0 7
59416: PPUSH
59417: CALL_OW 428
59421: PPUSH
59422: CALL_OW 247
59426: PUSH
59427: LD_INT 3
59429: PUSH
59430: LD_INT 2
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: IN
59437: NOT
59438: AND
59439: IFFALSE 59483
// begin ComMoveXY ( unit , _x , _y ) ;
59441: LD_VAR 0 1
59445: PPUSH
59446: LD_VAR 0 5
59450: PPUSH
59451: LD_VAR 0 7
59455: PPUSH
59456: CALL_OW 111
// result := [ _x , _y ] ;
59460: LD_ADDR_VAR 0 3
59464: PUSH
59465: LD_VAR 0 5
59469: PUSH
59470: LD_VAR 0 7
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: ST_TO_ADDR
// exit ;
59479: POP
59480: POP
59481: GO 59487
// end ; end ;
59483: GO 59327
59485: POP
59486: POP
// end ;
59487: LD_VAR 0 3
59491: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
59492: LD_INT 0
59494: PPUSH
59495: PPUSH
59496: PPUSH
// result := 0 ;
59497: LD_ADDR_VAR 0 3
59501: PUSH
59502: LD_INT 0
59504: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
59505: LD_VAR 0 1
59509: PUSH
59510: LD_INT 0
59512: LESS
59513: PUSH
59514: LD_VAR 0 1
59518: PUSH
59519: LD_INT 8
59521: GREATER
59522: OR
59523: PUSH
59524: LD_VAR 0 2
59528: PUSH
59529: LD_INT 0
59531: LESS
59532: OR
59533: PUSH
59534: LD_VAR 0 2
59538: PUSH
59539: LD_INT 8
59541: GREATER
59542: OR
59543: IFFALSE 59547
// exit ;
59545: GO 59622
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
59547: LD_ADDR_VAR 0 4
59551: PUSH
59552: LD_INT 22
59554: PUSH
59555: LD_VAR 0 2
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PPUSH
59564: CALL_OW 69
59568: PUSH
59569: FOR_IN
59570: IFFALSE 59620
// begin un := UnitShoot ( i ) ;
59572: LD_ADDR_VAR 0 5
59576: PUSH
59577: LD_VAR 0 4
59581: PPUSH
59582: CALL_OW 504
59586: ST_TO_ADDR
// if GetSide ( un ) = side1 then
59587: LD_VAR 0 5
59591: PPUSH
59592: CALL_OW 255
59596: PUSH
59597: LD_VAR 0 1
59601: EQUAL
59602: IFFALSE 59618
// begin result := un ;
59604: LD_ADDR_VAR 0 3
59608: PUSH
59609: LD_VAR 0 5
59613: ST_TO_ADDR
// exit ;
59614: POP
59615: POP
59616: GO 59622
// end ; end ;
59618: GO 59569
59620: POP
59621: POP
// end ;
59622: LD_VAR 0 3
59626: RET
// export function GetCargoBay ( units ) ; begin
59627: LD_INT 0
59629: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
59630: LD_ADDR_VAR 0 2
59634: PUSH
59635: LD_VAR 0 1
59639: PPUSH
59640: LD_INT 2
59642: PUSH
59643: LD_INT 34
59645: PUSH
59646: LD_INT 12
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 34
59655: PUSH
59656: LD_INT 51
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 34
59665: PUSH
59666: LD_INT 32
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 34
59675: PUSH
59676: LD_INT 89
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: PPUSH
59690: CALL_OW 72
59694: ST_TO_ADDR
// end ;
59695: LD_VAR 0 2
59699: RET
// export function Negate ( value ) ; begin
59700: LD_INT 0
59702: PPUSH
// result := not value ;
59703: LD_ADDR_VAR 0 2
59707: PUSH
59708: LD_VAR 0 1
59712: NOT
59713: ST_TO_ADDR
// end ;
59714: LD_VAR 0 2
59718: RET
// export function Inc ( value ) ; begin
59719: LD_INT 0
59721: PPUSH
// result := value + 1 ;
59722: LD_ADDR_VAR 0 2
59726: PUSH
59727: LD_VAR 0 1
59731: PUSH
59732: LD_INT 1
59734: PLUS
59735: ST_TO_ADDR
// end ;
59736: LD_VAR 0 2
59740: RET
// export function Dec ( value ) ; begin
59741: LD_INT 0
59743: PPUSH
// result := value - 1 ;
59744: LD_ADDR_VAR 0 2
59748: PUSH
59749: LD_VAR 0 1
59753: PUSH
59754: LD_INT 1
59756: MINUS
59757: ST_TO_ADDR
// end ;
59758: LD_VAR 0 2
59762: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
59763: LD_INT 0
59765: PPUSH
59766: PPUSH
59767: PPUSH
59768: PPUSH
59769: PPUSH
59770: PPUSH
59771: PPUSH
59772: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
59773: LD_VAR 0 1
59777: PPUSH
59778: LD_VAR 0 2
59782: PPUSH
59783: CALL_OW 488
59787: NOT
59788: PUSH
59789: LD_VAR 0 3
59793: PPUSH
59794: LD_VAR 0 4
59798: PPUSH
59799: CALL_OW 488
59803: NOT
59804: OR
59805: IFFALSE 59818
// begin result := - 1 ;
59807: LD_ADDR_VAR 0 5
59811: PUSH
59812: LD_INT 1
59814: NEG
59815: ST_TO_ADDR
// exit ;
59816: GO 60053
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
59818: LD_ADDR_VAR 0 12
59822: PUSH
59823: LD_VAR 0 1
59827: PPUSH
59828: LD_VAR 0 2
59832: PPUSH
59833: LD_VAR 0 3
59837: PPUSH
59838: LD_VAR 0 4
59842: PPUSH
59843: CALL 58903 0 4
59847: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
59848: LD_ADDR_VAR 0 11
59852: PUSH
59853: LD_VAR 0 1
59857: PPUSH
59858: LD_VAR 0 2
59862: PPUSH
59863: LD_VAR 0 12
59867: PUSH
59868: LD_INT 1
59870: ARRAY
59871: PPUSH
59872: LD_VAR 0 12
59876: PUSH
59877: LD_INT 2
59879: ARRAY
59880: PPUSH
59881: CALL_OW 298
59885: ST_TO_ADDR
// distance := 9999 ;
59886: LD_ADDR_VAR 0 10
59890: PUSH
59891: LD_INT 9999
59893: ST_TO_ADDR
// for i := 0 to 5 do
59894: LD_ADDR_VAR 0 6
59898: PUSH
59899: DOUBLE
59900: LD_INT 0
59902: DEC
59903: ST_TO_ADDR
59904: LD_INT 5
59906: PUSH
59907: FOR_TO
59908: IFFALSE 60051
// begin _x := ShiftX ( x1 , i , centerDist ) ;
59910: LD_ADDR_VAR 0 7
59914: PUSH
59915: LD_VAR 0 1
59919: PPUSH
59920: LD_VAR 0 6
59924: PPUSH
59925: LD_VAR 0 11
59929: PPUSH
59930: CALL_OW 272
59934: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
59935: LD_ADDR_VAR 0 8
59939: PUSH
59940: LD_VAR 0 2
59944: PPUSH
59945: LD_VAR 0 6
59949: PPUSH
59950: LD_VAR 0 11
59954: PPUSH
59955: CALL_OW 273
59959: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
59960: LD_VAR 0 7
59964: PPUSH
59965: LD_VAR 0 8
59969: PPUSH
59970: CALL_OW 488
59974: NOT
59975: IFFALSE 59979
// continue ;
59977: GO 59907
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
59979: LD_ADDR_VAR 0 9
59983: PUSH
59984: LD_VAR 0 12
59988: PUSH
59989: LD_INT 1
59991: ARRAY
59992: PPUSH
59993: LD_VAR 0 12
59997: PUSH
59998: LD_INT 2
60000: ARRAY
60001: PPUSH
60002: LD_VAR 0 7
60006: PPUSH
60007: LD_VAR 0 8
60011: PPUSH
60012: CALL_OW 298
60016: ST_TO_ADDR
// if tmp < distance then
60017: LD_VAR 0 9
60021: PUSH
60022: LD_VAR 0 10
60026: LESS
60027: IFFALSE 60049
// begin result := i ;
60029: LD_ADDR_VAR 0 5
60033: PUSH
60034: LD_VAR 0 6
60038: ST_TO_ADDR
// distance := tmp ;
60039: LD_ADDR_VAR 0 10
60043: PUSH
60044: LD_VAR 0 9
60048: ST_TO_ADDR
// end ; end ;
60049: GO 59907
60051: POP
60052: POP
// end ;
60053: LD_VAR 0 5
60057: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60058: LD_INT 0
60060: PPUSH
60061: PPUSH
// if not driver or not IsInUnit ( driver ) then
60062: LD_VAR 0 1
60066: NOT
60067: PUSH
60068: LD_VAR 0 1
60072: PPUSH
60073: CALL_OW 310
60077: NOT
60078: OR
60079: IFFALSE 60083
// exit ;
60081: GO 60173
// vehicle := IsInUnit ( driver ) ;
60083: LD_ADDR_VAR 0 3
60087: PUSH
60088: LD_VAR 0 1
60092: PPUSH
60093: CALL_OW 310
60097: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60098: LD_VAR 0 1
60102: PPUSH
60103: LD_STRING \
60105: PUSH
60106: LD_INT 0
60108: PUSH
60109: LD_INT 0
60111: PUSH
60112: LD_INT 0
60114: PUSH
60115: LD_INT 0
60117: PUSH
60118: LD_INT 0
60120: PUSH
60121: LD_INT 0
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: LIST
60132: PUSH
60133: LD_STRING E
60135: PUSH
60136: LD_INT 0
60138: PUSH
60139: LD_INT 0
60141: PUSH
60142: LD_VAR 0 3
60146: PUSH
60147: LD_INT 0
60149: PUSH
60150: LD_INT 0
60152: PUSH
60153: LD_INT 0
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PPUSH
60169: CALL_OW 446
// end ;
60173: LD_VAR 0 2
60177: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60178: LD_INT 0
60180: PPUSH
60181: PPUSH
// if not driver or not IsInUnit ( driver ) then
60182: LD_VAR 0 1
60186: NOT
60187: PUSH
60188: LD_VAR 0 1
60192: PPUSH
60193: CALL_OW 310
60197: NOT
60198: OR
60199: IFFALSE 60203
// exit ;
60201: GO 60293
// vehicle := IsInUnit ( driver ) ;
60203: LD_ADDR_VAR 0 3
60207: PUSH
60208: LD_VAR 0 1
60212: PPUSH
60213: CALL_OW 310
60217: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60218: LD_VAR 0 1
60222: PPUSH
60223: LD_STRING \
60225: PUSH
60226: LD_INT 0
60228: PUSH
60229: LD_INT 0
60231: PUSH
60232: LD_INT 0
60234: PUSH
60235: LD_INT 0
60237: PUSH
60238: LD_INT 0
60240: PUSH
60241: LD_INT 0
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: PUSH
60253: LD_STRING E
60255: PUSH
60256: LD_INT 0
60258: PUSH
60259: LD_INT 0
60261: PUSH
60262: LD_VAR 0 3
60266: PUSH
60267: LD_INT 0
60269: PUSH
60270: LD_INT 0
60272: PUSH
60273: LD_INT 0
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PPUSH
60289: CALL_OW 447
// end ;
60293: LD_VAR 0 2
60297: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
60298: LD_INT 0
60300: PPUSH
60301: PPUSH
60302: PPUSH
// tmp := [ ] ;
60303: LD_ADDR_VAR 0 5
60307: PUSH
60308: EMPTY
60309: ST_TO_ADDR
// for i in units do
60310: LD_ADDR_VAR 0 4
60314: PUSH
60315: LD_VAR 0 1
60319: PUSH
60320: FOR_IN
60321: IFFALSE 60359
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
60323: LD_ADDR_VAR 0 5
60327: PUSH
60328: LD_VAR 0 5
60332: PPUSH
60333: LD_VAR 0 5
60337: PUSH
60338: LD_INT 1
60340: PLUS
60341: PPUSH
60342: LD_VAR 0 4
60346: PPUSH
60347: CALL_OW 256
60351: PPUSH
60352: CALL_OW 2
60356: ST_TO_ADDR
60357: GO 60320
60359: POP
60360: POP
// if not tmp then
60361: LD_VAR 0 5
60365: NOT
60366: IFFALSE 60370
// exit ;
60368: GO 60418
// if asc then
60370: LD_VAR 0 2
60374: IFFALSE 60398
// result := SortListByListAsc ( units , tmp ) else
60376: LD_ADDR_VAR 0 3
60380: PUSH
60381: LD_VAR 0 1
60385: PPUSH
60386: LD_VAR 0 5
60390: PPUSH
60391: CALL_OW 76
60395: ST_TO_ADDR
60396: GO 60418
// result := SortListByListDesc ( units , tmp ) ;
60398: LD_ADDR_VAR 0 3
60402: PUSH
60403: LD_VAR 0 1
60407: PPUSH
60408: LD_VAR 0 5
60412: PPUSH
60413: CALL_OW 77
60417: ST_TO_ADDR
// end ;
60418: LD_VAR 0 3
60422: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
60423: LD_INT 0
60425: PPUSH
60426: PPUSH
// task := GetTaskList ( mech ) ;
60427: LD_ADDR_VAR 0 4
60431: PUSH
60432: LD_VAR 0 1
60436: PPUSH
60437: CALL_OW 437
60441: ST_TO_ADDR
// if not task then
60442: LD_VAR 0 4
60446: NOT
60447: IFFALSE 60451
// exit ;
60449: GO 60493
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
60451: LD_ADDR_VAR 0 3
60455: PUSH
60456: LD_VAR 0 4
60460: PUSH
60461: LD_INT 1
60463: ARRAY
60464: PUSH
60465: LD_INT 1
60467: ARRAY
60468: PUSH
60469: LD_STRING r
60471: EQUAL
60472: PUSH
60473: LD_VAR 0 4
60477: PUSH
60478: LD_INT 1
60480: ARRAY
60481: PUSH
60482: LD_INT 4
60484: ARRAY
60485: PUSH
60486: LD_VAR 0 2
60490: EQUAL
60491: AND
60492: ST_TO_ADDR
// end ;
60493: LD_VAR 0 3
60497: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
60498: LD_INT 0
60500: PPUSH
// SetDir ( unit , d ) ;
60501: LD_VAR 0 1
60505: PPUSH
60506: LD_VAR 0 4
60510: PPUSH
60511: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
60515: LD_VAR 0 1
60519: PPUSH
60520: LD_VAR 0 2
60524: PPUSH
60525: LD_VAR 0 3
60529: PPUSH
60530: LD_VAR 0 5
60534: PPUSH
60535: CALL_OW 48
// end ;
60539: LD_VAR 0 6
60543: RET
// export function ToNaturalNumber ( number ) ; begin
60544: LD_INT 0
60546: PPUSH
// result := number div 1 ;
60547: LD_ADDR_VAR 0 2
60551: PUSH
60552: LD_VAR 0 1
60556: PUSH
60557: LD_INT 1
60559: DIV
60560: ST_TO_ADDR
// if number < 0 then
60561: LD_VAR 0 1
60565: PUSH
60566: LD_INT 0
60568: LESS
60569: IFFALSE 60579
// result := 0 ;
60571: LD_ADDR_VAR 0 2
60575: PUSH
60576: LD_INT 0
60578: ST_TO_ADDR
// end ;
60579: LD_VAR 0 2
60583: RET
// export function SortByClass ( units , class ) ; var un ; begin
60584: LD_INT 0
60586: PPUSH
60587: PPUSH
// if not units or not class then
60588: LD_VAR 0 1
60592: NOT
60593: PUSH
60594: LD_VAR 0 2
60598: NOT
60599: OR
60600: IFFALSE 60604
// exit ;
60602: GO 60699
// result := [ ] ;
60604: LD_ADDR_VAR 0 3
60608: PUSH
60609: EMPTY
60610: ST_TO_ADDR
// for un in units do
60611: LD_ADDR_VAR 0 4
60615: PUSH
60616: LD_VAR 0 1
60620: PUSH
60621: FOR_IN
60622: IFFALSE 60697
// if GetClass ( un ) = class then
60624: LD_VAR 0 4
60628: PPUSH
60629: CALL_OW 257
60633: PUSH
60634: LD_VAR 0 2
60638: EQUAL
60639: IFFALSE 60666
// result := Insert ( result , 1 , un ) else
60641: LD_ADDR_VAR 0 3
60645: PUSH
60646: LD_VAR 0 3
60650: PPUSH
60651: LD_INT 1
60653: PPUSH
60654: LD_VAR 0 4
60658: PPUSH
60659: CALL_OW 2
60663: ST_TO_ADDR
60664: GO 60695
// result := Replace ( result , result + 1 , un ) ;
60666: LD_ADDR_VAR 0 3
60670: PUSH
60671: LD_VAR 0 3
60675: PPUSH
60676: LD_VAR 0 3
60680: PUSH
60681: LD_INT 1
60683: PLUS
60684: PPUSH
60685: LD_VAR 0 4
60689: PPUSH
60690: CALL_OW 1
60694: ST_TO_ADDR
60695: GO 60621
60697: POP
60698: POP
// end ;
60699: LD_VAR 0 3
60703: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
60704: LD_INT 0
60706: PPUSH
60707: PPUSH
60708: PPUSH
60709: PPUSH
60710: PPUSH
60711: PPUSH
60712: PPUSH
// result := [ ] ;
60713: LD_ADDR_VAR 0 4
60717: PUSH
60718: EMPTY
60719: ST_TO_ADDR
// if x - r < 0 then
60720: LD_VAR 0 1
60724: PUSH
60725: LD_VAR 0 3
60729: MINUS
60730: PUSH
60731: LD_INT 0
60733: LESS
60734: IFFALSE 60746
// min_x := 0 else
60736: LD_ADDR_VAR 0 8
60740: PUSH
60741: LD_INT 0
60743: ST_TO_ADDR
60744: GO 60762
// min_x := x - r ;
60746: LD_ADDR_VAR 0 8
60750: PUSH
60751: LD_VAR 0 1
60755: PUSH
60756: LD_VAR 0 3
60760: MINUS
60761: ST_TO_ADDR
// if y - r < 0 then
60762: LD_VAR 0 2
60766: PUSH
60767: LD_VAR 0 3
60771: MINUS
60772: PUSH
60773: LD_INT 0
60775: LESS
60776: IFFALSE 60788
// min_y := 0 else
60778: LD_ADDR_VAR 0 7
60782: PUSH
60783: LD_INT 0
60785: ST_TO_ADDR
60786: GO 60804
// min_y := y - r ;
60788: LD_ADDR_VAR 0 7
60792: PUSH
60793: LD_VAR 0 2
60797: PUSH
60798: LD_VAR 0 3
60802: MINUS
60803: ST_TO_ADDR
// max_x := x + r ;
60804: LD_ADDR_VAR 0 9
60808: PUSH
60809: LD_VAR 0 1
60813: PUSH
60814: LD_VAR 0 3
60818: PLUS
60819: ST_TO_ADDR
// max_y := y + r ;
60820: LD_ADDR_VAR 0 10
60824: PUSH
60825: LD_VAR 0 2
60829: PUSH
60830: LD_VAR 0 3
60834: PLUS
60835: ST_TO_ADDR
// for _x = min_x to max_x do
60836: LD_ADDR_VAR 0 5
60840: PUSH
60841: DOUBLE
60842: LD_VAR 0 8
60846: DEC
60847: ST_TO_ADDR
60848: LD_VAR 0 9
60852: PUSH
60853: FOR_TO
60854: IFFALSE 60955
// for _y = min_y to max_y do
60856: LD_ADDR_VAR 0 6
60860: PUSH
60861: DOUBLE
60862: LD_VAR 0 7
60866: DEC
60867: ST_TO_ADDR
60868: LD_VAR 0 10
60872: PUSH
60873: FOR_TO
60874: IFFALSE 60951
// begin if not ValidHex ( _x , _y ) then
60876: LD_VAR 0 5
60880: PPUSH
60881: LD_VAR 0 6
60885: PPUSH
60886: CALL_OW 488
60890: NOT
60891: IFFALSE 60895
// continue ;
60893: GO 60873
// if GetResourceTypeXY ( _x , _y ) then
60895: LD_VAR 0 5
60899: PPUSH
60900: LD_VAR 0 6
60904: PPUSH
60905: CALL_OW 283
60909: IFFALSE 60949
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
60911: LD_ADDR_VAR 0 4
60915: PUSH
60916: LD_VAR 0 4
60920: PPUSH
60921: LD_VAR 0 4
60925: PUSH
60926: LD_INT 1
60928: PLUS
60929: PPUSH
60930: LD_VAR 0 5
60934: PUSH
60935: LD_VAR 0 6
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PPUSH
60944: CALL_OW 1
60948: ST_TO_ADDR
// end ;
60949: GO 60873
60951: POP
60952: POP
60953: GO 60853
60955: POP
60956: POP
// end ;
60957: LD_VAR 0 4
60961: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
60962: LD_INT 0
60964: PPUSH
60965: PPUSH
60966: PPUSH
60967: PPUSH
60968: PPUSH
60969: PPUSH
60970: PPUSH
60971: PPUSH
// if not units then
60972: LD_VAR 0 1
60976: NOT
60977: IFFALSE 60981
// exit ;
60979: GO 61505
// result := UnitFilter ( units , [ f_ok ] ) ;
60981: LD_ADDR_VAR 0 3
60985: PUSH
60986: LD_VAR 0 1
60990: PPUSH
60991: LD_INT 50
60993: PUSH
60994: EMPTY
60995: LIST
60996: PPUSH
60997: CALL_OW 72
61001: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
61002: LD_ADDR_VAR 0 8
61006: PUSH
61007: LD_VAR 0 1
61011: PUSH
61012: LD_INT 1
61014: ARRAY
61015: PPUSH
61016: CALL_OW 255
61020: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
61021: LD_ADDR_VAR 0 10
61025: PUSH
61026: LD_INT 29
61028: PUSH
61029: LD_INT 91
61031: PUSH
61032: LD_INT 49
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: LIST
61039: ST_TO_ADDR
// if not result then
61040: LD_VAR 0 3
61044: NOT
61045: IFFALSE 61049
// exit ;
61047: GO 61505
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
61049: LD_ADDR_VAR 0 5
61053: PUSH
61054: LD_INT 81
61056: PUSH
61057: LD_VAR 0 8
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PPUSH
61066: CALL_OW 69
61070: ST_TO_ADDR
// for i in result do
61071: LD_ADDR_VAR 0 4
61075: PUSH
61076: LD_VAR 0 3
61080: PUSH
61081: FOR_IN
61082: IFFALSE 61503
// begin tag := GetTag ( i ) + 1 ;
61084: LD_ADDR_VAR 0 9
61088: PUSH
61089: LD_VAR 0 4
61093: PPUSH
61094: CALL_OW 110
61098: PUSH
61099: LD_INT 1
61101: PLUS
61102: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
61103: LD_ADDR_VAR 0 7
61107: PUSH
61108: LD_VAR 0 4
61112: PPUSH
61113: CALL_OW 250
61117: PPUSH
61118: LD_VAR 0 4
61122: PPUSH
61123: CALL_OW 251
61127: PPUSH
61128: LD_INT 6
61130: PPUSH
61131: CALL 60704 0 3
61135: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
61136: LD_VAR 0 4
61140: PPUSH
61141: CALL_OW 247
61145: PUSH
61146: LD_INT 2
61148: EQUAL
61149: PUSH
61150: LD_VAR 0 7
61154: AND
61155: PUSH
61156: LD_VAR 0 4
61160: PPUSH
61161: CALL_OW 264
61165: PUSH
61166: LD_VAR 0 10
61170: IN
61171: NOT
61172: AND
61173: IFFALSE 61212
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
61175: LD_VAR 0 4
61179: PPUSH
61180: LD_VAR 0 7
61184: PUSH
61185: LD_INT 1
61187: ARRAY
61188: PUSH
61189: LD_INT 1
61191: ARRAY
61192: PPUSH
61193: LD_VAR 0 7
61197: PUSH
61198: LD_INT 1
61200: ARRAY
61201: PUSH
61202: LD_INT 2
61204: ARRAY
61205: PPUSH
61206: CALL_OW 116
61210: GO 61501
// if path > tag then
61212: LD_VAR 0 2
61216: PUSH
61217: LD_VAR 0 9
61221: GREATER
61222: IFFALSE 61430
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
61224: LD_ADDR_VAR 0 6
61228: PUSH
61229: LD_VAR 0 5
61233: PPUSH
61234: LD_INT 91
61236: PUSH
61237: LD_VAR 0 4
61241: PUSH
61242: LD_INT 8
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: LIST
61249: PPUSH
61250: CALL_OW 72
61254: ST_TO_ADDR
// if nearEnemy then
61255: LD_VAR 0 6
61259: IFFALSE 61328
// begin if GetWeapon ( i ) = ru_time_lapser then
61261: LD_VAR 0 4
61265: PPUSH
61266: CALL_OW 264
61270: PUSH
61271: LD_INT 49
61273: EQUAL
61274: IFFALSE 61302
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
61276: LD_VAR 0 4
61280: PPUSH
61281: LD_VAR 0 6
61285: PPUSH
61286: LD_VAR 0 4
61290: PPUSH
61291: CALL_OW 74
61295: PPUSH
61296: CALL_OW 112
61300: GO 61326
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
61302: LD_VAR 0 4
61306: PPUSH
61307: LD_VAR 0 6
61311: PPUSH
61312: LD_VAR 0 4
61316: PPUSH
61317: CALL_OW 74
61321: PPUSH
61322: CALL 62576 0 2
// end else
61326: GO 61428
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
61328: LD_VAR 0 4
61332: PPUSH
61333: LD_VAR 0 2
61337: PUSH
61338: LD_VAR 0 9
61342: ARRAY
61343: PUSH
61344: LD_INT 1
61346: ARRAY
61347: PPUSH
61348: LD_VAR 0 2
61352: PUSH
61353: LD_VAR 0 9
61357: ARRAY
61358: PUSH
61359: LD_INT 2
61361: ARRAY
61362: PPUSH
61363: CALL_OW 297
61367: PUSH
61368: LD_INT 6
61370: GREATER
61371: IFFALSE 61414
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
61373: LD_VAR 0 4
61377: PPUSH
61378: LD_VAR 0 2
61382: PUSH
61383: LD_VAR 0 9
61387: ARRAY
61388: PUSH
61389: LD_INT 1
61391: ARRAY
61392: PPUSH
61393: LD_VAR 0 2
61397: PUSH
61398: LD_VAR 0 9
61402: ARRAY
61403: PUSH
61404: LD_INT 2
61406: ARRAY
61407: PPUSH
61408: CALL_OW 114
61412: GO 61428
// SetTag ( i , tag ) ;
61414: LD_VAR 0 4
61418: PPUSH
61419: LD_VAR 0 9
61423: PPUSH
61424: CALL_OW 109
// end else
61428: GO 61501
// if enemy then
61430: LD_VAR 0 5
61434: IFFALSE 61501
// begin if GetWeapon ( i ) = ru_time_lapser then
61436: LD_VAR 0 4
61440: PPUSH
61441: CALL_OW 264
61445: PUSH
61446: LD_INT 49
61448: EQUAL
61449: IFFALSE 61477
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
61451: LD_VAR 0 4
61455: PPUSH
61456: LD_VAR 0 5
61460: PPUSH
61461: LD_VAR 0 4
61465: PPUSH
61466: CALL_OW 74
61470: PPUSH
61471: CALL_OW 112
61475: GO 61501
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
61477: LD_VAR 0 4
61481: PPUSH
61482: LD_VAR 0 5
61486: PPUSH
61487: LD_VAR 0 4
61491: PPUSH
61492: CALL_OW 74
61496: PPUSH
61497: CALL 62576 0 2
// end ; end ;
61501: GO 61081
61503: POP
61504: POP
// end ;
61505: LD_VAR 0 3
61509: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
61510: LD_INT 0
61512: PPUSH
61513: PPUSH
61514: PPUSH
// if not unit or IsInUnit ( unit ) then
61515: LD_VAR 0 1
61519: NOT
61520: PUSH
61521: LD_VAR 0 1
61525: PPUSH
61526: CALL_OW 310
61530: OR
61531: IFFALSE 61535
// exit ;
61533: GO 61626
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
61535: LD_ADDR_VAR 0 4
61539: PUSH
61540: LD_VAR 0 1
61544: PPUSH
61545: CALL_OW 250
61549: PPUSH
61550: LD_VAR 0 2
61554: PPUSH
61555: LD_INT 1
61557: PPUSH
61558: CALL_OW 272
61562: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
61563: LD_ADDR_VAR 0 5
61567: PUSH
61568: LD_VAR 0 1
61572: PPUSH
61573: CALL_OW 251
61577: PPUSH
61578: LD_VAR 0 2
61582: PPUSH
61583: LD_INT 1
61585: PPUSH
61586: CALL_OW 273
61590: ST_TO_ADDR
// if ValidHex ( x , y ) then
61591: LD_VAR 0 4
61595: PPUSH
61596: LD_VAR 0 5
61600: PPUSH
61601: CALL_OW 488
61605: IFFALSE 61626
// ComTurnXY ( unit , x , y ) ;
61607: LD_VAR 0 1
61611: PPUSH
61612: LD_VAR 0 4
61616: PPUSH
61617: LD_VAR 0 5
61621: PPUSH
61622: CALL_OW 118
// end ;
61626: LD_VAR 0 3
61630: RET
// export function SeeUnits ( side , units ) ; var i ; begin
61631: LD_INT 0
61633: PPUSH
61634: PPUSH
// result := false ;
61635: LD_ADDR_VAR 0 3
61639: PUSH
61640: LD_INT 0
61642: ST_TO_ADDR
// if not units then
61643: LD_VAR 0 2
61647: NOT
61648: IFFALSE 61652
// exit ;
61650: GO 61697
// for i in units do
61652: LD_ADDR_VAR 0 4
61656: PUSH
61657: LD_VAR 0 2
61661: PUSH
61662: FOR_IN
61663: IFFALSE 61695
// if See ( side , i ) then
61665: LD_VAR 0 1
61669: PPUSH
61670: LD_VAR 0 4
61674: PPUSH
61675: CALL_OW 292
61679: IFFALSE 61693
// begin result := true ;
61681: LD_ADDR_VAR 0 3
61685: PUSH
61686: LD_INT 1
61688: ST_TO_ADDR
// exit ;
61689: POP
61690: POP
61691: GO 61697
// end ;
61693: GO 61662
61695: POP
61696: POP
// end ;
61697: LD_VAR 0 3
61701: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
61702: LD_INT 0
61704: PPUSH
61705: PPUSH
61706: PPUSH
61707: PPUSH
// if not unit or not points then
61708: LD_VAR 0 1
61712: NOT
61713: PUSH
61714: LD_VAR 0 2
61718: NOT
61719: OR
61720: IFFALSE 61724
// exit ;
61722: GO 61814
// dist := 99999 ;
61724: LD_ADDR_VAR 0 5
61728: PUSH
61729: LD_INT 99999
61731: ST_TO_ADDR
// for i in points do
61732: LD_ADDR_VAR 0 4
61736: PUSH
61737: LD_VAR 0 2
61741: PUSH
61742: FOR_IN
61743: IFFALSE 61812
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
61745: LD_ADDR_VAR 0 6
61749: PUSH
61750: LD_VAR 0 1
61754: PPUSH
61755: LD_VAR 0 4
61759: PUSH
61760: LD_INT 1
61762: ARRAY
61763: PPUSH
61764: LD_VAR 0 4
61768: PUSH
61769: LD_INT 2
61771: ARRAY
61772: PPUSH
61773: CALL_OW 297
61777: ST_TO_ADDR
// if tmpDist < dist then
61778: LD_VAR 0 6
61782: PUSH
61783: LD_VAR 0 5
61787: LESS
61788: IFFALSE 61810
// begin result := i ;
61790: LD_ADDR_VAR 0 3
61794: PUSH
61795: LD_VAR 0 4
61799: ST_TO_ADDR
// dist := tmpDist ;
61800: LD_ADDR_VAR 0 5
61804: PUSH
61805: LD_VAR 0 6
61809: ST_TO_ADDR
// end ; end ;
61810: GO 61742
61812: POP
61813: POP
// end ;
61814: LD_VAR 0 3
61818: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
61819: LD_INT 0
61821: PPUSH
// uc_side := side ;
61822: LD_ADDR_OWVAR 20
61826: PUSH
61827: LD_VAR 0 1
61831: ST_TO_ADDR
// uc_nation := 3 ;
61832: LD_ADDR_OWVAR 21
61836: PUSH
61837: LD_INT 3
61839: ST_TO_ADDR
// vc_chassis := 25 ;
61840: LD_ADDR_OWVAR 37
61844: PUSH
61845: LD_INT 25
61847: ST_TO_ADDR
// vc_engine := engine_siberite ;
61848: LD_ADDR_OWVAR 39
61852: PUSH
61853: LD_INT 3
61855: ST_TO_ADDR
// vc_control := control_computer ;
61856: LD_ADDR_OWVAR 38
61860: PUSH
61861: LD_INT 3
61863: ST_TO_ADDR
// vc_weapon := 59 ;
61864: LD_ADDR_OWVAR 40
61868: PUSH
61869: LD_INT 59
61871: ST_TO_ADDR
// result := CreateVehicle ;
61872: LD_ADDR_VAR 0 5
61876: PUSH
61877: CALL_OW 45
61881: ST_TO_ADDR
// SetDir ( result , d ) ;
61882: LD_VAR 0 5
61886: PPUSH
61887: LD_VAR 0 4
61891: PPUSH
61892: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
61896: LD_VAR 0 5
61900: PPUSH
61901: LD_VAR 0 2
61905: PPUSH
61906: LD_VAR 0 3
61910: PPUSH
61911: LD_INT 0
61913: PPUSH
61914: CALL_OW 48
// end ;
61918: LD_VAR 0 5
61922: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
61923: LD_INT 0
61925: PPUSH
61926: PPUSH
61927: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
61928: LD_ADDR_VAR 0 2
61932: PUSH
61933: LD_INT 0
61935: PUSH
61936: LD_INT 0
61938: PUSH
61939: LD_INT 0
61941: PUSH
61942: LD_INT 0
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
61951: LD_VAR 0 1
61955: NOT
61956: PUSH
61957: LD_VAR 0 1
61961: PPUSH
61962: CALL_OW 264
61966: PUSH
61967: LD_INT 12
61969: PUSH
61970: LD_INT 51
61972: PUSH
61973: LD_INT 32
61975: PUSH
61976: LD_INT 89
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: LIST
61983: LIST
61984: IN
61985: NOT
61986: OR
61987: IFFALSE 61991
// exit ;
61989: GO 62089
// for i := 1 to 3 do
61991: LD_ADDR_VAR 0 3
61995: PUSH
61996: DOUBLE
61997: LD_INT 1
61999: DEC
62000: ST_TO_ADDR
62001: LD_INT 3
62003: PUSH
62004: FOR_TO
62005: IFFALSE 62087
// begin tmp := GetCargo ( cargo , i ) ;
62007: LD_ADDR_VAR 0 4
62011: PUSH
62012: LD_VAR 0 1
62016: PPUSH
62017: LD_VAR 0 3
62021: PPUSH
62022: CALL_OW 289
62026: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
62027: LD_ADDR_VAR 0 2
62031: PUSH
62032: LD_VAR 0 2
62036: PPUSH
62037: LD_VAR 0 3
62041: PPUSH
62042: LD_VAR 0 4
62046: PPUSH
62047: CALL_OW 1
62051: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
62052: LD_ADDR_VAR 0 2
62056: PUSH
62057: LD_VAR 0 2
62061: PPUSH
62062: LD_INT 4
62064: PPUSH
62065: LD_VAR 0 2
62069: PUSH
62070: LD_INT 4
62072: ARRAY
62073: PUSH
62074: LD_VAR 0 4
62078: PLUS
62079: PPUSH
62080: CALL_OW 1
62084: ST_TO_ADDR
// end ;
62085: GO 62004
62087: POP
62088: POP
// end ;
62089: LD_VAR 0 2
62093: RET
// export function Length ( array ) ; begin
62094: LD_INT 0
62096: PPUSH
// result := array + 0 ;
62097: LD_ADDR_VAR 0 2
62101: PUSH
62102: LD_VAR 0 1
62106: PUSH
62107: LD_INT 0
62109: PLUS
62110: ST_TO_ADDR
// end ;
62111: LD_VAR 0 2
62115: RET
// export function PrepareArray ( array ) ; begin
62116: LD_INT 0
62118: PPUSH
// result := array diff 0 ;
62119: LD_ADDR_VAR 0 2
62123: PUSH
62124: LD_VAR 0 1
62128: PUSH
62129: LD_INT 0
62131: DIFF
62132: ST_TO_ADDR
// if not result [ 1 ] then
62133: LD_VAR 0 2
62137: PUSH
62138: LD_INT 1
62140: ARRAY
62141: NOT
62142: IFFALSE 62162
// result := Delete ( result , 1 ) ;
62144: LD_ADDR_VAR 0 2
62148: PUSH
62149: LD_VAR 0 2
62153: PPUSH
62154: LD_INT 1
62156: PPUSH
62157: CALL_OW 3
62161: ST_TO_ADDR
// end ;
62162: LD_VAR 0 2
62166: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
62167: LD_INT 0
62169: PPUSH
62170: PPUSH
62171: PPUSH
62172: PPUSH
// sibRocketRange := 25 ;
62173: LD_ADDR_VAR 0 6
62177: PUSH
62178: LD_INT 25
62180: ST_TO_ADDR
// result := false ;
62181: LD_ADDR_VAR 0 4
62185: PUSH
62186: LD_INT 0
62188: ST_TO_ADDR
// for i := 0 to 5 do
62189: LD_ADDR_VAR 0 5
62193: PUSH
62194: DOUBLE
62195: LD_INT 0
62197: DEC
62198: ST_TO_ADDR
62199: LD_INT 5
62201: PUSH
62202: FOR_TO
62203: IFFALSE 62270
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
62205: LD_VAR 0 1
62209: PPUSH
62210: LD_VAR 0 5
62214: PPUSH
62215: LD_VAR 0 6
62219: PPUSH
62220: CALL_OW 272
62224: PPUSH
62225: LD_VAR 0 2
62229: PPUSH
62230: LD_VAR 0 5
62234: PPUSH
62235: LD_VAR 0 6
62239: PPUSH
62240: CALL_OW 273
62244: PPUSH
62245: LD_VAR 0 3
62249: PPUSH
62250: CALL_OW 309
62254: IFFALSE 62268
// begin result := true ;
62256: LD_ADDR_VAR 0 4
62260: PUSH
62261: LD_INT 1
62263: ST_TO_ADDR
// exit ;
62264: POP
62265: POP
62266: GO 62272
// end ;
62268: GO 62202
62270: POP
62271: POP
// end ;
62272: LD_VAR 0 4
62276: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
62277: LD_INT 0
62279: PPUSH
62280: PPUSH
62281: PPUSH
// if btype = b_depot then
62282: LD_VAR 0 2
62286: PUSH
62287: LD_INT 0
62289: EQUAL
62290: IFFALSE 62302
// begin result := true ;
62292: LD_ADDR_VAR 0 3
62296: PUSH
62297: LD_INT 1
62299: ST_TO_ADDR
// exit ;
62300: GO 62418
// end ; pom := GetBase ( depot ) ;
62302: LD_ADDR_VAR 0 4
62306: PUSH
62307: LD_VAR 0 1
62311: PPUSH
62312: CALL_OW 274
62316: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
62317: LD_ADDR_VAR 0 5
62321: PUSH
62322: LD_VAR 0 2
62326: PPUSH
62327: LD_VAR 0 1
62331: PPUSH
62332: CALL_OW 248
62336: PPUSH
62337: CALL_OW 450
62341: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
62342: LD_ADDR_VAR 0 3
62346: PUSH
62347: LD_VAR 0 4
62351: PPUSH
62352: LD_INT 1
62354: PPUSH
62355: CALL_OW 275
62359: PUSH
62360: LD_VAR 0 5
62364: PUSH
62365: LD_INT 1
62367: ARRAY
62368: GREATEREQUAL
62369: PUSH
62370: LD_VAR 0 4
62374: PPUSH
62375: LD_INT 2
62377: PPUSH
62378: CALL_OW 275
62382: PUSH
62383: LD_VAR 0 5
62387: PUSH
62388: LD_INT 2
62390: ARRAY
62391: GREATEREQUAL
62392: AND
62393: PUSH
62394: LD_VAR 0 4
62398: PPUSH
62399: LD_INT 3
62401: PPUSH
62402: CALL_OW 275
62406: PUSH
62407: LD_VAR 0 5
62411: PUSH
62412: LD_INT 3
62414: ARRAY
62415: GREATEREQUAL
62416: AND
62417: ST_TO_ADDR
// end ;
62418: LD_VAR 0 3
62422: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
62423: LD_INT 0
62425: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
62426: LD_VAR 0 1
62430: PPUSH
62431: LD_VAR 0 2
62435: PPUSH
62436: LD_INT 0
62438: PPUSH
62439: LD_INT 0
62441: PPUSH
62442: LD_INT 1
62444: PPUSH
62445: LD_INT 0
62447: PPUSH
62448: CALL_OW 587
// end ;
62452: LD_VAR 0 3
62456: RET
// export function CenterOnNow ( unit ) ; begin
62457: LD_INT 0
62459: PPUSH
// result := IsInUnit ( unit ) ;
62460: LD_ADDR_VAR 0 2
62464: PUSH
62465: LD_VAR 0 1
62469: PPUSH
62470: CALL_OW 310
62474: ST_TO_ADDR
// if not result then
62475: LD_VAR 0 2
62479: NOT
62480: IFFALSE 62492
// result := unit ;
62482: LD_ADDR_VAR 0 2
62486: PUSH
62487: LD_VAR 0 1
62491: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
62492: LD_VAR 0 1
62496: PPUSH
62497: CALL_OW 87
// end ;
62501: LD_VAR 0 2
62505: RET
// export function ComMoveHex ( unit , hex ) ; begin
62506: LD_INT 0
62508: PPUSH
// if not hex then
62509: LD_VAR 0 2
62513: NOT
62514: IFFALSE 62518
// exit ;
62516: GO 62571
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
62518: LD_VAR 0 2
62522: PUSH
62523: LD_INT 1
62525: ARRAY
62526: PPUSH
62527: LD_VAR 0 2
62531: PUSH
62532: LD_INT 2
62534: ARRAY
62535: PPUSH
62536: CALL_OW 428
62540: IFFALSE 62544
// exit ;
62542: GO 62571
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
62544: LD_VAR 0 1
62548: PPUSH
62549: LD_VAR 0 2
62553: PUSH
62554: LD_INT 1
62556: ARRAY
62557: PPUSH
62558: LD_VAR 0 2
62562: PUSH
62563: LD_INT 2
62565: ARRAY
62566: PPUSH
62567: CALL_OW 111
// end ;
62571: LD_VAR 0 3
62575: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
62576: LD_INT 0
62578: PPUSH
62579: PPUSH
62580: PPUSH
// if not unit or not enemy then
62581: LD_VAR 0 1
62585: NOT
62586: PUSH
62587: LD_VAR 0 2
62591: NOT
62592: OR
62593: IFFALSE 62597
// exit ;
62595: GO 62721
// x := GetX ( enemy ) ;
62597: LD_ADDR_VAR 0 4
62601: PUSH
62602: LD_VAR 0 2
62606: PPUSH
62607: CALL_OW 250
62611: ST_TO_ADDR
// y := GetY ( enemy ) ;
62612: LD_ADDR_VAR 0 5
62616: PUSH
62617: LD_VAR 0 2
62621: PPUSH
62622: CALL_OW 251
62626: ST_TO_ADDR
// if ValidHex ( x , y ) then
62627: LD_VAR 0 4
62631: PPUSH
62632: LD_VAR 0 5
62636: PPUSH
62637: CALL_OW 488
62641: IFFALSE 62721
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
62643: LD_VAR 0 2
62647: PPUSH
62648: CALL_OW 247
62652: PUSH
62653: LD_INT 3
62655: PUSH
62656: LD_INT 2
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: IN
62663: PUSH
62664: LD_VAR 0 1
62668: PPUSH
62669: CALL_OW 255
62673: PPUSH
62674: LD_VAR 0 2
62678: PPUSH
62679: CALL_OW 292
62683: OR
62684: IFFALSE 62702
// ComAttackUnit ( unit , enemy ) else
62686: LD_VAR 0 1
62690: PPUSH
62691: LD_VAR 0 2
62695: PPUSH
62696: CALL_OW 115
62700: GO 62721
// ComAgressiveMove ( unit , x , y ) ;
62702: LD_VAR 0 1
62706: PPUSH
62707: LD_VAR 0 4
62711: PPUSH
62712: LD_VAR 0 5
62716: PPUSH
62717: CALL_OW 114
// end ;
62721: LD_VAR 0 3
62725: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
62726: LD_INT 0
62728: PPUSH
62729: PPUSH
62730: PPUSH
// list := AreaToList ( area , 0 ) ;
62731: LD_ADDR_VAR 0 5
62735: PUSH
62736: LD_VAR 0 1
62740: PPUSH
62741: LD_INT 0
62743: PPUSH
62744: CALL_OW 517
62748: ST_TO_ADDR
// if not list then
62749: LD_VAR 0 5
62753: NOT
62754: IFFALSE 62758
// exit ;
62756: GO 62888
// if all then
62758: LD_VAR 0 2
62762: IFFALSE 62850
// begin for i := 1 to list [ 1 ] do
62764: LD_ADDR_VAR 0 4
62768: PUSH
62769: DOUBLE
62770: LD_INT 1
62772: DEC
62773: ST_TO_ADDR
62774: LD_VAR 0 5
62778: PUSH
62779: LD_INT 1
62781: ARRAY
62782: PUSH
62783: FOR_TO
62784: IFFALSE 62846
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
62786: LD_ADDR_VAR 0 3
62790: PUSH
62791: LD_VAR 0 3
62795: PPUSH
62796: LD_VAR 0 3
62800: PUSH
62801: LD_INT 1
62803: PLUS
62804: PPUSH
62805: LD_VAR 0 5
62809: PUSH
62810: LD_INT 1
62812: ARRAY
62813: PUSH
62814: LD_VAR 0 4
62818: ARRAY
62819: PUSH
62820: LD_VAR 0 5
62824: PUSH
62825: LD_INT 2
62827: ARRAY
62828: PUSH
62829: LD_VAR 0 4
62833: ARRAY
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PPUSH
62839: CALL_OW 1
62843: ST_TO_ADDR
62844: GO 62783
62846: POP
62847: POP
// exit ;
62848: GO 62888
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
62850: LD_ADDR_VAR 0 3
62854: PUSH
62855: LD_VAR 0 5
62859: PUSH
62860: LD_INT 1
62862: ARRAY
62863: PUSH
62864: LD_INT 1
62866: ARRAY
62867: PUSH
62868: LD_VAR 0 5
62872: PUSH
62873: LD_INT 2
62875: ARRAY
62876: PUSH
62877: LD_INT 1
62879: ARRAY
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: EMPTY
62886: LIST
62887: ST_TO_ADDR
// end ;
62888: LD_VAR 0 3
62892: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
62893: LD_INT 0
62895: PPUSH
62896: PPUSH
// list := AreaToList ( area , 0 ) ;
62897: LD_ADDR_VAR 0 4
62901: PUSH
62902: LD_VAR 0 1
62906: PPUSH
62907: LD_INT 0
62909: PPUSH
62910: CALL_OW 517
62914: ST_TO_ADDR
// if not list then
62915: LD_VAR 0 4
62919: NOT
62920: IFFALSE 62924
// exit ;
62922: GO 62965
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
62924: LD_ADDR_VAR 0 3
62928: PUSH
62929: LD_VAR 0 4
62933: PUSH
62934: LD_INT 1
62936: ARRAY
62937: PUSH
62938: LD_INT 1
62940: ARRAY
62941: PUSH
62942: LD_VAR 0 4
62946: PUSH
62947: LD_INT 2
62949: ARRAY
62950: PUSH
62951: LD_INT 1
62953: ARRAY
62954: PUSH
62955: LD_VAR 0 2
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: LIST
62964: ST_TO_ADDR
// end ;
62965: LD_VAR 0 3
62969: RET
// export function First ( array ) ; begin
62970: LD_INT 0
62972: PPUSH
// if not array then
62973: LD_VAR 0 1
62977: NOT
62978: IFFALSE 62982
// exit ;
62980: GO 62996
// result := array [ 1 ] ;
62982: LD_ADDR_VAR 0 2
62986: PUSH
62987: LD_VAR 0 1
62991: PUSH
62992: LD_INT 1
62994: ARRAY
62995: ST_TO_ADDR
// end ;
62996: LD_VAR 0 2
63000: RET
// export function Last ( array ) ; begin
63001: LD_INT 0
63003: PPUSH
// if not array then
63004: LD_VAR 0 1
63008: NOT
63009: IFFALSE 63013
// exit ;
63011: GO 63029
// result := array [ array ] ;
63013: LD_ADDR_VAR 0 2
63017: PUSH
63018: LD_VAR 0 1
63022: PUSH
63023: LD_VAR 0 1
63027: ARRAY
63028: ST_TO_ADDR
// end ;
63029: LD_VAR 0 2
63033: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
63034: LD_INT 0
63036: PPUSH
63037: PPUSH
// result := [ ] ;
63038: LD_ADDR_VAR 0 5
63042: PUSH
63043: EMPTY
63044: ST_TO_ADDR
// if not array then
63045: LD_VAR 0 1
63049: NOT
63050: IFFALSE 63054
// exit ;
63052: GO 63166
// for i := 1 to array do
63054: LD_ADDR_VAR 0 6
63058: PUSH
63059: DOUBLE
63060: LD_INT 1
63062: DEC
63063: ST_TO_ADDR
63064: LD_VAR 0 1
63068: PUSH
63069: FOR_TO
63070: IFFALSE 63164
// if array [ i ] [ index ] = value then
63072: LD_VAR 0 1
63076: PUSH
63077: LD_VAR 0 6
63081: ARRAY
63082: PUSH
63083: LD_VAR 0 2
63087: ARRAY
63088: PUSH
63089: LD_VAR 0 3
63093: EQUAL
63094: IFFALSE 63162
// begin if indexColumn then
63096: LD_VAR 0 4
63100: IFFALSE 63136
// result := Join ( result , array [ i ] [ indexColumn ] ) else
63102: LD_ADDR_VAR 0 5
63106: PUSH
63107: LD_VAR 0 5
63111: PPUSH
63112: LD_VAR 0 1
63116: PUSH
63117: LD_VAR 0 6
63121: ARRAY
63122: PUSH
63123: LD_VAR 0 4
63127: ARRAY
63128: PPUSH
63129: CALL 58358 0 2
63133: ST_TO_ADDR
63134: GO 63162
// result := Join ( result , array [ i ] ) ;
63136: LD_ADDR_VAR 0 5
63140: PUSH
63141: LD_VAR 0 5
63145: PPUSH
63146: LD_VAR 0 1
63150: PUSH
63151: LD_VAR 0 6
63155: ARRAY
63156: PPUSH
63157: CALL 58358 0 2
63161: ST_TO_ADDR
// end ;
63162: GO 63069
63164: POP
63165: POP
// end ;
63166: LD_VAR 0 5
63170: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
63171: LD_INT 0
63173: PPUSH
// if not vehicles or not parkingPoint then
63174: LD_VAR 0 1
63178: NOT
63179: PUSH
63180: LD_VAR 0 2
63184: NOT
63185: OR
63186: IFFALSE 63190
// exit ;
63188: GO 63288
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
63190: LD_ADDR_VAR 0 1
63194: PUSH
63195: LD_VAR 0 1
63199: PPUSH
63200: LD_INT 50
63202: PUSH
63203: EMPTY
63204: LIST
63205: PUSH
63206: LD_INT 3
63208: PUSH
63209: LD_INT 92
63211: PUSH
63212: LD_VAR 0 2
63216: PUSH
63217: LD_INT 1
63219: ARRAY
63220: PUSH
63221: LD_VAR 0 2
63225: PUSH
63226: LD_INT 2
63228: ARRAY
63229: PUSH
63230: LD_INT 8
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: LIST
63237: LIST
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PPUSH
63247: CALL_OW 72
63251: ST_TO_ADDR
// if not vehicles then
63252: LD_VAR 0 1
63256: NOT
63257: IFFALSE 63261
// exit ;
63259: GO 63288
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
63261: LD_VAR 0 1
63265: PPUSH
63266: LD_VAR 0 2
63270: PUSH
63271: LD_INT 1
63273: ARRAY
63274: PPUSH
63275: LD_VAR 0 2
63279: PUSH
63280: LD_INT 2
63282: ARRAY
63283: PPUSH
63284: CALL_OW 111
// end ;
63288: LD_VAR 0 3
63292: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
63293: LD_INT 0
63295: PPUSH
63296: PPUSH
63297: PPUSH
// if not side or not area then
63298: LD_VAR 0 1
63302: NOT
63303: PUSH
63304: LD_VAR 0 2
63308: NOT
63309: OR
63310: IFFALSE 63314
// exit ;
63312: GO 63433
// tmp := AreaToList ( area , 0 ) ;
63314: LD_ADDR_VAR 0 5
63318: PUSH
63319: LD_VAR 0 2
63323: PPUSH
63324: LD_INT 0
63326: PPUSH
63327: CALL_OW 517
63331: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
63332: LD_ADDR_VAR 0 4
63336: PUSH
63337: DOUBLE
63338: LD_INT 1
63340: DEC
63341: ST_TO_ADDR
63342: LD_VAR 0 5
63346: PUSH
63347: LD_INT 1
63349: ARRAY
63350: PUSH
63351: FOR_TO
63352: IFFALSE 63431
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
63354: LD_VAR 0 5
63358: PUSH
63359: LD_INT 1
63361: ARRAY
63362: PUSH
63363: LD_VAR 0 4
63367: ARRAY
63368: PPUSH
63369: LD_VAR 0 5
63373: PUSH
63374: LD_INT 2
63376: ARRAY
63377: PUSH
63378: LD_VAR 0 4
63382: ARRAY
63383: PPUSH
63384: CALL_OW 351
63388: IFFALSE 63429
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
63390: LD_VAR 0 5
63394: PUSH
63395: LD_INT 1
63397: ARRAY
63398: PUSH
63399: LD_VAR 0 4
63403: ARRAY
63404: PPUSH
63405: LD_VAR 0 5
63409: PUSH
63410: LD_INT 2
63412: ARRAY
63413: PUSH
63414: LD_VAR 0 4
63418: ARRAY
63419: PPUSH
63420: LD_VAR 0 1
63424: PPUSH
63425: CALL_OW 244
// end ;
63429: GO 63351
63431: POP
63432: POP
// end ; end_of_file end_of_file
63433: LD_VAR 0 3
63437: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
63438: LD_VAR 0 1
63442: PPUSH
63443: LD_VAR 0 2
63447: PPUSH
63448: LD_VAR 0 3
63452: PPUSH
63453: LD_VAR 0 4
63457: PPUSH
63458: LD_VAR 0 5
63462: PPUSH
63463: LD_VAR 0 6
63467: PPUSH
63468: CALL 63669 0 6
// end ;
63472: PPOPN 6
63474: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
63475: LD_INT 0
63477: PPUSH
// begin if not units then
63478: LD_VAR 0 1
63482: NOT
63483: IFFALSE 63487
// exit ;
63485: GO 63487
// end ;
63487: PPOPN 7
63489: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
63490: CALL 63556 0 0
// end ; end_of_file
63494: PPOPN 1
63496: END
// export globalGameSaveCounter ; every 0 0$1 do
63497: GO 63499
63499: DISABLE
// begin enable ;
63500: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
63501: LD_STRING updateTimer(
63503: PUSH
63504: LD_OWVAR 1
63508: STR
63509: PUSH
63510: LD_STRING );
63512: STR
63513: PPUSH
63514: CALL_OW 559
// end ;
63518: END
// every 0 0$1 do
63519: GO 63521
63521: DISABLE
// begin globalGameSaveCounter := 0 ;
63522: LD_ADDR_EXP 46
63526: PUSH
63527: LD_INT 0
63529: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
63530: LD_STRING setGameSaveCounter(0)
63532: PPUSH
63533: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
63537: LD_STRING initStreamRollete();
63539: PPUSH
63540: CALL_OW 559
// InitStreamMode ;
63544: CALL 64887 0 0
// DefineStreamItems ( false ) ;
63548: LD_INT 0
63550: PPUSH
63551: CALL 65351 0 1
// end ;
63555: END
// export function SOS_MapStart ( ) ; begin
63556: LD_INT 0
63558: PPUSH
// if streamModeActive then
63559: LD_EXP 47
63563: IFFALSE 63572
// DefineStreamItems ( true ) ;
63565: LD_INT 1
63567: PPUSH
63568: CALL 65351 0 1
// UpdateLuaVariables ( ) ;
63572: CALL 63589 0 0
// UpdateFactoryWaypoints ( ) ;
63576: CALL 78220 0 0
// UpdateWarehouseGatheringPoints ( ) ;
63580: CALL 78477 0 0
// end ;
63584: LD_VAR 0 1
63588: RET
// function UpdateLuaVariables ( ) ; begin
63589: LD_INT 0
63591: PPUSH
// if globalGameSaveCounter then
63592: LD_EXP 46
63596: IFFALSE 63630
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
63598: LD_ADDR_EXP 46
63602: PUSH
63603: LD_EXP 46
63607: PPUSH
63608: CALL 59719 0 1
63612: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
63613: LD_STRING setGameSaveCounter(
63615: PUSH
63616: LD_EXP 46
63620: STR
63621: PUSH
63622: LD_STRING )
63624: STR
63625: PPUSH
63626: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
63630: LD_STRING setGameDifficulty(
63632: PUSH
63633: LD_OWVAR 67
63637: STR
63638: PUSH
63639: LD_STRING )
63641: STR
63642: PPUSH
63643: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
63647: LD_STRING displayDifficulty(
63649: PUSH
63650: LD_OWVAR 67
63654: STR
63655: PUSH
63656: LD_STRING )
63658: STR
63659: PPUSH
63660: CALL_OW 559
// end ;
63664: LD_VAR 0 1
63668: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63669: LD_INT 0
63671: PPUSH
// if p2 = stream_mode then
63672: LD_VAR 0 2
63676: PUSH
63677: LD_INT 100
63679: EQUAL
63680: IFFALSE 64683
// begin if not StreamModeActive then
63682: LD_EXP 47
63686: NOT
63687: IFFALSE 63697
// StreamModeActive := true ;
63689: LD_ADDR_EXP 47
63693: PUSH
63694: LD_INT 1
63696: ST_TO_ADDR
// if p3 = 0 then
63697: LD_VAR 0 3
63701: PUSH
63702: LD_INT 0
63704: EQUAL
63705: IFFALSE 63711
// InitStreamMode ;
63707: CALL 64887 0 0
// if p3 = 1 then
63711: LD_VAR 0 3
63715: PUSH
63716: LD_INT 1
63718: EQUAL
63719: IFFALSE 63729
// sRocket := true ;
63721: LD_ADDR_EXP 52
63725: PUSH
63726: LD_INT 1
63728: ST_TO_ADDR
// if p3 = 2 then
63729: LD_VAR 0 3
63733: PUSH
63734: LD_INT 2
63736: EQUAL
63737: IFFALSE 63747
// sSpeed := true ;
63739: LD_ADDR_EXP 51
63743: PUSH
63744: LD_INT 1
63746: ST_TO_ADDR
// if p3 = 3 then
63747: LD_VAR 0 3
63751: PUSH
63752: LD_INT 3
63754: EQUAL
63755: IFFALSE 63765
// sEngine := true ;
63757: LD_ADDR_EXP 53
63761: PUSH
63762: LD_INT 1
63764: ST_TO_ADDR
// if p3 = 4 then
63765: LD_VAR 0 3
63769: PUSH
63770: LD_INT 4
63772: EQUAL
63773: IFFALSE 63783
// sSpec := true ;
63775: LD_ADDR_EXP 50
63779: PUSH
63780: LD_INT 1
63782: ST_TO_ADDR
// if p3 = 5 then
63783: LD_VAR 0 3
63787: PUSH
63788: LD_INT 5
63790: EQUAL
63791: IFFALSE 63801
// sLevel := true ;
63793: LD_ADDR_EXP 54
63797: PUSH
63798: LD_INT 1
63800: ST_TO_ADDR
// if p3 = 6 then
63801: LD_VAR 0 3
63805: PUSH
63806: LD_INT 6
63808: EQUAL
63809: IFFALSE 63819
// sArmoury := true ;
63811: LD_ADDR_EXP 55
63815: PUSH
63816: LD_INT 1
63818: ST_TO_ADDR
// if p3 = 7 then
63819: LD_VAR 0 3
63823: PUSH
63824: LD_INT 7
63826: EQUAL
63827: IFFALSE 63837
// sRadar := true ;
63829: LD_ADDR_EXP 56
63833: PUSH
63834: LD_INT 1
63836: ST_TO_ADDR
// if p3 = 8 then
63837: LD_VAR 0 3
63841: PUSH
63842: LD_INT 8
63844: EQUAL
63845: IFFALSE 63855
// sBunker := true ;
63847: LD_ADDR_EXP 57
63851: PUSH
63852: LD_INT 1
63854: ST_TO_ADDR
// if p3 = 9 then
63855: LD_VAR 0 3
63859: PUSH
63860: LD_INT 9
63862: EQUAL
63863: IFFALSE 63873
// sHack := true ;
63865: LD_ADDR_EXP 58
63869: PUSH
63870: LD_INT 1
63872: ST_TO_ADDR
// if p3 = 10 then
63873: LD_VAR 0 3
63877: PUSH
63878: LD_INT 10
63880: EQUAL
63881: IFFALSE 63891
// sFire := true ;
63883: LD_ADDR_EXP 59
63887: PUSH
63888: LD_INT 1
63890: ST_TO_ADDR
// if p3 = 11 then
63891: LD_VAR 0 3
63895: PUSH
63896: LD_INT 11
63898: EQUAL
63899: IFFALSE 63909
// sRefresh := true ;
63901: LD_ADDR_EXP 60
63905: PUSH
63906: LD_INT 1
63908: ST_TO_ADDR
// if p3 = 12 then
63909: LD_VAR 0 3
63913: PUSH
63914: LD_INT 12
63916: EQUAL
63917: IFFALSE 63927
// sExp := true ;
63919: LD_ADDR_EXP 61
63923: PUSH
63924: LD_INT 1
63926: ST_TO_ADDR
// if p3 = 13 then
63927: LD_VAR 0 3
63931: PUSH
63932: LD_INT 13
63934: EQUAL
63935: IFFALSE 63945
// sDepot := true ;
63937: LD_ADDR_EXP 62
63941: PUSH
63942: LD_INT 1
63944: ST_TO_ADDR
// if p3 = 14 then
63945: LD_VAR 0 3
63949: PUSH
63950: LD_INT 14
63952: EQUAL
63953: IFFALSE 63963
// sFlag := true ;
63955: LD_ADDR_EXP 63
63959: PUSH
63960: LD_INT 1
63962: ST_TO_ADDR
// if p3 = 15 then
63963: LD_VAR 0 3
63967: PUSH
63968: LD_INT 15
63970: EQUAL
63971: IFFALSE 63981
// sKamikadze := true ;
63973: LD_ADDR_EXP 71
63977: PUSH
63978: LD_INT 1
63980: ST_TO_ADDR
// if p3 = 16 then
63981: LD_VAR 0 3
63985: PUSH
63986: LD_INT 16
63988: EQUAL
63989: IFFALSE 63999
// sTroll := true ;
63991: LD_ADDR_EXP 72
63995: PUSH
63996: LD_INT 1
63998: ST_TO_ADDR
// if p3 = 17 then
63999: LD_VAR 0 3
64003: PUSH
64004: LD_INT 17
64006: EQUAL
64007: IFFALSE 64017
// sSlow := true ;
64009: LD_ADDR_EXP 73
64013: PUSH
64014: LD_INT 1
64016: ST_TO_ADDR
// if p3 = 18 then
64017: LD_VAR 0 3
64021: PUSH
64022: LD_INT 18
64024: EQUAL
64025: IFFALSE 64035
// sLack := true ;
64027: LD_ADDR_EXP 74
64031: PUSH
64032: LD_INT 1
64034: ST_TO_ADDR
// if p3 = 19 then
64035: LD_VAR 0 3
64039: PUSH
64040: LD_INT 19
64042: EQUAL
64043: IFFALSE 64053
// sTank := true ;
64045: LD_ADDR_EXP 76
64049: PUSH
64050: LD_INT 1
64052: ST_TO_ADDR
// if p3 = 20 then
64053: LD_VAR 0 3
64057: PUSH
64058: LD_INT 20
64060: EQUAL
64061: IFFALSE 64071
// sRemote := true ;
64063: LD_ADDR_EXP 77
64067: PUSH
64068: LD_INT 1
64070: ST_TO_ADDR
// if p3 = 21 then
64071: LD_VAR 0 3
64075: PUSH
64076: LD_INT 21
64078: EQUAL
64079: IFFALSE 64089
// sPowell := true ;
64081: LD_ADDR_EXP 78
64085: PUSH
64086: LD_INT 1
64088: ST_TO_ADDR
// if p3 = 22 then
64089: LD_VAR 0 3
64093: PUSH
64094: LD_INT 22
64096: EQUAL
64097: IFFALSE 64107
// sTeleport := true ;
64099: LD_ADDR_EXP 81
64103: PUSH
64104: LD_INT 1
64106: ST_TO_ADDR
// if p3 = 23 then
64107: LD_VAR 0 3
64111: PUSH
64112: LD_INT 23
64114: EQUAL
64115: IFFALSE 64125
// sOilTower := true ;
64117: LD_ADDR_EXP 83
64121: PUSH
64122: LD_INT 1
64124: ST_TO_ADDR
// if p3 = 24 then
64125: LD_VAR 0 3
64129: PUSH
64130: LD_INT 24
64132: EQUAL
64133: IFFALSE 64143
// sShovel := true ;
64135: LD_ADDR_EXP 84
64139: PUSH
64140: LD_INT 1
64142: ST_TO_ADDR
// if p3 = 25 then
64143: LD_VAR 0 3
64147: PUSH
64148: LD_INT 25
64150: EQUAL
64151: IFFALSE 64161
// sSheik := true ;
64153: LD_ADDR_EXP 85
64157: PUSH
64158: LD_INT 1
64160: ST_TO_ADDR
// if p3 = 26 then
64161: LD_VAR 0 3
64165: PUSH
64166: LD_INT 26
64168: EQUAL
64169: IFFALSE 64179
// sEarthquake := true ;
64171: LD_ADDR_EXP 87
64175: PUSH
64176: LD_INT 1
64178: ST_TO_ADDR
// if p3 = 27 then
64179: LD_VAR 0 3
64183: PUSH
64184: LD_INT 27
64186: EQUAL
64187: IFFALSE 64197
// sAI := true ;
64189: LD_ADDR_EXP 88
64193: PUSH
64194: LD_INT 1
64196: ST_TO_ADDR
// if p3 = 28 then
64197: LD_VAR 0 3
64201: PUSH
64202: LD_INT 28
64204: EQUAL
64205: IFFALSE 64215
// sCargo := true ;
64207: LD_ADDR_EXP 91
64211: PUSH
64212: LD_INT 1
64214: ST_TO_ADDR
// if p3 = 29 then
64215: LD_VAR 0 3
64219: PUSH
64220: LD_INT 29
64222: EQUAL
64223: IFFALSE 64233
// sDLaser := true ;
64225: LD_ADDR_EXP 92
64229: PUSH
64230: LD_INT 1
64232: ST_TO_ADDR
// if p3 = 30 then
64233: LD_VAR 0 3
64237: PUSH
64238: LD_INT 30
64240: EQUAL
64241: IFFALSE 64251
// sExchange := true ;
64243: LD_ADDR_EXP 93
64247: PUSH
64248: LD_INT 1
64250: ST_TO_ADDR
// if p3 = 31 then
64251: LD_VAR 0 3
64255: PUSH
64256: LD_INT 31
64258: EQUAL
64259: IFFALSE 64269
// sFac := true ;
64261: LD_ADDR_EXP 94
64265: PUSH
64266: LD_INT 1
64268: ST_TO_ADDR
// if p3 = 32 then
64269: LD_VAR 0 3
64273: PUSH
64274: LD_INT 32
64276: EQUAL
64277: IFFALSE 64287
// sPower := true ;
64279: LD_ADDR_EXP 95
64283: PUSH
64284: LD_INT 1
64286: ST_TO_ADDR
// if p3 = 33 then
64287: LD_VAR 0 3
64291: PUSH
64292: LD_INT 33
64294: EQUAL
64295: IFFALSE 64305
// sRandom := true ;
64297: LD_ADDR_EXP 96
64301: PUSH
64302: LD_INT 1
64304: ST_TO_ADDR
// if p3 = 34 then
64305: LD_VAR 0 3
64309: PUSH
64310: LD_INT 34
64312: EQUAL
64313: IFFALSE 64323
// sShield := true ;
64315: LD_ADDR_EXP 97
64319: PUSH
64320: LD_INT 1
64322: ST_TO_ADDR
// if p3 = 35 then
64323: LD_VAR 0 3
64327: PUSH
64328: LD_INT 35
64330: EQUAL
64331: IFFALSE 64341
// sTime := true ;
64333: LD_ADDR_EXP 98
64337: PUSH
64338: LD_INT 1
64340: ST_TO_ADDR
// if p3 = 36 then
64341: LD_VAR 0 3
64345: PUSH
64346: LD_INT 36
64348: EQUAL
64349: IFFALSE 64359
// sTools := true ;
64351: LD_ADDR_EXP 99
64355: PUSH
64356: LD_INT 1
64358: ST_TO_ADDR
// if p3 = 101 then
64359: LD_VAR 0 3
64363: PUSH
64364: LD_INT 101
64366: EQUAL
64367: IFFALSE 64377
// sSold := true ;
64369: LD_ADDR_EXP 64
64373: PUSH
64374: LD_INT 1
64376: ST_TO_ADDR
// if p3 = 102 then
64377: LD_VAR 0 3
64381: PUSH
64382: LD_INT 102
64384: EQUAL
64385: IFFALSE 64395
// sDiff := true ;
64387: LD_ADDR_EXP 65
64391: PUSH
64392: LD_INT 1
64394: ST_TO_ADDR
// if p3 = 103 then
64395: LD_VAR 0 3
64399: PUSH
64400: LD_INT 103
64402: EQUAL
64403: IFFALSE 64413
// sFog := true ;
64405: LD_ADDR_EXP 68
64409: PUSH
64410: LD_INT 1
64412: ST_TO_ADDR
// if p3 = 104 then
64413: LD_VAR 0 3
64417: PUSH
64418: LD_INT 104
64420: EQUAL
64421: IFFALSE 64431
// sReset := true ;
64423: LD_ADDR_EXP 69
64427: PUSH
64428: LD_INT 1
64430: ST_TO_ADDR
// if p3 = 105 then
64431: LD_VAR 0 3
64435: PUSH
64436: LD_INT 105
64438: EQUAL
64439: IFFALSE 64449
// sSun := true ;
64441: LD_ADDR_EXP 70
64445: PUSH
64446: LD_INT 1
64448: ST_TO_ADDR
// if p3 = 106 then
64449: LD_VAR 0 3
64453: PUSH
64454: LD_INT 106
64456: EQUAL
64457: IFFALSE 64467
// sTiger := true ;
64459: LD_ADDR_EXP 66
64463: PUSH
64464: LD_INT 1
64466: ST_TO_ADDR
// if p3 = 107 then
64467: LD_VAR 0 3
64471: PUSH
64472: LD_INT 107
64474: EQUAL
64475: IFFALSE 64485
// sBomb := true ;
64477: LD_ADDR_EXP 67
64481: PUSH
64482: LD_INT 1
64484: ST_TO_ADDR
// if p3 = 108 then
64485: LD_VAR 0 3
64489: PUSH
64490: LD_INT 108
64492: EQUAL
64493: IFFALSE 64503
// sWound := true ;
64495: LD_ADDR_EXP 75
64499: PUSH
64500: LD_INT 1
64502: ST_TO_ADDR
// if p3 = 109 then
64503: LD_VAR 0 3
64507: PUSH
64508: LD_INT 109
64510: EQUAL
64511: IFFALSE 64521
// sBetray := true ;
64513: LD_ADDR_EXP 79
64517: PUSH
64518: LD_INT 1
64520: ST_TO_ADDR
// if p3 = 110 then
64521: LD_VAR 0 3
64525: PUSH
64526: LD_INT 110
64528: EQUAL
64529: IFFALSE 64539
// sContamin := true ;
64531: LD_ADDR_EXP 80
64535: PUSH
64536: LD_INT 1
64538: ST_TO_ADDR
// if p3 = 111 then
64539: LD_VAR 0 3
64543: PUSH
64544: LD_INT 111
64546: EQUAL
64547: IFFALSE 64557
// sOil := true ;
64549: LD_ADDR_EXP 82
64553: PUSH
64554: LD_INT 1
64556: ST_TO_ADDR
// if p3 = 112 then
64557: LD_VAR 0 3
64561: PUSH
64562: LD_INT 112
64564: EQUAL
64565: IFFALSE 64575
// sStu := true ;
64567: LD_ADDR_EXP 86
64571: PUSH
64572: LD_INT 1
64574: ST_TO_ADDR
// if p3 = 113 then
64575: LD_VAR 0 3
64579: PUSH
64580: LD_INT 113
64582: EQUAL
64583: IFFALSE 64593
// sBazooka := true ;
64585: LD_ADDR_EXP 89
64589: PUSH
64590: LD_INT 1
64592: ST_TO_ADDR
// if p3 = 114 then
64593: LD_VAR 0 3
64597: PUSH
64598: LD_INT 114
64600: EQUAL
64601: IFFALSE 64611
// sMortar := true ;
64603: LD_ADDR_EXP 90
64607: PUSH
64608: LD_INT 1
64610: ST_TO_ADDR
// if p3 = 115 then
64611: LD_VAR 0 3
64615: PUSH
64616: LD_INT 115
64618: EQUAL
64619: IFFALSE 64629
// sRanger := true ;
64621: LD_ADDR_EXP 100
64625: PUSH
64626: LD_INT 1
64628: ST_TO_ADDR
// if p3 = 116 then
64629: LD_VAR 0 3
64633: PUSH
64634: LD_INT 116
64636: EQUAL
64637: IFFALSE 64647
// sComputer := true ;
64639: LD_ADDR_EXP 101
64643: PUSH
64644: LD_INT 1
64646: ST_TO_ADDR
// if p3 = 117 then
64647: LD_VAR 0 3
64651: PUSH
64652: LD_INT 117
64654: EQUAL
64655: IFFALSE 64665
// s30 := true ;
64657: LD_ADDR_EXP 102
64661: PUSH
64662: LD_INT 1
64664: ST_TO_ADDR
// if p3 = 118 then
64665: LD_VAR 0 3
64669: PUSH
64670: LD_INT 118
64672: EQUAL
64673: IFFALSE 64683
// s60 := true ;
64675: LD_ADDR_EXP 103
64679: PUSH
64680: LD_INT 1
64682: ST_TO_ADDR
// end ; if p2 = hack_mode then
64683: LD_VAR 0 2
64687: PUSH
64688: LD_INT 101
64690: EQUAL
64691: IFFALSE 64819
// begin case p3 of 1 :
64693: LD_VAR 0 3
64697: PUSH
64698: LD_INT 1
64700: DOUBLE
64701: EQUAL
64702: IFTRUE 64706
64704: GO 64713
64706: POP
// hHackUnlimitedResources ; 2 :
64707: CALL 76966 0 0
64711: GO 64819
64713: LD_INT 2
64715: DOUBLE
64716: EQUAL
64717: IFTRUE 64721
64719: GO 64728
64721: POP
// hHackSetLevel10 ; 3 :
64722: CALL 77099 0 0
64726: GO 64819
64728: LD_INT 3
64730: DOUBLE
64731: EQUAL
64732: IFTRUE 64736
64734: GO 64743
64736: POP
// hHackSetLevel10YourUnits ; 4 :
64737: CALL 77184 0 0
64741: GO 64819
64743: LD_INT 4
64745: DOUBLE
64746: EQUAL
64747: IFTRUE 64751
64749: GO 64758
64751: POP
// hHackInvincible ; 5 :
64752: CALL 77632 0 0
64756: GO 64819
64758: LD_INT 5
64760: DOUBLE
64761: EQUAL
64762: IFTRUE 64766
64764: GO 64773
64766: POP
// hHackInvisible ; 6 :
64767: CALL 77743 0 0
64771: GO 64819
64773: LD_INT 6
64775: DOUBLE
64776: EQUAL
64777: IFTRUE 64781
64779: GO 64788
64781: POP
// hHackChangeYourSide ; 7 :
64782: CALL 77800 0 0
64786: GO 64819
64788: LD_INT 7
64790: DOUBLE
64791: EQUAL
64792: IFTRUE 64796
64794: GO 64803
64796: POP
// hHackChangeUnitSide ; 8 :
64797: CALL 77842 0 0
64801: GO 64819
64803: LD_INT 8
64805: DOUBLE
64806: EQUAL
64807: IFTRUE 64811
64809: GO 64818
64811: POP
// hHackFog ; end ;
64812: CALL 77943 0 0
64816: GO 64819
64818: POP
// end ; if p2 = game_save_mode then
64819: LD_VAR 0 2
64823: PUSH
64824: LD_INT 102
64826: EQUAL
64827: IFFALSE 64882
// begin if p3 = 1 then
64829: LD_VAR 0 3
64833: PUSH
64834: LD_INT 1
64836: EQUAL
64837: IFFALSE 64849
// globalGameSaveCounter := p4 ;
64839: LD_ADDR_EXP 46
64843: PUSH
64844: LD_VAR 0 4
64848: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
64849: LD_VAR 0 3
64853: PUSH
64854: LD_INT 2
64856: EQUAL
64857: PUSH
64858: LD_EXP 46
64862: AND
64863: IFFALSE 64882
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
64865: LD_STRING setGameSaveCounter(
64867: PUSH
64868: LD_EXP 46
64872: STR
64873: PUSH
64874: LD_STRING )
64876: STR
64877: PPUSH
64878: CALL_OW 559
// end ; end ;
64882: LD_VAR 0 7
64886: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
64887: LD_INT 0
64889: PPUSH
// streamModeActive := false ;
64890: LD_ADDR_EXP 47
64894: PUSH
64895: LD_INT 0
64897: ST_TO_ADDR
// normalCounter := 36 ;
64898: LD_ADDR_EXP 48
64902: PUSH
64903: LD_INT 36
64905: ST_TO_ADDR
// hardcoreCounter := 18 ;
64906: LD_ADDR_EXP 49
64910: PUSH
64911: LD_INT 18
64913: ST_TO_ADDR
// sRocket := false ;
64914: LD_ADDR_EXP 52
64918: PUSH
64919: LD_INT 0
64921: ST_TO_ADDR
// sSpeed := false ;
64922: LD_ADDR_EXP 51
64926: PUSH
64927: LD_INT 0
64929: ST_TO_ADDR
// sEngine := false ;
64930: LD_ADDR_EXP 53
64934: PUSH
64935: LD_INT 0
64937: ST_TO_ADDR
// sSpec := false ;
64938: LD_ADDR_EXP 50
64942: PUSH
64943: LD_INT 0
64945: ST_TO_ADDR
// sLevel := false ;
64946: LD_ADDR_EXP 54
64950: PUSH
64951: LD_INT 0
64953: ST_TO_ADDR
// sArmoury := false ;
64954: LD_ADDR_EXP 55
64958: PUSH
64959: LD_INT 0
64961: ST_TO_ADDR
// sRadar := false ;
64962: LD_ADDR_EXP 56
64966: PUSH
64967: LD_INT 0
64969: ST_TO_ADDR
// sBunker := false ;
64970: LD_ADDR_EXP 57
64974: PUSH
64975: LD_INT 0
64977: ST_TO_ADDR
// sHack := false ;
64978: LD_ADDR_EXP 58
64982: PUSH
64983: LD_INT 0
64985: ST_TO_ADDR
// sFire := false ;
64986: LD_ADDR_EXP 59
64990: PUSH
64991: LD_INT 0
64993: ST_TO_ADDR
// sRefresh := false ;
64994: LD_ADDR_EXP 60
64998: PUSH
64999: LD_INT 0
65001: ST_TO_ADDR
// sExp := false ;
65002: LD_ADDR_EXP 61
65006: PUSH
65007: LD_INT 0
65009: ST_TO_ADDR
// sDepot := false ;
65010: LD_ADDR_EXP 62
65014: PUSH
65015: LD_INT 0
65017: ST_TO_ADDR
// sFlag := false ;
65018: LD_ADDR_EXP 63
65022: PUSH
65023: LD_INT 0
65025: ST_TO_ADDR
// sKamikadze := false ;
65026: LD_ADDR_EXP 71
65030: PUSH
65031: LD_INT 0
65033: ST_TO_ADDR
// sTroll := false ;
65034: LD_ADDR_EXP 72
65038: PUSH
65039: LD_INT 0
65041: ST_TO_ADDR
// sSlow := false ;
65042: LD_ADDR_EXP 73
65046: PUSH
65047: LD_INT 0
65049: ST_TO_ADDR
// sLack := false ;
65050: LD_ADDR_EXP 74
65054: PUSH
65055: LD_INT 0
65057: ST_TO_ADDR
// sTank := false ;
65058: LD_ADDR_EXP 76
65062: PUSH
65063: LD_INT 0
65065: ST_TO_ADDR
// sRemote := false ;
65066: LD_ADDR_EXP 77
65070: PUSH
65071: LD_INT 0
65073: ST_TO_ADDR
// sPowell := false ;
65074: LD_ADDR_EXP 78
65078: PUSH
65079: LD_INT 0
65081: ST_TO_ADDR
// sTeleport := false ;
65082: LD_ADDR_EXP 81
65086: PUSH
65087: LD_INT 0
65089: ST_TO_ADDR
// sOilTower := false ;
65090: LD_ADDR_EXP 83
65094: PUSH
65095: LD_INT 0
65097: ST_TO_ADDR
// sShovel := false ;
65098: LD_ADDR_EXP 84
65102: PUSH
65103: LD_INT 0
65105: ST_TO_ADDR
// sSheik := false ;
65106: LD_ADDR_EXP 85
65110: PUSH
65111: LD_INT 0
65113: ST_TO_ADDR
// sEarthquake := false ;
65114: LD_ADDR_EXP 87
65118: PUSH
65119: LD_INT 0
65121: ST_TO_ADDR
// sAI := false ;
65122: LD_ADDR_EXP 88
65126: PUSH
65127: LD_INT 0
65129: ST_TO_ADDR
// sCargo := false ;
65130: LD_ADDR_EXP 91
65134: PUSH
65135: LD_INT 0
65137: ST_TO_ADDR
// sDLaser := false ;
65138: LD_ADDR_EXP 92
65142: PUSH
65143: LD_INT 0
65145: ST_TO_ADDR
// sExchange := false ;
65146: LD_ADDR_EXP 93
65150: PUSH
65151: LD_INT 0
65153: ST_TO_ADDR
// sFac := false ;
65154: LD_ADDR_EXP 94
65158: PUSH
65159: LD_INT 0
65161: ST_TO_ADDR
// sPower := false ;
65162: LD_ADDR_EXP 95
65166: PUSH
65167: LD_INT 0
65169: ST_TO_ADDR
// sRandom := false ;
65170: LD_ADDR_EXP 96
65174: PUSH
65175: LD_INT 0
65177: ST_TO_ADDR
// sShield := false ;
65178: LD_ADDR_EXP 97
65182: PUSH
65183: LD_INT 0
65185: ST_TO_ADDR
// sTime := false ;
65186: LD_ADDR_EXP 98
65190: PUSH
65191: LD_INT 0
65193: ST_TO_ADDR
// sTools := false ;
65194: LD_ADDR_EXP 99
65198: PUSH
65199: LD_INT 0
65201: ST_TO_ADDR
// sSold := false ;
65202: LD_ADDR_EXP 64
65206: PUSH
65207: LD_INT 0
65209: ST_TO_ADDR
// sDiff := false ;
65210: LD_ADDR_EXP 65
65214: PUSH
65215: LD_INT 0
65217: ST_TO_ADDR
// sFog := false ;
65218: LD_ADDR_EXP 68
65222: PUSH
65223: LD_INT 0
65225: ST_TO_ADDR
// sReset := false ;
65226: LD_ADDR_EXP 69
65230: PUSH
65231: LD_INT 0
65233: ST_TO_ADDR
// sSun := false ;
65234: LD_ADDR_EXP 70
65238: PUSH
65239: LD_INT 0
65241: ST_TO_ADDR
// sTiger := false ;
65242: LD_ADDR_EXP 66
65246: PUSH
65247: LD_INT 0
65249: ST_TO_ADDR
// sBomb := false ;
65250: LD_ADDR_EXP 67
65254: PUSH
65255: LD_INT 0
65257: ST_TO_ADDR
// sWound := false ;
65258: LD_ADDR_EXP 75
65262: PUSH
65263: LD_INT 0
65265: ST_TO_ADDR
// sBetray := false ;
65266: LD_ADDR_EXP 79
65270: PUSH
65271: LD_INT 0
65273: ST_TO_ADDR
// sContamin := false ;
65274: LD_ADDR_EXP 80
65278: PUSH
65279: LD_INT 0
65281: ST_TO_ADDR
// sOil := false ;
65282: LD_ADDR_EXP 82
65286: PUSH
65287: LD_INT 0
65289: ST_TO_ADDR
// sStu := false ;
65290: LD_ADDR_EXP 86
65294: PUSH
65295: LD_INT 0
65297: ST_TO_ADDR
// sBazooka := false ;
65298: LD_ADDR_EXP 89
65302: PUSH
65303: LD_INT 0
65305: ST_TO_ADDR
// sMortar := false ;
65306: LD_ADDR_EXP 90
65310: PUSH
65311: LD_INT 0
65313: ST_TO_ADDR
// sRanger := false ;
65314: LD_ADDR_EXP 100
65318: PUSH
65319: LD_INT 0
65321: ST_TO_ADDR
// sComputer := false ;
65322: LD_ADDR_EXP 101
65326: PUSH
65327: LD_INT 0
65329: ST_TO_ADDR
// s30 := false ;
65330: LD_ADDR_EXP 102
65334: PUSH
65335: LD_INT 0
65337: ST_TO_ADDR
// s60 := false ;
65338: LD_ADDR_EXP 103
65342: PUSH
65343: LD_INT 0
65345: ST_TO_ADDR
// end ;
65346: LD_VAR 0 1
65350: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
65351: LD_INT 0
65353: PPUSH
65354: PPUSH
65355: PPUSH
65356: PPUSH
65357: PPUSH
65358: PPUSH
65359: PPUSH
// result := [ ] ;
65360: LD_ADDR_VAR 0 2
65364: PUSH
65365: EMPTY
65366: ST_TO_ADDR
// if campaign_id = 1 then
65367: LD_OWVAR 69
65371: PUSH
65372: LD_INT 1
65374: EQUAL
65375: IFFALSE 68541
// begin case mission_number of 1 :
65377: LD_OWVAR 70
65381: PUSH
65382: LD_INT 1
65384: DOUBLE
65385: EQUAL
65386: IFTRUE 65390
65388: GO 65466
65390: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
65391: LD_ADDR_VAR 0 2
65395: PUSH
65396: LD_INT 2
65398: PUSH
65399: LD_INT 4
65401: PUSH
65402: LD_INT 11
65404: PUSH
65405: LD_INT 12
65407: PUSH
65408: LD_INT 15
65410: PUSH
65411: LD_INT 16
65413: PUSH
65414: LD_INT 22
65416: PUSH
65417: LD_INT 23
65419: PUSH
65420: LD_INT 26
65422: PUSH
65423: EMPTY
65424: LIST
65425: LIST
65426: LIST
65427: LIST
65428: LIST
65429: LIST
65430: LIST
65431: LIST
65432: LIST
65433: PUSH
65434: LD_INT 101
65436: PUSH
65437: LD_INT 102
65439: PUSH
65440: LD_INT 106
65442: PUSH
65443: LD_INT 116
65445: PUSH
65446: LD_INT 117
65448: PUSH
65449: LD_INT 118
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: LIST
65456: LIST
65457: LIST
65458: LIST
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: ST_TO_ADDR
65464: GO 68539
65466: LD_INT 2
65468: DOUBLE
65469: EQUAL
65470: IFTRUE 65474
65472: GO 65558
65474: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
65475: LD_ADDR_VAR 0 2
65479: PUSH
65480: LD_INT 2
65482: PUSH
65483: LD_INT 4
65485: PUSH
65486: LD_INT 11
65488: PUSH
65489: LD_INT 12
65491: PUSH
65492: LD_INT 15
65494: PUSH
65495: LD_INT 16
65497: PUSH
65498: LD_INT 22
65500: PUSH
65501: LD_INT 23
65503: PUSH
65504: LD_INT 26
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: LIST
65511: LIST
65512: LIST
65513: LIST
65514: LIST
65515: LIST
65516: LIST
65517: PUSH
65518: LD_INT 101
65520: PUSH
65521: LD_INT 102
65523: PUSH
65524: LD_INT 105
65526: PUSH
65527: LD_INT 106
65529: PUSH
65530: LD_INT 108
65532: PUSH
65533: LD_INT 116
65535: PUSH
65536: LD_INT 117
65538: PUSH
65539: LD_INT 118
65541: PUSH
65542: EMPTY
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: ST_TO_ADDR
65556: GO 68539
65558: LD_INT 3
65560: DOUBLE
65561: EQUAL
65562: IFTRUE 65566
65564: GO 65654
65566: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
65567: LD_ADDR_VAR 0 2
65571: PUSH
65572: LD_INT 2
65574: PUSH
65575: LD_INT 4
65577: PUSH
65578: LD_INT 5
65580: PUSH
65581: LD_INT 11
65583: PUSH
65584: LD_INT 12
65586: PUSH
65587: LD_INT 15
65589: PUSH
65590: LD_INT 16
65592: PUSH
65593: LD_INT 22
65595: PUSH
65596: LD_INT 26
65598: PUSH
65599: LD_INT 36
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: LIST
65613: PUSH
65614: LD_INT 101
65616: PUSH
65617: LD_INT 102
65619: PUSH
65620: LD_INT 105
65622: PUSH
65623: LD_INT 106
65625: PUSH
65626: LD_INT 108
65628: PUSH
65629: LD_INT 116
65631: PUSH
65632: LD_INT 117
65634: PUSH
65635: LD_INT 118
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: LIST
65642: LIST
65643: LIST
65644: LIST
65645: LIST
65646: LIST
65647: PUSH
65648: EMPTY
65649: LIST
65650: LIST
65651: ST_TO_ADDR
65652: GO 68539
65654: LD_INT 4
65656: DOUBLE
65657: EQUAL
65658: IFTRUE 65662
65660: GO 65758
65662: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
65663: LD_ADDR_VAR 0 2
65667: PUSH
65668: LD_INT 2
65670: PUSH
65671: LD_INT 4
65673: PUSH
65674: LD_INT 5
65676: PUSH
65677: LD_INT 8
65679: PUSH
65680: LD_INT 11
65682: PUSH
65683: LD_INT 12
65685: PUSH
65686: LD_INT 15
65688: PUSH
65689: LD_INT 16
65691: PUSH
65692: LD_INT 22
65694: PUSH
65695: LD_INT 23
65697: PUSH
65698: LD_INT 26
65700: PUSH
65701: LD_INT 36
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: LIST
65708: LIST
65709: LIST
65710: LIST
65711: LIST
65712: LIST
65713: LIST
65714: LIST
65715: LIST
65716: LIST
65717: PUSH
65718: LD_INT 101
65720: PUSH
65721: LD_INT 102
65723: PUSH
65724: LD_INT 105
65726: PUSH
65727: LD_INT 106
65729: PUSH
65730: LD_INT 108
65732: PUSH
65733: LD_INT 116
65735: PUSH
65736: LD_INT 117
65738: PUSH
65739: LD_INT 118
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: LIST
65746: LIST
65747: LIST
65748: LIST
65749: LIST
65750: LIST
65751: PUSH
65752: EMPTY
65753: LIST
65754: LIST
65755: ST_TO_ADDR
65756: GO 68539
65758: LD_INT 5
65760: DOUBLE
65761: EQUAL
65762: IFTRUE 65766
65764: GO 65878
65766: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
65767: LD_ADDR_VAR 0 2
65771: PUSH
65772: LD_INT 2
65774: PUSH
65775: LD_INT 4
65777: PUSH
65778: LD_INT 5
65780: PUSH
65781: LD_INT 6
65783: PUSH
65784: LD_INT 8
65786: PUSH
65787: LD_INT 11
65789: PUSH
65790: LD_INT 12
65792: PUSH
65793: LD_INT 15
65795: PUSH
65796: LD_INT 16
65798: PUSH
65799: LD_INT 22
65801: PUSH
65802: LD_INT 23
65804: PUSH
65805: LD_INT 25
65807: PUSH
65808: LD_INT 26
65810: PUSH
65811: LD_INT 36
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: LIST
65818: LIST
65819: LIST
65820: LIST
65821: LIST
65822: LIST
65823: LIST
65824: LIST
65825: LIST
65826: LIST
65827: LIST
65828: LIST
65829: PUSH
65830: LD_INT 101
65832: PUSH
65833: LD_INT 102
65835: PUSH
65836: LD_INT 105
65838: PUSH
65839: LD_INT 106
65841: PUSH
65842: LD_INT 108
65844: PUSH
65845: LD_INT 109
65847: PUSH
65848: LD_INT 112
65850: PUSH
65851: LD_INT 116
65853: PUSH
65854: LD_INT 117
65856: PUSH
65857: LD_INT 118
65859: PUSH
65860: EMPTY
65861: LIST
65862: LIST
65863: LIST
65864: LIST
65865: LIST
65866: LIST
65867: LIST
65868: LIST
65869: LIST
65870: LIST
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: ST_TO_ADDR
65876: GO 68539
65878: LD_INT 6
65880: DOUBLE
65881: EQUAL
65882: IFTRUE 65886
65884: GO 66018
65886: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
65887: LD_ADDR_VAR 0 2
65891: PUSH
65892: LD_INT 2
65894: PUSH
65895: LD_INT 4
65897: PUSH
65898: LD_INT 5
65900: PUSH
65901: LD_INT 6
65903: PUSH
65904: LD_INT 8
65906: PUSH
65907: LD_INT 11
65909: PUSH
65910: LD_INT 12
65912: PUSH
65913: LD_INT 15
65915: PUSH
65916: LD_INT 16
65918: PUSH
65919: LD_INT 20
65921: PUSH
65922: LD_INT 21
65924: PUSH
65925: LD_INT 22
65927: PUSH
65928: LD_INT 23
65930: PUSH
65931: LD_INT 25
65933: PUSH
65934: LD_INT 26
65936: PUSH
65937: LD_INT 30
65939: PUSH
65940: LD_INT 31
65942: PUSH
65943: LD_INT 32
65945: PUSH
65946: LD_INT 36
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: LIST
65953: LIST
65954: LIST
65955: LIST
65956: LIST
65957: LIST
65958: LIST
65959: LIST
65960: LIST
65961: LIST
65962: LIST
65963: LIST
65964: LIST
65965: LIST
65966: LIST
65967: LIST
65968: LIST
65969: PUSH
65970: LD_INT 101
65972: PUSH
65973: LD_INT 102
65975: PUSH
65976: LD_INT 105
65978: PUSH
65979: LD_INT 106
65981: PUSH
65982: LD_INT 108
65984: PUSH
65985: LD_INT 109
65987: PUSH
65988: LD_INT 112
65990: PUSH
65991: LD_INT 116
65993: PUSH
65994: LD_INT 117
65996: PUSH
65997: LD_INT 118
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: LIST
66004: LIST
66005: LIST
66006: LIST
66007: LIST
66008: LIST
66009: LIST
66010: LIST
66011: PUSH
66012: EMPTY
66013: LIST
66014: LIST
66015: ST_TO_ADDR
66016: GO 68539
66018: LD_INT 7
66020: DOUBLE
66021: EQUAL
66022: IFTRUE 66026
66024: GO 66138
66026: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
66027: LD_ADDR_VAR 0 2
66031: PUSH
66032: LD_INT 2
66034: PUSH
66035: LD_INT 4
66037: PUSH
66038: LD_INT 5
66040: PUSH
66041: LD_INT 7
66043: PUSH
66044: LD_INT 11
66046: PUSH
66047: LD_INT 12
66049: PUSH
66050: LD_INT 15
66052: PUSH
66053: LD_INT 16
66055: PUSH
66056: LD_INT 20
66058: PUSH
66059: LD_INT 21
66061: PUSH
66062: LD_INT 22
66064: PUSH
66065: LD_INT 23
66067: PUSH
66068: LD_INT 25
66070: PUSH
66071: LD_INT 26
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: LIST
66078: LIST
66079: LIST
66080: LIST
66081: LIST
66082: LIST
66083: LIST
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: PUSH
66090: LD_INT 101
66092: PUSH
66093: LD_INT 102
66095: PUSH
66096: LD_INT 103
66098: PUSH
66099: LD_INT 105
66101: PUSH
66102: LD_INT 106
66104: PUSH
66105: LD_INT 108
66107: PUSH
66108: LD_INT 112
66110: PUSH
66111: LD_INT 116
66113: PUSH
66114: LD_INT 117
66116: PUSH
66117: LD_INT 118
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: ST_TO_ADDR
66136: GO 68539
66138: LD_INT 8
66140: DOUBLE
66141: EQUAL
66142: IFTRUE 66146
66144: GO 66286
66146: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
66147: LD_ADDR_VAR 0 2
66151: PUSH
66152: LD_INT 2
66154: PUSH
66155: LD_INT 4
66157: PUSH
66158: LD_INT 5
66160: PUSH
66161: LD_INT 6
66163: PUSH
66164: LD_INT 7
66166: PUSH
66167: LD_INT 8
66169: PUSH
66170: LD_INT 11
66172: PUSH
66173: LD_INT 12
66175: PUSH
66176: LD_INT 15
66178: PUSH
66179: LD_INT 16
66181: PUSH
66182: LD_INT 20
66184: PUSH
66185: LD_INT 21
66187: PUSH
66188: LD_INT 22
66190: PUSH
66191: LD_INT 23
66193: PUSH
66194: LD_INT 25
66196: PUSH
66197: LD_INT 26
66199: PUSH
66200: LD_INT 30
66202: PUSH
66203: LD_INT 31
66205: PUSH
66206: LD_INT 32
66208: PUSH
66209: LD_INT 36
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: LIST
66216: LIST
66217: LIST
66218: LIST
66219: LIST
66220: LIST
66221: LIST
66222: LIST
66223: LIST
66224: LIST
66225: LIST
66226: LIST
66227: LIST
66228: LIST
66229: LIST
66230: LIST
66231: LIST
66232: LIST
66233: PUSH
66234: LD_INT 101
66236: PUSH
66237: LD_INT 102
66239: PUSH
66240: LD_INT 103
66242: PUSH
66243: LD_INT 105
66245: PUSH
66246: LD_INT 106
66248: PUSH
66249: LD_INT 108
66251: PUSH
66252: LD_INT 109
66254: PUSH
66255: LD_INT 112
66257: PUSH
66258: LD_INT 116
66260: PUSH
66261: LD_INT 117
66263: PUSH
66264: LD_INT 118
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: LIST
66271: LIST
66272: LIST
66273: LIST
66274: LIST
66275: LIST
66276: LIST
66277: LIST
66278: LIST
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: ST_TO_ADDR
66284: GO 68539
66286: LD_INT 9
66288: DOUBLE
66289: EQUAL
66290: IFTRUE 66294
66292: GO 66442
66294: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
66295: LD_ADDR_VAR 0 2
66299: PUSH
66300: LD_INT 2
66302: PUSH
66303: LD_INT 4
66305: PUSH
66306: LD_INT 5
66308: PUSH
66309: LD_INT 6
66311: PUSH
66312: LD_INT 7
66314: PUSH
66315: LD_INT 8
66317: PUSH
66318: LD_INT 11
66320: PUSH
66321: LD_INT 12
66323: PUSH
66324: LD_INT 15
66326: PUSH
66327: LD_INT 16
66329: PUSH
66330: LD_INT 20
66332: PUSH
66333: LD_INT 21
66335: PUSH
66336: LD_INT 22
66338: PUSH
66339: LD_INT 23
66341: PUSH
66342: LD_INT 25
66344: PUSH
66345: LD_INT 26
66347: PUSH
66348: LD_INT 28
66350: PUSH
66351: LD_INT 30
66353: PUSH
66354: LD_INT 31
66356: PUSH
66357: LD_INT 32
66359: PUSH
66360: LD_INT 36
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: LIST
66367: LIST
66368: LIST
66369: LIST
66370: LIST
66371: LIST
66372: LIST
66373: LIST
66374: LIST
66375: LIST
66376: LIST
66377: LIST
66378: LIST
66379: LIST
66380: LIST
66381: LIST
66382: LIST
66383: LIST
66384: LIST
66385: PUSH
66386: LD_INT 101
66388: PUSH
66389: LD_INT 102
66391: PUSH
66392: LD_INT 103
66394: PUSH
66395: LD_INT 105
66397: PUSH
66398: LD_INT 106
66400: PUSH
66401: LD_INT 108
66403: PUSH
66404: LD_INT 109
66406: PUSH
66407: LD_INT 112
66409: PUSH
66410: LD_INT 114
66412: PUSH
66413: LD_INT 116
66415: PUSH
66416: LD_INT 117
66418: PUSH
66419: LD_INT 118
66421: PUSH
66422: EMPTY
66423: LIST
66424: LIST
66425: LIST
66426: LIST
66427: LIST
66428: LIST
66429: LIST
66430: LIST
66431: LIST
66432: LIST
66433: LIST
66434: LIST
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: ST_TO_ADDR
66440: GO 68539
66442: LD_INT 10
66444: DOUBLE
66445: EQUAL
66446: IFTRUE 66450
66448: GO 66646
66450: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
66451: LD_ADDR_VAR 0 2
66455: PUSH
66456: LD_INT 2
66458: PUSH
66459: LD_INT 4
66461: PUSH
66462: LD_INT 5
66464: PUSH
66465: LD_INT 6
66467: PUSH
66468: LD_INT 7
66470: PUSH
66471: LD_INT 8
66473: PUSH
66474: LD_INT 9
66476: PUSH
66477: LD_INT 10
66479: PUSH
66480: LD_INT 11
66482: PUSH
66483: LD_INT 12
66485: PUSH
66486: LD_INT 13
66488: PUSH
66489: LD_INT 14
66491: PUSH
66492: LD_INT 15
66494: PUSH
66495: LD_INT 16
66497: PUSH
66498: LD_INT 17
66500: PUSH
66501: LD_INT 18
66503: PUSH
66504: LD_INT 19
66506: PUSH
66507: LD_INT 20
66509: PUSH
66510: LD_INT 21
66512: PUSH
66513: LD_INT 22
66515: PUSH
66516: LD_INT 23
66518: PUSH
66519: LD_INT 24
66521: PUSH
66522: LD_INT 25
66524: PUSH
66525: LD_INT 26
66527: PUSH
66528: LD_INT 28
66530: PUSH
66531: LD_INT 30
66533: PUSH
66534: LD_INT 31
66536: PUSH
66537: LD_INT 32
66539: PUSH
66540: LD_INT 36
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: LIST
66547: LIST
66548: LIST
66549: LIST
66550: LIST
66551: LIST
66552: LIST
66553: LIST
66554: LIST
66555: LIST
66556: LIST
66557: LIST
66558: LIST
66559: LIST
66560: LIST
66561: LIST
66562: LIST
66563: LIST
66564: LIST
66565: LIST
66566: LIST
66567: LIST
66568: LIST
66569: LIST
66570: LIST
66571: LIST
66572: LIST
66573: PUSH
66574: LD_INT 101
66576: PUSH
66577: LD_INT 102
66579: PUSH
66580: LD_INT 103
66582: PUSH
66583: LD_INT 104
66585: PUSH
66586: LD_INT 105
66588: PUSH
66589: LD_INT 106
66591: PUSH
66592: LD_INT 107
66594: PUSH
66595: LD_INT 108
66597: PUSH
66598: LD_INT 109
66600: PUSH
66601: LD_INT 110
66603: PUSH
66604: LD_INT 111
66606: PUSH
66607: LD_INT 112
66609: PUSH
66610: LD_INT 114
66612: PUSH
66613: LD_INT 116
66615: PUSH
66616: LD_INT 117
66618: PUSH
66619: LD_INT 118
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: LIST
66626: LIST
66627: LIST
66628: LIST
66629: LIST
66630: LIST
66631: LIST
66632: LIST
66633: LIST
66634: LIST
66635: LIST
66636: LIST
66637: LIST
66638: LIST
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: ST_TO_ADDR
66644: GO 68539
66646: LD_INT 11
66648: DOUBLE
66649: EQUAL
66650: IFTRUE 66654
66652: GO 66858
66654: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
66655: LD_ADDR_VAR 0 2
66659: PUSH
66660: LD_INT 2
66662: PUSH
66663: LD_INT 3
66665: PUSH
66666: LD_INT 4
66668: PUSH
66669: LD_INT 5
66671: PUSH
66672: LD_INT 6
66674: PUSH
66675: LD_INT 7
66677: PUSH
66678: LD_INT 8
66680: PUSH
66681: LD_INT 9
66683: PUSH
66684: LD_INT 10
66686: PUSH
66687: LD_INT 11
66689: PUSH
66690: LD_INT 12
66692: PUSH
66693: LD_INT 13
66695: PUSH
66696: LD_INT 14
66698: PUSH
66699: LD_INT 15
66701: PUSH
66702: LD_INT 16
66704: PUSH
66705: LD_INT 17
66707: PUSH
66708: LD_INT 18
66710: PUSH
66711: LD_INT 19
66713: PUSH
66714: LD_INT 20
66716: PUSH
66717: LD_INT 21
66719: PUSH
66720: LD_INT 22
66722: PUSH
66723: LD_INT 23
66725: PUSH
66726: LD_INT 24
66728: PUSH
66729: LD_INT 25
66731: PUSH
66732: LD_INT 26
66734: PUSH
66735: LD_INT 28
66737: PUSH
66738: LD_INT 30
66740: PUSH
66741: LD_INT 31
66743: PUSH
66744: LD_INT 32
66746: PUSH
66747: LD_INT 34
66749: PUSH
66750: LD_INT 36
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: LIST
66757: LIST
66758: LIST
66759: LIST
66760: LIST
66761: LIST
66762: LIST
66763: LIST
66764: LIST
66765: LIST
66766: LIST
66767: LIST
66768: LIST
66769: LIST
66770: LIST
66771: LIST
66772: LIST
66773: LIST
66774: LIST
66775: LIST
66776: LIST
66777: LIST
66778: LIST
66779: LIST
66780: LIST
66781: LIST
66782: LIST
66783: LIST
66784: LIST
66785: PUSH
66786: LD_INT 101
66788: PUSH
66789: LD_INT 102
66791: PUSH
66792: LD_INT 103
66794: PUSH
66795: LD_INT 104
66797: PUSH
66798: LD_INT 105
66800: PUSH
66801: LD_INT 106
66803: PUSH
66804: LD_INT 107
66806: PUSH
66807: LD_INT 108
66809: PUSH
66810: LD_INT 109
66812: PUSH
66813: LD_INT 110
66815: PUSH
66816: LD_INT 111
66818: PUSH
66819: LD_INT 112
66821: PUSH
66822: LD_INT 114
66824: PUSH
66825: LD_INT 116
66827: PUSH
66828: LD_INT 117
66830: PUSH
66831: LD_INT 118
66833: PUSH
66834: EMPTY
66835: LIST
66836: LIST
66837: LIST
66838: LIST
66839: LIST
66840: LIST
66841: LIST
66842: LIST
66843: LIST
66844: LIST
66845: LIST
66846: LIST
66847: LIST
66848: LIST
66849: LIST
66850: LIST
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: ST_TO_ADDR
66856: GO 68539
66858: LD_INT 12
66860: DOUBLE
66861: EQUAL
66862: IFTRUE 66866
66864: GO 67086
66866: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
66867: LD_ADDR_VAR 0 2
66871: PUSH
66872: LD_INT 1
66874: PUSH
66875: LD_INT 2
66877: PUSH
66878: LD_INT 3
66880: PUSH
66881: LD_INT 4
66883: PUSH
66884: LD_INT 5
66886: PUSH
66887: LD_INT 6
66889: PUSH
66890: LD_INT 7
66892: PUSH
66893: LD_INT 8
66895: PUSH
66896: LD_INT 9
66898: PUSH
66899: LD_INT 10
66901: PUSH
66902: LD_INT 11
66904: PUSH
66905: LD_INT 12
66907: PUSH
66908: LD_INT 13
66910: PUSH
66911: LD_INT 14
66913: PUSH
66914: LD_INT 15
66916: PUSH
66917: LD_INT 16
66919: PUSH
66920: LD_INT 17
66922: PUSH
66923: LD_INT 18
66925: PUSH
66926: LD_INT 19
66928: PUSH
66929: LD_INT 20
66931: PUSH
66932: LD_INT 21
66934: PUSH
66935: LD_INT 22
66937: PUSH
66938: LD_INT 23
66940: PUSH
66941: LD_INT 24
66943: PUSH
66944: LD_INT 25
66946: PUSH
66947: LD_INT 26
66949: PUSH
66950: LD_INT 27
66952: PUSH
66953: LD_INT 28
66955: PUSH
66956: LD_INT 30
66958: PUSH
66959: LD_INT 31
66961: PUSH
66962: LD_INT 32
66964: PUSH
66965: LD_INT 33
66967: PUSH
66968: LD_INT 34
66970: PUSH
66971: LD_INT 36
66973: PUSH
66974: EMPTY
66975: LIST
66976: LIST
66977: LIST
66978: LIST
66979: LIST
66980: LIST
66981: LIST
66982: LIST
66983: LIST
66984: LIST
66985: LIST
66986: LIST
66987: LIST
66988: LIST
66989: LIST
66990: LIST
66991: LIST
66992: LIST
66993: LIST
66994: LIST
66995: LIST
66996: LIST
66997: LIST
66998: LIST
66999: LIST
67000: LIST
67001: LIST
67002: LIST
67003: LIST
67004: LIST
67005: LIST
67006: LIST
67007: LIST
67008: LIST
67009: PUSH
67010: LD_INT 101
67012: PUSH
67013: LD_INT 102
67015: PUSH
67016: LD_INT 103
67018: PUSH
67019: LD_INT 104
67021: PUSH
67022: LD_INT 105
67024: PUSH
67025: LD_INT 106
67027: PUSH
67028: LD_INT 107
67030: PUSH
67031: LD_INT 108
67033: PUSH
67034: LD_INT 109
67036: PUSH
67037: LD_INT 110
67039: PUSH
67040: LD_INT 111
67042: PUSH
67043: LD_INT 112
67045: PUSH
67046: LD_INT 113
67048: PUSH
67049: LD_INT 114
67051: PUSH
67052: LD_INT 116
67054: PUSH
67055: LD_INT 117
67057: PUSH
67058: LD_INT 118
67060: PUSH
67061: EMPTY
67062: LIST
67063: LIST
67064: LIST
67065: LIST
67066: LIST
67067: LIST
67068: LIST
67069: LIST
67070: LIST
67071: LIST
67072: LIST
67073: LIST
67074: LIST
67075: LIST
67076: LIST
67077: LIST
67078: LIST
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: ST_TO_ADDR
67084: GO 68539
67086: LD_INT 13
67088: DOUBLE
67089: EQUAL
67090: IFTRUE 67094
67092: GO 67302
67094: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
67095: LD_ADDR_VAR 0 2
67099: PUSH
67100: LD_INT 1
67102: PUSH
67103: LD_INT 2
67105: PUSH
67106: LD_INT 3
67108: PUSH
67109: LD_INT 4
67111: PUSH
67112: LD_INT 5
67114: PUSH
67115: LD_INT 8
67117: PUSH
67118: LD_INT 9
67120: PUSH
67121: LD_INT 10
67123: PUSH
67124: LD_INT 11
67126: PUSH
67127: LD_INT 12
67129: PUSH
67130: LD_INT 14
67132: PUSH
67133: LD_INT 15
67135: PUSH
67136: LD_INT 16
67138: PUSH
67139: LD_INT 17
67141: PUSH
67142: LD_INT 18
67144: PUSH
67145: LD_INT 19
67147: PUSH
67148: LD_INT 20
67150: PUSH
67151: LD_INT 21
67153: PUSH
67154: LD_INT 22
67156: PUSH
67157: LD_INT 23
67159: PUSH
67160: LD_INT 24
67162: PUSH
67163: LD_INT 25
67165: PUSH
67166: LD_INT 26
67168: PUSH
67169: LD_INT 27
67171: PUSH
67172: LD_INT 28
67174: PUSH
67175: LD_INT 30
67177: PUSH
67178: LD_INT 31
67180: PUSH
67181: LD_INT 32
67183: PUSH
67184: LD_INT 33
67186: PUSH
67187: LD_INT 34
67189: PUSH
67190: LD_INT 36
67192: PUSH
67193: EMPTY
67194: LIST
67195: LIST
67196: LIST
67197: LIST
67198: LIST
67199: LIST
67200: LIST
67201: LIST
67202: LIST
67203: LIST
67204: LIST
67205: LIST
67206: LIST
67207: LIST
67208: LIST
67209: LIST
67210: LIST
67211: LIST
67212: LIST
67213: LIST
67214: LIST
67215: LIST
67216: LIST
67217: LIST
67218: LIST
67219: LIST
67220: LIST
67221: LIST
67222: LIST
67223: LIST
67224: LIST
67225: PUSH
67226: LD_INT 101
67228: PUSH
67229: LD_INT 102
67231: PUSH
67232: LD_INT 103
67234: PUSH
67235: LD_INT 104
67237: PUSH
67238: LD_INT 105
67240: PUSH
67241: LD_INT 106
67243: PUSH
67244: LD_INT 107
67246: PUSH
67247: LD_INT 108
67249: PUSH
67250: LD_INT 109
67252: PUSH
67253: LD_INT 110
67255: PUSH
67256: LD_INT 111
67258: PUSH
67259: LD_INT 112
67261: PUSH
67262: LD_INT 113
67264: PUSH
67265: LD_INT 114
67267: PUSH
67268: LD_INT 116
67270: PUSH
67271: LD_INT 117
67273: PUSH
67274: LD_INT 118
67276: PUSH
67277: EMPTY
67278: LIST
67279: LIST
67280: LIST
67281: LIST
67282: LIST
67283: LIST
67284: LIST
67285: LIST
67286: LIST
67287: LIST
67288: LIST
67289: LIST
67290: LIST
67291: LIST
67292: LIST
67293: LIST
67294: LIST
67295: PUSH
67296: EMPTY
67297: LIST
67298: LIST
67299: ST_TO_ADDR
67300: GO 68539
67302: LD_INT 14
67304: DOUBLE
67305: EQUAL
67306: IFTRUE 67310
67308: GO 67534
67310: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
67311: LD_ADDR_VAR 0 2
67315: PUSH
67316: LD_INT 1
67318: PUSH
67319: LD_INT 2
67321: PUSH
67322: LD_INT 3
67324: PUSH
67325: LD_INT 4
67327: PUSH
67328: LD_INT 5
67330: PUSH
67331: LD_INT 6
67333: PUSH
67334: LD_INT 7
67336: PUSH
67337: LD_INT 8
67339: PUSH
67340: LD_INT 9
67342: PUSH
67343: LD_INT 10
67345: PUSH
67346: LD_INT 11
67348: PUSH
67349: LD_INT 12
67351: PUSH
67352: LD_INT 13
67354: PUSH
67355: LD_INT 14
67357: PUSH
67358: LD_INT 15
67360: PUSH
67361: LD_INT 16
67363: PUSH
67364: LD_INT 17
67366: PUSH
67367: LD_INT 18
67369: PUSH
67370: LD_INT 19
67372: PUSH
67373: LD_INT 20
67375: PUSH
67376: LD_INT 21
67378: PUSH
67379: LD_INT 22
67381: PUSH
67382: LD_INT 23
67384: PUSH
67385: LD_INT 24
67387: PUSH
67388: LD_INT 25
67390: PUSH
67391: LD_INT 26
67393: PUSH
67394: LD_INT 27
67396: PUSH
67397: LD_INT 28
67399: PUSH
67400: LD_INT 29
67402: PUSH
67403: LD_INT 30
67405: PUSH
67406: LD_INT 31
67408: PUSH
67409: LD_INT 32
67411: PUSH
67412: LD_INT 33
67414: PUSH
67415: LD_INT 34
67417: PUSH
67418: LD_INT 36
67420: PUSH
67421: EMPTY
67422: LIST
67423: LIST
67424: LIST
67425: LIST
67426: LIST
67427: LIST
67428: LIST
67429: LIST
67430: LIST
67431: LIST
67432: LIST
67433: LIST
67434: LIST
67435: LIST
67436: LIST
67437: LIST
67438: LIST
67439: LIST
67440: LIST
67441: LIST
67442: LIST
67443: LIST
67444: LIST
67445: LIST
67446: LIST
67447: LIST
67448: LIST
67449: LIST
67450: LIST
67451: LIST
67452: LIST
67453: LIST
67454: LIST
67455: LIST
67456: LIST
67457: PUSH
67458: LD_INT 101
67460: PUSH
67461: LD_INT 102
67463: PUSH
67464: LD_INT 103
67466: PUSH
67467: LD_INT 104
67469: PUSH
67470: LD_INT 105
67472: PUSH
67473: LD_INT 106
67475: PUSH
67476: LD_INT 107
67478: PUSH
67479: LD_INT 108
67481: PUSH
67482: LD_INT 109
67484: PUSH
67485: LD_INT 110
67487: PUSH
67488: LD_INT 111
67490: PUSH
67491: LD_INT 112
67493: PUSH
67494: LD_INT 113
67496: PUSH
67497: LD_INT 114
67499: PUSH
67500: LD_INT 116
67502: PUSH
67503: LD_INT 117
67505: PUSH
67506: LD_INT 118
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: LIST
67513: LIST
67514: LIST
67515: LIST
67516: LIST
67517: LIST
67518: LIST
67519: LIST
67520: LIST
67521: LIST
67522: LIST
67523: LIST
67524: LIST
67525: LIST
67526: LIST
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: ST_TO_ADDR
67532: GO 68539
67534: LD_INT 15
67536: DOUBLE
67537: EQUAL
67538: IFTRUE 67542
67540: GO 67766
67542: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
67543: LD_ADDR_VAR 0 2
67547: PUSH
67548: LD_INT 1
67550: PUSH
67551: LD_INT 2
67553: PUSH
67554: LD_INT 3
67556: PUSH
67557: LD_INT 4
67559: PUSH
67560: LD_INT 5
67562: PUSH
67563: LD_INT 6
67565: PUSH
67566: LD_INT 7
67568: PUSH
67569: LD_INT 8
67571: PUSH
67572: LD_INT 9
67574: PUSH
67575: LD_INT 10
67577: PUSH
67578: LD_INT 11
67580: PUSH
67581: LD_INT 12
67583: PUSH
67584: LD_INT 13
67586: PUSH
67587: LD_INT 14
67589: PUSH
67590: LD_INT 15
67592: PUSH
67593: LD_INT 16
67595: PUSH
67596: LD_INT 17
67598: PUSH
67599: LD_INT 18
67601: PUSH
67602: LD_INT 19
67604: PUSH
67605: LD_INT 20
67607: PUSH
67608: LD_INT 21
67610: PUSH
67611: LD_INT 22
67613: PUSH
67614: LD_INT 23
67616: PUSH
67617: LD_INT 24
67619: PUSH
67620: LD_INT 25
67622: PUSH
67623: LD_INT 26
67625: PUSH
67626: LD_INT 27
67628: PUSH
67629: LD_INT 28
67631: PUSH
67632: LD_INT 29
67634: PUSH
67635: LD_INT 30
67637: PUSH
67638: LD_INT 31
67640: PUSH
67641: LD_INT 32
67643: PUSH
67644: LD_INT 33
67646: PUSH
67647: LD_INT 34
67649: PUSH
67650: LD_INT 36
67652: PUSH
67653: EMPTY
67654: LIST
67655: LIST
67656: LIST
67657: LIST
67658: LIST
67659: LIST
67660: LIST
67661: LIST
67662: LIST
67663: LIST
67664: LIST
67665: LIST
67666: LIST
67667: LIST
67668: LIST
67669: LIST
67670: LIST
67671: LIST
67672: LIST
67673: LIST
67674: LIST
67675: LIST
67676: LIST
67677: LIST
67678: LIST
67679: LIST
67680: LIST
67681: LIST
67682: LIST
67683: LIST
67684: LIST
67685: LIST
67686: LIST
67687: LIST
67688: LIST
67689: PUSH
67690: LD_INT 101
67692: PUSH
67693: LD_INT 102
67695: PUSH
67696: LD_INT 103
67698: PUSH
67699: LD_INT 104
67701: PUSH
67702: LD_INT 105
67704: PUSH
67705: LD_INT 106
67707: PUSH
67708: LD_INT 107
67710: PUSH
67711: LD_INT 108
67713: PUSH
67714: LD_INT 109
67716: PUSH
67717: LD_INT 110
67719: PUSH
67720: LD_INT 111
67722: PUSH
67723: LD_INT 112
67725: PUSH
67726: LD_INT 113
67728: PUSH
67729: LD_INT 114
67731: PUSH
67732: LD_INT 116
67734: PUSH
67735: LD_INT 117
67737: PUSH
67738: LD_INT 118
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: LIST
67745: LIST
67746: LIST
67747: LIST
67748: LIST
67749: LIST
67750: LIST
67751: LIST
67752: LIST
67753: LIST
67754: LIST
67755: LIST
67756: LIST
67757: LIST
67758: LIST
67759: PUSH
67760: EMPTY
67761: LIST
67762: LIST
67763: ST_TO_ADDR
67764: GO 68539
67766: LD_INT 16
67768: DOUBLE
67769: EQUAL
67770: IFTRUE 67774
67772: GO 67910
67774: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
67775: LD_ADDR_VAR 0 2
67779: PUSH
67780: LD_INT 2
67782: PUSH
67783: LD_INT 4
67785: PUSH
67786: LD_INT 5
67788: PUSH
67789: LD_INT 7
67791: PUSH
67792: LD_INT 11
67794: PUSH
67795: LD_INT 12
67797: PUSH
67798: LD_INT 15
67800: PUSH
67801: LD_INT 16
67803: PUSH
67804: LD_INT 20
67806: PUSH
67807: LD_INT 21
67809: PUSH
67810: LD_INT 22
67812: PUSH
67813: LD_INT 23
67815: PUSH
67816: LD_INT 25
67818: PUSH
67819: LD_INT 26
67821: PUSH
67822: LD_INT 30
67824: PUSH
67825: LD_INT 31
67827: PUSH
67828: LD_INT 32
67830: PUSH
67831: LD_INT 33
67833: PUSH
67834: LD_INT 34
67836: PUSH
67837: EMPTY
67838: LIST
67839: LIST
67840: LIST
67841: LIST
67842: LIST
67843: LIST
67844: LIST
67845: LIST
67846: LIST
67847: LIST
67848: LIST
67849: LIST
67850: LIST
67851: LIST
67852: LIST
67853: LIST
67854: LIST
67855: LIST
67856: LIST
67857: PUSH
67858: LD_INT 101
67860: PUSH
67861: LD_INT 102
67863: PUSH
67864: LD_INT 103
67866: PUSH
67867: LD_INT 106
67869: PUSH
67870: LD_INT 108
67872: PUSH
67873: LD_INT 112
67875: PUSH
67876: LD_INT 113
67878: PUSH
67879: LD_INT 114
67881: PUSH
67882: LD_INT 116
67884: PUSH
67885: LD_INT 117
67887: PUSH
67888: LD_INT 118
67890: PUSH
67891: EMPTY
67892: LIST
67893: LIST
67894: LIST
67895: LIST
67896: LIST
67897: LIST
67898: LIST
67899: LIST
67900: LIST
67901: LIST
67902: LIST
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: ST_TO_ADDR
67908: GO 68539
67910: LD_INT 17
67912: DOUBLE
67913: EQUAL
67914: IFTRUE 67918
67916: GO 68142
67918: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
67919: LD_ADDR_VAR 0 2
67923: PUSH
67924: LD_INT 1
67926: PUSH
67927: LD_INT 2
67929: PUSH
67930: LD_INT 3
67932: PUSH
67933: LD_INT 4
67935: PUSH
67936: LD_INT 5
67938: PUSH
67939: LD_INT 6
67941: PUSH
67942: LD_INT 7
67944: PUSH
67945: LD_INT 8
67947: PUSH
67948: LD_INT 9
67950: PUSH
67951: LD_INT 10
67953: PUSH
67954: LD_INT 11
67956: PUSH
67957: LD_INT 12
67959: PUSH
67960: LD_INT 13
67962: PUSH
67963: LD_INT 14
67965: PUSH
67966: LD_INT 15
67968: PUSH
67969: LD_INT 16
67971: PUSH
67972: LD_INT 17
67974: PUSH
67975: LD_INT 18
67977: PUSH
67978: LD_INT 19
67980: PUSH
67981: LD_INT 20
67983: PUSH
67984: LD_INT 21
67986: PUSH
67987: LD_INT 22
67989: PUSH
67990: LD_INT 23
67992: PUSH
67993: LD_INT 24
67995: PUSH
67996: LD_INT 25
67998: PUSH
67999: LD_INT 26
68001: PUSH
68002: LD_INT 27
68004: PUSH
68005: LD_INT 28
68007: PUSH
68008: LD_INT 29
68010: PUSH
68011: LD_INT 30
68013: PUSH
68014: LD_INT 31
68016: PUSH
68017: LD_INT 32
68019: PUSH
68020: LD_INT 33
68022: PUSH
68023: LD_INT 34
68025: PUSH
68026: LD_INT 36
68028: PUSH
68029: EMPTY
68030: LIST
68031: LIST
68032: LIST
68033: LIST
68034: LIST
68035: LIST
68036: LIST
68037: LIST
68038: LIST
68039: LIST
68040: LIST
68041: LIST
68042: LIST
68043: LIST
68044: LIST
68045: LIST
68046: LIST
68047: LIST
68048: LIST
68049: LIST
68050: LIST
68051: LIST
68052: LIST
68053: LIST
68054: LIST
68055: LIST
68056: LIST
68057: LIST
68058: LIST
68059: LIST
68060: LIST
68061: LIST
68062: LIST
68063: LIST
68064: LIST
68065: PUSH
68066: LD_INT 101
68068: PUSH
68069: LD_INT 102
68071: PUSH
68072: LD_INT 103
68074: PUSH
68075: LD_INT 104
68077: PUSH
68078: LD_INT 105
68080: PUSH
68081: LD_INT 106
68083: PUSH
68084: LD_INT 107
68086: PUSH
68087: LD_INT 108
68089: PUSH
68090: LD_INT 109
68092: PUSH
68093: LD_INT 110
68095: PUSH
68096: LD_INT 111
68098: PUSH
68099: LD_INT 112
68101: PUSH
68102: LD_INT 113
68104: PUSH
68105: LD_INT 114
68107: PUSH
68108: LD_INT 116
68110: PUSH
68111: LD_INT 117
68113: PUSH
68114: LD_INT 118
68116: PUSH
68117: EMPTY
68118: LIST
68119: LIST
68120: LIST
68121: LIST
68122: LIST
68123: LIST
68124: LIST
68125: LIST
68126: LIST
68127: LIST
68128: LIST
68129: LIST
68130: LIST
68131: LIST
68132: LIST
68133: LIST
68134: LIST
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: ST_TO_ADDR
68140: GO 68539
68142: LD_INT 18
68144: DOUBLE
68145: EQUAL
68146: IFTRUE 68150
68148: GO 68298
68150: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
68151: LD_ADDR_VAR 0 2
68155: PUSH
68156: LD_INT 2
68158: PUSH
68159: LD_INT 4
68161: PUSH
68162: LD_INT 5
68164: PUSH
68165: LD_INT 7
68167: PUSH
68168: LD_INT 11
68170: PUSH
68171: LD_INT 12
68173: PUSH
68174: LD_INT 15
68176: PUSH
68177: LD_INT 16
68179: PUSH
68180: LD_INT 20
68182: PUSH
68183: LD_INT 21
68185: PUSH
68186: LD_INT 22
68188: PUSH
68189: LD_INT 23
68191: PUSH
68192: LD_INT 25
68194: PUSH
68195: LD_INT 26
68197: PUSH
68198: LD_INT 30
68200: PUSH
68201: LD_INT 31
68203: PUSH
68204: LD_INT 32
68206: PUSH
68207: LD_INT 33
68209: PUSH
68210: LD_INT 34
68212: PUSH
68213: LD_INT 35
68215: PUSH
68216: LD_INT 36
68218: PUSH
68219: EMPTY
68220: LIST
68221: LIST
68222: LIST
68223: LIST
68224: LIST
68225: LIST
68226: LIST
68227: LIST
68228: LIST
68229: LIST
68230: LIST
68231: LIST
68232: LIST
68233: LIST
68234: LIST
68235: LIST
68236: LIST
68237: LIST
68238: LIST
68239: LIST
68240: LIST
68241: PUSH
68242: LD_INT 101
68244: PUSH
68245: LD_INT 102
68247: PUSH
68248: LD_INT 103
68250: PUSH
68251: LD_INT 106
68253: PUSH
68254: LD_INT 108
68256: PUSH
68257: LD_INT 112
68259: PUSH
68260: LD_INT 113
68262: PUSH
68263: LD_INT 114
68265: PUSH
68266: LD_INT 115
68268: PUSH
68269: LD_INT 116
68271: PUSH
68272: LD_INT 117
68274: PUSH
68275: LD_INT 118
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: LIST
68282: LIST
68283: LIST
68284: LIST
68285: LIST
68286: LIST
68287: LIST
68288: LIST
68289: LIST
68290: LIST
68291: PUSH
68292: EMPTY
68293: LIST
68294: LIST
68295: ST_TO_ADDR
68296: GO 68539
68298: LD_INT 19
68300: DOUBLE
68301: EQUAL
68302: IFTRUE 68306
68304: GO 68538
68306: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
68307: LD_ADDR_VAR 0 2
68311: PUSH
68312: LD_INT 1
68314: PUSH
68315: LD_INT 2
68317: PUSH
68318: LD_INT 3
68320: PUSH
68321: LD_INT 4
68323: PUSH
68324: LD_INT 5
68326: PUSH
68327: LD_INT 6
68329: PUSH
68330: LD_INT 7
68332: PUSH
68333: LD_INT 8
68335: PUSH
68336: LD_INT 9
68338: PUSH
68339: LD_INT 10
68341: PUSH
68342: LD_INT 11
68344: PUSH
68345: LD_INT 12
68347: PUSH
68348: LD_INT 13
68350: PUSH
68351: LD_INT 14
68353: PUSH
68354: LD_INT 15
68356: PUSH
68357: LD_INT 16
68359: PUSH
68360: LD_INT 17
68362: PUSH
68363: LD_INT 18
68365: PUSH
68366: LD_INT 19
68368: PUSH
68369: LD_INT 20
68371: PUSH
68372: LD_INT 21
68374: PUSH
68375: LD_INT 22
68377: PUSH
68378: LD_INT 23
68380: PUSH
68381: LD_INT 24
68383: PUSH
68384: LD_INT 25
68386: PUSH
68387: LD_INT 26
68389: PUSH
68390: LD_INT 27
68392: PUSH
68393: LD_INT 28
68395: PUSH
68396: LD_INT 29
68398: PUSH
68399: LD_INT 30
68401: PUSH
68402: LD_INT 31
68404: PUSH
68405: LD_INT 32
68407: PUSH
68408: LD_INT 33
68410: PUSH
68411: LD_INT 34
68413: PUSH
68414: LD_INT 35
68416: PUSH
68417: LD_INT 36
68419: PUSH
68420: EMPTY
68421: LIST
68422: LIST
68423: LIST
68424: LIST
68425: LIST
68426: LIST
68427: LIST
68428: LIST
68429: LIST
68430: LIST
68431: LIST
68432: LIST
68433: LIST
68434: LIST
68435: LIST
68436: LIST
68437: LIST
68438: LIST
68439: LIST
68440: LIST
68441: LIST
68442: LIST
68443: LIST
68444: LIST
68445: LIST
68446: LIST
68447: LIST
68448: LIST
68449: LIST
68450: LIST
68451: LIST
68452: LIST
68453: LIST
68454: LIST
68455: LIST
68456: LIST
68457: PUSH
68458: LD_INT 101
68460: PUSH
68461: LD_INT 102
68463: PUSH
68464: LD_INT 103
68466: PUSH
68467: LD_INT 104
68469: PUSH
68470: LD_INT 105
68472: PUSH
68473: LD_INT 106
68475: PUSH
68476: LD_INT 107
68478: PUSH
68479: LD_INT 108
68481: PUSH
68482: LD_INT 109
68484: PUSH
68485: LD_INT 110
68487: PUSH
68488: LD_INT 111
68490: PUSH
68491: LD_INT 112
68493: PUSH
68494: LD_INT 113
68496: PUSH
68497: LD_INT 114
68499: PUSH
68500: LD_INT 115
68502: PUSH
68503: LD_INT 116
68505: PUSH
68506: LD_INT 117
68508: PUSH
68509: LD_INT 118
68511: PUSH
68512: EMPTY
68513: LIST
68514: LIST
68515: LIST
68516: LIST
68517: LIST
68518: LIST
68519: LIST
68520: LIST
68521: LIST
68522: LIST
68523: LIST
68524: LIST
68525: LIST
68526: LIST
68527: LIST
68528: LIST
68529: LIST
68530: LIST
68531: PUSH
68532: EMPTY
68533: LIST
68534: LIST
68535: ST_TO_ADDR
68536: GO 68539
68538: POP
// end else
68539: GO 68770
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
68541: LD_ADDR_VAR 0 2
68545: PUSH
68546: LD_INT 1
68548: PUSH
68549: LD_INT 2
68551: PUSH
68552: LD_INT 3
68554: PUSH
68555: LD_INT 4
68557: PUSH
68558: LD_INT 5
68560: PUSH
68561: LD_INT 6
68563: PUSH
68564: LD_INT 7
68566: PUSH
68567: LD_INT 8
68569: PUSH
68570: LD_INT 9
68572: PUSH
68573: LD_INT 10
68575: PUSH
68576: LD_INT 11
68578: PUSH
68579: LD_INT 12
68581: PUSH
68582: LD_INT 13
68584: PUSH
68585: LD_INT 14
68587: PUSH
68588: LD_INT 15
68590: PUSH
68591: LD_INT 16
68593: PUSH
68594: LD_INT 17
68596: PUSH
68597: LD_INT 18
68599: PUSH
68600: LD_INT 19
68602: PUSH
68603: LD_INT 20
68605: PUSH
68606: LD_INT 21
68608: PUSH
68609: LD_INT 22
68611: PUSH
68612: LD_INT 23
68614: PUSH
68615: LD_INT 24
68617: PUSH
68618: LD_INT 25
68620: PUSH
68621: LD_INT 26
68623: PUSH
68624: LD_INT 27
68626: PUSH
68627: LD_INT 28
68629: PUSH
68630: LD_INT 29
68632: PUSH
68633: LD_INT 30
68635: PUSH
68636: LD_INT 31
68638: PUSH
68639: LD_INT 32
68641: PUSH
68642: LD_INT 33
68644: PUSH
68645: LD_INT 34
68647: PUSH
68648: LD_INT 35
68650: PUSH
68651: LD_INT 36
68653: PUSH
68654: EMPTY
68655: LIST
68656: LIST
68657: LIST
68658: LIST
68659: LIST
68660: LIST
68661: LIST
68662: LIST
68663: LIST
68664: LIST
68665: LIST
68666: LIST
68667: LIST
68668: LIST
68669: LIST
68670: LIST
68671: LIST
68672: LIST
68673: LIST
68674: LIST
68675: LIST
68676: LIST
68677: LIST
68678: LIST
68679: LIST
68680: LIST
68681: LIST
68682: LIST
68683: LIST
68684: LIST
68685: LIST
68686: LIST
68687: LIST
68688: LIST
68689: LIST
68690: LIST
68691: PUSH
68692: LD_INT 101
68694: PUSH
68695: LD_INT 102
68697: PUSH
68698: LD_INT 103
68700: PUSH
68701: LD_INT 104
68703: PUSH
68704: LD_INT 105
68706: PUSH
68707: LD_INT 106
68709: PUSH
68710: LD_INT 107
68712: PUSH
68713: LD_INT 108
68715: PUSH
68716: LD_INT 109
68718: PUSH
68719: LD_INT 110
68721: PUSH
68722: LD_INT 111
68724: PUSH
68725: LD_INT 112
68727: PUSH
68728: LD_INT 113
68730: PUSH
68731: LD_INT 114
68733: PUSH
68734: LD_INT 115
68736: PUSH
68737: LD_INT 116
68739: PUSH
68740: LD_INT 117
68742: PUSH
68743: LD_INT 118
68745: PUSH
68746: EMPTY
68747: LIST
68748: LIST
68749: LIST
68750: LIST
68751: LIST
68752: LIST
68753: LIST
68754: LIST
68755: LIST
68756: LIST
68757: LIST
68758: LIST
68759: LIST
68760: LIST
68761: LIST
68762: LIST
68763: LIST
68764: LIST
68765: PUSH
68766: EMPTY
68767: LIST
68768: LIST
68769: ST_TO_ADDR
// if result then
68770: LD_VAR 0 2
68774: IFFALSE 69560
// begin normal :=  ;
68776: LD_ADDR_VAR 0 5
68780: PUSH
68781: LD_STRING 
68783: ST_TO_ADDR
// hardcore :=  ;
68784: LD_ADDR_VAR 0 6
68788: PUSH
68789: LD_STRING 
68791: ST_TO_ADDR
// active :=  ;
68792: LD_ADDR_VAR 0 7
68796: PUSH
68797: LD_STRING 
68799: ST_TO_ADDR
// for i = 1 to normalCounter do
68800: LD_ADDR_VAR 0 8
68804: PUSH
68805: DOUBLE
68806: LD_INT 1
68808: DEC
68809: ST_TO_ADDR
68810: LD_EXP 48
68814: PUSH
68815: FOR_TO
68816: IFFALSE 68917
// begin tmp := 0 ;
68818: LD_ADDR_VAR 0 3
68822: PUSH
68823: LD_STRING 0
68825: ST_TO_ADDR
// if result [ 1 ] then
68826: LD_VAR 0 2
68830: PUSH
68831: LD_INT 1
68833: ARRAY
68834: IFFALSE 68899
// if result [ 1 ] [ 1 ] = i then
68836: LD_VAR 0 2
68840: PUSH
68841: LD_INT 1
68843: ARRAY
68844: PUSH
68845: LD_INT 1
68847: ARRAY
68848: PUSH
68849: LD_VAR 0 8
68853: EQUAL
68854: IFFALSE 68899
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
68856: LD_ADDR_VAR 0 2
68860: PUSH
68861: LD_VAR 0 2
68865: PPUSH
68866: LD_INT 1
68868: PPUSH
68869: LD_VAR 0 2
68873: PUSH
68874: LD_INT 1
68876: ARRAY
68877: PPUSH
68878: LD_INT 1
68880: PPUSH
68881: CALL_OW 3
68885: PPUSH
68886: CALL_OW 1
68890: ST_TO_ADDR
// tmp := 1 ;
68891: LD_ADDR_VAR 0 3
68895: PUSH
68896: LD_STRING 1
68898: ST_TO_ADDR
// end ; normal := normal & tmp ;
68899: LD_ADDR_VAR 0 5
68903: PUSH
68904: LD_VAR 0 5
68908: PUSH
68909: LD_VAR 0 3
68913: STR
68914: ST_TO_ADDR
// end ;
68915: GO 68815
68917: POP
68918: POP
// for i = 1 to hardcoreCounter do
68919: LD_ADDR_VAR 0 8
68923: PUSH
68924: DOUBLE
68925: LD_INT 1
68927: DEC
68928: ST_TO_ADDR
68929: LD_EXP 49
68933: PUSH
68934: FOR_TO
68935: IFFALSE 69040
// begin tmp := 0 ;
68937: LD_ADDR_VAR 0 3
68941: PUSH
68942: LD_STRING 0
68944: ST_TO_ADDR
// if result [ 2 ] then
68945: LD_VAR 0 2
68949: PUSH
68950: LD_INT 2
68952: ARRAY
68953: IFFALSE 69022
// if result [ 2 ] [ 1 ] = 100 + i then
68955: LD_VAR 0 2
68959: PUSH
68960: LD_INT 2
68962: ARRAY
68963: PUSH
68964: LD_INT 1
68966: ARRAY
68967: PUSH
68968: LD_INT 100
68970: PUSH
68971: LD_VAR 0 8
68975: PLUS
68976: EQUAL
68977: IFFALSE 69022
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
68979: LD_ADDR_VAR 0 2
68983: PUSH
68984: LD_VAR 0 2
68988: PPUSH
68989: LD_INT 2
68991: PPUSH
68992: LD_VAR 0 2
68996: PUSH
68997: LD_INT 2
68999: ARRAY
69000: PPUSH
69001: LD_INT 1
69003: PPUSH
69004: CALL_OW 3
69008: PPUSH
69009: CALL_OW 1
69013: ST_TO_ADDR
// tmp := 1 ;
69014: LD_ADDR_VAR 0 3
69018: PUSH
69019: LD_STRING 1
69021: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
69022: LD_ADDR_VAR 0 6
69026: PUSH
69027: LD_VAR 0 6
69031: PUSH
69032: LD_VAR 0 3
69036: STR
69037: ST_TO_ADDR
// end ;
69038: GO 68934
69040: POP
69041: POP
// if isGameLoad then
69042: LD_VAR 0 1
69046: IFFALSE 69521
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
69048: LD_ADDR_VAR 0 4
69052: PUSH
69053: LD_EXP 52
69057: PUSH
69058: LD_EXP 51
69062: PUSH
69063: LD_EXP 53
69067: PUSH
69068: LD_EXP 50
69072: PUSH
69073: LD_EXP 54
69077: PUSH
69078: LD_EXP 55
69082: PUSH
69083: LD_EXP 56
69087: PUSH
69088: LD_EXP 57
69092: PUSH
69093: LD_EXP 58
69097: PUSH
69098: LD_EXP 59
69102: PUSH
69103: LD_EXP 60
69107: PUSH
69108: LD_EXP 61
69112: PUSH
69113: LD_EXP 62
69117: PUSH
69118: LD_EXP 63
69122: PUSH
69123: LD_EXP 71
69127: PUSH
69128: LD_EXP 72
69132: PUSH
69133: LD_EXP 73
69137: PUSH
69138: LD_EXP 74
69142: PUSH
69143: LD_EXP 76
69147: PUSH
69148: LD_EXP 77
69152: PUSH
69153: LD_EXP 78
69157: PUSH
69158: LD_EXP 81
69162: PUSH
69163: LD_EXP 83
69167: PUSH
69168: LD_EXP 84
69172: PUSH
69173: LD_EXP 85
69177: PUSH
69178: LD_EXP 87
69182: PUSH
69183: LD_EXP 88
69187: PUSH
69188: LD_EXP 91
69192: PUSH
69193: LD_EXP 92
69197: PUSH
69198: LD_EXP 93
69202: PUSH
69203: LD_EXP 94
69207: PUSH
69208: LD_EXP 95
69212: PUSH
69213: LD_EXP 96
69217: PUSH
69218: LD_EXP 97
69222: PUSH
69223: LD_EXP 98
69227: PUSH
69228: LD_EXP 99
69232: PUSH
69233: LD_EXP 64
69237: PUSH
69238: LD_EXP 65
69242: PUSH
69243: LD_EXP 68
69247: PUSH
69248: LD_EXP 69
69252: PUSH
69253: LD_EXP 70
69257: PUSH
69258: LD_EXP 66
69262: PUSH
69263: LD_EXP 67
69267: PUSH
69268: LD_EXP 75
69272: PUSH
69273: LD_EXP 79
69277: PUSH
69278: LD_EXP 80
69282: PUSH
69283: LD_EXP 82
69287: PUSH
69288: LD_EXP 86
69292: PUSH
69293: LD_EXP 89
69297: PUSH
69298: LD_EXP 90
69302: PUSH
69303: LD_EXP 100
69307: PUSH
69308: LD_EXP 101
69312: PUSH
69313: LD_EXP 102
69317: PUSH
69318: LD_EXP 103
69322: PUSH
69323: EMPTY
69324: LIST
69325: LIST
69326: LIST
69327: LIST
69328: LIST
69329: LIST
69330: LIST
69331: LIST
69332: LIST
69333: LIST
69334: LIST
69335: LIST
69336: LIST
69337: LIST
69338: LIST
69339: LIST
69340: LIST
69341: LIST
69342: LIST
69343: LIST
69344: LIST
69345: LIST
69346: LIST
69347: LIST
69348: LIST
69349: LIST
69350: LIST
69351: LIST
69352: LIST
69353: LIST
69354: LIST
69355: LIST
69356: LIST
69357: LIST
69358: LIST
69359: LIST
69360: LIST
69361: LIST
69362: LIST
69363: LIST
69364: LIST
69365: LIST
69366: LIST
69367: LIST
69368: LIST
69369: LIST
69370: LIST
69371: LIST
69372: LIST
69373: LIST
69374: LIST
69375: LIST
69376: LIST
69377: LIST
69378: ST_TO_ADDR
// tmp :=  ;
69379: LD_ADDR_VAR 0 3
69383: PUSH
69384: LD_STRING 
69386: ST_TO_ADDR
// for i = 1 to normalCounter do
69387: LD_ADDR_VAR 0 8
69391: PUSH
69392: DOUBLE
69393: LD_INT 1
69395: DEC
69396: ST_TO_ADDR
69397: LD_EXP 48
69401: PUSH
69402: FOR_TO
69403: IFFALSE 69439
// begin if flags [ i ] then
69405: LD_VAR 0 4
69409: PUSH
69410: LD_VAR 0 8
69414: ARRAY
69415: IFFALSE 69437
// tmp := tmp & i & ; ;
69417: LD_ADDR_VAR 0 3
69421: PUSH
69422: LD_VAR 0 3
69426: PUSH
69427: LD_VAR 0 8
69431: STR
69432: PUSH
69433: LD_STRING ;
69435: STR
69436: ST_TO_ADDR
// end ;
69437: GO 69402
69439: POP
69440: POP
// for i = 1 to hardcoreCounter do
69441: LD_ADDR_VAR 0 8
69445: PUSH
69446: DOUBLE
69447: LD_INT 1
69449: DEC
69450: ST_TO_ADDR
69451: LD_EXP 49
69455: PUSH
69456: FOR_TO
69457: IFFALSE 69503
// begin if flags [ normalCounter + i ] then
69459: LD_VAR 0 4
69463: PUSH
69464: LD_EXP 48
69468: PUSH
69469: LD_VAR 0 8
69473: PLUS
69474: ARRAY
69475: IFFALSE 69501
// tmp := tmp & ( 100 + i ) & ; ;
69477: LD_ADDR_VAR 0 3
69481: PUSH
69482: LD_VAR 0 3
69486: PUSH
69487: LD_INT 100
69489: PUSH
69490: LD_VAR 0 8
69494: PLUS
69495: STR
69496: PUSH
69497: LD_STRING ;
69499: STR
69500: ST_TO_ADDR
// end ;
69501: GO 69456
69503: POP
69504: POP
// if tmp then
69505: LD_VAR 0 3
69509: IFFALSE 69521
// active := tmp ;
69511: LD_ADDR_VAR 0 7
69515: PUSH
69516: LD_VAR 0 3
69520: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
69521: LD_STRING getStreamItemsFromMission("
69523: PUSH
69524: LD_VAR 0 5
69528: STR
69529: PUSH
69530: LD_STRING ","
69532: STR
69533: PUSH
69534: LD_VAR 0 6
69538: STR
69539: PUSH
69540: LD_STRING ","
69542: STR
69543: PUSH
69544: LD_VAR 0 7
69548: STR
69549: PUSH
69550: LD_STRING ")
69552: STR
69553: PPUSH
69554: CALL_OW 559
// end else
69558: GO 69567
// ToLua ( getStreamItemsFromMission("","","") ) ;
69560: LD_STRING getStreamItemsFromMission("","","")
69562: PPUSH
69563: CALL_OW 559
// end ;
69567: LD_VAR 0 2
69571: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
69572: LD_EXP 47
69576: PUSH
69577: LD_EXP 52
69581: AND
69582: IFFALSE 69706
69584: GO 69586
69586: DISABLE
69587: LD_INT 0
69589: PPUSH
69590: PPUSH
// begin enable ;
69591: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
69592: LD_ADDR_VAR 0 2
69596: PUSH
69597: LD_INT 22
69599: PUSH
69600: LD_OWVAR 2
69604: PUSH
69605: EMPTY
69606: LIST
69607: LIST
69608: PUSH
69609: LD_INT 2
69611: PUSH
69612: LD_INT 34
69614: PUSH
69615: LD_INT 7
69617: PUSH
69618: EMPTY
69619: LIST
69620: LIST
69621: PUSH
69622: LD_INT 34
69624: PUSH
69625: LD_INT 45
69627: PUSH
69628: EMPTY
69629: LIST
69630: LIST
69631: PUSH
69632: LD_INT 34
69634: PUSH
69635: LD_INT 28
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: PUSH
69642: LD_INT 34
69644: PUSH
69645: LD_INT 47
69647: PUSH
69648: EMPTY
69649: LIST
69650: LIST
69651: PUSH
69652: EMPTY
69653: LIST
69654: LIST
69655: LIST
69656: LIST
69657: LIST
69658: PUSH
69659: EMPTY
69660: LIST
69661: LIST
69662: PPUSH
69663: CALL_OW 69
69667: ST_TO_ADDR
// if not tmp then
69668: LD_VAR 0 2
69672: NOT
69673: IFFALSE 69677
// exit ;
69675: GO 69706
// for i in tmp do
69677: LD_ADDR_VAR 0 1
69681: PUSH
69682: LD_VAR 0 2
69686: PUSH
69687: FOR_IN
69688: IFFALSE 69704
// begin SetLives ( i , 0 ) ;
69690: LD_VAR 0 1
69694: PPUSH
69695: LD_INT 0
69697: PPUSH
69698: CALL_OW 234
// end ;
69702: GO 69687
69704: POP
69705: POP
// end ;
69706: PPOPN 2
69708: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
69709: LD_EXP 47
69713: PUSH
69714: LD_EXP 53
69718: AND
69719: IFFALSE 69803
69721: GO 69723
69723: DISABLE
69724: LD_INT 0
69726: PPUSH
69727: PPUSH
// begin enable ;
69728: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
69729: LD_ADDR_VAR 0 2
69733: PUSH
69734: LD_INT 22
69736: PUSH
69737: LD_OWVAR 2
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: PUSH
69746: LD_INT 32
69748: PUSH
69749: LD_INT 3
69751: PUSH
69752: EMPTY
69753: LIST
69754: LIST
69755: PUSH
69756: EMPTY
69757: LIST
69758: LIST
69759: PPUSH
69760: CALL_OW 69
69764: ST_TO_ADDR
// if not tmp then
69765: LD_VAR 0 2
69769: NOT
69770: IFFALSE 69774
// exit ;
69772: GO 69803
// for i in tmp do
69774: LD_ADDR_VAR 0 1
69778: PUSH
69779: LD_VAR 0 2
69783: PUSH
69784: FOR_IN
69785: IFFALSE 69801
// begin SetLives ( i , 0 ) ;
69787: LD_VAR 0 1
69791: PPUSH
69792: LD_INT 0
69794: PPUSH
69795: CALL_OW 234
// end ;
69799: GO 69784
69801: POP
69802: POP
// end ;
69803: PPOPN 2
69805: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
69806: LD_EXP 47
69810: PUSH
69811: LD_EXP 50
69815: AND
69816: IFFALSE 69909
69818: GO 69820
69820: DISABLE
69821: LD_INT 0
69823: PPUSH
// begin enable ;
69824: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
69825: LD_ADDR_VAR 0 1
69829: PUSH
69830: LD_INT 22
69832: PUSH
69833: LD_OWVAR 2
69837: PUSH
69838: EMPTY
69839: LIST
69840: LIST
69841: PUSH
69842: LD_INT 2
69844: PUSH
69845: LD_INT 25
69847: PUSH
69848: LD_INT 5
69850: PUSH
69851: EMPTY
69852: LIST
69853: LIST
69854: PUSH
69855: LD_INT 25
69857: PUSH
69858: LD_INT 9
69860: PUSH
69861: EMPTY
69862: LIST
69863: LIST
69864: PUSH
69865: LD_INT 25
69867: PUSH
69868: LD_INT 8
69870: PUSH
69871: EMPTY
69872: LIST
69873: LIST
69874: PUSH
69875: EMPTY
69876: LIST
69877: LIST
69878: LIST
69879: LIST
69880: PUSH
69881: EMPTY
69882: LIST
69883: LIST
69884: PPUSH
69885: CALL_OW 69
69889: PUSH
69890: FOR_IN
69891: IFFALSE 69907
// begin SetClass ( i , 1 ) ;
69893: LD_VAR 0 1
69897: PPUSH
69898: LD_INT 1
69900: PPUSH
69901: CALL_OW 336
// end ;
69905: GO 69890
69907: POP
69908: POP
// end ;
69909: PPOPN 1
69911: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
69912: LD_EXP 47
69916: PUSH
69917: LD_EXP 51
69921: AND
69922: PUSH
69923: LD_OWVAR 65
69927: PUSH
69928: LD_INT 7
69930: LESS
69931: AND
69932: IFFALSE 69946
69934: GO 69936
69936: DISABLE
// begin enable ;
69937: ENABLE
// game_speed := 7 ;
69938: LD_ADDR_OWVAR 65
69942: PUSH
69943: LD_INT 7
69945: ST_TO_ADDR
// end ;
69946: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
69947: LD_EXP 47
69951: PUSH
69952: LD_EXP 54
69956: AND
69957: IFFALSE 70159
69959: GO 69961
69961: DISABLE
69962: LD_INT 0
69964: PPUSH
69965: PPUSH
69966: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
69967: LD_ADDR_VAR 0 3
69971: PUSH
69972: LD_INT 81
69974: PUSH
69975: LD_OWVAR 2
69979: PUSH
69980: EMPTY
69981: LIST
69982: LIST
69983: PUSH
69984: LD_INT 21
69986: PUSH
69987: LD_INT 1
69989: PUSH
69990: EMPTY
69991: LIST
69992: LIST
69993: PUSH
69994: EMPTY
69995: LIST
69996: LIST
69997: PPUSH
69998: CALL_OW 69
70002: ST_TO_ADDR
// if not tmp then
70003: LD_VAR 0 3
70007: NOT
70008: IFFALSE 70012
// exit ;
70010: GO 70159
// if tmp > 5 then
70012: LD_VAR 0 3
70016: PUSH
70017: LD_INT 5
70019: GREATER
70020: IFFALSE 70032
// k := 5 else
70022: LD_ADDR_VAR 0 2
70026: PUSH
70027: LD_INT 5
70029: ST_TO_ADDR
70030: GO 70042
// k := tmp ;
70032: LD_ADDR_VAR 0 2
70036: PUSH
70037: LD_VAR 0 3
70041: ST_TO_ADDR
// for i := 1 to k do
70042: LD_ADDR_VAR 0 1
70046: PUSH
70047: DOUBLE
70048: LD_INT 1
70050: DEC
70051: ST_TO_ADDR
70052: LD_VAR 0 2
70056: PUSH
70057: FOR_TO
70058: IFFALSE 70157
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
70060: LD_VAR 0 3
70064: PUSH
70065: LD_VAR 0 1
70069: ARRAY
70070: PPUSH
70071: LD_VAR 0 1
70075: PUSH
70076: LD_INT 4
70078: MOD
70079: PUSH
70080: LD_INT 1
70082: PLUS
70083: PPUSH
70084: CALL_OW 259
70088: PUSH
70089: LD_INT 10
70091: LESS
70092: IFFALSE 70155
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
70094: LD_VAR 0 3
70098: PUSH
70099: LD_VAR 0 1
70103: ARRAY
70104: PPUSH
70105: LD_VAR 0 1
70109: PUSH
70110: LD_INT 4
70112: MOD
70113: PUSH
70114: LD_INT 1
70116: PLUS
70117: PPUSH
70118: LD_VAR 0 3
70122: PUSH
70123: LD_VAR 0 1
70127: ARRAY
70128: PPUSH
70129: LD_VAR 0 1
70133: PUSH
70134: LD_INT 4
70136: MOD
70137: PUSH
70138: LD_INT 1
70140: PLUS
70141: PPUSH
70142: CALL_OW 259
70146: PUSH
70147: LD_INT 1
70149: PLUS
70150: PPUSH
70151: CALL_OW 237
70155: GO 70057
70157: POP
70158: POP
// end ;
70159: PPOPN 3
70161: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
70162: LD_EXP 47
70166: PUSH
70167: LD_EXP 55
70171: AND
70172: IFFALSE 70192
70174: GO 70176
70176: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
70177: LD_INT 4
70179: PPUSH
70180: LD_OWVAR 2
70184: PPUSH
70185: LD_INT 0
70187: PPUSH
70188: CALL_OW 324
70192: END
// every 0 0$1 trigger StreamModeActive and sShovel do
70193: LD_EXP 47
70197: PUSH
70198: LD_EXP 84
70202: AND
70203: IFFALSE 70223
70205: GO 70207
70207: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
70208: LD_INT 19
70210: PPUSH
70211: LD_OWVAR 2
70215: PPUSH
70216: LD_INT 0
70218: PPUSH
70219: CALL_OW 324
70223: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
70224: LD_EXP 47
70228: PUSH
70229: LD_EXP 56
70233: AND
70234: IFFALSE 70336
70236: GO 70238
70238: DISABLE
70239: LD_INT 0
70241: PPUSH
70242: PPUSH
// begin enable ;
70243: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
70244: LD_ADDR_VAR 0 2
70248: PUSH
70249: LD_INT 22
70251: PUSH
70252: LD_OWVAR 2
70256: PUSH
70257: EMPTY
70258: LIST
70259: LIST
70260: PUSH
70261: LD_INT 2
70263: PUSH
70264: LD_INT 34
70266: PUSH
70267: LD_INT 11
70269: PUSH
70270: EMPTY
70271: LIST
70272: LIST
70273: PUSH
70274: LD_INT 34
70276: PUSH
70277: LD_INT 30
70279: PUSH
70280: EMPTY
70281: LIST
70282: LIST
70283: PUSH
70284: EMPTY
70285: LIST
70286: LIST
70287: LIST
70288: PUSH
70289: EMPTY
70290: LIST
70291: LIST
70292: PPUSH
70293: CALL_OW 69
70297: ST_TO_ADDR
// if not tmp then
70298: LD_VAR 0 2
70302: NOT
70303: IFFALSE 70307
// exit ;
70305: GO 70336
// for i in tmp do
70307: LD_ADDR_VAR 0 1
70311: PUSH
70312: LD_VAR 0 2
70316: PUSH
70317: FOR_IN
70318: IFFALSE 70334
// begin SetLives ( i , 0 ) ;
70320: LD_VAR 0 1
70324: PPUSH
70325: LD_INT 0
70327: PPUSH
70328: CALL_OW 234
// end ;
70332: GO 70317
70334: POP
70335: POP
// end ;
70336: PPOPN 2
70338: END
// every 0 0$1 trigger StreamModeActive and sBunker do
70339: LD_EXP 47
70343: PUSH
70344: LD_EXP 57
70348: AND
70349: IFFALSE 70369
70351: GO 70353
70353: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
70354: LD_INT 32
70356: PPUSH
70357: LD_OWVAR 2
70361: PPUSH
70362: LD_INT 0
70364: PPUSH
70365: CALL_OW 324
70369: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
70370: LD_EXP 47
70374: PUSH
70375: LD_EXP 58
70379: AND
70380: IFFALSE 70561
70382: GO 70384
70384: DISABLE
70385: LD_INT 0
70387: PPUSH
70388: PPUSH
70389: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
70390: LD_ADDR_VAR 0 2
70394: PUSH
70395: LD_INT 22
70397: PUSH
70398: LD_OWVAR 2
70402: PUSH
70403: EMPTY
70404: LIST
70405: LIST
70406: PUSH
70407: LD_INT 33
70409: PUSH
70410: LD_INT 3
70412: PUSH
70413: EMPTY
70414: LIST
70415: LIST
70416: PUSH
70417: EMPTY
70418: LIST
70419: LIST
70420: PPUSH
70421: CALL_OW 69
70425: ST_TO_ADDR
// if not tmp then
70426: LD_VAR 0 2
70430: NOT
70431: IFFALSE 70435
// exit ;
70433: GO 70561
// side := 0 ;
70435: LD_ADDR_VAR 0 3
70439: PUSH
70440: LD_INT 0
70442: ST_TO_ADDR
// for i := 1 to 8 do
70443: LD_ADDR_VAR 0 1
70447: PUSH
70448: DOUBLE
70449: LD_INT 1
70451: DEC
70452: ST_TO_ADDR
70453: LD_INT 8
70455: PUSH
70456: FOR_TO
70457: IFFALSE 70505
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
70459: LD_OWVAR 2
70463: PUSH
70464: LD_VAR 0 1
70468: NONEQUAL
70469: PUSH
70470: LD_OWVAR 2
70474: PPUSH
70475: LD_VAR 0 1
70479: PPUSH
70480: CALL_OW 81
70484: PUSH
70485: LD_INT 2
70487: EQUAL
70488: AND
70489: IFFALSE 70503
// begin side := i ;
70491: LD_ADDR_VAR 0 3
70495: PUSH
70496: LD_VAR 0 1
70500: ST_TO_ADDR
// break ;
70501: GO 70505
// end ;
70503: GO 70456
70505: POP
70506: POP
// if not side then
70507: LD_VAR 0 3
70511: NOT
70512: IFFALSE 70516
// exit ;
70514: GO 70561
// for i := 1 to tmp do
70516: LD_ADDR_VAR 0 1
70520: PUSH
70521: DOUBLE
70522: LD_INT 1
70524: DEC
70525: ST_TO_ADDR
70526: LD_VAR 0 2
70530: PUSH
70531: FOR_TO
70532: IFFALSE 70559
// if Prob ( 60 ) then
70534: LD_INT 60
70536: PPUSH
70537: CALL_OW 13
70541: IFFALSE 70557
// SetSide ( i , side ) ;
70543: LD_VAR 0 1
70547: PPUSH
70548: LD_VAR 0 3
70552: PPUSH
70553: CALL_OW 235
70557: GO 70531
70559: POP
70560: POP
// end ;
70561: PPOPN 3
70563: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
70564: LD_EXP 47
70568: PUSH
70569: LD_EXP 60
70573: AND
70574: IFFALSE 70693
70576: GO 70578
70578: DISABLE
70579: LD_INT 0
70581: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
70582: LD_ADDR_VAR 0 1
70586: PUSH
70587: LD_INT 22
70589: PUSH
70590: LD_OWVAR 2
70594: PUSH
70595: EMPTY
70596: LIST
70597: LIST
70598: PUSH
70599: LD_INT 21
70601: PUSH
70602: LD_INT 1
70604: PUSH
70605: EMPTY
70606: LIST
70607: LIST
70608: PUSH
70609: LD_INT 3
70611: PUSH
70612: LD_INT 23
70614: PUSH
70615: LD_INT 0
70617: PUSH
70618: EMPTY
70619: LIST
70620: LIST
70621: PUSH
70622: EMPTY
70623: LIST
70624: LIST
70625: PUSH
70626: EMPTY
70627: LIST
70628: LIST
70629: LIST
70630: PPUSH
70631: CALL_OW 69
70635: PUSH
70636: FOR_IN
70637: IFFALSE 70691
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
70639: LD_VAR 0 1
70643: PPUSH
70644: CALL_OW 257
70648: PUSH
70649: LD_INT 1
70651: PUSH
70652: LD_INT 2
70654: PUSH
70655: LD_INT 3
70657: PUSH
70658: LD_INT 4
70660: PUSH
70661: EMPTY
70662: LIST
70663: LIST
70664: LIST
70665: LIST
70666: IN
70667: IFFALSE 70689
// SetClass ( un , rand ( 1 , 4 ) ) ;
70669: LD_VAR 0 1
70673: PPUSH
70674: LD_INT 1
70676: PPUSH
70677: LD_INT 4
70679: PPUSH
70680: CALL_OW 12
70684: PPUSH
70685: CALL_OW 336
70689: GO 70636
70691: POP
70692: POP
// end ;
70693: PPOPN 1
70695: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
70696: LD_EXP 47
70700: PUSH
70701: LD_EXP 59
70705: AND
70706: IFFALSE 70785
70708: GO 70710
70710: DISABLE
70711: LD_INT 0
70713: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
70714: LD_ADDR_VAR 0 1
70718: PUSH
70719: LD_INT 22
70721: PUSH
70722: LD_OWVAR 2
70726: PUSH
70727: EMPTY
70728: LIST
70729: LIST
70730: PUSH
70731: LD_INT 21
70733: PUSH
70734: LD_INT 3
70736: PUSH
70737: EMPTY
70738: LIST
70739: LIST
70740: PUSH
70741: EMPTY
70742: LIST
70743: LIST
70744: PPUSH
70745: CALL_OW 69
70749: ST_TO_ADDR
// if not tmp then
70750: LD_VAR 0 1
70754: NOT
70755: IFFALSE 70759
// exit ;
70757: GO 70785
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
70759: LD_VAR 0 1
70763: PUSH
70764: LD_INT 1
70766: PPUSH
70767: LD_VAR 0 1
70771: PPUSH
70772: CALL_OW 12
70776: ARRAY
70777: PPUSH
70778: LD_INT 100
70780: PPUSH
70781: CALL_OW 234
// end ;
70785: PPOPN 1
70787: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
70788: LD_EXP 47
70792: PUSH
70793: LD_EXP 61
70797: AND
70798: IFFALSE 70896
70800: GO 70802
70802: DISABLE
70803: LD_INT 0
70805: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
70806: LD_ADDR_VAR 0 1
70810: PUSH
70811: LD_INT 22
70813: PUSH
70814: LD_OWVAR 2
70818: PUSH
70819: EMPTY
70820: LIST
70821: LIST
70822: PUSH
70823: LD_INT 21
70825: PUSH
70826: LD_INT 1
70828: PUSH
70829: EMPTY
70830: LIST
70831: LIST
70832: PUSH
70833: EMPTY
70834: LIST
70835: LIST
70836: PPUSH
70837: CALL_OW 69
70841: ST_TO_ADDR
// if not tmp then
70842: LD_VAR 0 1
70846: NOT
70847: IFFALSE 70851
// exit ;
70849: GO 70896
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
70851: LD_VAR 0 1
70855: PUSH
70856: LD_INT 1
70858: PPUSH
70859: LD_VAR 0 1
70863: PPUSH
70864: CALL_OW 12
70868: ARRAY
70869: PPUSH
70870: LD_INT 1
70872: PPUSH
70873: LD_INT 4
70875: PPUSH
70876: CALL_OW 12
70880: PPUSH
70881: LD_INT 3000
70883: PPUSH
70884: LD_INT 9000
70886: PPUSH
70887: CALL_OW 12
70891: PPUSH
70892: CALL_OW 492
// end ;
70896: PPOPN 1
70898: END
// every 0 0$1 trigger StreamModeActive and sDepot do
70899: LD_EXP 47
70903: PUSH
70904: LD_EXP 62
70908: AND
70909: IFFALSE 70929
70911: GO 70913
70913: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
70914: LD_INT 1
70916: PPUSH
70917: LD_OWVAR 2
70921: PPUSH
70922: LD_INT 0
70924: PPUSH
70925: CALL_OW 324
70929: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
70930: LD_EXP 47
70934: PUSH
70935: LD_EXP 63
70939: AND
70940: IFFALSE 71023
70942: GO 70944
70944: DISABLE
70945: LD_INT 0
70947: PPUSH
70948: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
70949: LD_ADDR_VAR 0 2
70953: PUSH
70954: LD_INT 22
70956: PUSH
70957: LD_OWVAR 2
70961: PUSH
70962: EMPTY
70963: LIST
70964: LIST
70965: PUSH
70966: LD_INT 21
70968: PUSH
70969: LD_INT 3
70971: PUSH
70972: EMPTY
70973: LIST
70974: LIST
70975: PUSH
70976: EMPTY
70977: LIST
70978: LIST
70979: PPUSH
70980: CALL_OW 69
70984: ST_TO_ADDR
// if not tmp then
70985: LD_VAR 0 2
70989: NOT
70990: IFFALSE 70994
// exit ;
70992: GO 71023
// for i in tmp do
70994: LD_ADDR_VAR 0 1
70998: PUSH
70999: LD_VAR 0 2
71003: PUSH
71004: FOR_IN
71005: IFFALSE 71021
// SetBLevel ( i , 10 ) ;
71007: LD_VAR 0 1
71011: PPUSH
71012: LD_INT 10
71014: PPUSH
71015: CALL_OW 241
71019: GO 71004
71021: POP
71022: POP
// end ;
71023: PPOPN 2
71025: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
71026: LD_EXP 47
71030: PUSH
71031: LD_EXP 64
71035: AND
71036: IFFALSE 71147
71038: GO 71040
71040: DISABLE
71041: LD_INT 0
71043: PPUSH
71044: PPUSH
71045: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71046: LD_ADDR_VAR 0 3
71050: PUSH
71051: LD_INT 22
71053: PUSH
71054: LD_OWVAR 2
71058: PUSH
71059: EMPTY
71060: LIST
71061: LIST
71062: PUSH
71063: LD_INT 25
71065: PUSH
71066: LD_INT 1
71068: PUSH
71069: EMPTY
71070: LIST
71071: LIST
71072: PUSH
71073: EMPTY
71074: LIST
71075: LIST
71076: PPUSH
71077: CALL_OW 69
71081: ST_TO_ADDR
// if not tmp then
71082: LD_VAR 0 3
71086: NOT
71087: IFFALSE 71091
// exit ;
71089: GO 71147
// un := tmp [ rand ( 1 , tmp ) ] ;
71091: LD_ADDR_VAR 0 2
71095: PUSH
71096: LD_VAR 0 3
71100: PUSH
71101: LD_INT 1
71103: PPUSH
71104: LD_VAR 0 3
71108: PPUSH
71109: CALL_OW 12
71113: ARRAY
71114: ST_TO_ADDR
// if Crawls ( un ) then
71115: LD_VAR 0 2
71119: PPUSH
71120: CALL_OW 318
71124: IFFALSE 71135
// ComWalk ( un ) ;
71126: LD_VAR 0 2
71130: PPUSH
71131: CALL_OW 138
// SetClass ( un , class_sniper ) ;
71135: LD_VAR 0 2
71139: PPUSH
71140: LD_INT 5
71142: PPUSH
71143: CALL_OW 336
// end ;
71147: PPOPN 3
71149: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
71150: LD_EXP 47
71154: PUSH
71155: LD_EXP 65
71159: AND
71160: PUSH
71161: LD_OWVAR 67
71165: PUSH
71166: LD_INT 4
71168: LESS
71169: AND
71170: IFFALSE 71189
71172: GO 71174
71174: DISABLE
// begin Difficulty := Difficulty + 1 ;
71175: LD_ADDR_OWVAR 67
71179: PUSH
71180: LD_OWVAR 67
71184: PUSH
71185: LD_INT 1
71187: PLUS
71188: ST_TO_ADDR
// end ;
71189: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
71190: LD_EXP 47
71194: PUSH
71195: LD_EXP 66
71199: AND
71200: IFFALSE 71303
71202: GO 71204
71204: DISABLE
71205: LD_INT 0
71207: PPUSH
// begin for i := 1 to 5 do
71208: LD_ADDR_VAR 0 1
71212: PUSH
71213: DOUBLE
71214: LD_INT 1
71216: DEC
71217: ST_TO_ADDR
71218: LD_INT 5
71220: PUSH
71221: FOR_TO
71222: IFFALSE 71301
// begin uc_nation := nation_nature ;
71224: LD_ADDR_OWVAR 21
71228: PUSH
71229: LD_INT 0
71231: ST_TO_ADDR
// uc_side := 0 ;
71232: LD_ADDR_OWVAR 20
71236: PUSH
71237: LD_INT 0
71239: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
71240: LD_ADDR_OWVAR 29
71244: PUSH
71245: LD_INT 12
71247: PUSH
71248: LD_INT 12
71250: PUSH
71251: EMPTY
71252: LIST
71253: LIST
71254: ST_TO_ADDR
// hc_agressivity := 20 ;
71255: LD_ADDR_OWVAR 35
71259: PUSH
71260: LD_INT 20
71262: ST_TO_ADDR
// hc_class := class_tiger ;
71263: LD_ADDR_OWVAR 28
71267: PUSH
71268: LD_INT 14
71270: ST_TO_ADDR
// hc_gallery :=  ;
71271: LD_ADDR_OWVAR 33
71275: PUSH
71276: LD_STRING 
71278: ST_TO_ADDR
// hc_name :=  ;
71279: LD_ADDR_OWVAR 26
71283: PUSH
71284: LD_STRING 
71286: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
71287: CALL_OW 44
71291: PPUSH
71292: LD_INT 0
71294: PPUSH
71295: CALL_OW 51
// end ;
71299: GO 71221
71301: POP
71302: POP
// end ;
71303: PPOPN 1
71305: END
// every 0 0$1 trigger StreamModeActive and sBomb do
71306: LD_EXP 47
71310: PUSH
71311: LD_EXP 67
71315: AND
71316: IFFALSE 71325
71318: GO 71320
71320: DISABLE
// StreamSibBomb ;
71321: CALL 71326 0 0
71325: END
// export function StreamSibBomb ; var i , x , y ; begin
71326: LD_INT 0
71328: PPUSH
71329: PPUSH
71330: PPUSH
71331: PPUSH
// result := false ;
71332: LD_ADDR_VAR 0 1
71336: PUSH
71337: LD_INT 0
71339: ST_TO_ADDR
// for i := 1 to 16 do
71340: LD_ADDR_VAR 0 2
71344: PUSH
71345: DOUBLE
71346: LD_INT 1
71348: DEC
71349: ST_TO_ADDR
71350: LD_INT 16
71352: PUSH
71353: FOR_TO
71354: IFFALSE 71553
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
71356: LD_ADDR_VAR 0 3
71360: PUSH
71361: LD_INT 10
71363: PUSH
71364: LD_INT 20
71366: PUSH
71367: LD_INT 30
71369: PUSH
71370: LD_INT 40
71372: PUSH
71373: LD_INT 50
71375: PUSH
71376: LD_INT 60
71378: PUSH
71379: LD_INT 70
71381: PUSH
71382: LD_INT 80
71384: PUSH
71385: LD_INT 90
71387: PUSH
71388: LD_INT 100
71390: PUSH
71391: LD_INT 110
71393: PUSH
71394: LD_INT 120
71396: PUSH
71397: LD_INT 130
71399: PUSH
71400: LD_INT 140
71402: PUSH
71403: LD_INT 150
71405: PUSH
71406: EMPTY
71407: LIST
71408: LIST
71409: LIST
71410: LIST
71411: LIST
71412: LIST
71413: LIST
71414: LIST
71415: LIST
71416: LIST
71417: LIST
71418: LIST
71419: LIST
71420: LIST
71421: LIST
71422: PUSH
71423: LD_INT 1
71425: PPUSH
71426: LD_INT 15
71428: PPUSH
71429: CALL_OW 12
71433: ARRAY
71434: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
71435: LD_ADDR_VAR 0 4
71439: PUSH
71440: LD_INT 10
71442: PUSH
71443: LD_INT 20
71445: PUSH
71446: LD_INT 30
71448: PUSH
71449: LD_INT 40
71451: PUSH
71452: LD_INT 50
71454: PUSH
71455: LD_INT 60
71457: PUSH
71458: LD_INT 70
71460: PUSH
71461: LD_INT 80
71463: PUSH
71464: LD_INT 90
71466: PUSH
71467: LD_INT 100
71469: PUSH
71470: LD_INT 110
71472: PUSH
71473: LD_INT 120
71475: PUSH
71476: LD_INT 130
71478: PUSH
71479: LD_INT 140
71481: PUSH
71482: LD_INT 150
71484: PUSH
71485: EMPTY
71486: LIST
71487: LIST
71488: LIST
71489: LIST
71490: LIST
71491: LIST
71492: LIST
71493: LIST
71494: LIST
71495: LIST
71496: LIST
71497: LIST
71498: LIST
71499: LIST
71500: LIST
71501: PUSH
71502: LD_INT 1
71504: PPUSH
71505: LD_INT 15
71507: PPUSH
71508: CALL_OW 12
71512: ARRAY
71513: ST_TO_ADDR
// if ValidHex ( x , y ) then
71514: LD_VAR 0 3
71518: PPUSH
71519: LD_VAR 0 4
71523: PPUSH
71524: CALL_OW 488
71528: IFFALSE 71551
// begin result := [ x , y ] ;
71530: LD_ADDR_VAR 0 1
71534: PUSH
71535: LD_VAR 0 3
71539: PUSH
71540: LD_VAR 0 4
71544: PUSH
71545: EMPTY
71546: LIST
71547: LIST
71548: ST_TO_ADDR
// break ;
71549: GO 71553
// end ; end ;
71551: GO 71353
71553: POP
71554: POP
// if result then
71555: LD_VAR 0 1
71559: IFFALSE 71619
// begin ToLua ( playSibBomb() ) ;
71561: LD_STRING playSibBomb()
71563: PPUSH
71564: CALL_OW 559
// wait ( 0 0$14 ) ;
71568: LD_INT 490
71570: PPUSH
71571: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
71575: LD_VAR 0 1
71579: PUSH
71580: LD_INT 1
71582: ARRAY
71583: PPUSH
71584: LD_VAR 0 1
71588: PUSH
71589: LD_INT 2
71591: ARRAY
71592: PPUSH
71593: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
71597: LD_VAR 0 1
71601: PUSH
71602: LD_INT 1
71604: ARRAY
71605: PPUSH
71606: LD_VAR 0 1
71610: PUSH
71611: LD_INT 2
71613: ARRAY
71614: PPUSH
71615: CALL_OW 429
// end ; end ;
71619: LD_VAR 0 1
71623: RET
// every 0 0$1 trigger StreamModeActive and sReset do
71624: LD_EXP 47
71628: PUSH
71629: LD_EXP 69
71633: AND
71634: IFFALSE 71646
71636: GO 71638
71638: DISABLE
// YouLost (  ) ;
71639: LD_STRING 
71641: PPUSH
71642: CALL_OW 104
71646: END
// every 0 0$1 trigger StreamModeActive and sFog do
71647: LD_EXP 47
71651: PUSH
71652: LD_EXP 68
71656: AND
71657: IFFALSE 71671
71659: GO 71661
71661: DISABLE
// FogOff ( your_side ) ;
71662: LD_OWVAR 2
71666: PPUSH
71667: CALL_OW 344
71671: END
// every 0 0$1 trigger StreamModeActive and sSun do
71672: LD_EXP 47
71676: PUSH
71677: LD_EXP 70
71681: AND
71682: IFFALSE 71710
71684: GO 71686
71686: DISABLE
// begin solar_recharge_percent := 0 ;
71687: LD_ADDR_OWVAR 79
71691: PUSH
71692: LD_INT 0
71694: ST_TO_ADDR
// wait ( 5 5$00 ) ;
71695: LD_INT 10500
71697: PPUSH
71698: CALL_OW 67
// solar_recharge_percent := 100 ;
71702: LD_ADDR_OWVAR 79
71706: PUSH
71707: LD_INT 100
71709: ST_TO_ADDR
// end ;
71710: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
71711: LD_EXP 47
71715: PUSH
71716: LD_EXP 71
71720: AND
71721: IFFALSE 71960
71723: GO 71725
71725: DISABLE
71726: LD_INT 0
71728: PPUSH
71729: PPUSH
71730: PPUSH
// begin tmp := [ ] ;
71731: LD_ADDR_VAR 0 3
71735: PUSH
71736: EMPTY
71737: ST_TO_ADDR
// for i := 1 to 6 do
71738: LD_ADDR_VAR 0 1
71742: PUSH
71743: DOUBLE
71744: LD_INT 1
71746: DEC
71747: ST_TO_ADDR
71748: LD_INT 6
71750: PUSH
71751: FOR_TO
71752: IFFALSE 71857
// begin uc_nation := nation_nature ;
71754: LD_ADDR_OWVAR 21
71758: PUSH
71759: LD_INT 0
71761: ST_TO_ADDR
// uc_side := 0 ;
71762: LD_ADDR_OWVAR 20
71766: PUSH
71767: LD_INT 0
71769: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
71770: LD_ADDR_OWVAR 29
71774: PUSH
71775: LD_INT 12
71777: PUSH
71778: LD_INT 12
71780: PUSH
71781: EMPTY
71782: LIST
71783: LIST
71784: ST_TO_ADDR
// hc_agressivity := 20 ;
71785: LD_ADDR_OWVAR 35
71789: PUSH
71790: LD_INT 20
71792: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
71793: LD_ADDR_OWVAR 28
71797: PUSH
71798: LD_INT 17
71800: ST_TO_ADDR
// hc_gallery :=  ;
71801: LD_ADDR_OWVAR 33
71805: PUSH
71806: LD_STRING 
71808: ST_TO_ADDR
// hc_name :=  ;
71809: LD_ADDR_OWVAR 26
71813: PUSH
71814: LD_STRING 
71816: ST_TO_ADDR
// un := CreateHuman ;
71817: LD_ADDR_VAR 0 2
71821: PUSH
71822: CALL_OW 44
71826: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
71827: LD_VAR 0 2
71831: PPUSH
71832: LD_INT 1
71834: PPUSH
71835: CALL_OW 51
// tmp := tmp ^ un ;
71839: LD_ADDR_VAR 0 3
71843: PUSH
71844: LD_VAR 0 3
71848: PUSH
71849: LD_VAR 0 2
71853: ADD
71854: ST_TO_ADDR
// end ;
71855: GO 71751
71857: POP
71858: POP
// repeat wait ( 0 0$1 ) ;
71859: LD_INT 35
71861: PPUSH
71862: CALL_OW 67
// for un in tmp do
71866: LD_ADDR_VAR 0 2
71870: PUSH
71871: LD_VAR 0 3
71875: PUSH
71876: FOR_IN
71877: IFFALSE 71951
// begin if IsDead ( un ) then
71879: LD_VAR 0 2
71883: PPUSH
71884: CALL_OW 301
71888: IFFALSE 71908
// begin tmp := tmp diff un ;
71890: LD_ADDR_VAR 0 3
71894: PUSH
71895: LD_VAR 0 3
71899: PUSH
71900: LD_VAR 0 2
71904: DIFF
71905: ST_TO_ADDR
// continue ;
71906: GO 71876
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
71908: LD_VAR 0 2
71912: PPUSH
71913: LD_INT 3
71915: PUSH
71916: LD_INT 22
71918: PUSH
71919: LD_INT 0
71921: PUSH
71922: EMPTY
71923: LIST
71924: LIST
71925: PUSH
71926: EMPTY
71927: LIST
71928: LIST
71929: PPUSH
71930: CALL_OW 69
71934: PPUSH
71935: LD_VAR 0 2
71939: PPUSH
71940: CALL_OW 74
71944: PPUSH
71945: CALL_OW 115
// end ;
71949: GO 71876
71951: POP
71952: POP
// until not tmp ;
71953: LD_VAR 0 3
71957: NOT
71958: IFFALSE 71859
// end ;
71960: PPOPN 3
71962: END
// every 0 0$1 trigger StreamModeActive and sTroll do
71963: LD_EXP 47
71967: PUSH
71968: LD_EXP 72
71972: AND
71973: IFFALSE 72027
71975: GO 71977
71977: DISABLE
// begin ToLua ( displayTroll(); ) ;
71978: LD_STRING displayTroll();
71980: PPUSH
71981: CALL_OW 559
// wait ( 3 3$00 ) ;
71985: LD_INT 6300
71987: PPUSH
71988: CALL_OW 67
// ToLua ( hideTroll(); ) ;
71992: LD_STRING hideTroll();
71994: PPUSH
71995: CALL_OW 559
// wait ( 1 1$00 ) ;
71999: LD_INT 2100
72001: PPUSH
72002: CALL_OW 67
// ToLua ( displayTroll(); ) ;
72006: LD_STRING displayTroll();
72008: PPUSH
72009: CALL_OW 559
// wait ( 1 1$00 ) ;
72013: LD_INT 2100
72015: PPUSH
72016: CALL_OW 67
// ToLua ( hideTroll(); ) ;
72020: LD_STRING hideTroll();
72022: PPUSH
72023: CALL_OW 559
// end ;
72027: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
72028: LD_EXP 47
72032: PUSH
72033: LD_EXP 73
72037: AND
72038: IFFALSE 72101
72040: GO 72042
72042: DISABLE
72043: LD_INT 0
72045: PPUSH
// begin p := 0 ;
72046: LD_ADDR_VAR 0 1
72050: PUSH
72051: LD_INT 0
72053: ST_TO_ADDR
// repeat game_speed := 1 ;
72054: LD_ADDR_OWVAR 65
72058: PUSH
72059: LD_INT 1
72061: ST_TO_ADDR
// wait ( 0 0$1 ) ;
72062: LD_INT 35
72064: PPUSH
72065: CALL_OW 67
// p := p + 1 ;
72069: LD_ADDR_VAR 0 1
72073: PUSH
72074: LD_VAR 0 1
72078: PUSH
72079: LD_INT 1
72081: PLUS
72082: ST_TO_ADDR
// until p >= 60 ;
72083: LD_VAR 0 1
72087: PUSH
72088: LD_INT 60
72090: GREATEREQUAL
72091: IFFALSE 72054
// game_speed := 4 ;
72093: LD_ADDR_OWVAR 65
72097: PUSH
72098: LD_INT 4
72100: ST_TO_ADDR
// end ;
72101: PPOPN 1
72103: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
72104: LD_EXP 47
72108: PUSH
72109: LD_EXP 74
72113: AND
72114: IFFALSE 72260
72116: GO 72118
72118: DISABLE
72119: LD_INT 0
72121: PPUSH
72122: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
72123: LD_ADDR_VAR 0 1
72127: PUSH
72128: LD_INT 22
72130: PUSH
72131: LD_OWVAR 2
72135: PUSH
72136: EMPTY
72137: LIST
72138: LIST
72139: PUSH
72140: LD_INT 2
72142: PUSH
72143: LD_INT 30
72145: PUSH
72146: LD_INT 0
72148: PUSH
72149: EMPTY
72150: LIST
72151: LIST
72152: PUSH
72153: LD_INT 30
72155: PUSH
72156: LD_INT 1
72158: PUSH
72159: EMPTY
72160: LIST
72161: LIST
72162: PUSH
72163: EMPTY
72164: LIST
72165: LIST
72166: LIST
72167: PUSH
72168: EMPTY
72169: LIST
72170: LIST
72171: PPUSH
72172: CALL_OW 69
72176: ST_TO_ADDR
// if not depot then
72177: LD_VAR 0 1
72181: NOT
72182: IFFALSE 72186
// exit ;
72184: GO 72260
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
72186: LD_ADDR_VAR 0 2
72190: PUSH
72191: LD_VAR 0 1
72195: PUSH
72196: LD_INT 1
72198: PPUSH
72199: LD_VAR 0 1
72203: PPUSH
72204: CALL_OW 12
72208: ARRAY
72209: PPUSH
72210: CALL_OW 274
72214: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
72215: LD_VAR 0 2
72219: PPUSH
72220: LD_INT 1
72222: PPUSH
72223: LD_INT 0
72225: PPUSH
72226: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
72230: LD_VAR 0 2
72234: PPUSH
72235: LD_INT 2
72237: PPUSH
72238: LD_INT 0
72240: PPUSH
72241: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
72245: LD_VAR 0 2
72249: PPUSH
72250: LD_INT 3
72252: PPUSH
72253: LD_INT 0
72255: PPUSH
72256: CALL_OW 277
// end ;
72260: PPOPN 2
72262: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
72263: LD_EXP 47
72267: PUSH
72268: LD_EXP 75
72272: AND
72273: IFFALSE 72370
72275: GO 72277
72277: DISABLE
72278: LD_INT 0
72280: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
72281: LD_ADDR_VAR 0 1
72285: PUSH
72286: LD_INT 22
72288: PUSH
72289: LD_OWVAR 2
72293: PUSH
72294: EMPTY
72295: LIST
72296: LIST
72297: PUSH
72298: LD_INT 21
72300: PUSH
72301: LD_INT 1
72303: PUSH
72304: EMPTY
72305: LIST
72306: LIST
72307: PUSH
72308: LD_INT 3
72310: PUSH
72311: LD_INT 23
72313: PUSH
72314: LD_INT 0
72316: PUSH
72317: EMPTY
72318: LIST
72319: LIST
72320: PUSH
72321: EMPTY
72322: LIST
72323: LIST
72324: PUSH
72325: EMPTY
72326: LIST
72327: LIST
72328: LIST
72329: PPUSH
72330: CALL_OW 69
72334: ST_TO_ADDR
// if not tmp then
72335: LD_VAR 0 1
72339: NOT
72340: IFFALSE 72344
// exit ;
72342: GO 72370
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
72344: LD_VAR 0 1
72348: PUSH
72349: LD_INT 1
72351: PPUSH
72352: LD_VAR 0 1
72356: PPUSH
72357: CALL_OW 12
72361: ARRAY
72362: PPUSH
72363: LD_INT 200
72365: PPUSH
72366: CALL_OW 234
// end ;
72370: PPOPN 1
72372: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
72373: LD_EXP 47
72377: PUSH
72378: LD_EXP 76
72382: AND
72383: IFFALSE 72462
72385: GO 72387
72387: DISABLE
72388: LD_INT 0
72390: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
72391: LD_ADDR_VAR 0 1
72395: PUSH
72396: LD_INT 22
72398: PUSH
72399: LD_OWVAR 2
72403: PUSH
72404: EMPTY
72405: LIST
72406: LIST
72407: PUSH
72408: LD_INT 21
72410: PUSH
72411: LD_INT 2
72413: PUSH
72414: EMPTY
72415: LIST
72416: LIST
72417: PUSH
72418: EMPTY
72419: LIST
72420: LIST
72421: PPUSH
72422: CALL_OW 69
72426: ST_TO_ADDR
// if not tmp then
72427: LD_VAR 0 1
72431: NOT
72432: IFFALSE 72436
// exit ;
72434: GO 72462
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
72436: LD_VAR 0 1
72440: PUSH
72441: LD_INT 1
72443: PPUSH
72444: LD_VAR 0 1
72448: PPUSH
72449: CALL_OW 12
72453: ARRAY
72454: PPUSH
72455: LD_INT 60
72457: PPUSH
72458: CALL_OW 234
// end ;
72462: PPOPN 1
72464: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
72465: LD_EXP 47
72469: PUSH
72470: LD_EXP 77
72474: AND
72475: IFFALSE 72574
72477: GO 72479
72479: DISABLE
72480: LD_INT 0
72482: PPUSH
72483: PPUSH
// begin enable ;
72484: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
72485: LD_ADDR_VAR 0 1
72489: PUSH
72490: LD_INT 22
72492: PUSH
72493: LD_OWVAR 2
72497: PUSH
72498: EMPTY
72499: LIST
72500: LIST
72501: PUSH
72502: LD_INT 61
72504: PUSH
72505: EMPTY
72506: LIST
72507: PUSH
72508: LD_INT 33
72510: PUSH
72511: LD_INT 2
72513: PUSH
72514: EMPTY
72515: LIST
72516: LIST
72517: PUSH
72518: EMPTY
72519: LIST
72520: LIST
72521: LIST
72522: PPUSH
72523: CALL_OW 69
72527: ST_TO_ADDR
// if not tmp then
72528: LD_VAR 0 1
72532: NOT
72533: IFFALSE 72537
// exit ;
72535: GO 72574
// for i in tmp do
72537: LD_ADDR_VAR 0 2
72541: PUSH
72542: LD_VAR 0 1
72546: PUSH
72547: FOR_IN
72548: IFFALSE 72572
// if IsControledBy ( i ) then
72550: LD_VAR 0 2
72554: PPUSH
72555: CALL_OW 312
72559: IFFALSE 72570
// ComUnlink ( i ) ;
72561: LD_VAR 0 2
72565: PPUSH
72566: CALL_OW 136
72570: GO 72547
72572: POP
72573: POP
// end ;
72574: PPOPN 2
72576: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
72577: LD_EXP 47
72581: PUSH
72582: LD_EXP 78
72586: AND
72587: IFFALSE 72727
72589: GO 72591
72591: DISABLE
72592: LD_INT 0
72594: PPUSH
72595: PPUSH
// begin ToLua ( displayPowell(); ) ;
72596: LD_STRING displayPowell();
72598: PPUSH
72599: CALL_OW 559
// uc_side := 0 ;
72603: LD_ADDR_OWVAR 20
72607: PUSH
72608: LD_INT 0
72610: ST_TO_ADDR
// uc_nation := 2 ;
72611: LD_ADDR_OWVAR 21
72615: PUSH
72616: LD_INT 2
72618: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
72619: LD_ADDR_OWVAR 37
72623: PUSH
72624: LD_INT 14
72626: ST_TO_ADDR
// vc_engine := engine_siberite ;
72627: LD_ADDR_OWVAR 39
72631: PUSH
72632: LD_INT 3
72634: ST_TO_ADDR
// vc_control := control_apeman ;
72635: LD_ADDR_OWVAR 38
72639: PUSH
72640: LD_INT 5
72642: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
72643: LD_ADDR_OWVAR 40
72647: PUSH
72648: LD_INT 29
72650: ST_TO_ADDR
// un := CreateVehicle ;
72651: LD_ADDR_VAR 0 2
72655: PUSH
72656: CALL_OW 45
72660: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
72661: LD_VAR 0 2
72665: PPUSH
72666: LD_INT 1
72668: PPUSH
72669: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
72673: LD_INT 35
72675: PPUSH
72676: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
72680: LD_VAR 0 2
72684: PPUSH
72685: LD_INT 22
72687: PUSH
72688: LD_OWVAR 2
72692: PUSH
72693: EMPTY
72694: LIST
72695: LIST
72696: PPUSH
72697: CALL_OW 69
72701: PPUSH
72702: LD_VAR 0 2
72706: PPUSH
72707: CALL_OW 74
72711: PPUSH
72712: CALL_OW 115
// until IsDead ( un ) ;
72716: LD_VAR 0 2
72720: PPUSH
72721: CALL_OW 301
72725: IFFALSE 72673
// end ;
72727: PPOPN 2
72729: END
// every 0 0$1 trigger StreamModeActive and sStu do
72730: LD_EXP 47
72734: PUSH
72735: LD_EXP 86
72739: AND
72740: IFFALSE 72756
72742: GO 72744
72744: DISABLE
// begin ToLua ( displayStucuk(); ) ;
72745: LD_STRING displayStucuk();
72747: PPUSH
72748: CALL_OW 559
// ResetFog ;
72752: CALL_OW 335
// end ;
72756: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
72757: LD_EXP 47
72761: PUSH
72762: LD_EXP 79
72766: AND
72767: IFFALSE 72908
72769: GO 72771
72771: DISABLE
72772: LD_INT 0
72774: PPUSH
72775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
72776: LD_ADDR_VAR 0 2
72780: PUSH
72781: LD_INT 22
72783: PUSH
72784: LD_OWVAR 2
72788: PUSH
72789: EMPTY
72790: LIST
72791: LIST
72792: PUSH
72793: LD_INT 21
72795: PUSH
72796: LD_INT 1
72798: PUSH
72799: EMPTY
72800: LIST
72801: LIST
72802: PUSH
72803: EMPTY
72804: LIST
72805: LIST
72806: PPUSH
72807: CALL_OW 69
72811: ST_TO_ADDR
// if not tmp then
72812: LD_VAR 0 2
72816: NOT
72817: IFFALSE 72821
// exit ;
72819: GO 72908
// un := tmp [ rand ( 1 , tmp ) ] ;
72821: LD_ADDR_VAR 0 1
72825: PUSH
72826: LD_VAR 0 2
72830: PUSH
72831: LD_INT 1
72833: PPUSH
72834: LD_VAR 0 2
72838: PPUSH
72839: CALL_OW 12
72843: ARRAY
72844: ST_TO_ADDR
// SetSide ( un , 0 ) ;
72845: LD_VAR 0 1
72849: PPUSH
72850: LD_INT 0
72852: PPUSH
72853: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
72857: LD_VAR 0 1
72861: PPUSH
72862: LD_OWVAR 3
72866: PUSH
72867: LD_VAR 0 1
72871: DIFF
72872: PPUSH
72873: LD_VAR 0 1
72877: PPUSH
72878: CALL_OW 74
72882: PPUSH
72883: CALL_OW 115
// wait ( 0 0$20 ) ;
72887: LD_INT 700
72889: PPUSH
72890: CALL_OW 67
// SetSide ( un , your_side ) ;
72894: LD_VAR 0 1
72898: PPUSH
72899: LD_OWVAR 2
72903: PPUSH
72904: CALL_OW 235
// end ;
72908: PPOPN 2
72910: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
72911: LD_EXP 47
72915: PUSH
72916: LD_EXP 80
72920: AND
72921: IFFALSE 73027
72923: GO 72925
72925: DISABLE
72926: LD_INT 0
72928: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
72929: LD_ADDR_VAR 0 1
72933: PUSH
72934: LD_INT 22
72936: PUSH
72937: LD_OWVAR 2
72941: PUSH
72942: EMPTY
72943: LIST
72944: LIST
72945: PUSH
72946: LD_INT 2
72948: PUSH
72949: LD_INT 30
72951: PUSH
72952: LD_INT 0
72954: PUSH
72955: EMPTY
72956: LIST
72957: LIST
72958: PUSH
72959: LD_INT 30
72961: PUSH
72962: LD_INT 1
72964: PUSH
72965: EMPTY
72966: LIST
72967: LIST
72968: PUSH
72969: EMPTY
72970: LIST
72971: LIST
72972: LIST
72973: PUSH
72974: EMPTY
72975: LIST
72976: LIST
72977: PPUSH
72978: CALL_OW 69
72982: ST_TO_ADDR
// if not depot then
72983: LD_VAR 0 1
72987: NOT
72988: IFFALSE 72992
// exit ;
72990: GO 73027
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
72992: LD_VAR 0 1
72996: PUSH
72997: LD_INT 1
72999: ARRAY
73000: PPUSH
73001: CALL_OW 250
73005: PPUSH
73006: LD_VAR 0 1
73010: PUSH
73011: LD_INT 1
73013: ARRAY
73014: PPUSH
73015: CALL_OW 251
73019: PPUSH
73020: LD_INT 70
73022: PPUSH
73023: CALL_OW 495
// end ;
73027: PPOPN 1
73029: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
73030: LD_EXP 47
73034: PUSH
73035: LD_EXP 81
73039: AND
73040: IFFALSE 73251
73042: GO 73044
73044: DISABLE
73045: LD_INT 0
73047: PPUSH
73048: PPUSH
73049: PPUSH
73050: PPUSH
73051: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
73052: LD_ADDR_VAR 0 5
73056: PUSH
73057: LD_INT 22
73059: PUSH
73060: LD_OWVAR 2
73064: PUSH
73065: EMPTY
73066: LIST
73067: LIST
73068: PUSH
73069: LD_INT 21
73071: PUSH
73072: LD_INT 1
73074: PUSH
73075: EMPTY
73076: LIST
73077: LIST
73078: PUSH
73079: EMPTY
73080: LIST
73081: LIST
73082: PPUSH
73083: CALL_OW 69
73087: ST_TO_ADDR
// if not tmp then
73088: LD_VAR 0 5
73092: NOT
73093: IFFALSE 73097
// exit ;
73095: GO 73251
// for i in tmp do
73097: LD_ADDR_VAR 0 1
73101: PUSH
73102: LD_VAR 0 5
73106: PUSH
73107: FOR_IN
73108: IFFALSE 73249
// begin d := rand ( 0 , 5 ) ;
73110: LD_ADDR_VAR 0 4
73114: PUSH
73115: LD_INT 0
73117: PPUSH
73118: LD_INT 5
73120: PPUSH
73121: CALL_OW 12
73125: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
73126: LD_ADDR_VAR 0 2
73130: PUSH
73131: LD_VAR 0 1
73135: PPUSH
73136: CALL_OW 250
73140: PPUSH
73141: LD_VAR 0 4
73145: PPUSH
73146: LD_INT 3
73148: PPUSH
73149: LD_INT 12
73151: PPUSH
73152: CALL_OW 12
73156: PPUSH
73157: CALL_OW 272
73161: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
73162: LD_ADDR_VAR 0 3
73166: PUSH
73167: LD_VAR 0 1
73171: PPUSH
73172: CALL_OW 251
73176: PPUSH
73177: LD_VAR 0 4
73181: PPUSH
73182: LD_INT 3
73184: PPUSH
73185: LD_INT 12
73187: PPUSH
73188: CALL_OW 12
73192: PPUSH
73193: CALL_OW 273
73197: ST_TO_ADDR
// if ValidHex ( x , y ) then
73198: LD_VAR 0 2
73202: PPUSH
73203: LD_VAR 0 3
73207: PPUSH
73208: CALL_OW 488
73212: IFFALSE 73247
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
73214: LD_VAR 0 1
73218: PPUSH
73219: LD_VAR 0 2
73223: PPUSH
73224: LD_VAR 0 3
73228: PPUSH
73229: LD_INT 3
73231: PPUSH
73232: LD_INT 6
73234: PPUSH
73235: CALL_OW 12
73239: PPUSH
73240: LD_INT 1
73242: PPUSH
73243: CALL_OW 483
// end ;
73247: GO 73107
73249: POP
73250: POP
// end ;
73251: PPOPN 5
73253: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
73254: LD_EXP 47
73258: PUSH
73259: LD_EXP 82
73263: AND
73264: IFFALSE 73358
73266: GO 73268
73268: DISABLE
73269: LD_INT 0
73271: PPUSH
73272: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
73273: LD_ADDR_VAR 0 2
73277: PUSH
73278: LD_INT 22
73280: PUSH
73281: LD_OWVAR 2
73285: PUSH
73286: EMPTY
73287: LIST
73288: LIST
73289: PUSH
73290: LD_INT 32
73292: PUSH
73293: LD_INT 1
73295: PUSH
73296: EMPTY
73297: LIST
73298: LIST
73299: PUSH
73300: LD_INT 21
73302: PUSH
73303: LD_INT 2
73305: PUSH
73306: EMPTY
73307: LIST
73308: LIST
73309: PUSH
73310: EMPTY
73311: LIST
73312: LIST
73313: LIST
73314: PPUSH
73315: CALL_OW 69
73319: ST_TO_ADDR
// if not tmp then
73320: LD_VAR 0 2
73324: NOT
73325: IFFALSE 73329
// exit ;
73327: GO 73358
// for i in tmp do
73329: LD_ADDR_VAR 0 1
73333: PUSH
73334: LD_VAR 0 2
73338: PUSH
73339: FOR_IN
73340: IFFALSE 73356
// SetFuel ( i , 0 ) ;
73342: LD_VAR 0 1
73346: PPUSH
73347: LD_INT 0
73349: PPUSH
73350: CALL_OW 240
73354: GO 73339
73356: POP
73357: POP
// end ;
73358: PPOPN 2
73360: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
73361: LD_EXP 47
73365: PUSH
73366: LD_EXP 83
73370: AND
73371: IFFALSE 73437
73373: GO 73375
73375: DISABLE
73376: LD_INT 0
73378: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
73379: LD_ADDR_VAR 0 1
73383: PUSH
73384: LD_INT 22
73386: PUSH
73387: LD_OWVAR 2
73391: PUSH
73392: EMPTY
73393: LIST
73394: LIST
73395: PUSH
73396: LD_INT 30
73398: PUSH
73399: LD_INT 29
73401: PUSH
73402: EMPTY
73403: LIST
73404: LIST
73405: PUSH
73406: EMPTY
73407: LIST
73408: LIST
73409: PPUSH
73410: CALL_OW 69
73414: ST_TO_ADDR
// if not tmp then
73415: LD_VAR 0 1
73419: NOT
73420: IFFALSE 73424
// exit ;
73422: GO 73437
// DestroyUnit ( tmp [ 1 ] ) ;
73424: LD_VAR 0 1
73428: PUSH
73429: LD_INT 1
73431: ARRAY
73432: PPUSH
73433: CALL_OW 65
// end ;
73437: PPOPN 1
73439: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
73440: LD_EXP 47
73444: PUSH
73445: LD_EXP 85
73449: AND
73450: IFFALSE 73579
73452: GO 73454
73454: DISABLE
73455: LD_INT 0
73457: PPUSH
// begin uc_side := 0 ;
73458: LD_ADDR_OWVAR 20
73462: PUSH
73463: LD_INT 0
73465: ST_TO_ADDR
// uc_nation := nation_arabian ;
73466: LD_ADDR_OWVAR 21
73470: PUSH
73471: LD_INT 2
73473: ST_TO_ADDR
// hc_gallery :=  ;
73474: LD_ADDR_OWVAR 33
73478: PUSH
73479: LD_STRING 
73481: ST_TO_ADDR
// hc_name :=  ;
73482: LD_ADDR_OWVAR 26
73486: PUSH
73487: LD_STRING 
73489: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
73490: LD_INT 1
73492: PPUSH
73493: LD_INT 11
73495: PPUSH
73496: LD_INT 10
73498: PPUSH
73499: CALL_OW 380
// un := CreateHuman ;
73503: LD_ADDR_VAR 0 1
73507: PUSH
73508: CALL_OW 44
73512: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
73513: LD_VAR 0 1
73517: PPUSH
73518: LD_INT 1
73520: PPUSH
73521: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
73525: LD_INT 35
73527: PPUSH
73528: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
73532: LD_VAR 0 1
73536: PPUSH
73537: LD_INT 22
73539: PUSH
73540: LD_OWVAR 2
73544: PUSH
73545: EMPTY
73546: LIST
73547: LIST
73548: PPUSH
73549: CALL_OW 69
73553: PPUSH
73554: LD_VAR 0 1
73558: PPUSH
73559: CALL_OW 74
73563: PPUSH
73564: CALL_OW 115
// until IsDead ( un ) ;
73568: LD_VAR 0 1
73572: PPUSH
73573: CALL_OW 301
73577: IFFALSE 73525
// end ;
73579: PPOPN 1
73581: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
73582: LD_EXP 47
73586: PUSH
73587: LD_EXP 87
73591: AND
73592: IFFALSE 73604
73594: GO 73596
73596: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
73597: LD_STRING earthquake(getX(game), 0, 32)
73599: PPUSH
73600: CALL_OW 559
73604: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
73605: LD_EXP 47
73609: PUSH
73610: LD_EXP 88
73614: AND
73615: IFFALSE 73706
73617: GO 73619
73619: DISABLE
73620: LD_INT 0
73622: PPUSH
// begin enable ;
73623: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
73624: LD_ADDR_VAR 0 1
73628: PUSH
73629: LD_INT 22
73631: PUSH
73632: LD_OWVAR 2
73636: PUSH
73637: EMPTY
73638: LIST
73639: LIST
73640: PUSH
73641: LD_INT 21
73643: PUSH
73644: LD_INT 2
73646: PUSH
73647: EMPTY
73648: LIST
73649: LIST
73650: PUSH
73651: LD_INT 33
73653: PUSH
73654: LD_INT 3
73656: PUSH
73657: EMPTY
73658: LIST
73659: LIST
73660: PUSH
73661: EMPTY
73662: LIST
73663: LIST
73664: LIST
73665: PPUSH
73666: CALL_OW 69
73670: ST_TO_ADDR
// if not tmp then
73671: LD_VAR 0 1
73675: NOT
73676: IFFALSE 73680
// exit ;
73678: GO 73706
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
73680: LD_VAR 0 1
73684: PUSH
73685: LD_INT 1
73687: PPUSH
73688: LD_VAR 0 1
73692: PPUSH
73693: CALL_OW 12
73697: ARRAY
73698: PPUSH
73699: LD_INT 1
73701: PPUSH
73702: CALL_OW 234
// end ;
73706: PPOPN 1
73708: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
73709: LD_EXP 47
73713: PUSH
73714: LD_EXP 89
73718: AND
73719: IFFALSE 73860
73721: GO 73723
73723: DISABLE
73724: LD_INT 0
73726: PPUSH
73727: PPUSH
73728: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
73729: LD_ADDR_VAR 0 3
73733: PUSH
73734: LD_INT 22
73736: PUSH
73737: LD_OWVAR 2
73741: PUSH
73742: EMPTY
73743: LIST
73744: LIST
73745: PUSH
73746: LD_INT 25
73748: PUSH
73749: LD_INT 1
73751: PUSH
73752: EMPTY
73753: LIST
73754: LIST
73755: PUSH
73756: EMPTY
73757: LIST
73758: LIST
73759: PPUSH
73760: CALL_OW 69
73764: ST_TO_ADDR
// if not tmp then
73765: LD_VAR 0 3
73769: NOT
73770: IFFALSE 73774
// exit ;
73772: GO 73860
// un := tmp [ rand ( 1 , tmp ) ] ;
73774: LD_ADDR_VAR 0 2
73778: PUSH
73779: LD_VAR 0 3
73783: PUSH
73784: LD_INT 1
73786: PPUSH
73787: LD_VAR 0 3
73791: PPUSH
73792: CALL_OW 12
73796: ARRAY
73797: ST_TO_ADDR
// if Crawls ( un ) then
73798: LD_VAR 0 2
73802: PPUSH
73803: CALL_OW 318
73807: IFFALSE 73818
// ComWalk ( un ) ;
73809: LD_VAR 0 2
73813: PPUSH
73814: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
73818: LD_VAR 0 2
73822: PPUSH
73823: LD_INT 9
73825: PPUSH
73826: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
73830: LD_INT 28
73832: PPUSH
73833: LD_OWVAR 2
73837: PPUSH
73838: LD_INT 2
73840: PPUSH
73841: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
73845: LD_INT 29
73847: PPUSH
73848: LD_OWVAR 2
73852: PPUSH
73853: LD_INT 2
73855: PPUSH
73856: CALL_OW 322
// end ;
73860: PPOPN 3
73862: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
73863: LD_EXP 47
73867: PUSH
73868: LD_EXP 90
73872: AND
73873: IFFALSE 73984
73875: GO 73877
73877: DISABLE
73878: LD_INT 0
73880: PPUSH
73881: PPUSH
73882: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
73883: LD_ADDR_VAR 0 3
73887: PUSH
73888: LD_INT 22
73890: PUSH
73891: LD_OWVAR 2
73895: PUSH
73896: EMPTY
73897: LIST
73898: LIST
73899: PUSH
73900: LD_INT 25
73902: PUSH
73903: LD_INT 1
73905: PUSH
73906: EMPTY
73907: LIST
73908: LIST
73909: PUSH
73910: EMPTY
73911: LIST
73912: LIST
73913: PPUSH
73914: CALL_OW 69
73918: ST_TO_ADDR
// if not tmp then
73919: LD_VAR 0 3
73923: NOT
73924: IFFALSE 73928
// exit ;
73926: GO 73984
// un := tmp [ rand ( 1 , tmp ) ] ;
73928: LD_ADDR_VAR 0 2
73932: PUSH
73933: LD_VAR 0 3
73937: PUSH
73938: LD_INT 1
73940: PPUSH
73941: LD_VAR 0 3
73945: PPUSH
73946: CALL_OW 12
73950: ARRAY
73951: ST_TO_ADDR
// if Crawls ( un ) then
73952: LD_VAR 0 2
73956: PPUSH
73957: CALL_OW 318
73961: IFFALSE 73972
// ComWalk ( un ) ;
73963: LD_VAR 0 2
73967: PPUSH
73968: CALL_OW 138
// SetClass ( un , class_mortar ) ;
73972: LD_VAR 0 2
73976: PPUSH
73977: LD_INT 8
73979: PPUSH
73980: CALL_OW 336
// end ;
73984: PPOPN 3
73986: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
73987: LD_EXP 47
73991: PUSH
73992: LD_EXP 91
73996: AND
73997: IFFALSE 74141
73999: GO 74001
74001: DISABLE
74002: LD_INT 0
74004: PPUSH
74005: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
74006: LD_ADDR_VAR 0 2
74010: PUSH
74011: LD_INT 22
74013: PUSH
74014: LD_OWVAR 2
74018: PUSH
74019: EMPTY
74020: LIST
74021: LIST
74022: PUSH
74023: LD_INT 21
74025: PUSH
74026: LD_INT 2
74028: PUSH
74029: EMPTY
74030: LIST
74031: LIST
74032: PUSH
74033: LD_INT 2
74035: PUSH
74036: LD_INT 34
74038: PUSH
74039: LD_INT 12
74041: PUSH
74042: EMPTY
74043: LIST
74044: LIST
74045: PUSH
74046: LD_INT 34
74048: PUSH
74049: LD_INT 51
74051: PUSH
74052: EMPTY
74053: LIST
74054: LIST
74055: PUSH
74056: LD_INT 34
74058: PUSH
74059: LD_INT 32
74061: PUSH
74062: EMPTY
74063: LIST
74064: LIST
74065: PUSH
74066: EMPTY
74067: LIST
74068: LIST
74069: LIST
74070: LIST
74071: PUSH
74072: EMPTY
74073: LIST
74074: LIST
74075: LIST
74076: PPUSH
74077: CALL_OW 69
74081: ST_TO_ADDR
// if not tmp then
74082: LD_VAR 0 2
74086: NOT
74087: IFFALSE 74091
// exit ;
74089: GO 74141
// for i in tmp do
74091: LD_ADDR_VAR 0 1
74095: PUSH
74096: LD_VAR 0 2
74100: PUSH
74101: FOR_IN
74102: IFFALSE 74139
// if GetCargo ( i , mat_artifact ) = 0 then
74104: LD_VAR 0 1
74108: PPUSH
74109: LD_INT 4
74111: PPUSH
74112: CALL_OW 289
74116: PUSH
74117: LD_INT 0
74119: EQUAL
74120: IFFALSE 74137
// SetCargo ( i , mat_siberit , 100 ) ;
74122: LD_VAR 0 1
74126: PPUSH
74127: LD_INT 3
74129: PPUSH
74130: LD_INT 100
74132: PPUSH
74133: CALL_OW 290
74137: GO 74101
74139: POP
74140: POP
// end ;
74141: PPOPN 2
74143: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
74144: LD_EXP 47
74148: PUSH
74149: LD_EXP 92
74153: AND
74154: IFFALSE 74337
74156: GO 74158
74158: DISABLE
74159: LD_INT 0
74161: PPUSH
74162: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
74163: LD_ADDR_VAR 0 2
74167: PUSH
74168: LD_INT 22
74170: PUSH
74171: LD_OWVAR 2
74175: PUSH
74176: EMPTY
74177: LIST
74178: LIST
74179: PPUSH
74180: CALL_OW 69
74184: ST_TO_ADDR
// if not tmp then
74185: LD_VAR 0 2
74189: NOT
74190: IFFALSE 74194
// exit ;
74192: GO 74337
// for i := 1 to 2 do
74194: LD_ADDR_VAR 0 1
74198: PUSH
74199: DOUBLE
74200: LD_INT 1
74202: DEC
74203: ST_TO_ADDR
74204: LD_INT 2
74206: PUSH
74207: FOR_TO
74208: IFFALSE 74335
// begin uc_side := your_side ;
74210: LD_ADDR_OWVAR 20
74214: PUSH
74215: LD_OWVAR 2
74219: ST_TO_ADDR
// uc_nation := nation_american ;
74220: LD_ADDR_OWVAR 21
74224: PUSH
74225: LD_INT 1
74227: ST_TO_ADDR
// vc_chassis := us_morphling ;
74228: LD_ADDR_OWVAR 37
74232: PUSH
74233: LD_INT 5
74235: ST_TO_ADDR
// vc_engine := engine_siberite ;
74236: LD_ADDR_OWVAR 39
74240: PUSH
74241: LD_INT 3
74243: ST_TO_ADDR
// vc_control := control_computer ;
74244: LD_ADDR_OWVAR 38
74248: PUSH
74249: LD_INT 3
74251: ST_TO_ADDR
// vc_weapon := us_double_laser ;
74252: LD_ADDR_OWVAR 40
74256: PUSH
74257: LD_INT 10
74259: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
74260: LD_VAR 0 2
74264: PUSH
74265: LD_INT 1
74267: ARRAY
74268: PPUSH
74269: CALL_OW 310
74273: NOT
74274: IFFALSE 74321
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
74276: CALL_OW 45
74280: PPUSH
74281: LD_VAR 0 2
74285: PUSH
74286: LD_INT 1
74288: ARRAY
74289: PPUSH
74290: CALL_OW 250
74294: PPUSH
74295: LD_VAR 0 2
74299: PUSH
74300: LD_INT 1
74302: ARRAY
74303: PPUSH
74304: CALL_OW 251
74308: PPUSH
74309: LD_INT 12
74311: PPUSH
74312: LD_INT 1
74314: PPUSH
74315: CALL_OW 50
74319: GO 74333
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
74321: CALL_OW 45
74325: PPUSH
74326: LD_INT 1
74328: PPUSH
74329: CALL_OW 51
// end ;
74333: GO 74207
74335: POP
74336: POP
// end ;
74337: PPOPN 2
74339: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
74340: LD_EXP 47
74344: PUSH
74345: LD_EXP 93
74349: AND
74350: IFFALSE 74572
74352: GO 74354
74354: DISABLE
74355: LD_INT 0
74357: PPUSH
74358: PPUSH
74359: PPUSH
74360: PPUSH
74361: PPUSH
74362: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
74363: LD_ADDR_VAR 0 6
74367: PUSH
74368: LD_INT 22
74370: PUSH
74371: LD_OWVAR 2
74375: PUSH
74376: EMPTY
74377: LIST
74378: LIST
74379: PUSH
74380: LD_INT 21
74382: PUSH
74383: LD_INT 1
74385: PUSH
74386: EMPTY
74387: LIST
74388: LIST
74389: PUSH
74390: LD_INT 3
74392: PUSH
74393: LD_INT 23
74395: PUSH
74396: LD_INT 0
74398: PUSH
74399: EMPTY
74400: LIST
74401: LIST
74402: PUSH
74403: EMPTY
74404: LIST
74405: LIST
74406: PUSH
74407: EMPTY
74408: LIST
74409: LIST
74410: LIST
74411: PPUSH
74412: CALL_OW 69
74416: ST_TO_ADDR
// if not tmp then
74417: LD_VAR 0 6
74421: NOT
74422: IFFALSE 74426
// exit ;
74424: GO 74572
// s1 := rand ( 1 , 4 ) ;
74426: LD_ADDR_VAR 0 2
74430: PUSH
74431: LD_INT 1
74433: PPUSH
74434: LD_INT 4
74436: PPUSH
74437: CALL_OW 12
74441: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
74442: LD_ADDR_VAR 0 4
74446: PUSH
74447: LD_VAR 0 6
74451: PUSH
74452: LD_INT 1
74454: ARRAY
74455: PPUSH
74456: LD_VAR 0 2
74460: PPUSH
74461: CALL_OW 259
74465: ST_TO_ADDR
// if s1 = 1 then
74466: LD_VAR 0 2
74470: PUSH
74471: LD_INT 1
74473: EQUAL
74474: IFFALSE 74494
// s2 := rand ( 2 , 4 ) else
74476: LD_ADDR_VAR 0 3
74480: PUSH
74481: LD_INT 2
74483: PPUSH
74484: LD_INT 4
74486: PPUSH
74487: CALL_OW 12
74491: ST_TO_ADDR
74492: GO 74502
// s2 := 1 ;
74494: LD_ADDR_VAR 0 3
74498: PUSH
74499: LD_INT 1
74501: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
74502: LD_ADDR_VAR 0 5
74506: PUSH
74507: LD_VAR 0 6
74511: PUSH
74512: LD_INT 1
74514: ARRAY
74515: PPUSH
74516: LD_VAR 0 3
74520: PPUSH
74521: CALL_OW 259
74525: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
74526: LD_VAR 0 6
74530: PUSH
74531: LD_INT 1
74533: ARRAY
74534: PPUSH
74535: LD_VAR 0 2
74539: PPUSH
74540: LD_VAR 0 5
74544: PPUSH
74545: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
74549: LD_VAR 0 6
74553: PUSH
74554: LD_INT 1
74556: ARRAY
74557: PPUSH
74558: LD_VAR 0 3
74562: PPUSH
74563: LD_VAR 0 4
74567: PPUSH
74568: CALL_OW 237
// end ;
74572: PPOPN 6
74574: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
74575: LD_EXP 47
74579: PUSH
74580: LD_EXP 94
74584: AND
74585: IFFALSE 74664
74587: GO 74589
74589: DISABLE
74590: LD_INT 0
74592: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
74593: LD_ADDR_VAR 0 1
74597: PUSH
74598: LD_INT 22
74600: PUSH
74601: LD_OWVAR 2
74605: PUSH
74606: EMPTY
74607: LIST
74608: LIST
74609: PUSH
74610: LD_INT 30
74612: PUSH
74613: LD_INT 3
74615: PUSH
74616: EMPTY
74617: LIST
74618: LIST
74619: PUSH
74620: EMPTY
74621: LIST
74622: LIST
74623: PPUSH
74624: CALL_OW 69
74628: ST_TO_ADDR
// if not tmp then
74629: LD_VAR 0 1
74633: NOT
74634: IFFALSE 74638
// exit ;
74636: GO 74664
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
74638: LD_VAR 0 1
74642: PUSH
74643: LD_INT 1
74645: PPUSH
74646: LD_VAR 0 1
74650: PPUSH
74651: CALL_OW 12
74655: ARRAY
74656: PPUSH
74657: LD_INT 1
74659: PPUSH
74660: CALL_OW 234
// end ;
74664: PPOPN 1
74666: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
74667: LD_EXP 47
74671: PUSH
74672: LD_EXP 95
74676: AND
74677: IFFALSE 74789
74679: GO 74681
74681: DISABLE
74682: LD_INT 0
74684: PPUSH
74685: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
74686: LD_ADDR_VAR 0 2
74690: PUSH
74691: LD_INT 22
74693: PUSH
74694: LD_OWVAR 2
74698: PUSH
74699: EMPTY
74700: LIST
74701: LIST
74702: PUSH
74703: LD_INT 2
74705: PUSH
74706: LD_INT 30
74708: PUSH
74709: LD_INT 27
74711: PUSH
74712: EMPTY
74713: LIST
74714: LIST
74715: PUSH
74716: LD_INT 30
74718: PUSH
74719: LD_INT 26
74721: PUSH
74722: EMPTY
74723: LIST
74724: LIST
74725: PUSH
74726: LD_INT 30
74728: PUSH
74729: LD_INT 28
74731: PUSH
74732: EMPTY
74733: LIST
74734: LIST
74735: PUSH
74736: EMPTY
74737: LIST
74738: LIST
74739: LIST
74740: LIST
74741: PUSH
74742: EMPTY
74743: LIST
74744: LIST
74745: PPUSH
74746: CALL_OW 69
74750: ST_TO_ADDR
// if not tmp then
74751: LD_VAR 0 2
74755: NOT
74756: IFFALSE 74760
// exit ;
74758: GO 74789
// for i in tmp do
74760: LD_ADDR_VAR 0 1
74764: PUSH
74765: LD_VAR 0 2
74769: PUSH
74770: FOR_IN
74771: IFFALSE 74787
// SetLives ( i , 1 ) ;
74773: LD_VAR 0 1
74777: PPUSH
74778: LD_INT 1
74780: PPUSH
74781: CALL_OW 234
74785: GO 74770
74787: POP
74788: POP
// end ;
74789: PPOPN 2
74791: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
74792: LD_EXP 47
74796: PUSH
74797: LD_EXP 96
74801: AND
74802: IFFALSE 75089
74804: GO 74806
74806: DISABLE
74807: LD_INT 0
74809: PPUSH
74810: PPUSH
74811: PPUSH
// begin i := rand ( 1 , 7 ) ;
74812: LD_ADDR_VAR 0 1
74816: PUSH
74817: LD_INT 1
74819: PPUSH
74820: LD_INT 7
74822: PPUSH
74823: CALL_OW 12
74827: ST_TO_ADDR
// case i of 1 :
74828: LD_VAR 0 1
74832: PUSH
74833: LD_INT 1
74835: DOUBLE
74836: EQUAL
74837: IFTRUE 74841
74839: GO 74851
74841: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
74842: LD_STRING earthquake(getX(game), 0, 32)
74844: PPUSH
74845: CALL_OW 559
74849: GO 75089
74851: LD_INT 2
74853: DOUBLE
74854: EQUAL
74855: IFTRUE 74859
74857: GO 74873
74859: POP
// begin ToLua ( displayStucuk(); ) ;
74860: LD_STRING displayStucuk();
74862: PPUSH
74863: CALL_OW 559
// ResetFog ;
74867: CALL_OW 335
// end ; 3 :
74871: GO 75089
74873: LD_INT 3
74875: DOUBLE
74876: EQUAL
74877: IFTRUE 74881
74879: GO 74985
74881: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
74882: LD_ADDR_VAR 0 2
74886: PUSH
74887: LD_INT 22
74889: PUSH
74890: LD_OWVAR 2
74894: PUSH
74895: EMPTY
74896: LIST
74897: LIST
74898: PUSH
74899: LD_INT 25
74901: PUSH
74902: LD_INT 1
74904: PUSH
74905: EMPTY
74906: LIST
74907: LIST
74908: PUSH
74909: EMPTY
74910: LIST
74911: LIST
74912: PPUSH
74913: CALL_OW 69
74917: ST_TO_ADDR
// if not tmp then
74918: LD_VAR 0 2
74922: NOT
74923: IFFALSE 74927
// exit ;
74925: GO 75089
// un := tmp [ rand ( 1 , tmp ) ] ;
74927: LD_ADDR_VAR 0 3
74931: PUSH
74932: LD_VAR 0 2
74936: PUSH
74937: LD_INT 1
74939: PPUSH
74940: LD_VAR 0 2
74944: PPUSH
74945: CALL_OW 12
74949: ARRAY
74950: ST_TO_ADDR
// if Crawls ( un ) then
74951: LD_VAR 0 3
74955: PPUSH
74956: CALL_OW 318
74960: IFFALSE 74971
// ComWalk ( un ) ;
74962: LD_VAR 0 3
74966: PPUSH
74967: CALL_OW 138
// SetClass ( un , class_mortar ) ;
74971: LD_VAR 0 3
74975: PPUSH
74976: LD_INT 8
74978: PPUSH
74979: CALL_OW 336
// end ; 4 :
74983: GO 75089
74985: LD_INT 4
74987: DOUBLE
74988: EQUAL
74989: IFTRUE 74993
74991: GO 75067
74993: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
74994: LD_ADDR_VAR 0 2
74998: PUSH
74999: LD_INT 22
75001: PUSH
75002: LD_OWVAR 2
75006: PUSH
75007: EMPTY
75008: LIST
75009: LIST
75010: PUSH
75011: LD_INT 30
75013: PUSH
75014: LD_INT 29
75016: PUSH
75017: EMPTY
75018: LIST
75019: LIST
75020: PUSH
75021: EMPTY
75022: LIST
75023: LIST
75024: PPUSH
75025: CALL_OW 69
75029: ST_TO_ADDR
// if not tmp then
75030: LD_VAR 0 2
75034: NOT
75035: IFFALSE 75039
// exit ;
75037: GO 75089
// CenterNowOnUnits ( tmp [ 1 ] ) ;
75039: LD_VAR 0 2
75043: PUSH
75044: LD_INT 1
75046: ARRAY
75047: PPUSH
75048: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
75052: LD_VAR 0 2
75056: PUSH
75057: LD_INT 1
75059: ARRAY
75060: PPUSH
75061: CALL_OW 65
// end ; 5 .. 7 :
75065: GO 75089
75067: LD_INT 5
75069: DOUBLE
75070: GREATEREQUAL
75071: IFFALSE 75079
75073: LD_INT 7
75075: DOUBLE
75076: LESSEQUAL
75077: IFTRUE 75081
75079: GO 75088
75081: POP
// StreamSibBomb ; end ;
75082: CALL 71326 0 0
75086: GO 75089
75088: POP
// end ;
75089: PPOPN 3
75091: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
75092: LD_EXP 47
75096: PUSH
75097: LD_EXP 97
75101: AND
75102: IFFALSE 75258
75104: GO 75106
75106: DISABLE
75107: LD_INT 0
75109: PPUSH
75110: PPUSH
75111: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
75112: LD_ADDR_VAR 0 2
75116: PUSH
75117: LD_INT 81
75119: PUSH
75120: LD_OWVAR 2
75124: PUSH
75125: EMPTY
75126: LIST
75127: LIST
75128: PUSH
75129: LD_INT 2
75131: PUSH
75132: LD_INT 21
75134: PUSH
75135: LD_INT 1
75137: PUSH
75138: EMPTY
75139: LIST
75140: LIST
75141: PUSH
75142: LD_INT 21
75144: PUSH
75145: LD_INT 2
75147: PUSH
75148: EMPTY
75149: LIST
75150: LIST
75151: PUSH
75152: EMPTY
75153: LIST
75154: LIST
75155: LIST
75156: PUSH
75157: EMPTY
75158: LIST
75159: LIST
75160: PPUSH
75161: CALL_OW 69
75165: ST_TO_ADDR
// if not tmp then
75166: LD_VAR 0 2
75170: NOT
75171: IFFALSE 75175
// exit ;
75173: GO 75258
// p := 0 ;
75175: LD_ADDR_VAR 0 3
75179: PUSH
75180: LD_INT 0
75182: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
75183: LD_INT 35
75185: PPUSH
75186: CALL_OW 67
// p := p + 1 ;
75190: LD_ADDR_VAR 0 3
75194: PUSH
75195: LD_VAR 0 3
75199: PUSH
75200: LD_INT 1
75202: PLUS
75203: ST_TO_ADDR
// for i in tmp do
75204: LD_ADDR_VAR 0 1
75208: PUSH
75209: LD_VAR 0 2
75213: PUSH
75214: FOR_IN
75215: IFFALSE 75246
// if GetLives ( i ) < 1000 then
75217: LD_VAR 0 1
75221: PPUSH
75222: CALL_OW 256
75226: PUSH
75227: LD_INT 1000
75229: LESS
75230: IFFALSE 75244
// SetLives ( i , 1000 ) ;
75232: LD_VAR 0 1
75236: PPUSH
75237: LD_INT 1000
75239: PPUSH
75240: CALL_OW 234
75244: GO 75214
75246: POP
75247: POP
// until p > 20 ;
75248: LD_VAR 0 3
75252: PUSH
75253: LD_INT 20
75255: GREATER
75256: IFFALSE 75183
// end ;
75258: PPOPN 3
75260: END
// every 0 0$1 trigger StreamModeActive and sTime do
75261: LD_EXP 47
75265: PUSH
75266: LD_EXP 98
75270: AND
75271: IFFALSE 75306
75273: GO 75275
75275: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
75276: LD_INT 28
75278: PPUSH
75279: LD_OWVAR 2
75283: PPUSH
75284: LD_INT 2
75286: PPUSH
75287: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
75291: LD_INT 30
75293: PPUSH
75294: LD_OWVAR 2
75298: PPUSH
75299: LD_INT 2
75301: PPUSH
75302: CALL_OW 322
// end ;
75306: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
75307: LD_EXP 47
75311: PUSH
75312: LD_EXP 99
75316: AND
75317: IFFALSE 75438
75319: GO 75321
75321: DISABLE
75322: LD_INT 0
75324: PPUSH
75325: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
75326: LD_ADDR_VAR 0 2
75330: PUSH
75331: LD_INT 22
75333: PUSH
75334: LD_OWVAR 2
75338: PUSH
75339: EMPTY
75340: LIST
75341: LIST
75342: PUSH
75343: LD_INT 21
75345: PUSH
75346: LD_INT 1
75348: PUSH
75349: EMPTY
75350: LIST
75351: LIST
75352: PUSH
75353: LD_INT 3
75355: PUSH
75356: LD_INT 23
75358: PUSH
75359: LD_INT 0
75361: PUSH
75362: EMPTY
75363: LIST
75364: LIST
75365: PUSH
75366: EMPTY
75367: LIST
75368: LIST
75369: PUSH
75370: EMPTY
75371: LIST
75372: LIST
75373: LIST
75374: PPUSH
75375: CALL_OW 69
75379: ST_TO_ADDR
// if not tmp then
75380: LD_VAR 0 2
75384: NOT
75385: IFFALSE 75389
// exit ;
75387: GO 75438
// for i in tmp do
75389: LD_ADDR_VAR 0 1
75393: PUSH
75394: LD_VAR 0 2
75398: PUSH
75399: FOR_IN
75400: IFFALSE 75436
// begin if Crawls ( i ) then
75402: LD_VAR 0 1
75406: PPUSH
75407: CALL_OW 318
75411: IFFALSE 75422
// ComWalk ( i ) ;
75413: LD_VAR 0 1
75417: PPUSH
75418: CALL_OW 138
// SetClass ( i , 2 ) ;
75422: LD_VAR 0 1
75426: PPUSH
75427: LD_INT 2
75429: PPUSH
75430: CALL_OW 336
// end ;
75434: GO 75399
75436: POP
75437: POP
// end ;
75438: PPOPN 2
75440: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
75441: LD_EXP 47
75445: PUSH
75446: LD_EXP 100
75450: AND
75451: IFFALSE 75739
75453: GO 75455
75455: DISABLE
75456: LD_INT 0
75458: PPUSH
75459: PPUSH
75460: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
75461: LD_OWVAR 2
75465: PPUSH
75466: LD_INT 9
75468: PPUSH
75469: LD_INT 1
75471: PPUSH
75472: LD_INT 1
75474: PPUSH
75475: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
75479: LD_INT 9
75481: PPUSH
75482: LD_OWVAR 2
75486: PPUSH
75487: CALL_OW 343
// uc_side := 9 ;
75491: LD_ADDR_OWVAR 20
75495: PUSH
75496: LD_INT 9
75498: ST_TO_ADDR
// uc_nation := 2 ;
75499: LD_ADDR_OWVAR 21
75503: PUSH
75504: LD_INT 2
75506: ST_TO_ADDR
// hc_name := Dark Warrior ;
75507: LD_ADDR_OWVAR 26
75511: PUSH
75512: LD_STRING Dark Warrior
75514: ST_TO_ADDR
// hc_gallery :=  ;
75515: LD_ADDR_OWVAR 33
75519: PUSH
75520: LD_STRING 
75522: ST_TO_ADDR
// hc_noskilllimit := true ;
75523: LD_ADDR_OWVAR 76
75527: PUSH
75528: LD_INT 1
75530: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
75531: LD_ADDR_OWVAR 31
75535: PUSH
75536: LD_INT 30
75538: PUSH
75539: LD_INT 30
75541: PUSH
75542: LD_INT 30
75544: PUSH
75545: LD_INT 30
75547: PUSH
75548: EMPTY
75549: LIST
75550: LIST
75551: LIST
75552: LIST
75553: ST_TO_ADDR
// un := CreateHuman ;
75554: LD_ADDR_VAR 0 3
75558: PUSH
75559: CALL_OW 44
75563: ST_TO_ADDR
// hc_noskilllimit := false ;
75564: LD_ADDR_OWVAR 76
75568: PUSH
75569: LD_INT 0
75571: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
75572: LD_VAR 0 3
75576: PPUSH
75577: LD_INT 1
75579: PPUSH
75580: CALL_OW 51
// ToLua ( playRanger() ) ;
75584: LD_STRING playRanger()
75586: PPUSH
75587: CALL_OW 559
// p := 0 ;
75591: LD_ADDR_VAR 0 2
75595: PUSH
75596: LD_INT 0
75598: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
75599: LD_INT 35
75601: PPUSH
75602: CALL_OW 67
// p := p + 1 ;
75606: LD_ADDR_VAR 0 2
75610: PUSH
75611: LD_VAR 0 2
75615: PUSH
75616: LD_INT 1
75618: PLUS
75619: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
75620: LD_VAR 0 3
75624: PPUSH
75625: CALL_OW 256
75629: PUSH
75630: LD_INT 1000
75632: LESS
75633: IFFALSE 75647
// SetLives ( un , 1000 ) ;
75635: LD_VAR 0 3
75639: PPUSH
75640: LD_INT 1000
75642: PPUSH
75643: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
75647: LD_VAR 0 3
75651: PPUSH
75652: LD_INT 81
75654: PUSH
75655: LD_OWVAR 2
75659: PUSH
75660: EMPTY
75661: LIST
75662: LIST
75663: PUSH
75664: LD_INT 91
75666: PUSH
75667: LD_VAR 0 3
75671: PUSH
75672: LD_INT 30
75674: PUSH
75675: EMPTY
75676: LIST
75677: LIST
75678: LIST
75679: PUSH
75680: EMPTY
75681: LIST
75682: LIST
75683: PPUSH
75684: CALL_OW 69
75688: PPUSH
75689: LD_VAR 0 3
75693: PPUSH
75694: CALL_OW 74
75698: PPUSH
75699: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
75703: LD_VAR 0 2
75707: PUSH
75708: LD_INT 80
75710: GREATER
75711: PUSH
75712: LD_VAR 0 3
75716: PPUSH
75717: CALL_OW 301
75721: OR
75722: IFFALSE 75599
// if un then
75724: LD_VAR 0 3
75728: IFFALSE 75739
// RemoveUnit ( un ) ;
75730: LD_VAR 0 3
75734: PPUSH
75735: CALL_OW 64
// end ;
75739: PPOPN 3
75741: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
75742: LD_EXP 101
75746: IFFALSE 75862
75748: GO 75750
75750: DISABLE
75751: LD_INT 0
75753: PPUSH
75754: PPUSH
75755: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
75756: LD_ADDR_VAR 0 2
75760: PUSH
75761: LD_INT 81
75763: PUSH
75764: LD_OWVAR 2
75768: PUSH
75769: EMPTY
75770: LIST
75771: LIST
75772: PUSH
75773: LD_INT 21
75775: PUSH
75776: LD_INT 1
75778: PUSH
75779: EMPTY
75780: LIST
75781: LIST
75782: PUSH
75783: EMPTY
75784: LIST
75785: LIST
75786: PPUSH
75787: CALL_OW 69
75791: ST_TO_ADDR
// ToLua ( playComputer() ) ;
75792: LD_STRING playComputer()
75794: PPUSH
75795: CALL_OW 559
// if not tmp then
75799: LD_VAR 0 2
75803: NOT
75804: IFFALSE 75808
// exit ;
75806: GO 75862
// for i in tmp do
75808: LD_ADDR_VAR 0 1
75812: PUSH
75813: LD_VAR 0 2
75817: PUSH
75818: FOR_IN
75819: IFFALSE 75860
// for j := 1 to 4 do
75821: LD_ADDR_VAR 0 3
75825: PUSH
75826: DOUBLE
75827: LD_INT 1
75829: DEC
75830: ST_TO_ADDR
75831: LD_INT 4
75833: PUSH
75834: FOR_TO
75835: IFFALSE 75856
// SetSkill ( i , j , 10 ) ;
75837: LD_VAR 0 1
75841: PPUSH
75842: LD_VAR 0 3
75846: PPUSH
75847: LD_INT 10
75849: PPUSH
75850: CALL_OW 237
75854: GO 75834
75856: POP
75857: POP
75858: GO 75818
75860: POP
75861: POP
// end ;
75862: PPOPN 3
75864: END
// every 0 0$1 trigger s30 do var i , tmp ;
75865: LD_EXP 102
75869: IFFALSE 75938
75871: GO 75873
75873: DISABLE
75874: LD_INT 0
75876: PPUSH
75877: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
75878: LD_ADDR_VAR 0 2
75882: PUSH
75883: LD_INT 22
75885: PUSH
75886: LD_OWVAR 2
75890: PUSH
75891: EMPTY
75892: LIST
75893: LIST
75894: PPUSH
75895: CALL_OW 69
75899: ST_TO_ADDR
// if not tmp then
75900: LD_VAR 0 2
75904: NOT
75905: IFFALSE 75909
// exit ;
75907: GO 75938
// for i in tmp do
75909: LD_ADDR_VAR 0 1
75913: PUSH
75914: LD_VAR 0 2
75918: PUSH
75919: FOR_IN
75920: IFFALSE 75936
// SetLives ( i , 300 ) ;
75922: LD_VAR 0 1
75926: PPUSH
75927: LD_INT 300
75929: PPUSH
75930: CALL_OW 234
75934: GO 75919
75936: POP
75937: POP
// end ;
75938: PPOPN 2
75940: END
// every 0 0$1 trigger s60 do var i , tmp ;
75941: LD_EXP 103
75945: IFFALSE 76014
75947: GO 75949
75949: DISABLE
75950: LD_INT 0
75952: PPUSH
75953: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
75954: LD_ADDR_VAR 0 2
75958: PUSH
75959: LD_INT 22
75961: PUSH
75962: LD_OWVAR 2
75966: PUSH
75967: EMPTY
75968: LIST
75969: LIST
75970: PPUSH
75971: CALL_OW 69
75975: ST_TO_ADDR
// if not tmp then
75976: LD_VAR 0 2
75980: NOT
75981: IFFALSE 75985
// exit ;
75983: GO 76014
// for i in tmp do
75985: LD_ADDR_VAR 0 1
75989: PUSH
75990: LD_VAR 0 2
75994: PUSH
75995: FOR_IN
75996: IFFALSE 76012
// SetLives ( i , 600 ) ;
75998: LD_VAR 0 1
76002: PPUSH
76003: LD_INT 600
76005: PPUSH
76006: CALL_OW 234
76010: GO 75995
76012: POP
76013: POP
// end ;
76014: PPOPN 2
76016: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
76017: LD_INT 0
76019: PPUSH
// case cmd of 301 :
76020: LD_VAR 0 1
76024: PUSH
76025: LD_INT 301
76027: DOUBLE
76028: EQUAL
76029: IFTRUE 76033
76031: GO 76065
76033: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
76034: LD_VAR 0 6
76038: PPUSH
76039: LD_VAR 0 7
76043: PPUSH
76044: LD_VAR 0 8
76048: PPUSH
76049: LD_VAR 0 4
76053: PPUSH
76054: LD_VAR 0 5
76058: PPUSH
76059: CALL 77274 0 5
76063: GO 76186
76065: LD_INT 302
76067: DOUBLE
76068: EQUAL
76069: IFTRUE 76073
76071: GO 76110
76073: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
76074: LD_VAR 0 6
76078: PPUSH
76079: LD_VAR 0 7
76083: PPUSH
76084: LD_VAR 0 8
76088: PPUSH
76089: LD_VAR 0 9
76093: PPUSH
76094: LD_VAR 0 4
76098: PPUSH
76099: LD_VAR 0 5
76103: PPUSH
76104: CALL 77365 0 6
76108: GO 76186
76110: LD_INT 303
76112: DOUBLE
76113: EQUAL
76114: IFTRUE 76118
76116: GO 76155
76118: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
76119: LD_VAR 0 6
76123: PPUSH
76124: LD_VAR 0 7
76128: PPUSH
76129: LD_VAR 0 8
76133: PPUSH
76134: LD_VAR 0 9
76138: PPUSH
76139: LD_VAR 0 4
76143: PPUSH
76144: LD_VAR 0 5
76148: PPUSH
76149: CALL 76191 0 6
76153: GO 76186
76155: LD_INT 304
76157: DOUBLE
76158: EQUAL
76159: IFTRUE 76163
76161: GO 76185
76163: POP
// hHackTeleport ( unit , x , y ) ; end ;
76164: LD_VAR 0 2
76168: PPUSH
76169: LD_VAR 0 4
76173: PPUSH
76174: LD_VAR 0 5
76178: PPUSH
76179: CALL 77958 0 3
76183: GO 76186
76185: POP
// end ;
76186: LD_VAR 0 12
76190: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
76191: LD_INT 0
76193: PPUSH
76194: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
76195: LD_VAR 0 1
76199: PUSH
76200: LD_INT 1
76202: LESS
76203: PUSH
76204: LD_VAR 0 1
76208: PUSH
76209: LD_INT 3
76211: GREATER
76212: OR
76213: PUSH
76214: LD_VAR 0 5
76218: PPUSH
76219: LD_VAR 0 6
76223: PPUSH
76224: CALL_OW 428
76228: OR
76229: IFFALSE 76233
// exit ;
76231: GO 76961
// uc_side := your_side ;
76233: LD_ADDR_OWVAR 20
76237: PUSH
76238: LD_OWVAR 2
76242: ST_TO_ADDR
// uc_nation := nation ;
76243: LD_ADDR_OWVAR 21
76247: PUSH
76248: LD_VAR 0 1
76252: ST_TO_ADDR
// bc_level = 1 ;
76253: LD_ADDR_OWVAR 43
76257: PUSH
76258: LD_INT 1
76260: ST_TO_ADDR
// case btype of 1 :
76261: LD_VAR 0 2
76265: PUSH
76266: LD_INT 1
76268: DOUBLE
76269: EQUAL
76270: IFTRUE 76274
76272: GO 76285
76274: POP
// bc_type := b_depot ; 2 :
76275: LD_ADDR_OWVAR 42
76279: PUSH
76280: LD_INT 0
76282: ST_TO_ADDR
76283: GO 76905
76285: LD_INT 2
76287: DOUBLE
76288: EQUAL
76289: IFTRUE 76293
76291: GO 76304
76293: POP
// bc_type := b_warehouse ; 3 :
76294: LD_ADDR_OWVAR 42
76298: PUSH
76299: LD_INT 1
76301: ST_TO_ADDR
76302: GO 76905
76304: LD_INT 3
76306: DOUBLE
76307: EQUAL
76308: IFTRUE 76312
76310: GO 76323
76312: POP
// bc_type := b_lab ; 4 .. 9 :
76313: LD_ADDR_OWVAR 42
76317: PUSH
76318: LD_INT 6
76320: ST_TO_ADDR
76321: GO 76905
76323: LD_INT 4
76325: DOUBLE
76326: GREATEREQUAL
76327: IFFALSE 76335
76329: LD_INT 9
76331: DOUBLE
76332: LESSEQUAL
76333: IFTRUE 76337
76335: GO 76397
76337: POP
// begin bc_type := b_lab_half ;
76338: LD_ADDR_OWVAR 42
76342: PUSH
76343: LD_INT 7
76345: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
76346: LD_ADDR_OWVAR 44
76350: PUSH
76351: LD_INT 10
76353: PUSH
76354: LD_INT 11
76356: PUSH
76357: LD_INT 12
76359: PUSH
76360: LD_INT 15
76362: PUSH
76363: LD_INT 14
76365: PUSH
76366: LD_INT 13
76368: PUSH
76369: EMPTY
76370: LIST
76371: LIST
76372: LIST
76373: LIST
76374: LIST
76375: LIST
76376: PUSH
76377: LD_VAR 0 2
76381: PUSH
76382: LD_INT 3
76384: MINUS
76385: ARRAY
76386: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
76387: LD_ADDR_OWVAR 45
76391: PUSH
76392: LD_INT 9
76394: ST_TO_ADDR
// end ; 10 .. 13 :
76395: GO 76905
76397: LD_INT 10
76399: DOUBLE
76400: GREATEREQUAL
76401: IFFALSE 76409
76403: LD_INT 13
76405: DOUBLE
76406: LESSEQUAL
76407: IFTRUE 76411
76409: GO 76488
76411: POP
// begin bc_type := b_lab_full ;
76412: LD_ADDR_OWVAR 42
76416: PUSH
76417: LD_INT 8
76419: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
76420: LD_ADDR_OWVAR 44
76424: PUSH
76425: LD_INT 10
76427: PUSH
76428: LD_INT 12
76430: PUSH
76431: LD_INT 14
76433: PUSH
76434: LD_INT 13
76436: PUSH
76437: EMPTY
76438: LIST
76439: LIST
76440: LIST
76441: LIST
76442: PUSH
76443: LD_VAR 0 2
76447: PUSH
76448: LD_INT 9
76450: MINUS
76451: ARRAY
76452: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
76453: LD_ADDR_OWVAR 45
76457: PUSH
76458: LD_INT 11
76460: PUSH
76461: LD_INT 15
76463: PUSH
76464: LD_INT 12
76466: PUSH
76467: LD_INT 15
76469: PUSH
76470: EMPTY
76471: LIST
76472: LIST
76473: LIST
76474: LIST
76475: PUSH
76476: LD_VAR 0 2
76480: PUSH
76481: LD_INT 9
76483: MINUS
76484: ARRAY
76485: ST_TO_ADDR
// end ; 14 :
76486: GO 76905
76488: LD_INT 14
76490: DOUBLE
76491: EQUAL
76492: IFTRUE 76496
76494: GO 76507
76496: POP
// bc_type := b_workshop ; 15 :
76497: LD_ADDR_OWVAR 42
76501: PUSH
76502: LD_INT 2
76504: ST_TO_ADDR
76505: GO 76905
76507: LD_INT 15
76509: DOUBLE
76510: EQUAL
76511: IFTRUE 76515
76513: GO 76526
76515: POP
// bc_type := b_factory ; 16 :
76516: LD_ADDR_OWVAR 42
76520: PUSH
76521: LD_INT 3
76523: ST_TO_ADDR
76524: GO 76905
76526: LD_INT 16
76528: DOUBLE
76529: EQUAL
76530: IFTRUE 76534
76532: GO 76545
76534: POP
// bc_type := b_ext_gun ; 17 :
76535: LD_ADDR_OWVAR 42
76539: PUSH
76540: LD_INT 17
76542: ST_TO_ADDR
76543: GO 76905
76545: LD_INT 17
76547: DOUBLE
76548: EQUAL
76549: IFTRUE 76553
76551: GO 76581
76553: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
76554: LD_ADDR_OWVAR 42
76558: PUSH
76559: LD_INT 19
76561: PUSH
76562: LD_INT 23
76564: PUSH
76565: LD_INT 19
76567: PUSH
76568: EMPTY
76569: LIST
76570: LIST
76571: LIST
76572: PUSH
76573: LD_VAR 0 1
76577: ARRAY
76578: ST_TO_ADDR
76579: GO 76905
76581: LD_INT 18
76583: DOUBLE
76584: EQUAL
76585: IFTRUE 76589
76587: GO 76600
76589: POP
// bc_type := b_ext_radar ; 19 :
76590: LD_ADDR_OWVAR 42
76594: PUSH
76595: LD_INT 20
76597: ST_TO_ADDR
76598: GO 76905
76600: LD_INT 19
76602: DOUBLE
76603: EQUAL
76604: IFTRUE 76608
76606: GO 76619
76608: POP
// bc_type := b_ext_radio ; 20 :
76609: LD_ADDR_OWVAR 42
76613: PUSH
76614: LD_INT 22
76616: ST_TO_ADDR
76617: GO 76905
76619: LD_INT 20
76621: DOUBLE
76622: EQUAL
76623: IFTRUE 76627
76625: GO 76638
76627: POP
// bc_type := b_ext_siberium ; 21 :
76628: LD_ADDR_OWVAR 42
76632: PUSH
76633: LD_INT 21
76635: ST_TO_ADDR
76636: GO 76905
76638: LD_INT 21
76640: DOUBLE
76641: EQUAL
76642: IFTRUE 76646
76644: GO 76657
76646: POP
// bc_type := b_ext_computer ; 22 :
76647: LD_ADDR_OWVAR 42
76651: PUSH
76652: LD_INT 24
76654: ST_TO_ADDR
76655: GO 76905
76657: LD_INT 22
76659: DOUBLE
76660: EQUAL
76661: IFTRUE 76665
76663: GO 76676
76665: POP
// bc_type := b_ext_track ; 23 :
76666: LD_ADDR_OWVAR 42
76670: PUSH
76671: LD_INT 16
76673: ST_TO_ADDR
76674: GO 76905
76676: LD_INT 23
76678: DOUBLE
76679: EQUAL
76680: IFTRUE 76684
76682: GO 76695
76684: POP
// bc_type := b_ext_laser ; 24 :
76685: LD_ADDR_OWVAR 42
76689: PUSH
76690: LD_INT 25
76692: ST_TO_ADDR
76693: GO 76905
76695: LD_INT 24
76697: DOUBLE
76698: EQUAL
76699: IFTRUE 76703
76701: GO 76714
76703: POP
// bc_type := b_control_tower ; 25 :
76704: LD_ADDR_OWVAR 42
76708: PUSH
76709: LD_INT 36
76711: ST_TO_ADDR
76712: GO 76905
76714: LD_INT 25
76716: DOUBLE
76717: EQUAL
76718: IFTRUE 76722
76720: GO 76733
76722: POP
// bc_type := b_breastwork ; 26 :
76723: LD_ADDR_OWVAR 42
76727: PUSH
76728: LD_INT 31
76730: ST_TO_ADDR
76731: GO 76905
76733: LD_INT 26
76735: DOUBLE
76736: EQUAL
76737: IFTRUE 76741
76739: GO 76752
76741: POP
// bc_type := b_bunker ; 27 :
76742: LD_ADDR_OWVAR 42
76746: PUSH
76747: LD_INT 32
76749: ST_TO_ADDR
76750: GO 76905
76752: LD_INT 27
76754: DOUBLE
76755: EQUAL
76756: IFTRUE 76760
76758: GO 76771
76760: POP
// bc_type := b_turret ; 28 :
76761: LD_ADDR_OWVAR 42
76765: PUSH
76766: LD_INT 33
76768: ST_TO_ADDR
76769: GO 76905
76771: LD_INT 28
76773: DOUBLE
76774: EQUAL
76775: IFTRUE 76779
76777: GO 76790
76779: POP
// bc_type := b_armoury ; 29 :
76780: LD_ADDR_OWVAR 42
76784: PUSH
76785: LD_INT 4
76787: ST_TO_ADDR
76788: GO 76905
76790: LD_INT 29
76792: DOUBLE
76793: EQUAL
76794: IFTRUE 76798
76796: GO 76809
76798: POP
// bc_type := b_barracks ; 30 :
76799: LD_ADDR_OWVAR 42
76803: PUSH
76804: LD_INT 5
76806: ST_TO_ADDR
76807: GO 76905
76809: LD_INT 30
76811: DOUBLE
76812: EQUAL
76813: IFTRUE 76817
76815: GO 76828
76817: POP
// bc_type := b_solar_power ; 31 :
76818: LD_ADDR_OWVAR 42
76822: PUSH
76823: LD_INT 27
76825: ST_TO_ADDR
76826: GO 76905
76828: LD_INT 31
76830: DOUBLE
76831: EQUAL
76832: IFTRUE 76836
76834: GO 76847
76836: POP
// bc_type := b_oil_power ; 32 :
76837: LD_ADDR_OWVAR 42
76841: PUSH
76842: LD_INT 26
76844: ST_TO_ADDR
76845: GO 76905
76847: LD_INT 32
76849: DOUBLE
76850: EQUAL
76851: IFTRUE 76855
76853: GO 76866
76855: POP
// bc_type := b_siberite_power ; 33 :
76856: LD_ADDR_OWVAR 42
76860: PUSH
76861: LD_INT 28
76863: ST_TO_ADDR
76864: GO 76905
76866: LD_INT 33
76868: DOUBLE
76869: EQUAL
76870: IFTRUE 76874
76872: GO 76885
76874: POP
// bc_type := b_oil_mine ; 34 :
76875: LD_ADDR_OWVAR 42
76879: PUSH
76880: LD_INT 29
76882: ST_TO_ADDR
76883: GO 76905
76885: LD_INT 34
76887: DOUBLE
76888: EQUAL
76889: IFTRUE 76893
76891: GO 76904
76893: POP
// bc_type := b_siberite_mine ; end ;
76894: LD_ADDR_OWVAR 42
76898: PUSH
76899: LD_INT 30
76901: ST_TO_ADDR
76902: GO 76905
76904: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
76905: LD_ADDR_VAR 0 8
76909: PUSH
76910: LD_VAR 0 5
76914: PPUSH
76915: LD_VAR 0 6
76919: PPUSH
76920: LD_VAR 0 3
76924: PPUSH
76925: CALL_OW 47
76929: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
76930: LD_OWVAR 42
76934: PUSH
76935: LD_INT 32
76937: PUSH
76938: LD_INT 33
76940: PUSH
76941: EMPTY
76942: LIST
76943: LIST
76944: IN
76945: IFFALSE 76961
// PlaceWeaponTurret ( b , weapon ) ;
76947: LD_VAR 0 8
76951: PPUSH
76952: LD_VAR 0 4
76956: PPUSH
76957: CALL_OW 431
// end ;
76961: LD_VAR 0 7
76965: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
76966: LD_INT 0
76968: PPUSH
76969: PPUSH
76970: PPUSH
76971: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
76972: LD_ADDR_VAR 0 4
76976: PUSH
76977: LD_INT 22
76979: PUSH
76980: LD_OWVAR 2
76984: PUSH
76985: EMPTY
76986: LIST
76987: LIST
76988: PUSH
76989: LD_INT 2
76991: PUSH
76992: LD_INT 30
76994: PUSH
76995: LD_INT 0
76997: PUSH
76998: EMPTY
76999: LIST
77000: LIST
77001: PUSH
77002: LD_INT 30
77004: PUSH
77005: LD_INT 1
77007: PUSH
77008: EMPTY
77009: LIST
77010: LIST
77011: PUSH
77012: EMPTY
77013: LIST
77014: LIST
77015: LIST
77016: PUSH
77017: EMPTY
77018: LIST
77019: LIST
77020: PPUSH
77021: CALL_OW 69
77025: ST_TO_ADDR
// if not tmp then
77026: LD_VAR 0 4
77030: NOT
77031: IFFALSE 77035
// exit ;
77033: GO 77094
// for i in tmp do
77035: LD_ADDR_VAR 0 2
77039: PUSH
77040: LD_VAR 0 4
77044: PUSH
77045: FOR_IN
77046: IFFALSE 77092
// for j = 1 to 3 do
77048: LD_ADDR_VAR 0 3
77052: PUSH
77053: DOUBLE
77054: LD_INT 1
77056: DEC
77057: ST_TO_ADDR
77058: LD_INT 3
77060: PUSH
77061: FOR_TO
77062: IFFALSE 77088
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
77064: LD_VAR 0 2
77068: PPUSH
77069: CALL_OW 274
77073: PPUSH
77074: LD_VAR 0 3
77078: PPUSH
77079: LD_INT 99999
77081: PPUSH
77082: CALL_OW 277
77086: GO 77061
77088: POP
77089: POP
77090: GO 77045
77092: POP
77093: POP
// end ;
77094: LD_VAR 0 1
77098: RET
// export function hHackSetLevel10 ; var i , j ; begin
77099: LD_INT 0
77101: PPUSH
77102: PPUSH
77103: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
77104: LD_ADDR_VAR 0 2
77108: PUSH
77109: LD_INT 21
77111: PUSH
77112: LD_INT 1
77114: PUSH
77115: EMPTY
77116: LIST
77117: LIST
77118: PPUSH
77119: CALL_OW 69
77123: PUSH
77124: FOR_IN
77125: IFFALSE 77177
// if IsSelected ( i ) then
77127: LD_VAR 0 2
77131: PPUSH
77132: CALL_OW 306
77136: IFFALSE 77175
// begin for j := 1 to 4 do
77138: LD_ADDR_VAR 0 3
77142: PUSH
77143: DOUBLE
77144: LD_INT 1
77146: DEC
77147: ST_TO_ADDR
77148: LD_INT 4
77150: PUSH
77151: FOR_TO
77152: IFFALSE 77173
// SetSkill ( i , j , 10 ) ;
77154: LD_VAR 0 2
77158: PPUSH
77159: LD_VAR 0 3
77163: PPUSH
77164: LD_INT 10
77166: PPUSH
77167: CALL_OW 237
77171: GO 77151
77173: POP
77174: POP
// end ;
77175: GO 77124
77177: POP
77178: POP
// end ;
77179: LD_VAR 0 1
77183: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
77184: LD_INT 0
77186: PPUSH
77187: PPUSH
77188: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
77189: LD_ADDR_VAR 0 2
77193: PUSH
77194: LD_INT 22
77196: PUSH
77197: LD_OWVAR 2
77201: PUSH
77202: EMPTY
77203: LIST
77204: LIST
77205: PUSH
77206: LD_INT 21
77208: PUSH
77209: LD_INT 1
77211: PUSH
77212: EMPTY
77213: LIST
77214: LIST
77215: PUSH
77216: EMPTY
77217: LIST
77218: LIST
77219: PPUSH
77220: CALL_OW 69
77224: PUSH
77225: FOR_IN
77226: IFFALSE 77267
// begin for j := 1 to 4 do
77228: LD_ADDR_VAR 0 3
77232: PUSH
77233: DOUBLE
77234: LD_INT 1
77236: DEC
77237: ST_TO_ADDR
77238: LD_INT 4
77240: PUSH
77241: FOR_TO
77242: IFFALSE 77263
// SetSkill ( i , j , 10 ) ;
77244: LD_VAR 0 2
77248: PPUSH
77249: LD_VAR 0 3
77253: PPUSH
77254: LD_INT 10
77256: PPUSH
77257: CALL_OW 237
77261: GO 77241
77263: POP
77264: POP
// end ;
77265: GO 77225
77267: POP
77268: POP
// end ;
77269: LD_VAR 0 1
77273: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
77274: LD_INT 0
77276: PPUSH
// uc_side := your_side ;
77277: LD_ADDR_OWVAR 20
77281: PUSH
77282: LD_OWVAR 2
77286: ST_TO_ADDR
// uc_nation := nation ;
77287: LD_ADDR_OWVAR 21
77291: PUSH
77292: LD_VAR 0 1
77296: ST_TO_ADDR
// InitHc ;
77297: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
77301: LD_INT 0
77303: PPUSH
77304: LD_VAR 0 2
77308: PPUSH
77309: LD_VAR 0 3
77313: PPUSH
77314: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
77318: LD_VAR 0 4
77322: PPUSH
77323: LD_VAR 0 5
77327: PPUSH
77328: CALL_OW 428
77332: PUSH
77333: LD_INT 0
77335: EQUAL
77336: IFFALSE 77360
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
77338: CALL_OW 44
77342: PPUSH
77343: LD_VAR 0 4
77347: PPUSH
77348: LD_VAR 0 5
77352: PPUSH
77353: LD_INT 1
77355: PPUSH
77356: CALL_OW 48
// end ;
77360: LD_VAR 0 6
77364: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
77365: LD_INT 0
77367: PPUSH
77368: PPUSH
// uc_side := your_side ;
77369: LD_ADDR_OWVAR 20
77373: PUSH
77374: LD_OWVAR 2
77378: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
77379: LD_VAR 0 1
77383: PUSH
77384: LD_INT 1
77386: PUSH
77387: LD_INT 2
77389: PUSH
77390: LD_INT 3
77392: PUSH
77393: LD_INT 4
77395: PUSH
77396: LD_INT 5
77398: PUSH
77399: EMPTY
77400: LIST
77401: LIST
77402: LIST
77403: LIST
77404: LIST
77405: IN
77406: IFFALSE 77418
// uc_nation := nation_american else
77408: LD_ADDR_OWVAR 21
77412: PUSH
77413: LD_INT 1
77415: ST_TO_ADDR
77416: GO 77461
// if chassis in [ 11 , 12 , 13 , 14 ] then
77418: LD_VAR 0 1
77422: PUSH
77423: LD_INT 11
77425: PUSH
77426: LD_INT 12
77428: PUSH
77429: LD_INT 13
77431: PUSH
77432: LD_INT 14
77434: PUSH
77435: EMPTY
77436: LIST
77437: LIST
77438: LIST
77439: LIST
77440: IN
77441: IFFALSE 77453
// uc_nation := nation_arabian else
77443: LD_ADDR_OWVAR 21
77447: PUSH
77448: LD_INT 2
77450: ST_TO_ADDR
77451: GO 77461
// uc_nation := nation_russian ;
77453: LD_ADDR_OWVAR 21
77457: PUSH
77458: LD_INT 3
77460: ST_TO_ADDR
// vc_chassis := chassis ;
77461: LD_ADDR_OWVAR 37
77465: PUSH
77466: LD_VAR 0 1
77470: ST_TO_ADDR
// vc_engine := engine ;
77471: LD_ADDR_OWVAR 39
77475: PUSH
77476: LD_VAR 0 2
77480: ST_TO_ADDR
// vc_control := control ;
77481: LD_ADDR_OWVAR 38
77485: PUSH
77486: LD_VAR 0 3
77490: ST_TO_ADDR
// vc_weapon := weapon ;
77491: LD_ADDR_OWVAR 40
77495: PUSH
77496: LD_VAR 0 4
77500: ST_TO_ADDR
// un := CreateVehicle ;
77501: LD_ADDR_VAR 0 8
77505: PUSH
77506: CALL_OW 45
77510: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
77511: LD_VAR 0 8
77515: PPUSH
77516: LD_INT 0
77518: PPUSH
77519: LD_INT 5
77521: PPUSH
77522: CALL_OW 12
77526: PPUSH
77527: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
77531: LD_VAR 0 8
77535: PPUSH
77536: LD_VAR 0 5
77540: PPUSH
77541: LD_VAR 0 6
77545: PPUSH
77546: LD_INT 1
77548: PPUSH
77549: CALL_OW 48
// end ;
77553: LD_VAR 0 7
77557: RET
// export hInvincible ; every 1 do
77558: GO 77560
77560: DISABLE
// hInvincible := [ ] ;
77561: LD_ADDR_EXP 104
77565: PUSH
77566: EMPTY
77567: ST_TO_ADDR
77568: END
// every 10 do var i ;
77569: GO 77571
77571: DISABLE
77572: LD_INT 0
77574: PPUSH
// begin enable ;
77575: ENABLE
// if not hInvincible then
77576: LD_EXP 104
77580: NOT
77581: IFFALSE 77585
// exit ;
77583: GO 77629
// for i in hInvincible do
77585: LD_ADDR_VAR 0 1
77589: PUSH
77590: LD_EXP 104
77594: PUSH
77595: FOR_IN
77596: IFFALSE 77627
// if GetLives ( i ) < 1000 then
77598: LD_VAR 0 1
77602: PPUSH
77603: CALL_OW 256
77607: PUSH
77608: LD_INT 1000
77610: LESS
77611: IFFALSE 77625
// SetLives ( i , 1000 ) ;
77613: LD_VAR 0 1
77617: PPUSH
77618: LD_INT 1000
77620: PPUSH
77621: CALL_OW 234
77625: GO 77595
77627: POP
77628: POP
// end ;
77629: PPOPN 1
77631: END
// export function hHackInvincible ; var i ; begin
77632: LD_INT 0
77634: PPUSH
77635: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
77636: LD_ADDR_VAR 0 2
77640: PUSH
77641: LD_INT 2
77643: PUSH
77644: LD_INT 21
77646: PUSH
77647: LD_INT 1
77649: PUSH
77650: EMPTY
77651: LIST
77652: LIST
77653: PUSH
77654: LD_INT 21
77656: PUSH
77657: LD_INT 2
77659: PUSH
77660: EMPTY
77661: LIST
77662: LIST
77663: PUSH
77664: EMPTY
77665: LIST
77666: LIST
77667: LIST
77668: PPUSH
77669: CALL_OW 69
77673: PUSH
77674: FOR_IN
77675: IFFALSE 77736
// if IsSelected ( i ) then
77677: LD_VAR 0 2
77681: PPUSH
77682: CALL_OW 306
77686: IFFALSE 77734
// begin if i in hInvincible then
77688: LD_VAR 0 2
77692: PUSH
77693: LD_EXP 104
77697: IN
77698: IFFALSE 77718
// hInvincible := hInvincible diff i else
77700: LD_ADDR_EXP 104
77704: PUSH
77705: LD_EXP 104
77709: PUSH
77710: LD_VAR 0 2
77714: DIFF
77715: ST_TO_ADDR
77716: GO 77734
// hInvincible := hInvincible union i ;
77718: LD_ADDR_EXP 104
77722: PUSH
77723: LD_EXP 104
77727: PUSH
77728: LD_VAR 0 2
77732: UNION
77733: ST_TO_ADDR
// end ;
77734: GO 77674
77736: POP
77737: POP
// end ;
77738: LD_VAR 0 1
77742: RET
// export function hHackInvisible ; var i , j ; begin
77743: LD_INT 0
77745: PPUSH
77746: PPUSH
77747: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
77748: LD_ADDR_VAR 0 2
77752: PUSH
77753: LD_INT 21
77755: PUSH
77756: LD_INT 1
77758: PUSH
77759: EMPTY
77760: LIST
77761: LIST
77762: PPUSH
77763: CALL_OW 69
77767: PUSH
77768: FOR_IN
77769: IFFALSE 77793
// if IsSelected ( i ) then
77771: LD_VAR 0 2
77775: PPUSH
77776: CALL_OW 306
77780: IFFALSE 77791
// ComForceInvisible ( i ) ;
77782: LD_VAR 0 2
77786: PPUSH
77787: CALL_OW 496
77791: GO 77768
77793: POP
77794: POP
// end ;
77795: LD_VAR 0 1
77799: RET
// export function hHackChangeYourSide ; begin
77800: LD_INT 0
77802: PPUSH
// if your_side = 8 then
77803: LD_OWVAR 2
77807: PUSH
77808: LD_INT 8
77810: EQUAL
77811: IFFALSE 77823
// your_side := 0 else
77813: LD_ADDR_OWVAR 2
77817: PUSH
77818: LD_INT 0
77820: ST_TO_ADDR
77821: GO 77837
// your_side := your_side + 1 ;
77823: LD_ADDR_OWVAR 2
77827: PUSH
77828: LD_OWVAR 2
77832: PUSH
77833: LD_INT 1
77835: PLUS
77836: ST_TO_ADDR
// end ;
77837: LD_VAR 0 1
77841: RET
// export function hHackChangeUnitSide ; var i , j ; begin
77842: LD_INT 0
77844: PPUSH
77845: PPUSH
77846: PPUSH
// for i in all_units do
77847: LD_ADDR_VAR 0 2
77851: PUSH
77852: LD_OWVAR 3
77856: PUSH
77857: FOR_IN
77858: IFFALSE 77936
// if IsSelected ( i ) then
77860: LD_VAR 0 2
77864: PPUSH
77865: CALL_OW 306
77869: IFFALSE 77934
// begin j := GetSide ( i ) ;
77871: LD_ADDR_VAR 0 3
77875: PUSH
77876: LD_VAR 0 2
77880: PPUSH
77881: CALL_OW 255
77885: ST_TO_ADDR
// if j = 8 then
77886: LD_VAR 0 3
77890: PUSH
77891: LD_INT 8
77893: EQUAL
77894: IFFALSE 77906
// j := 0 else
77896: LD_ADDR_VAR 0 3
77900: PUSH
77901: LD_INT 0
77903: ST_TO_ADDR
77904: GO 77920
// j := j + 1 ;
77906: LD_ADDR_VAR 0 3
77910: PUSH
77911: LD_VAR 0 3
77915: PUSH
77916: LD_INT 1
77918: PLUS
77919: ST_TO_ADDR
// SetSide ( i , j ) ;
77920: LD_VAR 0 2
77924: PPUSH
77925: LD_VAR 0 3
77929: PPUSH
77930: CALL_OW 235
// end ;
77934: GO 77857
77936: POP
77937: POP
// end ;
77938: LD_VAR 0 1
77942: RET
// export function hHackFog ; begin
77943: LD_INT 0
77945: PPUSH
// FogOff ( true ) ;
77946: LD_INT 1
77948: PPUSH
77949: CALL_OW 344
// end ;
77953: LD_VAR 0 1
77957: RET
// export function hHackTeleport ( unit , x , y ) ; begin
77958: LD_INT 0
77960: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
77961: LD_VAR 0 1
77965: PPUSH
77966: LD_VAR 0 2
77970: PPUSH
77971: LD_VAR 0 3
77975: PPUSH
77976: LD_INT 1
77978: PPUSH
77979: LD_INT 1
77981: PPUSH
77982: CALL_OW 483
// CenterOnXY ( x , y ) ;
77986: LD_VAR 0 2
77990: PPUSH
77991: LD_VAR 0 3
77995: PPUSH
77996: CALL_OW 84
// end ;
78000: LD_VAR 0 4
78004: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
78005: LD_INT 0
78007: PPUSH
78008: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
78009: LD_VAR 0 1
78013: NOT
78014: PUSH
78015: LD_VAR 0 2
78019: PPUSH
78020: LD_VAR 0 3
78024: PPUSH
78025: CALL_OW 488
78029: NOT
78030: OR
78031: PUSH
78032: LD_VAR 0 1
78036: PPUSH
78037: CALL_OW 266
78041: PUSH
78042: LD_INT 3
78044: NONEQUAL
78045: PUSH
78046: LD_VAR 0 1
78050: PPUSH
78051: CALL_OW 247
78055: PUSH
78056: LD_INT 1
78058: EQUAL
78059: NOT
78060: AND
78061: OR
78062: IFFALSE 78066
// exit ;
78064: GO 78215
// if GetType ( factory ) = unit_human then
78066: LD_VAR 0 1
78070: PPUSH
78071: CALL_OW 247
78075: PUSH
78076: LD_INT 1
78078: EQUAL
78079: IFFALSE 78096
// factory := IsInUnit ( factory ) ;
78081: LD_ADDR_VAR 0 1
78085: PUSH
78086: LD_VAR 0 1
78090: PPUSH
78091: CALL_OW 310
78095: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
78096: LD_VAR 0 1
78100: PPUSH
78101: CALL_OW 266
78105: PUSH
78106: LD_INT 3
78108: NONEQUAL
78109: IFFALSE 78113
// exit ;
78111: GO 78215
// if HexInfo ( x , y ) = factory then
78113: LD_VAR 0 2
78117: PPUSH
78118: LD_VAR 0 3
78122: PPUSH
78123: CALL_OW 428
78127: PUSH
78128: LD_VAR 0 1
78132: EQUAL
78133: IFFALSE 78160
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
78135: LD_ADDR_EXP 105
78139: PUSH
78140: LD_EXP 105
78144: PPUSH
78145: LD_VAR 0 1
78149: PPUSH
78150: LD_INT 0
78152: PPUSH
78153: CALL_OW 1
78157: ST_TO_ADDR
78158: GO 78211
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
78160: LD_ADDR_EXP 105
78164: PUSH
78165: LD_EXP 105
78169: PPUSH
78170: LD_VAR 0 1
78174: PPUSH
78175: LD_VAR 0 1
78179: PPUSH
78180: CALL_OW 255
78184: PUSH
78185: LD_VAR 0 1
78189: PUSH
78190: LD_VAR 0 2
78194: PUSH
78195: LD_VAR 0 3
78199: PUSH
78200: EMPTY
78201: LIST
78202: LIST
78203: LIST
78204: LIST
78205: PPUSH
78206: CALL_OW 1
78210: ST_TO_ADDR
// UpdateFactoryWaypoints ;
78211: CALL 78220 0 0
// end ;
78215: LD_VAR 0 4
78219: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
78220: LD_INT 0
78222: PPUSH
78223: PPUSH
78224: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
78225: LD_STRING resetFactoryWaypoint();
78227: PPUSH
78228: CALL_OW 559
// if factoryWaypoints then
78232: LD_EXP 105
78236: IFFALSE 78362
// begin list := PrepareArray ( factoryWaypoints ) ;
78238: LD_ADDR_VAR 0 3
78242: PUSH
78243: LD_EXP 105
78247: PPUSH
78248: CALL 62116 0 1
78252: ST_TO_ADDR
// for i := 1 to list do
78253: LD_ADDR_VAR 0 2
78257: PUSH
78258: DOUBLE
78259: LD_INT 1
78261: DEC
78262: ST_TO_ADDR
78263: LD_VAR 0 3
78267: PUSH
78268: FOR_TO
78269: IFFALSE 78360
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
78271: LD_STRING setFactoryWaypointXY(
78273: PUSH
78274: LD_VAR 0 3
78278: PUSH
78279: LD_VAR 0 2
78283: ARRAY
78284: PUSH
78285: LD_INT 1
78287: ARRAY
78288: STR
78289: PUSH
78290: LD_STRING ,
78292: STR
78293: PUSH
78294: LD_VAR 0 3
78298: PUSH
78299: LD_VAR 0 2
78303: ARRAY
78304: PUSH
78305: LD_INT 2
78307: ARRAY
78308: STR
78309: PUSH
78310: LD_STRING ,
78312: STR
78313: PUSH
78314: LD_VAR 0 3
78318: PUSH
78319: LD_VAR 0 2
78323: ARRAY
78324: PUSH
78325: LD_INT 3
78327: ARRAY
78328: STR
78329: PUSH
78330: LD_STRING ,
78332: STR
78333: PUSH
78334: LD_VAR 0 3
78338: PUSH
78339: LD_VAR 0 2
78343: ARRAY
78344: PUSH
78345: LD_INT 4
78347: ARRAY
78348: STR
78349: PUSH
78350: LD_STRING )
78352: STR
78353: PPUSH
78354: CALL_OW 559
78358: GO 78268
78360: POP
78361: POP
// end ; end ;
78362: LD_VAR 0 1
78366: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
78367: LD_INT 0
78369: PPUSH
// if HexInfo ( x , y ) = warehouse then
78370: LD_VAR 0 2
78374: PPUSH
78375: LD_VAR 0 3
78379: PPUSH
78380: CALL_OW 428
78384: PUSH
78385: LD_VAR 0 1
78389: EQUAL
78390: IFFALSE 78417
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
78392: LD_ADDR_EXP 106
78396: PUSH
78397: LD_EXP 106
78401: PPUSH
78402: LD_VAR 0 1
78406: PPUSH
78407: LD_INT 0
78409: PPUSH
78410: CALL_OW 1
78414: ST_TO_ADDR
78415: GO 78468
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
78417: LD_ADDR_EXP 106
78421: PUSH
78422: LD_EXP 106
78426: PPUSH
78427: LD_VAR 0 1
78431: PPUSH
78432: LD_VAR 0 1
78436: PPUSH
78437: CALL_OW 255
78441: PUSH
78442: LD_VAR 0 1
78446: PUSH
78447: LD_VAR 0 2
78451: PUSH
78452: LD_VAR 0 3
78456: PUSH
78457: EMPTY
78458: LIST
78459: LIST
78460: LIST
78461: LIST
78462: PPUSH
78463: CALL_OW 1
78467: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
78468: CALL 78477 0 0
// end ;
78472: LD_VAR 0 4
78476: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
78477: LD_INT 0
78479: PPUSH
78480: PPUSH
78481: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
78482: LD_STRING resetWarehouseGatheringPoints();
78484: PPUSH
78485: CALL_OW 559
// if warehouseGatheringPoints then
78489: LD_EXP 106
78493: IFFALSE 78619
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
78495: LD_ADDR_VAR 0 3
78499: PUSH
78500: LD_EXP 106
78504: PPUSH
78505: CALL 62116 0 1
78509: ST_TO_ADDR
// for i := 1 to list do
78510: LD_ADDR_VAR 0 2
78514: PUSH
78515: DOUBLE
78516: LD_INT 1
78518: DEC
78519: ST_TO_ADDR
78520: LD_VAR 0 3
78524: PUSH
78525: FOR_TO
78526: IFFALSE 78617
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
78528: LD_STRING setWarehouseGatheringPointXY(
78530: PUSH
78531: LD_VAR 0 3
78535: PUSH
78536: LD_VAR 0 2
78540: ARRAY
78541: PUSH
78542: LD_INT 1
78544: ARRAY
78545: STR
78546: PUSH
78547: LD_STRING ,
78549: STR
78550: PUSH
78551: LD_VAR 0 3
78555: PUSH
78556: LD_VAR 0 2
78560: ARRAY
78561: PUSH
78562: LD_INT 2
78564: ARRAY
78565: STR
78566: PUSH
78567: LD_STRING ,
78569: STR
78570: PUSH
78571: LD_VAR 0 3
78575: PUSH
78576: LD_VAR 0 2
78580: ARRAY
78581: PUSH
78582: LD_INT 3
78584: ARRAY
78585: STR
78586: PUSH
78587: LD_STRING ,
78589: STR
78590: PUSH
78591: LD_VAR 0 3
78595: PUSH
78596: LD_VAR 0 2
78600: ARRAY
78601: PUSH
78602: LD_INT 4
78604: ARRAY
78605: STR
78606: PUSH
78607: LD_STRING )
78609: STR
78610: PPUSH
78611: CALL_OW 559
78615: GO 78525
78617: POP
78618: POP
// end ; end ;
78619: LD_VAR 0 1
78623: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
78624: LD_EXP 106
78628: IFFALSE 79313
78630: GO 78632
78632: DISABLE
78633: LD_INT 0
78635: PPUSH
78636: PPUSH
78637: PPUSH
78638: PPUSH
78639: PPUSH
78640: PPUSH
78641: PPUSH
78642: PPUSH
78643: PPUSH
// begin enable ;
78644: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
78645: LD_ADDR_VAR 0 3
78649: PUSH
78650: LD_EXP 106
78654: PPUSH
78655: CALL 62116 0 1
78659: ST_TO_ADDR
// if not list then
78660: LD_VAR 0 3
78664: NOT
78665: IFFALSE 78669
// exit ;
78667: GO 79313
// for i := 1 to list do
78669: LD_ADDR_VAR 0 1
78673: PUSH
78674: DOUBLE
78675: LD_INT 1
78677: DEC
78678: ST_TO_ADDR
78679: LD_VAR 0 3
78683: PUSH
78684: FOR_TO
78685: IFFALSE 79311
// begin depot := list [ i ] [ 2 ] ;
78687: LD_ADDR_VAR 0 8
78691: PUSH
78692: LD_VAR 0 3
78696: PUSH
78697: LD_VAR 0 1
78701: ARRAY
78702: PUSH
78703: LD_INT 2
78705: ARRAY
78706: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
78707: LD_ADDR_VAR 0 5
78711: PUSH
78712: LD_VAR 0 3
78716: PUSH
78717: LD_VAR 0 1
78721: ARRAY
78722: PUSH
78723: LD_INT 1
78725: ARRAY
78726: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
78727: LD_VAR 0 8
78731: PPUSH
78732: CALL_OW 301
78736: PUSH
78737: LD_VAR 0 5
78741: PUSH
78742: LD_VAR 0 8
78746: PPUSH
78747: CALL_OW 255
78751: NONEQUAL
78752: OR
78753: IFFALSE 78782
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
78755: LD_ADDR_EXP 106
78759: PUSH
78760: LD_EXP 106
78764: PPUSH
78765: LD_VAR 0 8
78769: PPUSH
78770: LD_INT 0
78772: PPUSH
78773: CALL_OW 1
78777: ST_TO_ADDR
// exit ;
78778: POP
78779: POP
78780: GO 79313
// end ; x := list [ i ] [ 3 ] ;
78782: LD_ADDR_VAR 0 6
78786: PUSH
78787: LD_VAR 0 3
78791: PUSH
78792: LD_VAR 0 1
78796: ARRAY
78797: PUSH
78798: LD_INT 3
78800: ARRAY
78801: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
78802: LD_ADDR_VAR 0 7
78806: PUSH
78807: LD_VAR 0 3
78811: PUSH
78812: LD_VAR 0 1
78816: ARRAY
78817: PUSH
78818: LD_INT 4
78820: ARRAY
78821: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
78822: LD_ADDR_VAR 0 9
78826: PUSH
78827: LD_VAR 0 6
78831: PPUSH
78832: LD_VAR 0 7
78836: PPUSH
78837: LD_INT 16
78839: PPUSH
78840: CALL 60704 0 3
78844: ST_TO_ADDR
// if not cratesNearbyPoint then
78845: LD_VAR 0 9
78849: NOT
78850: IFFALSE 78856
// exit ;
78852: POP
78853: POP
78854: GO 79313
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
78856: LD_ADDR_VAR 0 4
78860: PUSH
78861: LD_INT 22
78863: PUSH
78864: LD_VAR 0 5
78868: PUSH
78869: EMPTY
78870: LIST
78871: LIST
78872: PUSH
78873: LD_INT 3
78875: PUSH
78876: LD_INT 60
78878: PUSH
78879: EMPTY
78880: LIST
78881: PUSH
78882: EMPTY
78883: LIST
78884: LIST
78885: PUSH
78886: LD_INT 91
78888: PUSH
78889: LD_VAR 0 8
78893: PUSH
78894: LD_INT 6
78896: PUSH
78897: EMPTY
78898: LIST
78899: LIST
78900: LIST
78901: PUSH
78902: LD_INT 2
78904: PUSH
78905: LD_INT 25
78907: PUSH
78908: LD_INT 2
78910: PUSH
78911: EMPTY
78912: LIST
78913: LIST
78914: PUSH
78915: LD_INT 25
78917: PUSH
78918: LD_INT 16
78920: PUSH
78921: EMPTY
78922: LIST
78923: LIST
78924: PUSH
78925: EMPTY
78926: LIST
78927: LIST
78928: LIST
78929: PUSH
78930: EMPTY
78931: LIST
78932: LIST
78933: LIST
78934: LIST
78935: PPUSH
78936: CALL_OW 69
78940: PUSH
78941: LD_VAR 0 8
78945: PPUSH
78946: CALL_OW 313
78950: PPUSH
78951: LD_INT 3
78953: PUSH
78954: LD_INT 60
78956: PUSH
78957: EMPTY
78958: LIST
78959: PUSH
78960: EMPTY
78961: LIST
78962: LIST
78963: PUSH
78964: LD_INT 2
78966: PUSH
78967: LD_INT 25
78969: PUSH
78970: LD_INT 2
78972: PUSH
78973: EMPTY
78974: LIST
78975: LIST
78976: PUSH
78977: LD_INT 25
78979: PUSH
78980: LD_INT 16
78982: PUSH
78983: EMPTY
78984: LIST
78985: LIST
78986: PUSH
78987: EMPTY
78988: LIST
78989: LIST
78990: LIST
78991: PUSH
78992: EMPTY
78993: LIST
78994: LIST
78995: PPUSH
78996: CALL_OW 72
79000: UNION
79001: ST_TO_ADDR
// if tmp then
79002: LD_VAR 0 4
79006: IFFALSE 79086
// begin tmp := ShrinkArray ( tmp , 3 ) ;
79008: LD_ADDR_VAR 0 4
79012: PUSH
79013: LD_VAR 0 4
79017: PPUSH
79018: LD_INT 3
79020: PPUSH
79021: CALL 58673 0 2
79025: ST_TO_ADDR
// for j in tmp do
79026: LD_ADDR_VAR 0 2
79030: PUSH
79031: LD_VAR 0 4
79035: PUSH
79036: FOR_IN
79037: IFFALSE 79080
// begin if IsInUnit ( j ) then
79039: LD_VAR 0 2
79043: PPUSH
79044: CALL_OW 310
79048: IFFALSE 79059
// ComExit ( j ) ;
79050: LD_VAR 0 2
79054: PPUSH
79055: CALL 58756 0 1
// AddComCollect ( j , x , y ) ;
79059: LD_VAR 0 2
79063: PPUSH
79064: LD_VAR 0 6
79068: PPUSH
79069: LD_VAR 0 7
79073: PPUSH
79074: CALL_OW 177
// end ;
79078: GO 79036
79080: POP
79081: POP
// exit ;
79082: POP
79083: POP
79084: GO 79313
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
79086: LD_ADDR_VAR 0 4
79090: PUSH
79091: LD_INT 22
79093: PUSH
79094: LD_VAR 0 5
79098: PUSH
79099: EMPTY
79100: LIST
79101: LIST
79102: PUSH
79103: LD_INT 91
79105: PUSH
79106: LD_VAR 0 8
79110: PUSH
79111: LD_INT 8
79113: PUSH
79114: EMPTY
79115: LIST
79116: LIST
79117: LIST
79118: PUSH
79119: LD_INT 2
79121: PUSH
79122: LD_INT 34
79124: PUSH
79125: LD_INT 12
79127: PUSH
79128: EMPTY
79129: LIST
79130: LIST
79131: PUSH
79132: LD_INT 34
79134: PUSH
79135: LD_INT 51
79137: PUSH
79138: EMPTY
79139: LIST
79140: LIST
79141: PUSH
79142: LD_INT 34
79144: PUSH
79145: LD_INT 32
79147: PUSH
79148: EMPTY
79149: LIST
79150: LIST
79151: PUSH
79152: LD_INT 34
79154: PUSH
79155: LD_INT 89
79157: PUSH
79158: EMPTY
79159: LIST
79160: LIST
79161: PUSH
79162: EMPTY
79163: LIST
79164: LIST
79165: LIST
79166: LIST
79167: LIST
79168: PUSH
79169: EMPTY
79170: LIST
79171: LIST
79172: LIST
79173: PPUSH
79174: CALL_OW 69
79178: ST_TO_ADDR
// if tmp then
79179: LD_VAR 0 4
79183: IFFALSE 79309
// begin for j in tmp do
79185: LD_ADDR_VAR 0 2
79189: PUSH
79190: LD_VAR 0 4
79194: PUSH
79195: FOR_IN
79196: IFFALSE 79307
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
79198: LD_VAR 0 2
79202: PPUSH
79203: CALL_OW 262
79207: PUSH
79208: LD_INT 3
79210: EQUAL
79211: PUSH
79212: LD_VAR 0 2
79216: PPUSH
79217: CALL_OW 261
79221: PUSH
79222: LD_INT 20
79224: GREATER
79225: OR
79226: PUSH
79227: LD_VAR 0 2
79231: PPUSH
79232: CALL_OW 314
79236: NOT
79237: AND
79238: PUSH
79239: LD_VAR 0 2
79243: PPUSH
79244: CALL_OW 263
79248: PUSH
79249: LD_INT 1
79251: NONEQUAL
79252: PUSH
79253: LD_VAR 0 2
79257: PPUSH
79258: CALL_OW 311
79262: OR
79263: AND
79264: IFFALSE 79305
// begin ComCollect ( j , x , y ) ;
79266: LD_VAR 0 2
79270: PPUSH
79271: LD_VAR 0 6
79275: PPUSH
79276: LD_VAR 0 7
79280: PPUSH
79281: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
79285: LD_VAR 0 2
79289: PPUSH
79290: LD_VAR 0 8
79294: PPUSH
79295: CALL_OW 172
// exit ;
79299: POP
79300: POP
79301: POP
79302: POP
79303: GO 79313
// end ;
79305: GO 79195
79307: POP
79308: POP
// end ; end ;
79309: GO 78684
79311: POP
79312: POP
// end ; end_of_file
79313: PPOPN 9
79315: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
79316: LD_VAR 0 1
79320: PUSH
79321: LD_INT 200
79323: DOUBLE
79324: GREATEREQUAL
79325: IFFALSE 79333
79327: LD_INT 299
79329: DOUBLE
79330: LESSEQUAL
79331: IFTRUE 79335
79333: GO 79367
79335: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
79336: LD_VAR 0 1
79340: PPUSH
79341: LD_VAR 0 2
79345: PPUSH
79346: LD_VAR 0 3
79350: PPUSH
79351: LD_VAR 0 4
79355: PPUSH
79356: LD_VAR 0 5
79360: PPUSH
79361: CALL 79855 0 5
79365: GO 79444
79367: LD_INT 300
79369: DOUBLE
79370: GREATEREQUAL
79371: IFFALSE 79379
79373: LD_INT 399
79375: DOUBLE
79376: LESSEQUAL
79377: IFTRUE 79381
79379: GO 79443
79381: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
79382: LD_VAR 0 1
79386: PPUSH
79387: LD_VAR 0 2
79391: PPUSH
79392: LD_VAR 0 3
79396: PPUSH
79397: LD_VAR 0 4
79401: PPUSH
79402: LD_VAR 0 5
79406: PPUSH
79407: LD_VAR 0 6
79411: PPUSH
79412: LD_VAR 0 7
79416: PPUSH
79417: LD_VAR 0 8
79421: PPUSH
79422: LD_VAR 0 9
79426: PPUSH
79427: LD_VAR 0 10
79431: PPUSH
79432: LD_VAR 0 11
79436: PPUSH
79437: CALL 76017 0 11
79441: GO 79444
79443: POP
// end ;
79444: PPOPN 11
79446: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
79447: LD_VAR 0 1
79451: PPUSH
79452: LD_VAR 0 2
79456: PPUSH
79457: LD_VAR 0 3
79461: PPUSH
79462: LD_VAR 0 4
79466: PPUSH
79467: LD_VAR 0 5
79471: PPUSH
79472: CALL 79591 0 5
// end ; end_of_file
79476: PPOPN 5
79478: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
79479: LD_INT 0
79481: PPUSH
79482: PPUSH
79483: PPUSH
79484: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
79485: LD_VAR 0 1
79489: PPUSH
79490: CALL_OW 264
79494: PUSH
79495: LD_INT 91
79497: EQUAL
79498: IFFALSE 79570
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
79500: LD_INT 68
79502: PPUSH
79503: LD_VAR 0 1
79507: PPUSH
79508: CALL_OW 255
79512: PPUSH
79513: CALL_OW 321
79517: PUSH
79518: LD_INT 2
79520: EQUAL
79521: IFFALSE 79533
// eff := 70 else
79523: LD_ADDR_VAR 0 4
79527: PUSH
79528: LD_INT 70
79530: ST_TO_ADDR
79531: GO 79541
// eff := 30 ;
79533: LD_ADDR_VAR 0 4
79537: PUSH
79538: LD_INT 30
79540: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
79541: LD_VAR 0 1
79545: PPUSH
79546: CALL_OW 250
79550: PPUSH
79551: LD_VAR 0 1
79555: PPUSH
79556: CALL_OW 251
79560: PPUSH
79561: LD_VAR 0 4
79565: PPUSH
79566: CALL_OW 495
// end ; end ;
79570: LD_VAR 0 2
79574: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
79575: LD_INT 0
79577: PPUSH
// end ;
79578: LD_VAR 0 4
79582: RET
// export function SOS_Command ( cmd ) ; begin
79583: LD_INT 0
79585: PPUSH
// end ;
79586: LD_VAR 0 2
79590: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
79591: LD_INT 0
79593: PPUSH
// end ;
79594: LD_VAR 0 6
79598: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
79599: LD_INT 0
79601: PPUSH
79602: PPUSH
// if not vehicle or not factory then
79603: LD_VAR 0 1
79607: NOT
79608: PUSH
79609: LD_VAR 0 2
79613: NOT
79614: OR
79615: IFFALSE 79619
// exit ;
79617: GO 79850
// if factoryWaypoints >= factory then
79619: LD_EXP 105
79623: PUSH
79624: LD_VAR 0 2
79628: GREATEREQUAL
79629: IFFALSE 79850
// if factoryWaypoints [ factory ] then
79631: LD_EXP 105
79635: PUSH
79636: LD_VAR 0 2
79640: ARRAY
79641: IFFALSE 79850
// begin if GetControl ( vehicle ) = control_manual then
79643: LD_VAR 0 1
79647: PPUSH
79648: CALL_OW 263
79652: PUSH
79653: LD_INT 1
79655: EQUAL
79656: IFFALSE 79737
// begin driver := IsDrivenBy ( vehicle ) ;
79658: LD_ADDR_VAR 0 4
79662: PUSH
79663: LD_VAR 0 1
79667: PPUSH
79668: CALL_OW 311
79672: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
79673: LD_VAR 0 4
79677: PPUSH
79678: LD_EXP 105
79682: PUSH
79683: LD_VAR 0 2
79687: ARRAY
79688: PUSH
79689: LD_INT 3
79691: ARRAY
79692: PPUSH
79693: LD_EXP 105
79697: PUSH
79698: LD_VAR 0 2
79702: ARRAY
79703: PUSH
79704: LD_INT 4
79706: ARRAY
79707: PPUSH
79708: CALL_OW 171
// AddComExitVehicle ( driver ) ;
79712: LD_VAR 0 4
79716: PPUSH
79717: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
79721: LD_VAR 0 4
79725: PPUSH
79726: LD_VAR 0 2
79730: PPUSH
79731: CALL_OW 180
// end else
79735: GO 79850
// if GetControl ( vehicle ) = control_remote then
79737: LD_VAR 0 1
79741: PPUSH
79742: CALL_OW 263
79746: PUSH
79747: LD_INT 2
79749: EQUAL
79750: IFFALSE 79811
// begin wait ( 0 0$2 ) ;
79752: LD_INT 70
79754: PPUSH
79755: CALL_OW 67
// if Connect ( vehicle ) then
79759: LD_VAR 0 1
79763: PPUSH
79764: CALL 28975 0 1
79768: IFFALSE 79809
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
79770: LD_VAR 0 1
79774: PPUSH
79775: LD_EXP 105
79779: PUSH
79780: LD_VAR 0 2
79784: ARRAY
79785: PUSH
79786: LD_INT 3
79788: ARRAY
79789: PPUSH
79790: LD_EXP 105
79794: PUSH
79795: LD_VAR 0 2
79799: ARRAY
79800: PUSH
79801: LD_INT 4
79803: ARRAY
79804: PPUSH
79805: CALL_OW 171
// end else
79809: GO 79850
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
79811: LD_VAR 0 1
79815: PPUSH
79816: LD_EXP 105
79820: PUSH
79821: LD_VAR 0 2
79825: ARRAY
79826: PUSH
79827: LD_INT 3
79829: ARRAY
79830: PPUSH
79831: LD_EXP 105
79835: PUSH
79836: LD_VAR 0 2
79840: ARRAY
79841: PUSH
79842: LD_INT 4
79844: ARRAY
79845: PPUSH
79846: CALL_OW 171
// end ; end ;
79850: LD_VAR 0 3
79854: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
79855: LD_INT 0
79857: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
79858: LD_VAR 0 1
79862: PUSH
79863: LD_INT 250
79865: EQUAL
79866: PUSH
79867: LD_VAR 0 2
79871: PPUSH
79872: CALL_OW 264
79876: PUSH
79877: LD_INT 81
79879: EQUAL
79880: AND
79881: IFFALSE 79902
// MinerPlaceMine ( unit , x , y ) ;
79883: LD_VAR 0 2
79887: PPUSH
79888: LD_VAR 0 4
79892: PPUSH
79893: LD_VAR 0 5
79897: PPUSH
79898: CALL 82892 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
79902: LD_VAR 0 1
79906: PUSH
79907: LD_INT 251
79909: EQUAL
79910: PUSH
79911: LD_VAR 0 2
79915: PPUSH
79916: CALL_OW 264
79920: PUSH
79921: LD_INT 81
79923: EQUAL
79924: AND
79925: IFFALSE 79946
// MinerDetonateMine ( unit , x , y ) ;
79927: LD_VAR 0 2
79931: PPUSH
79932: LD_VAR 0 4
79936: PPUSH
79937: LD_VAR 0 5
79941: PPUSH
79942: CALL 83167 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
79946: LD_VAR 0 1
79950: PUSH
79951: LD_INT 252
79953: EQUAL
79954: PUSH
79955: LD_VAR 0 2
79959: PPUSH
79960: CALL_OW 264
79964: PUSH
79965: LD_INT 81
79967: EQUAL
79968: AND
79969: IFFALSE 79990
// MinerCreateMinefield ( unit , x , y ) ;
79971: LD_VAR 0 2
79975: PPUSH
79976: LD_VAR 0 4
79980: PPUSH
79981: LD_VAR 0 5
79985: PPUSH
79986: CALL 83584 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
79990: LD_VAR 0 1
79994: PUSH
79995: LD_INT 253
79997: EQUAL
79998: PUSH
79999: LD_VAR 0 2
80003: PPUSH
80004: CALL_OW 257
80008: PUSH
80009: LD_INT 5
80011: EQUAL
80012: AND
80013: IFFALSE 80034
// ComBinocular ( unit , x , y ) ;
80015: LD_VAR 0 2
80019: PPUSH
80020: LD_VAR 0 4
80024: PPUSH
80025: LD_VAR 0 5
80029: PPUSH
80030: CALL 83953 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
80034: LD_VAR 0 1
80038: PUSH
80039: LD_INT 254
80041: EQUAL
80042: PUSH
80043: LD_VAR 0 2
80047: PPUSH
80048: CALL_OW 264
80052: PUSH
80053: LD_INT 99
80055: EQUAL
80056: AND
80057: PUSH
80058: LD_VAR 0 3
80062: PPUSH
80063: CALL_OW 263
80067: PUSH
80068: LD_INT 3
80070: EQUAL
80071: AND
80072: IFFALSE 80088
// HackDestroyVehicle ( unit , selectedUnit ) ;
80074: LD_VAR 0 2
80078: PPUSH
80079: LD_VAR 0 3
80083: PPUSH
80084: CALL 82256 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
80088: LD_VAR 0 1
80092: PUSH
80093: LD_INT 255
80095: EQUAL
80096: PUSH
80097: LD_VAR 0 2
80101: PPUSH
80102: CALL_OW 264
80106: PUSH
80107: LD_INT 14
80109: PUSH
80110: LD_INT 53
80112: PUSH
80113: EMPTY
80114: LIST
80115: LIST
80116: IN
80117: AND
80118: PUSH
80119: LD_VAR 0 4
80123: PPUSH
80124: LD_VAR 0 5
80128: PPUSH
80129: CALL_OW 488
80133: AND
80134: IFFALSE 80158
// CutTreeXYR ( unit , x , y , 12 ) ;
80136: LD_VAR 0 2
80140: PPUSH
80141: LD_VAR 0 4
80145: PPUSH
80146: LD_VAR 0 5
80150: PPUSH
80151: LD_INT 12
80153: PPUSH
80154: CALL 80253 0 4
// if cmd = 256 then
80158: LD_VAR 0 1
80162: PUSH
80163: LD_INT 256
80165: EQUAL
80166: IFFALSE 80187
// SetFactoryWaypoint ( unit , x , y ) ;
80168: LD_VAR 0 2
80172: PPUSH
80173: LD_VAR 0 4
80177: PPUSH
80178: LD_VAR 0 5
80182: PPUSH
80183: CALL 78005 0 3
// if cmd = 257 then
80187: LD_VAR 0 1
80191: PUSH
80192: LD_INT 257
80194: EQUAL
80195: IFFALSE 80216
// SetWarehouseGatheringPoint ( unit , x , y ) ;
80197: LD_VAR 0 2
80201: PPUSH
80202: LD_VAR 0 4
80206: PPUSH
80207: LD_VAR 0 5
80211: PPUSH
80212: CALL 78367 0 3
// if cmd = 258 then
80216: LD_VAR 0 1
80220: PUSH
80221: LD_INT 258
80223: EQUAL
80224: IFFALSE 80248
// BurnTreeXYR ( unit , x , y , 8 ) ;
80226: LD_VAR 0 2
80230: PPUSH
80231: LD_VAR 0 4
80235: PPUSH
80236: LD_VAR 0 5
80240: PPUSH
80241: LD_INT 8
80243: PPUSH
80244: CALL 80647 0 4
// end ;
80248: LD_VAR 0 6
80252: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
80253: LD_INT 0
80255: PPUSH
80256: PPUSH
80257: PPUSH
80258: PPUSH
80259: PPUSH
80260: PPUSH
80261: PPUSH
80262: PPUSH
80263: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
80264: LD_VAR 0 1
80268: PPUSH
80269: CALL_OW 302
80273: NOT
80274: PUSH
80275: LD_VAR 0 2
80279: PPUSH
80280: LD_VAR 0 3
80284: PPUSH
80285: CALL_OW 488
80289: NOT
80290: OR
80291: PUSH
80292: LD_VAR 0 4
80296: NOT
80297: OR
80298: IFFALSE 80302
// exit ;
80300: GO 80642
// list := [ ] ;
80302: LD_ADDR_VAR 0 13
80306: PUSH
80307: EMPTY
80308: ST_TO_ADDR
// if x - r < 0 then
80309: LD_VAR 0 2
80313: PUSH
80314: LD_VAR 0 4
80318: MINUS
80319: PUSH
80320: LD_INT 0
80322: LESS
80323: IFFALSE 80335
// min_x := 0 else
80325: LD_ADDR_VAR 0 7
80329: PUSH
80330: LD_INT 0
80332: ST_TO_ADDR
80333: GO 80351
// min_x := x - r ;
80335: LD_ADDR_VAR 0 7
80339: PUSH
80340: LD_VAR 0 2
80344: PUSH
80345: LD_VAR 0 4
80349: MINUS
80350: ST_TO_ADDR
// if y - r < 0 then
80351: LD_VAR 0 3
80355: PUSH
80356: LD_VAR 0 4
80360: MINUS
80361: PUSH
80362: LD_INT 0
80364: LESS
80365: IFFALSE 80377
// min_y := 0 else
80367: LD_ADDR_VAR 0 8
80371: PUSH
80372: LD_INT 0
80374: ST_TO_ADDR
80375: GO 80393
// min_y := y - r ;
80377: LD_ADDR_VAR 0 8
80381: PUSH
80382: LD_VAR 0 3
80386: PUSH
80387: LD_VAR 0 4
80391: MINUS
80392: ST_TO_ADDR
// max_x := x + r ;
80393: LD_ADDR_VAR 0 9
80397: PUSH
80398: LD_VAR 0 2
80402: PUSH
80403: LD_VAR 0 4
80407: PLUS
80408: ST_TO_ADDR
// max_y := y + r ;
80409: LD_ADDR_VAR 0 10
80413: PUSH
80414: LD_VAR 0 3
80418: PUSH
80419: LD_VAR 0 4
80423: PLUS
80424: ST_TO_ADDR
// for _x = min_x to max_x do
80425: LD_ADDR_VAR 0 11
80429: PUSH
80430: DOUBLE
80431: LD_VAR 0 7
80435: DEC
80436: ST_TO_ADDR
80437: LD_VAR 0 9
80441: PUSH
80442: FOR_TO
80443: IFFALSE 80560
// for _y = min_y to max_y do
80445: LD_ADDR_VAR 0 12
80449: PUSH
80450: DOUBLE
80451: LD_VAR 0 8
80455: DEC
80456: ST_TO_ADDR
80457: LD_VAR 0 10
80461: PUSH
80462: FOR_TO
80463: IFFALSE 80556
// begin if not ValidHex ( _x , _y ) then
80465: LD_VAR 0 11
80469: PPUSH
80470: LD_VAR 0 12
80474: PPUSH
80475: CALL_OW 488
80479: NOT
80480: IFFALSE 80484
// continue ;
80482: GO 80462
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
80484: LD_VAR 0 11
80488: PPUSH
80489: LD_VAR 0 12
80493: PPUSH
80494: CALL_OW 351
80498: PUSH
80499: LD_VAR 0 11
80503: PPUSH
80504: LD_VAR 0 12
80508: PPUSH
80509: CALL_OW 554
80513: AND
80514: IFFALSE 80554
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
80516: LD_ADDR_VAR 0 13
80520: PUSH
80521: LD_VAR 0 13
80525: PPUSH
80526: LD_VAR 0 13
80530: PUSH
80531: LD_INT 1
80533: PLUS
80534: PPUSH
80535: LD_VAR 0 11
80539: PUSH
80540: LD_VAR 0 12
80544: PUSH
80545: EMPTY
80546: LIST
80547: LIST
80548: PPUSH
80549: CALL_OW 2
80553: ST_TO_ADDR
// end ;
80554: GO 80462
80556: POP
80557: POP
80558: GO 80442
80560: POP
80561: POP
// if not list then
80562: LD_VAR 0 13
80566: NOT
80567: IFFALSE 80571
// exit ;
80569: GO 80642
// for i in list do
80571: LD_ADDR_VAR 0 6
80575: PUSH
80576: LD_VAR 0 13
80580: PUSH
80581: FOR_IN
80582: IFFALSE 80640
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
80584: LD_VAR 0 1
80588: PPUSH
80589: LD_STRING M
80591: PUSH
80592: LD_VAR 0 6
80596: PUSH
80597: LD_INT 1
80599: ARRAY
80600: PUSH
80601: LD_VAR 0 6
80605: PUSH
80606: LD_INT 2
80608: ARRAY
80609: PUSH
80610: LD_INT 0
80612: PUSH
80613: LD_INT 0
80615: PUSH
80616: LD_INT 0
80618: PUSH
80619: LD_INT 0
80621: PUSH
80622: EMPTY
80623: LIST
80624: LIST
80625: LIST
80626: LIST
80627: LIST
80628: LIST
80629: LIST
80630: PUSH
80631: EMPTY
80632: LIST
80633: PPUSH
80634: CALL_OW 447
80638: GO 80581
80640: POP
80641: POP
// end ;
80642: LD_VAR 0 5
80646: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
80647: LD_INT 0
80649: PPUSH
80650: PPUSH
80651: PPUSH
80652: PPUSH
80653: PPUSH
80654: PPUSH
80655: PPUSH
80656: PPUSH
80657: PPUSH
80658: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
80659: LD_VAR 0 1
80663: PPUSH
80664: CALL_OW 302
80668: NOT
80669: PUSH
80670: LD_VAR 0 2
80674: PPUSH
80675: LD_VAR 0 3
80679: PPUSH
80680: CALL_OW 488
80684: NOT
80685: OR
80686: PUSH
80687: LD_VAR 0 4
80691: NOT
80692: OR
80693: IFFALSE 80697
// exit ;
80695: GO 81210
// list := [ ] ;
80697: LD_ADDR_VAR 0 13
80701: PUSH
80702: EMPTY
80703: ST_TO_ADDR
// if x - r < 0 then
80704: LD_VAR 0 2
80708: PUSH
80709: LD_VAR 0 4
80713: MINUS
80714: PUSH
80715: LD_INT 0
80717: LESS
80718: IFFALSE 80730
// min_x := 0 else
80720: LD_ADDR_VAR 0 7
80724: PUSH
80725: LD_INT 0
80727: ST_TO_ADDR
80728: GO 80746
// min_x := x - r ;
80730: LD_ADDR_VAR 0 7
80734: PUSH
80735: LD_VAR 0 2
80739: PUSH
80740: LD_VAR 0 4
80744: MINUS
80745: ST_TO_ADDR
// if y - r < 0 then
80746: LD_VAR 0 3
80750: PUSH
80751: LD_VAR 0 4
80755: MINUS
80756: PUSH
80757: LD_INT 0
80759: LESS
80760: IFFALSE 80772
// min_y := 0 else
80762: LD_ADDR_VAR 0 8
80766: PUSH
80767: LD_INT 0
80769: ST_TO_ADDR
80770: GO 80788
// min_y := y - r ;
80772: LD_ADDR_VAR 0 8
80776: PUSH
80777: LD_VAR 0 3
80781: PUSH
80782: LD_VAR 0 4
80786: MINUS
80787: ST_TO_ADDR
// max_x := x + r ;
80788: LD_ADDR_VAR 0 9
80792: PUSH
80793: LD_VAR 0 2
80797: PUSH
80798: LD_VAR 0 4
80802: PLUS
80803: ST_TO_ADDR
// max_y := y + r ;
80804: LD_ADDR_VAR 0 10
80808: PUSH
80809: LD_VAR 0 3
80813: PUSH
80814: LD_VAR 0 4
80818: PLUS
80819: ST_TO_ADDR
// for _x = min_x to max_x do
80820: LD_ADDR_VAR 0 11
80824: PUSH
80825: DOUBLE
80826: LD_VAR 0 7
80830: DEC
80831: ST_TO_ADDR
80832: LD_VAR 0 9
80836: PUSH
80837: FOR_TO
80838: IFFALSE 80955
// for _y = min_y to max_y do
80840: LD_ADDR_VAR 0 12
80844: PUSH
80845: DOUBLE
80846: LD_VAR 0 8
80850: DEC
80851: ST_TO_ADDR
80852: LD_VAR 0 10
80856: PUSH
80857: FOR_TO
80858: IFFALSE 80951
// begin if not ValidHex ( _x , _y ) then
80860: LD_VAR 0 11
80864: PPUSH
80865: LD_VAR 0 12
80869: PPUSH
80870: CALL_OW 488
80874: NOT
80875: IFFALSE 80879
// continue ;
80877: GO 80857
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
80879: LD_VAR 0 11
80883: PPUSH
80884: LD_VAR 0 12
80888: PPUSH
80889: CALL_OW 351
80893: PUSH
80894: LD_VAR 0 11
80898: PPUSH
80899: LD_VAR 0 12
80903: PPUSH
80904: CALL_OW 554
80908: AND
80909: IFFALSE 80949
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
80911: LD_ADDR_VAR 0 13
80915: PUSH
80916: LD_VAR 0 13
80920: PPUSH
80921: LD_VAR 0 13
80925: PUSH
80926: LD_INT 1
80928: PLUS
80929: PPUSH
80930: LD_VAR 0 11
80934: PUSH
80935: LD_VAR 0 12
80939: PUSH
80940: EMPTY
80941: LIST
80942: LIST
80943: PPUSH
80944: CALL_OW 2
80948: ST_TO_ADDR
// end ;
80949: GO 80857
80951: POP
80952: POP
80953: GO 80837
80955: POP
80956: POP
// if not list then
80957: LD_VAR 0 13
80961: NOT
80962: IFFALSE 80966
// exit ;
80964: GO 81210
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
80966: LD_ADDR_VAR 0 13
80970: PUSH
80971: LD_VAR 0 1
80975: PPUSH
80976: LD_VAR 0 13
80980: PPUSH
80981: LD_INT 1
80983: PPUSH
80984: LD_INT 1
80986: PPUSH
80987: CALL 26117 0 4
80991: ST_TO_ADDR
// ComStop ( flame ) ;
80992: LD_VAR 0 1
80996: PPUSH
80997: CALL_OW 141
// for i in list do
81001: LD_ADDR_VAR 0 6
81005: PUSH
81006: LD_VAR 0 13
81010: PUSH
81011: FOR_IN
81012: IFFALSE 81043
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
81014: LD_VAR 0 1
81018: PPUSH
81019: LD_VAR 0 6
81023: PUSH
81024: LD_INT 1
81026: ARRAY
81027: PPUSH
81028: LD_VAR 0 6
81032: PUSH
81033: LD_INT 2
81035: ARRAY
81036: PPUSH
81037: CALL_OW 176
81041: GO 81011
81043: POP
81044: POP
// repeat wait ( 0 0$1 ) ;
81045: LD_INT 35
81047: PPUSH
81048: CALL_OW 67
// task := GetTaskList ( flame ) ;
81052: LD_ADDR_VAR 0 14
81056: PUSH
81057: LD_VAR 0 1
81061: PPUSH
81062: CALL_OW 437
81066: ST_TO_ADDR
// if not task then
81067: LD_VAR 0 14
81071: NOT
81072: IFFALSE 81076
// exit ;
81074: GO 81210
// if task [ 1 ] [ 1 ] <> | then
81076: LD_VAR 0 14
81080: PUSH
81081: LD_INT 1
81083: ARRAY
81084: PUSH
81085: LD_INT 1
81087: ARRAY
81088: PUSH
81089: LD_STRING |
81091: NONEQUAL
81092: IFFALSE 81096
// exit ;
81094: GO 81210
// _x := task [ 1 ] [ 2 ] ;
81096: LD_ADDR_VAR 0 11
81100: PUSH
81101: LD_VAR 0 14
81105: PUSH
81106: LD_INT 1
81108: ARRAY
81109: PUSH
81110: LD_INT 2
81112: ARRAY
81113: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
81114: LD_ADDR_VAR 0 12
81118: PUSH
81119: LD_VAR 0 14
81123: PUSH
81124: LD_INT 1
81126: ARRAY
81127: PUSH
81128: LD_INT 3
81130: ARRAY
81131: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
81132: LD_VAR 0 11
81136: PPUSH
81137: LD_VAR 0 12
81141: PPUSH
81142: CALL_OW 351
81146: NOT
81147: PUSH
81148: LD_VAR 0 11
81152: PPUSH
81153: LD_VAR 0 12
81157: PPUSH
81158: CALL_OW 554
81162: NOT
81163: OR
81164: IFFALSE 81198
// begin task := Delete ( task , 1 ) ;
81166: LD_ADDR_VAR 0 14
81170: PUSH
81171: LD_VAR 0 14
81175: PPUSH
81176: LD_INT 1
81178: PPUSH
81179: CALL_OW 3
81183: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
81184: LD_VAR 0 1
81188: PPUSH
81189: LD_VAR 0 14
81193: PPUSH
81194: CALL_OW 446
// end ; until not HasTask ( flame ) ;
81198: LD_VAR 0 1
81202: PPUSH
81203: CALL_OW 314
81207: NOT
81208: IFFALSE 81045
// end ;
81210: LD_VAR 0 5
81214: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
81215: LD_EXP 108
81219: NOT
81220: IFFALSE 81270
81222: GO 81224
81224: DISABLE
// begin initHack := true ;
81225: LD_ADDR_EXP 108
81229: PUSH
81230: LD_INT 1
81232: ST_TO_ADDR
// hackTanks := [ ] ;
81233: LD_ADDR_EXP 109
81237: PUSH
81238: EMPTY
81239: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
81240: LD_ADDR_EXP 110
81244: PUSH
81245: EMPTY
81246: ST_TO_ADDR
// hackLimit := 3 ;
81247: LD_ADDR_EXP 111
81251: PUSH
81252: LD_INT 3
81254: ST_TO_ADDR
// hackDist := 12 ;
81255: LD_ADDR_EXP 112
81259: PUSH
81260: LD_INT 12
81262: ST_TO_ADDR
// hackCounter := [ ] ;
81263: LD_ADDR_EXP 113
81267: PUSH
81268: EMPTY
81269: ST_TO_ADDR
// end ;
81270: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
81271: LD_EXP 108
81275: PUSH
81276: LD_INT 34
81278: PUSH
81279: LD_INT 99
81281: PUSH
81282: EMPTY
81283: LIST
81284: LIST
81285: PPUSH
81286: CALL_OW 69
81290: AND
81291: IFFALSE 81544
81293: GO 81295
81295: DISABLE
81296: LD_INT 0
81298: PPUSH
81299: PPUSH
// begin enable ;
81300: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
81301: LD_ADDR_VAR 0 1
81305: PUSH
81306: LD_INT 34
81308: PUSH
81309: LD_INT 99
81311: PUSH
81312: EMPTY
81313: LIST
81314: LIST
81315: PPUSH
81316: CALL_OW 69
81320: PUSH
81321: FOR_IN
81322: IFFALSE 81542
// begin if not i in hackTanks then
81324: LD_VAR 0 1
81328: PUSH
81329: LD_EXP 109
81333: IN
81334: NOT
81335: IFFALSE 81418
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
81337: LD_ADDR_EXP 109
81341: PUSH
81342: LD_EXP 109
81346: PPUSH
81347: LD_EXP 109
81351: PUSH
81352: LD_INT 1
81354: PLUS
81355: PPUSH
81356: LD_VAR 0 1
81360: PPUSH
81361: CALL_OW 1
81365: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
81366: LD_ADDR_EXP 110
81370: PUSH
81371: LD_EXP 110
81375: PPUSH
81376: LD_EXP 110
81380: PUSH
81381: LD_INT 1
81383: PLUS
81384: PPUSH
81385: EMPTY
81386: PPUSH
81387: CALL_OW 1
81391: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
81392: LD_ADDR_EXP 113
81396: PUSH
81397: LD_EXP 113
81401: PPUSH
81402: LD_EXP 113
81406: PUSH
81407: LD_INT 1
81409: PLUS
81410: PPUSH
81411: EMPTY
81412: PPUSH
81413: CALL_OW 1
81417: ST_TO_ADDR
// end ; if not IsOk ( i ) then
81418: LD_VAR 0 1
81422: PPUSH
81423: CALL_OW 302
81427: NOT
81428: IFFALSE 81441
// begin HackUnlinkAll ( i ) ;
81430: LD_VAR 0 1
81434: PPUSH
81435: CALL 81547 0 1
// continue ;
81439: GO 81321
// end ; HackCheckCapturedStatus ( i ) ;
81441: LD_VAR 0 1
81445: PPUSH
81446: CALL 81990 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
81450: LD_ADDR_VAR 0 2
81454: PUSH
81455: LD_INT 81
81457: PUSH
81458: LD_VAR 0 1
81462: PPUSH
81463: CALL_OW 255
81467: PUSH
81468: EMPTY
81469: LIST
81470: LIST
81471: PUSH
81472: LD_INT 33
81474: PUSH
81475: LD_INT 3
81477: PUSH
81478: EMPTY
81479: LIST
81480: LIST
81481: PUSH
81482: LD_INT 91
81484: PUSH
81485: LD_VAR 0 1
81489: PUSH
81490: LD_EXP 112
81494: PUSH
81495: EMPTY
81496: LIST
81497: LIST
81498: LIST
81499: PUSH
81500: LD_INT 50
81502: PUSH
81503: EMPTY
81504: LIST
81505: PUSH
81506: EMPTY
81507: LIST
81508: LIST
81509: LIST
81510: LIST
81511: PPUSH
81512: CALL_OW 69
81516: ST_TO_ADDR
// if not tmp then
81517: LD_VAR 0 2
81521: NOT
81522: IFFALSE 81526
// continue ;
81524: GO 81321
// HackLink ( i , tmp ) ;
81526: LD_VAR 0 1
81530: PPUSH
81531: LD_VAR 0 2
81535: PPUSH
81536: CALL 81683 0 2
// end ;
81540: GO 81321
81542: POP
81543: POP
// end ;
81544: PPOPN 2
81546: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
81547: LD_INT 0
81549: PPUSH
81550: PPUSH
81551: PPUSH
// if not hack in hackTanks then
81552: LD_VAR 0 1
81556: PUSH
81557: LD_EXP 109
81561: IN
81562: NOT
81563: IFFALSE 81567
// exit ;
81565: GO 81678
// index := GetElementIndex ( hackTanks , hack ) ;
81567: LD_ADDR_VAR 0 4
81571: PUSH
81572: LD_EXP 109
81576: PPUSH
81577: LD_VAR 0 1
81581: PPUSH
81582: CALL 25414 0 2
81586: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
81587: LD_EXP 110
81591: PUSH
81592: LD_VAR 0 4
81596: ARRAY
81597: IFFALSE 81678
// begin for i in hackTanksCaptured [ index ] do
81599: LD_ADDR_VAR 0 3
81603: PUSH
81604: LD_EXP 110
81608: PUSH
81609: LD_VAR 0 4
81613: ARRAY
81614: PUSH
81615: FOR_IN
81616: IFFALSE 81642
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
81618: LD_VAR 0 3
81622: PUSH
81623: LD_INT 1
81625: ARRAY
81626: PPUSH
81627: LD_VAR 0 3
81631: PUSH
81632: LD_INT 2
81634: ARRAY
81635: PPUSH
81636: CALL_OW 235
81640: GO 81615
81642: POP
81643: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
81644: LD_ADDR_EXP 110
81648: PUSH
81649: LD_EXP 110
81653: PPUSH
81654: LD_VAR 0 4
81658: PPUSH
81659: EMPTY
81660: PPUSH
81661: CALL_OW 1
81665: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
81666: LD_VAR 0 1
81670: PPUSH
81671: LD_INT 0
81673: PPUSH
81674: CALL_OW 505
// end ; end ;
81678: LD_VAR 0 2
81682: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
81683: LD_INT 0
81685: PPUSH
81686: PPUSH
81687: PPUSH
// if not hack in hackTanks or not vehicles then
81688: LD_VAR 0 1
81692: PUSH
81693: LD_EXP 109
81697: IN
81698: NOT
81699: PUSH
81700: LD_VAR 0 2
81704: NOT
81705: OR
81706: IFFALSE 81710
// exit ;
81708: GO 81985
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
81710: LD_ADDR_VAR 0 2
81714: PUSH
81715: LD_VAR 0 1
81719: PPUSH
81720: LD_VAR 0 2
81724: PPUSH
81725: LD_INT 1
81727: PPUSH
81728: LD_INT 1
81730: PPUSH
81731: CALL 26064 0 4
81735: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
81736: LD_ADDR_VAR 0 5
81740: PUSH
81741: LD_EXP 109
81745: PPUSH
81746: LD_VAR 0 1
81750: PPUSH
81751: CALL 25414 0 2
81755: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
81756: LD_EXP 110
81760: PUSH
81761: LD_VAR 0 5
81765: ARRAY
81766: PUSH
81767: LD_EXP 111
81771: LESS
81772: IFFALSE 81961
// begin for i := 1 to vehicles do
81774: LD_ADDR_VAR 0 4
81778: PUSH
81779: DOUBLE
81780: LD_INT 1
81782: DEC
81783: ST_TO_ADDR
81784: LD_VAR 0 2
81788: PUSH
81789: FOR_TO
81790: IFFALSE 81959
// begin if hackTanksCaptured [ index ] = hackLimit then
81792: LD_EXP 110
81796: PUSH
81797: LD_VAR 0 5
81801: ARRAY
81802: PUSH
81803: LD_EXP 111
81807: EQUAL
81808: IFFALSE 81812
// break ;
81810: GO 81959
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
81812: LD_ADDR_EXP 113
81816: PUSH
81817: LD_EXP 113
81821: PPUSH
81822: LD_VAR 0 5
81826: PPUSH
81827: LD_EXP 113
81831: PUSH
81832: LD_VAR 0 5
81836: ARRAY
81837: PUSH
81838: LD_INT 1
81840: PLUS
81841: PPUSH
81842: CALL_OW 1
81846: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
81847: LD_ADDR_EXP 110
81851: PUSH
81852: LD_EXP 110
81856: PPUSH
81857: LD_VAR 0 5
81861: PUSH
81862: LD_EXP 110
81866: PUSH
81867: LD_VAR 0 5
81871: ARRAY
81872: PUSH
81873: LD_INT 1
81875: PLUS
81876: PUSH
81877: EMPTY
81878: LIST
81879: LIST
81880: PPUSH
81881: LD_VAR 0 2
81885: PUSH
81886: LD_VAR 0 4
81890: ARRAY
81891: PUSH
81892: LD_VAR 0 2
81896: PUSH
81897: LD_VAR 0 4
81901: ARRAY
81902: PPUSH
81903: CALL_OW 255
81907: PUSH
81908: EMPTY
81909: LIST
81910: LIST
81911: PPUSH
81912: CALL 25629 0 3
81916: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
81917: LD_VAR 0 2
81921: PUSH
81922: LD_VAR 0 4
81926: ARRAY
81927: PPUSH
81928: LD_VAR 0 1
81932: PPUSH
81933: CALL_OW 255
81937: PPUSH
81938: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
81942: LD_VAR 0 2
81946: PUSH
81947: LD_VAR 0 4
81951: ARRAY
81952: PPUSH
81953: CALL_OW 141
// end ;
81957: GO 81789
81959: POP
81960: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
81961: LD_VAR 0 1
81965: PPUSH
81966: LD_EXP 110
81970: PUSH
81971: LD_VAR 0 5
81975: ARRAY
81976: PUSH
81977: LD_INT 0
81979: PLUS
81980: PPUSH
81981: CALL_OW 505
// end ;
81985: LD_VAR 0 3
81989: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
81990: LD_INT 0
81992: PPUSH
81993: PPUSH
81994: PPUSH
81995: PPUSH
// if not hack in hackTanks then
81996: LD_VAR 0 1
82000: PUSH
82001: LD_EXP 109
82005: IN
82006: NOT
82007: IFFALSE 82011
// exit ;
82009: GO 82251
// index := GetElementIndex ( hackTanks , hack ) ;
82011: LD_ADDR_VAR 0 4
82015: PUSH
82016: LD_EXP 109
82020: PPUSH
82021: LD_VAR 0 1
82025: PPUSH
82026: CALL 25414 0 2
82030: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
82031: LD_ADDR_VAR 0 3
82035: PUSH
82036: DOUBLE
82037: LD_EXP 110
82041: PUSH
82042: LD_VAR 0 4
82046: ARRAY
82047: INC
82048: ST_TO_ADDR
82049: LD_INT 1
82051: PUSH
82052: FOR_DOWNTO
82053: IFFALSE 82225
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
82055: LD_ADDR_VAR 0 5
82059: PUSH
82060: LD_EXP 110
82064: PUSH
82065: LD_VAR 0 4
82069: ARRAY
82070: PUSH
82071: LD_VAR 0 3
82075: ARRAY
82076: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
82077: LD_VAR 0 5
82081: PUSH
82082: LD_INT 1
82084: ARRAY
82085: PPUSH
82086: CALL_OW 302
82090: NOT
82091: PUSH
82092: LD_VAR 0 5
82096: PUSH
82097: LD_INT 1
82099: ARRAY
82100: PPUSH
82101: CALL_OW 255
82105: PUSH
82106: LD_VAR 0 1
82110: PPUSH
82111: CALL_OW 255
82115: NONEQUAL
82116: OR
82117: IFFALSE 82223
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
82119: LD_VAR 0 5
82123: PUSH
82124: LD_INT 1
82126: ARRAY
82127: PPUSH
82128: CALL_OW 305
82132: PUSH
82133: LD_VAR 0 5
82137: PUSH
82138: LD_INT 1
82140: ARRAY
82141: PPUSH
82142: CALL_OW 255
82146: PUSH
82147: LD_VAR 0 1
82151: PPUSH
82152: CALL_OW 255
82156: EQUAL
82157: AND
82158: IFFALSE 82182
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
82160: LD_VAR 0 5
82164: PUSH
82165: LD_INT 1
82167: ARRAY
82168: PPUSH
82169: LD_VAR 0 5
82173: PUSH
82174: LD_INT 2
82176: ARRAY
82177: PPUSH
82178: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
82182: LD_ADDR_EXP 110
82186: PUSH
82187: LD_EXP 110
82191: PPUSH
82192: LD_VAR 0 4
82196: PPUSH
82197: LD_EXP 110
82201: PUSH
82202: LD_VAR 0 4
82206: ARRAY
82207: PPUSH
82208: LD_VAR 0 3
82212: PPUSH
82213: CALL_OW 3
82217: PPUSH
82218: CALL_OW 1
82222: ST_TO_ADDR
// end ; end ;
82223: GO 82052
82225: POP
82226: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
82227: LD_VAR 0 1
82231: PPUSH
82232: LD_EXP 110
82236: PUSH
82237: LD_VAR 0 4
82241: ARRAY
82242: PUSH
82243: LD_INT 0
82245: PLUS
82246: PPUSH
82247: CALL_OW 505
// end ;
82251: LD_VAR 0 2
82255: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
82256: LD_INT 0
82258: PPUSH
82259: PPUSH
82260: PPUSH
82261: PPUSH
// if not hack in hackTanks then
82262: LD_VAR 0 1
82266: PUSH
82267: LD_EXP 109
82271: IN
82272: NOT
82273: IFFALSE 82277
// exit ;
82275: GO 82362
// index := GetElementIndex ( hackTanks , hack ) ;
82277: LD_ADDR_VAR 0 5
82281: PUSH
82282: LD_EXP 109
82286: PPUSH
82287: LD_VAR 0 1
82291: PPUSH
82292: CALL 25414 0 2
82296: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
82297: LD_ADDR_VAR 0 4
82301: PUSH
82302: DOUBLE
82303: LD_INT 1
82305: DEC
82306: ST_TO_ADDR
82307: LD_EXP 110
82311: PUSH
82312: LD_VAR 0 5
82316: ARRAY
82317: PUSH
82318: FOR_TO
82319: IFFALSE 82360
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
82321: LD_EXP 110
82325: PUSH
82326: LD_VAR 0 5
82330: ARRAY
82331: PUSH
82332: LD_VAR 0 4
82336: ARRAY
82337: PUSH
82338: LD_INT 1
82340: ARRAY
82341: PUSH
82342: LD_VAR 0 2
82346: EQUAL
82347: IFFALSE 82358
// KillUnit ( vehicle ) ;
82349: LD_VAR 0 2
82353: PPUSH
82354: CALL_OW 66
82358: GO 82318
82360: POP
82361: POP
// end ;
82362: LD_VAR 0 3
82366: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
82367: LD_EXP 114
82371: NOT
82372: IFFALSE 82407
82374: GO 82376
82376: DISABLE
// begin initMiner := true ;
82377: LD_ADDR_EXP 114
82381: PUSH
82382: LD_INT 1
82384: ST_TO_ADDR
// minersList := [ ] ;
82385: LD_ADDR_EXP 115
82389: PUSH
82390: EMPTY
82391: ST_TO_ADDR
// minerMinesList := [ ] ;
82392: LD_ADDR_EXP 116
82396: PUSH
82397: EMPTY
82398: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
82399: LD_ADDR_EXP 117
82403: PUSH
82404: LD_INT 5
82406: ST_TO_ADDR
// end ;
82407: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
82408: LD_EXP 114
82412: PUSH
82413: LD_INT 34
82415: PUSH
82416: LD_INT 81
82418: PUSH
82419: EMPTY
82420: LIST
82421: LIST
82422: PPUSH
82423: CALL_OW 69
82427: AND
82428: IFFALSE 82889
82430: GO 82432
82432: DISABLE
82433: LD_INT 0
82435: PPUSH
82436: PPUSH
82437: PPUSH
82438: PPUSH
// begin enable ;
82439: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
82440: LD_ADDR_VAR 0 1
82444: PUSH
82445: LD_INT 34
82447: PUSH
82448: LD_INT 81
82450: PUSH
82451: EMPTY
82452: LIST
82453: LIST
82454: PPUSH
82455: CALL_OW 69
82459: PUSH
82460: FOR_IN
82461: IFFALSE 82533
// begin if not i in minersList then
82463: LD_VAR 0 1
82467: PUSH
82468: LD_EXP 115
82472: IN
82473: NOT
82474: IFFALSE 82531
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
82476: LD_ADDR_EXP 115
82480: PUSH
82481: LD_EXP 115
82485: PPUSH
82486: LD_EXP 115
82490: PUSH
82491: LD_INT 1
82493: PLUS
82494: PPUSH
82495: LD_VAR 0 1
82499: PPUSH
82500: CALL_OW 1
82504: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
82505: LD_ADDR_EXP 116
82509: PUSH
82510: LD_EXP 116
82514: PPUSH
82515: LD_EXP 116
82519: PUSH
82520: LD_INT 1
82522: PLUS
82523: PPUSH
82524: EMPTY
82525: PPUSH
82526: CALL_OW 1
82530: ST_TO_ADDR
// end end ;
82531: GO 82460
82533: POP
82534: POP
// for i := minerMinesList downto 1 do
82535: LD_ADDR_VAR 0 1
82539: PUSH
82540: DOUBLE
82541: LD_EXP 116
82545: INC
82546: ST_TO_ADDR
82547: LD_INT 1
82549: PUSH
82550: FOR_DOWNTO
82551: IFFALSE 82887
// begin if IsLive ( minersList [ i ] ) then
82553: LD_EXP 115
82557: PUSH
82558: LD_VAR 0 1
82562: ARRAY
82563: PPUSH
82564: CALL_OW 300
82568: IFFALSE 82596
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
82570: LD_EXP 115
82574: PUSH
82575: LD_VAR 0 1
82579: ARRAY
82580: PPUSH
82581: LD_EXP 116
82585: PUSH
82586: LD_VAR 0 1
82590: ARRAY
82591: PPUSH
82592: CALL_OW 505
// if not minerMinesList [ i ] then
82596: LD_EXP 116
82600: PUSH
82601: LD_VAR 0 1
82605: ARRAY
82606: NOT
82607: IFFALSE 82611
// continue ;
82609: GO 82550
// for j := minerMinesList [ i ] downto 1 do
82611: LD_ADDR_VAR 0 2
82615: PUSH
82616: DOUBLE
82617: LD_EXP 116
82621: PUSH
82622: LD_VAR 0 1
82626: ARRAY
82627: INC
82628: ST_TO_ADDR
82629: LD_INT 1
82631: PUSH
82632: FOR_DOWNTO
82633: IFFALSE 82883
// begin side := GetSide ( minersList [ i ] ) ;
82635: LD_ADDR_VAR 0 3
82639: PUSH
82640: LD_EXP 115
82644: PUSH
82645: LD_VAR 0 1
82649: ARRAY
82650: PPUSH
82651: CALL_OW 255
82655: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
82656: LD_ADDR_VAR 0 4
82660: PUSH
82661: LD_EXP 116
82665: PUSH
82666: LD_VAR 0 1
82670: ARRAY
82671: PUSH
82672: LD_VAR 0 2
82676: ARRAY
82677: PUSH
82678: LD_INT 1
82680: ARRAY
82681: PPUSH
82682: LD_EXP 116
82686: PUSH
82687: LD_VAR 0 1
82691: ARRAY
82692: PUSH
82693: LD_VAR 0 2
82697: ARRAY
82698: PUSH
82699: LD_INT 2
82701: ARRAY
82702: PPUSH
82703: CALL_OW 428
82707: ST_TO_ADDR
// if not tmp then
82708: LD_VAR 0 4
82712: NOT
82713: IFFALSE 82717
// continue ;
82715: GO 82632
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
82717: LD_VAR 0 4
82721: PUSH
82722: LD_INT 81
82724: PUSH
82725: LD_VAR 0 3
82729: PUSH
82730: EMPTY
82731: LIST
82732: LIST
82733: PPUSH
82734: CALL_OW 69
82738: IN
82739: PUSH
82740: LD_EXP 116
82744: PUSH
82745: LD_VAR 0 1
82749: ARRAY
82750: PUSH
82751: LD_VAR 0 2
82755: ARRAY
82756: PUSH
82757: LD_INT 1
82759: ARRAY
82760: PPUSH
82761: LD_EXP 116
82765: PUSH
82766: LD_VAR 0 1
82770: ARRAY
82771: PUSH
82772: LD_VAR 0 2
82776: ARRAY
82777: PUSH
82778: LD_INT 2
82780: ARRAY
82781: PPUSH
82782: CALL_OW 458
82786: AND
82787: IFFALSE 82881
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
82789: LD_EXP 116
82793: PUSH
82794: LD_VAR 0 1
82798: ARRAY
82799: PUSH
82800: LD_VAR 0 2
82804: ARRAY
82805: PUSH
82806: LD_INT 1
82808: ARRAY
82809: PPUSH
82810: LD_EXP 116
82814: PUSH
82815: LD_VAR 0 1
82819: ARRAY
82820: PUSH
82821: LD_VAR 0 2
82825: ARRAY
82826: PUSH
82827: LD_INT 2
82829: ARRAY
82830: PPUSH
82831: LD_VAR 0 3
82835: PPUSH
82836: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
82840: LD_ADDR_EXP 116
82844: PUSH
82845: LD_EXP 116
82849: PPUSH
82850: LD_VAR 0 1
82854: PPUSH
82855: LD_EXP 116
82859: PUSH
82860: LD_VAR 0 1
82864: ARRAY
82865: PPUSH
82866: LD_VAR 0 2
82870: PPUSH
82871: CALL_OW 3
82875: PPUSH
82876: CALL_OW 1
82880: ST_TO_ADDR
// end ; end ;
82881: GO 82632
82883: POP
82884: POP
// end ;
82885: GO 82550
82887: POP
82888: POP
// end ;
82889: PPOPN 4
82891: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
82892: LD_INT 0
82894: PPUSH
82895: PPUSH
// result := false ;
82896: LD_ADDR_VAR 0 4
82900: PUSH
82901: LD_INT 0
82903: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
82904: LD_VAR 0 1
82908: PPUSH
82909: CALL_OW 264
82913: PUSH
82914: LD_INT 81
82916: EQUAL
82917: NOT
82918: IFFALSE 82922
// exit ;
82920: GO 83162
// index := GetElementIndex ( minersList , unit ) ;
82922: LD_ADDR_VAR 0 5
82926: PUSH
82927: LD_EXP 115
82931: PPUSH
82932: LD_VAR 0 1
82936: PPUSH
82937: CALL 25414 0 2
82941: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
82942: LD_EXP 116
82946: PUSH
82947: LD_VAR 0 5
82951: ARRAY
82952: PUSH
82953: LD_EXP 117
82957: GREATEREQUAL
82958: IFFALSE 82962
// exit ;
82960: GO 83162
// ComMoveXY ( unit , x , y ) ;
82962: LD_VAR 0 1
82966: PPUSH
82967: LD_VAR 0 2
82971: PPUSH
82972: LD_VAR 0 3
82976: PPUSH
82977: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
82981: LD_INT 35
82983: PPUSH
82984: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
82988: LD_VAR 0 1
82992: PPUSH
82993: LD_VAR 0 2
82997: PPUSH
82998: LD_VAR 0 3
83002: PPUSH
83003: CALL 57155 0 3
83007: NOT
83008: PUSH
83009: LD_VAR 0 1
83013: PPUSH
83014: CALL_OW 314
83018: AND
83019: IFFALSE 83023
// exit ;
83021: GO 83162
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
83023: LD_VAR 0 2
83027: PPUSH
83028: LD_VAR 0 3
83032: PPUSH
83033: CALL_OW 428
83037: PUSH
83038: LD_VAR 0 1
83042: EQUAL
83043: PUSH
83044: LD_VAR 0 1
83048: PPUSH
83049: CALL_OW 314
83053: NOT
83054: AND
83055: IFFALSE 82981
// PlaySoundXY ( x , y , PlantMine ) ;
83057: LD_VAR 0 2
83061: PPUSH
83062: LD_VAR 0 3
83066: PPUSH
83067: LD_STRING PlantMine
83069: PPUSH
83070: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
83074: LD_VAR 0 2
83078: PPUSH
83079: LD_VAR 0 3
83083: PPUSH
83084: LD_VAR 0 1
83088: PPUSH
83089: CALL_OW 255
83093: PPUSH
83094: LD_INT 0
83096: PPUSH
83097: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
83101: LD_ADDR_EXP 116
83105: PUSH
83106: LD_EXP 116
83110: PPUSH
83111: LD_VAR 0 5
83115: PUSH
83116: LD_EXP 116
83120: PUSH
83121: LD_VAR 0 5
83125: ARRAY
83126: PUSH
83127: LD_INT 1
83129: PLUS
83130: PUSH
83131: EMPTY
83132: LIST
83133: LIST
83134: PPUSH
83135: LD_VAR 0 2
83139: PUSH
83140: LD_VAR 0 3
83144: PUSH
83145: EMPTY
83146: LIST
83147: LIST
83148: PPUSH
83149: CALL 25629 0 3
83153: ST_TO_ADDR
// result := true ;
83154: LD_ADDR_VAR 0 4
83158: PUSH
83159: LD_INT 1
83161: ST_TO_ADDR
// end ;
83162: LD_VAR 0 4
83166: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
83167: LD_INT 0
83169: PPUSH
83170: PPUSH
83171: PPUSH
// if not unit in minersList then
83172: LD_VAR 0 1
83176: PUSH
83177: LD_EXP 115
83181: IN
83182: NOT
83183: IFFALSE 83187
// exit ;
83185: GO 83579
// index := GetElementIndex ( minersList , unit ) ;
83187: LD_ADDR_VAR 0 6
83191: PUSH
83192: LD_EXP 115
83196: PPUSH
83197: LD_VAR 0 1
83201: PPUSH
83202: CALL 25414 0 2
83206: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
83207: LD_ADDR_VAR 0 5
83211: PUSH
83212: DOUBLE
83213: LD_EXP 116
83217: PUSH
83218: LD_VAR 0 6
83222: ARRAY
83223: INC
83224: ST_TO_ADDR
83225: LD_INT 1
83227: PUSH
83228: FOR_DOWNTO
83229: IFFALSE 83390
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
83231: LD_EXP 116
83235: PUSH
83236: LD_VAR 0 6
83240: ARRAY
83241: PUSH
83242: LD_VAR 0 5
83246: ARRAY
83247: PUSH
83248: LD_INT 1
83250: ARRAY
83251: PUSH
83252: LD_VAR 0 2
83256: EQUAL
83257: PUSH
83258: LD_EXP 116
83262: PUSH
83263: LD_VAR 0 6
83267: ARRAY
83268: PUSH
83269: LD_VAR 0 5
83273: ARRAY
83274: PUSH
83275: LD_INT 2
83277: ARRAY
83278: PUSH
83279: LD_VAR 0 3
83283: EQUAL
83284: AND
83285: IFFALSE 83388
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
83287: LD_EXP 116
83291: PUSH
83292: LD_VAR 0 6
83296: ARRAY
83297: PUSH
83298: LD_VAR 0 5
83302: ARRAY
83303: PUSH
83304: LD_INT 1
83306: ARRAY
83307: PPUSH
83308: LD_EXP 116
83312: PUSH
83313: LD_VAR 0 6
83317: ARRAY
83318: PUSH
83319: LD_VAR 0 5
83323: ARRAY
83324: PUSH
83325: LD_INT 2
83327: ARRAY
83328: PPUSH
83329: LD_VAR 0 1
83333: PPUSH
83334: CALL_OW 255
83338: PPUSH
83339: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
83343: LD_ADDR_EXP 116
83347: PUSH
83348: LD_EXP 116
83352: PPUSH
83353: LD_VAR 0 6
83357: PPUSH
83358: LD_EXP 116
83362: PUSH
83363: LD_VAR 0 6
83367: ARRAY
83368: PPUSH
83369: LD_VAR 0 5
83373: PPUSH
83374: CALL_OW 3
83378: PPUSH
83379: CALL_OW 1
83383: ST_TO_ADDR
// exit ;
83384: POP
83385: POP
83386: GO 83579
// end ; end ;
83388: GO 83228
83390: POP
83391: POP
// for i := minerMinesList [ index ] downto 1 do
83392: LD_ADDR_VAR 0 5
83396: PUSH
83397: DOUBLE
83398: LD_EXP 116
83402: PUSH
83403: LD_VAR 0 6
83407: ARRAY
83408: INC
83409: ST_TO_ADDR
83410: LD_INT 1
83412: PUSH
83413: FOR_DOWNTO
83414: IFFALSE 83577
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
83416: LD_EXP 116
83420: PUSH
83421: LD_VAR 0 6
83425: ARRAY
83426: PUSH
83427: LD_VAR 0 5
83431: ARRAY
83432: PUSH
83433: LD_INT 1
83435: ARRAY
83436: PPUSH
83437: LD_EXP 116
83441: PUSH
83442: LD_VAR 0 6
83446: ARRAY
83447: PUSH
83448: LD_VAR 0 5
83452: ARRAY
83453: PUSH
83454: LD_INT 2
83456: ARRAY
83457: PPUSH
83458: LD_VAR 0 2
83462: PPUSH
83463: LD_VAR 0 3
83467: PPUSH
83468: CALL_OW 298
83472: PUSH
83473: LD_INT 6
83475: LESS
83476: IFFALSE 83575
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
83478: LD_EXP 116
83482: PUSH
83483: LD_VAR 0 6
83487: ARRAY
83488: PUSH
83489: LD_VAR 0 5
83493: ARRAY
83494: PUSH
83495: LD_INT 1
83497: ARRAY
83498: PPUSH
83499: LD_EXP 116
83503: PUSH
83504: LD_VAR 0 6
83508: ARRAY
83509: PUSH
83510: LD_VAR 0 5
83514: ARRAY
83515: PUSH
83516: LD_INT 2
83518: ARRAY
83519: PPUSH
83520: LD_VAR 0 1
83524: PPUSH
83525: CALL_OW 255
83529: PPUSH
83530: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
83534: LD_ADDR_EXP 116
83538: PUSH
83539: LD_EXP 116
83543: PPUSH
83544: LD_VAR 0 6
83548: PPUSH
83549: LD_EXP 116
83553: PUSH
83554: LD_VAR 0 6
83558: ARRAY
83559: PPUSH
83560: LD_VAR 0 5
83564: PPUSH
83565: CALL_OW 3
83569: PPUSH
83570: CALL_OW 1
83574: ST_TO_ADDR
// end ; end ;
83575: GO 83413
83577: POP
83578: POP
// end ;
83579: LD_VAR 0 4
83583: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
83584: LD_INT 0
83586: PPUSH
83587: PPUSH
83588: PPUSH
83589: PPUSH
83590: PPUSH
83591: PPUSH
83592: PPUSH
83593: PPUSH
83594: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
83595: LD_VAR 0 1
83599: PPUSH
83600: CALL_OW 264
83604: PUSH
83605: LD_INT 81
83607: EQUAL
83608: NOT
83609: PUSH
83610: LD_VAR 0 1
83614: PUSH
83615: LD_EXP 115
83619: IN
83620: NOT
83621: OR
83622: IFFALSE 83626
// exit ;
83624: GO 83948
// index := GetElementIndex ( minersList , unit ) ;
83626: LD_ADDR_VAR 0 6
83630: PUSH
83631: LD_EXP 115
83635: PPUSH
83636: LD_VAR 0 1
83640: PPUSH
83641: CALL 25414 0 2
83645: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
83646: LD_ADDR_VAR 0 8
83650: PUSH
83651: LD_EXP 117
83655: PUSH
83656: LD_EXP 116
83660: PUSH
83661: LD_VAR 0 6
83665: ARRAY
83666: MINUS
83667: ST_TO_ADDR
// if not minesFreeAmount then
83668: LD_VAR 0 8
83672: NOT
83673: IFFALSE 83677
// exit ;
83675: GO 83948
// tmp := [ ] ;
83677: LD_ADDR_VAR 0 7
83681: PUSH
83682: EMPTY
83683: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
83684: LD_ADDR_VAR 0 5
83688: PUSH
83689: DOUBLE
83690: LD_INT 1
83692: DEC
83693: ST_TO_ADDR
83694: LD_VAR 0 8
83698: PUSH
83699: FOR_TO
83700: IFFALSE 83895
// begin _d := rand ( 0 , 5 ) ;
83702: LD_ADDR_VAR 0 11
83706: PUSH
83707: LD_INT 0
83709: PPUSH
83710: LD_INT 5
83712: PPUSH
83713: CALL_OW 12
83717: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
83718: LD_ADDR_VAR 0 12
83722: PUSH
83723: LD_INT 2
83725: PPUSH
83726: LD_INT 6
83728: PPUSH
83729: CALL_OW 12
83733: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
83734: LD_ADDR_VAR 0 9
83738: PUSH
83739: LD_VAR 0 2
83743: PPUSH
83744: LD_VAR 0 11
83748: PPUSH
83749: LD_VAR 0 12
83753: PPUSH
83754: CALL_OW 272
83758: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
83759: LD_ADDR_VAR 0 10
83763: PUSH
83764: LD_VAR 0 3
83768: PPUSH
83769: LD_VAR 0 11
83773: PPUSH
83774: LD_VAR 0 12
83778: PPUSH
83779: CALL_OW 273
83783: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
83784: LD_VAR 0 9
83788: PPUSH
83789: LD_VAR 0 10
83793: PPUSH
83794: CALL_OW 488
83798: PUSH
83799: LD_VAR 0 9
83803: PUSH
83804: LD_VAR 0 10
83808: PUSH
83809: EMPTY
83810: LIST
83811: LIST
83812: PUSH
83813: LD_VAR 0 7
83817: IN
83818: NOT
83819: AND
83820: PUSH
83821: LD_VAR 0 9
83825: PPUSH
83826: LD_VAR 0 10
83830: PPUSH
83831: CALL_OW 458
83835: NOT
83836: AND
83837: IFFALSE 83879
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
83839: LD_ADDR_VAR 0 7
83843: PUSH
83844: LD_VAR 0 7
83848: PPUSH
83849: LD_VAR 0 7
83853: PUSH
83854: LD_INT 1
83856: PLUS
83857: PPUSH
83858: LD_VAR 0 9
83862: PUSH
83863: LD_VAR 0 10
83867: PUSH
83868: EMPTY
83869: LIST
83870: LIST
83871: PPUSH
83872: CALL_OW 1
83876: ST_TO_ADDR
83877: GO 83893
// i := i - 1 ;
83879: LD_ADDR_VAR 0 5
83883: PUSH
83884: LD_VAR 0 5
83888: PUSH
83889: LD_INT 1
83891: MINUS
83892: ST_TO_ADDR
// end ;
83893: GO 83699
83895: POP
83896: POP
// for i in tmp do
83897: LD_ADDR_VAR 0 5
83901: PUSH
83902: LD_VAR 0 7
83906: PUSH
83907: FOR_IN
83908: IFFALSE 83946
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
83910: LD_VAR 0 1
83914: PPUSH
83915: LD_VAR 0 5
83919: PUSH
83920: LD_INT 1
83922: ARRAY
83923: PPUSH
83924: LD_VAR 0 5
83928: PUSH
83929: LD_INT 2
83931: ARRAY
83932: PPUSH
83933: CALL 82892 0 3
83937: NOT
83938: IFFALSE 83944
// exit ;
83940: POP
83941: POP
83942: GO 83948
83944: GO 83907
83946: POP
83947: POP
// end ;
83948: LD_VAR 0 4
83952: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
83953: LD_INT 0
83955: PPUSH
83956: PPUSH
83957: PPUSH
83958: PPUSH
83959: PPUSH
83960: PPUSH
83961: PPUSH
// if not GetClass ( unit ) = class_sniper then
83962: LD_VAR 0 1
83966: PPUSH
83967: CALL_OW 257
83971: PUSH
83972: LD_INT 5
83974: EQUAL
83975: NOT
83976: IFFALSE 83980
// exit ;
83978: GO 84368
// dist := 8 ;
83980: LD_ADDR_VAR 0 5
83984: PUSH
83985: LD_INT 8
83987: ST_TO_ADDR
// viewRange := 12 ;
83988: LD_ADDR_VAR 0 7
83992: PUSH
83993: LD_INT 12
83995: ST_TO_ADDR
// side := GetSide ( unit ) ;
83996: LD_ADDR_VAR 0 6
84000: PUSH
84001: LD_VAR 0 1
84005: PPUSH
84006: CALL_OW 255
84010: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
84011: LD_INT 61
84013: PPUSH
84014: LD_VAR 0 6
84018: PPUSH
84019: CALL_OW 321
84023: PUSH
84024: LD_INT 2
84026: EQUAL
84027: IFFALSE 84037
// viewRange := 16 ;
84029: LD_ADDR_VAR 0 7
84033: PUSH
84034: LD_INT 16
84036: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
84037: LD_VAR 0 1
84041: PPUSH
84042: LD_VAR 0 2
84046: PPUSH
84047: LD_VAR 0 3
84051: PPUSH
84052: CALL_OW 297
84056: PUSH
84057: LD_VAR 0 5
84061: GREATER
84062: IFFALSE 84141
// begin ComMoveXY ( unit , x , y ) ;
84064: LD_VAR 0 1
84068: PPUSH
84069: LD_VAR 0 2
84073: PPUSH
84074: LD_VAR 0 3
84078: PPUSH
84079: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
84083: LD_INT 35
84085: PPUSH
84086: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
84090: LD_VAR 0 1
84094: PPUSH
84095: LD_VAR 0 2
84099: PPUSH
84100: LD_VAR 0 3
84104: PPUSH
84105: CALL 57155 0 3
84109: NOT
84110: IFFALSE 84114
// exit ;
84112: GO 84368
// until GetDistUnitXY ( unit , x , y ) < dist ;
84114: LD_VAR 0 1
84118: PPUSH
84119: LD_VAR 0 2
84123: PPUSH
84124: LD_VAR 0 3
84128: PPUSH
84129: CALL_OW 297
84133: PUSH
84134: LD_VAR 0 5
84138: LESS
84139: IFFALSE 84083
// end ; ComTurnXY ( unit , x , y ) ;
84141: LD_VAR 0 1
84145: PPUSH
84146: LD_VAR 0 2
84150: PPUSH
84151: LD_VAR 0 3
84155: PPUSH
84156: CALL_OW 118
// wait ( 5 ) ;
84160: LD_INT 5
84162: PPUSH
84163: CALL_OW 67
// _d := GetDir ( unit ) ;
84167: LD_ADDR_VAR 0 10
84171: PUSH
84172: LD_VAR 0 1
84176: PPUSH
84177: CALL_OW 254
84181: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
84182: LD_ADDR_VAR 0 8
84186: PUSH
84187: LD_VAR 0 1
84191: PPUSH
84192: CALL_OW 250
84196: PPUSH
84197: LD_VAR 0 10
84201: PPUSH
84202: LD_VAR 0 5
84206: PPUSH
84207: CALL_OW 272
84211: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
84212: LD_ADDR_VAR 0 9
84216: PUSH
84217: LD_VAR 0 1
84221: PPUSH
84222: CALL_OW 251
84226: PPUSH
84227: LD_VAR 0 10
84231: PPUSH
84232: LD_VAR 0 5
84236: PPUSH
84237: CALL_OW 273
84241: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
84242: LD_VAR 0 8
84246: PPUSH
84247: LD_VAR 0 9
84251: PPUSH
84252: CALL_OW 488
84256: NOT
84257: IFFALSE 84261
// exit ;
84259: GO 84368
// ComAnimCustom ( unit , 1 ) ;
84261: LD_VAR 0 1
84265: PPUSH
84266: LD_INT 1
84268: PPUSH
84269: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
84273: LD_VAR 0 8
84277: PPUSH
84278: LD_VAR 0 9
84282: PPUSH
84283: LD_VAR 0 6
84287: PPUSH
84288: LD_VAR 0 7
84292: PPUSH
84293: CALL_OW 330
// repeat wait ( 1 ) ;
84297: LD_INT 1
84299: PPUSH
84300: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
84304: LD_VAR 0 1
84308: PPUSH
84309: CALL_OW 316
84313: PUSH
84314: LD_VAR 0 1
84318: PPUSH
84319: CALL_OW 314
84323: OR
84324: PUSH
84325: LD_VAR 0 1
84329: PPUSH
84330: CALL_OW 302
84334: NOT
84335: OR
84336: PUSH
84337: LD_VAR 0 1
84341: PPUSH
84342: CALL_OW 301
84346: OR
84347: IFFALSE 84297
// RemoveSeeing ( _x , _y , side ) ;
84349: LD_VAR 0 8
84353: PPUSH
84354: LD_VAR 0 9
84358: PPUSH
84359: LD_VAR 0 6
84363: PPUSH
84364: CALL_OW 331
// end ;
84368: LD_VAR 0 4
84372: RET
