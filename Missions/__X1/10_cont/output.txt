// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 42 0 0
// CreateNature ;
   8: CALL 11222 0 0
// PrepareArabian ;
  12: CALL 247 0 0
// PrepareAmerican ;
  16: CALL 682 0 0
// PrepareLegion ;
  20: CALL 5842 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 2 ) ;
  30: LD_INT 2
  32: PPUSH
  33: CALL_OW 344
// Action ;
  37: CALL 11826 0 0
// end ;
  41: END
// export debug , prefix , amScriptActive , legScriptActive , apeAmount , spotAmericanBase , spotArabianBase , spotByAmerican , spotByLegion , spotLegion , americanDestroyed , legionDestroyed , hasMastodont , hasVehicles , hasTigers , hasApes , hasDrugs , canFinish , gameActive , omarCanChangeClass , tigerCounter , americanWave ; function Init ; begin
  42: LD_INT 0
  44: PPUSH
// debug := false ;
  45: LD_ADDR_EXP 1
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// prefix := 09_ ;
  53: LD_ADDR_EXP 2
  57: PUSH
  58: LD_STRING 09_
  60: ST_TO_ADDR
// amScriptActive := true ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_INT 1
  68: ST_TO_ADDR
// legScriptActive := true ;
  69: LD_ADDR_EXP 4
  73: PUSH
  74: LD_INT 1
  76: ST_TO_ADDR
// apeAmount := [ 16 , 14 , 12 , 10 ] [ Difficulty ] ;
  77: LD_ADDR_EXP 5
  81: PUSH
  82: LD_INT 16
  84: PUSH
  85: LD_INT 14
  87: PUSH
  88: LD_INT 12
  90: PUSH
  91: LD_INT 10
  93: PUSH
  94: EMPTY
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: PUSH
 100: LD_OWVAR 67
 104: ARRAY
 105: ST_TO_ADDR
// spotAmericanBase := false ;
 106: LD_ADDR_EXP 6
 110: PUSH
 111: LD_INT 0
 113: ST_TO_ADDR
// spotArabianBase := false ;
 114: LD_ADDR_EXP 7
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// spotLegion := false ;
 122: LD_ADDR_EXP 10
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// spotByAmerican := false ;
 130: LD_ADDR_EXP 8
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// spotByLegion := false ;
 138: LD_ADDR_EXP 9
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// americanDestroyed := false ;
 146: LD_ADDR_EXP 11
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// legionDestroyed := false ;
 154: LD_ADDR_EXP 12
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// hasMastodont := false ;
 162: LD_ADDR_EXP 13
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// hasVehicles := false ;
 170: LD_ADDR_EXP 14
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// hasTigers := false ;
 178: LD_ADDR_EXP 15
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// hasApes := false ;
 186: LD_ADDR_EXP 16
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// hasDrugs := false ;
 194: LD_ADDR_EXP 17
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// canFinish := false ;
 202: LD_ADDR_EXP 18
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// gameActive := false ;
 210: LD_ADDR_EXP 19
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// omarCanChangeClass := false ;
 218: LD_ADDR_EXP 20
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// tigerCounter := 0 ;
 226: LD_ADDR_EXP 21
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// americanWave := 0 ;
 234: LD_ADDR_EXP 22
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// end ; end_of_file
 242: LD_VAR 0 1
 246: RET
// export Heike , Omar ; export heikeVehicle , omarVehicle ; export function PrepareArabian ; var i , tmp , veh ; begin
 247: LD_INT 0
 249: PPUSH
 250: PPUSH
 251: PPUSH
 252: PPUSH
// uc_side := 2 ;
 253: LD_ADDR_OWVAR 20
 257: PUSH
 258: LD_INT 2
 260: ST_TO_ADDR
// uc_nation := nation_arabian ;
 261: LD_ADDR_OWVAR 21
 265: PUSH
 266: LD_INT 2
 268: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 269: LD_ADDR_EXP 23
 273: PUSH
 274: LD_STRING Heike
 276: PPUSH
 277: LD_EXP 1
 281: NOT
 282: PPUSH
 283: LD_EXP 2
 287: PPUSH
 288: CALL 20667 0 3
 292: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 293: LD_INT 14
 295: PPUSH
 296: LD_INT 3
 298: PPUSH
 299: LD_INT 1
 301: PPUSH
 302: LD_INT 27
 304: PPUSH
 305: LD_INT 100
 307: PPUSH
 308: CALL 25528 0 5
// heikeVehicle := CreateVehicle ;
 312: LD_ADDR_EXP 25
 316: PUSH
 317: CALL_OW 45
 321: ST_TO_ADDR
// SetDir ( heikeVehicle , 4 ) ;
 322: LD_EXP 25
 326: PPUSH
 327: LD_INT 4
 329: PPUSH
 330: CALL_OW 233
// PlaceUnitXY ( heikeVehicle , 118 , 37 , false ) ;
 334: LD_EXP 25
 338: PPUSH
 339: LD_INT 118
 341: PPUSH
 342: LD_INT 37
 344: PPUSH
 345: LD_INT 0
 347: PPUSH
 348: CALL_OW 48
// SetClass ( Heike , class_soldier ) ;
 352: LD_EXP 23
 356: PPUSH
 357: LD_INT 1
 359: PPUSH
 360: CALL_OW 336
// PlaceHumanInUnit ( Heike , heikeVehicle ) ;
 364: LD_EXP 23
 368: PPUSH
 369: LD_EXP 25
 373: PPUSH
 374: CALL_OW 52
// uc_side := 5 ;
 378: LD_ADDR_OWVAR 20
 382: PUSH
 383: LD_INT 5
 385: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
 386: LD_ADDR_EXP 24
 390: PUSH
 391: LD_STRING Omar
 393: PPUSH
 394: CALL_OW 25
 398: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 399: LD_INT 14
 401: PPUSH
 402: LD_INT 3
 404: PPUSH
 405: LD_INT 1
 407: PPUSH
 408: LD_INT 27
 410: PPUSH
 411: LD_INT 100
 413: PPUSH
 414: CALL 25528 0 5
// omarVehicle := CreateVehicle ;
 418: LD_ADDR_EXP 26
 422: PUSH
 423: CALL_OW 45
 427: ST_TO_ADDR
// SetDir ( omarVehicle , 0 ) ;
 428: LD_EXP 26
 432: PPUSH
 433: LD_INT 0
 435: PPUSH
 436: CALL_OW 233
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) do
 440: LD_ADDR_VAR 0 2
 444: PUSH
 445: LD_INT 22
 447: PUSH
 448: LD_INT 5
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: PUSH
 455: LD_INT 21
 457: PUSH
 458: LD_INT 3
 460: PUSH
 461: EMPTY
 462: LIST
 463: LIST
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: PPUSH
 469: CALL_OW 69
 473: PUSH
 474: FOR_IN
 475: IFFALSE 499
// SetLives ( i , rand ( 300 , 499 ) ) ;
 477: LD_VAR 0 2
 481: PPUSH
 482: LD_INT 300
 484: PPUSH
 485: LD_INT 499
 487: PPUSH
 488: CALL_OW 12
 492: PPUSH
 493: CALL_OW 234
 497: GO 474
 499: POP
 500: POP
// SetResourceType ( GetBase ( arBase ) , mat_cans , 200 - ( 20 * Difficulty ) ) ;
 501: LD_INT 85
 503: PPUSH
 504: CALL_OW 274
 508: PPUSH
 509: LD_INT 1
 511: PPUSH
 512: LD_INT 200
 514: PUSH
 515: LD_INT 20
 517: PUSH
 518: LD_OWVAR 67
 522: MUL
 523: MINUS
 524: PPUSH
 525: CALL_OW 277
// SetResourceType ( GetBase ( arBase ) , mat_oil , 20 ) ;
 529: LD_INT 85
 531: PPUSH
 532: CALL_OW 274
 536: PPUSH
 537: LD_INT 2
 539: PPUSH
 540: LD_INT 20
 542: PPUSH
 543: CALL_OW 277
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_cargo_bay , 100 ) ;
 547: LD_INT 14
 549: PPUSH
 550: LD_INT 3
 552: PPUSH
 553: LD_INT 1
 555: PPUSH
 556: LD_INT 32
 558: PPUSH
 559: LD_INT 100
 561: PPUSH
 562: CALL 25528 0 5
// veh := CreateVehicle ;
 566: LD_ADDR_VAR 0 4
 570: PUSH
 571: CALL_OW 45
 575: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
 576: LD_VAR 0 4
 580: PPUSH
 581: LD_INT 4
 583: PPUSH
 584: CALL_OW 233
// SetLives ( veh , 420 ) ;
 588: LD_VAR 0 4
 592: PPUSH
 593: LD_INT 420
 595: PPUSH
 596: CALL_OW 234
// PlaceUnitXY ( veh , 193 , 133 , false ) ;
 600: LD_VAR 0 4
 604: PPUSH
 605: LD_INT 193
 607: PPUSH
 608: LD_INT 133
 610: PPUSH
 611: LD_INT 0
 613: PPUSH
 614: CALL_OW 48
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 11 ) ;
 618: LD_INT 14
 620: PPUSH
 621: LD_INT 1
 623: PPUSH
 624: LD_INT 1
 626: PPUSH
 627: LD_INT 26
 629: PPUSH
 630: LD_INT 11
 632: PPUSH
 633: CALL 25528 0 5
// veh := CreateVehicle ;
 637: LD_ADDR_VAR 0 4
 641: PUSH
 642: CALL_OW 45
 646: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
 647: LD_VAR 0 4
 651: PPUSH
 652: LD_INT 0
 654: PPUSH
 655: CALL_OW 233
// PlaceUnitXY ( veh , 261 , 115 , false ) ;
 659: LD_VAR 0 4
 663: PPUSH
 664: LD_INT 261
 666: PPUSH
 667: LD_INT 115
 669: PPUSH
 670: LD_INT 0
 672: PPUSH
 673: CALL_OW 48
// end ; end_of_file
 677: LD_VAR 0 1
 681: RET
// export amForces , amTech , amConstructList , amHealPoint , amBuildings , amTanks , amCommander , amCargo , amPatrol ; export function PrepareAmerican ; var i , j , b , un , skill , sources , patrolSpawnArea ; begin
 682: LD_INT 0
 684: PPUSH
 685: PPUSH
 686: PPUSH
 687: PPUSH
 688: PPUSH
 689: PPUSH
 690: PPUSH
 691: PPUSH
// uc_side := 1 ;
 692: LD_ADDR_OWVAR 20
 696: PUSH
 697: LD_INT 1
 699: ST_TO_ADDR
// uc_nation := nation_american ;
 700: LD_ADDR_OWVAR 21
 704: PUSH
 705: LD_INT 1
 707: ST_TO_ADDR
// amForces := [ ] ;
 708: LD_ADDR_EXP 27
 712: PUSH
 713: EMPTY
 714: ST_TO_ADDR
// amTech := GetTechNation ( 1 , nation_american , state_enabled ) ;
 715: LD_ADDR_EXP 28
 719: PUSH
 720: LD_INT 1
 722: PPUSH
 723: LD_INT 1
 725: PPUSH
 726: LD_INT 1
 728: PPUSH
 729: CALL 20751 0 3
 733: ST_TO_ADDR
// amConstructList := [ [ us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ] , [ us_medium_tracked , engine_combustion , control_remote , us_crane ] ] ;
 734: LD_ADDR_EXP 29
 738: PUSH
 739: LD_INT 2
 741: PUSH
 742: LD_INT 1
 744: PUSH
 745: LD_INT 2
 747: PUSH
 748: LD_INT 12
 750: PUSH
 751: EMPTY
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: PUSH
 757: LD_INT 3
 759: PUSH
 760: LD_INT 1
 762: PUSH
 763: LD_INT 2
 765: PUSH
 766: LD_INT 13
 768: PUSH
 769: EMPTY
 770: LIST
 771: LIST
 772: LIST
 773: LIST
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: ST_TO_ADDR
// amHealPoint := [ 94 , 132 ] ;
 779: LD_ADDR_EXP 30
 783: PUSH
 784: LD_INT 94
 786: PUSH
 787: LD_INT 132
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// amBuildings := [ ] ;
 794: LD_ADDR_EXP 31
 798: PUSH
 799: EMPTY
 800: ST_TO_ADDR
// amTanks := [ ] ;
 801: LD_ADDR_EXP 32
 805: PUSH
 806: EMPTY
 807: ST_TO_ADDR
// amCargo := 0 ;
 808: LD_ADDR_EXP 34
 812: PUSH
 813: LD_INT 0
 815: ST_TO_ADDR
// amPatrol := [ ] ;
 816: LD_ADDR_EXP 35
 820: PUSH
 821: EMPTY
 822: ST_TO_ADDR
// sources := [ [ 77 , 121 ] , [ 98 , 145 ] ] ;
 823: LD_ADDR_VAR 0 7
 827: PUSH
 828: LD_INT 77
 830: PUSH
 831: LD_INT 121
 833: PUSH
 834: EMPTY
 835: LIST
 836: LIST
 837: PUSH
 838: LD_INT 98
 840: PUSH
 841: LD_INT 145
 843: PUSH
 844: EMPTY
 845: LIST
 846: LIST
 847: PUSH
 848: EMPTY
 849: LIST
 850: LIST
 851: ST_TO_ADDR
// for i in sources do
 852: LD_ADDR_VAR 0 2
 856: PUSH
 857: LD_VAR 0 7
 861: PUSH
 862: FOR_IN
 863: IFFALSE 892
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 1 ) ;
 865: LD_VAR 0 2
 869: PUSH
 870: LD_INT 1
 872: ARRAY
 873: PPUSH
 874: LD_VAR 0 2
 878: PUSH
 879: LD_INT 2
 881: ARRAY
 882: PPUSH
 883: LD_INT 1
 885: PPUSH
 886: CALL_OW 441
 890: GO 862
 892: POP
 893: POP
// SetResourceType ( GetBase ( amBase ) , mat_cans , 550 ) ;
 894: LD_INT 2
 896: PPUSH
 897: CALL_OW 274
 901: PPUSH
 902: LD_INT 1
 904: PPUSH
 905: LD_INT 550
 907: PPUSH
 908: CALL_OW 277
// SetResourceType ( GetBase ( amBase ) , mat_oil , 120 ) ;
 912: LD_INT 2
 914: PPUSH
 915: CALL_OW 274
 919: PPUSH
 920: LD_INT 2
 922: PPUSH
 923: LD_INT 120
 925: PPUSH
 926: CALL_OW 277
// SetResourceType ( GetBase ( amBase ) , mat_siberit , 30 ) ;
 930: LD_INT 2
 932: PPUSH
 933: CALL_OW 274
 937: PPUSH
 938: LD_INT 3
 940: PPUSH
 941: LD_INT 30
 943: PPUSH
 944: CALL_OW 277
// skill := [ 6 , 7 , 8 , 9 ] [ Difficulty ] ;
 948: LD_ADDR_VAR 0 6
 952: PUSH
 953: LD_INT 6
 955: PUSH
 956: LD_INT 7
 958: PUSH
 959: LD_INT 8
 961: PUSH
 962: LD_INT 9
 964: PUSH
 965: EMPTY
 966: LIST
 967: LIST
 968: LIST
 969: LIST
 970: PUSH
 971: LD_OWVAR 67
 975: ARRAY
 976: ST_TO_ADDR
// amCommander := PrepareUnit ( Brown , false ,  ) ;
 977: LD_ADDR_EXP 33
 981: PUSH
 982: LD_STRING Brown
 984: PPUSH
 985: LD_INT 0
 987: PPUSH
 988: LD_STRING 
 990: PPUSH
 991: CALL 20667 0 3
 995: ST_TO_ADDR
// PlaceHumanInUnit ( amCommander , amBase ) ;
 996: LD_EXP 33
1000: PPUSH
1001: LD_INT 2
1003: PPUSH
1004: CALL_OW 52
// for i := 1 to 4 do
1008: LD_ADDR_VAR 0 2
1012: PUSH
1013: DOUBLE
1014: LD_INT 1
1016: DEC
1017: ST_TO_ADDR
1018: LD_INT 4
1020: PUSH
1021: FOR_TO
1022: IFFALSE 1546
// for j := 1 to [ [ 6 , 7 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] , [ 5 , 5 , 6 , 7 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
1024: LD_ADDR_VAR 0 3
1028: PUSH
1029: DOUBLE
1030: LD_INT 1
1032: DEC
1033: ST_TO_ADDR
1034: LD_INT 6
1036: PUSH
1037: LD_INT 7
1039: PUSH
1040: LD_INT 8
1042: PUSH
1043: LD_INT 9
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: PUSH
1052: LD_OWVAR 67
1056: ARRAY
1057: PUSH
1058: LD_INT 3
1060: PUSH
1061: LD_INT 4
1063: PUSH
1064: LD_INT 5
1066: PUSH
1067: LD_INT 5
1069: PUSH
1070: EMPTY
1071: LIST
1072: LIST
1073: LIST
1074: LIST
1075: PUSH
1076: LD_OWVAR 67
1080: ARRAY
1081: PUSH
1082: LD_INT 5
1084: PUSH
1085: LD_INT 5
1087: PUSH
1088: LD_INT 6
1090: PUSH
1091: LD_INT 7
1093: PUSH
1094: EMPTY
1095: LIST
1096: LIST
1097: LIST
1098: LIST
1099: PUSH
1100: LD_OWVAR 67
1104: ARRAY
1105: PUSH
1106: LD_INT 2
1108: PUSH
1109: LD_INT 3
1111: PUSH
1112: LD_INT 3
1114: PUSH
1115: LD_INT 3
1117: PUSH
1118: EMPTY
1119: LIST
1120: LIST
1121: LIST
1122: LIST
1123: PUSH
1124: LD_OWVAR 67
1128: ARRAY
1129: PUSH
1130: EMPTY
1131: LIST
1132: LIST
1133: LIST
1134: LIST
1135: PUSH
1136: LD_VAR 0 2
1140: ARRAY
1141: PUSH
1142: FOR_TO
1143: IFFALSE 1542
// begin PrepareHuman ( false , i , skill ) ;
1145: LD_INT 0
1147: PPUSH
1148: LD_VAR 0 2
1152: PPUSH
1153: LD_VAR 0 6
1157: PPUSH
1158: CALL_OW 380
// un := CreateHuman ;
1162: LD_ADDR_VAR 0 5
1166: PUSH
1167: CALL_OW 44
1171: ST_TO_ADDR
// amForces := Join ( amForces , un ) ;
1172: LD_ADDR_EXP 27
1176: PUSH
1177: LD_EXP 27
1181: PPUSH
1182: LD_VAR 0 5
1186: PPUSH
1187: CALL 58399 0 2
1191: ST_TO_ADDR
// case i of 1 :
1192: LD_VAR 0 2
1196: PUSH
1197: LD_INT 1
1199: DOUBLE
1200: EQUAL
1201: IFTRUE 1205
1203: GO 1274
1205: POP
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] ] ) ; 2 :
1206: LD_ADDR_VAR 0 4
1210: PUSH
1211: LD_INT 22
1213: PUSH
1214: LD_INT 1
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: PUSH
1221: LD_INT 2
1223: PUSH
1224: LD_INT 30
1226: PUSH
1227: LD_INT 32
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: PUSH
1234: LD_INT 30
1236: PUSH
1237: LD_INT 5
1239: PUSH
1240: EMPTY
1241: LIST
1242: LIST
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: LIST
1248: PUSH
1249: LD_INT 3
1251: PUSH
1252: LD_INT 62
1254: PUSH
1255: EMPTY
1256: LIST
1257: PUSH
1258: EMPTY
1259: LIST
1260: LIST
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: LIST
1266: PPUSH
1267: CALL_OW 69
1271: ST_TO_ADDR
1272: GO 1453
1274: LD_INT 2
1276: DOUBLE
1277: EQUAL
1278: IFTRUE 1282
1280: GO 1311
1282: POP
// b := UnitFilter ( amBase , [ f_not , [ f_full ] ] ) ; 3 :
1283: LD_ADDR_VAR 0 4
1287: PUSH
1288: LD_INT 2
1290: PPUSH
1291: LD_INT 3
1293: PUSH
1294: LD_INT 62
1296: PUSH
1297: EMPTY
1298: LIST
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: PPUSH
1304: CALL_OW 72
1308: ST_TO_ADDR
1309: GO 1453
1311: LD_INT 3
1313: DOUBLE
1314: EQUAL
1315: IFTRUE 1319
1317: GO 1393
1319: POP
// b := ReverseArray ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_control_tower ] ] , [ f_not , [ f_full ] ] ] ) ) ; 4 :
1320: LD_ADDR_VAR 0 4
1324: PUSH
1325: LD_INT 22
1327: PUSH
1328: LD_INT 1
1330: PUSH
1331: EMPTY
1332: LIST
1333: LIST
1334: PUSH
1335: LD_INT 2
1337: PUSH
1338: LD_INT 30
1340: PUSH
1341: LD_INT 3
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: PUSH
1348: LD_INT 30
1350: PUSH
1351: LD_INT 36
1353: PUSH
1354: EMPTY
1355: LIST
1356: LIST
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: LIST
1362: PUSH
1363: LD_INT 3
1365: PUSH
1366: LD_INT 62
1368: PUSH
1369: EMPTY
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: PUSH
1376: EMPTY
1377: LIST
1378: LIST
1379: LIST
1380: PPUSH
1381: CALL_OW 69
1385: PPUSH
1386: CALL 53666 0 1
1390: ST_TO_ADDR
1391: GO 1453
1393: LD_INT 4
1395: DOUBLE
1396: EQUAL
1397: IFTRUE 1401
1399: GO 1452
1401: POP
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_full ] , [ f_not , [ f_full ] ] ] ) ; end ;
1402: LD_ADDR_VAR 0 4
1406: PUSH
1407: LD_INT 22
1409: PUSH
1410: LD_INT 1
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: PUSH
1417: LD_INT 30
1419: PUSH
1420: LD_INT 8
1422: PUSH
1423: EMPTY
1424: LIST
1425: LIST
1426: PUSH
1427: LD_INT 3
1429: PUSH
1430: LD_INT 62
1432: PUSH
1433: EMPTY
1434: LIST
1435: PUSH
1436: EMPTY
1437: LIST
1438: LIST
1439: PUSH
1440: EMPTY
1441: LIST
1442: LIST
1443: LIST
1444: PPUSH
1445: CALL_OW 69
1449: ST_TO_ADDR
1450: GO 1453
1452: POP
// if b then
1453: LD_VAR 0 4
1457: IFFALSE 1519
// begin if GetBType ( b [ 1 ] ) = b_barracks and Prob ( 60 ) then
1459: LD_VAR 0 4
1463: PUSH
1464: LD_INT 1
1466: ARRAY
1467: PPUSH
1468: CALL_OW 266
1472: PUSH
1473: LD_INT 5
1475: EQUAL
1476: PUSH
1477: LD_INT 60
1479: PPUSH
1480: CALL_OW 13
1484: AND
1485: IFFALSE 1499
// SetClass ( un , class_sniper ) ;
1487: LD_VAR 0 5
1491: PPUSH
1492: LD_INT 5
1494: PPUSH
1495: CALL_OW 336
// PlaceHumanInUnit ( un , b [ 1 ] ) ;
1499: LD_VAR 0 5
1503: PPUSH
1504: LD_VAR 0 4
1508: PUSH
1509: LD_INT 1
1511: ARRAY
1512: PPUSH
1513: CALL_OW 52
// end else
1517: GO 1540
// PlaceUnitXYR ( un , 92 , 137 , 4 , false ) ;
1519: LD_VAR 0 5
1523: PPUSH
1524: LD_INT 92
1526: PPUSH
1527: LD_INT 137
1529: PPUSH
1530: LD_INT 4
1532: PPUSH
1533: LD_INT 0
1535: PPUSH
1536: CALL_OW 50
// end ;
1540: GO 1142
1542: POP
1543: POP
1544: GO 1021
1546: POP
1547: POP
// patrolSpawnArea := [ patrol1aArea , patrol2aArea , patrol3aArea ] ;
1548: LD_ADDR_VAR 0 8
1552: PUSH
1553: LD_INT 30
1555: PUSH
1556: LD_INT 32
1558: PUSH
1559: LD_INT 36
1561: PUSH
1562: EMPTY
1563: LIST
1564: LIST
1565: LIST
1566: ST_TO_ADDR
// for i := 1 to patrolSpawnArea do
1567: LD_ADDR_VAR 0 2
1571: PUSH
1572: DOUBLE
1573: LD_INT 1
1575: DEC
1576: ST_TO_ADDR
1577: LD_VAR 0 8
1581: PUSH
1582: FOR_TO
1583: IFFALSE 1752
// begin for j := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
1585: LD_ADDR_VAR 0 3
1589: PUSH
1590: DOUBLE
1591: LD_INT 1
1593: DEC
1594: ST_TO_ADDR
1595: LD_INT 1
1597: PUSH
1598: LD_INT 2
1600: PUSH
1601: LD_INT 2
1603: PUSH
1604: LD_INT 3
1606: PUSH
1607: EMPTY
1608: LIST
1609: LIST
1610: LIST
1611: LIST
1612: PUSH
1613: LD_OWVAR 67
1617: ARRAY
1618: PUSH
1619: FOR_TO
1620: IFFALSE 1748
// begin PrepareSoldier ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
1622: LD_INT 0
1624: PPUSH
1625: LD_INT 7
1627: PUSH
1628: LD_INT 8
1630: PUSH
1631: LD_INT 9
1633: PUSH
1634: LD_INT 10
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: PUSH
1643: LD_OWVAR 67
1647: ARRAY
1648: PPUSH
1649: CALL_OW 381
// un := CreateHuman ;
1653: LD_ADDR_VAR 0 5
1657: PUSH
1658: CALL_OW 44
1662: ST_TO_ADDR
// if j mod 2 = 0 then
1663: LD_VAR 0 3
1667: PUSH
1668: LD_INT 2
1670: MOD
1671: PUSH
1672: LD_INT 0
1674: EQUAL
1675: IFFALSE 1689
// SetClass ( un , class_sniper ) ;
1677: LD_VAR 0 5
1681: PPUSH
1682: LD_INT 5
1684: PPUSH
1685: CALL_OW 336
// amPatrol := Join ( amPatrol , un ) ;
1689: LD_ADDR_EXP 35
1693: PUSH
1694: LD_EXP 35
1698: PPUSH
1699: LD_VAR 0 5
1703: PPUSH
1704: CALL 58399 0 2
1708: ST_TO_ADDR
// PlaceUnitArea ( un , patrolSpawnArea [ i ] , false ) ;
1709: LD_VAR 0 5
1713: PPUSH
1714: LD_VAR 0 8
1718: PUSH
1719: LD_VAR 0 2
1723: ARRAY
1724: PPUSH
1725: LD_INT 0
1727: PPUSH
1728: CALL_OW 49
// SetTag ( un , i ) ;
1732: LD_VAR 0 5
1736: PPUSH
1737: LD_VAR 0 2
1741: PPUSH
1742: CALL_OW 109
// end ;
1746: GO 1619
1748: POP
1749: POP
// end ;
1750: GO 1582
1752: POP
1753: POP
// end ;
1754: LD_VAR 0 1
1758: RET
// every 0 0$2 trigger amScriptActive and Count ( amForces ) do var i , tmp , remote , undone , side , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
1759: LD_EXP 3
1763: PUSH
1764: LD_EXP 27
1768: PPUSH
1769: CALL 22790 0 1
1773: AND
1774: IFFALSE 4181
1776: GO 1778
1778: DISABLE
1779: LD_INT 0
1781: PPUSH
1782: PPUSH
1783: PPUSH
1784: PPUSH
1785: PPUSH
1786: PPUSH
1787: PPUSH
1788: PPUSH
1789: PPUSH
1790: PPUSH
1791: PPUSH
1792: PPUSH
1793: PPUSH
1794: PPUSH
1795: PPUSH
1796: PPUSH
1797: PPUSH
1798: PPUSH
// begin enable ;
1799: ENABLE
// side := 1 ;
1800: LD_ADDR_VAR 0 5
1804: PUSH
1805: LD_INT 1
1807: ST_TO_ADDR
// remote := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
1808: LD_ADDR_VAR 0 3
1812: PUSH
1813: LD_INT 22
1815: PUSH
1816: LD_VAR 0 5
1820: PUSH
1821: EMPTY
1822: LIST
1823: LIST
1824: PUSH
1825: LD_INT 33
1827: PUSH
1828: LD_INT 2
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: PUSH
1835: LD_INT 50
1837: PUSH
1838: EMPTY
1839: LIST
1840: PUSH
1841: LD_INT 3
1843: PUSH
1844: LD_INT 61
1846: PUSH
1847: EMPTY
1848: LIST
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: PPUSH
1860: CALL_OW 69
1864: ST_TO_ADDR
// if remote and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_btype , b_control_tower ] ] ) ) then
1865: LD_VAR 0 3
1869: PUSH
1870: LD_INT 22
1872: PUSH
1873: LD_VAR 0 5
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: PUSH
1882: LD_INT 50
1884: PUSH
1885: EMPTY
1886: LIST
1887: PUSH
1888: LD_INT 30
1890: PUSH
1891: LD_INT 36
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: PUSH
1898: EMPTY
1899: LIST
1900: LIST
1901: LIST
1902: PPUSH
1903: CALL_OW 69
1907: PPUSH
1908: CALL 22790 0 1
1912: AND
1913: IFFALSE 1941
// for i in remote do
1915: LD_ADDR_VAR 0 1
1919: PUSH
1920: LD_VAR 0 3
1924: PUSH
1925: FOR_IN
1926: IFFALSE 1939
// Connect ( i ) ;
1928: LD_VAR 0 1
1932: PPUSH
1933: CALL 28996 0 1
1937: GO 1925
1939: POP
1940: POP
// if amTech then
1941: LD_EXP 28
1945: IFFALSE 2101
// begin lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1947: LD_ADDR_VAR 0 6
1951: PUSH
1952: LD_INT 22
1954: PUSH
1955: LD_VAR 0 5
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: PUSH
1964: LD_INT 50
1966: PUSH
1967: EMPTY
1968: LIST
1969: PUSH
1970: LD_INT 2
1972: PUSH
1973: LD_INT 30
1975: PUSH
1976: LD_INT 6
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: PUSH
1983: LD_INT 30
1985: PUSH
1986: LD_INT 7
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: PUSH
1993: LD_INT 30
1995: PUSH
1996: LD_INT 8
1998: PUSH
1999: EMPTY
2000: LIST
2001: LIST
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: LIST
2007: LIST
2008: PUSH
2009: EMPTY
2010: LIST
2011: LIST
2012: LIST
2013: PPUSH
2014: CALL_OW 69
2018: ST_TO_ADDR
// if lab then
2019: LD_VAR 0 6
2023: IFFALSE 2101
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
2025: LD_VAR 0 6
2029: PUSH
2030: LD_INT 1
2032: ARRAY
2033: PPUSH
2034: CALL_OW 461
2038: PUSH
2039: LD_INT 2
2041: EQUAL
2042: IFFALSE 2101
// begin for i in amTech do
2044: LD_ADDR_VAR 0 1
2048: PUSH
2049: LD_EXP 28
2053: PUSH
2054: FOR_IN
2055: IFFALSE 2099
// if CanBeResearched ( lab [ 1 ] , i ) then
2057: LD_VAR 0 6
2061: PUSH
2062: LD_INT 1
2064: ARRAY
2065: PPUSH
2066: LD_VAR 0 1
2070: PPUSH
2071: CALL_OW 430
2075: IFFALSE 2097
// begin ComResearch ( lab [ 1 ] , i ) ;
2077: LD_VAR 0 6
2081: PUSH
2082: LD_INT 1
2084: ARRAY
2085: PPUSH
2086: LD_VAR 0 1
2090: PPUSH
2091: CALL_OW 124
// break ;
2095: GO 2099
// end ;
2097: GO 2054
2099: POP
2100: POP
// end ; end ; end ; fac := FilterUnitsInArea ( amBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
2101: LD_ADDR_VAR 0 16
2105: PUSH
2106: LD_INT 1
2108: PPUSH
2109: LD_INT 22
2111: PUSH
2112: LD_VAR 0 5
2116: PUSH
2117: EMPTY
2118: LIST
2119: LIST
2120: PUSH
2121: LD_INT 30
2123: PUSH
2124: LD_INT 3
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: PUSH
2131: LD_INT 50
2133: PUSH
2134: EMPTY
2135: LIST
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: PPUSH
2142: CALL_OW 70
2146: ST_TO_ADDR
// if fac then
2147: LD_VAR 0 16
2151: IFFALSE 2417
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
2153: LD_VAR 0 16
2157: PUSH
2158: LD_INT 1
2160: ARRAY
2161: PPUSH
2162: CALL_OW 461
2166: PUSH
2167: LD_INT 2
2169: EQUAL
2170: IFFALSE 2417
// begin emptyTowers := FilterUnitsInArea ( amBaseArea , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
2172: LD_ADDR_VAR 0 17
2176: PUSH
2177: LD_INT 1
2179: PPUSH
2180: LD_INT 2
2182: PUSH
2183: LD_INT 30
2185: PUSH
2186: LD_INT 32
2188: PUSH
2189: EMPTY
2190: LIST
2191: LIST
2192: PUSH
2193: LD_INT 30
2195: PUSH
2196: LD_INT 33
2198: PUSH
2199: EMPTY
2200: LIST
2201: LIST
2202: PUSH
2203: EMPTY
2204: LIST
2205: LIST
2206: LIST
2207: PUSH
2208: LD_INT 35
2210: PUSH
2211: LD_INT 0
2213: PUSH
2214: EMPTY
2215: LIST
2216: LIST
2217: PUSH
2218: EMPTY
2219: LIST
2220: LIST
2221: PPUSH
2222: CALL_OW 70
2226: ST_TO_ADDR
// if emptyTowers then
2227: LD_VAR 0 17
2231: IFFALSE 2279
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , amBaseArea ) ;
2233: LD_ADDR_VAR 0 18
2237: PUSH
2238: LD_VAR 0 17
2242: PUSH
2243: LD_INT 1
2245: ARRAY
2246: PPUSH
2247: LD_INT 1
2249: PPUSH
2250: CALL 31035 0 2
2254: ST_TO_ADDR
// if weapon then
2255: LD_VAR 0 18
2259: IFFALSE 2279
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
2261: LD_VAR 0 17
2265: PUSH
2266: LD_INT 1
2268: ARRAY
2269: PPUSH
2270: LD_VAR 0 18
2274: PPUSH
2275: CALL_OW 148
// end ; if amConstructList then
2279: LD_EXP 29
2283: IFFALSE 2417
// if CanBeConstructed ( fac [ 1 ] , amConstructList [ 1 ] [ 1 ] , amConstructList [ 1 ] [ 2 ] , amConstructList [ 1 ] [ 3 ] , amConstructList [ 1 ] [ 4 ] ) then
2285: LD_VAR 0 16
2289: PUSH
2290: LD_INT 1
2292: ARRAY
2293: PPUSH
2294: LD_EXP 29
2298: PUSH
2299: LD_INT 1
2301: ARRAY
2302: PUSH
2303: LD_INT 1
2305: ARRAY
2306: PPUSH
2307: LD_EXP 29
2311: PUSH
2312: LD_INT 1
2314: ARRAY
2315: PUSH
2316: LD_INT 2
2318: ARRAY
2319: PPUSH
2320: LD_EXP 29
2324: PUSH
2325: LD_INT 1
2327: ARRAY
2328: PUSH
2329: LD_INT 3
2331: ARRAY
2332: PPUSH
2333: LD_EXP 29
2337: PUSH
2338: LD_INT 1
2340: ARRAY
2341: PUSH
2342: LD_INT 4
2344: ARRAY
2345: PPUSH
2346: CALL_OW 448
2350: IFFALSE 2417
// ComConstruct ( fac [ 1 ] , amConstructList [ 1 ] [ 1 ] , amConstructList [ 1 ] [ 2 ] , amConstructList [ 1 ] [ 3 ] , amConstructList [ 1 ] [ 4 ] ) ;
2352: LD_VAR 0 16
2356: PUSH
2357: LD_INT 1
2359: ARRAY
2360: PPUSH
2361: LD_EXP 29
2365: PUSH
2366: LD_INT 1
2368: ARRAY
2369: PUSH
2370: LD_INT 1
2372: ARRAY
2373: PPUSH
2374: LD_EXP 29
2378: PUSH
2379: LD_INT 1
2381: ARRAY
2382: PUSH
2383: LD_INT 2
2385: ARRAY
2386: PPUSH
2387: LD_EXP 29
2391: PUSH
2392: LD_INT 1
2394: ARRAY
2395: PUSH
2396: LD_INT 3
2398: ARRAY
2399: PPUSH
2400: LD_EXP 29
2404: PUSH
2405: LD_INT 1
2407: ARRAY
2408: PUSH
2409: LD_INT 4
2411: ARRAY
2412: PPUSH
2413: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( amBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2417: LD_ADDR_VAR 0 2
2421: PUSH
2422: LD_INT 1
2424: PPUSH
2425: LD_INT 21
2427: PUSH
2428: LD_INT 3
2430: PUSH
2431: EMPTY
2432: LIST
2433: LIST
2434: PUSH
2435: LD_INT 3
2437: PUSH
2438: LD_INT 57
2440: PUSH
2441: EMPTY
2442: LIST
2443: PUSH
2444: EMPTY
2445: LIST
2446: LIST
2447: PUSH
2448: LD_INT 3
2450: PUSH
2451: LD_INT 24
2453: PUSH
2454: LD_INT 1000
2456: PUSH
2457: EMPTY
2458: LIST
2459: LIST
2460: PUSH
2461: EMPTY
2462: LIST
2463: LIST
2464: PUSH
2465: EMPTY
2466: LIST
2467: LIST
2468: LIST
2469: PPUSH
2470: CALL_OW 70
2474: ST_TO_ADDR
// cr := GetListOfCratesInArea ( amCratesArea ) ;
2475: LD_ADDR_VAR 0 10
2479: PUSH
2480: LD_INT 13
2482: PPUSH
2483: CALL_OW 435
2487: ST_TO_ADDR
// sci := UnitFilter ( amForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
2488: LD_ADDR_VAR 0 11
2492: PUSH
2493: LD_EXP 27
2497: PPUSH
2498: LD_INT 25
2500: PUSH
2501: LD_INT 4
2503: PUSH
2504: EMPTY
2505: LIST
2506: LIST
2507: PUSH
2508: LD_INT 50
2510: PUSH
2511: EMPTY
2512: LIST
2513: PUSH
2514: EMPTY
2515: LIST
2516: LIST
2517: PPUSH
2518: CALL_OW 72
2522: ST_TO_ADDR
// lab := FilterUnitsInArea ( amBaseArea , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
2523: LD_ADDR_VAR 0 6
2527: PUSH
2528: LD_INT 1
2530: PPUSH
2531: LD_INT 2
2533: PUSH
2534: LD_INT 30
2536: PUSH
2537: LD_INT 6
2539: PUSH
2540: EMPTY
2541: LIST
2542: LIST
2543: PUSH
2544: LD_INT 30
2546: PUSH
2547: LD_INT 7
2549: PUSH
2550: EMPTY
2551: LIST
2552: LIST
2553: PUSH
2554: LD_INT 30
2556: PUSH
2557: LD_INT 8
2559: PUSH
2560: EMPTY
2561: LIST
2562: LIST
2563: PUSH
2564: EMPTY
2565: LIST
2566: LIST
2567: LIST
2568: LIST
2569: PPUSH
2570: CALL_OW 70
2574: ST_TO_ADDR
// if sci then
2575: LD_VAR 0 11
2579: IFFALSE 2738
// begin hurtUnits := UnitFilter ( amForces , [ [ f_inarea , amBaseArea ] , [ f_tag , tHeal ] ] ) ;
2581: LD_ADDR_VAR 0 13
2585: PUSH
2586: LD_EXP 27
2590: PPUSH
2591: LD_INT 95
2593: PUSH
2594: LD_INT 1
2596: PUSH
2597: EMPTY
2598: LIST
2599: LIST
2600: PUSH
2601: LD_INT 120
2603: PUSH
2604: LD_INT 1
2606: PUSH
2607: EMPTY
2608: LIST
2609: LIST
2610: PUSH
2611: EMPTY
2612: LIST
2613: LIST
2614: PPUSH
2615: CALL_OW 72
2619: ST_TO_ADDR
// if hurtUnits then
2620: LD_VAR 0 13
2624: IFFALSE 2685
// begin for i in sci do
2626: LD_ADDR_VAR 0 1
2630: PUSH
2631: LD_VAR 0 11
2635: PUSH
2636: FOR_IN
2637: IFFALSE 2681
// if IsInUnit ( i ) then
2639: LD_VAR 0 1
2643: PPUSH
2644: CALL_OW 310
2648: IFFALSE 2661
// ComExitBuilding ( i ) else
2650: LD_VAR 0 1
2654: PPUSH
2655: CALL_OW 122
2659: GO 2679
// ComHeal ( i , hurtUnits [ 1 ] ) ;
2661: LD_VAR 0 1
2665: PPUSH
2666: LD_VAR 0 13
2670: PUSH
2671: LD_INT 1
2673: ARRAY
2674: PPUSH
2675: CALL_OW 128
2679: GO 2636
2681: POP
2682: POP
// end else
2683: GO 2738
// if lab then
2685: LD_VAR 0 6
2689: IFFALSE 2738
// begin for i in sci do
2691: LD_ADDR_VAR 0 1
2695: PUSH
2696: LD_VAR 0 11
2700: PUSH
2701: FOR_IN
2702: IFFALSE 2736
// if not IsInUnit ( i ) then
2704: LD_VAR 0 1
2708: PPUSH
2709: CALL_OW 310
2713: NOT
2714: IFFALSE 2734
// ComEnterUnit ( i , lab [ 1 ] ) ;
2716: LD_VAR 0 1
2720: PPUSH
2721: LD_VAR 0 6
2725: PUSH
2726: LD_INT 1
2728: ARRAY
2729: PPUSH
2730: CALL_OW 120
2734: GO 2701
2736: POP
2737: POP
// end ; end ; eng := UnitFilter ( amForces , [ f_class , 2 ] ) ;
2738: LD_ADDR_VAR 0 7
2742: PUSH
2743: LD_EXP 27
2747: PPUSH
2748: LD_INT 25
2750: PUSH
2751: LD_INT 2
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PPUSH
2758: CALL_OW 72
2762: ST_TO_ADDR
// if eng then
2763: LD_VAR 0 7
2767: IFFALSE 3542
// begin for i in eng do
2769: LD_ADDR_VAR 0 1
2773: PUSH
2774: LD_VAR 0 7
2778: PUSH
2779: FOR_IN
2780: IFFALSE 3540
// begin tag := GetTag ( i ) ;
2782: LD_ADDR_VAR 0 8
2786: PUSH
2787: LD_VAR 0 1
2791: PPUSH
2792: CALL_OW 110
2796: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
2797: LD_VAR 0 1
2801: PPUSH
2802: CALL_OW 256
2806: PUSH
2807: LD_INT 800
2809: LESS
2810: PUSH
2811: LD_VAR 0 8
2815: PUSH
2816: LD_INT 1
2818: NONEQUAL
2819: AND
2820: IFFALSE 2870
// begin SetTag ( i , tHeal ) ;
2822: LD_VAR 0 1
2826: PPUSH
2827: LD_INT 1
2829: PPUSH
2830: CALL_OW 109
// ComMoveXY ( i , amHealPoint [ 1 ] , amHealPoint [ 2 ] ) ;
2834: LD_VAR 0 1
2838: PPUSH
2839: LD_EXP 30
2843: PUSH
2844: LD_INT 1
2846: ARRAY
2847: PPUSH
2848: LD_EXP 30
2852: PUSH
2853: LD_INT 2
2855: ARRAY
2856: PPUSH
2857: CALL_OW 111
// AddComHold ( i ) ;
2861: LD_VAR 0 1
2865: PPUSH
2866: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
2870: LD_VAR 0 8
2874: PUSH
2875: LD_INT 1
2877: EQUAL
2878: PUSH
2879: LD_VAR 0 1
2883: PPUSH
2884: CALL_OW 256
2888: PUSH
2889: LD_INT 1000
2891: EQUAL
2892: AND
2893: IFFALSE 2907
// SetTag ( i , 0 ) ;
2895: LD_VAR 0 1
2899: PPUSH
2900: LD_INT 0
2902: PPUSH
2903: CALL_OW 109
// if not tag then
2907: LD_VAR 0 8
2911: NOT
2912: IFFALSE 3080
// begin undone := FilterUnitsInArea ( amBaseArea , [ f_constructed ] ) ;
2914: LD_ADDR_VAR 0 4
2918: PUSH
2919: LD_INT 1
2921: PPUSH
2922: LD_INT 57
2924: PUSH
2925: EMPTY
2926: LIST
2927: PPUSH
2928: CALL_OW 70
2932: ST_TO_ADDR
// if undone then
2933: LD_VAR 0 4
2937: IFFALSE 2959
// begin ComComplete ( i , undone [ 1 ] ) ;
2939: LD_VAR 0 1
2943: PPUSH
2944: LD_VAR 0 4
2948: PUSH
2949: LD_INT 1
2951: ARRAY
2952: PPUSH
2953: CALL 28888 0 2
// continue ;
2957: GO 2779
// end ; if cr or tmp or Count ( amBuildings ) then
2959: LD_VAR 0 10
2963: PUSH
2964: LD_VAR 0 2
2968: OR
2969: PUSH
2970: LD_EXP 31
2974: PPUSH
2975: CALL 22790 0 1
2979: OR
2980: IFFALSE 3056
// begin if IsInUnit ( i ) then
2982: LD_VAR 0 1
2986: PPUSH
2987: CALL_OW 310
2991: IFFALSE 3002
// ComExitBuilding ( i ) ;
2993: LD_VAR 0 1
2997: PPUSH
2998: CALL_OW 122
// if tmp then
3002: LD_VAR 0 2
3006: IFFALSE 3022
// SetTag ( i , tRepair ) else
3008: LD_VAR 0 1
3012: PPUSH
3013: LD_INT 3
3015: PPUSH
3016: CALL_OW 109
3020: GO 3054
// if cr then
3022: LD_VAR 0 10
3026: IFFALSE 3042
// SetTag ( i , tCrates ) else
3028: LD_VAR 0 1
3032: PPUSH
3033: LD_INT 2
3035: PPUSH
3036: CALL_OW 109
3040: GO 3054
// SetTag ( i , tBuild ) ;
3042: LD_VAR 0 1
3046: PPUSH
3047: LD_INT 5
3049: PPUSH
3050: CALL_OW 109
// end else
3054: GO 3080
// if not IsInUnit ( i ) then
3056: LD_VAR 0 1
3060: PPUSH
3061: CALL_OW 310
3065: NOT
3066: IFFALSE 3080
// ComEnterUnit ( i , amBase ) ;
3068: LD_VAR 0 1
3072: PPUSH
3073: LD_INT 2
3075: PPUSH
3076: CALL_OW 120
// end ; if tag = tRepair then
3080: LD_VAR 0 8
3084: PUSH
3085: LD_INT 3
3087: EQUAL
3088: IFFALSE 3190
// begin if IsInUnit ( i ) then
3090: LD_VAR 0 1
3094: PPUSH
3095: CALL_OW 310
3099: IFFALSE 3112
// begin ComExitBuilding ( i ) ;
3101: LD_VAR 0 1
3105: PPUSH
3106: CALL_OW 122
// continue ;
3110: GO 2779
// end ; if not tmp then
3112: LD_VAR 0 2
3116: NOT
3117: IFFALSE 3133
// begin SetTag ( i , 0 ) ;
3119: LD_VAR 0 1
3123: PPUSH
3124: LD_INT 0
3126: PPUSH
3127: CALL_OW 109
// continue ;
3131: GO 2779
// end ; if not HasTask ( i ) then
3133: LD_VAR 0 1
3137: PPUSH
3138: CALL_OW 314
3142: NOT
3143: IFFALSE 3163
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
3145: LD_VAR 0 1
3149: PPUSH
3150: LD_VAR 0 2
3154: PUSH
3155: LD_INT 1
3157: ARRAY
3158: PPUSH
3159: CALL_OW 130
// if not IsInArea ( i , amBaseArea ) then
3163: LD_VAR 0 1
3167: PPUSH
3168: LD_INT 1
3170: PPUSH
3171: CALL_OW 308
3175: NOT
3176: IFFALSE 3190
// ComMoveToArea ( i , amBaseArea ) ;
3178: LD_VAR 0 1
3182: PPUSH
3183: LD_INT 1
3185: PPUSH
3186: CALL_OW 113
// end ; if tag = tBuild then
3190: LD_VAR 0 8
3194: PUSH
3195: LD_INT 5
3197: EQUAL
3198: IFFALSE 3393
// begin if IsInUnit ( i ) then
3200: LD_VAR 0 1
3204: PPUSH
3205: CALL_OW 310
3209: IFFALSE 3222
// begin ComExitBuilding ( i ) ;
3211: LD_VAR 0 1
3215: PPUSH
3216: CALL_OW 122
// continue ;
3220: GO 2779
// end ; if not Count ( amBuildings ) then
3222: LD_EXP 31
3226: PPUSH
3227: CALL 22790 0 1
3231: NOT
3232: IFFALSE 3250
// begin SetTag ( i , 0 ) ;
3234: LD_VAR 0 1
3238: PPUSH
3239: LD_INT 0
3241: PPUSH
3242: CALL_OW 109
// continue ;
3246: GO 2779
// end else
3248: GO 3287
// if not CanBeBuiltOnlyResources ( amBase , amBuildings [ 1 ] [ 1 ] ) then
3250: LD_INT 2
3252: PPUSH
3253: LD_EXP 31
3257: PUSH
3258: LD_INT 1
3260: ARRAY
3261: PUSH
3262: LD_INT 1
3264: ARRAY
3265: PPUSH
3266: CALL 62322 0 2
3270: NOT
3271: IFFALSE 3287
// begin SetTag ( i , 0 ) ;
3273: LD_VAR 0 1
3277: PPUSH
3278: LD_INT 0
3280: PPUSH
3281: CALL_OW 109
// continue ;
3285: GO 2779
// end ; undone := FilterUnitsInArea ( amBaseArea , [ f_constructed ] ) ;
3287: LD_ADDR_VAR 0 4
3291: PUSH
3292: LD_INT 1
3294: PPUSH
3295: LD_INT 57
3297: PUSH
3298: EMPTY
3299: LIST
3300: PPUSH
3301: CALL_OW 70
3305: ST_TO_ADDR
// if undone then
3306: LD_VAR 0 4
3310: IFFALSE 3332
// begin ComComplete ( i , undone [ 1 ] ) ;
3312: LD_VAR 0 1
3316: PPUSH
3317: LD_VAR 0 4
3321: PUSH
3322: LD_INT 1
3324: ARRAY
3325: PPUSH
3326: CALL 28888 0 2
// continue ;
3330: GO 2779
// end ; ComBuild ( i , amBuildings [ 1 ] [ 1 ] , amBuildings [ 1 ] [ 2 ] , amBuildings [ 1 ] [ 3 ] , amBuildings [ 1 ] [ 4 ] ) ;
3332: LD_VAR 0 1
3336: PPUSH
3337: LD_EXP 31
3341: PUSH
3342: LD_INT 1
3344: ARRAY
3345: PUSH
3346: LD_INT 1
3348: ARRAY
3349: PPUSH
3350: LD_EXP 31
3354: PUSH
3355: LD_INT 1
3357: ARRAY
3358: PUSH
3359: LD_INT 2
3361: ARRAY
3362: PPUSH
3363: LD_EXP 31
3367: PUSH
3368: LD_INT 1
3370: ARRAY
3371: PUSH
3372: LD_INT 3
3374: ARRAY
3375: PPUSH
3376: LD_EXP 31
3380: PUSH
3381: LD_INT 1
3383: ARRAY
3384: PUSH
3385: LD_INT 4
3387: ARRAY
3388: PPUSH
3389: CALL_OW 145
// end ; if tag = tCrates then
3393: LD_VAR 0 8
3397: PUSH
3398: LD_INT 2
3400: EQUAL
3401: IFFALSE 3538
// begin if IsInUnit ( i ) then
3403: LD_VAR 0 1
3407: PPUSH
3408: CALL_OW 310
3412: IFFALSE 3425
// begin ComExitBuilding ( i ) ;
3414: LD_VAR 0 1
3418: PPUSH
3419: CALL_OW 122
// continue ;
3423: GO 2779
// end ; if not cr then
3425: LD_VAR 0 10
3429: NOT
3430: IFFALSE 3446
// begin SetTag ( i , 0 ) ;
3432: LD_VAR 0 1
3436: PPUSH
3437: LD_INT 0
3439: PPUSH
3440: CALL_OW 109
// continue ;
3444: GO 2779
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
3446: LD_VAR 0 1
3450: PPUSH
3451: CALL_OW 314
3455: NOT
3456: PUSH
3457: LD_INT 81
3459: PUSH
3460: LD_VAR 0 5
3464: PUSH
3465: EMPTY
3466: LIST
3467: LIST
3468: PUSH
3469: LD_INT 92
3471: PUSH
3472: LD_VAR 0 10
3476: PUSH
3477: LD_INT 1
3479: ARRAY
3480: PUSH
3481: LD_VAR 0 10
3485: PUSH
3486: LD_INT 2
3488: ARRAY
3489: PUSH
3490: LD_INT 12
3492: PUSH
3493: EMPTY
3494: LIST
3495: LIST
3496: LIST
3497: LIST
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PPUSH
3503: CALL_OW 69
3507: NOT
3508: AND
3509: IFFALSE 3538
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
3511: LD_VAR 0 1
3515: PPUSH
3516: LD_VAR 0 10
3520: PUSH
3521: LD_INT 1
3523: ARRAY
3524: PPUSH
3525: LD_VAR 0 10
3529: PUSH
3530: LD_INT 2
3532: ARRAY
3533: PPUSH
3534: CALL_OW 117
// end ; end ;
3538: GO 2779
3540: POP
3541: POP
// end ; sol := UnitFilter ( amForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] ] , [ f_ok ] ] ) union amCommander ;
3542: LD_ADDR_VAR 0 12
3546: PUSH
3547: LD_EXP 27
3551: PPUSH
3552: LD_INT 2
3554: PUSH
3555: LD_INT 25
3557: PUSH
3558: LD_INT 1
3560: PUSH
3561: EMPTY
3562: LIST
3563: LIST
3564: PUSH
3565: LD_INT 25
3567: PUSH
3568: LD_INT 5
3570: PUSH
3571: EMPTY
3572: LIST
3573: LIST
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: LIST
3579: PUSH
3580: LD_INT 50
3582: PUSH
3583: EMPTY
3584: LIST
3585: PUSH
3586: EMPTY
3587: LIST
3588: LIST
3589: PPUSH
3590: CALL_OW 72
3594: PUSH
3595: LD_EXP 33
3599: UNION
3600: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( amBaseArea , [ f_enemy , side ] ) ;
3601: LD_ADDR_VAR 0 14
3605: PUSH
3606: LD_INT 1
3608: PPUSH
3609: LD_INT 81
3611: PUSH
3612: LD_VAR 0 5
3616: PUSH
3617: EMPTY
3618: LIST
3619: LIST
3620: PPUSH
3621: CALL_OW 70
3625: ST_TO_ADDR
// if sol then
3626: LD_VAR 0 12
3630: IFFALSE 4181
// begin if enemyInBase then
3632: LD_VAR 0 14
3636: IFFALSE 3781
// begin for i in sol do
3638: LD_ADDR_VAR 0 1
3642: PUSH
3643: LD_VAR 0 12
3647: PUSH
3648: FOR_IN
3649: IFFALSE 3777
// begin tw := IsInUnit ( i ) ;
3651: LD_ADDR_VAR 0 9
3655: PUSH
3656: LD_VAR 0 1
3660: PPUSH
3661: CALL_OW 310
3665: ST_TO_ADDR
// if tw then
3666: LD_VAR 0 9
3670: IFFALSE 3751
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
3672: LD_VAR 0 9
3676: PUSH
3677: LD_INT 22
3679: PUSH
3680: LD_VAR 0 5
3684: PUSH
3685: EMPTY
3686: LIST
3687: LIST
3688: PUSH
3689: LD_INT 101
3691: PUSH
3692: LD_INT 2
3694: PUSH
3695: EMPTY
3696: LIST
3697: LIST
3698: PUSH
3699: LD_INT 2
3701: PUSH
3702: LD_INT 30
3704: PUSH
3705: LD_INT 32
3707: PUSH
3708: EMPTY
3709: LIST
3710: LIST
3711: PUSH
3712: LD_INT 30
3714: PUSH
3715: LD_INT 31
3717: PUSH
3718: EMPTY
3719: LIST
3720: LIST
3721: PUSH
3722: EMPTY
3723: LIST
3724: LIST
3725: LIST
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: LIST
3731: PPUSH
3732: CALL_OW 69
3736: IN
3737: NOT
3738: IFFALSE 3749
// ComExitBuilding ( i ) ;
3740: LD_VAR 0 1
3744: PPUSH
3745: CALL_OW 122
// end else
3749: GO 3775
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
3751: LD_VAR 0 1
3755: PPUSH
3756: LD_VAR 0 14
3760: PPUSH
3761: LD_VAR 0 1
3765: PPUSH
3766: CALL_OW 74
3770: PPUSH
3771: CALL_OW 115
// end ;
3775: GO 3648
3777: POP
3778: POP
// end else
3779: GO 4181
// begin empty := FilterUnitsInArea ( amBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
3781: LD_ADDR_VAR 0 15
3785: PUSH
3786: LD_INT 1
3788: PPUSH
3789: LD_INT 3
3791: PUSH
3792: LD_INT 62
3794: PUSH
3795: EMPTY
3796: LIST
3797: PUSH
3798: EMPTY
3799: LIST
3800: LIST
3801: PUSH
3802: LD_INT 2
3804: PUSH
3805: LD_INT 30
3807: PUSH
3808: LD_INT 32
3810: PUSH
3811: EMPTY
3812: LIST
3813: LIST
3814: PUSH
3815: LD_INT 30
3817: PUSH
3818: LD_INT 4
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: PUSH
3825: LD_INT 30
3827: PUSH
3828: LD_INT 5
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: PUSH
3835: LD_INT 30
3837: PUSH
3838: LD_INT 31
3840: PUSH
3841: EMPTY
3842: LIST
3843: LIST
3844: PUSH
3845: EMPTY
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: PUSH
3852: EMPTY
3853: LIST
3854: LIST
3855: PPUSH
3856: CALL_OW 70
3860: ST_TO_ADDR
// if empty then
3861: LD_VAR 0 15
3865: IFFALSE 3882
// empty := ReverseArray ( empty ) ;
3867: LD_ADDR_VAR 0 15
3871: PUSH
3872: LD_VAR 0 15
3876: PPUSH
3877: CALL 53666 0 1
3881: ST_TO_ADDR
// for i in sol do
3882: LD_ADDR_VAR 0 1
3886: PUSH
3887: LD_VAR 0 12
3891: PUSH
3892: FOR_IN
3893: IFFALSE 4179
// begin tag := GetTag ( i ) ;
3895: LD_ADDR_VAR 0 8
3899: PUSH
3900: LD_VAR 0 1
3904: PPUSH
3905: CALL_OW 110
3909: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
3910: LD_VAR 0 1
3914: PPUSH
3915: CALL_OW 256
3919: PUSH
3920: LD_INT 1000
3922: LESS
3923: PUSH
3924: LD_VAR 0 8
3928: PUSH
3929: LD_INT 1
3931: NONEQUAL
3932: AND
3933: IFFALSE 3985
// begin SetTag ( i , tHeal ) ;
3935: LD_VAR 0 1
3939: PPUSH
3940: LD_INT 1
3942: PPUSH
3943: CALL_OW 109
// ComMoveXY ( i , amHealPoint [ 1 ] , amHealPoint [ 2 ] ) ;
3947: LD_VAR 0 1
3951: PPUSH
3952: LD_EXP 30
3956: PUSH
3957: LD_INT 1
3959: ARRAY
3960: PPUSH
3961: LD_EXP 30
3965: PUSH
3966: LD_INT 2
3968: ARRAY
3969: PPUSH
3970: CALL_OW 111
// AddComHold ( i ) ;
3974: LD_VAR 0 1
3978: PPUSH
3979: CALL_OW 200
// continue ;
3983: GO 3892
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
3985: LD_VAR 0 1
3989: PPUSH
3990: CALL_OW 256
3994: PUSH
3995: LD_INT 1000
3997: EQUAL
3998: PUSH
3999: LD_VAR 0 8
4003: PUSH
4004: LD_INT 1
4006: EQUAL
4007: AND
4008: IFFALSE 4024
// begin SetTag ( i , 0 ) ;
4010: LD_VAR 0 1
4014: PPUSH
4015: LD_INT 0
4017: PPUSH
4018: CALL_OW 109
// continue ;
4022: GO 3892
// end ; if not IsInArea ( i , amBaseArea ) and not IsInUnit ( i ) then
4024: LD_VAR 0 1
4028: PPUSH
4029: LD_INT 1
4031: PPUSH
4032: CALL_OW 308
4036: NOT
4037: PUSH
4038: LD_VAR 0 1
4042: PPUSH
4043: CALL_OW 310
4047: NOT
4048: AND
4049: IFFALSE 4063
// ComMoveToArea ( i , amBaseArea ) ;
4051: LD_VAR 0 1
4055: PPUSH
4056: LD_INT 1
4058: PPUSH
4059: CALL_OW 113
// if HasTask ( i ) then
4063: LD_VAR 0 1
4067: PPUSH
4068: CALL_OW 314
4072: IFFALSE 4076
// continue ;
4074: GO 3892
// if not IsInUnit ( i ) and not tag and empty then
4076: LD_VAR 0 1
4080: PPUSH
4081: CALL_OW 310
4085: NOT
4086: PUSH
4087: LD_VAR 0 8
4091: NOT
4092: AND
4093: PUSH
4094: LD_VAR 0 15
4098: AND
4099: IFFALSE 4177
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
4101: LD_VAR 0 1
4105: PPUSH
4106: LD_VAR 0 15
4110: PUSH
4111: LD_INT 1
4113: ARRAY
4114: PPUSH
4115: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
4119: LD_VAR 0 15
4123: PUSH
4124: LD_INT 1
4126: ARRAY
4127: PPUSH
4128: CALL_OW 266
4132: PUSH
4133: LD_INT 5
4135: EQUAL
4136: PUSH
4137: LD_INT 50
4139: PPUSH
4140: CALL_OW 13
4144: AND
4145: IFFALSE 4159
// AddComChangeProfession ( i , class_sniper ) ;
4147: LD_VAR 0 1
4151: PPUSH
4152: LD_INT 5
4154: PPUSH
4155: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
4159: LD_ADDR_VAR 0 15
4163: PUSH
4164: LD_VAR 0 15
4168: PPUSH
4169: LD_INT 1
4171: PPUSH
4172: CALL_OW 3
4176: ST_TO_ADDR
// end ; end ;
4177: GO 3892
4179: POP
4180: POP
// end ; end ; end ;
4181: PPOPN 18
4183: END
// every 0 0$2 trigger IsOk ( amCargo ) and amScriptActive do var cr , enemyInArea ;
4184: LD_EXP 34
4188: PPUSH
4189: CALL_OW 302
4193: PUSH
4194: LD_EXP 3
4198: AND
4199: IFFALSE 4481
4201: GO 4203
4203: DISABLE
4204: LD_INT 0
4206: PPUSH
4207: PPUSH
// begin enable ;
4208: ENABLE
// enemyInArea := FilterUnitsInArea ( amBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
4209: LD_ADDR_VAR 0 2
4213: PUSH
4214: LD_INT 1
4216: PPUSH
4217: LD_INT 81
4219: PUSH
4220: LD_INT 1
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: PUSH
4227: LD_INT 50
4229: PUSH
4230: EMPTY
4231: LIST
4232: PUSH
4233: EMPTY
4234: LIST
4235: LIST
4236: PPUSH
4237: CALL_OW 70
4241: ST_TO_ADDR
// cr := GetListOfCratesInArea ( cratesWestArea ) ;
4242: LD_ADDR_VAR 0 1
4246: PUSH
4247: LD_INT 17
4249: PPUSH
4250: CALL_OW 435
4254: ST_TO_ADDR
// if GetFuel ( amCargo ) < 10 and not See ( 2 , amCargo ) and GetEngine ( amCargo ) = engine_combustion then
4255: LD_EXP 34
4259: PPUSH
4260: CALL_OW 261
4264: PUSH
4265: LD_INT 10
4267: LESS
4268: PUSH
4269: LD_INT 2
4271: PPUSH
4272: LD_EXP 34
4276: PPUSH
4277: CALL_OW 292
4281: NOT
4282: AND
4283: PUSH
4284: LD_EXP 34
4288: PPUSH
4289: CALL_OW 262
4293: PUSH
4294: LD_INT 1
4296: EQUAL
4297: AND
4298: IFFALSE 4312
// SetFuel ( amCargo , 100 ) ;
4300: LD_EXP 34
4304: PPUSH
4305: LD_INT 100
4307: PPUSH
4308: CALL_OW 240
// if not HasTask ( amCargo ) and GetCargo ( amCargo , mat_cans ) < 100 and not enemyInArea then
4312: LD_EXP 34
4316: PPUSH
4317: CALL_OW 314
4321: NOT
4322: PUSH
4323: LD_EXP 34
4327: PPUSH
4328: LD_INT 1
4330: PPUSH
4331: CALL_OW 289
4335: PUSH
4336: LD_INT 100
4338: LESS
4339: AND
4340: PUSH
4341: LD_VAR 0 2
4345: NOT
4346: AND
4347: IFFALSE 4413
// begin if cr then
4349: LD_VAR 0 1
4353: IFFALSE 4384
// ComCollect ( amCargo , cr [ 1 ] , cr [ 2 ] ) else
4355: LD_EXP 34
4359: PPUSH
4360: LD_VAR 0 1
4364: PUSH
4365: LD_INT 1
4367: ARRAY
4368: PPUSH
4369: LD_VAR 0 1
4373: PUSH
4374: LD_INT 2
4376: ARRAY
4377: PPUSH
4378: CALL_OW 117
4382: GO 4411
// if not IsInArea ( amCargo , cratesWestArea ) then
4384: LD_EXP 34
4388: PPUSH
4389: LD_INT 17
4391: PPUSH
4392: CALL_OW 308
4396: NOT
4397: IFFALSE 4411
// ComMoveToArea ( amCargo , cratesWestArea ) ;
4399: LD_EXP 34
4403: PPUSH
4404: LD_INT 17
4406: PPUSH
4407: CALL_OW 113
// exit ;
4411: GO 4481
// end ; if enemyInArea and not IsInArea ( amCargo , amBaseArea ) then
4413: LD_VAR 0 2
4417: PUSH
4418: LD_EXP 34
4422: PPUSH
4423: LD_INT 1
4425: PPUSH
4426: CALL_OW 308
4430: NOT
4431: AND
4432: IFFALSE 4451
// ComMoveXY ( amCargo , 93 , 137 ) else
4434: LD_EXP 34
4438: PPUSH
4439: LD_INT 93
4441: PPUSH
4442: LD_INT 137
4444: PPUSH
4445: CALL_OW 111
4449: GO 4481
// if GetCargo ( amCargo , mat_cans ) = 100 then
4451: LD_EXP 34
4455: PPUSH
4456: LD_INT 1
4458: PPUSH
4459: CALL_OW 289
4463: PUSH
4464: LD_INT 100
4466: EQUAL
4467: IFFALSE 4481
// ComGive ( amCargo , amBase ) ;
4469: LD_EXP 34
4473: PPUSH
4474: LD_INT 2
4476: PPUSH
4477: CALL_OW 161
// end ;
4481: PPOPN 2
4483: END
// every 0 0$2 trigger amScriptActive and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) do var i , tmp , tmp2 ;
4484: LD_EXP 3
4488: PUSH
4489: LD_INT 22
4491: PUSH
4492: LD_INT 1
4494: PUSH
4495: EMPTY
4496: LIST
4497: LIST
4498: PUSH
4499: LD_INT 3
4501: PUSH
4502: LD_INT 60
4504: PUSH
4505: EMPTY
4506: LIST
4507: PUSH
4508: EMPTY
4509: LIST
4510: LIST
4511: PUSH
4512: LD_INT 50
4514: PUSH
4515: EMPTY
4516: LIST
4517: PUSH
4518: LD_INT 34
4520: PUSH
4521: LD_INT 13
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: LIST
4532: LIST
4533: PPUSH
4534: CALL_OW 69
4538: AND
4539: PUSH
4540: LD_INT 22
4542: PUSH
4543: LD_INT 1
4545: PUSH
4546: EMPTY
4547: LIST
4548: LIST
4549: PUSH
4550: LD_INT 3
4552: PUSH
4553: LD_INT 24
4555: PUSH
4556: LD_INT 1000
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: PUSH
4567: LD_INT 21
4569: PUSH
4570: LD_INT 3
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: LIST
4581: PPUSH
4582: CALL_OW 69
4586: AND
4587: IFFALSE 4820
4589: GO 4591
4591: DISABLE
4592: LD_INT 0
4594: PPUSH
4595: PPUSH
4596: PPUSH
// begin enable ;
4597: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
4598: LD_ADDR_VAR 0 2
4602: PUSH
4603: LD_INT 22
4605: PUSH
4606: LD_INT 1
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: PUSH
4613: LD_INT 3
4615: PUSH
4616: LD_INT 24
4618: PUSH
4619: LD_INT 1000
4621: PUSH
4622: EMPTY
4623: LIST
4624: LIST
4625: PUSH
4626: EMPTY
4627: LIST
4628: LIST
4629: PUSH
4630: LD_INT 21
4632: PUSH
4633: LD_INT 3
4635: PUSH
4636: EMPTY
4637: LIST
4638: LIST
4639: PUSH
4640: EMPTY
4641: LIST
4642: LIST
4643: LIST
4644: PPUSH
4645: CALL_OW 69
4649: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 600 ] ] , [ f_type , unit_building ] ] ) ;
4650: LD_ADDR_VAR 0 3
4654: PUSH
4655: LD_INT 22
4657: PUSH
4658: LD_INT 1
4660: PUSH
4661: EMPTY
4662: LIST
4663: LIST
4664: PUSH
4665: LD_INT 3
4667: PUSH
4668: LD_INT 24
4670: PUSH
4671: LD_INT 600
4673: PUSH
4674: EMPTY
4675: LIST
4676: LIST
4677: PUSH
4678: EMPTY
4679: LIST
4680: LIST
4681: PUSH
4682: LD_INT 21
4684: PUSH
4685: LD_INT 3
4687: PUSH
4688: EMPTY
4689: LIST
4690: LIST
4691: PUSH
4692: EMPTY
4693: LIST
4694: LIST
4695: LIST
4696: PPUSH
4697: CALL_OW 69
4701: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
4702: LD_ADDR_VAR 0 1
4706: PUSH
4707: LD_INT 22
4709: PUSH
4710: LD_INT 1
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: PUSH
4717: LD_INT 3
4719: PUSH
4720: LD_INT 60
4722: PUSH
4723: EMPTY
4724: LIST
4725: PUSH
4726: EMPTY
4727: LIST
4728: LIST
4729: PUSH
4730: LD_INT 50
4732: PUSH
4733: EMPTY
4734: LIST
4735: PUSH
4736: LD_INT 34
4738: PUSH
4739: LD_INT 13
4741: PUSH
4742: EMPTY
4743: LIST
4744: LIST
4745: PUSH
4746: EMPTY
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: PPUSH
4752: CALL_OW 69
4756: PUSH
4757: FOR_IN
4758: IFFALSE 4818
// begin if tmp2 then
4760: LD_VAR 0 3
4764: IFFALSE 4792
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp2 , i ) ) else
4766: LD_VAR 0 1
4770: PPUSH
4771: LD_VAR 0 3
4775: PPUSH
4776: LD_VAR 0 1
4780: PPUSH
4781: CALL_OW 74
4785: PPUSH
4786: CALL_OW 130
4790: GO 4816
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
4792: LD_VAR 0 1
4796: PPUSH
4797: LD_VAR 0 2
4801: PPUSH
4802: LD_VAR 0 1
4806: PPUSH
4807: CALL_OW 74
4811: PPUSH
4812: CALL_OW 130
// end ;
4816: GO 4757
4818: POP
4819: POP
// end ;
4820: PPOPN 3
4822: END
// every 0 0$2 trigger amPatrol and gameActive and not americanDestroyed do var i , j , points , x , y , tag , enemy ;
4823: LD_EXP 35
4827: PUSH
4828: LD_EXP 19
4832: AND
4833: PUSH
4834: LD_EXP 11
4838: NOT
4839: AND
4840: IFFALSE 5165
4842: GO 4844
4844: DISABLE
4845: LD_INT 0
4847: PPUSH
4848: PPUSH
4849: PPUSH
4850: PPUSH
4851: PPUSH
4852: PPUSH
4853: PPUSH
// begin enable ;
4854: ENABLE
// points := [ [ patrol1aArea , patrol1bArea ] , [ patrol2aArea , patrol2bArea , patrol2cArea , patrol2dArea , patrol2bArea ] , [ patrol3aArea , patrol3bArea , patrol3cArea , patrol3dArea , patrol3eArea , patrol3fArea , patrol3gArea , patrol3hArea ] ] ;
4855: LD_ADDR_VAR 0 3
4859: PUSH
4860: LD_INT 30
4862: PUSH
4863: LD_INT 31
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: PUSH
4870: LD_INT 32
4872: PUSH
4873: LD_INT 33
4875: PUSH
4876: LD_INT 34
4878: PUSH
4879: LD_INT 35
4881: PUSH
4882: LD_INT 33
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: PUSH
4892: LD_INT 36
4894: PUSH
4895: LD_INT 37
4897: PUSH
4898: LD_INT 38
4900: PUSH
4901: LD_INT 39
4903: PUSH
4904: LD_INT 40
4906: PUSH
4907: LD_INT 41
4909: PUSH
4910: LD_INT 42
4912: PUSH
4913: LD_INT 43
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: PUSH
4926: EMPTY
4927: LIST
4928: LIST
4929: LIST
4930: ST_TO_ADDR
// for i in amPatrol do
4931: LD_ADDR_VAR 0 1
4935: PUSH
4936: LD_EXP 35
4940: PUSH
4941: FOR_IN
4942: IFFALSE 5163
// begin if See ( 2 , i ) then
4944: LD_INT 2
4946: PPUSH
4947: LD_VAR 0 1
4951: PPUSH
4952: CALL_OW 292
4956: IFFALSE 5059
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ;
4958: LD_ADDR_VAR 0 7
4962: PUSH
4963: LD_INT 22
4965: PUSH
4966: LD_INT 2
4968: PUSH
4969: EMPTY
4970: LIST
4971: LIST
4972: PPUSH
4973: CALL_OW 69
4977: PPUSH
4978: LD_VAR 0 1
4982: PPUSH
4983: CALL_OW 74
4987: ST_TO_ADDR
// if enemy then
4988: LD_VAR 0 7
4992: IFFALSE 5059
// begin x := GetX ( enemy ) ;
4994: LD_ADDR_VAR 0 4
4998: PUSH
4999: LD_VAR 0 7
5003: PPUSH
5004: CALL_OW 250
5008: ST_TO_ADDR
// y := GetY ( enemy ) ;
5009: LD_ADDR_VAR 0 5
5013: PUSH
5014: LD_VAR 0 7
5018: PPUSH
5019: CALL_OW 251
5023: ST_TO_ADDR
// if ValidHex ( x , y ) then
5024: LD_VAR 0 4
5028: PPUSH
5029: LD_VAR 0 5
5033: PPUSH
5034: CALL_OW 488
5038: IFFALSE 5059
// ComAgressiveMove ( i , x , y ) ;
5040: LD_VAR 0 1
5044: PPUSH
5045: LD_VAR 0 4
5049: PPUSH
5050: LD_VAR 0 5
5054: PPUSH
5055: CALL_OW 114
// end ; end ; if HasTask ( i ) then
5059: LD_VAR 0 1
5063: PPUSH
5064: CALL_OW 314
5068: IFFALSE 5072
// continue ;
5070: GO 4941
// tag := GetTag ( i ) ;
5072: LD_ADDR_VAR 0 6
5076: PUSH
5077: LD_VAR 0 1
5081: PPUSH
5082: CALL_OW 110
5086: ST_TO_ADDR
// for j := 1 to points [ tag ] do
5087: LD_ADDR_VAR 0 2
5091: PUSH
5092: DOUBLE
5093: LD_INT 1
5095: DEC
5096: ST_TO_ADDR
5097: LD_VAR 0 3
5101: PUSH
5102: LD_VAR 0 6
5106: ARRAY
5107: PUSH
5108: FOR_TO
5109: IFFALSE 5159
// begin AddComMoveToArea ( i , points [ tag ] [ j ] ) ;
5111: LD_VAR 0 1
5115: PPUSH
5116: LD_VAR 0 3
5120: PUSH
5121: LD_VAR 0 6
5125: ARRAY
5126: PUSH
5127: LD_VAR 0 2
5131: ARRAY
5132: PPUSH
5133: CALL_OW 173
// AddComWait ( i , rand ( 0 0$5 , 0 0$11 ) ) ;
5137: LD_VAR 0 1
5141: PPUSH
5142: LD_INT 175
5144: PPUSH
5145: LD_INT 385
5147: PPUSH
5148: CALL_OW 12
5152: PPUSH
5153: CALL_OW 202
// end ;
5157: GO 5108
5159: POP
5160: POP
// end ;
5161: GO 4941
5163: POP
5164: POP
// end ;
5165: PPOPN 7
5167: END
// every 10 10$00 trigger Count ( amTanks ) < 5 and amScriptActive and spotByAmerican and spotArabianBase do var i , parts , part ;
5168: LD_EXP 32
5172: PPUSH
5173: CALL 22790 0 1
5177: PUSH
5178: LD_INT 5
5180: LESS
5181: PUSH
5182: LD_EXP 3
5186: AND
5187: PUSH
5188: LD_EXP 8
5192: AND
5193: PUSH
5194: LD_EXP 7
5198: AND
5199: IFFALSE 5459
5201: GO 5203
5203: DISABLE
5204: LD_INT 0
5206: PPUSH
5207: PPUSH
5208: PPUSH
// begin enable ;
5209: ENABLE
// parts := [ [ us_medium_tracked , us_laser ] , [ us_heavy_tracked , us_laser ] , [ us_heavy_tracked , us_heavy_gun ] , [ us_medium_tracked , us_double_gun ] , [ us_medium_wheeled , us_gatling_gun ] , [ us_light_wheeled , us_machine_gun ] ] ;
5210: LD_ADDR_VAR 0 2
5214: PUSH
5215: LD_INT 3
5217: PUSH
5218: LD_INT 9
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: PUSH
5225: LD_INT 4
5227: PUSH
5228: LD_INT 9
5230: PUSH
5231: EMPTY
5232: LIST
5233: LIST
5234: PUSH
5235: LD_INT 4
5237: PUSH
5238: LD_INT 6
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: PUSH
5245: LD_INT 3
5247: PUSH
5248: LD_INT 5
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: PUSH
5255: LD_INT 2
5257: PUSH
5258: LD_INT 4
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PUSH
5265: LD_INT 1
5267: PUSH
5268: LD_INT 2
5270: PUSH
5271: EMPTY
5272: LIST
5273: LIST
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: LIST
5282: ST_TO_ADDR
// if americanWave > [ 5 , 6 , 7 , 8 ] [ Difficulty ] then
5283: LD_EXP 22
5287: PUSH
5288: LD_INT 5
5290: PUSH
5291: LD_INT 6
5293: PUSH
5294: LD_INT 7
5296: PUSH
5297: LD_INT 8
5299: PUSH
5300: EMPTY
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: PUSH
5306: LD_OWVAR 67
5310: ARRAY
5311: GREATER
5312: IFFALSE 5343
// americanWave := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
5314: LD_ADDR_EXP 22
5318: PUSH
5319: LD_INT 5
5321: PUSH
5322: LD_INT 6
5324: PUSH
5325: LD_INT 7
5327: PUSH
5328: LD_INT 8
5330: PUSH
5331: EMPTY
5332: LIST
5333: LIST
5334: LIST
5335: LIST
5336: PUSH
5337: LD_OWVAR 67
5341: ARRAY
5342: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] + americanWave do
5343: LD_ADDR_VAR 0 1
5347: PUSH
5348: DOUBLE
5349: LD_INT 1
5351: DEC
5352: ST_TO_ADDR
5353: LD_INT 3
5355: PUSH
5356: LD_INT 4
5358: PUSH
5359: LD_INT 5
5361: PUSH
5362: LD_INT 6
5364: PUSH
5365: EMPTY
5366: LIST
5367: LIST
5368: LIST
5369: LIST
5370: PUSH
5371: LD_OWVAR 67
5375: ARRAY
5376: PUSH
5377: LD_EXP 22
5381: PLUS
5382: PUSH
5383: FOR_TO
5384: IFFALSE 5457
// begin part := parts [ rand ( 1 , parts ) ] ;
5386: LD_ADDR_VAR 0 3
5390: PUSH
5391: LD_VAR 0 2
5395: PUSH
5396: LD_INT 1
5398: PPUSH
5399: LD_VAR 0 2
5403: PPUSH
5404: CALL_OW 12
5408: ARRAY
5409: ST_TO_ADDR
// amConstructList := Join ( amConstructList , [ part [ 1 ] , engine_combustion , control_remote , part [ 2 ] ] ) end ;
5410: LD_ADDR_EXP 29
5414: PUSH
5415: LD_EXP 29
5419: PPUSH
5420: LD_VAR 0 3
5424: PUSH
5425: LD_INT 1
5427: ARRAY
5428: PUSH
5429: LD_INT 1
5431: PUSH
5432: LD_INT 2
5434: PUSH
5435: LD_VAR 0 3
5439: PUSH
5440: LD_INT 2
5442: ARRAY
5443: PUSH
5444: EMPTY
5445: LIST
5446: LIST
5447: LIST
5448: LIST
5449: PPUSH
5450: CALL 58399 0 2
5454: ST_TO_ADDR
5455: GO 5383
5457: POP
5458: POP
// end ;
5459: PPOPN 3
5461: END
// every 3 3$00 trigger not americanDestroyed and Count ( amTanks ) and spotByAmerican and spotArabianBase do var i , tmp , tmp2 ;
5462: LD_EXP 11
5466: NOT
5467: PUSH
5468: LD_EXP 32
5472: PPUSH
5473: CALL 22790 0 1
5477: AND
5478: PUSH
5479: LD_EXP 8
5483: AND
5484: PUSH
5485: LD_EXP 7
5489: AND
5490: IFFALSE 5839
5492: GO 5494
5494: DISABLE
5495: LD_INT 0
5497: PPUSH
5498: PPUSH
5499: PPUSH
// begin enable ;
5500: ENABLE
// tmp := UnitFilter ( amTanks , [ [ f_linked ] , [ f_ok ] ] ) ;
5501: LD_ADDR_VAR 0 2
5505: PUSH
5506: LD_EXP 32
5510: PPUSH
5511: LD_INT 61
5513: PUSH
5514: EMPTY
5515: LIST
5516: PUSH
5517: LD_INT 50
5519: PUSH
5520: EMPTY
5521: LIST
5522: PUSH
5523: EMPTY
5524: LIST
5525: LIST
5526: PPUSH
5527: CALL_OW 72
5531: ST_TO_ADDR
// amTanks := amTanks diff tmp ;
5532: LD_ADDR_EXP 32
5536: PUSH
5537: LD_EXP 32
5541: PUSH
5542: LD_VAR 0 2
5546: DIFF
5547: ST_TO_ADDR
// if not tmp then
5548: LD_VAR 0 2
5552: NOT
5553: IFFALSE 5557
// exit ;
5555: GO 5839
// tmp2 := UnitFilter ( tmp , [ f_weapon , us_machine_gun ] ) ;
5557: LD_ADDR_VAR 0 3
5561: PUSH
5562: LD_VAR 0 2
5566: PPUSH
5567: LD_INT 34
5569: PUSH
5570: LD_INT 2
5572: PUSH
5573: EMPTY
5574: LIST
5575: LIST
5576: PPUSH
5577: CALL_OW 72
5581: ST_TO_ADDR
// if tmp2 then
5582: LD_VAR 0 3
5586: IFFALSE 5604
// tmp := tmp diff tmp2 ;
5588: LD_ADDR_VAR 0 2
5592: PUSH
5593: LD_VAR 0 2
5597: PUSH
5598: LD_VAR 0 3
5602: DIFF
5603: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5604: LD_INT 35
5606: PPUSH
5607: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
5611: LD_ADDR_VAR 0 2
5615: PUSH
5616: LD_VAR 0 2
5620: PPUSH
5621: LD_INT 50
5623: PUSH
5624: EMPTY
5625: LIST
5626: PPUSH
5627: CALL_OW 72
5631: ST_TO_ADDR
// for i in tmp do
5632: LD_ADDR_VAR 0 1
5636: PUSH
5637: LD_VAR 0 2
5641: PUSH
5642: FOR_IN
5643: IFFALSE 5691
// AgressiveMove ( i , [ [ 187 , 114 ] , [ 203 , 113 ] , [ 218 , 108 ] ] ) ;
5645: LD_VAR 0 1
5649: PPUSH
5650: LD_INT 187
5652: PUSH
5653: LD_INT 114
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: PUSH
5660: LD_INT 203
5662: PUSH
5663: LD_INT 113
5665: PUSH
5666: EMPTY
5667: LIST
5668: LIST
5669: PUSH
5670: LD_INT 218
5672: PUSH
5673: LD_INT 108
5675: PUSH
5676: EMPTY
5677: LIST
5678: LIST
5679: PUSH
5680: EMPTY
5681: LIST
5682: LIST
5683: LIST
5684: PPUSH
5685: CALL 61003 0 2
5689: GO 5642
5691: POP
5692: POP
// tmp2 := UnitFilter ( tmp2 , [ f_ok ] ) ;
5693: LD_ADDR_VAR 0 3
5697: PUSH
5698: LD_VAR 0 3
5702: PPUSH
5703: LD_INT 50
5705: PUSH
5706: EMPTY
5707: LIST
5708: PPUSH
5709: CALL_OW 72
5713: ST_TO_ADDR
// for i in tmp2 do
5714: LD_ADDR_VAR 0 1
5718: PUSH
5719: LD_VAR 0 3
5723: PUSH
5724: FOR_IN
5725: IFFALSE 5815
// if GetDistUnitXY ( i , 242 , 105 ) > 12 then
5727: LD_VAR 0 1
5731: PPUSH
5732: LD_INT 242
5734: PPUSH
5735: LD_INT 105
5737: PPUSH
5738: CALL_OW 297
5742: PUSH
5743: LD_INT 12
5745: GREATER
5746: IFFALSE 5765
// ComMoveXY ( i , 242 , 105 ) else
5748: LD_VAR 0 1
5752: PPUSH
5753: LD_INT 242
5755: PPUSH
5756: LD_INT 105
5758: PPUSH
5759: CALL_OW 111
5763: GO 5813
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_type , unit_human ] ] ) , i ) ) ;
5765: LD_VAR 0 1
5769: PPUSH
5770: LD_INT 81
5772: PUSH
5773: LD_INT 1
5775: PUSH
5776: EMPTY
5777: LIST
5778: LIST
5779: PUSH
5780: LD_INT 21
5782: PUSH
5783: LD_INT 1
5785: PUSH
5786: EMPTY
5787: LIST
5788: LIST
5789: PUSH
5790: EMPTY
5791: LIST
5792: LIST
5793: PPUSH
5794: CALL_OW 69
5798: PPUSH
5799: LD_VAR 0 1
5803: PPUSH
5804: CALL_OW 74
5808: PPUSH
5809: CALL_OW 115
5813: GO 5724
5815: POP
5816: POP
// until not tmp ;
5817: LD_VAR 0 2
5821: NOT
5822: IFFALSE 5604
// americanWave := Inc ( americanWave ) ;
5824: LD_ADDR_EXP 22
5828: PUSH
5829: LD_EXP 22
5833: PPUSH
5834: CALL 59760 0 1
5838: ST_TO_ADDR
// end ; end_of_file
5839: PPOPN 3
5841: END
// export Farmer ; export legForces , legEForces , legTech , legConstructList , legHealPoint , legBuildings , legTanks , legRTanks , legCargo ; export function PrepareLegion ; var i , j , b , un , skill , sources ; begin
5842: LD_INT 0
5844: PPUSH
5845: PPUSH
5846: PPUSH
5847: PPUSH
5848: PPUSH
5849: PPUSH
5850: PPUSH
// uc_side := 8 ;
5851: LD_ADDR_OWVAR 20
5855: PUSH
5856: LD_INT 8
5858: ST_TO_ADDR
// uc_nation := nation_arabian ;
5859: LD_ADDR_OWVAR 21
5863: PUSH
5864: LD_INT 2
5866: ST_TO_ADDR
// legForces := [ ] ;
5867: LD_ADDR_EXP 37
5871: PUSH
5872: EMPTY
5873: ST_TO_ADDR
// legEForces := [ ] ;
5874: LD_ADDR_EXP 38
5878: PUSH
5879: EMPTY
5880: ST_TO_ADDR
// legTech := GetTechNation ( 8 , nation_arabian , state_enabled ) ;
5881: LD_ADDR_EXP 39
5885: PUSH
5886: LD_INT 8
5888: PPUSH
5889: LD_INT 2
5891: PPUSH
5892: LD_INT 1
5894: PPUSH
5895: CALL 20751 0 3
5899: ST_TO_ADDR
// legConstructList := [ [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ] ;
5900: LD_ADDR_EXP 40
5904: PUSH
5905: LD_INT 13
5907: PUSH
5908: LD_INT 1
5910: PUSH
5911: LD_INT 2
5913: PUSH
5914: LD_INT 32
5916: PUSH
5917: EMPTY
5918: LIST
5919: LIST
5920: LIST
5921: LIST
5922: PUSH
5923: EMPTY
5924: LIST
5925: ST_TO_ADDR
// legHealPoint := [ 195 , 15 ] ;
5926: LD_ADDR_EXP 41
5930: PUSH
5931: LD_INT 195
5933: PUSH
5934: LD_INT 15
5936: PUSH
5937: EMPTY
5938: LIST
5939: LIST
5940: ST_TO_ADDR
// legBuildings := [ ] ;
5941: LD_ADDR_EXP 42
5945: PUSH
5946: EMPTY
5947: ST_TO_ADDR
// legTanks := [ ] ;
5948: LD_ADDR_EXP 43
5952: PUSH
5953: EMPTY
5954: ST_TO_ADDR
// legRTanks := [ ] ;
5955: LD_ADDR_EXP 44
5959: PUSH
5960: EMPTY
5961: ST_TO_ADDR
// legCargo := 0 ;
5962: LD_ADDR_EXP 45
5966: PUSH
5967: LD_INT 0
5969: ST_TO_ADDR
// sources := [ [ 219 , 31 ] , [ 166 , 31 ] ] ;
5970: LD_ADDR_VAR 0 7
5974: PUSH
5975: LD_INT 219
5977: PUSH
5978: LD_INT 31
5980: PUSH
5981: EMPTY
5982: LIST
5983: LIST
5984: PUSH
5985: LD_INT 166
5987: PUSH
5988: LD_INT 31
5990: PUSH
5991: EMPTY
5992: LIST
5993: LIST
5994: PUSH
5995: EMPTY
5996: LIST
5997: LIST
5998: ST_TO_ADDR
// for i in sources do
5999: LD_ADDR_VAR 0 2
6003: PUSH
6004: LD_VAR 0 7
6008: PUSH
6009: FOR_IN
6010: IFFALSE 6039
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 8 ) ;
6012: LD_VAR 0 2
6016: PUSH
6017: LD_INT 1
6019: ARRAY
6020: PPUSH
6021: LD_VAR 0 2
6025: PUSH
6026: LD_INT 2
6028: ARRAY
6029: PPUSH
6030: LD_INT 8
6032: PPUSH
6033: CALL_OW 441
6037: GO 6009
6039: POP
6040: POP
// SetResourceType ( GetBase ( legBase ) , mat_cans , 650 ) ;
6041: LD_INT 38
6043: PPUSH
6044: CALL_OW 274
6048: PPUSH
6049: LD_INT 1
6051: PPUSH
6052: LD_INT 650
6054: PPUSH
6055: CALL_OW 277
// SetResourceType ( GetBase ( legBase ) , mat_oil , 120 ) ;
6059: LD_INT 38
6061: PPUSH
6062: CALL_OW 274
6066: PPUSH
6067: LD_INT 2
6069: PPUSH
6070: LD_INT 120
6072: PPUSH
6073: CALL_OW 277
// SetResourceType ( GetBase ( legBase ) , mat_siberit , 50 ) ;
6077: LD_INT 38
6079: PPUSH
6080: CALL_OW 274
6084: PPUSH
6085: LD_INT 3
6087: PPUSH
6088: LD_INT 50
6090: PPUSH
6091: CALL_OW 277
// skill := [ 6 , 7 , 8 , 9 ] [ Difficulty ] ;
6095: LD_ADDR_VAR 0 6
6099: PUSH
6100: LD_INT 6
6102: PUSH
6103: LD_INT 7
6105: PUSH
6106: LD_INT 8
6108: PUSH
6109: LD_INT 9
6111: PUSH
6112: EMPTY
6113: LIST
6114: LIST
6115: LIST
6116: LIST
6117: PUSH
6118: LD_OWVAR 67
6122: ARRAY
6123: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
6124: LD_ADDR_EXP 36
6128: PUSH
6129: LD_STRING Farmer
6131: PPUSH
6132: LD_INT 0
6134: PPUSH
6135: LD_STRING 
6137: PPUSH
6138: CALL 20667 0 3
6142: ST_TO_ADDR
// for i := 1 to 4 do
6143: LD_ADDR_VAR 0 2
6147: PUSH
6148: DOUBLE
6149: LD_INT 1
6151: DEC
6152: ST_TO_ADDR
6153: LD_INT 4
6155: PUSH
6156: FOR_TO
6157: IFFALSE 6674
// for j := 1 to [ [ 7 , 8 , 9 , 11 ] [ Difficulty ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] , 3 , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
6159: LD_ADDR_VAR 0 3
6163: PUSH
6164: DOUBLE
6165: LD_INT 1
6167: DEC
6168: ST_TO_ADDR
6169: LD_INT 7
6171: PUSH
6172: LD_INT 8
6174: PUSH
6175: LD_INT 9
6177: PUSH
6178: LD_INT 11
6180: PUSH
6181: EMPTY
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: PUSH
6187: LD_OWVAR 67
6191: ARRAY
6192: PUSH
6193: LD_INT 3
6195: PUSH
6196: LD_INT 4
6198: PUSH
6199: LD_INT 5
6201: PUSH
6202: LD_INT 5
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: PUSH
6211: LD_OWVAR 67
6215: ARRAY
6216: PUSH
6217: LD_INT 3
6219: PUSH
6220: LD_INT 2
6222: PUSH
6223: LD_INT 3
6225: PUSH
6226: LD_INT 3
6228: PUSH
6229: LD_INT 3
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: PUSH
6238: LD_OWVAR 67
6242: ARRAY
6243: PUSH
6244: EMPTY
6245: LIST
6246: LIST
6247: LIST
6248: LIST
6249: PUSH
6250: LD_VAR 0 2
6254: ARRAY
6255: PUSH
6256: FOR_TO
6257: IFFALSE 6670
// begin PrepareHuman ( false , i , skill ) ;
6259: LD_INT 0
6261: PPUSH
6262: LD_VAR 0 2
6266: PPUSH
6267: LD_VAR 0 6
6271: PPUSH
6272: CALL_OW 380
// un := CreateHuman ;
6276: LD_ADDR_VAR 0 5
6280: PUSH
6281: CALL_OW 44
6285: ST_TO_ADDR
// legForces := Join ( legForces , un ) ;
6286: LD_ADDR_EXP 37
6290: PUSH
6291: LD_EXP 37
6295: PPUSH
6296: LD_VAR 0 5
6300: PPUSH
6301: CALL 58399 0 2
6305: ST_TO_ADDR
// case i of 1 :
6306: LD_VAR 0 2
6310: PUSH
6311: LD_INT 1
6313: DOUBLE
6314: EQUAL
6315: IFTRUE 6319
6317: GO 6388
6319: POP
// b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] ] ) ; 2 :
6320: LD_ADDR_VAR 0 4
6324: PUSH
6325: LD_INT 22
6327: PUSH
6328: LD_INT 8
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: PUSH
6335: LD_INT 2
6337: PUSH
6338: LD_INT 30
6340: PUSH
6341: LD_INT 32
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: PUSH
6348: LD_INT 30
6350: PUSH
6351: LD_INT 5
6353: PUSH
6354: EMPTY
6355: LIST
6356: LIST
6357: PUSH
6358: EMPTY
6359: LIST
6360: LIST
6361: LIST
6362: PUSH
6363: LD_INT 3
6365: PUSH
6366: LD_INT 62
6368: PUSH
6369: EMPTY
6370: LIST
6371: PUSH
6372: EMPTY
6373: LIST
6374: LIST
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: LIST
6380: PPUSH
6381: CALL_OW 69
6385: ST_TO_ADDR
6386: GO 6567
6388: LD_INT 2
6390: DOUBLE
6391: EQUAL
6392: IFTRUE 6396
6394: GO 6425
6396: POP
// b := UnitFilter ( legBase , [ f_not , [ f_full ] ] ) ; 3 :
6397: LD_ADDR_VAR 0 4
6401: PUSH
6402: LD_INT 38
6404: PPUSH
6405: LD_INT 3
6407: PUSH
6408: LD_INT 62
6410: PUSH
6411: EMPTY
6412: LIST
6413: PUSH
6414: EMPTY
6415: LIST
6416: LIST
6417: PPUSH
6418: CALL_OW 72
6422: ST_TO_ADDR
6423: GO 6567
6425: LD_INT 3
6427: DOUBLE
6428: EQUAL
6429: IFTRUE 6433
6431: GO 6507
6433: POP
// b := ReverseArray ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_control_tower ] ] , [ f_not , [ f_full ] ] ] ) ) ; 4 :
6434: LD_ADDR_VAR 0 4
6438: PUSH
6439: LD_INT 22
6441: PUSH
6442: LD_INT 8
6444: PUSH
6445: EMPTY
6446: LIST
6447: LIST
6448: PUSH
6449: LD_INT 2
6451: PUSH
6452: LD_INT 30
6454: PUSH
6455: LD_INT 3
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: PUSH
6462: LD_INT 30
6464: PUSH
6465: LD_INT 36
6467: PUSH
6468: EMPTY
6469: LIST
6470: LIST
6471: PUSH
6472: EMPTY
6473: LIST
6474: LIST
6475: LIST
6476: PUSH
6477: LD_INT 3
6479: PUSH
6480: LD_INT 62
6482: PUSH
6483: EMPTY
6484: LIST
6485: PUSH
6486: EMPTY
6487: LIST
6488: LIST
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: LIST
6494: PPUSH
6495: CALL_OW 69
6499: PPUSH
6500: CALL 53666 0 1
6504: ST_TO_ADDR
6505: GO 6567
6507: LD_INT 4
6509: DOUBLE
6510: EQUAL
6511: IFTRUE 6515
6513: GO 6566
6515: POP
// b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_lab_full ] , [ f_not , [ f_full ] ] ] ) ; end ;
6516: LD_ADDR_VAR 0 4
6520: PUSH
6521: LD_INT 22
6523: PUSH
6524: LD_INT 8
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: PUSH
6531: LD_INT 30
6533: PUSH
6534: LD_INT 8
6536: PUSH
6537: EMPTY
6538: LIST
6539: LIST
6540: PUSH
6541: LD_INT 3
6543: PUSH
6544: LD_INT 62
6546: PUSH
6547: EMPTY
6548: LIST
6549: PUSH
6550: EMPTY
6551: LIST
6552: LIST
6553: PUSH
6554: EMPTY
6555: LIST
6556: LIST
6557: LIST
6558: PPUSH
6559: CALL_OW 69
6563: ST_TO_ADDR
6564: GO 6567
6566: POP
// if b then
6567: LD_VAR 0 4
6571: IFFALSE 6647
// begin if GetBType ( b [ 1 ] ) = b_barracks then
6573: LD_VAR 0 4
6577: PUSH
6578: LD_INT 1
6580: ARRAY
6581: PPUSH
6582: CALL_OW 266
6586: PUSH
6587: LD_INT 5
6589: EQUAL
6590: IFFALSE 6627
// if Prob ( 50 ) then
6592: LD_INT 50
6594: PPUSH
6595: CALL_OW 13
6599: IFFALSE 6615
// SetClass ( un , class_mortar ) else
6601: LD_VAR 0 5
6605: PPUSH
6606: LD_INT 8
6608: PPUSH
6609: CALL_OW 336
6613: GO 6627
// SetClass ( un , class_sniper ) ;
6615: LD_VAR 0 5
6619: PPUSH
6620: LD_INT 5
6622: PPUSH
6623: CALL_OW 336
// PlaceHumanInUnit ( un , b [ 1 ] ) ;
6627: LD_VAR 0 5
6631: PPUSH
6632: LD_VAR 0 4
6636: PUSH
6637: LD_INT 1
6639: ARRAY
6640: PPUSH
6641: CALL_OW 52
// end else
6645: GO 6668
// PlaceUnitXYR ( un , 188 , 21 , 4 , false ) ;
6647: LD_VAR 0 5
6651: PPUSH
6652: LD_INT 188
6654: PPUSH
6655: LD_INT 21
6657: PPUSH
6658: LD_INT 4
6660: PPUSH
6661: LD_INT 0
6663: PPUSH
6664: CALL_OW 50
// end ;
6668: GO 6256
6670: POP
6671: POP
6672: GO 6156
6674: POP
6675: POP
// b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] ] ) ;
6676: LD_ADDR_VAR 0 4
6680: PUSH
6681: LD_INT 22
6683: PUSH
6684: LD_INT 8
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: PUSH
6691: LD_INT 2
6693: PUSH
6694: LD_INT 30
6696: PUSH
6697: LD_INT 32
6699: PUSH
6700: EMPTY
6701: LIST
6702: LIST
6703: PUSH
6704: LD_INT 30
6706: PUSH
6707: LD_INT 5
6709: PUSH
6710: EMPTY
6711: LIST
6712: LIST
6713: PUSH
6714: EMPTY
6715: LIST
6716: LIST
6717: LIST
6718: PUSH
6719: LD_INT 3
6721: PUSH
6722: LD_INT 62
6724: PUSH
6725: EMPTY
6726: LIST
6727: PUSH
6728: EMPTY
6729: LIST
6730: LIST
6731: PUSH
6732: EMPTY
6733: LIST
6734: LIST
6735: LIST
6736: PPUSH
6737: CALL_OW 69
6741: ST_TO_ADDR
// if b then
6742: LD_VAR 0 4
6746: IFFALSE 6813
// begin for i in b do
6748: LD_ADDR_VAR 0 2
6752: PUSH
6753: LD_VAR 0 4
6757: PUSH
6758: FOR_IN
6759: IFFALSE 6811
// begin PrepareApemanSoldier ( ) ;
6761: CALL 54489 0 0
// un := CreateHuman ;
6765: LD_ADDR_VAR 0 5
6769: PUSH
6770: CALL_OW 44
6774: ST_TO_ADDR
// legForces := Join ( legForces , un ) ;
6775: LD_ADDR_EXP 37
6779: PUSH
6780: LD_EXP 37
6784: PPUSH
6785: LD_VAR 0 5
6789: PPUSH
6790: CALL 58399 0 2
6794: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6795: LD_VAR 0 5
6799: PPUSH
6800: LD_VAR 0 2
6804: PPUSH
6805: CALL_OW 52
// end ;
6809: GO 6758
6811: POP
6812: POP
// end ; for i := 1 to 2 do
6813: LD_ADDR_VAR 0 2
6817: PUSH
6818: DOUBLE
6819: LD_INT 1
6821: DEC
6822: ST_TO_ADDR
6823: LD_INT 2
6825: PUSH
6826: FOR_TO
6827: IFFALSE 6954
// begin uc_nation := nation_arabian ;
6829: LD_ADDR_OWVAR 21
6833: PUSH
6834: LD_INT 2
6836: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_solar , control_manual , ar_control_tower , 100 ) ;
6837: LD_INT 13
6839: PPUSH
6840: LD_INT 2
6842: PPUSH
6843: LD_INT 1
6845: PPUSH
6846: LD_INT 31
6848: PPUSH
6849: LD_INT 100
6851: PPUSH
6852: CALL 25528 0 5
// un := CreateVehicle ;
6856: LD_ADDR_VAR 0 5
6860: PUSH
6861: CALL_OW 45
6865: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6866: LD_VAR 0 5
6870: PPUSH
6871: LD_INT 0
6873: PPUSH
6874: LD_INT 5
6876: PPUSH
6877: CALL_OW 12
6881: PPUSH
6882: CALL_OW 233
// PlaceUnitXYR ( un , 199 , 24 , 4 , false ) ;
6886: LD_VAR 0 5
6890: PPUSH
6891: LD_INT 199
6893: PPUSH
6894: LD_INT 24
6896: PPUSH
6897: LD_INT 4
6899: PPUSH
6900: LD_INT 0
6902: PPUSH
6903: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
6907: LD_INT 0
6909: PPUSH
6910: LD_INT 8
6912: PUSH
6913: LD_INT 9
6915: PUSH
6916: LD_INT 10
6918: PUSH
6919: LD_INT 10
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: LIST
6926: LIST
6927: PUSH
6928: LD_OWVAR 67
6932: ARRAY
6933: PPUSH
6934: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
6938: CALL_OW 44
6942: PPUSH
6943: LD_VAR 0 5
6947: PPUSH
6948: CALL_OW 52
// end ;
6952: GO 6826
6954: POP
6955: POP
// end ;
6956: LD_VAR 0 1
6960: RET
// every 0 0$2 trigger legScriptActive and Count ( legForces ) do var i , tmp , remote , undone , side , lab , eng , tag , tw , cr , sci , mech , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
6961: LD_EXP 4
6965: PUSH
6966: LD_EXP 37
6970: PPUSH
6971: CALL 22790 0 1
6975: AND
6976: IFFALSE 9499
6978: GO 6980
6980: DISABLE
6981: LD_INT 0
6983: PPUSH
6984: PPUSH
6985: PPUSH
6986: PPUSH
6987: PPUSH
6988: PPUSH
6989: PPUSH
6990: PPUSH
6991: PPUSH
6992: PPUSH
6993: PPUSH
6994: PPUSH
6995: PPUSH
6996: PPUSH
6997: PPUSH
6998: PPUSH
6999: PPUSH
7000: PPUSH
7001: PPUSH
// begin enable ;
7002: ENABLE
// side := 8 ;
7003: LD_ADDR_VAR 0 5
7007: PUSH
7008: LD_INT 8
7010: ST_TO_ADDR
// remote := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
7011: LD_ADDR_VAR 0 3
7015: PUSH
7016: LD_INT 22
7018: PUSH
7019: LD_VAR 0 5
7023: PUSH
7024: EMPTY
7025: LIST
7026: LIST
7027: PUSH
7028: LD_INT 33
7030: PUSH
7031: LD_INT 2
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: PUSH
7038: LD_INT 50
7040: PUSH
7041: EMPTY
7042: LIST
7043: PUSH
7044: LD_INT 3
7046: PUSH
7047: LD_INT 61
7049: PUSH
7050: EMPTY
7051: LIST
7052: PUSH
7053: EMPTY
7054: LIST
7055: LIST
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: LIST
7061: LIST
7062: PPUSH
7063: CALL_OW 69
7067: ST_TO_ADDR
// if remote and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_weapon , ar_control_tower ] ] ) ) then
7068: LD_VAR 0 3
7072: PUSH
7073: LD_INT 22
7075: PUSH
7076: LD_VAR 0 5
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: PUSH
7085: LD_INT 50
7087: PUSH
7088: EMPTY
7089: LIST
7090: PUSH
7091: LD_INT 34
7093: PUSH
7094: LD_INT 31
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: LIST
7105: PPUSH
7106: CALL_OW 69
7110: PPUSH
7111: CALL 22790 0 1
7115: AND
7116: IFFALSE 7144
// for i in remote do
7118: LD_ADDR_VAR 0 1
7122: PUSH
7123: LD_VAR 0 3
7127: PUSH
7128: FOR_IN
7129: IFFALSE 7142
// Connect ( i ) ;
7131: LD_VAR 0 1
7135: PPUSH
7136: CALL 28996 0 1
7140: GO 7128
7142: POP
7143: POP
// if legTech then
7144: LD_EXP 39
7148: IFFALSE 7304
// begin lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
7150: LD_ADDR_VAR 0 6
7154: PUSH
7155: LD_INT 22
7157: PUSH
7158: LD_VAR 0 5
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: PUSH
7167: LD_INT 50
7169: PUSH
7170: EMPTY
7171: LIST
7172: PUSH
7173: LD_INT 2
7175: PUSH
7176: LD_INT 30
7178: PUSH
7179: LD_INT 6
7181: PUSH
7182: EMPTY
7183: LIST
7184: LIST
7185: PUSH
7186: LD_INT 30
7188: PUSH
7189: LD_INT 7
7191: PUSH
7192: EMPTY
7193: LIST
7194: LIST
7195: PUSH
7196: LD_INT 30
7198: PUSH
7199: LD_INT 8
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: LIST
7216: PPUSH
7217: CALL_OW 69
7221: ST_TO_ADDR
// if lab then
7222: LD_VAR 0 6
7226: IFFALSE 7304
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
7228: LD_VAR 0 6
7232: PUSH
7233: LD_INT 1
7235: ARRAY
7236: PPUSH
7237: CALL_OW 461
7241: PUSH
7242: LD_INT 2
7244: EQUAL
7245: IFFALSE 7304
// begin for i in legTech do
7247: LD_ADDR_VAR 0 1
7251: PUSH
7252: LD_EXP 39
7256: PUSH
7257: FOR_IN
7258: IFFALSE 7302
// if CanBeResearched ( lab [ 1 ] , i ) then
7260: LD_VAR 0 6
7264: PUSH
7265: LD_INT 1
7267: ARRAY
7268: PPUSH
7269: LD_VAR 0 1
7273: PPUSH
7274: CALL_OW 430
7278: IFFALSE 7300
// begin ComResearch ( lab [ 1 ] , i ) ;
7280: LD_VAR 0 6
7284: PUSH
7285: LD_INT 1
7287: ARRAY
7288: PPUSH
7289: LD_VAR 0 1
7293: PPUSH
7294: CALL_OW 124
// break ;
7298: GO 7302
// end ;
7300: GO 7257
7302: POP
7303: POP
// end ; end ; end ; fac := FilterUnitsInArea ( legBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
7304: LD_ADDR_VAR 0 17
7308: PUSH
7309: LD_INT 2
7311: PPUSH
7312: LD_INT 22
7314: PUSH
7315: LD_VAR 0 5
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: PUSH
7324: LD_INT 30
7326: PUSH
7327: LD_INT 3
7329: PUSH
7330: EMPTY
7331: LIST
7332: LIST
7333: PUSH
7334: LD_INT 50
7336: PUSH
7337: EMPTY
7338: LIST
7339: PUSH
7340: EMPTY
7341: LIST
7342: LIST
7343: LIST
7344: PPUSH
7345: CALL_OW 70
7349: ST_TO_ADDR
// if fac then
7350: LD_VAR 0 17
7354: IFFALSE 7730
// begin mech := UnitFilter ( legForces , [ [ f_tag , tMech ] , [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) ;
7356: LD_ADDR_VAR 0 12
7360: PUSH
7361: LD_EXP 37
7365: PPUSH
7366: LD_INT 120
7368: PUSH
7369: LD_INT 7
7371: PUSH
7372: EMPTY
7373: LIST
7374: LIST
7375: PUSH
7376: LD_INT 25
7378: PUSH
7379: LD_INT 3
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: PUSH
7386: LD_INT 3
7388: PUSH
7389: LD_INT 54
7391: PUSH
7392: EMPTY
7393: LIST
7394: PUSH
7395: EMPTY
7396: LIST
7397: LIST
7398: PUSH
7399: LD_INT 3
7401: PUSH
7402: LD_INT 55
7404: PUSH
7405: EMPTY
7406: LIST
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: PPUSH
7418: CALL_OW 72
7422: ST_TO_ADDR
// if mech and UnitsInside ( fac [ 1 ] ) < 6 then
7423: LD_VAR 0 12
7427: PUSH
7428: LD_VAR 0 17
7432: PUSH
7433: LD_INT 1
7435: ARRAY
7436: PPUSH
7437: CALL_OW 313
7441: PUSH
7442: LD_INT 6
7444: LESS
7445: AND
7446: IFFALSE 7466
// ComEnterUnit ( mech , fac [ 1 ] ) ;
7448: LD_VAR 0 12
7452: PPUSH
7453: LD_VAR 0 17
7457: PUSH
7458: LD_INT 1
7460: ARRAY
7461: PPUSH
7462: CALL_OW 120
// if BuildingStatus ( fac [ 1 ] ) = bs_idle then
7466: LD_VAR 0 17
7470: PUSH
7471: LD_INT 1
7473: ARRAY
7474: PPUSH
7475: CALL_OW 461
7479: PUSH
7480: LD_INT 2
7482: EQUAL
7483: IFFALSE 7730
// begin emptyTowers := FilterUnitsInArea ( legBaseArea , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
7485: LD_ADDR_VAR 0 18
7489: PUSH
7490: LD_INT 2
7492: PPUSH
7493: LD_INT 2
7495: PUSH
7496: LD_INT 30
7498: PUSH
7499: LD_INT 32
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: PUSH
7506: LD_INT 30
7508: PUSH
7509: LD_INT 33
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PUSH
7516: EMPTY
7517: LIST
7518: LIST
7519: LIST
7520: PUSH
7521: LD_INT 35
7523: PUSH
7524: LD_INT 0
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: PUSH
7531: EMPTY
7532: LIST
7533: LIST
7534: PPUSH
7535: CALL_OW 70
7539: ST_TO_ADDR
// if emptyTowers then
7540: LD_VAR 0 18
7544: IFFALSE 7592
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , legBaseArea ) ;
7546: LD_ADDR_VAR 0 19
7550: PUSH
7551: LD_VAR 0 18
7555: PUSH
7556: LD_INT 1
7558: ARRAY
7559: PPUSH
7560: LD_INT 2
7562: PPUSH
7563: CALL 31035 0 2
7567: ST_TO_ADDR
// if weapon then
7568: LD_VAR 0 19
7572: IFFALSE 7592
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
7574: LD_VAR 0 18
7578: PUSH
7579: LD_INT 1
7581: ARRAY
7582: PPUSH
7583: LD_VAR 0 19
7587: PPUSH
7588: CALL_OW 148
// end ; if legConstructList then
7592: LD_EXP 40
7596: IFFALSE 7730
// if CanBeConstructed ( fac [ 1 ] , legConstructList [ 1 ] [ 1 ] , legConstructList [ 1 ] [ 2 ] , legConstructList [ 1 ] [ 3 ] , legConstructList [ 1 ] [ 4 ] ) then
7598: LD_VAR 0 17
7602: PUSH
7603: LD_INT 1
7605: ARRAY
7606: PPUSH
7607: LD_EXP 40
7611: PUSH
7612: LD_INT 1
7614: ARRAY
7615: PUSH
7616: LD_INT 1
7618: ARRAY
7619: PPUSH
7620: LD_EXP 40
7624: PUSH
7625: LD_INT 1
7627: ARRAY
7628: PUSH
7629: LD_INT 2
7631: ARRAY
7632: PPUSH
7633: LD_EXP 40
7637: PUSH
7638: LD_INT 1
7640: ARRAY
7641: PUSH
7642: LD_INT 3
7644: ARRAY
7645: PPUSH
7646: LD_EXP 40
7650: PUSH
7651: LD_INT 1
7653: ARRAY
7654: PUSH
7655: LD_INT 4
7657: ARRAY
7658: PPUSH
7659: CALL_OW 448
7663: IFFALSE 7730
// ComConstruct ( fac [ 1 ] , legConstructList [ 1 ] [ 1 ] , legConstructList [ 1 ] [ 2 ] , legConstructList [ 1 ] [ 3 ] , legConstructList [ 1 ] [ 4 ] ) ;
7665: LD_VAR 0 17
7669: PUSH
7670: LD_INT 1
7672: ARRAY
7673: PPUSH
7674: LD_EXP 40
7678: PUSH
7679: LD_INT 1
7681: ARRAY
7682: PUSH
7683: LD_INT 1
7685: ARRAY
7686: PPUSH
7687: LD_EXP 40
7691: PUSH
7692: LD_INT 1
7694: ARRAY
7695: PUSH
7696: LD_INT 2
7698: ARRAY
7699: PPUSH
7700: LD_EXP 40
7704: PUSH
7705: LD_INT 1
7707: ARRAY
7708: PUSH
7709: LD_INT 3
7711: ARRAY
7712: PPUSH
7713: LD_EXP 40
7717: PUSH
7718: LD_INT 1
7720: ARRAY
7721: PUSH
7722: LD_INT 4
7724: ARRAY
7725: PPUSH
7726: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( legBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7730: LD_ADDR_VAR 0 2
7734: PUSH
7735: LD_INT 2
7737: PPUSH
7738: LD_INT 21
7740: PUSH
7741: LD_INT 3
7743: PUSH
7744: EMPTY
7745: LIST
7746: LIST
7747: PUSH
7748: LD_INT 3
7750: PUSH
7751: LD_INT 57
7753: PUSH
7754: EMPTY
7755: LIST
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: PUSH
7761: LD_INT 3
7763: PUSH
7764: LD_INT 24
7766: PUSH
7767: LD_INT 1000
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: LIST
7782: PPUSH
7783: CALL_OW 70
7787: ST_TO_ADDR
// cr := GetListOfCratesInArea ( legCratesArea ) ;
7788: LD_ADDR_VAR 0 10
7792: PUSH
7793: LD_INT 14
7795: PPUSH
7796: CALL_OW 435
7800: ST_TO_ADDR
// sci := UnitFilter ( legForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
7801: LD_ADDR_VAR 0 11
7805: PUSH
7806: LD_EXP 37
7810: PPUSH
7811: LD_INT 25
7813: PUSH
7814: LD_INT 4
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: PUSH
7821: LD_INT 50
7823: PUSH
7824: EMPTY
7825: LIST
7826: PUSH
7827: EMPTY
7828: LIST
7829: LIST
7830: PPUSH
7831: CALL_OW 72
7835: ST_TO_ADDR
// lab := FilterUnitsInArea ( legBaseArea , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
7836: LD_ADDR_VAR 0 6
7840: PUSH
7841: LD_INT 2
7843: PPUSH
7844: LD_INT 2
7846: PUSH
7847: LD_INT 30
7849: PUSH
7850: LD_INT 6
7852: PUSH
7853: EMPTY
7854: LIST
7855: LIST
7856: PUSH
7857: LD_INT 30
7859: PUSH
7860: LD_INT 7
7862: PUSH
7863: EMPTY
7864: LIST
7865: LIST
7866: PUSH
7867: LD_INT 30
7869: PUSH
7870: LD_INT 8
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: PPUSH
7883: CALL_OW 70
7887: ST_TO_ADDR
// if sci then
7888: LD_VAR 0 11
7892: IFFALSE 8051
// begin hurtUnits := UnitFilter ( legForces , [ [ f_inarea , legBaseArea ] , [ f_tag , tHeal ] ] ) ;
7894: LD_ADDR_VAR 0 14
7898: PUSH
7899: LD_EXP 37
7903: PPUSH
7904: LD_INT 95
7906: PUSH
7907: LD_INT 2
7909: PUSH
7910: EMPTY
7911: LIST
7912: LIST
7913: PUSH
7914: LD_INT 120
7916: PUSH
7917: LD_INT 1
7919: PUSH
7920: EMPTY
7921: LIST
7922: LIST
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PPUSH
7928: CALL_OW 72
7932: ST_TO_ADDR
// if hurtUnits then
7933: LD_VAR 0 14
7937: IFFALSE 7998
// begin for i in sci do
7939: LD_ADDR_VAR 0 1
7943: PUSH
7944: LD_VAR 0 11
7948: PUSH
7949: FOR_IN
7950: IFFALSE 7994
// if IsInUnit ( i ) then
7952: LD_VAR 0 1
7956: PPUSH
7957: CALL_OW 310
7961: IFFALSE 7974
// ComExitBuilding ( i ) else
7963: LD_VAR 0 1
7967: PPUSH
7968: CALL_OW 122
7972: GO 7992
// ComHeal ( i , hurtUnits [ 1 ] ) ;
7974: LD_VAR 0 1
7978: PPUSH
7979: LD_VAR 0 14
7983: PUSH
7984: LD_INT 1
7986: ARRAY
7987: PPUSH
7988: CALL_OW 128
7992: GO 7949
7994: POP
7995: POP
// end else
7996: GO 8051
// if lab then
7998: LD_VAR 0 6
8002: IFFALSE 8051
// begin for i in sci do
8004: LD_ADDR_VAR 0 1
8008: PUSH
8009: LD_VAR 0 11
8013: PUSH
8014: FOR_IN
8015: IFFALSE 8049
// if not IsInUnit ( i ) then
8017: LD_VAR 0 1
8021: PPUSH
8022: CALL_OW 310
8026: NOT
8027: IFFALSE 8047
// ComEnterUnit ( i , lab [ 1 ] ) ;
8029: LD_VAR 0 1
8033: PPUSH
8034: LD_VAR 0 6
8038: PUSH
8039: LD_INT 1
8041: ARRAY
8042: PPUSH
8043: CALL_OW 120
8047: GO 8014
8049: POP
8050: POP
// end ; end ; eng := UnitFilter ( legForces , [ f_class , 2 ] ) ;
8051: LD_ADDR_VAR 0 7
8055: PUSH
8056: LD_EXP 37
8060: PPUSH
8061: LD_INT 25
8063: PUSH
8064: LD_INT 2
8066: PUSH
8067: EMPTY
8068: LIST
8069: LIST
8070: PPUSH
8071: CALL_OW 72
8075: ST_TO_ADDR
// if eng then
8076: LD_VAR 0 7
8080: IFFALSE 8855
// begin for i in eng do
8082: LD_ADDR_VAR 0 1
8086: PUSH
8087: LD_VAR 0 7
8091: PUSH
8092: FOR_IN
8093: IFFALSE 8853
// begin tag := GetTag ( i ) ;
8095: LD_ADDR_VAR 0 8
8099: PUSH
8100: LD_VAR 0 1
8104: PPUSH
8105: CALL_OW 110
8109: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
8110: LD_VAR 0 1
8114: PPUSH
8115: CALL_OW 256
8119: PUSH
8120: LD_INT 800
8122: LESS
8123: PUSH
8124: LD_VAR 0 8
8128: PUSH
8129: LD_INT 1
8131: NONEQUAL
8132: AND
8133: IFFALSE 8183
// begin SetTag ( i , tHeal ) ;
8135: LD_VAR 0 1
8139: PPUSH
8140: LD_INT 1
8142: PPUSH
8143: CALL_OW 109
// ComMoveXY ( i , legHealPoint [ 1 ] , legHealPoint [ 2 ] ) ;
8147: LD_VAR 0 1
8151: PPUSH
8152: LD_EXP 41
8156: PUSH
8157: LD_INT 1
8159: ARRAY
8160: PPUSH
8161: LD_EXP 41
8165: PUSH
8166: LD_INT 2
8168: ARRAY
8169: PPUSH
8170: CALL_OW 111
// AddComHold ( i ) ;
8174: LD_VAR 0 1
8178: PPUSH
8179: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
8183: LD_VAR 0 8
8187: PUSH
8188: LD_INT 1
8190: EQUAL
8191: PUSH
8192: LD_VAR 0 1
8196: PPUSH
8197: CALL_OW 256
8201: PUSH
8202: LD_INT 1000
8204: EQUAL
8205: AND
8206: IFFALSE 8220
// SetTag ( i , 0 ) ;
8208: LD_VAR 0 1
8212: PPUSH
8213: LD_INT 0
8215: PPUSH
8216: CALL_OW 109
// if not tag then
8220: LD_VAR 0 8
8224: NOT
8225: IFFALSE 8393
// begin undone := FilterUnitsInArea ( legBaseArea , [ f_constructed ] ) ;
8227: LD_ADDR_VAR 0 4
8231: PUSH
8232: LD_INT 2
8234: PPUSH
8235: LD_INT 57
8237: PUSH
8238: EMPTY
8239: LIST
8240: PPUSH
8241: CALL_OW 70
8245: ST_TO_ADDR
// if undone then
8246: LD_VAR 0 4
8250: IFFALSE 8272
// begin ComComplete ( i , undone [ 1 ] ) ;
8252: LD_VAR 0 1
8256: PPUSH
8257: LD_VAR 0 4
8261: PUSH
8262: LD_INT 1
8264: ARRAY
8265: PPUSH
8266: CALL 28888 0 2
// continue ;
8270: GO 8092
// end ; if cr or tmp or Count ( legBuildings ) then
8272: LD_VAR 0 10
8276: PUSH
8277: LD_VAR 0 2
8281: OR
8282: PUSH
8283: LD_EXP 42
8287: PPUSH
8288: CALL 22790 0 1
8292: OR
8293: IFFALSE 8369
// begin if IsInUnit ( i ) then
8295: LD_VAR 0 1
8299: PPUSH
8300: CALL_OW 310
8304: IFFALSE 8315
// ComExitBuilding ( i ) ;
8306: LD_VAR 0 1
8310: PPUSH
8311: CALL_OW 122
// if tmp then
8315: LD_VAR 0 2
8319: IFFALSE 8335
// SetTag ( i , tRepair ) else
8321: LD_VAR 0 1
8325: PPUSH
8326: LD_INT 3
8328: PPUSH
8329: CALL_OW 109
8333: GO 8367
// if cr then
8335: LD_VAR 0 10
8339: IFFALSE 8355
// SetTag ( i , tCrates ) else
8341: LD_VAR 0 1
8345: PPUSH
8346: LD_INT 2
8348: PPUSH
8349: CALL_OW 109
8353: GO 8367
// SetTag ( i , tBuild ) ;
8355: LD_VAR 0 1
8359: PPUSH
8360: LD_INT 5
8362: PPUSH
8363: CALL_OW 109
// end else
8367: GO 8393
// if not IsInUnit ( i ) then
8369: LD_VAR 0 1
8373: PPUSH
8374: CALL_OW 310
8378: NOT
8379: IFFALSE 8393
// ComEnterUnit ( i , legBase ) ;
8381: LD_VAR 0 1
8385: PPUSH
8386: LD_INT 38
8388: PPUSH
8389: CALL_OW 120
// end ; if tag = tRepair then
8393: LD_VAR 0 8
8397: PUSH
8398: LD_INT 3
8400: EQUAL
8401: IFFALSE 8503
// begin if IsInUnit ( i ) then
8403: LD_VAR 0 1
8407: PPUSH
8408: CALL_OW 310
8412: IFFALSE 8425
// begin ComExitBuilding ( i ) ;
8414: LD_VAR 0 1
8418: PPUSH
8419: CALL_OW 122
// continue ;
8423: GO 8092
// end ; if not tmp then
8425: LD_VAR 0 2
8429: NOT
8430: IFFALSE 8446
// begin SetTag ( i , 0 ) ;
8432: LD_VAR 0 1
8436: PPUSH
8437: LD_INT 0
8439: PPUSH
8440: CALL_OW 109
// continue ;
8444: GO 8092
// end ; if not HasTask ( i ) then
8446: LD_VAR 0 1
8450: PPUSH
8451: CALL_OW 314
8455: NOT
8456: IFFALSE 8476
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
8458: LD_VAR 0 1
8462: PPUSH
8463: LD_VAR 0 2
8467: PUSH
8468: LD_INT 1
8470: ARRAY
8471: PPUSH
8472: CALL_OW 130
// if not IsInArea ( i , legBaseArea ) then
8476: LD_VAR 0 1
8480: PPUSH
8481: LD_INT 2
8483: PPUSH
8484: CALL_OW 308
8488: NOT
8489: IFFALSE 8503
// ComMoveToArea ( i , legBaseArea ) ;
8491: LD_VAR 0 1
8495: PPUSH
8496: LD_INT 2
8498: PPUSH
8499: CALL_OW 113
// end ; if tag = tBuild then
8503: LD_VAR 0 8
8507: PUSH
8508: LD_INT 5
8510: EQUAL
8511: IFFALSE 8706
// begin if IsInUnit ( i ) then
8513: LD_VAR 0 1
8517: PPUSH
8518: CALL_OW 310
8522: IFFALSE 8535
// begin ComExitBuilding ( i ) ;
8524: LD_VAR 0 1
8528: PPUSH
8529: CALL_OW 122
// continue ;
8533: GO 8092
// end ; if not Count ( legBuildings ) then
8535: LD_EXP 42
8539: PPUSH
8540: CALL 22790 0 1
8544: NOT
8545: IFFALSE 8563
// begin SetTag ( i , 0 ) ;
8547: LD_VAR 0 1
8551: PPUSH
8552: LD_INT 0
8554: PPUSH
8555: CALL_OW 109
// continue ;
8559: GO 8092
// end else
8561: GO 8600
// if not CanBeBuiltOnlyResources ( legBase , legBuildings [ 1 ] [ 1 ] ) then
8563: LD_INT 38
8565: PPUSH
8566: LD_EXP 42
8570: PUSH
8571: LD_INT 1
8573: ARRAY
8574: PUSH
8575: LD_INT 1
8577: ARRAY
8578: PPUSH
8579: CALL 62322 0 2
8583: NOT
8584: IFFALSE 8600
// begin SetTag ( i , 0 ) ;
8586: LD_VAR 0 1
8590: PPUSH
8591: LD_INT 0
8593: PPUSH
8594: CALL_OW 109
// continue ;
8598: GO 8092
// end ; undone := FilterUnitsInArea ( legBaseArea , [ f_constructed ] ) ;
8600: LD_ADDR_VAR 0 4
8604: PUSH
8605: LD_INT 2
8607: PPUSH
8608: LD_INT 57
8610: PUSH
8611: EMPTY
8612: LIST
8613: PPUSH
8614: CALL_OW 70
8618: ST_TO_ADDR
// if undone then
8619: LD_VAR 0 4
8623: IFFALSE 8645
// begin ComComplete ( i , undone [ 1 ] ) ;
8625: LD_VAR 0 1
8629: PPUSH
8630: LD_VAR 0 4
8634: PUSH
8635: LD_INT 1
8637: ARRAY
8638: PPUSH
8639: CALL 28888 0 2
// continue ;
8643: GO 8092
// end ; ComBuild ( i , legBuildings [ 1 ] [ 1 ] , legBuildings [ 1 ] [ 2 ] , legBuildings [ 1 ] [ 3 ] , legBuildings [ 1 ] [ 4 ] ) ;
8645: LD_VAR 0 1
8649: PPUSH
8650: LD_EXP 42
8654: PUSH
8655: LD_INT 1
8657: ARRAY
8658: PUSH
8659: LD_INT 1
8661: ARRAY
8662: PPUSH
8663: LD_EXP 42
8667: PUSH
8668: LD_INT 1
8670: ARRAY
8671: PUSH
8672: LD_INT 2
8674: ARRAY
8675: PPUSH
8676: LD_EXP 42
8680: PUSH
8681: LD_INT 1
8683: ARRAY
8684: PUSH
8685: LD_INT 3
8687: ARRAY
8688: PPUSH
8689: LD_EXP 42
8693: PUSH
8694: LD_INT 1
8696: ARRAY
8697: PUSH
8698: LD_INT 4
8700: ARRAY
8701: PPUSH
8702: CALL_OW 145
// end ; if tag = tCrates then
8706: LD_VAR 0 8
8710: PUSH
8711: LD_INT 2
8713: EQUAL
8714: IFFALSE 8851
// begin if IsInUnit ( i ) then
8716: LD_VAR 0 1
8720: PPUSH
8721: CALL_OW 310
8725: IFFALSE 8738
// begin ComExitBuilding ( i ) ;
8727: LD_VAR 0 1
8731: PPUSH
8732: CALL_OW 122
// continue ;
8736: GO 8092
// end ; if not cr then
8738: LD_VAR 0 10
8742: NOT
8743: IFFALSE 8759
// begin SetTag ( i , 0 ) ;
8745: LD_VAR 0 1
8749: PPUSH
8750: LD_INT 0
8752: PPUSH
8753: CALL_OW 109
// continue ;
8757: GO 8092
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
8759: LD_VAR 0 1
8763: PPUSH
8764: CALL_OW 314
8768: NOT
8769: PUSH
8770: LD_INT 81
8772: PUSH
8773: LD_VAR 0 5
8777: PUSH
8778: EMPTY
8779: LIST
8780: LIST
8781: PUSH
8782: LD_INT 92
8784: PUSH
8785: LD_VAR 0 10
8789: PUSH
8790: LD_INT 1
8792: ARRAY
8793: PUSH
8794: LD_VAR 0 10
8798: PUSH
8799: LD_INT 2
8801: ARRAY
8802: PUSH
8803: LD_INT 12
8805: PUSH
8806: EMPTY
8807: LIST
8808: LIST
8809: LIST
8810: LIST
8811: PUSH
8812: EMPTY
8813: LIST
8814: LIST
8815: PPUSH
8816: CALL_OW 69
8820: NOT
8821: AND
8822: IFFALSE 8851
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
8824: LD_VAR 0 1
8828: PPUSH
8829: LD_VAR 0 10
8833: PUSH
8834: LD_INT 1
8836: ARRAY
8837: PPUSH
8838: LD_VAR 0 10
8842: PUSH
8843: LD_INT 2
8845: ARRAY
8846: PPUSH
8847: CALL_OW 117
// end ; end ;
8851: GO 8092
8853: POP
8854: POP
// end ; sol := UnitFilter ( legForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_mortar ] ] , [ f_ok ] ] ) ;
8855: LD_ADDR_VAR 0 13
8859: PUSH
8860: LD_EXP 37
8864: PPUSH
8865: LD_INT 2
8867: PUSH
8868: LD_INT 25
8870: PUSH
8871: LD_INT 1
8873: PUSH
8874: EMPTY
8875: LIST
8876: LIST
8877: PUSH
8878: LD_INT 25
8880: PUSH
8881: LD_INT 5
8883: PUSH
8884: EMPTY
8885: LIST
8886: LIST
8887: PUSH
8888: LD_INT 25
8890: PUSH
8891: LD_INT 8
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: PUSH
8898: EMPTY
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: PUSH
8904: LD_INT 50
8906: PUSH
8907: EMPTY
8908: LIST
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: PPUSH
8914: CALL_OW 72
8918: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( legBaseArea , [ f_enemy , side ] ) ;
8919: LD_ADDR_VAR 0 15
8923: PUSH
8924: LD_INT 2
8926: PPUSH
8927: LD_INT 81
8929: PUSH
8930: LD_VAR 0 5
8934: PUSH
8935: EMPTY
8936: LIST
8937: LIST
8938: PPUSH
8939: CALL_OW 70
8943: ST_TO_ADDR
// if sol then
8944: LD_VAR 0 13
8948: IFFALSE 9499
// begin if enemyInBase then
8950: LD_VAR 0 15
8954: IFFALSE 9099
// begin for i in sol do
8956: LD_ADDR_VAR 0 1
8960: PUSH
8961: LD_VAR 0 13
8965: PUSH
8966: FOR_IN
8967: IFFALSE 9095
// begin tw := IsInUnit ( i ) ;
8969: LD_ADDR_VAR 0 9
8973: PUSH
8974: LD_VAR 0 1
8978: PPUSH
8979: CALL_OW 310
8983: ST_TO_ADDR
// if tw then
8984: LD_VAR 0 9
8988: IFFALSE 9069
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
8990: LD_VAR 0 9
8994: PUSH
8995: LD_INT 22
8997: PUSH
8998: LD_VAR 0 5
9002: PUSH
9003: EMPTY
9004: LIST
9005: LIST
9006: PUSH
9007: LD_INT 101
9009: PUSH
9010: LD_INT 2
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: PUSH
9017: LD_INT 2
9019: PUSH
9020: LD_INT 30
9022: PUSH
9023: LD_INT 32
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: PUSH
9030: LD_INT 30
9032: PUSH
9033: LD_INT 31
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: PUSH
9040: EMPTY
9041: LIST
9042: LIST
9043: LIST
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: LIST
9049: PPUSH
9050: CALL_OW 69
9054: IN
9055: NOT
9056: IFFALSE 9067
// ComExitBuilding ( i ) ;
9058: LD_VAR 0 1
9062: PPUSH
9063: CALL_OW 122
// end else
9067: GO 9093
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
9069: LD_VAR 0 1
9073: PPUSH
9074: LD_VAR 0 15
9078: PPUSH
9079: LD_VAR 0 1
9083: PPUSH
9084: CALL_OW 74
9088: PPUSH
9089: CALL_OW 115
// end ;
9093: GO 8966
9095: POP
9096: POP
// end else
9097: GO 9499
// begin empty := FilterUnitsInArea ( legBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
9099: LD_ADDR_VAR 0 16
9103: PUSH
9104: LD_INT 2
9106: PPUSH
9107: LD_INT 3
9109: PUSH
9110: LD_INT 62
9112: PUSH
9113: EMPTY
9114: LIST
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PUSH
9120: LD_INT 2
9122: PUSH
9123: LD_INT 30
9125: PUSH
9126: LD_INT 32
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: PUSH
9133: LD_INT 30
9135: PUSH
9136: LD_INT 4
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: PUSH
9143: LD_INT 30
9145: PUSH
9146: LD_INT 5
9148: PUSH
9149: EMPTY
9150: LIST
9151: LIST
9152: PUSH
9153: LD_INT 30
9155: PUSH
9156: LD_INT 31
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: PUSH
9163: EMPTY
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: PUSH
9170: EMPTY
9171: LIST
9172: LIST
9173: PPUSH
9174: CALL_OW 70
9178: ST_TO_ADDR
// if empty then
9179: LD_VAR 0 16
9183: IFFALSE 9200
// empty := ReverseArray ( empty ) ;
9185: LD_ADDR_VAR 0 16
9189: PUSH
9190: LD_VAR 0 16
9194: PPUSH
9195: CALL 53666 0 1
9199: ST_TO_ADDR
// for i in sol do
9200: LD_ADDR_VAR 0 1
9204: PUSH
9205: LD_VAR 0 13
9209: PUSH
9210: FOR_IN
9211: IFFALSE 9497
// begin tag := GetTag ( i ) ;
9213: LD_ADDR_VAR 0 8
9217: PUSH
9218: LD_VAR 0 1
9222: PPUSH
9223: CALL_OW 110
9227: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
9228: LD_VAR 0 1
9232: PPUSH
9233: CALL_OW 256
9237: PUSH
9238: LD_INT 1000
9240: LESS
9241: PUSH
9242: LD_VAR 0 8
9246: PUSH
9247: LD_INT 1
9249: NONEQUAL
9250: AND
9251: IFFALSE 9303
// begin SetTag ( i , tHeal ) ;
9253: LD_VAR 0 1
9257: PPUSH
9258: LD_INT 1
9260: PPUSH
9261: CALL_OW 109
// ComMoveXY ( i , legHealPoint [ 1 ] , legHealPoint [ 2 ] ) ;
9265: LD_VAR 0 1
9269: PPUSH
9270: LD_EXP 41
9274: PUSH
9275: LD_INT 1
9277: ARRAY
9278: PPUSH
9279: LD_EXP 41
9283: PUSH
9284: LD_INT 2
9286: ARRAY
9287: PPUSH
9288: CALL_OW 111
// AddComHold ( i ) ;
9292: LD_VAR 0 1
9296: PPUSH
9297: CALL_OW 200
// continue ;
9301: GO 9210
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
9303: LD_VAR 0 1
9307: PPUSH
9308: CALL_OW 256
9312: PUSH
9313: LD_INT 1000
9315: EQUAL
9316: PUSH
9317: LD_VAR 0 8
9321: PUSH
9322: LD_INT 1
9324: EQUAL
9325: AND
9326: IFFALSE 9342
// begin SetTag ( i , 0 ) ;
9328: LD_VAR 0 1
9332: PPUSH
9333: LD_INT 0
9335: PPUSH
9336: CALL_OW 109
// continue ;
9340: GO 9210
// end ; if not IsInArea ( i , legBaseArea ) and not IsInUnit ( i ) then
9342: LD_VAR 0 1
9346: PPUSH
9347: LD_INT 2
9349: PPUSH
9350: CALL_OW 308
9354: NOT
9355: PUSH
9356: LD_VAR 0 1
9360: PPUSH
9361: CALL_OW 310
9365: NOT
9366: AND
9367: IFFALSE 9381
// ComMoveToArea ( i , legBaseArea ) ;
9369: LD_VAR 0 1
9373: PPUSH
9374: LD_INT 2
9376: PPUSH
9377: CALL_OW 113
// if HasTask ( i ) then
9381: LD_VAR 0 1
9385: PPUSH
9386: CALL_OW 314
9390: IFFALSE 9394
// continue ;
9392: GO 9210
// if not IsInUnit ( i ) and not tag and empty then
9394: LD_VAR 0 1
9398: PPUSH
9399: CALL_OW 310
9403: NOT
9404: PUSH
9405: LD_VAR 0 8
9409: NOT
9410: AND
9411: PUSH
9412: LD_VAR 0 16
9416: AND
9417: IFFALSE 9495
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
9419: LD_VAR 0 1
9423: PPUSH
9424: LD_VAR 0 16
9428: PUSH
9429: LD_INT 1
9431: ARRAY
9432: PPUSH
9433: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
9437: LD_VAR 0 16
9441: PUSH
9442: LD_INT 1
9444: ARRAY
9445: PPUSH
9446: CALL_OW 266
9450: PUSH
9451: LD_INT 5
9453: EQUAL
9454: PUSH
9455: LD_INT 50
9457: PPUSH
9458: CALL_OW 13
9462: AND
9463: IFFALSE 9477
// AddComChangeProfession ( i , class_mortar ) ;
9465: LD_VAR 0 1
9469: PPUSH
9470: LD_INT 8
9472: PPUSH
9473: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
9477: LD_ADDR_VAR 0 16
9481: PUSH
9482: LD_VAR 0 16
9486: PPUSH
9487: LD_INT 1
9489: PPUSH
9490: CALL_OW 3
9494: ST_TO_ADDR
// end ; end ;
9495: GO 9210
9497: POP
9498: POP
// end ; end ; end ;
9499: PPOPN 19
9501: END
// every 0 0$2 trigger IsOk ( legCargo ) and legScriptActive and spotByLegion do var cr , enemyInArea ;
9502: LD_EXP 45
9506: PPUSH
9507: CALL_OW 302
9511: PUSH
9512: LD_EXP 4
9516: AND
9517: PUSH
9518: LD_EXP 9
9522: AND
9523: IFFALSE 9805
9525: GO 9527
9527: DISABLE
9528: LD_INT 0
9530: PPUSH
9531: PPUSH
// begin enable ;
9532: ENABLE
// enemyInArea := FilterUnitsInArea ( legBaseArea , [ [ f_enemy , 8 ] , [ f_ok ] ] ) ;
9533: LD_ADDR_VAR 0 2
9537: PUSH
9538: LD_INT 2
9540: PPUSH
9541: LD_INT 81
9543: PUSH
9544: LD_INT 8
9546: PUSH
9547: EMPTY
9548: LIST
9549: LIST
9550: PUSH
9551: LD_INT 50
9553: PUSH
9554: EMPTY
9555: LIST
9556: PUSH
9557: EMPTY
9558: LIST
9559: LIST
9560: PPUSH
9561: CALL_OW 70
9565: ST_TO_ADDR
// cr := GetListOfCratesInArea ( cratesNorthArea ) ;
9566: LD_ADDR_VAR 0 1
9570: PUSH
9571: LD_INT 16
9573: PPUSH
9574: CALL_OW 435
9578: ST_TO_ADDR
// if GetFuel ( legCargo ) < 10 and not See ( 2 , legCargo ) and GetEngine ( legCargo ) = engine_combustion then
9579: LD_EXP 45
9583: PPUSH
9584: CALL_OW 261
9588: PUSH
9589: LD_INT 10
9591: LESS
9592: PUSH
9593: LD_INT 2
9595: PPUSH
9596: LD_EXP 45
9600: PPUSH
9601: CALL_OW 292
9605: NOT
9606: AND
9607: PUSH
9608: LD_EXP 45
9612: PPUSH
9613: CALL_OW 262
9617: PUSH
9618: LD_INT 1
9620: EQUAL
9621: AND
9622: IFFALSE 9636
// SetFuel ( legCargo , 100 ) ;
9624: LD_EXP 45
9628: PPUSH
9629: LD_INT 100
9631: PPUSH
9632: CALL_OW 240
// if not HasTask ( legCargo ) and GetCargo ( legCargo , mat_cans ) < 100 and not enemyInArea then
9636: LD_EXP 45
9640: PPUSH
9641: CALL_OW 314
9645: NOT
9646: PUSH
9647: LD_EXP 45
9651: PPUSH
9652: LD_INT 1
9654: PPUSH
9655: CALL_OW 289
9659: PUSH
9660: LD_INT 100
9662: LESS
9663: AND
9664: PUSH
9665: LD_VAR 0 2
9669: NOT
9670: AND
9671: IFFALSE 9737
// begin if cr then
9673: LD_VAR 0 1
9677: IFFALSE 9708
// ComCollect ( legCargo , cr [ 1 ] , cr [ 2 ] ) else
9679: LD_EXP 45
9683: PPUSH
9684: LD_VAR 0 1
9688: PUSH
9689: LD_INT 1
9691: ARRAY
9692: PPUSH
9693: LD_VAR 0 1
9697: PUSH
9698: LD_INT 2
9700: ARRAY
9701: PPUSH
9702: CALL_OW 117
9706: GO 9735
// if not IsInArea ( legCargo , cratesNorthArea ) then
9708: LD_EXP 45
9712: PPUSH
9713: LD_INT 16
9715: PPUSH
9716: CALL_OW 308
9720: NOT
9721: IFFALSE 9735
// ComMoveToArea ( legCargo , cratesNorthArea ) ;
9723: LD_EXP 45
9727: PPUSH
9728: LD_INT 16
9730: PPUSH
9731: CALL_OW 113
// exit ;
9735: GO 9805
// end ; if enemyInArea and not IsInArea ( legCargo , legBaseArea ) then
9737: LD_VAR 0 2
9741: PUSH
9742: LD_EXP 45
9746: PPUSH
9747: LD_INT 2
9749: PPUSH
9750: CALL_OW 308
9754: NOT
9755: AND
9756: IFFALSE 9775
// ComMoveXY ( legCargo , 194 , 17 ) else
9758: LD_EXP 45
9762: PPUSH
9763: LD_INT 194
9765: PPUSH
9766: LD_INT 17
9768: PPUSH
9769: CALL_OW 111
9773: GO 9805
// if GetCargo ( legCargo , mat_cans ) = 100 then
9775: LD_EXP 45
9779: PPUSH
9780: LD_INT 1
9782: PPUSH
9783: CALL_OW 289
9787: PUSH
9788: LD_INT 100
9790: EQUAL
9791: IFFALSE 9805
// ComGive ( legCargo , legBase ) ;
9793: LD_EXP 45
9797: PPUSH
9798: LD_INT 38
9800: PPUSH
9801: CALL_OW 161
// end ;
9805: PPOPN 2
9807: END
// every 6 6$00 trigger Count ( UnitFilter ( legRTanks , [ f_ok ] ) ) < 5 and legScriptActive and spotByLegion and spotArabianBase do var i , parts , part , level ;
9808: LD_EXP 44
9812: PPUSH
9813: LD_INT 50
9815: PUSH
9816: EMPTY
9817: LIST
9818: PPUSH
9819: CALL_OW 72
9823: PPUSH
9824: CALL 22790 0 1
9828: PUSH
9829: LD_INT 5
9831: LESS
9832: PUSH
9833: LD_EXP 4
9837: AND
9838: PUSH
9839: LD_EXP 9
9843: AND
9844: PUSH
9845: LD_EXP 7
9849: AND
9850: IFFALSE 10054
9852: GO 9854
9854: DISABLE
9855: LD_INT 0
9857: PPUSH
9858: PPUSH
9859: PPUSH
9860: PPUSH
// begin enable ;
9861: ENABLE
// parts := [ [ ar_medium_trike , ar_rocket_launcher ] , [ ar_medium_trike , ar_gun ] , [ ar_medium_trike , ar_flame_thrower ] , [ ar_half_tracked , ar_rocket_launcher ] , [ ar_half_tracked , ar_gatling_gun ] ] ;
9862: LD_ADDR_VAR 0 2
9866: PUSH
9867: LD_INT 13
9869: PUSH
9870: LD_INT 28
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: PUSH
9877: LD_INT 13
9879: PUSH
9880: LD_INT 27
9882: PUSH
9883: EMPTY
9884: LIST
9885: LIST
9886: PUSH
9887: LD_INT 13
9889: PUSH
9890: LD_INT 26
9892: PUSH
9893: EMPTY
9894: LIST
9895: LIST
9896: PUSH
9897: LD_INT 14
9899: PUSH
9900: LD_INT 28
9902: PUSH
9903: EMPTY
9904: LIST
9905: LIST
9906: PUSH
9907: LD_INT 14
9909: PUSH
9910: LD_INT 25
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: PUSH
9917: EMPTY
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: ST_TO_ADDR
// level := tick div 60 60$00 ;
9924: LD_ADDR_VAR 0 4
9928: PUSH
9929: LD_OWVAR 1
9933: PUSH
9934: LD_INT 126000
9936: DIV
9937: ST_TO_ADDR
// for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] + level do
9938: LD_ADDR_VAR 0 1
9942: PUSH
9943: DOUBLE
9944: LD_INT 1
9946: DEC
9947: ST_TO_ADDR
9948: LD_INT 3
9950: PUSH
9951: LD_INT 3
9953: PUSH
9954: LD_INT 4
9956: PUSH
9957: LD_INT 4
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: PUSH
9966: LD_OWVAR 67
9970: ARRAY
9971: PUSH
9972: LD_VAR 0 4
9976: PLUS
9977: PUSH
9978: FOR_TO
9979: IFFALSE 10052
// begin part := parts [ rand ( 1 , parts ) ] ;
9981: LD_ADDR_VAR 0 3
9985: PUSH
9986: LD_VAR 0 2
9990: PUSH
9991: LD_INT 1
9993: PPUSH
9994: LD_VAR 0 2
9998: PPUSH
9999: CALL_OW 12
10003: ARRAY
10004: ST_TO_ADDR
// legConstructList := Join ( legConstructList , [ part [ 1 ] , engine_combustion , control_remote , part [ 2 ] ] ) end ;
10005: LD_ADDR_EXP 40
10009: PUSH
10010: LD_EXP 40
10014: PPUSH
10015: LD_VAR 0 3
10019: PUSH
10020: LD_INT 1
10022: ARRAY
10023: PUSH
10024: LD_INT 1
10026: PUSH
10027: LD_INT 2
10029: PUSH
10030: LD_VAR 0 3
10034: PUSH
10035: LD_INT 2
10037: ARRAY
10038: PUSH
10039: EMPTY
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: PPUSH
10045: CALL 58399 0 2
10049: ST_TO_ADDR
10050: GO 9978
10052: POP
10053: POP
// end ;
10054: PPOPN 4
10056: END
// every 20 20$00 trigger not legionDestroyed and tick <= 80 80$00 do
10057: LD_EXP 12
10061: NOT
10062: PUSH
10063: LD_OWVAR 1
10067: PUSH
10068: LD_INT 168000
10070: LESSEQUAL
10071: AND
10072: IFFALSE 10111
10074: GO 10076
10076: DISABLE
// begin enable ;
10077: ENABLE
// legConstructList := Join ( legConstructList , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] ) ;
10078: LD_ADDR_EXP 40
10082: PUSH
10083: LD_EXP 40
10087: PPUSH
10088: LD_INT 14
10090: PUSH
10091: LD_INT 1
10093: PUSH
10094: LD_INT 1
10096: PUSH
10097: LD_INT 27
10099: PUSH
10100: EMPTY
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: PPUSH
10106: CALL 58399 0 2
10110: ST_TO_ADDR
// end ;
10111: END
// every 0 0$1 trigger legTanks and spotByLegion and spotArabianBase do var i , mech , enemy ;
10112: LD_EXP 43
10116: PUSH
10117: LD_EXP 9
10121: AND
10122: PUSH
10123: LD_EXP 7
10127: AND
10128: IFFALSE 10721
10130: GO 10132
10132: DISABLE
10133: LD_INT 0
10135: PPUSH
10136: PPUSH
10137: PPUSH
// begin enable ;
10138: ENABLE
// if not legTanks then
10139: LD_EXP 43
10143: NOT
10144: IFFALSE 10148
// exit ;
10146: GO 10721
// for i in legTanks do
10148: LD_ADDR_VAR 0 1
10152: PUSH
10153: LD_EXP 43
10157: PUSH
10158: FOR_IN
10159: IFFALSE 10719
// begin if not IsOk ( i ) or GetSide ( i ) <> 8 then
10161: LD_VAR 0 1
10165: PPUSH
10166: CALL_OW 302
10170: NOT
10171: PUSH
10172: LD_VAR 0 1
10176: PPUSH
10177: CALL_OW 255
10181: PUSH
10182: LD_INT 8
10184: NONEQUAL
10185: OR
10186: IFFALSE 10206
// begin legTanks := legTanks diff i ;
10188: LD_ADDR_EXP 43
10192: PUSH
10193: LD_EXP 43
10197: PUSH
10198: LD_VAR 0 1
10202: DIFF
10203: ST_TO_ADDR
// continue ;
10204: GO 10158
// end ; if not GetTag ( i ) and GetControl ( i ) = control_remote then
10206: LD_VAR 0 1
10210: PPUSH
10211: CALL_OW 110
10215: NOT
10216: PUSH
10217: LD_VAR 0 1
10221: PPUSH
10222: CALL_OW 263
10226: PUSH
10227: LD_INT 2
10229: EQUAL
10230: AND
10231: IFFALSE 10245
// SetTag ( i , tAttack ) ;
10233: LD_VAR 0 1
10237: PPUSH
10238: LD_INT 10
10240: PPUSH
10241: CALL_OW 109
// if not GetTag ( i ) or GetTag ( i ) = 0 then
10245: LD_VAR 0 1
10249: PPUSH
10250: CALL_OW 110
10254: NOT
10255: PUSH
10256: LD_VAR 0 1
10260: PPUSH
10261: CALL_OW 110
10265: PUSH
10266: LD_INT 0
10268: EQUAL
10269: OR
10270: IFFALSE 10400
// begin if GetFuel ( i ) < 50 and GetEngine ( i ) = engine_combustion then
10272: LD_VAR 0 1
10276: PPUSH
10277: CALL_OW 261
10281: PUSH
10282: LD_INT 50
10284: LESS
10285: PUSH
10286: LD_VAR 0 1
10290: PPUSH
10291: CALL_OW 262
10295: PUSH
10296: LD_INT 1
10298: EQUAL
10299: AND
10300: IFFALSE 10359
// begin ComMoveXY ( i , 189 , 19 ) ;
10302: LD_VAR 0 1
10306: PPUSH
10307: LD_INT 189
10309: PPUSH
10310: LD_INT 19
10312: PPUSH
10313: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10317: LD_INT 35
10319: PPUSH
10320: CALL_OW 67
// until GetDistUnitXY ( i , 189 , 19 ) < 4 ;
10324: LD_VAR 0 1
10328: PPUSH
10329: LD_INT 189
10331: PPUSH
10332: LD_INT 19
10334: PPUSH
10335: CALL_OW 297
10339: PUSH
10340: LD_INT 4
10342: LESS
10343: IFFALSE 10317
// SetFuel ( i , 100 ) ;
10345: LD_VAR 0 1
10349: PPUSH
10350: LD_INT 100
10352: PPUSH
10353: CALL_OW 240
// end else
10357: GO 10400
// if not IsInArea ( i , legParkingArea ) then
10359: LD_VAR 0 1
10363: PPUSH
10364: LD_INT 15
10366: PPUSH
10367: CALL_OW 308
10371: NOT
10372: IFFALSE 10388
// ComMoveToArea ( i , legParkingArea ) else
10374: LD_VAR 0 1
10378: PPUSH
10379: LD_INT 15
10381: PPUSH
10382: CALL_OW 113
10386: GO 10400
// SetTag ( i , tParking ) ;
10388: LD_VAR 0 1
10392: PPUSH
10393: LD_INT 9
10395: PPUSH
10396: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
10400: LD_VAR 0 1
10404: PPUSH
10405: CALL_OW 110
10409: PUSH
10410: LD_INT 9
10412: EQUAL
10413: IFFALSE 10543
// begin if GetLives ( i ) < 650 then
10415: LD_VAR 0 1
10419: PPUSH
10420: CALL_OW 256
10424: PUSH
10425: LD_INT 650
10427: LESS
10428: IFFALSE 10520
// begin if not IsDrivenBy ( i ) then
10430: LD_VAR 0 1
10434: PPUSH
10435: CALL_OW 311
10439: NOT
10440: IFFALSE 10444
// continue ;
10442: GO 10158
// mech := IsDrivenBy ( i ) ;
10444: LD_ADDR_VAR 0 2
10448: PUSH
10449: LD_VAR 0 1
10453: PPUSH
10454: CALL_OW 311
10458: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
10459: LD_VAR 0 2
10463: PPUSH
10464: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
10468: LD_VAR 0 2
10472: PPUSH
10473: LD_VAR 0 1
10477: PPUSH
10478: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
10482: LD_INT 35
10484: PPUSH
10485: CALL_OW 67
// until GetLives ( i ) = 1000 ;
10489: LD_VAR 0 1
10493: PPUSH
10494: CALL_OW 256
10498: PUSH
10499: LD_INT 1000
10501: EQUAL
10502: IFFALSE 10482
// ComEnterUnit ( mech , i ) ;
10504: LD_VAR 0 2
10508: PPUSH
10509: LD_VAR 0 1
10513: PPUSH
10514: CALL_OW 120
// end else
10518: GO 10543
// if IsDrivenBy ( i ) then
10520: LD_VAR 0 1
10524: PPUSH
10525: CALL_OW 311
10529: IFFALSE 10543
// SetTag ( i , tAttack ) ;
10531: LD_VAR 0 1
10535: PPUSH
10536: LD_INT 10
10538: PPUSH
10539: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
10543: LD_VAR 0 1
10547: PPUSH
10548: CALL_OW 110
10552: PUSH
10553: LD_INT 10
10555: EQUAL
10556: IFFALSE 10717
// begin enemy := FilterUnitsInArea ( legBaseArea , [ f_enemy , 8 ] ) ;
10558: LD_ADDR_VAR 0 3
10562: PUSH
10563: LD_INT 2
10565: PPUSH
10566: LD_INT 81
10568: PUSH
10569: LD_INT 8
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: PPUSH
10576: CALL_OW 70
10580: ST_TO_ADDR
// if GetLives ( i ) < 650 and GetControl ( i ) = control_manual then
10581: LD_VAR 0 1
10585: PPUSH
10586: CALL_OW 256
10590: PUSH
10591: LD_INT 650
10593: LESS
10594: PUSH
10595: LD_VAR 0 1
10599: PPUSH
10600: CALL_OW 263
10604: PUSH
10605: LD_INT 1
10607: EQUAL
10608: AND
10609: IFFALSE 10634
// begin ComStop ( i ) ;
10611: LD_VAR 0 1
10615: PPUSH
10616: CALL_OW 141
// SetTag ( i , 0 ) ;
10620: LD_VAR 0 1
10624: PPUSH
10625: LD_INT 0
10627: PPUSH
10628: CALL_OW 109
// continue ;
10632: GO 10158
// end ; if enemy then
10634: LD_VAR 0 3
10638: IFFALSE 10678
// begin if not HasTask ( i ) then
10640: LD_VAR 0 1
10644: PPUSH
10645: CALL_OW 314
10649: NOT
10650: IFFALSE 10676
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10652: LD_VAR 0 1
10656: PPUSH
10657: LD_VAR 0 3
10661: PPUSH
10662: LD_VAR 0 1
10666: PPUSH
10667: CALL_OW 74
10671: PPUSH
10672: CALL 62621 0 2
// end else
10676: GO 10717
// if legTanks then
10678: LD_EXP 43
10682: IFFALSE 10717
// AgressiveMove ( i , [ [ 200 , 48 ] , [ 210 , 74 ] ] ) ;
10684: LD_VAR 0 1
10688: PPUSH
10689: LD_INT 200
10691: PUSH
10692: LD_INT 48
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: PUSH
10699: LD_INT 210
10701: PUSH
10702: LD_INT 74
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: PPUSH
10713: CALL 61003 0 2
// end ; end ;
10717: GO 10158
10719: POP
10720: POP
// end ;
10721: PPOPN 3
10723: END
// every 3 3$00 trigger not legionDestroyed and Count ( legRTanks ) and spotByLegion and spotArabianBase do var i , tmp , tmp2 ;
10724: LD_EXP 12
10728: NOT
10729: PUSH
10730: LD_EXP 44
10734: PPUSH
10735: CALL 22790 0 1
10739: AND
10740: PUSH
10741: LD_EXP 9
10745: AND
10746: PUSH
10747: LD_EXP 7
10751: AND
10752: IFFALSE 10950
10754: GO 10756
10756: DISABLE
10757: LD_INT 0
10759: PPUSH
10760: PPUSH
10761: PPUSH
// begin enable ;
10762: ENABLE
// tmp := UnitFilter ( legRTanks , [ [ f_linked ] , [ f_ok ] ] ) ;
10763: LD_ADDR_VAR 0 2
10767: PUSH
10768: LD_EXP 44
10772: PPUSH
10773: LD_INT 61
10775: PUSH
10776: EMPTY
10777: LIST
10778: PUSH
10779: LD_INT 50
10781: PUSH
10782: EMPTY
10783: LIST
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: PPUSH
10789: CALL_OW 72
10793: ST_TO_ADDR
// legRTanks := legRTanks diff tmp ;
10794: LD_ADDR_EXP 44
10798: PUSH
10799: LD_EXP 44
10803: PUSH
10804: LD_VAR 0 2
10808: DIFF
10809: ST_TO_ADDR
// if not tmp then
10810: LD_VAR 0 2
10814: NOT
10815: IFFALSE 10819
// exit ;
10817: GO 10950
// tmp2 := UnitFilter ( tmp , [ f_weapon , ar_double_machine_gun ] ) ;
10819: LD_ADDR_VAR 0 3
10823: PUSH
10824: LD_VAR 0 2
10828: PPUSH
10829: LD_INT 34
10831: PUSH
10832: LD_INT 24
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: PPUSH
10839: CALL_OW 72
10843: ST_TO_ADDR
// if tmp2 then
10844: LD_VAR 0 3
10848: IFFALSE 10865
// ComMoveXY ( tmp2 , 241 , 99 ) ;
10850: LD_VAR 0 3
10854: PPUSH
10855: LD_INT 241
10857: PPUSH
10858: LD_INT 99
10860: PPUSH
10861: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10865: LD_INT 35
10867: PPUSH
10868: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
10872: LD_ADDR_VAR 0 2
10876: PUSH
10877: LD_VAR 0 2
10881: PPUSH
10882: LD_INT 50
10884: PUSH
10885: EMPTY
10886: LIST
10887: PPUSH
10888: CALL_OW 72
10892: ST_TO_ADDR
// for i in tmp do
10893: LD_ADDR_VAR 0 1
10897: PUSH
10898: LD_VAR 0 2
10902: PUSH
10903: FOR_IN
10904: IFFALSE 10941
// AgressiveMove ( i , [ [ 200 , 48 ] , [ 210 , 74 ] ] ) ;
10906: LD_VAR 0 1
10910: PPUSH
10911: LD_INT 200
10913: PUSH
10914: LD_INT 48
10916: PUSH
10917: EMPTY
10918: LIST
10919: LIST
10920: PUSH
10921: LD_INT 210
10923: PUSH
10924: LD_INT 74
10926: PUSH
10927: EMPTY
10928: LIST
10929: LIST
10930: PUSH
10931: EMPTY
10932: LIST
10933: LIST
10934: PPUSH
10935: CALL 61003 0 2
10939: GO 10903
10941: POP
10942: POP
// until not tmp ;
10943: LD_VAR 0 2
10947: NOT
10948: IFFALSE 10865
// end ;
10950: PPOPN 3
10952: END
// every 35 35$0 trigger not spotByLegion do var i , un , veh , tmp ;
10953: LD_EXP 9
10957: NOT
10958: IFFALSE 11219
10960: GO 10962
10962: DISABLE
10963: LD_INT 0
10965: PPUSH
10966: PPUSH
10967: PPUSH
10968: PPUSH
// begin uc_side := 8 ;
10969: LD_ADDR_OWVAR 20
10973: PUSH
10974: LD_INT 8
10976: ST_TO_ADDR
// uc_nation := nation_arabian ;
10977: LD_ADDR_OWVAR 21
10981: PUSH
10982: LD_INT 2
10984: ST_TO_ADDR
// for i := 1 to 3 do
10985: LD_ADDR_VAR 0 1
10989: PUSH
10990: DOUBLE
10991: LD_INT 1
10993: DEC
10994: ST_TO_ADDR
10995: LD_INT 3
10997: PUSH
10998: FOR_TO
10999: IFFALSE 11134
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 100 ) ;
11001: LD_INT 14
11003: PPUSH
11004: LD_INT 3
11006: PPUSH
11007: LD_INT 1
11009: PPUSH
11010: LD_INT 27
11012: PUSH
11013: LD_INT 25
11015: PUSH
11016: EMPTY
11017: LIST
11018: LIST
11019: PUSH
11020: LD_VAR 0 1
11024: PUSH
11025: LD_INT 2
11027: MOD
11028: PUSH
11029: LD_INT 1
11031: PLUS
11032: ARRAY
11033: PPUSH
11034: LD_INT 100
11036: PPUSH
11037: CALL 25528 0 5
// veh := CreateVehicle ;
11041: LD_ADDR_VAR 0 3
11045: PUSH
11046: CALL_OW 45
11050: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
11051: LD_VAR 0 3
11055: PPUSH
11056: LD_INT 5
11058: PPUSH
11059: CALL_OW 233
// PlaceUnitArea ( veh , southSpawnArea , false ) ;
11063: LD_VAR 0 3
11067: PPUSH
11068: LD_INT 44
11070: PPUSH
11071: LD_INT 0
11073: PPUSH
11074: CALL_OW 49
// PrepareMechanic ( false , 6 ) ;
11078: LD_INT 0
11080: PPUSH
11081: LD_INT 6
11083: PPUSH
11084: CALL_OW 383
// un := CreateHuman ;
11088: LD_ADDR_VAR 0 2
11092: PUSH
11093: CALL_OW 44
11097: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
11098: LD_VAR 0 2
11102: PPUSH
11103: LD_VAR 0 3
11107: PPUSH
11108: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
11112: LD_ADDR_VAR 0 4
11116: PUSH
11117: LD_VAR 0 4
11121: PPUSH
11122: LD_VAR 0 3
11126: PPUSH
11127: CALL 58399 0 2
11131: ST_TO_ADDR
// end ;
11132: GO 10998
11134: POP
11135: POP
// ComMoveXY ( tmp , 219 , 110 ) ;
11136: LD_VAR 0 4
11140: PPUSH
11141: LD_INT 219
11143: PPUSH
11144: LD_INT 110
11146: PPUSH
11147: CALL_OW 111
// AddComMoveXY ( tmp , 220 , 94 ) ;
11151: LD_VAR 0 4
11155: PPUSH
11156: LD_INT 220
11158: PPUSH
11159: LD_INT 94
11161: PPUSH
11162: CALL_OW 171
// AddComMoveXY ( tmp , 209 , 66 ) ;
11166: LD_VAR 0 4
11170: PPUSH
11171: LD_INT 209
11173: PPUSH
11174: LD_INT 66
11176: PPUSH
11177: CALL_OW 171
// AddComMoveXY ( tmp , 189 , 22 ) ;
11181: LD_VAR 0 4
11185: PPUSH
11186: LD_INT 189
11188: PPUSH
11189: LD_INT 22
11191: PPUSH
11192: CALL_OW 171
// wait ( 0 0$10 ) ;
11196: LD_INT 350
11198: PPUSH
11199: CALL_OW 67
// legTanks := legTanks union tmp ;
11203: LD_ADDR_EXP 43
11207: PUSH
11208: LD_EXP 43
11212: PUSH
11213: LD_VAR 0 4
11217: UNION
11218: ST_TO_ADDR
// end ; end_of_file
11219: PPOPN 4
11221: END
// export function CreateNature ; var i , areas , amount ; begin
11222: LD_INT 0
11224: PPUSH
11225: PPUSH
11226: PPUSH
11227: PPUSH
// PrepareTiger ( 0 ) ;
11228: LD_INT 0
11230: PPUSH
11231: CALL 54775 0 1
// for i := 1 to [ 10 , 8 , 5 , 5 ] [ Difficulty ] do
11235: LD_ADDR_VAR 0 2
11239: PUSH
11240: DOUBLE
11241: LD_INT 1
11243: DEC
11244: ST_TO_ADDR
11245: LD_INT 10
11247: PUSH
11248: LD_INT 8
11250: PUSH
11251: LD_INT 5
11253: PUSH
11254: LD_INT 5
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: PUSH
11263: LD_OWVAR 67
11267: ARRAY
11268: PUSH
11269: FOR_TO
11270: IFFALSE 11289
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
11272: CALL_OW 44
11276: PPUSH
11277: LD_INT 7
11279: PPUSH
11280: LD_INT 0
11282: PPUSH
11283: CALL_OW 49
11287: GO 11269
11289: POP
11290: POP
// PrepareBird ;
11291: CALL 54956 0 0
// for i := 1 to 3 do
11295: LD_ADDR_VAR 0 2
11299: PUSH
11300: DOUBLE
11301: LD_INT 1
11303: DEC
11304: ST_TO_ADDR
11305: LD_INT 3
11307: PUSH
11308: FOR_TO
11309: IFFALSE 11328
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
11311: CALL_OW 44
11315: PPUSH
11316: LD_INT 7
11318: PPUSH
11319: LD_INT 0
11321: PPUSH
11322: CALL_OW 49
11326: GO 11308
11328: POP
11329: POP
// PrepareHorse ;
11330: CALL 54996 0 0
// for i := 1 to 3 do
11334: LD_ADDR_VAR 0 2
11338: PUSH
11339: DOUBLE
11340: LD_INT 1
11342: DEC
11343: ST_TO_ADDR
11344: LD_INT 3
11346: PUSH
11347: FOR_TO
11348: IFFALSE 11367
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
11350: CALL_OW 44
11354: PPUSH
11355: LD_INT 7
11357: PPUSH
11358: LD_INT 0
11360: PPUSH
11361: CALL_OW 49
11365: GO 11347
11367: POP
11368: POP
// PrepareFrog ;
11369: CALL 54876 0 0
// for i := 1 to 3 do
11373: LD_ADDR_VAR 0 2
11377: PUSH
11378: DOUBLE
11379: LD_INT 1
11381: DEC
11382: ST_TO_ADDR
11383: LD_INT 3
11385: PUSH
11386: FOR_TO
11387: IFFALSE 11406
// PlaceUnitArea ( CreateHuman , frogArea , false ) ;
11389: CALL_OW 44
11393: PPUSH
11394: LD_INT 8
11396: PPUSH
11397: LD_INT 0
11399: PPUSH
11400: CALL_OW 49
11404: GO 11386
11406: POP
11407: POP
// amount := [ 3 , 2 , 2 , 1 ] [ Difficulty ] ;
11408: LD_ADDR_VAR 0 4
11412: PUSH
11413: LD_INT 3
11415: PUSH
11416: LD_INT 2
11418: PUSH
11419: LD_INT 2
11421: PUSH
11422: LD_INT 1
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: PUSH
11431: LD_OWVAR 67
11435: ARRAY
11436: ST_TO_ADDR
// areas := [ mastodont1Area , mastodont2Area , mastodont3Area , mastodont4Area ] ;
11437: LD_ADDR_VAR 0 3
11441: PUSH
11442: LD_INT 18
11444: PUSH
11445: LD_INT 19
11447: PUSH
11448: LD_INT 20
11450: PUSH
11451: LD_INT 21
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: ST_TO_ADDR
// PrepareMastodont ;
11460: CALL 55036 0 0
// for i := 1 to amount do
11464: LD_ADDR_VAR 0 2
11468: PUSH
11469: DOUBLE
11470: LD_INT 1
11472: DEC
11473: ST_TO_ADDR
11474: LD_VAR 0 4
11478: PUSH
11479: FOR_TO
11480: IFFALSE 11517
// PlaceUnitArea ( CreateVehicle , areas [ ( i - 1 ) + Difficulty ] , false ) ;
11482: CALL_OW 45
11486: PPUSH
11487: LD_VAR 0 3
11491: PUSH
11492: LD_VAR 0 2
11496: PUSH
11497: LD_INT 1
11499: MINUS
11500: PUSH
11501: LD_OWVAR 67
11505: PLUS
11506: ARRAY
11507: PPUSH
11508: LD_INT 0
11510: PPUSH
11511: CALL_OW 49
11515: GO 11479
11517: POP
11518: POP
// PrepareApeman ( 0 ) ;
11519: LD_INT 0
11521: PPUSH
11522: CALL 54647 0 1
// hc_skills := [ 4 , 2 , 0 , 0 ] ;
11526: LD_ADDR_OWVAR 31
11530: PUSH
11531: LD_INT 4
11533: PUSH
11534: LD_INT 2
11536: PUSH
11537: LD_INT 0
11539: PUSH
11540: LD_INT 0
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: ST_TO_ADDR
// for i := 1 to [ 9 , 7 , 6 , 5 ] [ Difficulty ] do
11549: LD_ADDR_VAR 0 2
11553: PUSH
11554: DOUBLE
11555: LD_INT 1
11557: DEC
11558: ST_TO_ADDR
11559: LD_INT 9
11561: PUSH
11562: LD_INT 7
11564: PUSH
11565: LD_INT 6
11567: PUSH
11568: LD_INT 5
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: PUSH
11577: LD_OWVAR 67
11581: ARRAY
11582: PUSH
11583: FOR_TO
11584: IFFALSE 11603
// PlaceUnitArea ( CreateHuman , apeArea , false ) ;
11586: CALL_OW 44
11590: PPUSH
11591: LD_INT 6
11593: PPUSH
11594: LD_INT 0
11596: PPUSH
11597: CALL_OW 49
11601: GO 11583
11603: POP
11604: POP
// for i := 1 to [ 8 , 7 , 6 , 5 ] [ Difficulty ] do
11605: LD_ADDR_VAR 0 2
11609: PUSH
11610: DOUBLE
11611: LD_INT 1
11613: DEC
11614: ST_TO_ADDR
11615: LD_INT 8
11617: PUSH
11618: LD_INT 7
11620: PUSH
11621: LD_INT 6
11623: PUSH
11624: LD_INT 5
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: PUSH
11633: LD_OWVAR 67
11637: ARRAY
11638: PUSH
11639: FOR_TO
11640: IFFALSE 11665
// PlaceUnitXYR ( CreateHuman , 274 , 133 , 8 , false ) ;
11642: CALL_OW 44
11646: PPUSH
11647: LD_INT 274
11649: PPUSH
11650: LD_INT 133
11652: PPUSH
11653: LD_INT 8
11655: PPUSH
11656: LD_INT 0
11658: PPUSH
11659: CALL_OW 50
11663: GO 11639
11665: POP
11666: POP
// for i := 1 to [ 6 , 5 , 4 , 4 ] [ Difficulty ] do
11667: LD_ADDR_VAR 0 2
11671: PUSH
11672: DOUBLE
11673: LD_INT 1
11675: DEC
11676: ST_TO_ADDR
11677: LD_INT 6
11679: PUSH
11680: LD_INT 5
11682: PUSH
11683: LD_INT 4
11685: PUSH
11686: LD_INT 4
11688: PUSH
11689: EMPTY
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: PUSH
11695: LD_OWVAR 67
11699: ARRAY
11700: PUSH
11701: FOR_TO
11702: IFFALSE 11727
// PlaceUnitXYR ( CreateHuman , 208 , 142 , 8 , false ) ;
11704: CALL_OW 44
11708: PPUSH
11709: LD_INT 208
11711: PPUSH
11712: LD_INT 142
11714: PPUSH
11715: LD_INT 8
11717: PPUSH
11718: LD_INT 0
11720: PPUSH
11721: CALL_OW 50
11725: GO 11701
11727: POP
11728: POP
// end ;
11729: LD_VAR 0 1
11733: RET
// export function AreInArea ( units , area ) ; var i ; begin
11734: LD_INT 0
11736: PPUSH
11737: PPUSH
// result := false ;
11738: LD_ADDR_VAR 0 3
11742: PUSH
11743: LD_INT 0
11745: ST_TO_ADDR
// if not units then
11746: LD_VAR 0 1
11750: NOT
11751: IFFALSE 11755
// exit ;
11753: GO 11821
// for i in units do
11755: LD_ADDR_VAR 0 4
11759: PUSH
11760: LD_VAR 0 1
11764: PUSH
11765: FOR_IN
11766: IFFALSE 11819
// if IsInArea ( i , area ) or IsInArea ( IsInUnit ( i ) , area ) then
11768: LD_VAR 0 4
11772: PPUSH
11773: LD_VAR 0 2
11777: PPUSH
11778: CALL_OW 308
11782: PUSH
11783: LD_VAR 0 4
11787: PPUSH
11788: CALL_OW 310
11792: PPUSH
11793: LD_VAR 0 2
11797: PPUSH
11798: CALL_OW 308
11802: OR
11803: IFFALSE 11817
// begin result := true ;
11805: LD_ADDR_VAR 0 3
11809: PUSH
11810: LD_INT 1
11812: ST_TO_ADDR
// exit ;
11813: POP
11814: POP
11815: GO 11821
// end ;
11817: GO 11765
11819: POP
11820: POP
// end ; end_of_file
11821: LD_VAR 0 3
11825: RET
// export function Action ; var i , mech , veh , amTroops ; begin
11826: LD_INT 0
11828: PPUSH
11829: PPUSH
11830: PPUSH
11831: PPUSH
11832: PPUSH
// SaveForQuickRestart ;
11833: CALL_OW 22
// InGameOn ;
11837: CALL_OW 8
// CenterNowOnXY ( 84 , 28 ) ;
11841: LD_INT 84
11843: PPUSH
11844: LD_INT 28
11846: PPUSH
11847: CALL_OW 86
// RevealFogArea ( 2 , heikeVisibleRoadArea ) ;
11851: LD_INT 2
11853: PPUSH
11854: LD_INT 9
11856: PPUSH
11857: CALL_OW 332
// ComMoveXY ( Heike , 90 , 30 ) ;
11861: LD_EXP 23
11865: PPUSH
11866: LD_INT 90
11868: PPUSH
11869: LD_INT 30
11871: PPUSH
11872: CALL_OW 111
// uc_side := 1 ;
11876: LD_ADDR_OWVAR 20
11880: PUSH
11881: LD_INT 1
11883: ST_TO_ADDR
// uc_nation := nation_american ;
11884: LD_ADDR_OWVAR 21
11888: PUSH
11889: LD_INT 1
11891: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 66 ) ;
11892: LD_INT 3
11894: PPUSH
11895: LD_INT 1
11897: PPUSH
11898: LD_INT 1
11900: PPUSH
11901: LD_INT 9
11903: PPUSH
11904: LD_INT 66
11906: PPUSH
11907: CALL 25528 0 5
// veh := CreateVehicle ;
11911: LD_ADDR_VAR 0 4
11915: PUSH
11916: CALL_OW 45
11920: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
11921: LD_VAR 0 4
11925: PPUSH
11926: LD_INT 1
11928: PPUSH
11929: CALL_OW 233
// PlaceUnitXY ( veh , 80 , 27 , false ) ;
11933: LD_VAR 0 4
11937: PPUSH
11938: LD_INT 80
11940: PPUSH
11941: LD_INT 27
11943: PPUSH
11944: LD_INT 0
11946: PPUSH
11947: CALL_OW 48
// PrepareMechanic ( sex_male , 8 ) ;
11951: LD_INT 1
11953: PPUSH
11954: LD_INT 8
11956: PPUSH
11957: CALL_OW 383
// mech := CreateHuman ;
11961: LD_ADDR_VAR 0 3
11965: PUSH
11966: CALL_OW 44
11970: ST_TO_ADDR
// PlaceHumanInUnit ( mech , veh ) ;
11971: LD_VAR 0 3
11975: PPUSH
11976: LD_VAR 0 4
11980: PPUSH
11981: CALL_OW 52
// repeat wait ( 0 0$1 ) ;
11985: LD_INT 35
11987: PPUSH
11988: CALL_OW 67
// until HexInfo ( 90 , 30 ) ;
11992: LD_INT 90
11994: PPUSH
11995: LD_INT 30
11997: PPUSH
11998: CALL_OW 428
12002: IFFALSE 11985
// PlaceSeeing ( 80 , 27 , 2 , - 6 ) ;
12004: LD_INT 80
12006: PPUSH
12007: LD_INT 27
12009: PPUSH
12010: LD_INT 2
12012: PPUSH
12013: LD_INT 6
12015: NEG
12016: PPUSH
12017: CALL_OW 330
// CenterNowOnXY ( 80 , 27 ) ;
12021: LD_INT 80
12023: PPUSH
12024: LD_INT 27
12026: PPUSH
12027: CALL_OW 86
// DialogueOn ;
12031: CALL_OW 6
// Say ( Heike , DH-Start-1 ) ;
12035: LD_EXP 23
12039: PPUSH
12040: LD_STRING DH-Start-1
12042: PPUSH
12043: CALL_OW 88
// DialogueOff ;
12047: CALL_OW 7
// ComAttackUnit ( Heike , veh ) ;
12051: LD_EXP 23
12055: PPUSH
12056: LD_VAR 0 4
12060: PPUSH
12061: CALL_OW 115
// wait ( 0 0$1 ) ;
12065: LD_INT 35
12067: PPUSH
12068: CALL_OW 67
// SetLives ( IsInUnit ( Heike ) , 200 ) ;
12072: LD_EXP 23
12076: PPUSH
12077: CALL_OW 310
12081: PPUSH
12082: LD_INT 200
12084: PPUSH
12085: CALL_OW 234
// wait ( 0 0$0.3 ) ;
12089: LD_INT 10
12091: PPUSH
12092: CALL_OW 67
// DialogueOn ;
12096: CALL_OW 6
// Say ( Heike , DH-Start-2 ) ;
12100: LD_EXP 23
12104: PPUSH
12105: LD_STRING DH-Start-2
12107: PPUSH
12108: CALL_OW 88
// DialogueOff ;
12112: CALL_OW 7
// ComAttackUnit ( Heike , veh ) ;
12116: LD_EXP 23
12120: PPUSH
12121: LD_VAR 0 4
12125: PPUSH
12126: CALL_OW 115
// wait ( 0 0$0.2 ) ;
12130: LD_INT 7
12132: PPUSH
12133: CALL_OW 67
// ComCrawl ( Heike ) ;
12137: LD_EXP 23
12141: PPUSH
12142: CALL_OW 137
// wait ( 0 0$3 ) ;
12146: LD_INT 105
12148: PPUSH
12149: CALL_OW 67
// PlaceUnitXY ( omarVehicle , 82 , 43 , false ) ;
12153: LD_EXP 26
12157: PPUSH
12158: LD_INT 82
12160: PPUSH
12161: LD_INT 43
12163: PPUSH
12164: LD_INT 0
12166: PPUSH
12167: CALL_OW 48
// PlaceHumanInUnit ( Omar , omarVehicle ) ;
12171: LD_EXP 24
12175: PPUSH
12176: LD_EXP 26
12180: PPUSH
12181: CALL_OW 52
// ComMoveXY ( Omar , 79 , 32 ) ;
12185: LD_EXP 24
12189: PPUSH
12190: LD_INT 79
12192: PPUSH
12193: LD_INT 32
12195: PPUSH
12196: CALL_OW 111
// wait ( 0 0$1 ) ;
12200: LD_INT 35
12202: PPUSH
12203: CALL_OW 67
// PlaceSeeing ( 79 , 32 , 2 , - 8 ) ;
12207: LD_INT 79
12209: PPUSH
12210: LD_INT 32
12212: PPUSH
12213: LD_INT 2
12215: PPUSH
12216: LD_INT 8
12218: NEG
12219: PPUSH
12220: CALL_OW 330
// wait ( 0 0$3 ) ;
12224: LD_INT 105
12226: PPUSH
12227: CALL_OW 67
// SetLives ( veh , 200 ) ;
12231: LD_VAR 0 4
12235: PPUSH
12236: LD_INT 200
12238: PPUSH
12239: CALL_OW 234
// wait ( 0 0$1 ) ;
12243: LD_INT 35
12245: PPUSH
12246: CALL_OW 67
// SetLives ( mech , 10 ) ;
12250: LD_VAR 0 3
12254: PPUSH
12255: LD_INT 10
12257: PPUSH
12258: CALL_OW 234
// wait ( 0 0$2 ) ;
12262: LD_INT 70
12264: PPUSH
12265: CALL_OW 67
// ComWalk ( Heike ) ;
12269: LD_EXP 23
12273: PPUSH
12274: CALL_OW 138
// wait ( 1 ) ;
12278: LD_INT 1
12280: PPUSH
12281: CALL_OW 67
// ComMoveXY ( Heike , 81 , 25 ) ;
12285: LD_EXP 23
12289: PPUSH
12290: LD_INT 81
12292: PPUSH
12293: LD_INT 25
12295: PPUSH
12296: CALL_OW 111
// AddComMoveXY ( Heike , 72 , 25 ) ;
12300: LD_EXP 23
12304: PPUSH
12305: LD_INT 72
12307: PPUSH
12308: LD_INT 25
12310: PPUSH
12311: CALL_OW 171
// wait ( 0 0$3 ) ;
12315: LD_INT 105
12317: PPUSH
12318: CALL_OW 67
// ComExitVehicle ( Omar ) ;
12322: LD_EXP 24
12326: PPUSH
12327: CALL_OW 121
// wait ( 1 ) ;
12331: LD_INT 1
12333: PPUSH
12334: CALL_OW 67
// ComMoveXY ( Omar , 77 , 28 ) ;
12338: LD_EXP 24
12342: PPUSH
12343: LD_INT 77
12345: PPUSH
12346: LD_INT 28
12348: PPUSH
12349: CALL_OW 111
// AddComTurnUnit ( Omar , Heike ) ;
12353: LD_EXP 24
12357: PPUSH
12358: LD_EXP 23
12362: PPUSH
12363: CALL_OW 179
// Say ( Omar , DO-Start-3 ) ;
12367: LD_EXP 24
12371: PPUSH
12372: LD_STRING DO-Start-3
12374: PPUSH
12375: CALL_OW 88
// repeat wait ( 3 ) ;
12379: LD_INT 3
12381: PPUSH
12382: CALL_OW 67
// until IsAt ( Heike , 72 , 25 ) ;
12386: LD_EXP 23
12390: PPUSH
12391: LD_INT 72
12393: PPUSH
12394: LD_INT 25
12396: PPUSH
12397: CALL_OW 307
12401: IFFALSE 12379
// ComHold ( Heike ) ;
12403: LD_EXP 23
12407: PPUSH
12408: CALL_OW 140
// ComTurnUnit ( Omar , Heike ) ;
12412: LD_EXP 24
12416: PPUSH
12417: LD_EXP 23
12421: PPUSH
12422: CALL_OW 119
// ComMoveUnit ( Heike , Omar ) ;
12426: LD_EXP 23
12430: PPUSH
12431: LD_EXP 24
12435: PPUSH
12436: CALL_OW 112
// wait ( 0 0$1 ) ;
12440: LD_INT 35
12442: PPUSH
12443: CALL_OW 67
// ComTurnUnit ( Heike , Omar ) ;
12447: LD_EXP 23
12451: PPUSH
12452: LD_EXP 24
12456: PPUSH
12457: CALL_OW 119
// Say ( Heike , DH-Start-4 ) ;
12461: LD_EXP 23
12465: PPUSH
12466: LD_STRING DH-Start-4
12468: PPUSH
12469: CALL_OW 88
// Say ( Omar , DO-Start-5 ) ;
12473: LD_EXP 24
12477: PPUSH
12478: LD_STRING DO-Start-5
12480: PPUSH
12481: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
12485: LD_EXP 23
12489: PPUSH
12490: LD_STRING DH-Start-6
12492: PPUSH
12493: CALL_OW 88
// Say ( Omar , DO-Start-7 ) ;
12497: LD_EXP 24
12501: PPUSH
12502: LD_STRING DO-Start-7
12504: PPUSH
12505: CALL_OW 88
// if Query ( QOmar ) = 2 then
12509: LD_STRING QOmar
12511: PPUSH
12512: CALL_OW 97
12516: PUSH
12517: LD_INT 2
12519: EQUAL
12520: IFFALSE 12825
// begin Say ( Heike , DH-QuestionN-1 ) ;
12522: LD_EXP 23
12526: PPUSH
12527: LD_STRING DH-QuestionN-1
12529: PPUSH
12530: CALL_OW 88
// ComMoveXY ( Heike , 58 , 27 ) ;
12534: LD_EXP 23
12538: PPUSH
12539: LD_INT 58
12541: PPUSH
12542: LD_INT 27
12544: PPUSH
12545: CALL_OW 111
// wait ( 0 0$2 ) ;
12549: LD_INT 70
12551: PPUSH
12552: CALL_OW 67
// ComEnterUnit ( Omar , omarVehicle ) ;
12556: LD_EXP 24
12560: PPUSH
12561: LD_EXP 26
12565: PPUSH
12566: CALL_OW 120
// RemoveSeeing ( 79 , 32 , 2 ) ;
12570: LD_INT 79
12572: PPUSH
12573: LD_INT 32
12575: PPUSH
12576: LD_INT 2
12578: PPUSH
12579: CALL_OW 331
// RemoveSeeing ( 80 , 27 , 2 ) ;
12583: LD_INT 80
12585: PPUSH
12586: LD_INT 27
12588: PPUSH
12589: LD_INT 2
12591: PPUSH
12592: CALL_OW 331
// CenterOnXY ( 58 , 27 ) ;
12596: LD_INT 58
12598: PPUSH
12599: LD_INT 27
12601: PPUSH
12602: CALL_OW 84
// repeat wait ( 3 ) ;
12606: LD_INT 3
12608: PPUSH
12609: CALL_OW 67
// until GetDistUnitXY ( Heike , 88 , 27 ) ;
12613: LD_EXP 23
12617: PPUSH
12618: LD_INT 88
12620: PPUSH
12621: LD_INT 27
12623: PPUSH
12624: CALL_OW 297
12628: IFFALSE 12606
// uc_side := 1 ;
12630: LD_ADDR_OWVAR 20
12634: PUSH
12635: LD_INT 1
12637: ST_TO_ADDR
// uc_nation := nation_american ;
12638: LD_ADDR_OWVAR 21
12642: PUSH
12643: LD_INT 1
12645: ST_TO_ADDR
// amTroops := [ ] ;
12646: LD_ADDR_VAR 0 5
12650: PUSH
12651: EMPTY
12652: ST_TO_ADDR
// for i := 1 to 3 do
12653: LD_ADDR_VAR 0 2
12657: PUSH
12658: DOUBLE
12659: LD_INT 1
12661: DEC
12662: ST_TO_ADDR
12663: LD_INT 3
12665: PUSH
12666: FOR_TO
12667: IFFALSE 12760
// begin PrepareSoldier ( false , 10 ) ;
12669: LD_INT 0
12671: PPUSH
12672: LD_INT 10
12674: PPUSH
12675: CALL_OW 381
// amTroops := Join ( amTroops , CreateHuman ) ;
12679: LD_ADDR_VAR 0 5
12683: PUSH
12684: LD_VAR 0 5
12688: PPUSH
12689: CALL_OW 44
12693: PPUSH
12694: CALL 58399 0 2
12698: ST_TO_ADDR
// SetDir ( amTroops [ i ] , 2 ) ;
12699: LD_VAR 0 5
12703: PUSH
12704: LD_VAR 0 2
12708: ARRAY
12709: PPUSH
12710: LD_INT 2
12712: PPUSH
12713: CALL_OW 233
// PlaceUnitArea ( amTroops [ i ] , heikeTrapArea , false ) ;
12717: LD_VAR 0 5
12721: PUSH
12722: LD_VAR 0 2
12726: ARRAY
12727: PPUSH
12728: LD_INT 10
12730: PPUSH
12731: LD_INT 0
12733: PPUSH
12734: CALL_OW 49
// ComAttackUnit ( amTroops [ i ] , Heike ) ;
12738: LD_VAR 0 5
12742: PUSH
12743: LD_VAR 0 2
12747: ARRAY
12748: PPUSH
12749: LD_EXP 23
12753: PPUSH
12754: CALL_OW 115
// end ;
12758: GO 12666
12760: POP
12761: POP
// ComAttackUnit ( Heike , amTroops [ 1 ] ) ;
12762: LD_EXP 23
12766: PPUSH
12767: LD_VAR 0 5
12771: PUSH
12772: LD_INT 1
12774: ARRAY
12775: PPUSH
12776: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
12780: LD_INT 35
12782: PPUSH
12783: CALL_OW 67
// until IsDead ( Heike ) or IsDying ( Heike ) ;
12787: LD_EXP 23
12791: PPUSH
12792: CALL_OW 301
12796: PUSH
12797: LD_EXP 23
12801: PPUSH
12802: CALL_OW 303
12806: OR
12807: IFFALSE 12780
// wait ( 0 0$2 ) ;
12809: LD_INT 70
12811: PPUSH
12812: CALL_OW 67
// YouLost ( Heike ) ;
12816: LD_STRING Heike
12818: PPUSH
12819: CALL_OW 104
// exit ;
12823: GO 13745
// end ; Say ( Heike , DH-QuestionY-1 ) ;
12825: LD_EXP 23
12829: PPUSH
12830: LD_STRING DH-QuestionY-1
12832: PPUSH
12833: CALL_OW 88
// wait ( 0 0$0.3 ) ;
12837: LD_INT 10
12839: PPUSH
12840: CALL_OW 67
// Say ( Omar , DO-Story-1 ) ;
12844: LD_EXP 24
12848: PPUSH
12849: LD_STRING DO-Story-1
12851: PPUSH
12852: CALL_OW 88
// Say ( Omar , DO-Story-2 ) ;
12856: LD_EXP 24
12860: PPUSH
12861: LD_STRING DO-Story-2
12863: PPUSH
12864: CALL_OW 88
// Say ( Omar , DO-Story-3 ) ;
12868: LD_EXP 24
12872: PPUSH
12873: LD_STRING DO-Story-3
12875: PPUSH
12876: CALL_OW 88
// Say ( Omar , DO-Story-4 ) ;
12880: LD_EXP 24
12884: PPUSH
12885: LD_STRING DO-Story-4
12887: PPUSH
12888: CALL_OW 88
// Say ( Heike , DH-Story-5 ) ;
12892: LD_EXP 23
12896: PPUSH
12897: LD_STRING DH-Story-5
12899: PPUSH
12900: CALL_OW 88
// Say ( Omar , DO-Story-6 ) ;
12904: LD_EXP 24
12908: PPUSH
12909: LD_STRING DO-Story-6
12911: PPUSH
12912: CALL_OW 88
// Say ( Omar , DO-Story-7 ) ;
12916: LD_EXP 24
12920: PPUSH
12921: LD_STRING DO-Story-7
12923: PPUSH
12924: CALL_OW 88
// ComMoveXY ( Heike , 82 , 44 ) ;
12928: LD_EXP 23
12932: PPUSH
12933: LD_INT 82
12935: PPUSH
12936: LD_INT 44
12938: PPUSH
12939: CALL_OW 111
// AddComHold ( Heike ) ;
12943: LD_EXP 23
12947: PPUSH
12948: CALL_OW 200
// wait ( 0 0$4 ) ;
12952: LD_INT 140
12954: PPUSH
12955: CALL_OW 67
// ComMoveXY ( Omar , 82 , 41 ) ;
12959: LD_EXP 24
12963: PPUSH
12964: LD_INT 82
12966: PPUSH
12967: LD_INT 41
12969: PPUSH
12970: CALL_OW 111
// AddComTurnUnit ( Omar , Heike ) ;
12974: LD_EXP 24
12978: PPUSH
12979: LD_EXP 23
12983: PPUSH
12984: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
12988: LD_INT 35
12990: PPUSH
12991: CALL_OW 67
// until IsAt ( Heike , 82 , 44 ) ;
12995: LD_EXP 23
12999: PPUSH
13000: LD_INT 82
13002: PPUSH
13003: LD_INT 44
13005: PPUSH
13006: CALL_OW 307
13010: IFFALSE 12988
// ComTurnXY ( Heike , 81 , 47 ) ;
13012: LD_EXP 23
13016: PPUSH
13017: LD_INT 81
13019: PPUSH
13020: LD_INT 47
13022: PPUSH
13023: CALL_OW 118
// Say ( Heike , DH-Story-8 ) ;
13027: LD_EXP 23
13031: PPUSH
13032: LD_STRING DH-Story-8
13034: PPUSH
13035: CALL_OW 88
// Say ( Omar , DO-Story-9 ) ;
13039: LD_EXP 24
13043: PPUSH
13044: LD_STRING DO-Story-9
13046: PPUSH
13047: CALL_OW 88
// Say ( Omar , DO-Story-10 ) ;
13051: LD_EXP 24
13055: PPUSH
13056: LD_STRING DO-Story-10
13058: PPUSH
13059: CALL_OW 88
// ComTurnUnit ( Heike , Omar ) ;
13063: LD_EXP 23
13067: PPUSH
13068: LD_EXP 24
13072: PPUSH
13073: CALL_OW 119
// Say ( Heike , DH-Story-11 ) ;
13077: LD_EXP 23
13081: PPUSH
13082: LD_STRING DH-Story-11
13084: PPUSH
13085: CALL_OW 88
// ComMoveUnit ( Omar , Heike ) ;
13089: LD_EXP 24
13093: PPUSH
13094: LD_EXP 23
13098: PPUSH
13099: CALL_OW 112
// wait ( 0 0$0.3 ) ;
13103: LD_INT 10
13105: PPUSH
13106: CALL_OW 67
// ComTurnUnit ( Omar , Heike ) ;
13110: LD_EXP 24
13114: PPUSH
13115: LD_EXP 23
13119: PPUSH
13120: CALL_OW 119
// Say ( Omar , DO-Story-12 ) ;
13124: LD_EXP 24
13128: PPUSH
13129: LD_STRING DO-Story-12
13131: PPUSH
13132: CALL_OW 88
// Say ( Heike , DH-Story-13 ) ;
13136: LD_EXP 23
13140: PPUSH
13141: LD_STRING DH-Story-13
13143: PPUSH
13144: CALL_OW 88
// Say ( Omar , DO-Story-14 ) ;
13148: LD_EXP 24
13152: PPUSH
13153: LD_STRING DO-Story-14
13155: PPUSH
13156: CALL_OW 88
// Say ( Omar , DO-Story-15 ) ;
13160: LD_EXP 24
13164: PPUSH
13165: LD_STRING DO-Story-15
13167: PPUSH
13168: CALL_OW 88
// CenterOnXY ( 84 , 48 ) ;
13172: LD_INT 84
13174: PPUSH
13175: LD_INT 48
13177: PPUSH
13178: CALL_OW 84
// ComMoveXY ( Heike , 84 , 48 ) ;
13182: LD_EXP 23
13186: PPUSH
13187: LD_INT 84
13189: PPUSH
13190: LD_INT 48
13192: PPUSH
13193: CALL_OW 111
// AddComTurnXY ( Heike , 84 , 49 ) ;
13197: LD_EXP 23
13201: PPUSH
13202: LD_INT 84
13204: PPUSH
13205: LD_INT 49
13207: PPUSH
13208: CALL_OW 178
// wait ( 0 0$1 ) ;
13212: LD_INT 35
13214: PPUSH
13215: CALL_OW 67
// ComMoveUnit ( Omar , Heike ) ;
13219: LD_EXP 24
13223: PPUSH
13224: LD_EXP 23
13228: PPUSH
13229: CALL_OW 112
// wait ( 0 0$1 ) ;
13233: LD_INT 35
13235: PPUSH
13236: CALL_OW 67
// ComTurnUnit ( Omar , Heike ) ;
13240: LD_EXP 24
13244: PPUSH
13245: LD_EXP 23
13249: PPUSH
13250: CALL_OW 119
// wait ( 0 0$0.3 ) ;
13254: LD_INT 10
13256: PPUSH
13257: CALL_OW 67
// Say ( Omar , DO-Story-16 ) ;
13261: LD_EXP 24
13265: PPUSH
13266: LD_STRING DO-Story-16
13268: PPUSH
13269: CALL_OW 88
// if Query ( QOmar2 ) = 2 then
13273: LD_STRING QOmar2
13275: PPUSH
13276: CALL_OW 97
13280: PUSH
13281: LD_INT 2
13283: EQUAL
13284: IFFALSE 13622
// begin ComTurnUnit ( Heike , Omar ) ;
13286: LD_EXP 23
13290: PPUSH
13291: LD_EXP 24
13295: PPUSH
13296: CALL_OW 119
// Say ( Heike , DH-QuestionN-1 ) ;
13300: LD_EXP 23
13304: PPUSH
13305: LD_STRING DH-QuestionN-1
13307: PPUSH
13308: CALL_OW 88
// ComMoveXY ( Heike , 79 , 57 ) ;
13312: LD_EXP 23
13316: PPUSH
13317: LD_INT 79
13319: PPUSH
13320: LD_INT 57
13322: PPUSH
13323: CALL_OW 111
// AddComMoveXY ( Heike , 68 , 53 ) ;
13327: LD_EXP 23
13331: PPUSH
13332: LD_INT 68
13334: PPUSH
13335: LD_INT 53
13337: PPUSH
13338: CALL_OW 171
// wait ( 0 0$2 ) ;
13342: LD_INT 70
13344: PPUSH
13345: CALL_OW 67
// ComEnterUnit ( Omar , omarVehicle ) ;
13349: LD_EXP 24
13353: PPUSH
13354: LD_EXP 26
13358: PPUSH
13359: CALL_OW 120
// RemoveSeeing ( 79 , 32 , 2 ) ;
13363: LD_INT 79
13365: PPUSH
13366: LD_INT 32
13368: PPUSH
13369: LD_INT 2
13371: PPUSH
13372: CALL_OW 331
// RemoveSeeing ( 80 , 27 , 2 ) ;
13376: LD_INT 80
13378: PPUSH
13379: LD_INT 27
13381: PPUSH
13382: LD_INT 2
13384: PPUSH
13385: CALL_OW 331
// CenterOnXY ( 68 , 53 ) ;
13389: LD_INT 68
13391: PPUSH
13392: LD_INT 53
13394: PPUSH
13395: CALL_OW 84
// repeat wait ( 3 ) ;
13399: LD_INT 3
13401: PPUSH
13402: CALL_OW 67
// until GetDistUnitXY ( Heike , 68 , 53 ) < 6 ;
13406: LD_EXP 23
13410: PPUSH
13411: LD_INT 68
13413: PPUSH
13414: LD_INT 53
13416: PPUSH
13417: CALL_OW 297
13421: PUSH
13422: LD_INT 6
13424: LESS
13425: IFFALSE 13399
// uc_side := 1 ;
13427: LD_ADDR_OWVAR 20
13431: PUSH
13432: LD_INT 1
13434: ST_TO_ADDR
// uc_nation := nation_american ;
13435: LD_ADDR_OWVAR 21
13439: PUSH
13440: LD_INT 1
13442: ST_TO_ADDR
// amTroops := [ ] ;
13443: LD_ADDR_VAR 0 5
13447: PUSH
13448: EMPTY
13449: ST_TO_ADDR
// for i := 1 to 3 do
13450: LD_ADDR_VAR 0 2
13454: PUSH
13455: DOUBLE
13456: LD_INT 1
13458: DEC
13459: ST_TO_ADDR
13460: LD_INT 3
13462: PUSH
13463: FOR_TO
13464: IFFALSE 13557
// begin PrepareSoldier ( false , 10 ) ;
13466: LD_INT 0
13468: PPUSH
13469: LD_INT 10
13471: PPUSH
13472: CALL_OW 381
// amTroops := Join ( amTroops , CreateHuman ) ;
13476: LD_ADDR_VAR 0 5
13480: PUSH
13481: LD_VAR 0 5
13485: PPUSH
13486: CALL_OW 44
13490: PPUSH
13491: CALL 58399 0 2
13495: ST_TO_ADDR
// SetDir ( amTroops [ i ] , 2 ) ;
13496: LD_VAR 0 5
13500: PUSH
13501: LD_VAR 0 2
13505: ARRAY
13506: PPUSH
13507: LD_INT 2
13509: PPUSH
13510: CALL_OW 233
// PlaceUnitArea ( amTroops [ i ] , heikeTrap2Area , false ) ;
13514: LD_VAR 0 5
13518: PUSH
13519: LD_VAR 0 2
13523: ARRAY
13524: PPUSH
13525: LD_INT 11
13527: PPUSH
13528: LD_INT 0
13530: PPUSH
13531: CALL_OW 49
// ComAttackUnit ( amTroops [ i ] , Heike ) ;
13535: LD_VAR 0 5
13539: PUSH
13540: LD_VAR 0 2
13544: ARRAY
13545: PPUSH
13546: LD_EXP 23
13550: PPUSH
13551: CALL_OW 115
// end ;
13555: GO 13463
13557: POP
13558: POP
// ComAttackUnit ( Heike , amTroops [ 1 ] ) ;
13559: LD_EXP 23
13563: PPUSH
13564: LD_VAR 0 5
13568: PUSH
13569: LD_INT 1
13571: ARRAY
13572: PPUSH
13573: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
13577: LD_INT 35
13579: PPUSH
13580: CALL_OW 67
// until IsDead ( Heike ) or IsDying ( Heike ) ;
13584: LD_EXP 23
13588: PPUSH
13589: CALL_OW 301
13593: PUSH
13594: LD_EXP 23
13598: PPUSH
13599: CALL_OW 303
13603: OR
13604: IFFALSE 13577
// wait ( 0 0$2 ) ;
13606: LD_INT 70
13608: PPUSH
13609: CALL_OW 67
// YouLost ( Heike ) ;
13613: LD_STRING Heike
13615: PPUSH
13616: CALL_OW 104
// exit ;
13620: GO 13745
// end ; Say ( Omar , DO-Objective-1 ) ;
13622: LD_EXP 24
13626: PPUSH
13627: LD_STRING DO-Objective-1
13629: PPUSH
13630: CALL_OW 88
// ComTurnUnit ( Heike , Omar ) ;
13634: LD_EXP 23
13638: PPUSH
13639: LD_EXP 24
13643: PPUSH
13644: CALL_OW 119
// Say ( Heike , DH-Objective-2 ) ;
13648: LD_EXP 23
13652: PPUSH
13653: LD_STRING DH-Objective-2
13655: PPUSH
13656: CALL_OW 88
// Say ( Omar , DO-Objective-3 ) ;
13660: LD_EXP 24
13664: PPUSH
13665: LD_STRING DO-Objective-3
13667: PPUSH
13668: CALL_OW 88
// RemoveSeeing ( 79 , 32 , 2 ) ;
13672: LD_INT 79
13674: PPUSH
13675: LD_INT 32
13677: PPUSH
13678: LD_INT 2
13680: PPUSH
13681: CALL_OW 331
// RemoveSeeing ( 80 , 27 , 2 ) ;
13685: LD_INT 80
13687: PPUSH
13688: LD_INT 27
13690: PPUSH
13691: LD_INT 2
13693: PPUSH
13694: CALL_OW 331
// SetSide ( Omar , 2 ) ;
13698: LD_EXP 24
13702: PPUSH
13703: LD_INT 2
13705: PPUSH
13706: CALL_OW 235
// SetSide ( omarVehicle , 2 ) ;
13710: LD_EXP 26
13714: PPUSH
13715: LD_INT 2
13717: PPUSH
13718: CALL_OW 235
// ChangeMissionObjectives ( O1 ) ;
13722: LD_STRING O1
13724: PPUSH
13725: CALL_OW 337
// InGameOff ;
13729: CALL_OW 9
// gameActive := true ;
13733: LD_ADDR_EXP 19
13737: PUSH
13738: LD_INT 1
13740: ST_TO_ADDR
// SaveForQuickRestart ;
13741: CALL_OW 22
// end ;
13745: LD_VAR 0 1
13749: RET
// every 0 0$2 trigger gameActive and not spotArabianBase and FilterUnitsInArea ( arBaseArea , [ f_side , 2 ] ) do var i ;
13750: LD_EXP 19
13754: PUSH
13755: LD_EXP 7
13759: NOT
13760: AND
13761: PUSH
13762: LD_INT 4
13764: PPUSH
13765: LD_INT 22
13767: PUSH
13768: LD_INT 2
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: PPUSH
13775: CALL_OW 70
13779: AND
13780: IFFALSE 13931
13782: GO 13784
13784: DISABLE
13785: LD_INT 0
13787: PPUSH
// begin spotArabianBase := true ;
13788: LD_ADDR_EXP 7
13792: PUSH
13793: LD_INT 1
13795: ST_TO_ADDR
// DialogueOn ;
13796: CALL_OW 6
// PlaceSeeing ( 232 , 101 , 2 , - 22 ) ;
13800: LD_INT 232
13802: PPUSH
13803: LD_INT 101
13805: PPUSH
13806: LD_INT 2
13808: PPUSH
13809: LD_INT 22
13811: NEG
13812: PPUSH
13813: CALL_OW 330
// RemoveSeeing ( 232 , 101 , 2 ) ;
13817: LD_INT 232
13819: PPUSH
13820: LD_INT 101
13822: PPUSH
13823: LD_INT 2
13825: PPUSH
13826: CALL_OW 331
// CenterNowOnXY ( 232 , 101 ) ;
13830: LD_INT 232
13832: PPUSH
13833: LD_INT 101
13835: PPUSH
13836: CALL_OW 86
// for i in FilterUnitsInArea ( arBaseArea , [ f_side , 5 ] ) do
13840: LD_ADDR_VAR 0 1
13844: PUSH
13845: LD_INT 4
13847: PPUSH
13848: LD_INT 22
13850: PUSH
13851: LD_INT 5
13853: PUSH
13854: EMPTY
13855: LIST
13856: LIST
13857: PPUSH
13858: CALL_OW 70
13862: PUSH
13863: FOR_IN
13864: IFFALSE 13880
// SetSide ( i , 2 ) ;
13866: LD_VAR 0 1
13870: PPUSH
13871: LD_INT 2
13873: PPUSH
13874: CALL_OW 235
13878: GO 13863
13880: POP
13881: POP
// if not spotAmericanBase then
13882: LD_EXP 6
13886: NOT
13887: IFFALSE 13903
// Say ( Omar , DO-ArBase-1a ) else
13889: LD_EXP 24
13893: PPUSH
13894: LD_STRING DO-ArBase-1a
13896: PPUSH
13897: CALL_OW 88
13901: GO 13915
// Say ( Omar , DO-ArBase-1b ) ;
13903: LD_EXP 24
13907: PPUSH
13908: LD_STRING DO-ArBase-1b
13910: PPUSH
13911: CALL_OW 88
// Say ( Heike , DH-ArBase-2 ) ;
13915: LD_EXP 23
13919: PPUSH
13920: LD_STRING DH-ArBase-2
13922: PPUSH
13923: CALL_OW 88
// DialogueOff ;
13927: CALL_OW 7
// end ;
13931: PPOPN 1
13933: END
// every 0 0$1 trigger gameActive and ( IsSelected ( arFac ) or UnitsInside ( arFac ) ) and IsOk ( Heike ) and IsOk ( Omar ) do
13934: LD_EXP 19
13938: PUSH
13939: LD_INT 87
13941: PPUSH
13942: CALL_OW 306
13946: PUSH
13947: LD_INT 87
13949: PPUSH
13950: CALL_OW 313
13954: OR
13955: AND
13956: PUSH
13957: LD_EXP 23
13961: PPUSH
13962: CALL_OW 302
13966: AND
13967: PUSH
13968: LD_EXP 24
13972: PPUSH
13973: CALL_OW 302
13977: AND
13978: IFFALSE 14322
13980: GO 13982
13982: DISABLE
// begin DialogueOn ;
13983: CALL_OW 6
// Say ( Heike , DH-Fac-1 ) ;
13987: LD_EXP 23
13991: PPUSH
13992: LD_STRING DH-Fac-1
13994: PPUSH
13995: CALL_OW 88
// Say ( Omar , DOm-Fac-2 ) ;
13999: LD_EXP 24
14003: PPUSH
14004: LD_STRING DOm-Fac-2
14006: PPUSH
14007: CALL_OW 88
// if LoadVariable ( 03_CargoRecycled , false ) then
14011: LD_STRING 03_CargoRecycled
14013: PPUSH
14014: LD_INT 0
14016: PPUSH
14017: CALL_OW 30
14021: IFFALSE 14036
// SetTech ( tech_cargo , 2 , state_researched ) ;
14023: LD_INT 83
14025: PPUSH
14026: LD_INT 2
14028: PPUSH
14029: LD_INT 2
14031: PPUSH
14032: CALL_OW 322
// if TestCharacters ( 09_Markov ) then
14036: LD_STRING 09_Markov
14038: PPUSH
14039: CALL_OW 28
14043: IFFALSE 14158
// begin Say ( Heike , DH-Fac-3a ) ;
14045: LD_EXP 23
14049: PPUSH
14050: LD_STRING DH-Fac-3a
14052: PPUSH
14053: CALL_OW 88
// SetTech ( tech_gatling , 2 , state_researched ) ;
14057: LD_INT 69
14059: PPUSH
14060: LD_INT 2
14062: PPUSH
14063: LD_INT 2
14065: PPUSH
14066: CALL_OW 322
// SetTech ( tech_gun , 2 , state_researched ) ;
14070: LD_INT 39
14072: PPUSH
14073: LD_INT 2
14075: PPUSH
14076: LD_INT 2
14078: PPUSH
14079: CALL_OW 322
// SetTech ( tech_radar , 2 , state_researched ) ;
14083: LD_INT 6
14085: PPUSH
14086: LD_INT 2
14088: PPUSH
14089: LD_INT 2
14091: PPUSH
14092: CALL_OW 322
// SetTech ( tech_remCont , 2 , state_researched ) ;
14096: LD_INT 15
14098: PPUSH
14099: LD_INT 2
14101: PPUSH
14102: LD_INT 2
14104: PPUSH
14105: CALL_OW 322
// if GetSkill ( Heike , 3 ) < 10 then
14109: LD_EXP 23
14113: PPUSH
14114: LD_INT 3
14116: PPUSH
14117: CALL_OW 259
14121: PUSH
14122: LD_INT 10
14124: LESS
14125: IFFALSE 14156
// SetSkill ( Heike , 3 , GetSkill ( Heike , 3 ) + 1 ) ;
14127: LD_EXP 23
14131: PPUSH
14132: LD_INT 3
14134: PPUSH
14135: LD_EXP 23
14139: PPUSH
14140: LD_INT 3
14142: PPUSH
14143: CALL_OW 259
14147: PUSH
14148: LD_INT 1
14150: PLUS
14151: PPUSH
14152: CALL_OW 237
// end else
14156: GO 14311
// if TestCharacters ( 09_Olaf ) then
14158: LD_STRING 09_Olaf
14160: PPUSH
14161: CALL_OW 28
14165: IFFALSE 14254
// begin Say ( Heike , DH-Fac-3b ) ;
14167: LD_EXP 23
14171: PPUSH
14172: LD_STRING DH-Fac-3b
14174: PPUSH
14175: CALL_OW 88
// SetTech ( tech_radar , 2 , state_researched ) ;
14179: LD_INT 6
14181: PPUSH
14182: LD_INT 2
14184: PPUSH
14185: LD_INT 2
14187: PPUSH
14188: CALL_OW 322
// SetTech ( tech_remCont , 2 , state_researched ) ;
14192: LD_INT 15
14194: PPUSH
14195: LD_INT 2
14197: PPUSH
14198: LD_INT 2
14200: PPUSH
14201: CALL_OW 322
// if GetSkill ( Heike , 3 ) < 10 then
14205: LD_EXP 23
14209: PPUSH
14210: LD_INT 3
14212: PPUSH
14213: CALL_OW 259
14217: PUSH
14218: LD_INT 10
14220: LESS
14221: IFFALSE 14252
// SetSkill ( Heike , 3 , GetSkill ( Heike , 3 ) + 1 ) ;
14223: LD_EXP 23
14227: PPUSH
14228: LD_INT 3
14230: PPUSH
14231: LD_EXP 23
14235: PPUSH
14236: LD_INT 3
14238: PPUSH
14239: CALL_OW 259
14243: PUSH
14244: LD_INT 1
14246: PLUS
14247: PPUSH
14248: CALL_OW 237
// end else
14252: GO 14311
// if GetSkill ( Heike , skill_mechanical ) > 5 then
14254: LD_EXP 23
14258: PPUSH
14259: LD_INT 3
14261: PPUSH
14262: CALL_OW 259
14266: PUSH
14267: LD_INT 5
14269: GREATER
14270: IFFALSE 14299
// begin Say ( Heike , DH-Fac-3c ) ;
14272: LD_EXP 23
14276: PPUSH
14277: LD_STRING DH-Fac-3c
14279: PPUSH
14280: CALL_OW 88
// SetTech ( tech_radar , 2 , state_researched ) ;
14284: LD_INT 6
14286: PPUSH
14287: LD_INT 2
14289: PPUSH
14290: LD_INT 2
14292: PPUSH
14293: CALL_OW 322
// end else
14297: GO 14311
// Say ( Heike , DH-Fac-3d ) ;
14299: LD_EXP 23
14303: PPUSH
14304: LD_STRING DH-Fac-3d
14306: PPUSH
14307: CALL_OW 88
// ChangeMissionObjectives ( ARemote ) ;
14311: LD_STRING ARemote
14313: PPUSH
14314: CALL_OW 337
// DialogueOff ;
14318: CALL_OW 7
// end ;
14322: END
// every 0 0$1 trigger gameActive and ( IsSelected ( arLab ) or UnitsInside ( arLab ) ) and IsOk ( Heike ) and IsOk ( Omar ) do
14323: LD_EXP 19
14327: PUSH
14328: LD_INT 89
14330: PPUSH
14331: CALL_OW 306
14335: PUSH
14336: LD_INT 89
14338: PPUSH
14339: CALL_OW 313
14343: OR
14344: AND
14345: PUSH
14346: LD_EXP 23
14350: PPUSH
14351: CALL_OW 302
14355: AND
14356: PUSH
14357: LD_EXP 24
14361: PPUSH
14362: CALL_OW 302
14366: AND
14367: IFFALSE 14595
14369: GO 14371
14371: DISABLE
// begin DialogueOn ;
14372: CALL_OW 6
// Say ( Heike , DH-Lab-1 ) ;
14376: LD_EXP 23
14380: PPUSH
14381: LD_STRING DH-Lab-1
14383: PPUSH
14384: CALL_OW 88
// Say ( Omar , DOm-Lab-2 ) ;
14388: LD_EXP 24
14392: PPUSH
14393: LD_STRING DOm-Lab-2
14395: PPUSH
14396: CALL_OW 88
// if TestCharacters ( 09_Aviradze ) then
14400: LD_STRING 09_Aviradze
14402: PPUSH
14403: CALL_OW 28
14407: IFFALSE 14462
// begin SetTech ( tech_apelang , 2 , state_researched ) ;
14409: LD_INT 1
14411: PPUSH
14412: LD_INT 2
14414: PPUSH
14415: LD_INT 2
14417: PPUSH
14418: CALL_OW 322
// SetTech ( tech_apepsych , 2 , state_researched ) ;
14422: LD_INT 2
14424: PPUSH
14425: LD_INT 2
14427: PPUSH
14428: LD_INT 2
14430: PPUSH
14431: CALL_OW 322
// SetTech ( tech_apeagres , 2 , state_researched ) ;
14435: LD_INT 11
14437: PPUSH
14438: LD_INT 2
14440: PPUSH
14441: LD_INT 2
14443: PPUSH
14444: CALL_OW 322
// Say ( Heike , DH-Lab-4a ) ;
14448: LD_EXP 23
14452: PPUSH
14453: LD_STRING DH-Lab-4a
14455: PPUSH
14456: CALL_OW 88
// end else
14460: GO 14474
// Say ( Heike , DH-Lab-4b ) ;
14462: LD_EXP 23
14466: PPUSH
14467: LD_STRING DH-Lab-4b
14469: PPUSH
14470: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
14474: LD_STRING 05_DrugsTested
14476: PPUSH
14477: LD_EXP 1
14481: PPUSH
14482: CALL_OW 30
14486: IFFALSE 14513
// begin Say ( Heike , DH-Lab-5a ) ;
14488: LD_EXP 23
14492: PPUSH
14493: LD_STRING DH-Lab-5a
14495: PPUSH
14496: CALL_OW 88
// SetTech ( tech_stimdrugs , 2 , state_enabled ) ;
14500: LD_INT 5
14502: PPUSH
14503: LD_INT 2
14505: PPUSH
14506: LD_INT 1
14508: PPUSH
14509: CALL_OW 322
// end ; if LoadVariable ( 09_ApeBrain , debug ) then
14513: LD_STRING 09_ApeBrain
14515: PPUSH
14516: LD_EXP 1
14520: PPUSH
14521: CALL_OW 30
14525: IFFALSE 14564
// begin Say ( Heike , DH-Lab-6a ) ;
14527: LD_EXP 23
14531: PPUSH
14532: LD_STRING DH-Lab-6a
14534: PPUSH
14535: CALL_OW 88
// Say ( Omar , DOm-Lab-7a ) ;
14539: LD_EXP 24
14543: PPUSH
14544: LD_STRING DOm-Lab-7a
14546: PPUSH
14547: CALL_OW 88
// SetTech ( tech_apeBrain , 2 , state_enabled ) ;
14551: LD_INT 4
14553: PPUSH
14554: LD_INT 2
14556: PPUSH
14557: LD_INT 1
14559: PPUSH
14560: CALL_OW 322
// end ; if LoadVariable ( 09_ApeNeural , debug ) then
14564: LD_STRING 09_ApeNeural
14566: PPUSH
14567: LD_EXP 1
14571: PPUSH
14572: CALL_OW 30
14576: IFFALSE 14591
// begin SetTech ( tech_apeNeural , 2 , state_enabled ) ;
14578: LD_INT 3
14580: PPUSH
14581: LD_INT 2
14583: PPUSH
14584: LD_INT 1
14586: PPUSH
14587: CALL_OW 322
// end ; DialogueOff ;
14591: CALL_OW 7
// end ;
14595: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) do
14596: LD_EXP 19
14600: PUSH
14601: LD_INT 22
14603: PUSH
14604: LD_INT 2
14606: PUSH
14607: EMPTY
14608: LIST
14609: LIST
14610: PUSH
14611: LD_INT 25
14613: PUSH
14614: LD_INT 12
14616: PUSH
14617: EMPTY
14618: LIST
14619: LIST
14620: PUSH
14621: EMPTY
14622: LIST
14623: LIST
14624: PPUSH
14625: CALL_OW 69
14629: AND
14630: IFFALSE 14665
14632: GO 14634
14634: DISABLE
// begin if IsOk ( Heike ) then
14635: LD_EXP 23
14639: PPUSH
14640: CALL_OW 302
14644: IFFALSE 14658
// Say ( Heike , DH-Ape-1 ) ;
14646: LD_EXP 23
14650: PPUSH
14651: LD_STRING DH-Ape-1
14653: PPUSH
14654: CALL_OW 88
// ChangeMissionObjectives ( AApes ) ;
14658: LD_STRING AApes
14660: PPUSH
14661: CALL_OW 337
// end ;
14665: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 5 do
14666: LD_EXP 19
14670: PUSH
14671: LD_INT 22
14673: PUSH
14674: LD_INT 2
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: PUSH
14681: LD_INT 25
14683: PUSH
14684: LD_INT 15
14686: PUSH
14687: EMPTY
14688: LIST
14689: LIST
14690: PUSH
14691: EMPTY
14692: LIST
14693: LIST
14694: PPUSH
14695: CALL_OW 69
14699: PUSH
14700: LD_INT 5
14702: GREATEREQUAL
14703: AND
14704: IFFALSE 14806
14706: GO 14708
14708: DISABLE
// begin hasApes := true ;
14709: LD_ADDR_EXP 16
14713: PUSH
14714: LD_INT 1
14716: ST_TO_ADDR
// ChangeMissionObjectives ( AApesOut ) ;
14717: LD_STRING AApesOut
14719: PPUSH
14720: CALL_OW 337
// if not IsOk ( Heike ) or not IsOk ( Omar ) then
14724: LD_EXP 23
14728: PPUSH
14729: CALL_OW 302
14733: NOT
14734: PUSH
14735: LD_EXP 24
14739: PPUSH
14740: CALL_OW 302
14744: NOT
14745: OR
14746: IFFALSE 14750
// exit ;
14748: GO 14806
// DialogueOn ;
14750: CALL_OW 6
// Say ( Heike , DH-ApeArmy-1 ) ;
14754: LD_EXP 23
14758: PPUSH
14759: LD_STRING DH-ApeArmy-1
14761: PPUSH
14762: CALL_OW 88
// Say ( Omar , DOm-ApeArmy-2 ) ;
14766: LD_EXP 24
14770: PPUSH
14771: LD_STRING DOm-ApeArmy-2
14773: PPUSH
14774: CALL_OW 88
// Say ( Heike , DH-ApeArmy-3 ) ;
14778: LD_EXP 23
14782: PPUSH
14783: LD_STRING DH-ApeArmy-3
14785: PPUSH
14786: CALL_OW 88
// Say ( Omar , DOm-ApeArmy-4 ) ;
14790: LD_EXP 24
14794: PPUSH
14795: LD_STRING DOm-ApeArmy-4
14797: PPUSH
14798: CALL_OW 88
// DialogueOff ;
14802: CALL_OW 7
// end ;
14806: END
// every 0 0$1 trigger gameActive and GetTech ( tech_stimdrugs , 2 ) = state_researched do
14807: LD_EXP 19
14811: PUSH
14812: LD_INT 5
14814: PPUSH
14815: LD_INT 2
14817: PPUSH
14818: CALL_OW 321
14822: PUSH
14823: LD_INT 2
14825: EQUAL
14826: AND
14827: IFFALSE 14863
14829: GO 14831
14831: DISABLE
// begin hasDrugs := true ;
14832: LD_ADDR_EXP 17
14836: PUSH
14837: LD_INT 1
14839: ST_TO_ADDR
// if IsOk ( Heike ) then
14840: LD_EXP 23
14844: PPUSH
14845: CALL_OW 302
14849: IFFALSE 14863
// Say ( Heike , DH-Stim-1 ) ;
14851: LD_EXP 23
14855: PPUSH
14856: LD_STRING DH-Stim-1
14858: PPUSH
14859: CALL_OW 88
// end ;
14863: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_kamikaze ] ] ) do
14864: LD_EXP 19
14868: PUSH
14869: LD_INT 22
14871: PUSH
14872: LD_INT 2
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: LD_INT 25
14881: PUSH
14882: LD_INT 17
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: PPUSH
14893: CALL_OW 69
14897: AND
14898: IFFALSE 14915
14900: GO 14902
14902: DISABLE
// Say ( Heike , DH-Kamikadze-1 ) ;
14903: LD_EXP 23
14907: PPUSH
14908: LD_STRING DH-Kamikadze-1
14910: PPUSH
14911: CALL_OW 88
14915: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_chassis , class_mastodont ] ] ) and IsOk ( Omar ) and IsOk ( Heike ) do
14916: LD_EXP 19
14920: PUSH
14921: LD_INT 22
14923: PUSH
14924: LD_INT 2
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: PUSH
14931: LD_INT 31
14933: PUSH
14934: LD_INT 31
14936: PUSH
14937: EMPTY
14938: LIST
14939: LIST
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PPUSH
14945: CALL_OW 69
14949: AND
14950: PUSH
14951: LD_EXP 24
14955: PPUSH
14956: CALL_OW 302
14960: AND
14961: PUSH
14962: LD_EXP 23
14966: PPUSH
14967: CALL_OW 302
14971: AND
14972: IFFALSE 15057
14974: GO 14976
14976: DISABLE
// begin InGameOn ;
14977: CALL_OW 8
// CenterNowOnUnits ( Omar ) ;
14981: LD_EXP 24
14985: PPUSH
14986: CALL_OW 87
// Say ( Heike , DH-Mastodont-1 ) ;
14990: LD_EXP 23
14994: PPUSH
14995: LD_STRING DH-Mastodont-1
14997: PPUSH
14998: CALL_OW 88
// Say ( Omar , DOm-Mastodont-2 ) ;
15002: LD_EXP 24
15006: PPUSH
15007: LD_STRING DOm-Mastodont-2
15009: PPUSH
15010: CALL_OW 88
// Say ( Heike , DH-Mastodont-3 ) ;
15014: LD_EXP 23
15018: PPUSH
15019: LD_STRING DH-Mastodont-3
15021: PPUSH
15022: CALL_OW 88
// Say ( Omar , DOm-Mastodont-4 ) ;
15026: LD_EXP 24
15030: PPUSH
15031: LD_STRING DOm-Mastodont-4
15033: PPUSH
15034: CALL_OW 88
// hasMastodont := true ;
15038: LD_ADDR_EXP 13
15042: PUSH
15043: LD_INT 1
15045: ST_TO_ADDR
// InGameOff ;
15046: CALL_OW 9
// SetAchievement ( ACH_MASTODONTTAME ) ;
15050: LD_STRING ACH_MASTODONTTAME
15052: PPUSH
15053: CALL_OW 543
// end ;
15057: END
// every 0 0$1 trigger gameActive and tigerCounter do
15058: LD_EXP 19
15062: PUSH
15063: LD_EXP 21
15067: AND
15068: IFFALSE 15080
15070: GO 15072
15072: DISABLE
// SetAchievement ( ACH_TIGERTAME ) ;
15073: LD_STRING ACH_TIGERTAME
15075: PPUSH
15076: CALL_OW 543
15080: END
// every 0 0$1 trigger gameActive and tigerCounter > 1 do
15081: LD_EXP 19
15085: PUSH
15086: LD_EXP 21
15090: PUSH
15091: LD_INT 1
15093: GREATER
15094: AND
15095: IFFALSE 15199
15097: GO 15099
15099: DISABLE
// begin hasTigers := true ;
15100: LD_ADDR_EXP 15
15104: PUSH
15105: LD_INT 1
15107: ST_TO_ADDR
// if not IsOk ( Omar ) or not IsOk ( Heike ) then
15108: LD_EXP 24
15112: PPUSH
15113: CALL_OW 302
15117: NOT
15118: PUSH
15119: LD_EXP 23
15123: PPUSH
15124: CALL_OW 302
15128: NOT
15129: OR
15130: IFFALSE 15134
// exit ;
15132: GO 15199
// CenterNowOnUnits ( Omar ) ;
15134: LD_EXP 24
15138: PPUSH
15139: CALL_OW 87
// DialogueOn ;
15143: CALL_OW 6
// Say ( Omar , DOm-Tiger-1 ) ;
15147: LD_EXP 24
15151: PPUSH
15152: LD_STRING DOm-Tiger-1
15154: PPUSH
15155: CALL_OW 88
// Say ( Heike , DH-Tiger-2 ) ;
15159: LD_EXP 23
15163: PPUSH
15164: LD_STRING DH-Tiger-2
15166: PPUSH
15167: CALL_OW 88
// Say ( Omar , DOm-Tiger-3 ) ;
15171: LD_EXP 24
15175: PPUSH
15176: LD_STRING DOm-Tiger-3
15178: PPUSH
15179: CALL_OW 88
// Say ( Heike , DH-Tiger-4 ) ;
15183: LD_EXP 23
15187: PPUSH
15188: LD_STRING DH-Tiger-4
15190: PPUSH
15191: CALL_OW 88
// DialogueOff ;
15195: CALL_OW 7
// end ;
15199: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_control , control_remote ] ] ) >= 3 do
15200: LD_EXP 19
15204: PUSH
15205: LD_INT 22
15207: PUSH
15208: LD_INT 2
15210: PUSH
15211: EMPTY
15212: LIST
15213: LIST
15214: PUSH
15215: LD_INT 50
15217: PUSH
15218: EMPTY
15219: LIST
15220: PUSH
15221: LD_INT 33
15223: PUSH
15224: LD_INT 2
15226: PUSH
15227: EMPTY
15228: LIST
15229: LIST
15230: PUSH
15231: EMPTY
15232: LIST
15233: LIST
15234: LIST
15235: PPUSH
15236: CALL_OW 69
15240: PUSH
15241: LD_INT 3
15243: GREATEREQUAL
15244: AND
15245: IFFALSE 15288
15247: GO 15249
15249: DISABLE
// begin ChangeMissionObjectives ( ARemoteOut ) ;
15250: LD_STRING ARemoteOut
15252: PPUSH
15253: CALL_OW 337
// hasVehicles := true ;
15257: LD_ADDR_EXP 14
15261: PUSH
15262: LD_INT 1
15264: ST_TO_ADDR
// if IsOk ( Heike ) then
15265: LD_EXP 23
15269: PPUSH
15270: CALL_OW 302
15274: IFFALSE 15288
// Say ( Heike , DH-Mechanic-1 ) ;
15276: LD_EXP 23
15280: PPUSH
15281: LD_STRING DH-Mechanic-1
15283: PPUSH
15284: CALL_OW 88
// end ;
15288: END
// every 0 0$1 trigger gameActive and ( FilterUnitsInArea ( amBaseOuterArea , [ f_side , 2 ] ) or SeeArea ( 2 , amBaseArea ) ) do
15289: LD_EXP 19
15293: PUSH
15294: LD_INT 29
15296: PPUSH
15297: LD_INT 22
15299: PUSH
15300: LD_INT 2
15302: PUSH
15303: EMPTY
15304: LIST
15305: LIST
15306: PPUSH
15307: CALL_OW 70
15311: PUSH
15312: LD_INT 2
15314: PPUSH
15315: LD_INT 1
15317: PPUSH
15318: CALL_OW 294
15322: OR
15323: AND
15324: IFFALSE 15337
15326: GO 15328
15328: DISABLE
// spotAmericanBase := true ;
15329: LD_ADDR_EXP 6
15333: PUSH
15334: LD_INT 1
15336: ST_TO_ADDR
15337: END
// every 0 0$2 trigger gameActive and spotAmericanBase and IsOk ( Omar ) and IsOk ( Heike ) do
15338: LD_EXP 19
15342: PUSH
15343: LD_EXP 6
15347: AND
15348: PUSH
15349: LD_EXP 24
15353: PPUSH
15354: CALL_OW 302
15358: AND
15359: PUSH
15360: LD_EXP 23
15364: PPUSH
15365: CALL_OW 302
15369: AND
15370: IFFALSE 15610
15372: GO 15374
15374: DISABLE
// begin DialogueOn ;
15375: CALL_OW 6
// PlaceSeeing ( 92 , 129 , 2 , - 22 ) ;
15379: LD_INT 92
15381: PPUSH
15382: LD_INT 129
15384: PPUSH
15385: LD_INT 2
15387: PPUSH
15388: LD_INT 22
15390: NEG
15391: PPUSH
15392: CALL_OW 330
// RemoveSeeing ( 92 , 129 , 2 ) ;
15396: LD_INT 92
15398: PPUSH
15399: LD_INT 129
15401: PPUSH
15402: LD_INT 2
15404: PPUSH
15405: CALL_OW 331
// CenterNowOnXY ( 92 , 129 ) ;
15409: LD_INT 92
15411: PPUSH
15412: LD_INT 129
15414: PPUSH
15415: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
15419: LD_INT 10
15421: PPUSH
15422: CALL_OW 68
// Say ( Omar , DO-AmBase-1 ) ;
15426: LD_EXP 24
15430: PPUSH
15431: LD_STRING DO-AmBase-1
15433: PPUSH
15434: CALL_OW 88
// Say ( Heike , DH-AmBase-2 ) ;
15438: LD_EXP 23
15442: PPUSH
15443: LD_STRING DH-AmBase-2
15445: PPUSH
15446: CALL_OW 88
// Say ( Omar , DO-AmBase-3 ) ;
15450: LD_EXP 24
15454: PPUSH
15455: LD_STRING DO-AmBase-3
15457: PPUSH
15458: CALL_OW 88
// Say ( Heike , DH-AmBase-4 ) ;
15462: LD_EXP 23
15466: PPUSH
15467: LD_STRING DH-AmBase-4
15469: PPUSH
15470: CALL_OW 88
// Say ( Omar , DO-AmBase-5 ) ;
15474: LD_EXP 24
15478: PPUSH
15479: LD_STRING DO-AmBase-5
15481: PPUSH
15482: CALL_OW 88
// Say ( Heike , DH-AmBase-6 ) ;
15486: LD_EXP 23
15490: PPUSH
15491: LD_STRING DH-AmBase-6
15493: PPUSH
15494: CALL_OW 88
// Say ( Omar , DO-AmBase-7 ) ;
15498: LD_EXP 24
15502: PPUSH
15503: LD_STRING DO-AmBase-7
15505: PPUSH
15506: CALL_OW 88
// if not spotArabianBase then
15510: LD_EXP 7
15514: NOT
15515: IFFALSE 15531
// begin Say ( Omar , DO-AmBase-8a ) ;
15517: LD_EXP 24
15521: PPUSH
15522: LD_STRING DO-AmBase-8a
15524: PPUSH
15525: CALL_OW 88
// end else
15529: GO 15543
// begin Say ( Omar , DO-AmBase-8b ) ;
15531: LD_EXP 24
15535: PPUSH
15536: LD_STRING DO-AmBase-8b
15538: PPUSH
15539: CALL_OW 88
// end ; if IsInUnit ( Heike ) then
15543: LD_EXP 23
15547: PPUSH
15548: CALL_OW 310
15552: IFFALSE 15570
// CenterNowOnUnits ( IsInUnit ( Heike ) ) else
15554: LD_EXP 23
15558: PPUSH
15559: CALL_OW 310
15563: PPUSH
15564: CALL_OW 87
15568: GO 15579
// CenterNowOnUnits ( Heike ) ;
15570: LD_EXP 23
15574: PPUSH
15575: CALL_OW 87
// Say ( Heike , DH-AmBase-9 ) ;
15579: LD_EXP 23
15583: PPUSH
15584: LD_STRING DH-AmBase-9
15586: PPUSH
15587: CALL_OW 88
// DialogueOff ;
15591: CALL_OW 7
// spotByAmerican := true ;
15595: LD_ADDR_EXP 8
15599: PUSH
15600: LD_INT 1
15602: ST_TO_ADDR
// ChangeMissionObjectives ( O2 ) ;
15603: LD_STRING O2
15605: PPUSH
15606: CALL_OW 337
// end ;
15610: END
// function TalkAboutLegion ; begin
15611: LD_INT 0
15613: PPUSH
// Say ( Heike , DH-Legion-1 ) ;
15614: LD_EXP 23
15618: PPUSH
15619: LD_STRING DH-Legion-1
15621: PPUSH
15622: CALL_OW 88
// Say ( Omar , DOm-Legion-2 ) ;
15626: LD_EXP 24
15630: PPUSH
15631: LD_STRING DOm-Legion-2
15633: PPUSH
15634: CALL_OW 88
// Say ( Heike , DH-Legion-3 ) ;
15638: LD_EXP 23
15642: PPUSH
15643: LD_STRING DH-Legion-3
15645: PPUSH
15646: CALL_OW 88
// Say ( Omar , DOm-Legion-4 ) ;
15650: LD_EXP 24
15654: PPUSH
15655: LD_STRING DOm-Legion-4
15657: PPUSH
15658: CALL_OW 88
// Say ( Heike , DH-Legion-5 ) ;
15662: LD_EXP 23
15666: PPUSH
15667: LD_STRING DH-Legion-5
15669: PPUSH
15670: CALL_OW 88
// Say ( Omar , DOm-Legion-6 ) ;
15674: LD_EXP 24
15678: PPUSH
15679: LD_STRING DOm-Legion-6
15681: PPUSH
15682: CALL_OW 88
// Say ( Heike , DH-Legion-7 ) ;
15686: LD_EXP 23
15690: PPUSH
15691: LD_STRING DH-Legion-7
15693: PPUSH
15694: CALL_OW 88
// end ;
15698: LD_VAR 0 1
15702: RET
// every 0 0$2 trigger gameActive and AreInArea ( [ Heike , Omar ] , legSpotNorthArea ) and not spotByLegion and not spotLegion do var i , un , veh ;
15703: LD_EXP 19
15707: PUSH
15708: LD_EXP 23
15712: PUSH
15713: LD_EXP 24
15717: PUSH
15718: EMPTY
15719: LIST
15720: LIST
15721: PPUSH
15722: LD_INT 22
15724: PPUSH
15725: CALL 11734 0 2
15729: AND
15730: PUSH
15731: LD_EXP 9
15735: NOT
15736: AND
15737: PUSH
15738: LD_EXP 10
15742: NOT
15743: AND
15744: IFFALSE 16229
15746: GO 15748
15748: DISABLE
15749: LD_INT 0
15751: PPUSH
15752: PPUSH
15753: PPUSH
// begin uc_side := 8 ;
15754: LD_ADDR_OWVAR 20
15758: PUSH
15759: LD_INT 8
15761: ST_TO_ADDR
// uc_nation := nation_american ;
15762: LD_ADDR_OWVAR 21
15766: PUSH
15767: LD_INT 1
15769: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 90 ) ;
15770: LD_INT 3
15772: PPUSH
15773: LD_INT 1
15775: PPUSH
15776: LD_INT 1
15778: PPUSH
15779: LD_INT 9
15781: PPUSH
15782: LD_INT 90
15784: PPUSH
15785: CALL 25528 0 5
// veh := CreateVehicle ;
15789: LD_ADDR_VAR 0 3
15793: PUSH
15794: CALL_OW 45
15798: ST_TO_ADDR
// legTanks := Join ( legTanks , veh ) ;
15799: LD_ADDR_EXP 43
15803: PUSH
15804: LD_EXP 43
15808: PPUSH
15809: LD_VAR 0 3
15813: PPUSH
15814: CALL 58399 0 2
15818: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
15819: LD_VAR 0 3
15823: PPUSH
15824: LD_INT 2
15826: PPUSH
15827: CALL_OW 233
// PlaceUnitXY ( veh , 126 , 18 , false ) ;
15831: LD_VAR 0 3
15835: PPUSH
15836: LD_INT 126
15838: PPUSH
15839: LD_INT 18
15841: PPUSH
15842: LD_INT 0
15844: PPUSH
15845: CALL_OW 48
// uc_nation := nation_arabian ;
15849: LD_ADDR_OWVAR 21
15853: PUSH
15854: LD_INT 2
15856: ST_TO_ADDR
// PrepareMechanic ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
15857: LD_INT 0
15859: PPUSH
15860: LD_INT 6
15862: PUSH
15863: LD_INT 7
15865: PUSH
15866: LD_INT 8
15868: PUSH
15869: LD_INT 9
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: PUSH
15878: LD_OWVAR 67
15882: ARRAY
15883: PPUSH
15884: CALL_OW 383
// un := CreateHuman ;
15888: LD_ADDR_VAR 0 2
15892: PUSH
15893: CALL_OW 44
15897: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
15898: LD_ADDR_EXP 38
15902: PUSH
15903: LD_EXP 38
15907: PPUSH
15908: LD_VAR 0 2
15912: PPUSH
15913: CALL 58399 0 2
15917: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15918: LD_VAR 0 2
15922: PPUSH
15923: LD_VAR 0 3
15927: PPUSH
15928: CALL_OW 52
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
15932: LD_INT 0
15934: PPUSH
15935: LD_INT 6
15937: PUSH
15938: LD_INT 7
15940: PUSH
15941: LD_INT 8
15943: PUSH
15944: LD_INT 9
15946: PUSH
15947: EMPTY
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: PUSH
15953: LD_OWVAR 67
15957: ARRAY
15958: PPUSH
15959: CALL_OW 381
// for i := 1 to 3 do
15963: LD_ADDR_VAR 0 1
15967: PUSH
15968: DOUBLE
15969: LD_INT 1
15971: DEC
15972: ST_TO_ADDR
15973: LD_INT 3
15975: PUSH
15976: FOR_TO
15977: IFFALSE 16044
// begin un := CreateHuman ;
15979: LD_ADDR_VAR 0 2
15983: PUSH
15984: CALL_OW 44
15988: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
15989: LD_ADDR_EXP 38
15993: PUSH
15994: LD_EXP 38
15998: PPUSH
15999: LD_VAR 0 2
16003: PPUSH
16004: CALL 58399 0 2
16008: ST_TO_ADDR
// SetDir ( un , 2 ) ;
16009: LD_VAR 0 2
16013: PPUSH
16014: LD_INT 2
16016: PPUSH
16017: CALL_OW 233
// PlaceUnitXYR ( un , 126 , 18 , 4 , false ) ;
16021: LD_VAR 0 2
16025: PPUSH
16026: LD_INT 126
16028: PPUSH
16029: LD_INT 18
16031: PPUSH
16032: LD_INT 4
16034: PPUSH
16035: LD_INT 0
16037: PPUSH
16038: CALL_OW 50
// end ;
16042: GO 15976
16044: POP
16045: POP
// wait ( 0 0$01 ) ;
16046: LD_INT 35
16048: PPUSH
16049: CALL_OW 67
// DialogueOn ;
16053: CALL_OW 6
// PlaceSeeing ( 126 , 18 , 2 , - 16 ) ;
16057: LD_INT 126
16059: PPUSH
16060: LD_INT 18
16062: PPUSH
16063: LD_INT 2
16065: PPUSH
16066: LD_INT 16
16068: NEG
16069: PPUSH
16070: CALL_OW 330
// CenterNowOnXY ( 126 , 18 ) ;
16074: LD_INT 126
16076: PPUSH
16077: LD_INT 18
16079: PPUSH
16080: CALL_OW 86
// TalkAboutLegion ;
16084: CALL 15611 0 0
// RemoveSeeing ( 126 , 18 , 2 ) ;
16088: LD_INT 126
16090: PPUSH
16091: LD_INT 18
16093: PPUSH
16094: LD_INT 2
16096: PPUSH
16097: CALL_OW 331
// DialogueOff ;
16101: CALL_OW 7
// spotLegion := true ;
16105: LD_ADDR_EXP 10
16109: PUSH
16110: LD_INT 1
16112: ST_TO_ADDR
// ComAgressiveMove ( legEForces , 164 , 47 ) ;
16113: LD_EXP 38
16117: PPUSH
16118: LD_INT 164
16120: PPUSH
16121: LD_INT 47
16123: PPUSH
16124: CALL_OW 114
// AddComAgressiveMove ( legEForces , 179 , 20 ) ;
16128: LD_EXP 38
16132: PPUSH
16133: LD_INT 179
16135: PPUSH
16136: LD_INT 20
16138: PPUSH
16139: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
16143: LD_INT 35
16145: PPUSH
16146: CALL_OW 67
// until not UnitFilter ( legEForces , [ f_hastask ] ) or not UnitFilter ( legEForces , [ f_ok ] ) ;
16150: LD_EXP 38
16154: PPUSH
16155: LD_INT 60
16157: PUSH
16158: EMPTY
16159: LIST
16160: PPUSH
16161: CALL_OW 72
16165: NOT
16166: PUSH
16167: LD_EXP 38
16171: PPUSH
16172: LD_INT 50
16174: PUSH
16175: EMPTY
16176: LIST
16177: PPUSH
16178: CALL_OW 72
16182: NOT
16183: OR
16184: IFFALSE 16143
// if not UnitFilter ( legEForces , [ f_ok ] ) then
16186: LD_EXP 38
16190: PPUSH
16191: LD_INT 50
16193: PUSH
16194: EMPTY
16195: LIST
16196: PPUSH
16197: CALL_OW 72
16201: NOT
16202: IFFALSE 16206
// exit ;
16204: GO 16229
// legForces := legForces union legEForces ;
16206: LD_ADDR_EXP 37
16210: PUSH
16211: LD_EXP 37
16215: PUSH
16216: LD_EXP 38
16220: UNION
16221: ST_TO_ADDR
// legEForces := [ ] ;
16222: LD_ADDR_EXP 38
16226: PUSH
16227: EMPTY
16228: ST_TO_ADDR
// end ;
16229: PPOPN 3
16231: END
// every 0 0$2 trigger gameActive and AreInArea ( [ Heike , Omar ] , legSpotSouthArea ) and not spotByLegion and not spotLegion do var i , un , veh ;
16232: LD_EXP 19
16236: PUSH
16237: LD_EXP 23
16241: PUSH
16242: LD_EXP 24
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: PPUSH
16251: LD_INT 23
16253: PPUSH
16254: CALL 11734 0 2
16258: AND
16259: PUSH
16260: LD_EXP 9
16264: NOT
16265: AND
16266: PUSH
16267: LD_EXP 10
16271: NOT
16272: AND
16273: IFFALSE 16758
16275: GO 16277
16277: DISABLE
16278: LD_INT 0
16280: PPUSH
16281: PPUSH
16282: PPUSH
// begin uc_side := 8 ;
16283: LD_ADDR_OWVAR 20
16287: PUSH
16288: LD_INT 8
16290: ST_TO_ADDR
// uc_nation := nation_american ;
16291: LD_ADDR_OWVAR 21
16295: PUSH
16296: LD_INT 1
16298: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 90 ) ;
16299: LD_INT 3
16301: PPUSH
16302: LD_INT 1
16304: PPUSH
16305: LD_INT 1
16307: PPUSH
16308: LD_INT 9
16310: PPUSH
16311: LD_INT 90
16313: PPUSH
16314: CALL 25528 0 5
// veh := CreateVehicle ;
16318: LD_ADDR_VAR 0 3
16322: PUSH
16323: CALL_OW 45
16327: ST_TO_ADDR
// legTanks := Join ( legTanks , veh ) ;
16328: LD_ADDR_EXP 43
16332: PUSH
16333: LD_EXP 43
16337: PPUSH
16338: LD_VAR 0 3
16342: PPUSH
16343: CALL 58399 0 2
16347: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
16348: LD_VAR 0 3
16352: PPUSH
16353: LD_INT 3
16355: PPUSH
16356: CALL_OW 233
// PlaceUnitXY ( veh , 224 , 57 , false ) ;
16360: LD_VAR 0 3
16364: PPUSH
16365: LD_INT 224
16367: PPUSH
16368: LD_INT 57
16370: PPUSH
16371: LD_INT 0
16373: PPUSH
16374: CALL_OW 48
// uc_nation := nation_arabian ;
16378: LD_ADDR_OWVAR 21
16382: PUSH
16383: LD_INT 2
16385: ST_TO_ADDR
// PrepareMechanic ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
16386: LD_INT 0
16388: PPUSH
16389: LD_INT 6
16391: PUSH
16392: LD_INT 7
16394: PUSH
16395: LD_INT 8
16397: PUSH
16398: LD_INT 9
16400: PUSH
16401: EMPTY
16402: LIST
16403: LIST
16404: LIST
16405: LIST
16406: PUSH
16407: LD_OWVAR 67
16411: ARRAY
16412: PPUSH
16413: CALL_OW 383
// un := CreateHuman ;
16417: LD_ADDR_VAR 0 2
16421: PUSH
16422: CALL_OW 44
16426: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
16427: LD_ADDR_EXP 38
16431: PUSH
16432: LD_EXP 38
16436: PPUSH
16437: LD_VAR 0 2
16441: PPUSH
16442: CALL 58399 0 2
16446: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16447: LD_VAR 0 2
16451: PPUSH
16452: LD_VAR 0 3
16456: PPUSH
16457: CALL_OW 52
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
16461: LD_INT 0
16463: PPUSH
16464: LD_INT 6
16466: PUSH
16467: LD_INT 7
16469: PUSH
16470: LD_INT 8
16472: PUSH
16473: LD_INT 9
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: PUSH
16482: LD_OWVAR 67
16486: ARRAY
16487: PPUSH
16488: CALL_OW 381
// for i := 1 to 3 do
16492: LD_ADDR_VAR 0 1
16496: PUSH
16497: DOUBLE
16498: LD_INT 1
16500: DEC
16501: ST_TO_ADDR
16502: LD_INT 3
16504: PUSH
16505: FOR_TO
16506: IFFALSE 16573
// begin un := CreateHuman ;
16508: LD_ADDR_VAR 0 2
16512: PUSH
16513: CALL_OW 44
16517: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
16518: LD_ADDR_EXP 38
16522: PUSH
16523: LD_EXP 38
16527: PPUSH
16528: LD_VAR 0 2
16532: PPUSH
16533: CALL 58399 0 2
16537: ST_TO_ADDR
// SetDir ( un , 3 ) ;
16538: LD_VAR 0 2
16542: PPUSH
16543: LD_INT 3
16545: PPUSH
16546: CALL_OW 233
// PlaceUnitXYR ( un , 224 , 57 , 4 , false ) ;
16550: LD_VAR 0 2
16554: PPUSH
16555: LD_INT 224
16557: PPUSH
16558: LD_INT 57
16560: PPUSH
16561: LD_INT 4
16563: PPUSH
16564: LD_INT 0
16566: PPUSH
16567: CALL_OW 50
// end ;
16571: GO 16505
16573: POP
16574: POP
// wait ( 0 0$01 ) ;
16575: LD_INT 35
16577: PPUSH
16578: CALL_OW 67
// DialogueOn ;
16582: CALL_OW 6
// PlaceSeeing ( 224 , 57 , 2 , - 16 ) ;
16586: LD_INT 224
16588: PPUSH
16589: LD_INT 57
16591: PPUSH
16592: LD_INT 2
16594: PPUSH
16595: LD_INT 16
16597: NEG
16598: PPUSH
16599: CALL_OW 330
// CenterNowOnXY ( 224 , 57 ) ;
16603: LD_INT 224
16605: PPUSH
16606: LD_INT 57
16608: PPUSH
16609: CALL_OW 86
// TalkAboutLegion ;
16613: CALL 15611 0 0
// RemoveSeeing ( 224 , 57 , 2 ) ;
16617: LD_INT 224
16619: PPUSH
16620: LD_INT 57
16622: PPUSH
16623: LD_INT 2
16625: PPUSH
16626: CALL_OW 331
// DialogueOff ;
16630: CALL_OW 7
// spotLegion := true ;
16634: LD_ADDR_EXP 10
16638: PUSH
16639: LD_INT 1
16641: ST_TO_ADDR
// ComAgressiveMove ( legEForces , 164 , 47 ) ;
16642: LD_EXP 38
16646: PPUSH
16647: LD_INT 164
16649: PPUSH
16650: LD_INT 47
16652: PPUSH
16653: CALL_OW 114
// AddComAgressiveMove ( legEForces , 179 , 20 ) ;
16657: LD_EXP 38
16661: PPUSH
16662: LD_INT 179
16664: PPUSH
16665: LD_INT 20
16667: PPUSH
16668: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
16672: LD_INT 35
16674: PPUSH
16675: CALL_OW 67
// until not UnitFilter ( legEForces , [ f_hastask ] ) or not UnitFilter ( legEForces , [ f_ok ] ) ;
16679: LD_EXP 38
16683: PPUSH
16684: LD_INT 60
16686: PUSH
16687: EMPTY
16688: LIST
16689: PPUSH
16690: CALL_OW 72
16694: NOT
16695: PUSH
16696: LD_EXP 38
16700: PPUSH
16701: LD_INT 50
16703: PUSH
16704: EMPTY
16705: LIST
16706: PPUSH
16707: CALL_OW 72
16711: NOT
16712: OR
16713: IFFALSE 16672
// if not UnitFilter ( legEForces , [ f_ok ] ) then
16715: LD_EXP 38
16719: PPUSH
16720: LD_INT 50
16722: PUSH
16723: EMPTY
16724: LIST
16725: PPUSH
16726: CALL_OW 72
16730: NOT
16731: IFFALSE 16735
// exit ;
16733: GO 16758
// legForces := legForces union legEForces ;
16735: LD_ADDR_EXP 37
16739: PUSH
16740: LD_EXP 37
16744: PUSH
16745: LD_EXP 38
16749: UNION
16750: ST_TO_ADDR
// legEForces := [ ] ;
16751: LD_ADDR_EXP 38
16755: PUSH
16756: EMPTY
16757: ST_TO_ADDR
// end ;
16758: PPOPN 3
16760: END
// every 0 0$1 trigger gameActive and ( See ( 8 , Omar ) or See ( 8 , Heike ) or spotByLegion ) and IsOk ( Heike ) and IsOk ( Omar ) do
16761: LD_EXP 19
16765: PUSH
16766: LD_INT 8
16768: PPUSH
16769: LD_EXP 24
16773: PPUSH
16774: CALL_OW 292
16778: PUSH
16779: LD_INT 8
16781: PPUSH
16782: LD_EXP 23
16786: PPUSH
16787: CALL_OW 292
16791: OR
16792: PUSH
16793: LD_EXP 9
16797: OR
16798: AND
16799: PUSH
16800: LD_EXP 23
16804: PPUSH
16805: CALL_OW 302
16809: AND
16810: PUSH
16811: LD_EXP 24
16815: PPUSH
16816: CALL_OW 302
16820: AND
16821: IFFALSE 16962
16823: GO 16825
16825: DISABLE
// begin DialogueOn ;
16826: CALL_OW 6
// SayRadio ( Farmer , DF-Spot-1 ) ;
16830: LD_EXP 36
16834: PPUSH
16835: LD_STRING DF-Spot-1
16837: PPUSH
16838: CALL_OW 94
// Say ( Heike , DH-Spot-2 ) ;
16842: LD_EXP 23
16846: PPUSH
16847: LD_STRING DH-Spot-2
16849: PPUSH
16850: CALL_OW 88
// SayRadio ( Farmer , DF-Spot-3 ) ;
16854: LD_EXP 36
16858: PPUSH
16859: LD_STRING DF-Spot-3
16861: PPUSH
16862: CALL_OW 94
// Say ( Heike , DH-Spot-4 ) ;
16866: LD_EXP 23
16870: PPUSH
16871: LD_STRING DH-Spot-4
16873: PPUSH
16874: CALL_OW 88
// Say ( Omar , DOm-Spot-5 ) ;
16878: LD_EXP 24
16882: PPUSH
16883: LD_STRING DOm-Spot-5
16885: PPUSH
16886: CALL_OW 88
// SayRadio ( Farmer , DF-Spot-6 ) ;
16890: LD_EXP 36
16894: PPUSH
16895: LD_STRING DF-Spot-6
16897: PPUSH
16898: CALL_OW 94
// SayRadio ( Farmer , DF-Spot-7 ) ;
16902: LD_EXP 36
16906: PPUSH
16907: LD_STRING DF-Spot-7
16909: PPUSH
16910: CALL_OW 94
// SayRadio ( Farmer , DF-Spot-8 ) ;
16914: LD_EXP 36
16918: PPUSH
16919: LD_STRING DF-Spot-8
16921: PPUSH
16922: CALL_OW 94
// Say ( Heike , DH-Spot-9 ) ;
16926: LD_EXP 23
16930: PPUSH
16931: LD_STRING DH-Spot-9
16933: PPUSH
16934: CALL_OW 88
// SayRadio ( Farmer , DF-Spot-10 ) ;
16938: LD_EXP 36
16942: PPUSH
16943: LD_STRING DF-Spot-10
16945: PPUSH
16946: CALL_OW 94
// DialogueOff ;
16950: CALL_OW 7
// spotByLegion := true ;
16954: LD_ADDR_EXP 9
16958: PUSH
16959: LD_INT 1
16961: ST_TO_ADDR
// end ;
16962: END
// every 0 0$1 trigger gameActive and ( spotByLegion or spotLegion ) do
16963: LD_EXP 19
16967: PUSH
16968: LD_EXP 9
16972: PUSH
16973: LD_EXP 10
16977: OR
16978: AND
16979: IFFALSE 16991
16981: GO 16983
16983: DISABLE
// ChangeMissionObjectives ( O3 ) ;
16984: LD_STRING O3
16986: PPUSH
16987: CALL_OW 337
16991: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_ok ] ] ) = 0 do
16992: LD_EXP 19
16996: PUSH
16997: LD_INT 22
16999: PUSH
17000: LD_INT 8
17002: PUSH
17003: EMPTY
17004: LIST
17005: LIST
17006: PUSH
17007: LD_INT 21
17009: PUSH
17010: LD_INT 1
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: PUSH
17017: LD_INT 50
17019: PUSH
17020: EMPTY
17021: LIST
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: LIST
17027: PPUSH
17028: CALL_OW 69
17032: PUSH
17033: LD_INT 0
17035: EQUAL
17036: AND
17037: IFFALSE 17135
17039: GO 17041
17041: DISABLE
// begin legScriptActive := false ;
17042: LD_ADDR_EXP 4
17046: PUSH
17047: LD_INT 0
17049: ST_TO_ADDR
// if not americanDestroyed then
17050: LD_EXP 11
17054: NOT
17055: IFFALSE 17064
// SetAchievement ( ACH_REVANGE ) ;
17057: LD_STRING ACH_REVANGE
17059: PPUSH
17060: CALL_OW 543
// legionDestroyed := true ;
17064: LD_ADDR_EXP 12
17068: PUSH
17069: LD_INT 1
17071: ST_TO_ADDR
// DialogueOn ;
17072: CALL_OW 6
// SayRadio ( Farmer , DF-LegDes-1 ) ;
17076: LD_EXP 36
17080: PPUSH
17081: LD_STRING DF-LegDes-1
17083: PPUSH
17084: CALL_OW 94
// Say ( Heike , DH-LegDes-2 ) ;
17088: LD_EXP 23
17092: PPUSH
17093: LD_STRING DH-LegDes-2
17095: PPUSH
17096: CALL_OW 88
// SayRadio ( Farmer , DF-LegDes-3 ) ;
17100: LD_EXP 36
17104: PPUSH
17105: LD_STRING DF-LegDes-3
17107: PPUSH
17108: CALL_OW 94
// Say ( Heike , DH-LegDes-4 ) ;
17112: LD_EXP 23
17116: PPUSH
17117: LD_STRING DH-LegDes-4
17119: PPUSH
17120: CALL_OW 88
// DialogueOff ;
17124: CALL_OW 7
// ChangeMissionObjectives ( O5 ) ;
17128: LD_STRING O5
17130: PPUSH
17131: CALL_OW 337
// end ;
17135: END
// every 0 0$1 trigger gameActive and UnitFilter ( amForces , [ [ f_type , unit_human ] , [ f_ok ] ] ) < 6 do var i , tmp ;
17136: LD_EXP 19
17140: PUSH
17141: LD_EXP 27
17145: PPUSH
17146: LD_INT 21
17148: PUSH
17149: LD_INT 1
17151: PUSH
17152: EMPTY
17153: LIST
17154: LIST
17155: PUSH
17156: LD_INT 50
17158: PUSH
17159: EMPTY
17160: LIST
17161: PUSH
17162: EMPTY
17163: LIST
17164: LIST
17165: PPUSH
17166: CALL_OW 72
17170: PUSH
17171: LD_INT 6
17173: LESS
17174: AND
17175: IFFALSE 17423
17177: GO 17179
17179: DISABLE
17180: LD_INT 0
17182: PPUSH
17183: PPUSH
// begin amScriptActive := false ;
17184: LD_ADDR_EXP 3
17188: PUSH
17189: LD_INT 0
17191: ST_TO_ADDR
// tmp := UnitFilter ( amForces , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
17192: LD_ADDR_VAR 0 2
17196: PUSH
17197: LD_EXP 27
17201: PPUSH
17202: LD_INT 21
17204: PUSH
17205: LD_INT 1
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: PUSH
17212: LD_INT 50
17214: PUSH
17215: EMPTY
17216: LIST
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: PPUSH
17222: CALL_OW 72
17226: ST_TO_ADDR
// for i in tmp do
17227: LD_ADDR_VAR 0 1
17231: PUSH
17232: LD_VAR 0 2
17236: PUSH
17237: FOR_IN
17238: IFFALSE 17266
// begin ComExit ( i ) ;
17240: LD_VAR 0 1
17244: PPUSH
17245: CALL 58797 0 1
// AddComMoveXY ( i , 63 , 124 ) ;
17249: LD_VAR 0 1
17253: PPUSH
17254: LD_INT 63
17256: PPUSH
17257: LD_INT 124
17259: PPUSH
17260: CALL_OW 171
// end ;
17264: GO 17237
17266: POP
17267: POP
// wait ( 0 0$2 ) ;
17268: LD_INT 70
17270: PPUSH
17271: CALL_OW 67
// americanDestroyed := true ;
17275: LD_ADDR_EXP 11
17279: PUSH
17280: LD_INT 1
17282: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17283: LD_INT 35
17285: PPUSH
17286: CALL_OW 67
// tmp := UnitFilter ( amForces , [ [ f_type , unit_human ] , [ f_ok ] ] ) union UnitFilter ( amPatrol , [ f_ok ] ) ;
17290: LD_ADDR_VAR 0 2
17294: PUSH
17295: LD_EXP 27
17299: PPUSH
17300: LD_INT 21
17302: PUSH
17303: LD_INT 1
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: PUSH
17310: LD_INT 50
17312: PUSH
17313: EMPTY
17314: LIST
17315: PUSH
17316: EMPTY
17317: LIST
17318: LIST
17319: PPUSH
17320: CALL_OW 72
17324: PUSH
17325: LD_EXP 35
17329: PPUSH
17330: LD_INT 50
17332: PUSH
17333: EMPTY
17334: LIST
17335: PPUSH
17336: CALL_OW 72
17340: UNION
17341: ST_TO_ADDR
// for i in tmp do
17342: LD_ADDR_VAR 0 1
17346: PUSH
17347: LD_VAR 0 2
17351: PUSH
17352: FOR_IN
17353: IFFALSE 17414
// begin if IsAt ( i , 63 , 124 ) or IsInArea ( i , amEscapeArea ) then
17355: LD_VAR 0 1
17359: PPUSH
17360: LD_INT 63
17362: PPUSH
17363: LD_INT 124
17365: PPUSH
17366: CALL_OW 307
17370: PUSH
17371: LD_VAR 0 1
17375: PPUSH
17376: LD_INT 25
17378: PPUSH
17379: CALL_OW 308
17383: OR
17384: IFFALSE 17397
// RemoveUnit ( i ) else
17386: LD_VAR 0 1
17390: PPUSH
17391: CALL_OW 64
17395: GO 17412
// ComMoveXY ( i , 63 , 124 ) ;
17397: LD_VAR 0 1
17401: PPUSH
17402: LD_INT 63
17404: PPUSH
17405: LD_INT 124
17407: PPUSH
17408: CALL_OW 111
// end ;
17412: GO 17352
17414: POP
17415: POP
// until not tmp ;
17416: LD_VAR 0 2
17420: NOT
17421: IFFALSE 17283
// end ;
17423: PPOPN 2
17425: END
// every 0 0$1 trigger gameActive and americanDestroyed and IsOk ( Heike ) and IsOk ( Omar ) do var i , un , veh ;
17426: LD_EXP 19
17430: PUSH
17431: LD_EXP 11
17435: AND
17436: PUSH
17437: LD_EXP 23
17441: PPUSH
17442: CALL_OW 302
17446: AND
17447: PUSH
17448: LD_EXP 24
17452: PPUSH
17453: CALL_OW 302
17457: AND
17458: IFFALSE 17948
17460: GO 17462
17462: DISABLE
17463: LD_INT 0
17465: PPUSH
17466: PPUSH
17467: PPUSH
// begin DialogueOn ;
17468: CALL_OW 6
// Say ( Heike , DH-Victory-1 ) ;
17472: LD_EXP 23
17476: PPUSH
17477: LD_STRING DH-Victory-1
17479: PPUSH
17480: CALL_OW 88
// Say ( Omar , DOm-Victory-2 ) ;
17484: LD_EXP 24
17488: PPUSH
17489: LD_STRING DOm-Victory-2
17491: PPUSH
17492: CALL_OW 88
// Say ( Omar , DOm-Victory-3 ) ;
17496: LD_EXP 24
17500: PPUSH
17501: LD_STRING DOm-Victory-3
17503: PPUSH
17504: CALL_OW 88
// Say ( Heike , DH-Victory-4 ) ;
17508: LD_EXP 23
17512: PPUSH
17513: LD_STRING DH-Victory-4
17515: PPUSH
17516: CALL_OW 88
// Say ( Omar , DOm-Victory-5 ) ;
17520: LD_EXP 24
17524: PPUSH
17525: LD_STRING DOm-Victory-5
17527: PPUSH
17528: CALL_OW 88
// Say ( Omar , DOm-Victory-6 ) ;
17532: LD_EXP 24
17536: PPUSH
17537: LD_STRING DOm-Victory-6
17539: PPUSH
17540: CALL_OW 88
// DialogueOff ;
17544: CALL_OW 7
// ChangeMissionObjectives ( O4 ) ;
17548: LD_STRING O4
17550: PPUSH
17551: CALL_OW 337
// canFinish := true ;
17555: LD_ADDR_EXP 18
17559: PUSH
17560: LD_INT 1
17562: ST_TO_ADDR
// SetAreaMapShow ( finalArea , 1 ) ;
17563: LD_INT 24
17565: PPUSH
17566: LD_INT 1
17568: PPUSH
17569: CALL_OW 424
// if not legionDestroyed then
17573: LD_EXP 12
17577: NOT
17578: IFFALSE 17948
// begin uc_nation := nation_arabian ;
17580: LD_ADDR_OWVAR 21
17584: PUSH
17585: LD_INT 2
17587: ST_TO_ADDR
// uc_side := 8 ;
17588: LD_ADDR_OWVAR 20
17592: PUSH
17593: LD_INT 8
17595: ST_TO_ADDR
// for i := 1 to 4 do
17596: LD_ADDR_VAR 0 1
17600: PUSH
17601: DOUBLE
17602: LD_INT 1
17604: DEC
17605: ST_TO_ADDR
17606: LD_INT 4
17608: PUSH
17609: FOR_TO
17610: IFFALSE 17691
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
17612: LD_INT 0
17614: PPUSH
17615: LD_INT 8
17617: PUSH
17618: LD_INT 9
17620: PUSH
17621: LD_INT 10
17623: PUSH
17624: LD_INT 10
17626: PUSH
17627: EMPTY
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: PUSH
17633: LD_OWVAR 67
17637: ARRAY
17638: PPUSH
17639: CALL_OW 381
// un := CreateHuman ;
17643: LD_ADDR_VAR 0 2
17647: PUSH
17648: CALL_OW 44
17652: ST_TO_ADDR
// SetDir ( un , 3 ) ;
17653: LD_VAR 0 2
17657: PPUSH
17658: LD_INT 3
17660: PPUSH
17661: CALL_OW 233
// PlaceUnitArea ( un , legDefArea , false ) ;
17665: LD_VAR 0 2
17669: PPUSH
17670: LD_INT 26
17672: PPUSH
17673: LD_INT 0
17675: PPUSH
17676: CALL_OW 49
// ComCrawl ( un ) ;
17680: LD_VAR 0 2
17684: PPUSH
17685: CALL_OW 137
// end ;
17689: GO 17609
17691: POP
17692: POP
// for i := 1 to 3 do
17693: LD_ADDR_VAR 0 1
17697: PUSH
17698: DOUBLE
17699: LD_INT 1
17701: DEC
17702: ST_TO_ADDR
17703: LD_INT 3
17705: PUSH
17706: FOR_TO
17707: IFFALSE 17791
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
17709: LD_INT 0
17711: PPUSH
17712: LD_INT 8
17714: PUSH
17715: LD_INT 9
17717: PUSH
17718: LD_INT 10
17720: PUSH
17721: LD_INT 10
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: PUSH
17730: LD_OWVAR 67
17734: ARRAY
17735: PPUSH
17736: CALL_OW 381
// un := CreateHuman ;
17740: LD_ADDR_VAR 0 2
17744: PUSH
17745: CALL_OW 44
17749: ST_TO_ADDR
// SetClass ( un , class_mortar ) ;
17750: LD_VAR 0 2
17754: PPUSH
17755: LD_INT 8
17757: PPUSH
17758: CALL_OW 336
// SetDir ( un , 3 ) ;
17762: LD_VAR 0 2
17766: PPUSH
17767: LD_INT 3
17769: PPUSH
17770: CALL_OW 233
// PlaceUnitArea ( un , legDefArea , false ) ;
17774: LD_VAR 0 2
17778: PPUSH
17779: LD_INT 26
17781: PPUSH
17782: LD_INT 0
17784: PPUSH
17785: CALL_OW 49
// end ;
17789: GO 17706
17791: POP
17792: POP
// for i := 1 to 2 do
17793: LD_ADDR_VAR 0 1
17797: PUSH
17798: DOUBLE
17799: LD_INT 1
17801: DEC
17802: ST_TO_ADDR
17803: LD_INT 2
17805: PUSH
17806: FOR_TO
17807: IFFALSE 17946
// begin uc_side := 8 ;
17809: LD_ADDR_OWVAR 20
17813: PUSH
17814: LD_INT 8
17816: ST_TO_ADDR
// uc_nation := nation_american ;
17817: LD_ADDR_OWVAR 21
17821: PUSH
17822: LD_INT 1
17824: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_combustion , control_manual , us_laser , 90 ) ;
17825: LD_INT 4
17827: PPUSH
17828: LD_INT 1
17830: PPUSH
17831: LD_INT 1
17833: PPUSH
17834: LD_INT 9
17836: PPUSH
17837: LD_INT 90
17839: PPUSH
17840: CALL 25528 0 5
// veh := CreateVehicle ;
17844: LD_ADDR_VAR 0 3
17848: PUSH
17849: CALL_OW 45
17853: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
17854: LD_VAR 0 3
17858: PPUSH
17859: LD_INT 3
17861: PPUSH
17862: CALL_OW 233
// PlaceUnitArea ( veh , legVDefArea , false ) ;
17866: LD_VAR 0 3
17870: PPUSH
17871: LD_INT 27
17873: PPUSH
17874: LD_INT 0
17876: PPUSH
17877: CALL_OW 49
// uc_nation := nation_arabian ;
17881: LD_ADDR_OWVAR 21
17885: PUSH
17886: LD_INT 2
17888: ST_TO_ADDR
// PrepareMechanic ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
17889: LD_INT 0
17891: PPUSH
17892: LD_INT 8
17894: PUSH
17895: LD_INT 9
17897: PUSH
17898: LD_INT 10
17900: PUSH
17901: LD_INT 10
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: PUSH
17910: LD_OWVAR 67
17914: ARRAY
17915: PPUSH
17916: CALL_OW 383
// un := CreateHuman ;
17920: LD_ADDR_VAR 0 2
17924: PUSH
17925: CALL_OW 44
17929: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17930: LD_VAR 0 2
17934: PPUSH
17935: LD_VAR 0 3
17939: PPUSH
17940: CALL_OW 52
// end ;
17944: GO 17806
17946: POP
17947: POP
// end ; end ;
17948: PPOPN 3
17950: END
// every 0 0$1 trigger gameActive and canFinish and AreInArea ( [ Omar ] , finalArea ) and AreInArea ( [ Heike ] , finalArea ) do
17951: LD_EXP 19
17955: PUSH
17956: LD_EXP 18
17960: AND
17961: PUSH
17962: LD_EXP 24
17966: PUSH
17967: EMPTY
17968: LIST
17969: PPUSH
17970: LD_INT 24
17972: PPUSH
17973: CALL 11734 0 2
17977: AND
17978: PUSH
17979: LD_EXP 23
17983: PUSH
17984: EMPTY
17985: LIST
17986: PPUSH
17987: LD_INT 24
17989: PPUSH
17990: CALL 11734 0 2
17994: AND
17995: IFFALSE 18168
17997: GO 17999
17999: DISABLE
// begin if tick <= 50 50$00 then
18000: LD_OWVAR 1
18004: PUSH
18005: LD_INT 105000
18007: LESSEQUAL
18008: IFFALSE 18017
// SetAchievement ( ACH_HSPEED_10 ) ;
18010: LD_STRING ACH_HSPEED_10
18012: PPUSH
18013: CALL_OW 543
// if legionDestroyed then
18017: LD_EXP 12
18021: IFFALSE 18035
// AddMedal ( med1 , 1 ) else
18023: LD_STRING med1
18025: PPUSH
18026: LD_INT 1
18028: PPUSH
18029: CALL_OW 101
18033: GO 18046
// AddMedal ( med1 , - 1 ) ;
18035: LD_STRING med1
18037: PPUSH
18038: LD_INT 1
18040: NEG
18041: PPUSH
18042: CALL_OW 101
// if tick <= [ 90 90$00 , 80 80$00 , 70 70$00 , 60 60$00 ] [ Difficulty ] then
18046: LD_OWVAR 1
18050: PUSH
18051: LD_INT 189000
18053: PUSH
18054: LD_INT 168000
18056: PUSH
18057: LD_INT 147000
18059: PUSH
18060: LD_INT 126000
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: PUSH
18069: LD_OWVAR 67
18073: ARRAY
18074: LESSEQUAL
18075: IFFALSE 18089
// AddMedal ( med2 , 1 ) else
18077: LD_STRING med2
18079: PPUSH
18080: LD_INT 1
18082: PPUSH
18083: CALL_OW 101
18087: GO 18100
// AddMedal ( med2 , - 1 ) ;
18089: LD_STRING med2
18091: PPUSH
18092: LD_INT 1
18094: NEG
18095: PPUSH
18096: CALL_OW 101
// if hasApes + hasVehicles + hasTigers + hasMastodont + hasDrugs >= 3 then
18100: LD_EXP 16
18104: PUSH
18105: LD_EXP 14
18109: PLUS
18110: PUSH
18111: LD_EXP 15
18115: PLUS
18116: PUSH
18117: LD_EXP 13
18121: PLUS
18122: PUSH
18123: LD_EXP 17
18127: PLUS
18128: PUSH
18129: LD_INT 3
18131: GREATEREQUAL
18132: IFFALSE 18146
// AddMedal ( med3 , 1 ) else
18134: LD_STRING med3
18136: PPUSH
18137: LD_INT 1
18139: PPUSH
18140: CALL_OW 101
18144: GO 18157
// AddMedal ( med3 , - 1 ) ;
18146: LD_STRING med3
18148: PPUSH
18149: LD_INT 1
18151: NEG
18152: PPUSH
18153: CALL_OW 101
// GiveMedals ( MAIN ) ;
18157: LD_STRING MAIN
18159: PPUSH
18160: CALL_OW 102
// YouWin ;
18164: CALL_OW 103
// end ; end_of_file
18168: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
18169: LD_VAR 0 1
18173: PPUSH
18174: CALL 79652 0 1
// if apeAmount and GetSide ( unit ) = 2 and ( GetControl ( unit ) = control_apeman or GetClass ( unit ) in [ class_apeman , class_apeman_soldier , class_apeman_engineer , class_apeman_kamikaze ] ) then
18178: LD_EXP 5
18182: PUSH
18183: LD_VAR 0 1
18187: PPUSH
18188: CALL_OW 255
18192: PUSH
18193: LD_INT 2
18195: EQUAL
18196: AND
18197: PUSH
18198: LD_VAR 0 1
18202: PPUSH
18203: CALL_OW 263
18207: PUSH
18208: LD_INT 5
18210: EQUAL
18211: PUSH
18212: LD_VAR 0 1
18216: PPUSH
18217: CALL_OW 257
18221: PUSH
18222: LD_INT 12
18224: PUSH
18225: LD_INT 15
18227: PUSH
18228: LD_INT 16
18230: PUSH
18231: LD_INT 17
18233: PUSH
18234: EMPTY
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: IN
18240: OR
18241: AND
18242: IFFALSE 18312
// begin apeAmount := Dec ( apeAmount ) ;
18244: LD_ADDR_EXP 5
18248: PUSH
18249: LD_EXP 5
18253: PPUSH
18254: CALL 59782 0 1
18258: ST_TO_ADDR
// wait ( rand ( 0 0$1 , 1 1$00 ) ) ;
18259: LD_INT 35
18261: PPUSH
18262: LD_INT 2100
18264: PPUSH
18265: CALL_OW 12
18269: PPUSH
18270: CALL_OW 67
// uc_side := 0 ;
18274: LD_ADDR_OWVAR 20
18278: PUSH
18279: LD_INT 0
18281: ST_TO_ADDR
// uc_nation := nation_nature ;
18282: LD_ADDR_OWVAR 21
18286: PUSH
18287: LD_INT 0
18289: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
18290: LD_INT 0
18292: PPUSH
18293: CALL 54647 0 1
// PlaceUnitArea ( CreateHuman , apeArea , false ) ;
18297: CALL_OW 44
18301: PPUSH
18302: LD_INT 6
18304: PPUSH
18305: LD_INT 0
18307: PPUSH
18308: CALL_OW 49
// end ; if unit = Heike then
18312: LD_VAR 0 1
18316: PUSH
18317: LD_EXP 23
18321: EQUAL
18322: IFFALSE 18331
// YouLost ( Heike ) ;
18324: LD_STRING Heike
18326: PPUSH
18327: CALL_OW 104
// if unit = Omar then
18331: LD_VAR 0 1
18335: PUSH
18336: LD_EXP 24
18340: EQUAL
18341: IFFALSE 18350
// YouLost ( Omar ) ;
18343: LD_STRING Omar
18345: PPUSH
18346: CALL_OW 104
// if unit in amForces then
18350: LD_VAR 0 1
18354: PUSH
18355: LD_EXP 27
18359: IN
18360: IFFALSE 18378
// amForces := amForces diff unit ;
18362: LD_ADDR_EXP 27
18366: PUSH
18367: LD_EXP 27
18371: PUSH
18372: LD_VAR 0 1
18376: DIFF
18377: ST_TO_ADDR
// if unit in amTanks then
18378: LD_VAR 0 1
18382: PUSH
18383: LD_EXP 32
18387: IN
18388: IFFALSE 18406
// amTanks := amTanks diff unit ;
18390: LD_ADDR_EXP 32
18394: PUSH
18395: LD_EXP 32
18399: PUSH
18400: LD_VAR 0 1
18404: DIFF
18405: ST_TO_ADDR
// if unit in amPatrol then
18406: LD_VAR 0 1
18410: PUSH
18411: LD_EXP 35
18415: IN
18416: IFFALSE 18434
// amPatrol := amPatrol diff unit ;
18418: LD_ADDR_EXP 35
18422: PUSH
18423: LD_EXP 35
18427: PUSH
18428: LD_VAR 0 1
18432: DIFF
18433: ST_TO_ADDR
// if GetBType ( unit ) in [ b_bunker , b_turret ] and GetSide ( unit ) = 1 then
18434: LD_VAR 0 1
18438: PPUSH
18439: CALL_OW 266
18443: PUSH
18444: LD_INT 32
18446: PUSH
18447: LD_INT 33
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: IN
18454: PUSH
18455: LD_VAR 0 1
18459: PPUSH
18460: CALL_OW 255
18464: PUSH
18465: LD_INT 1
18467: EQUAL
18468: AND
18469: IFFALSE 18532
// amBuildings := Join ( amBuildings , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
18471: LD_ADDR_EXP 31
18475: PUSH
18476: LD_EXP 31
18480: PPUSH
18481: LD_VAR 0 1
18485: PPUSH
18486: CALL_OW 266
18490: PUSH
18491: LD_VAR 0 1
18495: PPUSH
18496: CALL_OW 250
18500: PUSH
18501: LD_VAR 0 1
18505: PPUSH
18506: CALL_OW 251
18510: PUSH
18511: LD_VAR 0 1
18515: PPUSH
18516: CALL_OW 254
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: PPUSH
18527: CALL 58399 0 2
18531: ST_TO_ADDR
// if unit in legForces then
18532: LD_VAR 0 1
18536: PUSH
18537: LD_EXP 37
18541: IN
18542: IFFALSE 18560
// legForces := legForces diff unit ;
18544: LD_ADDR_EXP 37
18548: PUSH
18549: LD_EXP 37
18553: PUSH
18554: LD_VAR 0 1
18558: DIFF
18559: ST_TO_ADDR
// if unit in legTanks then
18560: LD_VAR 0 1
18564: PUSH
18565: LD_EXP 43
18569: IN
18570: IFFALSE 18588
// legTanks := legTanks diff unit ;
18572: LD_ADDR_EXP 43
18576: PUSH
18577: LD_EXP 43
18581: PUSH
18582: LD_VAR 0 1
18586: DIFF
18587: ST_TO_ADDR
// if unit in legRTanks then
18588: LD_VAR 0 1
18592: PUSH
18593: LD_EXP 44
18597: IN
18598: IFFALSE 18616
// legRTanks := legRTanks diff unit ;
18600: LD_ADDR_EXP 44
18604: PUSH
18605: LD_EXP 44
18609: PUSH
18610: LD_VAR 0 1
18614: DIFF
18615: ST_TO_ADDR
// if GetBType ( unit ) in [ b_bunker , b_turret ] and GetSide ( unit ) = 8 then
18616: LD_VAR 0 1
18620: PPUSH
18621: CALL_OW 266
18625: PUSH
18626: LD_INT 32
18628: PUSH
18629: LD_INT 33
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: IN
18636: PUSH
18637: LD_VAR 0 1
18641: PPUSH
18642: CALL_OW 255
18646: PUSH
18647: LD_INT 8
18649: EQUAL
18650: AND
18651: IFFALSE 18714
// legBuildings := Join ( legBuildings , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
18653: LD_ADDR_EXP 42
18657: PUSH
18658: LD_EXP 42
18662: PPUSH
18663: LD_VAR 0 1
18667: PPUSH
18668: CALL_OW 266
18672: PUSH
18673: LD_VAR 0 1
18677: PPUSH
18678: CALL_OW 250
18682: PUSH
18683: LD_VAR 0 1
18687: PPUSH
18688: CALL_OW 251
18692: PUSH
18693: LD_VAR 0 1
18697: PPUSH
18698: CALL_OW 254
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: PPUSH
18709: CALL 58399 0 2
18713: ST_TO_ADDR
// if GetWeapon ( unit ) = us_crane and GetSide ( unit ) = 1 then
18714: LD_VAR 0 1
18718: PPUSH
18719: CALL_OW 264
18723: PUSH
18724: LD_INT 13
18726: EQUAL
18727: PUSH
18728: LD_VAR 0 1
18732: PPUSH
18733: CALL_OW 255
18737: PUSH
18738: LD_INT 1
18740: EQUAL
18741: AND
18742: IFFALSE 18777
// amConstructList := Join ( amConstructList , [ us_medium_wheeled , engine_combustion , control_remote , us_crane ] ) ;
18744: LD_ADDR_EXP 29
18748: PUSH
18749: LD_EXP 29
18753: PPUSH
18754: LD_INT 2
18756: PUSH
18757: LD_INT 1
18759: PUSH
18760: LD_INT 2
18762: PUSH
18763: LD_INT 13
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: LIST
18770: LIST
18771: PPUSH
18772: CALL 58399 0 2
18776: ST_TO_ADDR
// if GetWeapon ( unit ) = ar_crane and GetSide ( unit ) = 8 then
18777: LD_VAR 0 1
18781: PPUSH
18782: CALL_OW 264
18786: PUSH
18787: LD_INT 88
18789: EQUAL
18790: PUSH
18791: LD_VAR 0 1
18795: PPUSH
18796: CALL_OW 255
18800: PUSH
18801: LD_INT 8
18803: EQUAL
18804: AND
18805: IFFALSE 18840
// legConstructList := Join ( legConstructList , [ ar_medium_trike , engine_combustion , control_remote , ar_crane ] ) ;
18807: LD_ADDR_EXP 40
18811: PUSH
18812: LD_EXP 40
18816: PPUSH
18817: LD_INT 13
18819: PUSH
18820: LD_INT 1
18822: PUSH
18823: LD_INT 2
18825: PUSH
18826: LD_INT 88
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: LIST
18833: LIST
18834: PPUSH
18835: CALL 58399 0 2
18839: ST_TO_ADDR
// if unit = amCargo then
18840: LD_VAR 0 1
18844: PUSH
18845: LD_EXP 34
18849: EQUAL
18850: IFFALSE 18893
// begin amCargo := 0 ;
18852: LD_ADDR_EXP 34
18856: PUSH
18857: LD_INT 0
18859: ST_TO_ADDR
// amConstructList := Join ( amConstructList , [ us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ] ) ;
18860: LD_ADDR_EXP 29
18864: PUSH
18865: LD_EXP 29
18869: PPUSH
18870: LD_INT 2
18872: PUSH
18873: LD_INT 1
18875: PUSH
18876: LD_INT 2
18878: PUSH
18879: LD_INT 12
18881: PUSH
18882: EMPTY
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: PPUSH
18888: CALL 58399 0 2
18892: ST_TO_ADDR
// end ; if unit = legCargo then
18893: LD_VAR 0 1
18897: PUSH
18898: LD_EXP 45
18902: EQUAL
18903: IFFALSE 18946
// begin legCargo := 0 ;
18905: LD_ADDR_EXP 45
18909: PUSH
18910: LD_INT 0
18912: ST_TO_ADDR
// legConstructList := Join ( legConstructList , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ) ;
18913: LD_ADDR_EXP 40
18917: PUSH
18918: LD_EXP 40
18922: PPUSH
18923: LD_INT 13
18925: PUSH
18926: LD_INT 1
18928: PUSH
18929: LD_INT 2
18931: PUSH
18932: LD_INT 32
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: PPUSH
18941: CALL 58399 0 2
18945: ST_TO_ADDR
// end ; end ;
18946: PPOPN 1
18948: END
// on TigerTamed ( tiger , sheik ) do begin tigerCounter := Inc ( tigerCounter ) ;
18949: LD_ADDR_EXP 21
18953: PUSH
18954: LD_EXP 21
18958: PPUSH
18959: CALL 59760 0 1
18963: ST_TO_ADDR
// end ;
18964: PPOPN 2
18966: END
// on EnterBuilding ( b , un ) do begin if un in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_class , class_mechanic ] ] ) and GetBType ( b ) = b_factory and GetLives ( un ) < 1000 then
18967: LD_VAR 0 2
18971: PUSH
18972: LD_INT 3
18974: PUSH
18975: LD_INT 22
18977: PUSH
18978: LD_INT 2
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: PUSH
18985: EMPTY
18986: LIST
18987: LIST
18988: PUSH
18989: LD_INT 25
18991: PUSH
18992: LD_INT 3
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PPUSH
19003: CALL_OW 69
19007: IN
19008: PUSH
19009: LD_VAR 0 1
19013: PPUSH
19014: CALL_OW 266
19018: PUSH
19019: LD_INT 3
19021: EQUAL
19022: AND
19023: PUSH
19024: LD_VAR 0 2
19028: PPUSH
19029: CALL_OW 256
19033: PUSH
19034: LD_INT 1000
19036: LESS
19037: AND
19038: IFFALSE 19064
// begin SetTag ( un , 0 ) ;
19040: LD_VAR 0 2
19044: PPUSH
19045: LD_INT 0
19047: PPUSH
19048: CALL_OW 109
// SetLives ( un , 1000 ) ;
19052: LD_VAR 0 2
19056: PPUSH
19057: LD_INT 1000
19059: PPUSH
19060: CALL_OW 234
// end ; end ;
19064: PPOPN 2
19066: END
// on VehicleConstructed ( veh , fac ) do var side , weapon ;
19067: LD_INT 0
19069: PPUSH
19070: PPUSH
// begin SOS_VehicleConstructed ( veh , fac ) ;
19071: LD_VAR 0 1
19075: PPUSH
19076: LD_VAR 0 2
19080: PPUSH
19081: CALL 79710 0 2
// side := GetSide ( fac ) ;
19085: LD_ADDR_VAR 0 3
19089: PUSH
19090: LD_VAR 0 2
19094: PPUSH
19095: CALL_OW 255
19099: ST_TO_ADDR
// weapon := GetWeapon ( veh ) ;
19100: LD_ADDR_VAR 0 4
19104: PUSH
19105: LD_VAR 0 1
19109: PPUSH
19110: CALL_OW 264
19114: ST_TO_ADDR
// if side = 1 then
19115: LD_VAR 0 3
19119: PUSH
19120: LD_INT 1
19122: EQUAL
19123: IFFALSE 19232
// begin amConstructList := Delete ( amConstructList , 1 ) ;
19125: LD_ADDR_EXP 29
19129: PUSH
19130: LD_EXP 29
19134: PPUSH
19135: LD_INT 1
19137: PPUSH
19138: CALL_OW 3
19142: ST_TO_ADDR
// if weapon = us_cargo_bay and not amCargo then
19143: LD_VAR 0 4
19147: PUSH
19148: LD_INT 12
19150: EQUAL
19151: PUSH
19152: LD_EXP 34
19156: NOT
19157: AND
19158: IFFALSE 19170
// amCargo := veh ;
19160: LD_ADDR_EXP 34
19164: PUSH
19165: LD_VAR 0 1
19169: ST_TO_ADDR
// if weapon in [ us_cargo_bay , us_crane , us_bulldozer ] then
19170: LD_VAR 0 4
19174: PUSH
19175: LD_INT 12
19177: PUSH
19178: LD_INT 13
19180: PUSH
19181: LD_INT 14
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: LIST
19188: IN
19189: IFFALSE 19193
// exit ;
19191: GO 19382
// amTanks := Join ( amTanks , veh ) ;
19193: LD_ADDR_EXP 32
19197: PUSH
19198: LD_EXP 32
19202: PPUSH
19203: LD_VAR 0 1
19207: PPUSH
19208: CALL 58399 0 2
19212: ST_TO_ADDR
// wait ( 0 0$01 ) ;
19213: LD_INT 35
19215: PPUSH
19216: CALL_OW 67
// AddComMoveToArea ( veh , amParkingArea ) ;
19220: LD_VAR 0 1
19224: PPUSH
19225: LD_INT 12
19227: PPUSH
19228: CALL_OW 173
// end ; if side = 8 then
19232: LD_VAR 0 3
19236: PUSH
19237: LD_INT 8
19239: EQUAL
19240: IFFALSE 19382
// begin legConstructList := Delete ( legConstructList , 1 ) ;
19242: LD_ADDR_EXP 40
19246: PUSH
19247: LD_EXP 40
19251: PPUSH
19252: LD_INT 1
19254: PPUSH
19255: CALL_OW 3
19259: ST_TO_ADDR
// if weapon = ar_cargo_bay and not legCargo then
19260: LD_VAR 0 4
19264: PUSH
19265: LD_INT 32
19267: EQUAL
19268: PUSH
19269: LD_EXP 45
19273: NOT
19274: AND
19275: IFFALSE 19287
// legCargo := veh ;
19277: LD_ADDR_EXP 45
19281: PUSH
19282: LD_VAR 0 1
19286: ST_TO_ADDR
// if weapon in [ ar_cargo_bay , ar_crane ] then
19287: LD_VAR 0 4
19291: PUSH
19292: LD_INT 32
19294: PUSH
19295: LD_INT 88
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: IN
19302: IFFALSE 19306
// exit ;
19304: GO 19382
// if GetControl ( veh ) = control_manual then
19306: LD_VAR 0 1
19310: PPUSH
19311: CALL_OW 263
19315: PUSH
19316: LD_INT 1
19318: EQUAL
19319: IFFALSE 19343
// legTanks := Join ( legTanks , veh ) else
19321: LD_ADDR_EXP 43
19325: PUSH
19326: LD_EXP 43
19330: PPUSH
19331: LD_VAR 0 1
19335: PPUSH
19336: CALL 58399 0 2
19340: ST_TO_ADDR
19341: GO 19363
// legRTanks := Join ( legRTanks , veh ) ;
19343: LD_ADDR_EXP 44
19347: PUSH
19348: LD_EXP 44
19352: PPUSH
19353: LD_VAR 0 1
19357: PPUSH
19358: CALL 58399 0 2
19362: ST_TO_ADDR
// wait ( 0 0$01 ) ;
19363: LD_INT 35
19365: PPUSH
19366: CALL_OW 67
// AddComMoveToArea ( veh , legParkingArea ) ;
19370: LD_VAR 0 1
19374: PPUSH
19375: LD_INT 15
19377: PPUSH
19378: CALL_OW 173
// end ; end ;
19382: PPOPN 4
19384: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do var arm , fac , side ;
19385: LD_INT 0
19387: PPUSH
19388: PPUSH
19389: PPUSH
// begin side := GetSide ( driver ) ;
19390: LD_ADDR_VAR 0 7
19394: PUSH
19395: LD_VAR 0 1
19399: PPUSH
19400: CALL_OW 255
19404: ST_TO_ADDR
// if side = 1 and driver in amForces then
19405: LD_VAR 0 7
19409: PUSH
19410: LD_INT 1
19412: EQUAL
19413: PUSH
19414: LD_VAR 0 1
19418: PUSH
19419: LD_EXP 27
19423: IN
19424: AND
19425: IFFALSE 19637
// begin ComMoveToArea ( driver , amBaseArea ) ;
19427: LD_VAR 0 1
19431: PPUSH
19432: LD_INT 1
19434: PPUSH
19435: CALL_OW 113
// SetTag ( driver , tMech ) ;
19439: LD_VAR 0 1
19443: PPUSH
19444: LD_INT 7
19446: PPUSH
19447: CALL_OW 109
// fac := FilterUnitsInArea ( amBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
19451: LD_ADDR_VAR 0 6
19455: PUSH
19456: LD_INT 1
19458: PPUSH
19459: LD_INT 22
19461: PUSH
19462: LD_VAR 0 7
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PUSH
19471: LD_INT 30
19473: PUSH
19474: LD_INT 3
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PUSH
19481: LD_INT 50
19483: PUSH
19484: EMPTY
19485: LIST
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: LIST
19491: PPUSH
19492: CALL_OW 70
19496: ST_TO_ADDR
// if fac then
19497: LD_VAR 0 6
19501: IFFALSE 19523
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
19503: LD_VAR 0 1
19507: PPUSH
19508: LD_VAR 0 6
19512: PUSH
19513: LD_INT 1
19515: ARRAY
19516: PPUSH
19517: CALL_OW 180
// exit ;
19521: GO 19890
// end ; arm := FilterUnitsInArea ( amBaseArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
19523: LD_ADDR_VAR 0 5
19527: PUSH
19528: LD_INT 1
19530: PPUSH
19531: LD_INT 22
19533: PUSH
19534: LD_VAR 0 7
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: PUSH
19543: LD_INT 2
19545: PUSH
19546: LD_INT 30
19548: PUSH
19549: LD_INT 4
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: PUSH
19556: LD_INT 30
19558: PUSH
19559: LD_INT 5
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: LIST
19570: PUSH
19571: LD_INT 3
19573: PUSH
19574: LD_INT 62
19576: PUSH
19577: EMPTY
19578: LIST
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: PUSH
19584: LD_INT 50
19586: PUSH
19587: EMPTY
19588: LIST
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: PPUSH
19596: CALL_OW 70
19600: ST_TO_ADDR
// if arm then
19601: LD_VAR 0 5
19605: IFFALSE 19637
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
19607: LD_VAR 0 1
19611: PPUSH
19612: LD_VAR 0 5
19616: PUSH
19617: LD_INT 1
19619: ARRAY
19620: PPUSH
19621: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
19625: LD_VAR 0 1
19629: PPUSH
19630: LD_INT 1
19632: PPUSH
19633: CALL_OW 183
// end ; end ; if side = 8 then
19637: LD_VAR 0 7
19641: PUSH
19642: LD_INT 8
19644: EQUAL
19645: IFFALSE 19890
// begin ComMoveToArea ( driver , legBaseArea ) ;
19647: LD_VAR 0 1
19651: PPUSH
19652: LD_INT 2
19654: PPUSH
19655: CALL_OW 113
// if not driver in legForces then
19659: LD_VAR 0 1
19663: PUSH
19664: LD_EXP 37
19668: IN
19669: NOT
19670: IFFALSE 19692
// legForces := Join ( legForces , driver ) ;
19672: LD_ADDR_EXP 37
19676: PUSH
19677: LD_EXP 37
19681: PPUSH
19682: LD_VAR 0 1
19686: PPUSH
19687: CALL 58399 0 2
19691: ST_TO_ADDR
// SetTag ( driver , tMech ) ;
19692: LD_VAR 0 1
19696: PPUSH
19697: LD_INT 7
19699: PPUSH
19700: CALL_OW 109
// fac := FilterUnitsInArea ( legBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
19704: LD_ADDR_VAR 0 6
19708: PUSH
19709: LD_INT 2
19711: PPUSH
19712: LD_INT 22
19714: PUSH
19715: LD_VAR 0 7
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: PUSH
19724: LD_INT 30
19726: PUSH
19727: LD_INT 3
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PUSH
19734: LD_INT 50
19736: PUSH
19737: EMPTY
19738: LIST
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: LIST
19744: PPUSH
19745: CALL_OW 70
19749: ST_TO_ADDR
// if fac then
19750: LD_VAR 0 6
19754: IFFALSE 19776
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
19756: LD_VAR 0 1
19760: PPUSH
19761: LD_VAR 0 6
19765: PUSH
19766: LD_INT 1
19768: ARRAY
19769: PPUSH
19770: CALL_OW 180
// exit ;
19774: GO 19890
// end ; arm := FilterUnitsInArea ( legBaseArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
19776: LD_ADDR_VAR 0 5
19780: PUSH
19781: LD_INT 2
19783: PPUSH
19784: LD_INT 22
19786: PUSH
19787: LD_VAR 0 7
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: PUSH
19796: LD_INT 2
19798: PUSH
19799: LD_INT 30
19801: PUSH
19802: LD_INT 4
19804: PUSH
19805: EMPTY
19806: LIST
19807: LIST
19808: PUSH
19809: LD_INT 30
19811: PUSH
19812: LD_INT 5
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: LIST
19823: PUSH
19824: LD_INT 3
19826: PUSH
19827: LD_INT 62
19829: PUSH
19830: EMPTY
19831: LIST
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: PUSH
19837: LD_INT 50
19839: PUSH
19840: EMPTY
19841: LIST
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: PPUSH
19849: CALL_OW 70
19853: ST_TO_ADDR
// if arm then
19854: LD_VAR 0 5
19858: IFFALSE 19890
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
19860: LD_VAR 0 1
19864: PPUSH
19865: LD_VAR 0 5
19869: PUSH
19870: LD_INT 1
19872: ARRAY
19873: PPUSH
19874: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
19878: LD_VAR 0 1
19882: PPUSH
19883: LD_INT 1
19885: PPUSH
19886: CALL_OW 183
// end ; end ; end ;
19890: PPOPN 7
19892: END
// on BuildingComplete ( b ) do var side , type ;
19893: LD_INT 0
19895: PPUSH
19896: PPUSH
// begin side := GetSide ( b ) ;
19897: LD_ADDR_VAR 0 2
19901: PUSH
19902: LD_VAR 0 1
19906: PPUSH
19907: CALL_OW 255
19911: ST_TO_ADDR
// type := GetBType ( b ) ;
19912: LD_ADDR_VAR 0 3
19916: PUSH
19917: LD_VAR 0 1
19921: PPUSH
19922: CALL_OW 266
19926: ST_TO_ADDR
// if side = 1 then
19927: LD_VAR 0 2
19931: PUSH
19932: LD_INT 1
19934: EQUAL
19935: IFFALSE 19985
// begin amBuildings := Delete ( amBuildings , 1 ) ;
19937: LD_ADDR_EXP 31
19941: PUSH
19942: LD_EXP 31
19946: PPUSH
19947: LD_INT 1
19949: PPUSH
19950: CALL_OW 3
19954: ST_TO_ADDR
// if type in [ b_depot , b_armoury , b_workshop ] then
19955: LD_VAR 0 3
19959: PUSH
19960: LD_INT 0
19962: PUSH
19963: LD_INT 4
19965: PUSH
19966: LD_INT 2
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: LIST
19973: IN
19974: IFFALSE 19985
// ComUpgrade ( b ) ;
19976: LD_VAR 0 1
19980: PPUSH
19981: CALL_OW 146
// end ; end ;
19985: PPOPN 3
19987: END
// on ResearchComplete ( tech , lab ) do var side ;
19988: LD_INT 0
19990: PPUSH
// begin side := GetSide ( lab ) ;
19991: LD_ADDR_VAR 0 3
19995: PUSH
19996: LD_VAR 0 2
20000: PPUSH
20001: CALL_OW 255
20005: ST_TO_ADDR
// if side = 1 then
20006: LD_VAR 0 3
20010: PUSH
20011: LD_INT 1
20013: EQUAL
20014: IFFALSE 20032
// amTech := amTech diff tech ;
20016: LD_ADDR_EXP 28
20020: PUSH
20021: LD_EXP 28
20025: PUSH
20026: LD_VAR 0 1
20030: DIFF
20031: ST_TO_ADDR
// end ;
20032: PPOPN 3
20034: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
20035: LD_VAR 0 1
20039: PPUSH
20040: CALL 79694 0 1
// end ;
20044: PPOPN 1
20046: END
// on SailEvent ( event ) do begin case event of end ;
20047: LD_VAR 0 1
20051: PUSH
20052: POP
// end ;
20053: PPOPN 1
20055: END
// on Contact ( s1 , s2 ) do begin if not gameActive then
20056: LD_EXP 19
20060: NOT
20061: IFFALSE 20065
// exit ;
20063: GO 20163
// if not spotByAmerican and s1 in [ 2 , 1 ] and s2 in [ 1 , 2 ] then
20065: LD_EXP 8
20069: NOT
20070: PUSH
20071: LD_VAR 0 1
20075: PUSH
20076: LD_INT 2
20078: PUSH
20079: LD_INT 1
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: IN
20086: AND
20087: PUSH
20088: LD_VAR 0 2
20092: PUSH
20093: LD_INT 1
20095: PUSH
20096: LD_INT 2
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: IN
20103: AND
20104: IFFALSE 20114
// spotByAmerican := true ;
20106: LD_ADDR_EXP 8
20110: PUSH
20111: LD_INT 1
20113: ST_TO_ADDR
// if not spotByLegion and s1 in [ 2 , 8 ] and s2 in [ 8 , 2 ] then
20114: LD_EXP 9
20118: NOT
20119: PUSH
20120: LD_VAR 0 1
20124: PUSH
20125: LD_INT 2
20127: PUSH
20128: LD_INT 8
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: IN
20135: AND
20136: PUSH
20137: LD_VAR 0 2
20141: PUSH
20142: LD_INT 8
20144: PUSH
20145: LD_INT 2
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: IN
20152: AND
20153: IFFALSE 20163
// spotByLegion := true ;
20155: LD_ADDR_EXP 9
20159: PUSH
20160: LD_INT 1
20162: ST_TO_ADDR
// end ; end_of_file
20163: PPOPN 2
20165: END
// every 1 1$05 + 0 0$20 trigger spotArabianBase do var i , tmp ;
20166: LD_EXP 7
20170: IFFALSE 20277
20172: GO 20174
20174: DISABLE
20175: LD_INT 0
20177: PPUSH
20178: PPUSH
// begin enable ;
20179: ENABLE
// wait ( rand ( 0 0$1 , 0 0$11 ) ) ;
20180: LD_INT 35
20182: PPUSH
20183: LD_INT 385
20185: PPUSH
20186: CALL_OW 12
20190: PPUSH
20191: CALL_OW 67
// tmp := [ cratesNorthArea , cratesWestArea ] ;
20195: LD_ADDR_VAR 0 2
20199: PUSH
20200: LD_INT 16
20202: PUSH
20203: LD_INT 17
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: ST_TO_ADDR
// i := tmp [ rand ( 1 , Count ( tmp ) ) ] ;
20210: LD_ADDR_VAR 0 1
20214: PUSH
20215: LD_VAR 0 2
20219: PUSH
20220: LD_INT 1
20222: PPUSH
20223: LD_VAR 0 2
20227: PPUSH
20228: CALL 22790 0 1
20232: PPUSH
20233: CALL_OW 12
20237: ARRAY
20238: ST_TO_ADDR
// if GetListOfCratesInArea ( i ) < 4 then
20239: LD_VAR 0 1
20243: PPUSH
20244: CALL_OW 435
20248: PUSH
20249: LD_INT 4
20251: LESS
20252: IFFALSE 20277
// CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
20254: LD_INT 1
20256: PPUSH
20257: LD_INT 5
20259: PPUSH
20260: CALL_OW 12
20264: PPUSH
20265: LD_VAR 0 1
20269: PPUSH
20270: LD_INT 1
20272: PPUSH
20273: CALL_OW 55
// end ;
20277: PPOPN 2
20279: END
// every 0 0$25 trigger tick < [ 5 5$00 , 4 4$00 , 3 3$00 , 2 2$30 ] [ Difficulty ] and spotArabianBase do
20280: LD_OWVAR 1
20284: PUSH
20285: LD_INT 10500
20287: PUSH
20288: LD_INT 8400
20290: PUSH
20291: LD_INT 6300
20293: PUSH
20294: LD_INT 5250
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: PUSH
20303: LD_OWVAR 67
20307: ARRAY
20308: LESS
20309: PUSH
20310: LD_EXP 7
20314: AND
20315: IFFALSE 20348
20317: GO 20319
20319: DISABLE
// begin enable ;
20320: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 218 , 92 , 11 , true ) ;
20321: LD_INT 1
20323: PPUSH
20324: LD_INT 5
20326: PPUSH
20327: CALL_OW 12
20331: PPUSH
20332: LD_INT 218
20334: PPUSH
20335: LD_INT 92
20337: PPUSH
20338: LD_INT 11
20340: PPUSH
20341: LD_INT 1
20343: PPUSH
20344: CALL_OW 56
// end ;
20348: END
// every 0 0$45 trigger tick > [ 6 6$00 , 5 5$00 , 4 4$00 , 3 3$30 ] [ Difficulty ] and spotArabianBase do
20349: LD_OWVAR 1
20353: PUSH
20354: LD_INT 12600
20356: PUSH
20357: LD_INT 10500
20359: PUSH
20360: LD_INT 8400
20362: PUSH
20363: LD_INT 7350
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: PUSH
20372: LD_OWVAR 67
20376: ARRAY
20377: GREATER
20378: PUSH
20379: LD_EXP 7
20383: AND
20384: IFFALSE 20449
20386: GO 20388
20388: DISABLE
// begin enable ;
20389: ENABLE
// if Prob ( 100 - ( 10 * Difficulty ) ) and GetListOfCratesInArea ( arBaseArea ) < 12 then
20390: LD_INT 100
20392: PUSH
20393: LD_INT 10
20395: PUSH
20396: LD_OWVAR 67
20400: MUL
20401: MINUS
20402: PPUSH
20403: CALL_OW 13
20407: PUSH
20408: LD_INT 4
20410: PPUSH
20411: CALL_OW 435
20415: PUSH
20416: LD_INT 12
20418: LESS
20419: AND
20420: IFFALSE 20449
// CreateCratesXYR ( rand ( 1 , 5 ) , 218 , 92 , 11 , true ) ;
20422: LD_INT 1
20424: PPUSH
20425: LD_INT 5
20427: PPUSH
20428: CALL_OW 12
20432: PPUSH
20433: LD_INT 218
20435: PPUSH
20436: LD_INT 92
20438: PPUSH
20439: LD_INT 11
20441: PPUSH
20442: LD_INT 1
20444: PPUSH
20445: CALL_OW 56
// end ;
20449: END
// every 0 0$55 trigger IsOk ( amBase ) do
20450: LD_INT 2
20452: PPUSH
20453: CALL_OW 302
20457: IFFALSE 20497
20459: GO 20461
20461: DISABLE
// begin enable ;
20462: ENABLE
// if GetListOfCratesInArea ( amCratesArea ) < 3 then
20463: LD_INT 13
20465: PPUSH
20466: CALL_OW 435
20470: PUSH
20471: LD_INT 3
20473: LESS
20474: IFFALSE 20497
// CreateCratesArea ( rand ( 1 , 5 ) , amCratesArea , true ) ;
20476: LD_INT 1
20478: PPUSH
20479: LD_INT 5
20481: PPUSH
20482: CALL_OW 12
20486: PPUSH
20487: LD_INT 13
20489: PPUSH
20490: LD_INT 1
20492: PPUSH
20493: CALL_OW 55
// end ;
20497: END
// every 1 1$05 trigger IsOk ( legBase ) do
20498: LD_INT 38
20500: PPUSH
20501: CALL_OW 302
20505: IFFALSE 20545
20507: GO 20509
20509: DISABLE
// begin enable ;
20510: ENABLE
// if GetListOfCratesInArea ( legCratesArea ) < 3 then
20511: LD_INT 14
20513: PPUSH
20514: CALL_OW 435
20518: PUSH
20519: LD_INT 3
20521: LESS
20522: IFFALSE 20545
// CreateCratesArea ( rand ( 1 , 5 ) , legCratesArea , true ) ;
20524: LD_INT 1
20526: PPUSH
20527: LD_INT 5
20529: PPUSH
20530: CALL_OW 12
20534: PPUSH
20535: LD_INT 14
20537: PPUSH
20538: LD_INT 1
20540: PPUSH
20541: CALL_OW 55
// end ; end_of_file
20545: END
// every 0 0$1 trigger gameActive and GetClass ( Omar ) <> class_desert_warior and spotArabianBase and IsOk ( arBase ) do
20546: LD_EXP 19
20550: PUSH
20551: LD_EXP 24
20555: PPUSH
20556: CALL_OW 257
20560: PUSH
20561: LD_INT 11
20563: NONEQUAL
20564: AND
20565: PUSH
20566: LD_EXP 7
20570: AND
20571: PUSH
20572: LD_INT 85
20574: PPUSH
20575: CALL_OW 302
20579: AND
20580: IFFALSE 20600
20582: GO 20584
20584: DISABLE
// begin Query ( QSheik ) ;
20585: LD_STRING QSheik
20587: PPUSH
20588: CALL_OW 97
// omarCanChangeClass := true ;
20592: LD_ADDR_EXP 20
20596: PUSH
20597: LD_INT 1
20599: ST_TO_ADDR
// end ;
20600: END
// every 0 0$3 trigger omarCanChangeClass and GetClass ( Omar ) <> class_desert_warior and IsInUnit ( Omar ) = arBase do
20601: LD_EXP 20
20605: PUSH
20606: LD_EXP 24
20610: PPUSH
20611: CALL_OW 257
20615: PUSH
20616: LD_INT 11
20618: NONEQUAL
20619: AND
20620: PUSH
20621: LD_EXP 24
20625: PPUSH
20626: CALL_OW 310
20630: PUSH
20631: LD_INT 85
20633: EQUAL
20634: AND
20635: IFFALSE 20666
20637: GO 20639
20639: DISABLE
// begin enable ;
20640: ENABLE
// if Query ( QChangeClass ) = 1 then
20641: LD_STRING QChangeClass
20643: PPUSH
20644: CALL_OW 97
20648: PUSH
20649: LD_INT 1
20651: EQUAL
20652: IFFALSE 20666
// SetClass ( Omar , class_desert_warior ) ;
20654: LD_EXP 24
20658: PPUSH
20659: LD_INT 11
20661: PPUSH
20662: CALL_OW 336
// end ; end_of_file
20666: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
20667: LD_INT 0
20669: PPUSH
20670: PPUSH
// if exist_mode then
20671: LD_VAR 0 2
20675: IFFALSE 20721
// begin unit := CreateCharacter ( prefix & ident ) ;
20677: LD_ADDR_VAR 0 5
20681: PUSH
20682: LD_VAR 0 3
20686: PUSH
20687: LD_VAR 0 1
20691: STR
20692: PPUSH
20693: CALL_OW 34
20697: ST_TO_ADDR
// if unit then
20698: LD_VAR 0 5
20702: IFFALSE 20719
// DeleteCharacters ( prefix & ident ) ;
20704: LD_VAR 0 3
20708: PUSH
20709: LD_VAR 0 1
20713: STR
20714: PPUSH
20715: CALL_OW 40
// end else
20719: GO 20736
// unit := NewCharacter ( ident ) ;
20721: LD_ADDR_VAR 0 5
20725: PUSH
20726: LD_VAR 0 1
20730: PPUSH
20731: CALL_OW 25
20735: ST_TO_ADDR
// result := unit ;
20736: LD_ADDR_VAR 0 4
20740: PUSH
20741: LD_VAR 0 5
20745: ST_TO_ADDR
// end ;
20746: LD_VAR 0 4
20750: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
20751: LD_INT 0
20753: PPUSH
20754: PPUSH
// if not side or not nation then
20755: LD_VAR 0 1
20759: NOT
20760: PUSH
20761: LD_VAR 0 2
20765: NOT
20766: OR
20767: IFFALSE 20771
// exit ;
20769: GO 21539
// case nation of nation_american :
20771: LD_VAR 0 2
20775: PUSH
20776: LD_INT 1
20778: DOUBLE
20779: EQUAL
20780: IFTRUE 20784
20782: GO 20998
20784: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
20785: LD_ADDR_VAR 0 4
20789: PUSH
20790: LD_INT 35
20792: PUSH
20793: LD_INT 45
20795: PUSH
20796: LD_INT 46
20798: PUSH
20799: LD_INT 47
20801: PUSH
20802: LD_INT 82
20804: PUSH
20805: LD_INT 83
20807: PUSH
20808: LD_INT 84
20810: PUSH
20811: LD_INT 85
20813: PUSH
20814: LD_INT 86
20816: PUSH
20817: LD_INT 1
20819: PUSH
20820: LD_INT 2
20822: PUSH
20823: LD_INT 6
20825: PUSH
20826: LD_INT 15
20828: PUSH
20829: LD_INT 16
20831: PUSH
20832: LD_INT 7
20834: PUSH
20835: LD_INT 12
20837: PUSH
20838: LD_INT 13
20840: PUSH
20841: LD_INT 10
20843: PUSH
20844: LD_INT 14
20846: PUSH
20847: LD_INT 20
20849: PUSH
20850: LD_INT 21
20852: PUSH
20853: LD_INT 22
20855: PUSH
20856: LD_INT 25
20858: PUSH
20859: LD_INT 32
20861: PUSH
20862: LD_INT 27
20864: PUSH
20865: LD_INT 36
20867: PUSH
20868: LD_INT 69
20870: PUSH
20871: LD_INT 39
20873: PUSH
20874: LD_INT 34
20876: PUSH
20877: LD_INT 40
20879: PUSH
20880: LD_INT 48
20882: PUSH
20883: LD_INT 49
20885: PUSH
20886: LD_INT 50
20888: PUSH
20889: LD_INT 51
20891: PUSH
20892: LD_INT 52
20894: PUSH
20895: LD_INT 53
20897: PUSH
20898: LD_INT 54
20900: PUSH
20901: LD_INT 55
20903: PUSH
20904: LD_INT 56
20906: PUSH
20907: LD_INT 57
20909: PUSH
20910: LD_INT 58
20912: PUSH
20913: LD_INT 59
20915: PUSH
20916: LD_INT 60
20918: PUSH
20919: LD_INT 61
20921: PUSH
20922: LD_INT 62
20924: PUSH
20925: LD_INT 80
20927: PUSH
20928: LD_INT 82
20930: PUSH
20931: LD_INT 83
20933: PUSH
20934: LD_INT 84
20936: PUSH
20937: LD_INT 85
20939: PUSH
20940: LD_INT 86
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: ST_TO_ADDR
20996: GO 21463
20998: LD_INT 2
21000: DOUBLE
21001: EQUAL
21002: IFTRUE 21006
21004: GO 21232
21006: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
21007: LD_ADDR_VAR 0 4
21011: PUSH
21012: LD_INT 35
21014: PUSH
21015: LD_INT 45
21017: PUSH
21018: LD_INT 46
21020: PUSH
21021: LD_INT 47
21023: PUSH
21024: LD_INT 82
21026: PUSH
21027: LD_INT 83
21029: PUSH
21030: LD_INT 84
21032: PUSH
21033: LD_INT 85
21035: PUSH
21036: LD_INT 87
21038: PUSH
21039: LD_INT 70
21041: PUSH
21042: LD_INT 1
21044: PUSH
21045: LD_INT 11
21047: PUSH
21048: LD_INT 3
21050: PUSH
21051: LD_INT 4
21053: PUSH
21054: LD_INT 5
21056: PUSH
21057: LD_INT 6
21059: PUSH
21060: LD_INT 15
21062: PUSH
21063: LD_INT 18
21065: PUSH
21066: LD_INT 7
21068: PUSH
21069: LD_INT 17
21071: PUSH
21072: LD_INT 8
21074: PUSH
21075: LD_INT 20
21077: PUSH
21078: LD_INT 21
21080: PUSH
21081: LD_INT 22
21083: PUSH
21084: LD_INT 72
21086: PUSH
21087: LD_INT 26
21089: PUSH
21090: LD_INT 69
21092: PUSH
21093: LD_INT 39
21095: PUSH
21096: LD_INT 40
21098: PUSH
21099: LD_INT 41
21101: PUSH
21102: LD_INT 42
21104: PUSH
21105: LD_INT 43
21107: PUSH
21108: LD_INT 48
21110: PUSH
21111: LD_INT 49
21113: PUSH
21114: LD_INT 50
21116: PUSH
21117: LD_INT 51
21119: PUSH
21120: LD_INT 52
21122: PUSH
21123: LD_INT 53
21125: PUSH
21126: LD_INT 54
21128: PUSH
21129: LD_INT 55
21131: PUSH
21132: LD_INT 56
21134: PUSH
21135: LD_INT 60
21137: PUSH
21138: LD_INT 61
21140: PUSH
21141: LD_INT 62
21143: PUSH
21144: LD_INT 66
21146: PUSH
21147: LD_INT 67
21149: PUSH
21150: LD_INT 68
21152: PUSH
21153: LD_INT 81
21155: PUSH
21156: LD_INT 82
21158: PUSH
21159: LD_INT 83
21161: PUSH
21162: LD_INT 84
21164: PUSH
21165: LD_INT 85
21167: PUSH
21168: LD_INT 87
21170: PUSH
21171: LD_INT 88
21173: PUSH
21174: EMPTY
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: ST_TO_ADDR
21230: GO 21463
21232: LD_INT 3
21234: DOUBLE
21235: EQUAL
21236: IFTRUE 21240
21238: GO 21462
21240: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
21241: LD_ADDR_VAR 0 4
21245: PUSH
21246: LD_INT 46
21248: PUSH
21249: LD_INT 47
21251: PUSH
21252: LD_INT 1
21254: PUSH
21255: LD_INT 2
21257: PUSH
21258: LD_INT 82
21260: PUSH
21261: LD_INT 83
21263: PUSH
21264: LD_INT 84
21266: PUSH
21267: LD_INT 85
21269: PUSH
21270: LD_INT 86
21272: PUSH
21273: LD_INT 11
21275: PUSH
21276: LD_INT 9
21278: PUSH
21279: LD_INT 20
21281: PUSH
21282: LD_INT 19
21284: PUSH
21285: LD_INT 21
21287: PUSH
21288: LD_INT 24
21290: PUSH
21291: LD_INT 22
21293: PUSH
21294: LD_INT 25
21296: PUSH
21297: LD_INT 28
21299: PUSH
21300: LD_INT 29
21302: PUSH
21303: LD_INT 30
21305: PUSH
21306: LD_INT 31
21308: PUSH
21309: LD_INT 37
21311: PUSH
21312: LD_INT 38
21314: PUSH
21315: LD_INT 32
21317: PUSH
21318: LD_INT 27
21320: PUSH
21321: LD_INT 33
21323: PUSH
21324: LD_INT 69
21326: PUSH
21327: LD_INT 39
21329: PUSH
21330: LD_INT 34
21332: PUSH
21333: LD_INT 40
21335: PUSH
21336: LD_INT 71
21338: PUSH
21339: LD_INT 23
21341: PUSH
21342: LD_INT 44
21344: PUSH
21345: LD_INT 48
21347: PUSH
21348: LD_INT 49
21350: PUSH
21351: LD_INT 50
21353: PUSH
21354: LD_INT 51
21356: PUSH
21357: LD_INT 52
21359: PUSH
21360: LD_INT 53
21362: PUSH
21363: LD_INT 54
21365: PUSH
21366: LD_INT 55
21368: PUSH
21369: LD_INT 56
21371: PUSH
21372: LD_INT 57
21374: PUSH
21375: LD_INT 58
21377: PUSH
21378: LD_INT 59
21380: PUSH
21381: LD_INT 63
21383: PUSH
21384: LD_INT 64
21386: PUSH
21387: LD_INT 65
21389: PUSH
21390: LD_INT 82
21392: PUSH
21393: LD_INT 83
21395: PUSH
21396: LD_INT 84
21398: PUSH
21399: LD_INT 85
21401: PUSH
21402: LD_INT 86
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: ST_TO_ADDR
21460: GO 21463
21462: POP
// if state > - 1 and state < 3 then
21463: LD_VAR 0 3
21467: PUSH
21468: LD_INT 1
21470: NEG
21471: GREATER
21472: PUSH
21473: LD_VAR 0 3
21477: PUSH
21478: LD_INT 3
21480: LESS
21481: AND
21482: IFFALSE 21539
// for i in result do
21484: LD_ADDR_VAR 0 5
21488: PUSH
21489: LD_VAR 0 4
21493: PUSH
21494: FOR_IN
21495: IFFALSE 21537
// if GetTech ( i , side ) <> state then
21497: LD_VAR 0 5
21501: PPUSH
21502: LD_VAR 0 1
21506: PPUSH
21507: CALL_OW 321
21511: PUSH
21512: LD_VAR 0 3
21516: NONEQUAL
21517: IFFALSE 21535
// result := result diff i ;
21519: LD_ADDR_VAR 0 4
21523: PUSH
21524: LD_VAR 0 4
21528: PUSH
21529: LD_VAR 0 5
21533: DIFF
21534: ST_TO_ADDR
21535: GO 21494
21537: POP
21538: POP
// end ;
21539: LD_VAR 0 4
21543: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
21544: LD_INT 0
21546: PPUSH
21547: PPUSH
21548: PPUSH
// result := true ;
21549: LD_ADDR_VAR 0 3
21553: PUSH
21554: LD_INT 1
21556: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
21557: LD_ADDR_VAR 0 5
21561: PUSH
21562: LD_VAR 0 2
21566: PPUSH
21567: CALL_OW 480
21571: ST_TO_ADDR
// if not tmp then
21572: LD_VAR 0 5
21576: NOT
21577: IFFALSE 21581
// exit ;
21579: GO 21630
// for i in tmp do
21581: LD_ADDR_VAR 0 4
21585: PUSH
21586: LD_VAR 0 5
21590: PUSH
21591: FOR_IN
21592: IFFALSE 21628
// if GetTech ( i , side ) <> state_researched then
21594: LD_VAR 0 4
21598: PPUSH
21599: LD_VAR 0 1
21603: PPUSH
21604: CALL_OW 321
21608: PUSH
21609: LD_INT 2
21611: NONEQUAL
21612: IFFALSE 21626
// begin result := false ;
21614: LD_ADDR_VAR 0 3
21618: PUSH
21619: LD_INT 0
21621: ST_TO_ADDR
// exit ;
21622: POP
21623: POP
21624: GO 21630
// end ;
21626: GO 21591
21628: POP
21629: POP
// end ;
21630: LD_VAR 0 3
21634: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
21635: LD_INT 0
21637: PPUSH
21638: PPUSH
21639: PPUSH
21640: PPUSH
21641: PPUSH
21642: PPUSH
21643: PPUSH
21644: PPUSH
21645: PPUSH
21646: PPUSH
21647: PPUSH
21648: PPUSH
21649: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
21650: LD_VAR 0 1
21654: NOT
21655: PUSH
21656: LD_VAR 0 1
21660: PPUSH
21661: CALL_OW 257
21665: PUSH
21666: LD_INT 9
21668: NONEQUAL
21669: OR
21670: IFFALSE 21674
// exit ;
21672: GO 22247
// side := GetSide ( unit ) ;
21674: LD_ADDR_VAR 0 9
21678: PUSH
21679: LD_VAR 0 1
21683: PPUSH
21684: CALL_OW 255
21688: ST_TO_ADDR
// tech_space := tech_spacanom ;
21689: LD_ADDR_VAR 0 12
21693: PUSH
21694: LD_INT 29
21696: ST_TO_ADDR
// tech_time := tech_taurad ;
21697: LD_ADDR_VAR 0 13
21701: PUSH
21702: LD_INT 28
21704: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
21705: LD_ADDR_VAR 0 11
21709: PUSH
21710: LD_VAR 0 1
21714: PPUSH
21715: CALL_OW 310
21719: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
21720: LD_VAR 0 11
21724: PPUSH
21725: CALL_OW 247
21729: PUSH
21730: LD_INT 2
21732: EQUAL
21733: IFFALSE 21737
// exit ;
21735: GO 22247
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21737: LD_ADDR_VAR 0 8
21741: PUSH
21742: LD_INT 81
21744: PUSH
21745: LD_VAR 0 9
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: PUSH
21754: LD_INT 3
21756: PUSH
21757: LD_INT 21
21759: PUSH
21760: LD_INT 3
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: PPUSH
21775: CALL_OW 69
21779: ST_TO_ADDR
// if not tmp then
21780: LD_VAR 0 8
21784: NOT
21785: IFFALSE 21789
// exit ;
21787: GO 22247
// if in_unit then
21789: LD_VAR 0 11
21793: IFFALSE 21817
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
21795: LD_ADDR_VAR 0 10
21799: PUSH
21800: LD_VAR 0 8
21804: PPUSH
21805: LD_VAR 0 11
21809: PPUSH
21810: CALL_OW 74
21814: ST_TO_ADDR
21815: GO 21837
// enemy := NearestUnitToUnit ( tmp , unit ) ;
21817: LD_ADDR_VAR 0 10
21821: PUSH
21822: LD_VAR 0 8
21826: PPUSH
21827: LD_VAR 0 1
21831: PPUSH
21832: CALL_OW 74
21836: ST_TO_ADDR
// if not enemy then
21837: LD_VAR 0 10
21841: NOT
21842: IFFALSE 21846
// exit ;
21844: GO 22247
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
21846: LD_VAR 0 11
21850: PUSH
21851: LD_VAR 0 11
21855: PPUSH
21856: LD_VAR 0 10
21860: PPUSH
21861: CALL_OW 296
21865: PUSH
21866: LD_INT 13
21868: GREATER
21869: AND
21870: PUSH
21871: LD_VAR 0 1
21875: PPUSH
21876: LD_VAR 0 10
21880: PPUSH
21881: CALL_OW 296
21885: PUSH
21886: LD_INT 12
21888: GREATER
21889: OR
21890: IFFALSE 21894
// exit ;
21892: GO 22247
// missile := [ 1 ] ;
21894: LD_ADDR_VAR 0 14
21898: PUSH
21899: LD_INT 1
21901: PUSH
21902: EMPTY
21903: LIST
21904: ST_TO_ADDR
// if Researched ( side , tech_space ) then
21905: LD_VAR 0 9
21909: PPUSH
21910: LD_VAR 0 12
21914: PPUSH
21915: CALL_OW 325
21919: IFFALSE 21948
// missile := Replace ( missile , missile + 1 , 2 ) ;
21921: LD_ADDR_VAR 0 14
21925: PUSH
21926: LD_VAR 0 14
21930: PPUSH
21931: LD_VAR 0 14
21935: PUSH
21936: LD_INT 1
21938: PLUS
21939: PPUSH
21940: LD_INT 2
21942: PPUSH
21943: CALL_OW 1
21947: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
21948: LD_VAR 0 9
21952: PPUSH
21953: LD_VAR 0 13
21957: PPUSH
21958: CALL_OW 325
21962: PUSH
21963: LD_VAR 0 10
21967: PPUSH
21968: CALL_OW 255
21972: PPUSH
21973: LD_VAR 0 13
21977: PPUSH
21978: CALL_OW 325
21982: NOT
21983: AND
21984: IFFALSE 22013
// missile := Replace ( missile , missile + 1 , 3 ) ;
21986: LD_ADDR_VAR 0 14
21990: PUSH
21991: LD_VAR 0 14
21995: PPUSH
21996: LD_VAR 0 14
22000: PUSH
22001: LD_INT 1
22003: PLUS
22004: PPUSH
22005: LD_INT 3
22007: PPUSH
22008: CALL_OW 1
22012: ST_TO_ADDR
// if missile < 2 then
22013: LD_VAR 0 14
22017: PUSH
22018: LD_INT 2
22020: LESS
22021: IFFALSE 22025
// exit ;
22023: GO 22247
// x := GetX ( enemy ) ;
22025: LD_ADDR_VAR 0 4
22029: PUSH
22030: LD_VAR 0 10
22034: PPUSH
22035: CALL_OW 250
22039: ST_TO_ADDR
// y := GetY ( enemy ) ;
22040: LD_ADDR_VAR 0 5
22044: PUSH
22045: LD_VAR 0 10
22049: PPUSH
22050: CALL_OW 251
22054: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22055: LD_ADDR_VAR 0 6
22059: PUSH
22060: LD_VAR 0 4
22064: PUSH
22065: LD_INT 1
22067: NEG
22068: PPUSH
22069: LD_INT 1
22071: PPUSH
22072: CALL_OW 12
22076: PLUS
22077: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22078: LD_ADDR_VAR 0 7
22082: PUSH
22083: LD_VAR 0 5
22087: PUSH
22088: LD_INT 1
22090: NEG
22091: PPUSH
22092: LD_INT 1
22094: PPUSH
22095: CALL_OW 12
22099: PLUS
22100: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22101: LD_VAR 0 6
22105: PPUSH
22106: LD_VAR 0 7
22110: PPUSH
22111: CALL_OW 488
22115: NOT
22116: IFFALSE 22138
// begin _x := x ;
22118: LD_ADDR_VAR 0 6
22122: PUSH
22123: LD_VAR 0 4
22127: ST_TO_ADDR
// _y := y ;
22128: LD_ADDR_VAR 0 7
22132: PUSH
22133: LD_VAR 0 5
22137: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22138: LD_ADDR_VAR 0 3
22142: PUSH
22143: LD_INT 1
22145: PPUSH
22146: LD_VAR 0 14
22150: PPUSH
22151: CALL_OW 12
22155: ST_TO_ADDR
// case i of 1 :
22156: LD_VAR 0 3
22160: PUSH
22161: LD_INT 1
22163: DOUBLE
22164: EQUAL
22165: IFTRUE 22169
22167: GO 22186
22169: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22170: LD_VAR 0 1
22174: PPUSH
22175: LD_VAR 0 10
22179: PPUSH
22180: CALL_OW 115
22184: GO 22247
22186: LD_INT 2
22188: DOUBLE
22189: EQUAL
22190: IFTRUE 22194
22192: GO 22216
22194: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
22195: LD_VAR 0 1
22199: PPUSH
22200: LD_VAR 0 6
22204: PPUSH
22205: LD_VAR 0 7
22209: PPUSH
22210: CALL_OW 153
22214: GO 22247
22216: LD_INT 3
22218: DOUBLE
22219: EQUAL
22220: IFTRUE 22224
22222: GO 22246
22224: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
22225: LD_VAR 0 1
22229: PPUSH
22230: LD_VAR 0 6
22234: PPUSH
22235: LD_VAR 0 7
22239: PPUSH
22240: CALL_OW 154
22244: GO 22247
22246: POP
// end ;
22247: LD_VAR 0 2
22251: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
22252: LD_INT 0
22254: PPUSH
22255: PPUSH
22256: PPUSH
22257: PPUSH
22258: PPUSH
22259: PPUSH
// if not unit or not building then
22260: LD_VAR 0 1
22264: NOT
22265: PUSH
22266: LD_VAR 0 2
22270: NOT
22271: OR
22272: IFFALSE 22276
// exit ;
22274: GO 22434
// x := GetX ( building ) ;
22276: LD_ADDR_VAR 0 5
22280: PUSH
22281: LD_VAR 0 2
22285: PPUSH
22286: CALL_OW 250
22290: ST_TO_ADDR
// y := GetY ( building ) ;
22291: LD_ADDR_VAR 0 6
22295: PUSH
22296: LD_VAR 0 2
22300: PPUSH
22301: CALL_OW 251
22305: ST_TO_ADDR
// for i = 0 to 5 do
22306: LD_ADDR_VAR 0 4
22310: PUSH
22311: DOUBLE
22312: LD_INT 0
22314: DEC
22315: ST_TO_ADDR
22316: LD_INT 5
22318: PUSH
22319: FOR_TO
22320: IFFALSE 22432
// begin _x := ShiftX ( x , i , 3 ) ;
22322: LD_ADDR_VAR 0 7
22326: PUSH
22327: LD_VAR 0 5
22331: PPUSH
22332: LD_VAR 0 4
22336: PPUSH
22337: LD_INT 3
22339: PPUSH
22340: CALL_OW 272
22344: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
22345: LD_ADDR_VAR 0 8
22349: PUSH
22350: LD_VAR 0 6
22354: PPUSH
22355: LD_VAR 0 4
22359: PPUSH
22360: LD_INT 3
22362: PPUSH
22363: CALL_OW 273
22367: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22368: LD_VAR 0 7
22372: PPUSH
22373: LD_VAR 0 8
22377: PPUSH
22378: CALL_OW 488
22382: NOT
22383: IFFALSE 22387
// continue ;
22385: GO 22319
// if HexInfo ( _x , _y ) = 0 then
22387: LD_VAR 0 7
22391: PPUSH
22392: LD_VAR 0 8
22396: PPUSH
22397: CALL_OW 428
22401: PUSH
22402: LD_INT 0
22404: EQUAL
22405: IFFALSE 22430
// begin ComMoveXY ( unit , _x , _y ) ;
22407: LD_VAR 0 1
22411: PPUSH
22412: LD_VAR 0 7
22416: PPUSH
22417: LD_VAR 0 8
22421: PPUSH
22422: CALL_OW 111
// exit ;
22426: POP
22427: POP
22428: GO 22434
// end ; end ;
22430: GO 22319
22432: POP
22433: POP
// end ;
22434: LD_VAR 0 3
22438: RET
// export function ScanBase ( side , base_area ) ; begin
22439: LD_INT 0
22441: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
22442: LD_ADDR_VAR 0 3
22446: PUSH
22447: LD_VAR 0 2
22451: PPUSH
22452: LD_INT 81
22454: PUSH
22455: LD_VAR 0 1
22459: PUSH
22460: EMPTY
22461: LIST
22462: LIST
22463: PPUSH
22464: CALL_OW 70
22468: ST_TO_ADDR
// end ;
22469: LD_VAR 0 3
22473: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22474: LD_INT 0
22476: PPUSH
22477: PPUSH
22478: PPUSH
22479: PPUSH
// result := false ;
22480: LD_ADDR_VAR 0 2
22484: PUSH
22485: LD_INT 0
22487: ST_TO_ADDR
// side := GetSide ( unit ) ;
22488: LD_ADDR_VAR 0 3
22492: PUSH
22493: LD_VAR 0 1
22497: PPUSH
22498: CALL_OW 255
22502: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22503: LD_ADDR_VAR 0 4
22507: PUSH
22508: LD_VAR 0 1
22512: PPUSH
22513: CALL_OW 248
22517: ST_TO_ADDR
// case nat of 1 :
22518: LD_VAR 0 4
22522: PUSH
22523: LD_INT 1
22525: DOUBLE
22526: EQUAL
22527: IFTRUE 22531
22529: GO 22542
22531: POP
// tech := tech_lassight ; 2 :
22532: LD_ADDR_VAR 0 5
22536: PUSH
22537: LD_INT 12
22539: ST_TO_ADDR
22540: GO 22581
22542: LD_INT 2
22544: DOUBLE
22545: EQUAL
22546: IFTRUE 22550
22548: GO 22561
22550: POP
// tech := tech_mortar ; 3 :
22551: LD_ADDR_VAR 0 5
22555: PUSH
22556: LD_INT 41
22558: ST_TO_ADDR
22559: GO 22581
22561: LD_INT 3
22563: DOUBLE
22564: EQUAL
22565: IFTRUE 22569
22567: GO 22580
22569: POP
// tech := tech_bazooka ; end ;
22570: LD_ADDR_VAR 0 5
22574: PUSH
22575: LD_INT 44
22577: ST_TO_ADDR
22578: GO 22581
22580: POP
// if Researched ( side , tech ) then
22581: LD_VAR 0 3
22585: PPUSH
22586: LD_VAR 0 5
22590: PPUSH
22591: CALL_OW 325
22595: IFFALSE 22622
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
22597: LD_ADDR_VAR 0 2
22601: PUSH
22602: LD_INT 5
22604: PUSH
22605: LD_INT 8
22607: PUSH
22608: LD_INT 9
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: LIST
22615: PUSH
22616: LD_VAR 0 4
22620: ARRAY
22621: ST_TO_ADDR
// end ;
22622: LD_VAR 0 2
22626: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
22627: LD_INT 0
22629: PPUSH
22630: PPUSH
22631: PPUSH
// if not mines then
22632: LD_VAR 0 2
22636: NOT
22637: IFFALSE 22641
// exit ;
22639: GO 22785
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22641: LD_ADDR_VAR 0 5
22645: PUSH
22646: LD_INT 81
22648: PUSH
22649: LD_VAR 0 1
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: PUSH
22658: LD_INT 3
22660: PUSH
22661: LD_INT 21
22663: PUSH
22664: LD_INT 3
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: PUSH
22671: EMPTY
22672: LIST
22673: LIST
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PPUSH
22679: CALL_OW 69
22683: ST_TO_ADDR
// for i in mines do
22684: LD_ADDR_VAR 0 4
22688: PUSH
22689: LD_VAR 0 2
22693: PUSH
22694: FOR_IN
22695: IFFALSE 22783
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
22697: LD_VAR 0 4
22701: PUSH
22702: LD_INT 1
22704: ARRAY
22705: PPUSH
22706: LD_VAR 0 4
22710: PUSH
22711: LD_INT 2
22713: ARRAY
22714: PPUSH
22715: CALL_OW 458
22719: NOT
22720: IFFALSE 22724
// continue ;
22722: GO 22694
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
22724: LD_VAR 0 4
22728: PUSH
22729: LD_INT 1
22731: ARRAY
22732: PPUSH
22733: LD_VAR 0 4
22737: PUSH
22738: LD_INT 2
22740: ARRAY
22741: PPUSH
22742: CALL_OW 428
22746: PUSH
22747: LD_VAR 0 5
22751: IN
22752: IFFALSE 22781
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
22754: LD_VAR 0 4
22758: PUSH
22759: LD_INT 1
22761: ARRAY
22762: PPUSH
22763: LD_VAR 0 4
22767: PUSH
22768: LD_INT 2
22770: ARRAY
22771: PPUSH
22772: LD_VAR 0 1
22776: PPUSH
22777: CALL_OW 456
// end ;
22781: GO 22694
22783: POP
22784: POP
// end ;
22785: LD_VAR 0 3
22789: RET
// export function Count ( array ) ; begin
22790: LD_INT 0
22792: PPUSH
// result := array + 0 ;
22793: LD_ADDR_VAR 0 2
22797: PUSH
22798: LD_VAR 0 1
22802: PUSH
22803: LD_INT 0
22805: PLUS
22806: ST_TO_ADDR
// end ;
22807: LD_VAR 0 2
22811: RET
// export function IsEmpty ( building ) ; begin
22812: LD_INT 0
22814: PPUSH
// if not building then
22815: LD_VAR 0 1
22819: NOT
22820: IFFALSE 22824
// exit ;
22822: GO 22867
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
22824: LD_ADDR_VAR 0 2
22828: PUSH
22829: LD_VAR 0 1
22833: PUSH
22834: LD_INT 22
22836: PUSH
22837: LD_VAR 0 1
22841: PPUSH
22842: CALL_OW 255
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: PUSH
22851: LD_INT 58
22853: PUSH
22854: EMPTY
22855: LIST
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: PPUSH
22861: CALL_OW 69
22865: IN
22866: ST_TO_ADDR
// end ;
22867: LD_VAR 0 2
22871: RET
// export function IsNotFull ( building ) ; var places ; begin
22872: LD_INT 0
22874: PPUSH
22875: PPUSH
// if not building then
22876: LD_VAR 0 1
22880: NOT
22881: IFFALSE 22885
// exit ;
22883: GO 22913
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
22885: LD_ADDR_VAR 0 2
22889: PUSH
22890: LD_VAR 0 1
22894: PPUSH
22895: LD_INT 3
22897: PUSH
22898: LD_INT 62
22900: PUSH
22901: EMPTY
22902: LIST
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: PPUSH
22908: CALL_OW 72
22912: ST_TO_ADDR
// end ;
22913: LD_VAR 0 2
22917: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
22918: LD_INT 0
22920: PPUSH
22921: PPUSH
22922: PPUSH
22923: PPUSH
// tmp := [ ] ;
22924: LD_ADDR_VAR 0 3
22928: PUSH
22929: EMPTY
22930: ST_TO_ADDR
// list := [ ] ;
22931: LD_ADDR_VAR 0 5
22935: PUSH
22936: EMPTY
22937: ST_TO_ADDR
// for i = 16 to 25 do
22938: LD_ADDR_VAR 0 4
22942: PUSH
22943: DOUBLE
22944: LD_INT 16
22946: DEC
22947: ST_TO_ADDR
22948: LD_INT 25
22950: PUSH
22951: FOR_TO
22952: IFFALSE 23025
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
22954: LD_ADDR_VAR 0 3
22958: PUSH
22959: LD_VAR 0 3
22963: PUSH
22964: LD_INT 22
22966: PUSH
22967: LD_VAR 0 1
22971: PPUSH
22972: CALL_OW 255
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: PUSH
22981: LD_INT 91
22983: PUSH
22984: LD_VAR 0 1
22988: PUSH
22989: LD_INT 6
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: LIST
22996: PUSH
22997: LD_INT 30
22999: PUSH
23000: LD_VAR 0 4
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: LIST
23013: PUSH
23014: EMPTY
23015: LIST
23016: PPUSH
23017: CALL_OW 69
23021: ADD
23022: ST_TO_ADDR
23023: GO 22951
23025: POP
23026: POP
// for i = 1 to tmp do
23027: LD_ADDR_VAR 0 4
23031: PUSH
23032: DOUBLE
23033: LD_INT 1
23035: DEC
23036: ST_TO_ADDR
23037: LD_VAR 0 3
23041: PUSH
23042: FOR_TO
23043: IFFALSE 23131
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23045: LD_ADDR_VAR 0 5
23049: PUSH
23050: LD_VAR 0 5
23054: PUSH
23055: LD_VAR 0 3
23059: PUSH
23060: LD_VAR 0 4
23064: ARRAY
23065: PPUSH
23066: CALL_OW 266
23070: PUSH
23071: LD_VAR 0 3
23075: PUSH
23076: LD_VAR 0 4
23080: ARRAY
23081: PPUSH
23082: CALL_OW 250
23086: PUSH
23087: LD_VAR 0 3
23091: PUSH
23092: LD_VAR 0 4
23096: ARRAY
23097: PPUSH
23098: CALL_OW 251
23102: PUSH
23103: LD_VAR 0 3
23107: PUSH
23108: LD_VAR 0 4
23112: ARRAY
23113: PPUSH
23114: CALL_OW 254
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: PUSH
23125: EMPTY
23126: LIST
23127: ADD
23128: ST_TO_ADDR
23129: GO 23042
23131: POP
23132: POP
// result := list ;
23133: LD_ADDR_VAR 0 2
23137: PUSH
23138: LD_VAR 0 5
23142: ST_TO_ADDR
// end ;
23143: LD_VAR 0 2
23147: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23148: LD_INT 0
23150: PPUSH
23151: PPUSH
23152: PPUSH
23153: PPUSH
23154: PPUSH
23155: PPUSH
23156: PPUSH
// if not factory then
23157: LD_VAR 0 1
23161: NOT
23162: IFFALSE 23166
// exit ;
23164: GO 23759
// if control = control_apeman then
23166: LD_VAR 0 4
23170: PUSH
23171: LD_INT 5
23173: EQUAL
23174: IFFALSE 23283
// begin tmp := UnitsInside ( factory ) ;
23176: LD_ADDR_VAR 0 8
23180: PUSH
23181: LD_VAR 0 1
23185: PPUSH
23186: CALL_OW 313
23190: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23191: LD_VAR 0 8
23195: PPUSH
23196: LD_INT 25
23198: PUSH
23199: LD_INT 12
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: PPUSH
23206: CALL_OW 72
23210: NOT
23211: IFFALSE 23221
// control := control_manual ;
23213: LD_ADDR_VAR 0 4
23217: PUSH
23218: LD_INT 1
23220: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23221: LD_ADDR_VAR 0 8
23225: PUSH
23226: LD_VAR 0 1
23230: PPUSH
23231: CALL 22918 0 1
23235: ST_TO_ADDR
// if tmp then
23236: LD_VAR 0 8
23240: IFFALSE 23283
// begin for i in tmp do
23242: LD_ADDR_VAR 0 7
23246: PUSH
23247: LD_VAR 0 8
23251: PUSH
23252: FOR_IN
23253: IFFALSE 23281
// if i [ 1 ] = b_ext_radio then
23255: LD_VAR 0 7
23259: PUSH
23260: LD_INT 1
23262: ARRAY
23263: PUSH
23264: LD_INT 22
23266: EQUAL
23267: IFFALSE 23279
// begin control := control_remote ;
23269: LD_ADDR_VAR 0 4
23273: PUSH
23274: LD_INT 2
23276: ST_TO_ADDR
// break ;
23277: GO 23281
// end ;
23279: GO 23252
23281: POP
23282: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23283: LD_VAR 0 1
23287: PPUSH
23288: LD_VAR 0 2
23292: PPUSH
23293: LD_VAR 0 3
23297: PPUSH
23298: LD_VAR 0 4
23302: PPUSH
23303: LD_VAR 0 5
23307: PPUSH
23308: CALL_OW 448
23312: IFFALSE 23347
// begin result := [ chassis , engine , control , weapon ] ;
23314: LD_ADDR_VAR 0 6
23318: PUSH
23319: LD_VAR 0 2
23323: PUSH
23324: LD_VAR 0 3
23328: PUSH
23329: LD_VAR 0 4
23333: PUSH
23334: LD_VAR 0 5
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: ST_TO_ADDR
// exit ;
23345: GO 23759
// end ; _chassis := AvailableChassisList ( factory ) ;
23347: LD_ADDR_VAR 0 9
23351: PUSH
23352: LD_VAR 0 1
23356: PPUSH
23357: CALL_OW 475
23361: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23362: LD_ADDR_VAR 0 11
23366: PUSH
23367: LD_VAR 0 1
23371: PPUSH
23372: CALL_OW 476
23376: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23377: LD_ADDR_VAR 0 12
23381: PUSH
23382: LD_VAR 0 1
23386: PPUSH
23387: CALL_OW 477
23391: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23392: LD_ADDR_VAR 0 10
23396: PUSH
23397: LD_VAR 0 1
23401: PPUSH
23402: CALL_OW 478
23406: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
23407: LD_VAR 0 9
23411: NOT
23412: PUSH
23413: LD_VAR 0 11
23417: NOT
23418: OR
23419: PUSH
23420: LD_VAR 0 12
23424: NOT
23425: OR
23426: PUSH
23427: LD_VAR 0 10
23431: NOT
23432: OR
23433: IFFALSE 23468
// begin result := [ chassis , engine , control , weapon ] ;
23435: LD_ADDR_VAR 0 6
23439: PUSH
23440: LD_VAR 0 2
23444: PUSH
23445: LD_VAR 0 3
23449: PUSH
23450: LD_VAR 0 4
23454: PUSH
23455: LD_VAR 0 5
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: ST_TO_ADDR
// exit ;
23466: GO 23759
// end ; if not chassis in _chassis then
23468: LD_VAR 0 2
23472: PUSH
23473: LD_VAR 0 9
23477: IN
23478: NOT
23479: IFFALSE 23505
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23481: LD_ADDR_VAR 0 2
23485: PUSH
23486: LD_VAR 0 9
23490: PUSH
23491: LD_INT 1
23493: PPUSH
23494: LD_VAR 0 9
23498: PPUSH
23499: CALL_OW 12
23503: ARRAY
23504: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23505: LD_VAR 0 2
23509: PPUSH
23510: LD_VAR 0 3
23514: PPUSH
23515: CALL 23764 0 2
23519: NOT
23520: IFFALSE 23579
// repeat engine := _engine [ 1 ] ;
23522: LD_ADDR_VAR 0 3
23526: PUSH
23527: LD_VAR 0 11
23531: PUSH
23532: LD_INT 1
23534: ARRAY
23535: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23536: LD_ADDR_VAR 0 11
23540: PUSH
23541: LD_VAR 0 11
23545: PPUSH
23546: LD_INT 1
23548: PPUSH
23549: CALL_OW 3
23553: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23554: LD_VAR 0 2
23558: PPUSH
23559: LD_VAR 0 3
23563: PPUSH
23564: CALL 23764 0 2
23568: PUSH
23569: LD_VAR 0 11
23573: PUSH
23574: EMPTY
23575: EQUAL
23576: OR
23577: IFFALSE 23522
// if not control in _control then
23579: LD_VAR 0 4
23583: PUSH
23584: LD_VAR 0 12
23588: IN
23589: NOT
23590: IFFALSE 23616
// control := _control [ rand ( 1 , _control ) ] ;
23592: LD_ADDR_VAR 0 4
23596: PUSH
23597: LD_VAR 0 12
23601: PUSH
23602: LD_INT 1
23604: PPUSH
23605: LD_VAR 0 12
23609: PPUSH
23610: CALL_OW 12
23614: ARRAY
23615: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
23616: LD_VAR 0 2
23620: PPUSH
23621: LD_VAR 0 5
23625: PPUSH
23626: CALL 23984 0 2
23630: NOT
23631: IFFALSE 23690
// repeat weapon := _weapon [ 1 ] ;
23633: LD_ADDR_VAR 0 5
23637: PUSH
23638: LD_VAR 0 10
23642: PUSH
23643: LD_INT 1
23645: ARRAY
23646: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
23647: LD_ADDR_VAR 0 10
23651: PUSH
23652: LD_VAR 0 10
23656: PPUSH
23657: LD_INT 1
23659: PPUSH
23660: CALL_OW 3
23664: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
23665: LD_VAR 0 2
23669: PPUSH
23670: LD_VAR 0 5
23674: PPUSH
23675: CALL 23984 0 2
23679: PUSH
23680: LD_VAR 0 10
23684: PUSH
23685: EMPTY
23686: EQUAL
23687: OR
23688: IFFALSE 23633
// result := [ ] ;
23690: LD_ADDR_VAR 0 6
23694: PUSH
23695: EMPTY
23696: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23697: LD_VAR 0 1
23701: PPUSH
23702: LD_VAR 0 2
23706: PPUSH
23707: LD_VAR 0 3
23711: PPUSH
23712: LD_VAR 0 4
23716: PPUSH
23717: LD_VAR 0 5
23721: PPUSH
23722: CALL_OW 448
23726: IFFALSE 23759
// result := [ chassis , engine , control , weapon ] ;
23728: LD_ADDR_VAR 0 6
23732: PUSH
23733: LD_VAR 0 2
23737: PUSH
23738: LD_VAR 0 3
23742: PUSH
23743: LD_VAR 0 4
23747: PUSH
23748: LD_VAR 0 5
23752: PUSH
23753: EMPTY
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: ST_TO_ADDR
// end ;
23759: LD_VAR 0 6
23763: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
23764: LD_INT 0
23766: PPUSH
// if not chassis or not engine then
23767: LD_VAR 0 1
23771: NOT
23772: PUSH
23773: LD_VAR 0 2
23777: NOT
23778: OR
23779: IFFALSE 23783
// exit ;
23781: GO 23979
// case engine of engine_solar :
23783: LD_VAR 0 2
23787: PUSH
23788: LD_INT 2
23790: DOUBLE
23791: EQUAL
23792: IFTRUE 23796
23794: GO 23834
23796: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
23797: LD_ADDR_VAR 0 3
23801: PUSH
23802: LD_INT 11
23804: PUSH
23805: LD_INT 12
23807: PUSH
23808: LD_INT 13
23810: PUSH
23811: LD_INT 14
23813: PUSH
23814: LD_INT 1
23816: PUSH
23817: LD_INT 2
23819: PUSH
23820: LD_INT 3
23822: PUSH
23823: EMPTY
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: ST_TO_ADDR
23832: GO 23963
23834: LD_INT 1
23836: DOUBLE
23837: EQUAL
23838: IFTRUE 23842
23840: GO 23904
23842: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
23843: LD_ADDR_VAR 0 3
23847: PUSH
23848: LD_INT 11
23850: PUSH
23851: LD_INT 12
23853: PUSH
23854: LD_INT 13
23856: PUSH
23857: LD_INT 14
23859: PUSH
23860: LD_INT 1
23862: PUSH
23863: LD_INT 2
23865: PUSH
23866: LD_INT 3
23868: PUSH
23869: LD_INT 4
23871: PUSH
23872: LD_INT 5
23874: PUSH
23875: LD_INT 21
23877: PUSH
23878: LD_INT 23
23880: PUSH
23881: LD_INT 22
23883: PUSH
23884: LD_INT 24
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: ST_TO_ADDR
23902: GO 23963
23904: LD_INT 3
23906: DOUBLE
23907: EQUAL
23908: IFTRUE 23912
23910: GO 23962
23912: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23913: LD_ADDR_VAR 0 3
23917: PUSH
23918: LD_INT 13
23920: PUSH
23921: LD_INT 14
23923: PUSH
23924: LD_INT 2
23926: PUSH
23927: LD_INT 3
23929: PUSH
23930: LD_INT 4
23932: PUSH
23933: LD_INT 5
23935: PUSH
23936: LD_INT 21
23938: PUSH
23939: LD_INT 22
23941: PUSH
23942: LD_INT 23
23944: PUSH
23945: LD_INT 24
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: ST_TO_ADDR
23960: GO 23963
23962: POP
// result := ( chassis in result ) ;
23963: LD_ADDR_VAR 0 3
23967: PUSH
23968: LD_VAR 0 1
23972: PUSH
23973: LD_VAR 0 3
23977: IN
23978: ST_TO_ADDR
// end ;
23979: LD_VAR 0 3
23983: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
23984: LD_INT 0
23986: PPUSH
// if not chassis or not weapon then
23987: LD_VAR 0 1
23991: NOT
23992: PUSH
23993: LD_VAR 0 2
23997: NOT
23998: OR
23999: IFFALSE 24003
// exit ;
24001: GO 25063
// case weapon of us_machine_gun :
24003: LD_VAR 0 2
24007: PUSH
24008: LD_INT 2
24010: DOUBLE
24011: EQUAL
24012: IFTRUE 24016
24014: GO 24046
24016: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24017: LD_ADDR_VAR 0 3
24021: PUSH
24022: LD_INT 1
24024: PUSH
24025: LD_INT 2
24027: PUSH
24028: LD_INT 3
24030: PUSH
24031: LD_INT 4
24033: PUSH
24034: LD_INT 5
24036: PUSH
24037: EMPTY
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: ST_TO_ADDR
24044: GO 25047
24046: LD_INT 3
24048: DOUBLE
24049: EQUAL
24050: IFTRUE 24054
24052: GO 24084
24054: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24055: LD_ADDR_VAR 0 3
24059: PUSH
24060: LD_INT 1
24062: PUSH
24063: LD_INT 2
24065: PUSH
24066: LD_INT 3
24068: PUSH
24069: LD_INT 4
24071: PUSH
24072: LD_INT 5
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: ST_TO_ADDR
24082: GO 25047
24084: LD_INT 11
24086: DOUBLE
24087: EQUAL
24088: IFTRUE 24092
24090: GO 24122
24092: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24093: LD_ADDR_VAR 0 3
24097: PUSH
24098: LD_INT 1
24100: PUSH
24101: LD_INT 2
24103: PUSH
24104: LD_INT 3
24106: PUSH
24107: LD_INT 4
24109: PUSH
24110: LD_INT 5
24112: PUSH
24113: EMPTY
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: ST_TO_ADDR
24120: GO 25047
24122: LD_INT 4
24124: DOUBLE
24125: EQUAL
24126: IFTRUE 24130
24128: GO 24156
24130: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24131: LD_ADDR_VAR 0 3
24135: PUSH
24136: LD_INT 2
24138: PUSH
24139: LD_INT 3
24141: PUSH
24142: LD_INT 4
24144: PUSH
24145: LD_INT 5
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: ST_TO_ADDR
24154: GO 25047
24156: LD_INT 5
24158: DOUBLE
24159: EQUAL
24160: IFTRUE 24164
24162: GO 24190
24164: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24165: LD_ADDR_VAR 0 3
24169: PUSH
24170: LD_INT 2
24172: PUSH
24173: LD_INT 3
24175: PUSH
24176: LD_INT 4
24178: PUSH
24179: LD_INT 5
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: ST_TO_ADDR
24188: GO 25047
24190: LD_INT 9
24192: DOUBLE
24193: EQUAL
24194: IFTRUE 24198
24196: GO 24224
24198: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24199: LD_ADDR_VAR 0 3
24203: PUSH
24204: LD_INT 2
24206: PUSH
24207: LD_INT 3
24209: PUSH
24210: LD_INT 4
24212: PUSH
24213: LD_INT 5
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: ST_TO_ADDR
24222: GO 25047
24224: LD_INT 7
24226: DOUBLE
24227: EQUAL
24228: IFTRUE 24232
24230: GO 24258
24232: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24233: LD_ADDR_VAR 0 3
24237: PUSH
24238: LD_INT 2
24240: PUSH
24241: LD_INT 3
24243: PUSH
24244: LD_INT 4
24246: PUSH
24247: LD_INT 5
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: ST_TO_ADDR
24256: GO 25047
24258: LD_INT 12
24260: DOUBLE
24261: EQUAL
24262: IFTRUE 24266
24264: GO 24292
24266: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24267: LD_ADDR_VAR 0 3
24271: PUSH
24272: LD_INT 2
24274: PUSH
24275: LD_INT 3
24277: PUSH
24278: LD_INT 4
24280: PUSH
24281: LD_INT 5
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: ST_TO_ADDR
24290: GO 25047
24292: LD_INT 13
24294: DOUBLE
24295: EQUAL
24296: IFTRUE 24300
24298: GO 24326
24300: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24301: LD_ADDR_VAR 0 3
24305: PUSH
24306: LD_INT 2
24308: PUSH
24309: LD_INT 3
24311: PUSH
24312: LD_INT 4
24314: PUSH
24315: LD_INT 5
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: ST_TO_ADDR
24324: GO 25047
24326: LD_INT 14
24328: DOUBLE
24329: EQUAL
24330: IFTRUE 24334
24332: GO 24352
24334: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24335: LD_ADDR_VAR 0 3
24339: PUSH
24340: LD_INT 4
24342: PUSH
24343: LD_INT 5
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: ST_TO_ADDR
24350: GO 25047
24352: LD_INT 6
24354: DOUBLE
24355: EQUAL
24356: IFTRUE 24360
24358: GO 24378
24360: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24361: LD_ADDR_VAR 0 3
24365: PUSH
24366: LD_INT 4
24368: PUSH
24369: LD_INT 5
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: ST_TO_ADDR
24376: GO 25047
24378: LD_INT 10
24380: DOUBLE
24381: EQUAL
24382: IFTRUE 24386
24384: GO 24404
24386: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24387: LD_ADDR_VAR 0 3
24391: PUSH
24392: LD_INT 4
24394: PUSH
24395: LD_INT 5
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: ST_TO_ADDR
24402: GO 25047
24404: LD_INT 22
24406: DOUBLE
24407: EQUAL
24408: IFTRUE 24412
24410: GO 24438
24412: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24413: LD_ADDR_VAR 0 3
24417: PUSH
24418: LD_INT 11
24420: PUSH
24421: LD_INT 12
24423: PUSH
24424: LD_INT 13
24426: PUSH
24427: LD_INT 14
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: ST_TO_ADDR
24436: GO 25047
24438: LD_INT 23
24440: DOUBLE
24441: EQUAL
24442: IFTRUE 24446
24444: GO 24472
24446: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24447: LD_ADDR_VAR 0 3
24451: PUSH
24452: LD_INT 11
24454: PUSH
24455: LD_INT 12
24457: PUSH
24458: LD_INT 13
24460: PUSH
24461: LD_INT 14
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: ST_TO_ADDR
24470: GO 25047
24472: LD_INT 24
24474: DOUBLE
24475: EQUAL
24476: IFTRUE 24480
24478: GO 24506
24480: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24481: LD_ADDR_VAR 0 3
24485: PUSH
24486: LD_INT 11
24488: PUSH
24489: LD_INT 12
24491: PUSH
24492: LD_INT 13
24494: PUSH
24495: LD_INT 14
24497: PUSH
24498: EMPTY
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: ST_TO_ADDR
24504: GO 25047
24506: LD_INT 30
24508: DOUBLE
24509: EQUAL
24510: IFTRUE 24514
24512: GO 24540
24514: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24515: LD_ADDR_VAR 0 3
24519: PUSH
24520: LD_INT 11
24522: PUSH
24523: LD_INT 12
24525: PUSH
24526: LD_INT 13
24528: PUSH
24529: LD_INT 14
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: ST_TO_ADDR
24538: GO 25047
24540: LD_INT 25
24542: DOUBLE
24543: EQUAL
24544: IFTRUE 24548
24546: GO 24566
24548: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24549: LD_ADDR_VAR 0 3
24553: PUSH
24554: LD_INT 13
24556: PUSH
24557: LD_INT 14
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: ST_TO_ADDR
24564: GO 25047
24566: LD_INT 27
24568: DOUBLE
24569: EQUAL
24570: IFTRUE 24574
24572: GO 24592
24574: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
24575: LD_ADDR_VAR 0 3
24579: PUSH
24580: LD_INT 13
24582: PUSH
24583: LD_INT 14
24585: PUSH
24586: EMPTY
24587: LIST
24588: LIST
24589: ST_TO_ADDR
24590: GO 25047
24592: LD_INT 92
24594: DOUBLE
24595: EQUAL
24596: IFTRUE 24600
24598: GO 24626
24600: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
24601: LD_ADDR_VAR 0 3
24605: PUSH
24606: LD_INT 11
24608: PUSH
24609: LD_INT 12
24611: PUSH
24612: LD_INT 13
24614: PUSH
24615: LD_INT 14
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: ST_TO_ADDR
24624: GO 25047
24626: LD_INT 28
24628: DOUBLE
24629: EQUAL
24630: IFTRUE 24634
24632: GO 24652
24634: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
24635: LD_ADDR_VAR 0 3
24639: PUSH
24640: LD_INT 13
24642: PUSH
24643: LD_INT 14
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: ST_TO_ADDR
24650: GO 25047
24652: LD_INT 29
24654: DOUBLE
24655: EQUAL
24656: IFTRUE 24660
24658: GO 24678
24660: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
24661: LD_ADDR_VAR 0 3
24665: PUSH
24666: LD_INT 13
24668: PUSH
24669: LD_INT 14
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: ST_TO_ADDR
24676: GO 25047
24678: LD_INT 31
24680: DOUBLE
24681: EQUAL
24682: IFTRUE 24686
24684: GO 24704
24686: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
24687: LD_ADDR_VAR 0 3
24691: PUSH
24692: LD_INT 13
24694: PUSH
24695: LD_INT 14
24697: PUSH
24698: EMPTY
24699: LIST
24700: LIST
24701: ST_TO_ADDR
24702: GO 25047
24704: LD_INT 26
24706: DOUBLE
24707: EQUAL
24708: IFTRUE 24712
24710: GO 24730
24712: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
24713: LD_ADDR_VAR 0 3
24717: PUSH
24718: LD_INT 13
24720: PUSH
24721: LD_INT 14
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: ST_TO_ADDR
24728: GO 25047
24730: LD_INT 42
24732: DOUBLE
24733: EQUAL
24734: IFTRUE 24738
24736: GO 24764
24738: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
24739: LD_ADDR_VAR 0 3
24743: PUSH
24744: LD_INT 21
24746: PUSH
24747: LD_INT 22
24749: PUSH
24750: LD_INT 23
24752: PUSH
24753: LD_INT 24
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: ST_TO_ADDR
24762: GO 25047
24764: LD_INT 43
24766: DOUBLE
24767: EQUAL
24768: IFTRUE 24772
24770: GO 24798
24772: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
24773: LD_ADDR_VAR 0 3
24777: PUSH
24778: LD_INT 21
24780: PUSH
24781: LD_INT 22
24783: PUSH
24784: LD_INT 23
24786: PUSH
24787: LD_INT 24
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: ST_TO_ADDR
24796: GO 25047
24798: LD_INT 44
24800: DOUBLE
24801: EQUAL
24802: IFTRUE 24806
24804: GO 24832
24806: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24807: LD_ADDR_VAR 0 3
24811: PUSH
24812: LD_INT 21
24814: PUSH
24815: LD_INT 22
24817: PUSH
24818: LD_INT 23
24820: PUSH
24821: LD_INT 24
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: ST_TO_ADDR
24830: GO 25047
24832: LD_INT 45
24834: DOUBLE
24835: EQUAL
24836: IFTRUE 24840
24838: GO 24866
24840: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
24841: LD_ADDR_VAR 0 3
24845: PUSH
24846: LD_INT 21
24848: PUSH
24849: LD_INT 22
24851: PUSH
24852: LD_INT 23
24854: PUSH
24855: LD_INT 24
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: ST_TO_ADDR
24864: GO 25047
24866: LD_INT 49
24868: DOUBLE
24869: EQUAL
24870: IFTRUE 24874
24872: GO 24900
24874: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
24875: LD_ADDR_VAR 0 3
24879: PUSH
24880: LD_INT 21
24882: PUSH
24883: LD_INT 22
24885: PUSH
24886: LD_INT 23
24888: PUSH
24889: LD_INT 24
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: ST_TO_ADDR
24898: GO 25047
24900: LD_INT 51
24902: DOUBLE
24903: EQUAL
24904: IFTRUE 24908
24906: GO 24934
24908: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
24909: LD_ADDR_VAR 0 3
24913: PUSH
24914: LD_INT 21
24916: PUSH
24917: LD_INT 22
24919: PUSH
24920: LD_INT 23
24922: PUSH
24923: LD_INT 24
24925: PUSH
24926: EMPTY
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: ST_TO_ADDR
24932: GO 25047
24934: LD_INT 52
24936: DOUBLE
24937: EQUAL
24938: IFTRUE 24942
24940: GO 24968
24942: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
24943: LD_ADDR_VAR 0 3
24947: PUSH
24948: LD_INT 21
24950: PUSH
24951: LD_INT 22
24953: PUSH
24954: LD_INT 23
24956: PUSH
24957: LD_INT 24
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: ST_TO_ADDR
24966: GO 25047
24968: LD_INT 53
24970: DOUBLE
24971: EQUAL
24972: IFTRUE 24976
24974: GO 24994
24976: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
24977: LD_ADDR_VAR 0 3
24981: PUSH
24982: LD_INT 23
24984: PUSH
24985: LD_INT 24
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: ST_TO_ADDR
24992: GO 25047
24994: LD_INT 46
24996: DOUBLE
24997: EQUAL
24998: IFTRUE 25002
25000: GO 25020
25002: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25003: LD_ADDR_VAR 0 3
25007: PUSH
25008: LD_INT 23
25010: PUSH
25011: LD_INT 24
25013: PUSH
25014: EMPTY
25015: LIST
25016: LIST
25017: ST_TO_ADDR
25018: GO 25047
25020: LD_INT 47
25022: DOUBLE
25023: EQUAL
25024: IFTRUE 25028
25026: GO 25046
25028: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25029: LD_ADDR_VAR 0 3
25033: PUSH
25034: LD_INT 23
25036: PUSH
25037: LD_INT 24
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: ST_TO_ADDR
25044: GO 25047
25046: POP
// result := ( chassis in result ) ;
25047: LD_ADDR_VAR 0 3
25051: PUSH
25052: LD_VAR 0 1
25056: PUSH
25057: LD_VAR 0 3
25061: IN
25062: ST_TO_ADDR
// end ;
25063: LD_VAR 0 3
25067: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25068: LD_INT 0
25070: PPUSH
25071: PPUSH
25072: PPUSH
25073: PPUSH
25074: PPUSH
25075: PPUSH
25076: PPUSH
// result := array ;
25077: LD_ADDR_VAR 0 5
25081: PUSH
25082: LD_VAR 0 1
25086: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25087: LD_VAR 0 1
25091: NOT
25092: PUSH
25093: LD_VAR 0 2
25097: NOT
25098: OR
25099: PUSH
25100: LD_VAR 0 3
25104: NOT
25105: OR
25106: PUSH
25107: LD_VAR 0 2
25111: PUSH
25112: LD_VAR 0 1
25116: GREATER
25117: OR
25118: PUSH
25119: LD_VAR 0 3
25123: PUSH
25124: LD_VAR 0 1
25128: GREATER
25129: OR
25130: IFFALSE 25134
// exit ;
25132: GO 25430
// if direction then
25134: LD_VAR 0 4
25138: IFFALSE 25202
// begin d := 1 ;
25140: LD_ADDR_VAR 0 9
25144: PUSH
25145: LD_INT 1
25147: ST_TO_ADDR
// if i_from > i_to then
25148: LD_VAR 0 2
25152: PUSH
25153: LD_VAR 0 3
25157: GREATER
25158: IFFALSE 25184
// length := ( array - i_from ) + i_to else
25160: LD_ADDR_VAR 0 11
25164: PUSH
25165: LD_VAR 0 1
25169: PUSH
25170: LD_VAR 0 2
25174: MINUS
25175: PUSH
25176: LD_VAR 0 3
25180: PLUS
25181: ST_TO_ADDR
25182: GO 25200
// length := i_to - i_from ;
25184: LD_ADDR_VAR 0 11
25188: PUSH
25189: LD_VAR 0 3
25193: PUSH
25194: LD_VAR 0 2
25198: MINUS
25199: ST_TO_ADDR
// end else
25200: GO 25263
// begin d := - 1 ;
25202: LD_ADDR_VAR 0 9
25206: PUSH
25207: LD_INT 1
25209: NEG
25210: ST_TO_ADDR
// if i_from > i_to then
25211: LD_VAR 0 2
25215: PUSH
25216: LD_VAR 0 3
25220: GREATER
25221: IFFALSE 25241
// length := i_from - i_to else
25223: LD_ADDR_VAR 0 11
25227: PUSH
25228: LD_VAR 0 2
25232: PUSH
25233: LD_VAR 0 3
25237: MINUS
25238: ST_TO_ADDR
25239: GO 25263
// length := ( array - i_to ) + i_from ;
25241: LD_ADDR_VAR 0 11
25245: PUSH
25246: LD_VAR 0 1
25250: PUSH
25251: LD_VAR 0 3
25255: MINUS
25256: PUSH
25257: LD_VAR 0 2
25261: PLUS
25262: ST_TO_ADDR
// end ; if not length then
25263: LD_VAR 0 11
25267: NOT
25268: IFFALSE 25272
// exit ;
25270: GO 25430
// tmp := array ;
25272: LD_ADDR_VAR 0 10
25276: PUSH
25277: LD_VAR 0 1
25281: ST_TO_ADDR
// for i = 1 to length do
25282: LD_ADDR_VAR 0 6
25286: PUSH
25287: DOUBLE
25288: LD_INT 1
25290: DEC
25291: ST_TO_ADDR
25292: LD_VAR 0 11
25296: PUSH
25297: FOR_TO
25298: IFFALSE 25418
// begin for j = 1 to array do
25300: LD_ADDR_VAR 0 7
25304: PUSH
25305: DOUBLE
25306: LD_INT 1
25308: DEC
25309: ST_TO_ADDR
25310: LD_VAR 0 1
25314: PUSH
25315: FOR_TO
25316: IFFALSE 25404
// begin k := j + d ;
25318: LD_ADDR_VAR 0 8
25322: PUSH
25323: LD_VAR 0 7
25327: PUSH
25328: LD_VAR 0 9
25332: PLUS
25333: ST_TO_ADDR
// if k > array then
25334: LD_VAR 0 8
25338: PUSH
25339: LD_VAR 0 1
25343: GREATER
25344: IFFALSE 25354
// k := 1 ;
25346: LD_ADDR_VAR 0 8
25350: PUSH
25351: LD_INT 1
25353: ST_TO_ADDR
// if not k then
25354: LD_VAR 0 8
25358: NOT
25359: IFFALSE 25371
// k := array ;
25361: LD_ADDR_VAR 0 8
25365: PUSH
25366: LD_VAR 0 1
25370: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25371: LD_ADDR_VAR 0 10
25375: PUSH
25376: LD_VAR 0 10
25380: PPUSH
25381: LD_VAR 0 8
25385: PPUSH
25386: LD_VAR 0 1
25390: PUSH
25391: LD_VAR 0 7
25395: ARRAY
25396: PPUSH
25397: CALL_OW 1
25401: ST_TO_ADDR
// end ;
25402: GO 25315
25404: POP
25405: POP
// array := tmp ;
25406: LD_ADDR_VAR 0 1
25410: PUSH
25411: LD_VAR 0 10
25415: ST_TO_ADDR
// end ;
25416: GO 25297
25418: POP
25419: POP
// result := array ;
25420: LD_ADDR_VAR 0 5
25424: PUSH
25425: LD_VAR 0 1
25429: ST_TO_ADDR
// end ;
25430: LD_VAR 0 5
25434: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25435: LD_INT 0
25437: PPUSH
25438: PPUSH
// result := 0 ;
25439: LD_ADDR_VAR 0 3
25443: PUSH
25444: LD_INT 0
25446: ST_TO_ADDR
// if not array or not value in array then
25447: LD_VAR 0 1
25451: NOT
25452: PUSH
25453: LD_VAR 0 2
25457: PUSH
25458: LD_VAR 0 1
25462: IN
25463: NOT
25464: OR
25465: IFFALSE 25469
// exit ;
25467: GO 25523
// for i = 1 to array do
25469: LD_ADDR_VAR 0 4
25473: PUSH
25474: DOUBLE
25475: LD_INT 1
25477: DEC
25478: ST_TO_ADDR
25479: LD_VAR 0 1
25483: PUSH
25484: FOR_TO
25485: IFFALSE 25521
// if value = array [ i ] then
25487: LD_VAR 0 2
25491: PUSH
25492: LD_VAR 0 1
25496: PUSH
25497: LD_VAR 0 4
25501: ARRAY
25502: EQUAL
25503: IFFALSE 25519
// begin result := i ;
25505: LD_ADDR_VAR 0 3
25509: PUSH
25510: LD_VAR 0 4
25514: ST_TO_ADDR
// exit ;
25515: POP
25516: POP
25517: GO 25523
// end ;
25519: GO 25484
25521: POP
25522: POP
// end ;
25523: LD_VAR 0 3
25527: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25528: LD_INT 0
25530: PPUSH
// vc_chassis := chassis ;
25531: LD_ADDR_OWVAR 37
25535: PUSH
25536: LD_VAR 0 1
25540: ST_TO_ADDR
// vc_engine := engine ;
25541: LD_ADDR_OWVAR 39
25545: PUSH
25546: LD_VAR 0 2
25550: ST_TO_ADDR
// vc_control := control ;
25551: LD_ADDR_OWVAR 38
25555: PUSH
25556: LD_VAR 0 3
25560: ST_TO_ADDR
// vc_weapon := weapon ;
25561: LD_ADDR_OWVAR 40
25565: PUSH
25566: LD_VAR 0 4
25570: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25571: LD_ADDR_OWVAR 41
25575: PUSH
25576: LD_VAR 0 5
25580: ST_TO_ADDR
// end ;
25581: LD_VAR 0 6
25585: RET
// export function WantPlant ( unit ) ; var task ; begin
25586: LD_INT 0
25588: PPUSH
25589: PPUSH
// result := false ;
25590: LD_ADDR_VAR 0 2
25594: PUSH
25595: LD_INT 0
25597: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25598: LD_ADDR_VAR 0 3
25602: PUSH
25603: LD_VAR 0 1
25607: PPUSH
25608: CALL_OW 437
25612: ST_TO_ADDR
// if task then
25613: LD_VAR 0 3
25617: IFFALSE 25645
// if task [ 1 ] [ 1 ] = p then
25619: LD_VAR 0 3
25623: PUSH
25624: LD_INT 1
25626: ARRAY
25627: PUSH
25628: LD_INT 1
25630: ARRAY
25631: PUSH
25632: LD_STRING p
25634: EQUAL
25635: IFFALSE 25645
// result := true ;
25637: LD_ADDR_VAR 0 2
25641: PUSH
25642: LD_INT 1
25644: ST_TO_ADDR
// end ;
25645: LD_VAR 0 2
25649: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
25650: LD_INT 0
25652: PPUSH
25653: PPUSH
25654: PPUSH
25655: PPUSH
// if pos < 1 then
25656: LD_VAR 0 2
25660: PUSH
25661: LD_INT 1
25663: LESS
25664: IFFALSE 25668
// exit ;
25666: GO 25971
// if pos = 1 then
25668: LD_VAR 0 2
25672: PUSH
25673: LD_INT 1
25675: EQUAL
25676: IFFALSE 25709
// result := Replace ( arr , pos [ 1 ] , value ) else
25678: LD_ADDR_VAR 0 4
25682: PUSH
25683: LD_VAR 0 1
25687: PPUSH
25688: LD_VAR 0 2
25692: PUSH
25693: LD_INT 1
25695: ARRAY
25696: PPUSH
25697: LD_VAR 0 3
25701: PPUSH
25702: CALL_OW 1
25706: ST_TO_ADDR
25707: GO 25971
// begin tmp := arr ;
25709: LD_ADDR_VAR 0 6
25713: PUSH
25714: LD_VAR 0 1
25718: ST_TO_ADDR
// s_arr := [ tmp ] ;
25719: LD_ADDR_VAR 0 7
25723: PUSH
25724: LD_VAR 0 6
25728: PUSH
25729: EMPTY
25730: LIST
25731: ST_TO_ADDR
// for i = 1 to pos - 1 do
25732: LD_ADDR_VAR 0 5
25736: PUSH
25737: DOUBLE
25738: LD_INT 1
25740: DEC
25741: ST_TO_ADDR
25742: LD_VAR 0 2
25746: PUSH
25747: LD_INT 1
25749: MINUS
25750: PUSH
25751: FOR_TO
25752: IFFALSE 25797
// begin tmp := tmp [ pos [ i ] ] ;
25754: LD_ADDR_VAR 0 6
25758: PUSH
25759: LD_VAR 0 6
25763: PUSH
25764: LD_VAR 0 2
25768: PUSH
25769: LD_VAR 0 5
25773: ARRAY
25774: ARRAY
25775: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
25776: LD_ADDR_VAR 0 7
25780: PUSH
25781: LD_VAR 0 7
25785: PUSH
25786: LD_VAR 0 6
25790: PUSH
25791: EMPTY
25792: LIST
25793: ADD
25794: ST_TO_ADDR
// end ;
25795: GO 25751
25797: POP
25798: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25799: LD_ADDR_VAR 0 6
25803: PUSH
25804: LD_VAR 0 6
25808: PPUSH
25809: LD_VAR 0 2
25813: PUSH
25814: LD_VAR 0 2
25818: ARRAY
25819: PPUSH
25820: LD_VAR 0 3
25824: PPUSH
25825: CALL_OW 1
25829: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
25830: LD_ADDR_VAR 0 7
25834: PUSH
25835: LD_VAR 0 7
25839: PPUSH
25840: LD_VAR 0 7
25844: PPUSH
25845: LD_VAR 0 6
25849: PPUSH
25850: CALL_OW 1
25854: ST_TO_ADDR
// for i = s_arr downto 2 do
25855: LD_ADDR_VAR 0 5
25859: PUSH
25860: DOUBLE
25861: LD_VAR 0 7
25865: INC
25866: ST_TO_ADDR
25867: LD_INT 2
25869: PUSH
25870: FOR_DOWNTO
25871: IFFALSE 25955
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
25873: LD_ADDR_VAR 0 6
25877: PUSH
25878: LD_VAR 0 7
25882: PUSH
25883: LD_VAR 0 5
25887: PUSH
25888: LD_INT 1
25890: MINUS
25891: ARRAY
25892: PPUSH
25893: LD_VAR 0 2
25897: PUSH
25898: LD_VAR 0 5
25902: PUSH
25903: LD_INT 1
25905: MINUS
25906: ARRAY
25907: PPUSH
25908: LD_VAR 0 7
25912: PUSH
25913: LD_VAR 0 5
25917: ARRAY
25918: PPUSH
25919: CALL_OW 1
25923: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
25924: LD_ADDR_VAR 0 7
25928: PUSH
25929: LD_VAR 0 7
25933: PPUSH
25934: LD_VAR 0 5
25938: PUSH
25939: LD_INT 1
25941: MINUS
25942: PPUSH
25943: LD_VAR 0 6
25947: PPUSH
25948: CALL_OW 1
25952: ST_TO_ADDR
// end ;
25953: GO 25870
25955: POP
25956: POP
// result := s_arr [ 1 ] ;
25957: LD_ADDR_VAR 0 4
25961: PUSH
25962: LD_VAR 0 7
25966: PUSH
25967: LD_INT 1
25969: ARRAY
25970: ST_TO_ADDR
// end ; end ;
25971: LD_VAR 0 4
25975: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
25976: LD_INT 0
25978: PPUSH
25979: PPUSH
// if not list then
25980: LD_VAR 0 1
25984: NOT
25985: IFFALSE 25989
// exit ;
25987: GO 26080
// i := list [ pos1 ] ;
25989: LD_ADDR_VAR 0 5
25993: PUSH
25994: LD_VAR 0 1
25998: PUSH
25999: LD_VAR 0 2
26003: ARRAY
26004: ST_TO_ADDR
// if not i then
26005: LD_VAR 0 5
26009: NOT
26010: IFFALSE 26014
// exit ;
26012: GO 26080
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26014: LD_ADDR_VAR 0 1
26018: PUSH
26019: LD_VAR 0 1
26023: PPUSH
26024: LD_VAR 0 2
26028: PPUSH
26029: LD_VAR 0 1
26033: PUSH
26034: LD_VAR 0 3
26038: ARRAY
26039: PPUSH
26040: CALL_OW 1
26044: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26045: LD_ADDR_VAR 0 1
26049: PUSH
26050: LD_VAR 0 1
26054: PPUSH
26055: LD_VAR 0 3
26059: PPUSH
26060: LD_VAR 0 5
26064: PPUSH
26065: CALL_OW 1
26069: ST_TO_ADDR
// result := list ;
26070: LD_ADDR_VAR 0 4
26074: PUSH
26075: LD_VAR 0 1
26079: ST_TO_ADDR
// end ;
26080: LD_VAR 0 4
26084: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26085: LD_INT 0
26087: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26088: LD_ADDR_VAR 0 5
26092: PUSH
26093: LD_VAR 0 1
26097: PPUSH
26098: CALL_OW 250
26102: PPUSH
26103: LD_VAR 0 1
26107: PPUSH
26108: CALL_OW 251
26112: PPUSH
26113: LD_VAR 0 2
26117: PPUSH
26118: LD_VAR 0 3
26122: PPUSH
26123: LD_VAR 0 4
26127: PPUSH
26128: CALL 26506 0 5
26132: ST_TO_ADDR
// end ;
26133: LD_VAR 0 5
26137: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
26138: LD_INT 0
26140: PPUSH
26141: PPUSH
26142: PPUSH
26143: PPUSH
// if not list or not unit then
26144: LD_VAR 0 2
26148: NOT
26149: PUSH
26150: LD_VAR 0 1
26154: NOT
26155: OR
26156: IFFALSE 26160
// exit ;
26158: GO 26501
// result := [ ] ;
26160: LD_ADDR_VAR 0 5
26164: PUSH
26165: EMPTY
26166: ST_TO_ADDR
// for i in list do
26167: LD_ADDR_VAR 0 6
26171: PUSH
26172: LD_VAR 0 2
26176: PUSH
26177: FOR_IN
26178: IFFALSE 26396
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
26180: LD_ADDR_VAR 0 8
26184: PUSH
26185: LD_VAR 0 1
26189: PPUSH
26190: LD_VAR 0 6
26194: PUSH
26195: LD_INT 1
26197: ARRAY
26198: PPUSH
26199: LD_VAR 0 6
26203: PUSH
26204: LD_INT 2
26206: ARRAY
26207: PPUSH
26208: CALL_OW 297
26212: ST_TO_ADDR
// if not Count ( result ) then
26213: LD_VAR 0 5
26217: PPUSH
26218: CALL 22790 0 1
26222: NOT
26223: IFFALSE 26256
// begin result := Join ( result , [ i , tmp ] ) ;
26225: LD_ADDR_VAR 0 5
26229: PUSH
26230: LD_VAR 0 5
26234: PPUSH
26235: LD_VAR 0 6
26239: PUSH
26240: LD_VAR 0 8
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PPUSH
26249: CALL 58399 0 2
26253: ST_TO_ADDR
// continue ;
26254: GO 26177
// end ; if result [ result ] [ 2 ] <= tmp then
26256: LD_VAR 0 5
26260: PUSH
26261: LD_VAR 0 5
26265: ARRAY
26266: PUSH
26267: LD_INT 2
26269: ARRAY
26270: PUSH
26271: LD_VAR 0 8
26275: LESSEQUAL
26276: IFFALSE 26309
// result := Join ( result , [ i , tmp ] ) else
26278: LD_ADDR_VAR 0 5
26282: PUSH
26283: LD_VAR 0 5
26287: PPUSH
26288: LD_VAR 0 6
26292: PUSH
26293: LD_VAR 0 8
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: PPUSH
26302: CALL 58399 0 2
26306: ST_TO_ADDR
26307: GO 26394
// begin for j := 1 to Count ( result ) do
26309: LD_ADDR_VAR 0 7
26313: PUSH
26314: DOUBLE
26315: LD_INT 1
26317: DEC
26318: ST_TO_ADDR
26319: LD_VAR 0 5
26323: PPUSH
26324: CALL 22790 0 1
26328: PUSH
26329: FOR_TO
26330: IFFALSE 26392
// begin if tmp < result [ j ] [ 2 ] then
26332: LD_VAR 0 8
26336: PUSH
26337: LD_VAR 0 5
26341: PUSH
26342: LD_VAR 0 7
26346: ARRAY
26347: PUSH
26348: LD_INT 2
26350: ARRAY
26351: LESS
26352: IFFALSE 26390
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26354: LD_ADDR_VAR 0 5
26358: PUSH
26359: LD_VAR 0 5
26363: PPUSH
26364: LD_VAR 0 7
26368: PPUSH
26369: LD_VAR 0 6
26373: PUSH
26374: LD_VAR 0 8
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PPUSH
26383: CALL_OW 2
26387: ST_TO_ADDR
// break ;
26388: GO 26392
// end ; end ;
26390: GO 26329
26392: POP
26393: POP
// end ; end ;
26394: GO 26177
26396: POP
26397: POP
// if result and not asc then
26398: LD_VAR 0 5
26402: PUSH
26403: LD_VAR 0 3
26407: NOT
26408: AND
26409: IFFALSE 26426
// result := ReverseArray ( result ) ;
26411: LD_ADDR_VAR 0 5
26415: PUSH
26416: LD_VAR 0 5
26420: PPUSH
26421: CALL 53666 0 1
26425: ST_TO_ADDR
// tmp := [ ] ;
26426: LD_ADDR_VAR 0 8
26430: PUSH
26431: EMPTY
26432: ST_TO_ADDR
// if mode then
26433: LD_VAR 0 4
26437: IFFALSE 26501
// begin for i := 1 to result do
26439: LD_ADDR_VAR 0 6
26443: PUSH
26444: DOUBLE
26445: LD_INT 1
26447: DEC
26448: ST_TO_ADDR
26449: LD_VAR 0 5
26453: PUSH
26454: FOR_TO
26455: IFFALSE 26489
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
26457: LD_ADDR_VAR 0 8
26461: PUSH
26462: LD_VAR 0 8
26466: PPUSH
26467: LD_VAR 0 5
26471: PUSH
26472: LD_VAR 0 6
26476: ARRAY
26477: PUSH
26478: LD_INT 1
26480: ARRAY
26481: PPUSH
26482: CALL 58399 0 2
26486: ST_TO_ADDR
26487: GO 26454
26489: POP
26490: POP
// result := tmp ;
26491: LD_ADDR_VAR 0 5
26495: PUSH
26496: LD_VAR 0 8
26500: ST_TO_ADDR
// end ; end ;
26501: LD_VAR 0 5
26505: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26506: LD_INT 0
26508: PPUSH
26509: PPUSH
26510: PPUSH
26511: PPUSH
// if not list then
26512: LD_VAR 0 3
26516: NOT
26517: IFFALSE 26521
// exit ;
26519: GO 26909
// result := [ ] ;
26521: LD_ADDR_VAR 0 6
26525: PUSH
26526: EMPTY
26527: ST_TO_ADDR
// for i in list do
26528: LD_ADDR_VAR 0 7
26532: PUSH
26533: LD_VAR 0 3
26537: PUSH
26538: FOR_IN
26539: IFFALSE 26741
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26541: LD_ADDR_VAR 0 9
26545: PUSH
26546: LD_VAR 0 7
26550: PPUSH
26551: LD_VAR 0 1
26555: PPUSH
26556: LD_VAR 0 2
26560: PPUSH
26561: CALL_OW 297
26565: ST_TO_ADDR
// if not result then
26566: LD_VAR 0 6
26570: NOT
26571: IFFALSE 26597
// result := [ [ i , tmp ] ] else
26573: LD_ADDR_VAR 0 6
26577: PUSH
26578: LD_VAR 0 7
26582: PUSH
26583: LD_VAR 0 9
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: PUSH
26592: EMPTY
26593: LIST
26594: ST_TO_ADDR
26595: GO 26739
// begin if result [ result ] [ 2 ] <= tmp then
26597: LD_VAR 0 6
26601: PUSH
26602: LD_VAR 0 6
26606: ARRAY
26607: PUSH
26608: LD_INT 2
26610: ARRAY
26611: PUSH
26612: LD_VAR 0 9
26616: LESSEQUAL
26617: IFFALSE 26659
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26619: LD_ADDR_VAR 0 6
26623: PUSH
26624: LD_VAR 0 6
26628: PPUSH
26629: LD_VAR 0 6
26633: PUSH
26634: LD_INT 1
26636: PLUS
26637: PPUSH
26638: LD_VAR 0 7
26642: PUSH
26643: LD_VAR 0 9
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: PPUSH
26652: CALL_OW 2
26656: ST_TO_ADDR
26657: GO 26739
// for j := 1 to result do
26659: LD_ADDR_VAR 0 8
26663: PUSH
26664: DOUBLE
26665: LD_INT 1
26667: DEC
26668: ST_TO_ADDR
26669: LD_VAR 0 6
26673: PUSH
26674: FOR_TO
26675: IFFALSE 26737
// begin if tmp < result [ j ] [ 2 ] then
26677: LD_VAR 0 9
26681: PUSH
26682: LD_VAR 0 6
26686: PUSH
26687: LD_VAR 0 8
26691: ARRAY
26692: PUSH
26693: LD_INT 2
26695: ARRAY
26696: LESS
26697: IFFALSE 26735
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26699: LD_ADDR_VAR 0 6
26703: PUSH
26704: LD_VAR 0 6
26708: PPUSH
26709: LD_VAR 0 8
26713: PPUSH
26714: LD_VAR 0 7
26718: PUSH
26719: LD_VAR 0 9
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: PPUSH
26728: CALL_OW 2
26732: ST_TO_ADDR
// break ;
26733: GO 26737
// end ; end ;
26735: GO 26674
26737: POP
26738: POP
// end ; end ;
26739: GO 26538
26741: POP
26742: POP
// if result and not asc then
26743: LD_VAR 0 6
26747: PUSH
26748: LD_VAR 0 4
26752: NOT
26753: AND
26754: IFFALSE 26829
// begin tmp := result ;
26756: LD_ADDR_VAR 0 9
26760: PUSH
26761: LD_VAR 0 6
26765: ST_TO_ADDR
// for i = tmp downto 1 do
26766: LD_ADDR_VAR 0 7
26770: PUSH
26771: DOUBLE
26772: LD_VAR 0 9
26776: INC
26777: ST_TO_ADDR
26778: LD_INT 1
26780: PUSH
26781: FOR_DOWNTO
26782: IFFALSE 26827
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26784: LD_ADDR_VAR 0 6
26788: PUSH
26789: LD_VAR 0 6
26793: PPUSH
26794: LD_VAR 0 9
26798: PUSH
26799: LD_VAR 0 7
26803: MINUS
26804: PUSH
26805: LD_INT 1
26807: PLUS
26808: PPUSH
26809: LD_VAR 0 9
26813: PUSH
26814: LD_VAR 0 7
26818: ARRAY
26819: PPUSH
26820: CALL_OW 1
26824: ST_TO_ADDR
26825: GO 26781
26827: POP
26828: POP
// end ; tmp := [ ] ;
26829: LD_ADDR_VAR 0 9
26833: PUSH
26834: EMPTY
26835: ST_TO_ADDR
// if mode then
26836: LD_VAR 0 5
26840: IFFALSE 26909
// begin for i = 1 to result do
26842: LD_ADDR_VAR 0 7
26846: PUSH
26847: DOUBLE
26848: LD_INT 1
26850: DEC
26851: ST_TO_ADDR
26852: LD_VAR 0 6
26856: PUSH
26857: FOR_TO
26858: IFFALSE 26897
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
26860: LD_ADDR_VAR 0 9
26864: PUSH
26865: LD_VAR 0 9
26869: PPUSH
26870: LD_VAR 0 7
26874: PPUSH
26875: LD_VAR 0 6
26879: PUSH
26880: LD_VAR 0 7
26884: ARRAY
26885: PUSH
26886: LD_INT 1
26888: ARRAY
26889: PPUSH
26890: CALL_OW 1
26894: ST_TO_ADDR
26895: GO 26857
26897: POP
26898: POP
// result := tmp ;
26899: LD_ADDR_VAR 0 6
26903: PUSH
26904: LD_VAR 0 9
26908: ST_TO_ADDR
// end ; end ;
26909: LD_VAR 0 6
26913: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26914: LD_INT 0
26916: PPUSH
26917: PPUSH
26918: PPUSH
26919: PPUSH
26920: PPUSH
26921: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26922: LD_ADDR_VAR 0 5
26926: PUSH
26927: LD_INT 0
26929: PUSH
26930: LD_INT 0
26932: PUSH
26933: LD_INT 0
26935: PUSH
26936: EMPTY
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: ST_TO_ADDR
// if not x or not y then
26944: LD_VAR 0 2
26948: NOT
26949: PUSH
26950: LD_VAR 0 3
26954: NOT
26955: OR
26956: IFFALSE 26960
// exit ;
26958: GO 28610
// if not range then
26960: LD_VAR 0 4
26964: NOT
26965: IFFALSE 26975
// range := 10 ;
26967: LD_ADDR_VAR 0 4
26971: PUSH
26972: LD_INT 10
26974: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26975: LD_ADDR_VAR 0 8
26979: PUSH
26980: LD_INT 81
26982: PUSH
26983: LD_VAR 0 1
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: PUSH
26992: LD_INT 92
26994: PUSH
26995: LD_VAR 0 2
26999: PUSH
27000: LD_VAR 0 3
27004: PUSH
27005: LD_VAR 0 4
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: LIST
27014: LIST
27015: PUSH
27016: LD_INT 3
27018: PUSH
27019: LD_INT 21
27021: PUSH
27022: LD_INT 3
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: LIST
27037: PPUSH
27038: CALL_OW 69
27042: ST_TO_ADDR
// if not tmp then
27043: LD_VAR 0 8
27047: NOT
27048: IFFALSE 27052
// exit ;
27050: GO 28610
// for i in tmp do
27052: LD_ADDR_VAR 0 6
27056: PUSH
27057: LD_VAR 0 8
27061: PUSH
27062: FOR_IN
27063: IFFALSE 28585
// begin points := [ 0 , 0 , 0 ] ;
27065: LD_ADDR_VAR 0 9
27069: PUSH
27070: LD_INT 0
27072: PUSH
27073: LD_INT 0
27075: PUSH
27076: LD_INT 0
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: LIST
27083: ST_TO_ADDR
// bpoints := 1 ;
27084: LD_ADDR_VAR 0 10
27088: PUSH
27089: LD_INT 1
27091: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27092: LD_VAR 0 6
27096: PPUSH
27097: CALL_OW 247
27101: PUSH
27102: LD_INT 1
27104: DOUBLE
27105: EQUAL
27106: IFTRUE 27110
27108: GO 27688
27110: POP
// begin if GetClass ( i ) = 1 then
27111: LD_VAR 0 6
27115: PPUSH
27116: CALL_OW 257
27120: PUSH
27121: LD_INT 1
27123: EQUAL
27124: IFFALSE 27145
// points := [ 10 , 5 , 3 ] ;
27126: LD_ADDR_VAR 0 9
27130: PUSH
27131: LD_INT 10
27133: PUSH
27134: LD_INT 5
27136: PUSH
27137: LD_INT 3
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: LIST
27144: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27145: LD_VAR 0 6
27149: PPUSH
27150: CALL_OW 257
27154: PUSH
27155: LD_INT 2
27157: PUSH
27158: LD_INT 3
27160: PUSH
27161: LD_INT 4
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: LIST
27168: IN
27169: IFFALSE 27190
// points := [ 3 , 2 , 1 ] ;
27171: LD_ADDR_VAR 0 9
27175: PUSH
27176: LD_INT 3
27178: PUSH
27179: LD_INT 2
27181: PUSH
27182: LD_INT 1
27184: PUSH
27185: EMPTY
27186: LIST
27187: LIST
27188: LIST
27189: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27190: LD_VAR 0 6
27194: PPUSH
27195: CALL_OW 257
27199: PUSH
27200: LD_INT 5
27202: EQUAL
27203: IFFALSE 27224
// points := [ 130 , 5 , 2 ] ;
27205: LD_ADDR_VAR 0 9
27209: PUSH
27210: LD_INT 130
27212: PUSH
27213: LD_INT 5
27215: PUSH
27216: LD_INT 2
27218: PUSH
27219: EMPTY
27220: LIST
27221: LIST
27222: LIST
27223: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27224: LD_VAR 0 6
27228: PPUSH
27229: CALL_OW 257
27233: PUSH
27234: LD_INT 8
27236: EQUAL
27237: IFFALSE 27258
// points := [ 35 , 35 , 30 ] ;
27239: LD_ADDR_VAR 0 9
27243: PUSH
27244: LD_INT 35
27246: PUSH
27247: LD_INT 35
27249: PUSH
27250: LD_INT 30
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: LIST
27257: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27258: LD_VAR 0 6
27262: PPUSH
27263: CALL_OW 257
27267: PUSH
27268: LD_INT 9
27270: EQUAL
27271: IFFALSE 27292
// points := [ 20 , 55 , 40 ] ;
27273: LD_ADDR_VAR 0 9
27277: PUSH
27278: LD_INT 20
27280: PUSH
27281: LD_INT 55
27283: PUSH
27284: LD_INT 40
27286: PUSH
27287: EMPTY
27288: LIST
27289: LIST
27290: LIST
27291: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27292: LD_VAR 0 6
27296: PPUSH
27297: CALL_OW 257
27301: PUSH
27302: LD_INT 12
27304: PUSH
27305: LD_INT 16
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: IN
27312: IFFALSE 27333
// points := [ 5 , 3 , 2 ] ;
27314: LD_ADDR_VAR 0 9
27318: PUSH
27319: LD_INT 5
27321: PUSH
27322: LD_INT 3
27324: PUSH
27325: LD_INT 2
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: LIST
27332: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27333: LD_VAR 0 6
27337: PPUSH
27338: CALL_OW 257
27342: PUSH
27343: LD_INT 17
27345: EQUAL
27346: IFFALSE 27367
// points := [ 100 , 50 , 75 ] ;
27348: LD_ADDR_VAR 0 9
27352: PUSH
27353: LD_INT 100
27355: PUSH
27356: LD_INT 50
27358: PUSH
27359: LD_INT 75
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: LIST
27366: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27367: LD_VAR 0 6
27371: PPUSH
27372: CALL_OW 257
27376: PUSH
27377: LD_INT 15
27379: EQUAL
27380: IFFALSE 27401
// points := [ 10 , 5 , 3 ] ;
27382: LD_ADDR_VAR 0 9
27386: PUSH
27387: LD_INT 10
27389: PUSH
27390: LD_INT 5
27392: PUSH
27393: LD_INT 3
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: LIST
27400: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27401: LD_VAR 0 6
27405: PPUSH
27406: CALL_OW 257
27410: PUSH
27411: LD_INT 14
27413: EQUAL
27414: IFFALSE 27435
// points := [ 10 , 0 , 0 ] ;
27416: LD_ADDR_VAR 0 9
27420: PUSH
27421: LD_INT 10
27423: PUSH
27424: LD_INT 0
27426: PUSH
27427: LD_INT 0
27429: PUSH
27430: EMPTY
27431: LIST
27432: LIST
27433: LIST
27434: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27435: LD_VAR 0 6
27439: PPUSH
27440: CALL_OW 257
27444: PUSH
27445: LD_INT 11
27447: EQUAL
27448: IFFALSE 27469
// points := [ 30 , 10 , 5 ] ;
27450: LD_ADDR_VAR 0 9
27454: PUSH
27455: LD_INT 30
27457: PUSH
27458: LD_INT 10
27460: PUSH
27461: LD_INT 5
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: LIST
27468: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27469: LD_VAR 0 1
27473: PPUSH
27474: LD_INT 5
27476: PPUSH
27477: CALL_OW 321
27481: PUSH
27482: LD_INT 2
27484: EQUAL
27485: IFFALSE 27502
// bpoints := bpoints * 1.8 ;
27487: LD_ADDR_VAR 0 10
27491: PUSH
27492: LD_VAR 0 10
27496: PUSH
27497: LD_REAL  1.80000000000000E+0000
27500: MUL
27501: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27502: LD_VAR 0 6
27506: PPUSH
27507: CALL_OW 257
27511: PUSH
27512: LD_INT 1
27514: PUSH
27515: LD_INT 2
27517: PUSH
27518: LD_INT 3
27520: PUSH
27521: LD_INT 4
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: IN
27530: PUSH
27531: LD_VAR 0 1
27535: PPUSH
27536: LD_INT 51
27538: PPUSH
27539: CALL_OW 321
27543: PUSH
27544: LD_INT 2
27546: EQUAL
27547: AND
27548: IFFALSE 27565
// bpoints := bpoints * 1.2 ;
27550: LD_ADDR_VAR 0 10
27554: PUSH
27555: LD_VAR 0 10
27559: PUSH
27560: LD_REAL  1.20000000000000E+0000
27563: MUL
27564: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27565: LD_VAR 0 6
27569: PPUSH
27570: CALL_OW 257
27574: PUSH
27575: LD_INT 5
27577: PUSH
27578: LD_INT 7
27580: PUSH
27581: LD_INT 9
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: LIST
27588: IN
27589: PUSH
27590: LD_VAR 0 1
27594: PPUSH
27595: LD_INT 52
27597: PPUSH
27598: CALL_OW 321
27602: PUSH
27603: LD_INT 2
27605: EQUAL
27606: AND
27607: IFFALSE 27624
// bpoints := bpoints * 1.5 ;
27609: LD_ADDR_VAR 0 10
27613: PUSH
27614: LD_VAR 0 10
27618: PUSH
27619: LD_REAL  1.50000000000000E+0000
27622: MUL
27623: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27624: LD_VAR 0 1
27628: PPUSH
27629: LD_INT 66
27631: PPUSH
27632: CALL_OW 321
27636: PUSH
27637: LD_INT 2
27639: EQUAL
27640: IFFALSE 27657
// bpoints := bpoints * 1.1 ;
27642: LD_ADDR_VAR 0 10
27646: PUSH
27647: LD_VAR 0 10
27651: PUSH
27652: LD_REAL  1.10000000000000E+0000
27655: MUL
27656: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27657: LD_ADDR_VAR 0 10
27661: PUSH
27662: LD_VAR 0 10
27666: PUSH
27667: LD_VAR 0 6
27671: PPUSH
27672: LD_INT 1
27674: PPUSH
27675: CALL_OW 259
27679: PUSH
27680: LD_REAL  1.15000000000000E+0000
27683: MUL
27684: MUL
27685: ST_TO_ADDR
// end ; unit_vehicle :
27686: GO 28514
27688: LD_INT 2
27690: DOUBLE
27691: EQUAL
27692: IFTRUE 27696
27694: GO 28502
27696: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27697: LD_VAR 0 6
27701: PPUSH
27702: CALL_OW 264
27706: PUSH
27707: LD_INT 2
27709: PUSH
27710: LD_INT 42
27712: PUSH
27713: LD_INT 24
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: LIST
27720: IN
27721: IFFALSE 27742
// points := [ 25 , 5 , 3 ] ;
27723: LD_ADDR_VAR 0 9
27727: PUSH
27728: LD_INT 25
27730: PUSH
27731: LD_INT 5
27733: PUSH
27734: LD_INT 3
27736: PUSH
27737: EMPTY
27738: LIST
27739: LIST
27740: LIST
27741: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27742: LD_VAR 0 6
27746: PPUSH
27747: CALL_OW 264
27751: PUSH
27752: LD_INT 4
27754: PUSH
27755: LD_INT 43
27757: PUSH
27758: LD_INT 25
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: LIST
27765: IN
27766: IFFALSE 27787
// points := [ 40 , 15 , 5 ] ;
27768: LD_ADDR_VAR 0 9
27772: PUSH
27773: LD_INT 40
27775: PUSH
27776: LD_INT 15
27778: PUSH
27779: LD_INT 5
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: LIST
27786: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27787: LD_VAR 0 6
27791: PPUSH
27792: CALL_OW 264
27796: PUSH
27797: LD_INT 3
27799: PUSH
27800: LD_INT 23
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: IN
27807: IFFALSE 27828
// points := [ 7 , 25 , 8 ] ;
27809: LD_ADDR_VAR 0 9
27813: PUSH
27814: LD_INT 7
27816: PUSH
27817: LD_INT 25
27819: PUSH
27820: LD_INT 8
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: LIST
27827: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27828: LD_VAR 0 6
27832: PPUSH
27833: CALL_OW 264
27837: PUSH
27838: LD_INT 5
27840: PUSH
27841: LD_INT 27
27843: PUSH
27844: LD_INT 44
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: LIST
27851: IN
27852: IFFALSE 27873
// points := [ 14 , 50 , 16 ] ;
27854: LD_ADDR_VAR 0 9
27858: PUSH
27859: LD_INT 14
27861: PUSH
27862: LD_INT 50
27864: PUSH
27865: LD_INT 16
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: LIST
27872: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
27873: LD_VAR 0 6
27877: PPUSH
27878: CALL_OW 264
27882: PUSH
27883: LD_INT 6
27885: PUSH
27886: LD_INT 46
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: IN
27893: IFFALSE 27914
// points := [ 32 , 120 , 70 ] ;
27895: LD_ADDR_VAR 0 9
27899: PUSH
27900: LD_INT 32
27902: PUSH
27903: LD_INT 120
27905: PUSH
27906: LD_INT 70
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: LIST
27913: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
27914: LD_VAR 0 6
27918: PPUSH
27919: CALL_OW 264
27923: PUSH
27924: LD_INT 7
27926: PUSH
27927: LD_INT 28
27929: PUSH
27930: LD_INT 45
27932: PUSH
27933: LD_INT 92
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: IN
27942: IFFALSE 27963
// points := [ 35 , 20 , 45 ] ;
27944: LD_ADDR_VAR 0 9
27948: PUSH
27949: LD_INT 35
27951: PUSH
27952: LD_INT 20
27954: PUSH
27955: LD_INT 45
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: LIST
27962: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
27963: LD_VAR 0 6
27967: PPUSH
27968: CALL_OW 264
27972: PUSH
27973: LD_INT 47
27975: PUSH
27976: EMPTY
27977: LIST
27978: IN
27979: IFFALSE 28000
// points := [ 67 , 45 , 75 ] ;
27981: LD_ADDR_VAR 0 9
27985: PUSH
27986: LD_INT 67
27988: PUSH
27989: LD_INT 45
27991: PUSH
27992: LD_INT 75
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: LIST
27999: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28000: LD_VAR 0 6
28004: PPUSH
28005: CALL_OW 264
28009: PUSH
28010: LD_INT 26
28012: PUSH
28013: EMPTY
28014: LIST
28015: IN
28016: IFFALSE 28037
// points := [ 120 , 30 , 80 ] ;
28018: LD_ADDR_VAR 0 9
28022: PUSH
28023: LD_INT 120
28025: PUSH
28026: LD_INT 30
28028: PUSH
28029: LD_INT 80
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: LIST
28036: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28037: LD_VAR 0 6
28041: PPUSH
28042: CALL_OW 264
28046: PUSH
28047: LD_INT 22
28049: PUSH
28050: EMPTY
28051: LIST
28052: IN
28053: IFFALSE 28074
// points := [ 40 , 1 , 1 ] ;
28055: LD_ADDR_VAR 0 9
28059: PUSH
28060: LD_INT 40
28062: PUSH
28063: LD_INT 1
28065: PUSH
28066: LD_INT 1
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: LIST
28073: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28074: LD_VAR 0 6
28078: PPUSH
28079: CALL_OW 264
28083: PUSH
28084: LD_INT 29
28086: PUSH
28087: EMPTY
28088: LIST
28089: IN
28090: IFFALSE 28111
// points := [ 70 , 200 , 400 ] ;
28092: LD_ADDR_VAR 0 9
28096: PUSH
28097: LD_INT 70
28099: PUSH
28100: LD_INT 200
28102: PUSH
28103: LD_INT 400
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: LIST
28110: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28111: LD_VAR 0 6
28115: PPUSH
28116: CALL_OW 264
28120: PUSH
28121: LD_INT 14
28123: PUSH
28124: LD_INT 53
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: IN
28131: IFFALSE 28152
// points := [ 40 , 10 , 20 ] ;
28133: LD_ADDR_VAR 0 9
28137: PUSH
28138: LD_INT 40
28140: PUSH
28141: LD_INT 10
28143: PUSH
28144: LD_INT 20
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: LIST
28151: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28152: LD_VAR 0 6
28156: PPUSH
28157: CALL_OW 264
28161: PUSH
28162: LD_INT 9
28164: PUSH
28165: EMPTY
28166: LIST
28167: IN
28168: IFFALSE 28189
// points := [ 5 , 70 , 20 ] ;
28170: LD_ADDR_VAR 0 9
28174: PUSH
28175: LD_INT 5
28177: PUSH
28178: LD_INT 70
28180: PUSH
28181: LD_INT 20
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: LIST
28188: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28189: LD_VAR 0 6
28193: PPUSH
28194: CALL_OW 264
28198: PUSH
28199: LD_INT 10
28201: PUSH
28202: EMPTY
28203: LIST
28204: IN
28205: IFFALSE 28226
// points := [ 35 , 110 , 70 ] ;
28207: LD_ADDR_VAR 0 9
28211: PUSH
28212: LD_INT 35
28214: PUSH
28215: LD_INT 110
28217: PUSH
28218: LD_INT 70
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: LIST
28225: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28226: LD_VAR 0 6
28230: PPUSH
28231: CALL_OW 265
28235: PUSH
28236: LD_INT 25
28238: EQUAL
28239: IFFALSE 28260
// points := [ 80 , 65 , 100 ] ;
28241: LD_ADDR_VAR 0 9
28245: PUSH
28246: LD_INT 80
28248: PUSH
28249: LD_INT 65
28251: PUSH
28252: LD_INT 100
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: LIST
28259: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28260: LD_VAR 0 6
28264: PPUSH
28265: CALL_OW 263
28269: PUSH
28270: LD_INT 1
28272: EQUAL
28273: IFFALSE 28308
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28275: LD_ADDR_VAR 0 10
28279: PUSH
28280: LD_VAR 0 10
28284: PUSH
28285: LD_VAR 0 6
28289: PPUSH
28290: CALL_OW 311
28294: PPUSH
28295: LD_INT 3
28297: PPUSH
28298: CALL_OW 259
28302: PUSH
28303: LD_INT 4
28305: MUL
28306: MUL
28307: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28308: LD_VAR 0 6
28312: PPUSH
28313: CALL_OW 263
28317: PUSH
28318: LD_INT 2
28320: EQUAL
28321: IFFALSE 28372
// begin j := IsControledBy ( i ) ;
28323: LD_ADDR_VAR 0 7
28327: PUSH
28328: LD_VAR 0 6
28332: PPUSH
28333: CALL_OW 312
28337: ST_TO_ADDR
// if j then
28338: LD_VAR 0 7
28342: IFFALSE 28372
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28344: LD_ADDR_VAR 0 10
28348: PUSH
28349: LD_VAR 0 10
28353: PUSH
28354: LD_VAR 0 7
28358: PPUSH
28359: LD_INT 3
28361: PPUSH
28362: CALL_OW 259
28366: PUSH
28367: LD_INT 3
28369: MUL
28370: MUL
28371: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28372: LD_VAR 0 6
28376: PPUSH
28377: CALL_OW 264
28381: PUSH
28382: LD_INT 5
28384: PUSH
28385: LD_INT 6
28387: PUSH
28388: LD_INT 46
28390: PUSH
28391: LD_INT 44
28393: PUSH
28394: LD_INT 47
28396: PUSH
28397: LD_INT 45
28399: PUSH
28400: LD_INT 28
28402: PUSH
28403: LD_INT 7
28405: PUSH
28406: LD_INT 27
28408: PUSH
28409: LD_INT 29
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: LIST
28416: LIST
28417: LIST
28418: LIST
28419: LIST
28420: LIST
28421: LIST
28422: LIST
28423: IN
28424: PUSH
28425: LD_VAR 0 1
28429: PPUSH
28430: LD_INT 52
28432: PPUSH
28433: CALL_OW 321
28437: PUSH
28438: LD_INT 2
28440: EQUAL
28441: AND
28442: IFFALSE 28459
// bpoints := bpoints * 1.2 ;
28444: LD_ADDR_VAR 0 10
28448: PUSH
28449: LD_VAR 0 10
28453: PUSH
28454: LD_REAL  1.20000000000000E+0000
28457: MUL
28458: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28459: LD_VAR 0 6
28463: PPUSH
28464: CALL_OW 264
28468: PUSH
28469: LD_INT 6
28471: PUSH
28472: LD_INT 46
28474: PUSH
28475: LD_INT 47
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: LIST
28482: IN
28483: IFFALSE 28500
// bpoints := bpoints * 1.2 ;
28485: LD_ADDR_VAR 0 10
28489: PUSH
28490: LD_VAR 0 10
28494: PUSH
28495: LD_REAL  1.20000000000000E+0000
28498: MUL
28499: ST_TO_ADDR
// end ; unit_building :
28500: GO 28514
28502: LD_INT 3
28504: DOUBLE
28505: EQUAL
28506: IFTRUE 28510
28508: GO 28513
28510: POP
// ; end ;
28511: GO 28514
28513: POP
// for j = 1 to 3 do
28514: LD_ADDR_VAR 0 7
28518: PUSH
28519: DOUBLE
28520: LD_INT 1
28522: DEC
28523: ST_TO_ADDR
28524: LD_INT 3
28526: PUSH
28527: FOR_TO
28528: IFFALSE 28581
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28530: LD_ADDR_VAR 0 5
28534: PUSH
28535: LD_VAR 0 5
28539: PPUSH
28540: LD_VAR 0 7
28544: PPUSH
28545: LD_VAR 0 5
28549: PUSH
28550: LD_VAR 0 7
28554: ARRAY
28555: PUSH
28556: LD_VAR 0 9
28560: PUSH
28561: LD_VAR 0 7
28565: ARRAY
28566: PUSH
28567: LD_VAR 0 10
28571: MUL
28572: PLUS
28573: PPUSH
28574: CALL_OW 1
28578: ST_TO_ADDR
28579: GO 28527
28581: POP
28582: POP
// end ;
28583: GO 27062
28585: POP
28586: POP
// result := Replace ( result , 4 , tmp ) ;
28587: LD_ADDR_VAR 0 5
28591: PUSH
28592: LD_VAR 0 5
28596: PPUSH
28597: LD_INT 4
28599: PPUSH
28600: LD_VAR 0 8
28604: PPUSH
28605: CALL_OW 1
28609: ST_TO_ADDR
// end ;
28610: LD_VAR 0 5
28614: RET
// export function DangerAtRange ( unit , range ) ; begin
28615: LD_INT 0
28617: PPUSH
// if not unit then
28618: LD_VAR 0 1
28622: NOT
28623: IFFALSE 28627
// exit ;
28625: GO 28672
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28627: LD_ADDR_VAR 0 3
28631: PUSH
28632: LD_VAR 0 1
28636: PPUSH
28637: CALL_OW 255
28641: PPUSH
28642: LD_VAR 0 1
28646: PPUSH
28647: CALL_OW 250
28651: PPUSH
28652: LD_VAR 0 1
28656: PPUSH
28657: CALL_OW 251
28661: PPUSH
28662: LD_VAR 0 2
28666: PPUSH
28667: CALL 26914 0 4
28671: ST_TO_ADDR
// end ;
28672: LD_VAR 0 3
28676: RET
// export function DangerInArea ( side , area ) ; begin
28677: LD_INT 0
28679: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28680: LD_ADDR_VAR 0 3
28684: PUSH
28685: LD_VAR 0 2
28689: PPUSH
28690: LD_INT 81
28692: PUSH
28693: LD_VAR 0 1
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PPUSH
28702: CALL_OW 70
28706: ST_TO_ADDR
// end ;
28707: LD_VAR 0 3
28711: RET
// export function IsExtension ( b ) ; begin
28712: LD_INT 0
28714: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28715: LD_ADDR_VAR 0 2
28719: PUSH
28720: LD_VAR 0 1
28724: PUSH
28725: LD_INT 23
28727: PUSH
28728: LD_INT 20
28730: PUSH
28731: LD_INT 22
28733: PUSH
28734: LD_INT 17
28736: PUSH
28737: LD_INT 24
28739: PUSH
28740: LD_INT 21
28742: PUSH
28743: LD_INT 19
28745: PUSH
28746: LD_INT 16
28748: PUSH
28749: LD_INT 25
28751: PUSH
28752: LD_INT 18
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: IN
28767: ST_TO_ADDR
// end ;
28768: LD_VAR 0 2
28772: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
28773: LD_INT 0
28775: PPUSH
28776: PPUSH
28777: PPUSH
// result := [ ] ;
28778: LD_ADDR_VAR 0 4
28782: PUSH
28783: EMPTY
28784: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28785: LD_ADDR_VAR 0 5
28789: PUSH
28790: LD_VAR 0 2
28794: PPUSH
28795: LD_INT 21
28797: PUSH
28798: LD_INT 3
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PPUSH
28805: CALL_OW 70
28809: ST_TO_ADDR
// if not tmp then
28810: LD_VAR 0 5
28814: NOT
28815: IFFALSE 28819
// exit ;
28817: GO 28883
// if checkLink then
28819: LD_VAR 0 3
28823: IFFALSE 28873
// begin for i in tmp do
28825: LD_ADDR_VAR 0 6
28829: PUSH
28830: LD_VAR 0 5
28834: PUSH
28835: FOR_IN
28836: IFFALSE 28871
// if GetBase ( i ) <> base then
28838: LD_VAR 0 6
28842: PPUSH
28843: CALL_OW 274
28847: PUSH
28848: LD_VAR 0 1
28852: NONEQUAL
28853: IFFALSE 28869
// ComLinkToBase ( base , i ) ;
28855: LD_VAR 0 1
28859: PPUSH
28860: LD_VAR 0 6
28864: PPUSH
28865: CALL_OW 169
28869: GO 28835
28871: POP
28872: POP
// end ; result := tmp ;
28873: LD_ADDR_VAR 0 4
28877: PUSH
28878: LD_VAR 0 5
28882: ST_TO_ADDR
// end ;
28883: LD_VAR 0 4
28887: RET
// export function ComComplete ( units , b ) ; var i ; begin
28888: LD_INT 0
28890: PPUSH
28891: PPUSH
// if not units then
28892: LD_VAR 0 1
28896: NOT
28897: IFFALSE 28901
// exit ;
28899: GO 28991
// for i in units do
28901: LD_ADDR_VAR 0 4
28905: PUSH
28906: LD_VAR 0 1
28910: PUSH
28911: FOR_IN
28912: IFFALSE 28989
// if BuildingStatus ( b ) = bs_build then
28914: LD_VAR 0 2
28918: PPUSH
28919: CALL_OW 461
28923: PUSH
28924: LD_INT 1
28926: EQUAL
28927: IFFALSE 28987
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
28929: LD_VAR 0 4
28933: PPUSH
28934: LD_STRING h
28936: PUSH
28937: LD_VAR 0 2
28941: PPUSH
28942: CALL_OW 250
28946: PUSH
28947: LD_VAR 0 2
28951: PPUSH
28952: CALL_OW 251
28956: PUSH
28957: LD_VAR 0 2
28961: PUSH
28962: LD_INT 0
28964: PUSH
28965: LD_INT 0
28967: PUSH
28968: LD_INT 0
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: LIST
28975: LIST
28976: LIST
28977: LIST
28978: LIST
28979: PUSH
28980: EMPTY
28981: LIST
28982: PPUSH
28983: CALL_OW 446
28987: GO 28911
28989: POP
28990: POP
// end ;
28991: LD_VAR 0 3
28995: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
28996: LD_INT 0
28998: PPUSH
28999: PPUSH
29000: PPUSH
29001: PPUSH
29002: PPUSH
29003: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
29004: LD_VAR 0 1
29008: NOT
29009: PUSH
29010: LD_VAR 0 1
29014: PPUSH
29015: CALL_OW 263
29019: PUSH
29020: LD_INT 2
29022: NONEQUAL
29023: OR
29024: IFFALSE 29028
// exit ;
29026: GO 29344
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29028: LD_ADDR_VAR 0 6
29032: PUSH
29033: LD_INT 22
29035: PUSH
29036: LD_VAR 0 1
29040: PPUSH
29041: CALL_OW 255
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: LD_INT 2
29052: PUSH
29053: LD_INT 30
29055: PUSH
29056: LD_INT 36
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: PUSH
29063: LD_INT 34
29065: PUSH
29066: LD_INT 31
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: LIST
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: PPUSH
29082: CALL_OW 69
29086: ST_TO_ADDR
// if not tmp then
29087: LD_VAR 0 6
29091: NOT
29092: IFFALSE 29096
// exit ;
29094: GO 29344
// result := [ ] ;
29096: LD_ADDR_VAR 0 2
29100: PUSH
29101: EMPTY
29102: ST_TO_ADDR
// for i in tmp do
29103: LD_ADDR_VAR 0 3
29107: PUSH
29108: LD_VAR 0 6
29112: PUSH
29113: FOR_IN
29114: IFFALSE 29185
// begin t := UnitsInside ( i ) ;
29116: LD_ADDR_VAR 0 4
29120: PUSH
29121: LD_VAR 0 3
29125: PPUSH
29126: CALL_OW 313
29130: ST_TO_ADDR
// if t then
29131: LD_VAR 0 4
29135: IFFALSE 29183
// for j in t do
29137: LD_ADDR_VAR 0 7
29141: PUSH
29142: LD_VAR 0 4
29146: PUSH
29147: FOR_IN
29148: IFFALSE 29181
// result := Replace ( result , result + 1 , j ) ;
29150: LD_ADDR_VAR 0 2
29154: PUSH
29155: LD_VAR 0 2
29159: PPUSH
29160: LD_VAR 0 2
29164: PUSH
29165: LD_INT 1
29167: PLUS
29168: PPUSH
29169: LD_VAR 0 7
29173: PPUSH
29174: CALL_OW 1
29178: ST_TO_ADDR
29179: GO 29147
29181: POP
29182: POP
// end ;
29183: GO 29113
29185: POP
29186: POP
// if not result then
29187: LD_VAR 0 2
29191: NOT
29192: IFFALSE 29196
// exit ;
29194: GO 29344
// mech := result [ 1 ] ;
29196: LD_ADDR_VAR 0 5
29200: PUSH
29201: LD_VAR 0 2
29205: PUSH
29206: LD_INT 1
29208: ARRAY
29209: ST_TO_ADDR
// if result > 1 then
29210: LD_VAR 0 2
29214: PUSH
29215: LD_INT 1
29217: GREATER
29218: IFFALSE 29330
// begin for i = 2 to result do
29220: LD_ADDR_VAR 0 3
29224: PUSH
29225: DOUBLE
29226: LD_INT 2
29228: DEC
29229: ST_TO_ADDR
29230: LD_VAR 0 2
29234: PUSH
29235: FOR_TO
29236: IFFALSE 29328
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29238: LD_ADDR_VAR 0 4
29242: PUSH
29243: LD_VAR 0 2
29247: PUSH
29248: LD_VAR 0 3
29252: ARRAY
29253: PPUSH
29254: LD_INT 3
29256: PPUSH
29257: CALL_OW 259
29261: PUSH
29262: LD_VAR 0 2
29266: PUSH
29267: LD_VAR 0 3
29271: ARRAY
29272: PPUSH
29273: CALL_OW 432
29277: MINUS
29278: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29279: LD_VAR 0 4
29283: PUSH
29284: LD_VAR 0 5
29288: PPUSH
29289: LD_INT 3
29291: PPUSH
29292: CALL_OW 259
29296: PUSH
29297: LD_VAR 0 5
29301: PPUSH
29302: CALL_OW 432
29306: MINUS
29307: GREATEREQUAL
29308: IFFALSE 29326
// mech := result [ i ] ;
29310: LD_ADDR_VAR 0 5
29314: PUSH
29315: LD_VAR 0 2
29319: PUSH
29320: LD_VAR 0 3
29324: ARRAY
29325: ST_TO_ADDR
// end ;
29326: GO 29235
29328: POP
29329: POP
// end ; ComLinkTo ( vehicle , mech ) ;
29330: LD_VAR 0 1
29334: PPUSH
29335: LD_VAR 0 5
29339: PPUSH
29340: CALL_OW 135
// end ;
29344: LD_VAR 0 2
29348: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29349: LD_INT 0
29351: PPUSH
29352: PPUSH
29353: PPUSH
29354: PPUSH
29355: PPUSH
29356: PPUSH
29357: PPUSH
29358: PPUSH
29359: PPUSH
29360: PPUSH
29361: PPUSH
29362: PPUSH
29363: PPUSH
// result := [ ] ;
29364: LD_ADDR_VAR 0 7
29368: PUSH
29369: EMPTY
29370: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29371: LD_VAR 0 1
29375: PPUSH
29376: CALL_OW 266
29380: PUSH
29381: LD_INT 0
29383: PUSH
29384: LD_INT 1
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: IN
29391: NOT
29392: IFFALSE 29396
// exit ;
29394: GO 31030
// if name then
29396: LD_VAR 0 3
29400: IFFALSE 29416
// SetBName ( base_dep , name ) ;
29402: LD_VAR 0 1
29406: PPUSH
29407: LD_VAR 0 3
29411: PPUSH
29412: CALL_OW 500
// base := GetBase ( base_dep ) ;
29416: LD_ADDR_VAR 0 15
29420: PUSH
29421: LD_VAR 0 1
29425: PPUSH
29426: CALL_OW 274
29430: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29431: LD_ADDR_VAR 0 16
29435: PUSH
29436: LD_VAR 0 1
29440: PPUSH
29441: CALL_OW 255
29445: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29446: LD_ADDR_VAR 0 17
29450: PUSH
29451: LD_VAR 0 1
29455: PPUSH
29456: CALL_OW 248
29460: ST_TO_ADDR
// if sources then
29461: LD_VAR 0 5
29465: IFFALSE 29512
// for i = 1 to 3 do
29467: LD_ADDR_VAR 0 8
29471: PUSH
29472: DOUBLE
29473: LD_INT 1
29475: DEC
29476: ST_TO_ADDR
29477: LD_INT 3
29479: PUSH
29480: FOR_TO
29481: IFFALSE 29510
// AddResourceType ( base , i , sources [ i ] ) ;
29483: LD_VAR 0 15
29487: PPUSH
29488: LD_VAR 0 8
29492: PPUSH
29493: LD_VAR 0 5
29497: PUSH
29498: LD_VAR 0 8
29502: ARRAY
29503: PPUSH
29504: CALL_OW 276
29508: GO 29480
29510: POP
29511: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
29512: LD_ADDR_VAR 0 18
29516: PUSH
29517: LD_VAR 0 15
29521: PPUSH
29522: LD_VAR 0 2
29526: PPUSH
29527: LD_INT 1
29529: PPUSH
29530: CALL 28773 0 3
29534: ST_TO_ADDR
// InitHc ;
29535: CALL_OW 19
// InitUc ;
29539: CALL_OW 18
// uc_side := side ;
29543: LD_ADDR_OWVAR 20
29547: PUSH
29548: LD_VAR 0 16
29552: ST_TO_ADDR
// uc_nation := nation ;
29553: LD_ADDR_OWVAR 21
29557: PUSH
29558: LD_VAR 0 17
29562: ST_TO_ADDR
// if buildings then
29563: LD_VAR 0 18
29567: IFFALSE 30889
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29569: LD_ADDR_VAR 0 19
29573: PUSH
29574: LD_VAR 0 18
29578: PPUSH
29579: LD_INT 2
29581: PUSH
29582: LD_INT 30
29584: PUSH
29585: LD_INT 29
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PUSH
29592: LD_INT 30
29594: PUSH
29595: LD_INT 30
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: LIST
29606: PPUSH
29607: CALL_OW 72
29611: ST_TO_ADDR
// if tmp then
29612: LD_VAR 0 19
29616: IFFALSE 29664
// for i in tmp do
29618: LD_ADDR_VAR 0 8
29622: PUSH
29623: LD_VAR 0 19
29627: PUSH
29628: FOR_IN
29629: IFFALSE 29662
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29631: LD_VAR 0 8
29635: PPUSH
29636: CALL_OW 250
29640: PPUSH
29641: LD_VAR 0 8
29645: PPUSH
29646: CALL_OW 251
29650: PPUSH
29651: LD_VAR 0 16
29655: PPUSH
29656: CALL_OW 441
29660: GO 29628
29662: POP
29663: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29664: LD_VAR 0 18
29668: PPUSH
29669: LD_INT 2
29671: PUSH
29672: LD_INT 30
29674: PUSH
29675: LD_INT 32
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PUSH
29682: LD_INT 30
29684: PUSH
29685: LD_INT 33
29687: PUSH
29688: EMPTY
29689: LIST
29690: LIST
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: LIST
29696: PPUSH
29697: CALL_OW 72
29701: IFFALSE 29789
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29703: LD_ADDR_VAR 0 8
29707: PUSH
29708: LD_VAR 0 18
29712: PPUSH
29713: LD_INT 2
29715: PUSH
29716: LD_INT 30
29718: PUSH
29719: LD_INT 32
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: PUSH
29726: LD_INT 30
29728: PUSH
29729: LD_INT 33
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: LIST
29740: PPUSH
29741: CALL_OW 72
29745: PUSH
29746: FOR_IN
29747: IFFALSE 29787
// begin if not GetBWeapon ( i ) then
29749: LD_VAR 0 8
29753: PPUSH
29754: CALL_OW 269
29758: NOT
29759: IFFALSE 29785
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29761: LD_VAR 0 8
29765: PPUSH
29766: LD_VAR 0 8
29770: PPUSH
29771: LD_VAR 0 2
29775: PPUSH
29776: CALL 31035 0 2
29780: PPUSH
29781: CALL_OW 431
// end ;
29785: GO 29746
29787: POP
29788: POP
// end ; for i = 1 to personel do
29789: LD_ADDR_VAR 0 8
29793: PUSH
29794: DOUBLE
29795: LD_INT 1
29797: DEC
29798: ST_TO_ADDR
29799: LD_VAR 0 6
29803: PUSH
29804: FOR_TO
29805: IFFALSE 30869
// begin if i > 4 then
29807: LD_VAR 0 8
29811: PUSH
29812: LD_INT 4
29814: GREATER
29815: IFFALSE 29819
// break ;
29817: GO 30869
// case i of 1 :
29819: LD_VAR 0 8
29823: PUSH
29824: LD_INT 1
29826: DOUBLE
29827: EQUAL
29828: IFTRUE 29832
29830: GO 29912
29832: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29833: LD_ADDR_VAR 0 12
29837: PUSH
29838: LD_VAR 0 18
29842: PPUSH
29843: LD_INT 22
29845: PUSH
29846: LD_VAR 0 16
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: LD_INT 58
29857: PUSH
29858: EMPTY
29859: LIST
29860: PUSH
29861: LD_INT 2
29863: PUSH
29864: LD_INT 30
29866: PUSH
29867: LD_INT 32
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: LD_INT 30
29876: PUSH
29877: LD_INT 4
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 30
29886: PUSH
29887: LD_INT 5
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: LIST
29904: PPUSH
29905: CALL_OW 72
29909: ST_TO_ADDR
29910: GO 30134
29912: LD_INT 2
29914: DOUBLE
29915: EQUAL
29916: IFTRUE 29920
29918: GO 29982
29920: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
29921: LD_ADDR_VAR 0 12
29925: PUSH
29926: LD_VAR 0 18
29930: PPUSH
29931: LD_INT 22
29933: PUSH
29934: LD_VAR 0 16
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: PUSH
29943: LD_INT 2
29945: PUSH
29946: LD_INT 30
29948: PUSH
29949: LD_INT 0
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: PUSH
29956: LD_INT 30
29958: PUSH
29959: LD_INT 1
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: LIST
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PPUSH
29975: CALL_OW 72
29979: ST_TO_ADDR
29980: GO 30134
29982: LD_INT 3
29984: DOUBLE
29985: EQUAL
29986: IFTRUE 29990
29988: GO 30052
29990: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
29991: LD_ADDR_VAR 0 12
29995: PUSH
29996: LD_VAR 0 18
30000: PPUSH
30001: LD_INT 22
30003: PUSH
30004: LD_VAR 0 16
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 2
30015: PUSH
30016: LD_INT 30
30018: PUSH
30019: LD_INT 2
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: PUSH
30026: LD_INT 30
30028: PUSH
30029: LD_INT 3
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: LIST
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: PPUSH
30045: CALL_OW 72
30049: ST_TO_ADDR
30050: GO 30134
30052: LD_INT 4
30054: DOUBLE
30055: EQUAL
30056: IFTRUE 30060
30058: GO 30133
30060: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30061: LD_ADDR_VAR 0 12
30065: PUSH
30066: LD_VAR 0 18
30070: PPUSH
30071: LD_INT 22
30073: PUSH
30074: LD_VAR 0 16
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: LD_INT 2
30085: PUSH
30086: LD_INT 30
30088: PUSH
30089: LD_INT 6
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: PUSH
30096: LD_INT 30
30098: PUSH
30099: LD_INT 7
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 30
30108: PUSH
30109: LD_INT 8
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: LIST
30120: LIST
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: PPUSH
30126: CALL_OW 72
30130: ST_TO_ADDR
30131: GO 30134
30133: POP
// if i = 1 then
30134: LD_VAR 0 8
30138: PUSH
30139: LD_INT 1
30141: EQUAL
30142: IFFALSE 30253
// begin tmp := [ ] ;
30144: LD_ADDR_VAR 0 19
30148: PUSH
30149: EMPTY
30150: ST_TO_ADDR
// for j in f do
30151: LD_ADDR_VAR 0 9
30155: PUSH
30156: LD_VAR 0 12
30160: PUSH
30161: FOR_IN
30162: IFFALSE 30235
// if GetBType ( j ) = b_bunker then
30164: LD_VAR 0 9
30168: PPUSH
30169: CALL_OW 266
30173: PUSH
30174: LD_INT 32
30176: EQUAL
30177: IFFALSE 30204
// tmp := Insert ( tmp , 1 , j ) else
30179: LD_ADDR_VAR 0 19
30183: PUSH
30184: LD_VAR 0 19
30188: PPUSH
30189: LD_INT 1
30191: PPUSH
30192: LD_VAR 0 9
30196: PPUSH
30197: CALL_OW 2
30201: ST_TO_ADDR
30202: GO 30233
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30204: LD_ADDR_VAR 0 19
30208: PUSH
30209: LD_VAR 0 19
30213: PPUSH
30214: LD_VAR 0 19
30218: PUSH
30219: LD_INT 1
30221: PLUS
30222: PPUSH
30223: LD_VAR 0 9
30227: PPUSH
30228: CALL_OW 2
30232: ST_TO_ADDR
30233: GO 30161
30235: POP
30236: POP
// if tmp then
30237: LD_VAR 0 19
30241: IFFALSE 30253
// f := tmp ;
30243: LD_ADDR_VAR 0 12
30247: PUSH
30248: LD_VAR 0 19
30252: ST_TO_ADDR
// end ; x := personel [ i ] ;
30253: LD_ADDR_VAR 0 13
30257: PUSH
30258: LD_VAR 0 6
30262: PUSH
30263: LD_VAR 0 8
30267: ARRAY
30268: ST_TO_ADDR
// if x = - 1 then
30269: LD_VAR 0 13
30273: PUSH
30274: LD_INT 1
30276: NEG
30277: EQUAL
30278: IFFALSE 30487
// begin for j in f do
30280: LD_ADDR_VAR 0 9
30284: PUSH
30285: LD_VAR 0 12
30289: PUSH
30290: FOR_IN
30291: IFFALSE 30483
// repeat InitHc ;
30293: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30297: LD_VAR 0 9
30301: PPUSH
30302: CALL_OW 266
30306: PUSH
30307: LD_INT 5
30309: EQUAL
30310: IFFALSE 30380
// begin if UnitsInside ( j ) < 3 then
30312: LD_VAR 0 9
30316: PPUSH
30317: CALL_OW 313
30321: PUSH
30322: LD_INT 3
30324: LESS
30325: IFFALSE 30361
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30327: LD_INT 0
30329: PPUSH
30330: LD_INT 5
30332: PUSH
30333: LD_INT 8
30335: PUSH
30336: LD_INT 9
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: LIST
30343: PUSH
30344: LD_VAR 0 17
30348: ARRAY
30349: PPUSH
30350: LD_VAR 0 4
30354: PPUSH
30355: CALL_OW 380
30359: GO 30378
// PrepareHuman ( false , i , skill ) ;
30361: LD_INT 0
30363: PPUSH
30364: LD_VAR 0 8
30368: PPUSH
30369: LD_VAR 0 4
30373: PPUSH
30374: CALL_OW 380
// end else
30378: GO 30397
// PrepareHuman ( false , i , skill ) ;
30380: LD_INT 0
30382: PPUSH
30383: LD_VAR 0 8
30387: PPUSH
30388: LD_VAR 0 4
30392: PPUSH
30393: CALL_OW 380
// un := CreateHuman ;
30397: LD_ADDR_VAR 0 14
30401: PUSH
30402: CALL_OW 44
30406: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30407: LD_ADDR_VAR 0 7
30411: PUSH
30412: LD_VAR 0 7
30416: PPUSH
30417: LD_INT 1
30419: PPUSH
30420: LD_VAR 0 14
30424: PPUSH
30425: CALL_OW 2
30429: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30430: LD_VAR 0 14
30434: PPUSH
30435: LD_VAR 0 9
30439: PPUSH
30440: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30444: LD_VAR 0 9
30448: PPUSH
30449: CALL_OW 313
30453: PUSH
30454: LD_INT 6
30456: EQUAL
30457: PUSH
30458: LD_VAR 0 9
30462: PPUSH
30463: CALL_OW 266
30467: PUSH
30468: LD_INT 32
30470: PUSH
30471: LD_INT 31
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: IN
30478: OR
30479: IFFALSE 30293
30481: GO 30290
30483: POP
30484: POP
// end else
30485: GO 30867
// for j = 1 to x do
30487: LD_ADDR_VAR 0 9
30491: PUSH
30492: DOUBLE
30493: LD_INT 1
30495: DEC
30496: ST_TO_ADDR
30497: LD_VAR 0 13
30501: PUSH
30502: FOR_TO
30503: IFFALSE 30865
// begin InitHc ;
30505: CALL_OW 19
// if not f then
30509: LD_VAR 0 12
30513: NOT
30514: IFFALSE 30603
// begin PrepareHuman ( false , i , skill ) ;
30516: LD_INT 0
30518: PPUSH
30519: LD_VAR 0 8
30523: PPUSH
30524: LD_VAR 0 4
30528: PPUSH
30529: CALL_OW 380
// un := CreateHuman ;
30533: LD_ADDR_VAR 0 14
30537: PUSH
30538: CALL_OW 44
30542: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30543: LD_ADDR_VAR 0 7
30547: PUSH
30548: LD_VAR 0 7
30552: PPUSH
30553: LD_INT 1
30555: PPUSH
30556: LD_VAR 0 14
30560: PPUSH
30561: CALL_OW 2
30565: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30566: LD_VAR 0 14
30570: PPUSH
30571: LD_VAR 0 1
30575: PPUSH
30576: CALL_OW 250
30580: PPUSH
30581: LD_VAR 0 1
30585: PPUSH
30586: CALL_OW 251
30590: PPUSH
30591: LD_INT 10
30593: PPUSH
30594: LD_INT 0
30596: PPUSH
30597: CALL_OW 50
// continue ;
30601: GO 30502
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30603: LD_VAR 0 12
30607: PUSH
30608: LD_INT 1
30610: ARRAY
30611: PPUSH
30612: CALL_OW 313
30616: PUSH
30617: LD_VAR 0 12
30621: PUSH
30622: LD_INT 1
30624: ARRAY
30625: PPUSH
30626: CALL_OW 266
30630: PUSH
30631: LD_INT 32
30633: PUSH
30634: LD_INT 31
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: IN
30641: AND
30642: PUSH
30643: LD_VAR 0 12
30647: PUSH
30648: LD_INT 1
30650: ARRAY
30651: PPUSH
30652: CALL_OW 313
30656: PUSH
30657: LD_INT 6
30659: EQUAL
30660: OR
30661: IFFALSE 30681
// f := Delete ( f , 1 ) ;
30663: LD_ADDR_VAR 0 12
30667: PUSH
30668: LD_VAR 0 12
30672: PPUSH
30673: LD_INT 1
30675: PPUSH
30676: CALL_OW 3
30680: ST_TO_ADDR
// if not f then
30681: LD_VAR 0 12
30685: NOT
30686: IFFALSE 30704
// begin x := x + 2 ;
30688: LD_ADDR_VAR 0 13
30692: PUSH
30693: LD_VAR 0 13
30697: PUSH
30698: LD_INT 2
30700: PLUS
30701: ST_TO_ADDR
// continue ;
30702: GO 30502
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30704: LD_VAR 0 12
30708: PUSH
30709: LD_INT 1
30711: ARRAY
30712: PPUSH
30713: CALL_OW 266
30717: PUSH
30718: LD_INT 5
30720: EQUAL
30721: IFFALSE 30795
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30723: LD_VAR 0 12
30727: PUSH
30728: LD_INT 1
30730: ARRAY
30731: PPUSH
30732: CALL_OW 313
30736: PUSH
30737: LD_INT 3
30739: LESS
30740: IFFALSE 30776
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30742: LD_INT 0
30744: PPUSH
30745: LD_INT 5
30747: PUSH
30748: LD_INT 8
30750: PUSH
30751: LD_INT 9
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: LIST
30758: PUSH
30759: LD_VAR 0 17
30763: ARRAY
30764: PPUSH
30765: LD_VAR 0 4
30769: PPUSH
30770: CALL_OW 380
30774: GO 30793
// PrepareHuman ( false , i , skill ) ;
30776: LD_INT 0
30778: PPUSH
30779: LD_VAR 0 8
30783: PPUSH
30784: LD_VAR 0 4
30788: PPUSH
30789: CALL_OW 380
// end else
30793: GO 30812
// PrepareHuman ( false , i , skill ) ;
30795: LD_INT 0
30797: PPUSH
30798: LD_VAR 0 8
30802: PPUSH
30803: LD_VAR 0 4
30807: PPUSH
30808: CALL_OW 380
// un := CreateHuman ;
30812: LD_ADDR_VAR 0 14
30816: PUSH
30817: CALL_OW 44
30821: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30822: LD_ADDR_VAR 0 7
30826: PUSH
30827: LD_VAR 0 7
30831: PPUSH
30832: LD_INT 1
30834: PPUSH
30835: LD_VAR 0 14
30839: PPUSH
30840: CALL_OW 2
30844: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30845: LD_VAR 0 14
30849: PPUSH
30850: LD_VAR 0 12
30854: PUSH
30855: LD_INT 1
30857: ARRAY
30858: PPUSH
30859: CALL_OW 52
// end ;
30863: GO 30502
30865: POP
30866: POP
// end ;
30867: GO 29804
30869: POP
30870: POP
// result := result ^ buildings ;
30871: LD_ADDR_VAR 0 7
30875: PUSH
30876: LD_VAR 0 7
30880: PUSH
30881: LD_VAR 0 18
30885: ADD
30886: ST_TO_ADDR
// end else
30887: GO 31030
// begin for i = 1 to personel do
30889: LD_ADDR_VAR 0 8
30893: PUSH
30894: DOUBLE
30895: LD_INT 1
30897: DEC
30898: ST_TO_ADDR
30899: LD_VAR 0 6
30903: PUSH
30904: FOR_TO
30905: IFFALSE 31028
// begin if i > 4 then
30907: LD_VAR 0 8
30911: PUSH
30912: LD_INT 4
30914: GREATER
30915: IFFALSE 30919
// break ;
30917: GO 31028
// x := personel [ i ] ;
30919: LD_ADDR_VAR 0 13
30923: PUSH
30924: LD_VAR 0 6
30928: PUSH
30929: LD_VAR 0 8
30933: ARRAY
30934: ST_TO_ADDR
// if x = - 1 then
30935: LD_VAR 0 13
30939: PUSH
30940: LD_INT 1
30942: NEG
30943: EQUAL
30944: IFFALSE 30948
// continue ;
30946: GO 30904
// PrepareHuman ( false , i , skill ) ;
30948: LD_INT 0
30950: PPUSH
30951: LD_VAR 0 8
30955: PPUSH
30956: LD_VAR 0 4
30960: PPUSH
30961: CALL_OW 380
// un := CreateHuman ;
30965: LD_ADDR_VAR 0 14
30969: PUSH
30970: CALL_OW 44
30974: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30975: LD_VAR 0 14
30979: PPUSH
30980: LD_VAR 0 1
30984: PPUSH
30985: CALL_OW 250
30989: PPUSH
30990: LD_VAR 0 1
30994: PPUSH
30995: CALL_OW 251
30999: PPUSH
31000: LD_INT 10
31002: PPUSH
31003: LD_INT 0
31005: PPUSH
31006: CALL_OW 50
// result := result ^ un ;
31010: LD_ADDR_VAR 0 7
31014: PUSH
31015: LD_VAR 0 7
31019: PUSH
31020: LD_VAR 0 14
31024: ADD
31025: ST_TO_ADDR
// end ;
31026: GO 30904
31028: POP
31029: POP
// end ; end ;
31030: LD_VAR 0 7
31034: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31035: LD_INT 0
31037: PPUSH
31038: PPUSH
31039: PPUSH
31040: PPUSH
31041: PPUSH
31042: PPUSH
31043: PPUSH
31044: PPUSH
31045: PPUSH
31046: PPUSH
31047: PPUSH
31048: PPUSH
31049: PPUSH
31050: PPUSH
31051: PPUSH
31052: PPUSH
// result := false ;
31053: LD_ADDR_VAR 0 3
31057: PUSH
31058: LD_INT 0
31060: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31061: LD_VAR 0 1
31065: NOT
31066: PUSH
31067: LD_VAR 0 1
31071: PPUSH
31072: CALL_OW 266
31076: PUSH
31077: LD_INT 32
31079: PUSH
31080: LD_INT 33
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: IN
31087: NOT
31088: OR
31089: IFFALSE 31093
// exit ;
31091: GO 32202
// nat := GetNation ( tower ) ;
31093: LD_ADDR_VAR 0 12
31097: PUSH
31098: LD_VAR 0 1
31102: PPUSH
31103: CALL_OW 248
31107: ST_TO_ADDR
// side := GetSide ( tower ) ;
31108: LD_ADDR_VAR 0 16
31112: PUSH
31113: LD_VAR 0 1
31117: PPUSH
31118: CALL_OW 255
31122: ST_TO_ADDR
// x := GetX ( tower ) ;
31123: LD_ADDR_VAR 0 10
31127: PUSH
31128: LD_VAR 0 1
31132: PPUSH
31133: CALL_OW 250
31137: ST_TO_ADDR
// y := GetY ( tower ) ;
31138: LD_ADDR_VAR 0 11
31142: PUSH
31143: LD_VAR 0 1
31147: PPUSH
31148: CALL_OW 251
31152: ST_TO_ADDR
// if not x or not y then
31153: LD_VAR 0 10
31157: NOT
31158: PUSH
31159: LD_VAR 0 11
31163: NOT
31164: OR
31165: IFFALSE 31169
// exit ;
31167: GO 32202
// weapon := 0 ;
31169: LD_ADDR_VAR 0 18
31173: PUSH
31174: LD_INT 0
31176: ST_TO_ADDR
// fac_list := [ ] ;
31177: LD_ADDR_VAR 0 17
31181: PUSH
31182: EMPTY
31183: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
31184: LD_ADDR_VAR 0 6
31188: PUSH
31189: LD_VAR 0 1
31193: PPUSH
31194: CALL_OW 274
31198: PPUSH
31199: LD_VAR 0 2
31203: PPUSH
31204: LD_INT 0
31206: PPUSH
31207: CALL 28773 0 3
31211: PPUSH
31212: LD_INT 30
31214: PUSH
31215: LD_INT 3
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: PPUSH
31222: CALL_OW 72
31226: ST_TO_ADDR
// if not factories then
31227: LD_VAR 0 6
31231: NOT
31232: IFFALSE 31236
// exit ;
31234: GO 32202
// for i in factories do
31236: LD_ADDR_VAR 0 8
31240: PUSH
31241: LD_VAR 0 6
31245: PUSH
31246: FOR_IN
31247: IFFALSE 31272
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31249: LD_ADDR_VAR 0 17
31253: PUSH
31254: LD_VAR 0 17
31258: PUSH
31259: LD_VAR 0 8
31263: PPUSH
31264: CALL_OW 478
31268: UNION
31269: ST_TO_ADDR
31270: GO 31246
31272: POP
31273: POP
// if not fac_list then
31274: LD_VAR 0 17
31278: NOT
31279: IFFALSE 31283
// exit ;
31281: GO 32202
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31283: LD_ADDR_VAR 0 5
31287: PUSH
31288: LD_INT 4
31290: PUSH
31291: LD_INT 5
31293: PUSH
31294: LD_INT 9
31296: PUSH
31297: LD_INT 10
31299: PUSH
31300: LD_INT 6
31302: PUSH
31303: LD_INT 7
31305: PUSH
31306: LD_INT 11
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 27
31320: PUSH
31321: LD_INT 28
31323: PUSH
31324: LD_INT 26
31326: PUSH
31327: LD_INT 30
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 43
31338: PUSH
31339: LD_INT 44
31341: PUSH
31342: LD_INT 46
31344: PUSH
31345: LD_INT 45
31347: PUSH
31348: LD_INT 47
31350: PUSH
31351: LD_INT 49
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: LIST
31366: PUSH
31367: LD_VAR 0 12
31371: ARRAY
31372: ST_TO_ADDR
// list := list isect fac_list ;
31373: LD_ADDR_VAR 0 5
31377: PUSH
31378: LD_VAR 0 5
31382: PUSH
31383: LD_VAR 0 17
31387: ISECT
31388: ST_TO_ADDR
// if not list then
31389: LD_VAR 0 5
31393: NOT
31394: IFFALSE 31398
// exit ;
31396: GO 32202
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31398: LD_VAR 0 12
31402: PUSH
31403: LD_INT 3
31405: EQUAL
31406: PUSH
31407: LD_INT 49
31409: PUSH
31410: LD_VAR 0 5
31414: IN
31415: AND
31416: PUSH
31417: LD_INT 31
31419: PPUSH
31420: LD_VAR 0 16
31424: PPUSH
31425: CALL_OW 321
31429: PUSH
31430: LD_INT 2
31432: EQUAL
31433: AND
31434: IFFALSE 31494
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31436: LD_INT 22
31438: PUSH
31439: LD_VAR 0 16
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: LD_INT 35
31450: PUSH
31451: LD_INT 49
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 91
31460: PUSH
31461: LD_VAR 0 1
31465: PUSH
31466: LD_INT 10
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: LIST
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: LIST
31478: PPUSH
31479: CALL_OW 69
31483: NOT
31484: IFFALSE 31494
// weapon := ru_time_lapser ;
31486: LD_ADDR_VAR 0 18
31490: PUSH
31491: LD_INT 49
31493: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31494: LD_VAR 0 12
31498: PUSH
31499: LD_INT 1
31501: PUSH
31502: LD_INT 2
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: IN
31509: PUSH
31510: LD_INT 11
31512: PUSH
31513: LD_VAR 0 5
31517: IN
31518: PUSH
31519: LD_INT 30
31521: PUSH
31522: LD_VAR 0 5
31526: IN
31527: OR
31528: AND
31529: PUSH
31530: LD_INT 6
31532: PPUSH
31533: LD_VAR 0 16
31537: PPUSH
31538: CALL_OW 321
31542: PUSH
31543: LD_INT 2
31545: EQUAL
31546: AND
31547: IFFALSE 31712
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31549: LD_INT 22
31551: PUSH
31552: LD_VAR 0 16
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: LD_INT 2
31563: PUSH
31564: LD_INT 35
31566: PUSH
31567: LD_INT 11
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: LD_INT 35
31576: PUSH
31577: LD_INT 30
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: LIST
31588: PUSH
31589: LD_INT 91
31591: PUSH
31592: LD_VAR 0 1
31596: PUSH
31597: LD_INT 18
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: LIST
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: LIST
31609: PPUSH
31610: CALL_OW 69
31614: NOT
31615: PUSH
31616: LD_INT 22
31618: PUSH
31619: LD_VAR 0 16
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: PUSH
31628: LD_INT 2
31630: PUSH
31631: LD_INT 30
31633: PUSH
31634: LD_INT 32
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: LD_INT 30
31643: PUSH
31644: LD_INT 33
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 91
31658: PUSH
31659: LD_VAR 0 1
31663: PUSH
31664: LD_INT 12
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: LIST
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: LIST
31676: PUSH
31677: EMPTY
31678: LIST
31679: PPUSH
31680: CALL_OW 69
31684: PUSH
31685: LD_INT 2
31687: GREATER
31688: AND
31689: IFFALSE 31712
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31691: LD_ADDR_VAR 0 18
31695: PUSH
31696: LD_INT 11
31698: PUSH
31699: LD_INT 30
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: PUSH
31706: LD_VAR 0 12
31710: ARRAY
31711: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31712: LD_VAR 0 18
31716: NOT
31717: PUSH
31718: LD_INT 40
31720: PPUSH
31721: LD_VAR 0 16
31725: PPUSH
31726: CALL_OW 321
31730: PUSH
31731: LD_INT 2
31733: EQUAL
31734: AND
31735: PUSH
31736: LD_INT 7
31738: PUSH
31739: LD_VAR 0 5
31743: IN
31744: PUSH
31745: LD_INT 28
31747: PUSH
31748: LD_VAR 0 5
31752: IN
31753: OR
31754: PUSH
31755: LD_INT 45
31757: PUSH
31758: LD_VAR 0 5
31762: IN
31763: OR
31764: AND
31765: IFFALSE 32019
// begin hex := GetHexInfo ( x , y ) ;
31767: LD_ADDR_VAR 0 4
31771: PUSH
31772: LD_VAR 0 10
31776: PPUSH
31777: LD_VAR 0 11
31781: PPUSH
31782: CALL_OW 546
31786: ST_TO_ADDR
// if hex [ 1 ] then
31787: LD_VAR 0 4
31791: PUSH
31792: LD_INT 1
31794: ARRAY
31795: IFFALSE 31799
// exit ;
31797: GO 32202
// height := hex [ 2 ] ;
31799: LD_ADDR_VAR 0 15
31803: PUSH
31804: LD_VAR 0 4
31808: PUSH
31809: LD_INT 2
31811: ARRAY
31812: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31813: LD_ADDR_VAR 0 14
31817: PUSH
31818: LD_INT 0
31820: PUSH
31821: LD_INT 2
31823: PUSH
31824: LD_INT 3
31826: PUSH
31827: LD_INT 5
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: ST_TO_ADDR
// for i in tmp do
31836: LD_ADDR_VAR 0 8
31840: PUSH
31841: LD_VAR 0 14
31845: PUSH
31846: FOR_IN
31847: IFFALSE 32017
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
31849: LD_ADDR_VAR 0 9
31853: PUSH
31854: LD_VAR 0 10
31858: PPUSH
31859: LD_VAR 0 8
31863: PPUSH
31864: LD_INT 5
31866: PPUSH
31867: CALL_OW 272
31871: PUSH
31872: LD_VAR 0 11
31876: PPUSH
31877: LD_VAR 0 8
31881: PPUSH
31882: LD_INT 5
31884: PPUSH
31885: CALL_OW 273
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31894: LD_VAR 0 9
31898: PUSH
31899: LD_INT 1
31901: ARRAY
31902: PPUSH
31903: LD_VAR 0 9
31907: PUSH
31908: LD_INT 2
31910: ARRAY
31911: PPUSH
31912: CALL_OW 488
31916: IFFALSE 32015
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
31918: LD_ADDR_VAR 0 4
31922: PUSH
31923: LD_VAR 0 9
31927: PUSH
31928: LD_INT 1
31930: ARRAY
31931: PPUSH
31932: LD_VAR 0 9
31936: PUSH
31937: LD_INT 2
31939: ARRAY
31940: PPUSH
31941: CALL_OW 546
31945: ST_TO_ADDR
// if hex [ 1 ] then
31946: LD_VAR 0 4
31950: PUSH
31951: LD_INT 1
31953: ARRAY
31954: IFFALSE 31958
// continue ;
31956: GO 31846
// h := hex [ 2 ] ;
31958: LD_ADDR_VAR 0 13
31962: PUSH
31963: LD_VAR 0 4
31967: PUSH
31968: LD_INT 2
31970: ARRAY
31971: ST_TO_ADDR
// if h + 7 < height then
31972: LD_VAR 0 13
31976: PUSH
31977: LD_INT 7
31979: PLUS
31980: PUSH
31981: LD_VAR 0 15
31985: LESS
31986: IFFALSE 32015
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
31988: LD_ADDR_VAR 0 18
31992: PUSH
31993: LD_INT 7
31995: PUSH
31996: LD_INT 28
31998: PUSH
31999: LD_INT 45
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: LIST
32006: PUSH
32007: LD_VAR 0 12
32011: ARRAY
32012: ST_TO_ADDR
// break ;
32013: GO 32017
// end ; end ; end ;
32015: GO 31846
32017: POP
32018: POP
// end ; if not weapon then
32019: LD_VAR 0 18
32023: NOT
32024: IFFALSE 32084
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32026: LD_ADDR_VAR 0 5
32030: PUSH
32031: LD_VAR 0 5
32035: PUSH
32036: LD_INT 11
32038: PUSH
32039: LD_INT 30
32041: PUSH
32042: LD_INT 49
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: LIST
32049: DIFF
32050: ST_TO_ADDR
// if not list then
32051: LD_VAR 0 5
32055: NOT
32056: IFFALSE 32060
// exit ;
32058: GO 32202
// weapon := list [ rand ( 1 , list ) ] ;
32060: LD_ADDR_VAR 0 18
32064: PUSH
32065: LD_VAR 0 5
32069: PUSH
32070: LD_INT 1
32072: PPUSH
32073: LD_VAR 0 5
32077: PPUSH
32078: CALL_OW 12
32082: ARRAY
32083: ST_TO_ADDR
// end ; if weapon then
32084: LD_VAR 0 18
32088: IFFALSE 32202
// begin tmp := CostOfWeapon ( weapon ) ;
32090: LD_ADDR_VAR 0 14
32094: PUSH
32095: LD_VAR 0 18
32099: PPUSH
32100: CALL_OW 451
32104: ST_TO_ADDR
// j := GetBase ( tower ) ;
32105: LD_ADDR_VAR 0 9
32109: PUSH
32110: LD_VAR 0 1
32114: PPUSH
32115: CALL_OW 274
32119: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32120: LD_VAR 0 9
32124: PPUSH
32125: LD_INT 1
32127: PPUSH
32128: CALL_OW 275
32132: PUSH
32133: LD_VAR 0 14
32137: PUSH
32138: LD_INT 1
32140: ARRAY
32141: GREATEREQUAL
32142: PUSH
32143: LD_VAR 0 9
32147: PPUSH
32148: LD_INT 2
32150: PPUSH
32151: CALL_OW 275
32155: PUSH
32156: LD_VAR 0 14
32160: PUSH
32161: LD_INT 2
32163: ARRAY
32164: GREATEREQUAL
32165: AND
32166: PUSH
32167: LD_VAR 0 9
32171: PPUSH
32172: LD_INT 3
32174: PPUSH
32175: CALL_OW 275
32179: PUSH
32180: LD_VAR 0 14
32184: PUSH
32185: LD_INT 3
32187: ARRAY
32188: GREATEREQUAL
32189: AND
32190: IFFALSE 32202
// result := weapon ;
32192: LD_ADDR_VAR 0 3
32196: PUSH
32197: LD_VAR 0 18
32201: ST_TO_ADDR
// end ; end ;
32202: LD_VAR 0 3
32206: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32207: LD_INT 0
32209: PPUSH
32210: PPUSH
// result := true ;
32211: LD_ADDR_VAR 0 3
32215: PUSH
32216: LD_INT 1
32218: ST_TO_ADDR
// if array1 = array2 then
32219: LD_VAR 0 1
32223: PUSH
32224: LD_VAR 0 2
32228: EQUAL
32229: IFFALSE 32289
// begin for i = 1 to array1 do
32231: LD_ADDR_VAR 0 4
32235: PUSH
32236: DOUBLE
32237: LD_INT 1
32239: DEC
32240: ST_TO_ADDR
32241: LD_VAR 0 1
32245: PUSH
32246: FOR_TO
32247: IFFALSE 32285
// if array1 [ i ] <> array2 [ i ] then
32249: LD_VAR 0 1
32253: PUSH
32254: LD_VAR 0 4
32258: ARRAY
32259: PUSH
32260: LD_VAR 0 2
32264: PUSH
32265: LD_VAR 0 4
32269: ARRAY
32270: NONEQUAL
32271: IFFALSE 32283
// begin result := false ;
32273: LD_ADDR_VAR 0 3
32277: PUSH
32278: LD_INT 0
32280: ST_TO_ADDR
// break ;
32281: GO 32285
// end ;
32283: GO 32246
32285: POP
32286: POP
// end else
32287: GO 32297
// result := false ;
32289: LD_ADDR_VAR 0 3
32293: PUSH
32294: LD_INT 0
32296: ST_TO_ADDR
// end ;
32297: LD_VAR 0 3
32301: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
32302: LD_INT 0
32304: PPUSH
32305: PPUSH
// if not array1 or not array2 then
32306: LD_VAR 0 1
32310: NOT
32311: PUSH
32312: LD_VAR 0 2
32316: NOT
32317: OR
32318: IFFALSE 32322
// exit ;
32320: GO 32386
// result := true ;
32322: LD_ADDR_VAR 0 3
32326: PUSH
32327: LD_INT 1
32329: ST_TO_ADDR
// for i = 1 to array1 do
32330: LD_ADDR_VAR 0 4
32334: PUSH
32335: DOUBLE
32336: LD_INT 1
32338: DEC
32339: ST_TO_ADDR
32340: LD_VAR 0 1
32344: PUSH
32345: FOR_TO
32346: IFFALSE 32384
// if array1 [ i ] <> array2 [ i ] then
32348: LD_VAR 0 1
32352: PUSH
32353: LD_VAR 0 4
32357: ARRAY
32358: PUSH
32359: LD_VAR 0 2
32363: PUSH
32364: LD_VAR 0 4
32368: ARRAY
32369: NONEQUAL
32370: IFFALSE 32382
// begin result := false ;
32372: LD_ADDR_VAR 0 3
32376: PUSH
32377: LD_INT 0
32379: ST_TO_ADDR
// break ;
32380: GO 32384
// end ;
32382: GO 32345
32384: POP
32385: POP
// end ;
32386: LD_VAR 0 3
32390: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32391: LD_INT 0
32393: PPUSH
32394: PPUSH
32395: PPUSH
// pom := GetBase ( fac ) ;
32396: LD_ADDR_VAR 0 5
32400: PUSH
32401: LD_VAR 0 1
32405: PPUSH
32406: CALL_OW 274
32410: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32411: LD_ADDR_VAR 0 4
32415: PUSH
32416: LD_VAR 0 2
32420: PUSH
32421: LD_INT 1
32423: ARRAY
32424: PPUSH
32425: LD_VAR 0 2
32429: PUSH
32430: LD_INT 2
32432: ARRAY
32433: PPUSH
32434: LD_VAR 0 2
32438: PUSH
32439: LD_INT 3
32441: ARRAY
32442: PPUSH
32443: LD_VAR 0 2
32447: PUSH
32448: LD_INT 4
32450: ARRAY
32451: PPUSH
32452: CALL_OW 449
32456: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32457: LD_ADDR_VAR 0 3
32461: PUSH
32462: LD_VAR 0 5
32466: PPUSH
32467: LD_INT 1
32469: PPUSH
32470: CALL_OW 275
32474: PUSH
32475: LD_VAR 0 4
32479: PUSH
32480: LD_INT 1
32482: ARRAY
32483: GREATEREQUAL
32484: PUSH
32485: LD_VAR 0 5
32489: PPUSH
32490: LD_INT 2
32492: PPUSH
32493: CALL_OW 275
32497: PUSH
32498: LD_VAR 0 4
32502: PUSH
32503: LD_INT 2
32505: ARRAY
32506: GREATEREQUAL
32507: AND
32508: PUSH
32509: LD_VAR 0 5
32513: PPUSH
32514: LD_INT 3
32516: PPUSH
32517: CALL_OW 275
32521: PUSH
32522: LD_VAR 0 4
32526: PUSH
32527: LD_INT 3
32529: ARRAY
32530: GREATEREQUAL
32531: AND
32532: ST_TO_ADDR
// end ;
32533: LD_VAR 0 3
32537: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32538: LD_INT 0
32540: PPUSH
32541: PPUSH
32542: PPUSH
32543: PPUSH
// pom := GetBase ( building ) ;
32544: LD_ADDR_VAR 0 3
32548: PUSH
32549: LD_VAR 0 1
32553: PPUSH
32554: CALL_OW 274
32558: ST_TO_ADDR
// if not pom then
32559: LD_VAR 0 3
32563: NOT
32564: IFFALSE 32568
// exit ;
32566: GO 32738
// btype := GetBType ( building ) ;
32568: LD_ADDR_VAR 0 5
32572: PUSH
32573: LD_VAR 0 1
32577: PPUSH
32578: CALL_OW 266
32582: ST_TO_ADDR
// if btype = b_armoury then
32583: LD_VAR 0 5
32587: PUSH
32588: LD_INT 4
32590: EQUAL
32591: IFFALSE 32601
// btype := b_barracks ;
32593: LD_ADDR_VAR 0 5
32597: PUSH
32598: LD_INT 5
32600: ST_TO_ADDR
// if btype = b_depot then
32601: LD_VAR 0 5
32605: PUSH
32606: LD_INT 0
32608: EQUAL
32609: IFFALSE 32619
// btype := b_warehouse ;
32611: LD_ADDR_VAR 0 5
32615: PUSH
32616: LD_INT 1
32618: ST_TO_ADDR
// if btype = b_workshop then
32619: LD_VAR 0 5
32623: PUSH
32624: LD_INT 2
32626: EQUAL
32627: IFFALSE 32637
// btype := b_factory ;
32629: LD_ADDR_VAR 0 5
32633: PUSH
32634: LD_INT 3
32636: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32637: LD_ADDR_VAR 0 4
32641: PUSH
32642: LD_VAR 0 5
32646: PPUSH
32647: LD_VAR 0 1
32651: PPUSH
32652: CALL_OW 248
32656: PPUSH
32657: CALL_OW 450
32661: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32662: LD_ADDR_VAR 0 2
32666: PUSH
32667: LD_VAR 0 3
32671: PPUSH
32672: LD_INT 1
32674: PPUSH
32675: CALL_OW 275
32679: PUSH
32680: LD_VAR 0 4
32684: PUSH
32685: LD_INT 1
32687: ARRAY
32688: GREATEREQUAL
32689: PUSH
32690: LD_VAR 0 3
32694: PPUSH
32695: LD_INT 2
32697: PPUSH
32698: CALL_OW 275
32702: PUSH
32703: LD_VAR 0 4
32707: PUSH
32708: LD_INT 2
32710: ARRAY
32711: GREATEREQUAL
32712: AND
32713: PUSH
32714: LD_VAR 0 3
32718: PPUSH
32719: LD_INT 3
32721: PPUSH
32722: CALL_OW 275
32726: PUSH
32727: LD_VAR 0 4
32731: PUSH
32732: LD_INT 3
32734: ARRAY
32735: GREATEREQUAL
32736: AND
32737: ST_TO_ADDR
// end ;
32738: LD_VAR 0 2
32742: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32743: LD_INT 0
32745: PPUSH
32746: PPUSH
32747: PPUSH
// pom := GetBase ( building ) ;
32748: LD_ADDR_VAR 0 4
32752: PUSH
32753: LD_VAR 0 1
32757: PPUSH
32758: CALL_OW 274
32762: ST_TO_ADDR
// if not pom then
32763: LD_VAR 0 4
32767: NOT
32768: IFFALSE 32772
// exit ;
32770: GO 32873
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32772: LD_ADDR_VAR 0 5
32776: PUSH
32777: LD_VAR 0 2
32781: PPUSH
32782: LD_VAR 0 1
32786: PPUSH
32787: CALL_OW 248
32791: PPUSH
32792: CALL_OW 450
32796: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32797: LD_ADDR_VAR 0 3
32801: PUSH
32802: LD_VAR 0 4
32806: PPUSH
32807: LD_INT 1
32809: PPUSH
32810: CALL_OW 275
32814: PUSH
32815: LD_VAR 0 5
32819: PUSH
32820: LD_INT 1
32822: ARRAY
32823: GREATEREQUAL
32824: PUSH
32825: LD_VAR 0 4
32829: PPUSH
32830: LD_INT 2
32832: PPUSH
32833: CALL_OW 275
32837: PUSH
32838: LD_VAR 0 5
32842: PUSH
32843: LD_INT 2
32845: ARRAY
32846: GREATEREQUAL
32847: AND
32848: PUSH
32849: LD_VAR 0 4
32853: PPUSH
32854: LD_INT 3
32856: PPUSH
32857: CALL_OW 275
32861: PUSH
32862: LD_VAR 0 5
32866: PUSH
32867: LD_INT 3
32869: ARRAY
32870: GREATEREQUAL
32871: AND
32872: ST_TO_ADDR
// end ;
32873: LD_VAR 0 3
32877: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
32878: LD_INT 0
32880: PPUSH
32881: PPUSH
32882: PPUSH
32883: PPUSH
32884: PPUSH
32885: PPUSH
32886: PPUSH
32887: PPUSH
32888: PPUSH
32889: PPUSH
32890: PPUSH
// result := false ;
32891: LD_ADDR_VAR 0 8
32895: PUSH
32896: LD_INT 0
32898: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
32899: LD_VAR 0 5
32903: NOT
32904: PUSH
32905: LD_VAR 0 1
32909: NOT
32910: OR
32911: PUSH
32912: LD_VAR 0 2
32916: NOT
32917: OR
32918: PUSH
32919: LD_VAR 0 3
32923: NOT
32924: OR
32925: IFFALSE 32929
// exit ;
32927: GO 33743
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
32929: LD_ADDR_VAR 0 14
32933: PUSH
32934: LD_VAR 0 1
32938: PPUSH
32939: LD_VAR 0 2
32943: PPUSH
32944: LD_VAR 0 3
32948: PPUSH
32949: LD_VAR 0 4
32953: PPUSH
32954: LD_VAR 0 5
32958: PUSH
32959: LD_INT 1
32961: ARRAY
32962: PPUSH
32963: CALL_OW 248
32967: PPUSH
32968: LD_INT 0
32970: PPUSH
32971: CALL 34996 0 6
32975: ST_TO_ADDR
// if not hexes then
32976: LD_VAR 0 14
32980: NOT
32981: IFFALSE 32985
// exit ;
32983: GO 33743
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32985: LD_ADDR_VAR 0 17
32989: PUSH
32990: LD_VAR 0 5
32994: PPUSH
32995: LD_INT 22
32997: PUSH
32998: LD_VAR 0 13
33002: PPUSH
33003: CALL_OW 255
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 2
33014: PUSH
33015: LD_INT 30
33017: PUSH
33018: LD_INT 0
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: PUSH
33025: LD_INT 30
33027: PUSH
33028: LD_INT 1
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: LIST
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PPUSH
33044: CALL_OW 72
33048: ST_TO_ADDR
// for i = 1 to hexes do
33049: LD_ADDR_VAR 0 9
33053: PUSH
33054: DOUBLE
33055: LD_INT 1
33057: DEC
33058: ST_TO_ADDR
33059: LD_VAR 0 14
33063: PUSH
33064: FOR_TO
33065: IFFALSE 33741
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33067: LD_ADDR_VAR 0 13
33071: PUSH
33072: LD_VAR 0 14
33076: PUSH
33077: LD_VAR 0 9
33081: ARRAY
33082: PUSH
33083: LD_INT 1
33085: ARRAY
33086: PPUSH
33087: LD_VAR 0 14
33091: PUSH
33092: LD_VAR 0 9
33096: ARRAY
33097: PUSH
33098: LD_INT 2
33100: ARRAY
33101: PPUSH
33102: CALL_OW 428
33106: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33107: LD_VAR 0 14
33111: PUSH
33112: LD_VAR 0 9
33116: ARRAY
33117: PUSH
33118: LD_INT 1
33120: ARRAY
33121: PPUSH
33122: LD_VAR 0 14
33126: PUSH
33127: LD_VAR 0 9
33131: ARRAY
33132: PUSH
33133: LD_INT 2
33135: ARRAY
33136: PPUSH
33137: CALL_OW 351
33141: PUSH
33142: LD_VAR 0 14
33146: PUSH
33147: LD_VAR 0 9
33151: ARRAY
33152: PUSH
33153: LD_INT 1
33155: ARRAY
33156: PPUSH
33157: LD_VAR 0 14
33161: PUSH
33162: LD_VAR 0 9
33166: ARRAY
33167: PUSH
33168: LD_INT 2
33170: ARRAY
33171: PPUSH
33172: CALL_OW 488
33176: NOT
33177: OR
33178: PUSH
33179: LD_VAR 0 13
33183: PPUSH
33184: CALL_OW 247
33188: PUSH
33189: LD_INT 3
33191: EQUAL
33192: OR
33193: IFFALSE 33199
// exit ;
33195: POP
33196: POP
33197: GO 33743
// if not tmp then
33199: LD_VAR 0 13
33203: NOT
33204: IFFALSE 33208
// continue ;
33206: GO 33064
// result := true ;
33208: LD_ADDR_VAR 0 8
33212: PUSH
33213: LD_INT 1
33215: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
33216: LD_VAR 0 6
33220: PUSH
33221: LD_VAR 0 13
33225: PPUSH
33226: CALL_OW 247
33230: PUSH
33231: LD_INT 2
33233: EQUAL
33234: AND
33235: PUSH
33236: LD_VAR 0 13
33240: PPUSH
33241: CALL_OW 263
33245: PUSH
33246: LD_INT 1
33248: EQUAL
33249: AND
33250: IFFALSE 33414
// begin if IsDrivenBy ( tmp ) then
33252: LD_VAR 0 13
33256: PPUSH
33257: CALL_OW 311
33261: IFFALSE 33265
// continue ;
33263: GO 33064
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
33265: LD_VAR 0 6
33269: PPUSH
33270: LD_INT 3
33272: PUSH
33273: LD_INT 60
33275: PUSH
33276: EMPTY
33277: LIST
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: LD_INT 3
33285: PUSH
33286: LD_INT 55
33288: PUSH
33289: EMPTY
33290: LIST
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PPUSH
33300: CALL_OW 72
33304: IFFALSE 33412
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
33306: LD_ADDR_VAR 0 18
33310: PUSH
33311: LD_VAR 0 6
33315: PPUSH
33316: LD_INT 3
33318: PUSH
33319: LD_INT 60
33321: PUSH
33322: EMPTY
33323: LIST
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PUSH
33329: LD_INT 3
33331: PUSH
33332: LD_INT 55
33334: PUSH
33335: EMPTY
33336: LIST
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PPUSH
33346: CALL_OW 72
33350: PUSH
33351: LD_INT 1
33353: ARRAY
33354: ST_TO_ADDR
// if IsInUnit ( driver ) then
33355: LD_VAR 0 18
33359: PPUSH
33360: CALL_OW 310
33364: IFFALSE 33375
// ComExit ( driver ) ;
33366: LD_VAR 0 18
33370: PPUSH
33371: CALL 58797 0 1
// AddComEnterUnit ( driver , tmp ) ;
33375: LD_VAR 0 18
33379: PPUSH
33380: LD_VAR 0 13
33384: PPUSH
33385: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
33389: LD_VAR 0 18
33393: PPUSH
33394: LD_VAR 0 7
33398: PPUSH
33399: CALL_OW 173
// AddComExitVehicle ( driver ) ;
33403: LD_VAR 0 18
33407: PPUSH
33408: CALL_OW 181
// end ; continue ;
33412: GO 33064
// end ; if not cleaners or not tmp in cleaners then
33414: LD_VAR 0 6
33418: NOT
33419: PUSH
33420: LD_VAR 0 13
33424: PUSH
33425: LD_VAR 0 6
33429: IN
33430: NOT
33431: OR
33432: IFFALSE 33739
// begin if dep then
33434: LD_VAR 0 17
33438: IFFALSE 33574
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33440: LD_ADDR_VAR 0 16
33444: PUSH
33445: LD_VAR 0 17
33449: PUSH
33450: LD_INT 1
33452: ARRAY
33453: PPUSH
33454: CALL_OW 250
33458: PPUSH
33459: LD_VAR 0 17
33463: PUSH
33464: LD_INT 1
33466: ARRAY
33467: PPUSH
33468: CALL_OW 254
33472: PPUSH
33473: LD_INT 5
33475: PPUSH
33476: CALL_OW 272
33480: PUSH
33481: LD_VAR 0 17
33485: PUSH
33486: LD_INT 1
33488: ARRAY
33489: PPUSH
33490: CALL_OW 251
33494: PPUSH
33495: LD_VAR 0 17
33499: PUSH
33500: LD_INT 1
33502: ARRAY
33503: PPUSH
33504: CALL_OW 254
33508: PPUSH
33509: LD_INT 5
33511: PPUSH
33512: CALL_OW 273
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33521: LD_VAR 0 16
33525: PUSH
33526: LD_INT 1
33528: ARRAY
33529: PPUSH
33530: LD_VAR 0 16
33534: PUSH
33535: LD_INT 2
33537: ARRAY
33538: PPUSH
33539: CALL_OW 488
33543: IFFALSE 33574
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33545: LD_VAR 0 13
33549: PPUSH
33550: LD_VAR 0 16
33554: PUSH
33555: LD_INT 1
33557: ARRAY
33558: PPUSH
33559: LD_VAR 0 16
33563: PUSH
33564: LD_INT 2
33566: ARRAY
33567: PPUSH
33568: CALL_OW 111
// continue ;
33572: GO 33064
// end ; end ; r := GetDir ( tmp ) ;
33574: LD_ADDR_VAR 0 15
33578: PUSH
33579: LD_VAR 0 13
33583: PPUSH
33584: CALL_OW 254
33588: ST_TO_ADDR
// if r = 5 then
33589: LD_VAR 0 15
33593: PUSH
33594: LD_INT 5
33596: EQUAL
33597: IFFALSE 33607
// r := 0 ;
33599: LD_ADDR_VAR 0 15
33603: PUSH
33604: LD_INT 0
33606: ST_TO_ADDR
// for j = r to 5 do
33607: LD_ADDR_VAR 0 10
33611: PUSH
33612: DOUBLE
33613: LD_VAR 0 15
33617: DEC
33618: ST_TO_ADDR
33619: LD_INT 5
33621: PUSH
33622: FOR_TO
33623: IFFALSE 33737
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33625: LD_ADDR_VAR 0 11
33629: PUSH
33630: LD_VAR 0 13
33634: PPUSH
33635: CALL_OW 250
33639: PPUSH
33640: LD_VAR 0 10
33644: PPUSH
33645: LD_INT 2
33647: PPUSH
33648: CALL_OW 272
33652: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33653: LD_ADDR_VAR 0 12
33657: PUSH
33658: LD_VAR 0 13
33662: PPUSH
33663: CALL_OW 251
33667: PPUSH
33668: LD_VAR 0 10
33672: PPUSH
33673: LD_INT 2
33675: PPUSH
33676: CALL_OW 273
33680: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33681: LD_VAR 0 11
33685: PPUSH
33686: LD_VAR 0 12
33690: PPUSH
33691: CALL_OW 488
33695: PUSH
33696: LD_VAR 0 11
33700: PPUSH
33701: LD_VAR 0 12
33705: PPUSH
33706: CALL_OW 428
33710: NOT
33711: AND
33712: IFFALSE 33735
// begin ComMoveXY ( tmp , _x , _y ) ;
33714: LD_VAR 0 13
33718: PPUSH
33719: LD_VAR 0 11
33723: PPUSH
33724: LD_VAR 0 12
33728: PPUSH
33729: CALL_OW 111
// break ;
33733: GO 33737
// end ; end ;
33735: GO 33622
33737: POP
33738: POP
// end ; end ;
33739: GO 33064
33741: POP
33742: POP
// end ;
33743: LD_VAR 0 8
33747: RET
// export function BuildingTechInvented ( side , btype ) ; begin
33748: LD_INT 0
33750: PPUSH
// result := true ;
33751: LD_ADDR_VAR 0 3
33755: PUSH
33756: LD_INT 1
33758: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
33759: LD_VAR 0 2
33763: PUSH
33764: LD_INT 24
33766: DOUBLE
33767: EQUAL
33768: IFTRUE 33778
33770: LD_INT 33
33772: DOUBLE
33773: EQUAL
33774: IFTRUE 33778
33776: GO 33803
33778: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
33779: LD_ADDR_VAR 0 3
33783: PUSH
33784: LD_INT 32
33786: PPUSH
33787: LD_VAR 0 1
33791: PPUSH
33792: CALL_OW 321
33796: PUSH
33797: LD_INT 2
33799: EQUAL
33800: ST_TO_ADDR
33801: GO 34119
33803: LD_INT 20
33805: DOUBLE
33806: EQUAL
33807: IFTRUE 33811
33809: GO 33836
33811: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
33812: LD_ADDR_VAR 0 3
33816: PUSH
33817: LD_INT 6
33819: PPUSH
33820: LD_VAR 0 1
33824: PPUSH
33825: CALL_OW 321
33829: PUSH
33830: LD_INT 2
33832: EQUAL
33833: ST_TO_ADDR
33834: GO 34119
33836: LD_INT 22
33838: DOUBLE
33839: EQUAL
33840: IFTRUE 33850
33842: LD_INT 36
33844: DOUBLE
33845: EQUAL
33846: IFTRUE 33850
33848: GO 33875
33850: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
33851: LD_ADDR_VAR 0 3
33855: PUSH
33856: LD_INT 15
33858: PPUSH
33859: LD_VAR 0 1
33863: PPUSH
33864: CALL_OW 321
33868: PUSH
33869: LD_INT 2
33871: EQUAL
33872: ST_TO_ADDR
33873: GO 34119
33875: LD_INT 30
33877: DOUBLE
33878: EQUAL
33879: IFTRUE 33883
33881: GO 33908
33883: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
33884: LD_ADDR_VAR 0 3
33888: PUSH
33889: LD_INT 20
33891: PPUSH
33892: LD_VAR 0 1
33896: PPUSH
33897: CALL_OW 321
33901: PUSH
33902: LD_INT 2
33904: EQUAL
33905: ST_TO_ADDR
33906: GO 34119
33908: LD_INT 28
33910: DOUBLE
33911: EQUAL
33912: IFTRUE 33922
33914: LD_INT 21
33916: DOUBLE
33917: EQUAL
33918: IFTRUE 33922
33920: GO 33947
33922: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
33923: LD_ADDR_VAR 0 3
33927: PUSH
33928: LD_INT 21
33930: PPUSH
33931: LD_VAR 0 1
33935: PPUSH
33936: CALL_OW 321
33940: PUSH
33941: LD_INT 2
33943: EQUAL
33944: ST_TO_ADDR
33945: GO 34119
33947: LD_INT 16
33949: DOUBLE
33950: EQUAL
33951: IFTRUE 33955
33953: GO 33980
33955: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
33956: LD_ADDR_VAR 0 3
33960: PUSH
33961: LD_INT 84
33963: PPUSH
33964: LD_VAR 0 1
33968: PPUSH
33969: CALL_OW 321
33973: PUSH
33974: LD_INT 2
33976: EQUAL
33977: ST_TO_ADDR
33978: GO 34119
33980: LD_INT 19
33982: DOUBLE
33983: EQUAL
33984: IFTRUE 33994
33986: LD_INT 23
33988: DOUBLE
33989: EQUAL
33990: IFTRUE 33994
33992: GO 34019
33994: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
33995: LD_ADDR_VAR 0 3
33999: PUSH
34000: LD_INT 83
34002: PPUSH
34003: LD_VAR 0 1
34007: PPUSH
34008: CALL_OW 321
34012: PUSH
34013: LD_INT 2
34015: EQUAL
34016: ST_TO_ADDR
34017: GO 34119
34019: LD_INT 17
34021: DOUBLE
34022: EQUAL
34023: IFTRUE 34027
34025: GO 34052
34027: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
34028: LD_ADDR_VAR 0 3
34032: PUSH
34033: LD_INT 39
34035: PPUSH
34036: LD_VAR 0 1
34040: PPUSH
34041: CALL_OW 321
34045: PUSH
34046: LD_INT 2
34048: EQUAL
34049: ST_TO_ADDR
34050: GO 34119
34052: LD_INT 18
34054: DOUBLE
34055: EQUAL
34056: IFTRUE 34060
34058: GO 34085
34060: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
34061: LD_ADDR_VAR 0 3
34065: PUSH
34066: LD_INT 40
34068: PPUSH
34069: LD_VAR 0 1
34073: PPUSH
34074: CALL_OW 321
34078: PUSH
34079: LD_INT 2
34081: EQUAL
34082: ST_TO_ADDR
34083: GO 34119
34085: LD_INT 27
34087: DOUBLE
34088: EQUAL
34089: IFTRUE 34093
34091: GO 34118
34093: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
34094: LD_ADDR_VAR 0 3
34098: PUSH
34099: LD_INT 35
34101: PPUSH
34102: LD_VAR 0 1
34106: PPUSH
34107: CALL_OW 321
34111: PUSH
34112: LD_INT 2
34114: EQUAL
34115: ST_TO_ADDR
34116: GO 34119
34118: POP
// end ;
34119: LD_VAR 0 3
34123: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
34124: LD_INT 0
34126: PPUSH
34127: PPUSH
34128: PPUSH
34129: PPUSH
34130: PPUSH
34131: PPUSH
34132: PPUSH
34133: PPUSH
34134: PPUSH
34135: PPUSH
34136: PPUSH
// result := false ;
34137: LD_ADDR_VAR 0 6
34141: PUSH
34142: LD_INT 0
34144: ST_TO_ADDR
// if btype = b_depot then
34145: LD_VAR 0 2
34149: PUSH
34150: LD_INT 0
34152: EQUAL
34153: IFFALSE 34165
// begin result := true ;
34155: LD_ADDR_VAR 0 6
34159: PUSH
34160: LD_INT 1
34162: ST_TO_ADDR
// exit ;
34163: GO 34991
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34165: LD_VAR 0 1
34169: NOT
34170: PUSH
34171: LD_VAR 0 1
34175: PPUSH
34176: CALL_OW 266
34180: PUSH
34181: LD_INT 0
34183: PUSH
34184: LD_INT 1
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: IN
34191: NOT
34192: OR
34193: PUSH
34194: LD_VAR 0 2
34198: NOT
34199: OR
34200: PUSH
34201: LD_VAR 0 5
34205: PUSH
34206: LD_INT 0
34208: PUSH
34209: LD_INT 1
34211: PUSH
34212: LD_INT 2
34214: PUSH
34215: LD_INT 3
34217: PUSH
34218: LD_INT 4
34220: PUSH
34221: LD_INT 5
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: IN
34232: NOT
34233: OR
34234: PUSH
34235: LD_VAR 0 3
34239: PPUSH
34240: LD_VAR 0 4
34244: PPUSH
34245: CALL_OW 488
34249: NOT
34250: OR
34251: IFFALSE 34255
// exit ;
34253: GO 34991
// side := GetSide ( depot ) ;
34255: LD_ADDR_VAR 0 9
34259: PUSH
34260: LD_VAR 0 1
34264: PPUSH
34265: CALL_OW 255
34269: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
34270: LD_VAR 0 9
34274: PPUSH
34275: LD_VAR 0 2
34279: PPUSH
34280: CALL 33748 0 2
34284: NOT
34285: IFFALSE 34289
// exit ;
34287: GO 34991
// pom := GetBase ( depot ) ;
34289: LD_ADDR_VAR 0 10
34293: PUSH
34294: LD_VAR 0 1
34298: PPUSH
34299: CALL_OW 274
34303: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34304: LD_ADDR_VAR 0 11
34308: PUSH
34309: LD_VAR 0 2
34313: PPUSH
34314: LD_VAR 0 1
34318: PPUSH
34319: CALL_OW 248
34323: PPUSH
34324: CALL_OW 450
34328: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34329: LD_VAR 0 10
34333: PPUSH
34334: LD_INT 1
34336: PPUSH
34337: CALL_OW 275
34341: PUSH
34342: LD_VAR 0 11
34346: PUSH
34347: LD_INT 1
34349: ARRAY
34350: GREATEREQUAL
34351: PUSH
34352: LD_VAR 0 10
34356: PPUSH
34357: LD_INT 2
34359: PPUSH
34360: CALL_OW 275
34364: PUSH
34365: LD_VAR 0 11
34369: PUSH
34370: LD_INT 2
34372: ARRAY
34373: GREATEREQUAL
34374: AND
34375: PUSH
34376: LD_VAR 0 10
34380: PPUSH
34381: LD_INT 3
34383: PPUSH
34384: CALL_OW 275
34388: PUSH
34389: LD_VAR 0 11
34393: PUSH
34394: LD_INT 3
34396: ARRAY
34397: GREATEREQUAL
34398: AND
34399: NOT
34400: IFFALSE 34404
// exit ;
34402: GO 34991
// if GetBType ( depot ) = b_depot then
34404: LD_VAR 0 1
34408: PPUSH
34409: CALL_OW 266
34413: PUSH
34414: LD_INT 0
34416: EQUAL
34417: IFFALSE 34429
// dist := 28 else
34419: LD_ADDR_VAR 0 14
34423: PUSH
34424: LD_INT 28
34426: ST_TO_ADDR
34427: GO 34437
// dist := 36 ;
34429: LD_ADDR_VAR 0 14
34433: PUSH
34434: LD_INT 36
34436: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34437: LD_VAR 0 1
34441: PPUSH
34442: LD_VAR 0 3
34446: PPUSH
34447: LD_VAR 0 4
34451: PPUSH
34452: CALL_OW 297
34456: PUSH
34457: LD_VAR 0 14
34461: GREATER
34462: IFFALSE 34466
// exit ;
34464: GO 34991
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34466: LD_ADDR_VAR 0 12
34470: PUSH
34471: LD_VAR 0 2
34475: PPUSH
34476: LD_VAR 0 3
34480: PPUSH
34481: LD_VAR 0 4
34485: PPUSH
34486: LD_VAR 0 5
34490: PPUSH
34491: LD_VAR 0 1
34495: PPUSH
34496: CALL_OW 248
34500: PPUSH
34501: LD_INT 0
34503: PPUSH
34504: CALL 34996 0 6
34508: ST_TO_ADDR
// if not hexes then
34509: LD_VAR 0 12
34513: NOT
34514: IFFALSE 34518
// exit ;
34516: GO 34991
// hex := GetHexInfo ( x , y ) ;
34518: LD_ADDR_VAR 0 15
34522: PUSH
34523: LD_VAR 0 3
34527: PPUSH
34528: LD_VAR 0 4
34532: PPUSH
34533: CALL_OW 546
34537: ST_TO_ADDR
// if hex [ 1 ] then
34538: LD_VAR 0 15
34542: PUSH
34543: LD_INT 1
34545: ARRAY
34546: IFFALSE 34550
// exit ;
34548: GO 34991
// height := hex [ 2 ] ;
34550: LD_ADDR_VAR 0 13
34554: PUSH
34555: LD_VAR 0 15
34559: PUSH
34560: LD_INT 2
34562: ARRAY
34563: ST_TO_ADDR
// for i = 1 to hexes do
34564: LD_ADDR_VAR 0 7
34568: PUSH
34569: DOUBLE
34570: LD_INT 1
34572: DEC
34573: ST_TO_ADDR
34574: LD_VAR 0 12
34578: PUSH
34579: FOR_TO
34580: IFFALSE 34910
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34582: LD_VAR 0 12
34586: PUSH
34587: LD_VAR 0 7
34591: ARRAY
34592: PUSH
34593: LD_INT 1
34595: ARRAY
34596: PPUSH
34597: LD_VAR 0 12
34601: PUSH
34602: LD_VAR 0 7
34606: ARRAY
34607: PUSH
34608: LD_INT 2
34610: ARRAY
34611: PPUSH
34612: CALL_OW 488
34616: NOT
34617: PUSH
34618: LD_VAR 0 12
34622: PUSH
34623: LD_VAR 0 7
34627: ARRAY
34628: PUSH
34629: LD_INT 1
34631: ARRAY
34632: PPUSH
34633: LD_VAR 0 12
34637: PUSH
34638: LD_VAR 0 7
34642: ARRAY
34643: PUSH
34644: LD_INT 2
34646: ARRAY
34647: PPUSH
34648: CALL_OW 428
34652: PUSH
34653: LD_INT 0
34655: GREATER
34656: OR
34657: PUSH
34658: LD_VAR 0 12
34662: PUSH
34663: LD_VAR 0 7
34667: ARRAY
34668: PUSH
34669: LD_INT 1
34671: ARRAY
34672: PPUSH
34673: LD_VAR 0 12
34677: PUSH
34678: LD_VAR 0 7
34682: ARRAY
34683: PUSH
34684: LD_INT 2
34686: ARRAY
34687: PPUSH
34688: CALL_OW 351
34692: OR
34693: IFFALSE 34699
// exit ;
34695: POP
34696: POP
34697: GO 34991
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34699: LD_ADDR_VAR 0 8
34703: PUSH
34704: LD_VAR 0 12
34708: PUSH
34709: LD_VAR 0 7
34713: ARRAY
34714: PUSH
34715: LD_INT 1
34717: ARRAY
34718: PPUSH
34719: LD_VAR 0 12
34723: PUSH
34724: LD_VAR 0 7
34728: ARRAY
34729: PUSH
34730: LD_INT 2
34732: ARRAY
34733: PPUSH
34734: CALL_OW 546
34738: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34739: LD_VAR 0 8
34743: PUSH
34744: LD_INT 1
34746: ARRAY
34747: PUSH
34748: LD_VAR 0 8
34752: PUSH
34753: LD_INT 2
34755: ARRAY
34756: PUSH
34757: LD_VAR 0 13
34761: PUSH
34762: LD_INT 2
34764: PLUS
34765: GREATER
34766: OR
34767: PUSH
34768: LD_VAR 0 8
34772: PUSH
34773: LD_INT 2
34775: ARRAY
34776: PUSH
34777: LD_VAR 0 13
34781: PUSH
34782: LD_INT 2
34784: MINUS
34785: LESS
34786: OR
34787: PUSH
34788: LD_VAR 0 8
34792: PUSH
34793: LD_INT 3
34795: ARRAY
34796: PUSH
34797: LD_INT 0
34799: PUSH
34800: LD_INT 8
34802: PUSH
34803: LD_INT 9
34805: PUSH
34806: LD_INT 10
34808: PUSH
34809: LD_INT 11
34811: PUSH
34812: LD_INT 12
34814: PUSH
34815: LD_INT 13
34817: PUSH
34818: LD_INT 16
34820: PUSH
34821: LD_INT 17
34823: PUSH
34824: LD_INT 18
34826: PUSH
34827: LD_INT 19
34829: PUSH
34830: LD_INT 20
34832: PUSH
34833: LD_INT 21
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: IN
34851: NOT
34852: OR
34853: PUSH
34854: LD_VAR 0 8
34858: PUSH
34859: LD_INT 5
34861: ARRAY
34862: NOT
34863: OR
34864: PUSH
34865: LD_VAR 0 8
34869: PUSH
34870: LD_INT 6
34872: ARRAY
34873: PUSH
34874: LD_INT 1
34876: PUSH
34877: LD_INT 2
34879: PUSH
34880: LD_INT 7
34882: PUSH
34883: LD_INT 9
34885: PUSH
34886: LD_INT 10
34888: PUSH
34889: LD_INT 11
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: IN
34900: NOT
34901: OR
34902: IFFALSE 34908
// exit ;
34904: POP
34905: POP
34906: GO 34991
// end ;
34908: GO 34579
34910: POP
34911: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34912: LD_VAR 0 9
34916: PPUSH
34917: LD_VAR 0 3
34921: PPUSH
34922: LD_VAR 0 4
34926: PPUSH
34927: LD_INT 20
34929: PPUSH
34930: CALL 26914 0 4
34934: PUSH
34935: LD_INT 4
34937: ARRAY
34938: IFFALSE 34942
// exit ;
34940: GO 34991
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34942: LD_VAR 0 2
34946: PUSH
34947: LD_INT 29
34949: PUSH
34950: LD_INT 30
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: IN
34957: PUSH
34958: LD_VAR 0 3
34962: PPUSH
34963: LD_VAR 0 4
34967: PPUSH
34968: LD_VAR 0 9
34972: PPUSH
34973: CALL_OW 440
34977: NOT
34978: AND
34979: IFFALSE 34983
// exit ;
34981: GO 34991
// result := true ;
34983: LD_ADDR_VAR 0 6
34987: PUSH
34988: LD_INT 1
34990: ST_TO_ADDR
// end ;
34991: LD_VAR 0 6
34995: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
34996: LD_INT 0
34998: PPUSH
34999: PPUSH
35000: PPUSH
35001: PPUSH
35002: PPUSH
35003: PPUSH
35004: PPUSH
35005: PPUSH
35006: PPUSH
35007: PPUSH
35008: PPUSH
35009: PPUSH
35010: PPUSH
35011: PPUSH
35012: PPUSH
35013: PPUSH
35014: PPUSH
35015: PPUSH
35016: PPUSH
35017: PPUSH
35018: PPUSH
35019: PPUSH
35020: PPUSH
35021: PPUSH
35022: PPUSH
35023: PPUSH
35024: PPUSH
35025: PPUSH
35026: PPUSH
35027: PPUSH
35028: PPUSH
35029: PPUSH
35030: PPUSH
35031: PPUSH
35032: PPUSH
35033: PPUSH
35034: PPUSH
35035: PPUSH
35036: PPUSH
35037: PPUSH
35038: PPUSH
35039: PPUSH
35040: PPUSH
35041: PPUSH
35042: PPUSH
35043: PPUSH
35044: PPUSH
35045: PPUSH
35046: PPUSH
35047: PPUSH
35048: PPUSH
35049: PPUSH
35050: PPUSH
35051: PPUSH
35052: PPUSH
35053: PPUSH
35054: PPUSH
35055: PPUSH
// result = [ ] ;
35056: LD_ADDR_VAR 0 7
35060: PUSH
35061: EMPTY
35062: ST_TO_ADDR
// temp_list = [ ] ;
35063: LD_ADDR_VAR 0 9
35067: PUSH
35068: EMPTY
35069: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35070: LD_VAR 0 4
35074: PUSH
35075: LD_INT 0
35077: PUSH
35078: LD_INT 1
35080: PUSH
35081: LD_INT 2
35083: PUSH
35084: LD_INT 3
35086: PUSH
35087: LD_INT 4
35089: PUSH
35090: LD_INT 5
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: IN
35101: NOT
35102: PUSH
35103: LD_VAR 0 1
35107: PUSH
35108: LD_INT 0
35110: PUSH
35111: LD_INT 1
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: IN
35118: PUSH
35119: LD_VAR 0 5
35123: PUSH
35124: LD_INT 1
35126: PUSH
35127: LD_INT 2
35129: PUSH
35130: LD_INT 3
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: LIST
35137: IN
35138: NOT
35139: AND
35140: OR
35141: IFFALSE 35145
// exit ;
35143: GO 53536
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35145: LD_VAR 0 1
35149: PUSH
35150: LD_INT 6
35152: PUSH
35153: LD_INT 7
35155: PUSH
35156: LD_INT 8
35158: PUSH
35159: LD_INT 13
35161: PUSH
35162: LD_INT 12
35164: PUSH
35165: LD_INT 15
35167: PUSH
35168: LD_INT 11
35170: PUSH
35171: LD_INT 14
35173: PUSH
35174: LD_INT 10
35176: PUSH
35177: EMPTY
35178: LIST
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: LIST
35187: IN
35188: IFFALSE 35198
// btype = b_lab ;
35190: LD_ADDR_VAR 0 1
35194: PUSH
35195: LD_INT 6
35197: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35198: LD_VAR 0 6
35202: PUSH
35203: LD_INT 0
35205: PUSH
35206: LD_INT 1
35208: PUSH
35209: LD_INT 2
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: LIST
35216: IN
35217: NOT
35218: PUSH
35219: LD_VAR 0 1
35223: PUSH
35224: LD_INT 0
35226: PUSH
35227: LD_INT 1
35229: PUSH
35230: LD_INT 2
35232: PUSH
35233: LD_INT 3
35235: PUSH
35236: LD_INT 6
35238: PUSH
35239: LD_INT 36
35241: PUSH
35242: LD_INT 4
35244: PUSH
35245: LD_INT 5
35247: PUSH
35248: LD_INT 31
35250: PUSH
35251: LD_INT 32
35253: PUSH
35254: LD_INT 33
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: LIST
35261: LIST
35262: LIST
35263: LIST
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: LIST
35269: IN
35270: NOT
35271: PUSH
35272: LD_VAR 0 6
35276: PUSH
35277: LD_INT 1
35279: EQUAL
35280: AND
35281: OR
35282: PUSH
35283: LD_VAR 0 1
35287: PUSH
35288: LD_INT 2
35290: PUSH
35291: LD_INT 3
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: IN
35298: NOT
35299: PUSH
35300: LD_VAR 0 6
35304: PUSH
35305: LD_INT 2
35307: EQUAL
35308: AND
35309: OR
35310: IFFALSE 35320
// mode = 0 ;
35312: LD_ADDR_VAR 0 6
35316: PUSH
35317: LD_INT 0
35319: ST_TO_ADDR
// case mode of 0 :
35320: LD_VAR 0 6
35324: PUSH
35325: LD_INT 0
35327: DOUBLE
35328: EQUAL
35329: IFTRUE 35333
35331: GO 46786
35333: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35334: LD_ADDR_VAR 0 11
35338: PUSH
35339: LD_INT 0
35341: PUSH
35342: LD_INT 0
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: LD_INT 0
35351: PUSH
35352: LD_INT 1
35354: NEG
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: LD_INT 1
35362: PUSH
35363: LD_INT 0
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: PUSH
35370: LD_INT 1
35372: PUSH
35373: LD_INT 1
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: PUSH
35380: LD_INT 0
35382: PUSH
35383: LD_INT 1
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: PUSH
35390: LD_INT 1
35392: NEG
35393: PUSH
35394: LD_INT 0
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PUSH
35401: LD_INT 1
35403: NEG
35404: PUSH
35405: LD_INT 1
35407: NEG
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: PUSH
35413: LD_INT 1
35415: NEG
35416: PUSH
35417: LD_INT 2
35419: NEG
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 0
35427: PUSH
35428: LD_INT 2
35430: NEG
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: LD_INT 1
35438: PUSH
35439: LD_INT 1
35441: NEG
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: PUSH
35447: LD_INT 1
35449: PUSH
35450: LD_INT 2
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: LD_INT 0
35459: PUSH
35460: LD_INT 2
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: PUSH
35467: LD_INT 1
35469: NEG
35470: PUSH
35471: LD_INT 1
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: PUSH
35478: LD_INT 1
35480: PUSH
35481: LD_INT 3
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: PUSH
35488: LD_INT 0
35490: PUSH
35491: LD_INT 3
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PUSH
35498: LD_INT 1
35500: NEG
35501: PUSH
35502: LD_INT 2
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: LIST
35513: LIST
35514: LIST
35515: LIST
35516: LIST
35517: LIST
35518: LIST
35519: LIST
35520: LIST
35521: LIST
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35527: LD_ADDR_VAR 0 12
35531: PUSH
35532: LD_INT 0
35534: PUSH
35535: LD_INT 0
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: LD_INT 0
35544: PUSH
35545: LD_INT 1
35547: NEG
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 1
35555: PUSH
35556: LD_INT 0
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 1
35565: PUSH
35566: LD_INT 1
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 0
35575: PUSH
35576: LD_INT 1
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: PUSH
35583: LD_INT 1
35585: NEG
35586: PUSH
35587: LD_INT 0
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: PUSH
35594: LD_INT 1
35596: NEG
35597: PUSH
35598: LD_INT 1
35600: NEG
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PUSH
35606: LD_INT 1
35608: PUSH
35609: LD_INT 1
35611: NEG
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: LD_INT 2
35619: PUSH
35620: LD_INT 0
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 2
35629: PUSH
35630: LD_INT 1
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: LD_INT 1
35639: NEG
35640: PUSH
35641: LD_INT 1
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: PUSH
35648: LD_INT 2
35650: NEG
35651: PUSH
35652: LD_INT 0
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: PUSH
35659: LD_INT 2
35661: NEG
35662: PUSH
35663: LD_INT 1
35665: NEG
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: PUSH
35671: LD_INT 2
35673: NEG
35674: PUSH
35675: LD_INT 1
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PUSH
35682: LD_INT 3
35684: NEG
35685: PUSH
35686: LD_INT 0
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: LD_INT 3
35695: NEG
35696: PUSH
35697: LD_INT 1
35699: NEG
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: LIST
35716: LIST
35717: LIST
35718: LIST
35719: LIST
35720: LIST
35721: LIST
35722: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35723: LD_ADDR_VAR 0 13
35727: PUSH
35728: LD_INT 0
35730: PUSH
35731: LD_INT 0
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: LD_INT 0
35740: PUSH
35741: LD_INT 1
35743: NEG
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: PUSH
35749: LD_INT 1
35751: PUSH
35752: LD_INT 0
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: PUSH
35759: LD_INT 1
35761: PUSH
35762: LD_INT 1
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PUSH
35769: LD_INT 0
35771: PUSH
35772: LD_INT 1
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PUSH
35779: LD_INT 1
35781: NEG
35782: PUSH
35783: LD_INT 0
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: PUSH
35790: LD_INT 1
35792: NEG
35793: PUSH
35794: LD_INT 1
35796: NEG
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: LD_INT 1
35804: NEG
35805: PUSH
35806: LD_INT 2
35808: NEG
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: LD_INT 2
35816: PUSH
35817: LD_INT 1
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: PUSH
35824: LD_INT 2
35826: PUSH
35827: LD_INT 2
35829: PUSH
35830: EMPTY
35831: LIST
35832: LIST
35833: PUSH
35834: LD_INT 1
35836: PUSH
35837: LD_INT 2
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: PUSH
35844: LD_INT 2
35846: NEG
35847: PUSH
35848: LD_INT 1
35850: NEG
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: PUSH
35856: LD_INT 2
35858: NEG
35859: PUSH
35860: LD_INT 2
35862: NEG
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: PUSH
35868: LD_INT 2
35870: NEG
35871: PUSH
35872: LD_INT 3
35874: NEG
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: PUSH
35880: LD_INT 3
35882: NEG
35883: PUSH
35884: LD_INT 2
35886: NEG
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: LD_INT 3
35894: NEG
35895: PUSH
35896: LD_INT 3
35898: NEG
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35922: LD_ADDR_VAR 0 14
35926: PUSH
35927: LD_INT 0
35929: PUSH
35930: LD_INT 0
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 0
35939: PUSH
35940: LD_INT 1
35942: NEG
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 1
35950: PUSH
35951: LD_INT 0
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: LD_INT 1
35960: PUSH
35961: LD_INT 1
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 0
35970: PUSH
35971: LD_INT 1
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PUSH
35978: LD_INT 1
35980: NEG
35981: PUSH
35982: LD_INT 0
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: PUSH
35989: LD_INT 1
35991: NEG
35992: PUSH
35993: LD_INT 1
35995: NEG
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: PUSH
36001: LD_INT 1
36003: NEG
36004: PUSH
36005: LD_INT 2
36007: NEG
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: PUSH
36013: LD_INT 0
36015: PUSH
36016: LD_INT 2
36018: NEG
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: PUSH
36024: LD_INT 1
36026: PUSH
36027: LD_INT 1
36029: NEG
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 1
36037: PUSH
36038: LD_INT 2
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 0
36047: PUSH
36048: LD_INT 2
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 1
36057: NEG
36058: PUSH
36059: LD_INT 1
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: PUSH
36066: LD_INT 1
36068: NEG
36069: PUSH
36070: LD_INT 3
36072: NEG
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PUSH
36078: LD_INT 0
36080: PUSH
36081: LD_INT 3
36083: NEG
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: PUSH
36089: LD_INT 1
36091: PUSH
36092: LD_INT 2
36094: NEG
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: PUSH
36100: EMPTY
36101: LIST
36102: LIST
36103: LIST
36104: LIST
36105: LIST
36106: LIST
36107: LIST
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: LIST
36116: LIST
36117: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36118: LD_ADDR_VAR 0 15
36122: PUSH
36123: LD_INT 0
36125: PUSH
36126: LD_INT 0
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: LD_INT 0
36135: PUSH
36136: LD_INT 1
36138: NEG
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: LD_INT 1
36146: PUSH
36147: LD_INT 0
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: PUSH
36154: LD_INT 1
36156: PUSH
36157: LD_INT 1
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PUSH
36164: LD_INT 0
36166: PUSH
36167: LD_INT 1
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PUSH
36174: LD_INT 1
36176: NEG
36177: PUSH
36178: LD_INT 0
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: LD_INT 1
36187: NEG
36188: PUSH
36189: LD_INT 1
36191: NEG
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: PUSH
36197: LD_INT 1
36199: PUSH
36200: LD_INT 1
36202: NEG
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: PUSH
36208: LD_INT 2
36210: PUSH
36211: LD_INT 0
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: LD_INT 2
36220: PUSH
36221: LD_INT 1
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: PUSH
36228: LD_INT 1
36230: NEG
36231: PUSH
36232: LD_INT 1
36234: PUSH
36235: EMPTY
36236: LIST
36237: LIST
36238: PUSH
36239: LD_INT 2
36241: NEG
36242: PUSH
36243: LD_INT 0
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PUSH
36250: LD_INT 2
36252: NEG
36253: PUSH
36254: LD_INT 1
36256: NEG
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: PUSH
36262: LD_INT 2
36264: PUSH
36265: LD_INT 1
36267: NEG
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: PUSH
36273: LD_INT 3
36275: PUSH
36276: LD_INT 0
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: PUSH
36283: LD_INT 3
36285: PUSH
36286: LD_INT 1
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: LIST
36309: LIST
36310: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36311: LD_ADDR_VAR 0 16
36315: PUSH
36316: LD_INT 0
36318: PUSH
36319: LD_INT 0
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: PUSH
36326: LD_INT 0
36328: PUSH
36329: LD_INT 1
36331: NEG
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PUSH
36337: LD_INT 1
36339: PUSH
36340: LD_INT 0
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: LD_INT 1
36349: PUSH
36350: LD_INT 1
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 0
36359: PUSH
36360: LD_INT 1
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PUSH
36367: LD_INT 1
36369: NEG
36370: PUSH
36371: LD_INT 0
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 1
36380: NEG
36381: PUSH
36382: LD_INT 1
36384: NEG
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: PUSH
36390: LD_INT 1
36392: NEG
36393: PUSH
36394: LD_INT 2
36396: NEG
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: PUSH
36402: LD_INT 2
36404: PUSH
36405: LD_INT 1
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 2
36414: PUSH
36415: LD_INT 2
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PUSH
36422: LD_INT 1
36424: PUSH
36425: LD_INT 2
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: PUSH
36432: LD_INT 2
36434: NEG
36435: PUSH
36436: LD_INT 1
36438: NEG
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: PUSH
36444: LD_INT 2
36446: NEG
36447: PUSH
36448: LD_INT 2
36450: NEG
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: PUSH
36456: LD_INT 3
36458: PUSH
36459: LD_INT 2
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: PUSH
36466: LD_INT 3
36468: PUSH
36469: LD_INT 3
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: PUSH
36476: LD_INT 2
36478: PUSH
36479: LD_INT 3
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: LIST
36495: LIST
36496: LIST
36497: LIST
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36504: LD_ADDR_VAR 0 17
36508: PUSH
36509: LD_INT 0
36511: PUSH
36512: LD_INT 0
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: LD_INT 0
36521: PUSH
36522: LD_INT 1
36524: NEG
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: LD_INT 1
36532: PUSH
36533: LD_INT 0
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: LD_INT 1
36542: PUSH
36543: LD_INT 1
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 0
36552: PUSH
36553: LD_INT 1
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: PUSH
36560: LD_INT 1
36562: NEG
36563: PUSH
36564: LD_INT 0
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 1
36573: NEG
36574: PUSH
36575: LD_INT 1
36577: NEG
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: LD_INT 1
36585: NEG
36586: PUSH
36587: LD_INT 2
36589: NEG
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: PUSH
36595: LD_INT 0
36597: PUSH
36598: LD_INT 2
36600: NEG
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: PUSH
36606: LD_INT 1
36608: PUSH
36609: LD_INT 1
36611: NEG
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: PUSH
36617: LD_INT 2
36619: PUSH
36620: LD_INT 0
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: PUSH
36627: LD_INT 2
36629: PUSH
36630: LD_INT 1
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PUSH
36637: LD_INT 2
36639: PUSH
36640: LD_INT 2
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: PUSH
36647: LD_INT 1
36649: PUSH
36650: LD_INT 2
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: PUSH
36657: LD_INT 0
36659: PUSH
36660: LD_INT 2
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: LD_INT 1
36669: NEG
36670: PUSH
36671: LD_INT 1
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PUSH
36678: LD_INT 2
36680: NEG
36681: PUSH
36682: LD_INT 0
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: PUSH
36689: LD_INT 2
36691: NEG
36692: PUSH
36693: LD_INT 1
36695: NEG
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: PUSH
36701: LD_INT 2
36703: NEG
36704: PUSH
36705: LD_INT 2
36707: NEG
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: LIST
36717: LIST
36718: LIST
36719: LIST
36720: LIST
36721: LIST
36722: LIST
36723: LIST
36724: LIST
36725: LIST
36726: LIST
36727: LIST
36728: LIST
36729: LIST
36730: LIST
36731: LIST
36732: LIST
36733: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36734: LD_ADDR_VAR 0 18
36738: PUSH
36739: LD_INT 0
36741: PUSH
36742: LD_INT 0
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: PUSH
36749: LD_INT 0
36751: PUSH
36752: LD_INT 1
36754: NEG
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: PUSH
36760: LD_INT 1
36762: PUSH
36763: LD_INT 0
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 1
36772: PUSH
36773: LD_INT 1
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_INT 0
36782: PUSH
36783: LD_INT 1
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: PUSH
36790: LD_INT 1
36792: NEG
36793: PUSH
36794: LD_INT 0
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: PUSH
36801: LD_INT 1
36803: NEG
36804: PUSH
36805: LD_INT 1
36807: NEG
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: LD_INT 1
36815: NEG
36816: PUSH
36817: LD_INT 2
36819: NEG
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: LD_INT 0
36827: PUSH
36828: LD_INT 2
36830: NEG
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: LD_INT 1
36838: PUSH
36839: LD_INT 1
36841: NEG
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: LD_INT 2
36849: PUSH
36850: LD_INT 0
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: LD_INT 2
36859: PUSH
36860: LD_INT 1
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: PUSH
36867: LD_INT 2
36869: PUSH
36870: LD_INT 2
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: PUSH
36877: LD_INT 1
36879: PUSH
36880: LD_INT 2
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: PUSH
36887: LD_INT 0
36889: PUSH
36890: LD_INT 2
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: PUSH
36897: LD_INT 1
36899: NEG
36900: PUSH
36901: LD_INT 1
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: PUSH
36908: LD_INT 2
36910: NEG
36911: PUSH
36912: LD_INT 0
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: PUSH
36919: LD_INT 2
36921: NEG
36922: PUSH
36923: LD_INT 1
36925: NEG
36926: PUSH
36927: EMPTY
36928: LIST
36929: LIST
36930: PUSH
36931: LD_INT 2
36933: NEG
36934: PUSH
36935: LD_INT 2
36937: NEG
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36964: LD_ADDR_VAR 0 19
36968: PUSH
36969: LD_INT 0
36971: PUSH
36972: LD_INT 0
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PUSH
36979: LD_INT 0
36981: PUSH
36982: LD_INT 1
36984: NEG
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: PUSH
36990: LD_INT 1
36992: PUSH
36993: LD_INT 0
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 1
37002: PUSH
37003: LD_INT 1
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: LD_INT 0
37012: PUSH
37013: LD_INT 1
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: PUSH
37020: LD_INT 1
37022: NEG
37023: PUSH
37024: LD_INT 0
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 1
37033: NEG
37034: PUSH
37035: LD_INT 1
37037: NEG
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: LD_INT 1
37045: NEG
37046: PUSH
37047: LD_INT 2
37049: NEG
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 0
37057: PUSH
37058: LD_INT 2
37060: NEG
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: PUSH
37066: LD_INT 1
37068: PUSH
37069: LD_INT 1
37071: NEG
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: LD_INT 2
37079: PUSH
37080: LD_INT 0
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: PUSH
37087: LD_INT 2
37089: PUSH
37090: LD_INT 1
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: PUSH
37097: LD_INT 2
37099: PUSH
37100: LD_INT 2
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: LD_INT 1
37109: PUSH
37110: LD_INT 2
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: LD_INT 0
37119: PUSH
37120: LD_INT 2
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: PUSH
37127: LD_INT 1
37129: NEG
37130: PUSH
37131: LD_INT 1
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 2
37140: NEG
37141: PUSH
37142: LD_INT 0
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 2
37151: NEG
37152: PUSH
37153: LD_INT 1
37155: NEG
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: LD_INT 2
37163: NEG
37164: PUSH
37165: LD_INT 2
37167: NEG
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: LIST
37183: LIST
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: LIST
37191: LIST
37192: LIST
37193: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37194: LD_ADDR_VAR 0 20
37198: PUSH
37199: LD_INT 0
37201: PUSH
37202: LD_INT 0
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: PUSH
37209: LD_INT 0
37211: PUSH
37212: LD_INT 1
37214: NEG
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 1
37222: PUSH
37223: LD_INT 0
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_INT 1
37232: PUSH
37233: LD_INT 1
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 0
37242: PUSH
37243: LD_INT 1
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: LD_INT 1
37252: NEG
37253: PUSH
37254: LD_INT 0
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: PUSH
37261: LD_INT 1
37263: NEG
37264: PUSH
37265: LD_INT 1
37267: NEG
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: PUSH
37273: LD_INT 1
37275: NEG
37276: PUSH
37277: LD_INT 2
37279: NEG
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 0
37287: PUSH
37288: LD_INT 2
37290: NEG
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: PUSH
37296: LD_INT 1
37298: PUSH
37299: LD_INT 1
37301: NEG
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PUSH
37307: LD_INT 2
37309: PUSH
37310: LD_INT 0
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PUSH
37317: LD_INT 2
37319: PUSH
37320: LD_INT 1
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 2
37329: PUSH
37330: LD_INT 2
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: PUSH
37337: LD_INT 1
37339: PUSH
37340: LD_INT 2
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: PUSH
37347: LD_INT 0
37349: PUSH
37350: LD_INT 2
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PUSH
37357: LD_INT 1
37359: NEG
37360: PUSH
37361: LD_INT 1
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: PUSH
37368: LD_INT 2
37370: NEG
37371: PUSH
37372: LD_INT 0
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: PUSH
37379: LD_INT 2
37381: NEG
37382: PUSH
37383: LD_INT 1
37385: NEG
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PUSH
37391: LD_INT 2
37393: NEG
37394: PUSH
37395: LD_INT 2
37397: NEG
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: LIST
37407: LIST
37408: LIST
37409: LIST
37410: LIST
37411: LIST
37412: LIST
37413: LIST
37414: LIST
37415: LIST
37416: LIST
37417: LIST
37418: LIST
37419: LIST
37420: LIST
37421: LIST
37422: LIST
37423: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37424: LD_ADDR_VAR 0 21
37428: PUSH
37429: LD_INT 0
37431: PUSH
37432: LD_INT 0
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: LD_INT 0
37441: PUSH
37442: LD_INT 1
37444: NEG
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: LD_INT 1
37452: PUSH
37453: LD_INT 0
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: PUSH
37460: LD_INT 1
37462: PUSH
37463: LD_INT 1
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PUSH
37470: LD_INT 0
37472: PUSH
37473: LD_INT 1
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_INT 1
37482: NEG
37483: PUSH
37484: LD_INT 0
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 1
37493: NEG
37494: PUSH
37495: LD_INT 1
37497: NEG
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 1
37505: NEG
37506: PUSH
37507: LD_INT 2
37509: NEG
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: PUSH
37515: LD_INT 0
37517: PUSH
37518: LD_INT 2
37520: NEG
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: PUSH
37526: LD_INT 1
37528: PUSH
37529: LD_INT 1
37531: NEG
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: PUSH
37537: LD_INT 2
37539: PUSH
37540: LD_INT 0
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PUSH
37547: LD_INT 2
37549: PUSH
37550: LD_INT 1
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: PUSH
37557: LD_INT 2
37559: PUSH
37560: LD_INT 2
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PUSH
37567: LD_INT 1
37569: PUSH
37570: LD_INT 2
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: LD_INT 0
37579: PUSH
37580: LD_INT 2
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: PUSH
37587: LD_INT 1
37589: NEG
37590: PUSH
37591: LD_INT 1
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: LD_INT 2
37600: NEG
37601: PUSH
37602: LD_INT 0
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 2
37611: NEG
37612: PUSH
37613: LD_INT 1
37615: NEG
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 2
37623: NEG
37624: PUSH
37625: LD_INT 2
37627: NEG
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: LIST
37637: LIST
37638: LIST
37639: LIST
37640: LIST
37641: LIST
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: LIST
37652: LIST
37653: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37654: LD_ADDR_VAR 0 22
37658: PUSH
37659: LD_INT 0
37661: PUSH
37662: LD_INT 0
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: LD_INT 0
37671: PUSH
37672: LD_INT 1
37674: NEG
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: PUSH
37680: LD_INT 1
37682: PUSH
37683: LD_INT 0
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: LD_INT 1
37692: PUSH
37693: LD_INT 1
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: PUSH
37700: LD_INT 0
37702: PUSH
37703: LD_INT 1
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: LD_INT 1
37712: NEG
37713: PUSH
37714: LD_INT 0
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 1
37723: NEG
37724: PUSH
37725: LD_INT 1
37727: NEG
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 1
37735: NEG
37736: PUSH
37737: LD_INT 2
37739: NEG
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PUSH
37745: LD_INT 0
37747: PUSH
37748: LD_INT 2
37750: NEG
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: PUSH
37756: LD_INT 1
37758: PUSH
37759: LD_INT 1
37761: NEG
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 2
37769: PUSH
37770: LD_INT 0
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: PUSH
37777: LD_INT 2
37779: PUSH
37780: LD_INT 1
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: PUSH
37787: LD_INT 2
37789: PUSH
37790: LD_INT 2
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 1
37799: PUSH
37800: LD_INT 2
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PUSH
37807: LD_INT 0
37809: PUSH
37810: LD_INT 2
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: LD_INT 1
37819: NEG
37820: PUSH
37821: LD_INT 1
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: LD_INT 2
37830: NEG
37831: PUSH
37832: LD_INT 0
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PUSH
37839: LD_INT 2
37841: NEG
37842: PUSH
37843: LD_INT 1
37845: NEG
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: PUSH
37851: LD_INT 2
37853: NEG
37854: PUSH
37855: LD_INT 2
37857: NEG
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: LIST
37871: LIST
37872: LIST
37873: LIST
37874: LIST
37875: LIST
37876: LIST
37877: LIST
37878: LIST
37879: LIST
37880: LIST
37881: LIST
37882: LIST
37883: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37884: LD_ADDR_VAR 0 23
37888: PUSH
37889: LD_INT 0
37891: PUSH
37892: LD_INT 0
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 0
37901: PUSH
37902: LD_INT 1
37904: NEG
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 1
37912: PUSH
37913: LD_INT 0
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 1
37922: PUSH
37923: LD_INT 1
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: LD_INT 0
37932: PUSH
37933: LD_INT 1
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: LD_INT 1
37942: NEG
37943: PUSH
37944: LD_INT 0
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 1
37953: NEG
37954: PUSH
37955: LD_INT 1
37957: NEG
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PUSH
37963: LD_INT 1
37965: NEG
37966: PUSH
37967: LD_INT 2
37969: NEG
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 0
37977: PUSH
37978: LD_INT 2
37980: NEG
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PUSH
37986: LD_INT 1
37988: PUSH
37989: LD_INT 1
37991: NEG
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: LD_INT 2
37999: PUSH
38000: LD_INT 0
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: LD_INT 2
38009: PUSH
38010: LD_INT 1
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 2
38019: PUSH
38020: LD_INT 2
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 1
38029: PUSH
38030: LD_INT 2
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: LD_INT 0
38039: PUSH
38040: LD_INT 2
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: LD_INT 1
38049: NEG
38050: PUSH
38051: LD_INT 1
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: PUSH
38058: LD_INT 2
38060: NEG
38061: PUSH
38062: LD_INT 0
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 2
38071: NEG
38072: PUSH
38073: LD_INT 1
38075: NEG
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: PUSH
38081: LD_INT 2
38083: NEG
38084: PUSH
38085: LD_INT 2
38087: NEG
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 2
38095: NEG
38096: PUSH
38097: LD_INT 3
38099: NEG
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: LD_INT 1
38107: NEG
38108: PUSH
38109: LD_INT 3
38111: NEG
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: PUSH
38117: LD_INT 1
38119: PUSH
38120: LD_INT 2
38122: NEG
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: PUSH
38128: LD_INT 2
38130: PUSH
38131: LD_INT 1
38133: NEG
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38164: LD_ADDR_VAR 0 24
38168: PUSH
38169: LD_INT 0
38171: PUSH
38172: LD_INT 0
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 0
38181: PUSH
38182: LD_INT 1
38184: NEG
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: LD_INT 1
38192: PUSH
38193: LD_INT 0
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 1
38202: PUSH
38203: LD_INT 1
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 0
38212: PUSH
38213: LD_INT 1
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 1
38222: NEG
38223: PUSH
38224: LD_INT 0
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: LD_INT 1
38233: NEG
38234: PUSH
38235: LD_INT 1
38237: NEG
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 1
38245: NEG
38246: PUSH
38247: LD_INT 2
38249: NEG
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 0
38257: PUSH
38258: LD_INT 2
38260: NEG
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 1
38268: PUSH
38269: LD_INT 1
38271: NEG
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: LD_INT 2
38279: PUSH
38280: LD_INT 0
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PUSH
38287: LD_INT 2
38289: PUSH
38290: LD_INT 1
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 2
38299: PUSH
38300: LD_INT 2
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 1
38309: PUSH
38310: LD_INT 2
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 0
38319: PUSH
38320: LD_INT 2
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 1
38329: NEG
38330: PUSH
38331: LD_INT 1
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 2
38340: NEG
38341: PUSH
38342: LD_INT 0
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 2
38351: NEG
38352: PUSH
38353: LD_INT 1
38355: NEG
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: LD_INT 2
38363: NEG
38364: PUSH
38365: LD_INT 2
38367: NEG
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 1
38375: PUSH
38376: LD_INT 2
38378: NEG
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 2
38386: PUSH
38387: LD_INT 1
38389: NEG
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 3
38397: PUSH
38398: LD_INT 1
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 3
38407: PUSH
38408: LD_INT 2
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38440: LD_ADDR_VAR 0 25
38444: PUSH
38445: LD_INT 0
38447: PUSH
38448: LD_INT 0
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 0
38457: PUSH
38458: LD_INT 1
38460: NEG
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PUSH
38466: LD_INT 1
38468: PUSH
38469: LD_INT 0
38471: PUSH
38472: EMPTY
38473: LIST
38474: LIST
38475: PUSH
38476: LD_INT 1
38478: PUSH
38479: LD_INT 1
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: LD_INT 0
38488: PUSH
38489: LD_INT 1
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: LD_INT 1
38498: NEG
38499: PUSH
38500: LD_INT 0
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 1
38509: NEG
38510: PUSH
38511: LD_INT 1
38513: NEG
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 1
38521: NEG
38522: PUSH
38523: LD_INT 2
38525: NEG
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 0
38533: PUSH
38534: LD_INT 2
38536: NEG
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 1
38544: PUSH
38545: LD_INT 1
38547: NEG
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 2
38555: PUSH
38556: LD_INT 0
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 2
38565: PUSH
38566: LD_INT 1
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: PUSH
38573: LD_INT 2
38575: PUSH
38576: LD_INT 2
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 1
38585: PUSH
38586: LD_INT 2
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: LD_INT 0
38595: PUSH
38596: LD_INT 2
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_INT 1
38605: NEG
38606: PUSH
38607: LD_INT 1
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PUSH
38614: LD_INT 2
38616: NEG
38617: PUSH
38618: LD_INT 0
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PUSH
38625: LD_INT 2
38627: NEG
38628: PUSH
38629: LD_INT 1
38631: NEG
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 2
38639: NEG
38640: PUSH
38641: LD_INT 2
38643: NEG
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 3
38651: PUSH
38652: LD_INT 1
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 3
38661: PUSH
38662: LD_INT 2
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 2
38671: PUSH
38672: LD_INT 3
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: LD_INT 1
38681: PUSH
38682: LD_INT 3
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38714: LD_ADDR_VAR 0 26
38718: PUSH
38719: LD_INT 0
38721: PUSH
38722: LD_INT 0
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 0
38731: PUSH
38732: LD_INT 1
38734: NEG
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: LD_INT 1
38742: PUSH
38743: LD_INT 0
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: LD_INT 1
38752: PUSH
38753: LD_INT 1
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: LD_INT 0
38762: PUSH
38763: LD_INT 1
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 1
38772: NEG
38773: PUSH
38774: LD_INT 0
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 1
38783: NEG
38784: PUSH
38785: LD_INT 1
38787: NEG
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: LD_INT 1
38795: NEG
38796: PUSH
38797: LD_INT 2
38799: NEG
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 0
38807: PUSH
38808: LD_INT 2
38810: NEG
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 1
38818: PUSH
38819: LD_INT 1
38821: NEG
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 2
38829: PUSH
38830: LD_INT 0
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 2
38839: PUSH
38840: LD_INT 1
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 2
38849: PUSH
38850: LD_INT 2
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 1
38859: PUSH
38860: LD_INT 2
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 0
38869: PUSH
38870: LD_INT 2
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: LD_INT 1
38879: NEG
38880: PUSH
38881: LD_INT 1
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: PUSH
38888: LD_INT 2
38890: NEG
38891: PUSH
38892: LD_INT 0
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: PUSH
38899: LD_INT 2
38901: NEG
38902: PUSH
38903: LD_INT 1
38905: NEG
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: PUSH
38911: LD_INT 2
38913: NEG
38914: PUSH
38915: LD_INT 2
38917: NEG
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: PUSH
38923: LD_INT 2
38925: PUSH
38926: LD_INT 3
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 1
38935: PUSH
38936: LD_INT 3
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 1
38945: NEG
38946: PUSH
38947: LD_INT 2
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: PUSH
38954: LD_INT 2
38956: NEG
38957: PUSH
38958: LD_INT 1
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38990: LD_ADDR_VAR 0 27
38994: PUSH
38995: LD_INT 0
38997: PUSH
38998: LD_INT 0
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 0
39007: PUSH
39008: LD_INT 1
39010: NEG
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: LD_INT 1
39018: PUSH
39019: LD_INT 0
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 1
39028: PUSH
39029: LD_INT 1
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 0
39038: PUSH
39039: LD_INT 1
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 1
39048: NEG
39049: PUSH
39050: LD_INT 0
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 1
39059: NEG
39060: PUSH
39061: LD_INT 1
39063: NEG
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 1
39071: NEG
39072: PUSH
39073: LD_INT 2
39075: NEG
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 0
39083: PUSH
39084: LD_INT 2
39086: NEG
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 1
39094: PUSH
39095: LD_INT 1
39097: NEG
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 2
39105: PUSH
39106: LD_INT 0
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 2
39115: PUSH
39116: LD_INT 1
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: LD_INT 2
39125: PUSH
39126: LD_INT 2
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 1
39135: PUSH
39136: LD_INT 2
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 0
39145: PUSH
39146: LD_INT 2
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 1
39155: NEG
39156: PUSH
39157: LD_INT 1
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 2
39166: NEG
39167: PUSH
39168: LD_INT 0
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: PUSH
39175: LD_INT 2
39177: NEG
39178: PUSH
39179: LD_INT 1
39181: NEG
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PUSH
39187: LD_INT 2
39189: NEG
39190: PUSH
39191: LD_INT 2
39193: NEG
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PUSH
39199: LD_INT 1
39201: NEG
39202: PUSH
39203: LD_INT 2
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 2
39212: NEG
39213: PUSH
39214: LD_INT 1
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: LD_INT 3
39223: NEG
39224: PUSH
39225: LD_INT 1
39227: NEG
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: LD_INT 3
39235: NEG
39236: PUSH
39237: LD_INT 2
39239: NEG
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39270: LD_ADDR_VAR 0 28
39274: PUSH
39275: LD_INT 0
39277: PUSH
39278: LD_INT 0
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 0
39287: PUSH
39288: LD_INT 1
39290: NEG
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 1
39298: PUSH
39299: LD_INT 0
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 1
39308: PUSH
39309: LD_INT 1
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: LD_INT 0
39318: PUSH
39319: LD_INT 1
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: LD_INT 1
39328: NEG
39329: PUSH
39330: LD_INT 0
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 1
39339: NEG
39340: PUSH
39341: LD_INT 1
39343: NEG
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 1
39351: NEG
39352: PUSH
39353: LD_INT 2
39355: NEG
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 0
39363: PUSH
39364: LD_INT 2
39366: NEG
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 1
39374: PUSH
39375: LD_INT 1
39377: NEG
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 2
39385: PUSH
39386: LD_INT 0
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: LD_INT 2
39395: PUSH
39396: LD_INT 1
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: LD_INT 2
39405: PUSH
39406: LD_INT 2
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: LD_INT 1
39415: PUSH
39416: LD_INT 2
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PUSH
39423: LD_INT 0
39425: PUSH
39426: LD_INT 2
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 1
39435: NEG
39436: PUSH
39437: LD_INT 1
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: LD_INT 2
39446: NEG
39447: PUSH
39448: LD_INT 0
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 2
39457: NEG
39458: PUSH
39459: LD_INT 1
39461: NEG
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 2
39469: NEG
39470: PUSH
39471: LD_INT 2
39473: NEG
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 2
39481: NEG
39482: PUSH
39483: LD_INT 3
39485: NEG
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 1
39493: NEG
39494: PUSH
39495: LD_INT 3
39497: NEG
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 3
39505: NEG
39506: PUSH
39507: LD_INT 1
39509: NEG
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 3
39517: NEG
39518: PUSH
39519: LD_INT 2
39521: NEG
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39552: LD_ADDR_VAR 0 29
39556: PUSH
39557: LD_INT 0
39559: PUSH
39560: LD_INT 0
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 0
39569: PUSH
39570: LD_INT 1
39572: NEG
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: LD_INT 1
39580: PUSH
39581: LD_INT 0
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: PUSH
39588: LD_INT 1
39590: PUSH
39591: LD_INT 1
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PUSH
39598: LD_INT 0
39600: PUSH
39601: LD_INT 1
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: PUSH
39608: LD_INT 1
39610: NEG
39611: PUSH
39612: LD_INT 0
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 1
39621: NEG
39622: PUSH
39623: LD_INT 1
39625: NEG
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: LD_INT 1
39633: NEG
39634: PUSH
39635: LD_INT 2
39637: NEG
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 0
39645: PUSH
39646: LD_INT 2
39648: NEG
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: PUSH
39654: LD_INT 1
39656: PUSH
39657: LD_INT 1
39659: NEG
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 2
39667: PUSH
39668: LD_INT 0
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 2
39677: PUSH
39678: LD_INT 1
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: PUSH
39685: LD_INT 1
39687: PUSH
39688: LD_INT 2
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 0
39697: PUSH
39698: LD_INT 2
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: PUSH
39705: LD_INT 1
39707: NEG
39708: PUSH
39709: LD_INT 1
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: PUSH
39716: LD_INT 2
39718: NEG
39719: PUSH
39720: LD_INT 1
39722: NEG
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: LD_INT 2
39730: NEG
39731: PUSH
39732: LD_INT 2
39734: NEG
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 2
39742: NEG
39743: PUSH
39744: LD_INT 3
39746: NEG
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 2
39754: PUSH
39755: LD_INT 1
39757: NEG
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PUSH
39763: LD_INT 3
39765: PUSH
39766: LD_INT 1
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 1
39775: PUSH
39776: LD_INT 3
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: LD_INT 1
39785: NEG
39786: PUSH
39787: LD_INT 2
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 3
39796: NEG
39797: PUSH
39798: LD_INT 2
39800: NEG
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39831: LD_ADDR_VAR 0 30
39835: PUSH
39836: LD_INT 0
39838: PUSH
39839: LD_INT 0
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 0
39848: PUSH
39849: LD_INT 1
39851: NEG
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 1
39859: PUSH
39860: LD_INT 0
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 1
39869: PUSH
39870: LD_INT 1
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 0
39879: PUSH
39880: LD_INT 1
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 1
39889: NEG
39890: PUSH
39891: LD_INT 0
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: LD_INT 1
39900: NEG
39901: PUSH
39902: LD_INT 1
39904: NEG
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 1
39912: NEG
39913: PUSH
39914: LD_INT 2
39916: NEG
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: PUSH
39922: LD_INT 0
39924: PUSH
39925: LD_INT 2
39927: NEG
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 1
39935: PUSH
39936: LD_INT 1
39938: NEG
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 2
39946: PUSH
39947: LD_INT 0
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 2
39956: PUSH
39957: LD_INT 1
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 2
39966: PUSH
39967: LD_INT 2
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 1
39976: PUSH
39977: LD_INT 2
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: LD_INT 1
39986: NEG
39987: PUSH
39988: LD_INT 1
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: LD_INT 2
39997: NEG
39998: PUSH
39999: LD_INT 0
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: PUSH
40006: LD_INT 2
40008: NEG
40009: PUSH
40010: LD_INT 1
40012: NEG
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: LD_INT 1
40020: NEG
40021: PUSH
40022: LD_INT 3
40024: NEG
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 1
40032: PUSH
40033: LD_INT 2
40035: NEG
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 3
40043: PUSH
40044: LD_INT 2
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: LD_INT 2
40053: PUSH
40054: LD_INT 3
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: PUSH
40061: LD_INT 2
40063: NEG
40064: PUSH
40065: LD_INT 1
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: LD_INT 3
40074: NEG
40075: PUSH
40076: LD_INT 1
40078: NEG
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40109: LD_ADDR_VAR 0 31
40113: PUSH
40114: LD_INT 0
40116: PUSH
40117: LD_INT 0
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PUSH
40124: LD_INT 0
40126: PUSH
40127: LD_INT 1
40129: NEG
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 1
40137: PUSH
40138: LD_INT 0
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: LD_INT 1
40147: PUSH
40148: LD_INT 1
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PUSH
40155: LD_INT 0
40157: PUSH
40158: LD_INT 1
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 1
40167: NEG
40168: PUSH
40169: LD_INT 0
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: PUSH
40176: LD_INT 1
40178: NEG
40179: PUSH
40180: LD_INT 1
40182: NEG
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: LD_INT 1
40190: NEG
40191: PUSH
40192: LD_INT 2
40194: NEG
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PUSH
40200: LD_INT 1
40202: PUSH
40203: LD_INT 1
40205: NEG
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: LD_INT 2
40213: PUSH
40214: LD_INT 0
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 2
40223: PUSH
40224: LD_INT 1
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 2
40233: PUSH
40234: LD_INT 2
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 1
40243: PUSH
40244: LD_INT 2
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 0
40253: PUSH
40254: LD_INT 2
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 1
40263: NEG
40264: PUSH
40265: LD_INT 1
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 2
40274: NEG
40275: PUSH
40276: LD_INT 1
40278: NEG
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: LD_INT 2
40286: NEG
40287: PUSH
40288: LD_INT 2
40290: NEG
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 2
40298: NEG
40299: PUSH
40300: LD_INT 3
40302: NEG
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: PUSH
40308: LD_INT 2
40310: PUSH
40311: LD_INT 1
40313: NEG
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PUSH
40319: LD_INT 3
40321: PUSH
40322: LD_INT 1
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 1
40331: PUSH
40332: LD_INT 3
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 1
40341: NEG
40342: PUSH
40343: LD_INT 2
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 3
40352: NEG
40353: PUSH
40354: LD_INT 2
40356: NEG
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40387: LD_ADDR_VAR 0 32
40391: PUSH
40392: LD_INT 0
40394: PUSH
40395: LD_INT 0
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 0
40404: PUSH
40405: LD_INT 1
40407: NEG
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 1
40415: PUSH
40416: LD_INT 0
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 1
40425: PUSH
40426: LD_INT 1
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 0
40435: PUSH
40436: LD_INT 1
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 1
40445: NEG
40446: PUSH
40447: LD_INT 0
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 1
40456: NEG
40457: PUSH
40458: LD_INT 1
40460: NEG
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 1
40468: NEG
40469: PUSH
40470: LD_INT 2
40472: NEG
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 0
40480: PUSH
40481: LD_INT 2
40483: NEG
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 1
40491: PUSH
40492: LD_INT 1
40494: NEG
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 2
40502: PUSH
40503: LD_INT 1
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 2
40512: PUSH
40513: LD_INT 2
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: LD_INT 1
40522: PUSH
40523: LD_INT 2
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 0
40532: PUSH
40533: LD_INT 2
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 1
40542: NEG
40543: PUSH
40544: LD_INT 1
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 2
40553: NEG
40554: PUSH
40555: LD_INT 0
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 2
40564: NEG
40565: PUSH
40566: LD_INT 1
40568: NEG
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 1
40576: NEG
40577: PUSH
40578: LD_INT 3
40580: NEG
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 1
40588: PUSH
40589: LD_INT 2
40591: NEG
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 3
40599: PUSH
40600: LD_INT 2
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 2
40609: PUSH
40610: LD_INT 3
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 2
40619: NEG
40620: PUSH
40621: LD_INT 1
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 3
40630: NEG
40631: PUSH
40632: LD_INT 1
40634: NEG
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40665: LD_ADDR_VAR 0 33
40669: PUSH
40670: LD_INT 0
40672: PUSH
40673: LD_INT 0
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 0
40682: PUSH
40683: LD_INT 1
40685: NEG
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 1
40693: PUSH
40694: LD_INT 0
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 1
40703: PUSH
40704: LD_INT 1
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 0
40713: PUSH
40714: LD_INT 1
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 1
40723: NEG
40724: PUSH
40725: LD_INT 0
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: LD_INT 1
40734: NEG
40735: PUSH
40736: LD_INT 1
40738: NEG
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 1
40746: NEG
40747: PUSH
40748: LD_INT 2
40750: NEG
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 1
40758: PUSH
40759: LD_INT 1
40761: NEG
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 2
40769: PUSH
40770: LD_INT 0
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_INT 2
40779: PUSH
40780: LD_INT 1
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 1
40789: PUSH
40790: LD_INT 2
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 0
40799: PUSH
40800: LD_INT 2
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 1
40809: NEG
40810: PUSH
40811: LD_INT 1
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 2
40820: NEG
40821: PUSH
40822: LD_INT 0
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 2
40831: NEG
40832: PUSH
40833: LD_INT 1
40835: NEG
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 2
40843: NEG
40844: PUSH
40845: LD_INT 2
40847: NEG
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: PUSH
40853: LD_INT 2
40855: NEG
40856: PUSH
40857: LD_INT 3
40859: NEG
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 2
40867: PUSH
40868: LD_INT 1
40870: NEG
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 3
40878: PUSH
40879: LD_INT 1
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 1
40888: PUSH
40889: LD_INT 3
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 1
40898: NEG
40899: PUSH
40900: LD_INT 2
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 3
40909: NEG
40910: PUSH
40911: LD_INT 2
40913: NEG
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40944: LD_ADDR_VAR 0 34
40948: PUSH
40949: LD_INT 0
40951: PUSH
40952: LD_INT 0
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 0
40961: PUSH
40962: LD_INT 1
40964: NEG
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 1
40972: PUSH
40973: LD_INT 0
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 1
40982: PUSH
40983: LD_INT 1
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 0
40992: PUSH
40993: LD_INT 1
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 1
41002: NEG
41003: PUSH
41004: LD_INT 0
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 1
41013: NEG
41014: PUSH
41015: LD_INT 1
41017: NEG
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 1
41025: NEG
41026: PUSH
41027: LD_INT 2
41029: NEG
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 0
41037: PUSH
41038: LD_INT 2
41040: NEG
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 1
41048: PUSH
41049: LD_INT 1
41051: NEG
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 2
41059: PUSH
41060: LD_INT 1
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 2
41069: PUSH
41070: LD_INT 2
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 1
41079: PUSH
41080: LD_INT 2
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_INT 1
41089: NEG
41090: PUSH
41091: LD_INT 1
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PUSH
41098: LD_INT 2
41100: NEG
41101: PUSH
41102: LD_INT 0
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: LD_INT 2
41111: NEG
41112: PUSH
41113: LD_INT 1
41115: NEG
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 2
41123: NEG
41124: PUSH
41125: LD_INT 2
41127: NEG
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 1
41135: NEG
41136: PUSH
41137: LD_INT 3
41139: NEG
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 1
41147: PUSH
41148: LD_INT 2
41150: NEG
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 3
41158: PUSH
41159: LD_INT 2
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 2
41168: PUSH
41169: LD_INT 3
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 2
41178: NEG
41179: PUSH
41180: LD_INT 1
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: LD_INT 3
41189: NEG
41190: PUSH
41191: LD_INT 1
41193: NEG
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41224: LD_ADDR_VAR 0 35
41228: PUSH
41229: LD_INT 0
41231: PUSH
41232: LD_INT 0
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 0
41241: PUSH
41242: LD_INT 1
41244: NEG
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 1
41252: PUSH
41253: LD_INT 0
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 1
41262: PUSH
41263: LD_INT 1
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 0
41272: PUSH
41273: LD_INT 1
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 1
41282: NEG
41283: PUSH
41284: LD_INT 0
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: LD_INT 1
41293: NEG
41294: PUSH
41295: LD_INT 1
41297: NEG
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 2
41305: PUSH
41306: LD_INT 1
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: LD_INT 2
41315: NEG
41316: PUSH
41317: LD_INT 1
41319: NEG
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41336: LD_ADDR_VAR 0 36
41340: PUSH
41341: LD_INT 0
41343: PUSH
41344: LD_INT 0
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 0
41353: PUSH
41354: LD_INT 1
41356: NEG
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 1
41364: PUSH
41365: LD_INT 0
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 1
41374: PUSH
41375: LD_INT 1
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 0
41384: PUSH
41385: LD_INT 1
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: LD_INT 1
41394: NEG
41395: PUSH
41396: LD_INT 0
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 1
41405: NEG
41406: PUSH
41407: LD_INT 1
41409: NEG
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 1
41417: NEG
41418: PUSH
41419: LD_INT 2
41421: NEG
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 1
41429: PUSH
41430: LD_INT 2
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41448: LD_ADDR_VAR 0 37
41452: PUSH
41453: LD_INT 0
41455: PUSH
41456: LD_INT 0
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 0
41465: PUSH
41466: LD_INT 1
41468: NEG
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 1
41476: PUSH
41477: LD_INT 0
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 1
41486: PUSH
41487: LD_INT 1
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 0
41496: PUSH
41497: LD_INT 1
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 1
41506: NEG
41507: PUSH
41508: LD_INT 0
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 1
41517: NEG
41518: PUSH
41519: LD_INT 1
41521: NEG
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 1
41529: PUSH
41530: LD_INT 1
41532: NEG
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 1
41540: NEG
41541: PUSH
41542: LD_INT 1
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41560: LD_ADDR_VAR 0 38
41564: PUSH
41565: LD_INT 0
41567: PUSH
41568: LD_INT 0
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: LD_INT 0
41577: PUSH
41578: LD_INT 1
41580: NEG
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 1
41588: PUSH
41589: LD_INT 0
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 1
41598: PUSH
41599: LD_INT 1
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 0
41608: PUSH
41609: LD_INT 1
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 1
41618: NEG
41619: PUSH
41620: LD_INT 0
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 1
41629: NEG
41630: PUSH
41631: LD_INT 1
41633: NEG
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 2
41641: PUSH
41642: LD_INT 1
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 2
41651: NEG
41652: PUSH
41653: LD_INT 1
41655: NEG
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41672: LD_ADDR_VAR 0 39
41676: PUSH
41677: LD_INT 0
41679: PUSH
41680: LD_INT 0
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 0
41689: PUSH
41690: LD_INT 1
41692: NEG
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 1
41700: PUSH
41701: LD_INT 0
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 1
41710: PUSH
41711: LD_INT 1
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 0
41720: PUSH
41721: LD_INT 1
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: LD_INT 1
41730: NEG
41731: PUSH
41732: LD_INT 0
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: PUSH
41739: LD_INT 1
41741: NEG
41742: PUSH
41743: LD_INT 1
41745: NEG
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: LD_INT 1
41753: NEG
41754: PUSH
41755: LD_INT 2
41757: NEG
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 1
41765: PUSH
41766: LD_INT 2
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41784: LD_ADDR_VAR 0 40
41788: PUSH
41789: LD_INT 0
41791: PUSH
41792: LD_INT 0
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 0
41801: PUSH
41802: LD_INT 1
41804: NEG
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 1
41812: PUSH
41813: LD_INT 0
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PUSH
41820: LD_INT 1
41822: PUSH
41823: LD_INT 1
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 0
41832: PUSH
41833: LD_INT 1
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 1
41842: NEG
41843: PUSH
41844: LD_INT 0
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 1
41853: NEG
41854: PUSH
41855: LD_INT 1
41857: NEG
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 1
41865: PUSH
41866: LD_INT 1
41868: NEG
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PUSH
41874: LD_INT 1
41876: NEG
41877: PUSH
41878: LD_INT 1
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41896: LD_ADDR_VAR 0 41
41900: PUSH
41901: LD_INT 0
41903: PUSH
41904: LD_INT 0
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 0
41913: PUSH
41914: LD_INT 1
41916: NEG
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 1
41924: PUSH
41925: LD_INT 0
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 1
41934: PUSH
41935: LD_INT 1
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 0
41944: PUSH
41945: LD_INT 1
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 1
41954: NEG
41955: PUSH
41956: LD_INT 0
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 1
41965: NEG
41966: PUSH
41967: LD_INT 1
41969: NEG
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 1
41977: NEG
41978: PUSH
41979: LD_INT 2
41981: NEG
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 1
41989: PUSH
41990: LD_INT 1
41992: NEG
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: LD_INT 2
42000: PUSH
42001: LD_INT 0
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: LD_INT 2
42010: PUSH
42011: LD_INT 1
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 2
42020: PUSH
42021: LD_INT 2
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 1
42030: PUSH
42031: LD_INT 2
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 1
42040: NEG
42041: PUSH
42042: LD_INT 1
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 2
42051: NEG
42052: PUSH
42053: LD_INT 0
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 2
42062: NEG
42063: PUSH
42064: LD_INT 1
42066: NEG
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 2
42074: NEG
42075: PUSH
42076: LD_INT 2
42078: NEG
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 2
42086: NEG
42087: PUSH
42088: LD_INT 3
42090: NEG
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 2
42098: PUSH
42099: LD_INT 1
42101: NEG
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 3
42109: PUSH
42110: LD_INT 0
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 3
42119: PUSH
42120: LD_INT 1
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 3
42129: PUSH
42130: LD_INT 2
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 3
42139: PUSH
42140: LD_INT 3
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 2
42149: PUSH
42150: LD_INT 3
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 2
42159: NEG
42160: PUSH
42161: LD_INT 1
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 3
42170: NEG
42171: PUSH
42172: LD_INT 0
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 3
42181: NEG
42182: PUSH
42183: LD_INT 1
42185: NEG
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 3
42193: NEG
42194: PUSH
42195: LD_INT 2
42197: NEG
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 3
42205: NEG
42206: PUSH
42207: LD_INT 3
42209: NEG
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42246: LD_ADDR_VAR 0 42
42250: PUSH
42251: LD_INT 0
42253: PUSH
42254: LD_INT 0
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 0
42263: PUSH
42264: LD_INT 1
42266: NEG
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 1
42274: PUSH
42275: LD_INT 0
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 1
42284: PUSH
42285: LD_INT 1
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 0
42294: PUSH
42295: LD_INT 1
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 1
42304: NEG
42305: PUSH
42306: LD_INT 0
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 1
42315: NEG
42316: PUSH
42317: LD_INT 1
42319: NEG
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 1
42327: NEG
42328: PUSH
42329: LD_INT 2
42331: NEG
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 0
42339: PUSH
42340: LD_INT 2
42342: NEG
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 1
42350: PUSH
42351: LD_INT 1
42353: NEG
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 2
42361: PUSH
42362: LD_INT 1
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 2
42371: PUSH
42372: LD_INT 2
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 1
42381: PUSH
42382: LD_INT 2
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 0
42391: PUSH
42392: LD_INT 2
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 1
42401: NEG
42402: PUSH
42403: LD_INT 1
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 2
42412: NEG
42413: PUSH
42414: LD_INT 1
42416: NEG
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 2
42424: NEG
42425: PUSH
42426: LD_INT 2
42428: NEG
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 2
42436: NEG
42437: PUSH
42438: LD_INT 3
42440: NEG
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 1
42448: NEG
42449: PUSH
42450: LD_INT 3
42452: NEG
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 0
42460: PUSH
42461: LD_INT 3
42463: NEG
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: LD_INT 1
42471: PUSH
42472: LD_INT 2
42474: NEG
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 3
42482: PUSH
42483: LD_INT 2
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 3
42492: PUSH
42493: LD_INT 3
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 2
42502: PUSH
42503: LD_INT 3
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 1
42512: PUSH
42513: LD_INT 3
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 0
42522: PUSH
42523: LD_INT 3
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 1
42532: NEG
42533: PUSH
42534: LD_INT 2
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 3
42543: NEG
42544: PUSH
42545: LD_INT 2
42547: NEG
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 3
42555: NEG
42556: PUSH
42557: LD_INT 3
42559: NEG
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42596: LD_ADDR_VAR 0 43
42600: PUSH
42601: LD_INT 0
42603: PUSH
42604: LD_INT 0
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 0
42613: PUSH
42614: LD_INT 1
42616: NEG
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 1
42624: PUSH
42625: LD_INT 0
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 1
42634: PUSH
42635: LD_INT 1
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 0
42644: PUSH
42645: LD_INT 1
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 1
42654: NEG
42655: PUSH
42656: LD_INT 0
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_INT 1
42665: NEG
42666: PUSH
42667: LD_INT 1
42669: NEG
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 1
42677: NEG
42678: PUSH
42679: LD_INT 2
42681: NEG
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 0
42689: PUSH
42690: LD_INT 2
42692: NEG
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 1
42700: PUSH
42701: LD_INT 1
42703: NEG
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: LD_INT 2
42711: PUSH
42712: LD_INT 0
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 2
42721: PUSH
42722: LD_INT 1
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 1
42731: PUSH
42732: LD_INT 2
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 0
42741: PUSH
42742: LD_INT 2
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 1
42751: NEG
42752: PUSH
42753: LD_INT 1
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 2
42762: NEG
42763: PUSH
42764: LD_INT 0
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 2
42773: NEG
42774: PUSH
42775: LD_INT 1
42777: NEG
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 1
42785: NEG
42786: PUSH
42787: LD_INT 3
42789: NEG
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 0
42797: PUSH
42798: LD_INT 3
42800: NEG
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 1
42808: PUSH
42809: LD_INT 2
42811: NEG
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: LD_INT 2
42819: PUSH
42820: LD_INT 1
42822: NEG
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 3
42830: PUSH
42831: LD_INT 0
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 3
42840: PUSH
42841: LD_INT 1
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 1
42850: PUSH
42851: LD_INT 3
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 0
42860: PUSH
42861: LD_INT 3
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 1
42870: NEG
42871: PUSH
42872: LD_INT 2
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 2
42881: NEG
42882: PUSH
42883: LD_INT 1
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 3
42892: NEG
42893: PUSH
42894: LD_INT 0
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 3
42903: NEG
42904: PUSH
42905: LD_INT 1
42907: NEG
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42944: LD_ADDR_VAR 0 44
42948: PUSH
42949: LD_INT 0
42951: PUSH
42952: LD_INT 0
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 0
42961: PUSH
42962: LD_INT 1
42964: NEG
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 1
42972: PUSH
42973: LD_INT 0
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 1
42982: PUSH
42983: LD_INT 1
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 0
42992: PUSH
42993: LD_INT 1
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 1
43002: NEG
43003: PUSH
43004: LD_INT 0
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 1
43013: NEG
43014: PUSH
43015: LD_INT 1
43017: NEG
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 1
43025: NEG
43026: PUSH
43027: LD_INT 2
43029: NEG
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 1
43037: PUSH
43038: LD_INT 1
43040: NEG
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 2
43048: PUSH
43049: LD_INT 0
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 2
43058: PUSH
43059: LD_INT 1
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 2
43068: PUSH
43069: LD_INT 2
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 1
43078: PUSH
43079: LD_INT 2
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 1
43088: NEG
43089: PUSH
43090: LD_INT 1
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: LD_INT 2
43099: NEG
43100: PUSH
43101: LD_INT 0
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PUSH
43108: LD_INT 2
43110: NEG
43111: PUSH
43112: LD_INT 1
43114: NEG
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 2
43122: NEG
43123: PUSH
43124: LD_INT 2
43126: NEG
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 2
43134: NEG
43135: PUSH
43136: LD_INT 3
43138: NEG
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 2
43146: PUSH
43147: LD_INT 1
43149: NEG
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: PUSH
43155: LD_INT 3
43157: PUSH
43158: LD_INT 0
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: LD_INT 3
43167: PUSH
43168: LD_INT 1
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 3
43177: PUSH
43178: LD_INT 2
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 3
43187: PUSH
43188: LD_INT 3
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 2
43197: PUSH
43198: LD_INT 3
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 2
43207: NEG
43208: PUSH
43209: LD_INT 1
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 3
43218: NEG
43219: PUSH
43220: LD_INT 0
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 3
43229: NEG
43230: PUSH
43231: LD_INT 1
43233: NEG
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 3
43241: NEG
43242: PUSH
43243: LD_INT 2
43245: NEG
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 3
43253: NEG
43254: PUSH
43255: LD_INT 3
43257: NEG
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43294: LD_ADDR_VAR 0 45
43298: PUSH
43299: LD_INT 0
43301: PUSH
43302: LD_INT 0
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 0
43311: PUSH
43312: LD_INT 1
43314: NEG
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 1
43322: PUSH
43323: LD_INT 0
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 1
43332: PUSH
43333: LD_INT 1
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 0
43342: PUSH
43343: LD_INT 1
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 1
43352: NEG
43353: PUSH
43354: LD_INT 0
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 1
43363: NEG
43364: PUSH
43365: LD_INT 1
43367: NEG
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 1
43375: NEG
43376: PUSH
43377: LD_INT 2
43379: NEG
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 0
43387: PUSH
43388: LD_INT 2
43390: NEG
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 1
43398: PUSH
43399: LD_INT 1
43401: NEG
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 2
43409: PUSH
43410: LD_INT 1
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 2
43419: PUSH
43420: LD_INT 2
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 1
43429: PUSH
43430: LD_INT 2
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 0
43439: PUSH
43440: LD_INT 2
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 1
43449: NEG
43450: PUSH
43451: LD_INT 1
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 2
43460: NEG
43461: PUSH
43462: LD_INT 1
43464: NEG
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 2
43472: NEG
43473: PUSH
43474: LD_INT 2
43476: NEG
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 2
43484: NEG
43485: PUSH
43486: LD_INT 3
43488: NEG
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 1
43496: NEG
43497: PUSH
43498: LD_INT 3
43500: NEG
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 0
43508: PUSH
43509: LD_INT 3
43511: NEG
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 1
43519: PUSH
43520: LD_INT 2
43522: NEG
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 3
43530: PUSH
43531: LD_INT 2
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 3
43540: PUSH
43541: LD_INT 3
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 2
43550: PUSH
43551: LD_INT 3
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 1
43560: PUSH
43561: LD_INT 3
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 0
43570: PUSH
43571: LD_INT 3
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 1
43580: NEG
43581: PUSH
43582: LD_INT 2
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 3
43591: NEG
43592: PUSH
43593: LD_INT 2
43595: NEG
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 3
43603: NEG
43604: PUSH
43605: LD_INT 3
43607: NEG
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43644: LD_ADDR_VAR 0 46
43648: PUSH
43649: LD_INT 0
43651: PUSH
43652: LD_INT 0
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 0
43661: PUSH
43662: LD_INT 1
43664: NEG
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 1
43672: PUSH
43673: LD_INT 0
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 1
43682: PUSH
43683: LD_INT 1
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 0
43692: PUSH
43693: LD_INT 1
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 1
43702: NEG
43703: PUSH
43704: LD_INT 0
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 1
43713: NEG
43714: PUSH
43715: LD_INT 1
43717: NEG
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 1
43725: NEG
43726: PUSH
43727: LD_INT 2
43729: NEG
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 0
43737: PUSH
43738: LD_INT 2
43740: NEG
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 1
43748: PUSH
43749: LD_INT 1
43751: NEG
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 2
43759: PUSH
43760: LD_INT 0
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 2
43769: PUSH
43770: LD_INT 1
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 1
43779: PUSH
43780: LD_INT 2
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 0
43789: PUSH
43790: LD_INT 2
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 1
43799: NEG
43800: PUSH
43801: LD_INT 1
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 2
43810: NEG
43811: PUSH
43812: LD_INT 0
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 2
43821: NEG
43822: PUSH
43823: LD_INT 1
43825: NEG
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 1
43833: NEG
43834: PUSH
43835: LD_INT 3
43837: NEG
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 0
43845: PUSH
43846: LD_INT 3
43848: NEG
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 1
43856: PUSH
43857: LD_INT 2
43859: NEG
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 2
43867: PUSH
43868: LD_INT 1
43870: NEG
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 3
43878: PUSH
43879: LD_INT 0
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 3
43888: PUSH
43889: LD_INT 1
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 1
43898: PUSH
43899: LD_INT 3
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 0
43908: PUSH
43909: LD_INT 3
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 1
43918: NEG
43919: PUSH
43920: LD_INT 2
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 2
43929: NEG
43930: PUSH
43931: LD_INT 1
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 3
43940: NEG
43941: PUSH
43942: LD_INT 0
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 3
43951: NEG
43952: PUSH
43953: LD_INT 1
43955: NEG
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43992: LD_ADDR_VAR 0 47
43996: PUSH
43997: LD_INT 0
43999: PUSH
44000: LD_INT 0
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 0
44009: PUSH
44010: LD_INT 1
44012: NEG
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 1
44020: PUSH
44021: LD_INT 0
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 1
44030: PUSH
44031: LD_INT 1
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 0
44040: PUSH
44041: LD_INT 1
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 1
44050: NEG
44051: PUSH
44052: LD_INT 0
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 1
44061: NEG
44062: PUSH
44063: LD_INT 1
44065: NEG
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 1
44073: NEG
44074: PUSH
44075: LD_INT 2
44077: NEG
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 0
44085: PUSH
44086: LD_INT 2
44088: NEG
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 1
44096: PUSH
44097: LD_INT 1
44099: NEG
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 2
44107: NEG
44108: PUSH
44109: LD_INT 1
44111: NEG
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 2
44119: NEG
44120: PUSH
44121: LD_INT 2
44123: NEG
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44143: LD_ADDR_VAR 0 48
44147: PUSH
44148: LD_INT 0
44150: PUSH
44151: LD_INT 0
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 0
44160: PUSH
44161: LD_INT 1
44163: NEG
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 1
44171: PUSH
44172: LD_INT 0
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 1
44181: PUSH
44182: LD_INT 1
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 0
44191: PUSH
44192: LD_INT 1
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 1
44201: NEG
44202: PUSH
44203: LD_INT 0
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 1
44212: NEG
44213: PUSH
44214: LD_INT 1
44216: NEG
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 1
44224: NEG
44225: PUSH
44226: LD_INT 2
44228: NEG
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 0
44236: PUSH
44237: LD_INT 2
44239: NEG
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 1
44247: PUSH
44248: LD_INT 1
44250: NEG
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 2
44258: PUSH
44259: LD_INT 0
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 2
44268: PUSH
44269: LD_INT 1
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44290: LD_ADDR_VAR 0 49
44294: PUSH
44295: LD_INT 0
44297: PUSH
44298: LD_INT 0
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 0
44307: PUSH
44308: LD_INT 1
44310: NEG
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: LD_INT 1
44318: PUSH
44319: LD_INT 0
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 1
44328: PUSH
44329: LD_INT 1
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 0
44338: PUSH
44339: LD_INT 1
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 1
44348: NEG
44349: PUSH
44350: LD_INT 0
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 1
44359: NEG
44360: PUSH
44361: LD_INT 1
44363: NEG
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 1
44371: PUSH
44372: LD_INT 1
44374: NEG
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 2
44382: PUSH
44383: LD_INT 0
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 2
44392: PUSH
44393: LD_INT 1
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 2
44402: PUSH
44403: LD_INT 2
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 1
44412: PUSH
44413: LD_INT 2
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44434: LD_ADDR_VAR 0 50
44438: PUSH
44439: LD_INT 0
44441: PUSH
44442: LD_INT 0
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 0
44451: PUSH
44452: LD_INT 1
44454: NEG
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 1
44462: PUSH
44463: LD_INT 0
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 1
44472: PUSH
44473: LD_INT 1
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 0
44482: PUSH
44483: LD_INT 1
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 1
44492: NEG
44493: PUSH
44494: LD_INT 0
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 1
44503: NEG
44504: PUSH
44505: LD_INT 1
44507: NEG
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 2
44515: PUSH
44516: LD_INT 1
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 2
44525: PUSH
44526: LD_INT 2
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 1
44535: PUSH
44536: LD_INT 2
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 0
44545: PUSH
44546: LD_INT 2
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 1
44555: NEG
44556: PUSH
44557: LD_INT 1
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44578: LD_ADDR_VAR 0 51
44582: PUSH
44583: LD_INT 0
44585: PUSH
44586: LD_INT 0
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 0
44595: PUSH
44596: LD_INT 1
44598: NEG
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 1
44606: PUSH
44607: LD_INT 0
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 1
44616: PUSH
44617: LD_INT 1
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 0
44626: PUSH
44627: LD_INT 1
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 1
44636: NEG
44637: PUSH
44638: LD_INT 0
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 1
44647: NEG
44648: PUSH
44649: LD_INT 1
44651: NEG
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 1
44659: PUSH
44660: LD_INT 2
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 0
44669: PUSH
44670: LD_INT 2
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 1
44679: NEG
44680: PUSH
44681: LD_INT 1
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 2
44690: NEG
44691: PUSH
44692: LD_INT 0
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 2
44701: NEG
44702: PUSH
44703: LD_INT 1
44705: NEG
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44725: LD_ADDR_VAR 0 52
44729: PUSH
44730: LD_INT 0
44732: PUSH
44733: LD_INT 0
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 0
44742: PUSH
44743: LD_INT 1
44745: NEG
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 1
44753: PUSH
44754: LD_INT 0
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 1
44763: PUSH
44764: LD_INT 1
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 0
44773: PUSH
44774: LD_INT 1
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 1
44783: NEG
44784: PUSH
44785: LD_INT 0
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 1
44794: NEG
44795: PUSH
44796: LD_INT 1
44798: NEG
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 1
44806: NEG
44807: PUSH
44808: LD_INT 2
44810: NEG
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 1
44818: NEG
44819: PUSH
44820: LD_INT 1
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 2
44829: NEG
44830: PUSH
44831: LD_INT 0
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 2
44840: NEG
44841: PUSH
44842: LD_INT 1
44844: NEG
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 2
44852: NEG
44853: PUSH
44854: LD_INT 2
44856: NEG
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44876: LD_ADDR_VAR 0 53
44880: PUSH
44881: LD_INT 0
44883: PUSH
44884: LD_INT 0
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 0
44893: PUSH
44894: LD_INT 1
44896: NEG
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 1
44904: PUSH
44905: LD_INT 0
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 1
44914: PUSH
44915: LD_INT 1
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 0
44924: PUSH
44925: LD_INT 1
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 1
44934: NEG
44935: PUSH
44936: LD_INT 0
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 1
44945: NEG
44946: PUSH
44947: LD_INT 1
44949: NEG
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 1
44957: NEG
44958: PUSH
44959: LD_INT 2
44961: NEG
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 0
44969: PUSH
44970: LD_INT 2
44972: NEG
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 1
44980: PUSH
44981: LD_INT 1
44983: NEG
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 2
44991: PUSH
44992: LD_INT 0
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 2
45001: PUSH
45002: LD_INT 1
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 2
45011: PUSH
45012: LD_INT 2
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 1
45021: PUSH
45022: LD_INT 2
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 0
45031: PUSH
45032: LD_INT 2
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 1
45041: NEG
45042: PUSH
45043: LD_INT 1
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 2
45052: NEG
45053: PUSH
45054: LD_INT 0
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 2
45063: NEG
45064: PUSH
45065: LD_INT 1
45067: NEG
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 2
45075: NEG
45076: PUSH
45077: LD_INT 2
45079: NEG
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45106: LD_ADDR_VAR 0 54
45110: PUSH
45111: LD_INT 0
45113: PUSH
45114: LD_INT 0
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 0
45123: PUSH
45124: LD_INT 1
45126: NEG
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 1
45134: PUSH
45135: LD_INT 0
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 1
45144: PUSH
45145: LD_INT 1
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 0
45154: PUSH
45155: LD_INT 1
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 1
45164: NEG
45165: PUSH
45166: LD_INT 0
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 1
45175: NEG
45176: PUSH
45177: LD_INT 1
45179: NEG
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 1
45187: NEG
45188: PUSH
45189: LD_INT 2
45191: NEG
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 0
45199: PUSH
45200: LD_INT 2
45202: NEG
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 1
45210: PUSH
45211: LD_INT 1
45213: NEG
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 2
45221: PUSH
45222: LD_INT 0
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 2
45231: PUSH
45232: LD_INT 1
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 2
45241: PUSH
45242: LD_INT 2
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 1
45251: PUSH
45252: LD_INT 2
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 0
45261: PUSH
45262: LD_INT 2
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 1
45271: NEG
45272: PUSH
45273: LD_INT 1
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 2
45282: NEG
45283: PUSH
45284: LD_INT 0
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 2
45293: NEG
45294: PUSH
45295: LD_INT 1
45297: NEG
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 2
45305: NEG
45306: PUSH
45307: LD_INT 2
45309: NEG
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45336: LD_ADDR_VAR 0 55
45340: PUSH
45341: LD_INT 0
45343: PUSH
45344: LD_INT 0
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 0
45353: PUSH
45354: LD_INT 1
45356: NEG
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 1
45364: PUSH
45365: LD_INT 0
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 1
45374: PUSH
45375: LD_INT 1
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 0
45384: PUSH
45385: LD_INT 1
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 1
45394: NEG
45395: PUSH
45396: LD_INT 0
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 1
45405: NEG
45406: PUSH
45407: LD_INT 1
45409: NEG
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 1
45417: NEG
45418: PUSH
45419: LD_INT 2
45421: NEG
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 0
45429: PUSH
45430: LD_INT 2
45432: NEG
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 1
45440: PUSH
45441: LD_INT 1
45443: NEG
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 2
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 2
45461: PUSH
45462: LD_INT 1
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 2
45471: PUSH
45472: LD_INT 2
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 1
45481: PUSH
45482: LD_INT 2
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 0
45491: PUSH
45492: LD_INT 2
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 1
45501: NEG
45502: PUSH
45503: LD_INT 1
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 2
45512: NEG
45513: PUSH
45514: LD_INT 0
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 2
45523: NEG
45524: PUSH
45525: LD_INT 1
45527: NEG
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 2
45535: NEG
45536: PUSH
45537: LD_INT 2
45539: NEG
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45566: LD_ADDR_VAR 0 56
45570: PUSH
45571: LD_INT 0
45573: PUSH
45574: LD_INT 0
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 0
45583: PUSH
45584: LD_INT 1
45586: NEG
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 1
45594: PUSH
45595: LD_INT 0
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 1
45604: PUSH
45605: LD_INT 1
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 0
45614: PUSH
45615: LD_INT 1
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 1
45624: NEG
45625: PUSH
45626: LD_INT 0
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 1
45635: NEG
45636: PUSH
45637: LD_INT 1
45639: NEG
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 1
45647: NEG
45648: PUSH
45649: LD_INT 2
45651: NEG
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 0
45659: PUSH
45660: LD_INT 2
45662: NEG
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 1
45670: PUSH
45671: LD_INT 1
45673: NEG
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 2
45681: PUSH
45682: LD_INT 0
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 2
45691: PUSH
45692: LD_INT 1
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 2
45701: PUSH
45702: LD_INT 2
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 1
45711: PUSH
45712: LD_INT 2
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 0
45721: PUSH
45722: LD_INT 2
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 1
45731: NEG
45732: PUSH
45733: LD_INT 1
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 2
45742: NEG
45743: PUSH
45744: LD_INT 0
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 2
45753: NEG
45754: PUSH
45755: LD_INT 1
45757: NEG
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 2
45765: NEG
45766: PUSH
45767: LD_INT 2
45769: NEG
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45796: LD_ADDR_VAR 0 57
45800: PUSH
45801: LD_INT 0
45803: PUSH
45804: LD_INT 0
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 0
45813: PUSH
45814: LD_INT 1
45816: NEG
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 1
45824: PUSH
45825: LD_INT 0
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 1
45834: PUSH
45835: LD_INT 1
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 0
45844: PUSH
45845: LD_INT 1
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 1
45854: NEG
45855: PUSH
45856: LD_INT 0
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 1
45865: NEG
45866: PUSH
45867: LD_INT 1
45869: NEG
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 1
45877: NEG
45878: PUSH
45879: LD_INT 2
45881: NEG
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 0
45889: PUSH
45890: LD_INT 2
45892: NEG
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 1
45900: PUSH
45901: LD_INT 1
45903: NEG
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 2
45911: PUSH
45912: LD_INT 0
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 2
45921: PUSH
45922: LD_INT 1
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 2
45931: PUSH
45932: LD_INT 2
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 1
45941: PUSH
45942: LD_INT 2
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 0
45951: PUSH
45952: LD_INT 2
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 1
45961: NEG
45962: PUSH
45963: LD_INT 1
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 2
45972: NEG
45973: PUSH
45974: LD_INT 0
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 2
45983: NEG
45984: PUSH
45985: LD_INT 1
45987: NEG
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 2
45995: NEG
45996: PUSH
45997: LD_INT 2
45999: NEG
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46026: LD_ADDR_VAR 0 58
46030: PUSH
46031: LD_INT 0
46033: PUSH
46034: LD_INT 0
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 0
46043: PUSH
46044: LD_INT 1
46046: NEG
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 1
46054: PUSH
46055: LD_INT 0
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 1
46064: PUSH
46065: LD_INT 1
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 0
46074: PUSH
46075: LD_INT 1
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 1
46084: NEG
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 1
46095: NEG
46096: PUSH
46097: LD_INT 1
46099: NEG
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 1
46107: NEG
46108: PUSH
46109: LD_INT 2
46111: NEG
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 0
46119: PUSH
46120: LD_INT 2
46122: NEG
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 1
46130: PUSH
46131: LD_INT 1
46133: NEG
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 2
46141: PUSH
46142: LD_INT 0
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 2
46151: PUSH
46152: LD_INT 1
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 2
46161: PUSH
46162: LD_INT 2
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 1
46171: PUSH
46172: LD_INT 2
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 0
46181: PUSH
46182: LD_INT 2
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 1
46191: NEG
46192: PUSH
46193: LD_INT 1
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 2
46202: NEG
46203: PUSH
46204: LD_INT 0
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 2
46213: NEG
46214: PUSH
46215: LD_INT 1
46217: NEG
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 2
46225: NEG
46226: PUSH
46227: LD_INT 2
46229: NEG
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46256: LD_ADDR_VAR 0 59
46260: PUSH
46261: LD_INT 0
46263: PUSH
46264: LD_INT 0
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 0
46273: PUSH
46274: LD_INT 1
46276: NEG
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 1
46284: PUSH
46285: LD_INT 0
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 1
46294: PUSH
46295: LD_INT 1
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 0
46304: PUSH
46305: LD_INT 1
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 1
46314: NEG
46315: PUSH
46316: LD_INT 0
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 1
46325: NEG
46326: PUSH
46327: LD_INT 1
46329: NEG
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46344: LD_ADDR_VAR 0 60
46348: PUSH
46349: LD_INT 0
46351: PUSH
46352: LD_INT 0
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 0
46361: PUSH
46362: LD_INT 1
46364: NEG
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 1
46372: PUSH
46373: LD_INT 0
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 1
46382: PUSH
46383: LD_INT 1
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 0
46392: PUSH
46393: LD_INT 1
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 1
46402: NEG
46403: PUSH
46404: LD_INT 0
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 1
46413: NEG
46414: PUSH
46415: LD_INT 1
46417: NEG
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46432: LD_ADDR_VAR 0 61
46436: PUSH
46437: LD_INT 0
46439: PUSH
46440: LD_INT 0
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 0
46449: PUSH
46450: LD_INT 1
46452: NEG
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 1
46460: PUSH
46461: LD_INT 0
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 1
46470: PUSH
46471: LD_INT 1
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 0
46480: PUSH
46481: LD_INT 1
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 1
46490: NEG
46491: PUSH
46492: LD_INT 0
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 1
46501: NEG
46502: PUSH
46503: LD_INT 1
46505: NEG
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46520: LD_ADDR_VAR 0 62
46524: PUSH
46525: LD_INT 0
46527: PUSH
46528: LD_INT 0
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 0
46537: PUSH
46538: LD_INT 1
46540: NEG
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 1
46548: PUSH
46549: LD_INT 0
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 1
46558: PUSH
46559: LD_INT 1
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 0
46568: PUSH
46569: LD_INT 1
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 1
46578: NEG
46579: PUSH
46580: LD_INT 0
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 1
46589: NEG
46590: PUSH
46591: LD_INT 1
46593: NEG
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46608: LD_ADDR_VAR 0 63
46612: PUSH
46613: LD_INT 0
46615: PUSH
46616: LD_INT 0
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 0
46625: PUSH
46626: LD_INT 1
46628: NEG
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 1
46636: PUSH
46637: LD_INT 0
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 1
46646: PUSH
46647: LD_INT 1
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 0
46656: PUSH
46657: LD_INT 1
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 1
46666: NEG
46667: PUSH
46668: LD_INT 0
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 1
46677: NEG
46678: PUSH
46679: LD_INT 1
46681: NEG
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46696: LD_ADDR_VAR 0 64
46700: PUSH
46701: LD_INT 0
46703: PUSH
46704: LD_INT 0
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 0
46713: PUSH
46714: LD_INT 1
46716: NEG
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 1
46724: PUSH
46725: LD_INT 0
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 1
46734: PUSH
46735: LD_INT 1
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 0
46744: PUSH
46745: LD_INT 1
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 1
46754: NEG
46755: PUSH
46756: LD_INT 0
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 1
46765: NEG
46766: PUSH
46767: LD_INT 1
46769: NEG
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: ST_TO_ADDR
// end ; 1 :
46784: GO 52681
46786: LD_INT 1
46788: DOUBLE
46789: EQUAL
46790: IFTRUE 46794
46792: GO 49417
46794: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46795: LD_ADDR_VAR 0 11
46799: PUSH
46800: LD_INT 1
46802: NEG
46803: PUSH
46804: LD_INT 3
46806: NEG
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 0
46814: PUSH
46815: LD_INT 3
46817: NEG
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 1
46825: PUSH
46826: LD_INT 2
46828: NEG
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: LIST
46838: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46839: LD_ADDR_VAR 0 12
46843: PUSH
46844: LD_INT 2
46846: PUSH
46847: LD_INT 1
46849: NEG
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 3
46857: PUSH
46858: LD_INT 0
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 3
46867: PUSH
46868: LD_INT 1
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: LIST
46879: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46880: LD_ADDR_VAR 0 13
46884: PUSH
46885: LD_INT 3
46887: PUSH
46888: LD_INT 2
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 3
46897: PUSH
46898: LD_INT 3
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 2
46907: PUSH
46908: LD_INT 3
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: LIST
46919: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46920: LD_ADDR_VAR 0 14
46924: PUSH
46925: LD_INT 1
46927: PUSH
46928: LD_INT 3
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 0
46937: PUSH
46938: LD_INT 3
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 1
46947: NEG
46948: PUSH
46949: LD_INT 2
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: LIST
46960: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46961: LD_ADDR_VAR 0 15
46965: PUSH
46966: LD_INT 2
46968: NEG
46969: PUSH
46970: LD_INT 1
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 3
46979: NEG
46980: PUSH
46981: LD_INT 0
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 3
46990: NEG
46991: PUSH
46992: LD_INT 1
46994: NEG
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: LIST
47004: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47005: LD_ADDR_VAR 0 16
47009: PUSH
47010: LD_INT 2
47012: NEG
47013: PUSH
47014: LD_INT 3
47016: NEG
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 3
47024: NEG
47025: PUSH
47026: LD_INT 2
47028: NEG
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 3
47036: NEG
47037: PUSH
47038: LD_INT 3
47040: NEG
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: LIST
47050: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47051: LD_ADDR_VAR 0 17
47055: PUSH
47056: LD_INT 1
47058: NEG
47059: PUSH
47060: LD_INT 3
47062: NEG
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 0
47070: PUSH
47071: LD_INT 3
47073: NEG
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 1
47081: PUSH
47082: LD_INT 2
47084: NEG
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: LIST
47094: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47095: LD_ADDR_VAR 0 18
47099: PUSH
47100: LD_INT 2
47102: PUSH
47103: LD_INT 1
47105: NEG
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 3
47113: PUSH
47114: LD_INT 0
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 3
47123: PUSH
47124: LD_INT 1
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: LIST
47135: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47136: LD_ADDR_VAR 0 19
47140: PUSH
47141: LD_INT 3
47143: PUSH
47144: LD_INT 2
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 3
47153: PUSH
47154: LD_INT 3
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 2
47163: PUSH
47164: LD_INT 3
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: LIST
47175: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47176: LD_ADDR_VAR 0 20
47180: PUSH
47181: LD_INT 1
47183: PUSH
47184: LD_INT 3
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 0
47193: PUSH
47194: LD_INT 3
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 1
47203: NEG
47204: PUSH
47205: LD_INT 2
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: LIST
47216: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47217: LD_ADDR_VAR 0 21
47221: PUSH
47222: LD_INT 2
47224: NEG
47225: PUSH
47226: LD_INT 1
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 3
47235: NEG
47236: PUSH
47237: LD_INT 0
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 3
47246: NEG
47247: PUSH
47248: LD_INT 1
47250: NEG
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: LIST
47260: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47261: LD_ADDR_VAR 0 22
47265: PUSH
47266: LD_INT 2
47268: NEG
47269: PUSH
47270: LD_INT 3
47272: NEG
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 3
47280: NEG
47281: PUSH
47282: LD_INT 2
47284: NEG
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 3
47292: NEG
47293: PUSH
47294: LD_INT 3
47296: NEG
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: LIST
47306: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47307: LD_ADDR_VAR 0 23
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: LD_INT 3
47317: NEG
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 1
47325: NEG
47326: PUSH
47327: LD_INT 4
47329: NEG
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 1
47337: PUSH
47338: LD_INT 3
47340: NEG
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: LIST
47350: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47351: LD_ADDR_VAR 0 24
47355: PUSH
47356: LD_INT 3
47358: PUSH
47359: LD_INT 0
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 3
47368: PUSH
47369: LD_INT 1
47371: NEG
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 4
47379: PUSH
47380: LD_INT 1
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: LIST
47391: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47392: LD_ADDR_VAR 0 25
47396: PUSH
47397: LD_INT 3
47399: PUSH
47400: LD_INT 3
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 4
47409: PUSH
47410: LD_INT 3
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 3
47419: PUSH
47420: LD_INT 4
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: LIST
47431: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47432: LD_ADDR_VAR 0 26
47436: PUSH
47437: LD_INT 0
47439: PUSH
47440: LD_INT 3
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 1
47449: PUSH
47450: LD_INT 4
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 1
47459: NEG
47460: PUSH
47461: LD_INT 3
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: LIST
47472: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47473: LD_ADDR_VAR 0 27
47477: PUSH
47478: LD_INT 3
47480: NEG
47481: PUSH
47482: LD_INT 0
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 3
47491: NEG
47492: PUSH
47493: LD_INT 1
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 4
47502: NEG
47503: PUSH
47504: LD_INT 1
47506: NEG
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: LIST
47516: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47517: LD_ADDR_VAR 0 28
47521: PUSH
47522: LD_INT 3
47524: NEG
47525: PUSH
47526: LD_INT 3
47528: NEG
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 3
47536: NEG
47537: PUSH
47538: LD_INT 4
47540: NEG
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 4
47548: NEG
47549: PUSH
47550: LD_INT 3
47552: NEG
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: LIST
47562: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47563: LD_ADDR_VAR 0 29
47567: PUSH
47568: LD_INT 1
47570: NEG
47571: PUSH
47572: LD_INT 3
47574: NEG
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 0
47582: PUSH
47583: LD_INT 3
47585: NEG
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 1
47593: PUSH
47594: LD_INT 2
47596: NEG
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 1
47604: NEG
47605: PUSH
47606: LD_INT 4
47608: NEG
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 0
47616: PUSH
47617: LD_INT 4
47619: NEG
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 1
47627: PUSH
47628: LD_INT 3
47630: NEG
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 1
47638: NEG
47639: PUSH
47640: LD_INT 5
47642: NEG
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 0
47650: PUSH
47651: LD_INT 5
47653: NEG
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 1
47661: PUSH
47662: LD_INT 4
47664: NEG
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 1
47672: NEG
47673: PUSH
47674: LD_INT 6
47676: NEG
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 0
47684: PUSH
47685: LD_INT 6
47687: NEG
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 1
47695: PUSH
47696: LD_INT 5
47698: NEG
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47718: LD_ADDR_VAR 0 30
47722: PUSH
47723: LD_INT 2
47725: PUSH
47726: LD_INT 1
47728: NEG
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 3
47736: PUSH
47737: LD_INT 0
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 3
47746: PUSH
47747: LD_INT 1
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 3
47756: PUSH
47757: LD_INT 1
47759: NEG
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 4
47767: PUSH
47768: LD_INT 0
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 4
47777: PUSH
47778: LD_INT 1
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 4
47787: PUSH
47788: LD_INT 1
47790: NEG
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 5
47798: PUSH
47799: LD_INT 0
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 5
47808: PUSH
47809: LD_INT 1
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 5
47818: PUSH
47819: LD_INT 1
47821: NEG
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 6
47829: PUSH
47830: LD_INT 0
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 6
47839: PUSH
47840: LD_INT 1
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47861: LD_ADDR_VAR 0 31
47865: PUSH
47866: LD_INT 3
47868: PUSH
47869: LD_INT 2
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 3
47878: PUSH
47879: LD_INT 3
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 2
47888: PUSH
47889: LD_INT 3
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 4
47898: PUSH
47899: LD_INT 3
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 4
47908: PUSH
47909: LD_INT 4
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 3
47918: PUSH
47919: LD_INT 4
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 5
47928: PUSH
47929: LD_INT 4
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 5
47938: PUSH
47939: LD_INT 5
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 4
47948: PUSH
47949: LD_INT 5
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 6
47958: PUSH
47959: LD_INT 5
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 6
47968: PUSH
47969: LD_INT 6
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 5
47978: PUSH
47979: LD_INT 6
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48000: LD_ADDR_VAR 0 32
48004: PUSH
48005: LD_INT 1
48007: PUSH
48008: LD_INT 3
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 0
48017: PUSH
48018: LD_INT 3
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 1
48027: NEG
48028: PUSH
48029: LD_INT 2
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 1
48038: PUSH
48039: LD_INT 4
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 0
48048: PUSH
48049: LD_INT 4
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 1
48058: NEG
48059: PUSH
48060: LD_INT 3
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 1
48069: PUSH
48070: LD_INT 5
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 0
48079: PUSH
48080: LD_INT 5
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 1
48089: NEG
48090: PUSH
48091: LD_INT 4
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 1
48100: PUSH
48101: LD_INT 6
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 0
48110: PUSH
48111: LD_INT 6
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 1
48120: NEG
48121: PUSH
48122: LD_INT 5
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48143: LD_ADDR_VAR 0 33
48147: PUSH
48148: LD_INT 2
48150: NEG
48151: PUSH
48152: LD_INT 1
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 3
48161: NEG
48162: PUSH
48163: LD_INT 0
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 3
48172: NEG
48173: PUSH
48174: LD_INT 1
48176: NEG
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 3
48184: NEG
48185: PUSH
48186: LD_INT 1
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 4
48195: NEG
48196: PUSH
48197: LD_INT 0
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 4
48206: NEG
48207: PUSH
48208: LD_INT 1
48210: NEG
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 4
48218: NEG
48219: PUSH
48220: LD_INT 1
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 5
48229: NEG
48230: PUSH
48231: LD_INT 0
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 5
48240: NEG
48241: PUSH
48242: LD_INT 1
48244: NEG
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 5
48252: NEG
48253: PUSH
48254: LD_INT 1
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 6
48263: NEG
48264: PUSH
48265: LD_INT 0
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 6
48274: NEG
48275: PUSH
48276: LD_INT 1
48278: NEG
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48298: LD_ADDR_VAR 0 34
48302: PUSH
48303: LD_INT 2
48305: NEG
48306: PUSH
48307: LD_INT 3
48309: NEG
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 3
48317: NEG
48318: PUSH
48319: LD_INT 2
48321: NEG
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 3
48329: NEG
48330: PUSH
48331: LD_INT 3
48333: NEG
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 3
48341: NEG
48342: PUSH
48343: LD_INT 4
48345: NEG
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 4
48353: NEG
48354: PUSH
48355: LD_INT 3
48357: NEG
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 4
48365: NEG
48366: PUSH
48367: LD_INT 4
48369: NEG
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 4
48377: NEG
48378: PUSH
48379: LD_INT 5
48381: NEG
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 5
48389: NEG
48390: PUSH
48391: LD_INT 4
48393: NEG
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 5
48401: NEG
48402: PUSH
48403: LD_INT 5
48405: NEG
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 5
48413: NEG
48414: PUSH
48415: LD_INT 6
48417: NEG
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 6
48425: NEG
48426: PUSH
48427: LD_INT 5
48429: NEG
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 6
48437: NEG
48438: PUSH
48439: LD_INT 6
48441: NEG
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48461: LD_ADDR_VAR 0 41
48465: PUSH
48466: LD_INT 0
48468: PUSH
48469: LD_INT 2
48471: NEG
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 1
48479: NEG
48480: PUSH
48481: LD_INT 3
48483: NEG
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 1
48491: PUSH
48492: LD_INT 2
48494: NEG
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: LIST
48504: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48505: LD_ADDR_VAR 0 42
48509: PUSH
48510: LD_INT 2
48512: PUSH
48513: LD_INT 0
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 2
48522: PUSH
48523: LD_INT 1
48525: NEG
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 3
48533: PUSH
48534: LD_INT 1
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: LIST
48545: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48546: LD_ADDR_VAR 0 43
48550: PUSH
48551: LD_INT 2
48553: PUSH
48554: LD_INT 2
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 3
48563: PUSH
48564: LD_INT 2
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 2
48573: PUSH
48574: LD_INT 3
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: LIST
48585: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48586: LD_ADDR_VAR 0 44
48590: PUSH
48591: LD_INT 0
48593: PUSH
48594: LD_INT 2
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 1
48603: PUSH
48604: LD_INT 3
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 1
48613: NEG
48614: PUSH
48615: LD_INT 2
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: LIST
48626: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48627: LD_ADDR_VAR 0 45
48631: PUSH
48632: LD_INT 2
48634: NEG
48635: PUSH
48636: LD_INT 0
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 2
48645: NEG
48646: PUSH
48647: LD_INT 1
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 3
48656: NEG
48657: PUSH
48658: LD_INT 1
48660: NEG
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: LIST
48670: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48671: LD_ADDR_VAR 0 46
48675: PUSH
48676: LD_INT 2
48678: NEG
48679: PUSH
48680: LD_INT 2
48682: NEG
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 2
48690: NEG
48691: PUSH
48692: LD_INT 3
48694: NEG
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 3
48702: NEG
48703: PUSH
48704: LD_INT 2
48706: NEG
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: LIST
48716: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48717: LD_ADDR_VAR 0 47
48721: PUSH
48722: LD_INT 2
48724: NEG
48725: PUSH
48726: LD_INT 3
48728: NEG
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 1
48736: NEG
48737: PUSH
48738: LD_INT 3
48740: NEG
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48750: LD_ADDR_VAR 0 48
48754: PUSH
48755: LD_INT 1
48757: PUSH
48758: LD_INT 2
48760: NEG
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 2
48768: PUSH
48769: LD_INT 1
48771: NEG
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48781: LD_ADDR_VAR 0 49
48785: PUSH
48786: LD_INT 3
48788: PUSH
48789: LD_INT 1
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 3
48798: PUSH
48799: LD_INT 2
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48810: LD_ADDR_VAR 0 50
48814: PUSH
48815: LD_INT 2
48817: PUSH
48818: LD_INT 3
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 1
48827: PUSH
48828: LD_INT 3
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48839: LD_ADDR_VAR 0 51
48843: PUSH
48844: LD_INT 1
48846: NEG
48847: PUSH
48848: LD_INT 2
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 2
48857: NEG
48858: PUSH
48859: LD_INT 1
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48870: LD_ADDR_VAR 0 52
48874: PUSH
48875: LD_INT 3
48877: NEG
48878: PUSH
48879: LD_INT 1
48881: NEG
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 3
48889: NEG
48890: PUSH
48891: LD_INT 2
48893: NEG
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48903: LD_ADDR_VAR 0 53
48907: PUSH
48908: LD_INT 1
48910: NEG
48911: PUSH
48912: LD_INT 3
48914: NEG
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 0
48922: PUSH
48923: LD_INT 3
48925: NEG
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 1
48933: PUSH
48934: LD_INT 2
48936: NEG
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: LIST
48946: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48947: LD_ADDR_VAR 0 54
48951: PUSH
48952: LD_INT 2
48954: PUSH
48955: LD_INT 1
48957: NEG
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 3
48965: PUSH
48966: LD_INT 0
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 3
48975: PUSH
48976: LD_INT 1
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: LIST
48987: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48988: LD_ADDR_VAR 0 55
48992: PUSH
48993: LD_INT 3
48995: PUSH
48996: LD_INT 2
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 3
49005: PUSH
49006: LD_INT 3
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 2
49015: PUSH
49016: LD_INT 3
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: LIST
49027: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49028: LD_ADDR_VAR 0 56
49032: PUSH
49033: LD_INT 1
49035: PUSH
49036: LD_INT 3
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 0
49045: PUSH
49046: LD_INT 3
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 1
49055: NEG
49056: PUSH
49057: LD_INT 2
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: LIST
49068: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49069: LD_ADDR_VAR 0 57
49073: PUSH
49074: LD_INT 2
49076: NEG
49077: PUSH
49078: LD_INT 1
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 3
49087: NEG
49088: PUSH
49089: LD_INT 0
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 3
49098: NEG
49099: PUSH
49100: LD_INT 1
49102: NEG
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: LIST
49112: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49113: LD_ADDR_VAR 0 58
49117: PUSH
49118: LD_INT 2
49120: NEG
49121: PUSH
49122: LD_INT 3
49124: NEG
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 3
49132: NEG
49133: PUSH
49134: LD_INT 2
49136: NEG
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 3
49144: NEG
49145: PUSH
49146: LD_INT 3
49148: NEG
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: LIST
49158: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49159: LD_ADDR_VAR 0 59
49163: PUSH
49164: LD_INT 1
49166: NEG
49167: PUSH
49168: LD_INT 2
49170: NEG
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 0
49178: PUSH
49179: LD_INT 2
49181: NEG
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 1
49189: PUSH
49190: LD_INT 1
49192: NEG
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: LIST
49202: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49203: LD_ADDR_VAR 0 60
49207: PUSH
49208: LD_INT 1
49210: PUSH
49211: LD_INT 1
49213: NEG
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 2
49221: PUSH
49222: LD_INT 0
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 2
49231: PUSH
49232: LD_INT 1
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: LIST
49243: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49244: LD_ADDR_VAR 0 61
49248: PUSH
49249: LD_INT 2
49251: PUSH
49252: LD_INT 1
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 2
49261: PUSH
49262: LD_INT 2
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 1
49271: PUSH
49272: LD_INT 2
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: LIST
49283: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49284: LD_ADDR_VAR 0 62
49288: PUSH
49289: LD_INT 1
49291: PUSH
49292: LD_INT 2
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 0
49301: PUSH
49302: LD_INT 2
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 1
49311: NEG
49312: PUSH
49313: LD_INT 1
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: LIST
49324: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49325: LD_ADDR_VAR 0 63
49329: PUSH
49330: LD_INT 1
49332: NEG
49333: PUSH
49334: LD_INT 1
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 2
49343: NEG
49344: PUSH
49345: LD_INT 0
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 2
49354: NEG
49355: PUSH
49356: LD_INT 1
49358: NEG
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: LIST
49368: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49369: LD_ADDR_VAR 0 64
49373: PUSH
49374: LD_INT 1
49376: NEG
49377: PUSH
49378: LD_INT 2
49380: NEG
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 2
49388: NEG
49389: PUSH
49390: LD_INT 1
49392: NEG
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 2
49400: NEG
49401: PUSH
49402: LD_INT 2
49404: NEG
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: LIST
49414: ST_TO_ADDR
// end ; 2 :
49415: GO 52681
49417: LD_INT 2
49419: DOUBLE
49420: EQUAL
49421: IFTRUE 49425
49423: GO 52680
49425: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49426: LD_ADDR_VAR 0 29
49430: PUSH
49431: LD_INT 4
49433: PUSH
49434: LD_INT 0
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 4
49443: PUSH
49444: LD_INT 1
49446: NEG
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 5
49454: PUSH
49455: LD_INT 0
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 5
49464: PUSH
49465: LD_INT 1
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 4
49474: PUSH
49475: LD_INT 1
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 3
49484: PUSH
49485: LD_INT 0
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 3
49494: PUSH
49495: LD_INT 1
49497: NEG
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 3
49505: PUSH
49506: LD_INT 2
49508: NEG
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 5
49516: PUSH
49517: LD_INT 2
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 3
49526: PUSH
49527: LD_INT 3
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 3
49536: PUSH
49537: LD_INT 2
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 4
49546: PUSH
49547: LD_INT 3
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 4
49556: PUSH
49557: LD_INT 4
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 3
49566: PUSH
49567: LD_INT 4
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 2
49576: PUSH
49577: LD_INT 3
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 2
49586: PUSH
49587: LD_INT 2
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 4
49596: PUSH
49597: LD_INT 2
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 2
49606: PUSH
49607: LD_INT 4
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 0
49616: PUSH
49617: LD_INT 4
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 0
49626: PUSH
49627: LD_INT 3
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 1
49636: PUSH
49637: LD_INT 4
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 1
49646: PUSH
49647: LD_INT 5
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 0
49656: PUSH
49657: LD_INT 5
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 1
49666: NEG
49667: PUSH
49668: LD_INT 4
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 1
49677: NEG
49678: PUSH
49679: LD_INT 3
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 2
49688: PUSH
49689: LD_INT 5
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 2
49698: NEG
49699: PUSH
49700: LD_INT 3
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 3
49709: NEG
49710: PUSH
49711: LD_INT 0
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 3
49720: NEG
49721: PUSH
49722: LD_INT 1
49724: NEG
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 2
49732: NEG
49733: PUSH
49734: LD_INT 0
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 2
49743: NEG
49744: PUSH
49745: LD_INT 1
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 3
49754: NEG
49755: PUSH
49756: LD_INT 1
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 4
49765: NEG
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 4
49776: NEG
49777: PUSH
49778: LD_INT 1
49780: NEG
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 4
49788: NEG
49789: PUSH
49790: LD_INT 2
49792: NEG
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 2
49800: NEG
49801: PUSH
49802: LD_INT 2
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 4
49811: NEG
49812: PUSH
49813: LD_INT 4
49815: NEG
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 4
49823: NEG
49824: PUSH
49825: LD_INT 5
49827: NEG
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 3
49835: NEG
49836: PUSH
49837: LD_INT 4
49839: NEG
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 3
49847: NEG
49848: PUSH
49849: LD_INT 3
49851: NEG
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 4
49859: NEG
49860: PUSH
49861: LD_INT 3
49863: NEG
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 5
49871: NEG
49872: PUSH
49873: LD_INT 4
49875: NEG
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 5
49883: NEG
49884: PUSH
49885: LD_INT 5
49887: NEG
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 3
49895: NEG
49896: PUSH
49897: LD_INT 5
49899: NEG
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 5
49907: NEG
49908: PUSH
49909: LD_INT 3
49911: NEG
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49964: LD_ADDR_VAR 0 30
49968: PUSH
49969: LD_INT 4
49971: PUSH
49972: LD_INT 4
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 4
49981: PUSH
49982: LD_INT 3
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 5
49991: PUSH
49992: LD_INT 4
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 5
50001: PUSH
50002: LD_INT 5
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 4
50011: PUSH
50012: LD_INT 5
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 3
50021: PUSH
50022: LD_INT 4
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 3
50031: PUSH
50032: LD_INT 3
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 5
50041: PUSH
50042: LD_INT 3
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 3
50051: PUSH
50052: LD_INT 5
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 0
50061: PUSH
50062: LD_INT 3
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 0
50071: PUSH
50072: LD_INT 2
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 1
50081: PUSH
50082: LD_INT 3
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 1
50091: PUSH
50092: LD_INT 4
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 0
50101: PUSH
50102: LD_INT 4
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 1
50111: NEG
50112: PUSH
50113: LD_INT 3
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 1
50122: NEG
50123: PUSH
50124: LD_INT 2
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 2
50133: PUSH
50134: LD_INT 4
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 2
50143: NEG
50144: PUSH
50145: LD_INT 2
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 4
50154: NEG
50155: PUSH
50156: LD_INT 0
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 4
50165: NEG
50166: PUSH
50167: LD_INT 1
50169: NEG
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 3
50177: NEG
50178: PUSH
50179: LD_INT 0
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 3
50188: NEG
50189: PUSH
50190: LD_INT 1
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 4
50199: NEG
50200: PUSH
50201: LD_INT 1
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 5
50210: NEG
50211: PUSH
50212: LD_INT 0
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 5
50221: NEG
50222: PUSH
50223: LD_INT 1
50225: NEG
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 5
50233: NEG
50234: PUSH
50235: LD_INT 2
50237: NEG
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 3
50245: NEG
50246: PUSH
50247: LD_INT 2
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 3
50256: NEG
50257: PUSH
50258: LD_INT 3
50260: NEG
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 3
50268: NEG
50269: PUSH
50270: LD_INT 4
50272: NEG
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 2
50280: NEG
50281: PUSH
50282: LD_INT 3
50284: NEG
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 2
50292: NEG
50293: PUSH
50294: LD_INT 2
50296: NEG
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 3
50304: NEG
50305: PUSH
50306: LD_INT 2
50308: NEG
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 4
50316: NEG
50317: PUSH
50318: LD_INT 3
50320: NEG
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 4
50328: NEG
50329: PUSH
50330: LD_INT 4
50332: NEG
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 2
50340: NEG
50341: PUSH
50342: LD_INT 4
50344: NEG
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 4
50352: NEG
50353: PUSH
50354: LD_INT 2
50356: NEG
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 0
50364: PUSH
50365: LD_INT 4
50367: NEG
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 0
50375: PUSH
50376: LD_INT 5
50378: NEG
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 1
50386: PUSH
50387: LD_INT 4
50389: NEG
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 1
50397: PUSH
50398: LD_INT 3
50400: NEG
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 0
50408: PUSH
50409: LD_INT 3
50411: NEG
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 1
50419: NEG
50420: PUSH
50421: LD_INT 4
50423: NEG
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 1
50431: NEG
50432: PUSH
50433: LD_INT 5
50435: NEG
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 2
50443: PUSH
50444: LD_INT 3
50446: NEG
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 2
50454: NEG
50455: PUSH
50456: LD_INT 5
50458: NEG
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50511: LD_ADDR_VAR 0 31
50515: PUSH
50516: LD_INT 0
50518: PUSH
50519: LD_INT 4
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 0
50528: PUSH
50529: LD_INT 3
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 1
50538: PUSH
50539: LD_INT 4
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 1
50548: PUSH
50549: LD_INT 5
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 0
50558: PUSH
50559: LD_INT 5
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 1
50568: NEG
50569: PUSH
50570: LD_INT 4
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 1
50579: NEG
50580: PUSH
50581: LD_INT 3
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 2
50590: PUSH
50591: LD_INT 5
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 2
50600: NEG
50601: PUSH
50602: LD_INT 3
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 3
50611: NEG
50612: PUSH
50613: LD_INT 0
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 3
50622: NEG
50623: PUSH
50624: LD_INT 1
50626: NEG
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 2
50634: NEG
50635: PUSH
50636: LD_INT 0
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 2
50645: NEG
50646: PUSH
50647: LD_INT 1
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 3
50656: NEG
50657: PUSH
50658: LD_INT 1
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 4
50667: NEG
50668: PUSH
50669: LD_INT 0
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 4
50678: NEG
50679: PUSH
50680: LD_INT 1
50682: NEG
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 4
50690: NEG
50691: PUSH
50692: LD_INT 2
50694: NEG
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 2
50702: NEG
50703: PUSH
50704: LD_INT 2
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 4
50713: NEG
50714: PUSH
50715: LD_INT 4
50717: NEG
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 4
50725: NEG
50726: PUSH
50727: LD_INT 5
50729: NEG
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 3
50737: NEG
50738: PUSH
50739: LD_INT 4
50741: NEG
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 3
50749: NEG
50750: PUSH
50751: LD_INT 3
50753: NEG
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 4
50761: NEG
50762: PUSH
50763: LD_INT 3
50765: NEG
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 5
50773: NEG
50774: PUSH
50775: LD_INT 4
50777: NEG
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 5
50785: NEG
50786: PUSH
50787: LD_INT 5
50789: NEG
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 3
50797: NEG
50798: PUSH
50799: LD_INT 5
50801: NEG
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 5
50809: NEG
50810: PUSH
50811: LD_INT 3
50813: NEG
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 0
50821: PUSH
50822: LD_INT 3
50824: NEG
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 0
50832: PUSH
50833: LD_INT 4
50835: NEG
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 1
50843: PUSH
50844: LD_INT 3
50846: NEG
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 1
50854: PUSH
50855: LD_INT 2
50857: NEG
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 0
50865: PUSH
50866: LD_INT 2
50868: NEG
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 1
50876: NEG
50877: PUSH
50878: LD_INT 3
50880: NEG
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 1
50888: NEG
50889: PUSH
50890: LD_INT 4
50892: NEG
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 2
50900: PUSH
50901: LD_INT 2
50903: NEG
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 2
50911: NEG
50912: PUSH
50913: LD_INT 4
50915: NEG
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 4
50923: PUSH
50924: LD_INT 0
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 4
50933: PUSH
50934: LD_INT 1
50936: NEG
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 5
50944: PUSH
50945: LD_INT 0
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 5
50954: PUSH
50955: LD_INT 1
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 4
50964: PUSH
50965: LD_INT 1
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 3
50974: PUSH
50975: LD_INT 0
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 3
50984: PUSH
50985: LD_INT 1
50987: NEG
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 3
50995: PUSH
50996: LD_INT 2
50998: NEG
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 5
51006: PUSH
51007: LD_INT 2
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51061: LD_ADDR_VAR 0 32
51065: PUSH
51066: LD_INT 4
51068: NEG
51069: PUSH
51070: LD_INT 0
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 4
51079: NEG
51080: PUSH
51081: LD_INT 1
51083: NEG
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 3
51091: NEG
51092: PUSH
51093: LD_INT 0
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 3
51102: NEG
51103: PUSH
51104: LD_INT 1
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 4
51113: NEG
51114: PUSH
51115: LD_INT 1
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 5
51124: NEG
51125: PUSH
51126: LD_INT 0
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 5
51135: NEG
51136: PUSH
51137: LD_INT 1
51139: NEG
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 5
51147: NEG
51148: PUSH
51149: LD_INT 2
51151: NEG
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 3
51159: NEG
51160: PUSH
51161: LD_INT 2
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 3
51170: NEG
51171: PUSH
51172: LD_INT 3
51174: NEG
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 3
51182: NEG
51183: PUSH
51184: LD_INT 4
51186: NEG
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 2
51194: NEG
51195: PUSH
51196: LD_INT 3
51198: NEG
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 2
51206: NEG
51207: PUSH
51208: LD_INT 2
51210: NEG
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 3
51218: NEG
51219: PUSH
51220: LD_INT 2
51222: NEG
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 4
51230: NEG
51231: PUSH
51232: LD_INT 3
51234: NEG
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 4
51242: NEG
51243: PUSH
51244: LD_INT 4
51246: NEG
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 2
51254: NEG
51255: PUSH
51256: LD_INT 4
51258: NEG
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 4
51266: NEG
51267: PUSH
51268: LD_INT 2
51270: NEG
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 0
51278: PUSH
51279: LD_INT 4
51281: NEG
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 0
51289: PUSH
51290: LD_INT 5
51292: NEG
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 1
51300: PUSH
51301: LD_INT 4
51303: NEG
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 1
51311: PUSH
51312: LD_INT 3
51314: NEG
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 0
51322: PUSH
51323: LD_INT 3
51325: NEG
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 1
51333: NEG
51334: PUSH
51335: LD_INT 4
51337: NEG
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 1
51345: NEG
51346: PUSH
51347: LD_INT 5
51349: NEG
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 2
51357: PUSH
51358: LD_INT 3
51360: NEG
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 2
51368: NEG
51369: PUSH
51370: LD_INT 5
51372: NEG
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 3
51380: PUSH
51381: LD_INT 0
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 3
51390: PUSH
51391: LD_INT 1
51393: NEG
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 4
51401: PUSH
51402: LD_INT 0
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 4
51411: PUSH
51412: LD_INT 1
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 3
51421: PUSH
51422: LD_INT 1
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 2
51431: PUSH
51432: LD_INT 0
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 2
51441: PUSH
51442: LD_INT 1
51444: NEG
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 2
51452: PUSH
51453: LD_INT 2
51455: NEG
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 4
51463: PUSH
51464: LD_INT 2
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 4
51473: PUSH
51474: LD_INT 4
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 4
51483: PUSH
51484: LD_INT 3
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 5
51493: PUSH
51494: LD_INT 4
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 5
51503: PUSH
51504: LD_INT 5
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 4
51513: PUSH
51514: LD_INT 5
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 3
51523: PUSH
51524: LD_INT 4
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 3
51533: PUSH
51534: LD_INT 3
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 5
51543: PUSH
51544: LD_INT 3
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 3
51553: PUSH
51554: LD_INT 5
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51608: LD_ADDR_VAR 0 33
51612: PUSH
51613: LD_INT 4
51615: NEG
51616: PUSH
51617: LD_INT 4
51619: NEG
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 4
51627: NEG
51628: PUSH
51629: LD_INT 5
51631: NEG
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 3
51639: NEG
51640: PUSH
51641: LD_INT 4
51643: NEG
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 3
51651: NEG
51652: PUSH
51653: LD_INT 3
51655: NEG
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 4
51663: NEG
51664: PUSH
51665: LD_INT 3
51667: NEG
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 5
51675: NEG
51676: PUSH
51677: LD_INT 4
51679: NEG
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 5
51687: NEG
51688: PUSH
51689: LD_INT 5
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 3
51699: NEG
51700: PUSH
51701: LD_INT 5
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 5
51711: NEG
51712: PUSH
51713: LD_INT 3
51715: NEG
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 0
51723: PUSH
51724: LD_INT 3
51726: NEG
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 0
51734: PUSH
51735: LD_INT 4
51737: NEG
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 1
51745: PUSH
51746: LD_INT 3
51748: NEG
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 1
51756: PUSH
51757: LD_INT 2
51759: NEG
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 0
51767: PUSH
51768: LD_INT 2
51770: NEG
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 1
51778: NEG
51779: PUSH
51780: LD_INT 3
51782: NEG
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 1
51790: NEG
51791: PUSH
51792: LD_INT 4
51794: NEG
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 2
51802: PUSH
51803: LD_INT 2
51805: NEG
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 2
51813: NEG
51814: PUSH
51815: LD_INT 4
51817: NEG
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 4
51825: PUSH
51826: LD_INT 0
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 4
51835: PUSH
51836: LD_INT 1
51838: NEG
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 5
51846: PUSH
51847: LD_INT 0
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 5
51856: PUSH
51857: LD_INT 1
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 4
51866: PUSH
51867: LD_INT 1
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 3
51876: PUSH
51877: LD_INT 0
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 3
51886: PUSH
51887: LD_INT 1
51889: NEG
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 3
51897: PUSH
51898: LD_INT 2
51900: NEG
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 5
51908: PUSH
51909: LD_INT 2
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 3
51918: PUSH
51919: LD_INT 3
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 3
51928: PUSH
51929: LD_INT 2
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 4
51938: PUSH
51939: LD_INT 3
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 4
51948: PUSH
51949: LD_INT 4
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 3
51958: PUSH
51959: LD_INT 4
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 2
51968: PUSH
51969: LD_INT 3
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 2
51978: PUSH
51979: LD_INT 2
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 4
51988: PUSH
51989: LD_INT 2
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 2
51998: PUSH
51999: LD_INT 4
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 0
52008: PUSH
52009: LD_INT 4
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 0
52018: PUSH
52019: LD_INT 3
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 1
52028: PUSH
52029: LD_INT 4
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 1
52038: PUSH
52039: LD_INT 5
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 0
52048: PUSH
52049: LD_INT 5
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 1
52058: NEG
52059: PUSH
52060: LD_INT 4
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 1
52069: NEG
52070: PUSH
52071: LD_INT 3
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 2
52080: PUSH
52081: LD_INT 5
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 2
52090: NEG
52091: PUSH
52092: LD_INT 3
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52146: LD_ADDR_VAR 0 34
52150: PUSH
52151: LD_INT 0
52153: PUSH
52154: LD_INT 4
52156: NEG
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 0
52164: PUSH
52165: LD_INT 5
52167: NEG
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 1
52175: PUSH
52176: LD_INT 4
52178: NEG
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 1
52186: PUSH
52187: LD_INT 3
52189: NEG
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 0
52197: PUSH
52198: LD_INT 3
52200: NEG
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 1
52208: NEG
52209: PUSH
52210: LD_INT 4
52212: NEG
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 1
52220: NEG
52221: PUSH
52222: LD_INT 5
52224: NEG
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 2
52232: PUSH
52233: LD_INT 3
52235: NEG
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 2
52243: NEG
52244: PUSH
52245: LD_INT 5
52247: NEG
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 3
52255: PUSH
52256: LD_INT 0
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 3
52265: PUSH
52266: LD_INT 1
52268: NEG
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 4
52276: PUSH
52277: LD_INT 0
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 4
52286: PUSH
52287: LD_INT 1
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 3
52296: PUSH
52297: LD_INT 1
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 2
52306: PUSH
52307: LD_INT 0
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 2
52316: PUSH
52317: LD_INT 1
52319: NEG
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 2
52327: PUSH
52328: LD_INT 2
52330: NEG
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 4
52338: PUSH
52339: LD_INT 2
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 4
52348: PUSH
52349: LD_INT 4
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 4
52358: PUSH
52359: LD_INT 3
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 5
52368: PUSH
52369: LD_INT 4
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 5
52378: PUSH
52379: LD_INT 5
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 4
52388: PUSH
52389: LD_INT 5
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 3
52398: PUSH
52399: LD_INT 4
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 3
52408: PUSH
52409: LD_INT 3
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 5
52418: PUSH
52419: LD_INT 3
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 3
52428: PUSH
52429: LD_INT 5
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 0
52438: PUSH
52439: LD_INT 3
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 0
52448: PUSH
52449: LD_INT 2
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 1
52458: PUSH
52459: LD_INT 3
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 1
52468: PUSH
52469: LD_INT 4
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 0
52478: PUSH
52479: LD_INT 4
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 1
52488: NEG
52489: PUSH
52490: LD_INT 3
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 1
52499: NEG
52500: PUSH
52501: LD_INT 2
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 2
52510: PUSH
52511: LD_INT 4
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 2
52520: NEG
52521: PUSH
52522: LD_INT 2
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 4
52531: NEG
52532: PUSH
52533: LD_INT 0
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 4
52542: NEG
52543: PUSH
52544: LD_INT 1
52546: NEG
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 3
52554: NEG
52555: PUSH
52556: LD_INT 0
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 3
52565: NEG
52566: PUSH
52567: LD_INT 1
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 4
52576: NEG
52577: PUSH
52578: LD_INT 1
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 5
52587: NEG
52588: PUSH
52589: LD_INT 0
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 5
52598: NEG
52599: PUSH
52600: LD_INT 1
52602: NEG
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 5
52610: NEG
52611: PUSH
52612: LD_INT 2
52614: NEG
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 3
52622: NEG
52623: PUSH
52624: LD_INT 2
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: ST_TO_ADDR
// end ; end ;
52678: GO 52681
52680: POP
// case btype of b_depot , b_warehouse :
52681: LD_VAR 0 1
52685: PUSH
52686: LD_INT 0
52688: DOUBLE
52689: EQUAL
52690: IFTRUE 52700
52692: LD_INT 1
52694: DOUBLE
52695: EQUAL
52696: IFTRUE 52700
52698: GO 52901
52700: POP
// case nation of nation_american :
52701: LD_VAR 0 5
52705: PUSH
52706: LD_INT 1
52708: DOUBLE
52709: EQUAL
52710: IFTRUE 52714
52712: GO 52770
52714: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
52715: LD_ADDR_VAR 0 9
52719: PUSH
52720: LD_VAR 0 11
52724: PUSH
52725: LD_VAR 0 12
52729: PUSH
52730: LD_VAR 0 13
52734: PUSH
52735: LD_VAR 0 14
52739: PUSH
52740: LD_VAR 0 15
52744: PUSH
52745: LD_VAR 0 16
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: PUSH
52758: LD_VAR 0 4
52762: PUSH
52763: LD_INT 1
52765: PLUS
52766: ARRAY
52767: ST_TO_ADDR
52768: GO 52899
52770: LD_INT 2
52772: DOUBLE
52773: EQUAL
52774: IFTRUE 52778
52776: GO 52834
52778: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
52779: LD_ADDR_VAR 0 9
52783: PUSH
52784: LD_VAR 0 17
52788: PUSH
52789: LD_VAR 0 18
52793: PUSH
52794: LD_VAR 0 19
52798: PUSH
52799: LD_VAR 0 20
52803: PUSH
52804: LD_VAR 0 21
52808: PUSH
52809: LD_VAR 0 22
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: PUSH
52822: LD_VAR 0 4
52826: PUSH
52827: LD_INT 1
52829: PLUS
52830: ARRAY
52831: ST_TO_ADDR
52832: GO 52899
52834: LD_INT 3
52836: DOUBLE
52837: EQUAL
52838: IFTRUE 52842
52840: GO 52898
52842: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52843: LD_ADDR_VAR 0 9
52847: PUSH
52848: LD_VAR 0 23
52852: PUSH
52853: LD_VAR 0 24
52857: PUSH
52858: LD_VAR 0 25
52862: PUSH
52863: LD_VAR 0 26
52867: PUSH
52868: LD_VAR 0 27
52872: PUSH
52873: LD_VAR 0 28
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: PUSH
52886: LD_VAR 0 4
52890: PUSH
52891: LD_INT 1
52893: PLUS
52894: ARRAY
52895: ST_TO_ADDR
52896: GO 52899
52898: POP
52899: GO 53454
52901: LD_INT 2
52903: DOUBLE
52904: EQUAL
52905: IFTRUE 52915
52907: LD_INT 3
52909: DOUBLE
52910: EQUAL
52911: IFTRUE 52915
52913: GO 52971
52915: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52916: LD_ADDR_VAR 0 9
52920: PUSH
52921: LD_VAR 0 29
52925: PUSH
52926: LD_VAR 0 30
52930: PUSH
52931: LD_VAR 0 31
52935: PUSH
52936: LD_VAR 0 32
52940: PUSH
52941: LD_VAR 0 33
52945: PUSH
52946: LD_VAR 0 34
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: PUSH
52959: LD_VAR 0 4
52963: PUSH
52964: LD_INT 1
52966: PLUS
52967: ARRAY
52968: ST_TO_ADDR
52969: GO 53454
52971: LD_INT 16
52973: DOUBLE
52974: EQUAL
52975: IFTRUE 53033
52977: LD_INT 17
52979: DOUBLE
52980: EQUAL
52981: IFTRUE 53033
52983: LD_INT 18
52985: DOUBLE
52986: EQUAL
52987: IFTRUE 53033
52989: LD_INT 19
52991: DOUBLE
52992: EQUAL
52993: IFTRUE 53033
52995: LD_INT 22
52997: DOUBLE
52998: EQUAL
52999: IFTRUE 53033
53001: LD_INT 20
53003: DOUBLE
53004: EQUAL
53005: IFTRUE 53033
53007: LD_INT 21
53009: DOUBLE
53010: EQUAL
53011: IFTRUE 53033
53013: LD_INT 23
53015: DOUBLE
53016: EQUAL
53017: IFTRUE 53033
53019: LD_INT 24
53021: DOUBLE
53022: EQUAL
53023: IFTRUE 53033
53025: LD_INT 25
53027: DOUBLE
53028: EQUAL
53029: IFTRUE 53033
53031: GO 53089
53033: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53034: LD_ADDR_VAR 0 9
53038: PUSH
53039: LD_VAR 0 35
53043: PUSH
53044: LD_VAR 0 36
53048: PUSH
53049: LD_VAR 0 37
53053: PUSH
53054: LD_VAR 0 38
53058: PUSH
53059: LD_VAR 0 39
53063: PUSH
53064: LD_VAR 0 40
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: PUSH
53077: LD_VAR 0 4
53081: PUSH
53082: LD_INT 1
53084: PLUS
53085: ARRAY
53086: ST_TO_ADDR
53087: GO 53454
53089: LD_INT 6
53091: DOUBLE
53092: EQUAL
53093: IFTRUE 53145
53095: LD_INT 7
53097: DOUBLE
53098: EQUAL
53099: IFTRUE 53145
53101: LD_INT 8
53103: DOUBLE
53104: EQUAL
53105: IFTRUE 53145
53107: LD_INT 13
53109: DOUBLE
53110: EQUAL
53111: IFTRUE 53145
53113: LD_INT 12
53115: DOUBLE
53116: EQUAL
53117: IFTRUE 53145
53119: LD_INT 15
53121: DOUBLE
53122: EQUAL
53123: IFTRUE 53145
53125: LD_INT 11
53127: DOUBLE
53128: EQUAL
53129: IFTRUE 53145
53131: LD_INT 14
53133: DOUBLE
53134: EQUAL
53135: IFTRUE 53145
53137: LD_INT 10
53139: DOUBLE
53140: EQUAL
53141: IFTRUE 53145
53143: GO 53201
53145: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
53146: LD_ADDR_VAR 0 9
53150: PUSH
53151: LD_VAR 0 41
53155: PUSH
53156: LD_VAR 0 42
53160: PUSH
53161: LD_VAR 0 43
53165: PUSH
53166: LD_VAR 0 44
53170: PUSH
53171: LD_VAR 0 45
53175: PUSH
53176: LD_VAR 0 46
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: PUSH
53189: LD_VAR 0 4
53193: PUSH
53194: LD_INT 1
53196: PLUS
53197: ARRAY
53198: ST_TO_ADDR
53199: GO 53454
53201: LD_INT 36
53203: DOUBLE
53204: EQUAL
53205: IFTRUE 53209
53207: GO 53265
53209: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53210: LD_ADDR_VAR 0 9
53214: PUSH
53215: LD_VAR 0 47
53219: PUSH
53220: LD_VAR 0 48
53224: PUSH
53225: LD_VAR 0 49
53229: PUSH
53230: LD_VAR 0 50
53234: PUSH
53235: LD_VAR 0 51
53239: PUSH
53240: LD_VAR 0 52
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: PUSH
53253: LD_VAR 0 4
53257: PUSH
53258: LD_INT 1
53260: PLUS
53261: ARRAY
53262: ST_TO_ADDR
53263: GO 53454
53265: LD_INT 4
53267: DOUBLE
53268: EQUAL
53269: IFTRUE 53291
53271: LD_INT 5
53273: DOUBLE
53274: EQUAL
53275: IFTRUE 53291
53277: LD_INT 34
53279: DOUBLE
53280: EQUAL
53281: IFTRUE 53291
53283: LD_INT 37
53285: DOUBLE
53286: EQUAL
53287: IFTRUE 53291
53289: GO 53347
53291: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53292: LD_ADDR_VAR 0 9
53296: PUSH
53297: LD_VAR 0 53
53301: PUSH
53302: LD_VAR 0 54
53306: PUSH
53307: LD_VAR 0 55
53311: PUSH
53312: LD_VAR 0 56
53316: PUSH
53317: LD_VAR 0 57
53321: PUSH
53322: LD_VAR 0 58
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: PUSH
53335: LD_VAR 0 4
53339: PUSH
53340: LD_INT 1
53342: PLUS
53343: ARRAY
53344: ST_TO_ADDR
53345: GO 53454
53347: LD_INT 31
53349: DOUBLE
53350: EQUAL
53351: IFTRUE 53397
53353: LD_INT 32
53355: DOUBLE
53356: EQUAL
53357: IFTRUE 53397
53359: LD_INT 33
53361: DOUBLE
53362: EQUAL
53363: IFTRUE 53397
53365: LD_INT 27
53367: DOUBLE
53368: EQUAL
53369: IFTRUE 53397
53371: LD_INT 26
53373: DOUBLE
53374: EQUAL
53375: IFTRUE 53397
53377: LD_INT 28
53379: DOUBLE
53380: EQUAL
53381: IFTRUE 53397
53383: LD_INT 29
53385: DOUBLE
53386: EQUAL
53387: IFTRUE 53397
53389: LD_INT 30
53391: DOUBLE
53392: EQUAL
53393: IFTRUE 53397
53395: GO 53453
53397: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
53398: LD_ADDR_VAR 0 9
53402: PUSH
53403: LD_VAR 0 59
53407: PUSH
53408: LD_VAR 0 60
53412: PUSH
53413: LD_VAR 0 61
53417: PUSH
53418: LD_VAR 0 62
53422: PUSH
53423: LD_VAR 0 63
53427: PUSH
53428: LD_VAR 0 64
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: PUSH
53441: LD_VAR 0 4
53445: PUSH
53446: LD_INT 1
53448: PLUS
53449: ARRAY
53450: ST_TO_ADDR
53451: GO 53454
53453: POP
// temp_list2 = [ ] ;
53454: LD_ADDR_VAR 0 10
53458: PUSH
53459: EMPTY
53460: ST_TO_ADDR
// for i in temp_list do
53461: LD_ADDR_VAR 0 8
53465: PUSH
53466: LD_VAR 0 9
53470: PUSH
53471: FOR_IN
53472: IFFALSE 53524
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53474: LD_ADDR_VAR 0 10
53478: PUSH
53479: LD_VAR 0 10
53483: PUSH
53484: LD_VAR 0 8
53488: PUSH
53489: LD_INT 1
53491: ARRAY
53492: PUSH
53493: LD_VAR 0 2
53497: PLUS
53498: PUSH
53499: LD_VAR 0 8
53503: PUSH
53504: LD_INT 2
53506: ARRAY
53507: PUSH
53508: LD_VAR 0 3
53512: PLUS
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: EMPTY
53519: LIST
53520: ADD
53521: ST_TO_ADDR
53522: GO 53471
53524: POP
53525: POP
// result = temp_list2 ;
53526: LD_ADDR_VAR 0 7
53530: PUSH
53531: LD_VAR 0 10
53535: ST_TO_ADDR
// end ;
53536: LD_VAR 0 7
53540: RET
// export function EnemyInRange ( unit , dist ) ; begin
53541: LD_INT 0
53543: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53544: LD_ADDR_VAR 0 3
53548: PUSH
53549: LD_VAR 0 1
53553: PPUSH
53554: CALL_OW 255
53558: PPUSH
53559: LD_VAR 0 1
53563: PPUSH
53564: CALL_OW 250
53568: PPUSH
53569: LD_VAR 0 1
53573: PPUSH
53574: CALL_OW 251
53578: PPUSH
53579: LD_VAR 0 2
53583: PPUSH
53584: CALL 26914 0 4
53588: PUSH
53589: LD_INT 4
53591: ARRAY
53592: ST_TO_ADDR
// end ;
53593: LD_VAR 0 3
53597: RET
// export function PlayerSeeMe ( unit ) ; begin
53598: LD_INT 0
53600: PPUSH
// result := See ( your_side , unit ) ;
53601: LD_ADDR_VAR 0 2
53605: PUSH
53606: LD_OWVAR 2
53610: PPUSH
53611: LD_VAR 0 1
53615: PPUSH
53616: CALL_OW 292
53620: ST_TO_ADDR
// end ;
53621: LD_VAR 0 2
53625: RET
// export function ReverseDir ( unit ) ; begin
53626: LD_INT 0
53628: PPUSH
// if not unit then
53629: LD_VAR 0 1
53633: NOT
53634: IFFALSE 53638
// exit ;
53636: GO 53661
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
53638: LD_ADDR_VAR 0 2
53642: PUSH
53643: LD_VAR 0 1
53647: PPUSH
53648: CALL_OW 254
53652: PUSH
53653: LD_INT 3
53655: PLUS
53656: PUSH
53657: LD_INT 6
53659: MOD
53660: ST_TO_ADDR
// end ;
53661: LD_VAR 0 2
53665: RET
// export function ReverseArray ( array ) ; var i ; begin
53666: LD_INT 0
53668: PPUSH
53669: PPUSH
// if not array then
53670: LD_VAR 0 1
53674: NOT
53675: IFFALSE 53679
// exit ;
53677: GO 53734
// result := [ ] ;
53679: LD_ADDR_VAR 0 2
53683: PUSH
53684: EMPTY
53685: ST_TO_ADDR
// for i := array downto 1 do
53686: LD_ADDR_VAR 0 3
53690: PUSH
53691: DOUBLE
53692: LD_VAR 0 1
53696: INC
53697: ST_TO_ADDR
53698: LD_INT 1
53700: PUSH
53701: FOR_DOWNTO
53702: IFFALSE 53732
// result := Join ( result , array [ i ] ) ;
53704: LD_ADDR_VAR 0 2
53708: PUSH
53709: LD_VAR 0 2
53713: PPUSH
53714: LD_VAR 0 1
53718: PUSH
53719: LD_VAR 0 3
53723: ARRAY
53724: PPUSH
53725: CALL 58399 0 2
53729: ST_TO_ADDR
53730: GO 53701
53732: POP
53733: POP
// end ;
53734: LD_VAR 0 2
53738: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
53739: LD_INT 0
53741: PPUSH
53742: PPUSH
53743: PPUSH
53744: PPUSH
53745: PPUSH
53746: PPUSH
// if not unit or not hexes then
53747: LD_VAR 0 1
53751: NOT
53752: PUSH
53753: LD_VAR 0 2
53757: NOT
53758: OR
53759: IFFALSE 53763
// exit ;
53761: GO 53886
// dist := 9999 ;
53763: LD_ADDR_VAR 0 5
53767: PUSH
53768: LD_INT 9999
53770: ST_TO_ADDR
// for i = 1 to hexes do
53771: LD_ADDR_VAR 0 4
53775: PUSH
53776: DOUBLE
53777: LD_INT 1
53779: DEC
53780: ST_TO_ADDR
53781: LD_VAR 0 2
53785: PUSH
53786: FOR_TO
53787: IFFALSE 53874
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53789: LD_ADDR_VAR 0 6
53793: PUSH
53794: LD_VAR 0 1
53798: PPUSH
53799: LD_VAR 0 2
53803: PUSH
53804: LD_VAR 0 4
53808: ARRAY
53809: PUSH
53810: LD_INT 1
53812: ARRAY
53813: PPUSH
53814: LD_VAR 0 2
53818: PUSH
53819: LD_VAR 0 4
53823: ARRAY
53824: PUSH
53825: LD_INT 2
53827: ARRAY
53828: PPUSH
53829: CALL_OW 297
53833: ST_TO_ADDR
// if tdist < dist then
53834: LD_VAR 0 6
53838: PUSH
53839: LD_VAR 0 5
53843: LESS
53844: IFFALSE 53872
// begin hex := hexes [ i ] ;
53846: LD_ADDR_VAR 0 8
53850: PUSH
53851: LD_VAR 0 2
53855: PUSH
53856: LD_VAR 0 4
53860: ARRAY
53861: ST_TO_ADDR
// dist := tdist ;
53862: LD_ADDR_VAR 0 5
53866: PUSH
53867: LD_VAR 0 6
53871: ST_TO_ADDR
// end ; end ;
53872: GO 53786
53874: POP
53875: POP
// result := hex ;
53876: LD_ADDR_VAR 0 3
53880: PUSH
53881: LD_VAR 0 8
53885: ST_TO_ADDR
// end ;
53886: LD_VAR 0 3
53890: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53891: LD_INT 0
53893: PPUSH
53894: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53895: LD_VAR 0 1
53899: NOT
53900: PUSH
53901: LD_VAR 0 1
53905: PUSH
53906: LD_INT 21
53908: PUSH
53909: LD_INT 2
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 23
53918: PUSH
53919: LD_INT 2
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PPUSH
53930: CALL_OW 69
53934: IN
53935: NOT
53936: OR
53937: IFFALSE 53941
// exit ;
53939: GO 53988
// for i = 1 to 3 do
53941: LD_ADDR_VAR 0 3
53945: PUSH
53946: DOUBLE
53947: LD_INT 1
53949: DEC
53950: ST_TO_ADDR
53951: LD_INT 3
53953: PUSH
53954: FOR_TO
53955: IFFALSE 53986
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53957: LD_VAR 0 1
53961: PPUSH
53962: CALL_OW 250
53966: PPUSH
53967: LD_VAR 0 1
53971: PPUSH
53972: CALL_OW 251
53976: PPUSH
53977: LD_INT 1
53979: PPUSH
53980: CALL_OW 453
53984: GO 53954
53986: POP
53987: POP
// end ;
53988: LD_VAR 0 2
53992: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53993: LD_INT 0
53995: PPUSH
53996: PPUSH
53997: PPUSH
53998: PPUSH
53999: PPUSH
54000: PPUSH
// if not unit or not enemy_unit then
54001: LD_VAR 0 1
54005: NOT
54006: PUSH
54007: LD_VAR 0 2
54011: NOT
54012: OR
54013: IFFALSE 54017
// exit ;
54015: GO 54484
// if GetLives ( i ) < 250 then
54017: LD_VAR 0 4
54021: PPUSH
54022: CALL_OW 256
54026: PUSH
54027: LD_INT 250
54029: LESS
54030: IFFALSE 54043
// begin ComAutodestruct ( i ) ;
54032: LD_VAR 0 4
54036: PPUSH
54037: CALL 53891 0 1
// exit ;
54041: GO 54484
// end ; x := GetX ( enemy_unit ) ;
54043: LD_ADDR_VAR 0 7
54047: PUSH
54048: LD_VAR 0 2
54052: PPUSH
54053: CALL_OW 250
54057: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54058: LD_ADDR_VAR 0 8
54062: PUSH
54063: LD_VAR 0 2
54067: PPUSH
54068: CALL_OW 251
54072: ST_TO_ADDR
// if not x or not y then
54073: LD_VAR 0 7
54077: NOT
54078: PUSH
54079: LD_VAR 0 8
54083: NOT
54084: OR
54085: IFFALSE 54089
// exit ;
54087: GO 54484
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54089: LD_ADDR_VAR 0 6
54093: PUSH
54094: LD_VAR 0 7
54098: PPUSH
54099: LD_INT 0
54101: PPUSH
54102: LD_INT 4
54104: PPUSH
54105: CALL_OW 272
54109: PUSH
54110: LD_VAR 0 8
54114: PPUSH
54115: LD_INT 0
54117: PPUSH
54118: LD_INT 4
54120: PPUSH
54121: CALL_OW 273
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_VAR 0 7
54134: PPUSH
54135: LD_INT 1
54137: PPUSH
54138: LD_INT 4
54140: PPUSH
54141: CALL_OW 272
54145: PUSH
54146: LD_VAR 0 8
54150: PPUSH
54151: LD_INT 1
54153: PPUSH
54154: LD_INT 4
54156: PPUSH
54157: CALL_OW 273
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_VAR 0 7
54170: PPUSH
54171: LD_INT 2
54173: PPUSH
54174: LD_INT 4
54176: PPUSH
54177: CALL_OW 272
54181: PUSH
54182: LD_VAR 0 8
54186: PPUSH
54187: LD_INT 2
54189: PPUSH
54190: LD_INT 4
54192: PPUSH
54193: CALL_OW 273
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_VAR 0 7
54206: PPUSH
54207: LD_INT 3
54209: PPUSH
54210: LD_INT 4
54212: PPUSH
54213: CALL_OW 272
54217: PUSH
54218: LD_VAR 0 8
54222: PPUSH
54223: LD_INT 3
54225: PPUSH
54226: LD_INT 4
54228: PPUSH
54229: CALL_OW 273
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_VAR 0 7
54242: PPUSH
54243: LD_INT 4
54245: PPUSH
54246: LD_INT 4
54248: PPUSH
54249: CALL_OW 272
54253: PUSH
54254: LD_VAR 0 8
54258: PPUSH
54259: LD_INT 4
54261: PPUSH
54262: LD_INT 4
54264: PPUSH
54265: CALL_OW 273
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_VAR 0 7
54278: PPUSH
54279: LD_INT 5
54281: PPUSH
54282: LD_INT 4
54284: PPUSH
54285: CALL_OW 272
54289: PUSH
54290: LD_VAR 0 8
54294: PPUSH
54295: LD_INT 5
54297: PPUSH
54298: LD_INT 4
54300: PPUSH
54301: CALL_OW 273
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: ST_TO_ADDR
// for i = tmp downto 1 do
54318: LD_ADDR_VAR 0 4
54322: PUSH
54323: DOUBLE
54324: LD_VAR 0 6
54328: INC
54329: ST_TO_ADDR
54330: LD_INT 1
54332: PUSH
54333: FOR_DOWNTO
54334: IFFALSE 54435
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54336: LD_VAR 0 6
54340: PUSH
54341: LD_VAR 0 4
54345: ARRAY
54346: PUSH
54347: LD_INT 1
54349: ARRAY
54350: PPUSH
54351: LD_VAR 0 6
54355: PUSH
54356: LD_VAR 0 4
54360: ARRAY
54361: PUSH
54362: LD_INT 2
54364: ARRAY
54365: PPUSH
54366: CALL_OW 488
54370: NOT
54371: PUSH
54372: LD_VAR 0 6
54376: PUSH
54377: LD_VAR 0 4
54381: ARRAY
54382: PUSH
54383: LD_INT 1
54385: ARRAY
54386: PPUSH
54387: LD_VAR 0 6
54391: PUSH
54392: LD_VAR 0 4
54396: ARRAY
54397: PUSH
54398: LD_INT 2
54400: ARRAY
54401: PPUSH
54402: CALL_OW 428
54406: PUSH
54407: LD_INT 0
54409: NONEQUAL
54410: OR
54411: IFFALSE 54433
// tmp := Delete ( tmp , i ) ;
54413: LD_ADDR_VAR 0 6
54417: PUSH
54418: LD_VAR 0 6
54422: PPUSH
54423: LD_VAR 0 4
54427: PPUSH
54428: CALL_OW 3
54432: ST_TO_ADDR
54433: GO 54333
54435: POP
54436: POP
// j := GetClosestHex ( unit , tmp ) ;
54437: LD_ADDR_VAR 0 5
54441: PUSH
54442: LD_VAR 0 1
54446: PPUSH
54447: LD_VAR 0 6
54451: PPUSH
54452: CALL 53739 0 2
54456: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54457: LD_VAR 0 1
54461: PPUSH
54462: LD_VAR 0 5
54466: PUSH
54467: LD_INT 1
54469: ARRAY
54470: PPUSH
54471: LD_VAR 0 5
54475: PUSH
54476: LD_INT 2
54478: ARRAY
54479: PPUSH
54480: CALL_OW 111
// end ;
54484: LD_VAR 0 3
54488: RET
// export function PrepareApemanSoldier ( ) ; begin
54489: LD_INT 0
54491: PPUSH
// uc_nation := 0 ;
54492: LD_ADDR_OWVAR 21
54496: PUSH
54497: LD_INT 0
54499: ST_TO_ADDR
// hc_sex := sex_male ;
54500: LD_ADDR_OWVAR 27
54504: PUSH
54505: LD_INT 1
54507: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
54508: LD_ADDR_OWVAR 28
54512: PUSH
54513: LD_INT 15
54515: ST_TO_ADDR
// hc_gallery :=  ;
54516: LD_ADDR_OWVAR 33
54520: PUSH
54521: LD_STRING 
54523: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54524: LD_ADDR_OWVAR 31
54528: PUSH
54529: LD_INT 0
54531: PPUSH
54532: LD_INT 3
54534: PPUSH
54535: CALL_OW 12
54539: PUSH
54540: LD_INT 0
54542: PPUSH
54543: LD_INT 3
54545: PPUSH
54546: CALL_OW 12
54550: PUSH
54551: LD_INT 0
54553: PUSH
54554: LD_INT 0
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: ST_TO_ADDR
// end ;
54563: LD_VAR 0 1
54567: RET
// export function PrepareApemanEngineer ( ) ; begin
54568: LD_INT 0
54570: PPUSH
// uc_nation := 0 ;
54571: LD_ADDR_OWVAR 21
54575: PUSH
54576: LD_INT 0
54578: ST_TO_ADDR
// hc_sex := sex_male ;
54579: LD_ADDR_OWVAR 27
54583: PUSH
54584: LD_INT 1
54586: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
54587: LD_ADDR_OWVAR 28
54591: PUSH
54592: LD_INT 16
54594: ST_TO_ADDR
// hc_gallery :=  ;
54595: LD_ADDR_OWVAR 33
54599: PUSH
54600: LD_STRING 
54602: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54603: LD_ADDR_OWVAR 31
54607: PUSH
54608: LD_INT 0
54610: PPUSH
54611: LD_INT 3
54613: PPUSH
54614: CALL_OW 12
54618: PUSH
54619: LD_INT 0
54621: PPUSH
54622: LD_INT 3
54624: PPUSH
54625: CALL_OW 12
54629: PUSH
54630: LD_INT 0
54632: PUSH
54633: LD_INT 0
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: ST_TO_ADDR
// end ;
54642: LD_VAR 0 1
54646: RET
// export function PrepareApeman ( agressivity ) ; begin
54647: LD_INT 0
54649: PPUSH
// uc_side := 0 ;
54650: LD_ADDR_OWVAR 20
54654: PUSH
54655: LD_INT 0
54657: ST_TO_ADDR
// uc_nation := 0 ;
54658: LD_ADDR_OWVAR 21
54662: PUSH
54663: LD_INT 0
54665: ST_TO_ADDR
// hc_sex := sex_male ;
54666: LD_ADDR_OWVAR 27
54670: PUSH
54671: LD_INT 1
54673: ST_TO_ADDR
// hc_class := class_apeman ;
54674: LD_ADDR_OWVAR 28
54678: PUSH
54679: LD_INT 12
54681: ST_TO_ADDR
// hc_gallery :=  ;
54682: LD_ADDR_OWVAR 33
54686: PUSH
54687: LD_STRING 
54689: ST_TO_ADDR
// if agressivity = 0 then
54690: LD_VAR 0 1
54694: PUSH
54695: LD_INT 0
54697: EQUAL
54698: IFFALSE 54710
// hc_agressivity := 0 else
54700: LD_ADDR_OWVAR 35
54704: PUSH
54705: LD_INT 0
54707: ST_TO_ADDR
54708: GO 54731
// hc_agressivity := rand ( - agressivity , agressivity ) ;
54710: LD_ADDR_OWVAR 35
54714: PUSH
54715: LD_VAR 0 1
54719: NEG
54720: PPUSH
54721: LD_VAR 0 1
54725: PPUSH
54726: CALL_OW 12
54730: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54731: LD_ADDR_OWVAR 31
54735: PUSH
54736: LD_INT 0
54738: PPUSH
54739: LD_INT 3
54741: PPUSH
54742: CALL_OW 12
54746: PUSH
54747: LD_INT 0
54749: PPUSH
54750: LD_INT 3
54752: PPUSH
54753: CALL_OW 12
54757: PUSH
54758: LD_INT 0
54760: PUSH
54761: LD_INT 0
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: ST_TO_ADDR
// end ;
54770: LD_VAR 0 2
54774: RET
// export function PrepareTiger ( agressivity ) ; begin
54775: LD_INT 0
54777: PPUSH
// uc_side := 0 ;
54778: LD_ADDR_OWVAR 20
54782: PUSH
54783: LD_INT 0
54785: ST_TO_ADDR
// uc_nation := 0 ;
54786: LD_ADDR_OWVAR 21
54790: PUSH
54791: LD_INT 0
54793: ST_TO_ADDR
// hc_class := class_tiger ;
54794: LD_ADDR_OWVAR 28
54798: PUSH
54799: LD_INT 14
54801: ST_TO_ADDR
// hc_gallery :=  ;
54802: LD_ADDR_OWVAR 33
54806: PUSH
54807: LD_STRING 
54809: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
54810: LD_ADDR_OWVAR 35
54814: PUSH
54815: LD_VAR 0 1
54819: NEG
54820: PPUSH
54821: LD_VAR 0 1
54825: PPUSH
54826: CALL_OW 12
54830: ST_TO_ADDR
// end ;
54831: LD_VAR 0 2
54835: RET
// export function PrepareEnchidna ( ) ; begin
54836: LD_INT 0
54838: PPUSH
// uc_side := 0 ;
54839: LD_ADDR_OWVAR 20
54843: PUSH
54844: LD_INT 0
54846: ST_TO_ADDR
// uc_nation := 0 ;
54847: LD_ADDR_OWVAR 21
54851: PUSH
54852: LD_INT 0
54854: ST_TO_ADDR
// hc_class := class_baggie ;
54855: LD_ADDR_OWVAR 28
54859: PUSH
54860: LD_INT 13
54862: ST_TO_ADDR
// hc_gallery :=  ;
54863: LD_ADDR_OWVAR 33
54867: PUSH
54868: LD_STRING 
54870: ST_TO_ADDR
// end ;
54871: LD_VAR 0 1
54875: RET
// export function PrepareFrog ( ) ; begin
54876: LD_INT 0
54878: PPUSH
// uc_side := 0 ;
54879: LD_ADDR_OWVAR 20
54883: PUSH
54884: LD_INT 0
54886: ST_TO_ADDR
// uc_nation := 0 ;
54887: LD_ADDR_OWVAR 21
54891: PUSH
54892: LD_INT 0
54894: ST_TO_ADDR
// hc_class := class_frog ;
54895: LD_ADDR_OWVAR 28
54899: PUSH
54900: LD_INT 19
54902: ST_TO_ADDR
// hc_gallery :=  ;
54903: LD_ADDR_OWVAR 33
54907: PUSH
54908: LD_STRING 
54910: ST_TO_ADDR
// end ;
54911: LD_VAR 0 1
54915: RET
// export function PrepareFish ( ) ; begin
54916: LD_INT 0
54918: PPUSH
// uc_side := 0 ;
54919: LD_ADDR_OWVAR 20
54923: PUSH
54924: LD_INT 0
54926: ST_TO_ADDR
// uc_nation := 0 ;
54927: LD_ADDR_OWVAR 21
54931: PUSH
54932: LD_INT 0
54934: ST_TO_ADDR
// hc_class := class_fish ;
54935: LD_ADDR_OWVAR 28
54939: PUSH
54940: LD_INT 20
54942: ST_TO_ADDR
// hc_gallery :=  ;
54943: LD_ADDR_OWVAR 33
54947: PUSH
54948: LD_STRING 
54950: ST_TO_ADDR
// end ;
54951: LD_VAR 0 1
54955: RET
// export function PrepareBird ( ) ; begin
54956: LD_INT 0
54958: PPUSH
// uc_side := 0 ;
54959: LD_ADDR_OWVAR 20
54963: PUSH
54964: LD_INT 0
54966: ST_TO_ADDR
// uc_nation := 0 ;
54967: LD_ADDR_OWVAR 21
54971: PUSH
54972: LD_INT 0
54974: ST_TO_ADDR
// hc_class := class_phororhacos ;
54975: LD_ADDR_OWVAR 28
54979: PUSH
54980: LD_INT 18
54982: ST_TO_ADDR
// hc_gallery :=  ;
54983: LD_ADDR_OWVAR 33
54987: PUSH
54988: LD_STRING 
54990: ST_TO_ADDR
// end ;
54991: LD_VAR 0 1
54995: RET
// export function PrepareHorse ( ) ; begin
54996: LD_INT 0
54998: PPUSH
// uc_side := 0 ;
54999: LD_ADDR_OWVAR 20
55003: PUSH
55004: LD_INT 0
55006: ST_TO_ADDR
// uc_nation := 0 ;
55007: LD_ADDR_OWVAR 21
55011: PUSH
55012: LD_INT 0
55014: ST_TO_ADDR
// hc_class := class_horse ;
55015: LD_ADDR_OWVAR 28
55019: PUSH
55020: LD_INT 21
55022: ST_TO_ADDR
// hc_gallery :=  ;
55023: LD_ADDR_OWVAR 33
55027: PUSH
55028: LD_STRING 
55030: ST_TO_ADDR
// end ;
55031: LD_VAR 0 1
55035: RET
// export function PrepareMastodont ( ) ; begin
55036: LD_INT 0
55038: PPUSH
// uc_side := 0 ;
55039: LD_ADDR_OWVAR 20
55043: PUSH
55044: LD_INT 0
55046: ST_TO_ADDR
// uc_nation := 0 ;
55047: LD_ADDR_OWVAR 21
55051: PUSH
55052: LD_INT 0
55054: ST_TO_ADDR
// vc_chassis := class_mastodont ;
55055: LD_ADDR_OWVAR 37
55059: PUSH
55060: LD_INT 31
55062: ST_TO_ADDR
// vc_control := control_rider ;
55063: LD_ADDR_OWVAR 38
55067: PUSH
55068: LD_INT 4
55070: ST_TO_ADDR
// end ;
55071: LD_VAR 0 1
55075: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55076: LD_INT 0
55078: PPUSH
55079: PPUSH
55080: PPUSH
// uc_side = 0 ;
55081: LD_ADDR_OWVAR 20
55085: PUSH
55086: LD_INT 0
55088: ST_TO_ADDR
// uc_nation = 0 ;
55089: LD_ADDR_OWVAR 21
55093: PUSH
55094: LD_INT 0
55096: ST_TO_ADDR
// InitHc_All ( ) ;
55097: CALL_OW 584
// InitVc ;
55101: CALL_OW 20
// if mastodonts then
55105: LD_VAR 0 6
55109: IFFALSE 55176
// for i = 1 to mastodonts do
55111: LD_ADDR_VAR 0 11
55115: PUSH
55116: DOUBLE
55117: LD_INT 1
55119: DEC
55120: ST_TO_ADDR
55121: LD_VAR 0 6
55125: PUSH
55126: FOR_TO
55127: IFFALSE 55174
// begin vc_chassis := 31 ;
55129: LD_ADDR_OWVAR 37
55133: PUSH
55134: LD_INT 31
55136: ST_TO_ADDR
// vc_control := control_rider ;
55137: LD_ADDR_OWVAR 38
55141: PUSH
55142: LD_INT 4
55144: ST_TO_ADDR
// animal := CreateVehicle ;
55145: LD_ADDR_VAR 0 12
55149: PUSH
55150: CALL_OW 45
55154: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55155: LD_VAR 0 12
55159: PPUSH
55160: LD_VAR 0 8
55164: PPUSH
55165: LD_INT 0
55167: PPUSH
55168: CALL 57304 0 3
// end ;
55172: GO 55126
55174: POP
55175: POP
// if horses then
55176: LD_VAR 0 5
55180: IFFALSE 55247
// for i = 1 to horses do
55182: LD_ADDR_VAR 0 11
55186: PUSH
55187: DOUBLE
55188: LD_INT 1
55190: DEC
55191: ST_TO_ADDR
55192: LD_VAR 0 5
55196: PUSH
55197: FOR_TO
55198: IFFALSE 55245
// begin hc_class := 21 ;
55200: LD_ADDR_OWVAR 28
55204: PUSH
55205: LD_INT 21
55207: ST_TO_ADDR
// hc_gallery :=  ;
55208: LD_ADDR_OWVAR 33
55212: PUSH
55213: LD_STRING 
55215: ST_TO_ADDR
// animal := CreateHuman ;
55216: LD_ADDR_VAR 0 12
55220: PUSH
55221: CALL_OW 44
55225: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55226: LD_VAR 0 12
55230: PPUSH
55231: LD_VAR 0 8
55235: PPUSH
55236: LD_INT 0
55238: PPUSH
55239: CALL 57304 0 3
// end ;
55243: GO 55197
55245: POP
55246: POP
// if birds then
55247: LD_VAR 0 1
55251: IFFALSE 55318
// for i = 1 to birds do
55253: LD_ADDR_VAR 0 11
55257: PUSH
55258: DOUBLE
55259: LD_INT 1
55261: DEC
55262: ST_TO_ADDR
55263: LD_VAR 0 1
55267: PUSH
55268: FOR_TO
55269: IFFALSE 55316
// begin hc_class := 18 ;
55271: LD_ADDR_OWVAR 28
55275: PUSH
55276: LD_INT 18
55278: ST_TO_ADDR
// hc_gallery =  ;
55279: LD_ADDR_OWVAR 33
55283: PUSH
55284: LD_STRING 
55286: ST_TO_ADDR
// animal := CreateHuman ;
55287: LD_ADDR_VAR 0 12
55291: PUSH
55292: CALL_OW 44
55296: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55297: LD_VAR 0 12
55301: PPUSH
55302: LD_VAR 0 8
55306: PPUSH
55307: LD_INT 0
55309: PPUSH
55310: CALL 57304 0 3
// end ;
55314: GO 55268
55316: POP
55317: POP
// if tigers then
55318: LD_VAR 0 2
55322: IFFALSE 55406
// for i = 1 to tigers do
55324: LD_ADDR_VAR 0 11
55328: PUSH
55329: DOUBLE
55330: LD_INT 1
55332: DEC
55333: ST_TO_ADDR
55334: LD_VAR 0 2
55338: PUSH
55339: FOR_TO
55340: IFFALSE 55404
// begin hc_class = class_tiger ;
55342: LD_ADDR_OWVAR 28
55346: PUSH
55347: LD_INT 14
55349: ST_TO_ADDR
// hc_gallery =  ;
55350: LD_ADDR_OWVAR 33
55354: PUSH
55355: LD_STRING 
55357: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
55358: LD_ADDR_OWVAR 35
55362: PUSH
55363: LD_INT 7
55365: NEG
55366: PPUSH
55367: LD_INT 7
55369: PPUSH
55370: CALL_OW 12
55374: ST_TO_ADDR
// animal := CreateHuman ;
55375: LD_ADDR_VAR 0 12
55379: PUSH
55380: CALL_OW 44
55384: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55385: LD_VAR 0 12
55389: PPUSH
55390: LD_VAR 0 8
55394: PPUSH
55395: LD_INT 0
55397: PPUSH
55398: CALL 57304 0 3
// end ;
55402: GO 55339
55404: POP
55405: POP
// if apemans then
55406: LD_VAR 0 3
55410: IFFALSE 55533
// for i = 1 to apemans do
55412: LD_ADDR_VAR 0 11
55416: PUSH
55417: DOUBLE
55418: LD_INT 1
55420: DEC
55421: ST_TO_ADDR
55422: LD_VAR 0 3
55426: PUSH
55427: FOR_TO
55428: IFFALSE 55531
// begin hc_class = class_apeman ;
55430: LD_ADDR_OWVAR 28
55434: PUSH
55435: LD_INT 12
55437: ST_TO_ADDR
// hc_gallery =  ;
55438: LD_ADDR_OWVAR 33
55442: PUSH
55443: LD_STRING 
55445: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
55446: LD_ADDR_OWVAR 35
55450: PUSH
55451: LD_INT 2
55453: NEG
55454: PPUSH
55455: LD_INT 2
55457: PPUSH
55458: CALL_OW 12
55462: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
55463: LD_ADDR_OWVAR 31
55467: PUSH
55468: LD_INT 1
55470: PPUSH
55471: LD_INT 3
55473: PPUSH
55474: CALL_OW 12
55478: PUSH
55479: LD_INT 1
55481: PPUSH
55482: LD_INT 3
55484: PPUSH
55485: CALL_OW 12
55489: PUSH
55490: LD_INT 0
55492: PUSH
55493: LD_INT 0
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: ST_TO_ADDR
// animal := CreateHuman ;
55502: LD_ADDR_VAR 0 12
55506: PUSH
55507: CALL_OW 44
55511: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55512: LD_VAR 0 12
55516: PPUSH
55517: LD_VAR 0 8
55521: PPUSH
55522: LD_INT 0
55524: PPUSH
55525: CALL 57304 0 3
// end ;
55529: GO 55427
55531: POP
55532: POP
// if enchidnas then
55533: LD_VAR 0 4
55537: IFFALSE 55604
// for i = 1 to enchidnas do
55539: LD_ADDR_VAR 0 11
55543: PUSH
55544: DOUBLE
55545: LD_INT 1
55547: DEC
55548: ST_TO_ADDR
55549: LD_VAR 0 4
55553: PUSH
55554: FOR_TO
55555: IFFALSE 55602
// begin hc_class = 13 ;
55557: LD_ADDR_OWVAR 28
55561: PUSH
55562: LD_INT 13
55564: ST_TO_ADDR
// hc_gallery =  ;
55565: LD_ADDR_OWVAR 33
55569: PUSH
55570: LD_STRING 
55572: ST_TO_ADDR
// animal := CreateHuman ;
55573: LD_ADDR_VAR 0 12
55577: PUSH
55578: CALL_OW 44
55582: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55583: LD_VAR 0 12
55587: PPUSH
55588: LD_VAR 0 8
55592: PPUSH
55593: LD_INT 0
55595: PPUSH
55596: CALL 57304 0 3
// end ;
55600: GO 55554
55602: POP
55603: POP
// if fishes then
55604: LD_VAR 0 7
55608: IFFALSE 55675
// for i = 1 to fishes do
55610: LD_ADDR_VAR 0 11
55614: PUSH
55615: DOUBLE
55616: LD_INT 1
55618: DEC
55619: ST_TO_ADDR
55620: LD_VAR 0 7
55624: PUSH
55625: FOR_TO
55626: IFFALSE 55673
// begin hc_class = 20 ;
55628: LD_ADDR_OWVAR 28
55632: PUSH
55633: LD_INT 20
55635: ST_TO_ADDR
// hc_gallery =  ;
55636: LD_ADDR_OWVAR 33
55640: PUSH
55641: LD_STRING 
55643: ST_TO_ADDR
// animal := CreateHuman ;
55644: LD_ADDR_VAR 0 12
55648: PUSH
55649: CALL_OW 44
55653: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
55654: LD_VAR 0 12
55658: PPUSH
55659: LD_VAR 0 9
55663: PPUSH
55664: LD_INT 0
55666: PPUSH
55667: CALL 57304 0 3
// end ;
55671: GO 55625
55673: POP
55674: POP
// end ;
55675: LD_VAR 0 10
55679: RET
// export function WantHeal ( sci , unit ) ; begin
55680: LD_INT 0
55682: PPUSH
// if GetTaskList ( sci ) > 0 then
55683: LD_VAR 0 1
55687: PPUSH
55688: CALL_OW 437
55692: PUSH
55693: LD_INT 0
55695: GREATER
55696: IFFALSE 55766
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
55698: LD_VAR 0 1
55702: PPUSH
55703: CALL_OW 437
55707: PUSH
55708: LD_INT 1
55710: ARRAY
55711: PUSH
55712: LD_INT 1
55714: ARRAY
55715: PUSH
55716: LD_STRING l
55718: EQUAL
55719: PUSH
55720: LD_VAR 0 1
55724: PPUSH
55725: CALL_OW 437
55729: PUSH
55730: LD_INT 1
55732: ARRAY
55733: PUSH
55734: LD_INT 4
55736: ARRAY
55737: PUSH
55738: LD_VAR 0 2
55742: EQUAL
55743: AND
55744: IFFALSE 55756
// result := true else
55746: LD_ADDR_VAR 0 3
55750: PUSH
55751: LD_INT 1
55753: ST_TO_ADDR
55754: GO 55764
// result := false ;
55756: LD_ADDR_VAR 0 3
55760: PUSH
55761: LD_INT 0
55763: ST_TO_ADDR
// end else
55764: GO 55774
// result := false ;
55766: LD_ADDR_VAR 0 3
55770: PUSH
55771: LD_INT 0
55773: ST_TO_ADDR
// end ;
55774: LD_VAR 0 3
55778: RET
// export function HealTarget ( sci ) ; begin
55779: LD_INT 0
55781: PPUSH
// if not sci then
55782: LD_VAR 0 1
55786: NOT
55787: IFFALSE 55791
// exit ;
55789: GO 55856
// result := 0 ;
55791: LD_ADDR_VAR 0 2
55795: PUSH
55796: LD_INT 0
55798: ST_TO_ADDR
// if GetTaskList ( sci ) then
55799: LD_VAR 0 1
55803: PPUSH
55804: CALL_OW 437
55808: IFFALSE 55856
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
55810: LD_VAR 0 1
55814: PPUSH
55815: CALL_OW 437
55819: PUSH
55820: LD_INT 1
55822: ARRAY
55823: PUSH
55824: LD_INT 1
55826: ARRAY
55827: PUSH
55828: LD_STRING l
55830: EQUAL
55831: IFFALSE 55856
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
55833: LD_ADDR_VAR 0 2
55837: PUSH
55838: LD_VAR 0 1
55842: PPUSH
55843: CALL_OW 437
55847: PUSH
55848: LD_INT 1
55850: ARRAY
55851: PUSH
55852: LD_INT 4
55854: ARRAY
55855: ST_TO_ADDR
// end ;
55856: LD_VAR 0 2
55860: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
55861: LD_INT 0
55863: PPUSH
55864: PPUSH
55865: PPUSH
55866: PPUSH
// if not base_units then
55867: LD_VAR 0 1
55871: NOT
55872: IFFALSE 55876
// exit ;
55874: GO 55963
// result := false ;
55876: LD_ADDR_VAR 0 2
55880: PUSH
55881: LD_INT 0
55883: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
55884: LD_ADDR_VAR 0 5
55888: PUSH
55889: LD_VAR 0 1
55893: PPUSH
55894: LD_INT 21
55896: PUSH
55897: LD_INT 3
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PPUSH
55904: CALL_OW 72
55908: ST_TO_ADDR
// if not tmp then
55909: LD_VAR 0 5
55913: NOT
55914: IFFALSE 55918
// exit ;
55916: GO 55963
// for i in tmp do
55918: LD_ADDR_VAR 0 3
55922: PUSH
55923: LD_VAR 0 5
55927: PUSH
55928: FOR_IN
55929: IFFALSE 55961
// begin result := EnemyInRange ( i , 22 ) ;
55931: LD_ADDR_VAR 0 2
55935: PUSH
55936: LD_VAR 0 3
55940: PPUSH
55941: LD_INT 22
55943: PPUSH
55944: CALL 53541 0 2
55948: ST_TO_ADDR
// if result then
55949: LD_VAR 0 2
55953: IFFALSE 55959
// exit ;
55955: POP
55956: POP
55957: GO 55963
// end ;
55959: GO 55928
55961: POP
55962: POP
// end ;
55963: LD_VAR 0 2
55967: RET
// export function FilterByTag ( units , tag ) ; begin
55968: LD_INT 0
55970: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
55971: LD_ADDR_VAR 0 3
55975: PUSH
55976: LD_VAR 0 1
55980: PPUSH
55981: LD_INT 120
55983: PUSH
55984: LD_VAR 0 2
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PPUSH
55993: CALL_OW 72
55997: ST_TO_ADDR
// end ;
55998: LD_VAR 0 3
56002: RET
// export function IsDriver ( un ) ; begin
56003: LD_INT 0
56005: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56006: LD_ADDR_VAR 0 2
56010: PUSH
56011: LD_VAR 0 1
56015: PUSH
56016: LD_INT 55
56018: PUSH
56019: EMPTY
56020: LIST
56021: PPUSH
56022: CALL_OW 69
56026: IN
56027: ST_TO_ADDR
// end ;
56028: LD_VAR 0 2
56032: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56033: LD_INT 0
56035: PPUSH
56036: PPUSH
// list := [ ] ;
56037: LD_ADDR_VAR 0 5
56041: PUSH
56042: EMPTY
56043: ST_TO_ADDR
// case d of 0 :
56044: LD_VAR 0 3
56048: PUSH
56049: LD_INT 0
56051: DOUBLE
56052: EQUAL
56053: IFTRUE 56057
56055: GO 56190
56057: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56058: LD_ADDR_VAR 0 5
56062: PUSH
56063: LD_VAR 0 1
56067: PUSH
56068: LD_INT 4
56070: MINUS
56071: PUSH
56072: LD_VAR 0 2
56076: PUSH
56077: LD_INT 4
56079: MINUS
56080: PUSH
56081: LD_INT 2
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: LIST
56088: PUSH
56089: LD_VAR 0 1
56093: PUSH
56094: LD_INT 3
56096: MINUS
56097: PUSH
56098: LD_VAR 0 2
56102: PUSH
56103: LD_INT 1
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: LIST
56110: PUSH
56111: LD_VAR 0 1
56115: PUSH
56116: LD_INT 4
56118: PLUS
56119: PUSH
56120: LD_VAR 0 2
56124: PUSH
56125: LD_INT 4
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: LIST
56132: PUSH
56133: LD_VAR 0 1
56137: PUSH
56138: LD_INT 3
56140: PLUS
56141: PUSH
56142: LD_VAR 0 2
56146: PUSH
56147: LD_INT 3
56149: PLUS
56150: PUSH
56151: LD_INT 5
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: LIST
56158: PUSH
56159: LD_VAR 0 1
56163: PUSH
56164: LD_VAR 0 2
56168: PUSH
56169: LD_INT 4
56171: PLUS
56172: PUSH
56173: LD_INT 0
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: LIST
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: ST_TO_ADDR
// end ; 1 :
56188: GO 56888
56190: LD_INT 1
56192: DOUBLE
56193: EQUAL
56194: IFTRUE 56198
56196: GO 56331
56198: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
56199: LD_ADDR_VAR 0 5
56203: PUSH
56204: LD_VAR 0 1
56208: PUSH
56209: LD_VAR 0 2
56213: PUSH
56214: LD_INT 4
56216: MINUS
56217: PUSH
56218: LD_INT 3
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: LIST
56225: PUSH
56226: LD_VAR 0 1
56230: PUSH
56231: LD_INT 3
56233: MINUS
56234: PUSH
56235: LD_VAR 0 2
56239: PUSH
56240: LD_INT 3
56242: MINUS
56243: PUSH
56244: LD_INT 2
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: LIST
56251: PUSH
56252: LD_VAR 0 1
56256: PUSH
56257: LD_INT 4
56259: MINUS
56260: PUSH
56261: LD_VAR 0 2
56265: PUSH
56266: LD_INT 1
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: LIST
56273: PUSH
56274: LD_VAR 0 1
56278: PUSH
56279: LD_VAR 0 2
56283: PUSH
56284: LD_INT 3
56286: PLUS
56287: PUSH
56288: LD_INT 0
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: LIST
56295: PUSH
56296: LD_VAR 0 1
56300: PUSH
56301: LD_INT 4
56303: PLUS
56304: PUSH
56305: LD_VAR 0 2
56309: PUSH
56310: LD_INT 4
56312: PLUS
56313: PUSH
56314: LD_INT 5
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: LIST
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: ST_TO_ADDR
// end ; 2 :
56329: GO 56888
56331: LD_INT 2
56333: DOUBLE
56334: EQUAL
56335: IFTRUE 56339
56337: GO 56468
56339: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
56340: LD_ADDR_VAR 0 5
56344: PUSH
56345: LD_VAR 0 1
56349: PUSH
56350: LD_VAR 0 2
56354: PUSH
56355: LD_INT 3
56357: MINUS
56358: PUSH
56359: LD_INT 3
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: LIST
56366: PUSH
56367: LD_VAR 0 1
56371: PUSH
56372: LD_INT 4
56374: PLUS
56375: PUSH
56376: LD_VAR 0 2
56380: PUSH
56381: LD_INT 4
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: LIST
56388: PUSH
56389: LD_VAR 0 1
56393: PUSH
56394: LD_VAR 0 2
56398: PUSH
56399: LD_INT 4
56401: PLUS
56402: PUSH
56403: LD_INT 0
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: LIST
56410: PUSH
56411: LD_VAR 0 1
56415: PUSH
56416: LD_INT 3
56418: MINUS
56419: PUSH
56420: LD_VAR 0 2
56424: PUSH
56425: LD_INT 1
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: LIST
56432: PUSH
56433: LD_VAR 0 1
56437: PUSH
56438: LD_INT 4
56440: MINUS
56441: PUSH
56442: LD_VAR 0 2
56446: PUSH
56447: LD_INT 4
56449: MINUS
56450: PUSH
56451: LD_INT 2
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: LIST
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: ST_TO_ADDR
// end ; 3 :
56466: GO 56888
56468: LD_INT 3
56470: DOUBLE
56471: EQUAL
56472: IFTRUE 56476
56474: GO 56609
56476: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
56477: LD_ADDR_VAR 0 5
56481: PUSH
56482: LD_VAR 0 1
56486: PUSH
56487: LD_INT 3
56489: PLUS
56490: PUSH
56491: LD_VAR 0 2
56495: PUSH
56496: LD_INT 4
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: LIST
56503: PUSH
56504: LD_VAR 0 1
56508: PUSH
56509: LD_INT 4
56511: PLUS
56512: PUSH
56513: LD_VAR 0 2
56517: PUSH
56518: LD_INT 4
56520: PLUS
56521: PUSH
56522: LD_INT 5
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: LIST
56529: PUSH
56530: LD_VAR 0 1
56534: PUSH
56535: LD_INT 4
56537: MINUS
56538: PUSH
56539: LD_VAR 0 2
56543: PUSH
56544: LD_INT 1
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: LIST
56551: PUSH
56552: LD_VAR 0 1
56556: PUSH
56557: LD_VAR 0 2
56561: PUSH
56562: LD_INT 4
56564: MINUS
56565: PUSH
56566: LD_INT 3
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: LIST
56573: PUSH
56574: LD_VAR 0 1
56578: PUSH
56579: LD_INT 3
56581: MINUS
56582: PUSH
56583: LD_VAR 0 2
56587: PUSH
56588: LD_INT 3
56590: MINUS
56591: PUSH
56592: LD_INT 2
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: LIST
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: ST_TO_ADDR
// end ; 4 :
56607: GO 56888
56609: LD_INT 4
56611: DOUBLE
56612: EQUAL
56613: IFTRUE 56617
56615: GO 56750
56617: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
56618: LD_ADDR_VAR 0 5
56622: PUSH
56623: LD_VAR 0 1
56627: PUSH
56628: LD_VAR 0 2
56632: PUSH
56633: LD_INT 4
56635: PLUS
56636: PUSH
56637: LD_INT 0
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: LIST
56644: PUSH
56645: LD_VAR 0 1
56649: PUSH
56650: LD_INT 3
56652: PLUS
56653: PUSH
56654: LD_VAR 0 2
56658: PUSH
56659: LD_INT 3
56661: PLUS
56662: PUSH
56663: LD_INT 5
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: LIST
56670: PUSH
56671: LD_VAR 0 1
56675: PUSH
56676: LD_INT 4
56678: PLUS
56679: PUSH
56680: LD_VAR 0 2
56684: PUSH
56685: LD_INT 4
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: LIST
56692: PUSH
56693: LD_VAR 0 1
56697: PUSH
56698: LD_VAR 0 2
56702: PUSH
56703: LD_INT 3
56705: MINUS
56706: PUSH
56707: LD_INT 3
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: LIST
56714: PUSH
56715: LD_VAR 0 1
56719: PUSH
56720: LD_INT 4
56722: MINUS
56723: PUSH
56724: LD_VAR 0 2
56728: PUSH
56729: LD_INT 4
56731: MINUS
56732: PUSH
56733: LD_INT 2
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: LIST
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: ST_TO_ADDR
// end ; 5 :
56748: GO 56888
56750: LD_INT 5
56752: DOUBLE
56753: EQUAL
56754: IFTRUE 56758
56756: GO 56887
56758: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
56759: LD_ADDR_VAR 0 5
56763: PUSH
56764: LD_VAR 0 1
56768: PUSH
56769: LD_INT 4
56771: MINUS
56772: PUSH
56773: LD_VAR 0 2
56777: PUSH
56778: LD_INT 1
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: LIST
56785: PUSH
56786: LD_VAR 0 1
56790: PUSH
56791: LD_VAR 0 2
56795: PUSH
56796: LD_INT 4
56798: MINUS
56799: PUSH
56800: LD_INT 3
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: LIST
56807: PUSH
56808: LD_VAR 0 1
56812: PUSH
56813: LD_INT 4
56815: PLUS
56816: PUSH
56817: LD_VAR 0 2
56821: PUSH
56822: LD_INT 4
56824: PLUS
56825: PUSH
56826: LD_INT 5
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: LIST
56833: PUSH
56834: LD_VAR 0 1
56838: PUSH
56839: LD_INT 3
56841: PLUS
56842: PUSH
56843: LD_VAR 0 2
56847: PUSH
56848: LD_INT 4
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: LIST
56855: PUSH
56856: LD_VAR 0 1
56860: PUSH
56861: LD_VAR 0 2
56865: PUSH
56866: LD_INT 3
56868: PLUS
56869: PUSH
56870: LD_INT 0
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: LIST
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: ST_TO_ADDR
// end ; end ;
56885: GO 56888
56887: POP
// result := list ;
56888: LD_ADDR_VAR 0 4
56892: PUSH
56893: LD_VAR 0 5
56897: ST_TO_ADDR
// end ;
56898: LD_VAR 0 4
56902: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
56903: LD_INT 0
56905: PPUSH
56906: PPUSH
56907: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
56908: LD_VAR 0 1
56912: NOT
56913: PUSH
56914: LD_VAR 0 2
56918: PUSH
56919: LD_INT 1
56921: PUSH
56922: LD_INT 2
56924: PUSH
56925: LD_INT 3
56927: PUSH
56928: LD_INT 4
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: IN
56937: NOT
56938: OR
56939: IFFALSE 56943
// exit ;
56941: GO 57026
// tmp := [ ] ;
56943: LD_ADDR_VAR 0 5
56947: PUSH
56948: EMPTY
56949: ST_TO_ADDR
// for i in units do
56950: LD_ADDR_VAR 0 4
56954: PUSH
56955: LD_VAR 0 1
56959: PUSH
56960: FOR_IN
56961: IFFALSE 56995
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
56963: LD_ADDR_VAR 0 5
56967: PUSH
56968: LD_VAR 0 5
56972: PPUSH
56973: LD_VAR 0 4
56977: PPUSH
56978: LD_VAR 0 2
56982: PPUSH
56983: CALL_OW 259
56987: PPUSH
56988: CALL 58399 0 2
56992: ST_TO_ADDR
56993: GO 56960
56995: POP
56996: POP
// if not tmp then
56997: LD_VAR 0 5
57001: NOT
57002: IFFALSE 57006
// exit ;
57004: GO 57026
// result := SortListByListDesc ( units , tmp ) ;
57006: LD_ADDR_VAR 0 3
57010: PUSH
57011: LD_VAR 0 1
57015: PPUSH
57016: LD_VAR 0 5
57020: PPUSH
57021: CALL_OW 77
57025: ST_TO_ADDR
// end ;
57026: LD_VAR 0 3
57030: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57031: LD_INT 0
57033: PPUSH
57034: PPUSH
57035: PPUSH
// result := false ;
57036: LD_ADDR_VAR 0 3
57040: PUSH
57041: LD_INT 0
57043: ST_TO_ADDR
// if not building then
57044: LD_VAR 0 2
57048: NOT
57049: IFFALSE 57053
// exit ;
57051: GO 57191
// x := GetX ( building ) ;
57053: LD_ADDR_VAR 0 4
57057: PUSH
57058: LD_VAR 0 2
57062: PPUSH
57063: CALL_OW 250
57067: ST_TO_ADDR
// y := GetY ( building ) ;
57068: LD_ADDR_VAR 0 5
57072: PUSH
57073: LD_VAR 0 2
57077: PPUSH
57078: CALL_OW 251
57082: ST_TO_ADDR
// if not x or not y then
57083: LD_VAR 0 4
57087: NOT
57088: PUSH
57089: LD_VAR 0 5
57093: NOT
57094: OR
57095: IFFALSE 57099
// exit ;
57097: GO 57191
// if GetTaskList ( unit ) then
57099: LD_VAR 0 1
57103: PPUSH
57104: CALL_OW 437
57108: IFFALSE 57191
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57110: LD_STRING e
57112: PUSH
57113: LD_VAR 0 1
57117: PPUSH
57118: CALL_OW 437
57122: PUSH
57123: LD_INT 1
57125: ARRAY
57126: PUSH
57127: LD_INT 1
57129: ARRAY
57130: EQUAL
57131: PUSH
57132: LD_VAR 0 4
57136: PUSH
57137: LD_VAR 0 1
57141: PPUSH
57142: CALL_OW 437
57146: PUSH
57147: LD_INT 1
57149: ARRAY
57150: PUSH
57151: LD_INT 2
57153: ARRAY
57154: EQUAL
57155: AND
57156: PUSH
57157: LD_VAR 0 5
57161: PUSH
57162: LD_VAR 0 1
57166: PPUSH
57167: CALL_OW 437
57171: PUSH
57172: LD_INT 1
57174: ARRAY
57175: PUSH
57176: LD_INT 3
57178: ARRAY
57179: EQUAL
57180: AND
57181: IFFALSE 57191
// result := true end ;
57183: LD_ADDR_VAR 0 3
57187: PUSH
57188: LD_INT 1
57190: ST_TO_ADDR
// end ;
57191: LD_VAR 0 3
57195: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
57196: LD_INT 0
57198: PPUSH
// result := false ;
57199: LD_ADDR_VAR 0 4
57203: PUSH
57204: LD_INT 0
57206: ST_TO_ADDR
// if GetTaskList ( unit ) then
57207: LD_VAR 0 1
57211: PPUSH
57212: CALL_OW 437
57216: IFFALSE 57299
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57218: LD_STRING M
57220: PUSH
57221: LD_VAR 0 1
57225: PPUSH
57226: CALL_OW 437
57230: PUSH
57231: LD_INT 1
57233: ARRAY
57234: PUSH
57235: LD_INT 1
57237: ARRAY
57238: EQUAL
57239: PUSH
57240: LD_VAR 0 2
57244: PUSH
57245: LD_VAR 0 1
57249: PPUSH
57250: CALL_OW 437
57254: PUSH
57255: LD_INT 1
57257: ARRAY
57258: PUSH
57259: LD_INT 2
57261: ARRAY
57262: EQUAL
57263: AND
57264: PUSH
57265: LD_VAR 0 3
57269: PUSH
57270: LD_VAR 0 1
57274: PPUSH
57275: CALL_OW 437
57279: PUSH
57280: LD_INT 1
57282: ARRAY
57283: PUSH
57284: LD_INT 3
57286: ARRAY
57287: EQUAL
57288: AND
57289: IFFALSE 57299
// result := true ;
57291: LD_ADDR_VAR 0 4
57295: PUSH
57296: LD_INT 1
57298: ST_TO_ADDR
// end ; end ;
57299: LD_VAR 0 4
57303: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
57304: LD_INT 0
57306: PPUSH
57307: PPUSH
57308: PPUSH
57309: PPUSH
// if not unit or not area then
57310: LD_VAR 0 1
57314: NOT
57315: PUSH
57316: LD_VAR 0 2
57320: NOT
57321: OR
57322: IFFALSE 57326
// exit ;
57324: GO 57502
// tmp := AreaToList ( area , i ) ;
57326: LD_ADDR_VAR 0 6
57330: PUSH
57331: LD_VAR 0 2
57335: PPUSH
57336: LD_VAR 0 5
57340: PPUSH
57341: CALL_OW 517
57345: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
57346: LD_ADDR_VAR 0 5
57350: PUSH
57351: DOUBLE
57352: LD_INT 1
57354: DEC
57355: ST_TO_ADDR
57356: LD_VAR 0 6
57360: PUSH
57361: LD_INT 1
57363: ARRAY
57364: PUSH
57365: FOR_TO
57366: IFFALSE 57500
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
57368: LD_ADDR_VAR 0 7
57372: PUSH
57373: LD_VAR 0 6
57377: PUSH
57378: LD_INT 1
57380: ARRAY
57381: PUSH
57382: LD_VAR 0 5
57386: ARRAY
57387: PUSH
57388: LD_VAR 0 6
57392: PUSH
57393: LD_INT 2
57395: ARRAY
57396: PUSH
57397: LD_VAR 0 5
57401: ARRAY
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
57407: LD_INT 92
57409: PUSH
57410: LD_VAR 0 7
57414: PUSH
57415: LD_INT 1
57417: ARRAY
57418: PUSH
57419: LD_VAR 0 7
57423: PUSH
57424: LD_INT 2
57426: ARRAY
57427: PUSH
57428: LD_INT 2
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: PPUSH
57437: CALL_OW 69
57441: PUSH
57442: LD_INT 0
57444: EQUAL
57445: IFFALSE 57498
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
57447: LD_VAR 0 1
57451: PPUSH
57452: LD_VAR 0 7
57456: PUSH
57457: LD_INT 1
57459: ARRAY
57460: PPUSH
57461: LD_VAR 0 7
57465: PUSH
57466: LD_INT 2
57468: ARRAY
57469: PPUSH
57470: LD_VAR 0 3
57474: PPUSH
57475: CALL_OW 48
// result := IsPlaced ( unit ) ;
57479: LD_ADDR_VAR 0 4
57483: PUSH
57484: LD_VAR 0 1
57488: PPUSH
57489: CALL_OW 305
57493: ST_TO_ADDR
// exit ;
57494: POP
57495: POP
57496: GO 57502
// end ; end ;
57498: GO 57365
57500: POP
57501: POP
// end ;
57502: LD_VAR 0 4
57506: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
57507: LD_INT 0
57509: PPUSH
57510: PPUSH
57511: PPUSH
// if not side or side > 8 then
57512: LD_VAR 0 1
57516: NOT
57517: PUSH
57518: LD_VAR 0 1
57522: PUSH
57523: LD_INT 8
57525: GREATER
57526: OR
57527: IFFALSE 57531
// exit ;
57529: GO 57718
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
57531: LD_ADDR_VAR 0 4
57535: PUSH
57536: LD_INT 22
57538: PUSH
57539: LD_VAR 0 1
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 21
57550: PUSH
57551: LD_INT 3
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PPUSH
57562: CALL_OW 69
57566: ST_TO_ADDR
// if not tmp then
57567: LD_VAR 0 4
57571: NOT
57572: IFFALSE 57576
// exit ;
57574: GO 57718
// enable_addtolog := true ;
57576: LD_ADDR_OWVAR 81
57580: PUSH
57581: LD_INT 1
57583: ST_TO_ADDR
// AddToLog ( [ ) ;
57584: LD_STRING [
57586: PPUSH
57587: CALL_OW 561
// for i in tmp do
57591: LD_ADDR_VAR 0 3
57595: PUSH
57596: LD_VAR 0 4
57600: PUSH
57601: FOR_IN
57602: IFFALSE 57709
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
57604: LD_STRING [
57606: PUSH
57607: LD_VAR 0 3
57611: PPUSH
57612: CALL_OW 266
57616: STR
57617: PUSH
57618: LD_STRING , 
57620: STR
57621: PUSH
57622: LD_VAR 0 3
57626: PPUSH
57627: CALL_OW 250
57631: STR
57632: PUSH
57633: LD_STRING , 
57635: STR
57636: PUSH
57637: LD_VAR 0 3
57641: PPUSH
57642: CALL_OW 251
57646: STR
57647: PUSH
57648: LD_STRING , 
57650: STR
57651: PUSH
57652: LD_VAR 0 3
57656: PPUSH
57657: CALL_OW 254
57661: STR
57662: PUSH
57663: LD_STRING , 
57665: STR
57666: PUSH
57667: LD_VAR 0 3
57671: PPUSH
57672: LD_INT 1
57674: PPUSH
57675: CALL_OW 268
57679: STR
57680: PUSH
57681: LD_STRING , 
57683: STR
57684: PUSH
57685: LD_VAR 0 3
57689: PPUSH
57690: LD_INT 2
57692: PPUSH
57693: CALL_OW 268
57697: STR
57698: PUSH
57699: LD_STRING ],
57701: STR
57702: PPUSH
57703: CALL_OW 561
// end ;
57707: GO 57601
57709: POP
57710: POP
// AddToLog ( ]; ) ;
57711: LD_STRING ];
57713: PPUSH
57714: CALL_OW 561
// end ;
57718: LD_VAR 0 2
57722: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
57723: LD_INT 0
57725: PPUSH
57726: PPUSH
57727: PPUSH
57728: PPUSH
57729: PPUSH
// if not area or not rate or not max then
57730: LD_VAR 0 1
57734: NOT
57735: PUSH
57736: LD_VAR 0 2
57740: NOT
57741: OR
57742: PUSH
57743: LD_VAR 0 4
57747: NOT
57748: OR
57749: IFFALSE 57753
// exit ;
57751: GO 57942
// while 1 do
57753: LD_INT 1
57755: IFFALSE 57942
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
57757: LD_ADDR_VAR 0 9
57761: PUSH
57762: LD_VAR 0 1
57766: PPUSH
57767: LD_INT 1
57769: PPUSH
57770: CALL_OW 287
57774: PUSH
57775: LD_INT 10
57777: MUL
57778: ST_TO_ADDR
// r := rate / 10 ;
57779: LD_ADDR_VAR 0 7
57783: PUSH
57784: LD_VAR 0 2
57788: PUSH
57789: LD_INT 10
57791: DIVREAL
57792: ST_TO_ADDR
// time := 1 1$00 ;
57793: LD_ADDR_VAR 0 8
57797: PUSH
57798: LD_INT 2100
57800: ST_TO_ADDR
// if amount < min then
57801: LD_VAR 0 9
57805: PUSH
57806: LD_VAR 0 3
57810: LESS
57811: IFFALSE 57829
// r := r * 2 else
57813: LD_ADDR_VAR 0 7
57817: PUSH
57818: LD_VAR 0 7
57822: PUSH
57823: LD_INT 2
57825: MUL
57826: ST_TO_ADDR
57827: GO 57855
// if amount > max then
57829: LD_VAR 0 9
57833: PUSH
57834: LD_VAR 0 4
57838: GREATER
57839: IFFALSE 57855
// r := r / 2 ;
57841: LD_ADDR_VAR 0 7
57845: PUSH
57846: LD_VAR 0 7
57850: PUSH
57851: LD_INT 2
57853: DIVREAL
57854: ST_TO_ADDR
// time := time / r ;
57855: LD_ADDR_VAR 0 8
57859: PUSH
57860: LD_VAR 0 8
57864: PUSH
57865: LD_VAR 0 7
57869: DIVREAL
57870: ST_TO_ADDR
// if time < 0 then
57871: LD_VAR 0 8
57875: PUSH
57876: LD_INT 0
57878: LESS
57879: IFFALSE 57896
// time := time * - 1 ;
57881: LD_ADDR_VAR 0 8
57885: PUSH
57886: LD_VAR 0 8
57890: PUSH
57891: LD_INT 1
57893: NEG
57894: MUL
57895: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
57896: LD_VAR 0 8
57900: PUSH
57901: LD_INT 35
57903: PPUSH
57904: LD_INT 875
57906: PPUSH
57907: CALL_OW 12
57911: PLUS
57912: PPUSH
57913: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
57917: LD_INT 1
57919: PPUSH
57920: LD_INT 5
57922: PPUSH
57923: CALL_OW 12
57927: PPUSH
57928: LD_VAR 0 1
57932: PPUSH
57933: LD_INT 1
57935: PPUSH
57936: CALL_OW 55
// end ;
57940: GO 57753
// end ;
57942: LD_VAR 0 5
57946: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
57947: LD_INT 0
57949: PPUSH
57950: PPUSH
57951: PPUSH
57952: PPUSH
57953: PPUSH
57954: PPUSH
57955: PPUSH
57956: PPUSH
// if not turrets or not factories then
57957: LD_VAR 0 1
57961: NOT
57962: PUSH
57963: LD_VAR 0 2
57967: NOT
57968: OR
57969: IFFALSE 57973
// exit ;
57971: GO 58280
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
57973: LD_ADDR_VAR 0 10
57977: PUSH
57978: LD_INT 5
57980: PUSH
57981: LD_INT 6
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 2
57990: PUSH
57991: LD_INT 4
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 3
58000: PUSH
58001: LD_INT 5
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 24
58015: PUSH
58016: LD_INT 25
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 23
58025: PUSH
58026: LD_INT 27
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 42
58039: PUSH
58040: LD_INT 43
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 44
58049: PUSH
58050: LD_INT 46
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 45
58059: PUSH
58060: LD_INT 47
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: LIST
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: LIST
58076: ST_TO_ADDR
// result := [ ] ;
58077: LD_ADDR_VAR 0 3
58081: PUSH
58082: EMPTY
58083: ST_TO_ADDR
// for i in turrets do
58084: LD_ADDR_VAR 0 4
58088: PUSH
58089: LD_VAR 0 1
58093: PUSH
58094: FOR_IN
58095: IFFALSE 58278
// begin nat := GetNation ( i ) ;
58097: LD_ADDR_VAR 0 7
58101: PUSH
58102: LD_VAR 0 4
58106: PPUSH
58107: CALL_OW 248
58111: ST_TO_ADDR
// weapon := 0 ;
58112: LD_ADDR_VAR 0 8
58116: PUSH
58117: LD_INT 0
58119: ST_TO_ADDR
// if not nat then
58120: LD_VAR 0 7
58124: NOT
58125: IFFALSE 58129
// continue ;
58127: GO 58094
// for j in list [ nat ] do
58129: LD_ADDR_VAR 0 5
58133: PUSH
58134: LD_VAR 0 10
58138: PUSH
58139: LD_VAR 0 7
58143: ARRAY
58144: PUSH
58145: FOR_IN
58146: IFFALSE 58187
// if GetBWeapon ( i ) = j [ 1 ] then
58148: LD_VAR 0 4
58152: PPUSH
58153: CALL_OW 269
58157: PUSH
58158: LD_VAR 0 5
58162: PUSH
58163: LD_INT 1
58165: ARRAY
58166: EQUAL
58167: IFFALSE 58185
// begin weapon := j [ 2 ] ;
58169: LD_ADDR_VAR 0 8
58173: PUSH
58174: LD_VAR 0 5
58178: PUSH
58179: LD_INT 2
58181: ARRAY
58182: ST_TO_ADDR
// break ;
58183: GO 58187
// end ;
58185: GO 58145
58187: POP
58188: POP
// if not weapon then
58189: LD_VAR 0 8
58193: NOT
58194: IFFALSE 58198
// continue ;
58196: GO 58094
// for k in factories do
58198: LD_ADDR_VAR 0 6
58202: PUSH
58203: LD_VAR 0 2
58207: PUSH
58208: FOR_IN
58209: IFFALSE 58274
// begin weapons := AvailableWeaponList ( k ) ;
58211: LD_ADDR_VAR 0 9
58215: PUSH
58216: LD_VAR 0 6
58220: PPUSH
58221: CALL_OW 478
58225: ST_TO_ADDR
// if not weapons then
58226: LD_VAR 0 9
58230: NOT
58231: IFFALSE 58235
// continue ;
58233: GO 58208
// if weapon in weapons then
58235: LD_VAR 0 8
58239: PUSH
58240: LD_VAR 0 9
58244: IN
58245: IFFALSE 58272
// begin result := [ i , weapon ] ;
58247: LD_ADDR_VAR 0 3
58251: PUSH
58252: LD_VAR 0 4
58256: PUSH
58257: LD_VAR 0 8
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: ST_TO_ADDR
// exit ;
58266: POP
58267: POP
58268: POP
58269: POP
58270: GO 58280
// end ; end ;
58272: GO 58208
58274: POP
58275: POP
// end ;
58276: GO 58094
58278: POP
58279: POP
// end ;
58280: LD_VAR 0 3
58284: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
58285: LD_INT 0
58287: PPUSH
// if not side or side > 8 then
58288: LD_VAR 0 3
58292: NOT
58293: PUSH
58294: LD_VAR 0 3
58298: PUSH
58299: LD_INT 8
58301: GREATER
58302: OR
58303: IFFALSE 58307
// exit ;
58305: GO 58366
// if not range then
58307: LD_VAR 0 4
58311: NOT
58312: IFFALSE 58323
// range := - 12 ;
58314: LD_ADDR_VAR 0 4
58318: PUSH
58319: LD_INT 12
58321: NEG
58322: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
58323: LD_VAR 0 1
58327: PPUSH
58328: LD_VAR 0 2
58332: PPUSH
58333: LD_VAR 0 3
58337: PPUSH
58338: LD_VAR 0 4
58342: PPUSH
58343: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
58347: LD_VAR 0 1
58351: PPUSH
58352: LD_VAR 0 2
58356: PPUSH
58357: LD_VAR 0 3
58361: PPUSH
58362: CALL_OW 331
// end ;
58366: LD_VAR 0 5
58370: RET
// export function Video ( mode ) ; begin
58371: LD_INT 0
58373: PPUSH
// ingame_video = mode ;
58374: LD_ADDR_OWVAR 52
58378: PUSH
58379: LD_VAR 0 1
58383: ST_TO_ADDR
// interface_hidden = mode ;
58384: LD_ADDR_OWVAR 54
58388: PUSH
58389: LD_VAR 0 1
58393: ST_TO_ADDR
// end ;
58394: LD_VAR 0 2
58398: RET
// export function Join ( array , element ) ; begin
58399: LD_INT 0
58401: PPUSH
// result := Replace ( array , array + 1 , element ) ;
58402: LD_ADDR_VAR 0 3
58406: PUSH
58407: LD_VAR 0 1
58411: PPUSH
58412: LD_VAR 0 1
58416: PUSH
58417: LD_INT 1
58419: PLUS
58420: PPUSH
58421: LD_VAR 0 2
58425: PPUSH
58426: CALL_OW 1
58430: ST_TO_ADDR
// end ;
58431: LD_VAR 0 3
58435: RET
// export function JoinUnion ( array , element ) ; begin
58436: LD_INT 0
58438: PPUSH
// result := array union element ;
58439: LD_ADDR_VAR 0 3
58443: PUSH
58444: LD_VAR 0 1
58448: PUSH
58449: LD_VAR 0 2
58453: UNION
58454: ST_TO_ADDR
// end ;
58455: LD_VAR 0 3
58459: RET
// export function GetBehemoths ( side ) ; begin
58460: LD_INT 0
58462: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
58463: LD_ADDR_VAR 0 2
58467: PUSH
58468: LD_INT 22
58470: PUSH
58471: LD_VAR 0 1
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 31
58482: PUSH
58483: LD_INT 25
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PPUSH
58494: CALL_OW 69
58498: ST_TO_ADDR
// end ;
58499: LD_VAR 0 2
58503: RET
// export function Shuffle ( array ) ; var i , index ; begin
58504: LD_INT 0
58506: PPUSH
58507: PPUSH
58508: PPUSH
// result := [ ] ;
58509: LD_ADDR_VAR 0 2
58513: PUSH
58514: EMPTY
58515: ST_TO_ADDR
// if not array then
58516: LD_VAR 0 1
58520: NOT
58521: IFFALSE 58525
// exit ;
58523: GO 58624
// Randomize ;
58525: CALL_OW 10
// for i = array downto 1 do
58529: LD_ADDR_VAR 0 3
58533: PUSH
58534: DOUBLE
58535: LD_VAR 0 1
58539: INC
58540: ST_TO_ADDR
58541: LD_INT 1
58543: PUSH
58544: FOR_DOWNTO
58545: IFFALSE 58622
// begin index := rand ( 1 , array ) ;
58547: LD_ADDR_VAR 0 4
58551: PUSH
58552: LD_INT 1
58554: PPUSH
58555: LD_VAR 0 1
58559: PPUSH
58560: CALL_OW 12
58564: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
58565: LD_ADDR_VAR 0 2
58569: PUSH
58570: LD_VAR 0 2
58574: PPUSH
58575: LD_VAR 0 2
58579: PUSH
58580: LD_INT 1
58582: PLUS
58583: PPUSH
58584: LD_VAR 0 1
58588: PUSH
58589: LD_VAR 0 4
58593: ARRAY
58594: PPUSH
58595: CALL_OW 2
58599: ST_TO_ADDR
// array := Delete ( array , index ) ;
58600: LD_ADDR_VAR 0 1
58604: PUSH
58605: LD_VAR 0 1
58609: PPUSH
58610: LD_VAR 0 4
58614: PPUSH
58615: CALL_OW 3
58619: ST_TO_ADDR
// end ;
58620: GO 58544
58622: POP
58623: POP
// end ;
58624: LD_VAR 0 2
58628: RET
// export function GetBaseMaterials ( base ) ; begin
58629: LD_INT 0
58631: PPUSH
// result := [ 0 , 0 , 0 ] ;
58632: LD_ADDR_VAR 0 2
58636: PUSH
58637: LD_INT 0
58639: PUSH
58640: LD_INT 0
58642: PUSH
58643: LD_INT 0
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: LIST
58650: ST_TO_ADDR
// if not base then
58651: LD_VAR 0 1
58655: NOT
58656: IFFALSE 58660
// exit ;
58658: GO 58709
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
58660: LD_ADDR_VAR 0 2
58664: PUSH
58665: LD_VAR 0 1
58669: PPUSH
58670: LD_INT 1
58672: PPUSH
58673: CALL_OW 275
58677: PUSH
58678: LD_VAR 0 1
58682: PPUSH
58683: LD_INT 2
58685: PPUSH
58686: CALL_OW 275
58690: PUSH
58691: LD_VAR 0 1
58695: PPUSH
58696: LD_INT 3
58698: PPUSH
58699: CALL_OW 275
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: LIST
58708: ST_TO_ADDR
// end ;
58709: LD_VAR 0 2
58713: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
58714: LD_INT 0
58716: PPUSH
58717: PPUSH
// result := array ;
58718: LD_ADDR_VAR 0 3
58722: PUSH
58723: LD_VAR 0 1
58727: ST_TO_ADDR
// if size >= result then
58728: LD_VAR 0 2
58732: PUSH
58733: LD_VAR 0 3
58737: GREATEREQUAL
58738: IFFALSE 58742
// exit ;
58740: GO 58792
// if size then
58742: LD_VAR 0 2
58746: IFFALSE 58792
// for i := array downto size do
58748: LD_ADDR_VAR 0 4
58752: PUSH
58753: DOUBLE
58754: LD_VAR 0 1
58758: INC
58759: ST_TO_ADDR
58760: LD_VAR 0 2
58764: PUSH
58765: FOR_DOWNTO
58766: IFFALSE 58790
// result := Delete ( result , result ) ;
58768: LD_ADDR_VAR 0 3
58772: PUSH
58773: LD_VAR 0 3
58777: PPUSH
58778: LD_VAR 0 3
58782: PPUSH
58783: CALL_OW 3
58787: ST_TO_ADDR
58788: GO 58765
58790: POP
58791: POP
// end ;
58792: LD_VAR 0 3
58796: RET
// export function ComExit ( unit ) ; var tmp ; begin
58797: LD_INT 0
58799: PPUSH
58800: PPUSH
// if not IsInUnit ( unit ) then
58801: LD_VAR 0 1
58805: PPUSH
58806: CALL_OW 310
58810: NOT
58811: IFFALSE 58815
// exit ;
58813: GO 58875
// tmp := IsInUnit ( unit ) ;
58815: LD_ADDR_VAR 0 3
58819: PUSH
58820: LD_VAR 0 1
58824: PPUSH
58825: CALL_OW 310
58829: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
58830: LD_VAR 0 3
58834: PPUSH
58835: CALL_OW 247
58839: PUSH
58840: LD_INT 2
58842: EQUAL
58843: IFFALSE 58856
// ComExitVehicle ( unit ) else
58845: LD_VAR 0 1
58849: PPUSH
58850: CALL_OW 121
58854: GO 58865
// ComExitBuilding ( unit ) ;
58856: LD_VAR 0 1
58860: PPUSH
58861: CALL_OW 122
// result := tmp ;
58865: LD_ADDR_VAR 0 2
58869: PUSH
58870: LD_VAR 0 3
58874: ST_TO_ADDR
// end ;
58875: LD_VAR 0 2
58879: RET
// export function ComExitAll ( units ) ; var i ; begin
58880: LD_INT 0
58882: PPUSH
58883: PPUSH
// if not units then
58884: LD_VAR 0 1
58888: NOT
58889: IFFALSE 58893
// exit ;
58891: GO 58919
// for i in units do
58893: LD_ADDR_VAR 0 3
58897: PUSH
58898: LD_VAR 0 1
58902: PUSH
58903: FOR_IN
58904: IFFALSE 58917
// ComExit ( i ) ;
58906: LD_VAR 0 3
58910: PPUSH
58911: CALL 58797 0 1
58915: GO 58903
58917: POP
58918: POP
// end ;
58919: LD_VAR 0 2
58923: RET
// export function ResetHc ; begin
58924: LD_INT 0
58926: PPUSH
// InitHc ;
58927: CALL_OW 19
// hc_importance := 0 ;
58931: LD_ADDR_OWVAR 32
58935: PUSH
58936: LD_INT 0
58938: ST_TO_ADDR
// end ;
58939: LD_VAR 0 1
58943: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
58944: LD_INT 0
58946: PPUSH
58947: PPUSH
58948: PPUSH
// _x := ( x1 + x2 ) div 2 ;
58949: LD_ADDR_VAR 0 6
58953: PUSH
58954: LD_VAR 0 1
58958: PUSH
58959: LD_VAR 0 3
58963: PLUS
58964: PUSH
58965: LD_INT 2
58967: DIV
58968: ST_TO_ADDR
// if _x < 0 then
58969: LD_VAR 0 6
58973: PUSH
58974: LD_INT 0
58976: LESS
58977: IFFALSE 58994
// _x := _x * - 1 ;
58979: LD_ADDR_VAR 0 6
58983: PUSH
58984: LD_VAR 0 6
58988: PUSH
58989: LD_INT 1
58991: NEG
58992: MUL
58993: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
58994: LD_ADDR_VAR 0 7
58998: PUSH
58999: LD_VAR 0 2
59003: PUSH
59004: LD_VAR 0 4
59008: PLUS
59009: PUSH
59010: LD_INT 2
59012: DIV
59013: ST_TO_ADDR
// if _y < 0 then
59014: LD_VAR 0 7
59018: PUSH
59019: LD_INT 0
59021: LESS
59022: IFFALSE 59039
// _y := _y * - 1 ;
59024: LD_ADDR_VAR 0 7
59028: PUSH
59029: LD_VAR 0 7
59033: PUSH
59034: LD_INT 1
59036: NEG
59037: MUL
59038: ST_TO_ADDR
// result := [ _x , _y ] ;
59039: LD_ADDR_VAR 0 5
59043: PUSH
59044: LD_VAR 0 6
59048: PUSH
59049: LD_VAR 0 7
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: ST_TO_ADDR
// end ;
59058: LD_VAR 0 5
59062: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
59063: LD_INT 0
59065: PPUSH
59066: PPUSH
59067: PPUSH
59068: PPUSH
// task := GetTaskList ( unit ) ;
59069: LD_ADDR_VAR 0 7
59073: PUSH
59074: LD_VAR 0 1
59078: PPUSH
59079: CALL_OW 437
59083: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
59084: LD_VAR 0 7
59088: NOT
59089: PUSH
59090: LD_VAR 0 1
59094: PPUSH
59095: LD_VAR 0 2
59099: PPUSH
59100: CALL_OW 308
59104: NOT
59105: AND
59106: IFFALSE 59110
// exit ;
59108: GO 59228
// if IsInArea ( unit , area ) then
59110: LD_VAR 0 1
59114: PPUSH
59115: LD_VAR 0 2
59119: PPUSH
59120: CALL_OW 308
59124: IFFALSE 59142
// begin ComMoveToArea ( unit , goAway ) ;
59126: LD_VAR 0 1
59130: PPUSH
59131: LD_VAR 0 3
59135: PPUSH
59136: CALL_OW 113
// exit ;
59140: GO 59228
// end ; if task [ 1 ] [ 1 ] <> M then
59142: LD_VAR 0 7
59146: PUSH
59147: LD_INT 1
59149: ARRAY
59150: PUSH
59151: LD_INT 1
59153: ARRAY
59154: PUSH
59155: LD_STRING M
59157: NONEQUAL
59158: IFFALSE 59162
// exit ;
59160: GO 59228
// x := task [ 1 ] [ 2 ] ;
59162: LD_ADDR_VAR 0 5
59166: PUSH
59167: LD_VAR 0 7
59171: PUSH
59172: LD_INT 1
59174: ARRAY
59175: PUSH
59176: LD_INT 2
59178: ARRAY
59179: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
59180: LD_ADDR_VAR 0 6
59184: PUSH
59185: LD_VAR 0 7
59189: PUSH
59190: LD_INT 1
59192: ARRAY
59193: PUSH
59194: LD_INT 3
59196: ARRAY
59197: ST_TO_ADDR
// if InArea ( x , y , area ) then
59198: LD_VAR 0 5
59202: PPUSH
59203: LD_VAR 0 6
59207: PPUSH
59208: LD_VAR 0 2
59212: PPUSH
59213: CALL_OW 309
59217: IFFALSE 59228
// ComStop ( unit ) ;
59219: LD_VAR 0 1
59223: PPUSH
59224: CALL_OW 141
// end ;
59228: LD_VAR 0 4
59232: RET
// export function Abs ( value ) ; begin
59233: LD_INT 0
59235: PPUSH
// result := value ;
59236: LD_ADDR_VAR 0 2
59240: PUSH
59241: LD_VAR 0 1
59245: ST_TO_ADDR
// if value < 0 then
59246: LD_VAR 0 1
59250: PUSH
59251: LD_INT 0
59253: LESS
59254: IFFALSE 59271
// result := value * - 1 ;
59256: LD_ADDR_VAR 0 2
59260: PUSH
59261: LD_VAR 0 1
59265: PUSH
59266: LD_INT 1
59268: NEG
59269: MUL
59270: ST_TO_ADDR
// end ;
59271: LD_VAR 0 2
59275: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
59276: LD_INT 0
59278: PPUSH
59279: PPUSH
59280: PPUSH
59281: PPUSH
59282: PPUSH
59283: PPUSH
59284: PPUSH
59285: PPUSH
// if not unit or not building then
59286: LD_VAR 0 1
59290: NOT
59291: PUSH
59292: LD_VAR 0 2
59296: NOT
59297: OR
59298: IFFALSE 59302
// exit ;
59300: GO 59528
// x := GetX ( building ) ;
59302: LD_ADDR_VAR 0 4
59306: PUSH
59307: LD_VAR 0 2
59311: PPUSH
59312: CALL_OW 250
59316: ST_TO_ADDR
// y := GetY ( building ) ;
59317: LD_ADDR_VAR 0 6
59321: PUSH
59322: LD_VAR 0 2
59326: PPUSH
59327: CALL_OW 251
59331: ST_TO_ADDR
// d := GetDir ( building ) ;
59332: LD_ADDR_VAR 0 8
59336: PUSH
59337: LD_VAR 0 2
59341: PPUSH
59342: CALL_OW 254
59346: ST_TO_ADDR
// r := 4 ;
59347: LD_ADDR_VAR 0 9
59351: PUSH
59352: LD_INT 4
59354: ST_TO_ADDR
// for i := 1 to 5 do
59355: LD_ADDR_VAR 0 10
59359: PUSH
59360: DOUBLE
59361: LD_INT 1
59363: DEC
59364: ST_TO_ADDR
59365: LD_INT 5
59367: PUSH
59368: FOR_TO
59369: IFFALSE 59526
// begin _x := ShiftX ( x , d , r + i ) ;
59371: LD_ADDR_VAR 0 5
59375: PUSH
59376: LD_VAR 0 4
59380: PPUSH
59381: LD_VAR 0 8
59385: PPUSH
59386: LD_VAR 0 9
59390: PUSH
59391: LD_VAR 0 10
59395: PLUS
59396: PPUSH
59397: CALL_OW 272
59401: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
59402: LD_ADDR_VAR 0 7
59406: PUSH
59407: LD_VAR 0 6
59411: PPUSH
59412: LD_VAR 0 8
59416: PPUSH
59417: LD_VAR 0 9
59421: PUSH
59422: LD_VAR 0 10
59426: PLUS
59427: PPUSH
59428: CALL_OW 273
59432: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
59433: LD_VAR 0 5
59437: PPUSH
59438: LD_VAR 0 7
59442: PPUSH
59443: CALL_OW 488
59447: PUSH
59448: LD_VAR 0 5
59452: PPUSH
59453: LD_VAR 0 7
59457: PPUSH
59458: CALL_OW 428
59462: PPUSH
59463: CALL_OW 247
59467: PUSH
59468: LD_INT 3
59470: PUSH
59471: LD_INT 2
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: IN
59478: NOT
59479: AND
59480: IFFALSE 59524
// begin ComMoveXY ( unit , _x , _y ) ;
59482: LD_VAR 0 1
59486: PPUSH
59487: LD_VAR 0 5
59491: PPUSH
59492: LD_VAR 0 7
59496: PPUSH
59497: CALL_OW 111
// result := [ _x , _y ] ;
59501: LD_ADDR_VAR 0 3
59505: PUSH
59506: LD_VAR 0 5
59510: PUSH
59511: LD_VAR 0 7
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: ST_TO_ADDR
// exit ;
59520: POP
59521: POP
59522: GO 59528
// end ; end ;
59524: GO 59368
59526: POP
59527: POP
// end ;
59528: LD_VAR 0 3
59532: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
59533: LD_INT 0
59535: PPUSH
59536: PPUSH
59537: PPUSH
// result := 0 ;
59538: LD_ADDR_VAR 0 3
59542: PUSH
59543: LD_INT 0
59545: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
59546: LD_VAR 0 1
59550: PUSH
59551: LD_INT 0
59553: LESS
59554: PUSH
59555: LD_VAR 0 1
59559: PUSH
59560: LD_INT 8
59562: GREATER
59563: OR
59564: PUSH
59565: LD_VAR 0 2
59569: PUSH
59570: LD_INT 0
59572: LESS
59573: OR
59574: PUSH
59575: LD_VAR 0 2
59579: PUSH
59580: LD_INT 8
59582: GREATER
59583: OR
59584: IFFALSE 59588
// exit ;
59586: GO 59663
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
59588: LD_ADDR_VAR 0 4
59592: PUSH
59593: LD_INT 22
59595: PUSH
59596: LD_VAR 0 2
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PPUSH
59605: CALL_OW 69
59609: PUSH
59610: FOR_IN
59611: IFFALSE 59661
// begin un := UnitShoot ( i ) ;
59613: LD_ADDR_VAR 0 5
59617: PUSH
59618: LD_VAR 0 4
59622: PPUSH
59623: CALL_OW 504
59627: ST_TO_ADDR
// if GetSide ( un ) = side1 then
59628: LD_VAR 0 5
59632: PPUSH
59633: CALL_OW 255
59637: PUSH
59638: LD_VAR 0 1
59642: EQUAL
59643: IFFALSE 59659
// begin result := un ;
59645: LD_ADDR_VAR 0 3
59649: PUSH
59650: LD_VAR 0 5
59654: ST_TO_ADDR
// exit ;
59655: POP
59656: POP
59657: GO 59663
// end ; end ;
59659: GO 59610
59661: POP
59662: POP
// end ;
59663: LD_VAR 0 3
59667: RET
// export function GetCargoBay ( units ) ; begin
59668: LD_INT 0
59670: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
59671: LD_ADDR_VAR 0 2
59675: PUSH
59676: LD_VAR 0 1
59680: PPUSH
59681: LD_INT 2
59683: PUSH
59684: LD_INT 34
59686: PUSH
59687: LD_INT 12
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 34
59696: PUSH
59697: LD_INT 51
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 34
59706: PUSH
59707: LD_INT 32
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 34
59716: PUSH
59717: LD_INT 89
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: PPUSH
59731: CALL_OW 72
59735: ST_TO_ADDR
// end ;
59736: LD_VAR 0 2
59740: RET
// export function Negate ( value ) ; begin
59741: LD_INT 0
59743: PPUSH
// result := not value ;
59744: LD_ADDR_VAR 0 2
59748: PUSH
59749: LD_VAR 0 1
59753: NOT
59754: ST_TO_ADDR
// end ;
59755: LD_VAR 0 2
59759: RET
// export function Inc ( value ) ; begin
59760: LD_INT 0
59762: PPUSH
// result := value + 1 ;
59763: LD_ADDR_VAR 0 2
59767: PUSH
59768: LD_VAR 0 1
59772: PUSH
59773: LD_INT 1
59775: PLUS
59776: ST_TO_ADDR
// end ;
59777: LD_VAR 0 2
59781: RET
// export function Dec ( value ) ; begin
59782: LD_INT 0
59784: PPUSH
// result := value - 1 ;
59785: LD_ADDR_VAR 0 2
59789: PUSH
59790: LD_VAR 0 1
59794: PUSH
59795: LD_INT 1
59797: MINUS
59798: ST_TO_ADDR
// end ;
59799: LD_VAR 0 2
59803: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
59804: LD_INT 0
59806: PPUSH
59807: PPUSH
59808: PPUSH
59809: PPUSH
59810: PPUSH
59811: PPUSH
59812: PPUSH
59813: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
59814: LD_VAR 0 1
59818: PPUSH
59819: LD_VAR 0 2
59823: PPUSH
59824: CALL_OW 488
59828: NOT
59829: PUSH
59830: LD_VAR 0 3
59834: PPUSH
59835: LD_VAR 0 4
59839: PPUSH
59840: CALL_OW 488
59844: NOT
59845: OR
59846: IFFALSE 59859
// begin result := - 1 ;
59848: LD_ADDR_VAR 0 5
59852: PUSH
59853: LD_INT 1
59855: NEG
59856: ST_TO_ADDR
// exit ;
59857: GO 60094
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
59859: LD_ADDR_VAR 0 12
59863: PUSH
59864: LD_VAR 0 1
59868: PPUSH
59869: LD_VAR 0 2
59873: PPUSH
59874: LD_VAR 0 3
59878: PPUSH
59879: LD_VAR 0 4
59883: PPUSH
59884: CALL 58944 0 4
59888: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
59889: LD_ADDR_VAR 0 11
59893: PUSH
59894: LD_VAR 0 1
59898: PPUSH
59899: LD_VAR 0 2
59903: PPUSH
59904: LD_VAR 0 12
59908: PUSH
59909: LD_INT 1
59911: ARRAY
59912: PPUSH
59913: LD_VAR 0 12
59917: PUSH
59918: LD_INT 2
59920: ARRAY
59921: PPUSH
59922: CALL_OW 298
59926: ST_TO_ADDR
// distance := 9999 ;
59927: LD_ADDR_VAR 0 10
59931: PUSH
59932: LD_INT 9999
59934: ST_TO_ADDR
// for i := 0 to 5 do
59935: LD_ADDR_VAR 0 6
59939: PUSH
59940: DOUBLE
59941: LD_INT 0
59943: DEC
59944: ST_TO_ADDR
59945: LD_INT 5
59947: PUSH
59948: FOR_TO
59949: IFFALSE 60092
// begin _x := ShiftX ( x1 , i , centerDist ) ;
59951: LD_ADDR_VAR 0 7
59955: PUSH
59956: LD_VAR 0 1
59960: PPUSH
59961: LD_VAR 0 6
59965: PPUSH
59966: LD_VAR 0 11
59970: PPUSH
59971: CALL_OW 272
59975: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
59976: LD_ADDR_VAR 0 8
59980: PUSH
59981: LD_VAR 0 2
59985: PPUSH
59986: LD_VAR 0 6
59990: PPUSH
59991: LD_VAR 0 11
59995: PPUSH
59996: CALL_OW 273
60000: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60001: LD_VAR 0 7
60005: PPUSH
60006: LD_VAR 0 8
60010: PPUSH
60011: CALL_OW 488
60015: NOT
60016: IFFALSE 60020
// continue ;
60018: GO 59948
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
60020: LD_ADDR_VAR 0 9
60024: PUSH
60025: LD_VAR 0 12
60029: PUSH
60030: LD_INT 1
60032: ARRAY
60033: PPUSH
60034: LD_VAR 0 12
60038: PUSH
60039: LD_INT 2
60041: ARRAY
60042: PPUSH
60043: LD_VAR 0 7
60047: PPUSH
60048: LD_VAR 0 8
60052: PPUSH
60053: CALL_OW 298
60057: ST_TO_ADDR
// if tmp < distance then
60058: LD_VAR 0 9
60062: PUSH
60063: LD_VAR 0 10
60067: LESS
60068: IFFALSE 60090
// begin result := i ;
60070: LD_ADDR_VAR 0 5
60074: PUSH
60075: LD_VAR 0 6
60079: ST_TO_ADDR
// distance := tmp ;
60080: LD_ADDR_VAR 0 10
60084: PUSH
60085: LD_VAR 0 9
60089: ST_TO_ADDR
// end ; end ;
60090: GO 59948
60092: POP
60093: POP
// end ;
60094: LD_VAR 0 5
60098: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60099: LD_INT 0
60101: PPUSH
60102: PPUSH
// if not driver or not IsInUnit ( driver ) then
60103: LD_VAR 0 1
60107: NOT
60108: PUSH
60109: LD_VAR 0 1
60113: PPUSH
60114: CALL_OW 310
60118: NOT
60119: OR
60120: IFFALSE 60124
// exit ;
60122: GO 60214
// vehicle := IsInUnit ( driver ) ;
60124: LD_ADDR_VAR 0 3
60128: PUSH
60129: LD_VAR 0 1
60133: PPUSH
60134: CALL_OW 310
60138: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60139: LD_VAR 0 1
60143: PPUSH
60144: LD_STRING \
60146: PUSH
60147: LD_INT 0
60149: PUSH
60150: LD_INT 0
60152: PUSH
60153: LD_INT 0
60155: PUSH
60156: LD_INT 0
60158: PUSH
60159: LD_INT 0
60161: PUSH
60162: LD_INT 0
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: PUSH
60174: LD_STRING E
60176: PUSH
60177: LD_INT 0
60179: PUSH
60180: LD_INT 0
60182: PUSH
60183: LD_VAR 0 3
60187: PUSH
60188: LD_INT 0
60190: PUSH
60191: LD_INT 0
60193: PUSH
60194: LD_INT 0
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PPUSH
60210: CALL_OW 446
// end ;
60214: LD_VAR 0 2
60218: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60219: LD_INT 0
60221: PPUSH
60222: PPUSH
// if not driver or not IsInUnit ( driver ) then
60223: LD_VAR 0 1
60227: NOT
60228: PUSH
60229: LD_VAR 0 1
60233: PPUSH
60234: CALL_OW 310
60238: NOT
60239: OR
60240: IFFALSE 60244
// exit ;
60242: GO 60334
// vehicle := IsInUnit ( driver ) ;
60244: LD_ADDR_VAR 0 3
60248: PUSH
60249: LD_VAR 0 1
60253: PPUSH
60254: CALL_OW 310
60258: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60259: LD_VAR 0 1
60263: PPUSH
60264: LD_STRING \
60266: PUSH
60267: LD_INT 0
60269: PUSH
60270: LD_INT 0
60272: PUSH
60273: LD_INT 0
60275: PUSH
60276: LD_INT 0
60278: PUSH
60279: LD_INT 0
60281: PUSH
60282: LD_INT 0
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: PUSH
60294: LD_STRING E
60296: PUSH
60297: LD_INT 0
60299: PUSH
60300: LD_INT 0
60302: PUSH
60303: LD_VAR 0 3
60307: PUSH
60308: LD_INT 0
60310: PUSH
60311: LD_INT 0
60313: PUSH
60314: LD_INT 0
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PPUSH
60330: CALL_OW 447
// end ;
60334: LD_VAR 0 2
60338: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
60339: LD_INT 0
60341: PPUSH
60342: PPUSH
60343: PPUSH
// tmp := [ ] ;
60344: LD_ADDR_VAR 0 5
60348: PUSH
60349: EMPTY
60350: ST_TO_ADDR
// for i in units do
60351: LD_ADDR_VAR 0 4
60355: PUSH
60356: LD_VAR 0 1
60360: PUSH
60361: FOR_IN
60362: IFFALSE 60400
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
60364: LD_ADDR_VAR 0 5
60368: PUSH
60369: LD_VAR 0 5
60373: PPUSH
60374: LD_VAR 0 5
60378: PUSH
60379: LD_INT 1
60381: PLUS
60382: PPUSH
60383: LD_VAR 0 4
60387: PPUSH
60388: CALL_OW 256
60392: PPUSH
60393: CALL_OW 2
60397: ST_TO_ADDR
60398: GO 60361
60400: POP
60401: POP
// if not tmp then
60402: LD_VAR 0 5
60406: NOT
60407: IFFALSE 60411
// exit ;
60409: GO 60459
// if asc then
60411: LD_VAR 0 2
60415: IFFALSE 60439
// result := SortListByListAsc ( units , tmp ) else
60417: LD_ADDR_VAR 0 3
60421: PUSH
60422: LD_VAR 0 1
60426: PPUSH
60427: LD_VAR 0 5
60431: PPUSH
60432: CALL_OW 76
60436: ST_TO_ADDR
60437: GO 60459
// result := SortListByListDesc ( units , tmp ) ;
60439: LD_ADDR_VAR 0 3
60443: PUSH
60444: LD_VAR 0 1
60448: PPUSH
60449: LD_VAR 0 5
60453: PPUSH
60454: CALL_OW 77
60458: ST_TO_ADDR
// end ;
60459: LD_VAR 0 3
60463: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
60464: LD_INT 0
60466: PPUSH
60467: PPUSH
// task := GetTaskList ( mech ) ;
60468: LD_ADDR_VAR 0 4
60472: PUSH
60473: LD_VAR 0 1
60477: PPUSH
60478: CALL_OW 437
60482: ST_TO_ADDR
// if not task then
60483: LD_VAR 0 4
60487: NOT
60488: IFFALSE 60492
// exit ;
60490: GO 60534
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
60492: LD_ADDR_VAR 0 3
60496: PUSH
60497: LD_VAR 0 4
60501: PUSH
60502: LD_INT 1
60504: ARRAY
60505: PUSH
60506: LD_INT 1
60508: ARRAY
60509: PUSH
60510: LD_STRING r
60512: EQUAL
60513: PUSH
60514: LD_VAR 0 4
60518: PUSH
60519: LD_INT 1
60521: ARRAY
60522: PUSH
60523: LD_INT 4
60525: ARRAY
60526: PUSH
60527: LD_VAR 0 2
60531: EQUAL
60532: AND
60533: ST_TO_ADDR
// end ;
60534: LD_VAR 0 3
60538: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
60539: LD_INT 0
60541: PPUSH
// SetDir ( unit , d ) ;
60542: LD_VAR 0 1
60546: PPUSH
60547: LD_VAR 0 4
60551: PPUSH
60552: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
60556: LD_VAR 0 1
60560: PPUSH
60561: LD_VAR 0 2
60565: PPUSH
60566: LD_VAR 0 3
60570: PPUSH
60571: LD_VAR 0 5
60575: PPUSH
60576: CALL_OW 48
// end ;
60580: LD_VAR 0 6
60584: RET
// export function ToNaturalNumber ( number ) ; begin
60585: LD_INT 0
60587: PPUSH
// result := number div 1 ;
60588: LD_ADDR_VAR 0 2
60592: PUSH
60593: LD_VAR 0 1
60597: PUSH
60598: LD_INT 1
60600: DIV
60601: ST_TO_ADDR
// if number < 0 then
60602: LD_VAR 0 1
60606: PUSH
60607: LD_INT 0
60609: LESS
60610: IFFALSE 60620
// result := 0 ;
60612: LD_ADDR_VAR 0 2
60616: PUSH
60617: LD_INT 0
60619: ST_TO_ADDR
// end ;
60620: LD_VAR 0 2
60624: RET
// export function SortByClass ( units , class ) ; var un ; begin
60625: LD_INT 0
60627: PPUSH
60628: PPUSH
// if not units or not class then
60629: LD_VAR 0 1
60633: NOT
60634: PUSH
60635: LD_VAR 0 2
60639: NOT
60640: OR
60641: IFFALSE 60645
// exit ;
60643: GO 60740
// result := [ ] ;
60645: LD_ADDR_VAR 0 3
60649: PUSH
60650: EMPTY
60651: ST_TO_ADDR
// for un in units do
60652: LD_ADDR_VAR 0 4
60656: PUSH
60657: LD_VAR 0 1
60661: PUSH
60662: FOR_IN
60663: IFFALSE 60738
// if GetClass ( un ) = class then
60665: LD_VAR 0 4
60669: PPUSH
60670: CALL_OW 257
60674: PUSH
60675: LD_VAR 0 2
60679: EQUAL
60680: IFFALSE 60707
// result := Insert ( result , 1 , un ) else
60682: LD_ADDR_VAR 0 3
60686: PUSH
60687: LD_VAR 0 3
60691: PPUSH
60692: LD_INT 1
60694: PPUSH
60695: LD_VAR 0 4
60699: PPUSH
60700: CALL_OW 2
60704: ST_TO_ADDR
60705: GO 60736
// result := Replace ( result , result + 1 , un ) ;
60707: LD_ADDR_VAR 0 3
60711: PUSH
60712: LD_VAR 0 3
60716: PPUSH
60717: LD_VAR 0 3
60721: PUSH
60722: LD_INT 1
60724: PLUS
60725: PPUSH
60726: LD_VAR 0 4
60730: PPUSH
60731: CALL_OW 1
60735: ST_TO_ADDR
60736: GO 60662
60738: POP
60739: POP
// end ;
60740: LD_VAR 0 3
60744: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
60745: LD_INT 0
60747: PPUSH
60748: PPUSH
60749: PPUSH
60750: PPUSH
60751: PPUSH
60752: PPUSH
60753: PPUSH
// result := [ ] ;
60754: LD_ADDR_VAR 0 4
60758: PUSH
60759: EMPTY
60760: ST_TO_ADDR
// if x - r < 0 then
60761: LD_VAR 0 1
60765: PUSH
60766: LD_VAR 0 3
60770: MINUS
60771: PUSH
60772: LD_INT 0
60774: LESS
60775: IFFALSE 60787
// min_x := 0 else
60777: LD_ADDR_VAR 0 8
60781: PUSH
60782: LD_INT 0
60784: ST_TO_ADDR
60785: GO 60803
// min_x := x - r ;
60787: LD_ADDR_VAR 0 8
60791: PUSH
60792: LD_VAR 0 1
60796: PUSH
60797: LD_VAR 0 3
60801: MINUS
60802: ST_TO_ADDR
// if y - r < 0 then
60803: LD_VAR 0 2
60807: PUSH
60808: LD_VAR 0 3
60812: MINUS
60813: PUSH
60814: LD_INT 0
60816: LESS
60817: IFFALSE 60829
// min_y := 0 else
60819: LD_ADDR_VAR 0 7
60823: PUSH
60824: LD_INT 0
60826: ST_TO_ADDR
60827: GO 60845
// min_y := y - r ;
60829: LD_ADDR_VAR 0 7
60833: PUSH
60834: LD_VAR 0 2
60838: PUSH
60839: LD_VAR 0 3
60843: MINUS
60844: ST_TO_ADDR
// max_x := x + r ;
60845: LD_ADDR_VAR 0 9
60849: PUSH
60850: LD_VAR 0 1
60854: PUSH
60855: LD_VAR 0 3
60859: PLUS
60860: ST_TO_ADDR
// max_y := y + r ;
60861: LD_ADDR_VAR 0 10
60865: PUSH
60866: LD_VAR 0 2
60870: PUSH
60871: LD_VAR 0 3
60875: PLUS
60876: ST_TO_ADDR
// for _x = min_x to max_x do
60877: LD_ADDR_VAR 0 5
60881: PUSH
60882: DOUBLE
60883: LD_VAR 0 8
60887: DEC
60888: ST_TO_ADDR
60889: LD_VAR 0 9
60893: PUSH
60894: FOR_TO
60895: IFFALSE 60996
// for _y = min_y to max_y do
60897: LD_ADDR_VAR 0 6
60901: PUSH
60902: DOUBLE
60903: LD_VAR 0 7
60907: DEC
60908: ST_TO_ADDR
60909: LD_VAR 0 10
60913: PUSH
60914: FOR_TO
60915: IFFALSE 60992
// begin if not ValidHex ( _x , _y ) then
60917: LD_VAR 0 5
60921: PPUSH
60922: LD_VAR 0 6
60926: PPUSH
60927: CALL_OW 488
60931: NOT
60932: IFFALSE 60936
// continue ;
60934: GO 60914
// if GetResourceTypeXY ( _x , _y ) then
60936: LD_VAR 0 5
60940: PPUSH
60941: LD_VAR 0 6
60945: PPUSH
60946: CALL_OW 283
60950: IFFALSE 60990
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
60952: LD_ADDR_VAR 0 4
60956: PUSH
60957: LD_VAR 0 4
60961: PPUSH
60962: LD_VAR 0 4
60966: PUSH
60967: LD_INT 1
60969: PLUS
60970: PPUSH
60971: LD_VAR 0 5
60975: PUSH
60976: LD_VAR 0 6
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PPUSH
60985: CALL_OW 1
60989: ST_TO_ADDR
// end ;
60990: GO 60914
60992: POP
60993: POP
60994: GO 60894
60996: POP
60997: POP
// end ;
60998: LD_VAR 0 4
61002: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
61003: LD_INT 0
61005: PPUSH
61006: PPUSH
61007: PPUSH
61008: PPUSH
61009: PPUSH
61010: PPUSH
61011: PPUSH
61012: PPUSH
// if not units then
61013: LD_VAR 0 1
61017: NOT
61018: IFFALSE 61022
// exit ;
61020: GO 61550
// result := UnitFilter ( units , [ f_ok ] ) ;
61022: LD_ADDR_VAR 0 3
61026: PUSH
61027: LD_VAR 0 1
61031: PPUSH
61032: LD_INT 50
61034: PUSH
61035: EMPTY
61036: LIST
61037: PPUSH
61038: CALL_OW 72
61042: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
61043: LD_ADDR_VAR 0 8
61047: PUSH
61048: LD_VAR 0 1
61052: PUSH
61053: LD_INT 1
61055: ARRAY
61056: PPUSH
61057: CALL_OW 255
61061: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
61062: LD_ADDR_VAR 0 10
61066: PUSH
61067: LD_INT 29
61069: PUSH
61070: LD_INT 91
61072: PUSH
61073: LD_INT 49
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: LIST
61080: ST_TO_ADDR
// if not result then
61081: LD_VAR 0 3
61085: NOT
61086: IFFALSE 61090
// exit ;
61088: GO 61550
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
61090: LD_ADDR_VAR 0 5
61094: PUSH
61095: LD_INT 81
61097: PUSH
61098: LD_VAR 0 8
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PPUSH
61107: CALL_OW 69
61111: ST_TO_ADDR
// for i in result do
61112: LD_ADDR_VAR 0 4
61116: PUSH
61117: LD_VAR 0 3
61121: PUSH
61122: FOR_IN
61123: IFFALSE 61548
// begin tag := GetTag ( i ) + 1 ;
61125: LD_ADDR_VAR 0 9
61129: PUSH
61130: LD_VAR 0 4
61134: PPUSH
61135: CALL_OW 110
61139: PUSH
61140: LD_INT 1
61142: PLUS
61143: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
61144: LD_ADDR_VAR 0 7
61148: PUSH
61149: LD_VAR 0 4
61153: PPUSH
61154: CALL_OW 250
61158: PPUSH
61159: LD_VAR 0 4
61163: PPUSH
61164: CALL_OW 251
61168: PPUSH
61169: LD_INT 4
61171: PPUSH
61172: CALL 60745 0 3
61176: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
61177: LD_VAR 0 4
61181: PPUSH
61182: CALL_OW 247
61186: PUSH
61187: LD_INT 2
61189: EQUAL
61190: PUSH
61191: LD_VAR 0 7
61195: PUSH
61196: LD_INT 2
61198: GREATER
61199: AND
61200: PUSH
61201: LD_VAR 0 4
61205: PPUSH
61206: CALL_OW 264
61210: PUSH
61211: LD_VAR 0 10
61215: IN
61216: NOT
61217: AND
61218: IFFALSE 61257
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
61220: LD_VAR 0 4
61224: PPUSH
61225: LD_VAR 0 7
61229: PUSH
61230: LD_INT 1
61232: ARRAY
61233: PUSH
61234: LD_INT 1
61236: ARRAY
61237: PPUSH
61238: LD_VAR 0 7
61242: PUSH
61243: LD_INT 1
61245: ARRAY
61246: PUSH
61247: LD_INT 2
61249: ARRAY
61250: PPUSH
61251: CALL_OW 116
61255: GO 61546
// if path > tag then
61257: LD_VAR 0 2
61261: PUSH
61262: LD_VAR 0 9
61266: GREATER
61267: IFFALSE 61475
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
61269: LD_ADDR_VAR 0 6
61273: PUSH
61274: LD_VAR 0 5
61278: PPUSH
61279: LD_INT 91
61281: PUSH
61282: LD_VAR 0 4
61286: PUSH
61287: LD_INT 8
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: LIST
61294: PPUSH
61295: CALL_OW 72
61299: ST_TO_ADDR
// if nearEnemy then
61300: LD_VAR 0 6
61304: IFFALSE 61373
// begin if GetWeapon ( i ) = ru_time_lapser then
61306: LD_VAR 0 4
61310: PPUSH
61311: CALL_OW 264
61315: PUSH
61316: LD_INT 49
61318: EQUAL
61319: IFFALSE 61347
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
61321: LD_VAR 0 4
61325: PPUSH
61326: LD_VAR 0 6
61330: PPUSH
61331: LD_VAR 0 4
61335: PPUSH
61336: CALL_OW 74
61340: PPUSH
61341: CALL_OW 112
61345: GO 61371
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
61347: LD_VAR 0 4
61351: PPUSH
61352: LD_VAR 0 6
61356: PPUSH
61357: LD_VAR 0 4
61361: PPUSH
61362: CALL_OW 74
61366: PPUSH
61367: CALL 62621 0 2
// end else
61371: GO 61473
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
61373: LD_VAR 0 4
61377: PPUSH
61378: LD_VAR 0 2
61382: PUSH
61383: LD_VAR 0 9
61387: ARRAY
61388: PUSH
61389: LD_INT 1
61391: ARRAY
61392: PPUSH
61393: LD_VAR 0 2
61397: PUSH
61398: LD_VAR 0 9
61402: ARRAY
61403: PUSH
61404: LD_INT 2
61406: ARRAY
61407: PPUSH
61408: CALL_OW 297
61412: PUSH
61413: LD_INT 6
61415: GREATER
61416: IFFALSE 61459
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
61418: LD_VAR 0 4
61422: PPUSH
61423: LD_VAR 0 2
61427: PUSH
61428: LD_VAR 0 9
61432: ARRAY
61433: PUSH
61434: LD_INT 1
61436: ARRAY
61437: PPUSH
61438: LD_VAR 0 2
61442: PUSH
61443: LD_VAR 0 9
61447: ARRAY
61448: PUSH
61449: LD_INT 2
61451: ARRAY
61452: PPUSH
61453: CALL_OW 114
61457: GO 61473
// SetTag ( i , tag ) ;
61459: LD_VAR 0 4
61463: PPUSH
61464: LD_VAR 0 9
61468: PPUSH
61469: CALL_OW 109
// end else
61473: GO 61546
// if enemy then
61475: LD_VAR 0 5
61479: IFFALSE 61546
// begin if GetWeapon ( i ) = ru_time_lapser then
61481: LD_VAR 0 4
61485: PPUSH
61486: CALL_OW 264
61490: PUSH
61491: LD_INT 49
61493: EQUAL
61494: IFFALSE 61522
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
61496: LD_VAR 0 4
61500: PPUSH
61501: LD_VAR 0 5
61505: PPUSH
61506: LD_VAR 0 4
61510: PPUSH
61511: CALL_OW 74
61515: PPUSH
61516: CALL_OW 112
61520: GO 61546
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
61522: LD_VAR 0 4
61526: PPUSH
61527: LD_VAR 0 5
61531: PPUSH
61532: LD_VAR 0 4
61536: PPUSH
61537: CALL_OW 74
61541: PPUSH
61542: CALL 62621 0 2
// end ; end ;
61546: GO 61122
61548: POP
61549: POP
// end ;
61550: LD_VAR 0 3
61554: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
61555: LD_INT 0
61557: PPUSH
61558: PPUSH
61559: PPUSH
// if not unit or IsInUnit ( unit ) then
61560: LD_VAR 0 1
61564: NOT
61565: PUSH
61566: LD_VAR 0 1
61570: PPUSH
61571: CALL_OW 310
61575: OR
61576: IFFALSE 61580
// exit ;
61578: GO 61671
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
61580: LD_ADDR_VAR 0 4
61584: PUSH
61585: LD_VAR 0 1
61589: PPUSH
61590: CALL_OW 250
61594: PPUSH
61595: LD_VAR 0 2
61599: PPUSH
61600: LD_INT 1
61602: PPUSH
61603: CALL_OW 272
61607: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
61608: LD_ADDR_VAR 0 5
61612: PUSH
61613: LD_VAR 0 1
61617: PPUSH
61618: CALL_OW 251
61622: PPUSH
61623: LD_VAR 0 2
61627: PPUSH
61628: LD_INT 1
61630: PPUSH
61631: CALL_OW 273
61635: ST_TO_ADDR
// if ValidHex ( x , y ) then
61636: LD_VAR 0 4
61640: PPUSH
61641: LD_VAR 0 5
61645: PPUSH
61646: CALL_OW 488
61650: IFFALSE 61671
// ComTurnXY ( unit , x , y ) ;
61652: LD_VAR 0 1
61656: PPUSH
61657: LD_VAR 0 4
61661: PPUSH
61662: LD_VAR 0 5
61666: PPUSH
61667: CALL_OW 118
// end ;
61671: LD_VAR 0 3
61675: RET
// export function SeeUnits ( side , units ) ; var i ; begin
61676: LD_INT 0
61678: PPUSH
61679: PPUSH
// result := false ;
61680: LD_ADDR_VAR 0 3
61684: PUSH
61685: LD_INT 0
61687: ST_TO_ADDR
// if not units then
61688: LD_VAR 0 2
61692: NOT
61693: IFFALSE 61697
// exit ;
61695: GO 61742
// for i in units do
61697: LD_ADDR_VAR 0 4
61701: PUSH
61702: LD_VAR 0 2
61706: PUSH
61707: FOR_IN
61708: IFFALSE 61740
// if See ( side , i ) then
61710: LD_VAR 0 1
61714: PPUSH
61715: LD_VAR 0 4
61719: PPUSH
61720: CALL_OW 292
61724: IFFALSE 61738
// begin result := true ;
61726: LD_ADDR_VAR 0 3
61730: PUSH
61731: LD_INT 1
61733: ST_TO_ADDR
// exit ;
61734: POP
61735: POP
61736: GO 61742
// end ;
61738: GO 61707
61740: POP
61741: POP
// end ;
61742: LD_VAR 0 3
61746: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
61747: LD_INT 0
61749: PPUSH
61750: PPUSH
61751: PPUSH
61752: PPUSH
// if not unit or not points then
61753: LD_VAR 0 1
61757: NOT
61758: PUSH
61759: LD_VAR 0 2
61763: NOT
61764: OR
61765: IFFALSE 61769
// exit ;
61767: GO 61859
// dist := 99999 ;
61769: LD_ADDR_VAR 0 5
61773: PUSH
61774: LD_INT 99999
61776: ST_TO_ADDR
// for i in points do
61777: LD_ADDR_VAR 0 4
61781: PUSH
61782: LD_VAR 0 2
61786: PUSH
61787: FOR_IN
61788: IFFALSE 61857
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
61790: LD_ADDR_VAR 0 6
61794: PUSH
61795: LD_VAR 0 1
61799: PPUSH
61800: LD_VAR 0 4
61804: PUSH
61805: LD_INT 1
61807: ARRAY
61808: PPUSH
61809: LD_VAR 0 4
61813: PUSH
61814: LD_INT 2
61816: ARRAY
61817: PPUSH
61818: CALL_OW 297
61822: ST_TO_ADDR
// if tmpDist < dist then
61823: LD_VAR 0 6
61827: PUSH
61828: LD_VAR 0 5
61832: LESS
61833: IFFALSE 61855
// begin result := i ;
61835: LD_ADDR_VAR 0 3
61839: PUSH
61840: LD_VAR 0 4
61844: ST_TO_ADDR
// dist := tmpDist ;
61845: LD_ADDR_VAR 0 5
61849: PUSH
61850: LD_VAR 0 6
61854: ST_TO_ADDR
// end ; end ;
61855: GO 61787
61857: POP
61858: POP
// end ;
61859: LD_VAR 0 3
61863: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
61864: LD_INT 0
61866: PPUSH
// uc_side := side ;
61867: LD_ADDR_OWVAR 20
61871: PUSH
61872: LD_VAR 0 1
61876: ST_TO_ADDR
// uc_nation := 3 ;
61877: LD_ADDR_OWVAR 21
61881: PUSH
61882: LD_INT 3
61884: ST_TO_ADDR
// vc_chassis := 25 ;
61885: LD_ADDR_OWVAR 37
61889: PUSH
61890: LD_INT 25
61892: ST_TO_ADDR
// vc_engine := engine_siberite ;
61893: LD_ADDR_OWVAR 39
61897: PUSH
61898: LD_INT 3
61900: ST_TO_ADDR
// vc_control := control_computer ;
61901: LD_ADDR_OWVAR 38
61905: PUSH
61906: LD_INT 3
61908: ST_TO_ADDR
// vc_weapon := 59 ;
61909: LD_ADDR_OWVAR 40
61913: PUSH
61914: LD_INT 59
61916: ST_TO_ADDR
// result := CreateVehicle ;
61917: LD_ADDR_VAR 0 5
61921: PUSH
61922: CALL_OW 45
61926: ST_TO_ADDR
// SetDir ( result , d ) ;
61927: LD_VAR 0 5
61931: PPUSH
61932: LD_VAR 0 4
61936: PPUSH
61937: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
61941: LD_VAR 0 5
61945: PPUSH
61946: LD_VAR 0 2
61950: PPUSH
61951: LD_VAR 0 3
61955: PPUSH
61956: LD_INT 0
61958: PPUSH
61959: CALL_OW 48
// end ;
61963: LD_VAR 0 5
61967: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
61968: LD_INT 0
61970: PPUSH
61971: PPUSH
61972: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
61973: LD_ADDR_VAR 0 2
61977: PUSH
61978: LD_INT 0
61980: PUSH
61981: LD_INT 0
61983: PUSH
61984: LD_INT 0
61986: PUSH
61987: LD_INT 0
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
61996: LD_VAR 0 1
62000: NOT
62001: PUSH
62002: LD_VAR 0 1
62006: PPUSH
62007: CALL_OW 264
62011: PUSH
62012: LD_INT 12
62014: PUSH
62015: LD_INT 51
62017: PUSH
62018: LD_INT 32
62020: PUSH
62021: LD_INT 89
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: IN
62030: NOT
62031: OR
62032: IFFALSE 62036
// exit ;
62034: GO 62134
// for i := 1 to 3 do
62036: LD_ADDR_VAR 0 3
62040: PUSH
62041: DOUBLE
62042: LD_INT 1
62044: DEC
62045: ST_TO_ADDR
62046: LD_INT 3
62048: PUSH
62049: FOR_TO
62050: IFFALSE 62132
// begin tmp := GetCargo ( cargo , i ) ;
62052: LD_ADDR_VAR 0 4
62056: PUSH
62057: LD_VAR 0 1
62061: PPUSH
62062: LD_VAR 0 3
62066: PPUSH
62067: CALL_OW 289
62071: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
62072: LD_ADDR_VAR 0 2
62076: PUSH
62077: LD_VAR 0 2
62081: PPUSH
62082: LD_VAR 0 3
62086: PPUSH
62087: LD_VAR 0 4
62091: PPUSH
62092: CALL_OW 1
62096: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
62097: LD_ADDR_VAR 0 2
62101: PUSH
62102: LD_VAR 0 2
62106: PPUSH
62107: LD_INT 4
62109: PPUSH
62110: LD_VAR 0 2
62114: PUSH
62115: LD_INT 4
62117: ARRAY
62118: PUSH
62119: LD_VAR 0 4
62123: PLUS
62124: PPUSH
62125: CALL_OW 1
62129: ST_TO_ADDR
// end ;
62130: GO 62049
62132: POP
62133: POP
// end ;
62134: LD_VAR 0 2
62138: RET
// export function Length ( array ) ; begin
62139: LD_INT 0
62141: PPUSH
// result := array + 0 ;
62142: LD_ADDR_VAR 0 2
62146: PUSH
62147: LD_VAR 0 1
62151: PUSH
62152: LD_INT 0
62154: PLUS
62155: ST_TO_ADDR
// end ;
62156: LD_VAR 0 2
62160: RET
// export function PrepareArray ( array ) ; begin
62161: LD_INT 0
62163: PPUSH
// result := array diff 0 ;
62164: LD_ADDR_VAR 0 2
62168: PUSH
62169: LD_VAR 0 1
62173: PUSH
62174: LD_INT 0
62176: DIFF
62177: ST_TO_ADDR
// if not result [ 1 ] then
62178: LD_VAR 0 2
62182: PUSH
62183: LD_INT 1
62185: ARRAY
62186: NOT
62187: IFFALSE 62207
// result := Delete ( result , 1 ) ;
62189: LD_ADDR_VAR 0 2
62193: PUSH
62194: LD_VAR 0 2
62198: PPUSH
62199: LD_INT 1
62201: PPUSH
62202: CALL_OW 3
62206: ST_TO_ADDR
// end ;
62207: LD_VAR 0 2
62211: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
62212: LD_INT 0
62214: PPUSH
62215: PPUSH
62216: PPUSH
62217: PPUSH
// sibRocketRange := 25 ;
62218: LD_ADDR_VAR 0 6
62222: PUSH
62223: LD_INT 25
62225: ST_TO_ADDR
// result := false ;
62226: LD_ADDR_VAR 0 4
62230: PUSH
62231: LD_INT 0
62233: ST_TO_ADDR
// for i := 0 to 5 do
62234: LD_ADDR_VAR 0 5
62238: PUSH
62239: DOUBLE
62240: LD_INT 0
62242: DEC
62243: ST_TO_ADDR
62244: LD_INT 5
62246: PUSH
62247: FOR_TO
62248: IFFALSE 62315
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
62250: LD_VAR 0 1
62254: PPUSH
62255: LD_VAR 0 5
62259: PPUSH
62260: LD_VAR 0 6
62264: PPUSH
62265: CALL_OW 272
62269: PPUSH
62270: LD_VAR 0 2
62274: PPUSH
62275: LD_VAR 0 5
62279: PPUSH
62280: LD_VAR 0 6
62284: PPUSH
62285: CALL_OW 273
62289: PPUSH
62290: LD_VAR 0 3
62294: PPUSH
62295: CALL_OW 309
62299: IFFALSE 62313
// begin result := true ;
62301: LD_ADDR_VAR 0 4
62305: PUSH
62306: LD_INT 1
62308: ST_TO_ADDR
// exit ;
62309: POP
62310: POP
62311: GO 62317
// end ;
62313: GO 62247
62315: POP
62316: POP
// end ;
62317: LD_VAR 0 4
62321: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
62322: LD_INT 0
62324: PPUSH
62325: PPUSH
62326: PPUSH
// if btype = b_depot then
62327: LD_VAR 0 2
62331: PUSH
62332: LD_INT 0
62334: EQUAL
62335: IFFALSE 62347
// begin result := true ;
62337: LD_ADDR_VAR 0 3
62341: PUSH
62342: LD_INT 1
62344: ST_TO_ADDR
// exit ;
62345: GO 62463
// end ; pom := GetBase ( depot ) ;
62347: LD_ADDR_VAR 0 4
62351: PUSH
62352: LD_VAR 0 1
62356: PPUSH
62357: CALL_OW 274
62361: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
62362: LD_ADDR_VAR 0 5
62366: PUSH
62367: LD_VAR 0 2
62371: PPUSH
62372: LD_VAR 0 1
62376: PPUSH
62377: CALL_OW 248
62381: PPUSH
62382: CALL_OW 450
62386: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
62387: LD_ADDR_VAR 0 3
62391: PUSH
62392: LD_VAR 0 4
62396: PPUSH
62397: LD_INT 1
62399: PPUSH
62400: CALL_OW 275
62404: PUSH
62405: LD_VAR 0 5
62409: PUSH
62410: LD_INT 1
62412: ARRAY
62413: GREATEREQUAL
62414: PUSH
62415: LD_VAR 0 4
62419: PPUSH
62420: LD_INT 2
62422: PPUSH
62423: CALL_OW 275
62427: PUSH
62428: LD_VAR 0 5
62432: PUSH
62433: LD_INT 2
62435: ARRAY
62436: GREATEREQUAL
62437: AND
62438: PUSH
62439: LD_VAR 0 4
62443: PPUSH
62444: LD_INT 3
62446: PPUSH
62447: CALL_OW 275
62451: PUSH
62452: LD_VAR 0 5
62456: PUSH
62457: LD_INT 3
62459: ARRAY
62460: GREATEREQUAL
62461: AND
62462: ST_TO_ADDR
// end ;
62463: LD_VAR 0 3
62467: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
62468: LD_INT 0
62470: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
62471: LD_VAR 0 1
62475: PPUSH
62476: LD_VAR 0 2
62480: PPUSH
62481: LD_INT 0
62483: PPUSH
62484: LD_INT 0
62486: PPUSH
62487: LD_INT 1
62489: PPUSH
62490: LD_INT 0
62492: PPUSH
62493: CALL_OW 587
// end ;
62497: LD_VAR 0 3
62501: RET
// export function CenterOnNow ( unit ) ; begin
62502: LD_INT 0
62504: PPUSH
// result := IsInUnit ( unit ) ;
62505: LD_ADDR_VAR 0 2
62509: PUSH
62510: LD_VAR 0 1
62514: PPUSH
62515: CALL_OW 310
62519: ST_TO_ADDR
// if not result then
62520: LD_VAR 0 2
62524: NOT
62525: IFFALSE 62537
// result := unit ;
62527: LD_ADDR_VAR 0 2
62531: PUSH
62532: LD_VAR 0 1
62536: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
62537: LD_VAR 0 1
62541: PPUSH
62542: CALL_OW 87
// end ;
62546: LD_VAR 0 2
62550: RET
// export function ComMoveHex ( unit , hex ) ; begin
62551: LD_INT 0
62553: PPUSH
// if not hex then
62554: LD_VAR 0 2
62558: NOT
62559: IFFALSE 62563
// exit ;
62561: GO 62616
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
62563: LD_VAR 0 2
62567: PUSH
62568: LD_INT 1
62570: ARRAY
62571: PPUSH
62572: LD_VAR 0 2
62576: PUSH
62577: LD_INT 2
62579: ARRAY
62580: PPUSH
62581: CALL_OW 428
62585: IFFALSE 62589
// exit ;
62587: GO 62616
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
62589: LD_VAR 0 1
62593: PPUSH
62594: LD_VAR 0 2
62598: PUSH
62599: LD_INT 1
62601: ARRAY
62602: PPUSH
62603: LD_VAR 0 2
62607: PUSH
62608: LD_INT 2
62610: ARRAY
62611: PPUSH
62612: CALL_OW 111
// end ;
62616: LD_VAR 0 3
62620: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
62621: LD_INT 0
62623: PPUSH
62624: PPUSH
62625: PPUSH
// if not unit or not enemy then
62626: LD_VAR 0 1
62630: NOT
62631: PUSH
62632: LD_VAR 0 2
62636: NOT
62637: OR
62638: IFFALSE 62642
// exit ;
62640: GO 62766
// x := GetX ( enemy ) ;
62642: LD_ADDR_VAR 0 4
62646: PUSH
62647: LD_VAR 0 2
62651: PPUSH
62652: CALL_OW 250
62656: ST_TO_ADDR
// y := GetY ( enemy ) ;
62657: LD_ADDR_VAR 0 5
62661: PUSH
62662: LD_VAR 0 2
62666: PPUSH
62667: CALL_OW 251
62671: ST_TO_ADDR
// if ValidHex ( x , y ) then
62672: LD_VAR 0 4
62676: PPUSH
62677: LD_VAR 0 5
62681: PPUSH
62682: CALL_OW 488
62686: IFFALSE 62766
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
62688: LD_VAR 0 2
62692: PPUSH
62693: CALL_OW 247
62697: PUSH
62698: LD_INT 3
62700: PUSH
62701: LD_INT 2
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: IN
62708: PUSH
62709: LD_VAR 0 1
62713: PPUSH
62714: CALL_OW 255
62718: PPUSH
62719: LD_VAR 0 2
62723: PPUSH
62724: CALL_OW 292
62728: OR
62729: IFFALSE 62747
// ComAttackUnit ( unit , enemy ) else
62731: LD_VAR 0 1
62735: PPUSH
62736: LD_VAR 0 2
62740: PPUSH
62741: CALL_OW 115
62745: GO 62766
// ComAgressiveMove ( unit , x , y ) ;
62747: LD_VAR 0 1
62751: PPUSH
62752: LD_VAR 0 4
62756: PPUSH
62757: LD_VAR 0 5
62761: PPUSH
62762: CALL_OW 114
// end ;
62766: LD_VAR 0 3
62770: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
62771: LD_INT 0
62773: PPUSH
62774: PPUSH
62775: PPUSH
// list := AreaToList ( area , 0 ) ;
62776: LD_ADDR_VAR 0 5
62780: PUSH
62781: LD_VAR 0 1
62785: PPUSH
62786: LD_INT 0
62788: PPUSH
62789: CALL_OW 517
62793: ST_TO_ADDR
// if not list then
62794: LD_VAR 0 5
62798: NOT
62799: IFFALSE 62803
// exit ;
62801: GO 62933
// if all then
62803: LD_VAR 0 2
62807: IFFALSE 62895
// begin for i := 1 to list [ 1 ] do
62809: LD_ADDR_VAR 0 4
62813: PUSH
62814: DOUBLE
62815: LD_INT 1
62817: DEC
62818: ST_TO_ADDR
62819: LD_VAR 0 5
62823: PUSH
62824: LD_INT 1
62826: ARRAY
62827: PUSH
62828: FOR_TO
62829: IFFALSE 62891
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
62831: LD_ADDR_VAR 0 3
62835: PUSH
62836: LD_VAR 0 3
62840: PPUSH
62841: LD_VAR 0 3
62845: PUSH
62846: LD_INT 1
62848: PLUS
62849: PPUSH
62850: LD_VAR 0 5
62854: PUSH
62855: LD_INT 1
62857: ARRAY
62858: PUSH
62859: LD_VAR 0 4
62863: ARRAY
62864: PUSH
62865: LD_VAR 0 5
62869: PUSH
62870: LD_INT 2
62872: ARRAY
62873: PUSH
62874: LD_VAR 0 4
62878: ARRAY
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PPUSH
62884: CALL_OW 1
62888: ST_TO_ADDR
62889: GO 62828
62891: POP
62892: POP
// exit ;
62893: GO 62933
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
62895: LD_ADDR_VAR 0 3
62899: PUSH
62900: LD_VAR 0 5
62904: PUSH
62905: LD_INT 1
62907: ARRAY
62908: PUSH
62909: LD_INT 1
62911: ARRAY
62912: PUSH
62913: LD_VAR 0 5
62917: PUSH
62918: LD_INT 2
62920: ARRAY
62921: PUSH
62922: LD_INT 1
62924: ARRAY
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: EMPTY
62931: LIST
62932: ST_TO_ADDR
// end ;
62933: LD_VAR 0 3
62937: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
62938: LD_INT 0
62940: PPUSH
62941: PPUSH
// list := AreaToList ( area , 0 ) ;
62942: LD_ADDR_VAR 0 4
62946: PUSH
62947: LD_VAR 0 1
62951: PPUSH
62952: LD_INT 0
62954: PPUSH
62955: CALL_OW 517
62959: ST_TO_ADDR
// if not list then
62960: LD_VAR 0 4
62964: NOT
62965: IFFALSE 62969
// exit ;
62967: GO 63010
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
62969: LD_ADDR_VAR 0 3
62973: PUSH
62974: LD_VAR 0 4
62978: PUSH
62979: LD_INT 1
62981: ARRAY
62982: PUSH
62983: LD_INT 1
62985: ARRAY
62986: PUSH
62987: LD_VAR 0 4
62991: PUSH
62992: LD_INT 2
62994: ARRAY
62995: PUSH
62996: LD_INT 1
62998: ARRAY
62999: PUSH
63000: LD_VAR 0 2
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: LIST
63009: ST_TO_ADDR
// end ;
63010: LD_VAR 0 3
63014: RET
// export function First ( array ) ; begin
63015: LD_INT 0
63017: PPUSH
// if not array then
63018: LD_VAR 0 1
63022: NOT
63023: IFFALSE 63027
// exit ;
63025: GO 63041
// result := array [ 1 ] ;
63027: LD_ADDR_VAR 0 2
63031: PUSH
63032: LD_VAR 0 1
63036: PUSH
63037: LD_INT 1
63039: ARRAY
63040: ST_TO_ADDR
// end ;
63041: LD_VAR 0 2
63045: RET
// export function Last ( array ) ; begin
63046: LD_INT 0
63048: PPUSH
// if not array then
63049: LD_VAR 0 1
63053: NOT
63054: IFFALSE 63058
// exit ;
63056: GO 63074
// result := array [ array ] ;
63058: LD_ADDR_VAR 0 2
63062: PUSH
63063: LD_VAR 0 1
63067: PUSH
63068: LD_VAR 0 1
63072: ARRAY
63073: ST_TO_ADDR
// end ;
63074: LD_VAR 0 2
63078: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
63079: LD_INT 0
63081: PPUSH
63082: PPUSH
// result := [ ] ;
63083: LD_ADDR_VAR 0 5
63087: PUSH
63088: EMPTY
63089: ST_TO_ADDR
// if not array then
63090: LD_VAR 0 1
63094: NOT
63095: IFFALSE 63099
// exit ;
63097: GO 63211
// for i := 1 to array do
63099: LD_ADDR_VAR 0 6
63103: PUSH
63104: DOUBLE
63105: LD_INT 1
63107: DEC
63108: ST_TO_ADDR
63109: LD_VAR 0 1
63113: PUSH
63114: FOR_TO
63115: IFFALSE 63209
// if array [ i ] [ index ] = value then
63117: LD_VAR 0 1
63121: PUSH
63122: LD_VAR 0 6
63126: ARRAY
63127: PUSH
63128: LD_VAR 0 2
63132: ARRAY
63133: PUSH
63134: LD_VAR 0 3
63138: EQUAL
63139: IFFALSE 63207
// begin if indexColumn then
63141: LD_VAR 0 4
63145: IFFALSE 63181
// result := Join ( result , array [ i ] [ indexColumn ] ) else
63147: LD_ADDR_VAR 0 5
63151: PUSH
63152: LD_VAR 0 5
63156: PPUSH
63157: LD_VAR 0 1
63161: PUSH
63162: LD_VAR 0 6
63166: ARRAY
63167: PUSH
63168: LD_VAR 0 4
63172: ARRAY
63173: PPUSH
63174: CALL 58399 0 2
63178: ST_TO_ADDR
63179: GO 63207
// result := Join ( result , array [ i ] ) ;
63181: LD_ADDR_VAR 0 5
63185: PUSH
63186: LD_VAR 0 5
63190: PPUSH
63191: LD_VAR 0 1
63195: PUSH
63196: LD_VAR 0 6
63200: ARRAY
63201: PPUSH
63202: CALL 58399 0 2
63206: ST_TO_ADDR
// end ;
63207: GO 63114
63209: POP
63210: POP
// end ;
63211: LD_VAR 0 5
63215: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
63216: LD_INT 0
63218: PPUSH
// if not vehicles or not parkingPoint then
63219: LD_VAR 0 1
63223: NOT
63224: PUSH
63225: LD_VAR 0 2
63229: NOT
63230: OR
63231: IFFALSE 63235
// exit ;
63233: GO 63333
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
63235: LD_ADDR_VAR 0 1
63239: PUSH
63240: LD_VAR 0 1
63244: PPUSH
63245: LD_INT 50
63247: PUSH
63248: EMPTY
63249: LIST
63250: PUSH
63251: LD_INT 3
63253: PUSH
63254: LD_INT 92
63256: PUSH
63257: LD_VAR 0 2
63261: PUSH
63262: LD_INT 1
63264: ARRAY
63265: PUSH
63266: LD_VAR 0 2
63270: PUSH
63271: LD_INT 2
63273: ARRAY
63274: PUSH
63275: LD_INT 8
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: LIST
63282: LIST
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PPUSH
63292: CALL_OW 72
63296: ST_TO_ADDR
// if not vehicles then
63297: LD_VAR 0 1
63301: NOT
63302: IFFALSE 63306
// exit ;
63304: GO 63333
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
63306: LD_VAR 0 1
63310: PPUSH
63311: LD_VAR 0 2
63315: PUSH
63316: LD_INT 1
63318: ARRAY
63319: PPUSH
63320: LD_VAR 0 2
63324: PUSH
63325: LD_INT 2
63327: ARRAY
63328: PPUSH
63329: CALL_OW 111
// end ;
63333: LD_VAR 0 3
63337: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
63338: LD_INT 0
63340: PPUSH
63341: PPUSH
63342: PPUSH
// if not side or not area then
63343: LD_VAR 0 1
63347: NOT
63348: PUSH
63349: LD_VAR 0 2
63353: NOT
63354: OR
63355: IFFALSE 63359
// exit ;
63357: GO 63478
// tmp := AreaToList ( area , 0 ) ;
63359: LD_ADDR_VAR 0 5
63363: PUSH
63364: LD_VAR 0 2
63368: PPUSH
63369: LD_INT 0
63371: PPUSH
63372: CALL_OW 517
63376: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
63377: LD_ADDR_VAR 0 4
63381: PUSH
63382: DOUBLE
63383: LD_INT 1
63385: DEC
63386: ST_TO_ADDR
63387: LD_VAR 0 5
63391: PUSH
63392: LD_INT 1
63394: ARRAY
63395: PUSH
63396: FOR_TO
63397: IFFALSE 63476
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
63399: LD_VAR 0 5
63403: PUSH
63404: LD_INT 1
63406: ARRAY
63407: PUSH
63408: LD_VAR 0 4
63412: ARRAY
63413: PPUSH
63414: LD_VAR 0 5
63418: PUSH
63419: LD_INT 2
63421: ARRAY
63422: PUSH
63423: LD_VAR 0 4
63427: ARRAY
63428: PPUSH
63429: CALL_OW 351
63433: IFFALSE 63474
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
63435: LD_VAR 0 5
63439: PUSH
63440: LD_INT 1
63442: ARRAY
63443: PUSH
63444: LD_VAR 0 4
63448: ARRAY
63449: PPUSH
63450: LD_VAR 0 5
63454: PUSH
63455: LD_INT 2
63457: ARRAY
63458: PUSH
63459: LD_VAR 0 4
63463: ARRAY
63464: PPUSH
63465: LD_VAR 0 1
63469: PPUSH
63470: CALL_OW 244
// end ;
63474: GO 63396
63476: POP
63477: POP
// end ; end_of_file end_of_file
63478: LD_VAR 0 3
63482: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
63483: LD_VAR 0 1
63487: PPUSH
63488: LD_VAR 0 2
63492: PPUSH
63493: LD_VAR 0 3
63497: PPUSH
63498: LD_VAR 0 4
63502: PPUSH
63503: LD_VAR 0 5
63507: PPUSH
63508: LD_VAR 0 6
63512: PPUSH
63513: CALL 63714 0 6
// end ;
63517: PPOPN 6
63519: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
63520: LD_INT 0
63522: PPUSH
// begin if not units then
63523: LD_VAR 0 1
63527: NOT
63528: IFFALSE 63532
// exit ;
63530: GO 63532
// end ;
63532: PPOPN 7
63534: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
63535: CALL 63601 0 0
// end ; end_of_file
63539: PPOPN 1
63541: END
// export globalGameSaveCounter ; every 0 0$1 do
63542: GO 63544
63544: DISABLE
// begin enable ;
63545: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
63546: LD_STRING updateTimer(
63548: PUSH
63549: LD_OWVAR 1
63553: STR
63554: PUSH
63555: LD_STRING );
63557: STR
63558: PPUSH
63559: CALL_OW 559
// end ;
63563: END
// every 0 0$1 do
63564: GO 63566
63566: DISABLE
// begin globalGameSaveCounter := 0 ;
63567: LD_ADDR_EXP 46
63571: PUSH
63572: LD_INT 0
63574: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
63575: LD_STRING setGameSaveCounter(0)
63577: PPUSH
63578: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
63582: LD_STRING initStreamRollete();
63584: PPUSH
63585: CALL_OW 559
// InitStreamMode ;
63589: CALL 64932 0 0
// DefineStreamItems ( false ) ;
63593: LD_INT 0
63595: PPUSH
63596: CALL 65396 0 1
// end ;
63600: END
// export function SOS_MapStart ( ) ; begin
63601: LD_INT 0
63603: PPUSH
// if streamModeActive then
63604: LD_EXP 47
63608: IFFALSE 63617
// DefineStreamItems ( true ) ;
63610: LD_INT 1
63612: PPUSH
63613: CALL 65396 0 1
// UpdateLuaVariables ( ) ;
63617: CALL 63634 0 0
// UpdateFactoryWaypoints ( ) ;
63621: CALL 78398 0 0
// UpdateWarehouseGatheringPoints ( ) ;
63625: CALL 78650 0 0
// end ;
63629: LD_VAR 0 1
63633: RET
// function UpdateLuaVariables ( ) ; begin
63634: LD_INT 0
63636: PPUSH
// if globalGameSaveCounter then
63637: LD_EXP 46
63641: IFFALSE 63675
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
63643: LD_ADDR_EXP 46
63647: PUSH
63648: LD_EXP 46
63652: PPUSH
63653: CALL 59760 0 1
63657: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
63658: LD_STRING setGameSaveCounter(
63660: PUSH
63661: LD_EXP 46
63665: STR
63666: PUSH
63667: LD_STRING )
63669: STR
63670: PPUSH
63671: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
63675: LD_STRING setGameDifficulty(
63677: PUSH
63678: LD_OWVAR 67
63682: STR
63683: PUSH
63684: LD_STRING )
63686: STR
63687: PPUSH
63688: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
63692: LD_STRING displayDifficulty(
63694: PUSH
63695: LD_OWVAR 67
63699: STR
63700: PUSH
63701: LD_STRING )
63703: STR
63704: PPUSH
63705: CALL_OW 559
// end ;
63709: LD_VAR 0 1
63713: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63714: LD_INT 0
63716: PPUSH
// if p2 = stream_mode then
63717: LD_VAR 0 2
63721: PUSH
63722: LD_INT 100
63724: EQUAL
63725: IFFALSE 64728
// begin if not StreamModeActive then
63727: LD_EXP 47
63731: NOT
63732: IFFALSE 63742
// StreamModeActive := true ;
63734: LD_ADDR_EXP 47
63738: PUSH
63739: LD_INT 1
63741: ST_TO_ADDR
// if p3 = 0 then
63742: LD_VAR 0 3
63746: PUSH
63747: LD_INT 0
63749: EQUAL
63750: IFFALSE 63756
// InitStreamMode ;
63752: CALL 64932 0 0
// if p3 = 1 then
63756: LD_VAR 0 3
63760: PUSH
63761: LD_INT 1
63763: EQUAL
63764: IFFALSE 63774
// sRocket := true ;
63766: LD_ADDR_EXP 52
63770: PUSH
63771: LD_INT 1
63773: ST_TO_ADDR
// if p3 = 2 then
63774: LD_VAR 0 3
63778: PUSH
63779: LD_INT 2
63781: EQUAL
63782: IFFALSE 63792
// sSpeed := true ;
63784: LD_ADDR_EXP 51
63788: PUSH
63789: LD_INT 1
63791: ST_TO_ADDR
// if p3 = 3 then
63792: LD_VAR 0 3
63796: PUSH
63797: LD_INT 3
63799: EQUAL
63800: IFFALSE 63810
// sEngine := true ;
63802: LD_ADDR_EXP 53
63806: PUSH
63807: LD_INT 1
63809: ST_TO_ADDR
// if p3 = 4 then
63810: LD_VAR 0 3
63814: PUSH
63815: LD_INT 4
63817: EQUAL
63818: IFFALSE 63828
// sSpec := true ;
63820: LD_ADDR_EXP 50
63824: PUSH
63825: LD_INT 1
63827: ST_TO_ADDR
// if p3 = 5 then
63828: LD_VAR 0 3
63832: PUSH
63833: LD_INT 5
63835: EQUAL
63836: IFFALSE 63846
// sLevel := true ;
63838: LD_ADDR_EXP 54
63842: PUSH
63843: LD_INT 1
63845: ST_TO_ADDR
// if p3 = 6 then
63846: LD_VAR 0 3
63850: PUSH
63851: LD_INT 6
63853: EQUAL
63854: IFFALSE 63864
// sArmoury := true ;
63856: LD_ADDR_EXP 55
63860: PUSH
63861: LD_INT 1
63863: ST_TO_ADDR
// if p3 = 7 then
63864: LD_VAR 0 3
63868: PUSH
63869: LD_INT 7
63871: EQUAL
63872: IFFALSE 63882
// sRadar := true ;
63874: LD_ADDR_EXP 56
63878: PUSH
63879: LD_INT 1
63881: ST_TO_ADDR
// if p3 = 8 then
63882: LD_VAR 0 3
63886: PUSH
63887: LD_INT 8
63889: EQUAL
63890: IFFALSE 63900
// sBunker := true ;
63892: LD_ADDR_EXP 57
63896: PUSH
63897: LD_INT 1
63899: ST_TO_ADDR
// if p3 = 9 then
63900: LD_VAR 0 3
63904: PUSH
63905: LD_INT 9
63907: EQUAL
63908: IFFALSE 63918
// sHack := true ;
63910: LD_ADDR_EXP 58
63914: PUSH
63915: LD_INT 1
63917: ST_TO_ADDR
// if p3 = 10 then
63918: LD_VAR 0 3
63922: PUSH
63923: LD_INT 10
63925: EQUAL
63926: IFFALSE 63936
// sFire := true ;
63928: LD_ADDR_EXP 59
63932: PUSH
63933: LD_INT 1
63935: ST_TO_ADDR
// if p3 = 11 then
63936: LD_VAR 0 3
63940: PUSH
63941: LD_INT 11
63943: EQUAL
63944: IFFALSE 63954
// sRefresh := true ;
63946: LD_ADDR_EXP 60
63950: PUSH
63951: LD_INT 1
63953: ST_TO_ADDR
// if p3 = 12 then
63954: LD_VAR 0 3
63958: PUSH
63959: LD_INT 12
63961: EQUAL
63962: IFFALSE 63972
// sExp := true ;
63964: LD_ADDR_EXP 61
63968: PUSH
63969: LD_INT 1
63971: ST_TO_ADDR
// if p3 = 13 then
63972: LD_VAR 0 3
63976: PUSH
63977: LD_INT 13
63979: EQUAL
63980: IFFALSE 63990
// sDepot := true ;
63982: LD_ADDR_EXP 62
63986: PUSH
63987: LD_INT 1
63989: ST_TO_ADDR
// if p3 = 14 then
63990: LD_VAR 0 3
63994: PUSH
63995: LD_INT 14
63997: EQUAL
63998: IFFALSE 64008
// sFlag := true ;
64000: LD_ADDR_EXP 63
64004: PUSH
64005: LD_INT 1
64007: ST_TO_ADDR
// if p3 = 15 then
64008: LD_VAR 0 3
64012: PUSH
64013: LD_INT 15
64015: EQUAL
64016: IFFALSE 64026
// sKamikadze := true ;
64018: LD_ADDR_EXP 71
64022: PUSH
64023: LD_INT 1
64025: ST_TO_ADDR
// if p3 = 16 then
64026: LD_VAR 0 3
64030: PUSH
64031: LD_INT 16
64033: EQUAL
64034: IFFALSE 64044
// sTroll := true ;
64036: LD_ADDR_EXP 72
64040: PUSH
64041: LD_INT 1
64043: ST_TO_ADDR
// if p3 = 17 then
64044: LD_VAR 0 3
64048: PUSH
64049: LD_INT 17
64051: EQUAL
64052: IFFALSE 64062
// sSlow := true ;
64054: LD_ADDR_EXP 73
64058: PUSH
64059: LD_INT 1
64061: ST_TO_ADDR
// if p3 = 18 then
64062: LD_VAR 0 3
64066: PUSH
64067: LD_INT 18
64069: EQUAL
64070: IFFALSE 64080
// sLack := true ;
64072: LD_ADDR_EXP 74
64076: PUSH
64077: LD_INT 1
64079: ST_TO_ADDR
// if p3 = 19 then
64080: LD_VAR 0 3
64084: PUSH
64085: LD_INT 19
64087: EQUAL
64088: IFFALSE 64098
// sTank := true ;
64090: LD_ADDR_EXP 76
64094: PUSH
64095: LD_INT 1
64097: ST_TO_ADDR
// if p3 = 20 then
64098: LD_VAR 0 3
64102: PUSH
64103: LD_INT 20
64105: EQUAL
64106: IFFALSE 64116
// sRemote := true ;
64108: LD_ADDR_EXP 77
64112: PUSH
64113: LD_INT 1
64115: ST_TO_ADDR
// if p3 = 21 then
64116: LD_VAR 0 3
64120: PUSH
64121: LD_INT 21
64123: EQUAL
64124: IFFALSE 64134
// sPowell := true ;
64126: LD_ADDR_EXP 78
64130: PUSH
64131: LD_INT 1
64133: ST_TO_ADDR
// if p3 = 22 then
64134: LD_VAR 0 3
64138: PUSH
64139: LD_INT 22
64141: EQUAL
64142: IFFALSE 64152
// sTeleport := true ;
64144: LD_ADDR_EXP 81
64148: PUSH
64149: LD_INT 1
64151: ST_TO_ADDR
// if p3 = 23 then
64152: LD_VAR 0 3
64156: PUSH
64157: LD_INT 23
64159: EQUAL
64160: IFFALSE 64170
// sOilTower := true ;
64162: LD_ADDR_EXP 83
64166: PUSH
64167: LD_INT 1
64169: ST_TO_ADDR
// if p3 = 24 then
64170: LD_VAR 0 3
64174: PUSH
64175: LD_INT 24
64177: EQUAL
64178: IFFALSE 64188
// sShovel := true ;
64180: LD_ADDR_EXP 84
64184: PUSH
64185: LD_INT 1
64187: ST_TO_ADDR
// if p3 = 25 then
64188: LD_VAR 0 3
64192: PUSH
64193: LD_INT 25
64195: EQUAL
64196: IFFALSE 64206
// sSheik := true ;
64198: LD_ADDR_EXP 85
64202: PUSH
64203: LD_INT 1
64205: ST_TO_ADDR
// if p3 = 26 then
64206: LD_VAR 0 3
64210: PUSH
64211: LD_INT 26
64213: EQUAL
64214: IFFALSE 64224
// sEarthquake := true ;
64216: LD_ADDR_EXP 87
64220: PUSH
64221: LD_INT 1
64223: ST_TO_ADDR
// if p3 = 27 then
64224: LD_VAR 0 3
64228: PUSH
64229: LD_INT 27
64231: EQUAL
64232: IFFALSE 64242
// sAI := true ;
64234: LD_ADDR_EXP 88
64238: PUSH
64239: LD_INT 1
64241: ST_TO_ADDR
// if p3 = 28 then
64242: LD_VAR 0 3
64246: PUSH
64247: LD_INT 28
64249: EQUAL
64250: IFFALSE 64260
// sCargo := true ;
64252: LD_ADDR_EXP 91
64256: PUSH
64257: LD_INT 1
64259: ST_TO_ADDR
// if p3 = 29 then
64260: LD_VAR 0 3
64264: PUSH
64265: LD_INT 29
64267: EQUAL
64268: IFFALSE 64278
// sDLaser := true ;
64270: LD_ADDR_EXP 92
64274: PUSH
64275: LD_INT 1
64277: ST_TO_ADDR
// if p3 = 30 then
64278: LD_VAR 0 3
64282: PUSH
64283: LD_INT 30
64285: EQUAL
64286: IFFALSE 64296
// sExchange := true ;
64288: LD_ADDR_EXP 93
64292: PUSH
64293: LD_INT 1
64295: ST_TO_ADDR
// if p3 = 31 then
64296: LD_VAR 0 3
64300: PUSH
64301: LD_INT 31
64303: EQUAL
64304: IFFALSE 64314
// sFac := true ;
64306: LD_ADDR_EXP 94
64310: PUSH
64311: LD_INT 1
64313: ST_TO_ADDR
// if p3 = 32 then
64314: LD_VAR 0 3
64318: PUSH
64319: LD_INT 32
64321: EQUAL
64322: IFFALSE 64332
// sPower := true ;
64324: LD_ADDR_EXP 95
64328: PUSH
64329: LD_INT 1
64331: ST_TO_ADDR
// if p3 = 33 then
64332: LD_VAR 0 3
64336: PUSH
64337: LD_INT 33
64339: EQUAL
64340: IFFALSE 64350
// sRandom := true ;
64342: LD_ADDR_EXP 96
64346: PUSH
64347: LD_INT 1
64349: ST_TO_ADDR
// if p3 = 34 then
64350: LD_VAR 0 3
64354: PUSH
64355: LD_INT 34
64357: EQUAL
64358: IFFALSE 64368
// sShield := true ;
64360: LD_ADDR_EXP 97
64364: PUSH
64365: LD_INT 1
64367: ST_TO_ADDR
// if p3 = 35 then
64368: LD_VAR 0 3
64372: PUSH
64373: LD_INT 35
64375: EQUAL
64376: IFFALSE 64386
// sTime := true ;
64378: LD_ADDR_EXP 98
64382: PUSH
64383: LD_INT 1
64385: ST_TO_ADDR
// if p3 = 36 then
64386: LD_VAR 0 3
64390: PUSH
64391: LD_INT 36
64393: EQUAL
64394: IFFALSE 64404
// sTools := true ;
64396: LD_ADDR_EXP 99
64400: PUSH
64401: LD_INT 1
64403: ST_TO_ADDR
// if p3 = 101 then
64404: LD_VAR 0 3
64408: PUSH
64409: LD_INT 101
64411: EQUAL
64412: IFFALSE 64422
// sSold := true ;
64414: LD_ADDR_EXP 64
64418: PUSH
64419: LD_INT 1
64421: ST_TO_ADDR
// if p3 = 102 then
64422: LD_VAR 0 3
64426: PUSH
64427: LD_INT 102
64429: EQUAL
64430: IFFALSE 64440
// sDiff := true ;
64432: LD_ADDR_EXP 65
64436: PUSH
64437: LD_INT 1
64439: ST_TO_ADDR
// if p3 = 103 then
64440: LD_VAR 0 3
64444: PUSH
64445: LD_INT 103
64447: EQUAL
64448: IFFALSE 64458
// sFog := true ;
64450: LD_ADDR_EXP 68
64454: PUSH
64455: LD_INT 1
64457: ST_TO_ADDR
// if p3 = 104 then
64458: LD_VAR 0 3
64462: PUSH
64463: LD_INT 104
64465: EQUAL
64466: IFFALSE 64476
// sReset := true ;
64468: LD_ADDR_EXP 69
64472: PUSH
64473: LD_INT 1
64475: ST_TO_ADDR
// if p3 = 105 then
64476: LD_VAR 0 3
64480: PUSH
64481: LD_INT 105
64483: EQUAL
64484: IFFALSE 64494
// sSun := true ;
64486: LD_ADDR_EXP 70
64490: PUSH
64491: LD_INT 1
64493: ST_TO_ADDR
// if p3 = 106 then
64494: LD_VAR 0 3
64498: PUSH
64499: LD_INT 106
64501: EQUAL
64502: IFFALSE 64512
// sTiger := true ;
64504: LD_ADDR_EXP 66
64508: PUSH
64509: LD_INT 1
64511: ST_TO_ADDR
// if p3 = 107 then
64512: LD_VAR 0 3
64516: PUSH
64517: LD_INT 107
64519: EQUAL
64520: IFFALSE 64530
// sBomb := true ;
64522: LD_ADDR_EXP 67
64526: PUSH
64527: LD_INT 1
64529: ST_TO_ADDR
// if p3 = 108 then
64530: LD_VAR 0 3
64534: PUSH
64535: LD_INT 108
64537: EQUAL
64538: IFFALSE 64548
// sWound := true ;
64540: LD_ADDR_EXP 75
64544: PUSH
64545: LD_INT 1
64547: ST_TO_ADDR
// if p3 = 109 then
64548: LD_VAR 0 3
64552: PUSH
64553: LD_INT 109
64555: EQUAL
64556: IFFALSE 64566
// sBetray := true ;
64558: LD_ADDR_EXP 79
64562: PUSH
64563: LD_INT 1
64565: ST_TO_ADDR
// if p3 = 110 then
64566: LD_VAR 0 3
64570: PUSH
64571: LD_INT 110
64573: EQUAL
64574: IFFALSE 64584
// sContamin := true ;
64576: LD_ADDR_EXP 80
64580: PUSH
64581: LD_INT 1
64583: ST_TO_ADDR
// if p3 = 111 then
64584: LD_VAR 0 3
64588: PUSH
64589: LD_INT 111
64591: EQUAL
64592: IFFALSE 64602
// sOil := true ;
64594: LD_ADDR_EXP 82
64598: PUSH
64599: LD_INT 1
64601: ST_TO_ADDR
// if p3 = 112 then
64602: LD_VAR 0 3
64606: PUSH
64607: LD_INT 112
64609: EQUAL
64610: IFFALSE 64620
// sStu := true ;
64612: LD_ADDR_EXP 86
64616: PUSH
64617: LD_INT 1
64619: ST_TO_ADDR
// if p3 = 113 then
64620: LD_VAR 0 3
64624: PUSH
64625: LD_INT 113
64627: EQUAL
64628: IFFALSE 64638
// sBazooka := true ;
64630: LD_ADDR_EXP 89
64634: PUSH
64635: LD_INT 1
64637: ST_TO_ADDR
// if p3 = 114 then
64638: LD_VAR 0 3
64642: PUSH
64643: LD_INT 114
64645: EQUAL
64646: IFFALSE 64656
// sMortar := true ;
64648: LD_ADDR_EXP 90
64652: PUSH
64653: LD_INT 1
64655: ST_TO_ADDR
// if p3 = 115 then
64656: LD_VAR 0 3
64660: PUSH
64661: LD_INT 115
64663: EQUAL
64664: IFFALSE 64674
// sRanger := true ;
64666: LD_ADDR_EXP 100
64670: PUSH
64671: LD_INT 1
64673: ST_TO_ADDR
// if p3 = 116 then
64674: LD_VAR 0 3
64678: PUSH
64679: LD_INT 116
64681: EQUAL
64682: IFFALSE 64692
// sComputer := true ;
64684: LD_ADDR_EXP 101
64688: PUSH
64689: LD_INT 1
64691: ST_TO_ADDR
// if p3 = 117 then
64692: LD_VAR 0 3
64696: PUSH
64697: LD_INT 117
64699: EQUAL
64700: IFFALSE 64710
// s30 := true ;
64702: LD_ADDR_EXP 102
64706: PUSH
64707: LD_INT 1
64709: ST_TO_ADDR
// if p3 = 118 then
64710: LD_VAR 0 3
64714: PUSH
64715: LD_INT 118
64717: EQUAL
64718: IFFALSE 64728
// s60 := true ;
64720: LD_ADDR_EXP 103
64724: PUSH
64725: LD_INT 1
64727: ST_TO_ADDR
// end ; if p2 = hack_mode then
64728: LD_VAR 0 2
64732: PUSH
64733: LD_INT 101
64735: EQUAL
64736: IFFALSE 64864
// begin case p3 of 1 :
64738: LD_VAR 0 3
64742: PUSH
64743: LD_INT 1
64745: DOUBLE
64746: EQUAL
64747: IFTRUE 64751
64749: GO 64758
64751: POP
// hHackUnlimitedResources ; 2 :
64752: CALL 77011 0 0
64756: GO 64864
64758: LD_INT 2
64760: DOUBLE
64761: EQUAL
64762: IFTRUE 64766
64764: GO 64773
64766: POP
// hHackSetLevel10 ; 3 :
64767: CALL 77144 0 0
64771: GO 64864
64773: LD_INT 3
64775: DOUBLE
64776: EQUAL
64777: IFTRUE 64781
64779: GO 64788
64781: POP
// hHackSetLevel10YourUnits ; 4 :
64782: CALL 77229 0 0
64786: GO 64864
64788: LD_INT 4
64790: DOUBLE
64791: EQUAL
64792: IFTRUE 64796
64794: GO 64803
64796: POP
// hHackInvincible ; 5 :
64797: CALL 77677 0 0
64801: GO 64864
64803: LD_INT 5
64805: DOUBLE
64806: EQUAL
64807: IFTRUE 64811
64809: GO 64818
64811: POP
// hHackInvisible ; 6 :
64812: CALL 77788 0 0
64816: GO 64864
64818: LD_INT 6
64820: DOUBLE
64821: EQUAL
64822: IFTRUE 64826
64824: GO 64833
64826: POP
// hHackChangeYourSide ; 7 :
64827: CALL 77845 0 0
64831: GO 64864
64833: LD_INT 7
64835: DOUBLE
64836: EQUAL
64837: IFTRUE 64841
64839: GO 64848
64841: POP
// hHackChangeUnitSide ; 8 :
64842: CALL 77887 0 0
64846: GO 64864
64848: LD_INT 8
64850: DOUBLE
64851: EQUAL
64852: IFTRUE 64856
64854: GO 64863
64856: POP
// hHackFog ; end ;
64857: CALL 77988 0 0
64861: GO 64864
64863: POP
// end ; if p2 = game_save_mode then
64864: LD_VAR 0 2
64868: PUSH
64869: LD_INT 102
64871: EQUAL
64872: IFFALSE 64927
// begin if p3 = 1 then
64874: LD_VAR 0 3
64878: PUSH
64879: LD_INT 1
64881: EQUAL
64882: IFFALSE 64894
// globalGameSaveCounter := p4 ;
64884: LD_ADDR_EXP 46
64888: PUSH
64889: LD_VAR 0 4
64893: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
64894: LD_VAR 0 3
64898: PUSH
64899: LD_INT 2
64901: EQUAL
64902: PUSH
64903: LD_EXP 46
64907: AND
64908: IFFALSE 64927
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
64910: LD_STRING setGameSaveCounter(
64912: PUSH
64913: LD_EXP 46
64917: STR
64918: PUSH
64919: LD_STRING )
64921: STR
64922: PPUSH
64923: CALL_OW 559
// end ; end ;
64927: LD_VAR 0 7
64931: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
64932: LD_INT 0
64934: PPUSH
// streamModeActive := false ;
64935: LD_ADDR_EXP 47
64939: PUSH
64940: LD_INT 0
64942: ST_TO_ADDR
// normalCounter := 36 ;
64943: LD_ADDR_EXP 48
64947: PUSH
64948: LD_INT 36
64950: ST_TO_ADDR
// hardcoreCounter := 18 ;
64951: LD_ADDR_EXP 49
64955: PUSH
64956: LD_INT 18
64958: ST_TO_ADDR
// sRocket := false ;
64959: LD_ADDR_EXP 52
64963: PUSH
64964: LD_INT 0
64966: ST_TO_ADDR
// sSpeed := false ;
64967: LD_ADDR_EXP 51
64971: PUSH
64972: LD_INT 0
64974: ST_TO_ADDR
// sEngine := false ;
64975: LD_ADDR_EXP 53
64979: PUSH
64980: LD_INT 0
64982: ST_TO_ADDR
// sSpec := false ;
64983: LD_ADDR_EXP 50
64987: PUSH
64988: LD_INT 0
64990: ST_TO_ADDR
// sLevel := false ;
64991: LD_ADDR_EXP 54
64995: PUSH
64996: LD_INT 0
64998: ST_TO_ADDR
// sArmoury := false ;
64999: LD_ADDR_EXP 55
65003: PUSH
65004: LD_INT 0
65006: ST_TO_ADDR
// sRadar := false ;
65007: LD_ADDR_EXP 56
65011: PUSH
65012: LD_INT 0
65014: ST_TO_ADDR
// sBunker := false ;
65015: LD_ADDR_EXP 57
65019: PUSH
65020: LD_INT 0
65022: ST_TO_ADDR
// sHack := false ;
65023: LD_ADDR_EXP 58
65027: PUSH
65028: LD_INT 0
65030: ST_TO_ADDR
// sFire := false ;
65031: LD_ADDR_EXP 59
65035: PUSH
65036: LD_INT 0
65038: ST_TO_ADDR
// sRefresh := false ;
65039: LD_ADDR_EXP 60
65043: PUSH
65044: LD_INT 0
65046: ST_TO_ADDR
// sExp := false ;
65047: LD_ADDR_EXP 61
65051: PUSH
65052: LD_INT 0
65054: ST_TO_ADDR
// sDepot := false ;
65055: LD_ADDR_EXP 62
65059: PUSH
65060: LD_INT 0
65062: ST_TO_ADDR
// sFlag := false ;
65063: LD_ADDR_EXP 63
65067: PUSH
65068: LD_INT 0
65070: ST_TO_ADDR
// sKamikadze := false ;
65071: LD_ADDR_EXP 71
65075: PUSH
65076: LD_INT 0
65078: ST_TO_ADDR
// sTroll := false ;
65079: LD_ADDR_EXP 72
65083: PUSH
65084: LD_INT 0
65086: ST_TO_ADDR
// sSlow := false ;
65087: LD_ADDR_EXP 73
65091: PUSH
65092: LD_INT 0
65094: ST_TO_ADDR
// sLack := false ;
65095: LD_ADDR_EXP 74
65099: PUSH
65100: LD_INT 0
65102: ST_TO_ADDR
// sTank := false ;
65103: LD_ADDR_EXP 76
65107: PUSH
65108: LD_INT 0
65110: ST_TO_ADDR
// sRemote := false ;
65111: LD_ADDR_EXP 77
65115: PUSH
65116: LD_INT 0
65118: ST_TO_ADDR
// sPowell := false ;
65119: LD_ADDR_EXP 78
65123: PUSH
65124: LD_INT 0
65126: ST_TO_ADDR
// sTeleport := false ;
65127: LD_ADDR_EXP 81
65131: PUSH
65132: LD_INT 0
65134: ST_TO_ADDR
// sOilTower := false ;
65135: LD_ADDR_EXP 83
65139: PUSH
65140: LD_INT 0
65142: ST_TO_ADDR
// sShovel := false ;
65143: LD_ADDR_EXP 84
65147: PUSH
65148: LD_INT 0
65150: ST_TO_ADDR
// sSheik := false ;
65151: LD_ADDR_EXP 85
65155: PUSH
65156: LD_INT 0
65158: ST_TO_ADDR
// sEarthquake := false ;
65159: LD_ADDR_EXP 87
65163: PUSH
65164: LD_INT 0
65166: ST_TO_ADDR
// sAI := false ;
65167: LD_ADDR_EXP 88
65171: PUSH
65172: LD_INT 0
65174: ST_TO_ADDR
// sCargo := false ;
65175: LD_ADDR_EXP 91
65179: PUSH
65180: LD_INT 0
65182: ST_TO_ADDR
// sDLaser := false ;
65183: LD_ADDR_EXP 92
65187: PUSH
65188: LD_INT 0
65190: ST_TO_ADDR
// sExchange := false ;
65191: LD_ADDR_EXP 93
65195: PUSH
65196: LD_INT 0
65198: ST_TO_ADDR
// sFac := false ;
65199: LD_ADDR_EXP 94
65203: PUSH
65204: LD_INT 0
65206: ST_TO_ADDR
// sPower := false ;
65207: LD_ADDR_EXP 95
65211: PUSH
65212: LD_INT 0
65214: ST_TO_ADDR
// sRandom := false ;
65215: LD_ADDR_EXP 96
65219: PUSH
65220: LD_INT 0
65222: ST_TO_ADDR
// sShield := false ;
65223: LD_ADDR_EXP 97
65227: PUSH
65228: LD_INT 0
65230: ST_TO_ADDR
// sTime := false ;
65231: LD_ADDR_EXP 98
65235: PUSH
65236: LD_INT 0
65238: ST_TO_ADDR
// sTools := false ;
65239: LD_ADDR_EXP 99
65243: PUSH
65244: LD_INT 0
65246: ST_TO_ADDR
// sSold := false ;
65247: LD_ADDR_EXP 64
65251: PUSH
65252: LD_INT 0
65254: ST_TO_ADDR
// sDiff := false ;
65255: LD_ADDR_EXP 65
65259: PUSH
65260: LD_INT 0
65262: ST_TO_ADDR
// sFog := false ;
65263: LD_ADDR_EXP 68
65267: PUSH
65268: LD_INT 0
65270: ST_TO_ADDR
// sReset := false ;
65271: LD_ADDR_EXP 69
65275: PUSH
65276: LD_INT 0
65278: ST_TO_ADDR
// sSun := false ;
65279: LD_ADDR_EXP 70
65283: PUSH
65284: LD_INT 0
65286: ST_TO_ADDR
// sTiger := false ;
65287: LD_ADDR_EXP 66
65291: PUSH
65292: LD_INT 0
65294: ST_TO_ADDR
// sBomb := false ;
65295: LD_ADDR_EXP 67
65299: PUSH
65300: LD_INT 0
65302: ST_TO_ADDR
// sWound := false ;
65303: LD_ADDR_EXP 75
65307: PUSH
65308: LD_INT 0
65310: ST_TO_ADDR
// sBetray := false ;
65311: LD_ADDR_EXP 79
65315: PUSH
65316: LD_INT 0
65318: ST_TO_ADDR
// sContamin := false ;
65319: LD_ADDR_EXP 80
65323: PUSH
65324: LD_INT 0
65326: ST_TO_ADDR
// sOil := false ;
65327: LD_ADDR_EXP 82
65331: PUSH
65332: LD_INT 0
65334: ST_TO_ADDR
// sStu := false ;
65335: LD_ADDR_EXP 86
65339: PUSH
65340: LD_INT 0
65342: ST_TO_ADDR
// sBazooka := false ;
65343: LD_ADDR_EXP 89
65347: PUSH
65348: LD_INT 0
65350: ST_TO_ADDR
// sMortar := false ;
65351: LD_ADDR_EXP 90
65355: PUSH
65356: LD_INT 0
65358: ST_TO_ADDR
// sRanger := false ;
65359: LD_ADDR_EXP 100
65363: PUSH
65364: LD_INT 0
65366: ST_TO_ADDR
// sComputer := false ;
65367: LD_ADDR_EXP 101
65371: PUSH
65372: LD_INT 0
65374: ST_TO_ADDR
// s30 := false ;
65375: LD_ADDR_EXP 102
65379: PUSH
65380: LD_INT 0
65382: ST_TO_ADDR
// s60 := false ;
65383: LD_ADDR_EXP 103
65387: PUSH
65388: LD_INT 0
65390: ST_TO_ADDR
// end ;
65391: LD_VAR 0 1
65395: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
65396: LD_INT 0
65398: PPUSH
65399: PPUSH
65400: PPUSH
65401: PPUSH
65402: PPUSH
65403: PPUSH
65404: PPUSH
// result := [ ] ;
65405: LD_ADDR_VAR 0 2
65409: PUSH
65410: EMPTY
65411: ST_TO_ADDR
// if campaign_id = 1 then
65412: LD_OWVAR 69
65416: PUSH
65417: LD_INT 1
65419: EQUAL
65420: IFFALSE 68586
// begin case mission_number of 1 :
65422: LD_OWVAR 70
65426: PUSH
65427: LD_INT 1
65429: DOUBLE
65430: EQUAL
65431: IFTRUE 65435
65433: GO 65511
65435: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
65436: LD_ADDR_VAR 0 2
65440: PUSH
65441: LD_INT 2
65443: PUSH
65444: LD_INT 4
65446: PUSH
65447: LD_INT 11
65449: PUSH
65450: LD_INT 12
65452: PUSH
65453: LD_INT 15
65455: PUSH
65456: LD_INT 16
65458: PUSH
65459: LD_INT 22
65461: PUSH
65462: LD_INT 23
65464: PUSH
65465: LD_INT 26
65467: PUSH
65468: EMPTY
65469: LIST
65470: LIST
65471: LIST
65472: LIST
65473: LIST
65474: LIST
65475: LIST
65476: LIST
65477: LIST
65478: PUSH
65479: LD_INT 101
65481: PUSH
65482: LD_INT 102
65484: PUSH
65485: LD_INT 106
65487: PUSH
65488: LD_INT 116
65490: PUSH
65491: LD_INT 117
65493: PUSH
65494: LD_INT 118
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: LIST
65503: LIST
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: ST_TO_ADDR
65509: GO 68584
65511: LD_INT 2
65513: DOUBLE
65514: EQUAL
65515: IFTRUE 65519
65517: GO 65603
65519: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
65520: LD_ADDR_VAR 0 2
65524: PUSH
65525: LD_INT 2
65527: PUSH
65528: LD_INT 4
65530: PUSH
65531: LD_INT 11
65533: PUSH
65534: LD_INT 12
65536: PUSH
65537: LD_INT 15
65539: PUSH
65540: LD_INT 16
65542: PUSH
65543: LD_INT 22
65545: PUSH
65546: LD_INT 23
65548: PUSH
65549: LD_INT 26
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: LIST
65558: LIST
65559: LIST
65560: LIST
65561: LIST
65562: PUSH
65563: LD_INT 101
65565: PUSH
65566: LD_INT 102
65568: PUSH
65569: LD_INT 105
65571: PUSH
65572: LD_INT 106
65574: PUSH
65575: LD_INT 108
65577: PUSH
65578: LD_INT 116
65580: PUSH
65581: LD_INT 117
65583: PUSH
65584: LD_INT 118
65586: PUSH
65587: EMPTY
65588: LIST
65589: LIST
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: LIST
65595: LIST
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: ST_TO_ADDR
65601: GO 68584
65603: LD_INT 3
65605: DOUBLE
65606: EQUAL
65607: IFTRUE 65611
65609: GO 65699
65611: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
65612: LD_ADDR_VAR 0 2
65616: PUSH
65617: LD_INT 2
65619: PUSH
65620: LD_INT 4
65622: PUSH
65623: LD_INT 5
65625: PUSH
65626: LD_INT 11
65628: PUSH
65629: LD_INT 12
65631: PUSH
65632: LD_INT 15
65634: PUSH
65635: LD_INT 16
65637: PUSH
65638: LD_INT 22
65640: PUSH
65641: LD_INT 26
65643: PUSH
65644: LD_INT 36
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: LIST
65651: LIST
65652: LIST
65653: LIST
65654: LIST
65655: LIST
65656: LIST
65657: LIST
65658: PUSH
65659: LD_INT 101
65661: PUSH
65662: LD_INT 102
65664: PUSH
65665: LD_INT 105
65667: PUSH
65668: LD_INT 106
65670: PUSH
65671: LD_INT 108
65673: PUSH
65674: LD_INT 116
65676: PUSH
65677: LD_INT 117
65679: PUSH
65680: LD_INT 118
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: LIST
65687: LIST
65688: LIST
65689: LIST
65690: LIST
65691: LIST
65692: PUSH
65693: EMPTY
65694: LIST
65695: LIST
65696: ST_TO_ADDR
65697: GO 68584
65699: LD_INT 4
65701: DOUBLE
65702: EQUAL
65703: IFTRUE 65707
65705: GO 65803
65707: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
65708: LD_ADDR_VAR 0 2
65712: PUSH
65713: LD_INT 2
65715: PUSH
65716: LD_INT 4
65718: PUSH
65719: LD_INT 5
65721: PUSH
65722: LD_INT 8
65724: PUSH
65725: LD_INT 11
65727: PUSH
65728: LD_INT 12
65730: PUSH
65731: LD_INT 15
65733: PUSH
65734: LD_INT 16
65736: PUSH
65737: LD_INT 22
65739: PUSH
65740: LD_INT 23
65742: PUSH
65743: LD_INT 26
65745: PUSH
65746: LD_INT 36
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: LIST
65753: LIST
65754: LIST
65755: LIST
65756: LIST
65757: LIST
65758: LIST
65759: LIST
65760: LIST
65761: LIST
65762: PUSH
65763: LD_INT 101
65765: PUSH
65766: LD_INT 102
65768: PUSH
65769: LD_INT 105
65771: PUSH
65772: LD_INT 106
65774: PUSH
65775: LD_INT 108
65777: PUSH
65778: LD_INT 116
65780: PUSH
65781: LD_INT 117
65783: PUSH
65784: LD_INT 118
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: LIST
65791: LIST
65792: LIST
65793: LIST
65794: LIST
65795: LIST
65796: PUSH
65797: EMPTY
65798: LIST
65799: LIST
65800: ST_TO_ADDR
65801: GO 68584
65803: LD_INT 5
65805: DOUBLE
65806: EQUAL
65807: IFTRUE 65811
65809: GO 65923
65811: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
65812: LD_ADDR_VAR 0 2
65816: PUSH
65817: LD_INT 2
65819: PUSH
65820: LD_INT 4
65822: PUSH
65823: LD_INT 5
65825: PUSH
65826: LD_INT 6
65828: PUSH
65829: LD_INT 8
65831: PUSH
65832: LD_INT 11
65834: PUSH
65835: LD_INT 12
65837: PUSH
65838: LD_INT 15
65840: PUSH
65841: LD_INT 16
65843: PUSH
65844: LD_INT 22
65846: PUSH
65847: LD_INT 23
65849: PUSH
65850: LD_INT 25
65852: PUSH
65853: LD_INT 26
65855: PUSH
65856: LD_INT 36
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: LIST
65863: LIST
65864: LIST
65865: LIST
65866: LIST
65867: LIST
65868: LIST
65869: LIST
65870: LIST
65871: LIST
65872: LIST
65873: LIST
65874: PUSH
65875: LD_INT 101
65877: PUSH
65878: LD_INT 102
65880: PUSH
65881: LD_INT 105
65883: PUSH
65884: LD_INT 106
65886: PUSH
65887: LD_INT 108
65889: PUSH
65890: LD_INT 109
65892: PUSH
65893: LD_INT 112
65895: PUSH
65896: LD_INT 116
65898: PUSH
65899: LD_INT 117
65901: PUSH
65902: LD_INT 118
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: LIST
65909: LIST
65910: LIST
65911: LIST
65912: LIST
65913: LIST
65914: LIST
65915: LIST
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: ST_TO_ADDR
65921: GO 68584
65923: LD_INT 6
65925: DOUBLE
65926: EQUAL
65927: IFTRUE 65931
65929: GO 66063
65931: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
65932: LD_ADDR_VAR 0 2
65936: PUSH
65937: LD_INT 2
65939: PUSH
65940: LD_INT 4
65942: PUSH
65943: LD_INT 5
65945: PUSH
65946: LD_INT 6
65948: PUSH
65949: LD_INT 8
65951: PUSH
65952: LD_INT 11
65954: PUSH
65955: LD_INT 12
65957: PUSH
65958: LD_INT 15
65960: PUSH
65961: LD_INT 16
65963: PUSH
65964: LD_INT 20
65966: PUSH
65967: LD_INT 21
65969: PUSH
65970: LD_INT 22
65972: PUSH
65973: LD_INT 23
65975: PUSH
65976: LD_INT 25
65978: PUSH
65979: LD_INT 26
65981: PUSH
65982: LD_INT 30
65984: PUSH
65985: LD_INT 31
65987: PUSH
65988: LD_INT 32
65990: PUSH
65991: LD_INT 36
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: LIST
65998: LIST
65999: LIST
66000: LIST
66001: LIST
66002: LIST
66003: LIST
66004: LIST
66005: LIST
66006: LIST
66007: LIST
66008: LIST
66009: LIST
66010: LIST
66011: LIST
66012: LIST
66013: LIST
66014: PUSH
66015: LD_INT 101
66017: PUSH
66018: LD_INT 102
66020: PUSH
66021: LD_INT 105
66023: PUSH
66024: LD_INT 106
66026: PUSH
66027: LD_INT 108
66029: PUSH
66030: LD_INT 109
66032: PUSH
66033: LD_INT 112
66035: PUSH
66036: LD_INT 116
66038: PUSH
66039: LD_INT 117
66041: PUSH
66042: LD_INT 118
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: LIST
66049: LIST
66050: LIST
66051: LIST
66052: LIST
66053: LIST
66054: LIST
66055: LIST
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: ST_TO_ADDR
66061: GO 68584
66063: LD_INT 7
66065: DOUBLE
66066: EQUAL
66067: IFTRUE 66071
66069: GO 66183
66071: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
66072: LD_ADDR_VAR 0 2
66076: PUSH
66077: LD_INT 2
66079: PUSH
66080: LD_INT 4
66082: PUSH
66083: LD_INT 5
66085: PUSH
66086: LD_INT 7
66088: PUSH
66089: LD_INT 11
66091: PUSH
66092: LD_INT 12
66094: PUSH
66095: LD_INT 15
66097: PUSH
66098: LD_INT 16
66100: PUSH
66101: LD_INT 20
66103: PUSH
66104: LD_INT 21
66106: PUSH
66107: LD_INT 22
66109: PUSH
66110: LD_INT 23
66112: PUSH
66113: LD_INT 25
66115: PUSH
66116: LD_INT 26
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: LIST
66132: LIST
66133: LIST
66134: PUSH
66135: LD_INT 101
66137: PUSH
66138: LD_INT 102
66140: PUSH
66141: LD_INT 103
66143: PUSH
66144: LD_INT 105
66146: PUSH
66147: LD_INT 106
66149: PUSH
66150: LD_INT 108
66152: PUSH
66153: LD_INT 112
66155: PUSH
66156: LD_INT 116
66158: PUSH
66159: LD_INT 117
66161: PUSH
66162: LD_INT 118
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: LIST
66169: LIST
66170: LIST
66171: LIST
66172: LIST
66173: LIST
66174: LIST
66175: LIST
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: ST_TO_ADDR
66181: GO 68584
66183: LD_INT 8
66185: DOUBLE
66186: EQUAL
66187: IFTRUE 66191
66189: GO 66331
66191: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
66192: LD_ADDR_VAR 0 2
66196: PUSH
66197: LD_INT 2
66199: PUSH
66200: LD_INT 4
66202: PUSH
66203: LD_INT 5
66205: PUSH
66206: LD_INT 6
66208: PUSH
66209: LD_INT 7
66211: PUSH
66212: LD_INT 8
66214: PUSH
66215: LD_INT 11
66217: PUSH
66218: LD_INT 12
66220: PUSH
66221: LD_INT 15
66223: PUSH
66224: LD_INT 16
66226: PUSH
66227: LD_INT 20
66229: PUSH
66230: LD_INT 21
66232: PUSH
66233: LD_INT 22
66235: PUSH
66236: LD_INT 23
66238: PUSH
66239: LD_INT 25
66241: PUSH
66242: LD_INT 26
66244: PUSH
66245: LD_INT 30
66247: PUSH
66248: LD_INT 31
66250: PUSH
66251: LD_INT 32
66253: PUSH
66254: LD_INT 36
66256: PUSH
66257: EMPTY
66258: LIST
66259: LIST
66260: LIST
66261: LIST
66262: LIST
66263: LIST
66264: LIST
66265: LIST
66266: LIST
66267: LIST
66268: LIST
66269: LIST
66270: LIST
66271: LIST
66272: LIST
66273: LIST
66274: LIST
66275: LIST
66276: LIST
66277: LIST
66278: PUSH
66279: LD_INT 101
66281: PUSH
66282: LD_INT 102
66284: PUSH
66285: LD_INT 103
66287: PUSH
66288: LD_INT 105
66290: PUSH
66291: LD_INT 106
66293: PUSH
66294: LD_INT 108
66296: PUSH
66297: LD_INT 109
66299: PUSH
66300: LD_INT 112
66302: PUSH
66303: LD_INT 116
66305: PUSH
66306: LD_INT 117
66308: PUSH
66309: LD_INT 118
66311: PUSH
66312: EMPTY
66313: LIST
66314: LIST
66315: LIST
66316: LIST
66317: LIST
66318: LIST
66319: LIST
66320: LIST
66321: LIST
66322: LIST
66323: LIST
66324: PUSH
66325: EMPTY
66326: LIST
66327: LIST
66328: ST_TO_ADDR
66329: GO 68584
66331: LD_INT 9
66333: DOUBLE
66334: EQUAL
66335: IFTRUE 66339
66337: GO 66487
66339: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
66340: LD_ADDR_VAR 0 2
66344: PUSH
66345: LD_INT 2
66347: PUSH
66348: LD_INT 4
66350: PUSH
66351: LD_INT 5
66353: PUSH
66354: LD_INT 6
66356: PUSH
66357: LD_INT 7
66359: PUSH
66360: LD_INT 8
66362: PUSH
66363: LD_INT 11
66365: PUSH
66366: LD_INT 12
66368: PUSH
66369: LD_INT 15
66371: PUSH
66372: LD_INT 16
66374: PUSH
66375: LD_INT 20
66377: PUSH
66378: LD_INT 21
66380: PUSH
66381: LD_INT 22
66383: PUSH
66384: LD_INT 23
66386: PUSH
66387: LD_INT 25
66389: PUSH
66390: LD_INT 26
66392: PUSH
66393: LD_INT 28
66395: PUSH
66396: LD_INT 30
66398: PUSH
66399: LD_INT 31
66401: PUSH
66402: LD_INT 32
66404: PUSH
66405: LD_INT 36
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: LIST
66412: LIST
66413: LIST
66414: LIST
66415: LIST
66416: LIST
66417: LIST
66418: LIST
66419: LIST
66420: LIST
66421: LIST
66422: LIST
66423: LIST
66424: LIST
66425: LIST
66426: LIST
66427: LIST
66428: LIST
66429: LIST
66430: PUSH
66431: LD_INT 101
66433: PUSH
66434: LD_INT 102
66436: PUSH
66437: LD_INT 103
66439: PUSH
66440: LD_INT 105
66442: PUSH
66443: LD_INT 106
66445: PUSH
66446: LD_INT 108
66448: PUSH
66449: LD_INT 109
66451: PUSH
66452: LD_INT 112
66454: PUSH
66455: LD_INT 114
66457: PUSH
66458: LD_INT 116
66460: PUSH
66461: LD_INT 117
66463: PUSH
66464: LD_INT 118
66466: PUSH
66467: EMPTY
66468: LIST
66469: LIST
66470: LIST
66471: LIST
66472: LIST
66473: LIST
66474: LIST
66475: LIST
66476: LIST
66477: LIST
66478: LIST
66479: LIST
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: ST_TO_ADDR
66485: GO 68584
66487: LD_INT 10
66489: DOUBLE
66490: EQUAL
66491: IFTRUE 66495
66493: GO 66691
66495: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
66496: LD_ADDR_VAR 0 2
66500: PUSH
66501: LD_INT 2
66503: PUSH
66504: LD_INT 4
66506: PUSH
66507: LD_INT 5
66509: PUSH
66510: LD_INT 6
66512: PUSH
66513: LD_INT 7
66515: PUSH
66516: LD_INT 8
66518: PUSH
66519: LD_INT 9
66521: PUSH
66522: LD_INT 10
66524: PUSH
66525: LD_INT 11
66527: PUSH
66528: LD_INT 12
66530: PUSH
66531: LD_INT 13
66533: PUSH
66534: LD_INT 14
66536: PUSH
66537: LD_INT 15
66539: PUSH
66540: LD_INT 16
66542: PUSH
66543: LD_INT 17
66545: PUSH
66546: LD_INT 18
66548: PUSH
66549: LD_INT 19
66551: PUSH
66552: LD_INT 20
66554: PUSH
66555: LD_INT 21
66557: PUSH
66558: LD_INT 22
66560: PUSH
66561: LD_INT 23
66563: PUSH
66564: LD_INT 24
66566: PUSH
66567: LD_INT 25
66569: PUSH
66570: LD_INT 26
66572: PUSH
66573: LD_INT 28
66575: PUSH
66576: LD_INT 30
66578: PUSH
66579: LD_INT 31
66581: PUSH
66582: LD_INT 32
66584: PUSH
66585: LD_INT 36
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: LIST
66592: LIST
66593: LIST
66594: LIST
66595: LIST
66596: LIST
66597: LIST
66598: LIST
66599: LIST
66600: LIST
66601: LIST
66602: LIST
66603: LIST
66604: LIST
66605: LIST
66606: LIST
66607: LIST
66608: LIST
66609: LIST
66610: LIST
66611: LIST
66612: LIST
66613: LIST
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: PUSH
66619: LD_INT 101
66621: PUSH
66622: LD_INT 102
66624: PUSH
66625: LD_INT 103
66627: PUSH
66628: LD_INT 104
66630: PUSH
66631: LD_INT 105
66633: PUSH
66634: LD_INT 106
66636: PUSH
66637: LD_INT 107
66639: PUSH
66640: LD_INT 108
66642: PUSH
66643: LD_INT 109
66645: PUSH
66646: LD_INT 110
66648: PUSH
66649: LD_INT 111
66651: PUSH
66652: LD_INT 112
66654: PUSH
66655: LD_INT 114
66657: PUSH
66658: LD_INT 116
66660: PUSH
66661: LD_INT 117
66663: PUSH
66664: LD_INT 118
66666: PUSH
66667: EMPTY
66668: LIST
66669: LIST
66670: LIST
66671: LIST
66672: LIST
66673: LIST
66674: LIST
66675: LIST
66676: LIST
66677: LIST
66678: LIST
66679: LIST
66680: LIST
66681: LIST
66682: LIST
66683: LIST
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: ST_TO_ADDR
66689: GO 68584
66691: LD_INT 11
66693: DOUBLE
66694: EQUAL
66695: IFTRUE 66699
66697: GO 66903
66699: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
66700: LD_ADDR_VAR 0 2
66704: PUSH
66705: LD_INT 2
66707: PUSH
66708: LD_INT 3
66710: PUSH
66711: LD_INT 4
66713: PUSH
66714: LD_INT 5
66716: PUSH
66717: LD_INT 6
66719: PUSH
66720: LD_INT 7
66722: PUSH
66723: LD_INT 8
66725: PUSH
66726: LD_INT 9
66728: PUSH
66729: LD_INT 10
66731: PUSH
66732: LD_INT 11
66734: PUSH
66735: LD_INT 12
66737: PUSH
66738: LD_INT 13
66740: PUSH
66741: LD_INT 14
66743: PUSH
66744: LD_INT 15
66746: PUSH
66747: LD_INT 16
66749: PUSH
66750: LD_INT 17
66752: PUSH
66753: LD_INT 18
66755: PUSH
66756: LD_INT 19
66758: PUSH
66759: LD_INT 20
66761: PUSH
66762: LD_INT 21
66764: PUSH
66765: LD_INT 22
66767: PUSH
66768: LD_INT 23
66770: PUSH
66771: LD_INT 24
66773: PUSH
66774: LD_INT 25
66776: PUSH
66777: LD_INT 26
66779: PUSH
66780: LD_INT 28
66782: PUSH
66783: LD_INT 30
66785: PUSH
66786: LD_INT 31
66788: PUSH
66789: LD_INT 32
66791: PUSH
66792: LD_INT 34
66794: PUSH
66795: LD_INT 36
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: LIST
66802: LIST
66803: LIST
66804: LIST
66805: LIST
66806: LIST
66807: LIST
66808: LIST
66809: LIST
66810: LIST
66811: LIST
66812: LIST
66813: LIST
66814: LIST
66815: LIST
66816: LIST
66817: LIST
66818: LIST
66819: LIST
66820: LIST
66821: LIST
66822: LIST
66823: LIST
66824: LIST
66825: LIST
66826: LIST
66827: LIST
66828: LIST
66829: LIST
66830: PUSH
66831: LD_INT 101
66833: PUSH
66834: LD_INT 102
66836: PUSH
66837: LD_INT 103
66839: PUSH
66840: LD_INT 104
66842: PUSH
66843: LD_INT 105
66845: PUSH
66846: LD_INT 106
66848: PUSH
66849: LD_INT 107
66851: PUSH
66852: LD_INT 108
66854: PUSH
66855: LD_INT 109
66857: PUSH
66858: LD_INT 110
66860: PUSH
66861: LD_INT 111
66863: PUSH
66864: LD_INT 112
66866: PUSH
66867: LD_INT 114
66869: PUSH
66870: LD_INT 116
66872: PUSH
66873: LD_INT 117
66875: PUSH
66876: LD_INT 118
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: LIST
66883: LIST
66884: LIST
66885: LIST
66886: LIST
66887: LIST
66888: LIST
66889: LIST
66890: LIST
66891: LIST
66892: LIST
66893: LIST
66894: LIST
66895: LIST
66896: PUSH
66897: EMPTY
66898: LIST
66899: LIST
66900: ST_TO_ADDR
66901: GO 68584
66903: LD_INT 12
66905: DOUBLE
66906: EQUAL
66907: IFTRUE 66911
66909: GO 67131
66911: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
66912: LD_ADDR_VAR 0 2
66916: PUSH
66917: LD_INT 1
66919: PUSH
66920: LD_INT 2
66922: PUSH
66923: LD_INT 3
66925: PUSH
66926: LD_INT 4
66928: PUSH
66929: LD_INT 5
66931: PUSH
66932: LD_INT 6
66934: PUSH
66935: LD_INT 7
66937: PUSH
66938: LD_INT 8
66940: PUSH
66941: LD_INT 9
66943: PUSH
66944: LD_INT 10
66946: PUSH
66947: LD_INT 11
66949: PUSH
66950: LD_INT 12
66952: PUSH
66953: LD_INT 13
66955: PUSH
66956: LD_INT 14
66958: PUSH
66959: LD_INT 15
66961: PUSH
66962: LD_INT 16
66964: PUSH
66965: LD_INT 17
66967: PUSH
66968: LD_INT 18
66970: PUSH
66971: LD_INT 19
66973: PUSH
66974: LD_INT 20
66976: PUSH
66977: LD_INT 21
66979: PUSH
66980: LD_INT 22
66982: PUSH
66983: LD_INT 23
66985: PUSH
66986: LD_INT 24
66988: PUSH
66989: LD_INT 25
66991: PUSH
66992: LD_INT 26
66994: PUSH
66995: LD_INT 27
66997: PUSH
66998: LD_INT 28
67000: PUSH
67001: LD_INT 30
67003: PUSH
67004: LD_INT 31
67006: PUSH
67007: LD_INT 32
67009: PUSH
67010: LD_INT 33
67012: PUSH
67013: LD_INT 34
67015: PUSH
67016: LD_INT 36
67018: PUSH
67019: EMPTY
67020: LIST
67021: LIST
67022: LIST
67023: LIST
67024: LIST
67025: LIST
67026: LIST
67027: LIST
67028: LIST
67029: LIST
67030: LIST
67031: LIST
67032: LIST
67033: LIST
67034: LIST
67035: LIST
67036: LIST
67037: LIST
67038: LIST
67039: LIST
67040: LIST
67041: LIST
67042: LIST
67043: LIST
67044: LIST
67045: LIST
67046: LIST
67047: LIST
67048: LIST
67049: LIST
67050: LIST
67051: LIST
67052: LIST
67053: LIST
67054: PUSH
67055: LD_INT 101
67057: PUSH
67058: LD_INT 102
67060: PUSH
67061: LD_INT 103
67063: PUSH
67064: LD_INT 104
67066: PUSH
67067: LD_INT 105
67069: PUSH
67070: LD_INT 106
67072: PUSH
67073: LD_INT 107
67075: PUSH
67076: LD_INT 108
67078: PUSH
67079: LD_INT 109
67081: PUSH
67082: LD_INT 110
67084: PUSH
67085: LD_INT 111
67087: PUSH
67088: LD_INT 112
67090: PUSH
67091: LD_INT 113
67093: PUSH
67094: LD_INT 114
67096: PUSH
67097: LD_INT 116
67099: PUSH
67100: LD_INT 117
67102: PUSH
67103: LD_INT 118
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: LIST
67110: LIST
67111: LIST
67112: LIST
67113: LIST
67114: LIST
67115: LIST
67116: LIST
67117: LIST
67118: LIST
67119: LIST
67120: LIST
67121: LIST
67122: LIST
67123: LIST
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: ST_TO_ADDR
67129: GO 68584
67131: LD_INT 13
67133: DOUBLE
67134: EQUAL
67135: IFTRUE 67139
67137: GO 67347
67139: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
67140: LD_ADDR_VAR 0 2
67144: PUSH
67145: LD_INT 1
67147: PUSH
67148: LD_INT 2
67150: PUSH
67151: LD_INT 3
67153: PUSH
67154: LD_INT 4
67156: PUSH
67157: LD_INT 5
67159: PUSH
67160: LD_INT 8
67162: PUSH
67163: LD_INT 9
67165: PUSH
67166: LD_INT 10
67168: PUSH
67169: LD_INT 11
67171: PUSH
67172: LD_INT 12
67174: PUSH
67175: LD_INT 14
67177: PUSH
67178: LD_INT 15
67180: PUSH
67181: LD_INT 16
67183: PUSH
67184: LD_INT 17
67186: PUSH
67187: LD_INT 18
67189: PUSH
67190: LD_INT 19
67192: PUSH
67193: LD_INT 20
67195: PUSH
67196: LD_INT 21
67198: PUSH
67199: LD_INT 22
67201: PUSH
67202: LD_INT 23
67204: PUSH
67205: LD_INT 24
67207: PUSH
67208: LD_INT 25
67210: PUSH
67211: LD_INT 26
67213: PUSH
67214: LD_INT 27
67216: PUSH
67217: LD_INT 28
67219: PUSH
67220: LD_INT 30
67222: PUSH
67223: LD_INT 31
67225: PUSH
67226: LD_INT 32
67228: PUSH
67229: LD_INT 33
67231: PUSH
67232: LD_INT 34
67234: PUSH
67235: LD_INT 36
67237: PUSH
67238: EMPTY
67239: LIST
67240: LIST
67241: LIST
67242: LIST
67243: LIST
67244: LIST
67245: LIST
67246: LIST
67247: LIST
67248: LIST
67249: LIST
67250: LIST
67251: LIST
67252: LIST
67253: LIST
67254: LIST
67255: LIST
67256: LIST
67257: LIST
67258: LIST
67259: LIST
67260: LIST
67261: LIST
67262: LIST
67263: LIST
67264: LIST
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: LIST
67270: PUSH
67271: LD_INT 101
67273: PUSH
67274: LD_INT 102
67276: PUSH
67277: LD_INT 103
67279: PUSH
67280: LD_INT 104
67282: PUSH
67283: LD_INT 105
67285: PUSH
67286: LD_INT 106
67288: PUSH
67289: LD_INT 107
67291: PUSH
67292: LD_INT 108
67294: PUSH
67295: LD_INT 109
67297: PUSH
67298: LD_INT 110
67300: PUSH
67301: LD_INT 111
67303: PUSH
67304: LD_INT 112
67306: PUSH
67307: LD_INT 113
67309: PUSH
67310: LD_INT 114
67312: PUSH
67313: LD_INT 116
67315: PUSH
67316: LD_INT 117
67318: PUSH
67319: LD_INT 118
67321: PUSH
67322: EMPTY
67323: LIST
67324: LIST
67325: LIST
67326: LIST
67327: LIST
67328: LIST
67329: LIST
67330: LIST
67331: LIST
67332: LIST
67333: LIST
67334: LIST
67335: LIST
67336: LIST
67337: LIST
67338: LIST
67339: LIST
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: ST_TO_ADDR
67345: GO 68584
67347: LD_INT 14
67349: DOUBLE
67350: EQUAL
67351: IFTRUE 67355
67353: GO 67579
67355: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
67356: LD_ADDR_VAR 0 2
67360: PUSH
67361: LD_INT 1
67363: PUSH
67364: LD_INT 2
67366: PUSH
67367: LD_INT 3
67369: PUSH
67370: LD_INT 4
67372: PUSH
67373: LD_INT 5
67375: PUSH
67376: LD_INT 6
67378: PUSH
67379: LD_INT 7
67381: PUSH
67382: LD_INT 8
67384: PUSH
67385: LD_INT 9
67387: PUSH
67388: LD_INT 10
67390: PUSH
67391: LD_INT 11
67393: PUSH
67394: LD_INT 12
67396: PUSH
67397: LD_INT 13
67399: PUSH
67400: LD_INT 14
67402: PUSH
67403: LD_INT 15
67405: PUSH
67406: LD_INT 16
67408: PUSH
67409: LD_INT 17
67411: PUSH
67412: LD_INT 18
67414: PUSH
67415: LD_INT 19
67417: PUSH
67418: LD_INT 20
67420: PUSH
67421: LD_INT 21
67423: PUSH
67424: LD_INT 22
67426: PUSH
67427: LD_INT 23
67429: PUSH
67430: LD_INT 24
67432: PUSH
67433: LD_INT 25
67435: PUSH
67436: LD_INT 26
67438: PUSH
67439: LD_INT 27
67441: PUSH
67442: LD_INT 28
67444: PUSH
67445: LD_INT 29
67447: PUSH
67448: LD_INT 30
67450: PUSH
67451: LD_INT 31
67453: PUSH
67454: LD_INT 32
67456: PUSH
67457: LD_INT 33
67459: PUSH
67460: LD_INT 34
67462: PUSH
67463: LD_INT 36
67465: PUSH
67466: EMPTY
67467: LIST
67468: LIST
67469: LIST
67470: LIST
67471: LIST
67472: LIST
67473: LIST
67474: LIST
67475: LIST
67476: LIST
67477: LIST
67478: LIST
67479: LIST
67480: LIST
67481: LIST
67482: LIST
67483: LIST
67484: LIST
67485: LIST
67486: LIST
67487: LIST
67488: LIST
67489: LIST
67490: LIST
67491: LIST
67492: LIST
67493: LIST
67494: LIST
67495: LIST
67496: LIST
67497: LIST
67498: LIST
67499: LIST
67500: LIST
67501: LIST
67502: PUSH
67503: LD_INT 101
67505: PUSH
67506: LD_INT 102
67508: PUSH
67509: LD_INT 103
67511: PUSH
67512: LD_INT 104
67514: PUSH
67515: LD_INT 105
67517: PUSH
67518: LD_INT 106
67520: PUSH
67521: LD_INT 107
67523: PUSH
67524: LD_INT 108
67526: PUSH
67527: LD_INT 109
67529: PUSH
67530: LD_INT 110
67532: PUSH
67533: LD_INT 111
67535: PUSH
67536: LD_INT 112
67538: PUSH
67539: LD_INT 113
67541: PUSH
67542: LD_INT 114
67544: PUSH
67545: LD_INT 116
67547: PUSH
67548: LD_INT 117
67550: PUSH
67551: LD_INT 118
67553: PUSH
67554: EMPTY
67555: LIST
67556: LIST
67557: LIST
67558: LIST
67559: LIST
67560: LIST
67561: LIST
67562: LIST
67563: LIST
67564: LIST
67565: LIST
67566: LIST
67567: LIST
67568: LIST
67569: LIST
67570: LIST
67571: LIST
67572: PUSH
67573: EMPTY
67574: LIST
67575: LIST
67576: ST_TO_ADDR
67577: GO 68584
67579: LD_INT 15
67581: DOUBLE
67582: EQUAL
67583: IFTRUE 67587
67585: GO 67811
67587: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
67588: LD_ADDR_VAR 0 2
67592: PUSH
67593: LD_INT 1
67595: PUSH
67596: LD_INT 2
67598: PUSH
67599: LD_INT 3
67601: PUSH
67602: LD_INT 4
67604: PUSH
67605: LD_INT 5
67607: PUSH
67608: LD_INT 6
67610: PUSH
67611: LD_INT 7
67613: PUSH
67614: LD_INT 8
67616: PUSH
67617: LD_INT 9
67619: PUSH
67620: LD_INT 10
67622: PUSH
67623: LD_INT 11
67625: PUSH
67626: LD_INT 12
67628: PUSH
67629: LD_INT 13
67631: PUSH
67632: LD_INT 14
67634: PUSH
67635: LD_INT 15
67637: PUSH
67638: LD_INT 16
67640: PUSH
67641: LD_INT 17
67643: PUSH
67644: LD_INT 18
67646: PUSH
67647: LD_INT 19
67649: PUSH
67650: LD_INT 20
67652: PUSH
67653: LD_INT 21
67655: PUSH
67656: LD_INT 22
67658: PUSH
67659: LD_INT 23
67661: PUSH
67662: LD_INT 24
67664: PUSH
67665: LD_INT 25
67667: PUSH
67668: LD_INT 26
67670: PUSH
67671: LD_INT 27
67673: PUSH
67674: LD_INT 28
67676: PUSH
67677: LD_INT 29
67679: PUSH
67680: LD_INT 30
67682: PUSH
67683: LD_INT 31
67685: PUSH
67686: LD_INT 32
67688: PUSH
67689: LD_INT 33
67691: PUSH
67692: LD_INT 34
67694: PUSH
67695: LD_INT 36
67697: PUSH
67698: EMPTY
67699: LIST
67700: LIST
67701: LIST
67702: LIST
67703: LIST
67704: LIST
67705: LIST
67706: LIST
67707: LIST
67708: LIST
67709: LIST
67710: LIST
67711: LIST
67712: LIST
67713: LIST
67714: LIST
67715: LIST
67716: LIST
67717: LIST
67718: LIST
67719: LIST
67720: LIST
67721: LIST
67722: LIST
67723: LIST
67724: LIST
67725: LIST
67726: LIST
67727: LIST
67728: LIST
67729: LIST
67730: LIST
67731: LIST
67732: LIST
67733: LIST
67734: PUSH
67735: LD_INT 101
67737: PUSH
67738: LD_INT 102
67740: PUSH
67741: LD_INT 103
67743: PUSH
67744: LD_INT 104
67746: PUSH
67747: LD_INT 105
67749: PUSH
67750: LD_INT 106
67752: PUSH
67753: LD_INT 107
67755: PUSH
67756: LD_INT 108
67758: PUSH
67759: LD_INT 109
67761: PUSH
67762: LD_INT 110
67764: PUSH
67765: LD_INT 111
67767: PUSH
67768: LD_INT 112
67770: PUSH
67771: LD_INT 113
67773: PUSH
67774: LD_INT 114
67776: PUSH
67777: LD_INT 116
67779: PUSH
67780: LD_INT 117
67782: PUSH
67783: LD_INT 118
67785: PUSH
67786: EMPTY
67787: LIST
67788: LIST
67789: LIST
67790: LIST
67791: LIST
67792: LIST
67793: LIST
67794: LIST
67795: LIST
67796: LIST
67797: LIST
67798: LIST
67799: LIST
67800: LIST
67801: LIST
67802: LIST
67803: LIST
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: ST_TO_ADDR
67809: GO 68584
67811: LD_INT 16
67813: DOUBLE
67814: EQUAL
67815: IFTRUE 67819
67817: GO 67955
67819: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
67820: LD_ADDR_VAR 0 2
67824: PUSH
67825: LD_INT 2
67827: PUSH
67828: LD_INT 4
67830: PUSH
67831: LD_INT 5
67833: PUSH
67834: LD_INT 7
67836: PUSH
67837: LD_INT 11
67839: PUSH
67840: LD_INT 12
67842: PUSH
67843: LD_INT 15
67845: PUSH
67846: LD_INT 16
67848: PUSH
67849: LD_INT 20
67851: PUSH
67852: LD_INT 21
67854: PUSH
67855: LD_INT 22
67857: PUSH
67858: LD_INT 23
67860: PUSH
67861: LD_INT 25
67863: PUSH
67864: LD_INT 26
67866: PUSH
67867: LD_INT 30
67869: PUSH
67870: LD_INT 31
67872: PUSH
67873: LD_INT 32
67875: PUSH
67876: LD_INT 33
67878: PUSH
67879: LD_INT 34
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: LIST
67886: LIST
67887: LIST
67888: LIST
67889: LIST
67890: LIST
67891: LIST
67892: LIST
67893: LIST
67894: LIST
67895: LIST
67896: LIST
67897: LIST
67898: LIST
67899: LIST
67900: LIST
67901: LIST
67902: PUSH
67903: LD_INT 101
67905: PUSH
67906: LD_INT 102
67908: PUSH
67909: LD_INT 103
67911: PUSH
67912: LD_INT 106
67914: PUSH
67915: LD_INT 108
67917: PUSH
67918: LD_INT 112
67920: PUSH
67921: LD_INT 113
67923: PUSH
67924: LD_INT 114
67926: PUSH
67927: LD_INT 116
67929: PUSH
67930: LD_INT 117
67932: PUSH
67933: LD_INT 118
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: LIST
67940: LIST
67941: LIST
67942: LIST
67943: LIST
67944: LIST
67945: LIST
67946: LIST
67947: LIST
67948: PUSH
67949: EMPTY
67950: LIST
67951: LIST
67952: ST_TO_ADDR
67953: GO 68584
67955: LD_INT 17
67957: DOUBLE
67958: EQUAL
67959: IFTRUE 67963
67961: GO 68187
67963: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
67964: LD_ADDR_VAR 0 2
67968: PUSH
67969: LD_INT 1
67971: PUSH
67972: LD_INT 2
67974: PUSH
67975: LD_INT 3
67977: PUSH
67978: LD_INT 4
67980: PUSH
67981: LD_INT 5
67983: PUSH
67984: LD_INT 6
67986: PUSH
67987: LD_INT 7
67989: PUSH
67990: LD_INT 8
67992: PUSH
67993: LD_INT 9
67995: PUSH
67996: LD_INT 10
67998: PUSH
67999: LD_INT 11
68001: PUSH
68002: LD_INT 12
68004: PUSH
68005: LD_INT 13
68007: PUSH
68008: LD_INT 14
68010: PUSH
68011: LD_INT 15
68013: PUSH
68014: LD_INT 16
68016: PUSH
68017: LD_INT 17
68019: PUSH
68020: LD_INT 18
68022: PUSH
68023: LD_INT 19
68025: PUSH
68026: LD_INT 20
68028: PUSH
68029: LD_INT 21
68031: PUSH
68032: LD_INT 22
68034: PUSH
68035: LD_INT 23
68037: PUSH
68038: LD_INT 24
68040: PUSH
68041: LD_INT 25
68043: PUSH
68044: LD_INT 26
68046: PUSH
68047: LD_INT 27
68049: PUSH
68050: LD_INT 28
68052: PUSH
68053: LD_INT 29
68055: PUSH
68056: LD_INT 30
68058: PUSH
68059: LD_INT 31
68061: PUSH
68062: LD_INT 32
68064: PUSH
68065: LD_INT 33
68067: PUSH
68068: LD_INT 34
68070: PUSH
68071: LD_INT 36
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: LIST
68078: LIST
68079: LIST
68080: LIST
68081: LIST
68082: LIST
68083: LIST
68084: LIST
68085: LIST
68086: LIST
68087: LIST
68088: LIST
68089: LIST
68090: LIST
68091: LIST
68092: LIST
68093: LIST
68094: LIST
68095: LIST
68096: LIST
68097: LIST
68098: LIST
68099: LIST
68100: LIST
68101: LIST
68102: LIST
68103: LIST
68104: LIST
68105: LIST
68106: LIST
68107: LIST
68108: LIST
68109: LIST
68110: PUSH
68111: LD_INT 101
68113: PUSH
68114: LD_INT 102
68116: PUSH
68117: LD_INT 103
68119: PUSH
68120: LD_INT 104
68122: PUSH
68123: LD_INT 105
68125: PUSH
68126: LD_INT 106
68128: PUSH
68129: LD_INT 107
68131: PUSH
68132: LD_INT 108
68134: PUSH
68135: LD_INT 109
68137: PUSH
68138: LD_INT 110
68140: PUSH
68141: LD_INT 111
68143: PUSH
68144: LD_INT 112
68146: PUSH
68147: LD_INT 113
68149: PUSH
68150: LD_INT 114
68152: PUSH
68153: LD_INT 116
68155: PUSH
68156: LD_INT 117
68158: PUSH
68159: LD_INT 118
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: LIST
68166: LIST
68167: LIST
68168: LIST
68169: LIST
68170: LIST
68171: LIST
68172: LIST
68173: LIST
68174: LIST
68175: LIST
68176: LIST
68177: LIST
68178: LIST
68179: LIST
68180: PUSH
68181: EMPTY
68182: LIST
68183: LIST
68184: ST_TO_ADDR
68185: GO 68584
68187: LD_INT 18
68189: DOUBLE
68190: EQUAL
68191: IFTRUE 68195
68193: GO 68343
68195: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
68196: LD_ADDR_VAR 0 2
68200: PUSH
68201: LD_INT 2
68203: PUSH
68204: LD_INT 4
68206: PUSH
68207: LD_INT 5
68209: PUSH
68210: LD_INT 7
68212: PUSH
68213: LD_INT 11
68215: PUSH
68216: LD_INT 12
68218: PUSH
68219: LD_INT 15
68221: PUSH
68222: LD_INT 16
68224: PUSH
68225: LD_INT 20
68227: PUSH
68228: LD_INT 21
68230: PUSH
68231: LD_INT 22
68233: PUSH
68234: LD_INT 23
68236: PUSH
68237: LD_INT 25
68239: PUSH
68240: LD_INT 26
68242: PUSH
68243: LD_INT 30
68245: PUSH
68246: LD_INT 31
68248: PUSH
68249: LD_INT 32
68251: PUSH
68252: LD_INT 33
68254: PUSH
68255: LD_INT 34
68257: PUSH
68258: LD_INT 35
68260: PUSH
68261: LD_INT 36
68263: PUSH
68264: EMPTY
68265: LIST
68266: LIST
68267: LIST
68268: LIST
68269: LIST
68270: LIST
68271: LIST
68272: LIST
68273: LIST
68274: LIST
68275: LIST
68276: LIST
68277: LIST
68278: LIST
68279: LIST
68280: LIST
68281: LIST
68282: LIST
68283: LIST
68284: LIST
68285: LIST
68286: PUSH
68287: LD_INT 101
68289: PUSH
68290: LD_INT 102
68292: PUSH
68293: LD_INT 103
68295: PUSH
68296: LD_INT 106
68298: PUSH
68299: LD_INT 108
68301: PUSH
68302: LD_INT 112
68304: PUSH
68305: LD_INT 113
68307: PUSH
68308: LD_INT 114
68310: PUSH
68311: LD_INT 115
68313: PUSH
68314: LD_INT 116
68316: PUSH
68317: LD_INT 117
68319: PUSH
68320: LD_INT 118
68322: PUSH
68323: EMPTY
68324: LIST
68325: LIST
68326: LIST
68327: LIST
68328: LIST
68329: LIST
68330: LIST
68331: LIST
68332: LIST
68333: LIST
68334: LIST
68335: LIST
68336: PUSH
68337: EMPTY
68338: LIST
68339: LIST
68340: ST_TO_ADDR
68341: GO 68584
68343: LD_INT 19
68345: DOUBLE
68346: EQUAL
68347: IFTRUE 68351
68349: GO 68583
68351: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
68352: LD_ADDR_VAR 0 2
68356: PUSH
68357: LD_INT 1
68359: PUSH
68360: LD_INT 2
68362: PUSH
68363: LD_INT 3
68365: PUSH
68366: LD_INT 4
68368: PUSH
68369: LD_INT 5
68371: PUSH
68372: LD_INT 6
68374: PUSH
68375: LD_INT 7
68377: PUSH
68378: LD_INT 8
68380: PUSH
68381: LD_INT 9
68383: PUSH
68384: LD_INT 10
68386: PUSH
68387: LD_INT 11
68389: PUSH
68390: LD_INT 12
68392: PUSH
68393: LD_INT 13
68395: PUSH
68396: LD_INT 14
68398: PUSH
68399: LD_INT 15
68401: PUSH
68402: LD_INT 16
68404: PUSH
68405: LD_INT 17
68407: PUSH
68408: LD_INT 18
68410: PUSH
68411: LD_INT 19
68413: PUSH
68414: LD_INT 20
68416: PUSH
68417: LD_INT 21
68419: PUSH
68420: LD_INT 22
68422: PUSH
68423: LD_INT 23
68425: PUSH
68426: LD_INT 24
68428: PUSH
68429: LD_INT 25
68431: PUSH
68432: LD_INT 26
68434: PUSH
68435: LD_INT 27
68437: PUSH
68438: LD_INT 28
68440: PUSH
68441: LD_INT 29
68443: PUSH
68444: LD_INT 30
68446: PUSH
68447: LD_INT 31
68449: PUSH
68450: LD_INT 32
68452: PUSH
68453: LD_INT 33
68455: PUSH
68456: LD_INT 34
68458: PUSH
68459: LD_INT 35
68461: PUSH
68462: LD_INT 36
68464: PUSH
68465: EMPTY
68466: LIST
68467: LIST
68468: LIST
68469: LIST
68470: LIST
68471: LIST
68472: LIST
68473: LIST
68474: LIST
68475: LIST
68476: LIST
68477: LIST
68478: LIST
68479: LIST
68480: LIST
68481: LIST
68482: LIST
68483: LIST
68484: LIST
68485: LIST
68486: LIST
68487: LIST
68488: LIST
68489: LIST
68490: LIST
68491: LIST
68492: LIST
68493: LIST
68494: LIST
68495: LIST
68496: LIST
68497: LIST
68498: LIST
68499: LIST
68500: LIST
68501: LIST
68502: PUSH
68503: LD_INT 101
68505: PUSH
68506: LD_INT 102
68508: PUSH
68509: LD_INT 103
68511: PUSH
68512: LD_INT 104
68514: PUSH
68515: LD_INT 105
68517: PUSH
68518: LD_INT 106
68520: PUSH
68521: LD_INT 107
68523: PUSH
68524: LD_INT 108
68526: PUSH
68527: LD_INT 109
68529: PUSH
68530: LD_INT 110
68532: PUSH
68533: LD_INT 111
68535: PUSH
68536: LD_INT 112
68538: PUSH
68539: LD_INT 113
68541: PUSH
68542: LD_INT 114
68544: PUSH
68545: LD_INT 115
68547: PUSH
68548: LD_INT 116
68550: PUSH
68551: LD_INT 117
68553: PUSH
68554: LD_INT 118
68556: PUSH
68557: EMPTY
68558: LIST
68559: LIST
68560: LIST
68561: LIST
68562: LIST
68563: LIST
68564: LIST
68565: LIST
68566: LIST
68567: LIST
68568: LIST
68569: LIST
68570: LIST
68571: LIST
68572: LIST
68573: LIST
68574: LIST
68575: LIST
68576: PUSH
68577: EMPTY
68578: LIST
68579: LIST
68580: ST_TO_ADDR
68581: GO 68584
68583: POP
// end else
68584: GO 68815
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
68586: LD_ADDR_VAR 0 2
68590: PUSH
68591: LD_INT 1
68593: PUSH
68594: LD_INT 2
68596: PUSH
68597: LD_INT 3
68599: PUSH
68600: LD_INT 4
68602: PUSH
68603: LD_INT 5
68605: PUSH
68606: LD_INT 6
68608: PUSH
68609: LD_INT 7
68611: PUSH
68612: LD_INT 8
68614: PUSH
68615: LD_INT 9
68617: PUSH
68618: LD_INT 10
68620: PUSH
68621: LD_INT 11
68623: PUSH
68624: LD_INT 12
68626: PUSH
68627: LD_INT 13
68629: PUSH
68630: LD_INT 14
68632: PUSH
68633: LD_INT 15
68635: PUSH
68636: LD_INT 16
68638: PUSH
68639: LD_INT 17
68641: PUSH
68642: LD_INT 18
68644: PUSH
68645: LD_INT 19
68647: PUSH
68648: LD_INT 20
68650: PUSH
68651: LD_INT 21
68653: PUSH
68654: LD_INT 22
68656: PUSH
68657: LD_INT 23
68659: PUSH
68660: LD_INT 24
68662: PUSH
68663: LD_INT 25
68665: PUSH
68666: LD_INT 26
68668: PUSH
68669: LD_INT 27
68671: PUSH
68672: LD_INT 28
68674: PUSH
68675: LD_INT 29
68677: PUSH
68678: LD_INT 30
68680: PUSH
68681: LD_INT 31
68683: PUSH
68684: LD_INT 32
68686: PUSH
68687: LD_INT 33
68689: PUSH
68690: LD_INT 34
68692: PUSH
68693: LD_INT 35
68695: PUSH
68696: LD_INT 36
68698: PUSH
68699: EMPTY
68700: LIST
68701: LIST
68702: LIST
68703: LIST
68704: LIST
68705: LIST
68706: LIST
68707: LIST
68708: LIST
68709: LIST
68710: LIST
68711: LIST
68712: LIST
68713: LIST
68714: LIST
68715: LIST
68716: LIST
68717: LIST
68718: LIST
68719: LIST
68720: LIST
68721: LIST
68722: LIST
68723: LIST
68724: LIST
68725: LIST
68726: LIST
68727: LIST
68728: LIST
68729: LIST
68730: LIST
68731: LIST
68732: LIST
68733: LIST
68734: LIST
68735: LIST
68736: PUSH
68737: LD_INT 101
68739: PUSH
68740: LD_INT 102
68742: PUSH
68743: LD_INT 103
68745: PUSH
68746: LD_INT 104
68748: PUSH
68749: LD_INT 105
68751: PUSH
68752: LD_INT 106
68754: PUSH
68755: LD_INT 107
68757: PUSH
68758: LD_INT 108
68760: PUSH
68761: LD_INT 109
68763: PUSH
68764: LD_INT 110
68766: PUSH
68767: LD_INT 111
68769: PUSH
68770: LD_INT 112
68772: PUSH
68773: LD_INT 113
68775: PUSH
68776: LD_INT 114
68778: PUSH
68779: LD_INT 115
68781: PUSH
68782: LD_INT 116
68784: PUSH
68785: LD_INT 117
68787: PUSH
68788: LD_INT 118
68790: PUSH
68791: EMPTY
68792: LIST
68793: LIST
68794: LIST
68795: LIST
68796: LIST
68797: LIST
68798: LIST
68799: LIST
68800: LIST
68801: LIST
68802: LIST
68803: LIST
68804: LIST
68805: LIST
68806: LIST
68807: LIST
68808: LIST
68809: LIST
68810: PUSH
68811: EMPTY
68812: LIST
68813: LIST
68814: ST_TO_ADDR
// if result then
68815: LD_VAR 0 2
68819: IFFALSE 69605
// begin normal :=  ;
68821: LD_ADDR_VAR 0 5
68825: PUSH
68826: LD_STRING 
68828: ST_TO_ADDR
// hardcore :=  ;
68829: LD_ADDR_VAR 0 6
68833: PUSH
68834: LD_STRING 
68836: ST_TO_ADDR
// active :=  ;
68837: LD_ADDR_VAR 0 7
68841: PUSH
68842: LD_STRING 
68844: ST_TO_ADDR
// for i = 1 to normalCounter do
68845: LD_ADDR_VAR 0 8
68849: PUSH
68850: DOUBLE
68851: LD_INT 1
68853: DEC
68854: ST_TO_ADDR
68855: LD_EXP 48
68859: PUSH
68860: FOR_TO
68861: IFFALSE 68962
// begin tmp := 0 ;
68863: LD_ADDR_VAR 0 3
68867: PUSH
68868: LD_STRING 0
68870: ST_TO_ADDR
// if result [ 1 ] then
68871: LD_VAR 0 2
68875: PUSH
68876: LD_INT 1
68878: ARRAY
68879: IFFALSE 68944
// if result [ 1 ] [ 1 ] = i then
68881: LD_VAR 0 2
68885: PUSH
68886: LD_INT 1
68888: ARRAY
68889: PUSH
68890: LD_INT 1
68892: ARRAY
68893: PUSH
68894: LD_VAR 0 8
68898: EQUAL
68899: IFFALSE 68944
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
68901: LD_ADDR_VAR 0 2
68905: PUSH
68906: LD_VAR 0 2
68910: PPUSH
68911: LD_INT 1
68913: PPUSH
68914: LD_VAR 0 2
68918: PUSH
68919: LD_INT 1
68921: ARRAY
68922: PPUSH
68923: LD_INT 1
68925: PPUSH
68926: CALL_OW 3
68930: PPUSH
68931: CALL_OW 1
68935: ST_TO_ADDR
// tmp := 1 ;
68936: LD_ADDR_VAR 0 3
68940: PUSH
68941: LD_STRING 1
68943: ST_TO_ADDR
// end ; normal := normal & tmp ;
68944: LD_ADDR_VAR 0 5
68948: PUSH
68949: LD_VAR 0 5
68953: PUSH
68954: LD_VAR 0 3
68958: STR
68959: ST_TO_ADDR
// end ;
68960: GO 68860
68962: POP
68963: POP
// for i = 1 to hardcoreCounter do
68964: LD_ADDR_VAR 0 8
68968: PUSH
68969: DOUBLE
68970: LD_INT 1
68972: DEC
68973: ST_TO_ADDR
68974: LD_EXP 49
68978: PUSH
68979: FOR_TO
68980: IFFALSE 69085
// begin tmp := 0 ;
68982: LD_ADDR_VAR 0 3
68986: PUSH
68987: LD_STRING 0
68989: ST_TO_ADDR
// if result [ 2 ] then
68990: LD_VAR 0 2
68994: PUSH
68995: LD_INT 2
68997: ARRAY
68998: IFFALSE 69067
// if result [ 2 ] [ 1 ] = 100 + i then
69000: LD_VAR 0 2
69004: PUSH
69005: LD_INT 2
69007: ARRAY
69008: PUSH
69009: LD_INT 1
69011: ARRAY
69012: PUSH
69013: LD_INT 100
69015: PUSH
69016: LD_VAR 0 8
69020: PLUS
69021: EQUAL
69022: IFFALSE 69067
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
69024: LD_ADDR_VAR 0 2
69028: PUSH
69029: LD_VAR 0 2
69033: PPUSH
69034: LD_INT 2
69036: PPUSH
69037: LD_VAR 0 2
69041: PUSH
69042: LD_INT 2
69044: ARRAY
69045: PPUSH
69046: LD_INT 1
69048: PPUSH
69049: CALL_OW 3
69053: PPUSH
69054: CALL_OW 1
69058: ST_TO_ADDR
// tmp := 1 ;
69059: LD_ADDR_VAR 0 3
69063: PUSH
69064: LD_STRING 1
69066: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
69067: LD_ADDR_VAR 0 6
69071: PUSH
69072: LD_VAR 0 6
69076: PUSH
69077: LD_VAR 0 3
69081: STR
69082: ST_TO_ADDR
// end ;
69083: GO 68979
69085: POP
69086: POP
// if isGameLoad then
69087: LD_VAR 0 1
69091: IFFALSE 69566
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
69093: LD_ADDR_VAR 0 4
69097: PUSH
69098: LD_EXP 52
69102: PUSH
69103: LD_EXP 51
69107: PUSH
69108: LD_EXP 53
69112: PUSH
69113: LD_EXP 50
69117: PUSH
69118: LD_EXP 54
69122: PUSH
69123: LD_EXP 55
69127: PUSH
69128: LD_EXP 56
69132: PUSH
69133: LD_EXP 57
69137: PUSH
69138: LD_EXP 58
69142: PUSH
69143: LD_EXP 59
69147: PUSH
69148: LD_EXP 60
69152: PUSH
69153: LD_EXP 61
69157: PUSH
69158: LD_EXP 62
69162: PUSH
69163: LD_EXP 63
69167: PUSH
69168: LD_EXP 71
69172: PUSH
69173: LD_EXP 72
69177: PUSH
69178: LD_EXP 73
69182: PUSH
69183: LD_EXP 74
69187: PUSH
69188: LD_EXP 76
69192: PUSH
69193: LD_EXP 77
69197: PUSH
69198: LD_EXP 78
69202: PUSH
69203: LD_EXP 81
69207: PUSH
69208: LD_EXP 83
69212: PUSH
69213: LD_EXP 84
69217: PUSH
69218: LD_EXP 85
69222: PUSH
69223: LD_EXP 87
69227: PUSH
69228: LD_EXP 88
69232: PUSH
69233: LD_EXP 91
69237: PUSH
69238: LD_EXP 92
69242: PUSH
69243: LD_EXP 93
69247: PUSH
69248: LD_EXP 94
69252: PUSH
69253: LD_EXP 95
69257: PUSH
69258: LD_EXP 96
69262: PUSH
69263: LD_EXP 97
69267: PUSH
69268: LD_EXP 98
69272: PUSH
69273: LD_EXP 99
69277: PUSH
69278: LD_EXP 64
69282: PUSH
69283: LD_EXP 65
69287: PUSH
69288: LD_EXP 68
69292: PUSH
69293: LD_EXP 69
69297: PUSH
69298: LD_EXP 70
69302: PUSH
69303: LD_EXP 66
69307: PUSH
69308: LD_EXP 67
69312: PUSH
69313: LD_EXP 75
69317: PUSH
69318: LD_EXP 79
69322: PUSH
69323: LD_EXP 80
69327: PUSH
69328: LD_EXP 82
69332: PUSH
69333: LD_EXP 86
69337: PUSH
69338: LD_EXP 89
69342: PUSH
69343: LD_EXP 90
69347: PUSH
69348: LD_EXP 100
69352: PUSH
69353: LD_EXP 101
69357: PUSH
69358: LD_EXP 102
69362: PUSH
69363: LD_EXP 103
69367: PUSH
69368: EMPTY
69369: LIST
69370: LIST
69371: LIST
69372: LIST
69373: LIST
69374: LIST
69375: LIST
69376: LIST
69377: LIST
69378: LIST
69379: LIST
69380: LIST
69381: LIST
69382: LIST
69383: LIST
69384: LIST
69385: LIST
69386: LIST
69387: LIST
69388: LIST
69389: LIST
69390: LIST
69391: LIST
69392: LIST
69393: LIST
69394: LIST
69395: LIST
69396: LIST
69397: LIST
69398: LIST
69399: LIST
69400: LIST
69401: LIST
69402: LIST
69403: LIST
69404: LIST
69405: LIST
69406: LIST
69407: LIST
69408: LIST
69409: LIST
69410: LIST
69411: LIST
69412: LIST
69413: LIST
69414: LIST
69415: LIST
69416: LIST
69417: LIST
69418: LIST
69419: LIST
69420: LIST
69421: LIST
69422: LIST
69423: ST_TO_ADDR
// tmp :=  ;
69424: LD_ADDR_VAR 0 3
69428: PUSH
69429: LD_STRING 
69431: ST_TO_ADDR
// for i = 1 to normalCounter do
69432: LD_ADDR_VAR 0 8
69436: PUSH
69437: DOUBLE
69438: LD_INT 1
69440: DEC
69441: ST_TO_ADDR
69442: LD_EXP 48
69446: PUSH
69447: FOR_TO
69448: IFFALSE 69484
// begin if flags [ i ] then
69450: LD_VAR 0 4
69454: PUSH
69455: LD_VAR 0 8
69459: ARRAY
69460: IFFALSE 69482
// tmp := tmp & i & ; ;
69462: LD_ADDR_VAR 0 3
69466: PUSH
69467: LD_VAR 0 3
69471: PUSH
69472: LD_VAR 0 8
69476: STR
69477: PUSH
69478: LD_STRING ;
69480: STR
69481: ST_TO_ADDR
// end ;
69482: GO 69447
69484: POP
69485: POP
// for i = 1 to hardcoreCounter do
69486: LD_ADDR_VAR 0 8
69490: PUSH
69491: DOUBLE
69492: LD_INT 1
69494: DEC
69495: ST_TO_ADDR
69496: LD_EXP 49
69500: PUSH
69501: FOR_TO
69502: IFFALSE 69548
// begin if flags [ normalCounter + i ] then
69504: LD_VAR 0 4
69508: PUSH
69509: LD_EXP 48
69513: PUSH
69514: LD_VAR 0 8
69518: PLUS
69519: ARRAY
69520: IFFALSE 69546
// tmp := tmp & ( 100 + i ) & ; ;
69522: LD_ADDR_VAR 0 3
69526: PUSH
69527: LD_VAR 0 3
69531: PUSH
69532: LD_INT 100
69534: PUSH
69535: LD_VAR 0 8
69539: PLUS
69540: STR
69541: PUSH
69542: LD_STRING ;
69544: STR
69545: ST_TO_ADDR
// end ;
69546: GO 69501
69548: POP
69549: POP
// if tmp then
69550: LD_VAR 0 3
69554: IFFALSE 69566
// active := tmp ;
69556: LD_ADDR_VAR 0 7
69560: PUSH
69561: LD_VAR 0 3
69565: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
69566: LD_STRING getStreamItemsFromMission("
69568: PUSH
69569: LD_VAR 0 5
69573: STR
69574: PUSH
69575: LD_STRING ","
69577: STR
69578: PUSH
69579: LD_VAR 0 6
69583: STR
69584: PUSH
69585: LD_STRING ","
69587: STR
69588: PUSH
69589: LD_VAR 0 7
69593: STR
69594: PUSH
69595: LD_STRING ")
69597: STR
69598: PPUSH
69599: CALL_OW 559
// end else
69603: GO 69612
// ToLua ( getStreamItemsFromMission("","","") ) ;
69605: LD_STRING getStreamItemsFromMission("","","")
69607: PPUSH
69608: CALL_OW 559
// end ;
69612: LD_VAR 0 2
69616: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
69617: LD_EXP 47
69621: PUSH
69622: LD_EXP 52
69626: AND
69627: IFFALSE 69751
69629: GO 69631
69631: DISABLE
69632: LD_INT 0
69634: PPUSH
69635: PPUSH
// begin enable ;
69636: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
69637: LD_ADDR_VAR 0 2
69641: PUSH
69642: LD_INT 22
69644: PUSH
69645: LD_OWVAR 2
69649: PUSH
69650: EMPTY
69651: LIST
69652: LIST
69653: PUSH
69654: LD_INT 2
69656: PUSH
69657: LD_INT 34
69659: PUSH
69660: LD_INT 7
69662: PUSH
69663: EMPTY
69664: LIST
69665: LIST
69666: PUSH
69667: LD_INT 34
69669: PUSH
69670: LD_INT 45
69672: PUSH
69673: EMPTY
69674: LIST
69675: LIST
69676: PUSH
69677: LD_INT 34
69679: PUSH
69680: LD_INT 28
69682: PUSH
69683: EMPTY
69684: LIST
69685: LIST
69686: PUSH
69687: LD_INT 34
69689: PUSH
69690: LD_INT 47
69692: PUSH
69693: EMPTY
69694: LIST
69695: LIST
69696: PUSH
69697: EMPTY
69698: LIST
69699: LIST
69700: LIST
69701: LIST
69702: LIST
69703: PUSH
69704: EMPTY
69705: LIST
69706: LIST
69707: PPUSH
69708: CALL_OW 69
69712: ST_TO_ADDR
// if not tmp then
69713: LD_VAR 0 2
69717: NOT
69718: IFFALSE 69722
// exit ;
69720: GO 69751
// for i in tmp do
69722: LD_ADDR_VAR 0 1
69726: PUSH
69727: LD_VAR 0 2
69731: PUSH
69732: FOR_IN
69733: IFFALSE 69749
// begin SetLives ( i , 0 ) ;
69735: LD_VAR 0 1
69739: PPUSH
69740: LD_INT 0
69742: PPUSH
69743: CALL_OW 234
// end ;
69747: GO 69732
69749: POP
69750: POP
// end ;
69751: PPOPN 2
69753: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
69754: LD_EXP 47
69758: PUSH
69759: LD_EXP 53
69763: AND
69764: IFFALSE 69848
69766: GO 69768
69768: DISABLE
69769: LD_INT 0
69771: PPUSH
69772: PPUSH
// begin enable ;
69773: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
69774: LD_ADDR_VAR 0 2
69778: PUSH
69779: LD_INT 22
69781: PUSH
69782: LD_OWVAR 2
69786: PUSH
69787: EMPTY
69788: LIST
69789: LIST
69790: PUSH
69791: LD_INT 32
69793: PUSH
69794: LD_INT 3
69796: PUSH
69797: EMPTY
69798: LIST
69799: LIST
69800: PUSH
69801: EMPTY
69802: LIST
69803: LIST
69804: PPUSH
69805: CALL_OW 69
69809: ST_TO_ADDR
// if not tmp then
69810: LD_VAR 0 2
69814: NOT
69815: IFFALSE 69819
// exit ;
69817: GO 69848
// for i in tmp do
69819: LD_ADDR_VAR 0 1
69823: PUSH
69824: LD_VAR 0 2
69828: PUSH
69829: FOR_IN
69830: IFFALSE 69846
// begin SetLives ( i , 0 ) ;
69832: LD_VAR 0 1
69836: PPUSH
69837: LD_INT 0
69839: PPUSH
69840: CALL_OW 234
// end ;
69844: GO 69829
69846: POP
69847: POP
// end ;
69848: PPOPN 2
69850: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
69851: LD_EXP 47
69855: PUSH
69856: LD_EXP 50
69860: AND
69861: IFFALSE 69954
69863: GO 69865
69865: DISABLE
69866: LD_INT 0
69868: PPUSH
// begin enable ;
69869: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
69870: LD_ADDR_VAR 0 1
69874: PUSH
69875: LD_INT 22
69877: PUSH
69878: LD_OWVAR 2
69882: PUSH
69883: EMPTY
69884: LIST
69885: LIST
69886: PUSH
69887: LD_INT 2
69889: PUSH
69890: LD_INT 25
69892: PUSH
69893: LD_INT 5
69895: PUSH
69896: EMPTY
69897: LIST
69898: LIST
69899: PUSH
69900: LD_INT 25
69902: PUSH
69903: LD_INT 9
69905: PUSH
69906: EMPTY
69907: LIST
69908: LIST
69909: PUSH
69910: LD_INT 25
69912: PUSH
69913: LD_INT 8
69915: PUSH
69916: EMPTY
69917: LIST
69918: LIST
69919: PUSH
69920: EMPTY
69921: LIST
69922: LIST
69923: LIST
69924: LIST
69925: PUSH
69926: EMPTY
69927: LIST
69928: LIST
69929: PPUSH
69930: CALL_OW 69
69934: PUSH
69935: FOR_IN
69936: IFFALSE 69952
// begin SetClass ( i , 1 ) ;
69938: LD_VAR 0 1
69942: PPUSH
69943: LD_INT 1
69945: PPUSH
69946: CALL_OW 336
// end ;
69950: GO 69935
69952: POP
69953: POP
// end ;
69954: PPOPN 1
69956: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
69957: LD_EXP 47
69961: PUSH
69962: LD_EXP 51
69966: AND
69967: PUSH
69968: LD_OWVAR 65
69972: PUSH
69973: LD_INT 7
69975: LESS
69976: AND
69977: IFFALSE 69991
69979: GO 69981
69981: DISABLE
// begin enable ;
69982: ENABLE
// game_speed := 7 ;
69983: LD_ADDR_OWVAR 65
69987: PUSH
69988: LD_INT 7
69990: ST_TO_ADDR
// end ;
69991: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
69992: LD_EXP 47
69996: PUSH
69997: LD_EXP 54
70001: AND
70002: IFFALSE 70204
70004: GO 70006
70006: DISABLE
70007: LD_INT 0
70009: PPUSH
70010: PPUSH
70011: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
70012: LD_ADDR_VAR 0 3
70016: PUSH
70017: LD_INT 81
70019: PUSH
70020: LD_OWVAR 2
70024: PUSH
70025: EMPTY
70026: LIST
70027: LIST
70028: PUSH
70029: LD_INT 21
70031: PUSH
70032: LD_INT 1
70034: PUSH
70035: EMPTY
70036: LIST
70037: LIST
70038: PUSH
70039: EMPTY
70040: LIST
70041: LIST
70042: PPUSH
70043: CALL_OW 69
70047: ST_TO_ADDR
// if not tmp then
70048: LD_VAR 0 3
70052: NOT
70053: IFFALSE 70057
// exit ;
70055: GO 70204
// if tmp > 5 then
70057: LD_VAR 0 3
70061: PUSH
70062: LD_INT 5
70064: GREATER
70065: IFFALSE 70077
// k := 5 else
70067: LD_ADDR_VAR 0 2
70071: PUSH
70072: LD_INT 5
70074: ST_TO_ADDR
70075: GO 70087
// k := tmp ;
70077: LD_ADDR_VAR 0 2
70081: PUSH
70082: LD_VAR 0 3
70086: ST_TO_ADDR
// for i := 1 to k do
70087: LD_ADDR_VAR 0 1
70091: PUSH
70092: DOUBLE
70093: LD_INT 1
70095: DEC
70096: ST_TO_ADDR
70097: LD_VAR 0 2
70101: PUSH
70102: FOR_TO
70103: IFFALSE 70202
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
70105: LD_VAR 0 3
70109: PUSH
70110: LD_VAR 0 1
70114: ARRAY
70115: PPUSH
70116: LD_VAR 0 1
70120: PUSH
70121: LD_INT 4
70123: MOD
70124: PUSH
70125: LD_INT 1
70127: PLUS
70128: PPUSH
70129: CALL_OW 259
70133: PUSH
70134: LD_INT 10
70136: LESS
70137: IFFALSE 70200
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
70139: LD_VAR 0 3
70143: PUSH
70144: LD_VAR 0 1
70148: ARRAY
70149: PPUSH
70150: LD_VAR 0 1
70154: PUSH
70155: LD_INT 4
70157: MOD
70158: PUSH
70159: LD_INT 1
70161: PLUS
70162: PPUSH
70163: LD_VAR 0 3
70167: PUSH
70168: LD_VAR 0 1
70172: ARRAY
70173: PPUSH
70174: LD_VAR 0 1
70178: PUSH
70179: LD_INT 4
70181: MOD
70182: PUSH
70183: LD_INT 1
70185: PLUS
70186: PPUSH
70187: CALL_OW 259
70191: PUSH
70192: LD_INT 1
70194: PLUS
70195: PPUSH
70196: CALL_OW 237
70200: GO 70102
70202: POP
70203: POP
// end ;
70204: PPOPN 3
70206: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
70207: LD_EXP 47
70211: PUSH
70212: LD_EXP 55
70216: AND
70217: IFFALSE 70237
70219: GO 70221
70221: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
70222: LD_INT 4
70224: PPUSH
70225: LD_OWVAR 2
70229: PPUSH
70230: LD_INT 0
70232: PPUSH
70233: CALL_OW 324
70237: END
// every 0 0$1 trigger StreamModeActive and sShovel do
70238: LD_EXP 47
70242: PUSH
70243: LD_EXP 84
70247: AND
70248: IFFALSE 70268
70250: GO 70252
70252: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
70253: LD_INT 19
70255: PPUSH
70256: LD_OWVAR 2
70260: PPUSH
70261: LD_INT 0
70263: PPUSH
70264: CALL_OW 324
70268: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
70269: LD_EXP 47
70273: PUSH
70274: LD_EXP 56
70278: AND
70279: IFFALSE 70381
70281: GO 70283
70283: DISABLE
70284: LD_INT 0
70286: PPUSH
70287: PPUSH
// begin enable ;
70288: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
70289: LD_ADDR_VAR 0 2
70293: PUSH
70294: LD_INT 22
70296: PUSH
70297: LD_OWVAR 2
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: PUSH
70306: LD_INT 2
70308: PUSH
70309: LD_INT 34
70311: PUSH
70312: LD_INT 11
70314: PUSH
70315: EMPTY
70316: LIST
70317: LIST
70318: PUSH
70319: LD_INT 34
70321: PUSH
70322: LD_INT 30
70324: PUSH
70325: EMPTY
70326: LIST
70327: LIST
70328: PUSH
70329: EMPTY
70330: LIST
70331: LIST
70332: LIST
70333: PUSH
70334: EMPTY
70335: LIST
70336: LIST
70337: PPUSH
70338: CALL_OW 69
70342: ST_TO_ADDR
// if not tmp then
70343: LD_VAR 0 2
70347: NOT
70348: IFFALSE 70352
// exit ;
70350: GO 70381
// for i in tmp do
70352: LD_ADDR_VAR 0 1
70356: PUSH
70357: LD_VAR 0 2
70361: PUSH
70362: FOR_IN
70363: IFFALSE 70379
// begin SetLives ( i , 0 ) ;
70365: LD_VAR 0 1
70369: PPUSH
70370: LD_INT 0
70372: PPUSH
70373: CALL_OW 234
// end ;
70377: GO 70362
70379: POP
70380: POP
// end ;
70381: PPOPN 2
70383: END
// every 0 0$1 trigger StreamModeActive and sBunker do
70384: LD_EXP 47
70388: PUSH
70389: LD_EXP 57
70393: AND
70394: IFFALSE 70414
70396: GO 70398
70398: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
70399: LD_INT 32
70401: PPUSH
70402: LD_OWVAR 2
70406: PPUSH
70407: LD_INT 0
70409: PPUSH
70410: CALL_OW 324
70414: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
70415: LD_EXP 47
70419: PUSH
70420: LD_EXP 58
70424: AND
70425: IFFALSE 70606
70427: GO 70429
70429: DISABLE
70430: LD_INT 0
70432: PPUSH
70433: PPUSH
70434: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
70435: LD_ADDR_VAR 0 2
70439: PUSH
70440: LD_INT 22
70442: PUSH
70443: LD_OWVAR 2
70447: PUSH
70448: EMPTY
70449: LIST
70450: LIST
70451: PUSH
70452: LD_INT 33
70454: PUSH
70455: LD_INT 3
70457: PUSH
70458: EMPTY
70459: LIST
70460: LIST
70461: PUSH
70462: EMPTY
70463: LIST
70464: LIST
70465: PPUSH
70466: CALL_OW 69
70470: ST_TO_ADDR
// if not tmp then
70471: LD_VAR 0 2
70475: NOT
70476: IFFALSE 70480
// exit ;
70478: GO 70606
// side := 0 ;
70480: LD_ADDR_VAR 0 3
70484: PUSH
70485: LD_INT 0
70487: ST_TO_ADDR
// for i := 1 to 8 do
70488: LD_ADDR_VAR 0 1
70492: PUSH
70493: DOUBLE
70494: LD_INT 1
70496: DEC
70497: ST_TO_ADDR
70498: LD_INT 8
70500: PUSH
70501: FOR_TO
70502: IFFALSE 70550
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
70504: LD_OWVAR 2
70508: PUSH
70509: LD_VAR 0 1
70513: NONEQUAL
70514: PUSH
70515: LD_OWVAR 2
70519: PPUSH
70520: LD_VAR 0 1
70524: PPUSH
70525: CALL_OW 81
70529: PUSH
70530: LD_INT 2
70532: EQUAL
70533: AND
70534: IFFALSE 70548
// begin side := i ;
70536: LD_ADDR_VAR 0 3
70540: PUSH
70541: LD_VAR 0 1
70545: ST_TO_ADDR
// break ;
70546: GO 70550
// end ;
70548: GO 70501
70550: POP
70551: POP
// if not side then
70552: LD_VAR 0 3
70556: NOT
70557: IFFALSE 70561
// exit ;
70559: GO 70606
// for i := 1 to tmp do
70561: LD_ADDR_VAR 0 1
70565: PUSH
70566: DOUBLE
70567: LD_INT 1
70569: DEC
70570: ST_TO_ADDR
70571: LD_VAR 0 2
70575: PUSH
70576: FOR_TO
70577: IFFALSE 70604
// if Prob ( 60 ) then
70579: LD_INT 60
70581: PPUSH
70582: CALL_OW 13
70586: IFFALSE 70602
// SetSide ( i , side ) ;
70588: LD_VAR 0 1
70592: PPUSH
70593: LD_VAR 0 3
70597: PPUSH
70598: CALL_OW 235
70602: GO 70576
70604: POP
70605: POP
// end ;
70606: PPOPN 3
70608: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
70609: LD_EXP 47
70613: PUSH
70614: LD_EXP 60
70618: AND
70619: IFFALSE 70738
70621: GO 70623
70623: DISABLE
70624: LD_INT 0
70626: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
70627: LD_ADDR_VAR 0 1
70631: PUSH
70632: LD_INT 22
70634: PUSH
70635: LD_OWVAR 2
70639: PUSH
70640: EMPTY
70641: LIST
70642: LIST
70643: PUSH
70644: LD_INT 21
70646: PUSH
70647: LD_INT 1
70649: PUSH
70650: EMPTY
70651: LIST
70652: LIST
70653: PUSH
70654: LD_INT 3
70656: PUSH
70657: LD_INT 23
70659: PUSH
70660: LD_INT 0
70662: PUSH
70663: EMPTY
70664: LIST
70665: LIST
70666: PUSH
70667: EMPTY
70668: LIST
70669: LIST
70670: PUSH
70671: EMPTY
70672: LIST
70673: LIST
70674: LIST
70675: PPUSH
70676: CALL_OW 69
70680: PUSH
70681: FOR_IN
70682: IFFALSE 70736
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
70684: LD_VAR 0 1
70688: PPUSH
70689: CALL_OW 257
70693: PUSH
70694: LD_INT 1
70696: PUSH
70697: LD_INT 2
70699: PUSH
70700: LD_INT 3
70702: PUSH
70703: LD_INT 4
70705: PUSH
70706: EMPTY
70707: LIST
70708: LIST
70709: LIST
70710: LIST
70711: IN
70712: IFFALSE 70734
// SetClass ( un , rand ( 1 , 4 ) ) ;
70714: LD_VAR 0 1
70718: PPUSH
70719: LD_INT 1
70721: PPUSH
70722: LD_INT 4
70724: PPUSH
70725: CALL_OW 12
70729: PPUSH
70730: CALL_OW 336
70734: GO 70681
70736: POP
70737: POP
// end ;
70738: PPOPN 1
70740: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
70741: LD_EXP 47
70745: PUSH
70746: LD_EXP 59
70750: AND
70751: IFFALSE 70830
70753: GO 70755
70755: DISABLE
70756: LD_INT 0
70758: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
70759: LD_ADDR_VAR 0 1
70763: PUSH
70764: LD_INT 22
70766: PUSH
70767: LD_OWVAR 2
70771: PUSH
70772: EMPTY
70773: LIST
70774: LIST
70775: PUSH
70776: LD_INT 21
70778: PUSH
70779: LD_INT 3
70781: PUSH
70782: EMPTY
70783: LIST
70784: LIST
70785: PUSH
70786: EMPTY
70787: LIST
70788: LIST
70789: PPUSH
70790: CALL_OW 69
70794: ST_TO_ADDR
// if not tmp then
70795: LD_VAR 0 1
70799: NOT
70800: IFFALSE 70804
// exit ;
70802: GO 70830
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
70804: LD_VAR 0 1
70808: PUSH
70809: LD_INT 1
70811: PPUSH
70812: LD_VAR 0 1
70816: PPUSH
70817: CALL_OW 12
70821: ARRAY
70822: PPUSH
70823: LD_INT 100
70825: PPUSH
70826: CALL_OW 234
// end ;
70830: PPOPN 1
70832: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
70833: LD_EXP 47
70837: PUSH
70838: LD_EXP 61
70842: AND
70843: IFFALSE 70941
70845: GO 70847
70847: DISABLE
70848: LD_INT 0
70850: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
70851: LD_ADDR_VAR 0 1
70855: PUSH
70856: LD_INT 22
70858: PUSH
70859: LD_OWVAR 2
70863: PUSH
70864: EMPTY
70865: LIST
70866: LIST
70867: PUSH
70868: LD_INT 21
70870: PUSH
70871: LD_INT 1
70873: PUSH
70874: EMPTY
70875: LIST
70876: LIST
70877: PUSH
70878: EMPTY
70879: LIST
70880: LIST
70881: PPUSH
70882: CALL_OW 69
70886: ST_TO_ADDR
// if not tmp then
70887: LD_VAR 0 1
70891: NOT
70892: IFFALSE 70896
// exit ;
70894: GO 70941
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
70896: LD_VAR 0 1
70900: PUSH
70901: LD_INT 1
70903: PPUSH
70904: LD_VAR 0 1
70908: PPUSH
70909: CALL_OW 12
70913: ARRAY
70914: PPUSH
70915: LD_INT 1
70917: PPUSH
70918: LD_INT 4
70920: PPUSH
70921: CALL_OW 12
70925: PPUSH
70926: LD_INT 3000
70928: PPUSH
70929: LD_INT 9000
70931: PPUSH
70932: CALL_OW 12
70936: PPUSH
70937: CALL_OW 492
// end ;
70941: PPOPN 1
70943: END
// every 0 0$1 trigger StreamModeActive and sDepot do
70944: LD_EXP 47
70948: PUSH
70949: LD_EXP 62
70953: AND
70954: IFFALSE 70974
70956: GO 70958
70958: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
70959: LD_INT 1
70961: PPUSH
70962: LD_OWVAR 2
70966: PPUSH
70967: LD_INT 0
70969: PPUSH
70970: CALL_OW 324
70974: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
70975: LD_EXP 47
70979: PUSH
70980: LD_EXP 63
70984: AND
70985: IFFALSE 71068
70987: GO 70989
70989: DISABLE
70990: LD_INT 0
70992: PPUSH
70993: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
70994: LD_ADDR_VAR 0 2
70998: PUSH
70999: LD_INT 22
71001: PUSH
71002: LD_OWVAR 2
71006: PUSH
71007: EMPTY
71008: LIST
71009: LIST
71010: PUSH
71011: LD_INT 21
71013: PUSH
71014: LD_INT 3
71016: PUSH
71017: EMPTY
71018: LIST
71019: LIST
71020: PUSH
71021: EMPTY
71022: LIST
71023: LIST
71024: PPUSH
71025: CALL_OW 69
71029: ST_TO_ADDR
// if not tmp then
71030: LD_VAR 0 2
71034: NOT
71035: IFFALSE 71039
// exit ;
71037: GO 71068
// for i in tmp do
71039: LD_ADDR_VAR 0 1
71043: PUSH
71044: LD_VAR 0 2
71048: PUSH
71049: FOR_IN
71050: IFFALSE 71066
// SetBLevel ( i , 10 ) ;
71052: LD_VAR 0 1
71056: PPUSH
71057: LD_INT 10
71059: PPUSH
71060: CALL_OW 241
71064: GO 71049
71066: POP
71067: POP
// end ;
71068: PPOPN 2
71070: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
71071: LD_EXP 47
71075: PUSH
71076: LD_EXP 64
71080: AND
71081: IFFALSE 71192
71083: GO 71085
71085: DISABLE
71086: LD_INT 0
71088: PPUSH
71089: PPUSH
71090: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71091: LD_ADDR_VAR 0 3
71095: PUSH
71096: LD_INT 22
71098: PUSH
71099: LD_OWVAR 2
71103: PUSH
71104: EMPTY
71105: LIST
71106: LIST
71107: PUSH
71108: LD_INT 25
71110: PUSH
71111: LD_INT 1
71113: PUSH
71114: EMPTY
71115: LIST
71116: LIST
71117: PUSH
71118: EMPTY
71119: LIST
71120: LIST
71121: PPUSH
71122: CALL_OW 69
71126: ST_TO_ADDR
// if not tmp then
71127: LD_VAR 0 3
71131: NOT
71132: IFFALSE 71136
// exit ;
71134: GO 71192
// un := tmp [ rand ( 1 , tmp ) ] ;
71136: LD_ADDR_VAR 0 2
71140: PUSH
71141: LD_VAR 0 3
71145: PUSH
71146: LD_INT 1
71148: PPUSH
71149: LD_VAR 0 3
71153: PPUSH
71154: CALL_OW 12
71158: ARRAY
71159: ST_TO_ADDR
// if Crawls ( un ) then
71160: LD_VAR 0 2
71164: PPUSH
71165: CALL_OW 318
71169: IFFALSE 71180
// ComWalk ( un ) ;
71171: LD_VAR 0 2
71175: PPUSH
71176: CALL_OW 138
// SetClass ( un , class_sniper ) ;
71180: LD_VAR 0 2
71184: PPUSH
71185: LD_INT 5
71187: PPUSH
71188: CALL_OW 336
// end ;
71192: PPOPN 3
71194: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
71195: LD_EXP 47
71199: PUSH
71200: LD_EXP 65
71204: AND
71205: PUSH
71206: LD_OWVAR 67
71210: PUSH
71211: LD_INT 4
71213: LESS
71214: AND
71215: IFFALSE 71234
71217: GO 71219
71219: DISABLE
// begin Difficulty := Difficulty + 1 ;
71220: LD_ADDR_OWVAR 67
71224: PUSH
71225: LD_OWVAR 67
71229: PUSH
71230: LD_INT 1
71232: PLUS
71233: ST_TO_ADDR
// end ;
71234: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
71235: LD_EXP 47
71239: PUSH
71240: LD_EXP 66
71244: AND
71245: IFFALSE 71348
71247: GO 71249
71249: DISABLE
71250: LD_INT 0
71252: PPUSH
// begin for i := 1 to 5 do
71253: LD_ADDR_VAR 0 1
71257: PUSH
71258: DOUBLE
71259: LD_INT 1
71261: DEC
71262: ST_TO_ADDR
71263: LD_INT 5
71265: PUSH
71266: FOR_TO
71267: IFFALSE 71346
// begin uc_nation := nation_nature ;
71269: LD_ADDR_OWVAR 21
71273: PUSH
71274: LD_INT 0
71276: ST_TO_ADDR
// uc_side := 0 ;
71277: LD_ADDR_OWVAR 20
71281: PUSH
71282: LD_INT 0
71284: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
71285: LD_ADDR_OWVAR 29
71289: PUSH
71290: LD_INT 12
71292: PUSH
71293: LD_INT 12
71295: PUSH
71296: EMPTY
71297: LIST
71298: LIST
71299: ST_TO_ADDR
// hc_agressivity := 20 ;
71300: LD_ADDR_OWVAR 35
71304: PUSH
71305: LD_INT 20
71307: ST_TO_ADDR
// hc_class := class_tiger ;
71308: LD_ADDR_OWVAR 28
71312: PUSH
71313: LD_INT 14
71315: ST_TO_ADDR
// hc_gallery :=  ;
71316: LD_ADDR_OWVAR 33
71320: PUSH
71321: LD_STRING 
71323: ST_TO_ADDR
// hc_name :=  ;
71324: LD_ADDR_OWVAR 26
71328: PUSH
71329: LD_STRING 
71331: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
71332: CALL_OW 44
71336: PPUSH
71337: LD_INT 0
71339: PPUSH
71340: CALL_OW 51
// end ;
71344: GO 71266
71346: POP
71347: POP
// end ;
71348: PPOPN 1
71350: END
// every 0 0$1 trigger StreamModeActive and sBomb do
71351: LD_EXP 47
71355: PUSH
71356: LD_EXP 67
71360: AND
71361: IFFALSE 71370
71363: GO 71365
71365: DISABLE
// StreamSibBomb ;
71366: CALL 71371 0 0
71370: END
// export function StreamSibBomb ; var i , x , y ; begin
71371: LD_INT 0
71373: PPUSH
71374: PPUSH
71375: PPUSH
71376: PPUSH
// result := false ;
71377: LD_ADDR_VAR 0 1
71381: PUSH
71382: LD_INT 0
71384: ST_TO_ADDR
// for i := 1 to 16 do
71385: LD_ADDR_VAR 0 2
71389: PUSH
71390: DOUBLE
71391: LD_INT 1
71393: DEC
71394: ST_TO_ADDR
71395: LD_INT 16
71397: PUSH
71398: FOR_TO
71399: IFFALSE 71598
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
71401: LD_ADDR_VAR 0 3
71405: PUSH
71406: LD_INT 10
71408: PUSH
71409: LD_INT 20
71411: PUSH
71412: LD_INT 30
71414: PUSH
71415: LD_INT 40
71417: PUSH
71418: LD_INT 50
71420: PUSH
71421: LD_INT 60
71423: PUSH
71424: LD_INT 70
71426: PUSH
71427: LD_INT 80
71429: PUSH
71430: LD_INT 90
71432: PUSH
71433: LD_INT 100
71435: PUSH
71436: LD_INT 110
71438: PUSH
71439: LD_INT 120
71441: PUSH
71442: LD_INT 130
71444: PUSH
71445: LD_INT 140
71447: PUSH
71448: LD_INT 150
71450: PUSH
71451: EMPTY
71452: LIST
71453: LIST
71454: LIST
71455: LIST
71456: LIST
71457: LIST
71458: LIST
71459: LIST
71460: LIST
71461: LIST
71462: LIST
71463: LIST
71464: LIST
71465: LIST
71466: LIST
71467: PUSH
71468: LD_INT 1
71470: PPUSH
71471: LD_INT 15
71473: PPUSH
71474: CALL_OW 12
71478: ARRAY
71479: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
71480: LD_ADDR_VAR 0 4
71484: PUSH
71485: LD_INT 10
71487: PUSH
71488: LD_INT 20
71490: PUSH
71491: LD_INT 30
71493: PUSH
71494: LD_INT 40
71496: PUSH
71497: LD_INT 50
71499: PUSH
71500: LD_INT 60
71502: PUSH
71503: LD_INT 70
71505: PUSH
71506: LD_INT 80
71508: PUSH
71509: LD_INT 90
71511: PUSH
71512: LD_INT 100
71514: PUSH
71515: LD_INT 110
71517: PUSH
71518: LD_INT 120
71520: PUSH
71521: LD_INT 130
71523: PUSH
71524: LD_INT 140
71526: PUSH
71527: LD_INT 150
71529: PUSH
71530: EMPTY
71531: LIST
71532: LIST
71533: LIST
71534: LIST
71535: LIST
71536: LIST
71537: LIST
71538: LIST
71539: LIST
71540: LIST
71541: LIST
71542: LIST
71543: LIST
71544: LIST
71545: LIST
71546: PUSH
71547: LD_INT 1
71549: PPUSH
71550: LD_INT 15
71552: PPUSH
71553: CALL_OW 12
71557: ARRAY
71558: ST_TO_ADDR
// if ValidHex ( x , y ) then
71559: LD_VAR 0 3
71563: PPUSH
71564: LD_VAR 0 4
71568: PPUSH
71569: CALL_OW 488
71573: IFFALSE 71596
// begin result := [ x , y ] ;
71575: LD_ADDR_VAR 0 1
71579: PUSH
71580: LD_VAR 0 3
71584: PUSH
71585: LD_VAR 0 4
71589: PUSH
71590: EMPTY
71591: LIST
71592: LIST
71593: ST_TO_ADDR
// break ;
71594: GO 71598
// end ; end ;
71596: GO 71398
71598: POP
71599: POP
// if result then
71600: LD_VAR 0 1
71604: IFFALSE 71664
// begin ToLua ( playSibBomb() ) ;
71606: LD_STRING playSibBomb()
71608: PPUSH
71609: CALL_OW 559
// wait ( 0 0$14 ) ;
71613: LD_INT 490
71615: PPUSH
71616: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
71620: LD_VAR 0 1
71624: PUSH
71625: LD_INT 1
71627: ARRAY
71628: PPUSH
71629: LD_VAR 0 1
71633: PUSH
71634: LD_INT 2
71636: ARRAY
71637: PPUSH
71638: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
71642: LD_VAR 0 1
71646: PUSH
71647: LD_INT 1
71649: ARRAY
71650: PPUSH
71651: LD_VAR 0 1
71655: PUSH
71656: LD_INT 2
71658: ARRAY
71659: PPUSH
71660: CALL_OW 429
// end ; end ;
71664: LD_VAR 0 1
71668: RET
// every 0 0$1 trigger StreamModeActive and sReset do
71669: LD_EXP 47
71673: PUSH
71674: LD_EXP 69
71678: AND
71679: IFFALSE 71691
71681: GO 71683
71683: DISABLE
// YouLost (  ) ;
71684: LD_STRING 
71686: PPUSH
71687: CALL_OW 104
71691: END
// every 0 0$1 trigger StreamModeActive and sFog do
71692: LD_EXP 47
71696: PUSH
71697: LD_EXP 68
71701: AND
71702: IFFALSE 71716
71704: GO 71706
71706: DISABLE
// FogOff ( your_side ) ;
71707: LD_OWVAR 2
71711: PPUSH
71712: CALL_OW 344
71716: END
// every 0 0$1 trigger StreamModeActive and sSun do
71717: LD_EXP 47
71721: PUSH
71722: LD_EXP 70
71726: AND
71727: IFFALSE 71755
71729: GO 71731
71731: DISABLE
// begin solar_recharge_percent := 0 ;
71732: LD_ADDR_OWVAR 79
71736: PUSH
71737: LD_INT 0
71739: ST_TO_ADDR
// wait ( 5 5$00 ) ;
71740: LD_INT 10500
71742: PPUSH
71743: CALL_OW 67
// solar_recharge_percent := 100 ;
71747: LD_ADDR_OWVAR 79
71751: PUSH
71752: LD_INT 100
71754: ST_TO_ADDR
// end ;
71755: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
71756: LD_EXP 47
71760: PUSH
71761: LD_EXP 71
71765: AND
71766: IFFALSE 72005
71768: GO 71770
71770: DISABLE
71771: LD_INT 0
71773: PPUSH
71774: PPUSH
71775: PPUSH
// begin tmp := [ ] ;
71776: LD_ADDR_VAR 0 3
71780: PUSH
71781: EMPTY
71782: ST_TO_ADDR
// for i := 1 to 6 do
71783: LD_ADDR_VAR 0 1
71787: PUSH
71788: DOUBLE
71789: LD_INT 1
71791: DEC
71792: ST_TO_ADDR
71793: LD_INT 6
71795: PUSH
71796: FOR_TO
71797: IFFALSE 71902
// begin uc_nation := nation_nature ;
71799: LD_ADDR_OWVAR 21
71803: PUSH
71804: LD_INT 0
71806: ST_TO_ADDR
// uc_side := 0 ;
71807: LD_ADDR_OWVAR 20
71811: PUSH
71812: LD_INT 0
71814: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
71815: LD_ADDR_OWVAR 29
71819: PUSH
71820: LD_INT 12
71822: PUSH
71823: LD_INT 12
71825: PUSH
71826: EMPTY
71827: LIST
71828: LIST
71829: ST_TO_ADDR
// hc_agressivity := 20 ;
71830: LD_ADDR_OWVAR 35
71834: PUSH
71835: LD_INT 20
71837: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
71838: LD_ADDR_OWVAR 28
71842: PUSH
71843: LD_INT 17
71845: ST_TO_ADDR
// hc_gallery :=  ;
71846: LD_ADDR_OWVAR 33
71850: PUSH
71851: LD_STRING 
71853: ST_TO_ADDR
// hc_name :=  ;
71854: LD_ADDR_OWVAR 26
71858: PUSH
71859: LD_STRING 
71861: ST_TO_ADDR
// un := CreateHuman ;
71862: LD_ADDR_VAR 0 2
71866: PUSH
71867: CALL_OW 44
71871: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
71872: LD_VAR 0 2
71876: PPUSH
71877: LD_INT 1
71879: PPUSH
71880: CALL_OW 51
// tmp := tmp ^ un ;
71884: LD_ADDR_VAR 0 3
71888: PUSH
71889: LD_VAR 0 3
71893: PUSH
71894: LD_VAR 0 2
71898: ADD
71899: ST_TO_ADDR
// end ;
71900: GO 71796
71902: POP
71903: POP
// repeat wait ( 0 0$1 ) ;
71904: LD_INT 35
71906: PPUSH
71907: CALL_OW 67
// for un in tmp do
71911: LD_ADDR_VAR 0 2
71915: PUSH
71916: LD_VAR 0 3
71920: PUSH
71921: FOR_IN
71922: IFFALSE 71996
// begin if IsDead ( un ) then
71924: LD_VAR 0 2
71928: PPUSH
71929: CALL_OW 301
71933: IFFALSE 71953
// begin tmp := tmp diff un ;
71935: LD_ADDR_VAR 0 3
71939: PUSH
71940: LD_VAR 0 3
71944: PUSH
71945: LD_VAR 0 2
71949: DIFF
71950: ST_TO_ADDR
// continue ;
71951: GO 71921
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
71953: LD_VAR 0 2
71957: PPUSH
71958: LD_INT 3
71960: PUSH
71961: LD_INT 22
71963: PUSH
71964: LD_INT 0
71966: PUSH
71967: EMPTY
71968: LIST
71969: LIST
71970: PUSH
71971: EMPTY
71972: LIST
71973: LIST
71974: PPUSH
71975: CALL_OW 69
71979: PPUSH
71980: LD_VAR 0 2
71984: PPUSH
71985: CALL_OW 74
71989: PPUSH
71990: CALL_OW 115
// end ;
71994: GO 71921
71996: POP
71997: POP
// until not tmp ;
71998: LD_VAR 0 3
72002: NOT
72003: IFFALSE 71904
// end ;
72005: PPOPN 3
72007: END
// every 0 0$1 trigger StreamModeActive and sTroll do
72008: LD_EXP 47
72012: PUSH
72013: LD_EXP 72
72017: AND
72018: IFFALSE 72072
72020: GO 72022
72022: DISABLE
// begin ToLua ( displayTroll(); ) ;
72023: LD_STRING displayTroll();
72025: PPUSH
72026: CALL_OW 559
// wait ( 3 3$00 ) ;
72030: LD_INT 6300
72032: PPUSH
72033: CALL_OW 67
// ToLua ( hideTroll(); ) ;
72037: LD_STRING hideTroll();
72039: PPUSH
72040: CALL_OW 559
// wait ( 1 1$00 ) ;
72044: LD_INT 2100
72046: PPUSH
72047: CALL_OW 67
// ToLua ( displayTroll(); ) ;
72051: LD_STRING displayTroll();
72053: PPUSH
72054: CALL_OW 559
// wait ( 1 1$00 ) ;
72058: LD_INT 2100
72060: PPUSH
72061: CALL_OW 67
// ToLua ( hideTroll(); ) ;
72065: LD_STRING hideTroll();
72067: PPUSH
72068: CALL_OW 559
// end ;
72072: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
72073: LD_EXP 47
72077: PUSH
72078: LD_EXP 73
72082: AND
72083: IFFALSE 72146
72085: GO 72087
72087: DISABLE
72088: LD_INT 0
72090: PPUSH
// begin p := 0 ;
72091: LD_ADDR_VAR 0 1
72095: PUSH
72096: LD_INT 0
72098: ST_TO_ADDR
// repeat game_speed := 1 ;
72099: LD_ADDR_OWVAR 65
72103: PUSH
72104: LD_INT 1
72106: ST_TO_ADDR
// wait ( 0 0$1 ) ;
72107: LD_INT 35
72109: PPUSH
72110: CALL_OW 67
// p := p + 1 ;
72114: LD_ADDR_VAR 0 1
72118: PUSH
72119: LD_VAR 0 1
72123: PUSH
72124: LD_INT 1
72126: PLUS
72127: ST_TO_ADDR
// until p >= 60 ;
72128: LD_VAR 0 1
72132: PUSH
72133: LD_INT 60
72135: GREATEREQUAL
72136: IFFALSE 72099
// game_speed := 4 ;
72138: LD_ADDR_OWVAR 65
72142: PUSH
72143: LD_INT 4
72145: ST_TO_ADDR
// end ;
72146: PPOPN 1
72148: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
72149: LD_EXP 47
72153: PUSH
72154: LD_EXP 74
72158: AND
72159: IFFALSE 72305
72161: GO 72163
72163: DISABLE
72164: LD_INT 0
72166: PPUSH
72167: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
72168: LD_ADDR_VAR 0 1
72172: PUSH
72173: LD_INT 22
72175: PUSH
72176: LD_OWVAR 2
72180: PUSH
72181: EMPTY
72182: LIST
72183: LIST
72184: PUSH
72185: LD_INT 2
72187: PUSH
72188: LD_INT 30
72190: PUSH
72191: LD_INT 0
72193: PUSH
72194: EMPTY
72195: LIST
72196: LIST
72197: PUSH
72198: LD_INT 30
72200: PUSH
72201: LD_INT 1
72203: PUSH
72204: EMPTY
72205: LIST
72206: LIST
72207: PUSH
72208: EMPTY
72209: LIST
72210: LIST
72211: LIST
72212: PUSH
72213: EMPTY
72214: LIST
72215: LIST
72216: PPUSH
72217: CALL_OW 69
72221: ST_TO_ADDR
// if not depot then
72222: LD_VAR 0 1
72226: NOT
72227: IFFALSE 72231
// exit ;
72229: GO 72305
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
72231: LD_ADDR_VAR 0 2
72235: PUSH
72236: LD_VAR 0 1
72240: PUSH
72241: LD_INT 1
72243: PPUSH
72244: LD_VAR 0 1
72248: PPUSH
72249: CALL_OW 12
72253: ARRAY
72254: PPUSH
72255: CALL_OW 274
72259: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
72260: LD_VAR 0 2
72264: PPUSH
72265: LD_INT 1
72267: PPUSH
72268: LD_INT 0
72270: PPUSH
72271: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
72275: LD_VAR 0 2
72279: PPUSH
72280: LD_INT 2
72282: PPUSH
72283: LD_INT 0
72285: PPUSH
72286: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
72290: LD_VAR 0 2
72294: PPUSH
72295: LD_INT 3
72297: PPUSH
72298: LD_INT 0
72300: PPUSH
72301: CALL_OW 277
// end ;
72305: PPOPN 2
72307: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
72308: LD_EXP 47
72312: PUSH
72313: LD_EXP 75
72317: AND
72318: IFFALSE 72415
72320: GO 72322
72322: DISABLE
72323: LD_INT 0
72325: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
72326: LD_ADDR_VAR 0 1
72330: PUSH
72331: LD_INT 22
72333: PUSH
72334: LD_OWVAR 2
72338: PUSH
72339: EMPTY
72340: LIST
72341: LIST
72342: PUSH
72343: LD_INT 21
72345: PUSH
72346: LD_INT 1
72348: PUSH
72349: EMPTY
72350: LIST
72351: LIST
72352: PUSH
72353: LD_INT 3
72355: PUSH
72356: LD_INT 23
72358: PUSH
72359: LD_INT 0
72361: PUSH
72362: EMPTY
72363: LIST
72364: LIST
72365: PUSH
72366: EMPTY
72367: LIST
72368: LIST
72369: PUSH
72370: EMPTY
72371: LIST
72372: LIST
72373: LIST
72374: PPUSH
72375: CALL_OW 69
72379: ST_TO_ADDR
// if not tmp then
72380: LD_VAR 0 1
72384: NOT
72385: IFFALSE 72389
// exit ;
72387: GO 72415
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
72389: LD_VAR 0 1
72393: PUSH
72394: LD_INT 1
72396: PPUSH
72397: LD_VAR 0 1
72401: PPUSH
72402: CALL_OW 12
72406: ARRAY
72407: PPUSH
72408: LD_INT 200
72410: PPUSH
72411: CALL_OW 234
// end ;
72415: PPOPN 1
72417: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
72418: LD_EXP 47
72422: PUSH
72423: LD_EXP 76
72427: AND
72428: IFFALSE 72507
72430: GO 72432
72432: DISABLE
72433: LD_INT 0
72435: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
72436: LD_ADDR_VAR 0 1
72440: PUSH
72441: LD_INT 22
72443: PUSH
72444: LD_OWVAR 2
72448: PUSH
72449: EMPTY
72450: LIST
72451: LIST
72452: PUSH
72453: LD_INT 21
72455: PUSH
72456: LD_INT 2
72458: PUSH
72459: EMPTY
72460: LIST
72461: LIST
72462: PUSH
72463: EMPTY
72464: LIST
72465: LIST
72466: PPUSH
72467: CALL_OW 69
72471: ST_TO_ADDR
// if not tmp then
72472: LD_VAR 0 1
72476: NOT
72477: IFFALSE 72481
// exit ;
72479: GO 72507
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
72481: LD_VAR 0 1
72485: PUSH
72486: LD_INT 1
72488: PPUSH
72489: LD_VAR 0 1
72493: PPUSH
72494: CALL_OW 12
72498: ARRAY
72499: PPUSH
72500: LD_INT 60
72502: PPUSH
72503: CALL_OW 234
// end ;
72507: PPOPN 1
72509: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
72510: LD_EXP 47
72514: PUSH
72515: LD_EXP 77
72519: AND
72520: IFFALSE 72619
72522: GO 72524
72524: DISABLE
72525: LD_INT 0
72527: PPUSH
72528: PPUSH
// begin enable ;
72529: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
72530: LD_ADDR_VAR 0 1
72534: PUSH
72535: LD_INT 22
72537: PUSH
72538: LD_OWVAR 2
72542: PUSH
72543: EMPTY
72544: LIST
72545: LIST
72546: PUSH
72547: LD_INT 61
72549: PUSH
72550: EMPTY
72551: LIST
72552: PUSH
72553: LD_INT 33
72555: PUSH
72556: LD_INT 2
72558: PUSH
72559: EMPTY
72560: LIST
72561: LIST
72562: PUSH
72563: EMPTY
72564: LIST
72565: LIST
72566: LIST
72567: PPUSH
72568: CALL_OW 69
72572: ST_TO_ADDR
// if not tmp then
72573: LD_VAR 0 1
72577: NOT
72578: IFFALSE 72582
// exit ;
72580: GO 72619
// for i in tmp do
72582: LD_ADDR_VAR 0 2
72586: PUSH
72587: LD_VAR 0 1
72591: PUSH
72592: FOR_IN
72593: IFFALSE 72617
// if IsControledBy ( i ) then
72595: LD_VAR 0 2
72599: PPUSH
72600: CALL_OW 312
72604: IFFALSE 72615
// ComUnlink ( i ) ;
72606: LD_VAR 0 2
72610: PPUSH
72611: CALL_OW 136
72615: GO 72592
72617: POP
72618: POP
// end ;
72619: PPOPN 2
72621: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
72622: LD_EXP 47
72626: PUSH
72627: LD_EXP 78
72631: AND
72632: IFFALSE 72772
72634: GO 72636
72636: DISABLE
72637: LD_INT 0
72639: PPUSH
72640: PPUSH
// begin ToLua ( displayPowell(); ) ;
72641: LD_STRING displayPowell();
72643: PPUSH
72644: CALL_OW 559
// uc_side := 0 ;
72648: LD_ADDR_OWVAR 20
72652: PUSH
72653: LD_INT 0
72655: ST_TO_ADDR
// uc_nation := 2 ;
72656: LD_ADDR_OWVAR 21
72660: PUSH
72661: LD_INT 2
72663: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
72664: LD_ADDR_OWVAR 37
72668: PUSH
72669: LD_INT 14
72671: ST_TO_ADDR
// vc_engine := engine_siberite ;
72672: LD_ADDR_OWVAR 39
72676: PUSH
72677: LD_INT 3
72679: ST_TO_ADDR
// vc_control := control_apeman ;
72680: LD_ADDR_OWVAR 38
72684: PUSH
72685: LD_INT 5
72687: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
72688: LD_ADDR_OWVAR 40
72692: PUSH
72693: LD_INT 29
72695: ST_TO_ADDR
// un := CreateVehicle ;
72696: LD_ADDR_VAR 0 2
72700: PUSH
72701: CALL_OW 45
72705: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
72706: LD_VAR 0 2
72710: PPUSH
72711: LD_INT 1
72713: PPUSH
72714: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
72718: LD_INT 35
72720: PPUSH
72721: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
72725: LD_VAR 0 2
72729: PPUSH
72730: LD_INT 22
72732: PUSH
72733: LD_OWVAR 2
72737: PUSH
72738: EMPTY
72739: LIST
72740: LIST
72741: PPUSH
72742: CALL_OW 69
72746: PPUSH
72747: LD_VAR 0 2
72751: PPUSH
72752: CALL_OW 74
72756: PPUSH
72757: CALL_OW 115
// until IsDead ( un ) ;
72761: LD_VAR 0 2
72765: PPUSH
72766: CALL_OW 301
72770: IFFALSE 72718
// end ;
72772: PPOPN 2
72774: END
// every 0 0$1 trigger StreamModeActive and sStu do
72775: LD_EXP 47
72779: PUSH
72780: LD_EXP 86
72784: AND
72785: IFFALSE 72801
72787: GO 72789
72789: DISABLE
// begin ToLua ( displayStucuk(); ) ;
72790: LD_STRING displayStucuk();
72792: PPUSH
72793: CALL_OW 559
// ResetFog ;
72797: CALL_OW 335
// end ;
72801: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
72802: LD_EXP 47
72806: PUSH
72807: LD_EXP 79
72811: AND
72812: IFFALSE 72953
72814: GO 72816
72816: DISABLE
72817: LD_INT 0
72819: PPUSH
72820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
72821: LD_ADDR_VAR 0 2
72825: PUSH
72826: LD_INT 22
72828: PUSH
72829: LD_OWVAR 2
72833: PUSH
72834: EMPTY
72835: LIST
72836: LIST
72837: PUSH
72838: LD_INT 21
72840: PUSH
72841: LD_INT 1
72843: PUSH
72844: EMPTY
72845: LIST
72846: LIST
72847: PUSH
72848: EMPTY
72849: LIST
72850: LIST
72851: PPUSH
72852: CALL_OW 69
72856: ST_TO_ADDR
// if not tmp then
72857: LD_VAR 0 2
72861: NOT
72862: IFFALSE 72866
// exit ;
72864: GO 72953
// un := tmp [ rand ( 1 , tmp ) ] ;
72866: LD_ADDR_VAR 0 1
72870: PUSH
72871: LD_VAR 0 2
72875: PUSH
72876: LD_INT 1
72878: PPUSH
72879: LD_VAR 0 2
72883: PPUSH
72884: CALL_OW 12
72888: ARRAY
72889: ST_TO_ADDR
// SetSide ( un , 0 ) ;
72890: LD_VAR 0 1
72894: PPUSH
72895: LD_INT 0
72897: PPUSH
72898: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
72902: LD_VAR 0 1
72906: PPUSH
72907: LD_OWVAR 3
72911: PUSH
72912: LD_VAR 0 1
72916: DIFF
72917: PPUSH
72918: LD_VAR 0 1
72922: PPUSH
72923: CALL_OW 74
72927: PPUSH
72928: CALL_OW 115
// wait ( 0 0$20 ) ;
72932: LD_INT 700
72934: PPUSH
72935: CALL_OW 67
// SetSide ( un , your_side ) ;
72939: LD_VAR 0 1
72943: PPUSH
72944: LD_OWVAR 2
72948: PPUSH
72949: CALL_OW 235
// end ;
72953: PPOPN 2
72955: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
72956: LD_EXP 47
72960: PUSH
72961: LD_EXP 80
72965: AND
72966: IFFALSE 73072
72968: GO 72970
72970: DISABLE
72971: LD_INT 0
72973: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
72974: LD_ADDR_VAR 0 1
72978: PUSH
72979: LD_INT 22
72981: PUSH
72982: LD_OWVAR 2
72986: PUSH
72987: EMPTY
72988: LIST
72989: LIST
72990: PUSH
72991: LD_INT 2
72993: PUSH
72994: LD_INT 30
72996: PUSH
72997: LD_INT 0
72999: PUSH
73000: EMPTY
73001: LIST
73002: LIST
73003: PUSH
73004: LD_INT 30
73006: PUSH
73007: LD_INT 1
73009: PUSH
73010: EMPTY
73011: LIST
73012: LIST
73013: PUSH
73014: EMPTY
73015: LIST
73016: LIST
73017: LIST
73018: PUSH
73019: EMPTY
73020: LIST
73021: LIST
73022: PPUSH
73023: CALL_OW 69
73027: ST_TO_ADDR
// if not depot then
73028: LD_VAR 0 1
73032: NOT
73033: IFFALSE 73037
// exit ;
73035: GO 73072
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
73037: LD_VAR 0 1
73041: PUSH
73042: LD_INT 1
73044: ARRAY
73045: PPUSH
73046: CALL_OW 250
73050: PPUSH
73051: LD_VAR 0 1
73055: PUSH
73056: LD_INT 1
73058: ARRAY
73059: PPUSH
73060: CALL_OW 251
73064: PPUSH
73065: LD_INT 70
73067: PPUSH
73068: CALL_OW 495
// end ;
73072: PPOPN 1
73074: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
73075: LD_EXP 47
73079: PUSH
73080: LD_EXP 81
73084: AND
73085: IFFALSE 73296
73087: GO 73089
73089: DISABLE
73090: LD_INT 0
73092: PPUSH
73093: PPUSH
73094: PPUSH
73095: PPUSH
73096: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
73097: LD_ADDR_VAR 0 5
73101: PUSH
73102: LD_INT 22
73104: PUSH
73105: LD_OWVAR 2
73109: PUSH
73110: EMPTY
73111: LIST
73112: LIST
73113: PUSH
73114: LD_INT 21
73116: PUSH
73117: LD_INT 1
73119: PUSH
73120: EMPTY
73121: LIST
73122: LIST
73123: PUSH
73124: EMPTY
73125: LIST
73126: LIST
73127: PPUSH
73128: CALL_OW 69
73132: ST_TO_ADDR
// if not tmp then
73133: LD_VAR 0 5
73137: NOT
73138: IFFALSE 73142
// exit ;
73140: GO 73296
// for i in tmp do
73142: LD_ADDR_VAR 0 1
73146: PUSH
73147: LD_VAR 0 5
73151: PUSH
73152: FOR_IN
73153: IFFALSE 73294
// begin d := rand ( 0 , 5 ) ;
73155: LD_ADDR_VAR 0 4
73159: PUSH
73160: LD_INT 0
73162: PPUSH
73163: LD_INT 5
73165: PPUSH
73166: CALL_OW 12
73170: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
73171: LD_ADDR_VAR 0 2
73175: PUSH
73176: LD_VAR 0 1
73180: PPUSH
73181: CALL_OW 250
73185: PPUSH
73186: LD_VAR 0 4
73190: PPUSH
73191: LD_INT 3
73193: PPUSH
73194: LD_INT 12
73196: PPUSH
73197: CALL_OW 12
73201: PPUSH
73202: CALL_OW 272
73206: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
73207: LD_ADDR_VAR 0 3
73211: PUSH
73212: LD_VAR 0 1
73216: PPUSH
73217: CALL_OW 251
73221: PPUSH
73222: LD_VAR 0 4
73226: PPUSH
73227: LD_INT 3
73229: PPUSH
73230: LD_INT 12
73232: PPUSH
73233: CALL_OW 12
73237: PPUSH
73238: CALL_OW 273
73242: ST_TO_ADDR
// if ValidHex ( x , y ) then
73243: LD_VAR 0 2
73247: PPUSH
73248: LD_VAR 0 3
73252: PPUSH
73253: CALL_OW 488
73257: IFFALSE 73292
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
73259: LD_VAR 0 1
73263: PPUSH
73264: LD_VAR 0 2
73268: PPUSH
73269: LD_VAR 0 3
73273: PPUSH
73274: LD_INT 3
73276: PPUSH
73277: LD_INT 6
73279: PPUSH
73280: CALL_OW 12
73284: PPUSH
73285: LD_INT 1
73287: PPUSH
73288: CALL_OW 483
// end ;
73292: GO 73152
73294: POP
73295: POP
// end ;
73296: PPOPN 5
73298: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
73299: LD_EXP 47
73303: PUSH
73304: LD_EXP 82
73308: AND
73309: IFFALSE 73403
73311: GO 73313
73313: DISABLE
73314: LD_INT 0
73316: PPUSH
73317: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
73318: LD_ADDR_VAR 0 2
73322: PUSH
73323: LD_INT 22
73325: PUSH
73326: LD_OWVAR 2
73330: PUSH
73331: EMPTY
73332: LIST
73333: LIST
73334: PUSH
73335: LD_INT 32
73337: PUSH
73338: LD_INT 1
73340: PUSH
73341: EMPTY
73342: LIST
73343: LIST
73344: PUSH
73345: LD_INT 21
73347: PUSH
73348: LD_INT 2
73350: PUSH
73351: EMPTY
73352: LIST
73353: LIST
73354: PUSH
73355: EMPTY
73356: LIST
73357: LIST
73358: LIST
73359: PPUSH
73360: CALL_OW 69
73364: ST_TO_ADDR
// if not tmp then
73365: LD_VAR 0 2
73369: NOT
73370: IFFALSE 73374
// exit ;
73372: GO 73403
// for i in tmp do
73374: LD_ADDR_VAR 0 1
73378: PUSH
73379: LD_VAR 0 2
73383: PUSH
73384: FOR_IN
73385: IFFALSE 73401
// SetFuel ( i , 0 ) ;
73387: LD_VAR 0 1
73391: PPUSH
73392: LD_INT 0
73394: PPUSH
73395: CALL_OW 240
73399: GO 73384
73401: POP
73402: POP
// end ;
73403: PPOPN 2
73405: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
73406: LD_EXP 47
73410: PUSH
73411: LD_EXP 83
73415: AND
73416: IFFALSE 73482
73418: GO 73420
73420: DISABLE
73421: LD_INT 0
73423: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
73424: LD_ADDR_VAR 0 1
73428: PUSH
73429: LD_INT 22
73431: PUSH
73432: LD_OWVAR 2
73436: PUSH
73437: EMPTY
73438: LIST
73439: LIST
73440: PUSH
73441: LD_INT 30
73443: PUSH
73444: LD_INT 29
73446: PUSH
73447: EMPTY
73448: LIST
73449: LIST
73450: PUSH
73451: EMPTY
73452: LIST
73453: LIST
73454: PPUSH
73455: CALL_OW 69
73459: ST_TO_ADDR
// if not tmp then
73460: LD_VAR 0 1
73464: NOT
73465: IFFALSE 73469
// exit ;
73467: GO 73482
// DestroyUnit ( tmp [ 1 ] ) ;
73469: LD_VAR 0 1
73473: PUSH
73474: LD_INT 1
73476: ARRAY
73477: PPUSH
73478: CALL_OW 65
// end ;
73482: PPOPN 1
73484: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
73485: LD_EXP 47
73489: PUSH
73490: LD_EXP 85
73494: AND
73495: IFFALSE 73624
73497: GO 73499
73499: DISABLE
73500: LD_INT 0
73502: PPUSH
// begin uc_side := 0 ;
73503: LD_ADDR_OWVAR 20
73507: PUSH
73508: LD_INT 0
73510: ST_TO_ADDR
// uc_nation := nation_arabian ;
73511: LD_ADDR_OWVAR 21
73515: PUSH
73516: LD_INT 2
73518: ST_TO_ADDR
// hc_gallery :=  ;
73519: LD_ADDR_OWVAR 33
73523: PUSH
73524: LD_STRING 
73526: ST_TO_ADDR
// hc_name :=  ;
73527: LD_ADDR_OWVAR 26
73531: PUSH
73532: LD_STRING 
73534: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
73535: LD_INT 1
73537: PPUSH
73538: LD_INT 11
73540: PPUSH
73541: LD_INT 10
73543: PPUSH
73544: CALL_OW 380
// un := CreateHuman ;
73548: LD_ADDR_VAR 0 1
73552: PUSH
73553: CALL_OW 44
73557: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
73558: LD_VAR 0 1
73562: PPUSH
73563: LD_INT 1
73565: PPUSH
73566: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
73570: LD_INT 35
73572: PPUSH
73573: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
73577: LD_VAR 0 1
73581: PPUSH
73582: LD_INT 22
73584: PUSH
73585: LD_OWVAR 2
73589: PUSH
73590: EMPTY
73591: LIST
73592: LIST
73593: PPUSH
73594: CALL_OW 69
73598: PPUSH
73599: LD_VAR 0 1
73603: PPUSH
73604: CALL_OW 74
73608: PPUSH
73609: CALL_OW 115
// until IsDead ( un ) ;
73613: LD_VAR 0 1
73617: PPUSH
73618: CALL_OW 301
73622: IFFALSE 73570
// end ;
73624: PPOPN 1
73626: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
73627: LD_EXP 47
73631: PUSH
73632: LD_EXP 87
73636: AND
73637: IFFALSE 73649
73639: GO 73641
73641: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
73642: LD_STRING earthquake(getX(game), 0, 32)
73644: PPUSH
73645: CALL_OW 559
73649: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
73650: LD_EXP 47
73654: PUSH
73655: LD_EXP 88
73659: AND
73660: IFFALSE 73751
73662: GO 73664
73664: DISABLE
73665: LD_INT 0
73667: PPUSH
// begin enable ;
73668: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
73669: LD_ADDR_VAR 0 1
73673: PUSH
73674: LD_INT 22
73676: PUSH
73677: LD_OWVAR 2
73681: PUSH
73682: EMPTY
73683: LIST
73684: LIST
73685: PUSH
73686: LD_INT 21
73688: PUSH
73689: LD_INT 2
73691: PUSH
73692: EMPTY
73693: LIST
73694: LIST
73695: PUSH
73696: LD_INT 33
73698: PUSH
73699: LD_INT 3
73701: PUSH
73702: EMPTY
73703: LIST
73704: LIST
73705: PUSH
73706: EMPTY
73707: LIST
73708: LIST
73709: LIST
73710: PPUSH
73711: CALL_OW 69
73715: ST_TO_ADDR
// if not tmp then
73716: LD_VAR 0 1
73720: NOT
73721: IFFALSE 73725
// exit ;
73723: GO 73751
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
73725: LD_VAR 0 1
73729: PUSH
73730: LD_INT 1
73732: PPUSH
73733: LD_VAR 0 1
73737: PPUSH
73738: CALL_OW 12
73742: ARRAY
73743: PPUSH
73744: LD_INT 1
73746: PPUSH
73747: CALL_OW 234
// end ;
73751: PPOPN 1
73753: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
73754: LD_EXP 47
73758: PUSH
73759: LD_EXP 89
73763: AND
73764: IFFALSE 73905
73766: GO 73768
73768: DISABLE
73769: LD_INT 0
73771: PPUSH
73772: PPUSH
73773: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
73774: LD_ADDR_VAR 0 3
73778: PUSH
73779: LD_INT 22
73781: PUSH
73782: LD_OWVAR 2
73786: PUSH
73787: EMPTY
73788: LIST
73789: LIST
73790: PUSH
73791: LD_INT 25
73793: PUSH
73794: LD_INT 1
73796: PUSH
73797: EMPTY
73798: LIST
73799: LIST
73800: PUSH
73801: EMPTY
73802: LIST
73803: LIST
73804: PPUSH
73805: CALL_OW 69
73809: ST_TO_ADDR
// if not tmp then
73810: LD_VAR 0 3
73814: NOT
73815: IFFALSE 73819
// exit ;
73817: GO 73905
// un := tmp [ rand ( 1 , tmp ) ] ;
73819: LD_ADDR_VAR 0 2
73823: PUSH
73824: LD_VAR 0 3
73828: PUSH
73829: LD_INT 1
73831: PPUSH
73832: LD_VAR 0 3
73836: PPUSH
73837: CALL_OW 12
73841: ARRAY
73842: ST_TO_ADDR
// if Crawls ( un ) then
73843: LD_VAR 0 2
73847: PPUSH
73848: CALL_OW 318
73852: IFFALSE 73863
// ComWalk ( un ) ;
73854: LD_VAR 0 2
73858: PPUSH
73859: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
73863: LD_VAR 0 2
73867: PPUSH
73868: LD_INT 9
73870: PPUSH
73871: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
73875: LD_INT 28
73877: PPUSH
73878: LD_OWVAR 2
73882: PPUSH
73883: LD_INT 2
73885: PPUSH
73886: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
73890: LD_INT 29
73892: PPUSH
73893: LD_OWVAR 2
73897: PPUSH
73898: LD_INT 2
73900: PPUSH
73901: CALL_OW 322
// end ;
73905: PPOPN 3
73907: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
73908: LD_EXP 47
73912: PUSH
73913: LD_EXP 90
73917: AND
73918: IFFALSE 74029
73920: GO 73922
73922: DISABLE
73923: LD_INT 0
73925: PPUSH
73926: PPUSH
73927: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
73928: LD_ADDR_VAR 0 3
73932: PUSH
73933: LD_INT 22
73935: PUSH
73936: LD_OWVAR 2
73940: PUSH
73941: EMPTY
73942: LIST
73943: LIST
73944: PUSH
73945: LD_INT 25
73947: PUSH
73948: LD_INT 1
73950: PUSH
73951: EMPTY
73952: LIST
73953: LIST
73954: PUSH
73955: EMPTY
73956: LIST
73957: LIST
73958: PPUSH
73959: CALL_OW 69
73963: ST_TO_ADDR
// if not tmp then
73964: LD_VAR 0 3
73968: NOT
73969: IFFALSE 73973
// exit ;
73971: GO 74029
// un := tmp [ rand ( 1 , tmp ) ] ;
73973: LD_ADDR_VAR 0 2
73977: PUSH
73978: LD_VAR 0 3
73982: PUSH
73983: LD_INT 1
73985: PPUSH
73986: LD_VAR 0 3
73990: PPUSH
73991: CALL_OW 12
73995: ARRAY
73996: ST_TO_ADDR
// if Crawls ( un ) then
73997: LD_VAR 0 2
74001: PPUSH
74002: CALL_OW 318
74006: IFFALSE 74017
// ComWalk ( un ) ;
74008: LD_VAR 0 2
74012: PPUSH
74013: CALL_OW 138
// SetClass ( un , class_mortar ) ;
74017: LD_VAR 0 2
74021: PPUSH
74022: LD_INT 8
74024: PPUSH
74025: CALL_OW 336
// end ;
74029: PPOPN 3
74031: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
74032: LD_EXP 47
74036: PUSH
74037: LD_EXP 91
74041: AND
74042: IFFALSE 74186
74044: GO 74046
74046: DISABLE
74047: LD_INT 0
74049: PPUSH
74050: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
74051: LD_ADDR_VAR 0 2
74055: PUSH
74056: LD_INT 22
74058: PUSH
74059: LD_OWVAR 2
74063: PUSH
74064: EMPTY
74065: LIST
74066: LIST
74067: PUSH
74068: LD_INT 21
74070: PUSH
74071: LD_INT 2
74073: PUSH
74074: EMPTY
74075: LIST
74076: LIST
74077: PUSH
74078: LD_INT 2
74080: PUSH
74081: LD_INT 34
74083: PUSH
74084: LD_INT 12
74086: PUSH
74087: EMPTY
74088: LIST
74089: LIST
74090: PUSH
74091: LD_INT 34
74093: PUSH
74094: LD_INT 51
74096: PUSH
74097: EMPTY
74098: LIST
74099: LIST
74100: PUSH
74101: LD_INT 34
74103: PUSH
74104: LD_INT 32
74106: PUSH
74107: EMPTY
74108: LIST
74109: LIST
74110: PUSH
74111: EMPTY
74112: LIST
74113: LIST
74114: LIST
74115: LIST
74116: PUSH
74117: EMPTY
74118: LIST
74119: LIST
74120: LIST
74121: PPUSH
74122: CALL_OW 69
74126: ST_TO_ADDR
// if not tmp then
74127: LD_VAR 0 2
74131: NOT
74132: IFFALSE 74136
// exit ;
74134: GO 74186
// for i in tmp do
74136: LD_ADDR_VAR 0 1
74140: PUSH
74141: LD_VAR 0 2
74145: PUSH
74146: FOR_IN
74147: IFFALSE 74184
// if GetCargo ( i , mat_artifact ) = 0 then
74149: LD_VAR 0 1
74153: PPUSH
74154: LD_INT 4
74156: PPUSH
74157: CALL_OW 289
74161: PUSH
74162: LD_INT 0
74164: EQUAL
74165: IFFALSE 74182
// SetCargo ( i , mat_siberit , 100 ) ;
74167: LD_VAR 0 1
74171: PPUSH
74172: LD_INT 3
74174: PPUSH
74175: LD_INT 100
74177: PPUSH
74178: CALL_OW 290
74182: GO 74146
74184: POP
74185: POP
// end ;
74186: PPOPN 2
74188: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
74189: LD_EXP 47
74193: PUSH
74194: LD_EXP 92
74198: AND
74199: IFFALSE 74382
74201: GO 74203
74203: DISABLE
74204: LD_INT 0
74206: PPUSH
74207: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
74208: LD_ADDR_VAR 0 2
74212: PUSH
74213: LD_INT 22
74215: PUSH
74216: LD_OWVAR 2
74220: PUSH
74221: EMPTY
74222: LIST
74223: LIST
74224: PPUSH
74225: CALL_OW 69
74229: ST_TO_ADDR
// if not tmp then
74230: LD_VAR 0 2
74234: NOT
74235: IFFALSE 74239
// exit ;
74237: GO 74382
// for i := 1 to 2 do
74239: LD_ADDR_VAR 0 1
74243: PUSH
74244: DOUBLE
74245: LD_INT 1
74247: DEC
74248: ST_TO_ADDR
74249: LD_INT 2
74251: PUSH
74252: FOR_TO
74253: IFFALSE 74380
// begin uc_side := your_side ;
74255: LD_ADDR_OWVAR 20
74259: PUSH
74260: LD_OWVAR 2
74264: ST_TO_ADDR
// uc_nation := nation_american ;
74265: LD_ADDR_OWVAR 21
74269: PUSH
74270: LD_INT 1
74272: ST_TO_ADDR
// vc_chassis := us_morphling ;
74273: LD_ADDR_OWVAR 37
74277: PUSH
74278: LD_INT 5
74280: ST_TO_ADDR
// vc_engine := engine_siberite ;
74281: LD_ADDR_OWVAR 39
74285: PUSH
74286: LD_INT 3
74288: ST_TO_ADDR
// vc_control := control_computer ;
74289: LD_ADDR_OWVAR 38
74293: PUSH
74294: LD_INT 3
74296: ST_TO_ADDR
// vc_weapon := us_double_laser ;
74297: LD_ADDR_OWVAR 40
74301: PUSH
74302: LD_INT 10
74304: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
74305: LD_VAR 0 2
74309: PUSH
74310: LD_INT 1
74312: ARRAY
74313: PPUSH
74314: CALL_OW 310
74318: NOT
74319: IFFALSE 74366
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
74321: CALL_OW 45
74325: PPUSH
74326: LD_VAR 0 2
74330: PUSH
74331: LD_INT 1
74333: ARRAY
74334: PPUSH
74335: CALL_OW 250
74339: PPUSH
74340: LD_VAR 0 2
74344: PUSH
74345: LD_INT 1
74347: ARRAY
74348: PPUSH
74349: CALL_OW 251
74353: PPUSH
74354: LD_INT 12
74356: PPUSH
74357: LD_INT 1
74359: PPUSH
74360: CALL_OW 50
74364: GO 74378
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
74366: CALL_OW 45
74370: PPUSH
74371: LD_INT 1
74373: PPUSH
74374: CALL_OW 51
// end ;
74378: GO 74252
74380: POP
74381: POP
// end ;
74382: PPOPN 2
74384: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
74385: LD_EXP 47
74389: PUSH
74390: LD_EXP 93
74394: AND
74395: IFFALSE 74617
74397: GO 74399
74399: DISABLE
74400: LD_INT 0
74402: PPUSH
74403: PPUSH
74404: PPUSH
74405: PPUSH
74406: PPUSH
74407: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
74408: LD_ADDR_VAR 0 6
74412: PUSH
74413: LD_INT 22
74415: PUSH
74416: LD_OWVAR 2
74420: PUSH
74421: EMPTY
74422: LIST
74423: LIST
74424: PUSH
74425: LD_INT 21
74427: PUSH
74428: LD_INT 1
74430: PUSH
74431: EMPTY
74432: LIST
74433: LIST
74434: PUSH
74435: LD_INT 3
74437: PUSH
74438: LD_INT 23
74440: PUSH
74441: LD_INT 0
74443: PUSH
74444: EMPTY
74445: LIST
74446: LIST
74447: PUSH
74448: EMPTY
74449: LIST
74450: LIST
74451: PUSH
74452: EMPTY
74453: LIST
74454: LIST
74455: LIST
74456: PPUSH
74457: CALL_OW 69
74461: ST_TO_ADDR
// if not tmp then
74462: LD_VAR 0 6
74466: NOT
74467: IFFALSE 74471
// exit ;
74469: GO 74617
// s1 := rand ( 1 , 4 ) ;
74471: LD_ADDR_VAR 0 2
74475: PUSH
74476: LD_INT 1
74478: PPUSH
74479: LD_INT 4
74481: PPUSH
74482: CALL_OW 12
74486: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
74487: LD_ADDR_VAR 0 4
74491: PUSH
74492: LD_VAR 0 6
74496: PUSH
74497: LD_INT 1
74499: ARRAY
74500: PPUSH
74501: LD_VAR 0 2
74505: PPUSH
74506: CALL_OW 259
74510: ST_TO_ADDR
// if s1 = 1 then
74511: LD_VAR 0 2
74515: PUSH
74516: LD_INT 1
74518: EQUAL
74519: IFFALSE 74539
// s2 := rand ( 2 , 4 ) else
74521: LD_ADDR_VAR 0 3
74525: PUSH
74526: LD_INT 2
74528: PPUSH
74529: LD_INT 4
74531: PPUSH
74532: CALL_OW 12
74536: ST_TO_ADDR
74537: GO 74547
// s2 := 1 ;
74539: LD_ADDR_VAR 0 3
74543: PUSH
74544: LD_INT 1
74546: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
74547: LD_ADDR_VAR 0 5
74551: PUSH
74552: LD_VAR 0 6
74556: PUSH
74557: LD_INT 1
74559: ARRAY
74560: PPUSH
74561: LD_VAR 0 3
74565: PPUSH
74566: CALL_OW 259
74570: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
74571: LD_VAR 0 6
74575: PUSH
74576: LD_INT 1
74578: ARRAY
74579: PPUSH
74580: LD_VAR 0 2
74584: PPUSH
74585: LD_VAR 0 5
74589: PPUSH
74590: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
74594: LD_VAR 0 6
74598: PUSH
74599: LD_INT 1
74601: ARRAY
74602: PPUSH
74603: LD_VAR 0 3
74607: PPUSH
74608: LD_VAR 0 4
74612: PPUSH
74613: CALL_OW 237
// end ;
74617: PPOPN 6
74619: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
74620: LD_EXP 47
74624: PUSH
74625: LD_EXP 94
74629: AND
74630: IFFALSE 74709
74632: GO 74634
74634: DISABLE
74635: LD_INT 0
74637: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
74638: LD_ADDR_VAR 0 1
74642: PUSH
74643: LD_INT 22
74645: PUSH
74646: LD_OWVAR 2
74650: PUSH
74651: EMPTY
74652: LIST
74653: LIST
74654: PUSH
74655: LD_INT 30
74657: PUSH
74658: LD_INT 3
74660: PUSH
74661: EMPTY
74662: LIST
74663: LIST
74664: PUSH
74665: EMPTY
74666: LIST
74667: LIST
74668: PPUSH
74669: CALL_OW 69
74673: ST_TO_ADDR
// if not tmp then
74674: LD_VAR 0 1
74678: NOT
74679: IFFALSE 74683
// exit ;
74681: GO 74709
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
74683: LD_VAR 0 1
74687: PUSH
74688: LD_INT 1
74690: PPUSH
74691: LD_VAR 0 1
74695: PPUSH
74696: CALL_OW 12
74700: ARRAY
74701: PPUSH
74702: LD_INT 1
74704: PPUSH
74705: CALL_OW 234
// end ;
74709: PPOPN 1
74711: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
74712: LD_EXP 47
74716: PUSH
74717: LD_EXP 95
74721: AND
74722: IFFALSE 74834
74724: GO 74726
74726: DISABLE
74727: LD_INT 0
74729: PPUSH
74730: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
74731: LD_ADDR_VAR 0 2
74735: PUSH
74736: LD_INT 22
74738: PUSH
74739: LD_OWVAR 2
74743: PUSH
74744: EMPTY
74745: LIST
74746: LIST
74747: PUSH
74748: LD_INT 2
74750: PUSH
74751: LD_INT 30
74753: PUSH
74754: LD_INT 27
74756: PUSH
74757: EMPTY
74758: LIST
74759: LIST
74760: PUSH
74761: LD_INT 30
74763: PUSH
74764: LD_INT 26
74766: PUSH
74767: EMPTY
74768: LIST
74769: LIST
74770: PUSH
74771: LD_INT 30
74773: PUSH
74774: LD_INT 28
74776: PUSH
74777: EMPTY
74778: LIST
74779: LIST
74780: PUSH
74781: EMPTY
74782: LIST
74783: LIST
74784: LIST
74785: LIST
74786: PUSH
74787: EMPTY
74788: LIST
74789: LIST
74790: PPUSH
74791: CALL_OW 69
74795: ST_TO_ADDR
// if not tmp then
74796: LD_VAR 0 2
74800: NOT
74801: IFFALSE 74805
// exit ;
74803: GO 74834
// for i in tmp do
74805: LD_ADDR_VAR 0 1
74809: PUSH
74810: LD_VAR 0 2
74814: PUSH
74815: FOR_IN
74816: IFFALSE 74832
// SetLives ( i , 1 ) ;
74818: LD_VAR 0 1
74822: PPUSH
74823: LD_INT 1
74825: PPUSH
74826: CALL_OW 234
74830: GO 74815
74832: POP
74833: POP
// end ;
74834: PPOPN 2
74836: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
74837: LD_EXP 47
74841: PUSH
74842: LD_EXP 96
74846: AND
74847: IFFALSE 75134
74849: GO 74851
74851: DISABLE
74852: LD_INT 0
74854: PPUSH
74855: PPUSH
74856: PPUSH
// begin i := rand ( 1 , 7 ) ;
74857: LD_ADDR_VAR 0 1
74861: PUSH
74862: LD_INT 1
74864: PPUSH
74865: LD_INT 7
74867: PPUSH
74868: CALL_OW 12
74872: ST_TO_ADDR
// case i of 1 :
74873: LD_VAR 0 1
74877: PUSH
74878: LD_INT 1
74880: DOUBLE
74881: EQUAL
74882: IFTRUE 74886
74884: GO 74896
74886: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
74887: LD_STRING earthquake(getX(game), 0, 32)
74889: PPUSH
74890: CALL_OW 559
74894: GO 75134
74896: LD_INT 2
74898: DOUBLE
74899: EQUAL
74900: IFTRUE 74904
74902: GO 74918
74904: POP
// begin ToLua ( displayStucuk(); ) ;
74905: LD_STRING displayStucuk();
74907: PPUSH
74908: CALL_OW 559
// ResetFog ;
74912: CALL_OW 335
// end ; 3 :
74916: GO 75134
74918: LD_INT 3
74920: DOUBLE
74921: EQUAL
74922: IFTRUE 74926
74924: GO 75030
74926: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
74927: LD_ADDR_VAR 0 2
74931: PUSH
74932: LD_INT 22
74934: PUSH
74935: LD_OWVAR 2
74939: PUSH
74940: EMPTY
74941: LIST
74942: LIST
74943: PUSH
74944: LD_INT 25
74946: PUSH
74947: LD_INT 1
74949: PUSH
74950: EMPTY
74951: LIST
74952: LIST
74953: PUSH
74954: EMPTY
74955: LIST
74956: LIST
74957: PPUSH
74958: CALL_OW 69
74962: ST_TO_ADDR
// if not tmp then
74963: LD_VAR 0 2
74967: NOT
74968: IFFALSE 74972
// exit ;
74970: GO 75134
// un := tmp [ rand ( 1 , tmp ) ] ;
74972: LD_ADDR_VAR 0 3
74976: PUSH
74977: LD_VAR 0 2
74981: PUSH
74982: LD_INT 1
74984: PPUSH
74985: LD_VAR 0 2
74989: PPUSH
74990: CALL_OW 12
74994: ARRAY
74995: ST_TO_ADDR
// if Crawls ( un ) then
74996: LD_VAR 0 3
75000: PPUSH
75001: CALL_OW 318
75005: IFFALSE 75016
// ComWalk ( un ) ;
75007: LD_VAR 0 3
75011: PPUSH
75012: CALL_OW 138
// SetClass ( un , class_mortar ) ;
75016: LD_VAR 0 3
75020: PPUSH
75021: LD_INT 8
75023: PPUSH
75024: CALL_OW 336
// end ; 4 :
75028: GO 75134
75030: LD_INT 4
75032: DOUBLE
75033: EQUAL
75034: IFTRUE 75038
75036: GO 75112
75038: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
75039: LD_ADDR_VAR 0 2
75043: PUSH
75044: LD_INT 22
75046: PUSH
75047: LD_OWVAR 2
75051: PUSH
75052: EMPTY
75053: LIST
75054: LIST
75055: PUSH
75056: LD_INT 30
75058: PUSH
75059: LD_INT 29
75061: PUSH
75062: EMPTY
75063: LIST
75064: LIST
75065: PUSH
75066: EMPTY
75067: LIST
75068: LIST
75069: PPUSH
75070: CALL_OW 69
75074: ST_TO_ADDR
// if not tmp then
75075: LD_VAR 0 2
75079: NOT
75080: IFFALSE 75084
// exit ;
75082: GO 75134
// CenterNowOnUnits ( tmp [ 1 ] ) ;
75084: LD_VAR 0 2
75088: PUSH
75089: LD_INT 1
75091: ARRAY
75092: PPUSH
75093: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
75097: LD_VAR 0 2
75101: PUSH
75102: LD_INT 1
75104: ARRAY
75105: PPUSH
75106: CALL_OW 65
// end ; 5 .. 7 :
75110: GO 75134
75112: LD_INT 5
75114: DOUBLE
75115: GREATEREQUAL
75116: IFFALSE 75124
75118: LD_INT 7
75120: DOUBLE
75121: LESSEQUAL
75122: IFTRUE 75126
75124: GO 75133
75126: POP
// StreamSibBomb ; end ;
75127: CALL 71371 0 0
75131: GO 75134
75133: POP
// end ;
75134: PPOPN 3
75136: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
75137: LD_EXP 47
75141: PUSH
75142: LD_EXP 97
75146: AND
75147: IFFALSE 75303
75149: GO 75151
75151: DISABLE
75152: LD_INT 0
75154: PPUSH
75155: PPUSH
75156: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
75157: LD_ADDR_VAR 0 2
75161: PUSH
75162: LD_INT 81
75164: PUSH
75165: LD_OWVAR 2
75169: PUSH
75170: EMPTY
75171: LIST
75172: LIST
75173: PUSH
75174: LD_INT 2
75176: PUSH
75177: LD_INT 21
75179: PUSH
75180: LD_INT 1
75182: PUSH
75183: EMPTY
75184: LIST
75185: LIST
75186: PUSH
75187: LD_INT 21
75189: PUSH
75190: LD_INT 2
75192: PUSH
75193: EMPTY
75194: LIST
75195: LIST
75196: PUSH
75197: EMPTY
75198: LIST
75199: LIST
75200: LIST
75201: PUSH
75202: EMPTY
75203: LIST
75204: LIST
75205: PPUSH
75206: CALL_OW 69
75210: ST_TO_ADDR
// if not tmp then
75211: LD_VAR 0 2
75215: NOT
75216: IFFALSE 75220
// exit ;
75218: GO 75303
// p := 0 ;
75220: LD_ADDR_VAR 0 3
75224: PUSH
75225: LD_INT 0
75227: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
75228: LD_INT 35
75230: PPUSH
75231: CALL_OW 67
// p := p + 1 ;
75235: LD_ADDR_VAR 0 3
75239: PUSH
75240: LD_VAR 0 3
75244: PUSH
75245: LD_INT 1
75247: PLUS
75248: ST_TO_ADDR
// for i in tmp do
75249: LD_ADDR_VAR 0 1
75253: PUSH
75254: LD_VAR 0 2
75258: PUSH
75259: FOR_IN
75260: IFFALSE 75291
// if GetLives ( i ) < 1000 then
75262: LD_VAR 0 1
75266: PPUSH
75267: CALL_OW 256
75271: PUSH
75272: LD_INT 1000
75274: LESS
75275: IFFALSE 75289
// SetLives ( i , 1000 ) ;
75277: LD_VAR 0 1
75281: PPUSH
75282: LD_INT 1000
75284: PPUSH
75285: CALL_OW 234
75289: GO 75259
75291: POP
75292: POP
// until p > 20 ;
75293: LD_VAR 0 3
75297: PUSH
75298: LD_INT 20
75300: GREATER
75301: IFFALSE 75228
// end ;
75303: PPOPN 3
75305: END
// every 0 0$1 trigger StreamModeActive and sTime do
75306: LD_EXP 47
75310: PUSH
75311: LD_EXP 98
75315: AND
75316: IFFALSE 75351
75318: GO 75320
75320: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
75321: LD_INT 28
75323: PPUSH
75324: LD_OWVAR 2
75328: PPUSH
75329: LD_INT 2
75331: PPUSH
75332: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
75336: LD_INT 30
75338: PPUSH
75339: LD_OWVAR 2
75343: PPUSH
75344: LD_INT 2
75346: PPUSH
75347: CALL_OW 322
// end ;
75351: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
75352: LD_EXP 47
75356: PUSH
75357: LD_EXP 99
75361: AND
75362: IFFALSE 75483
75364: GO 75366
75366: DISABLE
75367: LD_INT 0
75369: PPUSH
75370: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
75371: LD_ADDR_VAR 0 2
75375: PUSH
75376: LD_INT 22
75378: PUSH
75379: LD_OWVAR 2
75383: PUSH
75384: EMPTY
75385: LIST
75386: LIST
75387: PUSH
75388: LD_INT 21
75390: PUSH
75391: LD_INT 1
75393: PUSH
75394: EMPTY
75395: LIST
75396: LIST
75397: PUSH
75398: LD_INT 3
75400: PUSH
75401: LD_INT 23
75403: PUSH
75404: LD_INT 0
75406: PUSH
75407: EMPTY
75408: LIST
75409: LIST
75410: PUSH
75411: EMPTY
75412: LIST
75413: LIST
75414: PUSH
75415: EMPTY
75416: LIST
75417: LIST
75418: LIST
75419: PPUSH
75420: CALL_OW 69
75424: ST_TO_ADDR
// if not tmp then
75425: LD_VAR 0 2
75429: NOT
75430: IFFALSE 75434
// exit ;
75432: GO 75483
// for i in tmp do
75434: LD_ADDR_VAR 0 1
75438: PUSH
75439: LD_VAR 0 2
75443: PUSH
75444: FOR_IN
75445: IFFALSE 75481
// begin if Crawls ( i ) then
75447: LD_VAR 0 1
75451: PPUSH
75452: CALL_OW 318
75456: IFFALSE 75467
// ComWalk ( i ) ;
75458: LD_VAR 0 1
75462: PPUSH
75463: CALL_OW 138
// SetClass ( i , 2 ) ;
75467: LD_VAR 0 1
75471: PPUSH
75472: LD_INT 2
75474: PPUSH
75475: CALL_OW 336
// end ;
75479: GO 75444
75481: POP
75482: POP
// end ;
75483: PPOPN 2
75485: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
75486: LD_EXP 47
75490: PUSH
75491: LD_EXP 100
75495: AND
75496: IFFALSE 75784
75498: GO 75500
75500: DISABLE
75501: LD_INT 0
75503: PPUSH
75504: PPUSH
75505: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
75506: LD_OWVAR 2
75510: PPUSH
75511: LD_INT 9
75513: PPUSH
75514: LD_INT 1
75516: PPUSH
75517: LD_INT 1
75519: PPUSH
75520: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
75524: LD_INT 9
75526: PPUSH
75527: LD_OWVAR 2
75531: PPUSH
75532: CALL_OW 343
// uc_side := 9 ;
75536: LD_ADDR_OWVAR 20
75540: PUSH
75541: LD_INT 9
75543: ST_TO_ADDR
// uc_nation := 2 ;
75544: LD_ADDR_OWVAR 21
75548: PUSH
75549: LD_INT 2
75551: ST_TO_ADDR
// hc_name := Dark Warrior ;
75552: LD_ADDR_OWVAR 26
75556: PUSH
75557: LD_STRING Dark Warrior
75559: ST_TO_ADDR
// hc_gallery :=  ;
75560: LD_ADDR_OWVAR 33
75564: PUSH
75565: LD_STRING 
75567: ST_TO_ADDR
// hc_noskilllimit := true ;
75568: LD_ADDR_OWVAR 76
75572: PUSH
75573: LD_INT 1
75575: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
75576: LD_ADDR_OWVAR 31
75580: PUSH
75581: LD_INT 30
75583: PUSH
75584: LD_INT 30
75586: PUSH
75587: LD_INT 30
75589: PUSH
75590: LD_INT 30
75592: PUSH
75593: EMPTY
75594: LIST
75595: LIST
75596: LIST
75597: LIST
75598: ST_TO_ADDR
// un := CreateHuman ;
75599: LD_ADDR_VAR 0 3
75603: PUSH
75604: CALL_OW 44
75608: ST_TO_ADDR
// hc_noskilllimit := false ;
75609: LD_ADDR_OWVAR 76
75613: PUSH
75614: LD_INT 0
75616: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
75617: LD_VAR 0 3
75621: PPUSH
75622: LD_INT 1
75624: PPUSH
75625: CALL_OW 51
// ToLua ( playRanger() ) ;
75629: LD_STRING playRanger()
75631: PPUSH
75632: CALL_OW 559
// p := 0 ;
75636: LD_ADDR_VAR 0 2
75640: PUSH
75641: LD_INT 0
75643: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
75644: LD_INT 35
75646: PPUSH
75647: CALL_OW 67
// p := p + 1 ;
75651: LD_ADDR_VAR 0 2
75655: PUSH
75656: LD_VAR 0 2
75660: PUSH
75661: LD_INT 1
75663: PLUS
75664: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
75665: LD_VAR 0 3
75669: PPUSH
75670: CALL_OW 256
75674: PUSH
75675: LD_INT 1000
75677: LESS
75678: IFFALSE 75692
// SetLives ( un , 1000 ) ;
75680: LD_VAR 0 3
75684: PPUSH
75685: LD_INT 1000
75687: PPUSH
75688: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
75692: LD_VAR 0 3
75696: PPUSH
75697: LD_INT 81
75699: PUSH
75700: LD_OWVAR 2
75704: PUSH
75705: EMPTY
75706: LIST
75707: LIST
75708: PUSH
75709: LD_INT 91
75711: PUSH
75712: LD_VAR 0 3
75716: PUSH
75717: LD_INT 30
75719: PUSH
75720: EMPTY
75721: LIST
75722: LIST
75723: LIST
75724: PUSH
75725: EMPTY
75726: LIST
75727: LIST
75728: PPUSH
75729: CALL_OW 69
75733: PPUSH
75734: LD_VAR 0 3
75738: PPUSH
75739: CALL_OW 74
75743: PPUSH
75744: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
75748: LD_VAR 0 2
75752: PUSH
75753: LD_INT 80
75755: GREATER
75756: PUSH
75757: LD_VAR 0 3
75761: PPUSH
75762: CALL_OW 301
75766: OR
75767: IFFALSE 75644
// if un then
75769: LD_VAR 0 3
75773: IFFALSE 75784
// RemoveUnit ( un ) ;
75775: LD_VAR 0 3
75779: PPUSH
75780: CALL_OW 64
// end ;
75784: PPOPN 3
75786: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
75787: LD_EXP 101
75791: IFFALSE 75907
75793: GO 75795
75795: DISABLE
75796: LD_INT 0
75798: PPUSH
75799: PPUSH
75800: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
75801: LD_ADDR_VAR 0 2
75805: PUSH
75806: LD_INT 81
75808: PUSH
75809: LD_OWVAR 2
75813: PUSH
75814: EMPTY
75815: LIST
75816: LIST
75817: PUSH
75818: LD_INT 21
75820: PUSH
75821: LD_INT 1
75823: PUSH
75824: EMPTY
75825: LIST
75826: LIST
75827: PUSH
75828: EMPTY
75829: LIST
75830: LIST
75831: PPUSH
75832: CALL_OW 69
75836: ST_TO_ADDR
// ToLua ( playComputer() ) ;
75837: LD_STRING playComputer()
75839: PPUSH
75840: CALL_OW 559
// if not tmp then
75844: LD_VAR 0 2
75848: NOT
75849: IFFALSE 75853
// exit ;
75851: GO 75907
// for i in tmp do
75853: LD_ADDR_VAR 0 1
75857: PUSH
75858: LD_VAR 0 2
75862: PUSH
75863: FOR_IN
75864: IFFALSE 75905
// for j := 1 to 4 do
75866: LD_ADDR_VAR 0 3
75870: PUSH
75871: DOUBLE
75872: LD_INT 1
75874: DEC
75875: ST_TO_ADDR
75876: LD_INT 4
75878: PUSH
75879: FOR_TO
75880: IFFALSE 75901
// SetSkill ( i , j , 10 ) ;
75882: LD_VAR 0 1
75886: PPUSH
75887: LD_VAR 0 3
75891: PPUSH
75892: LD_INT 10
75894: PPUSH
75895: CALL_OW 237
75899: GO 75879
75901: POP
75902: POP
75903: GO 75863
75905: POP
75906: POP
// end ;
75907: PPOPN 3
75909: END
// every 0 0$1 trigger s30 do var i , tmp ;
75910: LD_EXP 102
75914: IFFALSE 75983
75916: GO 75918
75918: DISABLE
75919: LD_INT 0
75921: PPUSH
75922: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
75923: LD_ADDR_VAR 0 2
75927: PUSH
75928: LD_INT 22
75930: PUSH
75931: LD_OWVAR 2
75935: PUSH
75936: EMPTY
75937: LIST
75938: LIST
75939: PPUSH
75940: CALL_OW 69
75944: ST_TO_ADDR
// if not tmp then
75945: LD_VAR 0 2
75949: NOT
75950: IFFALSE 75954
// exit ;
75952: GO 75983
// for i in tmp do
75954: LD_ADDR_VAR 0 1
75958: PUSH
75959: LD_VAR 0 2
75963: PUSH
75964: FOR_IN
75965: IFFALSE 75981
// SetLives ( i , 300 ) ;
75967: LD_VAR 0 1
75971: PPUSH
75972: LD_INT 300
75974: PPUSH
75975: CALL_OW 234
75979: GO 75964
75981: POP
75982: POP
// end ;
75983: PPOPN 2
75985: END
// every 0 0$1 trigger s60 do var i , tmp ;
75986: LD_EXP 103
75990: IFFALSE 76059
75992: GO 75994
75994: DISABLE
75995: LD_INT 0
75997: PPUSH
75998: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
75999: LD_ADDR_VAR 0 2
76003: PUSH
76004: LD_INT 22
76006: PUSH
76007: LD_OWVAR 2
76011: PUSH
76012: EMPTY
76013: LIST
76014: LIST
76015: PPUSH
76016: CALL_OW 69
76020: ST_TO_ADDR
// if not tmp then
76021: LD_VAR 0 2
76025: NOT
76026: IFFALSE 76030
// exit ;
76028: GO 76059
// for i in tmp do
76030: LD_ADDR_VAR 0 1
76034: PUSH
76035: LD_VAR 0 2
76039: PUSH
76040: FOR_IN
76041: IFFALSE 76057
// SetLives ( i , 600 ) ;
76043: LD_VAR 0 1
76047: PPUSH
76048: LD_INT 600
76050: PPUSH
76051: CALL_OW 234
76055: GO 76040
76057: POP
76058: POP
// end ;
76059: PPOPN 2
76061: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
76062: LD_INT 0
76064: PPUSH
// case cmd of 301 :
76065: LD_VAR 0 1
76069: PUSH
76070: LD_INT 301
76072: DOUBLE
76073: EQUAL
76074: IFTRUE 76078
76076: GO 76110
76078: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
76079: LD_VAR 0 6
76083: PPUSH
76084: LD_VAR 0 7
76088: PPUSH
76089: LD_VAR 0 8
76093: PPUSH
76094: LD_VAR 0 4
76098: PPUSH
76099: LD_VAR 0 5
76103: PPUSH
76104: CALL 77319 0 5
76108: GO 76231
76110: LD_INT 302
76112: DOUBLE
76113: EQUAL
76114: IFTRUE 76118
76116: GO 76155
76118: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
76119: LD_VAR 0 6
76123: PPUSH
76124: LD_VAR 0 7
76128: PPUSH
76129: LD_VAR 0 8
76133: PPUSH
76134: LD_VAR 0 9
76138: PPUSH
76139: LD_VAR 0 4
76143: PPUSH
76144: LD_VAR 0 5
76148: PPUSH
76149: CALL 77410 0 6
76153: GO 76231
76155: LD_INT 303
76157: DOUBLE
76158: EQUAL
76159: IFTRUE 76163
76161: GO 76200
76163: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
76164: LD_VAR 0 6
76168: PPUSH
76169: LD_VAR 0 7
76173: PPUSH
76174: LD_VAR 0 8
76178: PPUSH
76179: LD_VAR 0 9
76183: PPUSH
76184: LD_VAR 0 4
76188: PPUSH
76189: LD_VAR 0 5
76193: PPUSH
76194: CALL 76236 0 6
76198: GO 76231
76200: LD_INT 304
76202: DOUBLE
76203: EQUAL
76204: IFTRUE 76208
76206: GO 76230
76208: POP
// hHackTeleport ( unit , x , y ) ; end ;
76209: LD_VAR 0 2
76213: PPUSH
76214: LD_VAR 0 4
76218: PPUSH
76219: LD_VAR 0 5
76223: PPUSH
76224: CALL 78003 0 3
76228: GO 76231
76230: POP
// end ;
76231: LD_VAR 0 12
76235: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
76236: LD_INT 0
76238: PPUSH
76239: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
76240: LD_VAR 0 1
76244: PUSH
76245: LD_INT 1
76247: LESS
76248: PUSH
76249: LD_VAR 0 1
76253: PUSH
76254: LD_INT 3
76256: GREATER
76257: OR
76258: PUSH
76259: LD_VAR 0 5
76263: PPUSH
76264: LD_VAR 0 6
76268: PPUSH
76269: CALL_OW 428
76273: OR
76274: IFFALSE 76278
// exit ;
76276: GO 77006
// uc_side := your_side ;
76278: LD_ADDR_OWVAR 20
76282: PUSH
76283: LD_OWVAR 2
76287: ST_TO_ADDR
// uc_nation := nation ;
76288: LD_ADDR_OWVAR 21
76292: PUSH
76293: LD_VAR 0 1
76297: ST_TO_ADDR
// bc_level = 1 ;
76298: LD_ADDR_OWVAR 43
76302: PUSH
76303: LD_INT 1
76305: ST_TO_ADDR
// case btype of 1 :
76306: LD_VAR 0 2
76310: PUSH
76311: LD_INT 1
76313: DOUBLE
76314: EQUAL
76315: IFTRUE 76319
76317: GO 76330
76319: POP
// bc_type := b_depot ; 2 :
76320: LD_ADDR_OWVAR 42
76324: PUSH
76325: LD_INT 0
76327: ST_TO_ADDR
76328: GO 76950
76330: LD_INT 2
76332: DOUBLE
76333: EQUAL
76334: IFTRUE 76338
76336: GO 76349
76338: POP
// bc_type := b_warehouse ; 3 :
76339: LD_ADDR_OWVAR 42
76343: PUSH
76344: LD_INT 1
76346: ST_TO_ADDR
76347: GO 76950
76349: LD_INT 3
76351: DOUBLE
76352: EQUAL
76353: IFTRUE 76357
76355: GO 76368
76357: POP
// bc_type := b_lab ; 4 .. 9 :
76358: LD_ADDR_OWVAR 42
76362: PUSH
76363: LD_INT 6
76365: ST_TO_ADDR
76366: GO 76950
76368: LD_INT 4
76370: DOUBLE
76371: GREATEREQUAL
76372: IFFALSE 76380
76374: LD_INT 9
76376: DOUBLE
76377: LESSEQUAL
76378: IFTRUE 76382
76380: GO 76442
76382: POP
// begin bc_type := b_lab_half ;
76383: LD_ADDR_OWVAR 42
76387: PUSH
76388: LD_INT 7
76390: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
76391: LD_ADDR_OWVAR 44
76395: PUSH
76396: LD_INT 10
76398: PUSH
76399: LD_INT 11
76401: PUSH
76402: LD_INT 12
76404: PUSH
76405: LD_INT 15
76407: PUSH
76408: LD_INT 14
76410: PUSH
76411: LD_INT 13
76413: PUSH
76414: EMPTY
76415: LIST
76416: LIST
76417: LIST
76418: LIST
76419: LIST
76420: LIST
76421: PUSH
76422: LD_VAR 0 2
76426: PUSH
76427: LD_INT 3
76429: MINUS
76430: ARRAY
76431: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
76432: LD_ADDR_OWVAR 45
76436: PUSH
76437: LD_INT 9
76439: ST_TO_ADDR
// end ; 10 .. 13 :
76440: GO 76950
76442: LD_INT 10
76444: DOUBLE
76445: GREATEREQUAL
76446: IFFALSE 76454
76448: LD_INT 13
76450: DOUBLE
76451: LESSEQUAL
76452: IFTRUE 76456
76454: GO 76533
76456: POP
// begin bc_type := b_lab_full ;
76457: LD_ADDR_OWVAR 42
76461: PUSH
76462: LD_INT 8
76464: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
76465: LD_ADDR_OWVAR 44
76469: PUSH
76470: LD_INT 10
76472: PUSH
76473: LD_INT 12
76475: PUSH
76476: LD_INT 14
76478: PUSH
76479: LD_INT 13
76481: PUSH
76482: EMPTY
76483: LIST
76484: LIST
76485: LIST
76486: LIST
76487: PUSH
76488: LD_VAR 0 2
76492: PUSH
76493: LD_INT 9
76495: MINUS
76496: ARRAY
76497: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
76498: LD_ADDR_OWVAR 45
76502: PUSH
76503: LD_INT 11
76505: PUSH
76506: LD_INT 15
76508: PUSH
76509: LD_INT 12
76511: PUSH
76512: LD_INT 15
76514: PUSH
76515: EMPTY
76516: LIST
76517: LIST
76518: LIST
76519: LIST
76520: PUSH
76521: LD_VAR 0 2
76525: PUSH
76526: LD_INT 9
76528: MINUS
76529: ARRAY
76530: ST_TO_ADDR
// end ; 14 :
76531: GO 76950
76533: LD_INT 14
76535: DOUBLE
76536: EQUAL
76537: IFTRUE 76541
76539: GO 76552
76541: POP
// bc_type := b_workshop ; 15 :
76542: LD_ADDR_OWVAR 42
76546: PUSH
76547: LD_INT 2
76549: ST_TO_ADDR
76550: GO 76950
76552: LD_INT 15
76554: DOUBLE
76555: EQUAL
76556: IFTRUE 76560
76558: GO 76571
76560: POP
// bc_type := b_factory ; 16 :
76561: LD_ADDR_OWVAR 42
76565: PUSH
76566: LD_INT 3
76568: ST_TO_ADDR
76569: GO 76950
76571: LD_INT 16
76573: DOUBLE
76574: EQUAL
76575: IFTRUE 76579
76577: GO 76590
76579: POP
// bc_type := b_ext_gun ; 17 :
76580: LD_ADDR_OWVAR 42
76584: PUSH
76585: LD_INT 17
76587: ST_TO_ADDR
76588: GO 76950
76590: LD_INT 17
76592: DOUBLE
76593: EQUAL
76594: IFTRUE 76598
76596: GO 76626
76598: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
76599: LD_ADDR_OWVAR 42
76603: PUSH
76604: LD_INT 19
76606: PUSH
76607: LD_INT 23
76609: PUSH
76610: LD_INT 19
76612: PUSH
76613: EMPTY
76614: LIST
76615: LIST
76616: LIST
76617: PUSH
76618: LD_VAR 0 1
76622: ARRAY
76623: ST_TO_ADDR
76624: GO 76950
76626: LD_INT 18
76628: DOUBLE
76629: EQUAL
76630: IFTRUE 76634
76632: GO 76645
76634: POP
// bc_type := b_ext_radar ; 19 :
76635: LD_ADDR_OWVAR 42
76639: PUSH
76640: LD_INT 20
76642: ST_TO_ADDR
76643: GO 76950
76645: LD_INT 19
76647: DOUBLE
76648: EQUAL
76649: IFTRUE 76653
76651: GO 76664
76653: POP
// bc_type := b_ext_radio ; 20 :
76654: LD_ADDR_OWVAR 42
76658: PUSH
76659: LD_INT 22
76661: ST_TO_ADDR
76662: GO 76950
76664: LD_INT 20
76666: DOUBLE
76667: EQUAL
76668: IFTRUE 76672
76670: GO 76683
76672: POP
// bc_type := b_ext_siberium ; 21 :
76673: LD_ADDR_OWVAR 42
76677: PUSH
76678: LD_INT 21
76680: ST_TO_ADDR
76681: GO 76950
76683: LD_INT 21
76685: DOUBLE
76686: EQUAL
76687: IFTRUE 76691
76689: GO 76702
76691: POP
// bc_type := b_ext_computer ; 22 :
76692: LD_ADDR_OWVAR 42
76696: PUSH
76697: LD_INT 24
76699: ST_TO_ADDR
76700: GO 76950
76702: LD_INT 22
76704: DOUBLE
76705: EQUAL
76706: IFTRUE 76710
76708: GO 76721
76710: POP
// bc_type := b_ext_track ; 23 :
76711: LD_ADDR_OWVAR 42
76715: PUSH
76716: LD_INT 16
76718: ST_TO_ADDR
76719: GO 76950
76721: LD_INT 23
76723: DOUBLE
76724: EQUAL
76725: IFTRUE 76729
76727: GO 76740
76729: POP
// bc_type := b_ext_laser ; 24 :
76730: LD_ADDR_OWVAR 42
76734: PUSH
76735: LD_INT 25
76737: ST_TO_ADDR
76738: GO 76950
76740: LD_INT 24
76742: DOUBLE
76743: EQUAL
76744: IFTRUE 76748
76746: GO 76759
76748: POP
// bc_type := b_control_tower ; 25 :
76749: LD_ADDR_OWVAR 42
76753: PUSH
76754: LD_INT 36
76756: ST_TO_ADDR
76757: GO 76950
76759: LD_INT 25
76761: DOUBLE
76762: EQUAL
76763: IFTRUE 76767
76765: GO 76778
76767: POP
// bc_type := b_breastwork ; 26 :
76768: LD_ADDR_OWVAR 42
76772: PUSH
76773: LD_INT 31
76775: ST_TO_ADDR
76776: GO 76950
76778: LD_INT 26
76780: DOUBLE
76781: EQUAL
76782: IFTRUE 76786
76784: GO 76797
76786: POP
// bc_type := b_bunker ; 27 :
76787: LD_ADDR_OWVAR 42
76791: PUSH
76792: LD_INT 32
76794: ST_TO_ADDR
76795: GO 76950
76797: LD_INT 27
76799: DOUBLE
76800: EQUAL
76801: IFTRUE 76805
76803: GO 76816
76805: POP
// bc_type := b_turret ; 28 :
76806: LD_ADDR_OWVAR 42
76810: PUSH
76811: LD_INT 33
76813: ST_TO_ADDR
76814: GO 76950
76816: LD_INT 28
76818: DOUBLE
76819: EQUAL
76820: IFTRUE 76824
76822: GO 76835
76824: POP
// bc_type := b_armoury ; 29 :
76825: LD_ADDR_OWVAR 42
76829: PUSH
76830: LD_INT 4
76832: ST_TO_ADDR
76833: GO 76950
76835: LD_INT 29
76837: DOUBLE
76838: EQUAL
76839: IFTRUE 76843
76841: GO 76854
76843: POP
// bc_type := b_barracks ; 30 :
76844: LD_ADDR_OWVAR 42
76848: PUSH
76849: LD_INT 5
76851: ST_TO_ADDR
76852: GO 76950
76854: LD_INT 30
76856: DOUBLE
76857: EQUAL
76858: IFTRUE 76862
76860: GO 76873
76862: POP
// bc_type := b_solar_power ; 31 :
76863: LD_ADDR_OWVAR 42
76867: PUSH
76868: LD_INT 27
76870: ST_TO_ADDR
76871: GO 76950
76873: LD_INT 31
76875: DOUBLE
76876: EQUAL
76877: IFTRUE 76881
76879: GO 76892
76881: POP
// bc_type := b_oil_power ; 32 :
76882: LD_ADDR_OWVAR 42
76886: PUSH
76887: LD_INT 26
76889: ST_TO_ADDR
76890: GO 76950
76892: LD_INT 32
76894: DOUBLE
76895: EQUAL
76896: IFTRUE 76900
76898: GO 76911
76900: POP
// bc_type := b_siberite_power ; 33 :
76901: LD_ADDR_OWVAR 42
76905: PUSH
76906: LD_INT 28
76908: ST_TO_ADDR
76909: GO 76950
76911: LD_INT 33
76913: DOUBLE
76914: EQUAL
76915: IFTRUE 76919
76917: GO 76930
76919: POP
// bc_type := b_oil_mine ; 34 :
76920: LD_ADDR_OWVAR 42
76924: PUSH
76925: LD_INT 29
76927: ST_TO_ADDR
76928: GO 76950
76930: LD_INT 34
76932: DOUBLE
76933: EQUAL
76934: IFTRUE 76938
76936: GO 76949
76938: POP
// bc_type := b_siberite_mine ; end ;
76939: LD_ADDR_OWVAR 42
76943: PUSH
76944: LD_INT 30
76946: ST_TO_ADDR
76947: GO 76950
76949: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
76950: LD_ADDR_VAR 0 8
76954: PUSH
76955: LD_VAR 0 5
76959: PPUSH
76960: LD_VAR 0 6
76964: PPUSH
76965: LD_VAR 0 3
76969: PPUSH
76970: CALL_OW 47
76974: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
76975: LD_OWVAR 42
76979: PUSH
76980: LD_INT 32
76982: PUSH
76983: LD_INT 33
76985: PUSH
76986: EMPTY
76987: LIST
76988: LIST
76989: IN
76990: IFFALSE 77006
// PlaceWeaponTurret ( b , weapon ) ;
76992: LD_VAR 0 8
76996: PPUSH
76997: LD_VAR 0 4
77001: PPUSH
77002: CALL_OW 431
// end ;
77006: LD_VAR 0 7
77010: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
77011: LD_INT 0
77013: PPUSH
77014: PPUSH
77015: PPUSH
77016: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
77017: LD_ADDR_VAR 0 4
77021: PUSH
77022: LD_INT 22
77024: PUSH
77025: LD_OWVAR 2
77029: PUSH
77030: EMPTY
77031: LIST
77032: LIST
77033: PUSH
77034: LD_INT 2
77036: PUSH
77037: LD_INT 30
77039: PUSH
77040: LD_INT 0
77042: PUSH
77043: EMPTY
77044: LIST
77045: LIST
77046: PUSH
77047: LD_INT 30
77049: PUSH
77050: LD_INT 1
77052: PUSH
77053: EMPTY
77054: LIST
77055: LIST
77056: PUSH
77057: EMPTY
77058: LIST
77059: LIST
77060: LIST
77061: PUSH
77062: EMPTY
77063: LIST
77064: LIST
77065: PPUSH
77066: CALL_OW 69
77070: ST_TO_ADDR
// if not tmp then
77071: LD_VAR 0 4
77075: NOT
77076: IFFALSE 77080
// exit ;
77078: GO 77139
// for i in tmp do
77080: LD_ADDR_VAR 0 2
77084: PUSH
77085: LD_VAR 0 4
77089: PUSH
77090: FOR_IN
77091: IFFALSE 77137
// for j = 1 to 3 do
77093: LD_ADDR_VAR 0 3
77097: PUSH
77098: DOUBLE
77099: LD_INT 1
77101: DEC
77102: ST_TO_ADDR
77103: LD_INT 3
77105: PUSH
77106: FOR_TO
77107: IFFALSE 77133
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
77109: LD_VAR 0 2
77113: PPUSH
77114: CALL_OW 274
77118: PPUSH
77119: LD_VAR 0 3
77123: PPUSH
77124: LD_INT 99999
77126: PPUSH
77127: CALL_OW 277
77131: GO 77106
77133: POP
77134: POP
77135: GO 77090
77137: POP
77138: POP
// end ;
77139: LD_VAR 0 1
77143: RET
// export function hHackSetLevel10 ; var i , j ; begin
77144: LD_INT 0
77146: PPUSH
77147: PPUSH
77148: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
77149: LD_ADDR_VAR 0 2
77153: PUSH
77154: LD_INT 21
77156: PUSH
77157: LD_INT 1
77159: PUSH
77160: EMPTY
77161: LIST
77162: LIST
77163: PPUSH
77164: CALL_OW 69
77168: PUSH
77169: FOR_IN
77170: IFFALSE 77222
// if IsSelected ( i ) then
77172: LD_VAR 0 2
77176: PPUSH
77177: CALL_OW 306
77181: IFFALSE 77220
// begin for j := 1 to 4 do
77183: LD_ADDR_VAR 0 3
77187: PUSH
77188: DOUBLE
77189: LD_INT 1
77191: DEC
77192: ST_TO_ADDR
77193: LD_INT 4
77195: PUSH
77196: FOR_TO
77197: IFFALSE 77218
// SetSkill ( i , j , 10 ) ;
77199: LD_VAR 0 2
77203: PPUSH
77204: LD_VAR 0 3
77208: PPUSH
77209: LD_INT 10
77211: PPUSH
77212: CALL_OW 237
77216: GO 77196
77218: POP
77219: POP
// end ;
77220: GO 77169
77222: POP
77223: POP
// end ;
77224: LD_VAR 0 1
77228: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
77229: LD_INT 0
77231: PPUSH
77232: PPUSH
77233: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
77234: LD_ADDR_VAR 0 2
77238: PUSH
77239: LD_INT 22
77241: PUSH
77242: LD_OWVAR 2
77246: PUSH
77247: EMPTY
77248: LIST
77249: LIST
77250: PUSH
77251: LD_INT 21
77253: PUSH
77254: LD_INT 1
77256: PUSH
77257: EMPTY
77258: LIST
77259: LIST
77260: PUSH
77261: EMPTY
77262: LIST
77263: LIST
77264: PPUSH
77265: CALL_OW 69
77269: PUSH
77270: FOR_IN
77271: IFFALSE 77312
// begin for j := 1 to 4 do
77273: LD_ADDR_VAR 0 3
77277: PUSH
77278: DOUBLE
77279: LD_INT 1
77281: DEC
77282: ST_TO_ADDR
77283: LD_INT 4
77285: PUSH
77286: FOR_TO
77287: IFFALSE 77308
// SetSkill ( i , j , 10 ) ;
77289: LD_VAR 0 2
77293: PPUSH
77294: LD_VAR 0 3
77298: PPUSH
77299: LD_INT 10
77301: PPUSH
77302: CALL_OW 237
77306: GO 77286
77308: POP
77309: POP
// end ;
77310: GO 77270
77312: POP
77313: POP
// end ;
77314: LD_VAR 0 1
77318: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
77319: LD_INT 0
77321: PPUSH
// uc_side := your_side ;
77322: LD_ADDR_OWVAR 20
77326: PUSH
77327: LD_OWVAR 2
77331: ST_TO_ADDR
// uc_nation := nation ;
77332: LD_ADDR_OWVAR 21
77336: PUSH
77337: LD_VAR 0 1
77341: ST_TO_ADDR
// InitHc ;
77342: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
77346: LD_INT 0
77348: PPUSH
77349: LD_VAR 0 2
77353: PPUSH
77354: LD_VAR 0 3
77358: PPUSH
77359: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
77363: LD_VAR 0 4
77367: PPUSH
77368: LD_VAR 0 5
77372: PPUSH
77373: CALL_OW 428
77377: PUSH
77378: LD_INT 0
77380: EQUAL
77381: IFFALSE 77405
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
77383: CALL_OW 44
77387: PPUSH
77388: LD_VAR 0 4
77392: PPUSH
77393: LD_VAR 0 5
77397: PPUSH
77398: LD_INT 1
77400: PPUSH
77401: CALL_OW 48
// end ;
77405: LD_VAR 0 6
77409: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
77410: LD_INT 0
77412: PPUSH
77413: PPUSH
// uc_side := your_side ;
77414: LD_ADDR_OWVAR 20
77418: PUSH
77419: LD_OWVAR 2
77423: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
77424: LD_VAR 0 1
77428: PUSH
77429: LD_INT 1
77431: PUSH
77432: LD_INT 2
77434: PUSH
77435: LD_INT 3
77437: PUSH
77438: LD_INT 4
77440: PUSH
77441: LD_INT 5
77443: PUSH
77444: EMPTY
77445: LIST
77446: LIST
77447: LIST
77448: LIST
77449: LIST
77450: IN
77451: IFFALSE 77463
// uc_nation := nation_american else
77453: LD_ADDR_OWVAR 21
77457: PUSH
77458: LD_INT 1
77460: ST_TO_ADDR
77461: GO 77506
// if chassis in [ 11 , 12 , 13 , 14 ] then
77463: LD_VAR 0 1
77467: PUSH
77468: LD_INT 11
77470: PUSH
77471: LD_INT 12
77473: PUSH
77474: LD_INT 13
77476: PUSH
77477: LD_INT 14
77479: PUSH
77480: EMPTY
77481: LIST
77482: LIST
77483: LIST
77484: LIST
77485: IN
77486: IFFALSE 77498
// uc_nation := nation_arabian else
77488: LD_ADDR_OWVAR 21
77492: PUSH
77493: LD_INT 2
77495: ST_TO_ADDR
77496: GO 77506
// uc_nation := nation_russian ;
77498: LD_ADDR_OWVAR 21
77502: PUSH
77503: LD_INT 3
77505: ST_TO_ADDR
// vc_chassis := chassis ;
77506: LD_ADDR_OWVAR 37
77510: PUSH
77511: LD_VAR 0 1
77515: ST_TO_ADDR
// vc_engine := engine ;
77516: LD_ADDR_OWVAR 39
77520: PUSH
77521: LD_VAR 0 2
77525: ST_TO_ADDR
// vc_control := control ;
77526: LD_ADDR_OWVAR 38
77530: PUSH
77531: LD_VAR 0 3
77535: ST_TO_ADDR
// vc_weapon := weapon ;
77536: LD_ADDR_OWVAR 40
77540: PUSH
77541: LD_VAR 0 4
77545: ST_TO_ADDR
// un := CreateVehicle ;
77546: LD_ADDR_VAR 0 8
77550: PUSH
77551: CALL_OW 45
77555: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
77556: LD_VAR 0 8
77560: PPUSH
77561: LD_INT 0
77563: PPUSH
77564: LD_INT 5
77566: PPUSH
77567: CALL_OW 12
77571: PPUSH
77572: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
77576: LD_VAR 0 8
77580: PPUSH
77581: LD_VAR 0 5
77585: PPUSH
77586: LD_VAR 0 6
77590: PPUSH
77591: LD_INT 1
77593: PPUSH
77594: CALL_OW 48
// end ;
77598: LD_VAR 0 7
77602: RET
// export hInvincible ; every 1 do
77603: GO 77605
77605: DISABLE
// hInvincible := [ ] ;
77606: LD_ADDR_EXP 104
77610: PUSH
77611: EMPTY
77612: ST_TO_ADDR
77613: END
// every 10 do var i ;
77614: GO 77616
77616: DISABLE
77617: LD_INT 0
77619: PPUSH
// begin enable ;
77620: ENABLE
// if not hInvincible then
77621: LD_EXP 104
77625: NOT
77626: IFFALSE 77630
// exit ;
77628: GO 77674
// for i in hInvincible do
77630: LD_ADDR_VAR 0 1
77634: PUSH
77635: LD_EXP 104
77639: PUSH
77640: FOR_IN
77641: IFFALSE 77672
// if GetLives ( i ) < 1000 then
77643: LD_VAR 0 1
77647: PPUSH
77648: CALL_OW 256
77652: PUSH
77653: LD_INT 1000
77655: LESS
77656: IFFALSE 77670
// SetLives ( i , 1000 ) ;
77658: LD_VAR 0 1
77662: PPUSH
77663: LD_INT 1000
77665: PPUSH
77666: CALL_OW 234
77670: GO 77640
77672: POP
77673: POP
// end ;
77674: PPOPN 1
77676: END
// export function hHackInvincible ; var i ; begin
77677: LD_INT 0
77679: PPUSH
77680: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
77681: LD_ADDR_VAR 0 2
77685: PUSH
77686: LD_INT 2
77688: PUSH
77689: LD_INT 21
77691: PUSH
77692: LD_INT 1
77694: PUSH
77695: EMPTY
77696: LIST
77697: LIST
77698: PUSH
77699: LD_INT 21
77701: PUSH
77702: LD_INT 2
77704: PUSH
77705: EMPTY
77706: LIST
77707: LIST
77708: PUSH
77709: EMPTY
77710: LIST
77711: LIST
77712: LIST
77713: PPUSH
77714: CALL_OW 69
77718: PUSH
77719: FOR_IN
77720: IFFALSE 77781
// if IsSelected ( i ) then
77722: LD_VAR 0 2
77726: PPUSH
77727: CALL_OW 306
77731: IFFALSE 77779
// begin if i in hInvincible then
77733: LD_VAR 0 2
77737: PUSH
77738: LD_EXP 104
77742: IN
77743: IFFALSE 77763
// hInvincible := hInvincible diff i else
77745: LD_ADDR_EXP 104
77749: PUSH
77750: LD_EXP 104
77754: PUSH
77755: LD_VAR 0 2
77759: DIFF
77760: ST_TO_ADDR
77761: GO 77779
// hInvincible := hInvincible union i ;
77763: LD_ADDR_EXP 104
77767: PUSH
77768: LD_EXP 104
77772: PUSH
77773: LD_VAR 0 2
77777: UNION
77778: ST_TO_ADDR
// end ;
77779: GO 77719
77781: POP
77782: POP
// end ;
77783: LD_VAR 0 1
77787: RET
// export function hHackInvisible ; var i , j ; begin
77788: LD_INT 0
77790: PPUSH
77791: PPUSH
77792: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
77793: LD_ADDR_VAR 0 2
77797: PUSH
77798: LD_INT 21
77800: PUSH
77801: LD_INT 1
77803: PUSH
77804: EMPTY
77805: LIST
77806: LIST
77807: PPUSH
77808: CALL_OW 69
77812: PUSH
77813: FOR_IN
77814: IFFALSE 77838
// if IsSelected ( i ) then
77816: LD_VAR 0 2
77820: PPUSH
77821: CALL_OW 306
77825: IFFALSE 77836
// ComForceInvisible ( i ) ;
77827: LD_VAR 0 2
77831: PPUSH
77832: CALL_OW 496
77836: GO 77813
77838: POP
77839: POP
// end ;
77840: LD_VAR 0 1
77844: RET
// export function hHackChangeYourSide ; begin
77845: LD_INT 0
77847: PPUSH
// if your_side = 8 then
77848: LD_OWVAR 2
77852: PUSH
77853: LD_INT 8
77855: EQUAL
77856: IFFALSE 77868
// your_side := 0 else
77858: LD_ADDR_OWVAR 2
77862: PUSH
77863: LD_INT 0
77865: ST_TO_ADDR
77866: GO 77882
// your_side := your_side + 1 ;
77868: LD_ADDR_OWVAR 2
77872: PUSH
77873: LD_OWVAR 2
77877: PUSH
77878: LD_INT 1
77880: PLUS
77881: ST_TO_ADDR
// end ;
77882: LD_VAR 0 1
77886: RET
// export function hHackChangeUnitSide ; var i , j ; begin
77887: LD_INT 0
77889: PPUSH
77890: PPUSH
77891: PPUSH
// for i in all_units do
77892: LD_ADDR_VAR 0 2
77896: PUSH
77897: LD_OWVAR 3
77901: PUSH
77902: FOR_IN
77903: IFFALSE 77981
// if IsSelected ( i ) then
77905: LD_VAR 0 2
77909: PPUSH
77910: CALL_OW 306
77914: IFFALSE 77979
// begin j := GetSide ( i ) ;
77916: LD_ADDR_VAR 0 3
77920: PUSH
77921: LD_VAR 0 2
77925: PPUSH
77926: CALL_OW 255
77930: ST_TO_ADDR
// if j = 8 then
77931: LD_VAR 0 3
77935: PUSH
77936: LD_INT 8
77938: EQUAL
77939: IFFALSE 77951
// j := 0 else
77941: LD_ADDR_VAR 0 3
77945: PUSH
77946: LD_INT 0
77948: ST_TO_ADDR
77949: GO 77965
// j := j + 1 ;
77951: LD_ADDR_VAR 0 3
77955: PUSH
77956: LD_VAR 0 3
77960: PUSH
77961: LD_INT 1
77963: PLUS
77964: ST_TO_ADDR
// SetSide ( i , j ) ;
77965: LD_VAR 0 2
77969: PPUSH
77970: LD_VAR 0 3
77974: PPUSH
77975: CALL_OW 235
// end ;
77979: GO 77902
77981: POP
77982: POP
// end ;
77983: LD_VAR 0 1
77987: RET
// export function hHackFog ; begin
77988: LD_INT 0
77990: PPUSH
// FogOff ( true ) ;
77991: LD_INT 1
77993: PPUSH
77994: CALL_OW 344
// end ;
77998: LD_VAR 0 1
78002: RET
// export function hHackTeleport ( unit , x , y ) ; begin
78003: LD_INT 0
78005: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
78006: LD_VAR 0 1
78010: PPUSH
78011: LD_VAR 0 2
78015: PPUSH
78016: LD_VAR 0 3
78020: PPUSH
78021: LD_INT 1
78023: PPUSH
78024: LD_INT 1
78026: PPUSH
78027: CALL_OW 483
// CenterOnXY ( x , y ) ;
78031: LD_VAR 0 2
78035: PPUSH
78036: LD_VAR 0 3
78040: PPUSH
78041: CALL_OW 84
// end ;
78045: LD_VAR 0 4
78049: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
78050: LD_INT 0
78052: PPUSH
78053: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
78054: LD_VAR 0 1
78058: NOT
78059: PUSH
78060: LD_VAR 0 2
78064: PPUSH
78065: LD_VAR 0 3
78069: PPUSH
78070: CALL_OW 488
78074: NOT
78075: OR
78076: PUSH
78077: LD_VAR 0 1
78081: PPUSH
78082: CALL_OW 266
78086: PUSH
78087: LD_INT 3
78089: NONEQUAL
78090: PUSH
78091: LD_VAR 0 1
78095: PPUSH
78096: CALL_OW 247
78100: PUSH
78101: LD_INT 1
78103: EQUAL
78104: NOT
78105: AND
78106: OR
78107: IFFALSE 78111
// exit ;
78109: GO 78393
// if GetType ( factory ) = unit_human then
78111: LD_VAR 0 1
78115: PPUSH
78116: CALL_OW 247
78120: PUSH
78121: LD_INT 1
78123: EQUAL
78124: IFFALSE 78141
// factory := IsInUnit ( factory ) ;
78126: LD_ADDR_VAR 0 1
78130: PUSH
78131: LD_VAR 0 1
78135: PPUSH
78136: CALL_OW 310
78140: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
78141: LD_VAR 0 1
78145: PPUSH
78146: CALL_OW 266
78150: PUSH
78151: LD_INT 3
78153: NONEQUAL
78154: IFFALSE 78158
// exit ;
78156: GO 78393
// for i := 1 to Count ( factoryWaypoints ) do
78158: LD_ADDR_VAR 0 5
78162: PUSH
78163: DOUBLE
78164: LD_INT 1
78166: DEC
78167: ST_TO_ADDR
78168: LD_EXP 105
78172: PPUSH
78173: CALL 22790 0 1
78177: PUSH
78178: FOR_TO
78179: IFFALSE 78341
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
78181: LD_VAR 0 2
78185: PPUSH
78186: LD_VAR 0 3
78190: PPUSH
78191: CALL_OW 428
78195: PUSH
78196: LD_EXP 105
78200: PUSH
78201: LD_VAR 0 5
78205: ARRAY
78206: PUSH
78207: LD_INT 2
78209: ARRAY
78210: EQUAL
78211: IFFALSE 78243
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
78213: LD_ADDR_EXP 105
78217: PUSH
78218: LD_EXP 105
78222: PPUSH
78223: LD_VAR 0 5
78227: PPUSH
78228: CALL_OW 3
78232: ST_TO_ADDR
// UpdateFactoryWaypoints ;
78233: CALL 78398 0 0
// exit ;
78237: POP
78238: POP
78239: GO 78393
// end else
78241: GO 78339
// if factory = factoryWaypoints [ i ] [ 2 ] then
78243: LD_VAR 0 1
78247: PUSH
78248: LD_EXP 105
78252: PUSH
78253: LD_VAR 0 5
78257: ARRAY
78258: PUSH
78259: LD_INT 2
78261: ARRAY
78262: EQUAL
78263: IFFALSE 78339
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
78265: LD_ADDR_EXP 105
78269: PUSH
78270: LD_EXP 105
78274: PPUSH
78275: LD_VAR 0 5
78279: PPUSH
78280: CALL_OW 3
78284: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
78285: LD_ADDR_EXP 105
78289: PUSH
78290: LD_EXP 105
78294: PPUSH
78295: LD_VAR 0 1
78299: PPUSH
78300: CALL_OW 255
78304: PUSH
78305: LD_VAR 0 1
78309: PUSH
78310: LD_VAR 0 2
78314: PUSH
78315: LD_VAR 0 3
78319: PUSH
78320: EMPTY
78321: LIST
78322: LIST
78323: LIST
78324: LIST
78325: PPUSH
78326: CALL 58399 0 2
78330: ST_TO_ADDR
// UpdateFactoryWaypoints ;
78331: CALL 78398 0 0
// exit ;
78335: POP
78336: POP
78337: GO 78393
// end ; end ;
78339: GO 78178
78341: POP
78342: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
78343: LD_ADDR_EXP 105
78347: PUSH
78348: LD_EXP 105
78352: PPUSH
78353: LD_VAR 0 1
78357: PPUSH
78358: CALL_OW 255
78362: PUSH
78363: LD_VAR 0 1
78367: PUSH
78368: LD_VAR 0 2
78372: PUSH
78373: LD_VAR 0 3
78377: PUSH
78378: EMPTY
78379: LIST
78380: LIST
78381: LIST
78382: LIST
78383: PPUSH
78384: CALL 58399 0 2
78388: ST_TO_ADDR
// UpdateFactoryWaypoints ;
78389: CALL 78398 0 0
// end ;
78393: LD_VAR 0 4
78397: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
78398: LD_INT 0
78400: PPUSH
78401: PPUSH
78402: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
78403: LD_STRING resetFactoryWaypoint();
78405: PPUSH
78406: CALL_OW 559
// if factoryWaypoints then
78410: LD_EXP 105
78414: IFFALSE 78535
// begin list := factoryWaypoints ;
78416: LD_ADDR_VAR 0 3
78420: PUSH
78421: LD_EXP 105
78425: ST_TO_ADDR
// for i := 1 to list do
78426: LD_ADDR_VAR 0 2
78430: PUSH
78431: DOUBLE
78432: LD_INT 1
78434: DEC
78435: ST_TO_ADDR
78436: LD_VAR 0 3
78440: PUSH
78441: FOR_TO
78442: IFFALSE 78533
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
78444: LD_STRING setFactoryWaypointXY(
78446: PUSH
78447: LD_VAR 0 3
78451: PUSH
78452: LD_VAR 0 2
78456: ARRAY
78457: PUSH
78458: LD_INT 1
78460: ARRAY
78461: STR
78462: PUSH
78463: LD_STRING ,
78465: STR
78466: PUSH
78467: LD_VAR 0 3
78471: PUSH
78472: LD_VAR 0 2
78476: ARRAY
78477: PUSH
78478: LD_INT 2
78480: ARRAY
78481: STR
78482: PUSH
78483: LD_STRING ,
78485: STR
78486: PUSH
78487: LD_VAR 0 3
78491: PUSH
78492: LD_VAR 0 2
78496: ARRAY
78497: PUSH
78498: LD_INT 3
78500: ARRAY
78501: STR
78502: PUSH
78503: LD_STRING ,
78505: STR
78506: PUSH
78507: LD_VAR 0 3
78511: PUSH
78512: LD_VAR 0 2
78516: ARRAY
78517: PUSH
78518: LD_INT 4
78520: ARRAY
78521: STR
78522: PUSH
78523: LD_STRING )
78525: STR
78526: PPUSH
78527: CALL_OW 559
78531: GO 78441
78533: POP
78534: POP
// end ; end ;
78535: LD_VAR 0 1
78539: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
78540: LD_INT 0
78542: PPUSH
// if HexInfo ( x , y ) = warehouse then
78543: LD_VAR 0 2
78547: PPUSH
78548: LD_VAR 0 3
78552: PPUSH
78553: CALL_OW 428
78557: PUSH
78558: LD_VAR 0 1
78562: EQUAL
78563: IFFALSE 78590
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
78565: LD_ADDR_EXP 106
78569: PUSH
78570: LD_EXP 106
78574: PPUSH
78575: LD_VAR 0 1
78579: PPUSH
78580: LD_INT 0
78582: PPUSH
78583: CALL_OW 1
78587: ST_TO_ADDR
78588: GO 78641
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
78590: LD_ADDR_EXP 106
78594: PUSH
78595: LD_EXP 106
78599: PPUSH
78600: LD_VAR 0 1
78604: PPUSH
78605: LD_VAR 0 1
78609: PPUSH
78610: CALL_OW 255
78614: PUSH
78615: LD_VAR 0 1
78619: PUSH
78620: LD_VAR 0 2
78624: PUSH
78625: LD_VAR 0 3
78629: PUSH
78630: EMPTY
78631: LIST
78632: LIST
78633: LIST
78634: LIST
78635: PPUSH
78636: CALL_OW 1
78640: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
78641: CALL 78650 0 0
// end ;
78645: LD_VAR 0 4
78649: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
78650: LD_INT 0
78652: PPUSH
78653: PPUSH
78654: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
78655: LD_STRING resetWarehouseGatheringPoints();
78657: PPUSH
78658: CALL_OW 559
// if warehouseGatheringPoints then
78662: LD_EXP 106
78666: IFFALSE 78792
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
78668: LD_ADDR_VAR 0 3
78672: PUSH
78673: LD_EXP 106
78677: PPUSH
78678: CALL 62161 0 1
78682: ST_TO_ADDR
// for i := 1 to list do
78683: LD_ADDR_VAR 0 2
78687: PUSH
78688: DOUBLE
78689: LD_INT 1
78691: DEC
78692: ST_TO_ADDR
78693: LD_VAR 0 3
78697: PUSH
78698: FOR_TO
78699: IFFALSE 78790
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
78701: LD_STRING setWarehouseGatheringPointXY(
78703: PUSH
78704: LD_VAR 0 3
78708: PUSH
78709: LD_VAR 0 2
78713: ARRAY
78714: PUSH
78715: LD_INT 1
78717: ARRAY
78718: STR
78719: PUSH
78720: LD_STRING ,
78722: STR
78723: PUSH
78724: LD_VAR 0 3
78728: PUSH
78729: LD_VAR 0 2
78733: ARRAY
78734: PUSH
78735: LD_INT 2
78737: ARRAY
78738: STR
78739: PUSH
78740: LD_STRING ,
78742: STR
78743: PUSH
78744: LD_VAR 0 3
78748: PUSH
78749: LD_VAR 0 2
78753: ARRAY
78754: PUSH
78755: LD_INT 3
78757: ARRAY
78758: STR
78759: PUSH
78760: LD_STRING ,
78762: STR
78763: PUSH
78764: LD_VAR 0 3
78768: PUSH
78769: LD_VAR 0 2
78773: ARRAY
78774: PUSH
78775: LD_INT 4
78777: ARRAY
78778: STR
78779: PUSH
78780: LD_STRING )
78782: STR
78783: PPUSH
78784: CALL_OW 559
78788: GO 78698
78790: POP
78791: POP
// end ; end ;
78792: LD_VAR 0 1
78796: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
78797: LD_EXP 106
78801: IFFALSE 79486
78803: GO 78805
78805: DISABLE
78806: LD_INT 0
78808: PPUSH
78809: PPUSH
78810: PPUSH
78811: PPUSH
78812: PPUSH
78813: PPUSH
78814: PPUSH
78815: PPUSH
78816: PPUSH
// begin enable ;
78817: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
78818: LD_ADDR_VAR 0 3
78822: PUSH
78823: LD_EXP 106
78827: PPUSH
78828: CALL 62161 0 1
78832: ST_TO_ADDR
// if not list then
78833: LD_VAR 0 3
78837: NOT
78838: IFFALSE 78842
// exit ;
78840: GO 79486
// for i := 1 to list do
78842: LD_ADDR_VAR 0 1
78846: PUSH
78847: DOUBLE
78848: LD_INT 1
78850: DEC
78851: ST_TO_ADDR
78852: LD_VAR 0 3
78856: PUSH
78857: FOR_TO
78858: IFFALSE 79484
// begin depot := list [ i ] [ 2 ] ;
78860: LD_ADDR_VAR 0 8
78864: PUSH
78865: LD_VAR 0 3
78869: PUSH
78870: LD_VAR 0 1
78874: ARRAY
78875: PUSH
78876: LD_INT 2
78878: ARRAY
78879: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
78880: LD_ADDR_VAR 0 5
78884: PUSH
78885: LD_VAR 0 3
78889: PUSH
78890: LD_VAR 0 1
78894: ARRAY
78895: PUSH
78896: LD_INT 1
78898: ARRAY
78899: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
78900: LD_VAR 0 8
78904: PPUSH
78905: CALL_OW 301
78909: PUSH
78910: LD_VAR 0 5
78914: PUSH
78915: LD_VAR 0 8
78919: PPUSH
78920: CALL_OW 255
78924: NONEQUAL
78925: OR
78926: IFFALSE 78955
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
78928: LD_ADDR_EXP 106
78932: PUSH
78933: LD_EXP 106
78937: PPUSH
78938: LD_VAR 0 8
78942: PPUSH
78943: LD_INT 0
78945: PPUSH
78946: CALL_OW 1
78950: ST_TO_ADDR
// exit ;
78951: POP
78952: POP
78953: GO 79486
// end ; x := list [ i ] [ 3 ] ;
78955: LD_ADDR_VAR 0 6
78959: PUSH
78960: LD_VAR 0 3
78964: PUSH
78965: LD_VAR 0 1
78969: ARRAY
78970: PUSH
78971: LD_INT 3
78973: ARRAY
78974: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
78975: LD_ADDR_VAR 0 7
78979: PUSH
78980: LD_VAR 0 3
78984: PUSH
78985: LD_VAR 0 1
78989: ARRAY
78990: PUSH
78991: LD_INT 4
78993: ARRAY
78994: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
78995: LD_ADDR_VAR 0 9
78999: PUSH
79000: LD_VAR 0 6
79004: PPUSH
79005: LD_VAR 0 7
79009: PPUSH
79010: LD_INT 16
79012: PPUSH
79013: CALL 60745 0 3
79017: ST_TO_ADDR
// if not cratesNearbyPoint then
79018: LD_VAR 0 9
79022: NOT
79023: IFFALSE 79029
// exit ;
79025: POP
79026: POP
79027: GO 79486
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
79029: LD_ADDR_VAR 0 4
79033: PUSH
79034: LD_INT 22
79036: PUSH
79037: LD_VAR 0 5
79041: PUSH
79042: EMPTY
79043: LIST
79044: LIST
79045: PUSH
79046: LD_INT 3
79048: PUSH
79049: LD_INT 60
79051: PUSH
79052: EMPTY
79053: LIST
79054: PUSH
79055: EMPTY
79056: LIST
79057: LIST
79058: PUSH
79059: LD_INT 91
79061: PUSH
79062: LD_VAR 0 8
79066: PUSH
79067: LD_INT 6
79069: PUSH
79070: EMPTY
79071: LIST
79072: LIST
79073: LIST
79074: PUSH
79075: LD_INT 2
79077: PUSH
79078: LD_INT 25
79080: PUSH
79081: LD_INT 2
79083: PUSH
79084: EMPTY
79085: LIST
79086: LIST
79087: PUSH
79088: LD_INT 25
79090: PUSH
79091: LD_INT 16
79093: PUSH
79094: EMPTY
79095: LIST
79096: LIST
79097: PUSH
79098: EMPTY
79099: LIST
79100: LIST
79101: LIST
79102: PUSH
79103: EMPTY
79104: LIST
79105: LIST
79106: LIST
79107: LIST
79108: PPUSH
79109: CALL_OW 69
79113: PUSH
79114: LD_VAR 0 8
79118: PPUSH
79119: CALL_OW 313
79123: PPUSH
79124: LD_INT 3
79126: PUSH
79127: LD_INT 60
79129: PUSH
79130: EMPTY
79131: LIST
79132: PUSH
79133: EMPTY
79134: LIST
79135: LIST
79136: PUSH
79137: LD_INT 2
79139: PUSH
79140: LD_INT 25
79142: PUSH
79143: LD_INT 2
79145: PUSH
79146: EMPTY
79147: LIST
79148: LIST
79149: PUSH
79150: LD_INT 25
79152: PUSH
79153: LD_INT 16
79155: PUSH
79156: EMPTY
79157: LIST
79158: LIST
79159: PUSH
79160: EMPTY
79161: LIST
79162: LIST
79163: LIST
79164: PUSH
79165: EMPTY
79166: LIST
79167: LIST
79168: PPUSH
79169: CALL_OW 72
79173: UNION
79174: ST_TO_ADDR
// if tmp then
79175: LD_VAR 0 4
79179: IFFALSE 79259
// begin tmp := ShrinkArray ( tmp , 3 ) ;
79181: LD_ADDR_VAR 0 4
79185: PUSH
79186: LD_VAR 0 4
79190: PPUSH
79191: LD_INT 3
79193: PPUSH
79194: CALL 58714 0 2
79198: ST_TO_ADDR
// for j in tmp do
79199: LD_ADDR_VAR 0 2
79203: PUSH
79204: LD_VAR 0 4
79208: PUSH
79209: FOR_IN
79210: IFFALSE 79253
// begin if IsInUnit ( j ) then
79212: LD_VAR 0 2
79216: PPUSH
79217: CALL_OW 310
79221: IFFALSE 79232
// ComExit ( j ) ;
79223: LD_VAR 0 2
79227: PPUSH
79228: CALL 58797 0 1
// AddComCollect ( j , x , y ) ;
79232: LD_VAR 0 2
79236: PPUSH
79237: LD_VAR 0 6
79241: PPUSH
79242: LD_VAR 0 7
79246: PPUSH
79247: CALL_OW 177
// end ;
79251: GO 79209
79253: POP
79254: POP
// exit ;
79255: POP
79256: POP
79257: GO 79486
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
79259: LD_ADDR_VAR 0 4
79263: PUSH
79264: LD_INT 22
79266: PUSH
79267: LD_VAR 0 5
79271: PUSH
79272: EMPTY
79273: LIST
79274: LIST
79275: PUSH
79276: LD_INT 91
79278: PUSH
79279: LD_VAR 0 8
79283: PUSH
79284: LD_INT 8
79286: PUSH
79287: EMPTY
79288: LIST
79289: LIST
79290: LIST
79291: PUSH
79292: LD_INT 2
79294: PUSH
79295: LD_INT 34
79297: PUSH
79298: LD_INT 12
79300: PUSH
79301: EMPTY
79302: LIST
79303: LIST
79304: PUSH
79305: LD_INT 34
79307: PUSH
79308: LD_INT 51
79310: PUSH
79311: EMPTY
79312: LIST
79313: LIST
79314: PUSH
79315: LD_INT 34
79317: PUSH
79318: LD_INT 32
79320: PUSH
79321: EMPTY
79322: LIST
79323: LIST
79324: PUSH
79325: LD_INT 34
79327: PUSH
79328: LD_INT 89
79330: PUSH
79331: EMPTY
79332: LIST
79333: LIST
79334: PUSH
79335: EMPTY
79336: LIST
79337: LIST
79338: LIST
79339: LIST
79340: LIST
79341: PUSH
79342: EMPTY
79343: LIST
79344: LIST
79345: LIST
79346: PPUSH
79347: CALL_OW 69
79351: ST_TO_ADDR
// if tmp then
79352: LD_VAR 0 4
79356: IFFALSE 79482
// begin for j in tmp do
79358: LD_ADDR_VAR 0 2
79362: PUSH
79363: LD_VAR 0 4
79367: PUSH
79368: FOR_IN
79369: IFFALSE 79480
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
79371: LD_VAR 0 2
79375: PPUSH
79376: CALL_OW 262
79380: PUSH
79381: LD_INT 3
79383: EQUAL
79384: PUSH
79385: LD_VAR 0 2
79389: PPUSH
79390: CALL_OW 261
79394: PUSH
79395: LD_INT 20
79397: GREATER
79398: OR
79399: PUSH
79400: LD_VAR 0 2
79404: PPUSH
79405: CALL_OW 314
79409: NOT
79410: AND
79411: PUSH
79412: LD_VAR 0 2
79416: PPUSH
79417: CALL_OW 263
79421: PUSH
79422: LD_INT 1
79424: NONEQUAL
79425: PUSH
79426: LD_VAR 0 2
79430: PPUSH
79431: CALL_OW 311
79435: OR
79436: AND
79437: IFFALSE 79478
// begin ComCollect ( j , x , y ) ;
79439: LD_VAR 0 2
79443: PPUSH
79444: LD_VAR 0 6
79448: PPUSH
79449: LD_VAR 0 7
79453: PPUSH
79454: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
79458: LD_VAR 0 2
79462: PPUSH
79463: LD_VAR 0 8
79467: PPUSH
79468: CALL_OW 172
// exit ;
79472: POP
79473: POP
79474: POP
79475: POP
79476: GO 79486
// end ;
79478: GO 79368
79480: POP
79481: POP
// end ; end ;
79482: GO 78857
79484: POP
79485: POP
// end ; end_of_file
79486: PPOPN 9
79488: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
79489: LD_VAR 0 1
79493: PUSH
79494: LD_INT 200
79496: DOUBLE
79497: GREATEREQUAL
79498: IFFALSE 79506
79500: LD_INT 299
79502: DOUBLE
79503: LESSEQUAL
79504: IFTRUE 79508
79506: GO 79540
79508: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
79509: LD_VAR 0 1
79513: PPUSH
79514: LD_VAR 0 2
79518: PPUSH
79519: LD_VAR 0 3
79523: PPUSH
79524: LD_VAR 0 4
79528: PPUSH
79529: LD_VAR 0 5
79533: PPUSH
79534: CALL 80237 0 5
79538: GO 79617
79540: LD_INT 300
79542: DOUBLE
79543: GREATEREQUAL
79544: IFFALSE 79552
79546: LD_INT 399
79548: DOUBLE
79549: LESSEQUAL
79550: IFTRUE 79554
79552: GO 79616
79554: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
79555: LD_VAR 0 1
79559: PPUSH
79560: LD_VAR 0 2
79564: PPUSH
79565: LD_VAR 0 3
79569: PPUSH
79570: LD_VAR 0 4
79574: PPUSH
79575: LD_VAR 0 5
79579: PPUSH
79580: LD_VAR 0 6
79584: PPUSH
79585: LD_VAR 0 7
79589: PPUSH
79590: LD_VAR 0 8
79594: PPUSH
79595: LD_VAR 0 9
79599: PPUSH
79600: LD_VAR 0 10
79604: PPUSH
79605: LD_VAR 0 11
79609: PPUSH
79610: CALL 76062 0 11
79614: GO 79617
79616: POP
// end ;
79617: PPOPN 11
79619: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
79620: LD_VAR 0 1
79624: PPUSH
79625: LD_VAR 0 2
79629: PPUSH
79630: LD_VAR 0 3
79634: PPUSH
79635: LD_VAR 0 4
79639: PPUSH
79640: LD_VAR 0 5
79644: PPUSH
79645: CALL 79702 0 5
// end ; end_of_file
79649: PPOPN 5
79651: END
// export function SOS_UnitDestroyed ( un ) ; begin
79652: LD_INT 0
79654: PPUSH
// ComRadiation ( un ) ;
79655: LD_VAR 0 1
79659: PPUSH
79660: CALL 80641 0 1
// end ;
79664: LD_VAR 0 2
79668: RET
// export function SOS_UnitKamikazed ( un ) ; begin
79669: LD_INT 0
79671: PPUSH
// ComRadiation ( un ) ;
79672: LD_VAR 0 1
79676: PPUSH
79677: CALL 80641 0 1
// end ;
79681: LD_VAR 0 2
79685: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
79686: LD_INT 0
79688: PPUSH
// end ;
79689: LD_VAR 0 4
79693: RET
// export function SOS_Command ( cmd ) ; begin
79694: LD_INT 0
79696: PPUSH
// end ;
79697: LD_VAR 0 2
79701: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
79702: LD_INT 0
79704: PPUSH
// end ;
79705: LD_VAR 0 6
79709: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
79710: LD_INT 0
79712: PPUSH
79713: PPUSH
79714: PPUSH
79715: PPUSH
79716: PPUSH
// if not vehicle or not factory then
79717: LD_VAR 0 1
79721: NOT
79722: PUSH
79723: LD_VAR 0 2
79727: NOT
79728: OR
79729: IFFALSE 79733
// exit ;
79731: GO 80232
// if not factoryWaypoints then
79733: LD_EXP 105
79737: NOT
79738: IFFALSE 79742
// exit ;
79740: GO 80232
// for i := 1 to Count ( factoryWaypoints ) do
79742: LD_ADDR_VAR 0 4
79746: PUSH
79747: DOUBLE
79748: LD_INT 1
79750: DEC
79751: ST_TO_ADDR
79752: LD_EXP 105
79756: PPUSH
79757: CALL 22790 0 1
79761: PUSH
79762: FOR_TO
79763: IFFALSE 80230
// if factoryWaypoints [ i ] [ 2 ] = factory then
79765: LD_EXP 105
79769: PUSH
79770: LD_VAR 0 4
79774: ARRAY
79775: PUSH
79776: LD_INT 2
79778: ARRAY
79779: PUSH
79780: LD_VAR 0 2
79784: EQUAL
79785: IFFALSE 80228
// begin if GetControl ( vehicle ) = control_manual then
79787: LD_VAR 0 1
79791: PPUSH
79792: CALL_OW 263
79796: PUSH
79797: LD_INT 1
79799: EQUAL
79800: IFFALSE 80111
// begin driver := IsDrivenBy ( vehicle ) ;
79802: LD_ADDR_VAR 0 6
79806: PUSH
79807: LD_VAR 0 1
79811: PPUSH
79812: CALL_OW 311
79816: ST_TO_ADDR
// tag := GetTag ( driver ) ;
79817: LD_ADDR_VAR 0 5
79821: PUSH
79822: LD_VAR 0 6
79826: PPUSH
79827: CALL_OW 110
79831: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
79832: LD_VAR 0 5
79836: PUSH
79837: LD_INT 501
79839: EQUAL
79840: PUSH
79841: LD_VAR 0 1
79845: PPUSH
79846: CALL_OW 110
79850: PUSH
79851: LD_INT 501
79853: EQUAL
79854: OR
79855: IFFALSE 79861
// exit ;
79857: POP
79858: POP
79859: GO 80232
// if not HasTask ( driver ) then
79861: LD_VAR 0 6
79865: PPUSH
79866: CALL_OW 314
79870: NOT
79871: IFFALSE 80109
// begin SetTag ( driver , tDriver ) ;
79873: LD_VAR 0 6
79877: PPUSH
79878: LD_INT 501
79880: PPUSH
79881: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
79885: LD_VAR 0 1
79889: PPUSH
79890: LD_INT 501
79892: PPUSH
79893: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
79897: LD_ADDR_VAR 0 7
79901: PUSH
79902: LD_EXP 105
79906: PUSH
79907: LD_VAR 0 4
79911: ARRAY
79912: PUSH
79913: LD_INT 3
79915: ARRAY
79916: PPUSH
79917: LD_EXP 105
79921: PUSH
79922: LD_VAR 0 4
79926: ARRAY
79927: PUSH
79928: LD_INT 4
79930: ARRAY
79931: PPUSH
79932: CALL_OW 428
79936: ST_TO_ADDR
// if hex then
79937: LD_VAR 0 7
79941: IFFALSE 79959
// ComMoveUnit ( driver , hex ) else
79943: LD_VAR 0 6
79947: PPUSH
79948: LD_VAR 0 7
79952: PPUSH
79953: CALL_OW 112
79957: GO 79998
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
79959: LD_VAR 0 6
79963: PPUSH
79964: LD_EXP 105
79968: PUSH
79969: LD_VAR 0 4
79973: ARRAY
79974: PUSH
79975: LD_INT 3
79977: ARRAY
79978: PPUSH
79979: LD_EXP 105
79983: PUSH
79984: LD_VAR 0 4
79988: ARRAY
79989: PUSH
79990: LD_INT 4
79992: ARRAY
79993: PPUSH
79994: CALL_OW 111
// AddComExitVehicle ( driver ) ;
79998: LD_VAR 0 6
80002: PPUSH
80003: CALL_OW 181
// if Multiplayer then
80007: LD_OWVAR 4
80011: IFFALSE 80060
// begin repeat wait ( 10 ) ;
80013: LD_INT 10
80015: PPUSH
80016: CALL_OW 67
// until not IsInUnit ( driver ) ;
80020: LD_VAR 0 6
80024: PPUSH
80025: CALL_OW 310
80029: NOT
80030: IFFALSE 80013
// if not HasTask ( driver ) then
80032: LD_VAR 0 6
80036: PPUSH
80037: CALL_OW 314
80041: NOT
80042: IFFALSE 80058
// ComEnterUnit ( driver , factory ) ;
80044: LD_VAR 0 6
80048: PPUSH
80049: LD_VAR 0 2
80053: PPUSH
80054: CALL_OW 120
// end else
80058: GO 80074
// AddComEnterUnit ( driver , factory ) ;
80060: LD_VAR 0 6
80064: PPUSH
80065: LD_VAR 0 2
80069: PPUSH
80070: CALL_OW 180
// wait ( 0 0$1 ) ;
80074: LD_INT 35
80076: PPUSH
80077: CALL_OW 67
// SetTag ( driver , tag ) ;
80081: LD_VAR 0 6
80085: PPUSH
80086: LD_VAR 0 5
80090: PPUSH
80091: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
80095: LD_VAR 0 1
80099: PPUSH
80100: LD_INT 0
80102: PPUSH
80103: CALL_OW 109
// break ;
80107: GO 80230
// end ; end else
80109: GO 80228
// if GetControl ( vehicle ) = control_remote then
80111: LD_VAR 0 1
80115: PPUSH
80116: CALL_OW 263
80120: PUSH
80121: LD_INT 2
80123: EQUAL
80124: IFFALSE 80187
// begin wait ( 0 0$2 ) ;
80126: LD_INT 70
80128: PPUSH
80129: CALL_OW 67
// if Connect ( vehicle ) then
80133: LD_VAR 0 1
80137: PPUSH
80138: CALL 28996 0 1
80142: IFFALSE 80183
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
80144: LD_VAR 0 1
80148: PPUSH
80149: LD_EXP 105
80153: PUSH
80154: LD_VAR 0 4
80158: ARRAY
80159: PUSH
80160: LD_INT 3
80162: ARRAY
80163: PPUSH
80164: LD_EXP 105
80168: PUSH
80169: LD_VAR 0 4
80173: ARRAY
80174: PUSH
80175: LD_INT 4
80177: ARRAY
80178: PPUSH
80179: CALL_OW 171
// break ;
80183: GO 80230
// end else
80185: GO 80228
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
80187: LD_VAR 0 1
80191: PPUSH
80192: LD_EXP 105
80196: PUSH
80197: LD_VAR 0 4
80201: ARRAY
80202: PUSH
80203: LD_INT 3
80205: ARRAY
80206: PPUSH
80207: LD_EXP 105
80211: PUSH
80212: LD_VAR 0 4
80216: ARRAY
80217: PUSH
80218: LD_INT 4
80220: ARRAY
80221: PPUSH
80222: CALL_OW 171
// break ;
80226: GO 80230
// end ; end ;
80228: GO 79762
80230: POP
80231: POP
// end ;
80232: LD_VAR 0 3
80236: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
80237: LD_INT 0
80239: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
80240: LD_VAR 0 1
80244: PUSH
80245: LD_INT 250
80247: EQUAL
80248: PUSH
80249: LD_VAR 0 2
80253: PPUSH
80254: CALL_OW 264
80258: PUSH
80259: LD_INT 81
80261: EQUAL
80262: AND
80263: IFFALSE 80284
// MinerPlaceMine ( unit , x , y ) ;
80265: LD_VAR 0 2
80269: PPUSH
80270: LD_VAR 0 4
80274: PPUSH
80275: LD_VAR 0 5
80279: PPUSH
80280: CALL 83376 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
80284: LD_VAR 0 1
80288: PUSH
80289: LD_INT 251
80291: EQUAL
80292: PUSH
80293: LD_VAR 0 2
80297: PPUSH
80298: CALL_OW 264
80302: PUSH
80303: LD_INT 81
80305: EQUAL
80306: AND
80307: IFFALSE 80328
// MinerDetonateMine ( unit , x , y ) ;
80309: LD_VAR 0 2
80313: PPUSH
80314: LD_VAR 0 4
80318: PPUSH
80319: LD_VAR 0 5
80323: PPUSH
80324: CALL 83651 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
80328: LD_VAR 0 1
80332: PUSH
80333: LD_INT 252
80335: EQUAL
80336: PUSH
80337: LD_VAR 0 2
80341: PPUSH
80342: CALL_OW 264
80346: PUSH
80347: LD_INT 81
80349: EQUAL
80350: AND
80351: IFFALSE 80372
// MinerCreateMinefield ( unit , x , y ) ;
80353: LD_VAR 0 2
80357: PPUSH
80358: LD_VAR 0 4
80362: PPUSH
80363: LD_VAR 0 5
80367: PPUSH
80368: CALL 84068 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
80372: LD_VAR 0 1
80376: PUSH
80377: LD_INT 253
80379: EQUAL
80380: PUSH
80381: LD_VAR 0 2
80385: PPUSH
80386: CALL_OW 257
80390: PUSH
80391: LD_INT 5
80393: EQUAL
80394: AND
80395: IFFALSE 80416
// ComBinocular ( unit , x , y ) ;
80397: LD_VAR 0 2
80401: PPUSH
80402: LD_VAR 0 4
80406: PPUSH
80407: LD_VAR 0 5
80411: PPUSH
80412: CALL 84437 0 3
// if selectedUnit then
80416: LD_VAR 0 3
80420: IFFALSE 80476
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
80422: LD_VAR 0 1
80426: PUSH
80427: LD_INT 254
80429: EQUAL
80430: PUSH
80431: LD_VAR 0 2
80435: PPUSH
80436: CALL_OW 264
80440: PUSH
80441: LD_INT 99
80443: EQUAL
80444: AND
80445: PUSH
80446: LD_VAR 0 3
80450: PPUSH
80451: CALL_OW 263
80455: PUSH
80456: LD_INT 3
80458: EQUAL
80459: AND
80460: IFFALSE 80476
// HackDestroyVehicle ( unit , selectedUnit ) ;
80462: LD_VAR 0 2
80466: PPUSH
80467: LD_VAR 0 3
80471: PPUSH
80472: CALL 82740 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
80476: LD_VAR 0 1
80480: PUSH
80481: LD_INT 255
80483: EQUAL
80484: PUSH
80485: LD_VAR 0 2
80489: PPUSH
80490: CALL_OW 264
80494: PUSH
80495: LD_INT 14
80497: PUSH
80498: LD_INT 53
80500: PUSH
80501: EMPTY
80502: LIST
80503: LIST
80504: IN
80505: AND
80506: PUSH
80507: LD_VAR 0 4
80511: PPUSH
80512: LD_VAR 0 5
80516: PPUSH
80517: CALL_OW 488
80521: AND
80522: IFFALSE 80546
// CutTreeXYR ( unit , x , y , 12 ) ;
80524: LD_VAR 0 2
80528: PPUSH
80529: LD_VAR 0 4
80533: PPUSH
80534: LD_VAR 0 5
80538: PPUSH
80539: LD_INT 12
80541: PPUSH
80542: CALL 80737 0 4
// if cmd = 256 then
80546: LD_VAR 0 1
80550: PUSH
80551: LD_INT 256
80553: EQUAL
80554: IFFALSE 80575
// SetFactoryWaypoint ( unit , x , y ) ;
80556: LD_VAR 0 2
80560: PPUSH
80561: LD_VAR 0 4
80565: PPUSH
80566: LD_VAR 0 5
80570: PPUSH
80571: CALL 78050 0 3
// if cmd = 257 then
80575: LD_VAR 0 1
80579: PUSH
80580: LD_INT 257
80582: EQUAL
80583: IFFALSE 80604
// SetWarehouseGatheringPoint ( unit , x , y ) ;
80585: LD_VAR 0 2
80589: PPUSH
80590: LD_VAR 0 4
80594: PPUSH
80595: LD_VAR 0 5
80599: PPUSH
80600: CALL 78540 0 3
// if cmd = 258 then
80604: LD_VAR 0 1
80608: PUSH
80609: LD_INT 258
80611: EQUAL
80612: IFFALSE 80636
// BurnTreeXYR ( unit , x , y , 8 ) ;
80614: LD_VAR 0 2
80618: PPUSH
80619: LD_VAR 0 4
80623: PPUSH
80624: LD_VAR 0 5
80628: PPUSH
80629: LD_INT 8
80631: PPUSH
80632: CALL 81131 0 4
// end ;
80636: LD_VAR 0 6
80640: RET
// export function ComRadiation ( un ) ; var eff ; begin
80641: LD_INT 0
80643: PPUSH
80644: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
80645: LD_VAR 0 1
80649: PPUSH
80650: CALL_OW 264
80654: PUSH
80655: LD_INT 91
80657: NONEQUAL
80658: IFFALSE 80662
// exit ;
80660: GO 80732
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
80662: LD_INT 68
80664: PPUSH
80665: LD_VAR 0 1
80669: PPUSH
80670: CALL_OW 255
80674: PPUSH
80675: CALL_OW 321
80679: PUSH
80680: LD_INT 2
80682: EQUAL
80683: IFFALSE 80695
// eff := 70 else
80685: LD_ADDR_VAR 0 3
80689: PUSH
80690: LD_INT 70
80692: ST_TO_ADDR
80693: GO 80703
// eff := 30 ;
80695: LD_ADDR_VAR 0 3
80699: PUSH
80700: LD_INT 30
80702: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
80703: LD_VAR 0 1
80707: PPUSH
80708: CALL_OW 250
80712: PPUSH
80713: LD_VAR 0 1
80717: PPUSH
80718: CALL_OW 251
80722: PPUSH
80723: LD_VAR 0 3
80727: PPUSH
80728: CALL_OW 495
// end ;
80732: LD_VAR 0 2
80736: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
80737: LD_INT 0
80739: PPUSH
80740: PPUSH
80741: PPUSH
80742: PPUSH
80743: PPUSH
80744: PPUSH
80745: PPUSH
80746: PPUSH
80747: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
80748: LD_VAR 0 1
80752: PPUSH
80753: CALL_OW 302
80757: NOT
80758: PUSH
80759: LD_VAR 0 2
80763: PPUSH
80764: LD_VAR 0 3
80768: PPUSH
80769: CALL_OW 488
80773: NOT
80774: OR
80775: PUSH
80776: LD_VAR 0 4
80780: NOT
80781: OR
80782: IFFALSE 80786
// exit ;
80784: GO 81126
// list := [ ] ;
80786: LD_ADDR_VAR 0 13
80790: PUSH
80791: EMPTY
80792: ST_TO_ADDR
// if x - r < 0 then
80793: LD_VAR 0 2
80797: PUSH
80798: LD_VAR 0 4
80802: MINUS
80803: PUSH
80804: LD_INT 0
80806: LESS
80807: IFFALSE 80819
// min_x := 0 else
80809: LD_ADDR_VAR 0 7
80813: PUSH
80814: LD_INT 0
80816: ST_TO_ADDR
80817: GO 80835
// min_x := x - r ;
80819: LD_ADDR_VAR 0 7
80823: PUSH
80824: LD_VAR 0 2
80828: PUSH
80829: LD_VAR 0 4
80833: MINUS
80834: ST_TO_ADDR
// if y - r < 0 then
80835: LD_VAR 0 3
80839: PUSH
80840: LD_VAR 0 4
80844: MINUS
80845: PUSH
80846: LD_INT 0
80848: LESS
80849: IFFALSE 80861
// min_y := 0 else
80851: LD_ADDR_VAR 0 8
80855: PUSH
80856: LD_INT 0
80858: ST_TO_ADDR
80859: GO 80877
// min_y := y - r ;
80861: LD_ADDR_VAR 0 8
80865: PUSH
80866: LD_VAR 0 3
80870: PUSH
80871: LD_VAR 0 4
80875: MINUS
80876: ST_TO_ADDR
// max_x := x + r ;
80877: LD_ADDR_VAR 0 9
80881: PUSH
80882: LD_VAR 0 2
80886: PUSH
80887: LD_VAR 0 4
80891: PLUS
80892: ST_TO_ADDR
// max_y := y + r ;
80893: LD_ADDR_VAR 0 10
80897: PUSH
80898: LD_VAR 0 3
80902: PUSH
80903: LD_VAR 0 4
80907: PLUS
80908: ST_TO_ADDR
// for _x = min_x to max_x do
80909: LD_ADDR_VAR 0 11
80913: PUSH
80914: DOUBLE
80915: LD_VAR 0 7
80919: DEC
80920: ST_TO_ADDR
80921: LD_VAR 0 9
80925: PUSH
80926: FOR_TO
80927: IFFALSE 81044
// for _y = min_y to max_y do
80929: LD_ADDR_VAR 0 12
80933: PUSH
80934: DOUBLE
80935: LD_VAR 0 8
80939: DEC
80940: ST_TO_ADDR
80941: LD_VAR 0 10
80945: PUSH
80946: FOR_TO
80947: IFFALSE 81040
// begin if not ValidHex ( _x , _y ) then
80949: LD_VAR 0 11
80953: PPUSH
80954: LD_VAR 0 12
80958: PPUSH
80959: CALL_OW 488
80963: NOT
80964: IFFALSE 80968
// continue ;
80966: GO 80946
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
80968: LD_VAR 0 11
80972: PPUSH
80973: LD_VAR 0 12
80977: PPUSH
80978: CALL_OW 351
80982: PUSH
80983: LD_VAR 0 11
80987: PPUSH
80988: LD_VAR 0 12
80992: PPUSH
80993: CALL_OW 554
80997: AND
80998: IFFALSE 81038
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
81000: LD_ADDR_VAR 0 13
81004: PUSH
81005: LD_VAR 0 13
81009: PPUSH
81010: LD_VAR 0 13
81014: PUSH
81015: LD_INT 1
81017: PLUS
81018: PPUSH
81019: LD_VAR 0 11
81023: PUSH
81024: LD_VAR 0 12
81028: PUSH
81029: EMPTY
81030: LIST
81031: LIST
81032: PPUSH
81033: CALL_OW 2
81037: ST_TO_ADDR
// end ;
81038: GO 80946
81040: POP
81041: POP
81042: GO 80926
81044: POP
81045: POP
// if not list then
81046: LD_VAR 0 13
81050: NOT
81051: IFFALSE 81055
// exit ;
81053: GO 81126
// for i in list do
81055: LD_ADDR_VAR 0 6
81059: PUSH
81060: LD_VAR 0 13
81064: PUSH
81065: FOR_IN
81066: IFFALSE 81124
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
81068: LD_VAR 0 1
81072: PPUSH
81073: LD_STRING M
81075: PUSH
81076: LD_VAR 0 6
81080: PUSH
81081: LD_INT 1
81083: ARRAY
81084: PUSH
81085: LD_VAR 0 6
81089: PUSH
81090: LD_INT 2
81092: ARRAY
81093: PUSH
81094: LD_INT 0
81096: PUSH
81097: LD_INT 0
81099: PUSH
81100: LD_INT 0
81102: PUSH
81103: LD_INT 0
81105: PUSH
81106: EMPTY
81107: LIST
81108: LIST
81109: LIST
81110: LIST
81111: LIST
81112: LIST
81113: LIST
81114: PUSH
81115: EMPTY
81116: LIST
81117: PPUSH
81118: CALL_OW 447
81122: GO 81065
81124: POP
81125: POP
// end ;
81126: LD_VAR 0 5
81130: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
81131: LD_INT 0
81133: PPUSH
81134: PPUSH
81135: PPUSH
81136: PPUSH
81137: PPUSH
81138: PPUSH
81139: PPUSH
81140: PPUSH
81141: PPUSH
81142: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
81143: LD_VAR 0 1
81147: PPUSH
81148: CALL_OW 302
81152: NOT
81153: PUSH
81154: LD_VAR 0 2
81158: PPUSH
81159: LD_VAR 0 3
81163: PPUSH
81164: CALL_OW 488
81168: NOT
81169: OR
81170: PUSH
81171: LD_VAR 0 4
81175: NOT
81176: OR
81177: IFFALSE 81181
// exit ;
81179: GO 81694
// list := [ ] ;
81181: LD_ADDR_VAR 0 13
81185: PUSH
81186: EMPTY
81187: ST_TO_ADDR
// if x - r < 0 then
81188: LD_VAR 0 2
81192: PUSH
81193: LD_VAR 0 4
81197: MINUS
81198: PUSH
81199: LD_INT 0
81201: LESS
81202: IFFALSE 81214
// min_x := 0 else
81204: LD_ADDR_VAR 0 7
81208: PUSH
81209: LD_INT 0
81211: ST_TO_ADDR
81212: GO 81230
// min_x := x - r ;
81214: LD_ADDR_VAR 0 7
81218: PUSH
81219: LD_VAR 0 2
81223: PUSH
81224: LD_VAR 0 4
81228: MINUS
81229: ST_TO_ADDR
// if y - r < 0 then
81230: LD_VAR 0 3
81234: PUSH
81235: LD_VAR 0 4
81239: MINUS
81240: PUSH
81241: LD_INT 0
81243: LESS
81244: IFFALSE 81256
// min_y := 0 else
81246: LD_ADDR_VAR 0 8
81250: PUSH
81251: LD_INT 0
81253: ST_TO_ADDR
81254: GO 81272
// min_y := y - r ;
81256: LD_ADDR_VAR 0 8
81260: PUSH
81261: LD_VAR 0 3
81265: PUSH
81266: LD_VAR 0 4
81270: MINUS
81271: ST_TO_ADDR
// max_x := x + r ;
81272: LD_ADDR_VAR 0 9
81276: PUSH
81277: LD_VAR 0 2
81281: PUSH
81282: LD_VAR 0 4
81286: PLUS
81287: ST_TO_ADDR
// max_y := y + r ;
81288: LD_ADDR_VAR 0 10
81292: PUSH
81293: LD_VAR 0 3
81297: PUSH
81298: LD_VAR 0 4
81302: PLUS
81303: ST_TO_ADDR
// for _x = min_x to max_x do
81304: LD_ADDR_VAR 0 11
81308: PUSH
81309: DOUBLE
81310: LD_VAR 0 7
81314: DEC
81315: ST_TO_ADDR
81316: LD_VAR 0 9
81320: PUSH
81321: FOR_TO
81322: IFFALSE 81439
// for _y = min_y to max_y do
81324: LD_ADDR_VAR 0 12
81328: PUSH
81329: DOUBLE
81330: LD_VAR 0 8
81334: DEC
81335: ST_TO_ADDR
81336: LD_VAR 0 10
81340: PUSH
81341: FOR_TO
81342: IFFALSE 81435
// begin if not ValidHex ( _x , _y ) then
81344: LD_VAR 0 11
81348: PPUSH
81349: LD_VAR 0 12
81353: PPUSH
81354: CALL_OW 488
81358: NOT
81359: IFFALSE 81363
// continue ;
81361: GO 81341
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
81363: LD_VAR 0 11
81367: PPUSH
81368: LD_VAR 0 12
81372: PPUSH
81373: CALL_OW 351
81377: PUSH
81378: LD_VAR 0 11
81382: PPUSH
81383: LD_VAR 0 12
81387: PPUSH
81388: CALL_OW 554
81392: AND
81393: IFFALSE 81433
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
81395: LD_ADDR_VAR 0 13
81399: PUSH
81400: LD_VAR 0 13
81404: PPUSH
81405: LD_VAR 0 13
81409: PUSH
81410: LD_INT 1
81412: PLUS
81413: PPUSH
81414: LD_VAR 0 11
81418: PUSH
81419: LD_VAR 0 12
81423: PUSH
81424: EMPTY
81425: LIST
81426: LIST
81427: PPUSH
81428: CALL_OW 2
81432: ST_TO_ADDR
// end ;
81433: GO 81341
81435: POP
81436: POP
81437: GO 81321
81439: POP
81440: POP
// if not list then
81441: LD_VAR 0 13
81445: NOT
81446: IFFALSE 81450
// exit ;
81448: GO 81694
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
81450: LD_ADDR_VAR 0 13
81454: PUSH
81455: LD_VAR 0 1
81459: PPUSH
81460: LD_VAR 0 13
81464: PPUSH
81465: LD_INT 1
81467: PPUSH
81468: LD_INT 1
81470: PPUSH
81471: CALL 26138 0 4
81475: ST_TO_ADDR
// ComStop ( flame ) ;
81476: LD_VAR 0 1
81480: PPUSH
81481: CALL_OW 141
// for i in list do
81485: LD_ADDR_VAR 0 6
81489: PUSH
81490: LD_VAR 0 13
81494: PUSH
81495: FOR_IN
81496: IFFALSE 81527
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
81498: LD_VAR 0 1
81502: PPUSH
81503: LD_VAR 0 6
81507: PUSH
81508: LD_INT 1
81510: ARRAY
81511: PPUSH
81512: LD_VAR 0 6
81516: PUSH
81517: LD_INT 2
81519: ARRAY
81520: PPUSH
81521: CALL_OW 176
81525: GO 81495
81527: POP
81528: POP
// repeat wait ( 0 0$1 ) ;
81529: LD_INT 35
81531: PPUSH
81532: CALL_OW 67
// task := GetTaskList ( flame ) ;
81536: LD_ADDR_VAR 0 14
81540: PUSH
81541: LD_VAR 0 1
81545: PPUSH
81546: CALL_OW 437
81550: ST_TO_ADDR
// if not task then
81551: LD_VAR 0 14
81555: NOT
81556: IFFALSE 81560
// exit ;
81558: GO 81694
// if task [ 1 ] [ 1 ] <> | then
81560: LD_VAR 0 14
81564: PUSH
81565: LD_INT 1
81567: ARRAY
81568: PUSH
81569: LD_INT 1
81571: ARRAY
81572: PUSH
81573: LD_STRING |
81575: NONEQUAL
81576: IFFALSE 81580
// exit ;
81578: GO 81694
// _x := task [ 1 ] [ 2 ] ;
81580: LD_ADDR_VAR 0 11
81584: PUSH
81585: LD_VAR 0 14
81589: PUSH
81590: LD_INT 1
81592: ARRAY
81593: PUSH
81594: LD_INT 2
81596: ARRAY
81597: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
81598: LD_ADDR_VAR 0 12
81602: PUSH
81603: LD_VAR 0 14
81607: PUSH
81608: LD_INT 1
81610: ARRAY
81611: PUSH
81612: LD_INT 3
81614: ARRAY
81615: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
81616: LD_VAR 0 11
81620: PPUSH
81621: LD_VAR 0 12
81625: PPUSH
81626: CALL_OW 351
81630: NOT
81631: PUSH
81632: LD_VAR 0 11
81636: PPUSH
81637: LD_VAR 0 12
81641: PPUSH
81642: CALL_OW 554
81646: NOT
81647: OR
81648: IFFALSE 81682
// begin task := Delete ( task , 1 ) ;
81650: LD_ADDR_VAR 0 14
81654: PUSH
81655: LD_VAR 0 14
81659: PPUSH
81660: LD_INT 1
81662: PPUSH
81663: CALL_OW 3
81667: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
81668: LD_VAR 0 1
81672: PPUSH
81673: LD_VAR 0 14
81677: PPUSH
81678: CALL_OW 446
// end ; until not HasTask ( flame ) ;
81682: LD_VAR 0 1
81686: PPUSH
81687: CALL_OW 314
81691: NOT
81692: IFFALSE 81529
// end ;
81694: LD_VAR 0 5
81698: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
81699: LD_EXP 108
81703: NOT
81704: IFFALSE 81754
81706: GO 81708
81708: DISABLE
// begin initHack := true ;
81709: LD_ADDR_EXP 108
81713: PUSH
81714: LD_INT 1
81716: ST_TO_ADDR
// hackTanks := [ ] ;
81717: LD_ADDR_EXP 109
81721: PUSH
81722: EMPTY
81723: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
81724: LD_ADDR_EXP 110
81728: PUSH
81729: EMPTY
81730: ST_TO_ADDR
// hackLimit := 3 ;
81731: LD_ADDR_EXP 111
81735: PUSH
81736: LD_INT 3
81738: ST_TO_ADDR
// hackDist := 12 ;
81739: LD_ADDR_EXP 112
81743: PUSH
81744: LD_INT 12
81746: ST_TO_ADDR
// hackCounter := [ ] ;
81747: LD_ADDR_EXP 113
81751: PUSH
81752: EMPTY
81753: ST_TO_ADDR
// end ;
81754: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
81755: LD_EXP 108
81759: PUSH
81760: LD_INT 34
81762: PUSH
81763: LD_INT 99
81765: PUSH
81766: EMPTY
81767: LIST
81768: LIST
81769: PPUSH
81770: CALL_OW 69
81774: AND
81775: IFFALSE 82028
81777: GO 81779
81779: DISABLE
81780: LD_INT 0
81782: PPUSH
81783: PPUSH
// begin enable ;
81784: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
81785: LD_ADDR_VAR 0 1
81789: PUSH
81790: LD_INT 34
81792: PUSH
81793: LD_INT 99
81795: PUSH
81796: EMPTY
81797: LIST
81798: LIST
81799: PPUSH
81800: CALL_OW 69
81804: PUSH
81805: FOR_IN
81806: IFFALSE 82026
// begin if not i in hackTanks then
81808: LD_VAR 0 1
81812: PUSH
81813: LD_EXP 109
81817: IN
81818: NOT
81819: IFFALSE 81902
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
81821: LD_ADDR_EXP 109
81825: PUSH
81826: LD_EXP 109
81830: PPUSH
81831: LD_EXP 109
81835: PUSH
81836: LD_INT 1
81838: PLUS
81839: PPUSH
81840: LD_VAR 0 1
81844: PPUSH
81845: CALL_OW 1
81849: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
81850: LD_ADDR_EXP 110
81854: PUSH
81855: LD_EXP 110
81859: PPUSH
81860: LD_EXP 110
81864: PUSH
81865: LD_INT 1
81867: PLUS
81868: PPUSH
81869: EMPTY
81870: PPUSH
81871: CALL_OW 1
81875: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
81876: LD_ADDR_EXP 113
81880: PUSH
81881: LD_EXP 113
81885: PPUSH
81886: LD_EXP 113
81890: PUSH
81891: LD_INT 1
81893: PLUS
81894: PPUSH
81895: EMPTY
81896: PPUSH
81897: CALL_OW 1
81901: ST_TO_ADDR
// end ; if not IsOk ( i ) then
81902: LD_VAR 0 1
81906: PPUSH
81907: CALL_OW 302
81911: NOT
81912: IFFALSE 81925
// begin HackUnlinkAll ( i ) ;
81914: LD_VAR 0 1
81918: PPUSH
81919: CALL 82031 0 1
// continue ;
81923: GO 81805
// end ; HackCheckCapturedStatus ( i ) ;
81925: LD_VAR 0 1
81929: PPUSH
81930: CALL 82474 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
81934: LD_ADDR_VAR 0 2
81938: PUSH
81939: LD_INT 81
81941: PUSH
81942: LD_VAR 0 1
81946: PPUSH
81947: CALL_OW 255
81951: PUSH
81952: EMPTY
81953: LIST
81954: LIST
81955: PUSH
81956: LD_INT 33
81958: PUSH
81959: LD_INT 3
81961: PUSH
81962: EMPTY
81963: LIST
81964: LIST
81965: PUSH
81966: LD_INT 91
81968: PUSH
81969: LD_VAR 0 1
81973: PUSH
81974: LD_EXP 112
81978: PUSH
81979: EMPTY
81980: LIST
81981: LIST
81982: LIST
81983: PUSH
81984: LD_INT 50
81986: PUSH
81987: EMPTY
81988: LIST
81989: PUSH
81990: EMPTY
81991: LIST
81992: LIST
81993: LIST
81994: LIST
81995: PPUSH
81996: CALL_OW 69
82000: ST_TO_ADDR
// if not tmp then
82001: LD_VAR 0 2
82005: NOT
82006: IFFALSE 82010
// continue ;
82008: GO 81805
// HackLink ( i , tmp ) ;
82010: LD_VAR 0 1
82014: PPUSH
82015: LD_VAR 0 2
82019: PPUSH
82020: CALL 82167 0 2
// end ;
82024: GO 81805
82026: POP
82027: POP
// end ;
82028: PPOPN 2
82030: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
82031: LD_INT 0
82033: PPUSH
82034: PPUSH
82035: PPUSH
// if not hack in hackTanks then
82036: LD_VAR 0 1
82040: PUSH
82041: LD_EXP 109
82045: IN
82046: NOT
82047: IFFALSE 82051
// exit ;
82049: GO 82162
// index := GetElementIndex ( hackTanks , hack ) ;
82051: LD_ADDR_VAR 0 4
82055: PUSH
82056: LD_EXP 109
82060: PPUSH
82061: LD_VAR 0 1
82065: PPUSH
82066: CALL 25435 0 2
82070: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
82071: LD_EXP 110
82075: PUSH
82076: LD_VAR 0 4
82080: ARRAY
82081: IFFALSE 82162
// begin for i in hackTanksCaptured [ index ] do
82083: LD_ADDR_VAR 0 3
82087: PUSH
82088: LD_EXP 110
82092: PUSH
82093: LD_VAR 0 4
82097: ARRAY
82098: PUSH
82099: FOR_IN
82100: IFFALSE 82126
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
82102: LD_VAR 0 3
82106: PUSH
82107: LD_INT 1
82109: ARRAY
82110: PPUSH
82111: LD_VAR 0 3
82115: PUSH
82116: LD_INT 2
82118: ARRAY
82119: PPUSH
82120: CALL_OW 235
82124: GO 82099
82126: POP
82127: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
82128: LD_ADDR_EXP 110
82132: PUSH
82133: LD_EXP 110
82137: PPUSH
82138: LD_VAR 0 4
82142: PPUSH
82143: EMPTY
82144: PPUSH
82145: CALL_OW 1
82149: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
82150: LD_VAR 0 1
82154: PPUSH
82155: LD_INT 0
82157: PPUSH
82158: CALL_OW 505
// end ; end ;
82162: LD_VAR 0 2
82166: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
82167: LD_INT 0
82169: PPUSH
82170: PPUSH
82171: PPUSH
// if not hack in hackTanks or not vehicles then
82172: LD_VAR 0 1
82176: PUSH
82177: LD_EXP 109
82181: IN
82182: NOT
82183: PUSH
82184: LD_VAR 0 2
82188: NOT
82189: OR
82190: IFFALSE 82194
// exit ;
82192: GO 82469
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
82194: LD_ADDR_VAR 0 2
82198: PUSH
82199: LD_VAR 0 1
82203: PPUSH
82204: LD_VAR 0 2
82208: PPUSH
82209: LD_INT 1
82211: PPUSH
82212: LD_INT 1
82214: PPUSH
82215: CALL 26085 0 4
82219: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
82220: LD_ADDR_VAR 0 5
82224: PUSH
82225: LD_EXP 109
82229: PPUSH
82230: LD_VAR 0 1
82234: PPUSH
82235: CALL 25435 0 2
82239: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
82240: LD_EXP 110
82244: PUSH
82245: LD_VAR 0 5
82249: ARRAY
82250: PUSH
82251: LD_EXP 111
82255: LESS
82256: IFFALSE 82445
// begin for i := 1 to vehicles do
82258: LD_ADDR_VAR 0 4
82262: PUSH
82263: DOUBLE
82264: LD_INT 1
82266: DEC
82267: ST_TO_ADDR
82268: LD_VAR 0 2
82272: PUSH
82273: FOR_TO
82274: IFFALSE 82443
// begin if hackTanksCaptured [ index ] = hackLimit then
82276: LD_EXP 110
82280: PUSH
82281: LD_VAR 0 5
82285: ARRAY
82286: PUSH
82287: LD_EXP 111
82291: EQUAL
82292: IFFALSE 82296
// break ;
82294: GO 82443
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
82296: LD_ADDR_EXP 113
82300: PUSH
82301: LD_EXP 113
82305: PPUSH
82306: LD_VAR 0 5
82310: PPUSH
82311: LD_EXP 113
82315: PUSH
82316: LD_VAR 0 5
82320: ARRAY
82321: PUSH
82322: LD_INT 1
82324: PLUS
82325: PPUSH
82326: CALL_OW 1
82330: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
82331: LD_ADDR_EXP 110
82335: PUSH
82336: LD_EXP 110
82340: PPUSH
82341: LD_VAR 0 5
82345: PUSH
82346: LD_EXP 110
82350: PUSH
82351: LD_VAR 0 5
82355: ARRAY
82356: PUSH
82357: LD_INT 1
82359: PLUS
82360: PUSH
82361: EMPTY
82362: LIST
82363: LIST
82364: PPUSH
82365: LD_VAR 0 2
82369: PUSH
82370: LD_VAR 0 4
82374: ARRAY
82375: PUSH
82376: LD_VAR 0 2
82380: PUSH
82381: LD_VAR 0 4
82385: ARRAY
82386: PPUSH
82387: CALL_OW 255
82391: PUSH
82392: EMPTY
82393: LIST
82394: LIST
82395: PPUSH
82396: CALL 25650 0 3
82400: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
82401: LD_VAR 0 2
82405: PUSH
82406: LD_VAR 0 4
82410: ARRAY
82411: PPUSH
82412: LD_VAR 0 1
82416: PPUSH
82417: CALL_OW 255
82421: PPUSH
82422: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
82426: LD_VAR 0 2
82430: PUSH
82431: LD_VAR 0 4
82435: ARRAY
82436: PPUSH
82437: CALL_OW 141
// end ;
82441: GO 82273
82443: POP
82444: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
82445: LD_VAR 0 1
82449: PPUSH
82450: LD_EXP 110
82454: PUSH
82455: LD_VAR 0 5
82459: ARRAY
82460: PUSH
82461: LD_INT 0
82463: PLUS
82464: PPUSH
82465: CALL_OW 505
// end ;
82469: LD_VAR 0 3
82473: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
82474: LD_INT 0
82476: PPUSH
82477: PPUSH
82478: PPUSH
82479: PPUSH
// if not hack in hackTanks then
82480: LD_VAR 0 1
82484: PUSH
82485: LD_EXP 109
82489: IN
82490: NOT
82491: IFFALSE 82495
// exit ;
82493: GO 82735
// index := GetElementIndex ( hackTanks , hack ) ;
82495: LD_ADDR_VAR 0 4
82499: PUSH
82500: LD_EXP 109
82504: PPUSH
82505: LD_VAR 0 1
82509: PPUSH
82510: CALL 25435 0 2
82514: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
82515: LD_ADDR_VAR 0 3
82519: PUSH
82520: DOUBLE
82521: LD_EXP 110
82525: PUSH
82526: LD_VAR 0 4
82530: ARRAY
82531: INC
82532: ST_TO_ADDR
82533: LD_INT 1
82535: PUSH
82536: FOR_DOWNTO
82537: IFFALSE 82709
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
82539: LD_ADDR_VAR 0 5
82543: PUSH
82544: LD_EXP 110
82548: PUSH
82549: LD_VAR 0 4
82553: ARRAY
82554: PUSH
82555: LD_VAR 0 3
82559: ARRAY
82560: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
82561: LD_VAR 0 5
82565: PUSH
82566: LD_INT 1
82568: ARRAY
82569: PPUSH
82570: CALL_OW 302
82574: NOT
82575: PUSH
82576: LD_VAR 0 5
82580: PUSH
82581: LD_INT 1
82583: ARRAY
82584: PPUSH
82585: CALL_OW 255
82589: PUSH
82590: LD_VAR 0 1
82594: PPUSH
82595: CALL_OW 255
82599: NONEQUAL
82600: OR
82601: IFFALSE 82707
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
82603: LD_VAR 0 5
82607: PUSH
82608: LD_INT 1
82610: ARRAY
82611: PPUSH
82612: CALL_OW 305
82616: PUSH
82617: LD_VAR 0 5
82621: PUSH
82622: LD_INT 1
82624: ARRAY
82625: PPUSH
82626: CALL_OW 255
82630: PUSH
82631: LD_VAR 0 1
82635: PPUSH
82636: CALL_OW 255
82640: EQUAL
82641: AND
82642: IFFALSE 82666
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
82644: LD_VAR 0 5
82648: PUSH
82649: LD_INT 1
82651: ARRAY
82652: PPUSH
82653: LD_VAR 0 5
82657: PUSH
82658: LD_INT 2
82660: ARRAY
82661: PPUSH
82662: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
82666: LD_ADDR_EXP 110
82670: PUSH
82671: LD_EXP 110
82675: PPUSH
82676: LD_VAR 0 4
82680: PPUSH
82681: LD_EXP 110
82685: PUSH
82686: LD_VAR 0 4
82690: ARRAY
82691: PPUSH
82692: LD_VAR 0 3
82696: PPUSH
82697: CALL_OW 3
82701: PPUSH
82702: CALL_OW 1
82706: ST_TO_ADDR
// end ; end ;
82707: GO 82536
82709: POP
82710: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
82711: LD_VAR 0 1
82715: PPUSH
82716: LD_EXP 110
82720: PUSH
82721: LD_VAR 0 4
82725: ARRAY
82726: PUSH
82727: LD_INT 0
82729: PLUS
82730: PPUSH
82731: CALL_OW 505
// end ;
82735: LD_VAR 0 2
82739: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
82740: LD_INT 0
82742: PPUSH
82743: PPUSH
82744: PPUSH
82745: PPUSH
// if not hack in hackTanks then
82746: LD_VAR 0 1
82750: PUSH
82751: LD_EXP 109
82755: IN
82756: NOT
82757: IFFALSE 82761
// exit ;
82759: GO 82846
// index := GetElementIndex ( hackTanks , hack ) ;
82761: LD_ADDR_VAR 0 5
82765: PUSH
82766: LD_EXP 109
82770: PPUSH
82771: LD_VAR 0 1
82775: PPUSH
82776: CALL 25435 0 2
82780: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
82781: LD_ADDR_VAR 0 4
82785: PUSH
82786: DOUBLE
82787: LD_INT 1
82789: DEC
82790: ST_TO_ADDR
82791: LD_EXP 110
82795: PUSH
82796: LD_VAR 0 5
82800: ARRAY
82801: PUSH
82802: FOR_TO
82803: IFFALSE 82844
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
82805: LD_EXP 110
82809: PUSH
82810: LD_VAR 0 5
82814: ARRAY
82815: PUSH
82816: LD_VAR 0 4
82820: ARRAY
82821: PUSH
82822: LD_INT 1
82824: ARRAY
82825: PUSH
82826: LD_VAR 0 2
82830: EQUAL
82831: IFFALSE 82842
// KillUnit ( vehicle ) ;
82833: LD_VAR 0 2
82837: PPUSH
82838: CALL_OW 66
82842: GO 82802
82844: POP
82845: POP
// end ;
82846: LD_VAR 0 3
82850: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
82851: LD_EXP 114
82855: NOT
82856: IFFALSE 82891
82858: GO 82860
82860: DISABLE
// begin initMiner := true ;
82861: LD_ADDR_EXP 114
82865: PUSH
82866: LD_INT 1
82868: ST_TO_ADDR
// minersList := [ ] ;
82869: LD_ADDR_EXP 115
82873: PUSH
82874: EMPTY
82875: ST_TO_ADDR
// minerMinesList := [ ] ;
82876: LD_ADDR_EXP 116
82880: PUSH
82881: EMPTY
82882: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
82883: LD_ADDR_EXP 117
82887: PUSH
82888: LD_INT 5
82890: ST_TO_ADDR
// end ;
82891: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
82892: LD_EXP 114
82896: PUSH
82897: LD_INT 34
82899: PUSH
82900: LD_INT 81
82902: PUSH
82903: EMPTY
82904: LIST
82905: LIST
82906: PPUSH
82907: CALL_OW 69
82911: AND
82912: IFFALSE 83373
82914: GO 82916
82916: DISABLE
82917: LD_INT 0
82919: PPUSH
82920: PPUSH
82921: PPUSH
82922: PPUSH
// begin enable ;
82923: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
82924: LD_ADDR_VAR 0 1
82928: PUSH
82929: LD_INT 34
82931: PUSH
82932: LD_INT 81
82934: PUSH
82935: EMPTY
82936: LIST
82937: LIST
82938: PPUSH
82939: CALL_OW 69
82943: PUSH
82944: FOR_IN
82945: IFFALSE 83017
// begin if not i in minersList then
82947: LD_VAR 0 1
82951: PUSH
82952: LD_EXP 115
82956: IN
82957: NOT
82958: IFFALSE 83015
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
82960: LD_ADDR_EXP 115
82964: PUSH
82965: LD_EXP 115
82969: PPUSH
82970: LD_EXP 115
82974: PUSH
82975: LD_INT 1
82977: PLUS
82978: PPUSH
82979: LD_VAR 0 1
82983: PPUSH
82984: CALL_OW 1
82988: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
82989: LD_ADDR_EXP 116
82993: PUSH
82994: LD_EXP 116
82998: PPUSH
82999: LD_EXP 116
83003: PUSH
83004: LD_INT 1
83006: PLUS
83007: PPUSH
83008: EMPTY
83009: PPUSH
83010: CALL_OW 1
83014: ST_TO_ADDR
// end end ;
83015: GO 82944
83017: POP
83018: POP
// for i := minerMinesList downto 1 do
83019: LD_ADDR_VAR 0 1
83023: PUSH
83024: DOUBLE
83025: LD_EXP 116
83029: INC
83030: ST_TO_ADDR
83031: LD_INT 1
83033: PUSH
83034: FOR_DOWNTO
83035: IFFALSE 83371
// begin if IsLive ( minersList [ i ] ) then
83037: LD_EXP 115
83041: PUSH
83042: LD_VAR 0 1
83046: ARRAY
83047: PPUSH
83048: CALL_OW 300
83052: IFFALSE 83080
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
83054: LD_EXP 115
83058: PUSH
83059: LD_VAR 0 1
83063: ARRAY
83064: PPUSH
83065: LD_EXP 116
83069: PUSH
83070: LD_VAR 0 1
83074: ARRAY
83075: PPUSH
83076: CALL_OW 505
// if not minerMinesList [ i ] then
83080: LD_EXP 116
83084: PUSH
83085: LD_VAR 0 1
83089: ARRAY
83090: NOT
83091: IFFALSE 83095
// continue ;
83093: GO 83034
// for j := minerMinesList [ i ] downto 1 do
83095: LD_ADDR_VAR 0 2
83099: PUSH
83100: DOUBLE
83101: LD_EXP 116
83105: PUSH
83106: LD_VAR 0 1
83110: ARRAY
83111: INC
83112: ST_TO_ADDR
83113: LD_INT 1
83115: PUSH
83116: FOR_DOWNTO
83117: IFFALSE 83367
// begin side := GetSide ( minersList [ i ] ) ;
83119: LD_ADDR_VAR 0 3
83123: PUSH
83124: LD_EXP 115
83128: PUSH
83129: LD_VAR 0 1
83133: ARRAY
83134: PPUSH
83135: CALL_OW 255
83139: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
83140: LD_ADDR_VAR 0 4
83144: PUSH
83145: LD_EXP 116
83149: PUSH
83150: LD_VAR 0 1
83154: ARRAY
83155: PUSH
83156: LD_VAR 0 2
83160: ARRAY
83161: PUSH
83162: LD_INT 1
83164: ARRAY
83165: PPUSH
83166: LD_EXP 116
83170: PUSH
83171: LD_VAR 0 1
83175: ARRAY
83176: PUSH
83177: LD_VAR 0 2
83181: ARRAY
83182: PUSH
83183: LD_INT 2
83185: ARRAY
83186: PPUSH
83187: CALL_OW 428
83191: ST_TO_ADDR
// if not tmp then
83192: LD_VAR 0 4
83196: NOT
83197: IFFALSE 83201
// continue ;
83199: GO 83116
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
83201: LD_VAR 0 4
83205: PUSH
83206: LD_INT 81
83208: PUSH
83209: LD_VAR 0 3
83213: PUSH
83214: EMPTY
83215: LIST
83216: LIST
83217: PPUSH
83218: CALL_OW 69
83222: IN
83223: PUSH
83224: LD_EXP 116
83228: PUSH
83229: LD_VAR 0 1
83233: ARRAY
83234: PUSH
83235: LD_VAR 0 2
83239: ARRAY
83240: PUSH
83241: LD_INT 1
83243: ARRAY
83244: PPUSH
83245: LD_EXP 116
83249: PUSH
83250: LD_VAR 0 1
83254: ARRAY
83255: PUSH
83256: LD_VAR 0 2
83260: ARRAY
83261: PUSH
83262: LD_INT 2
83264: ARRAY
83265: PPUSH
83266: CALL_OW 458
83270: AND
83271: IFFALSE 83365
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
83273: LD_EXP 116
83277: PUSH
83278: LD_VAR 0 1
83282: ARRAY
83283: PUSH
83284: LD_VAR 0 2
83288: ARRAY
83289: PUSH
83290: LD_INT 1
83292: ARRAY
83293: PPUSH
83294: LD_EXP 116
83298: PUSH
83299: LD_VAR 0 1
83303: ARRAY
83304: PUSH
83305: LD_VAR 0 2
83309: ARRAY
83310: PUSH
83311: LD_INT 2
83313: ARRAY
83314: PPUSH
83315: LD_VAR 0 3
83319: PPUSH
83320: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
83324: LD_ADDR_EXP 116
83328: PUSH
83329: LD_EXP 116
83333: PPUSH
83334: LD_VAR 0 1
83338: PPUSH
83339: LD_EXP 116
83343: PUSH
83344: LD_VAR 0 1
83348: ARRAY
83349: PPUSH
83350: LD_VAR 0 2
83354: PPUSH
83355: CALL_OW 3
83359: PPUSH
83360: CALL_OW 1
83364: ST_TO_ADDR
// end ; end ;
83365: GO 83116
83367: POP
83368: POP
// end ;
83369: GO 83034
83371: POP
83372: POP
// end ;
83373: PPOPN 4
83375: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
83376: LD_INT 0
83378: PPUSH
83379: PPUSH
// result := false ;
83380: LD_ADDR_VAR 0 4
83384: PUSH
83385: LD_INT 0
83387: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
83388: LD_VAR 0 1
83392: PPUSH
83393: CALL_OW 264
83397: PUSH
83398: LD_INT 81
83400: EQUAL
83401: NOT
83402: IFFALSE 83406
// exit ;
83404: GO 83646
// index := GetElementIndex ( minersList , unit ) ;
83406: LD_ADDR_VAR 0 5
83410: PUSH
83411: LD_EXP 115
83415: PPUSH
83416: LD_VAR 0 1
83420: PPUSH
83421: CALL 25435 0 2
83425: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
83426: LD_EXP 116
83430: PUSH
83431: LD_VAR 0 5
83435: ARRAY
83436: PUSH
83437: LD_EXP 117
83441: GREATEREQUAL
83442: IFFALSE 83446
// exit ;
83444: GO 83646
// ComMoveXY ( unit , x , y ) ;
83446: LD_VAR 0 1
83450: PPUSH
83451: LD_VAR 0 2
83455: PPUSH
83456: LD_VAR 0 3
83460: PPUSH
83461: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
83465: LD_INT 35
83467: PPUSH
83468: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
83472: LD_VAR 0 1
83476: PPUSH
83477: LD_VAR 0 2
83481: PPUSH
83482: LD_VAR 0 3
83486: PPUSH
83487: CALL 57196 0 3
83491: NOT
83492: PUSH
83493: LD_VAR 0 1
83497: PPUSH
83498: CALL_OW 314
83502: AND
83503: IFFALSE 83507
// exit ;
83505: GO 83646
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
83507: LD_VAR 0 2
83511: PPUSH
83512: LD_VAR 0 3
83516: PPUSH
83517: CALL_OW 428
83521: PUSH
83522: LD_VAR 0 1
83526: EQUAL
83527: PUSH
83528: LD_VAR 0 1
83532: PPUSH
83533: CALL_OW 314
83537: NOT
83538: AND
83539: IFFALSE 83465
// PlaySoundXY ( x , y , PlantMine ) ;
83541: LD_VAR 0 2
83545: PPUSH
83546: LD_VAR 0 3
83550: PPUSH
83551: LD_STRING PlantMine
83553: PPUSH
83554: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
83558: LD_VAR 0 2
83562: PPUSH
83563: LD_VAR 0 3
83567: PPUSH
83568: LD_VAR 0 1
83572: PPUSH
83573: CALL_OW 255
83577: PPUSH
83578: LD_INT 0
83580: PPUSH
83581: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
83585: LD_ADDR_EXP 116
83589: PUSH
83590: LD_EXP 116
83594: PPUSH
83595: LD_VAR 0 5
83599: PUSH
83600: LD_EXP 116
83604: PUSH
83605: LD_VAR 0 5
83609: ARRAY
83610: PUSH
83611: LD_INT 1
83613: PLUS
83614: PUSH
83615: EMPTY
83616: LIST
83617: LIST
83618: PPUSH
83619: LD_VAR 0 2
83623: PUSH
83624: LD_VAR 0 3
83628: PUSH
83629: EMPTY
83630: LIST
83631: LIST
83632: PPUSH
83633: CALL 25650 0 3
83637: ST_TO_ADDR
// result := true ;
83638: LD_ADDR_VAR 0 4
83642: PUSH
83643: LD_INT 1
83645: ST_TO_ADDR
// end ;
83646: LD_VAR 0 4
83650: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
83651: LD_INT 0
83653: PPUSH
83654: PPUSH
83655: PPUSH
// if not unit in minersList then
83656: LD_VAR 0 1
83660: PUSH
83661: LD_EXP 115
83665: IN
83666: NOT
83667: IFFALSE 83671
// exit ;
83669: GO 84063
// index := GetElementIndex ( minersList , unit ) ;
83671: LD_ADDR_VAR 0 6
83675: PUSH
83676: LD_EXP 115
83680: PPUSH
83681: LD_VAR 0 1
83685: PPUSH
83686: CALL 25435 0 2
83690: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
83691: LD_ADDR_VAR 0 5
83695: PUSH
83696: DOUBLE
83697: LD_EXP 116
83701: PUSH
83702: LD_VAR 0 6
83706: ARRAY
83707: INC
83708: ST_TO_ADDR
83709: LD_INT 1
83711: PUSH
83712: FOR_DOWNTO
83713: IFFALSE 83874
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
83715: LD_EXP 116
83719: PUSH
83720: LD_VAR 0 6
83724: ARRAY
83725: PUSH
83726: LD_VAR 0 5
83730: ARRAY
83731: PUSH
83732: LD_INT 1
83734: ARRAY
83735: PUSH
83736: LD_VAR 0 2
83740: EQUAL
83741: PUSH
83742: LD_EXP 116
83746: PUSH
83747: LD_VAR 0 6
83751: ARRAY
83752: PUSH
83753: LD_VAR 0 5
83757: ARRAY
83758: PUSH
83759: LD_INT 2
83761: ARRAY
83762: PUSH
83763: LD_VAR 0 3
83767: EQUAL
83768: AND
83769: IFFALSE 83872
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
83771: LD_EXP 116
83775: PUSH
83776: LD_VAR 0 6
83780: ARRAY
83781: PUSH
83782: LD_VAR 0 5
83786: ARRAY
83787: PUSH
83788: LD_INT 1
83790: ARRAY
83791: PPUSH
83792: LD_EXP 116
83796: PUSH
83797: LD_VAR 0 6
83801: ARRAY
83802: PUSH
83803: LD_VAR 0 5
83807: ARRAY
83808: PUSH
83809: LD_INT 2
83811: ARRAY
83812: PPUSH
83813: LD_VAR 0 1
83817: PPUSH
83818: CALL_OW 255
83822: PPUSH
83823: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
83827: LD_ADDR_EXP 116
83831: PUSH
83832: LD_EXP 116
83836: PPUSH
83837: LD_VAR 0 6
83841: PPUSH
83842: LD_EXP 116
83846: PUSH
83847: LD_VAR 0 6
83851: ARRAY
83852: PPUSH
83853: LD_VAR 0 5
83857: PPUSH
83858: CALL_OW 3
83862: PPUSH
83863: CALL_OW 1
83867: ST_TO_ADDR
// exit ;
83868: POP
83869: POP
83870: GO 84063
// end ; end ;
83872: GO 83712
83874: POP
83875: POP
// for i := minerMinesList [ index ] downto 1 do
83876: LD_ADDR_VAR 0 5
83880: PUSH
83881: DOUBLE
83882: LD_EXP 116
83886: PUSH
83887: LD_VAR 0 6
83891: ARRAY
83892: INC
83893: ST_TO_ADDR
83894: LD_INT 1
83896: PUSH
83897: FOR_DOWNTO
83898: IFFALSE 84061
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
83900: LD_EXP 116
83904: PUSH
83905: LD_VAR 0 6
83909: ARRAY
83910: PUSH
83911: LD_VAR 0 5
83915: ARRAY
83916: PUSH
83917: LD_INT 1
83919: ARRAY
83920: PPUSH
83921: LD_EXP 116
83925: PUSH
83926: LD_VAR 0 6
83930: ARRAY
83931: PUSH
83932: LD_VAR 0 5
83936: ARRAY
83937: PUSH
83938: LD_INT 2
83940: ARRAY
83941: PPUSH
83942: LD_VAR 0 2
83946: PPUSH
83947: LD_VAR 0 3
83951: PPUSH
83952: CALL_OW 298
83956: PUSH
83957: LD_INT 6
83959: LESS
83960: IFFALSE 84059
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
83962: LD_EXP 116
83966: PUSH
83967: LD_VAR 0 6
83971: ARRAY
83972: PUSH
83973: LD_VAR 0 5
83977: ARRAY
83978: PUSH
83979: LD_INT 1
83981: ARRAY
83982: PPUSH
83983: LD_EXP 116
83987: PUSH
83988: LD_VAR 0 6
83992: ARRAY
83993: PUSH
83994: LD_VAR 0 5
83998: ARRAY
83999: PUSH
84000: LD_INT 2
84002: ARRAY
84003: PPUSH
84004: LD_VAR 0 1
84008: PPUSH
84009: CALL_OW 255
84013: PPUSH
84014: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
84018: LD_ADDR_EXP 116
84022: PUSH
84023: LD_EXP 116
84027: PPUSH
84028: LD_VAR 0 6
84032: PPUSH
84033: LD_EXP 116
84037: PUSH
84038: LD_VAR 0 6
84042: ARRAY
84043: PPUSH
84044: LD_VAR 0 5
84048: PPUSH
84049: CALL_OW 3
84053: PPUSH
84054: CALL_OW 1
84058: ST_TO_ADDR
// end ; end ;
84059: GO 83897
84061: POP
84062: POP
// end ;
84063: LD_VAR 0 4
84067: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
84068: LD_INT 0
84070: PPUSH
84071: PPUSH
84072: PPUSH
84073: PPUSH
84074: PPUSH
84075: PPUSH
84076: PPUSH
84077: PPUSH
84078: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
84079: LD_VAR 0 1
84083: PPUSH
84084: CALL_OW 264
84088: PUSH
84089: LD_INT 81
84091: EQUAL
84092: NOT
84093: PUSH
84094: LD_VAR 0 1
84098: PUSH
84099: LD_EXP 115
84103: IN
84104: NOT
84105: OR
84106: IFFALSE 84110
// exit ;
84108: GO 84432
// index := GetElementIndex ( minersList , unit ) ;
84110: LD_ADDR_VAR 0 6
84114: PUSH
84115: LD_EXP 115
84119: PPUSH
84120: LD_VAR 0 1
84124: PPUSH
84125: CALL 25435 0 2
84129: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
84130: LD_ADDR_VAR 0 8
84134: PUSH
84135: LD_EXP 117
84139: PUSH
84140: LD_EXP 116
84144: PUSH
84145: LD_VAR 0 6
84149: ARRAY
84150: MINUS
84151: ST_TO_ADDR
// if not minesFreeAmount then
84152: LD_VAR 0 8
84156: NOT
84157: IFFALSE 84161
// exit ;
84159: GO 84432
// tmp := [ ] ;
84161: LD_ADDR_VAR 0 7
84165: PUSH
84166: EMPTY
84167: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
84168: LD_ADDR_VAR 0 5
84172: PUSH
84173: DOUBLE
84174: LD_INT 1
84176: DEC
84177: ST_TO_ADDR
84178: LD_VAR 0 8
84182: PUSH
84183: FOR_TO
84184: IFFALSE 84379
// begin _d := rand ( 0 , 5 ) ;
84186: LD_ADDR_VAR 0 11
84190: PUSH
84191: LD_INT 0
84193: PPUSH
84194: LD_INT 5
84196: PPUSH
84197: CALL_OW 12
84201: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
84202: LD_ADDR_VAR 0 12
84206: PUSH
84207: LD_INT 2
84209: PPUSH
84210: LD_INT 6
84212: PPUSH
84213: CALL_OW 12
84217: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
84218: LD_ADDR_VAR 0 9
84222: PUSH
84223: LD_VAR 0 2
84227: PPUSH
84228: LD_VAR 0 11
84232: PPUSH
84233: LD_VAR 0 12
84237: PPUSH
84238: CALL_OW 272
84242: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
84243: LD_ADDR_VAR 0 10
84247: PUSH
84248: LD_VAR 0 3
84252: PPUSH
84253: LD_VAR 0 11
84257: PPUSH
84258: LD_VAR 0 12
84262: PPUSH
84263: CALL_OW 273
84267: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
84268: LD_VAR 0 9
84272: PPUSH
84273: LD_VAR 0 10
84277: PPUSH
84278: CALL_OW 488
84282: PUSH
84283: LD_VAR 0 9
84287: PUSH
84288: LD_VAR 0 10
84292: PUSH
84293: EMPTY
84294: LIST
84295: LIST
84296: PUSH
84297: LD_VAR 0 7
84301: IN
84302: NOT
84303: AND
84304: PUSH
84305: LD_VAR 0 9
84309: PPUSH
84310: LD_VAR 0 10
84314: PPUSH
84315: CALL_OW 458
84319: NOT
84320: AND
84321: IFFALSE 84363
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
84323: LD_ADDR_VAR 0 7
84327: PUSH
84328: LD_VAR 0 7
84332: PPUSH
84333: LD_VAR 0 7
84337: PUSH
84338: LD_INT 1
84340: PLUS
84341: PPUSH
84342: LD_VAR 0 9
84346: PUSH
84347: LD_VAR 0 10
84351: PUSH
84352: EMPTY
84353: LIST
84354: LIST
84355: PPUSH
84356: CALL_OW 1
84360: ST_TO_ADDR
84361: GO 84377
// i := i - 1 ;
84363: LD_ADDR_VAR 0 5
84367: PUSH
84368: LD_VAR 0 5
84372: PUSH
84373: LD_INT 1
84375: MINUS
84376: ST_TO_ADDR
// end ;
84377: GO 84183
84379: POP
84380: POP
// for i in tmp do
84381: LD_ADDR_VAR 0 5
84385: PUSH
84386: LD_VAR 0 7
84390: PUSH
84391: FOR_IN
84392: IFFALSE 84430
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
84394: LD_VAR 0 1
84398: PPUSH
84399: LD_VAR 0 5
84403: PUSH
84404: LD_INT 1
84406: ARRAY
84407: PPUSH
84408: LD_VAR 0 5
84412: PUSH
84413: LD_INT 2
84415: ARRAY
84416: PPUSH
84417: CALL 83376 0 3
84421: NOT
84422: IFFALSE 84428
// exit ;
84424: POP
84425: POP
84426: GO 84432
84428: GO 84391
84430: POP
84431: POP
// end ;
84432: LD_VAR 0 4
84436: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
84437: LD_INT 0
84439: PPUSH
84440: PPUSH
84441: PPUSH
84442: PPUSH
84443: PPUSH
84444: PPUSH
84445: PPUSH
84446: PPUSH
84447: PPUSH
// if GetClass ( unit ) <> class_sniper then
84448: LD_VAR 0 1
84452: PPUSH
84453: CALL_OW 257
84457: PUSH
84458: LD_INT 5
84460: NONEQUAL
84461: IFFALSE 84465
// exit ;
84463: GO 84931
// dist := 8 ;
84465: LD_ADDR_VAR 0 5
84469: PUSH
84470: LD_INT 8
84472: ST_TO_ADDR
// viewRange := 12 ;
84473: LD_ADDR_VAR 0 8
84477: PUSH
84478: LD_INT 12
84480: ST_TO_ADDR
// side := GetSide ( unit ) ;
84481: LD_ADDR_VAR 0 6
84485: PUSH
84486: LD_VAR 0 1
84490: PPUSH
84491: CALL_OW 255
84495: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
84496: LD_INT 61
84498: PPUSH
84499: LD_VAR 0 6
84503: PPUSH
84504: CALL_OW 321
84508: PUSH
84509: LD_INT 2
84511: EQUAL
84512: IFFALSE 84522
// viewRange := 16 ;
84514: LD_ADDR_VAR 0 8
84518: PUSH
84519: LD_INT 16
84521: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
84522: LD_VAR 0 1
84526: PPUSH
84527: LD_VAR 0 2
84531: PPUSH
84532: LD_VAR 0 3
84536: PPUSH
84537: CALL_OW 297
84541: PUSH
84542: LD_VAR 0 5
84546: GREATER
84547: IFFALSE 84626
// begin ComMoveXY ( unit , x , y ) ;
84549: LD_VAR 0 1
84553: PPUSH
84554: LD_VAR 0 2
84558: PPUSH
84559: LD_VAR 0 3
84563: PPUSH
84564: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
84568: LD_INT 35
84570: PPUSH
84571: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
84575: LD_VAR 0 1
84579: PPUSH
84580: LD_VAR 0 2
84584: PPUSH
84585: LD_VAR 0 3
84589: PPUSH
84590: CALL 57196 0 3
84594: NOT
84595: IFFALSE 84599
// exit ;
84597: GO 84931
// until GetDistUnitXY ( unit , x , y ) < dist ;
84599: LD_VAR 0 1
84603: PPUSH
84604: LD_VAR 0 2
84608: PPUSH
84609: LD_VAR 0 3
84613: PPUSH
84614: CALL_OW 297
84618: PUSH
84619: LD_VAR 0 5
84623: LESS
84624: IFFALSE 84568
// end ; ComTurnXY ( unit , x , y ) ;
84626: LD_VAR 0 1
84630: PPUSH
84631: LD_VAR 0 2
84635: PPUSH
84636: LD_VAR 0 3
84640: PPUSH
84641: CALL_OW 118
// repeat if Multiplayer then
84645: LD_OWVAR 4
84649: IFFALSE 84660
// wait ( 35 ) else
84651: LD_INT 35
84653: PPUSH
84654: CALL_OW 67
84658: GO 84667
// wait ( 5 ) ;
84660: LD_INT 5
84662: PPUSH
84663: CALL_OW 67
// _d := GetDir ( unit ) ;
84667: LD_ADDR_VAR 0 11
84671: PUSH
84672: LD_VAR 0 1
84676: PPUSH
84677: CALL_OW 254
84681: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
84682: LD_ADDR_VAR 0 7
84686: PUSH
84687: LD_VAR 0 1
84691: PPUSH
84692: CALL_OW 250
84696: PPUSH
84697: LD_VAR 0 1
84701: PPUSH
84702: CALL_OW 251
84706: PPUSH
84707: LD_VAR 0 2
84711: PPUSH
84712: LD_VAR 0 3
84716: PPUSH
84717: CALL 59804 0 4
84721: ST_TO_ADDR
// until dir = _d ;
84722: LD_VAR 0 7
84726: PUSH
84727: LD_VAR 0 11
84731: EQUAL
84732: IFFALSE 84645
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
84734: LD_ADDR_VAR 0 9
84738: PUSH
84739: LD_VAR 0 1
84743: PPUSH
84744: CALL_OW 250
84748: PPUSH
84749: LD_VAR 0 7
84753: PPUSH
84754: LD_VAR 0 5
84758: PPUSH
84759: CALL_OW 272
84763: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
84764: LD_ADDR_VAR 0 10
84768: PUSH
84769: LD_VAR 0 1
84773: PPUSH
84774: CALL_OW 251
84778: PPUSH
84779: LD_VAR 0 7
84783: PPUSH
84784: LD_VAR 0 5
84788: PPUSH
84789: CALL_OW 273
84793: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
84794: LD_VAR 0 9
84798: PPUSH
84799: LD_VAR 0 10
84803: PPUSH
84804: CALL_OW 488
84808: NOT
84809: IFFALSE 84813
// exit ;
84811: GO 84931
// ComAnimCustom ( unit , 1 ) ;
84813: LD_VAR 0 1
84817: PPUSH
84818: LD_INT 1
84820: PPUSH
84821: CALL_OW 592
// p := 0 ;
84825: LD_ADDR_VAR 0 12
84829: PUSH
84830: LD_INT 0
84832: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
84833: LD_VAR 0 9
84837: PPUSH
84838: LD_VAR 0 10
84842: PPUSH
84843: LD_VAR 0 6
84847: PPUSH
84848: LD_VAR 0 8
84852: PPUSH
84853: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
84857: LD_INT 35
84859: PPUSH
84860: CALL_OW 67
// p := Inc ( p ) ;
84864: LD_ADDR_VAR 0 12
84868: PUSH
84869: LD_VAR 0 12
84873: PPUSH
84874: CALL 59760 0 1
84878: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
84879: LD_VAR 0 12
84883: PUSH
84884: LD_INT 3
84886: EQUAL
84887: PUSH
84888: LD_VAR 0 1
84892: PPUSH
84893: CALL_OW 302
84897: NOT
84898: OR
84899: PUSH
84900: LD_VAR 0 1
84904: PPUSH
84905: CALL_OW 301
84909: OR
84910: IFFALSE 84857
// RemoveSeeing ( _x , _y , side ) ;
84912: LD_VAR 0 9
84916: PPUSH
84917: LD_VAR 0 10
84921: PPUSH
84922: LD_VAR 0 6
84926: PPUSH
84927: CALL_OW 331
// end ;
84931: LD_VAR 0 4
84935: RET
