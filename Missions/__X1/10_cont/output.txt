// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 29 0 0
// CreateNature ;
   8: CALL 10250 0 0
// PrepareArabian ;
  12: CALL 226 0 0
// PrepareAmerican ;
  16: CALL 530 0 0
// PrepareLegion ;
  20: CALL 5420 0 0
// Action ;
  24: CALL 10748 0 0
// end ;
  28: END
// export debug , prefix , amScriptActive , legScriptActive , apeAmount , spotAmericanBase , spotArabianBase , spotByAmerican , spotByLegion , spotLegion , americanDestroyed , legionDestroyed , hasMastodont , hasVehicles , hasTigers , hasApes , hasDrugs , canFinish , gameActive , omarCanChangeClass , tigerCounter ; function Init ; begin
  29: LD_INT 0
  31: PPUSH
// debug := false ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// prefix := 09_ ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_STRING 09_
  47: ST_TO_ADDR
// amScriptActive := true ;
  48: LD_ADDR_EXP 3
  52: PUSH
  53: LD_INT 1
  55: ST_TO_ADDR
// legScriptActive := true ;
  56: LD_ADDR_EXP 4
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// apeAmount := [ 16 , 14 , 12 , 10 ] [ Difficulty ] ;
  64: LD_ADDR_EXP 5
  68: PUSH
  69: LD_INT 16
  71: PUSH
  72: LD_INT 14
  74: PUSH
  75: LD_INT 12
  77: PUSH
  78: LD_INT 10
  80: PUSH
  81: EMPTY
  82: LIST
  83: LIST
  84: LIST
  85: LIST
  86: PUSH
  87: LD_OWVAR 67
  91: ARRAY
  92: ST_TO_ADDR
// spotAmericanBase := false ;
  93: LD_ADDR_EXP 6
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// spotArabianBase := false ;
 101: LD_ADDR_EXP 7
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// spotLegion := false ;
 109: LD_ADDR_EXP 10
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// spotByAmerican := false ;
 117: LD_ADDR_EXP 8
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// spotByLegion := false ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// americanDestroyed := false ;
 133: LD_ADDR_EXP 11
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// legionDestroyed := false ;
 141: LD_ADDR_EXP 12
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// hasMastodont := false ;
 149: LD_ADDR_EXP 13
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// hasVehicles := false ;
 157: LD_ADDR_EXP 14
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// hasTigers := false ;
 165: LD_ADDR_EXP 15
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// hasApes := false ;
 173: LD_ADDR_EXP 16
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// hasDrugs := false ;
 181: LD_ADDR_EXP 17
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// canFinish := false ;
 189: LD_ADDR_EXP 18
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// gameActive := false ;
 197: LD_ADDR_EXP 19
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// omarCanChangeClass := false ;
 205: LD_ADDR_EXP 20
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// tigerCounter := 0 ;
 213: LD_ADDR_EXP 21
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// end ; end_of_file
 221: LD_VAR 0 1
 225: RET
// export Heike , Omar ; export heikeVehicle , omarVehicle ; export function PrepareArabian ; var i , tmp ; begin
 226: LD_INT 0
 228: PPUSH
 229: PPUSH
 230: PPUSH
// uc_side := 2 ;
 231: LD_ADDR_OWVAR 20
 235: PUSH
 236: LD_INT 2
 238: ST_TO_ADDR
// uc_nation := nation_arabian ;
 239: LD_ADDR_OWVAR 21
 243: PUSH
 244: LD_INT 2
 246: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 247: LD_ADDR_EXP 22
 251: PUSH
 252: LD_STRING Heike
 254: PPUSH
 255: LD_EXP 1
 259: NOT
 260: PPUSH
 261: LD_EXP 2
 265: PPUSH
 266: CALL 19238 0 3
 270: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 271: LD_INT 14
 273: PPUSH
 274: LD_INT 3
 276: PPUSH
 277: LD_INT 1
 279: PPUSH
 280: LD_INT 27
 282: PPUSH
 283: LD_INT 100
 285: PPUSH
 286: CALL 24078 0 5
// heikeVehicle := CreateVehicle ;
 290: LD_ADDR_EXP 24
 294: PUSH
 295: CALL_OW 45
 299: ST_TO_ADDR
// SetDir ( heikeVehicle , 4 ) ;
 300: LD_EXP 24
 304: PPUSH
 305: LD_INT 4
 307: PPUSH
 308: CALL_OW 233
// PlaceUnitXY ( heikeVehicle , 118 , 37 , false ) ;
 312: LD_EXP 24
 316: PPUSH
 317: LD_INT 118
 319: PPUSH
 320: LD_INT 37
 322: PPUSH
 323: LD_INT 0
 325: PPUSH
 326: CALL_OW 48
// SetClass ( Heike , class_soldier ) ;
 330: LD_EXP 22
 334: PPUSH
 335: LD_INT 1
 337: PPUSH
 338: CALL_OW 336
// PlaceHumanInUnit ( Heike , heikeVehicle ) ;
 342: LD_EXP 22
 346: PPUSH
 347: LD_EXP 24
 351: PPUSH
 352: CALL_OW 52
// uc_side := 5 ;
 356: LD_ADDR_OWVAR 20
 360: PUSH
 361: LD_INT 5
 363: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
 364: LD_ADDR_EXP 23
 368: PUSH
 369: LD_STRING Omar
 371: PPUSH
 372: CALL_OW 25
 376: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 377: LD_INT 14
 379: PPUSH
 380: LD_INT 3
 382: PPUSH
 383: LD_INT 1
 385: PPUSH
 386: LD_INT 27
 388: PPUSH
 389: LD_INT 100
 391: PPUSH
 392: CALL 24078 0 5
// omarVehicle := CreateVehicle ;
 396: LD_ADDR_EXP 25
 400: PUSH
 401: CALL_OW 45
 405: ST_TO_ADDR
// SetDir ( omarVehicle , 0 ) ;
 406: LD_EXP 25
 410: PPUSH
 411: LD_INT 0
 413: PPUSH
 414: CALL_OW 233
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) do
 418: LD_ADDR_VAR 0 2
 422: PUSH
 423: LD_INT 22
 425: PUSH
 426: LD_INT 5
 428: PUSH
 429: EMPTY
 430: LIST
 431: LIST
 432: PUSH
 433: LD_INT 21
 435: PUSH
 436: LD_INT 3
 438: PUSH
 439: EMPTY
 440: LIST
 441: LIST
 442: PUSH
 443: EMPTY
 444: LIST
 445: LIST
 446: PPUSH
 447: CALL_OW 69
 451: PUSH
 452: FOR_IN
 453: IFFALSE 477
// SetLives ( i , rand ( 300 , 499 ) ) ;
 455: LD_VAR 0 2
 459: PPUSH
 460: LD_INT 300
 462: PPUSH
 463: LD_INT 499
 465: PPUSH
 466: CALL_OW 12
 470: PPUSH
 471: CALL_OW 234
 475: GO 452
 477: POP
 478: POP
// SetResourceType ( GetBase ( arBase ) , mat_cans , 100 - ( 20 * Difficulty ) ) ;
 479: LD_INT 85
 481: PPUSH
 482: CALL_OW 274
 486: PPUSH
 487: LD_INT 1
 489: PPUSH
 490: LD_INT 100
 492: PUSH
 493: LD_INT 20
 495: PUSH
 496: LD_OWVAR 67
 500: MUL
 501: MINUS
 502: PPUSH
 503: CALL_OW 277
// SetResourceType ( GetBase ( arBase ) , mat_oil , 10 ) ;
 507: LD_INT 85
 509: PPUSH
 510: CALL_OW 274
 514: PPUSH
 515: LD_INT 2
 517: PPUSH
 518: LD_INT 10
 520: PPUSH
 521: CALL_OW 277
// end ; end_of_file
 525: LD_VAR 0 1
 529: RET
// export amForces , amTech , amConstructList , amHealPoint , amBuildings , amTanks , amCommander , amCargo , amPatrol ; export function PrepareAmerican ; var i , j , b , un , skill , sources , patrolSpawnArea ; begin
 530: LD_INT 0
 532: PPUSH
 533: PPUSH
 534: PPUSH
 535: PPUSH
 536: PPUSH
 537: PPUSH
 538: PPUSH
 539: PPUSH
// uc_side := 1 ;
 540: LD_ADDR_OWVAR 20
 544: PUSH
 545: LD_INT 1
 547: ST_TO_ADDR
// uc_nation := nation_american ;
 548: LD_ADDR_OWVAR 21
 552: PUSH
 553: LD_INT 1
 555: ST_TO_ADDR
// amForces := [ ] ;
 556: LD_ADDR_EXP 26
 560: PUSH
 561: EMPTY
 562: ST_TO_ADDR
// amTech := GetTechNation ( 1 , nation_american , state_enabled ) ;
 563: LD_ADDR_EXP 27
 567: PUSH
 568: LD_INT 1
 570: PPUSH
 571: LD_INT 1
 573: PPUSH
 574: LD_INT 1
 576: PPUSH
 577: CALL 19301 0 3
 581: ST_TO_ADDR
// amConstructList := [ [ us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ] , [ us_medium_tracked , engine_combustion , control_remote , us_crane ] ] ;
 582: LD_ADDR_EXP 28
 586: PUSH
 587: LD_INT 2
 589: PUSH
 590: LD_INT 1
 592: PUSH
 593: LD_INT 2
 595: PUSH
 596: LD_INT 12
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: LIST
 603: LIST
 604: PUSH
 605: LD_INT 3
 607: PUSH
 608: LD_INT 1
 610: PUSH
 611: LD_INT 2
 613: PUSH
 614: LD_INT 13
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: PUSH
 623: EMPTY
 624: LIST
 625: LIST
 626: ST_TO_ADDR
// amHealPoint := [ 94 , 132 ] ;
 627: LD_ADDR_EXP 29
 631: PUSH
 632: LD_INT 94
 634: PUSH
 635: LD_INT 132
 637: PUSH
 638: EMPTY
 639: LIST
 640: LIST
 641: ST_TO_ADDR
// amBuildings := [ ] ;
 642: LD_ADDR_EXP 30
 646: PUSH
 647: EMPTY
 648: ST_TO_ADDR
// amTanks := [ ] ;
 649: LD_ADDR_EXP 31
 653: PUSH
 654: EMPTY
 655: ST_TO_ADDR
// amCargo := 0 ;
 656: LD_ADDR_EXP 33
 660: PUSH
 661: LD_INT 0
 663: ST_TO_ADDR
// amPatrol := [ ] ;
 664: LD_ADDR_EXP 34
 668: PUSH
 669: EMPTY
 670: ST_TO_ADDR
// sources := [ [ 77 , 121 ] , [ 98 , 145 ] ] ;
 671: LD_ADDR_VAR 0 7
 675: PUSH
 676: LD_INT 77
 678: PUSH
 679: LD_INT 121
 681: PUSH
 682: EMPTY
 683: LIST
 684: LIST
 685: PUSH
 686: LD_INT 98
 688: PUSH
 689: LD_INT 145
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: PUSH
 696: EMPTY
 697: LIST
 698: LIST
 699: ST_TO_ADDR
// for i in sources do
 700: LD_ADDR_VAR 0 2
 704: PUSH
 705: LD_VAR 0 7
 709: PUSH
 710: FOR_IN
 711: IFFALSE 740
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 1 ) ;
 713: LD_VAR 0 2
 717: PUSH
 718: LD_INT 1
 720: ARRAY
 721: PPUSH
 722: LD_VAR 0 2
 726: PUSH
 727: LD_INT 2
 729: ARRAY
 730: PPUSH
 731: LD_INT 1
 733: PPUSH
 734: CALL_OW 441
 738: GO 710
 740: POP
 741: POP
// SetResourceType ( GetBase ( amBase ) , mat_cans , 550 ) ;
 742: LD_INT 2
 744: PPUSH
 745: CALL_OW 274
 749: PPUSH
 750: LD_INT 1
 752: PPUSH
 753: LD_INT 550
 755: PPUSH
 756: CALL_OW 277
// SetResourceType ( GetBase ( amBase ) , mat_oil , 120 ) ;
 760: LD_INT 2
 762: PPUSH
 763: CALL_OW 274
 767: PPUSH
 768: LD_INT 2
 770: PPUSH
 771: LD_INT 120
 773: PPUSH
 774: CALL_OW 277
// SetResourceType ( GetBase ( amBase ) , mat_siberit , 30 ) ;
 778: LD_INT 2
 780: PPUSH
 781: CALL_OW 274
 785: PPUSH
 786: LD_INT 3
 788: PPUSH
 789: LD_INT 30
 791: PPUSH
 792: CALL_OW 277
// skill := [ 6 , 7 , 8 , 9 ] [ Difficulty ] ;
 796: LD_ADDR_VAR 0 6
 800: PUSH
 801: LD_INT 6
 803: PUSH
 804: LD_INT 7
 806: PUSH
 807: LD_INT 8
 809: PUSH
 810: LD_INT 9
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: LIST
 817: LIST
 818: PUSH
 819: LD_OWVAR 67
 823: ARRAY
 824: ST_TO_ADDR
// amCommander := PrepareUnit ( Brown , false ,  ) ;
 825: LD_ADDR_EXP 32
 829: PUSH
 830: LD_STRING Brown
 832: PPUSH
 833: LD_INT 0
 835: PPUSH
 836: LD_STRING 
 838: PPUSH
 839: CALL 19238 0 3
 843: ST_TO_ADDR
// PlaceHumanInUnit ( amCommander , amBase ) ;
 844: LD_EXP 32
 848: PPUSH
 849: LD_INT 2
 851: PPUSH
 852: CALL_OW 52
// for i := 1 to 4 do
 856: LD_ADDR_VAR 0 2
 860: PUSH
 861: DOUBLE
 862: LD_INT 1
 864: DEC
 865: ST_TO_ADDR
 866: LD_INT 4
 868: PUSH
 869: FOR_TO
 870: IFFALSE 1394
// for j := 1 to [ [ 5 , 6 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] , [ 5 , 5 , 6 , 7 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
 872: LD_ADDR_VAR 0 3
 876: PUSH
 877: DOUBLE
 878: LD_INT 1
 880: DEC
 881: ST_TO_ADDR
 882: LD_INT 5
 884: PUSH
 885: LD_INT 6
 887: PUSH
 888: LD_INT 8
 890: PUSH
 891: LD_INT 9
 893: PUSH
 894: EMPTY
 895: LIST
 896: LIST
 897: LIST
 898: LIST
 899: PUSH
 900: LD_OWVAR 67
 904: ARRAY
 905: PUSH
 906: LD_INT 3
 908: PUSH
 909: LD_INT 4
 911: PUSH
 912: LD_INT 5
 914: PUSH
 915: LD_INT 5
 917: PUSH
 918: EMPTY
 919: LIST
 920: LIST
 921: LIST
 922: LIST
 923: PUSH
 924: LD_OWVAR 67
 928: ARRAY
 929: PUSH
 930: LD_INT 5
 932: PUSH
 933: LD_INT 5
 935: PUSH
 936: LD_INT 6
 938: PUSH
 939: LD_INT 7
 941: PUSH
 942: EMPTY
 943: LIST
 944: LIST
 945: LIST
 946: LIST
 947: PUSH
 948: LD_OWVAR 67
 952: ARRAY
 953: PUSH
 954: LD_INT 2
 956: PUSH
 957: LD_INT 3
 959: PUSH
 960: LD_INT 3
 962: PUSH
 963: LD_INT 3
 965: PUSH
 966: EMPTY
 967: LIST
 968: LIST
 969: LIST
 970: LIST
 971: PUSH
 972: LD_OWVAR 67
 976: ARRAY
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: LIST
 982: LIST
 983: PUSH
 984: LD_VAR 0 2
 988: ARRAY
 989: PUSH
 990: FOR_TO
 991: IFFALSE 1390
// begin PrepareHuman ( false , i , skill ) ;
 993: LD_INT 0
 995: PPUSH
 996: LD_VAR 0 2
1000: PPUSH
1001: LD_VAR 0 6
1005: PPUSH
1006: CALL_OW 380
// un := CreateHuman ;
1010: LD_ADDR_VAR 0 5
1014: PUSH
1015: CALL_OW 44
1019: ST_TO_ADDR
// amForces := Join ( amForces , un ) ;
1020: LD_ADDR_EXP 26
1024: PUSH
1025: LD_EXP 26
1029: PPUSH
1030: LD_VAR 0 5
1034: PPUSH
1035: CALL 56940 0 2
1039: ST_TO_ADDR
// case i of 1 :
1040: LD_VAR 0 2
1044: PUSH
1045: LD_INT 1
1047: DOUBLE
1048: EQUAL
1049: IFTRUE 1053
1051: GO 1122
1053: POP
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] ] ) ; 2 :
1054: LD_ADDR_VAR 0 4
1058: PUSH
1059: LD_INT 22
1061: PUSH
1062: LD_INT 1
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: PUSH
1069: LD_INT 2
1071: PUSH
1072: LD_INT 30
1074: PUSH
1075: LD_INT 32
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: PUSH
1082: LD_INT 30
1084: PUSH
1085: LD_INT 5
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: LIST
1096: PUSH
1097: LD_INT 3
1099: PUSH
1100: LD_INT 62
1102: PUSH
1103: EMPTY
1104: LIST
1105: PUSH
1106: EMPTY
1107: LIST
1108: LIST
1109: PUSH
1110: EMPTY
1111: LIST
1112: LIST
1113: LIST
1114: PPUSH
1115: CALL_OW 69
1119: ST_TO_ADDR
1120: GO 1301
1122: LD_INT 2
1124: DOUBLE
1125: EQUAL
1126: IFTRUE 1130
1128: GO 1159
1130: POP
// b := UnitFilter ( amBase , [ f_not , [ f_full ] ] ) ; 3 :
1131: LD_ADDR_VAR 0 4
1135: PUSH
1136: LD_INT 2
1138: PPUSH
1139: LD_INT 3
1141: PUSH
1142: LD_INT 62
1144: PUSH
1145: EMPTY
1146: LIST
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PPUSH
1152: CALL_OW 72
1156: ST_TO_ADDR
1157: GO 1301
1159: LD_INT 3
1161: DOUBLE
1162: EQUAL
1163: IFTRUE 1167
1165: GO 1241
1167: POP
// b := ReverseArray ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_control_tower ] ] , [ f_not , [ f_full ] ] ] ) ) ; 4 :
1168: LD_ADDR_VAR 0 4
1172: PUSH
1173: LD_INT 22
1175: PUSH
1176: LD_INT 1
1178: PUSH
1179: EMPTY
1180: LIST
1181: LIST
1182: PUSH
1183: LD_INT 2
1185: PUSH
1186: LD_INT 30
1188: PUSH
1189: LD_INT 3
1191: PUSH
1192: EMPTY
1193: LIST
1194: LIST
1195: PUSH
1196: LD_INT 30
1198: PUSH
1199: LD_INT 36
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: PUSH
1206: EMPTY
1207: LIST
1208: LIST
1209: LIST
1210: PUSH
1211: LD_INT 3
1213: PUSH
1214: LD_INT 62
1216: PUSH
1217: EMPTY
1218: LIST
1219: PUSH
1220: EMPTY
1221: LIST
1222: LIST
1223: PUSH
1224: EMPTY
1225: LIST
1226: LIST
1227: LIST
1228: PPUSH
1229: CALL_OW 69
1233: PPUSH
1234: CALL 52216 0 1
1238: ST_TO_ADDR
1239: GO 1301
1241: LD_INT 4
1243: DOUBLE
1244: EQUAL
1245: IFTRUE 1249
1247: GO 1300
1249: POP
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_full ] , [ f_not , [ f_full ] ] ] ) ; end ;
1250: LD_ADDR_VAR 0 4
1254: PUSH
1255: LD_INT 22
1257: PUSH
1258: LD_INT 1
1260: PUSH
1261: EMPTY
1262: LIST
1263: LIST
1264: PUSH
1265: LD_INT 30
1267: PUSH
1268: LD_INT 8
1270: PUSH
1271: EMPTY
1272: LIST
1273: LIST
1274: PUSH
1275: LD_INT 3
1277: PUSH
1278: LD_INT 62
1280: PUSH
1281: EMPTY
1282: LIST
1283: PUSH
1284: EMPTY
1285: LIST
1286: LIST
1287: PUSH
1288: EMPTY
1289: LIST
1290: LIST
1291: LIST
1292: PPUSH
1293: CALL_OW 69
1297: ST_TO_ADDR
1298: GO 1301
1300: POP
// if b then
1301: LD_VAR 0 4
1305: IFFALSE 1367
// begin if GetBType ( b [ 1 ] ) = b_barracks and Prob ( 50 ) then
1307: LD_VAR 0 4
1311: PUSH
1312: LD_INT 1
1314: ARRAY
1315: PPUSH
1316: CALL_OW 266
1320: PUSH
1321: LD_INT 5
1323: EQUAL
1324: PUSH
1325: LD_INT 50
1327: PPUSH
1328: CALL_OW 13
1332: AND
1333: IFFALSE 1347
// SetClass ( un , class_sniper ) ;
1335: LD_VAR 0 5
1339: PPUSH
1340: LD_INT 5
1342: PPUSH
1343: CALL_OW 336
// PlaceHumanInUnit ( un , b [ 1 ] ) ;
1347: LD_VAR 0 5
1351: PPUSH
1352: LD_VAR 0 4
1356: PUSH
1357: LD_INT 1
1359: ARRAY
1360: PPUSH
1361: CALL_OW 52
// end else
1365: GO 1388
// PlaceUnitXYR ( un , 92 , 137 , 4 , false ) ;
1367: LD_VAR 0 5
1371: PPUSH
1372: LD_INT 92
1374: PPUSH
1375: LD_INT 137
1377: PPUSH
1378: LD_INT 4
1380: PPUSH
1381: LD_INT 0
1383: PPUSH
1384: CALL_OW 50
// end ;
1388: GO 990
1390: POP
1391: POP
1392: GO 869
1394: POP
1395: POP
// patrolSpawnArea := [ patrol1aArea , patrol2aArea , patrol3aArea ] ;
1396: LD_ADDR_VAR 0 8
1400: PUSH
1401: LD_INT 30
1403: PUSH
1404: LD_INT 32
1406: PUSH
1407: LD_INT 36
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: LIST
1414: ST_TO_ADDR
// for i := 1 to patrolSpawnArea do
1415: LD_ADDR_VAR 0 2
1419: PUSH
1420: DOUBLE
1421: LD_INT 1
1423: DEC
1424: ST_TO_ADDR
1425: LD_VAR 0 8
1429: PUSH
1430: FOR_TO
1431: IFFALSE 1600
// begin for j := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
1433: LD_ADDR_VAR 0 3
1437: PUSH
1438: DOUBLE
1439: LD_INT 1
1441: DEC
1442: ST_TO_ADDR
1443: LD_INT 1
1445: PUSH
1446: LD_INT 2
1448: PUSH
1449: LD_INT 2
1451: PUSH
1452: LD_INT 3
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: LIST
1459: LIST
1460: PUSH
1461: LD_OWVAR 67
1465: ARRAY
1466: PUSH
1467: FOR_TO
1468: IFFALSE 1596
// begin PrepareSoldier ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
1470: LD_INT 0
1472: PPUSH
1473: LD_INT 7
1475: PUSH
1476: LD_INT 8
1478: PUSH
1479: LD_INT 9
1481: PUSH
1482: LD_INT 10
1484: PUSH
1485: EMPTY
1486: LIST
1487: LIST
1488: LIST
1489: LIST
1490: PUSH
1491: LD_OWVAR 67
1495: ARRAY
1496: PPUSH
1497: CALL_OW 381
// un := CreateHuman ;
1501: LD_ADDR_VAR 0 5
1505: PUSH
1506: CALL_OW 44
1510: ST_TO_ADDR
// if j mod 2 = 0 then
1511: LD_VAR 0 3
1515: PUSH
1516: LD_INT 2
1518: MOD
1519: PUSH
1520: LD_INT 0
1522: EQUAL
1523: IFFALSE 1537
// SetClass ( un , class_sniper ) ;
1525: LD_VAR 0 5
1529: PPUSH
1530: LD_INT 5
1532: PPUSH
1533: CALL_OW 336
// amPatrol := Join ( amPatrol , un ) ;
1537: LD_ADDR_EXP 34
1541: PUSH
1542: LD_EXP 34
1546: PPUSH
1547: LD_VAR 0 5
1551: PPUSH
1552: CALL 56940 0 2
1556: ST_TO_ADDR
// PlaceUnitArea ( un , patrolSpawnArea [ i ] , false ) ;
1557: LD_VAR 0 5
1561: PPUSH
1562: LD_VAR 0 8
1566: PUSH
1567: LD_VAR 0 2
1571: ARRAY
1572: PPUSH
1573: LD_INT 0
1575: PPUSH
1576: CALL_OW 49
// SetTag ( un , i ) ;
1580: LD_VAR 0 5
1584: PPUSH
1585: LD_VAR 0 2
1589: PPUSH
1590: CALL_OW 109
// end ;
1594: GO 1467
1596: POP
1597: POP
// end ;
1598: GO 1430
1600: POP
1601: POP
// end ;
1602: LD_VAR 0 1
1606: RET
// every 0 0$2 trigger amScriptActive and Count ( amForces ) do var i , tmp , remote , undone , side , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
1607: LD_EXP 3
1611: PUSH
1612: LD_EXP 26
1616: PPUSH
1617: CALL 21340 0 1
1621: AND
1622: IFFALSE 3990
1624: GO 1626
1626: DISABLE
1627: LD_INT 0
1629: PPUSH
1630: PPUSH
1631: PPUSH
1632: PPUSH
1633: PPUSH
1634: PPUSH
1635: PPUSH
1636: PPUSH
1637: PPUSH
1638: PPUSH
1639: PPUSH
1640: PPUSH
1641: PPUSH
1642: PPUSH
1643: PPUSH
1644: PPUSH
1645: PPUSH
1646: PPUSH
// begin enable ;
1647: ENABLE
// side := 1 ;
1648: LD_ADDR_VAR 0 5
1652: PUSH
1653: LD_INT 1
1655: ST_TO_ADDR
// remote := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
1656: LD_ADDR_VAR 0 3
1660: PUSH
1661: LD_INT 22
1663: PUSH
1664: LD_VAR 0 5
1668: PUSH
1669: EMPTY
1670: LIST
1671: LIST
1672: PUSH
1673: LD_INT 33
1675: PUSH
1676: LD_INT 2
1678: PUSH
1679: EMPTY
1680: LIST
1681: LIST
1682: PUSH
1683: LD_INT 50
1685: PUSH
1686: EMPTY
1687: LIST
1688: PUSH
1689: LD_INT 3
1691: PUSH
1692: LD_INT 61
1694: PUSH
1695: EMPTY
1696: LIST
1697: PUSH
1698: EMPTY
1699: LIST
1700: LIST
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: LIST
1706: LIST
1707: PPUSH
1708: CALL_OW 69
1712: ST_TO_ADDR
// if remote and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_btype , b_control_tower ] ] ) ) then
1713: LD_VAR 0 3
1717: PUSH
1718: LD_INT 22
1720: PUSH
1721: LD_VAR 0 5
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: PUSH
1730: LD_INT 50
1732: PUSH
1733: EMPTY
1734: LIST
1735: PUSH
1736: LD_INT 30
1738: PUSH
1739: LD_INT 36
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: PUSH
1746: EMPTY
1747: LIST
1748: LIST
1749: LIST
1750: PPUSH
1751: CALL_OW 69
1755: PPUSH
1756: CALL 21340 0 1
1760: AND
1761: IFFALSE 1789
// for i in remote do
1763: LD_ADDR_VAR 0 1
1767: PUSH
1768: LD_VAR 0 3
1772: PUSH
1773: FOR_IN
1774: IFFALSE 1787
// Connect ( i ) ;
1776: LD_VAR 0 1
1780: PPUSH
1781: CALL 27546 0 1
1785: GO 1773
1787: POP
1788: POP
// if amTech then
1789: LD_EXP 27
1793: IFFALSE 1949
// begin lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1795: LD_ADDR_VAR 0 6
1799: PUSH
1800: LD_INT 22
1802: PUSH
1803: LD_VAR 0 5
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: PUSH
1812: LD_INT 50
1814: PUSH
1815: EMPTY
1816: LIST
1817: PUSH
1818: LD_INT 2
1820: PUSH
1821: LD_INT 30
1823: PUSH
1824: LD_INT 6
1826: PUSH
1827: EMPTY
1828: LIST
1829: LIST
1830: PUSH
1831: LD_INT 30
1833: PUSH
1834: LD_INT 7
1836: PUSH
1837: EMPTY
1838: LIST
1839: LIST
1840: PUSH
1841: LD_INT 30
1843: PUSH
1844: LD_INT 8
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: PUSH
1857: EMPTY
1858: LIST
1859: LIST
1860: LIST
1861: PPUSH
1862: CALL_OW 69
1866: ST_TO_ADDR
// if lab then
1867: LD_VAR 0 6
1871: IFFALSE 1949
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
1873: LD_VAR 0 6
1877: PUSH
1878: LD_INT 1
1880: ARRAY
1881: PPUSH
1882: CALL_OW 461
1886: PUSH
1887: LD_INT 2
1889: EQUAL
1890: IFFALSE 1949
// begin for i in amTech do
1892: LD_ADDR_VAR 0 1
1896: PUSH
1897: LD_EXP 27
1901: PUSH
1902: FOR_IN
1903: IFFALSE 1947
// if CanBeResearched ( lab [ 1 ] , i ) then
1905: LD_VAR 0 6
1909: PUSH
1910: LD_INT 1
1912: ARRAY
1913: PPUSH
1914: LD_VAR 0 1
1918: PPUSH
1919: CALL_OW 430
1923: IFFALSE 1945
// begin ComResearch ( lab [ 1 ] , i ) ;
1925: LD_VAR 0 6
1929: PUSH
1930: LD_INT 1
1932: ARRAY
1933: PPUSH
1934: LD_VAR 0 1
1938: PPUSH
1939: CALL_OW 124
// break ;
1943: GO 1947
// end ;
1945: GO 1902
1947: POP
1948: POP
// end ; end ; end ; fac := FilterUnitsInArea ( amBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
1949: LD_ADDR_VAR 0 16
1953: PUSH
1954: LD_INT 1
1956: PPUSH
1957: LD_INT 22
1959: PUSH
1960: LD_VAR 0 5
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: PUSH
1969: LD_INT 30
1971: PUSH
1972: LD_INT 3
1974: PUSH
1975: EMPTY
1976: LIST
1977: LIST
1978: PUSH
1979: LD_INT 50
1981: PUSH
1982: EMPTY
1983: LIST
1984: PUSH
1985: EMPTY
1986: LIST
1987: LIST
1988: LIST
1989: PPUSH
1990: CALL_OW 70
1994: ST_TO_ADDR
// if fac then
1995: LD_VAR 0 16
1999: IFFALSE 2265
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
2001: LD_VAR 0 16
2005: PUSH
2006: LD_INT 1
2008: ARRAY
2009: PPUSH
2010: CALL_OW 461
2014: PUSH
2015: LD_INT 2
2017: EQUAL
2018: IFFALSE 2265
// begin emptyTowers := FilterUnitsInArea ( amBaseArea , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
2020: LD_ADDR_VAR 0 17
2024: PUSH
2025: LD_INT 1
2027: PPUSH
2028: LD_INT 2
2030: PUSH
2031: LD_INT 30
2033: PUSH
2034: LD_INT 32
2036: PUSH
2037: EMPTY
2038: LIST
2039: LIST
2040: PUSH
2041: LD_INT 30
2043: PUSH
2044: LD_INT 33
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: EMPTY
2052: LIST
2053: LIST
2054: LIST
2055: PUSH
2056: LD_INT 35
2058: PUSH
2059: LD_INT 0
2061: PUSH
2062: EMPTY
2063: LIST
2064: LIST
2065: PUSH
2066: EMPTY
2067: LIST
2068: LIST
2069: PPUSH
2070: CALL_OW 70
2074: ST_TO_ADDR
// if emptyTowers then
2075: LD_VAR 0 17
2079: IFFALSE 2127
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , amBaseArea ) ;
2081: LD_ADDR_VAR 0 18
2085: PUSH
2086: LD_VAR 0 17
2090: PUSH
2091: LD_INT 1
2093: ARRAY
2094: PPUSH
2095: LD_INT 1
2097: PPUSH
2098: CALL 29585 0 2
2102: ST_TO_ADDR
// if weapon then
2103: LD_VAR 0 18
2107: IFFALSE 2127
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
2109: LD_VAR 0 17
2113: PUSH
2114: LD_INT 1
2116: ARRAY
2117: PPUSH
2118: LD_VAR 0 18
2122: PPUSH
2123: CALL_OW 148
// end ; if amConstructList then
2127: LD_EXP 28
2131: IFFALSE 2265
// if CanBeConstructed ( fac [ 1 ] , amConstructList [ 1 ] [ 1 ] , amConstructList [ 1 ] [ 2 ] , amConstructList [ 1 ] [ 3 ] , amConstructList [ 1 ] [ 4 ] ) then
2133: LD_VAR 0 16
2137: PUSH
2138: LD_INT 1
2140: ARRAY
2141: PPUSH
2142: LD_EXP 28
2146: PUSH
2147: LD_INT 1
2149: ARRAY
2150: PUSH
2151: LD_INT 1
2153: ARRAY
2154: PPUSH
2155: LD_EXP 28
2159: PUSH
2160: LD_INT 1
2162: ARRAY
2163: PUSH
2164: LD_INT 2
2166: ARRAY
2167: PPUSH
2168: LD_EXP 28
2172: PUSH
2173: LD_INT 1
2175: ARRAY
2176: PUSH
2177: LD_INT 3
2179: ARRAY
2180: PPUSH
2181: LD_EXP 28
2185: PUSH
2186: LD_INT 1
2188: ARRAY
2189: PUSH
2190: LD_INT 4
2192: ARRAY
2193: PPUSH
2194: CALL_OW 448
2198: IFFALSE 2265
// ComConstruct ( fac [ 1 ] , amConstructList [ 1 ] [ 1 ] , amConstructList [ 1 ] [ 2 ] , amConstructList [ 1 ] [ 3 ] , amConstructList [ 1 ] [ 4 ] ) ;
2200: LD_VAR 0 16
2204: PUSH
2205: LD_INT 1
2207: ARRAY
2208: PPUSH
2209: LD_EXP 28
2213: PUSH
2214: LD_INT 1
2216: ARRAY
2217: PUSH
2218: LD_INT 1
2220: ARRAY
2221: PPUSH
2222: LD_EXP 28
2226: PUSH
2227: LD_INT 1
2229: ARRAY
2230: PUSH
2231: LD_INT 2
2233: ARRAY
2234: PPUSH
2235: LD_EXP 28
2239: PUSH
2240: LD_INT 1
2242: ARRAY
2243: PUSH
2244: LD_INT 3
2246: ARRAY
2247: PPUSH
2248: LD_EXP 28
2252: PUSH
2253: LD_INT 1
2255: ARRAY
2256: PUSH
2257: LD_INT 4
2259: ARRAY
2260: PPUSH
2261: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( amBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2265: LD_ADDR_VAR 0 2
2269: PUSH
2270: LD_INT 1
2272: PPUSH
2273: LD_INT 21
2275: PUSH
2276: LD_INT 3
2278: PUSH
2279: EMPTY
2280: LIST
2281: LIST
2282: PUSH
2283: LD_INT 3
2285: PUSH
2286: LD_INT 57
2288: PUSH
2289: EMPTY
2290: LIST
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: PUSH
2296: LD_INT 3
2298: PUSH
2299: LD_INT 24
2301: PUSH
2302: LD_INT 1000
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: PUSH
2313: EMPTY
2314: LIST
2315: LIST
2316: LIST
2317: PPUSH
2318: CALL_OW 70
2322: ST_TO_ADDR
// cr := GetListOfCratesInArea ( amCratesArea ) ;
2323: LD_ADDR_VAR 0 10
2327: PUSH
2328: LD_INT 13
2330: PPUSH
2331: CALL_OW 435
2335: ST_TO_ADDR
// sci := UnitFilter ( amForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
2336: LD_ADDR_VAR 0 11
2340: PUSH
2341: LD_EXP 26
2345: PPUSH
2346: LD_INT 25
2348: PUSH
2349: LD_INT 4
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: PUSH
2356: LD_INT 50
2358: PUSH
2359: EMPTY
2360: LIST
2361: PUSH
2362: EMPTY
2363: LIST
2364: LIST
2365: PPUSH
2366: CALL_OW 72
2370: ST_TO_ADDR
// lab := FilterUnitsInArea ( amBaseArea , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
2371: LD_ADDR_VAR 0 6
2375: PUSH
2376: LD_INT 1
2378: PPUSH
2379: LD_INT 2
2381: PUSH
2382: LD_INT 30
2384: PUSH
2385: LD_INT 6
2387: PUSH
2388: EMPTY
2389: LIST
2390: LIST
2391: PUSH
2392: LD_INT 30
2394: PUSH
2395: LD_INT 7
2397: PUSH
2398: EMPTY
2399: LIST
2400: LIST
2401: PUSH
2402: LD_INT 30
2404: PUSH
2405: LD_INT 8
2407: PUSH
2408: EMPTY
2409: LIST
2410: LIST
2411: PUSH
2412: EMPTY
2413: LIST
2414: LIST
2415: LIST
2416: LIST
2417: PPUSH
2418: CALL_OW 70
2422: ST_TO_ADDR
// if sci then
2423: LD_VAR 0 11
2427: IFFALSE 2586
// begin hurtUnits := UnitFilter ( amForces , [ [ f_inarea , amBaseArea ] , [ f_tag , tHeal ] ] ) ;
2429: LD_ADDR_VAR 0 13
2433: PUSH
2434: LD_EXP 26
2438: PPUSH
2439: LD_INT 95
2441: PUSH
2442: LD_INT 1
2444: PUSH
2445: EMPTY
2446: LIST
2447: LIST
2448: PUSH
2449: LD_INT 120
2451: PUSH
2452: LD_INT 1
2454: PUSH
2455: EMPTY
2456: LIST
2457: LIST
2458: PUSH
2459: EMPTY
2460: LIST
2461: LIST
2462: PPUSH
2463: CALL_OW 72
2467: ST_TO_ADDR
// if hurtUnits then
2468: LD_VAR 0 13
2472: IFFALSE 2533
// begin for i in sci do
2474: LD_ADDR_VAR 0 1
2478: PUSH
2479: LD_VAR 0 11
2483: PUSH
2484: FOR_IN
2485: IFFALSE 2529
// if IsInUnit ( i ) then
2487: LD_VAR 0 1
2491: PPUSH
2492: CALL_OW 310
2496: IFFALSE 2509
// ComExitBuilding ( i ) else
2498: LD_VAR 0 1
2502: PPUSH
2503: CALL_OW 122
2507: GO 2527
// ComHeal ( i , hurtUnits [ 1 ] ) ;
2509: LD_VAR 0 1
2513: PPUSH
2514: LD_VAR 0 13
2518: PUSH
2519: LD_INT 1
2521: ARRAY
2522: PPUSH
2523: CALL_OW 128
2527: GO 2484
2529: POP
2530: POP
// end else
2531: GO 2586
// if lab then
2533: LD_VAR 0 6
2537: IFFALSE 2586
// begin for i in sci do
2539: LD_ADDR_VAR 0 1
2543: PUSH
2544: LD_VAR 0 11
2548: PUSH
2549: FOR_IN
2550: IFFALSE 2584
// if not IsInUnit ( i ) then
2552: LD_VAR 0 1
2556: PPUSH
2557: CALL_OW 310
2561: NOT
2562: IFFALSE 2582
// ComEnterUnit ( i , lab [ 1 ] ) ;
2564: LD_VAR 0 1
2568: PPUSH
2569: LD_VAR 0 6
2573: PUSH
2574: LD_INT 1
2576: ARRAY
2577: PPUSH
2578: CALL_OW 120
2582: GO 2549
2584: POP
2585: POP
// end ; end ; eng := UnitFilter ( amForces , [ f_class , 2 ] ) ;
2586: LD_ADDR_VAR 0 7
2590: PUSH
2591: LD_EXP 26
2595: PPUSH
2596: LD_INT 25
2598: PUSH
2599: LD_INT 2
2601: PUSH
2602: EMPTY
2603: LIST
2604: LIST
2605: PPUSH
2606: CALL_OW 72
2610: ST_TO_ADDR
// if eng then
2611: LD_VAR 0 7
2615: IFFALSE 3390
// begin for i in eng do
2617: LD_ADDR_VAR 0 1
2621: PUSH
2622: LD_VAR 0 7
2626: PUSH
2627: FOR_IN
2628: IFFALSE 3388
// begin tag := GetTag ( i ) ;
2630: LD_ADDR_VAR 0 8
2634: PUSH
2635: LD_VAR 0 1
2639: PPUSH
2640: CALL_OW 110
2644: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
2645: LD_VAR 0 1
2649: PPUSH
2650: CALL_OW 256
2654: PUSH
2655: LD_INT 800
2657: LESS
2658: PUSH
2659: LD_VAR 0 8
2663: PUSH
2664: LD_INT 1
2666: NONEQUAL
2667: AND
2668: IFFALSE 2718
// begin SetTag ( i , tHeal ) ;
2670: LD_VAR 0 1
2674: PPUSH
2675: LD_INT 1
2677: PPUSH
2678: CALL_OW 109
// ComMoveXY ( i , amHealPoint [ 1 ] , amHealPoint [ 2 ] ) ;
2682: LD_VAR 0 1
2686: PPUSH
2687: LD_EXP 29
2691: PUSH
2692: LD_INT 1
2694: ARRAY
2695: PPUSH
2696: LD_EXP 29
2700: PUSH
2701: LD_INT 2
2703: ARRAY
2704: PPUSH
2705: CALL_OW 111
// AddComHold ( i ) ;
2709: LD_VAR 0 1
2713: PPUSH
2714: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
2718: LD_VAR 0 8
2722: PUSH
2723: LD_INT 1
2725: EQUAL
2726: PUSH
2727: LD_VAR 0 1
2731: PPUSH
2732: CALL_OW 256
2736: PUSH
2737: LD_INT 1000
2739: EQUAL
2740: AND
2741: IFFALSE 2755
// SetTag ( i , 0 ) ;
2743: LD_VAR 0 1
2747: PPUSH
2748: LD_INT 0
2750: PPUSH
2751: CALL_OW 109
// if not tag then
2755: LD_VAR 0 8
2759: NOT
2760: IFFALSE 2928
// begin undone := FilterUnitsInArea ( amBaseArea , [ f_constructed ] ) ;
2762: LD_ADDR_VAR 0 4
2766: PUSH
2767: LD_INT 1
2769: PPUSH
2770: LD_INT 57
2772: PUSH
2773: EMPTY
2774: LIST
2775: PPUSH
2776: CALL_OW 70
2780: ST_TO_ADDR
// if undone then
2781: LD_VAR 0 4
2785: IFFALSE 2807
// begin ComComplete ( i , undone [ 1 ] ) ;
2787: LD_VAR 0 1
2791: PPUSH
2792: LD_VAR 0 4
2796: PUSH
2797: LD_INT 1
2799: ARRAY
2800: PPUSH
2801: CALL 27438 0 2
// continue ;
2805: GO 2627
// end ; if cr or tmp or Count ( amBuildings ) then
2807: LD_VAR 0 10
2811: PUSH
2812: LD_VAR 0 2
2816: OR
2817: PUSH
2818: LD_EXP 30
2822: PPUSH
2823: CALL 21340 0 1
2827: OR
2828: IFFALSE 2904
// begin if IsInUnit ( i ) then
2830: LD_VAR 0 1
2834: PPUSH
2835: CALL_OW 310
2839: IFFALSE 2850
// ComExitBuilding ( i ) ;
2841: LD_VAR 0 1
2845: PPUSH
2846: CALL_OW 122
// if tmp then
2850: LD_VAR 0 2
2854: IFFALSE 2870
// SetTag ( i , tRepair ) else
2856: LD_VAR 0 1
2860: PPUSH
2861: LD_INT 3
2863: PPUSH
2864: CALL_OW 109
2868: GO 2902
// if cr then
2870: LD_VAR 0 10
2874: IFFALSE 2890
// SetTag ( i , tCrates ) else
2876: LD_VAR 0 1
2880: PPUSH
2881: LD_INT 2
2883: PPUSH
2884: CALL_OW 109
2888: GO 2902
// SetTag ( i , tBuild ) ;
2890: LD_VAR 0 1
2894: PPUSH
2895: LD_INT 5
2897: PPUSH
2898: CALL_OW 109
// end else
2902: GO 2928
// if not IsInUnit ( i ) then
2904: LD_VAR 0 1
2908: PPUSH
2909: CALL_OW 310
2913: NOT
2914: IFFALSE 2928
// ComEnterUnit ( i , amBase ) ;
2916: LD_VAR 0 1
2920: PPUSH
2921: LD_INT 2
2923: PPUSH
2924: CALL_OW 120
// end ; if tag = tRepair then
2928: LD_VAR 0 8
2932: PUSH
2933: LD_INT 3
2935: EQUAL
2936: IFFALSE 3038
// begin if IsInUnit ( i ) then
2938: LD_VAR 0 1
2942: PPUSH
2943: CALL_OW 310
2947: IFFALSE 2960
// begin ComExitBuilding ( i ) ;
2949: LD_VAR 0 1
2953: PPUSH
2954: CALL_OW 122
// continue ;
2958: GO 2627
// end ; if not tmp then
2960: LD_VAR 0 2
2964: NOT
2965: IFFALSE 2981
// begin SetTag ( i , 0 ) ;
2967: LD_VAR 0 1
2971: PPUSH
2972: LD_INT 0
2974: PPUSH
2975: CALL_OW 109
// continue ;
2979: GO 2627
// end ; if not HasTask ( i ) then
2981: LD_VAR 0 1
2985: PPUSH
2986: CALL_OW 314
2990: NOT
2991: IFFALSE 3011
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
2993: LD_VAR 0 1
2997: PPUSH
2998: LD_VAR 0 2
3002: PUSH
3003: LD_INT 1
3005: ARRAY
3006: PPUSH
3007: CALL_OW 130
// if not IsInArea ( i , amBaseArea ) then
3011: LD_VAR 0 1
3015: PPUSH
3016: LD_INT 1
3018: PPUSH
3019: CALL_OW 308
3023: NOT
3024: IFFALSE 3038
// ComMoveToArea ( i , amBaseArea ) ;
3026: LD_VAR 0 1
3030: PPUSH
3031: LD_INT 1
3033: PPUSH
3034: CALL_OW 113
// end ; if tag = tBuild then
3038: LD_VAR 0 8
3042: PUSH
3043: LD_INT 5
3045: EQUAL
3046: IFFALSE 3241
// begin if IsInUnit ( i ) then
3048: LD_VAR 0 1
3052: PPUSH
3053: CALL_OW 310
3057: IFFALSE 3070
// begin ComExitBuilding ( i ) ;
3059: LD_VAR 0 1
3063: PPUSH
3064: CALL_OW 122
// continue ;
3068: GO 2627
// end ; if not Count ( amBuildings ) then
3070: LD_EXP 30
3074: PPUSH
3075: CALL 21340 0 1
3079: NOT
3080: IFFALSE 3098
// begin SetTag ( i , 0 ) ;
3082: LD_VAR 0 1
3086: PPUSH
3087: LD_INT 0
3089: PPUSH
3090: CALL_OW 109
// continue ;
3094: GO 2627
// end else
3096: GO 3135
// if not CanBeBuiltOnlyResources ( amBase , amBuildings [ 1 ] [ 1 ] ) then
3098: LD_INT 2
3100: PPUSH
3101: LD_EXP 30
3105: PUSH
3106: LD_INT 1
3108: ARRAY
3109: PUSH
3110: LD_INT 1
3112: ARRAY
3113: PPUSH
3114: CALL 10104 0 2
3118: NOT
3119: IFFALSE 3135
// begin SetTag ( i , 0 ) ;
3121: LD_VAR 0 1
3125: PPUSH
3126: LD_INT 0
3128: PPUSH
3129: CALL_OW 109
// continue ;
3133: GO 2627
// end ; undone := FilterUnitsInArea ( amBaseArea , [ f_constructed ] ) ;
3135: LD_ADDR_VAR 0 4
3139: PUSH
3140: LD_INT 1
3142: PPUSH
3143: LD_INT 57
3145: PUSH
3146: EMPTY
3147: LIST
3148: PPUSH
3149: CALL_OW 70
3153: ST_TO_ADDR
// if undone then
3154: LD_VAR 0 4
3158: IFFALSE 3180
// begin ComComplete ( i , undone [ 1 ] ) ;
3160: LD_VAR 0 1
3164: PPUSH
3165: LD_VAR 0 4
3169: PUSH
3170: LD_INT 1
3172: ARRAY
3173: PPUSH
3174: CALL 27438 0 2
// continue ;
3178: GO 2627
// end ; ComBuild ( i , amBuildings [ 1 ] [ 1 ] , amBuildings [ 1 ] [ 2 ] , amBuildings [ 1 ] [ 3 ] , amBuildings [ 1 ] [ 4 ] ) ;
3180: LD_VAR 0 1
3184: PPUSH
3185: LD_EXP 30
3189: PUSH
3190: LD_INT 1
3192: ARRAY
3193: PUSH
3194: LD_INT 1
3196: ARRAY
3197: PPUSH
3198: LD_EXP 30
3202: PUSH
3203: LD_INT 1
3205: ARRAY
3206: PUSH
3207: LD_INT 2
3209: ARRAY
3210: PPUSH
3211: LD_EXP 30
3215: PUSH
3216: LD_INT 1
3218: ARRAY
3219: PUSH
3220: LD_INT 3
3222: ARRAY
3223: PPUSH
3224: LD_EXP 30
3228: PUSH
3229: LD_INT 1
3231: ARRAY
3232: PUSH
3233: LD_INT 4
3235: ARRAY
3236: PPUSH
3237: CALL_OW 145
// end ; if tag = tCrates then
3241: LD_VAR 0 8
3245: PUSH
3246: LD_INT 2
3248: EQUAL
3249: IFFALSE 3386
// begin if IsInUnit ( i ) then
3251: LD_VAR 0 1
3255: PPUSH
3256: CALL_OW 310
3260: IFFALSE 3273
// begin ComExitBuilding ( i ) ;
3262: LD_VAR 0 1
3266: PPUSH
3267: CALL_OW 122
// continue ;
3271: GO 2627
// end ; if not cr then
3273: LD_VAR 0 10
3277: NOT
3278: IFFALSE 3294
// begin SetTag ( i , 0 ) ;
3280: LD_VAR 0 1
3284: PPUSH
3285: LD_INT 0
3287: PPUSH
3288: CALL_OW 109
// continue ;
3292: GO 2627
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
3294: LD_VAR 0 1
3298: PPUSH
3299: CALL_OW 314
3303: NOT
3304: PUSH
3305: LD_INT 81
3307: PUSH
3308: LD_VAR 0 5
3312: PUSH
3313: EMPTY
3314: LIST
3315: LIST
3316: PUSH
3317: LD_INT 92
3319: PUSH
3320: LD_VAR 0 10
3324: PUSH
3325: LD_INT 1
3327: ARRAY
3328: PUSH
3329: LD_VAR 0 10
3333: PUSH
3334: LD_INT 2
3336: ARRAY
3337: PUSH
3338: LD_INT 12
3340: PUSH
3341: EMPTY
3342: LIST
3343: LIST
3344: LIST
3345: LIST
3346: PUSH
3347: EMPTY
3348: LIST
3349: LIST
3350: PPUSH
3351: CALL_OW 69
3355: NOT
3356: AND
3357: IFFALSE 3386
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
3359: LD_VAR 0 1
3363: PPUSH
3364: LD_VAR 0 10
3368: PUSH
3369: LD_INT 1
3371: ARRAY
3372: PPUSH
3373: LD_VAR 0 10
3377: PUSH
3378: LD_INT 2
3380: ARRAY
3381: PPUSH
3382: CALL_OW 117
// end ; end ;
3386: GO 2627
3388: POP
3389: POP
// end ; sol := UnitFilter ( amForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] ] , [ f_ok ] ] ) union amCommander ;
3390: LD_ADDR_VAR 0 12
3394: PUSH
3395: LD_EXP 26
3399: PPUSH
3400: LD_INT 2
3402: PUSH
3403: LD_INT 25
3405: PUSH
3406: LD_INT 1
3408: PUSH
3409: EMPTY
3410: LIST
3411: LIST
3412: PUSH
3413: LD_INT 25
3415: PUSH
3416: LD_INT 5
3418: PUSH
3419: EMPTY
3420: LIST
3421: LIST
3422: PUSH
3423: EMPTY
3424: LIST
3425: LIST
3426: LIST
3427: PUSH
3428: LD_INT 50
3430: PUSH
3431: EMPTY
3432: LIST
3433: PUSH
3434: EMPTY
3435: LIST
3436: LIST
3437: PPUSH
3438: CALL_OW 72
3442: PUSH
3443: LD_EXP 32
3447: UNION
3448: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( amBaseArea , [ f_enemy , side ] ) ;
3449: LD_ADDR_VAR 0 14
3453: PUSH
3454: LD_INT 1
3456: PPUSH
3457: LD_INT 81
3459: PUSH
3460: LD_VAR 0 5
3464: PUSH
3465: EMPTY
3466: LIST
3467: LIST
3468: PPUSH
3469: CALL_OW 70
3473: ST_TO_ADDR
// if sol then
3474: LD_VAR 0 12
3478: IFFALSE 3990
// begin if enemyInBase then
3480: LD_VAR 0 14
3484: IFFALSE 3629
// begin for i in sol do
3486: LD_ADDR_VAR 0 1
3490: PUSH
3491: LD_VAR 0 12
3495: PUSH
3496: FOR_IN
3497: IFFALSE 3625
// begin tw := IsInUnit ( i ) ;
3499: LD_ADDR_VAR 0 9
3503: PUSH
3504: LD_VAR 0 1
3508: PPUSH
3509: CALL_OW 310
3513: ST_TO_ADDR
// if tw then
3514: LD_VAR 0 9
3518: IFFALSE 3599
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
3520: LD_VAR 0 9
3524: PUSH
3525: LD_INT 22
3527: PUSH
3528: LD_VAR 0 5
3532: PUSH
3533: EMPTY
3534: LIST
3535: LIST
3536: PUSH
3537: LD_INT 101
3539: PUSH
3540: LD_INT 2
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: PUSH
3547: LD_INT 2
3549: PUSH
3550: LD_INT 30
3552: PUSH
3553: LD_INT 32
3555: PUSH
3556: EMPTY
3557: LIST
3558: LIST
3559: PUSH
3560: LD_INT 30
3562: PUSH
3563: LD_INT 31
3565: PUSH
3566: EMPTY
3567: LIST
3568: LIST
3569: PUSH
3570: EMPTY
3571: LIST
3572: LIST
3573: LIST
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: LIST
3579: PPUSH
3580: CALL_OW 69
3584: IN
3585: NOT
3586: IFFALSE 3597
// ComExitBuilding ( i ) ;
3588: LD_VAR 0 1
3592: PPUSH
3593: CALL_OW 122
// end else
3597: GO 3623
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
3599: LD_VAR 0 1
3603: PPUSH
3604: LD_VAR 0 14
3608: PPUSH
3609: LD_VAR 0 1
3613: PPUSH
3614: CALL_OW 74
3618: PPUSH
3619: CALL_OW 115
// end ;
3623: GO 3496
3625: POP
3626: POP
// end else
3627: GO 3990
// begin empty := FilterUnitsInArea ( amBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
3629: LD_ADDR_VAR 0 15
3633: PUSH
3634: LD_INT 1
3636: PPUSH
3637: LD_INT 3
3639: PUSH
3640: LD_INT 62
3642: PUSH
3643: EMPTY
3644: LIST
3645: PUSH
3646: EMPTY
3647: LIST
3648: LIST
3649: PUSH
3650: LD_INT 2
3652: PUSH
3653: LD_INT 30
3655: PUSH
3656: LD_INT 32
3658: PUSH
3659: EMPTY
3660: LIST
3661: LIST
3662: PUSH
3663: LD_INT 30
3665: PUSH
3666: LD_INT 4
3668: PUSH
3669: EMPTY
3670: LIST
3671: LIST
3672: PUSH
3673: LD_INT 30
3675: PUSH
3676: LD_INT 5
3678: PUSH
3679: EMPTY
3680: LIST
3681: LIST
3682: PUSH
3683: LD_INT 30
3685: PUSH
3686: LD_INT 31
3688: PUSH
3689: EMPTY
3690: LIST
3691: LIST
3692: PUSH
3693: EMPTY
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: LIST
3699: PUSH
3700: EMPTY
3701: LIST
3702: LIST
3703: PPUSH
3704: CALL_OW 70
3708: ST_TO_ADDR
// if empty then
3709: LD_VAR 0 15
3713: IFFALSE 3730
// empty := ReverseArray ( empty ) ;
3715: LD_ADDR_VAR 0 15
3719: PUSH
3720: LD_VAR 0 15
3724: PPUSH
3725: CALL 52216 0 1
3729: ST_TO_ADDR
// for i in sol do
3730: LD_ADDR_VAR 0 1
3734: PUSH
3735: LD_VAR 0 12
3739: PUSH
3740: FOR_IN
3741: IFFALSE 3988
// begin tag := GetTag ( i ) ;
3743: LD_ADDR_VAR 0 8
3747: PUSH
3748: LD_VAR 0 1
3752: PPUSH
3753: CALL_OW 110
3757: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
3758: LD_VAR 0 1
3762: PPUSH
3763: CALL_OW 256
3767: PUSH
3768: LD_INT 1000
3770: LESS
3771: PUSH
3772: LD_VAR 0 8
3776: PUSH
3777: LD_INT 1
3779: NONEQUAL
3780: AND
3781: IFFALSE 3833
// begin SetTag ( i , tHeal ) ;
3783: LD_VAR 0 1
3787: PPUSH
3788: LD_INT 1
3790: PPUSH
3791: CALL_OW 109
// ComMoveXY ( i , amHealPoint [ 1 ] , amHealPoint [ 2 ] ) ;
3795: LD_VAR 0 1
3799: PPUSH
3800: LD_EXP 29
3804: PUSH
3805: LD_INT 1
3807: ARRAY
3808: PPUSH
3809: LD_EXP 29
3813: PUSH
3814: LD_INT 2
3816: ARRAY
3817: PPUSH
3818: CALL_OW 111
// AddComHold ( i ) ;
3822: LD_VAR 0 1
3826: PPUSH
3827: CALL_OW 200
// continue ;
3831: GO 3740
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
3833: LD_VAR 0 1
3837: PPUSH
3838: CALL_OW 256
3842: PUSH
3843: LD_INT 1000
3845: EQUAL
3846: PUSH
3847: LD_VAR 0 8
3851: PUSH
3852: LD_INT 1
3854: EQUAL
3855: AND
3856: IFFALSE 3872
// begin SetTag ( i , 0 ) ;
3858: LD_VAR 0 1
3862: PPUSH
3863: LD_INT 0
3865: PPUSH
3866: CALL_OW 109
// continue ;
3870: GO 3740
// end ; if HasTask ( i ) then
3872: LD_VAR 0 1
3876: PPUSH
3877: CALL_OW 314
3881: IFFALSE 3885
// continue ;
3883: GO 3740
// if not IsInUnit ( i ) and not tag and empty then
3885: LD_VAR 0 1
3889: PPUSH
3890: CALL_OW 310
3894: NOT
3895: PUSH
3896: LD_VAR 0 8
3900: NOT
3901: AND
3902: PUSH
3903: LD_VAR 0 15
3907: AND
3908: IFFALSE 3986
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
3910: LD_VAR 0 1
3914: PPUSH
3915: LD_VAR 0 15
3919: PUSH
3920: LD_INT 1
3922: ARRAY
3923: PPUSH
3924: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
3928: LD_VAR 0 15
3932: PUSH
3933: LD_INT 1
3935: ARRAY
3936: PPUSH
3937: CALL_OW 266
3941: PUSH
3942: LD_INT 5
3944: EQUAL
3945: PUSH
3946: LD_INT 50
3948: PPUSH
3949: CALL_OW 13
3953: AND
3954: IFFALSE 3968
// AddComChangeProfession ( i , class_sniper ) ;
3956: LD_VAR 0 1
3960: PPUSH
3961: LD_INT 5
3963: PPUSH
3964: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
3968: LD_ADDR_VAR 0 15
3972: PUSH
3973: LD_VAR 0 15
3977: PPUSH
3978: LD_INT 1
3980: PPUSH
3981: CALL_OW 3
3985: ST_TO_ADDR
// end ; end ;
3986: GO 3740
3988: POP
3989: POP
// end ; end ; end ;
3990: PPOPN 18
3992: END
// every 0 0$2 trigger IsOk ( amCargo ) and amScriptActive do var cr , enemyInArea ;
3993: LD_EXP 33
3997: PPUSH
3998: CALL_OW 302
4002: PUSH
4003: LD_EXP 3
4007: AND
4008: IFFALSE 4290
4010: GO 4012
4012: DISABLE
4013: LD_INT 0
4015: PPUSH
4016: PPUSH
// begin enable ;
4017: ENABLE
// enemyInArea := FilterUnitsInArea ( amBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
4018: LD_ADDR_VAR 0 2
4022: PUSH
4023: LD_INT 1
4025: PPUSH
4026: LD_INT 81
4028: PUSH
4029: LD_INT 1
4031: PUSH
4032: EMPTY
4033: LIST
4034: LIST
4035: PUSH
4036: LD_INT 50
4038: PUSH
4039: EMPTY
4040: LIST
4041: PUSH
4042: EMPTY
4043: LIST
4044: LIST
4045: PPUSH
4046: CALL_OW 70
4050: ST_TO_ADDR
// cr := GetListOfCratesInArea ( cratesWestArea ) ;
4051: LD_ADDR_VAR 0 1
4055: PUSH
4056: LD_INT 17
4058: PPUSH
4059: CALL_OW 435
4063: ST_TO_ADDR
// if GetFuel ( amCargo ) < 10 and not See ( 2 , amCargo ) and GetEngine ( amCargo ) = engine_combustion then
4064: LD_EXP 33
4068: PPUSH
4069: CALL_OW 261
4073: PUSH
4074: LD_INT 10
4076: LESS
4077: PUSH
4078: LD_INT 2
4080: PPUSH
4081: LD_EXP 33
4085: PPUSH
4086: CALL_OW 292
4090: NOT
4091: AND
4092: PUSH
4093: LD_EXP 33
4097: PPUSH
4098: CALL_OW 262
4102: PUSH
4103: LD_INT 1
4105: EQUAL
4106: AND
4107: IFFALSE 4121
// SetFuel ( amCargo , 100 ) ;
4109: LD_EXP 33
4113: PPUSH
4114: LD_INT 100
4116: PPUSH
4117: CALL_OW 240
// if not HasTask ( amCargo ) and GetCargo ( amCargo , mat_cans ) < 100 and not enemyInArea then
4121: LD_EXP 33
4125: PPUSH
4126: CALL_OW 314
4130: NOT
4131: PUSH
4132: LD_EXP 33
4136: PPUSH
4137: LD_INT 1
4139: PPUSH
4140: CALL_OW 289
4144: PUSH
4145: LD_INT 100
4147: LESS
4148: AND
4149: PUSH
4150: LD_VAR 0 2
4154: NOT
4155: AND
4156: IFFALSE 4222
// begin if cr then
4158: LD_VAR 0 1
4162: IFFALSE 4193
// ComCollect ( amCargo , cr [ 1 ] , cr [ 2 ] ) else
4164: LD_EXP 33
4168: PPUSH
4169: LD_VAR 0 1
4173: PUSH
4174: LD_INT 1
4176: ARRAY
4177: PPUSH
4178: LD_VAR 0 1
4182: PUSH
4183: LD_INT 2
4185: ARRAY
4186: PPUSH
4187: CALL_OW 117
4191: GO 4220
// if not IsInArea ( amCargo , cratesWestArea ) then
4193: LD_EXP 33
4197: PPUSH
4198: LD_INT 17
4200: PPUSH
4201: CALL_OW 308
4205: NOT
4206: IFFALSE 4220
// ComMoveToArea ( amCargo , cratesWestArea ) ;
4208: LD_EXP 33
4212: PPUSH
4213: LD_INT 17
4215: PPUSH
4216: CALL_OW 113
// exit ;
4220: GO 4290
// end ; if enemyInArea and not IsInArea ( amCargo , amBaseArea ) then
4222: LD_VAR 0 2
4226: PUSH
4227: LD_EXP 33
4231: PPUSH
4232: LD_INT 1
4234: PPUSH
4235: CALL_OW 308
4239: NOT
4240: AND
4241: IFFALSE 4260
// ComMoveXY ( amCargo , 93 , 137 ) else
4243: LD_EXP 33
4247: PPUSH
4248: LD_INT 93
4250: PPUSH
4251: LD_INT 137
4253: PPUSH
4254: CALL_OW 111
4258: GO 4290
// if GetCargo ( amCargo , mat_cans ) = 100 then
4260: LD_EXP 33
4264: PPUSH
4265: LD_INT 1
4267: PPUSH
4268: CALL_OW 289
4272: PUSH
4273: LD_INT 100
4275: EQUAL
4276: IFFALSE 4290
// ComGive ( amCargo , amBase ) ;
4278: LD_EXP 33
4282: PPUSH
4283: LD_INT 2
4285: PPUSH
4286: CALL_OW 161
// end ;
4290: PPOPN 2
4292: END
// every 0 0$2 trigger amScriptActive and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) do var i , tmp , tmp2 ;
4293: LD_EXP 3
4297: PUSH
4298: LD_INT 22
4300: PUSH
4301: LD_INT 1
4303: PUSH
4304: EMPTY
4305: LIST
4306: LIST
4307: PUSH
4308: LD_INT 3
4310: PUSH
4311: LD_INT 60
4313: PUSH
4314: EMPTY
4315: LIST
4316: PUSH
4317: EMPTY
4318: LIST
4319: LIST
4320: PUSH
4321: LD_INT 50
4323: PUSH
4324: EMPTY
4325: LIST
4326: PUSH
4327: LD_INT 34
4329: PUSH
4330: LD_INT 13
4332: PUSH
4333: EMPTY
4334: LIST
4335: LIST
4336: PUSH
4337: EMPTY
4338: LIST
4339: LIST
4340: LIST
4341: LIST
4342: PPUSH
4343: CALL_OW 69
4347: AND
4348: PUSH
4349: LD_INT 22
4351: PUSH
4352: LD_INT 1
4354: PUSH
4355: EMPTY
4356: LIST
4357: LIST
4358: PUSH
4359: LD_INT 3
4361: PUSH
4362: LD_INT 24
4364: PUSH
4365: LD_INT 1000
4367: PUSH
4368: EMPTY
4369: LIST
4370: LIST
4371: PUSH
4372: EMPTY
4373: LIST
4374: LIST
4375: PUSH
4376: LD_INT 21
4378: PUSH
4379: LD_INT 3
4381: PUSH
4382: EMPTY
4383: LIST
4384: LIST
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: LIST
4390: PPUSH
4391: CALL_OW 69
4395: AND
4396: IFFALSE 4629
4398: GO 4400
4400: DISABLE
4401: LD_INT 0
4403: PPUSH
4404: PPUSH
4405: PPUSH
// begin enable ;
4406: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
4407: LD_ADDR_VAR 0 2
4411: PUSH
4412: LD_INT 22
4414: PUSH
4415: LD_INT 1
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: PUSH
4422: LD_INT 3
4424: PUSH
4425: LD_INT 24
4427: PUSH
4428: LD_INT 1000
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: PUSH
4435: EMPTY
4436: LIST
4437: LIST
4438: PUSH
4439: LD_INT 21
4441: PUSH
4442: LD_INT 3
4444: PUSH
4445: EMPTY
4446: LIST
4447: LIST
4448: PUSH
4449: EMPTY
4450: LIST
4451: LIST
4452: LIST
4453: PPUSH
4454: CALL_OW 69
4458: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 600 ] ] , [ f_type , unit_building ] ] ) ;
4459: LD_ADDR_VAR 0 3
4463: PUSH
4464: LD_INT 22
4466: PUSH
4467: LD_INT 1
4469: PUSH
4470: EMPTY
4471: LIST
4472: LIST
4473: PUSH
4474: LD_INT 3
4476: PUSH
4477: LD_INT 24
4479: PUSH
4480: LD_INT 600
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: PUSH
4487: EMPTY
4488: LIST
4489: LIST
4490: PUSH
4491: LD_INT 21
4493: PUSH
4494: LD_INT 3
4496: PUSH
4497: EMPTY
4498: LIST
4499: LIST
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: LIST
4505: PPUSH
4506: CALL_OW 69
4510: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
4511: LD_ADDR_VAR 0 1
4515: PUSH
4516: LD_INT 22
4518: PUSH
4519: LD_INT 1
4521: PUSH
4522: EMPTY
4523: LIST
4524: LIST
4525: PUSH
4526: LD_INT 3
4528: PUSH
4529: LD_INT 60
4531: PUSH
4532: EMPTY
4533: LIST
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: PUSH
4539: LD_INT 50
4541: PUSH
4542: EMPTY
4543: LIST
4544: PUSH
4545: LD_INT 34
4547: PUSH
4548: LD_INT 13
4550: PUSH
4551: EMPTY
4552: LIST
4553: LIST
4554: PUSH
4555: EMPTY
4556: LIST
4557: LIST
4558: LIST
4559: LIST
4560: PPUSH
4561: CALL_OW 69
4565: PUSH
4566: FOR_IN
4567: IFFALSE 4627
// begin if tmp2 then
4569: LD_VAR 0 3
4573: IFFALSE 4601
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp2 , i ) ) else
4575: LD_VAR 0 1
4579: PPUSH
4580: LD_VAR 0 3
4584: PPUSH
4585: LD_VAR 0 1
4589: PPUSH
4590: CALL_OW 74
4594: PPUSH
4595: CALL_OW 130
4599: GO 4625
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
4601: LD_VAR 0 1
4605: PPUSH
4606: LD_VAR 0 2
4610: PPUSH
4611: LD_VAR 0 1
4615: PPUSH
4616: CALL_OW 74
4620: PPUSH
4621: CALL_OW 130
// end ;
4625: GO 4566
4627: POP
4628: POP
// end ;
4629: PPOPN 3
4631: END
// every 0 0$2 trigger amPatrol and gameActive do var i , j , points , x , y , tag , enemy ;
4632: LD_EXP 34
4636: PUSH
4637: LD_EXP 19
4641: AND
4642: IFFALSE 4967
4644: GO 4646
4646: DISABLE
4647: LD_INT 0
4649: PPUSH
4650: PPUSH
4651: PPUSH
4652: PPUSH
4653: PPUSH
4654: PPUSH
4655: PPUSH
// begin enable ;
4656: ENABLE
// points := [ [ patrol1aArea , patrol1bArea ] , [ patrol2aArea , patrol2bArea , patrol2cArea , patrol2dArea , patrol2bArea ] , [ patrol3aArea , patrol3bArea , patrol3cArea , patrol3dArea , patrol3eArea , patrol3fArea , patrol3gArea , patrol3hArea ] ] ;
4657: LD_ADDR_VAR 0 3
4661: PUSH
4662: LD_INT 30
4664: PUSH
4665: LD_INT 31
4667: PUSH
4668: EMPTY
4669: LIST
4670: LIST
4671: PUSH
4672: LD_INT 32
4674: PUSH
4675: LD_INT 33
4677: PUSH
4678: LD_INT 34
4680: PUSH
4681: LD_INT 35
4683: PUSH
4684: LD_INT 33
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: PUSH
4694: LD_INT 36
4696: PUSH
4697: LD_INT 37
4699: PUSH
4700: LD_INT 38
4702: PUSH
4703: LD_INT 39
4705: PUSH
4706: LD_INT 40
4708: PUSH
4709: LD_INT 41
4711: PUSH
4712: LD_INT 42
4714: PUSH
4715: LD_INT 43
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: PUSH
4728: EMPTY
4729: LIST
4730: LIST
4731: LIST
4732: ST_TO_ADDR
// for i in amPatrol do
4733: LD_ADDR_VAR 0 1
4737: PUSH
4738: LD_EXP 34
4742: PUSH
4743: FOR_IN
4744: IFFALSE 4965
// begin if See ( 2 , i ) then
4746: LD_INT 2
4748: PPUSH
4749: LD_VAR 0 1
4753: PPUSH
4754: CALL_OW 292
4758: IFFALSE 4861
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ;
4760: LD_ADDR_VAR 0 7
4764: PUSH
4765: LD_INT 22
4767: PUSH
4768: LD_INT 2
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: PPUSH
4775: CALL_OW 69
4779: PPUSH
4780: LD_VAR 0 1
4784: PPUSH
4785: CALL_OW 74
4789: ST_TO_ADDR
// if enemy then
4790: LD_VAR 0 7
4794: IFFALSE 4861
// begin x := GetX ( enemy ) ;
4796: LD_ADDR_VAR 0 4
4800: PUSH
4801: LD_VAR 0 7
4805: PPUSH
4806: CALL_OW 250
4810: ST_TO_ADDR
// y := GetY ( enemy ) ;
4811: LD_ADDR_VAR 0 5
4815: PUSH
4816: LD_VAR 0 7
4820: PPUSH
4821: CALL_OW 251
4825: ST_TO_ADDR
// if ValidHex ( x , y ) then
4826: LD_VAR 0 4
4830: PPUSH
4831: LD_VAR 0 5
4835: PPUSH
4836: CALL_OW 488
4840: IFFALSE 4861
// ComAgressiveMove ( i , x , y ) ;
4842: LD_VAR 0 1
4846: PPUSH
4847: LD_VAR 0 4
4851: PPUSH
4852: LD_VAR 0 5
4856: PPUSH
4857: CALL_OW 114
// end ; end ; if HasTask ( i ) then
4861: LD_VAR 0 1
4865: PPUSH
4866: CALL_OW 314
4870: IFFALSE 4874
// continue ;
4872: GO 4743
// tag := GetTag ( i ) ;
4874: LD_ADDR_VAR 0 6
4878: PUSH
4879: LD_VAR 0 1
4883: PPUSH
4884: CALL_OW 110
4888: ST_TO_ADDR
// for j := 1 to points [ tag ] do
4889: LD_ADDR_VAR 0 2
4893: PUSH
4894: DOUBLE
4895: LD_INT 1
4897: DEC
4898: ST_TO_ADDR
4899: LD_VAR 0 3
4903: PUSH
4904: LD_VAR 0 6
4908: ARRAY
4909: PUSH
4910: FOR_TO
4911: IFFALSE 4961
// begin AddComMoveToArea ( i , points [ tag ] [ j ] ) ;
4913: LD_VAR 0 1
4917: PPUSH
4918: LD_VAR 0 3
4922: PUSH
4923: LD_VAR 0 6
4927: ARRAY
4928: PUSH
4929: LD_VAR 0 2
4933: ARRAY
4934: PPUSH
4935: CALL_OW 173
// AddComWait ( i , rand ( 0 0$5 , 0 0$11 ) ) ;
4939: LD_VAR 0 1
4943: PPUSH
4944: LD_INT 175
4946: PPUSH
4947: LD_INT 385
4949: PPUSH
4950: CALL_OW 12
4954: PPUSH
4955: CALL_OW 202
// end ;
4959: GO 4910
4961: POP
4962: POP
// end ;
4963: GO 4743
4965: POP
4966: POP
// end ;
4967: PPOPN 7
4969: END
// every 10 10$00 trigger Count ( amTanks ) < 5 and amScriptActive and spotByAmerican do var i , parts , part ;
4970: LD_EXP 31
4974: PPUSH
4975: CALL 21340 0 1
4979: PUSH
4980: LD_INT 5
4982: LESS
4983: PUSH
4984: LD_EXP 3
4988: AND
4989: PUSH
4990: LD_EXP 8
4994: AND
4995: IFFALSE 5189
4997: GO 4999
4999: DISABLE
5000: LD_INT 0
5002: PPUSH
5003: PPUSH
5004: PPUSH
// begin enable ;
5005: ENABLE
// parts := [ [ us_medium_tracked , us_laser ] , [ us_heavy_tracked , us_laser ] , [ us_heavy_tracked , us_heavy_gun ] , [ us_medium_tracked , us_double_gun ] , [ us_medium_wheeled , us_gatling_gun ] , [ us_light_wheeled , us_machine_gun ] ] ;
5006: LD_ADDR_VAR 0 2
5010: PUSH
5011: LD_INT 3
5013: PUSH
5014: LD_INT 9
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: PUSH
5021: LD_INT 4
5023: PUSH
5024: LD_INT 9
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: PUSH
5031: LD_INT 4
5033: PUSH
5034: LD_INT 6
5036: PUSH
5037: EMPTY
5038: LIST
5039: LIST
5040: PUSH
5041: LD_INT 3
5043: PUSH
5044: LD_INT 5
5046: PUSH
5047: EMPTY
5048: LIST
5049: LIST
5050: PUSH
5051: LD_INT 2
5053: PUSH
5054: LD_INT 4
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: PUSH
5061: LD_INT 1
5063: PUSH
5064: LD_INT 2
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: LIST
5078: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
5079: LD_ADDR_VAR 0 1
5083: PUSH
5084: DOUBLE
5085: LD_INT 1
5087: DEC
5088: ST_TO_ADDR
5089: LD_INT 4
5091: PUSH
5092: LD_INT 5
5094: PUSH
5095: LD_INT 6
5097: PUSH
5098: LD_INT 6
5100: PUSH
5101: EMPTY
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: PUSH
5107: LD_OWVAR 67
5111: ARRAY
5112: PUSH
5113: FOR_TO
5114: IFFALSE 5187
// begin part := parts [ rand ( 1 , parts ) ] ;
5116: LD_ADDR_VAR 0 3
5120: PUSH
5121: LD_VAR 0 2
5125: PUSH
5126: LD_INT 1
5128: PPUSH
5129: LD_VAR 0 2
5133: PPUSH
5134: CALL_OW 12
5138: ARRAY
5139: ST_TO_ADDR
// amConstructList := Join ( amConstructList , [ part [ 1 ] , engine_combustion , control_remote , part [ 2 ] ] ) end ;
5140: LD_ADDR_EXP 28
5144: PUSH
5145: LD_EXP 28
5149: PPUSH
5150: LD_VAR 0 3
5154: PUSH
5155: LD_INT 1
5157: ARRAY
5158: PUSH
5159: LD_INT 1
5161: PUSH
5162: LD_INT 2
5164: PUSH
5165: LD_VAR 0 3
5169: PUSH
5170: LD_INT 2
5172: ARRAY
5173: PUSH
5174: EMPTY
5175: LIST
5176: LIST
5177: LIST
5178: LIST
5179: PPUSH
5180: CALL 56940 0 2
5184: ST_TO_ADDR
5185: GO 5113
5187: POP
5188: POP
// end ;
5189: PPOPN 3
5191: END
// every 3 3$00 trigger not americanDestroyed and Count ( amTanks ) do var i , tmp , tmp2 ;
5192: LD_EXP 11
5196: NOT
5197: PUSH
5198: LD_EXP 31
5202: PPUSH
5203: CALL 21340 0 1
5207: AND
5208: IFFALSE 5417
5210: GO 5212
5212: DISABLE
5213: LD_INT 0
5215: PPUSH
5216: PPUSH
5217: PPUSH
// begin enable ;
5218: ENABLE
// tmp := UnitFilter ( amTanks , [ [ f_linked ] , [ f_ok ] ] ) ;
5219: LD_ADDR_VAR 0 2
5223: PUSH
5224: LD_EXP 31
5228: PPUSH
5229: LD_INT 61
5231: PUSH
5232: EMPTY
5233: LIST
5234: PUSH
5235: LD_INT 50
5237: PUSH
5238: EMPTY
5239: LIST
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: PPUSH
5245: CALL_OW 72
5249: ST_TO_ADDR
// amTanks := amTanks diff tmp ;
5250: LD_ADDR_EXP 31
5254: PUSH
5255: LD_EXP 31
5259: PUSH
5260: LD_VAR 0 2
5264: DIFF
5265: ST_TO_ADDR
// if not tmp then
5266: LD_VAR 0 2
5270: NOT
5271: IFFALSE 5275
// exit ;
5273: GO 5417
// tmp2 := UnitFilter ( tmp , [ f_weapon , us_machine_gun ] ) ;
5275: LD_ADDR_VAR 0 3
5279: PUSH
5280: LD_VAR 0 2
5284: PPUSH
5285: LD_INT 34
5287: PUSH
5288: LD_INT 2
5290: PUSH
5291: EMPTY
5292: LIST
5293: LIST
5294: PPUSH
5295: CALL_OW 72
5299: ST_TO_ADDR
// if tmp2 then
5300: LD_VAR 0 3
5304: IFFALSE 5321
// ComMoveXY ( tmp2 , 241 , 99 ) ;
5306: LD_VAR 0 3
5310: PPUSH
5311: LD_INT 241
5313: PPUSH
5314: LD_INT 99
5316: PPUSH
5317: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
5321: LD_INT 35
5323: PPUSH
5324: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
5328: LD_ADDR_VAR 0 2
5332: PUSH
5333: LD_VAR 0 2
5337: PPUSH
5338: LD_INT 50
5340: PUSH
5341: EMPTY
5342: LIST
5343: PPUSH
5344: CALL_OW 72
5348: ST_TO_ADDR
// for i in tmp do
5349: LD_ADDR_VAR 0 1
5353: PUSH
5354: LD_VAR 0 2
5358: PUSH
5359: FOR_IN
5360: IFFALSE 5408
// AgressiveMove ( i , [ [ 187 , 114 ] , [ 203 , 113 ] , [ 218 , 108 ] ] ) ;
5362: LD_VAR 0 1
5366: PPUSH
5367: LD_INT 187
5369: PUSH
5370: LD_INT 114
5372: PUSH
5373: EMPTY
5374: LIST
5375: LIST
5376: PUSH
5377: LD_INT 203
5379: PUSH
5380: LD_INT 113
5382: PUSH
5383: EMPTY
5384: LIST
5385: LIST
5386: PUSH
5387: LD_INT 218
5389: PUSH
5390: LD_INT 108
5392: PUSH
5393: EMPTY
5394: LIST
5395: LIST
5396: PUSH
5397: EMPTY
5398: LIST
5399: LIST
5400: LIST
5401: PPUSH
5402: CALL 59544 0 2
5406: GO 5359
5408: POP
5409: POP
// until not tmp ;
5410: LD_VAR 0 2
5414: NOT
5415: IFFALSE 5321
// end ; end_of_file
5417: PPOPN 3
5419: END
// export Farmer ; export legForces , legEForces , legTech , legConstructList , legHealPoint , legBuildings , legTanks , legCargo ; export function PrepareLegion ; var i , j , b , un , skill , sources ; begin
5420: LD_INT 0
5422: PPUSH
5423: PPUSH
5424: PPUSH
5425: PPUSH
5426: PPUSH
5427: PPUSH
5428: PPUSH
// uc_side := 8 ;
5429: LD_ADDR_OWVAR 20
5433: PUSH
5434: LD_INT 8
5436: ST_TO_ADDR
// uc_nation := nation_arabian ;
5437: LD_ADDR_OWVAR 21
5441: PUSH
5442: LD_INT 2
5444: ST_TO_ADDR
// legForces := [ ] ;
5445: LD_ADDR_EXP 36
5449: PUSH
5450: EMPTY
5451: ST_TO_ADDR
// legEForces := [ ] ;
5452: LD_ADDR_EXP 37
5456: PUSH
5457: EMPTY
5458: ST_TO_ADDR
// legTech := GetTechNation ( 8 , nation_arabian , state_enabled ) ;
5459: LD_ADDR_EXP 38
5463: PUSH
5464: LD_INT 8
5466: PPUSH
5467: LD_INT 2
5469: PPUSH
5470: LD_INT 1
5472: PPUSH
5473: CALL 19301 0 3
5477: ST_TO_ADDR
// legConstructList := [ [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ] ;
5478: LD_ADDR_EXP 39
5482: PUSH
5483: LD_INT 13
5485: PUSH
5486: LD_INT 1
5488: PUSH
5489: LD_INT 2
5491: PUSH
5492: LD_INT 32
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: LIST
5499: LIST
5500: PUSH
5501: EMPTY
5502: LIST
5503: ST_TO_ADDR
// legHealPoint := [ 195 , 15 ] ;
5504: LD_ADDR_EXP 40
5508: PUSH
5509: LD_INT 195
5511: PUSH
5512: LD_INT 15
5514: PUSH
5515: EMPTY
5516: LIST
5517: LIST
5518: ST_TO_ADDR
// legBuildings := [ ] ;
5519: LD_ADDR_EXP 41
5523: PUSH
5524: EMPTY
5525: ST_TO_ADDR
// legTanks := [ ] ;
5526: LD_ADDR_EXP 42
5530: PUSH
5531: EMPTY
5532: ST_TO_ADDR
// legCargo := 0 ;
5533: LD_ADDR_EXP 43
5537: PUSH
5538: LD_INT 0
5540: ST_TO_ADDR
// sources := [ [ 219 , 31 ] , [ 166 , 31 ] ] ;
5541: LD_ADDR_VAR 0 7
5545: PUSH
5546: LD_INT 219
5548: PUSH
5549: LD_INT 31
5551: PUSH
5552: EMPTY
5553: LIST
5554: LIST
5555: PUSH
5556: LD_INT 166
5558: PUSH
5559: LD_INT 31
5561: PUSH
5562: EMPTY
5563: LIST
5564: LIST
5565: PUSH
5566: EMPTY
5567: LIST
5568: LIST
5569: ST_TO_ADDR
// for i in sources do
5570: LD_ADDR_VAR 0 2
5574: PUSH
5575: LD_VAR 0 7
5579: PUSH
5580: FOR_IN
5581: IFFALSE 5610
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 1 ) ;
5583: LD_VAR 0 2
5587: PUSH
5588: LD_INT 1
5590: ARRAY
5591: PPUSH
5592: LD_VAR 0 2
5596: PUSH
5597: LD_INT 2
5599: ARRAY
5600: PPUSH
5601: LD_INT 1
5603: PPUSH
5604: CALL_OW 441
5608: GO 5580
5610: POP
5611: POP
// SetResourceType ( GetBase ( legBase ) , mat_cans , 650 ) ;
5612: LD_INT 38
5614: PPUSH
5615: CALL_OW 274
5619: PPUSH
5620: LD_INT 1
5622: PPUSH
5623: LD_INT 650
5625: PPUSH
5626: CALL_OW 277
// SetResourceType ( GetBase ( legBase ) , mat_oil , 120 ) ;
5630: LD_INT 38
5632: PPUSH
5633: CALL_OW 274
5637: PPUSH
5638: LD_INT 2
5640: PPUSH
5641: LD_INT 120
5643: PPUSH
5644: CALL_OW 277
// SetResourceType ( GetBase ( legBase ) , mat_siberit , 50 ) ;
5648: LD_INT 38
5650: PPUSH
5651: CALL_OW 274
5655: PPUSH
5656: LD_INT 3
5658: PPUSH
5659: LD_INT 50
5661: PPUSH
5662: CALL_OW 277
// skill := [ 6 , 7 , 8 , 9 ] [ Difficulty ] ;
5666: LD_ADDR_VAR 0 6
5670: PUSH
5671: LD_INT 6
5673: PUSH
5674: LD_INT 7
5676: PUSH
5677: LD_INT 8
5679: PUSH
5680: LD_INT 9
5682: PUSH
5683: EMPTY
5684: LIST
5685: LIST
5686: LIST
5687: LIST
5688: PUSH
5689: LD_OWVAR 67
5693: ARRAY
5694: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
5695: LD_ADDR_EXP 35
5699: PUSH
5700: LD_STRING Farmer
5702: PPUSH
5703: LD_INT 0
5705: PPUSH
5706: LD_STRING 
5708: PPUSH
5709: CALL 19238 0 3
5713: ST_TO_ADDR
// for i := 1 to 4 do
5714: LD_ADDR_VAR 0 2
5718: PUSH
5719: DOUBLE
5720: LD_INT 1
5722: DEC
5723: ST_TO_ADDR
5724: LD_INT 4
5726: PUSH
5727: FOR_TO
5728: IFFALSE 6245
// for j := 1 to [ [ 7 , 8 , 9 , 11 ] [ Difficulty ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] , 3 , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
5730: LD_ADDR_VAR 0 3
5734: PUSH
5735: DOUBLE
5736: LD_INT 1
5738: DEC
5739: ST_TO_ADDR
5740: LD_INT 7
5742: PUSH
5743: LD_INT 8
5745: PUSH
5746: LD_INT 9
5748: PUSH
5749: LD_INT 11
5751: PUSH
5752: EMPTY
5753: LIST
5754: LIST
5755: LIST
5756: LIST
5757: PUSH
5758: LD_OWVAR 67
5762: ARRAY
5763: PUSH
5764: LD_INT 3
5766: PUSH
5767: LD_INT 4
5769: PUSH
5770: LD_INT 5
5772: PUSH
5773: LD_INT 5
5775: PUSH
5776: EMPTY
5777: LIST
5778: LIST
5779: LIST
5780: LIST
5781: PUSH
5782: LD_OWVAR 67
5786: ARRAY
5787: PUSH
5788: LD_INT 3
5790: PUSH
5791: LD_INT 2
5793: PUSH
5794: LD_INT 3
5796: PUSH
5797: LD_INT 3
5799: PUSH
5800: LD_INT 3
5802: PUSH
5803: EMPTY
5804: LIST
5805: LIST
5806: LIST
5807: LIST
5808: PUSH
5809: LD_OWVAR 67
5813: ARRAY
5814: PUSH
5815: EMPTY
5816: LIST
5817: LIST
5818: LIST
5819: LIST
5820: PUSH
5821: LD_VAR 0 2
5825: ARRAY
5826: PUSH
5827: FOR_TO
5828: IFFALSE 6241
// begin PrepareHuman ( false , i , skill ) ;
5830: LD_INT 0
5832: PPUSH
5833: LD_VAR 0 2
5837: PPUSH
5838: LD_VAR 0 6
5842: PPUSH
5843: CALL_OW 380
// un := CreateHuman ;
5847: LD_ADDR_VAR 0 5
5851: PUSH
5852: CALL_OW 44
5856: ST_TO_ADDR
// legForces := Join ( legForces , un ) ;
5857: LD_ADDR_EXP 36
5861: PUSH
5862: LD_EXP 36
5866: PPUSH
5867: LD_VAR 0 5
5871: PPUSH
5872: CALL 56940 0 2
5876: ST_TO_ADDR
// case i of 1 :
5877: LD_VAR 0 2
5881: PUSH
5882: LD_INT 1
5884: DOUBLE
5885: EQUAL
5886: IFTRUE 5890
5888: GO 5959
5890: POP
// b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] ] ) ; 2 :
5891: LD_ADDR_VAR 0 4
5895: PUSH
5896: LD_INT 22
5898: PUSH
5899: LD_INT 8
5901: PUSH
5902: EMPTY
5903: LIST
5904: LIST
5905: PUSH
5906: LD_INT 2
5908: PUSH
5909: LD_INT 30
5911: PUSH
5912: LD_INT 32
5914: PUSH
5915: EMPTY
5916: LIST
5917: LIST
5918: PUSH
5919: LD_INT 30
5921: PUSH
5922: LD_INT 5
5924: PUSH
5925: EMPTY
5926: LIST
5927: LIST
5928: PUSH
5929: EMPTY
5930: LIST
5931: LIST
5932: LIST
5933: PUSH
5934: LD_INT 3
5936: PUSH
5937: LD_INT 62
5939: PUSH
5940: EMPTY
5941: LIST
5942: PUSH
5943: EMPTY
5944: LIST
5945: LIST
5946: PUSH
5947: EMPTY
5948: LIST
5949: LIST
5950: LIST
5951: PPUSH
5952: CALL_OW 69
5956: ST_TO_ADDR
5957: GO 6138
5959: LD_INT 2
5961: DOUBLE
5962: EQUAL
5963: IFTRUE 5967
5965: GO 5996
5967: POP
// b := UnitFilter ( legBase , [ f_not , [ f_full ] ] ) ; 3 :
5968: LD_ADDR_VAR 0 4
5972: PUSH
5973: LD_INT 38
5975: PPUSH
5976: LD_INT 3
5978: PUSH
5979: LD_INT 62
5981: PUSH
5982: EMPTY
5983: LIST
5984: PUSH
5985: EMPTY
5986: LIST
5987: LIST
5988: PPUSH
5989: CALL_OW 72
5993: ST_TO_ADDR
5994: GO 6138
5996: LD_INT 3
5998: DOUBLE
5999: EQUAL
6000: IFTRUE 6004
6002: GO 6078
6004: POP
// b := ReverseArray ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_control_tower ] ] , [ f_not , [ f_full ] ] ] ) ) ; 4 :
6005: LD_ADDR_VAR 0 4
6009: PUSH
6010: LD_INT 22
6012: PUSH
6013: LD_INT 8
6015: PUSH
6016: EMPTY
6017: LIST
6018: LIST
6019: PUSH
6020: LD_INT 2
6022: PUSH
6023: LD_INT 30
6025: PUSH
6026: LD_INT 3
6028: PUSH
6029: EMPTY
6030: LIST
6031: LIST
6032: PUSH
6033: LD_INT 30
6035: PUSH
6036: LD_INT 36
6038: PUSH
6039: EMPTY
6040: LIST
6041: LIST
6042: PUSH
6043: EMPTY
6044: LIST
6045: LIST
6046: LIST
6047: PUSH
6048: LD_INT 3
6050: PUSH
6051: LD_INT 62
6053: PUSH
6054: EMPTY
6055: LIST
6056: PUSH
6057: EMPTY
6058: LIST
6059: LIST
6060: PUSH
6061: EMPTY
6062: LIST
6063: LIST
6064: LIST
6065: PPUSH
6066: CALL_OW 69
6070: PPUSH
6071: CALL 52216 0 1
6075: ST_TO_ADDR
6076: GO 6138
6078: LD_INT 4
6080: DOUBLE
6081: EQUAL
6082: IFTRUE 6086
6084: GO 6137
6086: POP
// b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_lab_full ] , [ f_not , [ f_full ] ] ] ) ; end ;
6087: LD_ADDR_VAR 0 4
6091: PUSH
6092: LD_INT 22
6094: PUSH
6095: LD_INT 8
6097: PUSH
6098: EMPTY
6099: LIST
6100: LIST
6101: PUSH
6102: LD_INT 30
6104: PUSH
6105: LD_INT 8
6107: PUSH
6108: EMPTY
6109: LIST
6110: LIST
6111: PUSH
6112: LD_INT 3
6114: PUSH
6115: LD_INT 62
6117: PUSH
6118: EMPTY
6119: LIST
6120: PUSH
6121: EMPTY
6122: LIST
6123: LIST
6124: PUSH
6125: EMPTY
6126: LIST
6127: LIST
6128: LIST
6129: PPUSH
6130: CALL_OW 69
6134: ST_TO_ADDR
6135: GO 6138
6137: POP
// if b then
6138: LD_VAR 0 4
6142: IFFALSE 6218
// begin if GetBType ( b [ 1 ] ) = b_barracks then
6144: LD_VAR 0 4
6148: PUSH
6149: LD_INT 1
6151: ARRAY
6152: PPUSH
6153: CALL_OW 266
6157: PUSH
6158: LD_INT 5
6160: EQUAL
6161: IFFALSE 6198
// if Prob ( 50 ) then
6163: LD_INT 50
6165: PPUSH
6166: CALL_OW 13
6170: IFFALSE 6186
// SetClass ( un , class_mortar ) else
6172: LD_VAR 0 5
6176: PPUSH
6177: LD_INT 8
6179: PPUSH
6180: CALL_OW 336
6184: GO 6198
// SetClass ( un , class_sniper ) ;
6186: LD_VAR 0 5
6190: PPUSH
6191: LD_INT 5
6193: PPUSH
6194: CALL_OW 336
// PlaceHumanInUnit ( un , b [ 1 ] ) ;
6198: LD_VAR 0 5
6202: PPUSH
6203: LD_VAR 0 4
6207: PUSH
6208: LD_INT 1
6210: ARRAY
6211: PPUSH
6212: CALL_OW 52
// end else
6216: GO 6239
// PlaceUnitXYR ( un , 188 , 21 , 4 , false ) ;
6218: LD_VAR 0 5
6222: PPUSH
6223: LD_INT 188
6225: PPUSH
6226: LD_INT 21
6228: PPUSH
6229: LD_INT 4
6231: PPUSH
6232: LD_INT 0
6234: PPUSH
6235: CALL_OW 50
// end ;
6239: GO 5827
6241: POP
6242: POP
6243: GO 5727
6245: POP
6246: POP
// b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] ] ) ;
6247: LD_ADDR_VAR 0 4
6251: PUSH
6252: LD_INT 22
6254: PUSH
6255: LD_INT 8
6257: PUSH
6258: EMPTY
6259: LIST
6260: LIST
6261: PUSH
6262: LD_INT 2
6264: PUSH
6265: LD_INT 30
6267: PUSH
6268: LD_INT 32
6270: PUSH
6271: EMPTY
6272: LIST
6273: LIST
6274: PUSH
6275: LD_INT 30
6277: PUSH
6278: LD_INT 5
6280: PUSH
6281: EMPTY
6282: LIST
6283: LIST
6284: PUSH
6285: EMPTY
6286: LIST
6287: LIST
6288: LIST
6289: PUSH
6290: LD_INT 3
6292: PUSH
6293: LD_INT 62
6295: PUSH
6296: EMPTY
6297: LIST
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: PUSH
6303: EMPTY
6304: LIST
6305: LIST
6306: LIST
6307: PPUSH
6308: CALL_OW 69
6312: ST_TO_ADDR
// if b then
6313: LD_VAR 0 4
6317: IFFALSE 6384
// begin for i in b do
6319: LD_ADDR_VAR 0 2
6323: PUSH
6324: LD_VAR 0 4
6328: PUSH
6329: FOR_IN
6330: IFFALSE 6382
// begin PrepareApemanSoldier ( ) ;
6332: CALL 53050 0 0
// un := CreateHuman ;
6336: LD_ADDR_VAR 0 5
6340: PUSH
6341: CALL_OW 44
6345: ST_TO_ADDR
// legForces := Join ( legForces , un ) ;
6346: LD_ADDR_EXP 36
6350: PUSH
6351: LD_EXP 36
6355: PPUSH
6356: LD_VAR 0 5
6360: PPUSH
6361: CALL 56940 0 2
6365: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6366: LD_VAR 0 5
6370: PPUSH
6371: LD_VAR 0 2
6375: PPUSH
6376: CALL_OW 52
// end ;
6380: GO 6329
6382: POP
6383: POP
// end ; for i := 1 to 2 do
6384: LD_ADDR_VAR 0 2
6388: PUSH
6389: DOUBLE
6390: LD_INT 1
6392: DEC
6393: ST_TO_ADDR
6394: LD_INT 2
6396: PUSH
6397: FOR_TO
6398: IFFALSE 6525
// begin uc_nation := nation_arabian ;
6400: LD_ADDR_OWVAR 21
6404: PUSH
6405: LD_INT 2
6407: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_solar , control_manual , ar_control_tower , 100 ) ;
6408: LD_INT 13
6410: PPUSH
6411: LD_INT 2
6413: PPUSH
6414: LD_INT 1
6416: PPUSH
6417: LD_INT 31
6419: PPUSH
6420: LD_INT 100
6422: PPUSH
6423: CALL 24078 0 5
// un := CreateVehicle ;
6427: LD_ADDR_VAR 0 5
6431: PUSH
6432: CALL_OW 45
6436: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6437: LD_VAR 0 5
6441: PPUSH
6442: LD_INT 0
6444: PPUSH
6445: LD_INT 5
6447: PPUSH
6448: CALL_OW 12
6452: PPUSH
6453: CALL_OW 233
// PlaceUnitXYR ( un , 199 , 24 , 4 , false ) ;
6457: LD_VAR 0 5
6461: PPUSH
6462: LD_INT 199
6464: PPUSH
6465: LD_INT 24
6467: PPUSH
6468: LD_INT 4
6470: PPUSH
6471: LD_INT 0
6473: PPUSH
6474: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
6478: LD_INT 0
6480: PPUSH
6481: LD_INT 8
6483: PUSH
6484: LD_INT 9
6486: PUSH
6487: LD_INT 10
6489: PUSH
6490: LD_INT 10
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: PUSH
6499: LD_OWVAR 67
6503: ARRAY
6504: PPUSH
6505: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
6509: CALL_OW 44
6513: PPUSH
6514: LD_VAR 0 5
6518: PPUSH
6519: CALL_OW 52
// end ;
6523: GO 6397
6525: POP
6526: POP
// end ;
6527: LD_VAR 0 1
6531: RET
// every 0 0$2 trigger legScriptActive and Count ( legForces ) do var i , tmp , remote , undone , side , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
6532: LD_EXP 4
6536: PUSH
6537: LD_EXP 36
6541: PPUSH
6542: CALL 21340 0 1
6546: AND
6547: IFFALSE 8920
6549: GO 6551
6551: DISABLE
6552: LD_INT 0
6554: PPUSH
6555: PPUSH
6556: PPUSH
6557: PPUSH
6558: PPUSH
6559: PPUSH
6560: PPUSH
6561: PPUSH
6562: PPUSH
6563: PPUSH
6564: PPUSH
6565: PPUSH
6566: PPUSH
6567: PPUSH
6568: PPUSH
6569: PPUSH
6570: PPUSH
6571: PPUSH
// begin enable ;
6572: ENABLE
// side := 8 ;
6573: LD_ADDR_VAR 0 5
6577: PUSH
6578: LD_INT 8
6580: ST_TO_ADDR
// remote := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
6581: LD_ADDR_VAR 0 3
6585: PUSH
6586: LD_INT 22
6588: PUSH
6589: LD_VAR 0 5
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: PUSH
6598: LD_INT 33
6600: PUSH
6601: LD_INT 2
6603: PUSH
6604: EMPTY
6605: LIST
6606: LIST
6607: PUSH
6608: LD_INT 50
6610: PUSH
6611: EMPTY
6612: LIST
6613: PUSH
6614: LD_INT 3
6616: PUSH
6617: LD_INT 61
6619: PUSH
6620: EMPTY
6621: LIST
6622: PUSH
6623: EMPTY
6624: LIST
6625: LIST
6626: PUSH
6627: EMPTY
6628: LIST
6629: LIST
6630: LIST
6631: LIST
6632: PPUSH
6633: CALL_OW 69
6637: ST_TO_ADDR
// if remote and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_weapon , ar_control_tower ] ] ) ) then
6638: LD_VAR 0 3
6642: PUSH
6643: LD_INT 22
6645: PUSH
6646: LD_VAR 0 5
6650: PUSH
6651: EMPTY
6652: LIST
6653: LIST
6654: PUSH
6655: LD_INT 50
6657: PUSH
6658: EMPTY
6659: LIST
6660: PUSH
6661: LD_INT 34
6663: PUSH
6664: LD_INT 31
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PUSH
6671: EMPTY
6672: LIST
6673: LIST
6674: LIST
6675: PPUSH
6676: CALL_OW 69
6680: PPUSH
6681: CALL 21340 0 1
6685: AND
6686: IFFALSE 6714
// for i in remote do
6688: LD_ADDR_VAR 0 1
6692: PUSH
6693: LD_VAR 0 3
6697: PUSH
6698: FOR_IN
6699: IFFALSE 6712
// Connect ( i ) ;
6701: LD_VAR 0 1
6705: PPUSH
6706: CALL 27546 0 1
6710: GO 6698
6712: POP
6713: POP
// if legTech then
6714: LD_EXP 38
6718: IFFALSE 6874
// begin lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
6720: LD_ADDR_VAR 0 6
6724: PUSH
6725: LD_INT 22
6727: PUSH
6728: LD_VAR 0 5
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: PUSH
6737: LD_INT 50
6739: PUSH
6740: EMPTY
6741: LIST
6742: PUSH
6743: LD_INT 2
6745: PUSH
6746: LD_INT 30
6748: PUSH
6749: LD_INT 6
6751: PUSH
6752: EMPTY
6753: LIST
6754: LIST
6755: PUSH
6756: LD_INT 30
6758: PUSH
6759: LD_INT 7
6761: PUSH
6762: EMPTY
6763: LIST
6764: LIST
6765: PUSH
6766: LD_INT 30
6768: PUSH
6769: LD_INT 8
6771: PUSH
6772: EMPTY
6773: LIST
6774: LIST
6775: PUSH
6776: EMPTY
6777: LIST
6778: LIST
6779: LIST
6780: LIST
6781: PUSH
6782: EMPTY
6783: LIST
6784: LIST
6785: LIST
6786: PPUSH
6787: CALL_OW 69
6791: ST_TO_ADDR
// if lab then
6792: LD_VAR 0 6
6796: IFFALSE 6874
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
6798: LD_VAR 0 6
6802: PUSH
6803: LD_INT 1
6805: ARRAY
6806: PPUSH
6807: CALL_OW 461
6811: PUSH
6812: LD_INT 2
6814: EQUAL
6815: IFFALSE 6874
// begin for i in legTech do
6817: LD_ADDR_VAR 0 1
6821: PUSH
6822: LD_EXP 38
6826: PUSH
6827: FOR_IN
6828: IFFALSE 6872
// if CanBeResearched ( lab [ 1 ] , i ) then
6830: LD_VAR 0 6
6834: PUSH
6835: LD_INT 1
6837: ARRAY
6838: PPUSH
6839: LD_VAR 0 1
6843: PPUSH
6844: CALL_OW 430
6848: IFFALSE 6870
// begin ComResearch ( lab [ 1 ] , i ) ;
6850: LD_VAR 0 6
6854: PUSH
6855: LD_INT 1
6857: ARRAY
6858: PPUSH
6859: LD_VAR 0 1
6863: PPUSH
6864: CALL_OW 124
// break ;
6868: GO 6872
// end ;
6870: GO 6827
6872: POP
6873: POP
// end ; end ; end ; fac := FilterUnitsInArea ( legBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
6874: LD_ADDR_VAR 0 16
6878: PUSH
6879: LD_INT 2
6881: PPUSH
6882: LD_INT 22
6884: PUSH
6885: LD_VAR 0 5
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: PUSH
6894: LD_INT 30
6896: PUSH
6897: LD_INT 3
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: PUSH
6904: LD_INT 50
6906: PUSH
6907: EMPTY
6908: LIST
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: LIST
6914: PPUSH
6915: CALL_OW 70
6919: ST_TO_ADDR
// if fac then
6920: LD_VAR 0 16
6924: IFFALSE 7190
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
6926: LD_VAR 0 16
6930: PUSH
6931: LD_INT 1
6933: ARRAY
6934: PPUSH
6935: CALL_OW 461
6939: PUSH
6940: LD_INT 2
6942: EQUAL
6943: IFFALSE 7190
// begin emptyTowers := FilterUnitsInArea ( legBaseArea , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
6945: LD_ADDR_VAR 0 17
6949: PUSH
6950: LD_INT 2
6952: PPUSH
6953: LD_INT 2
6955: PUSH
6956: LD_INT 30
6958: PUSH
6959: LD_INT 32
6961: PUSH
6962: EMPTY
6963: LIST
6964: LIST
6965: PUSH
6966: LD_INT 30
6968: PUSH
6969: LD_INT 33
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: LIST
6980: PUSH
6981: LD_INT 35
6983: PUSH
6984: LD_INT 0
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: PUSH
6991: EMPTY
6992: LIST
6993: LIST
6994: PPUSH
6995: CALL_OW 70
6999: ST_TO_ADDR
// if emptyTowers then
7000: LD_VAR 0 17
7004: IFFALSE 7052
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , legBaseArea ) ;
7006: LD_ADDR_VAR 0 18
7010: PUSH
7011: LD_VAR 0 17
7015: PUSH
7016: LD_INT 1
7018: ARRAY
7019: PPUSH
7020: LD_INT 2
7022: PPUSH
7023: CALL 29585 0 2
7027: ST_TO_ADDR
// if weapon then
7028: LD_VAR 0 18
7032: IFFALSE 7052
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
7034: LD_VAR 0 17
7038: PUSH
7039: LD_INT 1
7041: ARRAY
7042: PPUSH
7043: LD_VAR 0 18
7047: PPUSH
7048: CALL_OW 148
// end ; if legConstructList then
7052: LD_EXP 39
7056: IFFALSE 7190
// if CanBeConstructed ( fac [ 1 ] , legConstructList [ 1 ] [ 1 ] , legConstructList [ 1 ] [ 2 ] , legConstructList [ 1 ] [ 3 ] , legConstructList [ 1 ] [ 4 ] ) then
7058: LD_VAR 0 16
7062: PUSH
7063: LD_INT 1
7065: ARRAY
7066: PPUSH
7067: LD_EXP 39
7071: PUSH
7072: LD_INT 1
7074: ARRAY
7075: PUSH
7076: LD_INT 1
7078: ARRAY
7079: PPUSH
7080: LD_EXP 39
7084: PUSH
7085: LD_INT 1
7087: ARRAY
7088: PUSH
7089: LD_INT 2
7091: ARRAY
7092: PPUSH
7093: LD_EXP 39
7097: PUSH
7098: LD_INT 1
7100: ARRAY
7101: PUSH
7102: LD_INT 3
7104: ARRAY
7105: PPUSH
7106: LD_EXP 39
7110: PUSH
7111: LD_INT 1
7113: ARRAY
7114: PUSH
7115: LD_INT 4
7117: ARRAY
7118: PPUSH
7119: CALL_OW 448
7123: IFFALSE 7190
// ComConstruct ( fac [ 1 ] , legConstructList [ 1 ] [ 1 ] , legConstructList [ 1 ] [ 2 ] , legConstructList [ 1 ] [ 3 ] , legConstructList [ 1 ] [ 4 ] ) ;
7125: LD_VAR 0 16
7129: PUSH
7130: LD_INT 1
7132: ARRAY
7133: PPUSH
7134: LD_EXP 39
7138: PUSH
7139: LD_INT 1
7141: ARRAY
7142: PUSH
7143: LD_INT 1
7145: ARRAY
7146: PPUSH
7147: LD_EXP 39
7151: PUSH
7152: LD_INT 1
7154: ARRAY
7155: PUSH
7156: LD_INT 2
7158: ARRAY
7159: PPUSH
7160: LD_EXP 39
7164: PUSH
7165: LD_INT 1
7167: ARRAY
7168: PUSH
7169: LD_INT 3
7171: ARRAY
7172: PPUSH
7173: LD_EXP 39
7177: PUSH
7178: LD_INT 1
7180: ARRAY
7181: PUSH
7182: LD_INT 4
7184: ARRAY
7185: PPUSH
7186: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( legBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7190: LD_ADDR_VAR 0 2
7194: PUSH
7195: LD_INT 2
7197: PPUSH
7198: LD_INT 21
7200: PUSH
7201: LD_INT 3
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: PUSH
7208: LD_INT 3
7210: PUSH
7211: LD_INT 57
7213: PUSH
7214: EMPTY
7215: LIST
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: PUSH
7221: LD_INT 3
7223: PUSH
7224: LD_INT 24
7226: PUSH
7227: LD_INT 1000
7229: PUSH
7230: EMPTY
7231: LIST
7232: LIST
7233: PUSH
7234: EMPTY
7235: LIST
7236: LIST
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: LIST
7242: PPUSH
7243: CALL_OW 70
7247: ST_TO_ADDR
// cr := GetListOfCratesInArea ( legCratesArea ) ;
7248: LD_ADDR_VAR 0 10
7252: PUSH
7253: LD_INT 14
7255: PPUSH
7256: CALL_OW 435
7260: ST_TO_ADDR
// sci := UnitFilter ( legForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
7261: LD_ADDR_VAR 0 11
7265: PUSH
7266: LD_EXP 36
7270: PPUSH
7271: LD_INT 25
7273: PUSH
7274: LD_INT 4
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: PUSH
7281: LD_INT 50
7283: PUSH
7284: EMPTY
7285: LIST
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: PPUSH
7291: CALL_OW 72
7295: ST_TO_ADDR
// lab := FilterUnitsInArea ( legBaseArea , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
7296: LD_ADDR_VAR 0 6
7300: PUSH
7301: LD_INT 2
7303: PPUSH
7304: LD_INT 2
7306: PUSH
7307: LD_INT 30
7309: PUSH
7310: LD_INT 6
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: PUSH
7317: LD_INT 30
7319: PUSH
7320: LD_INT 7
7322: PUSH
7323: EMPTY
7324: LIST
7325: LIST
7326: PUSH
7327: LD_INT 30
7329: PUSH
7330: LD_INT 8
7332: PUSH
7333: EMPTY
7334: LIST
7335: LIST
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: LIST
7341: LIST
7342: PPUSH
7343: CALL_OW 70
7347: ST_TO_ADDR
// if sci then
7348: LD_VAR 0 11
7352: IFFALSE 7511
// begin hurtUnits := UnitFilter ( legForces , [ [ f_inarea , legBaseArea ] , [ f_tag , tHeal ] ] ) ;
7354: LD_ADDR_VAR 0 13
7358: PUSH
7359: LD_EXP 36
7363: PPUSH
7364: LD_INT 95
7366: PUSH
7367: LD_INT 2
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: PUSH
7374: LD_INT 120
7376: PUSH
7377: LD_INT 1
7379: PUSH
7380: EMPTY
7381: LIST
7382: LIST
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: PPUSH
7388: CALL_OW 72
7392: ST_TO_ADDR
// if hurtUnits then
7393: LD_VAR 0 13
7397: IFFALSE 7458
// begin for i in sci do
7399: LD_ADDR_VAR 0 1
7403: PUSH
7404: LD_VAR 0 11
7408: PUSH
7409: FOR_IN
7410: IFFALSE 7454
// if IsInUnit ( i ) then
7412: LD_VAR 0 1
7416: PPUSH
7417: CALL_OW 310
7421: IFFALSE 7434
// ComExitBuilding ( i ) else
7423: LD_VAR 0 1
7427: PPUSH
7428: CALL_OW 122
7432: GO 7452
// ComHeal ( i , hurtUnits [ 1 ] ) ;
7434: LD_VAR 0 1
7438: PPUSH
7439: LD_VAR 0 13
7443: PUSH
7444: LD_INT 1
7446: ARRAY
7447: PPUSH
7448: CALL_OW 128
7452: GO 7409
7454: POP
7455: POP
// end else
7456: GO 7511
// if lab then
7458: LD_VAR 0 6
7462: IFFALSE 7511
// begin for i in sci do
7464: LD_ADDR_VAR 0 1
7468: PUSH
7469: LD_VAR 0 11
7473: PUSH
7474: FOR_IN
7475: IFFALSE 7509
// if not IsInUnit ( i ) then
7477: LD_VAR 0 1
7481: PPUSH
7482: CALL_OW 310
7486: NOT
7487: IFFALSE 7507
// ComEnterUnit ( i , lab [ 1 ] ) ;
7489: LD_VAR 0 1
7493: PPUSH
7494: LD_VAR 0 6
7498: PUSH
7499: LD_INT 1
7501: ARRAY
7502: PPUSH
7503: CALL_OW 120
7507: GO 7474
7509: POP
7510: POP
// end ; end ; eng := UnitFilter ( legForces , [ f_class , 2 ] ) ;
7511: LD_ADDR_VAR 0 7
7515: PUSH
7516: LD_EXP 36
7520: PPUSH
7521: LD_INT 25
7523: PUSH
7524: LD_INT 2
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: PPUSH
7531: CALL_OW 72
7535: ST_TO_ADDR
// if eng then
7536: LD_VAR 0 7
7540: IFFALSE 8315
// begin for i in eng do
7542: LD_ADDR_VAR 0 1
7546: PUSH
7547: LD_VAR 0 7
7551: PUSH
7552: FOR_IN
7553: IFFALSE 8313
// begin tag := GetTag ( i ) ;
7555: LD_ADDR_VAR 0 8
7559: PUSH
7560: LD_VAR 0 1
7564: PPUSH
7565: CALL_OW 110
7569: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
7570: LD_VAR 0 1
7574: PPUSH
7575: CALL_OW 256
7579: PUSH
7580: LD_INT 800
7582: LESS
7583: PUSH
7584: LD_VAR 0 8
7588: PUSH
7589: LD_INT 1
7591: NONEQUAL
7592: AND
7593: IFFALSE 7643
// begin SetTag ( i , tHeal ) ;
7595: LD_VAR 0 1
7599: PPUSH
7600: LD_INT 1
7602: PPUSH
7603: CALL_OW 109
// ComMoveXY ( i , legHealPoint [ 1 ] , legHealPoint [ 2 ] ) ;
7607: LD_VAR 0 1
7611: PPUSH
7612: LD_EXP 40
7616: PUSH
7617: LD_INT 1
7619: ARRAY
7620: PPUSH
7621: LD_EXP 40
7625: PUSH
7626: LD_INT 2
7628: ARRAY
7629: PPUSH
7630: CALL_OW 111
// AddComHold ( i ) ;
7634: LD_VAR 0 1
7638: PPUSH
7639: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
7643: LD_VAR 0 8
7647: PUSH
7648: LD_INT 1
7650: EQUAL
7651: PUSH
7652: LD_VAR 0 1
7656: PPUSH
7657: CALL_OW 256
7661: PUSH
7662: LD_INT 1000
7664: EQUAL
7665: AND
7666: IFFALSE 7680
// SetTag ( i , 0 ) ;
7668: LD_VAR 0 1
7672: PPUSH
7673: LD_INT 0
7675: PPUSH
7676: CALL_OW 109
// if not tag then
7680: LD_VAR 0 8
7684: NOT
7685: IFFALSE 7853
// begin undone := FilterUnitsInArea ( legBaseArea , [ f_constructed ] ) ;
7687: LD_ADDR_VAR 0 4
7691: PUSH
7692: LD_INT 2
7694: PPUSH
7695: LD_INT 57
7697: PUSH
7698: EMPTY
7699: LIST
7700: PPUSH
7701: CALL_OW 70
7705: ST_TO_ADDR
// if undone then
7706: LD_VAR 0 4
7710: IFFALSE 7732
// begin ComComplete ( i , undone [ 1 ] ) ;
7712: LD_VAR 0 1
7716: PPUSH
7717: LD_VAR 0 4
7721: PUSH
7722: LD_INT 1
7724: ARRAY
7725: PPUSH
7726: CALL 27438 0 2
// continue ;
7730: GO 7552
// end ; if cr or tmp or Count ( legBuildings ) then
7732: LD_VAR 0 10
7736: PUSH
7737: LD_VAR 0 2
7741: OR
7742: PUSH
7743: LD_EXP 41
7747: PPUSH
7748: CALL 21340 0 1
7752: OR
7753: IFFALSE 7829
// begin if IsInUnit ( i ) then
7755: LD_VAR 0 1
7759: PPUSH
7760: CALL_OW 310
7764: IFFALSE 7775
// ComExitBuilding ( i ) ;
7766: LD_VAR 0 1
7770: PPUSH
7771: CALL_OW 122
// if tmp then
7775: LD_VAR 0 2
7779: IFFALSE 7795
// SetTag ( i , tRepair ) else
7781: LD_VAR 0 1
7785: PPUSH
7786: LD_INT 3
7788: PPUSH
7789: CALL_OW 109
7793: GO 7827
// if cr then
7795: LD_VAR 0 10
7799: IFFALSE 7815
// SetTag ( i , tCrates ) else
7801: LD_VAR 0 1
7805: PPUSH
7806: LD_INT 2
7808: PPUSH
7809: CALL_OW 109
7813: GO 7827
// SetTag ( i , tBuild ) ;
7815: LD_VAR 0 1
7819: PPUSH
7820: LD_INT 5
7822: PPUSH
7823: CALL_OW 109
// end else
7827: GO 7853
// if not IsInUnit ( i ) then
7829: LD_VAR 0 1
7833: PPUSH
7834: CALL_OW 310
7838: NOT
7839: IFFALSE 7853
// ComEnterUnit ( i , legBase ) ;
7841: LD_VAR 0 1
7845: PPUSH
7846: LD_INT 38
7848: PPUSH
7849: CALL_OW 120
// end ; if tag = tRepair then
7853: LD_VAR 0 8
7857: PUSH
7858: LD_INT 3
7860: EQUAL
7861: IFFALSE 7963
// begin if IsInUnit ( i ) then
7863: LD_VAR 0 1
7867: PPUSH
7868: CALL_OW 310
7872: IFFALSE 7885
// begin ComExitBuilding ( i ) ;
7874: LD_VAR 0 1
7878: PPUSH
7879: CALL_OW 122
// continue ;
7883: GO 7552
// end ; if not tmp then
7885: LD_VAR 0 2
7889: NOT
7890: IFFALSE 7906
// begin SetTag ( i , 0 ) ;
7892: LD_VAR 0 1
7896: PPUSH
7897: LD_INT 0
7899: PPUSH
7900: CALL_OW 109
// continue ;
7904: GO 7552
// end ; if not HasTask ( i ) then
7906: LD_VAR 0 1
7910: PPUSH
7911: CALL_OW 314
7915: NOT
7916: IFFALSE 7936
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
7918: LD_VAR 0 1
7922: PPUSH
7923: LD_VAR 0 2
7927: PUSH
7928: LD_INT 1
7930: ARRAY
7931: PPUSH
7932: CALL_OW 130
// if not IsInArea ( i , legBaseArea ) then
7936: LD_VAR 0 1
7940: PPUSH
7941: LD_INT 2
7943: PPUSH
7944: CALL_OW 308
7948: NOT
7949: IFFALSE 7963
// ComMoveToArea ( i , legBaseArea ) ;
7951: LD_VAR 0 1
7955: PPUSH
7956: LD_INT 2
7958: PPUSH
7959: CALL_OW 113
// end ; if tag = tBuild then
7963: LD_VAR 0 8
7967: PUSH
7968: LD_INT 5
7970: EQUAL
7971: IFFALSE 8166
// begin if IsInUnit ( i ) then
7973: LD_VAR 0 1
7977: PPUSH
7978: CALL_OW 310
7982: IFFALSE 7995
// begin ComExitBuilding ( i ) ;
7984: LD_VAR 0 1
7988: PPUSH
7989: CALL_OW 122
// continue ;
7993: GO 7552
// end ; if not Count ( legBuildings ) then
7995: LD_EXP 41
7999: PPUSH
8000: CALL 21340 0 1
8004: NOT
8005: IFFALSE 8023
// begin SetTag ( i , 0 ) ;
8007: LD_VAR 0 1
8011: PPUSH
8012: LD_INT 0
8014: PPUSH
8015: CALL_OW 109
// continue ;
8019: GO 7552
// end else
8021: GO 8060
// if not CanBeBuiltOnlyResources ( legBase , legBuildings [ 1 ] [ 1 ] ) then
8023: LD_INT 38
8025: PPUSH
8026: LD_EXP 41
8030: PUSH
8031: LD_INT 1
8033: ARRAY
8034: PUSH
8035: LD_INT 1
8037: ARRAY
8038: PPUSH
8039: CALL 10104 0 2
8043: NOT
8044: IFFALSE 8060
// begin SetTag ( i , 0 ) ;
8046: LD_VAR 0 1
8050: PPUSH
8051: LD_INT 0
8053: PPUSH
8054: CALL_OW 109
// continue ;
8058: GO 7552
// end ; undone := FilterUnitsInArea ( legBaseArea , [ f_constructed ] ) ;
8060: LD_ADDR_VAR 0 4
8064: PUSH
8065: LD_INT 2
8067: PPUSH
8068: LD_INT 57
8070: PUSH
8071: EMPTY
8072: LIST
8073: PPUSH
8074: CALL_OW 70
8078: ST_TO_ADDR
// if undone then
8079: LD_VAR 0 4
8083: IFFALSE 8105
// begin ComComplete ( i , undone [ 1 ] ) ;
8085: LD_VAR 0 1
8089: PPUSH
8090: LD_VAR 0 4
8094: PUSH
8095: LD_INT 1
8097: ARRAY
8098: PPUSH
8099: CALL 27438 0 2
// continue ;
8103: GO 7552
// end ; ComBuild ( i , legBuildings [ 1 ] [ 1 ] , legBuildings [ 1 ] [ 2 ] , legBuildings [ 1 ] [ 3 ] , legBuildings [ 1 ] [ 4 ] ) ;
8105: LD_VAR 0 1
8109: PPUSH
8110: LD_EXP 41
8114: PUSH
8115: LD_INT 1
8117: ARRAY
8118: PUSH
8119: LD_INT 1
8121: ARRAY
8122: PPUSH
8123: LD_EXP 41
8127: PUSH
8128: LD_INT 1
8130: ARRAY
8131: PUSH
8132: LD_INT 2
8134: ARRAY
8135: PPUSH
8136: LD_EXP 41
8140: PUSH
8141: LD_INT 1
8143: ARRAY
8144: PUSH
8145: LD_INT 3
8147: ARRAY
8148: PPUSH
8149: LD_EXP 41
8153: PUSH
8154: LD_INT 1
8156: ARRAY
8157: PUSH
8158: LD_INT 4
8160: ARRAY
8161: PPUSH
8162: CALL_OW 145
// end ; if tag = tCrates then
8166: LD_VAR 0 8
8170: PUSH
8171: LD_INT 2
8173: EQUAL
8174: IFFALSE 8311
// begin if IsInUnit ( i ) then
8176: LD_VAR 0 1
8180: PPUSH
8181: CALL_OW 310
8185: IFFALSE 8198
// begin ComExitBuilding ( i ) ;
8187: LD_VAR 0 1
8191: PPUSH
8192: CALL_OW 122
// continue ;
8196: GO 7552
// end ; if not cr then
8198: LD_VAR 0 10
8202: NOT
8203: IFFALSE 8219
// begin SetTag ( i , 0 ) ;
8205: LD_VAR 0 1
8209: PPUSH
8210: LD_INT 0
8212: PPUSH
8213: CALL_OW 109
// continue ;
8217: GO 7552
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
8219: LD_VAR 0 1
8223: PPUSH
8224: CALL_OW 314
8228: NOT
8229: PUSH
8230: LD_INT 81
8232: PUSH
8233: LD_VAR 0 5
8237: PUSH
8238: EMPTY
8239: LIST
8240: LIST
8241: PUSH
8242: LD_INT 92
8244: PUSH
8245: LD_VAR 0 10
8249: PUSH
8250: LD_INT 1
8252: ARRAY
8253: PUSH
8254: LD_VAR 0 10
8258: PUSH
8259: LD_INT 2
8261: ARRAY
8262: PUSH
8263: LD_INT 12
8265: PUSH
8266: EMPTY
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: PUSH
8272: EMPTY
8273: LIST
8274: LIST
8275: PPUSH
8276: CALL_OW 69
8280: NOT
8281: AND
8282: IFFALSE 8311
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
8284: LD_VAR 0 1
8288: PPUSH
8289: LD_VAR 0 10
8293: PUSH
8294: LD_INT 1
8296: ARRAY
8297: PPUSH
8298: LD_VAR 0 10
8302: PUSH
8303: LD_INT 2
8305: ARRAY
8306: PPUSH
8307: CALL_OW 117
// end ; end ;
8311: GO 7552
8313: POP
8314: POP
// end ; sol := UnitFilter ( legForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_mortar ] ] , [ f_ok ] ] ) ;
8315: LD_ADDR_VAR 0 12
8319: PUSH
8320: LD_EXP 36
8324: PPUSH
8325: LD_INT 2
8327: PUSH
8328: LD_INT 25
8330: PUSH
8331: LD_INT 1
8333: PUSH
8334: EMPTY
8335: LIST
8336: LIST
8337: PUSH
8338: LD_INT 25
8340: PUSH
8341: LD_INT 5
8343: PUSH
8344: EMPTY
8345: LIST
8346: LIST
8347: PUSH
8348: LD_INT 25
8350: PUSH
8351: LD_INT 8
8353: PUSH
8354: EMPTY
8355: LIST
8356: LIST
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: PUSH
8364: LD_INT 50
8366: PUSH
8367: EMPTY
8368: LIST
8369: PUSH
8370: EMPTY
8371: LIST
8372: LIST
8373: PPUSH
8374: CALL_OW 72
8378: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( legBaseArea , [ f_enemy , side ] ) ;
8379: LD_ADDR_VAR 0 14
8383: PUSH
8384: LD_INT 2
8386: PPUSH
8387: LD_INT 81
8389: PUSH
8390: LD_VAR 0 5
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: PPUSH
8399: CALL_OW 70
8403: ST_TO_ADDR
// if sol then
8404: LD_VAR 0 12
8408: IFFALSE 8920
// begin if enemyInBase then
8410: LD_VAR 0 14
8414: IFFALSE 8559
// begin for i in sol do
8416: LD_ADDR_VAR 0 1
8420: PUSH
8421: LD_VAR 0 12
8425: PUSH
8426: FOR_IN
8427: IFFALSE 8555
// begin tw := IsInUnit ( i ) ;
8429: LD_ADDR_VAR 0 9
8433: PUSH
8434: LD_VAR 0 1
8438: PPUSH
8439: CALL_OW 310
8443: ST_TO_ADDR
// if tw then
8444: LD_VAR 0 9
8448: IFFALSE 8529
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
8450: LD_VAR 0 9
8454: PUSH
8455: LD_INT 22
8457: PUSH
8458: LD_VAR 0 5
8462: PUSH
8463: EMPTY
8464: LIST
8465: LIST
8466: PUSH
8467: LD_INT 101
8469: PUSH
8470: LD_INT 2
8472: PUSH
8473: EMPTY
8474: LIST
8475: LIST
8476: PUSH
8477: LD_INT 2
8479: PUSH
8480: LD_INT 30
8482: PUSH
8483: LD_INT 32
8485: PUSH
8486: EMPTY
8487: LIST
8488: LIST
8489: PUSH
8490: LD_INT 30
8492: PUSH
8493: LD_INT 31
8495: PUSH
8496: EMPTY
8497: LIST
8498: LIST
8499: PUSH
8500: EMPTY
8501: LIST
8502: LIST
8503: LIST
8504: PUSH
8505: EMPTY
8506: LIST
8507: LIST
8508: LIST
8509: PPUSH
8510: CALL_OW 69
8514: IN
8515: NOT
8516: IFFALSE 8527
// ComExitBuilding ( i ) ;
8518: LD_VAR 0 1
8522: PPUSH
8523: CALL_OW 122
// end else
8527: GO 8553
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
8529: LD_VAR 0 1
8533: PPUSH
8534: LD_VAR 0 14
8538: PPUSH
8539: LD_VAR 0 1
8543: PPUSH
8544: CALL_OW 74
8548: PPUSH
8549: CALL_OW 115
// end ;
8553: GO 8426
8555: POP
8556: POP
// end else
8557: GO 8920
// begin empty := FilterUnitsInArea ( legBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
8559: LD_ADDR_VAR 0 15
8563: PUSH
8564: LD_INT 2
8566: PPUSH
8567: LD_INT 3
8569: PUSH
8570: LD_INT 62
8572: PUSH
8573: EMPTY
8574: LIST
8575: PUSH
8576: EMPTY
8577: LIST
8578: LIST
8579: PUSH
8580: LD_INT 2
8582: PUSH
8583: LD_INT 30
8585: PUSH
8586: LD_INT 32
8588: PUSH
8589: EMPTY
8590: LIST
8591: LIST
8592: PUSH
8593: LD_INT 30
8595: PUSH
8596: LD_INT 4
8598: PUSH
8599: EMPTY
8600: LIST
8601: LIST
8602: PUSH
8603: LD_INT 30
8605: PUSH
8606: LD_INT 5
8608: PUSH
8609: EMPTY
8610: LIST
8611: LIST
8612: PUSH
8613: LD_INT 30
8615: PUSH
8616: LD_INT 31
8618: PUSH
8619: EMPTY
8620: LIST
8621: LIST
8622: PUSH
8623: EMPTY
8624: LIST
8625: LIST
8626: LIST
8627: LIST
8628: LIST
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: PPUSH
8634: CALL_OW 70
8638: ST_TO_ADDR
// if empty then
8639: LD_VAR 0 15
8643: IFFALSE 8660
// empty := ReverseArray ( empty ) ;
8645: LD_ADDR_VAR 0 15
8649: PUSH
8650: LD_VAR 0 15
8654: PPUSH
8655: CALL 52216 0 1
8659: ST_TO_ADDR
// for i in sol do
8660: LD_ADDR_VAR 0 1
8664: PUSH
8665: LD_VAR 0 12
8669: PUSH
8670: FOR_IN
8671: IFFALSE 8918
// begin tag := GetTag ( i ) ;
8673: LD_ADDR_VAR 0 8
8677: PUSH
8678: LD_VAR 0 1
8682: PPUSH
8683: CALL_OW 110
8687: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
8688: LD_VAR 0 1
8692: PPUSH
8693: CALL_OW 256
8697: PUSH
8698: LD_INT 1000
8700: LESS
8701: PUSH
8702: LD_VAR 0 8
8706: PUSH
8707: LD_INT 1
8709: NONEQUAL
8710: AND
8711: IFFALSE 8763
// begin SetTag ( i , tHeal ) ;
8713: LD_VAR 0 1
8717: PPUSH
8718: LD_INT 1
8720: PPUSH
8721: CALL_OW 109
// ComMoveXY ( i , legHealPoint [ 1 ] , legHealPoint [ 2 ] ) ;
8725: LD_VAR 0 1
8729: PPUSH
8730: LD_EXP 40
8734: PUSH
8735: LD_INT 1
8737: ARRAY
8738: PPUSH
8739: LD_EXP 40
8743: PUSH
8744: LD_INT 2
8746: ARRAY
8747: PPUSH
8748: CALL_OW 111
// AddComHold ( i ) ;
8752: LD_VAR 0 1
8756: PPUSH
8757: CALL_OW 200
// continue ;
8761: GO 8670
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
8763: LD_VAR 0 1
8767: PPUSH
8768: CALL_OW 256
8772: PUSH
8773: LD_INT 1000
8775: EQUAL
8776: PUSH
8777: LD_VAR 0 8
8781: PUSH
8782: LD_INT 1
8784: EQUAL
8785: AND
8786: IFFALSE 8802
// begin SetTag ( i , 0 ) ;
8788: LD_VAR 0 1
8792: PPUSH
8793: LD_INT 0
8795: PPUSH
8796: CALL_OW 109
// continue ;
8800: GO 8670
// end ; if HasTask ( i ) then
8802: LD_VAR 0 1
8806: PPUSH
8807: CALL_OW 314
8811: IFFALSE 8815
// continue ;
8813: GO 8670
// if not IsInUnit ( i ) and not tag and empty then
8815: LD_VAR 0 1
8819: PPUSH
8820: CALL_OW 310
8824: NOT
8825: PUSH
8826: LD_VAR 0 8
8830: NOT
8831: AND
8832: PUSH
8833: LD_VAR 0 15
8837: AND
8838: IFFALSE 8916
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
8840: LD_VAR 0 1
8844: PPUSH
8845: LD_VAR 0 15
8849: PUSH
8850: LD_INT 1
8852: ARRAY
8853: PPUSH
8854: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
8858: LD_VAR 0 15
8862: PUSH
8863: LD_INT 1
8865: ARRAY
8866: PPUSH
8867: CALL_OW 266
8871: PUSH
8872: LD_INT 5
8874: EQUAL
8875: PUSH
8876: LD_INT 50
8878: PPUSH
8879: CALL_OW 13
8883: AND
8884: IFFALSE 8898
// AddComChangeProfession ( i , class_mortar ) ;
8886: LD_VAR 0 1
8890: PPUSH
8891: LD_INT 8
8893: PPUSH
8894: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
8898: LD_ADDR_VAR 0 15
8902: PUSH
8903: LD_VAR 0 15
8907: PPUSH
8908: LD_INT 1
8910: PPUSH
8911: CALL_OW 3
8915: ST_TO_ADDR
// end ; end ;
8916: GO 8670
8918: POP
8919: POP
// end ; end ; end ;
8920: PPOPN 18
8922: END
// every 0 0$2 trigger IsOk ( legCargo ) and legScriptActive do var cr , enemyInArea ;
8923: LD_EXP 43
8927: PPUSH
8928: CALL_OW 302
8932: PUSH
8933: LD_EXP 4
8937: AND
8938: IFFALSE 9220
8940: GO 8942
8942: DISABLE
8943: LD_INT 0
8945: PPUSH
8946: PPUSH
// begin enable ;
8947: ENABLE
// enemyInArea := FilterUnitsInArea ( legBaseArea , [ [ f_enemy , 8 ] , [ f_ok ] ] ) ;
8948: LD_ADDR_VAR 0 2
8952: PUSH
8953: LD_INT 2
8955: PPUSH
8956: LD_INT 81
8958: PUSH
8959: LD_INT 8
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: PUSH
8966: LD_INT 50
8968: PUSH
8969: EMPTY
8970: LIST
8971: PUSH
8972: EMPTY
8973: LIST
8974: LIST
8975: PPUSH
8976: CALL_OW 70
8980: ST_TO_ADDR
// cr := GetListOfCratesInArea ( cratesNorthArea ) ;
8981: LD_ADDR_VAR 0 1
8985: PUSH
8986: LD_INT 16
8988: PPUSH
8989: CALL_OW 435
8993: ST_TO_ADDR
// if GetFuel ( legCargo ) < 10 and not See ( 2 , legCargo ) and GetEngine ( legCargo ) = engine_combustion then
8994: LD_EXP 43
8998: PPUSH
8999: CALL_OW 261
9003: PUSH
9004: LD_INT 10
9006: LESS
9007: PUSH
9008: LD_INT 2
9010: PPUSH
9011: LD_EXP 43
9015: PPUSH
9016: CALL_OW 292
9020: NOT
9021: AND
9022: PUSH
9023: LD_EXP 43
9027: PPUSH
9028: CALL_OW 262
9032: PUSH
9033: LD_INT 1
9035: EQUAL
9036: AND
9037: IFFALSE 9051
// SetFuel ( legCargo , 100 ) ;
9039: LD_EXP 43
9043: PPUSH
9044: LD_INT 100
9046: PPUSH
9047: CALL_OW 240
// if not HasTask ( legCargo ) and GetCargo ( legCargo , mat_cans ) < 100 and not enemyInArea then
9051: LD_EXP 43
9055: PPUSH
9056: CALL_OW 314
9060: NOT
9061: PUSH
9062: LD_EXP 43
9066: PPUSH
9067: LD_INT 1
9069: PPUSH
9070: CALL_OW 289
9074: PUSH
9075: LD_INT 100
9077: LESS
9078: AND
9079: PUSH
9080: LD_VAR 0 2
9084: NOT
9085: AND
9086: IFFALSE 9152
// begin if cr then
9088: LD_VAR 0 1
9092: IFFALSE 9123
// ComCollect ( legCargo , cr [ 1 ] , cr [ 2 ] ) else
9094: LD_EXP 43
9098: PPUSH
9099: LD_VAR 0 1
9103: PUSH
9104: LD_INT 1
9106: ARRAY
9107: PPUSH
9108: LD_VAR 0 1
9112: PUSH
9113: LD_INT 2
9115: ARRAY
9116: PPUSH
9117: CALL_OW 117
9121: GO 9150
// if not IsInArea ( legCargo , cratesNorthArea ) then
9123: LD_EXP 43
9127: PPUSH
9128: LD_INT 16
9130: PPUSH
9131: CALL_OW 308
9135: NOT
9136: IFFALSE 9150
// ComMoveToArea ( legCargo , cratesNorthArea ) ;
9138: LD_EXP 43
9142: PPUSH
9143: LD_INT 16
9145: PPUSH
9146: CALL_OW 113
// exit ;
9150: GO 9220
// end ; if enemyInArea and not IsInArea ( legCargo , legBaseArea ) then
9152: LD_VAR 0 2
9156: PUSH
9157: LD_EXP 43
9161: PPUSH
9162: LD_INT 2
9164: PPUSH
9165: CALL_OW 308
9169: NOT
9170: AND
9171: IFFALSE 9190
// ComMoveXY ( legCargo , 194 , 17 ) else
9173: LD_EXP 43
9177: PPUSH
9178: LD_INT 194
9180: PPUSH
9181: LD_INT 17
9183: PPUSH
9184: CALL_OW 111
9188: GO 9220
// if GetCargo ( legCargo , mat_cans ) = 100 then
9190: LD_EXP 43
9194: PPUSH
9195: LD_INT 1
9197: PPUSH
9198: CALL_OW 289
9202: PUSH
9203: LD_INT 100
9205: EQUAL
9206: IFFALSE 9220
// ComGive ( legCargo , legBase ) ;
9208: LD_EXP 43
9212: PPUSH
9213: LD_INT 38
9215: PPUSH
9216: CALL_OW 161
// end ;
9220: PPOPN 2
9222: END
// every 12 12$00 trigger Count ( legTanks ) < 5 and legScriptActive and spotByLegion do var i , parts , part ;
9223: LD_EXP 42
9227: PPUSH
9228: CALL 21340 0 1
9232: PUSH
9233: LD_INT 5
9235: LESS
9236: PUSH
9237: LD_EXP 4
9241: AND
9242: PUSH
9243: LD_EXP 9
9247: AND
9248: IFFALSE 9442
9250: GO 9252
9252: DISABLE
9253: LD_INT 0
9255: PPUSH
9256: PPUSH
9257: PPUSH
// begin enable ;
9258: ENABLE
// parts := [ [ ar_medium_trike , ar_rocket_launcher ] , [ ar_medium_trike , ar_gun ] , [ ar_medium_trike , ar_flame_thrower ] , [ ar_half_tracked , ar_flame_thrower ] , [ ar_half_tracked , ar_rocket_launcher ] , [ ar_half_tracked , ar_gatling_gun ] ] ;
9259: LD_ADDR_VAR 0 2
9263: PUSH
9264: LD_INT 13
9266: PUSH
9267: LD_INT 28
9269: PUSH
9270: EMPTY
9271: LIST
9272: LIST
9273: PUSH
9274: LD_INT 13
9276: PUSH
9277: LD_INT 27
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: PUSH
9284: LD_INT 13
9286: PUSH
9287: LD_INT 26
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: PUSH
9294: LD_INT 14
9296: PUSH
9297: LD_INT 26
9299: PUSH
9300: EMPTY
9301: LIST
9302: LIST
9303: PUSH
9304: LD_INT 14
9306: PUSH
9307: LD_INT 28
9309: PUSH
9310: EMPTY
9311: LIST
9312: LIST
9313: PUSH
9314: LD_INT 14
9316: PUSH
9317: LD_INT 25
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: PUSH
9324: EMPTY
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
9332: LD_ADDR_VAR 0 1
9336: PUSH
9337: DOUBLE
9338: LD_INT 1
9340: DEC
9341: ST_TO_ADDR
9342: LD_INT 4
9344: PUSH
9345: LD_INT 5
9347: PUSH
9348: LD_INT 6
9350: PUSH
9351: LD_INT 6
9353: PUSH
9354: EMPTY
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: PUSH
9360: LD_OWVAR 67
9364: ARRAY
9365: PUSH
9366: FOR_TO
9367: IFFALSE 9440
// begin part := parts [ rand ( 1 , parts ) ] ;
9369: LD_ADDR_VAR 0 3
9373: PUSH
9374: LD_VAR 0 2
9378: PUSH
9379: LD_INT 1
9381: PPUSH
9382: LD_VAR 0 2
9386: PPUSH
9387: CALL_OW 12
9391: ARRAY
9392: ST_TO_ADDR
// legConstructList := Join ( legConstructList , [ part [ 1 ] , engine_combustion , control_remote , part [ 2 ] ] ) end ;
9393: LD_ADDR_EXP 39
9397: PUSH
9398: LD_EXP 39
9402: PPUSH
9403: LD_VAR 0 3
9407: PUSH
9408: LD_INT 1
9410: ARRAY
9411: PUSH
9412: LD_INT 1
9414: PUSH
9415: LD_INT 2
9417: PUSH
9418: LD_VAR 0 3
9422: PUSH
9423: LD_INT 2
9425: ARRAY
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: PPUSH
9433: CALL 56940 0 2
9437: ST_TO_ADDR
9438: GO 9366
9440: POP
9441: POP
// end ;
9442: PPOPN 3
9444: END
// every 20 20$00 trigger not legionDestroyed and tick <= 60 60$00 do
9445: LD_EXP 12
9449: NOT
9450: PUSH
9451: LD_OWVAR 1
9455: PUSH
9456: LD_INT 126000
9458: LESSEQUAL
9459: AND
9460: IFFALSE 9499
9462: GO 9464
9464: DISABLE
// begin enable ;
9465: ENABLE
// legConstructList := Join ( legConstructList , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] ) ;
9466: LD_ADDR_EXP 39
9470: PUSH
9471: LD_EXP 39
9475: PPUSH
9476: LD_INT 14
9478: PUSH
9479: LD_INT 1
9481: PUSH
9482: LD_INT 1
9484: PUSH
9485: LD_INT 27
9487: PUSH
9488: EMPTY
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: PPUSH
9494: CALL 56940 0 2
9498: ST_TO_ADDR
// end ;
9499: END
// every 0 0$1 trigger legTanks do var i , mech , enemy ;
9500: LD_EXP 42
9504: IFFALSE 10101
9506: GO 9508
9508: DISABLE
9509: LD_INT 0
9511: PPUSH
9512: PPUSH
9513: PPUSH
// begin enable ;
9514: ENABLE
// if not legTanks then
9515: LD_EXP 42
9519: NOT
9520: IFFALSE 9524
// exit ;
9522: GO 10101
// for i in legTanks do
9524: LD_ADDR_VAR 0 1
9528: PUSH
9529: LD_EXP 42
9533: PUSH
9534: FOR_IN
9535: IFFALSE 10099
// begin if not IsOk ( i ) or GetSide ( i ) <> 8 then
9537: LD_VAR 0 1
9541: PPUSH
9542: CALL_OW 302
9546: NOT
9547: PUSH
9548: LD_VAR 0 1
9552: PPUSH
9553: CALL_OW 255
9557: PUSH
9558: LD_INT 8
9560: NONEQUAL
9561: OR
9562: IFFALSE 9582
// begin legTanks := legTanks diff i ;
9564: LD_ADDR_EXP 42
9568: PUSH
9569: LD_EXP 42
9573: PUSH
9574: LD_VAR 0 1
9578: DIFF
9579: ST_TO_ADDR
// continue ;
9580: GO 9534
// end ; if not GetTag ( i ) and GetControl ( i ) = control_remote then
9582: LD_VAR 0 1
9586: PPUSH
9587: CALL_OW 110
9591: NOT
9592: PUSH
9593: LD_VAR 0 1
9597: PPUSH
9598: CALL_OW 263
9602: PUSH
9603: LD_INT 2
9605: EQUAL
9606: AND
9607: IFFALSE 9621
// SetTag ( i , tAttack ) ;
9609: LD_VAR 0 1
9613: PPUSH
9614: LD_INT 10
9616: PPUSH
9617: CALL_OW 109
// if not GetTag ( i ) or GetTag ( i ) = 0 then
9621: LD_VAR 0 1
9625: PPUSH
9626: CALL_OW 110
9630: NOT
9631: PUSH
9632: LD_VAR 0 1
9636: PPUSH
9637: CALL_OW 110
9641: PUSH
9642: LD_INT 0
9644: EQUAL
9645: OR
9646: IFFALSE 9776
// begin if GetFuel ( i ) < 50 and GetEngine ( i ) = engine_combustion then
9648: LD_VAR 0 1
9652: PPUSH
9653: CALL_OW 261
9657: PUSH
9658: LD_INT 50
9660: LESS
9661: PUSH
9662: LD_VAR 0 1
9666: PPUSH
9667: CALL_OW 262
9671: PUSH
9672: LD_INT 1
9674: EQUAL
9675: AND
9676: IFFALSE 9735
// begin ComMoveXY ( i , 189 , 19 ) ;
9678: LD_VAR 0 1
9682: PPUSH
9683: LD_INT 189
9685: PPUSH
9686: LD_INT 19
9688: PPUSH
9689: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9693: LD_INT 35
9695: PPUSH
9696: CALL_OW 67
// until GetDistUnitXY ( i , 189 , 19 ) < 4 ;
9700: LD_VAR 0 1
9704: PPUSH
9705: LD_INT 189
9707: PPUSH
9708: LD_INT 19
9710: PPUSH
9711: CALL_OW 297
9715: PUSH
9716: LD_INT 4
9718: LESS
9719: IFFALSE 9693
// SetFuel ( i , 100 ) ;
9721: LD_VAR 0 1
9725: PPUSH
9726: LD_INT 100
9728: PPUSH
9729: CALL_OW 240
// end else
9733: GO 9776
// if not IsInArea ( i , legParkingArea ) then
9735: LD_VAR 0 1
9739: PPUSH
9740: LD_INT 15
9742: PPUSH
9743: CALL_OW 308
9747: NOT
9748: IFFALSE 9764
// ComMoveToArea ( i , legParkingArea ) else
9750: LD_VAR 0 1
9754: PPUSH
9755: LD_INT 15
9757: PPUSH
9758: CALL_OW 113
9762: GO 9776
// SetTag ( i , tParking ) ;
9764: LD_VAR 0 1
9768: PPUSH
9769: LD_INT 9
9771: PPUSH
9772: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
9776: LD_VAR 0 1
9780: PPUSH
9781: CALL_OW 110
9785: PUSH
9786: LD_INT 9
9788: EQUAL
9789: IFFALSE 9919
// begin if GetLives ( i ) < 650 then
9791: LD_VAR 0 1
9795: PPUSH
9796: CALL_OW 256
9800: PUSH
9801: LD_INT 650
9803: LESS
9804: IFFALSE 9896
// begin if not IsDrivenBy ( i ) then
9806: LD_VAR 0 1
9810: PPUSH
9811: CALL_OW 311
9815: NOT
9816: IFFALSE 9820
// continue ;
9818: GO 9534
// mech := IsDrivenBy ( i ) ;
9820: LD_ADDR_VAR 0 2
9824: PUSH
9825: LD_VAR 0 1
9829: PPUSH
9830: CALL_OW 311
9834: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
9835: LD_VAR 0 2
9839: PPUSH
9840: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
9844: LD_VAR 0 2
9848: PPUSH
9849: LD_VAR 0 1
9853: PPUSH
9854: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
9858: LD_INT 35
9860: PPUSH
9861: CALL_OW 67
// until GetLives ( i ) = 1000 ;
9865: LD_VAR 0 1
9869: PPUSH
9870: CALL_OW 256
9874: PUSH
9875: LD_INT 1000
9877: EQUAL
9878: IFFALSE 9858
// ComEnterUnit ( mech , i ) ;
9880: LD_VAR 0 2
9884: PPUSH
9885: LD_VAR 0 1
9889: PPUSH
9890: CALL_OW 120
// end else
9894: GO 9919
// if IsDrivenBy ( i ) then
9896: LD_VAR 0 1
9900: PPUSH
9901: CALL_OW 311
9905: IFFALSE 9919
// SetTag ( i , tAttack ) ;
9907: LD_VAR 0 1
9911: PPUSH
9912: LD_INT 10
9914: PPUSH
9915: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
9919: LD_VAR 0 1
9923: PPUSH
9924: CALL_OW 110
9928: PUSH
9929: LD_INT 10
9931: EQUAL
9932: IFFALSE 10097
// begin enemy := FilterUnitsInArea ( legBaseArea , [ f_enemy , 8 ] ) ;
9934: LD_ADDR_VAR 0 3
9938: PUSH
9939: LD_INT 2
9941: PPUSH
9942: LD_INT 81
9944: PUSH
9945: LD_INT 8
9947: PUSH
9948: EMPTY
9949: LIST
9950: LIST
9951: PPUSH
9952: CALL_OW 70
9956: ST_TO_ADDR
// if GetLives ( i ) < 650 and GetControl ( i ) = control_manual then
9957: LD_VAR 0 1
9961: PPUSH
9962: CALL_OW 256
9966: PUSH
9967: LD_INT 650
9969: LESS
9970: PUSH
9971: LD_VAR 0 1
9975: PPUSH
9976: CALL_OW 263
9980: PUSH
9981: LD_INT 1
9983: EQUAL
9984: AND
9985: IFFALSE 10010
// begin ComStop ( i ) ;
9987: LD_VAR 0 1
9991: PPUSH
9992: CALL_OW 141
// SetTag ( i , 0 ) ;
9996: LD_VAR 0 1
10000: PPUSH
10001: LD_INT 0
10003: PPUSH
10004: CALL_OW 109
// continue ;
10008: GO 9534
// end ; if enemy then
10010: LD_VAR 0 3
10014: IFFALSE 10054
// begin if not HasTask ( i ) then
10016: LD_VAR 0 1
10020: PPUSH
10021: CALL_OW 314
10025: NOT
10026: IFFALSE 10052
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10028: LD_VAR 0 1
10032: PPUSH
10033: LD_VAR 0 3
10037: PPUSH
10038: LD_VAR 0 1
10042: PPUSH
10043: CALL_OW 74
10047: PPUSH
10048: CALL 61012 0 2
// end else
10052: GO 10097
// if legTanks >= 4 then
10054: LD_EXP 42
10058: PUSH
10059: LD_INT 4
10061: GREATEREQUAL
10062: IFFALSE 10097
// AgressiveMove ( i , [ [ 200 , 48 ] , [ 210 , 74 ] ] ) ;
10064: LD_VAR 0 1
10068: PPUSH
10069: LD_INT 200
10071: PUSH
10072: LD_INT 48
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: PUSH
10079: LD_INT 210
10081: PUSH
10082: LD_INT 74
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: PUSH
10089: EMPTY
10090: LIST
10091: LIST
10092: PPUSH
10093: CALL 59544 0 2
// end ; end ;
10097: GO 9534
10099: POP
10100: POP
// end ; end_of_file
10101: PPOPN 3
10103: END
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
10104: LD_INT 0
10106: PPUSH
10107: PPUSH
10108: PPUSH
// if btype = b_depot then
10109: LD_VAR 0 2
10113: PUSH
10114: LD_INT 0
10116: EQUAL
10117: IFFALSE 10129
// begin result := true ;
10119: LD_ADDR_VAR 0 3
10123: PUSH
10124: LD_INT 1
10126: ST_TO_ADDR
// exit ;
10127: GO 10245
// end ; pom := GetBase ( depot ) ;
10129: LD_ADDR_VAR 0 4
10133: PUSH
10134: LD_VAR 0 1
10138: PPUSH
10139: CALL_OW 274
10143: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
10144: LD_ADDR_VAR 0 5
10148: PUSH
10149: LD_VAR 0 2
10153: PPUSH
10154: LD_VAR 0 1
10158: PPUSH
10159: CALL_OW 248
10163: PPUSH
10164: CALL_OW 450
10168: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
10169: LD_ADDR_VAR 0 3
10173: PUSH
10174: LD_VAR 0 4
10178: PPUSH
10179: LD_INT 1
10181: PPUSH
10182: CALL_OW 275
10186: PUSH
10187: LD_VAR 0 5
10191: PUSH
10192: LD_INT 1
10194: ARRAY
10195: GREATEREQUAL
10196: PUSH
10197: LD_VAR 0 4
10201: PPUSH
10202: LD_INT 2
10204: PPUSH
10205: CALL_OW 275
10209: PUSH
10210: LD_VAR 0 5
10214: PUSH
10215: LD_INT 2
10217: ARRAY
10218: GREATEREQUAL
10219: AND
10220: PUSH
10221: LD_VAR 0 4
10225: PPUSH
10226: LD_INT 3
10228: PPUSH
10229: CALL_OW 275
10233: PUSH
10234: LD_VAR 0 5
10238: PUSH
10239: LD_INT 3
10241: ARRAY
10242: GREATEREQUAL
10243: AND
10244: ST_TO_ADDR
// end ;
10245: LD_VAR 0 3
10249: RET
// export function CreateNature ; var i , areas , amount ; begin
10250: LD_INT 0
10252: PPUSH
10253: PPUSH
10254: PPUSH
10255: PPUSH
// PrepareTiger ( 0 ) ;
10256: LD_INT 0
10258: PPUSH
10259: CALL 53316 0 1
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
10263: LD_ADDR_VAR 0 2
10267: PUSH
10268: DOUBLE
10269: LD_INT 1
10271: DEC
10272: ST_TO_ADDR
10273: LD_INT 3
10275: PUSH
10276: LD_INT 4
10278: PUSH
10279: LD_INT 5
10281: PUSH
10282: LD_INT 6
10284: PUSH
10285: EMPTY
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: PUSH
10291: LD_OWVAR 67
10295: ARRAY
10296: PUSH
10297: FOR_TO
10298: IFFALSE 10317
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
10300: CALL_OW 44
10304: PPUSH
10305: LD_INT 7
10307: PPUSH
10308: LD_INT 0
10310: PPUSH
10311: CALL_OW 49
10315: GO 10297
10317: POP
10318: POP
// PrepareBird ;
10319: CALL 53497 0 0
// for i := 1 to 3 do
10323: LD_ADDR_VAR 0 2
10327: PUSH
10328: DOUBLE
10329: LD_INT 1
10331: DEC
10332: ST_TO_ADDR
10333: LD_INT 3
10335: PUSH
10336: FOR_TO
10337: IFFALSE 10356
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
10339: CALL_OW 44
10343: PPUSH
10344: LD_INT 7
10346: PPUSH
10347: LD_INT 0
10349: PPUSH
10350: CALL_OW 49
10354: GO 10336
10356: POP
10357: POP
// PrepareHorse ;
10358: CALL 53537 0 0
// for i := 1 to 3 do
10362: LD_ADDR_VAR 0 2
10366: PUSH
10367: DOUBLE
10368: LD_INT 1
10370: DEC
10371: ST_TO_ADDR
10372: LD_INT 3
10374: PUSH
10375: FOR_TO
10376: IFFALSE 10395
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
10378: CALL_OW 44
10382: PPUSH
10383: LD_INT 7
10385: PPUSH
10386: LD_INT 0
10388: PPUSH
10389: CALL_OW 49
10393: GO 10375
10395: POP
10396: POP
// PrepareFrog ;
10397: CALL 53417 0 0
// for i := 1 to 3 do
10401: LD_ADDR_VAR 0 2
10405: PUSH
10406: DOUBLE
10407: LD_INT 1
10409: DEC
10410: ST_TO_ADDR
10411: LD_INT 3
10413: PUSH
10414: FOR_TO
10415: IFFALSE 10434
// PlaceUnitArea ( CreateHuman , frogArea , false ) ;
10417: CALL_OW 44
10421: PPUSH
10422: LD_INT 8
10424: PPUSH
10425: LD_INT 0
10427: PPUSH
10428: CALL_OW 49
10432: GO 10414
10434: POP
10435: POP
// amount := [ 3 , 2 , 2 , 1 ] [ Difficulty ] ;
10436: LD_ADDR_VAR 0 4
10440: PUSH
10441: LD_INT 3
10443: PUSH
10444: LD_INT 2
10446: PUSH
10447: LD_INT 2
10449: PUSH
10450: LD_INT 1
10452: PUSH
10453: EMPTY
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: PUSH
10459: LD_OWVAR 67
10463: ARRAY
10464: ST_TO_ADDR
// areas := [ mastodont1Area , mastodont2Area , mastodont3Area , mastodont4Area ] ;
10465: LD_ADDR_VAR 0 3
10469: PUSH
10470: LD_INT 18
10472: PUSH
10473: LD_INT 19
10475: PUSH
10476: LD_INT 20
10478: PUSH
10479: LD_INT 21
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: ST_TO_ADDR
// PrepareMastodont ;
10488: CALL 53577 0 0
// for i := 1 to amount do
10492: LD_ADDR_VAR 0 2
10496: PUSH
10497: DOUBLE
10498: LD_INT 1
10500: DEC
10501: ST_TO_ADDR
10502: LD_VAR 0 4
10506: PUSH
10507: FOR_TO
10508: IFFALSE 10545
// PlaceUnitArea ( CreateVehicle , areas [ ( i - 1 ) + Difficulty ] , false ) ;
10510: CALL_OW 45
10514: PPUSH
10515: LD_VAR 0 3
10519: PUSH
10520: LD_VAR 0 2
10524: PUSH
10525: LD_INT 1
10527: MINUS
10528: PUSH
10529: LD_OWVAR 67
10533: PLUS
10534: ARRAY
10535: PPUSH
10536: LD_INT 0
10538: PPUSH
10539: CALL_OW 49
10543: GO 10507
10545: POP
10546: POP
// PrepareApeman ( 0 ) ;
10547: LD_INT 0
10549: PPUSH
10550: CALL 53208 0 1
// for i := 1 to [ 9 , 7 , 6 , 5 ] [ Difficulty ] do
10554: LD_ADDR_VAR 0 2
10558: PUSH
10559: DOUBLE
10560: LD_INT 1
10562: DEC
10563: ST_TO_ADDR
10564: LD_INT 9
10566: PUSH
10567: LD_INT 7
10569: PUSH
10570: LD_INT 6
10572: PUSH
10573: LD_INT 5
10575: PUSH
10576: EMPTY
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: PUSH
10582: LD_OWVAR 67
10586: ARRAY
10587: PUSH
10588: FOR_TO
10589: IFFALSE 10608
// PlaceUnitArea ( CreateHuman , apeArea , false ) ;
10591: CALL_OW 44
10595: PPUSH
10596: LD_INT 6
10598: PPUSH
10599: LD_INT 0
10601: PPUSH
10602: CALL_OW 49
10606: GO 10588
10608: POP
10609: POP
// for i := 1 to 3 do
10610: LD_ADDR_VAR 0 2
10614: PUSH
10615: DOUBLE
10616: LD_INT 1
10618: DEC
10619: ST_TO_ADDR
10620: LD_INT 3
10622: PUSH
10623: FOR_TO
10624: IFFALSE 10649
// PlaceUnitXYR ( CreateHuman , 274 , 133 , 6 , false ) ;
10626: CALL_OW 44
10630: PPUSH
10631: LD_INT 274
10633: PPUSH
10634: LD_INT 133
10636: PPUSH
10637: LD_INT 6
10639: PPUSH
10640: LD_INT 0
10642: PPUSH
10643: CALL_OW 50
10647: GO 10623
10649: POP
10650: POP
// end ;
10651: LD_VAR 0 1
10655: RET
// export function AreInArea ( units , area ) ; var i ; begin
10656: LD_INT 0
10658: PPUSH
10659: PPUSH
// result := false ;
10660: LD_ADDR_VAR 0 3
10664: PUSH
10665: LD_INT 0
10667: ST_TO_ADDR
// if not units then
10668: LD_VAR 0 1
10672: NOT
10673: IFFALSE 10677
// exit ;
10675: GO 10743
// for i in units do
10677: LD_ADDR_VAR 0 4
10681: PUSH
10682: LD_VAR 0 1
10686: PUSH
10687: FOR_IN
10688: IFFALSE 10741
// if IsInArea ( i , area ) or IsInArea ( IsInUnit ( i ) , area ) then
10690: LD_VAR 0 4
10694: PPUSH
10695: LD_VAR 0 2
10699: PPUSH
10700: CALL_OW 308
10704: PUSH
10705: LD_VAR 0 4
10709: PPUSH
10710: CALL_OW 310
10714: PPUSH
10715: LD_VAR 0 2
10719: PPUSH
10720: CALL_OW 308
10724: OR
10725: IFFALSE 10739
// begin result := true ;
10727: LD_ADDR_VAR 0 3
10731: PUSH
10732: LD_INT 1
10734: ST_TO_ADDR
// exit ;
10735: POP
10736: POP
10737: GO 10743
// end ;
10739: GO 10687
10741: POP
10742: POP
// end ; end_of_file
10743: LD_VAR 0 3
10747: RET
// export function Action ; var i , mech , veh , amTroops ; begin
10748: LD_INT 0
10750: PPUSH
10751: PPUSH
10752: PPUSH
10753: PPUSH
10754: PPUSH
// InGameOn ;
10755: CALL_OW 8
// CenterNowOnXY ( 84 , 28 ) ;
10759: LD_INT 84
10761: PPUSH
10762: LD_INT 28
10764: PPUSH
10765: CALL_OW 86
// RevealFogArea ( 2 , heikeVisibleRoadArea ) ;
10769: LD_INT 2
10771: PPUSH
10772: LD_INT 9
10774: PPUSH
10775: CALL_OW 332
// ComMoveXY ( Heike , 90 , 30 ) ;
10779: LD_EXP 22
10783: PPUSH
10784: LD_INT 90
10786: PPUSH
10787: LD_INT 30
10789: PPUSH
10790: CALL_OW 111
// uc_side := 1 ;
10794: LD_ADDR_OWVAR 20
10798: PUSH
10799: LD_INT 1
10801: ST_TO_ADDR
// uc_nation := nation_american ;
10802: LD_ADDR_OWVAR 21
10806: PUSH
10807: LD_INT 1
10809: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 66 ) ;
10810: LD_INT 3
10812: PPUSH
10813: LD_INT 1
10815: PPUSH
10816: LD_INT 1
10818: PPUSH
10819: LD_INT 9
10821: PPUSH
10822: LD_INT 66
10824: PPUSH
10825: CALL 24078 0 5
// veh := CreateVehicle ;
10829: LD_ADDR_VAR 0 4
10833: PUSH
10834: CALL_OW 45
10838: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
10839: LD_VAR 0 4
10843: PPUSH
10844: LD_INT 1
10846: PPUSH
10847: CALL_OW 233
// PlaceUnitXY ( veh , 80 , 27 , false ) ;
10851: LD_VAR 0 4
10855: PPUSH
10856: LD_INT 80
10858: PPUSH
10859: LD_INT 27
10861: PPUSH
10862: LD_INT 0
10864: PPUSH
10865: CALL_OW 48
// PrepareMechanic ( sex_male , 8 ) ;
10869: LD_INT 1
10871: PPUSH
10872: LD_INT 8
10874: PPUSH
10875: CALL_OW 383
// mech := CreateHuman ;
10879: LD_ADDR_VAR 0 3
10883: PUSH
10884: CALL_OW 44
10888: ST_TO_ADDR
// PlaceHumanInUnit ( mech , veh ) ;
10889: LD_VAR 0 3
10893: PPUSH
10894: LD_VAR 0 4
10898: PPUSH
10899: CALL_OW 52
// repeat wait ( 0 0$1 ) ;
10903: LD_INT 35
10905: PPUSH
10906: CALL_OW 67
// until HexInfo ( 90 , 30 ) ;
10910: LD_INT 90
10912: PPUSH
10913: LD_INT 30
10915: PPUSH
10916: CALL_OW 428
10920: IFFALSE 10903
// PlaceSeeing ( 80 , 27 , 2 , - 6 ) ;
10922: LD_INT 80
10924: PPUSH
10925: LD_INT 27
10927: PPUSH
10928: LD_INT 2
10930: PPUSH
10931: LD_INT 6
10933: NEG
10934: PPUSH
10935: CALL_OW 330
// CenterNowOnXY ( 80 , 27 ) ;
10939: LD_INT 80
10941: PPUSH
10942: LD_INT 27
10944: PPUSH
10945: CALL_OW 86
// DialogueOn ;
10949: CALL_OW 6
// Say ( Heike , DH-Start-1 ) ;
10953: LD_EXP 22
10957: PPUSH
10958: LD_STRING DH-Start-1
10960: PPUSH
10961: CALL_OW 88
// DialogueOff ;
10965: CALL_OW 7
// ComAttackUnit ( Heike , veh ) ;
10969: LD_EXP 22
10973: PPUSH
10974: LD_VAR 0 4
10978: PPUSH
10979: CALL_OW 115
// wait ( 0 0$1 ) ;
10983: LD_INT 35
10985: PPUSH
10986: CALL_OW 67
// SetLives ( IsInUnit ( Heike ) , 200 ) ;
10990: LD_EXP 22
10994: PPUSH
10995: CALL_OW 310
10999: PPUSH
11000: LD_INT 200
11002: PPUSH
11003: CALL_OW 234
// wait ( 0 0$0.3 ) ;
11007: LD_INT 10
11009: PPUSH
11010: CALL_OW 67
// DialogueOn ;
11014: CALL_OW 6
// Say ( Heike , DH-Start-2 ) ;
11018: LD_EXP 22
11022: PPUSH
11023: LD_STRING DH-Start-2
11025: PPUSH
11026: CALL_OW 88
// DialogueOff ;
11030: CALL_OW 7
// ComAttackUnit ( Heike , veh ) ;
11034: LD_EXP 22
11038: PPUSH
11039: LD_VAR 0 4
11043: PPUSH
11044: CALL_OW 115
// wait ( 0 0$0.2 ) ;
11048: LD_INT 7
11050: PPUSH
11051: CALL_OW 67
// ComCrawl ( Heike ) ;
11055: LD_EXP 22
11059: PPUSH
11060: CALL_OW 137
// wait ( 0 0$3 ) ;
11064: LD_INT 105
11066: PPUSH
11067: CALL_OW 67
// PlaceUnitXY ( omarVehicle , 82 , 43 , false ) ;
11071: LD_EXP 25
11075: PPUSH
11076: LD_INT 82
11078: PPUSH
11079: LD_INT 43
11081: PPUSH
11082: LD_INT 0
11084: PPUSH
11085: CALL_OW 48
// PlaceHumanInUnit ( Omar , omarVehicle ) ;
11089: LD_EXP 23
11093: PPUSH
11094: LD_EXP 25
11098: PPUSH
11099: CALL_OW 52
// ComMoveXY ( Omar , 79 , 32 ) ;
11103: LD_EXP 23
11107: PPUSH
11108: LD_INT 79
11110: PPUSH
11111: LD_INT 32
11113: PPUSH
11114: CALL_OW 111
// wait ( 0 0$1 ) ;
11118: LD_INT 35
11120: PPUSH
11121: CALL_OW 67
// PlaceSeeing ( 79 , 32 , 2 , - 8 ) ;
11125: LD_INT 79
11127: PPUSH
11128: LD_INT 32
11130: PPUSH
11131: LD_INT 2
11133: PPUSH
11134: LD_INT 8
11136: NEG
11137: PPUSH
11138: CALL_OW 330
// wait ( 0 0$3 ) ;
11142: LD_INT 105
11144: PPUSH
11145: CALL_OW 67
// SetLives ( veh , 200 ) ;
11149: LD_VAR 0 4
11153: PPUSH
11154: LD_INT 200
11156: PPUSH
11157: CALL_OW 234
// wait ( 0 0$1 ) ;
11161: LD_INT 35
11163: PPUSH
11164: CALL_OW 67
// SetLives ( mech , 10 ) ;
11168: LD_VAR 0 3
11172: PPUSH
11173: LD_INT 10
11175: PPUSH
11176: CALL_OW 234
// wait ( 0 0$2 ) ;
11180: LD_INT 70
11182: PPUSH
11183: CALL_OW 67
// ComWalk ( Heike ) ;
11187: LD_EXP 22
11191: PPUSH
11192: CALL_OW 138
// wait ( 1 ) ;
11196: LD_INT 1
11198: PPUSH
11199: CALL_OW 67
// ComMoveXY ( Heike , 81 , 25 ) ;
11203: LD_EXP 22
11207: PPUSH
11208: LD_INT 81
11210: PPUSH
11211: LD_INT 25
11213: PPUSH
11214: CALL_OW 111
// AddComMoveXY ( Heike , 72 , 25 ) ;
11218: LD_EXP 22
11222: PPUSH
11223: LD_INT 72
11225: PPUSH
11226: LD_INT 25
11228: PPUSH
11229: CALL_OW 171
// wait ( 0 0$3 ) ;
11233: LD_INT 105
11235: PPUSH
11236: CALL_OW 67
// ComExitVehicle ( Omar ) ;
11240: LD_EXP 23
11244: PPUSH
11245: CALL_OW 121
// wait ( 1 ) ;
11249: LD_INT 1
11251: PPUSH
11252: CALL_OW 67
// ComMoveXY ( Omar , 77 , 28 ) ;
11256: LD_EXP 23
11260: PPUSH
11261: LD_INT 77
11263: PPUSH
11264: LD_INT 28
11266: PPUSH
11267: CALL_OW 111
// AddComTurnUnit ( Omar , Heike ) ;
11271: LD_EXP 23
11275: PPUSH
11276: LD_EXP 22
11280: PPUSH
11281: CALL_OW 179
// Say ( Omar , DO-Start-3 ) ;
11285: LD_EXP 23
11289: PPUSH
11290: LD_STRING DO-Start-3
11292: PPUSH
11293: CALL_OW 88
// repeat wait ( 3 ) ;
11297: LD_INT 3
11299: PPUSH
11300: CALL_OW 67
// until IsAt ( Heike , 72 , 25 ) ;
11304: LD_EXP 22
11308: PPUSH
11309: LD_INT 72
11311: PPUSH
11312: LD_INT 25
11314: PPUSH
11315: CALL_OW 307
11319: IFFALSE 11297
// ComHold ( Heike ) ;
11321: LD_EXP 22
11325: PPUSH
11326: CALL_OW 140
// ComTurnUnit ( Omar , Heike ) ;
11330: LD_EXP 23
11334: PPUSH
11335: LD_EXP 22
11339: PPUSH
11340: CALL_OW 119
// ComMoveUnit ( Heike , Omar ) ;
11344: LD_EXP 22
11348: PPUSH
11349: LD_EXP 23
11353: PPUSH
11354: CALL_OW 112
// wait ( 0 0$1 ) ;
11358: LD_INT 35
11360: PPUSH
11361: CALL_OW 67
// ComTurnUnit ( Heike , Omar ) ;
11365: LD_EXP 22
11369: PPUSH
11370: LD_EXP 23
11374: PPUSH
11375: CALL_OW 119
// Say ( Heike , DH-Start-4 ) ;
11379: LD_EXP 22
11383: PPUSH
11384: LD_STRING DH-Start-4
11386: PPUSH
11387: CALL_OW 88
// Say ( Omar , DO-Start-5 ) ;
11391: LD_EXP 23
11395: PPUSH
11396: LD_STRING DO-Start-5
11398: PPUSH
11399: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
11403: LD_EXP 22
11407: PPUSH
11408: LD_STRING DH-Start-6
11410: PPUSH
11411: CALL_OW 88
// Say ( Omar , DO-Start-7 ) ;
11415: LD_EXP 23
11419: PPUSH
11420: LD_STRING DO-Start-7
11422: PPUSH
11423: CALL_OW 88
// if Query ( QOmar ) = 2 then
11427: LD_STRING QOmar
11429: PPUSH
11430: CALL_OW 97
11434: PUSH
11435: LD_INT 2
11437: EQUAL
11438: IFFALSE 11729
// begin Say ( Heike , DH-QuestionN-1 ) ;
11440: LD_EXP 22
11444: PPUSH
11445: LD_STRING DH-QuestionN-1
11447: PPUSH
11448: CALL_OW 88
// ComMoveXY ( Heike , 58 , 27 ) ;
11452: LD_EXP 22
11456: PPUSH
11457: LD_INT 58
11459: PPUSH
11460: LD_INT 27
11462: PPUSH
11463: CALL_OW 111
// wait ( 0 0$2 ) ;
11467: LD_INT 70
11469: PPUSH
11470: CALL_OW 67
// RemoveSeeing ( 79 , 32 , 2 ) ;
11474: LD_INT 79
11476: PPUSH
11477: LD_INT 32
11479: PPUSH
11480: LD_INT 2
11482: PPUSH
11483: CALL_OW 331
// RemoveSeeing ( 80 , 27 , 2 ) ;
11487: LD_INT 80
11489: PPUSH
11490: LD_INT 27
11492: PPUSH
11493: LD_INT 2
11495: PPUSH
11496: CALL_OW 331
// CenterOnXY ( 58 , 27 ) ;
11500: LD_INT 58
11502: PPUSH
11503: LD_INT 27
11505: PPUSH
11506: CALL_OW 84
// repeat wait ( 3 ) ;
11510: LD_INT 3
11512: PPUSH
11513: CALL_OW 67
// until GetDistUnitXY ( Heike , 88 , 27 ) ;
11517: LD_EXP 22
11521: PPUSH
11522: LD_INT 88
11524: PPUSH
11525: LD_INT 27
11527: PPUSH
11528: CALL_OW 297
11532: IFFALSE 11510
// uc_side := 1 ;
11534: LD_ADDR_OWVAR 20
11538: PUSH
11539: LD_INT 1
11541: ST_TO_ADDR
// uc_nation := nation_american ;
11542: LD_ADDR_OWVAR 21
11546: PUSH
11547: LD_INT 1
11549: ST_TO_ADDR
// amTroops := [ ] ;
11550: LD_ADDR_VAR 0 5
11554: PUSH
11555: EMPTY
11556: ST_TO_ADDR
// for i := 1 to 3 do
11557: LD_ADDR_VAR 0 2
11561: PUSH
11562: DOUBLE
11563: LD_INT 1
11565: DEC
11566: ST_TO_ADDR
11567: LD_INT 3
11569: PUSH
11570: FOR_TO
11571: IFFALSE 11664
// begin PrepareSoldier ( false , 10 ) ;
11573: LD_INT 0
11575: PPUSH
11576: LD_INT 10
11578: PPUSH
11579: CALL_OW 381
// amTroops := Join ( amTroops , CreateHuman ) ;
11583: LD_ADDR_VAR 0 5
11587: PUSH
11588: LD_VAR 0 5
11592: PPUSH
11593: CALL_OW 44
11597: PPUSH
11598: CALL 56940 0 2
11602: ST_TO_ADDR
// SetDir ( amTroops [ i ] , 2 ) ;
11603: LD_VAR 0 5
11607: PUSH
11608: LD_VAR 0 2
11612: ARRAY
11613: PPUSH
11614: LD_INT 2
11616: PPUSH
11617: CALL_OW 233
// PlaceUnitArea ( amTroops [ i ] , heikeTrapArea , false ) ;
11621: LD_VAR 0 5
11625: PUSH
11626: LD_VAR 0 2
11630: ARRAY
11631: PPUSH
11632: LD_INT 10
11634: PPUSH
11635: LD_INT 0
11637: PPUSH
11638: CALL_OW 49
// ComAttackUnit ( amTroops [ i ] , Heike ) ;
11642: LD_VAR 0 5
11646: PUSH
11647: LD_VAR 0 2
11651: ARRAY
11652: PPUSH
11653: LD_EXP 22
11657: PPUSH
11658: CALL_OW 115
// end ;
11662: GO 11570
11664: POP
11665: POP
// ComAttackUnit ( Heike , amTroops [ 1 ] ) ;
11666: LD_EXP 22
11670: PPUSH
11671: LD_VAR 0 5
11675: PUSH
11676: LD_INT 1
11678: ARRAY
11679: PPUSH
11680: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
11684: LD_INT 35
11686: PPUSH
11687: CALL_OW 67
// until IsDead ( Heike ) or IsDying ( Heike ) ;
11691: LD_EXP 22
11695: PPUSH
11696: CALL_OW 301
11700: PUSH
11701: LD_EXP 22
11705: PPUSH
11706: CALL_OW 303
11710: OR
11711: IFFALSE 11684
// wait ( 0 0$2 ) ;
11713: LD_INT 70
11715: PPUSH
11716: CALL_OW 67
// YouLost ( Heike ) ;
11720: LD_STRING Heike
11722: PPUSH
11723: CALL_OW 104
// exit ;
11727: GO 12609
// end ; Say ( Heike , DH-QuestionY-1 ) ;
11729: LD_EXP 22
11733: PPUSH
11734: LD_STRING DH-QuestionY-1
11736: PPUSH
11737: CALL_OW 88
// wait ( 0 0$0.3 ) ;
11741: LD_INT 10
11743: PPUSH
11744: CALL_OW 67
// Say ( Omar , DO-Story-1 ) ;
11748: LD_EXP 23
11752: PPUSH
11753: LD_STRING DO-Story-1
11755: PPUSH
11756: CALL_OW 88
// Say ( Omar , DO-Story-2 ) ;
11760: LD_EXP 23
11764: PPUSH
11765: LD_STRING DO-Story-2
11767: PPUSH
11768: CALL_OW 88
// Say ( Omar , DO-Story-3 ) ;
11772: LD_EXP 23
11776: PPUSH
11777: LD_STRING DO-Story-3
11779: PPUSH
11780: CALL_OW 88
// Say ( Omar , DO-Story-4 ) ;
11784: LD_EXP 23
11788: PPUSH
11789: LD_STRING DO-Story-4
11791: PPUSH
11792: CALL_OW 88
// Say ( Heike , DH-Story-5 ) ;
11796: LD_EXP 22
11800: PPUSH
11801: LD_STRING DH-Story-5
11803: PPUSH
11804: CALL_OW 88
// Say ( Omar , DO-Story-6 ) ;
11808: LD_EXP 23
11812: PPUSH
11813: LD_STRING DO-Story-6
11815: PPUSH
11816: CALL_OW 88
// Say ( Omar , DO-Story-7 ) ;
11820: LD_EXP 23
11824: PPUSH
11825: LD_STRING DO-Story-7
11827: PPUSH
11828: CALL_OW 88
// ComMoveXY ( Heike , 82 , 44 ) ;
11832: LD_EXP 22
11836: PPUSH
11837: LD_INT 82
11839: PPUSH
11840: LD_INT 44
11842: PPUSH
11843: CALL_OW 111
// AddComHold ( Heike ) ;
11847: LD_EXP 22
11851: PPUSH
11852: CALL_OW 200
// wait ( 0 0$4 ) ;
11856: LD_INT 140
11858: PPUSH
11859: CALL_OW 67
// ComMoveXY ( Omar , 82 , 41 ) ;
11863: LD_EXP 23
11867: PPUSH
11868: LD_INT 82
11870: PPUSH
11871: LD_INT 41
11873: PPUSH
11874: CALL_OW 111
// AddComTurnUnit ( Omar , Heike ) ;
11878: LD_EXP 23
11882: PPUSH
11883: LD_EXP 22
11887: PPUSH
11888: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
11892: LD_INT 35
11894: PPUSH
11895: CALL_OW 67
// until IsAt ( Heike , 82 , 44 ) ;
11899: LD_EXP 22
11903: PPUSH
11904: LD_INT 82
11906: PPUSH
11907: LD_INT 44
11909: PPUSH
11910: CALL_OW 307
11914: IFFALSE 11892
// ComTurnXY ( Heike , 81 , 47 ) ;
11916: LD_EXP 22
11920: PPUSH
11921: LD_INT 81
11923: PPUSH
11924: LD_INT 47
11926: PPUSH
11927: CALL_OW 118
// Say ( Heike , DH-Story-8 ) ;
11931: LD_EXP 22
11935: PPUSH
11936: LD_STRING DH-Story-8
11938: PPUSH
11939: CALL_OW 88
// Say ( Omar , DO-Story-9 ) ;
11943: LD_EXP 23
11947: PPUSH
11948: LD_STRING DO-Story-9
11950: PPUSH
11951: CALL_OW 88
// Say ( Omar , DO-Story-10 ) ;
11955: LD_EXP 23
11959: PPUSH
11960: LD_STRING DO-Story-10
11962: PPUSH
11963: CALL_OW 88
// ComTurnUnit ( Heike , Omar ) ;
11967: LD_EXP 22
11971: PPUSH
11972: LD_EXP 23
11976: PPUSH
11977: CALL_OW 119
// Say ( Heike , DH-Story-11 ) ;
11981: LD_EXP 22
11985: PPUSH
11986: LD_STRING DH-Story-11
11988: PPUSH
11989: CALL_OW 88
// ComMoveUnit ( Omar , Heike ) ;
11993: LD_EXP 23
11997: PPUSH
11998: LD_EXP 22
12002: PPUSH
12003: CALL_OW 112
// wait ( 0 0$0.3 ) ;
12007: LD_INT 10
12009: PPUSH
12010: CALL_OW 67
// ComTurnUnit ( Omar , Heike ) ;
12014: LD_EXP 23
12018: PPUSH
12019: LD_EXP 22
12023: PPUSH
12024: CALL_OW 119
// Say ( Omar , DO-Story-12 ) ;
12028: LD_EXP 23
12032: PPUSH
12033: LD_STRING DO-Story-12
12035: PPUSH
12036: CALL_OW 88
// Say ( Heike , DH-Story-13 ) ;
12040: LD_EXP 22
12044: PPUSH
12045: LD_STRING DH-Story-13
12047: PPUSH
12048: CALL_OW 88
// Say ( Omar , DO-Story-14 ) ;
12052: LD_EXP 23
12056: PPUSH
12057: LD_STRING DO-Story-14
12059: PPUSH
12060: CALL_OW 88
// Say ( Omar , DO-Story-15 ) ;
12064: LD_EXP 23
12068: PPUSH
12069: LD_STRING DO-Story-15
12071: PPUSH
12072: CALL_OW 88
// CenterOnXY ( 84 , 48 ) ;
12076: LD_INT 84
12078: PPUSH
12079: LD_INT 48
12081: PPUSH
12082: CALL_OW 84
// ComMoveXY ( Heike , 84 , 48 ) ;
12086: LD_EXP 22
12090: PPUSH
12091: LD_INT 84
12093: PPUSH
12094: LD_INT 48
12096: PPUSH
12097: CALL_OW 111
// AddComTurnXY ( Heike , 84 , 49 ) ;
12101: LD_EXP 22
12105: PPUSH
12106: LD_INT 84
12108: PPUSH
12109: LD_INT 49
12111: PPUSH
12112: CALL_OW 178
// wait ( 0 0$1 ) ;
12116: LD_INT 35
12118: PPUSH
12119: CALL_OW 67
// ComMoveUnit ( Omar , Heike ) ;
12123: LD_EXP 23
12127: PPUSH
12128: LD_EXP 22
12132: PPUSH
12133: CALL_OW 112
// wait ( 0 0$1 ) ;
12137: LD_INT 35
12139: PPUSH
12140: CALL_OW 67
// ComTurnUnit ( Omar , Heike ) ;
12144: LD_EXP 23
12148: PPUSH
12149: LD_EXP 22
12153: PPUSH
12154: CALL_OW 119
// wait ( 0 0$0.3 ) ;
12158: LD_INT 10
12160: PPUSH
12161: CALL_OW 67
// Say ( Omar , DO-Story-16 ) ;
12165: LD_EXP 23
12169: PPUSH
12170: LD_STRING DO-Story-16
12172: PPUSH
12173: CALL_OW 88
// if Query ( QOmar2 ) = 2 then
12177: LD_STRING QOmar2
12179: PPUSH
12180: CALL_OW 97
12184: PUSH
12185: LD_INT 2
12187: EQUAL
12188: IFFALSE 12486
// begin ComMoveXY ( Heike , 79 , 57 ) ;
12190: LD_EXP 22
12194: PPUSH
12195: LD_INT 79
12197: PPUSH
12198: LD_INT 57
12200: PPUSH
12201: CALL_OW 111
// AddComMoveXY ( Heike , 68 , 53 ) ;
12205: LD_EXP 22
12209: PPUSH
12210: LD_INT 68
12212: PPUSH
12213: LD_INT 53
12215: PPUSH
12216: CALL_OW 171
// wait ( 0 0$2 ) ;
12220: LD_INT 70
12222: PPUSH
12223: CALL_OW 67
// RemoveSeeing ( 79 , 32 , 2 ) ;
12227: LD_INT 79
12229: PPUSH
12230: LD_INT 32
12232: PPUSH
12233: LD_INT 2
12235: PPUSH
12236: CALL_OW 331
// RemoveSeeing ( 80 , 27 , 2 ) ;
12240: LD_INT 80
12242: PPUSH
12243: LD_INT 27
12245: PPUSH
12246: LD_INT 2
12248: PPUSH
12249: CALL_OW 331
// CenterOnXY ( 68 , 53 ) ;
12253: LD_INT 68
12255: PPUSH
12256: LD_INT 53
12258: PPUSH
12259: CALL_OW 84
// repeat wait ( 3 ) ;
12263: LD_INT 3
12265: PPUSH
12266: CALL_OW 67
// until GetDistUnitXY ( Heike , 68 , 53 ) < 6 ;
12270: LD_EXP 22
12274: PPUSH
12275: LD_INT 68
12277: PPUSH
12278: LD_INT 53
12280: PPUSH
12281: CALL_OW 297
12285: PUSH
12286: LD_INT 6
12288: LESS
12289: IFFALSE 12263
// uc_side := 1 ;
12291: LD_ADDR_OWVAR 20
12295: PUSH
12296: LD_INT 1
12298: ST_TO_ADDR
// uc_nation := nation_american ;
12299: LD_ADDR_OWVAR 21
12303: PUSH
12304: LD_INT 1
12306: ST_TO_ADDR
// amTroops := [ ] ;
12307: LD_ADDR_VAR 0 5
12311: PUSH
12312: EMPTY
12313: ST_TO_ADDR
// for i := 1 to 3 do
12314: LD_ADDR_VAR 0 2
12318: PUSH
12319: DOUBLE
12320: LD_INT 1
12322: DEC
12323: ST_TO_ADDR
12324: LD_INT 3
12326: PUSH
12327: FOR_TO
12328: IFFALSE 12421
// begin PrepareSoldier ( false , 10 ) ;
12330: LD_INT 0
12332: PPUSH
12333: LD_INT 10
12335: PPUSH
12336: CALL_OW 381
// amTroops := Join ( amTroops , CreateHuman ) ;
12340: LD_ADDR_VAR 0 5
12344: PUSH
12345: LD_VAR 0 5
12349: PPUSH
12350: CALL_OW 44
12354: PPUSH
12355: CALL 56940 0 2
12359: ST_TO_ADDR
// SetDir ( amTroops [ i ] , 2 ) ;
12360: LD_VAR 0 5
12364: PUSH
12365: LD_VAR 0 2
12369: ARRAY
12370: PPUSH
12371: LD_INT 2
12373: PPUSH
12374: CALL_OW 233
// PlaceUnitArea ( amTroops [ i ] , heikeTrap2Area , false ) ;
12378: LD_VAR 0 5
12382: PUSH
12383: LD_VAR 0 2
12387: ARRAY
12388: PPUSH
12389: LD_INT 11
12391: PPUSH
12392: LD_INT 0
12394: PPUSH
12395: CALL_OW 49
// ComAttackUnit ( amTroops [ i ] , Heike ) ;
12399: LD_VAR 0 5
12403: PUSH
12404: LD_VAR 0 2
12408: ARRAY
12409: PPUSH
12410: LD_EXP 22
12414: PPUSH
12415: CALL_OW 115
// end ;
12419: GO 12327
12421: POP
12422: POP
// ComAttackUnit ( Heike , amTroops [ 1 ] ) ;
12423: LD_EXP 22
12427: PPUSH
12428: LD_VAR 0 5
12432: PUSH
12433: LD_INT 1
12435: ARRAY
12436: PPUSH
12437: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
12441: LD_INT 35
12443: PPUSH
12444: CALL_OW 67
// until IsDead ( Heike ) or IsDying ( Heike ) ;
12448: LD_EXP 22
12452: PPUSH
12453: CALL_OW 301
12457: PUSH
12458: LD_EXP 22
12462: PPUSH
12463: CALL_OW 303
12467: OR
12468: IFFALSE 12441
// wait ( 0 0$2 ) ;
12470: LD_INT 70
12472: PPUSH
12473: CALL_OW 67
// YouLost ( Heike ) ;
12477: LD_STRING Heike
12479: PPUSH
12480: CALL_OW 104
// exit ;
12484: GO 12609
// end ; Say ( Omar , DO-Objective-1 ) ;
12486: LD_EXP 23
12490: PPUSH
12491: LD_STRING DO-Objective-1
12493: PPUSH
12494: CALL_OW 88
// ComTurnUnit ( Heike , Omar ) ;
12498: LD_EXP 22
12502: PPUSH
12503: LD_EXP 23
12507: PPUSH
12508: CALL_OW 119
// Say ( Heike , DH-Objective-2 ) ;
12512: LD_EXP 22
12516: PPUSH
12517: LD_STRING DH-Objective-2
12519: PPUSH
12520: CALL_OW 88
// Say ( Omar , DO-Objective-3 ) ;
12524: LD_EXP 23
12528: PPUSH
12529: LD_STRING DO-Objective-3
12531: PPUSH
12532: CALL_OW 88
// RemoveSeeing ( 79 , 32 , 2 ) ;
12536: LD_INT 79
12538: PPUSH
12539: LD_INT 32
12541: PPUSH
12542: LD_INT 2
12544: PPUSH
12545: CALL_OW 331
// RemoveSeeing ( 80 , 27 , 2 ) ;
12549: LD_INT 80
12551: PPUSH
12552: LD_INT 27
12554: PPUSH
12555: LD_INT 2
12557: PPUSH
12558: CALL_OW 331
// SetSide ( Omar , 2 ) ;
12562: LD_EXP 23
12566: PPUSH
12567: LD_INT 2
12569: PPUSH
12570: CALL_OW 235
// SetSide ( omarVehicle , 2 ) ;
12574: LD_EXP 25
12578: PPUSH
12579: LD_INT 2
12581: PPUSH
12582: CALL_OW 235
// ChangeMissionObjectives ( O1 ) ;
12586: LD_STRING O1
12588: PPUSH
12589: CALL_OW 337
// InGameOff ;
12593: CALL_OW 9
// gameActive := true ;
12597: LD_ADDR_EXP 19
12601: PUSH
12602: LD_INT 1
12604: ST_TO_ADDR
// SaveForQuickRestart ;
12605: CALL_OW 22
// end ;
12609: LD_VAR 0 1
12613: RET
// every 0 0$2 trigger gameActive and not spotArabianBase and FilterUnitsInArea ( arBaseArea , [ f_side , 2 ] ) do var i ;
12614: LD_EXP 19
12618: PUSH
12619: LD_EXP 7
12623: NOT
12624: AND
12625: PUSH
12626: LD_INT 4
12628: PPUSH
12629: LD_INT 22
12631: PUSH
12632: LD_INT 2
12634: PUSH
12635: EMPTY
12636: LIST
12637: LIST
12638: PPUSH
12639: CALL_OW 70
12643: AND
12644: IFFALSE 12795
12646: GO 12648
12648: DISABLE
12649: LD_INT 0
12651: PPUSH
// begin spotArabianBase := true ;
12652: LD_ADDR_EXP 7
12656: PUSH
12657: LD_INT 1
12659: ST_TO_ADDR
// DialogueOn ;
12660: CALL_OW 6
// PlaceSeeing ( 232 , 101 , 2 , - 22 ) ;
12664: LD_INT 232
12666: PPUSH
12667: LD_INT 101
12669: PPUSH
12670: LD_INT 2
12672: PPUSH
12673: LD_INT 22
12675: NEG
12676: PPUSH
12677: CALL_OW 330
// RemoveSeeing ( 232 , 101 , 2 ) ;
12681: LD_INT 232
12683: PPUSH
12684: LD_INT 101
12686: PPUSH
12687: LD_INT 2
12689: PPUSH
12690: CALL_OW 331
// CenterNowOnXY ( 232 , 101 ) ;
12694: LD_INT 232
12696: PPUSH
12697: LD_INT 101
12699: PPUSH
12700: CALL_OW 86
// for i in FilterUnitsInArea ( arBaseArea , [ f_side , 5 ] ) do
12704: LD_ADDR_VAR 0 1
12708: PUSH
12709: LD_INT 4
12711: PPUSH
12712: LD_INT 22
12714: PUSH
12715: LD_INT 5
12717: PUSH
12718: EMPTY
12719: LIST
12720: LIST
12721: PPUSH
12722: CALL_OW 70
12726: PUSH
12727: FOR_IN
12728: IFFALSE 12744
// SetSide ( i , 2 ) ;
12730: LD_VAR 0 1
12734: PPUSH
12735: LD_INT 2
12737: PPUSH
12738: CALL_OW 235
12742: GO 12727
12744: POP
12745: POP
// if not spotAmericanBase then
12746: LD_EXP 6
12750: NOT
12751: IFFALSE 12767
// Say ( Omar , DO-ArBase-1a ) else
12753: LD_EXP 23
12757: PPUSH
12758: LD_STRING DO-ArBase-1a
12760: PPUSH
12761: CALL_OW 88
12765: GO 12779
// Say ( Omar , DO-ArBase-1b ) ;
12767: LD_EXP 23
12771: PPUSH
12772: LD_STRING DO-ArBase-1b
12774: PPUSH
12775: CALL_OW 88
// Say ( Heike , DH-ArBase-2 ) ;
12779: LD_EXP 22
12783: PPUSH
12784: LD_STRING DH-ArBase-2
12786: PPUSH
12787: CALL_OW 88
// DialogueOff ;
12791: CALL_OW 7
// end ;
12795: PPOPN 1
12797: END
// every 0 0$1 trigger gameActive and ( IsSelected ( arFac ) or UnitsInside ( arFac ) ) and IsOk ( Heike ) and IsOk ( Omar ) do
12798: LD_EXP 19
12802: PUSH
12803: LD_INT 87
12805: PPUSH
12806: CALL_OW 306
12810: PUSH
12811: LD_INT 87
12813: PPUSH
12814: CALL_OW 313
12818: OR
12819: AND
12820: PUSH
12821: LD_EXP 22
12825: PPUSH
12826: CALL_OW 302
12830: AND
12831: PUSH
12832: LD_EXP 23
12836: PPUSH
12837: CALL_OW 302
12841: AND
12842: IFFALSE 13070
12844: GO 12846
12846: DISABLE
// begin DialogueOn ;
12847: CALL_OW 6
// Say ( Heike , DH-Fac-1 ) ;
12851: LD_EXP 22
12855: PPUSH
12856: LD_STRING DH-Fac-1
12858: PPUSH
12859: CALL_OW 88
// Say ( Omar , DOm-Fac-2 ) ;
12863: LD_EXP 23
12867: PPUSH
12868: LD_STRING DOm-Fac-2
12870: PPUSH
12871: CALL_OW 88
// if TestCharacters ( 09_Markov ) then
12875: LD_STRING 09_Markov
12877: PPUSH
12878: CALL_OW 28
12882: IFFALSE 12945
// begin Say ( Heike , DH-Fac-3a ) ;
12884: LD_EXP 22
12888: PPUSH
12889: LD_STRING DH-Fac-3a
12891: PPUSH
12892: CALL_OW 88
// if GetSkill ( Heike , 3 ) < 10 then
12896: LD_EXP 22
12900: PPUSH
12901: LD_INT 3
12903: PPUSH
12904: CALL_OW 259
12908: PUSH
12909: LD_INT 10
12911: LESS
12912: IFFALSE 12943
// SetSkill ( Heike , 3 , GetSkill ( Heike , 3 ) + 1 ) ;
12914: LD_EXP 22
12918: PPUSH
12919: LD_INT 3
12921: PPUSH
12922: LD_EXP 22
12926: PPUSH
12927: LD_INT 3
12929: PPUSH
12930: CALL_OW 259
12934: PUSH
12935: LD_INT 1
12937: PLUS
12938: PPUSH
12939: CALL_OW 237
// end else
12943: GO 13059
// if TestCharacters ( 09_Olaf ) then
12945: LD_STRING 09_Olaf
12947: PPUSH
12948: CALL_OW 28
12952: IFFALSE 13015
// begin Say ( Heike , DH-Fac-3b ) ;
12954: LD_EXP 22
12958: PPUSH
12959: LD_STRING DH-Fac-3b
12961: PPUSH
12962: CALL_OW 88
// if GetSkill ( Heike , 3 ) < 10 then
12966: LD_EXP 22
12970: PPUSH
12971: LD_INT 3
12973: PPUSH
12974: CALL_OW 259
12978: PUSH
12979: LD_INT 10
12981: LESS
12982: IFFALSE 13013
// SetSkill ( Heike , 3 , GetSkill ( Heike , 3 ) + 1 ) ;
12984: LD_EXP 22
12988: PPUSH
12989: LD_INT 3
12991: PPUSH
12992: LD_EXP 22
12996: PPUSH
12997: LD_INT 3
12999: PPUSH
13000: CALL_OW 259
13004: PUSH
13005: LD_INT 1
13007: PLUS
13008: PPUSH
13009: CALL_OW 237
// end else
13013: GO 13059
// if GetSkill ( Heike , skill_mechanical ) > 5 then
13015: LD_EXP 22
13019: PPUSH
13020: LD_INT 3
13022: PPUSH
13023: CALL_OW 259
13027: PUSH
13028: LD_INT 5
13030: GREATER
13031: IFFALSE 13047
// Say ( Heike , DH-Fac-3c ) else
13033: LD_EXP 22
13037: PPUSH
13038: LD_STRING DH-Fac-3c
13040: PPUSH
13041: CALL_OW 88
13045: GO 13059
// Say ( Heike , DH-Fac-3d ) ;
13047: LD_EXP 22
13051: PPUSH
13052: LD_STRING DH-Fac-3d
13054: PPUSH
13055: CALL_OW 88
// ChangeMissionObjectives ( ARemote ) ;
13059: LD_STRING ARemote
13061: PPUSH
13062: CALL_OW 337
// DialogueOff ;
13066: CALL_OW 7
// end ;
13070: END
// every 0 0$1 trigger gameActive and ( IsSelected ( arLab ) or UnitsInside ( arLab ) ) and IsOk ( Heike ) and IsOk ( Omar ) do
13071: LD_EXP 19
13075: PUSH
13076: LD_INT 89
13078: PPUSH
13079: CALL_OW 306
13083: PUSH
13084: LD_INT 89
13086: PPUSH
13087: CALL_OW 313
13091: OR
13092: AND
13093: PUSH
13094: LD_EXP 22
13098: PPUSH
13099: CALL_OW 302
13103: AND
13104: PUSH
13105: LD_EXP 23
13109: PPUSH
13110: CALL_OW 302
13114: AND
13115: IFFALSE 13343
13117: GO 13119
13119: DISABLE
// begin DialogueOn ;
13120: CALL_OW 6
// Say ( Heike , DH-Lab-1 ) ;
13124: LD_EXP 22
13128: PPUSH
13129: LD_STRING DH-Lab-1
13131: PPUSH
13132: CALL_OW 88
// Say ( Omar , DOm-Lab-2 ) ;
13136: LD_EXP 23
13140: PPUSH
13141: LD_STRING DOm-Lab-2
13143: PPUSH
13144: CALL_OW 88
// if TestCharacters ( 09_Aviradze ) then
13148: LD_STRING 09_Aviradze
13150: PPUSH
13151: CALL_OW 28
13155: IFFALSE 13210
// begin SetTech ( tech_apelang , 2 , state_researched ) ;
13157: LD_INT 1
13159: PPUSH
13160: LD_INT 2
13162: PPUSH
13163: LD_INT 2
13165: PPUSH
13166: CALL_OW 322
// SetTech ( tech_apepsych , 2 , state_researched ) ;
13170: LD_INT 2
13172: PPUSH
13173: LD_INT 2
13175: PPUSH
13176: LD_INT 2
13178: PPUSH
13179: CALL_OW 322
// SetTech ( tech_apeagres , 2 , state_researched ) ;
13183: LD_INT 11
13185: PPUSH
13186: LD_INT 2
13188: PPUSH
13189: LD_INT 2
13191: PPUSH
13192: CALL_OW 322
// Say ( Heike , DH-Lab-4a ) ;
13196: LD_EXP 22
13200: PPUSH
13201: LD_STRING DH-Lab-4a
13203: PPUSH
13204: CALL_OW 88
// end else
13208: GO 13222
// Say ( Heike , DH-Lab-4b ) ;
13210: LD_EXP 22
13214: PPUSH
13215: LD_STRING DH-Lab-4b
13217: PPUSH
13218: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
13222: LD_STRING 05_DrugsTested
13224: PPUSH
13225: LD_EXP 1
13229: PPUSH
13230: CALL_OW 30
13234: IFFALSE 13261
// begin Say ( Heike , DH-Lab-5a ) ;
13236: LD_EXP 22
13240: PPUSH
13241: LD_STRING DH-Lab-5a
13243: PPUSH
13244: CALL_OW 88
// SetTech ( tech_stimdrugs , 2 , state_enabled ) ;
13248: LD_INT 5
13250: PPUSH
13251: LD_INT 2
13253: PPUSH
13254: LD_INT 1
13256: PPUSH
13257: CALL_OW 322
// end ; if LoadVariable ( 09_ApeBrain , debug ) then
13261: LD_STRING 09_ApeBrain
13263: PPUSH
13264: LD_EXP 1
13268: PPUSH
13269: CALL_OW 30
13273: IFFALSE 13312
// begin Say ( Heike , DH-Lab-6a ) ;
13275: LD_EXP 22
13279: PPUSH
13280: LD_STRING DH-Lab-6a
13282: PPUSH
13283: CALL_OW 88
// Say ( Omar , DOm-Lab-7a ) ;
13287: LD_EXP 23
13291: PPUSH
13292: LD_STRING DOm-Lab-7a
13294: PPUSH
13295: CALL_OW 88
// SetTech ( tech_apeBrain , 2 , state_enabled ) ;
13299: LD_INT 4
13301: PPUSH
13302: LD_INT 2
13304: PPUSH
13305: LD_INT 1
13307: PPUSH
13308: CALL_OW 322
// end ; if LoadVariable ( 09_ApeNeural , debug ) then
13312: LD_STRING 09_ApeNeural
13314: PPUSH
13315: LD_EXP 1
13319: PPUSH
13320: CALL_OW 30
13324: IFFALSE 13339
// begin SetTech ( tech_apeNeural , 2 , state_enabled ) ;
13326: LD_INT 3
13328: PPUSH
13329: LD_INT 2
13331: PPUSH
13332: LD_INT 1
13334: PPUSH
13335: CALL_OW 322
// end ; DialogueOff ;
13339: CALL_OW 7
// end ;
13343: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) do
13344: LD_EXP 19
13348: PUSH
13349: LD_INT 22
13351: PUSH
13352: LD_INT 2
13354: PUSH
13355: EMPTY
13356: LIST
13357: LIST
13358: PUSH
13359: LD_INT 25
13361: PUSH
13362: LD_INT 12
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: PUSH
13369: EMPTY
13370: LIST
13371: LIST
13372: PPUSH
13373: CALL_OW 69
13377: AND
13378: IFFALSE 13413
13380: GO 13382
13382: DISABLE
// begin if IsOk ( Heike ) then
13383: LD_EXP 22
13387: PPUSH
13388: CALL_OW 302
13392: IFFALSE 13406
// Say ( Heike , DH-Ape-1 ) ;
13394: LD_EXP 22
13398: PPUSH
13399: LD_STRING DH-Ape-1
13401: PPUSH
13402: CALL_OW 88
// ChangeMissionObjectives ( AApes ) ;
13406: LD_STRING AApes
13408: PPUSH
13409: CALL_OW 337
// end ;
13413: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 5 do
13414: LD_EXP 19
13418: PUSH
13419: LD_INT 22
13421: PUSH
13422: LD_INT 2
13424: PUSH
13425: EMPTY
13426: LIST
13427: LIST
13428: PUSH
13429: LD_INT 25
13431: PUSH
13432: LD_INT 15
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: PUSH
13439: EMPTY
13440: LIST
13441: LIST
13442: PPUSH
13443: CALL_OW 69
13447: PUSH
13448: LD_INT 5
13450: GREATEREQUAL
13451: AND
13452: IFFALSE 13554
13454: GO 13456
13456: DISABLE
// begin hasApes := true ;
13457: LD_ADDR_EXP 16
13461: PUSH
13462: LD_INT 1
13464: ST_TO_ADDR
// ChangeMissionObjectives ( AApesOut ) ;
13465: LD_STRING AApesOut
13467: PPUSH
13468: CALL_OW 337
// if not IsOk ( Heike ) or not IsOk ( Omar ) then
13472: LD_EXP 22
13476: PPUSH
13477: CALL_OW 302
13481: NOT
13482: PUSH
13483: LD_EXP 23
13487: PPUSH
13488: CALL_OW 302
13492: NOT
13493: OR
13494: IFFALSE 13498
// exit ;
13496: GO 13554
// DialogueOn ;
13498: CALL_OW 6
// Say ( Heike , DH-ApeArmy-1 ) ;
13502: LD_EXP 22
13506: PPUSH
13507: LD_STRING DH-ApeArmy-1
13509: PPUSH
13510: CALL_OW 88
// Say ( Omar , DOm-ApeArmy-2 ) ;
13514: LD_EXP 23
13518: PPUSH
13519: LD_STRING DOm-ApeArmy-2
13521: PPUSH
13522: CALL_OW 88
// Say ( Heike , DH-ApeArmy-3 ) ;
13526: LD_EXP 22
13530: PPUSH
13531: LD_STRING DH-ApeArmy-3
13533: PPUSH
13534: CALL_OW 88
// Say ( Omar , DOm-ApeArmy-4 ) ;
13538: LD_EXP 23
13542: PPUSH
13543: LD_STRING DOm-ApeArmy-4
13545: PPUSH
13546: CALL_OW 88
// DialogueOff ;
13550: CALL_OW 7
// end ;
13554: END
// every 0 0$1 trigger gameActive and GetTech ( tech_stimdrugs , 2 ) = state_researched do
13555: LD_EXP 19
13559: PUSH
13560: LD_INT 5
13562: PPUSH
13563: LD_INT 2
13565: PPUSH
13566: CALL_OW 321
13570: PUSH
13571: LD_INT 2
13573: EQUAL
13574: AND
13575: IFFALSE 13611
13577: GO 13579
13579: DISABLE
// begin hasDrugs := true ;
13580: LD_ADDR_EXP 17
13584: PUSH
13585: LD_INT 1
13587: ST_TO_ADDR
// if IsOk ( Heike ) then
13588: LD_EXP 22
13592: PPUSH
13593: CALL_OW 302
13597: IFFALSE 13611
// Say ( Heike , DH-Stim-1 ) ;
13599: LD_EXP 22
13603: PPUSH
13604: LD_STRING DH-Stim-1
13606: PPUSH
13607: CALL_OW 88
// end ;
13611: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_kamikaze ] ] ) do
13612: LD_EXP 19
13616: PUSH
13617: LD_INT 22
13619: PUSH
13620: LD_INT 2
13622: PUSH
13623: EMPTY
13624: LIST
13625: LIST
13626: PUSH
13627: LD_INT 25
13629: PUSH
13630: LD_INT 17
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: PUSH
13637: EMPTY
13638: LIST
13639: LIST
13640: PPUSH
13641: CALL_OW 69
13645: AND
13646: IFFALSE 13663
13648: GO 13650
13650: DISABLE
// Say ( Heike , DH-Kamikadze-1 ) ;
13651: LD_EXP 22
13655: PPUSH
13656: LD_STRING DH-Kamikadze-1
13658: PPUSH
13659: CALL_OW 88
13663: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_chassis , class_mastodont ] ] ) and IsOk ( Omar ) and IsOk ( Heike ) do
13664: LD_EXP 19
13668: PUSH
13669: LD_INT 22
13671: PUSH
13672: LD_INT 2
13674: PUSH
13675: EMPTY
13676: LIST
13677: LIST
13678: PUSH
13679: LD_INT 31
13681: PUSH
13682: LD_INT 31
13684: PUSH
13685: EMPTY
13686: LIST
13687: LIST
13688: PUSH
13689: EMPTY
13690: LIST
13691: LIST
13692: PPUSH
13693: CALL_OW 69
13697: AND
13698: PUSH
13699: LD_EXP 23
13703: PPUSH
13704: CALL_OW 302
13708: AND
13709: PUSH
13710: LD_EXP 22
13714: PPUSH
13715: CALL_OW 302
13719: AND
13720: IFFALSE 13805
13722: GO 13724
13724: DISABLE
// begin InGameOn ;
13725: CALL_OW 8
// CenterNowOnUnits ( Omar ) ;
13729: LD_EXP 23
13733: PPUSH
13734: CALL_OW 87
// Say ( Heike , DH-Mastodont-1 ) ;
13738: LD_EXP 22
13742: PPUSH
13743: LD_STRING DH-Mastodont-1
13745: PPUSH
13746: CALL_OW 88
// Say ( Omar , DOm-Mastodont-2 ) ;
13750: LD_EXP 23
13754: PPUSH
13755: LD_STRING DOm-Mastodont-2
13757: PPUSH
13758: CALL_OW 88
// Say ( Heike , DH-Mastodont-3 ) ;
13762: LD_EXP 22
13766: PPUSH
13767: LD_STRING DH-Mastodont-3
13769: PPUSH
13770: CALL_OW 88
// Say ( Omar , DOm-Mastodont-4 ) ;
13774: LD_EXP 23
13778: PPUSH
13779: LD_STRING DOm-Mastodont-4
13781: PPUSH
13782: CALL_OW 88
// hasMastodont := true ;
13786: LD_ADDR_EXP 13
13790: PUSH
13791: LD_INT 1
13793: ST_TO_ADDR
// InGameOff ;
13794: CALL_OW 9
// SetAchievement ( ACH_MASTODONTTAME ) ;
13798: LD_STRING ACH_MASTODONTTAME
13800: PPUSH
13801: CALL_OW 543
// end ;
13805: END
// every 0 0$1 trigger gameActive and tigerCounter do
13806: LD_EXP 19
13810: PUSH
13811: LD_EXP 21
13815: AND
13816: IFFALSE 13828
13818: GO 13820
13820: DISABLE
// SetAchievement ( ACH_TIGERTAME ) ;
13821: LD_STRING ACH_TIGERTAME
13823: PPUSH
13824: CALL_OW 543
13828: END
// every 0 0$1 trigger gameActive and tigerCounter > 1 do
13829: LD_EXP 19
13833: PUSH
13834: LD_EXP 21
13838: PUSH
13839: LD_INT 1
13841: GREATER
13842: AND
13843: IFFALSE 13947
13845: GO 13847
13847: DISABLE
// begin hasTigers := true ;
13848: LD_ADDR_EXP 15
13852: PUSH
13853: LD_INT 1
13855: ST_TO_ADDR
// if not IsOk ( Omar ) or not IsOk ( Heike ) then
13856: LD_EXP 23
13860: PPUSH
13861: CALL_OW 302
13865: NOT
13866: PUSH
13867: LD_EXP 22
13871: PPUSH
13872: CALL_OW 302
13876: NOT
13877: OR
13878: IFFALSE 13882
// exit ;
13880: GO 13947
// CenterNowOnUnits ( Omar ) ;
13882: LD_EXP 23
13886: PPUSH
13887: CALL_OW 87
// DialogueOn ;
13891: CALL_OW 6
// Say ( Omar , DOm-Tiger-1 ) ;
13895: LD_EXP 23
13899: PPUSH
13900: LD_STRING DOm-Tiger-1
13902: PPUSH
13903: CALL_OW 88
// Say ( Heike , DH-Tiger-2 ) ;
13907: LD_EXP 22
13911: PPUSH
13912: LD_STRING DH-Tiger-2
13914: PPUSH
13915: CALL_OW 88
// Say ( Omar , DOm-Tiger-3 ) ;
13919: LD_EXP 23
13923: PPUSH
13924: LD_STRING DOm-Tiger-3
13926: PPUSH
13927: CALL_OW 88
// Say ( Heike , DH-Tiger-4 ) ;
13931: LD_EXP 22
13935: PPUSH
13936: LD_STRING DH-Tiger-4
13938: PPUSH
13939: CALL_OW 88
// DialogueOff ;
13943: CALL_OW 7
// end ;
13947: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_control , control_remote ] ] ) >= 3 do
13948: LD_EXP 19
13952: PUSH
13953: LD_INT 22
13955: PUSH
13956: LD_INT 2
13958: PUSH
13959: EMPTY
13960: LIST
13961: LIST
13962: PUSH
13963: LD_INT 50
13965: PUSH
13966: EMPTY
13967: LIST
13968: PUSH
13969: LD_INT 33
13971: PUSH
13972: LD_INT 2
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: LIST
13983: PPUSH
13984: CALL_OW 69
13988: PUSH
13989: LD_INT 3
13991: GREATEREQUAL
13992: AND
13993: IFFALSE 14036
13995: GO 13997
13997: DISABLE
// begin ChangeMissionObjectives ( ARemoteOut ) ;
13998: LD_STRING ARemoteOut
14000: PPUSH
14001: CALL_OW 337
// hasVehicles := true ;
14005: LD_ADDR_EXP 14
14009: PUSH
14010: LD_INT 1
14012: ST_TO_ADDR
// if IsOk ( Heike ) then
14013: LD_EXP 22
14017: PPUSH
14018: CALL_OW 302
14022: IFFALSE 14036
// Say ( Heike , DH-Mechanic-1 ) ;
14024: LD_EXP 22
14028: PPUSH
14029: LD_STRING DH-Mechanic-1
14031: PPUSH
14032: CALL_OW 88
// end ;
14036: END
// every 0 0$1 trigger gameActive and FilterUnitsInArea ( amBaseOuterArea , [ f_side , 2 ] ) do
14037: LD_EXP 19
14041: PUSH
14042: LD_INT 29
14044: PPUSH
14045: LD_INT 22
14047: PUSH
14048: LD_INT 2
14050: PUSH
14051: EMPTY
14052: LIST
14053: LIST
14054: PPUSH
14055: CALL_OW 70
14059: AND
14060: IFFALSE 14073
14062: GO 14064
14064: DISABLE
// spotAmericanBase := true ;
14065: LD_ADDR_EXP 6
14069: PUSH
14070: LD_INT 1
14072: ST_TO_ADDR
14073: END
// every 0 0$2 trigger gameActive and spotAmericanBase and IsOk ( Omar ) and IsOk ( Heike ) do
14074: LD_EXP 19
14078: PUSH
14079: LD_EXP 6
14083: AND
14084: PUSH
14085: LD_EXP 23
14089: PPUSH
14090: CALL_OW 302
14094: AND
14095: PUSH
14096: LD_EXP 22
14100: PPUSH
14101: CALL_OW 302
14105: AND
14106: IFFALSE 14346
14108: GO 14110
14110: DISABLE
// begin DialogueOn ;
14111: CALL_OW 6
// PlaceSeeing ( 92 , 129 , 2 , - 22 ) ;
14115: LD_INT 92
14117: PPUSH
14118: LD_INT 129
14120: PPUSH
14121: LD_INT 2
14123: PPUSH
14124: LD_INT 22
14126: NEG
14127: PPUSH
14128: CALL_OW 330
// RemoveSeeing ( 92 , 129 , 2 ) ;
14132: LD_INT 92
14134: PPUSH
14135: LD_INT 129
14137: PPUSH
14138: LD_INT 2
14140: PPUSH
14141: CALL_OW 331
// CenterNowOnXY ( 92 , 129 ) ;
14145: LD_INT 92
14147: PPUSH
14148: LD_INT 129
14150: PPUSH
14151: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
14155: LD_INT 10
14157: PPUSH
14158: CALL_OW 68
// Say ( Omar , DO-AmBase-1 ) ;
14162: LD_EXP 23
14166: PPUSH
14167: LD_STRING DO-AmBase-1
14169: PPUSH
14170: CALL_OW 88
// Say ( Heike , DH-AmBase-2 ) ;
14174: LD_EXP 22
14178: PPUSH
14179: LD_STRING DH-AmBase-2
14181: PPUSH
14182: CALL_OW 88
// Say ( Omar , DO-AmBase-3 ) ;
14186: LD_EXP 23
14190: PPUSH
14191: LD_STRING DO-AmBase-3
14193: PPUSH
14194: CALL_OW 88
// Say ( Heike , DH-AmBase-4 ) ;
14198: LD_EXP 22
14202: PPUSH
14203: LD_STRING DH-AmBase-4
14205: PPUSH
14206: CALL_OW 88
// Say ( Omar , DO-AmBase-5 ) ;
14210: LD_EXP 23
14214: PPUSH
14215: LD_STRING DO-AmBase-5
14217: PPUSH
14218: CALL_OW 88
// Say ( Heike , DH-AmBase-6 ) ;
14222: LD_EXP 22
14226: PPUSH
14227: LD_STRING DH-AmBase-6
14229: PPUSH
14230: CALL_OW 88
// Say ( Omar , DO-AmBase-7 ) ;
14234: LD_EXP 23
14238: PPUSH
14239: LD_STRING DO-AmBase-7
14241: PPUSH
14242: CALL_OW 88
// if not spotArabianBase then
14246: LD_EXP 7
14250: NOT
14251: IFFALSE 14267
// begin Say ( Omar , DO-AmBase-8a ) ;
14253: LD_EXP 23
14257: PPUSH
14258: LD_STRING DO-AmBase-8a
14260: PPUSH
14261: CALL_OW 88
// end else
14265: GO 14279
// begin Say ( Omar , DO-AmBase-8b ) ;
14267: LD_EXP 23
14271: PPUSH
14272: LD_STRING DO-AmBase-8b
14274: PPUSH
14275: CALL_OW 88
// end ; if IsInUnit ( Heike ) then
14279: LD_EXP 22
14283: PPUSH
14284: CALL_OW 310
14288: IFFALSE 14306
// CenterNowOnUnits ( IsInUnit ( Heike ) ) else
14290: LD_EXP 22
14294: PPUSH
14295: CALL_OW 310
14299: PPUSH
14300: CALL_OW 87
14304: GO 14315
// CenterNowOnUnits ( Heike ) ;
14306: LD_EXP 22
14310: PPUSH
14311: CALL_OW 87
// Say ( Heike , DH-AmBase-9 ) ;
14315: LD_EXP 22
14319: PPUSH
14320: LD_STRING DH-AmBase-9
14322: PPUSH
14323: CALL_OW 88
// DialogueOff ;
14327: CALL_OW 7
// spotByAmerican := true ;
14331: LD_ADDR_EXP 8
14335: PUSH
14336: LD_INT 1
14338: ST_TO_ADDR
// ChangeMissionObjectives ( O2 ) ;
14339: LD_STRING O2
14341: PPUSH
14342: CALL_OW 337
// end ;
14346: END
// function TalkAboutLegion ; begin
14347: LD_INT 0
14349: PPUSH
// Say ( Heike , DH-Legion-1 ) ;
14350: LD_EXP 22
14354: PPUSH
14355: LD_STRING DH-Legion-1
14357: PPUSH
14358: CALL_OW 88
// Say ( Omar , DOm-Legion-2 ) ;
14362: LD_EXP 23
14366: PPUSH
14367: LD_STRING DOm-Legion-2
14369: PPUSH
14370: CALL_OW 88
// Say ( Heike , DH-Legion-3 ) ;
14374: LD_EXP 22
14378: PPUSH
14379: LD_STRING DH-Legion-3
14381: PPUSH
14382: CALL_OW 88
// Say ( Omar , DOm-Legion-4 ) ;
14386: LD_EXP 23
14390: PPUSH
14391: LD_STRING DOm-Legion-4
14393: PPUSH
14394: CALL_OW 88
// Say ( Heike , DH-Legion-5 ) ;
14398: LD_EXP 22
14402: PPUSH
14403: LD_STRING DH-Legion-5
14405: PPUSH
14406: CALL_OW 88
// Say ( Omar , DOm-Legion-6 ) ;
14410: LD_EXP 23
14414: PPUSH
14415: LD_STRING DOm-Legion-6
14417: PPUSH
14418: CALL_OW 88
// Say ( Heike , DH-Legion-7 ) ;
14422: LD_EXP 22
14426: PPUSH
14427: LD_STRING DH-Legion-7
14429: PPUSH
14430: CALL_OW 88
// end ;
14434: LD_VAR 0 1
14438: RET
// every 0 0$2 trigger gameActive and AreInArea ( [ Heike , Omar ] , legSpotNorthArea ) and not spotByLegion and not spotLegion do var i , un , veh ;
14439: LD_EXP 19
14443: PUSH
14444: LD_EXP 22
14448: PUSH
14449: LD_EXP 23
14453: PUSH
14454: EMPTY
14455: LIST
14456: LIST
14457: PPUSH
14458: LD_INT 22
14460: PPUSH
14461: CALL 10656 0 2
14465: AND
14466: PUSH
14467: LD_EXP 9
14471: NOT
14472: AND
14473: PUSH
14474: LD_EXP 10
14478: NOT
14479: AND
14480: IFFALSE 14987
14482: GO 14484
14484: DISABLE
14485: LD_INT 0
14487: PPUSH
14488: PPUSH
14489: PPUSH
// begin uc_side := 8 ;
14490: LD_ADDR_OWVAR 20
14494: PUSH
14495: LD_INT 8
14497: ST_TO_ADDR
// uc_nation := nation_american ;
14498: LD_ADDR_OWVAR 21
14502: PUSH
14503: LD_INT 1
14505: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 90 ) ;
14506: LD_INT 3
14508: PPUSH
14509: LD_INT 1
14511: PPUSH
14512: LD_INT 1
14514: PPUSH
14515: LD_INT 9
14517: PPUSH
14518: LD_INT 90
14520: PPUSH
14521: CALL 24078 0 5
// veh := CreateVehicle ;
14525: LD_ADDR_VAR 0 3
14529: PUSH
14530: CALL_OW 45
14534: ST_TO_ADDR
// legTanks := Join ( legTanks , veh ) ;
14535: LD_ADDR_EXP 42
14539: PUSH
14540: LD_EXP 42
14544: PPUSH
14545: LD_VAR 0 3
14549: PPUSH
14550: CALL 56940 0 2
14554: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
14555: LD_VAR 0 3
14559: PPUSH
14560: LD_INT 2
14562: PPUSH
14563: CALL_OW 233
// PlaceUnitXY ( veh , 126 , 18 , false ) ;
14567: LD_VAR 0 3
14571: PPUSH
14572: LD_INT 126
14574: PPUSH
14575: LD_INT 18
14577: PPUSH
14578: LD_INT 0
14580: PPUSH
14581: CALL_OW 48
// uc_nation := nation_arabian ;
14585: LD_ADDR_OWVAR 21
14589: PUSH
14590: LD_INT 2
14592: ST_TO_ADDR
// PrepareMechanic ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
14593: LD_INT 0
14595: PPUSH
14596: LD_INT 6
14598: PUSH
14599: LD_INT 7
14601: PUSH
14602: LD_INT 8
14604: PUSH
14605: LD_INT 9
14607: PUSH
14608: EMPTY
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: PUSH
14614: LD_OWVAR 67
14618: ARRAY
14619: PPUSH
14620: CALL_OW 383
// un := CreateHuman ;
14624: LD_ADDR_VAR 0 2
14628: PUSH
14629: CALL_OW 44
14633: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
14634: LD_ADDR_EXP 37
14638: PUSH
14639: LD_EXP 37
14643: PPUSH
14644: LD_VAR 0 2
14648: PPUSH
14649: CALL 56940 0 2
14653: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14654: LD_VAR 0 2
14658: PPUSH
14659: LD_VAR 0 3
14663: PPUSH
14664: CALL_OW 52
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
14668: LD_INT 0
14670: PPUSH
14671: LD_INT 6
14673: PUSH
14674: LD_INT 7
14676: PUSH
14677: LD_INT 8
14679: PUSH
14680: LD_INT 9
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: PUSH
14689: LD_OWVAR 67
14693: ARRAY
14694: PPUSH
14695: CALL_OW 381
// for i := 1 to 3 do
14699: LD_ADDR_VAR 0 1
14703: PUSH
14704: DOUBLE
14705: LD_INT 1
14707: DEC
14708: ST_TO_ADDR
14709: LD_INT 3
14711: PUSH
14712: FOR_TO
14713: IFFALSE 14802
// begin un := CreateHuman ;
14715: LD_ADDR_VAR 0 2
14719: PUSH
14720: CALL_OW 44
14724: ST_TO_ADDR
// if i = 1 then
14725: LD_VAR 0 1
14729: PUSH
14730: LD_INT 1
14732: EQUAL
14733: IFFALSE 14747
// SetClass ( un , class_sniper ) ;
14735: LD_VAR 0 2
14739: PPUSH
14740: LD_INT 5
14742: PPUSH
14743: CALL_OW 336
// legEForces := Join ( legEForces , un ) ;
14747: LD_ADDR_EXP 37
14751: PUSH
14752: LD_EXP 37
14756: PPUSH
14757: LD_VAR 0 2
14761: PPUSH
14762: CALL 56940 0 2
14766: ST_TO_ADDR
// SetDir ( un , 2 ) ;
14767: LD_VAR 0 2
14771: PPUSH
14772: LD_INT 2
14774: PPUSH
14775: CALL_OW 233
// PlaceUnitXYR ( un , 126 , 18 , 4 , false ) ;
14779: LD_VAR 0 2
14783: PPUSH
14784: LD_INT 126
14786: PPUSH
14787: LD_INT 18
14789: PPUSH
14790: LD_INT 4
14792: PPUSH
14793: LD_INT 0
14795: PPUSH
14796: CALL_OW 50
// end ;
14800: GO 14712
14802: POP
14803: POP
// wait ( 0 0$01 ) ;
14804: LD_INT 35
14806: PPUSH
14807: CALL_OW 67
// DialogueOn ;
14811: CALL_OW 6
// PlaceSeeing ( 126 , 18 , 2 , - 16 ) ;
14815: LD_INT 126
14817: PPUSH
14818: LD_INT 18
14820: PPUSH
14821: LD_INT 2
14823: PPUSH
14824: LD_INT 16
14826: NEG
14827: PPUSH
14828: CALL_OW 330
// CenterNowOnXY ( 126 , 18 ) ;
14832: LD_INT 126
14834: PPUSH
14835: LD_INT 18
14837: PPUSH
14838: CALL_OW 86
// TalkAboutLegion ;
14842: CALL 14347 0 0
// RemoveSeeing ( 126 , 18 , 2 ) ;
14846: LD_INT 126
14848: PPUSH
14849: LD_INT 18
14851: PPUSH
14852: LD_INT 2
14854: PPUSH
14855: CALL_OW 331
// DialogueOff ;
14859: CALL_OW 7
// spotLegion := true ;
14863: LD_ADDR_EXP 10
14867: PUSH
14868: LD_INT 1
14870: ST_TO_ADDR
// ComAgressiveMove ( legEForces , 164 , 47 ) ;
14871: LD_EXP 37
14875: PPUSH
14876: LD_INT 164
14878: PPUSH
14879: LD_INT 47
14881: PPUSH
14882: CALL_OW 114
// AddComAgressiveMove ( legEForces , 179 , 20 ) ;
14886: LD_EXP 37
14890: PPUSH
14891: LD_INT 179
14893: PPUSH
14894: LD_INT 20
14896: PPUSH
14897: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
14901: LD_INT 35
14903: PPUSH
14904: CALL_OW 67
// until not UnitFilter ( legEForces , [ f_hastask ] ) or not UnitFilter ( legEForces , [ f_ok ] ) ;
14908: LD_EXP 37
14912: PPUSH
14913: LD_INT 60
14915: PUSH
14916: EMPTY
14917: LIST
14918: PPUSH
14919: CALL_OW 72
14923: NOT
14924: PUSH
14925: LD_EXP 37
14929: PPUSH
14930: LD_INT 50
14932: PUSH
14933: EMPTY
14934: LIST
14935: PPUSH
14936: CALL_OW 72
14940: NOT
14941: OR
14942: IFFALSE 14901
// if not UnitFilter ( legEForces , [ f_ok ] ) then
14944: LD_EXP 37
14948: PPUSH
14949: LD_INT 50
14951: PUSH
14952: EMPTY
14953: LIST
14954: PPUSH
14955: CALL_OW 72
14959: NOT
14960: IFFALSE 14964
// exit ;
14962: GO 14987
// legForces := legForces union legEForces ;
14964: LD_ADDR_EXP 36
14968: PUSH
14969: LD_EXP 36
14973: PUSH
14974: LD_EXP 37
14978: UNION
14979: ST_TO_ADDR
// legEForces := [ ] ;
14980: LD_ADDR_EXP 37
14984: PUSH
14985: EMPTY
14986: ST_TO_ADDR
// end ;
14987: PPOPN 3
14989: END
// every 0 0$2 trigger gameActive and AreInArea ( [ Heike , Omar ] , legSpotSouthArea ) and not spotByLegion and not spotLegion do var i , un , veh ;
14990: LD_EXP 19
14994: PUSH
14995: LD_EXP 22
14999: PUSH
15000: LD_EXP 23
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: PPUSH
15009: LD_INT 23
15011: PPUSH
15012: CALL 10656 0 2
15016: AND
15017: PUSH
15018: LD_EXP 9
15022: NOT
15023: AND
15024: PUSH
15025: LD_EXP 10
15029: NOT
15030: AND
15031: IFFALSE 15538
15033: GO 15035
15035: DISABLE
15036: LD_INT 0
15038: PPUSH
15039: PPUSH
15040: PPUSH
// begin uc_side := 8 ;
15041: LD_ADDR_OWVAR 20
15045: PUSH
15046: LD_INT 8
15048: ST_TO_ADDR
// uc_nation := nation_american ;
15049: LD_ADDR_OWVAR 21
15053: PUSH
15054: LD_INT 1
15056: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 90 ) ;
15057: LD_INT 3
15059: PPUSH
15060: LD_INT 1
15062: PPUSH
15063: LD_INT 1
15065: PPUSH
15066: LD_INT 9
15068: PPUSH
15069: LD_INT 90
15071: PPUSH
15072: CALL 24078 0 5
// veh := CreateVehicle ;
15076: LD_ADDR_VAR 0 3
15080: PUSH
15081: CALL_OW 45
15085: ST_TO_ADDR
// legTanks := Join ( legTanks , veh ) ;
15086: LD_ADDR_EXP 42
15090: PUSH
15091: LD_EXP 42
15095: PPUSH
15096: LD_VAR 0 3
15100: PPUSH
15101: CALL 56940 0 2
15105: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
15106: LD_VAR 0 3
15110: PPUSH
15111: LD_INT 3
15113: PPUSH
15114: CALL_OW 233
// PlaceUnitXY ( veh , 224 , 57 , false ) ;
15118: LD_VAR 0 3
15122: PPUSH
15123: LD_INT 224
15125: PPUSH
15126: LD_INT 57
15128: PPUSH
15129: LD_INT 0
15131: PPUSH
15132: CALL_OW 48
// uc_nation := nation_arabian ;
15136: LD_ADDR_OWVAR 21
15140: PUSH
15141: LD_INT 2
15143: ST_TO_ADDR
// PrepareMechanic ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
15144: LD_INT 0
15146: PPUSH
15147: LD_INT 6
15149: PUSH
15150: LD_INT 7
15152: PUSH
15153: LD_INT 8
15155: PUSH
15156: LD_INT 9
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: PUSH
15165: LD_OWVAR 67
15169: ARRAY
15170: PPUSH
15171: CALL_OW 383
// un := CreateHuman ;
15175: LD_ADDR_VAR 0 2
15179: PUSH
15180: CALL_OW 44
15184: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
15185: LD_ADDR_EXP 37
15189: PUSH
15190: LD_EXP 37
15194: PPUSH
15195: LD_VAR 0 2
15199: PPUSH
15200: CALL 56940 0 2
15204: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15205: LD_VAR 0 2
15209: PPUSH
15210: LD_VAR 0 3
15214: PPUSH
15215: CALL_OW 52
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
15219: LD_INT 0
15221: PPUSH
15222: LD_INT 6
15224: PUSH
15225: LD_INT 7
15227: PUSH
15228: LD_INT 8
15230: PUSH
15231: LD_INT 9
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: PUSH
15240: LD_OWVAR 67
15244: ARRAY
15245: PPUSH
15246: CALL_OW 381
// for i := 1 to 3 do
15250: LD_ADDR_VAR 0 1
15254: PUSH
15255: DOUBLE
15256: LD_INT 1
15258: DEC
15259: ST_TO_ADDR
15260: LD_INT 3
15262: PUSH
15263: FOR_TO
15264: IFFALSE 15353
// begin un := CreateHuman ;
15266: LD_ADDR_VAR 0 2
15270: PUSH
15271: CALL_OW 44
15275: ST_TO_ADDR
// if i = 1 then
15276: LD_VAR 0 1
15280: PUSH
15281: LD_INT 1
15283: EQUAL
15284: IFFALSE 15298
// SetClass ( un , class_sniper ) ;
15286: LD_VAR 0 2
15290: PPUSH
15291: LD_INT 5
15293: PPUSH
15294: CALL_OW 336
// legEForces := Join ( legEForces , un ) ;
15298: LD_ADDR_EXP 37
15302: PUSH
15303: LD_EXP 37
15307: PPUSH
15308: LD_VAR 0 2
15312: PPUSH
15313: CALL 56940 0 2
15317: ST_TO_ADDR
// SetDir ( un , 3 ) ;
15318: LD_VAR 0 2
15322: PPUSH
15323: LD_INT 3
15325: PPUSH
15326: CALL_OW 233
// PlaceUnitXYR ( un , 224 , 57 , 4 , false ) ;
15330: LD_VAR 0 2
15334: PPUSH
15335: LD_INT 224
15337: PPUSH
15338: LD_INT 57
15340: PPUSH
15341: LD_INT 4
15343: PPUSH
15344: LD_INT 0
15346: PPUSH
15347: CALL_OW 50
// end ;
15351: GO 15263
15353: POP
15354: POP
// wait ( 0 0$01 ) ;
15355: LD_INT 35
15357: PPUSH
15358: CALL_OW 67
// DialogueOn ;
15362: CALL_OW 6
// PlaceSeeing ( 224 , 57 , 2 , - 16 ) ;
15366: LD_INT 224
15368: PPUSH
15369: LD_INT 57
15371: PPUSH
15372: LD_INT 2
15374: PPUSH
15375: LD_INT 16
15377: NEG
15378: PPUSH
15379: CALL_OW 330
// CenterNowOnXY ( 224 , 57 ) ;
15383: LD_INT 224
15385: PPUSH
15386: LD_INT 57
15388: PPUSH
15389: CALL_OW 86
// TalkAboutLegion ;
15393: CALL 14347 0 0
// RemoveSeeing ( 224 , 57 , 2 ) ;
15397: LD_INT 224
15399: PPUSH
15400: LD_INT 57
15402: PPUSH
15403: LD_INT 2
15405: PPUSH
15406: CALL_OW 331
// DialogueOff ;
15410: CALL_OW 7
// spotLegion := true ;
15414: LD_ADDR_EXP 10
15418: PUSH
15419: LD_INT 1
15421: ST_TO_ADDR
// ComAgressiveMove ( legEForces , 164 , 47 ) ;
15422: LD_EXP 37
15426: PPUSH
15427: LD_INT 164
15429: PPUSH
15430: LD_INT 47
15432: PPUSH
15433: CALL_OW 114
// AddComAgressiveMove ( legEForces , 179 , 20 ) ;
15437: LD_EXP 37
15441: PPUSH
15442: LD_INT 179
15444: PPUSH
15445: LD_INT 20
15447: PPUSH
15448: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
15452: LD_INT 35
15454: PPUSH
15455: CALL_OW 67
// until not UnitFilter ( legEForces , [ f_hastask ] ) or not UnitFilter ( legEForces , [ f_ok ] ) ;
15459: LD_EXP 37
15463: PPUSH
15464: LD_INT 60
15466: PUSH
15467: EMPTY
15468: LIST
15469: PPUSH
15470: CALL_OW 72
15474: NOT
15475: PUSH
15476: LD_EXP 37
15480: PPUSH
15481: LD_INT 50
15483: PUSH
15484: EMPTY
15485: LIST
15486: PPUSH
15487: CALL_OW 72
15491: NOT
15492: OR
15493: IFFALSE 15452
// if not UnitFilter ( legEForces , [ f_ok ] ) then
15495: LD_EXP 37
15499: PPUSH
15500: LD_INT 50
15502: PUSH
15503: EMPTY
15504: LIST
15505: PPUSH
15506: CALL_OW 72
15510: NOT
15511: IFFALSE 15515
// exit ;
15513: GO 15538
// legForces := legForces union legEForces ;
15515: LD_ADDR_EXP 36
15519: PUSH
15520: LD_EXP 36
15524: PUSH
15525: LD_EXP 37
15529: UNION
15530: ST_TO_ADDR
// legEForces := [ ] ;
15531: LD_ADDR_EXP 37
15535: PUSH
15536: EMPTY
15537: ST_TO_ADDR
// end ;
15538: PPOPN 3
15540: END
// every 0 0$1 trigger gameActive and ( See ( 8 , Omar ) or See ( 8 , Heike ) ) and IsOk ( Heike ) and IsOk ( Omar ) and not spotByLegion do
15541: LD_EXP 19
15545: PUSH
15546: LD_INT 8
15548: PPUSH
15549: LD_EXP 23
15553: PPUSH
15554: CALL_OW 292
15558: PUSH
15559: LD_INT 8
15561: PPUSH
15562: LD_EXP 22
15566: PPUSH
15567: CALL_OW 292
15571: OR
15572: AND
15573: PUSH
15574: LD_EXP 22
15578: PPUSH
15579: CALL_OW 302
15583: AND
15584: PUSH
15585: LD_EXP 23
15589: PPUSH
15590: CALL_OW 302
15594: AND
15595: PUSH
15596: LD_EXP 9
15600: NOT
15601: AND
15602: IFFALSE 15743
15604: GO 15606
15606: DISABLE
// begin DialogueOn ;
15607: CALL_OW 6
// SayRadio ( Farmer , DF-Spot-1 ) ;
15611: LD_EXP 35
15615: PPUSH
15616: LD_STRING DF-Spot-1
15618: PPUSH
15619: CALL_OW 94
// Say ( Heike , DH-Spot-2 ) ;
15623: LD_EXP 22
15627: PPUSH
15628: LD_STRING DH-Spot-2
15630: PPUSH
15631: CALL_OW 88
// SayRadio ( Farmer , DF-Spot-3 ) ;
15635: LD_EXP 35
15639: PPUSH
15640: LD_STRING DF-Spot-3
15642: PPUSH
15643: CALL_OW 94
// Say ( Heike , DH-Spot-4 ) ;
15647: LD_EXP 22
15651: PPUSH
15652: LD_STRING DH-Spot-4
15654: PPUSH
15655: CALL_OW 88
// Say ( Omar , DOm-Spot-5 ) ;
15659: LD_EXP 23
15663: PPUSH
15664: LD_STRING DOm-Spot-5
15666: PPUSH
15667: CALL_OW 88
// SayRadio ( Farmer , DF-Spot-6 ) ;
15671: LD_EXP 35
15675: PPUSH
15676: LD_STRING DF-Spot-6
15678: PPUSH
15679: CALL_OW 94
// SayRadio ( Farmer , DF-Spot-7 ) ;
15683: LD_EXP 35
15687: PPUSH
15688: LD_STRING DF-Spot-7
15690: PPUSH
15691: CALL_OW 94
// SayRadio ( Farmer , DF-Spot-8 ) ;
15695: LD_EXP 35
15699: PPUSH
15700: LD_STRING DF-Spot-8
15702: PPUSH
15703: CALL_OW 94
// Say ( Heike , DH-Spot-9 ) ;
15707: LD_EXP 22
15711: PPUSH
15712: LD_STRING DH-Spot-9
15714: PPUSH
15715: CALL_OW 88
// SayRadio ( Farmer , DF-Spot-10 ) ;
15719: LD_EXP 35
15723: PPUSH
15724: LD_STRING DF-Spot-10
15726: PPUSH
15727: CALL_OW 94
// DialogueOff ;
15731: CALL_OW 7
// spotByLegion := true ;
15735: LD_ADDR_EXP 9
15739: PUSH
15740: LD_INT 1
15742: ST_TO_ADDR
// end ;
15743: END
// every 0 0$1 trigger gameActive and ( spotByLegion or spotLegion ) do
15744: LD_EXP 19
15748: PUSH
15749: LD_EXP 9
15753: PUSH
15754: LD_EXP 10
15758: OR
15759: AND
15760: IFFALSE 15772
15762: GO 15764
15764: DISABLE
// ChangeMissionObjectives ( O3 ) ;
15765: LD_STRING O3
15767: PPUSH
15768: CALL_OW 337
15772: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_ok ] ] ) = 0 do
15773: LD_EXP 19
15777: PUSH
15778: LD_INT 22
15780: PUSH
15781: LD_INT 8
15783: PUSH
15784: EMPTY
15785: LIST
15786: LIST
15787: PUSH
15788: LD_INT 21
15790: PUSH
15791: LD_INT 1
15793: PUSH
15794: EMPTY
15795: LIST
15796: LIST
15797: PUSH
15798: LD_INT 50
15800: PUSH
15801: EMPTY
15802: LIST
15803: PUSH
15804: EMPTY
15805: LIST
15806: LIST
15807: LIST
15808: PPUSH
15809: CALL_OW 69
15813: PUSH
15814: LD_INT 0
15816: EQUAL
15817: AND
15818: IFFALSE 15916
15820: GO 15822
15822: DISABLE
// begin legScriptActive := false ;
15823: LD_ADDR_EXP 4
15827: PUSH
15828: LD_INT 0
15830: ST_TO_ADDR
// if not americanDestroyed then
15831: LD_EXP 11
15835: NOT
15836: IFFALSE 15845
// SetAchievement ( ACH_REVANGE ) ;
15838: LD_STRING ACH_REVANGE
15840: PPUSH
15841: CALL_OW 543
// legionDestroyed := true ;
15845: LD_ADDR_EXP 12
15849: PUSH
15850: LD_INT 1
15852: ST_TO_ADDR
// DialogueOn ;
15853: CALL_OW 6
// SayRadio ( Farmer , DF-LegDes-1 ) ;
15857: LD_EXP 35
15861: PPUSH
15862: LD_STRING DF-LegDes-1
15864: PPUSH
15865: CALL_OW 94
// Say ( Heike , DH-LegDes-2 ) ;
15869: LD_EXP 22
15873: PPUSH
15874: LD_STRING DH-LegDes-2
15876: PPUSH
15877: CALL_OW 88
// SayRadio ( Farmer , DF-LegDes-3 ) ;
15881: LD_EXP 35
15885: PPUSH
15886: LD_STRING DF-LegDes-3
15888: PPUSH
15889: CALL_OW 94
// Say ( Heike , DH-LegDes-4 ) ;
15893: LD_EXP 22
15897: PPUSH
15898: LD_STRING DH-LegDes-4
15900: PPUSH
15901: CALL_OW 88
// DialogueOff ;
15905: CALL_OW 7
// ChangeMissionObjectives ( O5 ) ;
15909: LD_STRING O5
15911: PPUSH
15912: CALL_OW 337
// end ;
15916: END
// every 0 0$1 trigger gameActive and UnitFilter ( amForces , [ [ f_type , unit_human ] , [ f_ok ] ] ) < 6 do var i , tmp ;
15917: LD_EXP 19
15921: PUSH
15922: LD_EXP 26
15926: PPUSH
15927: LD_INT 21
15929: PUSH
15930: LD_INT 1
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: PUSH
15937: LD_INT 50
15939: PUSH
15940: EMPTY
15941: LIST
15942: PUSH
15943: EMPTY
15944: LIST
15945: LIST
15946: PPUSH
15947: CALL_OW 72
15951: PUSH
15952: LD_INT 6
15954: LESS
15955: AND
15956: IFFALSE 16187
15958: GO 15960
15960: DISABLE
15961: LD_INT 0
15963: PPUSH
15964: PPUSH
// begin amScriptActive := false ;
15965: LD_ADDR_EXP 3
15969: PUSH
15970: LD_INT 0
15972: ST_TO_ADDR
// tmp := UnitFilter ( amForces , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
15973: LD_ADDR_VAR 0 2
15977: PUSH
15978: LD_EXP 26
15982: PPUSH
15983: LD_INT 21
15985: PUSH
15986: LD_INT 1
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: PUSH
15993: LD_INT 50
15995: PUSH
15996: EMPTY
15997: LIST
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: PPUSH
16003: CALL_OW 72
16007: ST_TO_ADDR
// for i in tmp do
16008: LD_ADDR_VAR 0 1
16012: PUSH
16013: LD_VAR 0 2
16017: PUSH
16018: FOR_IN
16019: IFFALSE 16047
// begin ComExit ( i ) ;
16021: LD_VAR 0 1
16025: PPUSH
16026: CALL 57338 0 1
// AddComMoveXY ( i , 63 , 124 ) ;
16030: LD_VAR 0 1
16034: PPUSH
16035: LD_INT 63
16037: PPUSH
16038: LD_INT 124
16040: PPUSH
16041: CALL_OW 171
// end ;
16045: GO 16018
16047: POP
16048: POP
// wait ( 0 0$2 ) ;
16049: LD_INT 70
16051: PPUSH
16052: CALL_OW 67
// americanDestroyed := true ;
16056: LD_ADDR_EXP 11
16060: PUSH
16061: LD_INT 1
16063: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16064: LD_INT 35
16066: PPUSH
16067: CALL_OW 67
// tmp := UnitFilter ( amForces , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
16071: LD_ADDR_VAR 0 2
16075: PUSH
16076: LD_EXP 26
16080: PPUSH
16081: LD_INT 21
16083: PUSH
16084: LD_INT 1
16086: PUSH
16087: EMPTY
16088: LIST
16089: LIST
16090: PUSH
16091: LD_INT 50
16093: PUSH
16094: EMPTY
16095: LIST
16096: PUSH
16097: EMPTY
16098: LIST
16099: LIST
16100: PPUSH
16101: CALL_OW 72
16105: ST_TO_ADDR
// for i in tmp do
16106: LD_ADDR_VAR 0 1
16110: PUSH
16111: LD_VAR 0 2
16115: PUSH
16116: FOR_IN
16117: IFFALSE 16178
// begin if IsAt ( i , 63 , 124 ) or IsInArea ( i , amEscapeArea ) then
16119: LD_VAR 0 1
16123: PPUSH
16124: LD_INT 63
16126: PPUSH
16127: LD_INT 124
16129: PPUSH
16130: CALL_OW 307
16134: PUSH
16135: LD_VAR 0 1
16139: PPUSH
16140: LD_INT 25
16142: PPUSH
16143: CALL_OW 308
16147: OR
16148: IFFALSE 16161
// RemoveUnit ( i ) else
16150: LD_VAR 0 1
16154: PPUSH
16155: CALL_OW 64
16159: GO 16176
// ComMoveXY ( i , 63 , 124 ) ;
16161: LD_VAR 0 1
16165: PPUSH
16166: LD_INT 63
16168: PPUSH
16169: LD_INT 124
16171: PPUSH
16172: CALL_OW 111
// end ;
16176: GO 16116
16178: POP
16179: POP
// until not tmp ;
16180: LD_VAR 0 2
16184: NOT
16185: IFFALSE 16064
// end ;
16187: PPOPN 2
16189: END
// every 0 0$1 trigger gameActive and americanDestroyed and IsOk ( Heike ) and IsOk ( Omar ) do var i , un , veh ;
16190: LD_EXP 19
16194: PUSH
16195: LD_EXP 11
16199: AND
16200: PUSH
16201: LD_EXP 22
16205: PPUSH
16206: CALL_OW 302
16210: AND
16211: PUSH
16212: LD_EXP 23
16216: PPUSH
16217: CALL_OW 302
16221: AND
16222: IFFALSE 16712
16224: GO 16226
16226: DISABLE
16227: LD_INT 0
16229: PPUSH
16230: PPUSH
16231: PPUSH
// begin DialogueOn ;
16232: CALL_OW 6
// Say ( Heike , DH-Victory-1 ) ;
16236: LD_EXP 22
16240: PPUSH
16241: LD_STRING DH-Victory-1
16243: PPUSH
16244: CALL_OW 88
// Say ( Omar , DOm-Victory-2 ) ;
16248: LD_EXP 23
16252: PPUSH
16253: LD_STRING DOm-Victory-2
16255: PPUSH
16256: CALL_OW 88
// Say ( Omar , DOm-Victory-3 ) ;
16260: LD_EXP 23
16264: PPUSH
16265: LD_STRING DOm-Victory-3
16267: PPUSH
16268: CALL_OW 88
// Say ( Heike , DH-Victory-4 ) ;
16272: LD_EXP 22
16276: PPUSH
16277: LD_STRING DH-Victory-4
16279: PPUSH
16280: CALL_OW 88
// Say ( Omar , DOm-Victory-5 ) ;
16284: LD_EXP 23
16288: PPUSH
16289: LD_STRING DOm-Victory-5
16291: PPUSH
16292: CALL_OW 88
// Say ( Omar , DOm-Victory-6 ) ;
16296: LD_EXP 23
16300: PPUSH
16301: LD_STRING DOm-Victory-6
16303: PPUSH
16304: CALL_OW 88
// DialogueOff ;
16308: CALL_OW 7
// ChangeMissionObjectives ( O4 ) ;
16312: LD_STRING O4
16314: PPUSH
16315: CALL_OW 337
// canFinish := true ;
16319: LD_ADDR_EXP 18
16323: PUSH
16324: LD_INT 1
16326: ST_TO_ADDR
// SetAreaMapShow ( finalArea , 1 ) ;
16327: LD_INT 24
16329: PPUSH
16330: LD_INT 1
16332: PPUSH
16333: CALL_OW 424
// if not legionDestroyed then
16337: LD_EXP 12
16341: NOT
16342: IFFALSE 16712
// begin uc_nation := nation_arabian ;
16344: LD_ADDR_OWVAR 21
16348: PUSH
16349: LD_INT 2
16351: ST_TO_ADDR
// uc_side := 8 ;
16352: LD_ADDR_OWVAR 20
16356: PUSH
16357: LD_INT 8
16359: ST_TO_ADDR
// for i := 1 to 4 do
16360: LD_ADDR_VAR 0 1
16364: PUSH
16365: DOUBLE
16366: LD_INT 1
16368: DEC
16369: ST_TO_ADDR
16370: LD_INT 4
16372: PUSH
16373: FOR_TO
16374: IFFALSE 16455
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
16376: LD_INT 0
16378: PPUSH
16379: LD_INT 8
16381: PUSH
16382: LD_INT 9
16384: PUSH
16385: LD_INT 10
16387: PUSH
16388: LD_INT 10
16390: PUSH
16391: EMPTY
16392: LIST
16393: LIST
16394: LIST
16395: LIST
16396: PUSH
16397: LD_OWVAR 67
16401: ARRAY
16402: PPUSH
16403: CALL_OW 381
// un := CreateHuman ;
16407: LD_ADDR_VAR 0 2
16411: PUSH
16412: CALL_OW 44
16416: ST_TO_ADDR
// SetDir ( un , 3 ) ;
16417: LD_VAR 0 2
16421: PPUSH
16422: LD_INT 3
16424: PPUSH
16425: CALL_OW 233
// PlaceUnitArea ( un , legDefArea , false ) ;
16429: LD_VAR 0 2
16433: PPUSH
16434: LD_INT 26
16436: PPUSH
16437: LD_INT 0
16439: PPUSH
16440: CALL_OW 49
// ComCrawl ( un ) ;
16444: LD_VAR 0 2
16448: PPUSH
16449: CALL_OW 137
// end ;
16453: GO 16373
16455: POP
16456: POP
// for i := 1 to 3 do
16457: LD_ADDR_VAR 0 1
16461: PUSH
16462: DOUBLE
16463: LD_INT 1
16465: DEC
16466: ST_TO_ADDR
16467: LD_INT 3
16469: PUSH
16470: FOR_TO
16471: IFFALSE 16555
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
16473: LD_INT 0
16475: PPUSH
16476: LD_INT 8
16478: PUSH
16479: LD_INT 9
16481: PUSH
16482: LD_INT 10
16484: PUSH
16485: LD_INT 10
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: LIST
16492: LIST
16493: PUSH
16494: LD_OWVAR 67
16498: ARRAY
16499: PPUSH
16500: CALL_OW 381
// un := CreateHuman ;
16504: LD_ADDR_VAR 0 2
16508: PUSH
16509: CALL_OW 44
16513: ST_TO_ADDR
// SetClass ( un , class_mortar ) ;
16514: LD_VAR 0 2
16518: PPUSH
16519: LD_INT 8
16521: PPUSH
16522: CALL_OW 336
// SetDir ( un , 3 ) ;
16526: LD_VAR 0 2
16530: PPUSH
16531: LD_INT 3
16533: PPUSH
16534: CALL_OW 233
// PlaceUnitArea ( un , legDefArea , false ) ;
16538: LD_VAR 0 2
16542: PPUSH
16543: LD_INT 26
16545: PPUSH
16546: LD_INT 0
16548: PPUSH
16549: CALL_OW 49
// end ;
16553: GO 16470
16555: POP
16556: POP
// for i := 1 to 2 do
16557: LD_ADDR_VAR 0 1
16561: PUSH
16562: DOUBLE
16563: LD_INT 1
16565: DEC
16566: ST_TO_ADDR
16567: LD_INT 2
16569: PUSH
16570: FOR_TO
16571: IFFALSE 16710
// begin uc_side := 8 ;
16573: LD_ADDR_OWVAR 20
16577: PUSH
16578: LD_INT 8
16580: ST_TO_ADDR
// uc_nation := nation_american ;
16581: LD_ADDR_OWVAR 21
16585: PUSH
16586: LD_INT 1
16588: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_combustion , control_manual , us_laser , 90 ) ;
16589: LD_INT 4
16591: PPUSH
16592: LD_INT 1
16594: PPUSH
16595: LD_INT 1
16597: PPUSH
16598: LD_INT 9
16600: PPUSH
16601: LD_INT 90
16603: PPUSH
16604: CALL 24078 0 5
// veh := CreateVehicle ;
16608: LD_ADDR_VAR 0 3
16612: PUSH
16613: CALL_OW 45
16617: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
16618: LD_VAR 0 3
16622: PPUSH
16623: LD_INT 3
16625: PPUSH
16626: CALL_OW 233
// PlaceUnitArea ( veh , legVDefArea , false ) ;
16630: LD_VAR 0 3
16634: PPUSH
16635: LD_INT 27
16637: PPUSH
16638: LD_INT 0
16640: PPUSH
16641: CALL_OW 49
// uc_nation := nation_arabian ;
16645: LD_ADDR_OWVAR 21
16649: PUSH
16650: LD_INT 2
16652: ST_TO_ADDR
// PrepareMechanic ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
16653: LD_INT 0
16655: PPUSH
16656: LD_INT 8
16658: PUSH
16659: LD_INT 9
16661: PUSH
16662: LD_INT 10
16664: PUSH
16665: LD_INT 10
16667: PUSH
16668: EMPTY
16669: LIST
16670: LIST
16671: LIST
16672: LIST
16673: PUSH
16674: LD_OWVAR 67
16678: ARRAY
16679: PPUSH
16680: CALL_OW 383
// un := CreateHuman ;
16684: LD_ADDR_VAR 0 2
16688: PUSH
16689: CALL_OW 44
16693: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16694: LD_VAR 0 2
16698: PPUSH
16699: LD_VAR 0 3
16703: PPUSH
16704: CALL_OW 52
// end ;
16708: GO 16570
16710: POP
16711: POP
// end ; end ;
16712: PPOPN 3
16714: END
// every 0 0$1 trigger gameActive and canFinish and AreInArea ( [ Omar ] , finalArea ) and AreInArea ( [ Heike ] , finalArea ) do
16715: LD_EXP 19
16719: PUSH
16720: LD_EXP 18
16724: AND
16725: PUSH
16726: LD_EXP 23
16730: PUSH
16731: EMPTY
16732: LIST
16733: PPUSH
16734: LD_INT 24
16736: PPUSH
16737: CALL 10656 0 2
16741: AND
16742: PUSH
16743: LD_EXP 22
16747: PUSH
16748: EMPTY
16749: LIST
16750: PPUSH
16751: LD_INT 24
16753: PPUSH
16754: CALL 10656 0 2
16758: AND
16759: IFFALSE 16938
16761: GO 16763
16763: DISABLE
// begin if tick <= 50 50$00 then
16764: LD_OWVAR 1
16768: PUSH
16769: LD_INT 105000
16771: LESSEQUAL
16772: IFFALSE 16781
// SetAchievement ( ACH_HSPEED_10 ) ;
16774: LD_STRING ACH_HSPEED_10
16776: PPUSH
16777: CALL_OW 543
// if legionDestroyed then
16781: LD_EXP 12
16785: IFFALSE 16799
// AddMedal ( med1 , 1 ) else
16787: LD_STRING med1
16789: PPUSH
16790: LD_INT 1
16792: PPUSH
16793: CALL_OW 101
16797: GO 16810
// AddMedal ( med1 , - 1 ) ;
16799: LD_STRING med1
16801: PPUSH
16802: LD_INT 1
16804: NEG
16805: PPUSH
16806: CALL_OW 101
// if tick <= [ 70 70$00 , 60 60$00 , 50 50$00 , 45 45$00 ] [ Difficulty ] then
16810: LD_OWVAR 1
16814: PUSH
16815: LD_INT 147000
16817: PUSH
16818: LD_INT 126000
16820: PUSH
16821: LD_INT 105000
16823: PUSH
16824: LD_INT 94500
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: PUSH
16833: LD_OWVAR 67
16837: ARRAY
16838: LESSEQUAL
16839: IFFALSE 16853
// AddMedal ( med2 , 1 ) else
16841: LD_STRING med2
16843: PPUSH
16844: LD_INT 1
16846: PPUSH
16847: CALL_OW 101
16851: GO 16864
// AddMedal ( med2 , - 1 ) ;
16853: LD_STRING med2
16855: PPUSH
16856: LD_INT 1
16858: NEG
16859: PPUSH
16860: CALL_OW 101
// if hasApes + hasVehicles + hasTigers + hasMastodont + hasApes + hasDrugs >= 3 then
16864: LD_EXP 16
16868: PUSH
16869: LD_EXP 14
16873: PLUS
16874: PUSH
16875: LD_EXP 15
16879: PLUS
16880: PUSH
16881: LD_EXP 13
16885: PLUS
16886: PUSH
16887: LD_EXP 16
16891: PLUS
16892: PUSH
16893: LD_EXP 17
16897: PLUS
16898: PUSH
16899: LD_INT 3
16901: GREATEREQUAL
16902: IFFALSE 16916
// AddMedal ( med3 , 1 ) else
16904: LD_STRING med3
16906: PPUSH
16907: LD_INT 1
16909: PPUSH
16910: CALL_OW 101
16914: GO 16927
// AddMedal ( med3 , - 1 ) ;
16916: LD_STRING med3
16918: PPUSH
16919: LD_INT 1
16921: NEG
16922: PPUSH
16923: CALL_OW 101
// GiveMedals ( MAIN ) ;
16927: LD_STRING MAIN
16929: PPUSH
16930: CALL_OW 102
// YouWin ;
16934: CALL_OW 103
// end ; end_of_file
16938: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
16939: LD_VAR 0 1
16943: PPUSH
16944: CALL 77186 0 1
// if apeAmount and GetSide ( unit ) = 2 and ( GetControl ( unit ) = control_apeman or GetClass ( unit ) in [ class_apeman , class_apeman_soldier , class_apeman_engineer , class_apeman_kamikaze ] ) then
16948: LD_EXP 5
16952: PUSH
16953: LD_VAR 0 1
16957: PPUSH
16958: CALL_OW 255
16962: PUSH
16963: LD_INT 2
16965: EQUAL
16966: AND
16967: PUSH
16968: LD_VAR 0 1
16972: PPUSH
16973: CALL_OW 263
16977: PUSH
16978: LD_INT 5
16980: EQUAL
16981: PUSH
16982: LD_VAR 0 1
16986: PPUSH
16987: CALL_OW 257
16991: PUSH
16992: LD_INT 12
16994: PUSH
16995: LD_INT 15
16997: PUSH
16998: LD_INT 16
17000: PUSH
17001: LD_INT 17
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: IN
17010: OR
17011: AND
17012: IFFALSE 17082
// begin apeAmount := Dec ( apeAmount ) ;
17014: LD_ADDR_EXP 5
17018: PUSH
17019: LD_EXP 5
17023: PPUSH
17024: CALL 58323 0 1
17028: ST_TO_ADDR
// wait ( rand ( 0 0$1 , 1 1$00 ) ) ;
17029: LD_INT 35
17031: PPUSH
17032: LD_INT 2100
17034: PPUSH
17035: CALL_OW 12
17039: PPUSH
17040: CALL_OW 67
// uc_side := 0 ;
17044: LD_ADDR_OWVAR 20
17048: PUSH
17049: LD_INT 0
17051: ST_TO_ADDR
// uc_nation := nation_nature ;
17052: LD_ADDR_OWVAR 21
17056: PUSH
17057: LD_INT 0
17059: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
17060: LD_INT 0
17062: PPUSH
17063: CALL 53208 0 1
// PlaceUnitArea ( CreateHuman , apeArea , false ) ;
17067: CALL_OW 44
17071: PPUSH
17072: LD_INT 6
17074: PPUSH
17075: LD_INT 0
17077: PPUSH
17078: CALL_OW 49
// end ; if unit = Heike then
17082: LD_VAR 0 1
17086: PUSH
17087: LD_EXP 22
17091: EQUAL
17092: IFFALSE 17101
// YouLost ( Heike ) ;
17094: LD_STRING Heike
17096: PPUSH
17097: CALL_OW 104
// if unit = Omar then
17101: LD_VAR 0 1
17105: PUSH
17106: LD_EXP 23
17110: EQUAL
17111: IFFALSE 17120
// YouLost ( Omar ) ;
17113: LD_STRING Omar
17115: PPUSH
17116: CALL_OW 104
// if unit in amForces then
17120: LD_VAR 0 1
17124: PUSH
17125: LD_EXP 26
17129: IN
17130: IFFALSE 17148
// amForces := amForces diff unit ;
17132: LD_ADDR_EXP 26
17136: PUSH
17137: LD_EXP 26
17141: PUSH
17142: LD_VAR 0 1
17146: DIFF
17147: ST_TO_ADDR
// if unit in amTanks then
17148: LD_VAR 0 1
17152: PUSH
17153: LD_EXP 31
17157: IN
17158: IFFALSE 17176
// amTanks := amTanks diff unit ;
17160: LD_ADDR_EXP 31
17164: PUSH
17165: LD_EXP 31
17169: PUSH
17170: LD_VAR 0 1
17174: DIFF
17175: ST_TO_ADDR
// if unit in amPatrol then
17176: LD_VAR 0 1
17180: PUSH
17181: LD_EXP 34
17185: IN
17186: IFFALSE 17204
// amPatrol := amPatrol diff unit ;
17188: LD_ADDR_EXP 34
17192: PUSH
17193: LD_EXP 34
17197: PUSH
17198: LD_VAR 0 1
17202: DIFF
17203: ST_TO_ADDR
// if GetBType ( unit ) in [ b_bunker , b_turret ] and GetSide ( unit ) = 1 then
17204: LD_VAR 0 1
17208: PPUSH
17209: CALL_OW 266
17213: PUSH
17214: LD_INT 32
17216: PUSH
17217: LD_INT 33
17219: PUSH
17220: EMPTY
17221: LIST
17222: LIST
17223: IN
17224: PUSH
17225: LD_VAR 0 1
17229: PPUSH
17230: CALL_OW 255
17234: PUSH
17235: LD_INT 1
17237: EQUAL
17238: AND
17239: IFFALSE 17302
// amBuildings := Join ( amBuildings , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
17241: LD_ADDR_EXP 30
17245: PUSH
17246: LD_EXP 30
17250: PPUSH
17251: LD_VAR 0 1
17255: PPUSH
17256: CALL_OW 266
17260: PUSH
17261: LD_VAR 0 1
17265: PPUSH
17266: CALL_OW 250
17270: PUSH
17271: LD_VAR 0 1
17275: PPUSH
17276: CALL_OW 251
17280: PUSH
17281: LD_VAR 0 1
17285: PPUSH
17286: CALL_OW 254
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: LIST
17295: LIST
17296: PPUSH
17297: CALL 56940 0 2
17301: ST_TO_ADDR
// if unit in legForces then
17302: LD_VAR 0 1
17306: PUSH
17307: LD_EXP 36
17311: IN
17312: IFFALSE 17330
// legForces := legForces diff unit ;
17314: LD_ADDR_EXP 36
17318: PUSH
17319: LD_EXP 36
17323: PUSH
17324: LD_VAR 0 1
17328: DIFF
17329: ST_TO_ADDR
// if unit in legTanks then
17330: LD_VAR 0 1
17334: PUSH
17335: LD_EXP 42
17339: IN
17340: IFFALSE 17358
// legTanks := legTanks diff unit ;
17342: LD_ADDR_EXP 42
17346: PUSH
17347: LD_EXP 42
17351: PUSH
17352: LD_VAR 0 1
17356: DIFF
17357: ST_TO_ADDR
// if GetBType ( unit ) in [ b_bunker , b_turret ] and GetSide ( unit ) = 8 then
17358: LD_VAR 0 1
17362: PPUSH
17363: CALL_OW 266
17367: PUSH
17368: LD_INT 32
17370: PUSH
17371: LD_INT 33
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: IN
17378: PUSH
17379: LD_VAR 0 1
17383: PPUSH
17384: CALL_OW 255
17388: PUSH
17389: LD_INT 8
17391: EQUAL
17392: AND
17393: IFFALSE 17456
// legBuildings := Join ( legBuildings , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
17395: LD_ADDR_EXP 41
17399: PUSH
17400: LD_EXP 41
17404: PPUSH
17405: LD_VAR 0 1
17409: PPUSH
17410: CALL_OW 266
17414: PUSH
17415: LD_VAR 0 1
17419: PPUSH
17420: CALL_OW 250
17424: PUSH
17425: LD_VAR 0 1
17429: PPUSH
17430: CALL_OW 251
17434: PUSH
17435: LD_VAR 0 1
17439: PPUSH
17440: CALL_OW 254
17444: PUSH
17445: EMPTY
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: PPUSH
17451: CALL 56940 0 2
17455: ST_TO_ADDR
// if GetWeapon ( unit ) = us_crane and GetSide ( unit ) = 1 then
17456: LD_VAR 0 1
17460: PPUSH
17461: CALL_OW 264
17465: PUSH
17466: LD_INT 13
17468: EQUAL
17469: PUSH
17470: LD_VAR 0 1
17474: PPUSH
17475: CALL_OW 255
17479: PUSH
17480: LD_INT 1
17482: EQUAL
17483: AND
17484: IFFALSE 17519
// amConstructList := Join ( amConstructList , [ us_medium_wheeled , engine_combustion , control_remote , us_crane ] ) ;
17486: LD_ADDR_EXP 28
17490: PUSH
17491: LD_EXP 28
17495: PPUSH
17496: LD_INT 2
17498: PUSH
17499: LD_INT 1
17501: PUSH
17502: LD_INT 2
17504: PUSH
17505: LD_INT 13
17507: PUSH
17508: EMPTY
17509: LIST
17510: LIST
17511: LIST
17512: LIST
17513: PPUSH
17514: CALL 56940 0 2
17518: ST_TO_ADDR
// if GetWeapon ( unit ) = ar_crane and GetSide ( unit ) = 8 then
17519: LD_VAR 0 1
17523: PPUSH
17524: CALL_OW 264
17528: PUSH
17529: LD_INT 88
17531: EQUAL
17532: PUSH
17533: LD_VAR 0 1
17537: PPUSH
17538: CALL_OW 255
17542: PUSH
17543: LD_INT 8
17545: EQUAL
17546: AND
17547: IFFALSE 17582
// legConstructList := Join ( legConstructList , [ ar_medium_trike , engine_combustion , control_remote , ar_crane ] ) ;
17549: LD_ADDR_EXP 39
17553: PUSH
17554: LD_EXP 39
17558: PPUSH
17559: LD_INT 13
17561: PUSH
17562: LD_INT 1
17564: PUSH
17565: LD_INT 2
17567: PUSH
17568: LD_INT 88
17570: PUSH
17571: EMPTY
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: PPUSH
17577: CALL 56940 0 2
17581: ST_TO_ADDR
// if unit = amCargo then
17582: LD_VAR 0 1
17586: PUSH
17587: LD_EXP 33
17591: EQUAL
17592: IFFALSE 17635
// begin amCargo := 0 ;
17594: LD_ADDR_EXP 33
17598: PUSH
17599: LD_INT 0
17601: ST_TO_ADDR
// amConstructList := Join ( amConstructList , [ us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ] ) ;
17602: LD_ADDR_EXP 28
17606: PUSH
17607: LD_EXP 28
17611: PPUSH
17612: LD_INT 2
17614: PUSH
17615: LD_INT 1
17617: PUSH
17618: LD_INT 2
17620: PUSH
17621: LD_INT 12
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: LIST
17628: LIST
17629: PPUSH
17630: CALL 56940 0 2
17634: ST_TO_ADDR
// end ; if unit = legCargo then
17635: LD_VAR 0 1
17639: PUSH
17640: LD_EXP 43
17644: EQUAL
17645: IFFALSE 17688
// begin legCargo := 0 ;
17647: LD_ADDR_EXP 43
17651: PUSH
17652: LD_INT 0
17654: ST_TO_ADDR
// legConstructList := Join ( legConstructList , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ) ;
17655: LD_ADDR_EXP 39
17659: PUSH
17660: LD_EXP 39
17664: PPUSH
17665: LD_INT 13
17667: PUSH
17668: LD_INT 1
17670: PUSH
17671: LD_INT 2
17673: PUSH
17674: LD_INT 32
17676: PUSH
17677: EMPTY
17678: LIST
17679: LIST
17680: LIST
17681: LIST
17682: PPUSH
17683: CALL 56940 0 2
17687: ST_TO_ADDR
// end ; end ;
17688: PPOPN 1
17690: END
// on TigerTamed ( tiger , sheik ) do begin tigerCounter := Inc ( tigerCounter ) ;
17691: LD_ADDR_EXP 21
17695: PUSH
17696: LD_EXP 21
17700: PPUSH
17701: CALL 58301 0 1
17705: ST_TO_ADDR
// end ;
17706: PPOPN 2
17708: END
// on EnterBuilding ( b , un ) do begin if un in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_class , class_mechanic ] ] ) and GetBType ( b ) = b_factory and GetLives ( un ) < 1000 then
17709: LD_VAR 0 2
17713: PUSH
17714: LD_INT 3
17716: PUSH
17717: LD_INT 22
17719: PUSH
17720: LD_INT 2
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: PUSH
17731: LD_INT 25
17733: PUSH
17734: LD_INT 3
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: PUSH
17741: EMPTY
17742: LIST
17743: LIST
17744: PPUSH
17745: CALL_OW 69
17749: IN
17750: PUSH
17751: LD_VAR 0 1
17755: PPUSH
17756: CALL_OW 266
17760: PUSH
17761: LD_INT 3
17763: EQUAL
17764: AND
17765: PUSH
17766: LD_VAR 0 2
17770: PPUSH
17771: CALL_OW 256
17775: PUSH
17776: LD_INT 1000
17778: LESS
17779: AND
17780: IFFALSE 17806
// begin SetTag ( un , 0 ) ;
17782: LD_VAR 0 2
17786: PPUSH
17787: LD_INT 0
17789: PPUSH
17790: CALL_OW 109
// SetLives ( un , 1000 ) ;
17794: LD_VAR 0 2
17798: PPUSH
17799: LD_INT 1000
17801: PPUSH
17802: CALL_OW 234
// end ; end ;
17806: PPOPN 2
17808: END
// on VehicleConstructed ( veh , fac ) do var side , weapon ;
17809: LD_INT 0
17811: PPUSH
17812: PPUSH
// begin SOS_VehicleConstructed ( veh , fac ) ;
17813: LD_VAR 0 1
17817: PPUSH
17818: LD_VAR 0 2
17822: PPUSH
17823: CALL 77306 0 2
// side := GetSide ( fac ) ;
17827: LD_ADDR_VAR 0 3
17831: PUSH
17832: LD_VAR 0 2
17836: PPUSH
17837: CALL_OW 255
17841: ST_TO_ADDR
// weapon := GetWeapon ( veh ) ;
17842: LD_ADDR_VAR 0 4
17846: PUSH
17847: LD_VAR 0 1
17851: PPUSH
17852: CALL_OW 264
17856: ST_TO_ADDR
// if side = 1 then
17857: LD_VAR 0 3
17861: PUSH
17862: LD_INT 1
17864: EQUAL
17865: IFFALSE 17974
// begin amConstructList := Delete ( amConstructList , 1 ) ;
17867: LD_ADDR_EXP 28
17871: PUSH
17872: LD_EXP 28
17876: PPUSH
17877: LD_INT 1
17879: PPUSH
17880: CALL_OW 3
17884: ST_TO_ADDR
// if weapon = us_cargo_bay and not amCargo then
17885: LD_VAR 0 4
17889: PUSH
17890: LD_INT 12
17892: EQUAL
17893: PUSH
17894: LD_EXP 33
17898: NOT
17899: AND
17900: IFFALSE 17912
// amCargo := veh ;
17902: LD_ADDR_EXP 33
17906: PUSH
17907: LD_VAR 0 1
17911: ST_TO_ADDR
// if weapon in [ us_cargo_bay , us_crane , us_bulldozer ] then
17912: LD_VAR 0 4
17916: PUSH
17917: LD_INT 12
17919: PUSH
17920: LD_INT 13
17922: PUSH
17923: LD_INT 14
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: LIST
17930: IN
17931: IFFALSE 17935
// exit ;
17933: GO 18087
// amTanks := Join ( amTanks , veh ) ;
17935: LD_ADDR_EXP 31
17939: PUSH
17940: LD_EXP 31
17944: PPUSH
17945: LD_VAR 0 1
17949: PPUSH
17950: CALL 56940 0 2
17954: ST_TO_ADDR
// wait ( 0 0$01 ) ;
17955: LD_INT 35
17957: PPUSH
17958: CALL_OW 67
// AddComMoveToArea ( veh , amParkingArea ) ;
17962: LD_VAR 0 1
17966: PPUSH
17967: LD_INT 12
17969: PPUSH
17970: CALL_OW 173
// end ; if side = 8 then
17974: LD_VAR 0 3
17978: PUSH
17979: LD_INT 8
17981: EQUAL
17982: IFFALSE 18087
// begin legConstructList := Delete ( legConstructList , 1 ) ;
17984: LD_ADDR_EXP 39
17988: PUSH
17989: LD_EXP 39
17993: PPUSH
17994: LD_INT 1
17996: PPUSH
17997: CALL_OW 3
18001: ST_TO_ADDR
// if weapon = ar_cargo_bay and not legCargo then
18002: LD_VAR 0 4
18006: PUSH
18007: LD_INT 32
18009: EQUAL
18010: PUSH
18011: LD_EXP 43
18015: NOT
18016: AND
18017: IFFALSE 18029
// legCargo := veh ;
18019: LD_ADDR_EXP 43
18023: PUSH
18024: LD_VAR 0 1
18028: ST_TO_ADDR
// if weapon in [ ar_cargo_bay , ar_crane ] then
18029: LD_VAR 0 4
18033: PUSH
18034: LD_INT 32
18036: PUSH
18037: LD_INT 88
18039: PUSH
18040: EMPTY
18041: LIST
18042: LIST
18043: IN
18044: IFFALSE 18048
// exit ;
18046: GO 18087
// legTanks := Join ( legTanks , veh ) ;
18048: LD_ADDR_EXP 42
18052: PUSH
18053: LD_EXP 42
18057: PPUSH
18058: LD_VAR 0 1
18062: PPUSH
18063: CALL 56940 0 2
18067: ST_TO_ADDR
// wait ( 0 0$01 ) ;
18068: LD_INT 35
18070: PPUSH
18071: CALL_OW 67
// AddComMoveToArea ( veh , legParkingArea ) ;
18075: LD_VAR 0 1
18079: PPUSH
18080: LD_INT 15
18082: PPUSH
18083: CALL_OW 173
// end ; end ;
18087: PPOPN 4
18089: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do var arm , fac , side ;
18090: LD_INT 0
18092: PPUSH
18093: PPUSH
18094: PPUSH
// begin side := GetSide ( driver ) ;
18095: LD_ADDR_VAR 0 7
18099: PUSH
18100: LD_VAR 0 1
18104: PPUSH
18105: CALL_OW 255
18109: ST_TO_ADDR
// if side = 1 and driver in amForces then
18110: LD_VAR 0 7
18114: PUSH
18115: LD_INT 1
18117: EQUAL
18118: PUSH
18119: LD_VAR 0 1
18123: PUSH
18124: LD_EXP 26
18128: IN
18129: AND
18130: IFFALSE 18342
// begin ComMoveToArea ( driver , amBaseArea ) ;
18132: LD_VAR 0 1
18136: PPUSH
18137: LD_INT 1
18139: PPUSH
18140: CALL_OW 113
// SetTag ( driver , tMech ) ;
18144: LD_VAR 0 1
18148: PPUSH
18149: LD_INT 7
18151: PPUSH
18152: CALL_OW 109
// fac := FilterUnitsInArea ( amBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
18156: LD_ADDR_VAR 0 6
18160: PUSH
18161: LD_INT 1
18163: PPUSH
18164: LD_INT 22
18166: PUSH
18167: LD_VAR 0 7
18171: PUSH
18172: EMPTY
18173: LIST
18174: LIST
18175: PUSH
18176: LD_INT 30
18178: PUSH
18179: LD_INT 3
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: PUSH
18186: LD_INT 50
18188: PUSH
18189: EMPTY
18190: LIST
18191: PUSH
18192: EMPTY
18193: LIST
18194: LIST
18195: LIST
18196: PPUSH
18197: CALL_OW 70
18201: ST_TO_ADDR
// if fac then
18202: LD_VAR 0 6
18206: IFFALSE 18228
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
18208: LD_VAR 0 1
18212: PPUSH
18213: LD_VAR 0 6
18217: PUSH
18218: LD_INT 1
18220: ARRAY
18221: PPUSH
18222: CALL_OW 180
// exit ;
18226: GO 18562
// end ; arm := FilterUnitsInArea ( amBaseArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
18228: LD_ADDR_VAR 0 5
18232: PUSH
18233: LD_INT 1
18235: PPUSH
18236: LD_INT 22
18238: PUSH
18239: LD_VAR 0 7
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: PUSH
18248: LD_INT 2
18250: PUSH
18251: LD_INT 30
18253: PUSH
18254: LD_INT 4
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: PUSH
18261: LD_INT 30
18263: PUSH
18264: LD_INT 5
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: PUSH
18271: EMPTY
18272: LIST
18273: LIST
18274: LIST
18275: PUSH
18276: LD_INT 3
18278: PUSH
18279: LD_INT 62
18281: PUSH
18282: EMPTY
18283: LIST
18284: PUSH
18285: EMPTY
18286: LIST
18287: LIST
18288: PUSH
18289: LD_INT 50
18291: PUSH
18292: EMPTY
18293: LIST
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: PPUSH
18301: CALL_OW 70
18305: ST_TO_ADDR
// if arm then
18306: LD_VAR 0 5
18310: IFFALSE 18342
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
18312: LD_VAR 0 1
18316: PPUSH
18317: LD_VAR 0 5
18321: PUSH
18322: LD_INT 1
18324: ARRAY
18325: PPUSH
18326: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
18330: LD_VAR 0 1
18334: PPUSH
18335: LD_INT 1
18337: PPUSH
18338: CALL_OW 183
// end ; end ; if side = 8 then
18342: LD_VAR 0 7
18346: PUSH
18347: LD_INT 8
18349: EQUAL
18350: IFFALSE 18562
// begin ComMoveToArea ( driver , legBaseArea ) ;
18352: LD_VAR 0 1
18356: PPUSH
18357: LD_INT 2
18359: PPUSH
18360: CALL_OW 113
// SetTag ( driver , tMech ) ;
18364: LD_VAR 0 1
18368: PPUSH
18369: LD_INT 7
18371: PPUSH
18372: CALL_OW 109
// fac := FilterUnitsInArea ( legBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
18376: LD_ADDR_VAR 0 6
18380: PUSH
18381: LD_INT 2
18383: PPUSH
18384: LD_INT 22
18386: PUSH
18387: LD_VAR 0 7
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: PUSH
18396: LD_INT 30
18398: PUSH
18399: LD_INT 3
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: PUSH
18406: LD_INT 50
18408: PUSH
18409: EMPTY
18410: LIST
18411: PUSH
18412: EMPTY
18413: LIST
18414: LIST
18415: LIST
18416: PPUSH
18417: CALL_OW 70
18421: ST_TO_ADDR
// if fac then
18422: LD_VAR 0 6
18426: IFFALSE 18448
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
18428: LD_VAR 0 1
18432: PPUSH
18433: LD_VAR 0 6
18437: PUSH
18438: LD_INT 1
18440: ARRAY
18441: PPUSH
18442: CALL_OW 180
// exit ;
18446: GO 18562
// end ; arm := FilterUnitsInArea ( legBaseArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
18448: LD_ADDR_VAR 0 5
18452: PUSH
18453: LD_INT 2
18455: PPUSH
18456: LD_INT 22
18458: PUSH
18459: LD_VAR 0 7
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: LD_INT 2
18470: PUSH
18471: LD_INT 30
18473: PUSH
18474: LD_INT 4
18476: PUSH
18477: EMPTY
18478: LIST
18479: LIST
18480: PUSH
18481: LD_INT 30
18483: PUSH
18484: LD_INT 5
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: PUSH
18491: EMPTY
18492: LIST
18493: LIST
18494: LIST
18495: PUSH
18496: LD_INT 3
18498: PUSH
18499: LD_INT 62
18501: PUSH
18502: EMPTY
18503: LIST
18504: PUSH
18505: EMPTY
18506: LIST
18507: LIST
18508: PUSH
18509: LD_INT 50
18511: PUSH
18512: EMPTY
18513: LIST
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: PPUSH
18521: CALL_OW 70
18525: ST_TO_ADDR
// if arm then
18526: LD_VAR 0 5
18530: IFFALSE 18562
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
18532: LD_VAR 0 1
18536: PPUSH
18537: LD_VAR 0 5
18541: PUSH
18542: LD_INT 1
18544: ARRAY
18545: PPUSH
18546: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
18550: LD_VAR 0 1
18554: PPUSH
18555: LD_INT 1
18557: PPUSH
18558: CALL_OW 183
// end ; end ; end ;
18562: PPOPN 7
18564: END
// on BuildingComplete ( b ) do var side , type ;
18565: LD_INT 0
18567: PPUSH
18568: PPUSH
// begin side := GetSide ( b ) ;
18569: LD_ADDR_VAR 0 2
18573: PUSH
18574: LD_VAR 0 1
18578: PPUSH
18579: CALL_OW 255
18583: ST_TO_ADDR
// type := GetBType ( b ) ;
18584: LD_ADDR_VAR 0 3
18588: PUSH
18589: LD_VAR 0 1
18593: PPUSH
18594: CALL_OW 266
18598: ST_TO_ADDR
// if side = 1 then
18599: LD_VAR 0 2
18603: PUSH
18604: LD_INT 1
18606: EQUAL
18607: IFFALSE 18657
// begin amBuildings := Delete ( amBuildings , 1 ) ;
18609: LD_ADDR_EXP 30
18613: PUSH
18614: LD_EXP 30
18618: PPUSH
18619: LD_INT 1
18621: PPUSH
18622: CALL_OW 3
18626: ST_TO_ADDR
// if type in [ b_depot , b_armoury , b_workshop ] then
18627: LD_VAR 0 3
18631: PUSH
18632: LD_INT 0
18634: PUSH
18635: LD_INT 4
18637: PUSH
18638: LD_INT 2
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: LIST
18645: IN
18646: IFFALSE 18657
// ComUpgrade ( b ) ;
18648: LD_VAR 0 1
18652: PPUSH
18653: CALL_OW 146
// end ; end ;
18657: PPOPN 3
18659: END
// on ResearchComplete ( tech , lab ) do var side ;
18660: LD_INT 0
18662: PPUSH
// begin side := GetSide ( lab ) ;
18663: LD_ADDR_VAR 0 3
18667: PUSH
18668: LD_VAR 0 2
18672: PPUSH
18673: CALL_OW 255
18677: ST_TO_ADDR
// if side = 1 then
18678: LD_VAR 0 3
18682: PUSH
18683: LD_INT 1
18685: EQUAL
18686: IFFALSE 18704
// amTech := amTech diff tech ;
18688: LD_ADDR_EXP 27
18692: PUSH
18693: LD_EXP 27
18697: PUSH
18698: LD_VAR 0 1
18702: DIFF
18703: ST_TO_ADDR
// end ;
18704: PPOPN 3
18706: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
18707: LD_VAR 0 1
18711: PPUSH
18712: CALL 77290 0 1
// end ;
18716: PPOPN 1
18718: END
// on SailEvent ( event ) do begin case event of end ;
18719: LD_VAR 0 1
18723: PUSH
18724: POP
// end ;
18725: PPOPN 1
18727: END
// on Contact ( s1 , s2 ) do begin if not gameActive then
18728: LD_EXP 19
18732: NOT
18733: IFFALSE 18737
// exit ;
18735: GO 18835
// if not spotByAmerican and s1 in [ 2 , 1 ] and s2 in [ 1 , 2 ] then
18737: LD_EXP 8
18741: NOT
18742: PUSH
18743: LD_VAR 0 1
18747: PUSH
18748: LD_INT 2
18750: PUSH
18751: LD_INT 1
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: IN
18758: AND
18759: PUSH
18760: LD_VAR 0 2
18764: PUSH
18765: LD_INT 1
18767: PUSH
18768: LD_INT 2
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: IN
18775: AND
18776: IFFALSE 18786
// spotByAmerican := true ;
18778: LD_ADDR_EXP 8
18782: PUSH
18783: LD_INT 1
18785: ST_TO_ADDR
// if not spotByLegion and s1 in [ 2 , 8 ] and s2 in [ 8 , 2 ] then
18786: LD_EXP 9
18790: NOT
18791: PUSH
18792: LD_VAR 0 1
18796: PUSH
18797: LD_INT 2
18799: PUSH
18800: LD_INT 8
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: IN
18807: AND
18808: PUSH
18809: LD_VAR 0 2
18813: PUSH
18814: LD_INT 8
18816: PUSH
18817: LD_INT 2
18819: PUSH
18820: EMPTY
18821: LIST
18822: LIST
18823: IN
18824: AND
18825: IFFALSE 18835
// spotByLegion := true ;
18827: LD_ADDR_EXP 9
18831: PUSH
18832: LD_INT 1
18834: ST_TO_ADDR
// end ; end_of_file
18835: PPOPN 2
18837: END
// every 1 1$05 + 0 0$20 trigger spotArabianBase do var i , tmp ;
18838: LD_EXP 7
18842: IFFALSE 18949
18844: GO 18846
18846: DISABLE
18847: LD_INT 0
18849: PPUSH
18850: PPUSH
// begin enable ;
18851: ENABLE
// wait ( rand ( 0 0$1 , 0 0$11 ) ) ;
18852: LD_INT 35
18854: PPUSH
18855: LD_INT 385
18857: PPUSH
18858: CALL_OW 12
18862: PPUSH
18863: CALL_OW 67
// tmp := [ cratesNorthArea , cratesWestArea ] ;
18867: LD_ADDR_VAR 0 2
18871: PUSH
18872: LD_INT 16
18874: PUSH
18875: LD_INT 17
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: ST_TO_ADDR
// i := tmp [ rand ( 1 , Count ( tmp ) ) ] ;
18882: LD_ADDR_VAR 0 1
18886: PUSH
18887: LD_VAR 0 2
18891: PUSH
18892: LD_INT 1
18894: PPUSH
18895: LD_VAR 0 2
18899: PPUSH
18900: CALL 21340 0 1
18904: PPUSH
18905: CALL_OW 12
18909: ARRAY
18910: ST_TO_ADDR
// if GetListOfCratesInArea ( i ) < 8 then
18911: LD_VAR 0 1
18915: PPUSH
18916: CALL_OW 435
18920: PUSH
18921: LD_INT 8
18923: LESS
18924: IFFALSE 18949
// CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
18926: LD_INT 1
18928: PPUSH
18929: LD_INT 5
18931: PPUSH
18932: CALL_OW 12
18936: PPUSH
18937: LD_VAR 0 1
18941: PPUSH
18942: LD_INT 1
18944: PPUSH
18945: CALL_OW 55
// end ;
18949: PPOPN 2
18951: END
// every 0 0$20 trigger tick < [ 7 7$00 , 6 6$00 , 5 5$00 , 4 4$30 ] [ Difficulty ] and spotArabianBase do
18952: LD_OWVAR 1
18956: PUSH
18957: LD_INT 14700
18959: PUSH
18960: LD_INT 12600
18962: PUSH
18963: LD_INT 10500
18965: PUSH
18966: LD_INT 9450
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: LIST
18973: LIST
18974: PUSH
18975: LD_OWVAR 67
18979: ARRAY
18980: LESS
18981: PUSH
18982: LD_EXP 7
18986: AND
18987: IFFALSE 19020
18989: GO 18991
18991: DISABLE
// begin enable ;
18992: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 218 , 92 , 11 , true ) ;
18993: LD_INT 1
18995: PPUSH
18996: LD_INT 5
18998: PPUSH
18999: CALL_OW 12
19003: PPUSH
19004: LD_INT 218
19006: PPUSH
19007: LD_INT 92
19009: PPUSH
19010: LD_INT 11
19012: PPUSH
19013: LD_INT 1
19015: PPUSH
19016: CALL_OW 56
// end ;
19020: END
// every 0 0$55 trigger IsOk ( amBase ) do
19021: LD_INT 2
19023: PPUSH
19024: CALL_OW 302
19028: IFFALSE 19068
19030: GO 19032
19032: DISABLE
// begin enable ;
19033: ENABLE
// if GetListOfCratesInArea ( amCratesArea ) < 3 then
19034: LD_INT 13
19036: PPUSH
19037: CALL_OW 435
19041: PUSH
19042: LD_INT 3
19044: LESS
19045: IFFALSE 19068
// CreateCratesArea ( rand ( 1 , 5 ) , amCratesArea , true ) ;
19047: LD_INT 1
19049: PPUSH
19050: LD_INT 5
19052: PPUSH
19053: CALL_OW 12
19057: PPUSH
19058: LD_INT 13
19060: PPUSH
19061: LD_INT 1
19063: PPUSH
19064: CALL_OW 55
// end ;
19068: END
// every 1 1$05 trigger IsOk ( legBase ) do
19069: LD_INT 38
19071: PPUSH
19072: CALL_OW 302
19076: IFFALSE 19116
19078: GO 19080
19080: DISABLE
// begin enable ;
19081: ENABLE
// if GetListOfCratesInArea ( legCratesArea ) < 3 then
19082: LD_INT 14
19084: PPUSH
19085: CALL_OW 435
19089: PUSH
19090: LD_INT 3
19092: LESS
19093: IFFALSE 19116
// CreateCratesArea ( rand ( 1 , 5 ) , legCratesArea , true ) ;
19095: LD_INT 1
19097: PPUSH
19098: LD_INT 5
19100: PPUSH
19101: CALL_OW 12
19105: PPUSH
19106: LD_INT 14
19108: PPUSH
19109: LD_INT 1
19111: PPUSH
19112: CALL_OW 55
// end ; end_of_file
19116: END
// every 0 0$1 trigger gameActive and GetClass ( Omar ) <> class_desert_warior and spotArabianBase and IsOk ( arBase ) do
19117: LD_EXP 19
19121: PUSH
19122: LD_EXP 23
19126: PPUSH
19127: CALL_OW 257
19131: PUSH
19132: LD_INT 11
19134: NONEQUAL
19135: AND
19136: PUSH
19137: LD_EXP 7
19141: AND
19142: PUSH
19143: LD_INT 85
19145: PPUSH
19146: CALL_OW 302
19150: AND
19151: IFFALSE 19171
19153: GO 19155
19155: DISABLE
// begin Query ( QSheik ) ;
19156: LD_STRING QSheik
19158: PPUSH
19159: CALL_OW 97
// omarCanChangeClass := true ;
19163: LD_ADDR_EXP 20
19167: PUSH
19168: LD_INT 1
19170: ST_TO_ADDR
// end ;
19171: END
// every 0 0$2 trigger omarCanChangeClass and GetClass ( Omar ) <> class_desert_warior and IsInUnit ( Omar ) = arBase do
19172: LD_EXP 20
19176: PUSH
19177: LD_EXP 23
19181: PPUSH
19182: CALL_OW 257
19186: PUSH
19187: LD_INT 11
19189: NONEQUAL
19190: AND
19191: PUSH
19192: LD_EXP 23
19196: PPUSH
19197: CALL_OW 310
19201: PUSH
19202: LD_INT 85
19204: EQUAL
19205: AND
19206: IFFALSE 19237
19208: GO 19210
19210: DISABLE
// begin enable ;
19211: ENABLE
// if Query ( QChangeClass ) = 1 then
19212: LD_STRING QChangeClass
19214: PPUSH
19215: CALL_OW 97
19219: PUSH
19220: LD_INT 1
19222: EQUAL
19223: IFFALSE 19237
// SetClass ( Omar , class_desert_warior ) ;
19225: LD_EXP 23
19229: PPUSH
19230: LD_INT 11
19232: PPUSH
19233: CALL_OW 336
// end ; end_of_file
19237: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19238: LD_INT 0
19240: PPUSH
19241: PPUSH
// if exist_mode then
19242: LD_VAR 0 2
19246: IFFALSE 19271
// unit := CreateCharacter ( prefix & ident ) else
19248: LD_ADDR_VAR 0 5
19252: PUSH
19253: LD_VAR 0 3
19257: PUSH
19258: LD_VAR 0 1
19262: STR
19263: PPUSH
19264: CALL_OW 34
19268: ST_TO_ADDR
19269: GO 19286
// unit := NewCharacter ( ident ) ;
19271: LD_ADDR_VAR 0 5
19275: PUSH
19276: LD_VAR 0 1
19280: PPUSH
19281: CALL_OW 25
19285: ST_TO_ADDR
// result := unit ;
19286: LD_ADDR_VAR 0 4
19290: PUSH
19291: LD_VAR 0 5
19295: ST_TO_ADDR
// end ;
19296: LD_VAR 0 4
19300: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19301: LD_INT 0
19303: PPUSH
19304: PPUSH
// if not side or not nation then
19305: LD_VAR 0 1
19309: NOT
19310: PUSH
19311: LD_VAR 0 2
19315: NOT
19316: OR
19317: IFFALSE 19321
// exit ;
19319: GO 20089
// case nation of nation_american :
19321: LD_VAR 0 2
19325: PUSH
19326: LD_INT 1
19328: DOUBLE
19329: EQUAL
19330: IFTRUE 19334
19332: GO 19548
19334: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
19335: LD_ADDR_VAR 0 4
19339: PUSH
19340: LD_INT 35
19342: PUSH
19343: LD_INT 45
19345: PUSH
19346: LD_INT 46
19348: PUSH
19349: LD_INT 47
19351: PUSH
19352: LD_INT 82
19354: PUSH
19355: LD_INT 83
19357: PUSH
19358: LD_INT 84
19360: PUSH
19361: LD_INT 85
19363: PUSH
19364: LD_INT 86
19366: PUSH
19367: LD_INT 1
19369: PUSH
19370: LD_INT 2
19372: PUSH
19373: LD_INT 6
19375: PUSH
19376: LD_INT 15
19378: PUSH
19379: LD_INT 16
19381: PUSH
19382: LD_INT 7
19384: PUSH
19385: LD_INT 12
19387: PUSH
19388: LD_INT 13
19390: PUSH
19391: LD_INT 10
19393: PUSH
19394: LD_INT 14
19396: PUSH
19397: LD_INT 20
19399: PUSH
19400: LD_INT 21
19402: PUSH
19403: LD_INT 22
19405: PUSH
19406: LD_INT 25
19408: PUSH
19409: LD_INT 32
19411: PUSH
19412: LD_INT 27
19414: PUSH
19415: LD_INT 36
19417: PUSH
19418: LD_INT 69
19420: PUSH
19421: LD_INT 39
19423: PUSH
19424: LD_INT 34
19426: PUSH
19427: LD_INT 40
19429: PUSH
19430: LD_INT 48
19432: PUSH
19433: LD_INT 49
19435: PUSH
19436: LD_INT 50
19438: PUSH
19439: LD_INT 51
19441: PUSH
19442: LD_INT 52
19444: PUSH
19445: LD_INT 53
19447: PUSH
19448: LD_INT 54
19450: PUSH
19451: LD_INT 55
19453: PUSH
19454: LD_INT 56
19456: PUSH
19457: LD_INT 57
19459: PUSH
19460: LD_INT 58
19462: PUSH
19463: LD_INT 59
19465: PUSH
19466: LD_INT 60
19468: PUSH
19469: LD_INT 61
19471: PUSH
19472: LD_INT 62
19474: PUSH
19475: LD_INT 80
19477: PUSH
19478: LD_INT 82
19480: PUSH
19481: LD_INT 83
19483: PUSH
19484: LD_INT 84
19486: PUSH
19487: LD_INT 85
19489: PUSH
19490: LD_INT 86
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: LIST
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: LIST
19507: LIST
19508: LIST
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: ST_TO_ADDR
19546: GO 20013
19548: LD_INT 2
19550: DOUBLE
19551: EQUAL
19552: IFTRUE 19556
19554: GO 19782
19556: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
19557: LD_ADDR_VAR 0 4
19561: PUSH
19562: LD_INT 35
19564: PUSH
19565: LD_INT 45
19567: PUSH
19568: LD_INT 46
19570: PUSH
19571: LD_INT 47
19573: PUSH
19574: LD_INT 82
19576: PUSH
19577: LD_INT 83
19579: PUSH
19580: LD_INT 84
19582: PUSH
19583: LD_INT 85
19585: PUSH
19586: LD_INT 87
19588: PUSH
19589: LD_INT 70
19591: PUSH
19592: LD_INT 1
19594: PUSH
19595: LD_INT 11
19597: PUSH
19598: LD_INT 3
19600: PUSH
19601: LD_INT 4
19603: PUSH
19604: LD_INT 5
19606: PUSH
19607: LD_INT 6
19609: PUSH
19610: LD_INT 15
19612: PUSH
19613: LD_INT 18
19615: PUSH
19616: LD_INT 7
19618: PUSH
19619: LD_INT 17
19621: PUSH
19622: LD_INT 8
19624: PUSH
19625: LD_INT 20
19627: PUSH
19628: LD_INT 21
19630: PUSH
19631: LD_INT 22
19633: PUSH
19634: LD_INT 72
19636: PUSH
19637: LD_INT 26
19639: PUSH
19640: LD_INT 69
19642: PUSH
19643: LD_INT 39
19645: PUSH
19646: LD_INT 40
19648: PUSH
19649: LD_INT 41
19651: PUSH
19652: LD_INT 42
19654: PUSH
19655: LD_INT 43
19657: PUSH
19658: LD_INT 48
19660: PUSH
19661: LD_INT 49
19663: PUSH
19664: LD_INT 50
19666: PUSH
19667: LD_INT 51
19669: PUSH
19670: LD_INT 52
19672: PUSH
19673: LD_INT 53
19675: PUSH
19676: LD_INT 54
19678: PUSH
19679: LD_INT 55
19681: PUSH
19682: LD_INT 56
19684: PUSH
19685: LD_INT 60
19687: PUSH
19688: LD_INT 61
19690: PUSH
19691: LD_INT 62
19693: PUSH
19694: LD_INT 66
19696: PUSH
19697: LD_INT 67
19699: PUSH
19700: LD_INT 68
19702: PUSH
19703: LD_INT 81
19705: PUSH
19706: LD_INT 82
19708: PUSH
19709: LD_INT 83
19711: PUSH
19712: LD_INT 84
19714: PUSH
19715: LD_INT 85
19717: PUSH
19718: LD_INT 87
19720: PUSH
19721: LD_INT 88
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: ST_TO_ADDR
19780: GO 20013
19782: LD_INT 3
19784: DOUBLE
19785: EQUAL
19786: IFTRUE 19790
19788: GO 20012
19790: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
19791: LD_ADDR_VAR 0 4
19795: PUSH
19796: LD_INT 46
19798: PUSH
19799: LD_INT 47
19801: PUSH
19802: LD_INT 1
19804: PUSH
19805: LD_INT 2
19807: PUSH
19808: LD_INT 82
19810: PUSH
19811: LD_INT 83
19813: PUSH
19814: LD_INT 84
19816: PUSH
19817: LD_INT 85
19819: PUSH
19820: LD_INT 86
19822: PUSH
19823: LD_INT 11
19825: PUSH
19826: LD_INT 9
19828: PUSH
19829: LD_INT 20
19831: PUSH
19832: LD_INT 19
19834: PUSH
19835: LD_INT 21
19837: PUSH
19838: LD_INT 24
19840: PUSH
19841: LD_INT 22
19843: PUSH
19844: LD_INT 25
19846: PUSH
19847: LD_INT 28
19849: PUSH
19850: LD_INT 29
19852: PUSH
19853: LD_INT 30
19855: PUSH
19856: LD_INT 31
19858: PUSH
19859: LD_INT 37
19861: PUSH
19862: LD_INT 38
19864: PUSH
19865: LD_INT 32
19867: PUSH
19868: LD_INT 27
19870: PUSH
19871: LD_INT 33
19873: PUSH
19874: LD_INT 69
19876: PUSH
19877: LD_INT 39
19879: PUSH
19880: LD_INT 34
19882: PUSH
19883: LD_INT 40
19885: PUSH
19886: LD_INT 71
19888: PUSH
19889: LD_INT 23
19891: PUSH
19892: LD_INT 44
19894: PUSH
19895: LD_INT 48
19897: PUSH
19898: LD_INT 49
19900: PUSH
19901: LD_INT 50
19903: PUSH
19904: LD_INT 51
19906: PUSH
19907: LD_INT 52
19909: PUSH
19910: LD_INT 53
19912: PUSH
19913: LD_INT 54
19915: PUSH
19916: LD_INT 55
19918: PUSH
19919: LD_INT 56
19921: PUSH
19922: LD_INT 57
19924: PUSH
19925: LD_INT 58
19927: PUSH
19928: LD_INT 59
19930: PUSH
19931: LD_INT 63
19933: PUSH
19934: LD_INT 64
19936: PUSH
19937: LD_INT 65
19939: PUSH
19940: LD_INT 82
19942: PUSH
19943: LD_INT 83
19945: PUSH
19946: LD_INT 84
19948: PUSH
19949: LD_INT 85
19951: PUSH
19952: LD_INT 86
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: ST_TO_ADDR
20010: GO 20013
20012: POP
// if state > - 1 and state < 3 then
20013: LD_VAR 0 3
20017: PUSH
20018: LD_INT 1
20020: NEG
20021: GREATER
20022: PUSH
20023: LD_VAR 0 3
20027: PUSH
20028: LD_INT 3
20030: LESS
20031: AND
20032: IFFALSE 20089
// for i in result do
20034: LD_ADDR_VAR 0 5
20038: PUSH
20039: LD_VAR 0 4
20043: PUSH
20044: FOR_IN
20045: IFFALSE 20087
// if GetTech ( i , side ) <> state then
20047: LD_VAR 0 5
20051: PPUSH
20052: LD_VAR 0 1
20056: PPUSH
20057: CALL_OW 321
20061: PUSH
20062: LD_VAR 0 3
20066: NONEQUAL
20067: IFFALSE 20085
// result := result diff i ;
20069: LD_ADDR_VAR 0 4
20073: PUSH
20074: LD_VAR 0 4
20078: PUSH
20079: LD_VAR 0 5
20083: DIFF
20084: ST_TO_ADDR
20085: GO 20044
20087: POP
20088: POP
// end ;
20089: LD_VAR 0 4
20093: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20094: LD_INT 0
20096: PPUSH
20097: PPUSH
20098: PPUSH
// result := true ;
20099: LD_ADDR_VAR 0 3
20103: PUSH
20104: LD_INT 1
20106: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20107: LD_ADDR_VAR 0 5
20111: PUSH
20112: LD_VAR 0 2
20116: PPUSH
20117: CALL_OW 480
20121: ST_TO_ADDR
// if not tmp then
20122: LD_VAR 0 5
20126: NOT
20127: IFFALSE 20131
// exit ;
20129: GO 20180
// for i in tmp do
20131: LD_ADDR_VAR 0 4
20135: PUSH
20136: LD_VAR 0 5
20140: PUSH
20141: FOR_IN
20142: IFFALSE 20178
// if GetTech ( i , side ) <> state_researched then
20144: LD_VAR 0 4
20148: PPUSH
20149: LD_VAR 0 1
20153: PPUSH
20154: CALL_OW 321
20158: PUSH
20159: LD_INT 2
20161: NONEQUAL
20162: IFFALSE 20176
// begin result := false ;
20164: LD_ADDR_VAR 0 3
20168: PUSH
20169: LD_INT 0
20171: ST_TO_ADDR
// exit ;
20172: POP
20173: POP
20174: GO 20180
// end ;
20176: GO 20141
20178: POP
20179: POP
// end ;
20180: LD_VAR 0 3
20184: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20185: LD_INT 0
20187: PPUSH
20188: PPUSH
20189: PPUSH
20190: PPUSH
20191: PPUSH
20192: PPUSH
20193: PPUSH
20194: PPUSH
20195: PPUSH
20196: PPUSH
20197: PPUSH
20198: PPUSH
20199: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20200: LD_VAR 0 1
20204: NOT
20205: PUSH
20206: LD_VAR 0 1
20210: PPUSH
20211: CALL_OW 257
20215: PUSH
20216: LD_INT 9
20218: NONEQUAL
20219: OR
20220: IFFALSE 20224
// exit ;
20222: GO 20797
// side := GetSide ( unit ) ;
20224: LD_ADDR_VAR 0 9
20228: PUSH
20229: LD_VAR 0 1
20233: PPUSH
20234: CALL_OW 255
20238: ST_TO_ADDR
// tech_space := tech_spacanom ;
20239: LD_ADDR_VAR 0 12
20243: PUSH
20244: LD_INT 29
20246: ST_TO_ADDR
// tech_time := tech_taurad ;
20247: LD_ADDR_VAR 0 13
20251: PUSH
20252: LD_INT 28
20254: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20255: LD_ADDR_VAR 0 11
20259: PUSH
20260: LD_VAR 0 1
20264: PPUSH
20265: CALL_OW 310
20269: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20270: LD_VAR 0 11
20274: PPUSH
20275: CALL_OW 247
20279: PUSH
20280: LD_INT 2
20282: EQUAL
20283: IFFALSE 20287
// exit ;
20285: GO 20797
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20287: LD_ADDR_VAR 0 8
20291: PUSH
20292: LD_INT 81
20294: PUSH
20295: LD_VAR 0 9
20299: PUSH
20300: EMPTY
20301: LIST
20302: LIST
20303: PUSH
20304: LD_INT 3
20306: PUSH
20307: LD_INT 21
20309: PUSH
20310: LD_INT 3
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: PUSH
20317: EMPTY
20318: LIST
20319: LIST
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: PPUSH
20325: CALL_OW 69
20329: ST_TO_ADDR
// if not tmp then
20330: LD_VAR 0 8
20334: NOT
20335: IFFALSE 20339
// exit ;
20337: GO 20797
// if in_unit then
20339: LD_VAR 0 11
20343: IFFALSE 20367
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20345: LD_ADDR_VAR 0 10
20349: PUSH
20350: LD_VAR 0 8
20354: PPUSH
20355: LD_VAR 0 11
20359: PPUSH
20360: CALL_OW 74
20364: ST_TO_ADDR
20365: GO 20387
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20367: LD_ADDR_VAR 0 10
20371: PUSH
20372: LD_VAR 0 8
20376: PPUSH
20377: LD_VAR 0 1
20381: PPUSH
20382: CALL_OW 74
20386: ST_TO_ADDR
// if not enemy then
20387: LD_VAR 0 10
20391: NOT
20392: IFFALSE 20396
// exit ;
20394: GO 20797
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20396: LD_VAR 0 11
20400: PUSH
20401: LD_VAR 0 11
20405: PPUSH
20406: LD_VAR 0 10
20410: PPUSH
20411: CALL_OW 296
20415: PUSH
20416: LD_INT 13
20418: GREATER
20419: AND
20420: PUSH
20421: LD_VAR 0 1
20425: PPUSH
20426: LD_VAR 0 10
20430: PPUSH
20431: CALL_OW 296
20435: PUSH
20436: LD_INT 12
20438: GREATER
20439: OR
20440: IFFALSE 20444
// exit ;
20442: GO 20797
// missile := [ 1 ] ;
20444: LD_ADDR_VAR 0 14
20448: PUSH
20449: LD_INT 1
20451: PUSH
20452: EMPTY
20453: LIST
20454: ST_TO_ADDR
// if Researched ( side , tech_space ) then
20455: LD_VAR 0 9
20459: PPUSH
20460: LD_VAR 0 12
20464: PPUSH
20465: CALL_OW 325
20469: IFFALSE 20498
// missile := Replace ( missile , missile + 1 , 2 ) ;
20471: LD_ADDR_VAR 0 14
20475: PUSH
20476: LD_VAR 0 14
20480: PPUSH
20481: LD_VAR 0 14
20485: PUSH
20486: LD_INT 1
20488: PLUS
20489: PPUSH
20490: LD_INT 2
20492: PPUSH
20493: CALL_OW 1
20497: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
20498: LD_VAR 0 9
20502: PPUSH
20503: LD_VAR 0 13
20507: PPUSH
20508: CALL_OW 325
20512: PUSH
20513: LD_VAR 0 10
20517: PPUSH
20518: CALL_OW 255
20522: PPUSH
20523: LD_VAR 0 13
20527: PPUSH
20528: CALL_OW 325
20532: NOT
20533: AND
20534: IFFALSE 20563
// missile := Replace ( missile , missile + 1 , 3 ) ;
20536: LD_ADDR_VAR 0 14
20540: PUSH
20541: LD_VAR 0 14
20545: PPUSH
20546: LD_VAR 0 14
20550: PUSH
20551: LD_INT 1
20553: PLUS
20554: PPUSH
20555: LD_INT 3
20557: PPUSH
20558: CALL_OW 1
20562: ST_TO_ADDR
// if missile < 2 then
20563: LD_VAR 0 14
20567: PUSH
20568: LD_INT 2
20570: LESS
20571: IFFALSE 20575
// exit ;
20573: GO 20797
// x := GetX ( enemy ) ;
20575: LD_ADDR_VAR 0 4
20579: PUSH
20580: LD_VAR 0 10
20584: PPUSH
20585: CALL_OW 250
20589: ST_TO_ADDR
// y := GetY ( enemy ) ;
20590: LD_ADDR_VAR 0 5
20594: PUSH
20595: LD_VAR 0 10
20599: PPUSH
20600: CALL_OW 251
20604: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
20605: LD_ADDR_VAR 0 6
20609: PUSH
20610: LD_VAR 0 4
20614: PUSH
20615: LD_INT 1
20617: NEG
20618: PPUSH
20619: LD_INT 1
20621: PPUSH
20622: CALL_OW 12
20626: PLUS
20627: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
20628: LD_ADDR_VAR 0 7
20632: PUSH
20633: LD_VAR 0 5
20637: PUSH
20638: LD_INT 1
20640: NEG
20641: PPUSH
20642: LD_INT 1
20644: PPUSH
20645: CALL_OW 12
20649: PLUS
20650: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20651: LD_VAR 0 6
20655: PPUSH
20656: LD_VAR 0 7
20660: PPUSH
20661: CALL_OW 488
20665: NOT
20666: IFFALSE 20688
// begin _x := x ;
20668: LD_ADDR_VAR 0 6
20672: PUSH
20673: LD_VAR 0 4
20677: ST_TO_ADDR
// _y := y ;
20678: LD_ADDR_VAR 0 7
20682: PUSH
20683: LD_VAR 0 5
20687: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
20688: LD_ADDR_VAR 0 3
20692: PUSH
20693: LD_INT 1
20695: PPUSH
20696: LD_VAR 0 14
20700: PPUSH
20701: CALL_OW 12
20705: ST_TO_ADDR
// case i of 1 :
20706: LD_VAR 0 3
20710: PUSH
20711: LD_INT 1
20713: DOUBLE
20714: EQUAL
20715: IFTRUE 20719
20717: GO 20736
20719: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
20720: LD_VAR 0 1
20724: PPUSH
20725: LD_VAR 0 10
20729: PPUSH
20730: CALL_OW 115
20734: GO 20797
20736: LD_INT 2
20738: DOUBLE
20739: EQUAL
20740: IFTRUE 20744
20742: GO 20766
20744: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
20745: LD_VAR 0 1
20749: PPUSH
20750: LD_VAR 0 6
20754: PPUSH
20755: LD_VAR 0 7
20759: PPUSH
20760: CALL_OW 153
20764: GO 20797
20766: LD_INT 3
20768: DOUBLE
20769: EQUAL
20770: IFTRUE 20774
20772: GO 20796
20774: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
20775: LD_VAR 0 1
20779: PPUSH
20780: LD_VAR 0 6
20784: PPUSH
20785: LD_VAR 0 7
20789: PPUSH
20790: CALL_OW 154
20794: GO 20797
20796: POP
// end ;
20797: LD_VAR 0 2
20801: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
20802: LD_INT 0
20804: PPUSH
20805: PPUSH
20806: PPUSH
20807: PPUSH
20808: PPUSH
20809: PPUSH
// if not unit or not building then
20810: LD_VAR 0 1
20814: NOT
20815: PUSH
20816: LD_VAR 0 2
20820: NOT
20821: OR
20822: IFFALSE 20826
// exit ;
20824: GO 20984
// x := GetX ( building ) ;
20826: LD_ADDR_VAR 0 5
20830: PUSH
20831: LD_VAR 0 2
20835: PPUSH
20836: CALL_OW 250
20840: ST_TO_ADDR
// y := GetY ( building ) ;
20841: LD_ADDR_VAR 0 6
20845: PUSH
20846: LD_VAR 0 2
20850: PPUSH
20851: CALL_OW 251
20855: ST_TO_ADDR
// for i = 0 to 5 do
20856: LD_ADDR_VAR 0 4
20860: PUSH
20861: DOUBLE
20862: LD_INT 0
20864: DEC
20865: ST_TO_ADDR
20866: LD_INT 5
20868: PUSH
20869: FOR_TO
20870: IFFALSE 20982
// begin _x := ShiftX ( x , i , 3 ) ;
20872: LD_ADDR_VAR 0 7
20876: PUSH
20877: LD_VAR 0 5
20881: PPUSH
20882: LD_VAR 0 4
20886: PPUSH
20887: LD_INT 3
20889: PPUSH
20890: CALL_OW 272
20894: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
20895: LD_ADDR_VAR 0 8
20899: PUSH
20900: LD_VAR 0 6
20904: PPUSH
20905: LD_VAR 0 4
20909: PPUSH
20910: LD_INT 3
20912: PPUSH
20913: CALL_OW 273
20917: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20918: LD_VAR 0 7
20922: PPUSH
20923: LD_VAR 0 8
20927: PPUSH
20928: CALL_OW 488
20932: NOT
20933: IFFALSE 20937
// continue ;
20935: GO 20869
// if HexInfo ( _x , _y ) = 0 then
20937: LD_VAR 0 7
20941: PPUSH
20942: LD_VAR 0 8
20946: PPUSH
20947: CALL_OW 428
20951: PUSH
20952: LD_INT 0
20954: EQUAL
20955: IFFALSE 20980
// begin ComMoveXY ( unit , _x , _y ) ;
20957: LD_VAR 0 1
20961: PPUSH
20962: LD_VAR 0 7
20966: PPUSH
20967: LD_VAR 0 8
20971: PPUSH
20972: CALL_OW 111
// exit ;
20976: POP
20977: POP
20978: GO 20984
// end ; end ;
20980: GO 20869
20982: POP
20983: POP
// end ;
20984: LD_VAR 0 3
20988: RET
// export function ScanBase ( side , base_area ) ; begin
20989: LD_INT 0
20991: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
20992: LD_ADDR_VAR 0 3
20996: PUSH
20997: LD_VAR 0 2
21001: PPUSH
21002: LD_INT 81
21004: PUSH
21005: LD_VAR 0 1
21009: PUSH
21010: EMPTY
21011: LIST
21012: LIST
21013: PPUSH
21014: CALL_OW 70
21018: ST_TO_ADDR
// end ;
21019: LD_VAR 0 3
21023: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
21024: LD_INT 0
21026: PPUSH
21027: PPUSH
21028: PPUSH
21029: PPUSH
// result := false ;
21030: LD_ADDR_VAR 0 2
21034: PUSH
21035: LD_INT 0
21037: ST_TO_ADDR
// side := GetSide ( unit ) ;
21038: LD_ADDR_VAR 0 3
21042: PUSH
21043: LD_VAR 0 1
21047: PPUSH
21048: CALL_OW 255
21052: ST_TO_ADDR
// nat := GetNation ( unit ) ;
21053: LD_ADDR_VAR 0 4
21057: PUSH
21058: LD_VAR 0 1
21062: PPUSH
21063: CALL_OW 248
21067: ST_TO_ADDR
// case nat of 1 :
21068: LD_VAR 0 4
21072: PUSH
21073: LD_INT 1
21075: DOUBLE
21076: EQUAL
21077: IFTRUE 21081
21079: GO 21092
21081: POP
// tech := tech_lassight ; 2 :
21082: LD_ADDR_VAR 0 5
21086: PUSH
21087: LD_INT 12
21089: ST_TO_ADDR
21090: GO 21131
21092: LD_INT 2
21094: DOUBLE
21095: EQUAL
21096: IFTRUE 21100
21098: GO 21111
21100: POP
// tech := tech_mortar ; 3 :
21101: LD_ADDR_VAR 0 5
21105: PUSH
21106: LD_INT 41
21108: ST_TO_ADDR
21109: GO 21131
21111: LD_INT 3
21113: DOUBLE
21114: EQUAL
21115: IFTRUE 21119
21117: GO 21130
21119: POP
// tech := tech_bazooka ; end ;
21120: LD_ADDR_VAR 0 5
21124: PUSH
21125: LD_INT 44
21127: ST_TO_ADDR
21128: GO 21131
21130: POP
// if Researched ( side , tech ) then
21131: LD_VAR 0 3
21135: PPUSH
21136: LD_VAR 0 5
21140: PPUSH
21141: CALL_OW 325
21145: IFFALSE 21172
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
21147: LD_ADDR_VAR 0 2
21151: PUSH
21152: LD_INT 5
21154: PUSH
21155: LD_INT 8
21157: PUSH
21158: LD_INT 9
21160: PUSH
21161: EMPTY
21162: LIST
21163: LIST
21164: LIST
21165: PUSH
21166: LD_VAR 0 4
21170: ARRAY
21171: ST_TO_ADDR
// end ;
21172: LD_VAR 0 2
21176: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
21177: LD_INT 0
21179: PPUSH
21180: PPUSH
21181: PPUSH
// if not mines then
21182: LD_VAR 0 2
21186: NOT
21187: IFFALSE 21191
// exit ;
21189: GO 21335
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21191: LD_ADDR_VAR 0 5
21195: PUSH
21196: LD_INT 81
21198: PUSH
21199: LD_VAR 0 1
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: PUSH
21208: LD_INT 3
21210: PUSH
21211: LD_INT 21
21213: PUSH
21214: LD_INT 3
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: PUSH
21221: EMPTY
21222: LIST
21223: LIST
21224: PUSH
21225: EMPTY
21226: LIST
21227: LIST
21228: PPUSH
21229: CALL_OW 69
21233: ST_TO_ADDR
// for i in mines do
21234: LD_ADDR_VAR 0 4
21238: PUSH
21239: LD_VAR 0 2
21243: PUSH
21244: FOR_IN
21245: IFFALSE 21333
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
21247: LD_VAR 0 4
21251: PUSH
21252: LD_INT 1
21254: ARRAY
21255: PPUSH
21256: LD_VAR 0 4
21260: PUSH
21261: LD_INT 2
21263: ARRAY
21264: PPUSH
21265: CALL_OW 458
21269: NOT
21270: IFFALSE 21274
// continue ;
21272: GO 21244
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
21274: LD_VAR 0 4
21278: PUSH
21279: LD_INT 1
21281: ARRAY
21282: PPUSH
21283: LD_VAR 0 4
21287: PUSH
21288: LD_INT 2
21290: ARRAY
21291: PPUSH
21292: CALL_OW 428
21296: PUSH
21297: LD_VAR 0 5
21301: IN
21302: IFFALSE 21331
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
21304: LD_VAR 0 4
21308: PUSH
21309: LD_INT 1
21311: ARRAY
21312: PPUSH
21313: LD_VAR 0 4
21317: PUSH
21318: LD_INT 2
21320: ARRAY
21321: PPUSH
21322: LD_VAR 0 1
21326: PPUSH
21327: CALL_OW 456
// end ;
21331: GO 21244
21333: POP
21334: POP
// end ;
21335: LD_VAR 0 3
21339: RET
// export function Count ( array ) ; begin
21340: LD_INT 0
21342: PPUSH
// result := array + 0 ;
21343: LD_ADDR_VAR 0 2
21347: PUSH
21348: LD_VAR 0 1
21352: PUSH
21353: LD_INT 0
21355: PLUS
21356: ST_TO_ADDR
// end ;
21357: LD_VAR 0 2
21361: RET
// export function IsEmpty ( building ) ; begin
21362: LD_INT 0
21364: PPUSH
// if not building then
21365: LD_VAR 0 1
21369: NOT
21370: IFFALSE 21374
// exit ;
21372: GO 21417
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
21374: LD_ADDR_VAR 0 2
21378: PUSH
21379: LD_VAR 0 1
21383: PUSH
21384: LD_INT 22
21386: PUSH
21387: LD_VAR 0 1
21391: PPUSH
21392: CALL_OW 255
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: PUSH
21401: LD_INT 58
21403: PUSH
21404: EMPTY
21405: LIST
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: PPUSH
21411: CALL_OW 69
21415: IN
21416: ST_TO_ADDR
// end ;
21417: LD_VAR 0 2
21421: RET
// export function IsNotFull ( building ) ; var places ; begin
21422: LD_INT 0
21424: PPUSH
21425: PPUSH
// if not building then
21426: LD_VAR 0 1
21430: NOT
21431: IFFALSE 21435
// exit ;
21433: GO 21463
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
21435: LD_ADDR_VAR 0 2
21439: PUSH
21440: LD_VAR 0 1
21444: PPUSH
21445: LD_INT 3
21447: PUSH
21448: LD_INT 62
21450: PUSH
21451: EMPTY
21452: LIST
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: PPUSH
21458: CALL_OW 72
21462: ST_TO_ADDR
// end ;
21463: LD_VAR 0 2
21467: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
21468: LD_INT 0
21470: PPUSH
21471: PPUSH
21472: PPUSH
21473: PPUSH
// tmp := [ ] ;
21474: LD_ADDR_VAR 0 3
21478: PUSH
21479: EMPTY
21480: ST_TO_ADDR
// list := [ ] ;
21481: LD_ADDR_VAR 0 5
21485: PUSH
21486: EMPTY
21487: ST_TO_ADDR
// for i = 16 to 25 do
21488: LD_ADDR_VAR 0 4
21492: PUSH
21493: DOUBLE
21494: LD_INT 16
21496: DEC
21497: ST_TO_ADDR
21498: LD_INT 25
21500: PUSH
21501: FOR_TO
21502: IFFALSE 21575
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
21504: LD_ADDR_VAR 0 3
21508: PUSH
21509: LD_VAR 0 3
21513: PUSH
21514: LD_INT 22
21516: PUSH
21517: LD_VAR 0 1
21521: PPUSH
21522: CALL_OW 255
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: PUSH
21531: LD_INT 91
21533: PUSH
21534: LD_VAR 0 1
21538: PUSH
21539: LD_INT 6
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: LIST
21546: PUSH
21547: LD_INT 30
21549: PUSH
21550: LD_VAR 0 4
21554: PUSH
21555: EMPTY
21556: LIST
21557: LIST
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: LIST
21563: PUSH
21564: EMPTY
21565: LIST
21566: PPUSH
21567: CALL_OW 69
21571: ADD
21572: ST_TO_ADDR
21573: GO 21501
21575: POP
21576: POP
// for i = 1 to tmp do
21577: LD_ADDR_VAR 0 4
21581: PUSH
21582: DOUBLE
21583: LD_INT 1
21585: DEC
21586: ST_TO_ADDR
21587: LD_VAR 0 3
21591: PUSH
21592: FOR_TO
21593: IFFALSE 21681
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
21595: LD_ADDR_VAR 0 5
21599: PUSH
21600: LD_VAR 0 5
21604: PUSH
21605: LD_VAR 0 3
21609: PUSH
21610: LD_VAR 0 4
21614: ARRAY
21615: PPUSH
21616: CALL_OW 266
21620: PUSH
21621: LD_VAR 0 3
21625: PUSH
21626: LD_VAR 0 4
21630: ARRAY
21631: PPUSH
21632: CALL_OW 250
21636: PUSH
21637: LD_VAR 0 3
21641: PUSH
21642: LD_VAR 0 4
21646: ARRAY
21647: PPUSH
21648: CALL_OW 251
21652: PUSH
21653: LD_VAR 0 3
21657: PUSH
21658: LD_VAR 0 4
21662: ARRAY
21663: PPUSH
21664: CALL_OW 254
21668: PUSH
21669: EMPTY
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: PUSH
21675: EMPTY
21676: LIST
21677: ADD
21678: ST_TO_ADDR
21679: GO 21592
21681: POP
21682: POP
// result := list ;
21683: LD_ADDR_VAR 0 2
21687: PUSH
21688: LD_VAR 0 5
21692: ST_TO_ADDR
// end ;
21693: LD_VAR 0 2
21697: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
21698: LD_INT 0
21700: PPUSH
21701: PPUSH
21702: PPUSH
21703: PPUSH
21704: PPUSH
21705: PPUSH
21706: PPUSH
// if not factory then
21707: LD_VAR 0 1
21711: NOT
21712: IFFALSE 21716
// exit ;
21714: GO 22309
// if control = control_apeman then
21716: LD_VAR 0 4
21720: PUSH
21721: LD_INT 5
21723: EQUAL
21724: IFFALSE 21833
// begin tmp := UnitsInside ( factory ) ;
21726: LD_ADDR_VAR 0 8
21730: PUSH
21731: LD_VAR 0 1
21735: PPUSH
21736: CALL_OW 313
21740: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
21741: LD_VAR 0 8
21745: PPUSH
21746: LD_INT 25
21748: PUSH
21749: LD_INT 12
21751: PUSH
21752: EMPTY
21753: LIST
21754: LIST
21755: PPUSH
21756: CALL_OW 72
21760: NOT
21761: IFFALSE 21771
// control := control_manual ;
21763: LD_ADDR_VAR 0 4
21767: PUSH
21768: LD_INT 1
21770: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
21771: LD_ADDR_VAR 0 8
21775: PUSH
21776: LD_VAR 0 1
21780: PPUSH
21781: CALL 21468 0 1
21785: ST_TO_ADDR
// if tmp then
21786: LD_VAR 0 8
21790: IFFALSE 21833
// begin for i in tmp do
21792: LD_ADDR_VAR 0 7
21796: PUSH
21797: LD_VAR 0 8
21801: PUSH
21802: FOR_IN
21803: IFFALSE 21831
// if i [ 1 ] = b_ext_radio then
21805: LD_VAR 0 7
21809: PUSH
21810: LD_INT 1
21812: ARRAY
21813: PUSH
21814: LD_INT 22
21816: EQUAL
21817: IFFALSE 21829
// begin control := control_remote ;
21819: LD_ADDR_VAR 0 4
21823: PUSH
21824: LD_INT 2
21826: ST_TO_ADDR
// break ;
21827: GO 21831
// end ;
21829: GO 21802
21831: POP
21832: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
21833: LD_VAR 0 1
21837: PPUSH
21838: LD_VAR 0 2
21842: PPUSH
21843: LD_VAR 0 3
21847: PPUSH
21848: LD_VAR 0 4
21852: PPUSH
21853: LD_VAR 0 5
21857: PPUSH
21858: CALL_OW 448
21862: IFFALSE 21897
// begin result := [ chassis , engine , control , weapon ] ;
21864: LD_ADDR_VAR 0 6
21868: PUSH
21869: LD_VAR 0 2
21873: PUSH
21874: LD_VAR 0 3
21878: PUSH
21879: LD_VAR 0 4
21883: PUSH
21884: LD_VAR 0 5
21888: PUSH
21889: EMPTY
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: ST_TO_ADDR
// exit ;
21895: GO 22309
// end ; _chassis := AvailableChassisList ( factory ) ;
21897: LD_ADDR_VAR 0 9
21901: PUSH
21902: LD_VAR 0 1
21906: PPUSH
21907: CALL_OW 475
21911: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
21912: LD_ADDR_VAR 0 11
21916: PUSH
21917: LD_VAR 0 1
21921: PPUSH
21922: CALL_OW 476
21926: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
21927: LD_ADDR_VAR 0 12
21931: PUSH
21932: LD_VAR 0 1
21936: PPUSH
21937: CALL_OW 477
21941: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
21942: LD_ADDR_VAR 0 10
21946: PUSH
21947: LD_VAR 0 1
21951: PPUSH
21952: CALL_OW 478
21956: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
21957: LD_VAR 0 9
21961: NOT
21962: PUSH
21963: LD_VAR 0 11
21967: NOT
21968: OR
21969: PUSH
21970: LD_VAR 0 12
21974: NOT
21975: OR
21976: PUSH
21977: LD_VAR 0 10
21981: NOT
21982: OR
21983: IFFALSE 22018
// begin result := [ chassis , engine , control , weapon ] ;
21985: LD_ADDR_VAR 0 6
21989: PUSH
21990: LD_VAR 0 2
21994: PUSH
21995: LD_VAR 0 3
21999: PUSH
22000: LD_VAR 0 4
22004: PUSH
22005: LD_VAR 0 5
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: ST_TO_ADDR
// exit ;
22016: GO 22309
// end ; if not chassis in _chassis then
22018: LD_VAR 0 2
22022: PUSH
22023: LD_VAR 0 9
22027: IN
22028: NOT
22029: IFFALSE 22055
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
22031: LD_ADDR_VAR 0 2
22035: PUSH
22036: LD_VAR 0 9
22040: PUSH
22041: LD_INT 1
22043: PPUSH
22044: LD_VAR 0 9
22048: PPUSH
22049: CALL_OW 12
22053: ARRAY
22054: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
22055: LD_VAR 0 2
22059: PPUSH
22060: LD_VAR 0 3
22064: PPUSH
22065: CALL 22314 0 2
22069: NOT
22070: IFFALSE 22129
// repeat engine := _engine [ 1 ] ;
22072: LD_ADDR_VAR 0 3
22076: PUSH
22077: LD_VAR 0 11
22081: PUSH
22082: LD_INT 1
22084: ARRAY
22085: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
22086: LD_ADDR_VAR 0 11
22090: PUSH
22091: LD_VAR 0 11
22095: PPUSH
22096: LD_INT 1
22098: PPUSH
22099: CALL_OW 3
22103: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
22104: LD_VAR 0 2
22108: PPUSH
22109: LD_VAR 0 3
22113: PPUSH
22114: CALL 22314 0 2
22118: PUSH
22119: LD_VAR 0 11
22123: PUSH
22124: EMPTY
22125: EQUAL
22126: OR
22127: IFFALSE 22072
// if not control in _control then
22129: LD_VAR 0 4
22133: PUSH
22134: LD_VAR 0 12
22138: IN
22139: NOT
22140: IFFALSE 22166
// control := _control [ rand ( 1 , _control ) ] ;
22142: LD_ADDR_VAR 0 4
22146: PUSH
22147: LD_VAR 0 12
22151: PUSH
22152: LD_INT 1
22154: PPUSH
22155: LD_VAR 0 12
22159: PPUSH
22160: CALL_OW 12
22164: ARRAY
22165: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
22166: LD_VAR 0 2
22170: PPUSH
22171: LD_VAR 0 5
22175: PPUSH
22176: CALL 22534 0 2
22180: NOT
22181: IFFALSE 22240
// repeat weapon := _weapon [ 1 ] ;
22183: LD_ADDR_VAR 0 5
22187: PUSH
22188: LD_VAR 0 10
22192: PUSH
22193: LD_INT 1
22195: ARRAY
22196: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
22197: LD_ADDR_VAR 0 10
22201: PUSH
22202: LD_VAR 0 10
22206: PPUSH
22207: LD_INT 1
22209: PPUSH
22210: CALL_OW 3
22214: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
22215: LD_VAR 0 2
22219: PPUSH
22220: LD_VAR 0 5
22224: PPUSH
22225: CALL 22534 0 2
22229: PUSH
22230: LD_VAR 0 10
22234: PUSH
22235: EMPTY
22236: EQUAL
22237: OR
22238: IFFALSE 22183
// result := [ ] ;
22240: LD_ADDR_VAR 0 6
22244: PUSH
22245: EMPTY
22246: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22247: LD_VAR 0 1
22251: PPUSH
22252: LD_VAR 0 2
22256: PPUSH
22257: LD_VAR 0 3
22261: PPUSH
22262: LD_VAR 0 4
22266: PPUSH
22267: LD_VAR 0 5
22271: PPUSH
22272: CALL_OW 448
22276: IFFALSE 22309
// result := [ chassis , engine , control , weapon ] ;
22278: LD_ADDR_VAR 0 6
22282: PUSH
22283: LD_VAR 0 2
22287: PUSH
22288: LD_VAR 0 3
22292: PUSH
22293: LD_VAR 0 4
22297: PUSH
22298: LD_VAR 0 5
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: ST_TO_ADDR
// end ;
22309: LD_VAR 0 6
22313: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
22314: LD_INT 0
22316: PPUSH
// if not chassis or not engine then
22317: LD_VAR 0 1
22321: NOT
22322: PUSH
22323: LD_VAR 0 2
22327: NOT
22328: OR
22329: IFFALSE 22333
// exit ;
22331: GO 22529
// case engine of engine_solar :
22333: LD_VAR 0 2
22337: PUSH
22338: LD_INT 2
22340: DOUBLE
22341: EQUAL
22342: IFTRUE 22346
22344: GO 22384
22346: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
22347: LD_ADDR_VAR 0 3
22351: PUSH
22352: LD_INT 11
22354: PUSH
22355: LD_INT 12
22357: PUSH
22358: LD_INT 13
22360: PUSH
22361: LD_INT 14
22363: PUSH
22364: LD_INT 1
22366: PUSH
22367: LD_INT 2
22369: PUSH
22370: LD_INT 3
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: ST_TO_ADDR
22382: GO 22513
22384: LD_INT 1
22386: DOUBLE
22387: EQUAL
22388: IFTRUE 22392
22390: GO 22454
22392: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
22393: LD_ADDR_VAR 0 3
22397: PUSH
22398: LD_INT 11
22400: PUSH
22401: LD_INT 12
22403: PUSH
22404: LD_INT 13
22406: PUSH
22407: LD_INT 14
22409: PUSH
22410: LD_INT 1
22412: PUSH
22413: LD_INT 2
22415: PUSH
22416: LD_INT 3
22418: PUSH
22419: LD_INT 4
22421: PUSH
22422: LD_INT 5
22424: PUSH
22425: LD_INT 21
22427: PUSH
22428: LD_INT 23
22430: PUSH
22431: LD_INT 22
22433: PUSH
22434: LD_INT 24
22436: PUSH
22437: EMPTY
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: ST_TO_ADDR
22452: GO 22513
22454: LD_INT 3
22456: DOUBLE
22457: EQUAL
22458: IFTRUE 22462
22460: GO 22512
22462: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
22463: LD_ADDR_VAR 0 3
22467: PUSH
22468: LD_INT 13
22470: PUSH
22471: LD_INT 14
22473: PUSH
22474: LD_INT 2
22476: PUSH
22477: LD_INT 3
22479: PUSH
22480: LD_INT 4
22482: PUSH
22483: LD_INT 5
22485: PUSH
22486: LD_INT 21
22488: PUSH
22489: LD_INT 22
22491: PUSH
22492: LD_INT 23
22494: PUSH
22495: LD_INT 24
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: ST_TO_ADDR
22510: GO 22513
22512: POP
// result := ( chassis in result ) ;
22513: LD_ADDR_VAR 0 3
22517: PUSH
22518: LD_VAR 0 1
22522: PUSH
22523: LD_VAR 0 3
22527: IN
22528: ST_TO_ADDR
// end ;
22529: LD_VAR 0 3
22533: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
22534: LD_INT 0
22536: PPUSH
// if not chassis or not weapon then
22537: LD_VAR 0 1
22541: NOT
22542: PUSH
22543: LD_VAR 0 2
22547: NOT
22548: OR
22549: IFFALSE 22553
// exit ;
22551: GO 23613
// case weapon of us_machine_gun :
22553: LD_VAR 0 2
22557: PUSH
22558: LD_INT 2
22560: DOUBLE
22561: EQUAL
22562: IFTRUE 22566
22564: GO 22596
22566: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
22567: LD_ADDR_VAR 0 3
22571: PUSH
22572: LD_INT 1
22574: PUSH
22575: LD_INT 2
22577: PUSH
22578: LD_INT 3
22580: PUSH
22581: LD_INT 4
22583: PUSH
22584: LD_INT 5
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: ST_TO_ADDR
22594: GO 23597
22596: LD_INT 3
22598: DOUBLE
22599: EQUAL
22600: IFTRUE 22604
22602: GO 22634
22604: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
22605: LD_ADDR_VAR 0 3
22609: PUSH
22610: LD_INT 1
22612: PUSH
22613: LD_INT 2
22615: PUSH
22616: LD_INT 3
22618: PUSH
22619: LD_INT 4
22621: PUSH
22622: LD_INT 5
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: ST_TO_ADDR
22632: GO 23597
22634: LD_INT 11
22636: DOUBLE
22637: EQUAL
22638: IFTRUE 22642
22640: GO 22672
22642: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
22643: LD_ADDR_VAR 0 3
22647: PUSH
22648: LD_INT 1
22650: PUSH
22651: LD_INT 2
22653: PUSH
22654: LD_INT 3
22656: PUSH
22657: LD_INT 4
22659: PUSH
22660: LD_INT 5
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: ST_TO_ADDR
22670: GO 23597
22672: LD_INT 4
22674: DOUBLE
22675: EQUAL
22676: IFTRUE 22680
22678: GO 22706
22680: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
22681: LD_ADDR_VAR 0 3
22685: PUSH
22686: LD_INT 2
22688: PUSH
22689: LD_INT 3
22691: PUSH
22692: LD_INT 4
22694: PUSH
22695: LD_INT 5
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: ST_TO_ADDR
22704: GO 23597
22706: LD_INT 5
22708: DOUBLE
22709: EQUAL
22710: IFTRUE 22714
22712: GO 22740
22714: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
22715: LD_ADDR_VAR 0 3
22719: PUSH
22720: LD_INT 2
22722: PUSH
22723: LD_INT 3
22725: PUSH
22726: LD_INT 4
22728: PUSH
22729: LD_INT 5
22731: PUSH
22732: EMPTY
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: ST_TO_ADDR
22738: GO 23597
22740: LD_INT 9
22742: DOUBLE
22743: EQUAL
22744: IFTRUE 22748
22746: GO 22774
22748: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
22749: LD_ADDR_VAR 0 3
22753: PUSH
22754: LD_INT 2
22756: PUSH
22757: LD_INT 3
22759: PUSH
22760: LD_INT 4
22762: PUSH
22763: LD_INT 5
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: ST_TO_ADDR
22772: GO 23597
22774: LD_INT 7
22776: DOUBLE
22777: EQUAL
22778: IFTRUE 22782
22780: GO 22808
22782: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
22783: LD_ADDR_VAR 0 3
22787: PUSH
22788: LD_INT 2
22790: PUSH
22791: LD_INT 3
22793: PUSH
22794: LD_INT 4
22796: PUSH
22797: LD_INT 5
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: ST_TO_ADDR
22806: GO 23597
22808: LD_INT 12
22810: DOUBLE
22811: EQUAL
22812: IFTRUE 22816
22814: GO 22842
22816: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
22817: LD_ADDR_VAR 0 3
22821: PUSH
22822: LD_INT 2
22824: PUSH
22825: LD_INT 3
22827: PUSH
22828: LD_INT 4
22830: PUSH
22831: LD_INT 5
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: ST_TO_ADDR
22840: GO 23597
22842: LD_INT 13
22844: DOUBLE
22845: EQUAL
22846: IFTRUE 22850
22848: GO 22876
22850: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
22851: LD_ADDR_VAR 0 3
22855: PUSH
22856: LD_INT 2
22858: PUSH
22859: LD_INT 3
22861: PUSH
22862: LD_INT 4
22864: PUSH
22865: LD_INT 5
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: ST_TO_ADDR
22874: GO 23597
22876: LD_INT 14
22878: DOUBLE
22879: EQUAL
22880: IFTRUE 22884
22882: GO 22902
22884: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
22885: LD_ADDR_VAR 0 3
22889: PUSH
22890: LD_INT 4
22892: PUSH
22893: LD_INT 5
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: ST_TO_ADDR
22900: GO 23597
22902: LD_INT 6
22904: DOUBLE
22905: EQUAL
22906: IFTRUE 22910
22908: GO 22928
22910: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
22911: LD_ADDR_VAR 0 3
22915: PUSH
22916: LD_INT 4
22918: PUSH
22919: LD_INT 5
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: ST_TO_ADDR
22926: GO 23597
22928: LD_INT 10
22930: DOUBLE
22931: EQUAL
22932: IFTRUE 22936
22934: GO 22954
22936: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
22937: LD_ADDR_VAR 0 3
22941: PUSH
22942: LD_INT 4
22944: PUSH
22945: LD_INT 5
22947: PUSH
22948: EMPTY
22949: LIST
22950: LIST
22951: ST_TO_ADDR
22952: GO 23597
22954: LD_INT 22
22956: DOUBLE
22957: EQUAL
22958: IFTRUE 22962
22960: GO 22988
22962: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
22963: LD_ADDR_VAR 0 3
22967: PUSH
22968: LD_INT 11
22970: PUSH
22971: LD_INT 12
22973: PUSH
22974: LD_INT 13
22976: PUSH
22977: LD_INT 14
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: ST_TO_ADDR
22986: GO 23597
22988: LD_INT 23
22990: DOUBLE
22991: EQUAL
22992: IFTRUE 22996
22994: GO 23022
22996: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
22997: LD_ADDR_VAR 0 3
23001: PUSH
23002: LD_INT 11
23004: PUSH
23005: LD_INT 12
23007: PUSH
23008: LD_INT 13
23010: PUSH
23011: LD_INT 14
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: ST_TO_ADDR
23020: GO 23597
23022: LD_INT 24
23024: DOUBLE
23025: EQUAL
23026: IFTRUE 23030
23028: GO 23056
23030: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
23031: LD_ADDR_VAR 0 3
23035: PUSH
23036: LD_INT 11
23038: PUSH
23039: LD_INT 12
23041: PUSH
23042: LD_INT 13
23044: PUSH
23045: LD_INT 14
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: ST_TO_ADDR
23054: GO 23597
23056: LD_INT 30
23058: DOUBLE
23059: EQUAL
23060: IFTRUE 23064
23062: GO 23090
23064: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
23065: LD_ADDR_VAR 0 3
23069: PUSH
23070: LD_INT 11
23072: PUSH
23073: LD_INT 12
23075: PUSH
23076: LD_INT 13
23078: PUSH
23079: LD_INT 14
23081: PUSH
23082: EMPTY
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: ST_TO_ADDR
23088: GO 23597
23090: LD_INT 25
23092: DOUBLE
23093: EQUAL
23094: IFTRUE 23098
23096: GO 23116
23098: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
23099: LD_ADDR_VAR 0 3
23103: PUSH
23104: LD_INT 13
23106: PUSH
23107: LD_INT 14
23109: PUSH
23110: EMPTY
23111: LIST
23112: LIST
23113: ST_TO_ADDR
23114: GO 23597
23116: LD_INT 27
23118: DOUBLE
23119: EQUAL
23120: IFTRUE 23124
23122: GO 23142
23124: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
23125: LD_ADDR_VAR 0 3
23129: PUSH
23130: LD_INT 13
23132: PUSH
23133: LD_INT 14
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: ST_TO_ADDR
23140: GO 23597
23142: LD_INT 92
23144: DOUBLE
23145: EQUAL
23146: IFTRUE 23150
23148: GO 23176
23150: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
23151: LD_ADDR_VAR 0 3
23155: PUSH
23156: LD_INT 11
23158: PUSH
23159: LD_INT 12
23161: PUSH
23162: LD_INT 13
23164: PUSH
23165: LD_INT 14
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: ST_TO_ADDR
23174: GO 23597
23176: LD_INT 28
23178: DOUBLE
23179: EQUAL
23180: IFTRUE 23184
23182: GO 23202
23184: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
23185: LD_ADDR_VAR 0 3
23189: PUSH
23190: LD_INT 13
23192: PUSH
23193: LD_INT 14
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: ST_TO_ADDR
23200: GO 23597
23202: LD_INT 29
23204: DOUBLE
23205: EQUAL
23206: IFTRUE 23210
23208: GO 23228
23210: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
23211: LD_ADDR_VAR 0 3
23215: PUSH
23216: LD_INT 13
23218: PUSH
23219: LD_INT 14
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: ST_TO_ADDR
23226: GO 23597
23228: LD_INT 31
23230: DOUBLE
23231: EQUAL
23232: IFTRUE 23236
23234: GO 23254
23236: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
23237: LD_ADDR_VAR 0 3
23241: PUSH
23242: LD_INT 13
23244: PUSH
23245: LD_INT 14
23247: PUSH
23248: EMPTY
23249: LIST
23250: LIST
23251: ST_TO_ADDR
23252: GO 23597
23254: LD_INT 26
23256: DOUBLE
23257: EQUAL
23258: IFTRUE 23262
23260: GO 23280
23262: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
23263: LD_ADDR_VAR 0 3
23267: PUSH
23268: LD_INT 13
23270: PUSH
23271: LD_INT 14
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: ST_TO_ADDR
23278: GO 23597
23280: LD_INT 42
23282: DOUBLE
23283: EQUAL
23284: IFTRUE 23288
23286: GO 23314
23288: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
23289: LD_ADDR_VAR 0 3
23293: PUSH
23294: LD_INT 21
23296: PUSH
23297: LD_INT 22
23299: PUSH
23300: LD_INT 23
23302: PUSH
23303: LD_INT 24
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: ST_TO_ADDR
23312: GO 23597
23314: LD_INT 43
23316: DOUBLE
23317: EQUAL
23318: IFTRUE 23322
23320: GO 23348
23322: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
23323: LD_ADDR_VAR 0 3
23327: PUSH
23328: LD_INT 21
23330: PUSH
23331: LD_INT 22
23333: PUSH
23334: LD_INT 23
23336: PUSH
23337: LD_INT 24
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: ST_TO_ADDR
23346: GO 23597
23348: LD_INT 44
23350: DOUBLE
23351: EQUAL
23352: IFTRUE 23356
23354: GO 23382
23356: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
23357: LD_ADDR_VAR 0 3
23361: PUSH
23362: LD_INT 21
23364: PUSH
23365: LD_INT 22
23367: PUSH
23368: LD_INT 23
23370: PUSH
23371: LD_INT 24
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: ST_TO_ADDR
23380: GO 23597
23382: LD_INT 45
23384: DOUBLE
23385: EQUAL
23386: IFTRUE 23390
23388: GO 23416
23390: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
23391: LD_ADDR_VAR 0 3
23395: PUSH
23396: LD_INT 21
23398: PUSH
23399: LD_INT 22
23401: PUSH
23402: LD_INT 23
23404: PUSH
23405: LD_INT 24
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: ST_TO_ADDR
23414: GO 23597
23416: LD_INT 49
23418: DOUBLE
23419: EQUAL
23420: IFTRUE 23424
23422: GO 23450
23424: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
23425: LD_ADDR_VAR 0 3
23429: PUSH
23430: LD_INT 21
23432: PUSH
23433: LD_INT 22
23435: PUSH
23436: LD_INT 23
23438: PUSH
23439: LD_INT 24
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: ST_TO_ADDR
23448: GO 23597
23450: LD_INT 51
23452: DOUBLE
23453: EQUAL
23454: IFTRUE 23458
23456: GO 23484
23458: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
23459: LD_ADDR_VAR 0 3
23463: PUSH
23464: LD_INT 21
23466: PUSH
23467: LD_INT 22
23469: PUSH
23470: LD_INT 23
23472: PUSH
23473: LD_INT 24
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: ST_TO_ADDR
23482: GO 23597
23484: LD_INT 52
23486: DOUBLE
23487: EQUAL
23488: IFTRUE 23492
23490: GO 23518
23492: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
23493: LD_ADDR_VAR 0 3
23497: PUSH
23498: LD_INT 21
23500: PUSH
23501: LD_INT 22
23503: PUSH
23504: LD_INT 23
23506: PUSH
23507: LD_INT 24
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: ST_TO_ADDR
23516: GO 23597
23518: LD_INT 53
23520: DOUBLE
23521: EQUAL
23522: IFTRUE 23526
23524: GO 23544
23526: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
23527: LD_ADDR_VAR 0 3
23531: PUSH
23532: LD_INT 23
23534: PUSH
23535: LD_INT 24
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: ST_TO_ADDR
23542: GO 23597
23544: LD_INT 46
23546: DOUBLE
23547: EQUAL
23548: IFTRUE 23552
23550: GO 23570
23552: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
23553: LD_ADDR_VAR 0 3
23557: PUSH
23558: LD_INT 23
23560: PUSH
23561: LD_INT 24
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: ST_TO_ADDR
23568: GO 23597
23570: LD_INT 47
23572: DOUBLE
23573: EQUAL
23574: IFTRUE 23578
23576: GO 23596
23578: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23579: LD_ADDR_VAR 0 3
23583: PUSH
23584: LD_INT 23
23586: PUSH
23587: LD_INT 24
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: ST_TO_ADDR
23594: GO 23597
23596: POP
// result := ( chassis in result ) ;
23597: LD_ADDR_VAR 0 3
23601: PUSH
23602: LD_VAR 0 1
23606: PUSH
23607: LD_VAR 0 3
23611: IN
23612: ST_TO_ADDR
// end ;
23613: LD_VAR 0 3
23617: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
23618: LD_INT 0
23620: PPUSH
23621: PPUSH
23622: PPUSH
23623: PPUSH
23624: PPUSH
23625: PPUSH
23626: PPUSH
// result := array ;
23627: LD_ADDR_VAR 0 5
23631: PUSH
23632: LD_VAR 0 1
23636: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
23637: LD_VAR 0 1
23641: NOT
23642: PUSH
23643: LD_VAR 0 2
23647: NOT
23648: OR
23649: PUSH
23650: LD_VAR 0 3
23654: NOT
23655: OR
23656: PUSH
23657: LD_VAR 0 2
23661: PUSH
23662: LD_VAR 0 1
23666: GREATER
23667: OR
23668: PUSH
23669: LD_VAR 0 3
23673: PUSH
23674: LD_VAR 0 1
23678: GREATER
23679: OR
23680: IFFALSE 23684
// exit ;
23682: GO 23980
// if direction then
23684: LD_VAR 0 4
23688: IFFALSE 23752
// begin d := 1 ;
23690: LD_ADDR_VAR 0 9
23694: PUSH
23695: LD_INT 1
23697: ST_TO_ADDR
// if i_from > i_to then
23698: LD_VAR 0 2
23702: PUSH
23703: LD_VAR 0 3
23707: GREATER
23708: IFFALSE 23734
// length := ( array - i_from ) + i_to else
23710: LD_ADDR_VAR 0 11
23714: PUSH
23715: LD_VAR 0 1
23719: PUSH
23720: LD_VAR 0 2
23724: MINUS
23725: PUSH
23726: LD_VAR 0 3
23730: PLUS
23731: ST_TO_ADDR
23732: GO 23750
// length := i_to - i_from ;
23734: LD_ADDR_VAR 0 11
23738: PUSH
23739: LD_VAR 0 3
23743: PUSH
23744: LD_VAR 0 2
23748: MINUS
23749: ST_TO_ADDR
// end else
23750: GO 23813
// begin d := - 1 ;
23752: LD_ADDR_VAR 0 9
23756: PUSH
23757: LD_INT 1
23759: NEG
23760: ST_TO_ADDR
// if i_from > i_to then
23761: LD_VAR 0 2
23765: PUSH
23766: LD_VAR 0 3
23770: GREATER
23771: IFFALSE 23791
// length := i_from - i_to else
23773: LD_ADDR_VAR 0 11
23777: PUSH
23778: LD_VAR 0 2
23782: PUSH
23783: LD_VAR 0 3
23787: MINUS
23788: ST_TO_ADDR
23789: GO 23813
// length := ( array - i_to ) + i_from ;
23791: LD_ADDR_VAR 0 11
23795: PUSH
23796: LD_VAR 0 1
23800: PUSH
23801: LD_VAR 0 3
23805: MINUS
23806: PUSH
23807: LD_VAR 0 2
23811: PLUS
23812: ST_TO_ADDR
// end ; if not length then
23813: LD_VAR 0 11
23817: NOT
23818: IFFALSE 23822
// exit ;
23820: GO 23980
// tmp := array ;
23822: LD_ADDR_VAR 0 10
23826: PUSH
23827: LD_VAR 0 1
23831: ST_TO_ADDR
// for i = 1 to length do
23832: LD_ADDR_VAR 0 6
23836: PUSH
23837: DOUBLE
23838: LD_INT 1
23840: DEC
23841: ST_TO_ADDR
23842: LD_VAR 0 11
23846: PUSH
23847: FOR_TO
23848: IFFALSE 23968
// begin for j = 1 to array do
23850: LD_ADDR_VAR 0 7
23854: PUSH
23855: DOUBLE
23856: LD_INT 1
23858: DEC
23859: ST_TO_ADDR
23860: LD_VAR 0 1
23864: PUSH
23865: FOR_TO
23866: IFFALSE 23954
// begin k := j + d ;
23868: LD_ADDR_VAR 0 8
23872: PUSH
23873: LD_VAR 0 7
23877: PUSH
23878: LD_VAR 0 9
23882: PLUS
23883: ST_TO_ADDR
// if k > array then
23884: LD_VAR 0 8
23888: PUSH
23889: LD_VAR 0 1
23893: GREATER
23894: IFFALSE 23904
// k := 1 ;
23896: LD_ADDR_VAR 0 8
23900: PUSH
23901: LD_INT 1
23903: ST_TO_ADDR
// if not k then
23904: LD_VAR 0 8
23908: NOT
23909: IFFALSE 23921
// k := array ;
23911: LD_ADDR_VAR 0 8
23915: PUSH
23916: LD_VAR 0 1
23920: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
23921: LD_ADDR_VAR 0 10
23925: PUSH
23926: LD_VAR 0 10
23930: PPUSH
23931: LD_VAR 0 8
23935: PPUSH
23936: LD_VAR 0 1
23940: PUSH
23941: LD_VAR 0 7
23945: ARRAY
23946: PPUSH
23947: CALL_OW 1
23951: ST_TO_ADDR
// end ;
23952: GO 23865
23954: POP
23955: POP
// array := tmp ;
23956: LD_ADDR_VAR 0 1
23960: PUSH
23961: LD_VAR 0 10
23965: ST_TO_ADDR
// end ;
23966: GO 23847
23968: POP
23969: POP
// result := array ;
23970: LD_ADDR_VAR 0 5
23974: PUSH
23975: LD_VAR 0 1
23979: ST_TO_ADDR
// end ;
23980: LD_VAR 0 5
23984: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
23985: LD_INT 0
23987: PPUSH
23988: PPUSH
// result := 0 ;
23989: LD_ADDR_VAR 0 3
23993: PUSH
23994: LD_INT 0
23996: ST_TO_ADDR
// if not array or not value in array then
23997: LD_VAR 0 1
24001: NOT
24002: PUSH
24003: LD_VAR 0 2
24007: PUSH
24008: LD_VAR 0 1
24012: IN
24013: NOT
24014: OR
24015: IFFALSE 24019
// exit ;
24017: GO 24073
// for i = 1 to array do
24019: LD_ADDR_VAR 0 4
24023: PUSH
24024: DOUBLE
24025: LD_INT 1
24027: DEC
24028: ST_TO_ADDR
24029: LD_VAR 0 1
24033: PUSH
24034: FOR_TO
24035: IFFALSE 24071
// if value = array [ i ] then
24037: LD_VAR 0 2
24041: PUSH
24042: LD_VAR 0 1
24046: PUSH
24047: LD_VAR 0 4
24051: ARRAY
24052: EQUAL
24053: IFFALSE 24069
// begin result := i ;
24055: LD_ADDR_VAR 0 3
24059: PUSH
24060: LD_VAR 0 4
24064: ST_TO_ADDR
// exit ;
24065: POP
24066: POP
24067: GO 24073
// end ;
24069: GO 24034
24071: POP
24072: POP
// end ;
24073: LD_VAR 0 3
24077: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
24078: LD_INT 0
24080: PPUSH
// vc_chassis := chassis ;
24081: LD_ADDR_OWVAR 37
24085: PUSH
24086: LD_VAR 0 1
24090: ST_TO_ADDR
// vc_engine := engine ;
24091: LD_ADDR_OWVAR 39
24095: PUSH
24096: LD_VAR 0 2
24100: ST_TO_ADDR
// vc_control := control ;
24101: LD_ADDR_OWVAR 38
24105: PUSH
24106: LD_VAR 0 3
24110: ST_TO_ADDR
// vc_weapon := weapon ;
24111: LD_ADDR_OWVAR 40
24115: PUSH
24116: LD_VAR 0 4
24120: ST_TO_ADDR
// vc_fuel_battery := fuel ;
24121: LD_ADDR_OWVAR 41
24125: PUSH
24126: LD_VAR 0 5
24130: ST_TO_ADDR
// end ;
24131: LD_VAR 0 6
24135: RET
// export function WantPlant ( unit ) ; var task ; begin
24136: LD_INT 0
24138: PPUSH
24139: PPUSH
// result := false ;
24140: LD_ADDR_VAR 0 2
24144: PUSH
24145: LD_INT 0
24147: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
24148: LD_ADDR_VAR 0 3
24152: PUSH
24153: LD_VAR 0 1
24157: PPUSH
24158: CALL_OW 437
24162: ST_TO_ADDR
// if task then
24163: LD_VAR 0 3
24167: IFFALSE 24195
// if task [ 1 ] [ 1 ] = p then
24169: LD_VAR 0 3
24173: PUSH
24174: LD_INT 1
24176: ARRAY
24177: PUSH
24178: LD_INT 1
24180: ARRAY
24181: PUSH
24182: LD_STRING p
24184: EQUAL
24185: IFFALSE 24195
// result := true ;
24187: LD_ADDR_VAR 0 2
24191: PUSH
24192: LD_INT 1
24194: ST_TO_ADDR
// end ;
24195: LD_VAR 0 2
24199: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
24200: LD_INT 0
24202: PPUSH
24203: PPUSH
24204: PPUSH
24205: PPUSH
// if pos < 1 then
24206: LD_VAR 0 2
24210: PUSH
24211: LD_INT 1
24213: LESS
24214: IFFALSE 24218
// exit ;
24216: GO 24521
// if pos = 1 then
24218: LD_VAR 0 2
24222: PUSH
24223: LD_INT 1
24225: EQUAL
24226: IFFALSE 24259
// result := Replace ( arr , pos [ 1 ] , value ) else
24228: LD_ADDR_VAR 0 4
24232: PUSH
24233: LD_VAR 0 1
24237: PPUSH
24238: LD_VAR 0 2
24242: PUSH
24243: LD_INT 1
24245: ARRAY
24246: PPUSH
24247: LD_VAR 0 3
24251: PPUSH
24252: CALL_OW 1
24256: ST_TO_ADDR
24257: GO 24521
// begin tmp := arr ;
24259: LD_ADDR_VAR 0 6
24263: PUSH
24264: LD_VAR 0 1
24268: ST_TO_ADDR
// s_arr := [ tmp ] ;
24269: LD_ADDR_VAR 0 7
24273: PUSH
24274: LD_VAR 0 6
24278: PUSH
24279: EMPTY
24280: LIST
24281: ST_TO_ADDR
// for i = 1 to pos - 1 do
24282: LD_ADDR_VAR 0 5
24286: PUSH
24287: DOUBLE
24288: LD_INT 1
24290: DEC
24291: ST_TO_ADDR
24292: LD_VAR 0 2
24296: PUSH
24297: LD_INT 1
24299: MINUS
24300: PUSH
24301: FOR_TO
24302: IFFALSE 24347
// begin tmp := tmp [ pos [ i ] ] ;
24304: LD_ADDR_VAR 0 6
24308: PUSH
24309: LD_VAR 0 6
24313: PUSH
24314: LD_VAR 0 2
24318: PUSH
24319: LD_VAR 0 5
24323: ARRAY
24324: ARRAY
24325: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
24326: LD_ADDR_VAR 0 7
24330: PUSH
24331: LD_VAR 0 7
24335: PUSH
24336: LD_VAR 0 6
24340: PUSH
24341: EMPTY
24342: LIST
24343: ADD
24344: ST_TO_ADDR
// end ;
24345: GO 24301
24347: POP
24348: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
24349: LD_ADDR_VAR 0 6
24353: PUSH
24354: LD_VAR 0 6
24358: PPUSH
24359: LD_VAR 0 2
24363: PUSH
24364: LD_VAR 0 2
24368: ARRAY
24369: PPUSH
24370: LD_VAR 0 3
24374: PPUSH
24375: CALL_OW 1
24379: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
24380: LD_ADDR_VAR 0 7
24384: PUSH
24385: LD_VAR 0 7
24389: PPUSH
24390: LD_VAR 0 7
24394: PPUSH
24395: LD_VAR 0 6
24399: PPUSH
24400: CALL_OW 1
24404: ST_TO_ADDR
// for i = s_arr downto 2 do
24405: LD_ADDR_VAR 0 5
24409: PUSH
24410: DOUBLE
24411: LD_VAR 0 7
24415: INC
24416: ST_TO_ADDR
24417: LD_INT 2
24419: PUSH
24420: FOR_DOWNTO
24421: IFFALSE 24505
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
24423: LD_ADDR_VAR 0 6
24427: PUSH
24428: LD_VAR 0 7
24432: PUSH
24433: LD_VAR 0 5
24437: PUSH
24438: LD_INT 1
24440: MINUS
24441: ARRAY
24442: PPUSH
24443: LD_VAR 0 2
24447: PUSH
24448: LD_VAR 0 5
24452: PUSH
24453: LD_INT 1
24455: MINUS
24456: ARRAY
24457: PPUSH
24458: LD_VAR 0 7
24462: PUSH
24463: LD_VAR 0 5
24467: ARRAY
24468: PPUSH
24469: CALL_OW 1
24473: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
24474: LD_ADDR_VAR 0 7
24478: PUSH
24479: LD_VAR 0 7
24483: PPUSH
24484: LD_VAR 0 5
24488: PUSH
24489: LD_INT 1
24491: MINUS
24492: PPUSH
24493: LD_VAR 0 6
24497: PPUSH
24498: CALL_OW 1
24502: ST_TO_ADDR
// end ;
24503: GO 24420
24505: POP
24506: POP
// result := s_arr [ 1 ] ;
24507: LD_ADDR_VAR 0 4
24511: PUSH
24512: LD_VAR 0 7
24516: PUSH
24517: LD_INT 1
24519: ARRAY
24520: ST_TO_ADDR
// end ; end ;
24521: LD_VAR 0 4
24525: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
24526: LD_INT 0
24528: PPUSH
24529: PPUSH
// if not list then
24530: LD_VAR 0 1
24534: NOT
24535: IFFALSE 24539
// exit ;
24537: GO 24630
// i := list [ pos1 ] ;
24539: LD_ADDR_VAR 0 5
24543: PUSH
24544: LD_VAR 0 1
24548: PUSH
24549: LD_VAR 0 2
24553: ARRAY
24554: ST_TO_ADDR
// if not i then
24555: LD_VAR 0 5
24559: NOT
24560: IFFALSE 24564
// exit ;
24562: GO 24630
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
24564: LD_ADDR_VAR 0 1
24568: PUSH
24569: LD_VAR 0 1
24573: PPUSH
24574: LD_VAR 0 2
24578: PPUSH
24579: LD_VAR 0 1
24583: PUSH
24584: LD_VAR 0 3
24588: ARRAY
24589: PPUSH
24590: CALL_OW 1
24594: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
24595: LD_ADDR_VAR 0 1
24599: PUSH
24600: LD_VAR 0 1
24604: PPUSH
24605: LD_VAR 0 3
24609: PPUSH
24610: LD_VAR 0 5
24614: PPUSH
24615: CALL_OW 1
24619: ST_TO_ADDR
// result := list ;
24620: LD_ADDR_VAR 0 4
24624: PUSH
24625: LD_VAR 0 1
24629: ST_TO_ADDR
// end ;
24630: LD_VAR 0 4
24634: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
24635: LD_INT 0
24637: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
24638: LD_ADDR_VAR 0 5
24642: PUSH
24643: LD_VAR 0 1
24647: PPUSH
24648: CALL_OW 250
24652: PPUSH
24653: LD_VAR 0 1
24657: PPUSH
24658: CALL_OW 251
24662: PPUSH
24663: LD_VAR 0 2
24667: PPUSH
24668: LD_VAR 0 3
24672: PPUSH
24673: LD_VAR 0 4
24677: PPUSH
24678: CALL 25056 0 5
24682: ST_TO_ADDR
// end ;
24683: LD_VAR 0 5
24687: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
24688: LD_INT 0
24690: PPUSH
24691: PPUSH
24692: PPUSH
24693: PPUSH
// if not list or not unit then
24694: LD_VAR 0 2
24698: NOT
24699: PUSH
24700: LD_VAR 0 1
24704: NOT
24705: OR
24706: IFFALSE 24710
// exit ;
24708: GO 25051
// result := [ ] ;
24710: LD_ADDR_VAR 0 5
24714: PUSH
24715: EMPTY
24716: ST_TO_ADDR
// for i in list do
24717: LD_ADDR_VAR 0 6
24721: PUSH
24722: LD_VAR 0 2
24726: PUSH
24727: FOR_IN
24728: IFFALSE 24946
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
24730: LD_ADDR_VAR 0 8
24734: PUSH
24735: LD_VAR 0 1
24739: PPUSH
24740: LD_VAR 0 6
24744: PUSH
24745: LD_INT 1
24747: ARRAY
24748: PPUSH
24749: LD_VAR 0 6
24753: PUSH
24754: LD_INT 2
24756: ARRAY
24757: PPUSH
24758: CALL_OW 297
24762: ST_TO_ADDR
// if not Count ( result ) then
24763: LD_VAR 0 5
24767: PPUSH
24768: CALL 21340 0 1
24772: NOT
24773: IFFALSE 24806
// begin result := Join ( result , [ i , tmp ] ) ;
24775: LD_ADDR_VAR 0 5
24779: PUSH
24780: LD_VAR 0 5
24784: PPUSH
24785: LD_VAR 0 6
24789: PUSH
24790: LD_VAR 0 8
24794: PUSH
24795: EMPTY
24796: LIST
24797: LIST
24798: PPUSH
24799: CALL 56940 0 2
24803: ST_TO_ADDR
// continue ;
24804: GO 24727
// end ; if result [ result ] [ 2 ] <= tmp then
24806: LD_VAR 0 5
24810: PUSH
24811: LD_VAR 0 5
24815: ARRAY
24816: PUSH
24817: LD_INT 2
24819: ARRAY
24820: PUSH
24821: LD_VAR 0 8
24825: LESSEQUAL
24826: IFFALSE 24859
// result := Join ( result , [ i , tmp ] ) else
24828: LD_ADDR_VAR 0 5
24832: PUSH
24833: LD_VAR 0 5
24837: PPUSH
24838: LD_VAR 0 6
24842: PUSH
24843: LD_VAR 0 8
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: PPUSH
24852: CALL 56940 0 2
24856: ST_TO_ADDR
24857: GO 24944
// begin for j := 1 to Count ( result ) do
24859: LD_ADDR_VAR 0 7
24863: PUSH
24864: DOUBLE
24865: LD_INT 1
24867: DEC
24868: ST_TO_ADDR
24869: LD_VAR 0 5
24873: PPUSH
24874: CALL 21340 0 1
24878: PUSH
24879: FOR_TO
24880: IFFALSE 24942
// begin if tmp < result [ j ] [ 2 ] then
24882: LD_VAR 0 8
24886: PUSH
24887: LD_VAR 0 5
24891: PUSH
24892: LD_VAR 0 7
24896: ARRAY
24897: PUSH
24898: LD_INT 2
24900: ARRAY
24901: LESS
24902: IFFALSE 24940
// begin result := Insert ( result , j , [ i , tmp ] ) ;
24904: LD_ADDR_VAR 0 5
24908: PUSH
24909: LD_VAR 0 5
24913: PPUSH
24914: LD_VAR 0 7
24918: PPUSH
24919: LD_VAR 0 6
24923: PUSH
24924: LD_VAR 0 8
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PPUSH
24933: CALL_OW 2
24937: ST_TO_ADDR
// break ;
24938: GO 24942
// end ; end ;
24940: GO 24879
24942: POP
24943: POP
// end ; end ;
24944: GO 24727
24946: POP
24947: POP
// if result and not asc then
24948: LD_VAR 0 5
24952: PUSH
24953: LD_VAR 0 3
24957: NOT
24958: AND
24959: IFFALSE 24976
// result := ReverseArray ( result ) ;
24961: LD_ADDR_VAR 0 5
24965: PUSH
24966: LD_VAR 0 5
24970: PPUSH
24971: CALL 52216 0 1
24975: ST_TO_ADDR
// tmp := [ ] ;
24976: LD_ADDR_VAR 0 8
24980: PUSH
24981: EMPTY
24982: ST_TO_ADDR
// if mode then
24983: LD_VAR 0 4
24987: IFFALSE 25051
// begin for i := 1 to result do
24989: LD_ADDR_VAR 0 6
24993: PUSH
24994: DOUBLE
24995: LD_INT 1
24997: DEC
24998: ST_TO_ADDR
24999: LD_VAR 0 5
25003: PUSH
25004: FOR_TO
25005: IFFALSE 25039
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
25007: LD_ADDR_VAR 0 8
25011: PUSH
25012: LD_VAR 0 8
25016: PPUSH
25017: LD_VAR 0 5
25021: PUSH
25022: LD_VAR 0 6
25026: ARRAY
25027: PUSH
25028: LD_INT 1
25030: ARRAY
25031: PPUSH
25032: CALL 56940 0 2
25036: ST_TO_ADDR
25037: GO 25004
25039: POP
25040: POP
// result := tmp ;
25041: LD_ADDR_VAR 0 5
25045: PUSH
25046: LD_VAR 0 8
25050: ST_TO_ADDR
// end ; end ;
25051: LD_VAR 0 5
25055: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
25056: LD_INT 0
25058: PPUSH
25059: PPUSH
25060: PPUSH
25061: PPUSH
// if not list then
25062: LD_VAR 0 3
25066: NOT
25067: IFFALSE 25071
// exit ;
25069: GO 25459
// result := [ ] ;
25071: LD_ADDR_VAR 0 6
25075: PUSH
25076: EMPTY
25077: ST_TO_ADDR
// for i in list do
25078: LD_ADDR_VAR 0 7
25082: PUSH
25083: LD_VAR 0 3
25087: PUSH
25088: FOR_IN
25089: IFFALSE 25291
// begin tmp := GetDistUnitXY ( i , x , y ) ;
25091: LD_ADDR_VAR 0 9
25095: PUSH
25096: LD_VAR 0 7
25100: PPUSH
25101: LD_VAR 0 1
25105: PPUSH
25106: LD_VAR 0 2
25110: PPUSH
25111: CALL_OW 297
25115: ST_TO_ADDR
// if not result then
25116: LD_VAR 0 6
25120: NOT
25121: IFFALSE 25147
// result := [ [ i , tmp ] ] else
25123: LD_ADDR_VAR 0 6
25127: PUSH
25128: LD_VAR 0 7
25132: PUSH
25133: LD_VAR 0 9
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: PUSH
25142: EMPTY
25143: LIST
25144: ST_TO_ADDR
25145: GO 25289
// begin if result [ result ] [ 2 ] < tmp then
25147: LD_VAR 0 6
25151: PUSH
25152: LD_VAR 0 6
25156: ARRAY
25157: PUSH
25158: LD_INT 2
25160: ARRAY
25161: PUSH
25162: LD_VAR 0 9
25166: LESS
25167: IFFALSE 25209
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
25169: LD_ADDR_VAR 0 6
25173: PUSH
25174: LD_VAR 0 6
25178: PPUSH
25179: LD_VAR 0 6
25183: PUSH
25184: LD_INT 1
25186: PLUS
25187: PPUSH
25188: LD_VAR 0 7
25192: PUSH
25193: LD_VAR 0 9
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PPUSH
25202: CALL_OW 2
25206: ST_TO_ADDR
25207: GO 25289
// for j = 1 to result do
25209: LD_ADDR_VAR 0 8
25213: PUSH
25214: DOUBLE
25215: LD_INT 1
25217: DEC
25218: ST_TO_ADDR
25219: LD_VAR 0 6
25223: PUSH
25224: FOR_TO
25225: IFFALSE 25287
// begin if tmp < result [ j ] [ 2 ] then
25227: LD_VAR 0 9
25231: PUSH
25232: LD_VAR 0 6
25236: PUSH
25237: LD_VAR 0 8
25241: ARRAY
25242: PUSH
25243: LD_INT 2
25245: ARRAY
25246: LESS
25247: IFFALSE 25285
// begin result := Insert ( result , j , [ i , tmp ] ) ;
25249: LD_ADDR_VAR 0 6
25253: PUSH
25254: LD_VAR 0 6
25258: PPUSH
25259: LD_VAR 0 8
25263: PPUSH
25264: LD_VAR 0 7
25268: PUSH
25269: LD_VAR 0 9
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: PPUSH
25278: CALL_OW 2
25282: ST_TO_ADDR
// break ;
25283: GO 25287
// end ; end ;
25285: GO 25224
25287: POP
25288: POP
// end ; end ;
25289: GO 25088
25291: POP
25292: POP
// if result and not asc then
25293: LD_VAR 0 6
25297: PUSH
25298: LD_VAR 0 4
25302: NOT
25303: AND
25304: IFFALSE 25379
// begin tmp := result ;
25306: LD_ADDR_VAR 0 9
25310: PUSH
25311: LD_VAR 0 6
25315: ST_TO_ADDR
// for i = tmp downto 1 do
25316: LD_ADDR_VAR 0 7
25320: PUSH
25321: DOUBLE
25322: LD_VAR 0 9
25326: INC
25327: ST_TO_ADDR
25328: LD_INT 1
25330: PUSH
25331: FOR_DOWNTO
25332: IFFALSE 25377
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
25334: LD_ADDR_VAR 0 6
25338: PUSH
25339: LD_VAR 0 6
25343: PPUSH
25344: LD_VAR 0 9
25348: PUSH
25349: LD_VAR 0 7
25353: MINUS
25354: PUSH
25355: LD_INT 1
25357: PLUS
25358: PPUSH
25359: LD_VAR 0 9
25363: PUSH
25364: LD_VAR 0 7
25368: ARRAY
25369: PPUSH
25370: CALL_OW 1
25374: ST_TO_ADDR
25375: GO 25331
25377: POP
25378: POP
// end ; tmp := [ ] ;
25379: LD_ADDR_VAR 0 9
25383: PUSH
25384: EMPTY
25385: ST_TO_ADDR
// if mode then
25386: LD_VAR 0 5
25390: IFFALSE 25459
// begin for i = 1 to result do
25392: LD_ADDR_VAR 0 7
25396: PUSH
25397: DOUBLE
25398: LD_INT 1
25400: DEC
25401: ST_TO_ADDR
25402: LD_VAR 0 6
25406: PUSH
25407: FOR_TO
25408: IFFALSE 25447
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
25410: LD_ADDR_VAR 0 9
25414: PUSH
25415: LD_VAR 0 9
25419: PPUSH
25420: LD_VAR 0 7
25424: PPUSH
25425: LD_VAR 0 6
25429: PUSH
25430: LD_VAR 0 7
25434: ARRAY
25435: PUSH
25436: LD_INT 1
25438: ARRAY
25439: PPUSH
25440: CALL_OW 1
25444: ST_TO_ADDR
25445: GO 25407
25447: POP
25448: POP
// result := tmp ;
25449: LD_ADDR_VAR 0 6
25453: PUSH
25454: LD_VAR 0 9
25458: ST_TO_ADDR
// end ; end ;
25459: LD_VAR 0 6
25463: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
25464: LD_INT 0
25466: PPUSH
25467: PPUSH
25468: PPUSH
25469: PPUSH
25470: PPUSH
25471: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
25472: LD_ADDR_VAR 0 5
25476: PUSH
25477: LD_INT 0
25479: PUSH
25480: LD_INT 0
25482: PUSH
25483: LD_INT 0
25485: PUSH
25486: EMPTY
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: ST_TO_ADDR
// if not x or not y then
25494: LD_VAR 0 2
25498: NOT
25499: PUSH
25500: LD_VAR 0 3
25504: NOT
25505: OR
25506: IFFALSE 25510
// exit ;
25508: GO 27160
// if not range then
25510: LD_VAR 0 4
25514: NOT
25515: IFFALSE 25525
// range := 10 ;
25517: LD_ADDR_VAR 0 4
25521: PUSH
25522: LD_INT 10
25524: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25525: LD_ADDR_VAR 0 8
25529: PUSH
25530: LD_INT 81
25532: PUSH
25533: LD_VAR 0 1
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: PUSH
25542: LD_INT 92
25544: PUSH
25545: LD_VAR 0 2
25549: PUSH
25550: LD_VAR 0 3
25554: PUSH
25555: LD_VAR 0 4
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: PUSH
25566: LD_INT 3
25568: PUSH
25569: LD_INT 21
25571: PUSH
25572: LD_INT 3
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: LIST
25587: PPUSH
25588: CALL_OW 69
25592: ST_TO_ADDR
// if not tmp then
25593: LD_VAR 0 8
25597: NOT
25598: IFFALSE 25602
// exit ;
25600: GO 27160
// for i in tmp do
25602: LD_ADDR_VAR 0 6
25606: PUSH
25607: LD_VAR 0 8
25611: PUSH
25612: FOR_IN
25613: IFFALSE 27135
// begin points := [ 0 , 0 , 0 ] ;
25615: LD_ADDR_VAR 0 9
25619: PUSH
25620: LD_INT 0
25622: PUSH
25623: LD_INT 0
25625: PUSH
25626: LD_INT 0
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: LIST
25633: ST_TO_ADDR
// bpoints := 1 ;
25634: LD_ADDR_VAR 0 10
25638: PUSH
25639: LD_INT 1
25641: ST_TO_ADDR
// case GetType ( i ) of unit_human :
25642: LD_VAR 0 6
25646: PPUSH
25647: CALL_OW 247
25651: PUSH
25652: LD_INT 1
25654: DOUBLE
25655: EQUAL
25656: IFTRUE 25660
25658: GO 26238
25660: POP
// begin if GetClass ( i ) = 1 then
25661: LD_VAR 0 6
25665: PPUSH
25666: CALL_OW 257
25670: PUSH
25671: LD_INT 1
25673: EQUAL
25674: IFFALSE 25695
// points := [ 10 , 5 , 3 ] ;
25676: LD_ADDR_VAR 0 9
25680: PUSH
25681: LD_INT 10
25683: PUSH
25684: LD_INT 5
25686: PUSH
25687: LD_INT 3
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: LIST
25694: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
25695: LD_VAR 0 6
25699: PPUSH
25700: CALL_OW 257
25704: PUSH
25705: LD_INT 2
25707: PUSH
25708: LD_INT 3
25710: PUSH
25711: LD_INT 4
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: LIST
25718: IN
25719: IFFALSE 25740
// points := [ 3 , 2 , 1 ] ;
25721: LD_ADDR_VAR 0 9
25725: PUSH
25726: LD_INT 3
25728: PUSH
25729: LD_INT 2
25731: PUSH
25732: LD_INT 1
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: LIST
25739: ST_TO_ADDR
// if GetClass ( i ) = 5 then
25740: LD_VAR 0 6
25744: PPUSH
25745: CALL_OW 257
25749: PUSH
25750: LD_INT 5
25752: EQUAL
25753: IFFALSE 25774
// points := [ 130 , 5 , 2 ] ;
25755: LD_ADDR_VAR 0 9
25759: PUSH
25760: LD_INT 130
25762: PUSH
25763: LD_INT 5
25765: PUSH
25766: LD_INT 2
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: LIST
25773: ST_TO_ADDR
// if GetClass ( i ) = 8 then
25774: LD_VAR 0 6
25778: PPUSH
25779: CALL_OW 257
25783: PUSH
25784: LD_INT 8
25786: EQUAL
25787: IFFALSE 25808
// points := [ 35 , 35 , 30 ] ;
25789: LD_ADDR_VAR 0 9
25793: PUSH
25794: LD_INT 35
25796: PUSH
25797: LD_INT 35
25799: PUSH
25800: LD_INT 30
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: LIST
25807: ST_TO_ADDR
// if GetClass ( i ) = 9 then
25808: LD_VAR 0 6
25812: PPUSH
25813: CALL_OW 257
25817: PUSH
25818: LD_INT 9
25820: EQUAL
25821: IFFALSE 25842
// points := [ 20 , 55 , 40 ] ;
25823: LD_ADDR_VAR 0 9
25827: PUSH
25828: LD_INT 20
25830: PUSH
25831: LD_INT 55
25833: PUSH
25834: LD_INT 40
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: LIST
25841: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
25842: LD_VAR 0 6
25846: PPUSH
25847: CALL_OW 257
25851: PUSH
25852: LD_INT 12
25854: PUSH
25855: LD_INT 16
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: IN
25862: IFFALSE 25883
// points := [ 5 , 3 , 2 ] ;
25864: LD_ADDR_VAR 0 9
25868: PUSH
25869: LD_INT 5
25871: PUSH
25872: LD_INT 3
25874: PUSH
25875: LD_INT 2
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: LIST
25882: ST_TO_ADDR
// if GetClass ( i ) = 17 then
25883: LD_VAR 0 6
25887: PPUSH
25888: CALL_OW 257
25892: PUSH
25893: LD_INT 17
25895: EQUAL
25896: IFFALSE 25917
// points := [ 100 , 50 , 75 ] ;
25898: LD_ADDR_VAR 0 9
25902: PUSH
25903: LD_INT 100
25905: PUSH
25906: LD_INT 50
25908: PUSH
25909: LD_INT 75
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: LIST
25916: ST_TO_ADDR
// if GetClass ( i ) = 15 then
25917: LD_VAR 0 6
25921: PPUSH
25922: CALL_OW 257
25926: PUSH
25927: LD_INT 15
25929: EQUAL
25930: IFFALSE 25951
// points := [ 10 , 5 , 3 ] ;
25932: LD_ADDR_VAR 0 9
25936: PUSH
25937: LD_INT 10
25939: PUSH
25940: LD_INT 5
25942: PUSH
25943: LD_INT 3
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: LIST
25950: ST_TO_ADDR
// if GetClass ( i ) = 14 then
25951: LD_VAR 0 6
25955: PPUSH
25956: CALL_OW 257
25960: PUSH
25961: LD_INT 14
25963: EQUAL
25964: IFFALSE 25985
// points := [ 10 , 0 , 0 ] ;
25966: LD_ADDR_VAR 0 9
25970: PUSH
25971: LD_INT 10
25973: PUSH
25974: LD_INT 0
25976: PUSH
25977: LD_INT 0
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: LIST
25984: ST_TO_ADDR
// if GetClass ( i ) = 11 then
25985: LD_VAR 0 6
25989: PPUSH
25990: CALL_OW 257
25994: PUSH
25995: LD_INT 11
25997: EQUAL
25998: IFFALSE 26019
// points := [ 30 , 10 , 5 ] ;
26000: LD_ADDR_VAR 0 9
26004: PUSH
26005: LD_INT 30
26007: PUSH
26008: LD_INT 10
26010: PUSH
26011: LD_INT 5
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: LIST
26018: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
26019: LD_VAR 0 1
26023: PPUSH
26024: LD_INT 5
26026: PPUSH
26027: CALL_OW 321
26031: PUSH
26032: LD_INT 2
26034: EQUAL
26035: IFFALSE 26052
// bpoints := bpoints * 1.8 ;
26037: LD_ADDR_VAR 0 10
26041: PUSH
26042: LD_VAR 0 10
26046: PUSH
26047: LD_REAL  1.80000000000000E+0000
26050: MUL
26051: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
26052: LD_VAR 0 6
26056: PPUSH
26057: CALL_OW 257
26061: PUSH
26062: LD_INT 1
26064: PUSH
26065: LD_INT 2
26067: PUSH
26068: LD_INT 3
26070: PUSH
26071: LD_INT 4
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: IN
26080: PUSH
26081: LD_VAR 0 1
26085: PPUSH
26086: LD_INT 51
26088: PPUSH
26089: CALL_OW 321
26093: PUSH
26094: LD_INT 2
26096: EQUAL
26097: AND
26098: IFFALSE 26115
// bpoints := bpoints * 1.2 ;
26100: LD_ADDR_VAR 0 10
26104: PUSH
26105: LD_VAR 0 10
26109: PUSH
26110: LD_REAL  1.20000000000000E+0000
26113: MUL
26114: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
26115: LD_VAR 0 6
26119: PPUSH
26120: CALL_OW 257
26124: PUSH
26125: LD_INT 5
26127: PUSH
26128: LD_INT 7
26130: PUSH
26131: LD_INT 9
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: LIST
26138: IN
26139: PUSH
26140: LD_VAR 0 1
26144: PPUSH
26145: LD_INT 52
26147: PPUSH
26148: CALL_OW 321
26152: PUSH
26153: LD_INT 2
26155: EQUAL
26156: AND
26157: IFFALSE 26174
// bpoints := bpoints * 1.5 ;
26159: LD_ADDR_VAR 0 10
26163: PUSH
26164: LD_VAR 0 10
26168: PUSH
26169: LD_REAL  1.50000000000000E+0000
26172: MUL
26173: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
26174: LD_VAR 0 1
26178: PPUSH
26179: LD_INT 66
26181: PPUSH
26182: CALL_OW 321
26186: PUSH
26187: LD_INT 2
26189: EQUAL
26190: IFFALSE 26207
// bpoints := bpoints * 1.1 ;
26192: LD_ADDR_VAR 0 10
26196: PUSH
26197: LD_VAR 0 10
26201: PUSH
26202: LD_REAL  1.10000000000000E+0000
26205: MUL
26206: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
26207: LD_ADDR_VAR 0 10
26211: PUSH
26212: LD_VAR 0 10
26216: PUSH
26217: LD_VAR 0 6
26221: PPUSH
26222: LD_INT 1
26224: PPUSH
26225: CALL_OW 259
26229: PUSH
26230: LD_REAL  1.15000000000000E+0000
26233: MUL
26234: MUL
26235: ST_TO_ADDR
// end ; unit_vehicle :
26236: GO 27064
26238: LD_INT 2
26240: DOUBLE
26241: EQUAL
26242: IFTRUE 26246
26244: GO 27052
26246: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
26247: LD_VAR 0 6
26251: PPUSH
26252: CALL_OW 264
26256: PUSH
26257: LD_INT 2
26259: PUSH
26260: LD_INT 42
26262: PUSH
26263: LD_INT 24
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: LIST
26270: IN
26271: IFFALSE 26292
// points := [ 25 , 5 , 3 ] ;
26273: LD_ADDR_VAR 0 9
26277: PUSH
26278: LD_INT 25
26280: PUSH
26281: LD_INT 5
26283: PUSH
26284: LD_INT 3
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: LIST
26291: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
26292: LD_VAR 0 6
26296: PPUSH
26297: CALL_OW 264
26301: PUSH
26302: LD_INT 4
26304: PUSH
26305: LD_INT 43
26307: PUSH
26308: LD_INT 25
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: LIST
26315: IN
26316: IFFALSE 26337
// points := [ 40 , 15 , 5 ] ;
26318: LD_ADDR_VAR 0 9
26322: PUSH
26323: LD_INT 40
26325: PUSH
26326: LD_INT 15
26328: PUSH
26329: LD_INT 5
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: LIST
26336: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
26337: LD_VAR 0 6
26341: PPUSH
26342: CALL_OW 264
26346: PUSH
26347: LD_INT 3
26349: PUSH
26350: LD_INT 23
26352: PUSH
26353: EMPTY
26354: LIST
26355: LIST
26356: IN
26357: IFFALSE 26378
// points := [ 7 , 25 , 8 ] ;
26359: LD_ADDR_VAR 0 9
26363: PUSH
26364: LD_INT 7
26366: PUSH
26367: LD_INT 25
26369: PUSH
26370: LD_INT 8
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: LIST
26377: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
26378: LD_VAR 0 6
26382: PPUSH
26383: CALL_OW 264
26387: PUSH
26388: LD_INT 5
26390: PUSH
26391: LD_INT 27
26393: PUSH
26394: LD_INT 44
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: LIST
26401: IN
26402: IFFALSE 26423
// points := [ 14 , 50 , 16 ] ;
26404: LD_ADDR_VAR 0 9
26408: PUSH
26409: LD_INT 14
26411: PUSH
26412: LD_INT 50
26414: PUSH
26415: LD_INT 16
26417: PUSH
26418: EMPTY
26419: LIST
26420: LIST
26421: LIST
26422: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
26423: LD_VAR 0 6
26427: PPUSH
26428: CALL_OW 264
26432: PUSH
26433: LD_INT 6
26435: PUSH
26436: LD_INT 46
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: IN
26443: IFFALSE 26464
// points := [ 32 , 120 , 70 ] ;
26445: LD_ADDR_VAR 0 9
26449: PUSH
26450: LD_INT 32
26452: PUSH
26453: LD_INT 120
26455: PUSH
26456: LD_INT 70
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: LIST
26463: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
26464: LD_VAR 0 6
26468: PPUSH
26469: CALL_OW 264
26473: PUSH
26474: LD_INT 7
26476: PUSH
26477: LD_INT 28
26479: PUSH
26480: LD_INT 45
26482: PUSH
26483: LD_INT 92
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: IN
26492: IFFALSE 26513
// points := [ 35 , 20 , 45 ] ;
26494: LD_ADDR_VAR 0 9
26498: PUSH
26499: LD_INT 35
26501: PUSH
26502: LD_INT 20
26504: PUSH
26505: LD_INT 45
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: LIST
26512: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
26513: LD_VAR 0 6
26517: PPUSH
26518: CALL_OW 264
26522: PUSH
26523: LD_INT 47
26525: PUSH
26526: EMPTY
26527: LIST
26528: IN
26529: IFFALSE 26550
// points := [ 67 , 45 , 75 ] ;
26531: LD_ADDR_VAR 0 9
26535: PUSH
26536: LD_INT 67
26538: PUSH
26539: LD_INT 45
26541: PUSH
26542: LD_INT 75
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: LIST
26549: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
26550: LD_VAR 0 6
26554: PPUSH
26555: CALL_OW 264
26559: PUSH
26560: LD_INT 26
26562: PUSH
26563: EMPTY
26564: LIST
26565: IN
26566: IFFALSE 26587
// points := [ 120 , 30 , 80 ] ;
26568: LD_ADDR_VAR 0 9
26572: PUSH
26573: LD_INT 120
26575: PUSH
26576: LD_INT 30
26578: PUSH
26579: LD_INT 80
26581: PUSH
26582: EMPTY
26583: LIST
26584: LIST
26585: LIST
26586: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
26587: LD_VAR 0 6
26591: PPUSH
26592: CALL_OW 264
26596: PUSH
26597: LD_INT 22
26599: PUSH
26600: EMPTY
26601: LIST
26602: IN
26603: IFFALSE 26624
// points := [ 40 , 1 , 1 ] ;
26605: LD_ADDR_VAR 0 9
26609: PUSH
26610: LD_INT 40
26612: PUSH
26613: LD_INT 1
26615: PUSH
26616: LD_INT 1
26618: PUSH
26619: EMPTY
26620: LIST
26621: LIST
26622: LIST
26623: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
26624: LD_VAR 0 6
26628: PPUSH
26629: CALL_OW 264
26633: PUSH
26634: LD_INT 29
26636: PUSH
26637: EMPTY
26638: LIST
26639: IN
26640: IFFALSE 26661
// points := [ 70 , 200 , 400 ] ;
26642: LD_ADDR_VAR 0 9
26646: PUSH
26647: LD_INT 70
26649: PUSH
26650: LD_INT 200
26652: PUSH
26653: LD_INT 400
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: LIST
26660: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
26661: LD_VAR 0 6
26665: PPUSH
26666: CALL_OW 264
26670: PUSH
26671: LD_INT 14
26673: PUSH
26674: LD_INT 53
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: IN
26681: IFFALSE 26702
// points := [ 40 , 10 , 20 ] ;
26683: LD_ADDR_VAR 0 9
26687: PUSH
26688: LD_INT 40
26690: PUSH
26691: LD_INT 10
26693: PUSH
26694: LD_INT 20
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: LIST
26701: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
26702: LD_VAR 0 6
26706: PPUSH
26707: CALL_OW 264
26711: PUSH
26712: LD_INT 9
26714: PUSH
26715: EMPTY
26716: LIST
26717: IN
26718: IFFALSE 26739
// points := [ 5 , 70 , 20 ] ;
26720: LD_ADDR_VAR 0 9
26724: PUSH
26725: LD_INT 5
26727: PUSH
26728: LD_INT 70
26730: PUSH
26731: LD_INT 20
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: LIST
26738: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
26739: LD_VAR 0 6
26743: PPUSH
26744: CALL_OW 264
26748: PUSH
26749: LD_INT 10
26751: PUSH
26752: EMPTY
26753: LIST
26754: IN
26755: IFFALSE 26776
// points := [ 35 , 110 , 70 ] ;
26757: LD_ADDR_VAR 0 9
26761: PUSH
26762: LD_INT 35
26764: PUSH
26765: LD_INT 110
26767: PUSH
26768: LD_INT 70
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: LIST
26775: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
26776: LD_VAR 0 6
26780: PPUSH
26781: CALL_OW 265
26785: PUSH
26786: LD_INT 25
26788: EQUAL
26789: IFFALSE 26810
// points := [ 80 , 65 , 100 ] ;
26791: LD_ADDR_VAR 0 9
26795: PUSH
26796: LD_INT 80
26798: PUSH
26799: LD_INT 65
26801: PUSH
26802: LD_INT 100
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: LIST
26809: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
26810: LD_VAR 0 6
26814: PPUSH
26815: CALL_OW 263
26819: PUSH
26820: LD_INT 1
26822: EQUAL
26823: IFFALSE 26858
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
26825: LD_ADDR_VAR 0 10
26829: PUSH
26830: LD_VAR 0 10
26834: PUSH
26835: LD_VAR 0 6
26839: PPUSH
26840: CALL_OW 311
26844: PPUSH
26845: LD_INT 3
26847: PPUSH
26848: CALL_OW 259
26852: PUSH
26853: LD_INT 4
26855: MUL
26856: MUL
26857: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
26858: LD_VAR 0 6
26862: PPUSH
26863: CALL_OW 263
26867: PUSH
26868: LD_INT 2
26870: EQUAL
26871: IFFALSE 26922
// begin j := IsControledBy ( i ) ;
26873: LD_ADDR_VAR 0 7
26877: PUSH
26878: LD_VAR 0 6
26882: PPUSH
26883: CALL_OW 312
26887: ST_TO_ADDR
// if j then
26888: LD_VAR 0 7
26892: IFFALSE 26922
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
26894: LD_ADDR_VAR 0 10
26898: PUSH
26899: LD_VAR 0 10
26903: PUSH
26904: LD_VAR 0 7
26908: PPUSH
26909: LD_INT 3
26911: PPUSH
26912: CALL_OW 259
26916: PUSH
26917: LD_INT 3
26919: MUL
26920: MUL
26921: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
26922: LD_VAR 0 6
26926: PPUSH
26927: CALL_OW 264
26931: PUSH
26932: LD_INT 5
26934: PUSH
26935: LD_INT 6
26937: PUSH
26938: LD_INT 46
26940: PUSH
26941: LD_INT 44
26943: PUSH
26944: LD_INT 47
26946: PUSH
26947: LD_INT 45
26949: PUSH
26950: LD_INT 28
26952: PUSH
26953: LD_INT 7
26955: PUSH
26956: LD_INT 27
26958: PUSH
26959: LD_INT 29
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: LIST
26972: LIST
26973: IN
26974: PUSH
26975: LD_VAR 0 1
26979: PPUSH
26980: LD_INT 52
26982: PPUSH
26983: CALL_OW 321
26987: PUSH
26988: LD_INT 2
26990: EQUAL
26991: AND
26992: IFFALSE 27009
// bpoints := bpoints * 1.2 ;
26994: LD_ADDR_VAR 0 10
26998: PUSH
26999: LD_VAR 0 10
27003: PUSH
27004: LD_REAL  1.20000000000000E+0000
27007: MUL
27008: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
27009: LD_VAR 0 6
27013: PPUSH
27014: CALL_OW 264
27018: PUSH
27019: LD_INT 6
27021: PUSH
27022: LD_INT 46
27024: PUSH
27025: LD_INT 47
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: LIST
27032: IN
27033: IFFALSE 27050
// bpoints := bpoints * 1.2 ;
27035: LD_ADDR_VAR 0 10
27039: PUSH
27040: LD_VAR 0 10
27044: PUSH
27045: LD_REAL  1.20000000000000E+0000
27048: MUL
27049: ST_TO_ADDR
// end ; unit_building :
27050: GO 27064
27052: LD_INT 3
27054: DOUBLE
27055: EQUAL
27056: IFTRUE 27060
27058: GO 27063
27060: POP
// ; end ;
27061: GO 27064
27063: POP
// for j = 1 to 3 do
27064: LD_ADDR_VAR 0 7
27068: PUSH
27069: DOUBLE
27070: LD_INT 1
27072: DEC
27073: ST_TO_ADDR
27074: LD_INT 3
27076: PUSH
27077: FOR_TO
27078: IFFALSE 27131
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
27080: LD_ADDR_VAR 0 5
27084: PUSH
27085: LD_VAR 0 5
27089: PPUSH
27090: LD_VAR 0 7
27094: PPUSH
27095: LD_VAR 0 5
27099: PUSH
27100: LD_VAR 0 7
27104: ARRAY
27105: PUSH
27106: LD_VAR 0 9
27110: PUSH
27111: LD_VAR 0 7
27115: ARRAY
27116: PUSH
27117: LD_VAR 0 10
27121: MUL
27122: PLUS
27123: PPUSH
27124: CALL_OW 1
27128: ST_TO_ADDR
27129: GO 27077
27131: POP
27132: POP
// end ;
27133: GO 25612
27135: POP
27136: POP
// result := Replace ( result , 4 , tmp ) ;
27137: LD_ADDR_VAR 0 5
27141: PUSH
27142: LD_VAR 0 5
27146: PPUSH
27147: LD_INT 4
27149: PPUSH
27150: LD_VAR 0 8
27154: PPUSH
27155: CALL_OW 1
27159: ST_TO_ADDR
// end ;
27160: LD_VAR 0 5
27164: RET
// export function DangerAtRange ( unit , range ) ; begin
27165: LD_INT 0
27167: PPUSH
// if not unit then
27168: LD_VAR 0 1
27172: NOT
27173: IFFALSE 27177
// exit ;
27175: GO 27222
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
27177: LD_ADDR_VAR 0 3
27181: PUSH
27182: LD_VAR 0 1
27186: PPUSH
27187: CALL_OW 255
27191: PPUSH
27192: LD_VAR 0 1
27196: PPUSH
27197: CALL_OW 250
27201: PPUSH
27202: LD_VAR 0 1
27206: PPUSH
27207: CALL_OW 251
27211: PPUSH
27212: LD_VAR 0 2
27216: PPUSH
27217: CALL 25464 0 4
27221: ST_TO_ADDR
// end ;
27222: LD_VAR 0 3
27226: RET
// export function DangerInArea ( side , area ) ; begin
27227: LD_INT 0
27229: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
27230: LD_ADDR_VAR 0 3
27234: PUSH
27235: LD_VAR 0 2
27239: PPUSH
27240: LD_INT 81
27242: PUSH
27243: LD_VAR 0 1
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: PPUSH
27252: CALL_OW 70
27256: ST_TO_ADDR
// end ;
27257: LD_VAR 0 3
27261: RET
// export function IsExtension ( b ) ; begin
27262: LD_INT 0
27264: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
27265: LD_ADDR_VAR 0 2
27269: PUSH
27270: LD_VAR 0 1
27274: PUSH
27275: LD_INT 23
27277: PUSH
27278: LD_INT 20
27280: PUSH
27281: LD_INT 22
27283: PUSH
27284: LD_INT 17
27286: PUSH
27287: LD_INT 24
27289: PUSH
27290: LD_INT 21
27292: PUSH
27293: LD_INT 19
27295: PUSH
27296: LD_INT 16
27298: PUSH
27299: LD_INT 25
27301: PUSH
27302: LD_INT 18
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: LIST
27313: LIST
27314: LIST
27315: LIST
27316: IN
27317: ST_TO_ADDR
// end ;
27318: LD_VAR 0 2
27322: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
27323: LD_INT 0
27325: PPUSH
27326: PPUSH
27327: PPUSH
// result := [ ] ;
27328: LD_ADDR_VAR 0 4
27332: PUSH
27333: EMPTY
27334: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
27335: LD_ADDR_VAR 0 5
27339: PUSH
27340: LD_VAR 0 2
27344: PPUSH
27345: LD_INT 21
27347: PUSH
27348: LD_INT 3
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: PPUSH
27355: CALL_OW 70
27359: ST_TO_ADDR
// if not tmp then
27360: LD_VAR 0 5
27364: NOT
27365: IFFALSE 27369
// exit ;
27367: GO 27433
// if checkLink then
27369: LD_VAR 0 3
27373: IFFALSE 27423
// begin for i in tmp do
27375: LD_ADDR_VAR 0 6
27379: PUSH
27380: LD_VAR 0 5
27384: PUSH
27385: FOR_IN
27386: IFFALSE 27421
// if GetBase ( i ) <> base then
27388: LD_VAR 0 6
27392: PPUSH
27393: CALL_OW 274
27397: PUSH
27398: LD_VAR 0 1
27402: NONEQUAL
27403: IFFALSE 27419
// ComLinkToBase ( base , i ) ;
27405: LD_VAR 0 1
27409: PPUSH
27410: LD_VAR 0 6
27414: PPUSH
27415: CALL_OW 169
27419: GO 27385
27421: POP
27422: POP
// end ; result := tmp ;
27423: LD_ADDR_VAR 0 4
27427: PUSH
27428: LD_VAR 0 5
27432: ST_TO_ADDR
// end ;
27433: LD_VAR 0 4
27437: RET
// export function ComComplete ( units , b ) ; var i ; begin
27438: LD_INT 0
27440: PPUSH
27441: PPUSH
// if not units then
27442: LD_VAR 0 1
27446: NOT
27447: IFFALSE 27451
// exit ;
27449: GO 27541
// for i in units do
27451: LD_ADDR_VAR 0 4
27455: PUSH
27456: LD_VAR 0 1
27460: PUSH
27461: FOR_IN
27462: IFFALSE 27539
// if BuildingStatus ( b ) = bs_build then
27464: LD_VAR 0 2
27468: PPUSH
27469: CALL_OW 461
27473: PUSH
27474: LD_INT 1
27476: EQUAL
27477: IFFALSE 27537
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
27479: LD_VAR 0 4
27483: PPUSH
27484: LD_STRING h
27486: PUSH
27487: LD_VAR 0 2
27491: PPUSH
27492: CALL_OW 250
27496: PUSH
27497: LD_VAR 0 2
27501: PPUSH
27502: CALL_OW 251
27506: PUSH
27507: LD_VAR 0 2
27511: PUSH
27512: LD_INT 0
27514: PUSH
27515: LD_INT 0
27517: PUSH
27518: LD_INT 0
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: PUSH
27530: EMPTY
27531: LIST
27532: PPUSH
27533: CALL_OW 446
27537: GO 27461
27539: POP
27540: POP
// end ;
27541: LD_VAR 0 3
27545: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
27546: LD_INT 0
27548: PPUSH
27549: PPUSH
27550: PPUSH
27551: PPUSH
27552: PPUSH
27553: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
27554: LD_VAR 0 1
27558: NOT
27559: PUSH
27560: LD_VAR 0 1
27564: PPUSH
27565: CALL_OW 263
27569: PUSH
27570: LD_INT 2
27572: NONEQUAL
27573: OR
27574: IFFALSE 27578
// exit ;
27576: GO 27894
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
27578: LD_ADDR_VAR 0 6
27582: PUSH
27583: LD_INT 22
27585: PUSH
27586: LD_VAR 0 1
27590: PPUSH
27591: CALL_OW 255
27595: PUSH
27596: EMPTY
27597: LIST
27598: LIST
27599: PUSH
27600: LD_INT 2
27602: PUSH
27603: LD_INT 30
27605: PUSH
27606: LD_INT 36
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 34
27615: PUSH
27616: LD_INT 31
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: LIST
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: PPUSH
27632: CALL_OW 69
27636: ST_TO_ADDR
// if not tmp then
27637: LD_VAR 0 6
27641: NOT
27642: IFFALSE 27646
// exit ;
27644: GO 27894
// result := [ ] ;
27646: LD_ADDR_VAR 0 2
27650: PUSH
27651: EMPTY
27652: ST_TO_ADDR
// for i in tmp do
27653: LD_ADDR_VAR 0 3
27657: PUSH
27658: LD_VAR 0 6
27662: PUSH
27663: FOR_IN
27664: IFFALSE 27735
// begin t := UnitsInside ( i ) ;
27666: LD_ADDR_VAR 0 4
27670: PUSH
27671: LD_VAR 0 3
27675: PPUSH
27676: CALL_OW 313
27680: ST_TO_ADDR
// if t then
27681: LD_VAR 0 4
27685: IFFALSE 27733
// for j in t do
27687: LD_ADDR_VAR 0 7
27691: PUSH
27692: LD_VAR 0 4
27696: PUSH
27697: FOR_IN
27698: IFFALSE 27731
// result := Replace ( result , result + 1 , j ) ;
27700: LD_ADDR_VAR 0 2
27704: PUSH
27705: LD_VAR 0 2
27709: PPUSH
27710: LD_VAR 0 2
27714: PUSH
27715: LD_INT 1
27717: PLUS
27718: PPUSH
27719: LD_VAR 0 7
27723: PPUSH
27724: CALL_OW 1
27728: ST_TO_ADDR
27729: GO 27697
27731: POP
27732: POP
// end ;
27733: GO 27663
27735: POP
27736: POP
// if not result then
27737: LD_VAR 0 2
27741: NOT
27742: IFFALSE 27746
// exit ;
27744: GO 27894
// mech := result [ 1 ] ;
27746: LD_ADDR_VAR 0 5
27750: PUSH
27751: LD_VAR 0 2
27755: PUSH
27756: LD_INT 1
27758: ARRAY
27759: ST_TO_ADDR
// if result > 1 then
27760: LD_VAR 0 2
27764: PUSH
27765: LD_INT 1
27767: GREATER
27768: IFFALSE 27880
// begin for i = 2 to result do
27770: LD_ADDR_VAR 0 3
27774: PUSH
27775: DOUBLE
27776: LD_INT 2
27778: DEC
27779: ST_TO_ADDR
27780: LD_VAR 0 2
27784: PUSH
27785: FOR_TO
27786: IFFALSE 27878
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
27788: LD_ADDR_VAR 0 4
27792: PUSH
27793: LD_VAR 0 2
27797: PUSH
27798: LD_VAR 0 3
27802: ARRAY
27803: PPUSH
27804: LD_INT 3
27806: PPUSH
27807: CALL_OW 259
27811: PUSH
27812: LD_VAR 0 2
27816: PUSH
27817: LD_VAR 0 3
27821: ARRAY
27822: PPUSH
27823: CALL_OW 432
27827: MINUS
27828: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
27829: LD_VAR 0 4
27833: PUSH
27834: LD_VAR 0 5
27838: PPUSH
27839: LD_INT 3
27841: PPUSH
27842: CALL_OW 259
27846: PUSH
27847: LD_VAR 0 5
27851: PPUSH
27852: CALL_OW 432
27856: MINUS
27857: GREATEREQUAL
27858: IFFALSE 27876
// mech := result [ i ] ;
27860: LD_ADDR_VAR 0 5
27864: PUSH
27865: LD_VAR 0 2
27869: PUSH
27870: LD_VAR 0 3
27874: ARRAY
27875: ST_TO_ADDR
// end ;
27876: GO 27785
27878: POP
27879: POP
// end ; ComLinkTo ( vehicle , mech ) ;
27880: LD_VAR 0 1
27884: PPUSH
27885: LD_VAR 0 5
27889: PPUSH
27890: CALL_OW 135
// end ;
27894: LD_VAR 0 2
27898: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
27899: LD_INT 0
27901: PPUSH
27902: PPUSH
27903: PPUSH
27904: PPUSH
27905: PPUSH
27906: PPUSH
27907: PPUSH
27908: PPUSH
27909: PPUSH
27910: PPUSH
27911: PPUSH
27912: PPUSH
27913: PPUSH
// result := [ ] ;
27914: LD_ADDR_VAR 0 7
27918: PUSH
27919: EMPTY
27920: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
27921: LD_VAR 0 1
27925: PPUSH
27926: CALL_OW 266
27930: PUSH
27931: LD_INT 0
27933: PUSH
27934: LD_INT 1
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: IN
27941: NOT
27942: IFFALSE 27946
// exit ;
27944: GO 29580
// if name then
27946: LD_VAR 0 3
27950: IFFALSE 27966
// SetBName ( base_dep , name ) ;
27952: LD_VAR 0 1
27956: PPUSH
27957: LD_VAR 0 3
27961: PPUSH
27962: CALL_OW 500
// base := GetBase ( base_dep ) ;
27966: LD_ADDR_VAR 0 15
27970: PUSH
27971: LD_VAR 0 1
27975: PPUSH
27976: CALL_OW 274
27980: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
27981: LD_ADDR_VAR 0 16
27985: PUSH
27986: LD_VAR 0 1
27990: PPUSH
27991: CALL_OW 255
27995: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
27996: LD_ADDR_VAR 0 17
28000: PUSH
28001: LD_VAR 0 1
28005: PPUSH
28006: CALL_OW 248
28010: ST_TO_ADDR
// if sources then
28011: LD_VAR 0 5
28015: IFFALSE 28062
// for i = 1 to 3 do
28017: LD_ADDR_VAR 0 8
28021: PUSH
28022: DOUBLE
28023: LD_INT 1
28025: DEC
28026: ST_TO_ADDR
28027: LD_INT 3
28029: PUSH
28030: FOR_TO
28031: IFFALSE 28060
// AddResourceType ( base , i , sources [ i ] ) ;
28033: LD_VAR 0 15
28037: PPUSH
28038: LD_VAR 0 8
28042: PPUSH
28043: LD_VAR 0 5
28047: PUSH
28048: LD_VAR 0 8
28052: ARRAY
28053: PPUSH
28054: CALL_OW 276
28058: GO 28030
28060: POP
28061: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
28062: LD_ADDR_VAR 0 18
28066: PUSH
28067: LD_VAR 0 15
28071: PPUSH
28072: LD_VAR 0 2
28076: PPUSH
28077: LD_INT 1
28079: PPUSH
28080: CALL 27323 0 3
28084: ST_TO_ADDR
// InitHc ;
28085: CALL_OW 19
// InitUc ;
28089: CALL_OW 18
// uc_side := side ;
28093: LD_ADDR_OWVAR 20
28097: PUSH
28098: LD_VAR 0 16
28102: ST_TO_ADDR
// uc_nation := nation ;
28103: LD_ADDR_OWVAR 21
28107: PUSH
28108: LD_VAR 0 17
28112: ST_TO_ADDR
// if buildings then
28113: LD_VAR 0 18
28117: IFFALSE 29439
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
28119: LD_ADDR_VAR 0 19
28123: PUSH
28124: LD_VAR 0 18
28128: PPUSH
28129: LD_INT 2
28131: PUSH
28132: LD_INT 30
28134: PUSH
28135: LD_INT 29
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: PUSH
28142: LD_INT 30
28144: PUSH
28145: LD_INT 30
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: LIST
28156: PPUSH
28157: CALL_OW 72
28161: ST_TO_ADDR
// if tmp then
28162: LD_VAR 0 19
28166: IFFALSE 28214
// for i in tmp do
28168: LD_ADDR_VAR 0 8
28172: PUSH
28173: LD_VAR 0 19
28177: PUSH
28178: FOR_IN
28179: IFFALSE 28212
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
28181: LD_VAR 0 8
28185: PPUSH
28186: CALL_OW 250
28190: PPUSH
28191: LD_VAR 0 8
28195: PPUSH
28196: CALL_OW 251
28200: PPUSH
28201: LD_VAR 0 16
28205: PPUSH
28206: CALL_OW 441
28210: GO 28178
28212: POP
28213: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
28214: LD_VAR 0 18
28218: PPUSH
28219: LD_INT 2
28221: PUSH
28222: LD_INT 30
28224: PUSH
28225: LD_INT 32
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: PUSH
28232: LD_INT 30
28234: PUSH
28235: LD_INT 33
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: EMPTY
28243: LIST
28244: LIST
28245: LIST
28246: PPUSH
28247: CALL_OW 72
28251: IFFALSE 28339
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
28253: LD_ADDR_VAR 0 8
28257: PUSH
28258: LD_VAR 0 18
28262: PPUSH
28263: LD_INT 2
28265: PUSH
28266: LD_INT 30
28268: PUSH
28269: LD_INT 32
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: LD_INT 30
28278: PUSH
28279: LD_INT 33
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: LIST
28290: PPUSH
28291: CALL_OW 72
28295: PUSH
28296: FOR_IN
28297: IFFALSE 28337
// begin if not GetBWeapon ( i ) then
28299: LD_VAR 0 8
28303: PPUSH
28304: CALL_OW 269
28308: NOT
28309: IFFALSE 28335
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
28311: LD_VAR 0 8
28315: PPUSH
28316: LD_VAR 0 8
28320: PPUSH
28321: LD_VAR 0 2
28325: PPUSH
28326: CALL 29585 0 2
28330: PPUSH
28331: CALL_OW 431
// end ;
28335: GO 28296
28337: POP
28338: POP
// end ; for i = 1 to personel do
28339: LD_ADDR_VAR 0 8
28343: PUSH
28344: DOUBLE
28345: LD_INT 1
28347: DEC
28348: ST_TO_ADDR
28349: LD_VAR 0 6
28353: PUSH
28354: FOR_TO
28355: IFFALSE 29419
// begin if i > 4 then
28357: LD_VAR 0 8
28361: PUSH
28362: LD_INT 4
28364: GREATER
28365: IFFALSE 28369
// break ;
28367: GO 29419
// case i of 1 :
28369: LD_VAR 0 8
28373: PUSH
28374: LD_INT 1
28376: DOUBLE
28377: EQUAL
28378: IFTRUE 28382
28380: GO 28462
28382: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
28383: LD_ADDR_VAR 0 12
28387: PUSH
28388: LD_VAR 0 18
28392: PPUSH
28393: LD_INT 22
28395: PUSH
28396: LD_VAR 0 16
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: PUSH
28405: LD_INT 58
28407: PUSH
28408: EMPTY
28409: LIST
28410: PUSH
28411: LD_INT 2
28413: PUSH
28414: LD_INT 30
28416: PUSH
28417: LD_INT 32
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: LD_INT 30
28426: PUSH
28427: LD_INT 4
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: PUSH
28434: LD_INT 30
28436: PUSH
28437: LD_INT 5
28439: PUSH
28440: EMPTY
28441: LIST
28442: LIST
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: LIST
28454: PPUSH
28455: CALL_OW 72
28459: ST_TO_ADDR
28460: GO 28684
28462: LD_INT 2
28464: DOUBLE
28465: EQUAL
28466: IFTRUE 28470
28468: GO 28532
28470: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
28471: LD_ADDR_VAR 0 12
28475: PUSH
28476: LD_VAR 0 18
28480: PPUSH
28481: LD_INT 22
28483: PUSH
28484: LD_VAR 0 16
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: LD_INT 2
28495: PUSH
28496: LD_INT 30
28498: PUSH
28499: LD_INT 0
28501: PUSH
28502: EMPTY
28503: LIST
28504: LIST
28505: PUSH
28506: LD_INT 30
28508: PUSH
28509: LD_INT 1
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: LIST
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: PPUSH
28525: CALL_OW 72
28529: ST_TO_ADDR
28530: GO 28684
28532: LD_INT 3
28534: DOUBLE
28535: EQUAL
28536: IFTRUE 28540
28538: GO 28602
28540: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
28541: LD_ADDR_VAR 0 12
28545: PUSH
28546: LD_VAR 0 18
28550: PPUSH
28551: LD_INT 22
28553: PUSH
28554: LD_VAR 0 16
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 2
28565: PUSH
28566: LD_INT 30
28568: PUSH
28569: LD_INT 2
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: PUSH
28576: LD_INT 30
28578: PUSH
28579: LD_INT 3
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: LIST
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PPUSH
28595: CALL_OW 72
28599: ST_TO_ADDR
28600: GO 28684
28602: LD_INT 4
28604: DOUBLE
28605: EQUAL
28606: IFTRUE 28610
28608: GO 28683
28610: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
28611: LD_ADDR_VAR 0 12
28615: PUSH
28616: LD_VAR 0 18
28620: PPUSH
28621: LD_INT 22
28623: PUSH
28624: LD_VAR 0 16
28628: PUSH
28629: EMPTY
28630: LIST
28631: LIST
28632: PUSH
28633: LD_INT 2
28635: PUSH
28636: LD_INT 30
28638: PUSH
28639: LD_INT 6
28641: PUSH
28642: EMPTY
28643: LIST
28644: LIST
28645: PUSH
28646: LD_INT 30
28648: PUSH
28649: LD_INT 7
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: PUSH
28656: LD_INT 30
28658: PUSH
28659: LD_INT 8
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: LIST
28670: LIST
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: PPUSH
28676: CALL_OW 72
28680: ST_TO_ADDR
28681: GO 28684
28683: POP
// if i = 1 then
28684: LD_VAR 0 8
28688: PUSH
28689: LD_INT 1
28691: EQUAL
28692: IFFALSE 28803
// begin tmp := [ ] ;
28694: LD_ADDR_VAR 0 19
28698: PUSH
28699: EMPTY
28700: ST_TO_ADDR
// for j in f do
28701: LD_ADDR_VAR 0 9
28705: PUSH
28706: LD_VAR 0 12
28710: PUSH
28711: FOR_IN
28712: IFFALSE 28785
// if GetBType ( j ) = b_bunker then
28714: LD_VAR 0 9
28718: PPUSH
28719: CALL_OW 266
28723: PUSH
28724: LD_INT 32
28726: EQUAL
28727: IFFALSE 28754
// tmp := Insert ( tmp , 1 , j ) else
28729: LD_ADDR_VAR 0 19
28733: PUSH
28734: LD_VAR 0 19
28738: PPUSH
28739: LD_INT 1
28741: PPUSH
28742: LD_VAR 0 9
28746: PPUSH
28747: CALL_OW 2
28751: ST_TO_ADDR
28752: GO 28783
// tmp := Insert ( tmp , tmp + 1 , j ) ;
28754: LD_ADDR_VAR 0 19
28758: PUSH
28759: LD_VAR 0 19
28763: PPUSH
28764: LD_VAR 0 19
28768: PUSH
28769: LD_INT 1
28771: PLUS
28772: PPUSH
28773: LD_VAR 0 9
28777: PPUSH
28778: CALL_OW 2
28782: ST_TO_ADDR
28783: GO 28711
28785: POP
28786: POP
// if tmp then
28787: LD_VAR 0 19
28791: IFFALSE 28803
// f := tmp ;
28793: LD_ADDR_VAR 0 12
28797: PUSH
28798: LD_VAR 0 19
28802: ST_TO_ADDR
// end ; x := personel [ i ] ;
28803: LD_ADDR_VAR 0 13
28807: PUSH
28808: LD_VAR 0 6
28812: PUSH
28813: LD_VAR 0 8
28817: ARRAY
28818: ST_TO_ADDR
// if x = - 1 then
28819: LD_VAR 0 13
28823: PUSH
28824: LD_INT 1
28826: NEG
28827: EQUAL
28828: IFFALSE 29037
// begin for j in f do
28830: LD_ADDR_VAR 0 9
28834: PUSH
28835: LD_VAR 0 12
28839: PUSH
28840: FOR_IN
28841: IFFALSE 29033
// repeat InitHc ;
28843: CALL_OW 19
// if GetBType ( j ) = b_barracks then
28847: LD_VAR 0 9
28851: PPUSH
28852: CALL_OW 266
28856: PUSH
28857: LD_INT 5
28859: EQUAL
28860: IFFALSE 28930
// begin if UnitsInside ( j ) < 3 then
28862: LD_VAR 0 9
28866: PPUSH
28867: CALL_OW 313
28871: PUSH
28872: LD_INT 3
28874: LESS
28875: IFFALSE 28911
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28877: LD_INT 0
28879: PPUSH
28880: LD_INT 5
28882: PUSH
28883: LD_INT 8
28885: PUSH
28886: LD_INT 9
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: LIST
28893: PUSH
28894: LD_VAR 0 17
28898: ARRAY
28899: PPUSH
28900: LD_VAR 0 4
28904: PPUSH
28905: CALL_OW 380
28909: GO 28928
// PrepareHuman ( false , i , skill ) ;
28911: LD_INT 0
28913: PPUSH
28914: LD_VAR 0 8
28918: PPUSH
28919: LD_VAR 0 4
28923: PPUSH
28924: CALL_OW 380
// end else
28928: GO 28947
// PrepareHuman ( false , i , skill ) ;
28930: LD_INT 0
28932: PPUSH
28933: LD_VAR 0 8
28937: PPUSH
28938: LD_VAR 0 4
28942: PPUSH
28943: CALL_OW 380
// un := CreateHuman ;
28947: LD_ADDR_VAR 0 14
28951: PUSH
28952: CALL_OW 44
28956: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28957: LD_ADDR_VAR 0 7
28961: PUSH
28962: LD_VAR 0 7
28966: PPUSH
28967: LD_INT 1
28969: PPUSH
28970: LD_VAR 0 14
28974: PPUSH
28975: CALL_OW 2
28979: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
28980: LD_VAR 0 14
28984: PPUSH
28985: LD_VAR 0 9
28989: PPUSH
28990: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
28994: LD_VAR 0 9
28998: PPUSH
28999: CALL_OW 313
29003: PUSH
29004: LD_INT 6
29006: EQUAL
29007: PUSH
29008: LD_VAR 0 9
29012: PPUSH
29013: CALL_OW 266
29017: PUSH
29018: LD_INT 32
29020: PUSH
29021: LD_INT 31
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: IN
29028: OR
29029: IFFALSE 28843
29031: GO 28840
29033: POP
29034: POP
// end else
29035: GO 29417
// for j = 1 to x do
29037: LD_ADDR_VAR 0 9
29041: PUSH
29042: DOUBLE
29043: LD_INT 1
29045: DEC
29046: ST_TO_ADDR
29047: LD_VAR 0 13
29051: PUSH
29052: FOR_TO
29053: IFFALSE 29415
// begin InitHc ;
29055: CALL_OW 19
// if not f then
29059: LD_VAR 0 12
29063: NOT
29064: IFFALSE 29153
// begin PrepareHuman ( false , i , skill ) ;
29066: LD_INT 0
29068: PPUSH
29069: LD_VAR 0 8
29073: PPUSH
29074: LD_VAR 0 4
29078: PPUSH
29079: CALL_OW 380
// un := CreateHuman ;
29083: LD_ADDR_VAR 0 14
29087: PUSH
29088: CALL_OW 44
29092: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29093: LD_ADDR_VAR 0 7
29097: PUSH
29098: LD_VAR 0 7
29102: PPUSH
29103: LD_INT 1
29105: PPUSH
29106: LD_VAR 0 14
29110: PPUSH
29111: CALL_OW 2
29115: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29116: LD_VAR 0 14
29120: PPUSH
29121: LD_VAR 0 1
29125: PPUSH
29126: CALL_OW 250
29130: PPUSH
29131: LD_VAR 0 1
29135: PPUSH
29136: CALL_OW 251
29140: PPUSH
29141: LD_INT 10
29143: PPUSH
29144: LD_INT 0
29146: PPUSH
29147: CALL_OW 50
// continue ;
29151: GO 29052
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
29153: LD_VAR 0 12
29157: PUSH
29158: LD_INT 1
29160: ARRAY
29161: PPUSH
29162: CALL_OW 313
29166: PUSH
29167: LD_VAR 0 12
29171: PUSH
29172: LD_INT 1
29174: ARRAY
29175: PPUSH
29176: CALL_OW 266
29180: PUSH
29181: LD_INT 32
29183: PUSH
29184: LD_INT 31
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: IN
29191: AND
29192: PUSH
29193: LD_VAR 0 12
29197: PUSH
29198: LD_INT 1
29200: ARRAY
29201: PPUSH
29202: CALL_OW 313
29206: PUSH
29207: LD_INT 6
29209: EQUAL
29210: OR
29211: IFFALSE 29231
// f := Delete ( f , 1 ) ;
29213: LD_ADDR_VAR 0 12
29217: PUSH
29218: LD_VAR 0 12
29222: PPUSH
29223: LD_INT 1
29225: PPUSH
29226: CALL_OW 3
29230: ST_TO_ADDR
// if not f then
29231: LD_VAR 0 12
29235: NOT
29236: IFFALSE 29254
// begin x := x + 2 ;
29238: LD_ADDR_VAR 0 13
29242: PUSH
29243: LD_VAR 0 13
29247: PUSH
29248: LD_INT 2
29250: PLUS
29251: ST_TO_ADDR
// continue ;
29252: GO 29052
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
29254: LD_VAR 0 12
29258: PUSH
29259: LD_INT 1
29261: ARRAY
29262: PPUSH
29263: CALL_OW 266
29267: PUSH
29268: LD_INT 5
29270: EQUAL
29271: IFFALSE 29345
// begin if UnitsInside ( f [ 1 ] ) < 3 then
29273: LD_VAR 0 12
29277: PUSH
29278: LD_INT 1
29280: ARRAY
29281: PPUSH
29282: CALL_OW 313
29286: PUSH
29287: LD_INT 3
29289: LESS
29290: IFFALSE 29326
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29292: LD_INT 0
29294: PPUSH
29295: LD_INT 5
29297: PUSH
29298: LD_INT 8
29300: PUSH
29301: LD_INT 9
29303: PUSH
29304: EMPTY
29305: LIST
29306: LIST
29307: LIST
29308: PUSH
29309: LD_VAR 0 17
29313: ARRAY
29314: PPUSH
29315: LD_VAR 0 4
29319: PPUSH
29320: CALL_OW 380
29324: GO 29343
// PrepareHuman ( false , i , skill ) ;
29326: LD_INT 0
29328: PPUSH
29329: LD_VAR 0 8
29333: PPUSH
29334: LD_VAR 0 4
29338: PPUSH
29339: CALL_OW 380
// end else
29343: GO 29362
// PrepareHuman ( false , i , skill ) ;
29345: LD_INT 0
29347: PPUSH
29348: LD_VAR 0 8
29352: PPUSH
29353: LD_VAR 0 4
29357: PPUSH
29358: CALL_OW 380
// un := CreateHuman ;
29362: LD_ADDR_VAR 0 14
29366: PUSH
29367: CALL_OW 44
29371: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29372: LD_ADDR_VAR 0 7
29376: PUSH
29377: LD_VAR 0 7
29381: PPUSH
29382: LD_INT 1
29384: PPUSH
29385: LD_VAR 0 14
29389: PPUSH
29390: CALL_OW 2
29394: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
29395: LD_VAR 0 14
29399: PPUSH
29400: LD_VAR 0 12
29404: PUSH
29405: LD_INT 1
29407: ARRAY
29408: PPUSH
29409: CALL_OW 52
// end ;
29413: GO 29052
29415: POP
29416: POP
// end ;
29417: GO 28354
29419: POP
29420: POP
// result := result ^ buildings ;
29421: LD_ADDR_VAR 0 7
29425: PUSH
29426: LD_VAR 0 7
29430: PUSH
29431: LD_VAR 0 18
29435: ADD
29436: ST_TO_ADDR
// end else
29437: GO 29580
// begin for i = 1 to personel do
29439: LD_ADDR_VAR 0 8
29443: PUSH
29444: DOUBLE
29445: LD_INT 1
29447: DEC
29448: ST_TO_ADDR
29449: LD_VAR 0 6
29453: PUSH
29454: FOR_TO
29455: IFFALSE 29578
// begin if i > 4 then
29457: LD_VAR 0 8
29461: PUSH
29462: LD_INT 4
29464: GREATER
29465: IFFALSE 29469
// break ;
29467: GO 29578
// x := personel [ i ] ;
29469: LD_ADDR_VAR 0 13
29473: PUSH
29474: LD_VAR 0 6
29478: PUSH
29479: LD_VAR 0 8
29483: ARRAY
29484: ST_TO_ADDR
// if x = - 1 then
29485: LD_VAR 0 13
29489: PUSH
29490: LD_INT 1
29492: NEG
29493: EQUAL
29494: IFFALSE 29498
// continue ;
29496: GO 29454
// PrepareHuman ( false , i , skill ) ;
29498: LD_INT 0
29500: PPUSH
29501: LD_VAR 0 8
29505: PPUSH
29506: LD_VAR 0 4
29510: PPUSH
29511: CALL_OW 380
// un := CreateHuman ;
29515: LD_ADDR_VAR 0 14
29519: PUSH
29520: CALL_OW 44
29524: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29525: LD_VAR 0 14
29529: PPUSH
29530: LD_VAR 0 1
29534: PPUSH
29535: CALL_OW 250
29539: PPUSH
29540: LD_VAR 0 1
29544: PPUSH
29545: CALL_OW 251
29549: PPUSH
29550: LD_INT 10
29552: PPUSH
29553: LD_INT 0
29555: PPUSH
29556: CALL_OW 50
// result := result ^ un ;
29560: LD_ADDR_VAR 0 7
29564: PUSH
29565: LD_VAR 0 7
29569: PUSH
29570: LD_VAR 0 14
29574: ADD
29575: ST_TO_ADDR
// end ;
29576: GO 29454
29578: POP
29579: POP
// end ; end ;
29580: LD_VAR 0 7
29584: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
29585: LD_INT 0
29587: PPUSH
29588: PPUSH
29589: PPUSH
29590: PPUSH
29591: PPUSH
29592: PPUSH
29593: PPUSH
29594: PPUSH
29595: PPUSH
29596: PPUSH
29597: PPUSH
29598: PPUSH
29599: PPUSH
29600: PPUSH
29601: PPUSH
29602: PPUSH
// result := false ;
29603: LD_ADDR_VAR 0 3
29607: PUSH
29608: LD_INT 0
29610: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
29611: LD_VAR 0 1
29615: NOT
29616: PUSH
29617: LD_VAR 0 1
29621: PPUSH
29622: CALL_OW 266
29626: PUSH
29627: LD_INT 32
29629: PUSH
29630: LD_INT 33
29632: PUSH
29633: EMPTY
29634: LIST
29635: LIST
29636: IN
29637: NOT
29638: OR
29639: IFFALSE 29643
// exit ;
29641: GO 30752
// nat := GetNation ( tower ) ;
29643: LD_ADDR_VAR 0 12
29647: PUSH
29648: LD_VAR 0 1
29652: PPUSH
29653: CALL_OW 248
29657: ST_TO_ADDR
// side := GetSide ( tower ) ;
29658: LD_ADDR_VAR 0 16
29662: PUSH
29663: LD_VAR 0 1
29667: PPUSH
29668: CALL_OW 255
29672: ST_TO_ADDR
// x := GetX ( tower ) ;
29673: LD_ADDR_VAR 0 10
29677: PUSH
29678: LD_VAR 0 1
29682: PPUSH
29683: CALL_OW 250
29687: ST_TO_ADDR
// y := GetY ( tower ) ;
29688: LD_ADDR_VAR 0 11
29692: PUSH
29693: LD_VAR 0 1
29697: PPUSH
29698: CALL_OW 251
29702: ST_TO_ADDR
// if not x or not y then
29703: LD_VAR 0 10
29707: NOT
29708: PUSH
29709: LD_VAR 0 11
29713: NOT
29714: OR
29715: IFFALSE 29719
// exit ;
29717: GO 30752
// weapon := 0 ;
29719: LD_ADDR_VAR 0 18
29723: PUSH
29724: LD_INT 0
29726: ST_TO_ADDR
// fac_list := [ ] ;
29727: LD_ADDR_VAR 0 17
29731: PUSH
29732: EMPTY
29733: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
29734: LD_ADDR_VAR 0 6
29738: PUSH
29739: LD_VAR 0 1
29743: PPUSH
29744: CALL_OW 274
29748: PPUSH
29749: LD_VAR 0 2
29753: PPUSH
29754: LD_INT 0
29756: PPUSH
29757: CALL 27323 0 3
29761: PPUSH
29762: LD_INT 30
29764: PUSH
29765: LD_INT 3
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: PPUSH
29772: CALL_OW 72
29776: ST_TO_ADDR
// if not factories then
29777: LD_VAR 0 6
29781: NOT
29782: IFFALSE 29786
// exit ;
29784: GO 30752
// for i in factories do
29786: LD_ADDR_VAR 0 8
29790: PUSH
29791: LD_VAR 0 6
29795: PUSH
29796: FOR_IN
29797: IFFALSE 29822
// fac_list := fac_list union AvailableWeaponList ( i ) ;
29799: LD_ADDR_VAR 0 17
29803: PUSH
29804: LD_VAR 0 17
29808: PUSH
29809: LD_VAR 0 8
29813: PPUSH
29814: CALL_OW 478
29818: UNION
29819: ST_TO_ADDR
29820: GO 29796
29822: POP
29823: POP
// if not fac_list then
29824: LD_VAR 0 17
29828: NOT
29829: IFFALSE 29833
// exit ;
29831: GO 30752
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
29833: LD_ADDR_VAR 0 5
29837: PUSH
29838: LD_INT 4
29840: PUSH
29841: LD_INT 5
29843: PUSH
29844: LD_INT 9
29846: PUSH
29847: LD_INT 10
29849: PUSH
29850: LD_INT 6
29852: PUSH
29853: LD_INT 7
29855: PUSH
29856: LD_INT 11
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: LIST
29867: PUSH
29868: LD_INT 27
29870: PUSH
29871: LD_INT 28
29873: PUSH
29874: LD_INT 26
29876: PUSH
29877: LD_INT 30
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: PUSH
29886: LD_INT 43
29888: PUSH
29889: LD_INT 44
29891: PUSH
29892: LD_INT 46
29894: PUSH
29895: LD_INT 45
29897: PUSH
29898: LD_INT 47
29900: PUSH
29901: LD_INT 49
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: LIST
29908: LIST
29909: LIST
29910: LIST
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: LIST
29916: PUSH
29917: LD_VAR 0 12
29921: ARRAY
29922: ST_TO_ADDR
// list := list isect fac_list ;
29923: LD_ADDR_VAR 0 5
29927: PUSH
29928: LD_VAR 0 5
29932: PUSH
29933: LD_VAR 0 17
29937: ISECT
29938: ST_TO_ADDR
// if not list then
29939: LD_VAR 0 5
29943: NOT
29944: IFFALSE 29948
// exit ;
29946: GO 30752
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
29948: LD_VAR 0 12
29952: PUSH
29953: LD_INT 3
29955: EQUAL
29956: PUSH
29957: LD_INT 49
29959: PUSH
29960: LD_VAR 0 5
29964: IN
29965: AND
29966: PUSH
29967: LD_INT 31
29969: PPUSH
29970: LD_VAR 0 16
29974: PPUSH
29975: CALL_OW 321
29979: PUSH
29980: LD_INT 2
29982: EQUAL
29983: AND
29984: IFFALSE 30044
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
29986: LD_INT 22
29988: PUSH
29989: LD_VAR 0 16
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: LD_INT 35
30000: PUSH
30001: LD_INT 49
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: LD_INT 91
30010: PUSH
30011: LD_VAR 0 1
30015: PUSH
30016: LD_INT 10
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: LIST
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: LIST
30028: PPUSH
30029: CALL_OW 69
30033: NOT
30034: IFFALSE 30044
// weapon := ru_time_lapser ;
30036: LD_ADDR_VAR 0 18
30040: PUSH
30041: LD_INT 49
30043: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
30044: LD_VAR 0 12
30048: PUSH
30049: LD_INT 1
30051: PUSH
30052: LD_INT 2
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: IN
30059: PUSH
30060: LD_INT 11
30062: PUSH
30063: LD_VAR 0 5
30067: IN
30068: PUSH
30069: LD_INT 30
30071: PUSH
30072: LD_VAR 0 5
30076: IN
30077: OR
30078: AND
30079: PUSH
30080: LD_INT 6
30082: PPUSH
30083: LD_VAR 0 16
30087: PPUSH
30088: CALL_OW 321
30092: PUSH
30093: LD_INT 2
30095: EQUAL
30096: AND
30097: IFFALSE 30262
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
30099: LD_INT 22
30101: PUSH
30102: LD_VAR 0 16
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PUSH
30111: LD_INT 2
30113: PUSH
30114: LD_INT 35
30116: PUSH
30117: LD_INT 11
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PUSH
30124: LD_INT 35
30126: PUSH
30127: LD_INT 30
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: LIST
30138: PUSH
30139: LD_INT 91
30141: PUSH
30142: LD_VAR 0 1
30146: PUSH
30147: LD_INT 18
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: LIST
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: LIST
30159: PPUSH
30160: CALL_OW 69
30164: NOT
30165: PUSH
30166: LD_INT 22
30168: PUSH
30169: LD_VAR 0 16
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: LD_INT 2
30180: PUSH
30181: LD_INT 30
30183: PUSH
30184: LD_INT 32
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PUSH
30191: LD_INT 30
30193: PUSH
30194: LD_INT 33
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: LIST
30205: PUSH
30206: LD_INT 91
30208: PUSH
30209: LD_VAR 0 1
30213: PUSH
30214: LD_INT 12
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: LIST
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: LIST
30226: PUSH
30227: EMPTY
30228: LIST
30229: PPUSH
30230: CALL_OW 69
30234: PUSH
30235: LD_INT 2
30237: GREATER
30238: AND
30239: IFFALSE 30262
// weapon := [ us_radar , ar_radar ] [ nat ] ;
30241: LD_ADDR_VAR 0 18
30245: PUSH
30246: LD_INT 11
30248: PUSH
30249: LD_INT 30
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PUSH
30256: LD_VAR 0 12
30260: ARRAY
30261: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
30262: LD_VAR 0 18
30266: NOT
30267: PUSH
30268: LD_INT 40
30270: PPUSH
30271: LD_VAR 0 16
30275: PPUSH
30276: CALL_OW 321
30280: PUSH
30281: LD_INT 2
30283: EQUAL
30284: AND
30285: PUSH
30286: LD_INT 7
30288: PUSH
30289: LD_VAR 0 5
30293: IN
30294: PUSH
30295: LD_INT 28
30297: PUSH
30298: LD_VAR 0 5
30302: IN
30303: OR
30304: PUSH
30305: LD_INT 45
30307: PUSH
30308: LD_VAR 0 5
30312: IN
30313: OR
30314: AND
30315: IFFALSE 30569
// begin hex := GetHexInfo ( x , y ) ;
30317: LD_ADDR_VAR 0 4
30321: PUSH
30322: LD_VAR 0 10
30326: PPUSH
30327: LD_VAR 0 11
30331: PPUSH
30332: CALL_OW 546
30336: ST_TO_ADDR
// if hex [ 1 ] then
30337: LD_VAR 0 4
30341: PUSH
30342: LD_INT 1
30344: ARRAY
30345: IFFALSE 30349
// exit ;
30347: GO 30752
// height := hex [ 2 ] ;
30349: LD_ADDR_VAR 0 15
30353: PUSH
30354: LD_VAR 0 4
30358: PUSH
30359: LD_INT 2
30361: ARRAY
30362: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
30363: LD_ADDR_VAR 0 14
30367: PUSH
30368: LD_INT 0
30370: PUSH
30371: LD_INT 2
30373: PUSH
30374: LD_INT 3
30376: PUSH
30377: LD_INT 5
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: ST_TO_ADDR
// for i in tmp do
30386: LD_ADDR_VAR 0 8
30390: PUSH
30391: LD_VAR 0 14
30395: PUSH
30396: FOR_IN
30397: IFFALSE 30567
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
30399: LD_ADDR_VAR 0 9
30403: PUSH
30404: LD_VAR 0 10
30408: PPUSH
30409: LD_VAR 0 8
30413: PPUSH
30414: LD_INT 5
30416: PPUSH
30417: CALL_OW 272
30421: PUSH
30422: LD_VAR 0 11
30426: PPUSH
30427: LD_VAR 0 8
30431: PPUSH
30432: LD_INT 5
30434: PPUSH
30435: CALL_OW 273
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
30444: LD_VAR 0 9
30448: PUSH
30449: LD_INT 1
30451: ARRAY
30452: PPUSH
30453: LD_VAR 0 9
30457: PUSH
30458: LD_INT 2
30460: ARRAY
30461: PPUSH
30462: CALL_OW 488
30466: IFFALSE 30565
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
30468: LD_ADDR_VAR 0 4
30472: PUSH
30473: LD_VAR 0 9
30477: PUSH
30478: LD_INT 1
30480: ARRAY
30481: PPUSH
30482: LD_VAR 0 9
30486: PUSH
30487: LD_INT 2
30489: ARRAY
30490: PPUSH
30491: CALL_OW 546
30495: ST_TO_ADDR
// if hex [ 1 ] then
30496: LD_VAR 0 4
30500: PUSH
30501: LD_INT 1
30503: ARRAY
30504: IFFALSE 30508
// continue ;
30506: GO 30396
// h := hex [ 2 ] ;
30508: LD_ADDR_VAR 0 13
30512: PUSH
30513: LD_VAR 0 4
30517: PUSH
30518: LD_INT 2
30520: ARRAY
30521: ST_TO_ADDR
// if h + 7 < height then
30522: LD_VAR 0 13
30526: PUSH
30527: LD_INT 7
30529: PLUS
30530: PUSH
30531: LD_VAR 0 15
30535: LESS
30536: IFFALSE 30565
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
30538: LD_ADDR_VAR 0 18
30542: PUSH
30543: LD_INT 7
30545: PUSH
30546: LD_INT 28
30548: PUSH
30549: LD_INT 45
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: LIST
30556: PUSH
30557: LD_VAR 0 12
30561: ARRAY
30562: ST_TO_ADDR
// break ;
30563: GO 30567
// end ; end ; end ;
30565: GO 30396
30567: POP
30568: POP
// end ; if not weapon then
30569: LD_VAR 0 18
30573: NOT
30574: IFFALSE 30634
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
30576: LD_ADDR_VAR 0 5
30580: PUSH
30581: LD_VAR 0 5
30585: PUSH
30586: LD_INT 11
30588: PUSH
30589: LD_INT 30
30591: PUSH
30592: LD_INT 49
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: LIST
30599: DIFF
30600: ST_TO_ADDR
// if not list then
30601: LD_VAR 0 5
30605: NOT
30606: IFFALSE 30610
// exit ;
30608: GO 30752
// weapon := list [ rand ( 1 , list ) ] ;
30610: LD_ADDR_VAR 0 18
30614: PUSH
30615: LD_VAR 0 5
30619: PUSH
30620: LD_INT 1
30622: PPUSH
30623: LD_VAR 0 5
30627: PPUSH
30628: CALL_OW 12
30632: ARRAY
30633: ST_TO_ADDR
// end ; if weapon then
30634: LD_VAR 0 18
30638: IFFALSE 30752
// begin tmp := CostOfWeapon ( weapon ) ;
30640: LD_ADDR_VAR 0 14
30644: PUSH
30645: LD_VAR 0 18
30649: PPUSH
30650: CALL_OW 451
30654: ST_TO_ADDR
// j := GetBase ( tower ) ;
30655: LD_ADDR_VAR 0 9
30659: PUSH
30660: LD_VAR 0 1
30664: PPUSH
30665: CALL_OW 274
30669: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
30670: LD_VAR 0 9
30674: PPUSH
30675: LD_INT 1
30677: PPUSH
30678: CALL_OW 275
30682: PUSH
30683: LD_VAR 0 14
30687: PUSH
30688: LD_INT 1
30690: ARRAY
30691: GREATEREQUAL
30692: PUSH
30693: LD_VAR 0 9
30697: PPUSH
30698: LD_INT 2
30700: PPUSH
30701: CALL_OW 275
30705: PUSH
30706: LD_VAR 0 14
30710: PUSH
30711: LD_INT 2
30713: ARRAY
30714: GREATEREQUAL
30715: AND
30716: PUSH
30717: LD_VAR 0 9
30721: PPUSH
30722: LD_INT 3
30724: PPUSH
30725: CALL_OW 275
30729: PUSH
30730: LD_VAR 0 14
30734: PUSH
30735: LD_INT 3
30737: ARRAY
30738: GREATEREQUAL
30739: AND
30740: IFFALSE 30752
// result := weapon ;
30742: LD_ADDR_VAR 0 3
30746: PUSH
30747: LD_VAR 0 18
30751: ST_TO_ADDR
// end ; end ;
30752: LD_VAR 0 3
30756: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
30757: LD_INT 0
30759: PPUSH
30760: PPUSH
// result := true ;
30761: LD_ADDR_VAR 0 3
30765: PUSH
30766: LD_INT 1
30768: ST_TO_ADDR
// if array1 = array2 then
30769: LD_VAR 0 1
30773: PUSH
30774: LD_VAR 0 2
30778: EQUAL
30779: IFFALSE 30839
// begin for i = 1 to array1 do
30781: LD_ADDR_VAR 0 4
30785: PUSH
30786: DOUBLE
30787: LD_INT 1
30789: DEC
30790: ST_TO_ADDR
30791: LD_VAR 0 1
30795: PUSH
30796: FOR_TO
30797: IFFALSE 30835
// if array1 [ i ] <> array2 [ i ] then
30799: LD_VAR 0 1
30803: PUSH
30804: LD_VAR 0 4
30808: ARRAY
30809: PUSH
30810: LD_VAR 0 2
30814: PUSH
30815: LD_VAR 0 4
30819: ARRAY
30820: NONEQUAL
30821: IFFALSE 30833
// begin result := false ;
30823: LD_ADDR_VAR 0 3
30827: PUSH
30828: LD_INT 0
30830: ST_TO_ADDR
// break ;
30831: GO 30835
// end ;
30833: GO 30796
30835: POP
30836: POP
// end else
30837: GO 30847
// result := false ;
30839: LD_ADDR_VAR 0 3
30843: PUSH
30844: LD_INT 0
30846: ST_TO_ADDR
// end ;
30847: LD_VAR 0 3
30851: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
30852: LD_INT 0
30854: PPUSH
30855: PPUSH
// if not array1 or not array2 then
30856: LD_VAR 0 1
30860: NOT
30861: PUSH
30862: LD_VAR 0 2
30866: NOT
30867: OR
30868: IFFALSE 30872
// exit ;
30870: GO 30936
// result := true ;
30872: LD_ADDR_VAR 0 3
30876: PUSH
30877: LD_INT 1
30879: ST_TO_ADDR
// for i = 1 to array1 do
30880: LD_ADDR_VAR 0 4
30884: PUSH
30885: DOUBLE
30886: LD_INT 1
30888: DEC
30889: ST_TO_ADDR
30890: LD_VAR 0 1
30894: PUSH
30895: FOR_TO
30896: IFFALSE 30934
// if array1 [ i ] <> array2 [ i ] then
30898: LD_VAR 0 1
30902: PUSH
30903: LD_VAR 0 4
30907: ARRAY
30908: PUSH
30909: LD_VAR 0 2
30913: PUSH
30914: LD_VAR 0 4
30918: ARRAY
30919: NONEQUAL
30920: IFFALSE 30932
// begin result := false ;
30922: LD_ADDR_VAR 0 3
30926: PUSH
30927: LD_INT 0
30929: ST_TO_ADDR
// break ;
30930: GO 30934
// end ;
30932: GO 30895
30934: POP
30935: POP
// end ;
30936: LD_VAR 0 3
30940: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
30941: LD_INT 0
30943: PPUSH
30944: PPUSH
30945: PPUSH
// pom := GetBase ( fac ) ;
30946: LD_ADDR_VAR 0 5
30950: PUSH
30951: LD_VAR 0 1
30955: PPUSH
30956: CALL_OW 274
30960: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
30961: LD_ADDR_VAR 0 4
30965: PUSH
30966: LD_VAR 0 2
30970: PUSH
30971: LD_INT 1
30973: ARRAY
30974: PPUSH
30975: LD_VAR 0 2
30979: PUSH
30980: LD_INT 2
30982: ARRAY
30983: PPUSH
30984: LD_VAR 0 2
30988: PUSH
30989: LD_INT 3
30991: ARRAY
30992: PPUSH
30993: LD_VAR 0 2
30997: PUSH
30998: LD_INT 4
31000: ARRAY
31001: PPUSH
31002: CALL_OW 449
31006: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31007: LD_ADDR_VAR 0 3
31011: PUSH
31012: LD_VAR 0 5
31016: PPUSH
31017: LD_INT 1
31019: PPUSH
31020: CALL_OW 275
31024: PUSH
31025: LD_VAR 0 4
31029: PUSH
31030: LD_INT 1
31032: ARRAY
31033: GREATEREQUAL
31034: PUSH
31035: LD_VAR 0 5
31039: PPUSH
31040: LD_INT 2
31042: PPUSH
31043: CALL_OW 275
31047: PUSH
31048: LD_VAR 0 4
31052: PUSH
31053: LD_INT 2
31055: ARRAY
31056: GREATEREQUAL
31057: AND
31058: PUSH
31059: LD_VAR 0 5
31063: PPUSH
31064: LD_INT 3
31066: PPUSH
31067: CALL_OW 275
31071: PUSH
31072: LD_VAR 0 4
31076: PUSH
31077: LD_INT 3
31079: ARRAY
31080: GREATEREQUAL
31081: AND
31082: ST_TO_ADDR
// end ;
31083: LD_VAR 0 3
31087: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
31088: LD_INT 0
31090: PPUSH
31091: PPUSH
31092: PPUSH
31093: PPUSH
// pom := GetBase ( building ) ;
31094: LD_ADDR_VAR 0 3
31098: PUSH
31099: LD_VAR 0 1
31103: PPUSH
31104: CALL_OW 274
31108: ST_TO_ADDR
// if not pom then
31109: LD_VAR 0 3
31113: NOT
31114: IFFALSE 31118
// exit ;
31116: GO 31288
// btype := GetBType ( building ) ;
31118: LD_ADDR_VAR 0 5
31122: PUSH
31123: LD_VAR 0 1
31127: PPUSH
31128: CALL_OW 266
31132: ST_TO_ADDR
// if btype = b_armoury then
31133: LD_VAR 0 5
31137: PUSH
31138: LD_INT 4
31140: EQUAL
31141: IFFALSE 31151
// btype := b_barracks ;
31143: LD_ADDR_VAR 0 5
31147: PUSH
31148: LD_INT 5
31150: ST_TO_ADDR
// if btype = b_depot then
31151: LD_VAR 0 5
31155: PUSH
31156: LD_INT 0
31158: EQUAL
31159: IFFALSE 31169
// btype := b_warehouse ;
31161: LD_ADDR_VAR 0 5
31165: PUSH
31166: LD_INT 1
31168: ST_TO_ADDR
// if btype = b_workshop then
31169: LD_VAR 0 5
31173: PUSH
31174: LD_INT 2
31176: EQUAL
31177: IFFALSE 31187
// btype := b_factory ;
31179: LD_ADDR_VAR 0 5
31183: PUSH
31184: LD_INT 3
31186: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31187: LD_ADDR_VAR 0 4
31191: PUSH
31192: LD_VAR 0 5
31196: PPUSH
31197: LD_VAR 0 1
31201: PPUSH
31202: CALL_OW 248
31206: PPUSH
31207: CALL_OW 450
31211: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31212: LD_ADDR_VAR 0 2
31216: PUSH
31217: LD_VAR 0 3
31221: PPUSH
31222: LD_INT 1
31224: PPUSH
31225: CALL_OW 275
31229: PUSH
31230: LD_VAR 0 4
31234: PUSH
31235: LD_INT 1
31237: ARRAY
31238: GREATEREQUAL
31239: PUSH
31240: LD_VAR 0 3
31244: PPUSH
31245: LD_INT 2
31247: PPUSH
31248: CALL_OW 275
31252: PUSH
31253: LD_VAR 0 4
31257: PUSH
31258: LD_INT 2
31260: ARRAY
31261: GREATEREQUAL
31262: AND
31263: PUSH
31264: LD_VAR 0 3
31268: PPUSH
31269: LD_INT 3
31271: PPUSH
31272: CALL_OW 275
31276: PUSH
31277: LD_VAR 0 4
31281: PUSH
31282: LD_INT 3
31284: ARRAY
31285: GREATEREQUAL
31286: AND
31287: ST_TO_ADDR
// end ;
31288: LD_VAR 0 2
31292: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
31293: LD_INT 0
31295: PPUSH
31296: PPUSH
31297: PPUSH
// pom := GetBase ( building ) ;
31298: LD_ADDR_VAR 0 4
31302: PUSH
31303: LD_VAR 0 1
31307: PPUSH
31308: CALL_OW 274
31312: ST_TO_ADDR
// if not pom then
31313: LD_VAR 0 4
31317: NOT
31318: IFFALSE 31322
// exit ;
31320: GO 31423
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31322: LD_ADDR_VAR 0 5
31326: PUSH
31327: LD_VAR 0 2
31331: PPUSH
31332: LD_VAR 0 1
31336: PPUSH
31337: CALL_OW 248
31341: PPUSH
31342: CALL_OW 450
31346: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31347: LD_ADDR_VAR 0 3
31351: PUSH
31352: LD_VAR 0 4
31356: PPUSH
31357: LD_INT 1
31359: PPUSH
31360: CALL_OW 275
31364: PUSH
31365: LD_VAR 0 5
31369: PUSH
31370: LD_INT 1
31372: ARRAY
31373: GREATEREQUAL
31374: PUSH
31375: LD_VAR 0 4
31379: PPUSH
31380: LD_INT 2
31382: PPUSH
31383: CALL_OW 275
31387: PUSH
31388: LD_VAR 0 5
31392: PUSH
31393: LD_INT 2
31395: ARRAY
31396: GREATEREQUAL
31397: AND
31398: PUSH
31399: LD_VAR 0 4
31403: PPUSH
31404: LD_INT 3
31406: PPUSH
31407: CALL_OW 275
31411: PUSH
31412: LD_VAR 0 5
31416: PUSH
31417: LD_INT 3
31419: ARRAY
31420: GREATEREQUAL
31421: AND
31422: ST_TO_ADDR
// end ;
31423: LD_VAR 0 3
31427: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
31428: LD_INT 0
31430: PPUSH
31431: PPUSH
31432: PPUSH
31433: PPUSH
31434: PPUSH
31435: PPUSH
31436: PPUSH
31437: PPUSH
31438: PPUSH
31439: PPUSH
31440: PPUSH
// result := false ;
31441: LD_ADDR_VAR 0 8
31445: PUSH
31446: LD_INT 0
31448: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
31449: LD_VAR 0 5
31453: NOT
31454: PUSH
31455: LD_VAR 0 1
31459: NOT
31460: OR
31461: PUSH
31462: LD_VAR 0 2
31466: NOT
31467: OR
31468: PUSH
31469: LD_VAR 0 3
31473: NOT
31474: OR
31475: IFFALSE 31479
// exit ;
31477: GO 32293
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
31479: LD_ADDR_VAR 0 14
31483: PUSH
31484: LD_VAR 0 1
31488: PPUSH
31489: LD_VAR 0 2
31493: PPUSH
31494: LD_VAR 0 3
31498: PPUSH
31499: LD_VAR 0 4
31503: PPUSH
31504: LD_VAR 0 5
31508: PUSH
31509: LD_INT 1
31511: ARRAY
31512: PPUSH
31513: CALL_OW 248
31517: PPUSH
31518: LD_INT 0
31520: PPUSH
31521: CALL 33546 0 6
31525: ST_TO_ADDR
// if not hexes then
31526: LD_VAR 0 14
31530: NOT
31531: IFFALSE 31535
// exit ;
31533: GO 32293
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31535: LD_ADDR_VAR 0 17
31539: PUSH
31540: LD_VAR 0 5
31544: PPUSH
31545: LD_INT 22
31547: PUSH
31548: LD_VAR 0 13
31552: PPUSH
31553: CALL_OW 255
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: PUSH
31562: LD_INT 2
31564: PUSH
31565: LD_INT 30
31567: PUSH
31568: LD_INT 0
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 30
31577: PUSH
31578: LD_INT 1
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: LIST
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PPUSH
31594: CALL_OW 72
31598: ST_TO_ADDR
// for i = 1 to hexes do
31599: LD_ADDR_VAR 0 9
31603: PUSH
31604: DOUBLE
31605: LD_INT 1
31607: DEC
31608: ST_TO_ADDR
31609: LD_VAR 0 14
31613: PUSH
31614: FOR_TO
31615: IFFALSE 32291
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31617: LD_ADDR_VAR 0 13
31621: PUSH
31622: LD_VAR 0 14
31626: PUSH
31627: LD_VAR 0 9
31631: ARRAY
31632: PUSH
31633: LD_INT 1
31635: ARRAY
31636: PPUSH
31637: LD_VAR 0 14
31641: PUSH
31642: LD_VAR 0 9
31646: ARRAY
31647: PUSH
31648: LD_INT 2
31650: ARRAY
31651: PPUSH
31652: CALL_OW 428
31656: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
31657: LD_VAR 0 14
31661: PUSH
31662: LD_VAR 0 9
31666: ARRAY
31667: PUSH
31668: LD_INT 1
31670: ARRAY
31671: PPUSH
31672: LD_VAR 0 14
31676: PUSH
31677: LD_VAR 0 9
31681: ARRAY
31682: PUSH
31683: LD_INT 2
31685: ARRAY
31686: PPUSH
31687: CALL_OW 351
31691: PUSH
31692: LD_VAR 0 14
31696: PUSH
31697: LD_VAR 0 9
31701: ARRAY
31702: PUSH
31703: LD_INT 1
31705: ARRAY
31706: PPUSH
31707: LD_VAR 0 14
31711: PUSH
31712: LD_VAR 0 9
31716: ARRAY
31717: PUSH
31718: LD_INT 2
31720: ARRAY
31721: PPUSH
31722: CALL_OW 488
31726: NOT
31727: OR
31728: PUSH
31729: LD_VAR 0 13
31733: PPUSH
31734: CALL_OW 247
31738: PUSH
31739: LD_INT 3
31741: EQUAL
31742: OR
31743: IFFALSE 31749
// exit ;
31745: POP
31746: POP
31747: GO 32293
// if not tmp then
31749: LD_VAR 0 13
31753: NOT
31754: IFFALSE 31758
// continue ;
31756: GO 31614
// result := true ;
31758: LD_ADDR_VAR 0 8
31762: PUSH
31763: LD_INT 1
31765: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
31766: LD_VAR 0 6
31770: PUSH
31771: LD_VAR 0 13
31775: PPUSH
31776: CALL_OW 247
31780: PUSH
31781: LD_INT 2
31783: EQUAL
31784: AND
31785: PUSH
31786: LD_VAR 0 13
31790: PPUSH
31791: CALL_OW 263
31795: PUSH
31796: LD_INT 1
31798: EQUAL
31799: AND
31800: IFFALSE 31964
// begin if IsDrivenBy ( tmp ) then
31802: LD_VAR 0 13
31806: PPUSH
31807: CALL_OW 311
31811: IFFALSE 31815
// continue ;
31813: GO 31614
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
31815: LD_VAR 0 6
31819: PPUSH
31820: LD_INT 3
31822: PUSH
31823: LD_INT 60
31825: PUSH
31826: EMPTY
31827: LIST
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: LD_INT 3
31835: PUSH
31836: LD_INT 55
31838: PUSH
31839: EMPTY
31840: LIST
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PPUSH
31850: CALL_OW 72
31854: IFFALSE 31962
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
31856: LD_ADDR_VAR 0 18
31860: PUSH
31861: LD_VAR 0 6
31865: PPUSH
31866: LD_INT 3
31868: PUSH
31869: LD_INT 60
31871: PUSH
31872: EMPTY
31873: LIST
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 3
31881: PUSH
31882: LD_INT 55
31884: PUSH
31885: EMPTY
31886: LIST
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PPUSH
31896: CALL_OW 72
31900: PUSH
31901: LD_INT 1
31903: ARRAY
31904: ST_TO_ADDR
// if IsInUnit ( driver ) then
31905: LD_VAR 0 18
31909: PPUSH
31910: CALL_OW 310
31914: IFFALSE 31925
// ComExit ( driver ) ;
31916: LD_VAR 0 18
31920: PPUSH
31921: CALL 57338 0 1
// AddComEnterUnit ( driver , tmp ) ;
31925: LD_VAR 0 18
31929: PPUSH
31930: LD_VAR 0 13
31934: PPUSH
31935: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
31939: LD_VAR 0 18
31943: PPUSH
31944: LD_VAR 0 7
31948: PPUSH
31949: CALL_OW 173
// AddComExitVehicle ( driver ) ;
31953: LD_VAR 0 18
31957: PPUSH
31958: CALL_OW 181
// end ; continue ;
31962: GO 31614
// end ; if not cleaners or not tmp in cleaners then
31964: LD_VAR 0 6
31968: NOT
31969: PUSH
31970: LD_VAR 0 13
31974: PUSH
31975: LD_VAR 0 6
31979: IN
31980: NOT
31981: OR
31982: IFFALSE 32289
// begin if dep then
31984: LD_VAR 0 17
31988: IFFALSE 32124
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
31990: LD_ADDR_VAR 0 16
31994: PUSH
31995: LD_VAR 0 17
31999: PUSH
32000: LD_INT 1
32002: ARRAY
32003: PPUSH
32004: CALL_OW 250
32008: PPUSH
32009: LD_VAR 0 17
32013: PUSH
32014: LD_INT 1
32016: ARRAY
32017: PPUSH
32018: CALL_OW 254
32022: PPUSH
32023: LD_INT 5
32025: PPUSH
32026: CALL_OW 272
32030: PUSH
32031: LD_VAR 0 17
32035: PUSH
32036: LD_INT 1
32038: ARRAY
32039: PPUSH
32040: CALL_OW 251
32044: PPUSH
32045: LD_VAR 0 17
32049: PUSH
32050: LD_INT 1
32052: ARRAY
32053: PPUSH
32054: CALL_OW 254
32058: PPUSH
32059: LD_INT 5
32061: PPUSH
32062: CALL_OW 273
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
32071: LD_VAR 0 16
32075: PUSH
32076: LD_INT 1
32078: ARRAY
32079: PPUSH
32080: LD_VAR 0 16
32084: PUSH
32085: LD_INT 2
32087: ARRAY
32088: PPUSH
32089: CALL_OW 488
32093: IFFALSE 32124
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
32095: LD_VAR 0 13
32099: PPUSH
32100: LD_VAR 0 16
32104: PUSH
32105: LD_INT 1
32107: ARRAY
32108: PPUSH
32109: LD_VAR 0 16
32113: PUSH
32114: LD_INT 2
32116: ARRAY
32117: PPUSH
32118: CALL_OW 111
// continue ;
32122: GO 31614
// end ; end ; r := GetDir ( tmp ) ;
32124: LD_ADDR_VAR 0 15
32128: PUSH
32129: LD_VAR 0 13
32133: PPUSH
32134: CALL_OW 254
32138: ST_TO_ADDR
// if r = 5 then
32139: LD_VAR 0 15
32143: PUSH
32144: LD_INT 5
32146: EQUAL
32147: IFFALSE 32157
// r := 0 ;
32149: LD_ADDR_VAR 0 15
32153: PUSH
32154: LD_INT 0
32156: ST_TO_ADDR
// for j = r to 5 do
32157: LD_ADDR_VAR 0 10
32161: PUSH
32162: DOUBLE
32163: LD_VAR 0 15
32167: DEC
32168: ST_TO_ADDR
32169: LD_INT 5
32171: PUSH
32172: FOR_TO
32173: IFFALSE 32287
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
32175: LD_ADDR_VAR 0 11
32179: PUSH
32180: LD_VAR 0 13
32184: PPUSH
32185: CALL_OW 250
32189: PPUSH
32190: LD_VAR 0 10
32194: PPUSH
32195: LD_INT 2
32197: PPUSH
32198: CALL_OW 272
32202: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
32203: LD_ADDR_VAR 0 12
32207: PUSH
32208: LD_VAR 0 13
32212: PPUSH
32213: CALL_OW 251
32217: PPUSH
32218: LD_VAR 0 10
32222: PPUSH
32223: LD_INT 2
32225: PPUSH
32226: CALL_OW 273
32230: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
32231: LD_VAR 0 11
32235: PPUSH
32236: LD_VAR 0 12
32240: PPUSH
32241: CALL_OW 488
32245: PUSH
32246: LD_VAR 0 11
32250: PPUSH
32251: LD_VAR 0 12
32255: PPUSH
32256: CALL_OW 428
32260: NOT
32261: AND
32262: IFFALSE 32285
// begin ComMoveXY ( tmp , _x , _y ) ;
32264: LD_VAR 0 13
32268: PPUSH
32269: LD_VAR 0 11
32273: PPUSH
32274: LD_VAR 0 12
32278: PPUSH
32279: CALL_OW 111
// break ;
32283: GO 32287
// end ; end ;
32285: GO 32172
32287: POP
32288: POP
// end ; end ;
32289: GO 31614
32291: POP
32292: POP
// end ;
32293: LD_VAR 0 8
32297: RET
// export function BuildingTechInvented ( side , btype ) ; begin
32298: LD_INT 0
32300: PPUSH
// result := true ;
32301: LD_ADDR_VAR 0 3
32305: PUSH
32306: LD_INT 1
32308: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
32309: LD_VAR 0 2
32313: PUSH
32314: LD_INT 24
32316: DOUBLE
32317: EQUAL
32318: IFTRUE 32328
32320: LD_INT 33
32322: DOUBLE
32323: EQUAL
32324: IFTRUE 32328
32326: GO 32353
32328: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
32329: LD_ADDR_VAR 0 3
32333: PUSH
32334: LD_INT 32
32336: PPUSH
32337: LD_VAR 0 1
32341: PPUSH
32342: CALL_OW 321
32346: PUSH
32347: LD_INT 2
32349: EQUAL
32350: ST_TO_ADDR
32351: GO 32669
32353: LD_INT 20
32355: DOUBLE
32356: EQUAL
32357: IFTRUE 32361
32359: GO 32386
32361: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
32362: LD_ADDR_VAR 0 3
32366: PUSH
32367: LD_INT 6
32369: PPUSH
32370: LD_VAR 0 1
32374: PPUSH
32375: CALL_OW 321
32379: PUSH
32380: LD_INT 2
32382: EQUAL
32383: ST_TO_ADDR
32384: GO 32669
32386: LD_INT 22
32388: DOUBLE
32389: EQUAL
32390: IFTRUE 32400
32392: LD_INT 36
32394: DOUBLE
32395: EQUAL
32396: IFTRUE 32400
32398: GO 32425
32400: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
32401: LD_ADDR_VAR 0 3
32405: PUSH
32406: LD_INT 15
32408: PPUSH
32409: LD_VAR 0 1
32413: PPUSH
32414: CALL_OW 321
32418: PUSH
32419: LD_INT 2
32421: EQUAL
32422: ST_TO_ADDR
32423: GO 32669
32425: LD_INT 30
32427: DOUBLE
32428: EQUAL
32429: IFTRUE 32433
32431: GO 32458
32433: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
32434: LD_ADDR_VAR 0 3
32438: PUSH
32439: LD_INT 20
32441: PPUSH
32442: LD_VAR 0 1
32446: PPUSH
32447: CALL_OW 321
32451: PUSH
32452: LD_INT 2
32454: EQUAL
32455: ST_TO_ADDR
32456: GO 32669
32458: LD_INT 28
32460: DOUBLE
32461: EQUAL
32462: IFTRUE 32472
32464: LD_INT 21
32466: DOUBLE
32467: EQUAL
32468: IFTRUE 32472
32470: GO 32497
32472: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
32473: LD_ADDR_VAR 0 3
32477: PUSH
32478: LD_INT 21
32480: PPUSH
32481: LD_VAR 0 1
32485: PPUSH
32486: CALL_OW 321
32490: PUSH
32491: LD_INT 2
32493: EQUAL
32494: ST_TO_ADDR
32495: GO 32669
32497: LD_INT 16
32499: DOUBLE
32500: EQUAL
32501: IFTRUE 32505
32503: GO 32530
32505: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
32506: LD_ADDR_VAR 0 3
32510: PUSH
32511: LD_INT 84
32513: PPUSH
32514: LD_VAR 0 1
32518: PPUSH
32519: CALL_OW 321
32523: PUSH
32524: LD_INT 2
32526: EQUAL
32527: ST_TO_ADDR
32528: GO 32669
32530: LD_INT 19
32532: DOUBLE
32533: EQUAL
32534: IFTRUE 32544
32536: LD_INT 23
32538: DOUBLE
32539: EQUAL
32540: IFTRUE 32544
32542: GO 32569
32544: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
32545: LD_ADDR_VAR 0 3
32549: PUSH
32550: LD_INT 83
32552: PPUSH
32553: LD_VAR 0 1
32557: PPUSH
32558: CALL_OW 321
32562: PUSH
32563: LD_INT 2
32565: EQUAL
32566: ST_TO_ADDR
32567: GO 32669
32569: LD_INT 17
32571: DOUBLE
32572: EQUAL
32573: IFTRUE 32577
32575: GO 32602
32577: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
32578: LD_ADDR_VAR 0 3
32582: PUSH
32583: LD_INT 39
32585: PPUSH
32586: LD_VAR 0 1
32590: PPUSH
32591: CALL_OW 321
32595: PUSH
32596: LD_INT 2
32598: EQUAL
32599: ST_TO_ADDR
32600: GO 32669
32602: LD_INT 18
32604: DOUBLE
32605: EQUAL
32606: IFTRUE 32610
32608: GO 32635
32610: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
32611: LD_ADDR_VAR 0 3
32615: PUSH
32616: LD_INT 40
32618: PPUSH
32619: LD_VAR 0 1
32623: PPUSH
32624: CALL_OW 321
32628: PUSH
32629: LD_INT 2
32631: EQUAL
32632: ST_TO_ADDR
32633: GO 32669
32635: LD_INT 27
32637: DOUBLE
32638: EQUAL
32639: IFTRUE 32643
32641: GO 32668
32643: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
32644: LD_ADDR_VAR 0 3
32648: PUSH
32649: LD_INT 35
32651: PPUSH
32652: LD_VAR 0 1
32656: PPUSH
32657: CALL_OW 321
32661: PUSH
32662: LD_INT 2
32664: EQUAL
32665: ST_TO_ADDR
32666: GO 32669
32668: POP
// end ;
32669: LD_VAR 0 3
32673: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
32674: LD_INT 0
32676: PPUSH
32677: PPUSH
32678: PPUSH
32679: PPUSH
32680: PPUSH
32681: PPUSH
32682: PPUSH
32683: PPUSH
32684: PPUSH
32685: PPUSH
32686: PPUSH
// result := false ;
32687: LD_ADDR_VAR 0 6
32691: PUSH
32692: LD_INT 0
32694: ST_TO_ADDR
// if btype = b_depot then
32695: LD_VAR 0 2
32699: PUSH
32700: LD_INT 0
32702: EQUAL
32703: IFFALSE 32715
// begin result := true ;
32705: LD_ADDR_VAR 0 6
32709: PUSH
32710: LD_INT 1
32712: ST_TO_ADDR
// exit ;
32713: GO 33541
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
32715: LD_VAR 0 1
32719: NOT
32720: PUSH
32721: LD_VAR 0 1
32725: PPUSH
32726: CALL_OW 266
32730: PUSH
32731: LD_INT 0
32733: PUSH
32734: LD_INT 1
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: IN
32741: NOT
32742: OR
32743: PUSH
32744: LD_VAR 0 2
32748: NOT
32749: OR
32750: PUSH
32751: LD_VAR 0 5
32755: PUSH
32756: LD_INT 0
32758: PUSH
32759: LD_INT 1
32761: PUSH
32762: LD_INT 2
32764: PUSH
32765: LD_INT 3
32767: PUSH
32768: LD_INT 4
32770: PUSH
32771: LD_INT 5
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: LIST
32778: LIST
32779: LIST
32780: LIST
32781: IN
32782: NOT
32783: OR
32784: PUSH
32785: LD_VAR 0 3
32789: PPUSH
32790: LD_VAR 0 4
32794: PPUSH
32795: CALL_OW 488
32799: NOT
32800: OR
32801: IFFALSE 32805
// exit ;
32803: GO 33541
// side := GetSide ( depot ) ;
32805: LD_ADDR_VAR 0 9
32809: PUSH
32810: LD_VAR 0 1
32814: PPUSH
32815: CALL_OW 255
32819: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
32820: LD_VAR 0 9
32824: PPUSH
32825: LD_VAR 0 2
32829: PPUSH
32830: CALL 32298 0 2
32834: NOT
32835: IFFALSE 32839
// exit ;
32837: GO 33541
// pom := GetBase ( depot ) ;
32839: LD_ADDR_VAR 0 10
32843: PUSH
32844: LD_VAR 0 1
32848: PPUSH
32849: CALL_OW 274
32853: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
32854: LD_ADDR_VAR 0 11
32858: PUSH
32859: LD_VAR 0 2
32863: PPUSH
32864: LD_VAR 0 1
32868: PPUSH
32869: CALL_OW 248
32873: PPUSH
32874: CALL_OW 450
32878: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
32879: LD_VAR 0 10
32883: PPUSH
32884: LD_INT 1
32886: PPUSH
32887: CALL_OW 275
32891: PUSH
32892: LD_VAR 0 11
32896: PUSH
32897: LD_INT 1
32899: ARRAY
32900: GREATEREQUAL
32901: PUSH
32902: LD_VAR 0 10
32906: PPUSH
32907: LD_INT 2
32909: PPUSH
32910: CALL_OW 275
32914: PUSH
32915: LD_VAR 0 11
32919: PUSH
32920: LD_INT 2
32922: ARRAY
32923: GREATEREQUAL
32924: AND
32925: PUSH
32926: LD_VAR 0 10
32930: PPUSH
32931: LD_INT 3
32933: PPUSH
32934: CALL_OW 275
32938: PUSH
32939: LD_VAR 0 11
32943: PUSH
32944: LD_INT 3
32946: ARRAY
32947: GREATEREQUAL
32948: AND
32949: NOT
32950: IFFALSE 32954
// exit ;
32952: GO 33541
// if GetBType ( depot ) = b_depot then
32954: LD_VAR 0 1
32958: PPUSH
32959: CALL_OW 266
32963: PUSH
32964: LD_INT 0
32966: EQUAL
32967: IFFALSE 32979
// dist := 28 else
32969: LD_ADDR_VAR 0 14
32973: PUSH
32974: LD_INT 28
32976: ST_TO_ADDR
32977: GO 32987
// dist := 36 ;
32979: LD_ADDR_VAR 0 14
32983: PUSH
32984: LD_INT 36
32986: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
32987: LD_VAR 0 1
32991: PPUSH
32992: LD_VAR 0 3
32996: PPUSH
32997: LD_VAR 0 4
33001: PPUSH
33002: CALL_OW 297
33006: PUSH
33007: LD_VAR 0 14
33011: GREATER
33012: IFFALSE 33016
// exit ;
33014: GO 33541
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
33016: LD_ADDR_VAR 0 12
33020: PUSH
33021: LD_VAR 0 2
33025: PPUSH
33026: LD_VAR 0 3
33030: PPUSH
33031: LD_VAR 0 4
33035: PPUSH
33036: LD_VAR 0 5
33040: PPUSH
33041: LD_VAR 0 1
33045: PPUSH
33046: CALL_OW 248
33050: PPUSH
33051: LD_INT 0
33053: PPUSH
33054: CALL 33546 0 6
33058: ST_TO_ADDR
// if not hexes then
33059: LD_VAR 0 12
33063: NOT
33064: IFFALSE 33068
// exit ;
33066: GO 33541
// hex := GetHexInfo ( x , y ) ;
33068: LD_ADDR_VAR 0 15
33072: PUSH
33073: LD_VAR 0 3
33077: PPUSH
33078: LD_VAR 0 4
33082: PPUSH
33083: CALL_OW 546
33087: ST_TO_ADDR
// if hex [ 1 ] then
33088: LD_VAR 0 15
33092: PUSH
33093: LD_INT 1
33095: ARRAY
33096: IFFALSE 33100
// exit ;
33098: GO 33541
// height := hex [ 2 ] ;
33100: LD_ADDR_VAR 0 13
33104: PUSH
33105: LD_VAR 0 15
33109: PUSH
33110: LD_INT 2
33112: ARRAY
33113: ST_TO_ADDR
// for i = 1 to hexes do
33114: LD_ADDR_VAR 0 7
33118: PUSH
33119: DOUBLE
33120: LD_INT 1
33122: DEC
33123: ST_TO_ADDR
33124: LD_VAR 0 12
33128: PUSH
33129: FOR_TO
33130: IFFALSE 33460
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
33132: LD_VAR 0 12
33136: PUSH
33137: LD_VAR 0 7
33141: ARRAY
33142: PUSH
33143: LD_INT 1
33145: ARRAY
33146: PPUSH
33147: LD_VAR 0 12
33151: PUSH
33152: LD_VAR 0 7
33156: ARRAY
33157: PUSH
33158: LD_INT 2
33160: ARRAY
33161: PPUSH
33162: CALL_OW 488
33166: NOT
33167: PUSH
33168: LD_VAR 0 12
33172: PUSH
33173: LD_VAR 0 7
33177: ARRAY
33178: PUSH
33179: LD_INT 1
33181: ARRAY
33182: PPUSH
33183: LD_VAR 0 12
33187: PUSH
33188: LD_VAR 0 7
33192: ARRAY
33193: PUSH
33194: LD_INT 2
33196: ARRAY
33197: PPUSH
33198: CALL_OW 428
33202: PUSH
33203: LD_INT 0
33205: GREATER
33206: OR
33207: PUSH
33208: LD_VAR 0 12
33212: PUSH
33213: LD_VAR 0 7
33217: ARRAY
33218: PUSH
33219: LD_INT 1
33221: ARRAY
33222: PPUSH
33223: LD_VAR 0 12
33227: PUSH
33228: LD_VAR 0 7
33232: ARRAY
33233: PUSH
33234: LD_INT 2
33236: ARRAY
33237: PPUSH
33238: CALL_OW 351
33242: OR
33243: IFFALSE 33249
// exit ;
33245: POP
33246: POP
33247: GO 33541
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33249: LD_ADDR_VAR 0 8
33253: PUSH
33254: LD_VAR 0 12
33258: PUSH
33259: LD_VAR 0 7
33263: ARRAY
33264: PUSH
33265: LD_INT 1
33267: ARRAY
33268: PPUSH
33269: LD_VAR 0 12
33273: PUSH
33274: LD_VAR 0 7
33278: ARRAY
33279: PUSH
33280: LD_INT 2
33282: ARRAY
33283: PPUSH
33284: CALL_OW 546
33288: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
33289: LD_VAR 0 8
33293: PUSH
33294: LD_INT 1
33296: ARRAY
33297: PUSH
33298: LD_VAR 0 8
33302: PUSH
33303: LD_INT 2
33305: ARRAY
33306: PUSH
33307: LD_VAR 0 13
33311: PUSH
33312: LD_INT 2
33314: PLUS
33315: GREATER
33316: OR
33317: PUSH
33318: LD_VAR 0 8
33322: PUSH
33323: LD_INT 2
33325: ARRAY
33326: PUSH
33327: LD_VAR 0 13
33331: PUSH
33332: LD_INT 2
33334: MINUS
33335: LESS
33336: OR
33337: PUSH
33338: LD_VAR 0 8
33342: PUSH
33343: LD_INT 3
33345: ARRAY
33346: PUSH
33347: LD_INT 0
33349: PUSH
33350: LD_INT 8
33352: PUSH
33353: LD_INT 9
33355: PUSH
33356: LD_INT 10
33358: PUSH
33359: LD_INT 11
33361: PUSH
33362: LD_INT 12
33364: PUSH
33365: LD_INT 13
33367: PUSH
33368: LD_INT 16
33370: PUSH
33371: LD_INT 17
33373: PUSH
33374: LD_INT 18
33376: PUSH
33377: LD_INT 19
33379: PUSH
33380: LD_INT 20
33382: PUSH
33383: LD_INT 21
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: IN
33401: NOT
33402: OR
33403: PUSH
33404: LD_VAR 0 8
33408: PUSH
33409: LD_INT 5
33411: ARRAY
33412: NOT
33413: OR
33414: PUSH
33415: LD_VAR 0 8
33419: PUSH
33420: LD_INT 6
33422: ARRAY
33423: PUSH
33424: LD_INT 1
33426: PUSH
33427: LD_INT 2
33429: PUSH
33430: LD_INT 7
33432: PUSH
33433: LD_INT 9
33435: PUSH
33436: LD_INT 10
33438: PUSH
33439: LD_INT 11
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: IN
33450: NOT
33451: OR
33452: IFFALSE 33458
// exit ;
33454: POP
33455: POP
33456: GO 33541
// end ;
33458: GO 33129
33460: POP
33461: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
33462: LD_VAR 0 9
33466: PPUSH
33467: LD_VAR 0 3
33471: PPUSH
33472: LD_VAR 0 4
33476: PPUSH
33477: LD_INT 20
33479: PPUSH
33480: CALL 25464 0 4
33484: PUSH
33485: LD_INT 4
33487: ARRAY
33488: IFFALSE 33492
// exit ;
33490: GO 33541
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
33492: LD_VAR 0 2
33496: PUSH
33497: LD_INT 29
33499: PUSH
33500: LD_INT 30
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: IN
33507: PUSH
33508: LD_VAR 0 3
33512: PPUSH
33513: LD_VAR 0 4
33517: PPUSH
33518: LD_VAR 0 9
33522: PPUSH
33523: CALL_OW 440
33527: NOT
33528: AND
33529: IFFALSE 33533
// exit ;
33531: GO 33541
// result := true ;
33533: LD_ADDR_VAR 0 6
33537: PUSH
33538: LD_INT 1
33540: ST_TO_ADDR
// end ;
33541: LD_VAR 0 6
33545: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
33546: LD_INT 0
33548: PPUSH
33549: PPUSH
33550: PPUSH
33551: PPUSH
33552: PPUSH
33553: PPUSH
33554: PPUSH
33555: PPUSH
33556: PPUSH
33557: PPUSH
33558: PPUSH
33559: PPUSH
33560: PPUSH
33561: PPUSH
33562: PPUSH
33563: PPUSH
33564: PPUSH
33565: PPUSH
33566: PPUSH
33567: PPUSH
33568: PPUSH
33569: PPUSH
33570: PPUSH
33571: PPUSH
33572: PPUSH
33573: PPUSH
33574: PPUSH
33575: PPUSH
33576: PPUSH
33577: PPUSH
33578: PPUSH
33579: PPUSH
33580: PPUSH
33581: PPUSH
33582: PPUSH
33583: PPUSH
33584: PPUSH
33585: PPUSH
33586: PPUSH
33587: PPUSH
33588: PPUSH
33589: PPUSH
33590: PPUSH
33591: PPUSH
33592: PPUSH
33593: PPUSH
33594: PPUSH
33595: PPUSH
33596: PPUSH
33597: PPUSH
33598: PPUSH
33599: PPUSH
33600: PPUSH
33601: PPUSH
33602: PPUSH
33603: PPUSH
33604: PPUSH
33605: PPUSH
// result = [ ] ;
33606: LD_ADDR_VAR 0 7
33610: PUSH
33611: EMPTY
33612: ST_TO_ADDR
// temp_list = [ ] ;
33613: LD_ADDR_VAR 0 9
33617: PUSH
33618: EMPTY
33619: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
33620: LD_VAR 0 4
33624: PUSH
33625: LD_INT 0
33627: PUSH
33628: LD_INT 1
33630: PUSH
33631: LD_INT 2
33633: PUSH
33634: LD_INT 3
33636: PUSH
33637: LD_INT 4
33639: PUSH
33640: LD_INT 5
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: IN
33651: NOT
33652: PUSH
33653: LD_VAR 0 1
33657: PUSH
33658: LD_INT 0
33660: PUSH
33661: LD_INT 1
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: IN
33668: PUSH
33669: LD_VAR 0 5
33673: PUSH
33674: LD_INT 1
33676: PUSH
33677: LD_INT 2
33679: PUSH
33680: LD_INT 3
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: LIST
33687: IN
33688: NOT
33689: AND
33690: OR
33691: IFFALSE 33695
// exit ;
33693: GO 52086
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
33695: LD_VAR 0 1
33699: PUSH
33700: LD_INT 6
33702: PUSH
33703: LD_INT 7
33705: PUSH
33706: LD_INT 8
33708: PUSH
33709: LD_INT 13
33711: PUSH
33712: LD_INT 12
33714: PUSH
33715: LD_INT 15
33717: PUSH
33718: LD_INT 11
33720: PUSH
33721: LD_INT 14
33723: PUSH
33724: LD_INT 10
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: IN
33738: IFFALSE 33748
// btype = b_lab ;
33740: LD_ADDR_VAR 0 1
33744: PUSH
33745: LD_INT 6
33747: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
33748: LD_VAR 0 6
33752: PUSH
33753: LD_INT 0
33755: PUSH
33756: LD_INT 1
33758: PUSH
33759: LD_INT 2
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: LIST
33766: IN
33767: NOT
33768: PUSH
33769: LD_VAR 0 1
33773: PUSH
33774: LD_INT 0
33776: PUSH
33777: LD_INT 1
33779: PUSH
33780: LD_INT 2
33782: PUSH
33783: LD_INT 3
33785: PUSH
33786: LD_INT 6
33788: PUSH
33789: LD_INT 36
33791: PUSH
33792: LD_INT 4
33794: PUSH
33795: LD_INT 5
33797: PUSH
33798: LD_INT 31
33800: PUSH
33801: LD_INT 32
33803: PUSH
33804: LD_INT 33
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: LIST
33815: LIST
33816: LIST
33817: LIST
33818: LIST
33819: IN
33820: NOT
33821: PUSH
33822: LD_VAR 0 6
33826: PUSH
33827: LD_INT 1
33829: EQUAL
33830: AND
33831: OR
33832: PUSH
33833: LD_VAR 0 1
33837: PUSH
33838: LD_INT 2
33840: PUSH
33841: LD_INT 3
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: IN
33848: NOT
33849: PUSH
33850: LD_VAR 0 6
33854: PUSH
33855: LD_INT 2
33857: EQUAL
33858: AND
33859: OR
33860: IFFALSE 33870
// mode = 0 ;
33862: LD_ADDR_VAR 0 6
33866: PUSH
33867: LD_INT 0
33869: ST_TO_ADDR
// case mode of 0 :
33870: LD_VAR 0 6
33874: PUSH
33875: LD_INT 0
33877: DOUBLE
33878: EQUAL
33879: IFTRUE 33883
33881: GO 45336
33883: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33884: LD_ADDR_VAR 0 11
33888: PUSH
33889: LD_INT 0
33891: PUSH
33892: LD_INT 0
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: LD_INT 0
33901: PUSH
33902: LD_INT 1
33904: NEG
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: PUSH
33910: LD_INT 1
33912: PUSH
33913: LD_INT 0
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: LD_INT 1
33922: PUSH
33923: LD_INT 1
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 0
33932: PUSH
33933: LD_INT 1
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: PUSH
33940: LD_INT 1
33942: NEG
33943: PUSH
33944: LD_INT 0
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PUSH
33951: LD_INT 1
33953: NEG
33954: PUSH
33955: LD_INT 1
33957: NEG
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 1
33965: NEG
33966: PUSH
33967: LD_INT 2
33969: NEG
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: PUSH
33975: LD_INT 0
33977: PUSH
33978: LD_INT 2
33980: NEG
33981: PUSH
33982: EMPTY
33983: LIST
33984: LIST
33985: PUSH
33986: LD_INT 1
33988: PUSH
33989: LD_INT 1
33991: NEG
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: PUSH
33997: LD_INT 1
33999: PUSH
34000: LD_INT 2
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: PUSH
34007: LD_INT 0
34009: PUSH
34010: LD_INT 2
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: LD_INT 1
34019: NEG
34020: PUSH
34021: LD_INT 1
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 1
34030: PUSH
34031: LD_INT 3
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: PUSH
34038: LD_INT 0
34040: PUSH
34041: LD_INT 3
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PUSH
34048: LD_INT 1
34050: NEG
34051: PUSH
34052: LD_INT 2
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: LIST
34063: LIST
34064: LIST
34065: LIST
34066: LIST
34067: LIST
34068: LIST
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34077: LD_ADDR_VAR 0 12
34081: PUSH
34082: LD_INT 0
34084: PUSH
34085: LD_INT 0
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 0
34094: PUSH
34095: LD_INT 1
34097: NEG
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PUSH
34103: LD_INT 1
34105: PUSH
34106: LD_INT 0
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: PUSH
34113: LD_INT 1
34115: PUSH
34116: LD_INT 1
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_INT 0
34125: PUSH
34126: LD_INT 1
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PUSH
34133: LD_INT 1
34135: NEG
34136: PUSH
34137: LD_INT 0
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: LD_INT 1
34146: NEG
34147: PUSH
34148: LD_INT 1
34150: NEG
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: PUSH
34156: LD_INT 1
34158: PUSH
34159: LD_INT 1
34161: NEG
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: PUSH
34167: LD_INT 2
34169: PUSH
34170: LD_INT 0
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: PUSH
34177: LD_INT 2
34179: PUSH
34180: LD_INT 1
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 1
34189: NEG
34190: PUSH
34191: LD_INT 1
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: PUSH
34198: LD_INT 2
34200: NEG
34201: PUSH
34202: LD_INT 0
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: PUSH
34209: LD_INT 2
34211: NEG
34212: PUSH
34213: LD_INT 1
34215: NEG
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: PUSH
34221: LD_INT 2
34223: NEG
34224: PUSH
34225: LD_INT 1
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: PUSH
34232: LD_INT 3
34234: NEG
34235: PUSH
34236: LD_INT 0
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: PUSH
34243: LD_INT 3
34245: NEG
34246: PUSH
34247: LD_INT 1
34249: NEG
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34273: LD_ADDR_VAR 0 13
34277: PUSH
34278: LD_INT 0
34280: PUSH
34281: LD_INT 0
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: LD_INT 0
34290: PUSH
34291: LD_INT 1
34293: NEG
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: PUSH
34299: LD_INT 1
34301: PUSH
34302: LD_INT 0
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: PUSH
34309: LD_INT 1
34311: PUSH
34312: LD_INT 1
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_INT 0
34321: PUSH
34322: LD_INT 1
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: PUSH
34329: LD_INT 1
34331: NEG
34332: PUSH
34333: LD_INT 0
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: PUSH
34340: LD_INT 1
34342: NEG
34343: PUSH
34344: LD_INT 1
34346: NEG
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 1
34354: NEG
34355: PUSH
34356: LD_INT 2
34358: NEG
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: LD_INT 2
34366: PUSH
34367: LD_INT 1
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: PUSH
34374: LD_INT 2
34376: PUSH
34377: LD_INT 2
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: PUSH
34384: LD_INT 1
34386: PUSH
34387: LD_INT 2
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: PUSH
34394: LD_INT 2
34396: NEG
34397: PUSH
34398: LD_INT 1
34400: NEG
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: PUSH
34406: LD_INT 2
34408: NEG
34409: PUSH
34410: LD_INT 2
34412: NEG
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: PUSH
34418: LD_INT 2
34420: NEG
34421: PUSH
34422: LD_INT 3
34424: NEG
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PUSH
34430: LD_INT 3
34432: NEG
34433: PUSH
34434: LD_INT 2
34436: NEG
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: LD_INT 3
34444: NEG
34445: PUSH
34446: LD_INT 3
34448: NEG
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34472: LD_ADDR_VAR 0 14
34476: PUSH
34477: LD_INT 0
34479: PUSH
34480: LD_INT 0
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: PUSH
34487: LD_INT 0
34489: PUSH
34490: LD_INT 1
34492: NEG
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: PUSH
34498: LD_INT 1
34500: PUSH
34501: LD_INT 0
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PUSH
34508: LD_INT 1
34510: PUSH
34511: LD_INT 1
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: LD_INT 0
34520: PUSH
34521: LD_INT 1
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PUSH
34528: LD_INT 1
34530: NEG
34531: PUSH
34532: LD_INT 0
34534: PUSH
34535: EMPTY
34536: LIST
34537: LIST
34538: PUSH
34539: LD_INT 1
34541: NEG
34542: PUSH
34543: LD_INT 1
34545: NEG
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 1
34553: NEG
34554: PUSH
34555: LD_INT 2
34557: NEG
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: PUSH
34563: LD_INT 0
34565: PUSH
34566: LD_INT 2
34568: NEG
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: PUSH
34574: LD_INT 1
34576: PUSH
34577: LD_INT 1
34579: NEG
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: LD_INT 1
34587: PUSH
34588: LD_INT 2
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PUSH
34595: LD_INT 0
34597: PUSH
34598: LD_INT 2
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: PUSH
34605: LD_INT 1
34607: NEG
34608: PUSH
34609: LD_INT 1
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: PUSH
34616: LD_INT 1
34618: NEG
34619: PUSH
34620: LD_INT 3
34622: NEG
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 0
34630: PUSH
34631: LD_INT 3
34633: NEG
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 1
34641: PUSH
34642: LD_INT 2
34644: NEG
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: LIST
34654: LIST
34655: LIST
34656: LIST
34657: LIST
34658: LIST
34659: LIST
34660: LIST
34661: LIST
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34668: LD_ADDR_VAR 0 15
34672: PUSH
34673: LD_INT 0
34675: PUSH
34676: LD_INT 0
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 0
34685: PUSH
34686: LD_INT 1
34688: NEG
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 1
34696: PUSH
34697: LD_INT 0
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: LD_INT 1
34706: PUSH
34707: LD_INT 1
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: LD_INT 0
34716: PUSH
34717: LD_INT 1
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: LD_INT 1
34726: NEG
34727: PUSH
34728: LD_INT 0
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 1
34737: NEG
34738: PUSH
34739: LD_INT 1
34741: NEG
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 1
34749: PUSH
34750: LD_INT 1
34752: NEG
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PUSH
34758: LD_INT 2
34760: PUSH
34761: LD_INT 0
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 2
34770: PUSH
34771: LD_INT 1
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 1
34780: NEG
34781: PUSH
34782: LD_INT 1
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: LD_INT 2
34791: NEG
34792: PUSH
34793: LD_INT 0
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PUSH
34800: LD_INT 2
34802: NEG
34803: PUSH
34804: LD_INT 1
34806: NEG
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PUSH
34812: LD_INT 2
34814: PUSH
34815: LD_INT 1
34817: NEG
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: PUSH
34823: LD_INT 3
34825: PUSH
34826: LD_INT 0
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: LD_INT 3
34835: PUSH
34836: LD_INT 1
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34861: LD_ADDR_VAR 0 16
34865: PUSH
34866: LD_INT 0
34868: PUSH
34869: LD_INT 0
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: PUSH
34876: LD_INT 0
34878: PUSH
34879: LD_INT 1
34881: NEG
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: PUSH
34887: LD_INT 1
34889: PUSH
34890: LD_INT 0
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: LD_INT 1
34899: PUSH
34900: LD_INT 1
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: LD_INT 0
34909: PUSH
34910: LD_INT 1
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 1
34919: NEG
34920: PUSH
34921: LD_INT 0
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: LD_INT 1
34930: NEG
34931: PUSH
34932: LD_INT 1
34934: NEG
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: PUSH
34940: LD_INT 1
34942: NEG
34943: PUSH
34944: LD_INT 2
34946: NEG
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PUSH
34952: LD_INT 2
34954: PUSH
34955: LD_INT 1
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: LD_INT 2
34964: PUSH
34965: LD_INT 2
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 1
34974: PUSH
34975: LD_INT 2
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: PUSH
34982: LD_INT 2
34984: NEG
34985: PUSH
34986: LD_INT 1
34988: NEG
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: PUSH
34994: LD_INT 2
34996: NEG
34997: PUSH
34998: LD_INT 2
35000: NEG
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: PUSH
35006: LD_INT 3
35008: PUSH
35009: LD_INT 2
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: PUSH
35016: LD_INT 3
35018: PUSH
35019: LD_INT 3
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: PUSH
35026: LD_INT 2
35028: PUSH
35029: LD_INT 3
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: LIST
35052: LIST
35053: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35054: LD_ADDR_VAR 0 17
35058: PUSH
35059: LD_INT 0
35061: PUSH
35062: LD_INT 0
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: PUSH
35069: LD_INT 0
35071: PUSH
35072: LD_INT 1
35074: NEG
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: PUSH
35080: LD_INT 1
35082: PUSH
35083: LD_INT 0
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: PUSH
35090: LD_INT 1
35092: PUSH
35093: LD_INT 1
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PUSH
35100: LD_INT 0
35102: PUSH
35103: LD_INT 1
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: PUSH
35110: LD_INT 1
35112: NEG
35113: PUSH
35114: LD_INT 0
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PUSH
35121: LD_INT 1
35123: NEG
35124: PUSH
35125: LD_INT 1
35127: NEG
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: LD_INT 1
35135: NEG
35136: PUSH
35137: LD_INT 2
35139: NEG
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: LD_INT 0
35147: PUSH
35148: LD_INT 2
35150: NEG
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: LD_INT 1
35158: PUSH
35159: LD_INT 1
35161: NEG
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: PUSH
35167: LD_INT 2
35169: PUSH
35170: LD_INT 0
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: PUSH
35177: LD_INT 2
35179: PUSH
35180: LD_INT 1
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PUSH
35187: LD_INT 2
35189: PUSH
35190: LD_INT 2
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: PUSH
35197: LD_INT 1
35199: PUSH
35200: LD_INT 2
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PUSH
35207: LD_INT 0
35209: PUSH
35210: LD_INT 2
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: PUSH
35217: LD_INT 1
35219: NEG
35220: PUSH
35221: LD_INT 1
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 2
35230: NEG
35231: PUSH
35232: LD_INT 0
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: LD_INT 2
35241: NEG
35242: PUSH
35243: LD_INT 1
35245: NEG
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PUSH
35251: LD_INT 2
35253: NEG
35254: PUSH
35255: LD_INT 2
35257: NEG
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: LIST
35269: LIST
35270: LIST
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35284: LD_ADDR_VAR 0 18
35288: PUSH
35289: LD_INT 0
35291: PUSH
35292: LD_INT 0
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: PUSH
35299: LD_INT 0
35301: PUSH
35302: LD_INT 1
35304: NEG
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: PUSH
35310: LD_INT 1
35312: PUSH
35313: LD_INT 0
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: PUSH
35320: LD_INT 1
35322: PUSH
35323: LD_INT 1
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: PUSH
35330: LD_INT 0
35332: PUSH
35333: LD_INT 1
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 1
35342: NEG
35343: PUSH
35344: LD_INT 0
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: PUSH
35351: LD_INT 1
35353: NEG
35354: PUSH
35355: LD_INT 1
35357: NEG
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: LD_INT 1
35365: NEG
35366: PUSH
35367: LD_INT 2
35369: NEG
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: PUSH
35375: LD_INT 0
35377: PUSH
35378: LD_INT 2
35380: NEG
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: PUSH
35386: LD_INT 1
35388: PUSH
35389: LD_INT 1
35391: NEG
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: PUSH
35397: LD_INT 2
35399: PUSH
35400: LD_INT 0
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: PUSH
35407: LD_INT 2
35409: PUSH
35410: LD_INT 1
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: PUSH
35417: LD_INT 2
35419: PUSH
35420: LD_INT 2
35422: PUSH
35423: EMPTY
35424: LIST
35425: LIST
35426: PUSH
35427: LD_INT 1
35429: PUSH
35430: LD_INT 2
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: PUSH
35437: LD_INT 0
35439: PUSH
35440: LD_INT 2
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: PUSH
35447: LD_INT 1
35449: NEG
35450: PUSH
35451: LD_INT 1
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: PUSH
35458: LD_INT 2
35460: NEG
35461: PUSH
35462: LD_INT 0
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: LD_INT 2
35471: NEG
35472: PUSH
35473: LD_INT 1
35475: NEG
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: PUSH
35481: LD_INT 2
35483: NEG
35484: PUSH
35485: LD_INT 2
35487: NEG
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: LIST
35497: LIST
35498: LIST
35499: LIST
35500: LIST
35501: LIST
35502: LIST
35503: LIST
35504: LIST
35505: LIST
35506: LIST
35507: LIST
35508: LIST
35509: LIST
35510: LIST
35511: LIST
35512: LIST
35513: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35514: LD_ADDR_VAR 0 19
35518: PUSH
35519: LD_INT 0
35521: PUSH
35522: LD_INT 0
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: PUSH
35529: LD_INT 0
35531: PUSH
35532: LD_INT 1
35534: NEG
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: PUSH
35540: LD_INT 1
35542: PUSH
35543: LD_INT 0
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PUSH
35550: LD_INT 1
35552: PUSH
35553: LD_INT 1
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: PUSH
35560: LD_INT 0
35562: PUSH
35563: LD_INT 1
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: PUSH
35570: LD_INT 1
35572: NEG
35573: PUSH
35574: LD_INT 0
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: LD_INT 1
35583: NEG
35584: PUSH
35585: LD_INT 1
35587: NEG
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: PUSH
35593: LD_INT 1
35595: NEG
35596: PUSH
35597: LD_INT 2
35599: NEG
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: PUSH
35605: LD_INT 0
35607: PUSH
35608: LD_INT 2
35610: NEG
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: LD_INT 1
35618: PUSH
35619: LD_INT 1
35621: NEG
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 2
35629: PUSH
35630: LD_INT 0
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: LD_INT 2
35639: PUSH
35640: LD_INT 1
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: PUSH
35647: LD_INT 2
35649: PUSH
35650: LD_INT 2
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: LD_INT 1
35659: PUSH
35660: LD_INT 2
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: LD_INT 0
35669: PUSH
35670: LD_INT 2
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: PUSH
35677: LD_INT 1
35679: NEG
35680: PUSH
35681: LD_INT 1
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: PUSH
35688: LD_INT 2
35690: NEG
35691: PUSH
35692: LD_INT 0
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: PUSH
35699: LD_INT 2
35701: NEG
35702: PUSH
35703: LD_INT 1
35705: NEG
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: PUSH
35711: LD_INT 2
35713: NEG
35714: PUSH
35715: LD_INT 2
35717: NEG
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: LIST
35727: LIST
35728: LIST
35729: LIST
35730: LIST
35731: LIST
35732: LIST
35733: LIST
35734: LIST
35735: LIST
35736: LIST
35737: LIST
35738: LIST
35739: LIST
35740: LIST
35741: LIST
35742: LIST
35743: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35744: LD_ADDR_VAR 0 20
35748: PUSH
35749: LD_INT 0
35751: PUSH
35752: LD_INT 0
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: PUSH
35759: LD_INT 0
35761: PUSH
35762: LD_INT 1
35764: NEG
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: LD_INT 1
35772: PUSH
35773: LD_INT 0
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: LD_INT 1
35782: PUSH
35783: LD_INT 1
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: PUSH
35790: LD_INT 0
35792: PUSH
35793: LD_INT 1
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PUSH
35800: LD_INT 1
35802: NEG
35803: PUSH
35804: LD_INT 0
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: PUSH
35811: LD_INT 1
35813: NEG
35814: PUSH
35815: LD_INT 1
35817: NEG
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: LD_INT 1
35825: NEG
35826: PUSH
35827: LD_INT 2
35829: NEG
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PUSH
35835: LD_INT 0
35837: PUSH
35838: LD_INT 2
35840: NEG
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: PUSH
35846: LD_INT 1
35848: PUSH
35849: LD_INT 1
35851: NEG
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 2
35859: PUSH
35860: LD_INT 0
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 2
35869: PUSH
35870: LD_INT 1
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PUSH
35877: LD_INT 2
35879: PUSH
35880: LD_INT 2
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: LD_INT 1
35889: PUSH
35890: LD_INT 2
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 0
35899: PUSH
35900: LD_INT 2
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PUSH
35907: LD_INT 1
35909: NEG
35910: PUSH
35911: LD_INT 1
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PUSH
35918: LD_INT 2
35920: NEG
35921: PUSH
35922: LD_INT 0
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: LD_INT 2
35931: NEG
35932: PUSH
35933: LD_INT 1
35935: NEG
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: LD_INT 2
35943: NEG
35944: PUSH
35945: LD_INT 2
35947: NEG
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: PUSH
35953: EMPTY
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: LIST
35959: LIST
35960: LIST
35961: LIST
35962: LIST
35963: LIST
35964: LIST
35965: LIST
35966: LIST
35967: LIST
35968: LIST
35969: LIST
35970: LIST
35971: LIST
35972: LIST
35973: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35974: LD_ADDR_VAR 0 21
35978: PUSH
35979: LD_INT 0
35981: PUSH
35982: LD_INT 0
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: PUSH
35989: LD_INT 0
35991: PUSH
35992: LD_INT 1
35994: NEG
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 1
36002: PUSH
36003: LD_INT 0
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: PUSH
36010: LD_INT 1
36012: PUSH
36013: LD_INT 1
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: LD_INT 0
36022: PUSH
36023: LD_INT 1
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: PUSH
36030: LD_INT 1
36032: NEG
36033: PUSH
36034: LD_INT 0
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: LD_INT 1
36043: NEG
36044: PUSH
36045: LD_INT 1
36047: NEG
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: PUSH
36053: LD_INT 1
36055: NEG
36056: PUSH
36057: LD_INT 2
36059: NEG
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: PUSH
36065: LD_INT 0
36067: PUSH
36068: LD_INT 2
36070: NEG
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: LD_INT 1
36078: PUSH
36079: LD_INT 1
36081: NEG
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 2
36089: PUSH
36090: LD_INT 0
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: LD_INT 2
36099: PUSH
36100: LD_INT 1
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PUSH
36107: LD_INT 2
36109: PUSH
36110: LD_INT 2
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_INT 1
36119: PUSH
36120: LD_INT 2
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: PUSH
36127: LD_INT 0
36129: PUSH
36130: LD_INT 2
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: LD_INT 1
36139: NEG
36140: PUSH
36141: LD_INT 1
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 2
36150: NEG
36151: PUSH
36152: LD_INT 0
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: LD_INT 2
36161: NEG
36162: PUSH
36163: LD_INT 1
36165: NEG
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: LD_INT 2
36173: NEG
36174: PUSH
36175: LD_INT 2
36177: NEG
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: LIST
36197: LIST
36198: LIST
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36204: LD_ADDR_VAR 0 22
36208: PUSH
36209: LD_INT 0
36211: PUSH
36212: LD_INT 0
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: PUSH
36219: LD_INT 0
36221: PUSH
36222: LD_INT 1
36224: NEG
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: LD_INT 1
36232: PUSH
36233: LD_INT 0
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: PUSH
36240: LD_INT 1
36242: PUSH
36243: LD_INT 1
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PUSH
36250: LD_INT 0
36252: PUSH
36253: LD_INT 1
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 1
36262: NEG
36263: PUSH
36264: LD_INT 0
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: LD_INT 1
36273: NEG
36274: PUSH
36275: LD_INT 1
36277: NEG
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: PUSH
36283: LD_INT 1
36285: NEG
36286: PUSH
36287: LD_INT 2
36289: NEG
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PUSH
36295: LD_INT 0
36297: PUSH
36298: LD_INT 2
36300: NEG
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: PUSH
36306: LD_INT 1
36308: PUSH
36309: LD_INT 1
36311: NEG
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: PUSH
36317: LD_INT 2
36319: PUSH
36320: LD_INT 0
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PUSH
36327: LD_INT 2
36329: PUSH
36330: LD_INT 1
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PUSH
36337: LD_INT 2
36339: PUSH
36340: LD_INT 2
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: LD_INT 1
36349: PUSH
36350: LD_INT 2
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 0
36359: PUSH
36360: LD_INT 2
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PUSH
36367: LD_INT 1
36369: NEG
36370: PUSH
36371: LD_INT 1
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 2
36380: NEG
36381: PUSH
36382: LD_INT 0
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 2
36391: NEG
36392: PUSH
36393: LD_INT 1
36395: NEG
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: LD_INT 2
36403: NEG
36404: PUSH
36405: LD_INT 2
36407: NEG
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: LIST
36421: LIST
36422: LIST
36423: LIST
36424: LIST
36425: LIST
36426: LIST
36427: LIST
36428: LIST
36429: LIST
36430: LIST
36431: LIST
36432: LIST
36433: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36434: LD_ADDR_VAR 0 23
36438: PUSH
36439: LD_INT 0
36441: PUSH
36442: LD_INT 0
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PUSH
36449: LD_INT 0
36451: PUSH
36452: LD_INT 1
36454: NEG
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: PUSH
36460: LD_INT 1
36462: PUSH
36463: LD_INT 0
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: PUSH
36470: LD_INT 1
36472: PUSH
36473: LD_INT 1
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: LD_INT 0
36482: PUSH
36483: LD_INT 1
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: PUSH
36490: LD_INT 1
36492: NEG
36493: PUSH
36494: LD_INT 0
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: PUSH
36501: LD_INT 1
36503: NEG
36504: PUSH
36505: LD_INT 1
36507: NEG
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: PUSH
36513: LD_INT 1
36515: NEG
36516: PUSH
36517: LD_INT 2
36519: NEG
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: PUSH
36525: LD_INT 0
36527: PUSH
36528: LD_INT 2
36530: NEG
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: PUSH
36536: LD_INT 1
36538: PUSH
36539: LD_INT 1
36541: NEG
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: LD_INT 2
36549: PUSH
36550: LD_INT 0
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 2
36559: PUSH
36560: LD_INT 1
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: PUSH
36567: LD_INT 2
36569: PUSH
36570: LD_INT 2
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: LD_INT 1
36579: PUSH
36580: LD_INT 2
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: PUSH
36587: LD_INT 0
36589: PUSH
36590: LD_INT 2
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: PUSH
36597: LD_INT 1
36599: NEG
36600: PUSH
36601: LD_INT 1
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: PUSH
36608: LD_INT 2
36610: NEG
36611: PUSH
36612: LD_INT 0
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: LD_INT 2
36621: NEG
36622: PUSH
36623: LD_INT 1
36625: NEG
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: PUSH
36631: LD_INT 2
36633: NEG
36634: PUSH
36635: LD_INT 2
36637: NEG
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: LD_INT 2
36645: NEG
36646: PUSH
36647: LD_INT 3
36649: NEG
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PUSH
36655: LD_INT 1
36657: NEG
36658: PUSH
36659: LD_INT 3
36661: NEG
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: LD_INT 1
36669: PUSH
36670: LD_INT 2
36672: NEG
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PUSH
36678: LD_INT 2
36680: PUSH
36681: LD_INT 1
36683: NEG
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
36714: LD_ADDR_VAR 0 24
36718: PUSH
36719: LD_INT 0
36721: PUSH
36722: LD_INT 0
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PUSH
36729: LD_INT 0
36731: PUSH
36732: LD_INT 1
36734: NEG
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 1
36742: PUSH
36743: LD_INT 0
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 1
36752: PUSH
36753: LD_INT 1
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: PUSH
36760: LD_INT 0
36762: PUSH
36763: LD_INT 1
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 1
36772: NEG
36773: PUSH
36774: LD_INT 0
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PUSH
36781: LD_INT 1
36783: NEG
36784: PUSH
36785: LD_INT 1
36787: NEG
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: PUSH
36793: LD_INT 1
36795: NEG
36796: PUSH
36797: LD_INT 2
36799: NEG
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 0
36807: PUSH
36808: LD_INT 2
36810: NEG
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: LD_INT 1
36818: PUSH
36819: LD_INT 1
36821: NEG
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: LD_INT 2
36829: PUSH
36830: LD_INT 0
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: LD_INT 2
36839: PUSH
36840: LD_INT 1
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: LD_INT 2
36849: PUSH
36850: LD_INT 2
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: LD_INT 1
36859: PUSH
36860: LD_INT 2
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: PUSH
36867: LD_INT 0
36869: PUSH
36870: LD_INT 2
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: PUSH
36877: LD_INT 1
36879: NEG
36880: PUSH
36881: LD_INT 1
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: PUSH
36888: LD_INT 2
36890: NEG
36891: PUSH
36892: LD_INT 0
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PUSH
36899: LD_INT 2
36901: NEG
36902: PUSH
36903: LD_INT 1
36905: NEG
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: PUSH
36911: LD_INT 2
36913: NEG
36914: PUSH
36915: LD_INT 2
36917: NEG
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 1
36925: PUSH
36926: LD_INT 2
36928: NEG
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PUSH
36934: LD_INT 2
36936: PUSH
36937: LD_INT 1
36939: NEG
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: LD_INT 3
36947: PUSH
36948: LD_INT 1
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: LD_INT 3
36957: PUSH
36958: LD_INT 2
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
36990: LD_ADDR_VAR 0 25
36994: PUSH
36995: LD_INT 0
36997: PUSH
36998: LD_INT 0
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PUSH
37005: LD_INT 0
37007: PUSH
37008: LD_INT 1
37010: NEG
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: PUSH
37016: LD_INT 1
37018: PUSH
37019: LD_INT 0
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: PUSH
37026: LD_INT 1
37028: PUSH
37029: LD_INT 1
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 0
37038: PUSH
37039: LD_INT 1
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: PUSH
37046: LD_INT 1
37048: NEG
37049: PUSH
37050: LD_INT 0
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: PUSH
37057: LD_INT 1
37059: NEG
37060: PUSH
37061: LD_INT 1
37063: NEG
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: LD_INT 1
37071: NEG
37072: PUSH
37073: LD_INT 2
37075: NEG
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: LD_INT 0
37083: PUSH
37084: LD_INT 2
37086: NEG
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PUSH
37092: LD_INT 1
37094: PUSH
37095: LD_INT 1
37097: NEG
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: LD_INT 2
37105: PUSH
37106: LD_INT 0
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 2
37115: PUSH
37116: LD_INT 1
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PUSH
37123: LD_INT 2
37125: PUSH
37126: LD_INT 2
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: LD_INT 1
37135: PUSH
37136: LD_INT 2
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: PUSH
37143: LD_INT 0
37145: PUSH
37146: LD_INT 2
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: PUSH
37153: LD_INT 1
37155: NEG
37156: PUSH
37157: LD_INT 1
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 2
37166: NEG
37167: PUSH
37168: LD_INT 0
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: PUSH
37175: LD_INT 2
37177: NEG
37178: PUSH
37179: LD_INT 1
37181: NEG
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 2
37189: NEG
37190: PUSH
37191: LD_INT 2
37193: NEG
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: LD_INT 3
37201: PUSH
37202: LD_INT 1
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: PUSH
37209: LD_INT 3
37211: PUSH
37212: LD_INT 2
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PUSH
37219: LD_INT 2
37221: PUSH
37222: LD_INT 3
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: PUSH
37229: LD_INT 1
37231: PUSH
37232: LD_INT 3
37234: PUSH
37235: EMPTY
37236: LIST
37237: LIST
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: LIST
37263: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37264: LD_ADDR_VAR 0 26
37268: PUSH
37269: LD_INT 0
37271: PUSH
37272: LD_INT 0
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PUSH
37279: LD_INT 0
37281: PUSH
37282: LD_INT 1
37284: NEG
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: PUSH
37290: LD_INT 1
37292: PUSH
37293: LD_INT 0
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: PUSH
37300: LD_INT 1
37302: PUSH
37303: LD_INT 1
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PUSH
37310: LD_INT 0
37312: PUSH
37313: LD_INT 1
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 1
37322: NEG
37323: PUSH
37324: LD_INT 0
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 1
37333: NEG
37334: PUSH
37335: LD_INT 1
37337: NEG
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PUSH
37343: LD_INT 1
37345: NEG
37346: PUSH
37347: LD_INT 2
37349: NEG
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: PUSH
37355: LD_INT 0
37357: PUSH
37358: LD_INT 2
37360: NEG
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: PUSH
37366: LD_INT 1
37368: PUSH
37369: LD_INT 1
37371: NEG
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: PUSH
37377: LD_INT 2
37379: PUSH
37380: LD_INT 0
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: LD_INT 2
37389: PUSH
37390: LD_INT 1
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 2
37399: PUSH
37400: LD_INT 2
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 1
37409: PUSH
37410: LD_INT 2
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: LD_INT 0
37419: PUSH
37420: LD_INT 2
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 1
37429: NEG
37430: PUSH
37431: LD_INT 1
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: PUSH
37438: LD_INT 2
37440: NEG
37441: PUSH
37442: LD_INT 0
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PUSH
37449: LD_INT 2
37451: NEG
37452: PUSH
37453: LD_INT 1
37455: NEG
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 2
37463: NEG
37464: PUSH
37465: LD_INT 2
37467: NEG
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: PUSH
37473: LD_INT 2
37475: PUSH
37476: LD_INT 3
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: LD_INT 1
37485: PUSH
37486: LD_INT 3
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: LD_INT 1
37495: NEG
37496: PUSH
37497: LD_INT 2
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PUSH
37504: LD_INT 2
37506: NEG
37507: PUSH
37508: LD_INT 1
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: LIST
37519: LIST
37520: LIST
37521: LIST
37522: LIST
37523: LIST
37524: LIST
37525: LIST
37526: LIST
37527: LIST
37528: LIST
37529: LIST
37530: LIST
37531: LIST
37532: LIST
37533: LIST
37534: LIST
37535: LIST
37536: LIST
37537: LIST
37538: LIST
37539: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37540: LD_ADDR_VAR 0 27
37544: PUSH
37545: LD_INT 0
37547: PUSH
37548: LD_INT 0
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: PUSH
37555: LD_INT 0
37557: PUSH
37558: LD_INT 1
37560: NEG
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PUSH
37566: LD_INT 1
37568: PUSH
37569: LD_INT 0
37571: PUSH
37572: EMPTY
37573: LIST
37574: LIST
37575: PUSH
37576: LD_INT 1
37578: PUSH
37579: LD_INT 1
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: PUSH
37586: LD_INT 0
37588: PUSH
37589: LD_INT 1
37591: PUSH
37592: EMPTY
37593: LIST
37594: LIST
37595: PUSH
37596: LD_INT 1
37598: NEG
37599: PUSH
37600: LD_INT 0
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 1
37609: NEG
37610: PUSH
37611: LD_INT 1
37613: NEG
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: LD_INT 1
37621: NEG
37622: PUSH
37623: LD_INT 2
37625: NEG
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 0
37633: PUSH
37634: LD_INT 2
37636: NEG
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: PUSH
37642: LD_INT 1
37644: PUSH
37645: LD_INT 1
37647: NEG
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 2
37655: PUSH
37656: LD_INT 0
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PUSH
37663: LD_INT 2
37665: PUSH
37666: LD_INT 1
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: PUSH
37673: LD_INT 2
37675: PUSH
37676: LD_INT 2
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 1
37685: PUSH
37686: LD_INT 2
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 0
37695: PUSH
37696: LD_INT 2
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 1
37705: NEG
37706: PUSH
37707: LD_INT 1
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 2
37716: NEG
37717: PUSH
37718: LD_INT 0
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: PUSH
37725: LD_INT 2
37727: NEG
37728: PUSH
37729: LD_INT 1
37731: NEG
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: PUSH
37737: LD_INT 2
37739: NEG
37740: PUSH
37741: LD_INT 2
37743: NEG
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: PUSH
37749: LD_INT 1
37751: NEG
37752: PUSH
37753: LD_INT 2
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PUSH
37760: LD_INT 2
37762: NEG
37763: PUSH
37764: LD_INT 1
37766: PUSH
37767: EMPTY
37768: LIST
37769: LIST
37770: PUSH
37771: LD_INT 3
37773: NEG
37774: PUSH
37775: LD_INT 1
37777: NEG
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: LD_INT 3
37785: NEG
37786: PUSH
37787: LD_INT 2
37789: NEG
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: LIST
37799: LIST
37800: LIST
37801: LIST
37802: LIST
37803: LIST
37804: LIST
37805: LIST
37806: LIST
37807: LIST
37808: LIST
37809: LIST
37810: LIST
37811: LIST
37812: LIST
37813: LIST
37814: LIST
37815: LIST
37816: LIST
37817: LIST
37818: LIST
37819: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37820: LD_ADDR_VAR 0 28
37824: PUSH
37825: LD_INT 0
37827: PUSH
37828: LD_INT 0
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: PUSH
37835: LD_INT 0
37837: PUSH
37838: LD_INT 1
37840: NEG
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: LD_INT 1
37848: PUSH
37849: LD_INT 0
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: LD_INT 1
37858: PUSH
37859: LD_INT 1
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 0
37868: PUSH
37869: LD_INT 1
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 1
37878: NEG
37879: PUSH
37880: LD_INT 0
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 1
37889: NEG
37890: PUSH
37891: LD_INT 1
37893: NEG
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 1
37901: NEG
37902: PUSH
37903: LD_INT 2
37905: NEG
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: PUSH
37911: LD_INT 0
37913: PUSH
37914: LD_INT 2
37916: NEG
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: PUSH
37922: LD_INT 1
37924: PUSH
37925: LD_INT 1
37927: NEG
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: LD_INT 2
37935: PUSH
37936: LD_INT 0
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 2
37945: PUSH
37946: LD_INT 1
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PUSH
37953: LD_INT 2
37955: PUSH
37956: LD_INT 2
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PUSH
37963: LD_INT 1
37965: PUSH
37966: LD_INT 2
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 0
37975: PUSH
37976: LD_INT 2
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 1
37985: NEG
37986: PUSH
37987: LD_INT 1
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 2
37996: NEG
37997: PUSH
37998: LD_INT 0
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 2
38007: NEG
38008: PUSH
38009: LD_INT 1
38011: NEG
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 2
38019: NEG
38020: PUSH
38021: LD_INT 2
38023: NEG
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: LD_INT 2
38031: NEG
38032: PUSH
38033: LD_INT 3
38035: NEG
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 1
38043: NEG
38044: PUSH
38045: LD_INT 3
38047: NEG
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 3
38055: NEG
38056: PUSH
38057: LD_INT 1
38059: NEG
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: LD_INT 3
38067: NEG
38068: PUSH
38069: LD_INT 2
38071: NEG
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: LIST
38098: LIST
38099: LIST
38100: LIST
38101: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38102: LD_ADDR_VAR 0 29
38106: PUSH
38107: LD_INT 0
38109: PUSH
38110: LD_INT 0
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: PUSH
38117: LD_INT 0
38119: PUSH
38120: LD_INT 1
38122: NEG
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: PUSH
38128: LD_INT 1
38130: PUSH
38131: LD_INT 0
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: LD_INT 1
38140: PUSH
38141: LD_INT 1
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PUSH
38148: LD_INT 0
38150: PUSH
38151: LD_INT 1
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 1
38160: NEG
38161: PUSH
38162: LD_INT 0
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 1
38171: NEG
38172: PUSH
38173: LD_INT 1
38175: NEG
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PUSH
38181: LD_INT 1
38183: NEG
38184: PUSH
38185: LD_INT 2
38187: NEG
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: LD_INT 0
38195: PUSH
38196: LD_INT 2
38198: NEG
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PUSH
38204: LD_INT 1
38206: PUSH
38207: LD_INT 1
38209: NEG
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: PUSH
38215: LD_INT 2
38217: PUSH
38218: LD_INT 0
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 2
38227: PUSH
38228: LD_INT 1
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 1
38237: PUSH
38238: LD_INT 2
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: LD_INT 0
38247: PUSH
38248: LD_INT 2
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 1
38257: NEG
38258: PUSH
38259: LD_INT 1
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 2
38268: NEG
38269: PUSH
38270: LD_INT 1
38272: NEG
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 2
38280: NEG
38281: PUSH
38282: LD_INT 2
38284: NEG
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 2
38292: NEG
38293: PUSH
38294: LD_INT 3
38296: NEG
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: PUSH
38302: LD_INT 2
38304: PUSH
38305: LD_INT 1
38307: NEG
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: LD_INT 3
38315: PUSH
38316: LD_INT 1
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: PUSH
38323: LD_INT 1
38325: PUSH
38326: LD_INT 3
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: PUSH
38333: LD_INT 1
38335: NEG
38336: PUSH
38337: LD_INT 2
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PUSH
38344: LD_INT 3
38346: NEG
38347: PUSH
38348: LD_INT 2
38350: NEG
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: LIST
38360: LIST
38361: LIST
38362: LIST
38363: LIST
38364: LIST
38365: LIST
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38381: LD_ADDR_VAR 0 30
38385: PUSH
38386: LD_INT 0
38388: PUSH
38389: LD_INT 0
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: LD_INT 0
38398: PUSH
38399: LD_INT 1
38401: NEG
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 1
38409: PUSH
38410: LD_INT 0
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 1
38419: PUSH
38420: LD_INT 1
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 0
38429: PUSH
38430: LD_INT 1
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: PUSH
38437: LD_INT 1
38439: NEG
38440: PUSH
38441: LD_INT 0
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PUSH
38448: LD_INT 1
38450: NEG
38451: PUSH
38452: LD_INT 1
38454: NEG
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PUSH
38460: LD_INT 1
38462: NEG
38463: PUSH
38464: LD_INT 2
38466: NEG
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: PUSH
38472: LD_INT 0
38474: PUSH
38475: LD_INT 2
38477: NEG
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 1
38485: PUSH
38486: LD_INT 1
38488: NEG
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: LD_INT 2
38496: PUSH
38497: LD_INT 0
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PUSH
38504: LD_INT 2
38506: PUSH
38507: LD_INT 1
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: LD_INT 2
38516: PUSH
38517: LD_INT 2
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: LD_INT 1
38526: PUSH
38527: LD_INT 2
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: LD_INT 1
38536: NEG
38537: PUSH
38538: LD_INT 1
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PUSH
38545: LD_INT 2
38547: NEG
38548: PUSH
38549: LD_INT 0
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: LD_INT 2
38558: NEG
38559: PUSH
38560: LD_INT 1
38562: NEG
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: PUSH
38568: LD_INT 1
38570: NEG
38571: PUSH
38572: LD_INT 3
38574: NEG
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 1
38582: PUSH
38583: LD_INT 2
38585: NEG
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PUSH
38591: LD_INT 3
38593: PUSH
38594: LD_INT 2
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 2
38603: PUSH
38604: LD_INT 3
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 2
38613: NEG
38614: PUSH
38615: LD_INT 1
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: PUSH
38622: LD_INT 3
38624: NEG
38625: PUSH
38626: LD_INT 1
38628: NEG
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38659: LD_ADDR_VAR 0 31
38663: PUSH
38664: LD_INT 0
38666: PUSH
38667: LD_INT 0
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 0
38676: PUSH
38677: LD_INT 1
38679: NEG
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: LD_INT 1
38687: PUSH
38688: LD_INT 0
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PUSH
38695: LD_INT 1
38697: PUSH
38698: LD_INT 1
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: PUSH
38705: LD_INT 0
38707: PUSH
38708: LD_INT 1
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 1
38717: NEG
38718: PUSH
38719: LD_INT 0
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: LD_INT 1
38728: NEG
38729: PUSH
38730: LD_INT 1
38732: NEG
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: LD_INT 1
38740: NEG
38741: PUSH
38742: LD_INT 2
38744: NEG
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: LD_INT 1
38752: PUSH
38753: LD_INT 1
38755: NEG
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 2
38763: PUSH
38764: LD_INT 0
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 2
38773: PUSH
38774: LD_INT 1
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 2
38783: PUSH
38784: LD_INT 2
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 1
38793: PUSH
38794: LD_INT 2
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: LD_INT 0
38803: PUSH
38804: LD_INT 2
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 1
38813: NEG
38814: PUSH
38815: LD_INT 1
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 2
38824: NEG
38825: PUSH
38826: LD_INT 1
38828: NEG
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: LD_INT 2
38836: NEG
38837: PUSH
38838: LD_INT 2
38840: NEG
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 2
38848: NEG
38849: PUSH
38850: LD_INT 3
38852: NEG
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 2
38860: PUSH
38861: LD_INT 1
38863: NEG
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: PUSH
38869: LD_INT 3
38871: PUSH
38872: LD_INT 1
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 1
38881: PUSH
38882: LD_INT 3
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 1
38891: NEG
38892: PUSH
38893: LD_INT 2
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: PUSH
38900: LD_INT 3
38902: NEG
38903: PUSH
38904: LD_INT 2
38906: NEG
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38937: LD_ADDR_VAR 0 32
38941: PUSH
38942: LD_INT 0
38944: PUSH
38945: LD_INT 0
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 0
38954: PUSH
38955: LD_INT 1
38957: NEG
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 1
38965: PUSH
38966: LD_INT 0
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 1
38975: PUSH
38976: LD_INT 1
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PUSH
38983: LD_INT 0
38985: PUSH
38986: LD_INT 1
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 1
38995: NEG
38996: PUSH
38997: LD_INT 0
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 1
39006: NEG
39007: PUSH
39008: LD_INT 1
39010: NEG
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: LD_INT 1
39018: NEG
39019: PUSH
39020: LD_INT 2
39022: NEG
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: LD_INT 0
39030: PUSH
39031: LD_INT 2
39033: NEG
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 1
39041: PUSH
39042: LD_INT 1
39044: NEG
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 2
39052: PUSH
39053: LD_INT 1
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 2
39062: PUSH
39063: LD_INT 2
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 1
39072: PUSH
39073: LD_INT 2
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 0
39082: PUSH
39083: LD_INT 2
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 1
39092: NEG
39093: PUSH
39094: LD_INT 1
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 2
39103: NEG
39104: PUSH
39105: LD_INT 0
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 2
39114: NEG
39115: PUSH
39116: LD_INT 1
39118: NEG
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 1
39126: NEG
39127: PUSH
39128: LD_INT 3
39130: NEG
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 1
39138: PUSH
39139: LD_INT 2
39141: NEG
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 3
39149: PUSH
39150: LD_INT 2
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 2
39159: PUSH
39160: LD_INT 3
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: LD_INT 2
39169: NEG
39170: PUSH
39171: LD_INT 1
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: LD_INT 3
39180: NEG
39181: PUSH
39182: LD_INT 1
39184: NEG
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39215: LD_ADDR_VAR 0 33
39219: PUSH
39220: LD_INT 0
39222: PUSH
39223: LD_INT 0
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 0
39232: PUSH
39233: LD_INT 1
39235: NEG
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 1
39243: PUSH
39244: LD_INT 0
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: LD_INT 1
39253: PUSH
39254: LD_INT 1
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 0
39263: PUSH
39264: LD_INT 1
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: LD_INT 1
39273: NEG
39274: PUSH
39275: LD_INT 0
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: LD_INT 1
39284: NEG
39285: PUSH
39286: LD_INT 1
39288: NEG
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PUSH
39294: LD_INT 1
39296: NEG
39297: PUSH
39298: LD_INT 2
39300: NEG
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 1
39308: PUSH
39309: LD_INT 1
39311: NEG
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: LD_INT 2
39319: PUSH
39320: LD_INT 0
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: PUSH
39327: LD_INT 2
39329: PUSH
39330: LD_INT 1
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 1
39339: PUSH
39340: LD_INT 2
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: PUSH
39347: LD_INT 0
39349: PUSH
39350: LD_INT 2
39352: PUSH
39353: EMPTY
39354: LIST
39355: LIST
39356: PUSH
39357: LD_INT 1
39359: NEG
39360: PUSH
39361: LD_INT 1
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 2
39370: NEG
39371: PUSH
39372: LD_INT 0
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 2
39381: NEG
39382: PUSH
39383: LD_INT 1
39385: NEG
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 2
39393: NEG
39394: PUSH
39395: LD_INT 2
39397: NEG
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: LD_INT 2
39405: NEG
39406: PUSH
39407: LD_INT 3
39409: NEG
39410: PUSH
39411: EMPTY
39412: LIST
39413: LIST
39414: PUSH
39415: LD_INT 2
39417: PUSH
39418: LD_INT 1
39420: NEG
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 3
39428: PUSH
39429: LD_INT 1
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: PUSH
39436: LD_INT 1
39438: PUSH
39439: LD_INT 3
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PUSH
39446: LD_INT 1
39448: NEG
39449: PUSH
39450: LD_INT 2
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 3
39459: NEG
39460: PUSH
39461: LD_INT 2
39463: NEG
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39494: LD_ADDR_VAR 0 34
39498: PUSH
39499: LD_INT 0
39501: PUSH
39502: LD_INT 0
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 0
39511: PUSH
39512: LD_INT 1
39514: NEG
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 1
39522: PUSH
39523: LD_INT 0
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 1
39532: PUSH
39533: LD_INT 1
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 0
39542: PUSH
39543: LD_INT 1
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 1
39552: NEG
39553: PUSH
39554: LD_INT 0
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 1
39563: NEG
39564: PUSH
39565: LD_INT 1
39567: NEG
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 1
39575: NEG
39576: PUSH
39577: LD_INT 2
39579: NEG
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PUSH
39585: LD_INT 0
39587: PUSH
39588: LD_INT 2
39590: NEG
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 1
39598: PUSH
39599: LD_INT 1
39601: NEG
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 2
39609: PUSH
39610: LD_INT 1
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 2
39619: PUSH
39620: LD_INT 2
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 1
39629: PUSH
39630: LD_INT 2
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 1
39639: NEG
39640: PUSH
39641: LD_INT 1
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 2
39650: NEG
39651: PUSH
39652: LD_INT 0
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 2
39661: NEG
39662: PUSH
39663: LD_INT 1
39665: NEG
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 2
39673: NEG
39674: PUSH
39675: LD_INT 2
39677: NEG
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 1
39685: NEG
39686: PUSH
39687: LD_INT 3
39689: NEG
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 1
39697: PUSH
39698: LD_INT 2
39700: NEG
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 3
39708: PUSH
39709: LD_INT 2
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: PUSH
39716: LD_INT 2
39718: PUSH
39719: LD_INT 3
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: LD_INT 2
39728: NEG
39729: PUSH
39730: LD_INT 1
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: LD_INT 3
39739: NEG
39740: PUSH
39741: LD_INT 1
39743: NEG
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39774: LD_ADDR_VAR 0 35
39778: PUSH
39779: LD_INT 0
39781: PUSH
39782: LD_INT 0
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PUSH
39789: LD_INT 0
39791: PUSH
39792: LD_INT 1
39794: NEG
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: LD_INT 1
39802: PUSH
39803: LD_INT 0
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: PUSH
39810: LD_INT 1
39812: PUSH
39813: LD_INT 1
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PUSH
39820: LD_INT 0
39822: PUSH
39823: LD_INT 1
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: PUSH
39830: LD_INT 1
39832: NEG
39833: PUSH
39834: LD_INT 0
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 1
39843: NEG
39844: PUSH
39845: LD_INT 1
39847: NEG
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 2
39855: PUSH
39856: LD_INT 1
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PUSH
39863: LD_INT 2
39865: NEG
39866: PUSH
39867: LD_INT 1
39869: NEG
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39886: LD_ADDR_VAR 0 36
39890: PUSH
39891: LD_INT 0
39893: PUSH
39894: LD_INT 0
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 0
39903: PUSH
39904: LD_INT 1
39906: NEG
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PUSH
39912: LD_INT 1
39914: PUSH
39915: LD_INT 0
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: PUSH
39922: LD_INT 1
39924: PUSH
39925: LD_INT 1
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PUSH
39932: LD_INT 0
39934: PUSH
39935: LD_INT 1
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 1
39944: NEG
39945: PUSH
39946: LD_INT 0
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: LD_INT 1
39955: NEG
39956: PUSH
39957: LD_INT 1
39959: NEG
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: LD_INT 1
39967: NEG
39968: PUSH
39969: LD_INT 2
39971: NEG
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 1
39979: PUSH
39980: LD_INT 2
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39998: LD_ADDR_VAR 0 37
40002: PUSH
40003: LD_INT 0
40005: PUSH
40006: LD_INT 0
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 0
40015: PUSH
40016: LD_INT 1
40018: NEG
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 1
40026: PUSH
40027: LD_INT 0
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 1
40036: PUSH
40037: LD_INT 1
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: LD_INT 0
40046: PUSH
40047: LD_INT 1
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: PUSH
40054: LD_INT 1
40056: NEG
40057: PUSH
40058: LD_INT 0
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 1
40067: NEG
40068: PUSH
40069: LD_INT 1
40071: NEG
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 1
40079: PUSH
40080: LD_INT 1
40082: NEG
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: LD_INT 1
40090: NEG
40091: PUSH
40092: LD_INT 1
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40110: LD_ADDR_VAR 0 38
40114: PUSH
40115: LD_INT 0
40117: PUSH
40118: LD_INT 0
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 0
40127: PUSH
40128: LD_INT 1
40130: NEG
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 1
40138: PUSH
40139: LD_INT 0
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 1
40148: PUSH
40149: LD_INT 1
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: LD_INT 0
40158: PUSH
40159: LD_INT 1
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PUSH
40166: LD_INT 1
40168: NEG
40169: PUSH
40170: LD_INT 0
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 1
40179: NEG
40180: PUSH
40181: LD_INT 1
40183: NEG
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 2
40191: PUSH
40192: LD_INT 1
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 2
40201: NEG
40202: PUSH
40203: LD_INT 1
40205: NEG
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40222: LD_ADDR_VAR 0 39
40226: PUSH
40227: LD_INT 0
40229: PUSH
40230: LD_INT 0
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: LD_INT 0
40239: PUSH
40240: LD_INT 1
40242: NEG
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 1
40250: PUSH
40251: LD_INT 0
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 1
40260: PUSH
40261: LD_INT 1
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 0
40270: PUSH
40271: LD_INT 1
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: PUSH
40278: LD_INT 1
40280: NEG
40281: PUSH
40282: LD_INT 0
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_INT 1
40291: NEG
40292: PUSH
40293: LD_INT 1
40295: NEG
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 1
40303: NEG
40304: PUSH
40305: LD_INT 2
40307: NEG
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 1
40315: PUSH
40316: LD_INT 2
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40334: LD_ADDR_VAR 0 40
40338: PUSH
40339: LD_INT 0
40341: PUSH
40342: LD_INT 0
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 0
40351: PUSH
40352: LD_INT 1
40354: NEG
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 1
40362: PUSH
40363: LD_INT 0
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 1
40372: PUSH
40373: LD_INT 1
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 0
40382: PUSH
40383: LD_INT 1
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 1
40392: NEG
40393: PUSH
40394: LD_INT 0
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 1
40403: NEG
40404: PUSH
40405: LD_INT 1
40407: NEG
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 1
40415: PUSH
40416: LD_INT 1
40418: NEG
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 1
40426: NEG
40427: PUSH
40428: LD_INT 1
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40446: LD_ADDR_VAR 0 41
40450: PUSH
40451: LD_INT 0
40453: PUSH
40454: LD_INT 0
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PUSH
40461: LD_INT 0
40463: PUSH
40464: LD_INT 1
40466: NEG
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 1
40474: PUSH
40475: LD_INT 0
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: PUSH
40482: LD_INT 1
40484: PUSH
40485: LD_INT 1
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 0
40494: PUSH
40495: LD_INT 1
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 1
40504: NEG
40505: PUSH
40506: LD_INT 0
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: LD_INT 1
40515: NEG
40516: PUSH
40517: LD_INT 1
40519: NEG
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 1
40527: NEG
40528: PUSH
40529: LD_INT 2
40531: NEG
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 1
40539: PUSH
40540: LD_INT 1
40542: NEG
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 2
40550: PUSH
40551: LD_INT 0
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 2
40560: PUSH
40561: LD_INT 1
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 2
40570: PUSH
40571: LD_INT 2
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 1
40580: PUSH
40581: LD_INT 2
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 1
40590: NEG
40591: PUSH
40592: LD_INT 1
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 2
40601: NEG
40602: PUSH
40603: LD_INT 0
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 2
40612: NEG
40613: PUSH
40614: LD_INT 1
40616: NEG
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 2
40624: NEG
40625: PUSH
40626: LD_INT 2
40628: NEG
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 2
40636: NEG
40637: PUSH
40638: LD_INT 3
40640: NEG
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 2
40648: PUSH
40649: LD_INT 1
40651: NEG
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 3
40659: PUSH
40660: LD_INT 0
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 3
40669: PUSH
40670: LD_INT 1
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 3
40679: PUSH
40680: LD_INT 2
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 3
40689: PUSH
40690: LD_INT 3
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: LD_INT 2
40699: PUSH
40700: LD_INT 3
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 2
40709: NEG
40710: PUSH
40711: LD_INT 1
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: LD_INT 3
40720: NEG
40721: PUSH
40722: LD_INT 0
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 3
40731: NEG
40732: PUSH
40733: LD_INT 1
40735: NEG
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 3
40743: NEG
40744: PUSH
40745: LD_INT 2
40747: NEG
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 3
40755: NEG
40756: PUSH
40757: LD_INT 3
40759: NEG
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40796: LD_ADDR_VAR 0 42
40800: PUSH
40801: LD_INT 0
40803: PUSH
40804: LD_INT 0
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: LD_INT 0
40813: PUSH
40814: LD_INT 1
40816: NEG
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 1
40824: PUSH
40825: LD_INT 0
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 1
40834: PUSH
40835: LD_INT 1
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 0
40844: PUSH
40845: LD_INT 1
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 1
40854: NEG
40855: PUSH
40856: LD_INT 0
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 1
40865: NEG
40866: PUSH
40867: LD_INT 1
40869: NEG
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 1
40877: NEG
40878: PUSH
40879: LD_INT 2
40881: NEG
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: LD_INT 0
40889: PUSH
40890: LD_INT 2
40892: NEG
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 1
40900: PUSH
40901: LD_INT 1
40903: NEG
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: LD_INT 2
40911: PUSH
40912: LD_INT 1
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 2
40921: PUSH
40922: LD_INT 2
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 1
40931: PUSH
40932: LD_INT 2
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 0
40941: PUSH
40942: LD_INT 2
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 1
40951: NEG
40952: PUSH
40953: LD_INT 1
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: LD_INT 2
40962: NEG
40963: PUSH
40964: LD_INT 1
40966: NEG
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 2
40974: NEG
40975: PUSH
40976: LD_INT 2
40978: NEG
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: LD_INT 2
40986: NEG
40987: PUSH
40988: LD_INT 3
40990: NEG
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PUSH
40996: LD_INT 1
40998: NEG
40999: PUSH
41000: LD_INT 3
41002: NEG
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 0
41010: PUSH
41011: LD_INT 3
41013: NEG
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: PUSH
41019: LD_INT 1
41021: PUSH
41022: LD_INT 2
41024: NEG
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 3
41032: PUSH
41033: LD_INT 2
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 3
41042: PUSH
41043: LD_INT 3
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 2
41052: PUSH
41053: LD_INT 3
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 1
41062: PUSH
41063: LD_INT 3
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 0
41072: PUSH
41073: LD_INT 3
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 1
41082: NEG
41083: PUSH
41084: LD_INT 2
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 3
41093: NEG
41094: PUSH
41095: LD_INT 2
41097: NEG
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 3
41105: NEG
41106: PUSH
41107: LD_INT 3
41109: NEG
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41146: LD_ADDR_VAR 0 43
41150: PUSH
41151: LD_INT 0
41153: PUSH
41154: LD_INT 0
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 0
41163: PUSH
41164: LD_INT 1
41166: NEG
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 1
41174: PUSH
41175: LD_INT 0
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 1
41184: PUSH
41185: LD_INT 1
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: PUSH
41192: LD_INT 0
41194: PUSH
41195: LD_INT 1
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 1
41204: NEG
41205: PUSH
41206: LD_INT 0
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 1
41215: NEG
41216: PUSH
41217: LD_INT 1
41219: NEG
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 1
41227: NEG
41228: PUSH
41229: LD_INT 2
41231: NEG
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 0
41239: PUSH
41240: LD_INT 2
41242: NEG
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 1
41250: PUSH
41251: LD_INT 1
41253: NEG
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 2
41261: PUSH
41262: LD_INT 0
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 2
41271: PUSH
41272: LD_INT 1
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 1
41281: PUSH
41282: LD_INT 2
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 0
41291: PUSH
41292: LD_INT 2
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 1
41301: NEG
41302: PUSH
41303: LD_INT 1
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 2
41312: NEG
41313: PUSH
41314: LD_INT 0
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 2
41323: NEG
41324: PUSH
41325: LD_INT 1
41327: NEG
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 1
41335: NEG
41336: PUSH
41337: LD_INT 3
41339: NEG
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 0
41347: PUSH
41348: LD_INT 3
41350: NEG
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 1
41358: PUSH
41359: LD_INT 2
41361: NEG
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 2
41369: PUSH
41370: LD_INT 1
41372: NEG
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: LD_INT 3
41380: PUSH
41381: LD_INT 0
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 3
41390: PUSH
41391: LD_INT 1
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 1
41400: PUSH
41401: LD_INT 3
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: LD_INT 0
41410: PUSH
41411: LD_INT 3
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 1
41420: NEG
41421: PUSH
41422: LD_INT 2
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 2
41431: NEG
41432: PUSH
41433: LD_INT 1
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 3
41442: NEG
41443: PUSH
41444: LD_INT 0
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 3
41453: NEG
41454: PUSH
41455: LD_INT 1
41457: NEG
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41494: LD_ADDR_VAR 0 44
41498: PUSH
41499: LD_INT 0
41501: PUSH
41502: LD_INT 0
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: LD_INT 0
41511: PUSH
41512: LD_INT 1
41514: NEG
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 1
41522: PUSH
41523: LD_INT 0
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: LD_INT 1
41532: PUSH
41533: LD_INT 1
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 0
41542: PUSH
41543: LD_INT 1
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 1
41552: NEG
41553: PUSH
41554: LD_INT 0
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 1
41563: NEG
41564: PUSH
41565: LD_INT 1
41567: NEG
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 1
41575: NEG
41576: PUSH
41577: LD_INT 2
41579: NEG
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 1
41587: PUSH
41588: LD_INT 1
41590: NEG
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 2
41598: PUSH
41599: LD_INT 0
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 2
41608: PUSH
41609: LD_INT 1
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 2
41618: PUSH
41619: LD_INT 2
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 1
41628: PUSH
41629: LD_INT 2
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 1
41638: NEG
41639: PUSH
41640: LD_INT 1
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 2
41649: NEG
41650: PUSH
41651: LD_INT 0
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 2
41660: NEG
41661: PUSH
41662: LD_INT 1
41664: NEG
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 2
41672: NEG
41673: PUSH
41674: LD_INT 2
41676: NEG
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 2
41684: NEG
41685: PUSH
41686: LD_INT 3
41688: NEG
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 2
41696: PUSH
41697: LD_INT 1
41699: NEG
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 3
41707: PUSH
41708: LD_INT 0
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 3
41717: PUSH
41718: LD_INT 1
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 3
41727: PUSH
41728: LD_INT 2
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 3
41737: PUSH
41738: LD_INT 3
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 2
41747: PUSH
41748: LD_INT 3
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 2
41757: NEG
41758: PUSH
41759: LD_INT 1
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 3
41768: NEG
41769: PUSH
41770: LD_INT 0
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 3
41779: NEG
41780: PUSH
41781: LD_INT 1
41783: NEG
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 3
41791: NEG
41792: PUSH
41793: LD_INT 2
41795: NEG
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 3
41803: NEG
41804: PUSH
41805: LD_INT 3
41807: NEG
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41844: LD_ADDR_VAR 0 45
41848: PUSH
41849: LD_INT 0
41851: PUSH
41852: LD_INT 0
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 0
41861: PUSH
41862: LD_INT 1
41864: NEG
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 1
41872: PUSH
41873: LD_INT 0
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 1
41882: PUSH
41883: LD_INT 1
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: LD_INT 0
41892: PUSH
41893: LD_INT 1
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_INT 1
41902: NEG
41903: PUSH
41904: LD_INT 0
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 1
41913: NEG
41914: PUSH
41915: LD_INT 1
41917: NEG
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 1
41925: NEG
41926: PUSH
41927: LD_INT 2
41929: NEG
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 0
41937: PUSH
41938: LD_INT 2
41940: NEG
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 1
41948: PUSH
41949: LD_INT 1
41951: NEG
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: PUSH
41957: LD_INT 2
41959: PUSH
41960: LD_INT 1
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: LD_INT 2
41969: PUSH
41970: LD_INT 2
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 1
41979: PUSH
41980: LD_INT 2
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 0
41989: PUSH
41990: LD_INT 2
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 1
41999: NEG
42000: PUSH
42001: LD_INT 1
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: LD_INT 2
42010: NEG
42011: PUSH
42012: LD_INT 1
42014: NEG
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 2
42022: NEG
42023: PUSH
42024: LD_INT 2
42026: NEG
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 2
42034: NEG
42035: PUSH
42036: LD_INT 3
42038: NEG
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 1
42046: NEG
42047: PUSH
42048: LD_INT 3
42050: NEG
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 0
42058: PUSH
42059: LD_INT 3
42061: NEG
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 1
42069: PUSH
42070: LD_INT 2
42072: NEG
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 3
42080: PUSH
42081: LD_INT 2
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 3
42090: PUSH
42091: LD_INT 3
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 2
42100: PUSH
42101: LD_INT 3
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 1
42110: PUSH
42111: LD_INT 3
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 0
42120: PUSH
42121: LD_INT 3
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 1
42130: NEG
42131: PUSH
42132: LD_INT 2
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 3
42141: NEG
42142: PUSH
42143: LD_INT 2
42145: NEG
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 3
42153: NEG
42154: PUSH
42155: LD_INT 3
42157: NEG
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42194: LD_ADDR_VAR 0 46
42198: PUSH
42199: LD_INT 0
42201: PUSH
42202: LD_INT 0
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 0
42211: PUSH
42212: LD_INT 1
42214: NEG
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 1
42222: PUSH
42223: LD_INT 0
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 1
42232: PUSH
42233: LD_INT 1
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 0
42242: PUSH
42243: LD_INT 1
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 1
42252: NEG
42253: PUSH
42254: LD_INT 0
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 1
42263: NEG
42264: PUSH
42265: LD_INT 1
42267: NEG
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 1
42275: NEG
42276: PUSH
42277: LD_INT 2
42279: NEG
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 0
42287: PUSH
42288: LD_INT 2
42290: NEG
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 1
42298: PUSH
42299: LD_INT 1
42301: NEG
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 2
42309: PUSH
42310: LD_INT 0
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 2
42319: PUSH
42320: LD_INT 1
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 1
42329: PUSH
42330: LD_INT 2
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 0
42339: PUSH
42340: LD_INT 2
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 1
42349: NEG
42350: PUSH
42351: LD_INT 1
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 2
42360: NEG
42361: PUSH
42362: LD_INT 0
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 2
42371: NEG
42372: PUSH
42373: LD_INT 1
42375: NEG
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 1
42383: NEG
42384: PUSH
42385: LD_INT 3
42387: NEG
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 0
42395: PUSH
42396: LD_INT 3
42398: NEG
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 1
42406: PUSH
42407: LD_INT 2
42409: NEG
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 2
42417: PUSH
42418: LD_INT 1
42420: NEG
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 3
42428: PUSH
42429: LD_INT 0
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 3
42438: PUSH
42439: LD_INT 1
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 1
42448: PUSH
42449: LD_INT 3
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 0
42458: PUSH
42459: LD_INT 3
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 1
42468: NEG
42469: PUSH
42470: LD_INT 2
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 2
42479: NEG
42480: PUSH
42481: LD_INT 1
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 3
42490: NEG
42491: PUSH
42492: LD_INT 0
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 3
42501: NEG
42502: PUSH
42503: LD_INT 1
42505: NEG
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42542: LD_ADDR_VAR 0 47
42546: PUSH
42547: LD_INT 0
42549: PUSH
42550: LD_INT 0
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 0
42559: PUSH
42560: LD_INT 1
42562: NEG
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 1
42570: PUSH
42571: LD_INT 0
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 1
42580: PUSH
42581: LD_INT 1
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 0
42590: PUSH
42591: LD_INT 1
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 1
42600: NEG
42601: PUSH
42602: LD_INT 0
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 1
42611: NEG
42612: PUSH
42613: LD_INT 1
42615: NEG
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 1
42623: NEG
42624: PUSH
42625: LD_INT 2
42627: NEG
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 0
42635: PUSH
42636: LD_INT 2
42638: NEG
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 1
42646: PUSH
42647: LD_INT 1
42649: NEG
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 2
42657: NEG
42658: PUSH
42659: LD_INT 1
42661: NEG
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 2
42669: NEG
42670: PUSH
42671: LD_INT 2
42673: NEG
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
42693: LD_ADDR_VAR 0 48
42697: PUSH
42698: LD_INT 0
42700: PUSH
42701: LD_INT 0
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 0
42710: PUSH
42711: LD_INT 1
42713: NEG
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 1
42721: PUSH
42722: LD_INT 0
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 1
42731: PUSH
42732: LD_INT 1
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 0
42741: PUSH
42742: LD_INT 1
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 1
42751: NEG
42752: PUSH
42753: LD_INT 0
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 1
42762: NEG
42763: PUSH
42764: LD_INT 1
42766: NEG
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 1
42774: NEG
42775: PUSH
42776: LD_INT 2
42778: NEG
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 0
42786: PUSH
42787: LD_INT 2
42789: NEG
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 1
42797: PUSH
42798: LD_INT 1
42800: NEG
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 2
42808: PUSH
42809: LD_INT 0
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 2
42818: PUSH
42819: LD_INT 1
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
42840: LD_ADDR_VAR 0 49
42844: PUSH
42845: LD_INT 0
42847: PUSH
42848: LD_INT 0
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 0
42857: PUSH
42858: LD_INT 1
42860: NEG
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 1
42868: PUSH
42869: LD_INT 0
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 1
42878: PUSH
42879: LD_INT 1
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 0
42888: PUSH
42889: LD_INT 1
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 1
42898: NEG
42899: PUSH
42900: LD_INT 0
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 1
42909: NEG
42910: PUSH
42911: LD_INT 1
42913: NEG
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 1
42921: PUSH
42922: LD_INT 1
42924: NEG
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 2
42932: PUSH
42933: LD_INT 0
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 2
42942: PUSH
42943: LD_INT 1
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: LD_INT 2
42952: PUSH
42953: LD_INT 2
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 1
42962: PUSH
42963: LD_INT 2
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
42984: LD_ADDR_VAR 0 50
42988: PUSH
42989: LD_INT 0
42991: PUSH
42992: LD_INT 0
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 0
43001: PUSH
43002: LD_INT 1
43004: NEG
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 1
43012: PUSH
43013: LD_INT 0
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 1
43022: PUSH
43023: LD_INT 1
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 0
43032: PUSH
43033: LD_INT 1
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 1
43042: NEG
43043: PUSH
43044: LD_INT 0
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 1
43053: NEG
43054: PUSH
43055: LD_INT 1
43057: NEG
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 2
43065: PUSH
43066: LD_INT 1
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 2
43075: PUSH
43076: LD_INT 2
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 1
43085: PUSH
43086: LD_INT 2
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 0
43095: PUSH
43096: LD_INT 2
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: LD_INT 1
43105: NEG
43106: PUSH
43107: LD_INT 1
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43128: LD_ADDR_VAR 0 51
43132: PUSH
43133: LD_INT 0
43135: PUSH
43136: LD_INT 0
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 0
43145: PUSH
43146: LD_INT 1
43148: NEG
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 1
43156: PUSH
43157: LD_INT 0
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 1
43166: PUSH
43167: LD_INT 1
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 0
43176: PUSH
43177: LD_INT 1
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 1
43186: NEG
43187: PUSH
43188: LD_INT 0
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 1
43197: NEG
43198: PUSH
43199: LD_INT 1
43201: NEG
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 1
43209: PUSH
43210: LD_INT 2
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 0
43219: PUSH
43220: LD_INT 2
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 1
43229: NEG
43230: PUSH
43231: LD_INT 1
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 2
43240: NEG
43241: PUSH
43242: LD_INT 0
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 2
43251: NEG
43252: PUSH
43253: LD_INT 1
43255: NEG
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43275: LD_ADDR_VAR 0 52
43279: PUSH
43280: LD_INT 0
43282: PUSH
43283: LD_INT 0
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 0
43292: PUSH
43293: LD_INT 1
43295: NEG
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 1
43303: PUSH
43304: LD_INT 0
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 1
43313: PUSH
43314: LD_INT 1
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PUSH
43321: LD_INT 0
43323: PUSH
43324: LD_INT 1
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: LD_INT 1
43333: NEG
43334: PUSH
43335: LD_INT 0
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: PUSH
43342: LD_INT 1
43344: NEG
43345: PUSH
43346: LD_INT 1
43348: NEG
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 1
43356: NEG
43357: PUSH
43358: LD_INT 2
43360: NEG
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 1
43368: NEG
43369: PUSH
43370: LD_INT 1
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 2
43379: NEG
43380: PUSH
43381: LD_INT 0
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 2
43390: NEG
43391: PUSH
43392: LD_INT 1
43394: NEG
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 2
43402: NEG
43403: PUSH
43404: LD_INT 2
43406: NEG
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43426: LD_ADDR_VAR 0 53
43430: PUSH
43431: LD_INT 0
43433: PUSH
43434: LD_INT 0
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 0
43443: PUSH
43444: LD_INT 1
43446: NEG
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 1
43454: PUSH
43455: LD_INT 0
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 1
43464: PUSH
43465: LD_INT 1
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 0
43474: PUSH
43475: LD_INT 1
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 1
43484: NEG
43485: PUSH
43486: LD_INT 0
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 1
43495: NEG
43496: PUSH
43497: LD_INT 1
43499: NEG
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 1
43507: NEG
43508: PUSH
43509: LD_INT 2
43511: NEG
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 0
43519: PUSH
43520: LD_INT 2
43522: NEG
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 1
43530: PUSH
43531: LD_INT 1
43533: NEG
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: LD_INT 2
43541: PUSH
43542: LD_INT 0
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: LD_INT 2
43551: PUSH
43552: LD_INT 1
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 2
43561: PUSH
43562: LD_INT 2
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 1
43571: PUSH
43572: LD_INT 2
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 0
43581: PUSH
43582: LD_INT 2
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 1
43591: NEG
43592: PUSH
43593: LD_INT 1
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: LD_INT 2
43602: NEG
43603: PUSH
43604: LD_INT 0
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 2
43613: NEG
43614: PUSH
43615: LD_INT 1
43617: NEG
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 2
43625: NEG
43626: PUSH
43627: LD_INT 2
43629: NEG
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43656: LD_ADDR_VAR 0 54
43660: PUSH
43661: LD_INT 0
43663: PUSH
43664: LD_INT 0
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 0
43673: PUSH
43674: LD_INT 1
43676: NEG
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 1
43684: PUSH
43685: LD_INT 0
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 1
43694: PUSH
43695: LD_INT 1
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 0
43704: PUSH
43705: LD_INT 1
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 1
43714: NEG
43715: PUSH
43716: LD_INT 0
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 1
43725: NEG
43726: PUSH
43727: LD_INT 1
43729: NEG
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 1
43737: NEG
43738: PUSH
43739: LD_INT 2
43741: NEG
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 0
43749: PUSH
43750: LD_INT 2
43752: NEG
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 1
43760: PUSH
43761: LD_INT 1
43763: NEG
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 2
43771: PUSH
43772: LD_INT 0
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 2
43781: PUSH
43782: LD_INT 1
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 2
43791: PUSH
43792: LD_INT 2
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 1
43801: PUSH
43802: LD_INT 2
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 0
43811: PUSH
43812: LD_INT 2
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 1
43821: NEG
43822: PUSH
43823: LD_INT 1
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 2
43832: NEG
43833: PUSH
43834: LD_INT 0
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 2
43843: NEG
43844: PUSH
43845: LD_INT 1
43847: NEG
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 2
43855: NEG
43856: PUSH
43857: LD_INT 2
43859: NEG
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43886: LD_ADDR_VAR 0 55
43890: PUSH
43891: LD_INT 0
43893: PUSH
43894: LD_INT 0
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 0
43903: PUSH
43904: LD_INT 1
43906: NEG
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 1
43914: PUSH
43915: LD_INT 0
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 1
43924: PUSH
43925: LD_INT 1
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 0
43934: PUSH
43935: LD_INT 1
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 1
43944: NEG
43945: PUSH
43946: LD_INT 0
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 1
43955: NEG
43956: PUSH
43957: LD_INT 1
43959: NEG
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: PUSH
43965: LD_INT 1
43967: NEG
43968: PUSH
43969: LD_INT 2
43971: NEG
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 0
43979: PUSH
43980: LD_INT 2
43982: NEG
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 1
43990: PUSH
43991: LD_INT 1
43993: NEG
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 2
44001: PUSH
44002: LD_INT 0
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 2
44011: PUSH
44012: LD_INT 1
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: LD_INT 2
44021: PUSH
44022: LD_INT 2
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 1
44031: PUSH
44032: LD_INT 2
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 0
44041: PUSH
44042: LD_INT 2
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 1
44051: NEG
44052: PUSH
44053: LD_INT 1
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 2
44062: NEG
44063: PUSH
44064: LD_INT 0
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 2
44073: NEG
44074: PUSH
44075: LD_INT 1
44077: NEG
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 2
44085: NEG
44086: PUSH
44087: LD_INT 2
44089: NEG
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44116: LD_ADDR_VAR 0 56
44120: PUSH
44121: LD_INT 0
44123: PUSH
44124: LD_INT 0
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 0
44133: PUSH
44134: LD_INT 1
44136: NEG
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: LD_INT 1
44144: PUSH
44145: LD_INT 0
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 1
44154: PUSH
44155: LD_INT 1
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 0
44164: PUSH
44165: LD_INT 1
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 1
44174: NEG
44175: PUSH
44176: LD_INT 0
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 1
44185: NEG
44186: PUSH
44187: LD_INT 1
44189: NEG
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 1
44197: NEG
44198: PUSH
44199: LD_INT 2
44201: NEG
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 0
44209: PUSH
44210: LD_INT 2
44212: NEG
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 1
44220: PUSH
44221: LD_INT 1
44223: NEG
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 2
44231: PUSH
44232: LD_INT 0
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 2
44241: PUSH
44242: LD_INT 1
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 2
44251: PUSH
44252: LD_INT 2
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 1
44261: PUSH
44262: LD_INT 2
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 0
44271: PUSH
44272: LD_INT 2
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 1
44281: NEG
44282: PUSH
44283: LD_INT 1
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 2
44292: NEG
44293: PUSH
44294: LD_INT 0
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 2
44303: NEG
44304: PUSH
44305: LD_INT 1
44307: NEG
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 2
44315: NEG
44316: PUSH
44317: LD_INT 2
44319: NEG
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44346: LD_ADDR_VAR 0 57
44350: PUSH
44351: LD_INT 0
44353: PUSH
44354: LD_INT 0
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 0
44363: PUSH
44364: LD_INT 1
44366: NEG
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 1
44374: PUSH
44375: LD_INT 0
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 1
44384: PUSH
44385: LD_INT 1
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 0
44394: PUSH
44395: LD_INT 1
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 1
44404: NEG
44405: PUSH
44406: LD_INT 0
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 1
44415: NEG
44416: PUSH
44417: LD_INT 1
44419: NEG
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 1
44427: NEG
44428: PUSH
44429: LD_INT 2
44431: NEG
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 0
44439: PUSH
44440: LD_INT 2
44442: NEG
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 1
44450: PUSH
44451: LD_INT 1
44453: NEG
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 2
44461: PUSH
44462: LD_INT 0
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 2
44471: PUSH
44472: LD_INT 1
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 2
44481: PUSH
44482: LD_INT 2
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 1
44491: PUSH
44492: LD_INT 2
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 0
44501: PUSH
44502: LD_INT 2
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 1
44511: NEG
44512: PUSH
44513: LD_INT 1
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 2
44522: NEG
44523: PUSH
44524: LD_INT 0
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 2
44533: NEG
44534: PUSH
44535: LD_INT 1
44537: NEG
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 2
44545: NEG
44546: PUSH
44547: LD_INT 2
44549: NEG
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44576: LD_ADDR_VAR 0 58
44580: PUSH
44581: LD_INT 0
44583: PUSH
44584: LD_INT 0
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 0
44593: PUSH
44594: LD_INT 1
44596: NEG
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 1
44604: PUSH
44605: LD_INT 0
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 1
44614: PUSH
44615: LD_INT 1
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 0
44624: PUSH
44625: LD_INT 1
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 1
44634: NEG
44635: PUSH
44636: LD_INT 0
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 1
44645: NEG
44646: PUSH
44647: LD_INT 1
44649: NEG
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 1
44657: NEG
44658: PUSH
44659: LD_INT 2
44661: NEG
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 0
44669: PUSH
44670: LD_INT 2
44672: NEG
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 1
44680: PUSH
44681: LD_INT 1
44683: NEG
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 2
44691: PUSH
44692: LD_INT 0
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 2
44701: PUSH
44702: LD_INT 1
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 2
44711: PUSH
44712: LD_INT 2
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 1
44721: PUSH
44722: LD_INT 2
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 0
44731: PUSH
44732: LD_INT 2
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 1
44741: NEG
44742: PUSH
44743: LD_INT 1
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 2
44752: NEG
44753: PUSH
44754: LD_INT 0
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 2
44763: NEG
44764: PUSH
44765: LD_INT 1
44767: NEG
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 2
44775: NEG
44776: PUSH
44777: LD_INT 2
44779: NEG
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44806: LD_ADDR_VAR 0 59
44810: PUSH
44811: LD_INT 0
44813: PUSH
44814: LD_INT 0
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 0
44823: PUSH
44824: LD_INT 1
44826: NEG
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 1
44834: PUSH
44835: LD_INT 0
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 1
44844: PUSH
44845: LD_INT 1
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 0
44854: PUSH
44855: LD_INT 1
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 1
44864: NEG
44865: PUSH
44866: LD_INT 0
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 1
44875: NEG
44876: PUSH
44877: LD_INT 1
44879: NEG
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44894: LD_ADDR_VAR 0 60
44898: PUSH
44899: LD_INT 0
44901: PUSH
44902: LD_INT 0
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 0
44911: PUSH
44912: LD_INT 1
44914: NEG
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 1
44922: PUSH
44923: LD_INT 0
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 1
44932: PUSH
44933: LD_INT 1
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 0
44942: PUSH
44943: LD_INT 1
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 1
44952: NEG
44953: PUSH
44954: LD_INT 0
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 1
44963: NEG
44964: PUSH
44965: LD_INT 1
44967: NEG
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44982: LD_ADDR_VAR 0 61
44986: PUSH
44987: LD_INT 0
44989: PUSH
44990: LD_INT 0
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 0
44999: PUSH
45000: LD_INT 1
45002: NEG
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 1
45010: PUSH
45011: LD_INT 0
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 1
45020: PUSH
45021: LD_INT 1
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 0
45030: PUSH
45031: LD_INT 1
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 1
45040: NEG
45041: PUSH
45042: LD_INT 0
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 1
45051: NEG
45052: PUSH
45053: LD_INT 1
45055: NEG
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45070: LD_ADDR_VAR 0 62
45074: PUSH
45075: LD_INT 0
45077: PUSH
45078: LD_INT 0
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 0
45087: PUSH
45088: LD_INT 1
45090: NEG
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 1
45098: PUSH
45099: LD_INT 0
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 1
45108: PUSH
45109: LD_INT 1
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 0
45118: PUSH
45119: LD_INT 1
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 1
45128: NEG
45129: PUSH
45130: LD_INT 0
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 1
45139: NEG
45140: PUSH
45141: LD_INT 1
45143: NEG
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45158: LD_ADDR_VAR 0 63
45162: PUSH
45163: LD_INT 0
45165: PUSH
45166: LD_INT 0
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 0
45175: PUSH
45176: LD_INT 1
45178: NEG
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 1
45186: PUSH
45187: LD_INT 0
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 1
45196: PUSH
45197: LD_INT 1
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 0
45206: PUSH
45207: LD_INT 1
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 1
45216: NEG
45217: PUSH
45218: LD_INT 0
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 1
45227: NEG
45228: PUSH
45229: LD_INT 1
45231: NEG
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45246: LD_ADDR_VAR 0 64
45250: PUSH
45251: LD_INT 0
45253: PUSH
45254: LD_INT 0
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 0
45263: PUSH
45264: LD_INT 1
45266: NEG
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 1
45274: PUSH
45275: LD_INT 0
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 1
45284: PUSH
45285: LD_INT 1
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 0
45294: PUSH
45295: LD_INT 1
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 1
45304: NEG
45305: PUSH
45306: LD_INT 0
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 1
45315: NEG
45316: PUSH
45317: LD_INT 1
45319: NEG
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: ST_TO_ADDR
// end ; 1 :
45334: GO 51231
45336: LD_INT 1
45338: DOUBLE
45339: EQUAL
45340: IFTRUE 45344
45342: GO 47967
45344: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45345: LD_ADDR_VAR 0 11
45349: PUSH
45350: LD_INT 1
45352: NEG
45353: PUSH
45354: LD_INT 3
45356: NEG
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 0
45364: PUSH
45365: LD_INT 3
45367: NEG
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 1
45375: PUSH
45376: LD_INT 2
45378: NEG
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: LIST
45388: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45389: LD_ADDR_VAR 0 12
45393: PUSH
45394: LD_INT 2
45396: PUSH
45397: LD_INT 1
45399: NEG
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 3
45407: PUSH
45408: LD_INT 0
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 3
45417: PUSH
45418: LD_INT 1
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: LIST
45429: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45430: LD_ADDR_VAR 0 13
45434: PUSH
45435: LD_INT 3
45437: PUSH
45438: LD_INT 2
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 3
45447: PUSH
45448: LD_INT 3
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 2
45457: PUSH
45458: LD_INT 3
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: LIST
45469: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45470: LD_ADDR_VAR 0 14
45474: PUSH
45475: LD_INT 1
45477: PUSH
45478: LD_INT 3
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 0
45487: PUSH
45488: LD_INT 3
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 1
45497: NEG
45498: PUSH
45499: LD_INT 2
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: LIST
45510: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45511: LD_ADDR_VAR 0 15
45515: PUSH
45516: LD_INT 2
45518: NEG
45519: PUSH
45520: LD_INT 1
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 3
45529: NEG
45530: PUSH
45531: LD_INT 0
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 3
45540: NEG
45541: PUSH
45542: LD_INT 1
45544: NEG
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: LIST
45554: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45555: LD_ADDR_VAR 0 16
45559: PUSH
45560: LD_INT 2
45562: NEG
45563: PUSH
45564: LD_INT 3
45566: NEG
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 3
45574: NEG
45575: PUSH
45576: LD_INT 2
45578: NEG
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 3
45586: NEG
45587: PUSH
45588: LD_INT 3
45590: NEG
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: LIST
45600: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45601: LD_ADDR_VAR 0 17
45605: PUSH
45606: LD_INT 1
45608: NEG
45609: PUSH
45610: LD_INT 3
45612: NEG
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 0
45620: PUSH
45621: LD_INT 3
45623: NEG
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 1
45631: PUSH
45632: LD_INT 2
45634: NEG
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: LIST
45644: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45645: LD_ADDR_VAR 0 18
45649: PUSH
45650: LD_INT 2
45652: PUSH
45653: LD_INT 1
45655: NEG
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 3
45663: PUSH
45664: LD_INT 0
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 3
45673: PUSH
45674: LD_INT 1
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: LIST
45685: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45686: LD_ADDR_VAR 0 19
45690: PUSH
45691: LD_INT 3
45693: PUSH
45694: LD_INT 2
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 3
45703: PUSH
45704: LD_INT 3
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 2
45713: PUSH
45714: LD_INT 3
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: LIST
45725: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45726: LD_ADDR_VAR 0 20
45730: PUSH
45731: LD_INT 1
45733: PUSH
45734: LD_INT 3
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 0
45743: PUSH
45744: LD_INT 3
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 1
45753: NEG
45754: PUSH
45755: LD_INT 2
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: LIST
45766: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45767: LD_ADDR_VAR 0 21
45771: PUSH
45772: LD_INT 2
45774: NEG
45775: PUSH
45776: LD_INT 1
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 3
45785: NEG
45786: PUSH
45787: LD_INT 0
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 3
45796: NEG
45797: PUSH
45798: LD_INT 1
45800: NEG
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: LIST
45810: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45811: LD_ADDR_VAR 0 22
45815: PUSH
45816: LD_INT 2
45818: NEG
45819: PUSH
45820: LD_INT 3
45822: NEG
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 3
45830: NEG
45831: PUSH
45832: LD_INT 2
45834: NEG
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 3
45842: NEG
45843: PUSH
45844: LD_INT 3
45846: NEG
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: LIST
45856: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
45857: LD_ADDR_VAR 0 23
45861: PUSH
45862: LD_INT 0
45864: PUSH
45865: LD_INT 3
45867: NEG
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 1
45875: NEG
45876: PUSH
45877: LD_INT 4
45879: NEG
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 1
45887: PUSH
45888: LD_INT 3
45890: NEG
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: LIST
45900: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
45901: LD_ADDR_VAR 0 24
45905: PUSH
45906: LD_INT 3
45908: PUSH
45909: LD_INT 0
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 3
45918: PUSH
45919: LD_INT 1
45921: NEG
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 4
45929: PUSH
45930: LD_INT 1
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: LIST
45941: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
45942: LD_ADDR_VAR 0 25
45946: PUSH
45947: LD_INT 3
45949: PUSH
45950: LD_INT 3
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 4
45959: PUSH
45960: LD_INT 3
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 3
45969: PUSH
45970: LD_INT 4
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: LIST
45981: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
45982: LD_ADDR_VAR 0 26
45986: PUSH
45987: LD_INT 0
45989: PUSH
45990: LD_INT 3
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 1
45999: PUSH
46000: LD_INT 4
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 1
46009: NEG
46010: PUSH
46011: LD_INT 3
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: LIST
46022: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
46023: LD_ADDR_VAR 0 27
46027: PUSH
46028: LD_INT 3
46030: NEG
46031: PUSH
46032: LD_INT 0
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 3
46041: NEG
46042: PUSH
46043: LD_INT 1
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 4
46052: NEG
46053: PUSH
46054: LD_INT 1
46056: NEG
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: LIST
46066: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
46067: LD_ADDR_VAR 0 28
46071: PUSH
46072: LD_INT 3
46074: NEG
46075: PUSH
46076: LD_INT 3
46078: NEG
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 3
46086: NEG
46087: PUSH
46088: LD_INT 4
46090: NEG
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 4
46098: NEG
46099: PUSH
46100: LD_INT 3
46102: NEG
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: LIST
46112: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
46113: LD_ADDR_VAR 0 29
46117: PUSH
46118: LD_INT 1
46120: NEG
46121: PUSH
46122: LD_INT 3
46124: NEG
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 0
46132: PUSH
46133: LD_INT 3
46135: NEG
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 1
46143: PUSH
46144: LD_INT 2
46146: NEG
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 1
46154: NEG
46155: PUSH
46156: LD_INT 4
46158: NEG
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 0
46166: PUSH
46167: LD_INT 4
46169: NEG
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 1
46177: PUSH
46178: LD_INT 3
46180: NEG
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 1
46188: NEG
46189: PUSH
46190: LD_INT 5
46192: NEG
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 0
46200: PUSH
46201: LD_INT 5
46203: NEG
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 1
46211: PUSH
46212: LD_INT 4
46214: NEG
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 1
46222: NEG
46223: PUSH
46224: LD_INT 6
46226: NEG
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 0
46234: PUSH
46235: LD_INT 6
46237: NEG
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 1
46245: PUSH
46246: LD_INT 5
46248: NEG
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
46268: LD_ADDR_VAR 0 30
46272: PUSH
46273: LD_INT 2
46275: PUSH
46276: LD_INT 1
46278: NEG
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 3
46286: PUSH
46287: LD_INT 0
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 3
46296: PUSH
46297: LD_INT 1
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 3
46306: PUSH
46307: LD_INT 1
46309: NEG
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 4
46317: PUSH
46318: LD_INT 0
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 4
46327: PUSH
46328: LD_INT 1
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 4
46337: PUSH
46338: LD_INT 1
46340: NEG
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 5
46348: PUSH
46349: LD_INT 0
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 5
46358: PUSH
46359: LD_INT 1
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 5
46368: PUSH
46369: LD_INT 1
46371: NEG
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 6
46379: PUSH
46380: LD_INT 0
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 6
46389: PUSH
46390: LD_INT 1
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
46411: LD_ADDR_VAR 0 31
46415: PUSH
46416: LD_INT 3
46418: PUSH
46419: LD_INT 2
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 3
46428: PUSH
46429: LD_INT 3
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 2
46438: PUSH
46439: LD_INT 3
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 4
46448: PUSH
46449: LD_INT 3
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 4
46458: PUSH
46459: LD_INT 4
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 3
46468: PUSH
46469: LD_INT 4
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 5
46478: PUSH
46479: LD_INT 4
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 5
46488: PUSH
46489: LD_INT 5
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 4
46498: PUSH
46499: LD_INT 5
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 6
46508: PUSH
46509: LD_INT 5
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 6
46518: PUSH
46519: LD_INT 6
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 5
46528: PUSH
46529: LD_INT 6
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
46550: LD_ADDR_VAR 0 32
46554: PUSH
46555: LD_INT 1
46557: PUSH
46558: LD_INT 3
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 0
46567: PUSH
46568: LD_INT 3
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 1
46577: NEG
46578: PUSH
46579: LD_INT 2
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 1
46588: PUSH
46589: LD_INT 4
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 0
46598: PUSH
46599: LD_INT 4
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 1
46608: NEG
46609: PUSH
46610: LD_INT 3
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 1
46619: PUSH
46620: LD_INT 5
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 0
46629: PUSH
46630: LD_INT 5
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 1
46639: NEG
46640: PUSH
46641: LD_INT 4
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 1
46650: PUSH
46651: LD_INT 6
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 0
46660: PUSH
46661: LD_INT 6
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 1
46670: NEG
46671: PUSH
46672: LD_INT 5
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
46693: LD_ADDR_VAR 0 33
46697: PUSH
46698: LD_INT 2
46700: NEG
46701: PUSH
46702: LD_INT 1
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 3
46711: NEG
46712: PUSH
46713: LD_INT 0
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 3
46722: NEG
46723: PUSH
46724: LD_INT 1
46726: NEG
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 3
46734: NEG
46735: PUSH
46736: LD_INT 1
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 4
46745: NEG
46746: PUSH
46747: LD_INT 0
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 4
46756: NEG
46757: PUSH
46758: LD_INT 1
46760: NEG
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 4
46768: NEG
46769: PUSH
46770: LD_INT 1
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 5
46779: NEG
46780: PUSH
46781: LD_INT 0
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 5
46790: NEG
46791: PUSH
46792: LD_INT 1
46794: NEG
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 5
46802: NEG
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 6
46813: NEG
46814: PUSH
46815: LD_INT 0
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 6
46824: NEG
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
46848: LD_ADDR_VAR 0 34
46852: PUSH
46853: LD_INT 2
46855: NEG
46856: PUSH
46857: LD_INT 3
46859: NEG
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 3
46867: NEG
46868: PUSH
46869: LD_INT 2
46871: NEG
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 3
46879: NEG
46880: PUSH
46881: LD_INT 3
46883: NEG
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 3
46891: NEG
46892: PUSH
46893: LD_INT 4
46895: NEG
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 4
46903: NEG
46904: PUSH
46905: LD_INT 3
46907: NEG
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 4
46915: NEG
46916: PUSH
46917: LD_INT 4
46919: NEG
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 4
46927: NEG
46928: PUSH
46929: LD_INT 5
46931: NEG
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 5
46939: NEG
46940: PUSH
46941: LD_INT 4
46943: NEG
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 5
46951: NEG
46952: PUSH
46953: LD_INT 5
46955: NEG
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 5
46963: NEG
46964: PUSH
46965: LD_INT 6
46967: NEG
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 6
46975: NEG
46976: PUSH
46977: LD_INT 5
46979: NEG
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 6
46987: NEG
46988: PUSH
46989: LD_INT 6
46991: NEG
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
47011: LD_ADDR_VAR 0 41
47015: PUSH
47016: LD_INT 0
47018: PUSH
47019: LD_INT 2
47021: NEG
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 1
47029: NEG
47030: PUSH
47031: LD_INT 3
47033: NEG
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 1
47041: PUSH
47042: LD_INT 2
47044: NEG
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: LIST
47054: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
47055: LD_ADDR_VAR 0 42
47059: PUSH
47060: LD_INT 2
47062: PUSH
47063: LD_INT 0
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 2
47072: PUSH
47073: LD_INT 1
47075: NEG
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 3
47083: PUSH
47084: LD_INT 1
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: LIST
47095: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
47096: LD_ADDR_VAR 0 43
47100: PUSH
47101: LD_INT 2
47103: PUSH
47104: LD_INT 2
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 3
47113: PUSH
47114: LD_INT 2
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 2
47123: PUSH
47124: LD_INT 3
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: LIST
47135: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
47136: LD_ADDR_VAR 0 44
47140: PUSH
47141: LD_INT 0
47143: PUSH
47144: LD_INT 2
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 1
47153: PUSH
47154: LD_INT 3
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 1
47163: NEG
47164: PUSH
47165: LD_INT 2
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: LIST
47176: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47177: LD_ADDR_VAR 0 45
47181: PUSH
47182: LD_INT 2
47184: NEG
47185: PUSH
47186: LD_INT 0
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 2
47195: NEG
47196: PUSH
47197: LD_INT 1
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 3
47206: NEG
47207: PUSH
47208: LD_INT 1
47210: NEG
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: LIST
47220: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
47221: LD_ADDR_VAR 0 46
47225: PUSH
47226: LD_INT 2
47228: NEG
47229: PUSH
47230: LD_INT 2
47232: NEG
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 2
47240: NEG
47241: PUSH
47242: LD_INT 3
47244: NEG
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 3
47252: NEG
47253: PUSH
47254: LD_INT 2
47256: NEG
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: LIST
47266: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
47267: LD_ADDR_VAR 0 47
47271: PUSH
47272: LD_INT 2
47274: NEG
47275: PUSH
47276: LD_INT 3
47278: NEG
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 1
47286: NEG
47287: PUSH
47288: LD_INT 3
47290: NEG
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47300: LD_ADDR_VAR 0 48
47304: PUSH
47305: LD_INT 1
47307: PUSH
47308: LD_INT 2
47310: NEG
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 2
47318: PUSH
47319: LD_INT 1
47321: NEG
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
47331: LD_ADDR_VAR 0 49
47335: PUSH
47336: LD_INT 3
47338: PUSH
47339: LD_INT 1
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 3
47348: PUSH
47349: LD_INT 2
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
47360: LD_ADDR_VAR 0 50
47364: PUSH
47365: LD_INT 2
47367: PUSH
47368: LD_INT 3
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 1
47377: PUSH
47378: LD_INT 3
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47389: LD_ADDR_VAR 0 51
47393: PUSH
47394: LD_INT 1
47396: NEG
47397: PUSH
47398: LD_INT 2
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 2
47407: NEG
47408: PUSH
47409: LD_INT 1
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47420: LD_ADDR_VAR 0 52
47424: PUSH
47425: LD_INT 3
47427: NEG
47428: PUSH
47429: LD_INT 1
47431: NEG
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 3
47439: NEG
47440: PUSH
47441: LD_INT 2
47443: NEG
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47453: LD_ADDR_VAR 0 53
47457: PUSH
47458: LD_INT 1
47460: NEG
47461: PUSH
47462: LD_INT 3
47464: NEG
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 0
47472: PUSH
47473: LD_INT 3
47475: NEG
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 1
47483: PUSH
47484: LD_INT 2
47486: NEG
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: LIST
47496: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47497: LD_ADDR_VAR 0 54
47501: PUSH
47502: LD_INT 2
47504: PUSH
47505: LD_INT 1
47507: NEG
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 3
47515: PUSH
47516: LD_INT 0
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 3
47525: PUSH
47526: LD_INT 1
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: LIST
47537: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47538: LD_ADDR_VAR 0 55
47542: PUSH
47543: LD_INT 3
47545: PUSH
47546: LD_INT 2
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 3
47555: PUSH
47556: LD_INT 3
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 2
47565: PUSH
47566: LD_INT 3
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: LIST
47577: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47578: LD_ADDR_VAR 0 56
47582: PUSH
47583: LD_INT 1
47585: PUSH
47586: LD_INT 3
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 0
47595: PUSH
47596: LD_INT 3
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 1
47605: NEG
47606: PUSH
47607: LD_INT 2
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: LIST
47618: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47619: LD_ADDR_VAR 0 57
47623: PUSH
47624: LD_INT 2
47626: NEG
47627: PUSH
47628: LD_INT 1
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 3
47637: NEG
47638: PUSH
47639: LD_INT 0
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 3
47648: NEG
47649: PUSH
47650: LD_INT 1
47652: NEG
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: LIST
47662: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47663: LD_ADDR_VAR 0 58
47667: PUSH
47668: LD_INT 2
47670: NEG
47671: PUSH
47672: LD_INT 3
47674: NEG
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 3
47682: NEG
47683: PUSH
47684: LD_INT 2
47686: NEG
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 3
47694: NEG
47695: PUSH
47696: LD_INT 3
47698: NEG
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: LIST
47708: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
47709: LD_ADDR_VAR 0 59
47713: PUSH
47714: LD_INT 1
47716: NEG
47717: PUSH
47718: LD_INT 2
47720: NEG
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 0
47728: PUSH
47729: LD_INT 2
47731: NEG
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 1
47739: PUSH
47740: LD_INT 1
47742: NEG
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: LIST
47752: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47753: LD_ADDR_VAR 0 60
47757: PUSH
47758: LD_INT 1
47760: PUSH
47761: LD_INT 1
47763: NEG
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 2
47771: PUSH
47772: LD_INT 0
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 2
47781: PUSH
47782: LD_INT 1
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: LIST
47793: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47794: LD_ADDR_VAR 0 61
47798: PUSH
47799: LD_INT 2
47801: PUSH
47802: LD_INT 1
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 2
47811: PUSH
47812: LD_INT 2
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 1
47821: PUSH
47822: LD_INT 2
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: LIST
47833: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47834: LD_ADDR_VAR 0 62
47838: PUSH
47839: LD_INT 1
47841: PUSH
47842: LD_INT 2
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 0
47851: PUSH
47852: LD_INT 2
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 1
47861: NEG
47862: PUSH
47863: LD_INT 1
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: LIST
47874: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47875: LD_ADDR_VAR 0 63
47879: PUSH
47880: LD_INT 1
47882: NEG
47883: PUSH
47884: LD_INT 1
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 2
47893: NEG
47894: PUSH
47895: LD_INT 0
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 2
47904: NEG
47905: PUSH
47906: LD_INT 1
47908: NEG
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: LIST
47918: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47919: LD_ADDR_VAR 0 64
47923: PUSH
47924: LD_INT 1
47926: NEG
47927: PUSH
47928: LD_INT 2
47930: NEG
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 2
47938: NEG
47939: PUSH
47940: LD_INT 1
47942: NEG
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 2
47950: NEG
47951: PUSH
47952: LD_INT 2
47954: NEG
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: LIST
47964: ST_TO_ADDR
// end ; 2 :
47965: GO 51231
47967: LD_INT 2
47969: DOUBLE
47970: EQUAL
47971: IFTRUE 47975
47973: GO 51230
47975: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
47976: LD_ADDR_VAR 0 29
47980: PUSH
47981: LD_INT 4
47983: PUSH
47984: LD_INT 0
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 4
47993: PUSH
47994: LD_INT 1
47996: NEG
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 5
48004: PUSH
48005: LD_INT 0
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 5
48014: PUSH
48015: LD_INT 1
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 4
48024: PUSH
48025: LD_INT 1
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 3
48034: PUSH
48035: LD_INT 0
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 3
48044: PUSH
48045: LD_INT 1
48047: NEG
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 3
48055: PUSH
48056: LD_INT 2
48058: NEG
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 5
48066: PUSH
48067: LD_INT 2
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 3
48076: PUSH
48077: LD_INT 3
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 3
48086: PUSH
48087: LD_INT 2
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 4
48096: PUSH
48097: LD_INT 3
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 4
48106: PUSH
48107: LD_INT 4
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 3
48116: PUSH
48117: LD_INT 4
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 2
48126: PUSH
48127: LD_INT 3
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 2
48136: PUSH
48137: LD_INT 2
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 4
48146: PUSH
48147: LD_INT 2
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 2
48156: PUSH
48157: LD_INT 4
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 0
48166: PUSH
48167: LD_INT 4
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 0
48176: PUSH
48177: LD_INT 3
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 1
48186: PUSH
48187: LD_INT 4
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 1
48196: PUSH
48197: LD_INT 5
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 0
48206: PUSH
48207: LD_INT 5
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 1
48216: NEG
48217: PUSH
48218: LD_INT 4
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 1
48227: NEG
48228: PUSH
48229: LD_INT 3
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 2
48238: PUSH
48239: LD_INT 5
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 2
48248: NEG
48249: PUSH
48250: LD_INT 3
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 3
48259: NEG
48260: PUSH
48261: LD_INT 0
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 3
48270: NEG
48271: PUSH
48272: LD_INT 1
48274: NEG
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 2
48282: NEG
48283: PUSH
48284: LD_INT 0
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 2
48293: NEG
48294: PUSH
48295: LD_INT 1
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 3
48304: NEG
48305: PUSH
48306: LD_INT 1
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 4
48315: NEG
48316: PUSH
48317: LD_INT 0
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 4
48326: NEG
48327: PUSH
48328: LD_INT 1
48330: NEG
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 4
48338: NEG
48339: PUSH
48340: LD_INT 2
48342: NEG
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 2
48350: NEG
48351: PUSH
48352: LD_INT 2
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 4
48361: NEG
48362: PUSH
48363: LD_INT 4
48365: NEG
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 4
48373: NEG
48374: PUSH
48375: LD_INT 5
48377: NEG
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 3
48385: NEG
48386: PUSH
48387: LD_INT 4
48389: NEG
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 3
48397: NEG
48398: PUSH
48399: LD_INT 3
48401: NEG
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 4
48409: NEG
48410: PUSH
48411: LD_INT 3
48413: NEG
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 5
48421: NEG
48422: PUSH
48423: LD_INT 4
48425: NEG
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 5
48433: NEG
48434: PUSH
48435: LD_INT 5
48437: NEG
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 3
48445: NEG
48446: PUSH
48447: LD_INT 5
48449: NEG
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 5
48457: NEG
48458: PUSH
48459: LD_INT 3
48461: NEG
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
48514: LD_ADDR_VAR 0 30
48518: PUSH
48519: LD_INT 4
48521: PUSH
48522: LD_INT 4
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 4
48531: PUSH
48532: LD_INT 3
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 5
48541: PUSH
48542: LD_INT 4
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 5
48551: PUSH
48552: LD_INT 5
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 4
48561: PUSH
48562: LD_INT 5
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 3
48571: PUSH
48572: LD_INT 4
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 3
48581: PUSH
48582: LD_INT 3
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 5
48591: PUSH
48592: LD_INT 3
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 3
48601: PUSH
48602: LD_INT 5
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 0
48611: PUSH
48612: LD_INT 3
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: LD_INT 2
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 1
48631: PUSH
48632: LD_INT 3
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 1
48641: PUSH
48642: LD_INT 4
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 0
48651: PUSH
48652: LD_INT 4
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 1
48661: NEG
48662: PUSH
48663: LD_INT 3
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 1
48672: NEG
48673: PUSH
48674: LD_INT 2
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 2
48683: PUSH
48684: LD_INT 4
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 2
48693: NEG
48694: PUSH
48695: LD_INT 2
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 4
48704: NEG
48705: PUSH
48706: LD_INT 0
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 4
48715: NEG
48716: PUSH
48717: LD_INT 1
48719: NEG
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 3
48727: NEG
48728: PUSH
48729: LD_INT 0
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 3
48738: NEG
48739: PUSH
48740: LD_INT 1
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 4
48749: NEG
48750: PUSH
48751: LD_INT 1
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 5
48760: NEG
48761: PUSH
48762: LD_INT 0
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 5
48771: NEG
48772: PUSH
48773: LD_INT 1
48775: NEG
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 5
48783: NEG
48784: PUSH
48785: LD_INT 2
48787: NEG
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 3
48795: NEG
48796: PUSH
48797: LD_INT 2
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 3
48806: NEG
48807: PUSH
48808: LD_INT 3
48810: NEG
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 3
48818: NEG
48819: PUSH
48820: LD_INT 4
48822: NEG
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 2
48830: NEG
48831: PUSH
48832: LD_INT 3
48834: NEG
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 2
48842: NEG
48843: PUSH
48844: LD_INT 2
48846: NEG
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 3
48854: NEG
48855: PUSH
48856: LD_INT 2
48858: NEG
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 4
48866: NEG
48867: PUSH
48868: LD_INT 3
48870: NEG
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 4
48878: NEG
48879: PUSH
48880: LD_INT 4
48882: NEG
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 2
48890: NEG
48891: PUSH
48892: LD_INT 4
48894: NEG
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 4
48902: NEG
48903: PUSH
48904: LD_INT 2
48906: NEG
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 0
48914: PUSH
48915: LD_INT 4
48917: NEG
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 0
48925: PUSH
48926: LD_INT 5
48928: NEG
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 1
48936: PUSH
48937: LD_INT 4
48939: NEG
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 1
48947: PUSH
48948: LD_INT 3
48950: NEG
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 0
48958: PUSH
48959: LD_INT 3
48961: NEG
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 1
48969: NEG
48970: PUSH
48971: LD_INT 4
48973: NEG
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 1
48981: NEG
48982: PUSH
48983: LD_INT 5
48985: NEG
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 2
48993: PUSH
48994: LD_INT 3
48996: NEG
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 2
49004: NEG
49005: PUSH
49006: LD_INT 5
49008: NEG
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
49061: LD_ADDR_VAR 0 31
49065: PUSH
49066: LD_INT 0
49068: PUSH
49069: LD_INT 4
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 0
49078: PUSH
49079: LD_INT 3
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 1
49088: PUSH
49089: LD_INT 4
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 1
49098: PUSH
49099: LD_INT 5
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 0
49108: PUSH
49109: LD_INT 5
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 1
49118: NEG
49119: PUSH
49120: LD_INT 4
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 1
49129: NEG
49130: PUSH
49131: LD_INT 3
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 2
49140: PUSH
49141: LD_INT 5
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 2
49150: NEG
49151: PUSH
49152: LD_INT 3
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 3
49161: NEG
49162: PUSH
49163: LD_INT 0
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 3
49172: NEG
49173: PUSH
49174: LD_INT 1
49176: NEG
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 2
49184: NEG
49185: PUSH
49186: LD_INT 0
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 2
49195: NEG
49196: PUSH
49197: LD_INT 1
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 3
49206: NEG
49207: PUSH
49208: LD_INT 1
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 4
49217: NEG
49218: PUSH
49219: LD_INT 0
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 4
49228: NEG
49229: PUSH
49230: LD_INT 1
49232: NEG
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 4
49240: NEG
49241: PUSH
49242: LD_INT 2
49244: NEG
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 2
49252: NEG
49253: PUSH
49254: LD_INT 2
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 4
49263: NEG
49264: PUSH
49265: LD_INT 4
49267: NEG
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 4
49275: NEG
49276: PUSH
49277: LD_INT 5
49279: NEG
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 3
49287: NEG
49288: PUSH
49289: LD_INT 4
49291: NEG
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 3
49299: NEG
49300: PUSH
49301: LD_INT 3
49303: NEG
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 4
49311: NEG
49312: PUSH
49313: LD_INT 3
49315: NEG
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 5
49323: NEG
49324: PUSH
49325: LD_INT 4
49327: NEG
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 5
49335: NEG
49336: PUSH
49337: LD_INT 5
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 3
49347: NEG
49348: PUSH
49349: LD_INT 5
49351: NEG
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 5
49359: NEG
49360: PUSH
49361: LD_INT 3
49363: NEG
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 0
49371: PUSH
49372: LD_INT 3
49374: NEG
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 0
49382: PUSH
49383: LD_INT 4
49385: NEG
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 1
49393: PUSH
49394: LD_INT 3
49396: NEG
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 1
49404: PUSH
49405: LD_INT 2
49407: NEG
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 0
49415: PUSH
49416: LD_INT 2
49418: NEG
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 1
49426: NEG
49427: PUSH
49428: LD_INT 3
49430: NEG
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 1
49438: NEG
49439: PUSH
49440: LD_INT 4
49442: NEG
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 2
49450: PUSH
49451: LD_INT 2
49453: NEG
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 2
49461: NEG
49462: PUSH
49463: LD_INT 4
49465: NEG
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 4
49473: PUSH
49474: LD_INT 0
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 4
49483: PUSH
49484: LD_INT 1
49486: NEG
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 5
49494: PUSH
49495: LD_INT 0
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 5
49504: PUSH
49505: LD_INT 1
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 4
49514: PUSH
49515: LD_INT 1
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 3
49524: PUSH
49525: LD_INT 0
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 3
49534: PUSH
49535: LD_INT 1
49537: NEG
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 3
49545: PUSH
49546: LD_INT 2
49548: NEG
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 5
49556: PUSH
49557: LD_INT 2
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
49611: LD_ADDR_VAR 0 32
49615: PUSH
49616: LD_INT 4
49618: NEG
49619: PUSH
49620: LD_INT 0
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 4
49629: NEG
49630: PUSH
49631: LD_INT 1
49633: NEG
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 3
49641: NEG
49642: PUSH
49643: LD_INT 0
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 3
49652: NEG
49653: PUSH
49654: LD_INT 1
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 4
49663: NEG
49664: PUSH
49665: LD_INT 1
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 5
49674: NEG
49675: PUSH
49676: LD_INT 0
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 5
49685: NEG
49686: PUSH
49687: LD_INT 1
49689: NEG
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 5
49697: NEG
49698: PUSH
49699: LD_INT 2
49701: NEG
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 3
49709: NEG
49710: PUSH
49711: LD_INT 2
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 3
49720: NEG
49721: PUSH
49722: LD_INT 3
49724: NEG
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 3
49732: NEG
49733: PUSH
49734: LD_INT 4
49736: NEG
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 2
49744: NEG
49745: PUSH
49746: LD_INT 3
49748: NEG
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 2
49756: NEG
49757: PUSH
49758: LD_INT 2
49760: NEG
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 3
49768: NEG
49769: PUSH
49770: LD_INT 2
49772: NEG
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 4
49780: NEG
49781: PUSH
49782: LD_INT 3
49784: NEG
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 4
49792: NEG
49793: PUSH
49794: LD_INT 4
49796: NEG
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 2
49804: NEG
49805: PUSH
49806: LD_INT 4
49808: NEG
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 4
49816: NEG
49817: PUSH
49818: LD_INT 2
49820: NEG
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 0
49828: PUSH
49829: LD_INT 4
49831: NEG
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 0
49839: PUSH
49840: LD_INT 5
49842: NEG
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 1
49850: PUSH
49851: LD_INT 4
49853: NEG
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 1
49861: PUSH
49862: LD_INT 3
49864: NEG
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 0
49872: PUSH
49873: LD_INT 3
49875: NEG
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 1
49883: NEG
49884: PUSH
49885: LD_INT 4
49887: NEG
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 1
49895: NEG
49896: PUSH
49897: LD_INT 5
49899: NEG
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 2
49907: PUSH
49908: LD_INT 3
49910: NEG
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 2
49918: NEG
49919: PUSH
49920: LD_INT 5
49922: NEG
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 3
49930: PUSH
49931: LD_INT 0
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 3
49940: PUSH
49941: LD_INT 1
49943: NEG
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 4
49951: PUSH
49952: LD_INT 0
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 4
49961: PUSH
49962: LD_INT 1
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 3
49971: PUSH
49972: LD_INT 1
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 2
49981: PUSH
49982: LD_INT 0
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 2
49991: PUSH
49992: LD_INT 1
49994: NEG
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 2
50002: PUSH
50003: LD_INT 2
50005: NEG
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 4
50013: PUSH
50014: LD_INT 2
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 4
50023: PUSH
50024: LD_INT 4
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 4
50033: PUSH
50034: LD_INT 3
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 5
50043: PUSH
50044: LD_INT 4
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 5
50053: PUSH
50054: LD_INT 5
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 4
50063: PUSH
50064: LD_INT 5
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 3
50073: PUSH
50074: LD_INT 4
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 3
50083: PUSH
50084: LD_INT 3
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 5
50093: PUSH
50094: LD_INT 3
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 3
50103: PUSH
50104: LD_INT 5
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
50158: LD_ADDR_VAR 0 33
50162: PUSH
50163: LD_INT 4
50165: NEG
50166: PUSH
50167: LD_INT 4
50169: NEG
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 4
50177: NEG
50178: PUSH
50179: LD_INT 5
50181: NEG
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 3
50189: NEG
50190: PUSH
50191: LD_INT 4
50193: NEG
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 3
50201: NEG
50202: PUSH
50203: LD_INT 3
50205: NEG
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 4
50213: NEG
50214: PUSH
50215: LD_INT 3
50217: NEG
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 5
50225: NEG
50226: PUSH
50227: LD_INT 4
50229: NEG
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 5
50237: NEG
50238: PUSH
50239: LD_INT 5
50241: NEG
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 3
50249: NEG
50250: PUSH
50251: LD_INT 5
50253: NEG
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 5
50261: NEG
50262: PUSH
50263: LD_INT 3
50265: NEG
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: LD_INT 3
50276: NEG
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 0
50284: PUSH
50285: LD_INT 4
50287: NEG
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 1
50295: PUSH
50296: LD_INT 3
50298: NEG
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 1
50306: PUSH
50307: LD_INT 2
50309: NEG
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 0
50317: PUSH
50318: LD_INT 2
50320: NEG
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 1
50328: NEG
50329: PUSH
50330: LD_INT 3
50332: NEG
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 1
50340: NEG
50341: PUSH
50342: LD_INT 4
50344: NEG
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 2
50352: PUSH
50353: LD_INT 2
50355: NEG
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 2
50363: NEG
50364: PUSH
50365: LD_INT 4
50367: NEG
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 4
50375: PUSH
50376: LD_INT 0
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 4
50385: PUSH
50386: LD_INT 1
50388: NEG
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 5
50396: PUSH
50397: LD_INT 0
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 5
50406: PUSH
50407: LD_INT 1
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 4
50416: PUSH
50417: LD_INT 1
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 3
50426: PUSH
50427: LD_INT 0
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 3
50436: PUSH
50437: LD_INT 1
50439: NEG
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 3
50447: PUSH
50448: LD_INT 2
50450: NEG
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 5
50458: PUSH
50459: LD_INT 2
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 3
50468: PUSH
50469: LD_INT 3
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 3
50478: PUSH
50479: LD_INT 2
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 4
50488: PUSH
50489: LD_INT 3
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 4
50498: PUSH
50499: LD_INT 4
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 3
50508: PUSH
50509: LD_INT 4
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 2
50518: PUSH
50519: LD_INT 3
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 2
50528: PUSH
50529: LD_INT 2
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 4
50538: PUSH
50539: LD_INT 2
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 2
50548: PUSH
50549: LD_INT 4
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 0
50558: PUSH
50559: LD_INT 4
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 0
50568: PUSH
50569: LD_INT 3
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 1
50578: PUSH
50579: LD_INT 4
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 1
50588: PUSH
50589: LD_INT 5
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 0
50598: PUSH
50599: LD_INT 5
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 1
50608: NEG
50609: PUSH
50610: LD_INT 4
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 1
50619: NEG
50620: PUSH
50621: LD_INT 3
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 2
50630: PUSH
50631: LD_INT 5
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 2
50640: NEG
50641: PUSH
50642: LD_INT 3
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
50696: LD_ADDR_VAR 0 34
50700: PUSH
50701: LD_INT 0
50703: PUSH
50704: LD_INT 4
50706: NEG
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 0
50714: PUSH
50715: LD_INT 5
50717: NEG
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 1
50725: PUSH
50726: LD_INT 4
50728: NEG
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 1
50736: PUSH
50737: LD_INT 3
50739: NEG
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 0
50747: PUSH
50748: LD_INT 3
50750: NEG
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 1
50758: NEG
50759: PUSH
50760: LD_INT 4
50762: NEG
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 1
50770: NEG
50771: PUSH
50772: LD_INT 5
50774: NEG
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 2
50782: PUSH
50783: LD_INT 3
50785: NEG
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 2
50793: NEG
50794: PUSH
50795: LD_INT 5
50797: NEG
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 3
50805: PUSH
50806: LD_INT 0
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 3
50815: PUSH
50816: LD_INT 1
50818: NEG
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 4
50826: PUSH
50827: LD_INT 0
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 4
50836: PUSH
50837: LD_INT 1
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 3
50846: PUSH
50847: LD_INT 1
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 2
50856: PUSH
50857: LD_INT 0
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 2
50866: PUSH
50867: LD_INT 1
50869: NEG
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 2
50877: PUSH
50878: LD_INT 2
50880: NEG
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 4
50888: PUSH
50889: LD_INT 2
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 4
50898: PUSH
50899: LD_INT 4
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 4
50908: PUSH
50909: LD_INT 3
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 5
50918: PUSH
50919: LD_INT 4
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 5
50928: PUSH
50929: LD_INT 5
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 4
50938: PUSH
50939: LD_INT 5
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 3
50948: PUSH
50949: LD_INT 4
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 3
50958: PUSH
50959: LD_INT 3
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 5
50968: PUSH
50969: LD_INT 3
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 3
50978: PUSH
50979: LD_INT 5
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 0
50988: PUSH
50989: LD_INT 3
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 0
50998: PUSH
50999: LD_INT 2
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 1
51008: PUSH
51009: LD_INT 3
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 1
51018: PUSH
51019: LD_INT 4
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 0
51028: PUSH
51029: LD_INT 4
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 1
51038: NEG
51039: PUSH
51040: LD_INT 3
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 1
51049: NEG
51050: PUSH
51051: LD_INT 2
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 2
51060: PUSH
51061: LD_INT 4
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 2
51070: NEG
51071: PUSH
51072: LD_INT 2
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 4
51081: NEG
51082: PUSH
51083: LD_INT 0
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 4
51092: NEG
51093: PUSH
51094: LD_INT 1
51096: NEG
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 3
51104: NEG
51105: PUSH
51106: LD_INT 0
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 3
51115: NEG
51116: PUSH
51117: LD_INT 1
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 4
51126: NEG
51127: PUSH
51128: LD_INT 1
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 5
51137: NEG
51138: PUSH
51139: LD_INT 0
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 5
51148: NEG
51149: PUSH
51150: LD_INT 1
51152: NEG
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 5
51160: NEG
51161: PUSH
51162: LD_INT 2
51164: NEG
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 3
51172: NEG
51173: PUSH
51174: LD_INT 2
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: ST_TO_ADDR
// end ; end ;
51228: GO 51231
51230: POP
// case btype of b_depot , b_warehouse :
51231: LD_VAR 0 1
51235: PUSH
51236: LD_INT 0
51238: DOUBLE
51239: EQUAL
51240: IFTRUE 51250
51242: LD_INT 1
51244: DOUBLE
51245: EQUAL
51246: IFTRUE 51250
51248: GO 51451
51250: POP
// case nation of nation_american :
51251: LD_VAR 0 5
51255: PUSH
51256: LD_INT 1
51258: DOUBLE
51259: EQUAL
51260: IFTRUE 51264
51262: GO 51320
51264: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
51265: LD_ADDR_VAR 0 9
51269: PUSH
51270: LD_VAR 0 11
51274: PUSH
51275: LD_VAR 0 12
51279: PUSH
51280: LD_VAR 0 13
51284: PUSH
51285: LD_VAR 0 14
51289: PUSH
51290: LD_VAR 0 15
51294: PUSH
51295: LD_VAR 0 16
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: PUSH
51308: LD_VAR 0 4
51312: PUSH
51313: LD_INT 1
51315: PLUS
51316: ARRAY
51317: ST_TO_ADDR
51318: GO 51449
51320: LD_INT 2
51322: DOUBLE
51323: EQUAL
51324: IFTRUE 51328
51326: GO 51384
51328: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
51329: LD_ADDR_VAR 0 9
51333: PUSH
51334: LD_VAR 0 17
51338: PUSH
51339: LD_VAR 0 18
51343: PUSH
51344: LD_VAR 0 19
51348: PUSH
51349: LD_VAR 0 20
51353: PUSH
51354: LD_VAR 0 21
51358: PUSH
51359: LD_VAR 0 22
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: PUSH
51372: LD_VAR 0 4
51376: PUSH
51377: LD_INT 1
51379: PLUS
51380: ARRAY
51381: ST_TO_ADDR
51382: GO 51449
51384: LD_INT 3
51386: DOUBLE
51387: EQUAL
51388: IFTRUE 51392
51390: GO 51448
51392: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
51393: LD_ADDR_VAR 0 9
51397: PUSH
51398: LD_VAR 0 23
51402: PUSH
51403: LD_VAR 0 24
51407: PUSH
51408: LD_VAR 0 25
51412: PUSH
51413: LD_VAR 0 26
51417: PUSH
51418: LD_VAR 0 27
51422: PUSH
51423: LD_VAR 0 28
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: PUSH
51436: LD_VAR 0 4
51440: PUSH
51441: LD_INT 1
51443: PLUS
51444: ARRAY
51445: ST_TO_ADDR
51446: GO 51449
51448: POP
51449: GO 52004
51451: LD_INT 2
51453: DOUBLE
51454: EQUAL
51455: IFTRUE 51465
51457: LD_INT 3
51459: DOUBLE
51460: EQUAL
51461: IFTRUE 51465
51463: GO 51521
51465: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
51466: LD_ADDR_VAR 0 9
51470: PUSH
51471: LD_VAR 0 29
51475: PUSH
51476: LD_VAR 0 30
51480: PUSH
51481: LD_VAR 0 31
51485: PUSH
51486: LD_VAR 0 32
51490: PUSH
51491: LD_VAR 0 33
51495: PUSH
51496: LD_VAR 0 34
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: PUSH
51509: LD_VAR 0 4
51513: PUSH
51514: LD_INT 1
51516: PLUS
51517: ARRAY
51518: ST_TO_ADDR
51519: GO 52004
51521: LD_INT 16
51523: DOUBLE
51524: EQUAL
51525: IFTRUE 51583
51527: LD_INT 17
51529: DOUBLE
51530: EQUAL
51531: IFTRUE 51583
51533: LD_INT 18
51535: DOUBLE
51536: EQUAL
51537: IFTRUE 51583
51539: LD_INT 19
51541: DOUBLE
51542: EQUAL
51543: IFTRUE 51583
51545: LD_INT 22
51547: DOUBLE
51548: EQUAL
51549: IFTRUE 51583
51551: LD_INT 20
51553: DOUBLE
51554: EQUAL
51555: IFTRUE 51583
51557: LD_INT 21
51559: DOUBLE
51560: EQUAL
51561: IFTRUE 51583
51563: LD_INT 23
51565: DOUBLE
51566: EQUAL
51567: IFTRUE 51583
51569: LD_INT 24
51571: DOUBLE
51572: EQUAL
51573: IFTRUE 51583
51575: LD_INT 25
51577: DOUBLE
51578: EQUAL
51579: IFTRUE 51583
51581: GO 51639
51583: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
51584: LD_ADDR_VAR 0 9
51588: PUSH
51589: LD_VAR 0 35
51593: PUSH
51594: LD_VAR 0 36
51598: PUSH
51599: LD_VAR 0 37
51603: PUSH
51604: LD_VAR 0 38
51608: PUSH
51609: LD_VAR 0 39
51613: PUSH
51614: LD_VAR 0 40
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: PUSH
51627: LD_VAR 0 4
51631: PUSH
51632: LD_INT 1
51634: PLUS
51635: ARRAY
51636: ST_TO_ADDR
51637: GO 52004
51639: LD_INT 6
51641: DOUBLE
51642: EQUAL
51643: IFTRUE 51695
51645: LD_INT 7
51647: DOUBLE
51648: EQUAL
51649: IFTRUE 51695
51651: LD_INT 8
51653: DOUBLE
51654: EQUAL
51655: IFTRUE 51695
51657: LD_INT 13
51659: DOUBLE
51660: EQUAL
51661: IFTRUE 51695
51663: LD_INT 12
51665: DOUBLE
51666: EQUAL
51667: IFTRUE 51695
51669: LD_INT 15
51671: DOUBLE
51672: EQUAL
51673: IFTRUE 51695
51675: LD_INT 11
51677: DOUBLE
51678: EQUAL
51679: IFTRUE 51695
51681: LD_INT 14
51683: DOUBLE
51684: EQUAL
51685: IFTRUE 51695
51687: LD_INT 10
51689: DOUBLE
51690: EQUAL
51691: IFTRUE 51695
51693: GO 51751
51695: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
51696: LD_ADDR_VAR 0 9
51700: PUSH
51701: LD_VAR 0 41
51705: PUSH
51706: LD_VAR 0 42
51710: PUSH
51711: LD_VAR 0 43
51715: PUSH
51716: LD_VAR 0 44
51720: PUSH
51721: LD_VAR 0 45
51725: PUSH
51726: LD_VAR 0 46
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: PUSH
51739: LD_VAR 0 4
51743: PUSH
51744: LD_INT 1
51746: PLUS
51747: ARRAY
51748: ST_TO_ADDR
51749: GO 52004
51751: LD_INT 36
51753: DOUBLE
51754: EQUAL
51755: IFTRUE 51759
51757: GO 51815
51759: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
51760: LD_ADDR_VAR 0 9
51764: PUSH
51765: LD_VAR 0 47
51769: PUSH
51770: LD_VAR 0 48
51774: PUSH
51775: LD_VAR 0 49
51779: PUSH
51780: LD_VAR 0 50
51784: PUSH
51785: LD_VAR 0 51
51789: PUSH
51790: LD_VAR 0 52
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: PUSH
51803: LD_VAR 0 4
51807: PUSH
51808: LD_INT 1
51810: PLUS
51811: ARRAY
51812: ST_TO_ADDR
51813: GO 52004
51815: LD_INT 4
51817: DOUBLE
51818: EQUAL
51819: IFTRUE 51841
51821: LD_INT 5
51823: DOUBLE
51824: EQUAL
51825: IFTRUE 51841
51827: LD_INT 34
51829: DOUBLE
51830: EQUAL
51831: IFTRUE 51841
51833: LD_INT 37
51835: DOUBLE
51836: EQUAL
51837: IFTRUE 51841
51839: GO 51897
51841: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
51842: LD_ADDR_VAR 0 9
51846: PUSH
51847: LD_VAR 0 53
51851: PUSH
51852: LD_VAR 0 54
51856: PUSH
51857: LD_VAR 0 55
51861: PUSH
51862: LD_VAR 0 56
51866: PUSH
51867: LD_VAR 0 57
51871: PUSH
51872: LD_VAR 0 58
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: PUSH
51885: LD_VAR 0 4
51889: PUSH
51890: LD_INT 1
51892: PLUS
51893: ARRAY
51894: ST_TO_ADDR
51895: GO 52004
51897: LD_INT 31
51899: DOUBLE
51900: EQUAL
51901: IFTRUE 51947
51903: LD_INT 32
51905: DOUBLE
51906: EQUAL
51907: IFTRUE 51947
51909: LD_INT 33
51911: DOUBLE
51912: EQUAL
51913: IFTRUE 51947
51915: LD_INT 27
51917: DOUBLE
51918: EQUAL
51919: IFTRUE 51947
51921: LD_INT 26
51923: DOUBLE
51924: EQUAL
51925: IFTRUE 51947
51927: LD_INT 28
51929: DOUBLE
51930: EQUAL
51931: IFTRUE 51947
51933: LD_INT 29
51935: DOUBLE
51936: EQUAL
51937: IFTRUE 51947
51939: LD_INT 30
51941: DOUBLE
51942: EQUAL
51943: IFTRUE 51947
51945: GO 52003
51947: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
51948: LD_ADDR_VAR 0 9
51952: PUSH
51953: LD_VAR 0 59
51957: PUSH
51958: LD_VAR 0 60
51962: PUSH
51963: LD_VAR 0 61
51967: PUSH
51968: LD_VAR 0 62
51972: PUSH
51973: LD_VAR 0 63
51977: PUSH
51978: LD_VAR 0 64
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: PUSH
51991: LD_VAR 0 4
51995: PUSH
51996: LD_INT 1
51998: PLUS
51999: ARRAY
52000: ST_TO_ADDR
52001: GO 52004
52003: POP
// temp_list2 = [ ] ;
52004: LD_ADDR_VAR 0 10
52008: PUSH
52009: EMPTY
52010: ST_TO_ADDR
// for i in temp_list do
52011: LD_ADDR_VAR 0 8
52015: PUSH
52016: LD_VAR 0 9
52020: PUSH
52021: FOR_IN
52022: IFFALSE 52074
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
52024: LD_ADDR_VAR 0 10
52028: PUSH
52029: LD_VAR 0 10
52033: PUSH
52034: LD_VAR 0 8
52038: PUSH
52039: LD_INT 1
52041: ARRAY
52042: PUSH
52043: LD_VAR 0 2
52047: PLUS
52048: PUSH
52049: LD_VAR 0 8
52053: PUSH
52054: LD_INT 2
52056: ARRAY
52057: PUSH
52058: LD_VAR 0 3
52062: PLUS
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: EMPTY
52069: LIST
52070: ADD
52071: ST_TO_ADDR
52072: GO 52021
52074: POP
52075: POP
// result = temp_list2 ;
52076: LD_ADDR_VAR 0 7
52080: PUSH
52081: LD_VAR 0 10
52085: ST_TO_ADDR
// end ;
52086: LD_VAR 0 7
52090: RET
// export function EnemyInRange ( unit , dist ) ; begin
52091: LD_INT 0
52093: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
52094: LD_ADDR_VAR 0 3
52098: PUSH
52099: LD_VAR 0 1
52103: PPUSH
52104: CALL_OW 255
52108: PPUSH
52109: LD_VAR 0 1
52113: PPUSH
52114: CALL_OW 250
52118: PPUSH
52119: LD_VAR 0 1
52123: PPUSH
52124: CALL_OW 251
52128: PPUSH
52129: LD_VAR 0 2
52133: PPUSH
52134: CALL 25464 0 4
52138: PUSH
52139: LD_INT 4
52141: ARRAY
52142: ST_TO_ADDR
// end ;
52143: LD_VAR 0 3
52147: RET
// export function PlayerSeeMe ( unit ) ; begin
52148: LD_INT 0
52150: PPUSH
// result := See ( your_side , unit ) ;
52151: LD_ADDR_VAR 0 2
52155: PUSH
52156: LD_OWVAR 2
52160: PPUSH
52161: LD_VAR 0 1
52165: PPUSH
52166: CALL_OW 292
52170: ST_TO_ADDR
// end ;
52171: LD_VAR 0 2
52175: RET
// export function ReverseDir ( unit ) ; begin
52176: LD_INT 0
52178: PPUSH
// if not unit then
52179: LD_VAR 0 1
52183: NOT
52184: IFFALSE 52188
// exit ;
52186: GO 52211
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
52188: LD_ADDR_VAR 0 2
52192: PUSH
52193: LD_VAR 0 1
52197: PPUSH
52198: CALL_OW 254
52202: PUSH
52203: LD_INT 3
52205: PLUS
52206: PUSH
52207: LD_INT 6
52209: MOD
52210: ST_TO_ADDR
// end ;
52211: LD_VAR 0 2
52215: RET
// export function ReverseArray ( array ) ; var i ; begin
52216: LD_INT 0
52218: PPUSH
52219: PPUSH
// if not array then
52220: LD_VAR 0 1
52224: NOT
52225: IFFALSE 52229
// exit ;
52227: GO 52284
// result := [ ] ;
52229: LD_ADDR_VAR 0 2
52233: PUSH
52234: EMPTY
52235: ST_TO_ADDR
// for i := array downto 1 do
52236: LD_ADDR_VAR 0 3
52240: PUSH
52241: DOUBLE
52242: LD_VAR 0 1
52246: INC
52247: ST_TO_ADDR
52248: LD_INT 1
52250: PUSH
52251: FOR_DOWNTO
52252: IFFALSE 52282
// result := Join ( result , array [ i ] ) ;
52254: LD_ADDR_VAR 0 2
52258: PUSH
52259: LD_VAR 0 2
52263: PPUSH
52264: LD_VAR 0 1
52268: PUSH
52269: LD_VAR 0 3
52273: ARRAY
52274: PPUSH
52275: CALL 56940 0 2
52279: ST_TO_ADDR
52280: GO 52251
52282: POP
52283: POP
// end ;
52284: LD_VAR 0 2
52288: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
52289: LD_INT 0
52291: PPUSH
52292: PPUSH
52293: PPUSH
52294: PPUSH
52295: PPUSH
52296: PPUSH
// if not unit or not hexes then
52297: LD_VAR 0 1
52301: NOT
52302: PUSH
52303: LD_VAR 0 2
52307: NOT
52308: OR
52309: IFFALSE 52313
// exit ;
52311: GO 52436
// dist := 9999 ;
52313: LD_ADDR_VAR 0 5
52317: PUSH
52318: LD_INT 9999
52320: ST_TO_ADDR
// for i = 1 to hexes do
52321: LD_ADDR_VAR 0 4
52325: PUSH
52326: DOUBLE
52327: LD_INT 1
52329: DEC
52330: ST_TO_ADDR
52331: LD_VAR 0 2
52335: PUSH
52336: FOR_TO
52337: IFFALSE 52424
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52339: LD_ADDR_VAR 0 6
52343: PUSH
52344: LD_VAR 0 1
52348: PPUSH
52349: LD_VAR 0 2
52353: PUSH
52354: LD_VAR 0 4
52358: ARRAY
52359: PUSH
52360: LD_INT 1
52362: ARRAY
52363: PPUSH
52364: LD_VAR 0 2
52368: PUSH
52369: LD_VAR 0 4
52373: ARRAY
52374: PUSH
52375: LD_INT 2
52377: ARRAY
52378: PPUSH
52379: CALL_OW 297
52383: ST_TO_ADDR
// if tdist < dist then
52384: LD_VAR 0 6
52388: PUSH
52389: LD_VAR 0 5
52393: LESS
52394: IFFALSE 52422
// begin hex := hexes [ i ] ;
52396: LD_ADDR_VAR 0 8
52400: PUSH
52401: LD_VAR 0 2
52405: PUSH
52406: LD_VAR 0 4
52410: ARRAY
52411: ST_TO_ADDR
// dist := tdist ;
52412: LD_ADDR_VAR 0 5
52416: PUSH
52417: LD_VAR 0 6
52421: ST_TO_ADDR
// end ; end ;
52422: GO 52336
52424: POP
52425: POP
// result := hex ;
52426: LD_ADDR_VAR 0 3
52430: PUSH
52431: LD_VAR 0 8
52435: ST_TO_ADDR
// end ;
52436: LD_VAR 0 3
52440: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
52441: LD_INT 0
52443: PPUSH
52444: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
52445: LD_VAR 0 1
52449: NOT
52450: PUSH
52451: LD_VAR 0 1
52455: PUSH
52456: LD_INT 21
52458: PUSH
52459: LD_INT 2
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 23
52468: PUSH
52469: LD_INT 2
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PPUSH
52480: CALL_OW 69
52484: IN
52485: NOT
52486: OR
52487: IFFALSE 52491
// exit ;
52489: GO 52538
// for i = 1 to 3 do
52491: LD_ADDR_VAR 0 3
52495: PUSH
52496: DOUBLE
52497: LD_INT 1
52499: DEC
52500: ST_TO_ADDR
52501: LD_INT 3
52503: PUSH
52504: FOR_TO
52505: IFFALSE 52536
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
52507: LD_VAR 0 1
52511: PPUSH
52512: CALL_OW 250
52516: PPUSH
52517: LD_VAR 0 1
52521: PPUSH
52522: CALL_OW 251
52526: PPUSH
52527: LD_INT 1
52529: PPUSH
52530: CALL_OW 453
52534: GO 52504
52536: POP
52537: POP
// end ;
52538: LD_VAR 0 2
52542: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
52543: LD_INT 0
52545: PPUSH
52546: PPUSH
52547: PPUSH
52548: PPUSH
52549: PPUSH
52550: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
52551: LD_VAR 0 1
52555: NOT
52556: PUSH
52557: LD_VAR 0 2
52561: NOT
52562: OR
52563: PUSH
52564: LD_VAR 0 1
52568: PPUSH
52569: CALL_OW 314
52573: OR
52574: IFFALSE 52578
// exit ;
52576: GO 53045
// if GetLives ( i ) < 250 then
52578: LD_VAR 0 4
52582: PPUSH
52583: CALL_OW 256
52587: PUSH
52588: LD_INT 250
52590: LESS
52591: IFFALSE 52604
// begin ComAutodestruct ( i ) ;
52593: LD_VAR 0 4
52597: PPUSH
52598: CALL 52441 0 1
// exit ;
52602: GO 53045
// end ; x := GetX ( enemy_unit ) ;
52604: LD_ADDR_VAR 0 7
52608: PUSH
52609: LD_VAR 0 2
52613: PPUSH
52614: CALL_OW 250
52618: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
52619: LD_ADDR_VAR 0 8
52623: PUSH
52624: LD_VAR 0 2
52628: PPUSH
52629: CALL_OW 251
52633: ST_TO_ADDR
// if not x or not y then
52634: LD_VAR 0 7
52638: NOT
52639: PUSH
52640: LD_VAR 0 8
52644: NOT
52645: OR
52646: IFFALSE 52650
// exit ;
52648: GO 53045
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
52650: LD_ADDR_VAR 0 6
52654: PUSH
52655: LD_VAR 0 7
52659: PPUSH
52660: LD_INT 0
52662: PPUSH
52663: LD_INT 4
52665: PPUSH
52666: CALL_OW 272
52670: PUSH
52671: LD_VAR 0 8
52675: PPUSH
52676: LD_INT 0
52678: PPUSH
52679: LD_INT 4
52681: PPUSH
52682: CALL_OW 273
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_VAR 0 7
52695: PPUSH
52696: LD_INT 1
52698: PPUSH
52699: LD_INT 4
52701: PPUSH
52702: CALL_OW 272
52706: PUSH
52707: LD_VAR 0 8
52711: PPUSH
52712: LD_INT 1
52714: PPUSH
52715: LD_INT 4
52717: PPUSH
52718: CALL_OW 273
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_VAR 0 7
52731: PPUSH
52732: LD_INT 2
52734: PPUSH
52735: LD_INT 4
52737: PPUSH
52738: CALL_OW 272
52742: PUSH
52743: LD_VAR 0 8
52747: PPUSH
52748: LD_INT 2
52750: PPUSH
52751: LD_INT 4
52753: PPUSH
52754: CALL_OW 273
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_VAR 0 7
52767: PPUSH
52768: LD_INT 3
52770: PPUSH
52771: LD_INT 4
52773: PPUSH
52774: CALL_OW 272
52778: PUSH
52779: LD_VAR 0 8
52783: PPUSH
52784: LD_INT 3
52786: PPUSH
52787: LD_INT 4
52789: PPUSH
52790: CALL_OW 273
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_VAR 0 7
52803: PPUSH
52804: LD_INT 4
52806: PPUSH
52807: LD_INT 4
52809: PPUSH
52810: CALL_OW 272
52814: PUSH
52815: LD_VAR 0 8
52819: PPUSH
52820: LD_INT 4
52822: PPUSH
52823: LD_INT 4
52825: PPUSH
52826: CALL_OW 273
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_VAR 0 7
52839: PPUSH
52840: LD_INT 5
52842: PPUSH
52843: LD_INT 4
52845: PPUSH
52846: CALL_OW 272
52850: PUSH
52851: LD_VAR 0 8
52855: PPUSH
52856: LD_INT 5
52858: PPUSH
52859: LD_INT 4
52861: PPUSH
52862: CALL_OW 273
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: ST_TO_ADDR
// for i = tmp downto 1 do
52879: LD_ADDR_VAR 0 4
52883: PUSH
52884: DOUBLE
52885: LD_VAR 0 6
52889: INC
52890: ST_TO_ADDR
52891: LD_INT 1
52893: PUSH
52894: FOR_DOWNTO
52895: IFFALSE 52996
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
52897: LD_VAR 0 6
52901: PUSH
52902: LD_VAR 0 4
52906: ARRAY
52907: PUSH
52908: LD_INT 1
52910: ARRAY
52911: PPUSH
52912: LD_VAR 0 6
52916: PUSH
52917: LD_VAR 0 4
52921: ARRAY
52922: PUSH
52923: LD_INT 2
52925: ARRAY
52926: PPUSH
52927: CALL_OW 488
52931: NOT
52932: PUSH
52933: LD_VAR 0 6
52937: PUSH
52938: LD_VAR 0 4
52942: ARRAY
52943: PUSH
52944: LD_INT 1
52946: ARRAY
52947: PPUSH
52948: LD_VAR 0 6
52952: PUSH
52953: LD_VAR 0 4
52957: ARRAY
52958: PUSH
52959: LD_INT 2
52961: ARRAY
52962: PPUSH
52963: CALL_OW 428
52967: PUSH
52968: LD_INT 0
52970: NONEQUAL
52971: OR
52972: IFFALSE 52994
// tmp := Delete ( tmp , i ) ;
52974: LD_ADDR_VAR 0 6
52978: PUSH
52979: LD_VAR 0 6
52983: PPUSH
52984: LD_VAR 0 4
52988: PPUSH
52989: CALL_OW 3
52993: ST_TO_ADDR
52994: GO 52894
52996: POP
52997: POP
// j := GetClosestHex ( unit , tmp ) ;
52998: LD_ADDR_VAR 0 5
53002: PUSH
53003: LD_VAR 0 1
53007: PPUSH
53008: LD_VAR 0 6
53012: PPUSH
53013: CALL 52289 0 2
53017: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
53018: LD_VAR 0 1
53022: PPUSH
53023: LD_VAR 0 5
53027: PUSH
53028: LD_INT 1
53030: ARRAY
53031: PPUSH
53032: LD_VAR 0 5
53036: PUSH
53037: LD_INT 2
53039: ARRAY
53040: PPUSH
53041: CALL_OW 111
// end ;
53045: LD_VAR 0 3
53049: RET
// export function PrepareApemanSoldier ( ) ; begin
53050: LD_INT 0
53052: PPUSH
// uc_nation := 0 ;
53053: LD_ADDR_OWVAR 21
53057: PUSH
53058: LD_INT 0
53060: ST_TO_ADDR
// hc_sex := sex_male ;
53061: LD_ADDR_OWVAR 27
53065: PUSH
53066: LD_INT 1
53068: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
53069: LD_ADDR_OWVAR 28
53073: PUSH
53074: LD_INT 15
53076: ST_TO_ADDR
// hc_gallery :=  ;
53077: LD_ADDR_OWVAR 33
53081: PUSH
53082: LD_STRING 
53084: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
53085: LD_ADDR_OWVAR 31
53089: PUSH
53090: LD_INT 0
53092: PPUSH
53093: LD_INT 3
53095: PPUSH
53096: CALL_OW 12
53100: PUSH
53101: LD_INT 0
53103: PPUSH
53104: LD_INT 3
53106: PPUSH
53107: CALL_OW 12
53111: PUSH
53112: LD_INT 0
53114: PUSH
53115: LD_INT 0
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: ST_TO_ADDR
// end ;
53124: LD_VAR 0 1
53128: RET
// export function PrepareApemanEngineer ( ) ; begin
53129: LD_INT 0
53131: PPUSH
// uc_nation := 0 ;
53132: LD_ADDR_OWVAR 21
53136: PUSH
53137: LD_INT 0
53139: ST_TO_ADDR
// hc_sex := sex_male ;
53140: LD_ADDR_OWVAR 27
53144: PUSH
53145: LD_INT 1
53147: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
53148: LD_ADDR_OWVAR 28
53152: PUSH
53153: LD_INT 16
53155: ST_TO_ADDR
// hc_gallery :=  ;
53156: LD_ADDR_OWVAR 33
53160: PUSH
53161: LD_STRING 
53163: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
53164: LD_ADDR_OWVAR 31
53168: PUSH
53169: LD_INT 0
53171: PPUSH
53172: LD_INT 3
53174: PPUSH
53175: CALL_OW 12
53179: PUSH
53180: LD_INT 0
53182: PPUSH
53183: LD_INT 3
53185: PPUSH
53186: CALL_OW 12
53190: PUSH
53191: LD_INT 0
53193: PUSH
53194: LD_INT 0
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: ST_TO_ADDR
// end ;
53203: LD_VAR 0 1
53207: RET
// export function PrepareApeman ( agressivity ) ; begin
53208: LD_INT 0
53210: PPUSH
// uc_side := 0 ;
53211: LD_ADDR_OWVAR 20
53215: PUSH
53216: LD_INT 0
53218: ST_TO_ADDR
// uc_nation := 0 ;
53219: LD_ADDR_OWVAR 21
53223: PUSH
53224: LD_INT 0
53226: ST_TO_ADDR
// hc_sex := sex_male ;
53227: LD_ADDR_OWVAR 27
53231: PUSH
53232: LD_INT 1
53234: ST_TO_ADDR
// hc_class := class_apeman ;
53235: LD_ADDR_OWVAR 28
53239: PUSH
53240: LD_INT 12
53242: ST_TO_ADDR
// hc_gallery :=  ;
53243: LD_ADDR_OWVAR 33
53247: PUSH
53248: LD_STRING 
53250: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
53251: LD_ADDR_OWVAR 35
53255: PUSH
53256: LD_VAR 0 1
53260: NEG
53261: PPUSH
53262: LD_VAR 0 1
53266: PPUSH
53267: CALL_OW 12
53271: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
53272: LD_ADDR_OWVAR 31
53276: PUSH
53277: LD_INT 0
53279: PPUSH
53280: LD_INT 3
53282: PPUSH
53283: CALL_OW 12
53287: PUSH
53288: LD_INT 0
53290: PPUSH
53291: LD_INT 3
53293: PPUSH
53294: CALL_OW 12
53298: PUSH
53299: LD_INT 0
53301: PUSH
53302: LD_INT 0
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: ST_TO_ADDR
// end ;
53311: LD_VAR 0 2
53315: RET
// export function PrepareTiger ( agressivity ) ; begin
53316: LD_INT 0
53318: PPUSH
// uc_side := 0 ;
53319: LD_ADDR_OWVAR 20
53323: PUSH
53324: LD_INT 0
53326: ST_TO_ADDR
// uc_nation := 0 ;
53327: LD_ADDR_OWVAR 21
53331: PUSH
53332: LD_INT 0
53334: ST_TO_ADDR
// hc_class := class_tiger ;
53335: LD_ADDR_OWVAR 28
53339: PUSH
53340: LD_INT 14
53342: ST_TO_ADDR
// hc_gallery :=  ;
53343: LD_ADDR_OWVAR 33
53347: PUSH
53348: LD_STRING 
53350: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
53351: LD_ADDR_OWVAR 35
53355: PUSH
53356: LD_VAR 0 1
53360: NEG
53361: PPUSH
53362: LD_VAR 0 1
53366: PPUSH
53367: CALL_OW 12
53371: ST_TO_ADDR
// end ;
53372: LD_VAR 0 2
53376: RET
// export function PrepareEnchidna ( ) ; begin
53377: LD_INT 0
53379: PPUSH
// uc_side := 0 ;
53380: LD_ADDR_OWVAR 20
53384: PUSH
53385: LD_INT 0
53387: ST_TO_ADDR
// uc_nation := 0 ;
53388: LD_ADDR_OWVAR 21
53392: PUSH
53393: LD_INT 0
53395: ST_TO_ADDR
// hc_class := class_baggie ;
53396: LD_ADDR_OWVAR 28
53400: PUSH
53401: LD_INT 13
53403: ST_TO_ADDR
// hc_gallery :=  ;
53404: LD_ADDR_OWVAR 33
53408: PUSH
53409: LD_STRING 
53411: ST_TO_ADDR
// end ;
53412: LD_VAR 0 1
53416: RET
// export function PrepareFrog ( ) ; begin
53417: LD_INT 0
53419: PPUSH
// uc_side := 0 ;
53420: LD_ADDR_OWVAR 20
53424: PUSH
53425: LD_INT 0
53427: ST_TO_ADDR
// uc_nation := 0 ;
53428: LD_ADDR_OWVAR 21
53432: PUSH
53433: LD_INT 0
53435: ST_TO_ADDR
// hc_class := class_frog ;
53436: LD_ADDR_OWVAR 28
53440: PUSH
53441: LD_INT 19
53443: ST_TO_ADDR
// hc_gallery :=  ;
53444: LD_ADDR_OWVAR 33
53448: PUSH
53449: LD_STRING 
53451: ST_TO_ADDR
// end ;
53452: LD_VAR 0 1
53456: RET
// export function PrepareFish ( ) ; begin
53457: LD_INT 0
53459: PPUSH
// uc_side := 0 ;
53460: LD_ADDR_OWVAR 20
53464: PUSH
53465: LD_INT 0
53467: ST_TO_ADDR
// uc_nation := 0 ;
53468: LD_ADDR_OWVAR 21
53472: PUSH
53473: LD_INT 0
53475: ST_TO_ADDR
// hc_class := class_fish ;
53476: LD_ADDR_OWVAR 28
53480: PUSH
53481: LD_INT 20
53483: ST_TO_ADDR
// hc_gallery :=  ;
53484: LD_ADDR_OWVAR 33
53488: PUSH
53489: LD_STRING 
53491: ST_TO_ADDR
// end ;
53492: LD_VAR 0 1
53496: RET
// export function PrepareBird ( ) ; begin
53497: LD_INT 0
53499: PPUSH
// uc_side := 0 ;
53500: LD_ADDR_OWVAR 20
53504: PUSH
53505: LD_INT 0
53507: ST_TO_ADDR
// uc_nation := 0 ;
53508: LD_ADDR_OWVAR 21
53512: PUSH
53513: LD_INT 0
53515: ST_TO_ADDR
// hc_class := class_phororhacos ;
53516: LD_ADDR_OWVAR 28
53520: PUSH
53521: LD_INT 18
53523: ST_TO_ADDR
// hc_gallery :=  ;
53524: LD_ADDR_OWVAR 33
53528: PUSH
53529: LD_STRING 
53531: ST_TO_ADDR
// end ;
53532: LD_VAR 0 1
53536: RET
// export function PrepareHorse ( ) ; begin
53537: LD_INT 0
53539: PPUSH
// uc_side := 0 ;
53540: LD_ADDR_OWVAR 20
53544: PUSH
53545: LD_INT 0
53547: ST_TO_ADDR
// uc_nation := 0 ;
53548: LD_ADDR_OWVAR 21
53552: PUSH
53553: LD_INT 0
53555: ST_TO_ADDR
// hc_class := class_horse ;
53556: LD_ADDR_OWVAR 28
53560: PUSH
53561: LD_INT 21
53563: ST_TO_ADDR
// hc_gallery :=  ;
53564: LD_ADDR_OWVAR 33
53568: PUSH
53569: LD_STRING 
53571: ST_TO_ADDR
// end ;
53572: LD_VAR 0 1
53576: RET
// export function PrepareMastodont ( ) ; begin
53577: LD_INT 0
53579: PPUSH
// uc_side := 0 ;
53580: LD_ADDR_OWVAR 20
53584: PUSH
53585: LD_INT 0
53587: ST_TO_ADDR
// uc_nation := 0 ;
53588: LD_ADDR_OWVAR 21
53592: PUSH
53593: LD_INT 0
53595: ST_TO_ADDR
// vc_chassis := class_mastodont ;
53596: LD_ADDR_OWVAR 37
53600: PUSH
53601: LD_INT 31
53603: ST_TO_ADDR
// vc_control := control_rider ;
53604: LD_ADDR_OWVAR 38
53608: PUSH
53609: LD_INT 4
53611: ST_TO_ADDR
// end ;
53612: LD_VAR 0 1
53616: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
53617: LD_INT 0
53619: PPUSH
53620: PPUSH
53621: PPUSH
// uc_side = 0 ;
53622: LD_ADDR_OWVAR 20
53626: PUSH
53627: LD_INT 0
53629: ST_TO_ADDR
// uc_nation = 0 ;
53630: LD_ADDR_OWVAR 21
53634: PUSH
53635: LD_INT 0
53637: ST_TO_ADDR
// InitHc_All ( ) ;
53638: CALL_OW 584
// InitVc ;
53642: CALL_OW 20
// if mastodonts then
53646: LD_VAR 0 6
53650: IFFALSE 53717
// for i = 1 to mastodonts do
53652: LD_ADDR_VAR 0 11
53656: PUSH
53657: DOUBLE
53658: LD_INT 1
53660: DEC
53661: ST_TO_ADDR
53662: LD_VAR 0 6
53666: PUSH
53667: FOR_TO
53668: IFFALSE 53715
// begin vc_chassis := 31 ;
53670: LD_ADDR_OWVAR 37
53674: PUSH
53675: LD_INT 31
53677: ST_TO_ADDR
// vc_control := control_rider ;
53678: LD_ADDR_OWVAR 38
53682: PUSH
53683: LD_INT 4
53685: ST_TO_ADDR
// animal := CreateVehicle ;
53686: LD_ADDR_VAR 0 12
53690: PUSH
53691: CALL_OW 45
53695: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53696: LD_VAR 0 12
53700: PPUSH
53701: LD_VAR 0 8
53705: PPUSH
53706: LD_INT 0
53708: PPUSH
53709: CALL 55845 0 3
// end ;
53713: GO 53667
53715: POP
53716: POP
// if horses then
53717: LD_VAR 0 5
53721: IFFALSE 53788
// for i = 1 to horses do
53723: LD_ADDR_VAR 0 11
53727: PUSH
53728: DOUBLE
53729: LD_INT 1
53731: DEC
53732: ST_TO_ADDR
53733: LD_VAR 0 5
53737: PUSH
53738: FOR_TO
53739: IFFALSE 53786
// begin hc_class := 21 ;
53741: LD_ADDR_OWVAR 28
53745: PUSH
53746: LD_INT 21
53748: ST_TO_ADDR
// hc_gallery :=  ;
53749: LD_ADDR_OWVAR 33
53753: PUSH
53754: LD_STRING 
53756: ST_TO_ADDR
// animal := CreateHuman ;
53757: LD_ADDR_VAR 0 12
53761: PUSH
53762: CALL_OW 44
53766: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53767: LD_VAR 0 12
53771: PPUSH
53772: LD_VAR 0 8
53776: PPUSH
53777: LD_INT 0
53779: PPUSH
53780: CALL 55845 0 3
// end ;
53784: GO 53738
53786: POP
53787: POP
// if birds then
53788: LD_VAR 0 1
53792: IFFALSE 53859
// for i = 1 to birds do
53794: LD_ADDR_VAR 0 11
53798: PUSH
53799: DOUBLE
53800: LD_INT 1
53802: DEC
53803: ST_TO_ADDR
53804: LD_VAR 0 1
53808: PUSH
53809: FOR_TO
53810: IFFALSE 53857
// begin hc_class := 18 ;
53812: LD_ADDR_OWVAR 28
53816: PUSH
53817: LD_INT 18
53819: ST_TO_ADDR
// hc_gallery =  ;
53820: LD_ADDR_OWVAR 33
53824: PUSH
53825: LD_STRING 
53827: ST_TO_ADDR
// animal := CreateHuman ;
53828: LD_ADDR_VAR 0 12
53832: PUSH
53833: CALL_OW 44
53837: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53838: LD_VAR 0 12
53842: PPUSH
53843: LD_VAR 0 8
53847: PPUSH
53848: LD_INT 0
53850: PPUSH
53851: CALL 55845 0 3
// end ;
53855: GO 53809
53857: POP
53858: POP
// if tigers then
53859: LD_VAR 0 2
53863: IFFALSE 53947
// for i = 1 to tigers do
53865: LD_ADDR_VAR 0 11
53869: PUSH
53870: DOUBLE
53871: LD_INT 1
53873: DEC
53874: ST_TO_ADDR
53875: LD_VAR 0 2
53879: PUSH
53880: FOR_TO
53881: IFFALSE 53945
// begin hc_class = class_tiger ;
53883: LD_ADDR_OWVAR 28
53887: PUSH
53888: LD_INT 14
53890: ST_TO_ADDR
// hc_gallery =  ;
53891: LD_ADDR_OWVAR 33
53895: PUSH
53896: LD_STRING 
53898: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
53899: LD_ADDR_OWVAR 35
53903: PUSH
53904: LD_INT 7
53906: NEG
53907: PPUSH
53908: LD_INT 7
53910: PPUSH
53911: CALL_OW 12
53915: ST_TO_ADDR
// animal := CreateHuman ;
53916: LD_ADDR_VAR 0 12
53920: PUSH
53921: CALL_OW 44
53925: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53926: LD_VAR 0 12
53930: PPUSH
53931: LD_VAR 0 8
53935: PPUSH
53936: LD_INT 0
53938: PPUSH
53939: CALL 55845 0 3
// end ;
53943: GO 53880
53945: POP
53946: POP
// if apemans then
53947: LD_VAR 0 3
53951: IFFALSE 54074
// for i = 1 to apemans do
53953: LD_ADDR_VAR 0 11
53957: PUSH
53958: DOUBLE
53959: LD_INT 1
53961: DEC
53962: ST_TO_ADDR
53963: LD_VAR 0 3
53967: PUSH
53968: FOR_TO
53969: IFFALSE 54072
// begin hc_class = class_apeman ;
53971: LD_ADDR_OWVAR 28
53975: PUSH
53976: LD_INT 12
53978: ST_TO_ADDR
// hc_gallery =  ;
53979: LD_ADDR_OWVAR 33
53983: PUSH
53984: LD_STRING 
53986: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
53987: LD_ADDR_OWVAR 35
53991: PUSH
53992: LD_INT 2
53994: NEG
53995: PPUSH
53996: LD_INT 2
53998: PPUSH
53999: CALL_OW 12
54003: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54004: LD_ADDR_OWVAR 31
54008: PUSH
54009: LD_INT 1
54011: PPUSH
54012: LD_INT 3
54014: PPUSH
54015: CALL_OW 12
54019: PUSH
54020: LD_INT 1
54022: PPUSH
54023: LD_INT 3
54025: PPUSH
54026: CALL_OW 12
54030: PUSH
54031: LD_INT 0
54033: PUSH
54034: LD_INT 0
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: ST_TO_ADDR
// animal := CreateHuman ;
54043: LD_ADDR_VAR 0 12
54047: PUSH
54048: CALL_OW 44
54052: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54053: LD_VAR 0 12
54057: PPUSH
54058: LD_VAR 0 8
54062: PPUSH
54063: LD_INT 0
54065: PPUSH
54066: CALL 55845 0 3
// end ;
54070: GO 53968
54072: POP
54073: POP
// if enchidnas then
54074: LD_VAR 0 4
54078: IFFALSE 54145
// for i = 1 to enchidnas do
54080: LD_ADDR_VAR 0 11
54084: PUSH
54085: DOUBLE
54086: LD_INT 1
54088: DEC
54089: ST_TO_ADDR
54090: LD_VAR 0 4
54094: PUSH
54095: FOR_TO
54096: IFFALSE 54143
// begin hc_class = 13 ;
54098: LD_ADDR_OWVAR 28
54102: PUSH
54103: LD_INT 13
54105: ST_TO_ADDR
// hc_gallery =  ;
54106: LD_ADDR_OWVAR 33
54110: PUSH
54111: LD_STRING 
54113: ST_TO_ADDR
// animal := CreateHuman ;
54114: LD_ADDR_VAR 0 12
54118: PUSH
54119: CALL_OW 44
54123: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54124: LD_VAR 0 12
54128: PPUSH
54129: LD_VAR 0 8
54133: PPUSH
54134: LD_INT 0
54136: PPUSH
54137: CALL 55845 0 3
// end ;
54141: GO 54095
54143: POP
54144: POP
// if fishes then
54145: LD_VAR 0 7
54149: IFFALSE 54216
// for i = 1 to fishes do
54151: LD_ADDR_VAR 0 11
54155: PUSH
54156: DOUBLE
54157: LD_INT 1
54159: DEC
54160: ST_TO_ADDR
54161: LD_VAR 0 7
54165: PUSH
54166: FOR_TO
54167: IFFALSE 54214
// begin hc_class = 20 ;
54169: LD_ADDR_OWVAR 28
54173: PUSH
54174: LD_INT 20
54176: ST_TO_ADDR
// hc_gallery =  ;
54177: LD_ADDR_OWVAR 33
54181: PUSH
54182: LD_STRING 
54184: ST_TO_ADDR
// animal := CreateHuman ;
54185: LD_ADDR_VAR 0 12
54189: PUSH
54190: CALL_OW 44
54194: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54195: LD_VAR 0 12
54199: PPUSH
54200: LD_VAR 0 9
54204: PPUSH
54205: LD_INT 0
54207: PPUSH
54208: CALL 55845 0 3
// end ;
54212: GO 54166
54214: POP
54215: POP
// end ;
54216: LD_VAR 0 10
54220: RET
// export function WantHeal ( sci , unit ) ; begin
54221: LD_INT 0
54223: PPUSH
// if GetTaskList ( sci ) > 0 then
54224: LD_VAR 0 1
54228: PPUSH
54229: CALL_OW 437
54233: PUSH
54234: LD_INT 0
54236: GREATER
54237: IFFALSE 54307
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54239: LD_VAR 0 1
54243: PPUSH
54244: CALL_OW 437
54248: PUSH
54249: LD_INT 1
54251: ARRAY
54252: PUSH
54253: LD_INT 1
54255: ARRAY
54256: PUSH
54257: LD_STRING l
54259: EQUAL
54260: PUSH
54261: LD_VAR 0 1
54265: PPUSH
54266: CALL_OW 437
54270: PUSH
54271: LD_INT 1
54273: ARRAY
54274: PUSH
54275: LD_INT 4
54277: ARRAY
54278: PUSH
54279: LD_VAR 0 2
54283: EQUAL
54284: AND
54285: IFFALSE 54297
// result := true else
54287: LD_ADDR_VAR 0 3
54291: PUSH
54292: LD_INT 1
54294: ST_TO_ADDR
54295: GO 54305
// result := false ;
54297: LD_ADDR_VAR 0 3
54301: PUSH
54302: LD_INT 0
54304: ST_TO_ADDR
// end else
54305: GO 54315
// result := false ;
54307: LD_ADDR_VAR 0 3
54311: PUSH
54312: LD_INT 0
54314: ST_TO_ADDR
// end ;
54315: LD_VAR 0 3
54319: RET
// export function HealTarget ( sci ) ; begin
54320: LD_INT 0
54322: PPUSH
// if not sci then
54323: LD_VAR 0 1
54327: NOT
54328: IFFALSE 54332
// exit ;
54330: GO 54397
// result := 0 ;
54332: LD_ADDR_VAR 0 2
54336: PUSH
54337: LD_INT 0
54339: ST_TO_ADDR
// if GetTaskList ( sci ) then
54340: LD_VAR 0 1
54344: PPUSH
54345: CALL_OW 437
54349: IFFALSE 54397
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54351: LD_VAR 0 1
54355: PPUSH
54356: CALL_OW 437
54360: PUSH
54361: LD_INT 1
54363: ARRAY
54364: PUSH
54365: LD_INT 1
54367: ARRAY
54368: PUSH
54369: LD_STRING l
54371: EQUAL
54372: IFFALSE 54397
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
54374: LD_ADDR_VAR 0 2
54378: PUSH
54379: LD_VAR 0 1
54383: PPUSH
54384: CALL_OW 437
54388: PUSH
54389: LD_INT 1
54391: ARRAY
54392: PUSH
54393: LD_INT 4
54395: ARRAY
54396: ST_TO_ADDR
// end ;
54397: LD_VAR 0 2
54401: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
54402: LD_INT 0
54404: PPUSH
54405: PPUSH
54406: PPUSH
54407: PPUSH
// if not base_units then
54408: LD_VAR 0 1
54412: NOT
54413: IFFALSE 54417
// exit ;
54415: GO 54504
// result := false ;
54417: LD_ADDR_VAR 0 2
54421: PUSH
54422: LD_INT 0
54424: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
54425: LD_ADDR_VAR 0 5
54429: PUSH
54430: LD_VAR 0 1
54434: PPUSH
54435: LD_INT 21
54437: PUSH
54438: LD_INT 3
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PPUSH
54445: CALL_OW 72
54449: ST_TO_ADDR
// if not tmp then
54450: LD_VAR 0 5
54454: NOT
54455: IFFALSE 54459
// exit ;
54457: GO 54504
// for i in tmp do
54459: LD_ADDR_VAR 0 3
54463: PUSH
54464: LD_VAR 0 5
54468: PUSH
54469: FOR_IN
54470: IFFALSE 54502
// begin result := EnemyInRange ( i , 22 ) ;
54472: LD_ADDR_VAR 0 2
54476: PUSH
54477: LD_VAR 0 3
54481: PPUSH
54482: LD_INT 22
54484: PPUSH
54485: CALL 52091 0 2
54489: ST_TO_ADDR
// if result then
54490: LD_VAR 0 2
54494: IFFALSE 54500
// exit ;
54496: POP
54497: POP
54498: GO 54504
// end ;
54500: GO 54469
54502: POP
54503: POP
// end ;
54504: LD_VAR 0 2
54508: RET
// export function FilterByTag ( units , tag ) ; begin
54509: LD_INT 0
54511: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
54512: LD_ADDR_VAR 0 3
54516: PUSH
54517: LD_VAR 0 1
54521: PPUSH
54522: LD_INT 120
54524: PUSH
54525: LD_VAR 0 2
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PPUSH
54534: CALL_OW 72
54538: ST_TO_ADDR
// end ;
54539: LD_VAR 0 3
54543: RET
// export function IsDriver ( un ) ; begin
54544: LD_INT 0
54546: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
54547: LD_ADDR_VAR 0 2
54551: PUSH
54552: LD_VAR 0 1
54556: PUSH
54557: LD_INT 55
54559: PUSH
54560: EMPTY
54561: LIST
54562: PPUSH
54563: CALL_OW 69
54567: IN
54568: ST_TO_ADDR
// end ;
54569: LD_VAR 0 2
54573: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
54574: LD_INT 0
54576: PPUSH
54577: PPUSH
// list := [ ] ;
54578: LD_ADDR_VAR 0 5
54582: PUSH
54583: EMPTY
54584: ST_TO_ADDR
// case d of 0 :
54585: LD_VAR 0 3
54589: PUSH
54590: LD_INT 0
54592: DOUBLE
54593: EQUAL
54594: IFTRUE 54598
54596: GO 54731
54598: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
54599: LD_ADDR_VAR 0 5
54603: PUSH
54604: LD_VAR 0 1
54608: PUSH
54609: LD_INT 4
54611: MINUS
54612: PUSH
54613: LD_VAR 0 2
54617: PUSH
54618: LD_INT 4
54620: MINUS
54621: PUSH
54622: LD_INT 2
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: LIST
54629: PUSH
54630: LD_VAR 0 1
54634: PUSH
54635: LD_INT 3
54637: MINUS
54638: PUSH
54639: LD_VAR 0 2
54643: PUSH
54644: LD_INT 1
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: LIST
54651: PUSH
54652: LD_VAR 0 1
54656: PUSH
54657: LD_INT 4
54659: PLUS
54660: PUSH
54661: LD_VAR 0 2
54665: PUSH
54666: LD_INT 4
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: LIST
54673: PUSH
54674: LD_VAR 0 1
54678: PUSH
54679: LD_INT 3
54681: PLUS
54682: PUSH
54683: LD_VAR 0 2
54687: PUSH
54688: LD_INT 3
54690: PLUS
54691: PUSH
54692: LD_INT 5
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: LIST
54699: PUSH
54700: LD_VAR 0 1
54704: PUSH
54705: LD_VAR 0 2
54709: PUSH
54710: LD_INT 4
54712: PLUS
54713: PUSH
54714: LD_INT 0
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: LIST
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: ST_TO_ADDR
// end ; 1 :
54729: GO 55429
54731: LD_INT 1
54733: DOUBLE
54734: EQUAL
54735: IFTRUE 54739
54737: GO 54872
54739: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
54740: LD_ADDR_VAR 0 5
54744: PUSH
54745: LD_VAR 0 1
54749: PUSH
54750: LD_VAR 0 2
54754: PUSH
54755: LD_INT 4
54757: MINUS
54758: PUSH
54759: LD_INT 3
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: LIST
54766: PUSH
54767: LD_VAR 0 1
54771: PUSH
54772: LD_INT 3
54774: MINUS
54775: PUSH
54776: LD_VAR 0 2
54780: PUSH
54781: LD_INT 3
54783: MINUS
54784: PUSH
54785: LD_INT 2
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: LIST
54792: PUSH
54793: LD_VAR 0 1
54797: PUSH
54798: LD_INT 4
54800: MINUS
54801: PUSH
54802: LD_VAR 0 2
54806: PUSH
54807: LD_INT 1
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: LIST
54814: PUSH
54815: LD_VAR 0 1
54819: PUSH
54820: LD_VAR 0 2
54824: PUSH
54825: LD_INT 3
54827: PLUS
54828: PUSH
54829: LD_INT 0
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: LIST
54836: PUSH
54837: LD_VAR 0 1
54841: PUSH
54842: LD_INT 4
54844: PLUS
54845: PUSH
54846: LD_VAR 0 2
54850: PUSH
54851: LD_INT 4
54853: PLUS
54854: PUSH
54855: LD_INT 5
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: LIST
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: ST_TO_ADDR
// end ; 2 :
54870: GO 55429
54872: LD_INT 2
54874: DOUBLE
54875: EQUAL
54876: IFTRUE 54880
54878: GO 55009
54880: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
54881: LD_ADDR_VAR 0 5
54885: PUSH
54886: LD_VAR 0 1
54890: PUSH
54891: LD_VAR 0 2
54895: PUSH
54896: LD_INT 3
54898: MINUS
54899: PUSH
54900: LD_INT 3
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: LIST
54907: PUSH
54908: LD_VAR 0 1
54912: PUSH
54913: LD_INT 4
54915: PLUS
54916: PUSH
54917: LD_VAR 0 2
54921: PUSH
54922: LD_INT 4
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: LIST
54929: PUSH
54930: LD_VAR 0 1
54934: PUSH
54935: LD_VAR 0 2
54939: PUSH
54940: LD_INT 4
54942: PLUS
54943: PUSH
54944: LD_INT 0
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: LIST
54951: PUSH
54952: LD_VAR 0 1
54956: PUSH
54957: LD_INT 3
54959: MINUS
54960: PUSH
54961: LD_VAR 0 2
54965: PUSH
54966: LD_INT 1
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: LIST
54973: PUSH
54974: LD_VAR 0 1
54978: PUSH
54979: LD_INT 4
54981: MINUS
54982: PUSH
54983: LD_VAR 0 2
54987: PUSH
54988: LD_INT 4
54990: MINUS
54991: PUSH
54992: LD_INT 2
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: LIST
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: ST_TO_ADDR
// end ; 3 :
55007: GO 55429
55009: LD_INT 3
55011: DOUBLE
55012: EQUAL
55013: IFTRUE 55017
55015: GO 55150
55017: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
55018: LD_ADDR_VAR 0 5
55022: PUSH
55023: LD_VAR 0 1
55027: PUSH
55028: LD_INT 3
55030: PLUS
55031: PUSH
55032: LD_VAR 0 2
55036: PUSH
55037: LD_INT 4
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: LIST
55044: PUSH
55045: LD_VAR 0 1
55049: PUSH
55050: LD_INT 4
55052: PLUS
55053: PUSH
55054: LD_VAR 0 2
55058: PUSH
55059: LD_INT 4
55061: PLUS
55062: PUSH
55063: LD_INT 5
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: LIST
55070: PUSH
55071: LD_VAR 0 1
55075: PUSH
55076: LD_INT 4
55078: MINUS
55079: PUSH
55080: LD_VAR 0 2
55084: PUSH
55085: LD_INT 1
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: LIST
55092: PUSH
55093: LD_VAR 0 1
55097: PUSH
55098: LD_VAR 0 2
55102: PUSH
55103: LD_INT 4
55105: MINUS
55106: PUSH
55107: LD_INT 3
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: LIST
55114: PUSH
55115: LD_VAR 0 1
55119: PUSH
55120: LD_INT 3
55122: MINUS
55123: PUSH
55124: LD_VAR 0 2
55128: PUSH
55129: LD_INT 3
55131: MINUS
55132: PUSH
55133: LD_INT 2
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: LIST
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: ST_TO_ADDR
// end ; 4 :
55148: GO 55429
55150: LD_INT 4
55152: DOUBLE
55153: EQUAL
55154: IFTRUE 55158
55156: GO 55291
55158: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
55159: LD_ADDR_VAR 0 5
55163: PUSH
55164: LD_VAR 0 1
55168: PUSH
55169: LD_VAR 0 2
55173: PUSH
55174: LD_INT 4
55176: PLUS
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: LIST
55185: PUSH
55186: LD_VAR 0 1
55190: PUSH
55191: LD_INT 3
55193: PLUS
55194: PUSH
55195: LD_VAR 0 2
55199: PUSH
55200: LD_INT 3
55202: PLUS
55203: PUSH
55204: LD_INT 5
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: LIST
55211: PUSH
55212: LD_VAR 0 1
55216: PUSH
55217: LD_INT 4
55219: PLUS
55220: PUSH
55221: LD_VAR 0 2
55225: PUSH
55226: LD_INT 4
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: LIST
55233: PUSH
55234: LD_VAR 0 1
55238: PUSH
55239: LD_VAR 0 2
55243: PUSH
55244: LD_INT 3
55246: MINUS
55247: PUSH
55248: LD_INT 3
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: LIST
55255: PUSH
55256: LD_VAR 0 1
55260: PUSH
55261: LD_INT 4
55263: MINUS
55264: PUSH
55265: LD_VAR 0 2
55269: PUSH
55270: LD_INT 4
55272: MINUS
55273: PUSH
55274: LD_INT 2
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: LIST
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: ST_TO_ADDR
// end ; 5 :
55289: GO 55429
55291: LD_INT 5
55293: DOUBLE
55294: EQUAL
55295: IFTRUE 55299
55297: GO 55428
55299: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
55300: LD_ADDR_VAR 0 5
55304: PUSH
55305: LD_VAR 0 1
55309: PUSH
55310: LD_INT 4
55312: MINUS
55313: PUSH
55314: LD_VAR 0 2
55318: PUSH
55319: LD_INT 1
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: LIST
55326: PUSH
55327: LD_VAR 0 1
55331: PUSH
55332: LD_VAR 0 2
55336: PUSH
55337: LD_INT 4
55339: MINUS
55340: PUSH
55341: LD_INT 3
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: LIST
55348: PUSH
55349: LD_VAR 0 1
55353: PUSH
55354: LD_INT 4
55356: PLUS
55357: PUSH
55358: LD_VAR 0 2
55362: PUSH
55363: LD_INT 4
55365: PLUS
55366: PUSH
55367: LD_INT 5
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: LIST
55374: PUSH
55375: LD_VAR 0 1
55379: PUSH
55380: LD_INT 3
55382: PLUS
55383: PUSH
55384: LD_VAR 0 2
55388: PUSH
55389: LD_INT 4
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: LIST
55396: PUSH
55397: LD_VAR 0 1
55401: PUSH
55402: LD_VAR 0 2
55406: PUSH
55407: LD_INT 3
55409: PLUS
55410: PUSH
55411: LD_INT 0
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: LIST
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: ST_TO_ADDR
// end ; end ;
55426: GO 55429
55428: POP
// result := list ;
55429: LD_ADDR_VAR 0 4
55433: PUSH
55434: LD_VAR 0 5
55438: ST_TO_ADDR
// end ;
55439: LD_VAR 0 4
55443: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
55444: LD_INT 0
55446: PPUSH
55447: PPUSH
55448: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
55449: LD_VAR 0 1
55453: NOT
55454: PUSH
55455: LD_VAR 0 2
55459: PUSH
55460: LD_INT 1
55462: PUSH
55463: LD_INT 2
55465: PUSH
55466: LD_INT 3
55468: PUSH
55469: LD_INT 4
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: IN
55478: NOT
55479: OR
55480: IFFALSE 55484
// exit ;
55482: GO 55567
// tmp := [ ] ;
55484: LD_ADDR_VAR 0 5
55488: PUSH
55489: EMPTY
55490: ST_TO_ADDR
// for i in units do
55491: LD_ADDR_VAR 0 4
55495: PUSH
55496: LD_VAR 0 1
55500: PUSH
55501: FOR_IN
55502: IFFALSE 55536
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
55504: LD_ADDR_VAR 0 5
55508: PUSH
55509: LD_VAR 0 5
55513: PPUSH
55514: LD_VAR 0 4
55518: PPUSH
55519: LD_VAR 0 2
55523: PPUSH
55524: CALL_OW 259
55528: PPUSH
55529: CALL 56940 0 2
55533: ST_TO_ADDR
55534: GO 55501
55536: POP
55537: POP
// if not tmp then
55538: LD_VAR 0 5
55542: NOT
55543: IFFALSE 55547
// exit ;
55545: GO 55567
// result := SortListByListDesc ( units , tmp ) ;
55547: LD_ADDR_VAR 0 3
55551: PUSH
55552: LD_VAR 0 1
55556: PPUSH
55557: LD_VAR 0 5
55561: PPUSH
55562: CALL_OW 77
55566: ST_TO_ADDR
// end ;
55567: LD_VAR 0 3
55571: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
55572: LD_INT 0
55574: PPUSH
55575: PPUSH
55576: PPUSH
// result := false ;
55577: LD_ADDR_VAR 0 3
55581: PUSH
55582: LD_INT 0
55584: ST_TO_ADDR
// if not building then
55585: LD_VAR 0 2
55589: NOT
55590: IFFALSE 55594
// exit ;
55592: GO 55732
// x := GetX ( building ) ;
55594: LD_ADDR_VAR 0 4
55598: PUSH
55599: LD_VAR 0 2
55603: PPUSH
55604: CALL_OW 250
55608: ST_TO_ADDR
// y := GetY ( building ) ;
55609: LD_ADDR_VAR 0 5
55613: PUSH
55614: LD_VAR 0 2
55618: PPUSH
55619: CALL_OW 251
55623: ST_TO_ADDR
// if not x or not y then
55624: LD_VAR 0 4
55628: NOT
55629: PUSH
55630: LD_VAR 0 5
55634: NOT
55635: OR
55636: IFFALSE 55640
// exit ;
55638: GO 55732
// if GetTaskList ( unit ) then
55640: LD_VAR 0 1
55644: PPUSH
55645: CALL_OW 437
55649: IFFALSE 55732
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55651: LD_STRING e
55653: PUSH
55654: LD_VAR 0 1
55658: PPUSH
55659: CALL_OW 437
55663: PUSH
55664: LD_INT 1
55666: ARRAY
55667: PUSH
55668: LD_INT 1
55670: ARRAY
55671: EQUAL
55672: PUSH
55673: LD_VAR 0 4
55677: PUSH
55678: LD_VAR 0 1
55682: PPUSH
55683: CALL_OW 437
55687: PUSH
55688: LD_INT 1
55690: ARRAY
55691: PUSH
55692: LD_INT 2
55694: ARRAY
55695: EQUAL
55696: AND
55697: PUSH
55698: LD_VAR 0 5
55702: PUSH
55703: LD_VAR 0 1
55707: PPUSH
55708: CALL_OW 437
55712: PUSH
55713: LD_INT 1
55715: ARRAY
55716: PUSH
55717: LD_INT 3
55719: ARRAY
55720: EQUAL
55721: AND
55722: IFFALSE 55732
// result := true end ;
55724: LD_ADDR_VAR 0 3
55728: PUSH
55729: LD_INT 1
55731: ST_TO_ADDR
// end ;
55732: LD_VAR 0 3
55736: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
55737: LD_INT 0
55739: PPUSH
// result := false ;
55740: LD_ADDR_VAR 0 4
55744: PUSH
55745: LD_INT 0
55747: ST_TO_ADDR
// if GetTaskList ( unit ) then
55748: LD_VAR 0 1
55752: PPUSH
55753: CALL_OW 437
55757: IFFALSE 55840
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55759: LD_STRING M
55761: PUSH
55762: LD_VAR 0 1
55766: PPUSH
55767: CALL_OW 437
55771: PUSH
55772: LD_INT 1
55774: ARRAY
55775: PUSH
55776: LD_INT 1
55778: ARRAY
55779: EQUAL
55780: PUSH
55781: LD_VAR 0 2
55785: PUSH
55786: LD_VAR 0 1
55790: PPUSH
55791: CALL_OW 437
55795: PUSH
55796: LD_INT 1
55798: ARRAY
55799: PUSH
55800: LD_INT 2
55802: ARRAY
55803: EQUAL
55804: AND
55805: PUSH
55806: LD_VAR 0 3
55810: PUSH
55811: LD_VAR 0 1
55815: PPUSH
55816: CALL_OW 437
55820: PUSH
55821: LD_INT 1
55823: ARRAY
55824: PUSH
55825: LD_INT 3
55827: ARRAY
55828: EQUAL
55829: AND
55830: IFFALSE 55840
// result := true ;
55832: LD_ADDR_VAR 0 4
55836: PUSH
55837: LD_INT 1
55839: ST_TO_ADDR
// end ; end ;
55840: LD_VAR 0 4
55844: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
55845: LD_INT 0
55847: PPUSH
55848: PPUSH
55849: PPUSH
55850: PPUSH
// if not unit or not area then
55851: LD_VAR 0 1
55855: NOT
55856: PUSH
55857: LD_VAR 0 2
55861: NOT
55862: OR
55863: IFFALSE 55867
// exit ;
55865: GO 56043
// tmp := AreaToList ( area , i ) ;
55867: LD_ADDR_VAR 0 6
55871: PUSH
55872: LD_VAR 0 2
55876: PPUSH
55877: LD_VAR 0 5
55881: PPUSH
55882: CALL_OW 517
55886: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
55887: LD_ADDR_VAR 0 5
55891: PUSH
55892: DOUBLE
55893: LD_INT 1
55895: DEC
55896: ST_TO_ADDR
55897: LD_VAR 0 6
55901: PUSH
55902: LD_INT 1
55904: ARRAY
55905: PUSH
55906: FOR_TO
55907: IFFALSE 56041
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
55909: LD_ADDR_VAR 0 7
55913: PUSH
55914: LD_VAR 0 6
55918: PUSH
55919: LD_INT 1
55921: ARRAY
55922: PUSH
55923: LD_VAR 0 5
55927: ARRAY
55928: PUSH
55929: LD_VAR 0 6
55933: PUSH
55934: LD_INT 2
55936: ARRAY
55937: PUSH
55938: LD_VAR 0 5
55942: ARRAY
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
55948: LD_INT 92
55950: PUSH
55951: LD_VAR 0 7
55955: PUSH
55956: LD_INT 1
55958: ARRAY
55959: PUSH
55960: LD_VAR 0 7
55964: PUSH
55965: LD_INT 2
55967: ARRAY
55968: PUSH
55969: LD_INT 2
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: PPUSH
55978: CALL_OW 69
55982: PUSH
55983: LD_INT 0
55985: EQUAL
55986: IFFALSE 56039
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
55988: LD_VAR 0 1
55992: PPUSH
55993: LD_VAR 0 7
55997: PUSH
55998: LD_INT 1
56000: ARRAY
56001: PPUSH
56002: LD_VAR 0 7
56006: PUSH
56007: LD_INT 2
56009: ARRAY
56010: PPUSH
56011: LD_VAR 0 3
56015: PPUSH
56016: CALL_OW 48
// result := IsPlaced ( unit ) ;
56020: LD_ADDR_VAR 0 4
56024: PUSH
56025: LD_VAR 0 1
56029: PPUSH
56030: CALL_OW 305
56034: ST_TO_ADDR
// exit ;
56035: POP
56036: POP
56037: GO 56043
// end ; end ;
56039: GO 55906
56041: POP
56042: POP
// end ;
56043: LD_VAR 0 4
56047: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
56048: LD_INT 0
56050: PPUSH
56051: PPUSH
56052: PPUSH
// if not side or side > 8 then
56053: LD_VAR 0 1
56057: NOT
56058: PUSH
56059: LD_VAR 0 1
56063: PUSH
56064: LD_INT 8
56066: GREATER
56067: OR
56068: IFFALSE 56072
// exit ;
56070: GO 56259
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
56072: LD_ADDR_VAR 0 4
56076: PUSH
56077: LD_INT 22
56079: PUSH
56080: LD_VAR 0 1
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 21
56091: PUSH
56092: LD_INT 3
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PPUSH
56103: CALL_OW 69
56107: ST_TO_ADDR
// if not tmp then
56108: LD_VAR 0 4
56112: NOT
56113: IFFALSE 56117
// exit ;
56115: GO 56259
// enable_addtolog := true ;
56117: LD_ADDR_OWVAR 81
56121: PUSH
56122: LD_INT 1
56124: ST_TO_ADDR
// AddToLog ( [ ) ;
56125: LD_STRING [
56127: PPUSH
56128: CALL_OW 561
// for i in tmp do
56132: LD_ADDR_VAR 0 3
56136: PUSH
56137: LD_VAR 0 4
56141: PUSH
56142: FOR_IN
56143: IFFALSE 56250
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
56145: LD_STRING [
56147: PUSH
56148: LD_VAR 0 3
56152: PPUSH
56153: CALL_OW 266
56157: STR
56158: PUSH
56159: LD_STRING , 
56161: STR
56162: PUSH
56163: LD_VAR 0 3
56167: PPUSH
56168: CALL_OW 250
56172: STR
56173: PUSH
56174: LD_STRING , 
56176: STR
56177: PUSH
56178: LD_VAR 0 3
56182: PPUSH
56183: CALL_OW 251
56187: STR
56188: PUSH
56189: LD_STRING , 
56191: STR
56192: PUSH
56193: LD_VAR 0 3
56197: PPUSH
56198: CALL_OW 254
56202: STR
56203: PUSH
56204: LD_STRING , 
56206: STR
56207: PUSH
56208: LD_VAR 0 3
56212: PPUSH
56213: LD_INT 1
56215: PPUSH
56216: CALL_OW 268
56220: STR
56221: PUSH
56222: LD_STRING , 
56224: STR
56225: PUSH
56226: LD_VAR 0 3
56230: PPUSH
56231: LD_INT 2
56233: PPUSH
56234: CALL_OW 268
56238: STR
56239: PUSH
56240: LD_STRING ],
56242: STR
56243: PPUSH
56244: CALL_OW 561
// end ;
56248: GO 56142
56250: POP
56251: POP
// AddToLog ( ]; ) ;
56252: LD_STRING ];
56254: PPUSH
56255: CALL_OW 561
// end ;
56259: LD_VAR 0 2
56263: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
56264: LD_INT 0
56266: PPUSH
56267: PPUSH
56268: PPUSH
56269: PPUSH
56270: PPUSH
// if not area or not rate or not max then
56271: LD_VAR 0 1
56275: NOT
56276: PUSH
56277: LD_VAR 0 2
56281: NOT
56282: OR
56283: PUSH
56284: LD_VAR 0 4
56288: NOT
56289: OR
56290: IFFALSE 56294
// exit ;
56292: GO 56483
// while 1 do
56294: LD_INT 1
56296: IFFALSE 56483
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
56298: LD_ADDR_VAR 0 9
56302: PUSH
56303: LD_VAR 0 1
56307: PPUSH
56308: LD_INT 1
56310: PPUSH
56311: CALL_OW 287
56315: PUSH
56316: LD_INT 10
56318: MUL
56319: ST_TO_ADDR
// r := rate / 10 ;
56320: LD_ADDR_VAR 0 7
56324: PUSH
56325: LD_VAR 0 2
56329: PUSH
56330: LD_INT 10
56332: DIVREAL
56333: ST_TO_ADDR
// time := 1 1$00 ;
56334: LD_ADDR_VAR 0 8
56338: PUSH
56339: LD_INT 2100
56341: ST_TO_ADDR
// if amount < min then
56342: LD_VAR 0 9
56346: PUSH
56347: LD_VAR 0 3
56351: LESS
56352: IFFALSE 56370
// r := r * 2 else
56354: LD_ADDR_VAR 0 7
56358: PUSH
56359: LD_VAR 0 7
56363: PUSH
56364: LD_INT 2
56366: MUL
56367: ST_TO_ADDR
56368: GO 56396
// if amount > max then
56370: LD_VAR 0 9
56374: PUSH
56375: LD_VAR 0 4
56379: GREATER
56380: IFFALSE 56396
// r := r / 2 ;
56382: LD_ADDR_VAR 0 7
56386: PUSH
56387: LD_VAR 0 7
56391: PUSH
56392: LD_INT 2
56394: DIVREAL
56395: ST_TO_ADDR
// time := time / r ;
56396: LD_ADDR_VAR 0 8
56400: PUSH
56401: LD_VAR 0 8
56405: PUSH
56406: LD_VAR 0 7
56410: DIVREAL
56411: ST_TO_ADDR
// if time < 0 then
56412: LD_VAR 0 8
56416: PUSH
56417: LD_INT 0
56419: LESS
56420: IFFALSE 56437
// time := time * - 1 ;
56422: LD_ADDR_VAR 0 8
56426: PUSH
56427: LD_VAR 0 8
56431: PUSH
56432: LD_INT 1
56434: NEG
56435: MUL
56436: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
56437: LD_VAR 0 8
56441: PUSH
56442: LD_INT 35
56444: PPUSH
56445: LD_INT 875
56447: PPUSH
56448: CALL_OW 12
56452: PLUS
56453: PPUSH
56454: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
56458: LD_INT 1
56460: PPUSH
56461: LD_INT 5
56463: PPUSH
56464: CALL_OW 12
56468: PPUSH
56469: LD_VAR 0 1
56473: PPUSH
56474: LD_INT 1
56476: PPUSH
56477: CALL_OW 55
// end ;
56481: GO 56294
// end ;
56483: LD_VAR 0 5
56487: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
56488: LD_INT 0
56490: PPUSH
56491: PPUSH
56492: PPUSH
56493: PPUSH
56494: PPUSH
56495: PPUSH
56496: PPUSH
56497: PPUSH
// if not turrets or not factories then
56498: LD_VAR 0 1
56502: NOT
56503: PUSH
56504: LD_VAR 0 2
56508: NOT
56509: OR
56510: IFFALSE 56514
// exit ;
56512: GO 56821
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
56514: LD_ADDR_VAR 0 10
56518: PUSH
56519: LD_INT 5
56521: PUSH
56522: LD_INT 6
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 2
56531: PUSH
56532: LD_INT 4
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 3
56541: PUSH
56542: LD_INT 5
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 24
56556: PUSH
56557: LD_INT 25
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 23
56566: PUSH
56567: LD_INT 27
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 42
56580: PUSH
56581: LD_INT 43
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 44
56590: PUSH
56591: LD_INT 46
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 45
56600: PUSH
56601: LD_INT 47
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: LIST
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: LIST
56617: ST_TO_ADDR
// result := [ ] ;
56618: LD_ADDR_VAR 0 3
56622: PUSH
56623: EMPTY
56624: ST_TO_ADDR
// for i in turrets do
56625: LD_ADDR_VAR 0 4
56629: PUSH
56630: LD_VAR 0 1
56634: PUSH
56635: FOR_IN
56636: IFFALSE 56819
// begin nat := GetNation ( i ) ;
56638: LD_ADDR_VAR 0 7
56642: PUSH
56643: LD_VAR 0 4
56647: PPUSH
56648: CALL_OW 248
56652: ST_TO_ADDR
// weapon := 0 ;
56653: LD_ADDR_VAR 0 8
56657: PUSH
56658: LD_INT 0
56660: ST_TO_ADDR
// if not nat then
56661: LD_VAR 0 7
56665: NOT
56666: IFFALSE 56670
// continue ;
56668: GO 56635
// for j in list [ nat ] do
56670: LD_ADDR_VAR 0 5
56674: PUSH
56675: LD_VAR 0 10
56679: PUSH
56680: LD_VAR 0 7
56684: ARRAY
56685: PUSH
56686: FOR_IN
56687: IFFALSE 56728
// if GetBWeapon ( i ) = j [ 1 ] then
56689: LD_VAR 0 4
56693: PPUSH
56694: CALL_OW 269
56698: PUSH
56699: LD_VAR 0 5
56703: PUSH
56704: LD_INT 1
56706: ARRAY
56707: EQUAL
56708: IFFALSE 56726
// begin weapon := j [ 2 ] ;
56710: LD_ADDR_VAR 0 8
56714: PUSH
56715: LD_VAR 0 5
56719: PUSH
56720: LD_INT 2
56722: ARRAY
56723: ST_TO_ADDR
// break ;
56724: GO 56728
// end ;
56726: GO 56686
56728: POP
56729: POP
// if not weapon then
56730: LD_VAR 0 8
56734: NOT
56735: IFFALSE 56739
// continue ;
56737: GO 56635
// for k in factories do
56739: LD_ADDR_VAR 0 6
56743: PUSH
56744: LD_VAR 0 2
56748: PUSH
56749: FOR_IN
56750: IFFALSE 56815
// begin weapons := AvailableWeaponList ( k ) ;
56752: LD_ADDR_VAR 0 9
56756: PUSH
56757: LD_VAR 0 6
56761: PPUSH
56762: CALL_OW 478
56766: ST_TO_ADDR
// if not weapons then
56767: LD_VAR 0 9
56771: NOT
56772: IFFALSE 56776
// continue ;
56774: GO 56749
// if weapon in weapons then
56776: LD_VAR 0 8
56780: PUSH
56781: LD_VAR 0 9
56785: IN
56786: IFFALSE 56813
// begin result := [ i , weapon ] ;
56788: LD_ADDR_VAR 0 3
56792: PUSH
56793: LD_VAR 0 4
56797: PUSH
56798: LD_VAR 0 8
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: ST_TO_ADDR
// exit ;
56807: POP
56808: POP
56809: POP
56810: POP
56811: GO 56821
// end ; end ;
56813: GO 56749
56815: POP
56816: POP
// end ;
56817: GO 56635
56819: POP
56820: POP
// end ;
56821: LD_VAR 0 3
56825: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
56826: LD_INT 0
56828: PPUSH
// if not side or side > 8 then
56829: LD_VAR 0 3
56833: NOT
56834: PUSH
56835: LD_VAR 0 3
56839: PUSH
56840: LD_INT 8
56842: GREATER
56843: OR
56844: IFFALSE 56848
// exit ;
56846: GO 56907
// if not range then
56848: LD_VAR 0 4
56852: NOT
56853: IFFALSE 56864
// range := - 12 ;
56855: LD_ADDR_VAR 0 4
56859: PUSH
56860: LD_INT 12
56862: NEG
56863: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
56864: LD_VAR 0 1
56868: PPUSH
56869: LD_VAR 0 2
56873: PPUSH
56874: LD_VAR 0 3
56878: PPUSH
56879: LD_VAR 0 4
56883: PPUSH
56884: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
56888: LD_VAR 0 1
56892: PPUSH
56893: LD_VAR 0 2
56897: PPUSH
56898: LD_VAR 0 3
56902: PPUSH
56903: CALL_OW 331
// end ;
56907: LD_VAR 0 5
56911: RET
// export function Video ( mode ) ; begin
56912: LD_INT 0
56914: PPUSH
// ingame_video = mode ;
56915: LD_ADDR_OWVAR 52
56919: PUSH
56920: LD_VAR 0 1
56924: ST_TO_ADDR
// interface_hidden = mode ;
56925: LD_ADDR_OWVAR 54
56929: PUSH
56930: LD_VAR 0 1
56934: ST_TO_ADDR
// end ;
56935: LD_VAR 0 2
56939: RET
// export function Join ( array , element ) ; begin
56940: LD_INT 0
56942: PPUSH
// result := Replace ( array , array + 1 , element ) ;
56943: LD_ADDR_VAR 0 3
56947: PUSH
56948: LD_VAR 0 1
56952: PPUSH
56953: LD_VAR 0 1
56957: PUSH
56958: LD_INT 1
56960: PLUS
56961: PPUSH
56962: LD_VAR 0 2
56966: PPUSH
56967: CALL_OW 1
56971: ST_TO_ADDR
// end ;
56972: LD_VAR 0 3
56976: RET
// export function JoinUnion ( array , element ) ; begin
56977: LD_INT 0
56979: PPUSH
// result := array union element ;
56980: LD_ADDR_VAR 0 3
56984: PUSH
56985: LD_VAR 0 1
56989: PUSH
56990: LD_VAR 0 2
56994: UNION
56995: ST_TO_ADDR
// end ;
56996: LD_VAR 0 3
57000: RET
// export function GetBehemoths ( side ) ; begin
57001: LD_INT 0
57003: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
57004: LD_ADDR_VAR 0 2
57008: PUSH
57009: LD_INT 22
57011: PUSH
57012: LD_VAR 0 1
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 31
57023: PUSH
57024: LD_INT 25
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PPUSH
57035: CALL_OW 69
57039: ST_TO_ADDR
// end ;
57040: LD_VAR 0 2
57044: RET
// export function Shuffle ( array ) ; var i , index ; begin
57045: LD_INT 0
57047: PPUSH
57048: PPUSH
57049: PPUSH
// result := [ ] ;
57050: LD_ADDR_VAR 0 2
57054: PUSH
57055: EMPTY
57056: ST_TO_ADDR
// if not array then
57057: LD_VAR 0 1
57061: NOT
57062: IFFALSE 57066
// exit ;
57064: GO 57165
// Randomize ;
57066: CALL_OW 10
// for i = array downto 1 do
57070: LD_ADDR_VAR 0 3
57074: PUSH
57075: DOUBLE
57076: LD_VAR 0 1
57080: INC
57081: ST_TO_ADDR
57082: LD_INT 1
57084: PUSH
57085: FOR_DOWNTO
57086: IFFALSE 57163
// begin index := rand ( 1 , array ) ;
57088: LD_ADDR_VAR 0 4
57092: PUSH
57093: LD_INT 1
57095: PPUSH
57096: LD_VAR 0 1
57100: PPUSH
57101: CALL_OW 12
57105: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
57106: LD_ADDR_VAR 0 2
57110: PUSH
57111: LD_VAR 0 2
57115: PPUSH
57116: LD_VAR 0 2
57120: PUSH
57121: LD_INT 1
57123: PLUS
57124: PPUSH
57125: LD_VAR 0 1
57129: PUSH
57130: LD_VAR 0 4
57134: ARRAY
57135: PPUSH
57136: CALL_OW 2
57140: ST_TO_ADDR
// array := Delete ( array , index ) ;
57141: LD_ADDR_VAR 0 1
57145: PUSH
57146: LD_VAR 0 1
57150: PPUSH
57151: LD_VAR 0 4
57155: PPUSH
57156: CALL_OW 3
57160: ST_TO_ADDR
// end ;
57161: GO 57085
57163: POP
57164: POP
// end ;
57165: LD_VAR 0 2
57169: RET
// export function GetBaseMaterials ( base ) ; begin
57170: LD_INT 0
57172: PPUSH
// result := [ 0 , 0 , 0 ] ;
57173: LD_ADDR_VAR 0 2
57177: PUSH
57178: LD_INT 0
57180: PUSH
57181: LD_INT 0
57183: PUSH
57184: LD_INT 0
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: LIST
57191: ST_TO_ADDR
// if not base then
57192: LD_VAR 0 1
57196: NOT
57197: IFFALSE 57201
// exit ;
57199: GO 57250
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
57201: LD_ADDR_VAR 0 2
57205: PUSH
57206: LD_VAR 0 1
57210: PPUSH
57211: LD_INT 1
57213: PPUSH
57214: CALL_OW 275
57218: PUSH
57219: LD_VAR 0 1
57223: PPUSH
57224: LD_INT 2
57226: PPUSH
57227: CALL_OW 275
57231: PUSH
57232: LD_VAR 0 1
57236: PPUSH
57237: LD_INT 3
57239: PPUSH
57240: CALL_OW 275
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: LIST
57249: ST_TO_ADDR
// end ;
57250: LD_VAR 0 2
57254: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
57255: LD_INT 0
57257: PPUSH
57258: PPUSH
// result := array ;
57259: LD_ADDR_VAR 0 3
57263: PUSH
57264: LD_VAR 0 1
57268: ST_TO_ADDR
// if size >= result then
57269: LD_VAR 0 2
57273: PUSH
57274: LD_VAR 0 3
57278: GREATEREQUAL
57279: IFFALSE 57283
// exit ;
57281: GO 57333
// if size then
57283: LD_VAR 0 2
57287: IFFALSE 57333
// for i := array downto size do
57289: LD_ADDR_VAR 0 4
57293: PUSH
57294: DOUBLE
57295: LD_VAR 0 1
57299: INC
57300: ST_TO_ADDR
57301: LD_VAR 0 2
57305: PUSH
57306: FOR_DOWNTO
57307: IFFALSE 57331
// result := Delete ( result , result ) ;
57309: LD_ADDR_VAR 0 3
57313: PUSH
57314: LD_VAR 0 3
57318: PPUSH
57319: LD_VAR 0 3
57323: PPUSH
57324: CALL_OW 3
57328: ST_TO_ADDR
57329: GO 57306
57331: POP
57332: POP
// end ;
57333: LD_VAR 0 3
57337: RET
// export function ComExit ( unit ) ; var tmp ; begin
57338: LD_INT 0
57340: PPUSH
57341: PPUSH
// if not IsInUnit ( unit ) then
57342: LD_VAR 0 1
57346: PPUSH
57347: CALL_OW 310
57351: NOT
57352: IFFALSE 57356
// exit ;
57354: GO 57416
// tmp := IsInUnit ( unit ) ;
57356: LD_ADDR_VAR 0 3
57360: PUSH
57361: LD_VAR 0 1
57365: PPUSH
57366: CALL_OW 310
57370: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
57371: LD_VAR 0 3
57375: PPUSH
57376: CALL_OW 247
57380: PUSH
57381: LD_INT 2
57383: EQUAL
57384: IFFALSE 57397
// ComExitVehicle ( unit ) else
57386: LD_VAR 0 1
57390: PPUSH
57391: CALL_OW 121
57395: GO 57406
// ComExitBuilding ( unit ) ;
57397: LD_VAR 0 1
57401: PPUSH
57402: CALL_OW 122
// result := tmp ;
57406: LD_ADDR_VAR 0 2
57410: PUSH
57411: LD_VAR 0 3
57415: ST_TO_ADDR
// end ;
57416: LD_VAR 0 2
57420: RET
// export function ComExitAll ( units ) ; var i ; begin
57421: LD_INT 0
57423: PPUSH
57424: PPUSH
// if not units then
57425: LD_VAR 0 1
57429: NOT
57430: IFFALSE 57434
// exit ;
57432: GO 57460
// for i in units do
57434: LD_ADDR_VAR 0 3
57438: PUSH
57439: LD_VAR 0 1
57443: PUSH
57444: FOR_IN
57445: IFFALSE 57458
// ComExit ( i ) ;
57447: LD_VAR 0 3
57451: PPUSH
57452: CALL 57338 0 1
57456: GO 57444
57458: POP
57459: POP
// end ;
57460: LD_VAR 0 2
57464: RET
// export function ResetHc ; begin
57465: LD_INT 0
57467: PPUSH
// InitHc ;
57468: CALL_OW 19
// hc_importance := 0 ;
57472: LD_ADDR_OWVAR 32
57476: PUSH
57477: LD_INT 0
57479: ST_TO_ADDR
// end ;
57480: LD_VAR 0 1
57484: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
57485: LD_INT 0
57487: PPUSH
57488: PPUSH
57489: PPUSH
// _x := ( x1 + x2 ) div 2 ;
57490: LD_ADDR_VAR 0 6
57494: PUSH
57495: LD_VAR 0 1
57499: PUSH
57500: LD_VAR 0 3
57504: PLUS
57505: PUSH
57506: LD_INT 2
57508: DIV
57509: ST_TO_ADDR
// if _x < 0 then
57510: LD_VAR 0 6
57514: PUSH
57515: LD_INT 0
57517: LESS
57518: IFFALSE 57535
// _x := _x * - 1 ;
57520: LD_ADDR_VAR 0 6
57524: PUSH
57525: LD_VAR 0 6
57529: PUSH
57530: LD_INT 1
57532: NEG
57533: MUL
57534: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
57535: LD_ADDR_VAR 0 7
57539: PUSH
57540: LD_VAR 0 2
57544: PUSH
57545: LD_VAR 0 4
57549: PLUS
57550: PUSH
57551: LD_INT 2
57553: DIV
57554: ST_TO_ADDR
// if _y < 0 then
57555: LD_VAR 0 7
57559: PUSH
57560: LD_INT 0
57562: LESS
57563: IFFALSE 57580
// _y := _y * - 1 ;
57565: LD_ADDR_VAR 0 7
57569: PUSH
57570: LD_VAR 0 7
57574: PUSH
57575: LD_INT 1
57577: NEG
57578: MUL
57579: ST_TO_ADDR
// result := [ _x , _y ] ;
57580: LD_ADDR_VAR 0 5
57584: PUSH
57585: LD_VAR 0 6
57589: PUSH
57590: LD_VAR 0 7
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: ST_TO_ADDR
// end ;
57599: LD_VAR 0 5
57603: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
57604: LD_INT 0
57606: PPUSH
57607: PPUSH
57608: PPUSH
57609: PPUSH
// task := GetTaskList ( unit ) ;
57610: LD_ADDR_VAR 0 7
57614: PUSH
57615: LD_VAR 0 1
57619: PPUSH
57620: CALL_OW 437
57624: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
57625: LD_VAR 0 7
57629: NOT
57630: PUSH
57631: LD_VAR 0 1
57635: PPUSH
57636: LD_VAR 0 2
57640: PPUSH
57641: CALL_OW 308
57645: NOT
57646: AND
57647: IFFALSE 57651
// exit ;
57649: GO 57769
// if IsInArea ( unit , area ) then
57651: LD_VAR 0 1
57655: PPUSH
57656: LD_VAR 0 2
57660: PPUSH
57661: CALL_OW 308
57665: IFFALSE 57683
// begin ComMoveToArea ( unit , goAway ) ;
57667: LD_VAR 0 1
57671: PPUSH
57672: LD_VAR 0 3
57676: PPUSH
57677: CALL_OW 113
// exit ;
57681: GO 57769
// end ; if task [ 1 ] [ 1 ] <> M then
57683: LD_VAR 0 7
57687: PUSH
57688: LD_INT 1
57690: ARRAY
57691: PUSH
57692: LD_INT 1
57694: ARRAY
57695: PUSH
57696: LD_STRING M
57698: NONEQUAL
57699: IFFALSE 57703
// exit ;
57701: GO 57769
// x := task [ 1 ] [ 2 ] ;
57703: LD_ADDR_VAR 0 5
57707: PUSH
57708: LD_VAR 0 7
57712: PUSH
57713: LD_INT 1
57715: ARRAY
57716: PUSH
57717: LD_INT 2
57719: ARRAY
57720: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
57721: LD_ADDR_VAR 0 6
57725: PUSH
57726: LD_VAR 0 7
57730: PUSH
57731: LD_INT 1
57733: ARRAY
57734: PUSH
57735: LD_INT 3
57737: ARRAY
57738: ST_TO_ADDR
// if InArea ( x , y , area ) then
57739: LD_VAR 0 5
57743: PPUSH
57744: LD_VAR 0 6
57748: PPUSH
57749: LD_VAR 0 2
57753: PPUSH
57754: CALL_OW 309
57758: IFFALSE 57769
// ComStop ( unit ) ;
57760: LD_VAR 0 1
57764: PPUSH
57765: CALL_OW 141
// end ;
57769: LD_VAR 0 4
57773: RET
// export function Abs ( value ) ; begin
57774: LD_INT 0
57776: PPUSH
// result := value ;
57777: LD_ADDR_VAR 0 2
57781: PUSH
57782: LD_VAR 0 1
57786: ST_TO_ADDR
// if value < 0 then
57787: LD_VAR 0 1
57791: PUSH
57792: LD_INT 0
57794: LESS
57795: IFFALSE 57812
// result := value * - 1 ;
57797: LD_ADDR_VAR 0 2
57801: PUSH
57802: LD_VAR 0 1
57806: PUSH
57807: LD_INT 1
57809: NEG
57810: MUL
57811: ST_TO_ADDR
// end ;
57812: LD_VAR 0 2
57816: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
57817: LD_INT 0
57819: PPUSH
57820: PPUSH
57821: PPUSH
57822: PPUSH
57823: PPUSH
57824: PPUSH
57825: PPUSH
57826: PPUSH
// if not unit or not building then
57827: LD_VAR 0 1
57831: NOT
57832: PUSH
57833: LD_VAR 0 2
57837: NOT
57838: OR
57839: IFFALSE 57843
// exit ;
57841: GO 58069
// x := GetX ( building ) ;
57843: LD_ADDR_VAR 0 4
57847: PUSH
57848: LD_VAR 0 2
57852: PPUSH
57853: CALL_OW 250
57857: ST_TO_ADDR
// y := GetY ( building ) ;
57858: LD_ADDR_VAR 0 6
57862: PUSH
57863: LD_VAR 0 2
57867: PPUSH
57868: CALL_OW 251
57872: ST_TO_ADDR
// d := GetDir ( building ) ;
57873: LD_ADDR_VAR 0 8
57877: PUSH
57878: LD_VAR 0 2
57882: PPUSH
57883: CALL_OW 254
57887: ST_TO_ADDR
// r := 4 ;
57888: LD_ADDR_VAR 0 9
57892: PUSH
57893: LD_INT 4
57895: ST_TO_ADDR
// for i := 1 to 5 do
57896: LD_ADDR_VAR 0 10
57900: PUSH
57901: DOUBLE
57902: LD_INT 1
57904: DEC
57905: ST_TO_ADDR
57906: LD_INT 5
57908: PUSH
57909: FOR_TO
57910: IFFALSE 58067
// begin _x := ShiftX ( x , d , r + i ) ;
57912: LD_ADDR_VAR 0 5
57916: PUSH
57917: LD_VAR 0 4
57921: PPUSH
57922: LD_VAR 0 8
57926: PPUSH
57927: LD_VAR 0 9
57931: PUSH
57932: LD_VAR 0 10
57936: PLUS
57937: PPUSH
57938: CALL_OW 272
57942: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
57943: LD_ADDR_VAR 0 7
57947: PUSH
57948: LD_VAR 0 6
57952: PPUSH
57953: LD_VAR 0 8
57957: PPUSH
57958: LD_VAR 0 9
57962: PUSH
57963: LD_VAR 0 10
57967: PLUS
57968: PPUSH
57969: CALL_OW 273
57973: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
57974: LD_VAR 0 5
57978: PPUSH
57979: LD_VAR 0 7
57983: PPUSH
57984: CALL_OW 488
57988: PUSH
57989: LD_VAR 0 5
57993: PPUSH
57994: LD_VAR 0 7
57998: PPUSH
57999: CALL_OW 428
58003: PPUSH
58004: CALL_OW 247
58008: PUSH
58009: LD_INT 3
58011: PUSH
58012: LD_INT 2
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: IN
58019: NOT
58020: AND
58021: IFFALSE 58065
// begin ComMoveXY ( unit , _x , _y ) ;
58023: LD_VAR 0 1
58027: PPUSH
58028: LD_VAR 0 5
58032: PPUSH
58033: LD_VAR 0 7
58037: PPUSH
58038: CALL_OW 111
// result := [ _x , _y ] ;
58042: LD_ADDR_VAR 0 3
58046: PUSH
58047: LD_VAR 0 5
58051: PUSH
58052: LD_VAR 0 7
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: ST_TO_ADDR
// exit ;
58061: POP
58062: POP
58063: GO 58069
// end ; end ;
58065: GO 57909
58067: POP
58068: POP
// end ;
58069: LD_VAR 0 3
58073: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
58074: LD_INT 0
58076: PPUSH
58077: PPUSH
58078: PPUSH
// result := 0 ;
58079: LD_ADDR_VAR 0 3
58083: PUSH
58084: LD_INT 0
58086: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
58087: LD_VAR 0 1
58091: PUSH
58092: LD_INT 0
58094: LESS
58095: PUSH
58096: LD_VAR 0 1
58100: PUSH
58101: LD_INT 8
58103: GREATER
58104: OR
58105: PUSH
58106: LD_VAR 0 2
58110: PUSH
58111: LD_INT 0
58113: LESS
58114: OR
58115: PUSH
58116: LD_VAR 0 2
58120: PUSH
58121: LD_INT 8
58123: GREATER
58124: OR
58125: IFFALSE 58129
// exit ;
58127: GO 58204
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
58129: LD_ADDR_VAR 0 4
58133: PUSH
58134: LD_INT 22
58136: PUSH
58137: LD_VAR 0 2
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PPUSH
58146: CALL_OW 69
58150: PUSH
58151: FOR_IN
58152: IFFALSE 58202
// begin un := UnitShoot ( i ) ;
58154: LD_ADDR_VAR 0 5
58158: PUSH
58159: LD_VAR 0 4
58163: PPUSH
58164: CALL_OW 504
58168: ST_TO_ADDR
// if GetSide ( un ) = side1 then
58169: LD_VAR 0 5
58173: PPUSH
58174: CALL_OW 255
58178: PUSH
58179: LD_VAR 0 1
58183: EQUAL
58184: IFFALSE 58200
// begin result := un ;
58186: LD_ADDR_VAR 0 3
58190: PUSH
58191: LD_VAR 0 5
58195: ST_TO_ADDR
// exit ;
58196: POP
58197: POP
58198: GO 58204
// end ; end ;
58200: GO 58151
58202: POP
58203: POP
// end ;
58204: LD_VAR 0 3
58208: RET
// export function GetCargoBay ( units ) ; begin
58209: LD_INT 0
58211: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
58212: LD_ADDR_VAR 0 2
58216: PUSH
58217: LD_VAR 0 1
58221: PPUSH
58222: LD_INT 2
58224: PUSH
58225: LD_INT 34
58227: PUSH
58228: LD_INT 12
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 34
58237: PUSH
58238: LD_INT 51
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 34
58247: PUSH
58248: LD_INT 32
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 34
58257: PUSH
58258: LD_INT 89
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: PPUSH
58272: CALL_OW 72
58276: ST_TO_ADDR
// end ;
58277: LD_VAR 0 2
58281: RET
// export function Negate ( value ) ; begin
58282: LD_INT 0
58284: PPUSH
// result := not value ;
58285: LD_ADDR_VAR 0 2
58289: PUSH
58290: LD_VAR 0 1
58294: NOT
58295: ST_TO_ADDR
// end ;
58296: LD_VAR 0 2
58300: RET
// export function Inc ( value ) ; begin
58301: LD_INT 0
58303: PPUSH
// result := value + 1 ;
58304: LD_ADDR_VAR 0 2
58308: PUSH
58309: LD_VAR 0 1
58313: PUSH
58314: LD_INT 1
58316: PLUS
58317: ST_TO_ADDR
// end ;
58318: LD_VAR 0 2
58322: RET
// export function Dec ( value ) ; begin
58323: LD_INT 0
58325: PPUSH
// result := value - 1 ;
58326: LD_ADDR_VAR 0 2
58330: PUSH
58331: LD_VAR 0 1
58335: PUSH
58336: LD_INT 1
58338: MINUS
58339: ST_TO_ADDR
// end ;
58340: LD_VAR 0 2
58344: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
58345: LD_INT 0
58347: PPUSH
58348: PPUSH
58349: PPUSH
58350: PPUSH
58351: PPUSH
58352: PPUSH
58353: PPUSH
58354: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
58355: LD_VAR 0 1
58359: PPUSH
58360: LD_VAR 0 2
58364: PPUSH
58365: CALL_OW 488
58369: NOT
58370: PUSH
58371: LD_VAR 0 3
58375: PPUSH
58376: LD_VAR 0 4
58380: PPUSH
58381: CALL_OW 488
58385: NOT
58386: OR
58387: IFFALSE 58400
// begin result := - 1 ;
58389: LD_ADDR_VAR 0 5
58393: PUSH
58394: LD_INT 1
58396: NEG
58397: ST_TO_ADDR
// exit ;
58398: GO 58635
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
58400: LD_ADDR_VAR 0 12
58404: PUSH
58405: LD_VAR 0 1
58409: PPUSH
58410: LD_VAR 0 2
58414: PPUSH
58415: LD_VAR 0 3
58419: PPUSH
58420: LD_VAR 0 4
58424: PPUSH
58425: CALL 57485 0 4
58429: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
58430: LD_ADDR_VAR 0 11
58434: PUSH
58435: LD_VAR 0 1
58439: PPUSH
58440: LD_VAR 0 2
58444: PPUSH
58445: LD_VAR 0 12
58449: PUSH
58450: LD_INT 1
58452: ARRAY
58453: PPUSH
58454: LD_VAR 0 12
58458: PUSH
58459: LD_INT 2
58461: ARRAY
58462: PPUSH
58463: CALL_OW 298
58467: ST_TO_ADDR
// distance := 9999 ;
58468: LD_ADDR_VAR 0 10
58472: PUSH
58473: LD_INT 9999
58475: ST_TO_ADDR
// for i := 0 to 5 do
58476: LD_ADDR_VAR 0 6
58480: PUSH
58481: DOUBLE
58482: LD_INT 0
58484: DEC
58485: ST_TO_ADDR
58486: LD_INT 5
58488: PUSH
58489: FOR_TO
58490: IFFALSE 58633
// begin _x := ShiftX ( x1 , i , centerDist ) ;
58492: LD_ADDR_VAR 0 7
58496: PUSH
58497: LD_VAR 0 1
58501: PPUSH
58502: LD_VAR 0 6
58506: PPUSH
58507: LD_VAR 0 11
58511: PPUSH
58512: CALL_OW 272
58516: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
58517: LD_ADDR_VAR 0 8
58521: PUSH
58522: LD_VAR 0 2
58526: PPUSH
58527: LD_VAR 0 6
58531: PPUSH
58532: LD_VAR 0 11
58536: PPUSH
58537: CALL_OW 273
58541: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
58542: LD_VAR 0 7
58546: PPUSH
58547: LD_VAR 0 8
58551: PPUSH
58552: CALL_OW 488
58556: NOT
58557: IFFALSE 58561
// continue ;
58559: GO 58489
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
58561: LD_ADDR_VAR 0 9
58565: PUSH
58566: LD_VAR 0 12
58570: PUSH
58571: LD_INT 1
58573: ARRAY
58574: PPUSH
58575: LD_VAR 0 12
58579: PUSH
58580: LD_INT 2
58582: ARRAY
58583: PPUSH
58584: LD_VAR 0 7
58588: PPUSH
58589: LD_VAR 0 8
58593: PPUSH
58594: CALL_OW 298
58598: ST_TO_ADDR
// if tmp < distance then
58599: LD_VAR 0 9
58603: PUSH
58604: LD_VAR 0 10
58608: LESS
58609: IFFALSE 58631
// begin result := i ;
58611: LD_ADDR_VAR 0 5
58615: PUSH
58616: LD_VAR 0 6
58620: ST_TO_ADDR
// distance := tmp ;
58621: LD_ADDR_VAR 0 10
58625: PUSH
58626: LD_VAR 0 9
58630: ST_TO_ADDR
// end ; end ;
58631: GO 58489
58633: POP
58634: POP
// end ;
58635: LD_VAR 0 5
58639: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
58640: LD_INT 0
58642: PPUSH
58643: PPUSH
// if not driver or not IsInUnit ( driver ) then
58644: LD_VAR 0 1
58648: NOT
58649: PUSH
58650: LD_VAR 0 1
58654: PPUSH
58655: CALL_OW 310
58659: NOT
58660: OR
58661: IFFALSE 58665
// exit ;
58663: GO 58755
// vehicle := IsInUnit ( driver ) ;
58665: LD_ADDR_VAR 0 3
58669: PUSH
58670: LD_VAR 0 1
58674: PPUSH
58675: CALL_OW 310
58679: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
58680: LD_VAR 0 1
58684: PPUSH
58685: LD_STRING \
58687: PUSH
58688: LD_INT 0
58690: PUSH
58691: LD_INT 0
58693: PUSH
58694: LD_INT 0
58696: PUSH
58697: LD_INT 0
58699: PUSH
58700: LD_INT 0
58702: PUSH
58703: LD_INT 0
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: PUSH
58715: LD_STRING E
58717: PUSH
58718: LD_INT 0
58720: PUSH
58721: LD_INT 0
58723: PUSH
58724: LD_VAR 0 3
58728: PUSH
58729: LD_INT 0
58731: PUSH
58732: LD_INT 0
58734: PUSH
58735: LD_INT 0
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PPUSH
58751: CALL_OW 446
// end ;
58755: LD_VAR 0 2
58759: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
58760: LD_INT 0
58762: PPUSH
58763: PPUSH
// if not driver or not IsInUnit ( driver ) then
58764: LD_VAR 0 1
58768: NOT
58769: PUSH
58770: LD_VAR 0 1
58774: PPUSH
58775: CALL_OW 310
58779: NOT
58780: OR
58781: IFFALSE 58785
// exit ;
58783: GO 58875
// vehicle := IsInUnit ( driver ) ;
58785: LD_ADDR_VAR 0 3
58789: PUSH
58790: LD_VAR 0 1
58794: PPUSH
58795: CALL_OW 310
58799: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
58800: LD_VAR 0 1
58804: PPUSH
58805: LD_STRING \
58807: PUSH
58808: LD_INT 0
58810: PUSH
58811: LD_INT 0
58813: PUSH
58814: LD_INT 0
58816: PUSH
58817: LD_INT 0
58819: PUSH
58820: LD_INT 0
58822: PUSH
58823: LD_INT 0
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: PUSH
58835: LD_STRING E
58837: PUSH
58838: LD_INT 0
58840: PUSH
58841: LD_INT 0
58843: PUSH
58844: LD_VAR 0 3
58848: PUSH
58849: LD_INT 0
58851: PUSH
58852: LD_INT 0
58854: PUSH
58855: LD_INT 0
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PPUSH
58871: CALL_OW 447
// end ;
58875: LD_VAR 0 2
58879: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
58880: LD_INT 0
58882: PPUSH
58883: PPUSH
58884: PPUSH
// tmp := [ ] ;
58885: LD_ADDR_VAR 0 5
58889: PUSH
58890: EMPTY
58891: ST_TO_ADDR
// for i in units do
58892: LD_ADDR_VAR 0 4
58896: PUSH
58897: LD_VAR 0 1
58901: PUSH
58902: FOR_IN
58903: IFFALSE 58941
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
58905: LD_ADDR_VAR 0 5
58909: PUSH
58910: LD_VAR 0 5
58914: PPUSH
58915: LD_VAR 0 5
58919: PUSH
58920: LD_INT 1
58922: PLUS
58923: PPUSH
58924: LD_VAR 0 4
58928: PPUSH
58929: CALL_OW 256
58933: PPUSH
58934: CALL_OW 2
58938: ST_TO_ADDR
58939: GO 58902
58941: POP
58942: POP
// if not tmp then
58943: LD_VAR 0 5
58947: NOT
58948: IFFALSE 58952
// exit ;
58950: GO 59000
// if asc then
58952: LD_VAR 0 2
58956: IFFALSE 58980
// result := SortListByListAsc ( units , tmp ) else
58958: LD_ADDR_VAR 0 3
58962: PUSH
58963: LD_VAR 0 1
58967: PPUSH
58968: LD_VAR 0 5
58972: PPUSH
58973: CALL_OW 76
58977: ST_TO_ADDR
58978: GO 59000
// result := SortListByListDesc ( units , tmp ) ;
58980: LD_ADDR_VAR 0 3
58984: PUSH
58985: LD_VAR 0 1
58989: PPUSH
58990: LD_VAR 0 5
58994: PPUSH
58995: CALL_OW 77
58999: ST_TO_ADDR
// end ;
59000: LD_VAR 0 3
59004: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
59005: LD_INT 0
59007: PPUSH
59008: PPUSH
// task := GetTaskList ( mech ) ;
59009: LD_ADDR_VAR 0 4
59013: PUSH
59014: LD_VAR 0 1
59018: PPUSH
59019: CALL_OW 437
59023: ST_TO_ADDR
// if not task then
59024: LD_VAR 0 4
59028: NOT
59029: IFFALSE 59033
// exit ;
59031: GO 59075
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
59033: LD_ADDR_VAR 0 3
59037: PUSH
59038: LD_VAR 0 4
59042: PUSH
59043: LD_INT 1
59045: ARRAY
59046: PUSH
59047: LD_INT 1
59049: ARRAY
59050: PUSH
59051: LD_STRING r
59053: EQUAL
59054: PUSH
59055: LD_VAR 0 4
59059: PUSH
59060: LD_INT 1
59062: ARRAY
59063: PUSH
59064: LD_INT 4
59066: ARRAY
59067: PUSH
59068: LD_VAR 0 2
59072: EQUAL
59073: AND
59074: ST_TO_ADDR
// end ;
59075: LD_VAR 0 3
59079: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
59080: LD_INT 0
59082: PPUSH
// SetDir ( unit , d ) ;
59083: LD_VAR 0 1
59087: PPUSH
59088: LD_VAR 0 4
59092: PPUSH
59093: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
59097: LD_VAR 0 1
59101: PPUSH
59102: LD_VAR 0 2
59106: PPUSH
59107: LD_VAR 0 3
59111: PPUSH
59112: LD_VAR 0 5
59116: PPUSH
59117: CALL_OW 48
// end ;
59121: LD_VAR 0 6
59125: RET
// export function ToNaturalNumber ( number ) ; begin
59126: LD_INT 0
59128: PPUSH
// result := number div 1 ;
59129: LD_ADDR_VAR 0 2
59133: PUSH
59134: LD_VAR 0 1
59138: PUSH
59139: LD_INT 1
59141: DIV
59142: ST_TO_ADDR
// if number < 0 then
59143: LD_VAR 0 1
59147: PUSH
59148: LD_INT 0
59150: LESS
59151: IFFALSE 59161
// result := 0 ;
59153: LD_ADDR_VAR 0 2
59157: PUSH
59158: LD_INT 0
59160: ST_TO_ADDR
// end ;
59161: LD_VAR 0 2
59165: RET
// export function SortByClass ( units , class ) ; var un ; begin
59166: LD_INT 0
59168: PPUSH
59169: PPUSH
// if not units or not class then
59170: LD_VAR 0 1
59174: NOT
59175: PUSH
59176: LD_VAR 0 2
59180: NOT
59181: OR
59182: IFFALSE 59186
// exit ;
59184: GO 59281
// result := [ ] ;
59186: LD_ADDR_VAR 0 3
59190: PUSH
59191: EMPTY
59192: ST_TO_ADDR
// for un in units do
59193: LD_ADDR_VAR 0 4
59197: PUSH
59198: LD_VAR 0 1
59202: PUSH
59203: FOR_IN
59204: IFFALSE 59279
// if GetClass ( un ) = class then
59206: LD_VAR 0 4
59210: PPUSH
59211: CALL_OW 257
59215: PUSH
59216: LD_VAR 0 2
59220: EQUAL
59221: IFFALSE 59248
// result := Insert ( result , 1 , un ) else
59223: LD_ADDR_VAR 0 3
59227: PUSH
59228: LD_VAR 0 3
59232: PPUSH
59233: LD_INT 1
59235: PPUSH
59236: LD_VAR 0 4
59240: PPUSH
59241: CALL_OW 2
59245: ST_TO_ADDR
59246: GO 59277
// result := Replace ( result , result + 1 , un ) ;
59248: LD_ADDR_VAR 0 3
59252: PUSH
59253: LD_VAR 0 3
59257: PPUSH
59258: LD_VAR 0 3
59262: PUSH
59263: LD_INT 1
59265: PLUS
59266: PPUSH
59267: LD_VAR 0 4
59271: PPUSH
59272: CALL_OW 1
59276: ST_TO_ADDR
59277: GO 59203
59279: POP
59280: POP
// end ;
59281: LD_VAR 0 3
59285: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
59286: LD_INT 0
59288: PPUSH
59289: PPUSH
59290: PPUSH
59291: PPUSH
59292: PPUSH
59293: PPUSH
59294: PPUSH
// result := [ ] ;
59295: LD_ADDR_VAR 0 4
59299: PUSH
59300: EMPTY
59301: ST_TO_ADDR
// if x - r < 0 then
59302: LD_VAR 0 1
59306: PUSH
59307: LD_VAR 0 3
59311: MINUS
59312: PUSH
59313: LD_INT 0
59315: LESS
59316: IFFALSE 59328
// min_x := 0 else
59318: LD_ADDR_VAR 0 8
59322: PUSH
59323: LD_INT 0
59325: ST_TO_ADDR
59326: GO 59344
// min_x := x - r ;
59328: LD_ADDR_VAR 0 8
59332: PUSH
59333: LD_VAR 0 1
59337: PUSH
59338: LD_VAR 0 3
59342: MINUS
59343: ST_TO_ADDR
// if y - r < 0 then
59344: LD_VAR 0 2
59348: PUSH
59349: LD_VAR 0 3
59353: MINUS
59354: PUSH
59355: LD_INT 0
59357: LESS
59358: IFFALSE 59370
// min_y := 0 else
59360: LD_ADDR_VAR 0 7
59364: PUSH
59365: LD_INT 0
59367: ST_TO_ADDR
59368: GO 59386
// min_y := y - r ;
59370: LD_ADDR_VAR 0 7
59374: PUSH
59375: LD_VAR 0 2
59379: PUSH
59380: LD_VAR 0 3
59384: MINUS
59385: ST_TO_ADDR
// max_x := x + r ;
59386: LD_ADDR_VAR 0 9
59390: PUSH
59391: LD_VAR 0 1
59395: PUSH
59396: LD_VAR 0 3
59400: PLUS
59401: ST_TO_ADDR
// max_y := y + r ;
59402: LD_ADDR_VAR 0 10
59406: PUSH
59407: LD_VAR 0 2
59411: PUSH
59412: LD_VAR 0 3
59416: PLUS
59417: ST_TO_ADDR
// for _x = min_x to max_x do
59418: LD_ADDR_VAR 0 5
59422: PUSH
59423: DOUBLE
59424: LD_VAR 0 8
59428: DEC
59429: ST_TO_ADDR
59430: LD_VAR 0 9
59434: PUSH
59435: FOR_TO
59436: IFFALSE 59537
// for _y = min_y to max_y do
59438: LD_ADDR_VAR 0 6
59442: PUSH
59443: DOUBLE
59444: LD_VAR 0 7
59448: DEC
59449: ST_TO_ADDR
59450: LD_VAR 0 10
59454: PUSH
59455: FOR_TO
59456: IFFALSE 59533
// begin if not ValidHex ( _x , _y ) then
59458: LD_VAR 0 5
59462: PPUSH
59463: LD_VAR 0 6
59467: PPUSH
59468: CALL_OW 488
59472: NOT
59473: IFFALSE 59477
// continue ;
59475: GO 59455
// if GetResourceTypeXY ( _x , _y ) then
59477: LD_VAR 0 5
59481: PPUSH
59482: LD_VAR 0 6
59486: PPUSH
59487: CALL_OW 283
59491: IFFALSE 59531
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
59493: LD_ADDR_VAR 0 4
59497: PUSH
59498: LD_VAR 0 4
59502: PPUSH
59503: LD_VAR 0 4
59507: PUSH
59508: LD_INT 1
59510: PLUS
59511: PPUSH
59512: LD_VAR 0 5
59516: PUSH
59517: LD_VAR 0 6
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PPUSH
59526: CALL_OW 1
59530: ST_TO_ADDR
// end ;
59531: GO 59455
59533: POP
59534: POP
59535: GO 59435
59537: POP
59538: POP
// end ;
59539: LD_VAR 0 4
59543: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
59544: LD_INT 0
59546: PPUSH
59547: PPUSH
59548: PPUSH
59549: PPUSH
59550: PPUSH
59551: PPUSH
59552: PPUSH
59553: PPUSH
// if not units then
59554: LD_VAR 0 1
59558: NOT
59559: IFFALSE 59563
// exit ;
59561: GO 60087
// result := UnitFilter ( units , [ f_ok ] ) ;
59563: LD_ADDR_VAR 0 3
59567: PUSH
59568: LD_VAR 0 1
59572: PPUSH
59573: LD_INT 50
59575: PUSH
59576: EMPTY
59577: LIST
59578: PPUSH
59579: CALL_OW 72
59583: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
59584: LD_ADDR_VAR 0 8
59588: PUSH
59589: LD_VAR 0 1
59593: PUSH
59594: LD_INT 1
59596: ARRAY
59597: PPUSH
59598: CALL_OW 255
59602: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
59603: LD_ADDR_VAR 0 10
59607: PUSH
59608: LD_INT 29
59610: PUSH
59611: LD_INT 91
59613: PUSH
59614: LD_INT 49
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: LIST
59621: ST_TO_ADDR
// if not result then
59622: LD_VAR 0 3
59626: NOT
59627: IFFALSE 59631
// exit ;
59629: GO 60087
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
59631: LD_ADDR_VAR 0 5
59635: PUSH
59636: LD_INT 81
59638: PUSH
59639: LD_VAR 0 8
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PPUSH
59648: CALL_OW 69
59652: ST_TO_ADDR
// for i in result do
59653: LD_ADDR_VAR 0 4
59657: PUSH
59658: LD_VAR 0 3
59662: PUSH
59663: FOR_IN
59664: IFFALSE 60085
// begin tag := GetTag ( i ) + 1 ;
59666: LD_ADDR_VAR 0 9
59670: PUSH
59671: LD_VAR 0 4
59675: PPUSH
59676: CALL_OW 110
59680: PUSH
59681: LD_INT 1
59683: PLUS
59684: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
59685: LD_ADDR_VAR 0 7
59689: PUSH
59690: LD_VAR 0 4
59694: PPUSH
59695: CALL_OW 250
59699: PPUSH
59700: LD_VAR 0 4
59704: PPUSH
59705: CALL_OW 251
59709: PPUSH
59710: LD_INT 6
59712: PPUSH
59713: CALL 59286 0 3
59717: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
59718: LD_VAR 0 4
59722: PPUSH
59723: CALL_OW 247
59727: PUSH
59728: LD_INT 2
59730: EQUAL
59731: PUSH
59732: LD_VAR 0 7
59736: AND
59737: PUSH
59738: LD_VAR 0 4
59742: PPUSH
59743: CALL_OW 264
59747: PUSH
59748: LD_VAR 0 10
59752: IN
59753: NOT
59754: AND
59755: IFFALSE 59794
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
59757: LD_VAR 0 4
59761: PPUSH
59762: LD_VAR 0 7
59766: PUSH
59767: LD_INT 1
59769: ARRAY
59770: PUSH
59771: LD_INT 1
59773: ARRAY
59774: PPUSH
59775: LD_VAR 0 7
59779: PUSH
59780: LD_INT 1
59782: ARRAY
59783: PUSH
59784: LD_INT 2
59786: ARRAY
59787: PPUSH
59788: CALL_OW 116
59792: GO 60083
// if path > tag then
59794: LD_VAR 0 2
59798: PUSH
59799: LD_VAR 0 9
59803: GREATER
59804: IFFALSE 60012
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
59806: LD_ADDR_VAR 0 6
59810: PUSH
59811: LD_VAR 0 5
59815: PPUSH
59816: LD_INT 91
59818: PUSH
59819: LD_VAR 0 4
59823: PUSH
59824: LD_INT 8
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: LIST
59831: PPUSH
59832: CALL_OW 72
59836: ST_TO_ADDR
// if nearEnemy then
59837: LD_VAR 0 6
59841: IFFALSE 59910
// begin if GetWeapon ( i ) = ru_time_lapser then
59843: LD_VAR 0 4
59847: PPUSH
59848: CALL_OW 264
59852: PUSH
59853: LD_INT 49
59855: EQUAL
59856: IFFALSE 59884
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
59858: LD_VAR 0 4
59862: PPUSH
59863: LD_VAR 0 6
59867: PPUSH
59868: LD_VAR 0 4
59872: PPUSH
59873: CALL_OW 74
59877: PPUSH
59878: CALL_OW 112
59882: GO 59908
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
59884: LD_VAR 0 4
59888: PPUSH
59889: LD_VAR 0 6
59893: PPUSH
59894: LD_VAR 0 4
59898: PPUSH
59899: CALL_OW 74
59903: PPUSH
59904: CALL 61012 0 2
// end else
59908: GO 60010
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
59910: LD_VAR 0 4
59914: PPUSH
59915: LD_VAR 0 2
59919: PUSH
59920: LD_VAR 0 9
59924: ARRAY
59925: PUSH
59926: LD_INT 1
59928: ARRAY
59929: PPUSH
59930: LD_VAR 0 2
59934: PUSH
59935: LD_VAR 0 9
59939: ARRAY
59940: PUSH
59941: LD_INT 2
59943: ARRAY
59944: PPUSH
59945: CALL_OW 297
59949: PUSH
59950: LD_INT 6
59952: GREATER
59953: IFFALSE 59996
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
59955: LD_VAR 0 4
59959: PPUSH
59960: LD_VAR 0 2
59964: PUSH
59965: LD_VAR 0 9
59969: ARRAY
59970: PUSH
59971: LD_INT 1
59973: ARRAY
59974: PPUSH
59975: LD_VAR 0 2
59979: PUSH
59980: LD_VAR 0 9
59984: ARRAY
59985: PUSH
59986: LD_INT 2
59988: ARRAY
59989: PPUSH
59990: CALL_OW 114
59994: GO 60010
// SetTag ( i , tag ) ;
59996: LD_VAR 0 4
60000: PPUSH
60001: LD_VAR 0 9
60005: PPUSH
60006: CALL_OW 109
// end else
60010: GO 60083
// if enemy then
60012: LD_VAR 0 5
60016: IFFALSE 60083
// begin if GetWeapon ( i ) = ru_time_lapser then
60018: LD_VAR 0 4
60022: PPUSH
60023: CALL_OW 264
60027: PUSH
60028: LD_INT 49
60030: EQUAL
60031: IFFALSE 60059
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
60033: LD_VAR 0 4
60037: PPUSH
60038: LD_VAR 0 5
60042: PPUSH
60043: LD_VAR 0 4
60047: PPUSH
60048: CALL_OW 74
60052: PPUSH
60053: CALL_OW 112
60057: GO 60083
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
60059: LD_VAR 0 4
60063: PPUSH
60064: LD_VAR 0 5
60068: PPUSH
60069: LD_VAR 0 4
60073: PPUSH
60074: CALL_OW 74
60078: PPUSH
60079: CALL 61012 0 2
// end ; end ;
60083: GO 59663
60085: POP
60086: POP
// end ;
60087: LD_VAR 0 3
60091: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
60092: LD_INT 0
60094: PPUSH
60095: PPUSH
60096: PPUSH
// if not unit or IsInUnit ( unit ) then
60097: LD_VAR 0 1
60101: NOT
60102: PUSH
60103: LD_VAR 0 1
60107: PPUSH
60108: CALL_OW 310
60112: OR
60113: IFFALSE 60117
// exit ;
60115: GO 60208
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
60117: LD_ADDR_VAR 0 4
60121: PUSH
60122: LD_VAR 0 1
60126: PPUSH
60127: CALL_OW 250
60131: PPUSH
60132: LD_VAR 0 2
60136: PPUSH
60137: LD_INT 1
60139: PPUSH
60140: CALL_OW 272
60144: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
60145: LD_ADDR_VAR 0 5
60149: PUSH
60150: LD_VAR 0 1
60154: PPUSH
60155: CALL_OW 251
60159: PPUSH
60160: LD_VAR 0 2
60164: PPUSH
60165: LD_INT 1
60167: PPUSH
60168: CALL_OW 273
60172: ST_TO_ADDR
// if ValidHex ( x , y ) then
60173: LD_VAR 0 4
60177: PPUSH
60178: LD_VAR 0 5
60182: PPUSH
60183: CALL_OW 488
60187: IFFALSE 60208
// ComTurnXY ( unit , x , y ) ;
60189: LD_VAR 0 1
60193: PPUSH
60194: LD_VAR 0 4
60198: PPUSH
60199: LD_VAR 0 5
60203: PPUSH
60204: CALL_OW 118
// end ;
60208: LD_VAR 0 3
60212: RET
// export function SeeUnits ( side , units ) ; var i ; begin
60213: LD_INT 0
60215: PPUSH
60216: PPUSH
// result := false ;
60217: LD_ADDR_VAR 0 3
60221: PUSH
60222: LD_INT 0
60224: ST_TO_ADDR
// if not units then
60225: LD_VAR 0 2
60229: NOT
60230: IFFALSE 60234
// exit ;
60232: GO 60279
// for i in units do
60234: LD_ADDR_VAR 0 4
60238: PUSH
60239: LD_VAR 0 2
60243: PUSH
60244: FOR_IN
60245: IFFALSE 60277
// if See ( side , i ) then
60247: LD_VAR 0 1
60251: PPUSH
60252: LD_VAR 0 4
60256: PPUSH
60257: CALL_OW 292
60261: IFFALSE 60275
// begin result := true ;
60263: LD_ADDR_VAR 0 3
60267: PUSH
60268: LD_INT 1
60270: ST_TO_ADDR
// exit ;
60271: POP
60272: POP
60273: GO 60279
// end ;
60275: GO 60244
60277: POP
60278: POP
// end ;
60279: LD_VAR 0 3
60283: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
60284: LD_INT 0
60286: PPUSH
60287: PPUSH
60288: PPUSH
60289: PPUSH
// if not unit or not points then
60290: LD_VAR 0 1
60294: NOT
60295: PUSH
60296: LD_VAR 0 2
60300: NOT
60301: OR
60302: IFFALSE 60306
// exit ;
60304: GO 60396
// dist := 99999 ;
60306: LD_ADDR_VAR 0 5
60310: PUSH
60311: LD_INT 99999
60313: ST_TO_ADDR
// for i in points do
60314: LD_ADDR_VAR 0 4
60318: PUSH
60319: LD_VAR 0 2
60323: PUSH
60324: FOR_IN
60325: IFFALSE 60394
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
60327: LD_ADDR_VAR 0 6
60331: PUSH
60332: LD_VAR 0 1
60336: PPUSH
60337: LD_VAR 0 4
60341: PUSH
60342: LD_INT 1
60344: ARRAY
60345: PPUSH
60346: LD_VAR 0 4
60350: PUSH
60351: LD_INT 2
60353: ARRAY
60354: PPUSH
60355: CALL_OW 297
60359: ST_TO_ADDR
// if tmpDist < dist then
60360: LD_VAR 0 6
60364: PUSH
60365: LD_VAR 0 5
60369: LESS
60370: IFFALSE 60392
// begin result := i ;
60372: LD_ADDR_VAR 0 3
60376: PUSH
60377: LD_VAR 0 4
60381: ST_TO_ADDR
// dist := tmpDist ;
60382: LD_ADDR_VAR 0 5
60386: PUSH
60387: LD_VAR 0 6
60391: ST_TO_ADDR
// end ; end ;
60392: GO 60324
60394: POP
60395: POP
// end ;
60396: LD_VAR 0 3
60400: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
60401: LD_INT 0
60403: PPUSH
// uc_side := side ;
60404: LD_ADDR_OWVAR 20
60408: PUSH
60409: LD_VAR 0 1
60413: ST_TO_ADDR
// uc_nation := 3 ;
60414: LD_ADDR_OWVAR 21
60418: PUSH
60419: LD_INT 3
60421: ST_TO_ADDR
// vc_chassis := 25 ;
60422: LD_ADDR_OWVAR 37
60426: PUSH
60427: LD_INT 25
60429: ST_TO_ADDR
// vc_engine := engine_siberite ;
60430: LD_ADDR_OWVAR 39
60434: PUSH
60435: LD_INT 3
60437: ST_TO_ADDR
// vc_control := control_computer ;
60438: LD_ADDR_OWVAR 38
60442: PUSH
60443: LD_INT 3
60445: ST_TO_ADDR
// vc_weapon := 59 ;
60446: LD_ADDR_OWVAR 40
60450: PUSH
60451: LD_INT 59
60453: ST_TO_ADDR
// result := CreateVehicle ;
60454: LD_ADDR_VAR 0 5
60458: PUSH
60459: CALL_OW 45
60463: ST_TO_ADDR
// SetDir ( result , d ) ;
60464: LD_VAR 0 5
60468: PPUSH
60469: LD_VAR 0 4
60473: PPUSH
60474: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
60478: LD_VAR 0 5
60482: PPUSH
60483: LD_VAR 0 2
60487: PPUSH
60488: LD_VAR 0 3
60492: PPUSH
60493: LD_INT 0
60495: PPUSH
60496: CALL_OW 48
// end ;
60500: LD_VAR 0 5
60504: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
60505: LD_INT 0
60507: PPUSH
60508: PPUSH
60509: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
60510: LD_ADDR_VAR 0 2
60514: PUSH
60515: LD_INT 0
60517: PUSH
60518: LD_INT 0
60520: PUSH
60521: LD_INT 0
60523: PUSH
60524: LD_INT 0
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
60533: LD_VAR 0 1
60537: NOT
60538: PUSH
60539: LD_VAR 0 1
60543: PPUSH
60544: CALL_OW 264
60548: PUSH
60549: LD_INT 12
60551: PUSH
60552: LD_INT 51
60554: PUSH
60555: LD_INT 32
60557: PUSH
60558: LD_INT 89
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: IN
60567: NOT
60568: OR
60569: IFFALSE 60573
// exit ;
60571: GO 60671
// for i := 1 to 3 do
60573: LD_ADDR_VAR 0 3
60577: PUSH
60578: DOUBLE
60579: LD_INT 1
60581: DEC
60582: ST_TO_ADDR
60583: LD_INT 3
60585: PUSH
60586: FOR_TO
60587: IFFALSE 60669
// begin tmp := GetCargo ( cargo , i ) ;
60589: LD_ADDR_VAR 0 4
60593: PUSH
60594: LD_VAR 0 1
60598: PPUSH
60599: LD_VAR 0 3
60603: PPUSH
60604: CALL_OW 289
60608: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
60609: LD_ADDR_VAR 0 2
60613: PUSH
60614: LD_VAR 0 2
60618: PPUSH
60619: LD_VAR 0 3
60623: PPUSH
60624: LD_VAR 0 4
60628: PPUSH
60629: CALL_OW 1
60633: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
60634: LD_ADDR_VAR 0 2
60638: PUSH
60639: LD_VAR 0 2
60643: PPUSH
60644: LD_INT 4
60646: PPUSH
60647: LD_VAR 0 2
60651: PUSH
60652: LD_INT 4
60654: ARRAY
60655: PUSH
60656: LD_VAR 0 4
60660: PLUS
60661: PPUSH
60662: CALL_OW 1
60666: ST_TO_ADDR
// end ;
60667: GO 60586
60669: POP
60670: POP
// end ;
60671: LD_VAR 0 2
60675: RET
// export function Length ( array ) ; begin
60676: LD_INT 0
60678: PPUSH
// result := array + 0 ;
60679: LD_ADDR_VAR 0 2
60683: PUSH
60684: LD_VAR 0 1
60688: PUSH
60689: LD_INT 0
60691: PLUS
60692: ST_TO_ADDR
// end ;
60693: LD_VAR 0 2
60697: RET
// export function PrepareArray ( array ) ; begin
60698: LD_INT 0
60700: PPUSH
// result := array diff 0 ;
60701: LD_ADDR_VAR 0 2
60705: PUSH
60706: LD_VAR 0 1
60710: PUSH
60711: LD_INT 0
60713: DIFF
60714: ST_TO_ADDR
// if not result [ 1 ] then
60715: LD_VAR 0 2
60719: PUSH
60720: LD_INT 1
60722: ARRAY
60723: NOT
60724: IFFALSE 60744
// result := Delete ( result , 1 ) ;
60726: LD_ADDR_VAR 0 2
60730: PUSH
60731: LD_VAR 0 2
60735: PPUSH
60736: LD_INT 1
60738: PPUSH
60739: CALL_OW 3
60743: ST_TO_ADDR
// end ;
60744: LD_VAR 0 2
60748: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
60749: LD_INT 0
60751: PPUSH
60752: PPUSH
60753: PPUSH
60754: PPUSH
// sibRocketRange := 25 ;
60755: LD_ADDR_VAR 0 6
60759: PUSH
60760: LD_INT 25
60762: ST_TO_ADDR
// result := false ;
60763: LD_ADDR_VAR 0 4
60767: PUSH
60768: LD_INT 0
60770: ST_TO_ADDR
// for i := 0 to 5 do
60771: LD_ADDR_VAR 0 5
60775: PUSH
60776: DOUBLE
60777: LD_INT 0
60779: DEC
60780: ST_TO_ADDR
60781: LD_INT 5
60783: PUSH
60784: FOR_TO
60785: IFFALSE 60852
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
60787: LD_VAR 0 1
60791: PPUSH
60792: LD_VAR 0 5
60796: PPUSH
60797: LD_VAR 0 6
60801: PPUSH
60802: CALL_OW 272
60806: PPUSH
60807: LD_VAR 0 2
60811: PPUSH
60812: LD_VAR 0 5
60816: PPUSH
60817: LD_VAR 0 6
60821: PPUSH
60822: CALL_OW 273
60826: PPUSH
60827: LD_VAR 0 3
60831: PPUSH
60832: CALL_OW 309
60836: IFFALSE 60850
// begin result := true ;
60838: LD_ADDR_VAR 0 4
60842: PUSH
60843: LD_INT 1
60845: ST_TO_ADDR
// exit ;
60846: POP
60847: POP
60848: GO 60854
// end ;
60850: GO 60784
60852: POP
60853: POP
// end ;
60854: LD_VAR 0 4
60858: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
60859: LD_INT 0
60861: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
60862: LD_VAR 0 1
60866: PPUSH
60867: LD_VAR 0 2
60871: PPUSH
60872: LD_INT 0
60874: PPUSH
60875: LD_INT 0
60877: PPUSH
60878: LD_INT 1
60880: PPUSH
60881: LD_INT 0
60883: PPUSH
60884: CALL_OW 587
// end ;
60888: LD_VAR 0 3
60892: RET
// export function CenterOnNow ( unit ) ; begin
60893: LD_INT 0
60895: PPUSH
// result := IsInUnit ( unit ) ;
60896: LD_ADDR_VAR 0 2
60900: PUSH
60901: LD_VAR 0 1
60905: PPUSH
60906: CALL_OW 310
60910: ST_TO_ADDR
// if not result then
60911: LD_VAR 0 2
60915: NOT
60916: IFFALSE 60928
// result := unit ;
60918: LD_ADDR_VAR 0 2
60922: PUSH
60923: LD_VAR 0 1
60927: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
60928: LD_VAR 0 1
60932: PPUSH
60933: CALL_OW 87
// end ;
60937: LD_VAR 0 2
60941: RET
// export function ComMoveHex ( unit , hex ) ; begin
60942: LD_INT 0
60944: PPUSH
// if not hex then
60945: LD_VAR 0 2
60949: NOT
60950: IFFALSE 60954
// exit ;
60952: GO 61007
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
60954: LD_VAR 0 2
60958: PUSH
60959: LD_INT 1
60961: ARRAY
60962: PPUSH
60963: LD_VAR 0 2
60967: PUSH
60968: LD_INT 2
60970: ARRAY
60971: PPUSH
60972: CALL_OW 428
60976: IFFALSE 60980
// exit ;
60978: GO 61007
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
60980: LD_VAR 0 1
60984: PPUSH
60985: LD_VAR 0 2
60989: PUSH
60990: LD_INT 1
60992: ARRAY
60993: PPUSH
60994: LD_VAR 0 2
60998: PUSH
60999: LD_INT 2
61001: ARRAY
61002: PPUSH
61003: CALL_OW 111
// end ;
61007: LD_VAR 0 3
61011: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
61012: LD_INT 0
61014: PPUSH
61015: PPUSH
61016: PPUSH
// if not unit or not enemy then
61017: LD_VAR 0 1
61021: NOT
61022: PUSH
61023: LD_VAR 0 2
61027: NOT
61028: OR
61029: IFFALSE 61033
// exit ;
61031: GO 61157
// x := GetX ( enemy ) ;
61033: LD_ADDR_VAR 0 4
61037: PUSH
61038: LD_VAR 0 2
61042: PPUSH
61043: CALL_OW 250
61047: ST_TO_ADDR
// y := GetY ( enemy ) ;
61048: LD_ADDR_VAR 0 5
61052: PUSH
61053: LD_VAR 0 2
61057: PPUSH
61058: CALL_OW 251
61062: ST_TO_ADDR
// if ValidHex ( x , y ) then
61063: LD_VAR 0 4
61067: PPUSH
61068: LD_VAR 0 5
61072: PPUSH
61073: CALL_OW 488
61077: IFFALSE 61157
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
61079: LD_VAR 0 2
61083: PPUSH
61084: CALL_OW 247
61088: PUSH
61089: LD_INT 3
61091: PUSH
61092: LD_INT 2
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: IN
61099: PUSH
61100: LD_VAR 0 1
61104: PPUSH
61105: CALL_OW 255
61109: PPUSH
61110: LD_VAR 0 2
61114: PPUSH
61115: CALL_OW 292
61119: AND
61120: IFFALSE 61138
// ComAttackUnit ( unit , enemy ) else
61122: LD_VAR 0 1
61126: PPUSH
61127: LD_VAR 0 2
61131: PPUSH
61132: CALL_OW 115
61136: GO 61157
// ComAgressiveMove ( unit , x , y ) ;
61138: LD_VAR 0 1
61142: PPUSH
61143: LD_VAR 0 4
61147: PPUSH
61148: LD_VAR 0 5
61152: PPUSH
61153: CALL_OW 114
// end ; end_of_file end_of_file
61157: LD_VAR 0 3
61161: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
61162: LD_VAR 0 1
61166: PPUSH
61167: LD_VAR 0 2
61171: PPUSH
61172: LD_VAR 0 3
61176: PPUSH
61177: LD_VAR 0 4
61181: PPUSH
61182: LD_VAR 0 5
61186: PPUSH
61187: LD_VAR 0 6
61191: PPUSH
61192: CALL 61376 0 6
// end ;
61196: PPOPN 6
61198: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
61199: LD_INT 0
61201: PPUSH
// begin if not units then
61202: LD_VAR 0 1
61206: NOT
61207: IFFALSE 61211
// exit ;
61209: GO 61211
// end ;
61211: PPOPN 7
61213: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
61214: CALL 61280 0 0
// end ; end_of_file
61218: PPOPN 1
61220: END
// export globalGameSaveCounter ; every 0 0$1 do
61221: GO 61223
61223: DISABLE
// begin enable ;
61224: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
61225: LD_STRING updateTimer(
61227: PUSH
61228: LD_OWVAR 1
61232: STR
61233: PUSH
61234: LD_STRING );
61236: STR
61237: PPUSH
61238: CALL_OW 559
// end ;
61242: END
// every 0 0$1 do
61243: GO 61245
61245: DISABLE
// begin globalGameSaveCounter := 0 ;
61246: LD_ADDR_EXP 44
61250: PUSH
61251: LD_INT 0
61253: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
61254: LD_STRING setGameSaveCounter(0)
61256: PPUSH
61257: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
61261: LD_STRING initStreamRollete();
61263: PPUSH
61264: CALL_OW 559
// InitStreamMode ;
61268: CALL 62594 0 0
// DefineStreamItems ( false ) ;
61272: LD_INT 0
61274: PPUSH
61275: CALL 63058 0 1
// end ;
61279: END
// export function SOS_MapStart ( ) ; begin
61280: LD_INT 0
61282: PPUSH
// if streamModeActive then
61283: LD_EXP 45
61287: IFFALSE 61296
// DefineStreamItems ( true ) ;
61289: LD_INT 1
61291: PPUSH
61292: CALL 63058 0 1
// UpdateLuaVariables ( ) ;
61296: CALL 61313 0 0
// UpdateFactoryWaypoints ( ) ;
61300: CALL 75927 0 0
// UpdateWarehouseGatheringPoints ( ) ;
61304: CALL 76184 0 0
// end ;
61308: LD_VAR 0 1
61312: RET
// function UpdateLuaVariables ( ) ; begin
61313: LD_INT 0
61315: PPUSH
// if globalGameSaveCounter then
61316: LD_EXP 44
61320: IFFALSE 61354
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
61322: LD_ADDR_EXP 44
61326: PUSH
61327: LD_EXP 44
61331: PPUSH
61332: CALL 58301 0 1
61336: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
61337: LD_STRING setGameSaveCounter(
61339: PUSH
61340: LD_EXP 44
61344: STR
61345: PUSH
61346: LD_STRING )
61348: STR
61349: PPUSH
61350: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
61354: LD_STRING setGameDifficulty(
61356: PUSH
61357: LD_OWVAR 67
61361: STR
61362: PUSH
61363: LD_STRING )
61365: STR
61366: PPUSH
61367: CALL_OW 559
// end ;
61371: LD_VAR 0 1
61375: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61376: LD_INT 0
61378: PPUSH
// if p2 = stream_mode then
61379: LD_VAR 0 2
61383: PUSH
61384: LD_INT 100
61386: EQUAL
61387: IFFALSE 62390
// begin if not StreamModeActive then
61389: LD_EXP 45
61393: NOT
61394: IFFALSE 61404
// StreamModeActive := true ;
61396: LD_ADDR_EXP 45
61400: PUSH
61401: LD_INT 1
61403: ST_TO_ADDR
// if p3 = 0 then
61404: LD_VAR 0 3
61408: PUSH
61409: LD_INT 0
61411: EQUAL
61412: IFFALSE 61418
// InitStreamMode ;
61414: CALL 62594 0 0
// if p3 = 1 then
61418: LD_VAR 0 3
61422: PUSH
61423: LD_INT 1
61425: EQUAL
61426: IFFALSE 61436
// sRocket := true ;
61428: LD_ADDR_EXP 50
61432: PUSH
61433: LD_INT 1
61435: ST_TO_ADDR
// if p3 = 2 then
61436: LD_VAR 0 3
61440: PUSH
61441: LD_INT 2
61443: EQUAL
61444: IFFALSE 61454
// sSpeed := true ;
61446: LD_ADDR_EXP 49
61450: PUSH
61451: LD_INT 1
61453: ST_TO_ADDR
// if p3 = 3 then
61454: LD_VAR 0 3
61458: PUSH
61459: LD_INT 3
61461: EQUAL
61462: IFFALSE 61472
// sEngine := true ;
61464: LD_ADDR_EXP 51
61468: PUSH
61469: LD_INT 1
61471: ST_TO_ADDR
// if p3 = 4 then
61472: LD_VAR 0 3
61476: PUSH
61477: LD_INT 4
61479: EQUAL
61480: IFFALSE 61490
// sSpec := true ;
61482: LD_ADDR_EXP 48
61486: PUSH
61487: LD_INT 1
61489: ST_TO_ADDR
// if p3 = 5 then
61490: LD_VAR 0 3
61494: PUSH
61495: LD_INT 5
61497: EQUAL
61498: IFFALSE 61508
// sLevel := true ;
61500: LD_ADDR_EXP 52
61504: PUSH
61505: LD_INT 1
61507: ST_TO_ADDR
// if p3 = 6 then
61508: LD_VAR 0 3
61512: PUSH
61513: LD_INT 6
61515: EQUAL
61516: IFFALSE 61526
// sArmoury := true ;
61518: LD_ADDR_EXP 53
61522: PUSH
61523: LD_INT 1
61525: ST_TO_ADDR
// if p3 = 7 then
61526: LD_VAR 0 3
61530: PUSH
61531: LD_INT 7
61533: EQUAL
61534: IFFALSE 61544
// sRadar := true ;
61536: LD_ADDR_EXP 54
61540: PUSH
61541: LD_INT 1
61543: ST_TO_ADDR
// if p3 = 8 then
61544: LD_VAR 0 3
61548: PUSH
61549: LD_INT 8
61551: EQUAL
61552: IFFALSE 61562
// sBunker := true ;
61554: LD_ADDR_EXP 55
61558: PUSH
61559: LD_INT 1
61561: ST_TO_ADDR
// if p3 = 9 then
61562: LD_VAR 0 3
61566: PUSH
61567: LD_INT 9
61569: EQUAL
61570: IFFALSE 61580
// sHack := true ;
61572: LD_ADDR_EXP 56
61576: PUSH
61577: LD_INT 1
61579: ST_TO_ADDR
// if p3 = 10 then
61580: LD_VAR 0 3
61584: PUSH
61585: LD_INT 10
61587: EQUAL
61588: IFFALSE 61598
// sFire := true ;
61590: LD_ADDR_EXP 57
61594: PUSH
61595: LD_INT 1
61597: ST_TO_ADDR
// if p3 = 11 then
61598: LD_VAR 0 3
61602: PUSH
61603: LD_INT 11
61605: EQUAL
61606: IFFALSE 61616
// sRefresh := true ;
61608: LD_ADDR_EXP 58
61612: PUSH
61613: LD_INT 1
61615: ST_TO_ADDR
// if p3 = 12 then
61616: LD_VAR 0 3
61620: PUSH
61621: LD_INT 12
61623: EQUAL
61624: IFFALSE 61634
// sExp := true ;
61626: LD_ADDR_EXP 59
61630: PUSH
61631: LD_INT 1
61633: ST_TO_ADDR
// if p3 = 13 then
61634: LD_VAR 0 3
61638: PUSH
61639: LD_INT 13
61641: EQUAL
61642: IFFALSE 61652
// sDepot := true ;
61644: LD_ADDR_EXP 60
61648: PUSH
61649: LD_INT 1
61651: ST_TO_ADDR
// if p3 = 14 then
61652: LD_VAR 0 3
61656: PUSH
61657: LD_INT 14
61659: EQUAL
61660: IFFALSE 61670
// sFlag := true ;
61662: LD_ADDR_EXP 61
61666: PUSH
61667: LD_INT 1
61669: ST_TO_ADDR
// if p3 = 15 then
61670: LD_VAR 0 3
61674: PUSH
61675: LD_INT 15
61677: EQUAL
61678: IFFALSE 61688
// sKamikadze := true ;
61680: LD_ADDR_EXP 69
61684: PUSH
61685: LD_INT 1
61687: ST_TO_ADDR
// if p3 = 16 then
61688: LD_VAR 0 3
61692: PUSH
61693: LD_INT 16
61695: EQUAL
61696: IFFALSE 61706
// sTroll := true ;
61698: LD_ADDR_EXP 70
61702: PUSH
61703: LD_INT 1
61705: ST_TO_ADDR
// if p3 = 17 then
61706: LD_VAR 0 3
61710: PUSH
61711: LD_INT 17
61713: EQUAL
61714: IFFALSE 61724
// sSlow := true ;
61716: LD_ADDR_EXP 71
61720: PUSH
61721: LD_INT 1
61723: ST_TO_ADDR
// if p3 = 18 then
61724: LD_VAR 0 3
61728: PUSH
61729: LD_INT 18
61731: EQUAL
61732: IFFALSE 61742
// sLack := true ;
61734: LD_ADDR_EXP 72
61738: PUSH
61739: LD_INT 1
61741: ST_TO_ADDR
// if p3 = 19 then
61742: LD_VAR 0 3
61746: PUSH
61747: LD_INT 19
61749: EQUAL
61750: IFFALSE 61760
// sTank := true ;
61752: LD_ADDR_EXP 74
61756: PUSH
61757: LD_INT 1
61759: ST_TO_ADDR
// if p3 = 20 then
61760: LD_VAR 0 3
61764: PUSH
61765: LD_INT 20
61767: EQUAL
61768: IFFALSE 61778
// sRemote := true ;
61770: LD_ADDR_EXP 75
61774: PUSH
61775: LD_INT 1
61777: ST_TO_ADDR
// if p3 = 21 then
61778: LD_VAR 0 3
61782: PUSH
61783: LD_INT 21
61785: EQUAL
61786: IFFALSE 61796
// sPowell := true ;
61788: LD_ADDR_EXP 76
61792: PUSH
61793: LD_INT 1
61795: ST_TO_ADDR
// if p3 = 22 then
61796: LD_VAR 0 3
61800: PUSH
61801: LD_INT 22
61803: EQUAL
61804: IFFALSE 61814
// sTeleport := true ;
61806: LD_ADDR_EXP 79
61810: PUSH
61811: LD_INT 1
61813: ST_TO_ADDR
// if p3 = 23 then
61814: LD_VAR 0 3
61818: PUSH
61819: LD_INT 23
61821: EQUAL
61822: IFFALSE 61832
// sOilTower := true ;
61824: LD_ADDR_EXP 81
61828: PUSH
61829: LD_INT 1
61831: ST_TO_ADDR
// if p3 = 24 then
61832: LD_VAR 0 3
61836: PUSH
61837: LD_INT 24
61839: EQUAL
61840: IFFALSE 61850
// sShovel := true ;
61842: LD_ADDR_EXP 82
61846: PUSH
61847: LD_INT 1
61849: ST_TO_ADDR
// if p3 = 25 then
61850: LD_VAR 0 3
61854: PUSH
61855: LD_INT 25
61857: EQUAL
61858: IFFALSE 61868
// sSheik := true ;
61860: LD_ADDR_EXP 83
61864: PUSH
61865: LD_INT 1
61867: ST_TO_ADDR
// if p3 = 26 then
61868: LD_VAR 0 3
61872: PUSH
61873: LD_INT 26
61875: EQUAL
61876: IFFALSE 61886
// sEarthquake := true ;
61878: LD_ADDR_EXP 85
61882: PUSH
61883: LD_INT 1
61885: ST_TO_ADDR
// if p3 = 27 then
61886: LD_VAR 0 3
61890: PUSH
61891: LD_INT 27
61893: EQUAL
61894: IFFALSE 61904
// sAI := true ;
61896: LD_ADDR_EXP 86
61900: PUSH
61901: LD_INT 1
61903: ST_TO_ADDR
// if p3 = 28 then
61904: LD_VAR 0 3
61908: PUSH
61909: LD_INT 28
61911: EQUAL
61912: IFFALSE 61922
// sCargo := true ;
61914: LD_ADDR_EXP 89
61918: PUSH
61919: LD_INT 1
61921: ST_TO_ADDR
// if p3 = 29 then
61922: LD_VAR 0 3
61926: PUSH
61927: LD_INT 29
61929: EQUAL
61930: IFFALSE 61940
// sDLaser := true ;
61932: LD_ADDR_EXP 90
61936: PUSH
61937: LD_INT 1
61939: ST_TO_ADDR
// if p3 = 30 then
61940: LD_VAR 0 3
61944: PUSH
61945: LD_INT 30
61947: EQUAL
61948: IFFALSE 61958
// sExchange := true ;
61950: LD_ADDR_EXP 91
61954: PUSH
61955: LD_INT 1
61957: ST_TO_ADDR
// if p3 = 31 then
61958: LD_VAR 0 3
61962: PUSH
61963: LD_INT 31
61965: EQUAL
61966: IFFALSE 61976
// sFac := true ;
61968: LD_ADDR_EXP 92
61972: PUSH
61973: LD_INT 1
61975: ST_TO_ADDR
// if p3 = 32 then
61976: LD_VAR 0 3
61980: PUSH
61981: LD_INT 32
61983: EQUAL
61984: IFFALSE 61994
// sPower := true ;
61986: LD_ADDR_EXP 93
61990: PUSH
61991: LD_INT 1
61993: ST_TO_ADDR
// if p3 = 33 then
61994: LD_VAR 0 3
61998: PUSH
61999: LD_INT 33
62001: EQUAL
62002: IFFALSE 62012
// sRandom := true ;
62004: LD_ADDR_EXP 94
62008: PUSH
62009: LD_INT 1
62011: ST_TO_ADDR
// if p3 = 34 then
62012: LD_VAR 0 3
62016: PUSH
62017: LD_INT 34
62019: EQUAL
62020: IFFALSE 62030
// sShield := true ;
62022: LD_ADDR_EXP 95
62026: PUSH
62027: LD_INT 1
62029: ST_TO_ADDR
// if p3 = 35 then
62030: LD_VAR 0 3
62034: PUSH
62035: LD_INT 35
62037: EQUAL
62038: IFFALSE 62048
// sTime := true ;
62040: LD_ADDR_EXP 96
62044: PUSH
62045: LD_INT 1
62047: ST_TO_ADDR
// if p3 = 36 then
62048: LD_VAR 0 3
62052: PUSH
62053: LD_INT 36
62055: EQUAL
62056: IFFALSE 62066
// sTools := true ;
62058: LD_ADDR_EXP 97
62062: PUSH
62063: LD_INT 1
62065: ST_TO_ADDR
// if p3 = 101 then
62066: LD_VAR 0 3
62070: PUSH
62071: LD_INT 101
62073: EQUAL
62074: IFFALSE 62084
// sSold := true ;
62076: LD_ADDR_EXP 62
62080: PUSH
62081: LD_INT 1
62083: ST_TO_ADDR
// if p3 = 102 then
62084: LD_VAR 0 3
62088: PUSH
62089: LD_INT 102
62091: EQUAL
62092: IFFALSE 62102
// sDiff := true ;
62094: LD_ADDR_EXP 63
62098: PUSH
62099: LD_INT 1
62101: ST_TO_ADDR
// if p3 = 103 then
62102: LD_VAR 0 3
62106: PUSH
62107: LD_INT 103
62109: EQUAL
62110: IFFALSE 62120
// sFog := true ;
62112: LD_ADDR_EXP 66
62116: PUSH
62117: LD_INT 1
62119: ST_TO_ADDR
// if p3 = 104 then
62120: LD_VAR 0 3
62124: PUSH
62125: LD_INT 104
62127: EQUAL
62128: IFFALSE 62138
// sReset := true ;
62130: LD_ADDR_EXP 67
62134: PUSH
62135: LD_INT 1
62137: ST_TO_ADDR
// if p3 = 105 then
62138: LD_VAR 0 3
62142: PUSH
62143: LD_INT 105
62145: EQUAL
62146: IFFALSE 62156
// sSun := true ;
62148: LD_ADDR_EXP 68
62152: PUSH
62153: LD_INT 1
62155: ST_TO_ADDR
// if p3 = 106 then
62156: LD_VAR 0 3
62160: PUSH
62161: LD_INT 106
62163: EQUAL
62164: IFFALSE 62174
// sTiger := true ;
62166: LD_ADDR_EXP 64
62170: PUSH
62171: LD_INT 1
62173: ST_TO_ADDR
// if p3 = 107 then
62174: LD_VAR 0 3
62178: PUSH
62179: LD_INT 107
62181: EQUAL
62182: IFFALSE 62192
// sBomb := true ;
62184: LD_ADDR_EXP 65
62188: PUSH
62189: LD_INT 1
62191: ST_TO_ADDR
// if p3 = 108 then
62192: LD_VAR 0 3
62196: PUSH
62197: LD_INT 108
62199: EQUAL
62200: IFFALSE 62210
// sWound := true ;
62202: LD_ADDR_EXP 73
62206: PUSH
62207: LD_INT 1
62209: ST_TO_ADDR
// if p3 = 109 then
62210: LD_VAR 0 3
62214: PUSH
62215: LD_INT 109
62217: EQUAL
62218: IFFALSE 62228
// sBetray := true ;
62220: LD_ADDR_EXP 77
62224: PUSH
62225: LD_INT 1
62227: ST_TO_ADDR
// if p3 = 110 then
62228: LD_VAR 0 3
62232: PUSH
62233: LD_INT 110
62235: EQUAL
62236: IFFALSE 62246
// sContamin := true ;
62238: LD_ADDR_EXP 78
62242: PUSH
62243: LD_INT 1
62245: ST_TO_ADDR
// if p3 = 111 then
62246: LD_VAR 0 3
62250: PUSH
62251: LD_INT 111
62253: EQUAL
62254: IFFALSE 62264
// sOil := true ;
62256: LD_ADDR_EXP 80
62260: PUSH
62261: LD_INT 1
62263: ST_TO_ADDR
// if p3 = 112 then
62264: LD_VAR 0 3
62268: PUSH
62269: LD_INT 112
62271: EQUAL
62272: IFFALSE 62282
// sStu := true ;
62274: LD_ADDR_EXP 84
62278: PUSH
62279: LD_INT 1
62281: ST_TO_ADDR
// if p3 = 113 then
62282: LD_VAR 0 3
62286: PUSH
62287: LD_INT 113
62289: EQUAL
62290: IFFALSE 62300
// sBazooka := true ;
62292: LD_ADDR_EXP 87
62296: PUSH
62297: LD_INT 1
62299: ST_TO_ADDR
// if p3 = 114 then
62300: LD_VAR 0 3
62304: PUSH
62305: LD_INT 114
62307: EQUAL
62308: IFFALSE 62318
// sMortar := true ;
62310: LD_ADDR_EXP 88
62314: PUSH
62315: LD_INT 1
62317: ST_TO_ADDR
// if p3 = 115 then
62318: LD_VAR 0 3
62322: PUSH
62323: LD_INT 115
62325: EQUAL
62326: IFFALSE 62336
// sRanger := true ;
62328: LD_ADDR_EXP 98
62332: PUSH
62333: LD_INT 1
62335: ST_TO_ADDR
// if p3 = 116 then
62336: LD_VAR 0 3
62340: PUSH
62341: LD_INT 116
62343: EQUAL
62344: IFFALSE 62354
// sComputer := true ;
62346: LD_ADDR_EXP 99
62350: PUSH
62351: LD_INT 1
62353: ST_TO_ADDR
// if p3 = 117 then
62354: LD_VAR 0 3
62358: PUSH
62359: LD_INT 117
62361: EQUAL
62362: IFFALSE 62372
// s30 := true ;
62364: LD_ADDR_EXP 100
62368: PUSH
62369: LD_INT 1
62371: ST_TO_ADDR
// if p3 = 118 then
62372: LD_VAR 0 3
62376: PUSH
62377: LD_INT 118
62379: EQUAL
62380: IFFALSE 62390
// s60 := true ;
62382: LD_ADDR_EXP 101
62386: PUSH
62387: LD_INT 1
62389: ST_TO_ADDR
// end ; if p2 = hack_mode then
62390: LD_VAR 0 2
62394: PUSH
62395: LD_INT 101
62397: EQUAL
62398: IFFALSE 62526
// begin case p3 of 1 :
62400: LD_VAR 0 3
62404: PUSH
62405: LD_INT 1
62407: DOUBLE
62408: EQUAL
62409: IFTRUE 62413
62411: GO 62420
62413: POP
// hHackUnlimitedResources ; 2 :
62414: CALL 74673 0 0
62418: GO 62526
62420: LD_INT 2
62422: DOUBLE
62423: EQUAL
62424: IFTRUE 62428
62426: GO 62435
62428: POP
// hHackSetLevel10 ; 3 :
62429: CALL 74806 0 0
62433: GO 62526
62435: LD_INT 3
62437: DOUBLE
62438: EQUAL
62439: IFTRUE 62443
62441: GO 62450
62443: POP
// hHackSetLevel10YourUnits ; 4 :
62444: CALL 74891 0 0
62448: GO 62526
62450: LD_INT 4
62452: DOUBLE
62453: EQUAL
62454: IFTRUE 62458
62456: GO 62465
62458: POP
// hHackInvincible ; 5 :
62459: CALL 75339 0 0
62463: GO 62526
62465: LD_INT 5
62467: DOUBLE
62468: EQUAL
62469: IFTRUE 62473
62471: GO 62480
62473: POP
// hHackInvisible ; 6 :
62474: CALL 75450 0 0
62478: GO 62526
62480: LD_INT 6
62482: DOUBLE
62483: EQUAL
62484: IFTRUE 62488
62486: GO 62495
62488: POP
// hHackChangeYourSide ; 7 :
62489: CALL 75507 0 0
62493: GO 62526
62495: LD_INT 7
62497: DOUBLE
62498: EQUAL
62499: IFTRUE 62503
62501: GO 62510
62503: POP
// hHackChangeUnitSide ; 8 :
62504: CALL 75549 0 0
62508: GO 62526
62510: LD_INT 8
62512: DOUBLE
62513: EQUAL
62514: IFTRUE 62518
62516: GO 62525
62518: POP
// hHackFog ; end ;
62519: CALL 75650 0 0
62523: GO 62526
62525: POP
// end ; if p2 = game_save_mode then
62526: LD_VAR 0 2
62530: PUSH
62531: LD_INT 102
62533: EQUAL
62534: IFFALSE 62589
// begin if p3 = 1 then
62536: LD_VAR 0 3
62540: PUSH
62541: LD_INT 1
62543: EQUAL
62544: IFFALSE 62556
// globalGameSaveCounter := p4 ;
62546: LD_ADDR_EXP 44
62550: PUSH
62551: LD_VAR 0 4
62555: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
62556: LD_VAR 0 3
62560: PUSH
62561: LD_INT 2
62563: EQUAL
62564: PUSH
62565: LD_EXP 44
62569: AND
62570: IFFALSE 62589
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
62572: LD_STRING setGameSaveCounter(
62574: PUSH
62575: LD_EXP 44
62579: STR
62580: PUSH
62581: LD_STRING )
62583: STR
62584: PPUSH
62585: CALL_OW 559
// end ; end ;
62589: LD_VAR 0 7
62593: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
62594: LD_INT 0
62596: PPUSH
// streamModeActive := false ;
62597: LD_ADDR_EXP 45
62601: PUSH
62602: LD_INT 0
62604: ST_TO_ADDR
// normalCounter := 36 ;
62605: LD_ADDR_EXP 46
62609: PUSH
62610: LD_INT 36
62612: ST_TO_ADDR
// hardcoreCounter := 18 ;
62613: LD_ADDR_EXP 47
62617: PUSH
62618: LD_INT 18
62620: ST_TO_ADDR
// sRocket := false ;
62621: LD_ADDR_EXP 50
62625: PUSH
62626: LD_INT 0
62628: ST_TO_ADDR
// sSpeed := false ;
62629: LD_ADDR_EXP 49
62633: PUSH
62634: LD_INT 0
62636: ST_TO_ADDR
// sEngine := false ;
62637: LD_ADDR_EXP 51
62641: PUSH
62642: LD_INT 0
62644: ST_TO_ADDR
// sSpec := false ;
62645: LD_ADDR_EXP 48
62649: PUSH
62650: LD_INT 0
62652: ST_TO_ADDR
// sLevel := false ;
62653: LD_ADDR_EXP 52
62657: PUSH
62658: LD_INT 0
62660: ST_TO_ADDR
// sArmoury := false ;
62661: LD_ADDR_EXP 53
62665: PUSH
62666: LD_INT 0
62668: ST_TO_ADDR
// sRadar := false ;
62669: LD_ADDR_EXP 54
62673: PUSH
62674: LD_INT 0
62676: ST_TO_ADDR
// sBunker := false ;
62677: LD_ADDR_EXP 55
62681: PUSH
62682: LD_INT 0
62684: ST_TO_ADDR
// sHack := false ;
62685: LD_ADDR_EXP 56
62689: PUSH
62690: LD_INT 0
62692: ST_TO_ADDR
// sFire := false ;
62693: LD_ADDR_EXP 57
62697: PUSH
62698: LD_INT 0
62700: ST_TO_ADDR
// sRefresh := false ;
62701: LD_ADDR_EXP 58
62705: PUSH
62706: LD_INT 0
62708: ST_TO_ADDR
// sExp := false ;
62709: LD_ADDR_EXP 59
62713: PUSH
62714: LD_INT 0
62716: ST_TO_ADDR
// sDepot := false ;
62717: LD_ADDR_EXP 60
62721: PUSH
62722: LD_INT 0
62724: ST_TO_ADDR
// sFlag := false ;
62725: LD_ADDR_EXP 61
62729: PUSH
62730: LD_INT 0
62732: ST_TO_ADDR
// sKamikadze := false ;
62733: LD_ADDR_EXP 69
62737: PUSH
62738: LD_INT 0
62740: ST_TO_ADDR
// sTroll := false ;
62741: LD_ADDR_EXP 70
62745: PUSH
62746: LD_INT 0
62748: ST_TO_ADDR
// sSlow := false ;
62749: LD_ADDR_EXP 71
62753: PUSH
62754: LD_INT 0
62756: ST_TO_ADDR
// sLack := false ;
62757: LD_ADDR_EXP 72
62761: PUSH
62762: LD_INT 0
62764: ST_TO_ADDR
// sTank := false ;
62765: LD_ADDR_EXP 74
62769: PUSH
62770: LD_INT 0
62772: ST_TO_ADDR
// sRemote := false ;
62773: LD_ADDR_EXP 75
62777: PUSH
62778: LD_INT 0
62780: ST_TO_ADDR
// sPowell := false ;
62781: LD_ADDR_EXP 76
62785: PUSH
62786: LD_INT 0
62788: ST_TO_ADDR
// sTeleport := false ;
62789: LD_ADDR_EXP 79
62793: PUSH
62794: LD_INT 0
62796: ST_TO_ADDR
// sOilTower := false ;
62797: LD_ADDR_EXP 81
62801: PUSH
62802: LD_INT 0
62804: ST_TO_ADDR
// sShovel := false ;
62805: LD_ADDR_EXP 82
62809: PUSH
62810: LD_INT 0
62812: ST_TO_ADDR
// sSheik := false ;
62813: LD_ADDR_EXP 83
62817: PUSH
62818: LD_INT 0
62820: ST_TO_ADDR
// sEarthquake := false ;
62821: LD_ADDR_EXP 85
62825: PUSH
62826: LD_INT 0
62828: ST_TO_ADDR
// sAI := false ;
62829: LD_ADDR_EXP 86
62833: PUSH
62834: LD_INT 0
62836: ST_TO_ADDR
// sCargo := false ;
62837: LD_ADDR_EXP 89
62841: PUSH
62842: LD_INT 0
62844: ST_TO_ADDR
// sDLaser := false ;
62845: LD_ADDR_EXP 90
62849: PUSH
62850: LD_INT 0
62852: ST_TO_ADDR
// sExchange := false ;
62853: LD_ADDR_EXP 91
62857: PUSH
62858: LD_INT 0
62860: ST_TO_ADDR
// sFac := false ;
62861: LD_ADDR_EXP 92
62865: PUSH
62866: LD_INT 0
62868: ST_TO_ADDR
// sPower := false ;
62869: LD_ADDR_EXP 93
62873: PUSH
62874: LD_INT 0
62876: ST_TO_ADDR
// sRandom := false ;
62877: LD_ADDR_EXP 94
62881: PUSH
62882: LD_INT 0
62884: ST_TO_ADDR
// sShield := false ;
62885: LD_ADDR_EXP 95
62889: PUSH
62890: LD_INT 0
62892: ST_TO_ADDR
// sTime := false ;
62893: LD_ADDR_EXP 96
62897: PUSH
62898: LD_INT 0
62900: ST_TO_ADDR
// sTools := false ;
62901: LD_ADDR_EXP 97
62905: PUSH
62906: LD_INT 0
62908: ST_TO_ADDR
// sSold := false ;
62909: LD_ADDR_EXP 62
62913: PUSH
62914: LD_INT 0
62916: ST_TO_ADDR
// sDiff := false ;
62917: LD_ADDR_EXP 63
62921: PUSH
62922: LD_INT 0
62924: ST_TO_ADDR
// sFog := false ;
62925: LD_ADDR_EXP 66
62929: PUSH
62930: LD_INT 0
62932: ST_TO_ADDR
// sReset := false ;
62933: LD_ADDR_EXP 67
62937: PUSH
62938: LD_INT 0
62940: ST_TO_ADDR
// sSun := false ;
62941: LD_ADDR_EXP 68
62945: PUSH
62946: LD_INT 0
62948: ST_TO_ADDR
// sTiger := false ;
62949: LD_ADDR_EXP 64
62953: PUSH
62954: LD_INT 0
62956: ST_TO_ADDR
// sBomb := false ;
62957: LD_ADDR_EXP 65
62961: PUSH
62962: LD_INT 0
62964: ST_TO_ADDR
// sWound := false ;
62965: LD_ADDR_EXP 73
62969: PUSH
62970: LD_INT 0
62972: ST_TO_ADDR
// sBetray := false ;
62973: LD_ADDR_EXP 77
62977: PUSH
62978: LD_INT 0
62980: ST_TO_ADDR
// sContamin := false ;
62981: LD_ADDR_EXP 78
62985: PUSH
62986: LD_INT 0
62988: ST_TO_ADDR
// sOil := false ;
62989: LD_ADDR_EXP 80
62993: PUSH
62994: LD_INT 0
62996: ST_TO_ADDR
// sStu := false ;
62997: LD_ADDR_EXP 84
63001: PUSH
63002: LD_INT 0
63004: ST_TO_ADDR
// sBazooka := false ;
63005: LD_ADDR_EXP 87
63009: PUSH
63010: LD_INT 0
63012: ST_TO_ADDR
// sMortar := false ;
63013: LD_ADDR_EXP 88
63017: PUSH
63018: LD_INT 0
63020: ST_TO_ADDR
// sRanger := false ;
63021: LD_ADDR_EXP 98
63025: PUSH
63026: LD_INT 0
63028: ST_TO_ADDR
// sComputer := false ;
63029: LD_ADDR_EXP 99
63033: PUSH
63034: LD_INT 0
63036: ST_TO_ADDR
// s30 := false ;
63037: LD_ADDR_EXP 100
63041: PUSH
63042: LD_INT 0
63044: ST_TO_ADDR
// s60 := false ;
63045: LD_ADDR_EXP 101
63049: PUSH
63050: LD_INT 0
63052: ST_TO_ADDR
// end ;
63053: LD_VAR 0 1
63057: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
63058: LD_INT 0
63060: PPUSH
63061: PPUSH
63062: PPUSH
63063: PPUSH
63064: PPUSH
63065: PPUSH
63066: PPUSH
// result := [ ] ;
63067: LD_ADDR_VAR 0 2
63071: PUSH
63072: EMPTY
63073: ST_TO_ADDR
// if campaign_id = 1 then
63074: LD_OWVAR 69
63078: PUSH
63079: LD_INT 1
63081: EQUAL
63082: IFFALSE 66248
// begin case mission_number of 1 :
63084: LD_OWVAR 70
63088: PUSH
63089: LD_INT 1
63091: DOUBLE
63092: EQUAL
63093: IFTRUE 63097
63095: GO 63173
63097: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
63098: LD_ADDR_VAR 0 2
63102: PUSH
63103: LD_INT 2
63105: PUSH
63106: LD_INT 4
63108: PUSH
63109: LD_INT 11
63111: PUSH
63112: LD_INT 12
63114: PUSH
63115: LD_INT 15
63117: PUSH
63118: LD_INT 16
63120: PUSH
63121: LD_INT 22
63123: PUSH
63124: LD_INT 23
63126: PUSH
63127: LD_INT 26
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: LIST
63134: LIST
63135: LIST
63136: LIST
63137: LIST
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 101
63143: PUSH
63144: LD_INT 102
63146: PUSH
63147: LD_INT 106
63149: PUSH
63150: LD_INT 116
63152: PUSH
63153: LD_INT 117
63155: PUSH
63156: LD_INT 118
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: ST_TO_ADDR
63171: GO 66246
63173: LD_INT 2
63175: DOUBLE
63176: EQUAL
63177: IFTRUE 63181
63179: GO 63265
63181: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
63182: LD_ADDR_VAR 0 2
63186: PUSH
63187: LD_INT 2
63189: PUSH
63190: LD_INT 4
63192: PUSH
63193: LD_INT 11
63195: PUSH
63196: LD_INT 12
63198: PUSH
63199: LD_INT 15
63201: PUSH
63202: LD_INT 16
63204: PUSH
63205: LD_INT 22
63207: PUSH
63208: LD_INT 23
63210: PUSH
63211: LD_INT 26
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: LIST
63218: LIST
63219: LIST
63220: LIST
63221: LIST
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 101
63227: PUSH
63228: LD_INT 102
63230: PUSH
63231: LD_INT 105
63233: PUSH
63234: LD_INT 106
63236: PUSH
63237: LD_INT 108
63239: PUSH
63240: LD_INT 116
63242: PUSH
63243: LD_INT 117
63245: PUSH
63246: LD_INT 118
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: LIST
63253: LIST
63254: LIST
63255: LIST
63256: LIST
63257: LIST
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: ST_TO_ADDR
63263: GO 66246
63265: LD_INT 3
63267: DOUBLE
63268: EQUAL
63269: IFTRUE 63273
63271: GO 63361
63273: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
63274: LD_ADDR_VAR 0 2
63278: PUSH
63279: LD_INT 2
63281: PUSH
63282: LD_INT 4
63284: PUSH
63285: LD_INT 5
63287: PUSH
63288: LD_INT 11
63290: PUSH
63291: LD_INT 12
63293: PUSH
63294: LD_INT 15
63296: PUSH
63297: LD_INT 16
63299: PUSH
63300: LD_INT 22
63302: PUSH
63303: LD_INT 26
63305: PUSH
63306: LD_INT 36
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 101
63323: PUSH
63324: LD_INT 102
63326: PUSH
63327: LD_INT 105
63329: PUSH
63330: LD_INT 106
63332: PUSH
63333: LD_INT 108
63335: PUSH
63336: LD_INT 116
63338: PUSH
63339: LD_INT 117
63341: PUSH
63342: LD_INT 118
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: ST_TO_ADDR
63359: GO 66246
63361: LD_INT 4
63363: DOUBLE
63364: EQUAL
63365: IFTRUE 63369
63367: GO 63465
63369: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
63370: LD_ADDR_VAR 0 2
63374: PUSH
63375: LD_INT 2
63377: PUSH
63378: LD_INT 4
63380: PUSH
63381: LD_INT 5
63383: PUSH
63384: LD_INT 8
63386: PUSH
63387: LD_INT 11
63389: PUSH
63390: LD_INT 12
63392: PUSH
63393: LD_INT 15
63395: PUSH
63396: LD_INT 16
63398: PUSH
63399: LD_INT 22
63401: PUSH
63402: LD_INT 23
63404: PUSH
63405: LD_INT 26
63407: PUSH
63408: LD_INT 36
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: LIST
63418: LIST
63419: LIST
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 101
63427: PUSH
63428: LD_INT 102
63430: PUSH
63431: LD_INT 105
63433: PUSH
63434: LD_INT 106
63436: PUSH
63437: LD_INT 108
63439: PUSH
63440: LD_INT 116
63442: PUSH
63443: LD_INT 117
63445: PUSH
63446: LD_INT 118
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: LIST
63456: LIST
63457: LIST
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: ST_TO_ADDR
63463: GO 66246
63465: LD_INT 5
63467: DOUBLE
63468: EQUAL
63469: IFTRUE 63473
63471: GO 63585
63473: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
63474: LD_ADDR_VAR 0 2
63478: PUSH
63479: LD_INT 2
63481: PUSH
63482: LD_INT 4
63484: PUSH
63485: LD_INT 5
63487: PUSH
63488: LD_INT 6
63490: PUSH
63491: LD_INT 8
63493: PUSH
63494: LD_INT 11
63496: PUSH
63497: LD_INT 12
63499: PUSH
63500: LD_INT 15
63502: PUSH
63503: LD_INT 16
63505: PUSH
63506: LD_INT 22
63508: PUSH
63509: LD_INT 23
63511: PUSH
63512: LD_INT 25
63514: PUSH
63515: LD_INT 26
63517: PUSH
63518: LD_INT 36
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: PUSH
63537: LD_INT 101
63539: PUSH
63540: LD_INT 102
63542: PUSH
63543: LD_INT 105
63545: PUSH
63546: LD_INT 106
63548: PUSH
63549: LD_INT 108
63551: PUSH
63552: LD_INT 109
63554: PUSH
63555: LD_INT 112
63557: PUSH
63558: LD_INT 116
63560: PUSH
63561: LD_INT 117
63563: PUSH
63564: LD_INT 118
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: LIST
63573: LIST
63574: LIST
63575: LIST
63576: LIST
63577: LIST
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: ST_TO_ADDR
63583: GO 66246
63585: LD_INT 6
63587: DOUBLE
63588: EQUAL
63589: IFTRUE 63593
63591: GO 63725
63593: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
63594: LD_ADDR_VAR 0 2
63598: PUSH
63599: LD_INT 2
63601: PUSH
63602: LD_INT 4
63604: PUSH
63605: LD_INT 5
63607: PUSH
63608: LD_INT 6
63610: PUSH
63611: LD_INT 8
63613: PUSH
63614: LD_INT 11
63616: PUSH
63617: LD_INT 12
63619: PUSH
63620: LD_INT 15
63622: PUSH
63623: LD_INT 16
63625: PUSH
63626: LD_INT 20
63628: PUSH
63629: LD_INT 21
63631: PUSH
63632: LD_INT 22
63634: PUSH
63635: LD_INT 23
63637: PUSH
63638: LD_INT 25
63640: PUSH
63641: LD_INT 26
63643: PUSH
63644: LD_INT 30
63646: PUSH
63647: LD_INT 31
63649: PUSH
63650: LD_INT 32
63652: PUSH
63653: LD_INT 36
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: LIST
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: LIST
63668: LIST
63669: LIST
63670: LIST
63671: LIST
63672: LIST
63673: LIST
63674: LIST
63675: LIST
63676: PUSH
63677: LD_INT 101
63679: PUSH
63680: LD_INT 102
63682: PUSH
63683: LD_INT 105
63685: PUSH
63686: LD_INT 106
63688: PUSH
63689: LD_INT 108
63691: PUSH
63692: LD_INT 109
63694: PUSH
63695: LD_INT 112
63697: PUSH
63698: LD_INT 116
63700: PUSH
63701: LD_INT 117
63703: PUSH
63704: LD_INT 118
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: LIST
63711: LIST
63712: LIST
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: ST_TO_ADDR
63723: GO 66246
63725: LD_INT 7
63727: DOUBLE
63728: EQUAL
63729: IFTRUE 63733
63731: GO 63845
63733: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
63734: LD_ADDR_VAR 0 2
63738: PUSH
63739: LD_INT 2
63741: PUSH
63742: LD_INT 4
63744: PUSH
63745: LD_INT 5
63747: PUSH
63748: LD_INT 7
63750: PUSH
63751: LD_INT 11
63753: PUSH
63754: LD_INT 12
63756: PUSH
63757: LD_INT 15
63759: PUSH
63760: LD_INT 16
63762: PUSH
63763: LD_INT 20
63765: PUSH
63766: LD_INT 21
63768: PUSH
63769: LD_INT 22
63771: PUSH
63772: LD_INT 23
63774: PUSH
63775: LD_INT 25
63777: PUSH
63778: LD_INT 26
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: LIST
63785: LIST
63786: LIST
63787: LIST
63788: LIST
63789: LIST
63790: LIST
63791: LIST
63792: LIST
63793: LIST
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 101
63799: PUSH
63800: LD_INT 102
63802: PUSH
63803: LD_INT 103
63805: PUSH
63806: LD_INT 105
63808: PUSH
63809: LD_INT 106
63811: PUSH
63812: LD_INT 108
63814: PUSH
63815: LD_INT 112
63817: PUSH
63818: LD_INT 116
63820: PUSH
63821: LD_INT 117
63823: PUSH
63824: LD_INT 118
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: LIST
63831: LIST
63832: LIST
63833: LIST
63834: LIST
63835: LIST
63836: LIST
63837: LIST
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: ST_TO_ADDR
63843: GO 66246
63845: LD_INT 8
63847: DOUBLE
63848: EQUAL
63849: IFTRUE 63853
63851: GO 63993
63853: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
63854: LD_ADDR_VAR 0 2
63858: PUSH
63859: LD_INT 2
63861: PUSH
63862: LD_INT 4
63864: PUSH
63865: LD_INT 5
63867: PUSH
63868: LD_INT 6
63870: PUSH
63871: LD_INT 7
63873: PUSH
63874: LD_INT 8
63876: PUSH
63877: LD_INT 11
63879: PUSH
63880: LD_INT 12
63882: PUSH
63883: LD_INT 15
63885: PUSH
63886: LD_INT 16
63888: PUSH
63889: LD_INT 20
63891: PUSH
63892: LD_INT 21
63894: PUSH
63895: LD_INT 22
63897: PUSH
63898: LD_INT 23
63900: PUSH
63901: LD_INT 25
63903: PUSH
63904: LD_INT 26
63906: PUSH
63907: LD_INT 30
63909: PUSH
63910: LD_INT 31
63912: PUSH
63913: LD_INT 32
63915: PUSH
63916: LD_INT 36
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: PUSH
63941: LD_INT 101
63943: PUSH
63944: LD_INT 102
63946: PUSH
63947: LD_INT 103
63949: PUSH
63950: LD_INT 105
63952: PUSH
63953: LD_INT 106
63955: PUSH
63956: LD_INT 108
63958: PUSH
63959: LD_INT 109
63961: PUSH
63962: LD_INT 112
63964: PUSH
63965: LD_INT 116
63967: PUSH
63968: LD_INT 117
63970: PUSH
63971: LD_INT 118
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: ST_TO_ADDR
63991: GO 66246
63993: LD_INT 9
63995: DOUBLE
63996: EQUAL
63997: IFTRUE 64001
63999: GO 64149
64001: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
64002: LD_ADDR_VAR 0 2
64006: PUSH
64007: LD_INT 2
64009: PUSH
64010: LD_INT 4
64012: PUSH
64013: LD_INT 5
64015: PUSH
64016: LD_INT 6
64018: PUSH
64019: LD_INT 7
64021: PUSH
64022: LD_INT 8
64024: PUSH
64025: LD_INT 11
64027: PUSH
64028: LD_INT 12
64030: PUSH
64031: LD_INT 15
64033: PUSH
64034: LD_INT 16
64036: PUSH
64037: LD_INT 20
64039: PUSH
64040: LD_INT 21
64042: PUSH
64043: LD_INT 22
64045: PUSH
64046: LD_INT 23
64048: PUSH
64049: LD_INT 25
64051: PUSH
64052: LD_INT 26
64054: PUSH
64055: LD_INT 28
64057: PUSH
64058: LD_INT 30
64060: PUSH
64061: LD_INT 31
64063: PUSH
64064: LD_INT 32
64066: PUSH
64067: LD_INT 36
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: LIST
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: LIST
64092: PUSH
64093: LD_INT 101
64095: PUSH
64096: LD_INT 102
64098: PUSH
64099: LD_INT 103
64101: PUSH
64102: LD_INT 105
64104: PUSH
64105: LD_INT 106
64107: PUSH
64108: LD_INT 108
64110: PUSH
64111: LD_INT 109
64113: PUSH
64114: LD_INT 112
64116: PUSH
64117: LD_INT 114
64119: PUSH
64120: LD_INT 116
64122: PUSH
64123: LD_INT 117
64125: PUSH
64126: LD_INT 118
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: LIST
64133: LIST
64134: LIST
64135: LIST
64136: LIST
64137: LIST
64138: LIST
64139: LIST
64140: LIST
64141: LIST
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: ST_TO_ADDR
64147: GO 66246
64149: LD_INT 10
64151: DOUBLE
64152: EQUAL
64153: IFTRUE 64157
64155: GO 64353
64157: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
64158: LD_ADDR_VAR 0 2
64162: PUSH
64163: LD_INT 2
64165: PUSH
64166: LD_INT 4
64168: PUSH
64169: LD_INT 5
64171: PUSH
64172: LD_INT 6
64174: PUSH
64175: LD_INT 7
64177: PUSH
64178: LD_INT 8
64180: PUSH
64181: LD_INT 9
64183: PUSH
64184: LD_INT 10
64186: PUSH
64187: LD_INT 11
64189: PUSH
64190: LD_INT 12
64192: PUSH
64193: LD_INT 13
64195: PUSH
64196: LD_INT 14
64198: PUSH
64199: LD_INT 15
64201: PUSH
64202: LD_INT 16
64204: PUSH
64205: LD_INT 17
64207: PUSH
64208: LD_INT 18
64210: PUSH
64211: LD_INT 19
64213: PUSH
64214: LD_INT 20
64216: PUSH
64217: LD_INT 21
64219: PUSH
64220: LD_INT 22
64222: PUSH
64223: LD_INT 23
64225: PUSH
64226: LD_INT 24
64228: PUSH
64229: LD_INT 25
64231: PUSH
64232: LD_INT 26
64234: PUSH
64235: LD_INT 28
64237: PUSH
64238: LD_INT 30
64240: PUSH
64241: LD_INT 31
64243: PUSH
64244: LD_INT 32
64246: PUSH
64247: LD_INT 36
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: LIST
64254: LIST
64255: LIST
64256: LIST
64257: LIST
64258: LIST
64259: LIST
64260: LIST
64261: LIST
64262: LIST
64263: LIST
64264: LIST
64265: LIST
64266: LIST
64267: LIST
64268: LIST
64269: LIST
64270: LIST
64271: LIST
64272: LIST
64273: LIST
64274: LIST
64275: LIST
64276: LIST
64277: LIST
64278: LIST
64279: LIST
64280: PUSH
64281: LD_INT 101
64283: PUSH
64284: LD_INT 102
64286: PUSH
64287: LD_INT 103
64289: PUSH
64290: LD_INT 104
64292: PUSH
64293: LD_INT 105
64295: PUSH
64296: LD_INT 106
64298: PUSH
64299: LD_INT 107
64301: PUSH
64302: LD_INT 108
64304: PUSH
64305: LD_INT 109
64307: PUSH
64308: LD_INT 110
64310: PUSH
64311: LD_INT 111
64313: PUSH
64314: LD_INT 112
64316: PUSH
64317: LD_INT 114
64319: PUSH
64320: LD_INT 116
64322: PUSH
64323: LD_INT 117
64325: PUSH
64326: LD_INT 118
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: LIST
64333: LIST
64334: LIST
64335: LIST
64336: LIST
64337: LIST
64338: LIST
64339: LIST
64340: LIST
64341: LIST
64342: LIST
64343: LIST
64344: LIST
64345: LIST
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: ST_TO_ADDR
64351: GO 66246
64353: LD_INT 11
64355: DOUBLE
64356: EQUAL
64357: IFTRUE 64361
64359: GO 64565
64361: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
64362: LD_ADDR_VAR 0 2
64366: PUSH
64367: LD_INT 2
64369: PUSH
64370: LD_INT 3
64372: PUSH
64373: LD_INT 4
64375: PUSH
64376: LD_INT 5
64378: PUSH
64379: LD_INT 6
64381: PUSH
64382: LD_INT 7
64384: PUSH
64385: LD_INT 8
64387: PUSH
64388: LD_INT 9
64390: PUSH
64391: LD_INT 10
64393: PUSH
64394: LD_INT 11
64396: PUSH
64397: LD_INT 12
64399: PUSH
64400: LD_INT 13
64402: PUSH
64403: LD_INT 14
64405: PUSH
64406: LD_INT 15
64408: PUSH
64409: LD_INT 16
64411: PUSH
64412: LD_INT 17
64414: PUSH
64415: LD_INT 18
64417: PUSH
64418: LD_INT 19
64420: PUSH
64421: LD_INT 20
64423: PUSH
64424: LD_INT 21
64426: PUSH
64427: LD_INT 22
64429: PUSH
64430: LD_INT 23
64432: PUSH
64433: LD_INT 24
64435: PUSH
64436: LD_INT 25
64438: PUSH
64439: LD_INT 26
64441: PUSH
64442: LD_INT 28
64444: PUSH
64445: LD_INT 30
64447: PUSH
64448: LD_INT 31
64450: PUSH
64451: LD_INT 32
64453: PUSH
64454: LD_INT 34
64456: PUSH
64457: LD_INT 36
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: LIST
64484: LIST
64485: LIST
64486: LIST
64487: LIST
64488: LIST
64489: LIST
64490: LIST
64491: LIST
64492: PUSH
64493: LD_INT 101
64495: PUSH
64496: LD_INT 102
64498: PUSH
64499: LD_INT 103
64501: PUSH
64502: LD_INT 104
64504: PUSH
64505: LD_INT 105
64507: PUSH
64508: LD_INT 106
64510: PUSH
64511: LD_INT 107
64513: PUSH
64514: LD_INT 108
64516: PUSH
64517: LD_INT 109
64519: PUSH
64520: LD_INT 110
64522: PUSH
64523: LD_INT 111
64525: PUSH
64526: LD_INT 112
64528: PUSH
64529: LD_INT 114
64531: PUSH
64532: LD_INT 116
64534: PUSH
64535: LD_INT 117
64537: PUSH
64538: LD_INT 118
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: LIST
64554: LIST
64555: LIST
64556: LIST
64557: LIST
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: ST_TO_ADDR
64563: GO 66246
64565: LD_INT 12
64567: DOUBLE
64568: EQUAL
64569: IFTRUE 64573
64571: GO 64793
64573: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
64574: LD_ADDR_VAR 0 2
64578: PUSH
64579: LD_INT 1
64581: PUSH
64582: LD_INT 2
64584: PUSH
64585: LD_INT 3
64587: PUSH
64588: LD_INT 4
64590: PUSH
64591: LD_INT 5
64593: PUSH
64594: LD_INT 6
64596: PUSH
64597: LD_INT 7
64599: PUSH
64600: LD_INT 8
64602: PUSH
64603: LD_INT 9
64605: PUSH
64606: LD_INT 10
64608: PUSH
64609: LD_INT 11
64611: PUSH
64612: LD_INT 12
64614: PUSH
64615: LD_INT 13
64617: PUSH
64618: LD_INT 14
64620: PUSH
64621: LD_INT 15
64623: PUSH
64624: LD_INT 16
64626: PUSH
64627: LD_INT 17
64629: PUSH
64630: LD_INT 18
64632: PUSH
64633: LD_INT 19
64635: PUSH
64636: LD_INT 20
64638: PUSH
64639: LD_INT 21
64641: PUSH
64642: LD_INT 22
64644: PUSH
64645: LD_INT 23
64647: PUSH
64648: LD_INT 24
64650: PUSH
64651: LD_INT 25
64653: PUSH
64654: LD_INT 26
64656: PUSH
64657: LD_INT 27
64659: PUSH
64660: LD_INT 28
64662: PUSH
64663: LD_INT 30
64665: PUSH
64666: LD_INT 31
64668: PUSH
64669: LD_INT 32
64671: PUSH
64672: LD_INT 33
64674: PUSH
64675: LD_INT 34
64677: PUSH
64678: LD_INT 36
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: LIST
64692: LIST
64693: LIST
64694: LIST
64695: LIST
64696: LIST
64697: LIST
64698: LIST
64699: LIST
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: LIST
64713: LIST
64714: LIST
64715: LIST
64716: PUSH
64717: LD_INT 101
64719: PUSH
64720: LD_INT 102
64722: PUSH
64723: LD_INT 103
64725: PUSH
64726: LD_INT 104
64728: PUSH
64729: LD_INT 105
64731: PUSH
64732: LD_INT 106
64734: PUSH
64735: LD_INT 107
64737: PUSH
64738: LD_INT 108
64740: PUSH
64741: LD_INT 109
64743: PUSH
64744: LD_INT 110
64746: PUSH
64747: LD_INT 111
64749: PUSH
64750: LD_INT 112
64752: PUSH
64753: LD_INT 113
64755: PUSH
64756: LD_INT 114
64758: PUSH
64759: LD_INT 116
64761: PUSH
64762: LD_INT 117
64764: PUSH
64765: LD_INT 118
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: LIST
64772: LIST
64773: LIST
64774: LIST
64775: LIST
64776: LIST
64777: LIST
64778: LIST
64779: LIST
64780: LIST
64781: LIST
64782: LIST
64783: LIST
64784: LIST
64785: LIST
64786: PUSH
64787: EMPTY
64788: LIST
64789: LIST
64790: ST_TO_ADDR
64791: GO 66246
64793: LD_INT 13
64795: DOUBLE
64796: EQUAL
64797: IFTRUE 64801
64799: GO 65009
64801: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
64802: LD_ADDR_VAR 0 2
64806: PUSH
64807: LD_INT 1
64809: PUSH
64810: LD_INT 2
64812: PUSH
64813: LD_INT 3
64815: PUSH
64816: LD_INT 4
64818: PUSH
64819: LD_INT 5
64821: PUSH
64822: LD_INT 8
64824: PUSH
64825: LD_INT 9
64827: PUSH
64828: LD_INT 10
64830: PUSH
64831: LD_INT 11
64833: PUSH
64834: LD_INT 12
64836: PUSH
64837: LD_INT 14
64839: PUSH
64840: LD_INT 15
64842: PUSH
64843: LD_INT 16
64845: PUSH
64846: LD_INT 17
64848: PUSH
64849: LD_INT 18
64851: PUSH
64852: LD_INT 19
64854: PUSH
64855: LD_INT 20
64857: PUSH
64858: LD_INT 21
64860: PUSH
64861: LD_INT 22
64863: PUSH
64864: LD_INT 23
64866: PUSH
64867: LD_INT 24
64869: PUSH
64870: LD_INT 25
64872: PUSH
64873: LD_INT 26
64875: PUSH
64876: LD_INT 27
64878: PUSH
64879: LD_INT 28
64881: PUSH
64882: LD_INT 30
64884: PUSH
64885: LD_INT 31
64887: PUSH
64888: LD_INT 32
64890: PUSH
64891: LD_INT 33
64893: PUSH
64894: LD_INT 34
64896: PUSH
64897: LD_INT 36
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: LIST
64904: LIST
64905: LIST
64906: LIST
64907: LIST
64908: LIST
64909: LIST
64910: LIST
64911: LIST
64912: LIST
64913: LIST
64914: LIST
64915: LIST
64916: LIST
64917: LIST
64918: LIST
64919: LIST
64920: LIST
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: LIST
64926: LIST
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: PUSH
64933: LD_INT 101
64935: PUSH
64936: LD_INT 102
64938: PUSH
64939: LD_INT 103
64941: PUSH
64942: LD_INT 104
64944: PUSH
64945: LD_INT 105
64947: PUSH
64948: LD_INT 106
64950: PUSH
64951: LD_INT 107
64953: PUSH
64954: LD_INT 108
64956: PUSH
64957: LD_INT 109
64959: PUSH
64960: LD_INT 110
64962: PUSH
64963: LD_INT 111
64965: PUSH
64966: LD_INT 112
64968: PUSH
64969: LD_INT 113
64971: PUSH
64972: LD_INT 114
64974: PUSH
64975: LD_INT 116
64977: PUSH
64978: LD_INT 117
64980: PUSH
64981: LD_INT 118
64983: PUSH
64984: EMPTY
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: PUSH
65003: EMPTY
65004: LIST
65005: LIST
65006: ST_TO_ADDR
65007: GO 66246
65009: LD_INT 14
65011: DOUBLE
65012: EQUAL
65013: IFTRUE 65017
65015: GO 65241
65017: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
65018: LD_ADDR_VAR 0 2
65022: PUSH
65023: LD_INT 1
65025: PUSH
65026: LD_INT 2
65028: PUSH
65029: LD_INT 3
65031: PUSH
65032: LD_INT 4
65034: PUSH
65035: LD_INT 5
65037: PUSH
65038: LD_INT 6
65040: PUSH
65041: LD_INT 7
65043: PUSH
65044: LD_INT 8
65046: PUSH
65047: LD_INT 9
65049: PUSH
65050: LD_INT 10
65052: PUSH
65053: LD_INT 11
65055: PUSH
65056: LD_INT 12
65058: PUSH
65059: LD_INT 13
65061: PUSH
65062: LD_INT 14
65064: PUSH
65065: LD_INT 15
65067: PUSH
65068: LD_INT 16
65070: PUSH
65071: LD_INT 17
65073: PUSH
65074: LD_INT 18
65076: PUSH
65077: LD_INT 19
65079: PUSH
65080: LD_INT 20
65082: PUSH
65083: LD_INT 21
65085: PUSH
65086: LD_INT 22
65088: PUSH
65089: LD_INT 23
65091: PUSH
65092: LD_INT 24
65094: PUSH
65095: LD_INT 25
65097: PUSH
65098: LD_INT 26
65100: PUSH
65101: LD_INT 27
65103: PUSH
65104: LD_INT 28
65106: PUSH
65107: LD_INT 29
65109: PUSH
65110: LD_INT 30
65112: PUSH
65113: LD_INT 31
65115: PUSH
65116: LD_INT 32
65118: PUSH
65119: LD_INT 33
65121: PUSH
65122: LD_INT 34
65124: PUSH
65125: LD_INT 36
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: LIST
65132: LIST
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: LIST
65159: LIST
65160: LIST
65161: LIST
65162: LIST
65163: LIST
65164: PUSH
65165: LD_INT 101
65167: PUSH
65168: LD_INT 102
65170: PUSH
65171: LD_INT 103
65173: PUSH
65174: LD_INT 104
65176: PUSH
65177: LD_INT 105
65179: PUSH
65180: LD_INT 106
65182: PUSH
65183: LD_INT 107
65185: PUSH
65186: LD_INT 108
65188: PUSH
65189: LD_INT 109
65191: PUSH
65192: LD_INT 110
65194: PUSH
65195: LD_INT 111
65197: PUSH
65198: LD_INT 112
65200: PUSH
65201: LD_INT 113
65203: PUSH
65204: LD_INT 114
65206: PUSH
65207: LD_INT 116
65209: PUSH
65210: LD_INT 117
65212: PUSH
65213: LD_INT 118
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: LIST
65220: LIST
65221: LIST
65222: LIST
65223: LIST
65224: LIST
65225: LIST
65226: LIST
65227: LIST
65228: LIST
65229: LIST
65230: LIST
65231: LIST
65232: LIST
65233: LIST
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: ST_TO_ADDR
65239: GO 66246
65241: LD_INT 15
65243: DOUBLE
65244: EQUAL
65245: IFTRUE 65249
65247: GO 65473
65249: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
65250: LD_ADDR_VAR 0 2
65254: PUSH
65255: LD_INT 1
65257: PUSH
65258: LD_INT 2
65260: PUSH
65261: LD_INT 3
65263: PUSH
65264: LD_INT 4
65266: PUSH
65267: LD_INT 5
65269: PUSH
65270: LD_INT 6
65272: PUSH
65273: LD_INT 7
65275: PUSH
65276: LD_INT 8
65278: PUSH
65279: LD_INT 9
65281: PUSH
65282: LD_INT 10
65284: PUSH
65285: LD_INT 11
65287: PUSH
65288: LD_INT 12
65290: PUSH
65291: LD_INT 13
65293: PUSH
65294: LD_INT 14
65296: PUSH
65297: LD_INT 15
65299: PUSH
65300: LD_INT 16
65302: PUSH
65303: LD_INT 17
65305: PUSH
65306: LD_INT 18
65308: PUSH
65309: LD_INT 19
65311: PUSH
65312: LD_INT 20
65314: PUSH
65315: LD_INT 21
65317: PUSH
65318: LD_INT 22
65320: PUSH
65321: LD_INT 23
65323: PUSH
65324: LD_INT 24
65326: PUSH
65327: LD_INT 25
65329: PUSH
65330: LD_INT 26
65332: PUSH
65333: LD_INT 27
65335: PUSH
65336: LD_INT 28
65338: PUSH
65339: LD_INT 29
65341: PUSH
65342: LD_INT 30
65344: PUSH
65345: LD_INT 31
65347: PUSH
65348: LD_INT 32
65350: PUSH
65351: LD_INT 33
65353: PUSH
65354: LD_INT 34
65356: PUSH
65357: LD_INT 36
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: LIST
65364: LIST
65365: LIST
65366: LIST
65367: LIST
65368: LIST
65369: LIST
65370: LIST
65371: LIST
65372: LIST
65373: LIST
65374: LIST
65375: LIST
65376: LIST
65377: LIST
65378: LIST
65379: LIST
65380: LIST
65381: LIST
65382: LIST
65383: LIST
65384: LIST
65385: LIST
65386: LIST
65387: LIST
65388: LIST
65389: LIST
65390: LIST
65391: LIST
65392: LIST
65393: LIST
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 101
65399: PUSH
65400: LD_INT 102
65402: PUSH
65403: LD_INT 103
65405: PUSH
65406: LD_INT 104
65408: PUSH
65409: LD_INT 105
65411: PUSH
65412: LD_INT 106
65414: PUSH
65415: LD_INT 107
65417: PUSH
65418: LD_INT 108
65420: PUSH
65421: LD_INT 109
65423: PUSH
65424: LD_INT 110
65426: PUSH
65427: LD_INT 111
65429: PUSH
65430: LD_INT 112
65432: PUSH
65433: LD_INT 113
65435: PUSH
65436: LD_INT 114
65438: PUSH
65439: LD_INT 116
65441: PUSH
65442: LD_INT 117
65444: PUSH
65445: LD_INT 118
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: LIST
65452: LIST
65453: LIST
65454: LIST
65455: LIST
65456: LIST
65457: LIST
65458: LIST
65459: LIST
65460: LIST
65461: LIST
65462: LIST
65463: LIST
65464: LIST
65465: LIST
65466: PUSH
65467: EMPTY
65468: LIST
65469: LIST
65470: ST_TO_ADDR
65471: GO 66246
65473: LD_INT 16
65475: DOUBLE
65476: EQUAL
65477: IFTRUE 65481
65479: GO 65617
65481: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
65482: LD_ADDR_VAR 0 2
65486: PUSH
65487: LD_INT 2
65489: PUSH
65490: LD_INT 4
65492: PUSH
65493: LD_INT 5
65495: PUSH
65496: LD_INT 7
65498: PUSH
65499: LD_INT 11
65501: PUSH
65502: LD_INT 12
65504: PUSH
65505: LD_INT 15
65507: PUSH
65508: LD_INT 16
65510: PUSH
65511: LD_INT 20
65513: PUSH
65514: LD_INT 21
65516: PUSH
65517: LD_INT 22
65519: PUSH
65520: LD_INT 23
65522: PUSH
65523: LD_INT 25
65525: PUSH
65526: LD_INT 26
65528: PUSH
65529: LD_INT 30
65531: PUSH
65532: LD_INT 31
65534: PUSH
65535: LD_INT 32
65537: PUSH
65538: LD_INT 33
65540: PUSH
65541: LD_INT 34
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: LIST
65558: LIST
65559: LIST
65560: LIST
65561: LIST
65562: LIST
65563: LIST
65564: PUSH
65565: LD_INT 101
65567: PUSH
65568: LD_INT 102
65570: PUSH
65571: LD_INT 103
65573: PUSH
65574: LD_INT 106
65576: PUSH
65577: LD_INT 108
65579: PUSH
65580: LD_INT 112
65582: PUSH
65583: LD_INT 113
65585: PUSH
65586: LD_INT 114
65588: PUSH
65589: LD_INT 116
65591: PUSH
65592: LD_INT 117
65594: PUSH
65595: LD_INT 118
65597: PUSH
65598: EMPTY
65599: LIST
65600: LIST
65601: LIST
65602: LIST
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: LIST
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: ST_TO_ADDR
65615: GO 66246
65617: LD_INT 17
65619: DOUBLE
65620: EQUAL
65621: IFTRUE 65625
65623: GO 65849
65625: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
65626: LD_ADDR_VAR 0 2
65630: PUSH
65631: LD_INT 1
65633: PUSH
65634: LD_INT 2
65636: PUSH
65637: LD_INT 3
65639: PUSH
65640: LD_INT 4
65642: PUSH
65643: LD_INT 5
65645: PUSH
65646: LD_INT 6
65648: PUSH
65649: LD_INT 7
65651: PUSH
65652: LD_INT 8
65654: PUSH
65655: LD_INT 9
65657: PUSH
65658: LD_INT 10
65660: PUSH
65661: LD_INT 11
65663: PUSH
65664: LD_INT 12
65666: PUSH
65667: LD_INT 13
65669: PUSH
65670: LD_INT 14
65672: PUSH
65673: LD_INT 15
65675: PUSH
65676: LD_INT 16
65678: PUSH
65679: LD_INT 17
65681: PUSH
65682: LD_INT 18
65684: PUSH
65685: LD_INT 19
65687: PUSH
65688: LD_INT 20
65690: PUSH
65691: LD_INT 21
65693: PUSH
65694: LD_INT 22
65696: PUSH
65697: LD_INT 23
65699: PUSH
65700: LD_INT 24
65702: PUSH
65703: LD_INT 25
65705: PUSH
65706: LD_INT 26
65708: PUSH
65709: LD_INT 27
65711: PUSH
65712: LD_INT 28
65714: PUSH
65715: LD_INT 29
65717: PUSH
65718: LD_INT 30
65720: PUSH
65721: LD_INT 31
65723: PUSH
65724: LD_INT 32
65726: PUSH
65727: LD_INT 33
65729: PUSH
65730: LD_INT 34
65732: PUSH
65733: LD_INT 36
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: LIST
65740: LIST
65741: LIST
65742: LIST
65743: LIST
65744: LIST
65745: LIST
65746: LIST
65747: LIST
65748: LIST
65749: LIST
65750: LIST
65751: LIST
65752: LIST
65753: LIST
65754: LIST
65755: LIST
65756: LIST
65757: LIST
65758: LIST
65759: LIST
65760: LIST
65761: LIST
65762: LIST
65763: LIST
65764: LIST
65765: LIST
65766: LIST
65767: LIST
65768: LIST
65769: LIST
65770: LIST
65771: LIST
65772: PUSH
65773: LD_INT 101
65775: PUSH
65776: LD_INT 102
65778: PUSH
65779: LD_INT 103
65781: PUSH
65782: LD_INT 104
65784: PUSH
65785: LD_INT 105
65787: PUSH
65788: LD_INT 106
65790: PUSH
65791: LD_INT 107
65793: PUSH
65794: LD_INT 108
65796: PUSH
65797: LD_INT 109
65799: PUSH
65800: LD_INT 110
65802: PUSH
65803: LD_INT 111
65805: PUSH
65806: LD_INT 112
65808: PUSH
65809: LD_INT 113
65811: PUSH
65812: LD_INT 114
65814: PUSH
65815: LD_INT 116
65817: PUSH
65818: LD_INT 117
65820: PUSH
65821: LD_INT 118
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: LIST
65828: LIST
65829: LIST
65830: LIST
65831: LIST
65832: LIST
65833: LIST
65834: LIST
65835: LIST
65836: LIST
65837: LIST
65838: LIST
65839: LIST
65840: LIST
65841: LIST
65842: PUSH
65843: EMPTY
65844: LIST
65845: LIST
65846: ST_TO_ADDR
65847: GO 66246
65849: LD_INT 18
65851: DOUBLE
65852: EQUAL
65853: IFTRUE 65857
65855: GO 66005
65857: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
65858: LD_ADDR_VAR 0 2
65862: PUSH
65863: LD_INT 2
65865: PUSH
65866: LD_INT 4
65868: PUSH
65869: LD_INT 5
65871: PUSH
65872: LD_INT 7
65874: PUSH
65875: LD_INT 11
65877: PUSH
65878: LD_INT 12
65880: PUSH
65881: LD_INT 15
65883: PUSH
65884: LD_INT 16
65886: PUSH
65887: LD_INT 20
65889: PUSH
65890: LD_INT 21
65892: PUSH
65893: LD_INT 22
65895: PUSH
65896: LD_INT 23
65898: PUSH
65899: LD_INT 25
65901: PUSH
65902: LD_INT 26
65904: PUSH
65905: LD_INT 30
65907: PUSH
65908: LD_INT 31
65910: PUSH
65911: LD_INT 32
65913: PUSH
65914: LD_INT 33
65916: PUSH
65917: LD_INT 34
65919: PUSH
65920: LD_INT 35
65922: PUSH
65923: LD_INT 36
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: LIST
65930: LIST
65931: LIST
65932: LIST
65933: LIST
65934: LIST
65935: LIST
65936: LIST
65937: LIST
65938: LIST
65939: LIST
65940: LIST
65941: LIST
65942: LIST
65943: LIST
65944: LIST
65945: LIST
65946: LIST
65947: LIST
65948: PUSH
65949: LD_INT 101
65951: PUSH
65952: LD_INT 102
65954: PUSH
65955: LD_INT 103
65957: PUSH
65958: LD_INT 106
65960: PUSH
65961: LD_INT 108
65963: PUSH
65964: LD_INT 112
65966: PUSH
65967: LD_INT 113
65969: PUSH
65970: LD_INT 114
65972: PUSH
65973: LD_INT 115
65975: PUSH
65976: LD_INT 116
65978: PUSH
65979: LD_INT 117
65981: PUSH
65982: LD_INT 118
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: LIST
65989: LIST
65990: LIST
65991: LIST
65992: LIST
65993: LIST
65994: LIST
65995: LIST
65996: LIST
65997: LIST
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: ST_TO_ADDR
66003: GO 66246
66005: LD_INT 19
66007: DOUBLE
66008: EQUAL
66009: IFTRUE 66013
66011: GO 66245
66013: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
66014: LD_ADDR_VAR 0 2
66018: PUSH
66019: LD_INT 1
66021: PUSH
66022: LD_INT 2
66024: PUSH
66025: LD_INT 3
66027: PUSH
66028: LD_INT 4
66030: PUSH
66031: LD_INT 5
66033: PUSH
66034: LD_INT 6
66036: PUSH
66037: LD_INT 7
66039: PUSH
66040: LD_INT 8
66042: PUSH
66043: LD_INT 9
66045: PUSH
66046: LD_INT 10
66048: PUSH
66049: LD_INT 11
66051: PUSH
66052: LD_INT 12
66054: PUSH
66055: LD_INT 13
66057: PUSH
66058: LD_INT 14
66060: PUSH
66061: LD_INT 15
66063: PUSH
66064: LD_INT 16
66066: PUSH
66067: LD_INT 17
66069: PUSH
66070: LD_INT 18
66072: PUSH
66073: LD_INT 19
66075: PUSH
66076: LD_INT 20
66078: PUSH
66079: LD_INT 21
66081: PUSH
66082: LD_INT 22
66084: PUSH
66085: LD_INT 23
66087: PUSH
66088: LD_INT 24
66090: PUSH
66091: LD_INT 25
66093: PUSH
66094: LD_INT 26
66096: PUSH
66097: LD_INT 27
66099: PUSH
66100: LD_INT 28
66102: PUSH
66103: LD_INT 29
66105: PUSH
66106: LD_INT 30
66108: PUSH
66109: LD_INT 31
66111: PUSH
66112: LD_INT 32
66114: PUSH
66115: LD_INT 33
66117: PUSH
66118: LD_INT 34
66120: PUSH
66121: LD_INT 35
66123: PUSH
66124: LD_INT 36
66126: PUSH
66127: EMPTY
66128: LIST
66129: LIST
66130: LIST
66131: LIST
66132: LIST
66133: LIST
66134: LIST
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: LIST
66143: LIST
66144: LIST
66145: LIST
66146: LIST
66147: LIST
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: LIST
66153: LIST
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: PUSH
66165: LD_INT 101
66167: PUSH
66168: LD_INT 102
66170: PUSH
66171: LD_INT 103
66173: PUSH
66174: LD_INT 104
66176: PUSH
66177: LD_INT 105
66179: PUSH
66180: LD_INT 106
66182: PUSH
66183: LD_INT 107
66185: PUSH
66186: LD_INT 108
66188: PUSH
66189: LD_INT 109
66191: PUSH
66192: LD_INT 110
66194: PUSH
66195: LD_INT 111
66197: PUSH
66198: LD_INT 112
66200: PUSH
66201: LD_INT 113
66203: PUSH
66204: LD_INT 114
66206: PUSH
66207: LD_INT 115
66209: PUSH
66210: LD_INT 116
66212: PUSH
66213: LD_INT 117
66215: PUSH
66216: LD_INT 118
66218: PUSH
66219: EMPTY
66220: LIST
66221: LIST
66222: LIST
66223: LIST
66224: LIST
66225: LIST
66226: LIST
66227: LIST
66228: LIST
66229: LIST
66230: LIST
66231: LIST
66232: LIST
66233: LIST
66234: LIST
66235: LIST
66236: LIST
66237: LIST
66238: PUSH
66239: EMPTY
66240: LIST
66241: LIST
66242: ST_TO_ADDR
66243: GO 66246
66245: POP
// end else
66246: GO 66477
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
66248: LD_ADDR_VAR 0 2
66252: PUSH
66253: LD_INT 1
66255: PUSH
66256: LD_INT 2
66258: PUSH
66259: LD_INT 3
66261: PUSH
66262: LD_INT 4
66264: PUSH
66265: LD_INT 5
66267: PUSH
66268: LD_INT 6
66270: PUSH
66271: LD_INT 7
66273: PUSH
66274: LD_INT 8
66276: PUSH
66277: LD_INT 9
66279: PUSH
66280: LD_INT 10
66282: PUSH
66283: LD_INT 11
66285: PUSH
66286: LD_INT 12
66288: PUSH
66289: LD_INT 13
66291: PUSH
66292: LD_INT 14
66294: PUSH
66295: LD_INT 15
66297: PUSH
66298: LD_INT 16
66300: PUSH
66301: LD_INT 17
66303: PUSH
66304: LD_INT 18
66306: PUSH
66307: LD_INT 19
66309: PUSH
66310: LD_INT 20
66312: PUSH
66313: LD_INT 21
66315: PUSH
66316: LD_INT 22
66318: PUSH
66319: LD_INT 23
66321: PUSH
66322: LD_INT 24
66324: PUSH
66325: LD_INT 25
66327: PUSH
66328: LD_INT 26
66330: PUSH
66331: LD_INT 27
66333: PUSH
66334: LD_INT 28
66336: PUSH
66337: LD_INT 29
66339: PUSH
66340: LD_INT 30
66342: PUSH
66343: LD_INT 31
66345: PUSH
66346: LD_INT 32
66348: PUSH
66349: LD_INT 33
66351: PUSH
66352: LD_INT 34
66354: PUSH
66355: LD_INT 35
66357: PUSH
66358: LD_INT 36
66360: PUSH
66361: EMPTY
66362: LIST
66363: LIST
66364: LIST
66365: LIST
66366: LIST
66367: LIST
66368: LIST
66369: LIST
66370: LIST
66371: LIST
66372: LIST
66373: LIST
66374: LIST
66375: LIST
66376: LIST
66377: LIST
66378: LIST
66379: LIST
66380: LIST
66381: LIST
66382: LIST
66383: LIST
66384: LIST
66385: LIST
66386: LIST
66387: LIST
66388: LIST
66389: LIST
66390: LIST
66391: LIST
66392: LIST
66393: LIST
66394: LIST
66395: LIST
66396: LIST
66397: LIST
66398: PUSH
66399: LD_INT 101
66401: PUSH
66402: LD_INT 102
66404: PUSH
66405: LD_INT 103
66407: PUSH
66408: LD_INT 104
66410: PUSH
66411: LD_INT 105
66413: PUSH
66414: LD_INT 106
66416: PUSH
66417: LD_INT 107
66419: PUSH
66420: LD_INT 108
66422: PUSH
66423: LD_INT 109
66425: PUSH
66426: LD_INT 110
66428: PUSH
66429: LD_INT 111
66431: PUSH
66432: LD_INT 112
66434: PUSH
66435: LD_INT 113
66437: PUSH
66438: LD_INT 114
66440: PUSH
66441: LD_INT 115
66443: PUSH
66444: LD_INT 116
66446: PUSH
66447: LD_INT 117
66449: PUSH
66450: LD_INT 118
66452: PUSH
66453: EMPTY
66454: LIST
66455: LIST
66456: LIST
66457: LIST
66458: LIST
66459: LIST
66460: LIST
66461: LIST
66462: LIST
66463: LIST
66464: LIST
66465: LIST
66466: LIST
66467: LIST
66468: LIST
66469: LIST
66470: LIST
66471: LIST
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: ST_TO_ADDR
// if result then
66477: LD_VAR 0 2
66481: IFFALSE 67267
// begin normal :=  ;
66483: LD_ADDR_VAR 0 5
66487: PUSH
66488: LD_STRING 
66490: ST_TO_ADDR
// hardcore :=  ;
66491: LD_ADDR_VAR 0 6
66495: PUSH
66496: LD_STRING 
66498: ST_TO_ADDR
// active :=  ;
66499: LD_ADDR_VAR 0 7
66503: PUSH
66504: LD_STRING 
66506: ST_TO_ADDR
// for i = 1 to normalCounter do
66507: LD_ADDR_VAR 0 8
66511: PUSH
66512: DOUBLE
66513: LD_INT 1
66515: DEC
66516: ST_TO_ADDR
66517: LD_EXP 46
66521: PUSH
66522: FOR_TO
66523: IFFALSE 66624
// begin tmp := 0 ;
66525: LD_ADDR_VAR 0 3
66529: PUSH
66530: LD_STRING 0
66532: ST_TO_ADDR
// if result [ 1 ] then
66533: LD_VAR 0 2
66537: PUSH
66538: LD_INT 1
66540: ARRAY
66541: IFFALSE 66606
// if result [ 1 ] [ 1 ] = i then
66543: LD_VAR 0 2
66547: PUSH
66548: LD_INT 1
66550: ARRAY
66551: PUSH
66552: LD_INT 1
66554: ARRAY
66555: PUSH
66556: LD_VAR 0 8
66560: EQUAL
66561: IFFALSE 66606
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
66563: LD_ADDR_VAR 0 2
66567: PUSH
66568: LD_VAR 0 2
66572: PPUSH
66573: LD_INT 1
66575: PPUSH
66576: LD_VAR 0 2
66580: PUSH
66581: LD_INT 1
66583: ARRAY
66584: PPUSH
66585: LD_INT 1
66587: PPUSH
66588: CALL_OW 3
66592: PPUSH
66593: CALL_OW 1
66597: ST_TO_ADDR
// tmp := 1 ;
66598: LD_ADDR_VAR 0 3
66602: PUSH
66603: LD_STRING 1
66605: ST_TO_ADDR
// end ; normal := normal & tmp ;
66606: LD_ADDR_VAR 0 5
66610: PUSH
66611: LD_VAR 0 5
66615: PUSH
66616: LD_VAR 0 3
66620: STR
66621: ST_TO_ADDR
// end ;
66622: GO 66522
66624: POP
66625: POP
// for i = 1 to hardcoreCounter do
66626: LD_ADDR_VAR 0 8
66630: PUSH
66631: DOUBLE
66632: LD_INT 1
66634: DEC
66635: ST_TO_ADDR
66636: LD_EXP 47
66640: PUSH
66641: FOR_TO
66642: IFFALSE 66747
// begin tmp := 0 ;
66644: LD_ADDR_VAR 0 3
66648: PUSH
66649: LD_STRING 0
66651: ST_TO_ADDR
// if result [ 2 ] then
66652: LD_VAR 0 2
66656: PUSH
66657: LD_INT 2
66659: ARRAY
66660: IFFALSE 66729
// if result [ 2 ] [ 1 ] = 100 + i then
66662: LD_VAR 0 2
66666: PUSH
66667: LD_INT 2
66669: ARRAY
66670: PUSH
66671: LD_INT 1
66673: ARRAY
66674: PUSH
66675: LD_INT 100
66677: PUSH
66678: LD_VAR 0 8
66682: PLUS
66683: EQUAL
66684: IFFALSE 66729
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
66686: LD_ADDR_VAR 0 2
66690: PUSH
66691: LD_VAR 0 2
66695: PPUSH
66696: LD_INT 2
66698: PPUSH
66699: LD_VAR 0 2
66703: PUSH
66704: LD_INT 2
66706: ARRAY
66707: PPUSH
66708: LD_INT 1
66710: PPUSH
66711: CALL_OW 3
66715: PPUSH
66716: CALL_OW 1
66720: ST_TO_ADDR
// tmp := 1 ;
66721: LD_ADDR_VAR 0 3
66725: PUSH
66726: LD_STRING 1
66728: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
66729: LD_ADDR_VAR 0 6
66733: PUSH
66734: LD_VAR 0 6
66738: PUSH
66739: LD_VAR 0 3
66743: STR
66744: ST_TO_ADDR
// end ;
66745: GO 66641
66747: POP
66748: POP
// if isGameLoad then
66749: LD_VAR 0 1
66753: IFFALSE 67228
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
66755: LD_ADDR_VAR 0 4
66759: PUSH
66760: LD_EXP 50
66764: PUSH
66765: LD_EXP 49
66769: PUSH
66770: LD_EXP 51
66774: PUSH
66775: LD_EXP 48
66779: PUSH
66780: LD_EXP 52
66784: PUSH
66785: LD_EXP 53
66789: PUSH
66790: LD_EXP 54
66794: PUSH
66795: LD_EXP 55
66799: PUSH
66800: LD_EXP 56
66804: PUSH
66805: LD_EXP 57
66809: PUSH
66810: LD_EXP 58
66814: PUSH
66815: LD_EXP 59
66819: PUSH
66820: LD_EXP 60
66824: PUSH
66825: LD_EXP 61
66829: PUSH
66830: LD_EXP 69
66834: PUSH
66835: LD_EXP 70
66839: PUSH
66840: LD_EXP 71
66844: PUSH
66845: LD_EXP 72
66849: PUSH
66850: LD_EXP 74
66854: PUSH
66855: LD_EXP 75
66859: PUSH
66860: LD_EXP 76
66864: PUSH
66865: LD_EXP 79
66869: PUSH
66870: LD_EXP 81
66874: PUSH
66875: LD_EXP 82
66879: PUSH
66880: LD_EXP 83
66884: PUSH
66885: LD_EXP 85
66889: PUSH
66890: LD_EXP 86
66894: PUSH
66895: LD_EXP 89
66899: PUSH
66900: LD_EXP 90
66904: PUSH
66905: LD_EXP 91
66909: PUSH
66910: LD_EXP 92
66914: PUSH
66915: LD_EXP 93
66919: PUSH
66920: LD_EXP 94
66924: PUSH
66925: LD_EXP 95
66929: PUSH
66930: LD_EXP 96
66934: PUSH
66935: LD_EXP 97
66939: PUSH
66940: LD_EXP 62
66944: PUSH
66945: LD_EXP 63
66949: PUSH
66950: LD_EXP 66
66954: PUSH
66955: LD_EXP 67
66959: PUSH
66960: LD_EXP 68
66964: PUSH
66965: LD_EXP 64
66969: PUSH
66970: LD_EXP 65
66974: PUSH
66975: LD_EXP 73
66979: PUSH
66980: LD_EXP 77
66984: PUSH
66985: LD_EXP 78
66989: PUSH
66990: LD_EXP 80
66994: PUSH
66995: LD_EXP 84
66999: PUSH
67000: LD_EXP 87
67004: PUSH
67005: LD_EXP 88
67009: PUSH
67010: LD_EXP 98
67014: PUSH
67015: LD_EXP 99
67019: PUSH
67020: LD_EXP 100
67024: PUSH
67025: LD_EXP 101
67029: PUSH
67030: EMPTY
67031: LIST
67032: LIST
67033: LIST
67034: LIST
67035: LIST
67036: LIST
67037: LIST
67038: LIST
67039: LIST
67040: LIST
67041: LIST
67042: LIST
67043: LIST
67044: LIST
67045: LIST
67046: LIST
67047: LIST
67048: LIST
67049: LIST
67050: LIST
67051: LIST
67052: LIST
67053: LIST
67054: LIST
67055: LIST
67056: LIST
67057: LIST
67058: LIST
67059: LIST
67060: LIST
67061: LIST
67062: LIST
67063: LIST
67064: LIST
67065: LIST
67066: LIST
67067: LIST
67068: LIST
67069: LIST
67070: LIST
67071: LIST
67072: LIST
67073: LIST
67074: LIST
67075: LIST
67076: LIST
67077: LIST
67078: LIST
67079: LIST
67080: LIST
67081: LIST
67082: LIST
67083: LIST
67084: LIST
67085: ST_TO_ADDR
// tmp :=  ;
67086: LD_ADDR_VAR 0 3
67090: PUSH
67091: LD_STRING 
67093: ST_TO_ADDR
// for i = 1 to normalCounter do
67094: LD_ADDR_VAR 0 8
67098: PUSH
67099: DOUBLE
67100: LD_INT 1
67102: DEC
67103: ST_TO_ADDR
67104: LD_EXP 46
67108: PUSH
67109: FOR_TO
67110: IFFALSE 67146
// begin if flags [ i ] then
67112: LD_VAR 0 4
67116: PUSH
67117: LD_VAR 0 8
67121: ARRAY
67122: IFFALSE 67144
// tmp := tmp & i & ; ;
67124: LD_ADDR_VAR 0 3
67128: PUSH
67129: LD_VAR 0 3
67133: PUSH
67134: LD_VAR 0 8
67138: STR
67139: PUSH
67140: LD_STRING ;
67142: STR
67143: ST_TO_ADDR
// end ;
67144: GO 67109
67146: POP
67147: POP
// for i = 1 to hardcoreCounter do
67148: LD_ADDR_VAR 0 8
67152: PUSH
67153: DOUBLE
67154: LD_INT 1
67156: DEC
67157: ST_TO_ADDR
67158: LD_EXP 47
67162: PUSH
67163: FOR_TO
67164: IFFALSE 67210
// begin if flags [ normalCounter + i ] then
67166: LD_VAR 0 4
67170: PUSH
67171: LD_EXP 46
67175: PUSH
67176: LD_VAR 0 8
67180: PLUS
67181: ARRAY
67182: IFFALSE 67208
// tmp := tmp & ( 100 + i ) & ; ;
67184: LD_ADDR_VAR 0 3
67188: PUSH
67189: LD_VAR 0 3
67193: PUSH
67194: LD_INT 100
67196: PUSH
67197: LD_VAR 0 8
67201: PLUS
67202: STR
67203: PUSH
67204: LD_STRING ;
67206: STR
67207: ST_TO_ADDR
// end ;
67208: GO 67163
67210: POP
67211: POP
// if tmp then
67212: LD_VAR 0 3
67216: IFFALSE 67228
// active := tmp ;
67218: LD_ADDR_VAR 0 7
67222: PUSH
67223: LD_VAR 0 3
67227: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
67228: LD_STRING getStreamItemsFromMission("
67230: PUSH
67231: LD_VAR 0 5
67235: STR
67236: PUSH
67237: LD_STRING ","
67239: STR
67240: PUSH
67241: LD_VAR 0 6
67245: STR
67246: PUSH
67247: LD_STRING ","
67249: STR
67250: PUSH
67251: LD_VAR 0 7
67255: STR
67256: PUSH
67257: LD_STRING ")
67259: STR
67260: PPUSH
67261: CALL_OW 559
// end else
67265: GO 67274
// ToLua ( getStreamItemsFromMission("","","") ) ;
67267: LD_STRING getStreamItemsFromMission("","","")
67269: PPUSH
67270: CALL_OW 559
// end ;
67274: LD_VAR 0 2
67278: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
67279: LD_EXP 45
67283: PUSH
67284: LD_EXP 50
67288: AND
67289: IFFALSE 67413
67291: GO 67293
67293: DISABLE
67294: LD_INT 0
67296: PPUSH
67297: PPUSH
// begin enable ;
67298: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
67299: LD_ADDR_VAR 0 2
67303: PUSH
67304: LD_INT 22
67306: PUSH
67307: LD_OWVAR 2
67311: PUSH
67312: EMPTY
67313: LIST
67314: LIST
67315: PUSH
67316: LD_INT 2
67318: PUSH
67319: LD_INT 34
67321: PUSH
67322: LD_INT 7
67324: PUSH
67325: EMPTY
67326: LIST
67327: LIST
67328: PUSH
67329: LD_INT 34
67331: PUSH
67332: LD_INT 45
67334: PUSH
67335: EMPTY
67336: LIST
67337: LIST
67338: PUSH
67339: LD_INT 34
67341: PUSH
67342: LD_INT 28
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: PUSH
67349: LD_INT 34
67351: PUSH
67352: LD_INT 47
67354: PUSH
67355: EMPTY
67356: LIST
67357: LIST
67358: PUSH
67359: EMPTY
67360: LIST
67361: LIST
67362: LIST
67363: LIST
67364: LIST
67365: PUSH
67366: EMPTY
67367: LIST
67368: LIST
67369: PPUSH
67370: CALL_OW 69
67374: ST_TO_ADDR
// if not tmp then
67375: LD_VAR 0 2
67379: NOT
67380: IFFALSE 67384
// exit ;
67382: GO 67413
// for i in tmp do
67384: LD_ADDR_VAR 0 1
67388: PUSH
67389: LD_VAR 0 2
67393: PUSH
67394: FOR_IN
67395: IFFALSE 67411
// begin SetLives ( i , 0 ) ;
67397: LD_VAR 0 1
67401: PPUSH
67402: LD_INT 0
67404: PPUSH
67405: CALL_OW 234
// end ;
67409: GO 67394
67411: POP
67412: POP
// end ;
67413: PPOPN 2
67415: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
67416: LD_EXP 45
67420: PUSH
67421: LD_EXP 51
67425: AND
67426: IFFALSE 67510
67428: GO 67430
67430: DISABLE
67431: LD_INT 0
67433: PPUSH
67434: PPUSH
// begin enable ;
67435: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
67436: LD_ADDR_VAR 0 2
67440: PUSH
67441: LD_INT 22
67443: PUSH
67444: LD_OWVAR 2
67448: PUSH
67449: EMPTY
67450: LIST
67451: LIST
67452: PUSH
67453: LD_INT 32
67455: PUSH
67456: LD_INT 3
67458: PUSH
67459: EMPTY
67460: LIST
67461: LIST
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: PPUSH
67467: CALL_OW 69
67471: ST_TO_ADDR
// if not tmp then
67472: LD_VAR 0 2
67476: NOT
67477: IFFALSE 67481
// exit ;
67479: GO 67510
// for i in tmp do
67481: LD_ADDR_VAR 0 1
67485: PUSH
67486: LD_VAR 0 2
67490: PUSH
67491: FOR_IN
67492: IFFALSE 67508
// begin SetLives ( i , 0 ) ;
67494: LD_VAR 0 1
67498: PPUSH
67499: LD_INT 0
67501: PPUSH
67502: CALL_OW 234
// end ;
67506: GO 67491
67508: POP
67509: POP
// end ;
67510: PPOPN 2
67512: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
67513: LD_EXP 45
67517: PUSH
67518: LD_EXP 48
67522: AND
67523: IFFALSE 67616
67525: GO 67527
67527: DISABLE
67528: LD_INT 0
67530: PPUSH
// begin enable ;
67531: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
67532: LD_ADDR_VAR 0 1
67536: PUSH
67537: LD_INT 22
67539: PUSH
67540: LD_OWVAR 2
67544: PUSH
67545: EMPTY
67546: LIST
67547: LIST
67548: PUSH
67549: LD_INT 2
67551: PUSH
67552: LD_INT 25
67554: PUSH
67555: LD_INT 5
67557: PUSH
67558: EMPTY
67559: LIST
67560: LIST
67561: PUSH
67562: LD_INT 25
67564: PUSH
67565: LD_INT 9
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: PUSH
67572: LD_INT 25
67574: PUSH
67575: LD_INT 8
67577: PUSH
67578: EMPTY
67579: LIST
67580: LIST
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: LIST
67586: LIST
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: PPUSH
67592: CALL_OW 69
67596: PUSH
67597: FOR_IN
67598: IFFALSE 67614
// begin SetClass ( i , 1 ) ;
67600: LD_VAR 0 1
67604: PPUSH
67605: LD_INT 1
67607: PPUSH
67608: CALL_OW 336
// end ;
67612: GO 67597
67614: POP
67615: POP
// end ;
67616: PPOPN 1
67618: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
67619: LD_EXP 45
67623: PUSH
67624: LD_EXP 49
67628: AND
67629: PUSH
67630: LD_OWVAR 65
67634: PUSH
67635: LD_INT 7
67637: LESS
67638: AND
67639: IFFALSE 67653
67641: GO 67643
67643: DISABLE
// begin enable ;
67644: ENABLE
// game_speed := 7 ;
67645: LD_ADDR_OWVAR 65
67649: PUSH
67650: LD_INT 7
67652: ST_TO_ADDR
// end ;
67653: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
67654: LD_EXP 45
67658: PUSH
67659: LD_EXP 52
67663: AND
67664: IFFALSE 67866
67666: GO 67668
67668: DISABLE
67669: LD_INT 0
67671: PPUSH
67672: PPUSH
67673: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
67674: LD_ADDR_VAR 0 3
67678: PUSH
67679: LD_INT 81
67681: PUSH
67682: LD_OWVAR 2
67686: PUSH
67687: EMPTY
67688: LIST
67689: LIST
67690: PUSH
67691: LD_INT 21
67693: PUSH
67694: LD_INT 1
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: PUSH
67701: EMPTY
67702: LIST
67703: LIST
67704: PPUSH
67705: CALL_OW 69
67709: ST_TO_ADDR
// if not tmp then
67710: LD_VAR 0 3
67714: NOT
67715: IFFALSE 67719
// exit ;
67717: GO 67866
// if tmp > 5 then
67719: LD_VAR 0 3
67723: PUSH
67724: LD_INT 5
67726: GREATER
67727: IFFALSE 67739
// k := 5 else
67729: LD_ADDR_VAR 0 2
67733: PUSH
67734: LD_INT 5
67736: ST_TO_ADDR
67737: GO 67749
// k := tmp ;
67739: LD_ADDR_VAR 0 2
67743: PUSH
67744: LD_VAR 0 3
67748: ST_TO_ADDR
// for i := 1 to k do
67749: LD_ADDR_VAR 0 1
67753: PUSH
67754: DOUBLE
67755: LD_INT 1
67757: DEC
67758: ST_TO_ADDR
67759: LD_VAR 0 2
67763: PUSH
67764: FOR_TO
67765: IFFALSE 67864
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
67767: LD_VAR 0 3
67771: PUSH
67772: LD_VAR 0 1
67776: ARRAY
67777: PPUSH
67778: LD_VAR 0 1
67782: PUSH
67783: LD_INT 4
67785: MOD
67786: PUSH
67787: LD_INT 1
67789: PLUS
67790: PPUSH
67791: CALL_OW 259
67795: PUSH
67796: LD_INT 10
67798: LESS
67799: IFFALSE 67862
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
67801: LD_VAR 0 3
67805: PUSH
67806: LD_VAR 0 1
67810: ARRAY
67811: PPUSH
67812: LD_VAR 0 1
67816: PUSH
67817: LD_INT 4
67819: MOD
67820: PUSH
67821: LD_INT 1
67823: PLUS
67824: PPUSH
67825: LD_VAR 0 3
67829: PUSH
67830: LD_VAR 0 1
67834: ARRAY
67835: PPUSH
67836: LD_VAR 0 1
67840: PUSH
67841: LD_INT 4
67843: MOD
67844: PUSH
67845: LD_INT 1
67847: PLUS
67848: PPUSH
67849: CALL_OW 259
67853: PUSH
67854: LD_INT 1
67856: PLUS
67857: PPUSH
67858: CALL_OW 237
67862: GO 67764
67864: POP
67865: POP
// end ;
67866: PPOPN 3
67868: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
67869: LD_EXP 45
67873: PUSH
67874: LD_EXP 53
67878: AND
67879: IFFALSE 67899
67881: GO 67883
67883: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
67884: LD_INT 4
67886: PPUSH
67887: LD_OWVAR 2
67891: PPUSH
67892: LD_INT 0
67894: PPUSH
67895: CALL_OW 324
67899: END
// every 0 0$1 trigger StreamModeActive and sShovel do
67900: LD_EXP 45
67904: PUSH
67905: LD_EXP 82
67909: AND
67910: IFFALSE 67930
67912: GO 67914
67914: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
67915: LD_INT 19
67917: PPUSH
67918: LD_OWVAR 2
67922: PPUSH
67923: LD_INT 0
67925: PPUSH
67926: CALL_OW 324
67930: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
67931: LD_EXP 45
67935: PUSH
67936: LD_EXP 54
67940: AND
67941: IFFALSE 68043
67943: GO 67945
67945: DISABLE
67946: LD_INT 0
67948: PPUSH
67949: PPUSH
// begin enable ;
67950: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
67951: LD_ADDR_VAR 0 2
67955: PUSH
67956: LD_INT 22
67958: PUSH
67959: LD_OWVAR 2
67963: PUSH
67964: EMPTY
67965: LIST
67966: LIST
67967: PUSH
67968: LD_INT 2
67970: PUSH
67971: LD_INT 34
67973: PUSH
67974: LD_INT 11
67976: PUSH
67977: EMPTY
67978: LIST
67979: LIST
67980: PUSH
67981: LD_INT 34
67983: PUSH
67984: LD_INT 30
67986: PUSH
67987: EMPTY
67988: LIST
67989: LIST
67990: PUSH
67991: EMPTY
67992: LIST
67993: LIST
67994: LIST
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: PPUSH
68000: CALL_OW 69
68004: ST_TO_ADDR
// if not tmp then
68005: LD_VAR 0 2
68009: NOT
68010: IFFALSE 68014
// exit ;
68012: GO 68043
// for i in tmp do
68014: LD_ADDR_VAR 0 1
68018: PUSH
68019: LD_VAR 0 2
68023: PUSH
68024: FOR_IN
68025: IFFALSE 68041
// begin SetLives ( i , 0 ) ;
68027: LD_VAR 0 1
68031: PPUSH
68032: LD_INT 0
68034: PPUSH
68035: CALL_OW 234
// end ;
68039: GO 68024
68041: POP
68042: POP
// end ;
68043: PPOPN 2
68045: END
// every 0 0$1 trigger StreamModeActive and sBunker do
68046: LD_EXP 45
68050: PUSH
68051: LD_EXP 55
68055: AND
68056: IFFALSE 68076
68058: GO 68060
68060: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
68061: LD_INT 32
68063: PPUSH
68064: LD_OWVAR 2
68068: PPUSH
68069: LD_INT 0
68071: PPUSH
68072: CALL_OW 324
68076: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
68077: LD_EXP 45
68081: PUSH
68082: LD_EXP 56
68086: AND
68087: IFFALSE 68268
68089: GO 68091
68091: DISABLE
68092: LD_INT 0
68094: PPUSH
68095: PPUSH
68096: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
68097: LD_ADDR_VAR 0 2
68101: PUSH
68102: LD_INT 22
68104: PUSH
68105: LD_OWVAR 2
68109: PUSH
68110: EMPTY
68111: LIST
68112: LIST
68113: PUSH
68114: LD_INT 33
68116: PUSH
68117: LD_INT 3
68119: PUSH
68120: EMPTY
68121: LIST
68122: LIST
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: PPUSH
68128: CALL_OW 69
68132: ST_TO_ADDR
// if not tmp then
68133: LD_VAR 0 2
68137: NOT
68138: IFFALSE 68142
// exit ;
68140: GO 68268
// side := 0 ;
68142: LD_ADDR_VAR 0 3
68146: PUSH
68147: LD_INT 0
68149: ST_TO_ADDR
// for i := 1 to 8 do
68150: LD_ADDR_VAR 0 1
68154: PUSH
68155: DOUBLE
68156: LD_INT 1
68158: DEC
68159: ST_TO_ADDR
68160: LD_INT 8
68162: PUSH
68163: FOR_TO
68164: IFFALSE 68212
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
68166: LD_OWVAR 2
68170: PUSH
68171: LD_VAR 0 1
68175: NONEQUAL
68176: PUSH
68177: LD_OWVAR 2
68181: PPUSH
68182: LD_VAR 0 1
68186: PPUSH
68187: CALL_OW 81
68191: PUSH
68192: LD_INT 2
68194: EQUAL
68195: AND
68196: IFFALSE 68210
// begin side := i ;
68198: LD_ADDR_VAR 0 3
68202: PUSH
68203: LD_VAR 0 1
68207: ST_TO_ADDR
// break ;
68208: GO 68212
// end ;
68210: GO 68163
68212: POP
68213: POP
// if not side then
68214: LD_VAR 0 3
68218: NOT
68219: IFFALSE 68223
// exit ;
68221: GO 68268
// for i := 1 to tmp do
68223: LD_ADDR_VAR 0 1
68227: PUSH
68228: DOUBLE
68229: LD_INT 1
68231: DEC
68232: ST_TO_ADDR
68233: LD_VAR 0 2
68237: PUSH
68238: FOR_TO
68239: IFFALSE 68266
// if Prob ( 60 ) then
68241: LD_INT 60
68243: PPUSH
68244: CALL_OW 13
68248: IFFALSE 68264
// SetSide ( i , side ) ;
68250: LD_VAR 0 1
68254: PPUSH
68255: LD_VAR 0 3
68259: PPUSH
68260: CALL_OW 235
68264: GO 68238
68266: POP
68267: POP
// end ;
68268: PPOPN 3
68270: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
68271: LD_EXP 45
68275: PUSH
68276: LD_EXP 58
68280: AND
68281: IFFALSE 68400
68283: GO 68285
68285: DISABLE
68286: LD_INT 0
68288: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
68289: LD_ADDR_VAR 0 1
68293: PUSH
68294: LD_INT 22
68296: PUSH
68297: LD_OWVAR 2
68301: PUSH
68302: EMPTY
68303: LIST
68304: LIST
68305: PUSH
68306: LD_INT 21
68308: PUSH
68309: LD_INT 1
68311: PUSH
68312: EMPTY
68313: LIST
68314: LIST
68315: PUSH
68316: LD_INT 3
68318: PUSH
68319: LD_INT 23
68321: PUSH
68322: LD_INT 0
68324: PUSH
68325: EMPTY
68326: LIST
68327: LIST
68328: PUSH
68329: EMPTY
68330: LIST
68331: LIST
68332: PUSH
68333: EMPTY
68334: LIST
68335: LIST
68336: LIST
68337: PPUSH
68338: CALL_OW 69
68342: PUSH
68343: FOR_IN
68344: IFFALSE 68398
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
68346: LD_VAR 0 1
68350: PPUSH
68351: CALL_OW 257
68355: PUSH
68356: LD_INT 1
68358: PUSH
68359: LD_INT 2
68361: PUSH
68362: LD_INT 3
68364: PUSH
68365: LD_INT 4
68367: PUSH
68368: EMPTY
68369: LIST
68370: LIST
68371: LIST
68372: LIST
68373: IN
68374: IFFALSE 68396
// SetClass ( un , rand ( 1 , 4 ) ) ;
68376: LD_VAR 0 1
68380: PPUSH
68381: LD_INT 1
68383: PPUSH
68384: LD_INT 4
68386: PPUSH
68387: CALL_OW 12
68391: PPUSH
68392: CALL_OW 336
68396: GO 68343
68398: POP
68399: POP
// end ;
68400: PPOPN 1
68402: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
68403: LD_EXP 45
68407: PUSH
68408: LD_EXP 57
68412: AND
68413: IFFALSE 68492
68415: GO 68417
68417: DISABLE
68418: LD_INT 0
68420: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
68421: LD_ADDR_VAR 0 1
68425: PUSH
68426: LD_INT 22
68428: PUSH
68429: LD_OWVAR 2
68433: PUSH
68434: EMPTY
68435: LIST
68436: LIST
68437: PUSH
68438: LD_INT 21
68440: PUSH
68441: LD_INT 3
68443: PUSH
68444: EMPTY
68445: LIST
68446: LIST
68447: PUSH
68448: EMPTY
68449: LIST
68450: LIST
68451: PPUSH
68452: CALL_OW 69
68456: ST_TO_ADDR
// if not tmp then
68457: LD_VAR 0 1
68461: NOT
68462: IFFALSE 68466
// exit ;
68464: GO 68492
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
68466: LD_VAR 0 1
68470: PUSH
68471: LD_INT 1
68473: PPUSH
68474: LD_VAR 0 1
68478: PPUSH
68479: CALL_OW 12
68483: ARRAY
68484: PPUSH
68485: LD_INT 100
68487: PPUSH
68488: CALL_OW 234
// end ;
68492: PPOPN 1
68494: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
68495: LD_EXP 45
68499: PUSH
68500: LD_EXP 59
68504: AND
68505: IFFALSE 68603
68507: GO 68509
68509: DISABLE
68510: LD_INT 0
68512: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
68513: LD_ADDR_VAR 0 1
68517: PUSH
68518: LD_INT 22
68520: PUSH
68521: LD_OWVAR 2
68525: PUSH
68526: EMPTY
68527: LIST
68528: LIST
68529: PUSH
68530: LD_INT 21
68532: PUSH
68533: LD_INT 1
68535: PUSH
68536: EMPTY
68537: LIST
68538: LIST
68539: PUSH
68540: EMPTY
68541: LIST
68542: LIST
68543: PPUSH
68544: CALL_OW 69
68548: ST_TO_ADDR
// if not tmp then
68549: LD_VAR 0 1
68553: NOT
68554: IFFALSE 68558
// exit ;
68556: GO 68603
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
68558: LD_VAR 0 1
68562: PUSH
68563: LD_INT 1
68565: PPUSH
68566: LD_VAR 0 1
68570: PPUSH
68571: CALL_OW 12
68575: ARRAY
68576: PPUSH
68577: LD_INT 1
68579: PPUSH
68580: LD_INT 4
68582: PPUSH
68583: CALL_OW 12
68587: PPUSH
68588: LD_INT 3000
68590: PPUSH
68591: LD_INT 9000
68593: PPUSH
68594: CALL_OW 12
68598: PPUSH
68599: CALL_OW 492
// end ;
68603: PPOPN 1
68605: END
// every 0 0$1 trigger StreamModeActive and sDepot do
68606: LD_EXP 45
68610: PUSH
68611: LD_EXP 60
68615: AND
68616: IFFALSE 68636
68618: GO 68620
68620: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
68621: LD_INT 1
68623: PPUSH
68624: LD_OWVAR 2
68628: PPUSH
68629: LD_INT 0
68631: PPUSH
68632: CALL_OW 324
68636: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
68637: LD_EXP 45
68641: PUSH
68642: LD_EXP 61
68646: AND
68647: IFFALSE 68730
68649: GO 68651
68651: DISABLE
68652: LD_INT 0
68654: PPUSH
68655: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
68656: LD_ADDR_VAR 0 2
68660: PUSH
68661: LD_INT 22
68663: PUSH
68664: LD_OWVAR 2
68668: PUSH
68669: EMPTY
68670: LIST
68671: LIST
68672: PUSH
68673: LD_INT 21
68675: PUSH
68676: LD_INT 3
68678: PUSH
68679: EMPTY
68680: LIST
68681: LIST
68682: PUSH
68683: EMPTY
68684: LIST
68685: LIST
68686: PPUSH
68687: CALL_OW 69
68691: ST_TO_ADDR
// if not tmp then
68692: LD_VAR 0 2
68696: NOT
68697: IFFALSE 68701
// exit ;
68699: GO 68730
// for i in tmp do
68701: LD_ADDR_VAR 0 1
68705: PUSH
68706: LD_VAR 0 2
68710: PUSH
68711: FOR_IN
68712: IFFALSE 68728
// SetBLevel ( i , 10 ) ;
68714: LD_VAR 0 1
68718: PPUSH
68719: LD_INT 10
68721: PPUSH
68722: CALL_OW 241
68726: GO 68711
68728: POP
68729: POP
// end ;
68730: PPOPN 2
68732: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
68733: LD_EXP 45
68737: PUSH
68738: LD_EXP 62
68742: AND
68743: IFFALSE 68854
68745: GO 68747
68747: DISABLE
68748: LD_INT 0
68750: PPUSH
68751: PPUSH
68752: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68753: LD_ADDR_VAR 0 3
68757: PUSH
68758: LD_INT 22
68760: PUSH
68761: LD_OWVAR 2
68765: PUSH
68766: EMPTY
68767: LIST
68768: LIST
68769: PUSH
68770: LD_INT 25
68772: PUSH
68773: LD_INT 1
68775: PUSH
68776: EMPTY
68777: LIST
68778: LIST
68779: PUSH
68780: EMPTY
68781: LIST
68782: LIST
68783: PPUSH
68784: CALL_OW 69
68788: ST_TO_ADDR
// if not tmp then
68789: LD_VAR 0 3
68793: NOT
68794: IFFALSE 68798
// exit ;
68796: GO 68854
// un := tmp [ rand ( 1 , tmp ) ] ;
68798: LD_ADDR_VAR 0 2
68802: PUSH
68803: LD_VAR 0 3
68807: PUSH
68808: LD_INT 1
68810: PPUSH
68811: LD_VAR 0 3
68815: PPUSH
68816: CALL_OW 12
68820: ARRAY
68821: ST_TO_ADDR
// if Crawls ( un ) then
68822: LD_VAR 0 2
68826: PPUSH
68827: CALL_OW 318
68831: IFFALSE 68842
// ComWalk ( un ) ;
68833: LD_VAR 0 2
68837: PPUSH
68838: CALL_OW 138
// SetClass ( un , class_sniper ) ;
68842: LD_VAR 0 2
68846: PPUSH
68847: LD_INT 5
68849: PPUSH
68850: CALL_OW 336
// end ;
68854: PPOPN 3
68856: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
68857: LD_EXP 45
68861: PUSH
68862: LD_EXP 63
68866: AND
68867: PUSH
68868: LD_OWVAR 67
68872: PUSH
68873: LD_INT 4
68875: LESS
68876: AND
68877: IFFALSE 68896
68879: GO 68881
68881: DISABLE
// begin Difficulty := Difficulty + 1 ;
68882: LD_ADDR_OWVAR 67
68886: PUSH
68887: LD_OWVAR 67
68891: PUSH
68892: LD_INT 1
68894: PLUS
68895: ST_TO_ADDR
// end ;
68896: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
68897: LD_EXP 45
68901: PUSH
68902: LD_EXP 64
68906: AND
68907: IFFALSE 69010
68909: GO 68911
68911: DISABLE
68912: LD_INT 0
68914: PPUSH
// begin for i := 1 to 5 do
68915: LD_ADDR_VAR 0 1
68919: PUSH
68920: DOUBLE
68921: LD_INT 1
68923: DEC
68924: ST_TO_ADDR
68925: LD_INT 5
68927: PUSH
68928: FOR_TO
68929: IFFALSE 69008
// begin uc_nation := nation_nature ;
68931: LD_ADDR_OWVAR 21
68935: PUSH
68936: LD_INT 0
68938: ST_TO_ADDR
// uc_side := 0 ;
68939: LD_ADDR_OWVAR 20
68943: PUSH
68944: LD_INT 0
68946: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
68947: LD_ADDR_OWVAR 29
68951: PUSH
68952: LD_INT 12
68954: PUSH
68955: LD_INT 12
68957: PUSH
68958: EMPTY
68959: LIST
68960: LIST
68961: ST_TO_ADDR
// hc_agressivity := 20 ;
68962: LD_ADDR_OWVAR 35
68966: PUSH
68967: LD_INT 20
68969: ST_TO_ADDR
// hc_class := class_tiger ;
68970: LD_ADDR_OWVAR 28
68974: PUSH
68975: LD_INT 14
68977: ST_TO_ADDR
// hc_gallery :=  ;
68978: LD_ADDR_OWVAR 33
68982: PUSH
68983: LD_STRING 
68985: ST_TO_ADDR
// hc_name :=  ;
68986: LD_ADDR_OWVAR 26
68990: PUSH
68991: LD_STRING 
68993: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
68994: CALL_OW 44
68998: PPUSH
68999: LD_INT 0
69001: PPUSH
69002: CALL_OW 51
// end ;
69006: GO 68928
69008: POP
69009: POP
// end ;
69010: PPOPN 1
69012: END
// every 0 0$1 trigger StreamModeActive and sBomb do
69013: LD_EXP 45
69017: PUSH
69018: LD_EXP 65
69022: AND
69023: IFFALSE 69032
69025: GO 69027
69027: DISABLE
// StreamSibBomb ;
69028: CALL 69033 0 0
69032: END
// export function StreamSibBomb ; var i , x , y ; begin
69033: LD_INT 0
69035: PPUSH
69036: PPUSH
69037: PPUSH
69038: PPUSH
// result := false ;
69039: LD_ADDR_VAR 0 1
69043: PUSH
69044: LD_INT 0
69046: ST_TO_ADDR
// for i := 1 to 16 do
69047: LD_ADDR_VAR 0 2
69051: PUSH
69052: DOUBLE
69053: LD_INT 1
69055: DEC
69056: ST_TO_ADDR
69057: LD_INT 16
69059: PUSH
69060: FOR_TO
69061: IFFALSE 69260
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
69063: LD_ADDR_VAR 0 3
69067: PUSH
69068: LD_INT 10
69070: PUSH
69071: LD_INT 20
69073: PUSH
69074: LD_INT 30
69076: PUSH
69077: LD_INT 40
69079: PUSH
69080: LD_INT 50
69082: PUSH
69083: LD_INT 60
69085: PUSH
69086: LD_INT 70
69088: PUSH
69089: LD_INT 80
69091: PUSH
69092: LD_INT 90
69094: PUSH
69095: LD_INT 100
69097: PUSH
69098: LD_INT 110
69100: PUSH
69101: LD_INT 120
69103: PUSH
69104: LD_INT 130
69106: PUSH
69107: LD_INT 140
69109: PUSH
69110: LD_INT 150
69112: PUSH
69113: EMPTY
69114: LIST
69115: LIST
69116: LIST
69117: LIST
69118: LIST
69119: LIST
69120: LIST
69121: LIST
69122: LIST
69123: LIST
69124: LIST
69125: LIST
69126: LIST
69127: LIST
69128: LIST
69129: PUSH
69130: LD_INT 1
69132: PPUSH
69133: LD_INT 15
69135: PPUSH
69136: CALL_OW 12
69140: ARRAY
69141: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
69142: LD_ADDR_VAR 0 4
69146: PUSH
69147: LD_INT 10
69149: PUSH
69150: LD_INT 20
69152: PUSH
69153: LD_INT 30
69155: PUSH
69156: LD_INT 40
69158: PUSH
69159: LD_INT 50
69161: PUSH
69162: LD_INT 60
69164: PUSH
69165: LD_INT 70
69167: PUSH
69168: LD_INT 80
69170: PUSH
69171: LD_INT 90
69173: PUSH
69174: LD_INT 100
69176: PUSH
69177: LD_INT 110
69179: PUSH
69180: LD_INT 120
69182: PUSH
69183: LD_INT 130
69185: PUSH
69186: LD_INT 140
69188: PUSH
69189: LD_INT 150
69191: PUSH
69192: EMPTY
69193: LIST
69194: LIST
69195: LIST
69196: LIST
69197: LIST
69198: LIST
69199: LIST
69200: LIST
69201: LIST
69202: LIST
69203: LIST
69204: LIST
69205: LIST
69206: LIST
69207: LIST
69208: PUSH
69209: LD_INT 1
69211: PPUSH
69212: LD_INT 15
69214: PPUSH
69215: CALL_OW 12
69219: ARRAY
69220: ST_TO_ADDR
// if ValidHex ( x , y ) then
69221: LD_VAR 0 3
69225: PPUSH
69226: LD_VAR 0 4
69230: PPUSH
69231: CALL_OW 488
69235: IFFALSE 69258
// begin result := [ x , y ] ;
69237: LD_ADDR_VAR 0 1
69241: PUSH
69242: LD_VAR 0 3
69246: PUSH
69247: LD_VAR 0 4
69251: PUSH
69252: EMPTY
69253: LIST
69254: LIST
69255: ST_TO_ADDR
// break ;
69256: GO 69260
// end ; end ;
69258: GO 69060
69260: POP
69261: POP
// if result then
69262: LD_VAR 0 1
69266: IFFALSE 69326
// begin ToLua ( playSibBomb() ) ;
69268: LD_STRING playSibBomb()
69270: PPUSH
69271: CALL_OW 559
// wait ( 0 0$14 ) ;
69275: LD_INT 490
69277: PPUSH
69278: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
69282: LD_VAR 0 1
69286: PUSH
69287: LD_INT 1
69289: ARRAY
69290: PPUSH
69291: LD_VAR 0 1
69295: PUSH
69296: LD_INT 2
69298: ARRAY
69299: PPUSH
69300: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
69304: LD_VAR 0 1
69308: PUSH
69309: LD_INT 1
69311: ARRAY
69312: PPUSH
69313: LD_VAR 0 1
69317: PUSH
69318: LD_INT 2
69320: ARRAY
69321: PPUSH
69322: CALL_OW 429
// end ; end ;
69326: LD_VAR 0 1
69330: RET
// every 0 0$1 trigger StreamModeActive and sReset do
69331: LD_EXP 45
69335: PUSH
69336: LD_EXP 67
69340: AND
69341: IFFALSE 69353
69343: GO 69345
69345: DISABLE
// YouLost (  ) ;
69346: LD_STRING 
69348: PPUSH
69349: CALL_OW 104
69353: END
// every 0 0$1 trigger StreamModeActive and sFog do
69354: LD_EXP 45
69358: PUSH
69359: LD_EXP 66
69363: AND
69364: IFFALSE 69378
69366: GO 69368
69368: DISABLE
// FogOff ( your_side ) ;
69369: LD_OWVAR 2
69373: PPUSH
69374: CALL_OW 344
69378: END
// every 0 0$1 trigger StreamModeActive and sSun do
69379: LD_EXP 45
69383: PUSH
69384: LD_EXP 68
69388: AND
69389: IFFALSE 69417
69391: GO 69393
69393: DISABLE
// begin solar_recharge_percent := 0 ;
69394: LD_ADDR_OWVAR 79
69398: PUSH
69399: LD_INT 0
69401: ST_TO_ADDR
// wait ( 5 5$00 ) ;
69402: LD_INT 10500
69404: PPUSH
69405: CALL_OW 67
// solar_recharge_percent := 100 ;
69409: LD_ADDR_OWVAR 79
69413: PUSH
69414: LD_INT 100
69416: ST_TO_ADDR
// end ;
69417: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
69418: LD_EXP 45
69422: PUSH
69423: LD_EXP 69
69427: AND
69428: IFFALSE 69667
69430: GO 69432
69432: DISABLE
69433: LD_INT 0
69435: PPUSH
69436: PPUSH
69437: PPUSH
// begin tmp := [ ] ;
69438: LD_ADDR_VAR 0 3
69442: PUSH
69443: EMPTY
69444: ST_TO_ADDR
// for i := 1 to 6 do
69445: LD_ADDR_VAR 0 1
69449: PUSH
69450: DOUBLE
69451: LD_INT 1
69453: DEC
69454: ST_TO_ADDR
69455: LD_INT 6
69457: PUSH
69458: FOR_TO
69459: IFFALSE 69564
// begin uc_nation := nation_nature ;
69461: LD_ADDR_OWVAR 21
69465: PUSH
69466: LD_INT 0
69468: ST_TO_ADDR
// uc_side := 0 ;
69469: LD_ADDR_OWVAR 20
69473: PUSH
69474: LD_INT 0
69476: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
69477: LD_ADDR_OWVAR 29
69481: PUSH
69482: LD_INT 12
69484: PUSH
69485: LD_INT 12
69487: PUSH
69488: EMPTY
69489: LIST
69490: LIST
69491: ST_TO_ADDR
// hc_agressivity := 20 ;
69492: LD_ADDR_OWVAR 35
69496: PUSH
69497: LD_INT 20
69499: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
69500: LD_ADDR_OWVAR 28
69504: PUSH
69505: LD_INT 17
69507: ST_TO_ADDR
// hc_gallery :=  ;
69508: LD_ADDR_OWVAR 33
69512: PUSH
69513: LD_STRING 
69515: ST_TO_ADDR
// hc_name :=  ;
69516: LD_ADDR_OWVAR 26
69520: PUSH
69521: LD_STRING 
69523: ST_TO_ADDR
// un := CreateHuman ;
69524: LD_ADDR_VAR 0 2
69528: PUSH
69529: CALL_OW 44
69533: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
69534: LD_VAR 0 2
69538: PPUSH
69539: LD_INT 1
69541: PPUSH
69542: CALL_OW 51
// tmp := tmp ^ un ;
69546: LD_ADDR_VAR 0 3
69550: PUSH
69551: LD_VAR 0 3
69555: PUSH
69556: LD_VAR 0 2
69560: ADD
69561: ST_TO_ADDR
// end ;
69562: GO 69458
69564: POP
69565: POP
// repeat wait ( 0 0$1 ) ;
69566: LD_INT 35
69568: PPUSH
69569: CALL_OW 67
// for un in tmp do
69573: LD_ADDR_VAR 0 2
69577: PUSH
69578: LD_VAR 0 3
69582: PUSH
69583: FOR_IN
69584: IFFALSE 69658
// begin if IsDead ( un ) then
69586: LD_VAR 0 2
69590: PPUSH
69591: CALL_OW 301
69595: IFFALSE 69615
// begin tmp := tmp diff un ;
69597: LD_ADDR_VAR 0 3
69601: PUSH
69602: LD_VAR 0 3
69606: PUSH
69607: LD_VAR 0 2
69611: DIFF
69612: ST_TO_ADDR
// continue ;
69613: GO 69583
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
69615: LD_VAR 0 2
69619: PPUSH
69620: LD_INT 3
69622: PUSH
69623: LD_INT 22
69625: PUSH
69626: LD_INT 0
69628: PUSH
69629: EMPTY
69630: LIST
69631: LIST
69632: PUSH
69633: EMPTY
69634: LIST
69635: LIST
69636: PPUSH
69637: CALL_OW 69
69641: PPUSH
69642: LD_VAR 0 2
69646: PPUSH
69647: CALL_OW 74
69651: PPUSH
69652: CALL_OW 115
// end ;
69656: GO 69583
69658: POP
69659: POP
// until not tmp ;
69660: LD_VAR 0 3
69664: NOT
69665: IFFALSE 69566
// end ;
69667: PPOPN 3
69669: END
// every 0 0$1 trigger StreamModeActive and sTroll do
69670: LD_EXP 45
69674: PUSH
69675: LD_EXP 70
69679: AND
69680: IFFALSE 69734
69682: GO 69684
69684: DISABLE
// begin ToLua ( displayTroll(); ) ;
69685: LD_STRING displayTroll();
69687: PPUSH
69688: CALL_OW 559
// wait ( 3 3$00 ) ;
69692: LD_INT 6300
69694: PPUSH
69695: CALL_OW 67
// ToLua ( hideTroll(); ) ;
69699: LD_STRING hideTroll();
69701: PPUSH
69702: CALL_OW 559
// wait ( 1 1$00 ) ;
69706: LD_INT 2100
69708: PPUSH
69709: CALL_OW 67
// ToLua ( displayTroll(); ) ;
69713: LD_STRING displayTroll();
69715: PPUSH
69716: CALL_OW 559
// wait ( 1 1$00 ) ;
69720: LD_INT 2100
69722: PPUSH
69723: CALL_OW 67
// ToLua ( hideTroll(); ) ;
69727: LD_STRING hideTroll();
69729: PPUSH
69730: CALL_OW 559
// end ;
69734: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
69735: LD_EXP 45
69739: PUSH
69740: LD_EXP 71
69744: AND
69745: IFFALSE 69808
69747: GO 69749
69749: DISABLE
69750: LD_INT 0
69752: PPUSH
// begin p := 0 ;
69753: LD_ADDR_VAR 0 1
69757: PUSH
69758: LD_INT 0
69760: ST_TO_ADDR
// repeat game_speed := 1 ;
69761: LD_ADDR_OWVAR 65
69765: PUSH
69766: LD_INT 1
69768: ST_TO_ADDR
// wait ( 0 0$1 ) ;
69769: LD_INT 35
69771: PPUSH
69772: CALL_OW 67
// p := p + 1 ;
69776: LD_ADDR_VAR 0 1
69780: PUSH
69781: LD_VAR 0 1
69785: PUSH
69786: LD_INT 1
69788: PLUS
69789: ST_TO_ADDR
// until p >= 60 ;
69790: LD_VAR 0 1
69794: PUSH
69795: LD_INT 60
69797: GREATEREQUAL
69798: IFFALSE 69761
// game_speed := 4 ;
69800: LD_ADDR_OWVAR 65
69804: PUSH
69805: LD_INT 4
69807: ST_TO_ADDR
// end ;
69808: PPOPN 1
69810: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
69811: LD_EXP 45
69815: PUSH
69816: LD_EXP 72
69820: AND
69821: IFFALSE 69967
69823: GO 69825
69825: DISABLE
69826: LD_INT 0
69828: PPUSH
69829: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
69830: LD_ADDR_VAR 0 1
69834: PUSH
69835: LD_INT 22
69837: PUSH
69838: LD_OWVAR 2
69842: PUSH
69843: EMPTY
69844: LIST
69845: LIST
69846: PUSH
69847: LD_INT 2
69849: PUSH
69850: LD_INT 30
69852: PUSH
69853: LD_INT 0
69855: PUSH
69856: EMPTY
69857: LIST
69858: LIST
69859: PUSH
69860: LD_INT 30
69862: PUSH
69863: LD_INT 1
69865: PUSH
69866: EMPTY
69867: LIST
69868: LIST
69869: PUSH
69870: EMPTY
69871: LIST
69872: LIST
69873: LIST
69874: PUSH
69875: EMPTY
69876: LIST
69877: LIST
69878: PPUSH
69879: CALL_OW 69
69883: ST_TO_ADDR
// if not depot then
69884: LD_VAR 0 1
69888: NOT
69889: IFFALSE 69893
// exit ;
69891: GO 69967
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
69893: LD_ADDR_VAR 0 2
69897: PUSH
69898: LD_VAR 0 1
69902: PUSH
69903: LD_INT 1
69905: PPUSH
69906: LD_VAR 0 1
69910: PPUSH
69911: CALL_OW 12
69915: ARRAY
69916: PPUSH
69917: CALL_OW 274
69921: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
69922: LD_VAR 0 2
69926: PPUSH
69927: LD_INT 1
69929: PPUSH
69930: LD_INT 0
69932: PPUSH
69933: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
69937: LD_VAR 0 2
69941: PPUSH
69942: LD_INT 2
69944: PPUSH
69945: LD_INT 0
69947: PPUSH
69948: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
69952: LD_VAR 0 2
69956: PPUSH
69957: LD_INT 3
69959: PPUSH
69960: LD_INT 0
69962: PPUSH
69963: CALL_OW 277
// end ;
69967: PPOPN 2
69969: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
69970: LD_EXP 45
69974: PUSH
69975: LD_EXP 73
69979: AND
69980: IFFALSE 70077
69982: GO 69984
69984: DISABLE
69985: LD_INT 0
69987: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
69988: LD_ADDR_VAR 0 1
69992: PUSH
69993: LD_INT 22
69995: PUSH
69996: LD_OWVAR 2
70000: PUSH
70001: EMPTY
70002: LIST
70003: LIST
70004: PUSH
70005: LD_INT 21
70007: PUSH
70008: LD_INT 1
70010: PUSH
70011: EMPTY
70012: LIST
70013: LIST
70014: PUSH
70015: LD_INT 3
70017: PUSH
70018: LD_INT 23
70020: PUSH
70021: LD_INT 0
70023: PUSH
70024: EMPTY
70025: LIST
70026: LIST
70027: PUSH
70028: EMPTY
70029: LIST
70030: LIST
70031: PUSH
70032: EMPTY
70033: LIST
70034: LIST
70035: LIST
70036: PPUSH
70037: CALL_OW 69
70041: ST_TO_ADDR
// if not tmp then
70042: LD_VAR 0 1
70046: NOT
70047: IFFALSE 70051
// exit ;
70049: GO 70077
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
70051: LD_VAR 0 1
70055: PUSH
70056: LD_INT 1
70058: PPUSH
70059: LD_VAR 0 1
70063: PPUSH
70064: CALL_OW 12
70068: ARRAY
70069: PPUSH
70070: LD_INT 200
70072: PPUSH
70073: CALL_OW 234
// end ;
70077: PPOPN 1
70079: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
70080: LD_EXP 45
70084: PUSH
70085: LD_EXP 74
70089: AND
70090: IFFALSE 70169
70092: GO 70094
70094: DISABLE
70095: LD_INT 0
70097: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
70098: LD_ADDR_VAR 0 1
70102: PUSH
70103: LD_INT 22
70105: PUSH
70106: LD_OWVAR 2
70110: PUSH
70111: EMPTY
70112: LIST
70113: LIST
70114: PUSH
70115: LD_INT 21
70117: PUSH
70118: LD_INT 2
70120: PUSH
70121: EMPTY
70122: LIST
70123: LIST
70124: PUSH
70125: EMPTY
70126: LIST
70127: LIST
70128: PPUSH
70129: CALL_OW 69
70133: ST_TO_ADDR
// if not tmp then
70134: LD_VAR 0 1
70138: NOT
70139: IFFALSE 70143
// exit ;
70141: GO 70169
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
70143: LD_VAR 0 1
70147: PUSH
70148: LD_INT 1
70150: PPUSH
70151: LD_VAR 0 1
70155: PPUSH
70156: CALL_OW 12
70160: ARRAY
70161: PPUSH
70162: LD_INT 60
70164: PPUSH
70165: CALL_OW 234
// end ;
70169: PPOPN 1
70171: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
70172: LD_EXP 45
70176: PUSH
70177: LD_EXP 75
70181: AND
70182: IFFALSE 70281
70184: GO 70186
70186: DISABLE
70187: LD_INT 0
70189: PPUSH
70190: PPUSH
// begin enable ;
70191: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
70192: LD_ADDR_VAR 0 1
70196: PUSH
70197: LD_INT 22
70199: PUSH
70200: LD_OWVAR 2
70204: PUSH
70205: EMPTY
70206: LIST
70207: LIST
70208: PUSH
70209: LD_INT 61
70211: PUSH
70212: EMPTY
70213: LIST
70214: PUSH
70215: LD_INT 33
70217: PUSH
70218: LD_INT 2
70220: PUSH
70221: EMPTY
70222: LIST
70223: LIST
70224: PUSH
70225: EMPTY
70226: LIST
70227: LIST
70228: LIST
70229: PPUSH
70230: CALL_OW 69
70234: ST_TO_ADDR
// if not tmp then
70235: LD_VAR 0 1
70239: NOT
70240: IFFALSE 70244
// exit ;
70242: GO 70281
// for i in tmp do
70244: LD_ADDR_VAR 0 2
70248: PUSH
70249: LD_VAR 0 1
70253: PUSH
70254: FOR_IN
70255: IFFALSE 70279
// if IsControledBy ( i ) then
70257: LD_VAR 0 2
70261: PPUSH
70262: CALL_OW 312
70266: IFFALSE 70277
// ComUnlink ( i ) ;
70268: LD_VAR 0 2
70272: PPUSH
70273: CALL_OW 136
70277: GO 70254
70279: POP
70280: POP
// end ;
70281: PPOPN 2
70283: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
70284: LD_EXP 45
70288: PUSH
70289: LD_EXP 76
70293: AND
70294: IFFALSE 70434
70296: GO 70298
70298: DISABLE
70299: LD_INT 0
70301: PPUSH
70302: PPUSH
// begin ToLua ( displayPowell(); ) ;
70303: LD_STRING displayPowell();
70305: PPUSH
70306: CALL_OW 559
// uc_side := 0 ;
70310: LD_ADDR_OWVAR 20
70314: PUSH
70315: LD_INT 0
70317: ST_TO_ADDR
// uc_nation := 2 ;
70318: LD_ADDR_OWVAR 21
70322: PUSH
70323: LD_INT 2
70325: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
70326: LD_ADDR_OWVAR 37
70330: PUSH
70331: LD_INT 14
70333: ST_TO_ADDR
// vc_engine := engine_siberite ;
70334: LD_ADDR_OWVAR 39
70338: PUSH
70339: LD_INT 3
70341: ST_TO_ADDR
// vc_control := control_apeman ;
70342: LD_ADDR_OWVAR 38
70346: PUSH
70347: LD_INT 5
70349: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
70350: LD_ADDR_OWVAR 40
70354: PUSH
70355: LD_INT 29
70357: ST_TO_ADDR
// un := CreateVehicle ;
70358: LD_ADDR_VAR 0 2
70362: PUSH
70363: CALL_OW 45
70367: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
70368: LD_VAR 0 2
70372: PPUSH
70373: LD_INT 1
70375: PPUSH
70376: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
70380: LD_INT 35
70382: PPUSH
70383: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
70387: LD_VAR 0 2
70391: PPUSH
70392: LD_INT 22
70394: PUSH
70395: LD_OWVAR 2
70399: PUSH
70400: EMPTY
70401: LIST
70402: LIST
70403: PPUSH
70404: CALL_OW 69
70408: PPUSH
70409: LD_VAR 0 2
70413: PPUSH
70414: CALL_OW 74
70418: PPUSH
70419: CALL_OW 115
// until IsDead ( un ) ;
70423: LD_VAR 0 2
70427: PPUSH
70428: CALL_OW 301
70432: IFFALSE 70380
// end ;
70434: PPOPN 2
70436: END
// every 0 0$1 trigger StreamModeActive and sStu do
70437: LD_EXP 45
70441: PUSH
70442: LD_EXP 84
70446: AND
70447: IFFALSE 70463
70449: GO 70451
70451: DISABLE
// begin ToLua ( displayStucuk(); ) ;
70452: LD_STRING displayStucuk();
70454: PPUSH
70455: CALL_OW 559
// ResetFog ;
70459: CALL_OW 335
// end ;
70463: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
70464: LD_EXP 45
70468: PUSH
70469: LD_EXP 77
70473: AND
70474: IFFALSE 70615
70476: GO 70478
70478: DISABLE
70479: LD_INT 0
70481: PPUSH
70482: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
70483: LD_ADDR_VAR 0 2
70487: PUSH
70488: LD_INT 22
70490: PUSH
70491: LD_OWVAR 2
70495: PUSH
70496: EMPTY
70497: LIST
70498: LIST
70499: PUSH
70500: LD_INT 21
70502: PUSH
70503: LD_INT 1
70505: PUSH
70506: EMPTY
70507: LIST
70508: LIST
70509: PUSH
70510: EMPTY
70511: LIST
70512: LIST
70513: PPUSH
70514: CALL_OW 69
70518: ST_TO_ADDR
// if not tmp then
70519: LD_VAR 0 2
70523: NOT
70524: IFFALSE 70528
// exit ;
70526: GO 70615
// un := tmp [ rand ( 1 , tmp ) ] ;
70528: LD_ADDR_VAR 0 1
70532: PUSH
70533: LD_VAR 0 2
70537: PUSH
70538: LD_INT 1
70540: PPUSH
70541: LD_VAR 0 2
70545: PPUSH
70546: CALL_OW 12
70550: ARRAY
70551: ST_TO_ADDR
// SetSide ( un , 0 ) ;
70552: LD_VAR 0 1
70556: PPUSH
70557: LD_INT 0
70559: PPUSH
70560: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
70564: LD_VAR 0 1
70568: PPUSH
70569: LD_OWVAR 3
70573: PUSH
70574: LD_VAR 0 1
70578: DIFF
70579: PPUSH
70580: LD_VAR 0 1
70584: PPUSH
70585: CALL_OW 74
70589: PPUSH
70590: CALL_OW 115
// wait ( 0 0$20 ) ;
70594: LD_INT 700
70596: PPUSH
70597: CALL_OW 67
// SetSide ( un , your_side ) ;
70601: LD_VAR 0 1
70605: PPUSH
70606: LD_OWVAR 2
70610: PPUSH
70611: CALL_OW 235
// end ;
70615: PPOPN 2
70617: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
70618: LD_EXP 45
70622: PUSH
70623: LD_EXP 78
70627: AND
70628: IFFALSE 70734
70630: GO 70632
70632: DISABLE
70633: LD_INT 0
70635: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
70636: LD_ADDR_VAR 0 1
70640: PUSH
70641: LD_INT 22
70643: PUSH
70644: LD_OWVAR 2
70648: PUSH
70649: EMPTY
70650: LIST
70651: LIST
70652: PUSH
70653: LD_INT 2
70655: PUSH
70656: LD_INT 30
70658: PUSH
70659: LD_INT 0
70661: PUSH
70662: EMPTY
70663: LIST
70664: LIST
70665: PUSH
70666: LD_INT 30
70668: PUSH
70669: LD_INT 1
70671: PUSH
70672: EMPTY
70673: LIST
70674: LIST
70675: PUSH
70676: EMPTY
70677: LIST
70678: LIST
70679: LIST
70680: PUSH
70681: EMPTY
70682: LIST
70683: LIST
70684: PPUSH
70685: CALL_OW 69
70689: ST_TO_ADDR
// if not depot then
70690: LD_VAR 0 1
70694: NOT
70695: IFFALSE 70699
// exit ;
70697: GO 70734
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
70699: LD_VAR 0 1
70703: PUSH
70704: LD_INT 1
70706: ARRAY
70707: PPUSH
70708: CALL_OW 250
70712: PPUSH
70713: LD_VAR 0 1
70717: PUSH
70718: LD_INT 1
70720: ARRAY
70721: PPUSH
70722: CALL_OW 251
70726: PPUSH
70727: LD_INT 70
70729: PPUSH
70730: CALL_OW 495
// end ;
70734: PPOPN 1
70736: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
70737: LD_EXP 45
70741: PUSH
70742: LD_EXP 79
70746: AND
70747: IFFALSE 70958
70749: GO 70751
70751: DISABLE
70752: LD_INT 0
70754: PPUSH
70755: PPUSH
70756: PPUSH
70757: PPUSH
70758: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
70759: LD_ADDR_VAR 0 5
70763: PUSH
70764: LD_INT 22
70766: PUSH
70767: LD_OWVAR 2
70771: PUSH
70772: EMPTY
70773: LIST
70774: LIST
70775: PUSH
70776: LD_INT 21
70778: PUSH
70779: LD_INT 1
70781: PUSH
70782: EMPTY
70783: LIST
70784: LIST
70785: PUSH
70786: EMPTY
70787: LIST
70788: LIST
70789: PPUSH
70790: CALL_OW 69
70794: ST_TO_ADDR
// if not tmp then
70795: LD_VAR 0 5
70799: NOT
70800: IFFALSE 70804
// exit ;
70802: GO 70958
// for i in tmp do
70804: LD_ADDR_VAR 0 1
70808: PUSH
70809: LD_VAR 0 5
70813: PUSH
70814: FOR_IN
70815: IFFALSE 70956
// begin d := rand ( 0 , 5 ) ;
70817: LD_ADDR_VAR 0 4
70821: PUSH
70822: LD_INT 0
70824: PPUSH
70825: LD_INT 5
70827: PPUSH
70828: CALL_OW 12
70832: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
70833: LD_ADDR_VAR 0 2
70837: PUSH
70838: LD_VAR 0 1
70842: PPUSH
70843: CALL_OW 250
70847: PPUSH
70848: LD_VAR 0 4
70852: PPUSH
70853: LD_INT 3
70855: PPUSH
70856: LD_INT 12
70858: PPUSH
70859: CALL_OW 12
70863: PPUSH
70864: CALL_OW 272
70868: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
70869: LD_ADDR_VAR 0 3
70873: PUSH
70874: LD_VAR 0 1
70878: PPUSH
70879: CALL_OW 251
70883: PPUSH
70884: LD_VAR 0 4
70888: PPUSH
70889: LD_INT 3
70891: PPUSH
70892: LD_INT 12
70894: PPUSH
70895: CALL_OW 12
70899: PPUSH
70900: CALL_OW 273
70904: ST_TO_ADDR
// if ValidHex ( x , y ) then
70905: LD_VAR 0 2
70909: PPUSH
70910: LD_VAR 0 3
70914: PPUSH
70915: CALL_OW 488
70919: IFFALSE 70954
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
70921: LD_VAR 0 1
70925: PPUSH
70926: LD_VAR 0 2
70930: PPUSH
70931: LD_VAR 0 3
70935: PPUSH
70936: LD_INT 3
70938: PPUSH
70939: LD_INT 6
70941: PPUSH
70942: CALL_OW 12
70946: PPUSH
70947: LD_INT 1
70949: PPUSH
70950: CALL_OW 483
// end ;
70954: GO 70814
70956: POP
70957: POP
// end ;
70958: PPOPN 5
70960: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
70961: LD_EXP 45
70965: PUSH
70966: LD_EXP 80
70970: AND
70971: IFFALSE 71065
70973: GO 70975
70975: DISABLE
70976: LD_INT 0
70978: PPUSH
70979: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
70980: LD_ADDR_VAR 0 2
70984: PUSH
70985: LD_INT 22
70987: PUSH
70988: LD_OWVAR 2
70992: PUSH
70993: EMPTY
70994: LIST
70995: LIST
70996: PUSH
70997: LD_INT 32
70999: PUSH
71000: LD_INT 1
71002: PUSH
71003: EMPTY
71004: LIST
71005: LIST
71006: PUSH
71007: LD_INT 21
71009: PUSH
71010: LD_INT 2
71012: PUSH
71013: EMPTY
71014: LIST
71015: LIST
71016: PUSH
71017: EMPTY
71018: LIST
71019: LIST
71020: LIST
71021: PPUSH
71022: CALL_OW 69
71026: ST_TO_ADDR
// if not tmp then
71027: LD_VAR 0 2
71031: NOT
71032: IFFALSE 71036
// exit ;
71034: GO 71065
// for i in tmp do
71036: LD_ADDR_VAR 0 1
71040: PUSH
71041: LD_VAR 0 2
71045: PUSH
71046: FOR_IN
71047: IFFALSE 71063
// SetFuel ( i , 0 ) ;
71049: LD_VAR 0 1
71053: PPUSH
71054: LD_INT 0
71056: PPUSH
71057: CALL_OW 240
71061: GO 71046
71063: POP
71064: POP
// end ;
71065: PPOPN 2
71067: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
71068: LD_EXP 45
71072: PUSH
71073: LD_EXP 81
71077: AND
71078: IFFALSE 71144
71080: GO 71082
71082: DISABLE
71083: LD_INT 0
71085: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
71086: LD_ADDR_VAR 0 1
71090: PUSH
71091: LD_INT 22
71093: PUSH
71094: LD_OWVAR 2
71098: PUSH
71099: EMPTY
71100: LIST
71101: LIST
71102: PUSH
71103: LD_INT 30
71105: PUSH
71106: LD_INT 29
71108: PUSH
71109: EMPTY
71110: LIST
71111: LIST
71112: PUSH
71113: EMPTY
71114: LIST
71115: LIST
71116: PPUSH
71117: CALL_OW 69
71121: ST_TO_ADDR
// if not tmp then
71122: LD_VAR 0 1
71126: NOT
71127: IFFALSE 71131
// exit ;
71129: GO 71144
// DestroyUnit ( tmp [ 1 ] ) ;
71131: LD_VAR 0 1
71135: PUSH
71136: LD_INT 1
71138: ARRAY
71139: PPUSH
71140: CALL_OW 65
// end ;
71144: PPOPN 1
71146: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
71147: LD_EXP 45
71151: PUSH
71152: LD_EXP 83
71156: AND
71157: IFFALSE 71286
71159: GO 71161
71161: DISABLE
71162: LD_INT 0
71164: PPUSH
// begin uc_side := 0 ;
71165: LD_ADDR_OWVAR 20
71169: PUSH
71170: LD_INT 0
71172: ST_TO_ADDR
// uc_nation := nation_arabian ;
71173: LD_ADDR_OWVAR 21
71177: PUSH
71178: LD_INT 2
71180: ST_TO_ADDR
// hc_gallery :=  ;
71181: LD_ADDR_OWVAR 33
71185: PUSH
71186: LD_STRING 
71188: ST_TO_ADDR
// hc_name :=  ;
71189: LD_ADDR_OWVAR 26
71193: PUSH
71194: LD_STRING 
71196: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
71197: LD_INT 1
71199: PPUSH
71200: LD_INT 11
71202: PPUSH
71203: LD_INT 10
71205: PPUSH
71206: CALL_OW 380
// un := CreateHuman ;
71210: LD_ADDR_VAR 0 1
71214: PUSH
71215: CALL_OW 44
71219: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
71220: LD_VAR 0 1
71224: PPUSH
71225: LD_INT 1
71227: PPUSH
71228: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
71232: LD_INT 35
71234: PPUSH
71235: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
71239: LD_VAR 0 1
71243: PPUSH
71244: LD_INT 22
71246: PUSH
71247: LD_OWVAR 2
71251: PUSH
71252: EMPTY
71253: LIST
71254: LIST
71255: PPUSH
71256: CALL_OW 69
71260: PPUSH
71261: LD_VAR 0 1
71265: PPUSH
71266: CALL_OW 74
71270: PPUSH
71271: CALL_OW 115
// until IsDead ( un ) ;
71275: LD_VAR 0 1
71279: PPUSH
71280: CALL_OW 301
71284: IFFALSE 71232
// end ;
71286: PPOPN 1
71288: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
71289: LD_EXP 45
71293: PUSH
71294: LD_EXP 85
71298: AND
71299: IFFALSE 71311
71301: GO 71303
71303: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
71304: LD_STRING earthquake(getX(game), 0, 32)
71306: PPUSH
71307: CALL_OW 559
71311: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
71312: LD_EXP 45
71316: PUSH
71317: LD_EXP 86
71321: AND
71322: IFFALSE 71413
71324: GO 71326
71326: DISABLE
71327: LD_INT 0
71329: PPUSH
// begin enable ;
71330: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
71331: LD_ADDR_VAR 0 1
71335: PUSH
71336: LD_INT 22
71338: PUSH
71339: LD_OWVAR 2
71343: PUSH
71344: EMPTY
71345: LIST
71346: LIST
71347: PUSH
71348: LD_INT 21
71350: PUSH
71351: LD_INT 2
71353: PUSH
71354: EMPTY
71355: LIST
71356: LIST
71357: PUSH
71358: LD_INT 33
71360: PUSH
71361: LD_INT 3
71363: PUSH
71364: EMPTY
71365: LIST
71366: LIST
71367: PUSH
71368: EMPTY
71369: LIST
71370: LIST
71371: LIST
71372: PPUSH
71373: CALL_OW 69
71377: ST_TO_ADDR
// if not tmp then
71378: LD_VAR 0 1
71382: NOT
71383: IFFALSE 71387
// exit ;
71385: GO 71413
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
71387: LD_VAR 0 1
71391: PUSH
71392: LD_INT 1
71394: PPUSH
71395: LD_VAR 0 1
71399: PPUSH
71400: CALL_OW 12
71404: ARRAY
71405: PPUSH
71406: LD_INT 1
71408: PPUSH
71409: CALL_OW 234
// end ;
71413: PPOPN 1
71415: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
71416: LD_EXP 45
71420: PUSH
71421: LD_EXP 87
71425: AND
71426: IFFALSE 71567
71428: GO 71430
71430: DISABLE
71431: LD_INT 0
71433: PPUSH
71434: PPUSH
71435: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71436: LD_ADDR_VAR 0 3
71440: PUSH
71441: LD_INT 22
71443: PUSH
71444: LD_OWVAR 2
71448: PUSH
71449: EMPTY
71450: LIST
71451: LIST
71452: PUSH
71453: LD_INT 25
71455: PUSH
71456: LD_INT 1
71458: PUSH
71459: EMPTY
71460: LIST
71461: LIST
71462: PUSH
71463: EMPTY
71464: LIST
71465: LIST
71466: PPUSH
71467: CALL_OW 69
71471: ST_TO_ADDR
// if not tmp then
71472: LD_VAR 0 3
71476: NOT
71477: IFFALSE 71481
// exit ;
71479: GO 71567
// un := tmp [ rand ( 1 , tmp ) ] ;
71481: LD_ADDR_VAR 0 2
71485: PUSH
71486: LD_VAR 0 3
71490: PUSH
71491: LD_INT 1
71493: PPUSH
71494: LD_VAR 0 3
71498: PPUSH
71499: CALL_OW 12
71503: ARRAY
71504: ST_TO_ADDR
// if Crawls ( un ) then
71505: LD_VAR 0 2
71509: PPUSH
71510: CALL_OW 318
71514: IFFALSE 71525
// ComWalk ( un ) ;
71516: LD_VAR 0 2
71520: PPUSH
71521: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
71525: LD_VAR 0 2
71529: PPUSH
71530: LD_INT 9
71532: PPUSH
71533: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
71537: LD_INT 28
71539: PPUSH
71540: LD_OWVAR 2
71544: PPUSH
71545: LD_INT 2
71547: PPUSH
71548: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
71552: LD_INT 29
71554: PPUSH
71555: LD_OWVAR 2
71559: PPUSH
71560: LD_INT 2
71562: PPUSH
71563: CALL_OW 322
// end ;
71567: PPOPN 3
71569: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
71570: LD_EXP 45
71574: PUSH
71575: LD_EXP 88
71579: AND
71580: IFFALSE 71691
71582: GO 71584
71584: DISABLE
71585: LD_INT 0
71587: PPUSH
71588: PPUSH
71589: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71590: LD_ADDR_VAR 0 3
71594: PUSH
71595: LD_INT 22
71597: PUSH
71598: LD_OWVAR 2
71602: PUSH
71603: EMPTY
71604: LIST
71605: LIST
71606: PUSH
71607: LD_INT 25
71609: PUSH
71610: LD_INT 1
71612: PUSH
71613: EMPTY
71614: LIST
71615: LIST
71616: PUSH
71617: EMPTY
71618: LIST
71619: LIST
71620: PPUSH
71621: CALL_OW 69
71625: ST_TO_ADDR
// if not tmp then
71626: LD_VAR 0 3
71630: NOT
71631: IFFALSE 71635
// exit ;
71633: GO 71691
// un := tmp [ rand ( 1 , tmp ) ] ;
71635: LD_ADDR_VAR 0 2
71639: PUSH
71640: LD_VAR 0 3
71644: PUSH
71645: LD_INT 1
71647: PPUSH
71648: LD_VAR 0 3
71652: PPUSH
71653: CALL_OW 12
71657: ARRAY
71658: ST_TO_ADDR
// if Crawls ( un ) then
71659: LD_VAR 0 2
71663: PPUSH
71664: CALL_OW 318
71668: IFFALSE 71679
// ComWalk ( un ) ;
71670: LD_VAR 0 2
71674: PPUSH
71675: CALL_OW 138
// SetClass ( un , class_mortar ) ;
71679: LD_VAR 0 2
71683: PPUSH
71684: LD_INT 8
71686: PPUSH
71687: CALL_OW 336
// end ;
71691: PPOPN 3
71693: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
71694: LD_EXP 45
71698: PUSH
71699: LD_EXP 89
71703: AND
71704: IFFALSE 71848
71706: GO 71708
71708: DISABLE
71709: LD_INT 0
71711: PPUSH
71712: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
71713: LD_ADDR_VAR 0 2
71717: PUSH
71718: LD_INT 22
71720: PUSH
71721: LD_OWVAR 2
71725: PUSH
71726: EMPTY
71727: LIST
71728: LIST
71729: PUSH
71730: LD_INT 21
71732: PUSH
71733: LD_INT 2
71735: PUSH
71736: EMPTY
71737: LIST
71738: LIST
71739: PUSH
71740: LD_INT 2
71742: PUSH
71743: LD_INT 34
71745: PUSH
71746: LD_INT 12
71748: PUSH
71749: EMPTY
71750: LIST
71751: LIST
71752: PUSH
71753: LD_INT 34
71755: PUSH
71756: LD_INT 51
71758: PUSH
71759: EMPTY
71760: LIST
71761: LIST
71762: PUSH
71763: LD_INT 34
71765: PUSH
71766: LD_INT 32
71768: PUSH
71769: EMPTY
71770: LIST
71771: LIST
71772: PUSH
71773: EMPTY
71774: LIST
71775: LIST
71776: LIST
71777: LIST
71778: PUSH
71779: EMPTY
71780: LIST
71781: LIST
71782: LIST
71783: PPUSH
71784: CALL_OW 69
71788: ST_TO_ADDR
// if not tmp then
71789: LD_VAR 0 2
71793: NOT
71794: IFFALSE 71798
// exit ;
71796: GO 71848
// for i in tmp do
71798: LD_ADDR_VAR 0 1
71802: PUSH
71803: LD_VAR 0 2
71807: PUSH
71808: FOR_IN
71809: IFFALSE 71846
// if GetCargo ( i , mat_artifact ) = 0 then
71811: LD_VAR 0 1
71815: PPUSH
71816: LD_INT 4
71818: PPUSH
71819: CALL_OW 289
71823: PUSH
71824: LD_INT 0
71826: EQUAL
71827: IFFALSE 71844
// SetCargo ( i , mat_siberit , 100 ) ;
71829: LD_VAR 0 1
71833: PPUSH
71834: LD_INT 3
71836: PPUSH
71837: LD_INT 100
71839: PPUSH
71840: CALL_OW 290
71844: GO 71808
71846: POP
71847: POP
// end ;
71848: PPOPN 2
71850: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
71851: LD_EXP 45
71855: PUSH
71856: LD_EXP 90
71860: AND
71861: IFFALSE 72044
71863: GO 71865
71865: DISABLE
71866: LD_INT 0
71868: PPUSH
71869: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
71870: LD_ADDR_VAR 0 2
71874: PUSH
71875: LD_INT 22
71877: PUSH
71878: LD_OWVAR 2
71882: PUSH
71883: EMPTY
71884: LIST
71885: LIST
71886: PPUSH
71887: CALL_OW 69
71891: ST_TO_ADDR
// if not tmp then
71892: LD_VAR 0 2
71896: NOT
71897: IFFALSE 71901
// exit ;
71899: GO 72044
// for i := 1 to 2 do
71901: LD_ADDR_VAR 0 1
71905: PUSH
71906: DOUBLE
71907: LD_INT 1
71909: DEC
71910: ST_TO_ADDR
71911: LD_INT 2
71913: PUSH
71914: FOR_TO
71915: IFFALSE 72042
// begin uc_side := your_side ;
71917: LD_ADDR_OWVAR 20
71921: PUSH
71922: LD_OWVAR 2
71926: ST_TO_ADDR
// uc_nation := nation_american ;
71927: LD_ADDR_OWVAR 21
71931: PUSH
71932: LD_INT 1
71934: ST_TO_ADDR
// vc_chassis := us_morphling ;
71935: LD_ADDR_OWVAR 37
71939: PUSH
71940: LD_INT 5
71942: ST_TO_ADDR
// vc_engine := engine_siberite ;
71943: LD_ADDR_OWVAR 39
71947: PUSH
71948: LD_INT 3
71950: ST_TO_ADDR
// vc_control := control_computer ;
71951: LD_ADDR_OWVAR 38
71955: PUSH
71956: LD_INT 3
71958: ST_TO_ADDR
// vc_weapon := us_double_laser ;
71959: LD_ADDR_OWVAR 40
71963: PUSH
71964: LD_INT 10
71966: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
71967: LD_VAR 0 2
71971: PUSH
71972: LD_INT 1
71974: ARRAY
71975: PPUSH
71976: CALL_OW 310
71980: NOT
71981: IFFALSE 72028
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
71983: CALL_OW 45
71987: PPUSH
71988: LD_VAR 0 2
71992: PUSH
71993: LD_INT 1
71995: ARRAY
71996: PPUSH
71997: CALL_OW 250
72001: PPUSH
72002: LD_VAR 0 2
72006: PUSH
72007: LD_INT 1
72009: ARRAY
72010: PPUSH
72011: CALL_OW 251
72015: PPUSH
72016: LD_INT 12
72018: PPUSH
72019: LD_INT 1
72021: PPUSH
72022: CALL_OW 50
72026: GO 72040
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
72028: CALL_OW 45
72032: PPUSH
72033: LD_INT 1
72035: PPUSH
72036: CALL_OW 51
// end ;
72040: GO 71914
72042: POP
72043: POP
// end ;
72044: PPOPN 2
72046: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
72047: LD_EXP 45
72051: PUSH
72052: LD_EXP 91
72056: AND
72057: IFFALSE 72279
72059: GO 72061
72061: DISABLE
72062: LD_INT 0
72064: PPUSH
72065: PPUSH
72066: PPUSH
72067: PPUSH
72068: PPUSH
72069: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
72070: LD_ADDR_VAR 0 6
72074: PUSH
72075: LD_INT 22
72077: PUSH
72078: LD_OWVAR 2
72082: PUSH
72083: EMPTY
72084: LIST
72085: LIST
72086: PUSH
72087: LD_INT 21
72089: PUSH
72090: LD_INT 1
72092: PUSH
72093: EMPTY
72094: LIST
72095: LIST
72096: PUSH
72097: LD_INT 3
72099: PUSH
72100: LD_INT 23
72102: PUSH
72103: LD_INT 0
72105: PUSH
72106: EMPTY
72107: LIST
72108: LIST
72109: PUSH
72110: EMPTY
72111: LIST
72112: LIST
72113: PUSH
72114: EMPTY
72115: LIST
72116: LIST
72117: LIST
72118: PPUSH
72119: CALL_OW 69
72123: ST_TO_ADDR
// if not tmp then
72124: LD_VAR 0 6
72128: NOT
72129: IFFALSE 72133
// exit ;
72131: GO 72279
// s1 := rand ( 1 , 4 ) ;
72133: LD_ADDR_VAR 0 2
72137: PUSH
72138: LD_INT 1
72140: PPUSH
72141: LD_INT 4
72143: PPUSH
72144: CALL_OW 12
72148: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
72149: LD_ADDR_VAR 0 4
72153: PUSH
72154: LD_VAR 0 6
72158: PUSH
72159: LD_INT 1
72161: ARRAY
72162: PPUSH
72163: LD_VAR 0 2
72167: PPUSH
72168: CALL_OW 259
72172: ST_TO_ADDR
// if s1 = 1 then
72173: LD_VAR 0 2
72177: PUSH
72178: LD_INT 1
72180: EQUAL
72181: IFFALSE 72201
// s2 := rand ( 2 , 4 ) else
72183: LD_ADDR_VAR 0 3
72187: PUSH
72188: LD_INT 2
72190: PPUSH
72191: LD_INT 4
72193: PPUSH
72194: CALL_OW 12
72198: ST_TO_ADDR
72199: GO 72209
// s2 := 1 ;
72201: LD_ADDR_VAR 0 3
72205: PUSH
72206: LD_INT 1
72208: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
72209: LD_ADDR_VAR 0 5
72213: PUSH
72214: LD_VAR 0 6
72218: PUSH
72219: LD_INT 1
72221: ARRAY
72222: PPUSH
72223: LD_VAR 0 3
72227: PPUSH
72228: CALL_OW 259
72232: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
72233: LD_VAR 0 6
72237: PUSH
72238: LD_INT 1
72240: ARRAY
72241: PPUSH
72242: LD_VAR 0 2
72246: PPUSH
72247: LD_VAR 0 5
72251: PPUSH
72252: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
72256: LD_VAR 0 6
72260: PUSH
72261: LD_INT 1
72263: ARRAY
72264: PPUSH
72265: LD_VAR 0 3
72269: PPUSH
72270: LD_VAR 0 4
72274: PPUSH
72275: CALL_OW 237
// end ;
72279: PPOPN 6
72281: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
72282: LD_EXP 45
72286: PUSH
72287: LD_EXP 92
72291: AND
72292: IFFALSE 72371
72294: GO 72296
72296: DISABLE
72297: LD_INT 0
72299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
72300: LD_ADDR_VAR 0 1
72304: PUSH
72305: LD_INT 22
72307: PUSH
72308: LD_OWVAR 2
72312: PUSH
72313: EMPTY
72314: LIST
72315: LIST
72316: PUSH
72317: LD_INT 30
72319: PUSH
72320: LD_INT 3
72322: PUSH
72323: EMPTY
72324: LIST
72325: LIST
72326: PUSH
72327: EMPTY
72328: LIST
72329: LIST
72330: PPUSH
72331: CALL_OW 69
72335: ST_TO_ADDR
// if not tmp then
72336: LD_VAR 0 1
72340: NOT
72341: IFFALSE 72345
// exit ;
72343: GO 72371
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
72345: LD_VAR 0 1
72349: PUSH
72350: LD_INT 1
72352: PPUSH
72353: LD_VAR 0 1
72357: PPUSH
72358: CALL_OW 12
72362: ARRAY
72363: PPUSH
72364: LD_INT 1
72366: PPUSH
72367: CALL_OW 234
// end ;
72371: PPOPN 1
72373: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
72374: LD_EXP 45
72378: PUSH
72379: LD_EXP 93
72383: AND
72384: IFFALSE 72496
72386: GO 72388
72388: DISABLE
72389: LD_INT 0
72391: PPUSH
72392: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
72393: LD_ADDR_VAR 0 2
72397: PUSH
72398: LD_INT 22
72400: PUSH
72401: LD_OWVAR 2
72405: PUSH
72406: EMPTY
72407: LIST
72408: LIST
72409: PUSH
72410: LD_INT 2
72412: PUSH
72413: LD_INT 30
72415: PUSH
72416: LD_INT 27
72418: PUSH
72419: EMPTY
72420: LIST
72421: LIST
72422: PUSH
72423: LD_INT 30
72425: PUSH
72426: LD_INT 26
72428: PUSH
72429: EMPTY
72430: LIST
72431: LIST
72432: PUSH
72433: LD_INT 30
72435: PUSH
72436: LD_INT 28
72438: PUSH
72439: EMPTY
72440: LIST
72441: LIST
72442: PUSH
72443: EMPTY
72444: LIST
72445: LIST
72446: LIST
72447: LIST
72448: PUSH
72449: EMPTY
72450: LIST
72451: LIST
72452: PPUSH
72453: CALL_OW 69
72457: ST_TO_ADDR
// if not tmp then
72458: LD_VAR 0 2
72462: NOT
72463: IFFALSE 72467
// exit ;
72465: GO 72496
// for i in tmp do
72467: LD_ADDR_VAR 0 1
72471: PUSH
72472: LD_VAR 0 2
72476: PUSH
72477: FOR_IN
72478: IFFALSE 72494
// SetLives ( i , 1 ) ;
72480: LD_VAR 0 1
72484: PPUSH
72485: LD_INT 1
72487: PPUSH
72488: CALL_OW 234
72492: GO 72477
72494: POP
72495: POP
// end ;
72496: PPOPN 2
72498: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
72499: LD_EXP 45
72503: PUSH
72504: LD_EXP 94
72508: AND
72509: IFFALSE 72796
72511: GO 72513
72513: DISABLE
72514: LD_INT 0
72516: PPUSH
72517: PPUSH
72518: PPUSH
// begin i := rand ( 1 , 7 ) ;
72519: LD_ADDR_VAR 0 1
72523: PUSH
72524: LD_INT 1
72526: PPUSH
72527: LD_INT 7
72529: PPUSH
72530: CALL_OW 12
72534: ST_TO_ADDR
// case i of 1 :
72535: LD_VAR 0 1
72539: PUSH
72540: LD_INT 1
72542: DOUBLE
72543: EQUAL
72544: IFTRUE 72548
72546: GO 72558
72548: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
72549: LD_STRING earthquake(getX(game), 0, 32)
72551: PPUSH
72552: CALL_OW 559
72556: GO 72796
72558: LD_INT 2
72560: DOUBLE
72561: EQUAL
72562: IFTRUE 72566
72564: GO 72580
72566: POP
// begin ToLua ( displayStucuk(); ) ;
72567: LD_STRING displayStucuk();
72569: PPUSH
72570: CALL_OW 559
// ResetFog ;
72574: CALL_OW 335
// end ; 3 :
72578: GO 72796
72580: LD_INT 3
72582: DOUBLE
72583: EQUAL
72584: IFTRUE 72588
72586: GO 72692
72588: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
72589: LD_ADDR_VAR 0 2
72593: PUSH
72594: LD_INT 22
72596: PUSH
72597: LD_OWVAR 2
72601: PUSH
72602: EMPTY
72603: LIST
72604: LIST
72605: PUSH
72606: LD_INT 25
72608: PUSH
72609: LD_INT 1
72611: PUSH
72612: EMPTY
72613: LIST
72614: LIST
72615: PUSH
72616: EMPTY
72617: LIST
72618: LIST
72619: PPUSH
72620: CALL_OW 69
72624: ST_TO_ADDR
// if not tmp then
72625: LD_VAR 0 2
72629: NOT
72630: IFFALSE 72634
// exit ;
72632: GO 72796
// un := tmp [ rand ( 1 , tmp ) ] ;
72634: LD_ADDR_VAR 0 3
72638: PUSH
72639: LD_VAR 0 2
72643: PUSH
72644: LD_INT 1
72646: PPUSH
72647: LD_VAR 0 2
72651: PPUSH
72652: CALL_OW 12
72656: ARRAY
72657: ST_TO_ADDR
// if Crawls ( un ) then
72658: LD_VAR 0 3
72662: PPUSH
72663: CALL_OW 318
72667: IFFALSE 72678
// ComWalk ( un ) ;
72669: LD_VAR 0 3
72673: PPUSH
72674: CALL_OW 138
// SetClass ( un , class_mortar ) ;
72678: LD_VAR 0 3
72682: PPUSH
72683: LD_INT 8
72685: PPUSH
72686: CALL_OW 336
// end ; 4 :
72690: GO 72796
72692: LD_INT 4
72694: DOUBLE
72695: EQUAL
72696: IFTRUE 72700
72698: GO 72774
72700: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
72701: LD_ADDR_VAR 0 2
72705: PUSH
72706: LD_INT 22
72708: PUSH
72709: LD_OWVAR 2
72713: PUSH
72714: EMPTY
72715: LIST
72716: LIST
72717: PUSH
72718: LD_INT 30
72720: PUSH
72721: LD_INT 29
72723: PUSH
72724: EMPTY
72725: LIST
72726: LIST
72727: PUSH
72728: EMPTY
72729: LIST
72730: LIST
72731: PPUSH
72732: CALL_OW 69
72736: ST_TO_ADDR
// if not tmp then
72737: LD_VAR 0 2
72741: NOT
72742: IFFALSE 72746
// exit ;
72744: GO 72796
// CenterNowOnUnits ( tmp [ 1 ] ) ;
72746: LD_VAR 0 2
72750: PUSH
72751: LD_INT 1
72753: ARRAY
72754: PPUSH
72755: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
72759: LD_VAR 0 2
72763: PUSH
72764: LD_INT 1
72766: ARRAY
72767: PPUSH
72768: CALL_OW 65
// end ; 5 .. 7 :
72772: GO 72796
72774: LD_INT 5
72776: DOUBLE
72777: GREATEREQUAL
72778: IFFALSE 72786
72780: LD_INT 7
72782: DOUBLE
72783: LESSEQUAL
72784: IFTRUE 72788
72786: GO 72795
72788: POP
// StreamSibBomb ; end ;
72789: CALL 69033 0 0
72793: GO 72796
72795: POP
// end ;
72796: PPOPN 3
72798: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
72799: LD_EXP 45
72803: PUSH
72804: LD_EXP 95
72808: AND
72809: IFFALSE 72965
72811: GO 72813
72813: DISABLE
72814: LD_INT 0
72816: PPUSH
72817: PPUSH
72818: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
72819: LD_ADDR_VAR 0 2
72823: PUSH
72824: LD_INT 81
72826: PUSH
72827: LD_OWVAR 2
72831: PUSH
72832: EMPTY
72833: LIST
72834: LIST
72835: PUSH
72836: LD_INT 2
72838: PUSH
72839: LD_INT 21
72841: PUSH
72842: LD_INT 1
72844: PUSH
72845: EMPTY
72846: LIST
72847: LIST
72848: PUSH
72849: LD_INT 21
72851: PUSH
72852: LD_INT 2
72854: PUSH
72855: EMPTY
72856: LIST
72857: LIST
72858: PUSH
72859: EMPTY
72860: LIST
72861: LIST
72862: LIST
72863: PUSH
72864: EMPTY
72865: LIST
72866: LIST
72867: PPUSH
72868: CALL_OW 69
72872: ST_TO_ADDR
// if not tmp then
72873: LD_VAR 0 2
72877: NOT
72878: IFFALSE 72882
// exit ;
72880: GO 72965
// p := 0 ;
72882: LD_ADDR_VAR 0 3
72886: PUSH
72887: LD_INT 0
72889: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
72890: LD_INT 35
72892: PPUSH
72893: CALL_OW 67
// p := p + 1 ;
72897: LD_ADDR_VAR 0 3
72901: PUSH
72902: LD_VAR 0 3
72906: PUSH
72907: LD_INT 1
72909: PLUS
72910: ST_TO_ADDR
// for i in tmp do
72911: LD_ADDR_VAR 0 1
72915: PUSH
72916: LD_VAR 0 2
72920: PUSH
72921: FOR_IN
72922: IFFALSE 72953
// if GetLives ( i ) < 1000 then
72924: LD_VAR 0 1
72928: PPUSH
72929: CALL_OW 256
72933: PUSH
72934: LD_INT 1000
72936: LESS
72937: IFFALSE 72951
// SetLives ( i , 1000 ) ;
72939: LD_VAR 0 1
72943: PPUSH
72944: LD_INT 1000
72946: PPUSH
72947: CALL_OW 234
72951: GO 72921
72953: POP
72954: POP
// until p > 20 ;
72955: LD_VAR 0 3
72959: PUSH
72960: LD_INT 20
72962: GREATER
72963: IFFALSE 72890
// end ;
72965: PPOPN 3
72967: END
// every 0 0$1 trigger StreamModeActive and sTime do
72968: LD_EXP 45
72972: PUSH
72973: LD_EXP 96
72977: AND
72978: IFFALSE 73013
72980: GO 72982
72982: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
72983: LD_INT 28
72985: PPUSH
72986: LD_OWVAR 2
72990: PPUSH
72991: LD_INT 2
72993: PPUSH
72994: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
72998: LD_INT 30
73000: PPUSH
73001: LD_OWVAR 2
73005: PPUSH
73006: LD_INT 2
73008: PPUSH
73009: CALL_OW 322
// end ;
73013: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
73014: LD_EXP 45
73018: PUSH
73019: LD_EXP 97
73023: AND
73024: IFFALSE 73145
73026: GO 73028
73028: DISABLE
73029: LD_INT 0
73031: PPUSH
73032: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
73033: LD_ADDR_VAR 0 2
73037: PUSH
73038: LD_INT 22
73040: PUSH
73041: LD_OWVAR 2
73045: PUSH
73046: EMPTY
73047: LIST
73048: LIST
73049: PUSH
73050: LD_INT 21
73052: PUSH
73053: LD_INT 1
73055: PUSH
73056: EMPTY
73057: LIST
73058: LIST
73059: PUSH
73060: LD_INT 3
73062: PUSH
73063: LD_INT 23
73065: PUSH
73066: LD_INT 0
73068: PUSH
73069: EMPTY
73070: LIST
73071: LIST
73072: PUSH
73073: EMPTY
73074: LIST
73075: LIST
73076: PUSH
73077: EMPTY
73078: LIST
73079: LIST
73080: LIST
73081: PPUSH
73082: CALL_OW 69
73086: ST_TO_ADDR
// if not tmp then
73087: LD_VAR 0 2
73091: NOT
73092: IFFALSE 73096
// exit ;
73094: GO 73145
// for i in tmp do
73096: LD_ADDR_VAR 0 1
73100: PUSH
73101: LD_VAR 0 2
73105: PUSH
73106: FOR_IN
73107: IFFALSE 73143
// begin if Crawls ( i ) then
73109: LD_VAR 0 1
73113: PPUSH
73114: CALL_OW 318
73118: IFFALSE 73129
// ComWalk ( i ) ;
73120: LD_VAR 0 1
73124: PPUSH
73125: CALL_OW 138
// SetClass ( i , 2 ) ;
73129: LD_VAR 0 1
73133: PPUSH
73134: LD_INT 2
73136: PPUSH
73137: CALL_OW 336
// end ;
73141: GO 73106
73143: POP
73144: POP
// end ;
73145: PPOPN 2
73147: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
73148: LD_EXP 45
73152: PUSH
73153: LD_EXP 98
73157: AND
73158: IFFALSE 73446
73160: GO 73162
73162: DISABLE
73163: LD_INT 0
73165: PPUSH
73166: PPUSH
73167: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
73168: LD_OWVAR 2
73172: PPUSH
73173: LD_INT 9
73175: PPUSH
73176: LD_INT 1
73178: PPUSH
73179: LD_INT 1
73181: PPUSH
73182: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
73186: LD_INT 9
73188: PPUSH
73189: LD_OWVAR 2
73193: PPUSH
73194: CALL_OW 343
// uc_side := 9 ;
73198: LD_ADDR_OWVAR 20
73202: PUSH
73203: LD_INT 9
73205: ST_TO_ADDR
// uc_nation := 2 ;
73206: LD_ADDR_OWVAR 21
73210: PUSH
73211: LD_INT 2
73213: ST_TO_ADDR
// hc_name := Dark Warrior ;
73214: LD_ADDR_OWVAR 26
73218: PUSH
73219: LD_STRING Dark Warrior
73221: ST_TO_ADDR
// hc_gallery :=  ;
73222: LD_ADDR_OWVAR 33
73226: PUSH
73227: LD_STRING 
73229: ST_TO_ADDR
// hc_noskilllimit := true ;
73230: LD_ADDR_OWVAR 76
73234: PUSH
73235: LD_INT 1
73237: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
73238: LD_ADDR_OWVAR 31
73242: PUSH
73243: LD_INT 30
73245: PUSH
73246: LD_INT 30
73248: PUSH
73249: LD_INT 30
73251: PUSH
73252: LD_INT 30
73254: PUSH
73255: EMPTY
73256: LIST
73257: LIST
73258: LIST
73259: LIST
73260: ST_TO_ADDR
// un := CreateHuman ;
73261: LD_ADDR_VAR 0 3
73265: PUSH
73266: CALL_OW 44
73270: ST_TO_ADDR
// hc_noskilllimit := false ;
73271: LD_ADDR_OWVAR 76
73275: PUSH
73276: LD_INT 0
73278: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
73279: LD_VAR 0 3
73283: PPUSH
73284: LD_INT 1
73286: PPUSH
73287: CALL_OW 51
// ToLua ( playRanger() ) ;
73291: LD_STRING playRanger()
73293: PPUSH
73294: CALL_OW 559
// p := 0 ;
73298: LD_ADDR_VAR 0 2
73302: PUSH
73303: LD_INT 0
73305: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
73306: LD_INT 35
73308: PPUSH
73309: CALL_OW 67
// p := p + 1 ;
73313: LD_ADDR_VAR 0 2
73317: PUSH
73318: LD_VAR 0 2
73322: PUSH
73323: LD_INT 1
73325: PLUS
73326: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
73327: LD_VAR 0 3
73331: PPUSH
73332: CALL_OW 256
73336: PUSH
73337: LD_INT 1000
73339: LESS
73340: IFFALSE 73354
// SetLives ( un , 1000 ) ;
73342: LD_VAR 0 3
73346: PPUSH
73347: LD_INT 1000
73349: PPUSH
73350: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
73354: LD_VAR 0 3
73358: PPUSH
73359: LD_INT 81
73361: PUSH
73362: LD_OWVAR 2
73366: PUSH
73367: EMPTY
73368: LIST
73369: LIST
73370: PUSH
73371: LD_INT 91
73373: PUSH
73374: LD_VAR 0 3
73378: PUSH
73379: LD_INT 30
73381: PUSH
73382: EMPTY
73383: LIST
73384: LIST
73385: LIST
73386: PUSH
73387: EMPTY
73388: LIST
73389: LIST
73390: PPUSH
73391: CALL_OW 69
73395: PPUSH
73396: LD_VAR 0 3
73400: PPUSH
73401: CALL_OW 74
73405: PPUSH
73406: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
73410: LD_VAR 0 2
73414: PUSH
73415: LD_INT 80
73417: GREATER
73418: PUSH
73419: LD_VAR 0 3
73423: PPUSH
73424: CALL_OW 301
73428: OR
73429: IFFALSE 73306
// if un then
73431: LD_VAR 0 3
73435: IFFALSE 73446
// RemoveUnit ( un ) ;
73437: LD_VAR 0 3
73441: PPUSH
73442: CALL_OW 64
// end ;
73446: PPOPN 3
73448: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
73449: LD_EXP 99
73453: IFFALSE 73569
73455: GO 73457
73457: DISABLE
73458: LD_INT 0
73460: PPUSH
73461: PPUSH
73462: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
73463: LD_ADDR_VAR 0 2
73467: PUSH
73468: LD_INT 81
73470: PUSH
73471: LD_OWVAR 2
73475: PUSH
73476: EMPTY
73477: LIST
73478: LIST
73479: PUSH
73480: LD_INT 21
73482: PUSH
73483: LD_INT 1
73485: PUSH
73486: EMPTY
73487: LIST
73488: LIST
73489: PUSH
73490: EMPTY
73491: LIST
73492: LIST
73493: PPUSH
73494: CALL_OW 69
73498: ST_TO_ADDR
// ToLua ( playComputer() ) ;
73499: LD_STRING playComputer()
73501: PPUSH
73502: CALL_OW 559
// if not tmp then
73506: LD_VAR 0 2
73510: NOT
73511: IFFALSE 73515
// exit ;
73513: GO 73569
// for i in tmp do
73515: LD_ADDR_VAR 0 1
73519: PUSH
73520: LD_VAR 0 2
73524: PUSH
73525: FOR_IN
73526: IFFALSE 73567
// for j := 1 to 4 do
73528: LD_ADDR_VAR 0 3
73532: PUSH
73533: DOUBLE
73534: LD_INT 1
73536: DEC
73537: ST_TO_ADDR
73538: LD_INT 4
73540: PUSH
73541: FOR_TO
73542: IFFALSE 73563
// SetSkill ( i , j , 10 ) ;
73544: LD_VAR 0 1
73548: PPUSH
73549: LD_VAR 0 3
73553: PPUSH
73554: LD_INT 10
73556: PPUSH
73557: CALL_OW 237
73561: GO 73541
73563: POP
73564: POP
73565: GO 73525
73567: POP
73568: POP
// end ;
73569: PPOPN 3
73571: END
// every 0 0$1 trigger s30 do var i , tmp ;
73572: LD_EXP 100
73576: IFFALSE 73645
73578: GO 73580
73580: DISABLE
73581: LD_INT 0
73583: PPUSH
73584: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
73585: LD_ADDR_VAR 0 2
73589: PUSH
73590: LD_INT 22
73592: PUSH
73593: LD_OWVAR 2
73597: PUSH
73598: EMPTY
73599: LIST
73600: LIST
73601: PPUSH
73602: CALL_OW 69
73606: ST_TO_ADDR
// if not tmp then
73607: LD_VAR 0 2
73611: NOT
73612: IFFALSE 73616
// exit ;
73614: GO 73645
// for i in tmp do
73616: LD_ADDR_VAR 0 1
73620: PUSH
73621: LD_VAR 0 2
73625: PUSH
73626: FOR_IN
73627: IFFALSE 73643
// SetLives ( i , 300 ) ;
73629: LD_VAR 0 1
73633: PPUSH
73634: LD_INT 300
73636: PPUSH
73637: CALL_OW 234
73641: GO 73626
73643: POP
73644: POP
// end ;
73645: PPOPN 2
73647: END
// every 0 0$1 trigger s60 do var i , tmp ;
73648: LD_EXP 101
73652: IFFALSE 73721
73654: GO 73656
73656: DISABLE
73657: LD_INT 0
73659: PPUSH
73660: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
73661: LD_ADDR_VAR 0 2
73665: PUSH
73666: LD_INT 22
73668: PUSH
73669: LD_OWVAR 2
73673: PUSH
73674: EMPTY
73675: LIST
73676: LIST
73677: PPUSH
73678: CALL_OW 69
73682: ST_TO_ADDR
// if not tmp then
73683: LD_VAR 0 2
73687: NOT
73688: IFFALSE 73692
// exit ;
73690: GO 73721
// for i in tmp do
73692: LD_ADDR_VAR 0 1
73696: PUSH
73697: LD_VAR 0 2
73701: PUSH
73702: FOR_IN
73703: IFFALSE 73719
// SetLives ( i , 600 ) ;
73705: LD_VAR 0 1
73709: PPUSH
73710: LD_INT 600
73712: PPUSH
73713: CALL_OW 234
73717: GO 73702
73719: POP
73720: POP
// end ;
73721: PPOPN 2
73723: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
73724: LD_INT 0
73726: PPUSH
// case cmd of 301 :
73727: LD_VAR 0 1
73731: PUSH
73732: LD_INT 301
73734: DOUBLE
73735: EQUAL
73736: IFTRUE 73740
73738: GO 73772
73740: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
73741: LD_VAR 0 6
73745: PPUSH
73746: LD_VAR 0 7
73750: PPUSH
73751: LD_VAR 0 8
73755: PPUSH
73756: LD_VAR 0 4
73760: PPUSH
73761: LD_VAR 0 5
73765: PPUSH
73766: CALL 74981 0 5
73770: GO 73893
73772: LD_INT 302
73774: DOUBLE
73775: EQUAL
73776: IFTRUE 73780
73778: GO 73817
73780: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
73781: LD_VAR 0 6
73785: PPUSH
73786: LD_VAR 0 7
73790: PPUSH
73791: LD_VAR 0 8
73795: PPUSH
73796: LD_VAR 0 9
73800: PPUSH
73801: LD_VAR 0 4
73805: PPUSH
73806: LD_VAR 0 5
73810: PPUSH
73811: CALL 75072 0 6
73815: GO 73893
73817: LD_INT 303
73819: DOUBLE
73820: EQUAL
73821: IFTRUE 73825
73823: GO 73862
73825: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
73826: LD_VAR 0 6
73830: PPUSH
73831: LD_VAR 0 7
73835: PPUSH
73836: LD_VAR 0 8
73840: PPUSH
73841: LD_VAR 0 9
73845: PPUSH
73846: LD_VAR 0 4
73850: PPUSH
73851: LD_VAR 0 5
73855: PPUSH
73856: CALL 73898 0 6
73860: GO 73893
73862: LD_INT 304
73864: DOUBLE
73865: EQUAL
73866: IFTRUE 73870
73868: GO 73892
73870: POP
// hHackTeleport ( unit , x , y ) ; end ;
73871: LD_VAR 0 2
73875: PPUSH
73876: LD_VAR 0 4
73880: PPUSH
73881: LD_VAR 0 5
73885: PPUSH
73886: CALL 75665 0 3
73890: GO 73893
73892: POP
// end ;
73893: LD_VAR 0 12
73897: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
73898: LD_INT 0
73900: PPUSH
73901: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
73902: LD_VAR 0 1
73906: PUSH
73907: LD_INT 1
73909: LESS
73910: PUSH
73911: LD_VAR 0 1
73915: PUSH
73916: LD_INT 3
73918: GREATER
73919: OR
73920: PUSH
73921: LD_VAR 0 5
73925: PPUSH
73926: LD_VAR 0 6
73930: PPUSH
73931: CALL_OW 428
73935: OR
73936: IFFALSE 73940
// exit ;
73938: GO 74668
// uc_side := your_side ;
73940: LD_ADDR_OWVAR 20
73944: PUSH
73945: LD_OWVAR 2
73949: ST_TO_ADDR
// uc_nation := nation ;
73950: LD_ADDR_OWVAR 21
73954: PUSH
73955: LD_VAR 0 1
73959: ST_TO_ADDR
// bc_level = 1 ;
73960: LD_ADDR_OWVAR 43
73964: PUSH
73965: LD_INT 1
73967: ST_TO_ADDR
// case btype of 1 :
73968: LD_VAR 0 2
73972: PUSH
73973: LD_INT 1
73975: DOUBLE
73976: EQUAL
73977: IFTRUE 73981
73979: GO 73992
73981: POP
// bc_type := b_depot ; 2 :
73982: LD_ADDR_OWVAR 42
73986: PUSH
73987: LD_INT 0
73989: ST_TO_ADDR
73990: GO 74612
73992: LD_INT 2
73994: DOUBLE
73995: EQUAL
73996: IFTRUE 74000
73998: GO 74011
74000: POP
// bc_type := b_warehouse ; 3 :
74001: LD_ADDR_OWVAR 42
74005: PUSH
74006: LD_INT 1
74008: ST_TO_ADDR
74009: GO 74612
74011: LD_INT 3
74013: DOUBLE
74014: EQUAL
74015: IFTRUE 74019
74017: GO 74030
74019: POP
// bc_type := b_lab ; 4 .. 9 :
74020: LD_ADDR_OWVAR 42
74024: PUSH
74025: LD_INT 6
74027: ST_TO_ADDR
74028: GO 74612
74030: LD_INT 4
74032: DOUBLE
74033: GREATEREQUAL
74034: IFFALSE 74042
74036: LD_INT 9
74038: DOUBLE
74039: LESSEQUAL
74040: IFTRUE 74044
74042: GO 74104
74044: POP
// begin bc_type := b_lab_half ;
74045: LD_ADDR_OWVAR 42
74049: PUSH
74050: LD_INT 7
74052: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
74053: LD_ADDR_OWVAR 44
74057: PUSH
74058: LD_INT 10
74060: PUSH
74061: LD_INT 11
74063: PUSH
74064: LD_INT 12
74066: PUSH
74067: LD_INT 15
74069: PUSH
74070: LD_INT 14
74072: PUSH
74073: LD_INT 13
74075: PUSH
74076: EMPTY
74077: LIST
74078: LIST
74079: LIST
74080: LIST
74081: LIST
74082: LIST
74083: PUSH
74084: LD_VAR 0 2
74088: PUSH
74089: LD_INT 3
74091: MINUS
74092: ARRAY
74093: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
74094: LD_ADDR_OWVAR 45
74098: PUSH
74099: LD_INT 9
74101: ST_TO_ADDR
// end ; 10 .. 13 :
74102: GO 74612
74104: LD_INT 10
74106: DOUBLE
74107: GREATEREQUAL
74108: IFFALSE 74116
74110: LD_INT 13
74112: DOUBLE
74113: LESSEQUAL
74114: IFTRUE 74118
74116: GO 74195
74118: POP
// begin bc_type := b_lab_full ;
74119: LD_ADDR_OWVAR 42
74123: PUSH
74124: LD_INT 8
74126: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
74127: LD_ADDR_OWVAR 44
74131: PUSH
74132: LD_INT 10
74134: PUSH
74135: LD_INT 12
74137: PUSH
74138: LD_INT 14
74140: PUSH
74141: LD_INT 13
74143: PUSH
74144: EMPTY
74145: LIST
74146: LIST
74147: LIST
74148: LIST
74149: PUSH
74150: LD_VAR 0 2
74154: PUSH
74155: LD_INT 9
74157: MINUS
74158: ARRAY
74159: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
74160: LD_ADDR_OWVAR 45
74164: PUSH
74165: LD_INT 11
74167: PUSH
74168: LD_INT 15
74170: PUSH
74171: LD_INT 12
74173: PUSH
74174: LD_INT 15
74176: PUSH
74177: EMPTY
74178: LIST
74179: LIST
74180: LIST
74181: LIST
74182: PUSH
74183: LD_VAR 0 2
74187: PUSH
74188: LD_INT 9
74190: MINUS
74191: ARRAY
74192: ST_TO_ADDR
// end ; 14 :
74193: GO 74612
74195: LD_INT 14
74197: DOUBLE
74198: EQUAL
74199: IFTRUE 74203
74201: GO 74214
74203: POP
// bc_type := b_workshop ; 15 :
74204: LD_ADDR_OWVAR 42
74208: PUSH
74209: LD_INT 2
74211: ST_TO_ADDR
74212: GO 74612
74214: LD_INT 15
74216: DOUBLE
74217: EQUAL
74218: IFTRUE 74222
74220: GO 74233
74222: POP
// bc_type := b_factory ; 16 :
74223: LD_ADDR_OWVAR 42
74227: PUSH
74228: LD_INT 3
74230: ST_TO_ADDR
74231: GO 74612
74233: LD_INT 16
74235: DOUBLE
74236: EQUAL
74237: IFTRUE 74241
74239: GO 74252
74241: POP
// bc_type := b_ext_gun ; 17 :
74242: LD_ADDR_OWVAR 42
74246: PUSH
74247: LD_INT 17
74249: ST_TO_ADDR
74250: GO 74612
74252: LD_INT 17
74254: DOUBLE
74255: EQUAL
74256: IFTRUE 74260
74258: GO 74288
74260: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
74261: LD_ADDR_OWVAR 42
74265: PUSH
74266: LD_INT 19
74268: PUSH
74269: LD_INT 23
74271: PUSH
74272: LD_INT 19
74274: PUSH
74275: EMPTY
74276: LIST
74277: LIST
74278: LIST
74279: PUSH
74280: LD_VAR 0 1
74284: ARRAY
74285: ST_TO_ADDR
74286: GO 74612
74288: LD_INT 18
74290: DOUBLE
74291: EQUAL
74292: IFTRUE 74296
74294: GO 74307
74296: POP
// bc_type := b_ext_radar ; 19 :
74297: LD_ADDR_OWVAR 42
74301: PUSH
74302: LD_INT 20
74304: ST_TO_ADDR
74305: GO 74612
74307: LD_INT 19
74309: DOUBLE
74310: EQUAL
74311: IFTRUE 74315
74313: GO 74326
74315: POP
// bc_type := b_ext_radio ; 20 :
74316: LD_ADDR_OWVAR 42
74320: PUSH
74321: LD_INT 22
74323: ST_TO_ADDR
74324: GO 74612
74326: LD_INT 20
74328: DOUBLE
74329: EQUAL
74330: IFTRUE 74334
74332: GO 74345
74334: POP
// bc_type := b_ext_siberium ; 21 :
74335: LD_ADDR_OWVAR 42
74339: PUSH
74340: LD_INT 21
74342: ST_TO_ADDR
74343: GO 74612
74345: LD_INT 21
74347: DOUBLE
74348: EQUAL
74349: IFTRUE 74353
74351: GO 74364
74353: POP
// bc_type := b_ext_computer ; 22 :
74354: LD_ADDR_OWVAR 42
74358: PUSH
74359: LD_INT 24
74361: ST_TO_ADDR
74362: GO 74612
74364: LD_INT 22
74366: DOUBLE
74367: EQUAL
74368: IFTRUE 74372
74370: GO 74383
74372: POP
// bc_type := b_ext_track ; 23 :
74373: LD_ADDR_OWVAR 42
74377: PUSH
74378: LD_INT 16
74380: ST_TO_ADDR
74381: GO 74612
74383: LD_INT 23
74385: DOUBLE
74386: EQUAL
74387: IFTRUE 74391
74389: GO 74402
74391: POP
// bc_type := b_ext_laser ; 24 :
74392: LD_ADDR_OWVAR 42
74396: PUSH
74397: LD_INT 25
74399: ST_TO_ADDR
74400: GO 74612
74402: LD_INT 24
74404: DOUBLE
74405: EQUAL
74406: IFTRUE 74410
74408: GO 74421
74410: POP
// bc_type := b_control_tower ; 25 :
74411: LD_ADDR_OWVAR 42
74415: PUSH
74416: LD_INT 36
74418: ST_TO_ADDR
74419: GO 74612
74421: LD_INT 25
74423: DOUBLE
74424: EQUAL
74425: IFTRUE 74429
74427: GO 74440
74429: POP
// bc_type := b_breastwork ; 26 :
74430: LD_ADDR_OWVAR 42
74434: PUSH
74435: LD_INT 31
74437: ST_TO_ADDR
74438: GO 74612
74440: LD_INT 26
74442: DOUBLE
74443: EQUAL
74444: IFTRUE 74448
74446: GO 74459
74448: POP
// bc_type := b_bunker ; 27 :
74449: LD_ADDR_OWVAR 42
74453: PUSH
74454: LD_INT 32
74456: ST_TO_ADDR
74457: GO 74612
74459: LD_INT 27
74461: DOUBLE
74462: EQUAL
74463: IFTRUE 74467
74465: GO 74478
74467: POP
// bc_type := b_turret ; 28 :
74468: LD_ADDR_OWVAR 42
74472: PUSH
74473: LD_INT 33
74475: ST_TO_ADDR
74476: GO 74612
74478: LD_INT 28
74480: DOUBLE
74481: EQUAL
74482: IFTRUE 74486
74484: GO 74497
74486: POP
// bc_type := b_armoury ; 29 :
74487: LD_ADDR_OWVAR 42
74491: PUSH
74492: LD_INT 4
74494: ST_TO_ADDR
74495: GO 74612
74497: LD_INT 29
74499: DOUBLE
74500: EQUAL
74501: IFTRUE 74505
74503: GO 74516
74505: POP
// bc_type := b_barracks ; 30 :
74506: LD_ADDR_OWVAR 42
74510: PUSH
74511: LD_INT 5
74513: ST_TO_ADDR
74514: GO 74612
74516: LD_INT 30
74518: DOUBLE
74519: EQUAL
74520: IFTRUE 74524
74522: GO 74535
74524: POP
// bc_type := b_solar_power ; 31 :
74525: LD_ADDR_OWVAR 42
74529: PUSH
74530: LD_INT 27
74532: ST_TO_ADDR
74533: GO 74612
74535: LD_INT 31
74537: DOUBLE
74538: EQUAL
74539: IFTRUE 74543
74541: GO 74554
74543: POP
// bc_type := b_oil_power ; 32 :
74544: LD_ADDR_OWVAR 42
74548: PUSH
74549: LD_INT 26
74551: ST_TO_ADDR
74552: GO 74612
74554: LD_INT 32
74556: DOUBLE
74557: EQUAL
74558: IFTRUE 74562
74560: GO 74573
74562: POP
// bc_type := b_siberite_power ; 33 :
74563: LD_ADDR_OWVAR 42
74567: PUSH
74568: LD_INT 28
74570: ST_TO_ADDR
74571: GO 74612
74573: LD_INT 33
74575: DOUBLE
74576: EQUAL
74577: IFTRUE 74581
74579: GO 74592
74581: POP
// bc_type := b_oil_mine ; 34 :
74582: LD_ADDR_OWVAR 42
74586: PUSH
74587: LD_INT 29
74589: ST_TO_ADDR
74590: GO 74612
74592: LD_INT 34
74594: DOUBLE
74595: EQUAL
74596: IFTRUE 74600
74598: GO 74611
74600: POP
// bc_type := b_siberite_mine ; end ;
74601: LD_ADDR_OWVAR 42
74605: PUSH
74606: LD_INT 30
74608: ST_TO_ADDR
74609: GO 74612
74611: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
74612: LD_ADDR_VAR 0 8
74616: PUSH
74617: LD_VAR 0 5
74621: PPUSH
74622: LD_VAR 0 6
74626: PPUSH
74627: LD_VAR 0 3
74631: PPUSH
74632: CALL_OW 47
74636: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
74637: LD_OWVAR 42
74641: PUSH
74642: LD_INT 32
74644: PUSH
74645: LD_INT 33
74647: PUSH
74648: EMPTY
74649: LIST
74650: LIST
74651: IN
74652: IFFALSE 74668
// PlaceWeaponTurret ( b , weapon ) ;
74654: LD_VAR 0 8
74658: PPUSH
74659: LD_VAR 0 4
74663: PPUSH
74664: CALL_OW 431
// end ;
74668: LD_VAR 0 7
74672: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
74673: LD_INT 0
74675: PPUSH
74676: PPUSH
74677: PPUSH
74678: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
74679: LD_ADDR_VAR 0 4
74683: PUSH
74684: LD_INT 22
74686: PUSH
74687: LD_OWVAR 2
74691: PUSH
74692: EMPTY
74693: LIST
74694: LIST
74695: PUSH
74696: LD_INT 2
74698: PUSH
74699: LD_INT 30
74701: PUSH
74702: LD_INT 0
74704: PUSH
74705: EMPTY
74706: LIST
74707: LIST
74708: PUSH
74709: LD_INT 30
74711: PUSH
74712: LD_INT 1
74714: PUSH
74715: EMPTY
74716: LIST
74717: LIST
74718: PUSH
74719: EMPTY
74720: LIST
74721: LIST
74722: LIST
74723: PUSH
74724: EMPTY
74725: LIST
74726: LIST
74727: PPUSH
74728: CALL_OW 69
74732: ST_TO_ADDR
// if not tmp then
74733: LD_VAR 0 4
74737: NOT
74738: IFFALSE 74742
// exit ;
74740: GO 74801
// for i in tmp do
74742: LD_ADDR_VAR 0 2
74746: PUSH
74747: LD_VAR 0 4
74751: PUSH
74752: FOR_IN
74753: IFFALSE 74799
// for j = 1 to 3 do
74755: LD_ADDR_VAR 0 3
74759: PUSH
74760: DOUBLE
74761: LD_INT 1
74763: DEC
74764: ST_TO_ADDR
74765: LD_INT 3
74767: PUSH
74768: FOR_TO
74769: IFFALSE 74795
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
74771: LD_VAR 0 2
74775: PPUSH
74776: CALL_OW 274
74780: PPUSH
74781: LD_VAR 0 3
74785: PPUSH
74786: LD_INT 99999
74788: PPUSH
74789: CALL_OW 277
74793: GO 74768
74795: POP
74796: POP
74797: GO 74752
74799: POP
74800: POP
// end ;
74801: LD_VAR 0 1
74805: RET
// export function hHackSetLevel10 ; var i , j ; begin
74806: LD_INT 0
74808: PPUSH
74809: PPUSH
74810: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
74811: LD_ADDR_VAR 0 2
74815: PUSH
74816: LD_INT 21
74818: PUSH
74819: LD_INT 1
74821: PUSH
74822: EMPTY
74823: LIST
74824: LIST
74825: PPUSH
74826: CALL_OW 69
74830: PUSH
74831: FOR_IN
74832: IFFALSE 74884
// if IsSelected ( i ) then
74834: LD_VAR 0 2
74838: PPUSH
74839: CALL_OW 306
74843: IFFALSE 74882
// begin for j := 1 to 4 do
74845: LD_ADDR_VAR 0 3
74849: PUSH
74850: DOUBLE
74851: LD_INT 1
74853: DEC
74854: ST_TO_ADDR
74855: LD_INT 4
74857: PUSH
74858: FOR_TO
74859: IFFALSE 74880
// SetSkill ( i , j , 10 ) ;
74861: LD_VAR 0 2
74865: PPUSH
74866: LD_VAR 0 3
74870: PPUSH
74871: LD_INT 10
74873: PPUSH
74874: CALL_OW 237
74878: GO 74858
74880: POP
74881: POP
// end ;
74882: GO 74831
74884: POP
74885: POP
// end ;
74886: LD_VAR 0 1
74890: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
74891: LD_INT 0
74893: PPUSH
74894: PPUSH
74895: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
74896: LD_ADDR_VAR 0 2
74900: PUSH
74901: LD_INT 22
74903: PUSH
74904: LD_OWVAR 2
74908: PUSH
74909: EMPTY
74910: LIST
74911: LIST
74912: PUSH
74913: LD_INT 21
74915: PUSH
74916: LD_INT 1
74918: PUSH
74919: EMPTY
74920: LIST
74921: LIST
74922: PUSH
74923: EMPTY
74924: LIST
74925: LIST
74926: PPUSH
74927: CALL_OW 69
74931: PUSH
74932: FOR_IN
74933: IFFALSE 74974
// begin for j := 1 to 4 do
74935: LD_ADDR_VAR 0 3
74939: PUSH
74940: DOUBLE
74941: LD_INT 1
74943: DEC
74944: ST_TO_ADDR
74945: LD_INT 4
74947: PUSH
74948: FOR_TO
74949: IFFALSE 74970
// SetSkill ( i , j , 10 ) ;
74951: LD_VAR 0 2
74955: PPUSH
74956: LD_VAR 0 3
74960: PPUSH
74961: LD_INT 10
74963: PPUSH
74964: CALL_OW 237
74968: GO 74948
74970: POP
74971: POP
// end ;
74972: GO 74932
74974: POP
74975: POP
// end ;
74976: LD_VAR 0 1
74980: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
74981: LD_INT 0
74983: PPUSH
// uc_side := your_side ;
74984: LD_ADDR_OWVAR 20
74988: PUSH
74989: LD_OWVAR 2
74993: ST_TO_ADDR
// uc_nation := nation ;
74994: LD_ADDR_OWVAR 21
74998: PUSH
74999: LD_VAR 0 1
75003: ST_TO_ADDR
// InitHc ;
75004: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
75008: LD_INT 0
75010: PPUSH
75011: LD_VAR 0 2
75015: PPUSH
75016: LD_VAR 0 3
75020: PPUSH
75021: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
75025: LD_VAR 0 4
75029: PPUSH
75030: LD_VAR 0 5
75034: PPUSH
75035: CALL_OW 428
75039: PUSH
75040: LD_INT 0
75042: EQUAL
75043: IFFALSE 75067
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
75045: CALL_OW 44
75049: PPUSH
75050: LD_VAR 0 4
75054: PPUSH
75055: LD_VAR 0 5
75059: PPUSH
75060: LD_INT 1
75062: PPUSH
75063: CALL_OW 48
// end ;
75067: LD_VAR 0 6
75071: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
75072: LD_INT 0
75074: PPUSH
75075: PPUSH
// uc_side := your_side ;
75076: LD_ADDR_OWVAR 20
75080: PUSH
75081: LD_OWVAR 2
75085: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
75086: LD_VAR 0 1
75090: PUSH
75091: LD_INT 1
75093: PUSH
75094: LD_INT 2
75096: PUSH
75097: LD_INT 3
75099: PUSH
75100: LD_INT 4
75102: PUSH
75103: LD_INT 5
75105: PUSH
75106: EMPTY
75107: LIST
75108: LIST
75109: LIST
75110: LIST
75111: LIST
75112: IN
75113: IFFALSE 75125
// uc_nation := nation_american else
75115: LD_ADDR_OWVAR 21
75119: PUSH
75120: LD_INT 1
75122: ST_TO_ADDR
75123: GO 75168
// if chassis in [ 11 , 12 , 13 , 14 ] then
75125: LD_VAR 0 1
75129: PUSH
75130: LD_INT 11
75132: PUSH
75133: LD_INT 12
75135: PUSH
75136: LD_INT 13
75138: PUSH
75139: LD_INT 14
75141: PUSH
75142: EMPTY
75143: LIST
75144: LIST
75145: LIST
75146: LIST
75147: IN
75148: IFFALSE 75160
// uc_nation := nation_arabian else
75150: LD_ADDR_OWVAR 21
75154: PUSH
75155: LD_INT 2
75157: ST_TO_ADDR
75158: GO 75168
// uc_nation := nation_russian ;
75160: LD_ADDR_OWVAR 21
75164: PUSH
75165: LD_INT 3
75167: ST_TO_ADDR
// vc_chassis := chassis ;
75168: LD_ADDR_OWVAR 37
75172: PUSH
75173: LD_VAR 0 1
75177: ST_TO_ADDR
// vc_engine := engine ;
75178: LD_ADDR_OWVAR 39
75182: PUSH
75183: LD_VAR 0 2
75187: ST_TO_ADDR
// vc_control := control ;
75188: LD_ADDR_OWVAR 38
75192: PUSH
75193: LD_VAR 0 3
75197: ST_TO_ADDR
// vc_weapon := weapon ;
75198: LD_ADDR_OWVAR 40
75202: PUSH
75203: LD_VAR 0 4
75207: ST_TO_ADDR
// un := CreateVehicle ;
75208: LD_ADDR_VAR 0 8
75212: PUSH
75213: CALL_OW 45
75217: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
75218: LD_VAR 0 8
75222: PPUSH
75223: LD_INT 0
75225: PPUSH
75226: LD_INT 5
75228: PPUSH
75229: CALL_OW 12
75233: PPUSH
75234: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
75238: LD_VAR 0 8
75242: PPUSH
75243: LD_VAR 0 5
75247: PPUSH
75248: LD_VAR 0 6
75252: PPUSH
75253: LD_INT 1
75255: PPUSH
75256: CALL_OW 48
// end ;
75260: LD_VAR 0 7
75264: RET
// export hInvincible ; every 1 do
75265: GO 75267
75267: DISABLE
// hInvincible := [ ] ;
75268: LD_ADDR_EXP 102
75272: PUSH
75273: EMPTY
75274: ST_TO_ADDR
75275: END
// every 10 do var i ;
75276: GO 75278
75278: DISABLE
75279: LD_INT 0
75281: PPUSH
// begin enable ;
75282: ENABLE
// if not hInvincible then
75283: LD_EXP 102
75287: NOT
75288: IFFALSE 75292
// exit ;
75290: GO 75336
// for i in hInvincible do
75292: LD_ADDR_VAR 0 1
75296: PUSH
75297: LD_EXP 102
75301: PUSH
75302: FOR_IN
75303: IFFALSE 75334
// if GetLives ( i ) < 1000 then
75305: LD_VAR 0 1
75309: PPUSH
75310: CALL_OW 256
75314: PUSH
75315: LD_INT 1000
75317: LESS
75318: IFFALSE 75332
// SetLives ( i , 1000 ) ;
75320: LD_VAR 0 1
75324: PPUSH
75325: LD_INT 1000
75327: PPUSH
75328: CALL_OW 234
75332: GO 75302
75334: POP
75335: POP
// end ;
75336: PPOPN 1
75338: END
// export function hHackInvincible ; var i ; begin
75339: LD_INT 0
75341: PPUSH
75342: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
75343: LD_ADDR_VAR 0 2
75347: PUSH
75348: LD_INT 2
75350: PUSH
75351: LD_INT 21
75353: PUSH
75354: LD_INT 1
75356: PUSH
75357: EMPTY
75358: LIST
75359: LIST
75360: PUSH
75361: LD_INT 21
75363: PUSH
75364: LD_INT 2
75366: PUSH
75367: EMPTY
75368: LIST
75369: LIST
75370: PUSH
75371: EMPTY
75372: LIST
75373: LIST
75374: LIST
75375: PPUSH
75376: CALL_OW 69
75380: PUSH
75381: FOR_IN
75382: IFFALSE 75443
// if IsSelected ( i ) then
75384: LD_VAR 0 2
75388: PPUSH
75389: CALL_OW 306
75393: IFFALSE 75441
// begin if i in hInvincible then
75395: LD_VAR 0 2
75399: PUSH
75400: LD_EXP 102
75404: IN
75405: IFFALSE 75425
// hInvincible := hInvincible diff i else
75407: LD_ADDR_EXP 102
75411: PUSH
75412: LD_EXP 102
75416: PUSH
75417: LD_VAR 0 2
75421: DIFF
75422: ST_TO_ADDR
75423: GO 75441
// hInvincible := hInvincible union i ;
75425: LD_ADDR_EXP 102
75429: PUSH
75430: LD_EXP 102
75434: PUSH
75435: LD_VAR 0 2
75439: UNION
75440: ST_TO_ADDR
// end ;
75441: GO 75381
75443: POP
75444: POP
// end ;
75445: LD_VAR 0 1
75449: RET
// export function hHackInvisible ; var i , j ; begin
75450: LD_INT 0
75452: PPUSH
75453: PPUSH
75454: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
75455: LD_ADDR_VAR 0 2
75459: PUSH
75460: LD_INT 21
75462: PUSH
75463: LD_INT 1
75465: PUSH
75466: EMPTY
75467: LIST
75468: LIST
75469: PPUSH
75470: CALL_OW 69
75474: PUSH
75475: FOR_IN
75476: IFFALSE 75500
// if IsSelected ( i ) then
75478: LD_VAR 0 2
75482: PPUSH
75483: CALL_OW 306
75487: IFFALSE 75498
// ComForceInvisible ( i ) ;
75489: LD_VAR 0 2
75493: PPUSH
75494: CALL_OW 496
75498: GO 75475
75500: POP
75501: POP
// end ;
75502: LD_VAR 0 1
75506: RET
// export function hHackChangeYourSide ; begin
75507: LD_INT 0
75509: PPUSH
// if your_side = 8 then
75510: LD_OWVAR 2
75514: PUSH
75515: LD_INT 8
75517: EQUAL
75518: IFFALSE 75530
// your_side := 0 else
75520: LD_ADDR_OWVAR 2
75524: PUSH
75525: LD_INT 0
75527: ST_TO_ADDR
75528: GO 75544
// your_side := your_side + 1 ;
75530: LD_ADDR_OWVAR 2
75534: PUSH
75535: LD_OWVAR 2
75539: PUSH
75540: LD_INT 1
75542: PLUS
75543: ST_TO_ADDR
// end ;
75544: LD_VAR 0 1
75548: RET
// export function hHackChangeUnitSide ; var i , j ; begin
75549: LD_INT 0
75551: PPUSH
75552: PPUSH
75553: PPUSH
// for i in all_units do
75554: LD_ADDR_VAR 0 2
75558: PUSH
75559: LD_OWVAR 3
75563: PUSH
75564: FOR_IN
75565: IFFALSE 75643
// if IsSelected ( i ) then
75567: LD_VAR 0 2
75571: PPUSH
75572: CALL_OW 306
75576: IFFALSE 75641
// begin j := GetSide ( i ) ;
75578: LD_ADDR_VAR 0 3
75582: PUSH
75583: LD_VAR 0 2
75587: PPUSH
75588: CALL_OW 255
75592: ST_TO_ADDR
// if j = 8 then
75593: LD_VAR 0 3
75597: PUSH
75598: LD_INT 8
75600: EQUAL
75601: IFFALSE 75613
// j := 0 else
75603: LD_ADDR_VAR 0 3
75607: PUSH
75608: LD_INT 0
75610: ST_TO_ADDR
75611: GO 75627
// j := j + 1 ;
75613: LD_ADDR_VAR 0 3
75617: PUSH
75618: LD_VAR 0 3
75622: PUSH
75623: LD_INT 1
75625: PLUS
75626: ST_TO_ADDR
// SetSide ( i , j ) ;
75627: LD_VAR 0 2
75631: PPUSH
75632: LD_VAR 0 3
75636: PPUSH
75637: CALL_OW 235
// end ;
75641: GO 75564
75643: POP
75644: POP
// end ;
75645: LD_VAR 0 1
75649: RET
// export function hHackFog ; begin
75650: LD_INT 0
75652: PPUSH
// FogOff ( true ) ;
75653: LD_INT 1
75655: PPUSH
75656: CALL_OW 344
// end ;
75660: LD_VAR 0 1
75664: RET
// export function hHackTeleport ( unit , x , y ) ; begin
75665: LD_INT 0
75667: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
75668: LD_VAR 0 1
75672: PPUSH
75673: LD_VAR 0 2
75677: PPUSH
75678: LD_VAR 0 3
75682: PPUSH
75683: LD_INT 1
75685: PPUSH
75686: LD_INT 1
75688: PPUSH
75689: CALL_OW 483
// CenterOnXY ( x , y ) ;
75693: LD_VAR 0 2
75697: PPUSH
75698: LD_VAR 0 3
75702: PPUSH
75703: CALL_OW 84
// end ;
75707: LD_VAR 0 4
75711: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
75712: LD_INT 0
75714: PPUSH
75715: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
75716: LD_VAR 0 1
75720: NOT
75721: PUSH
75722: LD_VAR 0 2
75726: PPUSH
75727: LD_VAR 0 3
75731: PPUSH
75732: CALL_OW 488
75736: NOT
75737: OR
75738: PUSH
75739: LD_VAR 0 1
75743: PPUSH
75744: CALL_OW 266
75748: PUSH
75749: LD_INT 3
75751: NONEQUAL
75752: PUSH
75753: LD_VAR 0 1
75757: PPUSH
75758: CALL_OW 247
75762: PUSH
75763: LD_INT 1
75765: EQUAL
75766: NOT
75767: AND
75768: OR
75769: IFFALSE 75773
// exit ;
75771: GO 75922
// if GetType ( factory ) = unit_human then
75773: LD_VAR 0 1
75777: PPUSH
75778: CALL_OW 247
75782: PUSH
75783: LD_INT 1
75785: EQUAL
75786: IFFALSE 75803
// factory := IsInUnit ( factory ) ;
75788: LD_ADDR_VAR 0 1
75792: PUSH
75793: LD_VAR 0 1
75797: PPUSH
75798: CALL_OW 310
75802: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
75803: LD_VAR 0 1
75807: PPUSH
75808: CALL_OW 266
75812: PUSH
75813: LD_INT 3
75815: NONEQUAL
75816: IFFALSE 75820
// exit ;
75818: GO 75922
// if HexInfo ( x , y ) = factory then
75820: LD_VAR 0 2
75824: PPUSH
75825: LD_VAR 0 3
75829: PPUSH
75830: CALL_OW 428
75834: PUSH
75835: LD_VAR 0 1
75839: EQUAL
75840: IFFALSE 75867
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
75842: LD_ADDR_EXP 103
75846: PUSH
75847: LD_EXP 103
75851: PPUSH
75852: LD_VAR 0 1
75856: PPUSH
75857: LD_INT 0
75859: PPUSH
75860: CALL_OW 1
75864: ST_TO_ADDR
75865: GO 75918
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
75867: LD_ADDR_EXP 103
75871: PUSH
75872: LD_EXP 103
75876: PPUSH
75877: LD_VAR 0 1
75881: PPUSH
75882: LD_VAR 0 1
75886: PPUSH
75887: CALL_OW 255
75891: PUSH
75892: LD_VAR 0 1
75896: PUSH
75897: LD_VAR 0 2
75901: PUSH
75902: LD_VAR 0 3
75906: PUSH
75907: EMPTY
75908: LIST
75909: LIST
75910: LIST
75911: LIST
75912: PPUSH
75913: CALL_OW 1
75917: ST_TO_ADDR
// UpdateFactoryWaypoints ;
75918: CALL 75927 0 0
// end ;
75922: LD_VAR 0 4
75926: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
75927: LD_INT 0
75929: PPUSH
75930: PPUSH
75931: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
75932: LD_STRING resetFactoryWaypoint();
75934: PPUSH
75935: CALL_OW 559
// if factoryWaypoints then
75939: LD_EXP 103
75943: IFFALSE 76069
// begin list := PrepareArray ( factoryWaypoints ) ;
75945: LD_ADDR_VAR 0 3
75949: PUSH
75950: LD_EXP 103
75954: PPUSH
75955: CALL 60698 0 1
75959: ST_TO_ADDR
// for i := 1 to list do
75960: LD_ADDR_VAR 0 2
75964: PUSH
75965: DOUBLE
75966: LD_INT 1
75968: DEC
75969: ST_TO_ADDR
75970: LD_VAR 0 3
75974: PUSH
75975: FOR_TO
75976: IFFALSE 76067
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
75978: LD_STRING setFactoryWaypointXY(
75980: PUSH
75981: LD_VAR 0 3
75985: PUSH
75986: LD_VAR 0 2
75990: ARRAY
75991: PUSH
75992: LD_INT 1
75994: ARRAY
75995: STR
75996: PUSH
75997: LD_STRING ,
75999: STR
76000: PUSH
76001: LD_VAR 0 3
76005: PUSH
76006: LD_VAR 0 2
76010: ARRAY
76011: PUSH
76012: LD_INT 2
76014: ARRAY
76015: STR
76016: PUSH
76017: LD_STRING ,
76019: STR
76020: PUSH
76021: LD_VAR 0 3
76025: PUSH
76026: LD_VAR 0 2
76030: ARRAY
76031: PUSH
76032: LD_INT 3
76034: ARRAY
76035: STR
76036: PUSH
76037: LD_STRING ,
76039: STR
76040: PUSH
76041: LD_VAR 0 3
76045: PUSH
76046: LD_VAR 0 2
76050: ARRAY
76051: PUSH
76052: LD_INT 4
76054: ARRAY
76055: STR
76056: PUSH
76057: LD_STRING )
76059: STR
76060: PPUSH
76061: CALL_OW 559
76065: GO 75975
76067: POP
76068: POP
// end ; end ;
76069: LD_VAR 0 1
76073: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
76074: LD_INT 0
76076: PPUSH
// if HexInfo ( x , y ) = warehouse then
76077: LD_VAR 0 2
76081: PPUSH
76082: LD_VAR 0 3
76086: PPUSH
76087: CALL_OW 428
76091: PUSH
76092: LD_VAR 0 1
76096: EQUAL
76097: IFFALSE 76124
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
76099: LD_ADDR_EXP 104
76103: PUSH
76104: LD_EXP 104
76108: PPUSH
76109: LD_VAR 0 1
76113: PPUSH
76114: LD_INT 0
76116: PPUSH
76117: CALL_OW 1
76121: ST_TO_ADDR
76122: GO 76175
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
76124: LD_ADDR_EXP 104
76128: PUSH
76129: LD_EXP 104
76133: PPUSH
76134: LD_VAR 0 1
76138: PPUSH
76139: LD_VAR 0 1
76143: PPUSH
76144: CALL_OW 255
76148: PUSH
76149: LD_VAR 0 1
76153: PUSH
76154: LD_VAR 0 2
76158: PUSH
76159: LD_VAR 0 3
76163: PUSH
76164: EMPTY
76165: LIST
76166: LIST
76167: LIST
76168: LIST
76169: PPUSH
76170: CALL_OW 1
76174: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
76175: CALL 76184 0 0
// end ;
76179: LD_VAR 0 4
76183: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
76184: LD_INT 0
76186: PPUSH
76187: PPUSH
76188: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
76189: LD_STRING resetWarehouseGatheringPoints();
76191: PPUSH
76192: CALL_OW 559
// if warehouseGatheringPoints then
76196: LD_EXP 104
76200: IFFALSE 76326
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
76202: LD_ADDR_VAR 0 3
76206: PUSH
76207: LD_EXP 104
76211: PPUSH
76212: CALL 60698 0 1
76216: ST_TO_ADDR
// for i := 1 to list do
76217: LD_ADDR_VAR 0 2
76221: PUSH
76222: DOUBLE
76223: LD_INT 1
76225: DEC
76226: ST_TO_ADDR
76227: LD_VAR 0 3
76231: PUSH
76232: FOR_TO
76233: IFFALSE 76324
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
76235: LD_STRING setWarehouseGatheringPointXY(
76237: PUSH
76238: LD_VAR 0 3
76242: PUSH
76243: LD_VAR 0 2
76247: ARRAY
76248: PUSH
76249: LD_INT 1
76251: ARRAY
76252: STR
76253: PUSH
76254: LD_STRING ,
76256: STR
76257: PUSH
76258: LD_VAR 0 3
76262: PUSH
76263: LD_VAR 0 2
76267: ARRAY
76268: PUSH
76269: LD_INT 2
76271: ARRAY
76272: STR
76273: PUSH
76274: LD_STRING ,
76276: STR
76277: PUSH
76278: LD_VAR 0 3
76282: PUSH
76283: LD_VAR 0 2
76287: ARRAY
76288: PUSH
76289: LD_INT 3
76291: ARRAY
76292: STR
76293: PUSH
76294: LD_STRING ,
76296: STR
76297: PUSH
76298: LD_VAR 0 3
76302: PUSH
76303: LD_VAR 0 2
76307: ARRAY
76308: PUSH
76309: LD_INT 4
76311: ARRAY
76312: STR
76313: PUSH
76314: LD_STRING )
76316: STR
76317: PPUSH
76318: CALL_OW 559
76322: GO 76232
76324: POP
76325: POP
// end ; end ;
76326: LD_VAR 0 1
76330: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
76331: LD_EXP 104
76335: IFFALSE 77020
76337: GO 76339
76339: DISABLE
76340: LD_INT 0
76342: PPUSH
76343: PPUSH
76344: PPUSH
76345: PPUSH
76346: PPUSH
76347: PPUSH
76348: PPUSH
76349: PPUSH
76350: PPUSH
// begin enable ;
76351: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
76352: LD_ADDR_VAR 0 3
76356: PUSH
76357: LD_EXP 104
76361: PPUSH
76362: CALL 60698 0 1
76366: ST_TO_ADDR
// if not list then
76367: LD_VAR 0 3
76371: NOT
76372: IFFALSE 76376
// exit ;
76374: GO 77020
// for i := 1 to list do
76376: LD_ADDR_VAR 0 1
76380: PUSH
76381: DOUBLE
76382: LD_INT 1
76384: DEC
76385: ST_TO_ADDR
76386: LD_VAR 0 3
76390: PUSH
76391: FOR_TO
76392: IFFALSE 77018
// begin depot := list [ i ] [ 2 ] ;
76394: LD_ADDR_VAR 0 8
76398: PUSH
76399: LD_VAR 0 3
76403: PUSH
76404: LD_VAR 0 1
76408: ARRAY
76409: PUSH
76410: LD_INT 2
76412: ARRAY
76413: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
76414: LD_ADDR_VAR 0 5
76418: PUSH
76419: LD_VAR 0 3
76423: PUSH
76424: LD_VAR 0 1
76428: ARRAY
76429: PUSH
76430: LD_INT 1
76432: ARRAY
76433: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
76434: LD_VAR 0 8
76438: PPUSH
76439: CALL_OW 301
76443: PUSH
76444: LD_VAR 0 5
76448: PUSH
76449: LD_VAR 0 8
76453: PPUSH
76454: CALL_OW 255
76458: NONEQUAL
76459: OR
76460: IFFALSE 76489
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
76462: LD_ADDR_EXP 104
76466: PUSH
76467: LD_EXP 104
76471: PPUSH
76472: LD_VAR 0 8
76476: PPUSH
76477: LD_INT 0
76479: PPUSH
76480: CALL_OW 1
76484: ST_TO_ADDR
// exit ;
76485: POP
76486: POP
76487: GO 77020
// end ; x := list [ i ] [ 3 ] ;
76489: LD_ADDR_VAR 0 6
76493: PUSH
76494: LD_VAR 0 3
76498: PUSH
76499: LD_VAR 0 1
76503: ARRAY
76504: PUSH
76505: LD_INT 3
76507: ARRAY
76508: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
76509: LD_ADDR_VAR 0 7
76513: PUSH
76514: LD_VAR 0 3
76518: PUSH
76519: LD_VAR 0 1
76523: ARRAY
76524: PUSH
76525: LD_INT 4
76527: ARRAY
76528: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
76529: LD_ADDR_VAR 0 9
76533: PUSH
76534: LD_VAR 0 6
76538: PPUSH
76539: LD_VAR 0 7
76543: PPUSH
76544: LD_INT 16
76546: PPUSH
76547: CALL 59286 0 3
76551: ST_TO_ADDR
// if not cratesNearbyPoint then
76552: LD_VAR 0 9
76556: NOT
76557: IFFALSE 76563
// exit ;
76559: POP
76560: POP
76561: GO 77020
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
76563: LD_ADDR_VAR 0 4
76567: PUSH
76568: LD_INT 22
76570: PUSH
76571: LD_VAR 0 5
76575: PUSH
76576: EMPTY
76577: LIST
76578: LIST
76579: PUSH
76580: LD_INT 3
76582: PUSH
76583: LD_INT 60
76585: PUSH
76586: EMPTY
76587: LIST
76588: PUSH
76589: EMPTY
76590: LIST
76591: LIST
76592: PUSH
76593: LD_INT 91
76595: PUSH
76596: LD_VAR 0 8
76600: PUSH
76601: LD_INT 6
76603: PUSH
76604: EMPTY
76605: LIST
76606: LIST
76607: LIST
76608: PUSH
76609: LD_INT 2
76611: PUSH
76612: LD_INT 25
76614: PUSH
76615: LD_INT 2
76617: PUSH
76618: EMPTY
76619: LIST
76620: LIST
76621: PUSH
76622: LD_INT 25
76624: PUSH
76625: LD_INT 16
76627: PUSH
76628: EMPTY
76629: LIST
76630: LIST
76631: PUSH
76632: EMPTY
76633: LIST
76634: LIST
76635: LIST
76636: PUSH
76637: EMPTY
76638: LIST
76639: LIST
76640: LIST
76641: LIST
76642: PPUSH
76643: CALL_OW 69
76647: PUSH
76648: LD_VAR 0 8
76652: PPUSH
76653: CALL_OW 313
76657: PPUSH
76658: LD_INT 3
76660: PUSH
76661: LD_INT 60
76663: PUSH
76664: EMPTY
76665: LIST
76666: PUSH
76667: EMPTY
76668: LIST
76669: LIST
76670: PUSH
76671: LD_INT 2
76673: PUSH
76674: LD_INT 25
76676: PUSH
76677: LD_INT 2
76679: PUSH
76680: EMPTY
76681: LIST
76682: LIST
76683: PUSH
76684: LD_INT 25
76686: PUSH
76687: LD_INT 16
76689: PUSH
76690: EMPTY
76691: LIST
76692: LIST
76693: PUSH
76694: EMPTY
76695: LIST
76696: LIST
76697: LIST
76698: PUSH
76699: EMPTY
76700: LIST
76701: LIST
76702: PPUSH
76703: CALL_OW 72
76707: UNION
76708: ST_TO_ADDR
// if tmp then
76709: LD_VAR 0 4
76713: IFFALSE 76793
// begin tmp := ShrinkArray ( tmp , 3 ) ;
76715: LD_ADDR_VAR 0 4
76719: PUSH
76720: LD_VAR 0 4
76724: PPUSH
76725: LD_INT 3
76727: PPUSH
76728: CALL 57255 0 2
76732: ST_TO_ADDR
// for j in tmp do
76733: LD_ADDR_VAR 0 2
76737: PUSH
76738: LD_VAR 0 4
76742: PUSH
76743: FOR_IN
76744: IFFALSE 76787
// begin if IsInUnit ( j ) then
76746: LD_VAR 0 2
76750: PPUSH
76751: CALL_OW 310
76755: IFFALSE 76766
// ComExit ( j ) ;
76757: LD_VAR 0 2
76761: PPUSH
76762: CALL 57338 0 1
// AddComCollect ( j , x , y ) ;
76766: LD_VAR 0 2
76770: PPUSH
76771: LD_VAR 0 6
76775: PPUSH
76776: LD_VAR 0 7
76780: PPUSH
76781: CALL_OW 177
// end ;
76785: GO 76743
76787: POP
76788: POP
// exit ;
76789: POP
76790: POP
76791: GO 77020
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
76793: LD_ADDR_VAR 0 4
76797: PUSH
76798: LD_INT 22
76800: PUSH
76801: LD_VAR 0 5
76805: PUSH
76806: EMPTY
76807: LIST
76808: LIST
76809: PUSH
76810: LD_INT 91
76812: PUSH
76813: LD_VAR 0 8
76817: PUSH
76818: LD_INT 8
76820: PUSH
76821: EMPTY
76822: LIST
76823: LIST
76824: LIST
76825: PUSH
76826: LD_INT 2
76828: PUSH
76829: LD_INT 34
76831: PUSH
76832: LD_INT 12
76834: PUSH
76835: EMPTY
76836: LIST
76837: LIST
76838: PUSH
76839: LD_INT 34
76841: PUSH
76842: LD_INT 51
76844: PUSH
76845: EMPTY
76846: LIST
76847: LIST
76848: PUSH
76849: LD_INT 34
76851: PUSH
76852: LD_INT 32
76854: PUSH
76855: EMPTY
76856: LIST
76857: LIST
76858: PUSH
76859: LD_INT 34
76861: PUSH
76862: LD_INT 89
76864: PUSH
76865: EMPTY
76866: LIST
76867: LIST
76868: PUSH
76869: EMPTY
76870: LIST
76871: LIST
76872: LIST
76873: LIST
76874: LIST
76875: PUSH
76876: EMPTY
76877: LIST
76878: LIST
76879: LIST
76880: PPUSH
76881: CALL_OW 69
76885: ST_TO_ADDR
// if tmp then
76886: LD_VAR 0 4
76890: IFFALSE 77016
// begin for j in tmp do
76892: LD_ADDR_VAR 0 2
76896: PUSH
76897: LD_VAR 0 4
76901: PUSH
76902: FOR_IN
76903: IFFALSE 77014
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
76905: LD_VAR 0 2
76909: PPUSH
76910: CALL_OW 262
76914: PUSH
76915: LD_INT 3
76917: EQUAL
76918: PUSH
76919: LD_VAR 0 2
76923: PPUSH
76924: CALL_OW 261
76928: PUSH
76929: LD_INT 20
76931: GREATER
76932: OR
76933: PUSH
76934: LD_VAR 0 2
76938: PPUSH
76939: CALL_OW 314
76943: NOT
76944: AND
76945: PUSH
76946: LD_VAR 0 2
76950: PPUSH
76951: CALL_OW 263
76955: PUSH
76956: LD_INT 1
76958: NONEQUAL
76959: PUSH
76960: LD_VAR 0 2
76964: PPUSH
76965: CALL_OW 311
76969: OR
76970: AND
76971: IFFALSE 77012
// begin ComCollect ( j , x , y ) ;
76973: LD_VAR 0 2
76977: PPUSH
76978: LD_VAR 0 6
76982: PPUSH
76983: LD_VAR 0 7
76987: PPUSH
76988: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
76992: LD_VAR 0 2
76996: PPUSH
76997: LD_VAR 0 8
77001: PPUSH
77002: CALL_OW 172
// exit ;
77006: POP
77007: POP
77008: POP
77009: POP
77010: GO 77020
// end ;
77012: GO 76902
77014: POP
77015: POP
// end ; end ;
77016: GO 76391
77018: POP
77019: POP
// end ; end_of_file
77020: PPOPN 9
77022: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
77023: LD_VAR 0 1
77027: PUSH
77028: LD_INT 200
77030: DOUBLE
77031: GREATEREQUAL
77032: IFFALSE 77040
77034: LD_INT 299
77036: DOUBLE
77037: LESSEQUAL
77038: IFTRUE 77042
77040: GO 77074
77042: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
77043: LD_VAR 0 1
77047: PPUSH
77048: LD_VAR 0 2
77052: PPUSH
77053: LD_VAR 0 3
77057: PPUSH
77058: LD_VAR 0 4
77062: PPUSH
77063: LD_VAR 0 5
77067: PPUSH
77068: CALL 77562 0 5
77072: GO 77151
77074: LD_INT 300
77076: DOUBLE
77077: GREATEREQUAL
77078: IFFALSE 77086
77080: LD_INT 399
77082: DOUBLE
77083: LESSEQUAL
77084: IFTRUE 77088
77086: GO 77150
77088: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77089: LD_VAR 0 1
77093: PPUSH
77094: LD_VAR 0 2
77098: PPUSH
77099: LD_VAR 0 3
77103: PPUSH
77104: LD_VAR 0 4
77108: PPUSH
77109: LD_VAR 0 5
77113: PPUSH
77114: LD_VAR 0 6
77118: PPUSH
77119: LD_VAR 0 7
77123: PPUSH
77124: LD_VAR 0 8
77128: PPUSH
77129: LD_VAR 0 9
77133: PPUSH
77134: LD_VAR 0 10
77138: PPUSH
77139: LD_VAR 0 11
77143: PPUSH
77144: CALL 73724 0 11
77148: GO 77151
77150: POP
// end ;
77151: PPOPN 11
77153: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
77154: LD_VAR 0 1
77158: PPUSH
77159: LD_VAR 0 2
77163: PPUSH
77164: LD_VAR 0 3
77168: PPUSH
77169: LD_VAR 0 4
77173: PPUSH
77174: LD_VAR 0 5
77178: PPUSH
77179: CALL 77298 0 5
// end ; end_of_file
77183: PPOPN 5
77185: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
77186: LD_INT 0
77188: PPUSH
77189: PPUSH
77190: PPUSH
77191: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
77192: LD_VAR 0 1
77196: PPUSH
77197: CALL_OW 264
77201: PUSH
77202: LD_INT 91
77204: EQUAL
77205: IFFALSE 77277
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
77207: LD_INT 68
77209: PPUSH
77210: LD_VAR 0 1
77214: PPUSH
77215: CALL_OW 255
77219: PPUSH
77220: CALL_OW 321
77224: PUSH
77225: LD_INT 2
77227: EQUAL
77228: IFFALSE 77240
// eff := 70 else
77230: LD_ADDR_VAR 0 4
77234: PUSH
77235: LD_INT 70
77237: ST_TO_ADDR
77238: GO 77248
// eff := 30 ;
77240: LD_ADDR_VAR 0 4
77244: PUSH
77245: LD_INT 30
77247: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
77248: LD_VAR 0 1
77252: PPUSH
77253: CALL_OW 250
77257: PPUSH
77258: LD_VAR 0 1
77262: PPUSH
77263: CALL_OW 251
77267: PPUSH
77268: LD_VAR 0 4
77272: PPUSH
77273: CALL_OW 495
// end ; end ;
77277: LD_VAR 0 2
77281: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
77282: LD_INT 0
77284: PPUSH
// end ;
77285: LD_VAR 0 4
77289: RET
// export function SOS_Command ( cmd ) ; begin
77290: LD_INT 0
77292: PPUSH
// end ;
77293: LD_VAR 0 2
77297: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
77298: LD_INT 0
77300: PPUSH
// end ;
77301: LD_VAR 0 6
77305: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
77306: LD_INT 0
77308: PPUSH
77309: PPUSH
// if not vehicle or not factory then
77310: LD_VAR 0 1
77314: NOT
77315: PUSH
77316: LD_VAR 0 2
77320: NOT
77321: OR
77322: IFFALSE 77326
// exit ;
77324: GO 77557
// if factoryWaypoints >= factory then
77326: LD_EXP 103
77330: PUSH
77331: LD_VAR 0 2
77335: GREATEREQUAL
77336: IFFALSE 77557
// if factoryWaypoints [ factory ] then
77338: LD_EXP 103
77342: PUSH
77343: LD_VAR 0 2
77347: ARRAY
77348: IFFALSE 77557
// begin if GetControl ( vehicle ) = control_manual then
77350: LD_VAR 0 1
77354: PPUSH
77355: CALL_OW 263
77359: PUSH
77360: LD_INT 1
77362: EQUAL
77363: IFFALSE 77444
// begin driver := IsDrivenBy ( vehicle ) ;
77365: LD_ADDR_VAR 0 4
77369: PUSH
77370: LD_VAR 0 1
77374: PPUSH
77375: CALL_OW 311
77379: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
77380: LD_VAR 0 4
77384: PPUSH
77385: LD_EXP 103
77389: PUSH
77390: LD_VAR 0 2
77394: ARRAY
77395: PUSH
77396: LD_INT 3
77398: ARRAY
77399: PPUSH
77400: LD_EXP 103
77404: PUSH
77405: LD_VAR 0 2
77409: ARRAY
77410: PUSH
77411: LD_INT 4
77413: ARRAY
77414: PPUSH
77415: CALL_OW 171
// AddComExitVehicle ( driver ) ;
77419: LD_VAR 0 4
77423: PPUSH
77424: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
77428: LD_VAR 0 4
77432: PPUSH
77433: LD_VAR 0 2
77437: PPUSH
77438: CALL_OW 180
// end else
77442: GO 77557
// if GetControl ( vehicle ) = control_remote then
77444: LD_VAR 0 1
77448: PPUSH
77449: CALL_OW 263
77453: PUSH
77454: LD_INT 2
77456: EQUAL
77457: IFFALSE 77518
// begin wait ( 0 0$2 ) ;
77459: LD_INT 70
77461: PPUSH
77462: CALL_OW 67
// if Connect ( vehicle ) then
77466: LD_VAR 0 1
77470: PPUSH
77471: CALL 27546 0 1
77475: IFFALSE 77516
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
77477: LD_VAR 0 1
77481: PPUSH
77482: LD_EXP 103
77486: PUSH
77487: LD_VAR 0 2
77491: ARRAY
77492: PUSH
77493: LD_INT 3
77495: ARRAY
77496: PPUSH
77497: LD_EXP 103
77501: PUSH
77502: LD_VAR 0 2
77506: ARRAY
77507: PUSH
77508: LD_INT 4
77510: ARRAY
77511: PPUSH
77512: CALL_OW 171
// end else
77516: GO 77557
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
77518: LD_VAR 0 1
77522: PPUSH
77523: LD_EXP 103
77527: PUSH
77528: LD_VAR 0 2
77532: ARRAY
77533: PUSH
77534: LD_INT 3
77536: ARRAY
77537: PPUSH
77538: LD_EXP 103
77542: PUSH
77543: LD_VAR 0 2
77547: ARRAY
77548: PUSH
77549: LD_INT 4
77551: ARRAY
77552: PPUSH
77553: CALL_OW 171
// end ; end ;
77557: LD_VAR 0 3
77561: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
77562: LD_INT 0
77564: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
77565: LD_VAR 0 1
77569: PUSH
77570: LD_INT 250
77572: EQUAL
77573: PUSH
77574: LD_VAR 0 2
77578: PPUSH
77579: CALL_OW 264
77583: PUSH
77584: LD_INT 81
77586: EQUAL
77587: AND
77588: IFFALSE 77609
// MinerPlaceMine ( unit , x , y ) ;
77590: LD_VAR 0 2
77594: PPUSH
77595: LD_VAR 0 4
77599: PPUSH
77600: LD_VAR 0 5
77604: PPUSH
77605: CALL 80433 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
77609: LD_VAR 0 1
77613: PUSH
77614: LD_INT 251
77616: EQUAL
77617: PUSH
77618: LD_VAR 0 2
77622: PPUSH
77623: CALL_OW 264
77627: PUSH
77628: LD_INT 81
77630: EQUAL
77631: AND
77632: IFFALSE 77653
// MinerDetonateMine ( unit , x , y ) ;
77634: LD_VAR 0 2
77638: PPUSH
77639: LD_VAR 0 4
77643: PPUSH
77644: LD_VAR 0 5
77648: PPUSH
77649: CALL 80708 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
77653: LD_VAR 0 1
77657: PUSH
77658: LD_INT 252
77660: EQUAL
77661: PUSH
77662: LD_VAR 0 2
77666: PPUSH
77667: CALL_OW 264
77671: PUSH
77672: LD_INT 81
77674: EQUAL
77675: AND
77676: IFFALSE 77697
// MinerCreateMinefield ( unit , x , y ) ;
77678: LD_VAR 0 2
77682: PPUSH
77683: LD_VAR 0 4
77687: PPUSH
77688: LD_VAR 0 5
77692: PPUSH
77693: CALL 81125 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
77697: LD_VAR 0 1
77701: PUSH
77702: LD_INT 253
77704: EQUAL
77705: PUSH
77706: LD_VAR 0 2
77710: PPUSH
77711: CALL_OW 257
77715: PUSH
77716: LD_INT 5
77718: EQUAL
77719: AND
77720: IFFALSE 77741
// ComBinocular ( unit , x , y ) ;
77722: LD_VAR 0 2
77726: PPUSH
77727: LD_VAR 0 4
77731: PPUSH
77732: LD_VAR 0 5
77736: PPUSH
77737: CALL 81494 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
77741: LD_VAR 0 1
77745: PUSH
77746: LD_INT 254
77748: EQUAL
77749: PUSH
77750: LD_VAR 0 2
77754: PPUSH
77755: CALL_OW 264
77759: PUSH
77760: LD_INT 99
77762: EQUAL
77763: AND
77764: PUSH
77765: LD_VAR 0 3
77769: PPUSH
77770: CALL_OW 263
77774: PUSH
77775: LD_INT 3
77777: EQUAL
77778: AND
77779: IFFALSE 77795
// HackDestroyVehicle ( unit , selectedUnit ) ;
77781: LD_VAR 0 2
77785: PPUSH
77786: LD_VAR 0 3
77790: PPUSH
77791: CALL 79797 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
77795: LD_VAR 0 1
77799: PUSH
77800: LD_INT 255
77802: EQUAL
77803: PUSH
77804: LD_VAR 0 2
77808: PPUSH
77809: CALL_OW 264
77813: PUSH
77814: LD_INT 14
77816: PUSH
77817: LD_INT 53
77819: PUSH
77820: EMPTY
77821: LIST
77822: LIST
77823: IN
77824: AND
77825: PUSH
77826: LD_VAR 0 4
77830: PPUSH
77831: LD_VAR 0 5
77835: PPUSH
77836: CALL_OW 488
77840: AND
77841: IFFALSE 77865
// CutTreeXYR ( unit , x , y , 12 ) ;
77843: LD_VAR 0 2
77847: PPUSH
77848: LD_VAR 0 4
77852: PPUSH
77853: LD_VAR 0 5
77857: PPUSH
77858: LD_INT 12
77860: PPUSH
77861: CALL 77960 0 4
// if cmd = 256 then
77865: LD_VAR 0 1
77869: PUSH
77870: LD_INT 256
77872: EQUAL
77873: IFFALSE 77894
// SetFactoryWaypoint ( unit , x , y ) ;
77875: LD_VAR 0 2
77879: PPUSH
77880: LD_VAR 0 4
77884: PPUSH
77885: LD_VAR 0 5
77889: PPUSH
77890: CALL 75712 0 3
// if cmd = 257 then
77894: LD_VAR 0 1
77898: PUSH
77899: LD_INT 257
77901: EQUAL
77902: IFFALSE 77923
// SetWarehouseGatheringPoint ( unit , x , y ) ;
77904: LD_VAR 0 2
77908: PPUSH
77909: LD_VAR 0 4
77913: PPUSH
77914: LD_VAR 0 5
77918: PPUSH
77919: CALL 76074 0 3
// if cmd = 258 then
77923: LD_VAR 0 1
77927: PUSH
77928: LD_INT 258
77930: EQUAL
77931: IFFALSE 77955
// BurnTreeXYR ( unit , x , y , 8 ) ;
77933: LD_VAR 0 2
77937: PPUSH
77938: LD_VAR 0 4
77942: PPUSH
77943: LD_VAR 0 5
77947: PPUSH
77948: LD_INT 8
77950: PPUSH
77951: CALL 78354 0 4
// end ;
77955: LD_VAR 0 6
77959: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
77960: LD_INT 0
77962: PPUSH
77963: PPUSH
77964: PPUSH
77965: PPUSH
77966: PPUSH
77967: PPUSH
77968: PPUSH
77969: PPUSH
77970: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
77971: LD_VAR 0 1
77975: PPUSH
77976: CALL_OW 302
77980: NOT
77981: PUSH
77982: LD_VAR 0 2
77986: PPUSH
77987: LD_VAR 0 3
77991: PPUSH
77992: CALL_OW 488
77996: NOT
77997: OR
77998: PUSH
77999: LD_VAR 0 4
78003: NOT
78004: OR
78005: IFFALSE 78009
// exit ;
78007: GO 78349
// list := [ ] ;
78009: LD_ADDR_VAR 0 13
78013: PUSH
78014: EMPTY
78015: ST_TO_ADDR
// if x - r < 0 then
78016: LD_VAR 0 2
78020: PUSH
78021: LD_VAR 0 4
78025: MINUS
78026: PUSH
78027: LD_INT 0
78029: LESS
78030: IFFALSE 78042
// min_x := 0 else
78032: LD_ADDR_VAR 0 7
78036: PUSH
78037: LD_INT 0
78039: ST_TO_ADDR
78040: GO 78058
// min_x := x - r ;
78042: LD_ADDR_VAR 0 7
78046: PUSH
78047: LD_VAR 0 2
78051: PUSH
78052: LD_VAR 0 4
78056: MINUS
78057: ST_TO_ADDR
// if y - r < 0 then
78058: LD_VAR 0 3
78062: PUSH
78063: LD_VAR 0 4
78067: MINUS
78068: PUSH
78069: LD_INT 0
78071: LESS
78072: IFFALSE 78084
// min_y := 0 else
78074: LD_ADDR_VAR 0 8
78078: PUSH
78079: LD_INT 0
78081: ST_TO_ADDR
78082: GO 78100
// min_y := y - r ;
78084: LD_ADDR_VAR 0 8
78088: PUSH
78089: LD_VAR 0 3
78093: PUSH
78094: LD_VAR 0 4
78098: MINUS
78099: ST_TO_ADDR
// max_x := x + r ;
78100: LD_ADDR_VAR 0 9
78104: PUSH
78105: LD_VAR 0 2
78109: PUSH
78110: LD_VAR 0 4
78114: PLUS
78115: ST_TO_ADDR
// max_y := y + r ;
78116: LD_ADDR_VAR 0 10
78120: PUSH
78121: LD_VAR 0 3
78125: PUSH
78126: LD_VAR 0 4
78130: PLUS
78131: ST_TO_ADDR
// for _x = min_x to max_x do
78132: LD_ADDR_VAR 0 11
78136: PUSH
78137: DOUBLE
78138: LD_VAR 0 7
78142: DEC
78143: ST_TO_ADDR
78144: LD_VAR 0 9
78148: PUSH
78149: FOR_TO
78150: IFFALSE 78267
// for _y = min_y to max_y do
78152: LD_ADDR_VAR 0 12
78156: PUSH
78157: DOUBLE
78158: LD_VAR 0 8
78162: DEC
78163: ST_TO_ADDR
78164: LD_VAR 0 10
78168: PUSH
78169: FOR_TO
78170: IFFALSE 78263
// begin if not ValidHex ( _x , _y ) then
78172: LD_VAR 0 11
78176: PPUSH
78177: LD_VAR 0 12
78181: PPUSH
78182: CALL_OW 488
78186: NOT
78187: IFFALSE 78191
// continue ;
78189: GO 78169
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
78191: LD_VAR 0 11
78195: PPUSH
78196: LD_VAR 0 12
78200: PPUSH
78201: CALL_OW 351
78205: PUSH
78206: LD_VAR 0 11
78210: PPUSH
78211: LD_VAR 0 12
78215: PPUSH
78216: CALL_OW 554
78220: AND
78221: IFFALSE 78261
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
78223: LD_ADDR_VAR 0 13
78227: PUSH
78228: LD_VAR 0 13
78232: PPUSH
78233: LD_VAR 0 13
78237: PUSH
78238: LD_INT 1
78240: PLUS
78241: PPUSH
78242: LD_VAR 0 11
78246: PUSH
78247: LD_VAR 0 12
78251: PUSH
78252: EMPTY
78253: LIST
78254: LIST
78255: PPUSH
78256: CALL_OW 2
78260: ST_TO_ADDR
// end ;
78261: GO 78169
78263: POP
78264: POP
78265: GO 78149
78267: POP
78268: POP
// if not list then
78269: LD_VAR 0 13
78273: NOT
78274: IFFALSE 78278
// exit ;
78276: GO 78349
// for i in list do
78278: LD_ADDR_VAR 0 6
78282: PUSH
78283: LD_VAR 0 13
78287: PUSH
78288: FOR_IN
78289: IFFALSE 78347
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
78291: LD_VAR 0 1
78295: PPUSH
78296: LD_STRING M
78298: PUSH
78299: LD_VAR 0 6
78303: PUSH
78304: LD_INT 1
78306: ARRAY
78307: PUSH
78308: LD_VAR 0 6
78312: PUSH
78313: LD_INT 2
78315: ARRAY
78316: PUSH
78317: LD_INT 0
78319: PUSH
78320: LD_INT 0
78322: PUSH
78323: LD_INT 0
78325: PUSH
78326: LD_INT 0
78328: PUSH
78329: EMPTY
78330: LIST
78331: LIST
78332: LIST
78333: LIST
78334: LIST
78335: LIST
78336: LIST
78337: PUSH
78338: EMPTY
78339: LIST
78340: PPUSH
78341: CALL_OW 447
78345: GO 78288
78347: POP
78348: POP
// end ;
78349: LD_VAR 0 5
78353: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
78354: LD_INT 0
78356: PPUSH
78357: PPUSH
78358: PPUSH
78359: PPUSH
78360: PPUSH
78361: PPUSH
78362: PPUSH
78363: PPUSH
78364: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
78365: LD_VAR 0 1
78369: PPUSH
78370: CALL_OW 302
78374: NOT
78375: PUSH
78376: LD_VAR 0 2
78380: PPUSH
78381: LD_VAR 0 3
78385: PPUSH
78386: CALL_OW 488
78390: NOT
78391: OR
78392: PUSH
78393: LD_VAR 0 4
78397: NOT
78398: OR
78399: IFFALSE 78403
// exit ;
78401: GO 78751
// list := [ ] ;
78403: LD_ADDR_VAR 0 13
78407: PUSH
78408: EMPTY
78409: ST_TO_ADDR
// if x - r < 0 then
78410: LD_VAR 0 2
78414: PUSH
78415: LD_VAR 0 4
78419: MINUS
78420: PUSH
78421: LD_INT 0
78423: LESS
78424: IFFALSE 78436
// min_x := 0 else
78426: LD_ADDR_VAR 0 7
78430: PUSH
78431: LD_INT 0
78433: ST_TO_ADDR
78434: GO 78452
// min_x := x - r ;
78436: LD_ADDR_VAR 0 7
78440: PUSH
78441: LD_VAR 0 2
78445: PUSH
78446: LD_VAR 0 4
78450: MINUS
78451: ST_TO_ADDR
// if y - r < 0 then
78452: LD_VAR 0 3
78456: PUSH
78457: LD_VAR 0 4
78461: MINUS
78462: PUSH
78463: LD_INT 0
78465: LESS
78466: IFFALSE 78478
// min_y := 0 else
78468: LD_ADDR_VAR 0 8
78472: PUSH
78473: LD_INT 0
78475: ST_TO_ADDR
78476: GO 78494
// min_y := y - r ;
78478: LD_ADDR_VAR 0 8
78482: PUSH
78483: LD_VAR 0 3
78487: PUSH
78488: LD_VAR 0 4
78492: MINUS
78493: ST_TO_ADDR
// max_x := x + r ;
78494: LD_ADDR_VAR 0 9
78498: PUSH
78499: LD_VAR 0 2
78503: PUSH
78504: LD_VAR 0 4
78508: PLUS
78509: ST_TO_ADDR
// max_y := y + r ;
78510: LD_ADDR_VAR 0 10
78514: PUSH
78515: LD_VAR 0 3
78519: PUSH
78520: LD_VAR 0 4
78524: PLUS
78525: ST_TO_ADDR
// for _x = min_x to max_x do
78526: LD_ADDR_VAR 0 11
78530: PUSH
78531: DOUBLE
78532: LD_VAR 0 7
78536: DEC
78537: ST_TO_ADDR
78538: LD_VAR 0 9
78542: PUSH
78543: FOR_TO
78544: IFFALSE 78661
// for _y = min_y to max_y do
78546: LD_ADDR_VAR 0 12
78550: PUSH
78551: DOUBLE
78552: LD_VAR 0 8
78556: DEC
78557: ST_TO_ADDR
78558: LD_VAR 0 10
78562: PUSH
78563: FOR_TO
78564: IFFALSE 78657
// begin if not ValidHex ( _x , _y ) then
78566: LD_VAR 0 11
78570: PPUSH
78571: LD_VAR 0 12
78575: PPUSH
78576: CALL_OW 488
78580: NOT
78581: IFFALSE 78585
// continue ;
78583: GO 78563
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
78585: LD_VAR 0 11
78589: PPUSH
78590: LD_VAR 0 12
78594: PPUSH
78595: CALL_OW 351
78599: PUSH
78600: LD_VAR 0 11
78604: PPUSH
78605: LD_VAR 0 12
78609: PPUSH
78610: CALL_OW 554
78614: AND
78615: IFFALSE 78655
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
78617: LD_ADDR_VAR 0 13
78621: PUSH
78622: LD_VAR 0 13
78626: PPUSH
78627: LD_VAR 0 13
78631: PUSH
78632: LD_INT 1
78634: PLUS
78635: PPUSH
78636: LD_VAR 0 11
78640: PUSH
78641: LD_VAR 0 12
78645: PUSH
78646: EMPTY
78647: LIST
78648: LIST
78649: PPUSH
78650: CALL_OW 2
78654: ST_TO_ADDR
// end ;
78655: GO 78563
78657: POP
78658: POP
78659: GO 78543
78661: POP
78662: POP
// if not list then
78663: LD_VAR 0 13
78667: NOT
78668: IFFALSE 78672
// exit ;
78670: GO 78751
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
78672: LD_ADDR_VAR 0 13
78676: PUSH
78677: LD_VAR 0 1
78681: PPUSH
78682: LD_VAR 0 13
78686: PPUSH
78687: LD_INT 1
78689: PPUSH
78690: LD_INT 1
78692: PPUSH
78693: CALL 24688 0 4
78697: ST_TO_ADDR
// ComStop ( flame ) ;
78698: LD_VAR 0 1
78702: PPUSH
78703: CALL_OW 141
// for i in list do
78707: LD_ADDR_VAR 0 6
78711: PUSH
78712: LD_VAR 0 13
78716: PUSH
78717: FOR_IN
78718: IFFALSE 78749
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
78720: LD_VAR 0 1
78724: PPUSH
78725: LD_VAR 0 6
78729: PUSH
78730: LD_INT 1
78732: ARRAY
78733: PPUSH
78734: LD_VAR 0 6
78738: PUSH
78739: LD_INT 2
78741: ARRAY
78742: PPUSH
78743: CALL_OW 176
78747: GO 78717
78749: POP
78750: POP
// end ;
78751: LD_VAR 0 5
78755: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
78756: LD_EXP 106
78760: NOT
78761: IFFALSE 78811
78763: GO 78765
78765: DISABLE
// begin initHack := true ;
78766: LD_ADDR_EXP 106
78770: PUSH
78771: LD_INT 1
78773: ST_TO_ADDR
// hackTanks := [ ] ;
78774: LD_ADDR_EXP 107
78778: PUSH
78779: EMPTY
78780: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
78781: LD_ADDR_EXP 108
78785: PUSH
78786: EMPTY
78787: ST_TO_ADDR
// hackLimit := 3 ;
78788: LD_ADDR_EXP 109
78792: PUSH
78793: LD_INT 3
78795: ST_TO_ADDR
// hackDist := 12 ;
78796: LD_ADDR_EXP 110
78800: PUSH
78801: LD_INT 12
78803: ST_TO_ADDR
// hackCounter := [ ] ;
78804: LD_ADDR_EXP 111
78808: PUSH
78809: EMPTY
78810: ST_TO_ADDR
// end ;
78811: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
78812: LD_EXP 106
78816: PUSH
78817: LD_INT 34
78819: PUSH
78820: LD_INT 99
78822: PUSH
78823: EMPTY
78824: LIST
78825: LIST
78826: PPUSH
78827: CALL_OW 69
78831: AND
78832: IFFALSE 79085
78834: GO 78836
78836: DISABLE
78837: LD_INT 0
78839: PPUSH
78840: PPUSH
// begin enable ;
78841: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
78842: LD_ADDR_VAR 0 1
78846: PUSH
78847: LD_INT 34
78849: PUSH
78850: LD_INT 99
78852: PUSH
78853: EMPTY
78854: LIST
78855: LIST
78856: PPUSH
78857: CALL_OW 69
78861: PUSH
78862: FOR_IN
78863: IFFALSE 79083
// begin if not i in hackTanks then
78865: LD_VAR 0 1
78869: PUSH
78870: LD_EXP 107
78874: IN
78875: NOT
78876: IFFALSE 78959
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
78878: LD_ADDR_EXP 107
78882: PUSH
78883: LD_EXP 107
78887: PPUSH
78888: LD_EXP 107
78892: PUSH
78893: LD_INT 1
78895: PLUS
78896: PPUSH
78897: LD_VAR 0 1
78901: PPUSH
78902: CALL_OW 1
78906: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
78907: LD_ADDR_EXP 108
78911: PUSH
78912: LD_EXP 108
78916: PPUSH
78917: LD_EXP 108
78921: PUSH
78922: LD_INT 1
78924: PLUS
78925: PPUSH
78926: EMPTY
78927: PPUSH
78928: CALL_OW 1
78932: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
78933: LD_ADDR_EXP 111
78937: PUSH
78938: LD_EXP 111
78942: PPUSH
78943: LD_EXP 111
78947: PUSH
78948: LD_INT 1
78950: PLUS
78951: PPUSH
78952: EMPTY
78953: PPUSH
78954: CALL_OW 1
78958: ST_TO_ADDR
// end ; if not IsOk ( i ) then
78959: LD_VAR 0 1
78963: PPUSH
78964: CALL_OW 302
78968: NOT
78969: IFFALSE 78982
// begin HackUnlinkAll ( i ) ;
78971: LD_VAR 0 1
78975: PPUSH
78976: CALL 79088 0 1
// continue ;
78980: GO 78862
// end ; HackCheckCapturedStatus ( i ) ;
78982: LD_VAR 0 1
78986: PPUSH
78987: CALL 79531 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
78991: LD_ADDR_VAR 0 2
78995: PUSH
78996: LD_INT 81
78998: PUSH
78999: LD_VAR 0 1
79003: PPUSH
79004: CALL_OW 255
79008: PUSH
79009: EMPTY
79010: LIST
79011: LIST
79012: PUSH
79013: LD_INT 33
79015: PUSH
79016: LD_INT 3
79018: PUSH
79019: EMPTY
79020: LIST
79021: LIST
79022: PUSH
79023: LD_INT 91
79025: PUSH
79026: LD_VAR 0 1
79030: PUSH
79031: LD_EXP 110
79035: PUSH
79036: EMPTY
79037: LIST
79038: LIST
79039: LIST
79040: PUSH
79041: LD_INT 50
79043: PUSH
79044: EMPTY
79045: LIST
79046: PUSH
79047: EMPTY
79048: LIST
79049: LIST
79050: LIST
79051: LIST
79052: PPUSH
79053: CALL_OW 69
79057: ST_TO_ADDR
// if not tmp then
79058: LD_VAR 0 2
79062: NOT
79063: IFFALSE 79067
// continue ;
79065: GO 78862
// HackLink ( i , tmp ) ;
79067: LD_VAR 0 1
79071: PPUSH
79072: LD_VAR 0 2
79076: PPUSH
79077: CALL 79224 0 2
// end ;
79081: GO 78862
79083: POP
79084: POP
// end ;
79085: PPOPN 2
79087: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
79088: LD_INT 0
79090: PPUSH
79091: PPUSH
79092: PPUSH
// if not hack in hackTanks then
79093: LD_VAR 0 1
79097: PUSH
79098: LD_EXP 107
79102: IN
79103: NOT
79104: IFFALSE 79108
// exit ;
79106: GO 79219
// index := GetElementIndex ( hackTanks , hack ) ;
79108: LD_ADDR_VAR 0 4
79112: PUSH
79113: LD_EXP 107
79117: PPUSH
79118: LD_VAR 0 1
79122: PPUSH
79123: CALL 23985 0 2
79127: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
79128: LD_EXP 108
79132: PUSH
79133: LD_VAR 0 4
79137: ARRAY
79138: IFFALSE 79219
// begin for i in hackTanksCaptured [ index ] do
79140: LD_ADDR_VAR 0 3
79144: PUSH
79145: LD_EXP 108
79149: PUSH
79150: LD_VAR 0 4
79154: ARRAY
79155: PUSH
79156: FOR_IN
79157: IFFALSE 79183
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
79159: LD_VAR 0 3
79163: PUSH
79164: LD_INT 1
79166: ARRAY
79167: PPUSH
79168: LD_VAR 0 3
79172: PUSH
79173: LD_INT 2
79175: ARRAY
79176: PPUSH
79177: CALL_OW 235
79181: GO 79156
79183: POP
79184: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
79185: LD_ADDR_EXP 108
79189: PUSH
79190: LD_EXP 108
79194: PPUSH
79195: LD_VAR 0 4
79199: PPUSH
79200: EMPTY
79201: PPUSH
79202: CALL_OW 1
79206: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
79207: LD_VAR 0 1
79211: PPUSH
79212: LD_INT 0
79214: PPUSH
79215: CALL_OW 505
// end ; end ;
79219: LD_VAR 0 2
79223: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
79224: LD_INT 0
79226: PPUSH
79227: PPUSH
79228: PPUSH
// if not hack in hackTanks or not vehicles then
79229: LD_VAR 0 1
79233: PUSH
79234: LD_EXP 107
79238: IN
79239: NOT
79240: PUSH
79241: LD_VAR 0 2
79245: NOT
79246: OR
79247: IFFALSE 79251
// exit ;
79249: GO 79526
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
79251: LD_ADDR_VAR 0 2
79255: PUSH
79256: LD_VAR 0 1
79260: PPUSH
79261: LD_VAR 0 2
79265: PPUSH
79266: LD_INT 1
79268: PPUSH
79269: LD_INT 1
79271: PPUSH
79272: CALL 24635 0 4
79276: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
79277: LD_ADDR_VAR 0 5
79281: PUSH
79282: LD_EXP 107
79286: PPUSH
79287: LD_VAR 0 1
79291: PPUSH
79292: CALL 23985 0 2
79296: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
79297: LD_EXP 108
79301: PUSH
79302: LD_VAR 0 5
79306: ARRAY
79307: PUSH
79308: LD_EXP 109
79312: LESS
79313: IFFALSE 79502
// begin for i := 1 to vehicles do
79315: LD_ADDR_VAR 0 4
79319: PUSH
79320: DOUBLE
79321: LD_INT 1
79323: DEC
79324: ST_TO_ADDR
79325: LD_VAR 0 2
79329: PUSH
79330: FOR_TO
79331: IFFALSE 79500
// begin if hackTanksCaptured [ index ] = hackLimit then
79333: LD_EXP 108
79337: PUSH
79338: LD_VAR 0 5
79342: ARRAY
79343: PUSH
79344: LD_EXP 109
79348: EQUAL
79349: IFFALSE 79353
// break ;
79351: GO 79500
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
79353: LD_ADDR_EXP 111
79357: PUSH
79358: LD_EXP 111
79362: PPUSH
79363: LD_VAR 0 5
79367: PPUSH
79368: LD_EXP 111
79372: PUSH
79373: LD_VAR 0 5
79377: ARRAY
79378: PUSH
79379: LD_INT 1
79381: PLUS
79382: PPUSH
79383: CALL_OW 1
79387: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
79388: LD_ADDR_EXP 108
79392: PUSH
79393: LD_EXP 108
79397: PPUSH
79398: LD_VAR 0 5
79402: PUSH
79403: LD_EXP 108
79407: PUSH
79408: LD_VAR 0 5
79412: ARRAY
79413: PUSH
79414: LD_INT 1
79416: PLUS
79417: PUSH
79418: EMPTY
79419: LIST
79420: LIST
79421: PPUSH
79422: LD_VAR 0 2
79426: PUSH
79427: LD_VAR 0 4
79431: ARRAY
79432: PUSH
79433: LD_VAR 0 2
79437: PUSH
79438: LD_VAR 0 4
79442: ARRAY
79443: PPUSH
79444: CALL_OW 255
79448: PUSH
79449: EMPTY
79450: LIST
79451: LIST
79452: PPUSH
79453: CALL 24200 0 3
79457: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
79458: LD_VAR 0 2
79462: PUSH
79463: LD_VAR 0 4
79467: ARRAY
79468: PPUSH
79469: LD_VAR 0 1
79473: PPUSH
79474: CALL_OW 255
79478: PPUSH
79479: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
79483: LD_VAR 0 2
79487: PUSH
79488: LD_VAR 0 4
79492: ARRAY
79493: PPUSH
79494: CALL_OW 141
// end ;
79498: GO 79330
79500: POP
79501: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
79502: LD_VAR 0 1
79506: PPUSH
79507: LD_EXP 108
79511: PUSH
79512: LD_VAR 0 5
79516: ARRAY
79517: PUSH
79518: LD_INT 0
79520: PLUS
79521: PPUSH
79522: CALL_OW 505
// end ;
79526: LD_VAR 0 3
79530: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
79531: LD_INT 0
79533: PPUSH
79534: PPUSH
79535: PPUSH
79536: PPUSH
// if not hack in hackTanks then
79537: LD_VAR 0 1
79541: PUSH
79542: LD_EXP 107
79546: IN
79547: NOT
79548: IFFALSE 79552
// exit ;
79550: GO 79792
// index := GetElementIndex ( hackTanks , hack ) ;
79552: LD_ADDR_VAR 0 4
79556: PUSH
79557: LD_EXP 107
79561: PPUSH
79562: LD_VAR 0 1
79566: PPUSH
79567: CALL 23985 0 2
79571: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
79572: LD_ADDR_VAR 0 3
79576: PUSH
79577: DOUBLE
79578: LD_EXP 108
79582: PUSH
79583: LD_VAR 0 4
79587: ARRAY
79588: INC
79589: ST_TO_ADDR
79590: LD_INT 1
79592: PUSH
79593: FOR_DOWNTO
79594: IFFALSE 79766
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
79596: LD_ADDR_VAR 0 5
79600: PUSH
79601: LD_EXP 108
79605: PUSH
79606: LD_VAR 0 4
79610: ARRAY
79611: PUSH
79612: LD_VAR 0 3
79616: ARRAY
79617: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
79618: LD_VAR 0 5
79622: PUSH
79623: LD_INT 1
79625: ARRAY
79626: PPUSH
79627: CALL_OW 302
79631: NOT
79632: PUSH
79633: LD_VAR 0 5
79637: PUSH
79638: LD_INT 1
79640: ARRAY
79641: PPUSH
79642: CALL_OW 255
79646: PUSH
79647: LD_VAR 0 1
79651: PPUSH
79652: CALL_OW 255
79656: NONEQUAL
79657: OR
79658: IFFALSE 79764
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
79660: LD_VAR 0 5
79664: PUSH
79665: LD_INT 1
79667: ARRAY
79668: PPUSH
79669: CALL_OW 305
79673: PUSH
79674: LD_VAR 0 5
79678: PUSH
79679: LD_INT 1
79681: ARRAY
79682: PPUSH
79683: CALL_OW 255
79687: PUSH
79688: LD_VAR 0 1
79692: PPUSH
79693: CALL_OW 255
79697: EQUAL
79698: AND
79699: IFFALSE 79723
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
79701: LD_VAR 0 5
79705: PUSH
79706: LD_INT 1
79708: ARRAY
79709: PPUSH
79710: LD_VAR 0 5
79714: PUSH
79715: LD_INT 2
79717: ARRAY
79718: PPUSH
79719: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
79723: LD_ADDR_EXP 108
79727: PUSH
79728: LD_EXP 108
79732: PPUSH
79733: LD_VAR 0 4
79737: PPUSH
79738: LD_EXP 108
79742: PUSH
79743: LD_VAR 0 4
79747: ARRAY
79748: PPUSH
79749: LD_VAR 0 3
79753: PPUSH
79754: CALL_OW 3
79758: PPUSH
79759: CALL_OW 1
79763: ST_TO_ADDR
// end ; end ;
79764: GO 79593
79766: POP
79767: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
79768: LD_VAR 0 1
79772: PPUSH
79773: LD_EXP 108
79777: PUSH
79778: LD_VAR 0 4
79782: ARRAY
79783: PUSH
79784: LD_INT 0
79786: PLUS
79787: PPUSH
79788: CALL_OW 505
// end ;
79792: LD_VAR 0 2
79796: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
79797: LD_INT 0
79799: PPUSH
79800: PPUSH
79801: PPUSH
79802: PPUSH
// if not hack in hackTanks then
79803: LD_VAR 0 1
79807: PUSH
79808: LD_EXP 107
79812: IN
79813: NOT
79814: IFFALSE 79818
// exit ;
79816: GO 79903
// index := GetElementIndex ( hackTanks , hack ) ;
79818: LD_ADDR_VAR 0 5
79822: PUSH
79823: LD_EXP 107
79827: PPUSH
79828: LD_VAR 0 1
79832: PPUSH
79833: CALL 23985 0 2
79837: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
79838: LD_ADDR_VAR 0 4
79842: PUSH
79843: DOUBLE
79844: LD_INT 1
79846: DEC
79847: ST_TO_ADDR
79848: LD_EXP 108
79852: PUSH
79853: LD_VAR 0 5
79857: ARRAY
79858: PUSH
79859: FOR_TO
79860: IFFALSE 79901
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
79862: LD_EXP 108
79866: PUSH
79867: LD_VAR 0 5
79871: ARRAY
79872: PUSH
79873: LD_VAR 0 4
79877: ARRAY
79878: PUSH
79879: LD_INT 1
79881: ARRAY
79882: PUSH
79883: LD_VAR 0 2
79887: EQUAL
79888: IFFALSE 79899
// KillUnit ( vehicle ) ;
79890: LD_VAR 0 2
79894: PPUSH
79895: CALL_OW 66
79899: GO 79859
79901: POP
79902: POP
// end ;
79903: LD_VAR 0 3
79907: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
79908: LD_EXP 112
79912: NOT
79913: IFFALSE 79948
79915: GO 79917
79917: DISABLE
// begin initMiner := true ;
79918: LD_ADDR_EXP 112
79922: PUSH
79923: LD_INT 1
79925: ST_TO_ADDR
// minersList := [ ] ;
79926: LD_ADDR_EXP 113
79930: PUSH
79931: EMPTY
79932: ST_TO_ADDR
// minerMinesList := [ ] ;
79933: LD_ADDR_EXP 114
79937: PUSH
79938: EMPTY
79939: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
79940: LD_ADDR_EXP 115
79944: PUSH
79945: LD_INT 5
79947: ST_TO_ADDR
// end ;
79948: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
79949: LD_EXP 112
79953: PUSH
79954: LD_INT 34
79956: PUSH
79957: LD_INT 81
79959: PUSH
79960: EMPTY
79961: LIST
79962: LIST
79963: PPUSH
79964: CALL_OW 69
79968: AND
79969: IFFALSE 80430
79971: GO 79973
79973: DISABLE
79974: LD_INT 0
79976: PPUSH
79977: PPUSH
79978: PPUSH
79979: PPUSH
// begin enable ;
79980: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
79981: LD_ADDR_VAR 0 1
79985: PUSH
79986: LD_INT 34
79988: PUSH
79989: LD_INT 81
79991: PUSH
79992: EMPTY
79993: LIST
79994: LIST
79995: PPUSH
79996: CALL_OW 69
80000: PUSH
80001: FOR_IN
80002: IFFALSE 80074
// begin if not i in minersList then
80004: LD_VAR 0 1
80008: PUSH
80009: LD_EXP 113
80013: IN
80014: NOT
80015: IFFALSE 80072
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
80017: LD_ADDR_EXP 113
80021: PUSH
80022: LD_EXP 113
80026: PPUSH
80027: LD_EXP 113
80031: PUSH
80032: LD_INT 1
80034: PLUS
80035: PPUSH
80036: LD_VAR 0 1
80040: PPUSH
80041: CALL_OW 1
80045: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
80046: LD_ADDR_EXP 114
80050: PUSH
80051: LD_EXP 114
80055: PPUSH
80056: LD_EXP 114
80060: PUSH
80061: LD_INT 1
80063: PLUS
80064: PPUSH
80065: EMPTY
80066: PPUSH
80067: CALL_OW 1
80071: ST_TO_ADDR
// end end ;
80072: GO 80001
80074: POP
80075: POP
// for i := minerMinesList downto 1 do
80076: LD_ADDR_VAR 0 1
80080: PUSH
80081: DOUBLE
80082: LD_EXP 114
80086: INC
80087: ST_TO_ADDR
80088: LD_INT 1
80090: PUSH
80091: FOR_DOWNTO
80092: IFFALSE 80428
// begin if IsLive ( minersList [ i ] ) then
80094: LD_EXP 113
80098: PUSH
80099: LD_VAR 0 1
80103: ARRAY
80104: PPUSH
80105: CALL_OW 300
80109: IFFALSE 80137
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
80111: LD_EXP 113
80115: PUSH
80116: LD_VAR 0 1
80120: ARRAY
80121: PPUSH
80122: LD_EXP 114
80126: PUSH
80127: LD_VAR 0 1
80131: ARRAY
80132: PPUSH
80133: CALL_OW 505
// if not minerMinesList [ i ] then
80137: LD_EXP 114
80141: PUSH
80142: LD_VAR 0 1
80146: ARRAY
80147: NOT
80148: IFFALSE 80152
// continue ;
80150: GO 80091
// for j := minerMinesList [ i ] downto 1 do
80152: LD_ADDR_VAR 0 2
80156: PUSH
80157: DOUBLE
80158: LD_EXP 114
80162: PUSH
80163: LD_VAR 0 1
80167: ARRAY
80168: INC
80169: ST_TO_ADDR
80170: LD_INT 1
80172: PUSH
80173: FOR_DOWNTO
80174: IFFALSE 80424
// begin side := GetSide ( minersList [ i ] ) ;
80176: LD_ADDR_VAR 0 3
80180: PUSH
80181: LD_EXP 113
80185: PUSH
80186: LD_VAR 0 1
80190: ARRAY
80191: PPUSH
80192: CALL_OW 255
80196: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
80197: LD_ADDR_VAR 0 4
80201: PUSH
80202: LD_EXP 114
80206: PUSH
80207: LD_VAR 0 1
80211: ARRAY
80212: PUSH
80213: LD_VAR 0 2
80217: ARRAY
80218: PUSH
80219: LD_INT 1
80221: ARRAY
80222: PPUSH
80223: LD_EXP 114
80227: PUSH
80228: LD_VAR 0 1
80232: ARRAY
80233: PUSH
80234: LD_VAR 0 2
80238: ARRAY
80239: PUSH
80240: LD_INT 2
80242: ARRAY
80243: PPUSH
80244: CALL_OW 428
80248: ST_TO_ADDR
// if not tmp then
80249: LD_VAR 0 4
80253: NOT
80254: IFFALSE 80258
// continue ;
80256: GO 80173
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
80258: LD_VAR 0 4
80262: PUSH
80263: LD_INT 81
80265: PUSH
80266: LD_VAR 0 3
80270: PUSH
80271: EMPTY
80272: LIST
80273: LIST
80274: PPUSH
80275: CALL_OW 69
80279: IN
80280: PUSH
80281: LD_EXP 114
80285: PUSH
80286: LD_VAR 0 1
80290: ARRAY
80291: PUSH
80292: LD_VAR 0 2
80296: ARRAY
80297: PUSH
80298: LD_INT 1
80300: ARRAY
80301: PPUSH
80302: LD_EXP 114
80306: PUSH
80307: LD_VAR 0 1
80311: ARRAY
80312: PUSH
80313: LD_VAR 0 2
80317: ARRAY
80318: PUSH
80319: LD_INT 2
80321: ARRAY
80322: PPUSH
80323: CALL_OW 458
80327: AND
80328: IFFALSE 80422
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
80330: LD_EXP 114
80334: PUSH
80335: LD_VAR 0 1
80339: ARRAY
80340: PUSH
80341: LD_VAR 0 2
80345: ARRAY
80346: PUSH
80347: LD_INT 1
80349: ARRAY
80350: PPUSH
80351: LD_EXP 114
80355: PUSH
80356: LD_VAR 0 1
80360: ARRAY
80361: PUSH
80362: LD_VAR 0 2
80366: ARRAY
80367: PUSH
80368: LD_INT 2
80370: ARRAY
80371: PPUSH
80372: LD_VAR 0 3
80376: PPUSH
80377: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
80381: LD_ADDR_EXP 114
80385: PUSH
80386: LD_EXP 114
80390: PPUSH
80391: LD_VAR 0 1
80395: PPUSH
80396: LD_EXP 114
80400: PUSH
80401: LD_VAR 0 1
80405: ARRAY
80406: PPUSH
80407: LD_VAR 0 2
80411: PPUSH
80412: CALL_OW 3
80416: PPUSH
80417: CALL_OW 1
80421: ST_TO_ADDR
// end ; end ;
80422: GO 80173
80424: POP
80425: POP
// end ;
80426: GO 80091
80428: POP
80429: POP
// end ;
80430: PPOPN 4
80432: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
80433: LD_INT 0
80435: PPUSH
80436: PPUSH
// result := false ;
80437: LD_ADDR_VAR 0 4
80441: PUSH
80442: LD_INT 0
80444: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
80445: LD_VAR 0 1
80449: PPUSH
80450: CALL_OW 264
80454: PUSH
80455: LD_INT 81
80457: EQUAL
80458: NOT
80459: IFFALSE 80463
// exit ;
80461: GO 80703
// index := GetElementIndex ( minersList , unit ) ;
80463: LD_ADDR_VAR 0 5
80467: PUSH
80468: LD_EXP 113
80472: PPUSH
80473: LD_VAR 0 1
80477: PPUSH
80478: CALL 23985 0 2
80482: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
80483: LD_EXP 114
80487: PUSH
80488: LD_VAR 0 5
80492: ARRAY
80493: PUSH
80494: LD_EXP 115
80498: GREATEREQUAL
80499: IFFALSE 80503
// exit ;
80501: GO 80703
// ComMoveXY ( unit , x , y ) ;
80503: LD_VAR 0 1
80507: PPUSH
80508: LD_VAR 0 2
80512: PPUSH
80513: LD_VAR 0 3
80517: PPUSH
80518: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
80522: LD_INT 35
80524: PPUSH
80525: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
80529: LD_VAR 0 1
80533: PPUSH
80534: LD_VAR 0 2
80538: PPUSH
80539: LD_VAR 0 3
80543: PPUSH
80544: CALL 55737 0 3
80548: NOT
80549: PUSH
80550: LD_VAR 0 1
80554: PPUSH
80555: CALL_OW 314
80559: AND
80560: IFFALSE 80564
// exit ;
80562: GO 80703
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
80564: LD_VAR 0 2
80568: PPUSH
80569: LD_VAR 0 3
80573: PPUSH
80574: CALL_OW 428
80578: PUSH
80579: LD_VAR 0 1
80583: EQUAL
80584: PUSH
80585: LD_VAR 0 1
80589: PPUSH
80590: CALL_OW 314
80594: NOT
80595: AND
80596: IFFALSE 80522
// PlaySoundXY ( x , y , PlantMine ) ;
80598: LD_VAR 0 2
80602: PPUSH
80603: LD_VAR 0 3
80607: PPUSH
80608: LD_STRING PlantMine
80610: PPUSH
80611: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
80615: LD_VAR 0 2
80619: PPUSH
80620: LD_VAR 0 3
80624: PPUSH
80625: LD_VAR 0 1
80629: PPUSH
80630: CALL_OW 255
80634: PPUSH
80635: LD_INT 0
80637: PPUSH
80638: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
80642: LD_ADDR_EXP 114
80646: PUSH
80647: LD_EXP 114
80651: PPUSH
80652: LD_VAR 0 5
80656: PUSH
80657: LD_EXP 114
80661: PUSH
80662: LD_VAR 0 5
80666: ARRAY
80667: PUSH
80668: LD_INT 1
80670: PLUS
80671: PUSH
80672: EMPTY
80673: LIST
80674: LIST
80675: PPUSH
80676: LD_VAR 0 2
80680: PUSH
80681: LD_VAR 0 3
80685: PUSH
80686: EMPTY
80687: LIST
80688: LIST
80689: PPUSH
80690: CALL 24200 0 3
80694: ST_TO_ADDR
// result := true ;
80695: LD_ADDR_VAR 0 4
80699: PUSH
80700: LD_INT 1
80702: ST_TO_ADDR
// end ;
80703: LD_VAR 0 4
80707: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
80708: LD_INT 0
80710: PPUSH
80711: PPUSH
80712: PPUSH
// if not unit in minersList then
80713: LD_VAR 0 1
80717: PUSH
80718: LD_EXP 113
80722: IN
80723: NOT
80724: IFFALSE 80728
// exit ;
80726: GO 81120
// index := GetElementIndex ( minersList , unit ) ;
80728: LD_ADDR_VAR 0 6
80732: PUSH
80733: LD_EXP 113
80737: PPUSH
80738: LD_VAR 0 1
80742: PPUSH
80743: CALL 23985 0 2
80747: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
80748: LD_ADDR_VAR 0 5
80752: PUSH
80753: DOUBLE
80754: LD_EXP 114
80758: PUSH
80759: LD_VAR 0 6
80763: ARRAY
80764: INC
80765: ST_TO_ADDR
80766: LD_INT 1
80768: PUSH
80769: FOR_DOWNTO
80770: IFFALSE 80931
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
80772: LD_EXP 114
80776: PUSH
80777: LD_VAR 0 6
80781: ARRAY
80782: PUSH
80783: LD_VAR 0 5
80787: ARRAY
80788: PUSH
80789: LD_INT 1
80791: ARRAY
80792: PUSH
80793: LD_VAR 0 2
80797: EQUAL
80798: PUSH
80799: LD_EXP 114
80803: PUSH
80804: LD_VAR 0 6
80808: ARRAY
80809: PUSH
80810: LD_VAR 0 5
80814: ARRAY
80815: PUSH
80816: LD_INT 2
80818: ARRAY
80819: PUSH
80820: LD_VAR 0 3
80824: EQUAL
80825: AND
80826: IFFALSE 80929
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
80828: LD_EXP 114
80832: PUSH
80833: LD_VAR 0 6
80837: ARRAY
80838: PUSH
80839: LD_VAR 0 5
80843: ARRAY
80844: PUSH
80845: LD_INT 1
80847: ARRAY
80848: PPUSH
80849: LD_EXP 114
80853: PUSH
80854: LD_VAR 0 6
80858: ARRAY
80859: PUSH
80860: LD_VAR 0 5
80864: ARRAY
80865: PUSH
80866: LD_INT 2
80868: ARRAY
80869: PPUSH
80870: LD_VAR 0 1
80874: PPUSH
80875: CALL_OW 255
80879: PPUSH
80880: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
80884: LD_ADDR_EXP 114
80888: PUSH
80889: LD_EXP 114
80893: PPUSH
80894: LD_VAR 0 6
80898: PPUSH
80899: LD_EXP 114
80903: PUSH
80904: LD_VAR 0 6
80908: ARRAY
80909: PPUSH
80910: LD_VAR 0 5
80914: PPUSH
80915: CALL_OW 3
80919: PPUSH
80920: CALL_OW 1
80924: ST_TO_ADDR
// exit ;
80925: POP
80926: POP
80927: GO 81120
// end ; end ;
80929: GO 80769
80931: POP
80932: POP
// for i := minerMinesList [ index ] downto 1 do
80933: LD_ADDR_VAR 0 5
80937: PUSH
80938: DOUBLE
80939: LD_EXP 114
80943: PUSH
80944: LD_VAR 0 6
80948: ARRAY
80949: INC
80950: ST_TO_ADDR
80951: LD_INT 1
80953: PUSH
80954: FOR_DOWNTO
80955: IFFALSE 81118
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
80957: LD_EXP 114
80961: PUSH
80962: LD_VAR 0 6
80966: ARRAY
80967: PUSH
80968: LD_VAR 0 5
80972: ARRAY
80973: PUSH
80974: LD_INT 1
80976: ARRAY
80977: PPUSH
80978: LD_EXP 114
80982: PUSH
80983: LD_VAR 0 6
80987: ARRAY
80988: PUSH
80989: LD_VAR 0 5
80993: ARRAY
80994: PUSH
80995: LD_INT 2
80997: ARRAY
80998: PPUSH
80999: LD_VAR 0 2
81003: PPUSH
81004: LD_VAR 0 3
81008: PPUSH
81009: CALL_OW 298
81013: PUSH
81014: LD_INT 6
81016: LESS
81017: IFFALSE 81116
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
81019: LD_EXP 114
81023: PUSH
81024: LD_VAR 0 6
81028: ARRAY
81029: PUSH
81030: LD_VAR 0 5
81034: ARRAY
81035: PUSH
81036: LD_INT 1
81038: ARRAY
81039: PPUSH
81040: LD_EXP 114
81044: PUSH
81045: LD_VAR 0 6
81049: ARRAY
81050: PUSH
81051: LD_VAR 0 5
81055: ARRAY
81056: PUSH
81057: LD_INT 2
81059: ARRAY
81060: PPUSH
81061: LD_VAR 0 1
81065: PPUSH
81066: CALL_OW 255
81070: PPUSH
81071: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
81075: LD_ADDR_EXP 114
81079: PUSH
81080: LD_EXP 114
81084: PPUSH
81085: LD_VAR 0 6
81089: PPUSH
81090: LD_EXP 114
81094: PUSH
81095: LD_VAR 0 6
81099: ARRAY
81100: PPUSH
81101: LD_VAR 0 5
81105: PPUSH
81106: CALL_OW 3
81110: PPUSH
81111: CALL_OW 1
81115: ST_TO_ADDR
// end ; end ;
81116: GO 80954
81118: POP
81119: POP
// end ;
81120: LD_VAR 0 4
81124: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
81125: LD_INT 0
81127: PPUSH
81128: PPUSH
81129: PPUSH
81130: PPUSH
81131: PPUSH
81132: PPUSH
81133: PPUSH
81134: PPUSH
81135: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
81136: LD_VAR 0 1
81140: PPUSH
81141: CALL_OW 264
81145: PUSH
81146: LD_INT 81
81148: EQUAL
81149: NOT
81150: PUSH
81151: LD_VAR 0 1
81155: PUSH
81156: LD_EXP 113
81160: IN
81161: NOT
81162: OR
81163: IFFALSE 81167
// exit ;
81165: GO 81489
// index := GetElementIndex ( minersList , unit ) ;
81167: LD_ADDR_VAR 0 6
81171: PUSH
81172: LD_EXP 113
81176: PPUSH
81177: LD_VAR 0 1
81181: PPUSH
81182: CALL 23985 0 2
81186: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
81187: LD_ADDR_VAR 0 8
81191: PUSH
81192: LD_EXP 115
81196: PUSH
81197: LD_EXP 114
81201: PUSH
81202: LD_VAR 0 6
81206: ARRAY
81207: MINUS
81208: ST_TO_ADDR
// if not minesFreeAmount then
81209: LD_VAR 0 8
81213: NOT
81214: IFFALSE 81218
// exit ;
81216: GO 81489
// tmp := [ ] ;
81218: LD_ADDR_VAR 0 7
81222: PUSH
81223: EMPTY
81224: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
81225: LD_ADDR_VAR 0 5
81229: PUSH
81230: DOUBLE
81231: LD_INT 1
81233: DEC
81234: ST_TO_ADDR
81235: LD_VAR 0 8
81239: PUSH
81240: FOR_TO
81241: IFFALSE 81436
// begin _d := rand ( 0 , 5 ) ;
81243: LD_ADDR_VAR 0 11
81247: PUSH
81248: LD_INT 0
81250: PPUSH
81251: LD_INT 5
81253: PPUSH
81254: CALL_OW 12
81258: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
81259: LD_ADDR_VAR 0 12
81263: PUSH
81264: LD_INT 2
81266: PPUSH
81267: LD_INT 6
81269: PPUSH
81270: CALL_OW 12
81274: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
81275: LD_ADDR_VAR 0 9
81279: PUSH
81280: LD_VAR 0 2
81284: PPUSH
81285: LD_VAR 0 11
81289: PPUSH
81290: LD_VAR 0 12
81294: PPUSH
81295: CALL_OW 272
81299: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
81300: LD_ADDR_VAR 0 10
81304: PUSH
81305: LD_VAR 0 3
81309: PPUSH
81310: LD_VAR 0 11
81314: PPUSH
81315: LD_VAR 0 12
81319: PPUSH
81320: CALL_OW 273
81324: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
81325: LD_VAR 0 9
81329: PPUSH
81330: LD_VAR 0 10
81334: PPUSH
81335: CALL_OW 488
81339: PUSH
81340: LD_VAR 0 9
81344: PUSH
81345: LD_VAR 0 10
81349: PUSH
81350: EMPTY
81351: LIST
81352: LIST
81353: PUSH
81354: LD_VAR 0 7
81358: IN
81359: NOT
81360: AND
81361: PUSH
81362: LD_VAR 0 9
81366: PPUSH
81367: LD_VAR 0 10
81371: PPUSH
81372: CALL_OW 458
81376: NOT
81377: AND
81378: IFFALSE 81420
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
81380: LD_ADDR_VAR 0 7
81384: PUSH
81385: LD_VAR 0 7
81389: PPUSH
81390: LD_VAR 0 7
81394: PUSH
81395: LD_INT 1
81397: PLUS
81398: PPUSH
81399: LD_VAR 0 9
81403: PUSH
81404: LD_VAR 0 10
81408: PUSH
81409: EMPTY
81410: LIST
81411: LIST
81412: PPUSH
81413: CALL_OW 1
81417: ST_TO_ADDR
81418: GO 81434
// i := i - 1 ;
81420: LD_ADDR_VAR 0 5
81424: PUSH
81425: LD_VAR 0 5
81429: PUSH
81430: LD_INT 1
81432: MINUS
81433: ST_TO_ADDR
// end ;
81434: GO 81240
81436: POP
81437: POP
// for i in tmp do
81438: LD_ADDR_VAR 0 5
81442: PUSH
81443: LD_VAR 0 7
81447: PUSH
81448: FOR_IN
81449: IFFALSE 81487
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
81451: LD_VAR 0 1
81455: PPUSH
81456: LD_VAR 0 5
81460: PUSH
81461: LD_INT 1
81463: ARRAY
81464: PPUSH
81465: LD_VAR 0 5
81469: PUSH
81470: LD_INT 2
81472: ARRAY
81473: PPUSH
81474: CALL 80433 0 3
81478: NOT
81479: IFFALSE 81485
// exit ;
81481: POP
81482: POP
81483: GO 81489
81485: GO 81448
81487: POP
81488: POP
// end ;
81489: LD_VAR 0 4
81493: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
81494: LD_INT 0
81496: PPUSH
81497: PPUSH
81498: PPUSH
81499: PPUSH
81500: PPUSH
81501: PPUSH
81502: PPUSH
// if not GetClass ( unit ) = class_sniper then
81503: LD_VAR 0 1
81507: PPUSH
81508: CALL_OW 257
81512: PUSH
81513: LD_INT 5
81515: EQUAL
81516: NOT
81517: IFFALSE 81521
// exit ;
81519: GO 81909
// dist := 8 ;
81521: LD_ADDR_VAR 0 5
81525: PUSH
81526: LD_INT 8
81528: ST_TO_ADDR
// viewRange := 12 ;
81529: LD_ADDR_VAR 0 7
81533: PUSH
81534: LD_INT 12
81536: ST_TO_ADDR
// side := GetSide ( unit ) ;
81537: LD_ADDR_VAR 0 6
81541: PUSH
81542: LD_VAR 0 1
81546: PPUSH
81547: CALL_OW 255
81551: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
81552: LD_INT 61
81554: PPUSH
81555: LD_VAR 0 6
81559: PPUSH
81560: CALL_OW 321
81564: PUSH
81565: LD_INT 2
81567: EQUAL
81568: IFFALSE 81578
// viewRange := 16 ;
81570: LD_ADDR_VAR 0 7
81574: PUSH
81575: LD_INT 16
81577: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
81578: LD_VAR 0 1
81582: PPUSH
81583: LD_VAR 0 2
81587: PPUSH
81588: LD_VAR 0 3
81592: PPUSH
81593: CALL_OW 297
81597: PUSH
81598: LD_VAR 0 5
81602: GREATER
81603: IFFALSE 81682
// begin ComMoveXY ( unit , x , y ) ;
81605: LD_VAR 0 1
81609: PPUSH
81610: LD_VAR 0 2
81614: PPUSH
81615: LD_VAR 0 3
81619: PPUSH
81620: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
81624: LD_INT 35
81626: PPUSH
81627: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
81631: LD_VAR 0 1
81635: PPUSH
81636: LD_VAR 0 2
81640: PPUSH
81641: LD_VAR 0 3
81645: PPUSH
81646: CALL 55737 0 3
81650: NOT
81651: IFFALSE 81655
// exit ;
81653: GO 81909
// until GetDistUnitXY ( unit , x , y ) < dist ;
81655: LD_VAR 0 1
81659: PPUSH
81660: LD_VAR 0 2
81664: PPUSH
81665: LD_VAR 0 3
81669: PPUSH
81670: CALL_OW 297
81674: PUSH
81675: LD_VAR 0 5
81679: LESS
81680: IFFALSE 81624
// end ; ComTurnXY ( unit , x , y ) ;
81682: LD_VAR 0 1
81686: PPUSH
81687: LD_VAR 0 2
81691: PPUSH
81692: LD_VAR 0 3
81696: PPUSH
81697: CALL_OW 118
// wait ( 5 ) ;
81701: LD_INT 5
81703: PPUSH
81704: CALL_OW 67
// _d := GetDir ( unit ) ;
81708: LD_ADDR_VAR 0 10
81712: PUSH
81713: LD_VAR 0 1
81717: PPUSH
81718: CALL_OW 254
81722: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
81723: LD_ADDR_VAR 0 8
81727: PUSH
81728: LD_VAR 0 1
81732: PPUSH
81733: CALL_OW 250
81737: PPUSH
81738: LD_VAR 0 10
81742: PPUSH
81743: LD_VAR 0 5
81747: PPUSH
81748: CALL_OW 272
81752: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
81753: LD_ADDR_VAR 0 9
81757: PUSH
81758: LD_VAR 0 1
81762: PPUSH
81763: CALL_OW 251
81767: PPUSH
81768: LD_VAR 0 10
81772: PPUSH
81773: LD_VAR 0 5
81777: PPUSH
81778: CALL_OW 273
81782: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
81783: LD_VAR 0 8
81787: PPUSH
81788: LD_VAR 0 9
81792: PPUSH
81793: CALL_OW 488
81797: NOT
81798: IFFALSE 81802
// exit ;
81800: GO 81909
// ComAnimCustom ( unit , 1 ) ;
81802: LD_VAR 0 1
81806: PPUSH
81807: LD_INT 1
81809: PPUSH
81810: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
81814: LD_VAR 0 8
81818: PPUSH
81819: LD_VAR 0 9
81823: PPUSH
81824: LD_VAR 0 6
81828: PPUSH
81829: LD_VAR 0 7
81833: PPUSH
81834: CALL_OW 330
// repeat wait ( 1 ) ;
81838: LD_INT 1
81840: PPUSH
81841: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
81845: LD_VAR 0 1
81849: PPUSH
81850: CALL_OW 316
81854: PUSH
81855: LD_VAR 0 1
81859: PPUSH
81860: CALL_OW 314
81864: OR
81865: PUSH
81866: LD_VAR 0 1
81870: PPUSH
81871: CALL_OW 302
81875: NOT
81876: OR
81877: PUSH
81878: LD_VAR 0 1
81882: PPUSH
81883: CALL_OW 301
81887: OR
81888: IFFALSE 81838
// RemoveSeeing ( _x , _y , side ) ;
81890: LD_VAR 0 8
81894: PPUSH
81895: LD_VAR 0 9
81899: PPUSH
81900: LD_VAR 0 6
81904: PPUSH
81905: CALL_OW 331
// end ;
81909: LD_VAR 0 4
81913: RET
