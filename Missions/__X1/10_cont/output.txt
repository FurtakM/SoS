// starting begin ResetFog ;
   0: CALL_OW 335
// Difficulty := 4 ;
   4: LD_ADDR_OWVAR 67
   8: PUSH
   9: LD_INT 4
  11: ST_TO_ADDR
// Init ;
  12: CALL 37 0 0
// CreateNature ;
  16: CALL 7947 0 0
// PrepareArabian ;
  20: CALL 218 0 0
// PrepareAmerican ;
  24: CALL 522 0 0
// PrepareLegion ;
  28: CALL 4029 0 0
// Action ;
  32: CALL 8445 0 0
// end ;
  36: END
// export debug , prefix , amScriptActive , legScriptActive , apeAmount , spotAmericanBase , spotArabianBase , spotByAmerican , spotByLegion , spotLegion , americanDestroyed , legionDestroyed , hasMastodont , hasVehicles , hasTigers , hasApes , hasDrugs , canFinish , gameActive ; function Init ; begin
  37: LD_INT 0
  39: PPUSH
// debug := true ;
  40: LD_ADDR_EXP 1
  44: PUSH
  45: LD_INT 1
  47: ST_TO_ADDR
// prefix := 09_ ;
  48: LD_ADDR_EXP 2
  52: PUSH
  53: LD_STRING 09_
  55: ST_TO_ADDR
// amScriptActive := true ;
  56: LD_ADDR_EXP 3
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// legScriptActive := true ;
  64: LD_ADDR_EXP 4
  68: PUSH
  69: LD_INT 1
  71: ST_TO_ADDR
// apeAmount := [ 16 , 14 , 12 , 10 ] [ Difficulty ] ;
  72: LD_ADDR_EXP 5
  76: PUSH
  77: LD_INT 16
  79: PUSH
  80: LD_INT 14
  82: PUSH
  83: LD_INT 12
  85: PUSH
  86: LD_INT 10
  88: PUSH
  89: EMPTY
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: PUSH
  95: LD_OWVAR 67
  99: ARRAY
 100: ST_TO_ADDR
// spotAmericanBase := false ;
 101: LD_ADDR_EXP 6
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// spotArabianBase := false ;
 109: LD_ADDR_EXP 7
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// spotLegion := false ;
 117: LD_ADDR_EXP 10
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// spotByAmerican := false ;
 125: LD_ADDR_EXP 8
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// spotByLegion := false ;
 133: LD_ADDR_EXP 9
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// americanDestroyed := false ;
 141: LD_ADDR_EXP 11
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// legionDestroyed := false ;
 149: LD_ADDR_EXP 12
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// hasMastodont := false ;
 157: LD_ADDR_EXP 13
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// hasVehicles := false ;
 165: LD_ADDR_EXP 14
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// hasTigers := false ;
 173: LD_ADDR_EXP 15
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// hasApes := false ;
 181: LD_ADDR_EXP 16
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// hasDrugs := false ;
 189: LD_ADDR_EXP 17
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// canFinish := false ;
 197: LD_ADDR_EXP 18
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// gameActive := false ;
 205: LD_ADDR_EXP 19
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// end ; end_of_file
 213: LD_VAR 0 1
 217: RET
// export Heike , Omar ; export heikeVehicle , omarVehicle ; export function PrepareArabian ; var i , tmp ; begin
 218: LD_INT 0
 220: PPUSH
 221: PPUSH
 222: PPUSH
// uc_side := 2 ;
 223: LD_ADDR_OWVAR 20
 227: PUSH
 228: LD_INT 2
 230: ST_TO_ADDR
// uc_nation := nation_arabian ;
 231: LD_ADDR_OWVAR 21
 235: PUSH
 236: LD_INT 2
 238: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 239: LD_ADDR_EXP 20
 243: PUSH
 244: LD_STRING Heike
 246: PPUSH
 247: LD_EXP 1
 251: NOT
 252: PPUSH
 253: LD_EXP 2
 257: PPUSH
 258: CALL 16257 0 3
 262: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 263: LD_INT 14
 265: PPUSH
 266: LD_INT 3
 268: PPUSH
 269: LD_INT 1
 271: PPUSH
 272: LD_INT 27
 274: PPUSH
 275: LD_INT 100
 277: PPUSH
 278: CALL 21097 0 5
// heikeVehicle := CreateVehicle ;
 282: LD_ADDR_EXP 22
 286: PUSH
 287: CALL_OW 45
 291: ST_TO_ADDR
// SetDir ( heikeVehicle , 4 ) ;
 292: LD_EXP 22
 296: PPUSH
 297: LD_INT 4
 299: PPUSH
 300: CALL_OW 233
// PlaceUnitXY ( heikeVehicle , 118 , 37 , false ) ;
 304: LD_EXP 22
 308: PPUSH
 309: LD_INT 118
 311: PPUSH
 312: LD_INT 37
 314: PPUSH
 315: LD_INT 0
 317: PPUSH
 318: CALL_OW 48
// SetClass ( Heike , class_soldier ) ;
 322: LD_EXP 20
 326: PPUSH
 327: LD_INT 1
 329: PPUSH
 330: CALL_OW 336
// PlaceHumanInUnit ( Heike , heikeVehicle ) ;
 334: LD_EXP 20
 338: PPUSH
 339: LD_EXP 22
 343: PPUSH
 344: CALL_OW 52
// uc_side := 5 ;
 348: LD_ADDR_OWVAR 20
 352: PUSH
 353: LD_INT 5
 355: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
 356: LD_ADDR_EXP 21
 360: PUSH
 361: LD_STRING Omar
 363: PPUSH
 364: CALL_OW 25
 368: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 369: LD_INT 14
 371: PPUSH
 372: LD_INT 3
 374: PPUSH
 375: LD_INT 1
 377: PPUSH
 378: LD_INT 27
 380: PPUSH
 381: LD_INT 100
 383: PPUSH
 384: CALL 21097 0 5
// omarVehicle := CreateVehicle ;
 388: LD_ADDR_EXP 23
 392: PUSH
 393: CALL_OW 45
 397: ST_TO_ADDR
// SetDir ( omarVehicle , 0 ) ;
 398: LD_EXP 23
 402: PPUSH
 403: LD_INT 0
 405: PPUSH
 406: CALL_OW 233
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) do
 410: LD_ADDR_VAR 0 2
 414: PUSH
 415: LD_INT 22
 417: PUSH
 418: LD_INT 5
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PUSH
 425: LD_INT 21
 427: PUSH
 428: LD_INT 3
 430: PUSH
 431: EMPTY
 432: LIST
 433: LIST
 434: PUSH
 435: EMPTY
 436: LIST
 437: LIST
 438: PPUSH
 439: CALL_OW 69
 443: PUSH
 444: FOR_IN
 445: IFFALSE 469
// SetLives ( i , rand ( 300 , 499 ) ) ;
 447: LD_VAR 0 2
 451: PPUSH
 452: LD_INT 300
 454: PPUSH
 455: LD_INT 499
 457: PPUSH
 458: CALL_OW 12
 462: PPUSH
 463: CALL_OW 234
 467: GO 444
 469: POP
 470: POP
// SetResourceType ( GetBase ( arBase ) , mat_cans , 100 - ( 20 * Difficulty ) ) ;
 471: LD_INT 85
 473: PPUSH
 474: CALL_OW 274
 478: PPUSH
 479: LD_INT 1
 481: PPUSH
 482: LD_INT 100
 484: PUSH
 485: LD_INT 20
 487: PUSH
 488: LD_OWVAR 67
 492: MUL
 493: MINUS
 494: PPUSH
 495: CALL_OW 277
// SetResourceType ( GetBase ( arBase ) , mat_oil , 10 ) ;
 499: LD_INT 85
 501: PPUSH
 502: CALL_OW 274
 506: PPUSH
 507: LD_INT 2
 509: PPUSH
 510: LD_INT 10
 512: PPUSH
 513: CALL_OW 277
// end ; end_of_file
 517: LD_VAR 0 1
 521: RET
// export amForces , amTech , amConstructList , amHealPoint , amBuildings , amTanks , amCommander , amCargo ; export function PrepareAmerican ; var i , j , b , un , skill , sources ; begin
 522: LD_INT 0
 524: PPUSH
 525: PPUSH
 526: PPUSH
 527: PPUSH
 528: PPUSH
 529: PPUSH
 530: PPUSH
// uc_side := 1 ;
 531: LD_ADDR_OWVAR 20
 535: PUSH
 536: LD_INT 1
 538: ST_TO_ADDR
// uc_nation := nation_american ;
 539: LD_ADDR_OWVAR 21
 543: PUSH
 544: LD_INT 1
 546: ST_TO_ADDR
// amForces := [ ] ;
 547: LD_ADDR_EXP 24
 551: PUSH
 552: EMPTY
 553: ST_TO_ADDR
// amTech := GetTechNation ( 1 , nation_american , state_enabled ) ;
 554: LD_ADDR_EXP 25
 558: PUSH
 559: LD_INT 1
 561: PPUSH
 562: LD_INT 1
 564: PPUSH
 565: LD_INT 1
 567: PPUSH
 568: CALL 16320 0 3
 572: ST_TO_ADDR
// amConstructList := [ ] ;
 573: LD_ADDR_EXP 26
 577: PUSH
 578: EMPTY
 579: ST_TO_ADDR
// amHealPoint := [ 94 , 132 ] ;
 580: LD_ADDR_EXP 27
 584: PUSH
 585: LD_INT 94
 587: PUSH
 588: LD_INT 132
 590: PUSH
 591: EMPTY
 592: LIST
 593: LIST
 594: ST_TO_ADDR
// amBuildings := [ ] ;
 595: LD_ADDR_EXP 28
 599: PUSH
 600: EMPTY
 601: ST_TO_ADDR
// amTanks := [ ] ;
 602: LD_ADDR_EXP 29
 606: PUSH
 607: EMPTY
 608: ST_TO_ADDR
// amCargo := 0 ;
 609: LD_ADDR_EXP 31
 613: PUSH
 614: LD_INT 0
 616: ST_TO_ADDR
// sources := [ [ 77 , 121 ] , [ 98 , 145 ] ] ;
 617: LD_ADDR_VAR 0 7
 621: PUSH
 622: LD_INT 77
 624: PUSH
 625: LD_INT 121
 627: PUSH
 628: EMPTY
 629: LIST
 630: LIST
 631: PUSH
 632: LD_INT 98
 634: PUSH
 635: LD_INT 145
 637: PUSH
 638: EMPTY
 639: LIST
 640: LIST
 641: PUSH
 642: EMPTY
 643: LIST
 644: LIST
 645: ST_TO_ADDR
// for i in sources do
 646: LD_ADDR_VAR 0 2
 650: PUSH
 651: LD_VAR 0 7
 655: PUSH
 656: FOR_IN
 657: IFFALSE 686
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 1 ) ;
 659: LD_VAR 0 2
 663: PUSH
 664: LD_INT 1
 666: ARRAY
 667: PPUSH
 668: LD_VAR 0 2
 672: PUSH
 673: LD_INT 2
 675: ARRAY
 676: PPUSH
 677: LD_INT 1
 679: PPUSH
 680: CALL_OW 441
 684: GO 656
 686: POP
 687: POP
// SetResourceType ( GetBase ( amBase ) , mat_cans , 550 ) ;
 688: LD_INT 2
 690: PPUSH
 691: CALL_OW 274
 695: PPUSH
 696: LD_INT 1
 698: PPUSH
 699: LD_INT 550
 701: PPUSH
 702: CALL_OW 277
// SetResourceType ( GetBase ( amBase ) , mat_oil , 120 ) ;
 706: LD_INT 2
 708: PPUSH
 709: CALL_OW 274
 713: PPUSH
 714: LD_INT 2
 716: PPUSH
 717: LD_INT 120
 719: PPUSH
 720: CALL_OW 277
// SetResourceType ( GetBase ( amBase ) , mat_siberit , 30 ) ;
 724: LD_INT 2
 726: PPUSH
 727: CALL_OW 274
 731: PPUSH
 732: LD_INT 3
 734: PPUSH
 735: LD_INT 30
 737: PPUSH
 738: CALL_OW 277
// skill := [ 6 , 7 , 8 , 9 ] [ Difficulty ] ;
 742: LD_ADDR_VAR 0 6
 746: PUSH
 747: LD_INT 6
 749: PUSH
 750: LD_INT 7
 752: PUSH
 753: LD_INT 8
 755: PUSH
 756: LD_INT 9
 758: PUSH
 759: EMPTY
 760: LIST
 761: LIST
 762: LIST
 763: LIST
 764: PUSH
 765: LD_OWVAR 67
 769: ARRAY
 770: ST_TO_ADDR
// amCommander := PrepareUnit ( Brown , false ,  ) ;
 771: LD_ADDR_EXP 30
 775: PUSH
 776: LD_STRING Brown
 778: PPUSH
 779: LD_INT 0
 781: PPUSH
 782: LD_STRING 
 784: PPUSH
 785: CALL 16257 0 3
 789: ST_TO_ADDR
// PlaceHumanInUnit ( amCommander , amBase ) ;
 790: LD_EXP 30
 794: PPUSH
 795: LD_INT 2
 797: PPUSH
 798: CALL_OW 52
// for i := 1 to 4 do
 802: LD_ADDR_VAR 0 2
 806: PUSH
 807: DOUBLE
 808: LD_INT 1
 810: DEC
 811: ST_TO_ADDR
 812: LD_INT 4
 814: PUSH
 815: FOR_TO
 816: IFFALSE 1340
// for j := 1 to [ [ 5 , 6 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] , [ 5 , 5 , 6 , 7 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
 818: LD_ADDR_VAR 0 3
 822: PUSH
 823: DOUBLE
 824: LD_INT 1
 826: DEC
 827: ST_TO_ADDR
 828: LD_INT 5
 830: PUSH
 831: LD_INT 6
 833: PUSH
 834: LD_INT 8
 836: PUSH
 837: LD_INT 9
 839: PUSH
 840: EMPTY
 841: LIST
 842: LIST
 843: LIST
 844: LIST
 845: PUSH
 846: LD_OWVAR 67
 850: ARRAY
 851: PUSH
 852: LD_INT 3
 854: PUSH
 855: LD_INT 4
 857: PUSH
 858: LD_INT 5
 860: PUSH
 861: LD_INT 5
 863: PUSH
 864: EMPTY
 865: LIST
 866: LIST
 867: LIST
 868: LIST
 869: PUSH
 870: LD_OWVAR 67
 874: ARRAY
 875: PUSH
 876: LD_INT 5
 878: PUSH
 879: LD_INT 5
 881: PUSH
 882: LD_INT 6
 884: PUSH
 885: LD_INT 7
 887: PUSH
 888: EMPTY
 889: LIST
 890: LIST
 891: LIST
 892: LIST
 893: PUSH
 894: LD_OWVAR 67
 898: ARRAY
 899: PUSH
 900: LD_INT 2
 902: PUSH
 903: LD_INT 3
 905: PUSH
 906: LD_INT 3
 908: PUSH
 909: LD_INT 3
 911: PUSH
 912: EMPTY
 913: LIST
 914: LIST
 915: LIST
 916: LIST
 917: PUSH
 918: LD_OWVAR 67
 922: ARRAY
 923: PUSH
 924: EMPTY
 925: LIST
 926: LIST
 927: LIST
 928: LIST
 929: PUSH
 930: LD_VAR 0 2
 934: ARRAY
 935: PUSH
 936: FOR_TO
 937: IFFALSE 1336
// begin PrepareHuman ( false , i , skill ) ;
 939: LD_INT 0
 941: PPUSH
 942: LD_VAR 0 2
 946: PPUSH
 947: LD_VAR 0 6
 951: PPUSH
 952: CALL_OW 380
// un := CreateHuman ;
 956: LD_ADDR_VAR 0 5
 960: PUSH
 961: CALL_OW 44
 965: ST_TO_ADDR
// amForces := Join ( amForces , un ) ;
 966: LD_ADDR_EXP 24
 970: PUSH
 971: LD_EXP 24
 975: PPUSH
 976: LD_VAR 0 5
 980: PPUSH
 981: CALL 53946 0 2
 985: ST_TO_ADDR
// case i of 1 :
 986: LD_VAR 0 2
 990: PUSH
 991: LD_INT 1
 993: DOUBLE
 994: EQUAL
 995: IFTRUE 999
 997: GO 1068
 999: POP
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] ] ) ; 2 :
1000: LD_ADDR_VAR 0 4
1004: PUSH
1005: LD_INT 22
1007: PUSH
1008: LD_INT 1
1010: PUSH
1011: EMPTY
1012: LIST
1013: LIST
1014: PUSH
1015: LD_INT 2
1017: PUSH
1018: LD_INT 30
1020: PUSH
1021: LD_INT 32
1023: PUSH
1024: EMPTY
1025: LIST
1026: LIST
1027: PUSH
1028: LD_INT 30
1030: PUSH
1031: LD_INT 5
1033: PUSH
1034: EMPTY
1035: LIST
1036: LIST
1037: PUSH
1038: EMPTY
1039: LIST
1040: LIST
1041: LIST
1042: PUSH
1043: LD_INT 3
1045: PUSH
1046: LD_INT 62
1048: PUSH
1049: EMPTY
1050: LIST
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: LIST
1060: PPUSH
1061: CALL_OW 69
1065: ST_TO_ADDR
1066: GO 1247
1068: LD_INT 2
1070: DOUBLE
1071: EQUAL
1072: IFTRUE 1076
1074: GO 1105
1076: POP
// b := UnitFilter ( amBase , [ f_not , [ f_full ] ] ) ; 3 :
1077: LD_ADDR_VAR 0 4
1081: PUSH
1082: LD_INT 2
1084: PPUSH
1085: LD_INT 3
1087: PUSH
1088: LD_INT 62
1090: PUSH
1091: EMPTY
1092: LIST
1093: PUSH
1094: EMPTY
1095: LIST
1096: LIST
1097: PPUSH
1098: CALL_OW 72
1102: ST_TO_ADDR
1103: GO 1247
1105: LD_INT 3
1107: DOUBLE
1108: EQUAL
1109: IFTRUE 1113
1111: GO 1187
1113: POP
// b := ReverseArray ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_control_tower ] ] , [ f_not , [ f_full ] ] ] ) ) ; 4 :
1114: LD_ADDR_VAR 0 4
1118: PUSH
1119: LD_INT 22
1121: PUSH
1122: LD_INT 1
1124: PUSH
1125: EMPTY
1126: LIST
1127: LIST
1128: PUSH
1129: LD_INT 2
1131: PUSH
1132: LD_INT 30
1134: PUSH
1135: LD_INT 3
1137: PUSH
1138: EMPTY
1139: LIST
1140: LIST
1141: PUSH
1142: LD_INT 30
1144: PUSH
1145: LD_INT 36
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: PUSH
1157: LD_INT 3
1159: PUSH
1160: LD_INT 62
1162: PUSH
1163: EMPTY
1164: LIST
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: LIST
1174: PPUSH
1175: CALL_OW 69
1179: PPUSH
1180: CALL 49235 0 1
1184: ST_TO_ADDR
1185: GO 1247
1187: LD_INT 4
1189: DOUBLE
1190: EQUAL
1191: IFTRUE 1195
1193: GO 1246
1195: POP
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_full ] , [ f_not , [ f_full ] ] ] ) ; end ;
1196: LD_ADDR_VAR 0 4
1200: PUSH
1201: LD_INT 22
1203: PUSH
1204: LD_INT 1
1206: PUSH
1207: EMPTY
1208: LIST
1209: LIST
1210: PUSH
1211: LD_INT 30
1213: PUSH
1214: LD_INT 8
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: PUSH
1221: LD_INT 3
1223: PUSH
1224: LD_INT 62
1226: PUSH
1227: EMPTY
1228: LIST
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: PUSH
1234: EMPTY
1235: LIST
1236: LIST
1237: LIST
1238: PPUSH
1239: CALL_OW 69
1243: ST_TO_ADDR
1244: GO 1247
1246: POP
// if b then
1247: LD_VAR 0 4
1251: IFFALSE 1313
// begin if GetBType ( b [ 1 ] ) = b_barracks and Prob ( 50 ) then
1253: LD_VAR 0 4
1257: PUSH
1258: LD_INT 1
1260: ARRAY
1261: PPUSH
1262: CALL_OW 266
1266: PUSH
1267: LD_INT 5
1269: EQUAL
1270: PUSH
1271: LD_INT 50
1273: PPUSH
1274: CALL_OW 13
1278: AND
1279: IFFALSE 1293
// SetClass ( un , class_sniper ) ;
1281: LD_VAR 0 5
1285: PPUSH
1286: LD_INT 5
1288: PPUSH
1289: CALL_OW 336
// PlaceHumanInUnit ( un , b [ 1 ] ) ;
1293: LD_VAR 0 5
1297: PPUSH
1298: LD_VAR 0 4
1302: PUSH
1303: LD_INT 1
1305: ARRAY
1306: PPUSH
1307: CALL_OW 52
// end else
1311: GO 1334
// PlaceUnitXYR ( un , 92 , 137 , 4 , false ) ;
1313: LD_VAR 0 5
1317: PPUSH
1318: LD_INT 92
1320: PPUSH
1321: LD_INT 137
1323: PPUSH
1324: LD_INT 4
1326: PPUSH
1327: LD_INT 0
1329: PPUSH
1330: CALL_OW 50
// end ;
1334: GO 936
1336: POP
1337: POP
1338: GO 815
1340: POP
1341: POP
// end ;
1342: LD_VAR 0 1
1346: RET
// every 0 0$2 trigger amScriptActive and Count ( amForces ) do var i , tmp , remote , undone , side , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
1347: LD_EXP 3
1351: PUSH
1352: LD_EXP 24
1356: PPUSH
1357: CALL 18359 0 1
1361: AND
1362: IFFALSE 3730
1364: GO 1366
1366: DISABLE
1367: LD_INT 0
1369: PPUSH
1370: PPUSH
1371: PPUSH
1372: PPUSH
1373: PPUSH
1374: PPUSH
1375: PPUSH
1376: PPUSH
1377: PPUSH
1378: PPUSH
1379: PPUSH
1380: PPUSH
1381: PPUSH
1382: PPUSH
1383: PPUSH
1384: PPUSH
1385: PPUSH
1386: PPUSH
// begin enable ;
1387: ENABLE
// side := 1 ;
1388: LD_ADDR_VAR 0 5
1392: PUSH
1393: LD_INT 1
1395: ST_TO_ADDR
// remote := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
1396: LD_ADDR_VAR 0 3
1400: PUSH
1401: LD_INT 22
1403: PUSH
1404: LD_VAR 0 5
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: PUSH
1413: LD_INT 33
1415: PUSH
1416: LD_INT 2
1418: PUSH
1419: EMPTY
1420: LIST
1421: LIST
1422: PUSH
1423: LD_INT 50
1425: PUSH
1426: EMPTY
1427: LIST
1428: PUSH
1429: LD_INT 3
1431: PUSH
1432: LD_INT 61
1434: PUSH
1435: EMPTY
1436: LIST
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: PUSH
1442: EMPTY
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: PPUSH
1448: CALL_OW 69
1452: ST_TO_ADDR
// if remote and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_btype , b_control_tower ] ] ) ) then
1453: LD_VAR 0 3
1457: PUSH
1458: LD_INT 22
1460: PUSH
1461: LD_VAR 0 5
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: PUSH
1470: LD_INT 50
1472: PUSH
1473: EMPTY
1474: LIST
1475: PUSH
1476: LD_INT 30
1478: PUSH
1479: LD_INT 36
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: LIST
1490: PPUSH
1491: CALL_OW 69
1495: PPUSH
1496: CALL 18359 0 1
1500: AND
1501: IFFALSE 1529
// for i in remote do
1503: LD_ADDR_VAR 0 1
1507: PUSH
1508: LD_VAR 0 3
1512: PUSH
1513: FOR_IN
1514: IFFALSE 1527
// Connect ( i ) ;
1516: LD_VAR 0 1
1520: PPUSH
1521: CALL 24565 0 1
1525: GO 1513
1527: POP
1528: POP
// if amTech then
1529: LD_EXP 25
1533: IFFALSE 1689
// begin lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1535: LD_ADDR_VAR 0 6
1539: PUSH
1540: LD_INT 22
1542: PUSH
1543: LD_VAR 0 5
1547: PUSH
1548: EMPTY
1549: LIST
1550: LIST
1551: PUSH
1552: LD_INT 50
1554: PUSH
1555: EMPTY
1556: LIST
1557: PUSH
1558: LD_INT 2
1560: PUSH
1561: LD_INT 30
1563: PUSH
1564: LD_INT 6
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: PUSH
1571: LD_INT 30
1573: PUSH
1574: LD_INT 7
1576: PUSH
1577: EMPTY
1578: LIST
1579: LIST
1580: PUSH
1581: LD_INT 30
1583: PUSH
1584: LD_INT 8
1586: PUSH
1587: EMPTY
1588: LIST
1589: LIST
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: PUSH
1597: EMPTY
1598: LIST
1599: LIST
1600: LIST
1601: PPUSH
1602: CALL_OW 69
1606: ST_TO_ADDR
// if lab then
1607: LD_VAR 0 6
1611: IFFALSE 1689
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
1613: LD_VAR 0 6
1617: PUSH
1618: LD_INT 1
1620: ARRAY
1621: PPUSH
1622: CALL_OW 461
1626: PUSH
1627: LD_INT 2
1629: EQUAL
1630: IFFALSE 1689
// begin for i in amTech do
1632: LD_ADDR_VAR 0 1
1636: PUSH
1637: LD_EXP 25
1641: PUSH
1642: FOR_IN
1643: IFFALSE 1687
// if CanBeResearched ( lab [ 1 ] , i ) then
1645: LD_VAR 0 6
1649: PUSH
1650: LD_INT 1
1652: ARRAY
1653: PPUSH
1654: LD_VAR 0 1
1658: PPUSH
1659: CALL_OW 430
1663: IFFALSE 1685
// begin ComResearch ( lab [ 1 ] , i ) ;
1665: LD_VAR 0 6
1669: PUSH
1670: LD_INT 1
1672: ARRAY
1673: PPUSH
1674: LD_VAR 0 1
1678: PPUSH
1679: CALL_OW 124
// break ;
1683: GO 1687
// end ;
1685: GO 1642
1687: POP
1688: POP
// end ; end ; end ; fac := FilterUnitsInArea ( amBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
1689: LD_ADDR_VAR 0 16
1693: PUSH
1694: LD_INT 1
1696: PPUSH
1697: LD_INT 22
1699: PUSH
1700: LD_VAR 0 5
1704: PUSH
1705: EMPTY
1706: LIST
1707: LIST
1708: PUSH
1709: LD_INT 30
1711: PUSH
1712: LD_INT 3
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: PUSH
1719: LD_INT 50
1721: PUSH
1722: EMPTY
1723: LIST
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: LIST
1729: PPUSH
1730: CALL_OW 70
1734: ST_TO_ADDR
// if fac then
1735: LD_VAR 0 16
1739: IFFALSE 2005
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
1741: LD_VAR 0 16
1745: PUSH
1746: LD_INT 1
1748: ARRAY
1749: PPUSH
1750: CALL_OW 461
1754: PUSH
1755: LD_INT 2
1757: EQUAL
1758: IFFALSE 2005
// begin emptyTowers := FilterUnitsInArea ( amBaseArea , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
1760: LD_ADDR_VAR 0 17
1764: PUSH
1765: LD_INT 1
1767: PPUSH
1768: LD_INT 2
1770: PUSH
1771: LD_INT 30
1773: PUSH
1774: LD_INT 32
1776: PUSH
1777: EMPTY
1778: LIST
1779: LIST
1780: PUSH
1781: LD_INT 30
1783: PUSH
1784: LD_INT 33
1786: PUSH
1787: EMPTY
1788: LIST
1789: LIST
1790: PUSH
1791: EMPTY
1792: LIST
1793: LIST
1794: LIST
1795: PUSH
1796: LD_INT 35
1798: PUSH
1799: LD_INT 0
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: PPUSH
1810: CALL_OW 70
1814: ST_TO_ADDR
// if emptyTowers then
1815: LD_VAR 0 17
1819: IFFALSE 1867
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , amBaseArea ) ;
1821: LD_ADDR_VAR 0 18
1825: PUSH
1826: LD_VAR 0 17
1830: PUSH
1831: LD_INT 1
1833: ARRAY
1834: PPUSH
1835: LD_INT 1
1837: PPUSH
1838: CALL 26604 0 2
1842: ST_TO_ADDR
// if weapon then
1843: LD_VAR 0 18
1847: IFFALSE 1867
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
1849: LD_VAR 0 17
1853: PUSH
1854: LD_INT 1
1856: ARRAY
1857: PPUSH
1858: LD_VAR 0 18
1862: PPUSH
1863: CALL_OW 148
// end ; if amConstructList then
1867: LD_EXP 26
1871: IFFALSE 2005
// if CanBeConstructed ( fac [ 1 ] , amConstructList [ 1 ] [ 1 ] , amConstructList [ 1 ] [ 2 ] , amConstructList [ 1 ] [ 3 ] , amConstructList [ 1 ] [ 4 ] ) then
1873: LD_VAR 0 16
1877: PUSH
1878: LD_INT 1
1880: ARRAY
1881: PPUSH
1882: LD_EXP 26
1886: PUSH
1887: LD_INT 1
1889: ARRAY
1890: PUSH
1891: LD_INT 1
1893: ARRAY
1894: PPUSH
1895: LD_EXP 26
1899: PUSH
1900: LD_INT 1
1902: ARRAY
1903: PUSH
1904: LD_INT 2
1906: ARRAY
1907: PPUSH
1908: LD_EXP 26
1912: PUSH
1913: LD_INT 1
1915: ARRAY
1916: PUSH
1917: LD_INT 3
1919: ARRAY
1920: PPUSH
1921: LD_EXP 26
1925: PUSH
1926: LD_INT 1
1928: ARRAY
1929: PUSH
1930: LD_INT 4
1932: ARRAY
1933: PPUSH
1934: CALL_OW 448
1938: IFFALSE 2005
// ComConstruct ( fac [ 1 ] , amConstructList [ 1 ] [ 1 ] , amConstructList [ 1 ] [ 2 ] , amConstructList [ 1 ] [ 3 ] , amConstructList [ 1 ] [ 4 ] ) ;
1940: LD_VAR 0 16
1944: PUSH
1945: LD_INT 1
1947: ARRAY
1948: PPUSH
1949: LD_EXP 26
1953: PUSH
1954: LD_INT 1
1956: ARRAY
1957: PUSH
1958: LD_INT 1
1960: ARRAY
1961: PPUSH
1962: LD_EXP 26
1966: PUSH
1967: LD_INT 1
1969: ARRAY
1970: PUSH
1971: LD_INT 2
1973: ARRAY
1974: PPUSH
1975: LD_EXP 26
1979: PUSH
1980: LD_INT 1
1982: ARRAY
1983: PUSH
1984: LD_INT 3
1986: ARRAY
1987: PPUSH
1988: LD_EXP 26
1992: PUSH
1993: LD_INT 1
1995: ARRAY
1996: PUSH
1997: LD_INT 4
1999: ARRAY
2000: PPUSH
2001: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( amBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2005: LD_ADDR_VAR 0 2
2009: PUSH
2010: LD_INT 1
2012: PPUSH
2013: LD_INT 21
2015: PUSH
2016: LD_INT 3
2018: PUSH
2019: EMPTY
2020: LIST
2021: LIST
2022: PUSH
2023: LD_INT 3
2025: PUSH
2026: LD_INT 57
2028: PUSH
2029: EMPTY
2030: LIST
2031: PUSH
2032: EMPTY
2033: LIST
2034: LIST
2035: PUSH
2036: LD_INT 3
2038: PUSH
2039: LD_INT 24
2041: PUSH
2042: LD_INT 1000
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: LIST
2057: PPUSH
2058: CALL_OW 70
2062: ST_TO_ADDR
// cr := GetListOfCratesInArea ( amCratesArea ) ;
2063: LD_ADDR_VAR 0 10
2067: PUSH
2068: LD_INT 13
2070: PPUSH
2071: CALL_OW 435
2075: ST_TO_ADDR
// sci := UnitFilter ( amForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
2076: LD_ADDR_VAR 0 11
2080: PUSH
2081: LD_EXP 24
2085: PPUSH
2086: LD_INT 25
2088: PUSH
2089: LD_INT 4
2091: PUSH
2092: EMPTY
2093: LIST
2094: LIST
2095: PUSH
2096: LD_INT 50
2098: PUSH
2099: EMPTY
2100: LIST
2101: PUSH
2102: EMPTY
2103: LIST
2104: LIST
2105: PPUSH
2106: CALL_OW 72
2110: ST_TO_ADDR
// lab := FilterUnitsInArea ( amBaseArea , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
2111: LD_ADDR_VAR 0 6
2115: PUSH
2116: LD_INT 1
2118: PPUSH
2119: LD_INT 2
2121: PUSH
2122: LD_INT 30
2124: PUSH
2125: LD_INT 6
2127: PUSH
2128: EMPTY
2129: LIST
2130: LIST
2131: PUSH
2132: LD_INT 30
2134: PUSH
2135: LD_INT 7
2137: PUSH
2138: EMPTY
2139: LIST
2140: LIST
2141: PUSH
2142: LD_INT 30
2144: PUSH
2145: LD_INT 8
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: PUSH
2152: EMPTY
2153: LIST
2154: LIST
2155: LIST
2156: LIST
2157: PPUSH
2158: CALL_OW 70
2162: ST_TO_ADDR
// if sci then
2163: LD_VAR 0 11
2167: IFFALSE 2326
// begin hurtUnits := UnitFilter ( amForces , [ [ f_inarea , amBaseArea ] , [ f_tag , tHeal ] ] ) ;
2169: LD_ADDR_VAR 0 13
2173: PUSH
2174: LD_EXP 24
2178: PPUSH
2179: LD_INT 95
2181: PUSH
2182: LD_INT 1
2184: PUSH
2185: EMPTY
2186: LIST
2187: LIST
2188: PUSH
2189: LD_INT 120
2191: PUSH
2192: LD_INT 1
2194: PUSH
2195: EMPTY
2196: LIST
2197: LIST
2198: PUSH
2199: EMPTY
2200: LIST
2201: LIST
2202: PPUSH
2203: CALL_OW 72
2207: ST_TO_ADDR
// if hurtUnits then
2208: LD_VAR 0 13
2212: IFFALSE 2273
// begin for i in sci do
2214: LD_ADDR_VAR 0 1
2218: PUSH
2219: LD_VAR 0 11
2223: PUSH
2224: FOR_IN
2225: IFFALSE 2269
// if IsInUnit ( i ) then
2227: LD_VAR 0 1
2231: PPUSH
2232: CALL_OW 310
2236: IFFALSE 2249
// ComExitBuilding ( i ) else
2238: LD_VAR 0 1
2242: PPUSH
2243: CALL_OW 122
2247: GO 2267
// ComHeal ( i , hurtUnits [ 1 ] ) ;
2249: LD_VAR 0 1
2253: PPUSH
2254: LD_VAR 0 13
2258: PUSH
2259: LD_INT 1
2261: ARRAY
2262: PPUSH
2263: CALL_OW 128
2267: GO 2224
2269: POP
2270: POP
// end else
2271: GO 2326
// if lab then
2273: LD_VAR 0 6
2277: IFFALSE 2326
// begin for i in sci do
2279: LD_ADDR_VAR 0 1
2283: PUSH
2284: LD_VAR 0 11
2288: PUSH
2289: FOR_IN
2290: IFFALSE 2324
// if not IsInUnit ( i ) then
2292: LD_VAR 0 1
2296: PPUSH
2297: CALL_OW 310
2301: NOT
2302: IFFALSE 2322
// ComEnterUnit ( i , lab [ 1 ] ) ;
2304: LD_VAR 0 1
2308: PPUSH
2309: LD_VAR 0 6
2313: PUSH
2314: LD_INT 1
2316: ARRAY
2317: PPUSH
2318: CALL_OW 120
2322: GO 2289
2324: POP
2325: POP
// end ; end ; eng := UnitFilter ( amForces , [ f_class , 2 ] ) ;
2326: LD_ADDR_VAR 0 7
2330: PUSH
2331: LD_EXP 24
2335: PPUSH
2336: LD_INT 25
2338: PUSH
2339: LD_INT 2
2341: PUSH
2342: EMPTY
2343: LIST
2344: LIST
2345: PPUSH
2346: CALL_OW 72
2350: ST_TO_ADDR
// if eng then
2351: LD_VAR 0 7
2355: IFFALSE 3130
// begin for i in eng do
2357: LD_ADDR_VAR 0 1
2361: PUSH
2362: LD_VAR 0 7
2366: PUSH
2367: FOR_IN
2368: IFFALSE 3128
// begin tag := GetTag ( i ) ;
2370: LD_ADDR_VAR 0 8
2374: PUSH
2375: LD_VAR 0 1
2379: PPUSH
2380: CALL_OW 110
2384: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
2385: LD_VAR 0 1
2389: PPUSH
2390: CALL_OW 256
2394: PUSH
2395: LD_INT 800
2397: LESS
2398: PUSH
2399: LD_VAR 0 8
2403: PUSH
2404: LD_INT 1
2406: NONEQUAL
2407: AND
2408: IFFALSE 2458
// begin SetTag ( i , tHeal ) ;
2410: LD_VAR 0 1
2414: PPUSH
2415: LD_INT 1
2417: PPUSH
2418: CALL_OW 109
// ComMoveXY ( i , amHealPoint [ 1 ] , amHealPoint [ 2 ] ) ;
2422: LD_VAR 0 1
2426: PPUSH
2427: LD_EXP 27
2431: PUSH
2432: LD_INT 1
2434: ARRAY
2435: PPUSH
2436: LD_EXP 27
2440: PUSH
2441: LD_INT 2
2443: ARRAY
2444: PPUSH
2445: CALL_OW 111
// AddComHold ( i ) ;
2449: LD_VAR 0 1
2453: PPUSH
2454: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
2458: LD_VAR 0 8
2462: PUSH
2463: LD_INT 1
2465: EQUAL
2466: PUSH
2467: LD_VAR 0 1
2471: PPUSH
2472: CALL_OW 256
2476: PUSH
2477: LD_INT 1000
2479: EQUAL
2480: AND
2481: IFFALSE 2495
// SetTag ( i , 0 ) ;
2483: LD_VAR 0 1
2487: PPUSH
2488: LD_INT 0
2490: PPUSH
2491: CALL_OW 109
// if not tag then
2495: LD_VAR 0 8
2499: NOT
2500: IFFALSE 2668
// begin undone := FilterUnitsInArea ( amBaseArea , [ f_constructed ] ) ;
2502: LD_ADDR_VAR 0 4
2506: PUSH
2507: LD_INT 1
2509: PPUSH
2510: LD_INT 57
2512: PUSH
2513: EMPTY
2514: LIST
2515: PPUSH
2516: CALL_OW 70
2520: ST_TO_ADDR
// if undone then
2521: LD_VAR 0 4
2525: IFFALSE 2547
// begin ComComplete ( i , undone [ 1 ] ) ;
2527: LD_VAR 0 1
2531: PPUSH
2532: LD_VAR 0 4
2536: PUSH
2537: LD_INT 1
2539: ARRAY
2540: PPUSH
2541: CALL 24457 0 2
// continue ;
2545: GO 2367
// end ; if cr or tmp or Count ( amBuildings ) then
2547: LD_VAR 0 10
2551: PUSH
2552: LD_VAR 0 2
2556: OR
2557: PUSH
2558: LD_EXP 28
2562: PPUSH
2563: CALL 18359 0 1
2567: OR
2568: IFFALSE 2644
// begin if IsInUnit ( i ) then
2570: LD_VAR 0 1
2574: PPUSH
2575: CALL_OW 310
2579: IFFALSE 2590
// ComExitBuilding ( i ) ;
2581: LD_VAR 0 1
2585: PPUSH
2586: CALL_OW 122
// if tmp then
2590: LD_VAR 0 2
2594: IFFALSE 2610
// SetTag ( i , tRepair ) else
2596: LD_VAR 0 1
2600: PPUSH
2601: LD_INT 3
2603: PPUSH
2604: CALL_OW 109
2608: GO 2642
// if cr then
2610: LD_VAR 0 10
2614: IFFALSE 2630
// SetTag ( i , tCrates ) else
2616: LD_VAR 0 1
2620: PPUSH
2621: LD_INT 2
2623: PPUSH
2624: CALL_OW 109
2628: GO 2642
// SetTag ( i , tBuild ) ;
2630: LD_VAR 0 1
2634: PPUSH
2635: LD_INT 5
2637: PPUSH
2638: CALL_OW 109
// end else
2642: GO 2668
// if not IsInUnit ( i ) then
2644: LD_VAR 0 1
2648: PPUSH
2649: CALL_OW 310
2653: NOT
2654: IFFALSE 2668
// ComEnterUnit ( i , amBase ) ;
2656: LD_VAR 0 1
2660: PPUSH
2661: LD_INT 2
2663: PPUSH
2664: CALL_OW 120
// end ; if tag = tRepair then
2668: LD_VAR 0 8
2672: PUSH
2673: LD_INT 3
2675: EQUAL
2676: IFFALSE 2778
// begin if IsInUnit ( i ) then
2678: LD_VAR 0 1
2682: PPUSH
2683: CALL_OW 310
2687: IFFALSE 2700
// begin ComExitBuilding ( i ) ;
2689: LD_VAR 0 1
2693: PPUSH
2694: CALL_OW 122
// continue ;
2698: GO 2367
// end ; if not tmp then
2700: LD_VAR 0 2
2704: NOT
2705: IFFALSE 2721
// begin SetTag ( i , 0 ) ;
2707: LD_VAR 0 1
2711: PPUSH
2712: LD_INT 0
2714: PPUSH
2715: CALL_OW 109
// continue ;
2719: GO 2367
// end ; if not HasTask ( i ) then
2721: LD_VAR 0 1
2725: PPUSH
2726: CALL_OW 314
2730: NOT
2731: IFFALSE 2751
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
2733: LD_VAR 0 1
2737: PPUSH
2738: LD_VAR 0 2
2742: PUSH
2743: LD_INT 1
2745: ARRAY
2746: PPUSH
2747: CALL_OW 130
// if not IsInArea ( i , amBaseArea ) then
2751: LD_VAR 0 1
2755: PPUSH
2756: LD_INT 1
2758: PPUSH
2759: CALL_OW 308
2763: NOT
2764: IFFALSE 2778
// ComMoveToArea ( i , amBaseArea ) ;
2766: LD_VAR 0 1
2770: PPUSH
2771: LD_INT 1
2773: PPUSH
2774: CALL_OW 113
// end ; if tag = tBuild then
2778: LD_VAR 0 8
2782: PUSH
2783: LD_INT 5
2785: EQUAL
2786: IFFALSE 2981
// begin if IsInUnit ( i ) then
2788: LD_VAR 0 1
2792: PPUSH
2793: CALL_OW 310
2797: IFFALSE 2810
// begin ComExitBuilding ( i ) ;
2799: LD_VAR 0 1
2803: PPUSH
2804: CALL_OW 122
// continue ;
2808: GO 2367
// end ; if not Count ( amBuildings ) then
2810: LD_EXP 28
2814: PPUSH
2815: CALL 18359 0 1
2819: NOT
2820: IFFALSE 2838
// begin SetTag ( i , 0 ) ;
2822: LD_VAR 0 1
2826: PPUSH
2827: LD_INT 0
2829: PPUSH
2830: CALL_OW 109
// continue ;
2834: GO 2367
// end else
2836: GO 2875
// if not CanBeBuiltOnlyResources ( amBase , amBuildings [ 1 ] [ 1 ] ) then
2838: LD_INT 2
2840: PPUSH
2841: LD_EXP 28
2845: PUSH
2846: LD_INT 1
2848: ARRAY
2849: PUSH
2850: LD_INT 1
2852: ARRAY
2853: PPUSH
2854: CALL 7801 0 2
2858: NOT
2859: IFFALSE 2875
// begin SetTag ( i , 0 ) ;
2861: LD_VAR 0 1
2865: PPUSH
2866: LD_INT 0
2868: PPUSH
2869: CALL_OW 109
// continue ;
2873: GO 2367
// end ; undone := FilterUnitsInArea ( amBaseArea , [ f_constructed ] ) ;
2875: LD_ADDR_VAR 0 4
2879: PUSH
2880: LD_INT 1
2882: PPUSH
2883: LD_INT 57
2885: PUSH
2886: EMPTY
2887: LIST
2888: PPUSH
2889: CALL_OW 70
2893: ST_TO_ADDR
// if undone then
2894: LD_VAR 0 4
2898: IFFALSE 2920
// begin ComComplete ( i , undone [ 1 ] ) ;
2900: LD_VAR 0 1
2904: PPUSH
2905: LD_VAR 0 4
2909: PUSH
2910: LD_INT 1
2912: ARRAY
2913: PPUSH
2914: CALL 24457 0 2
// continue ;
2918: GO 2367
// end ; ComBuild ( i , amBuildings [ 1 ] [ 1 ] , amBuildings [ 1 ] [ 2 ] , amBuildings [ 1 ] [ 3 ] , amBuildings [ 1 ] [ 4 ] ) ;
2920: LD_VAR 0 1
2924: PPUSH
2925: LD_EXP 28
2929: PUSH
2930: LD_INT 1
2932: ARRAY
2933: PUSH
2934: LD_INT 1
2936: ARRAY
2937: PPUSH
2938: LD_EXP 28
2942: PUSH
2943: LD_INT 1
2945: ARRAY
2946: PUSH
2947: LD_INT 2
2949: ARRAY
2950: PPUSH
2951: LD_EXP 28
2955: PUSH
2956: LD_INT 1
2958: ARRAY
2959: PUSH
2960: LD_INT 3
2962: ARRAY
2963: PPUSH
2964: LD_EXP 28
2968: PUSH
2969: LD_INT 1
2971: ARRAY
2972: PUSH
2973: LD_INT 4
2975: ARRAY
2976: PPUSH
2977: CALL_OW 145
// end ; if tag = tCrates then
2981: LD_VAR 0 8
2985: PUSH
2986: LD_INT 2
2988: EQUAL
2989: IFFALSE 3126
// begin if IsInUnit ( i ) then
2991: LD_VAR 0 1
2995: PPUSH
2996: CALL_OW 310
3000: IFFALSE 3013
// begin ComExitBuilding ( i ) ;
3002: LD_VAR 0 1
3006: PPUSH
3007: CALL_OW 122
// continue ;
3011: GO 2367
// end ; if not cr then
3013: LD_VAR 0 10
3017: NOT
3018: IFFALSE 3034
// begin SetTag ( i , 0 ) ;
3020: LD_VAR 0 1
3024: PPUSH
3025: LD_INT 0
3027: PPUSH
3028: CALL_OW 109
// continue ;
3032: GO 2367
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
3034: LD_VAR 0 1
3038: PPUSH
3039: CALL_OW 314
3043: NOT
3044: PUSH
3045: LD_INT 81
3047: PUSH
3048: LD_VAR 0 5
3052: PUSH
3053: EMPTY
3054: LIST
3055: LIST
3056: PUSH
3057: LD_INT 92
3059: PUSH
3060: LD_VAR 0 10
3064: PUSH
3065: LD_INT 1
3067: ARRAY
3068: PUSH
3069: LD_VAR 0 10
3073: PUSH
3074: LD_INT 2
3076: ARRAY
3077: PUSH
3078: LD_INT 12
3080: PUSH
3081: EMPTY
3082: LIST
3083: LIST
3084: LIST
3085: LIST
3086: PUSH
3087: EMPTY
3088: LIST
3089: LIST
3090: PPUSH
3091: CALL_OW 69
3095: NOT
3096: AND
3097: IFFALSE 3126
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
3099: LD_VAR 0 1
3103: PPUSH
3104: LD_VAR 0 10
3108: PUSH
3109: LD_INT 1
3111: ARRAY
3112: PPUSH
3113: LD_VAR 0 10
3117: PUSH
3118: LD_INT 2
3120: ARRAY
3121: PPUSH
3122: CALL_OW 117
// end ; end ;
3126: GO 2367
3128: POP
3129: POP
// end ; sol := UnitFilter ( amForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] ] , [ f_ok ] ] ) union amCommander ;
3130: LD_ADDR_VAR 0 12
3134: PUSH
3135: LD_EXP 24
3139: PPUSH
3140: LD_INT 2
3142: PUSH
3143: LD_INT 25
3145: PUSH
3146: LD_INT 1
3148: PUSH
3149: EMPTY
3150: LIST
3151: LIST
3152: PUSH
3153: LD_INT 25
3155: PUSH
3156: LD_INT 5
3158: PUSH
3159: EMPTY
3160: LIST
3161: LIST
3162: PUSH
3163: EMPTY
3164: LIST
3165: LIST
3166: LIST
3167: PUSH
3168: LD_INT 50
3170: PUSH
3171: EMPTY
3172: LIST
3173: PUSH
3174: EMPTY
3175: LIST
3176: LIST
3177: PPUSH
3178: CALL_OW 72
3182: PUSH
3183: LD_EXP 30
3187: UNION
3188: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( amBaseArea , [ f_enemy , side ] ) ;
3189: LD_ADDR_VAR 0 14
3193: PUSH
3194: LD_INT 1
3196: PPUSH
3197: LD_INT 81
3199: PUSH
3200: LD_VAR 0 5
3204: PUSH
3205: EMPTY
3206: LIST
3207: LIST
3208: PPUSH
3209: CALL_OW 70
3213: ST_TO_ADDR
// if sol then
3214: LD_VAR 0 12
3218: IFFALSE 3730
// begin if enemyInBase then
3220: LD_VAR 0 14
3224: IFFALSE 3369
// begin for i in sol do
3226: LD_ADDR_VAR 0 1
3230: PUSH
3231: LD_VAR 0 12
3235: PUSH
3236: FOR_IN
3237: IFFALSE 3365
// begin tw := IsInUnit ( i ) ;
3239: LD_ADDR_VAR 0 9
3243: PUSH
3244: LD_VAR 0 1
3248: PPUSH
3249: CALL_OW 310
3253: ST_TO_ADDR
// if tw then
3254: LD_VAR 0 9
3258: IFFALSE 3339
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
3260: LD_VAR 0 9
3264: PUSH
3265: LD_INT 22
3267: PUSH
3268: LD_VAR 0 5
3272: PUSH
3273: EMPTY
3274: LIST
3275: LIST
3276: PUSH
3277: LD_INT 101
3279: PUSH
3280: LD_INT 2
3282: PUSH
3283: EMPTY
3284: LIST
3285: LIST
3286: PUSH
3287: LD_INT 2
3289: PUSH
3290: LD_INT 30
3292: PUSH
3293: LD_INT 32
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: PUSH
3300: LD_INT 30
3302: PUSH
3303: LD_INT 31
3305: PUSH
3306: EMPTY
3307: LIST
3308: LIST
3309: PUSH
3310: EMPTY
3311: LIST
3312: LIST
3313: LIST
3314: PUSH
3315: EMPTY
3316: LIST
3317: LIST
3318: LIST
3319: PPUSH
3320: CALL_OW 69
3324: IN
3325: NOT
3326: IFFALSE 3337
// ComExitBuilding ( i ) ;
3328: LD_VAR 0 1
3332: PPUSH
3333: CALL_OW 122
// end else
3337: GO 3363
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
3339: LD_VAR 0 1
3343: PPUSH
3344: LD_VAR 0 14
3348: PPUSH
3349: LD_VAR 0 1
3353: PPUSH
3354: CALL_OW 74
3358: PPUSH
3359: CALL_OW 115
// end ;
3363: GO 3236
3365: POP
3366: POP
// end else
3367: GO 3730
// begin empty := FilterUnitsInArea ( amBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
3369: LD_ADDR_VAR 0 15
3373: PUSH
3374: LD_INT 1
3376: PPUSH
3377: LD_INT 3
3379: PUSH
3380: LD_INT 62
3382: PUSH
3383: EMPTY
3384: LIST
3385: PUSH
3386: EMPTY
3387: LIST
3388: LIST
3389: PUSH
3390: LD_INT 2
3392: PUSH
3393: LD_INT 30
3395: PUSH
3396: LD_INT 32
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: PUSH
3403: LD_INT 30
3405: PUSH
3406: LD_INT 4
3408: PUSH
3409: EMPTY
3410: LIST
3411: LIST
3412: PUSH
3413: LD_INT 30
3415: PUSH
3416: LD_INT 5
3418: PUSH
3419: EMPTY
3420: LIST
3421: LIST
3422: PUSH
3423: LD_INT 30
3425: PUSH
3426: LD_INT 31
3428: PUSH
3429: EMPTY
3430: LIST
3431: LIST
3432: PUSH
3433: EMPTY
3434: LIST
3435: LIST
3436: LIST
3437: LIST
3438: LIST
3439: PUSH
3440: EMPTY
3441: LIST
3442: LIST
3443: PPUSH
3444: CALL_OW 70
3448: ST_TO_ADDR
// if empty then
3449: LD_VAR 0 15
3453: IFFALSE 3470
// empty := ReverseArray ( empty ) ;
3455: LD_ADDR_VAR 0 15
3459: PUSH
3460: LD_VAR 0 15
3464: PPUSH
3465: CALL 49235 0 1
3469: ST_TO_ADDR
// for i in sol do
3470: LD_ADDR_VAR 0 1
3474: PUSH
3475: LD_VAR 0 12
3479: PUSH
3480: FOR_IN
3481: IFFALSE 3728
// begin tag := GetTag ( i ) ;
3483: LD_ADDR_VAR 0 8
3487: PUSH
3488: LD_VAR 0 1
3492: PPUSH
3493: CALL_OW 110
3497: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
3498: LD_VAR 0 1
3502: PPUSH
3503: CALL_OW 256
3507: PUSH
3508: LD_INT 1000
3510: LESS
3511: PUSH
3512: LD_VAR 0 8
3516: PUSH
3517: LD_INT 1
3519: NONEQUAL
3520: AND
3521: IFFALSE 3573
// begin SetTag ( i , tHeal ) ;
3523: LD_VAR 0 1
3527: PPUSH
3528: LD_INT 1
3530: PPUSH
3531: CALL_OW 109
// ComMoveXY ( i , amHealPoint [ 1 ] , amHealPoint [ 2 ] ) ;
3535: LD_VAR 0 1
3539: PPUSH
3540: LD_EXP 27
3544: PUSH
3545: LD_INT 1
3547: ARRAY
3548: PPUSH
3549: LD_EXP 27
3553: PUSH
3554: LD_INT 2
3556: ARRAY
3557: PPUSH
3558: CALL_OW 111
// AddComHold ( i ) ;
3562: LD_VAR 0 1
3566: PPUSH
3567: CALL_OW 200
// continue ;
3571: GO 3480
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
3573: LD_VAR 0 1
3577: PPUSH
3578: CALL_OW 256
3582: PUSH
3583: LD_INT 1000
3585: EQUAL
3586: PUSH
3587: LD_VAR 0 8
3591: PUSH
3592: LD_INT 1
3594: EQUAL
3595: AND
3596: IFFALSE 3612
// begin SetTag ( i , 0 ) ;
3598: LD_VAR 0 1
3602: PPUSH
3603: LD_INT 0
3605: PPUSH
3606: CALL_OW 109
// continue ;
3610: GO 3480
// end ; if HasTask ( i ) then
3612: LD_VAR 0 1
3616: PPUSH
3617: CALL_OW 314
3621: IFFALSE 3625
// continue ;
3623: GO 3480
// if not IsInUnit ( i ) and not tag and empty then
3625: LD_VAR 0 1
3629: PPUSH
3630: CALL_OW 310
3634: NOT
3635: PUSH
3636: LD_VAR 0 8
3640: NOT
3641: AND
3642: PUSH
3643: LD_VAR 0 15
3647: AND
3648: IFFALSE 3726
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
3650: LD_VAR 0 1
3654: PPUSH
3655: LD_VAR 0 15
3659: PUSH
3660: LD_INT 1
3662: ARRAY
3663: PPUSH
3664: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
3668: LD_VAR 0 15
3672: PUSH
3673: LD_INT 1
3675: ARRAY
3676: PPUSH
3677: CALL_OW 266
3681: PUSH
3682: LD_INT 5
3684: EQUAL
3685: PUSH
3686: LD_INT 50
3688: PPUSH
3689: CALL_OW 13
3693: AND
3694: IFFALSE 3708
// AddComChangeProfession ( i , class_sniper ) ;
3696: LD_VAR 0 1
3700: PPUSH
3701: LD_INT 5
3703: PPUSH
3704: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
3708: LD_ADDR_VAR 0 15
3712: PUSH
3713: LD_VAR 0 15
3717: PPUSH
3718: LD_INT 1
3720: PPUSH
3721: CALL_OW 3
3725: ST_TO_ADDR
// end ; end ;
3726: GO 3480
3728: POP
3729: POP
// end ; end ; end ;
3730: PPOPN 18
3732: END
// every 0 0$2 trigger IsOk ( amCargo ) and amScriptActive do var cr , enemyInArea ;
3733: LD_EXP 31
3737: PPUSH
3738: CALL_OW 302
3742: PUSH
3743: LD_EXP 3
3747: AND
3748: IFFALSE 4026
3750: GO 3752
3752: DISABLE
3753: LD_INT 0
3755: PPUSH
3756: PPUSH
// begin enable ;
3757: ENABLE
// enemyInArea := FilterUnitsInArea ( amBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
3758: LD_ADDR_VAR 0 2
3762: PUSH
3763: LD_INT 1
3765: PPUSH
3766: LD_INT 81
3768: PUSH
3769: LD_INT 1
3771: PUSH
3772: EMPTY
3773: LIST
3774: LIST
3775: PUSH
3776: LD_INT 50
3778: PUSH
3779: EMPTY
3780: LIST
3781: PUSH
3782: EMPTY
3783: LIST
3784: LIST
3785: PPUSH
3786: CALL_OW 70
3790: ST_TO_ADDR
// cr := GetListOfCratesInArea ( cratesWestArea ) ;
3791: LD_ADDR_VAR 0 1
3795: PUSH
3796: LD_INT 17
3798: PPUSH
3799: CALL_OW 435
3803: ST_TO_ADDR
// if GetFuel ( amCargo ) < 10 and not See ( 2 , amCargo ) and GetEngine ( amCargo ) = engine_combustion then
3804: LD_EXP 31
3808: PPUSH
3809: CALL_OW 261
3813: PUSH
3814: LD_INT 10
3816: LESS
3817: PUSH
3818: LD_INT 2
3820: PPUSH
3821: LD_EXP 31
3825: PPUSH
3826: CALL_OW 292
3830: NOT
3831: AND
3832: PUSH
3833: LD_EXP 31
3837: PPUSH
3838: CALL_OW 262
3842: PUSH
3843: LD_INT 1
3845: EQUAL
3846: AND
3847: IFFALSE 3861
// SetFuel ( amCargo , 100 ) ;
3849: LD_EXP 31
3853: PPUSH
3854: LD_INT 100
3856: PPUSH
3857: CALL_OW 240
// if not HasTask ( amCargo ) and GetCargo ( amCargo , mat_cans ) < 100 and not enemyInArea then
3861: LD_EXP 31
3865: PPUSH
3866: CALL_OW 314
3870: NOT
3871: PUSH
3872: LD_EXP 31
3876: PPUSH
3877: LD_INT 1
3879: PPUSH
3880: CALL_OW 289
3884: PUSH
3885: LD_INT 100
3887: LESS
3888: AND
3889: PUSH
3890: LD_VAR 0 2
3894: NOT
3895: AND
3896: IFFALSE 3962
// begin if cr then
3898: LD_VAR 0 1
3902: IFFALSE 3933
// ComCollect ( amCargo , cr [ 1 ] , cr [ 2 ] ) else
3904: LD_EXP 31
3908: PPUSH
3909: LD_VAR 0 1
3913: PUSH
3914: LD_INT 1
3916: ARRAY
3917: PPUSH
3918: LD_VAR 0 1
3922: PUSH
3923: LD_INT 2
3925: ARRAY
3926: PPUSH
3927: CALL_OW 117
3931: GO 3960
// if not IsInArea ( amCargo , cratesWestArea ) then
3933: LD_EXP 31
3937: PPUSH
3938: LD_INT 17
3940: PPUSH
3941: CALL_OW 308
3945: NOT
3946: IFFALSE 3960
// ComMoveToArea ( amCargo , cratesWestArea ) ;
3948: LD_EXP 31
3952: PPUSH
3953: LD_INT 17
3955: PPUSH
3956: CALL_OW 113
// exit ;
3960: GO 4026
// end ; if enemyInArea and not IsInArea ( amCargo , amBaseArea ) then
3962: LD_VAR 0 2
3966: PUSH
3967: LD_EXP 31
3971: PPUSH
3972: LD_INT 1
3974: PPUSH
3975: CALL_OW 308
3979: NOT
3980: AND
3981: IFFALSE 4000
// ComMoveXY ( amCargo , 93 , 137 ) else
3983: LD_EXP 31
3987: PPUSH
3988: LD_INT 93
3990: PPUSH
3991: LD_INT 137
3993: PPUSH
3994: CALL_OW 111
3998: GO 4026
// if GetCargo ( amCargo , mat_cans ) then
4000: LD_EXP 31
4004: PPUSH
4005: LD_INT 1
4007: PPUSH
4008: CALL_OW 289
4012: IFFALSE 4026
// ComGive ( amCargo , amBase ) ;
4014: LD_EXP 31
4018: PPUSH
4019: LD_INT 2
4021: PPUSH
4022: CALL_OW 161
// end ; end_of_file
4026: PPOPN 2
4028: END
// export Farmer ; export legForces , legEForces , legTech , legConstructList , legHealPoint , legBuildings , legTanks , legCargo ; export function PrepareLegion ; var i , j , b , un , skill , sources ; begin
4029: LD_INT 0
4031: PPUSH
4032: PPUSH
4033: PPUSH
4034: PPUSH
4035: PPUSH
4036: PPUSH
4037: PPUSH
// uc_side := 8 ;
4038: LD_ADDR_OWVAR 20
4042: PUSH
4043: LD_INT 8
4045: ST_TO_ADDR
// uc_nation := nation_arabian ;
4046: LD_ADDR_OWVAR 21
4050: PUSH
4051: LD_INT 2
4053: ST_TO_ADDR
// legForces := [ ] ;
4054: LD_ADDR_EXP 33
4058: PUSH
4059: EMPTY
4060: ST_TO_ADDR
// legEForces := [ ] ;
4061: LD_ADDR_EXP 34
4065: PUSH
4066: EMPTY
4067: ST_TO_ADDR
// legTech := GetTechNation ( 8 , nation_arabian , state_enabled ) ;
4068: LD_ADDR_EXP 35
4072: PUSH
4073: LD_INT 8
4075: PPUSH
4076: LD_INT 2
4078: PPUSH
4079: LD_INT 1
4081: PPUSH
4082: CALL 16320 0 3
4086: ST_TO_ADDR
// legConstructList := [ ] ;
4087: LD_ADDR_EXP 36
4091: PUSH
4092: EMPTY
4093: ST_TO_ADDR
// legHealPoint := [ 195 , 15 ] ;
4094: LD_ADDR_EXP 37
4098: PUSH
4099: LD_INT 195
4101: PUSH
4102: LD_INT 15
4104: PUSH
4105: EMPTY
4106: LIST
4107: LIST
4108: ST_TO_ADDR
// legBuildings := [ ] ;
4109: LD_ADDR_EXP 38
4113: PUSH
4114: EMPTY
4115: ST_TO_ADDR
// legTanks := [ ] ;
4116: LD_ADDR_EXP 39
4120: PUSH
4121: EMPTY
4122: ST_TO_ADDR
// legCargo := 0 ;
4123: LD_ADDR_EXP 40
4127: PUSH
4128: LD_INT 0
4130: ST_TO_ADDR
// sources := [ [ 219 , 31 ] , [ 166 , 31 ] ] ;
4131: LD_ADDR_VAR 0 7
4135: PUSH
4136: LD_INT 219
4138: PUSH
4139: LD_INT 31
4141: PUSH
4142: EMPTY
4143: LIST
4144: LIST
4145: PUSH
4146: LD_INT 166
4148: PUSH
4149: LD_INT 31
4151: PUSH
4152: EMPTY
4153: LIST
4154: LIST
4155: PUSH
4156: EMPTY
4157: LIST
4158: LIST
4159: ST_TO_ADDR
// for i in sources do
4160: LD_ADDR_VAR 0 2
4164: PUSH
4165: LD_VAR 0 7
4169: PUSH
4170: FOR_IN
4171: IFFALSE 4200
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 1 ) ;
4173: LD_VAR 0 2
4177: PUSH
4178: LD_INT 1
4180: ARRAY
4181: PPUSH
4182: LD_VAR 0 2
4186: PUSH
4187: LD_INT 2
4189: ARRAY
4190: PPUSH
4191: LD_INT 1
4193: PPUSH
4194: CALL_OW 441
4198: GO 4170
4200: POP
4201: POP
// SetResourceType ( GetBase ( legBase ) , mat_cans , 650 ) ;
4202: LD_INT 38
4204: PPUSH
4205: CALL_OW 274
4209: PPUSH
4210: LD_INT 1
4212: PPUSH
4213: LD_INT 650
4215: PPUSH
4216: CALL_OW 277
// SetResourceType ( GetBase ( legBase ) , mat_oil , 120 ) ;
4220: LD_INT 38
4222: PPUSH
4223: CALL_OW 274
4227: PPUSH
4228: LD_INT 2
4230: PPUSH
4231: LD_INT 120
4233: PPUSH
4234: CALL_OW 277
// SetResourceType ( GetBase ( legBase ) , mat_siberit , 50 ) ;
4238: LD_INT 38
4240: PPUSH
4241: CALL_OW 274
4245: PPUSH
4246: LD_INT 3
4248: PPUSH
4249: LD_INT 50
4251: PPUSH
4252: CALL_OW 277
// skill := [ 6 , 7 , 8 , 9 ] [ Difficulty ] ;
4256: LD_ADDR_VAR 0 6
4260: PUSH
4261: LD_INT 6
4263: PUSH
4264: LD_INT 7
4266: PUSH
4267: LD_INT 8
4269: PUSH
4270: LD_INT 9
4272: PUSH
4273: EMPTY
4274: LIST
4275: LIST
4276: LIST
4277: LIST
4278: PUSH
4279: LD_OWVAR 67
4283: ARRAY
4284: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
4285: LD_ADDR_EXP 32
4289: PUSH
4290: LD_STRING Farmer
4292: PPUSH
4293: LD_INT 0
4295: PPUSH
4296: LD_STRING 
4298: PPUSH
4299: CALL 16257 0 3
4303: ST_TO_ADDR
// for i := 1 to 4 do
4304: LD_ADDR_VAR 0 2
4308: PUSH
4309: DOUBLE
4310: LD_INT 1
4312: DEC
4313: ST_TO_ADDR
4314: LD_INT 4
4316: PUSH
4317: FOR_TO
4318: IFFALSE 4835
// for j := 1 to [ [ 7 , 8 , 9 , 11 ] [ Difficulty ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] , 3 , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
4320: LD_ADDR_VAR 0 3
4324: PUSH
4325: DOUBLE
4326: LD_INT 1
4328: DEC
4329: ST_TO_ADDR
4330: LD_INT 7
4332: PUSH
4333: LD_INT 8
4335: PUSH
4336: LD_INT 9
4338: PUSH
4339: LD_INT 11
4341: PUSH
4342: EMPTY
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: PUSH
4348: LD_OWVAR 67
4352: ARRAY
4353: PUSH
4354: LD_INT 3
4356: PUSH
4357: LD_INT 4
4359: PUSH
4360: LD_INT 5
4362: PUSH
4363: LD_INT 5
4365: PUSH
4366: EMPTY
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: PUSH
4372: LD_OWVAR 67
4376: ARRAY
4377: PUSH
4378: LD_INT 3
4380: PUSH
4381: LD_INT 2
4383: PUSH
4384: LD_INT 3
4386: PUSH
4387: LD_INT 3
4389: PUSH
4390: LD_INT 3
4392: PUSH
4393: EMPTY
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: PUSH
4399: LD_OWVAR 67
4403: ARRAY
4404: PUSH
4405: EMPTY
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: PUSH
4411: LD_VAR 0 2
4415: ARRAY
4416: PUSH
4417: FOR_TO
4418: IFFALSE 4831
// begin PrepareHuman ( false , i , skill ) ;
4420: LD_INT 0
4422: PPUSH
4423: LD_VAR 0 2
4427: PPUSH
4428: LD_VAR 0 6
4432: PPUSH
4433: CALL_OW 380
// un := CreateHuman ;
4437: LD_ADDR_VAR 0 5
4441: PUSH
4442: CALL_OW 44
4446: ST_TO_ADDR
// legForces := Join ( legForces , un ) ;
4447: LD_ADDR_EXP 33
4451: PUSH
4452: LD_EXP 33
4456: PPUSH
4457: LD_VAR 0 5
4461: PPUSH
4462: CALL 53946 0 2
4466: ST_TO_ADDR
// case i of 1 :
4467: LD_VAR 0 2
4471: PUSH
4472: LD_INT 1
4474: DOUBLE
4475: EQUAL
4476: IFTRUE 4480
4478: GO 4549
4480: POP
// b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] ] ) ; 2 :
4481: LD_ADDR_VAR 0 4
4485: PUSH
4486: LD_INT 22
4488: PUSH
4489: LD_INT 8
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PUSH
4496: LD_INT 2
4498: PUSH
4499: LD_INT 30
4501: PUSH
4502: LD_INT 32
4504: PUSH
4505: EMPTY
4506: LIST
4507: LIST
4508: PUSH
4509: LD_INT 30
4511: PUSH
4512: LD_INT 5
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: LIST
4523: PUSH
4524: LD_INT 3
4526: PUSH
4527: LD_INT 62
4529: PUSH
4530: EMPTY
4531: LIST
4532: PUSH
4533: EMPTY
4534: LIST
4535: LIST
4536: PUSH
4537: EMPTY
4538: LIST
4539: LIST
4540: LIST
4541: PPUSH
4542: CALL_OW 69
4546: ST_TO_ADDR
4547: GO 4728
4549: LD_INT 2
4551: DOUBLE
4552: EQUAL
4553: IFTRUE 4557
4555: GO 4586
4557: POP
// b := UnitFilter ( legBase , [ f_not , [ f_full ] ] ) ; 3 :
4558: LD_ADDR_VAR 0 4
4562: PUSH
4563: LD_INT 38
4565: PPUSH
4566: LD_INT 3
4568: PUSH
4569: LD_INT 62
4571: PUSH
4572: EMPTY
4573: LIST
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: PPUSH
4579: CALL_OW 72
4583: ST_TO_ADDR
4584: GO 4728
4586: LD_INT 3
4588: DOUBLE
4589: EQUAL
4590: IFTRUE 4594
4592: GO 4668
4594: POP
// b := ReverseArray ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_control_tower ] ] , [ f_not , [ f_full ] ] ] ) ) ; 4 :
4595: LD_ADDR_VAR 0 4
4599: PUSH
4600: LD_INT 22
4602: PUSH
4603: LD_INT 8
4605: PUSH
4606: EMPTY
4607: LIST
4608: LIST
4609: PUSH
4610: LD_INT 2
4612: PUSH
4613: LD_INT 30
4615: PUSH
4616: LD_INT 3
4618: PUSH
4619: EMPTY
4620: LIST
4621: LIST
4622: PUSH
4623: LD_INT 30
4625: PUSH
4626: LD_INT 36
4628: PUSH
4629: EMPTY
4630: LIST
4631: LIST
4632: PUSH
4633: EMPTY
4634: LIST
4635: LIST
4636: LIST
4637: PUSH
4638: LD_INT 3
4640: PUSH
4641: LD_INT 62
4643: PUSH
4644: EMPTY
4645: LIST
4646: PUSH
4647: EMPTY
4648: LIST
4649: LIST
4650: PUSH
4651: EMPTY
4652: LIST
4653: LIST
4654: LIST
4655: PPUSH
4656: CALL_OW 69
4660: PPUSH
4661: CALL 49235 0 1
4665: ST_TO_ADDR
4666: GO 4728
4668: LD_INT 4
4670: DOUBLE
4671: EQUAL
4672: IFTRUE 4676
4674: GO 4727
4676: POP
// b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_lab_full ] , [ f_not , [ f_full ] ] ] ) ; end ;
4677: LD_ADDR_VAR 0 4
4681: PUSH
4682: LD_INT 22
4684: PUSH
4685: LD_INT 8
4687: PUSH
4688: EMPTY
4689: LIST
4690: LIST
4691: PUSH
4692: LD_INT 30
4694: PUSH
4695: LD_INT 8
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: PUSH
4702: LD_INT 3
4704: PUSH
4705: LD_INT 62
4707: PUSH
4708: EMPTY
4709: LIST
4710: PUSH
4711: EMPTY
4712: LIST
4713: LIST
4714: PUSH
4715: EMPTY
4716: LIST
4717: LIST
4718: LIST
4719: PPUSH
4720: CALL_OW 69
4724: ST_TO_ADDR
4725: GO 4728
4727: POP
// if b then
4728: LD_VAR 0 4
4732: IFFALSE 4808
// begin if GetBType ( b [ 1 ] ) = b_barracks then
4734: LD_VAR 0 4
4738: PUSH
4739: LD_INT 1
4741: ARRAY
4742: PPUSH
4743: CALL_OW 266
4747: PUSH
4748: LD_INT 5
4750: EQUAL
4751: IFFALSE 4788
// if Prob ( 50 ) then
4753: LD_INT 50
4755: PPUSH
4756: CALL_OW 13
4760: IFFALSE 4776
// SetClass ( un , class_mortar ) else
4762: LD_VAR 0 5
4766: PPUSH
4767: LD_INT 8
4769: PPUSH
4770: CALL_OW 336
4774: GO 4788
// SetClass ( un , class_sniper ) ;
4776: LD_VAR 0 5
4780: PPUSH
4781: LD_INT 5
4783: PPUSH
4784: CALL_OW 336
// PlaceHumanInUnit ( un , b [ 1 ] ) ;
4788: LD_VAR 0 5
4792: PPUSH
4793: LD_VAR 0 4
4797: PUSH
4798: LD_INT 1
4800: ARRAY
4801: PPUSH
4802: CALL_OW 52
// end else
4806: GO 4829
// PlaceUnitXYR ( un , 188 , 21 , 4 , false ) ;
4808: LD_VAR 0 5
4812: PPUSH
4813: LD_INT 188
4815: PPUSH
4816: LD_INT 21
4818: PPUSH
4819: LD_INT 4
4821: PPUSH
4822: LD_INT 0
4824: PPUSH
4825: CALL_OW 50
// end ;
4829: GO 4417
4831: POP
4832: POP
4833: GO 4317
4835: POP
4836: POP
// b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] ] ) ;
4837: LD_ADDR_VAR 0 4
4841: PUSH
4842: LD_INT 22
4844: PUSH
4845: LD_INT 8
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: PUSH
4852: LD_INT 2
4854: PUSH
4855: LD_INT 30
4857: PUSH
4858: LD_INT 32
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PUSH
4865: LD_INT 30
4867: PUSH
4868: LD_INT 5
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: PUSH
4875: EMPTY
4876: LIST
4877: LIST
4878: LIST
4879: PUSH
4880: LD_INT 3
4882: PUSH
4883: LD_INT 62
4885: PUSH
4886: EMPTY
4887: LIST
4888: PUSH
4889: EMPTY
4890: LIST
4891: LIST
4892: PUSH
4893: EMPTY
4894: LIST
4895: LIST
4896: LIST
4897: PPUSH
4898: CALL_OW 69
4902: ST_TO_ADDR
// if b then
4903: LD_VAR 0 4
4907: IFFALSE 4974
// begin for i in b do
4909: LD_ADDR_VAR 0 2
4913: PUSH
4914: LD_VAR 0 4
4918: PUSH
4919: FOR_IN
4920: IFFALSE 4972
// begin PrepareApemanSoldier ( ) ;
4922: CALL 50069 0 0
// un := CreateHuman ;
4926: LD_ADDR_VAR 0 5
4930: PUSH
4931: CALL_OW 44
4935: ST_TO_ADDR
// legForces := Join ( legForces , un ) ;
4936: LD_ADDR_EXP 33
4940: PUSH
4941: LD_EXP 33
4945: PPUSH
4946: LD_VAR 0 5
4950: PPUSH
4951: CALL 53946 0 2
4955: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
4956: LD_VAR 0 5
4960: PPUSH
4961: LD_VAR 0 2
4965: PPUSH
4966: CALL_OW 52
// end ;
4970: GO 4919
4972: POP
4973: POP
// end ; for i := 1 to 2 do
4974: LD_ADDR_VAR 0 2
4978: PUSH
4979: DOUBLE
4980: LD_INT 1
4982: DEC
4983: ST_TO_ADDR
4984: LD_INT 2
4986: PUSH
4987: FOR_TO
4988: IFFALSE 5107
// begin PrepareVehicle ( ar_medium_trike , engine_solar , control_manual , ar_control_tower , 100 ) ;
4990: LD_INT 13
4992: PPUSH
4993: LD_INT 2
4995: PPUSH
4996: LD_INT 1
4998: PPUSH
4999: LD_INT 31
5001: PPUSH
5002: LD_INT 100
5004: PPUSH
5005: CALL 21097 0 5
// un := CreateVehicle ;
5009: LD_ADDR_VAR 0 5
5013: PUSH
5014: CALL_OW 45
5018: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
5019: LD_VAR 0 5
5023: PPUSH
5024: LD_INT 0
5026: PPUSH
5027: LD_INT 5
5029: PPUSH
5030: CALL_OW 12
5034: PPUSH
5035: CALL_OW 233
// PlaceUnitXYR ( un , 199 , 24 , 4 , false ) ;
5039: LD_VAR 0 5
5043: PPUSH
5044: LD_INT 199
5046: PPUSH
5047: LD_INT 24
5049: PPUSH
5050: LD_INT 4
5052: PPUSH
5053: LD_INT 0
5055: PPUSH
5056: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
5060: LD_INT 0
5062: PPUSH
5063: LD_INT 8
5065: PUSH
5066: LD_INT 9
5068: PUSH
5069: LD_INT 10
5071: PUSH
5072: LD_INT 10
5074: PUSH
5075: EMPTY
5076: LIST
5077: LIST
5078: LIST
5079: LIST
5080: PUSH
5081: LD_OWVAR 67
5085: ARRAY
5086: PPUSH
5087: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
5091: CALL_OW 44
5095: PPUSH
5096: LD_VAR 0 5
5100: PPUSH
5101: CALL_OW 52
// end ;
5105: GO 4987
5107: POP
5108: POP
// end ;
5109: LD_VAR 0 1
5113: RET
// every 0 0$2 trigger legScriptActive and Count ( legForces ) do var i , tmp , remote , undone , side , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
5114: LD_EXP 4
5118: PUSH
5119: LD_EXP 33
5123: PPUSH
5124: CALL 18359 0 1
5128: AND
5129: IFFALSE 7502
5131: GO 5133
5133: DISABLE
5134: LD_INT 0
5136: PPUSH
5137: PPUSH
5138: PPUSH
5139: PPUSH
5140: PPUSH
5141: PPUSH
5142: PPUSH
5143: PPUSH
5144: PPUSH
5145: PPUSH
5146: PPUSH
5147: PPUSH
5148: PPUSH
5149: PPUSH
5150: PPUSH
5151: PPUSH
5152: PPUSH
5153: PPUSH
// begin enable ;
5154: ENABLE
// side := 8 ;
5155: LD_ADDR_VAR 0 5
5159: PUSH
5160: LD_INT 8
5162: ST_TO_ADDR
// remote := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
5163: LD_ADDR_VAR 0 3
5167: PUSH
5168: LD_INT 22
5170: PUSH
5171: LD_VAR 0 5
5175: PUSH
5176: EMPTY
5177: LIST
5178: LIST
5179: PUSH
5180: LD_INT 33
5182: PUSH
5183: LD_INT 2
5185: PUSH
5186: EMPTY
5187: LIST
5188: LIST
5189: PUSH
5190: LD_INT 50
5192: PUSH
5193: EMPTY
5194: LIST
5195: PUSH
5196: LD_INT 3
5198: PUSH
5199: LD_INT 61
5201: PUSH
5202: EMPTY
5203: LIST
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: PUSH
5209: EMPTY
5210: LIST
5211: LIST
5212: LIST
5213: LIST
5214: PPUSH
5215: CALL_OW 69
5219: ST_TO_ADDR
// if remote and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_weapon , ar_control_tower ] ] ) ) then
5220: LD_VAR 0 3
5224: PUSH
5225: LD_INT 22
5227: PUSH
5228: LD_VAR 0 5
5232: PUSH
5233: EMPTY
5234: LIST
5235: LIST
5236: PUSH
5237: LD_INT 50
5239: PUSH
5240: EMPTY
5241: LIST
5242: PUSH
5243: LD_INT 34
5245: PUSH
5246: LD_INT 31
5248: PUSH
5249: EMPTY
5250: LIST
5251: LIST
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: LIST
5257: PPUSH
5258: CALL_OW 69
5262: PPUSH
5263: CALL 18359 0 1
5267: AND
5268: IFFALSE 5296
// for i in remote do
5270: LD_ADDR_VAR 0 1
5274: PUSH
5275: LD_VAR 0 3
5279: PUSH
5280: FOR_IN
5281: IFFALSE 5294
// Connect ( i ) ;
5283: LD_VAR 0 1
5287: PPUSH
5288: CALL 24565 0 1
5292: GO 5280
5294: POP
5295: POP
// if legTech then
5296: LD_EXP 35
5300: IFFALSE 5456
// begin lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
5302: LD_ADDR_VAR 0 6
5306: PUSH
5307: LD_INT 22
5309: PUSH
5310: LD_VAR 0 5
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: PUSH
5319: LD_INT 50
5321: PUSH
5322: EMPTY
5323: LIST
5324: PUSH
5325: LD_INT 2
5327: PUSH
5328: LD_INT 30
5330: PUSH
5331: LD_INT 6
5333: PUSH
5334: EMPTY
5335: LIST
5336: LIST
5337: PUSH
5338: LD_INT 30
5340: PUSH
5341: LD_INT 7
5343: PUSH
5344: EMPTY
5345: LIST
5346: LIST
5347: PUSH
5348: LD_INT 30
5350: PUSH
5351: LD_INT 8
5353: PUSH
5354: EMPTY
5355: LIST
5356: LIST
5357: PUSH
5358: EMPTY
5359: LIST
5360: LIST
5361: LIST
5362: LIST
5363: PUSH
5364: EMPTY
5365: LIST
5366: LIST
5367: LIST
5368: PPUSH
5369: CALL_OW 69
5373: ST_TO_ADDR
// if lab then
5374: LD_VAR 0 6
5378: IFFALSE 5456
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
5380: LD_VAR 0 6
5384: PUSH
5385: LD_INT 1
5387: ARRAY
5388: PPUSH
5389: CALL_OW 461
5393: PUSH
5394: LD_INT 2
5396: EQUAL
5397: IFFALSE 5456
// begin for i in legTech do
5399: LD_ADDR_VAR 0 1
5403: PUSH
5404: LD_EXP 35
5408: PUSH
5409: FOR_IN
5410: IFFALSE 5454
// if CanBeResearched ( lab [ 1 ] , i ) then
5412: LD_VAR 0 6
5416: PUSH
5417: LD_INT 1
5419: ARRAY
5420: PPUSH
5421: LD_VAR 0 1
5425: PPUSH
5426: CALL_OW 430
5430: IFFALSE 5452
// begin ComResearch ( lab [ 1 ] , i ) ;
5432: LD_VAR 0 6
5436: PUSH
5437: LD_INT 1
5439: ARRAY
5440: PPUSH
5441: LD_VAR 0 1
5445: PPUSH
5446: CALL_OW 124
// break ;
5450: GO 5454
// end ;
5452: GO 5409
5454: POP
5455: POP
// end ; end ; end ; fac := FilterUnitsInArea ( legBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
5456: LD_ADDR_VAR 0 16
5460: PUSH
5461: LD_INT 2
5463: PPUSH
5464: LD_INT 22
5466: PUSH
5467: LD_VAR 0 5
5471: PUSH
5472: EMPTY
5473: LIST
5474: LIST
5475: PUSH
5476: LD_INT 30
5478: PUSH
5479: LD_INT 3
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: PUSH
5486: LD_INT 50
5488: PUSH
5489: EMPTY
5490: LIST
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: LIST
5496: PPUSH
5497: CALL_OW 70
5501: ST_TO_ADDR
// if fac then
5502: LD_VAR 0 16
5506: IFFALSE 5772
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
5508: LD_VAR 0 16
5512: PUSH
5513: LD_INT 1
5515: ARRAY
5516: PPUSH
5517: CALL_OW 461
5521: PUSH
5522: LD_INT 2
5524: EQUAL
5525: IFFALSE 5772
// begin emptyTowers := FilterUnitsInArea ( legBaseArea , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
5527: LD_ADDR_VAR 0 17
5531: PUSH
5532: LD_INT 2
5534: PPUSH
5535: LD_INT 2
5537: PUSH
5538: LD_INT 30
5540: PUSH
5541: LD_INT 32
5543: PUSH
5544: EMPTY
5545: LIST
5546: LIST
5547: PUSH
5548: LD_INT 30
5550: PUSH
5551: LD_INT 33
5553: PUSH
5554: EMPTY
5555: LIST
5556: LIST
5557: PUSH
5558: EMPTY
5559: LIST
5560: LIST
5561: LIST
5562: PUSH
5563: LD_INT 35
5565: PUSH
5566: LD_INT 0
5568: PUSH
5569: EMPTY
5570: LIST
5571: LIST
5572: PUSH
5573: EMPTY
5574: LIST
5575: LIST
5576: PPUSH
5577: CALL_OW 70
5581: ST_TO_ADDR
// if emptyTowers then
5582: LD_VAR 0 17
5586: IFFALSE 5634
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , legBaseArea ) ;
5588: LD_ADDR_VAR 0 18
5592: PUSH
5593: LD_VAR 0 17
5597: PUSH
5598: LD_INT 1
5600: ARRAY
5601: PPUSH
5602: LD_INT 2
5604: PPUSH
5605: CALL 26604 0 2
5609: ST_TO_ADDR
// if weapon then
5610: LD_VAR 0 18
5614: IFFALSE 5634
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
5616: LD_VAR 0 17
5620: PUSH
5621: LD_INT 1
5623: ARRAY
5624: PPUSH
5625: LD_VAR 0 18
5629: PPUSH
5630: CALL_OW 148
// end ; if legConstructList then
5634: LD_EXP 36
5638: IFFALSE 5772
// if CanBeConstructed ( fac [ 1 ] , legConstructList [ 1 ] [ 1 ] , legConstructList [ 1 ] [ 2 ] , legConstructList [ 1 ] [ 3 ] , legConstructList [ 1 ] [ 4 ] ) then
5640: LD_VAR 0 16
5644: PUSH
5645: LD_INT 1
5647: ARRAY
5648: PPUSH
5649: LD_EXP 36
5653: PUSH
5654: LD_INT 1
5656: ARRAY
5657: PUSH
5658: LD_INT 1
5660: ARRAY
5661: PPUSH
5662: LD_EXP 36
5666: PUSH
5667: LD_INT 1
5669: ARRAY
5670: PUSH
5671: LD_INT 2
5673: ARRAY
5674: PPUSH
5675: LD_EXP 36
5679: PUSH
5680: LD_INT 1
5682: ARRAY
5683: PUSH
5684: LD_INT 3
5686: ARRAY
5687: PPUSH
5688: LD_EXP 36
5692: PUSH
5693: LD_INT 1
5695: ARRAY
5696: PUSH
5697: LD_INT 4
5699: ARRAY
5700: PPUSH
5701: CALL_OW 448
5705: IFFALSE 5772
// ComConstruct ( fac [ 1 ] , legConstructList [ 1 ] [ 1 ] , legConstructList [ 1 ] [ 2 ] , legConstructList [ 1 ] [ 3 ] , legConstructList [ 1 ] [ 4 ] ) ;
5707: LD_VAR 0 16
5711: PUSH
5712: LD_INT 1
5714: ARRAY
5715: PPUSH
5716: LD_EXP 36
5720: PUSH
5721: LD_INT 1
5723: ARRAY
5724: PUSH
5725: LD_INT 1
5727: ARRAY
5728: PPUSH
5729: LD_EXP 36
5733: PUSH
5734: LD_INT 1
5736: ARRAY
5737: PUSH
5738: LD_INT 2
5740: ARRAY
5741: PPUSH
5742: LD_EXP 36
5746: PUSH
5747: LD_INT 1
5749: ARRAY
5750: PUSH
5751: LD_INT 3
5753: ARRAY
5754: PPUSH
5755: LD_EXP 36
5759: PUSH
5760: LD_INT 1
5762: ARRAY
5763: PUSH
5764: LD_INT 4
5766: ARRAY
5767: PPUSH
5768: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( legBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5772: LD_ADDR_VAR 0 2
5776: PUSH
5777: LD_INT 2
5779: PPUSH
5780: LD_INT 21
5782: PUSH
5783: LD_INT 3
5785: PUSH
5786: EMPTY
5787: LIST
5788: LIST
5789: PUSH
5790: LD_INT 3
5792: PUSH
5793: LD_INT 57
5795: PUSH
5796: EMPTY
5797: LIST
5798: PUSH
5799: EMPTY
5800: LIST
5801: LIST
5802: PUSH
5803: LD_INT 3
5805: PUSH
5806: LD_INT 24
5808: PUSH
5809: LD_INT 1000
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: PUSH
5816: EMPTY
5817: LIST
5818: LIST
5819: PUSH
5820: EMPTY
5821: LIST
5822: LIST
5823: LIST
5824: PPUSH
5825: CALL_OW 70
5829: ST_TO_ADDR
// cr := GetListOfCratesInArea ( legCratesArea ) ;
5830: LD_ADDR_VAR 0 10
5834: PUSH
5835: LD_INT 14
5837: PPUSH
5838: CALL_OW 435
5842: ST_TO_ADDR
// sci := UnitFilter ( legForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
5843: LD_ADDR_VAR 0 11
5847: PUSH
5848: LD_EXP 33
5852: PPUSH
5853: LD_INT 25
5855: PUSH
5856: LD_INT 4
5858: PUSH
5859: EMPTY
5860: LIST
5861: LIST
5862: PUSH
5863: LD_INT 50
5865: PUSH
5866: EMPTY
5867: LIST
5868: PUSH
5869: EMPTY
5870: LIST
5871: LIST
5872: PPUSH
5873: CALL_OW 72
5877: ST_TO_ADDR
// lab := FilterUnitsInArea ( legBaseArea , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
5878: LD_ADDR_VAR 0 6
5882: PUSH
5883: LD_INT 2
5885: PPUSH
5886: LD_INT 2
5888: PUSH
5889: LD_INT 30
5891: PUSH
5892: LD_INT 6
5894: PUSH
5895: EMPTY
5896: LIST
5897: LIST
5898: PUSH
5899: LD_INT 30
5901: PUSH
5902: LD_INT 7
5904: PUSH
5905: EMPTY
5906: LIST
5907: LIST
5908: PUSH
5909: LD_INT 30
5911: PUSH
5912: LD_INT 8
5914: PUSH
5915: EMPTY
5916: LIST
5917: LIST
5918: PUSH
5919: EMPTY
5920: LIST
5921: LIST
5922: LIST
5923: LIST
5924: PPUSH
5925: CALL_OW 70
5929: ST_TO_ADDR
// if sci then
5930: LD_VAR 0 11
5934: IFFALSE 6093
// begin hurtUnits := UnitFilter ( legForces , [ [ f_inarea , legBaseArea ] , [ f_tag , tHeal ] ] ) ;
5936: LD_ADDR_VAR 0 13
5940: PUSH
5941: LD_EXP 33
5945: PPUSH
5946: LD_INT 95
5948: PUSH
5949: LD_INT 2
5951: PUSH
5952: EMPTY
5953: LIST
5954: LIST
5955: PUSH
5956: LD_INT 120
5958: PUSH
5959: LD_INT 1
5961: PUSH
5962: EMPTY
5963: LIST
5964: LIST
5965: PUSH
5966: EMPTY
5967: LIST
5968: LIST
5969: PPUSH
5970: CALL_OW 72
5974: ST_TO_ADDR
// if hurtUnits then
5975: LD_VAR 0 13
5979: IFFALSE 6040
// begin for i in sci do
5981: LD_ADDR_VAR 0 1
5985: PUSH
5986: LD_VAR 0 11
5990: PUSH
5991: FOR_IN
5992: IFFALSE 6036
// if IsInUnit ( i ) then
5994: LD_VAR 0 1
5998: PPUSH
5999: CALL_OW 310
6003: IFFALSE 6016
// ComExitBuilding ( i ) else
6005: LD_VAR 0 1
6009: PPUSH
6010: CALL_OW 122
6014: GO 6034
// ComHeal ( i , hurtUnits [ 1 ] ) ;
6016: LD_VAR 0 1
6020: PPUSH
6021: LD_VAR 0 13
6025: PUSH
6026: LD_INT 1
6028: ARRAY
6029: PPUSH
6030: CALL_OW 128
6034: GO 5991
6036: POP
6037: POP
// end else
6038: GO 6093
// if lab then
6040: LD_VAR 0 6
6044: IFFALSE 6093
// begin for i in sci do
6046: LD_ADDR_VAR 0 1
6050: PUSH
6051: LD_VAR 0 11
6055: PUSH
6056: FOR_IN
6057: IFFALSE 6091
// if not IsInUnit ( i ) then
6059: LD_VAR 0 1
6063: PPUSH
6064: CALL_OW 310
6068: NOT
6069: IFFALSE 6089
// ComEnterUnit ( i , lab [ 1 ] ) ;
6071: LD_VAR 0 1
6075: PPUSH
6076: LD_VAR 0 6
6080: PUSH
6081: LD_INT 1
6083: ARRAY
6084: PPUSH
6085: CALL_OW 120
6089: GO 6056
6091: POP
6092: POP
// end ; end ; eng := UnitFilter ( legForces , [ f_class , 2 ] ) ;
6093: LD_ADDR_VAR 0 7
6097: PUSH
6098: LD_EXP 33
6102: PPUSH
6103: LD_INT 25
6105: PUSH
6106: LD_INT 2
6108: PUSH
6109: EMPTY
6110: LIST
6111: LIST
6112: PPUSH
6113: CALL_OW 72
6117: ST_TO_ADDR
// if eng then
6118: LD_VAR 0 7
6122: IFFALSE 6897
// begin for i in eng do
6124: LD_ADDR_VAR 0 1
6128: PUSH
6129: LD_VAR 0 7
6133: PUSH
6134: FOR_IN
6135: IFFALSE 6895
// begin tag := GetTag ( i ) ;
6137: LD_ADDR_VAR 0 8
6141: PUSH
6142: LD_VAR 0 1
6146: PPUSH
6147: CALL_OW 110
6151: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
6152: LD_VAR 0 1
6156: PPUSH
6157: CALL_OW 256
6161: PUSH
6162: LD_INT 800
6164: LESS
6165: PUSH
6166: LD_VAR 0 8
6170: PUSH
6171: LD_INT 1
6173: NONEQUAL
6174: AND
6175: IFFALSE 6225
// begin SetTag ( i , tHeal ) ;
6177: LD_VAR 0 1
6181: PPUSH
6182: LD_INT 1
6184: PPUSH
6185: CALL_OW 109
// ComMoveXY ( i , legHealPoint [ 1 ] , legHealPoint [ 2 ] ) ;
6189: LD_VAR 0 1
6193: PPUSH
6194: LD_EXP 37
6198: PUSH
6199: LD_INT 1
6201: ARRAY
6202: PPUSH
6203: LD_EXP 37
6207: PUSH
6208: LD_INT 2
6210: ARRAY
6211: PPUSH
6212: CALL_OW 111
// AddComHold ( i ) ;
6216: LD_VAR 0 1
6220: PPUSH
6221: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
6225: LD_VAR 0 8
6229: PUSH
6230: LD_INT 1
6232: EQUAL
6233: PUSH
6234: LD_VAR 0 1
6238: PPUSH
6239: CALL_OW 256
6243: PUSH
6244: LD_INT 1000
6246: EQUAL
6247: AND
6248: IFFALSE 6262
// SetTag ( i , 0 ) ;
6250: LD_VAR 0 1
6254: PPUSH
6255: LD_INT 0
6257: PPUSH
6258: CALL_OW 109
// if not tag then
6262: LD_VAR 0 8
6266: NOT
6267: IFFALSE 6435
// begin undone := FilterUnitsInArea ( legBaseArea , [ f_constructed ] ) ;
6269: LD_ADDR_VAR 0 4
6273: PUSH
6274: LD_INT 2
6276: PPUSH
6277: LD_INT 57
6279: PUSH
6280: EMPTY
6281: LIST
6282: PPUSH
6283: CALL_OW 70
6287: ST_TO_ADDR
// if undone then
6288: LD_VAR 0 4
6292: IFFALSE 6314
// begin ComComplete ( i , undone [ 1 ] ) ;
6294: LD_VAR 0 1
6298: PPUSH
6299: LD_VAR 0 4
6303: PUSH
6304: LD_INT 1
6306: ARRAY
6307: PPUSH
6308: CALL 24457 0 2
// continue ;
6312: GO 6134
// end ; if cr or tmp or Count ( legBuildings ) then
6314: LD_VAR 0 10
6318: PUSH
6319: LD_VAR 0 2
6323: OR
6324: PUSH
6325: LD_EXP 38
6329: PPUSH
6330: CALL 18359 0 1
6334: OR
6335: IFFALSE 6411
// begin if IsInUnit ( i ) then
6337: LD_VAR 0 1
6341: PPUSH
6342: CALL_OW 310
6346: IFFALSE 6357
// ComExitBuilding ( i ) ;
6348: LD_VAR 0 1
6352: PPUSH
6353: CALL_OW 122
// if tmp then
6357: LD_VAR 0 2
6361: IFFALSE 6377
// SetTag ( i , tRepair ) else
6363: LD_VAR 0 1
6367: PPUSH
6368: LD_INT 3
6370: PPUSH
6371: CALL_OW 109
6375: GO 6409
// if cr then
6377: LD_VAR 0 10
6381: IFFALSE 6397
// SetTag ( i , tCrates ) else
6383: LD_VAR 0 1
6387: PPUSH
6388: LD_INT 2
6390: PPUSH
6391: CALL_OW 109
6395: GO 6409
// SetTag ( i , tBuild ) ;
6397: LD_VAR 0 1
6401: PPUSH
6402: LD_INT 5
6404: PPUSH
6405: CALL_OW 109
// end else
6409: GO 6435
// if not IsInUnit ( i ) then
6411: LD_VAR 0 1
6415: PPUSH
6416: CALL_OW 310
6420: NOT
6421: IFFALSE 6435
// ComEnterUnit ( i , legBase ) ;
6423: LD_VAR 0 1
6427: PPUSH
6428: LD_INT 38
6430: PPUSH
6431: CALL_OW 120
// end ; if tag = tRepair then
6435: LD_VAR 0 8
6439: PUSH
6440: LD_INT 3
6442: EQUAL
6443: IFFALSE 6545
// begin if IsInUnit ( i ) then
6445: LD_VAR 0 1
6449: PPUSH
6450: CALL_OW 310
6454: IFFALSE 6467
// begin ComExitBuilding ( i ) ;
6456: LD_VAR 0 1
6460: PPUSH
6461: CALL_OW 122
// continue ;
6465: GO 6134
// end ; if not tmp then
6467: LD_VAR 0 2
6471: NOT
6472: IFFALSE 6488
// begin SetTag ( i , 0 ) ;
6474: LD_VAR 0 1
6478: PPUSH
6479: LD_INT 0
6481: PPUSH
6482: CALL_OW 109
// continue ;
6486: GO 6134
// end ; if not HasTask ( i ) then
6488: LD_VAR 0 1
6492: PPUSH
6493: CALL_OW 314
6497: NOT
6498: IFFALSE 6518
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
6500: LD_VAR 0 1
6504: PPUSH
6505: LD_VAR 0 2
6509: PUSH
6510: LD_INT 1
6512: ARRAY
6513: PPUSH
6514: CALL_OW 130
// if not IsInArea ( i , legBaseArea ) then
6518: LD_VAR 0 1
6522: PPUSH
6523: LD_INT 2
6525: PPUSH
6526: CALL_OW 308
6530: NOT
6531: IFFALSE 6545
// ComMoveToArea ( i , legBaseArea ) ;
6533: LD_VAR 0 1
6537: PPUSH
6538: LD_INT 2
6540: PPUSH
6541: CALL_OW 113
// end ; if tag = tBuild then
6545: LD_VAR 0 8
6549: PUSH
6550: LD_INT 5
6552: EQUAL
6553: IFFALSE 6748
// begin if IsInUnit ( i ) then
6555: LD_VAR 0 1
6559: PPUSH
6560: CALL_OW 310
6564: IFFALSE 6577
// begin ComExitBuilding ( i ) ;
6566: LD_VAR 0 1
6570: PPUSH
6571: CALL_OW 122
// continue ;
6575: GO 6134
// end ; if not Count ( legBuildings ) then
6577: LD_EXP 38
6581: PPUSH
6582: CALL 18359 0 1
6586: NOT
6587: IFFALSE 6605
// begin SetTag ( i , 0 ) ;
6589: LD_VAR 0 1
6593: PPUSH
6594: LD_INT 0
6596: PPUSH
6597: CALL_OW 109
// continue ;
6601: GO 6134
// end else
6603: GO 6642
// if not CanBeBuiltOnlyResources ( legBase , legBuildings [ 1 ] [ 1 ] ) then
6605: LD_INT 38
6607: PPUSH
6608: LD_EXP 38
6612: PUSH
6613: LD_INT 1
6615: ARRAY
6616: PUSH
6617: LD_INT 1
6619: ARRAY
6620: PPUSH
6621: CALL 7801 0 2
6625: NOT
6626: IFFALSE 6642
// begin SetTag ( i , 0 ) ;
6628: LD_VAR 0 1
6632: PPUSH
6633: LD_INT 0
6635: PPUSH
6636: CALL_OW 109
// continue ;
6640: GO 6134
// end ; undone := FilterUnitsInArea ( legBaseArea , [ f_constructed ] ) ;
6642: LD_ADDR_VAR 0 4
6646: PUSH
6647: LD_INT 2
6649: PPUSH
6650: LD_INT 57
6652: PUSH
6653: EMPTY
6654: LIST
6655: PPUSH
6656: CALL_OW 70
6660: ST_TO_ADDR
// if undone then
6661: LD_VAR 0 4
6665: IFFALSE 6687
// begin ComComplete ( i , undone [ 1 ] ) ;
6667: LD_VAR 0 1
6671: PPUSH
6672: LD_VAR 0 4
6676: PUSH
6677: LD_INT 1
6679: ARRAY
6680: PPUSH
6681: CALL 24457 0 2
// continue ;
6685: GO 6134
// end ; ComBuild ( i , legBuildings [ 1 ] [ 1 ] , legBuildings [ 1 ] [ 2 ] , legBuildings [ 1 ] [ 3 ] , legBuildings [ 1 ] [ 4 ] ) ;
6687: LD_VAR 0 1
6691: PPUSH
6692: LD_EXP 38
6696: PUSH
6697: LD_INT 1
6699: ARRAY
6700: PUSH
6701: LD_INT 1
6703: ARRAY
6704: PPUSH
6705: LD_EXP 38
6709: PUSH
6710: LD_INT 1
6712: ARRAY
6713: PUSH
6714: LD_INT 2
6716: ARRAY
6717: PPUSH
6718: LD_EXP 38
6722: PUSH
6723: LD_INT 1
6725: ARRAY
6726: PUSH
6727: LD_INT 3
6729: ARRAY
6730: PPUSH
6731: LD_EXP 38
6735: PUSH
6736: LD_INT 1
6738: ARRAY
6739: PUSH
6740: LD_INT 4
6742: ARRAY
6743: PPUSH
6744: CALL_OW 145
// end ; if tag = tCrates then
6748: LD_VAR 0 8
6752: PUSH
6753: LD_INT 2
6755: EQUAL
6756: IFFALSE 6893
// begin if IsInUnit ( i ) then
6758: LD_VAR 0 1
6762: PPUSH
6763: CALL_OW 310
6767: IFFALSE 6780
// begin ComExitBuilding ( i ) ;
6769: LD_VAR 0 1
6773: PPUSH
6774: CALL_OW 122
// continue ;
6778: GO 6134
// end ; if not cr then
6780: LD_VAR 0 10
6784: NOT
6785: IFFALSE 6801
// begin SetTag ( i , 0 ) ;
6787: LD_VAR 0 1
6791: PPUSH
6792: LD_INT 0
6794: PPUSH
6795: CALL_OW 109
// continue ;
6799: GO 6134
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
6801: LD_VAR 0 1
6805: PPUSH
6806: CALL_OW 314
6810: NOT
6811: PUSH
6812: LD_INT 81
6814: PUSH
6815: LD_VAR 0 5
6819: PUSH
6820: EMPTY
6821: LIST
6822: LIST
6823: PUSH
6824: LD_INT 92
6826: PUSH
6827: LD_VAR 0 10
6831: PUSH
6832: LD_INT 1
6834: ARRAY
6835: PUSH
6836: LD_VAR 0 10
6840: PUSH
6841: LD_INT 2
6843: ARRAY
6844: PUSH
6845: LD_INT 12
6847: PUSH
6848: EMPTY
6849: LIST
6850: LIST
6851: LIST
6852: LIST
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: PPUSH
6858: CALL_OW 69
6862: NOT
6863: AND
6864: IFFALSE 6893
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
6866: LD_VAR 0 1
6870: PPUSH
6871: LD_VAR 0 10
6875: PUSH
6876: LD_INT 1
6878: ARRAY
6879: PPUSH
6880: LD_VAR 0 10
6884: PUSH
6885: LD_INT 2
6887: ARRAY
6888: PPUSH
6889: CALL_OW 117
// end ; end ;
6893: GO 6134
6895: POP
6896: POP
// end ; sol := UnitFilter ( legForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_mortar ] ] , [ f_ok ] ] ) ;
6897: LD_ADDR_VAR 0 12
6901: PUSH
6902: LD_EXP 33
6906: PPUSH
6907: LD_INT 2
6909: PUSH
6910: LD_INT 25
6912: PUSH
6913: LD_INT 1
6915: PUSH
6916: EMPTY
6917: LIST
6918: LIST
6919: PUSH
6920: LD_INT 25
6922: PUSH
6923: LD_INT 5
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: LD_INT 25
6932: PUSH
6933: LD_INT 8
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: PUSH
6946: LD_INT 50
6948: PUSH
6949: EMPTY
6950: LIST
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PPUSH
6956: CALL_OW 72
6960: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( legBaseArea , [ f_enemy , side ] ) ;
6961: LD_ADDR_VAR 0 14
6965: PUSH
6966: LD_INT 2
6968: PPUSH
6969: LD_INT 81
6971: PUSH
6972: LD_VAR 0 5
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: PPUSH
6981: CALL_OW 70
6985: ST_TO_ADDR
// if sol then
6986: LD_VAR 0 12
6990: IFFALSE 7502
// begin if enemyInBase then
6992: LD_VAR 0 14
6996: IFFALSE 7141
// begin for i in sol do
6998: LD_ADDR_VAR 0 1
7002: PUSH
7003: LD_VAR 0 12
7007: PUSH
7008: FOR_IN
7009: IFFALSE 7137
// begin tw := IsInUnit ( i ) ;
7011: LD_ADDR_VAR 0 9
7015: PUSH
7016: LD_VAR 0 1
7020: PPUSH
7021: CALL_OW 310
7025: ST_TO_ADDR
// if tw then
7026: LD_VAR 0 9
7030: IFFALSE 7111
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
7032: LD_VAR 0 9
7036: PUSH
7037: LD_INT 22
7039: PUSH
7040: LD_VAR 0 5
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: PUSH
7049: LD_INT 101
7051: PUSH
7052: LD_INT 2
7054: PUSH
7055: EMPTY
7056: LIST
7057: LIST
7058: PUSH
7059: LD_INT 2
7061: PUSH
7062: LD_INT 30
7064: PUSH
7065: LD_INT 32
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: PUSH
7072: LD_INT 30
7074: PUSH
7075: LD_INT 31
7077: PUSH
7078: EMPTY
7079: LIST
7080: LIST
7081: PUSH
7082: EMPTY
7083: LIST
7084: LIST
7085: LIST
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: LIST
7091: PPUSH
7092: CALL_OW 69
7096: IN
7097: NOT
7098: IFFALSE 7109
// ComExitBuilding ( i ) ;
7100: LD_VAR 0 1
7104: PPUSH
7105: CALL_OW 122
// end else
7109: GO 7135
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
7111: LD_VAR 0 1
7115: PPUSH
7116: LD_VAR 0 14
7120: PPUSH
7121: LD_VAR 0 1
7125: PPUSH
7126: CALL_OW 74
7130: PPUSH
7131: CALL_OW 115
// end ;
7135: GO 7008
7137: POP
7138: POP
// end else
7139: GO 7502
// begin empty := FilterUnitsInArea ( legBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
7141: LD_ADDR_VAR 0 15
7145: PUSH
7146: LD_INT 2
7148: PPUSH
7149: LD_INT 3
7151: PUSH
7152: LD_INT 62
7154: PUSH
7155: EMPTY
7156: LIST
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PUSH
7162: LD_INT 2
7164: PUSH
7165: LD_INT 30
7167: PUSH
7168: LD_INT 32
7170: PUSH
7171: EMPTY
7172: LIST
7173: LIST
7174: PUSH
7175: LD_INT 30
7177: PUSH
7178: LD_INT 4
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: PUSH
7185: LD_INT 30
7187: PUSH
7188: LD_INT 5
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: PUSH
7195: LD_INT 30
7197: PUSH
7198: LD_INT 31
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: PPUSH
7216: CALL_OW 70
7220: ST_TO_ADDR
// if empty then
7221: LD_VAR 0 15
7225: IFFALSE 7242
// empty := ReverseArray ( empty ) ;
7227: LD_ADDR_VAR 0 15
7231: PUSH
7232: LD_VAR 0 15
7236: PPUSH
7237: CALL 49235 0 1
7241: ST_TO_ADDR
// for i in sol do
7242: LD_ADDR_VAR 0 1
7246: PUSH
7247: LD_VAR 0 12
7251: PUSH
7252: FOR_IN
7253: IFFALSE 7500
// begin tag := GetTag ( i ) ;
7255: LD_ADDR_VAR 0 8
7259: PUSH
7260: LD_VAR 0 1
7264: PPUSH
7265: CALL_OW 110
7269: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
7270: LD_VAR 0 1
7274: PPUSH
7275: CALL_OW 256
7279: PUSH
7280: LD_INT 1000
7282: LESS
7283: PUSH
7284: LD_VAR 0 8
7288: PUSH
7289: LD_INT 1
7291: NONEQUAL
7292: AND
7293: IFFALSE 7345
// begin SetTag ( i , tHeal ) ;
7295: LD_VAR 0 1
7299: PPUSH
7300: LD_INT 1
7302: PPUSH
7303: CALL_OW 109
// ComMoveXY ( i , legHealPoint [ 1 ] , legHealPoint [ 2 ] ) ;
7307: LD_VAR 0 1
7311: PPUSH
7312: LD_EXP 37
7316: PUSH
7317: LD_INT 1
7319: ARRAY
7320: PPUSH
7321: LD_EXP 37
7325: PUSH
7326: LD_INT 2
7328: ARRAY
7329: PPUSH
7330: CALL_OW 111
// AddComHold ( i ) ;
7334: LD_VAR 0 1
7338: PPUSH
7339: CALL_OW 200
// continue ;
7343: GO 7252
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
7345: LD_VAR 0 1
7349: PPUSH
7350: CALL_OW 256
7354: PUSH
7355: LD_INT 1000
7357: EQUAL
7358: PUSH
7359: LD_VAR 0 8
7363: PUSH
7364: LD_INT 1
7366: EQUAL
7367: AND
7368: IFFALSE 7384
// begin SetTag ( i , 0 ) ;
7370: LD_VAR 0 1
7374: PPUSH
7375: LD_INT 0
7377: PPUSH
7378: CALL_OW 109
// continue ;
7382: GO 7252
// end ; if HasTask ( i ) then
7384: LD_VAR 0 1
7388: PPUSH
7389: CALL_OW 314
7393: IFFALSE 7397
// continue ;
7395: GO 7252
// if not IsInUnit ( i ) and not tag and empty then
7397: LD_VAR 0 1
7401: PPUSH
7402: CALL_OW 310
7406: NOT
7407: PUSH
7408: LD_VAR 0 8
7412: NOT
7413: AND
7414: PUSH
7415: LD_VAR 0 15
7419: AND
7420: IFFALSE 7498
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
7422: LD_VAR 0 1
7426: PPUSH
7427: LD_VAR 0 15
7431: PUSH
7432: LD_INT 1
7434: ARRAY
7435: PPUSH
7436: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
7440: LD_VAR 0 15
7444: PUSH
7445: LD_INT 1
7447: ARRAY
7448: PPUSH
7449: CALL_OW 266
7453: PUSH
7454: LD_INT 5
7456: EQUAL
7457: PUSH
7458: LD_INT 50
7460: PPUSH
7461: CALL_OW 13
7465: AND
7466: IFFALSE 7480
// AddComChangeProfession ( i , class_mortar ) ;
7468: LD_VAR 0 1
7472: PPUSH
7473: LD_INT 8
7475: PPUSH
7476: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
7480: LD_ADDR_VAR 0 15
7484: PUSH
7485: LD_VAR 0 15
7489: PPUSH
7490: LD_INT 1
7492: PPUSH
7493: CALL_OW 3
7497: ST_TO_ADDR
// end ; end ;
7498: GO 7252
7500: POP
7501: POP
// end ; end ; end ;
7502: PPOPN 18
7504: END
// every 0 0$2 trigger IsOk ( legCargo ) and legScriptActive do var cr , enemyInArea ;
7505: LD_EXP 40
7509: PPUSH
7510: CALL_OW 302
7514: PUSH
7515: LD_EXP 4
7519: AND
7520: IFFALSE 7798
7522: GO 7524
7524: DISABLE
7525: LD_INT 0
7527: PPUSH
7528: PPUSH
// begin enable ;
7529: ENABLE
// enemyInArea := FilterUnitsInArea ( legBaseArea , [ [ f_enemy , 8 ] , [ f_ok ] ] ) ;
7530: LD_ADDR_VAR 0 2
7534: PUSH
7535: LD_INT 2
7537: PPUSH
7538: LD_INT 81
7540: PUSH
7541: LD_INT 8
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: PUSH
7548: LD_INT 50
7550: PUSH
7551: EMPTY
7552: LIST
7553: PUSH
7554: EMPTY
7555: LIST
7556: LIST
7557: PPUSH
7558: CALL_OW 70
7562: ST_TO_ADDR
// cr := GetListOfCratesInArea ( cratesNorthArea ) ;
7563: LD_ADDR_VAR 0 1
7567: PUSH
7568: LD_INT 16
7570: PPUSH
7571: CALL_OW 435
7575: ST_TO_ADDR
// if GetFuel ( legCargo ) < 10 and not See ( 2 , legCargo ) and GetEngine ( legCargo ) = engine_combustion then
7576: LD_EXP 40
7580: PPUSH
7581: CALL_OW 261
7585: PUSH
7586: LD_INT 10
7588: LESS
7589: PUSH
7590: LD_INT 2
7592: PPUSH
7593: LD_EXP 40
7597: PPUSH
7598: CALL_OW 292
7602: NOT
7603: AND
7604: PUSH
7605: LD_EXP 40
7609: PPUSH
7610: CALL_OW 262
7614: PUSH
7615: LD_INT 1
7617: EQUAL
7618: AND
7619: IFFALSE 7633
// SetFuel ( legCargo , 100 ) ;
7621: LD_EXP 40
7625: PPUSH
7626: LD_INT 100
7628: PPUSH
7629: CALL_OW 240
// if not HasTask ( legCargo ) and GetCargo ( legCargo , mat_cans ) < 100 and not enemyInArea then
7633: LD_EXP 40
7637: PPUSH
7638: CALL_OW 314
7642: NOT
7643: PUSH
7644: LD_EXP 40
7648: PPUSH
7649: LD_INT 1
7651: PPUSH
7652: CALL_OW 289
7656: PUSH
7657: LD_INT 100
7659: LESS
7660: AND
7661: PUSH
7662: LD_VAR 0 2
7666: NOT
7667: AND
7668: IFFALSE 7734
// begin if cr then
7670: LD_VAR 0 1
7674: IFFALSE 7705
// ComCollect ( legCargo , cr [ 1 ] , cr [ 2 ] ) else
7676: LD_EXP 40
7680: PPUSH
7681: LD_VAR 0 1
7685: PUSH
7686: LD_INT 1
7688: ARRAY
7689: PPUSH
7690: LD_VAR 0 1
7694: PUSH
7695: LD_INT 2
7697: ARRAY
7698: PPUSH
7699: CALL_OW 117
7703: GO 7732
// if not IsInArea ( legCargo , cratesNorthArea ) then
7705: LD_EXP 40
7709: PPUSH
7710: LD_INT 16
7712: PPUSH
7713: CALL_OW 308
7717: NOT
7718: IFFALSE 7732
// ComMoveToArea ( legCargo , cratesNorthArea ) ;
7720: LD_EXP 40
7724: PPUSH
7725: LD_INT 16
7727: PPUSH
7728: CALL_OW 113
// exit ;
7732: GO 7798
// end ; if enemyInArea and not IsInArea ( legCargo , legBaseArea ) then
7734: LD_VAR 0 2
7738: PUSH
7739: LD_EXP 40
7743: PPUSH
7744: LD_INT 2
7746: PPUSH
7747: CALL_OW 308
7751: NOT
7752: AND
7753: IFFALSE 7772
// ComMoveXY ( legCargo , 194 , 17 ) else
7755: LD_EXP 40
7759: PPUSH
7760: LD_INT 194
7762: PPUSH
7763: LD_INT 17
7765: PPUSH
7766: CALL_OW 111
7770: GO 7798
// if GetCargo ( legCargo , mat_cans ) then
7772: LD_EXP 40
7776: PPUSH
7777: LD_INT 1
7779: PPUSH
7780: CALL_OW 289
7784: IFFALSE 7798
// ComGive ( legCargo , legBase ) ;
7786: LD_EXP 40
7790: PPUSH
7791: LD_INT 38
7793: PPUSH
7794: CALL_OW 161
// end ; end_of_file
7798: PPOPN 2
7800: END
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
7801: LD_INT 0
7803: PPUSH
7804: PPUSH
7805: PPUSH
// if btype = b_depot then
7806: LD_VAR 0 2
7810: PUSH
7811: LD_INT 0
7813: EQUAL
7814: IFFALSE 7826
// begin result := true ;
7816: LD_ADDR_VAR 0 3
7820: PUSH
7821: LD_INT 1
7823: ST_TO_ADDR
// exit ;
7824: GO 7942
// end ; pom := GetBase ( depot ) ;
7826: LD_ADDR_VAR 0 4
7830: PUSH
7831: LD_VAR 0 1
7835: PPUSH
7836: CALL_OW 274
7840: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
7841: LD_ADDR_VAR 0 5
7845: PUSH
7846: LD_VAR 0 2
7850: PPUSH
7851: LD_VAR 0 1
7855: PPUSH
7856: CALL_OW 248
7860: PPUSH
7861: CALL_OW 450
7865: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
7866: LD_ADDR_VAR 0 3
7870: PUSH
7871: LD_VAR 0 4
7875: PPUSH
7876: LD_INT 1
7878: PPUSH
7879: CALL_OW 275
7883: PUSH
7884: LD_VAR 0 5
7888: PUSH
7889: LD_INT 1
7891: ARRAY
7892: GREATEREQUAL
7893: PUSH
7894: LD_VAR 0 4
7898: PPUSH
7899: LD_INT 2
7901: PPUSH
7902: CALL_OW 275
7906: PUSH
7907: LD_VAR 0 5
7911: PUSH
7912: LD_INT 2
7914: ARRAY
7915: GREATEREQUAL
7916: AND
7917: PUSH
7918: LD_VAR 0 4
7922: PPUSH
7923: LD_INT 3
7925: PPUSH
7926: CALL_OW 275
7930: PUSH
7931: LD_VAR 0 5
7935: PUSH
7936: LD_INT 3
7938: ARRAY
7939: GREATEREQUAL
7940: AND
7941: ST_TO_ADDR
// end ;
7942: LD_VAR 0 3
7946: RET
// export function CreateNature ; var i , areas , amount ; begin
7947: LD_INT 0
7949: PPUSH
7950: PPUSH
7951: PPUSH
7952: PPUSH
// PrepareTiger ( 0 ) ;
7953: LD_INT 0
7955: PPUSH
7956: CALL 50335 0 1
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
7960: LD_ADDR_VAR 0 2
7964: PUSH
7965: DOUBLE
7966: LD_INT 1
7968: DEC
7969: ST_TO_ADDR
7970: LD_INT 3
7972: PUSH
7973: LD_INT 4
7975: PUSH
7976: LD_INT 5
7978: PUSH
7979: LD_INT 6
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: PUSH
7988: LD_OWVAR 67
7992: ARRAY
7993: PUSH
7994: FOR_TO
7995: IFFALSE 8014
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
7997: CALL_OW 44
8001: PPUSH
8002: LD_INT 7
8004: PPUSH
8005: LD_INT 0
8007: PPUSH
8008: CALL_OW 49
8012: GO 7994
8014: POP
8015: POP
// PrepareBird ;
8016: CALL 50516 0 0
// for i := 1 to 3 do
8020: LD_ADDR_VAR 0 2
8024: PUSH
8025: DOUBLE
8026: LD_INT 1
8028: DEC
8029: ST_TO_ADDR
8030: LD_INT 3
8032: PUSH
8033: FOR_TO
8034: IFFALSE 8053
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
8036: CALL_OW 44
8040: PPUSH
8041: LD_INT 7
8043: PPUSH
8044: LD_INT 0
8046: PPUSH
8047: CALL_OW 49
8051: GO 8033
8053: POP
8054: POP
// PrepareHorse ;
8055: CALL 50556 0 0
// for i := 1 to 3 do
8059: LD_ADDR_VAR 0 2
8063: PUSH
8064: DOUBLE
8065: LD_INT 1
8067: DEC
8068: ST_TO_ADDR
8069: LD_INT 3
8071: PUSH
8072: FOR_TO
8073: IFFALSE 8092
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
8075: CALL_OW 44
8079: PPUSH
8080: LD_INT 7
8082: PPUSH
8083: LD_INT 0
8085: PPUSH
8086: CALL_OW 49
8090: GO 8072
8092: POP
8093: POP
// PrepareFrog ;
8094: CALL 50436 0 0
// for i := 1 to 3 do
8098: LD_ADDR_VAR 0 2
8102: PUSH
8103: DOUBLE
8104: LD_INT 1
8106: DEC
8107: ST_TO_ADDR
8108: LD_INT 3
8110: PUSH
8111: FOR_TO
8112: IFFALSE 8131
// PlaceUnitArea ( CreateHuman , frogArea , false ) ;
8114: CALL_OW 44
8118: PPUSH
8119: LD_INT 8
8121: PPUSH
8122: LD_INT 0
8124: PPUSH
8125: CALL_OW 49
8129: GO 8111
8131: POP
8132: POP
// amount := [ 3 , 2 , 2 , 1 ] [ Difficulty ] ;
8133: LD_ADDR_VAR 0 4
8137: PUSH
8138: LD_INT 3
8140: PUSH
8141: LD_INT 2
8143: PUSH
8144: LD_INT 2
8146: PUSH
8147: LD_INT 1
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: PUSH
8156: LD_OWVAR 67
8160: ARRAY
8161: ST_TO_ADDR
// areas := [ mastodont1Area , mastodont2Area , mastodont3Area , mastodont4Area ] ;
8162: LD_ADDR_VAR 0 3
8166: PUSH
8167: LD_INT 18
8169: PUSH
8170: LD_INT 19
8172: PUSH
8173: LD_INT 20
8175: PUSH
8176: LD_INT 21
8178: PUSH
8179: EMPTY
8180: LIST
8181: LIST
8182: LIST
8183: LIST
8184: ST_TO_ADDR
// PrepareMastodont ;
8185: CALL 50596 0 0
// for i := 1 to amount do
8189: LD_ADDR_VAR 0 2
8193: PUSH
8194: DOUBLE
8195: LD_INT 1
8197: DEC
8198: ST_TO_ADDR
8199: LD_VAR 0 4
8203: PUSH
8204: FOR_TO
8205: IFFALSE 8242
// PlaceUnitArea ( CreateVehicle , areas [ ( i - 1 ) + Difficulty ] , false ) ;
8207: CALL_OW 45
8211: PPUSH
8212: LD_VAR 0 3
8216: PUSH
8217: LD_VAR 0 2
8221: PUSH
8222: LD_INT 1
8224: MINUS
8225: PUSH
8226: LD_OWVAR 67
8230: PLUS
8231: ARRAY
8232: PPUSH
8233: LD_INT 0
8235: PPUSH
8236: CALL_OW 49
8240: GO 8204
8242: POP
8243: POP
// PrepareApeman ( 0 ) ;
8244: LD_INT 0
8246: PPUSH
8247: CALL 50227 0 1
// for i := 1 to [ 9 , 7 , 6 , 5 ] [ Difficulty ] do
8251: LD_ADDR_VAR 0 2
8255: PUSH
8256: DOUBLE
8257: LD_INT 1
8259: DEC
8260: ST_TO_ADDR
8261: LD_INT 9
8263: PUSH
8264: LD_INT 7
8266: PUSH
8267: LD_INT 6
8269: PUSH
8270: LD_INT 5
8272: PUSH
8273: EMPTY
8274: LIST
8275: LIST
8276: LIST
8277: LIST
8278: PUSH
8279: LD_OWVAR 67
8283: ARRAY
8284: PUSH
8285: FOR_TO
8286: IFFALSE 8305
// PlaceUnitArea ( CreateHuman , apeArea , false ) ;
8288: CALL_OW 44
8292: PPUSH
8293: LD_INT 6
8295: PPUSH
8296: LD_INT 0
8298: PPUSH
8299: CALL_OW 49
8303: GO 8285
8305: POP
8306: POP
// for i := 1 to 3 do
8307: LD_ADDR_VAR 0 2
8311: PUSH
8312: DOUBLE
8313: LD_INT 1
8315: DEC
8316: ST_TO_ADDR
8317: LD_INT 3
8319: PUSH
8320: FOR_TO
8321: IFFALSE 8346
// PlaceUnitXYR ( CreateHuman , 274 , 133 , 6 , false ) ;
8323: CALL_OW 44
8327: PPUSH
8328: LD_INT 274
8330: PPUSH
8331: LD_INT 133
8333: PPUSH
8334: LD_INT 6
8336: PPUSH
8337: LD_INT 0
8339: PPUSH
8340: CALL_OW 50
8344: GO 8320
8346: POP
8347: POP
// end ;
8348: LD_VAR 0 1
8352: RET
// export function AreInArea ( units , area ) ; var i ; begin
8353: LD_INT 0
8355: PPUSH
8356: PPUSH
// result := false ;
8357: LD_ADDR_VAR 0 3
8361: PUSH
8362: LD_INT 0
8364: ST_TO_ADDR
// if not units then
8365: LD_VAR 0 1
8369: NOT
8370: IFFALSE 8374
// exit ;
8372: GO 8440
// for i in units do
8374: LD_ADDR_VAR 0 4
8378: PUSH
8379: LD_VAR 0 1
8383: PUSH
8384: FOR_IN
8385: IFFALSE 8438
// if IsInArea ( i , area ) or IsInArea ( IsInUnit ( i ) , area ) then
8387: LD_VAR 0 4
8391: PPUSH
8392: LD_VAR 0 2
8396: PPUSH
8397: CALL_OW 308
8401: PUSH
8402: LD_VAR 0 4
8406: PPUSH
8407: CALL_OW 310
8411: PPUSH
8412: LD_VAR 0 2
8416: PPUSH
8417: CALL_OW 308
8421: OR
8422: IFFALSE 8436
// begin result := true ;
8424: LD_ADDR_VAR 0 3
8428: PUSH
8429: LD_INT 1
8431: ST_TO_ADDR
// exit ;
8432: POP
8433: POP
8434: GO 8440
// end ;
8436: GO 8384
8438: POP
8439: POP
// end ; end_of_file
8440: LD_VAR 0 3
8444: RET
// export function Action ; var i , mech , veh , amTroops ; begin
8445: LD_INT 0
8447: PPUSH
8448: PPUSH
8449: PPUSH
8450: PPUSH
8451: PPUSH
// InGameOn ;
8452: CALL_OW 8
// CenterNowOnXY ( 84 , 28 ) ;
8456: LD_INT 84
8458: PPUSH
8459: LD_INT 28
8461: PPUSH
8462: CALL_OW 86
// RevealFogArea ( 2 , heikeVisibleRoadArea ) ;
8466: LD_INT 2
8468: PPUSH
8469: LD_INT 9
8471: PPUSH
8472: CALL_OW 332
// ComMoveXY ( Heike , 90 , 30 ) ;
8476: LD_EXP 20
8480: PPUSH
8481: LD_INT 90
8483: PPUSH
8484: LD_INT 30
8486: PPUSH
8487: CALL_OW 111
// uc_side := 1 ;
8491: LD_ADDR_OWVAR 20
8495: PUSH
8496: LD_INT 1
8498: ST_TO_ADDR
// uc_nation := nation_american ;
8499: LD_ADDR_OWVAR 21
8503: PUSH
8504: LD_INT 1
8506: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 66 ) ;
8507: LD_INT 3
8509: PPUSH
8510: LD_INT 1
8512: PPUSH
8513: LD_INT 1
8515: PPUSH
8516: LD_INT 9
8518: PPUSH
8519: LD_INT 66
8521: PPUSH
8522: CALL 21097 0 5
// veh := CreateVehicle ;
8526: LD_ADDR_VAR 0 4
8530: PUSH
8531: CALL_OW 45
8535: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
8536: LD_VAR 0 4
8540: PPUSH
8541: LD_INT 1
8543: PPUSH
8544: CALL_OW 233
// PlaceUnitXY ( veh , 80 , 27 , false ) ;
8548: LD_VAR 0 4
8552: PPUSH
8553: LD_INT 80
8555: PPUSH
8556: LD_INT 27
8558: PPUSH
8559: LD_INT 0
8561: PPUSH
8562: CALL_OW 48
// PrepareMechanic ( sex_male , 8 ) ;
8566: LD_INT 1
8568: PPUSH
8569: LD_INT 8
8571: PPUSH
8572: CALL_OW 383
// mech := CreateHuman ;
8576: LD_ADDR_VAR 0 3
8580: PUSH
8581: CALL_OW 44
8585: ST_TO_ADDR
// PlaceHumanInUnit ( mech , veh ) ;
8586: LD_VAR 0 3
8590: PPUSH
8591: LD_VAR 0 4
8595: PPUSH
8596: CALL_OW 52
// repeat wait ( 0 0$1 ) ;
8600: LD_INT 35
8602: PPUSH
8603: CALL_OW 67
// until HexInfo ( 90 , 30 ) ;
8607: LD_INT 90
8609: PPUSH
8610: LD_INT 30
8612: PPUSH
8613: CALL_OW 428
8617: IFFALSE 8600
// PlaceSeeing ( 80 , 27 , 2 , - 6 ) ;
8619: LD_INT 80
8621: PPUSH
8622: LD_INT 27
8624: PPUSH
8625: LD_INT 2
8627: PPUSH
8628: LD_INT 6
8630: NEG
8631: PPUSH
8632: CALL_OW 330
// CenterNowOnXY ( 80 , 27 ) ;
8636: LD_INT 80
8638: PPUSH
8639: LD_INT 27
8641: PPUSH
8642: CALL_OW 86
// DialogueOn ;
8646: CALL_OW 6
// Say ( Heike , DH-Start-1 ) ;
8650: LD_EXP 20
8654: PPUSH
8655: LD_STRING DH-Start-1
8657: PPUSH
8658: CALL_OW 88
// DialogueOff ;
8662: CALL_OW 7
// ComAttackUnit ( Heike , veh ) ;
8666: LD_EXP 20
8670: PPUSH
8671: LD_VAR 0 4
8675: PPUSH
8676: CALL_OW 115
// wait ( 0 0$1 ) ;
8680: LD_INT 35
8682: PPUSH
8683: CALL_OW 67
// SetLives ( IsInUnit ( Heike ) , 200 ) ;
8687: LD_EXP 20
8691: PPUSH
8692: CALL_OW 310
8696: PPUSH
8697: LD_INT 200
8699: PPUSH
8700: CALL_OW 234
// wait ( 0 0$0.3 ) ;
8704: LD_INT 10
8706: PPUSH
8707: CALL_OW 67
// DialogueOn ;
8711: CALL_OW 6
// Say ( Heike , DH-Start-2 ) ;
8715: LD_EXP 20
8719: PPUSH
8720: LD_STRING DH-Start-2
8722: PPUSH
8723: CALL_OW 88
// DialogueOff ;
8727: CALL_OW 7
// ComAttackUnit ( Heike , veh ) ;
8731: LD_EXP 20
8735: PPUSH
8736: LD_VAR 0 4
8740: PPUSH
8741: CALL_OW 115
// wait ( 0 0$0.2 ) ;
8745: LD_INT 7
8747: PPUSH
8748: CALL_OW 67
// ComCrawl ( Heike ) ;
8752: LD_EXP 20
8756: PPUSH
8757: CALL_OW 137
// wait ( 0 0$3 ) ;
8761: LD_INT 105
8763: PPUSH
8764: CALL_OW 67
// PlaceUnitXY ( omarVehicle , 82 , 43 , false ) ;
8768: LD_EXP 23
8772: PPUSH
8773: LD_INT 82
8775: PPUSH
8776: LD_INT 43
8778: PPUSH
8779: LD_INT 0
8781: PPUSH
8782: CALL_OW 48
// PlaceHumanInUnit ( Omar , omarVehicle ) ;
8786: LD_EXP 21
8790: PPUSH
8791: LD_EXP 23
8795: PPUSH
8796: CALL_OW 52
// ComMoveXY ( Omar , 79 , 32 ) ;
8800: LD_EXP 21
8804: PPUSH
8805: LD_INT 79
8807: PPUSH
8808: LD_INT 32
8810: PPUSH
8811: CALL_OW 111
// wait ( 0 0$1 ) ;
8815: LD_INT 35
8817: PPUSH
8818: CALL_OW 67
// ChangeSideFog ( 5 , 2 ) ;
8822: LD_INT 5
8824: PPUSH
8825: LD_INT 2
8827: PPUSH
8828: CALL_OW 343
// wait ( 0 0$3 ) ;
8832: LD_INT 105
8834: PPUSH
8835: CALL_OW 67
// SetLives ( veh , 200 ) ;
8839: LD_VAR 0 4
8843: PPUSH
8844: LD_INT 200
8846: PPUSH
8847: CALL_OW 234
// wait ( 0 0$1 ) ;
8851: LD_INT 35
8853: PPUSH
8854: CALL_OW 67
// SetLives ( mech , 10 ) ;
8858: LD_VAR 0 3
8862: PPUSH
8863: LD_INT 10
8865: PPUSH
8866: CALL_OW 234
// wait ( 0 0$2 ) ;
8870: LD_INT 70
8872: PPUSH
8873: CALL_OW 67
// ComWalk ( Heike ) ;
8877: LD_EXP 20
8881: PPUSH
8882: CALL_OW 138
// wait ( 1 ) ;
8886: LD_INT 1
8888: PPUSH
8889: CALL_OW 67
// ComMoveXY ( Heike , 81 , 25 ) ;
8893: LD_EXP 20
8897: PPUSH
8898: LD_INT 81
8900: PPUSH
8901: LD_INT 25
8903: PPUSH
8904: CALL_OW 111
// AddComMoveXY ( Heike , 72 , 25 ) ;
8908: LD_EXP 20
8912: PPUSH
8913: LD_INT 72
8915: PPUSH
8916: LD_INT 25
8918: PPUSH
8919: CALL_OW 171
// wait ( 0 0$3 ) ;
8923: LD_INT 105
8925: PPUSH
8926: CALL_OW 67
// ComExitVehicle ( Omar ) ;
8930: LD_EXP 21
8934: PPUSH
8935: CALL_OW 121
// wait ( 1 ) ;
8939: LD_INT 1
8941: PPUSH
8942: CALL_OW 67
// ComMoveXY ( Omar , 77 , 28 ) ;
8946: LD_EXP 21
8950: PPUSH
8951: LD_INT 77
8953: PPUSH
8954: LD_INT 28
8956: PPUSH
8957: CALL_OW 111
// AddComTurnUnit ( Omar , Heike ) ;
8961: LD_EXP 21
8965: PPUSH
8966: LD_EXP 20
8970: PPUSH
8971: CALL_OW 179
// Say ( Omar , DO-Start-3 ) ;
8975: LD_EXP 21
8979: PPUSH
8980: LD_STRING DO-Start-3
8982: PPUSH
8983: CALL_OW 88
// repeat wait ( 3 ) ;
8987: LD_INT 3
8989: PPUSH
8990: CALL_OW 67
// until IsAt ( Heike , 72 , 25 ) ;
8994: LD_EXP 20
8998: PPUSH
8999: LD_INT 72
9001: PPUSH
9002: LD_INT 25
9004: PPUSH
9005: CALL_OW 307
9009: IFFALSE 8987
// ComHold ( Heike ) ;
9011: LD_EXP 20
9015: PPUSH
9016: CALL_OW 140
// ComTurnUnit ( Omar , Heike ) ;
9020: LD_EXP 21
9024: PPUSH
9025: LD_EXP 20
9029: PPUSH
9030: CALL_OW 119
// ComMoveUnit ( Heike , Omar ) ;
9034: LD_EXP 20
9038: PPUSH
9039: LD_EXP 21
9043: PPUSH
9044: CALL_OW 112
// wait ( 0 0$1 ) ;
9048: LD_INT 35
9050: PPUSH
9051: CALL_OW 67
// ComTurnUnit ( Heike , Omar ) ;
9055: LD_EXP 20
9059: PPUSH
9060: LD_EXP 21
9064: PPUSH
9065: CALL_OW 119
// Say ( Heike , DH-Start-4 ) ;
9069: LD_EXP 20
9073: PPUSH
9074: LD_STRING DH-Start-4
9076: PPUSH
9077: CALL_OW 88
// Say ( Omar , DO-Start-5 ) ;
9081: LD_EXP 21
9085: PPUSH
9086: LD_STRING DO-Start-5
9088: PPUSH
9089: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
9093: LD_EXP 20
9097: PPUSH
9098: LD_STRING DH-Start-6
9100: PPUSH
9101: CALL_OW 88
// Say ( Omar , DO-Start-7 ) ;
9105: LD_EXP 21
9109: PPUSH
9110: LD_STRING DO-Start-7
9112: PPUSH
9113: CALL_OW 88
// if Query ( QOmar ) = 2 then
9117: LD_STRING QOmar
9119: PPUSH
9120: CALL_OW 97
9124: PUSH
9125: LD_INT 2
9127: EQUAL
9128: IFFALSE 9416
// begin Say ( Heike , DH-QuestionN-1 ) ;
9130: LD_EXP 20
9134: PPUSH
9135: LD_STRING DH-QuestionN-1
9137: PPUSH
9138: CALL_OW 88
// ComMoveXY ( Heike , 58 , 27 ) ;
9142: LD_EXP 20
9146: PPUSH
9147: LD_INT 58
9149: PPUSH
9150: LD_INT 27
9152: PPUSH
9153: CALL_OW 111
// wait ( 0 0$2 ) ;
9157: LD_INT 70
9159: PPUSH
9160: CALL_OW 67
// ChangeSideFog ( 5 , 5 ) ;
9164: LD_INT 5
9166: PPUSH
9167: LD_INT 5
9169: PPUSH
9170: CALL_OW 343
// RemoveSeeing ( 80 , 27 , 2 ) ;
9174: LD_INT 80
9176: PPUSH
9177: LD_INT 27
9179: PPUSH
9180: LD_INT 2
9182: PPUSH
9183: CALL_OW 331
// CenterOnXY ( 58 , 27 ) ;
9187: LD_INT 58
9189: PPUSH
9190: LD_INT 27
9192: PPUSH
9193: CALL_OW 84
// repeat wait ( 3 ) ;
9197: LD_INT 3
9199: PPUSH
9200: CALL_OW 67
// until GetDistUnitXY ( Heike , 88 , 27 ) ;
9204: LD_EXP 20
9208: PPUSH
9209: LD_INT 88
9211: PPUSH
9212: LD_INT 27
9214: PPUSH
9215: CALL_OW 297
9219: IFFALSE 9197
// uc_side := 1 ;
9221: LD_ADDR_OWVAR 20
9225: PUSH
9226: LD_INT 1
9228: ST_TO_ADDR
// uc_nation := nation_american ;
9229: LD_ADDR_OWVAR 21
9233: PUSH
9234: LD_INT 1
9236: ST_TO_ADDR
// amTroops := [ ] ;
9237: LD_ADDR_VAR 0 5
9241: PUSH
9242: EMPTY
9243: ST_TO_ADDR
// for i := 1 to 3 do
9244: LD_ADDR_VAR 0 2
9248: PUSH
9249: DOUBLE
9250: LD_INT 1
9252: DEC
9253: ST_TO_ADDR
9254: LD_INT 3
9256: PUSH
9257: FOR_TO
9258: IFFALSE 9351
// begin PrepareSoldier ( false , 10 ) ;
9260: LD_INT 0
9262: PPUSH
9263: LD_INT 10
9265: PPUSH
9266: CALL_OW 381
// amTroops := Join ( amTroops , CreateHuman ) ;
9270: LD_ADDR_VAR 0 5
9274: PUSH
9275: LD_VAR 0 5
9279: PPUSH
9280: CALL_OW 44
9284: PPUSH
9285: CALL 53946 0 2
9289: ST_TO_ADDR
// SetDir ( amTroops [ i ] , 2 ) ;
9290: LD_VAR 0 5
9294: PUSH
9295: LD_VAR 0 2
9299: ARRAY
9300: PPUSH
9301: LD_INT 2
9303: PPUSH
9304: CALL_OW 233
// PlaceUnitArea ( amTroops [ i ] , heikeTrapArea , false ) ;
9308: LD_VAR 0 5
9312: PUSH
9313: LD_VAR 0 2
9317: ARRAY
9318: PPUSH
9319: LD_INT 10
9321: PPUSH
9322: LD_INT 0
9324: PPUSH
9325: CALL_OW 49
// ComAttackUnit ( amTroops [ i ] , Heike ) ;
9329: LD_VAR 0 5
9333: PUSH
9334: LD_VAR 0 2
9338: ARRAY
9339: PPUSH
9340: LD_EXP 20
9344: PPUSH
9345: CALL_OW 115
// end ;
9349: GO 9257
9351: POP
9352: POP
// ComAttackUnit ( Heike , amTroops [ 1 ] ) ;
9353: LD_EXP 20
9357: PPUSH
9358: LD_VAR 0 5
9362: PUSH
9363: LD_INT 1
9365: ARRAY
9366: PPUSH
9367: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
9371: LD_INT 35
9373: PPUSH
9374: CALL_OW 67
// until IsDead ( Heike ) or IsDying ( Heike ) ;
9378: LD_EXP 20
9382: PPUSH
9383: CALL_OW 301
9387: PUSH
9388: LD_EXP 20
9392: PPUSH
9393: CALL_OW 303
9397: OR
9398: IFFALSE 9371
// wait ( 0 0$2 ) ;
9400: LD_INT 70
9402: PPUSH
9403: CALL_OW 67
// YouLost ( Heike ) ;
9407: LD_STRING Heike
9409: PPUSH
9410: CALL_OW 104
// exit ;
9414: GO 10290
// end ; Say ( Heike , DH-QuestionY-1 ) ;
9416: LD_EXP 20
9420: PPUSH
9421: LD_STRING DH-QuestionY-1
9423: PPUSH
9424: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9428: LD_INT 10
9430: PPUSH
9431: CALL_OW 67
// Say ( Omar , DO-Story-1 ) ;
9435: LD_EXP 21
9439: PPUSH
9440: LD_STRING DO-Story-1
9442: PPUSH
9443: CALL_OW 88
// Say ( Omar , DO-Story-2 ) ;
9447: LD_EXP 21
9451: PPUSH
9452: LD_STRING DO-Story-2
9454: PPUSH
9455: CALL_OW 88
// Say ( Omar , DO-Story-3 ) ;
9459: LD_EXP 21
9463: PPUSH
9464: LD_STRING DO-Story-3
9466: PPUSH
9467: CALL_OW 88
// Say ( Omar , DO-Story-4 ) ;
9471: LD_EXP 21
9475: PPUSH
9476: LD_STRING DO-Story-4
9478: PPUSH
9479: CALL_OW 88
// Say ( Heike , DH-Story-5 ) ;
9483: LD_EXP 20
9487: PPUSH
9488: LD_STRING DH-Story-5
9490: PPUSH
9491: CALL_OW 88
// Say ( Omar , DO-Story-6 ) ;
9495: LD_EXP 21
9499: PPUSH
9500: LD_STRING DO-Story-6
9502: PPUSH
9503: CALL_OW 88
// Say ( Omar , DO-Story-7 ) ;
9507: LD_EXP 21
9511: PPUSH
9512: LD_STRING DO-Story-7
9514: PPUSH
9515: CALL_OW 88
// ComMoveXY ( Heike , 82 , 44 ) ;
9519: LD_EXP 20
9523: PPUSH
9524: LD_INT 82
9526: PPUSH
9527: LD_INT 44
9529: PPUSH
9530: CALL_OW 111
// AddComHold ( Heike ) ;
9534: LD_EXP 20
9538: PPUSH
9539: CALL_OW 200
// wait ( 0 0$4 ) ;
9543: LD_INT 140
9545: PPUSH
9546: CALL_OW 67
// ComMoveXY ( Omar , 82 , 41 ) ;
9550: LD_EXP 21
9554: PPUSH
9555: LD_INT 82
9557: PPUSH
9558: LD_INT 41
9560: PPUSH
9561: CALL_OW 111
// AddComTurnUnit ( Omar , Heike ) ;
9565: LD_EXP 21
9569: PPUSH
9570: LD_EXP 20
9574: PPUSH
9575: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9579: LD_INT 35
9581: PPUSH
9582: CALL_OW 67
// until IsAt ( Heike , 82 , 44 ) ;
9586: LD_EXP 20
9590: PPUSH
9591: LD_INT 82
9593: PPUSH
9594: LD_INT 44
9596: PPUSH
9597: CALL_OW 307
9601: IFFALSE 9579
// ComTurnXY ( Heike , 81 , 47 ) ;
9603: LD_EXP 20
9607: PPUSH
9608: LD_INT 81
9610: PPUSH
9611: LD_INT 47
9613: PPUSH
9614: CALL_OW 118
// Say ( Heike , DH-Story-8 ) ;
9618: LD_EXP 20
9622: PPUSH
9623: LD_STRING DH-Story-8
9625: PPUSH
9626: CALL_OW 88
// Say ( Omar , DO-Story-9 ) ;
9630: LD_EXP 21
9634: PPUSH
9635: LD_STRING DO-Story-9
9637: PPUSH
9638: CALL_OW 88
// Say ( Omar , DO-Story-10 ) ;
9642: LD_EXP 21
9646: PPUSH
9647: LD_STRING DO-Story-10
9649: PPUSH
9650: CALL_OW 88
// ComTurnUnit ( Heike , Omar ) ;
9654: LD_EXP 20
9658: PPUSH
9659: LD_EXP 21
9663: PPUSH
9664: CALL_OW 119
// Say ( Heike , DH-Story-11 ) ;
9668: LD_EXP 20
9672: PPUSH
9673: LD_STRING DH-Story-11
9675: PPUSH
9676: CALL_OW 88
// ComMoveUnit ( Omar , Heike ) ;
9680: LD_EXP 21
9684: PPUSH
9685: LD_EXP 20
9689: PPUSH
9690: CALL_OW 112
// wait ( 0 0$0.3 ) ;
9694: LD_INT 10
9696: PPUSH
9697: CALL_OW 67
// ComTurnUnit ( Omar , Heike ) ;
9701: LD_EXP 21
9705: PPUSH
9706: LD_EXP 20
9710: PPUSH
9711: CALL_OW 119
// Say ( Omar , DO-Story-12 ) ;
9715: LD_EXP 21
9719: PPUSH
9720: LD_STRING DO-Story-12
9722: PPUSH
9723: CALL_OW 88
// Say ( Heike , DH-Story-13 ) ;
9727: LD_EXP 20
9731: PPUSH
9732: LD_STRING DH-Story-13
9734: PPUSH
9735: CALL_OW 88
// Say ( Omar , DO-Story-14 ) ;
9739: LD_EXP 21
9743: PPUSH
9744: LD_STRING DO-Story-14
9746: PPUSH
9747: CALL_OW 88
// Say ( Omar , DO-Story-15 ) ;
9751: LD_EXP 21
9755: PPUSH
9756: LD_STRING DO-Story-15
9758: PPUSH
9759: CALL_OW 88
// CenterOnXY ( 84 , 48 ) ;
9763: LD_INT 84
9765: PPUSH
9766: LD_INT 48
9768: PPUSH
9769: CALL_OW 84
// ComMoveXY ( Heike , 84 , 48 ) ;
9773: LD_EXP 20
9777: PPUSH
9778: LD_INT 84
9780: PPUSH
9781: LD_INT 48
9783: PPUSH
9784: CALL_OW 111
// AddComTurnXY ( Heike , 84 , 49 ) ;
9788: LD_EXP 20
9792: PPUSH
9793: LD_INT 84
9795: PPUSH
9796: LD_INT 49
9798: PPUSH
9799: CALL_OW 178
// wait ( 0 0$1 ) ;
9803: LD_INT 35
9805: PPUSH
9806: CALL_OW 67
// ComMoveUnit ( Omar , Heike ) ;
9810: LD_EXP 21
9814: PPUSH
9815: LD_EXP 20
9819: PPUSH
9820: CALL_OW 112
// wait ( 0 0$1 ) ;
9824: LD_INT 35
9826: PPUSH
9827: CALL_OW 67
// ComTurnUnit ( Omar , Heike ) ;
9831: LD_EXP 21
9835: PPUSH
9836: LD_EXP 20
9840: PPUSH
9841: CALL_OW 119
// wait ( 0 0$0.3 ) ;
9845: LD_INT 10
9847: PPUSH
9848: CALL_OW 67
// Say ( Omar , DO-Story-16 ) ;
9852: LD_EXP 21
9856: PPUSH
9857: LD_STRING DO-Story-16
9859: PPUSH
9860: CALL_OW 88
// if Query ( QOmar2 ) = 2 then
9864: LD_STRING QOmar2
9866: PPUSH
9867: CALL_OW 97
9871: PUSH
9872: LD_INT 2
9874: EQUAL
9875: IFFALSE 10170
// begin ComMoveXY ( Heike , 79 , 57 ) ;
9877: LD_EXP 20
9881: PPUSH
9882: LD_INT 79
9884: PPUSH
9885: LD_INT 57
9887: PPUSH
9888: CALL_OW 111
// AddComMoveXY ( Heike , 68 , 53 ) ;
9892: LD_EXP 20
9896: PPUSH
9897: LD_INT 68
9899: PPUSH
9900: LD_INT 53
9902: PPUSH
9903: CALL_OW 171
// wait ( 0 0$2 ) ;
9907: LD_INT 70
9909: PPUSH
9910: CALL_OW 67
// ChangeSideFog ( 5 , 5 ) ;
9914: LD_INT 5
9916: PPUSH
9917: LD_INT 5
9919: PPUSH
9920: CALL_OW 343
// RemoveSeeing ( 80 , 27 , 2 ) ;
9924: LD_INT 80
9926: PPUSH
9927: LD_INT 27
9929: PPUSH
9930: LD_INT 2
9932: PPUSH
9933: CALL_OW 331
// CenterOnXY ( 68 , 53 ) ;
9937: LD_INT 68
9939: PPUSH
9940: LD_INT 53
9942: PPUSH
9943: CALL_OW 84
// repeat wait ( 3 ) ;
9947: LD_INT 3
9949: PPUSH
9950: CALL_OW 67
// until GetDistUnitXY ( Heike , 68 , 53 ) < 6 ;
9954: LD_EXP 20
9958: PPUSH
9959: LD_INT 68
9961: PPUSH
9962: LD_INT 53
9964: PPUSH
9965: CALL_OW 297
9969: PUSH
9970: LD_INT 6
9972: LESS
9973: IFFALSE 9947
// uc_side := 1 ;
9975: LD_ADDR_OWVAR 20
9979: PUSH
9980: LD_INT 1
9982: ST_TO_ADDR
// uc_nation := nation_american ;
9983: LD_ADDR_OWVAR 21
9987: PUSH
9988: LD_INT 1
9990: ST_TO_ADDR
// amTroops := [ ] ;
9991: LD_ADDR_VAR 0 5
9995: PUSH
9996: EMPTY
9997: ST_TO_ADDR
// for i := 1 to 3 do
9998: LD_ADDR_VAR 0 2
10002: PUSH
10003: DOUBLE
10004: LD_INT 1
10006: DEC
10007: ST_TO_ADDR
10008: LD_INT 3
10010: PUSH
10011: FOR_TO
10012: IFFALSE 10105
// begin PrepareSoldier ( false , 10 ) ;
10014: LD_INT 0
10016: PPUSH
10017: LD_INT 10
10019: PPUSH
10020: CALL_OW 381
// amTroops := Join ( amTroops , CreateHuman ) ;
10024: LD_ADDR_VAR 0 5
10028: PUSH
10029: LD_VAR 0 5
10033: PPUSH
10034: CALL_OW 44
10038: PPUSH
10039: CALL 53946 0 2
10043: ST_TO_ADDR
// SetDir ( amTroops [ i ] , 2 ) ;
10044: LD_VAR 0 5
10048: PUSH
10049: LD_VAR 0 2
10053: ARRAY
10054: PPUSH
10055: LD_INT 2
10057: PPUSH
10058: CALL_OW 233
// PlaceUnitArea ( amTroops [ i ] , heikeTrap2Area , false ) ;
10062: LD_VAR 0 5
10066: PUSH
10067: LD_VAR 0 2
10071: ARRAY
10072: PPUSH
10073: LD_INT 11
10075: PPUSH
10076: LD_INT 0
10078: PPUSH
10079: CALL_OW 49
// ComAttackUnit ( amTroops [ i ] , Heike ) ;
10083: LD_VAR 0 5
10087: PUSH
10088: LD_VAR 0 2
10092: ARRAY
10093: PPUSH
10094: LD_EXP 20
10098: PPUSH
10099: CALL_OW 115
// end ;
10103: GO 10011
10105: POP
10106: POP
// ComAttackUnit ( Heike , amTroops [ 1 ] ) ;
10107: LD_EXP 20
10111: PPUSH
10112: LD_VAR 0 5
10116: PUSH
10117: LD_INT 1
10119: ARRAY
10120: PPUSH
10121: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
10125: LD_INT 35
10127: PPUSH
10128: CALL_OW 67
// until IsDead ( Heike ) or IsDying ( Heike ) ;
10132: LD_EXP 20
10136: PPUSH
10137: CALL_OW 301
10141: PUSH
10142: LD_EXP 20
10146: PPUSH
10147: CALL_OW 303
10151: OR
10152: IFFALSE 10125
// wait ( 0 0$2 ) ;
10154: LD_INT 70
10156: PPUSH
10157: CALL_OW 67
// YouLost ( Heike ) ;
10161: LD_STRING Heike
10163: PPUSH
10164: CALL_OW 104
// exit ;
10168: GO 10290
// end ; Say ( Omar , DO-Objective-1 ) ;
10170: LD_EXP 21
10174: PPUSH
10175: LD_STRING DO-Objective-1
10177: PPUSH
10178: CALL_OW 88
// ComTurnUnit ( Heike , Omar ) ;
10182: LD_EXP 20
10186: PPUSH
10187: LD_EXP 21
10191: PPUSH
10192: CALL_OW 119
// Say ( Heike , DH-Objective-2 ) ;
10196: LD_EXP 20
10200: PPUSH
10201: LD_STRING DH-Objective-2
10203: PPUSH
10204: CALL_OW 88
// Say ( Omar , DO-Objective-3 ) ;
10208: LD_EXP 21
10212: PPUSH
10213: LD_STRING DO-Objective-3
10215: PPUSH
10216: CALL_OW 88
// ChangeSideFog ( 5 , 5 ) ;
10220: LD_INT 5
10222: PPUSH
10223: LD_INT 5
10225: PPUSH
10226: CALL_OW 343
// RemoveSeeing ( 80 , 27 , 2 ) ;
10230: LD_INT 80
10232: PPUSH
10233: LD_INT 27
10235: PPUSH
10236: LD_INT 2
10238: PPUSH
10239: CALL_OW 331
// SetSide ( Omar , 2 ) ;
10243: LD_EXP 21
10247: PPUSH
10248: LD_INT 2
10250: PPUSH
10251: CALL_OW 235
// SetSide ( omarVehicle , 2 ) ;
10255: LD_EXP 23
10259: PPUSH
10260: LD_INT 2
10262: PPUSH
10263: CALL_OW 235
// ChangeMissionObjectives ( O1 ) ;
10267: LD_STRING O1
10269: PPUSH
10270: CALL_OW 337
// InGameOff ;
10274: CALL_OW 9
// gameActive := true ;
10278: LD_ADDR_EXP 19
10282: PUSH
10283: LD_INT 1
10285: ST_TO_ADDR
// SaveForQuickRestart ;
10286: CALL_OW 22
// end ;
10290: LD_VAR 0 1
10294: RET
// every 0 0$2 trigger gameActive and not spotArabianBase and FilterUnitsInArea ( arBaseArea , [ f_side , 2 ] ) do var i ;
10295: LD_EXP 19
10299: PUSH
10300: LD_EXP 7
10304: NOT
10305: AND
10306: PUSH
10307: LD_INT 4
10309: PPUSH
10310: LD_INT 22
10312: PUSH
10313: LD_INT 2
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: PPUSH
10320: CALL_OW 70
10324: AND
10325: IFFALSE 10476
10327: GO 10329
10329: DISABLE
10330: LD_INT 0
10332: PPUSH
// begin spotArabianBase := true ;
10333: LD_ADDR_EXP 7
10337: PUSH
10338: LD_INT 1
10340: ST_TO_ADDR
// DialogueOn ;
10341: CALL_OW 6
// PlaceSeeing ( 232 , 101 , 2 , - 22 ) ;
10345: LD_INT 232
10347: PPUSH
10348: LD_INT 101
10350: PPUSH
10351: LD_INT 2
10353: PPUSH
10354: LD_INT 22
10356: NEG
10357: PPUSH
10358: CALL_OW 330
// RemoveSeeing ( 232 , 101 , 2 ) ;
10362: LD_INT 232
10364: PPUSH
10365: LD_INT 101
10367: PPUSH
10368: LD_INT 2
10370: PPUSH
10371: CALL_OW 331
// CenterNowOnXY ( 232 , 101 ) ;
10375: LD_INT 232
10377: PPUSH
10378: LD_INT 101
10380: PPUSH
10381: CALL_OW 86
// for i in FilterUnitsInArea ( arBaseArea , [ f_side , 5 ] ) do
10385: LD_ADDR_VAR 0 1
10389: PUSH
10390: LD_INT 4
10392: PPUSH
10393: LD_INT 22
10395: PUSH
10396: LD_INT 5
10398: PUSH
10399: EMPTY
10400: LIST
10401: LIST
10402: PPUSH
10403: CALL_OW 70
10407: PUSH
10408: FOR_IN
10409: IFFALSE 10425
// SetSide ( i , 2 ) ;
10411: LD_VAR 0 1
10415: PPUSH
10416: LD_INT 2
10418: PPUSH
10419: CALL_OW 235
10423: GO 10408
10425: POP
10426: POP
// if not spotAmericanBase then
10427: LD_EXP 6
10431: NOT
10432: IFFALSE 10448
// Say ( Omar , DO-ArBase-1a ) else
10434: LD_EXP 21
10438: PPUSH
10439: LD_STRING DO-ArBase-1a
10441: PPUSH
10442: CALL_OW 88
10446: GO 10460
// Say ( Omar , DO-ArBase-1b ) ;
10448: LD_EXP 21
10452: PPUSH
10453: LD_STRING DO-ArBase-1b
10455: PPUSH
10456: CALL_OW 88
// Say ( Heike , DH-ArBase-2 ) ;
10460: LD_EXP 20
10464: PPUSH
10465: LD_STRING DH-ArBase-2
10467: PPUSH
10468: CALL_OW 88
// DialogueOff ;
10472: CALL_OW 7
// end ;
10476: PPOPN 1
10478: END
// every 0 0$1 trigger gameActive and ( IsSelected ( arFac ) or UnitsInside ( arFac ) ) and IsOk ( Heike ) and IsOk ( Omar ) do
10479: LD_EXP 19
10483: PUSH
10484: LD_INT 87
10486: PPUSH
10487: CALL_OW 306
10491: PUSH
10492: LD_INT 87
10494: PPUSH
10495: CALL_OW 313
10499: OR
10500: AND
10501: PUSH
10502: LD_EXP 20
10506: PPUSH
10507: CALL_OW 302
10511: AND
10512: PUSH
10513: LD_EXP 21
10517: PPUSH
10518: CALL_OW 302
10522: AND
10523: IFFALSE 10657
10525: GO 10527
10527: DISABLE
// begin DialogueOn ;
10528: CALL_OW 6
// Say ( Heike , DH-Fac-1 ) ;
10532: LD_EXP 20
10536: PPUSH
10537: LD_STRING DH-Fac-1
10539: PPUSH
10540: CALL_OW 88
// Say ( Omar , DOm-Fac-2 ) ;
10544: LD_EXP 21
10548: PPUSH
10549: LD_STRING DOm-Fac-2
10551: PPUSH
10552: CALL_OW 88
// if TestCharacters ( 09_Markov ) then
10556: LD_STRING 09_Markov
10558: PPUSH
10559: CALL_OW 28
10563: IFFALSE 10579
// Say ( Heike , DH-Fac-3a ) else
10565: LD_EXP 20
10569: PPUSH
10570: LD_STRING DH-Fac-3a
10572: PPUSH
10573: CALL_OW 88
10577: GO 10646
// if TestCharacters ( 09_Olaf ) then
10579: LD_STRING 09_Olaf
10581: PPUSH
10582: CALL_OW 28
10586: IFFALSE 10602
// Say ( Heike , DH-Fac-3b ) else
10588: LD_EXP 20
10592: PPUSH
10593: LD_STRING DH-Fac-3b
10595: PPUSH
10596: CALL_OW 88
10600: GO 10646
// if GetSkill ( Heike , skill_mechanical ) > 5 then
10602: LD_EXP 20
10606: PPUSH
10607: LD_INT 3
10609: PPUSH
10610: CALL_OW 259
10614: PUSH
10615: LD_INT 5
10617: GREATER
10618: IFFALSE 10634
// Say ( Heike , DH-Fac-3c ) else
10620: LD_EXP 20
10624: PPUSH
10625: LD_STRING DH-Fac-3c
10627: PPUSH
10628: CALL_OW 88
10632: GO 10646
// Say ( Heike , DH-Fac-3d ) ;
10634: LD_EXP 20
10638: PPUSH
10639: LD_STRING DH-Fac-3d
10641: PPUSH
10642: CALL_OW 88
// ChangeMissionObjectives ( ARemote ) ;
10646: LD_STRING ARemote
10648: PPUSH
10649: CALL_OW 337
// DialogueOff ;
10653: CALL_OW 7
// end ;
10657: END
// every 0 0$1 trigger gameActive and ( IsSelected ( arLab ) or UnitsInside ( arLab ) ) and IsOk ( Heike ) and IsOk ( Omar ) do
10658: LD_EXP 19
10662: PUSH
10663: LD_INT 89
10665: PPUSH
10666: CALL_OW 306
10670: PUSH
10671: LD_INT 89
10673: PPUSH
10674: CALL_OW 313
10678: OR
10679: AND
10680: PUSH
10681: LD_EXP 20
10685: PPUSH
10686: CALL_OW 302
10690: AND
10691: PUSH
10692: LD_EXP 21
10696: PPUSH
10697: CALL_OW 302
10701: AND
10702: IFFALSE 10930
10704: GO 10706
10706: DISABLE
// begin DialogueOn ;
10707: CALL_OW 6
// Say ( Heike , DH-Lab-1 ) ;
10711: LD_EXP 20
10715: PPUSH
10716: LD_STRING DH-Lab-1
10718: PPUSH
10719: CALL_OW 88
// Say ( Omar , DOm-Lab-2 ) ;
10723: LD_EXP 21
10727: PPUSH
10728: LD_STRING DOm-Lab-2
10730: PPUSH
10731: CALL_OW 88
// if TestCharacters ( 09_Aviradze ) then
10735: LD_STRING 09_Aviradze
10737: PPUSH
10738: CALL_OW 28
10742: IFFALSE 10797
// begin SetTech ( tech_apelang , 2 , state_researched ) ;
10744: LD_INT 1
10746: PPUSH
10747: LD_INT 2
10749: PPUSH
10750: LD_INT 2
10752: PPUSH
10753: CALL_OW 322
// SetTech ( tech_apepsych , 2 , state_researched ) ;
10757: LD_INT 2
10759: PPUSH
10760: LD_INT 2
10762: PPUSH
10763: LD_INT 2
10765: PPUSH
10766: CALL_OW 322
// SetTech ( tech_apeagres , 2 , state_researched ) ;
10770: LD_INT 11
10772: PPUSH
10773: LD_INT 2
10775: PPUSH
10776: LD_INT 2
10778: PPUSH
10779: CALL_OW 322
// Say ( Heike , DH-Lab-4a ) ;
10783: LD_EXP 20
10787: PPUSH
10788: LD_STRING DH-Lab-4a
10790: PPUSH
10791: CALL_OW 88
// end else
10795: GO 10809
// Say ( Heike , DH-Lab-4b ) ;
10797: LD_EXP 20
10801: PPUSH
10802: LD_STRING DH-Lab-4b
10804: PPUSH
10805: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
10809: LD_STRING 05_DrugsTested
10811: PPUSH
10812: LD_EXP 1
10816: PPUSH
10817: CALL_OW 30
10821: IFFALSE 10848
// begin Say ( Heike , DH-Lab-5a ) ;
10823: LD_EXP 20
10827: PPUSH
10828: LD_STRING DH-Lab-5a
10830: PPUSH
10831: CALL_OW 88
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
10835: LD_INT 5
10837: PPUSH
10838: LD_INT 2
10840: PPUSH
10841: LD_INT 2
10843: PPUSH
10844: CALL_OW 322
// end ; if LoadVariable ( 09_ApeBrain , debug ) then
10848: LD_STRING 09_ApeBrain
10850: PPUSH
10851: LD_EXP 1
10855: PPUSH
10856: CALL_OW 30
10860: IFFALSE 10899
// begin Say ( Heike , DH-Lab-6a ) ;
10862: LD_EXP 20
10866: PPUSH
10867: LD_STRING DH-Lab-6a
10869: PPUSH
10870: CALL_OW 88
// Say ( Omar , DOm-Lab-7a ) ;
10874: LD_EXP 21
10878: PPUSH
10879: LD_STRING DOm-Lab-7a
10881: PPUSH
10882: CALL_OW 88
// SetTech ( tech_apeBrain , 2 , state_researched ) ;
10886: LD_INT 4
10888: PPUSH
10889: LD_INT 2
10891: PPUSH
10892: LD_INT 2
10894: PPUSH
10895: CALL_OW 322
// end ; if LoadVariable ( 09_ApeNeural , debug ) then
10899: LD_STRING 09_ApeNeural
10901: PPUSH
10902: LD_EXP 1
10906: PPUSH
10907: CALL_OW 30
10911: IFFALSE 10926
// begin SetTech ( tech_apeNeural , 2 , state_researched ) ;
10913: LD_INT 3
10915: PPUSH
10916: LD_INT 2
10918: PPUSH
10919: LD_INT 2
10921: PPUSH
10922: CALL_OW 322
// end ; DialogueOff ;
10926: CALL_OW 7
// end ;
10930: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) do
10931: LD_EXP 19
10935: PUSH
10936: LD_INT 22
10938: PUSH
10939: LD_INT 2
10941: PUSH
10942: EMPTY
10943: LIST
10944: LIST
10945: PUSH
10946: LD_INT 25
10948: PUSH
10949: LD_INT 12
10951: PUSH
10952: EMPTY
10953: LIST
10954: LIST
10955: PUSH
10956: EMPTY
10957: LIST
10958: LIST
10959: PPUSH
10960: CALL_OW 69
10964: AND
10965: IFFALSE 11000
10967: GO 10969
10969: DISABLE
// begin if IsOk ( Heike ) then
10970: LD_EXP 20
10974: PPUSH
10975: CALL_OW 302
10979: IFFALSE 10993
// Say ( Heike , DH-Ape-1 ) ;
10981: LD_EXP 20
10985: PPUSH
10986: LD_STRING DH-Ape-1
10988: PPUSH
10989: CALL_OW 88
// ChangeMissionObjectives ( AApes ) ;
10993: LD_STRING AApes
10995: PPUSH
10996: CALL_OW 337
// end ;
11000: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 5 do
11001: LD_EXP 19
11005: PUSH
11006: LD_INT 22
11008: PUSH
11009: LD_INT 2
11011: PUSH
11012: EMPTY
11013: LIST
11014: LIST
11015: PUSH
11016: LD_INT 25
11018: PUSH
11019: LD_INT 15
11021: PUSH
11022: EMPTY
11023: LIST
11024: LIST
11025: PUSH
11026: EMPTY
11027: LIST
11028: LIST
11029: PPUSH
11030: CALL_OW 69
11034: PUSH
11035: LD_INT 5
11037: GREATEREQUAL
11038: AND
11039: IFFALSE 11141
11041: GO 11043
11043: DISABLE
// begin hasApes := true ;
11044: LD_ADDR_EXP 16
11048: PUSH
11049: LD_INT 1
11051: ST_TO_ADDR
// ChangeMissionObjectives ( AApesOut ) ;
11052: LD_STRING AApesOut
11054: PPUSH
11055: CALL_OW 337
// if not IsOk ( Heike ) or not IsOk ( Omar ) then
11059: LD_EXP 20
11063: PPUSH
11064: CALL_OW 302
11068: NOT
11069: PUSH
11070: LD_EXP 21
11074: PPUSH
11075: CALL_OW 302
11079: NOT
11080: OR
11081: IFFALSE 11085
// exit ;
11083: GO 11141
// DialogueOn ;
11085: CALL_OW 6
// Say ( Heike , DH-ApeArmy-1 ) ;
11089: LD_EXP 20
11093: PPUSH
11094: LD_STRING DH-ApeArmy-1
11096: PPUSH
11097: CALL_OW 88
// Say ( Omar , DOm-ApeArmy-2 ) ;
11101: LD_EXP 21
11105: PPUSH
11106: LD_STRING DOm-ApeArmy-2
11108: PPUSH
11109: CALL_OW 88
// Say ( Heike , DH-ApeArmy-3 ) ;
11113: LD_EXP 20
11117: PPUSH
11118: LD_STRING DH-ApeArmy-3
11120: PPUSH
11121: CALL_OW 88
// Say ( Omar , DOm-ApeArmy-4 ) ;
11125: LD_EXP 21
11129: PPUSH
11130: LD_STRING DOm-ApeArmy-4
11132: PPUSH
11133: CALL_OW 88
// DialogueOff ;
11137: CALL_OW 7
// end ;
11141: END
// every 0 0$1 trigger gameActive and GetTech ( tech_stimdrugs , 2 ) = state_researched do
11142: LD_EXP 19
11146: PUSH
11147: LD_INT 5
11149: PPUSH
11150: LD_INT 2
11152: PPUSH
11153: CALL_OW 321
11157: PUSH
11158: LD_INT 2
11160: EQUAL
11161: AND
11162: IFFALSE 11198
11164: GO 11166
11166: DISABLE
// begin hasDrugs := true ;
11167: LD_ADDR_EXP 17
11171: PUSH
11172: LD_INT 1
11174: ST_TO_ADDR
// if IsOk ( Heike ) then
11175: LD_EXP 20
11179: PPUSH
11180: CALL_OW 302
11184: IFFALSE 11198
// Say ( Heike , DH-Stim-1 ) ;
11186: LD_EXP 20
11190: PPUSH
11191: LD_STRING DH-Stim-1
11193: PPUSH
11194: CALL_OW 88
// end ;
11198: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_kamikaze ] ] ) do
11199: LD_EXP 19
11203: PUSH
11204: LD_INT 22
11206: PUSH
11207: LD_INT 2
11209: PUSH
11210: EMPTY
11211: LIST
11212: LIST
11213: PUSH
11214: LD_INT 25
11216: PUSH
11217: LD_INT 17
11219: PUSH
11220: EMPTY
11221: LIST
11222: LIST
11223: PUSH
11224: EMPTY
11225: LIST
11226: LIST
11227: PPUSH
11228: CALL_OW 69
11232: AND
11233: IFFALSE 11250
11235: GO 11237
11237: DISABLE
// Say ( Heike , DH-Kamikadze-1 ) ;
11238: LD_EXP 20
11242: PPUSH
11243: LD_STRING DH-Kamikadze-1
11245: PPUSH
11246: CALL_OW 88
11250: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_chassis , class_mastodont ] ] ) and IsOk ( Omar ) and IsOk ( Heike ) do
11251: LD_EXP 19
11255: PUSH
11256: LD_INT 22
11258: PUSH
11259: LD_INT 2
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: PUSH
11266: LD_INT 31
11268: PUSH
11269: LD_INT 31
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PUSH
11276: EMPTY
11277: LIST
11278: LIST
11279: PPUSH
11280: CALL_OW 69
11284: AND
11285: PUSH
11286: LD_EXP 21
11290: PPUSH
11291: CALL_OW 302
11295: AND
11296: PUSH
11297: LD_EXP 20
11301: PPUSH
11302: CALL_OW 302
11306: AND
11307: IFFALSE 11385
11309: GO 11311
11311: DISABLE
// begin InGameOn ;
11312: CALL_OW 8
// CenterNowOnUnits ( Omar ) ;
11316: LD_EXP 21
11320: PPUSH
11321: CALL_OW 87
// Say ( Heike , DH-Mastodont-1 ) ;
11325: LD_EXP 20
11329: PPUSH
11330: LD_STRING DH-Mastodont-1
11332: PPUSH
11333: CALL_OW 88
// Say ( Omar , DOm-Mastodont-2 ) ;
11337: LD_EXP 21
11341: PPUSH
11342: LD_STRING DOm-Mastodont-2
11344: PPUSH
11345: CALL_OW 88
// Say ( Heike , DH-Mastodont-3 ) ;
11349: LD_EXP 20
11353: PPUSH
11354: LD_STRING DH-Mastodont-3
11356: PPUSH
11357: CALL_OW 88
// Say ( Omar , DOm-Mastodont-4 ) ;
11361: LD_EXP 21
11365: PPUSH
11366: LD_STRING DOm-Mastodont-4
11368: PPUSH
11369: CALL_OW 88
// hasMastodont := true ;
11373: LD_ADDR_EXP 13
11377: PUSH
11378: LD_INT 1
11380: ST_TO_ADDR
// InGameOff ;
11381: CALL_OW 9
// end ;
11385: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_tiger ] ] ) > 1 do
11386: LD_EXP 19
11390: PUSH
11391: LD_INT 22
11393: PUSH
11394: LD_INT 2
11396: PUSH
11397: EMPTY
11398: LIST
11399: LIST
11400: PUSH
11401: LD_INT 25
11403: PUSH
11404: LD_INT 14
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: PPUSH
11415: CALL_OW 69
11419: PUSH
11420: LD_INT 1
11422: GREATER
11423: AND
11424: IFFALSE 11528
11426: GO 11428
11428: DISABLE
// begin hasTigers := true ;
11429: LD_ADDR_EXP 15
11433: PUSH
11434: LD_INT 1
11436: ST_TO_ADDR
// if not IsOk ( Omar ) or not IsOk ( Heike ) then
11437: LD_EXP 21
11441: PPUSH
11442: CALL_OW 302
11446: NOT
11447: PUSH
11448: LD_EXP 20
11452: PPUSH
11453: CALL_OW 302
11457: NOT
11458: OR
11459: IFFALSE 11463
// exit ;
11461: GO 11528
// CenterNowOnUnits ( Omar ) ;
11463: LD_EXP 21
11467: PPUSH
11468: CALL_OW 87
// DialogueOn ;
11472: CALL_OW 6
// Say ( Omar , DOm-Tiger-1 ) ;
11476: LD_EXP 21
11480: PPUSH
11481: LD_STRING DOm-Tiger-1
11483: PPUSH
11484: CALL_OW 88
// Say ( Heike , DH-Tiger-2 ) ;
11488: LD_EXP 20
11492: PPUSH
11493: LD_STRING DH-Tiger-2
11495: PPUSH
11496: CALL_OW 88
// Say ( Omar , DOm-Tiger-3 ) ;
11500: LD_EXP 21
11504: PPUSH
11505: LD_STRING DOm-Tiger-3
11507: PPUSH
11508: CALL_OW 88
// Say ( Heike , DH-Tiger-4 ) ;
11512: LD_EXP 20
11516: PPUSH
11517: LD_STRING DH-Tiger-4
11519: PPUSH
11520: CALL_OW 88
// DialogueOff ;
11524: CALL_OW 7
// end ;
11528: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_control , control_remote ] ] ) >= 3 do
11529: LD_EXP 19
11533: PUSH
11534: LD_INT 22
11536: PUSH
11537: LD_INT 2
11539: PUSH
11540: EMPTY
11541: LIST
11542: LIST
11543: PUSH
11544: LD_INT 50
11546: PUSH
11547: EMPTY
11548: LIST
11549: PUSH
11550: LD_INT 33
11552: PUSH
11553: LD_INT 2
11555: PUSH
11556: EMPTY
11557: LIST
11558: LIST
11559: PUSH
11560: EMPTY
11561: LIST
11562: LIST
11563: LIST
11564: PPUSH
11565: CALL_OW 69
11569: PUSH
11570: LD_INT 3
11572: GREATEREQUAL
11573: AND
11574: IFFALSE 11617
11576: GO 11578
11578: DISABLE
// begin ChangeMissionObjectives ( ARemoteOut ) ;
11579: LD_STRING ARemoteOut
11581: PPUSH
11582: CALL_OW 337
// hasVehicles := true ;
11586: LD_ADDR_EXP 14
11590: PUSH
11591: LD_INT 1
11593: ST_TO_ADDR
// if IsOk ( Heike ) then
11594: LD_EXP 20
11598: PPUSH
11599: CALL_OW 302
11603: IFFALSE 11617
// Say ( Heike , DH-Mechanic-1 ) ;
11605: LD_EXP 20
11609: PPUSH
11610: LD_STRING DH-Mechanic-1
11612: PPUSH
11613: CALL_OW 88
// end ;
11617: END
// every 0 0$1 trigger gameActive and FilterUnitsInArea ( amBaseOuterArea , [ f_side , 2 ] ) do
11618: LD_EXP 19
11622: PUSH
11623: LD_INT 29
11625: PPUSH
11626: LD_INT 22
11628: PUSH
11629: LD_INT 2
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: PPUSH
11636: CALL_OW 70
11640: AND
11641: IFFALSE 11654
11643: GO 11645
11645: DISABLE
// spotAmericanBase := true ;
11646: LD_ADDR_EXP 6
11650: PUSH
11651: LD_INT 1
11653: ST_TO_ADDR
11654: END
// every 0 0$2 trigger gameActive and spotAmericanBase and IsOk ( Omar ) and IsOk ( Heike ) do
11655: LD_EXP 19
11659: PUSH
11660: LD_EXP 6
11664: AND
11665: PUSH
11666: LD_EXP 21
11670: PPUSH
11671: CALL_OW 302
11675: AND
11676: PUSH
11677: LD_EXP 20
11681: PPUSH
11682: CALL_OW 302
11686: AND
11687: IFFALSE 11927
11689: GO 11691
11691: DISABLE
// begin DialogueOn ;
11692: CALL_OW 6
// PlaceSeeing ( 92 , 129 , 2 , - 22 ) ;
11696: LD_INT 92
11698: PPUSH
11699: LD_INT 129
11701: PPUSH
11702: LD_INT 2
11704: PPUSH
11705: LD_INT 22
11707: NEG
11708: PPUSH
11709: CALL_OW 330
// RemoveSeeing ( 92 , 129 , 2 ) ;
11713: LD_INT 92
11715: PPUSH
11716: LD_INT 129
11718: PPUSH
11719: LD_INT 2
11721: PPUSH
11722: CALL_OW 331
// CenterNowOnXY ( 92 , 129 ) ;
11726: LD_INT 92
11728: PPUSH
11729: LD_INT 129
11731: PPUSH
11732: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
11736: LD_INT 10
11738: PPUSH
11739: CALL_OW 68
// Say ( Omar , DO-AmBase-1 ) ;
11743: LD_EXP 21
11747: PPUSH
11748: LD_STRING DO-AmBase-1
11750: PPUSH
11751: CALL_OW 88
// Say ( Heike , DH-AmBase-2 ) ;
11755: LD_EXP 20
11759: PPUSH
11760: LD_STRING DH-AmBase-2
11762: PPUSH
11763: CALL_OW 88
// Say ( Omar , DO-AmBase-3 ) ;
11767: LD_EXP 21
11771: PPUSH
11772: LD_STRING DO-AmBase-3
11774: PPUSH
11775: CALL_OW 88
// Say ( Heike , DH-AmBase-4 ) ;
11779: LD_EXP 20
11783: PPUSH
11784: LD_STRING DH-AmBase-4
11786: PPUSH
11787: CALL_OW 88
// Say ( Omar , DO-AmBase-5 ) ;
11791: LD_EXP 21
11795: PPUSH
11796: LD_STRING DO-AmBase-5
11798: PPUSH
11799: CALL_OW 88
// Say ( Heike , DH-AmBase-6 ) ;
11803: LD_EXP 20
11807: PPUSH
11808: LD_STRING DH-AmBase-6
11810: PPUSH
11811: CALL_OW 88
// Say ( Omar , DO-AmBase-7 ) ;
11815: LD_EXP 21
11819: PPUSH
11820: LD_STRING DO-AmBase-7
11822: PPUSH
11823: CALL_OW 88
// if not spotArabianBase then
11827: LD_EXP 7
11831: NOT
11832: IFFALSE 11848
// begin Say ( Omar , DO-AmBase-8a ) ;
11834: LD_EXP 21
11838: PPUSH
11839: LD_STRING DO-AmBase-8a
11841: PPUSH
11842: CALL_OW 88
// end else
11846: GO 11860
// begin Say ( Omar , DO-AmBase-8b ) ;
11848: LD_EXP 21
11852: PPUSH
11853: LD_STRING DO-AmBase-8b
11855: PPUSH
11856: CALL_OW 88
// end ; if IsInUnit ( Heike ) then
11860: LD_EXP 20
11864: PPUSH
11865: CALL_OW 310
11869: IFFALSE 11887
// CenterNowOnUnits ( IsInUnit ( Heike ) ) else
11871: LD_EXP 20
11875: PPUSH
11876: CALL_OW 310
11880: PPUSH
11881: CALL_OW 87
11885: GO 11896
// CenterNowOnUnits ( Heike ) ;
11887: LD_EXP 20
11891: PPUSH
11892: CALL_OW 87
// Say ( Heike , DH-AmBase-9 ) ;
11896: LD_EXP 20
11900: PPUSH
11901: LD_STRING DH-AmBase-9
11903: PPUSH
11904: CALL_OW 88
// DialogueOff ;
11908: CALL_OW 7
// spotByAmerican := true ;
11912: LD_ADDR_EXP 8
11916: PUSH
11917: LD_INT 1
11919: ST_TO_ADDR
// ChangeMissionObjectives ( O2 ) ;
11920: LD_STRING O2
11922: PPUSH
11923: CALL_OW 337
// end ;
11927: END
// function TalkAboutLegion ; begin
11928: LD_INT 0
11930: PPUSH
// Say ( Heike , DH-Legion-1 ) ;
11931: LD_EXP 20
11935: PPUSH
11936: LD_STRING DH-Legion-1
11938: PPUSH
11939: CALL_OW 88
// Say ( Omar , DOm-Legion-2 ) ;
11943: LD_EXP 21
11947: PPUSH
11948: LD_STRING DOm-Legion-2
11950: PPUSH
11951: CALL_OW 88
// Say ( Heike , DH-Legion-3 ) ;
11955: LD_EXP 20
11959: PPUSH
11960: LD_STRING DH-Legion-3
11962: PPUSH
11963: CALL_OW 88
// Say ( Omar , DOm-Legion-4 ) ;
11967: LD_EXP 21
11971: PPUSH
11972: LD_STRING DOm-Legion-4
11974: PPUSH
11975: CALL_OW 88
// Say ( Heike , DH-Legion-5 ) ;
11979: LD_EXP 20
11983: PPUSH
11984: LD_STRING DH-Legion-5
11986: PPUSH
11987: CALL_OW 88
// Say ( Omar , DOm-Legion-6 ) ;
11991: LD_EXP 21
11995: PPUSH
11996: LD_STRING DOm-Legion-6
11998: PPUSH
11999: CALL_OW 88
// Say ( Heike , DH-Legion-7 ) ;
12003: LD_EXP 20
12007: PPUSH
12008: LD_STRING DH-Legion-7
12010: PPUSH
12011: CALL_OW 88
// end ;
12015: LD_VAR 0 1
12019: RET
// every 0 0$2 trigger gameActive and AreInArea ( [ Heike , Omar ] , legSpotNorthArea ) and not spotByLegion and not spotLegion do var i , un , veh ;
12020: LD_EXP 19
12024: PUSH
12025: LD_EXP 20
12029: PUSH
12030: LD_EXP 21
12034: PUSH
12035: EMPTY
12036: LIST
12037: LIST
12038: PPUSH
12039: LD_INT 22
12041: PPUSH
12042: CALL 8353 0 2
12046: AND
12047: PUSH
12048: LD_EXP 9
12052: NOT
12053: AND
12054: PUSH
12055: LD_EXP 10
12059: NOT
12060: AND
12061: IFFALSE 12568
12063: GO 12065
12065: DISABLE
12066: LD_INT 0
12068: PPUSH
12069: PPUSH
12070: PPUSH
// begin uc_side := 8 ;
12071: LD_ADDR_OWVAR 20
12075: PUSH
12076: LD_INT 8
12078: ST_TO_ADDR
// uc_nation := nation_american ;
12079: LD_ADDR_OWVAR 21
12083: PUSH
12084: LD_INT 1
12086: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 90 ) ;
12087: LD_INT 3
12089: PPUSH
12090: LD_INT 1
12092: PPUSH
12093: LD_INT 1
12095: PPUSH
12096: LD_INT 9
12098: PPUSH
12099: LD_INT 90
12101: PPUSH
12102: CALL 21097 0 5
// veh := CreateVehicle ;
12106: LD_ADDR_VAR 0 3
12110: PUSH
12111: CALL_OW 45
12115: ST_TO_ADDR
// legTanks := Join ( legTanks , veh ) ;
12116: LD_ADDR_EXP 39
12120: PUSH
12121: LD_EXP 39
12125: PPUSH
12126: LD_VAR 0 3
12130: PPUSH
12131: CALL 53946 0 2
12135: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
12136: LD_VAR 0 3
12140: PPUSH
12141: LD_INT 2
12143: PPUSH
12144: CALL_OW 233
// PlaceUnitXY ( veh , 126 , 18 , false ) ;
12148: LD_VAR 0 3
12152: PPUSH
12153: LD_INT 126
12155: PPUSH
12156: LD_INT 18
12158: PPUSH
12159: LD_INT 0
12161: PPUSH
12162: CALL_OW 48
// uc_nation := nation_arabian ;
12166: LD_ADDR_OWVAR 21
12170: PUSH
12171: LD_INT 2
12173: ST_TO_ADDR
// PrepareMechanic ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
12174: LD_INT 0
12176: PPUSH
12177: LD_INT 6
12179: PUSH
12180: LD_INT 7
12182: PUSH
12183: LD_INT 8
12185: PUSH
12186: LD_INT 9
12188: PUSH
12189: EMPTY
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: PUSH
12195: LD_OWVAR 67
12199: ARRAY
12200: PPUSH
12201: CALL_OW 383
// un := CreateHuman ;
12205: LD_ADDR_VAR 0 2
12209: PUSH
12210: CALL_OW 44
12214: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
12215: LD_ADDR_EXP 34
12219: PUSH
12220: LD_EXP 34
12224: PPUSH
12225: LD_VAR 0 2
12229: PPUSH
12230: CALL 53946 0 2
12234: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12235: LD_VAR 0 2
12239: PPUSH
12240: LD_VAR 0 3
12244: PPUSH
12245: CALL_OW 52
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
12249: LD_INT 0
12251: PPUSH
12252: LD_INT 6
12254: PUSH
12255: LD_INT 7
12257: PUSH
12258: LD_INT 8
12260: PUSH
12261: LD_INT 9
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: LIST
12268: LIST
12269: PUSH
12270: LD_OWVAR 67
12274: ARRAY
12275: PPUSH
12276: CALL_OW 381
// for i := 1 to 3 do
12280: LD_ADDR_VAR 0 1
12284: PUSH
12285: DOUBLE
12286: LD_INT 1
12288: DEC
12289: ST_TO_ADDR
12290: LD_INT 3
12292: PUSH
12293: FOR_TO
12294: IFFALSE 12383
// begin un := CreateHuman ;
12296: LD_ADDR_VAR 0 2
12300: PUSH
12301: CALL_OW 44
12305: ST_TO_ADDR
// if i = 1 then
12306: LD_VAR 0 1
12310: PUSH
12311: LD_INT 1
12313: EQUAL
12314: IFFALSE 12328
// SetClass ( un , class_sniper ) ;
12316: LD_VAR 0 2
12320: PPUSH
12321: LD_INT 5
12323: PPUSH
12324: CALL_OW 336
// legEForces := Join ( legEForces , un ) ;
12328: LD_ADDR_EXP 34
12332: PUSH
12333: LD_EXP 34
12337: PPUSH
12338: LD_VAR 0 2
12342: PPUSH
12343: CALL 53946 0 2
12347: ST_TO_ADDR
// SetDir ( un , 2 ) ;
12348: LD_VAR 0 2
12352: PPUSH
12353: LD_INT 2
12355: PPUSH
12356: CALL_OW 233
// PlaceUnitXYR ( un , 126 , 18 , 4 , false ) ;
12360: LD_VAR 0 2
12364: PPUSH
12365: LD_INT 126
12367: PPUSH
12368: LD_INT 18
12370: PPUSH
12371: LD_INT 4
12373: PPUSH
12374: LD_INT 0
12376: PPUSH
12377: CALL_OW 50
// end ;
12381: GO 12293
12383: POP
12384: POP
// wait ( 0 0$01 ) ;
12385: LD_INT 35
12387: PPUSH
12388: CALL_OW 67
// DialogueOn ;
12392: CALL_OW 6
// PlaceSeeing ( 126 , 18 , 2 , - 16 ) ;
12396: LD_INT 126
12398: PPUSH
12399: LD_INT 18
12401: PPUSH
12402: LD_INT 2
12404: PPUSH
12405: LD_INT 16
12407: NEG
12408: PPUSH
12409: CALL_OW 330
// CenterNowOnXY ( 126 , 18 ) ;
12413: LD_INT 126
12415: PPUSH
12416: LD_INT 18
12418: PPUSH
12419: CALL_OW 86
// TalkAboutLegion ;
12423: CALL 11928 0 0
// RemoveSeeing ( 126 , 18 , 2 ) ;
12427: LD_INT 126
12429: PPUSH
12430: LD_INT 18
12432: PPUSH
12433: LD_INT 2
12435: PPUSH
12436: CALL_OW 331
// DialogueOff ;
12440: CALL_OW 7
// spotLegion := true ;
12444: LD_ADDR_EXP 10
12448: PUSH
12449: LD_INT 1
12451: ST_TO_ADDR
// ComAgressiveMove ( legEForces , 164 , 47 ) ;
12452: LD_EXP 34
12456: PPUSH
12457: LD_INT 164
12459: PPUSH
12460: LD_INT 47
12462: PPUSH
12463: CALL_OW 114
// AddComAgressiveMove ( legEForces , 179 , 20 ) ;
12467: LD_EXP 34
12471: PPUSH
12472: LD_INT 179
12474: PPUSH
12475: LD_INT 20
12477: PPUSH
12478: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
12482: LD_INT 35
12484: PPUSH
12485: CALL_OW 67
// until not UnitFilter ( legEForces , [ f_hastask ] ) or not UnitFilter ( legEForces , [ f_ok ] ) ;
12489: LD_EXP 34
12493: PPUSH
12494: LD_INT 60
12496: PUSH
12497: EMPTY
12498: LIST
12499: PPUSH
12500: CALL_OW 72
12504: NOT
12505: PUSH
12506: LD_EXP 34
12510: PPUSH
12511: LD_INT 50
12513: PUSH
12514: EMPTY
12515: LIST
12516: PPUSH
12517: CALL_OW 72
12521: NOT
12522: OR
12523: IFFALSE 12482
// if not UnitFilter ( legEForces , [ f_ok ] ) then
12525: LD_EXP 34
12529: PPUSH
12530: LD_INT 50
12532: PUSH
12533: EMPTY
12534: LIST
12535: PPUSH
12536: CALL_OW 72
12540: NOT
12541: IFFALSE 12545
// exit ;
12543: GO 12568
// legForces := legForces union legEForces ;
12545: LD_ADDR_EXP 33
12549: PUSH
12550: LD_EXP 33
12554: PUSH
12555: LD_EXP 34
12559: UNION
12560: ST_TO_ADDR
// legEForces := [ ] ;
12561: LD_ADDR_EXP 34
12565: PUSH
12566: EMPTY
12567: ST_TO_ADDR
// end ;
12568: PPOPN 3
12570: END
// every 0 0$2 trigger gameActive and AreInArea ( [ Heike , Omar ] , legSpotSouthArea ) and not spotByLegion and not spotLegion do var i , un , veh ;
12571: LD_EXP 19
12575: PUSH
12576: LD_EXP 20
12580: PUSH
12581: LD_EXP 21
12585: PUSH
12586: EMPTY
12587: LIST
12588: LIST
12589: PPUSH
12590: LD_INT 23
12592: PPUSH
12593: CALL 8353 0 2
12597: AND
12598: PUSH
12599: LD_EXP 9
12603: NOT
12604: AND
12605: PUSH
12606: LD_EXP 10
12610: NOT
12611: AND
12612: IFFALSE 13119
12614: GO 12616
12616: DISABLE
12617: LD_INT 0
12619: PPUSH
12620: PPUSH
12621: PPUSH
// begin uc_side := 8 ;
12622: LD_ADDR_OWVAR 20
12626: PUSH
12627: LD_INT 8
12629: ST_TO_ADDR
// uc_nation := nation_american ;
12630: LD_ADDR_OWVAR 21
12634: PUSH
12635: LD_INT 1
12637: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 90 ) ;
12638: LD_INT 3
12640: PPUSH
12641: LD_INT 1
12643: PPUSH
12644: LD_INT 1
12646: PPUSH
12647: LD_INT 9
12649: PPUSH
12650: LD_INT 90
12652: PPUSH
12653: CALL 21097 0 5
// veh := CreateVehicle ;
12657: LD_ADDR_VAR 0 3
12661: PUSH
12662: CALL_OW 45
12666: ST_TO_ADDR
// legTanks := Join ( legTanks , veh ) ;
12667: LD_ADDR_EXP 39
12671: PUSH
12672: LD_EXP 39
12676: PPUSH
12677: LD_VAR 0 3
12681: PPUSH
12682: CALL 53946 0 2
12686: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
12687: LD_VAR 0 3
12691: PPUSH
12692: LD_INT 3
12694: PPUSH
12695: CALL_OW 233
// PlaceUnitXY ( veh , 224 , 57 , false ) ;
12699: LD_VAR 0 3
12703: PPUSH
12704: LD_INT 224
12706: PPUSH
12707: LD_INT 57
12709: PPUSH
12710: LD_INT 0
12712: PPUSH
12713: CALL_OW 48
// uc_nation := nation_arabian ;
12717: LD_ADDR_OWVAR 21
12721: PUSH
12722: LD_INT 2
12724: ST_TO_ADDR
// PrepareMechanic ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
12725: LD_INT 0
12727: PPUSH
12728: LD_INT 6
12730: PUSH
12731: LD_INT 7
12733: PUSH
12734: LD_INT 8
12736: PUSH
12737: LD_INT 9
12739: PUSH
12740: EMPTY
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: PUSH
12746: LD_OWVAR 67
12750: ARRAY
12751: PPUSH
12752: CALL_OW 383
// un := CreateHuman ;
12756: LD_ADDR_VAR 0 2
12760: PUSH
12761: CALL_OW 44
12765: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
12766: LD_ADDR_EXP 34
12770: PUSH
12771: LD_EXP 34
12775: PPUSH
12776: LD_VAR 0 2
12780: PPUSH
12781: CALL 53946 0 2
12785: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12786: LD_VAR 0 2
12790: PPUSH
12791: LD_VAR 0 3
12795: PPUSH
12796: CALL_OW 52
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
12800: LD_INT 0
12802: PPUSH
12803: LD_INT 6
12805: PUSH
12806: LD_INT 7
12808: PUSH
12809: LD_INT 8
12811: PUSH
12812: LD_INT 9
12814: PUSH
12815: EMPTY
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: PUSH
12821: LD_OWVAR 67
12825: ARRAY
12826: PPUSH
12827: CALL_OW 381
// for i := 1 to 3 do
12831: LD_ADDR_VAR 0 1
12835: PUSH
12836: DOUBLE
12837: LD_INT 1
12839: DEC
12840: ST_TO_ADDR
12841: LD_INT 3
12843: PUSH
12844: FOR_TO
12845: IFFALSE 12934
// begin un := CreateHuman ;
12847: LD_ADDR_VAR 0 2
12851: PUSH
12852: CALL_OW 44
12856: ST_TO_ADDR
// if i = 1 then
12857: LD_VAR 0 1
12861: PUSH
12862: LD_INT 1
12864: EQUAL
12865: IFFALSE 12879
// SetClass ( un , class_sniper ) ;
12867: LD_VAR 0 2
12871: PPUSH
12872: LD_INT 5
12874: PPUSH
12875: CALL_OW 336
// legEForces := Join ( legEForces , un ) ;
12879: LD_ADDR_EXP 34
12883: PUSH
12884: LD_EXP 34
12888: PPUSH
12889: LD_VAR 0 2
12893: PPUSH
12894: CALL 53946 0 2
12898: ST_TO_ADDR
// SetDir ( un , 3 ) ;
12899: LD_VAR 0 2
12903: PPUSH
12904: LD_INT 3
12906: PPUSH
12907: CALL_OW 233
// PlaceUnitXYR ( un , 224 , 57 , 4 , false ) ;
12911: LD_VAR 0 2
12915: PPUSH
12916: LD_INT 224
12918: PPUSH
12919: LD_INT 57
12921: PPUSH
12922: LD_INT 4
12924: PPUSH
12925: LD_INT 0
12927: PPUSH
12928: CALL_OW 50
// end ;
12932: GO 12844
12934: POP
12935: POP
// wait ( 0 0$01 ) ;
12936: LD_INT 35
12938: PPUSH
12939: CALL_OW 67
// DialogueOn ;
12943: CALL_OW 6
// PlaceSeeing ( 224 , 57 , 2 , - 16 ) ;
12947: LD_INT 224
12949: PPUSH
12950: LD_INT 57
12952: PPUSH
12953: LD_INT 2
12955: PPUSH
12956: LD_INT 16
12958: NEG
12959: PPUSH
12960: CALL_OW 330
// CenterNowOnXY ( 224 , 57 ) ;
12964: LD_INT 224
12966: PPUSH
12967: LD_INT 57
12969: PPUSH
12970: CALL_OW 86
// TalkAboutLegion ;
12974: CALL 11928 0 0
// RemoveSeeing ( 224 , 57 , 2 ) ;
12978: LD_INT 224
12980: PPUSH
12981: LD_INT 57
12983: PPUSH
12984: LD_INT 2
12986: PPUSH
12987: CALL_OW 331
// DialogueOff ;
12991: CALL_OW 7
// spotLegion := true ;
12995: LD_ADDR_EXP 10
12999: PUSH
13000: LD_INT 1
13002: ST_TO_ADDR
// ComAgressiveMove ( legEForces , 164 , 47 ) ;
13003: LD_EXP 34
13007: PPUSH
13008: LD_INT 164
13010: PPUSH
13011: LD_INT 47
13013: PPUSH
13014: CALL_OW 114
// AddComAgressiveMove ( legEForces , 179 , 20 ) ;
13018: LD_EXP 34
13022: PPUSH
13023: LD_INT 179
13025: PPUSH
13026: LD_INT 20
13028: PPUSH
13029: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
13033: LD_INT 35
13035: PPUSH
13036: CALL_OW 67
// until not UnitFilter ( legEForces , [ f_hastask ] ) or not UnitFilter ( legEForces , [ f_ok ] ) ;
13040: LD_EXP 34
13044: PPUSH
13045: LD_INT 60
13047: PUSH
13048: EMPTY
13049: LIST
13050: PPUSH
13051: CALL_OW 72
13055: NOT
13056: PUSH
13057: LD_EXP 34
13061: PPUSH
13062: LD_INT 50
13064: PUSH
13065: EMPTY
13066: LIST
13067: PPUSH
13068: CALL_OW 72
13072: NOT
13073: OR
13074: IFFALSE 13033
// if not UnitFilter ( legEForces , [ f_ok ] ) then
13076: LD_EXP 34
13080: PPUSH
13081: LD_INT 50
13083: PUSH
13084: EMPTY
13085: LIST
13086: PPUSH
13087: CALL_OW 72
13091: NOT
13092: IFFALSE 13096
// exit ;
13094: GO 13119
// legForces := legForces union legEForces ;
13096: LD_ADDR_EXP 33
13100: PUSH
13101: LD_EXP 33
13105: PUSH
13106: LD_EXP 34
13110: UNION
13111: ST_TO_ADDR
// legEForces := [ ] ;
13112: LD_ADDR_EXP 34
13116: PUSH
13117: EMPTY
13118: ST_TO_ADDR
// end ;
13119: PPOPN 3
13121: END
// every 0 0$1 trigger gameActive and ( See ( 8 , Omar ) or See ( 8 , Heike ) ) and IsOk ( Heike ) and IsOk ( Omar ) and not spotByLegion do
13122: LD_EXP 19
13126: PUSH
13127: LD_INT 8
13129: PPUSH
13130: LD_EXP 21
13134: PPUSH
13135: CALL_OW 292
13139: PUSH
13140: LD_INT 8
13142: PPUSH
13143: LD_EXP 20
13147: PPUSH
13148: CALL_OW 292
13152: OR
13153: AND
13154: PUSH
13155: LD_EXP 20
13159: PPUSH
13160: CALL_OW 302
13164: AND
13165: PUSH
13166: LD_EXP 21
13170: PPUSH
13171: CALL_OW 302
13175: AND
13176: PUSH
13177: LD_EXP 9
13181: NOT
13182: AND
13183: IFFALSE 13324
13185: GO 13187
13187: DISABLE
// begin DialogueOn ;
13188: CALL_OW 6
// SayRadio ( Farmer , DF-Spot-1 ) ;
13192: LD_EXP 32
13196: PPUSH
13197: LD_STRING DF-Spot-1
13199: PPUSH
13200: CALL_OW 94
// Say ( Heike , DH-Spot-2 ) ;
13204: LD_EXP 20
13208: PPUSH
13209: LD_STRING DH-Spot-2
13211: PPUSH
13212: CALL_OW 88
// SayRadio ( Farmer , DF-Spot-3 ) ;
13216: LD_EXP 32
13220: PPUSH
13221: LD_STRING DF-Spot-3
13223: PPUSH
13224: CALL_OW 94
// Say ( Heike , DH-Spot-4 ) ;
13228: LD_EXP 20
13232: PPUSH
13233: LD_STRING DH-Spot-4
13235: PPUSH
13236: CALL_OW 88
// Say ( Omar , DOm-Spot-5 ) ;
13240: LD_EXP 21
13244: PPUSH
13245: LD_STRING DOm-Spot-5
13247: PPUSH
13248: CALL_OW 88
// SayRadio ( Farmer , DF-Spot-6 ) ;
13252: LD_EXP 32
13256: PPUSH
13257: LD_STRING DF-Spot-6
13259: PPUSH
13260: CALL_OW 94
// SayRadio ( Farmer , DF-Spot-7 ) ;
13264: LD_EXP 32
13268: PPUSH
13269: LD_STRING DF-Spot-7
13271: PPUSH
13272: CALL_OW 94
// SayRadio ( Farmer , DF-Spot-8 ) ;
13276: LD_EXP 32
13280: PPUSH
13281: LD_STRING DF-Spot-8
13283: PPUSH
13284: CALL_OW 94
// Say ( Heike , DH-Spot-9 ) ;
13288: LD_EXP 20
13292: PPUSH
13293: LD_STRING DH-Spot-9
13295: PPUSH
13296: CALL_OW 88
// SayRadio ( Farmer , DF-Spot-10 ) ;
13300: LD_EXP 32
13304: PPUSH
13305: LD_STRING DF-Spot-10
13307: PPUSH
13308: CALL_OW 94
// DialogueOff ;
13312: CALL_OW 7
// spotByLegion := true ;
13316: LD_ADDR_EXP 9
13320: PUSH
13321: LD_INT 1
13323: ST_TO_ADDR
// end ;
13324: END
// every 0 0$1 trigger gameActive and ( spotByLegion or spotLegion ) do
13325: LD_EXP 19
13329: PUSH
13330: LD_EXP 9
13334: PUSH
13335: LD_EXP 10
13339: OR
13340: AND
13341: IFFALSE 13353
13343: GO 13345
13345: DISABLE
// ChangeMissionObjectives ( O3 ) ;
13346: LD_STRING O3
13348: PPUSH
13349: CALL_OW 337
13353: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_ok ] ] ) = 0 do
13354: LD_EXP 19
13358: PUSH
13359: LD_INT 22
13361: PUSH
13362: LD_INT 8
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: PUSH
13369: LD_INT 21
13371: PUSH
13372: LD_INT 1
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: PUSH
13379: LD_INT 50
13381: PUSH
13382: EMPTY
13383: LIST
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: LIST
13389: PPUSH
13390: CALL_OW 69
13394: PUSH
13395: LD_INT 0
13397: EQUAL
13398: AND
13399: IFFALSE 13483
13401: GO 13403
13403: DISABLE
// begin legScriptActive := false ;
13404: LD_ADDR_EXP 4
13408: PUSH
13409: LD_INT 0
13411: ST_TO_ADDR
// legionDestroyed := true ;
13412: LD_ADDR_EXP 12
13416: PUSH
13417: LD_INT 1
13419: ST_TO_ADDR
// DialogueOn ;
13420: CALL_OW 6
// SayRadio ( Farmer , DF-LegDes-1 ) ;
13424: LD_EXP 32
13428: PPUSH
13429: LD_STRING DF-LegDes-1
13431: PPUSH
13432: CALL_OW 94
// Say ( Heike , DH-LegDes-2 ) ;
13436: LD_EXP 20
13440: PPUSH
13441: LD_STRING DH-LegDes-2
13443: PPUSH
13444: CALL_OW 88
// SayRadio ( Farmer , DF-LegDes-3 ) ;
13448: LD_EXP 32
13452: PPUSH
13453: LD_STRING DF-LegDes-3
13455: PPUSH
13456: CALL_OW 94
// Say ( Heike , DH-LegDes-4 ) ;
13460: LD_EXP 20
13464: PPUSH
13465: LD_STRING DH-LegDes-4
13467: PPUSH
13468: CALL_OW 88
// DialogueOff ;
13472: CALL_OW 7
// ChangeMissionObjectives ( O5 ) ;
13476: LD_STRING O5
13478: PPUSH
13479: CALL_OW 337
// end ;
13483: END
// every 0 0$1 trigger gameActive and UnitFilter ( amForces , [ [ f_type , unit_human ] , [ f_ok ] ] ) < 6 do var i , tmp ;
13484: LD_EXP 19
13488: PUSH
13489: LD_EXP 24
13493: PPUSH
13494: LD_INT 21
13496: PUSH
13497: LD_INT 1
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: PUSH
13504: LD_INT 50
13506: PUSH
13507: EMPTY
13508: LIST
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: PPUSH
13514: CALL_OW 72
13518: PUSH
13519: LD_INT 6
13521: LESS
13522: AND
13523: IFFALSE 13754
13525: GO 13527
13527: DISABLE
13528: LD_INT 0
13530: PPUSH
13531: PPUSH
// begin amScriptActive := false ;
13532: LD_ADDR_EXP 3
13536: PUSH
13537: LD_INT 0
13539: ST_TO_ADDR
// tmp := UnitFilter ( amForces , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
13540: LD_ADDR_VAR 0 2
13544: PUSH
13545: LD_EXP 24
13549: PPUSH
13550: LD_INT 21
13552: PUSH
13553: LD_INT 1
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PUSH
13560: LD_INT 50
13562: PUSH
13563: EMPTY
13564: LIST
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: PPUSH
13570: CALL_OW 72
13574: ST_TO_ADDR
// for i in tmp do
13575: LD_ADDR_VAR 0 1
13579: PUSH
13580: LD_VAR 0 2
13584: PUSH
13585: FOR_IN
13586: IFFALSE 13614
// begin ComExit ( i ) ;
13588: LD_VAR 0 1
13592: PPUSH
13593: CALL 54344 0 1
// AddComMoveXY ( i , 63 , 124 ) ;
13597: LD_VAR 0 1
13601: PPUSH
13602: LD_INT 63
13604: PPUSH
13605: LD_INT 124
13607: PPUSH
13608: CALL_OW 171
// end ;
13612: GO 13585
13614: POP
13615: POP
// wait ( 0 0$2 ) ;
13616: LD_INT 70
13618: PPUSH
13619: CALL_OW 67
// americanDestroyed := true ;
13623: LD_ADDR_EXP 11
13627: PUSH
13628: LD_INT 1
13630: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13631: LD_INT 35
13633: PPUSH
13634: CALL_OW 67
// tmp := UnitFilter ( amForces , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
13638: LD_ADDR_VAR 0 2
13642: PUSH
13643: LD_EXP 24
13647: PPUSH
13648: LD_INT 21
13650: PUSH
13651: LD_INT 1
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: PUSH
13658: LD_INT 50
13660: PUSH
13661: EMPTY
13662: LIST
13663: PUSH
13664: EMPTY
13665: LIST
13666: LIST
13667: PPUSH
13668: CALL_OW 72
13672: ST_TO_ADDR
// for i in tmp do
13673: LD_ADDR_VAR 0 1
13677: PUSH
13678: LD_VAR 0 2
13682: PUSH
13683: FOR_IN
13684: IFFALSE 13745
// begin if IsAt ( i , 63 , 124 ) or IsInArea ( i , amEscapeArea ) then
13686: LD_VAR 0 1
13690: PPUSH
13691: LD_INT 63
13693: PPUSH
13694: LD_INT 124
13696: PPUSH
13697: CALL_OW 307
13701: PUSH
13702: LD_VAR 0 1
13706: PPUSH
13707: LD_INT 25
13709: PPUSH
13710: CALL_OW 308
13714: OR
13715: IFFALSE 13728
// RemoveUnit ( i ) else
13717: LD_VAR 0 1
13721: PPUSH
13722: CALL_OW 64
13726: GO 13743
// ComMoveXY ( i , 63 , 124 ) ;
13728: LD_VAR 0 1
13732: PPUSH
13733: LD_INT 63
13735: PPUSH
13736: LD_INT 124
13738: PPUSH
13739: CALL_OW 111
// end ;
13743: GO 13683
13745: POP
13746: POP
// until not tmp ;
13747: LD_VAR 0 2
13751: NOT
13752: IFFALSE 13631
// end ;
13754: PPOPN 2
13756: END
// every 0 0$1 trigger gameActive and americanDestroyed and IsOk ( Heike ) and IsOk ( Omar ) do var i , un , veh ;
13757: LD_EXP 19
13761: PUSH
13762: LD_EXP 11
13766: AND
13767: PUSH
13768: LD_EXP 20
13772: PPUSH
13773: CALL_OW 302
13777: AND
13778: PUSH
13779: LD_EXP 21
13783: PPUSH
13784: CALL_OW 302
13788: AND
13789: IFFALSE 14279
13791: GO 13793
13793: DISABLE
13794: LD_INT 0
13796: PPUSH
13797: PPUSH
13798: PPUSH
// begin DialogueOn ;
13799: CALL_OW 6
// Say ( Heike , DH-Victory-1 ) ;
13803: LD_EXP 20
13807: PPUSH
13808: LD_STRING DH-Victory-1
13810: PPUSH
13811: CALL_OW 88
// Say ( Omar , DOm-Victory-2 ) ;
13815: LD_EXP 21
13819: PPUSH
13820: LD_STRING DOm-Victory-2
13822: PPUSH
13823: CALL_OW 88
// Say ( Omar , DOm-Victory-3 ) ;
13827: LD_EXP 21
13831: PPUSH
13832: LD_STRING DOm-Victory-3
13834: PPUSH
13835: CALL_OW 88
// Say ( Heike , DH-Victory-4 ) ;
13839: LD_EXP 20
13843: PPUSH
13844: LD_STRING DH-Victory-4
13846: PPUSH
13847: CALL_OW 88
// Say ( Omar , DOm-Victory-5 ) ;
13851: LD_EXP 21
13855: PPUSH
13856: LD_STRING DOm-Victory-5
13858: PPUSH
13859: CALL_OW 88
// Say ( Omar , DOm-Victory-6 ) ;
13863: LD_EXP 21
13867: PPUSH
13868: LD_STRING DOm-Victory-6
13870: PPUSH
13871: CALL_OW 88
// DialogueOff ;
13875: CALL_OW 7
// ChangeMissionObjectives ( O4 ) ;
13879: LD_STRING O4
13881: PPUSH
13882: CALL_OW 337
// canFinish := true ;
13886: LD_ADDR_EXP 18
13890: PUSH
13891: LD_INT 1
13893: ST_TO_ADDR
// SetAreaMapShow ( finalArea , 1 ) ;
13894: LD_INT 24
13896: PPUSH
13897: LD_INT 1
13899: PPUSH
13900: CALL_OW 424
// if not legionDestroyed then
13904: LD_EXP 12
13908: NOT
13909: IFFALSE 14279
// begin uc_nation := nation_arabian ;
13911: LD_ADDR_OWVAR 21
13915: PUSH
13916: LD_INT 2
13918: ST_TO_ADDR
// uc_side := 8 ;
13919: LD_ADDR_OWVAR 20
13923: PUSH
13924: LD_INT 8
13926: ST_TO_ADDR
// for i := 1 to 4 do
13927: LD_ADDR_VAR 0 1
13931: PUSH
13932: DOUBLE
13933: LD_INT 1
13935: DEC
13936: ST_TO_ADDR
13937: LD_INT 4
13939: PUSH
13940: FOR_TO
13941: IFFALSE 14022
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
13943: LD_INT 0
13945: PPUSH
13946: LD_INT 8
13948: PUSH
13949: LD_INT 9
13951: PUSH
13952: LD_INT 10
13954: PUSH
13955: LD_INT 10
13957: PUSH
13958: EMPTY
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: PUSH
13964: LD_OWVAR 67
13968: ARRAY
13969: PPUSH
13970: CALL_OW 381
// un := CreateHuman ;
13974: LD_ADDR_VAR 0 2
13978: PUSH
13979: CALL_OW 44
13983: ST_TO_ADDR
// SetDir ( un , 3 ) ;
13984: LD_VAR 0 2
13988: PPUSH
13989: LD_INT 3
13991: PPUSH
13992: CALL_OW 233
// PlaceUnitArea ( un , legDefArea , false ) ;
13996: LD_VAR 0 2
14000: PPUSH
14001: LD_INT 26
14003: PPUSH
14004: LD_INT 0
14006: PPUSH
14007: CALL_OW 49
// ComCrawl ( un ) ;
14011: LD_VAR 0 2
14015: PPUSH
14016: CALL_OW 137
// end ;
14020: GO 13940
14022: POP
14023: POP
// for i := 1 to 3 do
14024: LD_ADDR_VAR 0 1
14028: PUSH
14029: DOUBLE
14030: LD_INT 1
14032: DEC
14033: ST_TO_ADDR
14034: LD_INT 3
14036: PUSH
14037: FOR_TO
14038: IFFALSE 14122
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
14040: LD_INT 0
14042: PPUSH
14043: LD_INT 8
14045: PUSH
14046: LD_INT 9
14048: PUSH
14049: LD_INT 10
14051: PUSH
14052: LD_INT 10
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: PUSH
14061: LD_OWVAR 67
14065: ARRAY
14066: PPUSH
14067: CALL_OW 381
// un := CreateHuman ;
14071: LD_ADDR_VAR 0 2
14075: PUSH
14076: CALL_OW 44
14080: ST_TO_ADDR
// SetClass ( un , class_mortar ) ;
14081: LD_VAR 0 2
14085: PPUSH
14086: LD_INT 8
14088: PPUSH
14089: CALL_OW 336
// SetDir ( un , 3 ) ;
14093: LD_VAR 0 2
14097: PPUSH
14098: LD_INT 3
14100: PPUSH
14101: CALL_OW 233
// PlaceUnitArea ( un , legDefArea , false ) ;
14105: LD_VAR 0 2
14109: PPUSH
14110: LD_INT 26
14112: PPUSH
14113: LD_INT 0
14115: PPUSH
14116: CALL_OW 49
// end ;
14120: GO 14037
14122: POP
14123: POP
// for i := 1 to 2 do
14124: LD_ADDR_VAR 0 1
14128: PUSH
14129: DOUBLE
14130: LD_INT 1
14132: DEC
14133: ST_TO_ADDR
14134: LD_INT 2
14136: PUSH
14137: FOR_TO
14138: IFFALSE 14277
// begin uc_side := 8 ;
14140: LD_ADDR_OWVAR 20
14144: PUSH
14145: LD_INT 8
14147: ST_TO_ADDR
// uc_nation := nation_american ;
14148: LD_ADDR_OWVAR 21
14152: PUSH
14153: LD_INT 1
14155: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_combustion , control_manual , us_laser , 90 ) ;
14156: LD_INT 4
14158: PPUSH
14159: LD_INT 1
14161: PPUSH
14162: LD_INT 1
14164: PPUSH
14165: LD_INT 9
14167: PPUSH
14168: LD_INT 90
14170: PPUSH
14171: CALL 21097 0 5
// veh := CreateVehicle ;
14175: LD_ADDR_VAR 0 3
14179: PUSH
14180: CALL_OW 45
14184: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
14185: LD_VAR 0 3
14189: PPUSH
14190: LD_INT 3
14192: PPUSH
14193: CALL_OW 233
// PlaceUnitArea ( veh , legVDefArea , false ) ;
14197: LD_VAR 0 3
14201: PPUSH
14202: LD_INT 27
14204: PPUSH
14205: LD_INT 0
14207: PPUSH
14208: CALL_OW 49
// uc_nation := nation_arabian ;
14212: LD_ADDR_OWVAR 21
14216: PUSH
14217: LD_INT 2
14219: ST_TO_ADDR
// PrepareMechanic ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
14220: LD_INT 0
14222: PPUSH
14223: LD_INT 8
14225: PUSH
14226: LD_INT 9
14228: PUSH
14229: LD_INT 10
14231: PUSH
14232: LD_INT 10
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: PUSH
14241: LD_OWVAR 67
14245: ARRAY
14246: PPUSH
14247: CALL_OW 383
// un := CreateHuman ;
14251: LD_ADDR_VAR 0 2
14255: PUSH
14256: CALL_OW 44
14260: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14261: LD_VAR 0 2
14265: PPUSH
14266: LD_VAR 0 3
14270: PPUSH
14271: CALL_OW 52
// end ;
14275: GO 14137
14277: POP
14278: POP
// end ; end ;
14279: PPOPN 3
14281: END
// every 0 0$1 trigger gameActive and canFinish and AreInArea ( [ Omar ] , finalArea ) and AreInArea ( [ Heike ] , finalArea ) do
14282: LD_EXP 19
14286: PUSH
14287: LD_EXP 18
14291: AND
14292: PUSH
14293: LD_EXP 21
14297: PUSH
14298: EMPTY
14299: LIST
14300: PPUSH
14301: LD_INT 24
14303: PPUSH
14304: CALL 8353 0 2
14308: AND
14309: PUSH
14310: LD_EXP 20
14314: PUSH
14315: EMPTY
14316: LIST
14317: PPUSH
14318: LD_INT 24
14320: PPUSH
14321: CALL 8353 0 2
14325: AND
14326: IFFALSE 14488
14328: GO 14330
14330: DISABLE
// begin if legionDestroyed then
14331: LD_EXP 12
14335: IFFALSE 14349
// AddMedal ( med1 , 1 ) else
14337: LD_STRING med1
14339: PPUSH
14340: LD_INT 1
14342: PPUSH
14343: CALL_OW 101
14347: GO 14360
// AddMedal ( med1 , - 1 ) ;
14349: LD_STRING med1
14351: PPUSH
14352: LD_INT 1
14354: NEG
14355: PPUSH
14356: CALL_OW 101
// if tick <= [ 70 70$00 , 60 60$00 , 50 50$00 , 45 45$00 ] [ Difficulty ] then
14360: LD_OWVAR 1
14364: PUSH
14365: LD_INT 147000
14367: PUSH
14368: LD_INT 126000
14370: PUSH
14371: LD_INT 105000
14373: PUSH
14374: LD_INT 94500
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: PUSH
14383: LD_OWVAR 67
14387: ARRAY
14388: LESSEQUAL
14389: IFFALSE 14403
// AddMedal ( med2 , 1 ) else
14391: LD_STRING med2
14393: PPUSH
14394: LD_INT 1
14396: PPUSH
14397: CALL_OW 101
14401: GO 14414
// AddMedal ( med2 , - 1 ) ;
14403: LD_STRING med2
14405: PPUSH
14406: LD_INT 1
14408: NEG
14409: PPUSH
14410: CALL_OW 101
// if hasApes + hasVehicles + hasTigers + hasMastodont + hasApes + hasDrugs >= 3 then
14414: LD_EXP 16
14418: PUSH
14419: LD_EXP 14
14423: PLUS
14424: PUSH
14425: LD_EXP 15
14429: PLUS
14430: PUSH
14431: LD_EXP 13
14435: PLUS
14436: PUSH
14437: LD_EXP 16
14441: PLUS
14442: PUSH
14443: LD_EXP 17
14447: PLUS
14448: PUSH
14449: LD_INT 3
14451: GREATEREQUAL
14452: IFFALSE 14466
// AddMedal ( med3 , 1 ) else
14454: LD_STRING med3
14456: PPUSH
14457: LD_INT 1
14459: PPUSH
14460: CALL_OW 101
14464: GO 14477
// AddMedal ( med3 , - 1 ) ;
14466: LD_STRING med3
14468: PPUSH
14469: LD_INT 1
14471: NEG
14472: PPUSH
14473: CALL_OW 101
// GiveMedals ( MAIN ) ;
14477: LD_STRING MAIN
14479: PPUSH
14480: CALL_OW 102
// YouWin ;
14484: CALL_OW 103
// end ; end_of_file
14488: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
14489: LD_VAR 0 1
14493: PPUSH
14494: CALL 74192 0 1
// if unit = Heike then
14498: LD_VAR 0 1
14502: PUSH
14503: LD_EXP 20
14507: EQUAL
14508: IFFALSE 14517
// YouLost ( Heike ) ;
14510: LD_STRING Heike
14512: PPUSH
14513: CALL_OW 104
// if unit = Omar then
14517: LD_VAR 0 1
14521: PUSH
14522: LD_EXP 21
14526: EQUAL
14527: IFFALSE 14536
// YouLost ( Omar ) ;
14529: LD_STRING Omar
14531: PPUSH
14532: CALL_OW 104
// if unit in amForces then
14536: LD_VAR 0 1
14540: PUSH
14541: LD_EXP 24
14545: IN
14546: IFFALSE 14564
// amForces := amForces diff unit ;
14548: LD_ADDR_EXP 24
14552: PUSH
14553: LD_EXP 24
14557: PUSH
14558: LD_VAR 0 1
14562: DIFF
14563: ST_TO_ADDR
// if unit in amTanks then
14564: LD_VAR 0 1
14568: PUSH
14569: LD_EXP 29
14573: IN
14574: IFFALSE 14592
// amTanks := amTanks diff unit ;
14576: LD_ADDR_EXP 29
14580: PUSH
14581: LD_EXP 29
14585: PUSH
14586: LD_VAR 0 1
14590: DIFF
14591: ST_TO_ADDR
// if GetBType ( unit ) in [ b_bunker , b_turret ] and GetSide ( unit ) = 1 then
14592: LD_VAR 0 1
14596: PPUSH
14597: CALL_OW 266
14601: PUSH
14602: LD_INT 32
14604: PUSH
14605: LD_INT 33
14607: PUSH
14608: EMPTY
14609: LIST
14610: LIST
14611: IN
14612: PUSH
14613: LD_VAR 0 1
14617: PPUSH
14618: CALL_OW 255
14622: PUSH
14623: LD_INT 1
14625: EQUAL
14626: AND
14627: IFFALSE 14690
// amBuildings := Join ( amBuildings , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
14629: LD_ADDR_EXP 28
14633: PUSH
14634: LD_EXP 28
14638: PPUSH
14639: LD_VAR 0 1
14643: PPUSH
14644: CALL_OW 266
14648: PUSH
14649: LD_VAR 0 1
14653: PPUSH
14654: CALL_OW 250
14658: PUSH
14659: LD_VAR 0 1
14663: PPUSH
14664: CALL_OW 251
14668: PUSH
14669: LD_VAR 0 1
14673: PPUSH
14674: CALL_OW 254
14678: PUSH
14679: EMPTY
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: PPUSH
14685: CALL 53946 0 2
14689: ST_TO_ADDR
// if unit in legForces then
14690: LD_VAR 0 1
14694: PUSH
14695: LD_EXP 33
14699: IN
14700: IFFALSE 14718
// legForces := legForces diff unit ;
14702: LD_ADDR_EXP 33
14706: PUSH
14707: LD_EXP 33
14711: PUSH
14712: LD_VAR 0 1
14716: DIFF
14717: ST_TO_ADDR
// if unit in legTanks then
14718: LD_VAR 0 1
14722: PUSH
14723: LD_EXP 39
14727: IN
14728: IFFALSE 14746
// legTanks := legTanks diff unit ;
14730: LD_ADDR_EXP 39
14734: PUSH
14735: LD_EXP 39
14739: PUSH
14740: LD_VAR 0 1
14744: DIFF
14745: ST_TO_ADDR
// if GetBType ( unit ) in [ b_bunker , b_turret ] and GetSide ( unit ) = 8 then
14746: LD_VAR 0 1
14750: PPUSH
14751: CALL_OW 266
14755: PUSH
14756: LD_INT 32
14758: PUSH
14759: LD_INT 33
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: IN
14766: PUSH
14767: LD_VAR 0 1
14771: PPUSH
14772: CALL_OW 255
14776: PUSH
14777: LD_INT 8
14779: EQUAL
14780: AND
14781: IFFALSE 14844
// legBuildings := Join ( legBuildings , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
14783: LD_ADDR_EXP 38
14787: PUSH
14788: LD_EXP 38
14792: PPUSH
14793: LD_VAR 0 1
14797: PPUSH
14798: CALL_OW 266
14802: PUSH
14803: LD_VAR 0 1
14807: PPUSH
14808: CALL_OW 250
14812: PUSH
14813: LD_VAR 0 1
14817: PPUSH
14818: CALL_OW 251
14822: PUSH
14823: LD_VAR 0 1
14827: PPUSH
14828: CALL_OW 254
14832: PUSH
14833: EMPTY
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: PPUSH
14839: CALL 53946 0 2
14843: ST_TO_ADDR
// if unit = amCargo then
14844: LD_VAR 0 1
14848: PUSH
14849: LD_EXP 31
14853: EQUAL
14854: IFFALSE 14864
// amCargo := 0 ;
14856: LD_ADDR_EXP 31
14860: PUSH
14861: LD_INT 0
14863: ST_TO_ADDR
// if unit = legCargo then
14864: LD_VAR 0 1
14868: PUSH
14869: LD_EXP 40
14873: EQUAL
14874: IFFALSE 14884
// legCargo := 0 ;
14876: LD_ADDR_EXP 40
14880: PUSH
14881: LD_INT 0
14883: ST_TO_ADDR
// end ;
14884: PPOPN 1
14886: END
// on EnterBuilding ( b , un ) do begin if un in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_class , class_mechanic ] ] ) and GetBType ( b ) = b_factory and GetLives ( un ) < 1000 then
14887: LD_VAR 0 2
14891: PUSH
14892: LD_INT 3
14894: PUSH
14895: LD_INT 22
14897: PUSH
14898: LD_INT 2
14900: PUSH
14901: EMPTY
14902: LIST
14903: LIST
14904: PUSH
14905: EMPTY
14906: LIST
14907: LIST
14908: PUSH
14909: LD_INT 25
14911: PUSH
14912: LD_INT 3
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: PUSH
14919: EMPTY
14920: LIST
14921: LIST
14922: PPUSH
14923: CALL_OW 69
14927: IN
14928: PUSH
14929: LD_VAR 0 1
14933: PPUSH
14934: CALL_OW 266
14938: PUSH
14939: LD_INT 3
14941: EQUAL
14942: AND
14943: PUSH
14944: LD_VAR 0 2
14948: PPUSH
14949: CALL_OW 256
14953: PUSH
14954: LD_INT 1000
14956: LESS
14957: AND
14958: IFFALSE 14984
// begin SetTag ( un , 0 ) ;
14960: LD_VAR 0 2
14964: PPUSH
14965: LD_INT 0
14967: PPUSH
14968: CALL_OW 109
// SetLives ( un , 1000 ) ;
14972: LD_VAR 0 2
14976: PPUSH
14977: LD_INT 1000
14979: PPUSH
14980: CALL_OW 234
// end ; end ;
14984: PPOPN 2
14986: END
// on VehicleConstructed ( veh , fac ) do var side , weapon ;
14987: LD_INT 0
14989: PPUSH
14990: PPUSH
// begin SOS_VehicleConstructed ( veh , fac ) ;
14991: LD_VAR 0 1
14995: PPUSH
14996: LD_VAR 0 2
15000: PPUSH
15001: CALL 74312 0 2
// side := GetSide ( fac ) ;
15005: LD_ADDR_VAR 0 3
15009: PUSH
15010: LD_VAR 0 2
15014: PPUSH
15015: CALL_OW 255
15019: ST_TO_ADDR
// weapon := GetWeapon ( fac ) ;
15020: LD_ADDR_VAR 0 4
15024: PUSH
15025: LD_VAR 0 2
15029: PPUSH
15030: CALL_OW 264
15034: ST_TO_ADDR
// if side = 1 then
15035: LD_VAR 0 3
15039: PUSH
15040: LD_INT 1
15042: EQUAL
15043: IFFALSE 15133
// begin amConstructList := Delete ( amConstructList , 1 ) ;
15045: LD_ADDR_EXP 26
15049: PUSH
15050: LD_EXP 26
15054: PPUSH
15055: LD_INT 1
15057: PPUSH
15058: CALL_OW 3
15062: ST_TO_ADDR
// if weapon = us_cargo_bay and not amCargo then
15063: LD_VAR 0 4
15067: PUSH
15068: LD_INT 12
15070: EQUAL
15071: PUSH
15072: LD_EXP 31
15076: NOT
15077: AND
15078: IFFALSE 15090
// amCargo := veh ;
15080: LD_ADDR_EXP 31
15084: PUSH
15085: LD_VAR 0 1
15089: ST_TO_ADDR
// if weapon in [ us_cargo_bay , us_crane , us_bulldozer ] then
15090: LD_VAR 0 4
15094: PUSH
15095: LD_INT 12
15097: PUSH
15098: LD_INT 13
15100: PUSH
15101: LD_INT 14
15103: PUSH
15104: EMPTY
15105: LIST
15106: LIST
15107: LIST
15108: IN
15109: IFFALSE 15113
// exit ;
15111: GO 15227
// amTanks := Join ( amTanks , veh ) ;
15113: LD_ADDR_EXP 29
15117: PUSH
15118: LD_EXP 29
15122: PPUSH
15123: LD_VAR 0 1
15127: PPUSH
15128: CALL 53946 0 2
15132: ST_TO_ADDR
// end ; if side = 8 then
15133: LD_VAR 0 3
15137: PUSH
15138: LD_INT 8
15140: EQUAL
15141: IFFALSE 15227
// begin legConstructList := Delete ( legConstructList , 1 ) ;
15143: LD_ADDR_EXP 36
15147: PUSH
15148: LD_EXP 36
15152: PPUSH
15153: LD_INT 1
15155: PPUSH
15156: CALL_OW 3
15160: ST_TO_ADDR
// if weapon = ar_cargo_bay and not legCargo then
15161: LD_VAR 0 4
15165: PUSH
15166: LD_INT 32
15168: EQUAL
15169: PUSH
15170: LD_EXP 40
15174: NOT
15175: AND
15176: IFFALSE 15188
// legCargo := veh ;
15178: LD_ADDR_EXP 40
15182: PUSH
15183: LD_VAR 0 1
15187: ST_TO_ADDR
// if weapon in [ ar_cargo_bay , ar_crane ] then
15188: LD_VAR 0 4
15192: PUSH
15193: LD_INT 32
15195: PUSH
15196: LD_INT 88
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: IN
15203: IFFALSE 15207
// exit ;
15205: GO 15227
// legTanks := Join ( legTanks , veh ) ;
15207: LD_ADDR_EXP 39
15211: PUSH
15212: LD_EXP 39
15216: PPUSH
15217: LD_VAR 0 1
15221: PPUSH
15222: CALL 53946 0 2
15226: ST_TO_ADDR
// end ; end ;
15227: PPOPN 4
15229: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do var arm , fac , side ;
15230: LD_INT 0
15232: PPUSH
15233: PPUSH
15234: PPUSH
// begin side := GetSide ( driver ) ;
15235: LD_ADDR_VAR 0 7
15239: PUSH
15240: LD_VAR 0 1
15244: PPUSH
15245: CALL_OW 255
15249: ST_TO_ADDR
// if side = 1 and driver in amForces then
15250: LD_VAR 0 7
15254: PUSH
15255: LD_INT 1
15257: EQUAL
15258: PUSH
15259: LD_VAR 0 1
15263: PUSH
15264: LD_EXP 24
15268: IN
15269: AND
15270: IFFALSE 15482
// begin ComMoveToArea ( driver , amBaseArea ) ;
15272: LD_VAR 0 1
15276: PPUSH
15277: LD_INT 1
15279: PPUSH
15280: CALL_OW 113
// SetTag ( driver , tMech ) ;
15284: LD_VAR 0 1
15288: PPUSH
15289: LD_INT 7
15291: PPUSH
15292: CALL_OW 109
// fac := FilterUnitsInArea ( amBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
15296: LD_ADDR_VAR 0 6
15300: PUSH
15301: LD_INT 1
15303: PPUSH
15304: LD_INT 22
15306: PUSH
15307: LD_VAR 0 7
15311: PUSH
15312: EMPTY
15313: LIST
15314: LIST
15315: PUSH
15316: LD_INT 30
15318: PUSH
15319: LD_INT 3
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: PUSH
15326: LD_INT 50
15328: PUSH
15329: EMPTY
15330: LIST
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: LIST
15336: PPUSH
15337: CALL_OW 70
15341: ST_TO_ADDR
// if fac then
15342: LD_VAR 0 6
15346: IFFALSE 15368
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
15348: LD_VAR 0 1
15352: PPUSH
15353: LD_VAR 0 6
15357: PUSH
15358: LD_INT 1
15360: ARRAY
15361: PPUSH
15362: CALL_OW 180
// exit ;
15366: GO 15702
// end ; arm := FilterUnitsInArea ( amBaseArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
15368: LD_ADDR_VAR 0 5
15372: PUSH
15373: LD_INT 1
15375: PPUSH
15376: LD_INT 22
15378: PUSH
15379: LD_VAR 0 7
15383: PUSH
15384: EMPTY
15385: LIST
15386: LIST
15387: PUSH
15388: LD_INT 2
15390: PUSH
15391: LD_INT 30
15393: PUSH
15394: LD_INT 4
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: PUSH
15401: LD_INT 30
15403: PUSH
15404: LD_INT 5
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: LIST
15415: PUSH
15416: LD_INT 3
15418: PUSH
15419: LD_INT 62
15421: PUSH
15422: EMPTY
15423: LIST
15424: PUSH
15425: EMPTY
15426: LIST
15427: LIST
15428: PUSH
15429: LD_INT 50
15431: PUSH
15432: EMPTY
15433: LIST
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: PPUSH
15441: CALL_OW 70
15445: ST_TO_ADDR
// if arm then
15446: LD_VAR 0 5
15450: IFFALSE 15482
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
15452: LD_VAR 0 1
15456: PPUSH
15457: LD_VAR 0 5
15461: PUSH
15462: LD_INT 1
15464: ARRAY
15465: PPUSH
15466: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
15470: LD_VAR 0 1
15474: PPUSH
15475: LD_INT 1
15477: PPUSH
15478: CALL_OW 183
// end ; end ; if side = 8 then
15482: LD_VAR 0 7
15486: PUSH
15487: LD_INT 8
15489: EQUAL
15490: IFFALSE 15702
// begin ComMoveToArea ( driver , legBaseArea ) ;
15492: LD_VAR 0 1
15496: PPUSH
15497: LD_INT 2
15499: PPUSH
15500: CALL_OW 113
// SetTag ( driver , tMech ) ;
15504: LD_VAR 0 1
15508: PPUSH
15509: LD_INT 7
15511: PPUSH
15512: CALL_OW 109
// fac := FilterUnitsInArea ( legBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
15516: LD_ADDR_VAR 0 6
15520: PUSH
15521: LD_INT 2
15523: PPUSH
15524: LD_INT 22
15526: PUSH
15527: LD_VAR 0 7
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: PUSH
15536: LD_INT 30
15538: PUSH
15539: LD_INT 3
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: PUSH
15546: LD_INT 50
15548: PUSH
15549: EMPTY
15550: LIST
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: LIST
15556: PPUSH
15557: CALL_OW 70
15561: ST_TO_ADDR
// if fac then
15562: LD_VAR 0 6
15566: IFFALSE 15588
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
15568: LD_VAR 0 1
15572: PPUSH
15573: LD_VAR 0 6
15577: PUSH
15578: LD_INT 1
15580: ARRAY
15581: PPUSH
15582: CALL_OW 180
// exit ;
15586: GO 15702
// end ; arm := FilterUnitsInArea ( legBaseArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
15588: LD_ADDR_VAR 0 5
15592: PUSH
15593: LD_INT 2
15595: PPUSH
15596: LD_INT 22
15598: PUSH
15599: LD_VAR 0 7
15603: PUSH
15604: EMPTY
15605: LIST
15606: LIST
15607: PUSH
15608: LD_INT 2
15610: PUSH
15611: LD_INT 30
15613: PUSH
15614: LD_INT 4
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: PUSH
15621: LD_INT 30
15623: PUSH
15624: LD_INT 5
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: PUSH
15631: EMPTY
15632: LIST
15633: LIST
15634: LIST
15635: PUSH
15636: LD_INT 3
15638: PUSH
15639: LD_INT 62
15641: PUSH
15642: EMPTY
15643: LIST
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: PUSH
15649: LD_INT 50
15651: PUSH
15652: EMPTY
15653: LIST
15654: PUSH
15655: EMPTY
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: PPUSH
15661: CALL_OW 70
15665: ST_TO_ADDR
// if arm then
15666: LD_VAR 0 5
15670: IFFALSE 15702
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
15672: LD_VAR 0 1
15676: PPUSH
15677: LD_VAR 0 5
15681: PUSH
15682: LD_INT 1
15684: ARRAY
15685: PPUSH
15686: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
15690: LD_VAR 0 1
15694: PPUSH
15695: LD_INT 1
15697: PPUSH
15698: CALL_OW 183
// end ; end ; end ;
15702: PPOPN 7
15704: END
// on BuildingComplete ( b ) do var side , type ;
15705: LD_INT 0
15707: PPUSH
15708: PPUSH
// begin side := GetSide ( b ) ;
15709: LD_ADDR_VAR 0 2
15713: PUSH
15714: LD_VAR 0 1
15718: PPUSH
15719: CALL_OW 255
15723: ST_TO_ADDR
// type := GetBType ( b ) ;
15724: LD_ADDR_VAR 0 3
15728: PUSH
15729: LD_VAR 0 1
15733: PPUSH
15734: CALL_OW 266
15738: ST_TO_ADDR
// if side = 1 then
15739: LD_VAR 0 2
15743: PUSH
15744: LD_INT 1
15746: EQUAL
15747: IFFALSE 15797
// begin amBuildings := Delete ( amBuildings , 1 ) ;
15749: LD_ADDR_EXP 28
15753: PUSH
15754: LD_EXP 28
15758: PPUSH
15759: LD_INT 1
15761: PPUSH
15762: CALL_OW 3
15766: ST_TO_ADDR
// if type in [ b_depot , b_armoury , b_workshop ] then
15767: LD_VAR 0 3
15771: PUSH
15772: LD_INT 0
15774: PUSH
15775: LD_INT 4
15777: PUSH
15778: LD_INT 2
15780: PUSH
15781: EMPTY
15782: LIST
15783: LIST
15784: LIST
15785: IN
15786: IFFALSE 15797
// ComUpgrade ( b ) ;
15788: LD_VAR 0 1
15792: PPUSH
15793: CALL_OW 146
// end ; end ;
15797: PPOPN 3
15799: END
// on ResearchComplete ( tech , lab ) do var side ;
15800: LD_INT 0
15802: PPUSH
// begin side := GetSide ( lab ) ;
15803: LD_ADDR_VAR 0 3
15807: PUSH
15808: LD_VAR 0 2
15812: PPUSH
15813: CALL_OW 255
15817: ST_TO_ADDR
// if side = 1 then
15818: LD_VAR 0 3
15822: PUSH
15823: LD_INT 1
15825: EQUAL
15826: IFFALSE 15844
// amTech := amTech diff tech ;
15828: LD_ADDR_EXP 25
15832: PUSH
15833: LD_EXP 25
15837: PUSH
15838: LD_VAR 0 1
15842: DIFF
15843: ST_TO_ADDR
// end ;
15844: PPOPN 3
15846: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
15847: LD_VAR 0 1
15851: PPUSH
15852: CALL 74296 0 1
// end ;
15856: PPOPN 1
15858: END
// on SailEvent ( event ) do begin case event of end ;
15859: LD_VAR 0 1
15863: PUSH
15864: POP
// end ;
15865: PPOPN 1
15867: END
// on Contact ( s1 , s2 ) do begin if not gameActive then
15868: LD_EXP 19
15872: NOT
15873: IFFALSE 15877
// exit ;
15875: GO 15975
// if not spotByAmerican and s1 in [ 2 , 1 ] and s2 in [ 1 , 2 ] then
15877: LD_EXP 8
15881: NOT
15882: PUSH
15883: LD_VAR 0 1
15887: PUSH
15888: LD_INT 2
15890: PUSH
15891: LD_INT 1
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: IN
15898: AND
15899: PUSH
15900: LD_VAR 0 2
15904: PUSH
15905: LD_INT 1
15907: PUSH
15908: LD_INT 2
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: IN
15915: AND
15916: IFFALSE 15926
// spotByAmerican := true ;
15918: LD_ADDR_EXP 8
15922: PUSH
15923: LD_INT 1
15925: ST_TO_ADDR
// if not spotByLegion and s1 in [ 2 , 8 ] and s2 in [ 8 , 2 ] then
15926: LD_EXP 9
15930: NOT
15931: PUSH
15932: LD_VAR 0 1
15936: PUSH
15937: LD_INT 2
15939: PUSH
15940: LD_INT 8
15942: PUSH
15943: EMPTY
15944: LIST
15945: LIST
15946: IN
15947: AND
15948: PUSH
15949: LD_VAR 0 2
15953: PUSH
15954: LD_INT 8
15956: PUSH
15957: LD_INT 2
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: IN
15964: AND
15965: IFFALSE 15975
// spotByLegion := true ;
15967: LD_ADDR_EXP 9
15971: PUSH
15972: LD_INT 1
15974: ST_TO_ADDR
// end ; end_of_file
15975: PPOPN 2
15977: END
// every 1 1$05 + 0 0$20 trigger spotArabianBase do var i , tmp ;
15978: LD_EXP 7
15982: IFFALSE 16089
15984: GO 15986
15986: DISABLE
15987: LD_INT 0
15989: PPUSH
15990: PPUSH
// begin enable ;
15991: ENABLE
// wait ( rand ( 0 0$1 , 0 0$11 ) ) ;
15992: LD_INT 35
15994: PPUSH
15995: LD_INT 385
15997: PPUSH
15998: CALL_OW 12
16002: PPUSH
16003: CALL_OW 67
// tmp := [ cratesNorthArea , cratesWestArea ] ;
16007: LD_ADDR_VAR 0 2
16011: PUSH
16012: LD_INT 16
16014: PUSH
16015: LD_INT 17
16017: PUSH
16018: EMPTY
16019: LIST
16020: LIST
16021: ST_TO_ADDR
// i := tmp [ rand ( 1 , Count ( tmp ) ) ] ;
16022: LD_ADDR_VAR 0 1
16026: PUSH
16027: LD_VAR 0 2
16031: PUSH
16032: LD_INT 1
16034: PPUSH
16035: LD_VAR 0 2
16039: PPUSH
16040: CALL 18359 0 1
16044: PPUSH
16045: CALL_OW 12
16049: ARRAY
16050: ST_TO_ADDR
// if GetListOfCratesInArea ( i ) < 8 then
16051: LD_VAR 0 1
16055: PPUSH
16056: CALL_OW 435
16060: PUSH
16061: LD_INT 8
16063: LESS
16064: IFFALSE 16089
// CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
16066: LD_INT 1
16068: PPUSH
16069: LD_INT 5
16071: PPUSH
16072: CALL_OW 12
16076: PPUSH
16077: LD_VAR 0 1
16081: PPUSH
16082: LD_INT 1
16084: PPUSH
16085: CALL_OW 55
// end ;
16089: PPOPN 2
16091: END
// every 0 0$20 trigger tick < [ 7 7$00 , 6 6$00 , 5 5$00 , 4 4$30 ] [ Difficulty ] and spotArabianBase do
16092: LD_OWVAR 1
16096: PUSH
16097: LD_INT 14700
16099: PUSH
16100: LD_INT 12600
16102: PUSH
16103: LD_INT 10500
16105: PUSH
16106: LD_INT 9450
16108: PUSH
16109: EMPTY
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: PUSH
16115: LD_OWVAR 67
16119: ARRAY
16120: LESS
16121: PUSH
16122: LD_EXP 7
16126: AND
16127: IFFALSE 16160
16129: GO 16131
16131: DISABLE
// begin enable ;
16132: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 218 , 92 , 11 , true ) ;
16133: LD_INT 1
16135: PPUSH
16136: LD_INT 5
16138: PPUSH
16139: CALL_OW 12
16143: PPUSH
16144: LD_INT 218
16146: PPUSH
16147: LD_INT 92
16149: PPUSH
16150: LD_INT 11
16152: PPUSH
16153: LD_INT 1
16155: PPUSH
16156: CALL_OW 56
// end ;
16160: END
// every 0 0$55 trigger IsOk ( amBase ) do
16161: LD_INT 2
16163: PPUSH
16164: CALL_OW 302
16168: IFFALSE 16208
16170: GO 16172
16172: DISABLE
// begin enable ;
16173: ENABLE
// if GetListOfCratesInArea ( amCratesArea ) < 3 then
16174: LD_INT 13
16176: PPUSH
16177: CALL_OW 435
16181: PUSH
16182: LD_INT 3
16184: LESS
16185: IFFALSE 16208
// CreateCratesArea ( rand ( 1 , 5 ) , amCratesArea , true ) ;
16187: LD_INT 1
16189: PPUSH
16190: LD_INT 5
16192: PPUSH
16193: CALL_OW 12
16197: PPUSH
16198: LD_INT 13
16200: PPUSH
16201: LD_INT 1
16203: PPUSH
16204: CALL_OW 55
// end ;
16208: END
// every 1 1$05 trigger IsOk ( legBase ) do
16209: LD_INT 38
16211: PPUSH
16212: CALL_OW 302
16216: IFFALSE 16256
16218: GO 16220
16220: DISABLE
// begin enable ;
16221: ENABLE
// if GetListOfCratesInArea ( legCratesArea ) < 3 then
16222: LD_INT 14
16224: PPUSH
16225: CALL_OW 435
16229: PUSH
16230: LD_INT 3
16232: LESS
16233: IFFALSE 16256
// CreateCratesArea ( rand ( 1 , 5 ) , legCratesArea , true ) ;
16235: LD_INT 1
16237: PPUSH
16238: LD_INT 5
16240: PPUSH
16241: CALL_OW 12
16245: PPUSH
16246: LD_INT 14
16248: PPUSH
16249: LD_INT 1
16251: PPUSH
16252: CALL_OW 55
// end ; end_of_file
16256: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
16257: LD_INT 0
16259: PPUSH
16260: PPUSH
// if exist_mode then
16261: LD_VAR 0 2
16265: IFFALSE 16290
// unit := CreateCharacter ( prefix & ident ) else
16267: LD_ADDR_VAR 0 5
16271: PUSH
16272: LD_VAR 0 3
16276: PUSH
16277: LD_VAR 0 1
16281: STR
16282: PPUSH
16283: CALL_OW 34
16287: ST_TO_ADDR
16288: GO 16305
// unit := NewCharacter ( ident ) ;
16290: LD_ADDR_VAR 0 5
16294: PUSH
16295: LD_VAR 0 1
16299: PPUSH
16300: CALL_OW 25
16304: ST_TO_ADDR
// result := unit ;
16305: LD_ADDR_VAR 0 4
16309: PUSH
16310: LD_VAR 0 5
16314: ST_TO_ADDR
// end ;
16315: LD_VAR 0 4
16319: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
16320: LD_INT 0
16322: PPUSH
16323: PPUSH
// if not side or not nation then
16324: LD_VAR 0 1
16328: NOT
16329: PUSH
16330: LD_VAR 0 2
16334: NOT
16335: OR
16336: IFFALSE 16340
// exit ;
16338: GO 17108
// case nation of nation_american :
16340: LD_VAR 0 2
16344: PUSH
16345: LD_INT 1
16347: DOUBLE
16348: EQUAL
16349: IFTRUE 16353
16351: GO 16567
16353: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
16354: LD_ADDR_VAR 0 4
16358: PUSH
16359: LD_INT 35
16361: PUSH
16362: LD_INT 45
16364: PUSH
16365: LD_INT 46
16367: PUSH
16368: LD_INT 47
16370: PUSH
16371: LD_INT 82
16373: PUSH
16374: LD_INT 83
16376: PUSH
16377: LD_INT 84
16379: PUSH
16380: LD_INT 85
16382: PUSH
16383: LD_INT 86
16385: PUSH
16386: LD_INT 1
16388: PUSH
16389: LD_INT 2
16391: PUSH
16392: LD_INT 6
16394: PUSH
16395: LD_INT 15
16397: PUSH
16398: LD_INT 16
16400: PUSH
16401: LD_INT 7
16403: PUSH
16404: LD_INT 12
16406: PUSH
16407: LD_INT 13
16409: PUSH
16410: LD_INT 10
16412: PUSH
16413: LD_INT 14
16415: PUSH
16416: LD_INT 20
16418: PUSH
16419: LD_INT 21
16421: PUSH
16422: LD_INT 22
16424: PUSH
16425: LD_INT 25
16427: PUSH
16428: LD_INT 32
16430: PUSH
16431: LD_INT 27
16433: PUSH
16434: LD_INT 36
16436: PUSH
16437: LD_INT 69
16439: PUSH
16440: LD_INT 39
16442: PUSH
16443: LD_INT 34
16445: PUSH
16446: LD_INT 40
16448: PUSH
16449: LD_INT 48
16451: PUSH
16452: LD_INT 49
16454: PUSH
16455: LD_INT 50
16457: PUSH
16458: LD_INT 51
16460: PUSH
16461: LD_INT 52
16463: PUSH
16464: LD_INT 53
16466: PUSH
16467: LD_INT 54
16469: PUSH
16470: LD_INT 55
16472: PUSH
16473: LD_INT 56
16475: PUSH
16476: LD_INT 57
16478: PUSH
16479: LD_INT 58
16481: PUSH
16482: LD_INT 59
16484: PUSH
16485: LD_INT 60
16487: PUSH
16488: LD_INT 61
16490: PUSH
16491: LD_INT 62
16493: PUSH
16494: LD_INT 80
16496: PUSH
16497: LD_INT 82
16499: PUSH
16500: LD_INT 83
16502: PUSH
16503: LD_INT 84
16505: PUSH
16506: LD_INT 85
16508: PUSH
16509: LD_INT 86
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: ST_TO_ADDR
16565: GO 17032
16567: LD_INT 2
16569: DOUBLE
16570: EQUAL
16571: IFTRUE 16575
16573: GO 16801
16575: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
16576: LD_ADDR_VAR 0 4
16580: PUSH
16581: LD_INT 35
16583: PUSH
16584: LD_INT 45
16586: PUSH
16587: LD_INT 46
16589: PUSH
16590: LD_INT 47
16592: PUSH
16593: LD_INT 82
16595: PUSH
16596: LD_INT 83
16598: PUSH
16599: LD_INT 84
16601: PUSH
16602: LD_INT 85
16604: PUSH
16605: LD_INT 87
16607: PUSH
16608: LD_INT 70
16610: PUSH
16611: LD_INT 1
16613: PUSH
16614: LD_INT 11
16616: PUSH
16617: LD_INT 3
16619: PUSH
16620: LD_INT 4
16622: PUSH
16623: LD_INT 5
16625: PUSH
16626: LD_INT 6
16628: PUSH
16629: LD_INT 15
16631: PUSH
16632: LD_INT 18
16634: PUSH
16635: LD_INT 7
16637: PUSH
16638: LD_INT 17
16640: PUSH
16641: LD_INT 8
16643: PUSH
16644: LD_INT 20
16646: PUSH
16647: LD_INT 21
16649: PUSH
16650: LD_INT 22
16652: PUSH
16653: LD_INT 72
16655: PUSH
16656: LD_INT 26
16658: PUSH
16659: LD_INT 69
16661: PUSH
16662: LD_INT 39
16664: PUSH
16665: LD_INT 40
16667: PUSH
16668: LD_INT 41
16670: PUSH
16671: LD_INT 42
16673: PUSH
16674: LD_INT 43
16676: PUSH
16677: LD_INT 48
16679: PUSH
16680: LD_INT 49
16682: PUSH
16683: LD_INT 50
16685: PUSH
16686: LD_INT 51
16688: PUSH
16689: LD_INT 52
16691: PUSH
16692: LD_INT 53
16694: PUSH
16695: LD_INT 54
16697: PUSH
16698: LD_INT 55
16700: PUSH
16701: LD_INT 56
16703: PUSH
16704: LD_INT 60
16706: PUSH
16707: LD_INT 61
16709: PUSH
16710: LD_INT 62
16712: PUSH
16713: LD_INT 66
16715: PUSH
16716: LD_INT 67
16718: PUSH
16719: LD_INT 68
16721: PUSH
16722: LD_INT 81
16724: PUSH
16725: LD_INT 82
16727: PUSH
16728: LD_INT 83
16730: PUSH
16731: LD_INT 84
16733: PUSH
16734: LD_INT 85
16736: PUSH
16737: LD_INT 87
16739: PUSH
16740: LD_INT 88
16742: PUSH
16743: EMPTY
16744: LIST
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: LIST
16754: LIST
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: LIST
16765: LIST
16766: LIST
16767: LIST
16768: LIST
16769: LIST
16770: LIST
16771: LIST
16772: LIST
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: ST_TO_ADDR
16799: GO 17032
16801: LD_INT 3
16803: DOUBLE
16804: EQUAL
16805: IFTRUE 16809
16807: GO 17031
16809: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
16810: LD_ADDR_VAR 0 4
16814: PUSH
16815: LD_INT 46
16817: PUSH
16818: LD_INT 47
16820: PUSH
16821: LD_INT 1
16823: PUSH
16824: LD_INT 2
16826: PUSH
16827: LD_INT 82
16829: PUSH
16830: LD_INT 83
16832: PUSH
16833: LD_INT 84
16835: PUSH
16836: LD_INT 85
16838: PUSH
16839: LD_INT 86
16841: PUSH
16842: LD_INT 11
16844: PUSH
16845: LD_INT 9
16847: PUSH
16848: LD_INT 20
16850: PUSH
16851: LD_INT 19
16853: PUSH
16854: LD_INT 21
16856: PUSH
16857: LD_INT 24
16859: PUSH
16860: LD_INT 22
16862: PUSH
16863: LD_INT 25
16865: PUSH
16866: LD_INT 28
16868: PUSH
16869: LD_INT 29
16871: PUSH
16872: LD_INT 30
16874: PUSH
16875: LD_INT 31
16877: PUSH
16878: LD_INT 37
16880: PUSH
16881: LD_INT 38
16883: PUSH
16884: LD_INT 32
16886: PUSH
16887: LD_INT 27
16889: PUSH
16890: LD_INT 33
16892: PUSH
16893: LD_INT 69
16895: PUSH
16896: LD_INT 39
16898: PUSH
16899: LD_INT 34
16901: PUSH
16902: LD_INT 40
16904: PUSH
16905: LD_INT 71
16907: PUSH
16908: LD_INT 23
16910: PUSH
16911: LD_INT 44
16913: PUSH
16914: LD_INT 48
16916: PUSH
16917: LD_INT 49
16919: PUSH
16920: LD_INT 50
16922: PUSH
16923: LD_INT 51
16925: PUSH
16926: LD_INT 52
16928: PUSH
16929: LD_INT 53
16931: PUSH
16932: LD_INT 54
16934: PUSH
16935: LD_INT 55
16937: PUSH
16938: LD_INT 56
16940: PUSH
16941: LD_INT 57
16943: PUSH
16944: LD_INT 58
16946: PUSH
16947: LD_INT 59
16949: PUSH
16950: LD_INT 63
16952: PUSH
16953: LD_INT 64
16955: PUSH
16956: LD_INT 65
16958: PUSH
16959: LD_INT 82
16961: PUSH
16962: LD_INT 83
16964: PUSH
16965: LD_INT 84
16967: PUSH
16968: LD_INT 85
16970: PUSH
16971: LD_INT 86
16973: PUSH
16974: EMPTY
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: LIST
17003: LIST
17004: LIST
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: ST_TO_ADDR
17029: GO 17032
17031: POP
// if state > - 1 and state < 3 then
17032: LD_VAR 0 3
17036: PUSH
17037: LD_INT 1
17039: NEG
17040: GREATER
17041: PUSH
17042: LD_VAR 0 3
17046: PUSH
17047: LD_INT 3
17049: LESS
17050: AND
17051: IFFALSE 17108
// for i in result do
17053: LD_ADDR_VAR 0 5
17057: PUSH
17058: LD_VAR 0 4
17062: PUSH
17063: FOR_IN
17064: IFFALSE 17106
// if GetTech ( i , side ) <> state then
17066: LD_VAR 0 5
17070: PPUSH
17071: LD_VAR 0 1
17075: PPUSH
17076: CALL_OW 321
17080: PUSH
17081: LD_VAR 0 3
17085: NONEQUAL
17086: IFFALSE 17104
// result := result diff i ;
17088: LD_ADDR_VAR 0 4
17092: PUSH
17093: LD_VAR 0 4
17097: PUSH
17098: LD_VAR 0 5
17102: DIFF
17103: ST_TO_ADDR
17104: GO 17063
17106: POP
17107: POP
// end ;
17108: LD_VAR 0 4
17112: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
17113: LD_INT 0
17115: PPUSH
17116: PPUSH
17117: PPUSH
// result := true ;
17118: LD_ADDR_VAR 0 3
17122: PUSH
17123: LD_INT 1
17125: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
17126: LD_ADDR_VAR 0 5
17130: PUSH
17131: LD_VAR 0 2
17135: PPUSH
17136: CALL_OW 480
17140: ST_TO_ADDR
// if not tmp then
17141: LD_VAR 0 5
17145: NOT
17146: IFFALSE 17150
// exit ;
17148: GO 17199
// for i in tmp do
17150: LD_ADDR_VAR 0 4
17154: PUSH
17155: LD_VAR 0 5
17159: PUSH
17160: FOR_IN
17161: IFFALSE 17197
// if GetTech ( i , side ) <> state_researched then
17163: LD_VAR 0 4
17167: PPUSH
17168: LD_VAR 0 1
17172: PPUSH
17173: CALL_OW 321
17177: PUSH
17178: LD_INT 2
17180: NONEQUAL
17181: IFFALSE 17195
// begin result := false ;
17183: LD_ADDR_VAR 0 3
17187: PUSH
17188: LD_INT 0
17190: ST_TO_ADDR
// exit ;
17191: POP
17192: POP
17193: GO 17199
// end ;
17195: GO 17160
17197: POP
17198: POP
// end ;
17199: LD_VAR 0 3
17203: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
17204: LD_INT 0
17206: PPUSH
17207: PPUSH
17208: PPUSH
17209: PPUSH
17210: PPUSH
17211: PPUSH
17212: PPUSH
17213: PPUSH
17214: PPUSH
17215: PPUSH
17216: PPUSH
17217: PPUSH
17218: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
17219: LD_VAR 0 1
17223: NOT
17224: PUSH
17225: LD_VAR 0 1
17229: PPUSH
17230: CALL_OW 257
17234: PUSH
17235: LD_INT 9
17237: NONEQUAL
17238: OR
17239: IFFALSE 17243
// exit ;
17241: GO 17816
// side := GetSide ( unit ) ;
17243: LD_ADDR_VAR 0 9
17247: PUSH
17248: LD_VAR 0 1
17252: PPUSH
17253: CALL_OW 255
17257: ST_TO_ADDR
// tech_space := tech_spacanom ;
17258: LD_ADDR_VAR 0 12
17262: PUSH
17263: LD_INT 29
17265: ST_TO_ADDR
// tech_time := tech_taurad ;
17266: LD_ADDR_VAR 0 13
17270: PUSH
17271: LD_INT 28
17273: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
17274: LD_ADDR_VAR 0 11
17278: PUSH
17279: LD_VAR 0 1
17283: PPUSH
17284: CALL_OW 310
17288: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
17289: LD_VAR 0 11
17293: PPUSH
17294: CALL_OW 247
17298: PUSH
17299: LD_INT 2
17301: EQUAL
17302: IFFALSE 17306
// exit ;
17304: GO 17816
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17306: LD_ADDR_VAR 0 8
17310: PUSH
17311: LD_INT 81
17313: PUSH
17314: LD_VAR 0 9
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: PUSH
17323: LD_INT 3
17325: PUSH
17326: LD_INT 21
17328: PUSH
17329: LD_INT 3
17331: PUSH
17332: EMPTY
17333: LIST
17334: LIST
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: PPUSH
17344: CALL_OW 69
17348: ST_TO_ADDR
// if not tmp then
17349: LD_VAR 0 8
17353: NOT
17354: IFFALSE 17358
// exit ;
17356: GO 17816
// if in_unit then
17358: LD_VAR 0 11
17362: IFFALSE 17386
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
17364: LD_ADDR_VAR 0 10
17368: PUSH
17369: LD_VAR 0 8
17373: PPUSH
17374: LD_VAR 0 11
17378: PPUSH
17379: CALL_OW 74
17383: ST_TO_ADDR
17384: GO 17406
// enemy := NearestUnitToUnit ( tmp , unit ) ;
17386: LD_ADDR_VAR 0 10
17390: PUSH
17391: LD_VAR 0 8
17395: PPUSH
17396: LD_VAR 0 1
17400: PPUSH
17401: CALL_OW 74
17405: ST_TO_ADDR
// if not enemy then
17406: LD_VAR 0 10
17410: NOT
17411: IFFALSE 17415
// exit ;
17413: GO 17816
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
17415: LD_VAR 0 11
17419: PUSH
17420: LD_VAR 0 11
17424: PPUSH
17425: LD_VAR 0 10
17429: PPUSH
17430: CALL_OW 296
17434: PUSH
17435: LD_INT 13
17437: GREATER
17438: AND
17439: PUSH
17440: LD_VAR 0 1
17444: PPUSH
17445: LD_VAR 0 10
17449: PPUSH
17450: CALL_OW 296
17454: PUSH
17455: LD_INT 12
17457: GREATER
17458: OR
17459: IFFALSE 17463
// exit ;
17461: GO 17816
// missile := [ 1 ] ;
17463: LD_ADDR_VAR 0 14
17467: PUSH
17468: LD_INT 1
17470: PUSH
17471: EMPTY
17472: LIST
17473: ST_TO_ADDR
// if Researched ( side , tech_space ) then
17474: LD_VAR 0 9
17478: PPUSH
17479: LD_VAR 0 12
17483: PPUSH
17484: CALL_OW 325
17488: IFFALSE 17517
// missile := Replace ( missile , missile + 1 , 2 ) ;
17490: LD_ADDR_VAR 0 14
17494: PUSH
17495: LD_VAR 0 14
17499: PPUSH
17500: LD_VAR 0 14
17504: PUSH
17505: LD_INT 1
17507: PLUS
17508: PPUSH
17509: LD_INT 2
17511: PPUSH
17512: CALL_OW 1
17516: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
17517: LD_VAR 0 9
17521: PPUSH
17522: LD_VAR 0 13
17526: PPUSH
17527: CALL_OW 325
17531: PUSH
17532: LD_VAR 0 10
17536: PPUSH
17537: CALL_OW 255
17541: PPUSH
17542: LD_VAR 0 13
17546: PPUSH
17547: CALL_OW 325
17551: NOT
17552: AND
17553: IFFALSE 17582
// missile := Replace ( missile , missile + 1 , 3 ) ;
17555: LD_ADDR_VAR 0 14
17559: PUSH
17560: LD_VAR 0 14
17564: PPUSH
17565: LD_VAR 0 14
17569: PUSH
17570: LD_INT 1
17572: PLUS
17573: PPUSH
17574: LD_INT 3
17576: PPUSH
17577: CALL_OW 1
17581: ST_TO_ADDR
// if missile < 2 then
17582: LD_VAR 0 14
17586: PUSH
17587: LD_INT 2
17589: LESS
17590: IFFALSE 17594
// exit ;
17592: GO 17816
// x := GetX ( enemy ) ;
17594: LD_ADDR_VAR 0 4
17598: PUSH
17599: LD_VAR 0 10
17603: PPUSH
17604: CALL_OW 250
17608: ST_TO_ADDR
// y := GetY ( enemy ) ;
17609: LD_ADDR_VAR 0 5
17613: PUSH
17614: LD_VAR 0 10
17618: PPUSH
17619: CALL_OW 251
17623: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
17624: LD_ADDR_VAR 0 6
17628: PUSH
17629: LD_VAR 0 4
17633: PUSH
17634: LD_INT 1
17636: NEG
17637: PPUSH
17638: LD_INT 1
17640: PPUSH
17641: CALL_OW 12
17645: PLUS
17646: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
17647: LD_ADDR_VAR 0 7
17651: PUSH
17652: LD_VAR 0 5
17656: PUSH
17657: LD_INT 1
17659: NEG
17660: PPUSH
17661: LD_INT 1
17663: PPUSH
17664: CALL_OW 12
17668: PLUS
17669: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17670: LD_VAR 0 6
17674: PPUSH
17675: LD_VAR 0 7
17679: PPUSH
17680: CALL_OW 488
17684: NOT
17685: IFFALSE 17707
// begin _x := x ;
17687: LD_ADDR_VAR 0 6
17691: PUSH
17692: LD_VAR 0 4
17696: ST_TO_ADDR
// _y := y ;
17697: LD_ADDR_VAR 0 7
17701: PUSH
17702: LD_VAR 0 5
17706: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
17707: LD_ADDR_VAR 0 3
17711: PUSH
17712: LD_INT 1
17714: PPUSH
17715: LD_VAR 0 14
17719: PPUSH
17720: CALL_OW 12
17724: ST_TO_ADDR
// case i of 1 :
17725: LD_VAR 0 3
17729: PUSH
17730: LD_INT 1
17732: DOUBLE
17733: EQUAL
17734: IFTRUE 17738
17736: GO 17755
17738: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
17739: LD_VAR 0 1
17743: PPUSH
17744: LD_VAR 0 10
17748: PPUSH
17749: CALL_OW 115
17753: GO 17816
17755: LD_INT 2
17757: DOUBLE
17758: EQUAL
17759: IFTRUE 17763
17761: GO 17785
17763: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
17764: LD_VAR 0 1
17768: PPUSH
17769: LD_VAR 0 6
17773: PPUSH
17774: LD_VAR 0 7
17778: PPUSH
17779: CALL_OW 153
17783: GO 17816
17785: LD_INT 3
17787: DOUBLE
17788: EQUAL
17789: IFTRUE 17793
17791: GO 17815
17793: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
17794: LD_VAR 0 1
17798: PPUSH
17799: LD_VAR 0 6
17803: PPUSH
17804: LD_VAR 0 7
17808: PPUSH
17809: CALL_OW 154
17813: GO 17816
17815: POP
// end ;
17816: LD_VAR 0 2
17820: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
17821: LD_INT 0
17823: PPUSH
17824: PPUSH
17825: PPUSH
17826: PPUSH
17827: PPUSH
17828: PPUSH
// if not unit or not building then
17829: LD_VAR 0 1
17833: NOT
17834: PUSH
17835: LD_VAR 0 2
17839: NOT
17840: OR
17841: IFFALSE 17845
// exit ;
17843: GO 18003
// x := GetX ( building ) ;
17845: LD_ADDR_VAR 0 5
17849: PUSH
17850: LD_VAR 0 2
17854: PPUSH
17855: CALL_OW 250
17859: ST_TO_ADDR
// y := GetY ( building ) ;
17860: LD_ADDR_VAR 0 6
17864: PUSH
17865: LD_VAR 0 2
17869: PPUSH
17870: CALL_OW 251
17874: ST_TO_ADDR
// for i = 0 to 5 do
17875: LD_ADDR_VAR 0 4
17879: PUSH
17880: DOUBLE
17881: LD_INT 0
17883: DEC
17884: ST_TO_ADDR
17885: LD_INT 5
17887: PUSH
17888: FOR_TO
17889: IFFALSE 18001
// begin _x := ShiftX ( x , i , 3 ) ;
17891: LD_ADDR_VAR 0 7
17895: PUSH
17896: LD_VAR 0 5
17900: PPUSH
17901: LD_VAR 0 4
17905: PPUSH
17906: LD_INT 3
17908: PPUSH
17909: CALL_OW 272
17913: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
17914: LD_ADDR_VAR 0 8
17918: PUSH
17919: LD_VAR 0 6
17923: PPUSH
17924: LD_VAR 0 4
17928: PPUSH
17929: LD_INT 3
17931: PPUSH
17932: CALL_OW 273
17936: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17937: LD_VAR 0 7
17941: PPUSH
17942: LD_VAR 0 8
17946: PPUSH
17947: CALL_OW 488
17951: NOT
17952: IFFALSE 17956
// continue ;
17954: GO 17888
// if HexInfo ( _x , _y ) = 0 then
17956: LD_VAR 0 7
17960: PPUSH
17961: LD_VAR 0 8
17965: PPUSH
17966: CALL_OW 428
17970: PUSH
17971: LD_INT 0
17973: EQUAL
17974: IFFALSE 17999
// begin ComMoveXY ( unit , _x , _y ) ;
17976: LD_VAR 0 1
17980: PPUSH
17981: LD_VAR 0 7
17985: PPUSH
17986: LD_VAR 0 8
17990: PPUSH
17991: CALL_OW 111
// exit ;
17995: POP
17996: POP
17997: GO 18003
// end ; end ;
17999: GO 17888
18001: POP
18002: POP
// end ;
18003: LD_VAR 0 3
18007: RET
// export function ScanBase ( side , base_area ) ; begin
18008: LD_INT 0
18010: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
18011: LD_ADDR_VAR 0 3
18015: PUSH
18016: LD_VAR 0 2
18020: PPUSH
18021: LD_INT 81
18023: PUSH
18024: LD_VAR 0 1
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: PPUSH
18033: CALL_OW 70
18037: ST_TO_ADDR
// end ;
18038: LD_VAR 0 3
18042: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
18043: LD_INT 0
18045: PPUSH
18046: PPUSH
18047: PPUSH
18048: PPUSH
// result := false ;
18049: LD_ADDR_VAR 0 2
18053: PUSH
18054: LD_INT 0
18056: ST_TO_ADDR
// side := GetSide ( unit ) ;
18057: LD_ADDR_VAR 0 3
18061: PUSH
18062: LD_VAR 0 1
18066: PPUSH
18067: CALL_OW 255
18071: ST_TO_ADDR
// nat := GetNation ( unit ) ;
18072: LD_ADDR_VAR 0 4
18076: PUSH
18077: LD_VAR 0 1
18081: PPUSH
18082: CALL_OW 248
18086: ST_TO_ADDR
// case nat of 1 :
18087: LD_VAR 0 4
18091: PUSH
18092: LD_INT 1
18094: DOUBLE
18095: EQUAL
18096: IFTRUE 18100
18098: GO 18111
18100: POP
// tech := tech_lassight ; 2 :
18101: LD_ADDR_VAR 0 5
18105: PUSH
18106: LD_INT 12
18108: ST_TO_ADDR
18109: GO 18150
18111: LD_INT 2
18113: DOUBLE
18114: EQUAL
18115: IFTRUE 18119
18117: GO 18130
18119: POP
// tech := tech_mortar ; 3 :
18120: LD_ADDR_VAR 0 5
18124: PUSH
18125: LD_INT 41
18127: ST_TO_ADDR
18128: GO 18150
18130: LD_INT 3
18132: DOUBLE
18133: EQUAL
18134: IFTRUE 18138
18136: GO 18149
18138: POP
// tech := tech_bazooka ; end ;
18139: LD_ADDR_VAR 0 5
18143: PUSH
18144: LD_INT 44
18146: ST_TO_ADDR
18147: GO 18150
18149: POP
// if Researched ( side , tech ) then
18150: LD_VAR 0 3
18154: PPUSH
18155: LD_VAR 0 5
18159: PPUSH
18160: CALL_OW 325
18164: IFFALSE 18191
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
18166: LD_ADDR_VAR 0 2
18170: PUSH
18171: LD_INT 5
18173: PUSH
18174: LD_INT 8
18176: PUSH
18177: LD_INT 9
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: LIST
18184: PUSH
18185: LD_VAR 0 4
18189: ARRAY
18190: ST_TO_ADDR
// end ;
18191: LD_VAR 0 2
18195: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
18196: LD_INT 0
18198: PPUSH
18199: PPUSH
18200: PPUSH
// if not mines then
18201: LD_VAR 0 2
18205: NOT
18206: IFFALSE 18210
// exit ;
18208: GO 18354
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18210: LD_ADDR_VAR 0 5
18214: PUSH
18215: LD_INT 81
18217: PUSH
18218: LD_VAR 0 1
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 3
18229: PUSH
18230: LD_INT 21
18232: PUSH
18233: LD_INT 3
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: PPUSH
18248: CALL_OW 69
18252: ST_TO_ADDR
// for i in mines do
18253: LD_ADDR_VAR 0 4
18257: PUSH
18258: LD_VAR 0 2
18262: PUSH
18263: FOR_IN
18264: IFFALSE 18352
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
18266: LD_VAR 0 4
18270: PUSH
18271: LD_INT 1
18273: ARRAY
18274: PPUSH
18275: LD_VAR 0 4
18279: PUSH
18280: LD_INT 2
18282: ARRAY
18283: PPUSH
18284: CALL_OW 458
18288: NOT
18289: IFFALSE 18293
// continue ;
18291: GO 18263
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
18293: LD_VAR 0 4
18297: PUSH
18298: LD_INT 1
18300: ARRAY
18301: PPUSH
18302: LD_VAR 0 4
18306: PUSH
18307: LD_INT 2
18309: ARRAY
18310: PPUSH
18311: CALL_OW 428
18315: PUSH
18316: LD_VAR 0 5
18320: IN
18321: IFFALSE 18350
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
18323: LD_VAR 0 4
18327: PUSH
18328: LD_INT 1
18330: ARRAY
18331: PPUSH
18332: LD_VAR 0 4
18336: PUSH
18337: LD_INT 2
18339: ARRAY
18340: PPUSH
18341: LD_VAR 0 1
18345: PPUSH
18346: CALL_OW 456
// end ;
18350: GO 18263
18352: POP
18353: POP
// end ;
18354: LD_VAR 0 3
18358: RET
// export function Count ( array ) ; begin
18359: LD_INT 0
18361: PPUSH
// result := array + 0 ;
18362: LD_ADDR_VAR 0 2
18366: PUSH
18367: LD_VAR 0 1
18371: PUSH
18372: LD_INT 0
18374: PLUS
18375: ST_TO_ADDR
// end ;
18376: LD_VAR 0 2
18380: RET
// export function IsEmpty ( building ) ; begin
18381: LD_INT 0
18383: PPUSH
// if not building then
18384: LD_VAR 0 1
18388: NOT
18389: IFFALSE 18393
// exit ;
18391: GO 18436
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
18393: LD_ADDR_VAR 0 2
18397: PUSH
18398: LD_VAR 0 1
18402: PUSH
18403: LD_INT 22
18405: PUSH
18406: LD_VAR 0 1
18410: PPUSH
18411: CALL_OW 255
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: PUSH
18420: LD_INT 58
18422: PUSH
18423: EMPTY
18424: LIST
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: PPUSH
18430: CALL_OW 69
18434: IN
18435: ST_TO_ADDR
// end ;
18436: LD_VAR 0 2
18440: RET
// export function IsNotFull ( building ) ; var places ; begin
18441: LD_INT 0
18443: PPUSH
18444: PPUSH
// if not building then
18445: LD_VAR 0 1
18449: NOT
18450: IFFALSE 18454
// exit ;
18452: GO 18482
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
18454: LD_ADDR_VAR 0 2
18458: PUSH
18459: LD_VAR 0 1
18463: PPUSH
18464: LD_INT 3
18466: PUSH
18467: LD_INT 62
18469: PUSH
18470: EMPTY
18471: LIST
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: PPUSH
18477: CALL_OW 72
18481: ST_TO_ADDR
// end ;
18482: LD_VAR 0 2
18486: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
18487: LD_INT 0
18489: PPUSH
18490: PPUSH
18491: PPUSH
18492: PPUSH
// tmp := [ ] ;
18493: LD_ADDR_VAR 0 3
18497: PUSH
18498: EMPTY
18499: ST_TO_ADDR
// list := [ ] ;
18500: LD_ADDR_VAR 0 5
18504: PUSH
18505: EMPTY
18506: ST_TO_ADDR
// for i = 16 to 25 do
18507: LD_ADDR_VAR 0 4
18511: PUSH
18512: DOUBLE
18513: LD_INT 16
18515: DEC
18516: ST_TO_ADDR
18517: LD_INT 25
18519: PUSH
18520: FOR_TO
18521: IFFALSE 18594
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
18523: LD_ADDR_VAR 0 3
18527: PUSH
18528: LD_VAR 0 3
18532: PUSH
18533: LD_INT 22
18535: PUSH
18536: LD_VAR 0 1
18540: PPUSH
18541: CALL_OW 255
18545: PUSH
18546: EMPTY
18547: LIST
18548: LIST
18549: PUSH
18550: LD_INT 91
18552: PUSH
18553: LD_VAR 0 1
18557: PUSH
18558: LD_INT 6
18560: PUSH
18561: EMPTY
18562: LIST
18563: LIST
18564: LIST
18565: PUSH
18566: LD_INT 30
18568: PUSH
18569: LD_VAR 0 4
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: LIST
18582: PUSH
18583: EMPTY
18584: LIST
18585: PPUSH
18586: CALL_OW 69
18590: ADD
18591: ST_TO_ADDR
18592: GO 18520
18594: POP
18595: POP
// for i = 1 to tmp do
18596: LD_ADDR_VAR 0 4
18600: PUSH
18601: DOUBLE
18602: LD_INT 1
18604: DEC
18605: ST_TO_ADDR
18606: LD_VAR 0 3
18610: PUSH
18611: FOR_TO
18612: IFFALSE 18700
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
18614: LD_ADDR_VAR 0 5
18618: PUSH
18619: LD_VAR 0 5
18623: PUSH
18624: LD_VAR 0 3
18628: PUSH
18629: LD_VAR 0 4
18633: ARRAY
18634: PPUSH
18635: CALL_OW 266
18639: PUSH
18640: LD_VAR 0 3
18644: PUSH
18645: LD_VAR 0 4
18649: ARRAY
18650: PPUSH
18651: CALL_OW 250
18655: PUSH
18656: LD_VAR 0 3
18660: PUSH
18661: LD_VAR 0 4
18665: ARRAY
18666: PPUSH
18667: CALL_OW 251
18671: PUSH
18672: LD_VAR 0 3
18676: PUSH
18677: LD_VAR 0 4
18681: ARRAY
18682: PPUSH
18683: CALL_OW 254
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: PUSH
18694: EMPTY
18695: LIST
18696: ADD
18697: ST_TO_ADDR
18698: GO 18611
18700: POP
18701: POP
// result := list ;
18702: LD_ADDR_VAR 0 2
18706: PUSH
18707: LD_VAR 0 5
18711: ST_TO_ADDR
// end ;
18712: LD_VAR 0 2
18716: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
18717: LD_INT 0
18719: PPUSH
18720: PPUSH
18721: PPUSH
18722: PPUSH
18723: PPUSH
18724: PPUSH
18725: PPUSH
// if not factory then
18726: LD_VAR 0 1
18730: NOT
18731: IFFALSE 18735
// exit ;
18733: GO 19328
// if control = control_apeman then
18735: LD_VAR 0 4
18739: PUSH
18740: LD_INT 5
18742: EQUAL
18743: IFFALSE 18852
// begin tmp := UnitsInside ( factory ) ;
18745: LD_ADDR_VAR 0 8
18749: PUSH
18750: LD_VAR 0 1
18754: PPUSH
18755: CALL_OW 313
18759: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
18760: LD_VAR 0 8
18764: PPUSH
18765: LD_INT 25
18767: PUSH
18768: LD_INT 12
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: PPUSH
18775: CALL_OW 72
18779: NOT
18780: IFFALSE 18790
// control := control_manual ;
18782: LD_ADDR_VAR 0 4
18786: PUSH
18787: LD_INT 1
18789: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
18790: LD_ADDR_VAR 0 8
18794: PUSH
18795: LD_VAR 0 1
18799: PPUSH
18800: CALL 18487 0 1
18804: ST_TO_ADDR
// if tmp then
18805: LD_VAR 0 8
18809: IFFALSE 18852
// begin for i in tmp do
18811: LD_ADDR_VAR 0 7
18815: PUSH
18816: LD_VAR 0 8
18820: PUSH
18821: FOR_IN
18822: IFFALSE 18850
// if i [ 1 ] = b_ext_radio then
18824: LD_VAR 0 7
18828: PUSH
18829: LD_INT 1
18831: ARRAY
18832: PUSH
18833: LD_INT 22
18835: EQUAL
18836: IFFALSE 18848
// begin control := control_remote ;
18838: LD_ADDR_VAR 0 4
18842: PUSH
18843: LD_INT 2
18845: ST_TO_ADDR
// break ;
18846: GO 18850
// end ;
18848: GO 18821
18850: POP
18851: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18852: LD_VAR 0 1
18856: PPUSH
18857: LD_VAR 0 2
18861: PPUSH
18862: LD_VAR 0 3
18866: PPUSH
18867: LD_VAR 0 4
18871: PPUSH
18872: LD_VAR 0 5
18876: PPUSH
18877: CALL_OW 448
18881: IFFALSE 18916
// begin result := [ chassis , engine , control , weapon ] ;
18883: LD_ADDR_VAR 0 6
18887: PUSH
18888: LD_VAR 0 2
18892: PUSH
18893: LD_VAR 0 3
18897: PUSH
18898: LD_VAR 0 4
18902: PUSH
18903: LD_VAR 0 5
18907: PUSH
18908: EMPTY
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: ST_TO_ADDR
// exit ;
18914: GO 19328
// end ; _chassis := AvailableChassisList ( factory ) ;
18916: LD_ADDR_VAR 0 9
18920: PUSH
18921: LD_VAR 0 1
18925: PPUSH
18926: CALL_OW 475
18930: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
18931: LD_ADDR_VAR 0 11
18935: PUSH
18936: LD_VAR 0 1
18940: PPUSH
18941: CALL_OW 476
18945: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
18946: LD_ADDR_VAR 0 12
18950: PUSH
18951: LD_VAR 0 1
18955: PPUSH
18956: CALL_OW 477
18960: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
18961: LD_ADDR_VAR 0 10
18965: PUSH
18966: LD_VAR 0 1
18970: PPUSH
18971: CALL_OW 478
18975: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
18976: LD_VAR 0 9
18980: NOT
18981: PUSH
18982: LD_VAR 0 11
18986: NOT
18987: OR
18988: PUSH
18989: LD_VAR 0 12
18993: NOT
18994: OR
18995: PUSH
18996: LD_VAR 0 10
19000: NOT
19001: OR
19002: IFFALSE 19037
// begin result := [ chassis , engine , control , weapon ] ;
19004: LD_ADDR_VAR 0 6
19008: PUSH
19009: LD_VAR 0 2
19013: PUSH
19014: LD_VAR 0 3
19018: PUSH
19019: LD_VAR 0 4
19023: PUSH
19024: LD_VAR 0 5
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: ST_TO_ADDR
// exit ;
19035: GO 19328
// end ; if not chassis in _chassis then
19037: LD_VAR 0 2
19041: PUSH
19042: LD_VAR 0 9
19046: IN
19047: NOT
19048: IFFALSE 19074
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
19050: LD_ADDR_VAR 0 2
19054: PUSH
19055: LD_VAR 0 9
19059: PUSH
19060: LD_INT 1
19062: PPUSH
19063: LD_VAR 0 9
19067: PPUSH
19068: CALL_OW 12
19072: ARRAY
19073: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
19074: LD_VAR 0 2
19078: PPUSH
19079: LD_VAR 0 3
19083: PPUSH
19084: CALL 19333 0 2
19088: NOT
19089: IFFALSE 19148
// repeat engine := _engine [ 1 ] ;
19091: LD_ADDR_VAR 0 3
19095: PUSH
19096: LD_VAR 0 11
19100: PUSH
19101: LD_INT 1
19103: ARRAY
19104: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
19105: LD_ADDR_VAR 0 11
19109: PUSH
19110: LD_VAR 0 11
19114: PPUSH
19115: LD_INT 1
19117: PPUSH
19118: CALL_OW 3
19122: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
19123: LD_VAR 0 2
19127: PPUSH
19128: LD_VAR 0 3
19132: PPUSH
19133: CALL 19333 0 2
19137: PUSH
19138: LD_VAR 0 11
19142: PUSH
19143: EMPTY
19144: EQUAL
19145: OR
19146: IFFALSE 19091
// if not control in _control then
19148: LD_VAR 0 4
19152: PUSH
19153: LD_VAR 0 12
19157: IN
19158: NOT
19159: IFFALSE 19185
// control := _control [ rand ( 1 , _control ) ] ;
19161: LD_ADDR_VAR 0 4
19165: PUSH
19166: LD_VAR 0 12
19170: PUSH
19171: LD_INT 1
19173: PPUSH
19174: LD_VAR 0 12
19178: PPUSH
19179: CALL_OW 12
19183: ARRAY
19184: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
19185: LD_VAR 0 2
19189: PPUSH
19190: LD_VAR 0 5
19194: PPUSH
19195: CALL 19553 0 2
19199: NOT
19200: IFFALSE 19259
// repeat weapon := _weapon [ 1 ] ;
19202: LD_ADDR_VAR 0 5
19206: PUSH
19207: LD_VAR 0 10
19211: PUSH
19212: LD_INT 1
19214: ARRAY
19215: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
19216: LD_ADDR_VAR 0 10
19220: PUSH
19221: LD_VAR 0 10
19225: PPUSH
19226: LD_INT 1
19228: PPUSH
19229: CALL_OW 3
19233: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
19234: LD_VAR 0 2
19238: PPUSH
19239: LD_VAR 0 5
19243: PPUSH
19244: CALL 19553 0 2
19248: PUSH
19249: LD_VAR 0 10
19253: PUSH
19254: EMPTY
19255: EQUAL
19256: OR
19257: IFFALSE 19202
// result := [ ] ;
19259: LD_ADDR_VAR 0 6
19263: PUSH
19264: EMPTY
19265: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19266: LD_VAR 0 1
19270: PPUSH
19271: LD_VAR 0 2
19275: PPUSH
19276: LD_VAR 0 3
19280: PPUSH
19281: LD_VAR 0 4
19285: PPUSH
19286: LD_VAR 0 5
19290: PPUSH
19291: CALL_OW 448
19295: IFFALSE 19328
// result := [ chassis , engine , control , weapon ] ;
19297: LD_ADDR_VAR 0 6
19301: PUSH
19302: LD_VAR 0 2
19306: PUSH
19307: LD_VAR 0 3
19311: PUSH
19312: LD_VAR 0 4
19316: PUSH
19317: LD_VAR 0 5
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: ST_TO_ADDR
// end ;
19328: LD_VAR 0 6
19332: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
19333: LD_INT 0
19335: PPUSH
// if not chassis or not engine then
19336: LD_VAR 0 1
19340: NOT
19341: PUSH
19342: LD_VAR 0 2
19346: NOT
19347: OR
19348: IFFALSE 19352
// exit ;
19350: GO 19548
// case engine of engine_solar :
19352: LD_VAR 0 2
19356: PUSH
19357: LD_INT 2
19359: DOUBLE
19360: EQUAL
19361: IFTRUE 19365
19363: GO 19403
19365: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
19366: LD_ADDR_VAR 0 3
19370: PUSH
19371: LD_INT 11
19373: PUSH
19374: LD_INT 12
19376: PUSH
19377: LD_INT 13
19379: PUSH
19380: LD_INT 14
19382: PUSH
19383: LD_INT 1
19385: PUSH
19386: LD_INT 2
19388: PUSH
19389: LD_INT 3
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: ST_TO_ADDR
19401: GO 19532
19403: LD_INT 1
19405: DOUBLE
19406: EQUAL
19407: IFTRUE 19411
19409: GO 19473
19411: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
19412: LD_ADDR_VAR 0 3
19416: PUSH
19417: LD_INT 11
19419: PUSH
19420: LD_INT 12
19422: PUSH
19423: LD_INT 13
19425: PUSH
19426: LD_INT 14
19428: PUSH
19429: LD_INT 1
19431: PUSH
19432: LD_INT 2
19434: PUSH
19435: LD_INT 3
19437: PUSH
19438: LD_INT 4
19440: PUSH
19441: LD_INT 5
19443: PUSH
19444: LD_INT 21
19446: PUSH
19447: LD_INT 23
19449: PUSH
19450: LD_INT 22
19452: PUSH
19453: LD_INT 24
19455: PUSH
19456: EMPTY
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: LIST
19470: ST_TO_ADDR
19471: GO 19532
19473: LD_INT 3
19475: DOUBLE
19476: EQUAL
19477: IFTRUE 19481
19479: GO 19531
19481: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19482: LD_ADDR_VAR 0 3
19486: PUSH
19487: LD_INT 13
19489: PUSH
19490: LD_INT 14
19492: PUSH
19493: LD_INT 2
19495: PUSH
19496: LD_INT 3
19498: PUSH
19499: LD_INT 4
19501: PUSH
19502: LD_INT 5
19504: PUSH
19505: LD_INT 21
19507: PUSH
19508: LD_INT 22
19510: PUSH
19511: LD_INT 23
19513: PUSH
19514: LD_INT 24
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: ST_TO_ADDR
19529: GO 19532
19531: POP
// result := ( chassis in result ) ;
19532: LD_ADDR_VAR 0 3
19536: PUSH
19537: LD_VAR 0 1
19541: PUSH
19542: LD_VAR 0 3
19546: IN
19547: ST_TO_ADDR
// end ;
19548: LD_VAR 0 3
19552: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
19553: LD_INT 0
19555: PPUSH
// if not chassis or not weapon then
19556: LD_VAR 0 1
19560: NOT
19561: PUSH
19562: LD_VAR 0 2
19566: NOT
19567: OR
19568: IFFALSE 19572
// exit ;
19570: GO 20632
// case weapon of us_machine_gun :
19572: LD_VAR 0 2
19576: PUSH
19577: LD_INT 2
19579: DOUBLE
19580: EQUAL
19581: IFTRUE 19585
19583: GO 19615
19585: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
19586: LD_ADDR_VAR 0 3
19590: PUSH
19591: LD_INT 1
19593: PUSH
19594: LD_INT 2
19596: PUSH
19597: LD_INT 3
19599: PUSH
19600: LD_INT 4
19602: PUSH
19603: LD_INT 5
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: ST_TO_ADDR
19613: GO 20616
19615: LD_INT 3
19617: DOUBLE
19618: EQUAL
19619: IFTRUE 19623
19621: GO 19653
19623: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
19624: LD_ADDR_VAR 0 3
19628: PUSH
19629: LD_INT 1
19631: PUSH
19632: LD_INT 2
19634: PUSH
19635: LD_INT 3
19637: PUSH
19638: LD_INT 4
19640: PUSH
19641: LD_INT 5
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: ST_TO_ADDR
19651: GO 20616
19653: LD_INT 11
19655: DOUBLE
19656: EQUAL
19657: IFTRUE 19661
19659: GO 19691
19661: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
19662: LD_ADDR_VAR 0 3
19666: PUSH
19667: LD_INT 1
19669: PUSH
19670: LD_INT 2
19672: PUSH
19673: LD_INT 3
19675: PUSH
19676: LD_INT 4
19678: PUSH
19679: LD_INT 5
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: ST_TO_ADDR
19689: GO 20616
19691: LD_INT 4
19693: DOUBLE
19694: EQUAL
19695: IFTRUE 19699
19697: GO 19725
19699: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
19700: LD_ADDR_VAR 0 3
19704: PUSH
19705: LD_INT 2
19707: PUSH
19708: LD_INT 3
19710: PUSH
19711: LD_INT 4
19713: PUSH
19714: LD_INT 5
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: ST_TO_ADDR
19723: GO 20616
19725: LD_INT 5
19727: DOUBLE
19728: EQUAL
19729: IFTRUE 19733
19731: GO 19759
19733: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
19734: LD_ADDR_VAR 0 3
19738: PUSH
19739: LD_INT 2
19741: PUSH
19742: LD_INT 3
19744: PUSH
19745: LD_INT 4
19747: PUSH
19748: LD_INT 5
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: ST_TO_ADDR
19757: GO 20616
19759: LD_INT 9
19761: DOUBLE
19762: EQUAL
19763: IFTRUE 19767
19765: GO 19793
19767: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
19768: LD_ADDR_VAR 0 3
19772: PUSH
19773: LD_INT 2
19775: PUSH
19776: LD_INT 3
19778: PUSH
19779: LD_INT 4
19781: PUSH
19782: LD_INT 5
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: ST_TO_ADDR
19791: GO 20616
19793: LD_INT 7
19795: DOUBLE
19796: EQUAL
19797: IFTRUE 19801
19799: GO 19827
19801: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
19802: LD_ADDR_VAR 0 3
19806: PUSH
19807: LD_INT 2
19809: PUSH
19810: LD_INT 3
19812: PUSH
19813: LD_INT 4
19815: PUSH
19816: LD_INT 5
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: ST_TO_ADDR
19825: GO 20616
19827: LD_INT 12
19829: DOUBLE
19830: EQUAL
19831: IFTRUE 19835
19833: GO 19861
19835: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
19836: LD_ADDR_VAR 0 3
19840: PUSH
19841: LD_INT 2
19843: PUSH
19844: LD_INT 3
19846: PUSH
19847: LD_INT 4
19849: PUSH
19850: LD_INT 5
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: ST_TO_ADDR
19859: GO 20616
19861: LD_INT 13
19863: DOUBLE
19864: EQUAL
19865: IFTRUE 19869
19867: GO 19895
19869: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
19870: LD_ADDR_VAR 0 3
19874: PUSH
19875: LD_INT 2
19877: PUSH
19878: LD_INT 3
19880: PUSH
19881: LD_INT 4
19883: PUSH
19884: LD_INT 5
19886: PUSH
19887: EMPTY
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: ST_TO_ADDR
19893: GO 20616
19895: LD_INT 14
19897: DOUBLE
19898: EQUAL
19899: IFTRUE 19903
19901: GO 19921
19903: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
19904: LD_ADDR_VAR 0 3
19908: PUSH
19909: LD_INT 4
19911: PUSH
19912: LD_INT 5
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: ST_TO_ADDR
19919: GO 20616
19921: LD_INT 6
19923: DOUBLE
19924: EQUAL
19925: IFTRUE 19929
19927: GO 19947
19929: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
19930: LD_ADDR_VAR 0 3
19934: PUSH
19935: LD_INT 4
19937: PUSH
19938: LD_INT 5
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: ST_TO_ADDR
19945: GO 20616
19947: LD_INT 10
19949: DOUBLE
19950: EQUAL
19951: IFTRUE 19955
19953: GO 19973
19955: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
19956: LD_ADDR_VAR 0 3
19960: PUSH
19961: LD_INT 4
19963: PUSH
19964: LD_INT 5
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: ST_TO_ADDR
19971: GO 20616
19973: LD_INT 22
19975: DOUBLE
19976: EQUAL
19977: IFTRUE 19981
19979: GO 20007
19981: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
19982: LD_ADDR_VAR 0 3
19986: PUSH
19987: LD_INT 11
19989: PUSH
19990: LD_INT 12
19992: PUSH
19993: LD_INT 13
19995: PUSH
19996: LD_INT 14
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: ST_TO_ADDR
20005: GO 20616
20007: LD_INT 23
20009: DOUBLE
20010: EQUAL
20011: IFTRUE 20015
20013: GO 20041
20015: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
20016: LD_ADDR_VAR 0 3
20020: PUSH
20021: LD_INT 11
20023: PUSH
20024: LD_INT 12
20026: PUSH
20027: LD_INT 13
20029: PUSH
20030: LD_INT 14
20032: PUSH
20033: EMPTY
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: ST_TO_ADDR
20039: GO 20616
20041: LD_INT 24
20043: DOUBLE
20044: EQUAL
20045: IFTRUE 20049
20047: GO 20075
20049: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
20050: LD_ADDR_VAR 0 3
20054: PUSH
20055: LD_INT 11
20057: PUSH
20058: LD_INT 12
20060: PUSH
20061: LD_INT 13
20063: PUSH
20064: LD_INT 14
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: ST_TO_ADDR
20073: GO 20616
20075: LD_INT 30
20077: DOUBLE
20078: EQUAL
20079: IFTRUE 20083
20081: GO 20109
20083: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
20084: LD_ADDR_VAR 0 3
20088: PUSH
20089: LD_INT 11
20091: PUSH
20092: LD_INT 12
20094: PUSH
20095: LD_INT 13
20097: PUSH
20098: LD_INT 14
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: ST_TO_ADDR
20107: GO 20616
20109: LD_INT 25
20111: DOUBLE
20112: EQUAL
20113: IFTRUE 20117
20115: GO 20135
20117: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
20118: LD_ADDR_VAR 0 3
20122: PUSH
20123: LD_INT 13
20125: PUSH
20126: LD_INT 14
20128: PUSH
20129: EMPTY
20130: LIST
20131: LIST
20132: ST_TO_ADDR
20133: GO 20616
20135: LD_INT 27
20137: DOUBLE
20138: EQUAL
20139: IFTRUE 20143
20141: GO 20161
20143: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
20144: LD_ADDR_VAR 0 3
20148: PUSH
20149: LD_INT 13
20151: PUSH
20152: LD_INT 14
20154: PUSH
20155: EMPTY
20156: LIST
20157: LIST
20158: ST_TO_ADDR
20159: GO 20616
20161: LD_INT 92
20163: DOUBLE
20164: EQUAL
20165: IFTRUE 20169
20167: GO 20195
20169: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
20170: LD_ADDR_VAR 0 3
20174: PUSH
20175: LD_INT 11
20177: PUSH
20178: LD_INT 12
20180: PUSH
20181: LD_INT 13
20183: PUSH
20184: LD_INT 14
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: LIST
20191: LIST
20192: ST_TO_ADDR
20193: GO 20616
20195: LD_INT 28
20197: DOUBLE
20198: EQUAL
20199: IFTRUE 20203
20201: GO 20221
20203: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
20204: LD_ADDR_VAR 0 3
20208: PUSH
20209: LD_INT 13
20211: PUSH
20212: LD_INT 14
20214: PUSH
20215: EMPTY
20216: LIST
20217: LIST
20218: ST_TO_ADDR
20219: GO 20616
20221: LD_INT 29
20223: DOUBLE
20224: EQUAL
20225: IFTRUE 20229
20227: GO 20247
20229: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
20230: LD_ADDR_VAR 0 3
20234: PUSH
20235: LD_INT 13
20237: PUSH
20238: LD_INT 14
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: ST_TO_ADDR
20245: GO 20616
20247: LD_INT 31
20249: DOUBLE
20250: EQUAL
20251: IFTRUE 20255
20253: GO 20273
20255: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
20256: LD_ADDR_VAR 0 3
20260: PUSH
20261: LD_INT 13
20263: PUSH
20264: LD_INT 14
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: ST_TO_ADDR
20271: GO 20616
20273: LD_INT 26
20275: DOUBLE
20276: EQUAL
20277: IFTRUE 20281
20279: GO 20299
20281: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
20282: LD_ADDR_VAR 0 3
20286: PUSH
20287: LD_INT 13
20289: PUSH
20290: LD_INT 14
20292: PUSH
20293: EMPTY
20294: LIST
20295: LIST
20296: ST_TO_ADDR
20297: GO 20616
20299: LD_INT 42
20301: DOUBLE
20302: EQUAL
20303: IFTRUE 20307
20305: GO 20333
20307: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
20308: LD_ADDR_VAR 0 3
20312: PUSH
20313: LD_INT 21
20315: PUSH
20316: LD_INT 22
20318: PUSH
20319: LD_INT 23
20321: PUSH
20322: LD_INT 24
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: LIST
20329: LIST
20330: ST_TO_ADDR
20331: GO 20616
20333: LD_INT 43
20335: DOUBLE
20336: EQUAL
20337: IFTRUE 20341
20339: GO 20367
20341: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
20342: LD_ADDR_VAR 0 3
20346: PUSH
20347: LD_INT 21
20349: PUSH
20350: LD_INT 22
20352: PUSH
20353: LD_INT 23
20355: PUSH
20356: LD_INT 24
20358: PUSH
20359: EMPTY
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: ST_TO_ADDR
20365: GO 20616
20367: LD_INT 44
20369: DOUBLE
20370: EQUAL
20371: IFTRUE 20375
20373: GO 20401
20375: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
20376: LD_ADDR_VAR 0 3
20380: PUSH
20381: LD_INT 21
20383: PUSH
20384: LD_INT 22
20386: PUSH
20387: LD_INT 23
20389: PUSH
20390: LD_INT 24
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: ST_TO_ADDR
20399: GO 20616
20401: LD_INT 45
20403: DOUBLE
20404: EQUAL
20405: IFTRUE 20409
20407: GO 20435
20409: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
20410: LD_ADDR_VAR 0 3
20414: PUSH
20415: LD_INT 21
20417: PUSH
20418: LD_INT 22
20420: PUSH
20421: LD_INT 23
20423: PUSH
20424: LD_INT 24
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: ST_TO_ADDR
20433: GO 20616
20435: LD_INT 49
20437: DOUBLE
20438: EQUAL
20439: IFTRUE 20443
20441: GO 20469
20443: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
20444: LD_ADDR_VAR 0 3
20448: PUSH
20449: LD_INT 21
20451: PUSH
20452: LD_INT 22
20454: PUSH
20455: LD_INT 23
20457: PUSH
20458: LD_INT 24
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: ST_TO_ADDR
20467: GO 20616
20469: LD_INT 51
20471: DOUBLE
20472: EQUAL
20473: IFTRUE 20477
20475: GO 20503
20477: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
20478: LD_ADDR_VAR 0 3
20482: PUSH
20483: LD_INT 21
20485: PUSH
20486: LD_INT 22
20488: PUSH
20489: LD_INT 23
20491: PUSH
20492: LD_INT 24
20494: PUSH
20495: EMPTY
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: ST_TO_ADDR
20501: GO 20616
20503: LD_INT 52
20505: DOUBLE
20506: EQUAL
20507: IFTRUE 20511
20509: GO 20537
20511: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
20512: LD_ADDR_VAR 0 3
20516: PUSH
20517: LD_INT 21
20519: PUSH
20520: LD_INT 22
20522: PUSH
20523: LD_INT 23
20525: PUSH
20526: LD_INT 24
20528: PUSH
20529: EMPTY
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: ST_TO_ADDR
20535: GO 20616
20537: LD_INT 53
20539: DOUBLE
20540: EQUAL
20541: IFTRUE 20545
20543: GO 20563
20545: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
20546: LD_ADDR_VAR 0 3
20550: PUSH
20551: LD_INT 23
20553: PUSH
20554: LD_INT 24
20556: PUSH
20557: EMPTY
20558: LIST
20559: LIST
20560: ST_TO_ADDR
20561: GO 20616
20563: LD_INT 46
20565: DOUBLE
20566: EQUAL
20567: IFTRUE 20571
20569: GO 20589
20571: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
20572: LD_ADDR_VAR 0 3
20576: PUSH
20577: LD_INT 23
20579: PUSH
20580: LD_INT 24
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: ST_TO_ADDR
20587: GO 20616
20589: LD_INT 47
20591: DOUBLE
20592: EQUAL
20593: IFTRUE 20597
20595: GO 20615
20597: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20598: LD_ADDR_VAR 0 3
20602: PUSH
20603: LD_INT 23
20605: PUSH
20606: LD_INT 24
20608: PUSH
20609: EMPTY
20610: LIST
20611: LIST
20612: ST_TO_ADDR
20613: GO 20616
20615: POP
// result := ( chassis in result ) ;
20616: LD_ADDR_VAR 0 3
20620: PUSH
20621: LD_VAR 0 1
20625: PUSH
20626: LD_VAR 0 3
20630: IN
20631: ST_TO_ADDR
// end ;
20632: LD_VAR 0 3
20636: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
20637: LD_INT 0
20639: PPUSH
20640: PPUSH
20641: PPUSH
20642: PPUSH
20643: PPUSH
20644: PPUSH
20645: PPUSH
// result := array ;
20646: LD_ADDR_VAR 0 5
20650: PUSH
20651: LD_VAR 0 1
20655: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
20656: LD_VAR 0 1
20660: NOT
20661: PUSH
20662: LD_VAR 0 2
20666: NOT
20667: OR
20668: PUSH
20669: LD_VAR 0 3
20673: NOT
20674: OR
20675: PUSH
20676: LD_VAR 0 2
20680: PUSH
20681: LD_VAR 0 1
20685: GREATER
20686: OR
20687: PUSH
20688: LD_VAR 0 3
20692: PUSH
20693: LD_VAR 0 1
20697: GREATER
20698: OR
20699: IFFALSE 20703
// exit ;
20701: GO 20999
// if direction then
20703: LD_VAR 0 4
20707: IFFALSE 20771
// begin d := 1 ;
20709: LD_ADDR_VAR 0 9
20713: PUSH
20714: LD_INT 1
20716: ST_TO_ADDR
// if i_from > i_to then
20717: LD_VAR 0 2
20721: PUSH
20722: LD_VAR 0 3
20726: GREATER
20727: IFFALSE 20753
// length := ( array - i_from ) + i_to else
20729: LD_ADDR_VAR 0 11
20733: PUSH
20734: LD_VAR 0 1
20738: PUSH
20739: LD_VAR 0 2
20743: MINUS
20744: PUSH
20745: LD_VAR 0 3
20749: PLUS
20750: ST_TO_ADDR
20751: GO 20769
// length := i_to - i_from ;
20753: LD_ADDR_VAR 0 11
20757: PUSH
20758: LD_VAR 0 3
20762: PUSH
20763: LD_VAR 0 2
20767: MINUS
20768: ST_TO_ADDR
// end else
20769: GO 20832
// begin d := - 1 ;
20771: LD_ADDR_VAR 0 9
20775: PUSH
20776: LD_INT 1
20778: NEG
20779: ST_TO_ADDR
// if i_from > i_to then
20780: LD_VAR 0 2
20784: PUSH
20785: LD_VAR 0 3
20789: GREATER
20790: IFFALSE 20810
// length := i_from - i_to else
20792: LD_ADDR_VAR 0 11
20796: PUSH
20797: LD_VAR 0 2
20801: PUSH
20802: LD_VAR 0 3
20806: MINUS
20807: ST_TO_ADDR
20808: GO 20832
// length := ( array - i_to ) + i_from ;
20810: LD_ADDR_VAR 0 11
20814: PUSH
20815: LD_VAR 0 1
20819: PUSH
20820: LD_VAR 0 3
20824: MINUS
20825: PUSH
20826: LD_VAR 0 2
20830: PLUS
20831: ST_TO_ADDR
// end ; if not length then
20832: LD_VAR 0 11
20836: NOT
20837: IFFALSE 20841
// exit ;
20839: GO 20999
// tmp := array ;
20841: LD_ADDR_VAR 0 10
20845: PUSH
20846: LD_VAR 0 1
20850: ST_TO_ADDR
// for i = 1 to length do
20851: LD_ADDR_VAR 0 6
20855: PUSH
20856: DOUBLE
20857: LD_INT 1
20859: DEC
20860: ST_TO_ADDR
20861: LD_VAR 0 11
20865: PUSH
20866: FOR_TO
20867: IFFALSE 20987
// begin for j = 1 to array do
20869: LD_ADDR_VAR 0 7
20873: PUSH
20874: DOUBLE
20875: LD_INT 1
20877: DEC
20878: ST_TO_ADDR
20879: LD_VAR 0 1
20883: PUSH
20884: FOR_TO
20885: IFFALSE 20973
// begin k := j + d ;
20887: LD_ADDR_VAR 0 8
20891: PUSH
20892: LD_VAR 0 7
20896: PUSH
20897: LD_VAR 0 9
20901: PLUS
20902: ST_TO_ADDR
// if k > array then
20903: LD_VAR 0 8
20907: PUSH
20908: LD_VAR 0 1
20912: GREATER
20913: IFFALSE 20923
// k := 1 ;
20915: LD_ADDR_VAR 0 8
20919: PUSH
20920: LD_INT 1
20922: ST_TO_ADDR
// if not k then
20923: LD_VAR 0 8
20927: NOT
20928: IFFALSE 20940
// k := array ;
20930: LD_ADDR_VAR 0 8
20934: PUSH
20935: LD_VAR 0 1
20939: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
20940: LD_ADDR_VAR 0 10
20944: PUSH
20945: LD_VAR 0 10
20949: PPUSH
20950: LD_VAR 0 8
20954: PPUSH
20955: LD_VAR 0 1
20959: PUSH
20960: LD_VAR 0 7
20964: ARRAY
20965: PPUSH
20966: CALL_OW 1
20970: ST_TO_ADDR
// end ;
20971: GO 20884
20973: POP
20974: POP
// array := tmp ;
20975: LD_ADDR_VAR 0 1
20979: PUSH
20980: LD_VAR 0 10
20984: ST_TO_ADDR
// end ;
20985: GO 20866
20987: POP
20988: POP
// result := array ;
20989: LD_ADDR_VAR 0 5
20993: PUSH
20994: LD_VAR 0 1
20998: ST_TO_ADDR
// end ;
20999: LD_VAR 0 5
21003: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
21004: LD_INT 0
21006: PPUSH
21007: PPUSH
// result := 0 ;
21008: LD_ADDR_VAR 0 3
21012: PUSH
21013: LD_INT 0
21015: ST_TO_ADDR
// if not array or not value in array then
21016: LD_VAR 0 1
21020: NOT
21021: PUSH
21022: LD_VAR 0 2
21026: PUSH
21027: LD_VAR 0 1
21031: IN
21032: NOT
21033: OR
21034: IFFALSE 21038
// exit ;
21036: GO 21092
// for i = 1 to array do
21038: LD_ADDR_VAR 0 4
21042: PUSH
21043: DOUBLE
21044: LD_INT 1
21046: DEC
21047: ST_TO_ADDR
21048: LD_VAR 0 1
21052: PUSH
21053: FOR_TO
21054: IFFALSE 21090
// if value = array [ i ] then
21056: LD_VAR 0 2
21060: PUSH
21061: LD_VAR 0 1
21065: PUSH
21066: LD_VAR 0 4
21070: ARRAY
21071: EQUAL
21072: IFFALSE 21088
// begin result := i ;
21074: LD_ADDR_VAR 0 3
21078: PUSH
21079: LD_VAR 0 4
21083: ST_TO_ADDR
// exit ;
21084: POP
21085: POP
21086: GO 21092
// end ;
21088: GO 21053
21090: POP
21091: POP
// end ;
21092: LD_VAR 0 3
21096: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
21097: LD_INT 0
21099: PPUSH
// vc_chassis := chassis ;
21100: LD_ADDR_OWVAR 37
21104: PUSH
21105: LD_VAR 0 1
21109: ST_TO_ADDR
// vc_engine := engine ;
21110: LD_ADDR_OWVAR 39
21114: PUSH
21115: LD_VAR 0 2
21119: ST_TO_ADDR
// vc_control := control ;
21120: LD_ADDR_OWVAR 38
21124: PUSH
21125: LD_VAR 0 3
21129: ST_TO_ADDR
// vc_weapon := weapon ;
21130: LD_ADDR_OWVAR 40
21134: PUSH
21135: LD_VAR 0 4
21139: ST_TO_ADDR
// vc_fuel_battery := fuel ;
21140: LD_ADDR_OWVAR 41
21144: PUSH
21145: LD_VAR 0 5
21149: ST_TO_ADDR
// end ;
21150: LD_VAR 0 6
21154: RET
// export function WantPlant ( unit ) ; var task ; begin
21155: LD_INT 0
21157: PPUSH
21158: PPUSH
// result := false ;
21159: LD_ADDR_VAR 0 2
21163: PUSH
21164: LD_INT 0
21166: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
21167: LD_ADDR_VAR 0 3
21171: PUSH
21172: LD_VAR 0 1
21176: PPUSH
21177: CALL_OW 437
21181: ST_TO_ADDR
// if task then
21182: LD_VAR 0 3
21186: IFFALSE 21214
// if task [ 1 ] [ 1 ] = p then
21188: LD_VAR 0 3
21192: PUSH
21193: LD_INT 1
21195: ARRAY
21196: PUSH
21197: LD_INT 1
21199: ARRAY
21200: PUSH
21201: LD_STRING p
21203: EQUAL
21204: IFFALSE 21214
// result := true ;
21206: LD_ADDR_VAR 0 2
21210: PUSH
21211: LD_INT 1
21213: ST_TO_ADDR
// end ;
21214: LD_VAR 0 2
21218: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
21219: LD_INT 0
21221: PPUSH
21222: PPUSH
21223: PPUSH
21224: PPUSH
// if pos < 1 then
21225: LD_VAR 0 2
21229: PUSH
21230: LD_INT 1
21232: LESS
21233: IFFALSE 21237
// exit ;
21235: GO 21540
// if pos = 1 then
21237: LD_VAR 0 2
21241: PUSH
21242: LD_INT 1
21244: EQUAL
21245: IFFALSE 21278
// result := Replace ( arr , pos [ 1 ] , value ) else
21247: LD_ADDR_VAR 0 4
21251: PUSH
21252: LD_VAR 0 1
21256: PPUSH
21257: LD_VAR 0 2
21261: PUSH
21262: LD_INT 1
21264: ARRAY
21265: PPUSH
21266: LD_VAR 0 3
21270: PPUSH
21271: CALL_OW 1
21275: ST_TO_ADDR
21276: GO 21540
// begin tmp := arr ;
21278: LD_ADDR_VAR 0 6
21282: PUSH
21283: LD_VAR 0 1
21287: ST_TO_ADDR
// s_arr := [ tmp ] ;
21288: LD_ADDR_VAR 0 7
21292: PUSH
21293: LD_VAR 0 6
21297: PUSH
21298: EMPTY
21299: LIST
21300: ST_TO_ADDR
// for i = 1 to pos - 1 do
21301: LD_ADDR_VAR 0 5
21305: PUSH
21306: DOUBLE
21307: LD_INT 1
21309: DEC
21310: ST_TO_ADDR
21311: LD_VAR 0 2
21315: PUSH
21316: LD_INT 1
21318: MINUS
21319: PUSH
21320: FOR_TO
21321: IFFALSE 21366
// begin tmp := tmp [ pos [ i ] ] ;
21323: LD_ADDR_VAR 0 6
21327: PUSH
21328: LD_VAR 0 6
21332: PUSH
21333: LD_VAR 0 2
21337: PUSH
21338: LD_VAR 0 5
21342: ARRAY
21343: ARRAY
21344: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
21345: LD_ADDR_VAR 0 7
21349: PUSH
21350: LD_VAR 0 7
21354: PUSH
21355: LD_VAR 0 6
21359: PUSH
21360: EMPTY
21361: LIST
21362: ADD
21363: ST_TO_ADDR
// end ;
21364: GO 21320
21366: POP
21367: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
21368: LD_ADDR_VAR 0 6
21372: PUSH
21373: LD_VAR 0 6
21377: PPUSH
21378: LD_VAR 0 2
21382: PUSH
21383: LD_VAR 0 2
21387: ARRAY
21388: PPUSH
21389: LD_VAR 0 3
21393: PPUSH
21394: CALL_OW 1
21398: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
21399: LD_ADDR_VAR 0 7
21403: PUSH
21404: LD_VAR 0 7
21408: PPUSH
21409: LD_VAR 0 7
21413: PPUSH
21414: LD_VAR 0 6
21418: PPUSH
21419: CALL_OW 1
21423: ST_TO_ADDR
// for i = s_arr downto 2 do
21424: LD_ADDR_VAR 0 5
21428: PUSH
21429: DOUBLE
21430: LD_VAR 0 7
21434: INC
21435: ST_TO_ADDR
21436: LD_INT 2
21438: PUSH
21439: FOR_DOWNTO
21440: IFFALSE 21524
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
21442: LD_ADDR_VAR 0 6
21446: PUSH
21447: LD_VAR 0 7
21451: PUSH
21452: LD_VAR 0 5
21456: PUSH
21457: LD_INT 1
21459: MINUS
21460: ARRAY
21461: PPUSH
21462: LD_VAR 0 2
21466: PUSH
21467: LD_VAR 0 5
21471: PUSH
21472: LD_INT 1
21474: MINUS
21475: ARRAY
21476: PPUSH
21477: LD_VAR 0 7
21481: PUSH
21482: LD_VAR 0 5
21486: ARRAY
21487: PPUSH
21488: CALL_OW 1
21492: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
21493: LD_ADDR_VAR 0 7
21497: PUSH
21498: LD_VAR 0 7
21502: PPUSH
21503: LD_VAR 0 5
21507: PUSH
21508: LD_INT 1
21510: MINUS
21511: PPUSH
21512: LD_VAR 0 6
21516: PPUSH
21517: CALL_OW 1
21521: ST_TO_ADDR
// end ;
21522: GO 21439
21524: POP
21525: POP
// result := s_arr [ 1 ] ;
21526: LD_ADDR_VAR 0 4
21530: PUSH
21531: LD_VAR 0 7
21535: PUSH
21536: LD_INT 1
21538: ARRAY
21539: ST_TO_ADDR
// end ; end ;
21540: LD_VAR 0 4
21544: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
21545: LD_INT 0
21547: PPUSH
21548: PPUSH
// if not list then
21549: LD_VAR 0 1
21553: NOT
21554: IFFALSE 21558
// exit ;
21556: GO 21649
// i := list [ pos1 ] ;
21558: LD_ADDR_VAR 0 5
21562: PUSH
21563: LD_VAR 0 1
21567: PUSH
21568: LD_VAR 0 2
21572: ARRAY
21573: ST_TO_ADDR
// if not i then
21574: LD_VAR 0 5
21578: NOT
21579: IFFALSE 21583
// exit ;
21581: GO 21649
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
21583: LD_ADDR_VAR 0 1
21587: PUSH
21588: LD_VAR 0 1
21592: PPUSH
21593: LD_VAR 0 2
21597: PPUSH
21598: LD_VAR 0 1
21602: PUSH
21603: LD_VAR 0 3
21607: ARRAY
21608: PPUSH
21609: CALL_OW 1
21613: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
21614: LD_ADDR_VAR 0 1
21618: PUSH
21619: LD_VAR 0 1
21623: PPUSH
21624: LD_VAR 0 3
21628: PPUSH
21629: LD_VAR 0 5
21633: PPUSH
21634: CALL_OW 1
21638: ST_TO_ADDR
// result := list ;
21639: LD_ADDR_VAR 0 4
21643: PUSH
21644: LD_VAR 0 1
21648: ST_TO_ADDR
// end ;
21649: LD_VAR 0 4
21653: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
21654: LD_INT 0
21656: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
21657: LD_ADDR_VAR 0 5
21661: PUSH
21662: LD_VAR 0 1
21666: PPUSH
21667: CALL_OW 250
21671: PPUSH
21672: LD_VAR 0 1
21676: PPUSH
21677: CALL_OW 251
21681: PPUSH
21682: LD_VAR 0 2
21686: PPUSH
21687: LD_VAR 0 3
21691: PPUSH
21692: LD_VAR 0 4
21696: PPUSH
21697: CALL 22075 0 5
21701: ST_TO_ADDR
// end ;
21702: LD_VAR 0 5
21706: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
21707: LD_INT 0
21709: PPUSH
21710: PPUSH
21711: PPUSH
21712: PPUSH
// if not list or not unit then
21713: LD_VAR 0 2
21717: NOT
21718: PUSH
21719: LD_VAR 0 1
21723: NOT
21724: OR
21725: IFFALSE 21729
// exit ;
21727: GO 22070
// result := [ ] ;
21729: LD_ADDR_VAR 0 5
21733: PUSH
21734: EMPTY
21735: ST_TO_ADDR
// for i in list do
21736: LD_ADDR_VAR 0 6
21740: PUSH
21741: LD_VAR 0 2
21745: PUSH
21746: FOR_IN
21747: IFFALSE 21965
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
21749: LD_ADDR_VAR 0 8
21753: PUSH
21754: LD_VAR 0 1
21758: PPUSH
21759: LD_VAR 0 6
21763: PUSH
21764: LD_INT 1
21766: ARRAY
21767: PPUSH
21768: LD_VAR 0 6
21772: PUSH
21773: LD_INT 2
21775: ARRAY
21776: PPUSH
21777: CALL_OW 297
21781: ST_TO_ADDR
// if not Count ( result ) then
21782: LD_VAR 0 5
21786: PPUSH
21787: CALL 18359 0 1
21791: NOT
21792: IFFALSE 21825
// begin result := Join ( result , [ i , tmp ] ) ;
21794: LD_ADDR_VAR 0 5
21798: PUSH
21799: LD_VAR 0 5
21803: PPUSH
21804: LD_VAR 0 6
21808: PUSH
21809: LD_VAR 0 8
21813: PUSH
21814: EMPTY
21815: LIST
21816: LIST
21817: PPUSH
21818: CALL 53946 0 2
21822: ST_TO_ADDR
// continue ;
21823: GO 21746
// end ; if result [ result ] [ 2 ] <= tmp then
21825: LD_VAR 0 5
21829: PUSH
21830: LD_VAR 0 5
21834: ARRAY
21835: PUSH
21836: LD_INT 2
21838: ARRAY
21839: PUSH
21840: LD_VAR 0 8
21844: LESSEQUAL
21845: IFFALSE 21878
// result := Join ( result , [ i , tmp ] ) else
21847: LD_ADDR_VAR 0 5
21851: PUSH
21852: LD_VAR 0 5
21856: PPUSH
21857: LD_VAR 0 6
21861: PUSH
21862: LD_VAR 0 8
21866: PUSH
21867: EMPTY
21868: LIST
21869: LIST
21870: PPUSH
21871: CALL 53946 0 2
21875: ST_TO_ADDR
21876: GO 21963
// begin for j := 1 to Count ( result ) do
21878: LD_ADDR_VAR 0 7
21882: PUSH
21883: DOUBLE
21884: LD_INT 1
21886: DEC
21887: ST_TO_ADDR
21888: LD_VAR 0 5
21892: PPUSH
21893: CALL 18359 0 1
21897: PUSH
21898: FOR_TO
21899: IFFALSE 21961
// begin if tmp < result [ j ] [ 2 ] then
21901: LD_VAR 0 8
21905: PUSH
21906: LD_VAR 0 5
21910: PUSH
21911: LD_VAR 0 7
21915: ARRAY
21916: PUSH
21917: LD_INT 2
21919: ARRAY
21920: LESS
21921: IFFALSE 21959
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21923: LD_ADDR_VAR 0 5
21927: PUSH
21928: LD_VAR 0 5
21932: PPUSH
21933: LD_VAR 0 7
21937: PPUSH
21938: LD_VAR 0 6
21942: PUSH
21943: LD_VAR 0 8
21947: PUSH
21948: EMPTY
21949: LIST
21950: LIST
21951: PPUSH
21952: CALL_OW 2
21956: ST_TO_ADDR
// break ;
21957: GO 21961
// end ; end ;
21959: GO 21898
21961: POP
21962: POP
// end ; end ;
21963: GO 21746
21965: POP
21966: POP
// if result and not asc then
21967: LD_VAR 0 5
21971: PUSH
21972: LD_VAR 0 3
21976: NOT
21977: AND
21978: IFFALSE 21995
// result := ReverseArray ( result ) ;
21980: LD_ADDR_VAR 0 5
21984: PUSH
21985: LD_VAR 0 5
21989: PPUSH
21990: CALL 49235 0 1
21994: ST_TO_ADDR
// tmp := [ ] ;
21995: LD_ADDR_VAR 0 8
21999: PUSH
22000: EMPTY
22001: ST_TO_ADDR
// if mode then
22002: LD_VAR 0 4
22006: IFFALSE 22070
// begin for i := 1 to result do
22008: LD_ADDR_VAR 0 6
22012: PUSH
22013: DOUBLE
22014: LD_INT 1
22016: DEC
22017: ST_TO_ADDR
22018: LD_VAR 0 5
22022: PUSH
22023: FOR_TO
22024: IFFALSE 22058
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
22026: LD_ADDR_VAR 0 8
22030: PUSH
22031: LD_VAR 0 8
22035: PPUSH
22036: LD_VAR 0 5
22040: PUSH
22041: LD_VAR 0 6
22045: ARRAY
22046: PUSH
22047: LD_INT 1
22049: ARRAY
22050: PPUSH
22051: CALL 53946 0 2
22055: ST_TO_ADDR
22056: GO 22023
22058: POP
22059: POP
// result := tmp ;
22060: LD_ADDR_VAR 0 5
22064: PUSH
22065: LD_VAR 0 8
22069: ST_TO_ADDR
// end ; end ;
22070: LD_VAR 0 5
22074: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22075: LD_INT 0
22077: PPUSH
22078: PPUSH
22079: PPUSH
22080: PPUSH
// if not list then
22081: LD_VAR 0 3
22085: NOT
22086: IFFALSE 22090
// exit ;
22088: GO 22478
// result := [ ] ;
22090: LD_ADDR_VAR 0 6
22094: PUSH
22095: EMPTY
22096: ST_TO_ADDR
// for i in list do
22097: LD_ADDR_VAR 0 7
22101: PUSH
22102: LD_VAR 0 3
22106: PUSH
22107: FOR_IN
22108: IFFALSE 22310
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22110: LD_ADDR_VAR 0 9
22114: PUSH
22115: LD_VAR 0 7
22119: PPUSH
22120: LD_VAR 0 1
22124: PPUSH
22125: LD_VAR 0 2
22129: PPUSH
22130: CALL_OW 297
22134: ST_TO_ADDR
// if not result then
22135: LD_VAR 0 6
22139: NOT
22140: IFFALSE 22166
// result := [ [ i , tmp ] ] else
22142: LD_ADDR_VAR 0 6
22146: PUSH
22147: LD_VAR 0 7
22151: PUSH
22152: LD_VAR 0 9
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: PUSH
22161: EMPTY
22162: LIST
22163: ST_TO_ADDR
22164: GO 22308
// begin if result [ result ] [ 2 ] < tmp then
22166: LD_VAR 0 6
22170: PUSH
22171: LD_VAR 0 6
22175: ARRAY
22176: PUSH
22177: LD_INT 2
22179: ARRAY
22180: PUSH
22181: LD_VAR 0 9
22185: LESS
22186: IFFALSE 22228
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
22188: LD_ADDR_VAR 0 6
22192: PUSH
22193: LD_VAR 0 6
22197: PPUSH
22198: LD_VAR 0 6
22202: PUSH
22203: LD_INT 1
22205: PLUS
22206: PPUSH
22207: LD_VAR 0 7
22211: PUSH
22212: LD_VAR 0 9
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PPUSH
22221: CALL_OW 2
22225: ST_TO_ADDR
22226: GO 22308
// for j = 1 to result do
22228: LD_ADDR_VAR 0 8
22232: PUSH
22233: DOUBLE
22234: LD_INT 1
22236: DEC
22237: ST_TO_ADDR
22238: LD_VAR 0 6
22242: PUSH
22243: FOR_TO
22244: IFFALSE 22306
// begin if tmp < result [ j ] [ 2 ] then
22246: LD_VAR 0 9
22250: PUSH
22251: LD_VAR 0 6
22255: PUSH
22256: LD_VAR 0 8
22260: ARRAY
22261: PUSH
22262: LD_INT 2
22264: ARRAY
22265: LESS
22266: IFFALSE 22304
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22268: LD_ADDR_VAR 0 6
22272: PUSH
22273: LD_VAR 0 6
22277: PPUSH
22278: LD_VAR 0 8
22282: PPUSH
22283: LD_VAR 0 7
22287: PUSH
22288: LD_VAR 0 9
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: PPUSH
22297: CALL_OW 2
22301: ST_TO_ADDR
// break ;
22302: GO 22306
// end ; end ;
22304: GO 22243
22306: POP
22307: POP
// end ; end ;
22308: GO 22107
22310: POP
22311: POP
// if result and not asc then
22312: LD_VAR 0 6
22316: PUSH
22317: LD_VAR 0 4
22321: NOT
22322: AND
22323: IFFALSE 22398
// begin tmp := result ;
22325: LD_ADDR_VAR 0 9
22329: PUSH
22330: LD_VAR 0 6
22334: ST_TO_ADDR
// for i = tmp downto 1 do
22335: LD_ADDR_VAR 0 7
22339: PUSH
22340: DOUBLE
22341: LD_VAR 0 9
22345: INC
22346: ST_TO_ADDR
22347: LD_INT 1
22349: PUSH
22350: FOR_DOWNTO
22351: IFFALSE 22396
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
22353: LD_ADDR_VAR 0 6
22357: PUSH
22358: LD_VAR 0 6
22362: PPUSH
22363: LD_VAR 0 9
22367: PUSH
22368: LD_VAR 0 7
22372: MINUS
22373: PUSH
22374: LD_INT 1
22376: PLUS
22377: PPUSH
22378: LD_VAR 0 9
22382: PUSH
22383: LD_VAR 0 7
22387: ARRAY
22388: PPUSH
22389: CALL_OW 1
22393: ST_TO_ADDR
22394: GO 22350
22396: POP
22397: POP
// end ; tmp := [ ] ;
22398: LD_ADDR_VAR 0 9
22402: PUSH
22403: EMPTY
22404: ST_TO_ADDR
// if mode then
22405: LD_VAR 0 5
22409: IFFALSE 22478
// begin for i = 1 to result do
22411: LD_ADDR_VAR 0 7
22415: PUSH
22416: DOUBLE
22417: LD_INT 1
22419: DEC
22420: ST_TO_ADDR
22421: LD_VAR 0 6
22425: PUSH
22426: FOR_TO
22427: IFFALSE 22466
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
22429: LD_ADDR_VAR 0 9
22433: PUSH
22434: LD_VAR 0 9
22438: PPUSH
22439: LD_VAR 0 7
22443: PPUSH
22444: LD_VAR 0 6
22448: PUSH
22449: LD_VAR 0 7
22453: ARRAY
22454: PUSH
22455: LD_INT 1
22457: ARRAY
22458: PPUSH
22459: CALL_OW 1
22463: ST_TO_ADDR
22464: GO 22426
22466: POP
22467: POP
// result := tmp ;
22468: LD_ADDR_VAR 0 6
22472: PUSH
22473: LD_VAR 0 9
22477: ST_TO_ADDR
// end ; end ;
22478: LD_VAR 0 6
22482: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
22483: LD_INT 0
22485: PPUSH
22486: PPUSH
22487: PPUSH
22488: PPUSH
22489: PPUSH
22490: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
22491: LD_ADDR_VAR 0 5
22495: PUSH
22496: LD_INT 0
22498: PUSH
22499: LD_INT 0
22501: PUSH
22502: LD_INT 0
22504: PUSH
22505: EMPTY
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: ST_TO_ADDR
// if not x or not y then
22513: LD_VAR 0 2
22517: NOT
22518: PUSH
22519: LD_VAR 0 3
22523: NOT
22524: OR
22525: IFFALSE 22529
// exit ;
22527: GO 24179
// if not range then
22529: LD_VAR 0 4
22533: NOT
22534: IFFALSE 22544
// range := 10 ;
22536: LD_ADDR_VAR 0 4
22540: PUSH
22541: LD_INT 10
22543: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22544: LD_ADDR_VAR 0 8
22548: PUSH
22549: LD_INT 81
22551: PUSH
22552: LD_VAR 0 1
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: PUSH
22561: LD_INT 92
22563: PUSH
22564: LD_VAR 0 2
22568: PUSH
22569: LD_VAR 0 3
22573: PUSH
22574: LD_VAR 0 4
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: PUSH
22585: LD_INT 3
22587: PUSH
22588: LD_INT 21
22590: PUSH
22591: LD_INT 3
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: LIST
22606: PPUSH
22607: CALL_OW 69
22611: ST_TO_ADDR
// if not tmp then
22612: LD_VAR 0 8
22616: NOT
22617: IFFALSE 22621
// exit ;
22619: GO 24179
// for i in tmp do
22621: LD_ADDR_VAR 0 6
22625: PUSH
22626: LD_VAR 0 8
22630: PUSH
22631: FOR_IN
22632: IFFALSE 24154
// begin points := [ 0 , 0 , 0 ] ;
22634: LD_ADDR_VAR 0 9
22638: PUSH
22639: LD_INT 0
22641: PUSH
22642: LD_INT 0
22644: PUSH
22645: LD_INT 0
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: LIST
22652: ST_TO_ADDR
// bpoints := 1 ;
22653: LD_ADDR_VAR 0 10
22657: PUSH
22658: LD_INT 1
22660: ST_TO_ADDR
// case GetType ( i ) of unit_human :
22661: LD_VAR 0 6
22665: PPUSH
22666: CALL_OW 247
22670: PUSH
22671: LD_INT 1
22673: DOUBLE
22674: EQUAL
22675: IFTRUE 22679
22677: GO 23257
22679: POP
// begin if GetClass ( i ) = 1 then
22680: LD_VAR 0 6
22684: PPUSH
22685: CALL_OW 257
22689: PUSH
22690: LD_INT 1
22692: EQUAL
22693: IFFALSE 22714
// points := [ 10 , 5 , 3 ] ;
22695: LD_ADDR_VAR 0 9
22699: PUSH
22700: LD_INT 10
22702: PUSH
22703: LD_INT 5
22705: PUSH
22706: LD_INT 3
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: LIST
22713: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
22714: LD_VAR 0 6
22718: PPUSH
22719: CALL_OW 257
22723: PUSH
22724: LD_INT 2
22726: PUSH
22727: LD_INT 3
22729: PUSH
22730: LD_INT 4
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: LIST
22737: IN
22738: IFFALSE 22759
// points := [ 3 , 2 , 1 ] ;
22740: LD_ADDR_VAR 0 9
22744: PUSH
22745: LD_INT 3
22747: PUSH
22748: LD_INT 2
22750: PUSH
22751: LD_INT 1
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: LIST
22758: ST_TO_ADDR
// if GetClass ( i ) = 5 then
22759: LD_VAR 0 6
22763: PPUSH
22764: CALL_OW 257
22768: PUSH
22769: LD_INT 5
22771: EQUAL
22772: IFFALSE 22793
// points := [ 130 , 5 , 2 ] ;
22774: LD_ADDR_VAR 0 9
22778: PUSH
22779: LD_INT 130
22781: PUSH
22782: LD_INT 5
22784: PUSH
22785: LD_INT 2
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: LIST
22792: ST_TO_ADDR
// if GetClass ( i ) = 8 then
22793: LD_VAR 0 6
22797: PPUSH
22798: CALL_OW 257
22802: PUSH
22803: LD_INT 8
22805: EQUAL
22806: IFFALSE 22827
// points := [ 35 , 35 , 30 ] ;
22808: LD_ADDR_VAR 0 9
22812: PUSH
22813: LD_INT 35
22815: PUSH
22816: LD_INT 35
22818: PUSH
22819: LD_INT 30
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: LIST
22826: ST_TO_ADDR
// if GetClass ( i ) = 9 then
22827: LD_VAR 0 6
22831: PPUSH
22832: CALL_OW 257
22836: PUSH
22837: LD_INT 9
22839: EQUAL
22840: IFFALSE 22861
// points := [ 20 , 55 , 40 ] ;
22842: LD_ADDR_VAR 0 9
22846: PUSH
22847: LD_INT 20
22849: PUSH
22850: LD_INT 55
22852: PUSH
22853: LD_INT 40
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: LIST
22860: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
22861: LD_VAR 0 6
22865: PPUSH
22866: CALL_OW 257
22870: PUSH
22871: LD_INT 12
22873: PUSH
22874: LD_INT 16
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: IN
22881: IFFALSE 22902
// points := [ 5 , 3 , 2 ] ;
22883: LD_ADDR_VAR 0 9
22887: PUSH
22888: LD_INT 5
22890: PUSH
22891: LD_INT 3
22893: PUSH
22894: LD_INT 2
22896: PUSH
22897: EMPTY
22898: LIST
22899: LIST
22900: LIST
22901: ST_TO_ADDR
// if GetClass ( i ) = 17 then
22902: LD_VAR 0 6
22906: PPUSH
22907: CALL_OW 257
22911: PUSH
22912: LD_INT 17
22914: EQUAL
22915: IFFALSE 22936
// points := [ 100 , 50 , 75 ] ;
22917: LD_ADDR_VAR 0 9
22921: PUSH
22922: LD_INT 100
22924: PUSH
22925: LD_INT 50
22927: PUSH
22928: LD_INT 75
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: LIST
22935: ST_TO_ADDR
// if GetClass ( i ) = 15 then
22936: LD_VAR 0 6
22940: PPUSH
22941: CALL_OW 257
22945: PUSH
22946: LD_INT 15
22948: EQUAL
22949: IFFALSE 22970
// points := [ 10 , 5 , 3 ] ;
22951: LD_ADDR_VAR 0 9
22955: PUSH
22956: LD_INT 10
22958: PUSH
22959: LD_INT 5
22961: PUSH
22962: LD_INT 3
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: LIST
22969: ST_TO_ADDR
// if GetClass ( i ) = 14 then
22970: LD_VAR 0 6
22974: PPUSH
22975: CALL_OW 257
22979: PUSH
22980: LD_INT 14
22982: EQUAL
22983: IFFALSE 23004
// points := [ 10 , 0 , 0 ] ;
22985: LD_ADDR_VAR 0 9
22989: PUSH
22990: LD_INT 10
22992: PUSH
22993: LD_INT 0
22995: PUSH
22996: LD_INT 0
22998: PUSH
22999: EMPTY
23000: LIST
23001: LIST
23002: LIST
23003: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23004: LD_VAR 0 6
23008: PPUSH
23009: CALL_OW 257
23013: PUSH
23014: LD_INT 11
23016: EQUAL
23017: IFFALSE 23038
// points := [ 30 , 10 , 5 ] ;
23019: LD_ADDR_VAR 0 9
23023: PUSH
23024: LD_INT 30
23026: PUSH
23027: LD_INT 10
23029: PUSH
23030: LD_INT 5
23032: PUSH
23033: EMPTY
23034: LIST
23035: LIST
23036: LIST
23037: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23038: LD_VAR 0 1
23042: PPUSH
23043: LD_INT 5
23045: PPUSH
23046: CALL_OW 321
23050: PUSH
23051: LD_INT 2
23053: EQUAL
23054: IFFALSE 23071
// bpoints := bpoints * 1.8 ;
23056: LD_ADDR_VAR 0 10
23060: PUSH
23061: LD_VAR 0 10
23065: PUSH
23066: LD_REAL  1.80000000000000E+0000
23069: MUL
23070: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23071: LD_VAR 0 6
23075: PPUSH
23076: CALL_OW 257
23080: PUSH
23081: LD_INT 1
23083: PUSH
23084: LD_INT 2
23086: PUSH
23087: LD_INT 3
23089: PUSH
23090: LD_INT 4
23092: PUSH
23093: EMPTY
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: IN
23099: PUSH
23100: LD_VAR 0 1
23104: PPUSH
23105: LD_INT 51
23107: PPUSH
23108: CALL_OW 321
23112: PUSH
23113: LD_INT 2
23115: EQUAL
23116: AND
23117: IFFALSE 23134
// bpoints := bpoints * 1.2 ;
23119: LD_ADDR_VAR 0 10
23123: PUSH
23124: LD_VAR 0 10
23128: PUSH
23129: LD_REAL  1.20000000000000E+0000
23132: MUL
23133: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23134: LD_VAR 0 6
23138: PPUSH
23139: CALL_OW 257
23143: PUSH
23144: LD_INT 5
23146: PUSH
23147: LD_INT 7
23149: PUSH
23150: LD_INT 9
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: LIST
23157: IN
23158: PUSH
23159: LD_VAR 0 1
23163: PPUSH
23164: LD_INT 52
23166: PPUSH
23167: CALL_OW 321
23171: PUSH
23172: LD_INT 2
23174: EQUAL
23175: AND
23176: IFFALSE 23193
// bpoints := bpoints * 1.5 ;
23178: LD_ADDR_VAR 0 10
23182: PUSH
23183: LD_VAR 0 10
23187: PUSH
23188: LD_REAL  1.50000000000000E+0000
23191: MUL
23192: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
23193: LD_VAR 0 1
23197: PPUSH
23198: LD_INT 66
23200: PPUSH
23201: CALL_OW 321
23205: PUSH
23206: LD_INT 2
23208: EQUAL
23209: IFFALSE 23226
// bpoints := bpoints * 1.1 ;
23211: LD_ADDR_VAR 0 10
23215: PUSH
23216: LD_VAR 0 10
23220: PUSH
23221: LD_REAL  1.10000000000000E+0000
23224: MUL
23225: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
23226: LD_ADDR_VAR 0 10
23230: PUSH
23231: LD_VAR 0 10
23235: PUSH
23236: LD_VAR 0 6
23240: PPUSH
23241: LD_INT 1
23243: PPUSH
23244: CALL_OW 259
23248: PUSH
23249: LD_REAL  1.15000000000000E+0000
23252: MUL
23253: MUL
23254: ST_TO_ADDR
// end ; unit_vehicle :
23255: GO 24083
23257: LD_INT 2
23259: DOUBLE
23260: EQUAL
23261: IFTRUE 23265
23263: GO 24071
23265: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
23266: LD_VAR 0 6
23270: PPUSH
23271: CALL_OW 264
23275: PUSH
23276: LD_INT 2
23278: PUSH
23279: LD_INT 42
23281: PUSH
23282: LD_INT 24
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: LIST
23289: IN
23290: IFFALSE 23311
// points := [ 25 , 5 , 3 ] ;
23292: LD_ADDR_VAR 0 9
23296: PUSH
23297: LD_INT 25
23299: PUSH
23300: LD_INT 5
23302: PUSH
23303: LD_INT 3
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: LIST
23310: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
23311: LD_VAR 0 6
23315: PPUSH
23316: CALL_OW 264
23320: PUSH
23321: LD_INT 4
23323: PUSH
23324: LD_INT 43
23326: PUSH
23327: LD_INT 25
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: LIST
23334: IN
23335: IFFALSE 23356
// points := [ 40 , 15 , 5 ] ;
23337: LD_ADDR_VAR 0 9
23341: PUSH
23342: LD_INT 40
23344: PUSH
23345: LD_INT 15
23347: PUSH
23348: LD_INT 5
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: LIST
23355: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
23356: LD_VAR 0 6
23360: PPUSH
23361: CALL_OW 264
23365: PUSH
23366: LD_INT 3
23368: PUSH
23369: LD_INT 23
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: IN
23376: IFFALSE 23397
// points := [ 7 , 25 , 8 ] ;
23378: LD_ADDR_VAR 0 9
23382: PUSH
23383: LD_INT 7
23385: PUSH
23386: LD_INT 25
23388: PUSH
23389: LD_INT 8
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: LIST
23396: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
23397: LD_VAR 0 6
23401: PPUSH
23402: CALL_OW 264
23406: PUSH
23407: LD_INT 5
23409: PUSH
23410: LD_INT 27
23412: PUSH
23413: LD_INT 44
23415: PUSH
23416: EMPTY
23417: LIST
23418: LIST
23419: LIST
23420: IN
23421: IFFALSE 23442
// points := [ 14 , 50 , 16 ] ;
23423: LD_ADDR_VAR 0 9
23427: PUSH
23428: LD_INT 14
23430: PUSH
23431: LD_INT 50
23433: PUSH
23434: LD_INT 16
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: LIST
23441: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
23442: LD_VAR 0 6
23446: PPUSH
23447: CALL_OW 264
23451: PUSH
23452: LD_INT 6
23454: PUSH
23455: LD_INT 46
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: IN
23462: IFFALSE 23483
// points := [ 32 , 120 , 70 ] ;
23464: LD_ADDR_VAR 0 9
23468: PUSH
23469: LD_INT 32
23471: PUSH
23472: LD_INT 120
23474: PUSH
23475: LD_INT 70
23477: PUSH
23478: EMPTY
23479: LIST
23480: LIST
23481: LIST
23482: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
23483: LD_VAR 0 6
23487: PPUSH
23488: CALL_OW 264
23492: PUSH
23493: LD_INT 7
23495: PUSH
23496: LD_INT 28
23498: PUSH
23499: LD_INT 45
23501: PUSH
23502: LD_INT 92
23504: PUSH
23505: EMPTY
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: IN
23511: IFFALSE 23532
// points := [ 35 , 20 , 45 ] ;
23513: LD_ADDR_VAR 0 9
23517: PUSH
23518: LD_INT 35
23520: PUSH
23521: LD_INT 20
23523: PUSH
23524: LD_INT 45
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: LIST
23531: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
23532: LD_VAR 0 6
23536: PPUSH
23537: CALL_OW 264
23541: PUSH
23542: LD_INT 47
23544: PUSH
23545: EMPTY
23546: LIST
23547: IN
23548: IFFALSE 23569
// points := [ 67 , 45 , 75 ] ;
23550: LD_ADDR_VAR 0 9
23554: PUSH
23555: LD_INT 67
23557: PUSH
23558: LD_INT 45
23560: PUSH
23561: LD_INT 75
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: LIST
23568: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
23569: LD_VAR 0 6
23573: PPUSH
23574: CALL_OW 264
23578: PUSH
23579: LD_INT 26
23581: PUSH
23582: EMPTY
23583: LIST
23584: IN
23585: IFFALSE 23606
// points := [ 120 , 30 , 80 ] ;
23587: LD_ADDR_VAR 0 9
23591: PUSH
23592: LD_INT 120
23594: PUSH
23595: LD_INT 30
23597: PUSH
23598: LD_INT 80
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: LIST
23605: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
23606: LD_VAR 0 6
23610: PPUSH
23611: CALL_OW 264
23615: PUSH
23616: LD_INT 22
23618: PUSH
23619: EMPTY
23620: LIST
23621: IN
23622: IFFALSE 23643
// points := [ 40 , 1 , 1 ] ;
23624: LD_ADDR_VAR 0 9
23628: PUSH
23629: LD_INT 40
23631: PUSH
23632: LD_INT 1
23634: PUSH
23635: LD_INT 1
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: LIST
23642: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
23643: LD_VAR 0 6
23647: PPUSH
23648: CALL_OW 264
23652: PUSH
23653: LD_INT 29
23655: PUSH
23656: EMPTY
23657: LIST
23658: IN
23659: IFFALSE 23680
// points := [ 70 , 200 , 400 ] ;
23661: LD_ADDR_VAR 0 9
23665: PUSH
23666: LD_INT 70
23668: PUSH
23669: LD_INT 200
23671: PUSH
23672: LD_INT 400
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: LIST
23679: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
23680: LD_VAR 0 6
23684: PPUSH
23685: CALL_OW 264
23689: PUSH
23690: LD_INT 14
23692: PUSH
23693: LD_INT 53
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: IN
23700: IFFALSE 23721
// points := [ 40 , 10 , 20 ] ;
23702: LD_ADDR_VAR 0 9
23706: PUSH
23707: LD_INT 40
23709: PUSH
23710: LD_INT 10
23712: PUSH
23713: LD_INT 20
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: LIST
23720: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
23721: LD_VAR 0 6
23725: PPUSH
23726: CALL_OW 264
23730: PUSH
23731: LD_INT 9
23733: PUSH
23734: EMPTY
23735: LIST
23736: IN
23737: IFFALSE 23758
// points := [ 5 , 70 , 20 ] ;
23739: LD_ADDR_VAR 0 9
23743: PUSH
23744: LD_INT 5
23746: PUSH
23747: LD_INT 70
23749: PUSH
23750: LD_INT 20
23752: PUSH
23753: EMPTY
23754: LIST
23755: LIST
23756: LIST
23757: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
23758: LD_VAR 0 6
23762: PPUSH
23763: CALL_OW 264
23767: PUSH
23768: LD_INT 10
23770: PUSH
23771: EMPTY
23772: LIST
23773: IN
23774: IFFALSE 23795
// points := [ 35 , 110 , 70 ] ;
23776: LD_ADDR_VAR 0 9
23780: PUSH
23781: LD_INT 35
23783: PUSH
23784: LD_INT 110
23786: PUSH
23787: LD_INT 70
23789: PUSH
23790: EMPTY
23791: LIST
23792: LIST
23793: LIST
23794: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
23795: LD_VAR 0 6
23799: PPUSH
23800: CALL_OW 265
23804: PUSH
23805: LD_INT 25
23807: EQUAL
23808: IFFALSE 23829
// points := [ 80 , 65 , 100 ] ;
23810: LD_ADDR_VAR 0 9
23814: PUSH
23815: LD_INT 80
23817: PUSH
23818: LD_INT 65
23820: PUSH
23821: LD_INT 100
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: LIST
23828: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
23829: LD_VAR 0 6
23833: PPUSH
23834: CALL_OW 263
23838: PUSH
23839: LD_INT 1
23841: EQUAL
23842: IFFALSE 23877
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
23844: LD_ADDR_VAR 0 10
23848: PUSH
23849: LD_VAR 0 10
23853: PUSH
23854: LD_VAR 0 6
23858: PPUSH
23859: CALL_OW 311
23863: PPUSH
23864: LD_INT 3
23866: PPUSH
23867: CALL_OW 259
23871: PUSH
23872: LD_INT 4
23874: MUL
23875: MUL
23876: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
23877: LD_VAR 0 6
23881: PPUSH
23882: CALL_OW 263
23886: PUSH
23887: LD_INT 2
23889: EQUAL
23890: IFFALSE 23941
// begin j := IsControledBy ( i ) ;
23892: LD_ADDR_VAR 0 7
23896: PUSH
23897: LD_VAR 0 6
23901: PPUSH
23902: CALL_OW 312
23906: ST_TO_ADDR
// if j then
23907: LD_VAR 0 7
23911: IFFALSE 23941
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
23913: LD_ADDR_VAR 0 10
23917: PUSH
23918: LD_VAR 0 10
23922: PUSH
23923: LD_VAR 0 7
23927: PPUSH
23928: LD_INT 3
23930: PPUSH
23931: CALL_OW 259
23935: PUSH
23936: LD_INT 3
23938: MUL
23939: MUL
23940: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
23941: LD_VAR 0 6
23945: PPUSH
23946: CALL_OW 264
23950: PUSH
23951: LD_INT 5
23953: PUSH
23954: LD_INT 6
23956: PUSH
23957: LD_INT 46
23959: PUSH
23960: LD_INT 44
23962: PUSH
23963: LD_INT 47
23965: PUSH
23966: LD_INT 45
23968: PUSH
23969: LD_INT 28
23971: PUSH
23972: LD_INT 7
23974: PUSH
23975: LD_INT 27
23977: PUSH
23978: LD_INT 29
23980: PUSH
23981: EMPTY
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: IN
23993: PUSH
23994: LD_VAR 0 1
23998: PPUSH
23999: LD_INT 52
24001: PPUSH
24002: CALL_OW 321
24006: PUSH
24007: LD_INT 2
24009: EQUAL
24010: AND
24011: IFFALSE 24028
// bpoints := bpoints * 1.2 ;
24013: LD_ADDR_VAR 0 10
24017: PUSH
24018: LD_VAR 0 10
24022: PUSH
24023: LD_REAL  1.20000000000000E+0000
24026: MUL
24027: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24028: LD_VAR 0 6
24032: PPUSH
24033: CALL_OW 264
24037: PUSH
24038: LD_INT 6
24040: PUSH
24041: LD_INT 46
24043: PUSH
24044: LD_INT 47
24046: PUSH
24047: EMPTY
24048: LIST
24049: LIST
24050: LIST
24051: IN
24052: IFFALSE 24069
// bpoints := bpoints * 1.2 ;
24054: LD_ADDR_VAR 0 10
24058: PUSH
24059: LD_VAR 0 10
24063: PUSH
24064: LD_REAL  1.20000000000000E+0000
24067: MUL
24068: ST_TO_ADDR
// end ; unit_building :
24069: GO 24083
24071: LD_INT 3
24073: DOUBLE
24074: EQUAL
24075: IFTRUE 24079
24077: GO 24082
24079: POP
// ; end ;
24080: GO 24083
24082: POP
// for j = 1 to 3 do
24083: LD_ADDR_VAR 0 7
24087: PUSH
24088: DOUBLE
24089: LD_INT 1
24091: DEC
24092: ST_TO_ADDR
24093: LD_INT 3
24095: PUSH
24096: FOR_TO
24097: IFFALSE 24150
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24099: LD_ADDR_VAR 0 5
24103: PUSH
24104: LD_VAR 0 5
24108: PPUSH
24109: LD_VAR 0 7
24113: PPUSH
24114: LD_VAR 0 5
24118: PUSH
24119: LD_VAR 0 7
24123: ARRAY
24124: PUSH
24125: LD_VAR 0 9
24129: PUSH
24130: LD_VAR 0 7
24134: ARRAY
24135: PUSH
24136: LD_VAR 0 10
24140: MUL
24141: PLUS
24142: PPUSH
24143: CALL_OW 1
24147: ST_TO_ADDR
24148: GO 24096
24150: POP
24151: POP
// end ;
24152: GO 22631
24154: POP
24155: POP
// result := Replace ( result , 4 , tmp ) ;
24156: LD_ADDR_VAR 0 5
24160: PUSH
24161: LD_VAR 0 5
24165: PPUSH
24166: LD_INT 4
24168: PPUSH
24169: LD_VAR 0 8
24173: PPUSH
24174: CALL_OW 1
24178: ST_TO_ADDR
// end ;
24179: LD_VAR 0 5
24183: RET
// export function DangerAtRange ( unit , range ) ; begin
24184: LD_INT 0
24186: PPUSH
// if not unit then
24187: LD_VAR 0 1
24191: NOT
24192: IFFALSE 24196
// exit ;
24194: GO 24241
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
24196: LD_ADDR_VAR 0 3
24200: PUSH
24201: LD_VAR 0 1
24205: PPUSH
24206: CALL_OW 255
24210: PPUSH
24211: LD_VAR 0 1
24215: PPUSH
24216: CALL_OW 250
24220: PPUSH
24221: LD_VAR 0 1
24225: PPUSH
24226: CALL_OW 251
24230: PPUSH
24231: LD_VAR 0 2
24235: PPUSH
24236: CALL 22483 0 4
24240: ST_TO_ADDR
// end ;
24241: LD_VAR 0 3
24245: RET
// export function DangerInArea ( side , area ) ; begin
24246: LD_INT 0
24248: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
24249: LD_ADDR_VAR 0 3
24253: PUSH
24254: LD_VAR 0 2
24258: PPUSH
24259: LD_INT 81
24261: PUSH
24262: LD_VAR 0 1
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: PPUSH
24271: CALL_OW 70
24275: ST_TO_ADDR
// end ;
24276: LD_VAR 0 3
24280: RET
// export function IsExtension ( b ) ; begin
24281: LD_INT 0
24283: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
24284: LD_ADDR_VAR 0 2
24288: PUSH
24289: LD_VAR 0 1
24293: PUSH
24294: LD_INT 23
24296: PUSH
24297: LD_INT 20
24299: PUSH
24300: LD_INT 22
24302: PUSH
24303: LD_INT 17
24305: PUSH
24306: LD_INT 24
24308: PUSH
24309: LD_INT 21
24311: PUSH
24312: LD_INT 19
24314: PUSH
24315: LD_INT 16
24317: PUSH
24318: LD_INT 25
24320: PUSH
24321: LD_INT 18
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: IN
24336: ST_TO_ADDR
// end ;
24337: LD_VAR 0 2
24341: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
24342: LD_INT 0
24344: PPUSH
24345: PPUSH
24346: PPUSH
// result := [ ] ;
24347: LD_ADDR_VAR 0 4
24351: PUSH
24352: EMPTY
24353: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
24354: LD_ADDR_VAR 0 5
24358: PUSH
24359: LD_VAR 0 2
24363: PPUSH
24364: LD_INT 21
24366: PUSH
24367: LD_INT 3
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: PPUSH
24374: CALL_OW 70
24378: ST_TO_ADDR
// if not tmp then
24379: LD_VAR 0 5
24383: NOT
24384: IFFALSE 24388
// exit ;
24386: GO 24452
// if checkLink then
24388: LD_VAR 0 3
24392: IFFALSE 24442
// begin for i in tmp do
24394: LD_ADDR_VAR 0 6
24398: PUSH
24399: LD_VAR 0 5
24403: PUSH
24404: FOR_IN
24405: IFFALSE 24440
// if GetBase ( i ) <> base then
24407: LD_VAR 0 6
24411: PPUSH
24412: CALL_OW 274
24416: PUSH
24417: LD_VAR 0 1
24421: NONEQUAL
24422: IFFALSE 24438
// ComLinkToBase ( base , i ) ;
24424: LD_VAR 0 1
24428: PPUSH
24429: LD_VAR 0 6
24433: PPUSH
24434: CALL_OW 169
24438: GO 24404
24440: POP
24441: POP
// end ; result := tmp ;
24442: LD_ADDR_VAR 0 4
24446: PUSH
24447: LD_VAR 0 5
24451: ST_TO_ADDR
// end ;
24452: LD_VAR 0 4
24456: RET
// export function ComComplete ( units , b ) ; var i ; begin
24457: LD_INT 0
24459: PPUSH
24460: PPUSH
// if not units then
24461: LD_VAR 0 1
24465: NOT
24466: IFFALSE 24470
// exit ;
24468: GO 24560
// for i in units do
24470: LD_ADDR_VAR 0 4
24474: PUSH
24475: LD_VAR 0 1
24479: PUSH
24480: FOR_IN
24481: IFFALSE 24558
// if BuildingStatus ( b ) = bs_build then
24483: LD_VAR 0 2
24487: PPUSH
24488: CALL_OW 461
24492: PUSH
24493: LD_INT 1
24495: EQUAL
24496: IFFALSE 24556
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
24498: LD_VAR 0 4
24502: PPUSH
24503: LD_STRING h
24505: PUSH
24506: LD_VAR 0 2
24510: PPUSH
24511: CALL_OW 250
24515: PUSH
24516: LD_VAR 0 2
24520: PPUSH
24521: CALL_OW 251
24525: PUSH
24526: LD_VAR 0 2
24530: PUSH
24531: LD_INT 0
24533: PUSH
24534: LD_INT 0
24536: PUSH
24537: LD_INT 0
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: PUSH
24549: EMPTY
24550: LIST
24551: PPUSH
24552: CALL_OW 446
24556: GO 24480
24558: POP
24559: POP
// end ;
24560: LD_VAR 0 3
24564: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
24565: LD_INT 0
24567: PPUSH
24568: PPUSH
24569: PPUSH
24570: PPUSH
24571: PPUSH
24572: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
24573: LD_VAR 0 1
24577: NOT
24578: PUSH
24579: LD_VAR 0 1
24583: PPUSH
24584: CALL_OW 263
24588: PUSH
24589: LD_INT 2
24591: NONEQUAL
24592: OR
24593: IFFALSE 24597
// exit ;
24595: GO 24913
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
24597: LD_ADDR_VAR 0 6
24601: PUSH
24602: LD_INT 22
24604: PUSH
24605: LD_VAR 0 1
24609: PPUSH
24610: CALL_OW 255
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: PUSH
24619: LD_INT 2
24621: PUSH
24622: LD_INT 30
24624: PUSH
24625: LD_INT 36
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: PUSH
24632: LD_INT 34
24634: PUSH
24635: LD_INT 31
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: LIST
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: PPUSH
24651: CALL_OW 69
24655: ST_TO_ADDR
// if not tmp then
24656: LD_VAR 0 6
24660: NOT
24661: IFFALSE 24665
// exit ;
24663: GO 24913
// result := [ ] ;
24665: LD_ADDR_VAR 0 2
24669: PUSH
24670: EMPTY
24671: ST_TO_ADDR
// for i in tmp do
24672: LD_ADDR_VAR 0 3
24676: PUSH
24677: LD_VAR 0 6
24681: PUSH
24682: FOR_IN
24683: IFFALSE 24754
// begin t := UnitsInside ( i ) ;
24685: LD_ADDR_VAR 0 4
24689: PUSH
24690: LD_VAR 0 3
24694: PPUSH
24695: CALL_OW 313
24699: ST_TO_ADDR
// if t then
24700: LD_VAR 0 4
24704: IFFALSE 24752
// for j in t do
24706: LD_ADDR_VAR 0 7
24710: PUSH
24711: LD_VAR 0 4
24715: PUSH
24716: FOR_IN
24717: IFFALSE 24750
// result := Replace ( result , result + 1 , j ) ;
24719: LD_ADDR_VAR 0 2
24723: PUSH
24724: LD_VAR 0 2
24728: PPUSH
24729: LD_VAR 0 2
24733: PUSH
24734: LD_INT 1
24736: PLUS
24737: PPUSH
24738: LD_VAR 0 7
24742: PPUSH
24743: CALL_OW 1
24747: ST_TO_ADDR
24748: GO 24716
24750: POP
24751: POP
// end ;
24752: GO 24682
24754: POP
24755: POP
// if not result then
24756: LD_VAR 0 2
24760: NOT
24761: IFFALSE 24765
// exit ;
24763: GO 24913
// mech := result [ 1 ] ;
24765: LD_ADDR_VAR 0 5
24769: PUSH
24770: LD_VAR 0 2
24774: PUSH
24775: LD_INT 1
24777: ARRAY
24778: ST_TO_ADDR
// if result > 1 then
24779: LD_VAR 0 2
24783: PUSH
24784: LD_INT 1
24786: GREATER
24787: IFFALSE 24899
// begin for i = 2 to result do
24789: LD_ADDR_VAR 0 3
24793: PUSH
24794: DOUBLE
24795: LD_INT 2
24797: DEC
24798: ST_TO_ADDR
24799: LD_VAR 0 2
24803: PUSH
24804: FOR_TO
24805: IFFALSE 24897
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
24807: LD_ADDR_VAR 0 4
24811: PUSH
24812: LD_VAR 0 2
24816: PUSH
24817: LD_VAR 0 3
24821: ARRAY
24822: PPUSH
24823: LD_INT 3
24825: PPUSH
24826: CALL_OW 259
24830: PUSH
24831: LD_VAR 0 2
24835: PUSH
24836: LD_VAR 0 3
24840: ARRAY
24841: PPUSH
24842: CALL_OW 432
24846: MINUS
24847: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
24848: LD_VAR 0 4
24852: PUSH
24853: LD_VAR 0 5
24857: PPUSH
24858: LD_INT 3
24860: PPUSH
24861: CALL_OW 259
24865: PUSH
24866: LD_VAR 0 5
24870: PPUSH
24871: CALL_OW 432
24875: MINUS
24876: GREATEREQUAL
24877: IFFALSE 24895
// mech := result [ i ] ;
24879: LD_ADDR_VAR 0 5
24883: PUSH
24884: LD_VAR 0 2
24888: PUSH
24889: LD_VAR 0 3
24893: ARRAY
24894: ST_TO_ADDR
// end ;
24895: GO 24804
24897: POP
24898: POP
// end ; ComLinkTo ( vehicle , mech ) ;
24899: LD_VAR 0 1
24903: PPUSH
24904: LD_VAR 0 5
24908: PPUSH
24909: CALL_OW 135
// end ;
24913: LD_VAR 0 2
24917: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
24918: LD_INT 0
24920: PPUSH
24921: PPUSH
24922: PPUSH
24923: PPUSH
24924: PPUSH
24925: PPUSH
24926: PPUSH
24927: PPUSH
24928: PPUSH
24929: PPUSH
24930: PPUSH
24931: PPUSH
24932: PPUSH
// result := [ ] ;
24933: LD_ADDR_VAR 0 7
24937: PUSH
24938: EMPTY
24939: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
24940: LD_VAR 0 1
24944: PPUSH
24945: CALL_OW 266
24949: PUSH
24950: LD_INT 0
24952: PUSH
24953: LD_INT 1
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: IN
24960: NOT
24961: IFFALSE 24965
// exit ;
24963: GO 26599
// if name then
24965: LD_VAR 0 3
24969: IFFALSE 24985
// SetBName ( base_dep , name ) ;
24971: LD_VAR 0 1
24975: PPUSH
24976: LD_VAR 0 3
24980: PPUSH
24981: CALL_OW 500
// base := GetBase ( base_dep ) ;
24985: LD_ADDR_VAR 0 15
24989: PUSH
24990: LD_VAR 0 1
24994: PPUSH
24995: CALL_OW 274
24999: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25000: LD_ADDR_VAR 0 16
25004: PUSH
25005: LD_VAR 0 1
25009: PPUSH
25010: CALL_OW 255
25014: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25015: LD_ADDR_VAR 0 17
25019: PUSH
25020: LD_VAR 0 1
25024: PPUSH
25025: CALL_OW 248
25029: ST_TO_ADDR
// if sources then
25030: LD_VAR 0 5
25034: IFFALSE 25081
// for i = 1 to 3 do
25036: LD_ADDR_VAR 0 8
25040: PUSH
25041: DOUBLE
25042: LD_INT 1
25044: DEC
25045: ST_TO_ADDR
25046: LD_INT 3
25048: PUSH
25049: FOR_TO
25050: IFFALSE 25079
// AddResourceType ( base , i , sources [ i ] ) ;
25052: LD_VAR 0 15
25056: PPUSH
25057: LD_VAR 0 8
25061: PPUSH
25062: LD_VAR 0 5
25066: PUSH
25067: LD_VAR 0 8
25071: ARRAY
25072: PPUSH
25073: CALL_OW 276
25077: GO 25049
25079: POP
25080: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
25081: LD_ADDR_VAR 0 18
25085: PUSH
25086: LD_VAR 0 15
25090: PPUSH
25091: LD_VAR 0 2
25095: PPUSH
25096: LD_INT 1
25098: PPUSH
25099: CALL 24342 0 3
25103: ST_TO_ADDR
// InitHc ;
25104: CALL_OW 19
// InitUc ;
25108: CALL_OW 18
// uc_side := side ;
25112: LD_ADDR_OWVAR 20
25116: PUSH
25117: LD_VAR 0 16
25121: ST_TO_ADDR
// uc_nation := nation ;
25122: LD_ADDR_OWVAR 21
25126: PUSH
25127: LD_VAR 0 17
25131: ST_TO_ADDR
// if buildings then
25132: LD_VAR 0 18
25136: IFFALSE 26458
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25138: LD_ADDR_VAR 0 19
25142: PUSH
25143: LD_VAR 0 18
25147: PPUSH
25148: LD_INT 2
25150: PUSH
25151: LD_INT 30
25153: PUSH
25154: LD_INT 29
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: PUSH
25161: LD_INT 30
25163: PUSH
25164: LD_INT 30
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: LIST
25175: PPUSH
25176: CALL_OW 72
25180: ST_TO_ADDR
// if tmp then
25181: LD_VAR 0 19
25185: IFFALSE 25233
// for i in tmp do
25187: LD_ADDR_VAR 0 8
25191: PUSH
25192: LD_VAR 0 19
25196: PUSH
25197: FOR_IN
25198: IFFALSE 25231
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
25200: LD_VAR 0 8
25204: PPUSH
25205: CALL_OW 250
25209: PPUSH
25210: LD_VAR 0 8
25214: PPUSH
25215: CALL_OW 251
25219: PPUSH
25220: LD_VAR 0 16
25224: PPUSH
25225: CALL_OW 441
25229: GO 25197
25231: POP
25232: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
25233: LD_VAR 0 18
25237: PPUSH
25238: LD_INT 2
25240: PUSH
25241: LD_INT 30
25243: PUSH
25244: LD_INT 32
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PUSH
25251: LD_INT 30
25253: PUSH
25254: LD_INT 33
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: LIST
25265: PPUSH
25266: CALL_OW 72
25270: IFFALSE 25358
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
25272: LD_ADDR_VAR 0 8
25276: PUSH
25277: LD_VAR 0 18
25281: PPUSH
25282: LD_INT 2
25284: PUSH
25285: LD_INT 30
25287: PUSH
25288: LD_INT 32
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: PUSH
25295: LD_INT 30
25297: PUSH
25298: LD_INT 33
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: LIST
25309: PPUSH
25310: CALL_OW 72
25314: PUSH
25315: FOR_IN
25316: IFFALSE 25356
// begin if not GetBWeapon ( i ) then
25318: LD_VAR 0 8
25322: PPUSH
25323: CALL_OW 269
25327: NOT
25328: IFFALSE 25354
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
25330: LD_VAR 0 8
25334: PPUSH
25335: LD_VAR 0 8
25339: PPUSH
25340: LD_VAR 0 2
25344: PPUSH
25345: CALL 26604 0 2
25349: PPUSH
25350: CALL_OW 431
// end ;
25354: GO 25315
25356: POP
25357: POP
// end ; for i = 1 to personel do
25358: LD_ADDR_VAR 0 8
25362: PUSH
25363: DOUBLE
25364: LD_INT 1
25366: DEC
25367: ST_TO_ADDR
25368: LD_VAR 0 6
25372: PUSH
25373: FOR_TO
25374: IFFALSE 26438
// begin if i > 4 then
25376: LD_VAR 0 8
25380: PUSH
25381: LD_INT 4
25383: GREATER
25384: IFFALSE 25388
// break ;
25386: GO 26438
// case i of 1 :
25388: LD_VAR 0 8
25392: PUSH
25393: LD_INT 1
25395: DOUBLE
25396: EQUAL
25397: IFTRUE 25401
25399: GO 25481
25401: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
25402: LD_ADDR_VAR 0 12
25406: PUSH
25407: LD_VAR 0 18
25411: PPUSH
25412: LD_INT 22
25414: PUSH
25415: LD_VAR 0 16
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: PUSH
25424: LD_INT 58
25426: PUSH
25427: EMPTY
25428: LIST
25429: PUSH
25430: LD_INT 2
25432: PUSH
25433: LD_INT 30
25435: PUSH
25436: LD_INT 32
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PUSH
25443: LD_INT 30
25445: PUSH
25446: LD_INT 4
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: PUSH
25453: LD_INT 30
25455: PUSH
25456: LD_INT 5
25458: PUSH
25459: EMPTY
25460: LIST
25461: LIST
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: LIST
25473: PPUSH
25474: CALL_OW 72
25478: ST_TO_ADDR
25479: GO 25703
25481: LD_INT 2
25483: DOUBLE
25484: EQUAL
25485: IFTRUE 25489
25487: GO 25551
25489: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
25490: LD_ADDR_VAR 0 12
25494: PUSH
25495: LD_VAR 0 18
25499: PPUSH
25500: LD_INT 22
25502: PUSH
25503: LD_VAR 0 16
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: PUSH
25512: LD_INT 2
25514: PUSH
25515: LD_INT 30
25517: PUSH
25518: LD_INT 0
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: PUSH
25525: LD_INT 30
25527: PUSH
25528: LD_INT 1
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: LIST
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: PPUSH
25544: CALL_OW 72
25548: ST_TO_ADDR
25549: GO 25703
25551: LD_INT 3
25553: DOUBLE
25554: EQUAL
25555: IFTRUE 25559
25557: GO 25621
25559: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
25560: LD_ADDR_VAR 0 12
25564: PUSH
25565: LD_VAR 0 18
25569: PPUSH
25570: LD_INT 22
25572: PUSH
25573: LD_VAR 0 16
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PUSH
25582: LD_INT 2
25584: PUSH
25585: LD_INT 30
25587: PUSH
25588: LD_INT 2
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: LD_INT 30
25597: PUSH
25598: LD_INT 3
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: LIST
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: PPUSH
25614: CALL_OW 72
25618: ST_TO_ADDR
25619: GO 25703
25621: LD_INT 4
25623: DOUBLE
25624: EQUAL
25625: IFTRUE 25629
25627: GO 25702
25629: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
25630: LD_ADDR_VAR 0 12
25634: PUSH
25635: LD_VAR 0 18
25639: PPUSH
25640: LD_INT 22
25642: PUSH
25643: LD_VAR 0 16
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PUSH
25652: LD_INT 2
25654: PUSH
25655: LD_INT 30
25657: PUSH
25658: LD_INT 6
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: PUSH
25665: LD_INT 30
25667: PUSH
25668: LD_INT 7
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: LD_INT 30
25677: PUSH
25678: LD_INT 8
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: PPUSH
25695: CALL_OW 72
25699: ST_TO_ADDR
25700: GO 25703
25702: POP
// if i = 1 then
25703: LD_VAR 0 8
25707: PUSH
25708: LD_INT 1
25710: EQUAL
25711: IFFALSE 25822
// begin tmp := [ ] ;
25713: LD_ADDR_VAR 0 19
25717: PUSH
25718: EMPTY
25719: ST_TO_ADDR
// for j in f do
25720: LD_ADDR_VAR 0 9
25724: PUSH
25725: LD_VAR 0 12
25729: PUSH
25730: FOR_IN
25731: IFFALSE 25804
// if GetBType ( j ) = b_bunker then
25733: LD_VAR 0 9
25737: PPUSH
25738: CALL_OW 266
25742: PUSH
25743: LD_INT 32
25745: EQUAL
25746: IFFALSE 25773
// tmp := Insert ( tmp , 1 , j ) else
25748: LD_ADDR_VAR 0 19
25752: PUSH
25753: LD_VAR 0 19
25757: PPUSH
25758: LD_INT 1
25760: PPUSH
25761: LD_VAR 0 9
25765: PPUSH
25766: CALL_OW 2
25770: ST_TO_ADDR
25771: GO 25802
// tmp := Insert ( tmp , tmp + 1 , j ) ;
25773: LD_ADDR_VAR 0 19
25777: PUSH
25778: LD_VAR 0 19
25782: PPUSH
25783: LD_VAR 0 19
25787: PUSH
25788: LD_INT 1
25790: PLUS
25791: PPUSH
25792: LD_VAR 0 9
25796: PPUSH
25797: CALL_OW 2
25801: ST_TO_ADDR
25802: GO 25730
25804: POP
25805: POP
// if tmp then
25806: LD_VAR 0 19
25810: IFFALSE 25822
// f := tmp ;
25812: LD_ADDR_VAR 0 12
25816: PUSH
25817: LD_VAR 0 19
25821: ST_TO_ADDR
// end ; x := personel [ i ] ;
25822: LD_ADDR_VAR 0 13
25826: PUSH
25827: LD_VAR 0 6
25831: PUSH
25832: LD_VAR 0 8
25836: ARRAY
25837: ST_TO_ADDR
// if x = - 1 then
25838: LD_VAR 0 13
25842: PUSH
25843: LD_INT 1
25845: NEG
25846: EQUAL
25847: IFFALSE 26056
// begin for j in f do
25849: LD_ADDR_VAR 0 9
25853: PUSH
25854: LD_VAR 0 12
25858: PUSH
25859: FOR_IN
25860: IFFALSE 26052
// repeat InitHc ;
25862: CALL_OW 19
// if GetBType ( j ) = b_barracks then
25866: LD_VAR 0 9
25870: PPUSH
25871: CALL_OW 266
25875: PUSH
25876: LD_INT 5
25878: EQUAL
25879: IFFALSE 25949
// begin if UnitsInside ( j ) < 3 then
25881: LD_VAR 0 9
25885: PPUSH
25886: CALL_OW 313
25890: PUSH
25891: LD_INT 3
25893: LESS
25894: IFFALSE 25930
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25896: LD_INT 0
25898: PPUSH
25899: LD_INT 5
25901: PUSH
25902: LD_INT 8
25904: PUSH
25905: LD_INT 9
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: LIST
25912: PUSH
25913: LD_VAR 0 17
25917: ARRAY
25918: PPUSH
25919: LD_VAR 0 4
25923: PPUSH
25924: CALL_OW 380
25928: GO 25947
// PrepareHuman ( false , i , skill ) ;
25930: LD_INT 0
25932: PPUSH
25933: LD_VAR 0 8
25937: PPUSH
25938: LD_VAR 0 4
25942: PPUSH
25943: CALL_OW 380
// end else
25947: GO 25966
// PrepareHuman ( false , i , skill ) ;
25949: LD_INT 0
25951: PPUSH
25952: LD_VAR 0 8
25956: PPUSH
25957: LD_VAR 0 4
25961: PPUSH
25962: CALL_OW 380
// un := CreateHuman ;
25966: LD_ADDR_VAR 0 14
25970: PUSH
25971: CALL_OW 44
25975: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25976: LD_ADDR_VAR 0 7
25980: PUSH
25981: LD_VAR 0 7
25985: PPUSH
25986: LD_INT 1
25988: PPUSH
25989: LD_VAR 0 14
25993: PPUSH
25994: CALL_OW 2
25998: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
25999: LD_VAR 0 14
26003: PPUSH
26004: LD_VAR 0 9
26008: PPUSH
26009: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26013: LD_VAR 0 9
26017: PPUSH
26018: CALL_OW 313
26022: PUSH
26023: LD_INT 6
26025: EQUAL
26026: PUSH
26027: LD_VAR 0 9
26031: PPUSH
26032: CALL_OW 266
26036: PUSH
26037: LD_INT 32
26039: PUSH
26040: LD_INT 31
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: IN
26047: OR
26048: IFFALSE 25862
26050: GO 25859
26052: POP
26053: POP
// end else
26054: GO 26436
// for j = 1 to x do
26056: LD_ADDR_VAR 0 9
26060: PUSH
26061: DOUBLE
26062: LD_INT 1
26064: DEC
26065: ST_TO_ADDR
26066: LD_VAR 0 13
26070: PUSH
26071: FOR_TO
26072: IFFALSE 26434
// begin InitHc ;
26074: CALL_OW 19
// if not f then
26078: LD_VAR 0 12
26082: NOT
26083: IFFALSE 26172
// begin PrepareHuman ( false , i , skill ) ;
26085: LD_INT 0
26087: PPUSH
26088: LD_VAR 0 8
26092: PPUSH
26093: LD_VAR 0 4
26097: PPUSH
26098: CALL_OW 380
// un := CreateHuman ;
26102: LD_ADDR_VAR 0 14
26106: PUSH
26107: CALL_OW 44
26111: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26112: LD_ADDR_VAR 0 7
26116: PUSH
26117: LD_VAR 0 7
26121: PPUSH
26122: LD_INT 1
26124: PPUSH
26125: LD_VAR 0 14
26129: PPUSH
26130: CALL_OW 2
26134: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26135: LD_VAR 0 14
26139: PPUSH
26140: LD_VAR 0 1
26144: PPUSH
26145: CALL_OW 250
26149: PPUSH
26150: LD_VAR 0 1
26154: PPUSH
26155: CALL_OW 251
26159: PPUSH
26160: LD_INT 10
26162: PPUSH
26163: LD_INT 0
26165: PPUSH
26166: CALL_OW 50
// continue ;
26170: GO 26071
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26172: LD_VAR 0 12
26176: PUSH
26177: LD_INT 1
26179: ARRAY
26180: PPUSH
26181: CALL_OW 313
26185: PUSH
26186: LD_VAR 0 12
26190: PUSH
26191: LD_INT 1
26193: ARRAY
26194: PPUSH
26195: CALL_OW 266
26199: PUSH
26200: LD_INT 32
26202: PUSH
26203: LD_INT 31
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: IN
26210: AND
26211: PUSH
26212: LD_VAR 0 12
26216: PUSH
26217: LD_INT 1
26219: ARRAY
26220: PPUSH
26221: CALL_OW 313
26225: PUSH
26226: LD_INT 6
26228: EQUAL
26229: OR
26230: IFFALSE 26250
// f := Delete ( f , 1 ) ;
26232: LD_ADDR_VAR 0 12
26236: PUSH
26237: LD_VAR 0 12
26241: PPUSH
26242: LD_INT 1
26244: PPUSH
26245: CALL_OW 3
26249: ST_TO_ADDR
// if not f then
26250: LD_VAR 0 12
26254: NOT
26255: IFFALSE 26273
// begin x := x + 2 ;
26257: LD_ADDR_VAR 0 13
26261: PUSH
26262: LD_VAR 0 13
26266: PUSH
26267: LD_INT 2
26269: PLUS
26270: ST_TO_ADDR
// continue ;
26271: GO 26071
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
26273: LD_VAR 0 12
26277: PUSH
26278: LD_INT 1
26280: ARRAY
26281: PPUSH
26282: CALL_OW 266
26286: PUSH
26287: LD_INT 5
26289: EQUAL
26290: IFFALSE 26364
// begin if UnitsInside ( f [ 1 ] ) < 3 then
26292: LD_VAR 0 12
26296: PUSH
26297: LD_INT 1
26299: ARRAY
26300: PPUSH
26301: CALL_OW 313
26305: PUSH
26306: LD_INT 3
26308: LESS
26309: IFFALSE 26345
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26311: LD_INT 0
26313: PPUSH
26314: LD_INT 5
26316: PUSH
26317: LD_INT 8
26319: PUSH
26320: LD_INT 9
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: LIST
26327: PUSH
26328: LD_VAR 0 17
26332: ARRAY
26333: PPUSH
26334: LD_VAR 0 4
26338: PPUSH
26339: CALL_OW 380
26343: GO 26362
// PrepareHuman ( false , i , skill ) ;
26345: LD_INT 0
26347: PPUSH
26348: LD_VAR 0 8
26352: PPUSH
26353: LD_VAR 0 4
26357: PPUSH
26358: CALL_OW 380
// end else
26362: GO 26381
// PrepareHuman ( false , i , skill ) ;
26364: LD_INT 0
26366: PPUSH
26367: LD_VAR 0 8
26371: PPUSH
26372: LD_VAR 0 4
26376: PPUSH
26377: CALL_OW 380
// un := CreateHuman ;
26381: LD_ADDR_VAR 0 14
26385: PUSH
26386: CALL_OW 44
26390: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26391: LD_ADDR_VAR 0 7
26395: PUSH
26396: LD_VAR 0 7
26400: PPUSH
26401: LD_INT 1
26403: PPUSH
26404: LD_VAR 0 14
26408: PPUSH
26409: CALL_OW 2
26413: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
26414: LD_VAR 0 14
26418: PPUSH
26419: LD_VAR 0 12
26423: PUSH
26424: LD_INT 1
26426: ARRAY
26427: PPUSH
26428: CALL_OW 52
// end ;
26432: GO 26071
26434: POP
26435: POP
// end ;
26436: GO 25373
26438: POP
26439: POP
// result := result ^ buildings ;
26440: LD_ADDR_VAR 0 7
26444: PUSH
26445: LD_VAR 0 7
26449: PUSH
26450: LD_VAR 0 18
26454: ADD
26455: ST_TO_ADDR
// end else
26456: GO 26599
// begin for i = 1 to personel do
26458: LD_ADDR_VAR 0 8
26462: PUSH
26463: DOUBLE
26464: LD_INT 1
26466: DEC
26467: ST_TO_ADDR
26468: LD_VAR 0 6
26472: PUSH
26473: FOR_TO
26474: IFFALSE 26597
// begin if i > 4 then
26476: LD_VAR 0 8
26480: PUSH
26481: LD_INT 4
26483: GREATER
26484: IFFALSE 26488
// break ;
26486: GO 26597
// x := personel [ i ] ;
26488: LD_ADDR_VAR 0 13
26492: PUSH
26493: LD_VAR 0 6
26497: PUSH
26498: LD_VAR 0 8
26502: ARRAY
26503: ST_TO_ADDR
// if x = - 1 then
26504: LD_VAR 0 13
26508: PUSH
26509: LD_INT 1
26511: NEG
26512: EQUAL
26513: IFFALSE 26517
// continue ;
26515: GO 26473
// PrepareHuman ( false , i , skill ) ;
26517: LD_INT 0
26519: PPUSH
26520: LD_VAR 0 8
26524: PPUSH
26525: LD_VAR 0 4
26529: PPUSH
26530: CALL_OW 380
// un := CreateHuman ;
26534: LD_ADDR_VAR 0 14
26538: PUSH
26539: CALL_OW 44
26543: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26544: LD_VAR 0 14
26548: PPUSH
26549: LD_VAR 0 1
26553: PPUSH
26554: CALL_OW 250
26558: PPUSH
26559: LD_VAR 0 1
26563: PPUSH
26564: CALL_OW 251
26568: PPUSH
26569: LD_INT 10
26571: PPUSH
26572: LD_INT 0
26574: PPUSH
26575: CALL_OW 50
// result := result ^ un ;
26579: LD_ADDR_VAR 0 7
26583: PUSH
26584: LD_VAR 0 7
26588: PUSH
26589: LD_VAR 0 14
26593: ADD
26594: ST_TO_ADDR
// end ;
26595: GO 26473
26597: POP
26598: POP
// end ; end ;
26599: LD_VAR 0 7
26603: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
26604: LD_INT 0
26606: PPUSH
26607: PPUSH
26608: PPUSH
26609: PPUSH
26610: PPUSH
26611: PPUSH
26612: PPUSH
26613: PPUSH
26614: PPUSH
26615: PPUSH
26616: PPUSH
26617: PPUSH
26618: PPUSH
26619: PPUSH
26620: PPUSH
26621: PPUSH
// result := false ;
26622: LD_ADDR_VAR 0 3
26626: PUSH
26627: LD_INT 0
26629: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
26630: LD_VAR 0 1
26634: NOT
26635: PUSH
26636: LD_VAR 0 1
26640: PPUSH
26641: CALL_OW 266
26645: PUSH
26646: LD_INT 32
26648: PUSH
26649: LD_INT 33
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: IN
26656: NOT
26657: OR
26658: IFFALSE 26662
// exit ;
26660: GO 27771
// nat := GetNation ( tower ) ;
26662: LD_ADDR_VAR 0 12
26666: PUSH
26667: LD_VAR 0 1
26671: PPUSH
26672: CALL_OW 248
26676: ST_TO_ADDR
// side := GetSide ( tower ) ;
26677: LD_ADDR_VAR 0 16
26681: PUSH
26682: LD_VAR 0 1
26686: PPUSH
26687: CALL_OW 255
26691: ST_TO_ADDR
// x := GetX ( tower ) ;
26692: LD_ADDR_VAR 0 10
26696: PUSH
26697: LD_VAR 0 1
26701: PPUSH
26702: CALL_OW 250
26706: ST_TO_ADDR
// y := GetY ( tower ) ;
26707: LD_ADDR_VAR 0 11
26711: PUSH
26712: LD_VAR 0 1
26716: PPUSH
26717: CALL_OW 251
26721: ST_TO_ADDR
// if not x or not y then
26722: LD_VAR 0 10
26726: NOT
26727: PUSH
26728: LD_VAR 0 11
26732: NOT
26733: OR
26734: IFFALSE 26738
// exit ;
26736: GO 27771
// weapon := 0 ;
26738: LD_ADDR_VAR 0 18
26742: PUSH
26743: LD_INT 0
26745: ST_TO_ADDR
// fac_list := [ ] ;
26746: LD_ADDR_VAR 0 17
26750: PUSH
26751: EMPTY
26752: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
26753: LD_ADDR_VAR 0 6
26757: PUSH
26758: LD_VAR 0 1
26762: PPUSH
26763: CALL_OW 274
26767: PPUSH
26768: LD_VAR 0 2
26772: PPUSH
26773: LD_INT 0
26775: PPUSH
26776: CALL 24342 0 3
26780: PPUSH
26781: LD_INT 30
26783: PUSH
26784: LD_INT 3
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PPUSH
26791: CALL_OW 72
26795: ST_TO_ADDR
// if not factories then
26796: LD_VAR 0 6
26800: NOT
26801: IFFALSE 26805
// exit ;
26803: GO 27771
// for i in factories do
26805: LD_ADDR_VAR 0 8
26809: PUSH
26810: LD_VAR 0 6
26814: PUSH
26815: FOR_IN
26816: IFFALSE 26841
// fac_list := fac_list union AvailableWeaponList ( i ) ;
26818: LD_ADDR_VAR 0 17
26822: PUSH
26823: LD_VAR 0 17
26827: PUSH
26828: LD_VAR 0 8
26832: PPUSH
26833: CALL_OW 478
26837: UNION
26838: ST_TO_ADDR
26839: GO 26815
26841: POP
26842: POP
// if not fac_list then
26843: LD_VAR 0 17
26847: NOT
26848: IFFALSE 26852
// exit ;
26850: GO 27771
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
26852: LD_ADDR_VAR 0 5
26856: PUSH
26857: LD_INT 4
26859: PUSH
26860: LD_INT 5
26862: PUSH
26863: LD_INT 9
26865: PUSH
26866: LD_INT 10
26868: PUSH
26869: LD_INT 6
26871: PUSH
26872: LD_INT 7
26874: PUSH
26875: LD_INT 11
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: PUSH
26887: LD_INT 27
26889: PUSH
26890: LD_INT 28
26892: PUSH
26893: LD_INT 26
26895: PUSH
26896: LD_INT 30
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 43
26907: PUSH
26908: LD_INT 44
26910: PUSH
26911: LD_INT 46
26913: PUSH
26914: LD_INT 45
26916: PUSH
26917: LD_INT 47
26919: PUSH
26920: LD_INT 49
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: PUSH
26931: EMPTY
26932: LIST
26933: LIST
26934: LIST
26935: PUSH
26936: LD_VAR 0 12
26940: ARRAY
26941: ST_TO_ADDR
// list := list isect fac_list ;
26942: LD_ADDR_VAR 0 5
26946: PUSH
26947: LD_VAR 0 5
26951: PUSH
26952: LD_VAR 0 17
26956: ISECT
26957: ST_TO_ADDR
// if not list then
26958: LD_VAR 0 5
26962: NOT
26963: IFFALSE 26967
// exit ;
26965: GO 27771
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
26967: LD_VAR 0 12
26971: PUSH
26972: LD_INT 3
26974: EQUAL
26975: PUSH
26976: LD_INT 49
26978: PUSH
26979: LD_VAR 0 5
26983: IN
26984: AND
26985: PUSH
26986: LD_INT 31
26988: PPUSH
26989: LD_VAR 0 16
26993: PPUSH
26994: CALL_OW 321
26998: PUSH
26999: LD_INT 2
27001: EQUAL
27002: AND
27003: IFFALSE 27063
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27005: LD_INT 22
27007: PUSH
27008: LD_VAR 0 16
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PUSH
27017: LD_INT 35
27019: PUSH
27020: LD_INT 49
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: LD_INT 91
27029: PUSH
27030: LD_VAR 0 1
27034: PUSH
27035: LD_INT 10
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: LIST
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: LIST
27047: PPUSH
27048: CALL_OW 69
27052: NOT
27053: IFFALSE 27063
// weapon := ru_time_lapser ;
27055: LD_ADDR_VAR 0 18
27059: PUSH
27060: LD_INT 49
27062: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27063: LD_VAR 0 12
27067: PUSH
27068: LD_INT 1
27070: PUSH
27071: LD_INT 2
27073: PUSH
27074: EMPTY
27075: LIST
27076: LIST
27077: IN
27078: PUSH
27079: LD_INT 11
27081: PUSH
27082: LD_VAR 0 5
27086: IN
27087: PUSH
27088: LD_INT 30
27090: PUSH
27091: LD_VAR 0 5
27095: IN
27096: OR
27097: AND
27098: PUSH
27099: LD_INT 6
27101: PPUSH
27102: LD_VAR 0 16
27106: PPUSH
27107: CALL_OW 321
27111: PUSH
27112: LD_INT 2
27114: EQUAL
27115: AND
27116: IFFALSE 27281
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27118: LD_INT 22
27120: PUSH
27121: LD_VAR 0 16
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: LD_INT 2
27132: PUSH
27133: LD_INT 35
27135: PUSH
27136: LD_INT 11
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: LD_INT 35
27145: PUSH
27146: LD_INT 30
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: LIST
27157: PUSH
27158: LD_INT 91
27160: PUSH
27161: LD_VAR 0 1
27165: PUSH
27166: LD_INT 18
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: LIST
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: LIST
27178: PPUSH
27179: CALL_OW 69
27183: NOT
27184: PUSH
27185: LD_INT 22
27187: PUSH
27188: LD_VAR 0 16
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: LD_INT 2
27199: PUSH
27200: LD_INT 30
27202: PUSH
27203: LD_INT 32
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: PUSH
27210: LD_INT 30
27212: PUSH
27213: LD_INT 33
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: LIST
27224: PUSH
27225: LD_INT 91
27227: PUSH
27228: LD_VAR 0 1
27232: PUSH
27233: LD_INT 12
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: LIST
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: LIST
27245: PUSH
27246: EMPTY
27247: LIST
27248: PPUSH
27249: CALL_OW 69
27253: PUSH
27254: LD_INT 2
27256: GREATER
27257: AND
27258: IFFALSE 27281
// weapon := [ us_radar , ar_radar ] [ nat ] ;
27260: LD_ADDR_VAR 0 18
27264: PUSH
27265: LD_INT 11
27267: PUSH
27268: LD_INT 30
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PUSH
27275: LD_VAR 0 12
27279: ARRAY
27280: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
27281: LD_VAR 0 18
27285: NOT
27286: PUSH
27287: LD_INT 40
27289: PPUSH
27290: LD_VAR 0 16
27294: PPUSH
27295: CALL_OW 321
27299: PUSH
27300: LD_INT 2
27302: EQUAL
27303: AND
27304: PUSH
27305: LD_INT 7
27307: PUSH
27308: LD_VAR 0 5
27312: IN
27313: PUSH
27314: LD_INT 28
27316: PUSH
27317: LD_VAR 0 5
27321: IN
27322: OR
27323: PUSH
27324: LD_INT 45
27326: PUSH
27327: LD_VAR 0 5
27331: IN
27332: OR
27333: AND
27334: IFFALSE 27588
// begin hex := GetHexInfo ( x , y ) ;
27336: LD_ADDR_VAR 0 4
27340: PUSH
27341: LD_VAR 0 10
27345: PPUSH
27346: LD_VAR 0 11
27350: PPUSH
27351: CALL_OW 546
27355: ST_TO_ADDR
// if hex [ 1 ] then
27356: LD_VAR 0 4
27360: PUSH
27361: LD_INT 1
27363: ARRAY
27364: IFFALSE 27368
// exit ;
27366: GO 27771
// height := hex [ 2 ] ;
27368: LD_ADDR_VAR 0 15
27372: PUSH
27373: LD_VAR 0 4
27377: PUSH
27378: LD_INT 2
27380: ARRAY
27381: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
27382: LD_ADDR_VAR 0 14
27386: PUSH
27387: LD_INT 0
27389: PUSH
27390: LD_INT 2
27392: PUSH
27393: LD_INT 3
27395: PUSH
27396: LD_INT 5
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: ST_TO_ADDR
// for i in tmp do
27405: LD_ADDR_VAR 0 8
27409: PUSH
27410: LD_VAR 0 14
27414: PUSH
27415: FOR_IN
27416: IFFALSE 27586
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
27418: LD_ADDR_VAR 0 9
27422: PUSH
27423: LD_VAR 0 10
27427: PPUSH
27428: LD_VAR 0 8
27432: PPUSH
27433: LD_INT 5
27435: PPUSH
27436: CALL_OW 272
27440: PUSH
27441: LD_VAR 0 11
27445: PPUSH
27446: LD_VAR 0 8
27450: PPUSH
27451: LD_INT 5
27453: PPUSH
27454: CALL_OW 273
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
27463: LD_VAR 0 9
27467: PUSH
27468: LD_INT 1
27470: ARRAY
27471: PPUSH
27472: LD_VAR 0 9
27476: PUSH
27477: LD_INT 2
27479: ARRAY
27480: PPUSH
27481: CALL_OW 488
27485: IFFALSE 27584
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
27487: LD_ADDR_VAR 0 4
27491: PUSH
27492: LD_VAR 0 9
27496: PUSH
27497: LD_INT 1
27499: ARRAY
27500: PPUSH
27501: LD_VAR 0 9
27505: PUSH
27506: LD_INT 2
27508: ARRAY
27509: PPUSH
27510: CALL_OW 546
27514: ST_TO_ADDR
// if hex [ 1 ] then
27515: LD_VAR 0 4
27519: PUSH
27520: LD_INT 1
27522: ARRAY
27523: IFFALSE 27527
// continue ;
27525: GO 27415
// h := hex [ 2 ] ;
27527: LD_ADDR_VAR 0 13
27531: PUSH
27532: LD_VAR 0 4
27536: PUSH
27537: LD_INT 2
27539: ARRAY
27540: ST_TO_ADDR
// if h + 7 < height then
27541: LD_VAR 0 13
27545: PUSH
27546: LD_INT 7
27548: PLUS
27549: PUSH
27550: LD_VAR 0 15
27554: LESS
27555: IFFALSE 27584
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
27557: LD_ADDR_VAR 0 18
27561: PUSH
27562: LD_INT 7
27564: PUSH
27565: LD_INT 28
27567: PUSH
27568: LD_INT 45
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: LIST
27575: PUSH
27576: LD_VAR 0 12
27580: ARRAY
27581: ST_TO_ADDR
// break ;
27582: GO 27586
// end ; end ; end ;
27584: GO 27415
27586: POP
27587: POP
// end ; if not weapon then
27588: LD_VAR 0 18
27592: NOT
27593: IFFALSE 27653
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
27595: LD_ADDR_VAR 0 5
27599: PUSH
27600: LD_VAR 0 5
27604: PUSH
27605: LD_INT 11
27607: PUSH
27608: LD_INT 30
27610: PUSH
27611: LD_INT 49
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: LIST
27618: DIFF
27619: ST_TO_ADDR
// if not list then
27620: LD_VAR 0 5
27624: NOT
27625: IFFALSE 27629
// exit ;
27627: GO 27771
// weapon := list [ rand ( 1 , list ) ] ;
27629: LD_ADDR_VAR 0 18
27633: PUSH
27634: LD_VAR 0 5
27638: PUSH
27639: LD_INT 1
27641: PPUSH
27642: LD_VAR 0 5
27646: PPUSH
27647: CALL_OW 12
27651: ARRAY
27652: ST_TO_ADDR
// end ; if weapon then
27653: LD_VAR 0 18
27657: IFFALSE 27771
// begin tmp := CostOfWeapon ( weapon ) ;
27659: LD_ADDR_VAR 0 14
27663: PUSH
27664: LD_VAR 0 18
27668: PPUSH
27669: CALL_OW 451
27673: ST_TO_ADDR
// j := GetBase ( tower ) ;
27674: LD_ADDR_VAR 0 9
27678: PUSH
27679: LD_VAR 0 1
27683: PPUSH
27684: CALL_OW 274
27688: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
27689: LD_VAR 0 9
27693: PPUSH
27694: LD_INT 1
27696: PPUSH
27697: CALL_OW 275
27701: PUSH
27702: LD_VAR 0 14
27706: PUSH
27707: LD_INT 1
27709: ARRAY
27710: GREATEREQUAL
27711: PUSH
27712: LD_VAR 0 9
27716: PPUSH
27717: LD_INT 2
27719: PPUSH
27720: CALL_OW 275
27724: PUSH
27725: LD_VAR 0 14
27729: PUSH
27730: LD_INT 2
27732: ARRAY
27733: GREATEREQUAL
27734: AND
27735: PUSH
27736: LD_VAR 0 9
27740: PPUSH
27741: LD_INT 3
27743: PPUSH
27744: CALL_OW 275
27748: PUSH
27749: LD_VAR 0 14
27753: PUSH
27754: LD_INT 3
27756: ARRAY
27757: GREATEREQUAL
27758: AND
27759: IFFALSE 27771
// result := weapon ;
27761: LD_ADDR_VAR 0 3
27765: PUSH
27766: LD_VAR 0 18
27770: ST_TO_ADDR
// end ; end ;
27771: LD_VAR 0 3
27775: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
27776: LD_INT 0
27778: PPUSH
27779: PPUSH
// result := true ;
27780: LD_ADDR_VAR 0 3
27784: PUSH
27785: LD_INT 1
27787: ST_TO_ADDR
// if array1 = array2 then
27788: LD_VAR 0 1
27792: PUSH
27793: LD_VAR 0 2
27797: EQUAL
27798: IFFALSE 27858
// begin for i = 1 to array1 do
27800: LD_ADDR_VAR 0 4
27804: PUSH
27805: DOUBLE
27806: LD_INT 1
27808: DEC
27809: ST_TO_ADDR
27810: LD_VAR 0 1
27814: PUSH
27815: FOR_TO
27816: IFFALSE 27854
// if array1 [ i ] <> array2 [ i ] then
27818: LD_VAR 0 1
27822: PUSH
27823: LD_VAR 0 4
27827: ARRAY
27828: PUSH
27829: LD_VAR 0 2
27833: PUSH
27834: LD_VAR 0 4
27838: ARRAY
27839: NONEQUAL
27840: IFFALSE 27852
// begin result := false ;
27842: LD_ADDR_VAR 0 3
27846: PUSH
27847: LD_INT 0
27849: ST_TO_ADDR
// break ;
27850: GO 27854
// end ;
27852: GO 27815
27854: POP
27855: POP
// end else
27856: GO 27866
// result := false ;
27858: LD_ADDR_VAR 0 3
27862: PUSH
27863: LD_INT 0
27865: ST_TO_ADDR
// end ;
27866: LD_VAR 0 3
27870: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
27871: LD_INT 0
27873: PPUSH
27874: PPUSH
// if not array1 or not array2 then
27875: LD_VAR 0 1
27879: NOT
27880: PUSH
27881: LD_VAR 0 2
27885: NOT
27886: OR
27887: IFFALSE 27891
// exit ;
27889: GO 27955
// result := true ;
27891: LD_ADDR_VAR 0 3
27895: PUSH
27896: LD_INT 1
27898: ST_TO_ADDR
// for i = 1 to array1 do
27899: LD_ADDR_VAR 0 4
27903: PUSH
27904: DOUBLE
27905: LD_INT 1
27907: DEC
27908: ST_TO_ADDR
27909: LD_VAR 0 1
27913: PUSH
27914: FOR_TO
27915: IFFALSE 27953
// if array1 [ i ] <> array2 [ i ] then
27917: LD_VAR 0 1
27921: PUSH
27922: LD_VAR 0 4
27926: ARRAY
27927: PUSH
27928: LD_VAR 0 2
27932: PUSH
27933: LD_VAR 0 4
27937: ARRAY
27938: NONEQUAL
27939: IFFALSE 27951
// begin result := false ;
27941: LD_ADDR_VAR 0 3
27945: PUSH
27946: LD_INT 0
27948: ST_TO_ADDR
// break ;
27949: GO 27953
// end ;
27951: GO 27914
27953: POP
27954: POP
// end ;
27955: LD_VAR 0 3
27959: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
27960: LD_INT 0
27962: PPUSH
27963: PPUSH
27964: PPUSH
// pom := GetBase ( fac ) ;
27965: LD_ADDR_VAR 0 5
27969: PUSH
27970: LD_VAR 0 1
27974: PPUSH
27975: CALL_OW 274
27979: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
27980: LD_ADDR_VAR 0 4
27984: PUSH
27985: LD_VAR 0 2
27989: PUSH
27990: LD_INT 1
27992: ARRAY
27993: PPUSH
27994: LD_VAR 0 2
27998: PUSH
27999: LD_INT 2
28001: ARRAY
28002: PPUSH
28003: LD_VAR 0 2
28007: PUSH
28008: LD_INT 3
28010: ARRAY
28011: PPUSH
28012: LD_VAR 0 2
28016: PUSH
28017: LD_INT 4
28019: ARRAY
28020: PPUSH
28021: CALL_OW 449
28025: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28026: LD_ADDR_VAR 0 3
28030: PUSH
28031: LD_VAR 0 5
28035: PPUSH
28036: LD_INT 1
28038: PPUSH
28039: CALL_OW 275
28043: PUSH
28044: LD_VAR 0 4
28048: PUSH
28049: LD_INT 1
28051: ARRAY
28052: GREATEREQUAL
28053: PUSH
28054: LD_VAR 0 5
28058: PPUSH
28059: LD_INT 2
28061: PPUSH
28062: CALL_OW 275
28066: PUSH
28067: LD_VAR 0 4
28071: PUSH
28072: LD_INT 2
28074: ARRAY
28075: GREATEREQUAL
28076: AND
28077: PUSH
28078: LD_VAR 0 5
28082: PPUSH
28083: LD_INT 3
28085: PPUSH
28086: CALL_OW 275
28090: PUSH
28091: LD_VAR 0 4
28095: PUSH
28096: LD_INT 3
28098: ARRAY
28099: GREATEREQUAL
28100: AND
28101: ST_TO_ADDR
// end ;
28102: LD_VAR 0 3
28106: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28107: LD_INT 0
28109: PPUSH
28110: PPUSH
28111: PPUSH
28112: PPUSH
// pom := GetBase ( building ) ;
28113: LD_ADDR_VAR 0 3
28117: PUSH
28118: LD_VAR 0 1
28122: PPUSH
28123: CALL_OW 274
28127: ST_TO_ADDR
// if not pom then
28128: LD_VAR 0 3
28132: NOT
28133: IFFALSE 28137
// exit ;
28135: GO 28307
// btype := GetBType ( building ) ;
28137: LD_ADDR_VAR 0 5
28141: PUSH
28142: LD_VAR 0 1
28146: PPUSH
28147: CALL_OW 266
28151: ST_TO_ADDR
// if btype = b_armoury then
28152: LD_VAR 0 5
28156: PUSH
28157: LD_INT 4
28159: EQUAL
28160: IFFALSE 28170
// btype := b_barracks ;
28162: LD_ADDR_VAR 0 5
28166: PUSH
28167: LD_INT 5
28169: ST_TO_ADDR
// if btype = b_depot then
28170: LD_VAR 0 5
28174: PUSH
28175: LD_INT 0
28177: EQUAL
28178: IFFALSE 28188
// btype := b_warehouse ;
28180: LD_ADDR_VAR 0 5
28184: PUSH
28185: LD_INT 1
28187: ST_TO_ADDR
// if btype = b_workshop then
28188: LD_VAR 0 5
28192: PUSH
28193: LD_INT 2
28195: EQUAL
28196: IFFALSE 28206
// btype := b_factory ;
28198: LD_ADDR_VAR 0 5
28202: PUSH
28203: LD_INT 3
28205: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28206: LD_ADDR_VAR 0 4
28210: PUSH
28211: LD_VAR 0 5
28215: PPUSH
28216: LD_VAR 0 1
28220: PPUSH
28221: CALL_OW 248
28225: PPUSH
28226: CALL_OW 450
28230: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28231: LD_ADDR_VAR 0 2
28235: PUSH
28236: LD_VAR 0 3
28240: PPUSH
28241: LD_INT 1
28243: PPUSH
28244: CALL_OW 275
28248: PUSH
28249: LD_VAR 0 4
28253: PUSH
28254: LD_INT 1
28256: ARRAY
28257: GREATEREQUAL
28258: PUSH
28259: LD_VAR 0 3
28263: PPUSH
28264: LD_INT 2
28266: PPUSH
28267: CALL_OW 275
28271: PUSH
28272: LD_VAR 0 4
28276: PUSH
28277: LD_INT 2
28279: ARRAY
28280: GREATEREQUAL
28281: AND
28282: PUSH
28283: LD_VAR 0 3
28287: PPUSH
28288: LD_INT 3
28290: PPUSH
28291: CALL_OW 275
28295: PUSH
28296: LD_VAR 0 4
28300: PUSH
28301: LD_INT 3
28303: ARRAY
28304: GREATEREQUAL
28305: AND
28306: ST_TO_ADDR
// end ;
28307: LD_VAR 0 2
28311: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
28312: LD_INT 0
28314: PPUSH
28315: PPUSH
28316: PPUSH
// pom := GetBase ( building ) ;
28317: LD_ADDR_VAR 0 4
28321: PUSH
28322: LD_VAR 0 1
28326: PPUSH
28327: CALL_OW 274
28331: ST_TO_ADDR
// if not pom then
28332: LD_VAR 0 4
28336: NOT
28337: IFFALSE 28341
// exit ;
28339: GO 28442
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28341: LD_ADDR_VAR 0 5
28345: PUSH
28346: LD_VAR 0 2
28350: PPUSH
28351: LD_VAR 0 1
28355: PPUSH
28356: CALL_OW 248
28360: PPUSH
28361: CALL_OW 450
28365: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28366: LD_ADDR_VAR 0 3
28370: PUSH
28371: LD_VAR 0 4
28375: PPUSH
28376: LD_INT 1
28378: PPUSH
28379: CALL_OW 275
28383: PUSH
28384: LD_VAR 0 5
28388: PUSH
28389: LD_INT 1
28391: ARRAY
28392: GREATEREQUAL
28393: PUSH
28394: LD_VAR 0 4
28398: PPUSH
28399: LD_INT 2
28401: PPUSH
28402: CALL_OW 275
28406: PUSH
28407: LD_VAR 0 5
28411: PUSH
28412: LD_INT 2
28414: ARRAY
28415: GREATEREQUAL
28416: AND
28417: PUSH
28418: LD_VAR 0 4
28422: PPUSH
28423: LD_INT 3
28425: PPUSH
28426: CALL_OW 275
28430: PUSH
28431: LD_VAR 0 5
28435: PUSH
28436: LD_INT 3
28438: ARRAY
28439: GREATEREQUAL
28440: AND
28441: ST_TO_ADDR
// end ;
28442: LD_VAR 0 3
28446: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
28447: LD_INT 0
28449: PPUSH
28450: PPUSH
28451: PPUSH
28452: PPUSH
28453: PPUSH
28454: PPUSH
28455: PPUSH
28456: PPUSH
28457: PPUSH
28458: PPUSH
28459: PPUSH
// result := false ;
28460: LD_ADDR_VAR 0 8
28464: PUSH
28465: LD_INT 0
28467: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
28468: LD_VAR 0 5
28472: NOT
28473: PUSH
28474: LD_VAR 0 1
28478: NOT
28479: OR
28480: PUSH
28481: LD_VAR 0 2
28485: NOT
28486: OR
28487: PUSH
28488: LD_VAR 0 3
28492: NOT
28493: OR
28494: IFFALSE 28498
// exit ;
28496: GO 29312
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
28498: LD_ADDR_VAR 0 14
28502: PUSH
28503: LD_VAR 0 1
28507: PPUSH
28508: LD_VAR 0 2
28512: PPUSH
28513: LD_VAR 0 3
28517: PPUSH
28518: LD_VAR 0 4
28522: PPUSH
28523: LD_VAR 0 5
28527: PUSH
28528: LD_INT 1
28530: ARRAY
28531: PPUSH
28532: CALL_OW 248
28536: PPUSH
28537: LD_INT 0
28539: PPUSH
28540: CALL 30565 0 6
28544: ST_TO_ADDR
// if not hexes then
28545: LD_VAR 0 14
28549: NOT
28550: IFFALSE 28554
// exit ;
28552: GO 29312
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28554: LD_ADDR_VAR 0 17
28558: PUSH
28559: LD_VAR 0 5
28563: PPUSH
28564: LD_INT 22
28566: PUSH
28567: LD_VAR 0 13
28571: PPUSH
28572: CALL_OW 255
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: LD_INT 2
28583: PUSH
28584: LD_INT 30
28586: PUSH
28587: LD_INT 0
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 30
28596: PUSH
28597: LD_INT 1
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: LIST
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PPUSH
28613: CALL_OW 72
28617: ST_TO_ADDR
// for i = 1 to hexes do
28618: LD_ADDR_VAR 0 9
28622: PUSH
28623: DOUBLE
28624: LD_INT 1
28626: DEC
28627: ST_TO_ADDR
28628: LD_VAR 0 14
28632: PUSH
28633: FOR_TO
28634: IFFALSE 29310
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28636: LD_ADDR_VAR 0 13
28640: PUSH
28641: LD_VAR 0 14
28645: PUSH
28646: LD_VAR 0 9
28650: ARRAY
28651: PUSH
28652: LD_INT 1
28654: ARRAY
28655: PPUSH
28656: LD_VAR 0 14
28660: PUSH
28661: LD_VAR 0 9
28665: ARRAY
28666: PUSH
28667: LD_INT 2
28669: ARRAY
28670: PPUSH
28671: CALL_OW 428
28675: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
28676: LD_VAR 0 14
28680: PUSH
28681: LD_VAR 0 9
28685: ARRAY
28686: PUSH
28687: LD_INT 1
28689: ARRAY
28690: PPUSH
28691: LD_VAR 0 14
28695: PUSH
28696: LD_VAR 0 9
28700: ARRAY
28701: PUSH
28702: LD_INT 2
28704: ARRAY
28705: PPUSH
28706: CALL_OW 351
28710: PUSH
28711: LD_VAR 0 14
28715: PUSH
28716: LD_VAR 0 9
28720: ARRAY
28721: PUSH
28722: LD_INT 1
28724: ARRAY
28725: PPUSH
28726: LD_VAR 0 14
28730: PUSH
28731: LD_VAR 0 9
28735: ARRAY
28736: PUSH
28737: LD_INT 2
28739: ARRAY
28740: PPUSH
28741: CALL_OW 488
28745: NOT
28746: OR
28747: PUSH
28748: LD_VAR 0 13
28752: PPUSH
28753: CALL_OW 247
28757: PUSH
28758: LD_INT 3
28760: EQUAL
28761: OR
28762: IFFALSE 28768
// exit ;
28764: POP
28765: POP
28766: GO 29312
// if not tmp then
28768: LD_VAR 0 13
28772: NOT
28773: IFFALSE 28777
// continue ;
28775: GO 28633
// result := true ;
28777: LD_ADDR_VAR 0 8
28781: PUSH
28782: LD_INT 1
28784: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
28785: LD_VAR 0 6
28789: PUSH
28790: LD_VAR 0 13
28794: PPUSH
28795: CALL_OW 247
28799: PUSH
28800: LD_INT 2
28802: EQUAL
28803: AND
28804: PUSH
28805: LD_VAR 0 13
28809: PPUSH
28810: CALL_OW 263
28814: PUSH
28815: LD_INT 1
28817: EQUAL
28818: AND
28819: IFFALSE 28983
// begin if IsDrivenBy ( tmp ) then
28821: LD_VAR 0 13
28825: PPUSH
28826: CALL_OW 311
28830: IFFALSE 28834
// continue ;
28832: GO 28633
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
28834: LD_VAR 0 6
28838: PPUSH
28839: LD_INT 3
28841: PUSH
28842: LD_INT 60
28844: PUSH
28845: EMPTY
28846: LIST
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: PUSH
28852: LD_INT 3
28854: PUSH
28855: LD_INT 55
28857: PUSH
28858: EMPTY
28859: LIST
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: PPUSH
28869: CALL_OW 72
28873: IFFALSE 28981
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
28875: LD_ADDR_VAR 0 18
28879: PUSH
28880: LD_VAR 0 6
28884: PPUSH
28885: LD_INT 3
28887: PUSH
28888: LD_INT 60
28890: PUSH
28891: EMPTY
28892: LIST
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: LD_INT 3
28900: PUSH
28901: LD_INT 55
28903: PUSH
28904: EMPTY
28905: LIST
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: PPUSH
28915: CALL_OW 72
28919: PUSH
28920: LD_INT 1
28922: ARRAY
28923: ST_TO_ADDR
// if IsInUnit ( driver ) then
28924: LD_VAR 0 18
28928: PPUSH
28929: CALL_OW 310
28933: IFFALSE 28944
// ComExit ( driver ) ;
28935: LD_VAR 0 18
28939: PPUSH
28940: CALL 54344 0 1
// AddComEnterUnit ( driver , tmp ) ;
28944: LD_VAR 0 18
28948: PPUSH
28949: LD_VAR 0 13
28953: PPUSH
28954: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
28958: LD_VAR 0 18
28962: PPUSH
28963: LD_VAR 0 7
28967: PPUSH
28968: CALL_OW 173
// AddComExitVehicle ( driver ) ;
28972: LD_VAR 0 18
28976: PPUSH
28977: CALL_OW 181
// end ; continue ;
28981: GO 28633
// end ; if not cleaners or not tmp in cleaners then
28983: LD_VAR 0 6
28987: NOT
28988: PUSH
28989: LD_VAR 0 13
28993: PUSH
28994: LD_VAR 0 6
28998: IN
28999: NOT
29000: OR
29001: IFFALSE 29308
// begin if dep then
29003: LD_VAR 0 17
29007: IFFALSE 29143
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29009: LD_ADDR_VAR 0 16
29013: PUSH
29014: LD_VAR 0 17
29018: PUSH
29019: LD_INT 1
29021: ARRAY
29022: PPUSH
29023: CALL_OW 250
29027: PPUSH
29028: LD_VAR 0 17
29032: PUSH
29033: LD_INT 1
29035: ARRAY
29036: PPUSH
29037: CALL_OW 254
29041: PPUSH
29042: LD_INT 5
29044: PPUSH
29045: CALL_OW 272
29049: PUSH
29050: LD_VAR 0 17
29054: PUSH
29055: LD_INT 1
29057: ARRAY
29058: PPUSH
29059: CALL_OW 251
29063: PPUSH
29064: LD_VAR 0 17
29068: PUSH
29069: LD_INT 1
29071: ARRAY
29072: PPUSH
29073: CALL_OW 254
29077: PPUSH
29078: LD_INT 5
29080: PPUSH
29081: CALL_OW 273
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29090: LD_VAR 0 16
29094: PUSH
29095: LD_INT 1
29097: ARRAY
29098: PPUSH
29099: LD_VAR 0 16
29103: PUSH
29104: LD_INT 2
29106: ARRAY
29107: PPUSH
29108: CALL_OW 488
29112: IFFALSE 29143
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29114: LD_VAR 0 13
29118: PPUSH
29119: LD_VAR 0 16
29123: PUSH
29124: LD_INT 1
29126: ARRAY
29127: PPUSH
29128: LD_VAR 0 16
29132: PUSH
29133: LD_INT 2
29135: ARRAY
29136: PPUSH
29137: CALL_OW 111
// continue ;
29141: GO 28633
// end ; end ; r := GetDir ( tmp ) ;
29143: LD_ADDR_VAR 0 15
29147: PUSH
29148: LD_VAR 0 13
29152: PPUSH
29153: CALL_OW 254
29157: ST_TO_ADDR
// if r = 5 then
29158: LD_VAR 0 15
29162: PUSH
29163: LD_INT 5
29165: EQUAL
29166: IFFALSE 29176
// r := 0 ;
29168: LD_ADDR_VAR 0 15
29172: PUSH
29173: LD_INT 0
29175: ST_TO_ADDR
// for j = r to 5 do
29176: LD_ADDR_VAR 0 10
29180: PUSH
29181: DOUBLE
29182: LD_VAR 0 15
29186: DEC
29187: ST_TO_ADDR
29188: LD_INT 5
29190: PUSH
29191: FOR_TO
29192: IFFALSE 29306
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29194: LD_ADDR_VAR 0 11
29198: PUSH
29199: LD_VAR 0 13
29203: PPUSH
29204: CALL_OW 250
29208: PPUSH
29209: LD_VAR 0 10
29213: PPUSH
29214: LD_INT 2
29216: PPUSH
29217: CALL_OW 272
29221: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29222: LD_ADDR_VAR 0 12
29226: PUSH
29227: LD_VAR 0 13
29231: PPUSH
29232: CALL_OW 251
29236: PPUSH
29237: LD_VAR 0 10
29241: PPUSH
29242: LD_INT 2
29244: PPUSH
29245: CALL_OW 273
29249: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
29250: LD_VAR 0 11
29254: PPUSH
29255: LD_VAR 0 12
29259: PPUSH
29260: CALL_OW 488
29264: PUSH
29265: LD_VAR 0 11
29269: PPUSH
29270: LD_VAR 0 12
29274: PPUSH
29275: CALL_OW 428
29279: NOT
29280: AND
29281: IFFALSE 29304
// begin ComMoveXY ( tmp , _x , _y ) ;
29283: LD_VAR 0 13
29287: PPUSH
29288: LD_VAR 0 11
29292: PPUSH
29293: LD_VAR 0 12
29297: PPUSH
29298: CALL_OW 111
// break ;
29302: GO 29306
// end ; end ;
29304: GO 29191
29306: POP
29307: POP
// end ; end ;
29308: GO 28633
29310: POP
29311: POP
// end ;
29312: LD_VAR 0 8
29316: RET
// export function BuildingTechInvented ( side , btype ) ; begin
29317: LD_INT 0
29319: PPUSH
// result := true ;
29320: LD_ADDR_VAR 0 3
29324: PUSH
29325: LD_INT 1
29327: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
29328: LD_VAR 0 2
29332: PUSH
29333: LD_INT 24
29335: DOUBLE
29336: EQUAL
29337: IFTRUE 29347
29339: LD_INT 33
29341: DOUBLE
29342: EQUAL
29343: IFTRUE 29347
29345: GO 29372
29347: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
29348: LD_ADDR_VAR 0 3
29352: PUSH
29353: LD_INT 32
29355: PPUSH
29356: LD_VAR 0 1
29360: PPUSH
29361: CALL_OW 321
29365: PUSH
29366: LD_INT 2
29368: EQUAL
29369: ST_TO_ADDR
29370: GO 29688
29372: LD_INT 20
29374: DOUBLE
29375: EQUAL
29376: IFTRUE 29380
29378: GO 29405
29380: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
29381: LD_ADDR_VAR 0 3
29385: PUSH
29386: LD_INT 6
29388: PPUSH
29389: LD_VAR 0 1
29393: PPUSH
29394: CALL_OW 321
29398: PUSH
29399: LD_INT 2
29401: EQUAL
29402: ST_TO_ADDR
29403: GO 29688
29405: LD_INT 22
29407: DOUBLE
29408: EQUAL
29409: IFTRUE 29419
29411: LD_INT 36
29413: DOUBLE
29414: EQUAL
29415: IFTRUE 29419
29417: GO 29444
29419: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
29420: LD_ADDR_VAR 0 3
29424: PUSH
29425: LD_INT 15
29427: PPUSH
29428: LD_VAR 0 1
29432: PPUSH
29433: CALL_OW 321
29437: PUSH
29438: LD_INT 2
29440: EQUAL
29441: ST_TO_ADDR
29442: GO 29688
29444: LD_INT 30
29446: DOUBLE
29447: EQUAL
29448: IFTRUE 29452
29450: GO 29477
29452: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
29453: LD_ADDR_VAR 0 3
29457: PUSH
29458: LD_INT 20
29460: PPUSH
29461: LD_VAR 0 1
29465: PPUSH
29466: CALL_OW 321
29470: PUSH
29471: LD_INT 2
29473: EQUAL
29474: ST_TO_ADDR
29475: GO 29688
29477: LD_INT 28
29479: DOUBLE
29480: EQUAL
29481: IFTRUE 29491
29483: LD_INT 21
29485: DOUBLE
29486: EQUAL
29487: IFTRUE 29491
29489: GO 29516
29491: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
29492: LD_ADDR_VAR 0 3
29496: PUSH
29497: LD_INT 21
29499: PPUSH
29500: LD_VAR 0 1
29504: PPUSH
29505: CALL_OW 321
29509: PUSH
29510: LD_INT 2
29512: EQUAL
29513: ST_TO_ADDR
29514: GO 29688
29516: LD_INT 16
29518: DOUBLE
29519: EQUAL
29520: IFTRUE 29524
29522: GO 29549
29524: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
29525: LD_ADDR_VAR 0 3
29529: PUSH
29530: LD_INT 84
29532: PPUSH
29533: LD_VAR 0 1
29537: PPUSH
29538: CALL_OW 321
29542: PUSH
29543: LD_INT 2
29545: EQUAL
29546: ST_TO_ADDR
29547: GO 29688
29549: LD_INT 19
29551: DOUBLE
29552: EQUAL
29553: IFTRUE 29563
29555: LD_INT 23
29557: DOUBLE
29558: EQUAL
29559: IFTRUE 29563
29561: GO 29588
29563: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
29564: LD_ADDR_VAR 0 3
29568: PUSH
29569: LD_INT 83
29571: PPUSH
29572: LD_VAR 0 1
29576: PPUSH
29577: CALL_OW 321
29581: PUSH
29582: LD_INT 2
29584: EQUAL
29585: ST_TO_ADDR
29586: GO 29688
29588: LD_INT 17
29590: DOUBLE
29591: EQUAL
29592: IFTRUE 29596
29594: GO 29621
29596: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
29597: LD_ADDR_VAR 0 3
29601: PUSH
29602: LD_INT 39
29604: PPUSH
29605: LD_VAR 0 1
29609: PPUSH
29610: CALL_OW 321
29614: PUSH
29615: LD_INT 2
29617: EQUAL
29618: ST_TO_ADDR
29619: GO 29688
29621: LD_INT 18
29623: DOUBLE
29624: EQUAL
29625: IFTRUE 29629
29627: GO 29654
29629: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
29630: LD_ADDR_VAR 0 3
29634: PUSH
29635: LD_INT 40
29637: PPUSH
29638: LD_VAR 0 1
29642: PPUSH
29643: CALL_OW 321
29647: PUSH
29648: LD_INT 2
29650: EQUAL
29651: ST_TO_ADDR
29652: GO 29688
29654: LD_INT 27
29656: DOUBLE
29657: EQUAL
29658: IFTRUE 29662
29660: GO 29687
29662: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
29663: LD_ADDR_VAR 0 3
29667: PUSH
29668: LD_INT 35
29670: PPUSH
29671: LD_VAR 0 1
29675: PPUSH
29676: CALL_OW 321
29680: PUSH
29681: LD_INT 2
29683: EQUAL
29684: ST_TO_ADDR
29685: GO 29688
29687: POP
// end ;
29688: LD_VAR 0 3
29692: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
29693: LD_INT 0
29695: PPUSH
29696: PPUSH
29697: PPUSH
29698: PPUSH
29699: PPUSH
29700: PPUSH
29701: PPUSH
29702: PPUSH
29703: PPUSH
29704: PPUSH
29705: PPUSH
// result := false ;
29706: LD_ADDR_VAR 0 6
29710: PUSH
29711: LD_INT 0
29713: ST_TO_ADDR
// if btype = b_depot then
29714: LD_VAR 0 2
29718: PUSH
29719: LD_INT 0
29721: EQUAL
29722: IFFALSE 29734
// begin result := true ;
29724: LD_ADDR_VAR 0 6
29728: PUSH
29729: LD_INT 1
29731: ST_TO_ADDR
// exit ;
29732: GO 30560
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
29734: LD_VAR 0 1
29738: NOT
29739: PUSH
29740: LD_VAR 0 1
29744: PPUSH
29745: CALL_OW 266
29749: PUSH
29750: LD_INT 0
29752: PUSH
29753: LD_INT 1
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: IN
29760: NOT
29761: OR
29762: PUSH
29763: LD_VAR 0 2
29767: NOT
29768: OR
29769: PUSH
29770: LD_VAR 0 5
29774: PUSH
29775: LD_INT 0
29777: PUSH
29778: LD_INT 1
29780: PUSH
29781: LD_INT 2
29783: PUSH
29784: LD_INT 3
29786: PUSH
29787: LD_INT 4
29789: PUSH
29790: LD_INT 5
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: LIST
29800: IN
29801: NOT
29802: OR
29803: PUSH
29804: LD_VAR 0 3
29808: PPUSH
29809: LD_VAR 0 4
29813: PPUSH
29814: CALL_OW 488
29818: NOT
29819: OR
29820: IFFALSE 29824
// exit ;
29822: GO 30560
// side := GetSide ( depot ) ;
29824: LD_ADDR_VAR 0 9
29828: PUSH
29829: LD_VAR 0 1
29833: PPUSH
29834: CALL_OW 255
29838: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
29839: LD_VAR 0 9
29843: PPUSH
29844: LD_VAR 0 2
29848: PPUSH
29849: CALL 29317 0 2
29853: NOT
29854: IFFALSE 29858
// exit ;
29856: GO 30560
// pom := GetBase ( depot ) ;
29858: LD_ADDR_VAR 0 10
29862: PUSH
29863: LD_VAR 0 1
29867: PPUSH
29868: CALL_OW 274
29872: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
29873: LD_ADDR_VAR 0 11
29877: PUSH
29878: LD_VAR 0 2
29882: PPUSH
29883: LD_VAR 0 1
29887: PPUSH
29888: CALL_OW 248
29892: PPUSH
29893: CALL_OW 450
29897: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
29898: LD_VAR 0 10
29902: PPUSH
29903: LD_INT 1
29905: PPUSH
29906: CALL_OW 275
29910: PUSH
29911: LD_VAR 0 11
29915: PUSH
29916: LD_INT 1
29918: ARRAY
29919: GREATEREQUAL
29920: PUSH
29921: LD_VAR 0 10
29925: PPUSH
29926: LD_INT 2
29928: PPUSH
29929: CALL_OW 275
29933: PUSH
29934: LD_VAR 0 11
29938: PUSH
29939: LD_INT 2
29941: ARRAY
29942: GREATEREQUAL
29943: AND
29944: PUSH
29945: LD_VAR 0 10
29949: PPUSH
29950: LD_INT 3
29952: PPUSH
29953: CALL_OW 275
29957: PUSH
29958: LD_VAR 0 11
29962: PUSH
29963: LD_INT 3
29965: ARRAY
29966: GREATEREQUAL
29967: AND
29968: NOT
29969: IFFALSE 29973
// exit ;
29971: GO 30560
// if GetBType ( depot ) = b_depot then
29973: LD_VAR 0 1
29977: PPUSH
29978: CALL_OW 266
29982: PUSH
29983: LD_INT 0
29985: EQUAL
29986: IFFALSE 29998
// dist := 28 else
29988: LD_ADDR_VAR 0 14
29992: PUSH
29993: LD_INT 28
29995: ST_TO_ADDR
29996: GO 30006
// dist := 36 ;
29998: LD_ADDR_VAR 0 14
30002: PUSH
30003: LD_INT 36
30005: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
30006: LD_VAR 0 1
30010: PPUSH
30011: LD_VAR 0 3
30015: PPUSH
30016: LD_VAR 0 4
30020: PPUSH
30021: CALL_OW 297
30025: PUSH
30026: LD_VAR 0 14
30030: GREATER
30031: IFFALSE 30035
// exit ;
30033: GO 30560
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
30035: LD_ADDR_VAR 0 12
30039: PUSH
30040: LD_VAR 0 2
30044: PPUSH
30045: LD_VAR 0 3
30049: PPUSH
30050: LD_VAR 0 4
30054: PPUSH
30055: LD_VAR 0 5
30059: PPUSH
30060: LD_VAR 0 1
30064: PPUSH
30065: CALL_OW 248
30069: PPUSH
30070: LD_INT 0
30072: PPUSH
30073: CALL 30565 0 6
30077: ST_TO_ADDR
// if not hexes then
30078: LD_VAR 0 12
30082: NOT
30083: IFFALSE 30087
// exit ;
30085: GO 30560
// hex := GetHexInfo ( x , y ) ;
30087: LD_ADDR_VAR 0 15
30091: PUSH
30092: LD_VAR 0 3
30096: PPUSH
30097: LD_VAR 0 4
30101: PPUSH
30102: CALL_OW 546
30106: ST_TO_ADDR
// if hex [ 1 ] then
30107: LD_VAR 0 15
30111: PUSH
30112: LD_INT 1
30114: ARRAY
30115: IFFALSE 30119
// exit ;
30117: GO 30560
// height := hex [ 2 ] ;
30119: LD_ADDR_VAR 0 13
30123: PUSH
30124: LD_VAR 0 15
30128: PUSH
30129: LD_INT 2
30131: ARRAY
30132: ST_TO_ADDR
// for i = 1 to hexes do
30133: LD_ADDR_VAR 0 7
30137: PUSH
30138: DOUBLE
30139: LD_INT 1
30141: DEC
30142: ST_TO_ADDR
30143: LD_VAR 0 12
30147: PUSH
30148: FOR_TO
30149: IFFALSE 30479
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30151: LD_VAR 0 12
30155: PUSH
30156: LD_VAR 0 7
30160: ARRAY
30161: PUSH
30162: LD_INT 1
30164: ARRAY
30165: PPUSH
30166: LD_VAR 0 12
30170: PUSH
30171: LD_VAR 0 7
30175: ARRAY
30176: PUSH
30177: LD_INT 2
30179: ARRAY
30180: PPUSH
30181: CALL_OW 488
30185: NOT
30186: PUSH
30187: LD_VAR 0 12
30191: PUSH
30192: LD_VAR 0 7
30196: ARRAY
30197: PUSH
30198: LD_INT 1
30200: ARRAY
30201: PPUSH
30202: LD_VAR 0 12
30206: PUSH
30207: LD_VAR 0 7
30211: ARRAY
30212: PUSH
30213: LD_INT 2
30215: ARRAY
30216: PPUSH
30217: CALL_OW 428
30221: PUSH
30222: LD_INT 0
30224: GREATER
30225: OR
30226: PUSH
30227: LD_VAR 0 12
30231: PUSH
30232: LD_VAR 0 7
30236: ARRAY
30237: PUSH
30238: LD_INT 1
30240: ARRAY
30241: PPUSH
30242: LD_VAR 0 12
30246: PUSH
30247: LD_VAR 0 7
30251: ARRAY
30252: PUSH
30253: LD_INT 2
30255: ARRAY
30256: PPUSH
30257: CALL_OW 351
30261: OR
30262: IFFALSE 30268
// exit ;
30264: POP
30265: POP
30266: GO 30560
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30268: LD_ADDR_VAR 0 8
30272: PUSH
30273: LD_VAR 0 12
30277: PUSH
30278: LD_VAR 0 7
30282: ARRAY
30283: PUSH
30284: LD_INT 1
30286: ARRAY
30287: PPUSH
30288: LD_VAR 0 12
30292: PUSH
30293: LD_VAR 0 7
30297: ARRAY
30298: PUSH
30299: LD_INT 2
30301: ARRAY
30302: PPUSH
30303: CALL_OW 546
30307: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
30308: LD_VAR 0 8
30312: PUSH
30313: LD_INT 1
30315: ARRAY
30316: PUSH
30317: LD_VAR 0 8
30321: PUSH
30322: LD_INT 2
30324: ARRAY
30325: PUSH
30326: LD_VAR 0 13
30330: PUSH
30331: LD_INT 2
30333: PLUS
30334: GREATER
30335: OR
30336: PUSH
30337: LD_VAR 0 8
30341: PUSH
30342: LD_INT 2
30344: ARRAY
30345: PUSH
30346: LD_VAR 0 13
30350: PUSH
30351: LD_INT 2
30353: MINUS
30354: LESS
30355: OR
30356: PUSH
30357: LD_VAR 0 8
30361: PUSH
30362: LD_INT 3
30364: ARRAY
30365: PUSH
30366: LD_INT 0
30368: PUSH
30369: LD_INT 8
30371: PUSH
30372: LD_INT 9
30374: PUSH
30375: LD_INT 10
30377: PUSH
30378: LD_INT 11
30380: PUSH
30381: LD_INT 12
30383: PUSH
30384: LD_INT 13
30386: PUSH
30387: LD_INT 16
30389: PUSH
30390: LD_INT 17
30392: PUSH
30393: LD_INT 18
30395: PUSH
30396: LD_INT 19
30398: PUSH
30399: LD_INT 20
30401: PUSH
30402: LD_INT 21
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: LIST
30418: LIST
30419: IN
30420: NOT
30421: OR
30422: PUSH
30423: LD_VAR 0 8
30427: PUSH
30428: LD_INT 5
30430: ARRAY
30431: NOT
30432: OR
30433: PUSH
30434: LD_VAR 0 8
30438: PUSH
30439: LD_INT 6
30441: ARRAY
30442: PUSH
30443: LD_INT 1
30445: PUSH
30446: LD_INT 2
30448: PUSH
30449: LD_INT 7
30451: PUSH
30452: LD_INT 9
30454: PUSH
30455: LD_INT 10
30457: PUSH
30458: LD_INT 11
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: LIST
30468: IN
30469: NOT
30470: OR
30471: IFFALSE 30477
// exit ;
30473: POP
30474: POP
30475: GO 30560
// end ;
30477: GO 30148
30479: POP
30480: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30481: LD_VAR 0 9
30485: PPUSH
30486: LD_VAR 0 3
30490: PPUSH
30491: LD_VAR 0 4
30495: PPUSH
30496: LD_INT 20
30498: PPUSH
30499: CALL 22483 0 4
30503: PUSH
30504: LD_INT 4
30506: ARRAY
30507: IFFALSE 30511
// exit ;
30509: GO 30560
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30511: LD_VAR 0 2
30515: PUSH
30516: LD_INT 29
30518: PUSH
30519: LD_INT 30
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: IN
30526: PUSH
30527: LD_VAR 0 3
30531: PPUSH
30532: LD_VAR 0 4
30536: PPUSH
30537: LD_VAR 0 9
30541: PPUSH
30542: CALL_OW 440
30546: NOT
30547: AND
30548: IFFALSE 30552
// exit ;
30550: GO 30560
// result := true ;
30552: LD_ADDR_VAR 0 6
30556: PUSH
30557: LD_INT 1
30559: ST_TO_ADDR
// end ;
30560: LD_VAR 0 6
30564: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
30565: LD_INT 0
30567: PPUSH
30568: PPUSH
30569: PPUSH
30570: PPUSH
30571: PPUSH
30572: PPUSH
30573: PPUSH
30574: PPUSH
30575: PPUSH
30576: PPUSH
30577: PPUSH
30578: PPUSH
30579: PPUSH
30580: PPUSH
30581: PPUSH
30582: PPUSH
30583: PPUSH
30584: PPUSH
30585: PPUSH
30586: PPUSH
30587: PPUSH
30588: PPUSH
30589: PPUSH
30590: PPUSH
30591: PPUSH
30592: PPUSH
30593: PPUSH
30594: PPUSH
30595: PPUSH
30596: PPUSH
30597: PPUSH
30598: PPUSH
30599: PPUSH
30600: PPUSH
30601: PPUSH
30602: PPUSH
30603: PPUSH
30604: PPUSH
30605: PPUSH
30606: PPUSH
30607: PPUSH
30608: PPUSH
30609: PPUSH
30610: PPUSH
30611: PPUSH
30612: PPUSH
30613: PPUSH
30614: PPUSH
30615: PPUSH
30616: PPUSH
30617: PPUSH
30618: PPUSH
30619: PPUSH
30620: PPUSH
30621: PPUSH
30622: PPUSH
30623: PPUSH
30624: PPUSH
// result = [ ] ;
30625: LD_ADDR_VAR 0 7
30629: PUSH
30630: EMPTY
30631: ST_TO_ADDR
// temp_list = [ ] ;
30632: LD_ADDR_VAR 0 9
30636: PUSH
30637: EMPTY
30638: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
30639: LD_VAR 0 4
30643: PUSH
30644: LD_INT 0
30646: PUSH
30647: LD_INT 1
30649: PUSH
30650: LD_INT 2
30652: PUSH
30653: LD_INT 3
30655: PUSH
30656: LD_INT 4
30658: PUSH
30659: LD_INT 5
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: IN
30670: NOT
30671: PUSH
30672: LD_VAR 0 1
30676: PUSH
30677: LD_INT 0
30679: PUSH
30680: LD_INT 1
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: IN
30687: PUSH
30688: LD_VAR 0 5
30692: PUSH
30693: LD_INT 1
30695: PUSH
30696: LD_INT 2
30698: PUSH
30699: LD_INT 3
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: LIST
30706: IN
30707: NOT
30708: AND
30709: OR
30710: IFFALSE 30714
// exit ;
30712: GO 49105
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
30714: LD_VAR 0 1
30718: PUSH
30719: LD_INT 6
30721: PUSH
30722: LD_INT 7
30724: PUSH
30725: LD_INT 8
30727: PUSH
30728: LD_INT 13
30730: PUSH
30731: LD_INT 12
30733: PUSH
30734: LD_INT 15
30736: PUSH
30737: LD_INT 11
30739: PUSH
30740: LD_INT 14
30742: PUSH
30743: LD_INT 10
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: IN
30757: IFFALSE 30767
// btype = b_lab ;
30759: LD_ADDR_VAR 0 1
30763: PUSH
30764: LD_INT 6
30766: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
30767: LD_VAR 0 6
30771: PUSH
30772: LD_INT 0
30774: PUSH
30775: LD_INT 1
30777: PUSH
30778: LD_INT 2
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: LIST
30785: IN
30786: NOT
30787: PUSH
30788: LD_VAR 0 1
30792: PUSH
30793: LD_INT 0
30795: PUSH
30796: LD_INT 1
30798: PUSH
30799: LD_INT 2
30801: PUSH
30802: LD_INT 3
30804: PUSH
30805: LD_INT 6
30807: PUSH
30808: LD_INT 36
30810: PUSH
30811: LD_INT 4
30813: PUSH
30814: LD_INT 5
30816: PUSH
30817: LD_INT 31
30819: PUSH
30820: LD_INT 32
30822: PUSH
30823: LD_INT 33
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: IN
30839: NOT
30840: PUSH
30841: LD_VAR 0 6
30845: PUSH
30846: LD_INT 1
30848: EQUAL
30849: AND
30850: OR
30851: PUSH
30852: LD_VAR 0 1
30856: PUSH
30857: LD_INT 2
30859: PUSH
30860: LD_INT 3
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: IN
30867: NOT
30868: PUSH
30869: LD_VAR 0 6
30873: PUSH
30874: LD_INT 2
30876: EQUAL
30877: AND
30878: OR
30879: IFFALSE 30889
// mode = 0 ;
30881: LD_ADDR_VAR 0 6
30885: PUSH
30886: LD_INT 0
30888: ST_TO_ADDR
// case mode of 0 :
30889: LD_VAR 0 6
30893: PUSH
30894: LD_INT 0
30896: DOUBLE
30897: EQUAL
30898: IFTRUE 30902
30900: GO 42355
30902: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30903: LD_ADDR_VAR 0 11
30907: PUSH
30908: LD_INT 0
30910: PUSH
30911: LD_INT 0
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: LD_INT 0
30920: PUSH
30921: LD_INT 1
30923: NEG
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: LD_INT 1
30931: PUSH
30932: LD_INT 0
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: PUSH
30939: LD_INT 1
30941: PUSH
30942: LD_INT 1
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PUSH
30949: LD_INT 0
30951: PUSH
30952: LD_INT 1
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: PUSH
30959: LD_INT 1
30961: NEG
30962: PUSH
30963: LD_INT 0
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 1
30972: NEG
30973: PUSH
30974: LD_INT 1
30976: NEG
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: LD_INT 1
30984: NEG
30985: PUSH
30986: LD_INT 2
30988: NEG
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: PUSH
30994: LD_INT 0
30996: PUSH
30997: LD_INT 2
30999: NEG
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 1
31007: PUSH
31008: LD_INT 1
31010: NEG
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: PUSH
31016: LD_INT 1
31018: PUSH
31019: LD_INT 2
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: PUSH
31026: LD_INT 0
31028: PUSH
31029: LD_INT 2
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: LD_INT 1
31038: NEG
31039: PUSH
31040: LD_INT 1
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: PUSH
31047: LD_INT 1
31049: PUSH
31050: LD_INT 3
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: PUSH
31057: LD_INT 0
31059: PUSH
31060: LD_INT 3
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PUSH
31067: LD_INT 1
31069: NEG
31070: PUSH
31071: LD_INT 2
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: LIST
31094: LIST
31095: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31096: LD_ADDR_VAR 0 12
31100: PUSH
31101: LD_INT 0
31103: PUSH
31104: LD_INT 0
31106: PUSH
31107: EMPTY
31108: LIST
31109: LIST
31110: PUSH
31111: LD_INT 0
31113: PUSH
31114: LD_INT 1
31116: NEG
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: PUSH
31122: LD_INT 1
31124: PUSH
31125: LD_INT 0
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PUSH
31132: LD_INT 1
31134: PUSH
31135: LD_INT 1
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 0
31144: PUSH
31145: LD_INT 1
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: LD_INT 1
31154: NEG
31155: PUSH
31156: LD_INT 0
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: PUSH
31163: LD_INT 1
31165: NEG
31166: PUSH
31167: LD_INT 1
31169: NEG
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: LD_INT 1
31177: PUSH
31178: LD_INT 1
31180: NEG
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: LD_INT 2
31188: PUSH
31189: LD_INT 0
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: LD_INT 2
31198: PUSH
31199: LD_INT 1
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 1
31208: NEG
31209: PUSH
31210: LD_INT 1
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: LD_INT 2
31219: NEG
31220: PUSH
31221: LD_INT 0
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: LD_INT 2
31230: NEG
31231: PUSH
31232: LD_INT 1
31234: NEG
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: LD_INT 2
31242: NEG
31243: PUSH
31244: LD_INT 1
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: LD_INT 3
31253: NEG
31254: PUSH
31255: LD_INT 0
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 3
31264: NEG
31265: PUSH
31266: LD_INT 1
31268: NEG
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31292: LD_ADDR_VAR 0 13
31296: PUSH
31297: LD_INT 0
31299: PUSH
31300: LD_INT 0
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: LD_INT 0
31309: PUSH
31310: LD_INT 1
31312: NEG
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 1
31320: PUSH
31321: LD_INT 0
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 1
31330: PUSH
31331: LD_INT 1
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: LD_INT 0
31340: PUSH
31341: LD_INT 1
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: LD_INT 1
31350: NEG
31351: PUSH
31352: LD_INT 0
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: LD_INT 1
31361: NEG
31362: PUSH
31363: LD_INT 1
31365: NEG
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: LD_INT 1
31373: NEG
31374: PUSH
31375: LD_INT 2
31377: NEG
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PUSH
31383: LD_INT 2
31385: PUSH
31386: LD_INT 1
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: PUSH
31393: LD_INT 2
31395: PUSH
31396: LD_INT 2
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: LD_INT 1
31405: PUSH
31406: LD_INT 2
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: LD_INT 2
31415: NEG
31416: PUSH
31417: LD_INT 1
31419: NEG
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 2
31427: NEG
31428: PUSH
31429: LD_INT 2
31431: NEG
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: LD_INT 2
31439: NEG
31440: PUSH
31441: LD_INT 3
31443: NEG
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: PUSH
31449: LD_INT 3
31451: NEG
31452: PUSH
31453: LD_INT 2
31455: NEG
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: LD_INT 3
31463: NEG
31464: PUSH
31465: LD_INT 3
31467: NEG
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31491: LD_ADDR_VAR 0 14
31495: PUSH
31496: LD_INT 0
31498: PUSH
31499: LD_INT 0
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: LD_INT 0
31508: PUSH
31509: LD_INT 1
31511: NEG
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: PUSH
31517: LD_INT 1
31519: PUSH
31520: LD_INT 0
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: LD_INT 1
31529: PUSH
31530: LD_INT 1
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PUSH
31537: LD_INT 0
31539: PUSH
31540: LD_INT 1
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: PUSH
31547: LD_INT 1
31549: NEG
31550: PUSH
31551: LD_INT 0
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 1
31560: NEG
31561: PUSH
31562: LD_INT 1
31564: NEG
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: PUSH
31570: LD_INT 1
31572: NEG
31573: PUSH
31574: LD_INT 2
31576: NEG
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: PUSH
31582: LD_INT 0
31584: PUSH
31585: LD_INT 2
31587: NEG
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: LD_INT 1
31595: PUSH
31596: LD_INT 1
31598: NEG
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 1
31606: PUSH
31607: LD_INT 2
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 0
31616: PUSH
31617: LD_INT 2
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 1
31626: NEG
31627: PUSH
31628: LD_INT 1
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 1
31637: NEG
31638: PUSH
31639: LD_INT 3
31641: NEG
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PUSH
31647: LD_INT 0
31649: PUSH
31650: LD_INT 3
31652: NEG
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: LD_INT 1
31660: PUSH
31661: LD_INT 2
31663: NEG
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: LIST
31686: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31687: LD_ADDR_VAR 0 15
31691: PUSH
31692: LD_INT 0
31694: PUSH
31695: LD_INT 0
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: LD_INT 0
31704: PUSH
31705: LD_INT 1
31707: NEG
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: PUSH
31713: LD_INT 1
31715: PUSH
31716: LD_INT 0
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: LD_INT 1
31725: PUSH
31726: LD_INT 1
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: PUSH
31733: LD_INT 0
31735: PUSH
31736: LD_INT 1
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PUSH
31743: LD_INT 1
31745: NEG
31746: PUSH
31747: LD_INT 0
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: LD_INT 1
31756: NEG
31757: PUSH
31758: LD_INT 1
31760: NEG
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: PUSH
31766: LD_INT 1
31768: PUSH
31769: LD_INT 1
31771: NEG
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: PUSH
31777: LD_INT 2
31779: PUSH
31780: LD_INT 0
31782: PUSH
31783: EMPTY
31784: LIST
31785: LIST
31786: PUSH
31787: LD_INT 2
31789: PUSH
31790: LD_INT 1
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 1
31799: NEG
31800: PUSH
31801: LD_INT 1
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 2
31810: NEG
31811: PUSH
31812: LD_INT 0
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: PUSH
31819: LD_INT 2
31821: NEG
31822: PUSH
31823: LD_INT 1
31825: NEG
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 2
31833: PUSH
31834: LD_INT 1
31836: NEG
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: PUSH
31842: LD_INT 3
31844: PUSH
31845: LD_INT 0
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 3
31854: PUSH
31855: LD_INT 1
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31880: LD_ADDR_VAR 0 16
31884: PUSH
31885: LD_INT 0
31887: PUSH
31888: LD_INT 0
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 0
31897: PUSH
31898: LD_INT 1
31900: NEG
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 1
31908: PUSH
31909: LD_INT 0
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 1
31918: PUSH
31919: LD_INT 1
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: LD_INT 0
31928: PUSH
31929: LD_INT 1
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: LD_INT 1
31938: NEG
31939: PUSH
31940: LD_INT 0
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 1
31949: NEG
31950: PUSH
31951: LD_INT 1
31953: NEG
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 1
31961: NEG
31962: PUSH
31963: LD_INT 2
31965: NEG
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: PUSH
31971: LD_INT 2
31973: PUSH
31974: LD_INT 1
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: PUSH
31981: LD_INT 2
31983: PUSH
31984: LD_INT 2
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PUSH
31991: LD_INT 1
31993: PUSH
31994: LD_INT 2
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 2
32003: NEG
32004: PUSH
32005: LD_INT 1
32007: NEG
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: LD_INT 2
32015: NEG
32016: PUSH
32017: LD_INT 2
32019: NEG
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 3
32027: PUSH
32028: LD_INT 2
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 3
32037: PUSH
32038: LD_INT 3
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 2
32047: PUSH
32048: LD_INT 3
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32073: LD_ADDR_VAR 0 17
32077: PUSH
32078: LD_INT 0
32080: PUSH
32081: LD_INT 0
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 0
32090: PUSH
32091: LD_INT 1
32093: NEG
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 1
32101: PUSH
32102: LD_INT 0
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: LD_INT 1
32111: PUSH
32112: LD_INT 1
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 0
32121: PUSH
32122: LD_INT 1
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 1
32131: NEG
32132: PUSH
32133: LD_INT 0
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PUSH
32140: LD_INT 1
32142: NEG
32143: PUSH
32144: LD_INT 1
32146: NEG
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 1
32154: NEG
32155: PUSH
32156: LD_INT 2
32158: NEG
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: PUSH
32164: LD_INT 0
32166: PUSH
32167: LD_INT 2
32169: NEG
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: LD_INT 1
32177: PUSH
32178: LD_INT 1
32180: NEG
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: LD_INT 2
32188: PUSH
32189: LD_INT 0
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: PUSH
32196: LD_INT 2
32198: PUSH
32199: LD_INT 1
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: LD_INT 2
32208: PUSH
32209: LD_INT 2
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 1
32218: PUSH
32219: LD_INT 2
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 0
32228: PUSH
32229: LD_INT 2
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 1
32238: NEG
32239: PUSH
32240: LD_INT 1
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 2
32249: NEG
32250: PUSH
32251: LD_INT 0
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: PUSH
32258: LD_INT 2
32260: NEG
32261: PUSH
32262: LD_INT 1
32264: NEG
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: PUSH
32270: LD_INT 2
32272: NEG
32273: PUSH
32274: LD_INT 2
32276: NEG
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32303: LD_ADDR_VAR 0 18
32307: PUSH
32308: LD_INT 0
32310: PUSH
32311: LD_INT 0
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PUSH
32318: LD_INT 0
32320: PUSH
32321: LD_INT 1
32323: NEG
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: LD_INT 1
32331: PUSH
32332: LD_INT 0
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PUSH
32339: LD_INT 1
32341: PUSH
32342: LD_INT 1
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: LD_INT 0
32351: PUSH
32352: LD_INT 1
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: PUSH
32359: LD_INT 1
32361: NEG
32362: PUSH
32363: LD_INT 0
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: PUSH
32370: LD_INT 1
32372: NEG
32373: PUSH
32374: LD_INT 1
32376: NEG
32377: PUSH
32378: EMPTY
32379: LIST
32380: LIST
32381: PUSH
32382: LD_INT 1
32384: NEG
32385: PUSH
32386: LD_INT 2
32388: NEG
32389: PUSH
32390: EMPTY
32391: LIST
32392: LIST
32393: PUSH
32394: LD_INT 0
32396: PUSH
32397: LD_INT 2
32399: NEG
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: LD_INT 1
32407: PUSH
32408: LD_INT 1
32410: NEG
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: PUSH
32416: LD_INT 2
32418: PUSH
32419: LD_INT 0
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: LD_INT 2
32428: PUSH
32429: LD_INT 1
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 2
32438: PUSH
32439: LD_INT 2
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PUSH
32446: LD_INT 1
32448: PUSH
32449: LD_INT 2
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PUSH
32456: LD_INT 0
32458: PUSH
32459: LD_INT 2
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: PUSH
32466: LD_INT 1
32468: NEG
32469: PUSH
32470: LD_INT 1
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 2
32479: NEG
32480: PUSH
32481: LD_INT 0
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: LD_INT 2
32490: NEG
32491: PUSH
32492: LD_INT 1
32494: NEG
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PUSH
32500: LD_INT 2
32502: NEG
32503: PUSH
32504: LD_INT 2
32506: NEG
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32533: LD_ADDR_VAR 0 19
32537: PUSH
32538: LD_INT 0
32540: PUSH
32541: LD_INT 0
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: PUSH
32548: LD_INT 0
32550: PUSH
32551: LD_INT 1
32553: NEG
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: PUSH
32559: LD_INT 1
32561: PUSH
32562: LD_INT 0
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: PUSH
32569: LD_INT 1
32571: PUSH
32572: LD_INT 1
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PUSH
32579: LD_INT 0
32581: PUSH
32582: LD_INT 1
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: LD_INT 1
32591: NEG
32592: PUSH
32593: LD_INT 0
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: LD_INT 1
32602: NEG
32603: PUSH
32604: LD_INT 1
32606: NEG
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: LD_INT 1
32614: NEG
32615: PUSH
32616: LD_INT 2
32618: NEG
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: LD_INT 0
32626: PUSH
32627: LD_INT 2
32629: NEG
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: LD_INT 1
32637: PUSH
32638: LD_INT 1
32640: NEG
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 2
32648: PUSH
32649: LD_INT 0
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 2
32658: PUSH
32659: LD_INT 1
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: LD_INT 2
32668: PUSH
32669: LD_INT 2
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: PUSH
32676: LD_INT 1
32678: PUSH
32679: LD_INT 2
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: PUSH
32686: LD_INT 0
32688: PUSH
32689: LD_INT 2
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 1
32698: NEG
32699: PUSH
32700: LD_INT 1
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: LD_INT 2
32709: NEG
32710: PUSH
32711: LD_INT 0
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 2
32720: NEG
32721: PUSH
32722: LD_INT 1
32724: NEG
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 2
32732: NEG
32733: PUSH
32734: LD_INT 2
32736: NEG
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: LIST
32762: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32763: LD_ADDR_VAR 0 20
32767: PUSH
32768: LD_INT 0
32770: PUSH
32771: LD_INT 0
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: PUSH
32778: LD_INT 0
32780: PUSH
32781: LD_INT 1
32783: NEG
32784: PUSH
32785: EMPTY
32786: LIST
32787: LIST
32788: PUSH
32789: LD_INT 1
32791: PUSH
32792: LD_INT 0
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: PUSH
32799: LD_INT 1
32801: PUSH
32802: LD_INT 1
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: LD_INT 0
32811: PUSH
32812: LD_INT 1
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: LD_INT 1
32821: NEG
32822: PUSH
32823: LD_INT 0
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: PUSH
32830: LD_INT 1
32832: NEG
32833: PUSH
32834: LD_INT 1
32836: NEG
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 1
32844: NEG
32845: PUSH
32846: LD_INT 2
32848: NEG
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: PUSH
32854: LD_INT 0
32856: PUSH
32857: LD_INT 2
32859: NEG
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: PUSH
32865: LD_INT 1
32867: PUSH
32868: LD_INT 1
32870: NEG
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PUSH
32876: LD_INT 2
32878: PUSH
32879: LD_INT 0
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: LD_INT 2
32888: PUSH
32889: LD_INT 1
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: PUSH
32896: LD_INT 2
32898: PUSH
32899: LD_INT 2
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 1
32908: PUSH
32909: LD_INT 2
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: PUSH
32916: LD_INT 0
32918: PUSH
32919: LD_INT 2
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PUSH
32926: LD_INT 1
32928: NEG
32929: PUSH
32930: LD_INT 1
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 2
32939: NEG
32940: PUSH
32941: LD_INT 0
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 2
32950: NEG
32951: PUSH
32952: LD_INT 1
32954: NEG
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 2
32962: NEG
32963: PUSH
32964: LD_INT 2
32966: NEG
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: LIST
32991: LIST
32992: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32993: LD_ADDR_VAR 0 21
32997: PUSH
32998: LD_INT 0
33000: PUSH
33001: LD_INT 0
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: LD_INT 0
33010: PUSH
33011: LD_INT 1
33013: NEG
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: LD_INT 1
33021: PUSH
33022: LD_INT 0
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: LD_INT 1
33031: PUSH
33032: LD_INT 1
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: PUSH
33039: LD_INT 0
33041: PUSH
33042: LD_INT 1
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 1
33051: NEG
33052: PUSH
33053: LD_INT 0
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: PUSH
33060: LD_INT 1
33062: NEG
33063: PUSH
33064: LD_INT 1
33066: NEG
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 1
33074: NEG
33075: PUSH
33076: LD_INT 2
33078: NEG
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PUSH
33084: LD_INT 0
33086: PUSH
33087: LD_INT 2
33089: NEG
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PUSH
33095: LD_INT 1
33097: PUSH
33098: LD_INT 1
33100: NEG
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 2
33108: PUSH
33109: LD_INT 0
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 2
33118: PUSH
33119: LD_INT 1
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PUSH
33126: LD_INT 2
33128: PUSH
33129: LD_INT 2
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 1
33138: PUSH
33139: LD_INT 2
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PUSH
33146: LD_INT 0
33148: PUSH
33149: LD_INT 2
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: PUSH
33156: LD_INT 1
33158: NEG
33159: PUSH
33160: LD_INT 1
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PUSH
33167: LD_INT 2
33169: NEG
33170: PUSH
33171: LD_INT 0
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: PUSH
33178: LD_INT 2
33180: NEG
33181: PUSH
33182: LD_INT 1
33184: NEG
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: LD_INT 2
33192: NEG
33193: PUSH
33194: LD_INT 2
33196: NEG
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33223: LD_ADDR_VAR 0 22
33227: PUSH
33228: LD_INT 0
33230: PUSH
33231: LD_INT 0
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 0
33240: PUSH
33241: LD_INT 1
33243: NEG
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 1
33251: PUSH
33252: LD_INT 0
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 1
33261: PUSH
33262: LD_INT 1
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: PUSH
33269: LD_INT 0
33271: PUSH
33272: LD_INT 1
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 1
33281: NEG
33282: PUSH
33283: LD_INT 0
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: LD_INT 1
33292: NEG
33293: PUSH
33294: LD_INT 1
33296: NEG
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 1
33304: NEG
33305: PUSH
33306: LD_INT 2
33308: NEG
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: PUSH
33314: LD_INT 0
33316: PUSH
33317: LD_INT 2
33319: NEG
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PUSH
33325: LD_INT 1
33327: PUSH
33328: LD_INT 1
33330: NEG
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: PUSH
33336: LD_INT 2
33338: PUSH
33339: LD_INT 0
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PUSH
33346: LD_INT 2
33348: PUSH
33349: LD_INT 1
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: PUSH
33356: LD_INT 2
33358: PUSH
33359: LD_INT 2
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: PUSH
33366: LD_INT 1
33368: PUSH
33369: LD_INT 2
33371: PUSH
33372: EMPTY
33373: LIST
33374: LIST
33375: PUSH
33376: LD_INT 0
33378: PUSH
33379: LD_INT 2
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PUSH
33386: LD_INT 1
33388: NEG
33389: PUSH
33390: LD_INT 1
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 2
33399: NEG
33400: PUSH
33401: LD_INT 0
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 2
33410: NEG
33411: PUSH
33412: LD_INT 1
33414: NEG
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: PUSH
33420: LD_INT 2
33422: NEG
33423: PUSH
33424: LD_INT 2
33426: NEG
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: EMPTY
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33453: LD_ADDR_VAR 0 23
33457: PUSH
33458: LD_INT 0
33460: PUSH
33461: LD_INT 0
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 0
33470: PUSH
33471: LD_INT 1
33473: NEG
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PUSH
33479: LD_INT 1
33481: PUSH
33482: LD_INT 0
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: LD_INT 1
33491: PUSH
33492: LD_INT 1
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: LD_INT 0
33501: PUSH
33502: LD_INT 1
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: LD_INT 1
33511: NEG
33512: PUSH
33513: LD_INT 0
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: LD_INT 1
33522: NEG
33523: PUSH
33524: LD_INT 1
33526: NEG
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 1
33534: NEG
33535: PUSH
33536: LD_INT 2
33538: NEG
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 0
33546: PUSH
33547: LD_INT 2
33549: NEG
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PUSH
33555: LD_INT 1
33557: PUSH
33558: LD_INT 1
33560: NEG
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: PUSH
33566: LD_INT 2
33568: PUSH
33569: LD_INT 0
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: PUSH
33576: LD_INT 2
33578: PUSH
33579: LD_INT 1
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: PUSH
33586: LD_INT 2
33588: PUSH
33589: LD_INT 2
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: PUSH
33596: LD_INT 1
33598: PUSH
33599: LD_INT 2
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 0
33608: PUSH
33609: LD_INT 2
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 1
33618: NEG
33619: PUSH
33620: LD_INT 1
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 2
33629: NEG
33630: PUSH
33631: LD_INT 0
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: PUSH
33638: LD_INT 2
33640: NEG
33641: PUSH
33642: LD_INT 1
33644: NEG
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 2
33652: NEG
33653: PUSH
33654: LD_INT 2
33656: NEG
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 2
33664: NEG
33665: PUSH
33666: LD_INT 3
33668: NEG
33669: PUSH
33670: EMPTY
33671: LIST
33672: LIST
33673: PUSH
33674: LD_INT 1
33676: NEG
33677: PUSH
33678: LD_INT 3
33680: NEG
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: PUSH
33686: LD_INT 1
33688: PUSH
33689: LD_INT 2
33691: NEG
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: PUSH
33697: LD_INT 2
33699: PUSH
33700: LD_INT 1
33702: NEG
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
33733: LD_ADDR_VAR 0 24
33737: PUSH
33738: LD_INT 0
33740: PUSH
33741: LD_INT 0
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PUSH
33748: LD_INT 0
33750: PUSH
33751: LD_INT 1
33753: NEG
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 1
33761: PUSH
33762: LD_INT 0
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 1
33771: PUSH
33772: LD_INT 1
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 0
33781: PUSH
33782: LD_INT 1
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PUSH
33789: LD_INT 1
33791: NEG
33792: PUSH
33793: LD_INT 0
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PUSH
33800: LD_INT 1
33802: NEG
33803: PUSH
33804: LD_INT 1
33806: NEG
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: LD_INT 1
33814: NEG
33815: PUSH
33816: LD_INT 2
33818: NEG
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 0
33826: PUSH
33827: LD_INT 2
33829: NEG
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: LD_INT 1
33837: PUSH
33838: LD_INT 1
33840: NEG
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 2
33848: PUSH
33849: LD_INT 0
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PUSH
33856: LD_INT 2
33858: PUSH
33859: LD_INT 1
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: LD_INT 2
33868: PUSH
33869: LD_INT 2
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PUSH
33876: LD_INT 1
33878: PUSH
33879: LD_INT 2
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: LD_INT 0
33888: PUSH
33889: LD_INT 2
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: LD_INT 1
33898: NEG
33899: PUSH
33900: LD_INT 1
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: LD_INT 2
33909: NEG
33910: PUSH
33911: LD_INT 0
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: PUSH
33918: LD_INT 2
33920: NEG
33921: PUSH
33922: LD_INT 1
33924: NEG
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 2
33932: NEG
33933: PUSH
33934: LD_INT 2
33936: NEG
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PUSH
33942: LD_INT 1
33944: PUSH
33945: LD_INT 2
33947: NEG
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 2
33955: PUSH
33956: LD_INT 1
33958: NEG
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: LD_INT 3
33966: PUSH
33967: LD_INT 1
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: LD_INT 3
33976: PUSH
33977: LD_INT 2
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
34009: LD_ADDR_VAR 0 25
34013: PUSH
34014: LD_INT 0
34016: PUSH
34017: LD_INT 0
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: PUSH
34024: LD_INT 0
34026: PUSH
34027: LD_INT 1
34029: NEG
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: LD_INT 1
34037: PUSH
34038: LD_INT 0
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: PUSH
34045: LD_INT 1
34047: PUSH
34048: LD_INT 1
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: PUSH
34055: LD_INT 0
34057: PUSH
34058: LD_INT 1
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 1
34067: NEG
34068: PUSH
34069: LD_INT 0
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PUSH
34076: LD_INT 1
34078: NEG
34079: PUSH
34080: LD_INT 1
34082: NEG
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: LD_INT 1
34090: NEG
34091: PUSH
34092: LD_INT 2
34094: NEG
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 0
34102: PUSH
34103: LD_INT 2
34105: NEG
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 1
34113: PUSH
34114: LD_INT 1
34116: NEG
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 2
34124: PUSH
34125: LD_INT 0
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: PUSH
34132: LD_INT 2
34134: PUSH
34135: LD_INT 1
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: PUSH
34142: LD_INT 2
34144: PUSH
34145: LD_INT 2
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: PUSH
34152: LD_INT 1
34154: PUSH
34155: LD_INT 2
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: PUSH
34162: LD_INT 0
34164: PUSH
34165: LD_INT 2
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 1
34174: NEG
34175: PUSH
34176: LD_INT 1
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: PUSH
34183: LD_INT 2
34185: NEG
34186: PUSH
34187: LD_INT 0
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PUSH
34194: LD_INT 2
34196: NEG
34197: PUSH
34198: LD_INT 1
34200: NEG
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: PUSH
34206: LD_INT 2
34208: NEG
34209: PUSH
34210: LD_INT 2
34212: NEG
34213: PUSH
34214: EMPTY
34215: LIST
34216: LIST
34217: PUSH
34218: LD_INT 3
34220: PUSH
34221: LD_INT 1
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: PUSH
34228: LD_INT 3
34230: PUSH
34231: LD_INT 2
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: PUSH
34238: LD_INT 2
34240: PUSH
34241: LD_INT 3
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PUSH
34248: LD_INT 1
34250: PUSH
34251: LD_INT 3
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34283: LD_ADDR_VAR 0 26
34287: PUSH
34288: LD_INT 0
34290: PUSH
34291: LD_INT 0
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PUSH
34298: LD_INT 0
34300: PUSH
34301: LD_INT 1
34303: NEG
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: PUSH
34309: LD_INT 1
34311: PUSH
34312: LD_INT 0
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_INT 1
34321: PUSH
34322: LD_INT 1
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: PUSH
34329: LD_INT 0
34331: PUSH
34332: LD_INT 1
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: PUSH
34339: LD_INT 1
34341: NEG
34342: PUSH
34343: LD_INT 0
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 1
34352: NEG
34353: PUSH
34354: LD_INT 1
34356: NEG
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 1
34364: NEG
34365: PUSH
34366: LD_INT 2
34368: NEG
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: PUSH
34374: LD_INT 0
34376: PUSH
34377: LD_INT 2
34379: NEG
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: PUSH
34385: LD_INT 1
34387: PUSH
34388: LD_INT 1
34390: NEG
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: LD_INT 2
34398: PUSH
34399: LD_INT 0
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: PUSH
34406: LD_INT 2
34408: PUSH
34409: LD_INT 1
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: PUSH
34416: LD_INT 2
34418: PUSH
34419: LD_INT 2
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PUSH
34426: LD_INT 1
34428: PUSH
34429: LD_INT 2
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PUSH
34436: LD_INT 0
34438: PUSH
34439: LD_INT 2
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PUSH
34446: LD_INT 1
34448: NEG
34449: PUSH
34450: LD_INT 1
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: PUSH
34457: LD_INT 2
34459: NEG
34460: PUSH
34461: LD_INT 0
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: LD_INT 2
34470: NEG
34471: PUSH
34472: LD_INT 1
34474: NEG
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: LD_INT 2
34482: NEG
34483: PUSH
34484: LD_INT 2
34486: NEG
34487: PUSH
34488: EMPTY
34489: LIST
34490: LIST
34491: PUSH
34492: LD_INT 2
34494: PUSH
34495: LD_INT 3
34497: PUSH
34498: EMPTY
34499: LIST
34500: LIST
34501: PUSH
34502: LD_INT 1
34504: PUSH
34505: LD_INT 3
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: PUSH
34512: LD_INT 1
34514: NEG
34515: PUSH
34516: LD_INT 2
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: PUSH
34523: LD_INT 2
34525: NEG
34526: PUSH
34527: LD_INT 1
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34559: LD_ADDR_VAR 0 27
34563: PUSH
34564: LD_INT 0
34566: PUSH
34567: LD_INT 0
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: PUSH
34574: LD_INT 0
34576: PUSH
34577: LD_INT 1
34579: NEG
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: LD_INT 1
34587: PUSH
34588: LD_INT 0
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PUSH
34595: LD_INT 1
34597: PUSH
34598: LD_INT 1
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: PUSH
34605: LD_INT 0
34607: PUSH
34608: LD_INT 1
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PUSH
34615: LD_INT 1
34617: NEG
34618: PUSH
34619: LD_INT 0
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: PUSH
34626: LD_INT 1
34628: NEG
34629: PUSH
34630: LD_INT 1
34632: NEG
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 1
34640: NEG
34641: PUSH
34642: LD_INT 2
34644: NEG
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 0
34652: PUSH
34653: LD_INT 2
34655: NEG
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 1
34663: PUSH
34664: LD_INT 1
34666: NEG
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 2
34674: PUSH
34675: LD_INT 0
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 2
34684: PUSH
34685: LD_INT 1
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: PUSH
34692: LD_INT 2
34694: PUSH
34695: LD_INT 2
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: LD_INT 1
34704: PUSH
34705: LD_INT 2
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: PUSH
34712: LD_INT 0
34714: PUSH
34715: LD_INT 2
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 1
34724: NEG
34725: PUSH
34726: LD_INT 1
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: PUSH
34733: LD_INT 2
34735: NEG
34736: PUSH
34737: LD_INT 0
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 2
34746: NEG
34747: PUSH
34748: LD_INT 1
34750: NEG
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 2
34758: NEG
34759: PUSH
34760: LD_INT 2
34762: NEG
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 1
34770: NEG
34771: PUSH
34772: LD_INT 2
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: LD_INT 2
34781: NEG
34782: PUSH
34783: LD_INT 1
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 3
34792: NEG
34793: PUSH
34794: LD_INT 1
34796: NEG
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: LD_INT 3
34804: NEG
34805: PUSH
34806: LD_INT 2
34808: NEG
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34839: LD_ADDR_VAR 0 28
34843: PUSH
34844: LD_INT 0
34846: PUSH
34847: LD_INT 0
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: PUSH
34854: LD_INT 0
34856: PUSH
34857: LD_INT 1
34859: NEG
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 1
34867: PUSH
34868: LD_INT 0
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: LD_INT 1
34877: PUSH
34878: LD_INT 1
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 0
34887: PUSH
34888: LD_INT 1
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: LD_INT 1
34897: NEG
34898: PUSH
34899: LD_INT 0
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: PUSH
34906: LD_INT 1
34908: NEG
34909: PUSH
34910: LD_INT 1
34912: NEG
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: LD_INT 1
34920: NEG
34921: PUSH
34922: LD_INT 2
34924: NEG
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: LD_INT 0
34932: PUSH
34933: LD_INT 2
34935: NEG
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: LD_INT 1
34943: PUSH
34944: LD_INT 1
34946: NEG
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PUSH
34952: LD_INT 2
34954: PUSH
34955: LD_INT 0
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: LD_INT 2
34964: PUSH
34965: LD_INT 1
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 2
34974: PUSH
34975: LD_INT 2
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: PUSH
34982: LD_INT 1
34984: PUSH
34985: LD_INT 2
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: PUSH
34992: LD_INT 0
34994: PUSH
34995: LD_INT 2
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 1
35004: NEG
35005: PUSH
35006: LD_INT 1
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 2
35015: NEG
35016: PUSH
35017: LD_INT 0
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: LD_INT 2
35026: NEG
35027: PUSH
35028: LD_INT 1
35030: NEG
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 2
35038: NEG
35039: PUSH
35040: LD_INT 2
35042: NEG
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PUSH
35048: LD_INT 2
35050: NEG
35051: PUSH
35052: LD_INT 3
35054: NEG
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PUSH
35060: LD_INT 1
35062: NEG
35063: PUSH
35064: LD_INT 3
35066: NEG
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: LD_INT 3
35074: NEG
35075: PUSH
35076: LD_INT 1
35078: NEG
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: PUSH
35084: LD_INT 3
35086: NEG
35087: PUSH
35088: LD_INT 2
35090: NEG
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: LIST
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35121: LD_ADDR_VAR 0 29
35125: PUSH
35126: LD_INT 0
35128: PUSH
35129: LD_INT 0
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: PUSH
35136: LD_INT 0
35138: PUSH
35139: LD_INT 1
35141: NEG
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: PUSH
35147: LD_INT 1
35149: PUSH
35150: LD_INT 0
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: LD_INT 1
35159: PUSH
35160: LD_INT 1
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: PUSH
35167: LD_INT 0
35169: PUSH
35170: LD_INT 1
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: PUSH
35177: LD_INT 1
35179: NEG
35180: PUSH
35181: LD_INT 0
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PUSH
35188: LD_INT 1
35190: NEG
35191: PUSH
35192: LD_INT 1
35194: NEG
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PUSH
35200: LD_INT 1
35202: NEG
35203: PUSH
35204: LD_INT 2
35206: NEG
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: PUSH
35212: LD_INT 0
35214: PUSH
35215: LD_INT 2
35217: NEG
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: PUSH
35223: LD_INT 1
35225: PUSH
35226: LD_INT 1
35228: NEG
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: PUSH
35234: LD_INT 2
35236: PUSH
35237: LD_INT 0
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: LD_INT 2
35246: PUSH
35247: LD_INT 1
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: LD_INT 1
35256: PUSH
35257: LD_INT 2
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: LD_INT 0
35266: PUSH
35267: LD_INT 2
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: PUSH
35274: LD_INT 1
35276: NEG
35277: PUSH
35278: LD_INT 1
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PUSH
35285: LD_INT 2
35287: NEG
35288: PUSH
35289: LD_INT 1
35291: NEG
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PUSH
35297: LD_INT 2
35299: NEG
35300: PUSH
35301: LD_INT 2
35303: NEG
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PUSH
35309: LD_INT 2
35311: NEG
35312: PUSH
35313: LD_INT 3
35315: NEG
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: LD_INT 2
35323: PUSH
35324: LD_INT 1
35326: NEG
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: LD_INT 3
35334: PUSH
35335: LD_INT 1
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 1
35344: PUSH
35345: LD_INT 3
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: LD_INT 1
35354: NEG
35355: PUSH
35356: LD_INT 2
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: LD_INT 3
35365: NEG
35366: PUSH
35367: LD_INT 2
35369: NEG
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35400: LD_ADDR_VAR 0 30
35404: PUSH
35405: LD_INT 0
35407: PUSH
35408: LD_INT 0
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PUSH
35415: LD_INT 0
35417: PUSH
35418: LD_INT 1
35420: NEG
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: PUSH
35426: LD_INT 1
35428: PUSH
35429: LD_INT 0
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: LD_INT 1
35438: PUSH
35439: LD_INT 1
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 0
35448: PUSH
35449: LD_INT 1
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 1
35458: NEG
35459: PUSH
35460: LD_INT 0
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: PUSH
35467: LD_INT 1
35469: NEG
35470: PUSH
35471: LD_INT 1
35473: NEG
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: PUSH
35479: LD_INT 1
35481: NEG
35482: PUSH
35483: LD_INT 2
35485: NEG
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: LD_INT 0
35493: PUSH
35494: LD_INT 2
35496: NEG
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: PUSH
35502: LD_INT 1
35504: PUSH
35505: LD_INT 1
35507: NEG
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: LD_INT 2
35515: PUSH
35516: LD_INT 0
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PUSH
35523: LD_INT 2
35525: PUSH
35526: LD_INT 1
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: LD_INT 2
35535: PUSH
35536: LD_INT 2
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 1
35545: PUSH
35546: LD_INT 2
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 1
35555: NEG
35556: PUSH
35557: LD_INT 1
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: PUSH
35564: LD_INT 2
35566: NEG
35567: PUSH
35568: LD_INT 0
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: PUSH
35575: LD_INT 2
35577: NEG
35578: PUSH
35579: LD_INT 1
35581: NEG
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: PUSH
35587: LD_INT 1
35589: NEG
35590: PUSH
35591: LD_INT 3
35593: NEG
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PUSH
35599: LD_INT 1
35601: PUSH
35602: LD_INT 2
35604: NEG
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: PUSH
35610: LD_INT 3
35612: PUSH
35613: LD_INT 2
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: PUSH
35620: LD_INT 2
35622: PUSH
35623: LD_INT 3
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: PUSH
35630: LD_INT 2
35632: NEG
35633: PUSH
35634: LD_INT 1
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: PUSH
35641: LD_INT 3
35643: NEG
35644: PUSH
35645: LD_INT 1
35647: NEG
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35678: LD_ADDR_VAR 0 31
35682: PUSH
35683: LD_INT 0
35685: PUSH
35686: LD_INT 0
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: LD_INT 0
35695: PUSH
35696: LD_INT 1
35698: NEG
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: LD_INT 1
35706: PUSH
35707: LD_INT 0
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 1
35716: PUSH
35717: LD_INT 1
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_INT 0
35726: PUSH
35727: LD_INT 1
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 1
35736: NEG
35737: PUSH
35738: LD_INT 0
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 1
35747: NEG
35748: PUSH
35749: LD_INT 1
35751: NEG
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PUSH
35757: LD_INT 1
35759: NEG
35760: PUSH
35761: LD_INT 2
35763: NEG
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PUSH
35769: LD_INT 1
35771: PUSH
35772: LD_INT 1
35774: NEG
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: LD_INT 2
35782: PUSH
35783: LD_INT 0
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: PUSH
35790: LD_INT 2
35792: PUSH
35793: LD_INT 1
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PUSH
35800: LD_INT 2
35802: PUSH
35803: LD_INT 2
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PUSH
35810: LD_INT 1
35812: PUSH
35813: LD_INT 2
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: PUSH
35820: LD_INT 0
35822: PUSH
35823: LD_INT 2
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: PUSH
35830: LD_INT 1
35832: NEG
35833: PUSH
35834: LD_INT 1
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: LD_INT 2
35843: NEG
35844: PUSH
35845: LD_INT 1
35847: NEG
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: PUSH
35853: LD_INT 2
35855: NEG
35856: PUSH
35857: LD_INT 2
35859: NEG
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: PUSH
35865: LD_INT 2
35867: NEG
35868: PUSH
35869: LD_INT 3
35871: NEG
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PUSH
35877: LD_INT 2
35879: PUSH
35880: LD_INT 1
35882: NEG
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: PUSH
35888: LD_INT 3
35890: PUSH
35891: LD_INT 1
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: LD_INT 1
35900: PUSH
35901: LD_INT 3
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 1
35910: NEG
35911: PUSH
35912: LD_INT 2
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: LD_INT 3
35921: NEG
35922: PUSH
35923: LD_INT 2
35925: NEG
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: LIST
35935: LIST
35936: LIST
35937: LIST
35938: LIST
35939: LIST
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35956: LD_ADDR_VAR 0 32
35960: PUSH
35961: LD_INT 0
35963: PUSH
35964: LD_INT 0
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 0
35973: PUSH
35974: LD_INT 1
35976: NEG
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: PUSH
35982: LD_INT 1
35984: PUSH
35985: LD_INT 0
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PUSH
35992: LD_INT 1
35994: PUSH
35995: LD_INT 1
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: LD_INT 0
36004: PUSH
36005: LD_INT 1
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: PUSH
36012: LD_INT 1
36014: NEG
36015: PUSH
36016: LD_INT 0
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: PUSH
36023: LD_INT 1
36025: NEG
36026: PUSH
36027: LD_INT 1
36029: NEG
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 1
36037: NEG
36038: PUSH
36039: LD_INT 2
36041: NEG
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: LD_INT 0
36049: PUSH
36050: LD_INT 2
36052: NEG
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: PUSH
36058: LD_INT 1
36060: PUSH
36061: LD_INT 1
36063: NEG
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: PUSH
36069: LD_INT 2
36071: PUSH
36072: LD_INT 1
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PUSH
36079: LD_INT 2
36081: PUSH
36082: LD_INT 2
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: PUSH
36089: LD_INT 1
36091: PUSH
36092: LD_INT 2
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: LD_INT 0
36101: PUSH
36102: LD_INT 2
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: LD_INT 1
36111: NEG
36112: PUSH
36113: LD_INT 1
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: PUSH
36120: LD_INT 2
36122: NEG
36123: PUSH
36124: LD_INT 0
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: PUSH
36131: LD_INT 2
36133: NEG
36134: PUSH
36135: LD_INT 1
36137: NEG
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: PUSH
36143: LD_INT 1
36145: NEG
36146: PUSH
36147: LD_INT 3
36149: NEG
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: PUSH
36155: LD_INT 1
36157: PUSH
36158: LD_INT 2
36160: NEG
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PUSH
36166: LD_INT 3
36168: PUSH
36169: LD_INT 2
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: PUSH
36176: LD_INT 2
36178: PUSH
36179: LD_INT 3
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: LD_INT 2
36188: NEG
36189: PUSH
36190: LD_INT 1
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: PUSH
36197: LD_INT 3
36199: NEG
36200: PUSH
36201: LD_INT 1
36203: NEG
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36234: LD_ADDR_VAR 0 33
36238: PUSH
36239: LD_INT 0
36241: PUSH
36242: LD_INT 0
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: PUSH
36249: LD_INT 0
36251: PUSH
36252: LD_INT 1
36254: NEG
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 1
36262: PUSH
36263: LD_INT 0
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: PUSH
36270: LD_INT 1
36272: PUSH
36273: LD_INT 1
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 0
36282: PUSH
36283: LD_INT 1
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: PUSH
36290: LD_INT 1
36292: NEG
36293: PUSH
36294: LD_INT 0
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: PUSH
36301: LD_INT 1
36303: NEG
36304: PUSH
36305: LD_INT 1
36307: NEG
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: PUSH
36313: LD_INT 1
36315: NEG
36316: PUSH
36317: LD_INT 2
36319: NEG
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 1
36327: PUSH
36328: LD_INT 1
36330: NEG
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 2
36338: PUSH
36339: LD_INT 0
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PUSH
36346: LD_INT 2
36348: PUSH
36349: LD_INT 1
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: LD_INT 1
36358: PUSH
36359: LD_INT 2
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 0
36368: PUSH
36369: LD_INT 2
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 1
36378: NEG
36379: PUSH
36380: LD_INT 1
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: LD_INT 2
36389: NEG
36390: PUSH
36391: LD_INT 0
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PUSH
36398: LD_INT 2
36400: NEG
36401: PUSH
36402: LD_INT 1
36404: NEG
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: PUSH
36410: LD_INT 2
36412: NEG
36413: PUSH
36414: LD_INT 2
36416: NEG
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PUSH
36422: LD_INT 2
36424: NEG
36425: PUSH
36426: LD_INT 3
36428: NEG
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: LD_INT 2
36436: PUSH
36437: LD_INT 1
36439: NEG
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: PUSH
36445: LD_INT 3
36447: PUSH
36448: LD_INT 1
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: PUSH
36455: LD_INT 1
36457: PUSH
36458: LD_INT 3
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: PUSH
36465: LD_INT 1
36467: NEG
36468: PUSH
36469: LD_INT 2
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: PUSH
36476: LD_INT 3
36478: NEG
36479: PUSH
36480: LD_INT 2
36482: NEG
36483: PUSH
36484: EMPTY
36485: LIST
36486: LIST
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: LIST
36495: LIST
36496: LIST
36497: LIST
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: LIST
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36513: LD_ADDR_VAR 0 34
36517: PUSH
36518: LD_INT 0
36520: PUSH
36521: LD_INT 0
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: LD_INT 0
36530: PUSH
36531: LD_INT 1
36533: NEG
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 1
36541: PUSH
36542: LD_INT 0
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: LD_INT 1
36551: PUSH
36552: LD_INT 1
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 0
36561: PUSH
36562: LD_INT 1
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 1
36571: NEG
36572: PUSH
36573: LD_INT 0
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: LD_INT 1
36582: NEG
36583: PUSH
36584: LD_INT 1
36586: NEG
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_INT 1
36594: NEG
36595: PUSH
36596: LD_INT 2
36598: NEG
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 0
36606: PUSH
36607: LD_INT 2
36609: NEG
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: PUSH
36615: LD_INT 1
36617: PUSH
36618: LD_INT 1
36620: NEG
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 2
36628: PUSH
36629: LD_INT 1
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 2
36638: PUSH
36639: LD_INT 2
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 1
36648: PUSH
36649: LD_INT 2
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: LD_INT 1
36658: NEG
36659: PUSH
36660: LD_INT 1
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: LD_INT 2
36669: NEG
36670: PUSH
36671: LD_INT 0
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PUSH
36678: LD_INT 2
36680: NEG
36681: PUSH
36682: LD_INT 1
36684: NEG
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: LD_INT 2
36692: NEG
36693: PUSH
36694: LD_INT 2
36696: NEG
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: LD_INT 1
36704: NEG
36705: PUSH
36706: LD_INT 3
36708: NEG
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: LD_INT 1
36716: PUSH
36717: LD_INT 2
36719: NEG
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: LD_INT 3
36727: PUSH
36728: LD_INT 2
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 2
36737: PUSH
36738: LD_INT 3
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: LD_INT 2
36747: NEG
36748: PUSH
36749: LD_INT 1
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: PUSH
36756: LD_INT 3
36758: NEG
36759: PUSH
36760: LD_INT 1
36762: NEG
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36793: LD_ADDR_VAR 0 35
36797: PUSH
36798: LD_INT 0
36800: PUSH
36801: LD_INT 0
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: PUSH
36808: LD_INT 0
36810: PUSH
36811: LD_INT 1
36813: NEG
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: PUSH
36819: LD_INT 1
36821: PUSH
36822: LD_INT 0
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: PUSH
36829: LD_INT 1
36831: PUSH
36832: LD_INT 1
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: PUSH
36839: LD_INT 0
36841: PUSH
36842: LD_INT 1
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 1
36851: NEG
36852: PUSH
36853: LD_INT 0
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 1
36862: NEG
36863: PUSH
36864: LD_INT 1
36866: NEG
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 2
36874: PUSH
36875: LD_INT 1
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 2
36884: NEG
36885: PUSH
36886: LD_INT 1
36888: NEG
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: EMPTY
36895: LIST
36896: LIST
36897: LIST
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: LIST
36903: LIST
36904: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36905: LD_ADDR_VAR 0 36
36909: PUSH
36910: LD_INT 0
36912: PUSH
36913: LD_INT 0
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: LD_INT 0
36922: PUSH
36923: LD_INT 1
36925: NEG
36926: PUSH
36927: EMPTY
36928: LIST
36929: LIST
36930: PUSH
36931: LD_INT 1
36933: PUSH
36934: LD_INT 0
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PUSH
36941: LD_INT 1
36943: PUSH
36944: LD_INT 1
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: LD_INT 0
36953: PUSH
36954: LD_INT 1
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: LD_INT 1
36963: NEG
36964: PUSH
36965: LD_INT 0
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: PUSH
36972: LD_INT 1
36974: NEG
36975: PUSH
36976: LD_INT 1
36978: NEG
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: PUSH
36984: LD_INT 1
36986: NEG
36987: PUSH
36988: LD_INT 2
36990: NEG
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PUSH
36996: LD_INT 1
36998: PUSH
36999: LD_INT 2
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37017: LD_ADDR_VAR 0 37
37021: PUSH
37022: LD_INT 0
37024: PUSH
37025: LD_INT 0
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: PUSH
37032: LD_INT 0
37034: PUSH
37035: LD_INT 1
37037: NEG
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: LD_INT 1
37045: PUSH
37046: LD_INT 0
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 1
37055: PUSH
37056: LD_INT 1
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 0
37065: PUSH
37066: LD_INT 1
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: PUSH
37073: LD_INT 1
37075: NEG
37076: PUSH
37077: LD_INT 0
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: PUSH
37084: LD_INT 1
37086: NEG
37087: PUSH
37088: LD_INT 1
37090: NEG
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: PUSH
37096: LD_INT 1
37098: PUSH
37099: LD_INT 1
37101: NEG
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: LD_INT 1
37109: NEG
37110: PUSH
37111: LD_INT 1
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: LIST
37122: LIST
37123: LIST
37124: LIST
37125: LIST
37126: LIST
37127: LIST
37128: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37129: LD_ADDR_VAR 0 38
37133: PUSH
37134: LD_INT 0
37136: PUSH
37137: LD_INT 0
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: PUSH
37144: LD_INT 0
37146: PUSH
37147: LD_INT 1
37149: NEG
37150: PUSH
37151: EMPTY
37152: LIST
37153: LIST
37154: PUSH
37155: LD_INT 1
37157: PUSH
37158: LD_INT 0
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: PUSH
37165: LD_INT 1
37167: PUSH
37168: LD_INT 1
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: PUSH
37175: LD_INT 0
37177: PUSH
37178: LD_INT 1
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: LD_INT 1
37187: NEG
37188: PUSH
37189: LD_INT 0
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PUSH
37196: LD_INT 1
37198: NEG
37199: PUSH
37200: LD_INT 1
37202: NEG
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 2
37210: PUSH
37211: LD_INT 1
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 2
37220: NEG
37221: PUSH
37222: LD_INT 1
37224: NEG
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: LIST
37238: LIST
37239: LIST
37240: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37241: LD_ADDR_VAR 0 39
37245: PUSH
37246: LD_INT 0
37248: PUSH
37249: LD_INT 0
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 0
37258: PUSH
37259: LD_INT 1
37261: NEG
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: LD_INT 1
37269: PUSH
37270: LD_INT 0
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: LD_INT 1
37279: PUSH
37280: LD_INT 1
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: LD_INT 0
37289: PUSH
37290: LD_INT 1
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 1
37299: NEG
37300: PUSH
37301: LD_INT 0
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: LD_INT 1
37310: NEG
37311: PUSH
37312: LD_INT 1
37314: NEG
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 1
37322: NEG
37323: PUSH
37324: LD_INT 2
37326: NEG
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PUSH
37332: LD_INT 1
37334: PUSH
37335: LD_INT 2
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37353: LD_ADDR_VAR 0 40
37357: PUSH
37358: LD_INT 0
37360: PUSH
37361: LD_INT 0
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: PUSH
37368: LD_INT 0
37370: PUSH
37371: LD_INT 1
37373: NEG
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: PUSH
37379: LD_INT 1
37381: PUSH
37382: LD_INT 0
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PUSH
37389: LD_INT 1
37391: PUSH
37392: LD_INT 1
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: LD_INT 0
37401: PUSH
37402: LD_INT 1
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 1
37411: NEG
37412: PUSH
37413: LD_INT 0
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PUSH
37420: LD_INT 1
37422: NEG
37423: PUSH
37424: LD_INT 1
37426: NEG
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: LD_INT 1
37434: PUSH
37435: LD_INT 1
37437: NEG
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: LD_INT 1
37445: NEG
37446: PUSH
37447: LD_INT 1
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37465: LD_ADDR_VAR 0 41
37469: PUSH
37470: LD_INT 0
37472: PUSH
37473: LD_INT 0
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_INT 0
37482: PUSH
37483: LD_INT 1
37485: NEG
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 1
37493: PUSH
37494: LD_INT 0
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: PUSH
37501: LD_INT 1
37503: PUSH
37504: LD_INT 1
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: PUSH
37511: LD_INT 0
37513: PUSH
37514: LD_INT 1
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PUSH
37521: LD_INT 1
37523: NEG
37524: PUSH
37525: LD_INT 0
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 1
37534: NEG
37535: PUSH
37536: LD_INT 1
37538: NEG
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 1
37546: NEG
37547: PUSH
37548: LD_INT 2
37550: NEG
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: PUSH
37556: LD_INT 1
37558: PUSH
37559: LD_INT 1
37561: NEG
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PUSH
37567: LD_INT 2
37569: PUSH
37570: LD_INT 0
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: LD_INT 2
37579: PUSH
37580: LD_INT 1
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: PUSH
37587: LD_INT 2
37589: PUSH
37590: LD_INT 2
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: PUSH
37597: LD_INT 1
37599: PUSH
37600: LD_INT 2
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 1
37609: NEG
37610: PUSH
37611: LD_INT 1
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PUSH
37618: LD_INT 2
37620: NEG
37621: PUSH
37622: LD_INT 0
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: LD_INT 2
37631: NEG
37632: PUSH
37633: LD_INT 1
37635: NEG
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: LD_INT 2
37643: NEG
37644: PUSH
37645: LD_INT 2
37647: NEG
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 2
37655: NEG
37656: PUSH
37657: LD_INT 3
37659: NEG
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PUSH
37665: LD_INT 2
37667: PUSH
37668: LD_INT 1
37670: NEG
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: PUSH
37676: LD_INT 3
37678: PUSH
37679: LD_INT 0
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: PUSH
37686: LD_INT 3
37688: PUSH
37689: LD_INT 1
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PUSH
37696: LD_INT 3
37698: PUSH
37699: LD_INT 2
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: LD_INT 3
37708: PUSH
37709: LD_INT 3
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: LD_INT 2
37718: PUSH
37719: LD_INT 3
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: PUSH
37726: LD_INT 2
37728: NEG
37729: PUSH
37730: LD_INT 1
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: PUSH
37737: LD_INT 3
37739: NEG
37740: PUSH
37741: LD_INT 0
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: PUSH
37748: LD_INT 3
37750: NEG
37751: PUSH
37752: LD_INT 1
37754: NEG
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PUSH
37760: LD_INT 3
37762: NEG
37763: PUSH
37764: LD_INT 2
37766: NEG
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: LD_INT 3
37774: NEG
37775: PUSH
37776: LD_INT 3
37778: NEG
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: LIST
37788: LIST
37789: LIST
37790: LIST
37791: LIST
37792: LIST
37793: LIST
37794: LIST
37795: LIST
37796: LIST
37797: LIST
37798: LIST
37799: LIST
37800: LIST
37801: LIST
37802: LIST
37803: LIST
37804: LIST
37805: LIST
37806: LIST
37807: LIST
37808: LIST
37809: LIST
37810: LIST
37811: LIST
37812: LIST
37813: LIST
37814: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37815: LD_ADDR_VAR 0 42
37819: PUSH
37820: LD_INT 0
37822: PUSH
37823: LD_INT 0
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 0
37832: PUSH
37833: LD_INT 1
37835: NEG
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 1
37843: PUSH
37844: LD_INT 0
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: PUSH
37851: LD_INT 1
37853: PUSH
37854: LD_INT 1
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: LD_INT 0
37863: PUSH
37864: LD_INT 1
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 1
37873: NEG
37874: PUSH
37875: LD_INT 0
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 1
37884: NEG
37885: PUSH
37886: LD_INT 1
37888: NEG
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: LD_INT 1
37896: NEG
37897: PUSH
37898: LD_INT 2
37900: NEG
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: PUSH
37906: LD_INT 0
37908: PUSH
37909: LD_INT 2
37911: NEG
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: LD_INT 1
37919: PUSH
37920: LD_INT 1
37922: NEG
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 2
37930: PUSH
37931: LD_INT 1
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 2
37940: PUSH
37941: LD_INT 2
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: LD_INT 1
37950: PUSH
37951: LD_INT 2
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: PUSH
37958: LD_INT 0
37960: PUSH
37961: LD_INT 2
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: PUSH
37968: LD_INT 1
37970: NEG
37971: PUSH
37972: LD_INT 1
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: LD_INT 2
37981: NEG
37982: PUSH
37983: LD_INT 1
37985: NEG
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: LD_INT 2
37993: NEG
37994: PUSH
37995: LD_INT 2
37997: NEG
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: LD_INT 2
38005: NEG
38006: PUSH
38007: LD_INT 3
38009: NEG
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 1
38017: NEG
38018: PUSH
38019: LD_INT 3
38021: NEG
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 0
38029: PUSH
38030: LD_INT 3
38032: NEG
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 1
38040: PUSH
38041: LD_INT 2
38043: NEG
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 3
38051: PUSH
38052: LD_INT 2
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 3
38061: PUSH
38062: LD_INT 3
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 2
38071: PUSH
38072: LD_INT 3
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 1
38081: PUSH
38082: LD_INT 3
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 0
38091: PUSH
38092: LD_INT 3
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: PUSH
38099: LD_INT 1
38101: NEG
38102: PUSH
38103: LD_INT 2
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: PUSH
38110: LD_INT 3
38112: NEG
38113: PUSH
38114: LD_INT 2
38116: NEG
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: PUSH
38122: LD_INT 3
38124: NEG
38125: PUSH
38126: LD_INT 3
38128: NEG
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38165: LD_ADDR_VAR 0 43
38169: PUSH
38170: LD_INT 0
38172: PUSH
38173: LD_INT 0
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PUSH
38180: LD_INT 0
38182: PUSH
38183: LD_INT 1
38185: NEG
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: LD_INT 1
38193: PUSH
38194: LD_INT 0
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: PUSH
38201: LD_INT 1
38203: PUSH
38204: LD_INT 1
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PUSH
38211: LD_INT 0
38213: PUSH
38214: LD_INT 1
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 1
38223: NEG
38224: PUSH
38225: LD_INT 0
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 1
38234: NEG
38235: PUSH
38236: LD_INT 1
38238: NEG
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 1
38246: NEG
38247: PUSH
38248: LD_INT 2
38250: NEG
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 0
38258: PUSH
38259: LD_INT 2
38261: NEG
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 1
38269: PUSH
38270: LD_INT 1
38272: NEG
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 2
38280: PUSH
38281: LD_INT 0
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: PUSH
38288: LD_INT 2
38290: PUSH
38291: LD_INT 1
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 1
38300: PUSH
38301: LD_INT 2
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: LD_INT 0
38310: PUSH
38311: LD_INT 2
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: LD_INT 1
38320: NEG
38321: PUSH
38322: LD_INT 1
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: LD_INT 2
38331: NEG
38332: PUSH
38333: LD_INT 0
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 2
38342: NEG
38343: PUSH
38344: LD_INT 1
38346: NEG
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 1
38354: NEG
38355: PUSH
38356: LD_INT 3
38358: NEG
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: PUSH
38364: LD_INT 0
38366: PUSH
38367: LD_INT 3
38369: NEG
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: PUSH
38375: LD_INT 1
38377: PUSH
38378: LD_INT 2
38380: NEG
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: PUSH
38386: LD_INT 2
38388: PUSH
38389: LD_INT 1
38391: NEG
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: PUSH
38397: LD_INT 3
38399: PUSH
38400: LD_INT 0
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 3
38409: PUSH
38410: LD_INT 1
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 1
38419: PUSH
38420: LD_INT 3
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 0
38429: PUSH
38430: LD_INT 3
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: PUSH
38437: LD_INT 1
38439: NEG
38440: PUSH
38441: LD_INT 2
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PUSH
38448: LD_INT 2
38450: NEG
38451: PUSH
38452: LD_INT 1
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: LD_INT 3
38461: NEG
38462: PUSH
38463: LD_INT 0
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: LD_INT 3
38472: NEG
38473: PUSH
38474: LD_INT 1
38476: NEG
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: LIST
38504: LIST
38505: LIST
38506: LIST
38507: LIST
38508: LIST
38509: LIST
38510: LIST
38511: LIST
38512: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38513: LD_ADDR_VAR 0 44
38517: PUSH
38518: LD_INT 0
38520: PUSH
38521: LD_INT 0
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: PUSH
38528: LD_INT 0
38530: PUSH
38531: LD_INT 1
38533: NEG
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 1
38541: PUSH
38542: LD_INT 0
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: LD_INT 1
38551: PUSH
38552: LD_INT 1
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: LD_INT 0
38561: PUSH
38562: LD_INT 1
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 1
38571: NEG
38572: PUSH
38573: LD_INT 0
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 1
38582: NEG
38583: PUSH
38584: LD_INT 1
38586: NEG
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 1
38594: NEG
38595: PUSH
38596: LD_INT 2
38598: NEG
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 1
38606: PUSH
38607: LD_INT 1
38609: NEG
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: LD_INT 2
38617: PUSH
38618: LD_INT 0
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PUSH
38625: LD_INT 2
38627: PUSH
38628: LD_INT 1
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_INT 2
38637: PUSH
38638: LD_INT 2
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: LD_INT 1
38647: PUSH
38648: LD_INT 2
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PUSH
38655: LD_INT 1
38657: NEG
38658: PUSH
38659: LD_INT 1
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: LD_INT 2
38668: NEG
38669: PUSH
38670: LD_INT 0
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_INT 2
38679: NEG
38680: PUSH
38681: LD_INT 1
38683: NEG
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: PUSH
38689: LD_INT 2
38691: NEG
38692: PUSH
38693: LD_INT 2
38695: NEG
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 2
38703: NEG
38704: PUSH
38705: LD_INT 3
38707: NEG
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: PUSH
38713: LD_INT 2
38715: PUSH
38716: LD_INT 1
38718: NEG
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: LD_INT 3
38726: PUSH
38727: LD_INT 0
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: PUSH
38734: LD_INT 3
38736: PUSH
38737: LD_INT 1
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: LD_INT 3
38746: PUSH
38747: LD_INT 2
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: PUSH
38754: LD_INT 3
38756: PUSH
38757: LD_INT 3
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: LD_INT 2
38766: PUSH
38767: LD_INT 3
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: LD_INT 2
38776: NEG
38777: PUSH
38778: LD_INT 1
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 3
38787: NEG
38788: PUSH
38789: LD_INT 0
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: LD_INT 3
38798: NEG
38799: PUSH
38800: LD_INT 1
38802: NEG
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: LD_INT 3
38810: NEG
38811: PUSH
38812: LD_INT 2
38814: NEG
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: LD_INT 3
38822: NEG
38823: PUSH
38824: LD_INT 3
38826: NEG
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38863: LD_ADDR_VAR 0 45
38867: PUSH
38868: LD_INT 0
38870: PUSH
38871: LD_INT 0
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: LD_INT 0
38880: PUSH
38881: LD_INT 1
38883: NEG
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 1
38891: PUSH
38892: LD_INT 0
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: PUSH
38899: LD_INT 1
38901: PUSH
38902: LD_INT 1
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: PUSH
38909: LD_INT 0
38911: PUSH
38912: LD_INT 1
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PUSH
38919: LD_INT 1
38921: NEG
38922: PUSH
38923: LD_INT 0
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: PUSH
38930: LD_INT 1
38932: NEG
38933: PUSH
38934: LD_INT 1
38936: NEG
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: LD_INT 1
38944: NEG
38945: PUSH
38946: LD_INT 2
38948: NEG
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: PUSH
38954: LD_INT 0
38956: PUSH
38957: LD_INT 2
38959: NEG
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: LD_INT 1
38967: PUSH
38968: LD_INT 1
38970: NEG
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: PUSH
38976: LD_INT 2
38978: PUSH
38979: LD_INT 1
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: LD_INT 2
38988: PUSH
38989: LD_INT 2
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 1
38998: PUSH
38999: LD_INT 2
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PUSH
39006: LD_INT 0
39008: PUSH
39009: LD_INT 2
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: LD_INT 1
39018: NEG
39019: PUSH
39020: LD_INT 1
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: LD_INT 2
39029: NEG
39030: PUSH
39031: LD_INT 1
39033: NEG
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 2
39041: NEG
39042: PUSH
39043: LD_INT 2
39045: NEG
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: PUSH
39051: LD_INT 2
39053: NEG
39054: PUSH
39055: LD_INT 3
39057: NEG
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: PUSH
39063: LD_INT 1
39065: NEG
39066: PUSH
39067: LD_INT 3
39069: NEG
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: PUSH
39075: LD_INT 0
39077: PUSH
39078: LD_INT 3
39080: NEG
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 1
39088: PUSH
39089: LD_INT 2
39091: NEG
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 3
39099: PUSH
39100: LD_INT 2
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: PUSH
39107: LD_INT 3
39109: PUSH
39110: LD_INT 3
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: LD_INT 2
39119: PUSH
39120: LD_INT 3
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 1
39129: PUSH
39130: LD_INT 3
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: LD_INT 0
39139: PUSH
39140: LD_INT 3
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 1
39149: NEG
39150: PUSH
39151: LD_INT 2
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: LD_INT 3
39160: NEG
39161: PUSH
39162: LD_INT 2
39164: NEG
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 3
39172: NEG
39173: PUSH
39174: LD_INT 3
39176: NEG
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39213: LD_ADDR_VAR 0 46
39217: PUSH
39218: LD_INT 0
39220: PUSH
39221: LD_INT 0
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 0
39230: PUSH
39231: LD_INT 1
39233: NEG
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: LD_INT 1
39241: PUSH
39242: LD_INT 0
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 1
39251: PUSH
39252: LD_INT 1
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 0
39261: PUSH
39262: LD_INT 1
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: LD_INT 1
39271: NEG
39272: PUSH
39273: LD_INT 0
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: LD_INT 1
39282: NEG
39283: PUSH
39284: LD_INT 1
39286: NEG
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: LD_INT 1
39294: NEG
39295: PUSH
39296: LD_INT 2
39298: NEG
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: PUSH
39304: LD_INT 0
39306: PUSH
39307: LD_INT 2
39309: NEG
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 1
39317: PUSH
39318: LD_INT 1
39320: NEG
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: LD_INT 2
39328: PUSH
39329: LD_INT 0
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: LD_INT 2
39338: PUSH
39339: LD_INT 1
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 1
39348: PUSH
39349: LD_INT 2
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 0
39358: PUSH
39359: LD_INT 2
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 1
39368: NEG
39369: PUSH
39370: LD_INT 1
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 2
39379: NEG
39380: PUSH
39381: LD_INT 0
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 2
39390: NEG
39391: PUSH
39392: LD_INT 1
39394: NEG
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 1
39402: NEG
39403: PUSH
39404: LD_INT 3
39406: NEG
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 0
39414: PUSH
39415: LD_INT 3
39417: NEG
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PUSH
39423: LD_INT 1
39425: PUSH
39426: LD_INT 2
39428: NEG
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 2
39436: PUSH
39437: LD_INT 1
39439: NEG
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 3
39447: PUSH
39448: LD_INT 0
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 3
39457: PUSH
39458: LD_INT 1
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 1
39467: PUSH
39468: LD_INT 3
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PUSH
39475: LD_INT 0
39477: PUSH
39478: LD_INT 3
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: LD_INT 1
39487: NEG
39488: PUSH
39489: LD_INT 2
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: LD_INT 2
39498: NEG
39499: PUSH
39500: LD_INT 1
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 3
39509: NEG
39510: PUSH
39511: LD_INT 0
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_INT 3
39520: NEG
39521: PUSH
39522: LD_INT 1
39524: NEG
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39561: LD_ADDR_VAR 0 47
39565: PUSH
39566: LD_INT 0
39568: PUSH
39569: LD_INT 0
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 0
39578: PUSH
39579: LD_INT 1
39581: NEG
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 1
39589: PUSH
39590: LD_INT 0
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PUSH
39597: LD_INT 1
39599: PUSH
39600: LD_INT 1
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 0
39609: PUSH
39610: LD_INT 1
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 1
39619: NEG
39620: PUSH
39621: LD_INT 0
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 1
39630: NEG
39631: PUSH
39632: LD_INT 1
39634: NEG
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: LD_INT 1
39642: NEG
39643: PUSH
39644: LD_INT 2
39646: NEG
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: LD_INT 0
39654: PUSH
39655: LD_INT 2
39657: NEG
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: LD_INT 1
39665: PUSH
39666: LD_INT 1
39668: NEG
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PUSH
39674: LD_INT 2
39676: NEG
39677: PUSH
39678: LD_INT 1
39680: NEG
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 2
39688: NEG
39689: PUSH
39690: LD_INT 2
39692: NEG
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39712: LD_ADDR_VAR 0 48
39716: PUSH
39717: LD_INT 0
39719: PUSH
39720: LD_INT 0
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 0
39729: PUSH
39730: LD_INT 1
39732: NEG
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 1
39740: PUSH
39741: LD_INT 0
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 1
39750: PUSH
39751: LD_INT 1
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 0
39760: PUSH
39761: LD_INT 1
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 1
39770: NEG
39771: PUSH
39772: LD_INT 0
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 1
39781: NEG
39782: PUSH
39783: LD_INT 1
39785: NEG
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PUSH
39791: LD_INT 1
39793: NEG
39794: PUSH
39795: LD_INT 2
39797: NEG
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 0
39805: PUSH
39806: LD_INT 2
39808: NEG
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 1
39816: PUSH
39817: LD_INT 1
39819: NEG
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 2
39827: PUSH
39828: LD_INT 0
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 2
39837: PUSH
39838: LD_INT 1
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39859: LD_ADDR_VAR 0 49
39863: PUSH
39864: LD_INT 0
39866: PUSH
39867: LD_INT 0
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 0
39876: PUSH
39877: LD_INT 1
39879: NEG
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 1
39887: PUSH
39888: LD_INT 0
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 1
39897: PUSH
39898: LD_INT 1
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 0
39907: PUSH
39908: LD_INT 1
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 1
39917: NEG
39918: PUSH
39919: LD_INT 0
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 1
39928: NEG
39929: PUSH
39930: LD_INT 1
39932: NEG
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 1
39940: PUSH
39941: LD_INT 1
39943: NEG
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 2
39951: PUSH
39952: LD_INT 0
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: LD_INT 2
39961: PUSH
39962: LD_INT 1
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 2
39971: PUSH
39972: LD_INT 2
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 1
39981: PUSH
39982: LD_INT 2
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40003: LD_ADDR_VAR 0 50
40007: PUSH
40008: LD_INT 0
40010: PUSH
40011: LD_INT 0
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: LD_INT 0
40020: PUSH
40021: LD_INT 1
40023: NEG
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 1
40031: PUSH
40032: LD_INT 0
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 1
40041: PUSH
40042: LD_INT 1
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PUSH
40049: LD_INT 0
40051: PUSH
40052: LD_INT 1
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 1
40061: NEG
40062: PUSH
40063: LD_INT 0
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 1
40072: NEG
40073: PUSH
40074: LD_INT 1
40076: NEG
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 2
40084: PUSH
40085: LD_INT 1
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: LD_INT 2
40094: PUSH
40095: LD_INT 2
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 1
40104: PUSH
40105: LD_INT 2
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PUSH
40112: LD_INT 0
40114: PUSH
40115: LD_INT 2
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 1
40124: NEG
40125: PUSH
40126: LD_INT 1
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: LIST
40145: LIST
40146: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40147: LD_ADDR_VAR 0 51
40151: PUSH
40152: LD_INT 0
40154: PUSH
40155: LD_INT 0
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 0
40164: PUSH
40165: LD_INT 1
40167: NEG
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 1
40175: PUSH
40176: LD_INT 0
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 1
40185: PUSH
40186: LD_INT 1
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 0
40195: PUSH
40196: LD_INT 1
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 1
40205: NEG
40206: PUSH
40207: LD_INT 0
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: PUSH
40214: LD_INT 1
40216: NEG
40217: PUSH
40218: LD_INT 1
40220: NEG
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: PUSH
40226: LD_INT 1
40228: PUSH
40229: LD_INT 2
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 0
40238: PUSH
40239: LD_INT 2
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: LD_INT 1
40248: NEG
40249: PUSH
40250: LD_INT 1
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: LD_INT 2
40259: NEG
40260: PUSH
40261: LD_INT 0
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 2
40270: NEG
40271: PUSH
40272: LD_INT 1
40274: NEG
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40294: LD_ADDR_VAR 0 52
40298: PUSH
40299: LD_INT 0
40301: PUSH
40302: LD_INT 0
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 0
40311: PUSH
40312: LD_INT 1
40314: NEG
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 1
40322: PUSH
40323: LD_INT 0
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: PUSH
40330: LD_INT 1
40332: PUSH
40333: LD_INT 1
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: LD_INT 0
40342: PUSH
40343: LD_INT 1
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 1
40352: NEG
40353: PUSH
40354: LD_INT 0
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: PUSH
40361: LD_INT 1
40363: NEG
40364: PUSH
40365: LD_INT 1
40367: NEG
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 1
40375: NEG
40376: PUSH
40377: LD_INT 2
40379: NEG
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: LD_INT 1
40387: NEG
40388: PUSH
40389: LD_INT 1
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 2
40398: NEG
40399: PUSH
40400: LD_INT 0
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 2
40409: NEG
40410: PUSH
40411: LD_INT 1
40413: NEG
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 2
40421: NEG
40422: PUSH
40423: LD_INT 2
40425: NEG
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40445: LD_ADDR_VAR 0 53
40449: PUSH
40450: LD_INT 0
40452: PUSH
40453: LD_INT 0
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: LD_INT 0
40462: PUSH
40463: LD_INT 1
40465: NEG
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: PUSH
40471: LD_INT 1
40473: PUSH
40474: LD_INT 0
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 1
40483: PUSH
40484: LD_INT 1
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: LD_INT 0
40493: PUSH
40494: LD_INT 1
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 1
40503: NEG
40504: PUSH
40505: LD_INT 0
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: LD_INT 1
40514: NEG
40515: PUSH
40516: LD_INT 1
40518: NEG
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 1
40526: NEG
40527: PUSH
40528: LD_INT 2
40530: NEG
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 0
40538: PUSH
40539: LD_INT 2
40541: NEG
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: LD_INT 1
40549: PUSH
40550: LD_INT 1
40552: NEG
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 2
40560: PUSH
40561: LD_INT 0
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 2
40570: PUSH
40571: LD_INT 1
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 2
40580: PUSH
40581: LD_INT 2
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 1
40590: PUSH
40591: LD_INT 2
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 0
40600: PUSH
40601: LD_INT 2
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 1
40610: NEG
40611: PUSH
40612: LD_INT 1
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 2
40621: NEG
40622: PUSH
40623: LD_INT 0
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 2
40632: NEG
40633: PUSH
40634: LD_INT 1
40636: NEG
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 2
40644: NEG
40645: PUSH
40646: LD_INT 2
40648: NEG
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40675: LD_ADDR_VAR 0 54
40679: PUSH
40680: LD_INT 0
40682: PUSH
40683: LD_INT 0
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 0
40692: PUSH
40693: LD_INT 1
40695: NEG
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 1
40703: PUSH
40704: LD_INT 0
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 1
40713: PUSH
40714: LD_INT 1
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 0
40723: PUSH
40724: LD_INT 1
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 1
40733: NEG
40734: PUSH
40735: LD_INT 0
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 1
40744: NEG
40745: PUSH
40746: LD_INT 1
40748: NEG
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 1
40756: NEG
40757: PUSH
40758: LD_INT 2
40760: NEG
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 0
40768: PUSH
40769: LD_INT 2
40771: NEG
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_INT 1
40779: PUSH
40780: LD_INT 1
40782: NEG
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 2
40790: PUSH
40791: LD_INT 0
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 2
40800: PUSH
40801: LD_INT 1
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 2
40810: PUSH
40811: LD_INT 2
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 1
40820: PUSH
40821: LD_INT 2
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 0
40830: PUSH
40831: LD_INT 2
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 1
40840: NEG
40841: PUSH
40842: LD_INT 1
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 2
40851: NEG
40852: PUSH
40853: LD_INT 0
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 2
40862: NEG
40863: PUSH
40864: LD_INT 1
40866: NEG
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 2
40874: NEG
40875: PUSH
40876: LD_INT 2
40878: NEG
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40905: LD_ADDR_VAR 0 55
40909: PUSH
40910: LD_INT 0
40912: PUSH
40913: LD_INT 0
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 0
40922: PUSH
40923: LD_INT 1
40925: NEG
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 1
40933: PUSH
40934: LD_INT 0
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 1
40943: PUSH
40944: LD_INT 1
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 0
40953: PUSH
40954: LD_INT 1
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 1
40963: NEG
40964: PUSH
40965: LD_INT 0
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 1
40974: NEG
40975: PUSH
40976: LD_INT 1
40978: NEG
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: LD_INT 1
40986: NEG
40987: PUSH
40988: LD_INT 2
40990: NEG
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PUSH
40996: LD_INT 0
40998: PUSH
40999: LD_INT 2
41001: NEG
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 1
41009: PUSH
41010: LD_INT 1
41012: NEG
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 2
41020: PUSH
41021: LD_INT 0
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 2
41030: PUSH
41031: LD_INT 1
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: LD_INT 2
41040: PUSH
41041: LD_INT 2
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 1
41050: PUSH
41051: LD_INT 2
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 0
41060: PUSH
41061: LD_INT 2
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 1
41070: NEG
41071: PUSH
41072: LD_INT 1
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 2
41081: NEG
41082: PUSH
41083: LD_INT 0
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 2
41092: NEG
41093: PUSH
41094: LD_INT 1
41096: NEG
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 2
41104: NEG
41105: PUSH
41106: LD_INT 2
41108: NEG
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41135: LD_ADDR_VAR 0 56
41139: PUSH
41140: LD_INT 0
41142: PUSH
41143: LD_INT 0
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: LD_INT 0
41152: PUSH
41153: LD_INT 1
41155: NEG
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 1
41163: PUSH
41164: LD_INT 0
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 1
41173: PUSH
41174: LD_INT 1
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 0
41183: PUSH
41184: LD_INT 1
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 1
41193: NEG
41194: PUSH
41195: LD_INT 0
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 1
41204: NEG
41205: PUSH
41206: LD_INT 1
41208: NEG
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 1
41216: NEG
41217: PUSH
41218: LD_INT 2
41220: NEG
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 0
41228: PUSH
41229: LD_INT 2
41231: NEG
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 1
41239: PUSH
41240: LD_INT 1
41242: NEG
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 2
41250: PUSH
41251: LD_INT 0
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 2
41260: PUSH
41261: LD_INT 1
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 2
41270: PUSH
41271: LD_INT 2
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 1
41280: PUSH
41281: LD_INT 2
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 0
41290: PUSH
41291: LD_INT 2
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 1
41300: NEG
41301: PUSH
41302: LD_INT 1
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 2
41311: NEG
41312: PUSH
41313: LD_INT 0
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 2
41322: NEG
41323: PUSH
41324: LD_INT 1
41326: NEG
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 2
41334: NEG
41335: PUSH
41336: LD_INT 2
41338: NEG
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41365: LD_ADDR_VAR 0 57
41369: PUSH
41370: LD_INT 0
41372: PUSH
41373: LD_INT 0
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PUSH
41380: LD_INT 0
41382: PUSH
41383: LD_INT 1
41385: NEG
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 1
41393: PUSH
41394: LD_INT 0
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 1
41403: PUSH
41404: LD_INT 1
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 0
41413: PUSH
41414: LD_INT 1
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 1
41423: NEG
41424: PUSH
41425: LD_INT 0
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 1
41434: NEG
41435: PUSH
41436: LD_INT 1
41438: NEG
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: LD_INT 1
41446: NEG
41447: PUSH
41448: LD_INT 2
41450: NEG
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 0
41458: PUSH
41459: LD_INT 2
41461: NEG
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 1
41469: PUSH
41470: LD_INT 1
41472: NEG
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 2
41480: PUSH
41481: LD_INT 0
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 2
41490: PUSH
41491: LD_INT 1
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 2
41500: PUSH
41501: LD_INT 2
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 1
41510: PUSH
41511: LD_INT 2
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 0
41520: PUSH
41521: LD_INT 2
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 1
41530: NEG
41531: PUSH
41532: LD_INT 1
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 2
41541: NEG
41542: PUSH
41543: LD_INT 0
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 2
41552: NEG
41553: PUSH
41554: LD_INT 1
41556: NEG
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 2
41564: NEG
41565: PUSH
41566: LD_INT 2
41568: NEG
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41595: LD_ADDR_VAR 0 58
41599: PUSH
41600: LD_INT 0
41602: PUSH
41603: LD_INT 0
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 0
41612: PUSH
41613: LD_INT 1
41615: NEG
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 1
41623: PUSH
41624: LD_INT 0
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 1
41633: PUSH
41634: LD_INT 1
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 0
41643: PUSH
41644: LD_INT 1
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 1
41653: NEG
41654: PUSH
41655: LD_INT 0
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 1
41664: NEG
41665: PUSH
41666: LD_INT 1
41668: NEG
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 1
41676: NEG
41677: PUSH
41678: LD_INT 2
41680: NEG
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PUSH
41686: LD_INT 0
41688: PUSH
41689: LD_INT 2
41691: NEG
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 1
41699: PUSH
41700: LD_INT 1
41702: NEG
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 2
41710: PUSH
41711: LD_INT 0
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 2
41720: PUSH
41721: LD_INT 1
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: LD_INT 2
41730: PUSH
41731: LD_INT 2
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 1
41740: PUSH
41741: LD_INT 2
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 0
41750: PUSH
41751: LD_INT 2
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 1
41760: NEG
41761: PUSH
41762: LD_INT 1
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 2
41771: NEG
41772: PUSH
41773: LD_INT 0
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 2
41782: NEG
41783: PUSH
41784: LD_INT 1
41786: NEG
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 2
41794: NEG
41795: PUSH
41796: LD_INT 2
41798: NEG
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41825: LD_ADDR_VAR 0 59
41829: PUSH
41830: LD_INT 0
41832: PUSH
41833: LD_INT 0
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 0
41842: PUSH
41843: LD_INT 1
41845: NEG
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 1
41853: PUSH
41854: LD_INT 0
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 1
41863: PUSH
41864: LD_INT 1
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 0
41873: PUSH
41874: LD_INT 1
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 1
41883: NEG
41884: PUSH
41885: LD_INT 0
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 1
41894: NEG
41895: PUSH
41896: LD_INT 1
41898: NEG
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41913: LD_ADDR_VAR 0 60
41917: PUSH
41918: LD_INT 0
41920: PUSH
41921: LD_INT 0
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 0
41930: PUSH
41931: LD_INT 1
41933: NEG
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 1
41941: PUSH
41942: LD_INT 0
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 1
41951: PUSH
41952: LD_INT 1
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: LD_INT 0
41961: PUSH
41962: LD_INT 1
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 1
41971: NEG
41972: PUSH
41973: LD_INT 0
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 1
41982: NEG
41983: PUSH
41984: LD_INT 1
41986: NEG
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42001: LD_ADDR_VAR 0 61
42005: PUSH
42006: LD_INT 0
42008: PUSH
42009: LD_INT 0
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 0
42018: PUSH
42019: LD_INT 1
42021: NEG
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 1
42029: PUSH
42030: LD_INT 0
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 1
42039: PUSH
42040: LD_INT 1
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 0
42049: PUSH
42050: LD_INT 1
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 1
42059: NEG
42060: PUSH
42061: LD_INT 0
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 1
42070: NEG
42071: PUSH
42072: LD_INT 1
42074: NEG
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42089: LD_ADDR_VAR 0 62
42093: PUSH
42094: LD_INT 0
42096: PUSH
42097: LD_INT 0
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 0
42106: PUSH
42107: LD_INT 1
42109: NEG
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 1
42117: PUSH
42118: LD_INT 0
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 1
42127: PUSH
42128: LD_INT 1
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 0
42137: PUSH
42138: LD_INT 1
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 1
42147: NEG
42148: PUSH
42149: LD_INT 0
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 1
42158: NEG
42159: PUSH
42160: LD_INT 1
42162: NEG
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42177: LD_ADDR_VAR 0 63
42181: PUSH
42182: LD_INT 0
42184: PUSH
42185: LD_INT 0
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 0
42194: PUSH
42195: LD_INT 1
42197: NEG
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 1
42205: PUSH
42206: LD_INT 0
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 1
42215: PUSH
42216: LD_INT 1
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 0
42225: PUSH
42226: LD_INT 1
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 1
42235: NEG
42236: PUSH
42237: LD_INT 0
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 1
42246: NEG
42247: PUSH
42248: LD_INT 1
42250: NEG
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42265: LD_ADDR_VAR 0 64
42269: PUSH
42270: LD_INT 0
42272: PUSH
42273: LD_INT 0
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 0
42282: PUSH
42283: LD_INT 1
42285: NEG
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 1
42293: PUSH
42294: LD_INT 0
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 1
42303: PUSH
42304: LD_INT 1
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 0
42313: PUSH
42314: LD_INT 1
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: LD_INT 1
42323: NEG
42324: PUSH
42325: LD_INT 0
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: LD_INT 1
42334: NEG
42335: PUSH
42336: LD_INT 1
42338: NEG
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: ST_TO_ADDR
// end ; 1 :
42353: GO 48250
42355: LD_INT 1
42357: DOUBLE
42358: EQUAL
42359: IFTRUE 42363
42361: GO 44986
42363: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42364: LD_ADDR_VAR 0 11
42368: PUSH
42369: LD_INT 1
42371: NEG
42372: PUSH
42373: LD_INT 3
42375: NEG
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 0
42383: PUSH
42384: LD_INT 3
42386: NEG
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: PUSH
42392: LD_INT 1
42394: PUSH
42395: LD_INT 2
42397: NEG
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: LIST
42407: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42408: LD_ADDR_VAR 0 12
42412: PUSH
42413: LD_INT 2
42415: PUSH
42416: LD_INT 1
42418: NEG
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 3
42426: PUSH
42427: LD_INT 0
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 3
42436: PUSH
42437: LD_INT 1
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: LIST
42448: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42449: LD_ADDR_VAR 0 13
42453: PUSH
42454: LD_INT 3
42456: PUSH
42457: LD_INT 2
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 3
42466: PUSH
42467: LD_INT 3
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 2
42476: PUSH
42477: LD_INT 3
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: LIST
42488: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42489: LD_ADDR_VAR 0 14
42493: PUSH
42494: LD_INT 1
42496: PUSH
42497: LD_INT 3
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 0
42506: PUSH
42507: LD_INT 3
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 1
42516: NEG
42517: PUSH
42518: LD_INT 2
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: LIST
42529: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42530: LD_ADDR_VAR 0 15
42534: PUSH
42535: LD_INT 2
42537: NEG
42538: PUSH
42539: LD_INT 1
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 3
42548: NEG
42549: PUSH
42550: LD_INT 0
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 3
42559: NEG
42560: PUSH
42561: LD_INT 1
42563: NEG
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: LIST
42573: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42574: LD_ADDR_VAR 0 16
42578: PUSH
42579: LD_INT 2
42581: NEG
42582: PUSH
42583: LD_INT 3
42585: NEG
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 3
42593: NEG
42594: PUSH
42595: LD_INT 2
42597: NEG
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 3
42605: NEG
42606: PUSH
42607: LD_INT 3
42609: NEG
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: LIST
42619: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42620: LD_ADDR_VAR 0 17
42624: PUSH
42625: LD_INT 1
42627: NEG
42628: PUSH
42629: LD_INT 3
42631: NEG
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 0
42639: PUSH
42640: LD_INT 3
42642: NEG
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 1
42650: PUSH
42651: LD_INT 2
42653: NEG
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: LIST
42663: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42664: LD_ADDR_VAR 0 18
42668: PUSH
42669: LD_INT 2
42671: PUSH
42672: LD_INT 1
42674: NEG
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 3
42682: PUSH
42683: LD_INT 0
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 3
42692: PUSH
42693: LD_INT 1
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: LIST
42704: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42705: LD_ADDR_VAR 0 19
42709: PUSH
42710: LD_INT 3
42712: PUSH
42713: LD_INT 2
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 3
42722: PUSH
42723: LD_INT 3
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 2
42732: PUSH
42733: LD_INT 3
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: LIST
42744: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42745: LD_ADDR_VAR 0 20
42749: PUSH
42750: LD_INT 1
42752: PUSH
42753: LD_INT 3
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 0
42762: PUSH
42763: LD_INT 3
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 1
42772: NEG
42773: PUSH
42774: LD_INT 2
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: LIST
42785: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42786: LD_ADDR_VAR 0 21
42790: PUSH
42791: LD_INT 2
42793: NEG
42794: PUSH
42795: LD_INT 1
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 3
42804: NEG
42805: PUSH
42806: LD_INT 0
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 3
42815: NEG
42816: PUSH
42817: LD_INT 1
42819: NEG
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: LIST
42829: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42830: LD_ADDR_VAR 0 22
42834: PUSH
42835: LD_INT 2
42837: NEG
42838: PUSH
42839: LD_INT 3
42841: NEG
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 3
42849: NEG
42850: PUSH
42851: LD_INT 2
42853: NEG
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 3
42861: NEG
42862: PUSH
42863: LD_INT 3
42865: NEG
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: LIST
42875: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
42876: LD_ADDR_VAR 0 23
42880: PUSH
42881: LD_INT 0
42883: PUSH
42884: LD_INT 3
42886: NEG
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 1
42894: NEG
42895: PUSH
42896: LD_INT 4
42898: NEG
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: LD_INT 1
42906: PUSH
42907: LD_INT 3
42909: NEG
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: LIST
42919: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
42920: LD_ADDR_VAR 0 24
42924: PUSH
42925: LD_INT 3
42927: PUSH
42928: LD_INT 0
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 3
42937: PUSH
42938: LD_INT 1
42940: NEG
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 4
42948: PUSH
42949: LD_INT 1
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: LIST
42960: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
42961: LD_ADDR_VAR 0 25
42965: PUSH
42966: LD_INT 3
42968: PUSH
42969: LD_INT 3
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 4
42978: PUSH
42979: LD_INT 3
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 3
42988: PUSH
42989: LD_INT 4
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: LIST
43000: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
43001: LD_ADDR_VAR 0 26
43005: PUSH
43006: LD_INT 0
43008: PUSH
43009: LD_INT 3
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: LD_INT 1
43018: PUSH
43019: LD_INT 4
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 1
43028: NEG
43029: PUSH
43030: LD_INT 3
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: LIST
43041: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
43042: LD_ADDR_VAR 0 27
43046: PUSH
43047: LD_INT 3
43049: NEG
43050: PUSH
43051: LD_INT 0
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 3
43060: NEG
43061: PUSH
43062: LD_INT 1
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 4
43071: NEG
43072: PUSH
43073: LD_INT 1
43075: NEG
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: LIST
43085: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43086: LD_ADDR_VAR 0 28
43090: PUSH
43091: LD_INT 3
43093: NEG
43094: PUSH
43095: LD_INT 3
43097: NEG
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: LD_INT 3
43105: NEG
43106: PUSH
43107: LD_INT 4
43109: NEG
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 4
43117: NEG
43118: PUSH
43119: LD_INT 3
43121: NEG
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: LIST
43131: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43132: LD_ADDR_VAR 0 29
43136: PUSH
43137: LD_INT 1
43139: NEG
43140: PUSH
43141: LD_INT 3
43143: NEG
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 0
43151: PUSH
43152: LD_INT 3
43154: NEG
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 1
43162: PUSH
43163: LD_INT 2
43165: NEG
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 1
43173: NEG
43174: PUSH
43175: LD_INT 4
43177: NEG
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 0
43185: PUSH
43186: LD_INT 4
43188: NEG
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 1
43196: PUSH
43197: LD_INT 3
43199: NEG
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 1
43207: NEG
43208: PUSH
43209: LD_INT 5
43211: NEG
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 0
43219: PUSH
43220: LD_INT 5
43222: NEG
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 1
43230: PUSH
43231: LD_INT 4
43233: NEG
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 1
43241: NEG
43242: PUSH
43243: LD_INT 6
43245: NEG
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 0
43253: PUSH
43254: LD_INT 6
43256: NEG
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 1
43264: PUSH
43265: LD_INT 5
43267: NEG
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
43287: LD_ADDR_VAR 0 30
43291: PUSH
43292: LD_INT 2
43294: PUSH
43295: LD_INT 1
43297: NEG
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 3
43305: PUSH
43306: LD_INT 0
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 3
43315: PUSH
43316: LD_INT 1
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 3
43325: PUSH
43326: LD_INT 1
43328: NEG
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 4
43336: PUSH
43337: LD_INT 0
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 4
43346: PUSH
43347: LD_INT 1
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 4
43356: PUSH
43357: LD_INT 1
43359: NEG
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 5
43367: PUSH
43368: LD_INT 0
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 5
43377: PUSH
43378: LD_INT 1
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 5
43387: PUSH
43388: LD_INT 1
43390: NEG
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 6
43398: PUSH
43399: LD_INT 0
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 6
43408: PUSH
43409: LD_INT 1
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43430: LD_ADDR_VAR 0 31
43434: PUSH
43435: LD_INT 3
43437: PUSH
43438: LD_INT 2
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 3
43447: PUSH
43448: LD_INT 3
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 2
43457: PUSH
43458: LD_INT 3
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 4
43467: PUSH
43468: LD_INT 3
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 4
43477: PUSH
43478: LD_INT 4
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 3
43487: PUSH
43488: LD_INT 4
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 5
43497: PUSH
43498: LD_INT 4
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 5
43507: PUSH
43508: LD_INT 5
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 4
43517: PUSH
43518: LD_INT 5
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 6
43527: PUSH
43528: LD_INT 5
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 6
43537: PUSH
43538: LD_INT 6
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 5
43547: PUSH
43548: LD_INT 6
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
43569: LD_ADDR_VAR 0 32
43573: PUSH
43574: LD_INT 1
43576: PUSH
43577: LD_INT 3
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 0
43586: PUSH
43587: LD_INT 3
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 1
43596: NEG
43597: PUSH
43598: LD_INT 2
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 1
43607: PUSH
43608: LD_INT 4
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: LD_INT 0
43617: PUSH
43618: LD_INT 4
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 1
43627: NEG
43628: PUSH
43629: LD_INT 3
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 1
43638: PUSH
43639: LD_INT 5
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 0
43648: PUSH
43649: LD_INT 5
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 1
43658: NEG
43659: PUSH
43660: LD_INT 4
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 1
43669: PUSH
43670: LD_INT 6
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 0
43679: PUSH
43680: LD_INT 6
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 1
43689: NEG
43690: PUSH
43691: LD_INT 5
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
43712: LD_ADDR_VAR 0 33
43716: PUSH
43717: LD_INT 2
43719: NEG
43720: PUSH
43721: LD_INT 1
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 3
43730: NEG
43731: PUSH
43732: LD_INT 0
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 3
43741: NEG
43742: PUSH
43743: LD_INT 1
43745: NEG
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 3
43753: NEG
43754: PUSH
43755: LD_INT 1
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 4
43764: NEG
43765: PUSH
43766: LD_INT 0
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 4
43775: NEG
43776: PUSH
43777: LD_INT 1
43779: NEG
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 4
43787: NEG
43788: PUSH
43789: LD_INT 1
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 5
43798: NEG
43799: PUSH
43800: LD_INT 0
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 5
43809: NEG
43810: PUSH
43811: LD_INT 1
43813: NEG
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 5
43821: NEG
43822: PUSH
43823: LD_INT 1
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 6
43832: NEG
43833: PUSH
43834: LD_INT 0
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 6
43843: NEG
43844: PUSH
43845: LD_INT 1
43847: NEG
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
43867: LD_ADDR_VAR 0 34
43871: PUSH
43872: LD_INT 2
43874: NEG
43875: PUSH
43876: LD_INT 3
43878: NEG
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 3
43886: NEG
43887: PUSH
43888: LD_INT 2
43890: NEG
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 3
43898: NEG
43899: PUSH
43900: LD_INT 3
43902: NEG
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 3
43910: NEG
43911: PUSH
43912: LD_INT 4
43914: NEG
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PUSH
43920: LD_INT 4
43922: NEG
43923: PUSH
43924: LD_INT 3
43926: NEG
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 4
43934: NEG
43935: PUSH
43936: LD_INT 4
43938: NEG
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 4
43946: NEG
43947: PUSH
43948: LD_INT 5
43950: NEG
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 5
43958: NEG
43959: PUSH
43960: LD_INT 4
43962: NEG
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 5
43970: NEG
43971: PUSH
43972: LD_INT 5
43974: NEG
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 5
43982: NEG
43983: PUSH
43984: LD_INT 6
43986: NEG
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 6
43994: NEG
43995: PUSH
43996: LD_INT 5
43998: NEG
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 6
44006: NEG
44007: PUSH
44008: LD_INT 6
44010: NEG
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
44030: LD_ADDR_VAR 0 41
44034: PUSH
44035: LD_INT 0
44037: PUSH
44038: LD_INT 2
44040: NEG
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 1
44048: NEG
44049: PUSH
44050: LD_INT 3
44052: NEG
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 1
44060: PUSH
44061: LD_INT 2
44063: NEG
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: LIST
44073: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44074: LD_ADDR_VAR 0 42
44078: PUSH
44079: LD_INT 2
44081: PUSH
44082: LD_INT 0
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 2
44091: PUSH
44092: LD_INT 1
44094: NEG
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 3
44102: PUSH
44103: LD_INT 1
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: LIST
44114: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44115: LD_ADDR_VAR 0 43
44119: PUSH
44120: LD_INT 2
44122: PUSH
44123: LD_INT 2
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 3
44132: PUSH
44133: LD_INT 2
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 2
44142: PUSH
44143: LD_INT 3
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: LIST
44154: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44155: LD_ADDR_VAR 0 44
44159: PUSH
44160: LD_INT 0
44162: PUSH
44163: LD_INT 2
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 1
44172: PUSH
44173: LD_INT 3
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 1
44182: NEG
44183: PUSH
44184: LD_INT 2
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: LIST
44195: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44196: LD_ADDR_VAR 0 45
44200: PUSH
44201: LD_INT 2
44203: NEG
44204: PUSH
44205: LD_INT 0
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 2
44214: NEG
44215: PUSH
44216: LD_INT 1
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 3
44225: NEG
44226: PUSH
44227: LD_INT 1
44229: NEG
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: LIST
44239: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44240: LD_ADDR_VAR 0 46
44244: PUSH
44245: LD_INT 2
44247: NEG
44248: PUSH
44249: LD_INT 2
44251: NEG
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 2
44259: NEG
44260: PUSH
44261: LD_INT 3
44263: NEG
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 3
44271: NEG
44272: PUSH
44273: LD_INT 2
44275: NEG
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: LIST
44285: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
44286: LD_ADDR_VAR 0 47
44290: PUSH
44291: LD_INT 2
44293: NEG
44294: PUSH
44295: LD_INT 3
44297: NEG
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 1
44305: NEG
44306: PUSH
44307: LD_INT 3
44309: NEG
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44319: LD_ADDR_VAR 0 48
44323: PUSH
44324: LD_INT 1
44326: PUSH
44327: LD_INT 2
44329: NEG
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 2
44337: PUSH
44338: LD_INT 1
44340: NEG
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44350: LD_ADDR_VAR 0 49
44354: PUSH
44355: LD_INT 3
44357: PUSH
44358: LD_INT 1
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 3
44367: PUSH
44368: LD_INT 2
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44379: LD_ADDR_VAR 0 50
44383: PUSH
44384: LD_INT 2
44386: PUSH
44387: LD_INT 3
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 1
44396: PUSH
44397: LD_INT 3
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44408: LD_ADDR_VAR 0 51
44412: PUSH
44413: LD_INT 1
44415: NEG
44416: PUSH
44417: LD_INT 2
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 2
44426: NEG
44427: PUSH
44428: LD_INT 1
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44439: LD_ADDR_VAR 0 52
44443: PUSH
44444: LD_INT 3
44446: NEG
44447: PUSH
44448: LD_INT 1
44450: NEG
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 3
44458: NEG
44459: PUSH
44460: LD_INT 2
44462: NEG
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44472: LD_ADDR_VAR 0 53
44476: PUSH
44477: LD_INT 1
44479: NEG
44480: PUSH
44481: LD_INT 3
44483: NEG
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 0
44491: PUSH
44492: LD_INT 3
44494: NEG
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 1
44502: PUSH
44503: LD_INT 2
44505: NEG
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: LIST
44515: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44516: LD_ADDR_VAR 0 54
44520: PUSH
44521: LD_INT 2
44523: PUSH
44524: LD_INT 1
44526: NEG
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 3
44534: PUSH
44535: LD_INT 0
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 3
44544: PUSH
44545: LD_INT 1
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: LIST
44556: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44557: LD_ADDR_VAR 0 55
44561: PUSH
44562: LD_INT 3
44564: PUSH
44565: LD_INT 2
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 3
44574: PUSH
44575: LD_INT 3
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 2
44584: PUSH
44585: LD_INT 3
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: LIST
44596: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44597: LD_ADDR_VAR 0 56
44601: PUSH
44602: LD_INT 1
44604: PUSH
44605: LD_INT 3
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 0
44614: PUSH
44615: LD_INT 3
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 1
44624: NEG
44625: PUSH
44626: LD_INT 2
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: LIST
44637: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44638: LD_ADDR_VAR 0 57
44642: PUSH
44643: LD_INT 2
44645: NEG
44646: PUSH
44647: LD_INT 1
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 3
44656: NEG
44657: PUSH
44658: LD_INT 0
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 3
44667: NEG
44668: PUSH
44669: LD_INT 1
44671: NEG
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: LIST
44681: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44682: LD_ADDR_VAR 0 58
44686: PUSH
44687: LD_INT 2
44689: NEG
44690: PUSH
44691: LD_INT 3
44693: NEG
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 3
44701: NEG
44702: PUSH
44703: LD_INT 2
44705: NEG
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 3
44713: NEG
44714: PUSH
44715: LD_INT 3
44717: NEG
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: LIST
44727: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
44728: LD_ADDR_VAR 0 59
44732: PUSH
44733: LD_INT 1
44735: NEG
44736: PUSH
44737: LD_INT 2
44739: NEG
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 0
44747: PUSH
44748: LD_INT 2
44750: NEG
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 1
44758: PUSH
44759: LD_INT 1
44761: NEG
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: LIST
44771: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44772: LD_ADDR_VAR 0 60
44776: PUSH
44777: LD_INT 1
44779: PUSH
44780: LD_INT 1
44782: NEG
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 2
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 2
44800: PUSH
44801: LD_INT 1
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: LIST
44812: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44813: LD_ADDR_VAR 0 61
44817: PUSH
44818: LD_INT 2
44820: PUSH
44821: LD_INT 1
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 2
44830: PUSH
44831: LD_INT 2
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 1
44840: PUSH
44841: LD_INT 2
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: LIST
44852: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44853: LD_ADDR_VAR 0 62
44857: PUSH
44858: LD_INT 1
44860: PUSH
44861: LD_INT 2
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 0
44870: PUSH
44871: LD_INT 2
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 1
44880: NEG
44881: PUSH
44882: LD_INT 1
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: LIST
44893: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44894: LD_ADDR_VAR 0 63
44898: PUSH
44899: LD_INT 1
44901: NEG
44902: PUSH
44903: LD_INT 1
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 2
44912: NEG
44913: PUSH
44914: LD_INT 0
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 2
44923: NEG
44924: PUSH
44925: LD_INT 1
44927: NEG
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: LIST
44937: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44938: LD_ADDR_VAR 0 64
44942: PUSH
44943: LD_INT 1
44945: NEG
44946: PUSH
44947: LD_INT 2
44949: NEG
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 2
44957: NEG
44958: PUSH
44959: LD_INT 1
44961: NEG
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 2
44969: NEG
44970: PUSH
44971: LD_INT 2
44973: NEG
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: LIST
44983: ST_TO_ADDR
// end ; 2 :
44984: GO 48250
44986: LD_INT 2
44988: DOUBLE
44989: EQUAL
44990: IFTRUE 44994
44992: GO 48249
44994: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
44995: LD_ADDR_VAR 0 29
44999: PUSH
45000: LD_INT 4
45002: PUSH
45003: LD_INT 0
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 4
45012: PUSH
45013: LD_INT 1
45015: NEG
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 5
45023: PUSH
45024: LD_INT 0
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 5
45033: PUSH
45034: LD_INT 1
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 4
45043: PUSH
45044: LD_INT 1
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 3
45053: PUSH
45054: LD_INT 0
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 3
45063: PUSH
45064: LD_INT 1
45066: NEG
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 3
45074: PUSH
45075: LD_INT 2
45077: NEG
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 5
45085: PUSH
45086: LD_INT 2
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 3
45095: PUSH
45096: LD_INT 3
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 3
45105: PUSH
45106: LD_INT 2
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 4
45115: PUSH
45116: LD_INT 3
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 4
45125: PUSH
45126: LD_INT 4
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 3
45135: PUSH
45136: LD_INT 4
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 2
45145: PUSH
45146: LD_INT 3
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 2
45155: PUSH
45156: LD_INT 2
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 4
45165: PUSH
45166: LD_INT 2
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 2
45175: PUSH
45176: LD_INT 4
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 0
45185: PUSH
45186: LD_INT 4
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 0
45195: PUSH
45196: LD_INT 3
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 1
45205: PUSH
45206: LD_INT 4
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 1
45215: PUSH
45216: LD_INT 5
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 0
45225: PUSH
45226: LD_INT 5
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 1
45235: NEG
45236: PUSH
45237: LD_INT 4
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 1
45246: NEG
45247: PUSH
45248: LD_INT 3
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 2
45257: PUSH
45258: LD_INT 5
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 2
45267: NEG
45268: PUSH
45269: LD_INT 3
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 3
45278: NEG
45279: PUSH
45280: LD_INT 0
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 3
45289: NEG
45290: PUSH
45291: LD_INT 1
45293: NEG
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 2
45301: NEG
45302: PUSH
45303: LD_INT 0
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 2
45312: NEG
45313: PUSH
45314: LD_INT 1
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 3
45323: NEG
45324: PUSH
45325: LD_INT 1
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 4
45334: NEG
45335: PUSH
45336: LD_INT 0
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 4
45345: NEG
45346: PUSH
45347: LD_INT 1
45349: NEG
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 4
45357: NEG
45358: PUSH
45359: LD_INT 2
45361: NEG
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 2
45369: NEG
45370: PUSH
45371: LD_INT 2
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 4
45380: NEG
45381: PUSH
45382: LD_INT 4
45384: NEG
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 4
45392: NEG
45393: PUSH
45394: LD_INT 5
45396: NEG
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 3
45404: NEG
45405: PUSH
45406: LD_INT 4
45408: NEG
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 3
45416: NEG
45417: PUSH
45418: LD_INT 3
45420: NEG
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 4
45428: NEG
45429: PUSH
45430: LD_INT 3
45432: NEG
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 5
45440: NEG
45441: PUSH
45442: LD_INT 4
45444: NEG
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 5
45452: NEG
45453: PUSH
45454: LD_INT 5
45456: NEG
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 3
45464: NEG
45465: PUSH
45466: LD_INT 5
45468: NEG
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 5
45476: NEG
45477: PUSH
45478: LD_INT 3
45480: NEG
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45533: LD_ADDR_VAR 0 30
45537: PUSH
45538: LD_INT 4
45540: PUSH
45541: LD_INT 4
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 4
45550: PUSH
45551: LD_INT 3
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 5
45560: PUSH
45561: LD_INT 4
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 5
45570: PUSH
45571: LD_INT 5
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 4
45580: PUSH
45581: LD_INT 5
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 3
45590: PUSH
45591: LD_INT 4
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 3
45600: PUSH
45601: LD_INT 3
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 5
45610: PUSH
45611: LD_INT 3
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 3
45620: PUSH
45621: LD_INT 5
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 0
45630: PUSH
45631: LD_INT 3
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 0
45640: PUSH
45641: LD_INT 2
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 1
45650: PUSH
45651: LD_INT 3
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 1
45660: PUSH
45661: LD_INT 4
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 0
45670: PUSH
45671: LD_INT 4
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 1
45680: NEG
45681: PUSH
45682: LD_INT 3
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 1
45691: NEG
45692: PUSH
45693: LD_INT 2
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 2
45702: PUSH
45703: LD_INT 4
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 2
45712: NEG
45713: PUSH
45714: LD_INT 2
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 4
45723: NEG
45724: PUSH
45725: LD_INT 0
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 4
45734: NEG
45735: PUSH
45736: LD_INT 1
45738: NEG
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 3
45746: NEG
45747: PUSH
45748: LD_INT 0
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 3
45757: NEG
45758: PUSH
45759: LD_INT 1
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 4
45768: NEG
45769: PUSH
45770: LD_INT 1
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 5
45779: NEG
45780: PUSH
45781: LD_INT 0
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 5
45790: NEG
45791: PUSH
45792: LD_INT 1
45794: NEG
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 5
45802: NEG
45803: PUSH
45804: LD_INT 2
45806: NEG
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 3
45814: NEG
45815: PUSH
45816: LD_INT 2
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 3
45825: NEG
45826: PUSH
45827: LD_INT 3
45829: NEG
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 3
45837: NEG
45838: PUSH
45839: LD_INT 4
45841: NEG
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 2
45849: NEG
45850: PUSH
45851: LD_INT 3
45853: NEG
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 2
45861: NEG
45862: PUSH
45863: LD_INT 2
45865: NEG
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 3
45873: NEG
45874: PUSH
45875: LD_INT 2
45877: NEG
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 4
45885: NEG
45886: PUSH
45887: LD_INT 3
45889: NEG
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 4
45897: NEG
45898: PUSH
45899: LD_INT 4
45901: NEG
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 2
45909: NEG
45910: PUSH
45911: LD_INT 4
45913: NEG
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 4
45921: NEG
45922: PUSH
45923: LD_INT 2
45925: NEG
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 0
45933: PUSH
45934: LD_INT 4
45936: NEG
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 0
45944: PUSH
45945: LD_INT 5
45947: NEG
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 1
45955: PUSH
45956: LD_INT 4
45958: NEG
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 1
45966: PUSH
45967: LD_INT 3
45969: NEG
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 0
45977: PUSH
45978: LD_INT 3
45980: NEG
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 1
45988: NEG
45989: PUSH
45990: LD_INT 4
45992: NEG
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 1
46000: NEG
46001: PUSH
46002: LD_INT 5
46004: NEG
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 2
46012: PUSH
46013: LD_INT 3
46015: NEG
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 2
46023: NEG
46024: PUSH
46025: LD_INT 5
46027: NEG
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46080: LD_ADDR_VAR 0 31
46084: PUSH
46085: LD_INT 0
46087: PUSH
46088: LD_INT 4
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 0
46097: PUSH
46098: LD_INT 3
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 1
46107: PUSH
46108: LD_INT 4
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 1
46117: PUSH
46118: LD_INT 5
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 0
46127: PUSH
46128: LD_INT 5
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 1
46137: NEG
46138: PUSH
46139: LD_INT 4
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 1
46148: NEG
46149: PUSH
46150: LD_INT 3
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 2
46159: PUSH
46160: LD_INT 5
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 2
46169: NEG
46170: PUSH
46171: LD_INT 3
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 3
46180: NEG
46181: PUSH
46182: LD_INT 0
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 3
46191: NEG
46192: PUSH
46193: LD_INT 1
46195: NEG
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 2
46203: NEG
46204: PUSH
46205: LD_INT 0
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 2
46214: NEG
46215: PUSH
46216: LD_INT 1
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 3
46225: NEG
46226: PUSH
46227: LD_INT 1
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 4
46236: NEG
46237: PUSH
46238: LD_INT 0
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 4
46247: NEG
46248: PUSH
46249: LD_INT 1
46251: NEG
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 4
46259: NEG
46260: PUSH
46261: LD_INT 2
46263: NEG
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 2
46271: NEG
46272: PUSH
46273: LD_INT 2
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 4
46282: NEG
46283: PUSH
46284: LD_INT 4
46286: NEG
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 4
46294: NEG
46295: PUSH
46296: LD_INT 5
46298: NEG
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 3
46306: NEG
46307: PUSH
46308: LD_INT 4
46310: NEG
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 3
46318: NEG
46319: PUSH
46320: LD_INT 3
46322: NEG
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 4
46330: NEG
46331: PUSH
46332: LD_INT 3
46334: NEG
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 5
46342: NEG
46343: PUSH
46344: LD_INT 4
46346: NEG
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 5
46354: NEG
46355: PUSH
46356: LD_INT 5
46358: NEG
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 3
46366: NEG
46367: PUSH
46368: LD_INT 5
46370: NEG
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 5
46378: NEG
46379: PUSH
46380: LD_INT 3
46382: NEG
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 0
46390: PUSH
46391: LD_INT 3
46393: NEG
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 0
46401: PUSH
46402: LD_INT 4
46404: NEG
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 1
46412: PUSH
46413: LD_INT 3
46415: NEG
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 1
46423: PUSH
46424: LD_INT 2
46426: NEG
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 0
46434: PUSH
46435: LD_INT 2
46437: NEG
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 1
46445: NEG
46446: PUSH
46447: LD_INT 3
46449: NEG
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 1
46457: NEG
46458: PUSH
46459: LD_INT 4
46461: NEG
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 2
46469: PUSH
46470: LD_INT 2
46472: NEG
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 2
46480: NEG
46481: PUSH
46482: LD_INT 4
46484: NEG
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 4
46492: PUSH
46493: LD_INT 0
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 4
46502: PUSH
46503: LD_INT 1
46505: NEG
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 5
46513: PUSH
46514: LD_INT 0
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 5
46523: PUSH
46524: LD_INT 1
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 4
46533: PUSH
46534: LD_INT 1
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 3
46543: PUSH
46544: LD_INT 0
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 3
46553: PUSH
46554: LD_INT 1
46556: NEG
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 3
46564: PUSH
46565: LD_INT 2
46567: NEG
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 5
46575: PUSH
46576: LD_INT 2
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
46630: LD_ADDR_VAR 0 32
46634: PUSH
46635: LD_INT 4
46637: NEG
46638: PUSH
46639: LD_INT 0
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 4
46648: NEG
46649: PUSH
46650: LD_INT 1
46652: NEG
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 3
46660: NEG
46661: PUSH
46662: LD_INT 0
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 3
46671: NEG
46672: PUSH
46673: LD_INT 1
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 4
46682: NEG
46683: PUSH
46684: LD_INT 1
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 5
46693: NEG
46694: PUSH
46695: LD_INT 0
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 5
46704: NEG
46705: PUSH
46706: LD_INT 1
46708: NEG
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 5
46716: NEG
46717: PUSH
46718: LD_INT 2
46720: NEG
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 3
46728: NEG
46729: PUSH
46730: LD_INT 2
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 3
46739: NEG
46740: PUSH
46741: LD_INT 3
46743: NEG
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 3
46751: NEG
46752: PUSH
46753: LD_INT 4
46755: NEG
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 2
46763: NEG
46764: PUSH
46765: LD_INT 3
46767: NEG
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 2
46775: NEG
46776: PUSH
46777: LD_INT 2
46779: NEG
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 3
46787: NEG
46788: PUSH
46789: LD_INT 2
46791: NEG
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 4
46799: NEG
46800: PUSH
46801: LD_INT 3
46803: NEG
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 4
46811: NEG
46812: PUSH
46813: LD_INT 4
46815: NEG
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 2
46823: NEG
46824: PUSH
46825: LD_INT 4
46827: NEG
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 4
46835: NEG
46836: PUSH
46837: LD_INT 2
46839: NEG
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 0
46847: PUSH
46848: LD_INT 4
46850: NEG
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 0
46858: PUSH
46859: LD_INT 5
46861: NEG
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 1
46869: PUSH
46870: LD_INT 4
46872: NEG
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 1
46880: PUSH
46881: LD_INT 3
46883: NEG
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 0
46891: PUSH
46892: LD_INT 3
46894: NEG
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 1
46902: NEG
46903: PUSH
46904: LD_INT 4
46906: NEG
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 1
46914: NEG
46915: PUSH
46916: LD_INT 5
46918: NEG
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 2
46926: PUSH
46927: LD_INT 3
46929: NEG
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 2
46937: NEG
46938: PUSH
46939: LD_INT 5
46941: NEG
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 3
46949: PUSH
46950: LD_INT 0
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 3
46959: PUSH
46960: LD_INT 1
46962: NEG
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 4
46970: PUSH
46971: LD_INT 0
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 4
46980: PUSH
46981: LD_INT 1
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 3
46990: PUSH
46991: LD_INT 1
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 2
47000: PUSH
47001: LD_INT 0
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 2
47010: PUSH
47011: LD_INT 1
47013: NEG
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 2
47021: PUSH
47022: LD_INT 2
47024: NEG
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 4
47032: PUSH
47033: LD_INT 2
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 4
47042: PUSH
47043: LD_INT 4
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 4
47052: PUSH
47053: LD_INT 3
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 5
47062: PUSH
47063: LD_INT 4
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 5
47072: PUSH
47073: LD_INT 5
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 4
47082: PUSH
47083: LD_INT 5
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 3
47092: PUSH
47093: LD_INT 4
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 3
47102: PUSH
47103: LD_INT 3
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 5
47112: PUSH
47113: LD_INT 3
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 3
47122: PUSH
47123: LD_INT 5
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47177: LD_ADDR_VAR 0 33
47181: PUSH
47182: LD_INT 4
47184: NEG
47185: PUSH
47186: LD_INT 4
47188: NEG
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 4
47196: NEG
47197: PUSH
47198: LD_INT 5
47200: NEG
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 3
47208: NEG
47209: PUSH
47210: LD_INT 4
47212: NEG
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 3
47220: NEG
47221: PUSH
47222: LD_INT 3
47224: NEG
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 4
47232: NEG
47233: PUSH
47234: LD_INT 3
47236: NEG
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 5
47244: NEG
47245: PUSH
47246: LD_INT 4
47248: NEG
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 5
47256: NEG
47257: PUSH
47258: LD_INT 5
47260: NEG
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 3
47268: NEG
47269: PUSH
47270: LD_INT 5
47272: NEG
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 5
47280: NEG
47281: PUSH
47282: LD_INT 3
47284: NEG
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 0
47292: PUSH
47293: LD_INT 3
47295: NEG
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 0
47303: PUSH
47304: LD_INT 4
47306: NEG
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 1
47314: PUSH
47315: LD_INT 3
47317: NEG
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 1
47325: PUSH
47326: LD_INT 2
47328: NEG
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 0
47336: PUSH
47337: LD_INT 2
47339: NEG
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 1
47347: NEG
47348: PUSH
47349: LD_INT 3
47351: NEG
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 1
47359: NEG
47360: PUSH
47361: LD_INT 4
47363: NEG
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 2
47371: PUSH
47372: LD_INT 2
47374: NEG
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 2
47382: NEG
47383: PUSH
47384: LD_INT 4
47386: NEG
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 4
47394: PUSH
47395: LD_INT 0
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 4
47404: PUSH
47405: LD_INT 1
47407: NEG
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 5
47415: PUSH
47416: LD_INT 0
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 5
47425: PUSH
47426: LD_INT 1
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 4
47435: PUSH
47436: LD_INT 1
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 3
47445: PUSH
47446: LD_INT 0
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 3
47455: PUSH
47456: LD_INT 1
47458: NEG
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 3
47466: PUSH
47467: LD_INT 2
47469: NEG
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 5
47477: PUSH
47478: LD_INT 2
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 3
47487: PUSH
47488: LD_INT 3
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 3
47497: PUSH
47498: LD_INT 2
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 4
47507: PUSH
47508: LD_INT 3
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 4
47517: PUSH
47518: LD_INT 4
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 3
47527: PUSH
47528: LD_INT 4
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 2
47537: PUSH
47538: LD_INT 3
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 2
47547: PUSH
47548: LD_INT 2
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 4
47557: PUSH
47558: LD_INT 2
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 2
47567: PUSH
47568: LD_INT 4
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 0
47577: PUSH
47578: LD_INT 4
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 0
47587: PUSH
47588: LD_INT 3
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 1
47597: PUSH
47598: LD_INT 4
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 1
47607: PUSH
47608: LD_INT 5
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 0
47617: PUSH
47618: LD_INT 5
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 1
47627: NEG
47628: PUSH
47629: LD_INT 4
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 1
47638: NEG
47639: PUSH
47640: LD_INT 3
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 2
47649: PUSH
47650: LD_INT 5
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 2
47659: NEG
47660: PUSH
47661: LD_INT 3
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
47715: LD_ADDR_VAR 0 34
47719: PUSH
47720: LD_INT 0
47722: PUSH
47723: LD_INT 4
47725: NEG
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 0
47733: PUSH
47734: LD_INT 5
47736: NEG
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 1
47744: PUSH
47745: LD_INT 4
47747: NEG
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 1
47755: PUSH
47756: LD_INT 3
47758: NEG
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 0
47766: PUSH
47767: LD_INT 3
47769: NEG
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 1
47777: NEG
47778: PUSH
47779: LD_INT 4
47781: NEG
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 1
47789: NEG
47790: PUSH
47791: LD_INT 5
47793: NEG
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 2
47801: PUSH
47802: LD_INT 3
47804: NEG
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 2
47812: NEG
47813: PUSH
47814: LD_INT 5
47816: NEG
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 3
47824: PUSH
47825: LD_INT 0
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 3
47834: PUSH
47835: LD_INT 1
47837: NEG
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 4
47845: PUSH
47846: LD_INT 0
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 4
47855: PUSH
47856: LD_INT 1
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 3
47865: PUSH
47866: LD_INT 1
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 2
47875: PUSH
47876: LD_INT 0
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 2
47885: PUSH
47886: LD_INT 1
47888: NEG
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 2
47896: PUSH
47897: LD_INT 2
47899: NEG
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 4
47907: PUSH
47908: LD_INT 2
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 4
47917: PUSH
47918: LD_INT 4
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 4
47927: PUSH
47928: LD_INT 3
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 5
47937: PUSH
47938: LD_INT 4
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 5
47947: PUSH
47948: LD_INT 5
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 4
47957: PUSH
47958: LD_INT 5
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 3
47967: PUSH
47968: LD_INT 4
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 3
47977: PUSH
47978: LD_INT 3
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 5
47987: PUSH
47988: LD_INT 3
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 3
47997: PUSH
47998: LD_INT 5
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 0
48007: PUSH
48008: LD_INT 3
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 0
48017: PUSH
48018: LD_INT 2
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 1
48027: PUSH
48028: LD_INT 3
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 1
48037: PUSH
48038: LD_INT 4
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 0
48047: PUSH
48048: LD_INT 4
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 1
48057: NEG
48058: PUSH
48059: LD_INT 3
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 1
48068: NEG
48069: PUSH
48070: LD_INT 2
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 2
48079: PUSH
48080: LD_INT 4
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 2
48089: NEG
48090: PUSH
48091: LD_INT 2
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 4
48100: NEG
48101: PUSH
48102: LD_INT 0
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 4
48111: NEG
48112: PUSH
48113: LD_INT 1
48115: NEG
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 3
48123: NEG
48124: PUSH
48125: LD_INT 0
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 3
48134: NEG
48135: PUSH
48136: LD_INT 1
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 4
48145: NEG
48146: PUSH
48147: LD_INT 1
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 5
48156: NEG
48157: PUSH
48158: LD_INT 0
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 5
48167: NEG
48168: PUSH
48169: LD_INT 1
48171: NEG
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 5
48179: NEG
48180: PUSH
48181: LD_INT 2
48183: NEG
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 3
48191: NEG
48192: PUSH
48193: LD_INT 2
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: ST_TO_ADDR
// end ; end ;
48247: GO 48250
48249: POP
// case btype of b_depot , b_warehouse :
48250: LD_VAR 0 1
48254: PUSH
48255: LD_INT 0
48257: DOUBLE
48258: EQUAL
48259: IFTRUE 48269
48261: LD_INT 1
48263: DOUBLE
48264: EQUAL
48265: IFTRUE 48269
48267: GO 48470
48269: POP
// case nation of nation_american :
48270: LD_VAR 0 5
48274: PUSH
48275: LD_INT 1
48277: DOUBLE
48278: EQUAL
48279: IFTRUE 48283
48281: GO 48339
48283: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
48284: LD_ADDR_VAR 0 9
48288: PUSH
48289: LD_VAR 0 11
48293: PUSH
48294: LD_VAR 0 12
48298: PUSH
48299: LD_VAR 0 13
48303: PUSH
48304: LD_VAR 0 14
48308: PUSH
48309: LD_VAR 0 15
48313: PUSH
48314: LD_VAR 0 16
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: PUSH
48327: LD_VAR 0 4
48331: PUSH
48332: LD_INT 1
48334: PLUS
48335: ARRAY
48336: ST_TO_ADDR
48337: GO 48468
48339: LD_INT 2
48341: DOUBLE
48342: EQUAL
48343: IFTRUE 48347
48345: GO 48403
48347: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
48348: LD_ADDR_VAR 0 9
48352: PUSH
48353: LD_VAR 0 17
48357: PUSH
48358: LD_VAR 0 18
48362: PUSH
48363: LD_VAR 0 19
48367: PUSH
48368: LD_VAR 0 20
48372: PUSH
48373: LD_VAR 0 21
48377: PUSH
48378: LD_VAR 0 22
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: PUSH
48391: LD_VAR 0 4
48395: PUSH
48396: LD_INT 1
48398: PLUS
48399: ARRAY
48400: ST_TO_ADDR
48401: GO 48468
48403: LD_INT 3
48405: DOUBLE
48406: EQUAL
48407: IFTRUE 48411
48409: GO 48467
48411: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48412: LD_ADDR_VAR 0 9
48416: PUSH
48417: LD_VAR 0 23
48421: PUSH
48422: LD_VAR 0 24
48426: PUSH
48427: LD_VAR 0 25
48431: PUSH
48432: LD_VAR 0 26
48436: PUSH
48437: LD_VAR 0 27
48441: PUSH
48442: LD_VAR 0 28
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: PUSH
48455: LD_VAR 0 4
48459: PUSH
48460: LD_INT 1
48462: PLUS
48463: ARRAY
48464: ST_TO_ADDR
48465: GO 48468
48467: POP
48468: GO 49023
48470: LD_INT 2
48472: DOUBLE
48473: EQUAL
48474: IFTRUE 48484
48476: LD_INT 3
48478: DOUBLE
48479: EQUAL
48480: IFTRUE 48484
48482: GO 48540
48484: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48485: LD_ADDR_VAR 0 9
48489: PUSH
48490: LD_VAR 0 29
48494: PUSH
48495: LD_VAR 0 30
48499: PUSH
48500: LD_VAR 0 31
48504: PUSH
48505: LD_VAR 0 32
48509: PUSH
48510: LD_VAR 0 33
48514: PUSH
48515: LD_VAR 0 34
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: PUSH
48528: LD_VAR 0 4
48532: PUSH
48533: LD_INT 1
48535: PLUS
48536: ARRAY
48537: ST_TO_ADDR
48538: GO 49023
48540: LD_INT 16
48542: DOUBLE
48543: EQUAL
48544: IFTRUE 48602
48546: LD_INT 17
48548: DOUBLE
48549: EQUAL
48550: IFTRUE 48602
48552: LD_INT 18
48554: DOUBLE
48555: EQUAL
48556: IFTRUE 48602
48558: LD_INT 19
48560: DOUBLE
48561: EQUAL
48562: IFTRUE 48602
48564: LD_INT 22
48566: DOUBLE
48567: EQUAL
48568: IFTRUE 48602
48570: LD_INT 20
48572: DOUBLE
48573: EQUAL
48574: IFTRUE 48602
48576: LD_INT 21
48578: DOUBLE
48579: EQUAL
48580: IFTRUE 48602
48582: LD_INT 23
48584: DOUBLE
48585: EQUAL
48586: IFTRUE 48602
48588: LD_INT 24
48590: DOUBLE
48591: EQUAL
48592: IFTRUE 48602
48594: LD_INT 25
48596: DOUBLE
48597: EQUAL
48598: IFTRUE 48602
48600: GO 48658
48602: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48603: LD_ADDR_VAR 0 9
48607: PUSH
48608: LD_VAR 0 35
48612: PUSH
48613: LD_VAR 0 36
48617: PUSH
48618: LD_VAR 0 37
48622: PUSH
48623: LD_VAR 0 38
48627: PUSH
48628: LD_VAR 0 39
48632: PUSH
48633: LD_VAR 0 40
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: PUSH
48646: LD_VAR 0 4
48650: PUSH
48651: LD_INT 1
48653: PLUS
48654: ARRAY
48655: ST_TO_ADDR
48656: GO 49023
48658: LD_INT 6
48660: DOUBLE
48661: EQUAL
48662: IFTRUE 48714
48664: LD_INT 7
48666: DOUBLE
48667: EQUAL
48668: IFTRUE 48714
48670: LD_INT 8
48672: DOUBLE
48673: EQUAL
48674: IFTRUE 48714
48676: LD_INT 13
48678: DOUBLE
48679: EQUAL
48680: IFTRUE 48714
48682: LD_INT 12
48684: DOUBLE
48685: EQUAL
48686: IFTRUE 48714
48688: LD_INT 15
48690: DOUBLE
48691: EQUAL
48692: IFTRUE 48714
48694: LD_INT 11
48696: DOUBLE
48697: EQUAL
48698: IFTRUE 48714
48700: LD_INT 14
48702: DOUBLE
48703: EQUAL
48704: IFTRUE 48714
48706: LD_INT 10
48708: DOUBLE
48709: EQUAL
48710: IFTRUE 48714
48712: GO 48770
48714: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
48715: LD_ADDR_VAR 0 9
48719: PUSH
48720: LD_VAR 0 41
48724: PUSH
48725: LD_VAR 0 42
48729: PUSH
48730: LD_VAR 0 43
48734: PUSH
48735: LD_VAR 0 44
48739: PUSH
48740: LD_VAR 0 45
48744: PUSH
48745: LD_VAR 0 46
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: PUSH
48758: LD_VAR 0 4
48762: PUSH
48763: LD_INT 1
48765: PLUS
48766: ARRAY
48767: ST_TO_ADDR
48768: GO 49023
48770: LD_INT 36
48772: DOUBLE
48773: EQUAL
48774: IFTRUE 48778
48776: GO 48834
48778: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
48779: LD_ADDR_VAR 0 9
48783: PUSH
48784: LD_VAR 0 47
48788: PUSH
48789: LD_VAR 0 48
48793: PUSH
48794: LD_VAR 0 49
48798: PUSH
48799: LD_VAR 0 50
48803: PUSH
48804: LD_VAR 0 51
48808: PUSH
48809: LD_VAR 0 52
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: PUSH
48822: LD_VAR 0 4
48826: PUSH
48827: LD_INT 1
48829: PLUS
48830: ARRAY
48831: ST_TO_ADDR
48832: GO 49023
48834: LD_INT 4
48836: DOUBLE
48837: EQUAL
48838: IFTRUE 48860
48840: LD_INT 5
48842: DOUBLE
48843: EQUAL
48844: IFTRUE 48860
48846: LD_INT 34
48848: DOUBLE
48849: EQUAL
48850: IFTRUE 48860
48852: LD_INT 37
48854: DOUBLE
48855: EQUAL
48856: IFTRUE 48860
48858: GO 48916
48860: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
48861: LD_ADDR_VAR 0 9
48865: PUSH
48866: LD_VAR 0 53
48870: PUSH
48871: LD_VAR 0 54
48875: PUSH
48876: LD_VAR 0 55
48880: PUSH
48881: LD_VAR 0 56
48885: PUSH
48886: LD_VAR 0 57
48890: PUSH
48891: LD_VAR 0 58
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: PUSH
48904: LD_VAR 0 4
48908: PUSH
48909: LD_INT 1
48911: PLUS
48912: ARRAY
48913: ST_TO_ADDR
48914: GO 49023
48916: LD_INT 31
48918: DOUBLE
48919: EQUAL
48920: IFTRUE 48966
48922: LD_INT 32
48924: DOUBLE
48925: EQUAL
48926: IFTRUE 48966
48928: LD_INT 33
48930: DOUBLE
48931: EQUAL
48932: IFTRUE 48966
48934: LD_INT 27
48936: DOUBLE
48937: EQUAL
48938: IFTRUE 48966
48940: LD_INT 26
48942: DOUBLE
48943: EQUAL
48944: IFTRUE 48966
48946: LD_INT 28
48948: DOUBLE
48949: EQUAL
48950: IFTRUE 48966
48952: LD_INT 29
48954: DOUBLE
48955: EQUAL
48956: IFTRUE 48966
48958: LD_INT 30
48960: DOUBLE
48961: EQUAL
48962: IFTRUE 48966
48964: GO 49022
48966: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
48967: LD_ADDR_VAR 0 9
48971: PUSH
48972: LD_VAR 0 59
48976: PUSH
48977: LD_VAR 0 60
48981: PUSH
48982: LD_VAR 0 61
48986: PUSH
48987: LD_VAR 0 62
48991: PUSH
48992: LD_VAR 0 63
48996: PUSH
48997: LD_VAR 0 64
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: PUSH
49010: LD_VAR 0 4
49014: PUSH
49015: LD_INT 1
49017: PLUS
49018: ARRAY
49019: ST_TO_ADDR
49020: GO 49023
49022: POP
// temp_list2 = [ ] ;
49023: LD_ADDR_VAR 0 10
49027: PUSH
49028: EMPTY
49029: ST_TO_ADDR
// for i in temp_list do
49030: LD_ADDR_VAR 0 8
49034: PUSH
49035: LD_VAR 0 9
49039: PUSH
49040: FOR_IN
49041: IFFALSE 49093
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
49043: LD_ADDR_VAR 0 10
49047: PUSH
49048: LD_VAR 0 10
49052: PUSH
49053: LD_VAR 0 8
49057: PUSH
49058: LD_INT 1
49060: ARRAY
49061: PUSH
49062: LD_VAR 0 2
49066: PLUS
49067: PUSH
49068: LD_VAR 0 8
49072: PUSH
49073: LD_INT 2
49075: ARRAY
49076: PUSH
49077: LD_VAR 0 3
49081: PLUS
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: EMPTY
49088: LIST
49089: ADD
49090: ST_TO_ADDR
49091: GO 49040
49093: POP
49094: POP
// result = temp_list2 ;
49095: LD_ADDR_VAR 0 7
49099: PUSH
49100: LD_VAR 0 10
49104: ST_TO_ADDR
// end ;
49105: LD_VAR 0 7
49109: RET
// export function EnemyInRange ( unit , dist ) ; begin
49110: LD_INT 0
49112: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49113: LD_ADDR_VAR 0 3
49117: PUSH
49118: LD_VAR 0 1
49122: PPUSH
49123: CALL_OW 255
49127: PPUSH
49128: LD_VAR 0 1
49132: PPUSH
49133: CALL_OW 250
49137: PPUSH
49138: LD_VAR 0 1
49142: PPUSH
49143: CALL_OW 251
49147: PPUSH
49148: LD_VAR 0 2
49152: PPUSH
49153: CALL 22483 0 4
49157: PUSH
49158: LD_INT 4
49160: ARRAY
49161: ST_TO_ADDR
// end ;
49162: LD_VAR 0 3
49166: RET
// export function PlayerSeeMe ( unit ) ; begin
49167: LD_INT 0
49169: PPUSH
// result := See ( your_side , unit ) ;
49170: LD_ADDR_VAR 0 2
49174: PUSH
49175: LD_OWVAR 2
49179: PPUSH
49180: LD_VAR 0 1
49184: PPUSH
49185: CALL_OW 292
49189: ST_TO_ADDR
// end ;
49190: LD_VAR 0 2
49194: RET
// export function ReverseDir ( unit ) ; begin
49195: LD_INT 0
49197: PPUSH
// if not unit then
49198: LD_VAR 0 1
49202: NOT
49203: IFFALSE 49207
// exit ;
49205: GO 49230
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
49207: LD_ADDR_VAR 0 2
49211: PUSH
49212: LD_VAR 0 1
49216: PPUSH
49217: CALL_OW 254
49221: PUSH
49222: LD_INT 3
49224: PLUS
49225: PUSH
49226: LD_INT 6
49228: MOD
49229: ST_TO_ADDR
// end ;
49230: LD_VAR 0 2
49234: RET
// export function ReverseArray ( array ) ; var i ; begin
49235: LD_INT 0
49237: PPUSH
49238: PPUSH
// if not array then
49239: LD_VAR 0 1
49243: NOT
49244: IFFALSE 49248
// exit ;
49246: GO 49303
// result := [ ] ;
49248: LD_ADDR_VAR 0 2
49252: PUSH
49253: EMPTY
49254: ST_TO_ADDR
// for i := array downto 1 do
49255: LD_ADDR_VAR 0 3
49259: PUSH
49260: DOUBLE
49261: LD_VAR 0 1
49265: INC
49266: ST_TO_ADDR
49267: LD_INT 1
49269: PUSH
49270: FOR_DOWNTO
49271: IFFALSE 49301
// result := Join ( result , array [ i ] ) ;
49273: LD_ADDR_VAR 0 2
49277: PUSH
49278: LD_VAR 0 2
49282: PPUSH
49283: LD_VAR 0 1
49287: PUSH
49288: LD_VAR 0 3
49292: ARRAY
49293: PPUSH
49294: CALL 53946 0 2
49298: ST_TO_ADDR
49299: GO 49270
49301: POP
49302: POP
// end ;
49303: LD_VAR 0 2
49307: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
49308: LD_INT 0
49310: PPUSH
49311: PPUSH
49312: PPUSH
49313: PPUSH
49314: PPUSH
49315: PPUSH
// if not unit or not hexes then
49316: LD_VAR 0 1
49320: NOT
49321: PUSH
49322: LD_VAR 0 2
49326: NOT
49327: OR
49328: IFFALSE 49332
// exit ;
49330: GO 49455
// dist := 9999 ;
49332: LD_ADDR_VAR 0 5
49336: PUSH
49337: LD_INT 9999
49339: ST_TO_ADDR
// for i = 1 to hexes do
49340: LD_ADDR_VAR 0 4
49344: PUSH
49345: DOUBLE
49346: LD_INT 1
49348: DEC
49349: ST_TO_ADDR
49350: LD_VAR 0 2
49354: PUSH
49355: FOR_TO
49356: IFFALSE 49443
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49358: LD_ADDR_VAR 0 6
49362: PUSH
49363: LD_VAR 0 1
49367: PPUSH
49368: LD_VAR 0 2
49372: PUSH
49373: LD_VAR 0 4
49377: ARRAY
49378: PUSH
49379: LD_INT 1
49381: ARRAY
49382: PPUSH
49383: LD_VAR 0 2
49387: PUSH
49388: LD_VAR 0 4
49392: ARRAY
49393: PUSH
49394: LD_INT 2
49396: ARRAY
49397: PPUSH
49398: CALL_OW 297
49402: ST_TO_ADDR
// if tdist < dist then
49403: LD_VAR 0 6
49407: PUSH
49408: LD_VAR 0 5
49412: LESS
49413: IFFALSE 49441
// begin hex := hexes [ i ] ;
49415: LD_ADDR_VAR 0 8
49419: PUSH
49420: LD_VAR 0 2
49424: PUSH
49425: LD_VAR 0 4
49429: ARRAY
49430: ST_TO_ADDR
// dist := tdist ;
49431: LD_ADDR_VAR 0 5
49435: PUSH
49436: LD_VAR 0 6
49440: ST_TO_ADDR
// end ; end ;
49441: GO 49355
49443: POP
49444: POP
// result := hex ;
49445: LD_ADDR_VAR 0 3
49449: PUSH
49450: LD_VAR 0 8
49454: ST_TO_ADDR
// end ;
49455: LD_VAR 0 3
49459: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49460: LD_INT 0
49462: PPUSH
49463: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49464: LD_VAR 0 1
49468: NOT
49469: PUSH
49470: LD_VAR 0 1
49474: PUSH
49475: LD_INT 21
49477: PUSH
49478: LD_INT 2
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 23
49487: PUSH
49488: LD_INT 2
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PPUSH
49499: CALL_OW 69
49503: IN
49504: NOT
49505: OR
49506: IFFALSE 49510
// exit ;
49508: GO 49557
// for i = 1 to 3 do
49510: LD_ADDR_VAR 0 3
49514: PUSH
49515: DOUBLE
49516: LD_INT 1
49518: DEC
49519: ST_TO_ADDR
49520: LD_INT 3
49522: PUSH
49523: FOR_TO
49524: IFFALSE 49555
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49526: LD_VAR 0 1
49530: PPUSH
49531: CALL_OW 250
49535: PPUSH
49536: LD_VAR 0 1
49540: PPUSH
49541: CALL_OW 251
49545: PPUSH
49546: LD_INT 1
49548: PPUSH
49549: CALL_OW 453
49553: GO 49523
49555: POP
49556: POP
// end ;
49557: LD_VAR 0 2
49561: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
49562: LD_INT 0
49564: PPUSH
49565: PPUSH
49566: PPUSH
49567: PPUSH
49568: PPUSH
49569: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
49570: LD_VAR 0 1
49574: NOT
49575: PUSH
49576: LD_VAR 0 2
49580: NOT
49581: OR
49582: PUSH
49583: LD_VAR 0 1
49587: PPUSH
49588: CALL_OW 314
49592: OR
49593: IFFALSE 49597
// exit ;
49595: GO 50064
// if GetLives ( i ) < 250 then
49597: LD_VAR 0 4
49601: PPUSH
49602: CALL_OW 256
49606: PUSH
49607: LD_INT 250
49609: LESS
49610: IFFALSE 49623
// begin ComAutodestruct ( i ) ;
49612: LD_VAR 0 4
49616: PPUSH
49617: CALL 49460 0 1
// exit ;
49621: GO 50064
// end ; x := GetX ( enemy_unit ) ;
49623: LD_ADDR_VAR 0 7
49627: PUSH
49628: LD_VAR 0 2
49632: PPUSH
49633: CALL_OW 250
49637: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
49638: LD_ADDR_VAR 0 8
49642: PUSH
49643: LD_VAR 0 2
49647: PPUSH
49648: CALL_OW 251
49652: ST_TO_ADDR
// if not x or not y then
49653: LD_VAR 0 7
49657: NOT
49658: PUSH
49659: LD_VAR 0 8
49663: NOT
49664: OR
49665: IFFALSE 49669
// exit ;
49667: GO 50064
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
49669: LD_ADDR_VAR 0 6
49673: PUSH
49674: LD_VAR 0 7
49678: PPUSH
49679: LD_INT 0
49681: PPUSH
49682: LD_INT 4
49684: PPUSH
49685: CALL_OW 272
49689: PUSH
49690: LD_VAR 0 8
49694: PPUSH
49695: LD_INT 0
49697: PPUSH
49698: LD_INT 4
49700: PPUSH
49701: CALL_OW 273
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_VAR 0 7
49714: PPUSH
49715: LD_INT 1
49717: PPUSH
49718: LD_INT 4
49720: PPUSH
49721: CALL_OW 272
49725: PUSH
49726: LD_VAR 0 8
49730: PPUSH
49731: LD_INT 1
49733: PPUSH
49734: LD_INT 4
49736: PPUSH
49737: CALL_OW 273
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_VAR 0 7
49750: PPUSH
49751: LD_INT 2
49753: PPUSH
49754: LD_INT 4
49756: PPUSH
49757: CALL_OW 272
49761: PUSH
49762: LD_VAR 0 8
49766: PPUSH
49767: LD_INT 2
49769: PPUSH
49770: LD_INT 4
49772: PPUSH
49773: CALL_OW 273
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_VAR 0 7
49786: PPUSH
49787: LD_INT 3
49789: PPUSH
49790: LD_INT 4
49792: PPUSH
49793: CALL_OW 272
49797: PUSH
49798: LD_VAR 0 8
49802: PPUSH
49803: LD_INT 3
49805: PPUSH
49806: LD_INT 4
49808: PPUSH
49809: CALL_OW 273
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_VAR 0 7
49822: PPUSH
49823: LD_INT 4
49825: PPUSH
49826: LD_INT 4
49828: PPUSH
49829: CALL_OW 272
49833: PUSH
49834: LD_VAR 0 8
49838: PPUSH
49839: LD_INT 4
49841: PPUSH
49842: LD_INT 4
49844: PPUSH
49845: CALL_OW 273
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_VAR 0 7
49858: PPUSH
49859: LD_INT 5
49861: PPUSH
49862: LD_INT 4
49864: PPUSH
49865: CALL_OW 272
49869: PUSH
49870: LD_VAR 0 8
49874: PPUSH
49875: LD_INT 5
49877: PPUSH
49878: LD_INT 4
49880: PPUSH
49881: CALL_OW 273
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: ST_TO_ADDR
// for i = tmp downto 1 do
49898: LD_ADDR_VAR 0 4
49902: PUSH
49903: DOUBLE
49904: LD_VAR 0 6
49908: INC
49909: ST_TO_ADDR
49910: LD_INT 1
49912: PUSH
49913: FOR_DOWNTO
49914: IFFALSE 50015
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
49916: LD_VAR 0 6
49920: PUSH
49921: LD_VAR 0 4
49925: ARRAY
49926: PUSH
49927: LD_INT 1
49929: ARRAY
49930: PPUSH
49931: LD_VAR 0 6
49935: PUSH
49936: LD_VAR 0 4
49940: ARRAY
49941: PUSH
49942: LD_INT 2
49944: ARRAY
49945: PPUSH
49946: CALL_OW 488
49950: NOT
49951: PUSH
49952: LD_VAR 0 6
49956: PUSH
49957: LD_VAR 0 4
49961: ARRAY
49962: PUSH
49963: LD_INT 1
49965: ARRAY
49966: PPUSH
49967: LD_VAR 0 6
49971: PUSH
49972: LD_VAR 0 4
49976: ARRAY
49977: PUSH
49978: LD_INT 2
49980: ARRAY
49981: PPUSH
49982: CALL_OW 428
49986: PUSH
49987: LD_INT 0
49989: NONEQUAL
49990: OR
49991: IFFALSE 50013
// tmp := Delete ( tmp , i ) ;
49993: LD_ADDR_VAR 0 6
49997: PUSH
49998: LD_VAR 0 6
50002: PPUSH
50003: LD_VAR 0 4
50007: PPUSH
50008: CALL_OW 3
50012: ST_TO_ADDR
50013: GO 49913
50015: POP
50016: POP
// j := GetClosestHex ( unit , tmp ) ;
50017: LD_ADDR_VAR 0 5
50021: PUSH
50022: LD_VAR 0 1
50026: PPUSH
50027: LD_VAR 0 6
50031: PPUSH
50032: CALL 49308 0 2
50036: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
50037: LD_VAR 0 1
50041: PPUSH
50042: LD_VAR 0 5
50046: PUSH
50047: LD_INT 1
50049: ARRAY
50050: PPUSH
50051: LD_VAR 0 5
50055: PUSH
50056: LD_INT 2
50058: ARRAY
50059: PPUSH
50060: CALL_OW 111
// end ;
50064: LD_VAR 0 3
50068: RET
// export function PrepareApemanSoldier ( ) ; begin
50069: LD_INT 0
50071: PPUSH
// uc_nation := 0 ;
50072: LD_ADDR_OWVAR 21
50076: PUSH
50077: LD_INT 0
50079: ST_TO_ADDR
// hc_sex := sex_male ;
50080: LD_ADDR_OWVAR 27
50084: PUSH
50085: LD_INT 1
50087: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
50088: LD_ADDR_OWVAR 28
50092: PUSH
50093: LD_INT 15
50095: ST_TO_ADDR
// hc_gallery :=  ;
50096: LD_ADDR_OWVAR 33
50100: PUSH
50101: LD_STRING 
50103: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50104: LD_ADDR_OWVAR 31
50108: PUSH
50109: LD_INT 0
50111: PPUSH
50112: LD_INT 3
50114: PPUSH
50115: CALL_OW 12
50119: PUSH
50120: LD_INT 0
50122: PPUSH
50123: LD_INT 3
50125: PPUSH
50126: CALL_OW 12
50130: PUSH
50131: LD_INT 0
50133: PUSH
50134: LD_INT 0
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: ST_TO_ADDR
// end ;
50143: LD_VAR 0 1
50147: RET
// export function PrepareApemanEngineer ( ) ; begin
50148: LD_INT 0
50150: PPUSH
// uc_nation := 0 ;
50151: LD_ADDR_OWVAR 21
50155: PUSH
50156: LD_INT 0
50158: ST_TO_ADDR
// hc_sex := sex_male ;
50159: LD_ADDR_OWVAR 27
50163: PUSH
50164: LD_INT 1
50166: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
50167: LD_ADDR_OWVAR 28
50171: PUSH
50172: LD_INT 16
50174: ST_TO_ADDR
// hc_gallery :=  ;
50175: LD_ADDR_OWVAR 33
50179: PUSH
50180: LD_STRING 
50182: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50183: LD_ADDR_OWVAR 31
50187: PUSH
50188: LD_INT 0
50190: PPUSH
50191: LD_INT 3
50193: PPUSH
50194: CALL_OW 12
50198: PUSH
50199: LD_INT 0
50201: PPUSH
50202: LD_INT 3
50204: PPUSH
50205: CALL_OW 12
50209: PUSH
50210: LD_INT 0
50212: PUSH
50213: LD_INT 0
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: ST_TO_ADDR
// end ;
50222: LD_VAR 0 1
50226: RET
// export function PrepareApeman ( agressivity ) ; begin
50227: LD_INT 0
50229: PPUSH
// uc_side := 0 ;
50230: LD_ADDR_OWVAR 20
50234: PUSH
50235: LD_INT 0
50237: ST_TO_ADDR
// uc_nation := 0 ;
50238: LD_ADDR_OWVAR 21
50242: PUSH
50243: LD_INT 0
50245: ST_TO_ADDR
// hc_sex := sex_male ;
50246: LD_ADDR_OWVAR 27
50250: PUSH
50251: LD_INT 1
50253: ST_TO_ADDR
// hc_class := class_apeman ;
50254: LD_ADDR_OWVAR 28
50258: PUSH
50259: LD_INT 12
50261: ST_TO_ADDR
// hc_gallery :=  ;
50262: LD_ADDR_OWVAR 33
50266: PUSH
50267: LD_STRING 
50269: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50270: LD_ADDR_OWVAR 35
50274: PUSH
50275: LD_VAR 0 1
50279: NEG
50280: PPUSH
50281: LD_VAR 0 1
50285: PPUSH
50286: CALL_OW 12
50290: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50291: LD_ADDR_OWVAR 31
50295: PUSH
50296: LD_INT 0
50298: PPUSH
50299: LD_INT 3
50301: PPUSH
50302: CALL_OW 12
50306: PUSH
50307: LD_INT 0
50309: PPUSH
50310: LD_INT 3
50312: PPUSH
50313: CALL_OW 12
50317: PUSH
50318: LD_INT 0
50320: PUSH
50321: LD_INT 0
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: ST_TO_ADDR
// end ;
50330: LD_VAR 0 2
50334: RET
// export function PrepareTiger ( agressivity ) ; begin
50335: LD_INT 0
50337: PPUSH
// uc_side := 0 ;
50338: LD_ADDR_OWVAR 20
50342: PUSH
50343: LD_INT 0
50345: ST_TO_ADDR
// uc_nation := 0 ;
50346: LD_ADDR_OWVAR 21
50350: PUSH
50351: LD_INT 0
50353: ST_TO_ADDR
// hc_class := class_tiger ;
50354: LD_ADDR_OWVAR 28
50358: PUSH
50359: LD_INT 14
50361: ST_TO_ADDR
// hc_gallery :=  ;
50362: LD_ADDR_OWVAR 33
50366: PUSH
50367: LD_STRING 
50369: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50370: LD_ADDR_OWVAR 35
50374: PUSH
50375: LD_VAR 0 1
50379: NEG
50380: PPUSH
50381: LD_VAR 0 1
50385: PPUSH
50386: CALL_OW 12
50390: ST_TO_ADDR
// end ;
50391: LD_VAR 0 2
50395: RET
// export function PrepareEnchidna ( ) ; begin
50396: LD_INT 0
50398: PPUSH
// uc_side := 0 ;
50399: LD_ADDR_OWVAR 20
50403: PUSH
50404: LD_INT 0
50406: ST_TO_ADDR
// uc_nation := 0 ;
50407: LD_ADDR_OWVAR 21
50411: PUSH
50412: LD_INT 0
50414: ST_TO_ADDR
// hc_class := class_baggie ;
50415: LD_ADDR_OWVAR 28
50419: PUSH
50420: LD_INT 13
50422: ST_TO_ADDR
// hc_gallery :=  ;
50423: LD_ADDR_OWVAR 33
50427: PUSH
50428: LD_STRING 
50430: ST_TO_ADDR
// end ;
50431: LD_VAR 0 1
50435: RET
// export function PrepareFrog ( ) ; begin
50436: LD_INT 0
50438: PPUSH
// uc_side := 0 ;
50439: LD_ADDR_OWVAR 20
50443: PUSH
50444: LD_INT 0
50446: ST_TO_ADDR
// uc_nation := 0 ;
50447: LD_ADDR_OWVAR 21
50451: PUSH
50452: LD_INT 0
50454: ST_TO_ADDR
// hc_class := class_frog ;
50455: LD_ADDR_OWVAR 28
50459: PUSH
50460: LD_INT 19
50462: ST_TO_ADDR
// hc_gallery :=  ;
50463: LD_ADDR_OWVAR 33
50467: PUSH
50468: LD_STRING 
50470: ST_TO_ADDR
// end ;
50471: LD_VAR 0 1
50475: RET
// export function PrepareFish ( ) ; begin
50476: LD_INT 0
50478: PPUSH
// uc_side := 0 ;
50479: LD_ADDR_OWVAR 20
50483: PUSH
50484: LD_INT 0
50486: ST_TO_ADDR
// uc_nation := 0 ;
50487: LD_ADDR_OWVAR 21
50491: PUSH
50492: LD_INT 0
50494: ST_TO_ADDR
// hc_class := class_fish ;
50495: LD_ADDR_OWVAR 28
50499: PUSH
50500: LD_INT 20
50502: ST_TO_ADDR
// hc_gallery :=  ;
50503: LD_ADDR_OWVAR 33
50507: PUSH
50508: LD_STRING 
50510: ST_TO_ADDR
// end ;
50511: LD_VAR 0 1
50515: RET
// export function PrepareBird ( ) ; begin
50516: LD_INT 0
50518: PPUSH
// uc_side := 0 ;
50519: LD_ADDR_OWVAR 20
50523: PUSH
50524: LD_INT 0
50526: ST_TO_ADDR
// uc_nation := 0 ;
50527: LD_ADDR_OWVAR 21
50531: PUSH
50532: LD_INT 0
50534: ST_TO_ADDR
// hc_class := class_phororhacos ;
50535: LD_ADDR_OWVAR 28
50539: PUSH
50540: LD_INT 18
50542: ST_TO_ADDR
// hc_gallery :=  ;
50543: LD_ADDR_OWVAR 33
50547: PUSH
50548: LD_STRING 
50550: ST_TO_ADDR
// end ;
50551: LD_VAR 0 1
50555: RET
// export function PrepareHorse ( ) ; begin
50556: LD_INT 0
50558: PPUSH
// uc_side := 0 ;
50559: LD_ADDR_OWVAR 20
50563: PUSH
50564: LD_INT 0
50566: ST_TO_ADDR
// uc_nation := 0 ;
50567: LD_ADDR_OWVAR 21
50571: PUSH
50572: LD_INT 0
50574: ST_TO_ADDR
// hc_class := class_horse ;
50575: LD_ADDR_OWVAR 28
50579: PUSH
50580: LD_INT 21
50582: ST_TO_ADDR
// hc_gallery :=  ;
50583: LD_ADDR_OWVAR 33
50587: PUSH
50588: LD_STRING 
50590: ST_TO_ADDR
// end ;
50591: LD_VAR 0 1
50595: RET
// export function PrepareMastodont ( ) ; begin
50596: LD_INT 0
50598: PPUSH
// uc_side := 0 ;
50599: LD_ADDR_OWVAR 20
50603: PUSH
50604: LD_INT 0
50606: ST_TO_ADDR
// uc_nation := 0 ;
50607: LD_ADDR_OWVAR 21
50611: PUSH
50612: LD_INT 0
50614: ST_TO_ADDR
// vc_chassis := class_mastodont ;
50615: LD_ADDR_OWVAR 37
50619: PUSH
50620: LD_INT 31
50622: ST_TO_ADDR
// vc_control := control_rider ;
50623: LD_ADDR_OWVAR 38
50627: PUSH
50628: LD_INT 4
50630: ST_TO_ADDR
// end ;
50631: LD_VAR 0 1
50635: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
50636: LD_INT 0
50638: PPUSH
50639: PPUSH
50640: PPUSH
// uc_side = 0 ;
50641: LD_ADDR_OWVAR 20
50645: PUSH
50646: LD_INT 0
50648: ST_TO_ADDR
// uc_nation = 0 ;
50649: LD_ADDR_OWVAR 21
50653: PUSH
50654: LD_INT 0
50656: ST_TO_ADDR
// InitHc_All ( ) ;
50657: CALL_OW 584
// InitVc ;
50661: CALL_OW 20
// if mastodonts then
50665: LD_VAR 0 6
50669: IFFALSE 50736
// for i = 1 to mastodonts do
50671: LD_ADDR_VAR 0 11
50675: PUSH
50676: DOUBLE
50677: LD_INT 1
50679: DEC
50680: ST_TO_ADDR
50681: LD_VAR 0 6
50685: PUSH
50686: FOR_TO
50687: IFFALSE 50734
// begin vc_chassis := 31 ;
50689: LD_ADDR_OWVAR 37
50693: PUSH
50694: LD_INT 31
50696: ST_TO_ADDR
// vc_control := control_rider ;
50697: LD_ADDR_OWVAR 38
50701: PUSH
50702: LD_INT 4
50704: ST_TO_ADDR
// animal := CreateVehicle ;
50705: LD_ADDR_VAR 0 12
50709: PUSH
50710: CALL_OW 45
50714: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50715: LD_VAR 0 12
50719: PPUSH
50720: LD_VAR 0 8
50724: PPUSH
50725: LD_INT 0
50727: PPUSH
50728: CALL 52864 0 3
// end ;
50732: GO 50686
50734: POP
50735: POP
// if horses then
50736: LD_VAR 0 5
50740: IFFALSE 50807
// for i = 1 to horses do
50742: LD_ADDR_VAR 0 11
50746: PUSH
50747: DOUBLE
50748: LD_INT 1
50750: DEC
50751: ST_TO_ADDR
50752: LD_VAR 0 5
50756: PUSH
50757: FOR_TO
50758: IFFALSE 50805
// begin hc_class := 21 ;
50760: LD_ADDR_OWVAR 28
50764: PUSH
50765: LD_INT 21
50767: ST_TO_ADDR
// hc_gallery :=  ;
50768: LD_ADDR_OWVAR 33
50772: PUSH
50773: LD_STRING 
50775: ST_TO_ADDR
// animal := CreateHuman ;
50776: LD_ADDR_VAR 0 12
50780: PUSH
50781: CALL_OW 44
50785: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50786: LD_VAR 0 12
50790: PPUSH
50791: LD_VAR 0 8
50795: PPUSH
50796: LD_INT 0
50798: PPUSH
50799: CALL 52864 0 3
// end ;
50803: GO 50757
50805: POP
50806: POP
// if birds then
50807: LD_VAR 0 1
50811: IFFALSE 50878
// for i = 1 to birds do
50813: LD_ADDR_VAR 0 11
50817: PUSH
50818: DOUBLE
50819: LD_INT 1
50821: DEC
50822: ST_TO_ADDR
50823: LD_VAR 0 1
50827: PUSH
50828: FOR_TO
50829: IFFALSE 50876
// begin hc_class := 18 ;
50831: LD_ADDR_OWVAR 28
50835: PUSH
50836: LD_INT 18
50838: ST_TO_ADDR
// hc_gallery =  ;
50839: LD_ADDR_OWVAR 33
50843: PUSH
50844: LD_STRING 
50846: ST_TO_ADDR
// animal := CreateHuman ;
50847: LD_ADDR_VAR 0 12
50851: PUSH
50852: CALL_OW 44
50856: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50857: LD_VAR 0 12
50861: PPUSH
50862: LD_VAR 0 8
50866: PPUSH
50867: LD_INT 0
50869: PPUSH
50870: CALL 52864 0 3
// end ;
50874: GO 50828
50876: POP
50877: POP
// if tigers then
50878: LD_VAR 0 2
50882: IFFALSE 50966
// for i = 1 to tigers do
50884: LD_ADDR_VAR 0 11
50888: PUSH
50889: DOUBLE
50890: LD_INT 1
50892: DEC
50893: ST_TO_ADDR
50894: LD_VAR 0 2
50898: PUSH
50899: FOR_TO
50900: IFFALSE 50964
// begin hc_class = class_tiger ;
50902: LD_ADDR_OWVAR 28
50906: PUSH
50907: LD_INT 14
50909: ST_TO_ADDR
// hc_gallery =  ;
50910: LD_ADDR_OWVAR 33
50914: PUSH
50915: LD_STRING 
50917: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
50918: LD_ADDR_OWVAR 35
50922: PUSH
50923: LD_INT 7
50925: NEG
50926: PPUSH
50927: LD_INT 7
50929: PPUSH
50930: CALL_OW 12
50934: ST_TO_ADDR
// animal := CreateHuman ;
50935: LD_ADDR_VAR 0 12
50939: PUSH
50940: CALL_OW 44
50944: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50945: LD_VAR 0 12
50949: PPUSH
50950: LD_VAR 0 8
50954: PPUSH
50955: LD_INT 0
50957: PPUSH
50958: CALL 52864 0 3
// end ;
50962: GO 50899
50964: POP
50965: POP
// if apemans then
50966: LD_VAR 0 3
50970: IFFALSE 51093
// for i = 1 to apemans do
50972: LD_ADDR_VAR 0 11
50976: PUSH
50977: DOUBLE
50978: LD_INT 1
50980: DEC
50981: ST_TO_ADDR
50982: LD_VAR 0 3
50986: PUSH
50987: FOR_TO
50988: IFFALSE 51091
// begin hc_class = class_apeman ;
50990: LD_ADDR_OWVAR 28
50994: PUSH
50995: LD_INT 12
50997: ST_TO_ADDR
// hc_gallery =  ;
50998: LD_ADDR_OWVAR 33
51002: PUSH
51003: LD_STRING 
51005: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
51006: LD_ADDR_OWVAR 35
51010: PUSH
51011: LD_INT 2
51013: NEG
51014: PPUSH
51015: LD_INT 2
51017: PPUSH
51018: CALL_OW 12
51022: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
51023: LD_ADDR_OWVAR 31
51027: PUSH
51028: LD_INT 1
51030: PPUSH
51031: LD_INT 3
51033: PPUSH
51034: CALL_OW 12
51038: PUSH
51039: LD_INT 1
51041: PPUSH
51042: LD_INT 3
51044: PPUSH
51045: CALL_OW 12
51049: PUSH
51050: LD_INT 0
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: ST_TO_ADDR
// animal := CreateHuman ;
51062: LD_ADDR_VAR 0 12
51066: PUSH
51067: CALL_OW 44
51071: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51072: LD_VAR 0 12
51076: PPUSH
51077: LD_VAR 0 8
51081: PPUSH
51082: LD_INT 0
51084: PPUSH
51085: CALL 52864 0 3
// end ;
51089: GO 50987
51091: POP
51092: POP
// if enchidnas then
51093: LD_VAR 0 4
51097: IFFALSE 51164
// for i = 1 to enchidnas do
51099: LD_ADDR_VAR 0 11
51103: PUSH
51104: DOUBLE
51105: LD_INT 1
51107: DEC
51108: ST_TO_ADDR
51109: LD_VAR 0 4
51113: PUSH
51114: FOR_TO
51115: IFFALSE 51162
// begin hc_class = 13 ;
51117: LD_ADDR_OWVAR 28
51121: PUSH
51122: LD_INT 13
51124: ST_TO_ADDR
// hc_gallery =  ;
51125: LD_ADDR_OWVAR 33
51129: PUSH
51130: LD_STRING 
51132: ST_TO_ADDR
// animal := CreateHuman ;
51133: LD_ADDR_VAR 0 12
51137: PUSH
51138: CALL_OW 44
51142: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51143: LD_VAR 0 12
51147: PPUSH
51148: LD_VAR 0 8
51152: PPUSH
51153: LD_INT 0
51155: PPUSH
51156: CALL 52864 0 3
// end ;
51160: GO 51114
51162: POP
51163: POP
// if fishes then
51164: LD_VAR 0 7
51168: IFFALSE 51235
// for i = 1 to fishes do
51170: LD_ADDR_VAR 0 11
51174: PUSH
51175: DOUBLE
51176: LD_INT 1
51178: DEC
51179: ST_TO_ADDR
51180: LD_VAR 0 7
51184: PUSH
51185: FOR_TO
51186: IFFALSE 51233
// begin hc_class = 20 ;
51188: LD_ADDR_OWVAR 28
51192: PUSH
51193: LD_INT 20
51195: ST_TO_ADDR
// hc_gallery =  ;
51196: LD_ADDR_OWVAR 33
51200: PUSH
51201: LD_STRING 
51203: ST_TO_ADDR
// animal := CreateHuman ;
51204: LD_ADDR_VAR 0 12
51208: PUSH
51209: CALL_OW 44
51213: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51214: LD_VAR 0 12
51218: PPUSH
51219: LD_VAR 0 9
51223: PPUSH
51224: LD_INT 0
51226: PPUSH
51227: CALL 52864 0 3
// end ;
51231: GO 51185
51233: POP
51234: POP
// end ;
51235: LD_VAR 0 10
51239: RET
// export function WantHeal ( sci , unit ) ; begin
51240: LD_INT 0
51242: PPUSH
// if GetTaskList ( sci ) > 0 then
51243: LD_VAR 0 1
51247: PPUSH
51248: CALL_OW 437
51252: PUSH
51253: LD_INT 0
51255: GREATER
51256: IFFALSE 51326
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
51258: LD_VAR 0 1
51262: PPUSH
51263: CALL_OW 437
51267: PUSH
51268: LD_INT 1
51270: ARRAY
51271: PUSH
51272: LD_INT 1
51274: ARRAY
51275: PUSH
51276: LD_STRING l
51278: EQUAL
51279: PUSH
51280: LD_VAR 0 1
51284: PPUSH
51285: CALL_OW 437
51289: PUSH
51290: LD_INT 1
51292: ARRAY
51293: PUSH
51294: LD_INT 4
51296: ARRAY
51297: PUSH
51298: LD_VAR 0 2
51302: EQUAL
51303: AND
51304: IFFALSE 51316
// result := true else
51306: LD_ADDR_VAR 0 3
51310: PUSH
51311: LD_INT 1
51313: ST_TO_ADDR
51314: GO 51324
// result := false ;
51316: LD_ADDR_VAR 0 3
51320: PUSH
51321: LD_INT 0
51323: ST_TO_ADDR
// end else
51324: GO 51334
// result := false ;
51326: LD_ADDR_VAR 0 3
51330: PUSH
51331: LD_INT 0
51333: ST_TO_ADDR
// end ;
51334: LD_VAR 0 3
51338: RET
// export function HealTarget ( sci ) ; begin
51339: LD_INT 0
51341: PPUSH
// if not sci then
51342: LD_VAR 0 1
51346: NOT
51347: IFFALSE 51351
// exit ;
51349: GO 51416
// result := 0 ;
51351: LD_ADDR_VAR 0 2
51355: PUSH
51356: LD_INT 0
51358: ST_TO_ADDR
// if GetTaskList ( sci ) then
51359: LD_VAR 0 1
51363: PPUSH
51364: CALL_OW 437
51368: IFFALSE 51416
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
51370: LD_VAR 0 1
51374: PPUSH
51375: CALL_OW 437
51379: PUSH
51380: LD_INT 1
51382: ARRAY
51383: PUSH
51384: LD_INT 1
51386: ARRAY
51387: PUSH
51388: LD_STRING l
51390: EQUAL
51391: IFFALSE 51416
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
51393: LD_ADDR_VAR 0 2
51397: PUSH
51398: LD_VAR 0 1
51402: PPUSH
51403: CALL_OW 437
51407: PUSH
51408: LD_INT 1
51410: ARRAY
51411: PUSH
51412: LD_INT 4
51414: ARRAY
51415: ST_TO_ADDR
// end ;
51416: LD_VAR 0 2
51420: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51421: LD_INT 0
51423: PPUSH
51424: PPUSH
51425: PPUSH
51426: PPUSH
// if not base_units then
51427: LD_VAR 0 1
51431: NOT
51432: IFFALSE 51436
// exit ;
51434: GO 51523
// result := false ;
51436: LD_ADDR_VAR 0 2
51440: PUSH
51441: LD_INT 0
51443: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51444: LD_ADDR_VAR 0 5
51448: PUSH
51449: LD_VAR 0 1
51453: PPUSH
51454: LD_INT 21
51456: PUSH
51457: LD_INT 3
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PPUSH
51464: CALL_OW 72
51468: ST_TO_ADDR
// if not tmp then
51469: LD_VAR 0 5
51473: NOT
51474: IFFALSE 51478
// exit ;
51476: GO 51523
// for i in tmp do
51478: LD_ADDR_VAR 0 3
51482: PUSH
51483: LD_VAR 0 5
51487: PUSH
51488: FOR_IN
51489: IFFALSE 51521
// begin result := EnemyInRange ( i , 22 ) ;
51491: LD_ADDR_VAR 0 2
51495: PUSH
51496: LD_VAR 0 3
51500: PPUSH
51501: LD_INT 22
51503: PPUSH
51504: CALL 49110 0 2
51508: ST_TO_ADDR
// if result then
51509: LD_VAR 0 2
51513: IFFALSE 51519
// exit ;
51515: POP
51516: POP
51517: GO 51523
// end ;
51519: GO 51488
51521: POP
51522: POP
// end ;
51523: LD_VAR 0 2
51527: RET
// export function FilterByTag ( units , tag ) ; begin
51528: LD_INT 0
51530: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
51531: LD_ADDR_VAR 0 3
51535: PUSH
51536: LD_VAR 0 1
51540: PPUSH
51541: LD_INT 120
51543: PUSH
51544: LD_VAR 0 2
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PPUSH
51553: CALL_OW 72
51557: ST_TO_ADDR
// end ;
51558: LD_VAR 0 3
51562: RET
// export function IsDriver ( un ) ; begin
51563: LD_INT 0
51565: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51566: LD_ADDR_VAR 0 2
51570: PUSH
51571: LD_VAR 0 1
51575: PUSH
51576: LD_INT 55
51578: PUSH
51579: EMPTY
51580: LIST
51581: PPUSH
51582: CALL_OW 69
51586: IN
51587: ST_TO_ADDR
// end ;
51588: LD_VAR 0 2
51592: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51593: LD_INT 0
51595: PPUSH
51596: PPUSH
// list := [ ] ;
51597: LD_ADDR_VAR 0 5
51601: PUSH
51602: EMPTY
51603: ST_TO_ADDR
// case d of 0 :
51604: LD_VAR 0 3
51608: PUSH
51609: LD_INT 0
51611: DOUBLE
51612: EQUAL
51613: IFTRUE 51617
51615: GO 51750
51617: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51618: LD_ADDR_VAR 0 5
51622: PUSH
51623: LD_VAR 0 1
51627: PUSH
51628: LD_INT 4
51630: MINUS
51631: PUSH
51632: LD_VAR 0 2
51636: PUSH
51637: LD_INT 4
51639: MINUS
51640: PUSH
51641: LD_INT 2
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: LIST
51648: PUSH
51649: LD_VAR 0 1
51653: PUSH
51654: LD_INT 3
51656: MINUS
51657: PUSH
51658: LD_VAR 0 2
51662: PUSH
51663: LD_INT 1
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: LIST
51670: PUSH
51671: LD_VAR 0 1
51675: PUSH
51676: LD_INT 4
51678: PLUS
51679: PUSH
51680: LD_VAR 0 2
51684: PUSH
51685: LD_INT 4
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: LIST
51692: PUSH
51693: LD_VAR 0 1
51697: PUSH
51698: LD_INT 3
51700: PLUS
51701: PUSH
51702: LD_VAR 0 2
51706: PUSH
51707: LD_INT 3
51709: PLUS
51710: PUSH
51711: LD_INT 5
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: LIST
51718: PUSH
51719: LD_VAR 0 1
51723: PUSH
51724: LD_VAR 0 2
51728: PUSH
51729: LD_INT 4
51731: PLUS
51732: PUSH
51733: LD_INT 0
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: LIST
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: ST_TO_ADDR
// end ; 1 :
51748: GO 52448
51750: LD_INT 1
51752: DOUBLE
51753: EQUAL
51754: IFTRUE 51758
51756: GO 51891
51758: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
51759: LD_ADDR_VAR 0 5
51763: PUSH
51764: LD_VAR 0 1
51768: PUSH
51769: LD_VAR 0 2
51773: PUSH
51774: LD_INT 4
51776: MINUS
51777: PUSH
51778: LD_INT 3
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: LIST
51785: PUSH
51786: LD_VAR 0 1
51790: PUSH
51791: LD_INT 3
51793: MINUS
51794: PUSH
51795: LD_VAR 0 2
51799: PUSH
51800: LD_INT 3
51802: MINUS
51803: PUSH
51804: LD_INT 2
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: LIST
51811: PUSH
51812: LD_VAR 0 1
51816: PUSH
51817: LD_INT 4
51819: MINUS
51820: PUSH
51821: LD_VAR 0 2
51825: PUSH
51826: LD_INT 1
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: LIST
51833: PUSH
51834: LD_VAR 0 1
51838: PUSH
51839: LD_VAR 0 2
51843: PUSH
51844: LD_INT 3
51846: PLUS
51847: PUSH
51848: LD_INT 0
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: LIST
51855: PUSH
51856: LD_VAR 0 1
51860: PUSH
51861: LD_INT 4
51863: PLUS
51864: PUSH
51865: LD_VAR 0 2
51869: PUSH
51870: LD_INT 4
51872: PLUS
51873: PUSH
51874: LD_INT 5
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: LIST
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: ST_TO_ADDR
// end ; 2 :
51889: GO 52448
51891: LD_INT 2
51893: DOUBLE
51894: EQUAL
51895: IFTRUE 51899
51897: GO 52028
51899: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51900: LD_ADDR_VAR 0 5
51904: PUSH
51905: LD_VAR 0 1
51909: PUSH
51910: LD_VAR 0 2
51914: PUSH
51915: LD_INT 3
51917: MINUS
51918: PUSH
51919: LD_INT 3
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: LIST
51926: PUSH
51927: LD_VAR 0 1
51931: PUSH
51932: LD_INT 4
51934: PLUS
51935: PUSH
51936: LD_VAR 0 2
51940: PUSH
51941: LD_INT 4
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: LIST
51948: PUSH
51949: LD_VAR 0 1
51953: PUSH
51954: LD_VAR 0 2
51958: PUSH
51959: LD_INT 4
51961: PLUS
51962: PUSH
51963: LD_INT 0
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: LIST
51970: PUSH
51971: LD_VAR 0 1
51975: PUSH
51976: LD_INT 3
51978: MINUS
51979: PUSH
51980: LD_VAR 0 2
51984: PUSH
51985: LD_INT 1
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: LIST
51992: PUSH
51993: LD_VAR 0 1
51997: PUSH
51998: LD_INT 4
52000: MINUS
52001: PUSH
52002: LD_VAR 0 2
52006: PUSH
52007: LD_INT 4
52009: MINUS
52010: PUSH
52011: LD_INT 2
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: LIST
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: ST_TO_ADDR
// end ; 3 :
52026: GO 52448
52028: LD_INT 3
52030: DOUBLE
52031: EQUAL
52032: IFTRUE 52036
52034: GO 52169
52036: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
52037: LD_ADDR_VAR 0 5
52041: PUSH
52042: LD_VAR 0 1
52046: PUSH
52047: LD_INT 3
52049: PLUS
52050: PUSH
52051: LD_VAR 0 2
52055: PUSH
52056: LD_INT 4
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: LIST
52063: PUSH
52064: LD_VAR 0 1
52068: PUSH
52069: LD_INT 4
52071: PLUS
52072: PUSH
52073: LD_VAR 0 2
52077: PUSH
52078: LD_INT 4
52080: PLUS
52081: PUSH
52082: LD_INT 5
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: LIST
52089: PUSH
52090: LD_VAR 0 1
52094: PUSH
52095: LD_INT 4
52097: MINUS
52098: PUSH
52099: LD_VAR 0 2
52103: PUSH
52104: LD_INT 1
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: LIST
52111: PUSH
52112: LD_VAR 0 1
52116: PUSH
52117: LD_VAR 0 2
52121: PUSH
52122: LD_INT 4
52124: MINUS
52125: PUSH
52126: LD_INT 3
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: LIST
52133: PUSH
52134: LD_VAR 0 1
52138: PUSH
52139: LD_INT 3
52141: MINUS
52142: PUSH
52143: LD_VAR 0 2
52147: PUSH
52148: LD_INT 3
52150: MINUS
52151: PUSH
52152: LD_INT 2
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: LIST
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: ST_TO_ADDR
// end ; 4 :
52167: GO 52448
52169: LD_INT 4
52171: DOUBLE
52172: EQUAL
52173: IFTRUE 52177
52175: GO 52310
52177: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52178: LD_ADDR_VAR 0 5
52182: PUSH
52183: LD_VAR 0 1
52187: PUSH
52188: LD_VAR 0 2
52192: PUSH
52193: LD_INT 4
52195: PLUS
52196: PUSH
52197: LD_INT 0
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: LIST
52204: PUSH
52205: LD_VAR 0 1
52209: PUSH
52210: LD_INT 3
52212: PLUS
52213: PUSH
52214: LD_VAR 0 2
52218: PUSH
52219: LD_INT 3
52221: PLUS
52222: PUSH
52223: LD_INT 5
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: LIST
52230: PUSH
52231: LD_VAR 0 1
52235: PUSH
52236: LD_INT 4
52238: PLUS
52239: PUSH
52240: LD_VAR 0 2
52244: PUSH
52245: LD_INT 4
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: LIST
52252: PUSH
52253: LD_VAR 0 1
52257: PUSH
52258: LD_VAR 0 2
52262: PUSH
52263: LD_INT 3
52265: MINUS
52266: PUSH
52267: LD_INT 3
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: LIST
52274: PUSH
52275: LD_VAR 0 1
52279: PUSH
52280: LD_INT 4
52282: MINUS
52283: PUSH
52284: LD_VAR 0 2
52288: PUSH
52289: LD_INT 4
52291: MINUS
52292: PUSH
52293: LD_INT 2
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: LIST
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: ST_TO_ADDR
// end ; 5 :
52308: GO 52448
52310: LD_INT 5
52312: DOUBLE
52313: EQUAL
52314: IFTRUE 52318
52316: GO 52447
52318: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52319: LD_ADDR_VAR 0 5
52323: PUSH
52324: LD_VAR 0 1
52328: PUSH
52329: LD_INT 4
52331: MINUS
52332: PUSH
52333: LD_VAR 0 2
52337: PUSH
52338: LD_INT 1
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: LIST
52345: PUSH
52346: LD_VAR 0 1
52350: PUSH
52351: LD_VAR 0 2
52355: PUSH
52356: LD_INT 4
52358: MINUS
52359: PUSH
52360: LD_INT 3
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: LIST
52367: PUSH
52368: LD_VAR 0 1
52372: PUSH
52373: LD_INT 4
52375: PLUS
52376: PUSH
52377: LD_VAR 0 2
52381: PUSH
52382: LD_INT 4
52384: PLUS
52385: PUSH
52386: LD_INT 5
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: LIST
52393: PUSH
52394: LD_VAR 0 1
52398: PUSH
52399: LD_INT 3
52401: PLUS
52402: PUSH
52403: LD_VAR 0 2
52407: PUSH
52408: LD_INT 4
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: LIST
52415: PUSH
52416: LD_VAR 0 1
52420: PUSH
52421: LD_VAR 0 2
52425: PUSH
52426: LD_INT 3
52428: PLUS
52429: PUSH
52430: LD_INT 0
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: LIST
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: ST_TO_ADDR
// end ; end ;
52445: GO 52448
52447: POP
// result := list ;
52448: LD_ADDR_VAR 0 4
52452: PUSH
52453: LD_VAR 0 5
52457: ST_TO_ADDR
// end ;
52458: LD_VAR 0 4
52462: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52463: LD_INT 0
52465: PPUSH
52466: PPUSH
52467: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52468: LD_VAR 0 1
52472: NOT
52473: PUSH
52474: LD_VAR 0 2
52478: PUSH
52479: LD_INT 1
52481: PUSH
52482: LD_INT 2
52484: PUSH
52485: LD_INT 3
52487: PUSH
52488: LD_INT 4
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: IN
52497: NOT
52498: OR
52499: IFFALSE 52503
// exit ;
52501: GO 52586
// tmp := [ ] ;
52503: LD_ADDR_VAR 0 5
52507: PUSH
52508: EMPTY
52509: ST_TO_ADDR
// for i in units do
52510: LD_ADDR_VAR 0 4
52514: PUSH
52515: LD_VAR 0 1
52519: PUSH
52520: FOR_IN
52521: IFFALSE 52555
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
52523: LD_ADDR_VAR 0 5
52527: PUSH
52528: LD_VAR 0 5
52532: PPUSH
52533: LD_VAR 0 4
52537: PPUSH
52538: LD_VAR 0 2
52542: PPUSH
52543: CALL_OW 259
52547: PPUSH
52548: CALL 53946 0 2
52552: ST_TO_ADDR
52553: GO 52520
52555: POP
52556: POP
// if not tmp then
52557: LD_VAR 0 5
52561: NOT
52562: IFFALSE 52566
// exit ;
52564: GO 52586
// result := SortListByListDesc ( units , tmp ) ;
52566: LD_ADDR_VAR 0 3
52570: PUSH
52571: LD_VAR 0 1
52575: PPUSH
52576: LD_VAR 0 5
52580: PPUSH
52581: CALL_OW 77
52585: ST_TO_ADDR
// end ;
52586: LD_VAR 0 3
52590: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52591: LD_INT 0
52593: PPUSH
52594: PPUSH
52595: PPUSH
// result := false ;
52596: LD_ADDR_VAR 0 3
52600: PUSH
52601: LD_INT 0
52603: ST_TO_ADDR
// if not building then
52604: LD_VAR 0 2
52608: NOT
52609: IFFALSE 52613
// exit ;
52611: GO 52751
// x := GetX ( building ) ;
52613: LD_ADDR_VAR 0 4
52617: PUSH
52618: LD_VAR 0 2
52622: PPUSH
52623: CALL_OW 250
52627: ST_TO_ADDR
// y := GetY ( building ) ;
52628: LD_ADDR_VAR 0 5
52632: PUSH
52633: LD_VAR 0 2
52637: PPUSH
52638: CALL_OW 251
52642: ST_TO_ADDR
// if not x or not y then
52643: LD_VAR 0 4
52647: NOT
52648: PUSH
52649: LD_VAR 0 5
52653: NOT
52654: OR
52655: IFFALSE 52659
// exit ;
52657: GO 52751
// if GetTaskList ( unit ) then
52659: LD_VAR 0 1
52663: PPUSH
52664: CALL_OW 437
52668: IFFALSE 52751
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52670: LD_STRING e
52672: PUSH
52673: LD_VAR 0 1
52677: PPUSH
52678: CALL_OW 437
52682: PUSH
52683: LD_INT 1
52685: ARRAY
52686: PUSH
52687: LD_INT 1
52689: ARRAY
52690: EQUAL
52691: PUSH
52692: LD_VAR 0 4
52696: PUSH
52697: LD_VAR 0 1
52701: PPUSH
52702: CALL_OW 437
52706: PUSH
52707: LD_INT 1
52709: ARRAY
52710: PUSH
52711: LD_INT 2
52713: ARRAY
52714: EQUAL
52715: AND
52716: PUSH
52717: LD_VAR 0 5
52721: PUSH
52722: LD_VAR 0 1
52726: PPUSH
52727: CALL_OW 437
52731: PUSH
52732: LD_INT 1
52734: ARRAY
52735: PUSH
52736: LD_INT 3
52738: ARRAY
52739: EQUAL
52740: AND
52741: IFFALSE 52751
// result := true end ;
52743: LD_ADDR_VAR 0 3
52747: PUSH
52748: LD_INT 1
52750: ST_TO_ADDR
// end ;
52751: LD_VAR 0 3
52755: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
52756: LD_INT 0
52758: PPUSH
// result := false ;
52759: LD_ADDR_VAR 0 4
52763: PUSH
52764: LD_INT 0
52766: ST_TO_ADDR
// if GetTaskList ( unit ) then
52767: LD_VAR 0 1
52771: PPUSH
52772: CALL_OW 437
52776: IFFALSE 52859
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52778: LD_STRING M
52780: PUSH
52781: LD_VAR 0 1
52785: PPUSH
52786: CALL_OW 437
52790: PUSH
52791: LD_INT 1
52793: ARRAY
52794: PUSH
52795: LD_INT 1
52797: ARRAY
52798: EQUAL
52799: PUSH
52800: LD_VAR 0 2
52804: PUSH
52805: LD_VAR 0 1
52809: PPUSH
52810: CALL_OW 437
52814: PUSH
52815: LD_INT 1
52817: ARRAY
52818: PUSH
52819: LD_INT 2
52821: ARRAY
52822: EQUAL
52823: AND
52824: PUSH
52825: LD_VAR 0 3
52829: PUSH
52830: LD_VAR 0 1
52834: PPUSH
52835: CALL_OW 437
52839: PUSH
52840: LD_INT 1
52842: ARRAY
52843: PUSH
52844: LD_INT 3
52846: ARRAY
52847: EQUAL
52848: AND
52849: IFFALSE 52859
// result := true ;
52851: LD_ADDR_VAR 0 4
52855: PUSH
52856: LD_INT 1
52858: ST_TO_ADDR
// end ; end ;
52859: LD_VAR 0 4
52863: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
52864: LD_INT 0
52866: PPUSH
52867: PPUSH
52868: PPUSH
52869: PPUSH
// if not unit or not area then
52870: LD_VAR 0 1
52874: NOT
52875: PUSH
52876: LD_VAR 0 2
52880: NOT
52881: OR
52882: IFFALSE 52886
// exit ;
52884: GO 53049
// tmp := AreaToList ( area , i ) ;
52886: LD_ADDR_VAR 0 6
52890: PUSH
52891: LD_VAR 0 2
52895: PPUSH
52896: LD_VAR 0 5
52900: PPUSH
52901: CALL_OW 517
52905: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52906: LD_ADDR_VAR 0 5
52910: PUSH
52911: DOUBLE
52912: LD_INT 1
52914: DEC
52915: ST_TO_ADDR
52916: LD_VAR 0 6
52920: PUSH
52921: LD_INT 1
52923: ARRAY
52924: PUSH
52925: FOR_TO
52926: IFFALSE 53047
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52928: LD_ADDR_VAR 0 7
52932: PUSH
52933: LD_VAR 0 6
52937: PUSH
52938: LD_INT 1
52940: ARRAY
52941: PUSH
52942: LD_VAR 0 5
52946: ARRAY
52947: PUSH
52948: LD_VAR 0 6
52952: PUSH
52953: LD_INT 2
52955: ARRAY
52956: PUSH
52957: LD_VAR 0 5
52961: ARRAY
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
52967: LD_INT 92
52969: PUSH
52970: LD_VAR 0 7
52974: PUSH
52975: LD_INT 1
52977: ARRAY
52978: PUSH
52979: LD_VAR 0 7
52983: PUSH
52984: LD_INT 2
52986: ARRAY
52987: PUSH
52988: LD_INT 3
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: PPUSH
52997: CALL_OW 69
53001: PUSH
53002: LD_INT 0
53004: EQUAL
53005: IFFALSE 53045
// begin PlaceUnitArea ( unit , area , mode ) ;
53007: LD_VAR 0 1
53011: PPUSH
53012: LD_VAR 0 2
53016: PPUSH
53017: LD_VAR 0 3
53021: PPUSH
53022: CALL_OW 49
// result := IsPlaced ( unit ) ;
53026: LD_ADDR_VAR 0 4
53030: PUSH
53031: LD_VAR 0 1
53035: PPUSH
53036: CALL_OW 305
53040: ST_TO_ADDR
// exit ;
53041: POP
53042: POP
53043: GO 53049
// end ; end ;
53045: GO 52925
53047: POP
53048: POP
// end ;
53049: LD_VAR 0 4
53053: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
53054: LD_INT 0
53056: PPUSH
53057: PPUSH
53058: PPUSH
// if not side or side > 8 then
53059: LD_VAR 0 1
53063: NOT
53064: PUSH
53065: LD_VAR 0 1
53069: PUSH
53070: LD_INT 8
53072: GREATER
53073: OR
53074: IFFALSE 53078
// exit ;
53076: GO 53265
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53078: LD_ADDR_VAR 0 4
53082: PUSH
53083: LD_INT 22
53085: PUSH
53086: LD_VAR 0 1
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 21
53097: PUSH
53098: LD_INT 3
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PPUSH
53109: CALL_OW 69
53113: ST_TO_ADDR
// if not tmp then
53114: LD_VAR 0 4
53118: NOT
53119: IFFALSE 53123
// exit ;
53121: GO 53265
// enable_addtolog := true ;
53123: LD_ADDR_OWVAR 81
53127: PUSH
53128: LD_INT 1
53130: ST_TO_ADDR
// AddToLog ( [ ) ;
53131: LD_STRING [
53133: PPUSH
53134: CALL_OW 561
// for i in tmp do
53138: LD_ADDR_VAR 0 3
53142: PUSH
53143: LD_VAR 0 4
53147: PUSH
53148: FOR_IN
53149: IFFALSE 53256
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53151: LD_STRING [
53153: PUSH
53154: LD_VAR 0 3
53158: PPUSH
53159: CALL_OW 266
53163: STR
53164: PUSH
53165: LD_STRING , 
53167: STR
53168: PUSH
53169: LD_VAR 0 3
53173: PPUSH
53174: CALL_OW 250
53178: STR
53179: PUSH
53180: LD_STRING , 
53182: STR
53183: PUSH
53184: LD_VAR 0 3
53188: PPUSH
53189: CALL_OW 251
53193: STR
53194: PUSH
53195: LD_STRING , 
53197: STR
53198: PUSH
53199: LD_VAR 0 3
53203: PPUSH
53204: CALL_OW 254
53208: STR
53209: PUSH
53210: LD_STRING , 
53212: STR
53213: PUSH
53214: LD_VAR 0 3
53218: PPUSH
53219: LD_INT 1
53221: PPUSH
53222: CALL_OW 268
53226: STR
53227: PUSH
53228: LD_STRING , 
53230: STR
53231: PUSH
53232: LD_VAR 0 3
53236: PPUSH
53237: LD_INT 2
53239: PPUSH
53240: CALL_OW 268
53244: STR
53245: PUSH
53246: LD_STRING ],
53248: STR
53249: PPUSH
53250: CALL_OW 561
// end ;
53254: GO 53148
53256: POP
53257: POP
// AddToLog ( ]; ) ;
53258: LD_STRING ];
53260: PPUSH
53261: CALL_OW 561
// end ;
53265: LD_VAR 0 2
53269: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53270: LD_INT 0
53272: PPUSH
53273: PPUSH
53274: PPUSH
53275: PPUSH
53276: PPUSH
// if not area or not rate or not max then
53277: LD_VAR 0 1
53281: NOT
53282: PUSH
53283: LD_VAR 0 2
53287: NOT
53288: OR
53289: PUSH
53290: LD_VAR 0 4
53294: NOT
53295: OR
53296: IFFALSE 53300
// exit ;
53298: GO 53489
// while 1 do
53300: LD_INT 1
53302: IFFALSE 53489
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53304: LD_ADDR_VAR 0 9
53308: PUSH
53309: LD_VAR 0 1
53313: PPUSH
53314: LD_INT 1
53316: PPUSH
53317: CALL_OW 287
53321: PUSH
53322: LD_INT 10
53324: MUL
53325: ST_TO_ADDR
// r := rate / 10 ;
53326: LD_ADDR_VAR 0 7
53330: PUSH
53331: LD_VAR 0 2
53335: PUSH
53336: LD_INT 10
53338: DIVREAL
53339: ST_TO_ADDR
// time := 1 1$00 ;
53340: LD_ADDR_VAR 0 8
53344: PUSH
53345: LD_INT 2100
53347: ST_TO_ADDR
// if amount < min then
53348: LD_VAR 0 9
53352: PUSH
53353: LD_VAR 0 3
53357: LESS
53358: IFFALSE 53376
// r := r * 2 else
53360: LD_ADDR_VAR 0 7
53364: PUSH
53365: LD_VAR 0 7
53369: PUSH
53370: LD_INT 2
53372: MUL
53373: ST_TO_ADDR
53374: GO 53402
// if amount > max then
53376: LD_VAR 0 9
53380: PUSH
53381: LD_VAR 0 4
53385: GREATER
53386: IFFALSE 53402
// r := r / 2 ;
53388: LD_ADDR_VAR 0 7
53392: PUSH
53393: LD_VAR 0 7
53397: PUSH
53398: LD_INT 2
53400: DIVREAL
53401: ST_TO_ADDR
// time := time / r ;
53402: LD_ADDR_VAR 0 8
53406: PUSH
53407: LD_VAR 0 8
53411: PUSH
53412: LD_VAR 0 7
53416: DIVREAL
53417: ST_TO_ADDR
// if time < 0 then
53418: LD_VAR 0 8
53422: PUSH
53423: LD_INT 0
53425: LESS
53426: IFFALSE 53443
// time := time * - 1 ;
53428: LD_ADDR_VAR 0 8
53432: PUSH
53433: LD_VAR 0 8
53437: PUSH
53438: LD_INT 1
53440: NEG
53441: MUL
53442: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
53443: LD_VAR 0 8
53447: PUSH
53448: LD_INT 35
53450: PPUSH
53451: LD_INT 875
53453: PPUSH
53454: CALL_OW 12
53458: PLUS
53459: PPUSH
53460: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53464: LD_INT 1
53466: PPUSH
53467: LD_INT 5
53469: PPUSH
53470: CALL_OW 12
53474: PPUSH
53475: LD_VAR 0 1
53479: PPUSH
53480: LD_INT 1
53482: PPUSH
53483: CALL_OW 55
// end ;
53487: GO 53300
// end ;
53489: LD_VAR 0 5
53493: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53494: LD_INT 0
53496: PPUSH
53497: PPUSH
53498: PPUSH
53499: PPUSH
53500: PPUSH
53501: PPUSH
53502: PPUSH
53503: PPUSH
// if not turrets or not factories then
53504: LD_VAR 0 1
53508: NOT
53509: PUSH
53510: LD_VAR 0 2
53514: NOT
53515: OR
53516: IFFALSE 53520
// exit ;
53518: GO 53827
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53520: LD_ADDR_VAR 0 10
53524: PUSH
53525: LD_INT 5
53527: PUSH
53528: LD_INT 6
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 2
53537: PUSH
53538: LD_INT 4
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 3
53547: PUSH
53548: LD_INT 5
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 24
53562: PUSH
53563: LD_INT 25
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 23
53572: PUSH
53573: LD_INT 27
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 42
53586: PUSH
53587: LD_INT 43
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 44
53596: PUSH
53597: LD_INT 46
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 45
53606: PUSH
53607: LD_INT 47
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: LIST
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: LIST
53623: ST_TO_ADDR
// result := [ ] ;
53624: LD_ADDR_VAR 0 3
53628: PUSH
53629: EMPTY
53630: ST_TO_ADDR
// for i in turrets do
53631: LD_ADDR_VAR 0 4
53635: PUSH
53636: LD_VAR 0 1
53640: PUSH
53641: FOR_IN
53642: IFFALSE 53825
// begin nat := GetNation ( i ) ;
53644: LD_ADDR_VAR 0 7
53648: PUSH
53649: LD_VAR 0 4
53653: PPUSH
53654: CALL_OW 248
53658: ST_TO_ADDR
// weapon := 0 ;
53659: LD_ADDR_VAR 0 8
53663: PUSH
53664: LD_INT 0
53666: ST_TO_ADDR
// if not nat then
53667: LD_VAR 0 7
53671: NOT
53672: IFFALSE 53676
// continue ;
53674: GO 53641
// for j in list [ nat ] do
53676: LD_ADDR_VAR 0 5
53680: PUSH
53681: LD_VAR 0 10
53685: PUSH
53686: LD_VAR 0 7
53690: ARRAY
53691: PUSH
53692: FOR_IN
53693: IFFALSE 53734
// if GetBWeapon ( i ) = j [ 1 ] then
53695: LD_VAR 0 4
53699: PPUSH
53700: CALL_OW 269
53704: PUSH
53705: LD_VAR 0 5
53709: PUSH
53710: LD_INT 1
53712: ARRAY
53713: EQUAL
53714: IFFALSE 53732
// begin weapon := j [ 2 ] ;
53716: LD_ADDR_VAR 0 8
53720: PUSH
53721: LD_VAR 0 5
53725: PUSH
53726: LD_INT 2
53728: ARRAY
53729: ST_TO_ADDR
// break ;
53730: GO 53734
// end ;
53732: GO 53692
53734: POP
53735: POP
// if not weapon then
53736: LD_VAR 0 8
53740: NOT
53741: IFFALSE 53745
// continue ;
53743: GO 53641
// for k in factories do
53745: LD_ADDR_VAR 0 6
53749: PUSH
53750: LD_VAR 0 2
53754: PUSH
53755: FOR_IN
53756: IFFALSE 53821
// begin weapons := AvailableWeaponList ( k ) ;
53758: LD_ADDR_VAR 0 9
53762: PUSH
53763: LD_VAR 0 6
53767: PPUSH
53768: CALL_OW 478
53772: ST_TO_ADDR
// if not weapons then
53773: LD_VAR 0 9
53777: NOT
53778: IFFALSE 53782
// continue ;
53780: GO 53755
// if weapon in weapons then
53782: LD_VAR 0 8
53786: PUSH
53787: LD_VAR 0 9
53791: IN
53792: IFFALSE 53819
// begin result := [ i , weapon ] ;
53794: LD_ADDR_VAR 0 3
53798: PUSH
53799: LD_VAR 0 4
53803: PUSH
53804: LD_VAR 0 8
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: ST_TO_ADDR
// exit ;
53813: POP
53814: POP
53815: POP
53816: POP
53817: GO 53827
// end ; end ;
53819: GO 53755
53821: POP
53822: POP
// end ;
53823: GO 53641
53825: POP
53826: POP
// end ;
53827: LD_VAR 0 3
53831: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
53832: LD_INT 0
53834: PPUSH
// if not side or side > 8 then
53835: LD_VAR 0 3
53839: NOT
53840: PUSH
53841: LD_VAR 0 3
53845: PUSH
53846: LD_INT 8
53848: GREATER
53849: OR
53850: IFFALSE 53854
// exit ;
53852: GO 53913
// if not range then
53854: LD_VAR 0 4
53858: NOT
53859: IFFALSE 53870
// range := - 12 ;
53861: LD_ADDR_VAR 0 4
53865: PUSH
53866: LD_INT 12
53868: NEG
53869: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
53870: LD_VAR 0 1
53874: PPUSH
53875: LD_VAR 0 2
53879: PPUSH
53880: LD_VAR 0 3
53884: PPUSH
53885: LD_VAR 0 4
53889: PPUSH
53890: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
53894: LD_VAR 0 1
53898: PPUSH
53899: LD_VAR 0 2
53903: PPUSH
53904: LD_VAR 0 3
53908: PPUSH
53909: CALL_OW 331
// end ;
53913: LD_VAR 0 5
53917: RET
// export function Video ( mode ) ; begin
53918: LD_INT 0
53920: PPUSH
// ingame_video = mode ;
53921: LD_ADDR_OWVAR 52
53925: PUSH
53926: LD_VAR 0 1
53930: ST_TO_ADDR
// interface_hidden = mode ;
53931: LD_ADDR_OWVAR 54
53935: PUSH
53936: LD_VAR 0 1
53940: ST_TO_ADDR
// end ;
53941: LD_VAR 0 2
53945: RET
// export function Join ( array , element ) ; begin
53946: LD_INT 0
53948: PPUSH
// result := Replace ( array , array + 1 , element ) ;
53949: LD_ADDR_VAR 0 3
53953: PUSH
53954: LD_VAR 0 1
53958: PPUSH
53959: LD_VAR 0 1
53963: PUSH
53964: LD_INT 1
53966: PLUS
53967: PPUSH
53968: LD_VAR 0 2
53972: PPUSH
53973: CALL_OW 1
53977: ST_TO_ADDR
// end ;
53978: LD_VAR 0 3
53982: RET
// export function JoinUnion ( array , element ) ; begin
53983: LD_INT 0
53985: PPUSH
// result := array union element ;
53986: LD_ADDR_VAR 0 3
53990: PUSH
53991: LD_VAR 0 1
53995: PUSH
53996: LD_VAR 0 2
54000: UNION
54001: ST_TO_ADDR
// end ;
54002: LD_VAR 0 3
54006: RET
// export function GetBehemoths ( side ) ; begin
54007: LD_INT 0
54009: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
54010: LD_ADDR_VAR 0 2
54014: PUSH
54015: LD_INT 22
54017: PUSH
54018: LD_VAR 0 1
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 31
54029: PUSH
54030: LD_INT 25
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PPUSH
54041: CALL_OW 69
54045: ST_TO_ADDR
// end ;
54046: LD_VAR 0 2
54050: RET
// export function Shuffle ( array ) ; var i , index ; begin
54051: LD_INT 0
54053: PPUSH
54054: PPUSH
54055: PPUSH
// result := [ ] ;
54056: LD_ADDR_VAR 0 2
54060: PUSH
54061: EMPTY
54062: ST_TO_ADDR
// if not array then
54063: LD_VAR 0 1
54067: NOT
54068: IFFALSE 54072
// exit ;
54070: GO 54171
// Randomize ;
54072: CALL_OW 10
// for i = array downto 1 do
54076: LD_ADDR_VAR 0 3
54080: PUSH
54081: DOUBLE
54082: LD_VAR 0 1
54086: INC
54087: ST_TO_ADDR
54088: LD_INT 1
54090: PUSH
54091: FOR_DOWNTO
54092: IFFALSE 54169
// begin index := rand ( 1 , array ) ;
54094: LD_ADDR_VAR 0 4
54098: PUSH
54099: LD_INT 1
54101: PPUSH
54102: LD_VAR 0 1
54106: PPUSH
54107: CALL_OW 12
54111: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54112: LD_ADDR_VAR 0 2
54116: PUSH
54117: LD_VAR 0 2
54121: PPUSH
54122: LD_VAR 0 2
54126: PUSH
54127: LD_INT 1
54129: PLUS
54130: PPUSH
54131: LD_VAR 0 1
54135: PUSH
54136: LD_VAR 0 4
54140: ARRAY
54141: PPUSH
54142: CALL_OW 2
54146: ST_TO_ADDR
// array := Delete ( array , index ) ;
54147: LD_ADDR_VAR 0 1
54151: PUSH
54152: LD_VAR 0 1
54156: PPUSH
54157: LD_VAR 0 4
54161: PPUSH
54162: CALL_OW 3
54166: ST_TO_ADDR
// end ;
54167: GO 54091
54169: POP
54170: POP
// end ;
54171: LD_VAR 0 2
54175: RET
// export function GetBaseMaterials ( base ) ; begin
54176: LD_INT 0
54178: PPUSH
// result := [ 0 , 0 , 0 ] ;
54179: LD_ADDR_VAR 0 2
54183: PUSH
54184: LD_INT 0
54186: PUSH
54187: LD_INT 0
54189: PUSH
54190: LD_INT 0
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: LIST
54197: ST_TO_ADDR
// if not base then
54198: LD_VAR 0 1
54202: NOT
54203: IFFALSE 54207
// exit ;
54205: GO 54256
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54207: LD_ADDR_VAR 0 2
54211: PUSH
54212: LD_VAR 0 1
54216: PPUSH
54217: LD_INT 1
54219: PPUSH
54220: CALL_OW 275
54224: PUSH
54225: LD_VAR 0 1
54229: PPUSH
54230: LD_INT 2
54232: PPUSH
54233: CALL_OW 275
54237: PUSH
54238: LD_VAR 0 1
54242: PPUSH
54243: LD_INT 3
54245: PPUSH
54246: CALL_OW 275
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: LIST
54255: ST_TO_ADDR
// end ;
54256: LD_VAR 0 2
54260: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
54261: LD_INT 0
54263: PPUSH
54264: PPUSH
// result := array ;
54265: LD_ADDR_VAR 0 3
54269: PUSH
54270: LD_VAR 0 1
54274: ST_TO_ADDR
// if size >= result then
54275: LD_VAR 0 2
54279: PUSH
54280: LD_VAR 0 3
54284: GREATEREQUAL
54285: IFFALSE 54289
// exit ;
54287: GO 54339
// if size then
54289: LD_VAR 0 2
54293: IFFALSE 54339
// for i := array downto size do
54295: LD_ADDR_VAR 0 4
54299: PUSH
54300: DOUBLE
54301: LD_VAR 0 1
54305: INC
54306: ST_TO_ADDR
54307: LD_VAR 0 2
54311: PUSH
54312: FOR_DOWNTO
54313: IFFALSE 54337
// result := Delete ( result , result ) ;
54315: LD_ADDR_VAR 0 3
54319: PUSH
54320: LD_VAR 0 3
54324: PPUSH
54325: LD_VAR 0 3
54329: PPUSH
54330: CALL_OW 3
54334: ST_TO_ADDR
54335: GO 54312
54337: POP
54338: POP
// end ;
54339: LD_VAR 0 3
54343: RET
// export function ComExit ( unit ) ; var tmp ; begin
54344: LD_INT 0
54346: PPUSH
54347: PPUSH
// if not IsInUnit ( unit ) then
54348: LD_VAR 0 1
54352: PPUSH
54353: CALL_OW 310
54357: NOT
54358: IFFALSE 54362
// exit ;
54360: GO 54422
// tmp := IsInUnit ( unit ) ;
54362: LD_ADDR_VAR 0 3
54366: PUSH
54367: LD_VAR 0 1
54371: PPUSH
54372: CALL_OW 310
54376: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
54377: LD_VAR 0 3
54381: PPUSH
54382: CALL_OW 247
54386: PUSH
54387: LD_INT 2
54389: EQUAL
54390: IFFALSE 54403
// ComExitVehicle ( unit ) else
54392: LD_VAR 0 1
54396: PPUSH
54397: CALL_OW 121
54401: GO 54412
// ComExitBuilding ( unit ) ;
54403: LD_VAR 0 1
54407: PPUSH
54408: CALL_OW 122
// result := tmp ;
54412: LD_ADDR_VAR 0 2
54416: PUSH
54417: LD_VAR 0 3
54421: ST_TO_ADDR
// end ;
54422: LD_VAR 0 2
54426: RET
// export function ComExitAll ( units ) ; var i ; begin
54427: LD_INT 0
54429: PPUSH
54430: PPUSH
// if not units then
54431: LD_VAR 0 1
54435: NOT
54436: IFFALSE 54440
// exit ;
54438: GO 54466
// for i in units do
54440: LD_ADDR_VAR 0 3
54444: PUSH
54445: LD_VAR 0 1
54449: PUSH
54450: FOR_IN
54451: IFFALSE 54464
// ComExit ( i ) ;
54453: LD_VAR 0 3
54457: PPUSH
54458: CALL 54344 0 1
54462: GO 54450
54464: POP
54465: POP
// end ;
54466: LD_VAR 0 2
54470: RET
// export function ResetHc ; begin
54471: LD_INT 0
54473: PPUSH
// InitHc ;
54474: CALL_OW 19
// hc_importance := 0 ;
54478: LD_ADDR_OWVAR 32
54482: PUSH
54483: LD_INT 0
54485: ST_TO_ADDR
// end ;
54486: LD_VAR 0 1
54490: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
54491: LD_INT 0
54493: PPUSH
54494: PPUSH
54495: PPUSH
// _x := ( x1 + x2 ) div 2 ;
54496: LD_ADDR_VAR 0 6
54500: PUSH
54501: LD_VAR 0 1
54505: PUSH
54506: LD_VAR 0 3
54510: PLUS
54511: PUSH
54512: LD_INT 2
54514: DIV
54515: ST_TO_ADDR
// if _x < 0 then
54516: LD_VAR 0 6
54520: PUSH
54521: LD_INT 0
54523: LESS
54524: IFFALSE 54541
// _x := _x * - 1 ;
54526: LD_ADDR_VAR 0 6
54530: PUSH
54531: LD_VAR 0 6
54535: PUSH
54536: LD_INT 1
54538: NEG
54539: MUL
54540: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
54541: LD_ADDR_VAR 0 7
54545: PUSH
54546: LD_VAR 0 2
54550: PUSH
54551: LD_VAR 0 4
54555: PLUS
54556: PUSH
54557: LD_INT 2
54559: DIV
54560: ST_TO_ADDR
// if _y < 0 then
54561: LD_VAR 0 7
54565: PUSH
54566: LD_INT 0
54568: LESS
54569: IFFALSE 54586
// _y := _y * - 1 ;
54571: LD_ADDR_VAR 0 7
54575: PUSH
54576: LD_VAR 0 7
54580: PUSH
54581: LD_INT 1
54583: NEG
54584: MUL
54585: ST_TO_ADDR
// result := [ _x , _y ] ;
54586: LD_ADDR_VAR 0 5
54590: PUSH
54591: LD_VAR 0 6
54595: PUSH
54596: LD_VAR 0 7
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: ST_TO_ADDR
// end ;
54605: LD_VAR 0 5
54609: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
54610: LD_INT 0
54612: PPUSH
54613: PPUSH
54614: PPUSH
54615: PPUSH
// task := GetTaskList ( unit ) ;
54616: LD_ADDR_VAR 0 7
54620: PUSH
54621: LD_VAR 0 1
54625: PPUSH
54626: CALL_OW 437
54630: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
54631: LD_VAR 0 7
54635: NOT
54636: PUSH
54637: LD_VAR 0 1
54641: PPUSH
54642: LD_VAR 0 2
54646: PPUSH
54647: CALL_OW 308
54651: NOT
54652: AND
54653: IFFALSE 54657
// exit ;
54655: GO 54775
// if IsInArea ( unit , area ) then
54657: LD_VAR 0 1
54661: PPUSH
54662: LD_VAR 0 2
54666: PPUSH
54667: CALL_OW 308
54671: IFFALSE 54689
// begin ComMoveToArea ( unit , goAway ) ;
54673: LD_VAR 0 1
54677: PPUSH
54678: LD_VAR 0 3
54682: PPUSH
54683: CALL_OW 113
// exit ;
54687: GO 54775
// end ; if task [ 1 ] [ 1 ] <> M then
54689: LD_VAR 0 7
54693: PUSH
54694: LD_INT 1
54696: ARRAY
54697: PUSH
54698: LD_INT 1
54700: ARRAY
54701: PUSH
54702: LD_STRING M
54704: NONEQUAL
54705: IFFALSE 54709
// exit ;
54707: GO 54775
// x := task [ 1 ] [ 2 ] ;
54709: LD_ADDR_VAR 0 5
54713: PUSH
54714: LD_VAR 0 7
54718: PUSH
54719: LD_INT 1
54721: ARRAY
54722: PUSH
54723: LD_INT 2
54725: ARRAY
54726: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
54727: LD_ADDR_VAR 0 6
54731: PUSH
54732: LD_VAR 0 7
54736: PUSH
54737: LD_INT 1
54739: ARRAY
54740: PUSH
54741: LD_INT 3
54743: ARRAY
54744: ST_TO_ADDR
// if InArea ( x , y , area ) then
54745: LD_VAR 0 5
54749: PPUSH
54750: LD_VAR 0 6
54754: PPUSH
54755: LD_VAR 0 2
54759: PPUSH
54760: CALL_OW 309
54764: IFFALSE 54775
// ComStop ( unit ) ;
54766: LD_VAR 0 1
54770: PPUSH
54771: CALL_OW 141
// end ;
54775: LD_VAR 0 4
54779: RET
// export function Abs ( value ) ; begin
54780: LD_INT 0
54782: PPUSH
// result := value ;
54783: LD_ADDR_VAR 0 2
54787: PUSH
54788: LD_VAR 0 1
54792: ST_TO_ADDR
// if value < 0 then
54793: LD_VAR 0 1
54797: PUSH
54798: LD_INT 0
54800: LESS
54801: IFFALSE 54818
// result := value * - 1 ;
54803: LD_ADDR_VAR 0 2
54807: PUSH
54808: LD_VAR 0 1
54812: PUSH
54813: LD_INT 1
54815: NEG
54816: MUL
54817: ST_TO_ADDR
// end ;
54818: LD_VAR 0 2
54822: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
54823: LD_INT 0
54825: PPUSH
54826: PPUSH
54827: PPUSH
54828: PPUSH
54829: PPUSH
54830: PPUSH
54831: PPUSH
54832: PPUSH
// if not unit or not building then
54833: LD_VAR 0 1
54837: NOT
54838: PUSH
54839: LD_VAR 0 2
54843: NOT
54844: OR
54845: IFFALSE 54849
// exit ;
54847: GO 55075
// x := GetX ( building ) ;
54849: LD_ADDR_VAR 0 4
54853: PUSH
54854: LD_VAR 0 2
54858: PPUSH
54859: CALL_OW 250
54863: ST_TO_ADDR
// y := GetY ( building ) ;
54864: LD_ADDR_VAR 0 6
54868: PUSH
54869: LD_VAR 0 2
54873: PPUSH
54874: CALL_OW 251
54878: ST_TO_ADDR
// d := GetDir ( building ) ;
54879: LD_ADDR_VAR 0 8
54883: PUSH
54884: LD_VAR 0 2
54888: PPUSH
54889: CALL_OW 254
54893: ST_TO_ADDR
// r := 4 ;
54894: LD_ADDR_VAR 0 9
54898: PUSH
54899: LD_INT 4
54901: ST_TO_ADDR
// for i := 1 to 5 do
54902: LD_ADDR_VAR 0 10
54906: PUSH
54907: DOUBLE
54908: LD_INT 1
54910: DEC
54911: ST_TO_ADDR
54912: LD_INT 5
54914: PUSH
54915: FOR_TO
54916: IFFALSE 55073
// begin _x := ShiftX ( x , d , r + i ) ;
54918: LD_ADDR_VAR 0 5
54922: PUSH
54923: LD_VAR 0 4
54927: PPUSH
54928: LD_VAR 0 8
54932: PPUSH
54933: LD_VAR 0 9
54937: PUSH
54938: LD_VAR 0 10
54942: PLUS
54943: PPUSH
54944: CALL_OW 272
54948: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
54949: LD_ADDR_VAR 0 7
54953: PUSH
54954: LD_VAR 0 6
54958: PPUSH
54959: LD_VAR 0 8
54963: PPUSH
54964: LD_VAR 0 9
54968: PUSH
54969: LD_VAR 0 10
54973: PLUS
54974: PPUSH
54975: CALL_OW 273
54979: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
54980: LD_VAR 0 5
54984: PPUSH
54985: LD_VAR 0 7
54989: PPUSH
54990: CALL_OW 488
54994: PUSH
54995: LD_VAR 0 5
54999: PPUSH
55000: LD_VAR 0 7
55004: PPUSH
55005: CALL_OW 428
55009: PPUSH
55010: CALL_OW 247
55014: PUSH
55015: LD_INT 3
55017: PUSH
55018: LD_INT 2
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: IN
55025: NOT
55026: AND
55027: IFFALSE 55071
// begin ComMoveXY ( unit , _x , _y ) ;
55029: LD_VAR 0 1
55033: PPUSH
55034: LD_VAR 0 5
55038: PPUSH
55039: LD_VAR 0 7
55043: PPUSH
55044: CALL_OW 111
// result := [ _x , _y ] ;
55048: LD_ADDR_VAR 0 3
55052: PUSH
55053: LD_VAR 0 5
55057: PUSH
55058: LD_VAR 0 7
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: ST_TO_ADDR
// exit ;
55067: POP
55068: POP
55069: GO 55075
// end ; end ;
55071: GO 54915
55073: POP
55074: POP
// end ;
55075: LD_VAR 0 3
55079: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
55080: LD_INT 0
55082: PPUSH
55083: PPUSH
55084: PPUSH
// result := 0 ;
55085: LD_ADDR_VAR 0 3
55089: PUSH
55090: LD_INT 0
55092: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
55093: LD_VAR 0 1
55097: PUSH
55098: LD_INT 0
55100: LESS
55101: PUSH
55102: LD_VAR 0 1
55106: PUSH
55107: LD_INT 8
55109: GREATER
55110: OR
55111: PUSH
55112: LD_VAR 0 2
55116: PUSH
55117: LD_INT 0
55119: LESS
55120: OR
55121: PUSH
55122: LD_VAR 0 2
55126: PUSH
55127: LD_INT 8
55129: GREATER
55130: OR
55131: IFFALSE 55135
// exit ;
55133: GO 55210
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
55135: LD_ADDR_VAR 0 4
55139: PUSH
55140: LD_INT 22
55142: PUSH
55143: LD_VAR 0 2
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PPUSH
55152: CALL_OW 69
55156: PUSH
55157: FOR_IN
55158: IFFALSE 55208
// begin un := UnitShoot ( i ) ;
55160: LD_ADDR_VAR 0 5
55164: PUSH
55165: LD_VAR 0 4
55169: PPUSH
55170: CALL_OW 504
55174: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55175: LD_VAR 0 5
55179: PPUSH
55180: CALL_OW 255
55184: PUSH
55185: LD_VAR 0 1
55189: EQUAL
55190: IFFALSE 55206
// begin result := un ;
55192: LD_ADDR_VAR 0 3
55196: PUSH
55197: LD_VAR 0 5
55201: ST_TO_ADDR
// exit ;
55202: POP
55203: POP
55204: GO 55210
// end ; end ;
55206: GO 55157
55208: POP
55209: POP
// end ;
55210: LD_VAR 0 3
55214: RET
// export function GetCargoBay ( units ) ; begin
55215: LD_INT 0
55217: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
55218: LD_ADDR_VAR 0 2
55222: PUSH
55223: LD_VAR 0 1
55227: PPUSH
55228: LD_INT 2
55230: PUSH
55231: LD_INT 34
55233: PUSH
55234: LD_INT 12
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 34
55243: PUSH
55244: LD_INT 51
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 34
55253: PUSH
55254: LD_INT 32
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 34
55263: PUSH
55264: LD_INT 89
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: PPUSH
55278: CALL_OW 72
55282: ST_TO_ADDR
// end ;
55283: LD_VAR 0 2
55287: RET
// export function Negate ( value ) ; begin
55288: LD_INT 0
55290: PPUSH
// result := not value ;
55291: LD_ADDR_VAR 0 2
55295: PUSH
55296: LD_VAR 0 1
55300: NOT
55301: ST_TO_ADDR
// end ;
55302: LD_VAR 0 2
55306: RET
// export function Inc ( value ) ; begin
55307: LD_INT 0
55309: PPUSH
// result := value + 1 ;
55310: LD_ADDR_VAR 0 2
55314: PUSH
55315: LD_VAR 0 1
55319: PUSH
55320: LD_INT 1
55322: PLUS
55323: ST_TO_ADDR
// end ;
55324: LD_VAR 0 2
55328: RET
// export function Dec ( value ) ; begin
55329: LD_INT 0
55331: PPUSH
// result := value - 1 ;
55332: LD_ADDR_VAR 0 2
55336: PUSH
55337: LD_VAR 0 1
55341: PUSH
55342: LD_INT 1
55344: MINUS
55345: ST_TO_ADDR
// end ;
55346: LD_VAR 0 2
55350: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
55351: LD_INT 0
55353: PPUSH
55354: PPUSH
55355: PPUSH
55356: PPUSH
55357: PPUSH
55358: PPUSH
55359: PPUSH
55360: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
55361: LD_VAR 0 1
55365: PPUSH
55366: LD_VAR 0 2
55370: PPUSH
55371: CALL_OW 488
55375: NOT
55376: PUSH
55377: LD_VAR 0 3
55381: PPUSH
55382: LD_VAR 0 4
55386: PPUSH
55387: CALL_OW 488
55391: NOT
55392: OR
55393: IFFALSE 55406
// begin result := - 1 ;
55395: LD_ADDR_VAR 0 5
55399: PUSH
55400: LD_INT 1
55402: NEG
55403: ST_TO_ADDR
// exit ;
55404: GO 55641
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
55406: LD_ADDR_VAR 0 12
55410: PUSH
55411: LD_VAR 0 1
55415: PPUSH
55416: LD_VAR 0 2
55420: PPUSH
55421: LD_VAR 0 3
55425: PPUSH
55426: LD_VAR 0 4
55430: PPUSH
55431: CALL 54491 0 4
55435: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
55436: LD_ADDR_VAR 0 11
55440: PUSH
55441: LD_VAR 0 1
55445: PPUSH
55446: LD_VAR 0 2
55450: PPUSH
55451: LD_VAR 0 12
55455: PUSH
55456: LD_INT 1
55458: ARRAY
55459: PPUSH
55460: LD_VAR 0 12
55464: PUSH
55465: LD_INT 2
55467: ARRAY
55468: PPUSH
55469: CALL_OW 298
55473: ST_TO_ADDR
// distance := 9999 ;
55474: LD_ADDR_VAR 0 10
55478: PUSH
55479: LD_INT 9999
55481: ST_TO_ADDR
// for i := 0 to 5 do
55482: LD_ADDR_VAR 0 6
55486: PUSH
55487: DOUBLE
55488: LD_INT 0
55490: DEC
55491: ST_TO_ADDR
55492: LD_INT 5
55494: PUSH
55495: FOR_TO
55496: IFFALSE 55639
// begin _x := ShiftX ( x1 , i , centerDist ) ;
55498: LD_ADDR_VAR 0 7
55502: PUSH
55503: LD_VAR 0 1
55507: PPUSH
55508: LD_VAR 0 6
55512: PPUSH
55513: LD_VAR 0 11
55517: PPUSH
55518: CALL_OW 272
55522: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
55523: LD_ADDR_VAR 0 8
55527: PUSH
55528: LD_VAR 0 2
55532: PPUSH
55533: LD_VAR 0 6
55537: PPUSH
55538: LD_VAR 0 11
55542: PPUSH
55543: CALL_OW 273
55547: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55548: LD_VAR 0 7
55552: PPUSH
55553: LD_VAR 0 8
55557: PPUSH
55558: CALL_OW 488
55562: NOT
55563: IFFALSE 55567
// continue ;
55565: GO 55495
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
55567: LD_ADDR_VAR 0 9
55571: PUSH
55572: LD_VAR 0 12
55576: PUSH
55577: LD_INT 1
55579: ARRAY
55580: PPUSH
55581: LD_VAR 0 12
55585: PUSH
55586: LD_INT 2
55588: ARRAY
55589: PPUSH
55590: LD_VAR 0 7
55594: PPUSH
55595: LD_VAR 0 8
55599: PPUSH
55600: CALL_OW 298
55604: ST_TO_ADDR
// if tmp < distance then
55605: LD_VAR 0 9
55609: PUSH
55610: LD_VAR 0 10
55614: LESS
55615: IFFALSE 55637
// begin result := i ;
55617: LD_ADDR_VAR 0 5
55621: PUSH
55622: LD_VAR 0 6
55626: ST_TO_ADDR
// distance := tmp ;
55627: LD_ADDR_VAR 0 10
55631: PUSH
55632: LD_VAR 0 9
55636: ST_TO_ADDR
// end ; end ;
55637: GO 55495
55639: POP
55640: POP
// end ;
55641: LD_VAR 0 5
55645: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55646: LD_INT 0
55648: PPUSH
55649: PPUSH
// if not driver or not IsInUnit ( driver ) then
55650: LD_VAR 0 1
55654: NOT
55655: PUSH
55656: LD_VAR 0 1
55660: PPUSH
55661: CALL_OW 310
55665: NOT
55666: OR
55667: IFFALSE 55671
// exit ;
55669: GO 55761
// vehicle := IsInUnit ( driver ) ;
55671: LD_ADDR_VAR 0 3
55675: PUSH
55676: LD_VAR 0 1
55680: PPUSH
55681: CALL_OW 310
55685: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55686: LD_VAR 0 1
55690: PPUSH
55691: LD_STRING \
55693: PUSH
55694: LD_INT 0
55696: PUSH
55697: LD_INT 0
55699: PUSH
55700: LD_INT 0
55702: PUSH
55703: LD_INT 0
55705: PUSH
55706: LD_INT 0
55708: PUSH
55709: LD_INT 0
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: PUSH
55721: LD_STRING E
55723: PUSH
55724: LD_INT 0
55726: PUSH
55727: LD_INT 0
55729: PUSH
55730: LD_VAR 0 3
55734: PUSH
55735: LD_INT 0
55737: PUSH
55738: LD_INT 0
55740: PUSH
55741: LD_INT 0
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PPUSH
55757: CALL_OW 446
// end ;
55761: LD_VAR 0 2
55765: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55766: LD_INT 0
55768: PPUSH
55769: PPUSH
// if not driver or not IsInUnit ( driver ) then
55770: LD_VAR 0 1
55774: NOT
55775: PUSH
55776: LD_VAR 0 1
55780: PPUSH
55781: CALL_OW 310
55785: NOT
55786: OR
55787: IFFALSE 55791
// exit ;
55789: GO 55881
// vehicle := IsInUnit ( driver ) ;
55791: LD_ADDR_VAR 0 3
55795: PUSH
55796: LD_VAR 0 1
55800: PPUSH
55801: CALL_OW 310
55805: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55806: LD_VAR 0 1
55810: PPUSH
55811: LD_STRING \
55813: PUSH
55814: LD_INT 0
55816: PUSH
55817: LD_INT 0
55819: PUSH
55820: LD_INT 0
55822: PUSH
55823: LD_INT 0
55825: PUSH
55826: LD_INT 0
55828: PUSH
55829: LD_INT 0
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: PUSH
55841: LD_STRING E
55843: PUSH
55844: LD_INT 0
55846: PUSH
55847: LD_INT 0
55849: PUSH
55850: LD_VAR 0 3
55854: PUSH
55855: LD_INT 0
55857: PUSH
55858: LD_INT 0
55860: PUSH
55861: LD_INT 0
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PPUSH
55877: CALL_OW 447
// end ;
55881: LD_VAR 0 2
55885: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
55886: LD_INT 0
55888: PPUSH
55889: PPUSH
55890: PPUSH
// tmp := [ ] ;
55891: LD_ADDR_VAR 0 5
55895: PUSH
55896: EMPTY
55897: ST_TO_ADDR
// for i in units do
55898: LD_ADDR_VAR 0 4
55902: PUSH
55903: LD_VAR 0 1
55907: PUSH
55908: FOR_IN
55909: IFFALSE 55947
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
55911: LD_ADDR_VAR 0 5
55915: PUSH
55916: LD_VAR 0 5
55920: PPUSH
55921: LD_VAR 0 5
55925: PUSH
55926: LD_INT 1
55928: PLUS
55929: PPUSH
55930: LD_VAR 0 4
55934: PPUSH
55935: CALL_OW 256
55939: PPUSH
55940: CALL_OW 2
55944: ST_TO_ADDR
55945: GO 55908
55947: POP
55948: POP
// if not tmp then
55949: LD_VAR 0 5
55953: NOT
55954: IFFALSE 55958
// exit ;
55956: GO 56006
// if asc then
55958: LD_VAR 0 2
55962: IFFALSE 55986
// result := SortListByListAsc ( units , tmp ) else
55964: LD_ADDR_VAR 0 3
55968: PUSH
55969: LD_VAR 0 1
55973: PPUSH
55974: LD_VAR 0 5
55978: PPUSH
55979: CALL_OW 76
55983: ST_TO_ADDR
55984: GO 56006
// result := SortListByListDesc ( units , tmp ) ;
55986: LD_ADDR_VAR 0 3
55990: PUSH
55991: LD_VAR 0 1
55995: PPUSH
55996: LD_VAR 0 5
56000: PPUSH
56001: CALL_OW 77
56005: ST_TO_ADDR
// end ;
56006: LD_VAR 0 3
56010: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
56011: LD_INT 0
56013: PPUSH
56014: PPUSH
// task := GetTaskList ( mech ) ;
56015: LD_ADDR_VAR 0 4
56019: PUSH
56020: LD_VAR 0 1
56024: PPUSH
56025: CALL_OW 437
56029: ST_TO_ADDR
// if not task then
56030: LD_VAR 0 4
56034: NOT
56035: IFFALSE 56039
// exit ;
56037: GO 56081
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
56039: LD_ADDR_VAR 0 3
56043: PUSH
56044: LD_VAR 0 4
56048: PUSH
56049: LD_INT 1
56051: ARRAY
56052: PUSH
56053: LD_INT 1
56055: ARRAY
56056: PUSH
56057: LD_STRING r
56059: EQUAL
56060: PUSH
56061: LD_VAR 0 4
56065: PUSH
56066: LD_INT 1
56068: ARRAY
56069: PUSH
56070: LD_INT 4
56072: ARRAY
56073: PUSH
56074: LD_VAR 0 2
56078: EQUAL
56079: AND
56080: ST_TO_ADDR
// end ;
56081: LD_VAR 0 3
56085: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
56086: LD_INT 0
56088: PPUSH
// SetDir ( unit , d ) ;
56089: LD_VAR 0 1
56093: PPUSH
56094: LD_VAR 0 4
56098: PPUSH
56099: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
56103: LD_VAR 0 1
56107: PPUSH
56108: LD_VAR 0 2
56112: PPUSH
56113: LD_VAR 0 3
56117: PPUSH
56118: LD_VAR 0 5
56122: PPUSH
56123: CALL_OW 48
// end ;
56127: LD_VAR 0 6
56131: RET
// export function ToNaturalNumber ( number ) ; begin
56132: LD_INT 0
56134: PPUSH
// result := number div 1 ;
56135: LD_ADDR_VAR 0 2
56139: PUSH
56140: LD_VAR 0 1
56144: PUSH
56145: LD_INT 1
56147: DIV
56148: ST_TO_ADDR
// if number < 0 then
56149: LD_VAR 0 1
56153: PUSH
56154: LD_INT 0
56156: LESS
56157: IFFALSE 56167
// result := 0 ;
56159: LD_ADDR_VAR 0 2
56163: PUSH
56164: LD_INT 0
56166: ST_TO_ADDR
// end ;
56167: LD_VAR 0 2
56171: RET
// export function SortByClass ( units , class ) ; var un ; begin
56172: LD_INT 0
56174: PPUSH
56175: PPUSH
// if not units or not class then
56176: LD_VAR 0 1
56180: NOT
56181: PUSH
56182: LD_VAR 0 2
56186: NOT
56187: OR
56188: IFFALSE 56192
// exit ;
56190: GO 56287
// result := [ ] ;
56192: LD_ADDR_VAR 0 3
56196: PUSH
56197: EMPTY
56198: ST_TO_ADDR
// for un in units do
56199: LD_ADDR_VAR 0 4
56203: PUSH
56204: LD_VAR 0 1
56208: PUSH
56209: FOR_IN
56210: IFFALSE 56285
// if GetClass ( un ) = class then
56212: LD_VAR 0 4
56216: PPUSH
56217: CALL_OW 257
56221: PUSH
56222: LD_VAR 0 2
56226: EQUAL
56227: IFFALSE 56254
// result := Insert ( result , 1 , un ) else
56229: LD_ADDR_VAR 0 3
56233: PUSH
56234: LD_VAR 0 3
56238: PPUSH
56239: LD_INT 1
56241: PPUSH
56242: LD_VAR 0 4
56246: PPUSH
56247: CALL_OW 2
56251: ST_TO_ADDR
56252: GO 56283
// result := Replace ( result , result + 1 , un ) ;
56254: LD_ADDR_VAR 0 3
56258: PUSH
56259: LD_VAR 0 3
56263: PPUSH
56264: LD_VAR 0 3
56268: PUSH
56269: LD_INT 1
56271: PLUS
56272: PPUSH
56273: LD_VAR 0 4
56277: PPUSH
56278: CALL_OW 1
56282: ST_TO_ADDR
56283: GO 56209
56285: POP
56286: POP
// end ;
56287: LD_VAR 0 3
56291: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
56292: LD_INT 0
56294: PPUSH
56295: PPUSH
56296: PPUSH
56297: PPUSH
56298: PPUSH
56299: PPUSH
56300: PPUSH
// result := [ ] ;
56301: LD_ADDR_VAR 0 4
56305: PUSH
56306: EMPTY
56307: ST_TO_ADDR
// if x - r < 0 then
56308: LD_VAR 0 1
56312: PUSH
56313: LD_VAR 0 3
56317: MINUS
56318: PUSH
56319: LD_INT 0
56321: LESS
56322: IFFALSE 56334
// min_x := 0 else
56324: LD_ADDR_VAR 0 8
56328: PUSH
56329: LD_INT 0
56331: ST_TO_ADDR
56332: GO 56350
// min_x := x - r ;
56334: LD_ADDR_VAR 0 8
56338: PUSH
56339: LD_VAR 0 1
56343: PUSH
56344: LD_VAR 0 3
56348: MINUS
56349: ST_TO_ADDR
// if y - r < 0 then
56350: LD_VAR 0 2
56354: PUSH
56355: LD_VAR 0 3
56359: MINUS
56360: PUSH
56361: LD_INT 0
56363: LESS
56364: IFFALSE 56376
// min_y := 0 else
56366: LD_ADDR_VAR 0 7
56370: PUSH
56371: LD_INT 0
56373: ST_TO_ADDR
56374: GO 56392
// min_y := y - r ;
56376: LD_ADDR_VAR 0 7
56380: PUSH
56381: LD_VAR 0 2
56385: PUSH
56386: LD_VAR 0 3
56390: MINUS
56391: ST_TO_ADDR
// max_x := x + r ;
56392: LD_ADDR_VAR 0 9
56396: PUSH
56397: LD_VAR 0 1
56401: PUSH
56402: LD_VAR 0 3
56406: PLUS
56407: ST_TO_ADDR
// max_y := y + r ;
56408: LD_ADDR_VAR 0 10
56412: PUSH
56413: LD_VAR 0 2
56417: PUSH
56418: LD_VAR 0 3
56422: PLUS
56423: ST_TO_ADDR
// for _x = min_x to max_x do
56424: LD_ADDR_VAR 0 5
56428: PUSH
56429: DOUBLE
56430: LD_VAR 0 8
56434: DEC
56435: ST_TO_ADDR
56436: LD_VAR 0 9
56440: PUSH
56441: FOR_TO
56442: IFFALSE 56543
// for _y = min_y to max_y do
56444: LD_ADDR_VAR 0 6
56448: PUSH
56449: DOUBLE
56450: LD_VAR 0 7
56454: DEC
56455: ST_TO_ADDR
56456: LD_VAR 0 10
56460: PUSH
56461: FOR_TO
56462: IFFALSE 56539
// begin if not ValidHex ( _x , _y ) then
56464: LD_VAR 0 5
56468: PPUSH
56469: LD_VAR 0 6
56473: PPUSH
56474: CALL_OW 488
56478: NOT
56479: IFFALSE 56483
// continue ;
56481: GO 56461
// if GetResourceTypeXY ( _x , _y ) then
56483: LD_VAR 0 5
56487: PPUSH
56488: LD_VAR 0 6
56492: PPUSH
56493: CALL_OW 283
56497: IFFALSE 56537
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
56499: LD_ADDR_VAR 0 4
56503: PUSH
56504: LD_VAR 0 4
56508: PPUSH
56509: LD_VAR 0 4
56513: PUSH
56514: LD_INT 1
56516: PLUS
56517: PPUSH
56518: LD_VAR 0 5
56522: PUSH
56523: LD_VAR 0 6
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PPUSH
56532: CALL_OW 1
56536: ST_TO_ADDR
// end ;
56537: GO 56461
56539: POP
56540: POP
56541: GO 56441
56543: POP
56544: POP
// end ;
56545: LD_VAR 0 4
56549: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
56550: LD_INT 0
56552: PPUSH
56553: PPUSH
56554: PPUSH
56555: PPUSH
56556: PPUSH
56557: PPUSH
56558: PPUSH
56559: PPUSH
// if not units then
56560: LD_VAR 0 1
56564: NOT
56565: IFFALSE 56569
// exit ;
56567: GO 57093
// result := UnitFilter ( units , [ f_ok ] ) ;
56569: LD_ADDR_VAR 0 3
56573: PUSH
56574: LD_VAR 0 1
56578: PPUSH
56579: LD_INT 50
56581: PUSH
56582: EMPTY
56583: LIST
56584: PPUSH
56585: CALL_OW 72
56589: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
56590: LD_ADDR_VAR 0 8
56594: PUSH
56595: LD_VAR 0 1
56599: PUSH
56600: LD_INT 1
56602: ARRAY
56603: PPUSH
56604: CALL_OW 255
56608: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
56609: LD_ADDR_VAR 0 10
56613: PUSH
56614: LD_INT 29
56616: PUSH
56617: LD_INT 91
56619: PUSH
56620: LD_INT 49
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: LIST
56627: ST_TO_ADDR
// if not result then
56628: LD_VAR 0 3
56632: NOT
56633: IFFALSE 56637
// exit ;
56635: GO 57093
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
56637: LD_ADDR_VAR 0 5
56641: PUSH
56642: LD_INT 81
56644: PUSH
56645: LD_VAR 0 8
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PPUSH
56654: CALL_OW 69
56658: ST_TO_ADDR
// for i in result do
56659: LD_ADDR_VAR 0 4
56663: PUSH
56664: LD_VAR 0 3
56668: PUSH
56669: FOR_IN
56670: IFFALSE 57091
// begin tag := GetTag ( i ) + 1 ;
56672: LD_ADDR_VAR 0 9
56676: PUSH
56677: LD_VAR 0 4
56681: PPUSH
56682: CALL_OW 110
56686: PUSH
56687: LD_INT 1
56689: PLUS
56690: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
56691: LD_ADDR_VAR 0 7
56695: PUSH
56696: LD_VAR 0 4
56700: PPUSH
56701: CALL_OW 250
56705: PPUSH
56706: LD_VAR 0 4
56710: PPUSH
56711: CALL_OW 251
56715: PPUSH
56716: LD_INT 6
56718: PPUSH
56719: CALL 56292 0 3
56723: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
56724: LD_VAR 0 4
56728: PPUSH
56729: CALL_OW 247
56733: PUSH
56734: LD_INT 2
56736: EQUAL
56737: PUSH
56738: LD_VAR 0 7
56742: AND
56743: PUSH
56744: LD_VAR 0 4
56748: PPUSH
56749: CALL_OW 264
56753: PUSH
56754: LD_VAR 0 10
56758: IN
56759: NOT
56760: AND
56761: IFFALSE 56800
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
56763: LD_VAR 0 4
56767: PPUSH
56768: LD_VAR 0 7
56772: PUSH
56773: LD_INT 1
56775: ARRAY
56776: PUSH
56777: LD_INT 1
56779: ARRAY
56780: PPUSH
56781: LD_VAR 0 7
56785: PUSH
56786: LD_INT 1
56788: ARRAY
56789: PUSH
56790: LD_INT 2
56792: ARRAY
56793: PPUSH
56794: CALL_OW 116
56798: GO 57089
// if path > tag then
56800: LD_VAR 0 2
56804: PUSH
56805: LD_VAR 0 9
56809: GREATER
56810: IFFALSE 57018
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
56812: LD_ADDR_VAR 0 6
56816: PUSH
56817: LD_VAR 0 5
56821: PPUSH
56822: LD_INT 91
56824: PUSH
56825: LD_VAR 0 4
56829: PUSH
56830: LD_INT 8
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: LIST
56837: PPUSH
56838: CALL_OW 72
56842: ST_TO_ADDR
// if nearEnemy then
56843: LD_VAR 0 6
56847: IFFALSE 56916
// begin if GetWeapon ( i ) = ru_time_lapser then
56849: LD_VAR 0 4
56853: PPUSH
56854: CALL_OW 264
56858: PUSH
56859: LD_INT 49
56861: EQUAL
56862: IFFALSE 56890
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
56864: LD_VAR 0 4
56868: PPUSH
56869: LD_VAR 0 6
56873: PPUSH
56874: LD_VAR 0 4
56878: PPUSH
56879: CALL_OW 74
56883: PPUSH
56884: CALL_OW 112
56888: GO 56914
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
56890: LD_VAR 0 4
56894: PPUSH
56895: LD_VAR 0 6
56899: PPUSH
56900: LD_VAR 0 4
56904: PPUSH
56905: CALL_OW 74
56909: PPUSH
56910: CALL 58018 0 2
// end else
56914: GO 57016
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
56916: LD_VAR 0 4
56920: PPUSH
56921: LD_VAR 0 2
56925: PUSH
56926: LD_VAR 0 9
56930: ARRAY
56931: PUSH
56932: LD_INT 1
56934: ARRAY
56935: PPUSH
56936: LD_VAR 0 2
56940: PUSH
56941: LD_VAR 0 9
56945: ARRAY
56946: PUSH
56947: LD_INT 2
56949: ARRAY
56950: PPUSH
56951: CALL_OW 297
56955: PUSH
56956: LD_INT 6
56958: GREATER
56959: IFFALSE 57002
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
56961: LD_VAR 0 4
56965: PPUSH
56966: LD_VAR 0 2
56970: PUSH
56971: LD_VAR 0 9
56975: ARRAY
56976: PUSH
56977: LD_INT 1
56979: ARRAY
56980: PPUSH
56981: LD_VAR 0 2
56985: PUSH
56986: LD_VAR 0 9
56990: ARRAY
56991: PUSH
56992: LD_INT 2
56994: ARRAY
56995: PPUSH
56996: CALL_OW 114
57000: GO 57016
// SetTag ( i , tag ) ;
57002: LD_VAR 0 4
57006: PPUSH
57007: LD_VAR 0 9
57011: PPUSH
57012: CALL_OW 109
// end else
57016: GO 57089
// if enemy then
57018: LD_VAR 0 5
57022: IFFALSE 57089
// begin if GetWeapon ( i ) = ru_time_lapser then
57024: LD_VAR 0 4
57028: PPUSH
57029: CALL_OW 264
57033: PUSH
57034: LD_INT 49
57036: EQUAL
57037: IFFALSE 57065
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
57039: LD_VAR 0 4
57043: PPUSH
57044: LD_VAR 0 5
57048: PPUSH
57049: LD_VAR 0 4
57053: PPUSH
57054: CALL_OW 74
57058: PPUSH
57059: CALL_OW 112
57063: GO 57089
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57065: LD_VAR 0 4
57069: PPUSH
57070: LD_VAR 0 5
57074: PPUSH
57075: LD_VAR 0 4
57079: PPUSH
57080: CALL_OW 74
57084: PPUSH
57085: CALL 58018 0 2
// end ; end ;
57089: GO 56669
57091: POP
57092: POP
// end ;
57093: LD_VAR 0 3
57097: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
57098: LD_INT 0
57100: PPUSH
57101: PPUSH
57102: PPUSH
// if not unit or IsInUnit ( unit ) then
57103: LD_VAR 0 1
57107: NOT
57108: PUSH
57109: LD_VAR 0 1
57113: PPUSH
57114: CALL_OW 310
57118: OR
57119: IFFALSE 57123
// exit ;
57121: GO 57214
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
57123: LD_ADDR_VAR 0 4
57127: PUSH
57128: LD_VAR 0 1
57132: PPUSH
57133: CALL_OW 250
57137: PPUSH
57138: LD_VAR 0 2
57142: PPUSH
57143: LD_INT 1
57145: PPUSH
57146: CALL_OW 272
57150: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
57151: LD_ADDR_VAR 0 5
57155: PUSH
57156: LD_VAR 0 1
57160: PPUSH
57161: CALL_OW 251
57165: PPUSH
57166: LD_VAR 0 2
57170: PPUSH
57171: LD_INT 1
57173: PPUSH
57174: CALL_OW 273
57178: ST_TO_ADDR
// if ValidHex ( x , y ) then
57179: LD_VAR 0 4
57183: PPUSH
57184: LD_VAR 0 5
57188: PPUSH
57189: CALL_OW 488
57193: IFFALSE 57214
// ComTurnXY ( unit , x , y ) ;
57195: LD_VAR 0 1
57199: PPUSH
57200: LD_VAR 0 4
57204: PPUSH
57205: LD_VAR 0 5
57209: PPUSH
57210: CALL_OW 118
// end ;
57214: LD_VAR 0 3
57218: RET
// export function SeeUnits ( side , units ) ; var i ; begin
57219: LD_INT 0
57221: PPUSH
57222: PPUSH
// result := false ;
57223: LD_ADDR_VAR 0 3
57227: PUSH
57228: LD_INT 0
57230: ST_TO_ADDR
// if not units then
57231: LD_VAR 0 2
57235: NOT
57236: IFFALSE 57240
// exit ;
57238: GO 57285
// for i in units do
57240: LD_ADDR_VAR 0 4
57244: PUSH
57245: LD_VAR 0 2
57249: PUSH
57250: FOR_IN
57251: IFFALSE 57283
// if See ( side , i ) then
57253: LD_VAR 0 1
57257: PPUSH
57258: LD_VAR 0 4
57262: PPUSH
57263: CALL_OW 292
57267: IFFALSE 57281
// begin result := true ;
57269: LD_ADDR_VAR 0 3
57273: PUSH
57274: LD_INT 1
57276: ST_TO_ADDR
// exit ;
57277: POP
57278: POP
57279: GO 57285
// end ;
57281: GO 57250
57283: POP
57284: POP
// end ;
57285: LD_VAR 0 3
57289: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
57290: LD_INT 0
57292: PPUSH
57293: PPUSH
57294: PPUSH
57295: PPUSH
// if not unit or not points then
57296: LD_VAR 0 1
57300: NOT
57301: PUSH
57302: LD_VAR 0 2
57306: NOT
57307: OR
57308: IFFALSE 57312
// exit ;
57310: GO 57402
// dist := 99999 ;
57312: LD_ADDR_VAR 0 5
57316: PUSH
57317: LD_INT 99999
57319: ST_TO_ADDR
// for i in points do
57320: LD_ADDR_VAR 0 4
57324: PUSH
57325: LD_VAR 0 2
57329: PUSH
57330: FOR_IN
57331: IFFALSE 57400
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
57333: LD_ADDR_VAR 0 6
57337: PUSH
57338: LD_VAR 0 1
57342: PPUSH
57343: LD_VAR 0 4
57347: PUSH
57348: LD_INT 1
57350: ARRAY
57351: PPUSH
57352: LD_VAR 0 4
57356: PUSH
57357: LD_INT 2
57359: ARRAY
57360: PPUSH
57361: CALL_OW 297
57365: ST_TO_ADDR
// if tmpDist < dist then
57366: LD_VAR 0 6
57370: PUSH
57371: LD_VAR 0 5
57375: LESS
57376: IFFALSE 57398
// begin result := i ;
57378: LD_ADDR_VAR 0 3
57382: PUSH
57383: LD_VAR 0 4
57387: ST_TO_ADDR
// dist := tmpDist ;
57388: LD_ADDR_VAR 0 5
57392: PUSH
57393: LD_VAR 0 6
57397: ST_TO_ADDR
// end ; end ;
57398: GO 57330
57400: POP
57401: POP
// end ;
57402: LD_VAR 0 3
57406: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
57407: LD_INT 0
57409: PPUSH
// uc_side := side ;
57410: LD_ADDR_OWVAR 20
57414: PUSH
57415: LD_VAR 0 1
57419: ST_TO_ADDR
// uc_nation := 3 ;
57420: LD_ADDR_OWVAR 21
57424: PUSH
57425: LD_INT 3
57427: ST_TO_ADDR
// vc_chassis := 25 ;
57428: LD_ADDR_OWVAR 37
57432: PUSH
57433: LD_INT 25
57435: ST_TO_ADDR
// vc_engine := engine_siberite ;
57436: LD_ADDR_OWVAR 39
57440: PUSH
57441: LD_INT 3
57443: ST_TO_ADDR
// vc_control := control_computer ;
57444: LD_ADDR_OWVAR 38
57448: PUSH
57449: LD_INT 3
57451: ST_TO_ADDR
// vc_weapon := 59 ;
57452: LD_ADDR_OWVAR 40
57456: PUSH
57457: LD_INT 59
57459: ST_TO_ADDR
// result := CreateVehicle ;
57460: LD_ADDR_VAR 0 5
57464: PUSH
57465: CALL_OW 45
57469: ST_TO_ADDR
// SetDir ( result , d ) ;
57470: LD_VAR 0 5
57474: PPUSH
57475: LD_VAR 0 4
57479: PPUSH
57480: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
57484: LD_VAR 0 5
57488: PPUSH
57489: LD_VAR 0 2
57493: PPUSH
57494: LD_VAR 0 3
57498: PPUSH
57499: LD_INT 0
57501: PPUSH
57502: CALL_OW 48
// end ;
57506: LD_VAR 0 5
57510: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
57511: LD_INT 0
57513: PPUSH
57514: PPUSH
57515: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
57516: LD_ADDR_VAR 0 2
57520: PUSH
57521: LD_INT 0
57523: PUSH
57524: LD_INT 0
57526: PUSH
57527: LD_INT 0
57529: PUSH
57530: LD_INT 0
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
57539: LD_VAR 0 1
57543: NOT
57544: PUSH
57545: LD_VAR 0 1
57549: PPUSH
57550: CALL_OW 264
57554: PUSH
57555: LD_INT 12
57557: PUSH
57558: LD_INT 51
57560: PUSH
57561: LD_INT 32
57563: PUSH
57564: LD_INT 89
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: IN
57573: NOT
57574: OR
57575: IFFALSE 57579
// exit ;
57577: GO 57677
// for i := 1 to 3 do
57579: LD_ADDR_VAR 0 3
57583: PUSH
57584: DOUBLE
57585: LD_INT 1
57587: DEC
57588: ST_TO_ADDR
57589: LD_INT 3
57591: PUSH
57592: FOR_TO
57593: IFFALSE 57675
// begin tmp := GetCargo ( cargo , i ) ;
57595: LD_ADDR_VAR 0 4
57599: PUSH
57600: LD_VAR 0 1
57604: PPUSH
57605: LD_VAR 0 3
57609: PPUSH
57610: CALL_OW 289
57614: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
57615: LD_ADDR_VAR 0 2
57619: PUSH
57620: LD_VAR 0 2
57624: PPUSH
57625: LD_VAR 0 3
57629: PPUSH
57630: LD_VAR 0 4
57634: PPUSH
57635: CALL_OW 1
57639: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
57640: LD_ADDR_VAR 0 2
57644: PUSH
57645: LD_VAR 0 2
57649: PPUSH
57650: LD_INT 4
57652: PPUSH
57653: LD_VAR 0 2
57657: PUSH
57658: LD_INT 4
57660: ARRAY
57661: PUSH
57662: LD_VAR 0 4
57666: PLUS
57667: PPUSH
57668: CALL_OW 1
57672: ST_TO_ADDR
// end ;
57673: GO 57592
57675: POP
57676: POP
// end ;
57677: LD_VAR 0 2
57681: RET
// export function Length ( array ) ; begin
57682: LD_INT 0
57684: PPUSH
// result := array + 0 ;
57685: LD_ADDR_VAR 0 2
57689: PUSH
57690: LD_VAR 0 1
57694: PUSH
57695: LD_INT 0
57697: PLUS
57698: ST_TO_ADDR
// end ;
57699: LD_VAR 0 2
57703: RET
// export function PrepareArray ( array ) ; begin
57704: LD_INT 0
57706: PPUSH
// result := array diff 0 ;
57707: LD_ADDR_VAR 0 2
57711: PUSH
57712: LD_VAR 0 1
57716: PUSH
57717: LD_INT 0
57719: DIFF
57720: ST_TO_ADDR
// if not result [ 1 ] then
57721: LD_VAR 0 2
57725: PUSH
57726: LD_INT 1
57728: ARRAY
57729: NOT
57730: IFFALSE 57750
// result := Delete ( result , 1 ) ;
57732: LD_ADDR_VAR 0 2
57736: PUSH
57737: LD_VAR 0 2
57741: PPUSH
57742: LD_INT 1
57744: PPUSH
57745: CALL_OW 3
57749: ST_TO_ADDR
// end ;
57750: LD_VAR 0 2
57754: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
57755: LD_INT 0
57757: PPUSH
57758: PPUSH
57759: PPUSH
57760: PPUSH
// sibRocketRange := 25 ;
57761: LD_ADDR_VAR 0 6
57765: PUSH
57766: LD_INT 25
57768: ST_TO_ADDR
// result := false ;
57769: LD_ADDR_VAR 0 4
57773: PUSH
57774: LD_INT 0
57776: ST_TO_ADDR
// for i := 0 to 5 do
57777: LD_ADDR_VAR 0 5
57781: PUSH
57782: DOUBLE
57783: LD_INT 0
57785: DEC
57786: ST_TO_ADDR
57787: LD_INT 5
57789: PUSH
57790: FOR_TO
57791: IFFALSE 57858
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
57793: LD_VAR 0 1
57797: PPUSH
57798: LD_VAR 0 5
57802: PPUSH
57803: LD_VAR 0 6
57807: PPUSH
57808: CALL_OW 272
57812: PPUSH
57813: LD_VAR 0 2
57817: PPUSH
57818: LD_VAR 0 5
57822: PPUSH
57823: LD_VAR 0 6
57827: PPUSH
57828: CALL_OW 273
57832: PPUSH
57833: LD_VAR 0 3
57837: PPUSH
57838: CALL_OW 309
57842: IFFALSE 57856
// begin result := true ;
57844: LD_ADDR_VAR 0 4
57848: PUSH
57849: LD_INT 1
57851: ST_TO_ADDR
// exit ;
57852: POP
57853: POP
57854: GO 57860
// end ;
57856: GO 57790
57858: POP
57859: POP
// end ;
57860: LD_VAR 0 4
57864: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
57865: LD_INT 0
57867: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
57868: LD_VAR 0 1
57872: PPUSH
57873: LD_VAR 0 2
57877: PPUSH
57878: LD_INT 0
57880: PPUSH
57881: LD_INT 0
57883: PPUSH
57884: LD_INT 1
57886: PPUSH
57887: LD_INT 0
57889: PPUSH
57890: CALL_OW 587
// end ;
57894: LD_VAR 0 3
57898: RET
// export function CenterOnNow ( unit ) ; begin
57899: LD_INT 0
57901: PPUSH
// result := IsInUnit ( unit ) ;
57902: LD_ADDR_VAR 0 2
57906: PUSH
57907: LD_VAR 0 1
57911: PPUSH
57912: CALL_OW 310
57916: ST_TO_ADDR
// if not result then
57917: LD_VAR 0 2
57921: NOT
57922: IFFALSE 57934
// result := unit ;
57924: LD_ADDR_VAR 0 2
57928: PUSH
57929: LD_VAR 0 1
57933: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
57934: LD_VAR 0 1
57938: PPUSH
57939: CALL_OW 87
// end ;
57943: LD_VAR 0 2
57947: RET
// export function ComMoveHex ( unit , hex ) ; begin
57948: LD_INT 0
57950: PPUSH
// if not hex then
57951: LD_VAR 0 2
57955: NOT
57956: IFFALSE 57960
// exit ;
57958: GO 58013
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
57960: LD_VAR 0 2
57964: PUSH
57965: LD_INT 1
57967: ARRAY
57968: PPUSH
57969: LD_VAR 0 2
57973: PUSH
57974: LD_INT 2
57976: ARRAY
57977: PPUSH
57978: CALL_OW 428
57982: IFFALSE 57986
// exit ;
57984: GO 58013
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
57986: LD_VAR 0 1
57990: PPUSH
57991: LD_VAR 0 2
57995: PUSH
57996: LD_INT 1
57998: ARRAY
57999: PPUSH
58000: LD_VAR 0 2
58004: PUSH
58005: LD_INT 2
58007: ARRAY
58008: PPUSH
58009: CALL_OW 111
// end ;
58013: LD_VAR 0 3
58017: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
58018: LD_INT 0
58020: PPUSH
58021: PPUSH
58022: PPUSH
// if not unit or not enemy then
58023: LD_VAR 0 1
58027: NOT
58028: PUSH
58029: LD_VAR 0 2
58033: NOT
58034: OR
58035: IFFALSE 58039
// exit ;
58037: GO 58163
// x := GetX ( enemy ) ;
58039: LD_ADDR_VAR 0 4
58043: PUSH
58044: LD_VAR 0 2
58048: PPUSH
58049: CALL_OW 250
58053: ST_TO_ADDR
// y := GetY ( enemy ) ;
58054: LD_ADDR_VAR 0 5
58058: PUSH
58059: LD_VAR 0 2
58063: PPUSH
58064: CALL_OW 251
58068: ST_TO_ADDR
// if ValidHex ( x , y ) then
58069: LD_VAR 0 4
58073: PPUSH
58074: LD_VAR 0 5
58078: PPUSH
58079: CALL_OW 488
58083: IFFALSE 58163
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
58085: LD_VAR 0 2
58089: PPUSH
58090: CALL_OW 247
58094: PUSH
58095: LD_INT 3
58097: PUSH
58098: LD_INT 2
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: IN
58105: PUSH
58106: LD_VAR 0 1
58110: PPUSH
58111: CALL_OW 255
58115: PPUSH
58116: LD_VAR 0 2
58120: PPUSH
58121: CALL_OW 292
58125: AND
58126: IFFALSE 58144
// ComAttackUnit ( unit , enemy ) else
58128: LD_VAR 0 1
58132: PPUSH
58133: LD_VAR 0 2
58137: PPUSH
58138: CALL_OW 115
58142: GO 58163
// ComAgressiveMove ( unit , x , y ) ;
58144: LD_VAR 0 1
58148: PPUSH
58149: LD_VAR 0 4
58153: PPUSH
58154: LD_VAR 0 5
58158: PPUSH
58159: CALL_OW 114
// end ; end_of_file end_of_file
58163: LD_VAR 0 3
58167: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
58168: LD_VAR 0 1
58172: PPUSH
58173: LD_VAR 0 2
58177: PPUSH
58178: LD_VAR 0 3
58182: PPUSH
58183: LD_VAR 0 4
58187: PPUSH
58188: LD_VAR 0 5
58192: PPUSH
58193: LD_VAR 0 6
58197: PPUSH
58198: CALL 58382 0 6
// end ;
58202: PPOPN 6
58204: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
58205: LD_INT 0
58207: PPUSH
// begin if not units then
58208: LD_VAR 0 1
58212: NOT
58213: IFFALSE 58217
// exit ;
58215: GO 58217
// end ;
58217: PPOPN 7
58219: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
58220: CALL 58286 0 0
// end ; end_of_file
58224: PPOPN 1
58226: END
// export globalGameSaveCounter ; every 0 0$1 do
58227: GO 58229
58229: DISABLE
// begin enable ;
58230: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
58231: LD_STRING updateTimer(
58233: PUSH
58234: LD_OWVAR 1
58238: STR
58239: PUSH
58240: LD_STRING );
58242: STR
58243: PPUSH
58244: CALL_OW 559
// end ;
58248: END
// every 0 0$1 do
58249: GO 58251
58251: DISABLE
// begin globalGameSaveCounter := 0 ;
58252: LD_ADDR_EXP 41
58256: PUSH
58257: LD_INT 0
58259: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
58260: LD_STRING setGameSaveCounter(0)
58262: PPUSH
58263: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
58267: LD_STRING initStreamRollete();
58269: PPUSH
58270: CALL_OW 559
// InitStreamMode ;
58274: CALL 59600 0 0
// DefineStreamItems ( false ) ;
58278: LD_INT 0
58280: PPUSH
58281: CALL 60064 0 1
// end ;
58285: END
// export function SOS_MapStart ( ) ; begin
58286: LD_INT 0
58288: PPUSH
// if streamModeActive then
58289: LD_EXP 42
58293: IFFALSE 58302
// DefineStreamItems ( true ) ;
58295: LD_INT 1
58297: PPUSH
58298: CALL 60064 0 1
// UpdateLuaVariables ( ) ;
58302: CALL 58319 0 0
// UpdateFactoryWaypoints ( ) ;
58306: CALL 72933 0 0
// UpdateWarehouseGatheringPoints ( ) ;
58310: CALL 73190 0 0
// end ;
58314: LD_VAR 0 1
58318: RET
// function UpdateLuaVariables ( ) ; begin
58319: LD_INT 0
58321: PPUSH
// if globalGameSaveCounter then
58322: LD_EXP 41
58326: IFFALSE 58360
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
58328: LD_ADDR_EXP 41
58332: PUSH
58333: LD_EXP 41
58337: PPUSH
58338: CALL 55307 0 1
58342: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
58343: LD_STRING setGameSaveCounter(
58345: PUSH
58346: LD_EXP 41
58350: STR
58351: PUSH
58352: LD_STRING )
58354: STR
58355: PPUSH
58356: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
58360: LD_STRING setGameDifficulty(
58362: PUSH
58363: LD_OWVAR 67
58367: STR
58368: PUSH
58369: LD_STRING )
58371: STR
58372: PPUSH
58373: CALL_OW 559
// end ;
58377: LD_VAR 0 1
58381: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
58382: LD_INT 0
58384: PPUSH
// if p2 = stream_mode then
58385: LD_VAR 0 2
58389: PUSH
58390: LD_INT 100
58392: EQUAL
58393: IFFALSE 59396
// begin if not StreamModeActive then
58395: LD_EXP 42
58399: NOT
58400: IFFALSE 58410
// StreamModeActive := true ;
58402: LD_ADDR_EXP 42
58406: PUSH
58407: LD_INT 1
58409: ST_TO_ADDR
// if p3 = 0 then
58410: LD_VAR 0 3
58414: PUSH
58415: LD_INT 0
58417: EQUAL
58418: IFFALSE 58424
// InitStreamMode ;
58420: CALL 59600 0 0
// if p3 = 1 then
58424: LD_VAR 0 3
58428: PUSH
58429: LD_INT 1
58431: EQUAL
58432: IFFALSE 58442
// sRocket := true ;
58434: LD_ADDR_EXP 47
58438: PUSH
58439: LD_INT 1
58441: ST_TO_ADDR
// if p3 = 2 then
58442: LD_VAR 0 3
58446: PUSH
58447: LD_INT 2
58449: EQUAL
58450: IFFALSE 58460
// sSpeed := true ;
58452: LD_ADDR_EXP 46
58456: PUSH
58457: LD_INT 1
58459: ST_TO_ADDR
// if p3 = 3 then
58460: LD_VAR 0 3
58464: PUSH
58465: LD_INT 3
58467: EQUAL
58468: IFFALSE 58478
// sEngine := true ;
58470: LD_ADDR_EXP 48
58474: PUSH
58475: LD_INT 1
58477: ST_TO_ADDR
// if p3 = 4 then
58478: LD_VAR 0 3
58482: PUSH
58483: LD_INT 4
58485: EQUAL
58486: IFFALSE 58496
// sSpec := true ;
58488: LD_ADDR_EXP 45
58492: PUSH
58493: LD_INT 1
58495: ST_TO_ADDR
// if p3 = 5 then
58496: LD_VAR 0 3
58500: PUSH
58501: LD_INT 5
58503: EQUAL
58504: IFFALSE 58514
// sLevel := true ;
58506: LD_ADDR_EXP 49
58510: PUSH
58511: LD_INT 1
58513: ST_TO_ADDR
// if p3 = 6 then
58514: LD_VAR 0 3
58518: PUSH
58519: LD_INT 6
58521: EQUAL
58522: IFFALSE 58532
// sArmoury := true ;
58524: LD_ADDR_EXP 50
58528: PUSH
58529: LD_INT 1
58531: ST_TO_ADDR
// if p3 = 7 then
58532: LD_VAR 0 3
58536: PUSH
58537: LD_INT 7
58539: EQUAL
58540: IFFALSE 58550
// sRadar := true ;
58542: LD_ADDR_EXP 51
58546: PUSH
58547: LD_INT 1
58549: ST_TO_ADDR
// if p3 = 8 then
58550: LD_VAR 0 3
58554: PUSH
58555: LD_INT 8
58557: EQUAL
58558: IFFALSE 58568
// sBunker := true ;
58560: LD_ADDR_EXP 52
58564: PUSH
58565: LD_INT 1
58567: ST_TO_ADDR
// if p3 = 9 then
58568: LD_VAR 0 3
58572: PUSH
58573: LD_INT 9
58575: EQUAL
58576: IFFALSE 58586
// sHack := true ;
58578: LD_ADDR_EXP 53
58582: PUSH
58583: LD_INT 1
58585: ST_TO_ADDR
// if p3 = 10 then
58586: LD_VAR 0 3
58590: PUSH
58591: LD_INT 10
58593: EQUAL
58594: IFFALSE 58604
// sFire := true ;
58596: LD_ADDR_EXP 54
58600: PUSH
58601: LD_INT 1
58603: ST_TO_ADDR
// if p3 = 11 then
58604: LD_VAR 0 3
58608: PUSH
58609: LD_INT 11
58611: EQUAL
58612: IFFALSE 58622
// sRefresh := true ;
58614: LD_ADDR_EXP 55
58618: PUSH
58619: LD_INT 1
58621: ST_TO_ADDR
// if p3 = 12 then
58622: LD_VAR 0 3
58626: PUSH
58627: LD_INT 12
58629: EQUAL
58630: IFFALSE 58640
// sExp := true ;
58632: LD_ADDR_EXP 56
58636: PUSH
58637: LD_INT 1
58639: ST_TO_ADDR
// if p3 = 13 then
58640: LD_VAR 0 3
58644: PUSH
58645: LD_INT 13
58647: EQUAL
58648: IFFALSE 58658
// sDepot := true ;
58650: LD_ADDR_EXP 57
58654: PUSH
58655: LD_INT 1
58657: ST_TO_ADDR
// if p3 = 14 then
58658: LD_VAR 0 3
58662: PUSH
58663: LD_INT 14
58665: EQUAL
58666: IFFALSE 58676
// sFlag := true ;
58668: LD_ADDR_EXP 58
58672: PUSH
58673: LD_INT 1
58675: ST_TO_ADDR
// if p3 = 15 then
58676: LD_VAR 0 3
58680: PUSH
58681: LD_INT 15
58683: EQUAL
58684: IFFALSE 58694
// sKamikadze := true ;
58686: LD_ADDR_EXP 66
58690: PUSH
58691: LD_INT 1
58693: ST_TO_ADDR
// if p3 = 16 then
58694: LD_VAR 0 3
58698: PUSH
58699: LD_INT 16
58701: EQUAL
58702: IFFALSE 58712
// sTroll := true ;
58704: LD_ADDR_EXP 67
58708: PUSH
58709: LD_INT 1
58711: ST_TO_ADDR
// if p3 = 17 then
58712: LD_VAR 0 3
58716: PUSH
58717: LD_INT 17
58719: EQUAL
58720: IFFALSE 58730
// sSlow := true ;
58722: LD_ADDR_EXP 68
58726: PUSH
58727: LD_INT 1
58729: ST_TO_ADDR
// if p3 = 18 then
58730: LD_VAR 0 3
58734: PUSH
58735: LD_INT 18
58737: EQUAL
58738: IFFALSE 58748
// sLack := true ;
58740: LD_ADDR_EXP 69
58744: PUSH
58745: LD_INT 1
58747: ST_TO_ADDR
// if p3 = 19 then
58748: LD_VAR 0 3
58752: PUSH
58753: LD_INT 19
58755: EQUAL
58756: IFFALSE 58766
// sTank := true ;
58758: LD_ADDR_EXP 71
58762: PUSH
58763: LD_INT 1
58765: ST_TO_ADDR
// if p3 = 20 then
58766: LD_VAR 0 3
58770: PUSH
58771: LD_INT 20
58773: EQUAL
58774: IFFALSE 58784
// sRemote := true ;
58776: LD_ADDR_EXP 72
58780: PUSH
58781: LD_INT 1
58783: ST_TO_ADDR
// if p3 = 21 then
58784: LD_VAR 0 3
58788: PUSH
58789: LD_INT 21
58791: EQUAL
58792: IFFALSE 58802
// sPowell := true ;
58794: LD_ADDR_EXP 73
58798: PUSH
58799: LD_INT 1
58801: ST_TO_ADDR
// if p3 = 22 then
58802: LD_VAR 0 3
58806: PUSH
58807: LD_INT 22
58809: EQUAL
58810: IFFALSE 58820
// sTeleport := true ;
58812: LD_ADDR_EXP 76
58816: PUSH
58817: LD_INT 1
58819: ST_TO_ADDR
// if p3 = 23 then
58820: LD_VAR 0 3
58824: PUSH
58825: LD_INT 23
58827: EQUAL
58828: IFFALSE 58838
// sOilTower := true ;
58830: LD_ADDR_EXP 78
58834: PUSH
58835: LD_INT 1
58837: ST_TO_ADDR
// if p3 = 24 then
58838: LD_VAR 0 3
58842: PUSH
58843: LD_INT 24
58845: EQUAL
58846: IFFALSE 58856
// sShovel := true ;
58848: LD_ADDR_EXP 79
58852: PUSH
58853: LD_INT 1
58855: ST_TO_ADDR
// if p3 = 25 then
58856: LD_VAR 0 3
58860: PUSH
58861: LD_INT 25
58863: EQUAL
58864: IFFALSE 58874
// sSheik := true ;
58866: LD_ADDR_EXP 80
58870: PUSH
58871: LD_INT 1
58873: ST_TO_ADDR
// if p3 = 26 then
58874: LD_VAR 0 3
58878: PUSH
58879: LD_INT 26
58881: EQUAL
58882: IFFALSE 58892
// sEarthquake := true ;
58884: LD_ADDR_EXP 82
58888: PUSH
58889: LD_INT 1
58891: ST_TO_ADDR
// if p3 = 27 then
58892: LD_VAR 0 3
58896: PUSH
58897: LD_INT 27
58899: EQUAL
58900: IFFALSE 58910
// sAI := true ;
58902: LD_ADDR_EXP 83
58906: PUSH
58907: LD_INT 1
58909: ST_TO_ADDR
// if p3 = 28 then
58910: LD_VAR 0 3
58914: PUSH
58915: LD_INT 28
58917: EQUAL
58918: IFFALSE 58928
// sCargo := true ;
58920: LD_ADDR_EXP 86
58924: PUSH
58925: LD_INT 1
58927: ST_TO_ADDR
// if p3 = 29 then
58928: LD_VAR 0 3
58932: PUSH
58933: LD_INT 29
58935: EQUAL
58936: IFFALSE 58946
// sDLaser := true ;
58938: LD_ADDR_EXP 87
58942: PUSH
58943: LD_INT 1
58945: ST_TO_ADDR
// if p3 = 30 then
58946: LD_VAR 0 3
58950: PUSH
58951: LD_INT 30
58953: EQUAL
58954: IFFALSE 58964
// sExchange := true ;
58956: LD_ADDR_EXP 88
58960: PUSH
58961: LD_INT 1
58963: ST_TO_ADDR
// if p3 = 31 then
58964: LD_VAR 0 3
58968: PUSH
58969: LD_INT 31
58971: EQUAL
58972: IFFALSE 58982
// sFac := true ;
58974: LD_ADDR_EXP 89
58978: PUSH
58979: LD_INT 1
58981: ST_TO_ADDR
// if p3 = 32 then
58982: LD_VAR 0 3
58986: PUSH
58987: LD_INT 32
58989: EQUAL
58990: IFFALSE 59000
// sPower := true ;
58992: LD_ADDR_EXP 90
58996: PUSH
58997: LD_INT 1
58999: ST_TO_ADDR
// if p3 = 33 then
59000: LD_VAR 0 3
59004: PUSH
59005: LD_INT 33
59007: EQUAL
59008: IFFALSE 59018
// sRandom := true ;
59010: LD_ADDR_EXP 91
59014: PUSH
59015: LD_INT 1
59017: ST_TO_ADDR
// if p3 = 34 then
59018: LD_VAR 0 3
59022: PUSH
59023: LD_INT 34
59025: EQUAL
59026: IFFALSE 59036
// sShield := true ;
59028: LD_ADDR_EXP 92
59032: PUSH
59033: LD_INT 1
59035: ST_TO_ADDR
// if p3 = 35 then
59036: LD_VAR 0 3
59040: PUSH
59041: LD_INT 35
59043: EQUAL
59044: IFFALSE 59054
// sTime := true ;
59046: LD_ADDR_EXP 93
59050: PUSH
59051: LD_INT 1
59053: ST_TO_ADDR
// if p3 = 36 then
59054: LD_VAR 0 3
59058: PUSH
59059: LD_INT 36
59061: EQUAL
59062: IFFALSE 59072
// sTools := true ;
59064: LD_ADDR_EXP 94
59068: PUSH
59069: LD_INT 1
59071: ST_TO_ADDR
// if p3 = 101 then
59072: LD_VAR 0 3
59076: PUSH
59077: LD_INT 101
59079: EQUAL
59080: IFFALSE 59090
// sSold := true ;
59082: LD_ADDR_EXP 59
59086: PUSH
59087: LD_INT 1
59089: ST_TO_ADDR
// if p3 = 102 then
59090: LD_VAR 0 3
59094: PUSH
59095: LD_INT 102
59097: EQUAL
59098: IFFALSE 59108
// sDiff := true ;
59100: LD_ADDR_EXP 60
59104: PUSH
59105: LD_INT 1
59107: ST_TO_ADDR
// if p3 = 103 then
59108: LD_VAR 0 3
59112: PUSH
59113: LD_INT 103
59115: EQUAL
59116: IFFALSE 59126
// sFog := true ;
59118: LD_ADDR_EXP 63
59122: PUSH
59123: LD_INT 1
59125: ST_TO_ADDR
// if p3 = 104 then
59126: LD_VAR 0 3
59130: PUSH
59131: LD_INT 104
59133: EQUAL
59134: IFFALSE 59144
// sReset := true ;
59136: LD_ADDR_EXP 64
59140: PUSH
59141: LD_INT 1
59143: ST_TO_ADDR
// if p3 = 105 then
59144: LD_VAR 0 3
59148: PUSH
59149: LD_INT 105
59151: EQUAL
59152: IFFALSE 59162
// sSun := true ;
59154: LD_ADDR_EXP 65
59158: PUSH
59159: LD_INT 1
59161: ST_TO_ADDR
// if p3 = 106 then
59162: LD_VAR 0 3
59166: PUSH
59167: LD_INT 106
59169: EQUAL
59170: IFFALSE 59180
// sTiger := true ;
59172: LD_ADDR_EXP 61
59176: PUSH
59177: LD_INT 1
59179: ST_TO_ADDR
// if p3 = 107 then
59180: LD_VAR 0 3
59184: PUSH
59185: LD_INT 107
59187: EQUAL
59188: IFFALSE 59198
// sBomb := true ;
59190: LD_ADDR_EXP 62
59194: PUSH
59195: LD_INT 1
59197: ST_TO_ADDR
// if p3 = 108 then
59198: LD_VAR 0 3
59202: PUSH
59203: LD_INT 108
59205: EQUAL
59206: IFFALSE 59216
// sWound := true ;
59208: LD_ADDR_EXP 70
59212: PUSH
59213: LD_INT 1
59215: ST_TO_ADDR
// if p3 = 109 then
59216: LD_VAR 0 3
59220: PUSH
59221: LD_INT 109
59223: EQUAL
59224: IFFALSE 59234
// sBetray := true ;
59226: LD_ADDR_EXP 74
59230: PUSH
59231: LD_INT 1
59233: ST_TO_ADDR
// if p3 = 110 then
59234: LD_VAR 0 3
59238: PUSH
59239: LD_INT 110
59241: EQUAL
59242: IFFALSE 59252
// sContamin := true ;
59244: LD_ADDR_EXP 75
59248: PUSH
59249: LD_INT 1
59251: ST_TO_ADDR
// if p3 = 111 then
59252: LD_VAR 0 3
59256: PUSH
59257: LD_INT 111
59259: EQUAL
59260: IFFALSE 59270
// sOil := true ;
59262: LD_ADDR_EXP 77
59266: PUSH
59267: LD_INT 1
59269: ST_TO_ADDR
// if p3 = 112 then
59270: LD_VAR 0 3
59274: PUSH
59275: LD_INT 112
59277: EQUAL
59278: IFFALSE 59288
// sStu := true ;
59280: LD_ADDR_EXP 81
59284: PUSH
59285: LD_INT 1
59287: ST_TO_ADDR
// if p3 = 113 then
59288: LD_VAR 0 3
59292: PUSH
59293: LD_INT 113
59295: EQUAL
59296: IFFALSE 59306
// sBazooka := true ;
59298: LD_ADDR_EXP 84
59302: PUSH
59303: LD_INT 1
59305: ST_TO_ADDR
// if p3 = 114 then
59306: LD_VAR 0 3
59310: PUSH
59311: LD_INT 114
59313: EQUAL
59314: IFFALSE 59324
// sMortar := true ;
59316: LD_ADDR_EXP 85
59320: PUSH
59321: LD_INT 1
59323: ST_TO_ADDR
// if p3 = 115 then
59324: LD_VAR 0 3
59328: PUSH
59329: LD_INT 115
59331: EQUAL
59332: IFFALSE 59342
// sRanger := true ;
59334: LD_ADDR_EXP 95
59338: PUSH
59339: LD_INT 1
59341: ST_TO_ADDR
// if p3 = 116 then
59342: LD_VAR 0 3
59346: PUSH
59347: LD_INT 116
59349: EQUAL
59350: IFFALSE 59360
// sComputer := true ;
59352: LD_ADDR_EXP 96
59356: PUSH
59357: LD_INT 1
59359: ST_TO_ADDR
// if p3 = 117 then
59360: LD_VAR 0 3
59364: PUSH
59365: LD_INT 117
59367: EQUAL
59368: IFFALSE 59378
// s30 := true ;
59370: LD_ADDR_EXP 97
59374: PUSH
59375: LD_INT 1
59377: ST_TO_ADDR
// if p3 = 118 then
59378: LD_VAR 0 3
59382: PUSH
59383: LD_INT 118
59385: EQUAL
59386: IFFALSE 59396
// s60 := true ;
59388: LD_ADDR_EXP 98
59392: PUSH
59393: LD_INT 1
59395: ST_TO_ADDR
// end ; if p2 = hack_mode then
59396: LD_VAR 0 2
59400: PUSH
59401: LD_INT 101
59403: EQUAL
59404: IFFALSE 59532
// begin case p3 of 1 :
59406: LD_VAR 0 3
59410: PUSH
59411: LD_INT 1
59413: DOUBLE
59414: EQUAL
59415: IFTRUE 59419
59417: GO 59426
59419: POP
// hHackUnlimitedResources ; 2 :
59420: CALL 71679 0 0
59424: GO 59532
59426: LD_INT 2
59428: DOUBLE
59429: EQUAL
59430: IFTRUE 59434
59432: GO 59441
59434: POP
// hHackSetLevel10 ; 3 :
59435: CALL 71812 0 0
59439: GO 59532
59441: LD_INT 3
59443: DOUBLE
59444: EQUAL
59445: IFTRUE 59449
59447: GO 59456
59449: POP
// hHackSetLevel10YourUnits ; 4 :
59450: CALL 71897 0 0
59454: GO 59532
59456: LD_INT 4
59458: DOUBLE
59459: EQUAL
59460: IFTRUE 59464
59462: GO 59471
59464: POP
// hHackInvincible ; 5 :
59465: CALL 72345 0 0
59469: GO 59532
59471: LD_INT 5
59473: DOUBLE
59474: EQUAL
59475: IFTRUE 59479
59477: GO 59486
59479: POP
// hHackInvisible ; 6 :
59480: CALL 72456 0 0
59484: GO 59532
59486: LD_INT 6
59488: DOUBLE
59489: EQUAL
59490: IFTRUE 59494
59492: GO 59501
59494: POP
// hHackChangeYourSide ; 7 :
59495: CALL 72513 0 0
59499: GO 59532
59501: LD_INT 7
59503: DOUBLE
59504: EQUAL
59505: IFTRUE 59509
59507: GO 59516
59509: POP
// hHackChangeUnitSide ; 8 :
59510: CALL 72555 0 0
59514: GO 59532
59516: LD_INT 8
59518: DOUBLE
59519: EQUAL
59520: IFTRUE 59524
59522: GO 59531
59524: POP
// hHackFog ; end ;
59525: CALL 72656 0 0
59529: GO 59532
59531: POP
// end ; if p2 = game_save_mode then
59532: LD_VAR 0 2
59536: PUSH
59537: LD_INT 102
59539: EQUAL
59540: IFFALSE 59595
// begin if p3 = 1 then
59542: LD_VAR 0 3
59546: PUSH
59547: LD_INT 1
59549: EQUAL
59550: IFFALSE 59562
// globalGameSaveCounter := p4 ;
59552: LD_ADDR_EXP 41
59556: PUSH
59557: LD_VAR 0 4
59561: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
59562: LD_VAR 0 3
59566: PUSH
59567: LD_INT 2
59569: EQUAL
59570: PUSH
59571: LD_EXP 41
59575: AND
59576: IFFALSE 59595
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
59578: LD_STRING setGameSaveCounter(
59580: PUSH
59581: LD_EXP 41
59585: STR
59586: PUSH
59587: LD_STRING )
59589: STR
59590: PPUSH
59591: CALL_OW 559
// end ; end ;
59595: LD_VAR 0 7
59599: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
59600: LD_INT 0
59602: PPUSH
// streamModeActive := false ;
59603: LD_ADDR_EXP 42
59607: PUSH
59608: LD_INT 0
59610: ST_TO_ADDR
// normalCounter := 36 ;
59611: LD_ADDR_EXP 43
59615: PUSH
59616: LD_INT 36
59618: ST_TO_ADDR
// hardcoreCounter := 18 ;
59619: LD_ADDR_EXP 44
59623: PUSH
59624: LD_INT 18
59626: ST_TO_ADDR
// sRocket := false ;
59627: LD_ADDR_EXP 47
59631: PUSH
59632: LD_INT 0
59634: ST_TO_ADDR
// sSpeed := false ;
59635: LD_ADDR_EXP 46
59639: PUSH
59640: LD_INT 0
59642: ST_TO_ADDR
// sEngine := false ;
59643: LD_ADDR_EXP 48
59647: PUSH
59648: LD_INT 0
59650: ST_TO_ADDR
// sSpec := false ;
59651: LD_ADDR_EXP 45
59655: PUSH
59656: LD_INT 0
59658: ST_TO_ADDR
// sLevel := false ;
59659: LD_ADDR_EXP 49
59663: PUSH
59664: LD_INT 0
59666: ST_TO_ADDR
// sArmoury := false ;
59667: LD_ADDR_EXP 50
59671: PUSH
59672: LD_INT 0
59674: ST_TO_ADDR
// sRadar := false ;
59675: LD_ADDR_EXP 51
59679: PUSH
59680: LD_INT 0
59682: ST_TO_ADDR
// sBunker := false ;
59683: LD_ADDR_EXP 52
59687: PUSH
59688: LD_INT 0
59690: ST_TO_ADDR
// sHack := false ;
59691: LD_ADDR_EXP 53
59695: PUSH
59696: LD_INT 0
59698: ST_TO_ADDR
// sFire := false ;
59699: LD_ADDR_EXP 54
59703: PUSH
59704: LD_INT 0
59706: ST_TO_ADDR
// sRefresh := false ;
59707: LD_ADDR_EXP 55
59711: PUSH
59712: LD_INT 0
59714: ST_TO_ADDR
// sExp := false ;
59715: LD_ADDR_EXP 56
59719: PUSH
59720: LD_INT 0
59722: ST_TO_ADDR
// sDepot := false ;
59723: LD_ADDR_EXP 57
59727: PUSH
59728: LD_INT 0
59730: ST_TO_ADDR
// sFlag := false ;
59731: LD_ADDR_EXP 58
59735: PUSH
59736: LD_INT 0
59738: ST_TO_ADDR
// sKamikadze := false ;
59739: LD_ADDR_EXP 66
59743: PUSH
59744: LD_INT 0
59746: ST_TO_ADDR
// sTroll := false ;
59747: LD_ADDR_EXP 67
59751: PUSH
59752: LD_INT 0
59754: ST_TO_ADDR
// sSlow := false ;
59755: LD_ADDR_EXP 68
59759: PUSH
59760: LD_INT 0
59762: ST_TO_ADDR
// sLack := false ;
59763: LD_ADDR_EXP 69
59767: PUSH
59768: LD_INT 0
59770: ST_TO_ADDR
// sTank := false ;
59771: LD_ADDR_EXP 71
59775: PUSH
59776: LD_INT 0
59778: ST_TO_ADDR
// sRemote := false ;
59779: LD_ADDR_EXP 72
59783: PUSH
59784: LD_INT 0
59786: ST_TO_ADDR
// sPowell := false ;
59787: LD_ADDR_EXP 73
59791: PUSH
59792: LD_INT 0
59794: ST_TO_ADDR
// sTeleport := false ;
59795: LD_ADDR_EXP 76
59799: PUSH
59800: LD_INT 0
59802: ST_TO_ADDR
// sOilTower := false ;
59803: LD_ADDR_EXP 78
59807: PUSH
59808: LD_INT 0
59810: ST_TO_ADDR
// sShovel := false ;
59811: LD_ADDR_EXP 79
59815: PUSH
59816: LD_INT 0
59818: ST_TO_ADDR
// sSheik := false ;
59819: LD_ADDR_EXP 80
59823: PUSH
59824: LD_INT 0
59826: ST_TO_ADDR
// sEarthquake := false ;
59827: LD_ADDR_EXP 82
59831: PUSH
59832: LD_INT 0
59834: ST_TO_ADDR
// sAI := false ;
59835: LD_ADDR_EXP 83
59839: PUSH
59840: LD_INT 0
59842: ST_TO_ADDR
// sCargo := false ;
59843: LD_ADDR_EXP 86
59847: PUSH
59848: LD_INT 0
59850: ST_TO_ADDR
// sDLaser := false ;
59851: LD_ADDR_EXP 87
59855: PUSH
59856: LD_INT 0
59858: ST_TO_ADDR
// sExchange := false ;
59859: LD_ADDR_EXP 88
59863: PUSH
59864: LD_INT 0
59866: ST_TO_ADDR
// sFac := false ;
59867: LD_ADDR_EXP 89
59871: PUSH
59872: LD_INT 0
59874: ST_TO_ADDR
// sPower := false ;
59875: LD_ADDR_EXP 90
59879: PUSH
59880: LD_INT 0
59882: ST_TO_ADDR
// sRandom := false ;
59883: LD_ADDR_EXP 91
59887: PUSH
59888: LD_INT 0
59890: ST_TO_ADDR
// sShield := false ;
59891: LD_ADDR_EXP 92
59895: PUSH
59896: LD_INT 0
59898: ST_TO_ADDR
// sTime := false ;
59899: LD_ADDR_EXP 93
59903: PUSH
59904: LD_INT 0
59906: ST_TO_ADDR
// sTools := false ;
59907: LD_ADDR_EXP 94
59911: PUSH
59912: LD_INT 0
59914: ST_TO_ADDR
// sSold := false ;
59915: LD_ADDR_EXP 59
59919: PUSH
59920: LD_INT 0
59922: ST_TO_ADDR
// sDiff := false ;
59923: LD_ADDR_EXP 60
59927: PUSH
59928: LD_INT 0
59930: ST_TO_ADDR
// sFog := false ;
59931: LD_ADDR_EXP 63
59935: PUSH
59936: LD_INT 0
59938: ST_TO_ADDR
// sReset := false ;
59939: LD_ADDR_EXP 64
59943: PUSH
59944: LD_INT 0
59946: ST_TO_ADDR
// sSun := false ;
59947: LD_ADDR_EXP 65
59951: PUSH
59952: LD_INT 0
59954: ST_TO_ADDR
// sTiger := false ;
59955: LD_ADDR_EXP 61
59959: PUSH
59960: LD_INT 0
59962: ST_TO_ADDR
// sBomb := false ;
59963: LD_ADDR_EXP 62
59967: PUSH
59968: LD_INT 0
59970: ST_TO_ADDR
// sWound := false ;
59971: LD_ADDR_EXP 70
59975: PUSH
59976: LD_INT 0
59978: ST_TO_ADDR
// sBetray := false ;
59979: LD_ADDR_EXP 74
59983: PUSH
59984: LD_INT 0
59986: ST_TO_ADDR
// sContamin := false ;
59987: LD_ADDR_EXP 75
59991: PUSH
59992: LD_INT 0
59994: ST_TO_ADDR
// sOil := false ;
59995: LD_ADDR_EXP 77
59999: PUSH
60000: LD_INT 0
60002: ST_TO_ADDR
// sStu := false ;
60003: LD_ADDR_EXP 81
60007: PUSH
60008: LD_INT 0
60010: ST_TO_ADDR
// sBazooka := false ;
60011: LD_ADDR_EXP 84
60015: PUSH
60016: LD_INT 0
60018: ST_TO_ADDR
// sMortar := false ;
60019: LD_ADDR_EXP 85
60023: PUSH
60024: LD_INT 0
60026: ST_TO_ADDR
// sRanger := false ;
60027: LD_ADDR_EXP 95
60031: PUSH
60032: LD_INT 0
60034: ST_TO_ADDR
// sComputer := false ;
60035: LD_ADDR_EXP 96
60039: PUSH
60040: LD_INT 0
60042: ST_TO_ADDR
// s30 := false ;
60043: LD_ADDR_EXP 97
60047: PUSH
60048: LD_INT 0
60050: ST_TO_ADDR
// s60 := false ;
60051: LD_ADDR_EXP 98
60055: PUSH
60056: LD_INT 0
60058: ST_TO_ADDR
// end ;
60059: LD_VAR 0 1
60063: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
60064: LD_INT 0
60066: PPUSH
60067: PPUSH
60068: PPUSH
60069: PPUSH
60070: PPUSH
60071: PPUSH
60072: PPUSH
// result := [ ] ;
60073: LD_ADDR_VAR 0 2
60077: PUSH
60078: EMPTY
60079: ST_TO_ADDR
// if campaign_id = 1 then
60080: LD_OWVAR 69
60084: PUSH
60085: LD_INT 1
60087: EQUAL
60088: IFFALSE 63254
// begin case mission_number of 1 :
60090: LD_OWVAR 70
60094: PUSH
60095: LD_INT 1
60097: DOUBLE
60098: EQUAL
60099: IFTRUE 60103
60101: GO 60179
60103: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
60104: LD_ADDR_VAR 0 2
60108: PUSH
60109: LD_INT 2
60111: PUSH
60112: LD_INT 4
60114: PUSH
60115: LD_INT 11
60117: PUSH
60118: LD_INT 12
60120: PUSH
60121: LD_INT 15
60123: PUSH
60124: LD_INT 16
60126: PUSH
60127: LD_INT 22
60129: PUSH
60130: LD_INT 23
60132: PUSH
60133: LD_INT 26
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 101
60149: PUSH
60150: LD_INT 102
60152: PUSH
60153: LD_INT 106
60155: PUSH
60156: LD_INT 116
60158: PUSH
60159: LD_INT 117
60161: PUSH
60162: LD_INT 118
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: ST_TO_ADDR
60177: GO 63252
60179: LD_INT 2
60181: DOUBLE
60182: EQUAL
60183: IFTRUE 60187
60185: GO 60271
60187: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
60188: LD_ADDR_VAR 0 2
60192: PUSH
60193: LD_INT 2
60195: PUSH
60196: LD_INT 4
60198: PUSH
60199: LD_INT 11
60201: PUSH
60202: LD_INT 12
60204: PUSH
60205: LD_INT 15
60207: PUSH
60208: LD_INT 16
60210: PUSH
60211: LD_INT 22
60213: PUSH
60214: LD_INT 23
60216: PUSH
60217: LD_INT 26
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 101
60233: PUSH
60234: LD_INT 102
60236: PUSH
60237: LD_INT 105
60239: PUSH
60240: LD_INT 106
60242: PUSH
60243: LD_INT 108
60245: PUSH
60246: LD_INT 116
60248: PUSH
60249: LD_INT 117
60251: PUSH
60252: LD_INT 118
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: ST_TO_ADDR
60269: GO 63252
60271: LD_INT 3
60273: DOUBLE
60274: EQUAL
60275: IFTRUE 60279
60277: GO 60367
60279: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
60280: LD_ADDR_VAR 0 2
60284: PUSH
60285: LD_INT 2
60287: PUSH
60288: LD_INT 4
60290: PUSH
60291: LD_INT 5
60293: PUSH
60294: LD_INT 11
60296: PUSH
60297: LD_INT 12
60299: PUSH
60300: LD_INT 15
60302: PUSH
60303: LD_INT 16
60305: PUSH
60306: LD_INT 22
60308: PUSH
60309: LD_INT 26
60311: PUSH
60312: LD_INT 36
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 101
60329: PUSH
60330: LD_INT 102
60332: PUSH
60333: LD_INT 105
60335: PUSH
60336: LD_INT 106
60338: PUSH
60339: LD_INT 108
60341: PUSH
60342: LD_INT 116
60344: PUSH
60345: LD_INT 117
60347: PUSH
60348: LD_INT 118
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: ST_TO_ADDR
60365: GO 63252
60367: LD_INT 4
60369: DOUBLE
60370: EQUAL
60371: IFTRUE 60375
60373: GO 60471
60375: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
60376: LD_ADDR_VAR 0 2
60380: PUSH
60381: LD_INT 2
60383: PUSH
60384: LD_INT 4
60386: PUSH
60387: LD_INT 5
60389: PUSH
60390: LD_INT 8
60392: PUSH
60393: LD_INT 11
60395: PUSH
60396: LD_INT 12
60398: PUSH
60399: LD_INT 15
60401: PUSH
60402: LD_INT 16
60404: PUSH
60405: LD_INT 22
60407: PUSH
60408: LD_INT 23
60410: PUSH
60411: LD_INT 26
60413: PUSH
60414: LD_INT 36
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 101
60433: PUSH
60434: LD_INT 102
60436: PUSH
60437: LD_INT 105
60439: PUSH
60440: LD_INT 106
60442: PUSH
60443: LD_INT 108
60445: PUSH
60446: LD_INT 116
60448: PUSH
60449: LD_INT 117
60451: PUSH
60452: LD_INT 118
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: ST_TO_ADDR
60469: GO 63252
60471: LD_INT 5
60473: DOUBLE
60474: EQUAL
60475: IFTRUE 60479
60477: GO 60591
60479: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
60480: LD_ADDR_VAR 0 2
60484: PUSH
60485: LD_INT 2
60487: PUSH
60488: LD_INT 4
60490: PUSH
60491: LD_INT 5
60493: PUSH
60494: LD_INT 6
60496: PUSH
60497: LD_INT 8
60499: PUSH
60500: LD_INT 11
60502: PUSH
60503: LD_INT 12
60505: PUSH
60506: LD_INT 15
60508: PUSH
60509: LD_INT 16
60511: PUSH
60512: LD_INT 22
60514: PUSH
60515: LD_INT 23
60517: PUSH
60518: LD_INT 25
60520: PUSH
60521: LD_INT 26
60523: PUSH
60524: LD_INT 36
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 101
60545: PUSH
60546: LD_INT 102
60548: PUSH
60549: LD_INT 105
60551: PUSH
60552: LD_INT 106
60554: PUSH
60555: LD_INT 108
60557: PUSH
60558: LD_INT 109
60560: PUSH
60561: LD_INT 112
60563: PUSH
60564: LD_INT 116
60566: PUSH
60567: LD_INT 117
60569: PUSH
60570: LD_INT 118
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: ST_TO_ADDR
60589: GO 63252
60591: LD_INT 6
60593: DOUBLE
60594: EQUAL
60595: IFTRUE 60599
60597: GO 60731
60599: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
60600: LD_ADDR_VAR 0 2
60604: PUSH
60605: LD_INT 2
60607: PUSH
60608: LD_INT 4
60610: PUSH
60611: LD_INT 5
60613: PUSH
60614: LD_INT 6
60616: PUSH
60617: LD_INT 8
60619: PUSH
60620: LD_INT 11
60622: PUSH
60623: LD_INT 12
60625: PUSH
60626: LD_INT 15
60628: PUSH
60629: LD_INT 16
60631: PUSH
60632: LD_INT 20
60634: PUSH
60635: LD_INT 21
60637: PUSH
60638: LD_INT 22
60640: PUSH
60641: LD_INT 23
60643: PUSH
60644: LD_INT 25
60646: PUSH
60647: LD_INT 26
60649: PUSH
60650: LD_INT 30
60652: PUSH
60653: LD_INT 31
60655: PUSH
60656: LD_INT 32
60658: PUSH
60659: LD_INT 36
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 101
60685: PUSH
60686: LD_INT 102
60688: PUSH
60689: LD_INT 105
60691: PUSH
60692: LD_INT 106
60694: PUSH
60695: LD_INT 108
60697: PUSH
60698: LD_INT 109
60700: PUSH
60701: LD_INT 112
60703: PUSH
60704: LD_INT 116
60706: PUSH
60707: LD_INT 117
60709: PUSH
60710: LD_INT 118
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: ST_TO_ADDR
60729: GO 63252
60731: LD_INT 7
60733: DOUBLE
60734: EQUAL
60735: IFTRUE 60739
60737: GO 60851
60739: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
60740: LD_ADDR_VAR 0 2
60744: PUSH
60745: LD_INT 2
60747: PUSH
60748: LD_INT 4
60750: PUSH
60751: LD_INT 5
60753: PUSH
60754: LD_INT 7
60756: PUSH
60757: LD_INT 11
60759: PUSH
60760: LD_INT 12
60762: PUSH
60763: LD_INT 15
60765: PUSH
60766: LD_INT 16
60768: PUSH
60769: LD_INT 20
60771: PUSH
60772: LD_INT 21
60774: PUSH
60775: LD_INT 22
60777: PUSH
60778: LD_INT 23
60780: PUSH
60781: LD_INT 25
60783: PUSH
60784: LD_INT 26
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 101
60805: PUSH
60806: LD_INT 102
60808: PUSH
60809: LD_INT 103
60811: PUSH
60812: LD_INT 105
60814: PUSH
60815: LD_INT 106
60817: PUSH
60818: LD_INT 108
60820: PUSH
60821: LD_INT 112
60823: PUSH
60824: LD_INT 116
60826: PUSH
60827: LD_INT 117
60829: PUSH
60830: LD_INT 118
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: ST_TO_ADDR
60849: GO 63252
60851: LD_INT 8
60853: DOUBLE
60854: EQUAL
60855: IFTRUE 60859
60857: GO 60999
60859: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
60860: LD_ADDR_VAR 0 2
60864: PUSH
60865: LD_INT 2
60867: PUSH
60868: LD_INT 4
60870: PUSH
60871: LD_INT 5
60873: PUSH
60874: LD_INT 6
60876: PUSH
60877: LD_INT 7
60879: PUSH
60880: LD_INT 8
60882: PUSH
60883: LD_INT 11
60885: PUSH
60886: LD_INT 12
60888: PUSH
60889: LD_INT 15
60891: PUSH
60892: LD_INT 16
60894: PUSH
60895: LD_INT 20
60897: PUSH
60898: LD_INT 21
60900: PUSH
60901: LD_INT 22
60903: PUSH
60904: LD_INT 23
60906: PUSH
60907: LD_INT 25
60909: PUSH
60910: LD_INT 26
60912: PUSH
60913: LD_INT 30
60915: PUSH
60916: LD_INT 31
60918: PUSH
60919: LD_INT 32
60921: PUSH
60922: LD_INT 36
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 101
60949: PUSH
60950: LD_INT 102
60952: PUSH
60953: LD_INT 103
60955: PUSH
60956: LD_INT 105
60958: PUSH
60959: LD_INT 106
60961: PUSH
60962: LD_INT 108
60964: PUSH
60965: LD_INT 109
60967: PUSH
60968: LD_INT 112
60970: PUSH
60971: LD_INT 116
60973: PUSH
60974: LD_INT 117
60976: PUSH
60977: LD_INT 118
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: ST_TO_ADDR
60997: GO 63252
60999: LD_INT 9
61001: DOUBLE
61002: EQUAL
61003: IFTRUE 61007
61005: GO 61155
61007: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
61008: LD_ADDR_VAR 0 2
61012: PUSH
61013: LD_INT 2
61015: PUSH
61016: LD_INT 4
61018: PUSH
61019: LD_INT 5
61021: PUSH
61022: LD_INT 6
61024: PUSH
61025: LD_INT 7
61027: PUSH
61028: LD_INT 8
61030: PUSH
61031: LD_INT 11
61033: PUSH
61034: LD_INT 12
61036: PUSH
61037: LD_INT 15
61039: PUSH
61040: LD_INT 16
61042: PUSH
61043: LD_INT 20
61045: PUSH
61046: LD_INT 21
61048: PUSH
61049: LD_INT 22
61051: PUSH
61052: LD_INT 23
61054: PUSH
61055: LD_INT 25
61057: PUSH
61058: LD_INT 26
61060: PUSH
61061: LD_INT 28
61063: PUSH
61064: LD_INT 30
61066: PUSH
61067: LD_INT 31
61069: PUSH
61070: LD_INT 32
61072: PUSH
61073: LD_INT 36
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 101
61101: PUSH
61102: LD_INT 102
61104: PUSH
61105: LD_INT 103
61107: PUSH
61108: LD_INT 105
61110: PUSH
61111: LD_INT 106
61113: PUSH
61114: LD_INT 108
61116: PUSH
61117: LD_INT 109
61119: PUSH
61120: LD_INT 112
61122: PUSH
61123: LD_INT 114
61125: PUSH
61126: LD_INT 116
61128: PUSH
61129: LD_INT 117
61131: PUSH
61132: LD_INT 118
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: ST_TO_ADDR
61153: GO 63252
61155: LD_INT 10
61157: DOUBLE
61158: EQUAL
61159: IFTRUE 61163
61161: GO 61359
61163: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
61164: LD_ADDR_VAR 0 2
61168: PUSH
61169: LD_INT 2
61171: PUSH
61172: LD_INT 4
61174: PUSH
61175: LD_INT 5
61177: PUSH
61178: LD_INT 6
61180: PUSH
61181: LD_INT 7
61183: PUSH
61184: LD_INT 8
61186: PUSH
61187: LD_INT 9
61189: PUSH
61190: LD_INT 10
61192: PUSH
61193: LD_INT 11
61195: PUSH
61196: LD_INT 12
61198: PUSH
61199: LD_INT 13
61201: PUSH
61202: LD_INT 14
61204: PUSH
61205: LD_INT 15
61207: PUSH
61208: LD_INT 16
61210: PUSH
61211: LD_INT 17
61213: PUSH
61214: LD_INT 18
61216: PUSH
61217: LD_INT 19
61219: PUSH
61220: LD_INT 20
61222: PUSH
61223: LD_INT 21
61225: PUSH
61226: LD_INT 22
61228: PUSH
61229: LD_INT 23
61231: PUSH
61232: LD_INT 24
61234: PUSH
61235: LD_INT 25
61237: PUSH
61238: LD_INT 26
61240: PUSH
61241: LD_INT 28
61243: PUSH
61244: LD_INT 30
61246: PUSH
61247: LD_INT 31
61249: PUSH
61250: LD_INT 32
61252: PUSH
61253: LD_INT 36
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 101
61289: PUSH
61290: LD_INT 102
61292: PUSH
61293: LD_INT 103
61295: PUSH
61296: LD_INT 104
61298: PUSH
61299: LD_INT 105
61301: PUSH
61302: LD_INT 106
61304: PUSH
61305: LD_INT 107
61307: PUSH
61308: LD_INT 108
61310: PUSH
61311: LD_INT 109
61313: PUSH
61314: LD_INT 110
61316: PUSH
61317: LD_INT 111
61319: PUSH
61320: LD_INT 112
61322: PUSH
61323: LD_INT 114
61325: PUSH
61326: LD_INT 116
61328: PUSH
61329: LD_INT 117
61331: PUSH
61332: LD_INT 118
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: ST_TO_ADDR
61357: GO 63252
61359: LD_INT 11
61361: DOUBLE
61362: EQUAL
61363: IFTRUE 61367
61365: GO 61571
61367: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
61368: LD_ADDR_VAR 0 2
61372: PUSH
61373: LD_INT 2
61375: PUSH
61376: LD_INT 3
61378: PUSH
61379: LD_INT 4
61381: PUSH
61382: LD_INT 5
61384: PUSH
61385: LD_INT 6
61387: PUSH
61388: LD_INT 7
61390: PUSH
61391: LD_INT 8
61393: PUSH
61394: LD_INT 9
61396: PUSH
61397: LD_INT 10
61399: PUSH
61400: LD_INT 11
61402: PUSH
61403: LD_INT 12
61405: PUSH
61406: LD_INT 13
61408: PUSH
61409: LD_INT 14
61411: PUSH
61412: LD_INT 15
61414: PUSH
61415: LD_INT 16
61417: PUSH
61418: LD_INT 17
61420: PUSH
61421: LD_INT 18
61423: PUSH
61424: LD_INT 19
61426: PUSH
61427: LD_INT 20
61429: PUSH
61430: LD_INT 21
61432: PUSH
61433: LD_INT 22
61435: PUSH
61436: LD_INT 23
61438: PUSH
61439: LD_INT 24
61441: PUSH
61442: LD_INT 25
61444: PUSH
61445: LD_INT 26
61447: PUSH
61448: LD_INT 28
61450: PUSH
61451: LD_INT 30
61453: PUSH
61454: LD_INT 31
61456: PUSH
61457: LD_INT 32
61459: PUSH
61460: LD_INT 34
61462: PUSH
61463: LD_INT 36
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: LIST
61498: PUSH
61499: LD_INT 101
61501: PUSH
61502: LD_INT 102
61504: PUSH
61505: LD_INT 103
61507: PUSH
61508: LD_INT 104
61510: PUSH
61511: LD_INT 105
61513: PUSH
61514: LD_INT 106
61516: PUSH
61517: LD_INT 107
61519: PUSH
61520: LD_INT 108
61522: PUSH
61523: LD_INT 109
61525: PUSH
61526: LD_INT 110
61528: PUSH
61529: LD_INT 111
61531: PUSH
61532: LD_INT 112
61534: PUSH
61535: LD_INT 114
61537: PUSH
61538: LD_INT 116
61540: PUSH
61541: LD_INT 117
61543: PUSH
61544: LD_INT 118
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: ST_TO_ADDR
61569: GO 63252
61571: LD_INT 12
61573: DOUBLE
61574: EQUAL
61575: IFTRUE 61579
61577: GO 61799
61579: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
61580: LD_ADDR_VAR 0 2
61584: PUSH
61585: LD_INT 1
61587: PUSH
61588: LD_INT 2
61590: PUSH
61591: LD_INT 3
61593: PUSH
61594: LD_INT 4
61596: PUSH
61597: LD_INT 5
61599: PUSH
61600: LD_INT 6
61602: PUSH
61603: LD_INT 7
61605: PUSH
61606: LD_INT 8
61608: PUSH
61609: LD_INT 9
61611: PUSH
61612: LD_INT 10
61614: PUSH
61615: LD_INT 11
61617: PUSH
61618: LD_INT 12
61620: PUSH
61621: LD_INT 13
61623: PUSH
61624: LD_INT 14
61626: PUSH
61627: LD_INT 15
61629: PUSH
61630: LD_INT 16
61632: PUSH
61633: LD_INT 17
61635: PUSH
61636: LD_INT 18
61638: PUSH
61639: LD_INT 19
61641: PUSH
61642: LD_INT 20
61644: PUSH
61645: LD_INT 21
61647: PUSH
61648: LD_INT 22
61650: PUSH
61651: LD_INT 23
61653: PUSH
61654: LD_INT 24
61656: PUSH
61657: LD_INT 25
61659: PUSH
61660: LD_INT 26
61662: PUSH
61663: LD_INT 27
61665: PUSH
61666: LD_INT 28
61668: PUSH
61669: LD_INT 30
61671: PUSH
61672: LD_INT 31
61674: PUSH
61675: LD_INT 32
61677: PUSH
61678: LD_INT 33
61680: PUSH
61681: LD_INT 34
61683: PUSH
61684: LD_INT 36
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 101
61725: PUSH
61726: LD_INT 102
61728: PUSH
61729: LD_INT 103
61731: PUSH
61732: LD_INT 104
61734: PUSH
61735: LD_INT 105
61737: PUSH
61738: LD_INT 106
61740: PUSH
61741: LD_INT 107
61743: PUSH
61744: LD_INT 108
61746: PUSH
61747: LD_INT 109
61749: PUSH
61750: LD_INT 110
61752: PUSH
61753: LD_INT 111
61755: PUSH
61756: LD_INT 112
61758: PUSH
61759: LD_INT 113
61761: PUSH
61762: LD_INT 114
61764: PUSH
61765: LD_INT 116
61767: PUSH
61768: LD_INT 117
61770: PUSH
61771: LD_INT 118
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: ST_TO_ADDR
61797: GO 63252
61799: LD_INT 13
61801: DOUBLE
61802: EQUAL
61803: IFTRUE 61807
61805: GO 62015
61807: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
61808: LD_ADDR_VAR 0 2
61812: PUSH
61813: LD_INT 1
61815: PUSH
61816: LD_INT 2
61818: PUSH
61819: LD_INT 3
61821: PUSH
61822: LD_INT 4
61824: PUSH
61825: LD_INT 5
61827: PUSH
61828: LD_INT 8
61830: PUSH
61831: LD_INT 9
61833: PUSH
61834: LD_INT 10
61836: PUSH
61837: LD_INT 11
61839: PUSH
61840: LD_INT 12
61842: PUSH
61843: LD_INT 14
61845: PUSH
61846: LD_INT 15
61848: PUSH
61849: LD_INT 16
61851: PUSH
61852: LD_INT 17
61854: PUSH
61855: LD_INT 18
61857: PUSH
61858: LD_INT 19
61860: PUSH
61861: LD_INT 20
61863: PUSH
61864: LD_INT 21
61866: PUSH
61867: LD_INT 22
61869: PUSH
61870: LD_INT 23
61872: PUSH
61873: LD_INT 24
61875: PUSH
61876: LD_INT 25
61878: PUSH
61879: LD_INT 26
61881: PUSH
61882: LD_INT 27
61884: PUSH
61885: LD_INT 28
61887: PUSH
61888: LD_INT 30
61890: PUSH
61891: LD_INT 31
61893: PUSH
61894: LD_INT 32
61896: PUSH
61897: LD_INT 33
61899: PUSH
61900: LD_INT 34
61902: PUSH
61903: LD_INT 36
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: PUSH
61939: LD_INT 101
61941: PUSH
61942: LD_INT 102
61944: PUSH
61945: LD_INT 103
61947: PUSH
61948: LD_INT 104
61950: PUSH
61951: LD_INT 105
61953: PUSH
61954: LD_INT 106
61956: PUSH
61957: LD_INT 107
61959: PUSH
61960: LD_INT 108
61962: PUSH
61963: LD_INT 109
61965: PUSH
61966: LD_INT 110
61968: PUSH
61969: LD_INT 111
61971: PUSH
61972: LD_INT 112
61974: PUSH
61975: LD_INT 113
61977: PUSH
61978: LD_INT 114
61980: PUSH
61981: LD_INT 116
61983: PUSH
61984: LD_INT 117
61986: PUSH
61987: LD_INT 118
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: ST_TO_ADDR
62013: GO 63252
62015: LD_INT 14
62017: DOUBLE
62018: EQUAL
62019: IFTRUE 62023
62021: GO 62247
62023: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
62024: LD_ADDR_VAR 0 2
62028: PUSH
62029: LD_INT 1
62031: PUSH
62032: LD_INT 2
62034: PUSH
62035: LD_INT 3
62037: PUSH
62038: LD_INT 4
62040: PUSH
62041: LD_INT 5
62043: PUSH
62044: LD_INT 6
62046: PUSH
62047: LD_INT 7
62049: PUSH
62050: LD_INT 8
62052: PUSH
62053: LD_INT 9
62055: PUSH
62056: LD_INT 10
62058: PUSH
62059: LD_INT 11
62061: PUSH
62062: LD_INT 12
62064: PUSH
62065: LD_INT 13
62067: PUSH
62068: LD_INT 14
62070: PUSH
62071: LD_INT 15
62073: PUSH
62074: LD_INT 16
62076: PUSH
62077: LD_INT 17
62079: PUSH
62080: LD_INT 18
62082: PUSH
62083: LD_INT 19
62085: PUSH
62086: LD_INT 20
62088: PUSH
62089: LD_INT 21
62091: PUSH
62092: LD_INT 22
62094: PUSH
62095: LD_INT 23
62097: PUSH
62098: LD_INT 24
62100: PUSH
62101: LD_INT 25
62103: PUSH
62104: LD_INT 26
62106: PUSH
62107: LD_INT 27
62109: PUSH
62110: LD_INT 28
62112: PUSH
62113: LD_INT 29
62115: PUSH
62116: LD_INT 30
62118: PUSH
62119: LD_INT 31
62121: PUSH
62122: LD_INT 32
62124: PUSH
62125: LD_INT 33
62127: PUSH
62128: LD_INT 34
62130: PUSH
62131: LD_INT 36
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 101
62173: PUSH
62174: LD_INT 102
62176: PUSH
62177: LD_INT 103
62179: PUSH
62180: LD_INT 104
62182: PUSH
62183: LD_INT 105
62185: PUSH
62186: LD_INT 106
62188: PUSH
62189: LD_INT 107
62191: PUSH
62192: LD_INT 108
62194: PUSH
62195: LD_INT 109
62197: PUSH
62198: LD_INT 110
62200: PUSH
62201: LD_INT 111
62203: PUSH
62204: LD_INT 112
62206: PUSH
62207: LD_INT 113
62209: PUSH
62210: LD_INT 114
62212: PUSH
62213: LD_INT 116
62215: PUSH
62216: LD_INT 117
62218: PUSH
62219: LD_INT 118
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: ST_TO_ADDR
62245: GO 63252
62247: LD_INT 15
62249: DOUBLE
62250: EQUAL
62251: IFTRUE 62255
62253: GO 62479
62255: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
62256: LD_ADDR_VAR 0 2
62260: PUSH
62261: LD_INT 1
62263: PUSH
62264: LD_INT 2
62266: PUSH
62267: LD_INT 3
62269: PUSH
62270: LD_INT 4
62272: PUSH
62273: LD_INT 5
62275: PUSH
62276: LD_INT 6
62278: PUSH
62279: LD_INT 7
62281: PUSH
62282: LD_INT 8
62284: PUSH
62285: LD_INT 9
62287: PUSH
62288: LD_INT 10
62290: PUSH
62291: LD_INT 11
62293: PUSH
62294: LD_INT 12
62296: PUSH
62297: LD_INT 13
62299: PUSH
62300: LD_INT 14
62302: PUSH
62303: LD_INT 15
62305: PUSH
62306: LD_INT 16
62308: PUSH
62309: LD_INT 17
62311: PUSH
62312: LD_INT 18
62314: PUSH
62315: LD_INT 19
62317: PUSH
62318: LD_INT 20
62320: PUSH
62321: LD_INT 21
62323: PUSH
62324: LD_INT 22
62326: PUSH
62327: LD_INT 23
62329: PUSH
62330: LD_INT 24
62332: PUSH
62333: LD_INT 25
62335: PUSH
62336: LD_INT 26
62338: PUSH
62339: LD_INT 27
62341: PUSH
62342: LD_INT 28
62344: PUSH
62345: LD_INT 29
62347: PUSH
62348: LD_INT 30
62350: PUSH
62351: LD_INT 31
62353: PUSH
62354: LD_INT 32
62356: PUSH
62357: LD_INT 33
62359: PUSH
62360: LD_INT 34
62362: PUSH
62363: LD_INT 36
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 101
62405: PUSH
62406: LD_INT 102
62408: PUSH
62409: LD_INT 103
62411: PUSH
62412: LD_INT 104
62414: PUSH
62415: LD_INT 105
62417: PUSH
62418: LD_INT 106
62420: PUSH
62421: LD_INT 107
62423: PUSH
62424: LD_INT 108
62426: PUSH
62427: LD_INT 109
62429: PUSH
62430: LD_INT 110
62432: PUSH
62433: LD_INT 111
62435: PUSH
62436: LD_INT 112
62438: PUSH
62439: LD_INT 113
62441: PUSH
62442: LD_INT 114
62444: PUSH
62445: LD_INT 116
62447: PUSH
62448: LD_INT 117
62450: PUSH
62451: LD_INT 118
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: ST_TO_ADDR
62477: GO 63252
62479: LD_INT 16
62481: DOUBLE
62482: EQUAL
62483: IFTRUE 62487
62485: GO 62623
62487: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
62488: LD_ADDR_VAR 0 2
62492: PUSH
62493: LD_INT 2
62495: PUSH
62496: LD_INT 4
62498: PUSH
62499: LD_INT 5
62501: PUSH
62502: LD_INT 7
62504: PUSH
62505: LD_INT 11
62507: PUSH
62508: LD_INT 12
62510: PUSH
62511: LD_INT 15
62513: PUSH
62514: LD_INT 16
62516: PUSH
62517: LD_INT 20
62519: PUSH
62520: LD_INT 21
62522: PUSH
62523: LD_INT 22
62525: PUSH
62526: LD_INT 23
62528: PUSH
62529: LD_INT 25
62531: PUSH
62532: LD_INT 26
62534: PUSH
62535: LD_INT 30
62537: PUSH
62538: LD_INT 31
62540: PUSH
62541: LD_INT 32
62543: PUSH
62544: LD_INT 33
62546: PUSH
62547: LD_INT 34
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 101
62573: PUSH
62574: LD_INT 102
62576: PUSH
62577: LD_INT 103
62579: PUSH
62580: LD_INT 106
62582: PUSH
62583: LD_INT 108
62585: PUSH
62586: LD_INT 112
62588: PUSH
62589: LD_INT 113
62591: PUSH
62592: LD_INT 114
62594: PUSH
62595: LD_INT 116
62597: PUSH
62598: LD_INT 117
62600: PUSH
62601: LD_INT 118
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: LIST
62615: LIST
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: ST_TO_ADDR
62621: GO 63252
62623: LD_INT 17
62625: DOUBLE
62626: EQUAL
62627: IFTRUE 62631
62629: GO 62855
62631: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
62632: LD_ADDR_VAR 0 2
62636: PUSH
62637: LD_INT 1
62639: PUSH
62640: LD_INT 2
62642: PUSH
62643: LD_INT 3
62645: PUSH
62646: LD_INT 4
62648: PUSH
62649: LD_INT 5
62651: PUSH
62652: LD_INT 6
62654: PUSH
62655: LD_INT 7
62657: PUSH
62658: LD_INT 8
62660: PUSH
62661: LD_INT 9
62663: PUSH
62664: LD_INT 10
62666: PUSH
62667: LD_INT 11
62669: PUSH
62670: LD_INT 12
62672: PUSH
62673: LD_INT 13
62675: PUSH
62676: LD_INT 14
62678: PUSH
62679: LD_INT 15
62681: PUSH
62682: LD_INT 16
62684: PUSH
62685: LD_INT 17
62687: PUSH
62688: LD_INT 18
62690: PUSH
62691: LD_INT 19
62693: PUSH
62694: LD_INT 20
62696: PUSH
62697: LD_INT 21
62699: PUSH
62700: LD_INT 22
62702: PUSH
62703: LD_INT 23
62705: PUSH
62706: LD_INT 24
62708: PUSH
62709: LD_INT 25
62711: PUSH
62712: LD_INT 26
62714: PUSH
62715: LD_INT 27
62717: PUSH
62718: LD_INT 28
62720: PUSH
62721: LD_INT 29
62723: PUSH
62724: LD_INT 30
62726: PUSH
62727: LD_INT 31
62729: PUSH
62730: LD_INT 32
62732: PUSH
62733: LD_INT 33
62735: PUSH
62736: LD_INT 34
62738: PUSH
62739: LD_INT 36
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: LIST
62746: LIST
62747: LIST
62748: LIST
62749: LIST
62750: LIST
62751: LIST
62752: LIST
62753: LIST
62754: LIST
62755: LIST
62756: LIST
62757: LIST
62758: LIST
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: PUSH
62779: LD_INT 101
62781: PUSH
62782: LD_INT 102
62784: PUSH
62785: LD_INT 103
62787: PUSH
62788: LD_INT 104
62790: PUSH
62791: LD_INT 105
62793: PUSH
62794: LD_INT 106
62796: PUSH
62797: LD_INT 107
62799: PUSH
62800: LD_INT 108
62802: PUSH
62803: LD_INT 109
62805: PUSH
62806: LD_INT 110
62808: PUSH
62809: LD_INT 111
62811: PUSH
62812: LD_INT 112
62814: PUSH
62815: LD_INT 113
62817: PUSH
62818: LD_INT 114
62820: PUSH
62821: LD_INT 116
62823: PUSH
62824: LD_INT 117
62826: PUSH
62827: LD_INT 118
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: ST_TO_ADDR
62853: GO 63252
62855: LD_INT 18
62857: DOUBLE
62858: EQUAL
62859: IFTRUE 62863
62861: GO 63011
62863: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
62864: LD_ADDR_VAR 0 2
62868: PUSH
62869: LD_INT 2
62871: PUSH
62872: LD_INT 4
62874: PUSH
62875: LD_INT 5
62877: PUSH
62878: LD_INT 7
62880: PUSH
62881: LD_INT 11
62883: PUSH
62884: LD_INT 12
62886: PUSH
62887: LD_INT 15
62889: PUSH
62890: LD_INT 16
62892: PUSH
62893: LD_INT 20
62895: PUSH
62896: LD_INT 21
62898: PUSH
62899: LD_INT 22
62901: PUSH
62902: LD_INT 23
62904: PUSH
62905: LD_INT 25
62907: PUSH
62908: LD_INT 26
62910: PUSH
62911: LD_INT 30
62913: PUSH
62914: LD_INT 31
62916: PUSH
62917: LD_INT 32
62919: PUSH
62920: LD_INT 33
62922: PUSH
62923: LD_INT 34
62925: PUSH
62926: LD_INT 35
62928: PUSH
62929: LD_INT 36
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: LIST
62939: LIST
62940: LIST
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: LIST
62954: PUSH
62955: LD_INT 101
62957: PUSH
62958: LD_INT 102
62960: PUSH
62961: LD_INT 103
62963: PUSH
62964: LD_INT 106
62966: PUSH
62967: LD_INT 108
62969: PUSH
62970: LD_INT 112
62972: PUSH
62973: LD_INT 113
62975: PUSH
62976: LD_INT 114
62978: PUSH
62979: LD_INT 115
62981: PUSH
62982: LD_INT 116
62984: PUSH
62985: LD_INT 117
62987: PUSH
62988: LD_INT 118
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: ST_TO_ADDR
63009: GO 63252
63011: LD_INT 19
63013: DOUBLE
63014: EQUAL
63015: IFTRUE 63019
63017: GO 63251
63019: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
63020: LD_ADDR_VAR 0 2
63024: PUSH
63025: LD_INT 1
63027: PUSH
63028: LD_INT 2
63030: PUSH
63031: LD_INT 3
63033: PUSH
63034: LD_INT 4
63036: PUSH
63037: LD_INT 5
63039: PUSH
63040: LD_INT 6
63042: PUSH
63043: LD_INT 7
63045: PUSH
63046: LD_INT 8
63048: PUSH
63049: LD_INT 9
63051: PUSH
63052: LD_INT 10
63054: PUSH
63055: LD_INT 11
63057: PUSH
63058: LD_INT 12
63060: PUSH
63061: LD_INT 13
63063: PUSH
63064: LD_INT 14
63066: PUSH
63067: LD_INT 15
63069: PUSH
63070: LD_INT 16
63072: PUSH
63073: LD_INT 17
63075: PUSH
63076: LD_INT 18
63078: PUSH
63079: LD_INT 19
63081: PUSH
63082: LD_INT 20
63084: PUSH
63085: LD_INT 21
63087: PUSH
63088: LD_INT 22
63090: PUSH
63091: LD_INT 23
63093: PUSH
63094: LD_INT 24
63096: PUSH
63097: LD_INT 25
63099: PUSH
63100: LD_INT 26
63102: PUSH
63103: LD_INT 27
63105: PUSH
63106: LD_INT 28
63108: PUSH
63109: LD_INT 29
63111: PUSH
63112: LD_INT 30
63114: PUSH
63115: LD_INT 31
63117: PUSH
63118: LD_INT 32
63120: PUSH
63121: LD_INT 33
63123: PUSH
63124: LD_INT 34
63126: PUSH
63127: LD_INT 35
63129: PUSH
63130: LD_INT 36
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: LIST
63137: LIST
63138: LIST
63139: LIST
63140: LIST
63141: LIST
63142: LIST
63143: LIST
63144: LIST
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 101
63173: PUSH
63174: LD_INT 102
63176: PUSH
63177: LD_INT 103
63179: PUSH
63180: LD_INT 104
63182: PUSH
63183: LD_INT 105
63185: PUSH
63186: LD_INT 106
63188: PUSH
63189: LD_INT 107
63191: PUSH
63192: LD_INT 108
63194: PUSH
63195: LD_INT 109
63197: PUSH
63198: LD_INT 110
63200: PUSH
63201: LD_INT 111
63203: PUSH
63204: LD_INT 112
63206: PUSH
63207: LD_INT 113
63209: PUSH
63210: LD_INT 114
63212: PUSH
63213: LD_INT 115
63215: PUSH
63216: LD_INT 116
63218: PUSH
63219: LD_INT 117
63221: PUSH
63222: LD_INT 118
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: LIST
63229: LIST
63230: LIST
63231: LIST
63232: LIST
63233: LIST
63234: LIST
63235: LIST
63236: LIST
63237: LIST
63238: LIST
63239: LIST
63240: LIST
63241: LIST
63242: LIST
63243: LIST
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: ST_TO_ADDR
63249: GO 63252
63251: POP
// end else
63252: GO 63483
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
63254: LD_ADDR_VAR 0 2
63258: PUSH
63259: LD_INT 1
63261: PUSH
63262: LD_INT 2
63264: PUSH
63265: LD_INT 3
63267: PUSH
63268: LD_INT 4
63270: PUSH
63271: LD_INT 5
63273: PUSH
63274: LD_INT 6
63276: PUSH
63277: LD_INT 7
63279: PUSH
63280: LD_INT 8
63282: PUSH
63283: LD_INT 9
63285: PUSH
63286: LD_INT 10
63288: PUSH
63289: LD_INT 11
63291: PUSH
63292: LD_INT 12
63294: PUSH
63295: LD_INT 13
63297: PUSH
63298: LD_INT 14
63300: PUSH
63301: LD_INT 15
63303: PUSH
63304: LD_INT 16
63306: PUSH
63307: LD_INT 17
63309: PUSH
63310: LD_INT 18
63312: PUSH
63313: LD_INT 19
63315: PUSH
63316: LD_INT 20
63318: PUSH
63319: LD_INT 21
63321: PUSH
63322: LD_INT 22
63324: PUSH
63325: LD_INT 23
63327: PUSH
63328: LD_INT 24
63330: PUSH
63331: LD_INT 25
63333: PUSH
63334: LD_INT 26
63336: PUSH
63337: LD_INT 27
63339: PUSH
63340: LD_INT 28
63342: PUSH
63343: LD_INT 29
63345: PUSH
63346: LD_INT 30
63348: PUSH
63349: LD_INT 31
63351: PUSH
63352: LD_INT 32
63354: PUSH
63355: LD_INT 33
63357: PUSH
63358: LD_INT 34
63360: PUSH
63361: LD_INT 35
63363: PUSH
63364: LD_INT 36
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: LIST
63374: LIST
63375: LIST
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: LIST
63404: PUSH
63405: LD_INT 101
63407: PUSH
63408: LD_INT 102
63410: PUSH
63411: LD_INT 103
63413: PUSH
63414: LD_INT 104
63416: PUSH
63417: LD_INT 105
63419: PUSH
63420: LD_INT 106
63422: PUSH
63423: LD_INT 107
63425: PUSH
63426: LD_INT 108
63428: PUSH
63429: LD_INT 109
63431: PUSH
63432: LD_INT 110
63434: PUSH
63435: LD_INT 111
63437: PUSH
63438: LD_INT 112
63440: PUSH
63441: LD_INT 113
63443: PUSH
63444: LD_INT 114
63446: PUSH
63447: LD_INT 115
63449: PUSH
63450: LD_INT 116
63452: PUSH
63453: LD_INT 117
63455: PUSH
63456: LD_INT 118
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: LIST
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: LIST
63477: LIST
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: ST_TO_ADDR
// if result then
63483: LD_VAR 0 2
63487: IFFALSE 64273
// begin normal :=  ;
63489: LD_ADDR_VAR 0 5
63493: PUSH
63494: LD_STRING 
63496: ST_TO_ADDR
// hardcore :=  ;
63497: LD_ADDR_VAR 0 6
63501: PUSH
63502: LD_STRING 
63504: ST_TO_ADDR
// active :=  ;
63505: LD_ADDR_VAR 0 7
63509: PUSH
63510: LD_STRING 
63512: ST_TO_ADDR
// for i = 1 to normalCounter do
63513: LD_ADDR_VAR 0 8
63517: PUSH
63518: DOUBLE
63519: LD_INT 1
63521: DEC
63522: ST_TO_ADDR
63523: LD_EXP 43
63527: PUSH
63528: FOR_TO
63529: IFFALSE 63630
// begin tmp := 0 ;
63531: LD_ADDR_VAR 0 3
63535: PUSH
63536: LD_STRING 0
63538: ST_TO_ADDR
// if result [ 1 ] then
63539: LD_VAR 0 2
63543: PUSH
63544: LD_INT 1
63546: ARRAY
63547: IFFALSE 63612
// if result [ 1 ] [ 1 ] = i then
63549: LD_VAR 0 2
63553: PUSH
63554: LD_INT 1
63556: ARRAY
63557: PUSH
63558: LD_INT 1
63560: ARRAY
63561: PUSH
63562: LD_VAR 0 8
63566: EQUAL
63567: IFFALSE 63612
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
63569: LD_ADDR_VAR 0 2
63573: PUSH
63574: LD_VAR 0 2
63578: PPUSH
63579: LD_INT 1
63581: PPUSH
63582: LD_VAR 0 2
63586: PUSH
63587: LD_INT 1
63589: ARRAY
63590: PPUSH
63591: LD_INT 1
63593: PPUSH
63594: CALL_OW 3
63598: PPUSH
63599: CALL_OW 1
63603: ST_TO_ADDR
// tmp := 1 ;
63604: LD_ADDR_VAR 0 3
63608: PUSH
63609: LD_STRING 1
63611: ST_TO_ADDR
// end ; normal := normal & tmp ;
63612: LD_ADDR_VAR 0 5
63616: PUSH
63617: LD_VAR 0 5
63621: PUSH
63622: LD_VAR 0 3
63626: STR
63627: ST_TO_ADDR
// end ;
63628: GO 63528
63630: POP
63631: POP
// for i = 1 to hardcoreCounter do
63632: LD_ADDR_VAR 0 8
63636: PUSH
63637: DOUBLE
63638: LD_INT 1
63640: DEC
63641: ST_TO_ADDR
63642: LD_EXP 44
63646: PUSH
63647: FOR_TO
63648: IFFALSE 63753
// begin tmp := 0 ;
63650: LD_ADDR_VAR 0 3
63654: PUSH
63655: LD_STRING 0
63657: ST_TO_ADDR
// if result [ 2 ] then
63658: LD_VAR 0 2
63662: PUSH
63663: LD_INT 2
63665: ARRAY
63666: IFFALSE 63735
// if result [ 2 ] [ 1 ] = 100 + i then
63668: LD_VAR 0 2
63672: PUSH
63673: LD_INT 2
63675: ARRAY
63676: PUSH
63677: LD_INT 1
63679: ARRAY
63680: PUSH
63681: LD_INT 100
63683: PUSH
63684: LD_VAR 0 8
63688: PLUS
63689: EQUAL
63690: IFFALSE 63735
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
63692: LD_ADDR_VAR 0 2
63696: PUSH
63697: LD_VAR 0 2
63701: PPUSH
63702: LD_INT 2
63704: PPUSH
63705: LD_VAR 0 2
63709: PUSH
63710: LD_INT 2
63712: ARRAY
63713: PPUSH
63714: LD_INT 1
63716: PPUSH
63717: CALL_OW 3
63721: PPUSH
63722: CALL_OW 1
63726: ST_TO_ADDR
// tmp := 1 ;
63727: LD_ADDR_VAR 0 3
63731: PUSH
63732: LD_STRING 1
63734: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
63735: LD_ADDR_VAR 0 6
63739: PUSH
63740: LD_VAR 0 6
63744: PUSH
63745: LD_VAR 0 3
63749: STR
63750: ST_TO_ADDR
// end ;
63751: GO 63647
63753: POP
63754: POP
// if isGameLoad then
63755: LD_VAR 0 1
63759: IFFALSE 64234
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
63761: LD_ADDR_VAR 0 4
63765: PUSH
63766: LD_EXP 47
63770: PUSH
63771: LD_EXP 46
63775: PUSH
63776: LD_EXP 48
63780: PUSH
63781: LD_EXP 45
63785: PUSH
63786: LD_EXP 49
63790: PUSH
63791: LD_EXP 50
63795: PUSH
63796: LD_EXP 51
63800: PUSH
63801: LD_EXP 52
63805: PUSH
63806: LD_EXP 53
63810: PUSH
63811: LD_EXP 54
63815: PUSH
63816: LD_EXP 55
63820: PUSH
63821: LD_EXP 56
63825: PUSH
63826: LD_EXP 57
63830: PUSH
63831: LD_EXP 58
63835: PUSH
63836: LD_EXP 66
63840: PUSH
63841: LD_EXP 67
63845: PUSH
63846: LD_EXP 68
63850: PUSH
63851: LD_EXP 69
63855: PUSH
63856: LD_EXP 71
63860: PUSH
63861: LD_EXP 72
63865: PUSH
63866: LD_EXP 73
63870: PUSH
63871: LD_EXP 76
63875: PUSH
63876: LD_EXP 78
63880: PUSH
63881: LD_EXP 79
63885: PUSH
63886: LD_EXP 80
63890: PUSH
63891: LD_EXP 82
63895: PUSH
63896: LD_EXP 83
63900: PUSH
63901: LD_EXP 86
63905: PUSH
63906: LD_EXP 87
63910: PUSH
63911: LD_EXP 88
63915: PUSH
63916: LD_EXP 89
63920: PUSH
63921: LD_EXP 90
63925: PUSH
63926: LD_EXP 91
63930: PUSH
63931: LD_EXP 92
63935: PUSH
63936: LD_EXP 93
63940: PUSH
63941: LD_EXP 94
63945: PUSH
63946: LD_EXP 59
63950: PUSH
63951: LD_EXP 60
63955: PUSH
63956: LD_EXP 63
63960: PUSH
63961: LD_EXP 64
63965: PUSH
63966: LD_EXP 65
63970: PUSH
63971: LD_EXP 61
63975: PUSH
63976: LD_EXP 62
63980: PUSH
63981: LD_EXP 70
63985: PUSH
63986: LD_EXP 74
63990: PUSH
63991: LD_EXP 75
63995: PUSH
63996: LD_EXP 77
64000: PUSH
64001: LD_EXP 81
64005: PUSH
64006: LD_EXP 84
64010: PUSH
64011: LD_EXP 85
64015: PUSH
64016: LD_EXP 95
64020: PUSH
64021: LD_EXP 96
64025: PUSH
64026: LD_EXP 97
64030: PUSH
64031: LD_EXP 98
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: LIST
64040: LIST
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: LIST
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: LIST
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: ST_TO_ADDR
// tmp :=  ;
64092: LD_ADDR_VAR 0 3
64096: PUSH
64097: LD_STRING 
64099: ST_TO_ADDR
// for i = 1 to normalCounter do
64100: LD_ADDR_VAR 0 8
64104: PUSH
64105: DOUBLE
64106: LD_INT 1
64108: DEC
64109: ST_TO_ADDR
64110: LD_EXP 43
64114: PUSH
64115: FOR_TO
64116: IFFALSE 64152
// begin if flags [ i ] then
64118: LD_VAR 0 4
64122: PUSH
64123: LD_VAR 0 8
64127: ARRAY
64128: IFFALSE 64150
// tmp := tmp & i & ; ;
64130: LD_ADDR_VAR 0 3
64134: PUSH
64135: LD_VAR 0 3
64139: PUSH
64140: LD_VAR 0 8
64144: STR
64145: PUSH
64146: LD_STRING ;
64148: STR
64149: ST_TO_ADDR
// end ;
64150: GO 64115
64152: POP
64153: POP
// for i = 1 to hardcoreCounter do
64154: LD_ADDR_VAR 0 8
64158: PUSH
64159: DOUBLE
64160: LD_INT 1
64162: DEC
64163: ST_TO_ADDR
64164: LD_EXP 44
64168: PUSH
64169: FOR_TO
64170: IFFALSE 64216
// begin if flags [ normalCounter + i ] then
64172: LD_VAR 0 4
64176: PUSH
64177: LD_EXP 43
64181: PUSH
64182: LD_VAR 0 8
64186: PLUS
64187: ARRAY
64188: IFFALSE 64214
// tmp := tmp & ( 100 + i ) & ; ;
64190: LD_ADDR_VAR 0 3
64194: PUSH
64195: LD_VAR 0 3
64199: PUSH
64200: LD_INT 100
64202: PUSH
64203: LD_VAR 0 8
64207: PLUS
64208: STR
64209: PUSH
64210: LD_STRING ;
64212: STR
64213: ST_TO_ADDR
// end ;
64214: GO 64169
64216: POP
64217: POP
// if tmp then
64218: LD_VAR 0 3
64222: IFFALSE 64234
// active := tmp ;
64224: LD_ADDR_VAR 0 7
64228: PUSH
64229: LD_VAR 0 3
64233: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
64234: LD_STRING getStreamItemsFromMission("
64236: PUSH
64237: LD_VAR 0 5
64241: STR
64242: PUSH
64243: LD_STRING ","
64245: STR
64246: PUSH
64247: LD_VAR 0 6
64251: STR
64252: PUSH
64253: LD_STRING ","
64255: STR
64256: PUSH
64257: LD_VAR 0 7
64261: STR
64262: PUSH
64263: LD_STRING ")
64265: STR
64266: PPUSH
64267: CALL_OW 559
// end else
64271: GO 64280
// ToLua ( getStreamItemsFromMission("","","") ) ;
64273: LD_STRING getStreamItemsFromMission("","","")
64275: PPUSH
64276: CALL_OW 559
// end ;
64280: LD_VAR 0 2
64284: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
64285: LD_EXP 42
64289: PUSH
64290: LD_EXP 47
64294: AND
64295: IFFALSE 64419
64297: GO 64299
64299: DISABLE
64300: LD_INT 0
64302: PPUSH
64303: PPUSH
// begin enable ;
64304: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
64305: LD_ADDR_VAR 0 2
64309: PUSH
64310: LD_INT 22
64312: PUSH
64313: LD_OWVAR 2
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 2
64324: PUSH
64325: LD_INT 34
64327: PUSH
64328: LD_INT 7
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: LD_INT 34
64337: PUSH
64338: LD_INT 45
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: PUSH
64345: LD_INT 34
64347: PUSH
64348: LD_INT 28
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: LD_INT 34
64357: PUSH
64358: LD_INT 47
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: LIST
64369: LIST
64370: LIST
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: PPUSH
64376: CALL_OW 69
64380: ST_TO_ADDR
// if not tmp then
64381: LD_VAR 0 2
64385: NOT
64386: IFFALSE 64390
// exit ;
64388: GO 64419
// for i in tmp do
64390: LD_ADDR_VAR 0 1
64394: PUSH
64395: LD_VAR 0 2
64399: PUSH
64400: FOR_IN
64401: IFFALSE 64417
// begin SetLives ( i , 0 ) ;
64403: LD_VAR 0 1
64407: PPUSH
64408: LD_INT 0
64410: PPUSH
64411: CALL_OW 234
// end ;
64415: GO 64400
64417: POP
64418: POP
// end ;
64419: PPOPN 2
64421: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
64422: LD_EXP 42
64426: PUSH
64427: LD_EXP 48
64431: AND
64432: IFFALSE 64516
64434: GO 64436
64436: DISABLE
64437: LD_INT 0
64439: PPUSH
64440: PPUSH
// begin enable ;
64441: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
64442: LD_ADDR_VAR 0 2
64446: PUSH
64447: LD_INT 22
64449: PUSH
64450: LD_OWVAR 2
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: PUSH
64459: LD_INT 32
64461: PUSH
64462: LD_INT 3
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: PPUSH
64473: CALL_OW 69
64477: ST_TO_ADDR
// if not tmp then
64478: LD_VAR 0 2
64482: NOT
64483: IFFALSE 64487
// exit ;
64485: GO 64516
// for i in tmp do
64487: LD_ADDR_VAR 0 1
64491: PUSH
64492: LD_VAR 0 2
64496: PUSH
64497: FOR_IN
64498: IFFALSE 64514
// begin SetLives ( i , 0 ) ;
64500: LD_VAR 0 1
64504: PPUSH
64505: LD_INT 0
64507: PPUSH
64508: CALL_OW 234
// end ;
64512: GO 64497
64514: POP
64515: POP
// end ;
64516: PPOPN 2
64518: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
64519: LD_EXP 42
64523: PUSH
64524: LD_EXP 45
64528: AND
64529: IFFALSE 64622
64531: GO 64533
64533: DISABLE
64534: LD_INT 0
64536: PPUSH
// begin enable ;
64537: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
64538: LD_ADDR_VAR 0 1
64542: PUSH
64543: LD_INT 22
64545: PUSH
64546: LD_OWVAR 2
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: LD_INT 2
64557: PUSH
64558: LD_INT 25
64560: PUSH
64561: LD_INT 5
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: PUSH
64568: LD_INT 25
64570: PUSH
64571: LD_INT 9
64573: PUSH
64574: EMPTY
64575: LIST
64576: LIST
64577: PUSH
64578: LD_INT 25
64580: PUSH
64581: LD_INT 8
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: LIST
64592: LIST
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PPUSH
64598: CALL_OW 69
64602: PUSH
64603: FOR_IN
64604: IFFALSE 64620
// begin SetClass ( i , 1 ) ;
64606: LD_VAR 0 1
64610: PPUSH
64611: LD_INT 1
64613: PPUSH
64614: CALL_OW 336
// end ;
64618: GO 64603
64620: POP
64621: POP
// end ;
64622: PPOPN 1
64624: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
64625: LD_EXP 42
64629: PUSH
64630: LD_EXP 46
64634: AND
64635: PUSH
64636: LD_OWVAR 65
64640: PUSH
64641: LD_INT 7
64643: LESS
64644: AND
64645: IFFALSE 64659
64647: GO 64649
64649: DISABLE
// begin enable ;
64650: ENABLE
// game_speed := 7 ;
64651: LD_ADDR_OWVAR 65
64655: PUSH
64656: LD_INT 7
64658: ST_TO_ADDR
// end ;
64659: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
64660: LD_EXP 42
64664: PUSH
64665: LD_EXP 49
64669: AND
64670: IFFALSE 64872
64672: GO 64674
64674: DISABLE
64675: LD_INT 0
64677: PPUSH
64678: PPUSH
64679: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
64680: LD_ADDR_VAR 0 3
64684: PUSH
64685: LD_INT 81
64687: PUSH
64688: LD_OWVAR 2
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: PUSH
64697: LD_INT 21
64699: PUSH
64700: LD_INT 1
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: PPUSH
64711: CALL_OW 69
64715: ST_TO_ADDR
// if not tmp then
64716: LD_VAR 0 3
64720: NOT
64721: IFFALSE 64725
// exit ;
64723: GO 64872
// if tmp > 5 then
64725: LD_VAR 0 3
64729: PUSH
64730: LD_INT 5
64732: GREATER
64733: IFFALSE 64745
// k := 5 else
64735: LD_ADDR_VAR 0 2
64739: PUSH
64740: LD_INT 5
64742: ST_TO_ADDR
64743: GO 64755
// k := tmp ;
64745: LD_ADDR_VAR 0 2
64749: PUSH
64750: LD_VAR 0 3
64754: ST_TO_ADDR
// for i := 1 to k do
64755: LD_ADDR_VAR 0 1
64759: PUSH
64760: DOUBLE
64761: LD_INT 1
64763: DEC
64764: ST_TO_ADDR
64765: LD_VAR 0 2
64769: PUSH
64770: FOR_TO
64771: IFFALSE 64870
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
64773: LD_VAR 0 3
64777: PUSH
64778: LD_VAR 0 1
64782: ARRAY
64783: PPUSH
64784: LD_VAR 0 1
64788: PUSH
64789: LD_INT 4
64791: MOD
64792: PUSH
64793: LD_INT 1
64795: PLUS
64796: PPUSH
64797: CALL_OW 259
64801: PUSH
64802: LD_INT 10
64804: LESS
64805: IFFALSE 64868
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
64807: LD_VAR 0 3
64811: PUSH
64812: LD_VAR 0 1
64816: ARRAY
64817: PPUSH
64818: LD_VAR 0 1
64822: PUSH
64823: LD_INT 4
64825: MOD
64826: PUSH
64827: LD_INT 1
64829: PLUS
64830: PPUSH
64831: LD_VAR 0 3
64835: PUSH
64836: LD_VAR 0 1
64840: ARRAY
64841: PPUSH
64842: LD_VAR 0 1
64846: PUSH
64847: LD_INT 4
64849: MOD
64850: PUSH
64851: LD_INT 1
64853: PLUS
64854: PPUSH
64855: CALL_OW 259
64859: PUSH
64860: LD_INT 1
64862: PLUS
64863: PPUSH
64864: CALL_OW 237
64868: GO 64770
64870: POP
64871: POP
// end ;
64872: PPOPN 3
64874: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
64875: LD_EXP 42
64879: PUSH
64880: LD_EXP 50
64884: AND
64885: IFFALSE 64905
64887: GO 64889
64889: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
64890: LD_INT 4
64892: PPUSH
64893: LD_OWVAR 2
64897: PPUSH
64898: LD_INT 0
64900: PPUSH
64901: CALL_OW 324
64905: END
// every 0 0$1 trigger StreamModeActive and sShovel do
64906: LD_EXP 42
64910: PUSH
64911: LD_EXP 79
64915: AND
64916: IFFALSE 64936
64918: GO 64920
64920: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
64921: LD_INT 19
64923: PPUSH
64924: LD_OWVAR 2
64928: PPUSH
64929: LD_INT 0
64931: PPUSH
64932: CALL_OW 324
64936: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
64937: LD_EXP 42
64941: PUSH
64942: LD_EXP 51
64946: AND
64947: IFFALSE 65049
64949: GO 64951
64951: DISABLE
64952: LD_INT 0
64954: PPUSH
64955: PPUSH
// begin enable ;
64956: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
64957: LD_ADDR_VAR 0 2
64961: PUSH
64962: LD_INT 22
64964: PUSH
64965: LD_OWVAR 2
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: PUSH
64974: LD_INT 2
64976: PUSH
64977: LD_INT 34
64979: PUSH
64980: LD_INT 11
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: PUSH
64987: LD_INT 34
64989: PUSH
64990: LD_INT 30
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: LIST
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: PPUSH
65006: CALL_OW 69
65010: ST_TO_ADDR
// if not tmp then
65011: LD_VAR 0 2
65015: NOT
65016: IFFALSE 65020
// exit ;
65018: GO 65049
// for i in tmp do
65020: LD_ADDR_VAR 0 1
65024: PUSH
65025: LD_VAR 0 2
65029: PUSH
65030: FOR_IN
65031: IFFALSE 65047
// begin SetLives ( i , 0 ) ;
65033: LD_VAR 0 1
65037: PPUSH
65038: LD_INT 0
65040: PPUSH
65041: CALL_OW 234
// end ;
65045: GO 65030
65047: POP
65048: POP
// end ;
65049: PPOPN 2
65051: END
// every 0 0$1 trigger StreamModeActive and sBunker do
65052: LD_EXP 42
65056: PUSH
65057: LD_EXP 52
65061: AND
65062: IFFALSE 65082
65064: GO 65066
65066: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
65067: LD_INT 32
65069: PPUSH
65070: LD_OWVAR 2
65074: PPUSH
65075: LD_INT 0
65077: PPUSH
65078: CALL_OW 324
65082: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
65083: LD_EXP 42
65087: PUSH
65088: LD_EXP 53
65092: AND
65093: IFFALSE 65274
65095: GO 65097
65097: DISABLE
65098: LD_INT 0
65100: PPUSH
65101: PPUSH
65102: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
65103: LD_ADDR_VAR 0 2
65107: PUSH
65108: LD_INT 22
65110: PUSH
65111: LD_OWVAR 2
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: PUSH
65120: LD_INT 33
65122: PUSH
65123: LD_INT 3
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PUSH
65130: EMPTY
65131: LIST
65132: LIST
65133: PPUSH
65134: CALL_OW 69
65138: ST_TO_ADDR
// if not tmp then
65139: LD_VAR 0 2
65143: NOT
65144: IFFALSE 65148
// exit ;
65146: GO 65274
// side := 0 ;
65148: LD_ADDR_VAR 0 3
65152: PUSH
65153: LD_INT 0
65155: ST_TO_ADDR
// for i := 1 to 8 do
65156: LD_ADDR_VAR 0 1
65160: PUSH
65161: DOUBLE
65162: LD_INT 1
65164: DEC
65165: ST_TO_ADDR
65166: LD_INT 8
65168: PUSH
65169: FOR_TO
65170: IFFALSE 65218
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
65172: LD_OWVAR 2
65176: PUSH
65177: LD_VAR 0 1
65181: NONEQUAL
65182: PUSH
65183: LD_OWVAR 2
65187: PPUSH
65188: LD_VAR 0 1
65192: PPUSH
65193: CALL_OW 81
65197: PUSH
65198: LD_INT 2
65200: EQUAL
65201: AND
65202: IFFALSE 65216
// begin side := i ;
65204: LD_ADDR_VAR 0 3
65208: PUSH
65209: LD_VAR 0 1
65213: ST_TO_ADDR
// break ;
65214: GO 65218
// end ;
65216: GO 65169
65218: POP
65219: POP
// if not side then
65220: LD_VAR 0 3
65224: NOT
65225: IFFALSE 65229
// exit ;
65227: GO 65274
// for i := 1 to tmp do
65229: LD_ADDR_VAR 0 1
65233: PUSH
65234: DOUBLE
65235: LD_INT 1
65237: DEC
65238: ST_TO_ADDR
65239: LD_VAR 0 2
65243: PUSH
65244: FOR_TO
65245: IFFALSE 65272
// if Prob ( 60 ) then
65247: LD_INT 60
65249: PPUSH
65250: CALL_OW 13
65254: IFFALSE 65270
// SetSide ( i , side ) ;
65256: LD_VAR 0 1
65260: PPUSH
65261: LD_VAR 0 3
65265: PPUSH
65266: CALL_OW 235
65270: GO 65244
65272: POP
65273: POP
// end ;
65274: PPOPN 3
65276: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
65277: LD_EXP 42
65281: PUSH
65282: LD_EXP 55
65286: AND
65287: IFFALSE 65406
65289: GO 65291
65291: DISABLE
65292: LD_INT 0
65294: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
65295: LD_ADDR_VAR 0 1
65299: PUSH
65300: LD_INT 22
65302: PUSH
65303: LD_OWVAR 2
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: PUSH
65312: LD_INT 21
65314: PUSH
65315: LD_INT 1
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: PUSH
65322: LD_INT 3
65324: PUSH
65325: LD_INT 23
65327: PUSH
65328: LD_INT 0
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: LIST
65343: PPUSH
65344: CALL_OW 69
65348: PUSH
65349: FOR_IN
65350: IFFALSE 65404
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
65352: LD_VAR 0 1
65356: PPUSH
65357: CALL_OW 257
65361: PUSH
65362: LD_INT 1
65364: PUSH
65365: LD_INT 2
65367: PUSH
65368: LD_INT 3
65370: PUSH
65371: LD_INT 4
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: LIST
65378: LIST
65379: IN
65380: IFFALSE 65402
// SetClass ( un , rand ( 1 , 4 ) ) ;
65382: LD_VAR 0 1
65386: PPUSH
65387: LD_INT 1
65389: PPUSH
65390: LD_INT 4
65392: PPUSH
65393: CALL_OW 12
65397: PPUSH
65398: CALL_OW 336
65402: GO 65349
65404: POP
65405: POP
// end ;
65406: PPOPN 1
65408: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
65409: LD_EXP 42
65413: PUSH
65414: LD_EXP 54
65418: AND
65419: IFFALSE 65498
65421: GO 65423
65423: DISABLE
65424: LD_INT 0
65426: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
65427: LD_ADDR_VAR 0 1
65431: PUSH
65432: LD_INT 22
65434: PUSH
65435: LD_OWVAR 2
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: PUSH
65444: LD_INT 21
65446: PUSH
65447: LD_INT 3
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: PPUSH
65458: CALL_OW 69
65462: ST_TO_ADDR
// if not tmp then
65463: LD_VAR 0 1
65467: NOT
65468: IFFALSE 65472
// exit ;
65470: GO 65498
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
65472: LD_VAR 0 1
65476: PUSH
65477: LD_INT 1
65479: PPUSH
65480: LD_VAR 0 1
65484: PPUSH
65485: CALL_OW 12
65489: ARRAY
65490: PPUSH
65491: LD_INT 100
65493: PPUSH
65494: CALL_OW 234
// end ;
65498: PPOPN 1
65500: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
65501: LD_EXP 42
65505: PUSH
65506: LD_EXP 56
65510: AND
65511: IFFALSE 65609
65513: GO 65515
65515: DISABLE
65516: LD_INT 0
65518: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
65519: LD_ADDR_VAR 0 1
65523: PUSH
65524: LD_INT 22
65526: PUSH
65527: LD_OWVAR 2
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: PUSH
65536: LD_INT 21
65538: PUSH
65539: LD_INT 1
65541: PUSH
65542: EMPTY
65543: LIST
65544: LIST
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: PPUSH
65550: CALL_OW 69
65554: ST_TO_ADDR
// if not tmp then
65555: LD_VAR 0 1
65559: NOT
65560: IFFALSE 65564
// exit ;
65562: GO 65609
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
65564: LD_VAR 0 1
65568: PUSH
65569: LD_INT 1
65571: PPUSH
65572: LD_VAR 0 1
65576: PPUSH
65577: CALL_OW 12
65581: ARRAY
65582: PPUSH
65583: LD_INT 1
65585: PPUSH
65586: LD_INT 4
65588: PPUSH
65589: CALL_OW 12
65593: PPUSH
65594: LD_INT 3000
65596: PPUSH
65597: LD_INT 9000
65599: PPUSH
65600: CALL_OW 12
65604: PPUSH
65605: CALL_OW 492
// end ;
65609: PPOPN 1
65611: END
// every 0 0$1 trigger StreamModeActive and sDepot do
65612: LD_EXP 42
65616: PUSH
65617: LD_EXP 57
65621: AND
65622: IFFALSE 65642
65624: GO 65626
65626: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
65627: LD_INT 1
65629: PPUSH
65630: LD_OWVAR 2
65634: PPUSH
65635: LD_INT 0
65637: PPUSH
65638: CALL_OW 324
65642: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
65643: LD_EXP 42
65647: PUSH
65648: LD_EXP 58
65652: AND
65653: IFFALSE 65736
65655: GO 65657
65657: DISABLE
65658: LD_INT 0
65660: PPUSH
65661: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
65662: LD_ADDR_VAR 0 2
65666: PUSH
65667: LD_INT 22
65669: PUSH
65670: LD_OWVAR 2
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: PUSH
65679: LD_INT 21
65681: PUSH
65682: LD_INT 3
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PPUSH
65693: CALL_OW 69
65697: ST_TO_ADDR
// if not tmp then
65698: LD_VAR 0 2
65702: NOT
65703: IFFALSE 65707
// exit ;
65705: GO 65736
// for i in tmp do
65707: LD_ADDR_VAR 0 1
65711: PUSH
65712: LD_VAR 0 2
65716: PUSH
65717: FOR_IN
65718: IFFALSE 65734
// SetBLevel ( i , 10 ) ;
65720: LD_VAR 0 1
65724: PPUSH
65725: LD_INT 10
65727: PPUSH
65728: CALL_OW 241
65732: GO 65717
65734: POP
65735: POP
// end ;
65736: PPOPN 2
65738: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
65739: LD_EXP 42
65743: PUSH
65744: LD_EXP 59
65748: AND
65749: IFFALSE 65860
65751: GO 65753
65753: DISABLE
65754: LD_INT 0
65756: PPUSH
65757: PPUSH
65758: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
65759: LD_ADDR_VAR 0 3
65763: PUSH
65764: LD_INT 22
65766: PUSH
65767: LD_OWVAR 2
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PUSH
65776: LD_INT 25
65778: PUSH
65779: LD_INT 1
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PPUSH
65790: CALL_OW 69
65794: ST_TO_ADDR
// if not tmp then
65795: LD_VAR 0 3
65799: NOT
65800: IFFALSE 65804
// exit ;
65802: GO 65860
// un := tmp [ rand ( 1 , tmp ) ] ;
65804: LD_ADDR_VAR 0 2
65808: PUSH
65809: LD_VAR 0 3
65813: PUSH
65814: LD_INT 1
65816: PPUSH
65817: LD_VAR 0 3
65821: PPUSH
65822: CALL_OW 12
65826: ARRAY
65827: ST_TO_ADDR
// if Crawls ( un ) then
65828: LD_VAR 0 2
65832: PPUSH
65833: CALL_OW 318
65837: IFFALSE 65848
// ComWalk ( un ) ;
65839: LD_VAR 0 2
65843: PPUSH
65844: CALL_OW 138
// SetClass ( un , class_sniper ) ;
65848: LD_VAR 0 2
65852: PPUSH
65853: LD_INT 5
65855: PPUSH
65856: CALL_OW 336
// end ;
65860: PPOPN 3
65862: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
65863: LD_EXP 42
65867: PUSH
65868: LD_EXP 60
65872: AND
65873: PUSH
65874: LD_OWVAR 67
65878: PUSH
65879: LD_INT 4
65881: LESS
65882: AND
65883: IFFALSE 65902
65885: GO 65887
65887: DISABLE
// begin Difficulty := Difficulty + 1 ;
65888: LD_ADDR_OWVAR 67
65892: PUSH
65893: LD_OWVAR 67
65897: PUSH
65898: LD_INT 1
65900: PLUS
65901: ST_TO_ADDR
// end ;
65902: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
65903: LD_EXP 42
65907: PUSH
65908: LD_EXP 61
65912: AND
65913: IFFALSE 66016
65915: GO 65917
65917: DISABLE
65918: LD_INT 0
65920: PPUSH
// begin for i := 1 to 5 do
65921: LD_ADDR_VAR 0 1
65925: PUSH
65926: DOUBLE
65927: LD_INT 1
65929: DEC
65930: ST_TO_ADDR
65931: LD_INT 5
65933: PUSH
65934: FOR_TO
65935: IFFALSE 66014
// begin uc_nation := nation_nature ;
65937: LD_ADDR_OWVAR 21
65941: PUSH
65942: LD_INT 0
65944: ST_TO_ADDR
// uc_side := 0 ;
65945: LD_ADDR_OWVAR 20
65949: PUSH
65950: LD_INT 0
65952: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
65953: LD_ADDR_OWVAR 29
65957: PUSH
65958: LD_INT 12
65960: PUSH
65961: LD_INT 12
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: ST_TO_ADDR
// hc_agressivity := 20 ;
65968: LD_ADDR_OWVAR 35
65972: PUSH
65973: LD_INT 20
65975: ST_TO_ADDR
// hc_class := class_tiger ;
65976: LD_ADDR_OWVAR 28
65980: PUSH
65981: LD_INT 14
65983: ST_TO_ADDR
// hc_gallery :=  ;
65984: LD_ADDR_OWVAR 33
65988: PUSH
65989: LD_STRING 
65991: ST_TO_ADDR
// hc_name :=  ;
65992: LD_ADDR_OWVAR 26
65996: PUSH
65997: LD_STRING 
65999: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
66000: CALL_OW 44
66004: PPUSH
66005: LD_INT 0
66007: PPUSH
66008: CALL_OW 51
// end ;
66012: GO 65934
66014: POP
66015: POP
// end ;
66016: PPOPN 1
66018: END
// every 0 0$1 trigger StreamModeActive and sBomb do
66019: LD_EXP 42
66023: PUSH
66024: LD_EXP 62
66028: AND
66029: IFFALSE 66038
66031: GO 66033
66033: DISABLE
// StreamSibBomb ;
66034: CALL 66039 0 0
66038: END
// export function StreamSibBomb ; var i , x , y ; begin
66039: LD_INT 0
66041: PPUSH
66042: PPUSH
66043: PPUSH
66044: PPUSH
// result := false ;
66045: LD_ADDR_VAR 0 1
66049: PUSH
66050: LD_INT 0
66052: ST_TO_ADDR
// for i := 1 to 16 do
66053: LD_ADDR_VAR 0 2
66057: PUSH
66058: DOUBLE
66059: LD_INT 1
66061: DEC
66062: ST_TO_ADDR
66063: LD_INT 16
66065: PUSH
66066: FOR_TO
66067: IFFALSE 66266
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
66069: LD_ADDR_VAR 0 3
66073: PUSH
66074: LD_INT 10
66076: PUSH
66077: LD_INT 20
66079: PUSH
66080: LD_INT 30
66082: PUSH
66083: LD_INT 40
66085: PUSH
66086: LD_INT 50
66088: PUSH
66089: LD_INT 60
66091: PUSH
66092: LD_INT 70
66094: PUSH
66095: LD_INT 80
66097: PUSH
66098: LD_INT 90
66100: PUSH
66101: LD_INT 100
66103: PUSH
66104: LD_INT 110
66106: PUSH
66107: LD_INT 120
66109: PUSH
66110: LD_INT 130
66112: PUSH
66113: LD_INT 140
66115: PUSH
66116: LD_INT 150
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: LIST
66132: LIST
66133: LIST
66134: LIST
66135: PUSH
66136: LD_INT 1
66138: PPUSH
66139: LD_INT 15
66141: PPUSH
66142: CALL_OW 12
66146: ARRAY
66147: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
66148: LD_ADDR_VAR 0 4
66152: PUSH
66153: LD_INT 10
66155: PUSH
66156: LD_INT 20
66158: PUSH
66159: LD_INT 30
66161: PUSH
66162: LD_INT 40
66164: PUSH
66165: LD_INT 50
66167: PUSH
66168: LD_INT 60
66170: PUSH
66171: LD_INT 70
66173: PUSH
66174: LD_INT 80
66176: PUSH
66177: LD_INT 90
66179: PUSH
66180: LD_INT 100
66182: PUSH
66183: LD_INT 110
66185: PUSH
66186: LD_INT 120
66188: PUSH
66189: LD_INT 130
66191: PUSH
66192: LD_INT 140
66194: PUSH
66195: LD_INT 150
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: LIST
66204: LIST
66205: LIST
66206: LIST
66207: LIST
66208: LIST
66209: LIST
66210: LIST
66211: LIST
66212: LIST
66213: LIST
66214: PUSH
66215: LD_INT 1
66217: PPUSH
66218: LD_INT 15
66220: PPUSH
66221: CALL_OW 12
66225: ARRAY
66226: ST_TO_ADDR
// if ValidHex ( x , y ) then
66227: LD_VAR 0 3
66231: PPUSH
66232: LD_VAR 0 4
66236: PPUSH
66237: CALL_OW 488
66241: IFFALSE 66264
// begin result := [ x , y ] ;
66243: LD_ADDR_VAR 0 1
66247: PUSH
66248: LD_VAR 0 3
66252: PUSH
66253: LD_VAR 0 4
66257: PUSH
66258: EMPTY
66259: LIST
66260: LIST
66261: ST_TO_ADDR
// break ;
66262: GO 66266
// end ; end ;
66264: GO 66066
66266: POP
66267: POP
// if result then
66268: LD_VAR 0 1
66272: IFFALSE 66332
// begin ToLua ( playSibBomb() ) ;
66274: LD_STRING playSibBomb()
66276: PPUSH
66277: CALL_OW 559
// wait ( 0 0$14 ) ;
66281: LD_INT 490
66283: PPUSH
66284: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
66288: LD_VAR 0 1
66292: PUSH
66293: LD_INT 1
66295: ARRAY
66296: PPUSH
66297: LD_VAR 0 1
66301: PUSH
66302: LD_INT 2
66304: ARRAY
66305: PPUSH
66306: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
66310: LD_VAR 0 1
66314: PUSH
66315: LD_INT 1
66317: ARRAY
66318: PPUSH
66319: LD_VAR 0 1
66323: PUSH
66324: LD_INT 2
66326: ARRAY
66327: PPUSH
66328: CALL_OW 429
// end ; end ;
66332: LD_VAR 0 1
66336: RET
// every 0 0$1 trigger StreamModeActive and sReset do
66337: LD_EXP 42
66341: PUSH
66342: LD_EXP 64
66346: AND
66347: IFFALSE 66359
66349: GO 66351
66351: DISABLE
// YouLost (  ) ;
66352: LD_STRING 
66354: PPUSH
66355: CALL_OW 104
66359: END
// every 0 0$1 trigger StreamModeActive and sFog do
66360: LD_EXP 42
66364: PUSH
66365: LD_EXP 63
66369: AND
66370: IFFALSE 66384
66372: GO 66374
66374: DISABLE
// FogOff ( your_side ) ;
66375: LD_OWVAR 2
66379: PPUSH
66380: CALL_OW 344
66384: END
// every 0 0$1 trigger StreamModeActive and sSun do
66385: LD_EXP 42
66389: PUSH
66390: LD_EXP 65
66394: AND
66395: IFFALSE 66423
66397: GO 66399
66399: DISABLE
// begin solar_recharge_percent := 0 ;
66400: LD_ADDR_OWVAR 79
66404: PUSH
66405: LD_INT 0
66407: ST_TO_ADDR
// wait ( 5 5$00 ) ;
66408: LD_INT 10500
66410: PPUSH
66411: CALL_OW 67
// solar_recharge_percent := 100 ;
66415: LD_ADDR_OWVAR 79
66419: PUSH
66420: LD_INT 100
66422: ST_TO_ADDR
// end ;
66423: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
66424: LD_EXP 42
66428: PUSH
66429: LD_EXP 66
66433: AND
66434: IFFALSE 66673
66436: GO 66438
66438: DISABLE
66439: LD_INT 0
66441: PPUSH
66442: PPUSH
66443: PPUSH
// begin tmp := [ ] ;
66444: LD_ADDR_VAR 0 3
66448: PUSH
66449: EMPTY
66450: ST_TO_ADDR
// for i := 1 to 6 do
66451: LD_ADDR_VAR 0 1
66455: PUSH
66456: DOUBLE
66457: LD_INT 1
66459: DEC
66460: ST_TO_ADDR
66461: LD_INT 6
66463: PUSH
66464: FOR_TO
66465: IFFALSE 66570
// begin uc_nation := nation_nature ;
66467: LD_ADDR_OWVAR 21
66471: PUSH
66472: LD_INT 0
66474: ST_TO_ADDR
// uc_side := 0 ;
66475: LD_ADDR_OWVAR 20
66479: PUSH
66480: LD_INT 0
66482: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
66483: LD_ADDR_OWVAR 29
66487: PUSH
66488: LD_INT 12
66490: PUSH
66491: LD_INT 12
66493: PUSH
66494: EMPTY
66495: LIST
66496: LIST
66497: ST_TO_ADDR
// hc_agressivity := 20 ;
66498: LD_ADDR_OWVAR 35
66502: PUSH
66503: LD_INT 20
66505: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
66506: LD_ADDR_OWVAR 28
66510: PUSH
66511: LD_INT 17
66513: ST_TO_ADDR
// hc_gallery :=  ;
66514: LD_ADDR_OWVAR 33
66518: PUSH
66519: LD_STRING 
66521: ST_TO_ADDR
// hc_name :=  ;
66522: LD_ADDR_OWVAR 26
66526: PUSH
66527: LD_STRING 
66529: ST_TO_ADDR
// un := CreateHuman ;
66530: LD_ADDR_VAR 0 2
66534: PUSH
66535: CALL_OW 44
66539: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
66540: LD_VAR 0 2
66544: PPUSH
66545: LD_INT 1
66547: PPUSH
66548: CALL_OW 51
// tmp := tmp ^ un ;
66552: LD_ADDR_VAR 0 3
66556: PUSH
66557: LD_VAR 0 3
66561: PUSH
66562: LD_VAR 0 2
66566: ADD
66567: ST_TO_ADDR
// end ;
66568: GO 66464
66570: POP
66571: POP
// repeat wait ( 0 0$1 ) ;
66572: LD_INT 35
66574: PPUSH
66575: CALL_OW 67
// for un in tmp do
66579: LD_ADDR_VAR 0 2
66583: PUSH
66584: LD_VAR 0 3
66588: PUSH
66589: FOR_IN
66590: IFFALSE 66664
// begin if IsDead ( un ) then
66592: LD_VAR 0 2
66596: PPUSH
66597: CALL_OW 301
66601: IFFALSE 66621
// begin tmp := tmp diff un ;
66603: LD_ADDR_VAR 0 3
66607: PUSH
66608: LD_VAR 0 3
66612: PUSH
66613: LD_VAR 0 2
66617: DIFF
66618: ST_TO_ADDR
// continue ;
66619: GO 66589
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
66621: LD_VAR 0 2
66625: PPUSH
66626: LD_INT 3
66628: PUSH
66629: LD_INT 22
66631: PUSH
66632: LD_INT 0
66634: PUSH
66635: EMPTY
66636: LIST
66637: LIST
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: PPUSH
66643: CALL_OW 69
66647: PPUSH
66648: LD_VAR 0 2
66652: PPUSH
66653: CALL_OW 74
66657: PPUSH
66658: CALL_OW 115
// end ;
66662: GO 66589
66664: POP
66665: POP
// until not tmp ;
66666: LD_VAR 0 3
66670: NOT
66671: IFFALSE 66572
// end ;
66673: PPOPN 3
66675: END
// every 0 0$1 trigger StreamModeActive and sTroll do
66676: LD_EXP 42
66680: PUSH
66681: LD_EXP 67
66685: AND
66686: IFFALSE 66740
66688: GO 66690
66690: DISABLE
// begin ToLua ( displayTroll(); ) ;
66691: LD_STRING displayTroll();
66693: PPUSH
66694: CALL_OW 559
// wait ( 3 3$00 ) ;
66698: LD_INT 6300
66700: PPUSH
66701: CALL_OW 67
// ToLua ( hideTroll(); ) ;
66705: LD_STRING hideTroll();
66707: PPUSH
66708: CALL_OW 559
// wait ( 1 1$00 ) ;
66712: LD_INT 2100
66714: PPUSH
66715: CALL_OW 67
// ToLua ( displayTroll(); ) ;
66719: LD_STRING displayTroll();
66721: PPUSH
66722: CALL_OW 559
// wait ( 1 1$00 ) ;
66726: LD_INT 2100
66728: PPUSH
66729: CALL_OW 67
// ToLua ( hideTroll(); ) ;
66733: LD_STRING hideTroll();
66735: PPUSH
66736: CALL_OW 559
// end ;
66740: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
66741: LD_EXP 42
66745: PUSH
66746: LD_EXP 68
66750: AND
66751: IFFALSE 66814
66753: GO 66755
66755: DISABLE
66756: LD_INT 0
66758: PPUSH
// begin p := 0 ;
66759: LD_ADDR_VAR 0 1
66763: PUSH
66764: LD_INT 0
66766: ST_TO_ADDR
// repeat game_speed := 1 ;
66767: LD_ADDR_OWVAR 65
66771: PUSH
66772: LD_INT 1
66774: ST_TO_ADDR
// wait ( 0 0$1 ) ;
66775: LD_INT 35
66777: PPUSH
66778: CALL_OW 67
// p := p + 1 ;
66782: LD_ADDR_VAR 0 1
66786: PUSH
66787: LD_VAR 0 1
66791: PUSH
66792: LD_INT 1
66794: PLUS
66795: ST_TO_ADDR
// until p >= 60 ;
66796: LD_VAR 0 1
66800: PUSH
66801: LD_INT 60
66803: GREATEREQUAL
66804: IFFALSE 66767
// game_speed := 4 ;
66806: LD_ADDR_OWVAR 65
66810: PUSH
66811: LD_INT 4
66813: ST_TO_ADDR
// end ;
66814: PPOPN 1
66816: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
66817: LD_EXP 42
66821: PUSH
66822: LD_EXP 69
66826: AND
66827: IFFALSE 66973
66829: GO 66831
66831: DISABLE
66832: LD_INT 0
66834: PPUSH
66835: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66836: LD_ADDR_VAR 0 1
66840: PUSH
66841: LD_INT 22
66843: PUSH
66844: LD_OWVAR 2
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: PUSH
66853: LD_INT 2
66855: PUSH
66856: LD_INT 30
66858: PUSH
66859: LD_INT 0
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: PUSH
66866: LD_INT 30
66868: PUSH
66869: LD_INT 1
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: EMPTY
66877: LIST
66878: LIST
66879: LIST
66880: PUSH
66881: EMPTY
66882: LIST
66883: LIST
66884: PPUSH
66885: CALL_OW 69
66889: ST_TO_ADDR
// if not depot then
66890: LD_VAR 0 1
66894: NOT
66895: IFFALSE 66899
// exit ;
66897: GO 66973
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
66899: LD_ADDR_VAR 0 2
66903: PUSH
66904: LD_VAR 0 1
66908: PUSH
66909: LD_INT 1
66911: PPUSH
66912: LD_VAR 0 1
66916: PPUSH
66917: CALL_OW 12
66921: ARRAY
66922: PPUSH
66923: CALL_OW 274
66927: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
66928: LD_VAR 0 2
66932: PPUSH
66933: LD_INT 1
66935: PPUSH
66936: LD_INT 0
66938: PPUSH
66939: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
66943: LD_VAR 0 2
66947: PPUSH
66948: LD_INT 2
66950: PPUSH
66951: LD_INT 0
66953: PPUSH
66954: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
66958: LD_VAR 0 2
66962: PPUSH
66963: LD_INT 3
66965: PPUSH
66966: LD_INT 0
66968: PPUSH
66969: CALL_OW 277
// end ;
66973: PPOPN 2
66975: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
66976: LD_EXP 42
66980: PUSH
66981: LD_EXP 70
66985: AND
66986: IFFALSE 67083
66988: GO 66990
66990: DISABLE
66991: LD_INT 0
66993: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
66994: LD_ADDR_VAR 0 1
66998: PUSH
66999: LD_INT 22
67001: PUSH
67002: LD_OWVAR 2
67006: PUSH
67007: EMPTY
67008: LIST
67009: LIST
67010: PUSH
67011: LD_INT 21
67013: PUSH
67014: LD_INT 1
67016: PUSH
67017: EMPTY
67018: LIST
67019: LIST
67020: PUSH
67021: LD_INT 3
67023: PUSH
67024: LD_INT 23
67026: PUSH
67027: LD_INT 0
67029: PUSH
67030: EMPTY
67031: LIST
67032: LIST
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: LIST
67042: PPUSH
67043: CALL_OW 69
67047: ST_TO_ADDR
// if not tmp then
67048: LD_VAR 0 1
67052: NOT
67053: IFFALSE 67057
// exit ;
67055: GO 67083
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
67057: LD_VAR 0 1
67061: PUSH
67062: LD_INT 1
67064: PPUSH
67065: LD_VAR 0 1
67069: PPUSH
67070: CALL_OW 12
67074: ARRAY
67075: PPUSH
67076: LD_INT 200
67078: PPUSH
67079: CALL_OW 234
// end ;
67083: PPOPN 1
67085: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
67086: LD_EXP 42
67090: PUSH
67091: LD_EXP 71
67095: AND
67096: IFFALSE 67175
67098: GO 67100
67100: DISABLE
67101: LD_INT 0
67103: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
67104: LD_ADDR_VAR 0 1
67108: PUSH
67109: LD_INT 22
67111: PUSH
67112: LD_OWVAR 2
67116: PUSH
67117: EMPTY
67118: LIST
67119: LIST
67120: PUSH
67121: LD_INT 21
67123: PUSH
67124: LD_INT 2
67126: PUSH
67127: EMPTY
67128: LIST
67129: LIST
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PPUSH
67135: CALL_OW 69
67139: ST_TO_ADDR
// if not tmp then
67140: LD_VAR 0 1
67144: NOT
67145: IFFALSE 67149
// exit ;
67147: GO 67175
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
67149: LD_VAR 0 1
67153: PUSH
67154: LD_INT 1
67156: PPUSH
67157: LD_VAR 0 1
67161: PPUSH
67162: CALL_OW 12
67166: ARRAY
67167: PPUSH
67168: LD_INT 60
67170: PPUSH
67171: CALL_OW 234
// end ;
67175: PPOPN 1
67177: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
67178: LD_EXP 42
67182: PUSH
67183: LD_EXP 72
67187: AND
67188: IFFALSE 67287
67190: GO 67192
67192: DISABLE
67193: LD_INT 0
67195: PPUSH
67196: PPUSH
// begin enable ;
67197: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
67198: LD_ADDR_VAR 0 1
67202: PUSH
67203: LD_INT 22
67205: PUSH
67206: LD_OWVAR 2
67210: PUSH
67211: EMPTY
67212: LIST
67213: LIST
67214: PUSH
67215: LD_INT 61
67217: PUSH
67218: EMPTY
67219: LIST
67220: PUSH
67221: LD_INT 33
67223: PUSH
67224: LD_INT 2
67226: PUSH
67227: EMPTY
67228: LIST
67229: LIST
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: LIST
67235: PPUSH
67236: CALL_OW 69
67240: ST_TO_ADDR
// if not tmp then
67241: LD_VAR 0 1
67245: NOT
67246: IFFALSE 67250
// exit ;
67248: GO 67287
// for i in tmp do
67250: LD_ADDR_VAR 0 2
67254: PUSH
67255: LD_VAR 0 1
67259: PUSH
67260: FOR_IN
67261: IFFALSE 67285
// if IsControledBy ( i ) then
67263: LD_VAR 0 2
67267: PPUSH
67268: CALL_OW 312
67272: IFFALSE 67283
// ComUnlink ( i ) ;
67274: LD_VAR 0 2
67278: PPUSH
67279: CALL_OW 136
67283: GO 67260
67285: POP
67286: POP
// end ;
67287: PPOPN 2
67289: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
67290: LD_EXP 42
67294: PUSH
67295: LD_EXP 73
67299: AND
67300: IFFALSE 67440
67302: GO 67304
67304: DISABLE
67305: LD_INT 0
67307: PPUSH
67308: PPUSH
// begin ToLua ( displayPowell(); ) ;
67309: LD_STRING displayPowell();
67311: PPUSH
67312: CALL_OW 559
// uc_side := 0 ;
67316: LD_ADDR_OWVAR 20
67320: PUSH
67321: LD_INT 0
67323: ST_TO_ADDR
// uc_nation := 2 ;
67324: LD_ADDR_OWVAR 21
67328: PUSH
67329: LD_INT 2
67331: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
67332: LD_ADDR_OWVAR 37
67336: PUSH
67337: LD_INT 14
67339: ST_TO_ADDR
// vc_engine := engine_siberite ;
67340: LD_ADDR_OWVAR 39
67344: PUSH
67345: LD_INT 3
67347: ST_TO_ADDR
// vc_control := control_apeman ;
67348: LD_ADDR_OWVAR 38
67352: PUSH
67353: LD_INT 5
67355: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
67356: LD_ADDR_OWVAR 40
67360: PUSH
67361: LD_INT 29
67363: ST_TO_ADDR
// un := CreateVehicle ;
67364: LD_ADDR_VAR 0 2
67368: PUSH
67369: CALL_OW 45
67373: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
67374: LD_VAR 0 2
67378: PPUSH
67379: LD_INT 1
67381: PPUSH
67382: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
67386: LD_INT 35
67388: PPUSH
67389: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
67393: LD_VAR 0 2
67397: PPUSH
67398: LD_INT 22
67400: PUSH
67401: LD_OWVAR 2
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PPUSH
67410: CALL_OW 69
67414: PPUSH
67415: LD_VAR 0 2
67419: PPUSH
67420: CALL_OW 74
67424: PPUSH
67425: CALL_OW 115
// until IsDead ( un ) ;
67429: LD_VAR 0 2
67433: PPUSH
67434: CALL_OW 301
67438: IFFALSE 67386
// end ;
67440: PPOPN 2
67442: END
// every 0 0$1 trigger StreamModeActive and sStu do
67443: LD_EXP 42
67447: PUSH
67448: LD_EXP 81
67452: AND
67453: IFFALSE 67469
67455: GO 67457
67457: DISABLE
// begin ToLua ( displayStucuk(); ) ;
67458: LD_STRING displayStucuk();
67460: PPUSH
67461: CALL_OW 559
// ResetFog ;
67465: CALL_OW 335
// end ;
67469: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
67470: LD_EXP 42
67474: PUSH
67475: LD_EXP 74
67479: AND
67480: IFFALSE 67621
67482: GO 67484
67484: DISABLE
67485: LD_INT 0
67487: PPUSH
67488: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
67489: LD_ADDR_VAR 0 2
67493: PUSH
67494: LD_INT 22
67496: PUSH
67497: LD_OWVAR 2
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: PUSH
67506: LD_INT 21
67508: PUSH
67509: LD_INT 1
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PPUSH
67520: CALL_OW 69
67524: ST_TO_ADDR
// if not tmp then
67525: LD_VAR 0 2
67529: NOT
67530: IFFALSE 67534
// exit ;
67532: GO 67621
// un := tmp [ rand ( 1 , tmp ) ] ;
67534: LD_ADDR_VAR 0 1
67538: PUSH
67539: LD_VAR 0 2
67543: PUSH
67544: LD_INT 1
67546: PPUSH
67547: LD_VAR 0 2
67551: PPUSH
67552: CALL_OW 12
67556: ARRAY
67557: ST_TO_ADDR
// SetSide ( un , 0 ) ;
67558: LD_VAR 0 1
67562: PPUSH
67563: LD_INT 0
67565: PPUSH
67566: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
67570: LD_VAR 0 1
67574: PPUSH
67575: LD_OWVAR 3
67579: PUSH
67580: LD_VAR 0 1
67584: DIFF
67585: PPUSH
67586: LD_VAR 0 1
67590: PPUSH
67591: CALL_OW 74
67595: PPUSH
67596: CALL_OW 115
// wait ( 0 0$20 ) ;
67600: LD_INT 700
67602: PPUSH
67603: CALL_OW 67
// SetSide ( un , your_side ) ;
67607: LD_VAR 0 1
67611: PPUSH
67612: LD_OWVAR 2
67616: PPUSH
67617: CALL_OW 235
// end ;
67621: PPOPN 2
67623: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
67624: LD_EXP 42
67628: PUSH
67629: LD_EXP 75
67633: AND
67634: IFFALSE 67740
67636: GO 67638
67638: DISABLE
67639: LD_INT 0
67641: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
67642: LD_ADDR_VAR 0 1
67646: PUSH
67647: LD_INT 22
67649: PUSH
67650: LD_OWVAR 2
67654: PUSH
67655: EMPTY
67656: LIST
67657: LIST
67658: PUSH
67659: LD_INT 2
67661: PUSH
67662: LD_INT 30
67664: PUSH
67665: LD_INT 0
67667: PUSH
67668: EMPTY
67669: LIST
67670: LIST
67671: PUSH
67672: LD_INT 30
67674: PUSH
67675: LD_INT 1
67677: PUSH
67678: EMPTY
67679: LIST
67680: LIST
67681: PUSH
67682: EMPTY
67683: LIST
67684: LIST
67685: LIST
67686: PUSH
67687: EMPTY
67688: LIST
67689: LIST
67690: PPUSH
67691: CALL_OW 69
67695: ST_TO_ADDR
// if not depot then
67696: LD_VAR 0 1
67700: NOT
67701: IFFALSE 67705
// exit ;
67703: GO 67740
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
67705: LD_VAR 0 1
67709: PUSH
67710: LD_INT 1
67712: ARRAY
67713: PPUSH
67714: CALL_OW 250
67718: PPUSH
67719: LD_VAR 0 1
67723: PUSH
67724: LD_INT 1
67726: ARRAY
67727: PPUSH
67728: CALL_OW 251
67732: PPUSH
67733: LD_INT 70
67735: PPUSH
67736: CALL_OW 495
// end ;
67740: PPOPN 1
67742: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
67743: LD_EXP 42
67747: PUSH
67748: LD_EXP 76
67752: AND
67753: IFFALSE 67964
67755: GO 67757
67757: DISABLE
67758: LD_INT 0
67760: PPUSH
67761: PPUSH
67762: PPUSH
67763: PPUSH
67764: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
67765: LD_ADDR_VAR 0 5
67769: PUSH
67770: LD_INT 22
67772: PUSH
67773: LD_OWVAR 2
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: PUSH
67782: LD_INT 21
67784: PUSH
67785: LD_INT 1
67787: PUSH
67788: EMPTY
67789: LIST
67790: LIST
67791: PUSH
67792: EMPTY
67793: LIST
67794: LIST
67795: PPUSH
67796: CALL_OW 69
67800: ST_TO_ADDR
// if not tmp then
67801: LD_VAR 0 5
67805: NOT
67806: IFFALSE 67810
// exit ;
67808: GO 67964
// for i in tmp do
67810: LD_ADDR_VAR 0 1
67814: PUSH
67815: LD_VAR 0 5
67819: PUSH
67820: FOR_IN
67821: IFFALSE 67962
// begin d := rand ( 0 , 5 ) ;
67823: LD_ADDR_VAR 0 4
67827: PUSH
67828: LD_INT 0
67830: PPUSH
67831: LD_INT 5
67833: PPUSH
67834: CALL_OW 12
67838: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
67839: LD_ADDR_VAR 0 2
67843: PUSH
67844: LD_VAR 0 1
67848: PPUSH
67849: CALL_OW 250
67853: PPUSH
67854: LD_VAR 0 4
67858: PPUSH
67859: LD_INT 3
67861: PPUSH
67862: LD_INT 12
67864: PPUSH
67865: CALL_OW 12
67869: PPUSH
67870: CALL_OW 272
67874: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
67875: LD_ADDR_VAR 0 3
67879: PUSH
67880: LD_VAR 0 1
67884: PPUSH
67885: CALL_OW 251
67889: PPUSH
67890: LD_VAR 0 4
67894: PPUSH
67895: LD_INT 3
67897: PPUSH
67898: LD_INT 12
67900: PPUSH
67901: CALL_OW 12
67905: PPUSH
67906: CALL_OW 273
67910: ST_TO_ADDR
// if ValidHex ( x , y ) then
67911: LD_VAR 0 2
67915: PPUSH
67916: LD_VAR 0 3
67920: PPUSH
67921: CALL_OW 488
67925: IFFALSE 67960
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
67927: LD_VAR 0 1
67931: PPUSH
67932: LD_VAR 0 2
67936: PPUSH
67937: LD_VAR 0 3
67941: PPUSH
67942: LD_INT 3
67944: PPUSH
67945: LD_INT 6
67947: PPUSH
67948: CALL_OW 12
67952: PPUSH
67953: LD_INT 1
67955: PPUSH
67956: CALL_OW 483
// end ;
67960: GO 67820
67962: POP
67963: POP
// end ;
67964: PPOPN 5
67966: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
67967: LD_EXP 42
67971: PUSH
67972: LD_EXP 77
67976: AND
67977: IFFALSE 68071
67979: GO 67981
67981: DISABLE
67982: LD_INT 0
67984: PPUSH
67985: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
67986: LD_ADDR_VAR 0 2
67990: PUSH
67991: LD_INT 22
67993: PUSH
67994: LD_OWVAR 2
67998: PUSH
67999: EMPTY
68000: LIST
68001: LIST
68002: PUSH
68003: LD_INT 32
68005: PUSH
68006: LD_INT 1
68008: PUSH
68009: EMPTY
68010: LIST
68011: LIST
68012: PUSH
68013: LD_INT 21
68015: PUSH
68016: LD_INT 2
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: PUSH
68023: EMPTY
68024: LIST
68025: LIST
68026: LIST
68027: PPUSH
68028: CALL_OW 69
68032: ST_TO_ADDR
// if not tmp then
68033: LD_VAR 0 2
68037: NOT
68038: IFFALSE 68042
// exit ;
68040: GO 68071
// for i in tmp do
68042: LD_ADDR_VAR 0 1
68046: PUSH
68047: LD_VAR 0 2
68051: PUSH
68052: FOR_IN
68053: IFFALSE 68069
// SetFuel ( i , 0 ) ;
68055: LD_VAR 0 1
68059: PPUSH
68060: LD_INT 0
68062: PPUSH
68063: CALL_OW 240
68067: GO 68052
68069: POP
68070: POP
// end ;
68071: PPOPN 2
68073: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
68074: LD_EXP 42
68078: PUSH
68079: LD_EXP 78
68083: AND
68084: IFFALSE 68150
68086: GO 68088
68088: DISABLE
68089: LD_INT 0
68091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
68092: LD_ADDR_VAR 0 1
68096: PUSH
68097: LD_INT 22
68099: PUSH
68100: LD_OWVAR 2
68104: PUSH
68105: EMPTY
68106: LIST
68107: LIST
68108: PUSH
68109: LD_INT 30
68111: PUSH
68112: LD_INT 29
68114: PUSH
68115: EMPTY
68116: LIST
68117: LIST
68118: PUSH
68119: EMPTY
68120: LIST
68121: LIST
68122: PPUSH
68123: CALL_OW 69
68127: ST_TO_ADDR
// if not tmp then
68128: LD_VAR 0 1
68132: NOT
68133: IFFALSE 68137
// exit ;
68135: GO 68150
// DestroyUnit ( tmp [ 1 ] ) ;
68137: LD_VAR 0 1
68141: PUSH
68142: LD_INT 1
68144: ARRAY
68145: PPUSH
68146: CALL_OW 65
// end ;
68150: PPOPN 1
68152: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
68153: LD_EXP 42
68157: PUSH
68158: LD_EXP 80
68162: AND
68163: IFFALSE 68292
68165: GO 68167
68167: DISABLE
68168: LD_INT 0
68170: PPUSH
// begin uc_side := 0 ;
68171: LD_ADDR_OWVAR 20
68175: PUSH
68176: LD_INT 0
68178: ST_TO_ADDR
// uc_nation := nation_arabian ;
68179: LD_ADDR_OWVAR 21
68183: PUSH
68184: LD_INT 2
68186: ST_TO_ADDR
// hc_gallery :=  ;
68187: LD_ADDR_OWVAR 33
68191: PUSH
68192: LD_STRING 
68194: ST_TO_ADDR
// hc_name :=  ;
68195: LD_ADDR_OWVAR 26
68199: PUSH
68200: LD_STRING 
68202: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
68203: LD_INT 1
68205: PPUSH
68206: LD_INT 11
68208: PPUSH
68209: LD_INT 10
68211: PPUSH
68212: CALL_OW 380
// un := CreateHuman ;
68216: LD_ADDR_VAR 0 1
68220: PUSH
68221: CALL_OW 44
68225: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
68226: LD_VAR 0 1
68230: PPUSH
68231: LD_INT 1
68233: PPUSH
68234: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
68238: LD_INT 35
68240: PPUSH
68241: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
68245: LD_VAR 0 1
68249: PPUSH
68250: LD_INT 22
68252: PUSH
68253: LD_OWVAR 2
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: PPUSH
68262: CALL_OW 69
68266: PPUSH
68267: LD_VAR 0 1
68271: PPUSH
68272: CALL_OW 74
68276: PPUSH
68277: CALL_OW 115
// until IsDead ( un ) ;
68281: LD_VAR 0 1
68285: PPUSH
68286: CALL_OW 301
68290: IFFALSE 68238
// end ;
68292: PPOPN 1
68294: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
68295: LD_EXP 42
68299: PUSH
68300: LD_EXP 82
68304: AND
68305: IFFALSE 68317
68307: GO 68309
68309: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
68310: LD_STRING earthquake(getX(game), 0, 32)
68312: PPUSH
68313: CALL_OW 559
68317: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
68318: LD_EXP 42
68322: PUSH
68323: LD_EXP 83
68327: AND
68328: IFFALSE 68419
68330: GO 68332
68332: DISABLE
68333: LD_INT 0
68335: PPUSH
// begin enable ;
68336: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
68337: LD_ADDR_VAR 0 1
68341: PUSH
68342: LD_INT 22
68344: PUSH
68345: LD_OWVAR 2
68349: PUSH
68350: EMPTY
68351: LIST
68352: LIST
68353: PUSH
68354: LD_INT 21
68356: PUSH
68357: LD_INT 2
68359: PUSH
68360: EMPTY
68361: LIST
68362: LIST
68363: PUSH
68364: LD_INT 33
68366: PUSH
68367: LD_INT 3
68369: PUSH
68370: EMPTY
68371: LIST
68372: LIST
68373: PUSH
68374: EMPTY
68375: LIST
68376: LIST
68377: LIST
68378: PPUSH
68379: CALL_OW 69
68383: ST_TO_ADDR
// if not tmp then
68384: LD_VAR 0 1
68388: NOT
68389: IFFALSE 68393
// exit ;
68391: GO 68419
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
68393: LD_VAR 0 1
68397: PUSH
68398: LD_INT 1
68400: PPUSH
68401: LD_VAR 0 1
68405: PPUSH
68406: CALL_OW 12
68410: ARRAY
68411: PPUSH
68412: LD_INT 1
68414: PPUSH
68415: CALL_OW 234
// end ;
68419: PPOPN 1
68421: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
68422: LD_EXP 42
68426: PUSH
68427: LD_EXP 84
68431: AND
68432: IFFALSE 68573
68434: GO 68436
68436: DISABLE
68437: LD_INT 0
68439: PPUSH
68440: PPUSH
68441: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68442: LD_ADDR_VAR 0 3
68446: PUSH
68447: LD_INT 22
68449: PUSH
68450: LD_OWVAR 2
68454: PUSH
68455: EMPTY
68456: LIST
68457: LIST
68458: PUSH
68459: LD_INT 25
68461: PUSH
68462: LD_INT 1
68464: PUSH
68465: EMPTY
68466: LIST
68467: LIST
68468: PUSH
68469: EMPTY
68470: LIST
68471: LIST
68472: PPUSH
68473: CALL_OW 69
68477: ST_TO_ADDR
// if not tmp then
68478: LD_VAR 0 3
68482: NOT
68483: IFFALSE 68487
// exit ;
68485: GO 68573
// un := tmp [ rand ( 1 , tmp ) ] ;
68487: LD_ADDR_VAR 0 2
68491: PUSH
68492: LD_VAR 0 3
68496: PUSH
68497: LD_INT 1
68499: PPUSH
68500: LD_VAR 0 3
68504: PPUSH
68505: CALL_OW 12
68509: ARRAY
68510: ST_TO_ADDR
// if Crawls ( un ) then
68511: LD_VAR 0 2
68515: PPUSH
68516: CALL_OW 318
68520: IFFALSE 68531
// ComWalk ( un ) ;
68522: LD_VAR 0 2
68526: PPUSH
68527: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
68531: LD_VAR 0 2
68535: PPUSH
68536: LD_INT 9
68538: PPUSH
68539: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
68543: LD_INT 28
68545: PPUSH
68546: LD_OWVAR 2
68550: PPUSH
68551: LD_INT 2
68553: PPUSH
68554: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
68558: LD_INT 29
68560: PPUSH
68561: LD_OWVAR 2
68565: PPUSH
68566: LD_INT 2
68568: PPUSH
68569: CALL_OW 322
// end ;
68573: PPOPN 3
68575: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
68576: LD_EXP 42
68580: PUSH
68581: LD_EXP 85
68585: AND
68586: IFFALSE 68697
68588: GO 68590
68590: DISABLE
68591: LD_INT 0
68593: PPUSH
68594: PPUSH
68595: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68596: LD_ADDR_VAR 0 3
68600: PUSH
68601: LD_INT 22
68603: PUSH
68604: LD_OWVAR 2
68608: PUSH
68609: EMPTY
68610: LIST
68611: LIST
68612: PUSH
68613: LD_INT 25
68615: PUSH
68616: LD_INT 1
68618: PUSH
68619: EMPTY
68620: LIST
68621: LIST
68622: PUSH
68623: EMPTY
68624: LIST
68625: LIST
68626: PPUSH
68627: CALL_OW 69
68631: ST_TO_ADDR
// if not tmp then
68632: LD_VAR 0 3
68636: NOT
68637: IFFALSE 68641
// exit ;
68639: GO 68697
// un := tmp [ rand ( 1 , tmp ) ] ;
68641: LD_ADDR_VAR 0 2
68645: PUSH
68646: LD_VAR 0 3
68650: PUSH
68651: LD_INT 1
68653: PPUSH
68654: LD_VAR 0 3
68658: PPUSH
68659: CALL_OW 12
68663: ARRAY
68664: ST_TO_ADDR
// if Crawls ( un ) then
68665: LD_VAR 0 2
68669: PPUSH
68670: CALL_OW 318
68674: IFFALSE 68685
// ComWalk ( un ) ;
68676: LD_VAR 0 2
68680: PPUSH
68681: CALL_OW 138
// SetClass ( un , class_mortar ) ;
68685: LD_VAR 0 2
68689: PPUSH
68690: LD_INT 8
68692: PPUSH
68693: CALL_OW 336
// end ;
68697: PPOPN 3
68699: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
68700: LD_EXP 42
68704: PUSH
68705: LD_EXP 86
68709: AND
68710: IFFALSE 68854
68712: GO 68714
68714: DISABLE
68715: LD_INT 0
68717: PPUSH
68718: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
68719: LD_ADDR_VAR 0 2
68723: PUSH
68724: LD_INT 22
68726: PUSH
68727: LD_OWVAR 2
68731: PUSH
68732: EMPTY
68733: LIST
68734: LIST
68735: PUSH
68736: LD_INT 21
68738: PUSH
68739: LD_INT 2
68741: PUSH
68742: EMPTY
68743: LIST
68744: LIST
68745: PUSH
68746: LD_INT 2
68748: PUSH
68749: LD_INT 34
68751: PUSH
68752: LD_INT 12
68754: PUSH
68755: EMPTY
68756: LIST
68757: LIST
68758: PUSH
68759: LD_INT 34
68761: PUSH
68762: LD_INT 51
68764: PUSH
68765: EMPTY
68766: LIST
68767: LIST
68768: PUSH
68769: LD_INT 34
68771: PUSH
68772: LD_INT 32
68774: PUSH
68775: EMPTY
68776: LIST
68777: LIST
68778: PUSH
68779: EMPTY
68780: LIST
68781: LIST
68782: LIST
68783: LIST
68784: PUSH
68785: EMPTY
68786: LIST
68787: LIST
68788: LIST
68789: PPUSH
68790: CALL_OW 69
68794: ST_TO_ADDR
// if not tmp then
68795: LD_VAR 0 2
68799: NOT
68800: IFFALSE 68804
// exit ;
68802: GO 68854
// for i in tmp do
68804: LD_ADDR_VAR 0 1
68808: PUSH
68809: LD_VAR 0 2
68813: PUSH
68814: FOR_IN
68815: IFFALSE 68852
// if GetCargo ( i , mat_artifact ) = 0 then
68817: LD_VAR 0 1
68821: PPUSH
68822: LD_INT 4
68824: PPUSH
68825: CALL_OW 289
68829: PUSH
68830: LD_INT 0
68832: EQUAL
68833: IFFALSE 68850
// SetCargo ( i , mat_siberit , 100 ) ;
68835: LD_VAR 0 1
68839: PPUSH
68840: LD_INT 3
68842: PPUSH
68843: LD_INT 100
68845: PPUSH
68846: CALL_OW 290
68850: GO 68814
68852: POP
68853: POP
// end ;
68854: PPOPN 2
68856: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
68857: LD_EXP 42
68861: PUSH
68862: LD_EXP 87
68866: AND
68867: IFFALSE 69050
68869: GO 68871
68871: DISABLE
68872: LD_INT 0
68874: PPUSH
68875: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
68876: LD_ADDR_VAR 0 2
68880: PUSH
68881: LD_INT 22
68883: PUSH
68884: LD_OWVAR 2
68888: PUSH
68889: EMPTY
68890: LIST
68891: LIST
68892: PPUSH
68893: CALL_OW 69
68897: ST_TO_ADDR
// if not tmp then
68898: LD_VAR 0 2
68902: NOT
68903: IFFALSE 68907
// exit ;
68905: GO 69050
// for i := 1 to 2 do
68907: LD_ADDR_VAR 0 1
68911: PUSH
68912: DOUBLE
68913: LD_INT 1
68915: DEC
68916: ST_TO_ADDR
68917: LD_INT 2
68919: PUSH
68920: FOR_TO
68921: IFFALSE 69048
// begin uc_side := your_side ;
68923: LD_ADDR_OWVAR 20
68927: PUSH
68928: LD_OWVAR 2
68932: ST_TO_ADDR
// uc_nation := nation_american ;
68933: LD_ADDR_OWVAR 21
68937: PUSH
68938: LD_INT 1
68940: ST_TO_ADDR
// vc_chassis := us_morphling ;
68941: LD_ADDR_OWVAR 37
68945: PUSH
68946: LD_INT 5
68948: ST_TO_ADDR
// vc_engine := engine_siberite ;
68949: LD_ADDR_OWVAR 39
68953: PUSH
68954: LD_INT 3
68956: ST_TO_ADDR
// vc_control := control_computer ;
68957: LD_ADDR_OWVAR 38
68961: PUSH
68962: LD_INT 3
68964: ST_TO_ADDR
// vc_weapon := us_double_laser ;
68965: LD_ADDR_OWVAR 40
68969: PUSH
68970: LD_INT 10
68972: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
68973: LD_VAR 0 2
68977: PUSH
68978: LD_INT 1
68980: ARRAY
68981: PPUSH
68982: CALL_OW 310
68986: NOT
68987: IFFALSE 69034
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
68989: CALL_OW 45
68993: PPUSH
68994: LD_VAR 0 2
68998: PUSH
68999: LD_INT 1
69001: ARRAY
69002: PPUSH
69003: CALL_OW 250
69007: PPUSH
69008: LD_VAR 0 2
69012: PUSH
69013: LD_INT 1
69015: ARRAY
69016: PPUSH
69017: CALL_OW 251
69021: PPUSH
69022: LD_INT 12
69024: PPUSH
69025: LD_INT 1
69027: PPUSH
69028: CALL_OW 50
69032: GO 69046
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
69034: CALL_OW 45
69038: PPUSH
69039: LD_INT 1
69041: PPUSH
69042: CALL_OW 51
// end ;
69046: GO 68920
69048: POP
69049: POP
// end ;
69050: PPOPN 2
69052: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
69053: LD_EXP 42
69057: PUSH
69058: LD_EXP 88
69062: AND
69063: IFFALSE 69285
69065: GO 69067
69067: DISABLE
69068: LD_INT 0
69070: PPUSH
69071: PPUSH
69072: PPUSH
69073: PPUSH
69074: PPUSH
69075: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
69076: LD_ADDR_VAR 0 6
69080: PUSH
69081: LD_INT 22
69083: PUSH
69084: LD_OWVAR 2
69088: PUSH
69089: EMPTY
69090: LIST
69091: LIST
69092: PUSH
69093: LD_INT 21
69095: PUSH
69096: LD_INT 1
69098: PUSH
69099: EMPTY
69100: LIST
69101: LIST
69102: PUSH
69103: LD_INT 3
69105: PUSH
69106: LD_INT 23
69108: PUSH
69109: LD_INT 0
69111: PUSH
69112: EMPTY
69113: LIST
69114: LIST
69115: PUSH
69116: EMPTY
69117: LIST
69118: LIST
69119: PUSH
69120: EMPTY
69121: LIST
69122: LIST
69123: LIST
69124: PPUSH
69125: CALL_OW 69
69129: ST_TO_ADDR
// if not tmp then
69130: LD_VAR 0 6
69134: NOT
69135: IFFALSE 69139
// exit ;
69137: GO 69285
// s1 := rand ( 1 , 4 ) ;
69139: LD_ADDR_VAR 0 2
69143: PUSH
69144: LD_INT 1
69146: PPUSH
69147: LD_INT 4
69149: PPUSH
69150: CALL_OW 12
69154: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
69155: LD_ADDR_VAR 0 4
69159: PUSH
69160: LD_VAR 0 6
69164: PUSH
69165: LD_INT 1
69167: ARRAY
69168: PPUSH
69169: LD_VAR 0 2
69173: PPUSH
69174: CALL_OW 259
69178: ST_TO_ADDR
// if s1 = 1 then
69179: LD_VAR 0 2
69183: PUSH
69184: LD_INT 1
69186: EQUAL
69187: IFFALSE 69207
// s2 := rand ( 2 , 4 ) else
69189: LD_ADDR_VAR 0 3
69193: PUSH
69194: LD_INT 2
69196: PPUSH
69197: LD_INT 4
69199: PPUSH
69200: CALL_OW 12
69204: ST_TO_ADDR
69205: GO 69215
// s2 := 1 ;
69207: LD_ADDR_VAR 0 3
69211: PUSH
69212: LD_INT 1
69214: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
69215: LD_ADDR_VAR 0 5
69219: PUSH
69220: LD_VAR 0 6
69224: PUSH
69225: LD_INT 1
69227: ARRAY
69228: PPUSH
69229: LD_VAR 0 3
69233: PPUSH
69234: CALL_OW 259
69238: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
69239: LD_VAR 0 6
69243: PUSH
69244: LD_INT 1
69246: ARRAY
69247: PPUSH
69248: LD_VAR 0 2
69252: PPUSH
69253: LD_VAR 0 5
69257: PPUSH
69258: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
69262: LD_VAR 0 6
69266: PUSH
69267: LD_INT 1
69269: ARRAY
69270: PPUSH
69271: LD_VAR 0 3
69275: PPUSH
69276: LD_VAR 0 4
69280: PPUSH
69281: CALL_OW 237
// end ;
69285: PPOPN 6
69287: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
69288: LD_EXP 42
69292: PUSH
69293: LD_EXP 89
69297: AND
69298: IFFALSE 69377
69300: GO 69302
69302: DISABLE
69303: LD_INT 0
69305: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
69306: LD_ADDR_VAR 0 1
69310: PUSH
69311: LD_INT 22
69313: PUSH
69314: LD_OWVAR 2
69318: PUSH
69319: EMPTY
69320: LIST
69321: LIST
69322: PUSH
69323: LD_INT 30
69325: PUSH
69326: LD_INT 3
69328: PUSH
69329: EMPTY
69330: LIST
69331: LIST
69332: PUSH
69333: EMPTY
69334: LIST
69335: LIST
69336: PPUSH
69337: CALL_OW 69
69341: ST_TO_ADDR
// if not tmp then
69342: LD_VAR 0 1
69346: NOT
69347: IFFALSE 69351
// exit ;
69349: GO 69377
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
69351: LD_VAR 0 1
69355: PUSH
69356: LD_INT 1
69358: PPUSH
69359: LD_VAR 0 1
69363: PPUSH
69364: CALL_OW 12
69368: ARRAY
69369: PPUSH
69370: LD_INT 1
69372: PPUSH
69373: CALL_OW 234
// end ;
69377: PPOPN 1
69379: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
69380: LD_EXP 42
69384: PUSH
69385: LD_EXP 90
69389: AND
69390: IFFALSE 69502
69392: GO 69394
69394: DISABLE
69395: LD_INT 0
69397: PPUSH
69398: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
69399: LD_ADDR_VAR 0 2
69403: PUSH
69404: LD_INT 22
69406: PUSH
69407: LD_OWVAR 2
69411: PUSH
69412: EMPTY
69413: LIST
69414: LIST
69415: PUSH
69416: LD_INT 2
69418: PUSH
69419: LD_INT 30
69421: PUSH
69422: LD_INT 27
69424: PUSH
69425: EMPTY
69426: LIST
69427: LIST
69428: PUSH
69429: LD_INT 30
69431: PUSH
69432: LD_INT 26
69434: PUSH
69435: EMPTY
69436: LIST
69437: LIST
69438: PUSH
69439: LD_INT 30
69441: PUSH
69442: LD_INT 28
69444: PUSH
69445: EMPTY
69446: LIST
69447: LIST
69448: PUSH
69449: EMPTY
69450: LIST
69451: LIST
69452: LIST
69453: LIST
69454: PUSH
69455: EMPTY
69456: LIST
69457: LIST
69458: PPUSH
69459: CALL_OW 69
69463: ST_TO_ADDR
// if not tmp then
69464: LD_VAR 0 2
69468: NOT
69469: IFFALSE 69473
// exit ;
69471: GO 69502
// for i in tmp do
69473: LD_ADDR_VAR 0 1
69477: PUSH
69478: LD_VAR 0 2
69482: PUSH
69483: FOR_IN
69484: IFFALSE 69500
// SetLives ( i , 1 ) ;
69486: LD_VAR 0 1
69490: PPUSH
69491: LD_INT 1
69493: PPUSH
69494: CALL_OW 234
69498: GO 69483
69500: POP
69501: POP
// end ;
69502: PPOPN 2
69504: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
69505: LD_EXP 42
69509: PUSH
69510: LD_EXP 91
69514: AND
69515: IFFALSE 69802
69517: GO 69519
69519: DISABLE
69520: LD_INT 0
69522: PPUSH
69523: PPUSH
69524: PPUSH
// begin i := rand ( 1 , 7 ) ;
69525: LD_ADDR_VAR 0 1
69529: PUSH
69530: LD_INT 1
69532: PPUSH
69533: LD_INT 7
69535: PPUSH
69536: CALL_OW 12
69540: ST_TO_ADDR
// case i of 1 :
69541: LD_VAR 0 1
69545: PUSH
69546: LD_INT 1
69548: DOUBLE
69549: EQUAL
69550: IFTRUE 69554
69552: GO 69564
69554: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
69555: LD_STRING earthquake(getX(game), 0, 32)
69557: PPUSH
69558: CALL_OW 559
69562: GO 69802
69564: LD_INT 2
69566: DOUBLE
69567: EQUAL
69568: IFTRUE 69572
69570: GO 69586
69572: POP
// begin ToLua ( displayStucuk(); ) ;
69573: LD_STRING displayStucuk();
69575: PPUSH
69576: CALL_OW 559
// ResetFog ;
69580: CALL_OW 335
// end ; 3 :
69584: GO 69802
69586: LD_INT 3
69588: DOUBLE
69589: EQUAL
69590: IFTRUE 69594
69592: GO 69698
69594: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
69595: LD_ADDR_VAR 0 2
69599: PUSH
69600: LD_INT 22
69602: PUSH
69603: LD_OWVAR 2
69607: PUSH
69608: EMPTY
69609: LIST
69610: LIST
69611: PUSH
69612: LD_INT 25
69614: PUSH
69615: LD_INT 1
69617: PUSH
69618: EMPTY
69619: LIST
69620: LIST
69621: PUSH
69622: EMPTY
69623: LIST
69624: LIST
69625: PPUSH
69626: CALL_OW 69
69630: ST_TO_ADDR
// if not tmp then
69631: LD_VAR 0 2
69635: NOT
69636: IFFALSE 69640
// exit ;
69638: GO 69802
// un := tmp [ rand ( 1 , tmp ) ] ;
69640: LD_ADDR_VAR 0 3
69644: PUSH
69645: LD_VAR 0 2
69649: PUSH
69650: LD_INT 1
69652: PPUSH
69653: LD_VAR 0 2
69657: PPUSH
69658: CALL_OW 12
69662: ARRAY
69663: ST_TO_ADDR
// if Crawls ( un ) then
69664: LD_VAR 0 3
69668: PPUSH
69669: CALL_OW 318
69673: IFFALSE 69684
// ComWalk ( un ) ;
69675: LD_VAR 0 3
69679: PPUSH
69680: CALL_OW 138
// SetClass ( un , class_mortar ) ;
69684: LD_VAR 0 3
69688: PPUSH
69689: LD_INT 8
69691: PPUSH
69692: CALL_OW 336
// end ; 4 :
69696: GO 69802
69698: LD_INT 4
69700: DOUBLE
69701: EQUAL
69702: IFTRUE 69706
69704: GO 69780
69706: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
69707: LD_ADDR_VAR 0 2
69711: PUSH
69712: LD_INT 22
69714: PUSH
69715: LD_OWVAR 2
69719: PUSH
69720: EMPTY
69721: LIST
69722: LIST
69723: PUSH
69724: LD_INT 30
69726: PUSH
69727: LD_INT 29
69729: PUSH
69730: EMPTY
69731: LIST
69732: LIST
69733: PUSH
69734: EMPTY
69735: LIST
69736: LIST
69737: PPUSH
69738: CALL_OW 69
69742: ST_TO_ADDR
// if not tmp then
69743: LD_VAR 0 2
69747: NOT
69748: IFFALSE 69752
// exit ;
69750: GO 69802
// CenterNowOnUnits ( tmp [ 1 ] ) ;
69752: LD_VAR 0 2
69756: PUSH
69757: LD_INT 1
69759: ARRAY
69760: PPUSH
69761: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
69765: LD_VAR 0 2
69769: PUSH
69770: LD_INT 1
69772: ARRAY
69773: PPUSH
69774: CALL_OW 65
// end ; 5 .. 7 :
69778: GO 69802
69780: LD_INT 5
69782: DOUBLE
69783: GREATEREQUAL
69784: IFFALSE 69792
69786: LD_INT 7
69788: DOUBLE
69789: LESSEQUAL
69790: IFTRUE 69794
69792: GO 69801
69794: POP
// StreamSibBomb ; end ;
69795: CALL 66039 0 0
69799: GO 69802
69801: POP
// end ;
69802: PPOPN 3
69804: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
69805: LD_EXP 42
69809: PUSH
69810: LD_EXP 92
69814: AND
69815: IFFALSE 69971
69817: GO 69819
69819: DISABLE
69820: LD_INT 0
69822: PPUSH
69823: PPUSH
69824: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
69825: LD_ADDR_VAR 0 2
69829: PUSH
69830: LD_INT 81
69832: PUSH
69833: LD_OWVAR 2
69837: PUSH
69838: EMPTY
69839: LIST
69840: LIST
69841: PUSH
69842: LD_INT 2
69844: PUSH
69845: LD_INT 21
69847: PUSH
69848: LD_INT 1
69850: PUSH
69851: EMPTY
69852: LIST
69853: LIST
69854: PUSH
69855: LD_INT 21
69857: PUSH
69858: LD_INT 2
69860: PUSH
69861: EMPTY
69862: LIST
69863: LIST
69864: PUSH
69865: EMPTY
69866: LIST
69867: LIST
69868: LIST
69869: PUSH
69870: EMPTY
69871: LIST
69872: LIST
69873: PPUSH
69874: CALL_OW 69
69878: ST_TO_ADDR
// if not tmp then
69879: LD_VAR 0 2
69883: NOT
69884: IFFALSE 69888
// exit ;
69886: GO 69971
// p := 0 ;
69888: LD_ADDR_VAR 0 3
69892: PUSH
69893: LD_INT 0
69895: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
69896: LD_INT 35
69898: PPUSH
69899: CALL_OW 67
// p := p + 1 ;
69903: LD_ADDR_VAR 0 3
69907: PUSH
69908: LD_VAR 0 3
69912: PUSH
69913: LD_INT 1
69915: PLUS
69916: ST_TO_ADDR
// for i in tmp do
69917: LD_ADDR_VAR 0 1
69921: PUSH
69922: LD_VAR 0 2
69926: PUSH
69927: FOR_IN
69928: IFFALSE 69959
// if GetLives ( i ) < 1000 then
69930: LD_VAR 0 1
69934: PPUSH
69935: CALL_OW 256
69939: PUSH
69940: LD_INT 1000
69942: LESS
69943: IFFALSE 69957
// SetLives ( i , 1000 ) ;
69945: LD_VAR 0 1
69949: PPUSH
69950: LD_INT 1000
69952: PPUSH
69953: CALL_OW 234
69957: GO 69927
69959: POP
69960: POP
// until p > 20 ;
69961: LD_VAR 0 3
69965: PUSH
69966: LD_INT 20
69968: GREATER
69969: IFFALSE 69896
// end ;
69971: PPOPN 3
69973: END
// every 0 0$1 trigger StreamModeActive and sTime do
69974: LD_EXP 42
69978: PUSH
69979: LD_EXP 93
69983: AND
69984: IFFALSE 70019
69986: GO 69988
69988: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
69989: LD_INT 28
69991: PPUSH
69992: LD_OWVAR 2
69996: PPUSH
69997: LD_INT 2
69999: PPUSH
70000: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
70004: LD_INT 30
70006: PPUSH
70007: LD_OWVAR 2
70011: PPUSH
70012: LD_INT 2
70014: PPUSH
70015: CALL_OW 322
// end ;
70019: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
70020: LD_EXP 42
70024: PUSH
70025: LD_EXP 94
70029: AND
70030: IFFALSE 70151
70032: GO 70034
70034: DISABLE
70035: LD_INT 0
70037: PPUSH
70038: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
70039: LD_ADDR_VAR 0 2
70043: PUSH
70044: LD_INT 22
70046: PUSH
70047: LD_OWVAR 2
70051: PUSH
70052: EMPTY
70053: LIST
70054: LIST
70055: PUSH
70056: LD_INT 21
70058: PUSH
70059: LD_INT 1
70061: PUSH
70062: EMPTY
70063: LIST
70064: LIST
70065: PUSH
70066: LD_INT 3
70068: PUSH
70069: LD_INT 23
70071: PUSH
70072: LD_INT 0
70074: PUSH
70075: EMPTY
70076: LIST
70077: LIST
70078: PUSH
70079: EMPTY
70080: LIST
70081: LIST
70082: PUSH
70083: EMPTY
70084: LIST
70085: LIST
70086: LIST
70087: PPUSH
70088: CALL_OW 69
70092: ST_TO_ADDR
// if not tmp then
70093: LD_VAR 0 2
70097: NOT
70098: IFFALSE 70102
// exit ;
70100: GO 70151
// for i in tmp do
70102: LD_ADDR_VAR 0 1
70106: PUSH
70107: LD_VAR 0 2
70111: PUSH
70112: FOR_IN
70113: IFFALSE 70149
// begin if Crawls ( i ) then
70115: LD_VAR 0 1
70119: PPUSH
70120: CALL_OW 318
70124: IFFALSE 70135
// ComWalk ( i ) ;
70126: LD_VAR 0 1
70130: PPUSH
70131: CALL_OW 138
// SetClass ( i , 2 ) ;
70135: LD_VAR 0 1
70139: PPUSH
70140: LD_INT 2
70142: PPUSH
70143: CALL_OW 336
// end ;
70147: GO 70112
70149: POP
70150: POP
// end ;
70151: PPOPN 2
70153: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
70154: LD_EXP 42
70158: PUSH
70159: LD_EXP 95
70163: AND
70164: IFFALSE 70452
70166: GO 70168
70168: DISABLE
70169: LD_INT 0
70171: PPUSH
70172: PPUSH
70173: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
70174: LD_OWVAR 2
70178: PPUSH
70179: LD_INT 9
70181: PPUSH
70182: LD_INT 1
70184: PPUSH
70185: LD_INT 1
70187: PPUSH
70188: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
70192: LD_INT 9
70194: PPUSH
70195: LD_OWVAR 2
70199: PPUSH
70200: CALL_OW 343
// uc_side := 9 ;
70204: LD_ADDR_OWVAR 20
70208: PUSH
70209: LD_INT 9
70211: ST_TO_ADDR
// uc_nation := 2 ;
70212: LD_ADDR_OWVAR 21
70216: PUSH
70217: LD_INT 2
70219: ST_TO_ADDR
// hc_name := Dark Warrior ;
70220: LD_ADDR_OWVAR 26
70224: PUSH
70225: LD_STRING Dark Warrior
70227: ST_TO_ADDR
// hc_gallery :=  ;
70228: LD_ADDR_OWVAR 33
70232: PUSH
70233: LD_STRING 
70235: ST_TO_ADDR
// hc_noskilllimit := true ;
70236: LD_ADDR_OWVAR 76
70240: PUSH
70241: LD_INT 1
70243: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
70244: LD_ADDR_OWVAR 31
70248: PUSH
70249: LD_INT 30
70251: PUSH
70252: LD_INT 30
70254: PUSH
70255: LD_INT 30
70257: PUSH
70258: LD_INT 30
70260: PUSH
70261: EMPTY
70262: LIST
70263: LIST
70264: LIST
70265: LIST
70266: ST_TO_ADDR
// un := CreateHuman ;
70267: LD_ADDR_VAR 0 3
70271: PUSH
70272: CALL_OW 44
70276: ST_TO_ADDR
// hc_noskilllimit := false ;
70277: LD_ADDR_OWVAR 76
70281: PUSH
70282: LD_INT 0
70284: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
70285: LD_VAR 0 3
70289: PPUSH
70290: LD_INT 1
70292: PPUSH
70293: CALL_OW 51
// ToLua ( playRanger() ) ;
70297: LD_STRING playRanger()
70299: PPUSH
70300: CALL_OW 559
// p := 0 ;
70304: LD_ADDR_VAR 0 2
70308: PUSH
70309: LD_INT 0
70311: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
70312: LD_INT 35
70314: PPUSH
70315: CALL_OW 67
// p := p + 1 ;
70319: LD_ADDR_VAR 0 2
70323: PUSH
70324: LD_VAR 0 2
70328: PUSH
70329: LD_INT 1
70331: PLUS
70332: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
70333: LD_VAR 0 3
70337: PPUSH
70338: CALL_OW 256
70342: PUSH
70343: LD_INT 1000
70345: LESS
70346: IFFALSE 70360
// SetLives ( un , 1000 ) ;
70348: LD_VAR 0 3
70352: PPUSH
70353: LD_INT 1000
70355: PPUSH
70356: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
70360: LD_VAR 0 3
70364: PPUSH
70365: LD_INT 81
70367: PUSH
70368: LD_OWVAR 2
70372: PUSH
70373: EMPTY
70374: LIST
70375: LIST
70376: PUSH
70377: LD_INT 91
70379: PUSH
70380: LD_VAR 0 3
70384: PUSH
70385: LD_INT 30
70387: PUSH
70388: EMPTY
70389: LIST
70390: LIST
70391: LIST
70392: PUSH
70393: EMPTY
70394: LIST
70395: LIST
70396: PPUSH
70397: CALL_OW 69
70401: PPUSH
70402: LD_VAR 0 3
70406: PPUSH
70407: CALL_OW 74
70411: PPUSH
70412: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
70416: LD_VAR 0 2
70420: PUSH
70421: LD_INT 80
70423: GREATER
70424: PUSH
70425: LD_VAR 0 3
70429: PPUSH
70430: CALL_OW 301
70434: OR
70435: IFFALSE 70312
// if un then
70437: LD_VAR 0 3
70441: IFFALSE 70452
// RemoveUnit ( un ) ;
70443: LD_VAR 0 3
70447: PPUSH
70448: CALL_OW 64
// end ;
70452: PPOPN 3
70454: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
70455: LD_EXP 96
70459: IFFALSE 70575
70461: GO 70463
70463: DISABLE
70464: LD_INT 0
70466: PPUSH
70467: PPUSH
70468: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
70469: LD_ADDR_VAR 0 2
70473: PUSH
70474: LD_INT 81
70476: PUSH
70477: LD_OWVAR 2
70481: PUSH
70482: EMPTY
70483: LIST
70484: LIST
70485: PUSH
70486: LD_INT 21
70488: PUSH
70489: LD_INT 1
70491: PUSH
70492: EMPTY
70493: LIST
70494: LIST
70495: PUSH
70496: EMPTY
70497: LIST
70498: LIST
70499: PPUSH
70500: CALL_OW 69
70504: ST_TO_ADDR
// ToLua ( playComputer() ) ;
70505: LD_STRING playComputer()
70507: PPUSH
70508: CALL_OW 559
// if not tmp then
70512: LD_VAR 0 2
70516: NOT
70517: IFFALSE 70521
// exit ;
70519: GO 70575
// for i in tmp do
70521: LD_ADDR_VAR 0 1
70525: PUSH
70526: LD_VAR 0 2
70530: PUSH
70531: FOR_IN
70532: IFFALSE 70573
// for j := 1 to 4 do
70534: LD_ADDR_VAR 0 3
70538: PUSH
70539: DOUBLE
70540: LD_INT 1
70542: DEC
70543: ST_TO_ADDR
70544: LD_INT 4
70546: PUSH
70547: FOR_TO
70548: IFFALSE 70569
// SetSkill ( i , j , 10 ) ;
70550: LD_VAR 0 1
70554: PPUSH
70555: LD_VAR 0 3
70559: PPUSH
70560: LD_INT 10
70562: PPUSH
70563: CALL_OW 237
70567: GO 70547
70569: POP
70570: POP
70571: GO 70531
70573: POP
70574: POP
// end ;
70575: PPOPN 3
70577: END
// every 0 0$1 trigger s30 do var i , tmp ;
70578: LD_EXP 97
70582: IFFALSE 70651
70584: GO 70586
70586: DISABLE
70587: LD_INT 0
70589: PPUSH
70590: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
70591: LD_ADDR_VAR 0 2
70595: PUSH
70596: LD_INT 22
70598: PUSH
70599: LD_OWVAR 2
70603: PUSH
70604: EMPTY
70605: LIST
70606: LIST
70607: PPUSH
70608: CALL_OW 69
70612: ST_TO_ADDR
// if not tmp then
70613: LD_VAR 0 2
70617: NOT
70618: IFFALSE 70622
// exit ;
70620: GO 70651
// for i in tmp do
70622: LD_ADDR_VAR 0 1
70626: PUSH
70627: LD_VAR 0 2
70631: PUSH
70632: FOR_IN
70633: IFFALSE 70649
// SetLives ( i , 300 ) ;
70635: LD_VAR 0 1
70639: PPUSH
70640: LD_INT 300
70642: PPUSH
70643: CALL_OW 234
70647: GO 70632
70649: POP
70650: POP
// end ;
70651: PPOPN 2
70653: END
// every 0 0$1 trigger s60 do var i , tmp ;
70654: LD_EXP 98
70658: IFFALSE 70727
70660: GO 70662
70662: DISABLE
70663: LD_INT 0
70665: PPUSH
70666: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
70667: LD_ADDR_VAR 0 2
70671: PUSH
70672: LD_INT 22
70674: PUSH
70675: LD_OWVAR 2
70679: PUSH
70680: EMPTY
70681: LIST
70682: LIST
70683: PPUSH
70684: CALL_OW 69
70688: ST_TO_ADDR
// if not tmp then
70689: LD_VAR 0 2
70693: NOT
70694: IFFALSE 70698
// exit ;
70696: GO 70727
// for i in tmp do
70698: LD_ADDR_VAR 0 1
70702: PUSH
70703: LD_VAR 0 2
70707: PUSH
70708: FOR_IN
70709: IFFALSE 70725
// SetLives ( i , 600 ) ;
70711: LD_VAR 0 1
70715: PPUSH
70716: LD_INT 600
70718: PPUSH
70719: CALL_OW 234
70723: GO 70708
70725: POP
70726: POP
// end ;
70727: PPOPN 2
70729: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
70730: LD_INT 0
70732: PPUSH
// case cmd of 301 :
70733: LD_VAR 0 1
70737: PUSH
70738: LD_INT 301
70740: DOUBLE
70741: EQUAL
70742: IFTRUE 70746
70744: GO 70778
70746: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
70747: LD_VAR 0 6
70751: PPUSH
70752: LD_VAR 0 7
70756: PPUSH
70757: LD_VAR 0 8
70761: PPUSH
70762: LD_VAR 0 4
70766: PPUSH
70767: LD_VAR 0 5
70771: PPUSH
70772: CALL 71987 0 5
70776: GO 70899
70778: LD_INT 302
70780: DOUBLE
70781: EQUAL
70782: IFTRUE 70786
70784: GO 70823
70786: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
70787: LD_VAR 0 6
70791: PPUSH
70792: LD_VAR 0 7
70796: PPUSH
70797: LD_VAR 0 8
70801: PPUSH
70802: LD_VAR 0 9
70806: PPUSH
70807: LD_VAR 0 4
70811: PPUSH
70812: LD_VAR 0 5
70816: PPUSH
70817: CALL 72078 0 6
70821: GO 70899
70823: LD_INT 303
70825: DOUBLE
70826: EQUAL
70827: IFTRUE 70831
70829: GO 70868
70831: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
70832: LD_VAR 0 6
70836: PPUSH
70837: LD_VAR 0 7
70841: PPUSH
70842: LD_VAR 0 8
70846: PPUSH
70847: LD_VAR 0 9
70851: PPUSH
70852: LD_VAR 0 4
70856: PPUSH
70857: LD_VAR 0 5
70861: PPUSH
70862: CALL 70904 0 6
70866: GO 70899
70868: LD_INT 304
70870: DOUBLE
70871: EQUAL
70872: IFTRUE 70876
70874: GO 70898
70876: POP
// hHackTeleport ( unit , x , y ) ; end ;
70877: LD_VAR 0 2
70881: PPUSH
70882: LD_VAR 0 4
70886: PPUSH
70887: LD_VAR 0 5
70891: PPUSH
70892: CALL 72671 0 3
70896: GO 70899
70898: POP
// end ;
70899: LD_VAR 0 12
70903: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
70904: LD_INT 0
70906: PPUSH
70907: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
70908: LD_VAR 0 1
70912: PUSH
70913: LD_INT 1
70915: LESS
70916: PUSH
70917: LD_VAR 0 1
70921: PUSH
70922: LD_INT 3
70924: GREATER
70925: OR
70926: PUSH
70927: LD_VAR 0 5
70931: PPUSH
70932: LD_VAR 0 6
70936: PPUSH
70937: CALL_OW 428
70941: OR
70942: IFFALSE 70946
// exit ;
70944: GO 71674
// uc_side := your_side ;
70946: LD_ADDR_OWVAR 20
70950: PUSH
70951: LD_OWVAR 2
70955: ST_TO_ADDR
// uc_nation := nation ;
70956: LD_ADDR_OWVAR 21
70960: PUSH
70961: LD_VAR 0 1
70965: ST_TO_ADDR
// bc_level = 1 ;
70966: LD_ADDR_OWVAR 43
70970: PUSH
70971: LD_INT 1
70973: ST_TO_ADDR
// case btype of 1 :
70974: LD_VAR 0 2
70978: PUSH
70979: LD_INT 1
70981: DOUBLE
70982: EQUAL
70983: IFTRUE 70987
70985: GO 70998
70987: POP
// bc_type := b_depot ; 2 :
70988: LD_ADDR_OWVAR 42
70992: PUSH
70993: LD_INT 0
70995: ST_TO_ADDR
70996: GO 71618
70998: LD_INT 2
71000: DOUBLE
71001: EQUAL
71002: IFTRUE 71006
71004: GO 71017
71006: POP
// bc_type := b_warehouse ; 3 :
71007: LD_ADDR_OWVAR 42
71011: PUSH
71012: LD_INT 1
71014: ST_TO_ADDR
71015: GO 71618
71017: LD_INT 3
71019: DOUBLE
71020: EQUAL
71021: IFTRUE 71025
71023: GO 71036
71025: POP
// bc_type := b_lab ; 4 .. 9 :
71026: LD_ADDR_OWVAR 42
71030: PUSH
71031: LD_INT 6
71033: ST_TO_ADDR
71034: GO 71618
71036: LD_INT 4
71038: DOUBLE
71039: GREATEREQUAL
71040: IFFALSE 71048
71042: LD_INT 9
71044: DOUBLE
71045: LESSEQUAL
71046: IFTRUE 71050
71048: GO 71110
71050: POP
// begin bc_type := b_lab_half ;
71051: LD_ADDR_OWVAR 42
71055: PUSH
71056: LD_INT 7
71058: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
71059: LD_ADDR_OWVAR 44
71063: PUSH
71064: LD_INT 10
71066: PUSH
71067: LD_INT 11
71069: PUSH
71070: LD_INT 12
71072: PUSH
71073: LD_INT 15
71075: PUSH
71076: LD_INT 14
71078: PUSH
71079: LD_INT 13
71081: PUSH
71082: EMPTY
71083: LIST
71084: LIST
71085: LIST
71086: LIST
71087: LIST
71088: LIST
71089: PUSH
71090: LD_VAR 0 2
71094: PUSH
71095: LD_INT 3
71097: MINUS
71098: ARRAY
71099: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
71100: LD_ADDR_OWVAR 45
71104: PUSH
71105: LD_INT 9
71107: ST_TO_ADDR
// end ; 10 .. 13 :
71108: GO 71618
71110: LD_INT 10
71112: DOUBLE
71113: GREATEREQUAL
71114: IFFALSE 71122
71116: LD_INT 13
71118: DOUBLE
71119: LESSEQUAL
71120: IFTRUE 71124
71122: GO 71201
71124: POP
// begin bc_type := b_lab_full ;
71125: LD_ADDR_OWVAR 42
71129: PUSH
71130: LD_INT 8
71132: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
71133: LD_ADDR_OWVAR 44
71137: PUSH
71138: LD_INT 10
71140: PUSH
71141: LD_INT 12
71143: PUSH
71144: LD_INT 14
71146: PUSH
71147: LD_INT 13
71149: PUSH
71150: EMPTY
71151: LIST
71152: LIST
71153: LIST
71154: LIST
71155: PUSH
71156: LD_VAR 0 2
71160: PUSH
71161: LD_INT 9
71163: MINUS
71164: ARRAY
71165: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
71166: LD_ADDR_OWVAR 45
71170: PUSH
71171: LD_INT 11
71173: PUSH
71174: LD_INT 15
71176: PUSH
71177: LD_INT 12
71179: PUSH
71180: LD_INT 15
71182: PUSH
71183: EMPTY
71184: LIST
71185: LIST
71186: LIST
71187: LIST
71188: PUSH
71189: LD_VAR 0 2
71193: PUSH
71194: LD_INT 9
71196: MINUS
71197: ARRAY
71198: ST_TO_ADDR
// end ; 14 :
71199: GO 71618
71201: LD_INT 14
71203: DOUBLE
71204: EQUAL
71205: IFTRUE 71209
71207: GO 71220
71209: POP
// bc_type := b_workshop ; 15 :
71210: LD_ADDR_OWVAR 42
71214: PUSH
71215: LD_INT 2
71217: ST_TO_ADDR
71218: GO 71618
71220: LD_INT 15
71222: DOUBLE
71223: EQUAL
71224: IFTRUE 71228
71226: GO 71239
71228: POP
// bc_type := b_factory ; 16 :
71229: LD_ADDR_OWVAR 42
71233: PUSH
71234: LD_INT 3
71236: ST_TO_ADDR
71237: GO 71618
71239: LD_INT 16
71241: DOUBLE
71242: EQUAL
71243: IFTRUE 71247
71245: GO 71258
71247: POP
// bc_type := b_ext_gun ; 17 :
71248: LD_ADDR_OWVAR 42
71252: PUSH
71253: LD_INT 17
71255: ST_TO_ADDR
71256: GO 71618
71258: LD_INT 17
71260: DOUBLE
71261: EQUAL
71262: IFTRUE 71266
71264: GO 71294
71266: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
71267: LD_ADDR_OWVAR 42
71271: PUSH
71272: LD_INT 19
71274: PUSH
71275: LD_INT 23
71277: PUSH
71278: LD_INT 19
71280: PUSH
71281: EMPTY
71282: LIST
71283: LIST
71284: LIST
71285: PUSH
71286: LD_VAR 0 1
71290: ARRAY
71291: ST_TO_ADDR
71292: GO 71618
71294: LD_INT 18
71296: DOUBLE
71297: EQUAL
71298: IFTRUE 71302
71300: GO 71313
71302: POP
// bc_type := b_ext_radar ; 19 :
71303: LD_ADDR_OWVAR 42
71307: PUSH
71308: LD_INT 20
71310: ST_TO_ADDR
71311: GO 71618
71313: LD_INT 19
71315: DOUBLE
71316: EQUAL
71317: IFTRUE 71321
71319: GO 71332
71321: POP
// bc_type := b_ext_radio ; 20 :
71322: LD_ADDR_OWVAR 42
71326: PUSH
71327: LD_INT 22
71329: ST_TO_ADDR
71330: GO 71618
71332: LD_INT 20
71334: DOUBLE
71335: EQUAL
71336: IFTRUE 71340
71338: GO 71351
71340: POP
// bc_type := b_ext_siberium ; 21 :
71341: LD_ADDR_OWVAR 42
71345: PUSH
71346: LD_INT 21
71348: ST_TO_ADDR
71349: GO 71618
71351: LD_INT 21
71353: DOUBLE
71354: EQUAL
71355: IFTRUE 71359
71357: GO 71370
71359: POP
// bc_type := b_ext_computer ; 22 :
71360: LD_ADDR_OWVAR 42
71364: PUSH
71365: LD_INT 24
71367: ST_TO_ADDR
71368: GO 71618
71370: LD_INT 22
71372: DOUBLE
71373: EQUAL
71374: IFTRUE 71378
71376: GO 71389
71378: POP
// bc_type := b_ext_track ; 23 :
71379: LD_ADDR_OWVAR 42
71383: PUSH
71384: LD_INT 16
71386: ST_TO_ADDR
71387: GO 71618
71389: LD_INT 23
71391: DOUBLE
71392: EQUAL
71393: IFTRUE 71397
71395: GO 71408
71397: POP
// bc_type := b_ext_laser ; 24 :
71398: LD_ADDR_OWVAR 42
71402: PUSH
71403: LD_INT 25
71405: ST_TO_ADDR
71406: GO 71618
71408: LD_INT 24
71410: DOUBLE
71411: EQUAL
71412: IFTRUE 71416
71414: GO 71427
71416: POP
// bc_type := b_control_tower ; 25 :
71417: LD_ADDR_OWVAR 42
71421: PUSH
71422: LD_INT 36
71424: ST_TO_ADDR
71425: GO 71618
71427: LD_INT 25
71429: DOUBLE
71430: EQUAL
71431: IFTRUE 71435
71433: GO 71446
71435: POP
// bc_type := b_breastwork ; 26 :
71436: LD_ADDR_OWVAR 42
71440: PUSH
71441: LD_INT 31
71443: ST_TO_ADDR
71444: GO 71618
71446: LD_INT 26
71448: DOUBLE
71449: EQUAL
71450: IFTRUE 71454
71452: GO 71465
71454: POP
// bc_type := b_bunker ; 27 :
71455: LD_ADDR_OWVAR 42
71459: PUSH
71460: LD_INT 32
71462: ST_TO_ADDR
71463: GO 71618
71465: LD_INT 27
71467: DOUBLE
71468: EQUAL
71469: IFTRUE 71473
71471: GO 71484
71473: POP
// bc_type := b_turret ; 28 :
71474: LD_ADDR_OWVAR 42
71478: PUSH
71479: LD_INT 33
71481: ST_TO_ADDR
71482: GO 71618
71484: LD_INT 28
71486: DOUBLE
71487: EQUAL
71488: IFTRUE 71492
71490: GO 71503
71492: POP
// bc_type := b_armoury ; 29 :
71493: LD_ADDR_OWVAR 42
71497: PUSH
71498: LD_INT 4
71500: ST_TO_ADDR
71501: GO 71618
71503: LD_INT 29
71505: DOUBLE
71506: EQUAL
71507: IFTRUE 71511
71509: GO 71522
71511: POP
// bc_type := b_barracks ; 30 :
71512: LD_ADDR_OWVAR 42
71516: PUSH
71517: LD_INT 5
71519: ST_TO_ADDR
71520: GO 71618
71522: LD_INT 30
71524: DOUBLE
71525: EQUAL
71526: IFTRUE 71530
71528: GO 71541
71530: POP
// bc_type := b_solar_power ; 31 :
71531: LD_ADDR_OWVAR 42
71535: PUSH
71536: LD_INT 27
71538: ST_TO_ADDR
71539: GO 71618
71541: LD_INT 31
71543: DOUBLE
71544: EQUAL
71545: IFTRUE 71549
71547: GO 71560
71549: POP
// bc_type := b_oil_power ; 32 :
71550: LD_ADDR_OWVAR 42
71554: PUSH
71555: LD_INT 26
71557: ST_TO_ADDR
71558: GO 71618
71560: LD_INT 32
71562: DOUBLE
71563: EQUAL
71564: IFTRUE 71568
71566: GO 71579
71568: POP
// bc_type := b_siberite_power ; 33 :
71569: LD_ADDR_OWVAR 42
71573: PUSH
71574: LD_INT 28
71576: ST_TO_ADDR
71577: GO 71618
71579: LD_INT 33
71581: DOUBLE
71582: EQUAL
71583: IFTRUE 71587
71585: GO 71598
71587: POP
// bc_type := b_oil_mine ; 34 :
71588: LD_ADDR_OWVAR 42
71592: PUSH
71593: LD_INT 29
71595: ST_TO_ADDR
71596: GO 71618
71598: LD_INT 34
71600: DOUBLE
71601: EQUAL
71602: IFTRUE 71606
71604: GO 71617
71606: POP
// bc_type := b_siberite_mine ; end ;
71607: LD_ADDR_OWVAR 42
71611: PUSH
71612: LD_INT 30
71614: ST_TO_ADDR
71615: GO 71618
71617: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
71618: LD_ADDR_VAR 0 8
71622: PUSH
71623: LD_VAR 0 5
71627: PPUSH
71628: LD_VAR 0 6
71632: PPUSH
71633: LD_VAR 0 3
71637: PPUSH
71638: CALL_OW 47
71642: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
71643: LD_OWVAR 42
71647: PUSH
71648: LD_INT 32
71650: PUSH
71651: LD_INT 33
71653: PUSH
71654: EMPTY
71655: LIST
71656: LIST
71657: IN
71658: IFFALSE 71674
// PlaceWeaponTurret ( b , weapon ) ;
71660: LD_VAR 0 8
71664: PPUSH
71665: LD_VAR 0 4
71669: PPUSH
71670: CALL_OW 431
// end ;
71674: LD_VAR 0 7
71678: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
71679: LD_INT 0
71681: PPUSH
71682: PPUSH
71683: PPUSH
71684: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
71685: LD_ADDR_VAR 0 4
71689: PUSH
71690: LD_INT 22
71692: PUSH
71693: LD_OWVAR 2
71697: PUSH
71698: EMPTY
71699: LIST
71700: LIST
71701: PUSH
71702: LD_INT 2
71704: PUSH
71705: LD_INT 30
71707: PUSH
71708: LD_INT 0
71710: PUSH
71711: EMPTY
71712: LIST
71713: LIST
71714: PUSH
71715: LD_INT 30
71717: PUSH
71718: LD_INT 1
71720: PUSH
71721: EMPTY
71722: LIST
71723: LIST
71724: PUSH
71725: EMPTY
71726: LIST
71727: LIST
71728: LIST
71729: PUSH
71730: EMPTY
71731: LIST
71732: LIST
71733: PPUSH
71734: CALL_OW 69
71738: ST_TO_ADDR
// if not tmp then
71739: LD_VAR 0 4
71743: NOT
71744: IFFALSE 71748
// exit ;
71746: GO 71807
// for i in tmp do
71748: LD_ADDR_VAR 0 2
71752: PUSH
71753: LD_VAR 0 4
71757: PUSH
71758: FOR_IN
71759: IFFALSE 71805
// for j = 1 to 3 do
71761: LD_ADDR_VAR 0 3
71765: PUSH
71766: DOUBLE
71767: LD_INT 1
71769: DEC
71770: ST_TO_ADDR
71771: LD_INT 3
71773: PUSH
71774: FOR_TO
71775: IFFALSE 71801
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
71777: LD_VAR 0 2
71781: PPUSH
71782: CALL_OW 274
71786: PPUSH
71787: LD_VAR 0 3
71791: PPUSH
71792: LD_INT 99999
71794: PPUSH
71795: CALL_OW 277
71799: GO 71774
71801: POP
71802: POP
71803: GO 71758
71805: POP
71806: POP
// end ;
71807: LD_VAR 0 1
71811: RET
// export function hHackSetLevel10 ; var i , j ; begin
71812: LD_INT 0
71814: PPUSH
71815: PPUSH
71816: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
71817: LD_ADDR_VAR 0 2
71821: PUSH
71822: LD_INT 21
71824: PUSH
71825: LD_INT 1
71827: PUSH
71828: EMPTY
71829: LIST
71830: LIST
71831: PPUSH
71832: CALL_OW 69
71836: PUSH
71837: FOR_IN
71838: IFFALSE 71890
// if IsSelected ( i ) then
71840: LD_VAR 0 2
71844: PPUSH
71845: CALL_OW 306
71849: IFFALSE 71888
// begin for j := 1 to 4 do
71851: LD_ADDR_VAR 0 3
71855: PUSH
71856: DOUBLE
71857: LD_INT 1
71859: DEC
71860: ST_TO_ADDR
71861: LD_INT 4
71863: PUSH
71864: FOR_TO
71865: IFFALSE 71886
// SetSkill ( i , j , 10 ) ;
71867: LD_VAR 0 2
71871: PPUSH
71872: LD_VAR 0 3
71876: PPUSH
71877: LD_INT 10
71879: PPUSH
71880: CALL_OW 237
71884: GO 71864
71886: POP
71887: POP
// end ;
71888: GO 71837
71890: POP
71891: POP
// end ;
71892: LD_VAR 0 1
71896: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
71897: LD_INT 0
71899: PPUSH
71900: PPUSH
71901: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
71902: LD_ADDR_VAR 0 2
71906: PUSH
71907: LD_INT 22
71909: PUSH
71910: LD_OWVAR 2
71914: PUSH
71915: EMPTY
71916: LIST
71917: LIST
71918: PUSH
71919: LD_INT 21
71921: PUSH
71922: LD_INT 1
71924: PUSH
71925: EMPTY
71926: LIST
71927: LIST
71928: PUSH
71929: EMPTY
71930: LIST
71931: LIST
71932: PPUSH
71933: CALL_OW 69
71937: PUSH
71938: FOR_IN
71939: IFFALSE 71980
// begin for j := 1 to 4 do
71941: LD_ADDR_VAR 0 3
71945: PUSH
71946: DOUBLE
71947: LD_INT 1
71949: DEC
71950: ST_TO_ADDR
71951: LD_INT 4
71953: PUSH
71954: FOR_TO
71955: IFFALSE 71976
// SetSkill ( i , j , 10 ) ;
71957: LD_VAR 0 2
71961: PPUSH
71962: LD_VAR 0 3
71966: PPUSH
71967: LD_INT 10
71969: PPUSH
71970: CALL_OW 237
71974: GO 71954
71976: POP
71977: POP
// end ;
71978: GO 71938
71980: POP
71981: POP
// end ;
71982: LD_VAR 0 1
71986: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
71987: LD_INT 0
71989: PPUSH
// uc_side := your_side ;
71990: LD_ADDR_OWVAR 20
71994: PUSH
71995: LD_OWVAR 2
71999: ST_TO_ADDR
// uc_nation := nation ;
72000: LD_ADDR_OWVAR 21
72004: PUSH
72005: LD_VAR 0 1
72009: ST_TO_ADDR
// InitHc ;
72010: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
72014: LD_INT 0
72016: PPUSH
72017: LD_VAR 0 2
72021: PPUSH
72022: LD_VAR 0 3
72026: PPUSH
72027: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
72031: LD_VAR 0 4
72035: PPUSH
72036: LD_VAR 0 5
72040: PPUSH
72041: CALL_OW 428
72045: PUSH
72046: LD_INT 0
72048: EQUAL
72049: IFFALSE 72073
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
72051: CALL_OW 44
72055: PPUSH
72056: LD_VAR 0 4
72060: PPUSH
72061: LD_VAR 0 5
72065: PPUSH
72066: LD_INT 1
72068: PPUSH
72069: CALL_OW 48
// end ;
72073: LD_VAR 0 6
72077: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
72078: LD_INT 0
72080: PPUSH
72081: PPUSH
// uc_side := your_side ;
72082: LD_ADDR_OWVAR 20
72086: PUSH
72087: LD_OWVAR 2
72091: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
72092: LD_VAR 0 1
72096: PUSH
72097: LD_INT 1
72099: PUSH
72100: LD_INT 2
72102: PUSH
72103: LD_INT 3
72105: PUSH
72106: LD_INT 4
72108: PUSH
72109: LD_INT 5
72111: PUSH
72112: EMPTY
72113: LIST
72114: LIST
72115: LIST
72116: LIST
72117: LIST
72118: IN
72119: IFFALSE 72131
// uc_nation := nation_american else
72121: LD_ADDR_OWVAR 21
72125: PUSH
72126: LD_INT 1
72128: ST_TO_ADDR
72129: GO 72174
// if chassis in [ 11 , 12 , 13 , 14 ] then
72131: LD_VAR 0 1
72135: PUSH
72136: LD_INT 11
72138: PUSH
72139: LD_INT 12
72141: PUSH
72142: LD_INT 13
72144: PUSH
72145: LD_INT 14
72147: PUSH
72148: EMPTY
72149: LIST
72150: LIST
72151: LIST
72152: LIST
72153: IN
72154: IFFALSE 72166
// uc_nation := nation_arabian else
72156: LD_ADDR_OWVAR 21
72160: PUSH
72161: LD_INT 2
72163: ST_TO_ADDR
72164: GO 72174
// uc_nation := nation_russian ;
72166: LD_ADDR_OWVAR 21
72170: PUSH
72171: LD_INT 3
72173: ST_TO_ADDR
// vc_chassis := chassis ;
72174: LD_ADDR_OWVAR 37
72178: PUSH
72179: LD_VAR 0 1
72183: ST_TO_ADDR
// vc_engine := engine ;
72184: LD_ADDR_OWVAR 39
72188: PUSH
72189: LD_VAR 0 2
72193: ST_TO_ADDR
// vc_control := control ;
72194: LD_ADDR_OWVAR 38
72198: PUSH
72199: LD_VAR 0 3
72203: ST_TO_ADDR
// vc_weapon := weapon ;
72204: LD_ADDR_OWVAR 40
72208: PUSH
72209: LD_VAR 0 4
72213: ST_TO_ADDR
// un := CreateVehicle ;
72214: LD_ADDR_VAR 0 8
72218: PUSH
72219: CALL_OW 45
72223: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
72224: LD_VAR 0 8
72228: PPUSH
72229: LD_INT 0
72231: PPUSH
72232: LD_INT 5
72234: PPUSH
72235: CALL_OW 12
72239: PPUSH
72240: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
72244: LD_VAR 0 8
72248: PPUSH
72249: LD_VAR 0 5
72253: PPUSH
72254: LD_VAR 0 6
72258: PPUSH
72259: LD_INT 1
72261: PPUSH
72262: CALL_OW 48
// end ;
72266: LD_VAR 0 7
72270: RET
// export hInvincible ; every 1 do
72271: GO 72273
72273: DISABLE
// hInvincible := [ ] ;
72274: LD_ADDR_EXP 99
72278: PUSH
72279: EMPTY
72280: ST_TO_ADDR
72281: END
// every 10 do var i ;
72282: GO 72284
72284: DISABLE
72285: LD_INT 0
72287: PPUSH
// begin enable ;
72288: ENABLE
// if not hInvincible then
72289: LD_EXP 99
72293: NOT
72294: IFFALSE 72298
// exit ;
72296: GO 72342
// for i in hInvincible do
72298: LD_ADDR_VAR 0 1
72302: PUSH
72303: LD_EXP 99
72307: PUSH
72308: FOR_IN
72309: IFFALSE 72340
// if GetLives ( i ) < 1000 then
72311: LD_VAR 0 1
72315: PPUSH
72316: CALL_OW 256
72320: PUSH
72321: LD_INT 1000
72323: LESS
72324: IFFALSE 72338
// SetLives ( i , 1000 ) ;
72326: LD_VAR 0 1
72330: PPUSH
72331: LD_INT 1000
72333: PPUSH
72334: CALL_OW 234
72338: GO 72308
72340: POP
72341: POP
// end ;
72342: PPOPN 1
72344: END
// export function hHackInvincible ; var i ; begin
72345: LD_INT 0
72347: PPUSH
72348: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
72349: LD_ADDR_VAR 0 2
72353: PUSH
72354: LD_INT 2
72356: PUSH
72357: LD_INT 21
72359: PUSH
72360: LD_INT 1
72362: PUSH
72363: EMPTY
72364: LIST
72365: LIST
72366: PUSH
72367: LD_INT 21
72369: PUSH
72370: LD_INT 2
72372: PUSH
72373: EMPTY
72374: LIST
72375: LIST
72376: PUSH
72377: EMPTY
72378: LIST
72379: LIST
72380: LIST
72381: PPUSH
72382: CALL_OW 69
72386: PUSH
72387: FOR_IN
72388: IFFALSE 72449
// if IsSelected ( i ) then
72390: LD_VAR 0 2
72394: PPUSH
72395: CALL_OW 306
72399: IFFALSE 72447
// begin if i in hInvincible then
72401: LD_VAR 0 2
72405: PUSH
72406: LD_EXP 99
72410: IN
72411: IFFALSE 72431
// hInvincible := hInvincible diff i else
72413: LD_ADDR_EXP 99
72417: PUSH
72418: LD_EXP 99
72422: PUSH
72423: LD_VAR 0 2
72427: DIFF
72428: ST_TO_ADDR
72429: GO 72447
// hInvincible := hInvincible union i ;
72431: LD_ADDR_EXP 99
72435: PUSH
72436: LD_EXP 99
72440: PUSH
72441: LD_VAR 0 2
72445: UNION
72446: ST_TO_ADDR
// end ;
72447: GO 72387
72449: POP
72450: POP
// end ;
72451: LD_VAR 0 1
72455: RET
// export function hHackInvisible ; var i , j ; begin
72456: LD_INT 0
72458: PPUSH
72459: PPUSH
72460: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
72461: LD_ADDR_VAR 0 2
72465: PUSH
72466: LD_INT 21
72468: PUSH
72469: LD_INT 1
72471: PUSH
72472: EMPTY
72473: LIST
72474: LIST
72475: PPUSH
72476: CALL_OW 69
72480: PUSH
72481: FOR_IN
72482: IFFALSE 72506
// if IsSelected ( i ) then
72484: LD_VAR 0 2
72488: PPUSH
72489: CALL_OW 306
72493: IFFALSE 72504
// ComForceInvisible ( i ) ;
72495: LD_VAR 0 2
72499: PPUSH
72500: CALL_OW 496
72504: GO 72481
72506: POP
72507: POP
// end ;
72508: LD_VAR 0 1
72512: RET
// export function hHackChangeYourSide ; begin
72513: LD_INT 0
72515: PPUSH
// if your_side = 8 then
72516: LD_OWVAR 2
72520: PUSH
72521: LD_INT 8
72523: EQUAL
72524: IFFALSE 72536
// your_side := 0 else
72526: LD_ADDR_OWVAR 2
72530: PUSH
72531: LD_INT 0
72533: ST_TO_ADDR
72534: GO 72550
// your_side := your_side + 1 ;
72536: LD_ADDR_OWVAR 2
72540: PUSH
72541: LD_OWVAR 2
72545: PUSH
72546: LD_INT 1
72548: PLUS
72549: ST_TO_ADDR
// end ;
72550: LD_VAR 0 1
72554: RET
// export function hHackChangeUnitSide ; var i , j ; begin
72555: LD_INT 0
72557: PPUSH
72558: PPUSH
72559: PPUSH
// for i in all_units do
72560: LD_ADDR_VAR 0 2
72564: PUSH
72565: LD_OWVAR 3
72569: PUSH
72570: FOR_IN
72571: IFFALSE 72649
// if IsSelected ( i ) then
72573: LD_VAR 0 2
72577: PPUSH
72578: CALL_OW 306
72582: IFFALSE 72647
// begin j := GetSide ( i ) ;
72584: LD_ADDR_VAR 0 3
72588: PUSH
72589: LD_VAR 0 2
72593: PPUSH
72594: CALL_OW 255
72598: ST_TO_ADDR
// if j = 8 then
72599: LD_VAR 0 3
72603: PUSH
72604: LD_INT 8
72606: EQUAL
72607: IFFALSE 72619
// j := 0 else
72609: LD_ADDR_VAR 0 3
72613: PUSH
72614: LD_INT 0
72616: ST_TO_ADDR
72617: GO 72633
// j := j + 1 ;
72619: LD_ADDR_VAR 0 3
72623: PUSH
72624: LD_VAR 0 3
72628: PUSH
72629: LD_INT 1
72631: PLUS
72632: ST_TO_ADDR
// SetSide ( i , j ) ;
72633: LD_VAR 0 2
72637: PPUSH
72638: LD_VAR 0 3
72642: PPUSH
72643: CALL_OW 235
// end ;
72647: GO 72570
72649: POP
72650: POP
// end ;
72651: LD_VAR 0 1
72655: RET
// export function hHackFog ; begin
72656: LD_INT 0
72658: PPUSH
// FogOff ( true ) ;
72659: LD_INT 1
72661: PPUSH
72662: CALL_OW 344
// end ;
72666: LD_VAR 0 1
72670: RET
// export function hHackTeleport ( unit , x , y ) ; begin
72671: LD_INT 0
72673: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
72674: LD_VAR 0 1
72678: PPUSH
72679: LD_VAR 0 2
72683: PPUSH
72684: LD_VAR 0 3
72688: PPUSH
72689: LD_INT 1
72691: PPUSH
72692: LD_INT 1
72694: PPUSH
72695: CALL_OW 483
// CenterOnXY ( x , y ) ;
72699: LD_VAR 0 2
72703: PPUSH
72704: LD_VAR 0 3
72708: PPUSH
72709: CALL_OW 84
// end ;
72713: LD_VAR 0 4
72717: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
72718: LD_INT 0
72720: PPUSH
72721: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
72722: LD_VAR 0 1
72726: NOT
72727: PUSH
72728: LD_VAR 0 2
72732: PPUSH
72733: LD_VAR 0 3
72737: PPUSH
72738: CALL_OW 488
72742: NOT
72743: OR
72744: PUSH
72745: LD_VAR 0 1
72749: PPUSH
72750: CALL_OW 266
72754: PUSH
72755: LD_INT 3
72757: NONEQUAL
72758: PUSH
72759: LD_VAR 0 1
72763: PPUSH
72764: CALL_OW 247
72768: PUSH
72769: LD_INT 1
72771: EQUAL
72772: NOT
72773: AND
72774: OR
72775: IFFALSE 72779
// exit ;
72777: GO 72928
// if GetType ( factory ) = unit_human then
72779: LD_VAR 0 1
72783: PPUSH
72784: CALL_OW 247
72788: PUSH
72789: LD_INT 1
72791: EQUAL
72792: IFFALSE 72809
// factory := IsInUnit ( factory ) ;
72794: LD_ADDR_VAR 0 1
72798: PUSH
72799: LD_VAR 0 1
72803: PPUSH
72804: CALL_OW 310
72808: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
72809: LD_VAR 0 1
72813: PPUSH
72814: CALL_OW 266
72818: PUSH
72819: LD_INT 3
72821: NONEQUAL
72822: IFFALSE 72826
// exit ;
72824: GO 72928
// if HexInfo ( x , y ) = factory then
72826: LD_VAR 0 2
72830: PPUSH
72831: LD_VAR 0 3
72835: PPUSH
72836: CALL_OW 428
72840: PUSH
72841: LD_VAR 0 1
72845: EQUAL
72846: IFFALSE 72873
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
72848: LD_ADDR_EXP 100
72852: PUSH
72853: LD_EXP 100
72857: PPUSH
72858: LD_VAR 0 1
72862: PPUSH
72863: LD_INT 0
72865: PPUSH
72866: CALL_OW 1
72870: ST_TO_ADDR
72871: GO 72924
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
72873: LD_ADDR_EXP 100
72877: PUSH
72878: LD_EXP 100
72882: PPUSH
72883: LD_VAR 0 1
72887: PPUSH
72888: LD_VAR 0 1
72892: PPUSH
72893: CALL_OW 255
72897: PUSH
72898: LD_VAR 0 1
72902: PUSH
72903: LD_VAR 0 2
72907: PUSH
72908: LD_VAR 0 3
72912: PUSH
72913: EMPTY
72914: LIST
72915: LIST
72916: LIST
72917: LIST
72918: PPUSH
72919: CALL_OW 1
72923: ST_TO_ADDR
// UpdateFactoryWaypoints ;
72924: CALL 72933 0 0
// end ;
72928: LD_VAR 0 4
72932: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
72933: LD_INT 0
72935: PPUSH
72936: PPUSH
72937: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
72938: LD_STRING resetFactoryWaypoint();
72940: PPUSH
72941: CALL_OW 559
// if factoryWaypoints then
72945: LD_EXP 100
72949: IFFALSE 73075
// begin list := PrepareArray ( factoryWaypoints ) ;
72951: LD_ADDR_VAR 0 3
72955: PUSH
72956: LD_EXP 100
72960: PPUSH
72961: CALL 57704 0 1
72965: ST_TO_ADDR
// for i := 1 to list do
72966: LD_ADDR_VAR 0 2
72970: PUSH
72971: DOUBLE
72972: LD_INT 1
72974: DEC
72975: ST_TO_ADDR
72976: LD_VAR 0 3
72980: PUSH
72981: FOR_TO
72982: IFFALSE 73073
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
72984: LD_STRING setFactoryWaypointXY(
72986: PUSH
72987: LD_VAR 0 3
72991: PUSH
72992: LD_VAR 0 2
72996: ARRAY
72997: PUSH
72998: LD_INT 1
73000: ARRAY
73001: STR
73002: PUSH
73003: LD_STRING ,
73005: STR
73006: PUSH
73007: LD_VAR 0 3
73011: PUSH
73012: LD_VAR 0 2
73016: ARRAY
73017: PUSH
73018: LD_INT 2
73020: ARRAY
73021: STR
73022: PUSH
73023: LD_STRING ,
73025: STR
73026: PUSH
73027: LD_VAR 0 3
73031: PUSH
73032: LD_VAR 0 2
73036: ARRAY
73037: PUSH
73038: LD_INT 3
73040: ARRAY
73041: STR
73042: PUSH
73043: LD_STRING ,
73045: STR
73046: PUSH
73047: LD_VAR 0 3
73051: PUSH
73052: LD_VAR 0 2
73056: ARRAY
73057: PUSH
73058: LD_INT 4
73060: ARRAY
73061: STR
73062: PUSH
73063: LD_STRING )
73065: STR
73066: PPUSH
73067: CALL_OW 559
73071: GO 72981
73073: POP
73074: POP
// end ; end ;
73075: LD_VAR 0 1
73079: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
73080: LD_INT 0
73082: PPUSH
// if HexInfo ( x , y ) = warehouse then
73083: LD_VAR 0 2
73087: PPUSH
73088: LD_VAR 0 3
73092: PPUSH
73093: CALL_OW 428
73097: PUSH
73098: LD_VAR 0 1
73102: EQUAL
73103: IFFALSE 73130
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
73105: LD_ADDR_EXP 101
73109: PUSH
73110: LD_EXP 101
73114: PPUSH
73115: LD_VAR 0 1
73119: PPUSH
73120: LD_INT 0
73122: PPUSH
73123: CALL_OW 1
73127: ST_TO_ADDR
73128: GO 73181
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
73130: LD_ADDR_EXP 101
73134: PUSH
73135: LD_EXP 101
73139: PPUSH
73140: LD_VAR 0 1
73144: PPUSH
73145: LD_VAR 0 1
73149: PPUSH
73150: CALL_OW 255
73154: PUSH
73155: LD_VAR 0 1
73159: PUSH
73160: LD_VAR 0 2
73164: PUSH
73165: LD_VAR 0 3
73169: PUSH
73170: EMPTY
73171: LIST
73172: LIST
73173: LIST
73174: LIST
73175: PPUSH
73176: CALL_OW 1
73180: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
73181: CALL 73190 0 0
// end ;
73185: LD_VAR 0 4
73189: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
73190: LD_INT 0
73192: PPUSH
73193: PPUSH
73194: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
73195: LD_STRING resetWarehouseGatheringPoints();
73197: PPUSH
73198: CALL_OW 559
// if warehouseGatheringPoints then
73202: LD_EXP 101
73206: IFFALSE 73332
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
73208: LD_ADDR_VAR 0 3
73212: PUSH
73213: LD_EXP 101
73217: PPUSH
73218: CALL 57704 0 1
73222: ST_TO_ADDR
// for i := 1 to list do
73223: LD_ADDR_VAR 0 2
73227: PUSH
73228: DOUBLE
73229: LD_INT 1
73231: DEC
73232: ST_TO_ADDR
73233: LD_VAR 0 3
73237: PUSH
73238: FOR_TO
73239: IFFALSE 73330
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
73241: LD_STRING setWarehouseGatheringPointXY(
73243: PUSH
73244: LD_VAR 0 3
73248: PUSH
73249: LD_VAR 0 2
73253: ARRAY
73254: PUSH
73255: LD_INT 1
73257: ARRAY
73258: STR
73259: PUSH
73260: LD_STRING ,
73262: STR
73263: PUSH
73264: LD_VAR 0 3
73268: PUSH
73269: LD_VAR 0 2
73273: ARRAY
73274: PUSH
73275: LD_INT 2
73277: ARRAY
73278: STR
73279: PUSH
73280: LD_STRING ,
73282: STR
73283: PUSH
73284: LD_VAR 0 3
73288: PUSH
73289: LD_VAR 0 2
73293: ARRAY
73294: PUSH
73295: LD_INT 3
73297: ARRAY
73298: STR
73299: PUSH
73300: LD_STRING ,
73302: STR
73303: PUSH
73304: LD_VAR 0 3
73308: PUSH
73309: LD_VAR 0 2
73313: ARRAY
73314: PUSH
73315: LD_INT 4
73317: ARRAY
73318: STR
73319: PUSH
73320: LD_STRING )
73322: STR
73323: PPUSH
73324: CALL_OW 559
73328: GO 73238
73330: POP
73331: POP
// end ; end ;
73332: LD_VAR 0 1
73336: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
73337: LD_EXP 101
73341: IFFALSE 74026
73343: GO 73345
73345: DISABLE
73346: LD_INT 0
73348: PPUSH
73349: PPUSH
73350: PPUSH
73351: PPUSH
73352: PPUSH
73353: PPUSH
73354: PPUSH
73355: PPUSH
73356: PPUSH
// begin enable ;
73357: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
73358: LD_ADDR_VAR 0 3
73362: PUSH
73363: LD_EXP 101
73367: PPUSH
73368: CALL 57704 0 1
73372: ST_TO_ADDR
// if not list then
73373: LD_VAR 0 3
73377: NOT
73378: IFFALSE 73382
// exit ;
73380: GO 74026
// for i := 1 to list do
73382: LD_ADDR_VAR 0 1
73386: PUSH
73387: DOUBLE
73388: LD_INT 1
73390: DEC
73391: ST_TO_ADDR
73392: LD_VAR 0 3
73396: PUSH
73397: FOR_TO
73398: IFFALSE 74024
// begin depot := list [ i ] [ 2 ] ;
73400: LD_ADDR_VAR 0 8
73404: PUSH
73405: LD_VAR 0 3
73409: PUSH
73410: LD_VAR 0 1
73414: ARRAY
73415: PUSH
73416: LD_INT 2
73418: ARRAY
73419: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
73420: LD_ADDR_VAR 0 5
73424: PUSH
73425: LD_VAR 0 3
73429: PUSH
73430: LD_VAR 0 1
73434: ARRAY
73435: PUSH
73436: LD_INT 1
73438: ARRAY
73439: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
73440: LD_VAR 0 8
73444: PPUSH
73445: CALL_OW 301
73449: PUSH
73450: LD_VAR 0 5
73454: PUSH
73455: LD_VAR 0 8
73459: PPUSH
73460: CALL_OW 255
73464: NONEQUAL
73465: OR
73466: IFFALSE 73495
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
73468: LD_ADDR_EXP 101
73472: PUSH
73473: LD_EXP 101
73477: PPUSH
73478: LD_VAR 0 8
73482: PPUSH
73483: LD_INT 0
73485: PPUSH
73486: CALL_OW 1
73490: ST_TO_ADDR
// exit ;
73491: POP
73492: POP
73493: GO 74026
// end ; x := list [ i ] [ 3 ] ;
73495: LD_ADDR_VAR 0 6
73499: PUSH
73500: LD_VAR 0 3
73504: PUSH
73505: LD_VAR 0 1
73509: ARRAY
73510: PUSH
73511: LD_INT 3
73513: ARRAY
73514: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
73515: LD_ADDR_VAR 0 7
73519: PUSH
73520: LD_VAR 0 3
73524: PUSH
73525: LD_VAR 0 1
73529: ARRAY
73530: PUSH
73531: LD_INT 4
73533: ARRAY
73534: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
73535: LD_ADDR_VAR 0 9
73539: PUSH
73540: LD_VAR 0 6
73544: PPUSH
73545: LD_VAR 0 7
73549: PPUSH
73550: LD_INT 16
73552: PPUSH
73553: CALL 56292 0 3
73557: ST_TO_ADDR
// if not cratesNearbyPoint then
73558: LD_VAR 0 9
73562: NOT
73563: IFFALSE 73569
// exit ;
73565: POP
73566: POP
73567: GO 74026
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
73569: LD_ADDR_VAR 0 4
73573: PUSH
73574: LD_INT 22
73576: PUSH
73577: LD_VAR 0 5
73581: PUSH
73582: EMPTY
73583: LIST
73584: LIST
73585: PUSH
73586: LD_INT 3
73588: PUSH
73589: LD_INT 60
73591: PUSH
73592: EMPTY
73593: LIST
73594: PUSH
73595: EMPTY
73596: LIST
73597: LIST
73598: PUSH
73599: LD_INT 91
73601: PUSH
73602: LD_VAR 0 8
73606: PUSH
73607: LD_INT 6
73609: PUSH
73610: EMPTY
73611: LIST
73612: LIST
73613: LIST
73614: PUSH
73615: LD_INT 2
73617: PUSH
73618: LD_INT 25
73620: PUSH
73621: LD_INT 2
73623: PUSH
73624: EMPTY
73625: LIST
73626: LIST
73627: PUSH
73628: LD_INT 25
73630: PUSH
73631: LD_INT 16
73633: PUSH
73634: EMPTY
73635: LIST
73636: LIST
73637: PUSH
73638: EMPTY
73639: LIST
73640: LIST
73641: LIST
73642: PUSH
73643: EMPTY
73644: LIST
73645: LIST
73646: LIST
73647: LIST
73648: PPUSH
73649: CALL_OW 69
73653: PUSH
73654: LD_VAR 0 8
73658: PPUSH
73659: CALL_OW 313
73663: PPUSH
73664: LD_INT 3
73666: PUSH
73667: LD_INT 60
73669: PUSH
73670: EMPTY
73671: LIST
73672: PUSH
73673: EMPTY
73674: LIST
73675: LIST
73676: PUSH
73677: LD_INT 2
73679: PUSH
73680: LD_INT 25
73682: PUSH
73683: LD_INT 2
73685: PUSH
73686: EMPTY
73687: LIST
73688: LIST
73689: PUSH
73690: LD_INT 25
73692: PUSH
73693: LD_INT 16
73695: PUSH
73696: EMPTY
73697: LIST
73698: LIST
73699: PUSH
73700: EMPTY
73701: LIST
73702: LIST
73703: LIST
73704: PUSH
73705: EMPTY
73706: LIST
73707: LIST
73708: PPUSH
73709: CALL_OW 72
73713: UNION
73714: ST_TO_ADDR
// if tmp then
73715: LD_VAR 0 4
73719: IFFALSE 73799
// begin tmp := ShrinkArray ( tmp , 3 ) ;
73721: LD_ADDR_VAR 0 4
73725: PUSH
73726: LD_VAR 0 4
73730: PPUSH
73731: LD_INT 3
73733: PPUSH
73734: CALL 54261 0 2
73738: ST_TO_ADDR
// for j in tmp do
73739: LD_ADDR_VAR 0 2
73743: PUSH
73744: LD_VAR 0 4
73748: PUSH
73749: FOR_IN
73750: IFFALSE 73793
// begin if IsInUnit ( j ) then
73752: LD_VAR 0 2
73756: PPUSH
73757: CALL_OW 310
73761: IFFALSE 73772
// ComExit ( j ) ;
73763: LD_VAR 0 2
73767: PPUSH
73768: CALL 54344 0 1
// AddComCollect ( j , x , y ) ;
73772: LD_VAR 0 2
73776: PPUSH
73777: LD_VAR 0 6
73781: PPUSH
73782: LD_VAR 0 7
73786: PPUSH
73787: CALL_OW 177
// end ;
73791: GO 73749
73793: POP
73794: POP
// exit ;
73795: POP
73796: POP
73797: GO 74026
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
73799: LD_ADDR_VAR 0 4
73803: PUSH
73804: LD_INT 22
73806: PUSH
73807: LD_VAR 0 5
73811: PUSH
73812: EMPTY
73813: LIST
73814: LIST
73815: PUSH
73816: LD_INT 91
73818: PUSH
73819: LD_VAR 0 8
73823: PUSH
73824: LD_INT 8
73826: PUSH
73827: EMPTY
73828: LIST
73829: LIST
73830: LIST
73831: PUSH
73832: LD_INT 2
73834: PUSH
73835: LD_INT 34
73837: PUSH
73838: LD_INT 12
73840: PUSH
73841: EMPTY
73842: LIST
73843: LIST
73844: PUSH
73845: LD_INT 34
73847: PUSH
73848: LD_INT 51
73850: PUSH
73851: EMPTY
73852: LIST
73853: LIST
73854: PUSH
73855: LD_INT 34
73857: PUSH
73858: LD_INT 32
73860: PUSH
73861: EMPTY
73862: LIST
73863: LIST
73864: PUSH
73865: LD_INT 34
73867: PUSH
73868: LD_INT 89
73870: PUSH
73871: EMPTY
73872: LIST
73873: LIST
73874: PUSH
73875: EMPTY
73876: LIST
73877: LIST
73878: LIST
73879: LIST
73880: LIST
73881: PUSH
73882: EMPTY
73883: LIST
73884: LIST
73885: LIST
73886: PPUSH
73887: CALL_OW 69
73891: ST_TO_ADDR
// if tmp then
73892: LD_VAR 0 4
73896: IFFALSE 74022
// begin for j in tmp do
73898: LD_ADDR_VAR 0 2
73902: PUSH
73903: LD_VAR 0 4
73907: PUSH
73908: FOR_IN
73909: IFFALSE 74020
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
73911: LD_VAR 0 2
73915: PPUSH
73916: CALL_OW 262
73920: PUSH
73921: LD_INT 3
73923: EQUAL
73924: PUSH
73925: LD_VAR 0 2
73929: PPUSH
73930: CALL_OW 261
73934: PUSH
73935: LD_INT 20
73937: GREATER
73938: OR
73939: PUSH
73940: LD_VAR 0 2
73944: PPUSH
73945: CALL_OW 314
73949: NOT
73950: AND
73951: PUSH
73952: LD_VAR 0 2
73956: PPUSH
73957: CALL_OW 263
73961: PUSH
73962: LD_INT 1
73964: NONEQUAL
73965: PUSH
73966: LD_VAR 0 2
73970: PPUSH
73971: CALL_OW 311
73975: OR
73976: AND
73977: IFFALSE 74018
// begin ComCollect ( j , x , y ) ;
73979: LD_VAR 0 2
73983: PPUSH
73984: LD_VAR 0 6
73988: PPUSH
73989: LD_VAR 0 7
73993: PPUSH
73994: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
73998: LD_VAR 0 2
74002: PPUSH
74003: LD_VAR 0 8
74007: PPUSH
74008: CALL_OW 172
// exit ;
74012: POP
74013: POP
74014: POP
74015: POP
74016: GO 74026
// end ;
74018: GO 73908
74020: POP
74021: POP
// end ; end ;
74022: GO 73397
74024: POP
74025: POP
// end ; end_of_file
74026: PPOPN 9
74028: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
74029: LD_VAR 0 1
74033: PUSH
74034: LD_INT 200
74036: DOUBLE
74037: GREATEREQUAL
74038: IFFALSE 74046
74040: LD_INT 299
74042: DOUBLE
74043: LESSEQUAL
74044: IFTRUE 74048
74046: GO 74080
74048: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
74049: LD_VAR 0 1
74053: PPUSH
74054: LD_VAR 0 2
74058: PPUSH
74059: LD_VAR 0 3
74063: PPUSH
74064: LD_VAR 0 4
74068: PPUSH
74069: LD_VAR 0 5
74073: PPUSH
74074: CALL 74568 0 5
74078: GO 74157
74080: LD_INT 300
74082: DOUBLE
74083: GREATEREQUAL
74084: IFFALSE 74092
74086: LD_INT 399
74088: DOUBLE
74089: LESSEQUAL
74090: IFTRUE 74094
74092: GO 74156
74094: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
74095: LD_VAR 0 1
74099: PPUSH
74100: LD_VAR 0 2
74104: PPUSH
74105: LD_VAR 0 3
74109: PPUSH
74110: LD_VAR 0 4
74114: PPUSH
74115: LD_VAR 0 5
74119: PPUSH
74120: LD_VAR 0 6
74124: PPUSH
74125: LD_VAR 0 7
74129: PPUSH
74130: LD_VAR 0 8
74134: PPUSH
74135: LD_VAR 0 9
74139: PPUSH
74140: LD_VAR 0 10
74144: PPUSH
74145: LD_VAR 0 11
74149: PPUSH
74150: CALL 70730 0 11
74154: GO 74157
74156: POP
// end ;
74157: PPOPN 11
74159: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
74160: LD_VAR 0 1
74164: PPUSH
74165: LD_VAR 0 2
74169: PPUSH
74170: LD_VAR 0 3
74174: PPUSH
74175: LD_VAR 0 4
74179: PPUSH
74180: LD_VAR 0 5
74184: PPUSH
74185: CALL 74304 0 5
// end ; end_of_file
74189: PPOPN 5
74191: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
74192: LD_INT 0
74194: PPUSH
74195: PPUSH
74196: PPUSH
74197: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
74198: LD_VAR 0 1
74202: PPUSH
74203: CALL_OW 264
74207: PUSH
74208: LD_INT 91
74210: EQUAL
74211: IFFALSE 74283
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
74213: LD_INT 68
74215: PPUSH
74216: LD_VAR 0 1
74220: PPUSH
74221: CALL_OW 255
74225: PPUSH
74226: CALL_OW 321
74230: PUSH
74231: LD_INT 2
74233: EQUAL
74234: IFFALSE 74246
// eff := 70 else
74236: LD_ADDR_VAR 0 4
74240: PUSH
74241: LD_INT 70
74243: ST_TO_ADDR
74244: GO 74254
// eff := 30 ;
74246: LD_ADDR_VAR 0 4
74250: PUSH
74251: LD_INT 30
74253: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
74254: LD_VAR 0 1
74258: PPUSH
74259: CALL_OW 250
74263: PPUSH
74264: LD_VAR 0 1
74268: PPUSH
74269: CALL_OW 251
74273: PPUSH
74274: LD_VAR 0 4
74278: PPUSH
74279: CALL_OW 495
// end ; end ;
74283: LD_VAR 0 2
74287: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
74288: LD_INT 0
74290: PPUSH
// end ;
74291: LD_VAR 0 4
74295: RET
// export function SOS_Command ( cmd ) ; begin
74296: LD_INT 0
74298: PPUSH
// end ;
74299: LD_VAR 0 2
74303: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
74304: LD_INT 0
74306: PPUSH
// end ;
74307: LD_VAR 0 6
74311: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
74312: LD_INT 0
74314: PPUSH
74315: PPUSH
// if not vehicle or not factory then
74316: LD_VAR 0 1
74320: NOT
74321: PUSH
74322: LD_VAR 0 2
74326: NOT
74327: OR
74328: IFFALSE 74332
// exit ;
74330: GO 74563
// if factoryWaypoints >= factory then
74332: LD_EXP 100
74336: PUSH
74337: LD_VAR 0 2
74341: GREATEREQUAL
74342: IFFALSE 74563
// if factoryWaypoints [ factory ] then
74344: LD_EXP 100
74348: PUSH
74349: LD_VAR 0 2
74353: ARRAY
74354: IFFALSE 74563
// begin if GetControl ( vehicle ) = control_manual then
74356: LD_VAR 0 1
74360: PPUSH
74361: CALL_OW 263
74365: PUSH
74366: LD_INT 1
74368: EQUAL
74369: IFFALSE 74450
// begin driver := IsDrivenBy ( vehicle ) ;
74371: LD_ADDR_VAR 0 4
74375: PUSH
74376: LD_VAR 0 1
74380: PPUSH
74381: CALL_OW 311
74385: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
74386: LD_VAR 0 4
74390: PPUSH
74391: LD_EXP 100
74395: PUSH
74396: LD_VAR 0 2
74400: ARRAY
74401: PUSH
74402: LD_INT 3
74404: ARRAY
74405: PPUSH
74406: LD_EXP 100
74410: PUSH
74411: LD_VAR 0 2
74415: ARRAY
74416: PUSH
74417: LD_INT 4
74419: ARRAY
74420: PPUSH
74421: CALL_OW 171
// AddComExitVehicle ( driver ) ;
74425: LD_VAR 0 4
74429: PPUSH
74430: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
74434: LD_VAR 0 4
74438: PPUSH
74439: LD_VAR 0 2
74443: PPUSH
74444: CALL_OW 180
// end else
74448: GO 74563
// if GetControl ( vehicle ) = control_remote then
74450: LD_VAR 0 1
74454: PPUSH
74455: CALL_OW 263
74459: PUSH
74460: LD_INT 2
74462: EQUAL
74463: IFFALSE 74524
// begin wait ( 0 0$2 ) ;
74465: LD_INT 70
74467: PPUSH
74468: CALL_OW 67
// if Connect ( vehicle ) then
74472: LD_VAR 0 1
74476: PPUSH
74477: CALL 24565 0 1
74481: IFFALSE 74522
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
74483: LD_VAR 0 1
74487: PPUSH
74488: LD_EXP 100
74492: PUSH
74493: LD_VAR 0 2
74497: ARRAY
74498: PUSH
74499: LD_INT 3
74501: ARRAY
74502: PPUSH
74503: LD_EXP 100
74507: PUSH
74508: LD_VAR 0 2
74512: ARRAY
74513: PUSH
74514: LD_INT 4
74516: ARRAY
74517: PPUSH
74518: CALL_OW 171
// end else
74522: GO 74563
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
74524: LD_VAR 0 1
74528: PPUSH
74529: LD_EXP 100
74533: PUSH
74534: LD_VAR 0 2
74538: ARRAY
74539: PUSH
74540: LD_INT 3
74542: ARRAY
74543: PPUSH
74544: LD_EXP 100
74548: PUSH
74549: LD_VAR 0 2
74553: ARRAY
74554: PUSH
74555: LD_INT 4
74557: ARRAY
74558: PPUSH
74559: CALL_OW 171
// end ; end ;
74563: LD_VAR 0 3
74567: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
74568: LD_INT 0
74570: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
74571: LD_VAR 0 1
74575: PUSH
74576: LD_INT 250
74578: EQUAL
74579: PUSH
74580: LD_VAR 0 2
74584: PPUSH
74585: CALL_OW 264
74589: PUSH
74590: LD_INT 81
74592: EQUAL
74593: AND
74594: IFFALSE 74615
// MinerPlaceMine ( unit , x , y ) ;
74596: LD_VAR 0 2
74600: PPUSH
74601: LD_VAR 0 4
74605: PPUSH
74606: LD_VAR 0 5
74610: PPUSH
74611: CALL 77439 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
74615: LD_VAR 0 1
74619: PUSH
74620: LD_INT 251
74622: EQUAL
74623: PUSH
74624: LD_VAR 0 2
74628: PPUSH
74629: CALL_OW 264
74633: PUSH
74634: LD_INT 81
74636: EQUAL
74637: AND
74638: IFFALSE 74659
// MinerDetonateMine ( unit , x , y ) ;
74640: LD_VAR 0 2
74644: PPUSH
74645: LD_VAR 0 4
74649: PPUSH
74650: LD_VAR 0 5
74654: PPUSH
74655: CALL 77714 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
74659: LD_VAR 0 1
74663: PUSH
74664: LD_INT 252
74666: EQUAL
74667: PUSH
74668: LD_VAR 0 2
74672: PPUSH
74673: CALL_OW 264
74677: PUSH
74678: LD_INT 81
74680: EQUAL
74681: AND
74682: IFFALSE 74703
// MinerCreateMinefield ( unit , x , y ) ;
74684: LD_VAR 0 2
74688: PPUSH
74689: LD_VAR 0 4
74693: PPUSH
74694: LD_VAR 0 5
74698: PPUSH
74699: CALL 78131 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
74703: LD_VAR 0 1
74707: PUSH
74708: LD_INT 253
74710: EQUAL
74711: PUSH
74712: LD_VAR 0 2
74716: PPUSH
74717: CALL_OW 257
74721: PUSH
74722: LD_INT 5
74724: EQUAL
74725: AND
74726: IFFALSE 74747
// ComBinocular ( unit , x , y ) ;
74728: LD_VAR 0 2
74732: PPUSH
74733: LD_VAR 0 4
74737: PPUSH
74738: LD_VAR 0 5
74742: PPUSH
74743: CALL 78500 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
74747: LD_VAR 0 1
74751: PUSH
74752: LD_INT 254
74754: EQUAL
74755: PUSH
74756: LD_VAR 0 2
74760: PPUSH
74761: CALL_OW 264
74765: PUSH
74766: LD_INT 99
74768: EQUAL
74769: AND
74770: PUSH
74771: LD_VAR 0 3
74775: PPUSH
74776: CALL_OW 263
74780: PUSH
74781: LD_INT 3
74783: EQUAL
74784: AND
74785: IFFALSE 74801
// HackDestroyVehicle ( unit , selectedUnit ) ;
74787: LD_VAR 0 2
74791: PPUSH
74792: LD_VAR 0 3
74796: PPUSH
74797: CALL 76803 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
74801: LD_VAR 0 1
74805: PUSH
74806: LD_INT 255
74808: EQUAL
74809: PUSH
74810: LD_VAR 0 2
74814: PPUSH
74815: CALL_OW 264
74819: PUSH
74820: LD_INT 14
74822: PUSH
74823: LD_INT 53
74825: PUSH
74826: EMPTY
74827: LIST
74828: LIST
74829: IN
74830: AND
74831: PUSH
74832: LD_VAR 0 4
74836: PPUSH
74837: LD_VAR 0 5
74841: PPUSH
74842: CALL_OW 488
74846: AND
74847: IFFALSE 74871
// CutTreeXYR ( unit , x , y , 12 ) ;
74849: LD_VAR 0 2
74853: PPUSH
74854: LD_VAR 0 4
74858: PPUSH
74859: LD_VAR 0 5
74863: PPUSH
74864: LD_INT 12
74866: PPUSH
74867: CALL 74966 0 4
// if cmd = 256 then
74871: LD_VAR 0 1
74875: PUSH
74876: LD_INT 256
74878: EQUAL
74879: IFFALSE 74900
// SetFactoryWaypoint ( unit , x , y ) ;
74881: LD_VAR 0 2
74885: PPUSH
74886: LD_VAR 0 4
74890: PPUSH
74891: LD_VAR 0 5
74895: PPUSH
74896: CALL 72718 0 3
// if cmd = 257 then
74900: LD_VAR 0 1
74904: PUSH
74905: LD_INT 257
74907: EQUAL
74908: IFFALSE 74929
// SetWarehouseGatheringPoint ( unit , x , y ) ;
74910: LD_VAR 0 2
74914: PPUSH
74915: LD_VAR 0 4
74919: PPUSH
74920: LD_VAR 0 5
74924: PPUSH
74925: CALL 73080 0 3
// if cmd = 258 then
74929: LD_VAR 0 1
74933: PUSH
74934: LD_INT 258
74936: EQUAL
74937: IFFALSE 74961
// BurnTreeXYR ( unit , x , y , 8 ) ;
74939: LD_VAR 0 2
74943: PPUSH
74944: LD_VAR 0 4
74948: PPUSH
74949: LD_VAR 0 5
74953: PPUSH
74954: LD_INT 8
74956: PPUSH
74957: CALL 75360 0 4
// end ;
74961: LD_VAR 0 6
74965: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
74966: LD_INT 0
74968: PPUSH
74969: PPUSH
74970: PPUSH
74971: PPUSH
74972: PPUSH
74973: PPUSH
74974: PPUSH
74975: PPUSH
74976: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
74977: LD_VAR 0 1
74981: PPUSH
74982: CALL_OW 302
74986: NOT
74987: PUSH
74988: LD_VAR 0 2
74992: PPUSH
74993: LD_VAR 0 3
74997: PPUSH
74998: CALL_OW 488
75002: NOT
75003: OR
75004: PUSH
75005: LD_VAR 0 4
75009: NOT
75010: OR
75011: IFFALSE 75015
// exit ;
75013: GO 75355
// list := [ ] ;
75015: LD_ADDR_VAR 0 13
75019: PUSH
75020: EMPTY
75021: ST_TO_ADDR
// if x - r < 0 then
75022: LD_VAR 0 2
75026: PUSH
75027: LD_VAR 0 4
75031: MINUS
75032: PUSH
75033: LD_INT 0
75035: LESS
75036: IFFALSE 75048
// min_x := 0 else
75038: LD_ADDR_VAR 0 7
75042: PUSH
75043: LD_INT 0
75045: ST_TO_ADDR
75046: GO 75064
// min_x := x - r ;
75048: LD_ADDR_VAR 0 7
75052: PUSH
75053: LD_VAR 0 2
75057: PUSH
75058: LD_VAR 0 4
75062: MINUS
75063: ST_TO_ADDR
// if y - r < 0 then
75064: LD_VAR 0 3
75068: PUSH
75069: LD_VAR 0 4
75073: MINUS
75074: PUSH
75075: LD_INT 0
75077: LESS
75078: IFFALSE 75090
// min_y := 0 else
75080: LD_ADDR_VAR 0 8
75084: PUSH
75085: LD_INT 0
75087: ST_TO_ADDR
75088: GO 75106
// min_y := y - r ;
75090: LD_ADDR_VAR 0 8
75094: PUSH
75095: LD_VAR 0 3
75099: PUSH
75100: LD_VAR 0 4
75104: MINUS
75105: ST_TO_ADDR
// max_x := x + r ;
75106: LD_ADDR_VAR 0 9
75110: PUSH
75111: LD_VAR 0 2
75115: PUSH
75116: LD_VAR 0 4
75120: PLUS
75121: ST_TO_ADDR
// max_y := y + r ;
75122: LD_ADDR_VAR 0 10
75126: PUSH
75127: LD_VAR 0 3
75131: PUSH
75132: LD_VAR 0 4
75136: PLUS
75137: ST_TO_ADDR
// for _x = min_x to max_x do
75138: LD_ADDR_VAR 0 11
75142: PUSH
75143: DOUBLE
75144: LD_VAR 0 7
75148: DEC
75149: ST_TO_ADDR
75150: LD_VAR 0 9
75154: PUSH
75155: FOR_TO
75156: IFFALSE 75273
// for _y = min_y to max_y do
75158: LD_ADDR_VAR 0 12
75162: PUSH
75163: DOUBLE
75164: LD_VAR 0 8
75168: DEC
75169: ST_TO_ADDR
75170: LD_VAR 0 10
75174: PUSH
75175: FOR_TO
75176: IFFALSE 75269
// begin if not ValidHex ( _x , _y ) then
75178: LD_VAR 0 11
75182: PPUSH
75183: LD_VAR 0 12
75187: PPUSH
75188: CALL_OW 488
75192: NOT
75193: IFFALSE 75197
// continue ;
75195: GO 75175
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
75197: LD_VAR 0 11
75201: PPUSH
75202: LD_VAR 0 12
75206: PPUSH
75207: CALL_OW 351
75211: PUSH
75212: LD_VAR 0 11
75216: PPUSH
75217: LD_VAR 0 12
75221: PPUSH
75222: CALL_OW 554
75226: AND
75227: IFFALSE 75267
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
75229: LD_ADDR_VAR 0 13
75233: PUSH
75234: LD_VAR 0 13
75238: PPUSH
75239: LD_VAR 0 13
75243: PUSH
75244: LD_INT 1
75246: PLUS
75247: PPUSH
75248: LD_VAR 0 11
75252: PUSH
75253: LD_VAR 0 12
75257: PUSH
75258: EMPTY
75259: LIST
75260: LIST
75261: PPUSH
75262: CALL_OW 2
75266: ST_TO_ADDR
// end ;
75267: GO 75175
75269: POP
75270: POP
75271: GO 75155
75273: POP
75274: POP
// if not list then
75275: LD_VAR 0 13
75279: NOT
75280: IFFALSE 75284
// exit ;
75282: GO 75355
// for i in list do
75284: LD_ADDR_VAR 0 6
75288: PUSH
75289: LD_VAR 0 13
75293: PUSH
75294: FOR_IN
75295: IFFALSE 75353
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
75297: LD_VAR 0 1
75301: PPUSH
75302: LD_STRING M
75304: PUSH
75305: LD_VAR 0 6
75309: PUSH
75310: LD_INT 1
75312: ARRAY
75313: PUSH
75314: LD_VAR 0 6
75318: PUSH
75319: LD_INT 2
75321: ARRAY
75322: PUSH
75323: LD_INT 0
75325: PUSH
75326: LD_INT 0
75328: PUSH
75329: LD_INT 0
75331: PUSH
75332: LD_INT 0
75334: PUSH
75335: EMPTY
75336: LIST
75337: LIST
75338: LIST
75339: LIST
75340: LIST
75341: LIST
75342: LIST
75343: PUSH
75344: EMPTY
75345: LIST
75346: PPUSH
75347: CALL_OW 447
75351: GO 75294
75353: POP
75354: POP
// end ;
75355: LD_VAR 0 5
75359: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
75360: LD_INT 0
75362: PPUSH
75363: PPUSH
75364: PPUSH
75365: PPUSH
75366: PPUSH
75367: PPUSH
75368: PPUSH
75369: PPUSH
75370: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
75371: LD_VAR 0 1
75375: PPUSH
75376: CALL_OW 302
75380: NOT
75381: PUSH
75382: LD_VAR 0 2
75386: PPUSH
75387: LD_VAR 0 3
75391: PPUSH
75392: CALL_OW 488
75396: NOT
75397: OR
75398: PUSH
75399: LD_VAR 0 4
75403: NOT
75404: OR
75405: IFFALSE 75409
// exit ;
75407: GO 75757
// list := [ ] ;
75409: LD_ADDR_VAR 0 13
75413: PUSH
75414: EMPTY
75415: ST_TO_ADDR
// if x - r < 0 then
75416: LD_VAR 0 2
75420: PUSH
75421: LD_VAR 0 4
75425: MINUS
75426: PUSH
75427: LD_INT 0
75429: LESS
75430: IFFALSE 75442
// min_x := 0 else
75432: LD_ADDR_VAR 0 7
75436: PUSH
75437: LD_INT 0
75439: ST_TO_ADDR
75440: GO 75458
// min_x := x - r ;
75442: LD_ADDR_VAR 0 7
75446: PUSH
75447: LD_VAR 0 2
75451: PUSH
75452: LD_VAR 0 4
75456: MINUS
75457: ST_TO_ADDR
// if y - r < 0 then
75458: LD_VAR 0 3
75462: PUSH
75463: LD_VAR 0 4
75467: MINUS
75468: PUSH
75469: LD_INT 0
75471: LESS
75472: IFFALSE 75484
// min_y := 0 else
75474: LD_ADDR_VAR 0 8
75478: PUSH
75479: LD_INT 0
75481: ST_TO_ADDR
75482: GO 75500
// min_y := y - r ;
75484: LD_ADDR_VAR 0 8
75488: PUSH
75489: LD_VAR 0 3
75493: PUSH
75494: LD_VAR 0 4
75498: MINUS
75499: ST_TO_ADDR
// max_x := x + r ;
75500: LD_ADDR_VAR 0 9
75504: PUSH
75505: LD_VAR 0 2
75509: PUSH
75510: LD_VAR 0 4
75514: PLUS
75515: ST_TO_ADDR
// max_y := y + r ;
75516: LD_ADDR_VAR 0 10
75520: PUSH
75521: LD_VAR 0 3
75525: PUSH
75526: LD_VAR 0 4
75530: PLUS
75531: ST_TO_ADDR
// for _x = min_x to max_x do
75532: LD_ADDR_VAR 0 11
75536: PUSH
75537: DOUBLE
75538: LD_VAR 0 7
75542: DEC
75543: ST_TO_ADDR
75544: LD_VAR 0 9
75548: PUSH
75549: FOR_TO
75550: IFFALSE 75667
// for _y = min_y to max_y do
75552: LD_ADDR_VAR 0 12
75556: PUSH
75557: DOUBLE
75558: LD_VAR 0 8
75562: DEC
75563: ST_TO_ADDR
75564: LD_VAR 0 10
75568: PUSH
75569: FOR_TO
75570: IFFALSE 75663
// begin if not ValidHex ( _x , _y ) then
75572: LD_VAR 0 11
75576: PPUSH
75577: LD_VAR 0 12
75581: PPUSH
75582: CALL_OW 488
75586: NOT
75587: IFFALSE 75591
// continue ;
75589: GO 75569
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
75591: LD_VAR 0 11
75595: PPUSH
75596: LD_VAR 0 12
75600: PPUSH
75601: CALL_OW 351
75605: PUSH
75606: LD_VAR 0 11
75610: PPUSH
75611: LD_VAR 0 12
75615: PPUSH
75616: CALL_OW 554
75620: AND
75621: IFFALSE 75661
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
75623: LD_ADDR_VAR 0 13
75627: PUSH
75628: LD_VAR 0 13
75632: PPUSH
75633: LD_VAR 0 13
75637: PUSH
75638: LD_INT 1
75640: PLUS
75641: PPUSH
75642: LD_VAR 0 11
75646: PUSH
75647: LD_VAR 0 12
75651: PUSH
75652: EMPTY
75653: LIST
75654: LIST
75655: PPUSH
75656: CALL_OW 2
75660: ST_TO_ADDR
// end ;
75661: GO 75569
75663: POP
75664: POP
75665: GO 75549
75667: POP
75668: POP
// if not list then
75669: LD_VAR 0 13
75673: NOT
75674: IFFALSE 75678
// exit ;
75676: GO 75757
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
75678: LD_ADDR_VAR 0 13
75682: PUSH
75683: LD_VAR 0 1
75687: PPUSH
75688: LD_VAR 0 13
75692: PPUSH
75693: LD_INT 1
75695: PPUSH
75696: LD_INT 1
75698: PPUSH
75699: CALL 21707 0 4
75703: ST_TO_ADDR
// ComStop ( flame ) ;
75704: LD_VAR 0 1
75708: PPUSH
75709: CALL_OW 141
// for i in list do
75713: LD_ADDR_VAR 0 6
75717: PUSH
75718: LD_VAR 0 13
75722: PUSH
75723: FOR_IN
75724: IFFALSE 75755
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
75726: LD_VAR 0 1
75730: PPUSH
75731: LD_VAR 0 6
75735: PUSH
75736: LD_INT 1
75738: ARRAY
75739: PPUSH
75740: LD_VAR 0 6
75744: PUSH
75745: LD_INT 2
75747: ARRAY
75748: PPUSH
75749: CALL_OW 176
75753: GO 75723
75755: POP
75756: POP
// end ;
75757: LD_VAR 0 5
75761: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
75762: LD_EXP 103
75766: NOT
75767: IFFALSE 75817
75769: GO 75771
75771: DISABLE
// begin initHack := true ;
75772: LD_ADDR_EXP 103
75776: PUSH
75777: LD_INT 1
75779: ST_TO_ADDR
// hackTanks := [ ] ;
75780: LD_ADDR_EXP 104
75784: PUSH
75785: EMPTY
75786: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
75787: LD_ADDR_EXP 105
75791: PUSH
75792: EMPTY
75793: ST_TO_ADDR
// hackLimit := 3 ;
75794: LD_ADDR_EXP 106
75798: PUSH
75799: LD_INT 3
75801: ST_TO_ADDR
// hackDist := 12 ;
75802: LD_ADDR_EXP 107
75806: PUSH
75807: LD_INT 12
75809: ST_TO_ADDR
// hackCounter := [ ] ;
75810: LD_ADDR_EXP 108
75814: PUSH
75815: EMPTY
75816: ST_TO_ADDR
// end ;
75817: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
75818: LD_EXP 103
75822: PUSH
75823: LD_INT 34
75825: PUSH
75826: LD_INT 99
75828: PUSH
75829: EMPTY
75830: LIST
75831: LIST
75832: PPUSH
75833: CALL_OW 69
75837: AND
75838: IFFALSE 76091
75840: GO 75842
75842: DISABLE
75843: LD_INT 0
75845: PPUSH
75846: PPUSH
// begin enable ;
75847: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
75848: LD_ADDR_VAR 0 1
75852: PUSH
75853: LD_INT 34
75855: PUSH
75856: LD_INT 99
75858: PUSH
75859: EMPTY
75860: LIST
75861: LIST
75862: PPUSH
75863: CALL_OW 69
75867: PUSH
75868: FOR_IN
75869: IFFALSE 76089
// begin if not i in hackTanks then
75871: LD_VAR 0 1
75875: PUSH
75876: LD_EXP 104
75880: IN
75881: NOT
75882: IFFALSE 75965
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
75884: LD_ADDR_EXP 104
75888: PUSH
75889: LD_EXP 104
75893: PPUSH
75894: LD_EXP 104
75898: PUSH
75899: LD_INT 1
75901: PLUS
75902: PPUSH
75903: LD_VAR 0 1
75907: PPUSH
75908: CALL_OW 1
75912: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
75913: LD_ADDR_EXP 105
75917: PUSH
75918: LD_EXP 105
75922: PPUSH
75923: LD_EXP 105
75927: PUSH
75928: LD_INT 1
75930: PLUS
75931: PPUSH
75932: EMPTY
75933: PPUSH
75934: CALL_OW 1
75938: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
75939: LD_ADDR_EXP 108
75943: PUSH
75944: LD_EXP 108
75948: PPUSH
75949: LD_EXP 108
75953: PUSH
75954: LD_INT 1
75956: PLUS
75957: PPUSH
75958: EMPTY
75959: PPUSH
75960: CALL_OW 1
75964: ST_TO_ADDR
// end ; if not IsOk ( i ) then
75965: LD_VAR 0 1
75969: PPUSH
75970: CALL_OW 302
75974: NOT
75975: IFFALSE 75988
// begin HackUnlinkAll ( i ) ;
75977: LD_VAR 0 1
75981: PPUSH
75982: CALL 76094 0 1
// continue ;
75986: GO 75868
// end ; HackCheckCapturedStatus ( i ) ;
75988: LD_VAR 0 1
75992: PPUSH
75993: CALL 76537 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
75997: LD_ADDR_VAR 0 2
76001: PUSH
76002: LD_INT 81
76004: PUSH
76005: LD_VAR 0 1
76009: PPUSH
76010: CALL_OW 255
76014: PUSH
76015: EMPTY
76016: LIST
76017: LIST
76018: PUSH
76019: LD_INT 33
76021: PUSH
76022: LD_INT 3
76024: PUSH
76025: EMPTY
76026: LIST
76027: LIST
76028: PUSH
76029: LD_INT 91
76031: PUSH
76032: LD_VAR 0 1
76036: PUSH
76037: LD_EXP 107
76041: PUSH
76042: EMPTY
76043: LIST
76044: LIST
76045: LIST
76046: PUSH
76047: LD_INT 50
76049: PUSH
76050: EMPTY
76051: LIST
76052: PUSH
76053: EMPTY
76054: LIST
76055: LIST
76056: LIST
76057: LIST
76058: PPUSH
76059: CALL_OW 69
76063: ST_TO_ADDR
// if not tmp then
76064: LD_VAR 0 2
76068: NOT
76069: IFFALSE 76073
// continue ;
76071: GO 75868
// HackLink ( i , tmp ) ;
76073: LD_VAR 0 1
76077: PPUSH
76078: LD_VAR 0 2
76082: PPUSH
76083: CALL 76230 0 2
// end ;
76087: GO 75868
76089: POP
76090: POP
// end ;
76091: PPOPN 2
76093: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
76094: LD_INT 0
76096: PPUSH
76097: PPUSH
76098: PPUSH
// if not hack in hackTanks then
76099: LD_VAR 0 1
76103: PUSH
76104: LD_EXP 104
76108: IN
76109: NOT
76110: IFFALSE 76114
// exit ;
76112: GO 76225
// index := GetElementIndex ( hackTanks , hack ) ;
76114: LD_ADDR_VAR 0 4
76118: PUSH
76119: LD_EXP 104
76123: PPUSH
76124: LD_VAR 0 1
76128: PPUSH
76129: CALL 21004 0 2
76133: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
76134: LD_EXP 105
76138: PUSH
76139: LD_VAR 0 4
76143: ARRAY
76144: IFFALSE 76225
// begin for i in hackTanksCaptured [ index ] do
76146: LD_ADDR_VAR 0 3
76150: PUSH
76151: LD_EXP 105
76155: PUSH
76156: LD_VAR 0 4
76160: ARRAY
76161: PUSH
76162: FOR_IN
76163: IFFALSE 76189
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
76165: LD_VAR 0 3
76169: PUSH
76170: LD_INT 1
76172: ARRAY
76173: PPUSH
76174: LD_VAR 0 3
76178: PUSH
76179: LD_INT 2
76181: ARRAY
76182: PPUSH
76183: CALL_OW 235
76187: GO 76162
76189: POP
76190: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
76191: LD_ADDR_EXP 105
76195: PUSH
76196: LD_EXP 105
76200: PPUSH
76201: LD_VAR 0 4
76205: PPUSH
76206: EMPTY
76207: PPUSH
76208: CALL_OW 1
76212: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
76213: LD_VAR 0 1
76217: PPUSH
76218: LD_INT 0
76220: PPUSH
76221: CALL_OW 505
// end ; end ;
76225: LD_VAR 0 2
76229: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
76230: LD_INT 0
76232: PPUSH
76233: PPUSH
76234: PPUSH
// if not hack in hackTanks or not vehicles then
76235: LD_VAR 0 1
76239: PUSH
76240: LD_EXP 104
76244: IN
76245: NOT
76246: PUSH
76247: LD_VAR 0 2
76251: NOT
76252: OR
76253: IFFALSE 76257
// exit ;
76255: GO 76532
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
76257: LD_ADDR_VAR 0 2
76261: PUSH
76262: LD_VAR 0 1
76266: PPUSH
76267: LD_VAR 0 2
76271: PPUSH
76272: LD_INT 1
76274: PPUSH
76275: LD_INT 1
76277: PPUSH
76278: CALL 21654 0 4
76282: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
76283: LD_ADDR_VAR 0 5
76287: PUSH
76288: LD_EXP 104
76292: PPUSH
76293: LD_VAR 0 1
76297: PPUSH
76298: CALL 21004 0 2
76302: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
76303: LD_EXP 105
76307: PUSH
76308: LD_VAR 0 5
76312: ARRAY
76313: PUSH
76314: LD_EXP 106
76318: LESS
76319: IFFALSE 76508
// begin for i := 1 to vehicles do
76321: LD_ADDR_VAR 0 4
76325: PUSH
76326: DOUBLE
76327: LD_INT 1
76329: DEC
76330: ST_TO_ADDR
76331: LD_VAR 0 2
76335: PUSH
76336: FOR_TO
76337: IFFALSE 76506
// begin if hackTanksCaptured [ index ] = hackLimit then
76339: LD_EXP 105
76343: PUSH
76344: LD_VAR 0 5
76348: ARRAY
76349: PUSH
76350: LD_EXP 106
76354: EQUAL
76355: IFFALSE 76359
// break ;
76357: GO 76506
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
76359: LD_ADDR_EXP 108
76363: PUSH
76364: LD_EXP 108
76368: PPUSH
76369: LD_VAR 0 5
76373: PPUSH
76374: LD_EXP 108
76378: PUSH
76379: LD_VAR 0 5
76383: ARRAY
76384: PUSH
76385: LD_INT 1
76387: PLUS
76388: PPUSH
76389: CALL_OW 1
76393: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
76394: LD_ADDR_EXP 105
76398: PUSH
76399: LD_EXP 105
76403: PPUSH
76404: LD_VAR 0 5
76408: PUSH
76409: LD_EXP 105
76413: PUSH
76414: LD_VAR 0 5
76418: ARRAY
76419: PUSH
76420: LD_INT 1
76422: PLUS
76423: PUSH
76424: EMPTY
76425: LIST
76426: LIST
76427: PPUSH
76428: LD_VAR 0 2
76432: PUSH
76433: LD_VAR 0 4
76437: ARRAY
76438: PUSH
76439: LD_VAR 0 2
76443: PUSH
76444: LD_VAR 0 4
76448: ARRAY
76449: PPUSH
76450: CALL_OW 255
76454: PUSH
76455: EMPTY
76456: LIST
76457: LIST
76458: PPUSH
76459: CALL 21219 0 3
76463: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
76464: LD_VAR 0 2
76468: PUSH
76469: LD_VAR 0 4
76473: ARRAY
76474: PPUSH
76475: LD_VAR 0 1
76479: PPUSH
76480: CALL_OW 255
76484: PPUSH
76485: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
76489: LD_VAR 0 2
76493: PUSH
76494: LD_VAR 0 4
76498: ARRAY
76499: PPUSH
76500: CALL_OW 141
// end ;
76504: GO 76336
76506: POP
76507: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
76508: LD_VAR 0 1
76512: PPUSH
76513: LD_EXP 105
76517: PUSH
76518: LD_VAR 0 5
76522: ARRAY
76523: PUSH
76524: LD_INT 0
76526: PLUS
76527: PPUSH
76528: CALL_OW 505
// end ;
76532: LD_VAR 0 3
76536: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
76537: LD_INT 0
76539: PPUSH
76540: PPUSH
76541: PPUSH
76542: PPUSH
// if not hack in hackTanks then
76543: LD_VAR 0 1
76547: PUSH
76548: LD_EXP 104
76552: IN
76553: NOT
76554: IFFALSE 76558
// exit ;
76556: GO 76798
// index := GetElementIndex ( hackTanks , hack ) ;
76558: LD_ADDR_VAR 0 4
76562: PUSH
76563: LD_EXP 104
76567: PPUSH
76568: LD_VAR 0 1
76572: PPUSH
76573: CALL 21004 0 2
76577: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
76578: LD_ADDR_VAR 0 3
76582: PUSH
76583: DOUBLE
76584: LD_EXP 105
76588: PUSH
76589: LD_VAR 0 4
76593: ARRAY
76594: INC
76595: ST_TO_ADDR
76596: LD_INT 1
76598: PUSH
76599: FOR_DOWNTO
76600: IFFALSE 76772
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
76602: LD_ADDR_VAR 0 5
76606: PUSH
76607: LD_EXP 105
76611: PUSH
76612: LD_VAR 0 4
76616: ARRAY
76617: PUSH
76618: LD_VAR 0 3
76622: ARRAY
76623: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
76624: LD_VAR 0 5
76628: PUSH
76629: LD_INT 1
76631: ARRAY
76632: PPUSH
76633: CALL_OW 302
76637: NOT
76638: PUSH
76639: LD_VAR 0 5
76643: PUSH
76644: LD_INT 1
76646: ARRAY
76647: PPUSH
76648: CALL_OW 255
76652: PUSH
76653: LD_VAR 0 1
76657: PPUSH
76658: CALL_OW 255
76662: NONEQUAL
76663: OR
76664: IFFALSE 76770
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
76666: LD_VAR 0 5
76670: PUSH
76671: LD_INT 1
76673: ARRAY
76674: PPUSH
76675: CALL_OW 305
76679: PUSH
76680: LD_VAR 0 5
76684: PUSH
76685: LD_INT 1
76687: ARRAY
76688: PPUSH
76689: CALL_OW 255
76693: PUSH
76694: LD_VAR 0 1
76698: PPUSH
76699: CALL_OW 255
76703: EQUAL
76704: AND
76705: IFFALSE 76729
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
76707: LD_VAR 0 5
76711: PUSH
76712: LD_INT 1
76714: ARRAY
76715: PPUSH
76716: LD_VAR 0 5
76720: PUSH
76721: LD_INT 2
76723: ARRAY
76724: PPUSH
76725: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
76729: LD_ADDR_EXP 105
76733: PUSH
76734: LD_EXP 105
76738: PPUSH
76739: LD_VAR 0 4
76743: PPUSH
76744: LD_EXP 105
76748: PUSH
76749: LD_VAR 0 4
76753: ARRAY
76754: PPUSH
76755: LD_VAR 0 3
76759: PPUSH
76760: CALL_OW 3
76764: PPUSH
76765: CALL_OW 1
76769: ST_TO_ADDR
// end ; end ;
76770: GO 76599
76772: POP
76773: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
76774: LD_VAR 0 1
76778: PPUSH
76779: LD_EXP 105
76783: PUSH
76784: LD_VAR 0 4
76788: ARRAY
76789: PUSH
76790: LD_INT 0
76792: PLUS
76793: PPUSH
76794: CALL_OW 505
// end ;
76798: LD_VAR 0 2
76802: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
76803: LD_INT 0
76805: PPUSH
76806: PPUSH
76807: PPUSH
76808: PPUSH
// if not hack in hackTanks then
76809: LD_VAR 0 1
76813: PUSH
76814: LD_EXP 104
76818: IN
76819: NOT
76820: IFFALSE 76824
// exit ;
76822: GO 76909
// index := GetElementIndex ( hackTanks , hack ) ;
76824: LD_ADDR_VAR 0 5
76828: PUSH
76829: LD_EXP 104
76833: PPUSH
76834: LD_VAR 0 1
76838: PPUSH
76839: CALL 21004 0 2
76843: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
76844: LD_ADDR_VAR 0 4
76848: PUSH
76849: DOUBLE
76850: LD_INT 1
76852: DEC
76853: ST_TO_ADDR
76854: LD_EXP 105
76858: PUSH
76859: LD_VAR 0 5
76863: ARRAY
76864: PUSH
76865: FOR_TO
76866: IFFALSE 76907
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
76868: LD_EXP 105
76872: PUSH
76873: LD_VAR 0 5
76877: ARRAY
76878: PUSH
76879: LD_VAR 0 4
76883: ARRAY
76884: PUSH
76885: LD_INT 1
76887: ARRAY
76888: PUSH
76889: LD_VAR 0 2
76893: EQUAL
76894: IFFALSE 76905
// KillUnit ( vehicle ) ;
76896: LD_VAR 0 2
76900: PPUSH
76901: CALL_OW 66
76905: GO 76865
76907: POP
76908: POP
// end ;
76909: LD_VAR 0 3
76913: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
76914: LD_EXP 109
76918: NOT
76919: IFFALSE 76954
76921: GO 76923
76923: DISABLE
// begin initMiner := true ;
76924: LD_ADDR_EXP 109
76928: PUSH
76929: LD_INT 1
76931: ST_TO_ADDR
// minersList := [ ] ;
76932: LD_ADDR_EXP 110
76936: PUSH
76937: EMPTY
76938: ST_TO_ADDR
// minerMinesList := [ ] ;
76939: LD_ADDR_EXP 111
76943: PUSH
76944: EMPTY
76945: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
76946: LD_ADDR_EXP 112
76950: PUSH
76951: LD_INT 5
76953: ST_TO_ADDR
// end ;
76954: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
76955: LD_EXP 109
76959: PUSH
76960: LD_INT 34
76962: PUSH
76963: LD_INT 81
76965: PUSH
76966: EMPTY
76967: LIST
76968: LIST
76969: PPUSH
76970: CALL_OW 69
76974: AND
76975: IFFALSE 77436
76977: GO 76979
76979: DISABLE
76980: LD_INT 0
76982: PPUSH
76983: PPUSH
76984: PPUSH
76985: PPUSH
// begin enable ;
76986: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
76987: LD_ADDR_VAR 0 1
76991: PUSH
76992: LD_INT 34
76994: PUSH
76995: LD_INT 81
76997: PUSH
76998: EMPTY
76999: LIST
77000: LIST
77001: PPUSH
77002: CALL_OW 69
77006: PUSH
77007: FOR_IN
77008: IFFALSE 77080
// begin if not i in minersList then
77010: LD_VAR 0 1
77014: PUSH
77015: LD_EXP 110
77019: IN
77020: NOT
77021: IFFALSE 77078
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
77023: LD_ADDR_EXP 110
77027: PUSH
77028: LD_EXP 110
77032: PPUSH
77033: LD_EXP 110
77037: PUSH
77038: LD_INT 1
77040: PLUS
77041: PPUSH
77042: LD_VAR 0 1
77046: PPUSH
77047: CALL_OW 1
77051: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
77052: LD_ADDR_EXP 111
77056: PUSH
77057: LD_EXP 111
77061: PPUSH
77062: LD_EXP 111
77066: PUSH
77067: LD_INT 1
77069: PLUS
77070: PPUSH
77071: EMPTY
77072: PPUSH
77073: CALL_OW 1
77077: ST_TO_ADDR
// end end ;
77078: GO 77007
77080: POP
77081: POP
// for i := minerMinesList downto 1 do
77082: LD_ADDR_VAR 0 1
77086: PUSH
77087: DOUBLE
77088: LD_EXP 111
77092: INC
77093: ST_TO_ADDR
77094: LD_INT 1
77096: PUSH
77097: FOR_DOWNTO
77098: IFFALSE 77434
// begin if IsLive ( minersList [ i ] ) then
77100: LD_EXP 110
77104: PUSH
77105: LD_VAR 0 1
77109: ARRAY
77110: PPUSH
77111: CALL_OW 300
77115: IFFALSE 77143
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
77117: LD_EXP 110
77121: PUSH
77122: LD_VAR 0 1
77126: ARRAY
77127: PPUSH
77128: LD_EXP 111
77132: PUSH
77133: LD_VAR 0 1
77137: ARRAY
77138: PPUSH
77139: CALL_OW 505
// if not minerMinesList [ i ] then
77143: LD_EXP 111
77147: PUSH
77148: LD_VAR 0 1
77152: ARRAY
77153: NOT
77154: IFFALSE 77158
// continue ;
77156: GO 77097
// for j := minerMinesList [ i ] downto 1 do
77158: LD_ADDR_VAR 0 2
77162: PUSH
77163: DOUBLE
77164: LD_EXP 111
77168: PUSH
77169: LD_VAR 0 1
77173: ARRAY
77174: INC
77175: ST_TO_ADDR
77176: LD_INT 1
77178: PUSH
77179: FOR_DOWNTO
77180: IFFALSE 77430
// begin side := GetSide ( minersList [ i ] ) ;
77182: LD_ADDR_VAR 0 3
77186: PUSH
77187: LD_EXP 110
77191: PUSH
77192: LD_VAR 0 1
77196: ARRAY
77197: PPUSH
77198: CALL_OW 255
77202: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
77203: LD_ADDR_VAR 0 4
77207: PUSH
77208: LD_EXP 111
77212: PUSH
77213: LD_VAR 0 1
77217: ARRAY
77218: PUSH
77219: LD_VAR 0 2
77223: ARRAY
77224: PUSH
77225: LD_INT 1
77227: ARRAY
77228: PPUSH
77229: LD_EXP 111
77233: PUSH
77234: LD_VAR 0 1
77238: ARRAY
77239: PUSH
77240: LD_VAR 0 2
77244: ARRAY
77245: PUSH
77246: LD_INT 2
77248: ARRAY
77249: PPUSH
77250: CALL_OW 428
77254: ST_TO_ADDR
// if not tmp then
77255: LD_VAR 0 4
77259: NOT
77260: IFFALSE 77264
// continue ;
77262: GO 77179
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
77264: LD_VAR 0 4
77268: PUSH
77269: LD_INT 81
77271: PUSH
77272: LD_VAR 0 3
77276: PUSH
77277: EMPTY
77278: LIST
77279: LIST
77280: PPUSH
77281: CALL_OW 69
77285: IN
77286: PUSH
77287: LD_EXP 111
77291: PUSH
77292: LD_VAR 0 1
77296: ARRAY
77297: PUSH
77298: LD_VAR 0 2
77302: ARRAY
77303: PUSH
77304: LD_INT 1
77306: ARRAY
77307: PPUSH
77308: LD_EXP 111
77312: PUSH
77313: LD_VAR 0 1
77317: ARRAY
77318: PUSH
77319: LD_VAR 0 2
77323: ARRAY
77324: PUSH
77325: LD_INT 2
77327: ARRAY
77328: PPUSH
77329: CALL_OW 458
77333: AND
77334: IFFALSE 77428
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
77336: LD_EXP 111
77340: PUSH
77341: LD_VAR 0 1
77345: ARRAY
77346: PUSH
77347: LD_VAR 0 2
77351: ARRAY
77352: PUSH
77353: LD_INT 1
77355: ARRAY
77356: PPUSH
77357: LD_EXP 111
77361: PUSH
77362: LD_VAR 0 1
77366: ARRAY
77367: PUSH
77368: LD_VAR 0 2
77372: ARRAY
77373: PUSH
77374: LD_INT 2
77376: ARRAY
77377: PPUSH
77378: LD_VAR 0 3
77382: PPUSH
77383: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
77387: LD_ADDR_EXP 111
77391: PUSH
77392: LD_EXP 111
77396: PPUSH
77397: LD_VAR 0 1
77401: PPUSH
77402: LD_EXP 111
77406: PUSH
77407: LD_VAR 0 1
77411: ARRAY
77412: PPUSH
77413: LD_VAR 0 2
77417: PPUSH
77418: CALL_OW 3
77422: PPUSH
77423: CALL_OW 1
77427: ST_TO_ADDR
// end ; end ;
77428: GO 77179
77430: POP
77431: POP
// end ;
77432: GO 77097
77434: POP
77435: POP
// end ;
77436: PPOPN 4
77438: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
77439: LD_INT 0
77441: PPUSH
77442: PPUSH
// result := false ;
77443: LD_ADDR_VAR 0 4
77447: PUSH
77448: LD_INT 0
77450: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
77451: LD_VAR 0 1
77455: PPUSH
77456: CALL_OW 264
77460: PUSH
77461: LD_INT 81
77463: EQUAL
77464: NOT
77465: IFFALSE 77469
// exit ;
77467: GO 77709
// index := GetElementIndex ( minersList , unit ) ;
77469: LD_ADDR_VAR 0 5
77473: PUSH
77474: LD_EXP 110
77478: PPUSH
77479: LD_VAR 0 1
77483: PPUSH
77484: CALL 21004 0 2
77488: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
77489: LD_EXP 111
77493: PUSH
77494: LD_VAR 0 5
77498: ARRAY
77499: PUSH
77500: LD_EXP 112
77504: GREATEREQUAL
77505: IFFALSE 77509
// exit ;
77507: GO 77709
// ComMoveXY ( unit , x , y ) ;
77509: LD_VAR 0 1
77513: PPUSH
77514: LD_VAR 0 2
77518: PPUSH
77519: LD_VAR 0 3
77523: PPUSH
77524: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
77528: LD_INT 35
77530: PPUSH
77531: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
77535: LD_VAR 0 1
77539: PPUSH
77540: LD_VAR 0 2
77544: PPUSH
77545: LD_VAR 0 3
77549: PPUSH
77550: CALL 52756 0 3
77554: NOT
77555: PUSH
77556: LD_VAR 0 1
77560: PPUSH
77561: CALL_OW 314
77565: AND
77566: IFFALSE 77570
// exit ;
77568: GO 77709
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
77570: LD_VAR 0 2
77574: PPUSH
77575: LD_VAR 0 3
77579: PPUSH
77580: CALL_OW 428
77584: PUSH
77585: LD_VAR 0 1
77589: EQUAL
77590: PUSH
77591: LD_VAR 0 1
77595: PPUSH
77596: CALL_OW 314
77600: NOT
77601: AND
77602: IFFALSE 77528
// PlaySoundXY ( x , y , PlantMine ) ;
77604: LD_VAR 0 2
77608: PPUSH
77609: LD_VAR 0 3
77613: PPUSH
77614: LD_STRING PlantMine
77616: PPUSH
77617: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
77621: LD_VAR 0 2
77625: PPUSH
77626: LD_VAR 0 3
77630: PPUSH
77631: LD_VAR 0 1
77635: PPUSH
77636: CALL_OW 255
77640: PPUSH
77641: LD_INT 0
77643: PPUSH
77644: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
77648: LD_ADDR_EXP 111
77652: PUSH
77653: LD_EXP 111
77657: PPUSH
77658: LD_VAR 0 5
77662: PUSH
77663: LD_EXP 111
77667: PUSH
77668: LD_VAR 0 5
77672: ARRAY
77673: PUSH
77674: LD_INT 1
77676: PLUS
77677: PUSH
77678: EMPTY
77679: LIST
77680: LIST
77681: PPUSH
77682: LD_VAR 0 2
77686: PUSH
77687: LD_VAR 0 3
77691: PUSH
77692: EMPTY
77693: LIST
77694: LIST
77695: PPUSH
77696: CALL 21219 0 3
77700: ST_TO_ADDR
// result := true ;
77701: LD_ADDR_VAR 0 4
77705: PUSH
77706: LD_INT 1
77708: ST_TO_ADDR
// end ;
77709: LD_VAR 0 4
77713: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
77714: LD_INT 0
77716: PPUSH
77717: PPUSH
77718: PPUSH
// if not unit in minersList then
77719: LD_VAR 0 1
77723: PUSH
77724: LD_EXP 110
77728: IN
77729: NOT
77730: IFFALSE 77734
// exit ;
77732: GO 78126
// index := GetElementIndex ( minersList , unit ) ;
77734: LD_ADDR_VAR 0 6
77738: PUSH
77739: LD_EXP 110
77743: PPUSH
77744: LD_VAR 0 1
77748: PPUSH
77749: CALL 21004 0 2
77753: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
77754: LD_ADDR_VAR 0 5
77758: PUSH
77759: DOUBLE
77760: LD_EXP 111
77764: PUSH
77765: LD_VAR 0 6
77769: ARRAY
77770: INC
77771: ST_TO_ADDR
77772: LD_INT 1
77774: PUSH
77775: FOR_DOWNTO
77776: IFFALSE 77937
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
77778: LD_EXP 111
77782: PUSH
77783: LD_VAR 0 6
77787: ARRAY
77788: PUSH
77789: LD_VAR 0 5
77793: ARRAY
77794: PUSH
77795: LD_INT 1
77797: ARRAY
77798: PUSH
77799: LD_VAR 0 2
77803: EQUAL
77804: PUSH
77805: LD_EXP 111
77809: PUSH
77810: LD_VAR 0 6
77814: ARRAY
77815: PUSH
77816: LD_VAR 0 5
77820: ARRAY
77821: PUSH
77822: LD_INT 2
77824: ARRAY
77825: PUSH
77826: LD_VAR 0 3
77830: EQUAL
77831: AND
77832: IFFALSE 77935
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
77834: LD_EXP 111
77838: PUSH
77839: LD_VAR 0 6
77843: ARRAY
77844: PUSH
77845: LD_VAR 0 5
77849: ARRAY
77850: PUSH
77851: LD_INT 1
77853: ARRAY
77854: PPUSH
77855: LD_EXP 111
77859: PUSH
77860: LD_VAR 0 6
77864: ARRAY
77865: PUSH
77866: LD_VAR 0 5
77870: ARRAY
77871: PUSH
77872: LD_INT 2
77874: ARRAY
77875: PPUSH
77876: LD_VAR 0 1
77880: PPUSH
77881: CALL_OW 255
77885: PPUSH
77886: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
77890: LD_ADDR_EXP 111
77894: PUSH
77895: LD_EXP 111
77899: PPUSH
77900: LD_VAR 0 6
77904: PPUSH
77905: LD_EXP 111
77909: PUSH
77910: LD_VAR 0 6
77914: ARRAY
77915: PPUSH
77916: LD_VAR 0 5
77920: PPUSH
77921: CALL_OW 3
77925: PPUSH
77926: CALL_OW 1
77930: ST_TO_ADDR
// exit ;
77931: POP
77932: POP
77933: GO 78126
// end ; end ;
77935: GO 77775
77937: POP
77938: POP
// for i := minerMinesList [ index ] downto 1 do
77939: LD_ADDR_VAR 0 5
77943: PUSH
77944: DOUBLE
77945: LD_EXP 111
77949: PUSH
77950: LD_VAR 0 6
77954: ARRAY
77955: INC
77956: ST_TO_ADDR
77957: LD_INT 1
77959: PUSH
77960: FOR_DOWNTO
77961: IFFALSE 78124
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
77963: LD_EXP 111
77967: PUSH
77968: LD_VAR 0 6
77972: ARRAY
77973: PUSH
77974: LD_VAR 0 5
77978: ARRAY
77979: PUSH
77980: LD_INT 1
77982: ARRAY
77983: PPUSH
77984: LD_EXP 111
77988: PUSH
77989: LD_VAR 0 6
77993: ARRAY
77994: PUSH
77995: LD_VAR 0 5
77999: ARRAY
78000: PUSH
78001: LD_INT 2
78003: ARRAY
78004: PPUSH
78005: LD_VAR 0 2
78009: PPUSH
78010: LD_VAR 0 3
78014: PPUSH
78015: CALL_OW 298
78019: PUSH
78020: LD_INT 6
78022: LESS
78023: IFFALSE 78122
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
78025: LD_EXP 111
78029: PUSH
78030: LD_VAR 0 6
78034: ARRAY
78035: PUSH
78036: LD_VAR 0 5
78040: ARRAY
78041: PUSH
78042: LD_INT 1
78044: ARRAY
78045: PPUSH
78046: LD_EXP 111
78050: PUSH
78051: LD_VAR 0 6
78055: ARRAY
78056: PUSH
78057: LD_VAR 0 5
78061: ARRAY
78062: PUSH
78063: LD_INT 2
78065: ARRAY
78066: PPUSH
78067: LD_VAR 0 1
78071: PPUSH
78072: CALL_OW 255
78076: PPUSH
78077: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
78081: LD_ADDR_EXP 111
78085: PUSH
78086: LD_EXP 111
78090: PPUSH
78091: LD_VAR 0 6
78095: PPUSH
78096: LD_EXP 111
78100: PUSH
78101: LD_VAR 0 6
78105: ARRAY
78106: PPUSH
78107: LD_VAR 0 5
78111: PPUSH
78112: CALL_OW 3
78116: PPUSH
78117: CALL_OW 1
78121: ST_TO_ADDR
// end ; end ;
78122: GO 77960
78124: POP
78125: POP
// end ;
78126: LD_VAR 0 4
78130: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
78131: LD_INT 0
78133: PPUSH
78134: PPUSH
78135: PPUSH
78136: PPUSH
78137: PPUSH
78138: PPUSH
78139: PPUSH
78140: PPUSH
78141: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
78142: LD_VAR 0 1
78146: PPUSH
78147: CALL_OW 264
78151: PUSH
78152: LD_INT 81
78154: EQUAL
78155: NOT
78156: PUSH
78157: LD_VAR 0 1
78161: PUSH
78162: LD_EXP 110
78166: IN
78167: NOT
78168: OR
78169: IFFALSE 78173
// exit ;
78171: GO 78495
// index := GetElementIndex ( minersList , unit ) ;
78173: LD_ADDR_VAR 0 6
78177: PUSH
78178: LD_EXP 110
78182: PPUSH
78183: LD_VAR 0 1
78187: PPUSH
78188: CALL 21004 0 2
78192: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
78193: LD_ADDR_VAR 0 8
78197: PUSH
78198: LD_EXP 112
78202: PUSH
78203: LD_EXP 111
78207: PUSH
78208: LD_VAR 0 6
78212: ARRAY
78213: MINUS
78214: ST_TO_ADDR
// if not minesFreeAmount then
78215: LD_VAR 0 8
78219: NOT
78220: IFFALSE 78224
// exit ;
78222: GO 78495
// tmp := [ ] ;
78224: LD_ADDR_VAR 0 7
78228: PUSH
78229: EMPTY
78230: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
78231: LD_ADDR_VAR 0 5
78235: PUSH
78236: DOUBLE
78237: LD_INT 1
78239: DEC
78240: ST_TO_ADDR
78241: LD_VAR 0 8
78245: PUSH
78246: FOR_TO
78247: IFFALSE 78442
// begin _d := rand ( 0 , 5 ) ;
78249: LD_ADDR_VAR 0 11
78253: PUSH
78254: LD_INT 0
78256: PPUSH
78257: LD_INT 5
78259: PPUSH
78260: CALL_OW 12
78264: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
78265: LD_ADDR_VAR 0 12
78269: PUSH
78270: LD_INT 2
78272: PPUSH
78273: LD_INT 6
78275: PPUSH
78276: CALL_OW 12
78280: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
78281: LD_ADDR_VAR 0 9
78285: PUSH
78286: LD_VAR 0 2
78290: PPUSH
78291: LD_VAR 0 11
78295: PPUSH
78296: LD_VAR 0 12
78300: PPUSH
78301: CALL_OW 272
78305: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
78306: LD_ADDR_VAR 0 10
78310: PUSH
78311: LD_VAR 0 3
78315: PPUSH
78316: LD_VAR 0 11
78320: PPUSH
78321: LD_VAR 0 12
78325: PPUSH
78326: CALL_OW 273
78330: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
78331: LD_VAR 0 9
78335: PPUSH
78336: LD_VAR 0 10
78340: PPUSH
78341: CALL_OW 488
78345: PUSH
78346: LD_VAR 0 9
78350: PUSH
78351: LD_VAR 0 10
78355: PUSH
78356: EMPTY
78357: LIST
78358: LIST
78359: PUSH
78360: LD_VAR 0 7
78364: IN
78365: NOT
78366: AND
78367: PUSH
78368: LD_VAR 0 9
78372: PPUSH
78373: LD_VAR 0 10
78377: PPUSH
78378: CALL_OW 458
78382: NOT
78383: AND
78384: IFFALSE 78426
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
78386: LD_ADDR_VAR 0 7
78390: PUSH
78391: LD_VAR 0 7
78395: PPUSH
78396: LD_VAR 0 7
78400: PUSH
78401: LD_INT 1
78403: PLUS
78404: PPUSH
78405: LD_VAR 0 9
78409: PUSH
78410: LD_VAR 0 10
78414: PUSH
78415: EMPTY
78416: LIST
78417: LIST
78418: PPUSH
78419: CALL_OW 1
78423: ST_TO_ADDR
78424: GO 78440
// i := i - 1 ;
78426: LD_ADDR_VAR 0 5
78430: PUSH
78431: LD_VAR 0 5
78435: PUSH
78436: LD_INT 1
78438: MINUS
78439: ST_TO_ADDR
// end ;
78440: GO 78246
78442: POP
78443: POP
// for i in tmp do
78444: LD_ADDR_VAR 0 5
78448: PUSH
78449: LD_VAR 0 7
78453: PUSH
78454: FOR_IN
78455: IFFALSE 78493
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
78457: LD_VAR 0 1
78461: PPUSH
78462: LD_VAR 0 5
78466: PUSH
78467: LD_INT 1
78469: ARRAY
78470: PPUSH
78471: LD_VAR 0 5
78475: PUSH
78476: LD_INT 2
78478: ARRAY
78479: PPUSH
78480: CALL 77439 0 3
78484: NOT
78485: IFFALSE 78491
// exit ;
78487: POP
78488: POP
78489: GO 78495
78491: GO 78454
78493: POP
78494: POP
// end ;
78495: LD_VAR 0 4
78499: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
78500: LD_INT 0
78502: PPUSH
78503: PPUSH
78504: PPUSH
78505: PPUSH
78506: PPUSH
78507: PPUSH
78508: PPUSH
// if not GetClass ( unit ) = class_sniper then
78509: LD_VAR 0 1
78513: PPUSH
78514: CALL_OW 257
78518: PUSH
78519: LD_INT 5
78521: EQUAL
78522: NOT
78523: IFFALSE 78527
// exit ;
78525: GO 78915
// dist := 8 ;
78527: LD_ADDR_VAR 0 5
78531: PUSH
78532: LD_INT 8
78534: ST_TO_ADDR
// viewRange := 12 ;
78535: LD_ADDR_VAR 0 7
78539: PUSH
78540: LD_INT 12
78542: ST_TO_ADDR
// side := GetSide ( unit ) ;
78543: LD_ADDR_VAR 0 6
78547: PUSH
78548: LD_VAR 0 1
78552: PPUSH
78553: CALL_OW 255
78557: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
78558: LD_INT 61
78560: PPUSH
78561: LD_VAR 0 6
78565: PPUSH
78566: CALL_OW 321
78570: PUSH
78571: LD_INT 2
78573: EQUAL
78574: IFFALSE 78584
// viewRange := 16 ;
78576: LD_ADDR_VAR 0 7
78580: PUSH
78581: LD_INT 16
78583: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
78584: LD_VAR 0 1
78588: PPUSH
78589: LD_VAR 0 2
78593: PPUSH
78594: LD_VAR 0 3
78598: PPUSH
78599: CALL_OW 297
78603: PUSH
78604: LD_VAR 0 5
78608: GREATER
78609: IFFALSE 78688
// begin ComMoveXY ( unit , x , y ) ;
78611: LD_VAR 0 1
78615: PPUSH
78616: LD_VAR 0 2
78620: PPUSH
78621: LD_VAR 0 3
78625: PPUSH
78626: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
78630: LD_INT 35
78632: PPUSH
78633: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
78637: LD_VAR 0 1
78641: PPUSH
78642: LD_VAR 0 2
78646: PPUSH
78647: LD_VAR 0 3
78651: PPUSH
78652: CALL 52756 0 3
78656: NOT
78657: IFFALSE 78661
// exit ;
78659: GO 78915
// until GetDistUnitXY ( unit , x , y ) < dist ;
78661: LD_VAR 0 1
78665: PPUSH
78666: LD_VAR 0 2
78670: PPUSH
78671: LD_VAR 0 3
78675: PPUSH
78676: CALL_OW 297
78680: PUSH
78681: LD_VAR 0 5
78685: LESS
78686: IFFALSE 78630
// end ; ComTurnXY ( unit , x , y ) ;
78688: LD_VAR 0 1
78692: PPUSH
78693: LD_VAR 0 2
78697: PPUSH
78698: LD_VAR 0 3
78702: PPUSH
78703: CALL_OW 118
// wait ( 5 ) ;
78707: LD_INT 5
78709: PPUSH
78710: CALL_OW 67
// _d := GetDir ( unit ) ;
78714: LD_ADDR_VAR 0 10
78718: PUSH
78719: LD_VAR 0 1
78723: PPUSH
78724: CALL_OW 254
78728: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
78729: LD_ADDR_VAR 0 8
78733: PUSH
78734: LD_VAR 0 1
78738: PPUSH
78739: CALL_OW 250
78743: PPUSH
78744: LD_VAR 0 10
78748: PPUSH
78749: LD_VAR 0 5
78753: PPUSH
78754: CALL_OW 272
78758: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
78759: LD_ADDR_VAR 0 9
78763: PUSH
78764: LD_VAR 0 1
78768: PPUSH
78769: CALL_OW 251
78773: PPUSH
78774: LD_VAR 0 10
78778: PPUSH
78779: LD_VAR 0 5
78783: PPUSH
78784: CALL_OW 273
78788: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78789: LD_VAR 0 8
78793: PPUSH
78794: LD_VAR 0 9
78798: PPUSH
78799: CALL_OW 488
78803: NOT
78804: IFFALSE 78808
// exit ;
78806: GO 78915
// ComAnimCustom ( unit , 1 ) ;
78808: LD_VAR 0 1
78812: PPUSH
78813: LD_INT 1
78815: PPUSH
78816: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
78820: LD_VAR 0 8
78824: PPUSH
78825: LD_VAR 0 9
78829: PPUSH
78830: LD_VAR 0 6
78834: PPUSH
78835: LD_VAR 0 7
78839: PPUSH
78840: CALL_OW 330
// repeat wait ( 1 ) ;
78844: LD_INT 1
78846: PPUSH
78847: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
78851: LD_VAR 0 1
78855: PPUSH
78856: CALL_OW 316
78860: PUSH
78861: LD_VAR 0 1
78865: PPUSH
78866: CALL_OW 314
78870: OR
78871: PUSH
78872: LD_VAR 0 1
78876: PPUSH
78877: CALL_OW 302
78881: NOT
78882: OR
78883: PUSH
78884: LD_VAR 0 1
78888: PPUSH
78889: CALL_OW 301
78893: OR
78894: IFFALSE 78844
// RemoveSeeing ( _x , _y , side ) ;
78896: LD_VAR 0 8
78900: PPUSH
78901: LD_VAR 0 9
78905: PPUSH
78906: LD_VAR 0 6
78910: PPUSH
78911: CALL_OW 331
// end ;
78915: LD_VAR 0 4
78919: RET
