Export amForces, amTech, amConstructList, amHealPoint, amBuildings, amTanks, amCommander, amCargo, amPatrol;
Export function PrepareAmerican;
var i, j, b, un, skill, sources, patrolSpawnArea;
begin
uc_side := 1;
uc_nation := nation_american;

amForces := [];
amTech := GetTechNation(1, nation_american, state_enabled);

amConstructList := [
 [us_medium_wheeled, engine_combustion, control_remote, us_cargo_bay],
 [us_medium_tracked, engine_combustion, control_remote, us_crane]
];
amHealPoint := [94, 132];
amBuildings := [];
amTanks := [];
amCargo := 0;
amPatrol := [];

sources := [ [77, 121], [98, 145] ];

for i in sources do
    SetResourceVisibility(i[1], i[2], 1);

SetResourceType(GetBase(amBase), mat_cans, 550);
SetResourceType(GetBase(amBase), mat_oil, 120);
SetResourceType(GetBase(amBase), mat_siberit, 30);

skill := [6, 7, 8, 9][Difficulty];

amCommander := PrepareUnit('Brown', false, '');
PlaceHumanInUnit(amCommander, amBase);

for i := 1 to 4 do
    for j := 1 to [[6, 7, 8, 9][Difficulty], [3, 4, 5, 5][Difficulty], [5, 5, 6, 7][Difficulty], [2, 3, 3, 3][Difficulty]][i] do
        begin
        PrepareHuman(false, i, skill);
        un := CreateHuman;
        amForces := Join(amForces, un);

        case i of
             1: b := FilterAllUnits([[f_side, 1], [f_or, [f_btype, b_bunker], [f_btype, b_barracks]], [f_not, [f_full]]]);
             2: b := UnitFilter(amBase, [f_not, [f_full]]);
             3: b := ReverseArray(FilterAllUnits([[f_side, 1], [f_or, [f_btype, b_factory], [f_btype, b_control_tower]], [f_not, [f_full]]]));
             4: b := FilterAllUnits([[f_side, 1], [f_btype, b_lab_full], [f_not, [f_full]]]);
             end;

        if b then
           begin
           if GetBType(b[1]) = b_barracks and Prob(60) then
              SetClass(un, class_sniper);

           PlaceHumanInUnit(un, b[1]);
           end
        else
           PlaceUnitXYR(un, 92, 137, 4, false);
        end;

patrolSpawnArea := [patrol1aArea, patrol2aArea, patrol3aArea];

for i := 1 to patrolSpawnArea do
    begin
    for j := 1 to [1, 2, 2, 3][Difficulty] do
        begin
        PrepareSoldier(false, [7, 8, 9, 10][Difficulty]);
        un := CreateHuman;

        if j mod 2 = 0 then
           SetClass(un, class_sniper);

        amPatrol := Join(amPatrol, un);
        PlaceUnitArea(un, patrolSpawnArea[i], false);
        SetTag(un, i);
        end;
    end;
End;

// am script
Every 0$2 trigger amScriptActive and Count(amForces) do
var i, tmp, remote, undone, side, lab, eng, tag, tw, cr, sci, sol, hurtUnits, enemyInBase, empty, fac, emptyTowers, weapon;
begin
enable;

side := 1;

remote := FilterAllUnits([[f_side, side], [f_control, control_remote], [f_ok], [f_not, [f_linked]]]);

if remote and Count(FilterAllUnits([[f_side, side], [f_ok], [f_btype, b_control_tower]])) then
   for i in remote do
       Connect(i);

// research
if amTech then
   begin
   lab := FilterAllUnits([[f_side, side], [f_ok], [f_or, [f_btype, b_lab], [f_btype, b_lab_half], [f_btype, b_lab_full]]]);

   if lab then
      begin
      if BuildingStatus(lab[1]) = bs_idle then
         begin
         for i in amTech do
             if CanBeResearched(lab[1], i) then
                begin
                ComResearch(lab[1], i);
                break;
                end;
         end;
      end;
   end;

fac := FilterUnitsInArea(amBaseArea, [[f_side, side], [f_btype, b_factory], [f_ok]]);

if fac then
   begin
   if BuildingStatus(fac[1]) = bs_idle then
      begin
      emptyTowers := FilterUnitsInArea(amBaseArea, [[f_or, [f_btype, b_bunker], [f_btype, b_turret]], [f_bweapon, 0]]);

      if emptyTowers then
         begin
         weapon := GetTurretWeapon(emptyTowers[1], amBaseArea);

         if weapon then
            ComPlaceWeapon(emptyTowers[1], weapon);
         end;

      if amConstructList then
         if CanBeConstructed(fac[1], amConstructList[1][1], amConstructList[1][2], amConstructList[1][3], amConstructList[1][4]) then
            ComConstruct(fac[1], amConstructList[1][1], amConstructList[1][2], amConstructList[1][3], amConstructList[1][4]);
      end;
   end;

// damaged buildings
tmp := FilterUnitsInArea(amBaseArea, [[f_type, unit_building], [f_not, [f_constructed]], [f_not, [f_lives, 1000]]]);

// crates nearby base
cr := GetListOfCratesInArea(amCratesArea);

// sci logic
sci := UnitFilter(amForces, [[f_class, 4], [f_ok]]);
lab := FilterUnitsInArea(amBaseArea, [f_or, [f_btype, b_lab], [f_btype, b_lab_half], [f_btype, b_lab_full]]);

if sci then
   begin
   hurtUnits := UnitFilter(amForces, [[f_inarea, amBaseArea], [f_tag, tHeal]]);

   if hurtUnits then
      begin
      for i in sci do
          if IsInUnit(i) then
             ComExitBuilding(i)
          else
             ComHeal(i, hurtUnits[1]);
      end
   else if lab then
      begin
      for i in sci do
          if not IsInUnit(i) then
             ComEnterUnit(i, lab[1]);
      end;
   end;

// eng logic
eng := UnitFilter(amForces, [f_class, 2]);

if eng then
   begin
   for i in eng do
       begin
       tag := GetTag(i);

       if GetLives(i) < 800 and tag <> tHeal then
          begin
          SetTag(i, tHeal);
          ComMoveXY(i, amHealPoint[1], amHealPoint[2]);
          AddComHold(i);
          end;

       if tag = tHeal and GetLives(i) = 1000 then
          SetTag(i, 0);

       if not tag then
          begin
          undone := FilterUnitsInArea(amBaseArea, [f_constructed]);

          if undone then
             begin
             ComComplete(i, undone[1]);
             continue;
             end;

          if cr or tmp or Count(amBuildings) then
             begin
             if IsInUnit(i) then
                ComExitBuilding(i);

             if tmp then
                SetTag(i, tRepair)
             else if cr then
                SetTag(i, tCrates)
             else
                SetTag(i, tBuild);
             end
          else
             if not IsInUnit(i) then
                ComEnterUnit(i, amBase);
          end;

       if tag = tRepair then
          begin
          if IsInUnit(i) then
             begin
             ComExitBuilding(i);
             continue;
             end;

          if not tmp then
             begin
             SetTag(i, 0);
             continue;
             end;

          if not HasTask(i) then
             ComRepairBuilding(i, tmp[1]);

          if not IsInArea(i, amBaseArea) then
             ComMoveToArea(i, amBaseArea);
          end;

       if tag = tBuild then
          begin
          if IsInUnit(i) then
             begin
             ComExitBuilding(i);
             continue;
             end;

          if not Count(amBuildings) then
             begin
             SetTag(i, 0);
             continue;
             end
          else if not CanBeBuiltOnlyResources(amBase, amBuildings[1][1]) then
             begin
             SetTag(i, 0);
             continue;
             end;

          undone := FilterUnitsInArea(amBaseArea, [f_constructed]);

          if undone then
             begin
             ComComplete(i, undone[1]);
             continue;
             end;

          ComBuild(i, amBuildings[1][1], amBuildings[1][2], amBuildings[1][3], amBuildings[1][4]);
          end;

       if tag = tCrates then
          begin
          if IsInUnit(i) then
             begin
             ComExitBuilding(i);
             continue;
             end;

          if not cr then
             begin
             SetTag(i, 0);
             continue;
             end;

          if not HasTask(i) and not FilterAllUnits([[f_enemy, side], [f_distxy, cr[1], cr[2], 12]]) then
             ComCollect(i, cr[1], cr[2]);
          end;
       end;
   end;

// defense logic
sol := UnitFilter(amForces, [[f_or, [f_class, class_soldier], [f_class, class_sniper]], [f_ok]]) union amCommander;
enemyInBase := FilterUnitsInArea(amBaseArea, [f_enemy, side]);

if sol then
   begin
   if enemyInBase then
      begin
      for i in sol do
          begin
          tw := IsInUnit(i);

          if tw then
             begin
             if not tw in FilterAllUnits([[f_side, side], [f_see, 2], [f_or, [f_btype, b_bunker], [f_btype, b_breastwork]]]) then
                ComExitBuilding(i);
             end
          else
             ComAttackUnit(i, NearestUnitToUnit(enemyInBase, i));
          end;
      end
   else
      begin
      empty := FilterUnitsInArea(amBaseArea, [[f_not, [f_full]], [f_or, [f_btype, b_bunker], [f_btype, b_armoury], [f_btype, b_barracks], [f_btype, b_breastwork]]]);

      if empty then
         empty := ReverseArray(empty);

      for i in sol do
          begin
          tag := GetTag(i);

          if GetLives(i) < 1000 and tag <> tHeal then
             begin
             SetTag(i, tHeal);
             ComMoveXY(i, amHealPoint[1], amHealPoint[2]);
             AddComHold(i);
             continue;
             end;

          if GetLives(i) = 1000 and tag = tHeal then
             begin
             SetTag(i, 0);
             continue;
             end;

          if HasTask(i) then
             continue;

          if not IsInUnit(i) and not tag and empty then
             begin
             ComEnterUnit(i, empty[1]);

             if GetBType(empty[1]) = b_barracks and Prob(50) then
                AddComChangeProfession(i, class_sniper);

             empty := Delete(empty, 1);
             end;
          end;
      end;
   end;
End;

Every 0$2 trigger IsOk(amCargo) and amScriptActive do
var cr, enemyInArea;
begin
enable;

enemyInArea := FilterUnitsInArea(amBaseArea, [[f_enemy, 1], [f_ok]]);
cr := GetListOfCratesInArea(cratesWestArea);

if GetFuel(amCargo) < 10 and not See(2, amCargo) and GetEngine(amCargo) = engine_combustion then
   SetFuel(amCargo, 100);

if not HasTask(amCargo) and GetCargo(amCargo, mat_cans) < 100 and not enemyInArea then
   begin
   if cr then
      ComCollect(amCargo, cr[1], cr[2])
   else if not IsInArea(amCargo, cratesWestArea) then
      ComMoveToArea(amCargo, cratesWestArea);

   exit;
   end;

if enemyInArea and not IsInArea(amCargo, amBaseArea) then
   ComMoveXY(amCargo, 93, 137)
else if GetCargo(amCargo, mat_cans) = 100 then
   ComGive(amCargo, amBase);
End;

Every 0$2 trigger amScriptActive and FilterAllUnits([[f_side, 1], [f_not, [f_hastask]], [f_ok], [f_weapon, us_crane]]) and FilterAllUnits([[f_side, 1], [f_not, [f_lives, 1000]], [f_type, unit_building]]) do
var i, tmp, tmp2;
begin
enable;

tmp := FilterAllUnits([[f_side, 1], [f_not, [f_lives, 1000]], [f_type, unit_building]]);
tmp2 := FilterAllUnits([[f_side, 1], [f_not, [f_lives, 600]], [f_type, unit_building]]);

for i in FilterAllUnits([[f_side, 1], [f_not, [f_hastask]], [f_ok], [f_weapon, us_crane]]) do
    begin
    if tmp2 then
       ComRepairBuilding(i, NearestUnitToUnit(tmp2, i))
    else
       ComRepairBuilding(i, NearestUnitToUnit(tmp, i));
    end;
End;

// patrols
Every 0$2 trigger amPatrol and gameActive and not americanDestroyed do
var i, j, points, x, y, tag, enemy;
begin
enable;

points := [ [patrol1aArea, patrol1bArea],
            [patrol2aArea, patrol2bArea, patrol2cArea, patrol2dArea, patrol2bArea],
            [patrol3aArea, patrol3bArea, patrol3cArea, patrol3dArea, patrol3eArea, patrol3fArea, patrol3gArea, patrol3hArea] ];


for i in amPatrol do
    begin
    if See(2, i) then
       begin
       enemy := NearestUnitToUnit(FilterAllUnits([f_side, 2]), i);

       if enemy then
          begin
          x := GetX(enemy);
          y := GetY(enemy);

          if ValidHex(x, y) then
             ComAgressiveMove(i, x, y);
          end;
       end;

    if HasTask(i) then
       continue;

    tag := GetTag(i);

    for j := 1 to points[tag] do
        begin
        AddComMoveToArea(i, points[tag][j]);
        AddComWait(i, rand(0$5, 0$11));
        end;
    end;
End;

Every 10$00 trigger Count(amTanks) < 5 and amScriptActive and spotByAmerican and spotArabianBase do
var i, parts, part;
begin
enable;

parts := [
  [us_medium_tracked, us_laser],
  [us_heavy_tracked, us_laser],
  [us_heavy_tracked, us_heavy_gun],
  [us_medium_tracked, us_double_gun],
  [us_medium_wheeled, us_gatling_gun],
  [us_light_wheeled, us_machine_gun]
];

for i := 1 to [3, 4, 5, 6][Difficulty] do
    begin
    part := parts[rand(1, parts)];
    amConstructList := Join(amConstructList, [part[1], engine_combustion, control_remote, part[2]])
    end;
End;

Every 3$00 trigger not americanDestroyed and Count(amTanks) and spotByAmerican and spotArabianBase do
var i, tmp, tmp2;
begin
enable;

tmp := UnitFilter(amTanks, [[f_linked], [f_ok]]);
amTanks := amTanks diff tmp;

if not tmp then
   exit;

tmp2 := UnitFilter(tmp, [f_weapon, us_machine_gun]);

if tmp2 then
   tmp := tmp diff tmp2;

repeat
 wait(0$1);
 tmp := UnitFilter(tmp, [f_ok]);

 for i in tmp do
     AgressiveMove(i, [ [187,114], [203,113], [218,108] ]);

 tmp2 := UnitFilter(tmp2, [f_ok]);

 for i in tmp2 do
     if GetDistUnitXY(i, 242, 105) > 12 then
        ComMoveXY(i, 242, 105)
     else
        ComAttackUnit(i, NearestUnitToUnit(FilterAllUnits([[f_enemy, 1], [f_type, unit_human]]), i));

until not tmp;
End;

