// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// PrepareArabian ;
   8: CALL 65 0 0
// PrepareRussian ;
  12: CALL 1509 0 0
// PrepareHeike ;
  16: CALL 614 0 0
// Action ;
  20: CALL 2675 0 0
// end ;
  24: END
// export debug , prefix , startAttackOnKabul , startAttackOnHeike ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// prefix := 07_ ;
  36: LD_ADDR_EXP 2
  40: PUSH
  41: LD_STRING 07_
  43: ST_TO_ADDR
// startAttackOnKabul := false ;
  44: LD_ADDR_EXP 3
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// startAttackOnHeike := false ;
  52: LD_ADDR_EXP 4
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// end ; end_of_file
  60: LD_VAR 0 1
  64: RET
// export function PrepareArabian ; var i , un , lives ; begin
  65: LD_INT 0
  67: PPUSH
  68: PPUSH
  69: PPUSH
  70: PPUSH
// SetBName ( ar_dep , newkabul ) ;
  71: LD_INT 2
  73: PPUSH
  74: LD_STRING newkabul
  76: PPUSH
  77: CALL_OW 500
// uc_side := 5 ;
  81: LD_ADDR_OWVAR 20
  85: PUSH
  86: LD_INT 5
  88: ST_TO_ADDR
// uc_nation := 2 ;
  89: LD_ADDR_OWVAR 21
  93: PUSH
  94: LD_INT 2
  96: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do
  97: LD_ADDR_VAR 0 2
 101: PUSH
 102: LD_INT 22
 104: PUSH
 105: LD_INT 2
 107: PUSH
 108: EMPTY
 109: LIST
 110: LIST
 111: PUSH
 112: LD_INT 21
 114: PUSH
 115: LD_INT 3
 117: PUSH
 118: EMPTY
 119: LIST
 120: LIST
 121: PUSH
 122: EMPTY
 123: LIST
 124: LIST
 125: PPUSH
 126: CALL_OW 69
 130: PUSH
 131: FOR_IN
 132: IFFALSE 266
// begin SetSide ( i , 5 ) ;
 134: LD_VAR 0 2
 138: PPUSH
 139: LD_INT 5
 141: PPUSH
 142: CALL_OW 235
// lives := rand ( 248 , 510 ) ;
 146: LD_ADDR_VAR 0 4
 150: PUSH
 151: LD_INT 248
 153: PPUSH
 154: LD_INT 510
 156: PPUSH
 157: CALL_OW 12
 161: ST_TO_ADDR
// SetLives ( i , lives ) ;
 162: LD_VAR 0 2
 166: PPUSH
 167: LD_VAR 0 4
 171: PPUSH
 172: CALL_OW 234
// if GetBType ( i ) = b_bunker then
 176: LD_VAR 0 2
 180: PPUSH
 181: CALL_OW 266
 185: PUSH
 186: LD_INT 32
 188: EQUAL
 189: IFFALSE 264
// begin PlaceWeaponTurret ( i , [ ar_double_machine_gun , ar_gun , ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] ) ;
 191: LD_VAR 0 2
 195: PPUSH
 196: LD_INT 24
 198: PUSH
 199: LD_INT 27
 201: PUSH
 202: LD_INT 25
 204: PUSH
 205: LD_INT 28
 207: PUSH
 208: EMPTY
 209: LIST
 210: LIST
 211: LIST
 212: LIST
 213: PUSH
 214: LD_INT 1
 216: PPUSH
 217: LD_INT 4
 219: PPUSH
 220: CALL_OW 12
 224: ARRAY
 225: PPUSH
 226: CALL_OW 431
// if lives > 250 then
 230: LD_VAR 0 4
 234: PUSH
 235: LD_INT 250
 237: GREATER
 238: IFFALSE 264
// begin PrepareSoldier ( false , 6 ) ;
 240: LD_INT 0
 242: PPUSH
 243: LD_INT 6
 245: PPUSH
 246: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
 250: CALL_OW 44
 254: PPUSH
 255: LD_VAR 0 2
 259: PPUSH
 260: CALL_OW 52
// end ; end ; end ;
 264: GO 131
 266: POP
 267: POP
// for i := 1 to 9 do
 268: LD_ADDR_VAR 0 2
 272: PUSH
 273: DOUBLE
 274: LD_INT 1
 276: DEC
 277: ST_TO_ADDR
 278: LD_INT 9
 280: PUSH
 281: FOR_TO
 282: IFFALSE 361
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 0 ) ;
 284: LD_INT 0
 286: PPUSH
 287: LD_INT 1
 289: PPUSH
 290: LD_INT 4
 292: PPUSH
 293: CALL_OW 12
 297: PPUSH
 298: LD_INT 0
 300: PPUSH
 301: CALL_OW 380
// un := CreateHuman ;
 305: LD_ADDR_VAR 0 3
 309: PUSH
 310: CALL_OW 44
 314: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 315: LD_VAR 0 3
 319: PPUSH
 320: LD_INT 0
 322: PPUSH
 323: LD_INT 5
 325: PPUSH
 326: CALL_OW 12
 330: PPUSH
 331: CALL_OW 233
// PlaceUnitArea ( un , kabulDeadArea , false ) ;
 335: LD_VAR 0 3
 339: PPUSH
 340: LD_INT 1
 342: PPUSH
 343: LD_INT 0
 345: PPUSH
 346: CALL_OW 49
// KillUnit ( un ) ;
 350: LD_VAR 0 3
 354: PPUSH
 355: CALL_OW 66
// end ;
 359: GO 281
 361: POP
 362: POP
// for i := 1 to 3 do
 363: LD_ADDR_VAR 0 2
 367: PUSH
 368: DOUBLE
 369: LD_INT 1
 371: DEC
 372: ST_TO_ADDR
 373: LD_INT 3
 375: PUSH
 376: FOR_TO
 377: IFFALSE 531
// begin vc_chassis := ar_medium_trike ;
 379: LD_ADDR_OWVAR 37
 383: PUSH
 384: LD_INT 13
 386: ST_TO_ADDR
// vc_engine := [ engine_solar , engine_combustion ] [ rand ( 1 , 2 ) ] ;
 387: LD_ADDR_OWVAR 39
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 1
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: PUSH
 402: LD_INT 1
 404: PPUSH
 405: LD_INT 2
 407: PPUSH
 408: CALL_OW 12
 412: ARRAY
 413: ST_TO_ADDR
// vc_control := [ control_manual , control_remote ] [ rand ( 1 , 2 ) ] ;
 414: LD_ADDR_OWVAR 38
 418: PUSH
 419: LD_INT 1
 421: PUSH
 422: LD_INT 2
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: PUSH
 429: LD_INT 1
 431: PPUSH
 432: LD_INT 2
 434: PPUSH
 435: CALL_OW 12
 439: ARRAY
 440: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_gatling_gun , ar_gun ] [ rand ( 1 , 3 ) ] ;
 441: LD_ADDR_OWVAR 40
 445: PUSH
 446: LD_INT 24
 448: PUSH
 449: LD_INT 25
 451: PUSH
 452: LD_INT 27
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: LIST
 459: PUSH
 460: LD_INT 1
 462: PPUSH
 463: LD_INT 3
 465: PPUSH
 466: CALL_OW 12
 470: ARRAY
 471: ST_TO_ADDR
// un := CreateVehicle ;
 472: LD_ADDR_VAR 0 3
 476: PUSH
 477: CALL_OW 45
 481: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 482: LD_VAR 0 3
 486: PPUSH
 487: LD_INT 0
 489: PPUSH
 490: LD_INT 5
 492: PPUSH
 493: CALL_OW 12
 497: PPUSH
 498: CALL_OW 233
// PlaceUnitArea ( un , kabulVDeadArea , false ) ;
 502: LD_VAR 0 3
 506: PPUSH
 507: LD_INT 2
 509: PPUSH
 510: LD_INT 0
 512: PPUSH
 513: CALL_OW 49
// SetLives ( un , 200 ) ;
 517: LD_VAR 0 3
 521: PPUSH
 522: LD_INT 200
 524: PPUSH
 525: CALL_OW 234
// end ;
 529: GO 376
 531: POP
 532: POP
// for i := 1 to 3 do
 533: LD_ADDR_VAR 0 2
 537: PUSH
 538: DOUBLE
 539: LD_INT 1
 541: DEC
 542: ST_TO_ADDR
 543: LD_INT 3
 545: PUSH
 546: FOR_TO
 547: IFFALSE 607
// begin PrepareSoldier ( false , 6 ) ;
 549: LD_INT 0
 551: PPUSH
 552: LD_INT 6
 554: PPUSH
 555: CALL_OW 381
// un := CreateHuman ;
 559: LD_ADDR_VAR 0 3
 563: PUSH
 564: CALL_OW 44
 568: ST_TO_ADDR
// PlaceUnitXYR ( un , 106 , 47 , 4 , false ) ;
 569: LD_VAR 0 3
 573: PPUSH
 574: LD_INT 106
 576: PPUSH
 577: LD_INT 47
 579: PPUSH
 580: LD_INT 4
 582: PPUSH
 583: LD_INT 0
 585: PPUSH
 586: CALL_OW 50
// ComAgressiveMove ( un , 71 , 53 ) ;
 590: LD_VAR 0 3
 594: PPUSH
 595: LD_INT 71
 597: PPUSH
 598: LD_INT 53
 600: PPUSH
 601: CALL_OW 114
// end ;
 605: GO 546
 607: POP
 608: POP
// end ;
 609: LD_VAR 0 1
 613: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad ; export function PrepareHeike ; var i , tmp , un , veh ; begin
 614: LD_INT 0
 616: PPUSH
 617: PPUSH
 618: PPUSH
 619: PPUSH
 620: PPUSH
// uc_side := 5 ;
 621: LD_ADDR_OWVAR 20
 625: PUSH
 626: LD_INT 5
 628: ST_TO_ADDR
// uc_nation := 1 ;
 629: LD_ADDR_OWVAR 21
 633: PUSH
 634: LD_INT 1
 636: ST_TO_ADDR
// americanSquad := [ ] ;
 637: LD_ADDR_EXP 17
 641: PUSH
 642: EMPTY
 643: ST_TO_ADDR
// if not americanSquad then
 644: LD_EXP 17
 648: NOT
 649: IFFALSE 714
// begin for i := 1 to 4 do
 651: LD_ADDR_VAR 0 2
 655: PUSH
 656: DOUBLE
 657: LD_INT 1
 659: DEC
 660: ST_TO_ADDR
 661: LD_INT 4
 663: PUSH
 664: FOR_TO
 665: IFFALSE 710
// begin PrepareHuman ( false , rand ( 2 , 4 ) , 6 ) ;
 667: LD_INT 0
 669: PPUSH
 670: LD_INT 2
 672: PPUSH
 673: LD_INT 4
 675: PPUSH
 676: CALL_OW 12
 680: PPUSH
 681: LD_INT 6
 683: PPUSH
 684: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 688: LD_ADDR_EXP 17
 692: PUSH
 693: LD_EXP 17
 697: PPUSH
 698: CALL_OW 44
 702: PPUSH
 703: CALL 41020 0 2
 707: ST_TO_ADDR
// end ;
 708: GO 664
 710: POP
 711: POP
// end else
 712: GO 765
// begin for i in americanSquad do
 714: LD_ADDR_VAR 0 2
 718: PUSH
 719: LD_EXP 17
 723: PUSH
 724: FOR_IN
 725: IFFALSE 763
// if GetClass ( i ) in [ class_sniper , class_soldier ] then
 727: LD_VAR 0 2
 731: PPUSH
 732: CALL_OW 257
 736: PUSH
 737: LD_INT 5
 739: PUSH
 740: LD_INT 1
 742: PUSH
 743: EMPTY
 744: LIST
 745: LIST
 746: IN
 747: IFFALSE 761
// SetClass ( i , class_engineer ) ;
 749: LD_VAR 0 2
 753: PPUSH
 754: LD_INT 2
 756: PPUSH
 757: CALL_OW 336
 761: GO 724
 763: POP
 764: POP
// end ; uc_side := 2 ;
 765: LD_ADDR_OWVAR 20
 769: PUSH
 770: LD_INT 2
 772: ST_TO_ADDR
// uc_nation := 2 ;
 773: LD_ADDR_OWVAR 21
 777: PUSH
 778: LD_INT 2
 780: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 781: LD_ADDR_EXP 5
 785: PUSH
 786: LD_STRING Heike
 788: PPUSH
 789: LD_EXP 1
 793: NOT
 794: PPUSH
 795: LD_EXP 2
 799: PPUSH
 800: CALL 3571 0 3
 804: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 805: LD_ADDR_EXP 8
 809: PUSH
 810: LD_STRING Ibrahim
 812: PPUSH
 813: LD_EXP 1
 817: NOT
 818: PPUSH
 819: LD_EXP 2
 823: PPUSH
 824: CALL 3571 0 3
 828: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 829: LD_ADDR_EXP 6
 833: PUSH
 834: LD_STRING Givi
 836: PPUSH
 837: LD_EXP 1
 841: NOT
 842: PPUSH
 843: LD_EXP 2
 847: PPUSH
 848: CALL 3571 0 3
 852: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 853: LD_ADDR_EXP 9
 857: PUSH
 858: LD_STRING Kamil
 860: PPUSH
 861: LD_EXP 1
 865: NOT
 866: PPUSH
 867: LD_EXP 2
 871: PPUSH
 872: CALL 3571 0 3
 876: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 877: LD_ADDR_EXP 10
 881: PUSH
 882: LD_STRING Kaia
 884: PPUSH
 885: LD_EXP 1
 889: NOT
 890: PPUSH
 891: LD_EXP 2
 895: PPUSH
 896: CALL 3571 0 3
 900: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 901: LD_ADDR_EXP 11
 905: PUSH
 906: LD_STRING Sophia
 908: PPUSH
 909: LD_EXP 1
 913: NOT
 914: PPUSH
 915: LD_EXP 2
 919: PPUSH
 920: CALL 3571 0 3
 924: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 925: LD_ADDR_EXP 12
 929: PUSH
 930: LD_STRING Markov
 932: PPUSH
 933: LD_EXP 1
 937: NOT
 938: PPUSH
 939: LD_EXP 2
 943: PPUSH
 944: CALL 3571 0 3
 948: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 949: LD_ADDR_EXP 15
 953: PUSH
 954: LD_STRING Aviradze
 956: PPUSH
 957: LD_EXP 1
 961: NOT
 962: PPUSH
 963: LD_EXP 2
 967: PPUSH
 968: CALL 3571 0 3
 972: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 973: LD_ADDR_EXP 14
 977: PUSH
 978: LD_STRING Kurt
 980: PPUSH
 981: LD_EXP 1
 985: NOT
 986: PPUSH
 987: LD_EXP 2
 991: PPUSH
 992: CALL 3571 0 3
 996: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 997: LD_ADDR_EXP 7
1001: PUSH
1002: LD_STRING Mike
1004: PPUSH
1005: LD_EXP 1
1009: NOT
1010: PPUSH
1011: LD_EXP 2
1015: PPUSH
1016: CALL 3571 0 3
1020: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1021: LD_ADDR_EXP 13
1025: PUSH
1026: LD_STRING Olaf
1028: PPUSH
1029: LD_INT 0
1031: PPUSH
1032: LD_STRING 
1034: PPUSH
1035: CALL 3571 0 3
1039: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
1040: LD_ADDR_EXP 16
1044: PUSH
1045: LD_STRING 07_others
1047: PPUSH
1048: CALL_OW 31
1052: ST_TO_ADDR
// veh := [ [ ar_half_tracked , engine_combustion , control_manual , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] , ] ;
1053: LD_ADDR_VAR 0 5
1057: PUSH
1058: LD_INT 14
1060: PUSH
1061: LD_INT 1
1063: PUSH
1064: LD_INT 1
1066: PUSH
1067: LD_INT 25
1069: PUSH
1070: EMPTY
1071: LIST
1072: LIST
1073: LIST
1074: LIST
1075: PUSH
1076: LD_INT 14
1078: PUSH
1079: LD_INT 1
1081: PUSH
1082: LD_INT 1
1084: PUSH
1085: LD_INT 27
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: PUSH
1094: LD_INT 14
1096: PUSH
1097: LD_INT 1
1099: PUSH
1100: LD_INT 1
1102: PUSH
1103: LD_INT 27
1105: PUSH
1106: EMPTY
1107: LIST
1108: LIST
1109: LIST
1110: LIST
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: LIST
1116: ST_TO_ADDR
// for i in veh do
1117: LD_ADDR_VAR 0 2
1121: PUSH
1122: LD_VAR 0 5
1126: PUSH
1127: FOR_IN
1128: IFFALSE 1233
// begin vc_chassis := i [ 1 ] ;
1130: LD_ADDR_OWVAR 37
1134: PUSH
1135: LD_VAR 0 2
1139: PUSH
1140: LD_INT 1
1142: ARRAY
1143: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
1144: LD_ADDR_OWVAR 39
1148: PUSH
1149: LD_VAR 0 2
1153: PUSH
1154: LD_INT 2
1156: ARRAY
1157: ST_TO_ADDR
// vc_control := i [ 3 ] ;
1158: LD_ADDR_OWVAR 38
1162: PUSH
1163: LD_VAR 0 2
1167: PUSH
1168: LD_INT 3
1170: ARRAY
1171: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
1172: LD_ADDR_OWVAR 40
1176: PUSH
1177: LD_VAR 0 2
1181: PUSH
1182: LD_INT 4
1184: ARRAY
1185: ST_TO_ADDR
// vc_fuel_battery := 25 ;
1186: LD_ADDR_OWVAR 41
1190: PUSH
1191: LD_INT 25
1193: ST_TO_ADDR
// un := CreateVehicle ;
1194: LD_ADDR_VAR 0 4
1198: PUSH
1199: CALL_OW 45
1203: ST_TO_ADDR
// SetDir ( un , 0 ) ;
1204: LD_VAR 0 4
1208: PPUSH
1209: LD_INT 0
1211: PPUSH
1212: CALL_OW 233
// PlaceUnitArea ( un , heikeVehArea , false ) ;
1216: LD_VAR 0 4
1220: PPUSH
1221: LD_INT 7
1223: PPUSH
1224: LD_INT 0
1226: PPUSH
1227: CALL_OW 49
// end ;
1231: GO 1127
1233: POP
1234: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad union americanSquad ;
1235: LD_ADDR_VAR 0 3
1239: PUSH
1240: LD_EXP 7
1244: PUSH
1245: LD_EXP 8
1249: PUSH
1250: LD_EXP 9
1254: PUSH
1255: LD_EXP 10
1259: PUSH
1260: LD_EXP 11
1264: PUSH
1265: LD_EXP 12
1269: PUSH
1270: LD_EXP 13
1274: PUSH
1275: LD_EXP 14
1279: PUSH
1280: LD_EXP 15
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: LIST
1289: LIST
1290: LIST
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: PUSH
1296: LD_EXP 16
1300: UNION
1301: PUSH
1302: LD_EXP 17
1306: UNION
1307: ST_TO_ADDR
// for i in tmp do
1308: LD_ADDR_VAR 0 2
1312: PUSH
1313: LD_VAR 0 3
1317: PUSH
1318: FOR_IN
1319: IFFALSE 1439
// begin if GetClass ( i ) in [ class_mechanic , class_engineer , class_scientistic ] and FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) then
1321: LD_VAR 0 2
1325: PPUSH
1326: CALL_OW 257
1330: PUSH
1331: LD_INT 3
1333: PUSH
1334: LD_INT 2
1336: PUSH
1337: LD_INT 4
1339: PUSH
1340: EMPTY
1341: LIST
1342: LIST
1343: LIST
1344: IN
1345: PUSH
1346: LD_INT 22
1348: PUSH
1349: LD_INT 2
1351: PUSH
1352: EMPTY
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 58
1358: PUSH
1359: EMPTY
1360: LIST
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PPUSH
1366: CALL_OW 69
1370: AND
1371: IFFALSE 1413
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) [ 1 ] ) else
1373: LD_VAR 0 2
1377: PPUSH
1378: LD_INT 22
1380: PUSH
1381: LD_INT 2
1383: PUSH
1384: EMPTY
1385: LIST
1386: LIST
1387: PUSH
1388: LD_INT 58
1390: PUSH
1391: EMPTY
1392: LIST
1393: PUSH
1394: EMPTY
1395: LIST
1396: LIST
1397: PPUSH
1398: CALL_OW 69
1402: PUSH
1403: LD_INT 1
1405: ARRAY
1406: PPUSH
1407: CALL_OW 52
1411: GO 1428
// PlaceUnitArea ( i , heikePeopleArea , false ) ;
1413: LD_VAR 0 2
1417: PPUSH
1418: LD_INT 6
1420: PPUSH
1421: LD_INT 0
1423: PPUSH
1424: CALL_OW 49
// ComHold ( i ) ;
1428: LD_VAR 0 2
1432: PPUSH
1433: CALL_OW 140
// end ;
1437: GO 1318
1439: POP
1440: POP
// PlaceUnitArea ( Heike , heikeArea , false ) ;
1441: LD_EXP 5
1445: PPUSH
1446: LD_INT 5
1448: PPUSH
1449: LD_INT 0
1451: PPUSH
1452: CALL_OW 49
// ComTurnUnit ( Heike , ar_dep ) ;
1456: LD_EXP 5
1460: PPUSH
1461: LD_INT 2
1463: PPUSH
1464: CALL_OW 119
// if Givi then
1468: LD_EXP 6
1472: IFFALSE 1504
// begin PlaceUnitXY ( Givi , 129 , 158 , false ) ;
1474: LD_EXP 6
1478: PPUSH
1479: LD_INT 129
1481: PPUSH
1482: LD_INT 158
1484: PPUSH
1485: LD_INT 0
1487: PPUSH
1488: CALL_OW 48
// ComTurnUnit ( Givi , ar_dep ) ;
1492: LD_EXP 6
1496: PPUSH
1497: LD_INT 2
1499: PPUSH
1500: CALL_OW 119
// end ; end ; end_of_file
1504: LD_VAR 0 1
1508: RET
// export kabulAttackers , heikeAttackers , Burlak ; export function PrepareRussian ; var i , un ; begin
1509: LD_INT 0
1511: PPUSH
1512: PPUSH
1513: PPUSH
// uc_side := 3 ;
1514: LD_ADDR_OWVAR 20
1518: PUSH
1519: LD_INT 3
1521: ST_TO_ADDR
// uc_nation := 3 ;
1522: LD_ADDR_OWVAR 21
1526: PUSH
1527: LD_INT 3
1529: ST_TO_ADDR
// Burlak := NewCharacter ( Burlak ) ;
1530: LD_ADDR_EXP 20
1534: PUSH
1535: LD_STRING Burlak
1537: PPUSH
1538: CALL_OW 25
1542: ST_TO_ADDR
// kabulAttackers := [ ] ;
1543: LD_ADDR_EXP 18
1547: PUSH
1548: EMPTY
1549: ST_TO_ADDR
// heikeAttackers := [ ] ;
1550: LD_ADDR_EXP 19
1554: PUSH
1555: EMPTY
1556: ST_TO_ADDR
// for i := 1 to 9 do
1557: LD_ADDR_VAR 0 2
1561: PUSH
1562: DOUBLE
1563: LD_INT 1
1565: DEC
1566: ST_TO_ADDR
1567: LD_INT 9
1569: PUSH
1570: FOR_TO
1571: IFFALSE 1663
// begin PrepareHuman ( false , class_soldier , 0 ) ;
1573: LD_INT 0
1575: PPUSH
1576: LD_INT 1
1578: PPUSH
1579: LD_INT 0
1581: PPUSH
1582: CALL_OW 380
// un := CreateHuman ;
1586: LD_ADDR_VAR 0 3
1590: PUSH
1591: CALL_OW 44
1595: ST_TO_ADDR
// if Prob ( 40 ) then
1596: LD_INT 40
1598: PPUSH
1599: CALL_OW 13
1603: IFFALSE 1617
// SetClass ( un , class_bazooker ) ;
1605: LD_VAR 0 3
1609: PPUSH
1610: LD_INT 9
1612: PPUSH
1613: CALL_OW 336
// SetDir ( un , rand ( 0 , 5 ) ) ;
1617: LD_VAR 0 3
1621: PPUSH
1622: LD_INT 0
1624: PPUSH
1625: LD_INT 5
1627: PPUSH
1628: CALL_OW 12
1632: PPUSH
1633: CALL_OW 233
// PlaceUnitArea ( un , KabulRuDead , false ) ;
1637: LD_VAR 0 3
1641: PPUSH
1642: LD_INT 10
1644: PPUSH
1645: LD_INT 0
1647: PPUSH
1648: CALL_OW 49
// KillUnit ( un ) ;
1652: LD_VAR 0 3
1656: PPUSH
1657: CALL_OW 66
// end ;
1661: GO 1570
1663: POP
1664: POP
// for i := 1 to 9 do
1665: LD_ADDR_VAR 0 2
1669: PUSH
1670: DOUBLE
1671: LD_INT 1
1673: DEC
1674: ST_TO_ADDR
1675: LD_INT 9
1677: PUSH
1678: FOR_TO
1679: IFFALSE 1900
// begin if rand ( 0 , 1 ) then
1681: LD_INT 0
1683: PPUSH
1684: LD_INT 1
1686: PPUSH
1687: CALL_OW 12
1691: IFFALSE 1754
// begin PrepareHuman ( false , class_soldier , 7 ) ;
1693: LD_INT 0
1695: PPUSH
1696: LD_INT 1
1698: PPUSH
1699: LD_INT 7
1701: PPUSH
1702: CALL_OW 380
// un := CreateHuman ;
1706: LD_ADDR_VAR 0 3
1710: PUSH
1711: CALL_OW 44
1715: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1716: LD_VAR 0 3
1720: PPUSH
1721: LD_INT 1
1723: PPUSH
1724: CALL_OW 233
// PlaceUnitArea ( un , kabulRuArea , false ) ;
1728: LD_VAR 0 3
1732: PPUSH
1733: LD_INT 3
1735: PPUSH
1736: LD_INT 0
1738: PPUSH
1739: CALL_OW 49
// ComHold ( un ) ;
1743: LD_VAR 0 3
1747: PPUSH
1748: CALL_OW 140
// end else
1752: GO 1869
// begin vc_chassis := ru_medium_tracked ;
1754: LD_ADDR_OWVAR 37
1758: PUSH
1759: LD_INT 22
1761: ST_TO_ADDR
// vc_engine := engine_combustion ;
1762: LD_ADDR_OWVAR 39
1766: PUSH
1767: LD_INT 1
1769: ST_TO_ADDR
// vc_control := control_manual ;
1770: LD_ADDR_OWVAR 38
1774: PUSH
1775: LD_INT 1
1777: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
1778: LD_ADDR_OWVAR 40
1782: PUSH
1783: LD_INT 44
1785: PUSH
1786: LD_INT 43
1788: PUSH
1789: LD_INT 45
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: LIST
1796: PUSH
1797: LD_INT 1
1799: PPUSH
1800: LD_INT 3
1802: PPUSH
1803: CALL_OW 12
1807: ARRAY
1808: ST_TO_ADDR
// un := CreateVehicle ;
1809: LD_ADDR_VAR 0 3
1813: PUSH
1814: CALL_OW 45
1818: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1819: LD_VAR 0 3
1823: PPUSH
1824: LD_INT 1
1826: PPUSH
1827: CALL_OW 233
// PlaceUnitArea ( un , kabulRuArea , false ) ;
1831: LD_VAR 0 3
1835: PPUSH
1836: LD_INT 3
1838: PPUSH
1839: LD_INT 0
1841: PPUSH
1842: CALL_OW 49
// ComHold ( un ) ;
1846: LD_VAR 0 3
1850: PPUSH
1851: CALL_OW 140
// PlaceHumanInUnit ( CreateHuman , un ) ;
1855: CALL_OW 44
1859: PPUSH
1860: LD_VAR 0 3
1864: PPUSH
1865: CALL_OW 52
// end ; kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
1869: LD_ADDR_EXP 18
1873: PUSH
1874: LD_EXP 18
1878: PPUSH
1879: LD_EXP 18
1883: PUSH
1884: LD_INT 1
1886: PLUS
1887: PPUSH
1888: LD_VAR 0 3
1892: PPUSH
1893: CALL_OW 1
1897: ST_TO_ADDR
// end ;
1898: GO 1678
1900: POP
1901: POP
// for i := 1 to 5 do
1902: LD_ADDR_VAR 0 2
1906: PUSH
1907: DOUBLE
1908: LD_INT 1
1910: DEC
1911: ST_TO_ADDR
1912: LD_INT 5
1914: PUSH
1915: FOR_TO
1916: IFFALSE 2149
// begin if rand ( 0 , 1 ) then
1918: LD_INT 0
1920: PPUSH
1921: LD_INT 1
1923: PPUSH
1924: CALL_OW 12
1928: IFFALSE 2003
// begin PrepareHuman ( false , class_soldier , 7 ) ;
1930: LD_INT 0
1932: PPUSH
1933: LD_INT 1
1935: PPUSH
1936: LD_INT 7
1938: PPUSH
1939: CALL_OW 380
// un := CreateHuman ;
1943: LD_ADDR_VAR 0 3
1947: PUSH
1948: CALL_OW 44
1952: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1953: LD_VAR 0 3
1957: PPUSH
1958: LD_INT 1
1960: PPUSH
1961: CALL_OW 233
// SetClass ( un , class_bazooker ) ;
1965: LD_VAR 0 3
1969: PPUSH
1970: LD_INT 9
1972: PPUSH
1973: CALL_OW 336
// PlaceUnitArea ( un , kabulRu2Area , false ) ;
1977: LD_VAR 0 3
1981: PPUSH
1982: LD_INT 8
1984: PPUSH
1985: LD_INT 0
1987: PPUSH
1988: CALL_OW 49
// ComHold ( un ) ;
1992: LD_VAR 0 3
1996: PPUSH
1997: CALL_OW 140
// end else
2001: GO 2118
// begin vc_chassis := ru_heavy_wheeled ;
2003: LD_ADDR_OWVAR 37
2007: PUSH
2008: LD_INT 23
2010: ST_TO_ADDR
// vc_engine := engine_combustion ;
2011: LD_ADDR_OWVAR 39
2015: PUSH
2016: LD_INT 1
2018: ST_TO_ADDR
// vc_control := control_manual ;
2019: LD_ADDR_OWVAR 38
2023: PUSH
2024: LD_INT 1
2026: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
2027: LD_ADDR_OWVAR 40
2031: PUSH
2032: LD_INT 44
2034: PUSH
2035: LD_INT 43
2037: PUSH
2038: LD_INT 45
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: LIST
2045: PUSH
2046: LD_INT 1
2048: PPUSH
2049: LD_INT 3
2051: PPUSH
2052: CALL_OW 12
2056: ARRAY
2057: ST_TO_ADDR
// un := CreateVehicle ;
2058: LD_ADDR_VAR 0 3
2062: PUSH
2063: CALL_OW 45
2067: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2068: LD_VAR 0 3
2072: PPUSH
2073: LD_INT 4
2075: PPUSH
2076: CALL_OW 233
// PlaceUnitArea ( un , kabulRu2Area , false ) ;
2080: LD_VAR 0 3
2084: PPUSH
2085: LD_INT 8
2087: PPUSH
2088: LD_INT 0
2090: PPUSH
2091: CALL_OW 49
// ComHold ( un ) ;
2095: LD_VAR 0 3
2099: PPUSH
2100: CALL_OW 140
// PlaceHumanInUnit ( CreateHuman , un ) ;
2104: CALL_OW 44
2108: PPUSH
2109: LD_VAR 0 3
2113: PPUSH
2114: CALL_OW 52
// end ; kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
2118: LD_ADDR_EXP 18
2122: PUSH
2123: LD_EXP 18
2127: PPUSH
2128: LD_EXP 18
2132: PUSH
2133: LD_INT 1
2135: PLUS
2136: PPUSH
2137: LD_VAR 0 3
2141: PPUSH
2142: CALL_OW 1
2146: ST_TO_ADDR
// end ;
2147: GO 1915
2149: POP
2150: POP
// for i := 1 to 5 do
2151: LD_ADDR_VAR 0 2
2155: PUSH
2156: DOUBLE
2157: LD_INT 1
2159: DEC
2160: ST_TO_ADDR
2161: LD_INT 5
2163: PUSH
2164: FOR_TO
2165: IFFALSE 2269
// begin PrepareHuman ( false , class_soldier , 7 ) ;
2167: LD_INT 0
2169: PPUSH
2170: LD_INT 1
2172: PPUSH
2173: LD_INT 7
2175: PPUSH
2176: CALL_OW 380
// un := CreateHuman ;
2180: LD_ADDR_VAR 0 3
2184: PUSH
2185: CALL_OW 44
2189: ST_TO_ADDR
// SetDir ( un , 0 ) ;
2190: LD_VAR 0 3
2194: PPUSH
2195: LD_INT 0
2197: PPUSH
2198: CALL_OW 233
// SetClass ( un , class_bazooker ) ;
2202: LD_VAR 0 3
2206: PPUSH
2207: LD_INT 9
2209: PPUSH
2210: CALL_OW 336
// PlaceUnitArea ( un , kabulRu3Area , false ) ;
2214: LD_VAR 0 3
2218: PPUSH
2219: LD_INT 9
2221: PPUSH
2222: LD_INT 0
2224: PPUSH
2225: CALL_OW 49
// ComHold ( un ) ;
2229: LD_VAR 0 3
2233: PPUSH
2234: CALL_OW 140
// kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
2238: LD_ADDR_EXP 18
2242: PUSH
2243: LD_EXP 18
2247: PPUSH
2248: LD_EXP 18
2252: PUSH
2253: LD_INT 1
2255: PLUS
2256: PPUSH
2257: LD_VAR 0 3
2261: PPUSH
2262: CALL_OW 1
2266: ST_TO_ADDR
// end ;
2267: GO 2164
2269: POP
2270: POP
// for i := 1 to 12 do
2271: LD_ADDR_VAR 0 2
2275: PUSH
2276: DOUBLE
2277: LD_INT 1
2279: DEC
2280: ST_TO_ADDR
2281: LD_INT 12
2283: PUSH
2284: FOR_TO
2285: IFFALSE 2522
// begin if Prob ( 22 ) then
2287: LD_INT 22
2289: PPUSH
2290: CALL_OW 13
2294: IFFALSE 2357
// begin PrepareHuman ( false , class_soldier , 7 ) ;
2296: LD_INT 0
2298: PPUSH
2299: LD_INT 1
2301: PPUSH
2302: LD_INT 7
2304: PPUSH
2305: CALL_OW 380
// un := CreateHuman ;
2309: LD_ADDR_VAR 0 3
2313: PUSH
2314: CALL_OW 44
2318: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2319: LD_VAR 0 3
2323: PPUSH
2324: LD_INT 3
2326: PPUSH
2327: CALL_OW 233
// PlaceUnitArea ( un , heikeRuArea , false ) ;
2331: LD_VAR 0 3
2335: PPUSH
2336: LD_INT 4
2338: PPUSH
2339: LD_INT 0
2341: PPUSH
2342: CALL_OW 49
// ComHold ( un ) ;
2346: LD_VAR 0 3
2350: PPUSH
2351: CALL_OW 140
// end else
2355: GO 2491
// begin vc_chassis := [ ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] ;
2357: LD_ADDR_OWVAR 37
2361: PUSH
2362: LD_INT 22
2364: PUSH
2365: LD_INT 24
2367: PUSH
2368: EMPTY
2369: LIST
2370: LIST
2371: PUSH
2372: LD_INT 1
2374: PPUSH
2375: LD_INT 2
2377: PPUSH
2378: CALL_OW 12
2382: ARRAY
2383: ST_TO_ADDR
// vc_engine := engine_combustion ;
2384: LD_ADDR_OWVAR 39
2388: PUSH
2389: LD_INT 1
2391: ST_TO_ADDR
// vc_control := control_manual ;
2392: LD_ADDR_OWVAR 38
2396: PUSH
2397: LD_INT 1
2399: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
2400: LD_ADDR_OWVAR 40
2404: PUSH
2405: LD_INT 44
2407: PUSH
2408: LD_INT 43
2410: PUSH
2411: LD_INT 45
2413: PUSH
2414: EMPTY
2415: LIST
2416: LIST
2417: LIST
2418: PUSH
2419: LD_INT 1
2421: PPUSH
2422: LD_INT 3
2424: PPUSH
2425: CALL_OW 12
2429: ARRAY
2430: ST_TO_ADDR
// un := CreateVehicle ;
2431: LD_ADDR_VAR 0 3
2435: PUSH
2436: CALL_OW 45
2440: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2441: LD_VAR 0 3
2445: PPUSH
2446: LD_INT 3
2448: PPUSH
2449: CALL_OW 233
// PlaceUnitArea ( un , heikeRuArea , false ) ;
2453: LD_VAR 0 3
2457: PPUSH
2458: LD_INT 4
2460: PPUSH
2461: LD_INT 0
2463: PPUSH
2464: CALL_OW 49
// ComHold ( un ) ;
2468: LD_VAR 0 3
2472: PPUSH
2473: CALL_OW 140
// PlaceHumanInUnit ( CreateHuman , un ) ;
2477: CALL_OW 44
2481: PPUSH
2482: LD_VAR 0 3
2486: PPUSH
2487: CALL_OW 52
// end ; heikeAttackers := Replace ( heikeAttackers , heikeAttackers + 1 , un ) ;
2491: LD_ADDR_EXP 19
2495: PUSH
2496: LD_EXP 19
2500: PPUSH
2501: LD_EXP 19
2505: PUSH
2506: LD_INT 1
2508: PLUS
2509: PPUSH
2510: LD_VAR 0 3
2514: PPUSH
2515: CALL_OW 1
2519: ST_TO_ADDR
// end ;
2520: GO 2284
2522: POP
2523: POP
// end ;
2524: LD_VAR 0 1
2528: RET
// every 0 0$2 trigger startAttackOnKabul and kabulAttackers do var i ;
2529: LD_EXP 3
2533: PUSH
2534: LD_EXP 18
2538: AND
2539: IFFALSE 2599
2541: GO 2543
2543: DISABLE
2544: LD_INT 0
2546: PPUSH
// begin enable ;
2547: ENABLE
// for i in kabulAttackers do
2548: LD_ADDR_VAR 0 1
2552: PUSH
2553: LD_EXP 18
2557: PUSH
2558: FOR_IN
2559: IFFALSE 2597
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 5 ] ) , i ) ) ;
2561: LD_VAR 0 1
2565: PPUSH
2566: LD_INT 22
2568: PUSH
2569: LD_INT 5
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: PPUSH
2576: CALL_OW 69
2580: PPUSH
2581: LD_VAR 0 1
2585: PPUSH
2586: CALL_OW 74
2590: PPUSH
2591: CALL_OW 115
2595: GO 2558
2597: POP
2598: POP
// end ;
2599: PPOPN 1
2601: END
// every 0 0$2 trigger startAttackOnHeike and heikeAttackers do var i ;
2602: LD_EXP 4
2606: PUSH
2607: LD_EXP 19
2611: AND
2612: IFFALSE 2672
2614: GO 2616
2616: DISABLE
2617: LD_INT 0
2619: PPUSH
// begin enable ;
2620: ENABLE
// for i in heikeAttackers do
2621: LD_ADDR_VAR 0 1
2625: PUSH
2626: LD_EXP 19
2630: PUSH
2631: FOR_IN
2632: IFFALSE 2670
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ) ;
2634: LD_VAR 0 1
2638: PPUSH
2639: LD_INT 22
2641: PUSH
2642: LD_INT 2
2644: PUSH
2645: EMPTY
2646: LIST
2647: LIST
2648: PPUSH
2649: CALL_OW 69
2653: PPUSH
2654: LD_VAR 0 1
2658: PPUSH
2659: CALL_OW 74
2663: PPUSH
2664: CALL_OW 115
2668: GO 2631
2670: POP
2671: POP
// end ; end_of_file
2672: PPOPN 1
2674: END
// export function Action ; var i ; begin
2675: LD_INT 0
2677: PPUSH
2678: PPUSH
// Video ( true ) ;
2679: LD_INT 1
2681: PPUSH
2682: CALL 40992 0 1
// PlaceSeeing ( 111 , 168 , 2 , - 25 ) ;
2686: LD_INT 111
2688: PPUSH
2689: LD_INT 168
2691: PPUSH
2692: LD_INT 2
2694: PPUSH
2695: LD_INT 25
2697: NEG
2698: PPUSH
2699: CALL_OW 330
// PlaceSeeing ( 102 , 47 , 2 , - 40 ) ;
2703: LD_INT 102
2705: PPUSH
2706: LD_INT 47
2708: PPUSH
2709: LD_INT 2
2711: PPUSH
2712: LD_INT 40
2714: NEG
2715: PPUSH
2716: CALL_OW 330
// CenterNowOnUnits ( Heike ) ;
2720: LD_EXP 5
2724: PPUSH
2725: CALL_OW 87
// startAttackOnKabul := true ;
2729: LD_ADDR_EXP 3
2733: PUSH
2734: LD_INT 1
2736: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2737: LD_INT 70
2739: PPUSH
2740: CALL_OW 67
// CenterOnXY ( 102 , 47 ) ;
2744: LD_INT 102
2746: PPUSH
2747: LD_INT 47
2749: PPUSH
2750: CALL_OW 84
// if Givi then
2754: LD_EXP 6
2758: IFFALSE 2949
// begin ComMoveXY ( Givi , 113 , 162 ) ;
2760: LD_EXP 6
2764: PPUSH
2765: LD_INT 113
2767: PPUSH
2768: LD_INT 162
2770: PPUSH
2771: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
2775: LD_EXP 6
2779: PPUSH
2780: LD_EXP 5
2784: PPUSH
2785: CALL_OW 179
// Say ( Givi , DG-Intro-1 ) ;
2789: LD_EXP 6
2793: PPUSH
2794: LD_STRING DG-Intro-1
2796: PPUSH
2797: CALL_OW 88
// Say ( Givi , DG-Intro-2 ) ;
2801: LD_EXP 6
2805: PPUSH
2806: LD_STRING DG-Intro-2
2808: PPUSH
2809: CALL_OW 88
// CenterOnUnits ( Heike ) ;
2813: LD_EXP 5
2817: PPUSH
2818: CALL_OW 85
// RemoveSeeing ( 102 , 47 , 2 ) ;
2822: LD_INT 102
2824: PPUSH
2825: LD_INT 47
2827: PPUSH
2828: LD_INT 2
2830: PPUSH
2831: CALL_OW 331
// wait ( 0 0$0.3 ) ;
2835: LD_INT 10
2837: PPUSH
2838: CALL_OW 67
// Say ( Heike , DH-Intro-3 ) ;
2842: LD_EXP 5
2846: PPUSH
2847: LD_STRING DH-Intro-3
2849: PPUSH
2850: CALL_OW 88
// if Mike then
2854: LD_EXP 7
2858: IFFALSE 2947
// begin PlaceSeeing ( 92 , 129 , 2 , - 18 ) ;
2860: LD_INT 92
2862: PPUSH
2863: LD_INT 129
2865: PPUSH
2866: LD_INT 2
2868: PPUSH
2869: LD_INT 18
2871: NEG
2872: PPUSH
2873: CALL_OW 330
// CenterOnXY ( 92 , 129 ) ;
2877: LD_INT 92
2879: PPUSH
2880: LD_INT 129
2882: PPUSH
2883: CALL_OW 84
// ComTurnUnit ( [ Mike , Kaia ] , Heike ) ;
2887: LD_EXP 7
2891: PUSH
2892: LD_EXP 10
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: PPUSH
2901: LD_EXP 5
2905: PPUSH
2906: CALL_OW 119
// Say ( Mike , DM-Intro-4 ) ;
2910: LD_EXP 7
2914: PPUSH
2915: LD_STRING DM-Intro-4
2917: PPUSH
2918: CALL_OW 88
// Say ( Kaia , DK-Intro-5 ) ;
2922: LD_EXP 10
2926: PPUSH
2927: LD_STRING DK-Intro-5
2929: PPUSH
2930: CALL_OW 88
// RemoveSeeing ( 92 , 129 , 2 ) ;
2934: LD_INT 92
2936: PPUSH
2937: LD_INT 129
2939: PPUSH
2940: LD_INT 2
2942: PPUSH
2943: CALL_OW 331
// end ; end else
2947: GO 3202
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-1 ) then
2949: LD_EXP 16
2953: PPUSH
2954: LD_INT 26
2956: PUSH
2957: LD_INT 1
2959: PUSH
2960: EMPTY
2961: LIST
2962: LIST
2963: PPUSH
2964: CALL_OW 72
2968: PUSH
2969: LD_INT 1
2971: ARRAY
2972: PPUSH
2973: LD_STRING DArm-Intro-b-1
2975: PPUSH
2976: CALL_OW 88
2980: NOT
2981: IFFALSE 3014
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-1 ) ;
2983: LD_EXP 16
2987: PPUSH
2988: LD_INT 26
2990: PUSH
2991: LD_INT 2
2993: PUSH
2994: EMPTY
2995: LIST
2996: LIST
2997: PPUSH
2998: CALL_OW 72
3002: PUSH
3003: LD_INT 1
3005: ARRAY
3006: PPUSH
3007: LD_STRING DArf-Intro-b-1
3009: PPUSH
3010: CALL_OW 88
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-2 ) then
3014: LD_EXP 16
3018: PPUSH
3019: LD_INT 26
3021: PUSH
3022: LD_INT 1
3024: PUSH
3025: EMPTY
3026: LIST
3027: LIST
3028: PPUSH
3029: CALL_OW 72
3033: PUSH
3034: LD_INT 1
3036: ARRAY
3037: PPUSH
3038: LD_STRING DArm-Intro-b-2
3040: PPUSH
3041: CALL_OW 88
3045: NOT
3046: IFFALSE 3079
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-2 ) ;
3048: LD_EXP 16
3052: PPUSH
3053: LD_INT 26
3055: PUSH
3056: LD_INT 2
3058: PUSH
3059: EMPTY
3060: LIST
3061: LIST
3062: PPUSH
3063: CALL_OW 72
3067: PUSH
3068: LD_INT 1
3070: ARRAY
3071: PPUSH
3072: LD_STRING DArf-Intro-b-2
3074: PPUSH
3075: CALL_OW 88
// if Kaia then
3079: LD_EXP 10
3083: IFFALSE 3097
// Say ( Kaia , DK-Intro-5 ) ;
3085: LD_EXP 10
3089: PPUSH
3090: LD_STRING DK-Intro-5
3092: PPUSH
3093: CALL_OW 88
// PlaceSeeing ( 92 , 129 , 2 , - 18 ) ;
3097: LD_INT 92
3099: PPUSH
3100: LD_INT 129
3102: PPUSH
3103: LD_INT 2
3105: PPUSH
3106: LD_INT 18
3108: NEG
3109: PPUSH
3110: CALL_OW 330
// CenterOnXY ( 92 , 129 ) ;
3114: LD_INT 92
3116: PPUSH
3117: LD_INT 129
3119: PPUSH
3120: CALL_OW 84
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-4 ) then
3124: LD_EXP 16
3128: PPUSH
3129: LD_INT 26
3131: PUSH
3132: LD_INT 1
3134: PUSH
3135: EMPTY
3136: LIST
3137: LIST
3138: PPUSH
3139: CALL_OW 72
3143: PUSH
3144: LD_INT 1
3146: ARRAY
3147: PPUSH
3148: LD_STRING DArm-Intro-b-4
3150: PPUSH
3151: CALL_OW 88
3155: NOT
3156: IFFALSE 3189
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-4 ) ;
3158: LD_EXP 16
3162: PPUSH
3163: LD_INT 26
3165: PUSH
3166: LD_INT 2
3168: PUSH
3169: EMPTY
3170: LIST
3171: LIST
3172: PPUSH
3173: CALL_OW 72
3177: PUSH
3178: LD_INT 1
3180: ARRAY
3181: PPUSH
3182: LD_STRING DArf-Intro-b-4
3184: PPUSH
3185: CALL_OW 88
// RemoveSeeing ( 92 , 129 , 2 ) ;
3189: LD_INT 92
3191: PPUSH
3192: LD_INT 129
3194: PPUSH
3195: LD_INT 2
3197: PPUSH
3198: CALL_OW 331
// end ; CenterOnUnits ( Heike ) ;
3202: LD_EXP 5
3206: PPUSH
3207: CALL_OW 85
// SayRadio ( Burlak , DB-Intro-6 ) ;
3211: LD_EXP 20
3215: PPUSH
3216: LD_STRING DB-Intro-6
3218: PPUSH
3219: CALL_OW 94
// Say ( Heike , DH-Intro-7 ) ;
3223: LD_EXP 5
3227: PPUSH
3228: LD_STRING DH-Intro-7
3230: PPUSH
3231: CALL_OW 88
// SayRadio ( Burlak , DB-Intro-8 ) ;
3235: LD_EXP 20
3239: PPUSH
3240: LD_STRING DB-Intro-8
3242: PPUSH
3243: CALL_OW 94
// SayRadio ( Burlak , DB-Intro-9 ) ;
3247: LD_EXP 20
3251: PPUSH
3252: LD_STRING DB-Intro-9
3254: PPUSH
3255: CALL_OW 94
// if Givi then
3259: LD_EXP 6
3263: IFFALSE 3291
// begin Say ( Givi , DG-Intro-10 ) ;
3265: LD_EXP 6
3269: PPUSH
3270: LD_STRING DG-Intro-10
3272: PPUSH
3273: CALL_OW 88
// Say ( Kaia , DK-Intro-11 ) ;
3277: LD_EXP 10
3281: PPUSH
3282: LD_STRING DK-Intro-11
3284: PPUSH
3285: CALL_OW 88
// end else
3289: GO 3356
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-10 ) then
3291: LD_EXP 16
3295: PPUSH
3296: LD_INT 26
3298: PUSH
3299: LD_INT 1
3301: PUSH
3302: EMPTY
3303: LIST
3304: LIST
3305: PPUSH
3306: CALL_OW 72
3310: PUSH
3311: LD_INT 1
3313: ARRAY
3314: PPUSH
3315: LD_STRING DArm-Intro-b-10
3317: PPUSH
3318: CALL_OW 88
3322: NOT
3323: IFFALSE 3356
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-10 ) ;
3325: LD_EXP 16
3329: PPUSH
3330: LD_INT 26
3332: PUSH
3333: LD_INT 2
3335: PUSH
3336: EMPTY
3337: LIST
3338: LIST
3339: PPUSH
3340: CALL_OW 72
3344: PUSH
3345: LD_INT 1
3347: ARRAY
3348: PPUSH
3349: LD_STRING DArf-Intro-b-10
3351: PPUSH
3352: CALL_OW 88
// Say ( Mike , DM-Intro-12 ) ;
3356: LD_EXP 7
3360: PPUSH
3361: LD_STRING DM-Intro-12
3363: PPUSH
3364: CALL_OW 88
// Say ( Kurt , DKs-Intro-13 ) ;
3368: LD_EXP 14
3372: PPUSH
3373: LD_STRING DKs-Intro-13
3375: PPUSH
3376: CALL_OW 88
// Say ( Kamil , DKam-Intro-14 ) ;
3380: LD_EXP 9
3384: PPUSH
3385: LD_STRING DKam-Intro-14
3387: PPUSH
3388: CALL_OW 88
// case Query ( QSurrender ) of 1 :
3392: LD_STRING QSurrender
3394: PPUSH
3395: CALL_OW 97
3399: PUSH
3400: LD_INT 1
3402: DOUBLE
3403: EQUAL
3404: IFTRUE 3408
3406: GO 3427
3408: POP
// begin Say ( Heike , DH-Intro-16 ) ;
3409: LD_EXP 5
3413: PPUSH
3414: LD_STRING DH-Intro-16
3416: PPUSH
3417: CALL_OW 88
// missionEnd ;
3421: CALL 3553 0 0
// end ; 2 :
3425: GO 3471
3427: LD_INT 2
3429: DOUBLE
3430: EQUAL
3431: IFTRUE 3435
3433: GO 3470
3435: POP
// begin Say ( Heike , DH-Intro-a-16 ) ;
3436: LD_EXP 5
3440: PPUSH
3441: LD_STRING DH-Intro-a-16
3443: PPUSH
3444: CALL_OW 88
// SayRadio ( Burlak , DB-Intro-a-17 ) ;
3448: LD_EXP 20
3452: PPUSH
3453: LD_STRING DB-Intro-a-17
3455: PPUSH
3456: CALL_OW 94
// startAttackOnHeike := true ;
3460: LD_ADDR_EXP 4
3464: PUSH
3465: LD_INT 1
3467: ST_TO_ADDR
// end ; end ;
3468: GO 3471
3470: POP
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
3471: LD_ADDR_VAR 0 2
3475: PUSH
3476: LD_INT 22
3478: PUSH
3479: LD_INT 2
3481: PUSH
3482: EMPTY
3483: LIST
3484: LIST
3485: PPUSH
3486: CALL_OW 69
3490: PUSH
3491: FOR_IN
3492: IFFALSE 3511
// ComAgressiveMove ( i , 98 , 143 ) ;
3494: LD_VAR 0 2
3498: PPUSH
3499: LD_INT 98
3501: PPUSH
3502: LD_INT 143
3504: PPUSH
3505: CALL_OW 114
3509: GO 3491
3511: POP
3512: POP
// CenterOnXY ( 98 , 143 ) ;
3513: LD_INT 98
3515: PPUSH
3516: LD_INT 143
3518: PPUSH
3519: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
3523: LD_INT 35
3525: PPUSH
3526: CALL_OW 67
// until IsDead ( Heike ) ;
3530: LD_EXP 5
3534: PPUSH
3535: CALL_OW 301
3539: IFFALSE 3523
// YouLost ( HeikeNoSurrender ) ;
3541: LD_STRING HeikeNoSurrender
3543: PPUSH
3544: CALL_OW 104
// end ;
3548: LD_VAR 0 1
3552: RET
// function MissionEnd ( ) ; begin
3553: LD_INT 0
3555: PPUSH
// ChangeMap ( 1 , %_cont ) ;
3556: LD_INT 1
3558: PPUSH
3559: LD_STRING %_cont
3561: PPUSH
3562: CALL_OW 340
// end ; end_of_file
3566: LD_VAR 0 1
3570: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
3571: LD_INT 0
3573: PPUSH
3574: PPUSH
// if exist_mode then
3575: LD_VAR 0 2
3579: IFFALSE 3604
// unit := CreateCharacter ( prefix & ident ) else
3581: LD_ADDR_VAR 0 5
3585: PUSH
3586: LD_VAR 0 3
3590: PUSH
3591: LD_VAR 0 1
3595: STR
3596: PPUSH
3597: CALL_OW 34
3601: ST_TO_ADDR
3602: GO 3619
// unit := NewCharacter ( ident ) ;
3604: LD_ADDR_VAR 0 5
3608: PUSH
3609: LD_VAR 0 1
3613: PPUSH
3614: CALL_OW 25
3618: ST_TO_ADDR
// result := unit ;
3619: LD_ADDR_VAR 0 4
3623: PUSH
3624: LD_VAR 0 5
3628: ST_TO_ADDR
// end ;
3629: LD_VAR 0 4
3633: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3634: LD_INT 0
3636: PPUSH
3637: PPUSH
// if not side or not nation then
3638: LD_VAR 0 1
3642: NOT
3643: PUSH
3644: LD_VAR 0 2
3648: NOT
3649: OR
3650: IFFALSE 3654
// exit ;
3652: GO 4422
// case nation of nation_american :
3654: LD_VAR 0 2
3658: PUSH
3659: LD_INT 1
3661: DOUBLE
3662: EQUAL
3663: IFTRUE 3667
3665: GO 3881
3667: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
3668: LD_ADDR_VAR 0 4
3672: PUSH
3673: LD_INT 35
3675: PUSH
3676: LD_INT 45
3678: PUSH
3679: LD_INT 46
3681: PUSH
3682: LD_INT 47
3684: PUSH
3685: LD_INT 82
3687: PUSH
3688: LD_INT 83
3690: PUSH
3691: LD_INT 84
3693: PUSH
3694: LD_INT 85
3696: PUSH
3697: LD_INT 86
3699: PUSH
3700: LD_INT 1
3702: PUSH
3703: LD_INT 2
3705: PUSH
3706: LD_INT 6
3708: PUSH
3709: LD_INT 15
3711: PUSH
3712: LD_INT 16
3714: PUSH
3715: LD_INT 7
3717: PUSH
3718: LD_INT 12
3720: PUSH
3721: LD_INT 13
3723: PUSH
3724: LD_INT 10
3726: PUSH
3727: LD_INT 14
3729: PUSH
3730: LD_INT 20
3732: PUSH
3733: LD_INT 21
3735: PUSH
3736: LD_INT 22
3738: PUSH
3739: LD_INT 25
3741: PUSH
3742: LD_INT 32
3744: PUSH
3745: LD_INT 27
3747: PUSH
3748: LD_INT 36
3750: PUSH
3751: LD_INT 69
3753: PUSH
3754: LD_INT 39
3756: PUSH
3757: LD_INT 34
3759: PUSH
3760: LD_INT 40
3762: PUSH
3763: LD_INT 48
3765: PUSH
3766: LD_INT 49
3768: PUSH
3769: LD_INT 50
3771: PUSH
3772: LD_INT 51
3774: PUSH
3775: LD_INT 52
3777: PUSH
3778: LD_INT 53
3780: PUSH
3781: LD_INT 54
3783: PUSH
3784: LD_INT 55
3786: PUSH
3787: LD_INT 56
3789: PUSH
3790: LD_INT 57
3792: PUSH
3793: LD_INT 58
3795: PUSH
3796: LD_INT 59
3798: PUSH
3799: LD_INT 60
3801: PUSH
3802: LD_INT 61
3804: PUSH
3805: LD_INT 62
3807: PUSH
3808: LD_INT 80
3810: PUSH
3811: LD_INT 82
3813: PUSH
3814: LD_INT 83
3816: PUSH
3817: LD_INT 84
3819: PUSH
3820: LD_INT 85
3822: PUSH
3823: LD_INT 86
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: LIST
3866: LIST
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: ST_TO_ADDR
3879: GO 4346
3881: LD_INT 2
3883: DOUBLE
3884: EQUAL
3885: IFTRUE 3889
3887: GO 4115
3889: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3890: LD_ADDR_VAR 0 4
3894: PUSH
3895: LD_INT 35
3897: PUSH
3898: LD_INT 45
3900: PUSH
3901: LD_INT 46
3903: PUSH
3904: LD_INT 47
3906: PUSH
3907: LD_INT 82
3909: PUSH
3910: LD_INT 83
3912: PUSH
3913: LD_INT 84
3915: PUSH
3916: LD_INT 85
3918: PUSH
3919: LD_INT 87
3921: PUSH
3922: LD_INT 70
3924: PUSH
3925: LD_INT 1
3927: PUSH
3928: LD_INT 11
3930: PUSH
3931: LD_INT 3
3933: PUSH
3934: LD_INT 4
3936: PUSH
3937: LD_INT 5
3939: PUSH
3940: LD_INT 6
3942: PUSH
3943: LD_INT 15
3945: PUSH
3946: LD_INT 18
3948: PUSH
3949: LD_INT 7
3951: PUSH
3952: LD_INT 17
3954: PUSH
3955: LD_INT 8
3957: PUSH
3958: LD_INT 20
3960: PUSH
3961: LD_INT 21
3963: PUSH
3964: LD_INT 22
3966: PUSH
3967: LD_INT 72
3969: PUSH
3970: LD_INT 26
3972: PUSH
3973: LD_INT 69
3975: PUSH
3976: LD_INT 39
3978: PUSH
3979: LD_INT 40
3981: PUSH
3982: LD_INT 41
3984: PUSH
3985: LD_INT 42
3987: PUSH
3988: LD_INT 43
3990: PUSH
3991: LD_INT 48
3993: PUSH
3994: LD_INT 49
3996: PUSH
3997: LD_INT 50
3999: PUSH
4000: LD_INT 51
4002: PUSH
4003: LD_INT 52
4005: PUSH
4006: LD_INT 53
4008: PUSH
4009: LD_INT 54
4011: PUSH
4012: LD_INT 55
4014: PUSH
4015: LD_INT 56
4017: PUSH
4018: LD_INT 60
4020: PUSH
4021: LD_INT 61
4023: PUSH
4024: LD_INT 62
4026: PUSH
4027: LD_INT 66
4029: PUSH
4030: LD_INT 67
4032: PUSH
4033: LD_INT 68
4035: PUSH
4036: LD_INT 81
4038: PUSH
4039: LD_INT 82
4041: PUSH
4042: LD_INT 83
4044: PUSH
4045: LD_INT 84
4047: PUSH
4048: LD_INT 85
4050: PUSH
4051: LD_INT 87
4053: PUSH
4054: LD_INT 88
4056: PUSH
4057: EMPTY
4058: LIST
4059: LIST
4060: LIST
4061: LIST
4062: LIST
4063: LIST
4064: LIST
4065: LIST
4066: LIST
4067: LIST
4068: LIST
4069: LIST
4070: LIST
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: LIST
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: LIST
4090: LIST
4091: LIST
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: LIST
4097: LIST
4098: LIST
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: LIST
4104: LIST
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: LIST
4110: LIST
4111: LIST
4112: ST_TO_ADDR
4113: GO 4346
4115: LD_INT 3
4117: DOUBLE
4118: EQUAL
4119: IFTRUE 4123
4121: GO 4345
4123: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
4124: LD_ADDR_VAR 0 4
4128: PUSH
4129: LD_INT 46
4131: PUSH
4132: LD_INT 47
4134: PUSH
4135: LD_INT 1
4137: PUSH
4138: LD_INT 2
4140: PUSH
4141: LD_INT 82
4143: PUSH
4144: LD_INT 83
4146: PUSH
4147: LD_INT 84
4149: PUSH
4150: LD_INT 85
4152: PUSH
4153: LD_INT 86
4155: PUSH
4156: LD_INT 11
4158: PUSH
4159: LD_INT 9
4161: PUSH
4162: LD_INT 20
4164: PUSH
4165: LD_INT 19
4167: PUSH
4168: LD_INT 21
4170: PUSH
4171: LD_INT 24
4173: PUSH
4174: LD_INT 22
4176: PUSH
4177: LD_INT 25
4179: PUSH
4180: LD_INT 28
4182: PUSH
4183: LD_INT 29
4185: PUSH
4186: LD_INT 30
4188: PUSH
4189: LD_INT 31
4191: PUSH
4192: LD_INT 37
4194: PUSH
4195: LD_INT 38
4197: PUSH
4198: LD_INT 32
4200: PUSH
4201: LD_INT 27
4203: PUSH
4204: LD_INT 33
4206: PUSH
4207: LD_INT 69
4209: PUSH
4210: LD_INT 39
4212: PUSH
4213: LD_INT 34
4215: PUSH
4216: LD_INT 40
4218: PUSH
4219: LD_INT 71
4221: PUSH
4222: LD_INT 23
4224: PUSH
4225: LD_INT 44
4227: PUSH
4228: LD_INT 48
4230: PUSH
4231: LD_INT 49
4233: PUSH
4234: LD_INT 50
4236: PUSH
4237: LD_INT 51
4239: PUSH
4240: LD_INT 52
4242: PUSH
4243: LD_INT 53
4245: PUSH
4246: LD_INT 54
4248: PUSH
4249: LD_INT 55
4251: PUSH
4252: LD_INT 56
4254: PUSH
4255: LD_INT 57
4257: PUSH
4258: LD_INT 58
4260: PUSH
4261: LD_INT 59
4263: PUSH
4264: LD_INT 63
4266: PUSH
4267: LD_INT 64
4269: PUSH
4270: LD_INT 65
4272: PUSH
4273: LD_INT 82
4275: PUSH
4276: LD_INT 83
4278: PUSH
4279: LD_INT 84
4281: PUSH
4282: LD_INT 85
4284: PUSH
4285: LD_INT 86
4287: PUSH
4288: EMPTY
4289: LIST
4290: LIST
4291: LIST
4292: LIST
4293: LIST
4294: LIST
4295: LIST
4296: LIST
4297: LIST
4298: LIST
4299: LIST
4300: LIST
4301: LIST
4302: LIST
4303: LIST
4304: LIST
4305: LIST
4306: LIST
4307: LIST
4308: LIST
4309: LIST
4310: LIST
4311: LIST
4312: LIST
4313: LIST
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: LIST
4322: LIST
4323: LIST
4324: LIST
4325: LIST
4326: LIST
4327: LIST
4328: LIST
4329: LIST
4330: LIST
4331: LIST
4332: LIST
4333: LIST
4334: LIST
4335: LIST
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: LIST
4341: LIST
4342: ST_TO_ADDR
4343: GO 4346
4345: POP
// if state > - 1 and state < 3 then
4346: LD_VAR 0 3
4350: PUSH
4351: LD_INT 1
4353: NEG
4354: GREATER
4355: PUSH
4356: LD_VAR 0 3
4360: PUSH
4361: LD_INT 3
4363: LESS
4364: AND
4365: IFFALSE 4422
// for i in result do
4367: LD_ADDR_VAR 0 5
4371: PUSH
4372: LD_VAR 0 4
4376: PUSH
4377: FOR_IN
4378: IFFALSE 4420
// if GetTech ( i , side ) <> state then
4380: LD_VAR 0 5
4384: PPUSH
4385: LD_VAR 0 1
4389: PPUSH
4390: CALL_OW 321
4394: PUSH
4395: LD_VAR 0 3
4399: NONEQUAL
4400: IFFALSE 4418
// result := result diff i ;
4402: LD_ADDR_VAR 0 4
4406: PUSH
4407: LD_VAR 0 4
4411: PUSH
4412: LD_VAR 0 5
4416: DIFF
4417: ST_TO_ADDR
4418: GO 4377
4420: POP
4421: POP
// end ;
4422: LD_VAR 0 4
4426: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
4427: LD_INT 0
4429: PPUSH
4430: PPUSH
4431: PPUSH
// result := true ;
4432: LD_ADDR_VAR 0 3
4436: PUSH
4437: LD_INT 1
4439: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
4440: LD_ADDR_VAR 0 5
4444: PUSH
4445: LD_VAR 0 2
4449: PPUSH
4450: CALL_OW 480
4454: ST_TO_ADDR
// if not tmp then
4455: LD_VAR 0 5
4459: NOT
4460: IFFALSE 4464
// exit ;
4462: GO 4513
// for i in tmp do
4464: LD_ADDR_VAR 0 4
4468: PUSH
4469: LD_VAR 0 5
4473: PUSH
4474: FOR_IN
4475: IFFALSE 4511
// if GetTech ( i , side ) <> state_researched then
4477: LD_VAR 0 4
4481: PPUSH
4482: LD_VAR 0 1
4486: PPUSH
4487: CALL_OW 321
4491: PUSH
4492: LD_INT 2
4494: NONEQUAL
4495: IFFALSE 4509
// begin result := false ;
4497: LD_ADDR_VAR 0 3
4501: PUSH
4502: LD_INT 0
4504: ST_TO_ADDR
// exit ;
4505: POP
4506: POP
4507: GO 4513
// end ;
4509: GO 4474
4511: POP
4512: POP
// end ;
4513: LD_VAR 0 3
4517: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
4518: LD_INT 0
4520: PPUSH
4521: PPUSH
4522: PPUSH
4523: PPUSH
4524: PPUSH
4525: PPUSH
4526: PPUSH
4527: PPUSH
4528: PPUSH
4529: PPUSH
4530: PPUSH
4531: PPUSH
4532: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
4533: LD_VAR 0 1
4537: NOT
4538: PUSH
4539: LD_VAR 0 1
4543: PPUSH
4544: CALL_OW 257
4548: PUSH
4549: LD_INT 9
4551: NONEQUAL
4552: OR
4553: IFFALSE 4557
// exit ;
4555: GO 5130
// side := GetSide ( unit ) ;
4557: LD_ADDR_VAR 0 9
4561: PUSH
4562: LD_VAR 0 1
4566: PPUSH
4567: CALL_OW 255
4571: ST_TO_ADDR
// tech_space := tech_spacanom ;
4572: LD_ADDR_VAR 0 12
4576: PUSH
4577: LD_INT 29
4579: ST_TO_ADDR
// tech_time := tech_taurad ;
4580: LD_ADDR_VAR 0 13
4584: PUSH
4585: LD_INT 28
4587: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4588: LD_ADDR_VAR 0 11
4592: PUSH
4593: LD_VAR 0 1
4597: PPUSH
4598: CALL_OW 310
4602: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4603: LD_VAR 0 11
4607: PPUSH
4608: CALL_OW 247
4612: PUSH
4613: LD_INT 2
4615: EQUAL
4616: IFFALSE 4620
// exit ;
4618: GO 5130
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4620: LD_ADDR_VAR 0 8
4624: PUSH
4625: LD_INT 81
4627: PUSH
4628: LD_VAR 0 9
4632: PUSH
4633: EMPTY
4634: LIST
4635: LIST
4636: PUSH
4637: LD_INT 3
4639: PUSH
4640: LD_INT 21
4642: PUSH
4643: LD_INT 3
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: PUSH
4650: EMPTY
4651: LIST
4652: LIST
4653: PUSH
4654: EMPTY
4655: LIST
4656: LIST
4657: PPUSH
4658: CALL_OW 69
4662: ST_TO_ADDR
// if not tmp then
4663: LD_VAR 0 8
4667: NOT
4668: IFFALSE 4672
// exit ;
4670: GO 5130
// if in_unit then
4672: LD_VAR 0 11
4676: IFFALSE 4700
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4678: LD_ADDR_VAR 0 10
4682: PUSH
4683: LD_VAR 0 8
4687: PPUSH
4688: LD_VAR 0 11
4692: PPUSH
4693: CALL_OW 74
4697: ST_TO_ADDR
4698: GO 4720
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4700: LD_ADDR_VAR 0 10
4704: PUSH
4705: LD_VAR 0 8
4709: PPUSH
4710: LD_VAR 0 1
4714: PPUSH
4715: CALL_OW 74
4719: ST_TO_ADDR
// if not enemy then
4720: LD_VAR 0 10
4724: NOT
4725: IFFALSE 4729
// exit ;
4727: GO 5130
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4729: LD_VAR 0 11
4733: PUSH
4734: LD_VAR 0 11
4738: PPUSH
4739: LD_VAR 0 10
4743: PPUSH
4744: CALL_OW 296
4748: PUSH
4749: LD_INT 13
4751: GREATER
4752: AND
4753: PUSH
4754: LD_VAR 0 1
4758: PPUSH
4759: LD_VAR 0 10
4763: PPUSH
4764: CALL_OW 296
4768: PUSH
4769: LD_INT 12
4771: GREATER
4772: OR
4773: IFFALSE 4777
// exit ;
4775: GO 5130
// missile := [ 1 ] ;
4777: LD_ADDR_VAR 0 14
4781: PUSH
4782: LD_INT 1
4784: PUSH
4785: EMPTY
4786: LIST
4787: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4788: LD_VAR 0 9
4792: PPUSH
4793: LD_VAR 0 12
4797: PPUSH
4798: CALL_OW 325
4802: IFFALSE 4831
// missile := Replace ( missile , missile + 1 , 2 ) ;
4804: LD_ADDR_VAR 0 14
4808: PUSH
4809: LD_VAR 0 14
4813: PPUSH
4814: LD_VAR 0 14
4818: PUSH
4819: LD_INT 1
4821: PLUS
4822: PPUSH
4823: LD_INT 2
4825: PPUSH
4826: CALL_OW 1
4830: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4831: LD_VAR 0 9
4835: PPUSH
4836: LD_VAR 0 13
4840: PPUSH
4841: CALL_OW 325
4845: PUSH
4846: LD_VAR 0 10
4850: PPUSH
4851: CALL_OW 255
4855: PPUSH
4856: LD_VAR 0 13
4860: PPUSH
4861: CALL_OW 325
4865: NOT
4866: AND
4867: IFFALSE 4896
// missile := Replace ( missile , missile + 1 , 3 ) ;
4869: LD_ADDR_VAR 0 14
4873: PUSH
4874: LD_VAR 0 14
4878: PPUSH
4879: LD_VAR 0 14
4883: PUSH
4884: LD_INT 1
4886: PLUS
4887: PPUSH
4888: LD_INT 3
4890: PPUSH
4891: CALL_OW 1
4895: ST_TO_ADDR
// if missile < 2 then
4896: LD_VAR 0 14
4900: PUSH
4901: LD_INT 2
4903: LESS
4904: IFFALSE 4908
// exit ;
4906: GO 5130
// x := GetX ( enemy ) ;
4908: LD_ADDR_VAR 0 4
4912: PUSH
4913: LD_VAR 0 10
4917: PPUSH
4918: CALL_OW 250
4922: ST_TO_ADDR
// y := GetY ( enemy ) ;
4923: LD_ADDR_VAR 0 5
4927: PUSH
4928: LD_VAR 0 10
4932: PPUSH
4933: CALL_OW 251
4937: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4938: LD_ADDR_VAR 0 6
4942: PUSH
4943: LD_VAR 0 4
4947: PUSH
4948: LD_INT 1
4950: NEG
4951: PPUSH
4952: LD_INT 1
4954: PPUSH
4955: CALL_OW 12
4959: PLUS
4960: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4961: LD_ADDR_VAR 0 7
4965: PUSH
4966: LD_VAR 0 5
4970: PUSH
4971: LD_INT 1
4973: NEG
4974: PPUSH
4975: LD_INT 1
4977: PPUSH
4978: CALL_OW 12
4982: PLUS
4983: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4984: LD_VAR 0 6
4988: PPUSH
4989: LD_VAR 0 7
4993: PPUSH
4994: CALL_OW 488
4998: NOT
4999: IFFALSE 5021
// begin _x := x ;
5001: LD_ADDR_VAR 0 6
5005: PUSH
5006: LD_VAR 0 4
5010: ST_TO_ADDR
// _y := y ;
5011: LD_ADDR_VAR 0 7
5015: PUSH
5016: LD_VAR 0 5
5020: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
5021: LD_ADDR_VAR 0 3
5025: PUSH
5026: LD_INT 1
5028: PPUSH
5029: LD_VAR 0 14
5033: PPUSH
5034: CALL_OW 12
5038: ST_TO_ADDR
// case i of 1 :
5039: LD_VAR 0 3
5043: PUSH
5044: LD_INT 1
5046: DOUBLE
5047: EQUAL
5048: IFTRUE 5052
5050: GO 5069
5052: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
5053: LD_VAR 0 1
5057: PPUSH
5058: LD_VAR 0 10
5062: PPUSH
5063: CALL_OW 115
5067: GO 5130
5069: LD_INT 2
5071: DOUBLE
5072: EQUAL
5073: IFTRUE 5077
5075: GO 5099
5077: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
5078: LD_VAR 0 1
5082: PPUSH
5083: LD_VAR 0 6
5087: PPUSH
5088: LD_VAR 0 7
5092: PPUSH
5093: CALL_OW 153
5097: GO 5130
5099: LD_INT 3
5101: DOUBLE
5102: EQUAL
5103: IFTRUE 5107
5105: GO 5129
5107: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
5108: LD_VAR 0 1
5112: PPUSH
5113: LD_VAR 0 6
5117: PPUSH
5118: LD_VAR 0 7
5122: PPUSH
5123: CALL_OW 154
5127: GO 5130
5129: POP
// end ;
5130: LD_VAR 0 2
5134: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
5135: LD_INT 0
5137: PPUSH
5138: PPUSH
5139: PPUSH
5140: PPUSH
5141: PPUSH
5142: PPUSH
// if not unit or not building then
5143: LD_VAR 0 1
5147: NOT
5148: PUSH
5149: LD_VAR 0 2
5153: NOT
5154: OR
5155: IFFALSE 5159
// exit ;
5157: GO 5317
// x := GetX ( building ) ;
5159: LD_ADDR_VAR 0 5
5163: PUSH
5164: LD_VAR 0 2
5168: PPUSH
5169: CALL_OW 250
5173: ST_TO_ADDR
// y := GetY ( building ) ;
5174: LD_ADDR_VAR 0 6
5178: PUSH
5179: LD_VAR 0 2
5183: PPUSH
5184: CALL_OW 251
5188: ST_TO_ADDR
// for i = 0 to 5 do
5189: LD_ADDR_VAR 0 4
5193: PUSH
5194: DOUBLE
5195: LD_INT 0
5197: DEC
5198: ST_TO_ADDR
5199: LD_INT 5
5201: PUSH
5202: FOR_TO
5203: IFFALSE 5315
// begin _x := ShiftX ( x , i , 3 ) ;
5205: LD_ADDR_VAR 0 7
5209: PUSH
5210: LD_VAR 0 5
5214: PPUSH
5215: LD_VAR 0 4
5219: PPUSH
5220: LD_INT 3
5222: PPUSH
5223: CALL_OW 272
5227: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
5228: LD_ADDR_VAR 0 8
5232: PUSH
5233: LD_VAR 0 6
5237: PPUSH
5238: LD_VAR 0 4
5242: PPUSH
5243: LD_INT 3
5245: PPUSH
5246: CALL_OW 273
5250: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5251: LD_VAR 0 7
5255: PPUSH
5256: LD_VAR 0 8
5260: PPUSH
5261: CALL_OW 488
5265: NOT
5266: IFFALSE 5270
// continue ;
5268: GO 5202
// if HexInfo ( _x , _y ) = 0 then
5270: LD_VAR 0 7
5274: PPUSH
5275: LD_VAR 0 8
5279: PPUSH
5280: CALL_OW 428
5284: PUSH
5285: LD_INT 0
5287: EQUAL
5288: IFFALSE 5313
// begin ComMoveXY ( unit , _x , _y ) ;
5290: LD_VAR 0 1
5294: PPUSH
5295: LD_VAR 0 7
5299: PPUSH
5300: LD_VAR 0 8
5304: PPUSH
5305: CALL_OW 111
// exit ;
5309: POP
5310: POP
5311: GO 5317
// end ; end ;
5313: GO 5202
5315: POP
5316: POP
// end ;
5317: LD_VAR 0 3
5321: RET
// export function ScanBase ( side , base_area ) ; begin
5322: LD_INT 0
5324: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
5325: LD_ADDR_VAR 0 3
5329: PUSH
5330: LD_VAR 0 2
5334: PPUSH
5335: LD_INT 81
5337: PUSH
5338: LD_VAR 0 1
5342: PUSH
5343: EMPTY
5344: LIST
5345: LIST
5346: PPUSH
5347: CALL_OW 70
5351: ST_TO_ADDR
// end ;
5352: LD_VAR 0 3
5356: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
5357: LD_INT 0
5359: PPUSH
5360: PPUSH
5361: PPUSH
5362: PPUSH
// result := false ;
5363: LD_ADDR_VAR 0 2
5367: PUSH
5368: LD_INT 0
5370: ST_TO_ADDR
// side := GetSide ( unit ) ;
5371: LD_ADDR_VAR 0 3
5375: PUSH
5376: LD_VAR 0 1
5380: PPUSH
5381: CALL_OW 255
5385: ST_TO_ADDR
// nat := GetNation ( unit ) ;
5386: LD_ADDR_VAR 0 4
5390: PUSH
5391: LD_VAR 0 1
5395: PPUSH
5396: CALL_OW 248
5400: ST_TO_ADDR
// case nat of 1 :
5401: LD_VAR 0 4
5405: PUSH
5406: LD_INT 1
5408: DOUBLE
5409: EQUAL
5410: IFTRUE 5414
5412: GO 5425
5414: POP
// tech := tech_lassight ; 2 :
5415: LD_ADDR_VAR 0 5
5419: PUSH
5420: LD_INT 12
5422: ST_TO_ADDR
5423: GO 5464
5425: LD_INT 2
5427: DOUBLE
5428: EQUAL
5429: IFTRUE 5433
5431: GO 5444
5433: POP
// tech := tech_mortar ; 3 :
5434: LD_ADDR_VAR 0 5
5438: PUSH
5439: LD_INT 41
5441: ST_TO_ADDR
5442: GO 5464
5444: LD_INT 3
5446: DOUBLE
5447: EQUAL
5448: IFTRUE 5452
5450: GO 5463
5452: POP
// tech := tech_bazooka ; end ;
5453: LD_ADDR_VAR 0 5
5457: PUSH
5458: LD_INT 44
5460: ST_TO_ADDR
5461: GO 5464
5463: POP
// if Researched ( side , tech ) then
5464: LD_VAR 0 3
5468: PPUSH
5469: LD_VAR 0 5
5473: PPUSH
5474: CALL_OW 325
5478: IFFALSE 5505
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
5480: LD_ADDR_VAR 0 2
5484: PUSH
5485: LD_INT 5
5487: PUSH
5488: LD_INT 8
5490: PUSH
5491: LD_INT 9
5493: PUSH
5494: EMPTY
5495: LIST
5496: LIST
5497: LIST
5498: PUSH
5499: LD_VAR 0 4
5503: ARRAY
5504: ST_TO_ADDR
// end ;
5505: LD_VAR 0 2
5509: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
5510: LD_INT 0
5512: PPUSH
5513: PPUSH
5514: PPUSH
// if not mines then
5515: LD_VAR 0 2
5519: NOT
5520: IFFALSE 5524
// exit ;
5522: GO 5668
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5524: LD_ADDR_VAR 0 5
5528: PUSH
5529: LD_INT 81
5531: PUSH
5532: LD_VAR 0 1
5536: PUSH
5537: EMPTY
5538: LIST
5539: LIST
5540: PUSH
5541: LD_INT 3
5543: PUSH
5544: LD_INT 21
5546: PUSH
5547: LD_INT 3
5549: PUSH
5550: EMPTY
5551: LIST
5552: LIST
5553: PUSH
5554: EMPTY
5555: LIST
5556: LIST
5557: PUSH
5558: EMPTY
5559: LIST
5560: LIST
5561: PPUSH
5562: CALL_OW 69
5566: ST_TO_ADDR
// for i in mines do
5567: LD_ADDR_VAR 0 4
5571: PUSH
5572: LD_VAR 0 2
5576: PUSH
5577: FOR_IN
5578: IFFALSE 5666
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5580: LD_VAR 0 4
5584: PUSH
5585: LD_INT 1
5587: ARRAY
5588: PPUSH
5589: LD_VAR 0 4
5593: PUSH
5594: LD_INT 2
5596: ARRAY
5597: PPUSH
5598: CALL_OW 458
5602: NOT
5603: IFFALSE 5607
// continue ;
5605: GO 5577
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5607: LD_VAR 0 4
5611: PUSH
5612: LD_INT 1
5614: ARRAY
5615: PPUSH
5616: LD_VAR 0 4
5620: PUSH
5621: LD_INT 2
5623: ARRAY
5624: PPUSH
5625: CALL_OW 428
5629: PUSH
5630: LD_VAR 0 5
5634: IN
5635: IFFALSE 5664
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5637: LD_VAR 0 4
5641: PUSH
5642: LD_INT 1
5644: ARRAY
5645: PPUSH
5646: LD_VAR 0 4
5650: PUSH
5651: LD_INT 2
5653: ARRAY
5654: PPUSH
5655: LD_VAR 0 1
5659: PPUSH
5660: CALL_OW 456
// end ;
5664: GO 5577
5666: POP
5667: POP
// end ;
5668: LD_VAR 0 3
5672: RET
// export function Count ( array ) ; var i ; begin
5673: LD_INT 0
5675: PPUSH
5676: PPUSH
// result := 0 ;
5677: LD_ADDR_VAR 0 2
5681: PUSH
5682: LD_INT 0
5684: ST_TO_ADDR
// for i in array do
5685: LD_ADDR_VAR 0 3
5689: PUSH
5690: LD_VAR 0 1
5694: PUSH
5695: FOR_IN
5696: IFFALSE 5720
// if i then
5698: LD_VAR 0 3
5702: IFFALSE 5718
// result := result + 1 ;
5704: LD_ADDR_VAR 0 2
5708: PUSH
5709: LD_VAR 0 2
5713: PUSH
5714: LD_INT 1
5716: PLUS
5717: ST_TO_ADDR
5718: GO 5695
5720: POP
5721: POP
// end ;
5722: LD_VAR 0 2
5726: RET
// export function IsEmpty ( building ) ; begin
5727: LD_INT 0
5729: PPUSH
// if not building then
5730: LD_VAR 0 1
5734: NOT
5735: IFFALSE 5739
// exit ;
5737: GO 5782
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5739: LD_ADDR_VAR 0 2
5743: PUSH
5744: LD_VAR 0 1
5748: PUSH
5749: LD_INT 22
5751: PUSH
5752: LD_VAR 0 1
5756: PPUSH
5757: CALL_OW 255
5761: PUSH
5762: EMPTY
5763: LIST
5764: LIST
5765: PUSH
5766: LD_INT 58
5768: PUSH
5769: EMPTY
5770: LIST
5771: PUSH
5772: EMPTY
5773: LIST
5774: LIST
5775: PPUSH
5776: CALL_OW 69
5780: IN
5781: ST_TO_ADDR
// end ;
5782: LD_VAR 0 2
5786: RET
// export function IsNotFull ( building ) ; var places ; begin
5787: LD_INT 0
5789: PPUSH
5790: PPUSH
// if not building then
5791: LD_VAR 0 1
5795: NOT
5796: IFFALSE 5800
// exit ;
5798: GO 5971
// result := false ;
5800: LD_ADDR_VAR 0 2
5804: PUSH
5805: LD_INT 0
5807: ST_TO_ADDR
// places := 0 ;
5808: LD_ADDR_VAR 0 3
5812: PUSH
5813: LD_INT 0
5815: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
5816: LD_VAR 0 1
5820: PPUSH
5821: CALL_OW 266
5825: PUSH
5826: LD_INT 0
5828: DOUBLE
5829: EQUAL
5830: IFTRUE 5888
5832: LD_INT 1
5834: DOUBLE
5835: EQUAL
5836: IFTRUE 5888
5838: LD_INT 6
5840: DOUBLE
5841: EQUAL
5842: IFTRUE 5888
5844: LD_INT 7
5846: DOUBLE
5847: EQUAL
5848: IFTRUE 5888
5850: LD_INT 8
5852: DOUBLE
5853: EQUAL
5854: IFTRUE 5888
5856: LD_INT 4
5858: DOUBLE
5859: EQUAL
5860: IFTRUE 5888
5862: LD_INT 5
5864: DOUBLE
5865: EQUAL
5866: IFTRUE 5888
5868: LD_INT 2
5870: DOUBLE
5871: EQUAL
5872: IFTRUE 5888
5874: LD_INT 3
5876: DOUBLE
5877: EQUAL
5878: IFTRUE 5888
5880: LD_INT 35
5882: DOUBLE
5883: EQUAL
5884: IFTRUE 5888
5886: GO 5899
5888: POP
// places := 6 ; b_bunker , b_breastwork :
5889: LD_ADDR_VAR 0 3
5893: PUSH
5894: LD_INT 6
5896: ST_TO_ADDR
5897: GO 5944
5899: LD_INT 32
5901: DOUBLE
5902: EQUAL
5903: IFTRUE 5913
5905: LD_INT 31
5907: DOUBLE
5908: EQUAL
5909: IFTRUE 5913
5911: GO 5924
5913: POP
// places := 1 ; b_control_tower :
5914: LD_ADDR_VAR 0 3
5918: PUSH
5919: LD_INT 1
5921: ST_TO_ADDR
5922: GO 5944
5924: LD_INT 36
5926: DOUBLE
5927: EQUAL
5928: IFTRUE 5932
5930: GO 5943
5932: POP
// places := 3 ; end ;
5933: LD_ADDR_VAR 0 3
5937: PUSH
5938: LD_INT 3
5940: ST_TO_ADDR
5941: GO 5944
5943: POP
// if places then
5944: LD_VAR 0 3
5948: IFFALSE 5971
// result := UnitsInside ( building ) < places ;
5950: LD_ADDR_VAR 0 2
5954: PUSH
5955: LD_VAR 0 1
5959: PPUSH
5960: CALL_OW 313
5964: PUSH
5965: LD_VAR 0 3
5969: LESS
5970: ST_TO_ADDR
// end ;
5971: LD_VAR 0 2
5975: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5976: LD_INT 0
5978: PPUSH
5979: PPUSH
5980: PPUSH
5981: PPUSH
// tmp := [ ] ;
5982: LD_ADDR_VAR 0 3
5986: PUSH
5987: EMPTY
5988: ST_TO_ADDR
// list := [ ] ;
5989: LD_ADDR_VAR 0 5
5993: PUSH
5994: EMPTY
5995: ST_TO_ADDR
// for i = 16 to 25 do
5996: LD_ADDR_VAR 0 4
6000: PUSH
6001: DOUBLE
6002: LD_INT 16
6004: DEC
6005: ST_TO_ADDR
6006: LD_INT 25
6008: PUSH
6009: FOR_TO
6010: IFFALSE 6083
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
6012: LD_ADDR_VAR 0 3
6016: PUSH
6017: LD_VAR 0 3
6021: PUSH
6022: LD_INT 22
6024: PUSH
6025: LD_VAR 0 1
6029: PPUSH
6030: CALL_OW 255
6034: PUSH
6035: EMPTY
6036: LIST
6037: LIST
6038: PUSH
6039: LD_INT 91
6041: PUSH
6042: LD_VAR 0 1
6046: PUSH
6047: LD_INT 6
6049: PUSH
6050: EMPTY
6051: LIST
6052: LIST
6053: LIST
6054: PUSH
6055: LD_INT 30
6057: PUSH
6058: LD_VAR 0 4
6062: PUSH
6063: EMPTY
6064: LIST
6065: LIST
6066: PUSH
6067: EMPTY
6068: LIST
6069: LIST
6070: LIST
6071: PUSH
6072: EMPTY
6073: LIST
6074: PPUSH
6075: CALL_OW 69
6079: ADD
6080: ST_TO_ADDR
6081: GO 6009
6083: POP
6084: POP
// for i = 1 to tmp do
6085: LD_ADDR_VAR 0 4
6089: PUSH
6090: DOUBLE
6091: LD_INT 1
6093: DEC
6094: ST_TO_ADDR
6095: LD_VAR 0 3
6099: PUSH
6100: FOR_TO
6101: IFFALSE 6189
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
6103: LD_ADDR_VAR 0 5
6107: PUSH
6108: LD_VAR 0 5
6112: PUSH
6113: LD_VAR 0 3
6117: PUSH
6118: LD_VAR 0 4
6122: ARRAY
6123: PPUSH
6124: CALL_OW 266
6128: PUSH
6129: LD_VAR 0 3
6133: PUSH
6134: LD_VAR 0 4
6138: ARRAY
6139: PPUSH
6140: CALL_OW 250
6144: PUSH
6145: LD_VAR 0 3
6149: PUSH
6150: LD_VAR 0 4
6154: ARRAY
6155: PPUSH
6156: CALL_OW 251
6160: PUSH
6161: LD_VAR 0 3
6165: PUSH
6166: LD_VAR 0 4
6170: ARRAY
6171: PPUSH
6172: CALL_OW 254
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: PUSH
6183: EMPTY
6184: LIST
6185: ADD
6186: ST_TO_ADDR
6187: GO 6100
6189: POP
6190: POP
// result := list ;
6191: LD_ADDR_VAR 0 2
6195: PUSH
6196: LD_VAR 0 5
6200: ST_TO_ADDR
// end ;
6201: LD_VAR 0 2
6205: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
6206: LD_INT 0
6208: PPUSH
6209: PPUSH
6210: PPUSH
6211: PPUSH
6212: PPUSH
6213: PPUSH
6214: PPUSH
// if not factory then
6215: LD_VAR 0 1
6219: NOT
6220: IFFALSE 6224
// exit ;
6222: GO 6817
// if control = control_apeman then
6224: LD_VAR 0 4
6228: PUSH
6229: LD_INT 5
6231: EQUAL
6232: IFFALSE 6341
// begin tmp := UnitsInside ( factory ) ;
6234: LD_ADDR_VAR 0 8
6238: PUSH
6239: LD_VAR 0 1
6243: PPUSH
6244: CALL_OW 313
6248: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
6249: LD_VAR 0 8
6253: PPUSH
6254: LD_INT 25
6256: PUSH
6257: LD_INT 12
6259: PUSH
6260: EMPTY
6261: LIST
6262: LIST
6263: PPUSH
6264: CALL_OW 72
6268: NOT
6269: IFFALSE 6279
// control := control_manual ;
6271: LD_ADDR_VAR 0 4
6275: PUSH
6276: LD_INT 1
6278: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
6279: LD_ADDR_VAR 0 8
6283: PUSH
6284: LD_VAR 0 1
6288: PPUSH
6289: CALL 5976 0 1
6293: ST_TO_ADDR
// if tmp then
6294: LD_VAR 0 8
6298: IFFALSE 6341
// begin for i in tmp do
6300: LD_ADDR_VAR 0 7
6304: PUSH
6305: LD_VAR 0 8
6309: PUSH
6310: FOR_IN
6311: IFFALSE 6339
// if i [ 1 ] = b_ext_radio then
6313: LD_VAR 0 7
6317: PUSH
6318: LD_INT 1
6320: ARRAY
6321: PUSH
6322: LD_INT 22
6324: EQUAL
6325: IFFALSE 6337
// begin control := control_remote ;
6327: LD_ADDR_VAR 0 4
6331: PUSH
6332: LD_INT 2
6334: ST_TO_ADDR
// break ;
6335: GO 6339
// end ;
6337: GO 6310
6339: POP
6340: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6341: LD_VAR 0 1
6345: PPUSH
6346: LD_VAR 0 2
6350: PPUSH
6351: LD_VAR 0 3
6355: PPUSH
6356: LD_VAR 0 4
6360: PPUSH
6361: LD_VAR 0 5
6365: PPUSH
6366: CALL_OW 448
6370: IFFALSE 6405
// begin result := [ chassis , engine , control , weapon ] ;
6372: LD_ADDR_VAR 0 6
6376: PUSH
6377: LD_VAR 0 2
6381: PUSH
6382: LD_VAR 0 3
6386: PUSH
6387: LD_VAR 0 4
6391: PUSH
6392: LD_VAR 0 5
6396: PUSH
6397: EMPTY
6398: LIST
6399: LIST
6400: LIST
6401: LIST
6402: ST_TO_ADDR
// exit ;
6403: GO 6817
// end ; _chassis := AvailableChassisList ( factory ) ;
6405: LD_ADDR_VAR 0 9
6409: PUSH
6410: LD_VAR 0 1
6414: PPUSH
6415: CALL_OW 475
6419: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
6420: LD_ADDR_VAR 0 11
6424: PUSH
6425: LD_VAR 0 1
6429: PPUSH
6430: CALL_OW 476
6434: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
6435: LD_ADDR_VAR 0 12
6439: PUSH
6440: LD_VAR 0 1
6444: PPUSH
6445: CALL_OW 477
6449: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
6450: LD_ADDR_VAR 0 10
6454: PUSH
6455: LD_VAR 0 1
6459: PPUSH
6460: CALL_OW 478
6464: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
6465: LD_VAR 0 9
6469: NOT
6470: PUSH
6471: LD_VAR 0 11
6475: NOT
6476: OR
6477: PUSH
6478: LD_VAR 0 12
6482: NOT
6483: OR
6484: PUSH
6485: LD_VAR 0 10
6489: NOT
6490: OR
6491: IFFALSE 6526
// begin result := [ chassis , engine , control , weapon ] ;
6493: LD_ADDR_VAR 0 6
6497: PUSH
6498: LD_VAR 0 2
6502: PUSH
6503: LD_VAR 0 3
6507: PUSH
6508: LD_VAR 0 4
6512: PUSH
6513: LD_VAR 0 5
6517: PUSH
6518: EMPTY
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: ST_TO_ADDR
// exit ;
6524: GO 6817
// end ; if not chassis in _chassis then
6526: LD_VAR 0 2
6530: PUSH
6531: LD_VAR 0 9
6535: IN
6536: NOT
6537: IFFALSE 6563
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
6539: LD_ADDR_VAR 0 2
6543: PUSH
6544: LD_VAR 0 9
6548: PUSH
6549: LD_INT 1
6551: PPUSH
6552: LD_VAR 0 9
6556: PPUSH
6557: CALL_OW 12
6561: ARRAY
6562: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
6563: LD_VAR 0 2
6567: PPUSH
6568: LD_VAR 0 3
6572: PPUSH
6573: CALL 6822 0 2
6577: NOT
6578: IFFALSE 6637
// repeat engine := _engine [ 1 ] ;
6580: LD_ADDR_VAR 0 3
6584: PUSH
6585: LD_VAR 0 11
6589: PUSH
6590: LD_INT 1
6592: ARRAY
6593: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
6594: LD_ADDR_VAR 0 11
6598: PUSH
6599: LD_VAR 0 11
6603: PPUSH
6604: LD_INT 1
6606: PPUSH
6607: CALL_OW 3
6611: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
6612: LD_VAR 0 2
6616: PPUSH
6617: LD_VAR 0 3
6621: PPUSH
6622: CALL 6822 0 2
6626: PUSH
6627: LD_VAR 0 11
6631: PUSH
6632: EMPTY
6633: EQUAL
6634: OR
6635: IFFALSE 6580
// if not control in _control then
6637: LD_VAR 0 4
6641: PUSH
6642: LD_VAR 0 12
6646: IN
6647: NOT
6648: IFFALSE 6674
// control := _control [ rand ( 1 , _control ) ] ;
6650: LD_ADDR_VAR 0 4
6654: PUSH
6655: LD_VAR 0 12
6659: PUSH
6660: LD_INT 1
6662: PPUSH
6663: LD_VAR 0 12
6667: PPUSH
6668: CALL_OW 12
6672: ARRAY
6673: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
6674: LD_VAR 0 2
6678: PPUSH
6679: LD_VAR 0 5
6683: PPUSH
6684: CALL 7042 0 2
6688: NOT
6689: IFFALSE 6748
// repeat weapon := _weapon [ 1 ] ;
6691: LD_ADDR_VAR 0 5
6695: PUSH
6696: LD_VAR 0 10
6700: PUSH
6701: LD_INT 1
6703: ARRAY
6704: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
6705: LD_ADDR_VAR 0 10
6709: PUSH
6710: LD_VAR 0 10
6714: PPUSH
6715: LD_INT 1
6717: PPUSH
6718: CALL_OW 3
6722: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6723: LD_VAR 0 2
6727: PPUSH
6728: LD_VAR 0 5
6732: PPUSH
6733: CALL 7042 0 2
6737: PUSH
6738: LD_VAR 0 10
6742: PUSH
6743: EMPTY
6744: EQUAL
6745: OR
6746: IFFALSE 6691
// result := [ ] ;
6748: LD_ADDR_VAR 0 6
6752: PUSH
6753: EMPTY
6754: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6755: LD_VAR 0 1
6759: PPUSH
6760: LD_VAR 0 2
6764: PPUSH
6765: LD_VAR 0 3
6769: PPUSH
6770: LD_VAR 0 4
6774: PPUSH
6775: LD_VAR 0 5
6779: PPUSH
6780: CALL_OW 448
6784: IFFALSE 6817
// result := [ chassis , engine , control , weapon ] ;
6786: LD_ADDR_VAR 0 6
6790: PUSH
6791: LD_VAR 0 2
6795: PUSH
6796: LD_VAR 0 3
6800: PUSH
6801: LD_VAR 0 4
6805: PUSH
6806: LD_VAR 0 5
6810: PUSH
6811: EMPTY
6812: LIST
6813: LIST
6814: LIST
6815: LIST
6816: ST_TO_ADDR
// end ;
6817: LD_VAR 0 6
6821: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6822: LD_INT 0
6824: PPUSH
// if not chassis or not engine then
6825: LD_VAR 0 1
6829: NOT
6830: PUSH
6831: LD_VAR 0 2
6835: NOT
6836: OR
6837: IFFALSE 6841
// exit ;
6839: GO 7037
// case engine of engine_solar :
6841: LD_VAR 0 2
6845: PUSH
6846: LD_INT 2
6848: DOUBLE
6849: EQUAL
6850: IFTRUE 6854
6852: GO 6892
6854: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6855: LD_ADDR_VAR 0 3
6859: PUSH
6860: LD_INT 11
6862: PUSH
6863: LD_INT 12
6865: PUSH
6866: LD_INT 13
6868: PUSH
6869: LD_INT 14
6871: PUSH
6872: LD_INT 1
6874: PUSH
6875: LD_INT 2
6877: PUSH
6878: LD_INT 3
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: LIST
6885: LIST
6886: LIST
6887: LIST
6888: LIST
6889: ST_TO_ADDR
6890: GO 7021
6892: LD_INT 1
6894: DOUBLE
6895: EQUAL
6896: IFTRUE 6900
6898: GO 6962
6900: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6901: LD_ADDR_VAR 0 3
6905: PUSH
6906: LD_INT 11
6908: PUSH
6909: LD_INT 12
6911: PUSH
6912: LD_INT 13
6914: PUSH
6915: LD_INT 14
6917: PUSH
6918: LD_INT 1
6920: PUSH
6921: LD_INT 2
6923: PUSH
6924: LD_INT 3
6926: PUSH
6927: LD_INT 4
6929: PUSH
6930: LD_INT 5
6932: PUSH
6933: LD_INT 21
6935: PUSH
6936: LD_INT 23
6938: PUSH
6939: LD_INT 22
6941: PUSH
6942: LD_INT 24
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: LIST
6949: LIST
6950: LIST
6951: LIST
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: LIST
6959: ST_TO_ADDR
6960: GO 7021
6962: LD_INT 3
6964: DOUBLE
6965: EQUAL
6966: IFTRUE 6970
6968: GO 7020
6970: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6971: LD_ADDR_VAR 0 3
6975: PUSH
6976: LD_INT 13
6978: PUSH
6979: LD_INT 14
6981: PUSH
6982: LD_INT 2
6984: PUSH
6985: LD_INT 3
6987: PUSH
6988: LD_INT 4
6990: PUSH
6991: LD_INT 5
6993: PUSH
6994: LD_INT 21
6996: PUSH
6997: LD_INT 22
6999: PUSH
7000: LD_INT 23
7002: PUSH
7003: LD_INT 24
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: ST_TO_ADDR
7018: GO 7021
7020: POP
// result := ( chassis in result ) ;
7021: LD_ADDR_VAR 0 3
7025: PUSH
7026: LD_VAR 0 1
7030: PUSH
7031: LD_VAR 0 3
7035: IN
7036: ST_TO_ADDR
// end ;
7037: LD_VAR 0 3
7041: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
7042: LD_INT 0
7044: PPUSH
// if not chassis or not weapon then
7045: LD_VAR 0 1
7049: NOT
7050: PUSH
7051: LD_VAR 0 2
7055: NOT
7056: OR
7057: IFFALSE 7061
// exit ;
7059: GO 8121
// case weapon of us_machine_gun :
7061: LD_VAR 0 2
7065: PUSH
7066: LD_INT 2
7068: DOUBLE
7069: EQUAL
7070: IFTRUE 7074
7072: GO 7104
7074: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
7075: LD_ADDR_VAR 0 3
7079: PUSH
7080: LD_INT 1
7082: PUSH
7083: LD_INT 2
7085: PUSH
7086: LD_INT 3
7088: PUSH
7089: LD_INT 4
7091: PUSH
7092: LD_INT 5
7094: PUSH
7095: EMPTY
7096: LIST
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: ST_TO_ADDR
7102: GO 8105
7104: LD_INT 3
7106: DOUBLE
7107: EQUAL
7108: IFTRUE 7112
7110: GO 7142
7112: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
7113: LD_ADDR_VAR 0 3
7117: PUSH
7118: LD_INT 1
7120: PUSH
7121: LD_INT 2
7123: PUSH
7124: LD_INT 3
7126: PUSH
7127: LD_INT 4
7129: PUSH
7130: LD_INT 5
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: LIST
7137: LIST
7138: LIST
7139: ST_TO_ADDR
7140: GO 8105
7142: LD_INT 11
7144: DOUBLE
7145: EQUAL
7146: IFTRUE 7150
7148: GO 7180
7150: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
7151: LD_ADDR_VAR 0 3
7155: PUSH
7156: LD_INT 1
7158: PUSH
7159: LD_INT 2
7161: PUSH
7162: LD_INT 3
7164: PUSH
7165: LD_INT 4
7167: PUSH
7168: LD_INT 5
7170: PUSH
7171: EMPTY
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: ST_TO_ADDR
7178: GO 8105
7180: LD_INT 4
7182: DOUBLE
7183: EQUAL
7184: IFTRUE 7188
7186: GO 7214
7188: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
7189: LD_ADDR_VAR 0 3
7193: PUSH
7194: LD_INT 2
7196: PUSH
7197: LD_INT 3
7199: PUSH
7200: LD_INT 4
7202: PUSH
7203: LD_INT 5
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: ST_TO_ADDR
7212: GO 8105
7214: LD_INT 5
7216: DOUBLE
7217: EQUAL
7218: IFTRUE 7222
7220: GO 7248
7222: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
7223: LD_ADDR_VAR 0 3
7227: PUSH
7228: LD_INT 2
7230: PUSH
7231: LD_INT 3
7233: PUSH
7234: LD_INT 4
7236: PUSH
7237: LD_INT 5
7239: PUSH
7240: EMPTY
7241: LIST
7242: LIST
7243: LIST
7244: LIST
7245: ST_TO_ADDR
7246: GO 8105
7248: LD_INT 9
7250: DOUBLE
7251: EQUAL
7252: IFTRUE 7256
7254: GO 7282
7256: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
7257: LD_ADDR_VAR 0 3
7261: PUSH
7262: LD_INT 2
7264: PUSH
7265: LD_INT 3
7267: PUSH
7268: LD_INT 4
7270: PUSH
7271: LD_INT 5
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: LIST
7278: LIST
7279: ST_TO_ADDR
7280: GO 8105
7282: LD_INT 7
7284: DOUBLE
7285: EQUAL
7286: IFTRUE 7290
7288: GO 7316
7290: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
7291: LD_ADDR_VAR 0 3
7295: PUSH
7296: LD_INT 2
7298: PUSH
7299: LD_INT 3
7301: PUSH
7302: LD_INT 4
7304: PUSH
7305: LD_INT 5
7307: PUSH
7308: EMPTY
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: ST_TO_ADDR
7314: GO 8105
7316: LD_INT 12
7318: DOUBLE
7319: EQUAL
7320: IFTRUE 7324
7322: GO 7350
7324: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
7325: LD_ADDR_VAR 0 3
7329: PUSH
7330: LD_INT 2
7332: PUSH
7333: LD_INT 3
7335: PUSH
7336: LD_INT 4
7338: PUSH
7339: LD_INT 5
7341: PUSH
7342: EMPTY
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: ST_TO_ADDR
7348: GO 8105
7350: LD_INT 13
7352: DOUBLE
7353: EQUAL
7354: IFTRUE 7358
7356: GO 7384
7358: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
7359: LD_ADDR_VAR 0 3
7363: PUSH
7364: LD_INT 2
7366: PUSH
7367: LD_INT 3
7369: PUSH
7370: LD_INT 4
7372: PUSH
7373: LD_INT 5
7375: PUSH
7376: EMPTY
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: ST_TO_ADDR
7382: GO 8105
7384: LD_INT 14
7386: DOUBLE
7387: EQUAL
7388: IFTRUE 7392
7390: GO 7410
7392: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
7393: LD_ADDR_VAR 0 3
7397: PUSH
7398: LD_INT 4
7400: PUSH
7401: LD_INT 5
7403: PUSH
7404: EMPTY
7405: LIST
7406: LIST
7407: ST_TO_ADDR
7408: GO 8105
7410: LD_INT 6
7412: DOUBLE
7413: EQUAL
7414: IFTRUE 7418
7416: GO 7436
7418: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
7419: LD_ADDR_VAR 0 3
7423: PUSH
7424: LD_INT 4
7426: PUSH
7427: LD_INT 5
7429: PUSH
7430: EMPTY
7431: LIST
7432: LIST
7433: ST_TO_ADDR
7434: GO 8105
7436: LD_INT 10
7438: DOUBLE
7439: EQUAL
7440: IFTRUE 7444
7442: GO 7462
7444: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
7445: LD_ADDR_VAR 0 3
7449: PUSH
7450: LD_INT 4
7452: PUSH
7453: LD_INT 5
7455: PUSH
7456: EMPTY
7457: LIST
7458: LIST
7459: ST_TO_ADDR
7460: GO 8105
7462: LD_INT 22
7464: DOUBLE
7465: EQUAL
7466: IFTRUE 7470
7468: GO 7496
7470: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
7471: LD_ADDR_VAR 0 3
7475: PUSH
7476: LD_INT 11
7478: PUSH
7479: LD_INT 12
7481: PUSH
7482: LD_INT 13
7484: PUSH
7485: LD_INT 14
7487: PUSH
7488: EMPTY
7489: LIST
7490: LIST
7491: LIST
7492: LIST
7493: ST_TO_ADDR
7494: GO 8105
7496: LD_INT 23
7498: DOUBLE
7499: EQUAL
7500: IFTRUE 7504
7502: GO 7530
7504: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
7505: LD_ADDR_VAR 0 3
7509: PUSH
7510: LD_INT 11
7512: PUSH
7513: LD_INT 12
7515: PUSH
7516: LD_INT 13
7518: PUSH
7519: LD_INT 14
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: ST_TO_ADDR
7528: GO 8105
7530: LD_INT 24
7532: DOUBLE
7533: EQUAL
7534: IFTRUE 7538
7536: GO 7564
7538: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
7539: LD_ADDR_VAR 0 3
7543: PUSH
7544: LD_INT 11
7546: PUSH
7547: LD_INT 12
7549: PUSH
7550: LD_INT 13
7552: PUSH
7553: LD_INT 14
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: LIST
7560: LIST
7561: ST_TO_ADDR
7562: GO 8105
7564: LD_INT 30
7566: DOUBLE
7567: EQUAL
7568: IFTRUE 7572
7570: GO 7598
7572: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
7573: LD_ADDR_VAR 0 3
7577: PUSH
7578: LD_INT 11
7580: PUSH
7581: LD_INT 12
7583: PUSH
7584: LD_INT 13
7586: PUSH
7587: LD_INT 14
7589: PUSH
7590: EMPTY
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: ST_TO_ADDR
7596: GO 8105
7598: LD_INT 25
7600: DOUBLE
7601: EQUAL
7602: IFTRUE 7606
7604: GO 7624
7606: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
7607: LD_ADDR_VAR 0 3
7611: PUSH
7612: LD_INT 13
7614: PUSH
7615: LD_INT 14
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: ST_TO_ADDR
7622: GO 8105
7624: LD_INT 27
7626: DOUBLE
7627: EQUAL
7628: IFTRUE 7632
7630: GO 7650
7632: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
7633: LD_ADDR_VAR 0 3
7637: PUSH
7638: LD_INT 13
7640: PUSH
7641: LD_INT 14
7643: PUSH
7644: EMPTY
7645: LIST
7646: LIST
7647: ST_TO_ADDR
7648: GO 8105
7650: LD_INT 92
7652: DOUBLE
7653: EQUAL
7654: IFTRUE 7658
7656: GO 7684
7658: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
7659: LD_ADDR_VAR 0 3
7663: PUSH
7664: LD_INT 11
7666: PUSH
7667: LD_INT 12
7669: PUSH
7670: LD_INT 13
7672: PUSH
7673: LD_INT 14
7675: PUSH
7676: EMPTY
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: ST_TO_ADDR
7682: GO 8105
7684: LD_INT 28
7686: DOUBLE
7687: EQUAL
7688: IFTRUE 7692
7690: GO 7710
7692: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
7693: LD_ADDR_VAR 0 3
7697: PUSH
7698: LD_INT 13
7700: PUSH
7701: LD_INT 14
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: ST_TO_ADDR
7708: GO 8105
7710: LD_INT 29
7712: DOUBLE
7713: EQUAL
7714: IFTRUE 7718
7716: GO 7736
7718: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7719: LD_ADDR_VAR 0 3
7723: PUSH
7724: LD_INT 13
7726: PUSH
7727: LD_INT 14
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: ST_TO_ADDR
7734: GO 8105
7736: LD_INT 31
7738: DOUBLE
7739: EQUAL
7740: IFTRUE 7744
7742: GO 7762
7744: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7745: LD_ADDR_VAR 0 3
7749: PUSH
7750: LD_INT 13
7752: PUSH
7753: LD_INT 14
7755: PUSH
7756: EMPTY
7757: LIST
7758: LIST
7759: ST_TO_ADDR
7760: GO 8105
7762: LD_INT 26
7764: DOUBLE
7765: EQUAL
7766: IFTRUE 7770
7768: GO 7788
7770: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7771: LD_ADDR_VAR 0 3
7775: PUSH
7776: LD_INT 13
7778: PUSH
7779: LD_INT 14
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: ST_TO_ADDR
7786: GO 8105
7788: LD_INT 42
7790: DOUBLE
7791: EQUAL
7792: IFTRUE 7796
7794: GO 7822
7796: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7797: LD_ADDR_VAR 0 3
7801: PUSH
7802: LD_INT 21
7804: PUSH
7805: LD_INT 22
7807: PUSH
7808: LD_INT 23
7810: PUSH
7811: LD_INT 24
7813: PUSH
7814: EMPTY
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: ST_TO_ADDR
7820: GO 8105
7822: LD_INT 43
7824: DOUBLE
7825: EQUAL
7826: IFTRUE 7830
7828: GO 7856
7830: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7831: LD_ADDR_VAR 0 3
7835: PUSH
7836: LD_INT 21
7838: PUSH
7839: LD_INT 22
7841: PUSH
7842: LD_INT 23
7844: PUSH
7845: LD_INT 24
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: ST_TO_ADDR
7854: GO 8105
7856: LD_INT 44
7858: DOUBLE
7859: EQUAL
7860: IFTRUE 7864
7862: GO 7890
7864: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7865: LD_ADDR_VAR 0 3
7869: PUSH
7870: LD_INT 21
7872: PUSH
7873: LD_INT 22
7875: PUSH
7876: LD_INT 23
7878: PUSH
7879: LD_INT 24
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: ST_TO_ADDR
7888: GO 8105
7890: LD_INT 45
7892: DOUBLE
7893: EQUAL
7894: IFTRUE 7898
7896: GO 7924
7898: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7899: LD_ADDR_VAR 0 3
7903: PUSH
7904: LD_INT 21
7906: PUSH
7907: LD_INT 22
7909: PUSH
7910: LD_INT 23
7912: PUSH
7913: LD_INT 24
7915: PUSH
7916: EMPTY
7917: LIST
7918: LIST
7919: LIST
7920: LIST
7921: ST_TO_ADDR
7922: GO 8105
7924: LD_INT 49
7926: DOUBLE
7927: EQUAL
7928: IFTRUE 7932
7930: GO 7958
7932: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7933: LD_ADDR_VAR 0 3
7937: PUSH
7938: LD_INT 21
7940: PUSH
7941: LD_INT 22
7943: PUSH
7944: LD_INT 23
7946: PUSH
7947: LD_INT 24
7949: PUSH
7950: EMPTY
7951: LIST
7952: LIST
7953: LIST
7954: LIST
7955: ST_TO_ADDR
7956: GO 8105
7958: LD_INT 51
7960: DOUBLE
7961: EQUAL
7962: IFTRUE 7966
7964: GO 7992
7966: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7967: LD_ADDR_VAR 0 3
7971: PUSH
7972: LD_INT 21
7974: PUSH
7975: LD_INT 22
7977: PUSH
7978: LD_INT 23
7980: PUSH
7981: LD_INT 24
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: LIST
7988: LIST
7989: ST_TO_ADDR
7990: GO 8105
7992: LD_INT 52
7994: DOUBLE
7995: EQUAL
7996: IFTRUE 8000
7998: GO 8026
8000: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
8001: LD_ADDR_VAR 0 3
8005: PUSH
8006: LD_INT 21
8008: PUSH
8009: LD_INT 22
8011: PUSH
8012: LD_INT 23
8014: PUSH
8015: LD_INT 24
8017: PUSH
8018: EMPTY
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: ST_TO_ADDR
8024: GO 8105
8026: LD_INT 53
8028: DOUBLE
8029: EQUAL
8030: IFTRUE 8034
8032: GO 8052
8034: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
8035: LD_ADDR_VAR 0 3
8039: PUSH
8040: LD_INT 23
8042: PUSH
8043: LD_INT 24
8045: PUSH
8046: EMPTY
8047: LIST
8048: LIST
8049: ST_TO_ADDR
8050: GO 8105
8052: LD_INT 46
8054: DOUBLE
8055: EQUAL
8056: IFTRUE 8060
8058: GO 8078
8060: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
8061: LD_ADDR_VAR 0 3
8065: PUSH
8066: LD_INT 23
8068: PUSH
8069: LD_INT 24
8071: PUSH
8072: EMPTY
8073: LIST
8074: LIST
8075: ST_TO_ADDR
8076: GO 8105
8078: LD_INT 47
8080: DOUBLE
8081: EQUAL
8082: IFTRUE 8086
8084: GO 8104
8086: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
8087: LD_ADDR_VAR 0 3
8091: PUSH
8092: LD_INT 23
8094: PUSH
8095: LD_INT 24
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: ST_TO_ADDR
8102: GO 8105
8104: POP
// result := ( chassis in result ) ;
8105: LD_ADDR_VAR 0 3
8109: PUSH
8110: LD_VAR 0 1
8114: PUSH
8115: LD_VAR 0 3
8119: IN
8120: ST_TO_ADDR
// end ;
8121: LD_VAR 0 3
8125: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
8126: LD_INT 0
8128: PPUSH
8129: PPUSH
8130: PPUSH
8131: PPUSH
8132: PPUSH
8133: PPUSH
8134: PPUSH
// result := array ;
8135: LD_ADDR_VAR 0 5
8139: PUSH
8140: LD_VAR 0 1
8144: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
8145: LD_VAR 0 1
8149: NOT
8150: PUSH
8151: LD_VAR 0 2
8155: NOT
8156: OR
8157: PUSH
8158: LD_VAR 0 3
8162: NOT
8163: OR
8164: PUSH
8165: LD_VAR 0 2
8169: PUSH
8170: LD_VAR 0 1
8174: GREATER
8175: OR
8176: PUSH
8177: LD_VAR 0 3
8181: PUSH
8182: LD_VAR 0 1
8186: GREATER
8187: OR
8188: IFFALSE 8192
// exit ;
8190: GO 8488
// if direction then
8192: LD_VAR 0 4
8196: IFFALSE 8260
// begin d := 1 ;
8198: LD_ADDR_VAR 0 9
8202: PUSH
8203: LD_INT 1
8205: ST_TO_ADDR
// if i_from > i_to then
8206: LD_VAR 0 2
8210: PUSH
8211: LD_VAR 0 3
8215: GREATER
8216: IFFALSE 8242
// length := ( array - i_from ) + i_to else
8218: LD_ADDR_VAR 0 11
8222: PUSH
8223: LD_VAR 0 1
8227: PUSH
8228: LD_VAR 0 2
8232: MINUS
8233: PUSH
8234: LD_VAR 0 3
8238: PLUS
8239: ST_TO_ADDR
8240: GO 8258
// length := i_to - i_from ;
8242: LD_ADDR_VAR 0 11
8246: PUSH
8247: LD_VAR 0 3
8251: PUSH
8252: LD_VAR 0 2
8256: MINUS
8257: ST_TO_ADDR
// end else
8258: GO 8321
// begin d := - 1 ;
8260: LD_ADDR_VAR 0 9
8264: PUSH
8265: LD_INT 1
8267: NEG
8268: ST_TO_ADDR
// if i_from > i_to then
8269: LD_VAR 0 2
8273: PUSH
8274: LD_VAR 0 3
8278: GREATER
8279: IFFALSE 8299
// length := i_from - i_to else
8281: LD_ADDR_VAR 0 11
8285: PUSH
8286: LD_VAR 0 2
8290: PUSH
8291: LD_VAR 0 3
8295: MINUS
8296: ST_TO_ADDR
8297: GO 8321
// length := ( array - i_to ) + i_from ;
8299: LD_ADDR_VAR 0 11
8303: PUSH
8304: LD_VAR 0 1
8308: PUSH
8309: LD_VAR 0 3
8313: MINUS
8314: PUSH
8315: LD_VAR 0 2
8319: PLUS
8320: ST_TO_ADDR
// end ; if not length then
8321: LD_VAR 0 11
8325: NOT
8326: IFFALSE 8330
// exit ;
8328: GO 8488
// tmp := array ;
8330: LD_ADDR_VAR 0 10
8334: PUSH
8335: LD_VAR 0 1
8339: ST_TO_ADDR
// for i = 1 to length do
8340: LD_ADDR_VAR 0 6
8344: PUSH
8345: DOUBLE
8346: LD_INT 1
8348: DEC
8349: ST_TO_ADDR
8350: LD_VAR 0 11
8354: PUSH
8355: FOR_TO
8356: IFFALSE 8476
// begin for j = 1 to array do
8358: LD_ADDR_VAR 0 7
8362: PUSH
8363: DOUBLE
8364: LD_INT 1
8366: DEC
8367: ST_TO_ADDR
8368: LD_VAR 0 1
8372: PUSH
8373: FOR_TO
8374: IFFALSE 8462
// begin k := j + d ;
8376: LD_ADDR_VAR 0 8
8380: PUSH
8381: LD_VAR 0 7
8385: PUSH
8386: LD_VAR 0 9
8390: PLUS
8391: ST_TO_ADDR
// if k > array then
8392: LD_VAR 0 8
8396: PUSH
8397: LD_VAR 0 1
8401: GREATER
8402: IFFALSE 8412
// k := 1 ;
8404: LD_ADDR_VAR 0 8
8408: PUSH
8409: LD_INT 1
8411: ST_TO_ADDR
// if not k then
8412: LD_VAR 0 8
8416: NOT
8417: IFFALSE 8429
// k := array ;
8419: LD_ADDR_VAR 0 8
8423: PUSH
8424: LD_VAR 0 1
8428: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
8429: LD_ADDR_VAR 0 10
8433: PUSH
8434: LD_VAR 0 10
8438: PPUSH
8439: LD_VAR 0 8
8443: PPUSH
8444: LD_VAR 0 1
8448: PUSH
8449: LD_VAR 0 7
8453: ARRAY
8454: PPUSH
8455: CALL_OW 1
8459: ST_TO_ADDR
// end ;
8460: GO 8373
8462: POP
8463: POP
// array := tmp ;
8464: LD_ADDR_VAR 0 1
8468: PUSH
8469: LD_VAR 0 10
8473: ST_TO_ADDR
// end ;
8474: GO 8355
8476: POP
8477: POP
// result := array ;
8478: LD_ADDR_VAR 0 5
8482: PUSH
8483: LD_VAR 0 1
8487: ST_TO_ADDR
// end ;
8488: LD_VAR 0 5
8492: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
8493: LD_INT 0
8495: PPUSH
8496: PPUSH
// result := 0 ;
8497: LD_ADDR_VAR 0 3
8501: PUSH
8502: LD_INT 0
8504: ST_TO_ADDR
// if not array or not value in array then
8505: LD_VAR 0 1
8509: NOT
8510: PUSH
8511: LD_VAR 0 2
8515: PUSH
8516: LD_VAR 0 1
8520: IN
8521: NOT
8522: OR
8523: IFFALSE 8527
// exit ;
8525: GO 8581
// for i = 1 to array do
8527: LD_ADDR_VAR 0 4
8531: PUSH
8532: DOUBLE
8533: LD_INT 1
8535: DEC
8536: ST_TO_ADDR
8537: LD_VAR 0 1
8541: PUSH
8542: FOR_TO
8543: IFFALSE 8579
// if value = array [ i ] then
8545: LD_VAR 0 2
8549: PUSH
8550: LD_VAR 0 1
8554: PUSH
8555: LD_VAR 0 4
8559: ARRAY
8560: EQUAL
8561: IFFALSE 8577
// begin result := i ;
8563: LD_ADDR_VAR 0 3
8567: PUSH
8568: LD_VAR 0 4
8572: ST_TO_ADDR
// exit ;
8573: POP
8574: POP
8575: GO 8581
// end ;
8577: GO 8542
8579: POP
8580: POP
// end ;
8581: LD_VAR 0 3
8585: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
8586: LD_INT 0
8588: PPUSH
// vc_chassis := chassis ;
8589: LD_ADDR_OWVAR 37
8593: PUSH
8594: LD_VAR 0 1
8598: ST_TO_ADDR
// vc_engine := engine ;
8599: LD_ADDR_OWVAR 39
8603: PUSH
8604: LD_VAR 0 2
8608: ST_TO_ADDR
// vc_control := control ;
8609: LD_ADDR_OWVAR 38
8613: PUSH
8614: LD_VAR 0 3
8618: ST_TO_ADDR
// vc_weapon := weapon ;
8619: LD_ADDR_OWVAR 40
8623: PUSH
8624: LD_VAR 0 4
8628: ST_TO_ADDR
// vc_fuel_battery := fuel ;
8629: LD_ADDR_OWVAR 41
8633: PUSH
8634: LD_VAR 0 5
8638: ST_TO_ADDR
// end ;
8639: LD_VAR 0 6
8643: RET
// export function WantPlant ( unit ) ; var task ; begin
8644: LD_INT 0
8646: PPUSH
8647: PPUSH
// result := false ;
8648: LD_ADDR_VAR 0 2
8652: PUSH
8653: LD_INT 0
8655: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
8656: LD_ADDR_VAR 0 3
8660: PUSH
8661: LD_VAR 0 1
8665: PPUSH
8666: CALL_OW 437
8670: ST_TO_ADDR
// if task then
8671: LD_VAR 0 3
8675: IFFALSE 8703
// if task [ 1 ] [ 1 ] = p then
8677: LD_VAR 0 3
8681: PUSH
8682: LD_INT 1
8684: ARRAY
8685: PUSH
8686: LD_INT 1
8688: ARRAY
8689: PUSH
8690: LD_STRING p
8692: EQUAL
8693: IFFALSE 8703
// result := true ;
8695: LD_ADDR_VAR 0 2
8699: PUSH
8700: LD_INT 1
8702: ST_TO_ADDR
// end ;
8703: LD_VAR 0 2
8707: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8708: LD_INT 0
8710: PPUSH
8711: PPUSH
8712: PPUSH
8713: PPUSH
// if pos < 1 then
8714: LD_VAR 0 2
8718: PUSH
8719: LD_INT 1
8721: LESS
8722: IFFALSE 8726
// exit ;
8724: GO 9029
// if pos = 1 then
8726: LD_VAR 0 2
8730: PUSH
8731: LD_INT 1
8733: EQUAL
8734: IFFALSE 8767
// result := Replace ( arr , pos [ 1 ] , value ) else
8736: LD_ADDR_VAR 0 4
8740: PUSH
8741: LD_VAR 0 1
8745: PPUSH
8746: LD_VAR 0 2
8750: PUSH
8751: LD_INT 1
8753: ARRAY
8754: PPUSH
8755: LD_VAR 0 3
8759: PPUSH
8760: CALL_OW 1
8764: ST_TO_ADDR
8765: GO 9029
// begin tmp := arr ;
8767: LD_ADDR_VAR 0 6
8771: PUSH
8772: LD_VAR 0 1
8776: ST_TO_ADDR
// s_arr := [ tmp ] ;
8777: LD_ADDR_VAR 0 7
8781: PUSH
8782: LD_VAR 0 6
8786: PUSH
8787: EMPTY
8788: LIST
8789: ST_TO_ADDR
// for i = 1 to pos - 1 do
8790: LD_ADDR_VAR 0 5
8794: PUSH
8795: DOUBLE
8796: LD_INT 1
8798: DEC
8799: ST_TO_ADDR
8800: LD_VAR 0 2
8804: PUSH
8805: LD_INT 1
8807: MINUS
8808: PUSH
8809: FOR_TO
8810: IFFALSE 8855
// begin tmp := tmp [ pos [ i ] ] ;
8812: LD_ADDR_VAR 0 6
8816: PUSH
8817: LD_VAR 0 6
8821: PUSH
8822: LD_VAR 0 2
8826: PUSH
8827: LD_VAR 0 5
8831: ARRAY
8832: ARRAY
8833: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8834: LD_ADDR_VAR 0 7
8838: PUSH
8839: LD_VAR 0 7
8843: PUSH
8844: LD_VAR 0 6
8848: PUSH
8849: EMPTY
8850: LIST
8851: ADD
8852: ST_TO_ADDR
// end ;
8853: GO 8809
8855: POP
8856: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8857: LD_ADDR_VAR 0 6
8861: PUSH
8862: LD_VAR 0 6
8866: PPUSH
8867: LD_VAR 0 2
8871: PUSH
8872: LD_VAR 0 2
8876: ARRAY
8877: PPUSH
8878: LD_VAR 0 3
8882: PPUSH
8883: CALL_OW 1
8887: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8888: LD_ADDR_VAR 0 7
8892: PUSH
8893: LD_VAR 0 7
8897: PPUSH
8898: LD_VAR 0 7
8902: PPUSH
8903: LD_VAR 0 6
8907: PPUSH
8908: CALL_OW 1
8912: ST_TO_ADDR
// for i = s_arr downto 2 do
8913: LD_ADDR_VAR 0 5
8917: PUSH
8918: DOUBLE
8919: LD_VAR 0 7
8923: INC
8924: ST_TO_ADDR
8925: LD_INT 2
8927: PUSH
8928: FOR_DOWNTO
8929: IFFALSE 9013
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8931: LD_ADDR_VAR 0 6
8935: PUSH
8936: LD_VAR 0 7
8940: PUSH
8941: LD_VAR 0 5
8945: PUSH
8946: LD_INT 1
8948: MINUS
8949: ARRAY
8950: PPUSH
8951: LD_VAR 0 2
8955: PUSH
8956: LD_VAR 0 5
8960: PUSH
8961: LD_INT 1
8963: MINUS
8964: ARRAY
8965: PPUSH
8966: LD_VAR 0 7
8970: PUSH
8971: LD_VAR 0 5
8975: ARRAY
8976: PPUSH
8977: CALL_OW 1
8981: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8982: LD_ADDR_VAR 0 7
8986: PUSH
8987: LD_VAR 0 7
8991: PPUSH
8992: LD_VAR 0 5
8996: PUSH
8997: LD_INT 1
8999: MINUS
9000: PPUSH
9001: LD_VAR 0 6
9005: PPUSH
9006: CALL_OW 1
9010: ST_TO_ADDR
// end ;
9011: GO 8928
9013: POP
9014: POP
// result := s_arr [ 1 ] ;
9015: LD_ADDR_VAR 0 4
9019: PUSH
9020: LD_VAR 0 7
9024: PUSH
9025: LD_INT 1
9027: ARRAY
9028: ST_TO_ADDR
// end ; end ;
9029: LD_VAR 0 4
9033: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
9034: LD_INT 0
9036: PPUSH
9037: PPUSH
// if not list then
9038: LD_VAR 0 1
9042: NOT
9043: IFFALSE 9047
// exit ;
9045: GO 9138
// i := list [ pos1 ] ;
9047: LD_ADDR_VAR 0 5
9051: PUSH
9052: LD_VAR 0 1
9056: PUSH
9057: LD_VAR 0 2
9061: ARRAY
9062: ST_TO_ADDR
// if not i then
9063: LD_VAR 0 5
9067: NOT
9068: IFFALSE 9072
// exit ;
9070: GO 9138
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
9072: LD_ADDR_VAR 0 1
9076: PUSH
9077: LD_VAR 0 1
9081: PPUSH
9082: LD_VAR 0 2
9086: PPUSH
9087: LD_VAR 0 1
9091: PUSH
9092: LD_VAR 0 3
9096: ARRAY
9097: PPUSH
9098: CALL_OW 1
9102: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
9103: LD_ADDR_VAR 0 1
9107: PUSH
9108: LD_VAR 0 1
9112: PPUSH
9113: LD_VAR 0 3
9117: PPUSH
9118: LD_VAR 0 5
9122: PPUSH
9123: CALL_OW 1
9127: ST_TO_ADDR
// result := list ;
9128: LD_ADDR_VAR 0 4
9132: PUSH
9133: LD_VAR 0 1
9137: ST_TO_ADDR
// end ;
9138: LD_VAR 0 4
9142: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
9143: LD_INT 0
9145: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
9146: LD_ADDR_VAR 0 5
9150: PUSH
9151: LD_VAR 0 1
9155: PPUSH
9156: CALL_OW 250
9160: PPUSH
9161: LD_VAR 0 1
9165: PPUSH
9166: CALL_OW 251
9170: PPUSH
9171: LD_VAR 0 2
9175: PPUSH
9176: LD_VAR 0 3
9180: PPUSH
9181: LD_VAR 0 4
9185: PPUSH
9186: CALL 9196 0 5
9190: ST_TO_ADDR
// end ;
9191: LD_VAR 0 5
9195: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
9196: LD_INT 0
9198: PPUSH
9199: PPUSH
9200: PPUSH
9201: PPUSH
// if not list then
9202: LD_VAR 0 3
9206: NOT
9207: IFFALSE 9211
// exit ;
9209: GO 9599
// result := [ ] ;
9211: LD_ADDR_VAR 0 6
9215: PUSH
9216: EMPTY
9217: ST_TO_ADDR
// for i in list do
9218: LD_ADDR_VAR 0 7
9222: PUSH
9223: LD_VAR 0 3
9227: PUSH
9228: FOR_IN
9229: IFFALSE 9431
// begin tmp := GetDistUnitXY ( i , x , y ) ;
9231: LD_ADDR_VAR 0 9
9235: PUSH
9236: LD_VAR 0 7
9240: PPUSH
9241: LD_VAR 0 1
9245: PPUSH
9246: LD_VAR 0 2
9250: PPUSH
9251: CALL_OW 297
9255: ST_TO_ADDR
// if not result then
9256: LD_VAR 0 6
9260: NOT
9261: IFFALSE 9287
// result := [ [ i , tmp ] ] else
9263: LD_ADDR_VAR 0 6
9267: PUSH
9268: LD_VAR 0 7
9272: PUSH
9273: LD_VAR 0 9
9277: PUSH
9278: EMPTY
9279: LIST
9280: LIST
9281: PUSH
9282: EMPTY
9283: LIST
9284: ST_TO_ADDR
9285: GO 9429
// begin if result [ result ] [ 2 ] < tmp then
9287: LD_VAR 0 6
9291: PUSH
9292: LD_VAR 0 6
9296: ARRAY
9297: PUSH
9298: LD_INT 2
9300: ARRAY
9301: PUSH
9302: LD_VAR 0 9
9306: LESS
9307: IFFALSE 9349
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9309: LD_ADDR_VAR 0 6
9313: PUSH
9314: LD_VAR 0 6
9318: PPUSH
9319: LD_VAR 0 6
9323: PUSH
9324: LD_INT 1
9326: PLUS
9327: PPUSH
9328: LD_VAR 0 7
9332: PUSH
9333: LD_VAR 0 9
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: PPUSH
9342: CALL_OW 2
9346: ST_TO_ADDR
9347: GO 9429
// for j = 1 to result do
9349: LD_ADDR_VAR 0 8
9353: PUSH
9354: DOUBLE
9355: LD_INT 1
9357: DEC
9358: ST_TO_ADDR
9359: LD_VAR 0 6
9363: PUSH
9364: FOR_TO
9365: IFFALSE 9427
// begin if tmp < result [ j ] [ 2 ] then
9367: LD_VAR 0 9
9371: PUSH
9372: LD_VAR 0 6
9376: PUSH
9377: LD_VAR 0 8
9381: ARRAY
9382: PUSH
9383: LD_INT 2
9385: ARRAY
9386: LESS
9387: IFFALSE 9425
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9389: LD_ADDR_VAR 0 6
9393: PUSH
9394: LD_VAR 0 6
9398: PPUSH
9399: LD_VAR 0 8
9403: PPUSH
9404: LD_VAR 0 7
9408: PUSH
9409: LD_VAR 0 9
9413: PUSH
9414: EMPTY
9415: LIST
9416: LIST
9417: PPUSH
9418: CALL_OW 2
9422: ST_TO_ADDR
// break ;
9423: GO 9427
// end ; end ;
9425: GO 9364
9427: POP
9428: POP
// end ; end ;
9429: GO 9228
9431: POP
9432: POP
// if result and not asc then
9433: LD_VAR 0 6
9437: PUSH
9438: LD_VAR 0 4
9442: NOT
9443: AND
9444: IFFALSE 9519
// begin tmp := result ;
9446: LD_ADDR_VAR 0 9
9450: PUSH
9451: LD_VAR 0 6
9455: ST_TO_ADDR
// for i = tmp downto 1 do
9456: LD_ADDR_VAR 0 7
9460: PUSH
9461: DOUBLE
9462: LD_VAR 0 9
9466: INC
9467: ST_TO_ADDR
9468: LD_INT 1
9470: PUSH
9471: FOR_DOWNTO
9472: IFFALSE 9517
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9474: LD_ADDR_VAR 0 6
9478: PUSH
9479: LD_VAR 0 6
9483: PPUSH
9484: LD_VAR 0 9
9488: PUSH
9489: LD_VAR 0 7
9493: MINUS
9494: PUSH
9495: LD_INT 1
9497: PLUS
9498: PPUSH
9499: LD_VAR 0 9
9503: PUSH
9504: LD_VAR 0 7
9508: ARRAY
9509: PPUSH
9510: CALL_OW 1
9514: ST_TO_ADDR
9515: GO 9471
9517: POP
9518: POP
// end ; tmp := [ ] ;
9519: LD_ADDR_VAR 0 9
9523: PUSH
9524: EMPTY
9525: ST_TO_ADDR
// if mode then
9526: LD_VAR 0 5
9530: IFFALSE 9599
// begin for i = 1 to result do
9532: LD_ADDR_VAR 0 7
9536: PUSH
9537: DOUBLE
9538: LD_INT 1
9540: DEC
9541: ST_TO_ADDR
9542: LD_VAR 0 6
9546: PUSH
9547: FOR_TO
9548: IFFALSE 9587
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9550: LD_ADDR_VAR 0 9
9554: PUSH
9555: LD_VAR 0 9
9559: PPUSH
9560: LD_VAR 0 7
9564: PPUSH
9565: LD_VAR 0 6
9569: PUSH
9570: LD_VAR 0 7
9574: ARRAY
9575: PUSH
9576: LD_INT 1
9578: ARRAY
9579: PPUSH
9580: CALL_OW 1
9584: ST_TO_ADDR
9585: GO 9547
9587: POP
9588: POP
// result := tmp ;
9589: LD_ADDR_VAR 0 6
9593: PUSH
9594: LD_VAR 0 9
9598: ST_TO_ADDR
// end ; end ;
9599: LD_VAR 0 6
9603: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9604: LD_INT 0
9606: PPUSH
9607: PPUSH
9608: PPUSH
9609: PPUSH
9610: PPUSH
9611: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9612: LD_ADDR_VAR 0 5
9616: PUSH
9617: LD_INT 0
9619: PUSH
9620: LD_INT 0
9622: PUSH
9623: LD_INT 0
9625: PUSH
9626: EMPTY
9627: PUSH
9628: EMPTY
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: ST_TO_ADDR
// if not x or not y then
9634: LD_VAR 0 2
9638: NOT
9639: PUSH
9640: LD_VAR 0 3
9644: NOT
9645: OR
9646: IFFALSE 9650
// exit ;
9648: GO 11300
// if not range then
9650: LD_VAR 0 4
9654: NOT
9655: IFFALSE 9665
// range := 10 ;
9657: LD_ADDR_VAR 0 4
9661: PUSH
9662: LD_INT 10
9664: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9665: LD_ADDR_VAR 0 8
9669: PUSH
9670: LD_INT 81
9672: PUSH
9673: LD_VAR 0 1
9677: PUSH
9678: EMPTY
9679: LIST
9680: LIST
9681: PUSH
9682: LD_INT 92
9684: PUSH
9685: LD_VAR 0 2
9689: PUSH
9690: LD_VAR 0 3
9694: PUSH
9695: LD_VAR 0 4
9699: PUSH
9700: EMPTY
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: PUSH
9706: LD_INT 3
9708: PUSH
9709: LD_INT 21
9711: PUSH
9712: LD_INT 3
9714: PUSH
9715: EMPTY
9716: LIST
9717: LIST
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: PUSH
9723: EMPTY
9724: LIST
9725: LIST
9726: LIST
9727: PPUSH
9728: CALL_OW 69
9732: ST_TO_ADDR
// if not tmp then
9733: LD_VAR 0 8
9737: NOT
9738: IFFALSE 9742
// exit ;
9740: GO 11300
// for i in tmp do
9742: LD_ADDR_VAR 0 6
9746: PUSH
9747: LD_VAR 0 8
9751: PUSH
9752: FOR_IN
9753: IFFALSE 11275
// begin points := [ 0 , 0 , 0 ] ;
9755: LD_ADDR_VAR 0 9
9759: PUSH
9760: LD_INT 0
9762: PUSH
9763: LD_INT 0
9765: PUSH
9766: LD_INT 0
9768: PUSH
9769: EMPTY
9770: LIST
9771: LIST
9772: LIST
9773: ST_TO_ADDR
// bpoints := 1 ;
9774: LD_ADDR_VAR 0 10
9778: PUSH
9779: LD_INT 1
9781: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9782: LD_VAR 0 6
9786: PPUSH
9787: CALL_OW 247
9791: PUSH
9792: LD_INT 1
9794: DOUBLE
9795: EQUAL
9796: IFTRUE 9800
9798: GO 10378
9800: POP
// begin if GetClass ( i ) = 1 then
9801: LD_VAR 0 6
9805: PPUSH
9806: CALL_OW 257
9810: PUSH
9811: LD_INT 1
9813: EQUAL
9814: IFFALSE 9835
// points := [ 10 , 5 , 3 ] ;
9816: LD_ADDR_VAR 0 9
9820: PUSH
9821: LD_INT 10
9823: PUSH
9824: LD_INT 5
9826: PUSH
9827: LD_INT 3
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: LIST
9834: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9835: LD_VAR 0 6
9839: PPUSH
9840: CALL_OW 257
9844: PUSH
9845: LD_INT 2
9847: PUSH
9848: LD_INT 3
9850: PUSH
9851: LD_INT 4
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: LIST
9858: IN
9859: IFFALSE 9880
// points := [ 3 , 2 , 1 ] ;
9861: LD_ADDR_VAR 0 9
9865: PUSH
9866: LD_INT 3
9868: PUSH
9869: LD_INT 2
9871: PUSH
9872: LD_INT 1
9874: PUSH
9875: EMPTY
9876: LIST
9877: LIST
9878: LIST
9879: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9880: LD_VAR 0 6
9884: PPUSH
9885: CALL_OW 257
9889: PUSH
9890: LD_INT 5
9892: EQUAL
9893: IFFALSE 9914
// points := [ 130 , 5 , 2 ] ;
9895: LD_ADDR_VAR 0 9
9899: PUSH
9900: LD_INT 130
9902: PUSH
9903: LD_INT 5
9905: PUSH
9906: LD_INT 2
9908: PUSH
9909: EMPTY
9910: LIST
9911: LIST
9912: LIST
9913: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9914: LD_VAR 0 6
9918: PPUSH
9919: CALL_OW 257
9923: PUSH
9924: LD_INT 8
9926: EQUAL
9927: IFFALSE 9948
// points := [ 35 , 35 , 30 ] ;
9929: LD_ADDR_VAR 0 9
9933: PUSH
9934: LD_INT 35
9936: PUSH
9937: LD_INT 35
9939: PUSH
9940: LD_INT 30
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: LIST
9947: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9948: LD_VAR 0 6
9952: PPUSH
9953: CALL_OW 257
9957: PUSH
9958: LD_INT 9
9960: EQUAL
9961: IFFALSE 9982
// points := [ 20 , 55 , 40 ] ;
9963: LD_ADDR_VAR 0 9
9967: PUSH
9968: LD_INT 20
9970: PUSH
9971: LD_INT 55
9973: PUSH
9974: LD_INT 40
9976: PUSH
9977: EMPTY
9978: LIST
9979: LIST
9980: LIST
9981: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9982: LD_VAR 0 6
9986: PPUSH
9987: CALL_OW 257
9991: PUSH
9992: LD_INT 12
9994: PUSH
9995: LD_INT 16
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: IN
10002: IFFALSE 10023
// points := [ 5 , 3 , 2 ] ;
10004: LD_ADDR_VAR 0 9
10008: PUSH
10009: LD_INT 5
10011: PUSH
10012: LD_INT 3
10014: PUSH
10015: LD_INT 2
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: LIST
10022: ST_TO_ADDR
// if GetClass ( i ) = 17 then
10023: LD_VAR 0 6
10027: PPUSH
10028: CALL_OW 257
10032: PUSH
10033: LD_INT 17
10035: EQUAL
10036: IFFALSE 10057
// points := [ 100 , 50 , 75 ] ;
10038: LD_ADDR_VAR 0 9
10042: PUSH
10043: LD_INT 100
10045: PUSH
10046: LD_INT 50
10048: PUSH
10049: LD_INT 75
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: LIST
10056: ST_TO_ADDR
// if GetClass ( i ) = 15 then
10057: LD_VAR 0 6
10061: PPUSH
10062: CALL_OW 257
10066: PUSH
10067: LD_INT 15
10069: EQUAL
10070: IFFALSE 10091
// points := [ 10 , 5 , 3 ] ;
10072: LD_ADDR_VAR 0 9
10076: PUSH
10077: LD_INT 10
10079: PUSH
10080: LD_INT 5
10082: PUSH
10083: LD_INT 3
10085: PUSH
10086: EMPTY
10087: LIST
10088: LIST
10089: LIST
10090: ST_TO_ADDR
// if GetClass ( i ) = 14 then
10091: LD_VAR 0 6
10095: PPUSH
10096: CALL_OW 257
10100: PUSH
10101: LD_INT 14
10103: EQUAL
10104: IFFALSE 10125
// points := [ 10 , 0 , 0 ] ;
10106: LD_ADDR_VAR 0 9
10110: PUSH
10111: LD_INT 10
10113: PUSH
10114: LD_INT 0
10116: PUSH
10117: LD_INT 0
10119: PUSH
10120: EMPTY
10121: LIST
10122: LIST
10123: LIST
10124: ST_TO_ADDR
// if GetClass ( i ) = 11 then
10125: LD_VAR 0 6
10129: PPUSH
10130: CALL_OW 257
10134: PUSH
10135: LD_INT 11
10137: EQUAL
10138: IFFALSE 10159
// points := [ 30 , 10 , 5 ] ;
10140: LD_ADDR_VAR 0 9
10144: PUSH
10145: LD_INT 30
10147: PUSH
10148: LD_INT 10
10150: PUSH
10151: LD_INT 5
10153: PUSH
10154: EMPTY
10155: LIST
10156: LIST
10157: LIST
10158: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
10159: LD_VAR 0 1
10163: PPUSH
10164: LD_INT 5
10166: PPUSH
10167: CALL_OW 321
10171: PUSH
10172: LD_INT 2
10174: EQUAL
10175: IFFALSE 10192
// bpoints := bpoints * 1.8 ;
10177: LD_ADDR_VAR 0 10
10181: PUSH
10182: LD_VAR 0 10
10186: PUSH
10187: LD_REAL  1.80000000000000E+0000
10190: MUL
10191: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
10192: LD_VAR 0 6
10196: PPUSH
10197: CALL_OW 257
10201: PUSH
10202: LD_INT 1
10204: PUSH
10205: LD_INT 2
10207: PUSH
10208: LD_INT 3
10210: PUSH
10211: LD_INT 4
10213: PUSH
10214: EMPTY
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: IN
10220: PUSH
10221: LD_VAR 0 1
10225: PPUSH
10226: LD_INT 51
10228: PPUSH
10229: CALL_OW 321
10233: PUSH
10234: LD_INT 2
10236: EQUAL
10237: AND
10238: IFFALSE 10255
// bpoints := bpoints * 1.2 ;
10240: LD_ADDR_VAR 0 10
10244: PUSH
10245: LD_VAR 0 10
10249: PUSH
10250: LD_REAL  1.20000000000000E+0000
10253: MUL
10254: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
10255: LD_VAR 0 6
10259: PPUSH
10260: CALL_OW 257
10264: PUSH
10265: LD_INT 5
10267: PUSH
10268: LD_INT 7
10270: PUSH
10271: LD_INT 9
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: LIST
10278: IN
10279: PUSH
10280: LD_VAR 0 1
10284: PPUSH
10285: LD_INT 52
10287: PPUSH
10288: CALL_OW 321
10292: PUSH
10293: LD_INT 2
10295: EQUAL
10296: AND
10297: IFFALSE 10314
// bpoints := bpoints * 1.5 ;
10299: LD_ADDR_VAR 0 10
10303: PUSH
10304: LD_VAR 0 10
10308: PUSH
10309: LD_REAL  1.50000000000000E+0000
10312: MUL
10313: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10314: LD_VAR 0 1
10318: PPUSH
10319: LD_INT 66
10321: PPUSH
10322: CALL_OW 321
10326: PUSH
10327: LD_INT 2
10329: EQUAL
10330: IFFALSE 10347
// bpoints := bpoints * 1.1 ;
10332: LD_ADDR_VAR 0 10
10336: PUSH
10337: LD_VAR 0 10
10341: PUSH
10342: LD_REAL  1.10000000000000E+0000
10345: MUL
10346: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10347: LD_ADDR_VAR 0 10
10351: PUSH
10352: LD_VAR 0 10
10356: PUSH
10357: LD_VAR 0 6
10361: PPUSH
10362: LD_INT 1
10364: PPUSH
10365: CALL_OW 259
10369: PUSH
10370: LD_REAL  1.15000000000000E+0000
10373: MUL
10374: MUL
10375: ST_TO_ADDR
// end ; unit_vehicle :
10376: GO 11204
10378: LD_INT 2
10380: DOUBLE
10381: EQUAL
10382: IFTRUE 10386
10384: GO 11192
10386: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10387: LD_VAR 0 6
10391: PPUSH
10392: CALL_OW 264
10396: PUSH
10397: LD_INT 2
10399: PUSH
10400: LD_INT 42
10402: PUSH
10403: LD_INT 24
10405: PUSH
10406: EMPTY
10407: LIST
10408: LIST
10409: LIST
10410: IN
10411: IFFALSE 10432
// points := [ 25 , 5 , 3 ] ;
10413: LD_ADDR_VAR 0 9
10417: PUSH
10418: LD_INT 25
10420: PUSH
10421: LD_INT 5
10423: PUSH
10424: LD_INT 3
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: LIST
10431: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10432: LD_VAR 0 6
10436: PPUSH
10437: CALL_OW 264
10441: PUSH
10442: LD_INT 4
10444: PUSH
10445: LD_INT 43
10447: PUSH
10448: LD_INT 25
10450: PUSH
10451: EMPTY
10452: LIST
10453: LIST
10454: LIST
10455: IN
10456: IFFALSE 10477
// points := [ 40 , 15 , 5 ] ;
10458: LD_ADDR_VAR 0 9
10462: PUSH
10463: LD_INT 40
10465: PUSH
10466: LD_INT 15
10468: PUSH
10469: LD_INT 5
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: LIST
10476: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10477: LD_VAR 0 6
10481: PPUSH
10482: CALL_OW 264
10486: PUSH
10487: LD_INT 3
10489: PUSH
10490: LD_INT 23
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: IN
10497: IFFALSE 10518
// points := [ 7 , 25 , 8 ] ;
10499: LD_ADDR_VAR 0 9
10503: PUSH
10504: LD_INT 7
10506: PUSH
10507: LD_INT 25
10509: PUSH
10510: LD_INT 8
10512: PUSH
10513: EMPTY
10514: LIST
10515: LIST
10516: LIST
10517: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10518: LD_VAR 0 6
10522: PPUSH
10523: CALL_OW 264
10527: PUSH
10528: LD_INT 5
10530: PUSH
10531: LD_INT 27
10533: PUSH
10534: LD_INT 44
10536: PUSH
10537: EMPTY
10538: LIST
10539: LIST
10540: LIST
10541: IN
10542: IFFALSE 10563
// points := [ 14 , 50 , 16 ] ;
10544: LD_ADDR_VAR 0 9
10548: PUSH
10549: LD_INT 14
10551: PUSH
10552: LD_INT 50
10554: PUSH
10555: LD_INT 16
10557: PUSH
10558: EMPTY
10559: LIST
10560: LIST
10561: LIST
10562: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10563: LD_VAR 0 6
10567: PPUSH
10568: CALL_OW 264
10572: PUSH
10573: LD_INT 6
10575: PUSH
10576: LD_INT 46
10578: PUSH
10579: EMPTY
10580: LIST
10581: LIST
10582: IN
10583: IFFALSE 10604
// points := [ 32 , 120 , 70 ] ;
10585: LD_ADDR_VAR 0 9
10589: PUSH
10590: LD_INT 32
10592: PUSH
10593: LD_INT 120
10595: PUSH
10596: LD_INT 70
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: LIST
10603: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10604: LD_VAR 0 6
10608: PPUSH
10609: CALL_OW 264
10613: PUSH
10614: LD_INT 7
10616: PUSH
10617: LD_INT 28
10619: PUSH
10620: LD_INT 45
10622: PUSH
10623: LD_INT 92
10625: PUSH
10626: EMPTY
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: IN
10632: IFFALSE 10653
// points := [ 35 , 20 , 45 ] ;
10634: LD_ADDR_VAR 0 9
10638: PUSH
10639: LD_INT 35
10641: PUSH
10642: LD_INT 20
10644: PUSH
10645: LD_INT 45
10647: PUSH
10648: EMPTY
10649: LIST
10650: LIST
10651: LIST
10652: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10653: LD_VAR 0 6
10657: PPUSH
10658: CALL_OW 264
10662: PUSH
10663: LD_INT 47
10665: PUSH
10666: EMPTY
10667: LIST
10668: IN
10669: IFFALSE 10690
// points := [ 67 , 45 , 75 ] ;
10671: LD_ADDR_VAR 0 9
10675: PUSH
10676: LD_INT 67
10678: PUSH
10679: LD_INT 45
10681: PUSH
10682: LD_INT 75
10684: PUSH
10685: EMPTY
10686: LIST
10687: LIST
10688: LIST
10689: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10690: LD_VAR 0 6
10694: PPUSH
10695: CALL_OW 264
10699: PUSH
10700: LD_INT 26
10702: PUSH
10703: EMPTY
10704: LIST
10705: IN
10706: IFFALSE 10727
// points := [ 120 , 30 , 80 ] ;
10708: LD_ADDR_VAR 0 9
10712: PUSH
10713: LD_INT 120
10715: PUSH
10716: LD_INT 30
10718: PUSH
10719: LD_INT 80
10721: PUSH
10722: EMPTY
10723: LIST
10724: LIST
10725: LIST
10726: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10727: LD_VAR 0 6
10731: PPUSH
10732: CALL_OW 264
10736: PUSH
10737: LD_INT 22
10739: PUSH
10740: EMPTY
10741: LIST
10742: IN
10743: IFFALSE 10764
// points := [ 40 , 1 , 1 ] ;
10745: LD_ADDR_VAR 0 9
10749: PUSH
10750: LD_INT 40
10752: PUSH
10753: LD_INT 1
10755: PUSH
10756: LD_INT 1
10758: PUSH
10759: EMPTY
10760: LIST
10761: LIST
10762: LIST
10763: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10764: LD_VAR 0 6
10768: PPUSH
10769: CALL_OW 264
10773: PUSH
10774: LD_INT 29
10776: PUSH
10777: EMPTY
10778: LIST
10779: IN
10780: IFFALSE 10801
// points := [ 70 , 200 , 400 ] ;
10782: LD_ADDR_VAR 0 9
10786: PUSH
10787: LD_INT 70
10789: PUSH
10790: LD_INT 200
10792: PUSH
10793: LD_INT 400
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: LIST
10800: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10801: LD_VAR 0 6
10805: PPUSH
10806: CALL_OW 264
10810: PUSH
10811: LD_INT 14
10813: PUSH
10814: LD_INT 53
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: IN
10821: IFFALSE 10842
// points := [ 40 , 10 , 20 ] ;
10823: LD_ADDR_VAR 0 9
10827: PUSH
10828: LD_INT 40
10830: PUSH
10831: LD_INT 10
10833: PUSH
10834: LD_INT 20
10836: PUSH
10837: EMPTY
10838: LIST
10839: LIST
10840: LIST
10841: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10842: LD_VAR 0 6
10846: PPUSH
10847: CALL_OW 264
10851: PUSH
10852: LD_INT 9
10854: PUSH
10855: EMPTY
10856: LIST
10857: IN
10858: IFFALSE 10879
// points := [ 5 , 70 , 20 ] ;
10860: LD_ADDR_VAR 0 9
10864: PUSH
10865: LD_INT 5
10867: PUSH
10868: LD_INT 70
10870: PUSH
10871: LD_INT 20
10873: PUSH
10874: EMPTY
10875: LIST
10876: LIST
10877: LIST
10878: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10879: LD_VAR 0 6
10883: PPUSH
10884: CALL_OW 264
10888: PUSH
10889: LD_INT 10
10891: PUSH
10892: EMPTY
10893: LIST
10894: IN
10895: IFFALSE 10916
// points := [ 35 , 110 , 70 ] ;
10897: LD_ADDR_VAR 0 9
10901: PUSH
10902: LD_INT 35
10904: PUSH
10905: LD_INT 110
10907: PUSH
10908: LD_INT 70
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: LIST
10915: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10916: LD_VAR 0 6
10920: PPUSH
10921: CALL_OW 265
10925: PUSH
10926: LD_INT 25
10928: EQUAL
10929: IFFALSE 10950
// points := [ 80 , 65 , 100 ] ;
10931: LD_ADDR_VAR 0 9
10935: PUSH
10936: LD_INT 80
10938: PUSH
10939: LD_INT 65
10941: PUSH
10942: LD_INT 100
10944: PUSH
10945: EMPTY
10946: LIST
10947: LIST
10948: LIST
10949: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10950: LD_VAR 0 6
10954: PPUSH
10955: CALL_OW 263
10959: PUSH
10960: LD_INT 1
10962: EQUAL
10963: IFFALSE 10998
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10965: LD_ADDR_VAR 0 10
10969: PUSH
10970: LD_VAR 0 10
10974: PUSH
10975: LD_VAR 0 6
10979: PPUSH
10980: CALL_OW 311
10984: PPUSH
10985: LD_INT 3
10987: PPUSH
10988: CALL_OW 259
10992: PUSH
10993: LD_INT 4
10995: MUL
10996: MUL
10997: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10998: LD_VAR 0 6
11002: PPUSH
11003: CALL_OW 263
11007: PUSH
11008: LD_INT 2
11010: EQUAL
11011: IFFALSE 11062
// begin j := IsControledBy ( i ) ;
11013: LD_ADDR_VAR 0 7
11017: PUSH
11018: LD_VAR 0 6
11022: PPUSH
11023: CALL_OW 312
11027: ST_TO_ADDR
// if j then
11028: LD_VAR 0 7
11032: IFFALSE 11062
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
11034: LD_ADDR_VAR 0 10
11038: PUSH
11039: LD_VAR 0 10
11043: PUSH
11044: LD_VAR 0 7
11048: PPUSH
11049: LD_INT 3
11051: PPUSH
11052: CALL_OW 259
11056: PUSH
11057: LD_INT 3
11059: MUL
11060: MUL
11061: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
11062: LD_VAR 0 6
11066: PPUSH
11067: CALL_OW 264
11071: PUSH
11072: LD_INT 5
11074: PUSH
11075: LD_INT 6
11077: PUSH
11078: LD_INT 46
11080: PUSH
11081: LD_INT 44
11083: PUSH
11084: LD_INT 47
11086: PUSH
11087: LD_INT 45
11089: PUSH
11090: LD_INT 28
11092: PUSH
11093: LD_INT 7
11095: PUSH
11096: LD_INT 27
11098: PUSH
11099: LD_INT 29
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: IN
11114: PUSH
11115: LD_VAR 0 1
11119: PPUSH
11120: LD_INT 52
11122: PPUSH
11123: CALL_OW 321
11127: PUSH
11128: LD_INT 2
11130: EQUAL
11131: AND
11132: IFFALSE 11149
// bpoints := bpoints * 1.2 ;
11134: LD_ADDR_VAR 0 10
11138: PUSH
11139: LD_VAR 0 10
11143: PUSH
11144: LD_REAL  1.20000000000000E+0000
11147: MUL
11148: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
11149: LD_VAR 0 6
11153: PPUSH
11154: CALL_OW 264
11158: PUSH
11159: LD_INT 6
11161: PUSH
11162: LD_INT 46
11164: PUSH
11165: LD_INT 47
11167: PUSH
11168: EMPTY
11169: LIST
11170: LIST
11171: LIST
11172: IN
11173: IFFALSE 11190
// bpoints := bpoints * 1.2 ;
11175: LD_ADDR_VAR 0 10
11179: PUSH
11180: LD_VAR 0 10
11184: PUSH
11185: LD_REAL  1.20000000000000E+0000
11188: MUL
11189: ST_TO_ADDR
// end ; unit_building :
11190: GO 11204
11192: LD_INT 3
11194: DOUBLE
11195: EQUAL
11196: IFTRUE 11200
11198: GO 11203
11200: POP
// ; end ;
11201: GO 11204
11203: POP
// for j = 1 to 3 do
11204: LD_ADDR_VAR 0 7
11208: PUSH
11209: DOUBLE
11210: LD_INT 1
11212: DEC
11213: ST_TO_ADDR
11214: LD_INT 3
11216: PUSH
11217: FOR_TO
11218: IFFALSE 11271
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
11220: LD_ADDR_VAR 0 5
11224: PUSH
11225: LD_VAR 0 5
11229: PPUSH
11230: LD_VAR 0 7
11234: PPUSH
11235: LD_VAR 0 5
11239: PUSH
11240: LD_VAR 0 7
11244: ARRAY
11245: PUSH
11246: LD_VAR 0 9
11250: PUSH
11251: LD_VAR 0 7
11255: ARRAY
11256: PUSH
11257: LD_VAR 0 10
11261: MUL
11262: PLUS
11263: PPUSH
11264: CALL_OW 1
11268: ST_TO_ADDR
11269: GO 11217
11271: POP
11272: POP
// end ;
11273: GO 9752
11275: POP
11276: POP
// result := Replace ( result , 4 , tmp ) ;
11277: LD_ADDR_VAR 0 5
11281: PUSH
11282: LD_VAR 0 5
11286: PPUSH
11287: LD_INT 4
11289: PPUSH
11290: LD_VAR 0 8
11294: PPUSH
11295: CALL_OW 1
11299: ST_TO_ADDR
// end ;
11300: LD_VAR 0 5
11304: RET
// export function DangerAtRange ( unit , range ) ; begin
11305: LD_INT 0
11307: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11308: LD_ADDR_VAR 0 3
11312: PUSH
11313: LD_VAR 0 1
11317: PPUSH
11318: CALL_OW 255
11322: PPUSH
11323: LD_VAR 0 1
11327: PPUSH
11328: CALL_OW 250
11332: PPUSH
11333: LD_VAR 0 1
11337: PPUSH
11338: CALL_OW 251
11342: PPUSH
11343: LD_VAR 0 2
11347: PPUSH
11348: CALL 9604 0 4
11352: ST_TO_ADDR
// end ;
11353: LD_VAR 0 3
11357: RET
// export function DangerInArea ( side , area ) ; begin
11358: LD_INT 0
11360: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11361: LD_ADDR_VAR 0 3
11365: PUSH
11366: LD_VAR 0 2
11370: PPUSH
11371: LD_INT 81
11373: PUSH
11374: LD_VAR 0 1
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: PPUSH
11383: CALL_OW 70
11387: ST_TO_ADDR
// end ;
11388: LD_VAR 0 3
11392: RET
// export function IsExtension ( b ) ; begin
11393: LD_INT 0
11395: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11396: LD_ADDR_VAR 0 2
11400: PUSH
11401: LD_VAR 0 1
11405: PUSH
11406: LD_INT 23
11408: PUSH
11409: LD_INT 20
11411: PUSH
11412: LD_INT 22
11414: PUSH
11415: LD_INT 17
11417: PUSH
11418: LD_INT 24
11420: PUSH
11421: LD_INT 21
11423: PUSH
11424: LD_INT 19
11426: PUSH
11427: LD_INT 16
11429: PUSH
11430: LD_INT 25
11432: PUSH
11433: LD_INT 18
11435: PUSH
11436: EMPTY
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: IN
11448: ST_TO_ADDR
// end ;
11449: LD_VAR 0 2
11453: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11454: LD_INT 0
11456: PPUSH
11457: PPUSH
11458: PPUSH
// result := [ ] ;
11459: LD_ADDR_VAR 0 4
11463: PUSH
11464: EMPTY
11465: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11466: LD_ADDR_VAR 0 5
11470: PUSH
11471: LD_VAR 0 2
11475: PPUSH
11476: LD_INT 21
11478: PUSH
11479: LD_INT 3
11481: PUSH
11482: EMPTY
11483: LIST
11484: LIST
11485: PPUSH
11486: CALL_OW 70
11490: ST_TO_ADDR
// if not tmp then
11491: LD_VAR 0 5
11495: NOT
11496: IFFALSE 11500
// exit ;
11498: GO 11564
// if checkLink then
11500: LD_VAR 0 3
11504: IFFALSE 11554
// begin for i in tmp do
11506: LD_ADDR_VAR 0 6
11510: PUSH
11511: LD_VAR 0 5
11515: PUSH
11516: FOR_IN
11517: IFFALSE 11552
// if GetBase ( i ) <> base then
11519: LD_VAR 0 6
11523: PPUSH
11524: CALL_OW 274
11528: PUSH
11529: LD_VAR 0 1
11533: NONEQUAL
11534: IFFALSE 11550
// ComLinkToBase ( base , i ) ;
11536: LD_VAR 0 1
11540: PPUSH
11541: LD_VAR 0 6
11545: PPUSH
11546: CALL_OW 169
11550: GO 11516
11552: POP
11553: POP
// end ; result := tmp ;
11554: LD_ADDR_VAR 0 4
11558: PUSH
11559: LD_VAR 0 5
11563: ST_TO_ADDR
// end ;
11564: LD_VAR 0 4
11568: RET
// export function ComComplete ( units , b ) ; var i ; begin
11569: LD_INT 0
11571: PPUSH
11572: PPUSH
// if not units then
11573: LD_VAR 0 1
11577: NOT
11578: IFFALSE 11582
// exit ;
11580: GO 11672
// for i in units do
11582: LD_ADDR_VAR 0 4
11586: PUSH
11587: LD_VAR 0 1
11591: PUSH
11592: FOR_IN
11593: IFFALSE 11670
// if BuildingStatus ( b ) = bs_build then
11595: LD_VAR 0 2
11599: PPUSH
11600: CALL_OW 461
11604: PUSH
11605: LD_INT 1
11607: EQUAL
11608: IFFALSE 11668
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11610: LD_VAR 0 4
11614: PPUSH
11615: LD_STRING h
11617: PUSH
11618: LD_VAR 0 2
11622: PPUSH
11623: CALL_OW 250
11627: PUSH
11628: LD_VAR 0 2
11632: PPUSH
11633: CALL_OW 251
11637: PUSH
11638: LD_VAR 0 2
11642: PUSH
11643: LD_INT 0
11645: PUSH
11646: LD_INT 0
11648: PUSH
11649: LD_INT 0
11651: PUSH
11652: EMPTY
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: PUSH
11661: EMPTY
11662: LIST
11663: PPUSH
11664: CALL_OW 446
11668: GO 11592
11670: POP
11671: POP
// end ;
11672: LD_VAR 0 3
11676: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11677: LD_INT 0
11679: PPUSH
11680: PPUSH
11681: PPUSH
11682: PPUSH
11683: PPUSH
11684: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11685: LD_VAR 0 1
11689: NOT
11690: PUSH
11691: LD_VAR 0 1
11695: PPUSH
11696: CALL_OW 263
11700: PUSH
11701: LD_INT 2
11703: NONEQUAL
11704: OR
11705: IFFALSE 11709
// exit ;
11707: GO 12025
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11709: LD_ADDR_VAR 0 6
11713: PUSH
11714: LD_INT 22
11716: PUSH
11717: LD_VAR 0 1
11721: PPUSH
11722: CALL_OW 255
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: PUSH
11731: LD_INT 2
11733: PUSH
11734: LD_INT 30
11736: PUSH
11737: LD_INT 36
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: PUSH
11744: LD_INT 34
11746: PUSH
11747: LD_INT 31
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: PUSH
11754: EMPTY
11755: LIST
11756: LIST
11757: LIST
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: PPUSH
11763: CALL_OW 69
11767: ST_TO_ADDR
// if not tmp then
11768: LD_VAR 0 6
11772: NOT
11773: IFFALSE 11777
// exit ;
11775: GO 12025
// result := [ ] ;
11777: LD_ADDR_VAR 0 2
11781: PUSH
11782: EMPTY
11783: ST_TO_ADDR
// for i in tmp do
11784: LD_ADDR_VAR 0 3
11788: PUSH
11789: LD_VAR 0 6
11793: PUSH
11794: FOR_IN
11795: IFFALSE 11866
// begin t := UnitsInside ( i ) ;
11797: LD_ADDR_VAR 0 4
11801: PUSH
11802: LD_VAR 0 3
11806: PPUSH
11807: CALL_OW 313
11811: ST_TO_ADDR
// if t then
11812: LD_VAR 0 4
11816: IFFALSE 11864
// for j in t do
11818: LD_ADDR_VAR 0 7
11822: PUSH
11823: LD_VAR 0 4
11827: PUSH
11828: FOR_IN
11829: IFFALSE 11862
// result := Replace ( result , result + 1 , j ) ;
11831: LD_ADDR_VAR 0 2
11835: PUSH
11836: LD_VAR 0 2
11840: PPUSH
11841: LD_VAR 0 2
11845: PUSH
11846: LD_INT 1
11848: PLUS
11849: PPUSH
11850: LD_VAR 0 7
11854: PPUSH
11855: CALL_OW 1
11859: ST_TO_ADDR
11860: GO 11828
11862: POP
11863: POP
// end ;
11864: GO 11794
11866: POP
11867: POP
// if not result then
11868: LD_VAR 0 2
11872: NOT
11873: IFFALSE 11877
// exit ;
11875: GO 12025
// mech := result [ 1 ] ;
11877: LD_ADDR_VAR 0 5
11881: PUSH
11882: LD_VAR 0 2
11886: PUSH
11887: LD_INT 1
11889: ARRAY
11890: ST_TO_ADDR
// if result > 1 then
11891: LD_VAR 0 2
11895: PUSH
11896: LD_INT 1
11898: GREATER
11899: IFFALSE 12011
// begin for i = 2 to result do
11901: LD_ADDR_VAR 0 3
11905: PUSH
11906: DOUBLE
11907: LD_INT 2
11909: DEC
11910: ST_TO_ADDR
11911: LD_VAR 0 2
11915: PUSH
11916: FOR_TO
11917: IFFALSE 12009
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11919: LD_ADDR_VAR 0 4
11923: PUSH
11924: LD_VAR 0 2
11928: PUSH
11929: LD_VAR 0 3
11933: ARRAY
11934: PPUSH
11935: LD_INT 3
11937: PPUSH
11938: CALL_OW 259
11942: PUSH
11943: LD_VAR 0 2
11947: PUSH
11948: LD_VAR 0 3
11952: ARRAY
11953: PPUSH
11954: CALL_OW 432
11958: MINUS
11959: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11960: LD_VAR 0 4
11964: PUSH
11965: LD_VAR 0 5
11969: PPUSH
11970: LD_INT 3
11972: PPUSH
11973: CALL_OW 259
11977: PUSH
11978: LD_VAR 0 5
11982: PPUSH
11983: CALL_OW 432
11987: MINUS
11988: GREATEREQUAL
11989: IFFALSE 12007
// mech := result [ i ] ;
11991: LD_ADDR_VAR 0 5
11995: PUSH
11996: LD_VAR 0 2
12000: PUSH
12001: LD_VAR 0 3
12005: ARRAY
12006: ST_TO_ADDR
// end ;
12007: GO 11916
12009: POP
12010: POP
// end ; ComLinkTo ( vehicle , mech ) ;
12011: LD_VAR 0 1
12015: PPUSH
12016: LD_VAR 0 5
12020: PPUSH
12021: CALL_OW 135
// end ;
12025: LD_VAR 0 2
12029: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
12030: LD_INT 0
12032: PPUSH
12033: PPUSH
12034: PPUSH
12035: PPUSH
12036: PPUSH
12037: PPUSH
12038: PPUSH
12039: PPUSH
12040: PPUSH
12041: PPUSH
12042: PPUSH
12043: PPUSH
12044: PPUSH
// result := [ ] ;
12045: LD_ADDR_VAR 0 7
12049: PUSH
12050: EMPTY
12051: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
12052: LD_VAR 0 1
12056: PPUSH
12057: CALL_OW 266
12061: PUSH
12062: LD_INT 0
12064: PUSH
12065: LD_INT 1
12067: PUSH
12068: EMPTY
12069: LIST
12070: LIST
12071: IN
12072: NOT
12073: IFFALSE 12077
// exit ;
12075: GO 13711
// if name then
12077: LD_VAR 0 3
12081: IFFALSE 12097
// SetBName ( base_dep , name ) ;
12083: LD_VAR 0 1
12087: PPUSH
12088: LD_VAR 0 3
12092: PPUSH
12093: CALL_OW 500
// base := GetBase ( base_dep ) ;
12097: LD_ADDR_VAR 0 15
12101: PUSH
12102: LD_VAR 0 1
12106: PPUSH
12107: CALL_OW 274
12111: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12112: LD_ADDR_VAR 0 16
12116: PUSH
12117: LD_VAR 0 1
12121: PPUSH
12122: CALL_OW 255
12126: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
12127: LD_ADDR_VAR 0 17
12131: PUSH
12132: LD_VAR 0 1
12136: PPUSH
12137: CALL_OW 248
12141: ST_TO_ADDR
// if sources then
12142: LD_VAR 0 5
12146: IFFALSE 12193
// for i = 1 to 3 do
12148: LD_ADDR_VAR 0 8
12152: PUSH
12153: DOUBLE
12154: LD_INT 1
12156: DEC
12157: ST_TO_ADDR
12158: LD_INT 3
12160: PUSH
12161: FOR_TO
12162: IFFALSE 12191
// AddResourceType ( base , i , sources [ i ] ) ;
12164: LD_VAR 0 15
12168: PPUSH
12169: LD_VAR 0 8
12173: PPUSH
12174: LD_VAR 0 5
12178: PUSH
12179: LD_VAR 0 8
12183: ARRAY
12184: PPUSH
12185: CALL_OW 276
12189: GO 12161
12191: POP
12192: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
12193: LD_ADDR_VAR 0 18
12197: PUSH
12198: LD_VAR 0 15
12202: PPUSH
12203: LD_VAR 0 2
12207: PPUSH
12208: LD_INT 1
12210: PPUSH
12211: CALL 11454 0 3
12215: ST_TO_ADDR
// InitHc ;
12216: CALL_OW 19
// InitUc ;
12220: CALL_OW 18
// uc_side := side ;
12224: LD_ADDR_OWVAR 20
12228: PUSH
12229: LD_VAR 0 16
12233: ST_TO_ADDR
// uc_nation := nation ;
12234: LD_ADDR_OWVAR 21
12238: PUSH
12239: LD_VAR 0 17
12243: ST_TO_ADDR
// if buildings then
12244: LD_VAR 0 18
12248: IFFALSE 13570
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12250: LD_ADDR_VAR 0 19
12254: PUSH
12255: LD_VAR 0 18
12259: PPUSH
12260: LD_INT 2
12262: PUSH
12263: LD_INT 30
12265: PUSH
12266: LD_INT 29
12268: PUSH
12269: EMPTY
12270: LIST
12271: LIST
12272: PUSH
12273: LD_INT 30
12275: PUSH
12276: LD_INT 30
12278: PUSH
12279: EMPTY
12280: LIST
12281: LIST
12282: PUSH
12283: EMPTY
12284: LIST
12285: LIST
12286: LIST
12287: PPUSH
12288: CALL_OW 72
12292: ST_TO_ADDR
// if tmp then
12293: LD_VAR 0 19
12297: IFFALSE 12345
// for i in tmp do
12299: LD_ADDR_VAR 0 8
12303: PUSH
12304: LD_VAR 0 19
12308: PUSH
12309: FOR_IN
12310: IFFALSE 12343
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12312: LD_VAR 0 8
12316: PPUSH
12317: CALL_OW 250
12321: PPUSH
12322: LD_VAR 0 8
12326: PPUSH
12327: CALL_OW 251
12331: PPUSH
12332: LD_VAR 0 16
12336: PPUSH
12337: CALL_OW 441
12341: GO 12309
12343: POP
12344: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12345: LD_VAR 0 18
12349: PPUSH
12350: LD_INT 2
12352: PUSH
12353: LD_INT 30
12355: PUSH
12356: LD_INT 32
12358: PUSH
12359: EMPTY
12360: LIST
12361: LIST
12362: PUSH
12363: LD_INT 30
12365: PUSH
12366: LD_INT 33
12368: PUSH
12369: EMPTY
12370: LIST
12371: LIST
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: LIST
12377: PPUSH
12378: CALL_OW 72
12382: IFFALSE 12470
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12384: LD_ADDR_VAR 0 8
12388: PUSH
12389: LD_VAR 0 18
12393: PPUSH
12394: LD_INT 2
12396: PUSH
12397: LD_INT 30
12399: PUSH
12400: LD_INT 32
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: PUSH
12407: LD_INT 30
12409: PUSH
12410: LD_INT 33
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: LIST
12421: PPUSH
12422: CALL_OW 72
12426: PUSH
12427: FOR_IN
12428: IFFALSE 12468
// begin if not GetBWeapon ( i ) then
12430: LD_VAR 0 8
12434: PPUSH
12435: CALL_OW 269
12439: NOT
12440: IFFALSE 12466
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12442: LD_VAR 0 8
12446: PPUSH
12447: LD_VAR 0 8
12451: PPUSH
12452: LD_VAR 0 2
12456: PPUSH
12457: CALL 13716 0 2
12461: PPUSH
12462: CALL_OW 431
// end ;
12466: GO 12427
12468: POP
12469: POP
// end ; for i = 1 to personel do
12470: LD_ADDR_VAR 0 8
12474: PUSH
12475: DOUBLE
12476: LD_INT 1
12478: DEC
12479: ST_TO_ADDR
12480: LD_VAR 0 6
12484: PUSH
12485: FOR_TO
12486: IFFALSE 13550
// begin if i > 4 then
12488: LD_VAR 0 8
12492: PUSH
12493: LD_INT 4
12495: GREATER
12496: IFFALSE 12500
// break ;
12498: GO 13550
// case i of 1 :
12500: LD_VAR 0 8
12504: PUSH
12505: LD_INT 1
12507: DOUBLE
12508: EQUAL
12509: IFTRUE 12513
12511: GO 12593
12513: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12514: LD_ADDR_VAR 0 12
12518: PUSH
12519: LD_VAR 0 18
12523: PPUSH
12524: LD_INT 22
12526: PUSH
12527: LD_VAR 0 16
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PUSH
12536: LD_INT 58
12538: PUSH
12539: EMPTY
12540: LIST
12541: PUSH
12542: LD_INT 2
12544: PUSH
12545: LD_INT 30
12547: PUSH
12548: LD_INT 32
12550: PUSH
12551: EMPTY
12552: LIST
12553: LIST
12554: PUSH
12555: LD_INT 30
12557: PUSH
12558: LD_INT 4
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: PUSH
12565: LD_INT 30
12567: PUSH
12568: LD_INT 5
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: PUSH
12581: EMPTY
12582: LIST
12583: LIST
12584: LIST
12585: PPUSH
12586: CALL_OW 72
12590: ST_TO_ADDR
12591: GO 12815
12593: LD_INT 2
12595: DOUBLE
12596: EQUAL
12597: IFTRUE 12601
12599: GO 12663
12601: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12602: LD_ADDR_VAR 0 12
12606: PUSH
12607: LD_VAR 0 18
12611: PPUSH
12612: LD_INT 22
12614: PUSH
12615: LD_VAR 0 16
12619: PUSH
12620: EMPTY
12621: LIST
12622: LIST
12623: PUSH
12624: LD_INT 2
12626: PUSH
12627: LD_INT 30
12629: PUSH
12630: LD_INT 0
12632: PUSH
12633: EMPTY
12634: LIST
12635: LIST
12636: PUSH
12637: LD_INT 30
12639: PUSH
12640: LD_INT 1
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: PUSH
12647: EMPTY
12648: LIST
12649: LIST
12650: LIST
12651: PUSH
12652: EMPTY
12653: LIST
12654: LIST
12655: PPUSH
12656: CALL_OW 72
12660: ST_TO_ADDR
12661: GO 12815
12663: LD_INT 3
12665: DOUBLE
12666: EQUAL
12667: IFTRUE 12671
12669: GO 12733
12671: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12672: LD_ADDR_VAR 0 12
12676: PUSH
12677: LD_VAR 0 18
12681: PPUSH
12682: LD_INT 22
12684: PUSH
12685: LD_VAR 0 16
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: PUSH
12694: LD_INT 2
12696: PUSH
12697: LD_INT 30
12699: PUSH
12700: LD_INT 2
12702: PUSH
12703: EMPTY
12704: LIST
12705: LIST
12706: PUSH
12707: LD_INT 30
12709: PUSH
12710: LD_INT 3
12712: PUSH
12713: EMPTY
12714: LIST
12715: LIST
12716: PUSH
12717: EMPTY
12718: LIST
12719: LIST
12720: LIST
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: PPUSH
12726: CALL_OW 72
12730: ST_TO_ADDR
12731: GO 12815
12733: LD_INT 4
12735: DOUBLE
12736: EQUAL
12737: IFTRUE 12741
12739: GO 12814
12741: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12742: LD_ADDR_VAR 0 12
12746: PUSH
12747: LD_VAR 0 18
12751: PPUSH
12752: LD_INT 22
12754: PUSH
12755: LD_VAR 0 16
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: PUSH
12764: LD_INT 2
12766: PUSH
12767: LD_INT 30
12769: PUSH
12770: LD_INT 6
12772: PUSH
12773: EMPTY
12774: LIST
12775: LIST
12776: PUSH
12777: LD_INT 30
12779: PUSH
12780: LD_INT 7
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: PUSH
12787: LD_INT 30
12789: PUSH
12790: LD_INT 8
12792: PUSH
12793: EMPTY
12794: LIST
12795: LIST
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: PUSH
12803: EMPTY
12804: LIST
12805: LIST
12806: PPUSH
12807: CALL_OW 72
12811: ST_TO_ADDR
12812: GO 12815
12814: POP
// if i = 1 then
12815: LD_VAR 0 8
12819: PUSH
12820: LD_INT 1
12822: EQUAL
12823: IFFALSE 12934
// begin tmp := [ ] ;
12825: LD_ADDR_VAR 0 19
12829: PUSH
12830: EMPTY
12831: ST_TO_ADDR
// for j in f do
12832: LD_ADDR_VAR 0 9
12836: PUSH
12837: LD_VAR 0 12
12841: PUSH
12842: FOR_IN
12843: IFFALSE 12916
// if GetBType ( j ) = b_bunker then
12845: LD_VAR 0 9
12849: PPUSH
12850: CALL_OW 266
12854: PUSH
12855: LD_INT 32
12857: EQUAL
12858: IFFALSE 12885
// tmp := Insert ( tmp , 1 , j ) else
12860: LD_ADDR_VAR 0 19
12864: PUSH
12865: LD_VAR 0 19
12869: PPUSH
12870: LD_INT 1
12872: PPUSH
12873: LD_VAR 0 9
12877: PPUSH
12878: CALL_OW 2
12882: ST_TO_ADDR
12883: GO 12914
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12885: LD_ADDR_VAR 0 19
12889: PUSH
12890: LD_VAR 0 19
12894: PPUSH
12895: LD_VAR 0 19
12899: PUSH
12900: LD_INT 1
12902: PLUS
12903: PPUSH
12904: LD_VAR 0 9
12908: PPUSH
12909: CALL_OW 2
12913: ST_TO_ADDR
12914: GO 12842
12916: POP
12917: POP
// if tmp then
12918: LD_VAR 0 19
12922: IFFALSE 12934
// f := tmp ;
12924: LD_ADDR_VAR 0 12
12928: PUSH
12929: LD_VAR 0 19
12933: ST_TO_ADDR
// end ; x := personel [ i ] ;
12934: LD_ADDR_VAR 0 13
12938: PUSH
12939: LD_VAR 0 6
12943: PUSH
12944: LD_VAR 0 8
12948: ARRAY
12949: ST_TO_ADDR
// if x = - 1 then
12950: LD_VAR 0 13
12954: PUSH
12955: LD_INT 1
12957: NEG
12958: EQUAL
12959: IFFALSE 13168
// begin for j in f do
12961: LD_ADDR_VAR 0 9
12965: PUSH
12966: LD_VAR 0 12
12970: PUSH
12971: FOR_IN
12972: IFFALSE 13164
// repeat InitHc ;
12974: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12978: LD_VAR 0 9
12982: PPUSH
12983: CALL_OW 266
12987: PUSH
12988: LD_INT 5
12990: EQUAL
12991: IFFALSE 13061
// begin if UnitsInside ( j ) < 3 then
12993: LD_VAR 0 9
12997: PPUSH
12998: CALL_OW 313
13002: PUSH
13003: LD_INT 3
13005: LESS
13006: IFFALSE 13042
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13008: LD_INT 0
13010: PPUSH
13011: LD_INT 5
13013: PUSH
13014: LD_INT 8
13016: PUSH
13017: LD_INT 9
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: LIST
13024: PUSH
13025: LD_VAR 0 17
13029: ARRAY
13030: PPUSH
13031: LD_VAR 0 4
13035: PPUSH
13036: CALL_OW 380
13040: GO 13059
// PrepareHuman ( false , i , skill ) ;
13042: LD_INT 0
13044: PPUSH
13045: LD_VAR 0 8
13049: PPUSH
13050: LD_VAR 0 4
13054: PPUSH
13055: CALL_OW 380
// end else
13059: GO 13078
// PrepareHuman ( false , i , skill ) ;
13061: LD_INT 0
13063: PPUSH
13064: LD_VAR 0 8
13068: PPUSH
13069: LD_VAR 0 4
13073: PPUSH
13074: CALL_OW 380
// un := CreateHuman ;
13078: LD_ADDR_VAR 0 14
13082: PUSH
13083: CALL_OW 44
13087: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13088: LD_ADDR_VAR 0 7
13092: PUSH
13093: LD_VAR 0 7
13097: PPUSH
13098: LD_INT 1
13100: PPUSH
13101: LD_VAR 0 14
13105: PPUSH
13106: CALL_OW 2
13110: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13111: LD_VAR 0 14
13115: PPUSH
13116: LD_VAR 0 9
13120: PPUSH
13121: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13125: LD_VAR 0 9
13129: PPUSH
13130: CALL_OW 313
13134: PUSH
13135: LD_INT 6
13137: EQUAL
13138: PUSH
13139: LD_VAR 0 9
13143: PPUSH
13144: CALL_OW 266
13148: PUSH
13149: LD_INT 32
13151: PUSH
13152: LD_INT 31
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: IN
13159: OR
13160: IFFALSE 12974
13162: GO 12971
13164: POP
13165: POP
// end else
13166: GO 13548
// for j = 1 to x do
13168: LD_ADDR_VAR 0 9
13172: PUSH
13173: DOUBLE
13174: LD_INT 1
13176: DEC
13177: ST_TO_ADDR
13178: LD_VAR 0 13
13182: PUSH
13183: FOR_TO
13184: IFFALSE 13546
// begin InitHc ;
13186: CALL_OW 19
// if not f then
13190: LD_VAR 0 12
13194: NOT
13195: IFFALSE 13284
// begin PrepareHuman ( false , i , skill ) ;
13197: LD_INT 0
13199: PPUSH
13200: LD_VAR 0 8
13204: PPUSH
13205: LD_VAR 0 4
13209: PPUSH
13210: CALL_OW 380
// un := CreateHuman ;
13214: LD_ADDR_VAR 0 14
13218: PUSH
13219: CALL_OW 44
13223: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13224: LD_ADDR_VAR 0 7
13228: PUSH
13229: LD_VAR 0 7
13233: PPUSH
13234: LD_INT 1
13236: PPUSH
13237: LD_VAR 0 14
13241: PPUSH
13242: CALL_OW 2
13246: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13247: LD_VAR 0 14
13251: PPUSH
13252: LD_VAR 0 1
13256: PPUSH
13257: CALL_OW 250
13261: PPUSH
13262: LD_VAR 0 1
13266: PPUSH
13267: CALL_OW 251
13271: PPUSH
13272: LD_INT 10
13274: PPUSH
13275: LD_INT 0
13277: PPUSH
13278: CALL_OW 50
// continue ;
13282: GO 13183
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13284: LD_VAR 0 12
13288: PUSH
13289: LD_INT 1
13291: ARRAY
13292: PPUSH
13293: CALL_OW 313
13297: PUSH
13298: LD_VAR 0 12
13302: PUSH
13303: LD_INT 1
13305: ARRAY
13306: PPUSH
13307: CALL_OW 266
13311: PUSH
13312: LD_INT 32
13314: PUSH
13315: LD_INT 31
13317: PUSH
13318: EMPTY
13319: LIST
13320: LIST
13321: IN
13322: AND
13323: PUSH
13324: LD_VAR 0 12
13328: PUSH
13329: LD_INT 1
13331: ARRAY
13332: PPUSH
13333: CALL_OW 313
13337: PUSH
13338: LD_INT 6
13340: EQUAL
13341: OR
13342: IFFALSE 13362
// f := Delete ( f , 1 ) ;
13344: LD_ADDR_VAR 0 12
13348: PUSH
13349: LD_VAR 0 12
13353: PPUSH
13354: LD_INT 1
13356: PPUSH
13357: CALL_OW 3
13361: ST_TO_ADDR
// if not f then
13362: LD_VAR 0 12
13366: NOT
13367: IFFALSE 13385
// begin x := x + 2 ;
13369: LD_ADDR_VAR 0 13
13373: PUSH
13374: LD_VAR 0 13
13378: PUSH
13379: LD_INT 2
13381: PLUS
13382: ST_TO_ADDR
// continue ;
13383: GO 13183
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13385: LD_VAR 0 12
13389: PUSH
13390: LD_INT 1
13392: ARRAY
13393: PPUSH
13394: CALL_OW 266
13398: PUSH
13399: LD_INT 5
13401: EQUAL
13402: IFFALSE 13476
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13404: LD_VAR 0 12
13408: PUSH
13409: LD_INT 1
13411: ARRAY
13412: PPUSH
13413: CALL_OW 313
13417: PUSH
13418: LD_INT 3
13420: LESS
13421: IFFALSE 13457
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13423: LD_INT 0
13425: PPUSH
13426: LD_INT 5
13428: PUSH
13429: LD_INT 8
13431: PUSH
13432: LD_INT 9
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: LIST
13439: PUSH
13440: LD_VAR 0 17
13444: ARRAY
13445: PPUSH
13446: LD_VAR 0 4
13450: PPUSH
13451: CALL_OW 380
13455: GO 13474
// PrepareHuman ( false , i , skill ) ;
13457: LD_INT 0
13459: PPUSH
13460: LD_VAR 0 8
13464: PPUSH
13465: LD_VAR 0 4
13469: PPUSH
13470: CALL_OW 380
// end else
13474: GO 13493
// PrepareHuman ( false , i , skill ) ;
13476: LD_INT 0
13478: PPUSH
13479: LD_VAR 0 8
13483: PPUSH
13484: LD_VAR 0 4
13488: PPUSH
13489: CALL_OW 380
// un := CreateHuman ;
13493: LD_ADDR_VAR 0 14
13497: PUSH
13498: CALL_OW 44
13502: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13503: LD_ADDR_VAR 0 7
13507: PUSH
13508: LD_VAR 0 7
13512: PPUSH
13513: LD_INT 1
13515: PPUSH
13516: LD_VAR 0 14
13520: PPUSH
13521: CALL_OW 2
13525: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13526: LD_VAR 0 14
13530: PPUSH
13531: LD_VAR 0 12
13535: PUSH
13536: LD_INT 1
13538: ARRAY
13539: PPUSH
13540: CALL_OW 52
// end ;
13544: GO 13183
13546: POP
13547: POP
// end ;
13548: GO 12485
13550: POP
13551: POP
// result := result ^ buildings ;
13552: LD_ADDR_VAR 0 7
13556: PUSH
13557: LD_VAR 0 7
13561: PUSH
13562: LD_VAR 0 18
13566: ADD
13567: ST_TO_ADDR
// end else
13568: GO 13711
// begin for i = 1 to personel do
13570: LD_ADDR_VAR 0 8
13574: PUSH
13575: DOUBLE
13576: LD_INT 1
13578: DEC
13579: ST_TO_ADDR
13580: LD_VAR 0 6
13584: PUSH
13585: FOR_TO
13586: IFFALSE 13709
// begin if i > 4 then
13588: LD_VAR 0 8
13592: PUSH
13593: LD_INT 4
13595: GREATER
13596: IFFALSE 13600
// break ;
13598: GO 13709
// x := personel [ i ] ;
13600: LD_ADDR_VAR 0 13
13604: PUSH
13605: LD_VAR 0 6
13609: PUSH
13610: LD_VAR 0 8
13614: ARRAY
13615: ST_TO_ADDR
// if x = - 1 then
13616: LD_VAR 0 13
13620: PUSH
13621: LD_INT 1
13623: NEG
13624: EQUAL
13625: IFFALSE 13629
// continue ;
13627: GO 13585
// PrepareHuman ( false , i , skill ) ;
13629: LD_INT 0
13631: PPUSH
13632: LD_VAR 0 8
13636: PPUSH
13637: LD_VAR 0 4
13641: PPUSH
13642: CALL_OW 380
// un := CreateHuman ;
13646: LD_ADDR_VAR 0 14
13650: PUSH
13651: CALL_OW 44
13655: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13656: LD_VAR 0 14
13660: PPUSH
13661: LD_VAR 0 1
13665: PPUSH
13666: CALL_OW 250
13670: PPUSH
13671: LD_VAR 0 1
13675: PPUSH
13676: CALL_OW 251
13680: PPUSH
13681: LD_INT 10
13683: PPUSH
13684: LD_INT 0
13686: PPUSH
13687: CALL_OW 50
// result := result ^ un ;
13691: LD_ADDR_VAR 0 7
13695: PUSH
13696: LD_VAR 0 7
13700: PUSH
13701: LD_VAR 0 14
13705: ADD
13706: ST_TO_ADDR
// end ;
13707: GO 13585
13709: POP
13710: POP
// end ; end ;
13711: LD_VAR 0 7
13715: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13716: LD_INT 0
13718: PPUSH
13719: PPUSH
13720: PPUSH
13721: PPUSH
13722: PPUSH
13723: PPUSH
13724: PPUSH
13725: PPUSH
13726: PPUSH
13727: PPUSH
13728: PPUSH
13729: PPUSH
13730: PPUSH
13731: PPUSH
13732: PPUSH
13733: PPUSH
// result := false ;
13734: LD_ADDR_VAR 0 3
13738: PUSH
13739: LD_INT 0
13741: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13742: LD_VAR 0 1
13746: NOT
13747: PUSH
13748: LD_VAR 0 1
13752: PPUSH
13753: CALL_OW 266
13757: PUSH
13758: LD_INT 32
13760: PUSH
13761: LD_INT 33
13763: PUSH
13764: EMPTY
13765: LIST
13766: LIST
13767: IN
13768: NOT
13769: OR
13770: IFFALSE 13774
// exit ;
13772: GO 14883
// nat := GetNation ( tower ) ;
13774: LD_ADDR_VAR 0 12
13778: PUSH
13779: LD_VAR 0 1
13783: PPUSH
13784: CALL_OW 248
13788: ST_TO_ADDR
// side := GetSide ( tower ) ;
13789: LD_ADDR_VAR 0 16
13793: PUSH
13794: LD_VAR 0 1
13798: PPUSH
13799: CALL_OW 255
13803: ST_TO_ADDR
// x := GetX ( tower ) ;
13804: LD_ADDR_VAR 0 10
13808: PUSH
13809: LD_VAR 0 1
13813: PPUSH
13814: CALL_OW 250
13818: ST_TO_ADDR
// y := GetY ( tower ) ;
13819: LD_ADDR_VAR 0 11
13823: PUSH
13824: LD_VAR 0 1
13828: PPUSH
13829: CALL_OW 251
13833: ST_TO_ADDR
// if not x or not y then
13834: LD_VAR 0 10
13838: NOT
13839: PUSH
13840: LD_VAR 0 11
13844: NOT
13845: OR
13846: IFFALSE 13850
// exit ;
13848: GO 14883
// weapon := 0 ;
13850: LD_ADDR_VAR 0 18
13854: PUSH
13855: LD_INT 0
13857: ST_TO_ADDR
// fac_list := [ ] ;
13858: LD_ADDR_VAR 0 17
13862: PUSH
13863: EMPTY
13864: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13865: LD_ADDR_VAR 0 6
13869: PUSH
13870: LD_VAR 0 1
13874: PPUSH
13875: CALL_OW 274
13879: PPUSH
13880: LD_VAR 0 2
13884: PPUSH
13885: LD_INT 0
13887: PPUSH
13888: CALL 11454 0 3
13892: PPUSH
13893: LD_INT 30
13895: PUSH
13896: LD_INT 3
13898: PUSH
13899: EMPTY
13900: LIST
13901: LIST
13902: PPUSH
13903: CALL_OW 72
13907: ST_TO_ADDR
// if not factories then
13908: LD_VAR 0 6
13912: NOT
13913: IFFALSE 13917
// exit ;
13915: GO 14883
// for i in factories do
13917: LD_ADDR_VAR 0 8
13921: PUSH
13922: LD_VAR 0 6
13926: PUSH
13927: FOR_IN
13928: IFFALSE 13953
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13930: LD_ADDR_VAR 0 17
13934: PUSH
13935: LD_VAR 0 17
13939: PUSH
13940: LD_VAR 0 8
13944: PPUSH
13945: CALL_OW 478
13949: UNION
13950: ST_TO_ADDR
13951: GO 13927
13953: POP
13954: POP
// if not fac_list then
13955: LD_VAR 0 17
13959: NOT
13960: IFFALSE 13964
// exit ;
13962: GO 14883
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13964: LD_ADDR_VAR 0 5
13968: PUSH
13969: LD_INT 4
13971: PUSH
13972: LD_INT 5
13974: PUSH
13975: LD_INT 9
13977: PUSH
13978: LD_INT 10
13980: PUSH
13981: LD_INT 6
13983: PUSH
13984: LD_INT 7
13986: PUSH
13987: LD_INT 11
13989: PUSH
13990: EMPTY
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: PUSH
13999: LD_INT 27
14001: PUSH
14002: LD_INT 28
14004: PUSH
14005: LD_INT 26
14007: PUSH
14008: LD_INT 30
14010: PUSH
14011: EMPTY
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: PUSH
14017: LD_INT 43
14019: PUSH
14020: LD_INT 44
14022: PUSH
14023: LD_INT 46
14025: PUSH
14026: LD_INT 45
14028: PUSH
14029: LD_INT 47
14031: PUSH
14032: LD_INT 49
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: PUSH
14043: EMPTY
14044: LIST
14045: LIST
14046: LIST
14047: PUSH
14048: LD_VAR 0 12
14052: ARRAY
14053: ST_TO_ADDR
// list := list isect fac_list ;
14054: LD_ADDR_VAR 0 5
14058: PUSH
14059: LD_VAR 0 5
14063: PUSH
14064: LD_VAR 0 17
14068: ISECT
14069: ST_TO_ADDR
// if not list then
14070: LD_VAR 0 5
14074: NOT
14075: IFFALSE 14079
// exit ;
14077: GO 14883
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
14079: LD_VAR 0 12
14083: PUSH
14084: LD_INT 3
14086: EQUAL
14087: PUSH
14088: LD_INT 49
14090: PUSH
14091: LD_VAR 0 5
14095: IN
14096: AND
14097: PUSH
14098: LD_INT 31
14100: PPUSH
14101: LD_VAR 0 16
14105: PPUSH
14106: CALL_OW 321
14110: PUSH
14111: LD_INT 2
14113: EQUAL
14114: AND
14115: IFFALSE 14175
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
14117: LD_INT 22
14119: PUSH
14120: LD_VAR 0 16
14124: PUSH
14125: EMPTY
14126: LIST
14127: LIST
14128: PUSH
14129: LD_INT 35
14131: PUSH
14132: LD_INT 49
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: PUSH
14139: LD_INT 91
14141: PUSH
14142: LD_VAR 0 1
14146: PUSH
14147: LD_INT 10
14149: PUSH
14150: EMPTY
14151: LIST
14152: LIST
14153: LIST
14154: PUSH
14155: EMPTY
14156: LIST
14157: LIST
14158: LIST
14159: PPUSH
14160: CALL_OW 69
14164: NOT
14165: IFFALSE 14175
// weapon := ru_time_lapser ;
14167: LD_ADDR_VAR 0 18
14171: PUSH
14172: LD_INT 49
14174: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
14175: LD_VAR 0 12
14179: PUSH
14180: LD_INT 1
14182: PUSH
14183: LD_INT 2
14185: PUSH
14186: EMPTY
14187: LIST
14188: LIST
14189: IN
14190: PUSH
14191: LD_INT 11
14193: PUSH
14194: LD_VAR 0 5
14198: IN
14199: PUSH
14200: LD_INT 30
14202: PUSH
14203: LD_VAR 0 5
14207: IN
14208: OR
14209: AND
14210: PUSH
14211: LD_INT 6
14213: PPUSH
14214: LD_VAR 0 16
14218: PPUSH
14219: CALL_OW 321
14223: PUSH
14224: LD_INT 2
14226: EQUAL
14227: AND
14228: IFFALSE 14393
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
14230: LD_INT 22
14232: PUSH
14233: LD_VAR 0 16
14237: PUSH
14238: EMPTY
14239: LIST
14240: LIST
14241: PUSH
14242: LD_INT 2
14244: PUSH
14245: LD_INT 35
14247: PUSH
14248: LD_INT 11
14250: PUSH
14251: EMPTY
14252: LIST
14253: LIST
14254: PUSH
14255: LD_INT 35
14257: PUSH
14258: LD_INT 30
14260: PUSH
14261: EMPTY
14262: LIST
14263: LIST
14264: PUSH
14265: EMPTY
14266: LIST
14267: LIST
14268: LIST
14269: PUSH
14270: LD_INT 91
14272: PUSH
14273: LD_VAR 0 1
14277: PUSH
14278: LD_INT 18
14280: PUSH
14281: EMPTY
14282: LIST
14283: LIST
14284: LIST
14285: PUSH
14286: EMPTY
14287: LIST
14288: LIST
14289: LIST
14290: PPUSH
14291: CALL_OW 69
14295: NOT
14296: PUSH
14297: LD_INT 22
14299: PUSH
14300: LD_VAR 0 16
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: PUSH
14309: LD_INT 2
14311: PUSH
14312: LD_INT 30
14314: PUSH
14315: LD_INT 32
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: PUSH
14322: LD_INT 30
14324: PUSH
14325: LD_INT 33
14327: PUSH
14328: EMPTY
14329: LIST
14330: LIST
14331: PUSH
14332: EMPTY
14333: LIST
14334: LIST
14335: LIST
14336: PUSH
14337: LD_INT 91
14339: PUSH
14340: LD_VAR 0 1
14344: PUSH
14345: LD_INT 12
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: LIST
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: LIST
14357: PUSH
14358: EMPTY
14359: LIST
14360: PPUSH
14361: CALL_OW 69
14365: PUSH
14366: LD_INT 2
14368: GREATER
14369: AND
14370: IFFALSE 14393
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14372: LD_ADDR_VAR 0 18
14376: PUSH
14377: LD_INT 11
14379: PUSH
14380: LD_INT 30
14382: PUSH
14383: EMPTY
14384: LIST
14385: LIST
14386: PUSH
14387: LD_VAR 0 12
14391: ARRAY
14392: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14393: LD_VAR 0 18
14397: NOT
14398: PUSH
14399: LD_INT 40
14401: PPUSH
14402: LD_VAR 0 16
14406: PPUSH
14407: CALL_OW 321
14411: PUSH
14412: LD_INT 2
14414: EQUAL
14415: AND
14416: PUSH
14417: LD_INT 7
14419: PUSH
14420: LD_VAR 0 5
14424: IN
14425: PUSH
14426: LD_INT 28
14428: PUSH
14429: LD_VAR 0 5
14433: IN
14434: OR
14435: PUSH
14436: LD_INT 45
14438: PUSH
14439: LD_VAR 0 5
14443: IN
14444: OR
14445: AND
14446: IFFALSE 14700
// begin hex := GetHexInfo ( x , y ) ;
14448: LD_ADDR_VAR 0 4
14452: PUSH
14453: LD_VAR 0 10
14457: PPUSH
14458: LD_VAR 0 11
14462: PPUSH
14463: CALL_OW 546
14467: ST_TO_ADDR
// if hex [ 1 ] then
14468: LD_VAR 0 4
14472: PUSH
14473: LD_INT 1
14475: ARRAY
14476: IFFALSE 14480
// exit ;
14478: GO 14883
// height := hex [ 2 ] ;
14480: LD_ADDR_VAR 0 15
14484: PUSH
14485: LD_VAR 0 4
14489: PUSH
14490: LD_INT 2
14492: ARRAY
14493: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14494: LD_ADDR_VAR 0 14
14498: PUSH
14499: LD_INT 0
14501: PUSH
14502: LD_INT 2
14504: PUSH
14505: LD_INT 3
14507: PUSH
14508: LD_INT 5
14510: PUSH
14511: EMPTY
14512: LIST
14513: LIST
14514: LIST
14515: LIST
14516: ST_TO_ADDR
// for i in tmp do
14517: LD_ADDR_VAR 0 8
14521: PUSH
14522: LD_VAR 0 14
14526: PUSH
14527: FOR_IN
14528: IFFALSE 14698
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14530: LD_ADDR_VAR 0 9
14534: PUSH
14535: LD_VAR 0 10
14539: PPUSH
14540: LD_VAR 0 8
14544: PPUSH
14545: LD_INT 5
14547: PPUSH
14548: CALL_OW 272
14552: PUSH
14553: LD_VAR 0 11
14557: PPUSH
14558: LD_VAR 0 8
14562: PPUSH
14563: LD_INT 5
14565: PPUSH
14566: CALL_OW 273
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14575: LD_VAR 0 9
14579: PUSH
14580: LD_INT 1
14582: ARRAY
14583: PPUSH
14584: LD_VAR 0 9
14588: PUSH
14589: LD_INT 2
14591: ARRAY
14592: PPUSH
14593: CALL_OW 488
14597: IFFALSE 14696
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14599: LD_ADDR_VAR 0 4
14603: PUSH
14604: LD_VAR 0 9
14608: PUSH
14609: LD_INT 1
14611: ARRAY
14612: PPUSH
14613: LD_VAR 0 9
14617: PUSH
14618: LD_INT 2
14620: ARRAY
14621: PPUSH
14622: CALL_OW 546
14626: ST_TO_ADDR
// if hex [ 1 ] then
14627: LD_VAR 0 4
14631: PUSH
14632: LD_INT 1
14634: ARRAY
14635: IFFALSE 14639
// continue ;
14637: GO 14527
// h := hex [ 2 ] ;
14639: LD_ADDR_VAR 0 13
14643: PUSH
14644: LD_VAR 0 4
14648: PUSH
14649: LD_INT 2
14651: ARRAY
14652: ST_TO_ADDR
// if h + 7 < height then
14653: LD_VAR 0 13
14657: PUSH
14658: LD_INT 7
14660: PLUS
14661: PUSH
14662: LD_VAR 0 15
14666: LESS
14667: IFFALSE 14696
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14669: LD_ADDR_VAR 0 18
14673: PUSH
14674: LD_INT 7
14676: PUSH
14677: LD_INT 28
14679: PUSH
14680: LD_INT 45
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: LIST
14687: PUSH
14688: LD_VAR 0 12
14692: ARRAY
14693: ST_TO_ADDR
// break ;
14694: GO 14698
// end ; end ; end ;
14696: GO 14527
14698: POP
14699: POP
// end ; if not weapon then
14700: LD_VAR 0 18
14704: NOT
14705: IFFALSE 14765
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14707: LD_ADDR_VAR 0 5
14711: PUSH
14712: LD_VAR 0 5
14716: PUSH
14717: LD_INT 11
14719: PUSH
14720: LD_INT 30
14722: PUSH
14723: LD_INT 49
14725: PUSH
14726: EMPTY
14727: LIST
14728: LIST
14729: LIST
14730: DIFF
14731: ST_TO_ADDR
// if not list then
14732: LD_VAR 0 5
14736: NOT
14737: IFFALSE 14741
// exit ;
14739: GO 14883
// weapon := list [ rand ( 1 , list ) ] ;
14741: LD_ADDR_VAR 0 18
14745: PUSH
14746: LD_VAR 0 5
14750: PUSH
14751: LD_INT 1
14753: PPUSH
14754: LD_VAR 0 5
14758: PPUSH
14759: CALL_OW 12
14763: ARRAY
14764: ST_TO_ADDR
// end ; if weapon then
14765: LD_VAR 0 18
14769: IFFALSE 14883
// begin tmp := CostOfWeapon ( weapon ) ;
14771: LD_ADDR_VAR 0 14
14775: PUSH
14776: LD_VAR 0 18
14780: PPUSH
14781: CALL_OW 451
14785: ST_TO_ADDR
// j := GetBase ( tower ) ;
14786: LD_ADDR_VAR 0 9
14790: PUSH
14791: LD_VAR 0 1
14795: PPUSH
14796: CALL_OW 274
14800: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14801: LD_VAR 0 9
14805: PPUSH
14806: LD_INT 1
14808: PPUSH
14809: CALL_OW 275
14813: PUSH
14814: LD_VAR 0 14
14818: PUSH
14819: LD_INT 1
14821: ARRAY
14822: GREATEREQUAL
14823: PUSH
14824: LD_VAR 0 9
14828: PPUSH
14829: LD_INT 2
14831: PPUSH
14832: CALL_OW 275
14836: PUSH
14837: LD_VAR 0 14
14841: PUSH
14842: LD_INT 2
14844: ARRAY
14845: GREATEREQUAL
14846: AND
14847: PUSH
14848: LD_VAR 0 9
14852: PPUSH
14853: LD_INT 3
14855: PPUSH
14856: CALL_OW 275
14860: PUSH
14861: LD_VAR 0 14
14865: PUSH
14866: LD_INT 3
14868: ARRAY
14869: GREATEREQUAL
14870: AND
14871: IFFALSE 14883
// result := weapon ;
14873: LD_ADDR_VAR 0 3
14877: PUSH
14878: LD_VAR 0 18
14882: ST_TO_ADDR
// end ; end ;
14883: LD_VAR 0 3
14887: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14888: LD_INT 0
14890: PPUSH
14891: PPUSH
// result := true ;
14892: LD_ADDR_VAR 0 3
14896: PUSH
14897: LD_INT 1
14899: ST_TO_ADDR
// if array1 = array2 then
14900: LD_VAR 0 1
14904: PUSH
14905: LD_VAR 0 2
14909: EQUAL
14910: IFFALSE 14970
// begin for i = 1 to array1 do
14912: LD_ADDR_VAR 0 4
14916: PUSH
14917: DOUBLE
14918: LD_INT 1
14920: DEC
14921: ST_TO_ADDR
14922: LD_VAR 0 1
14926: PUSH
14927: FOR_TO
14928: IFFALSE 14966
// if array1 [ i ] <> array2 [ i ] then
14930: LD_VAR 0 1
14934: PUSH
14935: LD_VAR 0 4
14939: ARRAY
14940: PUSH
14941: LD_VAR 0 2
14945: PUSH
14946: LD_VAR 0 4
14950: ARRAY
14951: NONEQUAL
14952: IFFALSE 14964
// begin result := false ;
14954: LD_ADDR_VAR 0 3
14958: PUSH
14959: LD_INT 0
14961: ST_TO_ADDR
// break ;
14962: GO 14966
// end ;
14964: GO 14927
14966: POP
14967: POP
// end else
14968: GO 14978
// result := false ;
14970: LD_ADDR_VAR 0 3
14974: PUSH
14975: LD_INT 0
14977: ST_TO_ADDR
// end ;
14978: LD_VAR 0 3
14982: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14983: LD_INT 0
14985: PPUSH
14986: PPUSH
// if not array1 or not array2 then
14987: LD_VAR 0 1
14991: NOT
14992: PUSH
14993: LD_VAR 0 2
14997: NOT
14998: OR
14999: IFFALSE 15003
// exit ;
15001: GO 15067
// result := true ;
15003: LD_ADDR_VAR 0 3
15007: PUSH
15008: LD_INT 1
15010: ST_TO_ADDR
// for i = 1 to array1 do
15011: LD_ADDR_VAR 0 4
15015: PUSH
15016: DOUBLE
15017: LD_INT 1
15019: DEC
15020: ST_TO_ADDR
15021: LD_VAR 0 1
15025: PUSH
15026: FOR_TO
15027: IFFALSE 15065
// if array1 [ i ] <> array2 [ i ] then
15029: LD_VAR 0 1
15033: PUSH
15034: LD_VAR 0 4
15038: ARRAY
15039: PUSH
15040: LD_VAR 0 2
15044: PUSH
15045: LD_VAR 0 4
15049: ARRAY
15050: NONEQUAL
15051: IFFALSE 15063
// begin result := false ;
15053: LD_ADDR_VAR 0 3
15057: PUSH
15058: LD_INT 0
15060: ST_TO_ADDR
// break ;
15061: GO 15065
// end ;
15063: GO 15026
15065: POP
15066: POP
// end ;
15067: LD_VAR 0 3
15071: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
15072: LD_INT 0
15074: PPUSH
15075: PPUSH
15076: PPUSH
// pom := GetBase ( fac ) ;
15077: LD_ADDR_VAR 0 5
15081: PUSH
15082: LD_VAR 0 1
15086: PPUSH
15087: CALL_OW 274
15091: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
15092: LD_ADDR_VAR 0 4
15096: PUSH
15097: LD_VAR 0 2
15101: PUSH
15102: LD_INT 1
15104: ARRAY
15105: PPUSH
15106: LD_VAR 0 2
15110: PUSH
15111: LD_INT 2
15113: ARRAY
15114: PPUSH
15115: LD_VAR 0 2
15119: PUSH
15120: LD_INT 3
15122: ARRAY
15123: PPUSH
15124: LD_VAR 0 2
15128: PUSH
15129: LD_INT 4
15131: ARRAY
15132: PPUSH
15133: CALL_OW 449
15137: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15138: LD_ADDR_VAR 0 3
15142: PUSH
15143: LD_VAR 0 5
15147: PPUSH
15148: LD_INT 1
15150: PPUSH
15151: CALL_OW 275
15155: PUSH
15156: LD_VAR 0 4
15160: PUSH
15161: LD_INT 1
15163: ARRAY
15164: GREATEREQUAL
15165: PUSH
15166: LD_VAR 0 5
15170: PPUSH
15171: LD_INT 2
15173: PPUSH
15174: CALL_OW 275
15178: PUSH
15179: LD_VAR 0 4
15183: PUSH
15184: LD_INT 2
15186: ARRAY
15187: GREATEREQUAL
15188: AND
15189: PUSH
15190: LD_VAR 0 5
15194: PPUSH
15195: LD_INT 3
15197: PPUSH
15198: CALL_OW 275
15202: PUSH
15203: LD_VAR 0 4
15207: PUSH
15208: LD_INT 3
15210: ARRAY
15211: GREATEREQUAL
15212: AND
15213: ST_TO_ADDR
// end ;
15214: LD_VAR 0 3
15218: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
15219: LD_INT 0
15221: PPUSH
15222: PPUSH
15223: PPUSH
15224: PPUSH
// pom := GetBase ( building ) ;
15225: LD_ADDR_VAR 0 3
15229: PUSH
15230: LD_VAR 0 1
15234: PPUSH
15235: CALL_OW 274
15239: ST_TO_ADDR
// if not pom then
15240: LD_VAR 0 3
15244: NOT
15245: IFFALSE 15249
// exit ;
15247: GO 15419
// btype := GetBType ( building ) ;
15249: LD_ADDR_VAR 0 5
15253: PUSH
15254: LD_VAR 0 1
15258: PPUSH
15259: CALL_OW 266
15263: ST_TO_ADDR
// if btype = b_armoury then
15264: LD_VAR 0 5
15268: PUSH
15269: LD_INT 4
15271: EQUAL
15272: IFFALSE 15282
// btype := b_barracks ;
15274: LD_ADDR_VAR 0 5
15278: PUSH
15279: LD_INT 5
15281: ST_TO_ADDR
// if btype = b_depot then
15282: LD_VAR 0 5
15286: PUSH
15287: LD_INT 0
15289: EQUAL
15290: IFFALSE 15300
// btype := b_warehouse ;
15292: LD_ADDR_VAR 0 5
15296: PUSH
15297: LD_INT 1
15299: ST_TO_ADDR
// if btype = b_workshop then
15300: LD_VAR 0 5
15304: PUSH
15305: LD_INT 2
15307: EQUAL
15308: IFFALSE 15318
// btype := b_factory ;
15310: LD_ADDR_VAR 0 5
15314: PUSH
15315: LD_INT 3
15317: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15318: LD_ADDR_VAR 0 4
15322: PUSH
15323: LD_VAR 0 5
15327: PPUSH
15328: LD_VAR 0 1
15332: PPUSH
15333: CALL_OW 248
15337: PPUSH
15338: CALL_OW 450
15342: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15343: LD_ADDR_VAR 0 2
15347: PUSH
15348: LD_VAR 0 3
15352: PPUSH
15353: LD_INT 1
15355: PPUSH
15356: CALL_OW 275
15360: PUSH
15361: LD_VAR 0 4
15365: PUSH
15366: LD_INT 1
15368: ARRAY
15369: GREATEREQUAL
15370: PUSH
15371: LD_VAR 0 3
15375: PPUSH
15376: LD_INT 2
15378: PPUSH
15379: CALL_OW 275
15383: PUSH
15384: LD_VAR 0 4
15388: PUSH
15389: LD_INT 2
15391: ARRAY
15392: GREATEREQUAL
15393: AND
15394: PUSH
15395: LD_VAR 0 3
15399: PPUSH
15400: LD_INT 3
15402: PPUSH
15403: CALL_OW 275
15407: PUSH
15408: LD_VAR 0 4
15412: PUSH
15413: LD_INT 3
15415: ARRAY
15416: GREATEREQUAL
15417: AND
15418: ST_TO_ADDR
// end ;
15419: LD_VAR 0 2
15423: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15424: LD_INT 0
15426: PPUSH
15427: PPUSH
15428: PPUSH
// pom := GetBase ( building ) ;
15429: LD_ADDR_VAR 0 4
15433: PUSH
15434: LD_VAR 0 1
15438: PPUSH
15439: CALL_OW 274
15443: ST_TO_ADDR
// if not pom then
15444: LD_VAR 0 4
15448: NOT
15449: IFFALSE 15453
// exit ;
15451: GO 15554
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15453: LD_ADDR_VAR 0 5
15457: PUSH
15458: LD_VAR 0 2
15462: PPUSH
15463: LD_VAR 0 1
15467: PPUSH
15468: CALL_OW 248
15472: PPUSH
15473: CALL_OW 450
15477: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15478: LD_ADDR_VAR 0 3
15482: PUSH
15483: LD_VAR 0 4
15487: PPUSH
15488: LD_INT 1
15490: PPUSH
15491: CALL_OW 275
15495: PUSH
15496: LD_VAR 0 5
15500: PUSH
15501: LD_INT 1
15503: ARRAY
15504: GREATEREQUAL
15505: PUSH
15506: LD_VAR 0 4
15510: PPUSH
15511: LD_INT 2
15513: PPUSH
15514: CALL_OW 275
15518: PUSH
15519: LD_VAR 0 5
15523: PUSH
15524: LD_INT 2
15526: ARRAY
15527: GREATEREQUAL
15528: AND
15529: PUSH
15530: LD_VAR 0 4
15534: PPUSH
15535: LD_INT 3
15537: PPUSH
15538: CALL_OW 275
15542: PUSH
15543: LD_VAR 0 5
15547: PUSH
15548: LD_INT 3
15550: ARRAY
15551: GREATEREQUAL
15552: AND
15553: ST_TO_ADDR
// end ;
15554: LD_VAR 0 3
15558: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15559: LD_INT 0
15561: PPUSH
15562: PPUSH
15563: PPUSH
15564: PPUSH
15565: PPUSH
15566: PPUSH
15567: PPUSH
15568: PPUSH
15569: PPUSH
15570: PPUSH
15571: PPUSH
// result := false ;
15572: LD_ADDR_VAR 0 8
15576: PUSH
15577: LD_INT 0
15579: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15580: LD_VAR 0 5
15584: NOT
15585: PUSH
15586: LD_VAR 0 1
15590: NOT
15591: OR
15592: PUSH
15593: LD_VAR 0 2
15597: NOT
15598: OR
15599: PUSH
15600: LD_VAR 0 3
15604: NOT
15605: OR
15606: IFFALSE 15610
// exit ;
15608: GO 16424
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15610: LD_ADDR_VAR 0 14
15614: PUSH
15615: LD_VAR 0 1
15619: PPUSH
15620: LD_VAR 0 2
15624: PPUSH
15625: LD_VAR 0 3
15629: PPUSH
15630: LD_VAR 0 4
15634: PPUSH
15635: LD_VAR 0 5
15639: PUSH
15640: LD_INT 1
15642: ARRAY
15643: PPUSH
15644: CALL_OW 248
15648: PPUSH
15649: LD_INT 0
15651: PPUSH
15652: CALL 17657 0 6
15656: ST_TO_ADDR
// if not hexes then
15657: LD_VAR 0 14
15661: NOT
15662: IFFALSE 15666
// exit ;
15664: GO 16424
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15666: LD_ADDR_VAR 0 17
15670: PUSH
15671: LD_VAR 0 5
15675: PPUSH
15676: LD_INT 22
15678: PUSH
15679: LD_VAR 0 13
15683: PPUSH
15684: CALL_OW 255
15688: PUSH
15689: EMPTY
15690: LIST
15691: LIST
15692: PUSH
15693: LD_INT 2
15695: PUSH
15696: LD_INT 30
15698: PUSH
15699: LD_INT 0
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: PUSH
15706: LD_INT 30
15708: PUSH
15709: LD_INT 1
15711: PUSH
15712: EMPTY
15713: LIST
15714: LIST
15715: PUSH
15716: EMPTY
15717: LIST
15718: LIST
15719: LIST
15720: PUSH
15721: EMPTY
15722: LIST
15723: LIST
15724: PPUSH
15725: CALL_OW 72
15729: ST_TO_ADDR
// for i = 1 to hexes do
15730: LD_ADDR_VAR 0 9
15734: PUSH
15735: DOUBLE
15736: LD_INT 1
15738: DEC
15739: ST_TO_ADDR
15740: LD_VAR 0 14
15744: PUSH
15745: FOR_TO
15746: IFFALSE 16422
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15748: LD_ADDR_VAR 0 13
15752: PUSH
15753: LD_VAR 0 14
15757: PUSH
15758: LD_VAR 0 9
15762: ARRAY
15763: PUSH
15764: LD_INT 1
15766: ARRAY
15767: PPUSH
15768: LD_VAR 0 14
15772: PUSH
15773: LD_VAR 0 9
15777: ARRAY
15778: PUSH
15779: LD_INT 2
15781: ARRAY
15782: PPUSH
15783: CALL_OW 428
15787: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15788: LD_VAR 0 14
15792: PUSH
15793: LD_VAR 0 9
15797: ARRAY
15798: PUSH
15799: LD_INT 1
15801: ARRAY
15802: PPUSH
15803: LD_VAR 0 14
15807: PUSH
15808: LD_VAR 0 9
15812: ARRAY
15813: PUSH
15814: LD_INT 2
15816: ARRAY
15817: PPUSH
15818: CALL_OW 351
15822: PUSH
15823: LD_VAR 0 14
15827: PUSH
15828: LD_VAR 0 9
15832: ARRAY
15833: PUSH
15834: LD_INT 1
15836: ARRAY
15837: PPUSH
15838: LD_VAR 0 14
15842: PUSH
15843: LD_VAR 0 9
15847: ARRAY
15848: PUSH
15849: LD_INT 2
15851: ARRAY
15852: PPUSH
15853: CALL_OW 488
15857: NOT
15858: OR
15859: PUSH
15860: LD_VAR 0 13
15864: PPUSH
15865: CALL_OW 247
15869: PUSH
15870: LD_INT 3
15872: EQUAL
15873: OR
15874: IFFALSE 15880
// exit ;
15876: POP
15877: POP
15878: GO 16424
// if not tmp then
15880: LD_VAR 0 13
15884: NOT
15885: IFFALSE 15889
// continue ;
15887: GO 15745
// result := true ;
15889: LD_ADDR_VAR 0 8
15893: PUSH
15894: LD_INT 1
15896: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15897: LD_VAR 0 6
15901: PUSH
15902: LD_VAR 0 13
15906: PPUSH
15907: CALL_OW 247
15911: PUSH
15912: LD_INT 2
15914: EQUAL
15915: AND
15916: PUSH
15917: LD_VAR 0 13
15921: PPUSH
15922: CALL_OW 263
15926: PUSH
15927: LD_INT 1
15929: EQUAL
15930: AND
15931: IFFALSE 16095
// begin if IsDrivenBy ( tmp ) then
15933: LD_VAR 0 13
15937: PPUSH
15938: CALL_OW 311
15942: IFFALSE 15946
// continue ;
15944: GO 15745
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15946: LD_VAR 0 6
15950: PPUSH
15951: LD_INT 3
15953: PUSH
15954: LD_INT 60
15956: PUSH
15957: EMPTY
15958: LIST
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PUSH
15964: LD_INT 3
15966: PUSH
15967: LD_INT 55
15969: PUSH
15970: EMPTY
15971: LIST
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: PPUSH
15981: CALL_OW 72
15985: IFFALSE 16093
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15987: LD_ADDR_VAR 0 18
15991: PUSH
15992: LD_VAR 0 6
15996: PPUSH
15997: LD_INT 3
15999: PUSH
16000: LD_INT 60
16002: PUSH
16003: EMPTY
16004: LIST
16005: PUSH
16006: EMPTY
16007: LIST
16008: LIST
16009: PUSH
16010: LD_INT 3
16012: PUSH
16013: LD_INT 55
16015: PUSH
16016: EMPTY
16017: LIST
16018: PUSH
16019: EMPTY
16020: LIST
16021: LIST
16022: PUSH
16023: EMPTY
16024: LIST
16025: LIST
16026: PPUSH
16027: CALL_OW 72
16031: PUSH
16032: LD_INT 1
16034: ARRAY
16035: ST_TO_ADDR
// if IsInUnit ( driver ) then
16036: LD_VAR 0 18
16040: PPUSH
16041: CALL_OW 310
16045: IFFALSE 16056
// ComExit ( driver ) ;
16047: LD_VAR 0 18
16051: PPUSH
16052: CALL 41418 0 1
// AddComEnterUnit ( driver , tmp ) ;
16056: LD_VAR 0 18
16060: PPUSH
16061: LD_VAR 0 13
16065: PPUSH
16066: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
16070: LD_VAR 0 18
16074: PPUSH
16075: LD_VAR 0 7
16079: PPUSH
16080: CALL_OW 173
// AddComExitVehicle ( driver ) ;
16084: LD_VAR 0 18
16088: PPUSH
16089: CALL_OW 181
// end ; continue ;
16093: GO 15745
// end ; if not cleaners or not tmp in cleaners then
16095: LD_VAR 0 6
16099: NOT
16100: PUSH
16101: LD_VAR 0 13
16105: PUSH
16106: LD_VAR 0 6
16110: IN
16111: NOT
16112: OR
16113: IFFALSE 16420
// begin if dep then
16115: LD_VAR 0 17
16119: IFFALSE 16255
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
16121: LD_ADDR_VAR 0 16
16125: PUSH
16126: LD_VAR 0 17
16130: PUSH
16131: LD_INT 1
16133: ARRAY
16134: PPUSH
16135: CALL_OW 250
16139: PPUSH
16140: LD_VAR 0 17
16144: PUSH
16145: LD_INT 1
16147: ARRAY
16148: PPUSH
16149: CALL_OW 254
16153: PPUSH
16154: LD_INT 5
16156: PPUSH
16157: CALL_OW 272
16161: PUSH
16162: LD_VAR 0 17
16166: PUSH
16167: LD_INT 1
16169: ARRAY
16170: PPUSH
16171: CALL_OW 251
16175: PPUSH
16176: LD_VAR 0 17
16180: PUSH
16181: LD_INT 1
16183: ARRAY
16184: PPUSH
16185: CALL_OW 254
16189: PPUSH
16190: LD_INT 5
16192: PPUSH
16193: CALL_OW 273
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
16202: LD_VAR 0 16
16206: PUSH
16207: LD_INT 1
16209: ARRAY
16210: PPUSH
16211: LD_VAR 0 16
16215: PUSH
16216: LD_INT 2
16218: ARRAY
16219: PPUSH
16220: CALL_OW 488
16224: IFFALSE 16255
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16226: LD_VAR 0 13
16230: PPUSH
16231: LD_VAR 0 16
16235: PUSH
16236: LD_INT 1
16238: ARRAY
16239: PPUSH
16240: LD_VAR 0 16
16244: PUSH
16245: LD_INT 2
16247: ARRAY
16248: PPUSH
16249: CALL_OW 111
// continue ;
16253: GO 15745
// end ; end ; r := GetDir ( tmp ) ;
16255: LD_ADDR_VAR 0 15
16259: PUSH
16260: LD_VAR 0 13
16264: PPUSH
16265: CALL_OW 254
16269: ST_TO_ADDR
// if r = 5 then
16270: LD_VAR 0 15
16274: PUSH
16275: LD_INT 5
16277: EQUAL
16278: IFFALSE 16288
// r := 0 ;
16280: LD_ADDR_VAR 0 15
16284: PUSH
16285: LD_INT 0
16287: ST_TO_ADDR
// for j = r to 5 do
16288: LD_ADDR_VAR 0 10
16292: PUSH
16293: DOUBLE
16294: LD_VAR 0 15
16298: DEC
16299: ST_TO_ADDR
16300: LD_INT 5
16302: PUSH
16303: FOR_TO
16304: IFFALSE 16418
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16306: LD_ADDR_VAR 0 11
16310: PUSH
16311: LD_VAR 0 13
16315: PPUSH
16316: CALL_OW 250
16320: PPUSH
16321: LD_VAR 0 10
16325: PPUSH
16326: LD_INT 2
16328: PPUSH
16329: CALL_OW 272
16333: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16334: LD_ADDR_VAR 0 12
16338: PUSH
16339: LD_VAR 0 13
16343: PPUSH
16344: CALL_OW 251
16348: PPUSH
16349: LD_VAR 0 10
16353: PPUSH
16354: LD_INT 2
16356: PPUSH
16357: CALL_OW 273
16361: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16362: LD_VAR 0 11
16366: PPUSH
16367: LD_VAR 0 12
16371: PPUSH
16372: CALL_OW 488
16376: PUSH
16377: LD_VAR 0 11
16381: PPUSH
16382: LD_VAR 0 12
16386: PPUSH
16387: CALL_OW 428
16391: NOT
16392: AND
16393: IFFALSE 16416
// begin ComMoveXY ( tmp , _x , _y ) ;
16395: LD_VAR 0 13
16399: PPUSH
16400: LD_VAR 0 11
16404: PPUSH
16405: LD_VAR 0 12
16409: PPUSH
16410: CALL_OW 111
// break ;
16414: GO 16418
// end ; end ;
16416: GO 16303
16418: POP
16419: POP
// end ; end ;
16420: GO 15745
16422: POP
16423: POP
// end ;
16424: LD_VAR 0 8
16428: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16429: LD_INT 0
16431: PPUSH
// result := true ;
16432: LD_ADDR_VAR 0 3
16436: PUSH
16437: LD_INT 1
16439: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16440: LD_VAR 0 2
16444: PUSH
16445: LD_INT 24
16447: DOUBLE
16448: EQUAL
16449: IFTRUE 16459
16451: LD_INT 33
16453: DOUBLE
16454: EQUAL
16455: IFTRUE 16459
16457: GO 16484
16459: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16460: LD_ADDR_VAR 0 3
16464: PUSH
16465: LD_INT 32
16467: PPUSH
16468: LD_VAR 0 1
16472: PPUSH
16473: CALL_OW 321
16477: PUSH
16478: LD_INT 2
16480: EQUAL
16481: ST_TO_ADDR
16482: GO 16800
16484: LD_INT 20
16486: DOUBLE
16487: EQUAL
16488: IFTRUE 16492
16490: GO 16517
16492: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16493: LD_ADDR_VAR 0 3
16497: PUSH
16498: LD_INT 6
16500: PPUSH
16501: LD_VAR 0 1
16505: PPUSH
16506: CALL_OW 321
16510: PUSH
16511: LD_INT 2
16513: EQUAL
16514: ST_TO_ADDR
16515: GO 16800
16517: LD_INT 22
16519: DOUBLE
16520: EQUAL
16521: IFTRUE 16531
16523: LD_INT 36
16525: DOUBLE
16526: EQUAL
16527: IFTRUE 16531
16529: GO 16556
16531: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16532: LD_ADDR_VAR 0 3
16536: PUSH
16537: LD_INT 15
16539: PPUSH
16540: LD_VAR 0 1
16544: PPUSH
16545: CALL_OW 321
16549: PUSH
16550: LD_INT 2
16552: EQUAL
16553: ST_TO_ADDR
16554: GO 16800
16556: LD_INT 30
16558: DOUBLE
16559: EQUAL
16560: IFTRUE 16564
16562: GO 16589
16564: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16565: LD_ADDR_VAR 0 3
16569: PUSH
16570: LD_INT 20
16572: PPUSH
16573: LD_VAR 0 1
16577: PPUSH
16578: CALL_OW 321
16582: PUSH
16583: LD_INT 2
16585: EQUAL
16586: ST_TO_ADDR
16587: GO 16800
16589: LD_INT 28
16591: DOUBLE
16592: EQUAL
16593: IFTRUE 16603
16595: LD_INT 21
16597: DOUBLE
16598: EQUAL
16599: IFTRUE 16603
16601: GO 16628
16603: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16604: LD_ADDR_VAR 0 3
16608: PUSH
16609: LD_INT 21
16611: PPUSH
16612: LD_VAR 0 1
16616: PPUSH
16617: CALL_OW 321
16621: PUSH
16622: LD_INT 2
16624: EQUAL
16625: ST_TO_ADDR
16626: GO 16800
16628: LD_INT 16
16630: DOUBLE
16631: EQUAL
16632: IFTRUE 16636
16634: GO 16661
16636: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16637: LD_ADDR_VAR 0 3
16641: PUSH
16642: LD_INT 84
16644: PPUSH
16645: LD_VAR 0 1
16649: PPUSH
16650: CALL_OW 321
16654: PUSH
16655: LD_INT 2
16657: EQUAL
16658: ST_TO_ADDR
16659: GO 16800
16661: LD_INT 19
16663: DOUBLE
16664: EQUAL
16665: IFTRUE 16675
16667: LD_INT 23
16669: DOUBLE
16670: EQUAL
16671: IFTRUE 16675
16673: GO 16700
16675: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16676: LD_ADDR_VAR 0 3
16680: PUSH
16681: LD_INT 83
16683: PPUSH
16684: LD_VAR 0 1
16688: PPUSH
16689: CALL_OW 321
16693: PUSH
16694: LD_INT 2
16696: EQUAL
16697: ST_TO_ADDR
16698: GO 16800
16700: LD_INT 17
16702: DOUBLE
16703: EQUAL
16704: IFTRUE 16708
16706: GO 16733
16708: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16709: LD_ADDR_VAR 0 3
16713: PUSH
16714: LD_INT 39
16716: PPUSH
16717: LD_VAR 0 1
16721: PPUSH
16722: CALL_OW 321
16726: PUSH
16727: LD_INT 2
16729: EQUAL
16730: ST_TO_ADDR
16731: GO 16800
16733: LD_INT 18
16735: DOUBLE
16736: EQUAL
16737: IFTRUE 16741
16739: GO 16766
16741: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16742: LD_ADDR_VAR 0 3
16746: PUSH
16747: LD_INT 40
16749: PPUSH
16750: LD_VAR 0 1
16754: PPUSH
16755: CALL_OW 321
16759: PUSH
16760: LD_INT 2
16762: EQUAL
16763: ST_TO_ADDR
16764: GO 16800
16766: LD_INT 27
16768: DOUBLE
16769: EQUAL
16770: IFTRUE 16774
16772: GO 16799
16774: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16775: LD_ADDR_VAR 0 3
16779: PUSH
16780: LD_INT 35
16782: PPUSH
16783: LD_VAR 0 1
16787: PPUSH
16788: CALL_OW 321
16792: PUSH
16793: LD_INT 2
16795: EQUAL
16796: ST_TO_ADDR
16797: GO 16800
16799: POP
// end ;
16800: LD_VAR 0 3
16804: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16805: LD_INT 0
16807: PPUSH
16808: PPUSH
16809: PPUSH
16810: PPUSH
16811: PPUSH
16812: PPUSH
16813: PPUSH
16814: PPUSH
16815: PPUSH
16816: PPUSH
16817: PPUSH
// result := false ;
16818: LD_ADDR_VAR 0 6
16822: PUSH
16823: LD_INT 0
16825: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16826: LD_VAR 0 1
16830: NOT
16831: PUSH
16832: LD_VAR 0 1
16836: PPUSH
16837: CALL_OW 266
16841: PUSH
16842: LD_INT 0
16844: PUSH
16845: LD_INT 1
16847: PUSH
16848: EMPTY
16849: LIST
16850: LIST
16851: IN
16852: NOT
16853: OR
16854: PUSH
16855: LD_VAR 0 2
16859: NOT
16860: OR
16861: PUSH
16862: LD_VAR 0 5
16866: PUSH
16867: LD_INT 0
16869: PUSH
16870: LD_INT 1
16872: PUSH
16873: LD_INT 2
16875: PUSH
16876: LD_INT 3
16878: PUSH
16879: LD_INT 4
16881: PUSH
16882: LD_INT 5
16884: PUSH
16885: EMPTY
16886: LIST
16887: LIST
16888: LIST
16889: LIST
16890: LIST
16891: LIST
16892: IN
16893: NOT
16894: OR
16895: PUSH
16896: LD_VAR 0 3
16900: PPUSH
16901: LD_VAR 0 4
16905: PPUSH
16906: CALL_OW 488
16910: NOT
16911: OR
16912: IFFALSE 16916
// exit ;
16914: GO 17652
// side := GetSide ( depot ) ;
16916: LD_ADDR_VAR 0 9
16920: PUSH
16921: LD_VAR 0 1
16925: PPUSH
16926: CALL_OW 255
16930: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16931: LD_VAR 0 9
16935: PPUSH
16936: LD_VAR 0 2
16940: PPUSH
16941: CALL 16429 0 2
16945: NOT
16946: IFFALSE 16950
// exit ;
16948: GO 17652
// pom := GetBase ( depot ) ;
16950: LD_ADDR_VAR 0 10
16954: PUSH
16955: LD_VAR 0 1
16959: PPUSH
16960: CALL_OW 274
16964: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16965: LD_ADDR_VAR 0 11
16969: PUSH
16970: LD_VAR 0 2
16974: PPUSH
16975: LD_VAR 0 1
16979: PPUSH
16980: CALL_OW 248
16984: PPUSH
16985: CALL_OW 450
16989: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16990: LD_VAR 0 10
16994: PPUSH
16995: LD_INT 1
16997: PPUSH
16998: CALL_OW 275
17002: PUSH
17003: LD_VAR 0 11
17007: PUSH
17008: LD_INT 1
17010: ARRAY
17011: GREATEREQUAL
17012: PUSH
17013: LD_VAR 0 10
17017: PPUSH
17018: LD_INT 2
17020: PPUSH
17021: CALL_OW 275
17025: PUSH
17026: LD_VAR 0 11
17030: PUSH
17031: LD_INT 2
17033: ARRAY
17034: GREATEREQUAL
17035: AND
17036: PUSH
17037: LD_VAR 0 10
17041: PPUSH
17042: LD_INT 3
17044: PPUSH
17045: CALL_OW 275
17049: PUSH
17050: LD_VAR 0 11
17054: PUSH
17055: LD_INT 3
17057: ARRAY
17058: GREATEREQUAL
17059: AND
17060: NOT
17061: IFFALSE 17065
// exit ;
17063: GO 17652
// if GetBType ( depot ) = b_depot then
17065: LD_VAR 0 1
17069: PPUSH
17070: CALL_OW 266
17074: PUSH
17075: LD_INT 0
17077: EQUAL
17078: IFFALSE 17090
// dist := 28 else
17080: LD_ADDR_VAR 0 14
17084: PUSH
17085: LD_INT 28
17087: ST_TO_ADDR
17088: GO 17098
// dist := 36 ;
17090: LD_ADDR_VAR 0 14
17094: PUSH
17095: LD_INT 36
17097: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
17098: LD_VAR 0 1
17102: PPUSH
17103: LD_VAR 0 3
17107: PPUSH
17108: LD_VAR 0 4
17112: PPUSH
17113: CALL_OW 297
17117: PUSH
17118: LD_VAR 0 14
17122: GREATER
17123: IFFALSE 17127
// exit ;
17125: GO 17652
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
17127: LD_ADDR_VAR 0 12
17131: PUSH
17132: LD_VAR 0 2
17136: PPUSH
17137: LD_VAR 0 3
17141: PPUSH
17142: LD_VAR 0 4
17146: PPUSH
17147: LD_VAR 0 5
17151: PPUSH
17152: LD_VAR 0 1
17156: PPUSH
17157: CALL_OW 248
17161: PPUSH
17162: LD_INT 0
17164: PPUSH
17165: CALL 17657 0 6
17169: ST_TO_ADDR
// if not hexes then
17170: LD_VAR 0 12
17174: NOT
17175: IFFALSE 17179
// exit ;
17177: GO 17652
// hex := GetHexInfo ( x , y ) ;
17179: LD_ADDR_VAR 0 15
17183: PUSH
17184: LD_VAR 0 3
17188: PPUSH
17189: LD_VAR 0 4
17193: PPUSH
17194: CALL_OW 546
17198: ST_TO_ADDR
// if hex [ 1 ] then
17199: LD_VAR 0 15
17203: PUSH
17204: LD_INT 1
17206: ARRAY
17207: IFFALSE 17211
// exit ;
17209: GO 17652
// height := hex [ 2 ] ;
17211: LD_ADDR_VAR 0 13
17215: PUSH
17216: LD_VAR 0 15
17220: PUSH
17221: LD_INT 2
17223: ARRAY
17224: ST_TO_ADDR
// for i = 1 to hexes do
17225: LD_ADDR_VAR 0 7
17229: PUSH
17230: DOUBLE
17231: LD_INT 1
17233: DEC
17234: ST_TO_ADDR
17235: LD_VAR 0 12
17239: PUSH
17240: FOR_TO
17241: IFFALSE 17571
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17243: LD_VAR 0 12
17247: PUSH
17248: LD_VAR 0 7
17252: ARRAY
17253: PUSH
17254: LD_INT 1
17256: ARRAY
17257: PPUSH
17258: LD_VAR 0 12
17262: PUSH
17263: LD_VAR 0 7
17267: ARRAY
17268: PUSH
17269: LD_INT 2
17271: ARRAY
17272: PPUSH
17273: CALL_OW 488
17277: NOT
17278: PUSH
17279: LD_VAR 0 12
17283: PUSH
17284: LD_VAR 0 7
17288: ARRAY
17289: PUSH
17290: LD_INT 1
17292: ARRAY
17293: PPUSH
17294: LD_VAR 0 12
17298: PUSH
17299: LD_VAR 0 7
17303: ARRAY
17304: PUSH
17305: LD_INT 2
17307: ARRAY
17308: PPUSH
17309: CALL_OW 428
17313: PUSH
17314: LD_INT 0
17316: GREATER
17317: OR
17318: PUSH
17319: LD_VAR 0 12
17323: PUSH
17324: LD_VAR 0 7
17328: ARRAY
17329: PUSH
17330: LD_INT 1
17332: ARRAY
17333: PPUSH
17334: LD_VAR 0 12
17338: PUSH
17339: LD_VAR 0 7
17343: ARRAY
17344: PUSH
17345: LD_INT 2
17347: ARRAY
17348: PPUSH
17349: CALL_OW 351
17353: OR
17354: IFFALSE 17360
// exit ;
17356: POP
17357: POP
17358: GO 17652
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17360: LD_ADDR_VAR 0 8
17364: PUSH
17365: LD_VAR 0 12
17369: PUSH
17370: LD_VAR 0 7
17374: ARRAY
17375: PUSH
17376: LD_INT 1
17378: ARRAY
17379: PPUSH
17380: LD_VAR 0 12
17384: PUSH
17385: LD_VAR 0 7
17389: ARRAY
17390: PUSH
17391: LD_INT 2
17393: ARRAY
17394: PPUSH
17395: CALL_OW 546
17399: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17400: LD_VAR 0 8
17404: PUSH
17405: LD_INT 1
17407: ARRAY
17408: PUSH
17409: LD_VAR 0 8
17413: PUSH
17414: LD_INT 2
17416: ARRAY
17417: PUSH
17418: LD_VAR 0 13
17422: PUSH
17423: LD_INT 2
17425: PLUS
17426: GREATER
17427: OR
17428: PUSH
17429: LD_VAR 0 8
17433: PUSH
17434: LD_INT 2
17436: ARRAY
17437: PUSH
17438: LD_VAR 0 13
17442: PUSH
17443: LD_INT 2
17445: MINUS
17446: LESS
17447: OR
17448: PUSH
17449: LD_VAR 0 8
17453: PUSH
17454: LD_INT 3
17456: ARRAY
17457: PUSH
17458: LD_INT 0
17460: PUSH
17461: LD_INT 8
17463: PUSH
17464: LD_INT 9
17466: PUSH
17467: LD_INT 10
17469: PUSH
17470: LD_INT 11
17472: PUSH
17473: LD_INT 12
17475: PUSH
17476: LD_INT 13
17478: PUSH
17479: LD_INT 16
17481: PUSH
17482: LD_INT 17
17484: PUSH
17485: LD_INT 18
17487: PUSH
17488: LD_INT 19
17490: PUSH
17491: LD_INT 20
17493: PUSH
17494: LD_INT 21
17496: PUSH
17497: EMPTY
17498: LIST
17499: LIST
17500: LIST
17501: LIST
17502: LIST
17503: LIST
17504: LIST
17505: LIST
17506: LIST
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: IN
17512: NOT
17513: OR
17514: PUSH
17515: LD_VAR 0 8
17519: PUSH
17520: LD_INT 5
17522: ARRAY
17523: NOT
17524: OR
17525: PUSH
17526: LD_VAR 0 8
17530: PUSH
17531: LD_INT 6
17533: ARRAY
17534: PUSH
17535: LD_INT 1
17537: PUSH
17538: LD_INT 2
17540: PUSH
17541: LD_INT 7
17543: PUSH
17544: LD_INT 9
17546: PUSH
17547: LD_INT 10
17549: PUSH
17550: LD_INT 11
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: IN
17561: NOT
17562: OR
17563: IFFALSE 17569
// exit ;
17565: POP
17566: POP
17567: GO 17652
// end ;
17569: GO 17240
17571: POP
17572: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17573: LD_VAR 0 9
17577: PPUSH
17578: LD_VAR 0 3
17582: PPUSH
17583: LD_VAR 0 4
17587: PPUSH
17588: LD_INT 20
17590: PPUSH
17591: CALL 9604 0 4
17595: PUSH
17596: LD_INT 4
17598: ARRAY
17599: IFFALSE 17603
// exit ;
17601: GO 17652
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17603: LD_VAR 0 2
17607: PUSH
17608: LD_INT 29
17610: PUSH
17611: LD_INT 30
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: IN
17618: PUSH
17619: LD_VAR 0 3
17623: PPUSH
17624: LD_VAR 0 4
17628: PPUSH
17629: LD_VAR 0 9
17633: PPUSH
17634: CALL_OW 440
17638: NOT
17639: AND
17640: IFFALSE 17644
// exit ;
17642: GO 17652
// result := true ;
17644: LD_ADDR_VAR 0 6
17648: PUSH
17649: LD_INT 1
17651: ST_TO_ADDR
// end ;
17652: LD_VAR 0 6
17656: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17657: LD_INT 0
17659: PPUSH
17660: PPUSH
17661: PPUSH
17662: PPUSH
17663: PPUSH
17664: PPUSH
17665: PPUSH
17666: PPUSH
17667: PPUSH
17668: PPUSH
17669: PPUSH
17670: PPUSH
17671: PPUSH
17672: PPUSH
17673: PPUSH
17674: PPUSH
17675: PPUSH
17676: PPUSH
17677: PPUSH
17678: PPUSH
17679: PPUSH
17680: PPUSH
17681: PPUSH
17682: PPUSH
17683: PPUSH
17684: PPUSH
17685: PPUSH
17686: PPUSH
17687: PPUSH
17688: PPUSH
17689: PPUSH
17690: PPUSH
17691: PPUSH
17692: PPUSH
17693: PPUSH
17694: PPUSH
17695: PPUSH
17696: PPUSH
17697: PPUSH
17698: PPUSH
17699: PPUSH
17700: PPUSH
17701: PPUSH
17702: PPUSH
17703: PPUSH
17704: PPUSH
17705: PPUSH
17706: PPUSH
17707: PPUSH
17708: PPUSH
17709: PPUSH
17710: PPUSH
17711: PPUSH
17712: PPUSH
17713: PPUSH
17714: PPUSH
17715: PPUSH
17716: PPUSH
// result = [ ] ;
17717: LD_ADDR_VAR 0 7
17721: PUSH
17722: EMPTY
17723: ST_TO_ADDR
// temp_list = [ ] ;
17724: LD_ADDR_VAR 0 9
17728: PUSH
17729: EMPTY
17730: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17731: LD_VAR 0 4
17735: PUSH
17736: LD_INT 0
17738: PUSH
17739: LD_INT 1
17741: PUSH
17742: LD_INT 2
17744: PUSH
17745: LD_INT 3
17747: PUSH
17748: LD_INT 4
17750: PUSH
17751: LD_INT 5
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: IN
17762: NOT
17763: PUSH
17764: LD_VAR 0 1
17768: PUSH
17769: LD_INT 0
17771: PUSH
17772: LD_INT 1
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: IN
17779: PUSH
17780: LD_VAR 0 5
17784: PUSH
17785: LD_INT 1
17787: PUSH
17788: LD_INT 2
17790: PUSH
17791: LD_INT 3
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: LIST
17798: IN
17799: NOT
17800: AND
17801: OR
17802: IFFALSE 17806
// exit ;
17804: GO 36197
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17806: LD_VAR 0 1
17810: PUSH
17811: LD_INT 6
17813: PUSH
17814: LD_INT 7
17816: PUSH
17817: LD_INT 8
17819: PUSH
17820: LD_INT 13
17822: PUSH
17823: LD_INT 12
17825: PUSH
17826: LD_INT 15
17828: PUSH
17829: LD_INT 11
17831: PUSH
17832: LD_INT 14
17834: PUSH
17835: LD_INT 10
17837: PUSH
17838: EMPTY
17839: LIST
17840: LIST
17841: LIST
17842: LIST
17843: LIST
17844: LIST
17845: LIST
17846: LIST
17847: LIST
17848: IN
17849: IFFALSE 17859
// btype = b_lab ;
17851: LD_ADDR_VAR 0 1
17855: PUSH
17856: LD_INT 6
17858: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17859: LD_VAR 0 6
17863: PUSH
17864: LD_INT 0
17866: PUSH
17867: LD_INT 1
17869: PUSH
17870: LD_INT 2
17872: PUSH
17873: EMPTY
17874: LIST
17875: LIST
17876: LIST
17877: IN
17878: NOT
17879: PUSH
17880: LD_VAR 0 1
17884: PUSH
17885: LD_INT 0
17887: PUSH
17888: LD_INT 1
17890: PUSH
17891: LD_INT 2
17893: PUSH
17894: LD_INT 3
17896: PUSH
17897: LD_INT 6
17899: PUSH
17900: LD_INT 36
17902: PUSH
17903: LD_INT 4
17905: PUSH
17906: LD_INT 5
17908: PUSH
17909: LD_INT 31
17911: PUSH
17912: LD_INT 32
17914: PUSH
17915: LD_INT 33
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: LIST
17922: LIST
17923: LIST
17924: LIST
17925: LIST
17926: LIST
17927: LIST
17928: LIST
17929: LIST
17930: IN
17931: NOT
17932: PUSH
17933: LD_VAR 0 6
17937: PUSH
17938: LD_INT 1
17940: EQUAL
17941: AND
17942: OR
17943: PUSH
17944: LD_VAR 0 1
17948: PUSH
17949: LD_INT 2
17951: PUSH
17952: LD_INT 3
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: IN
17959: NOT
17960: PUSH
17961: LD_VAR 0 6
17965: PUSH
17966: LD_INT 2
17968: EQUAL
17969: AND
17970: OR
17971: IFFALSE 17981
// mode = 0 ;
17973: LD_ADDR_VAR 0 6
17977: PUSH
17978: LD_INT 0
17980: ST_TO_ADDR
// case mode of 0 :
17981: LD_VAR 0 6
17985: PUSH
17986: LD_INT 0
17988: DOUBLE
17989: EQUAL
17990: IFTRUE 17994
17992: GO 29447
17994: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17995: LD_ADDR_VAR 0 11
17999: PUSH
18000: LD_INT 0
18002: PUSH
18003: LD_INT 0
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: PUSH
18010: LD_INT 0
18012: PUSH
18013: LD_INT 1
18015: NEG
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: PUSH
18021: LD_INT 1
18023: PUSH
18024: LD_INT 0
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: PUSH
18031: LD_INT 1
18033: PUSH
18034: LD_INT 1
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PUSH
18041: LD_INT 0
18043: PUSH
18044: LD_INT 1
18046: PUSH
18047: EMPTY
18048: LIST
18049: LIST
18050: PUSH
18051: LD_INT 1
18053: NEG
18054: PUSH
18055: LD_INT 0
18057: PUSH
18058: EMPTY
18059: LIST
18060: LIST
18061: PUSH
18062: LD_INT 1
18064: NEG
18065: PUSH
18066: LD_INT 1
18068: NEG
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: PUSH
18074: LD_INT 1
18076: NEG
18077: PUSH
18078: LD_INT 2
18080: NEG
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: PUSH
18086: LD_INT 0
18088: PUSH
18089: LD_INT 2
18091: NEG
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: PUSH
18097: LD_INT 1
18099: PUSH
18100: LD_INT 1
18102: NEG
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: PUSH
18108: LD_INT 1
18110: PUSH
18111: LD_INT 2
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PUSH
18118: LD_INT 0
18120: PUSH
18121: LD_INT 2
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: PUSH
18128: LD_INT 1
18130: NEG
18131: PUSH
18132: LD_INT 1
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: PUSH
18139: LD_INT 1
18141: PUSH
18142: LD_INT 3
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PUSH
18149: LD_INT 0
18151: PUSH
18152: LD_INT 3
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: LD_INT 1
18161: NEG
18162: PUSH
18163: LD_INT 2
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: PUSH
18170: EMPTY
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18188: LD_ADDR_VAR 0 12
18192: PUSH
18193: LD_INT 0
18195: PUSH
18196: LD_INT 0
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: PUSH
18203: LD_INT 0
18205: PUSH
18206: LD_INT 1
18208: NEG
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PUSH
18214: LD_INT 1
18216: PUSH
18217: LD_INT 0
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: PUSH
18224: LD_INT 1
18226: PUSH
18227: LD_INT 1
18229: PUSH
18230: EMPTY
18231: LIST
18232: LIST
18233: PUSH
18234: LD_INT 0
18236: PUSH
18237: LD_INT 1
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: PUSH
18244: LD_INT 1
18246: NEG
18247: PUSH
18248: LD_INT 0
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: PUSH
18255: LD_INT 1
18257: NEG
18258: PUSH
18259: LD_INT 1
18261: NEG
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: LD_INT 1
18269: PUSH
18270: LD_INT 1
18272: NEG
18273: PUSH
18274: EMPTY
18275: LIST
18276: LIST
18277: PUSH
18278: LD_INT 2
18280: PUSH
18281: LD_INT 0
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: PUSH
18288: LD_INT 2
18290: PUSH
18291: LD_INT 1
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: PUSH
18298: LD_INT 1
18300: NEG
18301: PUSH
18302: LD_INT 1
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: PUSH
18309: LD_INT 2
18311: NEG
18312: PUSH
18313: LD_INT 0
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: PUSH
18320: LD_INT 2
18322: NEG
18323: PUSH
18324: LD_INT 1
18326: NEG
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PUSH
18332: LD_INT 2
18334: NEG
18335: PUSH
18336: LD_INT 1
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: PUSH
18343: LD_INT 3
18345: NEG
18346: PUSH
18347: LD_INT 0
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 3
18356: NEG
18357: PUSH
18358: LD_INT 1
18360: NEG
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18384: LD_ADDR_VAR 0 13
18388: PUSH
18389: LD_INT 0
18391: PUSH
18392: LD_INT 0
18394: PUSH
18395: EMPTY
18396: LIST
18397: LIST
18398: PUSH
18399: LD_INT 0
18401: PUSH
18402: LD_INT 1
18404: NEG
18405: PUSH
18406: EMPTY
18407: LIST
18408: LIST
18409: PUSH
18410: LD_INT 1
18412: PUSH
18413: LD_INT 0
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: PUSH
18420: LD_INT 1
18422: PUSH
18423: LD_INT 1
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: PUSH
18430: LD_INT 0
18432: PUSH
18433: LD_INT 1
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PUSH
18440: LD_INT 1
18442: NEG
18443: PUSH
18444: LD_INT 0
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: PUSH
18451: LD_INT 1
18453: NEG
18454: PUSH
18455: LD_INT 1
18457: NEG
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: PUSH
18463: LD_INT 1
18465: NEG
18466: PUSH
18467: LD_INT 2
18469: NEG
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: PUSH
18475: LD_INT 2
18477: PUSH
18478: LD_INT 1
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: PUSH
18485: LD_INT 2
18487: PUSH
18488: LD_INT 2
18490: PUSH
18491: EMPTY
18492: LIST
18493: LIST
18494: PUSH
18495: LD_INT 1
18497: PUSH
18498: LD_INT 2
18500: PUSH
18501: EMPTY
18502: LIST
18503: LIST
18504: PUSH
18505: LD_INT 2
18507: NEG
18508: PUSH
18509: LD_INT 1
18511: NEG
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PUSH
18517: LD_INT 2
18519: NEG
18520: PUSH
18521: LD_INT 2
18523: NEG
18524: PUSH
18525: EMPTY
18526: LIST
18527: LIST
18528: PUSH
18529: LD_INT 2
18531: NEG
18532: PUSH
18533: LD_INT 3
18535: NEG
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: PUSH
18541: LD_INT 3
18543: NEG
18544: PUSH
18545: LD_INT 2
18547: NEG
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: PUSH
18553: LD_INT 3
18555: NEG
18556: PUSH
18557: LD_INT 3
18559: NEG
18560: PUSH
18561: EMPTY
18562: LIST
18563: LIST
18564: PUSH
18565: EMPTY
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18583: LD_ADDR_VAR 0 14
18587: PUSH
18588: LD_INT 0
18590: PUSH
18591: LD_INT 0
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: PUSH
18598: LD_INT 0
18600: PUSH
18601: LD_INT 1
18603: NEG
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: PUSH
18609: LD_INT 1
18611: PUSH
18612: LD_INT 0
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: PUSH
18619: LD_INT 1
18621: PUSH
18622: LD_INT 1
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: PUSH
18629: LD_INT 0
18631: PUSH
18632: LD_INT 1
18634: PUSH
18635: EMPTY
18636: LIST
18637: LIST
18638: PUSH
18639: LD_INT 1
18641: NEG
18642: PUSH
18643: LD_INT 0
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: PUSH
18650: LD_INT 1
18652: NEG
18653: PUSH
18654: LD_INT 1
18656: NEG
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: PUSH
18662: LD_INT 1
18664: NEG
18665: PUSH
18666: LD_INT 2
18668: NEG
18669: PUSH
18670: EMPTY
18671: LIST
18672: LIST
18673: PUSH
18674: LD_INT 0
18676: PUSH
18677: LD_INT 2
18679: NEG
18680: PUSH
18681: EMPTY
18682: LIST
18683: LIST
18684: PUSH
18685: LD_INT 1
18687: PUSH
18688: LD_INT 1
18690: NEG
18691: PUSH
18692: EMPTY
18693: LIST
18694: LIST
18695: PUSH
18696: LD_INT 1
18698: PUSH
18699: LD_INT 2
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PUSH
18706: LD_INT 0
18708: PUSH
18709: LD_INT 2
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: LD_INT 1
18718: NEG
18719: PUSH
18720: LD_INT 1
18722: PUSH
18723: EMPTY
18724: LIST
18725: LIST
18726: PUSH
18727: LD_INT 1
18729: NEG
18730: PUSH
18731: LD_INT 3
18733: NEG
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: LD_INT 0
18741: PUSH
18742: LD_INT 3
18744: NEG
18745: PUSH
18746: EMPTY
18747: LIST
18748: LIST
18749: PUSH
18750: LD_INT 1
18752: PUSH
18753: LD_INT 2
18755: NEG
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: PUSH
18761: EMPTY
18762: LIST
18763: LIST
18764: LIST
18765: LIST
18766: LIST
18767: LIST
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18779: LD_ADDR_VAR 0 15
18783: PUSH
18784: LD_INT 0
18786: PUSH
18787: LD_INT 0
18789: PUSH
18790: EMPTY
18791: LIST
18792: LIST
18793: PUSH
18794: LD_INT 0
18796: PUSH
18797: LD_INT 1
18799: NEG
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: PUSH
18805: LD_INT 1
18807: PUSH
18808: LD_INT 0
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: PUSH
18815: LD_INT 1
18817: PUSH
18818: LD_INT 1
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: PUSH
18825: LD_INT 0
18827: PUSH
18828: LD_INT 1
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: PUSH
18835: LD_INT 1
18837: NEG
18838: PUSH
18839: LD_INT 0
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: LD_INT 1
18848: NEG
18849: PUSH
18850: LD_INT 1
18852: NEG
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: PUSH
18858: LD_INT 1
18860: PUSH
18861: LD_INT 1
18863: NEG
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: PUSH
18869: LD_INT 2
18871: PUSH
18872: LD_INT 0
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: PUSH
18879: LD_INT 2
18881: PUSH
18882: LD_INT 1
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: PUSH
18889: LD_INT 1
18891: NEG
18892: PUSH
18893: LD_INT 1
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: PUSH
18900: LD_INT 2
18902: NEG
18903: PUSH
18904: LD_INT 0
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: PUSH
18911: LD_INT 2
18913: NEG
18914: PUSH
18915: LD_INT 1
18917: NEG
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: PUSH
18923: LD_INT 2
18925: PUSH
18926: LD_INT 1
18928: NEG
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: PUSH
18934: LD_INT 3
18936: PUSH
18937: LD_INT 0
18939: PUSH
18940: EMPTY
18941: LIST
18942: LIST
18943: PUSH
18944: LD_INT 3
18946: PUSH
18947: LD_INT 1
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: PUSH
18954: EMPTY
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: LIST
18966: LIST
18967: LIST
18968: LIST
18969: LIST
18970: LIST
18971: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18972: LD_ADDR_VAR 0 16
18976: PUSH
18977: LD_INT 0
18979: PUSH
18980: LD_INT 0
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: PUSH
18987: LD_INT 0
18989: PUSH
18990: LD_INT 1
18992: NEG
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: PUSH
18998: LD_INT 1
19000: PUSH
19001: LD_INT 0
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: PUSH
19008: LD_INT 1
19010: PUSH
19011: LD_INT 1
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: LD_INT 0
19020: PUSH
19021: LD_INT 1
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: LD_INT 1
19030: NEG
19031: PUSH
19032: LD_INT 0
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: PUSH
19039: LD_INT 1
19041: NEG
19042: PUSH
19043: LD_INT 1
19045: NEG
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: PUSH
19051: LD_INT 1
19053: NEG
19054: PUSH
19055: LD_INT 2
19057: NEG
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: PUSH
19063: LD_INT 2
19065: PUSH
19066: LD_INT 1
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: PUSH
19073: LD_INT 2
19075: PUSH
19076: LD_INT 2
19078: PUSH
19079: EMPTY
19080: LIST
19081: LIST
19082: PUSH
19083: LD_INT 1
19085: PUSH
19086: LD_INT 2
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: PUSH
19093: LD_INT 2
19095: NEG
19096: PUSH
19097: LD_INT 1
19099: NEG
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PUSH
19105: LD_INT 2
19107: NEG
19108: PUSH
19109: LD_INT 2
19111: NEG
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: PUSH
19117: LD_INT 3
19119: PUSH
19120: LD_INT 2
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: PUSH
19127: LD_INT 3
19129: PUSH
19130: LD_INT 3
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: PUSH
19137: LD_INT 2
19139: PUSH
19140: LD_INT 3
19142: PUSH
19143: EMPTY
19144: LIST
19145: LIST
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: LIST
19164: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19165: LD_ADDR_VAR 0 17
19169: PUSH
19170: LD_INT 0
19172: PUSH
19173: LD_INT 0
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: LD_INT 0
19182: PUSH
19183: LD_INT 1
19185: NEG
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PUSH
19191: LD_INT 1
19193: PUSH
19194: LD_INT 0
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: PUSH
19201: LD_INT 1
19203: PUSH
19204: LD_INT 1
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: PUSH
19211: LD_INT 0
19213: PUSH
19214: LD_INT 1
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: PUSH
19221: LD_INT 1
19223: NEG
19224: PUSH
19225: LD_INT 0
19227: PUSH
19228: EMPTY
19229: LIST
19230: LIST
19231: PUSH
19232: LD_INT 1
19234: NEG
19235: PUSH
19236: LD_INT 1
19238: NEG
19239: PUSH
19240: EMPTY
19241: LIST
19242: LIST
19243: PUSH
19244: LD_INT 1
19246: NEG
19247: PUSH
19248: LD_INT 2
19250: NEG
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: PUSH
19256: LD_INT 0
19258: PUSH
19259: LD_INT 2
19261: NEG
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: PUSH
19267: LD_INT 1
19269: PUSH
19270: LD_INT 1
19272: NEG
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: PUSH
19278: LD_INT 2
19280: PUSH
19281: LD_INT 0
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: PUSH
19288: LD_INT 2
19290: PUSH
19291: LD_INT 1
19293: PUSH
19294: EMPTY
19295: LIST
19296: LIST
19297: PUSH
19298: LD_INT 2
19300: PUSH
19301: LD_INT 2
19303: PUSH
19304: EMPTY
19305: LIST
19306: LIST
19307: PUSH
19308: LD_INT 1
19310: PUSH
19311: LD_INT 2
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: PUSH
19318: LD_INT 0
19320: PUSH
19321: LD_INT 2
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: PUSH
19328: LD_INT 1
19330: NEG
19331: PUSH
19332: LD_INT 1
19334: PUSH
19335: EMPTY
19336: LIST
19337: LIST
19338: PUSH
19339: LD_INT 2
19341: NEG
19342: PUSH
19343: LD_INT 0
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: PUSH
19350: LD_INT 2
19352: NEG
19353: PUSH
19354: LD_INT 1
19356: NEG
19357: PUSH
19358: EMPTY
19359: LIST
19360: LIST
19361: PUSH
19362: LD_INT 2
19364: NEG
19365: PUSH
19366: LD_INT 2
19368: NEG
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19395: LD_ADDR_VAR 0 18
19399: PUSH
19400: LD_INT 0
19402: PUSH
19403: LD_INT 0
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: PUSH
19410: LD_INT 0
19412: PUSH
19413: LD_INT 1
19415: NEG
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: PUSH
19421: LD_INT 1
19423: PUSH
19424: LD_INT 0
19426: PUSH
19427: EMPTY
19428: LIST
19429: LIST
19430: PUSH
19431: LD_INT 1
19433: PUSH
19434: LD_INT 1
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: PUSH
19441: LD_INT 0
19443: PUSH
19444: LD_INT 1
19446: PUSH
19447: EMPTY
19448: LIST
19449: LIST
19450: PUSH
19451: LD_INT 1
19453: NEG
19454: PUSH
19455: LD_INT 0
19457: PUSH
19458: EMPTY
19459: LIST
19460: LIST
19461: PUSH
19462: LD_INT 1
19464: NEG
19465: PUSH
19466: LD_INT 1
19468: NEG
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: PUSH
19474: LD_INT 1
19476: NEG
19477: PUSH
19478: LD_INT 2
19480: NEG
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: PUSH
19486: LD_INT 0
19488: PUSH
19489: LD_INT 2
19491: NEG
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: PUSH
19497: LD_INT 1
19499: PUSH
19500: LD_INT 1
19502: NEG
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: LD_INT 2
19510: PUSH
19511: LD_INT 0
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: PUSH
19518: LD_INT 2
19520: PUSH
19521: LD_INT 1
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: PUSH
19528: LD_INT 2
19530: PUSH
19531: LD_INT 2
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: PUSH
19538: LD_INT 1
19540: PUSH
19541: LD_INT 2
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: PUSH
19548: LD_INT 0
19550: PUSH
19551: LD_INT 2
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: PUSH
19558: LD_INT 1
19560: NEG
19561: PUSH
19562: LD_INT 1
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: PUSH
19569: LD_INT 2
19571: NEG
19572: PUSH
19573: LD_INT 0
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: PUSH
19580: LD_INT 2
19582: NEG
19583: PUSH
19584: LD_INT 1
19586: NEG
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PUSH
19592: LD_INT 2
19594: NEG
19595: PUSH
19596: LD_INT 2
19598: NEG
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19625: LD_ADDR_VAR 0 19
19629: PUSH
19630: LD_INT 0
19632: PUSH
19633: LD_INT 0
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: PUSH
19640: LD_INT 0
19642: PUSH
19643: LD_INT 1
19645: NEG
19646: PUSH
19647: EMPTY
19648: LIST
19649: LIST
19650: PUSH
19651: LD_INT 1
19653: PUSH
19654: LD_INT 0
19656: PUSH
19657: EMPTY
19658: LIST
19659: LIST
19660: PUSH
19661: LD_INT 1
19663: PUSH
19664: LD_INT 1
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: PUSH
19671: LD_INT 0
19673: PUSH
19674: LD_INT 1
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: PUSH
19681: LD_INT 1
19683: NEG
19684: PUSH
19685: LD_INT 0
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: PUSH
19692: LD_INT 1
19694: NEG
19695: PUSH
19696: LD_INT 1
19698: NEG
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: PUSH
19704: LD_INT 1
19706: NEG
19707: PUSH
19708: LD_INT 2
19710: NEG
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: PUSH
19716: LD_INT 0
19718: PUSH
19719: LD_INT 2
19721: NEG
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: PUSH
19727: LD_INT 1
19729: PUSH
19730: LD_INT 1
19732: NEG
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: PUSH
19738: LD_INT 2
19740: PUSH
19741: LD_INT 0
19743: PUSH
19744: EMPTY
19745: LIST
19746: LIST
19747: PUSH
19748: LD_INT 2
19750: PUSH
19751: LD_INT 1
19753: PUSH
19754: EMPTY
19755: LIST
19756: LIST
19757: PUSH
19758: LD_INT 2
19760: PUSH
19761: LD_INT 2
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: PUSH
19768: LD_INT 1
19770: PUSH
19771: LD_INT 2
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: PUSH
19778: LD_INT 0
19780: PUSH
19781: LD_INT 2
19783: PUSH
19784: EMPTY
19785: LIST
19786: LIST
19787: PUSH
19788: LD_INT 1
19790: NEG
19791: PUSH
19792: LD_INT 1
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: PUSH
19799: LD_INT 2
19801: NEG
19802: PUSH
19803: LD_INT 0
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PUSH
19810: LD_INT 2
19812: NEG
19813: PUSH
19814: LD_INT 1
19816: NEG
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: PUSH
19822: LD_INT 2
19824: NEG
19825: PUSH
19826: LD_INT 2
19828: NEG
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19855: LD_ADDR_VAR 0 20
19859: PUSH
19860: LD_INT 0
19862: PUSH
19863: LD_INT 0
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: PUSH
19870: LD_INT 0
19872: PUSH
19873: LD_INT 1
19875: NEG
19876: PUSH
19877: EMPTY
19878: LIST
19879: LIST
19880: PUSH
19881: LD_INT 1
19883: PUSH
19884: LD_INT 0
19886: PUSH
19887: EMPTY
19888: LIST
19889: LIST
19890: PUSH
19891: LD_INT 1
19893: PUSH
19894: LD_INT 1
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: PUSH
19901: LD_INT 0
19903: PUSH
19904: LD_INT 1
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: PUSH
19911: LD_INT 1
19913: NEG
19914: PUSH
19915: LD_INT 0
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: PUSH
19922: LD_INT 1
19924: NEG
19925: PUSH
19926: LD_INT 1
19928: NEG
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: PUSH
19934: LD_INT 1
19936: NEG
19937: PUSH
19938: LD_INT 2
19940: NEG
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: PUSH
19946: LD_INT 0
19948: PUSH
19949: LD_INT 2
19951: NEG
19952: PUSH
19953: EMPTY
19954: LIST
19955: LIST
19956: PUSH
19957: LD_INT 1
19959: PUSH
19960: LD_INT 1
19962: NEG
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: PUSH
19968: LD_INT 2
19970: PUSH
19971: LD_INT 0
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: PUSH
19978: LD_INT 2
19980: PUSH
19981: LD_INT 1
19983: PUSH
19984: EMPTY
19985: LIST
19986: LIST
19987: PUSH
19988: LD_INT 2
19990: PUSH
19991: LD_INT 2
19993: PUSH
19994: EMPTY
19995: LIST
19996: LIST
19997: PUSH
19998: LD_INT 1
20000: PUSH
20001: LD_INT 2
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: PUSH
20008: LD_INT 0
20010: PUSH
20011: LD_INT 2
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: PUSH
20018: LD_INT 1
20020: NEG
20021: PUSH
20022: LD_INT 1
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: PUSH
20029: LD_INT 2
20031: NEG
20032: PUSH
20033: LD_INT 0
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: PUSH
20040: LD_INT 2
20042: NEG
20043: PUSH
20044: LD_INT 1
20046: NEG
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: PUSH
20052: LD_INT 2
20054: NEG
20055: PUSH
20056: LD_INT 2
20058: NEG
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: LIST
20084: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20085: LD_ADDR_VAR 0 21
20089: PUSH
20090: LD_INT 0
20092: PUSH
20093: LD_INT 0
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: PUSH
20100: LD_INT 0
20102: PUSH
20103: LD_INT 1
20105: NEG
20106: PUSH
20107: EMPTY
20108: LIST
20109: LIST
20110: PUSH
20111: LD_INT 1
20113: PUSH
20114: LD_INT 0
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: PUSH
20121: LD_INT 1
20123: PUSH
20124: LD_INT 1
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: PUSH
20131: LD_INT 0
20133: PUSH
20134: LD_INT 1
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PUSH
20141: LD_INT 1
20143: NEG
20144: PUSH
20145: LD_INT 0
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: PUSH
20152: LD_INT 1
20154: NEG
20155: PUSH
20156: LD_INT 1
20158: NEG
20159: PUSH
20160: EMPTY
20161: LIST
20162: LIST
20163: PUSH
20164: LD_INT 1
20166: NEG
20167: PUSH
20168: LD_INT 2
20170: NEG
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: PUSH
20176: LD_INT 0
20178: PUSH
20179: LD_INT 2
20181: NEG
20182: PUSH
20183: EMPTY
20184: LIST
20185: LIST
20186: PUSH
20187: LD_INT 1
20189: PUSH
20190: LD_INT 1
20192: NEG
20193: PUSH
20194: EMPTY
20195: LIST
20196: LIST
20197: PUSH
20198: LD_INT 2
20200: PUSH
20201: LD_INT 0
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: PUSH
20208: LD_INT 2
20210: PUSH
20211: LD_INT 1
20213: PUSH
20214: EMPTY
20215: LIST
20216: LIST
20217: PUSH
20218: LD_INT 2
20220: PUSH
20221: LD_INT 2
20223: PUSH
20224: EMPTY
20225: LIST
20226: LIST
20227: PUSH
20228: LD_INT 1
20230: PUSH
20231: LD_INT 2
20233: PUSH
20234: EMPTY
20235: LIST
20236: LIST
20237: PUSH
20238: LD_INT 0
20240: PUSH
20241: LD_INT 2
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: LD_INT 1
20250: NEG
20251: PUSH
20252: LD_INT 1
20254: PUSH
20255: EMPTY
20256: LIST
20257: LIST
20258: PUSH
20259: LD_INT 2
20261: NEG
20262: PUSH
20263: LD_INT 0
20265: PUSH
20266: EMPTY
20267: LIST
20268: LIST
20269: PUSH
20270: LD_INT 2
20272: NEG
20273: PUSH
20274: LD_INT 1
20276: NEG
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: PUSH
20282: LD_INT 2
20284: NEG
20285: PUSH
20286: LD_INT 2
20288: NEG
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20315: LD_ADDR_VAR 0 22
20319: PUSH
20320: LD_INT 0
20322: PUSH
20323: LD_INT 0
20325: PUSH
20326: EMPTY
20327: LIST
20328: LIST
20329: PUSH
20330: LD_INT 0
20332: PUSH
20333: LD_INT 1
20335: NEG
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: PUSH
20341: LD_INT 1
20343: PUSH
20344: LD_INT 0
20346: PUSH
20347: EMPTY
20348: LIST
20349: LIST
20350: PUSH
20351: LD_INT 1
20353: PUSH
20354: LD_INT 1
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: PUSH
20361: LD_INT 0
20363: PUSH
20364: LD_INT 1
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: PUSH
20371: LD_INT 1
20373: NEG
20374: PUSH
20375: LD_INT 0
20377: PUSH
20378: EMPTY
20379: LIST
20380: LIST
20381: PUSH
20382: LD_INT 1
20384: NEG
20385: PUSH
20386: LD_INT 1
20388: NEG
20389: PUSH
20390: EMPTY
20391: LIST
20392: LIST
20393: PUSH
20394: LD_INT 1
20396: NEG
20397: PUSH
20398: LD_INT 2
20400: NEG
20401: PUSH
20402: EMPTY
20403: LIST
20404: LIST
20405: PUSH
20406: LD_INT 0
20408: PUSH
20409: LD_INT 2
20411: NEG
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: PUSH
20417: LD_INT 1
20419: PUSH
20420: LD_INT 1
20422: NEG
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: PUSH
20428: LD_INT 2
20430: PUSH
20431: LD_INT 0
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PUSH
20438: LD_INT 2
20440: PUSH
20441: LD_INT 1
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PUSH
20448: LD_INT 2
20450: PUSH
20451: LD_INT 2
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: PUSH
20458: LD_INT 1
20460: PUSH
20461: LD_INT 2
20463: PUSH
20464: EMPTY
20465: LIST
20466: LIST
20467: PUSH
20468: LD_INT 0
20470: PUSH
20471: LD_INT 2
20473: PUSH
20474: EMPTY
20475: LIST
20476: LIST
20477: PUSH
20478: LD_INT 1
20480: NEG
20481: PUSH
20482: LD_INT 1
20484: PUSH
20485: EMPTY
20486: LIST
20487: LIST
20488: PUSH
20489: LD_INT 2
20491: NEG
20492: PUSH
20493: LD_INT 0
20495: PUSH
20496: EMPTY
20497: LIST
20498: LIST
20499: PUSH
20500: LD_INT 2
20502: NEG
20503: PUSH
20504: LD_INT 1
20506: NEG
20507: PUSH
20508: EMPTY
20509: LIST
20510: LIST
20511: PUSH
20512: LD_INT 2
20514: NEG
20515: PUSH
20516: LD_INT 2
20518: NEG
20519: PUSH
20520: EMPTY
20521: LIST
20522: LIST
20523: PUSH
20524: EMPTY
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20545: LD_ADDR_VAR 0 23
20549: PUSH
20550: LD_INT 0
20552: PUSH
20553: LD_INT 0
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: PUSH
20560: LD_INT 0
20562: PUSH
20563: LD_INT 1
20565: NEG
20566: PUSH
20567: EMPTY
20568: LIST
20569: LIST
20570: PUSH
20571: LD_INT 1
20573: PUSH
20574: LD_INT 0
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: PUSH
20581: LD_INT 1
20583: PUSH
20584: LD_INT 1
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: PUSH
20591: LD_INT 0
20593: PUSH
20594: LD_INT 1
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: PUSH
20601: LD_INT 1
20603: NEG
20604: PUSH
20605: LD_INT 0
20607: PUSH
20608: EMPTY
20609: LIST
20610: LIST
20611: PUSH
20612: LD_INT 1
20614: NEG
20615: PUSH
20616: LD_INT 1
20618: NEG
20619: PUSH
20620: EMPTY
20621: LIST
20622: LIST
20623: PUSH
20624: LD_INT 1
20626: NEG
20627: PUSH
20628: LD_INT 2
20630: NEG
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: PUSH
20636: LD_INT 0
20638: PUSH
20639: LD_INT 2
20641: NEG
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: LD_INT 1
20649: PUSH
20650: LD_INT 1
20652: NEG
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: PUSH
20658: LD_INT 2
20660: PUSH
20661: LD_INT 0
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: PUSH
20668: LD_INT 2
20670: PUSH
20671: LD_INT 1
20673: PUSH
20674: EMPTY
20675: LIST
20676: LIST
20677: PUSH
20678: LD_INT 2
20680: PUSH
20681: LD_INT 2
20683: PUSH
20684: EMPTY
20685: LIST
20686: LIST
20687: PUSH
20688: LD_INT 1
20690: PUSH
20691: LD_INT 2
20693: PUSH
20694: EMPTY
20695: LIST
20696: LIST
20697: PUSH
20698: LD_INT 0
20700: PUSH
20701: LD_INT 2
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: PUSH
20708: LD_INT 1
20710: NEG
20711: PUSH
20712: LD_INT 1
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: PUSH
20719: LD_INT 2
20721: NEG
20722: PUSH
20723: LD_INT 0
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: PUSH
20730: LD_INT 2
20732: NEG
20733: PUSH
20734: LD_INT 1
20736: NEG
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: PUSH
20742: LD_INT 2
20744: NEG
20745: PUSH
20746: LD_INT 2
20748: NEG
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: PUSH
20754: LD_INT 2
20756: NEG
20757: PUSH
20758: LD_INT 3
20760: NEG
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: PUSH
20766: LD_INT 1
20768: NEG
20769: PUSH
20770: LD_INT 3
20772: NEG
20773: PUSH
20774: EMPTY
20775: LIST
20776: LIST
20777: PUSH
20778: LD_INT 1
20780: PUSH
20781: LD_INT 2
20783: NEG
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: PUSH
20789: LD_INT 2
20791: PUSH
20792: LD_INT 1
20794: NEG
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20825: LD_ADDR_VAR 0 24
20829: PUSH
20830: LD_INT 0
20832: PUSH
20833: LD_INT 0
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: PUSH
20840: LD_INT 0
20842: PUSH
20843: LD_INT 1
20845: NEG
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: PUSH
20851: LD_INT 1
20853: PUSH
20854: LD_INT 0
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: PUSH
20861: LD_INT 1
20863: PUSH
20864: LD_INT 1
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: PUSH
20871: LD_INT 0
20873: PUSH
20874: LD_INT 1
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: PUSH
20881: LD_INT 1
20883: NEG
20884: PUSH
20885: LD_INT 0
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: PUSH
20892: LD_INT 1
20894: NEG
20895: PUSH
20896: LD_INT 1
20898: NEG
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: PUSH
20904: LD_INT 1
20906: NEG
20907: PUSH
20908: LD_INT 2
20910: NEG
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: PUSH
20916: LD_INT 0
20918: PUSH
20919: LD_INT 2
20921: NEG
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: PUSH
20927: LD_INT 1
20929: PUSH
20930: LD_INT 1
20932: NEG
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: PUSH
20938: LD_INT 2
20940: PUSH
20941: LD_INT 0
20943: PUSH
20944: EMPTY
20945: LIST
20946: LIST
20947: PUSH
20948: LD_INT 2
20950: PUSH
20951: LD_INT 1
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: PUSH
20958: LD_INT 2
20960: PUSH
20961: LD_INT 2
20963: PUSH
20964: EMPTY
20965: LIST
20966: LIST
20967: PUSH
20968: LD_INT 1
20970: PUSH
20971: LD_INT 2
20973: PUSH
20974: EMPTY
20975: LIST
20976: LIST
20977: PUSH
20978: LD_INT 0
20980: PUSH
20981: LD_INT 2
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: PUSH
20988: LD_INT 1
20990: NEG
20991: PUSH
20992: LD_INT 1
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: PUSH
20999: LD_INT 2
21001: NEG
21002: PUSH
21003: LD_INT 0
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: PUSH
21010: LD_INT 2
21012: NEG
21013: PUSH
21014: LD_INT 1
21016: NEG
21017: PUSH
21018: EMPTY
21019: LIST
21020: LIST
21021: PUSH
21022: LD_INT 2
21024: NEG
21025: PUSH
21026: LD_INT 2
21028: NEG
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: PUSH
21034: LD_INT 1
21036: PUSH
21037: LD_INT 2
21039: NEG
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: PUSH
21045: LD_INT 2
21047: PUSH
21048: LD_INT 1
21050: NEG
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: PUSH
21056: LD_INT 3
21058: PUSH
21059: LD_INT 1
21061: PUSH
21062: EMPTY
21063: LIST
21064: LIST
21065: PUSH
21066: LD_INT 3
21068: PUSH
21069: LD_INT 2
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21101: LD_ADDR_VAR 0 25
21105: PUSH
21106: LD_INT 0
21108: PUSH
21109: LD_INT 0
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: PUSH
21116: LD_INT 0
21118: PUSH
21119: LD_INT 1
21121: NEG
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: PUSH
21127: LD_INT 1
21129: PUSH
21130: LD_INT 0
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: PUSH
21137: LD_INT 1
21139: PUSH
21140: LD_INT 1
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: PUSH
21147: LD_INT 0
21149: PUSH
21150: LD_INT 1
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: PUSH
21157: LD_INT 1
21159: NEG
21160: PUSH
21161: LD_INT 0
21163: PUSH
21164: EMPTY
21165: LIST
21166: LIST
21167: PUSH
21168: LD_INT 1
21170: NEG
21171: PUSH
21172: LD_INT 1
21174: NEG
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PUSH
21180: LD_INT 1
21182: NEG
21183: PUSH
21184: LD_INT 2
21186: NEG
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: PUSH
21192: LD_INT 0
21194: PUSH
21195: LD_INT 2
21197: NEG
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: PUSH
21203: LD_INT 1
21205: PUSH
21206: LD_INT 1
21208: NEG
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: PUSH
21214: LD_INT 2
21216: PUSH
21217: LD_INT 0
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: PUSH
21224: LD_INT 2
21226: PUSH
21227: LD_INT 1
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: PUSH
21234: LD_INT 2
21236: PUSH
21237: LD_INT 2
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: PUSH
21244: LD_INT 1
21246: PUSH
21247: LD_INT 2
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: PUSH
21254: LD_INT 0
21256: PUSH
21257: LD_INT 2
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PUSH
21264: LD_INT 1
21266: NEG
21267: PUSH
21268: LD_INT 1
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: PUSH
21275: LD_INT 2
21277: NEG
21278: PUSH
21279: LD_INT 0
21281: PUSH
21282: EMPTY
21283: LIST
21284: LIST
21285: PUSH
21286: LD_INT 2
21288: NEG
21289: PUSH
21290: LD_INT 1
21292: NEG
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: PUSH
21298: LD_INT 2
21300: NEG
21301: PUSH
21302: LD_INT 2
21304: NEG
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: PUSH
21310: LD_INT 3
21312: PUSH
21313: LD_INT 1
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PUSH
21320: LD_INT 3
21322: PUSH
21323: LD_INT 2
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: PUSH
21330: LD_INT 2
21332: PUSH
21333: LD_INT 3
21335: PUSH
21336: EMPTY
21337: LIST
21338: LIST
21339: PUSH
21340: LD_INT 1
21342: PUSH
21343: LD_INT 3
21345: PUSH
21346: EMPTY
21347: LIST
21348: LIST
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21375: LD_ADDR_VAR 0 26
21379: PUSH
21380: LD_INT 0
21382: PUSH
21383: LD_INT 0
21385: PUSH
21386: EMPTY
21387: LIST
21388: LIST
21389: PUSH
21390: LD_INT 0
21392: PUSH
21393: LD_INT 1
21395: NEG
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: PUSH
21401: LD_INT 1
21403: PUSH
21404: LD_INT 0
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: PUSH
21411: LD_INT 1
21413: PUSH
21414: LD_INT 1
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: PUSH
21421: LD_INT 0
21423: PUSH
21424: LD_INT 1
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: PUSH
21431: LD_INT 1
21433: NEG
21434: PUSH
21435: LD_INT 0
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: LD_INT 1
21444: NEG
21445: PUSH
21446: LD_INT 1
21448: NEG
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PUSH
21454: LD_INT 1
21456: NEG
21457: PUSH
21458: LD_INT 2
21460: NEG
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: PUSH
21466: LD_INT 0
21468: PUSH
21469: LD_INT 2
21471: NEG
21472: PUSH
21473: EMPTY
21474: LIST
21475: LIST
21476: PUSH
21477: LD_INT 1
21479: PUSH
21480: LD_INT 1
21482: NEG
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: PUSH
21488: LD_INT 2
21490: PUSH
21491: LD_INT 0
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: PUSH
21498: LD_INT 2
21500: PUSH
21501: LD_INT 1
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: PUSH
21508: LD_INT 2
21510: PUSH
21511: LD_INT 2
21513: PUSH
21514: EMPTY
21515: LIST
21516: LIST
21517: PUSH
21518: LD_INT 1
21520: PUSH
21521: LD_INT 2
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: PUSH
21528: LD_INT 0
21530: PUSH
21531: LD_INT 2
21533: PUSH
21534: EMPTY
21535: LIST
21536: LIST
21537: PUSH
21538: LD_INT 1
21540: NEG
21541: PUSH
21542: LD_INT 1
21544: PUSH
21545: EMPTY
21546: LIST
21547: LIST
21548: PUSH
21549: LD_INT 2
21551: NEG
21552: PUSH
21553: LD_INT 0
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: PUSH
21560: LD_INT 2
21562: NEG
21563: PUSH
21564: LD_INT 1
21566: NEG
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: PUSH
21572: LD_INT 2
21574: NEG
21575: PUSH
21576: LD_INT 2
21578: NEG
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: PUSH
21584: LD_INT 2
21586: PUSH
21587: LD_INT 3
21589: PUSH
21590: EMPTY
21591: LIST
21592: LIST
21593: PUSH
21594: LD_INT 1
21596: PUSH
21597: LD_INT 3
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: PUSH
21604: LD_INT 1
21606: NEG
21607: PUSH
21608: LD_INT 2
21610: PUSH
21611: EMPTY
21612: LIST
21613: LIST
21614: PUSH
21615: LD_INT 2
21617: NEG
21618: PUSH
21619: LD_INT 1
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: PUSH
21626: EMPTY
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21651: LD_ADDR_VAR 0 27
21655: PUSH
21656: LD_INT 0
21658: PUSH
21659: LD_INT 0
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: PUSH
21666: LD_INT 0
21668: PUSH
21669: LD_INT 1
21671: NEG
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: PUSH
21677: LD_INT 1
21679: PUSH
21680: LD_INT 0
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: PUSH
21687: LD_INT 1
21689: PUSH
21690: LD_INT 1
21692: PUSH
21693: EMPTY
21694: LIST
21695: LIST
21696: PUSH
21697: LD_INT 0
21699: PUSH
21700: LD_INT 1
21702: PUSH
21703: EMPTY
21704: LIST
21705: LIST
21706: PUSH
21707: LD_INT 1
21709: NEG
21710: PUSH
21711: LD_INT 0
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: PUSH
21718: LD_INT 1
21720: NEG
21721: PUSH
21722: LD_INT 1
21724: NEG
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: PUSH
21730: LD_INT 1
21732: NEG
21733: PUSH
21734: LD_INT 2
21736: NEG
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PUSH
21742: LD_INT 0
21744: PUSH
21745: LD_INT 2
21747: NEG
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: PUSH
21753: LD_INT 1
21755: PUSH
21756: LD_INT 1
21758: NEG
21759: PUSH
21760: EMPTY
21761: LIST
21762: LIST
21763: PUSH
21764: LD_INT 2
21766: PUSH
21767: LD_INT 0
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: PUSH
21774: LD_INT 2
21776: PUSH
21777: LD_INT 1
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: PUSH
21784: LD_INT 2
21786: PUSH
21787: LD_INT 2
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: PUSH
21794: LD_INT 1
21796: PUSH
21797: LD_INT 2
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PUSH
21804: LD_INT 0
21806: PUSH
21807: LD_INT 2
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: PUSH
21814: LD_INT 1
21816: NEG
21817: PUSH
21818: LD_INT 1
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: PUSH
21825: LD_INT 2
21827: NEG
21828: PUSH
21829: LD_INT 0
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PUSH
21836: LD_INT 2
21838: NEG
21839: PUSH
21840: LD_INT 1
21842: NEG
21843: PUSH
21844: EMPTY
21845: LIST
21846: LIST
21847: PUSH
21848: LD_INT 2
21850: NEG
21851: PUSH
21852: LD_INT 2
21854: NEG
21855: PUSH
21856: EMPTY
21857: LIST
21858: LIST
21859: PUSH
21860: LD_INT 1
21862: NEG
21863: PUSH
21864: LD_INT 2
21866: PUSH
21867: EMPTY
21868: LIST
21869: LIST
21870: PUSH
21871: LD_INT 2
21873: NEG
21874: PUSH
21875: LD_INT 1
21877: PUSH
21878: EMPTY
21879: LIST
21880: LIST
21881: PUSH
21882: LD_INT 3
21884: NEG
21885: PUSH
21886: LD_INT 1
21888: NEG
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: PUSH
21894: LD_INT 3
21896: NEG
21897: PUSH
21898: LD_INT 2
21900: NEG
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21931: LD_ADDR_VAR 0 28
21935: PUSH
21936: LD_INT 0
21938: PUSH
21939: LD_INT 0
21941: PUSH
21942: EMPTY
21943: LIST
21944: LIST
21945: PUSH
21946: LD_INT 0
21948: PUSH
21949: LD_INT 1
21951: NEG
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: PUSH
21957: LD_INT 1
21959: PUSH
21960: LD_INT 0
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: PUSH
21967: LD_INT 1
21969: PUSH
21970: LD_INT 1
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: LD_INT 0
21979: PUSH
21980: LD_INT 1
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 1
21989: NEG
21990: PUSH
21991: LD_INT 0
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 1
22000: NEG
22001: PUSH
22002: LD_INT 1
22004: NEG
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: PUSH
22010: LD_INT 1
22012: NEG
22013: PUSH
22014: LD_INT 2
22016: NEG
22017: PUSH
22018: EMPTY
22019: LIST
22020: LIST
22021: PUSH
22022: LD_INT 0
22024: PUSH
22025: LD_INT 2
22027: NEG
22028: PUSH
22029: EMPTY
22030: LIST
22031: LIST
22032: PUSH
22033: LD_INT 1
22035: PUSH
22036: LD_INT 1
22038: NEG
22039: PUSH
22040: EMPTY
22041: LIST
22042: LIST
22043: PUSH
22044: LD_INT 2
22046: PUSH
22047: LD_INT 0
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PUSH
22054: LD_INT 2
22056: PUSH
22057: LD_INT 1
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: PUSH
22064: LD_INT 2
22066: PUSH
22067: LD_INT 2
22069: PUSH
22070: EMPTY
22071: LIST
22072: LIST
22073: PUSH
22074: LD_INT 1
22076: PUSH
22077: LD_INT 2
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: PUSH
22084: LD_INT 0
22086: PUSH
22087: LD_INT 2
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: PUSH
22094: LD_INT 1
22096: NEG
22097: PUSH
22098: LD_INT 1
22100: PUSH
22101: EMPTY
22102: LIST
22103: LIST
22104: PUSH
22105: LD_INT 2
22107: NEG
22108: PUSH
22109: LD_INT 0
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: PUSH
22116: LD_INT 2
22118: NEG
22119: PUSH
22120: LD_INT 1
22122: NEG
22123: PUSH
22124: EMPTY
22125: LIST
22126: LIST
22127: PUSH
22128: LD_INT 2
22130: NEG
22131: PUSH
22132: LD_INT 2
22134: NEG
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: PUSH
22140: LD_INT 2
22142: NEG
22143: PUSH
22144: LD_INT 3
22146: NEG
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: PUSH
22152: LD_INT 1
22154: NEG
22155: PUSH
22156: LD_INT 3
22158: NEG
22159: PUSH
22160: EMPTY
22161: LIST
22162: LIST
22163: PUSH
22164: LD_INT 3
22166: NEG
22167: PUSH
22168: LD_INT 1
22170: NEG
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: PUSH
22176: LD_INT 3
22178: NEG
22179: PUSH
22180: LD_INT 2
22182: NEG
22183: PUSH
22184: EMPTY
22185: LIST
22186: LIST
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22213: LD_ADDR_VAR 0 29
22217: PUSH
22218: LD_INT 0
22220: PUSH
22221: LD_INT 0
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: PUSH
22228: LD_INT 0
22230: PUSH
22231: LD_INT 1
22233: NEG
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: PUSH
22239: LD_INT 1
22241: PUSH
22242: LD_INT 0
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: PUSH
22249: LD_INT 1
22251: PUSH
22252: LD_INT 1
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: PUSH
22259: LD_INT 0
22261: PUSH
22262: LD_INT 1
22264: PUSH
22265: EMPTY
22266: LIST
22267: LIST
22268: PUSH
22269: LD_INT 1
22271: NEG
22272: PUSH
22273: LD_INT 0
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: PUSH
22280: LD_INT 1
22282: NEG
22283: PUSH
22284: LD_INT 1
22286: NEG
22287: PUSH
22288: EMPTY
22289: LIST
22290: LIST
22291: PUSH
22292: LD_INT 1
22294: NEG
22295: PUSH
22296: LD_INT 2
22298: NEG
22299: PUSH
22300: EMPTY
22301: LIST
22302: LIST
22303: PUSH
22304: LD_INT 0
22306: PUSH
22307: LD_INT 2
22309: NEG
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: PUSH
22315: LD_INT 1
22317: PUSH
22318: LD_INT 1
22320: NEG
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PUSH
22326: LD_INT 2
22328: PUSH
22329: LD_INT 0
22331: PUSH
22332: EMPTY
22333: LIST
22334: LIST
22335: PUSH
22336: LD_INT 2
22338: PUSH
22339: LD_INT 1
22341: PUSH
22342: EMPTY
22343: LIST
22344: LIST
22345: PUSH
22346: LD_INT 1
22348: PUSH
22349: LD_INT 2
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: PUSH
22356: LD_INT 0
22358: PUSH
22359: LD_INT 2
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: PUSH
22366: LD_INT 1
22368: NEG
22369: PUSH
22370: LD_INT 1
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: PUSH
22377: LD_INT 2
22379: NEG
22380: PUSH
22381: LD_INT 1
22383: NEG
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: PUSH
22389: LD_INT 2
22391: NEG
22392: PUSH
22393: LD_INT 2
22395: NEG
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: PUSH
22401: LD_INT 2
22403: NEG
22404: PUSH
22405: LD_INT 3
22407: NEG
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: PUSH
22413: LD_INT 2
22415: PUSH
22416: LD_INT 1
22418: NEG
22419: PUSH
22420: EMPTY
22421: LIST
22422: LIST
22423: PUSH
22424: LD_INT 3
22426: PUSH
22427: LD_INT 1
22429: PUSH
22430: EMPTY
22431: LIST
22432: LIST
22433: PUSH
22434: LD_INT 1
22436: PUSH
22437: LD_INT 3
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: PUSH
22444: LD_INT 1
22446: NEG
22447: PUSH
22448: LD_INT 2
22450: PUSH
22451: EMPTY
22452: LIST
22453: LIST
22454: PUSH
22455: LD_INT 3
22457: NEG
22458: PUSH
22459: LD_INT 2
22461: NEG
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22492: LD_ADDR_VAR 0 30
22496: PUSH
22497: LD_INT 0
22499: PUSH
22500: LD_INT 0
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: PUSH
22507: LD_INT 0
22509: PUSH
22510: LD_INT 1
22512: NEG
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: PUSH
22518: LD_INT 1
22520: PUSH
22521: LD_INT 0
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: PUSH
22528: LD_INT 1
22530: PUSH
22531: LD_INT 1
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: PUSH
22538: LD_INT 0
22540: PUSH
22541: LD_INT 1
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PUSH
22548: LD_INT 1
22550: NEG
22551: PUSH
22552: LD_INT 0
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: PUSH
22559: LD_INT 1
22561: NEG
22562: PUSH
22563: LD_INT 1
22565: NEG
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PUSH
22571: LD_INT 1
22573: NEG
22574: PUSH
22575: LD_INT 2
22577: NEG
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PUSH
22583: LD_INT 0
22585: PUSH
22586: LD_INT 2
22588: NEG
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PUSH
22594: LD_INT 1
22596: PUSH
22597: LD_INT 1
22599: NEG
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: PUSH
22605: LD_INT 2
22607: PUSH
22608: LD_INT 0
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: PUSH
22615: LD_INT 2
22617: PUSH
22618: LD_INT 1
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: PUSH
22625: LD_INT 2
22627: PUSH
22628: LD_INT 2
22630: PUSH
22631: EMPTY
22632: LIST
22633: LIST
22634: PUSH
22635: LD_INT 1
22637: PUSH
22638: LD_INT 2
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: PUSH
22645: LD_INT 1
22647: NEG
22648: PUSH
22649: LD_INT 1
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: PUSH
22656: LD_INT 2
22658: NEG
22659: PUSH
22660: LD_INT 0
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: PUSH
22667: LD_INT 2
22669: NEG
22670: PUSH
22671: LD_INT 1
22673: NEG
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PUSH
22679: LD_INT 1
22681: NEG
22682: PUSH
22683: LD_INT 3
22685: NEG
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: PUSH
22691: LD_INT 1
22693: PUSH
22694: LD_INT 2
22696: NEG
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: PUSH
22702: LD_INT 3
22704: PUSH
22705: LD_INT 2
22707: PUSH
22708: EMPTY
22709: LIST
22710: LIST
22711: PUSH
22712: LD_INT 2
22714: PUSH
22715: LD_INT 3
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: PUSH
22722: LD_INT 2
22724: NEG
22725: PUSH
22726: LD_INT 1
22728: PUSH
22729: EMPTY
22730: LIST
22731: LIST
22732: PUSH
22733: LD_INT 3
22735: NEG
22736: PUSH
22737: LD_INT 1
22739: NEG
22740: PUSH
22741: EMPTY
22742: LIST
22743: LIST
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22770: LD_ADDR_VAR 0 31
22774: PUSH
22775: LD_INT 0
22777: PUSH
22778: LD_INT 0
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: PUSH
22785: LD_INT 0
22787: PUSH
22788: LD_INT 1
22790: NEG
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: PUSH
22796: LD_INT 1
22798: PUSH
22799: LD_INT 0
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: PUSH
22806: LD_INT 1
22808: PUSH
22809: LD_INT 1
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: PUSH
22816: LD_INT 0
22818: PUSH
22819: LD_INT 1
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: PUSH
22826: LD_INT 1
22828: NEG
22829: PUSH
22830: LD_INT 0
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: PUSH
22837: LD_INT 1
22839: NEG
22840: PUSH
22841: LD_INT 1
22843: NEG
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: PUSH
22849: LD_INT 1
22851: NEG
22852: PUSH
22853: LD_INT 2
22855: NEG
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: PUSH
22861: LD_INT 1
22863: PUSH
22864: LD_INT 1
22866: NEG
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: PUSH
22872: LD_INT 2
22874: PUSH
22875: LD_INT 0
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: PUSH
22882: LD_INT 2
22884: PUSH
22885: LD_INT 1
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: PUSH
22892: LD_INT 2
22894: PUSH
22895: LD_INT 2
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: PUSH
22902: LD_INT 1
22904: PUSH
22905: LD_INT 2
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: PUSH
22912: LD_INT 0
22914: PUSH
22915: LD_INT 2
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: PUSH
22922: LD_INT 1
22924: NEG
22925: PUSH
22926: LD_INT 1
22928: PUSH
22929: EMPTY
22930: LIST
22931: LIST
22932: PUSH
22933: LD_INT 2
22935: NEG
22936: PUSH
22937: LD_INT 1
22939: NEG
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: PUSH
22945: LD_INT 2
22947: NEG
22948: PUSH
22949: LD_INT 2
22951: NEG
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: PUSH
22957: LD_INT 2
22959: NEG
22960: PUSH
22961: LD_INT 3
22963: NEG
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: PUSH
22969: LD_INT 2
22971: PUSH
22972: LD_INT 1
22974: NEG
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: PUSH
22980: LD_INT 3
22982: PUSH
22983: LD_INT 1
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PUSH
22990: LD_INT 1
22992: PUSH
22993: LD_INT 3
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: PUSH
23000: LD_INT 1
23002: NEG
23003: PUSH
23004: LD_INT 2
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: PUSH
23011: LD_INT 3
23013: NEG
23014: PUSH
23015: LD_INT 2
23017: NEG
23018: PUSH
23019: EMPTY
23020: LIST
23021: LIST
23022: PUSH
23023: EMPTY
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23048: LD_ADDR_VAR 0 32
23052: PUSH
23053: LD_INT 0
23055: PUSH
23056: LD_INT 0
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: PUSH
23063: LD_INT 0
23065: PUSH
23066: LD_INT 1
23068: NEG
23069: PUSH
23070: EMPTY
23071: LIST
23072: LIST
23073: PUSH
23074: LD_INT 1
23076: PUSH
23077: LD_INT 0
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: PUSH
23084: LD_INT 1
23086: PUSH
23087: LD_INT 1
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: PUSH
23094: LD_INT 0
23096: PUSH
23097: LD_INT 1
23099: PUSH
23100: EMPTY
23101: LIST
23102: LIST
23103: PUSH
23104: LD_INT 1
23106: NEG
23107: PUSH
23108: LD_INT 0
23110: PUSH
23111: EMPTY
23112: LIST
23113: LIST
23114: PUSH
23115: LD_INT 1
23117: NEG
23118: PUSH
23119: LD_INT 1
23121: NEG
23122: PUSH
23123: EMPTY
23124: LIST
23125: LIST
23126: PUSH
23127: LD_INT 1
23129: NEG
23130: PUSH
23131: LD_INT 2
23133: NEG
23134: PUSH
23135: EMPTY
23136: LIST
23137: LIST
23138: PUSH
23139: LD_INT 0
23141: PUSH
23142: LD_INT 2
23144: NEG
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: LD_INT 1
23152: PUSH
23153: LD_INT 1
23155: NEG
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: PUSH
23161: LD_INT 2
23163: PUSH
23164: LD_INT 1
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: PUSH
23171: LD_INT 2
23173: PUSH
23174: LD_INT 2
23176: PUSH
23177: EMPTY
23178: LIST
23179: LIST
23180: PUSH
23181: LD_INT 1
23183: PUSH
23184: LD_INT 2
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PUSH
23191: LD_INT 0
23193: PUSH
23194: LD_INT 2
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: PUSH
23201: LD_INT 1
23203: NEG
23204: PUSH
23205: LD_INT 1
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PUSH
23212: LD_INT 2
23214: NEG
23215: PUSH
23216: LD_INT 0
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PUSH
23223: LD_INT 2
23225: NEG
23226: PUSH
23227: LD_INT 1
23229: NEG
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: PUSH
23235: LD_INT 1
23237: NEG
23238: PUSH
23239: LD_INT 3
23241: NEG
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: PUSH
23247: LD_INT 1
23249: PUSH
23250: LD_INT 2
23252: NEG
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: LD_INT 3
23260: PUSH
23261: LD_INT 2
23263: PUSH
23264: EMPTY
23265: LIST
23266: LIST
23267: PUSH
23268: LD_INT 2
23270: PUSH
23271: LD_INT 3
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: PUSH
23278: LD_INT 2
23280: NEG
23281: PUSH
23282: LD_INT 1
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: PUSH
23289: LD_INT 3
23291: NEG
23292: PUSH
23293: LD_INT 1
23295: NEG
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23326: LD_ADDR_VAR 0 33
23330: PUSH
23331: LD_INT 0
23333: PUSH
23334: LD_INT 0
23336: PUSH
23337: EMPTY
23338: LIST
23339: LIST
23340: PUSH
23341: LD_INT 0
23343: PUSH
23344: LD_INT 1
23346: NEG
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: PUSH
23352: LD_INT 1
23354: PUSH
23355: LD_INT 0
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: PUSH
23362: LD_INT 1
23364: PUSH
23365: LD_INT 1
23367: PUSH
23368: EMPTY
23369: LIST
23370: LIST
23371: PUSH
23372: LD_INT 0
23374: PUSH
23375: LD_INT 1
23377: PUSH
23378: EMPTY
23379: LIST
23380: LIST
23381: PUSH
23382: LD_INT 1
23384: NEG
23385: PUSH
23386: LD_INT 0
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: PUSH
23393: LD_INT 1
23395: NEG
23396: PUSH
23397: LD_INT 1
23399: NEG
23400: PUSH
23401: EMPTY
23402: LIST
23403: LIST
23404: PUSH
23405: LD_INT 1
23407: NEG
23408: PUSH
23409: LD_INT 2
23411: NEG
23412: PUSH
23413: EMPTY
23414: LIST
23415: LIST
23416: PUSH
23417: LD_INT 1
23419: PUSH
23420: LD_INT 1
23422: NEG
23423: PUSH
23424: EMPTY
23425: LIST
23426: LIST
23427: PUSH
23428: LD_INT 2
23430: PUSH
23431: LD_INT 0
23433: PUSH
23434: EMPTY
23435: LIST
23436: LIST
23437: PUSH
23438: LD_INT 2
23440: PUSH
23441: LD_INT 1
23443: PUSH
23444: EMPTY
23445: LIST
23446: LIST
23447: PUSH
23448: LD_INT 1
23450: PUSH
23451: LD_INT 2
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: PUSH
23458: LD_INT 0
23460: PUSH
23461: LD_INT 2
23463: PUSH
23464: EMPTY
23465: LIST
23466: LIST
23467: PUSH
23468: LD_INT 1
23470: NEG
23471: PUSH
23472: LD_INT 1
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: PUSH
23479: LD_INT 2
23481: NEG
23482: PUSH
23483: LD_INT 0
23485: PUSH
23486: EMPTY
23487: LIST
23488: LIST
23489: PUSH
23490: LD_INT 2
23492: NEG
23493: PUSH
23494: LD_INT 1
23496: NEG
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: PUSH
23502: LD_INT 2
23504: NEG
23505: PUSH
23506: LD_INT 2
23508: NEG
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: PUSH
23514: LD_INT 2
23516: NEG
23517: PUSH
23518: LD_INT 3
23520: NEG
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: PUSH
23526: LD_INT 2
23528: PUSH
23529: LD_INT 1
23531: NEG
23532: PUSH
23533: EMPTY
23534: LIST
23535: LIST
23536: PUSH
23537: LD_INT 3
23539: PUSH
23540: LD_INT 1
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: PUSH
23547: LD_INT 1
23549: PUSH
23550: LD_INT 3
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: PUSH
23557: LD_INT 1
23559: NEG
23560: PUSH
23561: LD_INT 2
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: PUSH
23568: LD_INT 3
23570: NEG
23571: PUSH
23572: LD_INT 2
23574: NEG
23575: PUSH
23576: EMPTY
23577: LIST
23578: LIST
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23605: LD_ADDR_VAR 0 34
23609: PUSH
23610: LD_INT 0
23612: PUSH
23613: LD_INT 0
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: PUSH
23620: LD_INT 0
23622: PUSH
23623: LD_INT 1
23625: NEG
23626: PUSH
23627: EMPTY
23628: LIST
23629: LIST
23630: PUSH
23631: LD_INT 1
23633: PUSH
23634: LD_INT 0
23636: PUSH
23637: EMPTY
23638: LIST
23639: LIST
23640: PUSH
23641: LD_INT 1
23643: PUSH
23644: LD_INT 1
23646: PUSH
23647: EMPTY
23648: LIST
23649: LIST
23650: PUSH
23651: LD_INT 0
23653: PUSH
23654: LD_INT 1
23656: PUSH
23657: EMPTY
23658: LIST
23659: LIST
23660: PUSH
23661: LD_INT 1
23663: NEG
23664: PUSH
23665: LD_INT 0
23667: PUSH
23668: EMPTY
23669: LIST
23670: LIST
23671: PUSH
23672: LD_INT 1
23674: NEG
23675: PUSH
23676: LD_INT 1
23678: NEG
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: PUSH
23684: LD_INT 1
23686: NEG
23687: PUSH
23688: LD_INT 2
23690: NEG
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: PUSH
23696: LD_INT 0
23698: PUSH
23699: LD_INT 2
23701: NEG
23702: PUSH
23703: EMPTY
23704: LIST
23705: LIST
23706: PUSH
23707: LD_INT 1
23709: PUSH
23710: LD_INT 1
23712: NEG
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PUSH
23718: LD_INT 2
23720: PUSH
23721: LD_INT 1
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: PUSH
23728: LD_INT 2
23730: PUSH
23731: LD_INT 2
23733: PUSH
23734: EMPTY
23735: LIST
23736: LIST
23737: PUSH
23738: LD_INT 1
23740: PUSH
23741: LD_INT 2
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: PUSH
23748: LD_INT 1
23750: NEG
23751: PUSH
23752: LD_INT 1
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PUSH
23759: LD_INT 2
23761: NEG
23762: PUSH
23763: LD_INT 0
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: PUSH
23770: LD_INT 2
23772: NEG
23773: PUSH
23774: LD_INT 1
23776: NEG
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: PUSH
23782: LD_INT 2
23784: NEG
23785: PUSH
23786: LD_INT 2
23788: NEG
23789: PUSH
23790: EMPTY
23791: LIST
23792: LIST
23793: PUSH
23794: LD_INT 1
23796: NEG
23797: PUSH
23798: LD_INT 3
23800: NEG
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: PUSH
23806: LD_INT 1
23808: PUSH
23809: LD_INT 2
23811: NEG
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: PUSH
23817: LD_INT 3
23819: PUSH
23820: LD_INT 2
23822: PUSH
23823: EMPTY
23824: LIST
23825: LIST
23826: PUSH
23827: LD_INT 2
23829: PUSH
23830: LD_INT 3
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: PUSH
23837: LD_INT 2
23839: NEG
23840: PUSH
23841: LD_INT 1
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: PUSH
23848: LD_INT 3
23850: NEG
23851: PUSH
23852: LD_INT 1
23854: NEG
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23885: LD_ADDR_VAR 0 35
23889: PUSH
23890: LD_INT 0
23892: PUSH
23893: LD_INT 0
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: PUSH
23900: LD_INT 0
23902: PUSH
23903: LD_INT 1
23905: NEG
23906: PUSH
23907: EMPTY
23908: LIST
23909: LIST
23910: PUSH
23911: LD_INT 1
23913: PUSH
23914: LD_INT 0
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: PUSH
23921: LD_INT 1
23923: PUSH
23924: LD_INT 1
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: PUSH
23931: LD_INT 0
23933: PUSH
23934: LD_INT 1
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PUSH
23941: LD_INT 1
23943: NEG
23944: PUSH
23945: LD_INT 0
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: PUSH
23952: LD_INT 1
23954: NEG
23955: PUSH
23956: LD_INT 1
23958: NEG
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: PUSH
23964: LD_INT 2
23966: PUSH
23967: LD_INT 1
23969: PUSH
23970: EMPTY
23971: LIST
23972: LIST
23973: PUSH
23974: LD_INT 2
23976: NEG
23977: PUSH
23978: LD_INT 1
23980: NEG
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23997: LD_ADDR_VAR 0 36
24001: PUSH
24002: LD_INT 0
24004: PUSH
24005: LD_INT 0
24007: PUSH
24008: EMPTY
24009: LIST
24010: LIST
24011: PUSH
24012: LD_INT 0
24014: PUSH
24015: LD_INT 1
24017: NEG
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PUSH
24023: LD_INT 1
24025: PUSH
24026: LD_INT 0
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: PUSH
24033: LD_INT 1
24035: PUSH
24036: LD_INT 1
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: LD_INT 0
24045: PUSH
24046: LD_INT 1
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: PUSH
24053: LD_INT 1
24055: NEG
24056: PUSH
24057: LD_INT 0
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: PUSH
24064: LD_INT 1
24066: NEG
24067: PUSH
24068: LD_INT 1
24070: NEG
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: PUSH
24076: LD_INT 1
24078: NEG
24079: PUSH
24080: LD_INT 2
24082: NEG
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PUSH
24088: LD_INT 1
24090: PUSH
24091: LD_INT 2
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: PUSH
24098: EMPTY
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24109: LD_ADDR_VAR 0 37
24113: PUSH
24114: LD_INT 0
24116: PUSH
24117: LD_INT 0
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: PUSH
24124: LD_INT 0
24126: PUSH
24127: LD_INT 1
24129: NEG
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: PUSH
24135: LD_INT 1
24137: PUSH
24138: LD_INT 0
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: PUSH
24145: LD_INT 1
24147: PUSH
24148: LD_INT 1
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PUSH
24155: LD_INT 0
24157: PUSH
24158: LD_INT 1
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: PUSH
24165: LD_INT 1
24167: NEG
24168: PUSH
24169: LD_INT 0
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: PUSH
24176: LD_INT 1
24178: NEG
24179: PUSH
24180: LD_INT 1
24182: NEG
24183: PUSH
24184: EMPTY
24185: LIST
24186: LIST
24187: PUSH
24188: LD_INT 1
24190: PUSH
24191: LD_INT 1
24193: NEG
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: PUSH
24199: LD_INT 1
24201: NEG
24202: PUSH
24203: LD_INT 1
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24221: LD_ADDR_VAR 0 38
24225: PUSH
24226: LD_INT 0
24228: PUSH
24229: LD_INT 0
24231: PUSH
24232: EMPTY
24233: LIST
24234: LIST
24235: PUSH
24236: LD_INT 0
24238: PUSH
24239: LD_INT 1
24241: NEG
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: PUSH
24247: LD_INT 1
24249: PUSH
24250: LD_INT 0
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: PUSH
24257: LD_INT 1
24259: PUSH
24260: LD_INT 1
24262: PUSH
24263: EMPTY
24264: LIST
24265: LIST
24266: PUSH
24267: LD_INT 0
24269: PUSH
24270: LD_INT 1
24272: PUSH
24273: EMPTY
24274: LIST
24275: LIST
24276: PUSH
24277: LD_INT 1
24279: NEG
24280: PUSH
24281: LD_INT 0
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: LD_INT 1
24290: NEG
24291: PUSH
24292: LD_INT 1
24294: NEG
24295: PUSH
24296: EMPTY
24297: LIST
24298: LIST
24299: PUSH
24300: LD_INT 2
24302: PUSH
24303: LD_INT 1
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: PUSH
24310: LD_INT 2
24312: NEG
24313: PUSH
24314: LD_INT 1
24316: NEG
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24333: LD_ADDR_VAR 0 39
24337: PUSH
24338: LD_INT 0
24340: PUSH
24341: LD_INT 0
24343: PUSH
24344: EMPTY
24345: LIST
24346: LIST
24347: PUSH
24348: LD_INT 0
24350: PUSH
24351: LD_INT 1
24353: NEG
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PUSH
24359: LD_INT 1
24361: PUSH
24362: LD_INT 0
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PUSH
24369: LD_INT 1
24371: PUSH
24372: LD_INT 1
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: PUSH
24379: LD_INT 0
24381: PUSH
24382: LD_INT 1
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: PUSH
24389: LD_INT 1
24391: NEG
24392: PUSH
24393: LD_INT 0
24395: PUSH
24396: EMPTY
24397: LIST
24398: LIST
24399: PUSH
24400: LD_INT 1
24402: NEG
24403: PUSH
24404: LD_INT 1
24406: NEG
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: PUSH
24412: LD_INT 1
24414: NEG
24415: PUSH
24416: LD_INT 2
24418: NEG
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PUSH
24424: LD_INT 1
24426: PUSH
24427: LD_INT 2
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24445: LD_ADDR_VAR 0 40
24449: PUSH
24450: LD_INT 0
24452: PUSH
24453: LD_INT 0
24455: PUSH
24456: EMPTY
24457: LIST
24458: LIST
24459: PUSH
24460: LD_INT 0
24462: PUSH
24463: LD_INT 1
24465: NEG
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: PUSH
24471: LD_INT 1
24473: PUSH
24474: LD_INT 0
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: LD_INT 1
24483: PUSH
24484: LD_INT 1
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PUSH
24491: LD_INT 0
24493: PUSH
24494: LD_INT 1
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PUSH
24501: LD_INT 1
24503: NEG
24504: PUSH
24505: LD_INT 0
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: PUSH
24512: LD_INT 1
24514: NEG
24515: PUSH
24516: LD_INT 1
24518: NEG
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: PUSH
24524: LD_INT 1
24526: PUSH
24527: LD_INT 1
24529: NEG
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: PUSH
24535: LD_INT 1
24537: NEG
24538: PUSH
24539: LD_INT 1
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24557: LD_ADDR_VAR 0 41
24561: PUSH
24562: LD_INT 0
24564: PUSH
24565: LD_INT 0
24567: PUSH
24568: EMPTY
24569: LIST
24570: LIST
24571: PUSH
24572: LD_INT 0
24574: PUSH
24575: LD_INT 1
24577: NEG
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: PUSH
24583: LD_INT 1
24585: PUSH
24586: LD_INT 0
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: PUSH
24593: LD_INT 1
24595: PUSH
24596: LD_INT 1
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PUSH
24603: LD_INT 0
24605: PUSH
24606: LD_INT 1
24608: PUSH
24609: EMPTY
24610: LIST
24611: LIST
24612: PUSH
24613: LD_INT 1
24615: NEG
24616: PUSH
24617: LD_INT 0
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: PUSH
24624: LD_INT 1
24626: NEG
24627: PUSH
24628: LD_INT 1
24630: NEG
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: PUSH
24636: LD_INT 1
24638: NEG
24639: PUSH
24640: LD_INT 2
24642: NEG
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: PUSH
24648: LD_INT 1
24650: PUSH
24651: LD_INT 1
24653: NEG
24654: PUSH
24655: EMPTY
24656: LIST
24657: LIST
24658: PUSH
24659: LD_INT 2
24661: PUSH
24662: LD_INT 0
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: PUSH
24669: LD_INT 2
24671: PUSH
24672: LD_INT 1
24674: PUSH
24675: EMPTY
24676: LIST
24677: LIST
24678: PUSH
24679: LD_INT 2
24681: PUSH
24682: LD_INT 2
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: PUSH
24689: LD_INT 1
24691: PUSH
24692: LD_INT 2
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: PUSH
24699: LD_INT 1
24701: NEG
24702: PUSH
24703: LD_INT 1
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: PUSH
24710: LD_INT 2
24712: NEG
24713: PUSH
24714: LD_INT 0
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: LD_INT 2
24723: NEG
24724: PUSH
24725: LD_INT 1
24727: NEG
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: PUSH
24733: LD_INT 2
24735: NEG
24736: PUSH
24737: LD_INT 2
24739: NEG
24740: PUSH
24741: EMPTY
24742: LIST
24743: LIST
24744: PUSH
24745: LD_INT 2
24747: NEG
24748: PUSH
24749: LD_INT 3
24751: NEG
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: PUSH
24757: LD_INT 2
24759: PUSH
24760: LD_INT 1
24762: NEG
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: PUSH
24768: LD_INT 3
24770: PUSH
24771: LD_INT 0
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: PUSH
24778: LD_INT 3
24780: PUSH
24781: LD_INT 1
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: PUSH
24788: LD_INT 3
24790: PUSH
24791: LD_INT 2
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: PUSH
24798: LD_INT 3
24800: PUSH
24801: LD_INT 3
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 2
24810: PUSH
24811: LD_INT 3
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: LD_INT 2
24820: NEG
24821: PUSH
24822: LD_INT 1
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: PUSH
24829: LD_INT 3
24831: NEG
24832: PUSH
24833: LD_INT 0
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 3
24842: NEG
24843: PUSH
24844: LD_INT 1
24846: NEG
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: PUSH
24852: LD_INT 3
24854: NEG
24855: PUSH
24856: LD_INT 2
24858: NEG
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: PUSH
24864: LD_INT 3
24866: NEG
24867: PUSH
24868: LD_INT 3
24870: NEG
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24907: LD_ADDR_VAR 0 42
24911: PUSH
24912: LD_INT 0
24914: PUSH
24915: LD_INT 0
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: PUSH
24922: LD_INT 0
24924: PUSH
24925: LD_INT 1
24927: NEG
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PUSH
24933: LD_INT 1
24935: PUSH
24936: LD_INT 0
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: PUSH
24943: LD_INT 1
24945: PUSH
24946: LD_INT 1
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PUSH
24953: LD_INT 0
24955: PUSH
24956: LD_INT 1
24958: PUSH
24959: EMPTY
24960: LIST
24961: LIST
24962: PUSH
24963: LD_INT 1
24965: NEG
24966: PUSH
24967: LD_INT 0
24969: PUSH
24970: EMPTY
24971: LIST
24972: LIST
24973: PUSH
24974: LD_INT 1
24976: NEG
24977: PUSH
24978: LD_INT 1
24980: NEG
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: PUSH
24986: LD_INT 1
24988: NEG
24989: PUSH
24990: LD_INT 2
24992: NEG
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: PUSH
24998: LD_INT 0
25000: PUSH
25001: LD_INT 2
25003: NEG
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: LD_INT 1
25011: PUSH
25012: LD_INT 1
25014: NEG
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: LD_INT 2
25022: PUSH
25023: LD_INT 1
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: PUSH
25030: LD_INT 2
25032: PUSH
25033: LD_INT 2
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: PUSH
25040: LD_INT 1
25042: PUSH
25043: LD_INT 2
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: PUSH
25050: LD_INT 0
25052: PUSH
25053: LD_INT 2
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: PUSH
25060: LD_INT 1
25062: NEG
25063: PUSH
25064: LD_INT 1
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: PUSH
25071: LD_INT 2
25073: NEG
25074: PUSH
25075: LD_INT 1
25077: NEG
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: PUSH
25083: LD_INT 2
25085: NEG
25086: PUSH
25087: LD_INT 2
25089: NEG
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: LD_INT 2
25097: NEG
25098: PUSH
25099: LD_INT 3
25101: NEG
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: PUSH
25107: LD_INT 1
25109: NEG
25110: PUSH
25111: LD_INT 3
25113: NEG
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: PUSH
25119: LD_INT 0
25121: PUSH
25122: LD_INT 3
25124: NEG
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PUSH
25130: LD_INT 1
25132: PUSH
25133: LD_INT 2
25135: NEG
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: LD_INT 3
25143: PUSH
25144: LD_INT 2
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PUSH
25151: LD_INT 3
25153: PUSH
25154: LD_INT 3
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: PUSH
25161: LD_INT 2
25163: PUSH
25164: LD_INT 3
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: LD_INT 1
25173: PUSH
25174: LD_INT 3
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 0
25183: PUSH
25184: LD_INT 3
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: PUSH
25191: LD_INT 1
25193: NEG
25194: PUSH
25195: LD_INT 2
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PUSH
25202: LD_INT 3
25204: NEG
25205: PUSH
25206: LD_INT 2
25208: NEG
25209: PUSH
25210: EMPTY
25211: LIST
25212: LIST
25213: PUSH
25214: LD_INT 3
25216: NEG
25217: PUSH
25218: LD_INT 3
25220: NEG
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25257: LD_ADDR_VAR 0 43
25261: PUSH
25262: LD_INT 0
25264: PUSH
25265: LD_INT 0
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: PUSH
25272: LD_INT 0
25274: PUSH
25275: LD_INT 1
25277: NEG
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: LD_INT 1
25285: PUSH
25286: LD_INT 0
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: LD_INT 1
25295: PUSH
25296: LD_INT 1
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PUSH
25303: LD_INT 0
25305: PUSH
25306: LD_INT 1
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: PUSH
25313: LD_INT 1
25315: NEG
25316: PUSH
25317: LD_INT 0
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: PUSH
25324: LD_INT 1
25326: NEG
25327: PUSH
25328: LD_INT 1
25330: NEG
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: PUSH
25336: LD_INT 1
25338: NEG
25339: PUSH
25340: LD_INT 2
25342: NEG
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: PUSH
25348: LD_INT 0
25350: PUSH
25351: LD_INT 2
25353: NEG
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 1
25361: PUSH
25362: LD_INT 1
25364: NEG
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: PUSH
25370: LD_INT 2
25372: PUSH
25373: LD_INT 0
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: PUSH
25380: LD_INT 2
25382: PUSH
25383: LD_INT 1
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: PUSH
25390: LD_INT 1
25392: PUSH
25393: LD_INT 2
25395: PUSH
25396: EMPTY
25397: LIST
25398: LIST
25399: PUSH
25400: LD_INT 0
25402: PUSH
25403: LD_INT 2
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PUSH
25410: LD_INT 1
25412: NEG
25413: PUSH
25414: LD_INT 1
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: PUSH
25421: LD_INT 2
25423: NEG
25424: PUSH
25425: LD_INT 0
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: LD_INT 2
25434: NEG
25435: PUSH
25436: LD_INT 1
25438: NEG
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: PUSH
25444: LD_INT 1
25446: NEG
25447: PUSH
25448: LD_INT 3
25450: NEG
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: PUSH
25456: LD_INT 0
25458: PUSH
25459: LD_INT 3
25461: NEG
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: PUSH
25467: LD_INT 1
25469: PUSH
25470: LD_INT 2
25472: NEG
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: LD_INT 2
25480: PUSH
25481: LD_INT 1
25483: NEG
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 3
25491: PUSH
25492: LD_INT 0
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PUSH
25499: LD_INT 3
25501: PUSH
25502: LD_INT 1
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: LD_INT 1
25511: PUSH
25512: LD_INT 3
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: PUSH
25519: LD_INT 0
25521: PUSH
25522: LD_INT 3
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: LD_INT 1
25531: NEG
25532: PUSH
25533: LD_INT 2
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: PUSH
25540: LD_INT 2
25542: NEG
25543: PUSH
25544: LD_INT 1
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: PUSH
25551: LD_INT 3
25553: NEG
25554: PUSH
25555: LD_INT 0
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: PUSH
25562: LD_INT 3
25564: NEG
25565: PUSH
25566: LD_INT 1
25568: NEG
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25605: LD_ADDR_VAR 0 44
25609: PUSH
25610: LD_INT 0
25612: PUSH
25613: LD_INT 0
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: PUSH
25620: LD_INT 0
25622: PUSH
25623: LD_INT 1
25625: NEG
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: LD_INT 1
25633: PUSH
25634: LD_INT 0
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: PUSH
25641: LD_INT 1
25643: PUSH
25644: LD_INT 1
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: PUSH
25651: LD_INT 0
25653: PUSH
25654: LD_INT 1
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: LD_INT 1
25663: NEG
25664: PUSH
25665: LD_INT 0
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: PUSH
25672: LD_INT 1
25674: NEG
25675: PUSH
25676: LD_INT 1
25678: NEG
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: PUSH
25684: LD_INT 1
25686: NEG
25687: PUSH
25688: LD_INT 2
25690: NEG
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PUSH
25696: LD_INT 1
25698: PUSH
25699: LD_INT 1
25701: NEG
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: PUSH
25707: LD_INT 2
25709: PUSH
25710: LD_INT 0
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: PUSH
25717: LD_INT 2
25719: PUSH
25720: LD_INT 1
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: PUSH
25727: LD_INT 2
25729: PUSH
25730: LD_INT 2
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: PUSH
25737: LD_INT 1
25739: PUSH
25740: LD_INT 2
25742: PUSH
25743: EMPTY
25744: LIST
25745: LIST
25746: PUSH
25747: LD_INT 1
25749: NEG
25750: PUSH
25751: LD_INT 1
25753: PUSH
25754: EMPTY
25755: LIST
25756: LIST
25757: PUSH
25758: LD_INT 2
25760: NEG
25761: PUSH
25762: LD_INT 0
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: LD_INT 2
25771: NEG
25772: PUSH
25773: LD_INT 1
25775: NEG
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PUSH
25781: LD_INT 2
25783: NEG
25784: PUSH
25785: LD_INT 2
25787: NEG
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: PUSH
25793: LD_INT 2
25795: NEG
25796: PUSH
25797: LD_INT 3
25799: NEG
25800: PUSH
25801: EMPTY
25802: LIST
25803: LIST
25804: PUSH
25805: LD_INT 2
25807: PUSH
25808: LD_INT 1
25810: NEG
25811: PUSH
25812: EMPTY
25813: LIST
25814: LIST
25815: PUSH
25816: LD_INT 3
25818: PUSH
25819: LD_INT 0
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: PUSH
25826: LD_INT 3
25828: PUSH
25829: LD_INT 1
25831: PUSH
25832: EMPTY
25833: LIST
25834: LIST
25835: PUSH
25836: LD_INT 3
25838: PUSH
25839: LD_INT 2
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: PUSH
25846: LD_INT 3
25848: PUSH
25849: LD_INT 3
25851: PUSH
25852: EMPTY
25853: LIST
25854: LIST
25855: PUSH
25856: LD_INT 2
25858: PUSH
25859: LD_INT 3
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: PUSH
25866: LD_INT 2
25868: NEG
25869: PUSH
25870: LD_INT 1
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: PUSH
25877: LD_INT 3
25879: NEG
25880: PUSH
25881: LD_INT 0
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: PUSH
25888: LD_INT 3
25890: NEG
25891: PUSH
25892: LD_INT 1
25894: NEG
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: PUSH
25900: LD_INT 3
25902: NEG
25903: PUSH
25904: LD_INT 2
25906: NEG
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: PUSH
25912: LD_INT 3
25914: NEG
25915: PUSH
25916: LD_INT 3
25918: NEG
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25955: LD_ADDR_VAR 0 45
25959: PUSH
25960: LD_INT 0
25962: PUSH
25963: LD_INT 0
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PUSH
25970: LD_INT 0
25972: PUSH
25973: LD_INT 1
25975: NEG
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PUSH
25981: LD_INT 1
25983: PUSH
25984: LD_INT 0
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PUSH
25991: LD_INT 1
25993: PUSH
25994: LD_INT 1
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: PUSH
26001: LD_INT 0
26003: PUSH
26004: LD_INT 1
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: PUSH
26011: LD_INT 1
26013: NEG
26014: PUSH
26015: LD_INT 0
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: PUSH
26022: LD_INT 1
26024: NEG
26025: PUSH
26026: LD_INT 1
26028: NEG
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: PUSH
26034: LD_INT 1
26036: NEG
26037: PUSH
26038: LD_INT 2
26040: NEG
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PUSH
26046: LD_INT 0
26048: PUSH
26049: LD_INT 2
26051: NEG
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 1
26059: PUSH
26060: LD_INT 1
26062: NEG
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: LD_INT 2
26070: PUSH
26071: LD_INT 1
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: PUSH
26078: LD_INT 2
26080: PUSH
26081: LD_INT 2
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: PUSH
26088: LD_INT 1
26090: PUSH
26091: LD_INT 2
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: PUSH
26098: LD_INT 0
26100: PUSH
26101: LD_INT 2
26103: PUSH
26104: EMPTY
26105: LIST
26106: LIST
26107: PUSH
26108: LD_INT 1
26110: NEG
26111: PUSH
26112: LD_INT 1
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: PUSH
26119: LD_INT 2
26121: NEG
26122: PUSH
26123: LD_INT 1
26125: NEG
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 2
26133: NEG
26134: PUSH
26135: LD_INT 2
26137: NEG
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: LD_INT 2
26145: NEG
26146: PUSH
26147: LD_INT 3
26149: NEG
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PUSH
26155: LD_INT 1
26157: NEG
26158: PUSH
26159: LD_INT 3
26161: NEG
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PUSH
26167: LD_INT 0
26169: PUSH
26170: LD_INT 3
26172: NEG
26173: PUSH
26174: EMPTY
26175: LIST
26176: LIST
26177: PUSH
26178: LD_INT 1
26180: PUSH
26181: LD_INT 2
26183: NEG
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 3
26191: PUSH
26192: LD_INT 2
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PUSH
26199: LD_INT 3
26201: PUSH
26202: LD_INT 3
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: PUSH
26209: LD_INT 2
26211: PUSH
26212: LD_INT 3
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: PUSH
26219: LD_INT 1
26221: PUSH
26222: LD_INT 3
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 0
26231: PUSH
26232: LD_INT 3
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: LD_INT 1
26241: NEG
26242: PUSH
26243: LD_INT 2
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: PUSH
26250: LD_INT 3
26252: NEG
26253: PUSH
26254: LD_INT 2
26256: NEG
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PUSH
26262: LD_INT 3
26264: NEG
26265: PUSH
26266: LD_INT 3
26268: NEG
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: LIST
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26305: LD_ADDR_VAR 0 46
26309: PUSH
26310: LD_INT 0
26312: PUSH
26313: LD_INT 0
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PUSH
26320: LD_INT 0
26322: PUSH
26323: LD_INT 1
26325: NEG
26326: PUSH
26327: EMPTY
26328: LIST
26329: LIST
26330: PUSH
26331: LD_INT 1
26333: PUSH
26334: LD_INT 0
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: PUSH
26341: LD_INT 1
26343: PUSH
26344: LD_INT 1
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: LD_INT 0
26353: PUSH
26354: LD_INT 1
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 1
26363: NEG
26364: PUSH
26365: LD_INT 0
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: PUSH
26372: LD_INT 1
26374: NEG
26375: PUSH
26376: LD_INT 1
26378: NEG
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: LD_INT 1
26386: NEG
26387: PUSH
26388: LD_INT 2
26390: NEG
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 0
26398: PUSH
26399: LD_INT 2
26401: NEG
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 1
26409: PUSH
26410: LD_INT 1
26412: NEG
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: PUSH
26418: LD_INT 2
26420: PUSH
26421: LD_INT 0
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 2
26430: PUSH
26431: LD_INT 1
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 1
26440: PUSH
26441: LD_INT 2
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 0
26450: PUSH
26451: LD_INT 2
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 1
26460: NEG
26461: PUSH
26462: LD_INT 1
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: PUSH
26469: LD_INT 2
26471: NEG
26472: PUSH
26473: LD_INT 0
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: LD_INT 2
26482: NEG
26483: PUSH
26484: LD_INT 1
26486: NEG
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PUSH
26492: LD_INT 1
26494: NEG
26495: PUSH
26496: LD_INT 3
26498: NEG
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: PUSH
26504: LD_INT 0
26506: PUSH
26507: LD_INT 3
26509: NEG
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PUSH
26515: LD_INT 1
26517: PUSH
26518: LD_INT 2
26520: NEG
26521: PUSH
26522: EMPTY
26523: LIST
26524: LIST
26525: PUSH
26526: LD_INT 2
26528: PUSH
26529: LD_INT 1
26531: NEG
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: PUSH
26537: LD_INT 3
26539: PUSH
26540: LD_INT 0
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: PUSH
26547: LD_INT 3
26549: PUSH
26550: LD_INT 1
26552: PUSH
26553: EMPTY
26554: LIST
26555: LIST
26556: PUSH
26557: LD_INT 1
26559: PUSH
26560: LD_INT 3
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: PUSH
26567: LD_INT 0
26569: PUSH
26570: LD_INT 3
26572: PUSH
26573: EMPTY
26574: LIST
26575: LIST
26576: PUSH
26577: LD_INT 1
26579: NEG
26580: PUSH
26581: LD_INT 2
26583: PUSH
26584: EMPTY
26585: LIST
26586: LIST
26587: PUSH
26588: LD_INT 2
26590: NEG
26591: PUSH
26592: LD_INT 1
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: PUSH
26599: LD_INT 3
26601: NEG
26602: PUSH
26603: LD_INT 0
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: LD_INT 3
26612: NEG
26613: PUSH
26614: LD_INT 1
26616: NEG
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: LIST
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: LIST
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26653: LD_ADDR_VAR 0 47
26657: PUSH
26658: LD_INT 0
26660: PUSH
26661: LD_INT 0
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: PUSH
26668: LD_INT 0
26670: PUSH
26671: LD_INT 1
26673: NEG
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: PUSH
26679: LD_INT 1
26681: PUSH
26682: LD_INT 0
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: PUSH
26689: LD_INT 1
26691: PUSH
26692: LD_INT 1
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: PUSH
26699: LD_INT 0
26701: PUSH
26702: LD_INT 1
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: PUSH
26709: LD_INT 1
26711: NEG
26712: PUSH
26713: LD_INT 0
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: PUSH
26720: LD_INT 1
26722: NEG
26723: PUSH
26724: LD_INT 1
26726: NEG
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: PUSH
26732: LD_INT 1
26734: NEG
26735: PUSH
26736: LD_INT 2
26738: NEG
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: PUSH
26744: LD_INT 0
26746: PUSH
26747: LD_INT 2
26749: NEG
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: PUSH
26755: LD_INT 1
26757: PUSH
26758: LD_INT 1
26760: NEG
26761: PUSH
26762: EMPTY
26763: LIST
26764: LIST
26765: PUSH
26766: LD_INT 2
26768: NEG
26769: PUSH
26770: LD_INT 1
26772: NEG
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: PUSH
26778: LD_INT 2
26780: NEG
26781: PUSH
26782: LD_INT 2
26784: NEG
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26804: LD_ADDR_VAR 0 48
26808: PUSH
26809: LD_INT 0
26811: PUSH
26812: LD_INT 0
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: LD_INT 0
26821: PUSH
26822: LD_INT 1
26824: NEG
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: PUSH
26830: LD_INT 1
26832: PUSH
26833: LD_INT 0
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: LD_INT 1
26842: PUSH
26843: LD_INT 1
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: LD_INT 0
26852: PUSH
26853: LD_INT 1
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: PUSH
26860: LD_INT 1
26862: NEG
26863: PUSH
26864: LD_INT 0
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: PUSH
26871: LD_INT 1
26873: NEG
26874: PUSH
26875: LD_INT 1
26877: NEG
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: PUSH
26883: LD_INT 1
26885: NEG
26886: PUSH
26887: LD_INT 2
26889: NEG
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: PUSH
26895: LD_INT 0
26897: PUSH
26898: LD_INT 2
26900: NEG
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PUSH
26906: LD_INT 1
26908: PUSH
26909: LD_INT 1
26911: NEG
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: PUSH
26917: LD_INT 2
26919: PUSH
26920: LD_INT 0
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PUSH
26927: LD_INT 2
26929: PUSH
26930: LD_INT 1
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26951: LD_ADDR_VAR 0 49
26955: PUSH
26956: LD_INT 0
26958: PUSH
26959: LD_INT 0
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: PUSH
26966: LD_INT 0
26968: PUSH
26969: LD_INT 1
26971: NEG
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PUSH
26977: LD_INT 1
26979: PUSH
26980: LD_INT 0
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: LD_INT 1
26989: PUSH
26990: LD_INT 1
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: PUSH
26997: LD_INT 0
26999: PUSH
27000: LD_INT 1
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: PUSH
27007: LD_INT 1
27009: NEG
27010: PUSH
27011: LD_INT 0
27013: PUSH
27014: EMPTY
27015: LIST
27016: LIST
27017: PUSH
27018: LD_INT 1
27020: NEG
27021: PUSH
27022: LD_INT 1
27024: NEG
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: PUSH
27030: LD_INT 1
27032: PUSH
27033: LD_INT 1
27035: NEG
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: PUSH
27041: LD_INT 2
27043: PUSH
27044: LD_INT 0
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: LD_INT 2
27053: PUSH
27054: LD_INT 1
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: PUSH
27061: LD_INT 2
27063: PUSH
27064: LD_INT 2
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: PUSH
27071: LD_INT 1
27073: PUSH
27074: LD_INT 2
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: LIST
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: LIST
27090: LIST
27091: LIST
27092: LIST
27093: LIST
27094: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27095: LD_ADDR_VAR 0 50
27099: PUSH
27100: LD_INT 0
27102: PUSH
27103: LD_INT 0
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PUSH
27110: LD_INT 0
27112: PUSH
27113: LD_INT 1
27115: NEG
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: PUSH
27121: LD_INT 1
27123: PUSH
27124: LD_INT 0
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: PUSH
27131: LD_INT 1
27133: PUSH
27134: LD_INT 1
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: PUSH
27141: LD_INT 0
27143: PUSH
27144: LD_INT 1
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 1
27153: NEG
27154: PUSH
27155: LD_INT 0
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: PUSH
27162: LD_INT 1
27164: NEG
27165: PUSH
27166: LD_INT 1
27168: NEG
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: PUSH
27174: LD_INT 2
27176: PUSH
27177: LD_INT 1
27179: PUSH
27180: EMPTY
27181: LIST
27182: LIST
27183: PUSH
27184: LD_INT 2
27186: PUSH
27187: LD_INT 2
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: PUSH
27194: LD_INT 1
27196: PUSH
27197: LD_INT 2
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: PUSH
27204: LD_INT 0
27206: PUSH
27207: LD_INT 2
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: PUSH
27214: LD_INT 1
27216: NEG
27217: PUSH
27218: LD_INT 1
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27239: LD_ADDR_VAR 0 51
27243: PUSH
27244: LD_INT 0
27246: PUSH
27247: LD_INT 0
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PUSH
27254: LD_INT 0
27256: PUSH
27257: LD_INT 1
27259: NEG
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: LD_INT 1
27267: PUSH
27268: LD_INT 0
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PUSH
27275: LD_INT 1
27277: PUSH
27278: LD_INT 1
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: PUSH
27285: LD_INT 0
27287: PUSH
27288: LD_INT 1
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: PUSH
27295: LD_INT 1
27297: NEG
27298: PUSH
27299: LD_INT 0
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 1
27308: NEG
27309: PUSH
27310: LD_INT 1
27312: NEG
27313: PUSH
27314: EMPTY
27315: LIST
27316: LIST
27317: PUSH
27318: LD_INT 1
27320: PUSH
27321: LD_INT 2
27323: PUSH
27324: EMPTY
27325: LIST
27326: LIST
27327: PUSH
27328: LD_INT 0
27330: PUSH
27331: LD_INT 2
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: PUSH
27338: LD_INT 1
27340: NEG
27341: PUSH
27342: LD_INT 1
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: PUSH
27349: LD_INT 2
27351: NEG
27352: PUSH
27353: LD_INT 0
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PUSH
27360: LD_INT 2
27362: NEG
27363: PUSH
27364: LD_INT 1
27366: NEG
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27386: LD_ADDR_VAR 0 52
27390: PUSH
27391: LD_INT 0
27393: PUSH
27394: LD_INT 0
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: LD_INT 0
27403: PUSH
27404: LD_INT 1
27406: NEG
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: PUSH
27412: LD_INT 1
27414: PUSH
27415: LD_INT 0
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PUSH
27422: LD_INT 1
27424: PUSH
27425: LD_INT 1
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: LD_INT 0
27434: PUSH
27435: LD_INT 1
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PUSH
27442: LD_INT 1
27444: NEG
27445: PUSH
27446: LD_INT 0
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: LD_INT 1
27455: NEG
27456: PUSH
27457: LD_INT 1
27459: NEG
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 1
27467: NEG
27468: PUSH
27469: LD_INT 2
27471: NEG
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 1
27479: NEG
27480: PUSH
27481: LD_INT 1
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 2
27490: NEG
27491: PUSH
27492: LD_INT 0
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: LD_INT 2
27501: NEG
27502: PUSH
27503: LD_INT 1
27505: NEG
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: LD_INT 2
27513: NEG
27514: PUSH
27515: LD_INT 2
27517: NEG
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27537: LD_ADDR_VAR 0 53
27541: PUSH
27542: LD_INT 0
27544: PUSH
27545: LD_INT 0
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: LD_INT 0
27554: PUSH
27555: LD_INT 1
27557: NEG
27558: PUSH
27559: EMPTY
27560: LIST
27561: LIST
27562: PUSH
27563: LD_INT 1
27565: PUSH
27566: LD_INT 0
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: PUSH
27573: LD_INT 1
27575: PUSH
27576: LD_INT 1
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PUSH
27583: LD_INT 0
27585: PUSH
27586: LD_INT 1
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: PUSH
27593: LD_INT 1
27595: NEG
27596: PUSH
27597: LD_INT 0
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: PUSH
27604: LD_INT 1
27606: NEG
27607: PUSH
27608: LD_INT 1
27610: NEG
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: PUSH
27616: LD_INT 1
27618: NEG
27619: PUSH
27620: LD_INT 2
27622: NEG
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: PUSH
27628: LD_INT 0
27630: PUSH
27631: LD_INT 2
27633: NEG
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PUSH
27639: LD_INT 1
27641: PUSH
27642: LD_INT 1
27644: NEG
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: LD_INT 2
27652: PUSH
27653: LD_INT 0
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: PUSH
27660: LD_INT 2
27662: PUSH
27663: LD_INT 1
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: PUSH
27670: LD_INT 2
27672: PUSH
27673: LD_INT 2
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: PUSH
27680: LD_INT 1
27682: PUSH
27683: LD_INT 2
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: PUSH
27690: LD_INT 0
27692: PUSH
27693: LD_INT 2
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: PUSH
27700: LD_INT 1
27702: NEG
27703: PUSH
27704: LD_INT 1
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: PUSH
27711: LD_INT 2
27713: NEG
27714: PUSH
27715: LD_INT 0
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: PUSH
27722: LD_INT 2
27724: NEG
27725: PUSH
27726: LD_INT 1
27728: NEG
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: PUSH
27734: LD_INT 2
27736: NEG
27737: PUSH
27738: LD_INT 2
27740: NEG
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27767: LD_ADDR_VAR 0 54
27771: PUSH
27772: LD_INT 0
27774: PUSH
27775: LD_INT 0
27777: PUSH
27778: EMPTY
27779: LIST
27780: LIST
27781: PUSH
27782: LD_INT 0
27784: PUSH
27785: LD_INT 1
27787: NEG
27788: PUSH
27789: EMPTY
27790: LIST
27791: LIST
27792: PUSH
27793: LD_INT 1
27795: PUSH
27796: LD_INT 0
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: PUSH
27803: LD_INT 1
27805: PUSH
27806: LD_INT 1
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: PUSH
27813: LD_INT 0
27815: PUSH
27816: LD_INT 1
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: PUSH
27823: LD_INT 1
27825: NEG
27826: PUSH
27827: LD_INT 0
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: PUSH
27834: LD_INT 1
27836: NEG
27837: PUSH
27838: LD_INT 1
27840: NEG
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: PUSH
27846: LD_INT 1
27848: NEG
27849: PUSH
27850: LD_INT 2
27852: NEG
27853: PUSH
27854: EMPTY
27855: LIST
27856: LIST
27857: PUSH
27858: LD_INT 0
27860: PUSH
27861: LD_INT 2
27863: NEG
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: PUSH
27869: LD_INT 1
27871: PUSH
27872: LD_INT 1
27874: NEG
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 2
27882: PUSH
27883: LD_INT 0
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: PUSH
27890: LD_INT 2
27892: PUSH
27893: LD_INT 1
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: PUSH
27900: LD_INT 2
27902: PUSH
27903: LD_INT 2
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PUSH
27910: LD_INT 1
27912: PUSH
27913: LD_INT 2
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: PUSH
27920: LD_INT 0
27922: PUSH
27923: LD_INT 2
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: PUSH
27930: LD_INT 1
27932: NEG
27933: PUSH
27934: LD_INT 1
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: LD_INT 2
27943: NEG
27944: PUSH
27945: LD_INT 0
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 2
27954: NEG
27955: PUSH
27956: LD_INT 1
27958: NEG
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: LD_INT 2
27966: NEG
27967: PUSH
27968: LD_INT 2
27970: NEG
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: LIST
27980: LIST
27981: LIST
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: LIST
27988: LIST
27989: LIST
27990: LIST
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27997: LD_ADDR_VAR 0 55
28001: PUSH
28002: LD_INT 0
28004: PUSH
28005: LD_INT 0
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: PUSH
28012: LD_INT 0
28014: PUSH
28015: LD_INT 1
28017: NEG
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: LD_INT 1
28025: PUSH
28026: LD_INT 0
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PUSH
28033: LD_INT 1
28035: PUSH
28036: LD_INT 1
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PUSH
28043: LD_INT 0
28045: PUSH
28046: LD_INT 1
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PUSH
28053: LD_INT 1
28055: NEG
28056: PUSH
28057: LD_INT 0
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PUSH
28064: LD_INT 1
28066: NEG
28067: PUSH
28068: LD_INT 1
28070: NEG
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: PUSH
28076: LD_INT 1
28078: NEG
28079: PUSH
28080: LD_INT 2
28082: NEG
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: PUSH
28088: LD_INT 0
28090: PUSH
28091: LD_INT 2
28093: NEG
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: PUSH
28099: LD_INT 1
28101: PUSH
28102: LD_INT 1
28104: NEG
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PUSH
28110: LD_INT 2
28112: PUSH
28113: LD_INT 0
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PUSH
28120: LD_INT 2
28122: PUSH
28123: LD_INT 1
28125: PUSH
28126: EMPTY
28127: LIST
28128: LIST
28129: PUSH
28130: LD_INT 2
28132: PUSH
28133: LD_INT 2
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: PUSH
28140: LD_INT 1
28142: PUSH
28143: LD_INT 2
28145: PUSH
28146: EMPTY
28147: LIST
28148: LIST
28149: PUSH
28150: LD_INT 0
28152: PUSH
28153: LD_INT 2
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PUSH
28160: LD_INT 1
28162: NEG
28163: PUSH
28164: LD_INT 1
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: PUSH
28171: LD_INT 2
28173: NEG
28174: PUSH
28175: LD_INT 0
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: PUSH
28182: LD_INT 2
28184: NEG
28185: PUSH
28186: LD_INT 1
28188: NEG
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: PUSH
28194: LD_INT 2
28196: NEG
28197: PUSH
28198: LD_INT 2
28200: NEG
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: LIST
28210: LIST
28211: LIST
28212: LIST
28213: LIST
28214: LIST
28215: LIST
28216: LIST
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28227: LD_ADDR_VAR 0 56
28231: PUSH
28232: LD_INT 0
28234: PUSH
28235: LD_INT 0
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: LD_INT 0
28244: PUSH
28245: LD_INT 1
28247: NEG
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: PUSH
28253: LD_INT 1
28255: PUSH
28256: LD_INT 0
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PUSH
28263: LD_INT 1
28265: PUSH
28266: LD_INT 1
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: PUSH
28273: LD_INT 0
28275: PUSH
28276: LD_INT 1
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: PUSH
28283: LD_INT 1
28285: NEG
28286: PUSH
28287: LD_INT 0
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: PUSH
28294: LD_INT 1
28296: NEG
28297: PUSH
28298: LD_INT 1
28300: NEG
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: PUSH
28306: LD_INT 1
28308: NEG
28309: PUSH
28310: LD_INT 2
28312: NEG
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: PUSH
28318: LD_INT 0
28320: PUSH
28321: LD_INT 2
28323: NEG
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: PUSH
28329: LD_INT 1
28331: PUSH
28332: LD_INT 1
28334: NEG
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: PUSH
28340: LD_INT 2
28342: PUSH
28343: LD_INT 0
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: PUSH
28350: LD_INT 2
28352: PUSH
28353: LD_INT 1
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: PUSH
28360: LD_INT 2
28362: PUSH
28363: LD_INT 2
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: PUSH
28370: LD_INT 1
28372: PUSH
28373: LD_INT 2
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: PUSH
28380: LD_INT 0
28382: PUSH
28383: LD_INT 2
28385: PUSH
28386: EMPTY
28387: LIST
28388: LIST
28389: PUSH
28390: LD_INT 1
28392: NEG
28393: PUSH
28394: LD_INT 1
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: LD_INT 2
28403: NEG
28404: PUSH
28405: LD_INT 0
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 2
28414: NEG
28415: PUSH
28416: LD_INT 1
28418: NEG
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: LD_INT 2
28426: NEG
28427: PUSH
28428: LD_INT 2
28430: NEG
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: LIST
28450: LIST
28451: LIST
28452: LIST
28453: LIST
28454: LIST
28455: LIST
28456: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28457: LD_ADDR_VAR 0 57
28461: PUSH
28462: LD_INT 0
28464: PUSH
28465: LD_INT 0
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: LD_INT 0
28474: PUSH
28475: LD_INT 1
28477: NEG
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: LD_INT 1
28485: PUSH
28486: LD_INT 0
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: LD_INT 1
28495: PUSH
28496: LD_INT 1
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 0
28505: PUSH
28506: LD_INT 1
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PUSH
28513: LD_INT 1
28515: NEG
28516: PUSH
28517: LD_INT 0
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: PUSH
28524: LD_INT 1
28526: NEG
28527: PUSH
28528: LD_INT 1
28530: NEG
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: LD_INT 1
28538: NEG
28539: PUSH
28540: LD_INT 2
28542: NEG
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: PUSH
28548: LD_INT 0
28550: PUSH
28551: LD_INT 2
28553: NEG
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: PUSH
28559: LD_INT 1
28561: PUSH
28562: LD_INT 1
28564: NEG
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: PUSH
28570: LD_INT 2
28572: PUSH
28573: LD_INT 0
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: PUSH
28580: LD_INT 2
28582: PUSH
28583: LD_INT 1
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: PUSH
28590: LD_INT 2
28592: PUSH
28593: LD_INT 2
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: PUSH
28600: LD_INT 1
28602: PUSH
28603: LD_INT 2
28605: PUSH
28606: EMPTY
28607: LIST
28608: LIST
28609: PUSH
28610: LD_INT 0
28612: PUSH
28613: LD_INT 2
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: PUSH
28620: LD_INT 1
28622: NEG
28623: PUSH
28624: LD_INT 1
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: LD_INT 2
28633: NEG
28634: PUSH
28635: LD_INT 0
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: PUSH
28642: LD_INT 2
28644: NEG
28645: PUSH
28646: LD_INT 1
28648: NEG
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: PUSH
28654: LD_INT 2
28656: NEG
28657: PUSH
28658: LD_INT 2
28660: NEG
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: LIST
28670: LIST
28671: LIST
28672: LIST
28673: LIST
28674: LIST
28675: LIST
28676: LIST
28677: LIST
28678: LIST
28679: LIST
28680: LIST
28681: LIST
28682: LIST
28683: LIST
28684: LIST
28685: LIST
28686: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28687: LD_ADDR_VAR 0 58
28691: PUSH
28692: LD_INT 0
28694: PUSH
28695: LD_INT 0
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 0
28704: PUSH
28705: LD_INT 1
28707: NEG
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: LD_INT 1
28715: PUSH
28716: LD_INT 0
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: LD_INT 1
28725: PUSH
28726: LD_INT 1
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: LD_INT 0
28735: PUSH
28736: LD_INT 1
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: PUSH
28743: LD_INT 1
28745: NEG
28746: PUSH
28747: LD_INT 0
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: PUSH
28754: LD_INT 1
28756: NEG
28757: PUSH
28758: LD_INT 1
28760: NEG
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: PUSH
28766: LD_INT 1
28768: NEG
28769: PUSH
28770: LD_INT 2
28772: NEG
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: PUSH
28778: LD_INT 0
28780: PUSH
28781: LD_INT 2
28783: NEG
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: PUSH
28789: LD_INT 1
28791: PUSH
28792: LD_INT 1
28794: NEG
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: PUSH
28800: LD_INT 2
28802: PUSH
28803: LD_INT 0
28805: PUSH
28806: EMPTY
28807: LIST
28808: LIST
28809: PUSH
28810: LD_INT 2
28812: PUSH
28813: LD_INT 1
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: PUSH
28820: LD_INT 2
28822: PUSH
28823: LD_INT 2
28825: PUSH
28826: EMPTY
28827: LIST
28828: LIST
28829: PUSH
28830: LD_INT 1
28832: PUSH
28833: LD_INT 2
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: PUSH
28840: LD_INT 0
28842: PUSH
28843: LD_INT 2
28845: PUSH
28846: EMPTY
28847: LIST
28848: LIST
28849: PUSH
28850: LD_INT 1
28852: NEG
28853: PUSH
28854: LD_INT 1
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: LD_INT 2
28863: NEG
28864: PUSH
28865: LD_INT 0
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 2
28874: NEG
28875: PUSH
28876: LD_INT 1
28878: NEG
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PUSH
28884: LD_INT 2
28886: NEG
28887: PUSH
28888: LD_INT 2
28890: NEG
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: LIST
28900: LIST
28901: LIST
28902: LIST
28903: LIST
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: LIST
28911: LIST
28912: LIST
28913: LIST
28914: LIST
28915: LIST
28916: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28917: LD_ADDR_VAR 0 59
28921: PUSH
28922: LD_INT 0
28924: PUSH
28925: LD_INT 0
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 0
28934: PUSH
28935: LD_INT 1
28937: NEG
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: LD_INT 1
28945: PUSH
28946: LD_INT 0
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: LD_INT 1
28955: PUSH
28956: LD_INT 1
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PUSH
28963: LD_INT 0
28965: PUSH
28966: LD_INT 1
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: LD_INT 1
28975: NEG
28976: PUSH
28977: LD_INT 0
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: PUSH
28984: LD_INT 1
28986: NEG
28987: PUSH
28988: LD_INT 1
28990: NEG
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: LIST
29000: LIST
29001: LIST
29002: LIST
29003: LIST
29004: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29005: LD_ADDR_VAR 0 60
29009: PUSH
29010: LD_INT 0
29012: PUSH
29013: LD_INT 0
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: LD_INT 0
29022: PUSH
29023: LD_INT 1
29025: NEG
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PUSH
29031: LD_INT 1
29033: PUSH
29034: LD_INT 0
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: PUSH
29041: LD_INT 1
29043: PUSH
29044: LD_INT 1
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: PUSH
29051: LD_INT 0
29053: PUSH
29054: LD_INT 1
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: LD_INT 1
29063: NEG
29064: PUSH
29065: LD_INT 0
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PUSH
29072: LD_INT 1
29074: NEG
29075: PUSH
29076: LD_INT 1
29078: NEG
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: LIST
29088: LIST
29089: LIST
29090: LIST
29091: LIST
29092: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29093: LD_ADDR_VAR 0 61
29097: PUSH
29098: LD_INT 0
29100: PUSH
29101: LD_INT 0
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PUSH
29108: LD_INT 0
29110: PUSH
29111: LD_INT 1
29113: NEG
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: LD_INT 1
29121: PUSH
29122: LD_INT 0
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 1
29131: PUSH
29132: LD_INT 1
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 0
29141: PUSH
29142: LD_INT 1
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PUSH
29149: LD_INT 1
29151: NEG
29152: PUSH
29153: LD_INT 0
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PUSH
29160: LD_INT 1
29162: NEG
29163: PUSH
29164: LD_INT 1
29166: NEG
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29181: LD_ADDR_VAR 0 62
29185: PUSH
29186: LD_INT 0
29188: PUSH
29189: LD_INT 0
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: PUSH
29196: LD_INT 0
29198: PUSH
29199: LD_INT 1
29201: NEG
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: PUSH
29207: LD_INT 1
29209: PUSH
29210: LD_INT 0
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: PUSH
29217: LD_INT 1
29219: PUSH
29220: LD_INT 1
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: PUSH
29227: LD_INT 0
29229: PUSH
29230: LD_INT 1
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PUSH
29237: LD_INT 1
29239: NEG
29240: PUSH
29241: LD_INT 0
29243: PUSH
29244: EMPTY
29245: LIST
29246: LIST
29247: PUSH
29248: LD_INT 1
29250: NEG
29251: PUSH
29252: LD_INT 1
29254: NEG
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: PUSH
29260: EMPTY
29261: LIST
29262: LIST
29263: LIST
29264: LIST
29265: LIST
29266: LIST
29267: LIST
29268: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29269: LD_ADDR_VAR 0 63
29273: PUSH
29274: LD_INT 0
29276: PUSH
29277: LD_INT 0
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: LD_INT 0
29286: PUSH
29287: LD_INT 1
29289: NEG
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: PUSH
29295: LD_INT 1
29297: PUSH
29298: LD_INT 0
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: LD_INT 1
29307: PUSH
29308: LD_INT 1
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: LD_INT 0
29317: PUSH
29318: LD_INT 1
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: PUSH
29325: LD_INT 1
29327: NEG
29328: PUSH
29329: LD_INT 0
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: PUSH
29336: LD_INT 1
29338: NEG
29339: PUSH
29340: LD_INT 1
29342: NEG
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: LIST
29352: LIST
29353: LIST
29354: LIST
29355: LIST
29356: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29357: LD_ADDR_VAR 0 64
29361: PUSH
29362: LD_INT 0
29364: PUSH
29365: LD_INT 0
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: LD_INT 0
29374: PUSH
29375: LD_INT 1
29377: NEG
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_INT 1
29385: PUSH
29386: LD_INT 0
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: LD_INT 1
29395: PUSH
29396: LD_INT 1
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: LD_INT 0
29405: PUSH
29406: LD_INT 1
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 1
29415: NEG
29416: PUSH
29417: LD_INT 0
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: PUSH
29424: LD_INT 1
29426: NEG
29427: PUSH
29428: LD_INT 1
29430: NEG
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: LIST
29443: LIST
29444: ST_TO_ADDR
// end ; 1 :
29445: GO 35342
29447: LD_INT 1
29449: DOUBLE
29450: EQUAL
29451: IFTRUE 29455
29453: GO 32078
29455: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29456: LD_ADDR_VAR 0 11
29460: PUSH
29461: LD_INT 1
29463: NEG
29464: PUSH
29465: LD_INT 3
29467: NEG
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: PUSH
29473: LD_INT 0
29475: PUSH
29476: LD_INT 3
29478: NEG
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: LD_INT 1
29486: PUSH
29487: LD_INT 2
29489: NEG
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: LIST
29499: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29500: LD_ADDR_VAR 0 12
29504: PUSH
29505: LD_INT 2
29507: PUSH
29508: LD_INT 1
29510: NEG
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: PUSH
29516: LD_INT 3
29518: PUSH
29519: LD_INT 0
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: PUSH
29526: LD_INT 3
29528: PUSH
29529: LD_INT 1
29531: PUSH
29532: EMPTY
29533: LIST
29534: LIST
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: LIST
29540: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29541: LD_ADDR_VAR 0 13
29545: PUSH
29546: LD_INT 3
29548: PUSH
29549: LD_INT 2
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: PUSH
29556: LD_INT 3
29558: PUSH
29559: LD_INT 3
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: PUSH
29566: LD_INT 2
29568: PUSH
29569: LD_INT 3
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: LIST
29580: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29581: LD_ADDR_VAR 0 14
29585: PUSH
29586: LD_INT 1
29588: PUSH
29589: LD_INT 3
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: PUSH
29596: LD_INT 0
29598: PUSH
29599: LD_INT 3
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PUSH
29606: LD_INT 1
29608: NEG
29609: PUSH
29610: LD_INT 2
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: LIST
29621: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29622: LD_ADDR_VAR 0 15
29626: PUSH
29627: LD_INT 2
29629: NEG
29630: PUSH
29631: LD_INT 1
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PUSH
29638: LD_INT 3
29640: NEG
29641: PUSH
29642: LD_INT 0
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: PUSH
29649: LD_INT 3
29651: NEG
29652: PUSH
29653: LD_INT 1
29655: NEG
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: LIST
29665: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29666: LD_ADDR_VAR 0 16
29670: PUSH
29671: LD_INT 2
29673: NEG
29674: PUSH
29675: LD_INT 3
29677: NEG
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: PUSH
29683: LD_INT 3
29685: NEG
29686: PUSH
29687: LD_INT 2
29689: NEG
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 3
29697: NEG
29698: PUSH
29699: LD_INT 3
29701: NEG
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: LIST
29711: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29712: LD_ADDR_VAR 0 17
29716: PUSH
29717: LD_INT 1
29719: NEG
29720: PUSH
29721: LD_INT 3
29723: NEG
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 0
29731: PUSH
29732: LD_INT 3
29734: NEG
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 1
29742: PUSH
29743: LD_INT 2
29745: NEG
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: LIST
29755: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29756: LD_ADDR_VAR 0 18
29760: PUSH
29761: LD_INT 2
29763: PUSH
29764: LD_INT 1
29766: NEG
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: PUSH
29772: LD_INT 3
29774: PUSH
29775: LD_INT 0
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PUSH
29782: LD_INT 3
29784: PUSH
29785: LD_INT 1
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: LIST
29796: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29797: LD_ADDR_VAR 0 19
29801: PUSH
29802: LD_INT 3
29804: PUSH
29805: LD_INT 2
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PUSH
29812: LD_INT 3
29814: PUSH
29815: LD_INT 3
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: PUSH
29822: LD_INT 2
29824: PUSH
29825: LD_INT 3
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: LIST
29836: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29837: LD_ADDR_VAR 0 20
29841: PUSH
29842: LD_INT 1
29844: PUSH
29845: LD_INT 3
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 0
29854: PUSH
29855: LD_INT 3
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: LD_INT 1
29864: NEG
29865: PUSH
29866: LD_INT 2
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: LIST
29877: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29878: LD_ADDR_VAR 0 21
29882: PUSH
29883: LD_INT 2
29885: NEG
29886: PUSH
29887: LD_INT 1
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: LD_INT 3
29896: NEG
29897: PUSH
29898: LD_INT 0
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: LD_INT 3
29907: NEG
29908: PUSH
29909: LD_INT 1
29911: NEG
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: LIST
29921: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29922: LD_ADDR_VAR 0 22
29926: PUSH
29927: LD_INT 2
29929: NEG
29930: PUSH
29931: LD_INT 3
29933: NEG
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: LD_INT 3
29941: NEG
29942: PUSH
29943: LD_INT 2
29945: NEG
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: LD_INT 3
29953: NEG
29954: PUSH
29955: LD_INT 3
29957: NEG
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: LIST
29967: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29968: LD_ADDR_VAR 0 23
29972: PUSH
29973: LD_INT 0
29975: PUSH
29976: LD_INT 3
29978: NEG
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: PUSH
29984: LD_INT 1
29986: NEG
29987: PUSH
29988: LD_INT 4
29990: NEG
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: PUSH
29996: LD_INT 1
29998: PUSH
29999: LD_INT 3
30001: NEG
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: LIST
30011: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30012: LD_ADDR_VAR 0 24
30016: PUSH
30017: LD_INT 3
30019: PUSH
30020: LD_INT 0
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: PUSH
30027: LD_INT 3
30029: PUSH
30030: LD_INT 1
30032: NEG
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: LD_INT 4
30040: PUSH
30041: LD_INT 1
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: LIST
30052: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30053: LD_ADDR_VAR 0 25
30057: PUSH
30058: LD_INT 3
30060: PUSH
30061: LD_INT 3
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: LD_INT 4
30070: PUSH
30071: LD_INT 3
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PUSH
30078: LD_INT 3
30080: PUSH
30081: LD_INT 4
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: LIST
30092: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30093: LD_ADDR_VAR 0 26
30097: PUSH
30098: LD_INT 0
30100: PUSH
30101: LD_INT 3
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: LD_INT 1
30110: PUSH
30111: LD_INT 4
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 1
30120: NEG
30121: PUSH
30122: LD_INT 3
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: LIST
30133: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30134: LD_ADDR_VAR 0 27
30138: PUSH
30139: LD_INT 3
30141: NEG
30142: PUSH
30143: LD_INT 0
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: LD_INT 3
30152: NEG
30153: PUSH
30154: LD_INT 1
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: PUSH
30161: LD_INT 4
30163: NEG
30164: PUSH
30165: LD_INT 1
30167: NEG
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: LIST
30177: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30178: LD_ADDR_VAR 0 28
30182: PUSH
30183: LD_INT 3
30185: NEG
30186: PUSH
30187: LD_INT 3
30189: NEG
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: PUSH
30195: LD_INT 3
30197: NEG
30198: PUSH
30199: LD_INT 4
30201: NEG
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: PUSH
30207: LD_INT 4
30209: NEG
30210: PUSH
30211: LD_INT 3
30213: NEG
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: LIST
30223: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30224: LD_ADDR_VAR 0 29
30228: PUSH
30229: LD_INT 1
30231: NEG
30232: PUSH
30233: LD_INT 3
30235: NEG
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: LD_INT 0
30243: PUSH
30244: LD_INT 3
30246: NEG
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 1
30254: PUSH
30255: LD_INT 2
30257: NEG
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: PUSH
30263: LD_INT 1
30265: NEG
30266: PUSH
30267: LD_INT 4
30269: NEG
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PUSH
30275: LD_INT 0
30277: PUSH
30278: LD_INT 4
30280: NEG
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: PUSH
30286: LD_INT 1
30288: PUSH
30289: LD_INT 3
30291: NEG
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: LD_INT 1
30299: NEG
30300: PUSH
30301: LD_INT 5
30303: NEG
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 0
30311: PUSH
30312: LD_INT 5
30314: NEG
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 1
30322: PUSH
30323: LD_INT 4
30325: NEG
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: LD_INT 1
30333: NEG
30334: PUSH
30335: LD_INT 6
30337: NEG
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: PUSH
30343: LD_INT 0
30345: PUSH
30346: LD_INT 6
30348: NEG
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: PUSH
30354: LD_INT 1
30356: PUSH
30357: LD_INT 5
30359: NEG
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30379: LD_ADDR_VAR 0 30
30383: PUSH
30384: LD_INT 2
30386: PUSH
30387: LD_INT 1
30389: NEG
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PUSH
30395: LD_INT 3
30397: PUSH
30398: LD_INT 0
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: LD_INT 3
30407: PUSH
30408: LD_INT 1
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: LD_INT 3
30417: PUSH
30418: LD_INT 1
30420: NEG
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: PUSH
30426: LD_INT 4
30428: PUSH
30429: LD_INT 0
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: LD_INT 4
30438: PUSH
30439: LD_INT 1
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: LD_INT 4
30448: PUSH
30449: LD_INT 1
30451: NEG
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 5
30459: PUSH
30460: LD_INT 0
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: PUSH
30467: LD_INT 5
30469: PUSH
30470: LD_INT 1
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 5
30479: PUSH
30480: LD_INT 1
30482: NEG
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 6
30490: PUSH
30491: LD_INT 0
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PUSH
30498: LD_INT 6
30500: PUSH
30501: LD_INT 1
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30522: LD_ADDR_VAR 0 31
30526: PUSH
30527: LD_INT 3
30529: PUSH
30530: LD_INT 2
30532: PUSH
30533: EMPTY
30534: LIST
30535: LIST
30536: PUSH
30537: LD_INT 3
30539: PUSH
30540: LD_INT 3
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: LD_INT 2
30549: PUSH
30550: LD_INT 3
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: LD_INT 4
30559: PUSH
30560: LD_INT 3
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: LD_INT 4
30569: PUSH
30570: LD_INT 4
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PUSH
30577: LD_INT 3
30579: PUSH
30580: LD_INT 4
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: LD_INT 5
30589: PUSH
30590: LD_INT 4
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 5
30599: PUSH
30600: LD_INT 5
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: PUSH
30607: LD_INT 4
30609: PUSH
30610: LD_INT 5
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: LD_INT 6
30619: PUSH
30620: LD_INT 5
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: PUSH
30627: LD_INT 6
30629: PUSH
30630: LD_INT 6
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 5
30639: PUSH
30640: LD_INT 6
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30661: LD_ADDR_VAR 0 32
30665: PUSH
30666: LD_INT 1
30668: PUSH
30669: LD_INT 3
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: LD_INT 0
30678: PUSH
30679: LD_INT 3
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: LD_INT 1
30688: NEG
30689: PUSH
30690: LD_INT 2
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: LD_INT 1
30699: PUSH
30700: LD_INT 4
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PUSH
30707: LD_INT 0
30709: PUSH
30710: LD_INT 4
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: LD_INT 1
30719: NEG
30720: PUSH
30721: LD_INT 3
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: LD_INT 1
30730: PUSH
30731: LD_INT 5
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: PUSH
30738: LD_INT 0
30740: PUSH
30741: LD_INT 5
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: LD_INT 1
30750: NEG
30751: PUSH
30752: LD_INT 4
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: LD_INT 1
30761: PUSH
30762: LD_INT 6
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: LD_INT 0
30771: PUSH
30772: LD_INT 6
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: PUSH
30779: LD_INT 1
30781: NEG
30782: PUSH
30783: LD_INT 5
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30804: LD_ADDR_VAR 0 33
30808: PUSH
30809: LD_INT 2
30811: NEG
30812: PUSH
30813: LD_INT 1
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 3
30822: NEG
30823: PUSH
30824: LD_INT 0
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PUSH
30831: LD_INT 3
30833: NEG
30834: PUSH
30835: LD_INT 1
30837: NEG
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PUSH
30843: LD_INT 3
30845: NEG
30846: PUSH
30847: LD_INT 1
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: LD_INT 4
30856: NEG
30857: PUSH
30858: LD_INT 0
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 4
30867: NEG
30868: PUSH
30869: LD_INT 1
30871: NEG
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 4
30879: NEG
30880: PUSH
30881: LD_INT 1
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 5
30890: NEG
30891: PUSH
30892: LD_INT 0
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: LD_INT 5
30901: NEG
30902: PUSH
30903: LD_INT 1
30905: NEG
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: PUSH
30911: LD_INT 5
30913: NEG
30914: PUSH
30915: LD_INT 1
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: LD_INT 6
30924: NEG
30925: PUSH
30926: LD_INT 0
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: LD_INT 6
30935: NEG
30936: PUSH
30937: LD_INT 1
30939: NEG
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: LIST
30958: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30959: LD_ADDR_VAR 0 34
30963: PUSH
30964: LD_INT 2
30966: NEG
30967: PUSH
30968: LD_INT 3
30970: NEG
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: PUSH
30976: LD_INT 3
30978: NEG
30979: PUSH
30980: LD_INT 2
30982: NEG
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: PUSH
30988: LD_INT 3
30990: NEG
30991: PUSH
30992: LD_INT 3
30994: NEG
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: LD_INT 3
31002: NEG
31003: PUSH
31004: LD_INT 4
31006: NEG
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: PUSH
31012: LD_INT 4
31014: NEG
31015: PUSH
31016: LD_INT 3
31018: NEG
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: PUSH
31024: LD_INT 4
31026: NEG
31027: PUSH
31028: LD_INT 4
31030: NEG
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: LD_INT 4
31038: NEG
31039: PUSH
31040: LD_INT 5
31042: NEG
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: PUSH
31048: LD_INT 5
31050: NEG
31051: PUSH
31052: LD_INT 4
31054: NEG
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 5
31062: NEG
31063: PUSH
31064: LD_INT 5
31066: NEG
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: LD_INT 5
31074: NEG
31075: PUSH
31076: LD_INT 6
31078: NEG
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PUSH
31084: LD_INT 6
31086: NEG
31087: PUSH
31088: LD_INT 5
31090: NEG
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 6
31098: NEG
31099: PUSH
31100: LD_INT 6
31102: NEG
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: LIST
31112: LIST
31113: LIST
31114: LIST
31115: LIST
31116: LIST
31117: LIST
31118: LIST
31119: LIST
31120: LIST
31121: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31122: LD_ADDR_VAR 0 41
31126: PUSH
31127: LD_INT 0
31129: PUSH
31130: LD_INT 2
31132: NEG
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: LD_INT 1
31140: NEG
31141: PUSH
31142: LD_INT 3
31144: NEG
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: PUSH
31150: LD_INT 1
31152: PUSH
31153: LD_INT 2
31155: NEG
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: LIST
31165: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31166: LD_ADDR_VAR 0 42
31170: PUSH
31171: LD_INT 2
31173: PUSH
31174: LD_INT 0
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: PUSH
31181: LD_INT 2
31183: PUSH
31184: LD_INT 1
31186: NEG
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: PUSH
31192: LD_INT 3
31194: PUSH
31195: LD_INT 1
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: LIST
31206: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31207: LD_ADDR_VAR 0 43
31211: PUSH
31212: LD_INT 2
31214: PUSH
31215: LD_INT 2
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: PUSH
31222: LD_INT 3
31224: PUSH
31225: LD_INT 2
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: LD_INT 2
31234: PUSH
31235: LD_INT 3
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: LIST
31246: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31247: LD_ADDR_VAR 0 44
31251: PUSH
31252: LD_INT 0
31254: PUSH
31255: LD_INT 2
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 1
31264: PUSH
31265: LD_INT 3
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_INT 1
31274: NEG
31275: PUSH
31276: LD_INT 2
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: LIST
31287: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31288: LD_ADDR_VAR 0 45
31292: PUSH
31293: LD_INT 2
31295: NEG
31296: PUSH
31297: LD_INT 0
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: LD_INT 2
31306: NEG
31307: PUSH
31308: LD_INT 1
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PUSH
31315: LD_INT 3
31317: NEG
31318: PUSH
31319: LD_INT 1
31321: NEG
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: LIST
31331: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31332: LD_ADDR_VAR 0 46
31336: PUSH
31337: LD_INT 2
31339: NEG
31340: PUSH
31341: LD_INT 2
31343: NEG
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: LD_INT 2
31351: NEG
31352: PUSH
31353: LD_INT 3
31355: NEG
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: LD_INT 3
31363: NEG
31364: PUSH
31365: LD_INT 2
31367: NEG
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: LIST
31377: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31378: LD_ADDR_VAR 0 47
31382: PUSH
31383: LD_INT 2
31385: NEG
31386: PUSH
31387: LD_INT 3
31389: NEG
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 1
31397: NEG
31398: PUSH
31399: LD_INT 3
31401: NEG
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31411: LD_ADDR_VAR 0 48
31415: PUSH
31416: LD_INT 1
31418: PUSH
31419: LD_INT 2
31421: NEG
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: LD_INT 2
31429: PUSH
31430: LD_INT 1
31432: NEG
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31442: LD_ADDR_VAR 0 49
31446: PUSH
31447: LD_INT 3
31449: PUSH
31450: LD_INT 1
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: LD_INT 3
31459: PUSH
31460: LD_INT 2
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31471: LD_ADDR_VAR 0 50
31475: PUSH
31476: LD_INT 2
31478: PUSH
31479: LD_INT 3
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 1
31488: PUSH
31489: LD_INT 3
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31500: LD_ADDR_VAR 0 51
31504: PUSH
31505: LD_INT 1
31507: NEG
31508: PUSH
31509: LD_INT 2
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 2
31518: NEG
31519: PUSH
31520: LD_INT 1
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31531: LD_ADDR_VAR 0 52
31535: PUSH
31536: LD_INT 3
31538: NEG
31539: PUSH
31540: LD_INT 1
31542: NEG
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: LD_INT 3
31550: NEG
31551: PUSH
31552: LD_INT 2
31554: NEG
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31564: LD_ADDR_VAR 0 53
31568: PUSH
31569: LD_INT 1
31571: NEG
31572: PUSH
31573: LD_INT 3
31575: NEG
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: PUSH
31581: LD_INT 0
31583: PUSH
31584: LD_INT 3
31586: NEG
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: PUSH
31592: LD_INT 1
31594: PUSH
31595: LD_INT 2
31597: NEG
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: LIST
31607: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31608: LD_ADDR_VAR 0 54
31612: PUSH
31613: LD_INT 2
31615: PUSH
31616: LD_INT 1
31618: NEG
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 3
31626: PUSH
31627: LD_INT 0
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 3
31636: PUSH
31637: LD_INT 1
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: LIST
31648: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31649: LD_ADDR_VAR 0 55
31653: PUSH
31654: LD_INT 3
31656: PUSH
31657: LD_INT 2
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 3
31666: PUSH
31667: LD_INT 3
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: LD_INT 2
31676: PUSH
31677: LD_INT 3
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: LIST
31688: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31689: LD_ADDR_VAR 0 56
31693: PUSH
31694: LD_INT 1
31696: PUSH
31697: LD_INT 3
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: PUSH
31704: LD_INT 0
31706: PUSH
31707: LD_INT 3
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: PUSH
31714: LD_INT 1
31716: NEG
31717: PUSH
31718: LD_INT 2
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: LIST
31729: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31730: LD_ADDR_VAR 0 57
31734: PUSH
31735: LD_INT 2
31737: NEG
31738: PUSH
31739: LD_INT 1
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 3
31748: NEG
31749: PUSH
31750: LD_INT 0
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PUSH
31757: LD_INT 3
31759: NEG
31760: PUSH
31761: LD_INT 1
31763: NEG
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: EMPTY
31770: LIST
31771: LIST
31772: LIST
31773: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31774: LD_ADDR_VAR 0 58
31778: PUSH
31779: LD_INT 2
31781: NEG
31782: PUSH
31783: LD_INT 3
31785: NEG
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: LD_INT 3
31793: NEG
31794: PUSH
31795: LD_INT 2
31797: NEG
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: LD_INT 3
31805: NEG
31806: PUSH
31807: LD_INT 3
31809: NEG
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: LIST
31819: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31820: LD_ADDR_VAR 0 59
31824: PUSH
31825: LD_INT 1
31827: NEG
31828: PUSH
31829: LD_INT 2
31831: NEG
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 0
31839: PUSH
31840: LD_INT 2
31842: NEG
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 1
31850: PUSH
31851: LD_INT 1
31853: NEG
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: LIST
31863: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31864: LD_ADDR_VAR 0 60
31868: PUSH
31869: LD_INT 1
31871: PUSH
31872: LD_INT 1
31874: NEG
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PUSH
31880: LD_INT 2
31882: PUSH
31883: LD_INT 0
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: LD_INT 2
31892: PUSH
31893: LD_INT 1
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: LIST
31904: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31905: LD_ADDR_VAR 0 61
31909: PUSH
31910: LD_INT 2
31912: PUSH
31913: LD_INT 1
31915: PUSH
31916: EMPTY
31917: LIST
31918: LIST
31919: PUSH
31920: LD_INT 2
31922: PUSH
31923: LD_INT 2
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: PUSH
31930: LD_INT 1
31932: PUSH
31933: LD_INT 2
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: LIST
31944: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31945: LD_ADDR_VAR 0 62
31949: PUSH
31950: LD_INT 1
31952: PUSH
31953: LD_INT 2
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 0
31962: PUSH
31963: LD_INT 2
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 1
31972: NEG
31973: PUSH
31974: LD_INT 1
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: LIST
31985: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31986: LD_ADDR_VAR 0 63
31990: PUSH
31991: LD_INT 1
31993: NEG
31994: PUSH
31995: LD_INT 1
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 2
32004: NEG
32005: PUSH
32006: LD_INT 0
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: LD_INT 2
32015: NEG
32016: PUSH
32017: LD_INT 1
32019: NEG
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: LIST
32029: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32030: LD_ADDR_VAR 0 64
32034: PUSH
32035: LD_INT 1
32037: NEG
32038: PUSH
32039: LD_INT 2
32041: NEG
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: LD_INT 2
32049: NEG
32050: PUSH
32051: LD_INT 1
32053: NEG
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: PUSH
32059: LD_INT 2
32061: NEG
32062: PUSH
32063: LD_INT 2
32065: NEG
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: LIST
32075: ST_TO_ADDR
// end ; 2 :
32076: GO 35342
32078: LD_INT 2
32080: DOUBLE
32081: EQUAL
32082: IFTRUE 32086
32084: GO 35341
32086: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32087: LD_ADDR_VAR 0 29
32091: PUSH
32092: LD_INT 4
32094: PUSH
32095: LD_INT 0
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: PUSH
32102: LD_INT 4
32104: PUSH
32105: LD_INT 1
32107: NEG
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: LD_INT 5
32115: PUSH
32116: LD_INT 0
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: PUSH
32123: LD_INT 5
32125: PUSH
32126: LD_INT 1
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: PUSH
32133: LD_INT 4
32135: PUSH
32136: LD_INT 1
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: LD_INT 3
32145: PUSH
32146: LD_INT 0
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PUSH
32153: LD_INT 3
32155: PUSH
32156: LD_INT 1
32158: NEG
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: PUSH
32164: LD_INT 3
32166: PUSH
32167: LD_INT 2
32169: NEG
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: LD_INT 5
32177: PUSH
32178: LD_INT 2
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: PUSH
32185: LD_INT 3
32187: PUSH
32188: LD_INT 3
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: LD_INT 3
32197: PUSH
32198: LD_INT 2
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: PUSH
32205: LD_INT 4
32207: PUSH
32208: LD_INT 3
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PUSH
32215: LD_INT 4
32217: PUSH
32218: LD_INT 4
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PUSH
32225: LD_INT 3
32227: PUSH
32228: LD_INT 4
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 2
32237: PUSH
32238: LD_INT 3
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 2
32247: PUSH
32248: LD_INT 2
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 4
32257: PUSH
32258: LD_INT 2
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: PUSH
32265: LD_INT 2
32267: PUSH
32268: LD_INT 4
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 0
32277: PUSH
32278: LD_INT 4
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 0
32287: PUSH
32288: LD_INT 3
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 1
32297: PUSH
32298: LD_INT 4
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PUSH
32305: LD_INT 1
32307: PUSH
32308: LD_INT 5
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: LD_INT 0
32317: PUSH
32318: LD_INT 5
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: LD_INT 1
32327: NEG
32328: PUSH
32329: LD_INT 4
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 1
32338: NEG
32339: PUSH
32340: LD_INT 3
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 2
32349: PUSH
32350: LD_INT 5
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 2
32359: NEG
32360: PUSH
32361: LD_INT 3
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 3
32370: NEG
32371: PUSH
32372: LD_INT 0
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PUSH
32379: LD_INT 3
32381: NEG
32382: PUSH
32383: LD_INT 1
32385: NEG
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PUSH
32391: LD_INT 2
32393: NEG
32394: PUSH
32395: LD_INT 0
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: PUSH
32402: LD_INT 2
32404: NEG
32405: PUSH
32406: LD_INT 1
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: LD_INT 3
32415: NEG
32416: PUSH
32417: LD_INT 1
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: PUSH
32424: LD_INT 4
32426: NEG
32427: PUSH
32428: LD_INT 0
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: PUSH
32435: LD_INT 4
32437: NEG
32438: PUSH
32439: LD_INT 1
32441: NEG
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 4
32449: NEG
32450: PUSH
32451: LD_INT 2
32453: NEG
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: PUSH
32459: LD_INT 2
32461: NEG
32462: PUSH
32463: LD_INT 2
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: PUSH
32470: LD_INT 4
32472: NEG
32473: PUSH
32474: LD_INT 4
32476: NEG
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 4
32484: NEG
32485: PUSH
32486: LD_INT 5
32488: NEG
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: PUSH
32494: LD_INT 3
32496: NEG
32497: PUSH
32498: LD_INT 4
32500: NEG
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: PUSH
32506: LD_INT 3
32508: NEG
32509: PUSH
32510: LD_INT 3
32512: NEG
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: LD_INT 4
32520: NEG
32521: PUSH
32522: LD_INT 3
32524: NEG
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: PUSH
32530: LD_INT 5
32532: NEG
32533: PUSH
32534: LD_INT 4
32536: NEG
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: PUSH
32542: LD_INT 5
32544: NEG
32545: PUSH
32546: LD_INT 5
32548: NEG
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 3
32556: NEG
32557: PUSH
32558: LD_INT 5
32560: NEG
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 5
32568: NEG
32569: PUSH
32570: LD_INT 3
32572: NEG
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32625: LD_ADDR_VAR 0 30
32629: PUSH
32630: LD_INT 4
32632: PUSH
32633: LD_INT 4
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: PUSH
32640: LD_INT 4
32642: PUSH
32643: LD_INT 3
32645: PUSH
32646: EMPTY
32647: LIST
32648: LIST
32649: PUSH
32650: LD_INT 5
32652: PUSH
32653: LD_INT 4
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: PUSH
32660: LD_INT 5
32662: PUSH
32663: LD_INT 5
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: LD_INT 4
32672: PUSH
32673: LD_INT 5
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 3
32682: PUSH
32683: LD_INT 4
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 3
32692: PUSH
32693: LD_INT 3
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 5
32702: PUSH
32703: LD_INT 3
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: PUSH
32710: LD_INT 3
32712: PUSH
32713: LD_INT 5
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 0
32722: PUSH
32723: LD_INT 3
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 0
32732: PUSH
32733: LD_INT 2
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 1
32742: PUSH
32743: LD_INT 3
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: PUSH
32750: LD_INT 1
32752: PUSH
32753: LD_INT 4
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 0
32762: PUSH
32763: LD_INT 4
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 1
32772: NEG
32773: PUSH
32774: LD_INT 3
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 1
32783: NEG
32784: PUSH
32785: LD_INT 2
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: PUSH
32792: LD_INT 2
32794: PUSH
32795: LD_INT 4
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 2
32804: NEG
32805: PUSH
32806: LD_INT 2
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 4
32815: NEG
32816: PUSH
32817: LD_INT 0
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PUSH
32824: LD_INT 4
32826: NEG
32827: PUSH
32828: LD_INT 1
32830: NEG
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: PUSH
32836: LD_INT 3
32838: NEG
32839: PUSH
32840: LD_INT 0
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 3
32849: NEG
32850: PUSH
32851: LD_INT 1
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 4
32860: NEG
32861: PUSH
32862: LD_INT 1
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PUSH
32869: LD_INT 5
32871: NEG
32872: PUSH
32873: LD_INT 0
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: PUSH
32880: LD_INT 5
32882: NEG
32883: PUSH
32884: LD_INT 1
32886: NEG
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: LD_INT 5
32894: NEG
32895: PUSH
32896: LD_INT 2
32898: NEG
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: PUSH
32904: LD_INT 3
32906: NEG
32907: PUSH
32908: LD_INT 2
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 3
32917: NEG
32918: PUSH
32919: LD_INT 3
32921: NEG
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 3
32929: NEG
32930: PUSH
32931: LD_INT 4
32933: NEG
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: PUSH
32939: LD_INT 2
32941: NEG
32942: PUSH
32943: LD_INT 3
32945: NEG
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: PUSH
32951: LD_INT 2
32953: NEG
32954: PUSH
32955: LD_INT 2
32957: NEG
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: PUSH
32963: LD_INT 3
32965: NEG
32966: PUSH
32967: LD_INT 2
32969: NEG
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: PUSH
32975: LD_INT 4
32977: NEG
32978: PUSH
32979: LD_INT 3
32981: NEG
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: PUSH
32987: LD_INT 4
32989: NEG
32990: PUSH
32991: LD_INT 4
32993: NEG
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 2
33001: NEG
33002: PUSH
33003: LD_INT 4
33005: NEG
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 4
33013: NEG
33014: PUSH
33015: LD_INT 2
33017: NEG
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 0
33025: PUSH
33026: LD_INT 4
33028: NEG
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 0
33036: PUSH
33037: LD_INT 5
33039: NEG
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 1
33047: PUSH
33048: LD_INT 4
33050: NEG
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 1
33058: PUSH
33059: LD_INT 3
33061: NEG
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: LD_INT 0
33069: PUSH
33070: LD_INT 3
33072: NEG
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 1
33080: NEG
33081: PUSH
33082: LD_INT 4
33084: NEG
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PUSH
33090: LD_INT 1
33092: NEG
33093: PUSH
33094: LD_INT 5
33096: NEG
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: PUSH
33102: LD_INT 2
33104: PUSH
33105: LD_INT 3
33107: NEG
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 2
33115: NEG
33116: PUSH
33117: LD_INT 5
33119: NEG
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33172: LD_ADDR_VAR 0 31
33176: PUSH
33177: LD_INT 0
33179: PUSH
33180: LD_INT 4
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PUSH
33187: LD_INT 0
33189: PUSH
33190: LD_INT 3
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 1
33199: PUSH
33200: LD_INT 4
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: PUSH
33207: LD_INT 1
33209: PUSH
33210: LD_INT 5
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 0
33219: PUSH
33220: LD_INT 5
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 1
33229: NEG
33230: PUSH
33231: LD_INT 4
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 1
33240: NEG
33241: PUSH
33242: LD_INT 3
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 2
33251: PUSH
33252: LD_INT 5
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 2
33261: NEG
33262: PUSH
33263: LD_INT 3
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: LD_INT 3
33272: NEG
33273: PUSH
33274: LD_INT 0
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: PUSH
33281: LD_INT 3
33283: NEG
33284: PUSH
33285: LD_INT 1
33287: NEG
33288: PUSH
33289: EMPTY
33290: LIST
33291: LIST
33292: PUSH
33293: LD_INT 2
33295: NEG
33296: PUSH
33297: LD_INT 0
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: PUSH
33304: LD_INT 2
33306: NEG
33307: PUSH
33308: LD_INT 1
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 3
33317: NEG
33318: PUSH
33319: LD_INT 1
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: PUSH
33326: LD_INT 4
33328: NEG
33329: PUSH
33330: LD_INT 0
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: LD_INT 4
33339: NEG
33340: PUSH
33341: LD_INT 1
33343: NEG
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PUSH
33349: LD_INT 4
33351: NEG
33352: PUSH
33353: LD_INT 2
33355: NEG
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 2
33363: NEG
33364: PUSH
33365: LD_INT 2
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 4
33374: NEG
33375: PUSH
33376: LD_INT 4
33378: NEG
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 4
33386: NEG
33387: PUSH
33388: LD_INT 5
33390: NEG
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PUSH
33396: LD_INT 3
33398: NEG
33399: PUSH
33400: LD_INT 4
33402: NEG
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 3
33410: NEG
33411: PUSH
33412: LD_INT 3
33414: NEG
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: PUSH
33420: LD_INT 4
33422: NEG
33423: PUSH
33424: LD_INT 3
33426: NEG
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: LD_INT 5
33434: NEG
33435: PUSH
33436: LD_INT 4
33438: NEG
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: PUSH
33444: LD_INT 5
33446: NEG
33447: PUSH
33448: LD_INT 5
33450: NEG
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: PUSH
33456: LD_INT 3
33458: NEG
33459: PUSH
33460: LD_INT 5
33462: NEG
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 5
33470: NEG
33471: PUSH
33472: LD_INT 3
33474: NEG
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 0
33482: PUSH
33483: LD_INT 3
33485: NEG
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 0
33493: PUSH
33494: LD_INT 4
33496: NEG
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 1
33504: PUSH
33505: LD_INT 3
33507: NEG
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 1
33515: PUSH
33516: LD_INT 2
33518: NEG
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: PUSH
33524: LD_INT 0
33526: PUSH
33527: LD_INT 2
33529: NEG
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: PUSH
33535: LD_INT 1
33537: NEG
33538: PUSH
33539: LD_INT 3
33541: NEG
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: LD_INT 1
33549: NEG
33550: PUSH
33551: LD_INT 4
33553: NEG
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: PUSH
33559: LD_INT 2
33561: PUSH
33562: LD_INT 2
33564: NEG
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 2
33572: NEG
33573: PUSH
33574: LD_INT 4
33576: NEG
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 4
33584: PUSH
33585: LD_INT 0
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 4
33594: PUSH
33595: LD_INT 1
33597: NEG
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 5
33605: PUSH
33606: LD_INT 0
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: PUSH
33613: LD_INT 5
33615: PUSH
33616: LD_INT 1
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 4
33625: PUSH
33626: LD_INT 1
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 3
33635: PUSH
33636: LD_INT 0
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: LD_INT 3
33645: PUSH
33646: LD_INT 1
33648: NEG
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 3
33656: PUSH
33657: LD_INT 2
33659: NEG
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 5
33667: PUSH
33668: LD_INT 2
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33722: LD_ADDR_VAR 0 32
33726: PUSH
33727: LD_INT 4
33729: NEG
33730: PUSH
33731: LD_INT 0
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: PUSH
33738: LD_INT 4
33740: NEG
33741: PUSH
33742: LD_INT 1
33744: NEG
33745: PUSH
33746: EMPTY
33747: LIST
33748: LIST
33749: PUSH
33750: LD_INT 3
33752: NEG
33753: PUSH
33754: LD_INT 0
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: PUSH
33761: LD_INT 3
33763: NEG
33764: PUSH
33765: LD_INT 1
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: PUSH
33772: LD_INT 4
33774: NEG
33775: PUSH
33776: LD_INT 1
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: LD_INT 5
33785: NEG
33786: PUSH
33787: LD_INT 0
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: PUSH
33794: LD_INT 5
33796: NEG
33797: PUSH
33798: LD_INT 1
33800: NEG
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: PUSH
33806: LD_INT 5
33808: NEG
33809: PUSH
33810: LD_INT 2
33812: NEG
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: PUSH
33818: LD_INT 3
33820: NEG
33821: PUSH
33822: LD_INT 2
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 3
33831: NEG
33832: PUSH
33833: LD_INT 3
33835: NEG
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: LD_INT 3
33843: NEG
33844: PUSH
33845: LD_INT 4
33847: NEG
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 2
33855: NEG
33856: PUSH
33857: LD_INT 3
33859: NEG
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PUSH
33865: LD_INT 2
33867: NEG
33868: PUSH
33869: LD_INT 2
33871: NEG
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PUSH
33877: LD_INT 3
33879: NEG
33880: PUSH
33881: LD_INT 2
33883: NEG
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PUSH
33889: LD_INT 4
33891: NEG
33892: PUSH
33893: LD_INT 3
33895: NEG
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: PUSH
33901: LD_INT 4
33903: NEG
33904: PUSH
33905: LD_INT 4
33907: NEG
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 2
33915: NEG
33916: PUSH
33917: LD_INT 4
33919: NEG
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: PUSH
33925: LD_INT 4
33927: NEG
33928: PUSH
33929: LD_INT 2
33931: NEG
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_INT 0
33939: PUSH
33940: LD_INT 4
33942: NEG
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: PUSH
33948: LD_INT 0
33950: PUSH
33951: LD_INT 5
33953: NEG
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 1
33961: PUSH
33962: LD_INT 4
33964: NEG
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 1
33972: PUSH
33973: LD_INT 3
33975: NEG
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: PUSH
33981: LD_INT 0
33983: PUSH
33984: LD_INT 3
33986: NEG
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: PUSH
33992: LD_INT 1
33994: NEG
33995: PUSH
33996: LD_INT 4
33998: NEG
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: LD_INT 1
34006: NEG
34007: PUSH
34008: LD_INT 5
34010: NEG
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: PUSH
34016: LD_INT 2
34018: PUSH
34019: LD_INT 3
34021: NEG
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: PUSH
34027: LD_INT 2
34029: NEG
34030: PUSH
34031: LD_INT 5
34033: NEG
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 3
34041: PUSH
34042: LD_INT 0
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: LD_INT 3
34051: PUSH
34052: LD_INT 1
34054: NEG
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 4
34062: PUSH
34063: LD_INT 0
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: LD_INT 4
34072: PUSH
34073: LD_INT 1
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: PUSH
34080: LD_INT 3
34082: PUSH
34083: LD_INT 1
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PUSH
34090: LD_INT 2
34092: PUSH
34093: LD_INT 0
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 2
34102: PUSH
34103: LD_INT 1
34105: NEG
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 2
34113: PUSH
34114: LD_INT 2
34116: NEG
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 4
34124: PUSH
34125: LD_INT 2
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: PUSH
34132: LD_INT 4
34134: PUSH
34135: LD_INT 4
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: PUSH
34142: LD_INT 4
34144: PUSH
34145: LD_INT 3
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: PUSH
34152: LD_INT 5
34154: PUSH
34155: LD_INT 4
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: PUSH
34162: LD_INT 5
34164: PUSH
34165: LD_INT 5
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 4
34174: PUSH
34175: LD_INT 5
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 3
34184: PUSH
34185: LD_INT 4
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 3
34194: PUSH
34195: LD_INT 3
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 5
34204: PUSH
34205: LD_INT 3
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 3
34214: PUSH
34215: LD_INT 5
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34269: LD_ADDR_VAR 0 33
34273: PUSH
34274: LD_INT 4
34276: NEG
34277: PUSH
34278: LD_INT 4
34280: NEG
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: PUSH
34286: LD_INT 4
34288: NEG
34289: PUSH
34290: LD_INT 5
34292: NEG
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PUSH
34298: LD_INT 3
34300: NEG
34301: PUSH
34302: LD_INT 4
34304: NEG
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: PUSH
34310: LD_INT 3
34312: NEG
34313: PUSH
34314: LD_INT 3
34316: NEG
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 4
34324: NEG
34325: PUSH
34326: LD_INT 3
34328: NEG
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 5
34336: NEG
34337: PUSH
34338: LD_INT 4
34340: NEG
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: PUSH
34346: LD_INT 5
34348: NEG
34349: PUSH
34350: LD_INT 5
34352: NEG
34353: PUSH
34354: EMPTY
34355: LIST
34356: LIST
34357: PUSH
34358: LD_INT 3
34360: NEG
34361: PUSH
34362: LD_INT 5
34364: NEG
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: LD_INT 5
34372: NEG
34373: PUSH
34374: LD_INT 3
34376: NEG
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PUSH
34382: LD_INT 0
34384: PUSH
34385: LD_INT 3
34387: NEG
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: LD_INT 0
34395: PUSH
34396: LD_INT 4
34398: NEG
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: LD_INT 1
34406: PUSH
34407: LD_INT 3
34409: NEG
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: LD_INT 1
34417: PUSH
34418: LD_INT 2
34420: NEG
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PUSH
34426: LD_INT 0
34428: PUSH
34429: LD_INT 2
34431: NEG
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: LD_INT 1
34439: NEG
34440: PUSH
34441: LD_INT 3
34443: NEG
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 1
34451: NEG
34452: PUSH
34453: LD_INT 4
34455: NEG
34456: PUSH
34457: EMPTY
34458: LIST
34459: LIST
34460: PUSH
34461: LD_INT 2
34463: PUSH
34464: LD_INT 2
34466: NEG
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: PUSH
34472: LD_INT 2
34474: NEG
34475: PUSH
34476: LD_INT 4
34478: NEG
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: LD_INT 4
34486: PUSH
34487: LD_INT 0
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: LD_INT 4
34496: PUSH
34497: LD_INT 1
34499: NEG
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: LD_INT 5
34507: PUSH
34508: LD_INT 0
34510: PUSH
34511: EMPTY
34512: LIST
34513: LIST
34514: PUSH
34515: LD_INT 5
34517: PUSH
34518: LD_INT 1
34520: PUSH
34521: EMPTY
34522: LIST
34523: LIST
34524: PUSH
34525: LD_INT 4
34527: PUSH
34528: LD_INT 1
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: PUSH
34535: LD_INT 3
34537: PUSH
34538: LD_INT 0
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: PUSH
34545: LD_INT 3
34547: PUSH
34548: LD_INT 1
34550: NEG
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 3
34558: PUSH
34559: LD_INT 2
34561: NEG
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: PUSH
34567: LD_INT 5
34569: PUSH
34570: LD_INT 2
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: PUSH
34577: LD_INT 3
34579: PUSH
34580: LD_INT 3
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 3
34589: PUSH
34590: LD_INT 2
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 4
34599: PUSH
34600: LD_INT 3
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 4
34609: PUSH
34610: LD_INT 4
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 3
34619: PUSH
34620: LD_INT 4
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PUSH
34627: LD_INT 2
34629: PUSH
34630: LD_INT 3
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: PUSH
34637: LD_INT 2
34639: PUSH
34640: LD_INT 2
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: PUSH
34647: LD_INT 4
34649: PUSH
34650: LD_INT 2
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PUSH
34657: LD_INT 2
34659: PUSH
34660: LD_INT 4
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: LD_INT 0
34669: PUSH
34670: LD_INT 4
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 0
34679: PUSH
34680: LD_INT 3
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 1
34689: PUSH
34690: LD_INT 4
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: PUSH
34697: LD_INT 1
34699: PUSH
34700: LD_INT 5
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: PUSH
34707: LD_INT 0
34709: PUSH
34710: LD_INT 5
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: PUSH
34717: LD_INT 1
34719: NEG
34720: PUSH
34721: LD_INT 4
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: PUSH
34728: LD_INT 1
34730: NEG
34731: PUSH
34732: LD_INT 3
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PUSH
34739: LD_INT 2
34741: PUSH
34742: LD_INT 5
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: PUSH
34749: LD_INT 2
34751: NEG
34752: PUSH
34753: LD_INT 3
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34807: LD_ADDR_VAR 0 34
34811: PUSH
34812: LD_INT 0
34814: PUSH
34815: LD_INT 4
34817: NEG
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: PUSH
34823: LD_INT 0
34825: PUSH
34826: LD_INT 5
34828: NEG
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PUSH
34834: LD_INT 1
34836: PUSH
34837: LD_INT 4
34839: NEG
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: LD_INT 1
34847: PUSH
34848: LD_INT 3
34850: NEG
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: PUSH
34856: LD_INT 0
34858: PUSH
34859: LD_INT 3
34861: NEG
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: PUSH
34867: LD_INT 1
34869: NEG
34870: PUSH
34871: LD_INT 4
34873: NEG
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 1
34881: NEG
34882: PUSH
34883: LD_INT 5
34885: NEG
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: PUSH
34891: LD_INT 2
34893: PUSH
34894: LD_INT 3
34896: NEG
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 2
34904: NEG
34905: PUSH
34906: LD_INT 5
34908: NEG
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: PUSH
34914: LD_INT 3
34916: PUSH
34917: LD_INT 0
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 3
34926: PUSH
34927: LD_INT 1
34929: NEG
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: PUSH
34935: LD_INT 4
34937: PUSH
34938: LD_INT 0
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: PUSH
34945: LD_INT 4
34947: PUSH
34948: LD_INT 1
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PUSH
34955: LD_INT 3
34957: PUSH
34958: LD_INT 1
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: PUSH
34965: LD_INT 2
34967: PUSH
34968: LD_INT 0
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: PUSH
34975: LD_INT 2
34977: PUSH
34978: LD_INT 1
34980: NEG
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: PUSH
34986: LD_INT 2
34988: PUSH
34989: LD_INT 2
34991: NEG
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: PUSH
34997: LD_INT 4
34999: PUSH
35000: LD_INT 2
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: PUSH
35007: LD_INT 4
35009: PUSH
35010: LD_INT 4
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: PUSH
35017: LD_INT 4
35019: PUSH
35020: LD_INT 3
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: PUSH
35027: LD_INT 5
35029: PUSH
35030: LD_INT 4
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: PUSH
35037: LD_INT 5
35039: PUSH
35040: LD_INT 5
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: PUSH
35047: LD_INT 4
35049: PUSH
35050: LD_INT 5
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: PUSH
35057: LD_INT 3
35059: PUSH
35060: LD_INT 4
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 3
35069: PUSH
35070: LD_INT 3
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: PUSH
35077: LD_INT 5
35079: PUSH
35080: LD_INT 3
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: PUSH
35087: LD_INT 3
35089: PUSH
35090: LD_INT 5
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: PUSH
35097: LD_INT 0
35099: PUSH
35100: LD_INT 3
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PUSH
35107: LD_INT 0
35109: PUSH
35110: LD_INT 2
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: PUSH
35117: LD_INT 1
35119: PUSH
35120: LD_INT 3
35122: PUSH
35123: EMPTY
35124: LIST
35125: LIST
35126: PUSH
35127: LD_INT 1
35129: PUSH
35130: LD_INT 4
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: PUSH
35137: LD_INT 0
35139: PUSH
35140: LD_INT 4
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: PUSH
35147: LD_INT 1
35149: NEG
35150: PUSH
35151: LD_INT 3
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PUSH
35158: LD_INT 1
35160: NEG
35161: PUSH
35162: LD_INT 2
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: LD_INT 2
35171: PUSH
35172: LD_INT 4
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PUSH
35179: LD_INT 2
35181: NEG
35182: PUSH
35183: LD_INT 2
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: PUSH
35190: LD_INT 4
35192: NEG
35193: PUSH
35194: LD_INT 0
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: PUSH
35201: LD_INT 4
35203: NEG
35204: PUSH
35205: LD_INT 1
35207: NEG
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: PUSH
35213: LD_INT 3
35215: NEG
35216: PUSH
35217: LD_INT 0
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PUSH
35224: LD_INT 3
35226: NEG
35227: PUSH
35228: LD_INT 1
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PUSH
35235: LD_INT 4
35237: NEG
35238: PUSH
35239: LD_INT 1
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: PUSH
35246: LD_INT 5
35248: NEG
35249: PUSH
35250: LD_INT 0
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: PUSH
35257: LD_INT 5
35259: NEG
35260: PUSH
35261: LD_INT 1
35263: NEG
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PUSH
35269: LD_INT 5
35271: NEG
35272: PUSH
35273: LD_INT 2
35275: NEG
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: PUSH
35281: LD_INT 3
35283: NEG
35284: PUSH
35285: LD_INT 2
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: LIST
35296: LIST
35297: LIST
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: LIST
35303: LIST
35304: LIST
35305: LIST
35306: LIST
35307: LIST
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: ST_TO_ADDR
// end ; end ;
35339: GO 35342
35341: POP
// case btype of b_depot , b_warehouse :
35342: LD_VAR 0 1
35346: PUSH
35347: LD_INT 0
35349: DOUBLE
35350: EQUAL
35351: IFTRUE 35361
35353: LD_INT 1
35355: DOUBLE
35356: EQUAL
35357: IFTRUE 35361
35359: GO 35562
35361: POP
// case nation of nation_american :
35362: LD_VAR 0 5
35366: PUSH
35367: LD_INT 1
35369: DOUBLE
35370: EQUAL
35371: IFTRUE 35375
35373: GO 35431
35375: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35376: LD_ADDR_VAR 0 9
35380: PUSH
35381: LD_VAR 0 11
35385: PUSH
35386: LD_VAR 0 12
35390: PUSH
35391: LD_VAR 0 13
35395: PUSH
35396: LD_VAR 0 14
35400: PUSH
35401: LD_VAR 0 15
35405: PUSH
35406: LD_VAR 0 16
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: PUSH
35419: LD_VAR 0 4
35423: PUSH
35424: LD_INT 1
35426: PLUS
35427: ARRAY
35428: ST_TO_ADDR
35429: GO 35560
35431: LD_INT 2
35433: DOUBLE
35434: EQUAL
35435: IFTRUE 35439
35437: GO 35495
35439: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35440: LD_ADDR_VAR 0 9
35444: PUSH
35445: LD_VAR 0 17
35449: PUSH
35450: LD_VAR 0 18
35454: PUSH
35455: LD_VAR 0 19
35459: PUSH
35460: LD_VAR 0 20
35464: PUSH
35465: LD_VAR 0 21
35469: PUSH
35470: LD_VAR 0 22
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: PUSH
35483: LD_VAR 0 4
35487: PUSH
35488: LD_INT 1
35490: PLUS
35491: ARRAY
35492: ST_TO_ADDR
35493: GO 35560
35495: LD_INT 3
35497: DOUBLE
35498: EQUAL
35499: IFTRUE 35503
35501: GO 35559
35503: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35504: LD_ADDR_VAR 0 9
35508: PUSH
35509: LD_VAR 0 23
35513: PUSH
35514: LD_VAR 0 24
35518: PUSH
35519: LD_VAR 0 25
35523: PUSH
35524: LD_VAR 0 26
35528: PUSH
35529: LD_VAR 0 27
35533: PUSH
35534: LD_VAR 0 28
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: LIST
35543: LIST
35544: LIST
35545: LIST
35546: PUSH
35547: LD_VAR 0 4
35551: PUSH
35552: LD_INT 1
35554: PLUS
35555: ARRAY
35556: ST_TO_ADDR
35557: GO 35560
35559: POP
35560: GO 36115
35562: LD_INT 2
35564: DOUBLE
35565: EQUAL
35566: IFTRUE 35576
35568: LD_INT 3
35570: DOUBLE
35571: EQUAL
35572: IFTRUE 35576
35574: GO 35632
35576: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35577: LD_ADDR_VAR 0 9
35581: PUSH
35582: LD_VAR 0 29
35586: PUSH
35587: LD_VAR 0 30
35591: PUSH
35592: LD_VAR 0 31
35596: PUSH
35597: LD_VAR 0 32
35601: PUSH
35602: LD_VAR 0 33
35606: PUSH
35607: LD_VAR 0 34
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: PUSH
35620: LD_VAR 0 4
35624: PUSH
35625: LD_INT 1
35627: PLUS
35628: ARRAY
35629: ST_TO_ADDR
35630: GO 36115
35632: LD_INT 16
35634: DOUBLE
35635: EQUAL
35636: IFTRUE 35694
35638: LD_INT 17
35640: DOUBLE
35641: EQUAL
35642: IFTRUE 35694
35644: LD_INT 18
35646: DOUBLE
35647: EQUAL
35648: IFTRUE 35694
35650: LD_INT 19
35652: DOUBLE
35653: EQUAL
35654: IFTRUE 35694
35656: LD_INT 22
35658: DOUBLE
35659: EQUAL
35660: IFTRUE 35694
35662: LD_INT 20
35664: DOUBLE
35665: EQUAL
35666: IFTRUE 35694
35668: LD_INT 21
35670: DOUBLE
35671: EQUAL
35672: IFTRUE 35694
35674: LD_INT 23
35676: DOUBLE
35677: EQUAL
35678: IFTRUE 35694
35680: LD_INT 24
35682: DOUBLE
35683: EQUAL
35684: IFTRUE 35694
35686: LD_INT 25
35688: DOUBLE
35689: EQUAL
35690: IFTRUE 35694
35692: GO 35750
35694: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35695: LD_ADDR_VAR 0 9
35699: PUSH
35700: LD_VAR 0 35
35704: PUSH
35705: LD_VAR 0 36
35709: PUSH
35710: LD_VAR 0 37
35714: PUSH
35715: LD_VAR 0 38
35719: PUSH
35720: LD_VAR 0 39
35724: PUSH
35725: LD_VAR 0 40
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: LIST
35734: LIST
35735: LIST
35736: LIST
35737: PUSH
35738: LD_VAR 0 4
35742: PUSH
35743: LD_INT 1
35745: PLUS
35746: ARRAY
35747: ST_TO_ADDR
35748: GO 36115
35750: LD_INT 6
35752: DOUBLE
35753: EQUAL
35754: IFTRUE 35806
35756: LD_INT 7
35758: DOUBLE
35759: EQUAL
35760: IFTRUE 35806
35762: LD_INT 8
35764: DOUBLE
35765: EQUAL
35766: IFTRUE 35806
35768: LD_INT 13
35770: DOUBLE
35771: EQUAL
35772: IFTRUE 35806
35774: LD_INT 12
35776: DOUBLE
35777: EQUAL
35778: IFTRUE 35806
35780: LD_INT 15
35782: DOUBLE
35783: EQUAL
35784: IFTRUE 35806
35786: LD_INT 11
35788: DOUBLE
35789: EQUAL
35790: IFTRUE 35806
35792: LD_INT 14
35794: DOUBLE
35795: EQUAL
35796: IFTRUE 35806
35798: LD_INT 10
35800: DOUBLE
35801: EQUAL
35802: IFTRUE 35806
35804: GO 35862
35806: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35807: LD_ADDR_VAR 0 9
35811: PUSH
35812: LD_VAR 0 41
35816: PUSH
35817: LD_VAR 0 42
35821: PUSH
35822: LD_VAR 0 43
35826: PUSH
35827: LD_VAR 0 44
35831: PUSH
35832: LD_VAR 0 45
35836: PUSH
35837: LD_VAR 0 46
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: PUSH
35850: LD_VAR 0 4
35854: PUSH
35855: LD_INT 1
35857: PLUS
35858: ARRAY
35859: ST_TO_ADDR
35860: GO 36115
35862: LD_INT 36
35864: DOUBLE
35865: EQUAL
35866: IFTRUE 35870
35868: GO 35926
35870: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35871: LD_ADDR_VAR 0 9
35875: PUSH
35876: LD_VAR 0 47
35880: PUSH
35881: LD_VAR 0 48
35885: PUSH
35886: LD_VAR 0 49
35890: PUSH
35891: LD_VAR 0 50
35895: PUSH
35896: LD_VAR 0 51
35900: PUSH
35901: LD_VAR 0 52
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: PUSH
35914: LD_VAR 0 4
35918: PUSH
35919: LD_INT 1
35921: PLUS
35922: ARRAY
35923: ST_TO_ADDR
35924: GO 36115
35926: LD_INT 4
35928: DOUBLE
35929: EQUAL
35930: IFTRUE 35952
35932: LD_INT 5
35934: DOUBLE
35935: EQUAL
35936: IFTRUE 35952
35938: LD_INT 34
35940: DOUBLE
35941: EQUAL
35942: IFTRUE 35952
35944: LD_INT 37
35946: DOUBLE
35947: EQUAL
35948: IFTRUE 35952
35950: GO 36008
35952: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35953: LD_ADDR_VAR 0 9
35957: PUSH
35958: LD_VAR 0 53
35962: PUSH
35963: LD_VAR 0 54
35967: PUSH
35968: LD_VAR 0 55
35972: PUSH
35973: LD_VAR 0 56
35977: PUSH
35978: LD_VAR 0 57
35982: PUSH
35983: LD_VAR 0 58
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: LIST
35992: LIST
35993: LIST
35994: LIST
35995: PUSH
35996: LD_VAR 0 4
36000: PUSH
36001: LD_INT 1
36003: PLUS
36004: ARRAY
36005: ST_TO_ADDR
36006: GO 36115
36008: LD_INT 31
36010: DOUBLE
36011: EQUAL
36012: IFTRUE 36058
36014: LD_INT 32
36016: DOUBLE
36017: EQUAL
36018: IFTRUE 36058
36020: LD_INT 33
36022: DOUBLE
36023: EQUAL
36024: IFTRUE 36058
36026: LD_INT 27
36028: DOUBLE
36029: EQUAL
36030: IFTRUE 36058
36032: LD_INT 26
36034: DOUBLE
36035: EQUAL
36036: IFTRUE 36058
36038: LD_INT 28
36040: DOUBLE
36041: EQUAL
36042: IFTRUE 36058
36044: LD_INT 29
36046: DOUBLE
36047: EQUAL
36048: IFTRUE 36058
36050: LD_INT 30
36052: DOUBLE
36053: EQUAL
36054: IFTRUE 36058
36056: GO 36114
36058: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
36059: LD_ADDR_VAR 0 9
36063: PUSH
36064: LD_VAR 0 59
36068: PUSH
36069: LD_VAR 0 60
36073: PUSH
36074: LD_VAR 0 61
36078: PUSH
36079: LD_VAR 0 62
36083: PUSH
36084: LD_VAR 0 63
36088: PUSH
36089: LD_VAR 0 64
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: PUSH
36102: LD_VAR 0 4
36106: PUSH
36107: LD_INT 1
36109: PLUS
36110: ARRAY
36111: ST_TO_ADDR
36112: GO 36115
36114: POP
// temp_list2 = [ ] ;
36115: LD_ADDR_VAR 0 10
36119: PUSH
36120: EMPTY
36121: ST_TO_ADDR
// for i in temp_list do
36122: LD_ADDR_VAR 0 8
36126: PUSH
36127: LD_VAR 0 9
36131: PUSH
36132: FOR_IN
36133: IFFALSE 36185
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36135: LD_ADDR_VAR 0 10
36139: PUSH
36140: LD_VAR 0 10
36144: PUSH
36145: LD_VAR 0 8
36149: PUSH
36150: LD_INT 1
36152: ARRAY
36153: PUSH
36154: LD_VAR 0 2
36158: PLUS
36159: PUSH
36160: LD_VAR 0 8
36164: PUSH
36165: LD_INT 2
36167: ARRAY
36168: PUSH
36169: LD_VAR 0 3
36173: PLUS
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: EMPTY
36180: LIST
36181: ADD
36182: ST_TO_ADDR
36183: GO 36132
36185: POP
36186: POP
// result = temp_list2 ;
36187: LD_ADDR_VAR 0 7
36191: PUSH
36192: LD_VAR 0 10
36196: ST_TO_ADDR
// end ;
36197: LD_VAR 0 7
36201: RET
// export function EnemyInRange ( unit , dist ) ; begin
36202: LD_INT 0
36204: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36205: LD_ADDR_VAR 0 3
36209: PUSH
36210: LD_VAR 0 1
36214: PPUSH
36215: CALL_OW 255
36219: PPUSH
36220: LD_VAR 0 1
36224: PPUSH
36225: CALL_OW 250
36229: PPUSH
36230: LD_VAR 0 1
36234: PPUSH
36235: CALL_OW 251
36239: PPUSH
36240: LD_VAR 0 2
36244: PPUSH
36245: CALL 9604 0 4
36249: PUSH
36250: LD_INT 4
36252: ARRAY
36253: ST_TO_ADDR
// end ;
36254: LD_VAR 0 3
36258: RET
// export function PlayerSeeMe ( unit ) ; begin
36259: LD_INT 0
36261: PPUSH
// result := See ( your_side , unit ) ;
36262: LD_ADDR_VAR 0 2
36266: PUSH
36267: LD_OWVAR 2
36271: PPUSH
36272: LD_VAR 0 1
36276: PPUSH
36277: CALL_OW 292
36281: ST_TO_ADDR
// end ;
36282: LD_VAR 0 2
36286: RET
// export function ReverseDir ( unit ) ; begin
36287: LD_INT 0
36289: PPUSH
// if not unit then
36290: LD_VAR 0 1
36294: NOT
36295: IFFALSE 36299
// exit ;
36297: GO 36322
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36299: LD_ADDR_VAR 0 2
36303: PUSH
36304: LD_VAR 0 1
36308: PPUSH
36309: CALL_OW 254
36313: PUSH
36314: LD_INT 3
36316: PLUS
36317: PUSH
36318: LD_INT 6
36320: MOD
36321: ST_TO_ADDR
// end ;
36322: LD_VAR 0 2
36326: RET
// export function ReverseArray ( array ) ; var i ; begin
36327: LD_INT 0
36329: PPUSH
36330: PPUSH
// if not array then
36331: LD_VAR 0 1
36335: NOT
36336: IFFALSE 36340
// exit ;
36338: GO 36395
// result := [ ] ;
36340: LD_ADDR_VAR 0 2
36344: PUSH
36345: EMPTY
36346: ST_TO_ADDR
// for i := array downto 1 do
36347: LD_ADDR_VAR 0 3
36351: PUSH
36352: DOUBLE
36353: LD_VAR 0 1
36357: INC
36358: ST_TO_ADDR
36359: LD_INT 1
36361: PUSH
36362: FOR_DOWNTO
36363: IFFALSE 36393
// result := Join ( result , array [ i ] ) ;
36365: LD_ADDR_VAR 0 2
36369: PUSH
36370: LD_VAR 0 2
36374: PPUSH
36375: LD_VAR 0 1
36379: PUSH
36380: LD_VAR 0 3
36384: ARRAY
36385: PPUSH
36386: CALL 41020 0 2
36390: ST_TO_ADDR
36391: GO 36362
36393: POP
36394: POP
// end ;
36395: LD_VAR 0 2
36399: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36400: LD_INT 0
36402: PPUSH
36403: PPUSH
36404: PPUSH
36405: PPUSH
36406: PPUSH
36407: PPUSH
// if not unit or not hexes then
36408: LD_VAR 0 1
36412: NOT
36413: PUSH
36414: LD_VAR 0 2
36418: NOT
36419: OR
36420: IFFALSE 36424
// exit ;
36422: GO 36547
// dist := 9999 ;
36424: LD_ADDR_VAR 0 5
36428: PUSH
36429: LD_INT 9999
36431: ST_TO_ADDR
// for i = 1 to hexes do
36432: LD_ADDR_VAR 0 4
36436: PUSH
36437: DOUBLE
36438: LD_INT 1
36440: DEC
36441: ST_TO_ADDR
36442: LD_VAR 0 2
36446: PUSH
36447: FOR_TO
36448: IFFALSE 36535
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36450: LD_ADDR_VAR 0 6
36454: PUSH
36455: LD_VAR 0 1
36459: PPUSH
36460: LD_VAR 0 2
36464: PUSH
36465: LD_VAR 0 4
36469: ARRAY
36470: PUSH
36471: LD_INT 1
36473: ARRAY
36474: PPUSH
36475: LD_VAR 0 2
36479: PUSH
36480: LD_VAR 0 4
36484: ARRAY
36485: PUSH
36486: LD_INT 2
36488: ARRAY
36489: PPUSH
36490: CALL_OW 297
36494: ST_TO_ADDR
// if tdist < dist then
36495: LD_VAR 0 6
36499: PUSH
36500: LD_VAR 0 5
36504: LESS
36505: IFFALSE 36533
// begin hex := hexes [ i ] ;
36507: LD_ADDR_VAR 0 8
36511: PUSH
36512: LD_VAR 0 2
36516: PUSH
36517: LD_VAR 0 4
36521: ARRAY
36522: ST_TO_ADDR
// dist := tdist ;
36523: LD_ADDR_VAR 0 5
36527: PUSH
36528: LD_VAR 0 6
36532: ST_TO_ADDR
// end ; end ;
36533: GO 36447
36535: POP
36536: POP
// result := hex ;
36537: LD_ADDR_VAR 0 3
36541: PUSH
36542: LD_VAR 0 8
36546: ST_TO_ADDR
// end ;
36547: LD_VAR 0 3
36551: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36552: LD_INT 0
36554: PPUSH
36555: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36556: LD_VAR 0 1
36560: NOT
36561: PUSH
36562: LD_VAR 0 1
36566: PUSH
36567: LD_INT 21
36569: PUSH
36570: LD_INT 2
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: LD_INT 23
36579: PUSH
36580: LD_INT 2
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: PPUSH
36591: CALL_OW 69
36595: IN
36596: NOT
36597: OR
36598: IFFALSE 36602
// exit ;
36600: GO 36649
// for i = 1 to 3 do
36602: LD_ADDR_VAR 0 3
36606: PUSH
36607: DOUBLE
36608: LD_INT 1
36610: DEC
36611: ST_TO_ADDR
36612: LD_INT 3
36614: PUSH
36615: FOR_TO
36616: IFFALSE 36647
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36618: LD_VAR 0 1
36622: PPUSH
36623: CALL_OW 250
36627: PPUSH
36628: LD_VAR 0 1
36632: PPUSH
36633: CALL_OW 251
36637: PPUSH
36638: LD_INT 1
36640: PPUSH
36641: CALL_OW 453
36645: GO 36615
36647: POP
36648: POP
// end ;
36649: LD_VAR 0 2
36653: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36654: LD_INT 0
36656: PPUSH
36657: PPUSH
36658: PPUSH
36659: PPUSH
36660: PPUSH
36661: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
36662: LD_VAR 0 1
36666: NOT
36667: PUSH
36668: LD_VAR 0 2
36672: NOT
36673: OR
36674: PUSH
36675: LD_VAR 0 1
36679: PPUSH
36680: CALL_OW 314
36684: OR
36685: IFFALSE 36689
// exit ;
36687: GO 37130
// x := GetX ( enemy_unit ) ;
36689: LD_ADDR_VAR 0 7
36693: PUSH
36694: LD_VAR 0 2
36698: PPUSH
36699: CALL_OW 250
36703: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36704: LD_ADDR_VAR 0 8
36708: PUSH
36709: LD_VAR 0 2
36713: PPUSH
36714: CALL_OW 251
36718: ST_TO_ADDR
// if not x or not y then
36719: LD_VAR 0 7
36723: NOT
36724: PUSH
36725: LD_VAR 0 8
36729: NOT
36730: OR
36731: IFFALSE 36735
// exit ;
36733: GO 37130
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36735: LD_ADDR_VAR 0 6
36739: PUSH
36740: LD_VAR 0 7
36744: PPUSH
36745: LD_INT 0
36747: PPUSH
36748: LD_INT 4
36750: PPUSH
36751: CALL_OW 272
36755: PUSH
36756: LD_VAR 0 8
36760: PPUSH
36761: LD_INT 0
36763: PPUSH
36764: LD_INT 4
36766: PPUSH
36767: CALL_OW 273
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: PUSH
36776: LD_VAR 0 7
36780: PPUSH
36781: LD_INT 1
36783: PPUSH
36784: LD_INT 4
36786: PPUSH
36787: CALL_OW 272
36791: PUSH
36792: LD_VAR 0 8
36796: PPUSH
36797: LD_INT 1
36799: PPUSH
36800: LD_INT 4
36802: PPUSH
36803: CALL_OW 273
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_VAR 0 7
36816: PPUSH
36817: LD_INT 2
36819: PPUSH
36820: LD_INT 4
36822: PPUSH
36823: CALL_OW 272
36827: PUSH
36828: LD_VAR 0 8
36832: PPUSH
36833: LD_INT 2
36835: PPUSH
36836: LD_INT 4
36838: PPUSH
36839: CALL_OW 273
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_VAR 0 7
36852: PPUSH
36853: LD_INT 3
36855: PPUSH
36856: LD_INT 4
36858: PPUSH
36859: CALL_OW 272
36863: PUSH
36864: LD_VAR 0 8
36868: PPUSH
36869: LD_INT 3
36871: PPUSH
36872: LD_INT 4
36874: PPUSH
36875: CALL_OW 273
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: PUSH
36884: LD_VAR 0 7
36888: PPUSH
36889: LD_INT 4
36891: PPUSH
36892: LD_INT 4
36894: PPUSH
36895: CALL_OW 272
36899: PUSH
36900: LD_VAR 0 8
36904: PPUSH
36905: LD_INT 4
36907: PPUSH
36908: LD_INT 4
36910: PPUSH
36911: CALL_OW 273
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: LD_VAR 0 7
36924: PPUSH
36925: LD_INT 5
36927: PPUSH
36928: LD_INT 4
36930: PPUSH
36931: CALL_OW 272
36935: PUSH
36936: LD_VAR 0 8
36940: PPUSH
36941: LD_INT 5
36943: PPUSH
36944: LD_INT 4
36946: PPUSH
36947: CALL_OW 273
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: ST_TO_ADDR
// for i = tmp downto 1 do
36964: LD_ADDR_VAR 0 4
36968: PUSH
36969: DOUBLE
36970: LD_VAR 0 6
36974: INC
36975: ST_TO_ADDR
36976: LD_INT 1
36978: PUSH
36979: FOR_DOWNTO
36980: IFFALSE 37081
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36982: LD_VAR 0 6
36986: PUSH
36987: LD_VAR 0 4
36991: ARRAY
36992: PUSH
36993: LD_INT 1
36995: ARRAY
36996: PPUSH
36997: LD_VAR 0 6
37001: PUSH
37002: LD_VAR 0 4
37006: ARRAY
37007: PUSH
37008: LD_INT 2
37010: ARRAY
37011: PPUSH
37012: CALL_OW 488
37016: NOT
37017: PUSH
37018: LD_VAR 0 6
37022: PUSH
37023: LD_VAR 0 4
37027: ARRAY
37028: PUSH
37029: LD_INT 1
37031: ARRAY
37032: PPUSH
37033: LD_VAR 0 6
37037: PUSH
37038: LD_VAR 0 4
37042: ARRAY
37043: PUSH
37044: LD_INT 2
37046: ARRAY
37047: PPUSH
37048: CALL_OW 428
37052: PUSH
37053: LD_INT 0
37055: NONEQUAL
37056: OR
37057: IFFALSE 37079
// tmp := Delete ( tmp , i ) ;
37059: LD_ADDR_VAR 0 6
37063: PUSH
37064: LD_VAR 0 6
37068: PPUSH
37069: LD_VAR 0 4
37073: PPUSH
37074: CALL_OW 3
37078: ST_TO_ADDR
37079: GO 36979
37081: POP
37082: POP
// j := GetClosestHex ( unit , tmp ) ;
37083: LD_ADDR_VAR 0 5
37087: PUSH
37088: LD_VAR 0 1
37092: PPUSH
37093: LD_VAR 0 6
37097: PPUSH
37098: CALL 36400 0 2
37102: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
37103: LD_VAR 0 1
37107: PPUSH
37108: LD_VAR 0 5
37112: PUSH
37113: LD_INT 1
37115: ARRAY
37116: PPUSH
37117: LD_VAR 0 5
37121: PUSH
37122: LD_INT 2
37124: ARRAY
37125: PPUSH
37126: CALL_OW 111
// end ;
37130: LD_VAR 0 3
37134: RET
// export function PrepareApemanSoldier ( ) ; begin
37135: LD_INT 0
37137: PPUSH
// uc_nation := 0 ;
37138: LD_ADDR_OWVAR 21
37142: PUSH
37143: LD_INT 0
37145: ST_TO_ADDR
// hc_sex := sex_male ;
37146: LD_ADDR_OWVAR 27
37150: PUSH
37151: LD_INT 1
37153: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
37154: LD_ADDR_OWVAR 28
37158: PUSH
37159: LD_INT 15
37161: ST_TO_ADDR
// hc_gallery :=  ;
37162: LD_ADDR_OWVAR 33
37166: PUSH
37167: LD_STRING 
37169: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37170: LD_ADDR_OWVAR 31
37174: PUSH
37175: LD_INT 0
37177: PPUSH
37178: LD_INT 3
37180: PPUSH
37181: CALL_OW 12
37185: PUSH
37186: LD_INT 0
37188: PPUSH
37189: LD_INT 3
37191: PPUSH
37192: CALL_OW 12
37196: PUSH
37197: LD_INT 0
37199: PUSH
37200: LD_INT 0
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: LIST
37207: LIST
37208: ST_TO_ADDR
// end ;
37209: LD_VAR 0 1
37213: RET
// export function PrepareApemanEngineer ( ) ; begin
37214: LD_INT 0
37216: PPUSH
// uc_nation := 0 ;
37217: LD_ADDR_OWVAR 21
37221: PUSH
37222: LD_INT 0
37224: ST_TO_ADDR
// hc_sex := sex_male ;
37225: LD_ADDR_OWVAR 27
37229: PUSH
37230: LD_INT 1
37232: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
37233: LD_ADDR_OWVAR 28
37237: PUSH
37238: LD_INT 16
37240: ST_TO_ADDR
// hc_gallery :=  ;
37241: LD_ADDR_OWVAR 33
37245: PUSH
37246: LD_STRING 
37248: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37249: LD_ADDR_OWVAR 31
37253: PUSH
37254: LD_INT 0
37256: PPUSH
37257: LD_INT 3
37259: PPUSH
37260: CALL_OW 12
37264: PUSH
37265: LD_INT 0
37267: PPUSH
37268: LD_INT 3
37270: PPUSH
37271: CALL_OW 12
37275: PUSH
37276: LD_INT 0
37278: PUSH
37279: LD_INT 0
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: ST_TO_ADDR
// end ;
37288: LD_VAR 0 1
37292: RET
// export function PrepareApeman ( agressivity ) ; begin
37293: LD_INT 0
37295: PPUSH
// uc_side := 0 ;
37296: LD_ADDR_OWVAR 20
37300: PUSH
37301: LD_INT 0
37303: ST_TO_ADDR
// uc_nation := 0 ;
37304: LD_ADDR_OWVAR 21
37308: PUSH
37309: LD_INT 0
37311: ST_TO_ADDR
// hc_sex := sex_male ;
37312: LD_ADDR_OWVAR 27
37316: PUSH
37317: LD_INT 1
37319: ST_TO_ADDR
// hc_class := class_apeman ;
37320: LD_ADDR_OWVAR 28
37324: PUSH
37325: LD_INT 12
37327: ST_TO_ADDR
// hc_gallery :=  ;
37328: LD_ADDR_OWVAR 33
37332: PUSH
37333: LD_STRING 
37335: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37336: LD_ADDR_OWVAR 35
37340: PUSH
37341: LD_VAR 0 1
37345: NEG
37346: PPUSH
37347: LD_VAR 0 1
37351: PPUSH
37352: CALL_OW 12
37356: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37357: LD_ADDR_OWVAR 31
37361: PUSH
37362: LD_INT 0
37364: PPUSH
37365: LD_INT 3
37367: PPUSH
37368: CALL_OW 12
37372: PUSH
37373: LD_INT 0
37375: PPUSH
37376: LD_INT 3
37378: PPUSH
37379: CALL_OW 12
37383: PUSH
37384: LD_INT 0
37386: PUSH
37387: LD_INT 0
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: ST_TO_ADDR
// end ;
37396: LD_VAR 0 2
37400: RET
// export function PrepareTiger ( agressivity ) ; begin
37401: LD_INT 0
37403: PPUSH
// uc_side := 0 ;
37404: LD_ADDR_OWVAR 20
37408: PUSH
37409: LD_INT 0
37411: ST_TO_ADDR
// uc_nation := 0 ;
37412: LD_ADDR_OWVAR 21
37416: PUSH
37417: LD_INT 0
37419: ST_TO_ADDR
// hc_class := class_tiger ;
37420: LD_ADDR_OWVAR 28
37424: PUSH
37425: LD_INT 14
37427: ST_TO_ADDR
// hc_gallery :=  ;
37428: LD_ADDR_OWVAR 33
37432: PUSH
37433: LD_STRING 
37435: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37436: LD_ADDR_OWVAR 35
37440: PUSH
37441: LD_VAR 0 1
37445: NEG
37446: PPUSH
37447: LD_VAR 0 1
37451: PPUSH
37452: CALL_OW 12
37456: ST_TO_ADDR
// end ;
37457: LD_VAR 0 2
37461: RET
// export function PrepareEnchidna ( ) ; begin
37462: LD_INT 0
37464: PPUSH
// uc_side := 0 ;
37465: LD_ADDR_OWVAR 20
37469: PUSH
37470: LD_INT 0
37472: ST_TO_ADDR
// uc_nation := 0 ;
37473: LD_ADDR_OWVAR 21
37477: PUSH
37478: LD_INT 0
37480: ST_TO_ADDR
// hc_class := class_baggie ;
37481: LD_ADDR_OWVAR 28
37485: PUSH
37486: LD_INT 13
37488: ST_TO_ADDR
// hc_gallery :=  ;
37489: LD_ADDR_OWVAR 33
37493: PUSH
37494: LD_STRING 
37496: ST_TO_ADDR
// end ;
37497: LD_VAR 0 1
37501: RET
// export function PrepareFrog ( ) ; begin
37502: LD_INT 0
37504: PPUSH
// uc_side := 0 ;
37505: LD_ADDR_OWVAR 20
37509: PUSH
37510: LD_INT 0
37512: ST_TO_ADDR
// uc_nation := 0 ;
37513: LD_ADDR_OWVAR 21
37517: PUSH
37518: LD_INT 0
37520: ST_TO_ADDR
// hc_class := class_frog ;
37521: LD_ADDR_OWVAR 28
37525: PUSH
37526: LD_INT 19
37528: ST_TO_ADDR
// hc_gallery :=  ;
37529: LD_ADDR_OWVAR 33
37533: PUSH
37534: LD_STRING 
37536: ST_TO_ADDR
// end ;
37537: LD_VAR 0 1
37541: RET
// export function PrepareFish ( ) ; begin
37542: LD_INT 0
37544: PPUSH
// uc_side := 0 ;
37545: LD_ADDR_OWVAR 20
37549: PUSH
37550: LD_INT 0
37552: ST_TO_ADDR
// uc_nation := 0 ;
37553: LD_ADDR_OWVAR 21
37557: PUSH
37558: LD_INT 0
37560: ST_TO_ADDR
// hc_class := class_fish ;
37561: LD_ADDR_OWVAR 28
37565: PUSH
37566: LD_INT 20
37568: ST_TO_ADDR
// hc_gallery :=  ;
37569: LD_ADDR_OWVAR 33
37573: PUSH
37574: LD_STRING 
37576: ST_TO_ADDR
// end ;
37577: LD_VAR 0 1
37581: RET
// export function PrepareBird ( ) ; begin
37582: LD_INT 0
37584: PPUSH
// uc_side := 0 ;
37585: LD_ADDR_OWVAR 20
37589: PUSH
37590: LD_INT 0
37592: ST_TO_ADDR
// uc_nation := 0 ;
37593: LD_ADDR_OWVAR 21
37597: PUSH
37598: LD_INT 0
37600: ST_TO_ADDR
// hc_class := class_phororhacos ;
37601: LD_ADDR_OWVAR 28
37605: PUSH
37606: LD_INT 18
37608: ST_TO_ADDR
// hc_gallery :=  ;
37609: LD_ADDR_OWVAR 33
37613: PUSH
37614: LD_STRING 
37616: ST_TO_ADDR
// end ;
37617: LD_VAR 0 1
37621: RET
// export function PrepareHorse ( ) ; begin
37622: LD_INT 0
37624: PPUSH
// uc_side := 0 ;
37625: LD_ADDR_OWVAR 20
37629: PUSH
37630: LD_INT 0
37632: ST_TO_ADDR
// uc_nation := 0 ;
37633: LD_ADDR_OWVAR 21
37637: PUSH
37638: LD_INT 0
37640: ST_TO_ADDR
// hc_class := class_horse ;
37641: LD_ADDR_OWVAR 28
37645: PUSH
37646: LD_INT 21
37648: ST_TO_ADDR
// hc_gallery :=  ;
37649: LD_ADDR_OWVAR 33
37653: PUSH
37654: LD_STRING 
37656: ST_TO_ADDR
// end ;
37657: LD_VAR 0 1
37661: RET
// export function PrepareMastodont ( ) ; begin
37662: LD_INT 0
37664: PPUSH
// uc_side := 0 ;
37665: LD_ADDR_OWVAR 20
37669: PUSH
37670: LD_INT 0
37672: ST_TO_ADDR
// uc_nation := 0 ;
37673: LD_ADDR_OWVAR 21
37677: PUSH
37678: LD_INT 0
37680: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37681: LD_ADDR_OWVAR 37
37685: PUSH
37686: LD_INT 31
37688: ST_TO_ADDR
// vc_control := control_rider ;
37689: LD_ADDR_OWVAR 38
37693: PUSH
37694: LD_INT 4
37696: ST_TO_ADDR
// end ;
37697: LD_VAR 0 1
37701: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37702: LD_INT 0
37704: PPUSH
37705: PPUSH
37706: PPUSH
// uc_side = 0 ;
37707: LD_ADDR_OWVAR 20
37711: PUSH
37712: LD_INT 0
37714: ST_TO_ADDR
// uc_nation = 0 ;
37715: LD_ADDR_OWVAR 21
37719: PUSH
37720: LD_INT 0
37722: ST_TO_ADDR
// InitHc_All ( ) ;
37723: CALL_OW 584
// InitVc ;
37727: CALL_OW 20
// if mastodonts then
37731: LD_VAR 0 6
37735: IFFALSE 37802
// for i = 1 to mastodonts do
37737: LD_ADDR_VAR 0 11
37741: PUSH
37742: DOUBLE
37743: LD_INT 1
37745: DEC
37746: ST_TO_ADDR
37747: LD_VAR 0 6
37751: PUSH
37752: FOR_TO
37753: IFFALSE 37800
// begin vc_chassis := 31 ;
37755: LD_ADDR_OWVAR 37
37759: PUSH
37760: LD_INT 31
37762: ST_TO_ADDR
// vc_control := control_rider ;
37763: LD_ADDR_OWVAR 38
37767: PUSH
37768: LD_INT 4
37770: ST_TO_ADDR
// animal := CreateVehicle ;
37771: LD_ADDR_VAR 0 12
37775: PUSH
37776: CALL_OW 45
37780: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37781: LD_VAR 0 12
37785: PPUSH
37786: LD_VAR 0 8
37790: PPUSH
37791: LD_INT 0
37793: PPUSH
37794: CALL 39937 0 3
// end ;
37798: GO 37752
37800: POP
37801: POP
// if horses then
37802: LD_VAR 0 5
37806: IFFALSE 37873
// for i = 1 to horses do
37808: LD_ADDR_VAR 0 11
37812: PUSH
37813: DOUBLE
37814: LD_INT 1
37816: DEC
37817: ST_TO_ADDR
37818: LD_VAR 0 5
37822: PUSH
37823: FOR_TO
37824: IFFALSE 37871
// begin hc_class := 21 ;
37826: LD_ADDR_OWVAR 28
37830: PUSH
37831: LD_INT 21
37833: ST_TO_ADDR
// hc_gallery :=  ;
37834: LD_ADDR_OWVAR 33
37838: PUSH
37839: LD_STRING 
37841: ST_TO_ADDR
// animal := CreateHuman ;
37842: LD_ADDR_VAR 0 12
37846: PUSH
37847: CALL_OW 44
37851: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37852: LD_VAR 0 12
37856: PPUSH
37857: LD_VAR 0 8
37861: PPUSH
37862: LD_INT 0
37864: PPUSH
37865: CALL 39937 0 3
// end ;
37869: GO 37823
37871: POP
37872: POP
// if birds then
37873: LD_VAR 0 1
37877: IFFALSE 37944
// for i = 1 to birds do
37879: LD_ADDR_VAR 0 11
37883: PUSH
37884: DOUBLE
37885: LD_INT 1
37887: DEC
37888: ST_TO_ADDR
37889: LD_VAR 0 1
37893: PUSH
37894: FOR_TO
37895: IFFALSE 37942
// begin hc_class = 18 ;
37897: LD_ADDR_OWVAR 28
37901: PUSH
37902: LD_INT 18
37904: ST_TO_ADDR
// hc_gallery =  ;
37905: LD_ADDR_OWVAR 33
37909: PUSH
37910: LD_STRING 
37912: ST_TO_ADDR
// animal := CreateHuman ;
37913: LD_ADDR_VAR 0 12
37917: PUSH
37918: CALL_OW 44
37922: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37923: LD_VAR 0 12
37927: PPUSH
37928: LD_VAR 0 8
37932: PPUSH
37933: LD_INT 0
37935: PPUSH
37936: CALL 39937 0 3
// end ;
37940: GO 37894
37942: POP
37943: POP
// if tigers then
37944: LD_VAR 0 2
37948: IFFALSE 38032
// for i = 1 to tigers do
37950: LD_ADDR_VAR 0 11
37954: PUSH
37955: DOUBLE
37956: LD_INT 1
37958: DEC
37959: ST_TO_ADDR
37960: LD_VAR 0 2
37964: PUSH
37965: FOR_TO
37966: IFFALSE 38030
// begin hc_class = class_tiger ;
37968: LD_ADDR_OWVAR 28
37972: PUSH
37973: LD_INT 14
37975: ST_TO_ADDR
// hc_gallery =  ;
37976: LD_ADDR_OWVAR 33
37980: PUSH
37981: LD_STRING 
37983: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37984: LD_ADDR_OWVAR 35
37988: PUSH
37989: LD_INT 7
37991: NEG
37992: PPUSH
37993: LD_INT 7
37995: PPUSH
37996: CALL_OW 12
38000: ST_TO_ADDR
// animal := CreateHuman ;
38001: LD_ADDR_VAR 0 12
38005: PUSH
38006: CALL_OW 44
38010: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38011: LD_VAR 0 12
38015: PPUSH
38016: LD_VAR 0 8
38020: PPUSH
38021: LD_INT 0
38023: PPUSH
38024: CALL 39937 0 3
// end ;
38028: GO 37965
38030: POP
38031: POP
// if apemans then
38032: LD_VAR 0 3
38036: IFFALSE 38159
// for i = 1 to apemans do
38038: LD_ADDR_VAR 0 11
38042: PUSH
38043: DOUBLE
38044: LD_INT 1
38046: DEC
38047: ST_TO_ADDR
38048: LD_VAR 0 3
38052: PUSH
38053: FOR_TO
38054: IFFALSE 38157
// begin hc_class = class_apeman ;
38056: LD_ADDR_OWVAR 28
38060: PUSH
38061: LD_INT 12
38063: ST_TO_ADDR
// hc_gallery =  ;
38064: LD_ADDR_OWVAR 33
38068: PUSH
38069: LD_STRING 
38071: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
38072: LD_ADDR_OWVAR 35
38076: PUSH
38077: LD_INT 2
38079: NEG
38080: PPUSH
38081: LD_INT 2
38083: PPUSH
38084: CALL_OW 12
38088: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38089: LD_ADDR_OWVAR 31
38093: PUSH
38094: LD_INT 1
38096: PPUSH
38097: LD_INT 3
38099: PPUSH
38100: CALL_OW 12
38104: PUSH
38105: LD_INT 1
38107: PPUSH
38108: LD_INT 3
38110: PPUSH
38111: CALL_OW 12
38115: PUSH
38116: LD_INT 0
38118: PUSH
38119: LD_INT 0
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: ST_TO_ADDR
// animal := CreateHuman ;
38128: LD_ADDR_VAR 0 12
38132: PUSH
38133: CALL_OW 44
38137: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38138: LD_VAR 0 12
38142: PPUSH
38143: LD_VAR 0 8
38147: PPUSH
38148: LD_INT 0
38150: PPUSH
38151: CALL 39937 0 3
// end ;
38155: GO 38053
38157: POP
38158: POP
// if enchidnas then
38159: LD_VAR 0 4
38163: IFFALSE 38230
// for i = 1 to enchidnas do
38165: LD_ADDR_VAR 0 11
38169: PUSH
38170: DOUBLE
38171: LD_INT 1
38173: DEC
38174: ST_TO_ADDR
38175: LD_VAR 0 4
38179: PUSH
38180: FOR_TO
38181: IFFALSE 38228
// begin hc_class = 13 ;
38183: LD_ADDR_OWVAR 28
38187: PUSH
38188: LD_INT 13
38190: ST_TO_ADDR
// hc_gallery =  ;
38191: LD_ADDR_OWVAR 33
38195: PUSH
38196: LD_STRING 
38198: ST_TO_ADDR
// animal := CreateHuman ;
38199: LD_ADDR_VAR 0 12
38203: PUSH
38204: CALL_OW 44
38208: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38209: LD_VAR 0 12
38213: PPUSH
38214: LD_VAR 0 8
38218: PPUSH
38219: LD_INT 0
38221: PPUSH
38222: CALL 39937 0 3
// end ;
38226: GO 38180
38228: POP
38229: POP
// if fishes then
38230: LD_VAR 0 7
38234: IFFALSE 38301
// for i = 1 to fishes do
38236: LD_ADDR_VAR 0 11
38240: PUSH
38241: DOUBLE
38242: LD_INT 1
38244: DEC
38245: ST_TO_ADDR
38246: LD_VAR 0 7
38250: PUSH
38251: FOR_TO
38252: IFFALSE 38299
// begin hc_class = 20 ;
38254: LD_ADDR_OWVAR 28
38258: PUSH
38259: LD_INT 20
38261: ST_TO_ADDR
// hc_gallery =  ;
38262: LD_ADDR_OWVAR 33
38266: PUSH
38267: LD_STRING 
38269: ST_TO_ADDR
// animal := CreateHuman ;
38270: LD_ADDR_VAR 0 12
38274: PUSH
38275: CALL_OW 44
38279: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
38280: LD_VAR 0 12
38284: PPUSH
38285: LD_VAR 0 9
38289: PPUSH
38290: LD_INT 0
38292: PPUSH
38293: CALL 39937 0 3
// end ;
38297: GO 38251
38299: POP
38300: POP
// end ;
38301: LD_VAR 0 10
38305: RET
// export function WantHeal ( sci , unit ) ; begin
38306: LD_INT 0
38308: PPUSH
// if GetTaskList ( sci ) > 0 then
38309: LD_VAR 0 1
38313: PPUSH
38314: CALL_OW 437
38318: PUSH
38319: LD_INT 0
38321: GREATER
38322: IFFALSE 38392
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38324: LD_VAR 0 1
38328: PPUSH
38329: CALL_OW 437
38333: PUSH
38334: LD_INT 1
38336: ARRAY
38337: PUSH
38338: LD_INT 1
38340: ARRAY
38341: PUSH
38342: LD_STRING l
38344: EQUAL
38345: PUSH
38346: LD_VAR 0 1
38350: PPUSH
38351: CALL_OW 437
38355: PUSH
38356: LD_INT 1
38358: ARRAY
38359: PUSH
38360: LD_INT 4
38362: ARRAY
38363: PUSH
38364: LD_VAR 0 2
38368: EQUAL
38369: AND
38370: IFFALSE 38382
// result := true else
38372: LD_ADDR_VAR 0 3
38376: PUSH
38377: LD_INT 1
38379: ST_TO_ADDR
38380: GO 38390
// result := false ;
38382: LD_ADDR_VAR 0 3
38386: PUSH
38387: LD_INT 0
38389: ST_TO_ADDR
// end else
38390: GO 38400
// result := false ;
38392: LD_ADDR_VAR 0 3
38396: PUSH
38397: LD_INT 0
38399: ST_TO_ADDR
// end ;
38400: LD_VAR 0 3
38404: RET
// export function HealTarget ( sci ) ; begin
38405: LD_INT 0
38407: PPUSH
// if not sci then
38408: LD_VAR 0 1
38412: NOT
38413: IFFALSE 38417
// exit ;
38415: GO 38482
// result := 0 ;
38417: LD_ADDR_VAR 0 2
38421: PUSH
38422: LD_INT 0
38424: ST_TO_ADDR
// if GetTaskList ( sci ) then
38425: LD_VAR 0 1
38429: PPUSH
38430: CALL_OW 437
38434: IFFALSE 38482
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38436: LD_VAR 0 1
38440: PPUSH
38441: CALL_OW 437
38445: PUSH
38446: LD_INT 1
38448: ARRAY
38449: PUSH
38450: LD_INT 1
38452: ARRAY
38453: PUSH
38454: LD_STRING l
38456: EQUAL
38457: IFFALSE 38482
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38459: LD_ADDR_VAR 0 2
38463: PUSH
38464: LD_VAR 0 1
38468: PPUSH
38469: CALL_OW 437
38473: PUSH
38474: LD_INT 1
38476: ARRAY
38477: PUSH
38478: LD_INT 4
38480: ARRAY
38481: ST_TO_ADDR
// end ;
38482: LD_VAR 0 2
38486: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38487: LD_INT 0
38489: PPUSH
38490: PPUSH
38491: PPUSH
38492: PPUSH
// if not base_units then
38493: LD_VAR 0 1
38497: NOT
38498: IFFALSE 38502
// exit ;
38500: GO 38589
// result := false ;
38502: LD_ADDR_VAR 0 2
38506: PUSH
38507: LD_INT 0
38509: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38510: LD_ADDR_VAR 0 5
38514: PUSH
38515: LD_VAR 0 1
38519: PPUSH
38520: LD_INT 21
38522: PUSH
38523: LD_INT 3
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PPUSH
38530: CALL_OW 72
38534: ST_TO_ADDR
// if not tmp then
38535: LD_VAR 0 5
38539: NOT
38540: IFFALSE 38544
// exit ;
38542: GO 38589
// for i in tmp do
38544: LD_ADDR_VAR 0 3
38548: PUSH
38549: LD_VAR 0 5
38553: PUSH
38554: FOR_IN
38555: IFFALSE 38587
// begin result := EnemyInRange ( i , 22 ) ;
38557: LD_ADDR_VAR 0 2
38561: PUSH
38562: LD_VAR 0 3
38566: PPUSH
38567: LD_INT 22
38569: PPUSH
38570: CALL 36202 0 2
38574: ST_TO_ADDR
// if result then
38575: LD_VAR 0 2
38579: IFFALSE 38585
// exit ;
38581: POP
38582: POP
38583: GO 38589
// end ;
38585: GO 38554
38587: POP
38588: POP
// end ;
38589: LD_VAR 0 2
38593: RET
// export function FilterByTag ( units , tag ) ; begin
38594: LD_INT 0
38596: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38597: LD_ADDR_VAR 0 3
38601: PUSH
38602: LD_VAR 0 1
38606: PPUSH
38607: LD_INT 120
38609: PUSH
38610: LD_VAR 0 2
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PPUSH
38619: CALL_OW 72
38623: ST_TO_ADDR
// end ;
38624: LD_VAR 0 3
38628: RET
// export function IsDriver ( un ) ; begin
38629: LD_INT 0
38631: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38632: LD_ADDR_VAR 0 2
38636: PUSH
38637: LD_VAR 0 1
38641: PUSH
38642: LD_INT 55
38644: PUSH
38645: EMPTY
38646: LIST
38647: PPUSH
38648: CALL_OW 69
38652: IN
38653: ST_TO_ADDR
// end ;
38654: LD_VAR 0 2
38658: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38659: LD_INT 0
38661: PPUSH
38662: PPUSH
// list := [ ] ;
38663: LD_ADDR_VAR 0 5
38667: PUSH
38668: EMPTY
38669: ST_TO_ADDR
// case d of 0 :
38670: LD_VAR 0 3
38674: PUSH
38675: LD_INT 0
38677: DOUBLE
38678: EQUAL
38679: IFTRUE 38683
38681: GO 38816
38683: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38684: LD_ADDR_VAR 0 5
38688: PUSH
38689: LD_VAR 0 1
38693: PUSH
38694: LD_INT 4
38696: MINUS
38697: PUSH
38698: LD_VAR 0 2
38702: PUSH
38703: LD_INT 4
38705: MINUS
38706: PUSH
38707: LD_INT 2
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: LIST
38714: PUSH
38715: LD_VAR 0 1
38719: PUSH
38720: LD_INT 3
38722: MINUS
38723: PUSH
38724: LD_VAR 0 2
38728: PUSH
38729: LD_INT 1
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: LIST
38736: PUSH
38737: LD_VAR 0 1
38741: PUSH
38742: LD_INT 4
38744: PLUS
38745: PUSH
38746: LD_VAR 0 2
38750: PUSH
38751: LD_INT 4
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: LIST
38758: PUSH
38759: LD_VAR 0 1
38763: PUSH
38764: LD_INT 3
38766: PLUS
38767: PUSH
38768: LD_VAR 0 2
38772: PUSH
38773: LD_INT 3
38775: PLUS
38776: PUSH
38777: LD_INT 5
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: LIST
38784: PUSH
38785: LD_VAR 0 1
38789: PUSH
38790: LD_VAR 0 2
38794: PUSH
38795: LD_INT 4
38797: PLUS
38798: PUSH
38799: LD_INT 0
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: LIST
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: LIST
38811: LIST
38812: LIST
38813: ST_TO_ADDR
// end ; 1 :
38814: GO 39514
38816: LD_INT 1
38818: DOUBLE
38819: EQUAL
38820: IFTRUE 38824
38822: GO 38957
38824: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38825: LD_ADDR_VAR 0 5
38829: PUSH
38830: LD_VAR 0 1
38834: PUSH
38835: LD_VAR 0 2
38839: PUSH
38840: LD_INT 4
38842: MINUS
38843: PUSH
38844: LD_INT 3
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: LIST
38851: PUSH
38852: LD_VAR 0 1
38856: PUSH
38857: LD_INT 3
38859: MINUS
38860: PUSH
38861: LD_VAR 0 2
38865: PUSH
38866: LD_INT 3
38868: MINUS
38869: PUSH
38870: LD_INT 2
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: LIST
38877: PUSH
38878: LD_VAR 0 1
38882: PUSH
38883: LD_INT 4
38885: MINUS
38886: PUSH
38887: LD_VAR 0 2
38891: PUSH
38892: LD_INT 1
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: LIST
38899: PUSH
38900: LD_VAR 0 1
38904: PUSH
38905: LD_VAR 0 2
38909: PUSH
38910: LD_INT 3
38912: PLUS
38913: PUSH
38914: LD_INT 0
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: LIST
38921: PUSH
38922: LD_VAR 0 1
38926: PUSH
38927: LD_INT 4
38929: PLUS
38930: PUSH
38931: LD_VAR 0 2
38935: PUSH
38936: LD_INT 4
38938: PLUS
38939: PUSH
38940: LD_INT 5
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: LIST
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: ST_TO_ADDR
// end ; 2 :
38955: GO 39514
38957: LD_INT 2
38959: DOUBLE
38960: EQUAL
38961: IFTRUE 38965
38963: GO 39094
38965: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38966: LD_ADDR_VAR 0 5
38970: PUSH
38971: LD_VAR 0 1
38975: PUSH
38976: LD_VAR 0 2
38980: PUSH
38981: LD_INT 3
38983: MINUS
38984: PUSH
38985: LD_INT 3
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: LIST
38992: PUSH
38993: LD_VAR 0 1
38997: PUSH
38998: LD_INT 4
39000: PLUS
39001: PUSH
39002: LD_VAR 0 2
39006: PUSH
39007: LD_INT 4
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: LIST
39014: PUSH
39015: LD_VAR 0 1
39019: PUSH
39020: LD_VAR 0 2
39024: PUSH
39025: LD_INT 4
39027: PLUS
39028: PUSH
39029: LD_INT 0
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: LIST
39036: PUSH
39037: LD_VAR 0 1
39041: PUSH
39042: LD_INT 3
39044: MINUS
39045: PUSH
39046: LD_VAR 0 2
39050: PUSH
39051: LD_INT 1
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: LIST
39058: PUSH
39059: LD_VAR 0 1
39063: PUSH
39064: LD_INT 4
39066: MINUS
39067: PUSH
39068: LD_VAR 0 2
39072: PUSH
39073: LD_INT 4
39075: MINUS
39076: PUSH
39077: LD_INT 2
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: LIST
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: ST_TO_ADDR
// end ; 3 :
39092: GO 39514
39094: LD_INT 3
39096: DOUBLE
39097: EQUAL
39098: IFTRUE 39102
39100: GO 39235
39102: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39103: LD_ADDR_VAR 0 5
39107: PUSH
39108: LD_VAR 0 1
39112: PUSH
39113: LD_INT 3
39115: PLUS
39116: PUSH
39117: LD_VAR 0 2
39121: PUSH
39122: LD_INT 4
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: LIST
39129: PUSH
39130: LD_VAR 0 1
39134: PUSH
39135: LD_INT 4
39137: PLUS
39138: PUSH
39139: LD_VAR 0 2
39143: PUSH
39144: LD_INT 4
39146: PLUS
39147: PUSH
39148: LD_INT 5
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: LIST
39155: PUSH
39156: LD_VAR 0 1
39160: PUSH
39161: LD_INT 4
39163: MINUS
39164: PUSH
39165: LD_VAR 0 2
39169: PUSH
39170: LD_INT 1
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: LIST
39177: PUSH
39178: LD_VAR 0 1
39182: PUSH
39183: LD_VAR 0 2
39187: PUSH
39188: LD_INT 4
39190: MINUS
39191: PUSH
39192: LD_INT 3
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: LIST
39199: PUSH
39200: LD_VAR 0 1
39204: PUSH
39205: LD_INT 3
39207: MINUS
39208: PUSH
39209: LD_VAR 0 2
39213: PUSH
39214: LD_INT 3
39216: MINUS
39217: PUSH
39218: LD_INT 2
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: LIST
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: ST_TO_ADDR
// end ; 4 :
39233: GO 39514
39235: LD_INT 4
39237: DOUBLE
39238: EQUAL
39239: IFTRUE 39243
39241: GO 39376
39243: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
39244: LD_ADDR_VAR 0 5
39248: PUSH
39249: LD_VAR 0 1
39253: PUSH
39254: LD_VAR 0 2
39258: PUSH
39259: LD_INT 4
39261: PLUS
39262: PUSH
39263: LD_INT 0
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: LIST
39270: PUSH
39271: LD_VAR 0 1
39275: PUSH
39276: LD_INT 3
39278: PLUS
39279: PUSH
39280: LD_VAR 0 2
39284: PUSH
39285: LD_INT 3
39287: PLUS
39288: PUSH
39289: LD_INT 5
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: LIST
39296: PUSH
39297: LD_VAR 0 1
39301: PUSH
39302: LD_INT 4
39304: PLUS
39305: PUSH
39306: LD_VAR 0 2
39310: PUSH
39311: LD_INT 4
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: LIST
39318: PUSH
39319: LD_VAR 0 1
39323: PUSH
39324: LD_VAR 0 2
39328: PUSH
39329: LD_INT 3
39331: MINUS
39332: PUSH
39333: LD_INT 3
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: LIST
39340: PUSH
39341: LD_VAR 0 1
39345: PUSH
39346: LD_INT 4
39348: MINUS
39349: PUSH
39350: LD_VAR 0 2
39354: PUSH
39355: LD_INT 4
39357: MINUS
39358: PUSH
39359: LD_INT 2
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: LIST
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: ST_TO_ADDR
// end ; 5 :
39374: GO 39514
39376: LD_INT 5
39378: DOUBLE
39379: EQUAL
39380: IFTRUE 39384
39382: GO 39513
39384: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39385: LD_ADDR_VAR 0 5
39389: PUSH
39390: LD_VAR 0 1
39394: PUSH
39395: LD_INT 4
39397: MINUS
39398: PUSH
39399: LD_VAR 0 2
39403: PUSH
39404: LD_INT 1
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: LIST
39411: PUSH
39412: LD_VAR 0 1
39416: PUSH
39417: LD_VAR 0 2
39421: PUSH
39422: LD_INT 4
39424: MINUS
39425: PUSH
39426: LD_INT 3
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: LIST
39433: PUSH
39434: LD_VAR 0 1
39438: PUSH
39439: LD_INT 4
39441: PLUS
39442: PUSH
39443: LD_VAR 0 2
39447: PUSH
39448: LD_INT 4
39450: PLUS
39451: PUSH
39452: LD_INT 5
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: LIST
39459: PUSH
39460: LD_VAR 0 1
39464: PUSH
39465: LD_INT 3
39467: PLUS
39468: PUSH
39469: LD_VAR 0 2
39473: PUSH
39474: LD_INT 4
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: LIST
39481: PUSH
39482: LD_VAR 0 1
39486: PUSH
39487: LD_VAR 0 2
39491: PUSH
39492: LD_INT 3
39494: PLUS
39495: PUSH
39496: LD_INT 0
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: LIST
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: ST_TO_ADDR
// end ; end ;
39511: GO 39514
39513: POP
// result := list ;
39514: LD_ADDR_VAR 0 4
39518: PUSH
39519: LD_VAR 0 5
39523: ST_TO_ADDR
// end ;
39524: LD_VAR 0 4
39528: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39529: LD_INT 0
39531: PPUSH
39532: PPUSH
39533: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39534: LD_VAR 0 1
39538: NOT
39539: PUSH
39540: LD_VAR 0 2
39544: PUSH
39545: LD_INT 1
39547: PUSH
39548: LD_INT 2
39550: PUSH
39551: LD_INT 3
39553: PUSH
39554: LD_INT 4
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: IN
39563: NOT
39564: OR
39565: IFFALSE 39569
// exit ;
39567: GO 39661
// tmp := [ ] ;
39569: LD_ADDR_VAR 0 5
39573: PUSH
39574: EMPTY
39575: ST_TO_ADDR
// for i in units do
39576: LD_ADDR_VAR 0 4
39580: PUSH
39581: LD_VAR 0 1
39585: PUSH
39586: FOR_IN
39587: IFFALSE 39630
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
39589: LD_ADDR_VAR 0 5
39593: PUSH
39594: LD_VAR 0 5
39598: PPUSH
39599: LD_VAR 0 5
39603: PUSH
39604: LD_INT 1
39606: PLUS
39607: PPUSH
39608: LD_VAR 0 4
39612: PPUSH
39613: LD_VAR 0 2
39617: PPUSH
39618: CALL_OW 259
39622: PPUSH
39623: CALL_OW 2
39627: ST_TO_ADDR
39628: GO 39586
39630: POP
39631: POP
// if not tmp then
39632: LD_VAR 0 5
39636: NOT
39637: IFFALSE 39641
// exit ;
39639: GO 39661
// result := SortListByListDesc ( units , tmp ) ;
39641: LD_ADDR_VAR 0 3
39645: PUSH
39646: LD_VAR 0 1
39650: PPUSH
39651: LD_VAR 0 5
39655: PPUSH
39656: CALL_OW 77
39660: ST_TO_ADDR
// end ;
39661: LD_VAR 0 3
39665: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39666: LD_INT 0
39668: PPUSH
39669: PPUSH
39670: PPUSH
// result := false ;
39671: LD_ADDR_VAR 0 3
39675: PUSH
39676: LD_INT 0
39678: ST_TO_ADDR
// x := GetX ( building ) ;
39679: LD_ADDR_VAR 0 4
39683: PUSH
39684: LD_VAR 0 2
39688: PPUSH
39689: CALL_OW 250
39693: ST_TO_ADDR
// y := GetY ( building ) ;
39694: LD_ADDR_VAR 0 5
39698: PUSH
39699: LD_VAR 0 2
39703: PPUSH
39704: CALL_OW 251
39708: ST_TO_ADDR
// if not building or not x or not y then
39709: LD_VAR 0 2
39713: NOT
39714: PUSH
39715: LD_VAR 0 4
39719: NOT
39720: OR
39721: PUSH
39722: LD_VAR 0 5
39726: NOT
39727: OR
39728: IFFALSE 39732
// exit ;
39730: GO 39824
// if GetTaskList ( unit ) then
39732: LD_VAR 0 1
39736: PPUSH
39737: CALL_OW 437
39741: IFFALSE 39824
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39743: LD_STRING e
39745: PUSH
39746: LD_VAR 0 1
39750: PPUSH
39751: CALL_OW 437
39755: PUSH
39756: LD_INT 1
39758: ARRAY
39759: PUSH
39760: LD_INT 1
39762: ARRAY
39763: EQUAL
39764: PUSH
39765: LD_VAR 0 4
39769: PUSH
39770: LD_VAR 0 1
39774: PPUSH
39775: CALL_OW 437
39779: PUSH
39780: LD_INT 1
39782: ARRAY
39783: PUSH
39784: LD_INT 2
39786: ARRAY
39787: EQUAL
39788: AND
39789: PUSH
39790: LD_VAR 0 5
39794: PUSH
39795: LD_VAR 0 1
39799: PPUSH
39800: CALL_OW 437
39804: PUSH
39805: LD_INT 1
39807: ARRAY
39808: PUSH
39809: LD_INT 3
39811: ARRAY
39812: EQUAL
39813: AND
39814: IFFALSE 39824
// result := true end ;
39816: LD_ADDR_VAR 0 3
39820: PUSH
39821: LD_INT 1
39823: ST_TO_ADDR
// end ;
39824: LD_VAR 0 3
39828: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39829: LD_INT 0
39831: PPUSH
// result := false ;
39832: LD_ADDR_VAR 0 4
39836: PUSH
39837: LD_INT 0
39839: ST_TO_ADDR
// if GetTaskList ( unit ) then
39840: LD_VAR 0 1
39844: PPUSH
39845: CALL_OW 437
39849: IFFALSE 39932
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39851: LD_STRING M
39853: PUSH
39854: LD_VAR 0 1
39858: PPUSH
39859: CALL_OW 437
39863: PUSH
39864: LD_INT 1
39866: ARRAY
39867: PUSH
39868: LD_INT 1
39870: ARRAY
39871: EQUAL
39872: PUSH
39873: LD_VAR 0 2
39877: PUSH
39878: LD_VAR 0 1
39882: PPUSH
39883: CALL_OW 437
39887: PUSH
39888: LD_INT 1
39890: ARRAY
39891: PUSH
39892: LD_INT 2
39894: ARRAY
39895: EQUAL
39896: AND
39897: PUSH
39898: LD_VAR 0 3
39902: PUSH
39903: LD_VAR 0 1
39907: PPUSH
39908: CALL_OW 437
39912: PUSH
39913: LD_INT 1
39915: ARRAY
39916: PUSH
39917: LD_INT 3
39919: ARRAY
39920: EQUAL
39921: AND
39922: IFFALSE 39932
// result := true ;
39924: LD_ADDR_VAR 0 4
39928: PUSH
39929: LD_INT 1
39931: ST_TO_ADDR
// end ; end ;
39932: LD_VAR 0 4
39936: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39937: LD_INT 0
39939: PPUSH
39940: PPUSH
39941: PPUSH
39942: PPUSH
// if not unit or not area then
39943: LD_VAR 0 1
39947: NOT
39948: PUSH
39949: LD_VAR 0 2
39953: NOT
39954: OR
39955: IFFALSE 39959
// exit ;
39957: GO 40123
// tmp := AreaToList ( area , i ) ;
39959: LD_ADDR_VAR 0 6
39963: PUSH
39964: LD_VAR 0 2
39968: PPUSH
39969: LD_VAR 0 5
39973: PPUSH
39974: CALL_OW 517
39978: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39979: LD_ADDR_VAR 0 5
39983: PUSH
39984: DOUBLE
39985: LD_INT 1
39987: DEC
39988: ST_TO_ADDR
39989: LD_VAR 0 6
39993: PUSH
39994: LD_INT 1
39996: ARRAY
39997: PUSH
39998: FOR_TO
39999: IFFALSE 40121
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
40001: LD_ADDR_VAR 0 7
40005: PUSH
40006: LD_VAR 0 6
40010: PUSH
40011: LD_INT 1
40013: ARRAY
40014: PUSH
40015: LD_VAR 0 5
40019: ARRAY
40020: PUSH
40021: LD_VAR 0 6
40025: PUSH
40026: LD_INT 2
40028: ARRAY
40029: PUSH
40030: LD_VAR 0 5
40034: ARRAY
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
40040: LD_VAR 0 7
40044: PUSH
40045: LD_INT 1
40047: ARRAY
40048: PPUSH
40049: LD_VAR 0 7
40053: PUSH
40054: LD_INT 2
40056: ARRAY
40057: PPUSH
40058: CALL_OW 428
40062: PUSH
40063: LD_INT 0
40065: EQUAL
40066: IFFALSE 40119
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
40068: LD_VAR 0 1
40072: PPUSH
40073: LD_VAR 0 7
40077: PUSH
40078: LD_INT 1
40080: ARRAY
40081: PPUSH
40082: LD_VAR 0 7
40086: PUSH
40087: LD_INT 2
40089: ARRAY
40090: PPUSH
40091: LD_VAR 0 3
40095: PPUSH
40096: CALL_OW 48
// result := IsPlaced ( unit ) ;
40100: LD_ADDR_VAR 0 4
40104: PUSH
40105: LD_VAR 0 1
40109: PPUSH
40110: CALL_OW 305
40114: ST_TO_ADDR
// exit ;
40115: POP
40116: POP
40117: GO 40123
// end ; end ;
40119: GO 39998
40121: POP
40122: POP
// end ;
40123: LD_VAR 0 4
40127: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40128: LD_INT 0
40130: PPUSH
40131: PPUSH
40132: PPUSH
// if not side or side > 8 then
40133: LD_VAR 0 1
40137: NOT
40138: PUSH
40139: LD_VAR 0 1
40143: PUSH
40144: LD_INT 8
40146: GREATER
40147: OR
40148: IFFALSE 40152
// exit ;
40150: GO 40339
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40152: LD_ADDR_VAR 0 4
40156: PUSH
40157: LD_INT 22
40159: PUSH
40160: LD_VAR 0 1
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 21
40171: PUSH
40172: LD_INT 3
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PPUSH
40183: CALL_OW 69
40187: ST_TO_ADDR
// if not tmp then
40188: LD_VAR 0 4
40192: NOT
40193: IFFALSE 40197
// exit ;
40195: GO 40339
// enable_addtolog := true ;
40197: LD_ADDR_OWVAR 81
40201: PUSH
40202: LD_INT 1
40204: ST_TO_ADDR
// AddToLog ( [ ) ;
40205: LD_STRING [
40207: PPUSH
40208: CALL_OW 561
// for i in tmp do
40212: LD_ADDR_VAR 0 3
40216: PUSH
40217: LD_VAR 0 4
40221: PUSH
40222: FOR_IN
40223: IFFALSE 40330
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
40225: LD_STRING [
40227: PUSH
40228: LD_VAR 0 3
40232: PPUSH
40233: CALL_OW 266
40237: STR
40238: PUSH
40239: LD_STRING , 
40241: STR
40242: PUSH
40243: LD_VAR 0 3
40247: PPUSH
40248: CALL_OW 250
40252: STR
40253: PUSH
40254: LD_STRING , 
40256: STR
40257: PUSH
40258: LD_VAR 0 3
40262: PPUSH
40263: CALL_OW 251
40267: STR
40268: PUSH
40269: LD_STRING , 
40271: STR
40272: PUSH
40273: LD_VAR 0 3
40277: PPUSH
40278: CALL_OW 254
40282: STR
40283: PUSH
40284: LD_STRING , 
40286: STR
40287: PUSH
40288: LD_VAR 0 3
40292: PPUSH
40293: LD_INT 1
40295: PPUSH
40296: CALL_OW 268
40300: STR
40301: PUSH
40302: LD_STRING , 
40304: STR
40305: PUSH
40306: LD_VAR 0 3
40310: PPUSH
40311: LD_INT 2
40313: PPUSH
40314: CALL_OW 268
40318: STR
40319: PUSH
40320: LD_STRING ],
40322: STR
40323: PPUSH
40324: CALL_OW 561
// end ;
40328: GO 40222
40330: POP
40331: POP
// AddToLog ( ]; ) ;
40332: LD_STRING ];
40334: PPUSH
40335: CALL_OW 561
// end ;
40339: LD_VAR 0 2
40343: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40344: LD_INT 0
40346: PPUSH
40347: PPUSH
40348: PPUSH
40349: PPUSH
40350: PPUSH
// if not area or not rate or not max then
40351: LD_VAR 0 1
40355: NOT
40356: PUSH
40357: LD_VAR 0 2
40361: NOT
40362: OR
40363: PUSH
40364: LD_VAR 0 4
40368: NOT
40369: OR
40370: IFFALSE 40374
// exit ;
40372: GO 40563
// while 1 do
40374: LD_INT 1
40376: IFFALSE 40563
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40378: LD_ADDR_VAR 0 9
40382: PUSH
40383: LD_VAR 0 1
40387: PPUSH
40388: LD_INT 1
40390: PPUSH
40391: CALL_OW 287
40395: PUSH
40396: LD_INT 10
40398: MUL
40399: ST_TO_ADDR
// r := rate / 10 ;
40400: LD_ADDR_VAR 0 7
40404: PUSH
40405: LD_VAR 0 2
40409: PUSH
40410: LD_INT 10
40412: DIVREAL
40413: ST_TO_ADDR
// time := 1 1$00 ;
40414: LD_ADDR_VAR 0 8
40418: PUSH
40419: LD_INT 2100
40421: ST_TO_ADDR
// if amount < min then
40422: LD_VAR 0 9
40426: PUSH
40427: LD_VAR 0 3
40431: LESS
40432: IFFALSE 40450
// r := r * 2 else
40434: LD_ADDR_VAR 0 7
40438: PUSH
40439: LD_VAR 0 7
40443: PUSH
40444: LD_INT 2
40446: MUL
40447: ST_TO_ADDR
40448: GO 40476
// if amount > max then
40450: LD_VAR 0 9
40454: PUSH
40455: LD_VAR 0 4
40459: GREATER
40460: IFFALSE 40476
// r := r / 2 ;
40462: LD_ADDR_VAR 0 7
40466: PUSH
40467: LD_VAR 0 7
40471: PUSH
40472: LD_INT 2
40474: DIVREAL
40475: ST_TO_ADDR
// time := time / r ;
40476: LD_ADDR_VAR 0 8
40480: PUSH
40481: LD_VAR 0 8
40485: PUSH
40486: LD_VAR 0 7
40490: DIVREAL
40491: ST_TO_ADDR
// if time < 0 then
40492: LD_VAR 0 8
40496: PUSH
40497: LD_INT 0
40499: LESS
40500: IFFALSE 40517
// time := time * - 1 ;
40502: LD_ADDR_VAR 0 8
40506: PUSH
40507: LD_VAR 0 8
40511: PUSH
40512: LD_INT 1
40514: NEG
40515: MUL
40516: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40517: LD_VAR 0 8
40521: PUSH
40522: LD_INT 35
40524: PPUSH
40525: LD_INT 875
40527: PPUSH
40528: CALL_OW 12
40532: PLUS
40533: PPUSH
40534: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40538: LD_INT 1
40540: PPUSH
40541: LD_INT 5
40543: PPUSH
40544: CALL_OW 12
40548: PPUSH
40549: LD_VAR 0 1
40553: PPUSH
40554: LD_INT 1
40556: PPUSH
40557: CALL_OW 55
// end ;
40561: GO 40374
// end ;
40563: LD_VAR 0 5
40567: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40568: LD_INT 0
40570: PPUSH
40571: PPUSH
40572: PPUSH
40573: PPUSH
40574: PPUSH
40575: PPUSH
40576: PPUSH
40577: PPUSH
// if not turrets or not factories then
40578: LD_VAR 0 1
40582: NOT
40583: PUSH
40584: LD_VAR 0 2
40588: NOT
40589: OR
40590: IFFALSE 40594
// exit ;
40592: GO 40901
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40594: LD_ADDR_VAR 0 10
40598: PUSH
40599: LD_INT 5
40601: PUSH
40602: LD_INT 6
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 2
40611: PUSH
40612: LD_INT 4
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 3
40621: PUSH
40622: LD_INT 5
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 24
40636: PUSH
40637: LD_INT 25
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 23
40646: PUSH
40647: LD_INT 27
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PUSH
40658: LD_INT 42
40660: PUSH
40661: LD_INT 43
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 44
40670: PUSH
40671: LD_INT 46
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: LD_INT 45
40680: PUSH
40681: LD_INT 47
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: LIST
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: LIST
40697: ST_TO_ADDR
// result := [ ] ;
40698: LD_ADDR_VAR 0 3
40702: PUSH
40703: EMPTY
40704: ST_TO_ADDR
// for i in turrets do
40705: LD_ADDR_VAR 0 4
40709: PUSH
40710: LD_VAR 0 1
40714: PUSH
40715: FOR_IN
40716: IFFALSE 40899
// begin nat := GetNation ( i ) ;
40718: LD_ADDR_VAR 0 7
40722: PUSH
40723: LD_VAR 0 4
40727: PPUSH
40728: CALL_OW 248
40732: ST_TO_ADDR
// weapon := 0 ;
40733: LD_ADDR_VAR 0 8
40737: PUSH
40738: LD_INT 0
40740: ST_TO_ADDR
// if not nat then
40741: LD_VAR 0 7
40745: NOT
40746: IFFALSE 40750
// continue ;
40748: GO 40715
// for j in list [ nat ] do
40750: LD_ADDR_VAR 0 5
40754: PUSH
40755: LD_VAR 0 10
40759: PUSH
40760: LD_VAR 0 7
40764: ARRAY
40765: PUSH
40766: FOR_IN
40767: IFFALSE 40808
// if GetBWeapon ( i ) = j [ 1 ] then
40769: LD_VAR 0 4
40773: PPUSH
40774: CALL_OW 269
40778: PUSH
40779: LD_VAR 0 5
40783: PUSH
40784: LD_INT 1
40786: ARRAY
40787: EQUAL
40788: IFFALSE 40806
// begin weapon := j [ 2 ] ;
40790: LD_ADDR_VAR 0 8
40794: PUSH
40795: LD_VAR 0 5
40799: PUSH
40800: LD_INT 2
40802: ARRAY
40803: ST_TO_ADDR
// break ;
40804: GO 40808
// end ;
40806: GO 40766
40808: POP
40809: POP
// if not weapon then
40810: LD_VAR 0 8
40814: NOT
40815: IFFALSE 40819
// continue ;
40817: GO 40715
// for k in factories do
40819: LD_ADDR_VAR 0 6
40823: PUSH
40824: LD_VAR 0 2
40828: PUSH
40829: FOR_IN
40830: IFFALSE 40895
// begin weapons := AvailableWeaponList ( k ) ;
40832: LD_ADDR_VAR 0 9
40836: PUSH
40837: LD_VAR 0 6
40841: PPUSH
40842: CALL_OW 478
40846: ST_TO_ADDR
// if not weapons then
40847: LD_VAR 0 9
40851: NOT
40852: IFFALSE 40856
// continue ;
40854: GO 40829
// if weapon in weapons then
40856: LD_VAR 0 8
40860: PUSH
40861: LD_VAR 0 9
40865: IN
40866: IFFALSE 40893
// begin result := [ i , weapon ] ;
40868: LD_ADDR_VAR 0 3
40872: PUSH
40873: LD_VAR 0 4
40877: PUSH
40878: LD_VAR 0 8
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: ST_TO_ADDR
// exit ;
40887: POP
40888: POP
40889: POP
40890: POP
40891: GO 40901
// end ; end ;
40893: GO 40829
40895: POP
40896: POP
// end ;
40897: GO 40715
40899: POP
40900: POP
// end ;
40901: LD_VAR 0 3
40905: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40906: LD_INT 0
40908: PPUSH
// if not side or side > 8 then
40909: LD_VAR 0 3
40913: NOT
40914: PUSH
40915: LD_VAR 0 3
40919: PUSH
40920: LD_INT 8
40922: GREATER
40923: OR
40924: IFFALSE 40928
// exit ;
40926: GO 40987
// if not range then
40928: LD_VAR 0 4
40932: NOT
40933: IFFALSE 40944
// range := - 12 ;
40935: LD_ADDR_VAR 0 4
40939: PUSH
40940: LD_INT 12
40942: NEG
40943: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40944: LD_VAR 0 1
40948: PPUSH
40949: LD_VAR 0 2
40953: PPUSH
40954: LD_VAR 0 3
40958: PPUSH
40959: LD_VAR 0 4
40963: PPUSH
40964: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40968: LD_VAR 0 1
40972: PPUSH
40973: LD_VAR 0 2
40977: PPUSH
40978: LD_VAR 0 3
40982: PPUSH
40983: CALL_OW 331
// end ;
40987: LD_VAR 0 5
40991: RET
// export function Video ( mode ) ; begin
40992: LD_INT 0
40994: PPUSH
// ingame_video = mode ;
40995: LD_ADDR_OWVAR 52
40999: PUSH
41000: LD_VAR 0 1
41004: ST_TO_ADDR
// interface_hidden = mode ;
41005: LD_ADDR_OWVAR 54
41009: PUSH
41010: LD_VAR 0 1
41014: ST_TO_ADDR
// end ;
41015: LD_VAR 0 2
41019: RET
// export function Join ( array , element ) ; begin
41020: LD_INT 0
41022: PPUSH
// result := Replace ( array , array + 1 , element ) ;
41023: LD_ADDR_VAR 0 3
41027: PUSH
41028: LD_VAR 0 1
41032: PPUSH
41033: LD_VAR 0 1
41037: PUSH
41038: LD_INT 1
41040: PLUS
41041: PPUSH
41042: LD_VAR 0 2
41046: PPUSH
41047: CALL_OW 1
41051: ST_TO_ADDR
// end ;
41052: LD_VAR 0 3
41056: RET
// export function JoinUnion ( array , element ) ; begin
41057: LD_INT 0
41059: PPUSH
// result := array union element ;
41060: LD_ADDR_VAR 0 3
41064: PUSH
41065: LD_VAR 0 1
41069: PUSH
41070: LD_VAR 0 2
41074: UNION
41075: ST_TO_ADDR
// end ;
41076: LD_VAR 0 3
41080: RET
// export function GetBehemoths ( side ) ; begin
41081: LD_INT 0
41083: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
41084: LD_ADDR_VAR 0 2
41088: PUSH
41089: LD_INT 22
41091: PUSH
41092: LD_VAR 0 1
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 31
41103: PUSH
41104: LD_INT 25
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PPUSH
41115: CALL_OW 69
41119: ST_TO_ADDR
// end ;
41120: LD_VAR 0 2
41124: RET
// export function Shuffle ( array ) ; var i , index ; begin
41125: LD_INT 0
41127: PPUSH
41128: PPUSH
41129: PPUSH
// result := [ ] ;
41130: LD_ADDR_VAR 0 2
41134: PUSH
41135: EMPTY
41136: ST_TO_ADDR
// if not array then
41137: LD_VAR 0 1
41141: NOT
41142: IFFALSE 41146
// exit ;
41144: GO 41245
// Randomize ;
41146: CALL_OW 10
// for i = array downto 1 do
41150: LD_ADDR_VAR 0 3
41154: PUSH
41155: DOUBLE
41156: LD_VAR 0 1
41160: INC
41161: ST_TO_ADDR
41162: LD_INT 1
41164: PUSH
41165: FOR_DOWNTO
41166: IFFALSE 41243
// begin index := rand ( 1 , array ) ;
41168: LD_ADDR_VAR 0 4
41172: PUSH
41173: LD_INT 1
41175: PPUSH
41176: LD_VAR 0 1
41180: PPUSH
41181: CALL_OW 12
41185: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41186: LD_ADDR_VAR 0 2
41190: PUSH
41191: LD_VAR 0 2
41195: PPUSH
41196: LD_VAR 0 2
41200: PUSH
41201: LD_INT 1
41203: PLUS
41204: PPUSH
41205: LD_VAR 0 1
41209: PUSH
41210: LD_VAR 0 4
41214: ARRAY
41215: PPUSH
41216: CALL_OW 2
41220: ST_TO_ADDR
// array := Delete ( array , index ) ;
41221: LD_ADDR_VAR 0 1
41225: PUSH
41226: LD_VAR 0 1
41230: PPUSH
41231: LD_VAR 0 4
41235: PPUSH
41236: CALL_OW 3
41240: ST_TO_ADDR
// end ;
41241: GO 41165
41243: POP
41244: POP
// end ;
41245: LD_VAR 0 2
41249: RET
// export function GetBaseMaterials ( base ) ; begin
41250: LD_INT 0
41252: PPUSH
// result := [ 0 , 0 , 0 ] ;
41253: LD_ADDR_VAR 0 2
41257: PUSH
41258: LD_INT 0
41260: PUSH
41261: LD_INT 0
41263: PUSH
41264: LD_INT 0
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: LIST
41271: ST_TO_ADDR
// if not base then
41272: LD_VAR 0 1
41276: NOT
41277: IFFALSE 41281
// exit ;
41279: GO 41330
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
41281: LD_ADDR_VAR 0 2
41285: PUSH
41286: LD_VAR 0 1
41290: PPUSH
41291: LD_INT 1
41293: PPUSH
41294: CALL_OW 275
41298: PUSH
41299: LD_VAR 0 1
41303: PPUSH
41304: LD_INT 2
41306: PPUSH
41307: CALL_OW 275
41311: PUSH
41312: LD_VAR 0 1
41316: PPUSH
41317: LD_INT 3
41319: PPUSH
41320: CALL_OW 275
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: LIST
41329: ST_TO_ADDR
// end ;
41330: LD_VAR 0 2
41334: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41335: LD_INT 0
41337: PPUSH
41338: PPUSH
// result := array ;
41339: LD_ADDR_VAR 0 3
41343: PUSH
41344: LD_VAR 0 1
41348: ST_TO_ADDR
// if size >= result then
41349: LD_VAR 0 2
41353: PUSH
41354: LD_VAR 0 3
41358: GREATEREQUAL
41359: IFFALSE 41363
// exit ;
41361: GO 41413
// if size then
41363: LD_VAR 0 2
41367: IFFALSE 41413
// for i := array downto size do
41369: LD_ADDR_VAR 0 4
41373: PUSH
41374: DOUBLE
41375: LD_VAR 0 1
41379: INC
41380: ST_TO_ADDR
41381: LD_VAR 0 2
41385: PUSH
41386: FOR_DOWNTO
41387: IFFALSE 41411
// result := Delete ( result , result ) ;
41389: LD_ADDR_VAR 0 3
41393: PUSH
41394: LD_VAR 0 3
41398: PPUSH
41399: LD_VAR 0 3
41403: PPUSH
41404: CALL_OW 3
41408: ST_TO_ADDR
41409: GO 41386
41411: POP
41412: POP
// end ;
41413: LD_VAR 0 3
41417: RET
// export function ComExit ( unit ) ; var tmp ; begin
41418: LD_INT 0
41420: PPUSH
41421: PPUSH
// if not IsInUnit ( unit ) then
41422: LD_VAR 0 1
41426: PPUSH
41427: CALL_OW 310
41431: NOT
41432: IFFALSE 41436
// exit ;
41434: GO 41496
// tmp := IsInUnit ( unit ) ;
41436: LD_ADDR_VAR 0 3
41440: PUSH
41441: LD_VAR 0 1
41445: PPUSH
41446: CALL_OW 310
41450: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41451: LD_VAR 0 3
41455: PPUSH
41456: CALL_OW 247
41460: PUSH
41461: LD_INT 2
41463: EQUAL
41464: IFFALSE 41477
// ComExitVehicle ( unit ) else
41466: LD_VAR 0 1
41470: PPUSH
41471: CALL_OW 121
41475: GO 41486
// ComExitBuilding ( unit ) ;
41477: LD_VAR 0 1
41481: PPUSH
41482: CALL_OW 122
// result := tmp ;
41486: LD_ADDR_VAR 0 2
41490: PUSH
41491: LD_VAR 0 3
41495: ST_TO_ADDR
// end ;
41496: LD_VAR 0 2
41500: RET
// export function ComExitAll ( units ) ; var i ; begin
41501: LD_INT 0
41503: PPUSH
41504: PPUSH
// if not units then
41505: LD_VAR 0 1
41509: NOT
41510: IFFALSE 41514
// exit ;
41512: GO 41540
// for i in units do
41514: LD_ADDR_VAR 0 3
41518: PUSH
41519: LD_VAR 0 1
41523: PUSH
41524: FOR_IN
41525: IFFALSE 41538
// ComExit ( i ) ;
41527: LD_VAR 0 3
41531: PPUSH
41532: CALL 41418 0 1
41536: GO 41524
41538: POP
41539: POP
// end ;
41540: LD_VAR 0 2
41544: RET
// export function ResetHc ; begin
41545: LD_INT 0
41547: PPUSH
// InitHc ;
41548: CALL_OW 19
// hc_importance := 0 ;
41552: LD_ADDR_OWVAR 32
41556: PUSH
41557: LD_INT 0
41559: ST_TO_ADDR
// end ;
41560: LD_VAR 0 1
41564: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41565: LD_INT 0
41567: PPUSH
41568: PPUSH
41569: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41570: LD_ADDR_VAR 0 6
41574: PUSH
41575: LD_VAR 0 1
41579: PUSH
41580: LD_VAR 0 3
41584: PLUS
41585: PUSH
41586: LD_INT 2
41588: DIV
41589: ST_TO_ADDR
// if _x < 0 then
41590: LD_VAR 0 6
41594: PUSH
41595: LD_INT 0
41597: LESS
41598: IFFALSE 41615
// _x := _x * - 1 ;
41600: LD_ADDR_VAR 0 6
41604: PUSH
41605: LD_VAR 0 6
41609: PUSH
41610: LD_INT 1
41612: NEG
41613: MUL
41614: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41615: LD_ADDR_VAR 0 7
41619: PUSH
41620: LD_VAR 0 2
41624: PUSH
41625: LD_VAR 0 4
41629: PLUS
41630: PUSH
41631: LD_INT 2
41633: DIV
41634: ST_TO_ADDR
// if _y < 0 then
41635: LD_VAR 0 7
41639: PUSH
41640: LD_INT 0
41642: LESS
41643: IFFALSE 41660
// _y := _y * - 1 ;
41645: LD_ADDR_VAR 0 7
41649: PUSH
41650: LD_VAR 0 7
41654: PUSH
41655: LD_INT 1
41657: NEG
41658: MUL
41659: ST_TO_ADDR
// result := [ _x , _y ] ;
41660: LD_ADDR_VAR 0 5
41664: PUSH
41665: LD_VAR 0 6
41669: PUSH
41670: LD_VAR 0 7
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: ST_TO_ADDR
// end ;
41679: LD_VAR 0 5
41683: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41684: LD_INT 0
41686: PPUSH
41687: PPUSH
41688: PPUSH
41689: PPUSH
// task := GetTaskList ( unit ) ;
41690: LD_ADDR_VAR 0 7
41694: PUSH
41695: LD_VAR 0 1
41699: PPUSH
41700: CALL_OW 437
41704: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41705: LD_VAR 0 7
41709: NOT
41710: PUSH
41711: LD_VAR 0 1
41715: PPUSH
41716: LD_VAR 0 2
41720: PPUSH
41721: CALL_OW 308
41725: NOT
41726: AND
41727: IFFALSE 41731
// exit ;
41729: GO 41849
// if IsInArea ( unit , area ) then
41731: LD_VAR 0 1
41735: PPUSH
41736: LD_VAR 0 2
41740: PPUSH
41741: CALL_OW 308
41745: IFFALSE 41763
// begin ComMoveToArea ( unit , goAway ) ;
41747: LD_VAR 0 1
41751: PPUSH
41752: LD_VAR 0 3
41756: PPUSH
41757: CALL_OW 113
// exit ;
41761: GO 41849
// end ; if task [ 1 ] [ 1 ] <> M then
41763: LD_VAR 0 7
41767: PUSH
41768: LD_INT 1
41770: ARRAY
41771: PUSH
41772: LD_INT 1
41774: ARRAY
41775: PUSH
41776: LD_STRING M
41778: NONEQUAL
41779: IFFALSE 41783
// exit ;
41781: GO 41849
// x := task [ 1 ] [ 2 ] ;
41783: LD_ADDR_VAR 0 5
41787: PUSH
41788: LD_VAR 0 7
41792: PUSH
41793: LD_INT 1
41795: ARRAY
41796: PUSH
41797: LD_INT 2
41799: ARRAY
41800: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41801: LD_ADDR_VAR 0 6
41805: PUSH
41806: LD_VAR 0 7
41810: PUSH
41811: LD_INT 1
41813: ARRAY
41814: PUSH
41815: LD_INT 3
41817: ARRAY
41818: ST_TO_ADDR
// if InArea ( x , y , area ) then
41819: LD_VAR 0 5
41823: PPUSH
41824: LD_VAR 0 6
41828: PPUSH
41829: LD_VAR 0 2
41833: PPUSH
41834: CALL_OW 309
41838: IFFALSE 41849
// ComStop ( unit ) ;
41840: LD_VAR 0 1
41844: PPUSH
41845: CALL_OW 141
// end ;
41849: LD_VAR 0 4
41853: RET
// export function Abs ( value ) ; begin
41854: LD_INT 0
41856: PPUSH
// result := value ;
41857: LD_ADDR_VAR 0 2
41861: PUSH
41862: LD_VAR 0 1
41866: ST_TO_ADDR
// if value < 0 then
41867: LD_VAR 0 1
41871: PUSH
41872: LD_INT 0
41874: LESS
41875: IFFALSE 41892
// result := value * - 1 ;
41877: LD_ADDR_VAR 0 2
41881: PUSH
41882: LD_VAR 0 1
41886: PUSH
41887: LD_INT 1
41889: NEG
41890: MUL
41891: ST_TO_ADDR
// end ;
41892: LD_VAR 0 2
41896: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41897: LD_INT 0
41899: PPUSH
41900: PPUSH
41901: PPUSH
41902: PPUSH
41903: PPUSH
41904: PPUSH
41905: PPUSH
41906: PPUSH
// if not unit or not building then
41907: LD_VAR 0 1
41911: NOT
41912: PUSH
41913: LD_VAR 0 2
41917: NOT
41918: OR
41919: IFFALSE 41923
// exit ;
41921: GO 42149
// x := GetX ( building ) ;
41923: LD_ADDR_VAR 0 4
41927: PUSH
41928: LD_VAR 0 2
41932: PPUSH
41933: CALL_OW 250
41937: ST_TO_ADDR
// y := GetY ( building ) ;
41938: LD_ADDR_VAR 0 6
41942: PUSH
41943: LD_VAR 0 2
41947: PPUSH
41948: CALL_OW 251
41952: ST_TO_ADDR
// d := GetDir ( building ) ;
41953: LD_ADDR_VAR 0 8
41957: PUSH
41958: LD_VAR 0 2
41962: PPUSH
41963: CALL_OW 254
41967: ST_TO_ADDR
// r := 4 ;
41968: LD_ADDR_VAR 0 9
41972: PUSH
41973: LD_INT 4
41975: ST_TO_ADDR
// for i := 1 to 5 do
41976: LD_ADDR_VAR 0 10
41980: PUSH
41981: DOUBLE
41982: LD_INT 1
41984: DEC
41985: ST_TO_ADDR
41986: LD_INT 5
41988: PUSH
41989: FOR_TO
41990: IFFALSE 42147
// begin _x := ShiftX ( x , d , r + i ) ;
41992: LD_ADDR_VAR 0 5
41996: PUSH
41997: LD_VAR 0 4
42001: PPUSH
42002: LD_VAR 0 8
42006: PPUSH
42007: LD_VAR 0 9
42011: PUSH
42012: LD_VAR 0 10
42016: PLUS
42017: PPUSH
42018: CALL_OW 272
42022: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
42023: LD_ADDR_VAR 0 7
42027: PUSH
42028: LD_VAR 0 6
42032: PPUSH
42033: LD_VAR 0 8
42037: PPUSH
42038: LD_VAR 0 9
42042: PUSH
42043: LD_VAR 0 10
42047: PLUS
42048: PPUSH
42049: CALL_OW 273
42053: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
42054: LD_VAR 0 5
42058: PPUSH
42059: LD_VAR 0 7
42063: PPUSH
42064: CALL_OW 488
42068: PUSH
42069: LD_VAR 0 5
42073: PPUSH
42074: LD_VAR 0 7
42078: PPUSH
42079: CALL_OW 428
42083: PPUSH
42084: CALL_OW 247
42088: PUSH
42089: LD_INT 3
42091: PUSH
42092: LD_INT 2
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: IN
42099: NOT
42100: AND
42101: IFFALSE 42145
// begin ComMoveXY ( unit , _x , _y ) ;
42103: LD_VAR 0 1
42107: PPUSH
42108: LD_VAR 0 5
42112: PPUSH
42113: LD_VAR 0 7
42117: PPUSH
42118: CALL_OW 111
// result := [ _x , _y ] ;
42122: LD_ADDR_VAR 0 3
42126: PUSH
42127: LD_VAR 0 5
42131: PUSH
42132: LD_VAR 0 7
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: ST_TO_ADDR
// exit ;
42141: POP
42142: POP
42143: GO 42149
// end ; end ;
42145: GO 41989
42147: POP
42148: POP
// end ;
42149: LD_VAR 0 3
42153: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42154: LD_INT 0
42156: PPUSH
42157: PPUSH
42158: PPUSH
// result := 0 ;
42159: LD_ADDR_VAR 0 3
42163: PUSH
42164: LD_INT 0
42166: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42167: LD_VAR 0 1
42171: PUSH
42172: LD_INT 0
42174: LESS
42175: PUSH
42176: LD_VAR 0 1
42180: PUSH
42181: LD_INT 8
42183: GREATER
42184: OR
42185: PUSH
42186: LD_VAR 0 2
42190: PUSH
42191: LD_INT 0
42193: LESS
42194: OR
42195: PUSH
42196: LD_VAR 0 2
42200: PUSH
42201: LD_INT 8
42203: GREATER
42204: OR
42205: IFFALSE 42209
// exit ;
42207: GO 42284
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
42209: LD_ADDR_VAR 0 4
42213: PUSH
42214: LD_INT 22
42216: PUSH
42217: LD_VAR 0 2
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PPUSH
42226: CALL_OW 69
42230: PUSH
42231: FOR_IN
42232: IFFALSE 42282
// begin un := UnitShoot ( i ) ;
42234: LD_ADDR_VAR 0 5
42238: PUSH
42239: LD_VAR 0 4
42243: PPUSH
42244: CALL_OW 504
42248: ST_TO_ADDR
// if GetSide ( un ) = side1 then
42249: LD_VAR 0 5
42253: PPUSH
42254: CALL_OW 255
42258: PUSH
42259: LD_VAR 0 1
42263: EQUAL
42264: IFFALSE 42280
// begin result := un ;
42266: LD_ADDR_VAR 0 3
42270: PUSH
42271: LD_VAR 0 5
42275: ST_TO_ADDR
// exit ;
42276: POP
42277: POP
42278: GO 42284
// end ; end ;
42280: GO 42231
42282: POP
42283: POP
// end ;
42284: LD_VAR 0 3
42288: RET
// export function GetCargoBay ( units ) ; begin
42289: LD_INT 0
42291: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42292: LD_ADDR_VAR 0 2
42296: PUSH
42297: LD_VAR 0 1
42301: PPUSH
42302: LD_INT 2
42304: PUSH
42305: LD_INT 34
42307: PUSH
42308: LD_INT 12
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 34
42317: PUSH
42318: LD_INT 51
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 34
42327: PUSH
42328: LD_INT 32
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 34
42337: PUSH
42338: LD_INT 89
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: PPUSH
42352: CALL_OW 72
42356: ST_TO_ADDR
// end ;
42357: LD_VAR 0 2
42361: RET
// export function Negate ( value ) ; begin
42362: LD_INT 0
42364: PPUSH
// result := not value ;
42365: LD_ADDR_VAR 0 2
42369: PUSH
42370: LD_VAR 0 1
42374: NOT
42375: ST_TO_ADDR
// end ;
42376: LD_VAR 0 2
42380: RET
// export function Inc ( value ) ; begin
42381: LD_INT 0
42383: PPUSH
// result := value + 1 ;
42384: LD_ADDR_VAR 0 2
42388: PUSH
42389: LD_VAR 0 1
42393: PUSH
42394: LD_INT 1
42396: PLUS
42397: ST_TO_ADDR
// end ;
42398: LD_VAR 0 2
42402: RET
// export function Dec ( value ) ; begin
42403: LD_INT 0
42405: PPUSH
// result := value - 1 ;
42406: LD_ADDR_VAR 0 2
42410: PUSH
42411: LD_VAR 0 1
42415: PUSH
42416: LD_INT 1
42418: MINUS
42419: ST_TO_ADDR
// end ;
42420: LD_VAR 0 2
42424: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42425: LD_INT 0
42427: PPUSH
42428: PPUSH
42429: PPUSH
42430: PPUSH
42431: PPUSH
42432: PPUSH
42433: PPUSH
42434: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42435: LD_VAR 0 1
42439: PPUSH
42440: LD_VAR 0 2
42444: PPUSH
42445: CALL_OW 488
42449: NOT
42450: PUSH
42451: LD_VAR 0 3
42455: PPUSH
42456: LD_VAR 0 4
42460: PPUSH
42461: CALL_OW 488
42465: NOT
42466: OR
42467: IFFALSE 42480
// begin result := - 1 ;
42469: LD_ADDR_VAR 0 5
42473: PUSH
42474: LD_INT 1
42476: NEG
42477: ST_TO_ADDR
// exit ;
42478: GO 42715
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42480: LD_ADDR_VAR 0 12
42484: PUSH
42485: LD_VAR 0 1
42489: PPUSH
42490: LD_VAR 0 2
42494: PPUSH
42495: LD_VAR 0 3
42499: PPUSH
42500: LD_VAR 0 4
42504: PPUSH
42505: CALL 41565 0 4
42509: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42510: LD_ADDR_VAR 0 11
42514: PUSH
42515: LD_VAR 0 1
42519: PPUSH
42520: LD_VAR 0 2
42524: PPUSH
42525: LD_VAR 0 12
42529: PUSH
42530: LD_INT 1
42532: ARRAY
42533: PPUSH
42534: LD_VAR 0 12
42538: PUSH
42539: LD_INT 2
42541: ARRAY
42542: PPUSH
42543: CALL_OW 298
42547: ST_TO_ADDR
// distance := 9999 ;
42548: LD_ADDR_VAR 0 10
42552: PUSH
42553: LD_INT 9999
42555: ST_TO_ADDR
// for i := 0 to 5 do
42556: LD_ADDR_VAR 0 6
42560: PUSH
42561: DOUBLE
42562: LD_INT 0
42564: DEC
42565: ST_TO_ADDR
42566: LD_INT 5
42568: PUSH
42569: FOR_TO
42570: IFFALSE 42713
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42572: LD_ADDR_VAR 0 7
42576: PUSH
42577: LD_VAR 0 1
42581: PPUSH
42582: LD_VAR 0 6
42586: PPUSH
42587: LD_VAR 0 11
42591: PPUSH
42592: CALL_OW 272
42596: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42597: LD_ADDR_VAR 0 8
42601: PUSH
42602: LD_VAR 0 2
42606: PPUSH
42607: LD_VAR 0 6
42611: PPUSH
42612: LD_VAR 0 11
42616: PPUSH
42617: CALL_OW 273
42621: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42622: LD_VAR 0 7
42626: PPUSH
42627: LD_VAR 0 8
42631: PPUSH
42632: CALL_OW 488
42636: NOT
42637: IFFALSE 42641
// continue ;
42639: GO 42569
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42641: LD_ADDR_VAR 0 9
42645: PUSH
42646: LD_VAR 0 12
42650: PUSH
42651: LD_INT 1
42653: ARRAY
42654: PPUSH
42655: LD_VAR 0 12
42659: PUSH
42660: LD_INT 2
42662: ARRAY
42663: PPUSH
42664: LD_VAR 0 7
42668: PPUSH
42669: LD_VAR 0 8
42673: PPUSH
42674: CALL_OW 298
42678: ST_TO_ADDR
// if tmp < distance then
42679: LD_VAR 0 9
42683: PUSH
42684: LD_VAR 0 10
42688: LESS
42689: IFFALSE 42711
// begin result := i ;
42691: LD_ADDR_VAR 0 5
42695: PUSH
42696: LD_VAR 0 6
42700: ST_TO_ADDR
// distance := tmp ;
42701: LD_ADDR_VAR 0 10
42705: PUSH
42706: LD_VAR 0 9
42710: ST_TO_ADDR
// end ; end ;
42711: GO 42569
42713: POP
42714: POP
// end ;
42715: LD_VAR 0 5
42719: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42720: LD_INT 0
42722: PPUSH
42723: PPUSH
// if not driver or not IsInUnit ( driver ) then
42724: LD_VAR 0 1
42728: NOT
42729: PUSH
42730: LD_VAR 0 1
42734: PPUSH
42735: CALL_OW 310
42739: NOT
42740: OR
42741: IFFALSE 42745
// exit ;
42743: GO 42835
// vehicle := IsInUnit ( driver ) ;
42745: LD_ADDR_VAR 0 3
42749: PUSH
42750: LD_VAR 0 1
42754: PPUSH
42755: CALL_OW 310
42759: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42760: LD_VAR 0 1
42764: PPUSH
42765: LD_STRING \
42767: PUSH
42768: LD_INT 0
42770: PUSH
42771: LD_INT 0
42773: PUSH
42774: LD_INT 0
42776: PUSH
42777: LD_INT 0
42779: PUSH
42780: LD_INT 0
42782: PUSH
42783: LD_INT 0
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: PUSH
42795: LD_STRING E
42797: PUSH
42798: LD_INT 0
42800: PUSH
42801: LD_INT 0
42803: PUSH
42804: LD_VAR 0 3
42808: PUSH
42809: LD_INT 0
42811: PUSH
42812: LD_INT 0
42814: PUSH
42815: LD_INT 0
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PPUSH
42831: CALL_OW 446
// end ;
42835: LD_VAR 0 2
42839: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42840: LD_INT 0
42842: PPUSH
42843: PPUSH
// if not driver or not IsInUnit ( driver ) then
42844: LD_VAR 0 1
42848: NOT
42849: PUSH
42850: LD_VAR 0 1
42854: PPUSH
42855: CALL_OW 310
42859: NOT
42860: OR
42861: IFFALSE 42865
// exit ;
42863: GO 42955
// vehicle := IsInUnit ( driver ) ;
42865: LD_ADDR_VAR 0 3
42869: PUSH
42870: LD_VAR 0 1
42874: PPUSH
42875: CALL_OW 310
42879: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42880: LD_VAR 0 1
42884: PPUSH
42885: LD_STRING \
42887: PUSH
42888: LD_INT 0
42890: PUSH
42891: LD_INT 0
42893: PUSH
42894: LD_INT 0
42896: PUSH
42897: LD_INT 0
42899: PUSH
42900: LD_INT 0
42902: PUSH
42903: LD_INT 0
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: PUSH
42915: LD_STRING E
42917: PUSH
42918: LD_INT 0
42920: PUSH
42921: LD_INT 0
42923: PUSH
42924: LD_VAR 0 3
42928: PUSH
42929: LD_INT 0
42931: PUSH
42932: LD_INT 0
42934: PUSH
42935: LD_INT 0
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PPUSH
42951: CALL_OW 447
// end ;
42955: LD_VAR 0 2
42959: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42960: LD_INT 0
42962: PPUSH
42963: PPUSH
42964: PPUSH
// tmp := [ ] ;
42965: LD_ADDR_VAR 0 5
42969: PUSH
42970: EMPTY
42971: ST_TO_ADDR
// for i in units do
42972: LD_ADDR_VAR 0 4
42976: PUSH
42977: LD_VAR 0 1
42981: PUSH
42982: FOR_IN
42983: IFFALSE 43021
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42985: LD_ADDR_VAR 0 5
42989: PUSH
42990: LD_VAR 0 5
42994: PPUSH
42995: LD_VAR 0 5
42999: PUSH
43000: LD_INT 1
43002: PLUS
43003: PPUSH
43004: LD_VAR 0 4
43008: PPUSH
43009: CALL_OW 256
43013: PPUSH
43014: CALL_OW 2
43018: ST_TO_ADDR
43019: GO 42982
43021: POP
43022: POP
// if not tmp then
43023: LD_VAR 0 5
43027: NOT
43028: IFFALSE 43032
// exit ;
43030: GO 43080
// if asc then
43032: LD_VAR 0 2
43036: IFFALSE 43060
// result := SortListByListAsc ( units , tmp ) else
43038: LD_ADDR_VAR 0 3
43042: PUSH
43043: LD_VAR 0 1
43047: PPUSH
43048: LD_VAR 0 5
43052: PPUSH
43053: CALL_OW 76
43057: ST_TO_ADDR
43058: GO 43080
// result := SortListByListDesc ( units , tmp ) ;
43060: LD_ADDR_VAR 0 3
43064: PUSH
43065: LD_VAR 0 1
43069: PPUSH
43070: LD_VAR 0 5
43074: PPUSH
43075: CALL_OW 77
43079: ST_TO_ADDR
// end ;
43080: LD_VAR 0 3
43084: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43085: LD_INT 0
43087: PPUSH
43088: PPUSH
// task := GetTaskList ( mech ) ;
43089: LD_ADDR_VAR 0 4
43093: PUSH
43094: LD_VAR 0 1
43098: PPUSH
43099: CALL_OW 437
43103: ST_TO_ADDR
// if not task then
43104: LD_VAR 0 4
43108: NOT
43109: IFFALSE 43113
// exit ;
43111: GO 43155
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43113: LD_ADDR_VAR 0 3
43117: PUSH
43118: LD_VAR 0 4
43122: PUSH
43123: LD_INT 1
43125: ARRAY
43126: PUSH
43127: LD_INT 1
43129: ARRAY
43130: PUSH
43131: LD_STRING r
43133: EQUAL
43134: PUSH
43135: LD_VAR 0 4
43139: PUSH
43140: LD_INT 1
43142: ARRAY
43143: PUSH
43144: LD_INT 4
43146: ARRAY
43147: PUSH
43148: LD_VAR 0 2
43152: EQUAL
43153: AND
43154: ST_TO_ADDR
// end ;
43155: LD_VAR 0 3
43159: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
43160: LD_INT 0
43162: PPUSH
// SetDir ( unit , d ) ;
43163: LD_VAR 0 1
43167: PPUSH
43168: LD_VAR 0 4
43172: PPUSH
43173: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
43177: LD_VAR 0 1
43181: PPUSH
43182: LD_VAR 0 2
43186: PPUSH
43187: LD_VAR 0 3
43191: PPUSH
43192: LD_VAR 0 5
43196: PPUSH
43197: CALL_OW 48
// end ;
43201: LD_VAR 0 6
43205: RET
// export function ToNaturalNumber ( number ) ; begin
43206: LD_INT 0
43208: PPUSH
// result := number div 1 ;
43209: LD_ADDR_VAR 0 2
43213: PUSH
43214: LD_VAR 0 1
43218: PUSH
43219: LD_INT 1
43221: DIV
43222: ST_TO_ADDR
// if number < 0 then
43223: LD_VAR 0 1
43227: PUSH
43228: LD_INT 0
43230: LESS
43231: IFFALSE 43241
// result := 0 ;
43233: LD_ADDR_VAR 0 2
43237: PUSH
43238: LD_INT 0
43240: ST_TO_ADDR
// end ;
43241: LD_VAR 0 2
43245: RET
// export function SortByClass ( units , class ) ; var un ; begin
43246: LD_INT 0
43248: PPUSH
43249: PPUSH
// if not units or not class then
43250: LD_VAR 0 1
43254: NOT
43255: PUSH
43256: LD_VAR 0 2
43260: NOT
43261: OR
43262: IFFALSE 43266
// exit ;
43264: GO 43361
// result := [ ] ;
43266: LD_ADDR_VAR 0 3
43270: PUSH
43271: EMPTY
43272: ST_TO_ADDR
// for un in units do
43273: LD_ADDR_VAR 0 4
43277: PUSH
43278: LD_VAR 0 1
43282: PUSH
43283: FOR_IN
43284: IFFALSE 43359
// if GetClass ( un ) = class then
43286: LD_VAR 0 4
43290: PPUSH
43291: CALL_OW 257
43295: PUSH
43296: LD_VAR 0 2
43300: EQUAL
43301: IFFALSE 43328
// result := Insert ( result , 1 , un ) else
43303: LD_ADDR_VAR 0 3
43307: PUSH
43308: LD_VAR 0 3
43312: PPUSH
43313: LD_INT 1
43315: PPUSH
43316: LD_VAR 0 4
43320: PPUSH
43321: CALL_OW 2
43325: ST_TO_ADDR
43326: GO 43357
// result := Replace ( result , result + 1 , un ) ;
43328: LD_ADDR_VAR 0 3
43332: PUSH
43333: LD_VAR 0 3
43337: PPUSH
43338: LD_VAR 0 3
43342: PUSH
43343: LD_INT 1
43345: PLUS
43346: PPUSH
43347: LD_VAR 0 4
43351: PPUSH
43352: CALL_OW 1
43356: ST_TO_ADDR
43357: GO 43283
43359: POP
43360: POP
// end ;
43361: LD_VAR 0 3
43365: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43366: LD_INT 0
43368: PPUSH
43369: PPUSH
43370: PPUSH
43371: PPUSH
43372: PPUSH
43373: PPUSH
43374: PPUSH
// result := [ ] ;
43375: LD_ADDR_VAR 0 4
43379: PUSH
43380: EMPTY
43381: ST_TO_ADDR
// if x - r < 0 then
43382: LD_VAR 0 1
43386: PUSH
43387: LD_VAR 0 3
43391: MINUS
43392: PUSH
43393: LD_INT 0
43395: LESS
43396: IFFALSE 43408
// min_x := 0 else
43398: LD_ADDR_VAR 0 8
43402: PUSH
43403: LD_INT 0
43405: ST_TO_ADDR
43406: GO 43424
// min_x := x - r ;
43408: LD_ADDR_VAR 0 8
43412: PUSH
43413: LD_VAR 0 1
43417: PUSH
43418: LD_VAR 0 3
43422: MINUS
43423: ST_TO_ADDR
// if y - r < 0 then
43424: LD_VAR 0 2
43428: PUSH
43429: LD_VAR 0 3
43433: MINUS
43434: PUSH
43435: LD_INT 0
43437: LESS
43438: IFFALSE 43450
// min_y := 0 else
43440: LD_ADDR_VAR 0 7
43444: PUSH
43445: LD_INT 0
43447: ST_TO_ADDR
43448: GO 43466
// min_y := y - r ;
43450: LD_ADDR_VAR 0 7
43454: PUSH
43455: LD_VAR 0 2
43459: PUSH
43460: LD_VAR 0 3
43464: MINUS
43465: ST_TO_ADDR
// max_x := x + r ;
43466: LD_ADDR_VAR 0 9
43470: PUSH
43471: LD_VAR 0 1
43475: PUSH
43476: LD_VAR 0 3
43480: PLUS
43481: ST_TO_ADDR
// max_y := y + r ;
43482: LD_ADDR_VAR 0 10
43486: PUSH
43487: LD_VAR 0 2
43491: PUSH
43492: LD_VAR 0 3
43496: PLUS
43497: ST_TO_ADDR
// for _x = min_x to max_x do
43498: LD_ADDR_VAR 0 5
43502: PUSH
43503: DOUBLE
43504: LD_VAR 0 8
43508: DEC
43509: ST_TO_ADDR
43510: LD_VAR 0 9
43514: PUSH
43515: FOR_TO
43516: IFFALSE 43617
// for _y = min_y to max_y do
43518: LD_ADDR_VAR 0 6
43522: PUSH
43523: DOUBLE
43524: LD_VAR 0 7
43528: DEC
43529: ST_TO_ADDR
43530: LD_VAR 0 10
43534: PUSH
43535: FOR_TO
43536: IFFALSE 43613
// begin if not ValidHex ( _x , _y ) then
43538: LD_VAR 0 5
43542: PPUSH
43543: LD_VAR 0 6
43547: PPUSH
43548: CALL_OW 488
43552: NOT
43553: IFFALSE 43557
// continue ;
43555: GO 43535
// if GetResourceTypeXY ( _x , _y ) then
43557: LD_VAR 0 5
43561: PPUSH
43562: LD_VAR 0 6
43566: PPUSH
43567: CALL_OW 283
43571: IFFALSE 43611
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43573: LD_ADDR_VAR 0 4
43577: PUSH
43578: LD_VAR 0 4
43582: PPUSH
43583: LD_VAR 0 4
43587: PUSH
43588: LD_INT 1
43590: PLUS
43591: PPUSH
43592: LD_VAR 0 5
43596: PUSH
43597: LD_VAR 0 6
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PPUSH
43606: CALL_OW 1
43610: ST_TO_ADDR
// end ;
43611: GO 43535
43613: POP
43614: POP
43615: GO 43515
43617: POP
43618: POP
// end ;
43619: LD_VAR 0 4
43623: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43624: LD_INT 0
43626: PPUSH
43627: PPUSH
43628: PPUSH
43629: PPUSH
43630: PPUSH
43631: PPUSH
43632: PPUSH
43633: PPUSH
// if not units then
43634: LD_VAR 0 1
43638: NOT
43639: IFFALSE 43643
// exit ;
43641: GO 44167
// result := UnitFilter ( units , [ f_ok ] ) ;
43643: LD_ADDR_VAR 0 3
43647: PUSH
43648: LD_VAR 0 1
43652: PPUSH
43653: LD_INT 50
43655: PUSH
43656: EMPTY
43657: LIST
43658: PPUSH
43659: CALL_OW 72
43663: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43664: LD_ADDR_VAR 0 8
43668: PUSH
43669: LD_VAR 0 1
43673: PUSH
43674: LD_INT 1
43676: ARRAY
43677: PPUSH
43678: CALL_OW 255
43682: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43683: LD_ADDR_VAR 0 10
43687: PUSH
43688: LD_INT 29
43690: PUSH
43691: LD_INT 91
43693: PUSH
43694: LD_INT 49
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: LIST
43701: ST_TO_ADDR
// if not result then
43702: LD_VAR 0 3
43706: NOT
43707: IFFALSE 43711
// exit ;
43709: GO 44167
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43711: LD_ADDR_VAR 0 5
43715: PUSH
43716: LD_INT 81
43718: PUSH
43719: LD_VAR 0 8
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PPUSH
43728: CALL_OW 69
43732: ST_TO_ADDR
// for i in result do
43733: LD_ADDR_VAR 0 4
43737: PUSH
43738: LD_VAR 0 3
43742: PUSH
43743: FOR_IN
43744: IFFALSE 44165
// begin tag := GetTag ( i ) + 1 ;
43746: LD_ADDR_VAR 0 9
43750: PUSH
43751: LD_VAR 0 4
43755: PPUSH
43756: CALL_OW 110
43760: PUSH
43761: LD_INT 1
43763: PLUS
43764: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
43765: LD_ADDR_VAR 0 7
43769: PUSH
43770: LD_VAR 0 4
43774: PPUSH
43775: CALL_OW 250
43779: PPUSH
43780: LD_VAR 0 4
43784: PPUSH
43785: CALL_OW 251
43789: PPUSH
43790: LD_INT 6
43792: PPUSH
43793: CALL 43366 0 3
43797: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
43798: LD_VAR 0 4
43802: PPUSH
43803: CALL_OW 247
43807: PUSH
43808: LD_INT 2
43810: EQUAL
43811: PUSH
43812: LD_VAR 0 7
43816: AND
43817: PUSH
43818: LD_VAR 0 4
43822: PPUSH
43823: CALL_OW 264
43827: PUSH
43828: LD_VAR 0 10
43832: IN
43833: NOT
43834: AND
43835: IFFALSE 43874
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43837: LD_VAR 0 4
43841: PPUSH
43842: LD_VAR 0 7
43846: PUSH
43847: LD_INT 1
43849: ARRAY
43850: PUSH
43851: LD_INT 1
43853: ARRAY
43854: PPUSH
43855: LD_VAR 0 7
43859: PUSH
43860: LD_INT 1
43862: ARRAY
43863: PUSH
43864: LD_INT 2
43866: ARRAY
43867: PPUSH
43868: CALL_OW 116
43872: GO 44163
// if path > tag then
43874: LD_VAR 0 2
43878: PUSH
43879: LD_VAR 0 9
43883: GREATER
43884: IFFALSE 44092
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43886: LD_ADDR_VAR 0 6
43890: PUSH
43891: LD_VAR 0 5
43895: PPUSH
43896: LD_INT 91
43898: PUSH
43899: LD_VAR 0 4
43903: PUSH
43904: LD_INT 8
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: LIST
43911: PPUSH
43912: CALL_OW 72
43916: ST_TO_ADDR
// if nearEnemy then
43917: LD_VAR 0 6
43921: IFFALSE 43990
// begin if GetWeapon ( i ) = ru_time_lapser then
43923: LD_VAR 0 4
43927: PPUSH
43928: CALL_OW 264
43932: PUSH
43933: LD_INT 49
43935: EQUAL
43936: IFFALSE 43964
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43938: LD_VAR 0 4
43942: PPUSH
43943: LD_VAR 0 6
43947: PPUSH
43948: LD_VAR 0 4
43952: PPUSH
43953: CALL_OW 74
43957: PPUSH
43958: CALL_OW 112
43962: GO 43988
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43964: LD_VAR 0 4
43968: PPUSH
43969: LD_VAR 0 6
43973: PPUSH
43974: LD_VAR 0 4
43978: PPUSH
43979: CALL_OW 74
43983: PPUSH
43984: CALL_OW 115
// end else
43988: GO 44090
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43990: LD_VAR 0 4
43994: PPUSH
43995: LD_VAR 0 2
43999: PUSH
44000: LD_VAR 0 9
44004: ARRAY
44005: PUSH
44006: LD_INT 1
44008: ARRAY
44009: PPUSH
44010: LD_VAR 0 2
44014: PUSH
44015: LD_VAR 0 9
44019: ARRAY
44020: PUSH
44021: LD_INT 2
44023: ARRAY
44024: PPUSH
44025: CALL_OW 297
44029: PUSH
44030: LD_INT 6
44032: GREATER
44033: IFFALSE 44076
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
44035: LD_VAR 0 4
44039: PPUSH
44040: LD_VAR 0 2
44044: PUSH
44045: LD_VAR 0 9
44049: ARRAY
44050: PUSH
44051: LD_INT 1
44053: ARRAY
44054: PPUSH
44055: LD_VAR 0 2
44059: PUSH
44060: LD_VAR 0 9
44064: ARRAY
44065: PUSH
44066: LD_INT 2
44068: ARRAY
44069: PPUSH
44070: CALL_OW 114
44074: GO 44090
// SetTag ( i , tag ) ;
44076: LD_VAR 0 4
44080: PPUSH
44081: LD_VAR 0 9
44085: PPUSH
44086: CALL_OW 109
// end else
44090: GO 44163
// if enemy then
44092: LD_VAR 0 5
44096: IFFALSE 44163
// begin if GetWeapon ( i ) = ru_time_lapser then
44098: LD_VAR 0 4
44102: PPUSH
44103: CALL_OW 264
44107: PUSH
44108: LD_INT 49
44110: EQUAL
44111: IFFALSE 44139
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
44113: LD_VAR 0 4
44117: PPUSH
44118: LD_VAR 0 5
44122: PPUSH
44123: LD_VAR 0 4
44127: PPUSH
44128: CALL_OW 74
44132: PPUSH
44133: CALL_OW 112
44137: GO 44163
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
44139: LD_VAR 0 4
44143: PPUSH
44144: LD_VAR 0 5
44148: PPUSH
44149: LD_VAR 0 4
44153: PPUSH
44154: CALL_OW 74
44158: PPUSH
44159: CALL_OW 115
// end ; end ;
44163: GO 43743
44165: POP
44166: POP
// end ;
44167: LD_VAR 0 3
44171: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
44172: LD_INT 0
44174: PPUSH
44175: PPUSH
44176: PPUSH
// if not unit or IsInUnit ( unit ) then
44177: LD_VAR 0 1
44181: NOT
44182: PUSH
44183: LD_VAR 0 1
44187: PPUSH
44188: CALL_OW 310
44192: OR
44193: IFFALSE 44197
// exit ;
44195: GO 44288
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
44197: LD_ADDR_VAR 0 4
44201: PUSH
44202: LD_VAR 0 1
44206: PPUSH
44207: CALL_OW 250
44211: PPUSH
44212: LD_VAR 0 2
44216: PPUSH
44217: LD_INT 1
44219: PPUSH
44220: CALL_OW 272
44224: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
44225: LD_ADDR_VAR 0 5
44229: PUSH
44230: LD_VAR 0 1
44234: PPUSH
44235: CALL_OW 251
44239: PPUSH
44240: LD_VAR 0 2
44244: PPUSH
44245: LD_INT 1
44247: PPUSH
44248: CALL_OW 273
44252: ST_TO_ADDR
// if ValidHex ( x , y ) then
44253: LD_VAR 0 4
44257: PPUSH
44258: LD_VAR 0 5
44262: PPUSH
44263: CALL_OW 488
44267: IFFALSE 44288
// ComTurnXY ( unit , x , y ) ;
44269: LD_VAR 0 1
44273: PPUSH
44274: LD_VAR 0 4
44278: PPUSH
44279: LD_VAR 0 5
44283: PPUSH
44284: CALL_OW 118
// end ;
44288: LD_VAR 0 3
44292: RET
// export function SeeUnits ( side , units ) ; var i ; begin
44293: LD_INT 0
44295: PPUSH
44296: PPUSH
// result := false ;
44297: LD_ADDR_VAR 0 3
44301: PUSH
44302: LD_INT 0
44304: ST_TO_ADDR
// if not units then
44305: LD_VAR 0 2
44309: NOT
44310: IFFALSE 44314
// exit ;
44312: GO 44359
// for i in units do
44314: LD_ADDR_VAR 0 4
44318: PUSH
44319: LD_VAR 0 2
44323: PUSH
44324: FOR_IN
44325: IFFALSE 44357
// if See ( side , i ) then
44327: LD_VAR 0 1
44331: PPUSH
44332: LD_VAR 0 4
44336: PPUSH
44337: CALL_OW 292
44341: IFFALSE 44355
// begin result := true ;
44343: LD_ADDR_VAR 0 3
44347: PUSH
44348: LD_INT 1
44350: ST_TO_ADDR
// exit ;
44351: POP
44352: POP
44353: GO 44359
// end ;
44355: GO 44324
44357: POP
44358: POP
// end ;
44359: LD_VAR 0 3
44363: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44364: LD_INT 0
44366: PPUSH
44367: PPUSH
44368: PPUSH
44369: PPUSH
// if not unit or not points then
44370: LD_VAR 0 1
44374: NOT
44375: PUSH
44376: LD_VAR 0 2
44380: NOT
44381: OR
44382: IFFALSE 44386
// exit ;
44384: GO 44476
// dist := 99999 ;
44386: LD_ADDR_VAR 0 5
44390: PUSH
44391: LD_INT 99999
44393: ST_TO_ADDR
// for i in points do
44394: LD_ADDR_VAR 0 4
44398: PUSH
44399: LD_VAR 0 2
44403: PUSH
44404: FOR_IN
44405: IFFALSE 44474
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44407: LD_ADDR_VAR 0 6
44411: PUSH
44412: LD_VAR 0 1
44416: PPUSH
44417: LD_VAR 0 4
44421: PUSH
44422: LD_INT 1
44424: ARRAY
44425: PPUSH
44426: LD_VAR 0 4
44430: PUSH
44431: LD_INT 2
44433: ARRAY
44434: PPUSH
44435: CALL_OW 297
44439: ST_TO_ADDR
// if tmpDist < dist then
44440: LD_VAR 0 6
44444: PUSH
44445: LD_VAR 0 5
44449: LESS
44450: IFFALSE 44472
// begin result := i ;
44452: LD_ADDR_VAR 0 3
44456: PUSH
44457: LD_VAR 0 4
44461: ST_TO_ADDR
// dist := tmpDist ;
44462: LD_ADDR_VAR 0 5
44466: PUSH
44467: LD_VAR 0 6
44471: ST_TO_ADDR
// end ; end ;
44472: GO 44404
44474: POP
44475: POP
// end ;
44476: LD_VAR 0 3
44480: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44481: LD_INT 0
44483: PPUSH
// uc_side := side ;
44484: LD_ADDR_OWVAR 20
44488: PUSH
44489: LD_VAR 0 1
44493: ST_TO_ADDR
// uc_nation := 3 ;
44494: LD_ADDR_OWVAR 21
44498: PUSH
44499: LD_INT 3
44501: ST_TO_ADDR
// vc_chassis := 25 ;
44502: LD_ADDR_OWVAR 37
44506: PUSH
44507: LD_INT 25
44509: ST_TO_ADDR
// vc_engine := engine_siberite ;
44510: LD_ADDR_OWVAR 39
44514: PUSH
44515: LD_INT 3
44517: ST_TO_ADDR
// vc_control := control_computer ;
44518: LD_ADDR_OWVAR 38
44522: PUSH
44523: LD_INT 3
44525: ST_TO_ADDR
// vc_weapon := 59 ;
44526: LD_ADDR_OWVAR 40
44530: PUSH
44531: LD_INT 59
44533: ST_TO_ADDR
// result := CreateVehicle ;
44534: LD_ADDR_VAR 0 5
44538: PUSH
44539: CALL_OW 45
44543: ST_TO_ADDR
// SetDir ( result , d ) ;
44544: LD_VAR 0 5
44548: PPUSH
44549: LD_VAR 0 4
44553: PPUSH
44554: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44558: LD_VAR 0 5
44562: PPUSH
44563: LD_VAR 0 2
44567: PPUSH
44568: LD_VAR 0 3
44572: PPUSH
44573: LD_INT 0
44575: PPUSH
44576: CALL_OW 48
// end ;
44580: LD_VAR 0 5
44584: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44585: LD_INT 0
44587: PPUSH
44588: PPUSH
44589: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44590: LD_ADDR_VAR 0 2
44594: PUSH
44595: LD_INT 0
44597: PUSH
44598: LD_INT 0
44600: PUSH
44601: LD_INT 0
44603: PUSH
44604: LD_INT 0
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44613: LD_VAR 0 1
44617: NOT
44618: PUSH
44619: LD_VAR 0 1
44623: PPUSH
44624: CALL_OW 264
44628: PUSH
44629: LD_INT 12
44631: PUSH
44632: LD_INT 51
44634: PUSH
44635: LD_INT 32
44637: PUSH
44638: LD_INT 89
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: IN
44647: NOT
44648: OR
44649: IFFALSE 44653
// exit ;
44651: GO 44751
// for i := 1 to 3 do
44653: LD_ADDR_VAR 0 3
44657: PUSH
44658: DOUBLE
44659: LD_INT 1
44661: DEC
44662: ST_TO_ADDR
44663: LD_INT 3
44665: PUSH
44666: FOR_TO
44667: IFFALSE 44749
// begin tmp := GetCargo ( cargo , i ) ;
44669: LD_ADDR_VAR 0 4
44673: PUSH
44674: LD_VAR 0 1
44678: PPUSH
44679: LD_VAR 0 3
44683: PPUSH
44684: CALL_OW 289
44688: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44689: LD_ADDR_VAR 0 2
44693: PUSH
44694: LD_VAR 0 2
44698: PPUSH
44699: LD_VAR 0 3
44703: PPUSH
44704: LD_VAR 0 4
44708: PPUSH
44709: CALL_OW 1
44713: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44714: LD_ADDR_VAR 0 2
44718: PUSH
44719: LD_VAR 0 2
44723: PPUSH
44724: LD_INT 4
44726: PPUSH
44727: LD_VAR 0 2
44731: PUSH
44732: LD_INT 4
44734: ARRAY
44735: PUSH
44736: LD_VAR 0 4
44740: PLUS
44741: PPUSH
44742: CALL_OW 1
44746: ST_TO_ADDR
// end ;
44747: GO 44666
44749: POP
44750: POP
// end ;
44751: LD_VAR 0 2
44755: RET
// export function Length ( array ) ; begin
44756: LD_INT 0
44758: PPUSH
// result := array + 0 ;
44759: LD_ADDR_VAR 0 2
44763: PUSH
44764: LD_VAR 0 1
44768: PUSH
44769: LD_INT 0
44771: PLUS
44772: ST_TO_ADDR
// end ;
44773: LD_VAR 0 2
44777: RET
// export function PrepareArray ( array ) ; begin
44778: LD_INT 0
44780: PPUSH
// result := array diff 0 ;
44781: LD_ADDR_VAR 0 2
44785: PUSH
44786: LD_VAR 0 1
44790: PUSH
44791: LD_INT 0
44793: DIFF
44794: ST_TO_ADDR
// if not result [ 1 ] then
44795: LD_VAR 0 2
44799: PUSH
44800: LD_INT 1
44802: ARRAY
44803: NOT
44804: IFFALSE 44824
// result := Delete ( result , 1 ) ;
44806: LD_ADDR_VAR 0 2
44810: PUSH
44811: LD_VAR 0 2
44815: PPUSH
44816: LD_INT 1
44818: PPUSH
44819: CALL_OW 3
44823: ST_TO_ADDR
// end ;
44824: LD_VAR 0 2
44828: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44829: LD_INT 0
44831: PPUSH
44832: PPUSH
44833: PPUSH
44834: PPUSH
// sibRocketRange := 25 ;
44835: LD_ADDR_VAR 0 6
44839: PUSH
44840: LD_INT 25
44842: ST_TO_ADDR
// result := false ;
44843: LD_ADDR_VAR 0 4
44847: PUSH
44848: LD_INT 0
44850: ST_TO_ADDR
// for i := 0 to 5 do
44851: LD_ADDR_VAR 0 5
44855: PUSH
44856: DOUBLE
44857: LD_INT 0
44859: DEC
44860: ST_TO_ADDR
44861: LD_INT 5
44863: PUSH
44864: FOR_TO
44865: IFFALSE 44932
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44867: LD_VAR 0 1
44871: PPUSH
44872: LD_VAR 0 5
44876: PPUSH
44877: LD_VAR 0 6
44881: PPUSH
44882: CALL_OW 272
44886: PPUSH
44887: LD_VAR 0 2
44891: PPUSH
44892: LD_VAR 0 5
44896: PPUSH
44897: LD_VAR 0 6
44901: PPUSH
44902: CALL_OW 273
44906: PPUSH
44907: LD_VAR 0 3
44911: PPUSH
44912: CALL_OW 309
44916: IFFALSE 44930
// begin result := true ;
44918: LD_ADDR_VAR 0 4
44922: PUSH
44923: LD_INT 1
44925: ST_TO_ADDR
// exit ;
44926: POP
44927: POP
44928: GO 44934
// end ;
44930: GO 44864
44932: POP
44933: POP
// end ;
44934: LD_VAR 0 4
44938: RET
