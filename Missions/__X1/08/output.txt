// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// PrepareArabian ;
   8: CALL 65 0 0
// PrepareRussian ;
  12: CALL 1514 0 0
// PrepareHeike ;
  16: CALL 614 0 0
// Action ;
  20: CALL 2694 0 0
// end ;
  24: END
// export debug , prefix , startAttackOnKabul , startAttackOnHeike ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// prefix := 07_ ;
  36: LD_ADDR_EXP 2
  40: PUSH
  41: LD_STRING 07_
  43: ST_TO_ADDR
// startAttackOnKabul := false ;
  44: LD_ADDR_EXP 3
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// startAttackOnHeike := false ;
  52: LD_ADDR_EXP 4
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// end ; end_of_file
  60: LD_VAR 0 1
  64: RET
// export function PrepareArabian ; var i , un , lives ; begin
  65: LD_INT 0
  67: PPUSH
  68: PPUSH
  69: PPUSH
  70: PPUSH
// SetBName ( ar_dep , newkabul ) ;
  71: LD_INT 2
  73: PPUSH
  74: LD_STRING newkabul
  76: PPUSH
  77: CALL_OW 500
// uc_side := 5 ;
  81: LD_ADDR_OWVAR 20
  85: PUSH
  86: LD_INT 5
  88: ST_TO_ADDR
// uc_nation := 2 ;
  89: LD_ADDR_OWVAR 21
  93: PUSH
  94: LD_INT 2
  96: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do
  97: LD_ADDR_VAR 0 2
 101: PUSH
 102: LD_INT 22
 104: PUSH
 105: LD_INT 2
 107: PUSH
 108: EMPTY
 109: LIST
 110: LIST
 111: PUSH
 112: LD_INT 21
 114: PUSH
 115: LD_INT 3
 117: PUSH
 118: EMPTY
 119: LIST
 120: LIST
 121: PUSH
 122: EMPTY
 123: LIST
 124: LIST
 125: PPUSH
 126: CALL_OW 69
 130: PUSH
 131: FOR_IN
 132: IFFALSE 266
// begin SetSide ( i , 5 ) ;
 134: LD_VAR 0 2
 138: PPUSH
 139: LD_INT 5
 141: PPUSH
 142: CALL_OW 235
// lives := rand ( 248 , 510 ) ;
 146: LD_ADDR_VAR 0 4
 150: PUSH
 151: LD_INT 248
 153: PPUSH
 154: LD_INT 510
 156: PPUSH
 157: CALL_OW 12
 161: ST_TO_ADDR
// SetLives ( i , lives ) ;
 162: LD_VAR 0 2
 166: PPUSH
 167: LD_VAR 0 4
 171: PPUSH
 172: CALL_OW 234
// if GetBType ( i ) = b_bunker then
 176: LD_VAR 0 2
 180: PPUSH
 181: CALL_OW 266
 185: PUSH
 186: LD_INT 32
 188: EQUAL
 189: IFFALSE 264
// begin PlaceWeaponTurret ( i , [ ar_double_machine_gun , ar_gun , ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] ) ;
 191: LD_VAR 0 2
 195: PPUSH
 196: LD_INT 24
 198: PUSH
 199: LD_INT 27
 201: PUSH
 202: LD_INT 25
 204: PUSH
 205: LD_INT 28
 207: PUSH
 208: EMPTY
 209: LIST
 210: LIST
 211: LIST
 212: LIST
 213: PUSH
 214: LD_INT 1
 216: PPUSH
 217: LD_INT 4
 219: PPUSH
 220: CALL_OW 12
 224: ARRAY
 225: PPUSH
 226: CALL_OW 431
// if lives > 250 then
 230: LD_VAR 0 4
 234: PUSH
 235: LD_INT 250
 237: GREATER
 238: IFFALSE 264
// begin PrepareSoldier ( false , 6 ) ;
 240: LD_INT 0
 242: PPUSH
 243: LD_INT 6
 245: PPUSH
 246: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
 250: CALL_OW 44
 254: PPUSH
 255: LD_VAR 0 2
 259: PPUSH
 260: CALL_OW 52
// end ; end ; end ;
 264: GO 131
 266: POP
 267: POP
// for i := 1 to 9 do
 268: LD_ADDR_VAR 0 2
 272: PUSH
 273: DOUBLE
 274: LD_INT 1
 276: DEC
 277: ST_TO_ADDR
 278: LD_INT 9
 280: PUSH
 281: FOR_TO
 282: IFFALSE 361
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 0 ) ;
 284: LD_INT 0
 286: PPUSH
 287: LD_INT 1
 289: PPUSH
 290: LD_INT 4
 292: PPUSH
 293: CALL_OW 12
 297: PPUSH
 298: LD_INT 0
 300: PPUSH
 301: CALL_OW 380
// un := CreateHuman ;
 305: LD_ADDR_VAR 0 3
 309: PUSH
 310: CALL_OW 44
 314: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 315: LD_VAR 0 3
 319: PPUSH
 320: LD_INT 0
 322: PPUSH
 323: LD_INT 5
 325: PPUSH
 326: CALL_OW 12
 330: PPUSH
 331: CALL_OW 233
// PlaceUnitArea ( un , kabulDeadArea , false ) ;
 335: LD_VAR 0 3
 339: PPUSH
 340: LD_INT 1
 342: PPUSH
 343: LD_INT 0
 345: PPUSH
 346: CALL_OW 49
// KillUnit ( un ) ;
 350: LD_VAR 0 3
 354: PPUSH
 355: CALL_OW 66
// end ;
 359: GO 281
 361: POP
 362: POP
// for i := 1 to 3 do
 363: LD_ADDR_VAR 0 2
 367: PUSH
 368: DOUBLE
 369: LD_INT 1
 371: DEC
 372: ST_TO_ADDR
 373: LD_INT 3
 375: PUSH
 376: FOR_TO
 377: IFFALSE 531
// begin vc_chassis := ar_medium_trike ;
 379: LD_ADDR_OWVAR 37
 383: PUSH
 384: LD_INT 13
 386: ST_TO_ADDR
// vc_engine := [ engine_solar , engine_combustion ] [ rand ( 1 , 2 ) ] ;
 387: LD_ADDR_OWVAR 39
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 1
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: PUSH
 402: LD_INT 1
 404: PPUSH
 405: LD_INT 2
 407: PPUSH
 408: CALL_OW 12
 412: ARRAY
 413: ST_TO_ADDR
// vc_control := [ control_manual , control_remote ] [ rand ( 1 , 2 ) ] ;
 414: LD_ADDR_OWVAR 38
 418: PUSH
 419: LD_INT 1
 421: PUSH
 422: LD_INT 2
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: PUSH
 429: LD_INT 1
 431: PPUSH
 432: LD_INT 2
 434: PPUSH
 435: CALL_OW 12
 439: ARRAY
 440: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_gatling_gun , ar_gun ] [ rand ( 1 , 3 ) ] ;
 441: LD_ADDR_OWVAR 40
 445: PUSH
 446: LD_INT 24
 448: PUSH
 449: LD_INT 25
 451: PUSH
 452: LD_INT 27
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: LIST
 459: PUSH
 460: LD_INT 1
 462: PPUSH
 463: LD_INT 3
 465: PPUSH
 466: CALL_OW 12
 470: ARRAY
 471: ST_TO_ADDR
// un := CreateVehicle ;
 472: LD_ADDR_VAR 0 3
 476: PUSH
 477: CALL_OW 45
 481: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 482: LD_VAR 0 3
 486: PPUSH
 487: LD_INT 0
 489: PPUSH
 490: LD_INT 5
 492: PPUSH
 493: CALL_OW 12
 497: PPUSH
 498: CALL_OW 233
// PlaceUnitArea ( un , kabulVDeadArea , false ) ;
 502: LD_VAR 0 3
 506: PPUSH
 507: LD_INT 2
 509: PPUSH
 510: LD_INT 0
 512: PPUSH
 513: CALL_OW 49
// SetLives ( un , 200 ) ;
 517: LD_VAR 0 3
 521: PPUSH
 522: LD_INT 200
 524: PPUSH
 525: CALL_OW 234
// end ;
 529: GO 376
 531: POP
 532: POP
// for i := 1 to 3 do
 533: LD_ADDR_VAR 0 2
 537: PUSH
 538: DOUBLE
 539: LD_INT 1
 541: DEC
 542: ST_TO_ADDR
 543: LD_INT 3
 545: PUSH
 546: FOR_TO
 547: IFFALSE 607
// begin PrepareSoldier ( false , 6 ) ;
 549: LD_INT 0
 551: PPUSH
 552: LD_INT 6
 554: PPUSH
 555: CALL_OW 381
// un := CreateHuman ;
 559: LD_ADDR_VAR 0 3
 563: PUSH
 564: CALL_OW 44
 568: ST_TO_ADDR
// PlaceUnitXYR ( un , 106 , 47 , 4 , false ) ;
 569: LD_VAR 0 3
 573: PPUSH
 574: LD_INT 106
 576: PPUSH
 577: LD_INT 47
 579: PPUSH
 580: LD_INT 4
 582: PPUSH
 583: LD_INT 0
 585: PPUSH
 586: CALL_OW 50
// ComAgressiveMove ( un , 71 , 53 ) ;
 590: LD_VAR 0 3
 594: PPUSH
 595: LD_INT 71
 597: PPUSH
 598: LD_INT 53
 600: PPUSH
 601: CALL_OW 114
// end ;
 605: GO 546
 607: POP
 608: POP
// end ;
 609: LD_VAR 0 1
 613: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad ; export function PrepareHeike ; var i , tmp , un , veh ; begin
 614: LD_INT 0
 616: PPUSH
 617: PPUSH
 618: PPUSH
 619: PPUSH
 620: PPUSH
// uc_side := 5 ;
 621: LD_ADDR_OWVAR 20
 625: PUSH
 626: LD_INT 5
 628: ST_TO_ADDR
// uc_nation := 1 ;
 629: LD_ADDR_OWVAR 21
 633: PUSH
 634: LD_INT 1
 636: ST_TO_ADDR
// americanSquad := [ ] ;
 637: LD_ADDR_EXP 17
 641: PUSH
 642: EMPTY
 643: ST_TO_ADDR
// if not americanSquad then
 644: LD_EXP 17
 648: NOT
 649: IFFALSE 714
// begin for i := 1 to 4 do
 651: LD_ADDR_VAR 0 2
 655: PUSH
 656: DOUBLE
 657: LD_INT 1
 659: DEC
 660: ST_TO_ADDR
 661: LD_INT 4
 663: PUSH
 664: FOR_TO
 665: IFFALSE 710
// begin PrepareHuman ( false , rand ( 2 , 4 ) , 6 ) ;
 667: LD_INT 0
 669: PPUSH
 670: LD_INT 2
 672: PPUSH
 673: LD_INT 4
 675: PPUSH
 676: CALL_OW 12
 680: PPUSH
 681: LD_INT 6
 683: PPUSH
 684: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 688: LD_ADDR_EXP 17
 692: PUSH
 693: LD_EXP 17
 697: PPUSH
 698: CALL_OW 44
 702: PPUSH
 703: CALL 40951 0 2
 707: ST_TO_ADDR
// end ;
 708: GO 664
 710: POP
 711: POP
// end else
 712: GO 765
// begin for i in americanSquad do
 714: LD_ADDR_VAR 0 2
 718: PUSH
 719: LD_EXP 17
 723: PUSH
 724: FOR_IN
 725: IFFALSE 763
// if GetClass ( i ) in [ class_sniper , class_soldier ] then
 727: LD_VAR 0 2
 731: PPUSH
 732: CALL_OW 257
 736: PUSH
 737: LD_INT 5
 739: PUSH
 740: LD_INT 1
 742: PUSH
 743: EMPTY
 744: LIST
 745: LIST
 746: IN
 747: IFFALSE 761
// SetClass ( i , class_engineer ) ;
 749: LD_VAR 0 2
 753: PPUSH
 754: LD_INT 2
 756: PPUSH
 757: CALL_OW 336
 761: GO 724
 763: POP
 764: POP
// end ; uc_side := 2 ;
 765: LD_ADDR_OWVAR 20
 769: PUSH
 770: LD_INT 2
 772: ST_TO_ADDR
// uc_nation := 2 ;
 773: LD_ADDR_OWVAR 21
 777: PUSH
 778: LD_INT 2
 780: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 781: LD_ADDR_EXP 5
 785: PUSH
 786: LD_STRING Heike
 788: PPUSH
 789: LD_EXP 1
 793: NOT
 794: PPUSH
 795: LD_EXP 2
 799: PPUSH
 800: CALL 3650 0 3
 804: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 805: LD_ADDR_EXP 8
 809: PUSH
 810: LD_STRING Ibrahim
 812: PPUSH
 813: LD_EXP 1
 817: NOT
 818: PPUSH
 819: LD_EXP 2
 823: PPUSH
 824: CALL 3650 0 3
 828: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 829: LD_ADDR_EXP 6
 833: PUSH
 834: LD_STRING Givi
 836: PPUSH
 837: LD_EXP 1
 841: NOT
 842: PPUSH
 843: LD_EXP 2
 847: PPUSH
 848: CALL 3650 0 3
 852: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 853: LD_ADDR_EXP 9
 857: PUSH
 858: LD_STRING Kamil
 860: PPUSH
 861: LD_EXP 1
 865: NOT
 866: PPUSH
 867: LD_EXP 2
 871: PPUSH
 872: CALL 3650 0 3
 876: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 877: LD_ADDR_EXP 10
 881: PUSH
 882: LD_STRING Kaia
 884: PPUSH
 885: LD_EXP 1
 889: NOT
 890: PPUSH
 891: LD_EXP 2
 895: PPUSH
 896: CALL 3650 0 3
 900: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 901: LD_ADDR_EXP 11
 905: PUSH
 906: LD_STRING Sophia
 908: PPUSH
 909: LD_EXP 1
 913: NOT
 914: PPUSH
 915: LD_EXP 2
 919: PPUSH
 920: CALL 3650 0 3
 924: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 925: LD_ADDR_EXP 12
 929: PUSH
 930: LD_STRING Markov
 932: PPUSH
 933: LD_EXP 1
 937: NOT
 938: PPUSH
 939: LD_EXP 2
 943: PPUSH
 944: CALL 3650 0 3
 948: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 949: LD_ADDR_EXP 15
 953: PUSH
 954: LD_STRING Aviradze
 956: PPUSH
 957: LD_EXP 1
 961: NOT
 962: PPUSH
 963: LD_EXP 2
 967: PPUSH
 968: CALL 3650 0 3
 972: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 973: LD_ADDR_EXP 14
 977: PUSH
 978: LD_STRING Kurt
 980: PPUSH
 981: LD_EXP 1
 985: NOT
 986: PPUSH
 987: LD_EXP 2
 991: PPUSH
 992: CALL 3650 0 3
 996: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 997: LD_ADDR_EXP 7
1001: PUSH
1002: LD_STRING Mike
1004: PPUSH
1005: LD_EXP 1
1009: NOT
1010: PPUSH
1011: LD_EXP 2
1015: PPUSH
1016: CALL 3650 0 3
1020: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
1021: LD_ADDR_EXP 13
1025: PUSH
1026: LD_STRING Olaf
1028: PPUSH
1029: LD_EXP 1
1033: NOT
1034: PPUSH
1035: LD_EXP 2
1039: PPUSH
1040: CALL 3650 0 3
1044: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
1045: LD_ADDR_EXP 16
1049: PUSH
1050: LD_STRING 07_others
1052: PPUSH
1053: CALL_OW 31
1057: ST_TO_ADDR
// veh := [ [ ar_half_tracked , engine_combustion , control_manual , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] , ] ;
1058: LD_ADDR_VAR 0 5
1062: PUSH
1063: LD_INT 14
1065: PUSH
1066: LD_INT 1
1068: PUSH
1069: LD_INT 1
1071: PUSH
1072: LD_INT 25
1074: PUSH
1075: EMPTY
1076: LIST
1077: LIST
1078: LIST
1079: LIST
1080: PUSH
1081: LD_INT 14
1083: PUSH
1084: LD_INT 1
1086: PUSH
1087: LD_INT 1
1089: PUSH
1090: LD_INT 27
1092: PUSH
1093: EMPTY
1094: LIST
1095: LIST
1096: LIST
1097: LIST
1098: PUSH
1099: LD_INT 14
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: LD_INT 1
1107: PUSH
1108: LD_INT 27
1110: PUSH
1111: EMPTY
1112: LIST
1113: LIST
1114: LIST
1115: LIST
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: LIST
1121: ST_TO_ADDR
// for i in veh do
1122: LD_ADDR_VAR 0 2
1126: PUSH
1127: LD_VAR 0 5
1131: PUSH
1132: FOR_IN
1133: IFFALSE 1238
// begin vc_chassis := i [ 1 ] ;
1135: LD_ADDR_OWVAR 37
1139: PUSH
1140: LD_VAR 0 2
1144: PUSH
1145: LD_INT 1
1147: ARRAY
1148: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
1149: LD_ADDR_OWVAR 39
1153: PUSH
1154: LD_VAR 0 2
1158: PUSH
1159: LD_INT 2
1161: ARRAY
1162: ST_TO_ADDR
// vc_control := i [ 3 ] ;
1163: LD_ADDR_OWVAR 38
1167: PUSH
1168: LD_VAR 0 2
1172: PUSH
1173: LD_INT 3
1175: ARRAY
1176: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
1177: LD_ADDR_OWVAR 40
1181: PUSH
1182: LD_VAR 0 2
1186: PUSH
1187: LD_INT 4
1189: ARRAY
1190: ST_TO_ADDR
// vc_fuel_battery := 25 ;
1191: LD_ADDR_OWVAR 41
1195: PUSH
1196: LD_INT 25
1198: ST_TO_ADDR
// un := CreateVehicle ;
1199: LD_ADDR_VAR 0 4
1203: PUSH
1204: CALL_OW 45
1208: ST_TO_ADDR
// SetDir ( un , 0 ) ;
1209: LD_VAR 0 4
1213: PPUSH
1214: LD_INT 0
1216: PPUSH
1217: CALL_OW 233
// PlaceUnitArea ( un , heikeVehArea , false ) ;
1221: LD_VAR 0 4
1225: PPUSH
1226: LD_INT 7
1228: PPUSH
1229: LD_INT 0
1231: PPUSH
1232: CALL_OW 49
// end ;
1236: GO 1132
1238: POP
1239: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad union americanSquad ;
1240: LD_ADDR_VAR 0 3
1244: PUSH
1245: LD_EXP 7
1249: PUSH
1250: LD_EXP 8
1254: PUSH
1255: LD_EXP 9
1259: PUSH
1260: LD_EXP 10
1264: PUSH
1265: LD_EXP 11
1269: PUSH
1270: LD_EXP 12
1274: PUSH
1275: LD_EXP 13
1279: PUSH
1280: LD_EXP 14
1284: PUSH
1285: LD_EXP 15
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: PUSH
1301: LD_EXP 16
1305: UNION
1306: PUSH
1307: LD_EXP 17
1311: UNION
1312: ST_TO_ADDR
// for i in tmp do
1313: LD_ADDR_VAR 0 2
1317: PUSH
1318: LD_VAR 0 3
1322: PUSH
1323: FOR_IN
1324: IFFALSE 1444
// begin if GetClass ( i ) in [ class_mechanic , class_engineer , class_scientistic ] and FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) then
1326: LD_VAR 0 2
1330: PPUSH
1331: CALL_OW 257
1335: PUSH
1336: LD_INT 3
1338: PUSH
1339: LD_INT 2
1341: PUSH
1342: LD_INT 4
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: LIST
1349: IN
1350: PUSH
1351: LD_INT 22
1353: PUSH
1354: LD_INT 2
1356: PUSH
1357: EMPTY
1358: LIST
1359: LIST
1360: PUSH
1361: LD_INT 58
1363: PUSH
1364: EMPTY
1365: LIST
1366: PUSH
1367: EMPTY
1368: LIST
1369: LIST
1370: PPUSH
1371: CALL_OW 69
1375: AND
1376: IFFALSE 1418
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) [ 1 ] ) else
1378: LD_VAR 0 2
1382: PPUSH
1383: LD_INT 22
1385: PUSH
1386: LD_INT 2
1388: PUSH
1389: EMPTY
1390: LIST
1391: LIST
1392: PUSH
1393: LD_INT 58
1395: PUSH
1396: EMPTY
1397: LIST
1398: PUSH
1399: EMPTY
1400: LIST
1401: LIST
1402: PPUSH
1403: CALL_OW 69
1407: PUSH
1408: LD_INT 1
1410: ARRAY
1411: PPUSH
1412: CALL_OW 52
1416: GO 1433
// PlaceUnitArea ( i , heikePeopleArea , false ) ;
1418: LD_VAR 0 2
1422: PPUSH
1423: LD_INT 6
1425: PPUSH
1426: LD_INT 0
1428: PPUSH
1429: CALL_OW 49
// ComHold ( i ) ;
1433: LD_VAR 0 2
1437: PPUSH
1438: CALL_OW 140
// end ;
1442: GO 1323
1444: POP
1445: POP
// PlaceUnitArea ( Heike , heikeArea , false ) ;
1446: LD_EXP 5
1450: PPUSH
1451: LD_INT 5
1453: PPUSH
1454: LD_INT 0
1456: PPUSH
1457: CALL_OW 49
// ComTurnUnit ( Heike , ar_dep ) ;
1461: LD_EXP 5
1465: PPUSH
1466: LD_INT 2
1468: PPUSH
1469: CALL_OW 119
// if Givi then
1473: LD_EXP 6
1477: IFFALSE 1509
// begin PlaceUnitXY ( Givi , 129 , 158 , false ) ;
1479: LD_EXP 6
1483: PPUSH
1484: LD_INT 129
1486: PPUSH
1487: LD_INT 158
1489: PPUSH
1490: LD_INT 0
1492: PPUSH
1493: CALL_OW 48
// ComTurnUnit ( Givi , ar_dep ) ;
1497: LD_EXP 6
1501: PPUSH
1502: LD_INT 2
1504: PPUSH
1505: CALL_OW 119
// end ; end ; end_of_file
1509: LD_VAR 0 1
1513: RET
// export kabulAttackers , heikeAttackers , Burlak ; export function PrepareRussian ; var i , un ; begin
1514: LD_INT 0
1516: PPUSH
1517: PPUSH
1518: PPUSH
// uc_side := 3 ;
1519: LD_ADDR_OWVAR 20
1523: PUSH
1524: LD_INT 3
1526: ST_TO_ADDR
// uc_nation := 3 ;
1527: LD_ADDR_OWVAR 21
1531: PUSH
1532: LD_INT 3
1534: ST_TO_ADDR
// Burlak := NewCharacter ( Burlak ) ;
1535: LD_ADDR_EXP 20
1539: PUSH
1540: LD_STRING Burlak
1542: PPUSH
1543: CALL_OW 25
1547: ST_TO_ADDR
// kabulAttackers := [ ] ;
1548: LD_ADDR_EXP 18
1552: PUSH
1553: EMPTY
1554: ST_TO_ADDR
// heikeAttackers := [ ] ;
1555: LD_ADDR_EXP 19
1559: PUSH
1560: EMPTY
1561: ST_TO_ADDR
// for i := 1 to 9 do
1562: LD_ADDR_VAR 0 2
1566: PUSH
1567: DOUBLE
1568: LD_INT 1
1570: DEC
1571: ST_TO_ADDR
1572: LD_INT 9
1574: PUSH
1575: FOR_TO
1576: IFFALSE 1668
// begin PrepareHuman ( false , class_soldier , 0 ) ;
1578: LD_INT 0
1580: PPUSH
1581: LD_INT 1
1583: PPUSH
1584: LD_INT 0
1586: PPUSH
1587: CALL_OW 380
// un := CreateHuman ;
1591: LD_ADDR_VAR 0 3
1595: PUSH
1596: CALL_OW 44
1600: ST_TO_ADDR
// if Prob ( 40 ) then
1601: LD_INT 40
1603: PPUSH
1604: CALL_OW 13
1608: IFFALSE 1622
// SetClass ( un , class_bazooker ) ;
1610: LD_VAR 0 3
1614: PPUSH
1615: LD_INT 9
1617: PPUSH
1618: CALL_OW 336
// SetDir ( un , rand ( 0 , 5 ) ) ;
1622: LD_VAR 0 3
1626: PPUSH
1627: LD_INT 0
1629: PPUSH
1630: LD_INT 5
1632: PPUSH
1633: CALL_OW 12
1637: PPUSH
1638: CALL_OW 233
// PlaceUnitArea ( un , KabulRuDead , false ) ;
1642: LD_VAR 0 3
1646: PPUSH
1647: LD_INT 10
1649: PPUSH
1650: LD_INT 0
1652: PPUSH
1653: CALL_OW 49
// KillUnit ( un ) ;
1657: LD_VAR 0 3
1661: PPUSH
1662: CALL_OW 66
// end ;
1666: GO 1575
1668: POP
1669: POP
// for i := 1 to 9 do
1670: LD_ADDR_VAR 0 2
1674: PUSH
1675: DOUBLE
1676: LD_INT 1
1678: DEC
1679: ST_TO_ADDR
1680: LD_INT 9
1682: PUSH
1683: FOR_TO
1684: IFFALSE 1905
// begin if rand ( 0 , 1 ) then
1686: LD_INT 0
1688: PPUSH
1689: LD_INT 1
1691: PPUSH
1692: CALL_OW 12
1696: IFFALSE 1759
// begin PrepareHuman ( false , class_soldier , 7 ) ;
1698: LD_INT 0
1700: PPUSH
1701: LD_INT 1
1703: PPUSH
1704: LD_INT 7
1706: PPUSH
1707: CALL_OW 380
// un := CreateHuman ;
1711: LD_ADDR_VAR 0 3
1715: PUSH
1716: CALL_OW 44
1720: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1721: LD_VAR 0 3
1725: PPUSH
1726: LD_INT 1
1728: PPUSH
1729: CALL_OW 233
// PlaceUnitArea ( un , kabulRuArea , false ) ;
1733: LD_VAR 0 3
1737: PPUSH
1738: LD_INT 3
1740: PPUSH
1741: LD_INT 0
1743: PPUSH
1744: CALL_OW 49
// ComHold ( un ) ;
1748: LD_VAR 0 3
1752: PPUSH
1753: CALL_OW 140
// end else
1757: GO 1874
// begin vc_chassis := ru_medium_tracked ;
1759: LD_ADDR_OWVAR 37
1763: PUSH
1764: LD_INT 22
1766: ST_TO_ADDR
// vc_engine := engine_combustion ;
1767: LD_ADDR_OWVAR 39
1771: PUSH
1772: LD_INT 1
1774: ST_TO_ADDR
// vc_control := control_manual ;
1775: LD_ADDR_OWVAR 38
1779: PUSH
1780: LD_INT 1
1782: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
1783: LD_ADDR_OWVAR 40
1787: PUSH
1788: LD_INT 44
1790: PUSH
1791: LD_INT 43
1793: PUSH
1794: LD_INT 45
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: LIST
1801: PUSH
1802: LD_INT 1
1804: PPUSH
1805: LD_INT 3
1807: PPUSH
1808: CALL_OW 12
1812: ARRAY
1813: ST_TO_ADDR
// un := CreateVehicle ;
1814: LD_ADDR_VAR 0 3
1818: PUSH
1819: CALL_OW 45
1823: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1824: LD_VAR 0 3
1828: PPUSH
1829: LD_INT 1
1831: PPUSH
1832: CALL_OW 233
// PlaceUnitArea ( un , kabulRuArea , false ) ;
1836: LD_VAR 0 3
1840: PPUSH
1841: LD_INT 3
1843: PPUSH
1844: LD_INT 0
1846: PPUSH
1847: CALL_OW 49
// ComHold ( un ) ;
1851: LD_VAR 0 3
1855: PPUSH
1856: CALL_OW 140
// PlaceHumanInUnit ( CreateHuman , un ) ;
1860: CALL_OW 44
1864: PPUSH
1865: LD_VAR 0 3
1869: PPUSH
1870: CALL_OW 52
// end ; kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
1874: LD_ADDR_EXP 18
1878: PUSH
1879: LD_EXP 18
1883: PPUSH
1884: LD_EXP 18
1888: PUSH
1889: LD_INT 1
1891: PLUS
1892: PPUSH
1893: LD_VAR 0 3
1897: PPUSH
1898: CALL_OW 1
1902: ST_TO_ADDR
// end ;
1903: GO 1683
1905: POP
1906: POP
// for i := 1 to 5 do
1907: LD_ADDR_VAR 0 2
1911: PUSH
1912: DOUBLE
1913: LD_INT 1
1915: DEC
1916: ST_TO_ADDR
1917: LD_INT 5
1919: PUSH
1920: FOR_TO
1921: IFFALSE 2154
// begin if rand ( 0 , 1 ) then
1923: LD_INT 0
1925: PPUSH
1926: LD_INT 1
1928: PPUSH
1929: CALL_OW 12
1933: IFFALSE 2008
// begin PrepareHuman ( false , class_soldier , 7 ) ;
1935: LD_INT 0
1937: PPUSH
1938: LD_INT 1
1940: PPUSH
1941: LD_INT 7
1943: PPUSH
1944: CALL_OW 380
// un := CreateHuman ;
1948: LD_ADDR_VAR 0 3
1952: PUSH
1953: CALL_OW 44
1957: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1958: LD_VAR 0 3
1962: PPUSH
1963: LD_INT 1
1965: PPUSH
1966: CALL_OW 233
// SetClass ( un , class_bazooker ) ;
1970: LD_VAR 0 3
1974: PPUSH
1975: LD_INT 9
1977: PPUSH
1978: CALL_OW 336
// PlaceUnitArea ( un , kabulRu2Area , false ) ;
1982: LD_VAR 0 3
1986: PPUSH
1987: LD_INT 8
1989: PPUSH
1990: LD_INT 0
1992: PPUSH
1993: CALL_OW 49
// ComHold ( un ) ;
1997: LD_VAR 0 3
2001: PPUSH
2002: CALL_OW 140
// end else
2006: GO 2123
// begin vc_chassis := ru_heavy_wheeled ;
2008: LD_ADDR_OWVAR 37
2012: PUSH
2013: LD_INT 23
2015: ST_TO_ADDR
// vc_engine := engine_combustion ;
2016: LD_ADDR_OWVAR 39
2020: PUSH
2021: LD_INT 1
2023: ST_TO_ADDR
// vc_control := control_manual ;
2024: LD_ADDR_OWVAR 38
2028: PUSH
2029: LD_INT 1
2031: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
2032: LD_ADDR_OWVAR 40
2036: PUSH
2037: LD_INT 44
2039: PUSH
2040: LD_INT 43
2042: PUSH
2043: LD_INT 45
2045: PUSH
2046: EMPTY
2047: LIST
2048: LIST
2049: LIST
2050: PUSH
2051: LD_INT 1
2053: PPUSH
2054: LD_INT 3
2056: PPUSH
2057: CALL_OW 12
2061: ARRAY
2062: ST_TO_ADDR
// un := CreateVehicle ;
2063: LD_ADDR_VAR 0 3
2067: PUSH
2068: CALL_OW 45
2072: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2073: LD_VAR 0 3
2077: PPUSH
2078: LD_INT 4
2080: PPUSH
2081: CALL_OW 233
// PlaceUnitArea ( un , kabulRu2Area , false ) ;
2085: LD_VAR 0 3
2089: PPUSH
2090: LD_INT 8
2092: PPUSH
2093: LD_INT 0
2095: PPUSH
2096: CALL_OW 49
// ComHold ( un ) ;
2100: LD_VAR 0 3
2104: PPUSH
2105: CALL_OW 140
// PlaceHumanInUnit ( CreateHuman , un ) ;
2109: CALL_OW 44
2113: PPUSH
2114: LD_VAR 0 3
2118: PPUSH
2119: CALL_OW 52
// end ; kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
2123: LD_ADDR_EXP 18
2127: PUSH
2128: LD_EXP 18
2132: PPUSH
2133: LD_EXP 18
2137: PUSH
2138: LD_INT 1
2140: PLUS
2141: PPUSH
2142: LD_VAR 0 3
2146: PPUSH
2147: CALL_OW 1
2151: ST_TO_ADDR
// end ;
2152: GO 1920
2154: POP
2155: POP
// for i := 1 to 5 do
2156: LD_ADDR_VAR 0 2
2160: PUSH
2161: DOUBLE
2162: LD_INT 1
2164: DEC
2165: ST_TO_ADDR
2166: LD_INT 5
2168: PUSH
2169: FOR_TO
2170: IFFALSE 2274
// begin PrepareHuman ( false , class_soldier , 7 ) ;
2172: LD_INT 0
2174: PPUSH
2175: LD_INT 1
2177: PPUSH
2178: LD_INT 7
2180: PPUSH
2181: CALL_OW 380
// un := CreateHuman ;
2185: LD_ADDR_VAR 0 3
2189: PUSH
2190: CALL_OW 44
2194: ST_TO_ADDR
// SetDir ( un , 0 ) ;
2195: LD_VAR 0 3
2199: PPUSH
2200: LD_INT 0
2202: PPUSH
2203: CALL_OW 233
// SetClass ( un , class_bazooker ) ;
2207: LD_VAR 0 3
2211: PPUSH
2212: LD_INT 9
2214: PPUSH
2215: CALL_OW 336
// PlaceUnitArea ( un , kabulRu3Area , false ) ;
2219: LD_VAR 0 3
2223: PPUSH
2224: LD_INT 9
2226: PPUSH
2227: LD_INT 0
2229: PPUSH
2230: CALL_OW 49
// ComHold ( un ) ;
2234: LD_VAR 0 3
2238: PPUSH
2239: CALL_OW 140
// kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
2243: LD_ADDR_EXP 18
2247: PUSH
2248: LD_EXP 18
2252: PPUSH
2253: LD_EXP 18
2257: PUSH
2258: LD_INT 1
2260: PLUS
2261: PPUSH
2262: LD_VAR 0 3
2266: PPUSH
2267: CALL_OW 1
2271: ST_TO_ADDR
// end ;
2272: GO 2169
2274: POP
2275: POP
// for i := 1 to 12 do
2276: LD_ADDR_VAR 0 2
2280: PUSH
2281: DOUBLE
2282: LD_INT 1
2284: DEC
2285: ST_TO_ADDR
2286: LD_INT 12
2288: PUSH
2289: FOR_TO
2290: IFFALSE 2541
// begin if Prob ( 22 ) then
2292: LD_INT 22
2294: PPUSH
2295: CALL_OW 13
2299: IFFALSE 2362
// begin PrepareHuman ( false , class_soldier , 10 ) ;
2301: LD_INT 0
2303: PPUSH
2304: LD_INT 1
2306: PPUSH
2307: LD_INT 10
2309: PPUSH
2310: CALL_OW 380
// un := CreateHuman ;
2314: LD_ADDR_VAR 0 3
2318: PUSH
2319: CALL_OW 44
2323: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2324: LD_VAR 0 3
2328: PPUSH
2329: LD_INT 3
2331: PPUSH
2332: CALL_OW 233
// PlaceUnitArea ( un , heikeRuArea , false ) ;
2336: LD_VAR 0 3
2340: PPUSH
2341: LD_INT 4
2343: PPUSH
2344: LD_INT 0
2346: PPUSH
2347: CALL_OW 49
// ComHold ( un ) ;
2351: LD_VAR 0 3
2355: PPUSH
2356: CALL_OW 140
// end else
2360: GO 2510
// begin vc_chassis := [ ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] ;
2362: LD_ADDR_OWVAR 37
2366: PUSH
2367: LD_INT 22
2369: PUSH
2370: LD_INT 24
2372: PUSH
2373: EMPTY
2374: LIST
2375: LIST
2376: PUSH
2377: LD_INT 1
2379: PPUSH
2380: LD_INT 2
2382: PPUSH
2383: CALL_OW 12
2387: ARRAY
2388: ST_TO_ADDR
// vc_engine := engine_combustion ;
2389: LD_ADDR_OWVAR 39
2393: PUSH
2394: LD_INT 1
2396: ST_TO_ADDR
// vc_control := control_manual ;
2397: LD_ADDR_OWVAR 38
2401: PUSH
2402: LD_INT 1
2404: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 4 ) ] ;
2405: LD_ADDR_OWVAR 40
2409: PUSH
2410: LD_INT 44
2412: PUSH
2413: LD_INT 43
2415: PUSH
2416: LD_INT 43
2418: PUSH
2419: LD_INT 45
2421: PUSH
2422: EMPTY
2423: LIST
2424: LIST
2425: LIST
2426: LIST
2427: PUSH
2428: LD_INT 1
2430: PPUSH
2431: LD_INT 4
2433: PPUSH
2434: CALL_OW 12
2438: ARRAY
2439: ST_TO_ADDR
// un := CreateVehicle ;
2440: LD_ADDR_VAR 0 3
2444: PUSH
2445: CALL_OW 45
2449: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2450: LD_VAR 0 3
2454: PPUSH
2455: LD_INT 3
2457: PPUSH
2458: CALL_OW 233
// PlaceUnitArea ( un , heikeRuArea , false ) ;
2462: LD_VAR 0 3
2466: PPUSH
2467: LD_INT 4
2469: PPUSH
2470: LD_INT 0
2472: PPUSH
2473: CALL_OW 49
// ComHold ( un ) ;
2477: LD_VAR 0 3
2481: PPUSH
2482: CALL_OW 140
// PrepareMechanic ( false , 10 ) ;
2486: LD_INT 0
2488: PPUSH
2489: LD_INT 10
2491: PPUSH
2492: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
2496: CALL_OW 44
2500: PPUSH
2501: LD_VAR 0 3
2505: PPUSH
2506: CALL_OW 52
// end ; heikeAttackers := Replace ( heikeAttackers , heikeAttackers + 1 , un ) ;
2510: LD_ADDR_EXP 19
2514: PUSH
2515: LD_EXP 19
2519: PPUSH
2520: LD_EXP 19
2524: PUSH
2525: LD_INT 1
2527: PLUS
2528: PPUSH
2529: LD_VAR 0 3
2533: PPUSH
2534: CALL_OW 1
2538: ST_TO_ADDR
// end ;
2539: GO 2289
2541: POP
2542: POP
// end ;
2543: LD_VAR 0 1
2547: RET
// every 0 0$2 trigger startAttackOnKabul and kabulAttackers do var i ;
2548: LD_EXP 3
2552: PUSH
2553: LD_EXP 18
2557: AND
2558: IFFALSE 2618
2560: GO 2562
2562: DISABLE
2563: LD_INT 0
2565: PPUSH
// begin enable ;
2566: ENABLE
// for i in kabulAttackers do
2567: LD_ADDR_VAR 0 1
2571: PUSH
2572: LD_EXP 18
2576: PUSH
2577: FOR_IN
2578: IFFALSE 2616
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 5 ] ) , i ) ) ;
2580: LD_VAR 0 1
2584: PPUSH
2585: LD_INT 22
2587: PUSH
2588: LD_INT 5
2590: PUSH
2591: EMPTY
2592: LIST
2593: LIST
2594: PPUSH
2595: CALL_OW 69
2599: PPUSH
2600: LD_VAR 0 1
2604: PPUSH
2605: CALL_OW 74
2609: PPUSH
2610: CALL_OW 115
2614: GO 2577
2616: POP
2617: POP
// end ;
2618: PPOPN 1
2620: END
// every 0 0$1 trigger startAttackOnHeike and heikeAttackers do var i ;
2621: LD_EXP 4
2625: PUSH
2626: LD_EXP 19
2630: AND
2631: IFFALSE 2691
2633: GO 2635
2635: DISABLE
2636: LD_INT 0
2638: PPUSH
// begin enable ;
2639: ENABLE
// for i in heikeAttackers do
2640: LD_ADDR_VAR 0 1
2644: PUSH
2645: LD_EXP 19
2649: PUSH
2650: FOR_IN
2651: IFFALSE 2689
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ) ;
2653: LD_VAR 0 1
2657: PPUSH
2658: LD_INT 22
2660: PUSH
2661: LD_INT 2
2663: PUSH
2664: EMPTY
2665: LIST
2666: LIST
2667: PPUSH
2668: CALL_OW 69
2672: PPUSH
2673: LD_VAR 0 1
2677: PPUSH
2678: CALL_OW 74
2682: PPUSH
2683: CALL_OW 115
2687: GO 2650
2689: POP
2690: POP
// end ; end_of_file
2691: PPOPN 1
2693: END
// export function Action ; var i ; begin
2694: LD_INT 0
2696: PPUSH
2697: PPUSH
// Video ( true ) ;
2698: LD_INT 1
2700: PPUSH
2701: CALL 40923 0 1
// PlaceSeeing ( 111 , 168 , 2 , - 25 ) ;
2705: LD_INT 111
2707: PPUSH
2708: LD_INT 168
2710: PPUSH
2711: LD_INT 2
2713: PPUSH
2714: LD_INT 25
2716: NEG
2717: PPUSH
2718: CALL_OW 330
// PlaceSeeing ( 102 , 47 , 2 , - 40 ) ;
2722: LD_INT 102
2724: PPUSH
2725: LD_INT 47
2727: PPUSH
2728: LD_INT 2
2730: PPUSH
2731: LD_INT 40
2733: NEG
2734: PPUSH
2735: CALL_OW 330
// CenterNowOnUnits ( Heike ) ;
2739: LD_EXP 5
2743: PPUSH
2744: CALL_OW 87
// startAttackOnKabul := true ;
2748: LD_ADDR_EXP 3
2752: PUSH
2753: LD_INT 1
2755: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2756: LD_INT 70
2758: PPUSH
2759: CALL_OW 67
// CenterOnXY ( 102 , 47 ) ;
2763: LD_INT 102
2765: PPUSH
2766: LD_INT 47
2768: PPUSH
2769: CALL_OW 84
// if Givi then
2773: LD_EXP 6
2777: IFFALSE 2968
// begin ComMoveXY ( Givi , 113 , 162 ) ;
2779: LD_EXP 6
2783: PPUSH
2784: LD_INT 113
2786: PPUSH
2787: LD_INT 162
2789: PPUSH
2790: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
2794: LD_EXP 6
2798: PPUSH
2799: LD_EXP 5
2803: PPUSH
2804: CALL_OW 179
// Say ( Givi , DG-Intro-1 ) ;
2808: LD_EXP 6
2812: PPUSH
2813: LD_STRING DG-Intro-1
2815: PPUSH
2816: CALL_OW 88
// Say ( Givi , DG-Intro-2 ) ;
2820: LD_EXP 6
2824: PPUSH
2825: LD_STRING DG-Intro-2
2827: PPUSH
2828: CALL_OW 88
// CenterOnUnits ( Heike ) ;
2832: LD_EXP 5
2836: PPUSH
2837: CALL_OW 85
// RemoveSeeing ( 102 , 47 , 2 ) ;
2841: LD_INT 102
2843: PPUSH
2844: LD_INT 47
2846: PPUSH
2847: LD_INT 2
2849: PPUSH
2850: CALL_OW 331
// wait ( 0 0$0.3 ) ;
2854: LD_INT 10
2856: PPUSH
2857: CALL_OW 67
// Say ( Heike , DH-Intro-3 ) ;
2861: LD_EXP 5
2865: PPUSH
2866: LD_STRING DH-Intro-3
2868: PPUSH
2869: CALL_OW 88
// if Mike then
2873: LD_EXP 7
2877: IFFALSE 2966
// begin PlaceSeeing ( 92 , 129 , 2 , - 18 ) ;
2879: LD_INT 92
2881: PPUSH
2882: LD_INT 129
2884: PPUSH
2885: LD_INT 2
2887: PPUSH
2888: LD_INT 18
2890: NEG
2891: PPUSH
2892: CALL_OW 330
// CenterOnXY ( 92 , 129 ) ;
2896: LD_INT 92
2898: PPUSH
2899: LD_INT 129
2901: PPUSH
2902: CALL_OW 84
// ComTurnUnit ( [ Mike , Kaia ] , Heike ) ;
2906: LD_EXP 7
2910: PUSH
2911: LD_EXP 10
2915: PUSH
2916: EMPTY
2917: LIST
2918: LIST
2919: PPUSH
2920: LD_EXP 5
2924: PPUSH
2925: CALL_OW 119
// Say ( Mike , DM-Intro-4 ) ;
2929: LD_EXP 7
2933: PPUSH
2934: LD_STRING DM-Intro-4
2936: PPUSH
2937: CALL_OW 88
// Say ( Kaia , DK-Intro-5 ) ;
2941: LD_EXP 10
2945: PPUSH
2946: LD_STRING DK-Intro-5
2948: PPUSH
2949: CALL_OW 88
// RemoveSeeing ( 92 , 129 , 2 ) ;
2953: LD_INT 92
2955: PPUSH
2956: LD_INT 129
2958: PPUSH
2959: LD_INT 2
2961: PPUSH
2962: CALL_OW 331
// end ; end else
2966: GO 3221
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-1 ) then
2968: LD_EXP 16
2972: PPUSH
2973: LD_INT 26
2975: PUSH
2976: LD_INT 1
2978: PUSH
2979: EMPTY
2980: LIST
2981: LIST
2982: PPUSH
2983: CALL_OW 72
2987: PUSH
2988: LD_INT 1
2990: ARRAY
2991: PPUSH
2992: LD_STRING DArm-Intro-b-1
2994: PPUSH
2995: CALL_OW 88
2999: NOT
3000: IFFALSE 3033
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-1 ) ;
3002: LD_EXP 16
3006: PPUSH
3007: LD_INT 26
3009: PUSH
3010: LD_INT 2
3012: PUSH
3013: EMPTY
3014: LIST
3015: LIST
3016: PPUSH
3017: CALL_OW 72
3021: PUSH
3022: LD_INT 1
3024: ARRAY
3025: PPUSH
3026: LD_STRING DArf-Intro-b-1
3028: PPUSH
3029: CALL_OW 88
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-2 ) then
3033: LD_EXP 16
3037: PPUSH
3038: LD_INT 26
3040: PUSH
3041: LD_INT 1
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PPUSH
3048: CALL_OW 72
3052: PUSH
3053: LD_INT 1
3055: ARRAY
3056: PPUSH
3057: LD_STRING DArm-Intro-b-2
3059: PPUSH
3060: CALL_OW 88
3064: NOT
3065: IFFALSE 3098
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-2 ) ;
3067: LD_EXP 16
3071: PPUSH
3072: LD_INT 26
3074: PUSH
3075: LD_INT 2
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: PPUSH
3082: CALL_OW 72
3086: PUSH
3087: LD_INT 1
3089: ARRAY
3090: PPUSH
3091: LD_STRING DArf-Intro-b-2
3093: PPUSH
3094: CALL_OW 88
// if Kaia then
3098: LD_EXP 10
3102: IFFALSE 3116
// Say ( Kaia , DK-Intro-5 ) ;
3104: LD_EXP 10
3108: PPUSH
3109: LD_STRING DK-Intro-5
3111: PPUSH
3112: CALL_OW 88
// PlaceSeeing ( 92 , 129 , 2 , - 18 ) ;
3116: LD_INT 92
3118: PPUSH
3119: LD_INT 129
3121: PPUSH
3122: LD_INT 2
3124: PPUSH
3125: LD_INT 18
3127: NEG
3128: PPUSH
3129: CALL_OW 330
// CenterOnXY ( 92 , 129 ) ;
3133: LD_INT 92
3135: PPUSH
3136: LD_INT 129
3138: PPUSH
3139: CALL_OW 84
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-4 ) then
3143: LD_EXP 16
3147: PPUSH
3148: LD_INT 26
3150: PUSH
3151: LD_INT 1
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: PPUSH
3158: CALL_OW 72
3162: PUSH
3163: LD_INT 1
3165: ARRAY
3166: PPUSH
3167: LD_STRING DArm-Intro-b-4
3169: PPUSH
3170: CALL_OW 88
3174: NOT
3175: IFFALSE 3208
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-4 ) ;
3177: LD_EXP 16
3181: PPUSH
3182: LD_INT 26
3184: PUSH
3185: LD_INT 2
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PPUSH
3192: CALL_OW 72
3196: PUSH
3197: LD_INT 1
3199: ARRAY
3200: PPUSH
3201: LD_STRING DArf-Intro-b-4
3203: PPUSH
3204: CALL_OW 88
// RemoveSeeing ( 92 , 129 , 2 ) ;
3208: LD_INT 92
3210: PPUSH
3211: LD_INT 129
3213: PPUSH
3214: LD_INT 2
3216: PPUSH
3217: CALL_OW 331
// end ; CenterOnUnits ( Heike ) ;
3221: LD_EXP 5
3225: PPUSH
3226: CALL_OW 85
// SayRadio ( Burlak , DB-Intro-6 ) ;
3230: LD_EXP 20
3234: PPUSH
3235: LD_STRING DB-Intro-6
3237: PPUSH
3238: CALL_OW 94
// Say ( Heike , DH-Intro-7 ) ;
3242: LD_EXP 5
3246: PPUSH
3247: LD_STRING DH-Intro-7
3249: PPUSH
3250: CALL_OW 88
// SayRadio ( Burlak , DB-Intro-8 ) ;
3254: LD_EXP 20
3258: PPUSH
3259: LD_STRING DB-Intro-8
3261: PPUSH
3262: CALL_OW 94
// SayRadio ( Burlak , DB-Intro-9 ) ;
3266: LD_EXP 20
3270: PPUSH
3271: LD_STRING DB-Intro-9
3273: PPUSH
3274: CALL_OW 94
// if Givi then
3278: LD_EXP 6
3282: IFFALSE 3310
// begin Say ( Givi , DG-Intro-10 ) ;
3284: LD_EXP 6
3288: PPUSH
3289: LD_STRING DG-Intro-10
3291: PPUSH
3292: CALL_OW 88
// Say ( Kaia , DK-Intro-11 ) ;
3296: LD_EXP 10
3300: PPUSH
3301: LD_STRING DK-Intro-11
3303: PPUSH
3304: CALL_OW 88
// end else
3308: GO 3375
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-10 ) then
3310: LD_EXP 16
3314: PPUSH
3315: LD_INT 26
3317: PUSH
3318: LD_INT 1
3320: PUSH
3321: EMPTY
3322: LIST
3323: LIST
3324: PPUSH
3325: CALL_OW 72
3329: PUSH
3330: LD_INT 1
3332: ARRAY
3333: PPUSH
3334: LD_STRING DArm-Intro-b-10
3336: PPUSH
3337: CALL_OW 88
3341: NOT
3342: IFFALSE 3375
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-10 ) ;
3344: LD_EXP 16
3348: PPUSH
3349: LD_INT 26
3351: PUSH
3352: LD_INT 2
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PPUSH
3359: CALL_OW 72
3363: PUSH
3364: LD_INT 1
3366: ARRAY
3367: PPUSH
3368: LD_STRING DArf-Intro-b-10
3370: PPUSH
3371: CALL_OW 88
// Say ( Mike , DM-Intro-12 ) ;
3375: LD_EXP 7
3379: PPUSH
3380: LD_STRING DM-Intro-12
3382: PPUSH
3383: CALL_OW 88
// Say ( Kurt , DKs-Intro-13 ) ;
3387: LD_EXP 14
3391: PPUSH
3392: LD_STRING DKs-Intro-13
3394: PPUSH
3395: CALL_OW 88
// Say ( Kamil , DKam-Intro-14 ) ;
3399: LD_EXP 9
3403: PPUSH
3404: LD_STRING DKam-Intro-14
3406: PPUSH
3407: CALL_OW 88
// case Query ( QSurrender ) of 1 :
3411: LD_STRING QSurrender
3413: PPUSH
3414: CALL_OW 97
3418: PUSH
3419: LD_INT 1
3421: DOUBLE
3422: EQUAL
3423: IFTRUE 3427
3425: GO 3446
3427: POP
// begin Say ( Heike , DH-Intro-16 ) ;
3428: LD_EXP 5
3432: PPUSH
3433: LD_STRING DH-Intro-16
3435: PPUSH
3436: CALL_OW 88
// missionEnd ;
3440: CALL 3632 0 0
// end ; 2 :
3444: GO 3490
3446: LD_INT 2
3448: DOUBLE
3449: EQUAL
3450: IFTRUE 3454
3452: GO 3489
3454: POP
// begin Say ( Heike , DH-Intro-a-16 ) ;
3455: LD_EXP 5
3459: PPUSH
3460: LD_STRING DH-Intro-a-16
3462: PPUSH
3463: CALL_OW 88
// SayRadio ( Burlak , DB-Intro-a-17 ) ;
3467: LD_EXP 20
3471: PPUSH
3472: LD_STRING DB-Intro-a-17
3474: PPUSH
3475: CALL_OW 94
// startAttackOnHeike := true ;
3479: LD_ADDR_EXP 4
3483: PUSH
3484: LD_INT 1
3486: ST_TO_ADDR
// end ; end ;
3487: GO 3490
3489: POP
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
3490: LD_ADDR_VAR 0 2
3494: PUSH
3495: LD_INT 22
3497: PUSH
3498: LD_INT 2
3500: PUSH
3501: EMPTY
3502: LIST
3503: LIST
3504: PPUSH
3505: CALL_OW 69
3509: PUSH
3510: FOR_IN
3511: IFFALSE 3530
// ComAgressiveMove ( i , 98 , 143 ) ;
3513: LD_VAR 0 2
3517: PPUSH
3518: LD_INT 98
3520: PPUSH
3521: LD_INT 143
3523: PPUSH
3524: CALL_OW 114
3528: GO 3510
3530: POP
3531: POP
// ComAgressiveMove ( Heike , 84 , 116 ) ;
3532: LD_EXP 5
3536: PPUSH
3537: LD_INT 84
3539: PPUSH
3540: LD_INT 116
3542: PPUSH
3543: CALL_OW 114
// CenterOnXY ( 98 , 143 ) ;
3547: LD_INT 98
3549: PPUSH
3550: LD_INT 143
3552: PPUSH
3553: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
3557: LD_INT 35
3559: PPUSH
3560: CALL_OW 67
// until IsDead ( Heike ) ;
3564: LD_EXP 5
3568: PPUSH
3569: CALL_OW 301
3573: IFFALSE 3557
// wait ( 0 0$3 ) ;
3575: LD_INT 105
3577: PPUSH
3578: CALL_OW 67
// YouLost ( HeikeNoSurrender ) ;
3582: LD_STRING HeikeNoSurrender
3584: PPUSH
3585: CALL_OW 104
// end ;
3589: LD_VAR 0 1
3593: RET
// every 0 0$1 trigger GetLives ( Heike ) < 900 do
3594: LD_EXP 5
3598: PPUSH
3599: CALL_OW 256
3603: PUSH
3604: LD_INT 900
3606: LESS
3607: IFFALSE 3631
3609: GO 3611
3611: DISABLE
// begin wait ( 0 0$3 ) ;
3612: LD_INT 105
3614: PPUSH
3615: CALL_OW 67
// SetLives ( Heike , 100 ) ;
3619: LD_EXP 5
3623: PPUSH
3624: LD_INT 100
3626: PPUSH
3627: CALL_OW 234
// end ;
3631: END
// function MissionEnd ( ) ; begin
3632: LD_INT 0
3634: PPUSH
// ChangeMap ( 1 , %_cont ) ;
3635: LD_INT 1
3637: PPUSH
3638: LD_STRING %_cont
3640: PPUSH
3641: CALL_OW 340
// end ; end_of_file
3645: LD_VAR 0 1
3649: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
3650: LD_INT 0
3652: PPUSH
3653: PPUSH
// if exist_mode then
3654: LD_VAR 0 2
3658: IFFALSE 3683
// unit := CreateCharacter ( prefix & ident ) else
3660: LD_ADDR_VAR 0 5
3664: PUSH
3665: LD_VAR 0 3
3669: PUSH
3670: LD_VAR 0 1
3674: STR
3675: PPUSH
3676: CALL_OW 34
3680: ST_TO_ADDR
3681: GO 3698
// unit := NewCharacter ( ident ) ;
3683: LD_ADDR_VAR 0 5
3687: PUSH
3688: LD_VAR 0 1
3692: PPUSH
3693: CALL_OW 25
3697: ST_TO_ADDR
// result := unit ;
3698: LD_ADDR_VAR 0 4
3702: PUSH
3703: LD_VAR 0 5
3707: ST_TO_ADDR
// end ;
3708: LD_VAR 0 4
3712: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3713: LD_INT 0
3715: PPUSH
3716: PPUSH
// if not side or not nation then
3717: LD_VAR 0 1
3721: NOT
3722: PUSH
3723: LD_VAR 0 2
3727: NOT
3728: OR
3729: IFFALSE 3733
// exit ;
3731: GO 4501
// case nation of nation_american :
3733: LD_VAR 0 2
3737: PUSH
3738: LD_INT 1
3740: DOUBLE
3741: EQUAL
3742: IFTRUE 3746
3744: GO 3960
3746: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
3747: LD_ADDR_VAR 0 4
3751: PUSH
3752: LD_INT 35
3754: PUSH
3755: LD_INT 45
3757: PUSH
3758: LD_INT 46
3760: PUSH
3761: LD_INT 47
3763: PUSH
3764: LD_INT 82
3766: PUSH
3767: LD_INT 83
3769: PUSH
3770: LD_INT 84
3772: PUSH
3773: LD_INT 85
3775: PUSH
3776: LD_INT 86
3778: PUSH
3779: LD_INT 1
3781: PUSH
3782: LD_INT 2
3784: PUSH
3785: LD_INT 6
3787: PUSH
3788: LD_INT 15
3790: PUSH
3791: LD_INT 16
3793: PUSH
3794: LD_INT 7
3796: PUSH
3797: LD_INT 12
3799: PUSH
3800: LD_INT 13
3802: PUSH
3803: LD_INT 10
3805: PUSH
3806: LD_INT 14
3808: PUSH
3809: LD_INT 20
3811: PUSH
3812: LD_INT 21
3814: PUSH
3815: LD_INT 22
3817: PUSH
3818: LD_INT 25
3820: PUSH
3821: LD_INT 32
3823: PUSH
3824: LD_INT 27
3826: PUSH
3827: LD_INT 36
3829: PUSH
3830: LD_INT 69
3832: PUSH
3833: LD_INT 39
3835: PUSH
3836: LD_INT 34
3838: PUSH
3839: LD_INT 40
3841: PUSH
3842: LD_INT 48
3844: PUSH
3845: LD_INT 49
3847: PUSH
3848: LD_INT 50
3850: PUSH
3851: LD_INT 51
3853: PUSH
3854: LD_INT 52
3856: PUSH
3857: LD_INT 53
3859: PUSH
3860: LD_INT 54
3862: PUSH
3863: LD_INT 55
3865: PUSH
3866: LD_INT 56
3868: PUSH
3869: LD_INT 57
3871: PUSH
3872: LD_INT 58
3874: PUSH
3875: LD_INT 59
3877: PUSH
3878: LD_INT 60
3880: PUSH
3881: LD_INT 61
3883: PUSH
3884: LD_INT 62
3886: PUSH
3887: LD_INT 80
3889: PUSH
3890: LD_INT 82
3892: PUSH
3893: LD_INT 83
3895: PUSH
3896: LD_INT 84
3898: PUSH
3899: LD_INT 85
3901: PUSH
3902: LD_INT 86
3904: PUSH
3905: EMPTY
3906: LIST
3907: LIST
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: LIST
3916: LIST
3917: LIST
3918: LIST
3919: LIST
3920: LIST
3921: LIST
3922: LIST
3923: LIST
3924: LIST
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: LIST
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: LIST
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: LIST
3951: LIST
3952: LIST
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: ST_TO_ADDR
3958: GO 4425
3960: LD_INT 2
3962: DOUBLE
3963: EQUAL
3964: IFTRUE 3968
3966: GO 4194
3968: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3969: LD_ADDR_VAR 0 4
3973: PUSH
3974: LD_INT 35
3976: PUSH
3977: LD_INT 45
3979: PUSH
3980: LD_INT 46
3982: PUSH
3983: LD_INT 47
3985: PUSH
3986: LD_INT 82
3988: PUSH
3989: LD_INT 83
3991: PUSH
3992: LD_INT 84
3994: PUSH
3995: LD_INT 85
3997: PUSH
3998: LD_INT 87
4000: PUSH
4001: LD_INT 70
4003: PUSH
4004: LD_INT 1
4006: PUSH
4007: LD_INT 11
4009: PUSH
4010: LD_INT 3
4012: PUSH
4013: LD_INT 4
4015: PUSH
4016: LD_INT 5
4018: PUSH
4019: LD_INT 6
4021: PUSH
4022: LD_INT 15
4024: PUSH
4025: LD_INT 18
4027: PUSH
4028: LD_INT 7
4030: PUSH
4031: LD_INT 17
4033: PUSH
4034: LD_INT 8
4036: PUSH
4037: LD_INT 20
4039: PUSH
4040: LD_INT 21
4042: PUSH
4043: LD_INT 22
4045: PUSH
4046: LD_INT 72
4048: PUSH
4049: LD_INT 26
4051: PUSH
4052: LD_INT 69
4054: PUSH
4055: LD_INT 39
4057: PUSH
4058: LD_INT 40
4060: PUSH
4061: LD_INT 41
4063: PUSH
4064: LD_INT 42
4066: PUSH
4067: LD_INT 43
4069: PUSH
4070: LD_INT 48
4072: PUSH
4073: LD_INT 49
4075: PUSH
4076: LD_INT 50
4078: PUSH
4079: LD_INT 51
4081: PUSH
4082: LD_INT 52
4084: PUSH
4085: LD_INT 53
4087: PUSH
4088: LD_INT 54
4090: PUSH
4091: LD_INT 55
4093: PUSH
4094: LD_INT 56
4096: PUSH
4097: LD_INT 60
4099: PUSH
4100: LD_INT 61
4102: PUSH
4103: LD_INT 62
4105: PUSH
4106: LD_INT 66
4108: PUSH
4109: LD_INT 67
4111: PUSH
4112: LD_INT 68
4114: PUSH
4115: LD_INT 81
4117: PUSH
4118: LD_INT 82
4120: PUSH
4121: LD_INT 83
4123: PUSH
4124: LD_INT 84
4126: PUSH
4127: LD_INT 85
4129: PUSH
4130: LD_INT 87
4132: PUSH
4133: LD_INT 88
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: LIST
4140: LIST
4141: LIST
4142: LIST
4143: LIST
4144: LIST
4145: LIST
4146: LIST
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: LIST
4152: LIST
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: LIST
4170: LIST
4171: LIST
4172: LIST
4173: LIST
4174: LIST
4175: LIST
4176: LIST
4177: LIST
4178: LIST
4179: LIST
4180: LIST
4181: LIST
4182: LIST
4183: LIST
4184: LIST
4185: LIST
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: LIST
4191: ST_TO_ADDR
4192: GO 4425
4194: LD_INT 3
4196: DOUBLE
4197: EQUAL
4198: IFTRUE 4202
4200: GO 4424
4202: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
4203: LD_ADDR_VAR 0 4
4207: PUSH
4208: LD_INT 46
4210: PUSH
4211: LD_INT 47
4213: PUSH
4214: LD_INT 1
4216: PUSH
4217: LD_INT 2
4219: PUSH
4220: LD_INT 82
4222: PUSH
4223: LD_INT 83
4225: PUSH
4226: LD_INT 84
4228: PUSH
4229: LD_INT 85
4231: PUSH
4232: LD_INT 86
4234: PUSH
4235: LD_INT 11
4237: PUSH
4238: LD_INT 9
4240: PUSH
4241: LD_INT 20
4243: PUSH
4244: LD_INT 19
4246: PUSH
4247: LD_INT 21
4249: PUSH
4250: LD_INT 24
4252: PUSH
4253: LD_INT 22
4255: PUSH
4256: LD_INT 25
4258: PUSH
4259: LD_INT 28
4261: PUSH
4262: LD_INT 29
4264: PUSH
4265: LD_INT 30
4267: PUSH
4268: LD_INT 31
4270: PUSH
4271: LD_INT 37
4273: PUSH
4274: LD_INT 38
4276: PUSH
4277: LD_INT 32
4279: PUSH
4280: LD_INT 27
4282: PUSH
4283: LD_INT 33
4285: PUSH
4286: LD_INT 69
4288: PUSH
4289: LD_INT 39
4291: PUSH
4292: LD_INT 34
4294: PUSH
4295: LD_INT 40
4297: PUSH
4298: LD_INT 71
4300: PUSH
4301: LD_INT 23
4303: PUSH
4304: LD_INT 44
4306: PUSH
4307: LD_INT 48
4309: PUSH
4310: LD_INT 49
4312: PUSH
4313: LD_INT 50
4315: PUSH
4316: LD_INT 51
4318: PUSH
4319: LD_INT 52
4321: PUSH
4322: LD_INT 53
4324: PUSH
4325: LD_INT 54
4327: PUSH
4328: LD_INT 55
4330: PUSH
4331: LD_INT 56
4333: PUSH
4334: LD_INT 57
4336: PUSH
4337: LD_INT 58
4339: PUSH
4340: LD_INT 59
4342: PUSH
4343: LD_INT 63
4345: PUSH
4346: LD_INT 64
4348: PUSH
4349: LD_INT 65
4351: PUSH
4352: LD_INT 82
4354: PUSH
4355: LD_INT 83
4357: PUSH
4358: LD_INT 84
4360: PUSH
4361: LD_INT 85
4363: PUSH
4364: LD_INT 86
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: LIST
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: LIST
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: LIST
4388: LIST
4389: LIST
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: LIST
4400: LIST
4401: LIST
4402: LIST
4403: LIST
4404: LIST
4405: LIST
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: LIST
4421: ST_TO_ADDR
4422: GO 4425
4424: POP
// if state > - 1 and state < 3 then
4425: LD_VAR 0 3
4429: PUSH
4430: LD_INT 1
4432: NEG
4433: GREATER
4434: PUSH
4435: LD_VAR 0 3
4439: PUSH
4440: LD_INT 3
4442: LESS
4443: AND
4444: IFFALSE 4501
// for i in result do
4446: LD_ADDR_VAR 0 5
4450: PUSH
4451: LD_VAR 0 4
4455: PUSH
4456: FOR_IN
4457: IFFALSE 4499
// if GetTech ( i , side ) <> state then
4459: LD_VAR 0 5
4463: PPUSH
4464: LD_VAR 0 1
4468: PPUSH
4469: CALL_OW 321
4473: PUSH
4474: LD_VAR 0 3
4478: NONEQUAL
4479: IFFALSE 4497
// result := result diff i ;
4481: LD_ADDR_VAR 0 4
4485: PUSH
4486: LD_VAR 0 4
4490: PUSH
4491: LD_VAR 0 5
4495: DIFF
4496: ST_TO_ADDR
4497: GO 4456
4499: POP
4500: POP
// end ;
4501: LD_VAR 0 4
4505: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
4506: LD_INT 0
4508: PPUSH
4509: PPUSH
4510: PPUSH
// result := true ;
4511: LD_ADDR_VAR 0 3
4515: PUSH
4516: LD_INT 1
4518: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
4519: LD_ADDR_VAR 0 5
4523: PUSH
4524: LD_VAR 0 2
4528: PPUSH
4529: CALL_OW 480
4533: ST_TO_ADDR
// if not tmp then
4534: LD_VAR 0 5
4538: NOT
4539: IFFALSE 4543
// exit ;
4541: GO 4592
// for i in tmp do
4543: LD_ADDR_VAR 0 4
4547: PUSH
4548: LD_VAR 0 5
4552: PUSH
4553: FOR_IN
4554: IFFALSE 4590
// if GetTech ( i , side ) <> state_researched then
4556: LD_VAR 0 4
4560: PPUSH
4561: LD_VAR 0 1
4565: PPUSH
4566: CALL_OW 321
4570: PUSH
4571: LD_INT 2
4573: NONEQUAL
4574: IFFALSE 4588
// begin result := false ;
4576: LD_ADDR_VAR 0 3
4580: PUSH
4581: LD_INT 0
4583: ST_TO_ADDR
// exit ;
4584: POP
4585: POP
4586: GO 4592
// end ;
4588: GO 4553
4590: POP
4591: POP
// end ;
4592: LD_VAR 0 3
4596: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
4597: LD_INT 0
4599: PPUSH
4600: PPUSH
4601: PPUSH
4602: PPUSH
4603: PPUSH
4604: PPUSH
4605: PPUSH
4606: PPUSH
4607: PPUSH
4608: PPUSH
4609: PPUSH
4610: PPUSH
4611: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
4612: LD_VAR 0 1
4616: NOT
4617: PUSH
4618: LD_VAR 0 1
4622: PPUSH
4623: CALL_OW 257
4627: PUSH
4628: LD_INT 9
4630: NONEQUAL
4631: OR
4632: IFFALSE 4636
// exit ;
4634: GO 5209
// side := GetSide ( unit ) ;
4636: LD_ADDR_VAR 0 9
4640: PUSH
4641: LD_VAR 0 1
4645: PPUSH
4646: CALL_OW 255
4650: ST_TO_ADDR
// tech_space := tech_spacanom ;
4651: LD_ADDR_VAR 0 12
4655: PUSH
4656: LD_INT 29
4658: ST_TO_ADDR
// tech_time := tech_taurad ;
4659: LD_ADDR_VAR 0 13
4663: PUSH
4664: LD_INT 28
4666: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4667: LD_ADDR_VAR 0 11
4671: PUSH
4672: LD_VAR 0 1
4676: PPUSH
4677: CALL_OW 310
4681: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4682: LD_VAR 0 11
4686: PPUSH
4687: CALL_OW 247
4691: PUSH
4692: LD_INT 2
4694: EQUAL
4695: IFFALSE 4699
// exit ;
4697: GO 5209
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4699: LD_ADDR_VAR 0 8
4703: PUSH
4704: LD_INT 81
4706: PUSH
4707: LD_VAR 0 9
4711: PUSH
4712: EMPTY
4713: LIST
4714: LIST
4715: PUSH
4716: LD_INT 3
4718: PUSH
4719: LD_INT 21
4721: PUSH
4722: LD_INT 3
4724: PUSH
4725: EMPTY
4726: LIST
4727: LIST
4728: PUSH
4729: EMPTY
4730: LIST
4731: LIST
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: PPUSH
4737: CALL_OW 69
4741: ST_TO_ADDR
// if not tmp then
4742: LD_VAR 0 8
4746: NOT
4747: IFFALSE 4751
// exit ;
4749: GO 5209
// if in_unit then
4751: LD_VAR 0 11
4755: IFFALSE 4779
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4757: LD_ADDR_VAR 0 10
4761: PUSH
4762: LD_VAR 0 8
4766: PPUSH
4767: LD_VAR 0 11
4771: PPUSH
4772: CALL_OW 74
4776: ST_TO_ADDR
4777: GO 4799
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4779: LD_ADDR_VAR 0 10
4783: PUSH
4784: LD_VAR 0 8
4788: PPUSH
4789: LD_VAR 0 1
4793: PPUSH
4794: CALL_OW 74
4798: ST_TO_ADDR
// if not enemy then
4799: LD_VAR 0 10
4803: NOT
4804: IFFALSE 4808
// exit ;
4806: GO 5209
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4808: LD_VAR 0 11
4812: PUSH
4813: LD_VAR 0 11
4817: PPUSH
4818: LD_VAR 0 10
4822: PPUSH
4823: CALL_OW 296
4827: PUSH
4828: LD_INT 13
4830: GREATER
4831: AND
4832: PUSH
4833: LD_VAR 0 1
4837: PPUSH
4838: LD_VAR 0 10
4842: PPUSH
4843: CALL_OW 296
4847: PUSH
4848: LD_INT 12
4850: GREATER
4851: OR
4852: IFFALSE 4856
// exit ;
4854: GO 5209
// missile := [ 1 ] ;
4856: LD_ADDR_VAR 0 14
4860: PUSH
4861: LD_INT 1
4863: PUSH
4864: EMPTY
4865: LIST
4866: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4867: LD_VAR 0 9
4871: PPUSH
4872: LD_VAR 0 12
4876: PPUSH
4877: CALL_OW 325
4881: IFFALSE 4910
// missile := Replace ( missile , missile + 1 , 2 ) ;
4883: LD_ADDR_VAR 0 14
4887: PUSH
4888: LD_VAR 0 14
4892: PPUSH
4893: LD_VAR 0 14
4897: PUSH
4898: LD_INT 1
4900: PLUS
4901: PPUSH
4902: LD_INT 2
4904: PPUSH
4905: CALL_OW 1
4909: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4910: LD_VAR 0 9
4914: PPUSH
4915: LD_VAR 0 13
4919: PPUSH
4920: CALL_OW 325
4924: PUSH
4925: LD_VAR 0 10
4929: PPUSH
4930: CALL_OW 255
4934: PPUSH
4935: LD_VAR 0 13
4939: PPUSH
4940: CALL_OW 325
4944: NOT
4945: AND
4946: IFFALSE 4975
// missile := Replace ( missile , missile + 1 , 3 ) ;
4948: LD_ADDR_VAR 0 14
4952: PUSH
4953: LD_VAR 0 14
4957: PPUSH
4958: LD_VAR 0 14
4962: PUSH
4963: LD_INT 1
4965: PLUS
4966: PPUSH
4967: LD_INT 3
4969: PPUSH
4970: CALL_OW 1
4974: ST_TO_ADDR
// if missile < 2 then
4975: LD_VAR 0 14
4979: PUSH
4980: LD_INT 2
4982: LESS
4983: IFFALSE 4987
// exit ;
4985: GO 5209
// x := GetX ( enemy ) ;
4987: LD_ADDR_VAR 0 4
4991: PUSH
4992: LD_VAR 0 10
4996: PPUSH
4997: CALL_OW 250
5001: ST_TO_ADDR
// y := GetY ( enemy ) ;
5002: LD_ADDR_VAR 0 5
5006: PUSH
5007: LD_VAR 0 10
5011: PPUSH
5012: CALL_OW 251
5016: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
5017: LD_ADDR_VAR 0 6
5021: PUSH
5022: LD_VAR 0 4
5026: PUSH
5027: LD_INT 1
5029: NEG
5030: PPUSH
5031: LD_INT 1
5033: PPUSH
5034: CALL_OW 12
5038: PLUS
5039: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
5040: LD_ADDR_VAR 0 7
5044: PUSH
5045: LD_VAR 0 5
5049: PUSH
5050: LD_INT 1
5052: NEG
5053: PPUSH
5054: LD_INT 1
5056: PPUSH
5057: CALL_OW 12
5061: PLUS
5062: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5063: LD_VAR 0 6
5067: PPUSH
5068: LD_VAR 0 7
5072: PPUSH
5073: CALL_OW 488
5077: NOT
5078: IFFALSE 5100
// begin _x := x ;
5080: LD_ADDR_VAR 0 6
5084: PUSH
5085: LD_VAR 0 4
5089: ST_TO_ADDR
// _y := y ;
5090: LD_ADDR_VAR 0 7
5094: PUSH
5095: LD_VAR 0 5
5099: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
5100: LD_ADDR_VAR 0 3
5104: PUSH
5105: LD_INT 1
5107: PPUSH
5108: LD_VAR 0 14
5112: PPUSH
5113: CALL_OW 12
5117: ST_TO_ADDR
// case i of 1 :
5118: LD_VAR 0 3
5122: PUSH
5123: LD_INT 1
5125: DOUBLE
5126: EQUAL
5127: IFTRUE 5131
5129: GO 5148
5131: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
5132: LD_VAR 0 1
5136: PPUSH
5137: LD_VAR 0 10
5141: PPUSH
5142: CALL_OW 115
5146: GO 5209
5148: LD_INT 2
5150: DOUBLE
5151: EQUAL
5152: IFTRUE 5156
5154: GO 5178
5156: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
5157: LD_VAR 0 1
5161: PPUSH
5162: LD_VAR 0 6
5166: PPUSH
5167: LD_VAR 0 7
5171: PPUSH
5172: CALL_OW 153
5176: GO 5209
5178: LD_INT 3
5180: DOUBLE
5181: EQUAL
5182: IFTRUE 5186
5184: GO 5208
5186: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
5187: LD_VAR 0 1
5191: PPUSH
5192: LD_VAR 0 6
5196: PPUSH
5197: LD_VAR 0 7
5201: PPUSH
5202: CALL_OW 154
5206: GO 5209
5208: POP
// end ;
5209: LD_VAR 0 2
5213: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
5214: LD_INT 0
5216: PPUSH
5217: PPUSH
5218: PPUSH
5219: PPUSH
5220: PPUSH
5221: PPUSH
// if not unit or not building then
5222: LD_VAR 0 1
5226: NOT
5227: PUSH
5228: LD_VAR 0 2
5232: NOT
5233: OR
5234: IFFALSE 5238
// exit ;
5236: GO 5396
// x := GetX ( building ) ;
5238: LD_ADDR_VAR 0 5
5242: PUSH
5243: LD_VAR 0 2
5247: PPUSH
5248: CALL_OW 250
5252: ST_TO_ADDR
// y := GetY ( building ) ;
5253: LD_ADDR_VAR 0 6
5257: PUSH
5258: LD_VAR 0 2
5262: PPUSH
5263: CALL_OW 251
5267: ST_TO_ADDR
// for i = 0 to 5 do
5268: LD_ADDR_VAR 0 4
5272: PUSH
5273: DOUBLE
5274: LD_INT 0
5276: DEC
5277: ST_TO_ADDR
5278: LD_INT 5
5280: PUSH
5281: FOR_TO
5282: IFFALSE 5394
// begin _x := ShiftX ( x , i , 3 ) ;
5284: LD_ADDR_VAR 0 7
5288: PUSH
5289: LD_VAR 0 5
5293: PPUSH
5294: LD_VAR 0 4
5298: PPUSH
5299: LD_INT 3
5301: PPUSH
5302: CALL_OW 272
5306: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
5307: LD_ADDR_VAR 0 8
5311: PUSH
5312: LD_VAR 0 6
5316: PPUSH
5317: LD_VAR 0 4
5321: PPUSH
5322: LD_INT 3
5324: PPUSH
5325: CALL_OW 273
5329: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5330: LD_VAR 0 7
5334: PPUSH
5335: LD_VAR 0 8
5339: PPUSH
5340: CALL_OW 488
5344: NOT
5345: IFFALSE 5349
// continue ;
5347: GO 5281
// if HexInfo ( _x , _y ) = 0 then
5349: LD_VAR 0 7
5353: PPUSH
5354: LD_VAR 0 8
5358: PPUSH
5359: CALL_OW 428
5363: PUSH
5364: LD_INT 0
5366: EQUAL
5367: IFFALSE 5392
// begin ComMoveXY ( unit , _x , _y ) ;
5369: LD_VAR 0 1
5373: PPUSH
5374: LD_VAR 0 7
5378: PPUSH
5379: LD_VAR 0 8
5383: PPUSH
5384: CALL_OW 111
// exit ;
5388: POP
5389: POP
5390: GO 5396
// end ; end ;
5392: GO 5281
5394: POP
5395: POP
// end ;
5396: LD_VAR 0 3
5400: RET
// export function ScanBase ( side , base_area ) ; begin
5401: LD_INT 0
5403: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
5404: LD_ADDR_VAR 0 3
5408: PUSH
5409: LD_VAR 0 2
5413: PPUSH
5414: LD_INT 81
5416: PUSH
5417: LD_VAR 0 1
5421: PUSH
5422: EMPTY
5423: LIST
5424: LIST
5425: PPUSH
5426: CALL_OW 70
5430: ST_TO_ADDR
// end ;
5431: LD_VAR 0 3
5435: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
5436: LD_INT 0
5438: PPUSH
5439: PPUSH
5440: PPUSH
5441: PPUSH
// result := false ;
5442: LD_ADDR_VAR 0 2
5446: PUSH
5447: LD_INT 0
5449: ST_TO_ADDR
// side := GetSide ( unit ) ;
5450: LD_ADDR_VAR 0 3
5454: PUSH
5455: LD_VAR 0 1
5459: PPUSH
5460: CALL_OW 255
5464: ST_TO_ADDR
// nat := GetNation ( unit ) ;
5465: LD_ADDR_VAR 0 4
5469: PUSH
5470: LD_VAR 0 1
5474: PPUSH
5475: CALL_OW 248
5479: ST_TO_ADDR
// case nat of 1 :
5480: LD_VAR 0 4
5484: PUSH
5485: LD_INT 1
5487: DOUBLE
5488: EQUAL
5489: IFTRUE 5493
5491: GO 5504
5493: POP
// tech := tech_lassight ; 2 :
5494: LD_ADDR_VAR 0 5
5498: PUSH
5499: LD_INT 12
5501: ST_TO_ADDR
5502: GO 5543
5504: LD_INT 2
5506: DOUBLE
5507: EQUAL
5508: IFTRUE 5512
5510: GO 5523
5512: POP
// tech := tech_mortar ; 3 :
5513: LD_ADDR_VAR 0 5
5517: PUSH
5518: LD_INT 41
5520: ST_TO_ADDR
5521: GO 5543
5523: LD_INT 3
5525: DOUBLE
5526: EQUAL
5527: IFTRUE 5531
5529: GO 5542
5531: POP
// tech := tech_bazooka ; end ;
5532: LD_ADDR_VAR 0 5
5536: PUSH
5537: LD_INT 44
5539: ST_TO_ADDR
5540: GO 5543
5542: POP
// if Researched ( side , tech ) then
5543: LD_VAR 0 3
5547: PPUSH
5548: LD_VAR 0 5
5552: PPUSH
5553: CALL_OW 325
5557: IFFALSE 5584
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
5559: LD_ADDR_VAR 0 2
5563: PUSH
5564: LD_INT 5
5566: PUSH
5567: LD_INT 8
5569: PUSH
5570: LD_INT 9
5572: PUSH
5573: EMPTY
5574: LIST
5575: LIST
5576: LIST
5577: PUSH
5578: LD_VAR 0 4
5582: ARRAY
5583: ST_TO_ADDR
// end ;
5584: LD_VAR 0 2
5588: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
5589: LD_INT 0
5591: PPUSH
5592: PPUSH
5593: PPUSH
// if not mines then
5594: LD_VAR 0 2
5598: NOT
5599: IFFALSE 5603
// exit ;
5601: GO 5747
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5603: LD_ADDR_VAR 0 5
5607: PUSH
5608: LD_INT 81
5610: PUSH
5611: LD_VAR 0 1
5615: PUSH
5616: EMPTY
5617: LIST
5618: LIST
5619: PUSH
5620: LD_INT 3
5622: PUSH
5623: LD_INT 21
5625: PUSH
5626: LD_INT 3
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: PUSH
5633: EMPTY
5634: LIST
5635: LIST
5636: PUSH
5637: EMPTY
5638: LIST
5639: LIST
5640: PPUSH
5641: CALL_OW 69
5645: ST_TO_ADDR
// for i in mines do
5646: LD_ADDR_VAR 0 4
5650: PUSH
5651: LD_VAR 0 2
5655: PUSH
5656: FOR_IN
5657: IFFALSE 5745
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5659: LD_VAR 0 4
5663: PUSH
5664: LD_INT 1
5666: ARRAY
5667: PPUSH
5668: LD_VAR 0 4
5672: PUSH
5673: LD_INT 2
5675: ARRAY
5676: PPUSH
5677: CALL_OW 458
5681: NOT
5682: IFFALSE 5686
// continue ;
5684: GO 5656
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5686: LD_VAR 0 4
5690: PUSH
5691: LD_INT 1
5693: ARRAY
5694: PPUSH
5695: LD_VAR 0 4
5699: PUSH
5700: LD_INT 2
5702: ARRAY
5703: PPUSH
5704: CALL_OW 428
5708: PUSH
5709: LD_VAR 0 5
5713: IN
5714: IFFALSE 5743
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5716: LD_VAR 0 4
5720: PUSH
5721: LD_INT 1
5723: ARRAY
5724: PPUSH
5725: LD_VAR 0 4
5729: PUSH
5730: LD_INT 2
5732: ARRAY
5733: PPUSH
5734: LD_VAR 0 1
5738: PPUSH
5739: CALL_OW 456
// end ;
5743: GO 5656
5745: POP
5746: POP
// end ;
5747: LD_VAR 0 3
5751: RET
// export function Count ( array ) ; begin
5752: LD_INT 0
5754: PPUSH
// result := array + 0 ;
5755: LD_ADDR_VAR 0 2
5759: PUSH
5760: LD_VAR 0 1
5764: PUSH
5765: LD_INT 0
5767: PLUS
5768: ST_TO_ADDR
// end ;
5769: LD_VAR 0 2
5773: RET
// export function IsEmpty ( building ) ; begin
5774: LD_INT 0
5776: PPUSH
// if not building then
5777: LD_VAR 0 1
5781: NOT
5782: IFFALSE 5786
// exit ;
5784: GO 5829
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5786: LD_ADDR_VAR 0 2
5790: PUSH
5791: LD_VAR 0 1
5795: PUSH
5796: LD_INT 22
5798: PUSH
5799: LD_VAR 0 1
5803: PPUSH
5804: CALL_OW 255
5808: PUSH
5809: EMPTY
5810: LIST
5811: LIST
5812: PUSH
5813: LD_INT 58
5815: PUSH
5816: EMPTY
5817: LIST
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: PPUSH
5823: CALL_OW 69
5827: IN
5828: ST_TO_ADDR
// end ;
5829: LD_VAR 0 2
5833: RET
// export function IsNotFull ( building ) ; var places ; begin
5834: LD_INT 0
5836: PPUSH
5837: PPUSH
// if not building then
5838: LD_VAR 0 1
5842: NOT
5843: IFFALSE 5847
// exit ;
5845: GO 5875
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5847: LD_ADDR_VAR 0 2
5851: PUSH
5852: LD_VAR 0 1
5856: PPUSH
5857: LD_INT 3
5859: PUSH
5860: LD_INT 62
5862: PUSH
5863: EMPTY
5864: LIST
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: PPUSH
5870: CALL_OW 72
5874: ST_TO_ADDR
// end ;
5875: LD_VAR 0 2
5879: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5880: LD_INT 0
5882: PPUSH
5883: PPUSH
5884: PPUSH
5885: PPUSH
// tmp := [ ] ;
5886: LD_ADDR_VAR 0 3
5890: PUSH
5891: EMPTY
5892: ST_TO_ADDR
// list := [ ] ;
5893: LD_ADDR_VAR 0 5
5897: PUSH
5898: EMPTY
5899: ST_TO_ADDR
// for i = 16 to 25 do
5900: LD_ADDR_VAR 0 4
5904: PUSH
5905: DOUBLE
5906: LD_INT 16
5908: DEC
5909: ST_TO_ADDR
5910: LD_INT 25
5912: PUSH
5913: FOR_TO
5914: IFFALSE 5987
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5916: LD_ADDR_VAR 0 3
5920: PUSH
5921: LD_VAR 0 3
5925: PUSH
5926: LD_INT 22
5928: PUSH
5929: LD_VAR 0 1
5933: PPUSH
5934: CALL_OW 255
5938: PUSH
5939: EMPTY
5940: LIST
5941: LIST
5942: PUSH
5943: LD_INT 91
5945: PUSH
5946: LD_VAR 0 1
5950: PUSH
5951: LD_INT 6
5953: PUSH
5954: EMPTY
5955: LIST
5956: LIST
5957: LIST
5958: PUSH
5959: LD_INT 30
5961: PUSH
5962: LD_VAR 0 4
5966: PUSH
5967: EMPTY
5968: LIST
5969: LIST
5970: PUSH
5971: EMPTY
5972: LIST
5973: LIST
5974: LIST
5975: PUSH
5976: EMPTY
5977: LIST
5978: PPUSH
5979: CALL_OW 69
5983: ADD
5984: ST_TO_ADDR
5985: GO 5913
5987: POP
5988: POP
// for i = 1 to tmp do
5989: LD_ADDR_VAR 0 4
5993: PUSH
5994: DOUBLE
5995: LD_INT 1
5997: DEC
5998: ST_TO_ADDR
5999: LD_VAR 0 3
6003: PUSH
6004: FOR_TO
6005: IFFALSE 6093
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
6007: LD_ADDR_VAR 0 5
6011: PUSH
6012: LD_VAR 0 5
6016: PUSH
6017: LD_VAR 0 3
6021: PUSH
6022: LD_VAR 0 4
6026: ARRAY
6027: PPUSH
6028: CALL_OW 266
6032: PUSH
6033: LD_VAR 0 3
6037: PUSH
6038: LD_VAR 0 4
6042: ARRAY
6043: PPUSH
6044: CALL_OW 250
6048: PUSH
6049: LD_VAR 0 3
6053: PUSH
6054: LD_VAR 0 4
6058: ARRAY
6059: PPUSH
6060: CALL_OW 251
6064: PUSH
6065: LD_VAR 0 3
6069: PUSH
6070: LD_VAR 0 4
6074: ARRAY
6075: PPUSH
6076: CALL_OW 254
6080: PUSH
6081: EMPTY
6082: LIST
6083: LIST
6084: LIST
6085: LIST
6086: PUSH
6087: EMPTY
6088: LIST
6089: ADD
6090: ST_TO_ADDR
6091: GO 6004
6093: POP
6094: POP
// result := list ;
6095: LD_ADDR_VAR 0 2
6099: PUSH
6100: LD_VAR 0 5
6104: ST_TO_ADDR
// end ;
6105: LD_VAR 0 2
6109: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
6110: LD_INT 0
6112: PPUSH
6113: PPUSH
6114: PPUSH
6115: PPUSH
6116: PPUSH
6117: PPUSH
6118: PPUSH
// if not factory then
6119: LD_VAR 0 1
6123: NOT
6124: IFFALSE 6128
// exit ;
6126: GO 6721
// if control = control_apeman then
6128: LD_VAR 0 4
6132: PUSH
6133: LD_INT 5
6135: EQUAL
6136: IFFALSE 6245
// begin tmp := UnitsInside ( factory ) ;
6138: LD_ADDR_VAR 0 8
6142: PUSH
6143: LD_VAR 0 1
6147: PPUSH
6148: CALL_OW 313
6152: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
6153: LD_VAR 0 8
6157: PPUSH
6158: LD_INT 25
6160: PUSH
6161: LD_INT 12
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: PPUSH
6168: CALL_OW 72
6172: NOT
6173: IFFALSE 6183
// control := control_manual ;
6175: LD_ADDR_VAR 0 4
6179: PUSH
6180: LD_INT 1
6182: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
6183: LD_ADDR_VAR 0 8
6187: PUSH
6188: LD_VAR 0 1
6192: PPUSH
6193: CALL 5880 0 1
6197: ST_TO_ADDR
// if tmp then
6198: LD_VAR 0 8
6202: IFFALSE 6245
// begin for i in tmp do
6204: LD_ADDR_VAR 0 7
6208: PUSH
6209: LD_VAR 0 8
6213: PUSH
6214: FOR_IN
6215: IFFALSE 6243
// if i [ 1 ] = b_ext_radio then
6217: LD_VAR 0 7
6221: PUSH
6222: LD_INT 1
6224: ARRAY
6225: PUSH
6226: LD_INT 22
6228: EQUAL
6229: IFFALSE 6241
// begin control := control_remote ;
6231: LD_ADDR_VAR 0 4
6235: PUSH
6236: LD_INT 2
6238: ST_TO_ADDR
// break ;
6239: GO 6243
// end ;
6241: GO 6214
6243: POP
6244: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6245: LD_VAR 0 1
6249: PPUSH
6250: LD_VAR 0 2
6254: PPUSH
6255: LD_VAR 0 3
6259: PPUSH
6260: LD_VAR 0 4
6264: PPUSH
6265: LD_VAR 0 5
6269: PPUSH
6270: CALL_OW 448
6274: IFFALSE 6309
// begin result := [ chassis , engine , control , weapon ] ;
6276: LD_ADDR_VAR 0 6
6280: PUSH
6281: LD_VAR 0 2
6285: PUSH
6286: LD_VAR 0 3
6290: PUSH
6291: LD_VAR 0 4
6295: PUSH
6296: LD_VAR 0 5
6300: PUSH
6301: EMPTY
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: ST_TO_ADDR
// exit ;
6307: GO 6721
// end ; _chassis := AvailableChassisList ( factory ) ;
6309: LD_ADDR_VAR 0 9
6313: PUSH
6314: LD_VAR 0 1
6318: PPUSH
6319: CALL_OW 475
6323: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
6324: LD_ADDR_VAR 0 11
6328: PUSH
6329: LD_VAR 0 1
6333: PPUSH
6334: CALL_OW 476
6338: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
6339: LD_ADDR_VAR 0 12
6343: PUSH
6344: LD_VAR 0 1
6348: PPUSH
6349: CALL_OW 477
6353: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
6354: LD_ADDR_VAR 0 10
6358: PUSH
6359: LD_VAR 0 1
6363: PPUSH
6364: CALL_OW 478
6368: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
6369: LD_VAR 0 9
6373: NOT
6374: PUSH
6375: LD_VAR 0 11
6379: NOT
6380: OR
6381: PUSH
6382: LD_VAR 0 12
6386: NOT
6387: OR
6388: PUSH
6389: LD_VAR 0 10
6393: NOT
6394: OR
6395: IFFALSE 6430
// begin result := [ chassis , engine , control , weapon ] ;
6397: LD_ADDR_VAR 0 6
6401: PUSH
6402: LD_VAR 0 2
6406: PUSH
6407: LD_VAR 0 3
6411: PUSH
6412: LD_VAR 0 4
6416: PUSH
6417: LD_VAR 0 5
6421: PUSH
6422: EMPTY
6423: LIST
6424: LIST
6425: LIST
6426: LIST
6427: ST_TO_ADDR
// exit ;
6428: GO 6721
// end ; if not chassis in _chassis then
6430: LD_VAR 0 2
6434: PUSH
6435: LD_VAR 0 9
6439: IN
6440: NOT
6441: IFFALSE 6467
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
6443: LD_ADDR_VAR 0 2
6447: PUSH
6448: LD_VAR 0 9
6452: PUSH
6453: LD_INT 1
6455: PPUSH
6456: LD_VAR 0 9
6460: PPUSH
6461: CALL_OW 12
6465: ARRAY
6466: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
6467: LD_VAR 0 2
6471: PPUSH
6472: LD_VAR 0 3
6476: PPUSH
6477: CALL 6726 0 2
6481: NOT
6482: IFFALSE 6541
// repeat engine := _engine [ 1 ] ;
6484: LD_ADDR_VAR 0 3
6488: PUSH
6489: LD_VAR 0 11
6493: PUSH
6494: LD_INT 1
6496: ARRAY
6497: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
6498: LD_ADDR_VAR 0 11
6502: PUSH
6503: LD_VAR 0 11
6507: PPUSH
6508: LD_INT 1
6510: PPUSH
6511: CALL_OW 3
6515: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
6516: LD_VAR 0 2
6520: PPUSH
6521: LD_VAR 0 3
6525: PPUSH
6526: CALL 6726 0 2
6530: PUSH
6531: LD_VAR 0 11
6535: PUSH
6536: EMPTY
6537: EQUAL
6538: OR
6539: IFFALSE 6484
// if not control in _control then
6541: LD_VAR 0 4
6545: PUSH
6546: LD_VAR 0 12
6550: IN
6551: NOT
6552: IFFALSE 6578
// control := _control [ rand ( 1 , _control ) ] ;
6554: LD_ADDR_VAR 0 4
6558: PUSH
6559: LD_VAR 0 12
6563: PUSH
6564: LD_INT 1
6566: PPUSH
6567: LD_VAR 0 12
6571: PPUSH
6572: CALL_OW 12
6576: ARRAY
6577: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
6578: LD_VAR 0 2
6582: PPUSH
6583: LD_VAR 0 5
6587: PPUSH
6588: CALL 6946 0 2
6592: NOT
6593: IFFALSE 6652
// repeat weapon := _weapon [ 1 ] ;
6595: LD_ADDR_VAR 0 5
6599: PUSH
6600: LD_VAR 0 10
6604: PUSH
6605: LD_INT 1
6607: ARRAY
6608: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
6609: LD_ADDR_VAR 0 10
6613: PUSH
6614: LD_VAR 0 10
6618: PPUSH
6619: LD_INT 1
6621: PPUSH
6622: CALL_OW 3
6626: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6627: LD_VAR 0 2
6631: PPUSH
6632: LD_VAR 0 5
6636: PPUSH
6637: CALL 6946 0 2
6641: PUSH
6642: LD_VAR 0 10
6646: PUSH
6647: EMPTY
6648: EQUAL
6649: OR
6650: IFFALSE 6595
// result := [ ] ;
6652: LD_ADDR_VAR 0 6
6656: PUSH
6657: EMPTY
6658: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6659: LD_VAR 0 1
6663: PPUSH
6664: LD_VAR 0 2
6668: PPUSH
6669: LD_VAR 0 3
6673: PPUSH
6674: LD_VAR 0 4
6678: PPUSH
6679: LD_VAR 0 5
6683: PPUSH
6684: CALL_OW 448
6688: IFFALSE 6721
// result := [ chassis , engine , control , weapon ] ;
6690: LD_ADDR_VAR 0 6
6694: PUSH
6695: LD_VAR 0 2
6699: PUSH
6700: LD_VAR 0 3
6704: PUSH
6705: LD_VAR 0 4
6709: PUSH
6710: LD_VAR 0 5
6714: PUSH
6715: EMPTY
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: ST_TO_ADDR
// end ;
6721: LD_VAR 0 6
6725: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6726: LD_INT 0
6728: PPUSH
// if not chassis or not engine then
6729: LD_VAR 0 1
6733: NOT
6734: PUSH
6735: LD_VAR 0 2
6739: NOT
6740: OR
6741: IFFALSE 6745
// exit ;
6743: GO 6941
// case engine of engine_solar :
6745: LD_VAR 0 2
6749: PUSH
6750: LD_INT 2
6752: DOUBLE
6753: EQUAL
6754: IFTRUE 6758
6756: GO 6796
6758: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6759: LD_ADDR_VAR 0 3
6763: PUSH
6764: LD_INT 11
6766: PUSH
6767: LD_INT 12
6769: PUSH
6770: LD_INT 13
6772: PUSH
6773: LD_INT 14
6775: PUSH
6776: LD_INT 1
6778: PUSH
6779: LD_INT 2
6781: PUSH
6782: LD_INT 3
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: LIST
6792: LIST
6793: ST_TO_ADDR
6794: GO 6925
6796: LD_INT 1
6798: DOUBLE
6799: EQUAL
6800: IFTRUE 6804
6802: GO 6866
6804: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6805: LD_ADDR_VAR 0 3
6809: PUSH
6810: LD_INT 11
6812: PUSH
6813: LD_INT 12
6815: PUSH
6816: LD_INT 13
6818: PUSH
6819: LD_INT 14
6821: PUSH
6822: LD_INT 1
6824: PUSH
6825: LD_INT 2
6827: PUSH
6828: LD_INT 3
6830: PUSH
6831: LD_INT 4
6833: PUSH
6834: LD_INT 5
6836: PUSH
6837: LD_INT 21
6839: PUSH
6840: LD_INT 23
6842: PUSH
6843: LD_INT 22
6845: PUSH
6846: LD_INT 24
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: LIST
6856: LIST
6857: LIST
6858: LIST
6859: LIST
6860: LIST
6861: LIST
6862: LIST
6863: ST_TO_ADDR
6864: GO 6925
6866: LD_INT 3
6868: DOUBLE
6869: EQUAL
6870: IFTRUE 6874
6872: GO 6924
6874: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6875: LD_ADDR_VAR 0 3
6879: PUSH
6880: LD_INT 13
6882: PUSH
6883: LD_INT 14
6885: PUSH
6886: LD_INT 2
6888: PUSH
6889: LD_INT 3
6891: PUSH
6892: LD_INT 4
6894: PUSH
6895: LD_INT 5
6897: PUSH
6898: LD_INT 21
6900: PUSH
6901: LD_INT 22
6903: PUSH
6904: LD_INT 23
6906: PUSH
6907: LD_INT 24
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: ST_TO_ADDR
6922: GO 6925
6924: POP
// result := ( chassis in result ) ;
6925: LD_ADDR_VAR 0 3
6929: PUSH
6930: LD_VAR 0 1
6934: PUSH
6935: LD_VAR 0 3
6939: IN
6940: ST_TO_ADDR
// end ;
6941: LD_VAR 0 3
6945: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6946: LD_INT 0
6948: PPUSH
// if not chassis or not weapon then
6949: LD_VAR 0 1
6953: NOT
6954: PUSH
6955: LD_VAR 0 2
6959: NOT
6960: OR
6961: IFFALSE 6965
// exit ;
6963: GO 8025
// case weapon of us_machine_gun :
6965: LD_VAR 0 2
6969: PUSH
6970: LD_INT 2
6972: DOUBLE
6973: EQUAL
6974: IFTRUE 6978
6976: GO 7008
6978: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6979: LD_ADDR_VAR 0 3
6983: PUSH
6984: LD_INT 1
6986: PUSH
6987: LD_INT 2
6989: PUSH
6990: LD_INT 3
6992: PUSH
6993: LD_INT 4
6995: PUSH
6996: LD_INT 5
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: ST_TO_ADDR
7006: GO 8009
7008: LD_INT 3
7010: DOUBLE
7011: EQUAL
7012: IFTRUE 7016
7014: GO 7046
7016: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
7017: LD_ADDR_VAR 0 3
7021: PUSH
7022: LD_INT 1
7024: PUSH
7025: LD_INT 2
7027: PUSH
7028: LD_INT 3
7030: PUSH
7031: LD_INT 4
7033: PUSH
7034: LD_INT 5
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: LIST
7043: ST_TO_ADDR
7044: GO 8009
7046: LD_INT 11
7048: DOUBLE
7049: EQUAL
7050: IFTRUE 7054
7052: GO 7084
7054: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
7055: LD_ADDR_VAR 0 3
7059: PUSH
7060: LD_INT 1
7062: PUSH
7063: LD_INT 2
7065: PUSH
7066: LD_INT 3
7068: PUSH
7069: LD_INT 4
7071: PUSH
7072: LD_INT 5
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: LIST
7079: LIST
7080: LIST
7081: ST_TO_ADDR
7082: GO 8009
7084: LD_INT 4
7086: DOUBLE
7087: EQUAL
7088: IFTRUE 7092
7090: GO 7118
7092: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
7093: LD_ADDR_VAR 0 3
7097: PUSH
7098: LD_INT 2
7100: PUSH
7101: LD_INT 3
7103: PUSH
7104: LD_INT 4
7106: PUSH
7107: LD_INT 5
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: ST_TO_ADDR
7116: GO 8009
7118: LD_INT 5
7120: DOUBLE
7121: EQUAL
7122: IFTRUE 7126
7124: GO 7152
7126: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
7127: LD_ADDR_VAR 0 3
7131: PUSH
7132: LD_INT 2
7134: PUSH
7135: LD_INT 3
7137: PUSH
7138: LD_INT 4
7140: PUSH
7141: LD_INT 5
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: ST_TO_ADDR
7150: GO 8009
7152: LD_INT 9
7154: DOUBLE
7155: EQUAL
7156: IFTRUE 7160
7158: GO 7186
7160: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
7161: LD_ADDR_VAR 0 3
7165: PUSH
7166: LD_INT 2
7168: PUSH
7169: LD_INT 3
7171: PUSH
7172: LD_INT 4
7174: PUSH
7175: LD_INT 5
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: ST_TO_ADDR
7184: GO 8009
7186: LD_INT 7
7188: DOUBLE
7189: EQUAL
7190: IFTRUE 7194
7192: GO 7220
7194: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
7195: LD_ADDR_VAR 0 3
7199: PUSH
7200: LD_INT 2
7202: PUSH
7203: LD_INT 3
7205: PUSH
7206: LD_INT 4
7208: PUSH
7209: LD_INT 5
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: ST_TO_ADDR
7218: GO 8009
7220: LD_INT 12
7222: DOUBLE
7223: EQUAL
7224: IFTRUE 7228
7226: GO 7254
7228: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
7229: LD_ADDR_VAR 0 3
7233: PUSH
7234: LD_INT 2
7236: PUSH
7237: LD_INT 3
7239: PUSH
7240: LD_INT 4
7242: PUSH
7243: LD_INT 5
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: LIST
7250: LIST
7251: ST_TO_ADDR
7252: GO 8009
7254: LD_INT 13
7256: DOUBLE
7257: EQUAL
7258: IFTRUE 7262
7260: GO 7288
7262: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
7263: LD_ADDR_VAR 0 3
7267: PUSH
7268: LD_INT 2
7270: PUSH
7271: LD_INT 3
7273: PUSH
7274: LD_INT 4
7276: PUSH
7277: LD_INT 5
7279: PUSH
7280: EMPTY
7281: LIST
7282: LIST
7283: LIST
7284: LIST
7285: ST_TO_ADDR
7286: GO 8009
7288: LD_INT 14
7290: DOUBLE
7291: EQUAL
7292: IFTRUE 7296
7294: GO 7314
7296: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
7297: LD_ADDR_VAR 0 3
7301: PUSH
7302: LD_INT 4
7304: PUSH
7305: LD_INT 5
7307: PUSH
7308: EMPTY
7309: LIST
7310: LIST
7311: ST_TO_ADDR
7312: GO 8009
7314: LD_INT 6
7316: DOUBLE
7317: EQUAL
7318: IFTRUE 7322
7320: GO 7340
7322: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
7323: LD_ADDR_VAR 0 3
7327: PUSH
7328: LD_INT 4
7330: PUSH
7331: LD_INT 5
7333: PUSH
7334: EMPTY
7335: LIST
7336: LIST
7337: ST_TO_ADDR
7338: GO 8009
7340: LD_INT 10
7342: DOUBLE
7343: EQUAL
7344: IFTRUE 7348
7346: GO 7366
7348: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
7349: LD_ADDR_VAR 0 3
7353: PUSH
7354: LD_INT 4
7356: PUSH
7357: LD_INT 5
7359: PUSH
7360: EMPTY
7361: LIST
7362: LIST
7363: ST_TO_ADDR
7364: GO 8009
7366: LD_INT 22
7368: DOUBLE
7369: EQUAL
7370: IFTRUE 7374
7372: GO 7400
7374: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
7375: LD_ADDR_VAR 0 3
7379: PUSH
7380: LD_INT 11
7382: PUSH
7383: LD_INT 12
7385: PUSH
7386: LD_INT 13
7388: PUSH
7389: LD_INT 14
7391: PUSH
7392: EMPTY
7393: LIST
7394: LIST
7395: LIST
7396: LIST
7397: ST_TO_ADDR
7398: GO 8009
7400: LD_INT 23
7402: DOUBLE
7403: EQUAL
7404: IFTRUE 7408
7406: GO 7434
7408: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
7409: LD_ADDR_VAR 0 3
7413: PUSH
7414: LD_INT 11
7416: PUSH
7417: LD_INT 12
7419: PUSH
7420: LD_INT 13
7422: PUSH
7423: LD_INT 14
7425: PUSH
7426: EMPTY
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: ST_TO_ADDR
7432: GO 8009
7434: LD_INT 24
7436: DOUBLE
7437: EQUAL
7438: IFTRUE 7442
7440: GO 7468
7442: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
7443: LD_ADDR_VAR 0 3
7447: PUSH
7448: LD_INT 11
7450: PUSH
7451: LD_INT 12
7453: PUSH
7454: LD_INT 13
7456: PUSH
7457: LD_INT 14
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: ST_TO_ADDR
7466: GO 8009
7468: LD_INT 30
7470: DOUBLE
7471: EQUAL
7472: IFTRUE 7476
7474: GO 7502
7476: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
7477: LD_ADDR_VAR 0 3
7481: PUSH
7482: LD_INT 11
7484: PUSH
7485: LD_INT 12
7487: PUSH
7488: LD_INT 13
7490: PUSH
7491: LD_INT 14
7493: PUSH
7494: EMPTY
7495: LIST
7496: LIST
7497: LIST
7498: LIST
7499: ST_TO_ADDR
7500: GO 8009
7502: LD_INT 25
7504: DOUBLE
7505: EQUAL
7506: IFTRUE 7510
7508: GO 7528
7510: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
7511: LD_ADDR_VAR 0 3
7515: PUSH
7516: LD_INT 13
7518: PUSH
7519: LD_INT 14
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: ST_TO_ADDR
7526: GO 8009
7528: LD_INT 27
7530: DOUBLE
7531: EQUAL
7532: IFTRUE 7536
7534: GO 7554
7536: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
7537: LD_ADDR_VAR 0 3
7541: PUSH
7542: LD_INT 13
7544: PUSH
7545: LD_INT 14
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: ST_TO_ADDR
7552: GO 8009
7554: LD_INT 92
7556: DOUBLE
7557: EQUAL
7558: IFTRUE 7562
7560: GO 7588
7562: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
7563: LD_ADDR_VAR 0 3
7567: PUSH
7568: LD_INT 11
7570: PUSH
7571: LD_INT 12
7573: PUSH
7574: LD_INT 13
7576: PUSH
7577: LD_INT 14
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: LIST
7584: LIST
7585: ST_TO_ADDR
7586: GO 8009
7588: LD_INT 28
7590: DOUBLE
7591: EQUAL
7592: IFTRUE 7596
7594: GO 7614
7596: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
7597: LD_ADDR_VAR 0 3
7601: PUSH
7602: LD_INT 13
7604: PUSH
7605: LD_INT 14
7607: PUSH
7608: EMPTY
7609: LIST
7610: LIST
7611: ST_TO_ADDR
7612: GO 8009
7614: LD_INT 29
7616: DOUBLE
7617: EQUAL
7618: IFTRUE 7622
7620: GO 7640
7622: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7623: LD_ADDR_VAR 0 3
7627: PUSH
7628: LD_INT 13
7630: PUSH
7631: LD_INT 14
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: ST_TO_ADDR
7638: GO 8009
7640: LD_INT 31
7642: DOUBLE
7643: EQUAL
7644: IFTRUE 7648
7646: GO 7666
7648: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7649: LD_ADDR_VAR 0 3
7653: PUSH
7654: LD_INT 13
7656: PUSH
7657: LD_INT 14
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: ST_TO_ADDR
7664: GO 8009
7666: LD_INT 26
7668: DOUBLE
7669: EQUAL
7670: IFTRUE 7674
7672: GO 7692
7674: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7675: LD_ADDR_VAR 0 3
7679: PUSH
7680: LD_INT 13
7682: PUSH
7683: LD_INT 14
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: ST_TO_ADDR
7690: GO 8009
7692: LD_INT 42
7694: DOUBLE
7695: EQUAL
7696: IFTRUE 7700
7698: GO 7726
7700: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7701: LD_ADDR_VAR 0 3
7705: PUSH
7706: LD_INT 21
7708: PUSH
7709: LD_INT 22
7711: PUSH
7712: LD_INT 23
7714: PUSH
7715: LD_INT 24
7717: PUSH
7718: EMPTY
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: ST_TO_ADDR
7724: GO 8009
7726: LD_INT 43
7728: DOUBLE
7729: EQUAL
7730: IFTRUE 7734
7732: GO 7760
7734: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7735: LD_ADDR_VAR 0 3
7739: PUSH
7740: LD_INT 21
7742: PUSH
7743: LD_INT 22
7745: PUSH
7746: LD_INT 23
7748: PUSH
7749: LD_INT 24
7751: PUSH
7752: EMPTY
7753: LIST
7754: LIST
7755: LIST
7756: LIST
7757: ST_TO_ADDR
7758: GO 8009
7760: LD_INT 44
7762: DOUBLE
7763: EQUAL
7764: IFTRUE 7768
7766: GO 7794
7768: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7769: LD_ADDR_VAR 0 3
7773: PUSH
7774: LD_INT 21
7776: PUSH
7777: LD_INT 22
7779: PUSH
7780: LD_INT 23
7782: PUSH
7783: LD_INT 24
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: ST_TO_ADDR
7792: GO 8009
7794: LD_INT 45
7796: DOUBLE
7797: EQUAL
7798: IFTRUE 7802
7800: GO 7828
7802: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7803: LD_ADDR_VAR 0 3
7807: PUSH
7808: LD_INT 21
7810: PUSH
7811: LD_INT 22
7813: PUSH
7814: LD_INT 23
7816: PUSH
7817: LD_INT 24
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: ST_TO_ADDR
7826: GO 8009
7828: LD_INT 49
7830: DOUBLE
7831: EQUAL
7832: IFTRUE 7836
7834: GO 7862
7836: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7837: LD_ADDR_VAR 0 3
7841: PUSH
7842: LD_INT 21
7844: PUSH
7845: LD_INT 22
7847: PUSH
7848: LD_INT 23
7850: PUSH
7851: LD_INT 24
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: ST_TO_ADDR
7860: GO 8009
7862: LD_INT 51
7864: DOUBLE
7865: EQUAL
7866: IFTRUE 7870
7868: GO 7896
7870: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7871: LD_ADDR_VAR 0 3
7875: PUSH
7876: LD_INT 21
7878: PUSH
7879: LD_INT 22
7881: PUSH
7882: LD_INT 23
7884: PUSH
7885: LD_INT 24
7887: PUSH
7888: EMPTY
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: ST_TO_ADDR
7894: GO 8009
7896: LD_INT 52
7898: DOUBLE
7899: EQUAL
7900: IFTRUE 7904
7902: GO 7930
7904: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7905: LD_ADDR_VAR 0 3
7909: PUSH
7910: LD_INT 21
7912: PUSH
7913: LD_INT 22
7915: PUSH
7916: LD_INT 23
7918: PUSH
7919: LD_INT 24
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: ST_TO_ADDR
7928: GO 8009
7930: LD_INT 53
7932: DOUBLE
7933: EQUAL
7934: IFTRUE 7938
7936: GO 7956
7938: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7939: LD_ADDR_VAR 0 3
7943: PUSH
7944: LD_INT 23
7946: PUSH
7947: LD_INT 24
7949: PUSH
7950: EMPTY
7951: LIST
7952: LIST
7953: ST_TO_ADDR
7954: GO 8009
7956: LD_INT 46
7958: DOUBLE
7959: EQUAL
7960: IFTRUE 7964
7962: GO 7982
7964: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7965: LD_ADDR_VAR 0 3
7969: PUSH
7970: LD_INT 23
7972: PUSH
7973: LD_INT 24
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: ST_TO_ADDR
7980: GO 8009
7982: LD_INT 47
7984: DOUBLE
7985: EQUAL
7986: IFTRUE 7990
7988: GO 8008
7990: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7991: LD_ADDR_VAR 0 3
7995: PUSH
7996: LD_INT 23
7998: PUSH
7999: LD_INT 24
8001: PUSH
8002: EMPTY
8003: LIST
8004: LIST
8005: ST_TO_ADDR
8006: GO 8009
8008: POP
// result := ( chassis in result ) ;
8009: LD_ADDR_VAR 0 3
8013: PUSH
8014: LD_VAR 0 1
8018: PUSH
8019: LD_VAR 0 3
8023: IN
8024: ST_TO_ADDR
// end ;
8025: LD_VAR 0 3
8029: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
8030: LD_INT 0
8032: PPUSH
8033: PPUSH
8034: PPUSH
8035: PPUSH
8036: PPUSH
8037: PPUSH
8038: PPUSH
// result := array ;
8039: LD_ADDR_VAR 0 5
8043: PUSH
8044: LD_VAR 0 1
8048: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
8049: LD_VAR 0 1
8053: NOT
8054: PUSH
8055: LD_VAR 0 2
8059: NOT
8060: OR
8061: PUSH
8062: LD_VAR 0 3
8066: NOT
8067: OR
8068: PUSH
8069: LD_VAR 0 2
8073: PUSH
8074: LD_VAR 0 1
8078: GREATER
8079: OR
8080: PUSH
8081: LD_VAR 0 3
8085: PUSH
8086: LD_VAR 0 1
8090: GREATER
8091: OR
8092: IFFALSE 8096
// exit ;
8094: GO 8392
// if direction then
8096: LD_VAR 0 4
8100: IFFALSE 8164
// begin d := 1 ;
8102: LD_ADDR_VAR 0 9
8106: PUSH
8107: LD_INT 1
8109: ST_TO_ADDR
// if i_from > i_to then
8110: LD_VAR 0 2
8114: PUSH
8115: LD_VAR 0 3
8119: GREATER
8120: IFFALSE 8146
// length := ( array - i_from ) + i_to else
8122: LD_ADDR_VAR 0 11
8126: PUSH
8127: LD_VAR 0 1
8131: PUSH
8132: LD_VAR 0 2
8136: MINUS
8137: PUSH
8138: LD_VAR 0 3
8142: PLUS
8143: ST_TO_ADDR
8144: GO 8162
// length := i_to - i_from ;
8146: LD_ADDR_VAR 0 11
8150: PUSH
8151: LD_VAR 0 3
8155: PUSH
8156: LD_VAR 0 2
8160: MINUS
8161: ST_TO_ADDR
// end else
8162: GO 8225
// begin d := - 1 ;
8164: LD_ADDR_VAR 0 9
8168: PUSH
8169: LD_INT 1
8171: NEG
8172: ST_TO_ADDR
// if i_from > i_to then
8173: LD_VAR 0 2
8177: PUSH
8178: LD_VAR 0 3
8182: GREATER
8183: IFFALSE 8203
// length := i_from - i_to else
8185: LD_ADDR_VAR 0 11
8189: PUSH
8190: LD_VAR 0 2
8194: PUSH
8195: LD_VAR 0 3
8199: MINUS
8200: ST_TO_ADDR
8201: GO 8225
// length := ( array - i_to ) + i_from ;
8203: LD_ADDR_VAR 0 11
8207: PUSH
8208: LD_VAR 0 1
8212: PUSH
8213: LD_VAR 0 3
8217: MINUS
8218: PUSH
8219: LD_VAR 0 2
8223: PLUS
8224: ST_TO_ADDR
// end ; if not length then
8225: LD_VAR 0 11
8229: NOT
8230: IFFALSE 8234
// exit ;
8232: GO 8392
// tmp := array ;
8234: LD_ADDR_VAR 0 10
8238: PUSH
8239: LD_VAR 0 1
8243: ST_TO_ADDR
// for i = 1 to length do
8244: LD_ADDR_VAR 0 6
8248: PUSH
8249: DOUBLE
8250: LD_INT 1
8252: DEC
8253: ST_TO_ADDR
8254: LD_VAR 0 11
8258: PUSH
8259: FOR_TO
8260: IFFALSE 8380
// begin for j = 1 to array do
8262: LD_ADDR_VAR 0 7
8266: PUSH
8267: DOUBLE
8268: LD_INT 1
8270: DEC
8271: ST_TO_ADDR
8272: LD_VAR 0 1
8276: PUSH
8277: FOR_TO
8278: IFFALSE 8366
// begin k := j + d ;
8280: LD_ADDR_VAR 0 8
8284: PUSH
8285: LD_VAR 0 7
8289: PUSH
8290: LD_VAR 0 9
8294: PLUS
8295: ST_TO_ADDR
// if k > array then
8296: LD_VAR 0 8
8300: PUSH
8301: LD_VAR 0 1
8305: GREATER
8306: IFFALSE 8316
// k := 1 ;
8308: LD_ADDR_VAR 0 8
8312: PUSH
8313: LD_INT 1
8315: ST_TO_ADDR
// if not k then
8316: LD_VAR 0 8
8320: NOT
8321: IFFALSE 8333
// k := array ;
8323: LD_ADDR_VAR 0 8
8327: PUSH
8328: LD_VAR 0 1
8332: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
8333: LD_ADDR_VAR 0 10
8337: PUSH
8338: LD_VAR 0 10
8342: PPUSH
8343: LD_VAR 0 8
8347: PPUSH
8348: LD_VAR 0 1
8352: PUSH
8353: LD_VAR 0 7
8357: ARRAY
8358: PPUSH
8359: CALL_OW 1
8363: ST_TO_ADDR
// end ;
8364: GO 8277
8366: POP
8367: POP
// array := tmp ;
8368: LD_ADDR_VAR 0 1
8372: PUSH
8373: LD_VAR 0 10
8377: ST_TO_ADDR
// end ;
8378: GO 8259
8380: POP
8381: POP
// result := array ;
8382: LD_ADDR_VAR 0 5
8386: PUSH
8387: LD_VAR 0 1
8391: ST_TO_ADDR
// end ;
8392: LD_VAR 0 5
8396: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
8397: LD_INT 0
8399: PPUSH
8400: PPUSH
// result := 0 ;
8401: LD_ADDR_VAR 0 3
8405: PUSH
8406: LD_INT 0
8408: ST_TO_ADDR
// if not array or not value in array then
8409: LD_VAR 0 1
8413: NOT
8414: PUSH
8415: LD_VAR 0 2
8419: PUSH
8420: LD_VAR 0 1
8424: IN
8425: NOT
8426: OR
8427: IFFALSE 8431
// exit ;
8429: GO 8485
// for i = 1 to array do
8431: LD_ADDR_VAR 0 4
8435: PUSH
8436: DOUBLE
8437: LD_INT 1
8439: DEC
8440: ST_TO_ADDR
8441: LD_VAR 0 1
8445: PUSH
8446: FOR_TO
8447: IFFALSE 8483
// if value = array [ i ] then
8449: LD_VAR 0 2
8453: PUSH
8454: LD_VAR 0 1
8458: PUSH
8459: LD_VAR 0 4
8463: ARRAY
8464: EQUAL
8465: IFFALSE 8481
// begin result := i ;
8467: LD_ADDR_VAR 0 3
8471: PUSH
8472: LD_VAR 0 4
8476: ST_TO_ADDR
// exit ;
8477: POP
8478: POP
8479: GO 8485
// end ;
8481: GO 8446
8483: POP
8484: POP
// end ;
8485: LD_VAR 0 3
8489: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
8490: LD_INT 0
8492: PPUSH
// vc_chassis := chassis ;
8493: LD_ADDR_OWVAR 37
8497: PUSH
8498: LD_VAR 0 1
8502: ST_TO_ADDR
// vc_engine := engine ;
8503: LD_ADDR_OWVAR 39
8507: PUSH
8508: LD_VAR 0 2
8512: ST_TO_ADDR
// vc_control := control ;
8513: LD_ADDR_OWVAR 38
8517: PUSH
8518: LD_VAR 0 3
8522: ST_TO_ADDR
// vc_weapon := weapon ;
8523: LD_ADDR_OWVAR 40
8527: PUSH
8528: LD_VAR 0 4
8532: ST_TO_ADDR
// vc_fuel_battery := fuel ;
8533: LD_ADDR_OWVAR 41
8537: PUSH
8538: LD_VAR 0 5
8542: ST_TO_ADDR
// end ;
8543: LD_VAR 0 6
8547: RET
// export function WantPlant ( unit ) ; var task ; begin
8548: LD_INT 0
8550: PPUSH
8551: PPUSH
// result := false ;
8552: LD_ADDR_VAR 0 2
8556: PUSH
8557: LD_INT 0
8559: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
8560: LD_ADDR_VAR 0 3
8564: PUSH
8565: LD_VAR 0 1
8569: PPUSH
8570: CALL_OW 437
8574: ST_TO_ADDR
// if task then
8575: LD_VAR 0 3
8579: IFFALSE 8607
// if task [ 1 ] [ 1 ] = p then
8581: LD_VAR 0 3
8585: PUSH
8586: LD_INT 1
8588: ARRAY
8589: PUSH
8590: LD_INT 1
8592: ARRAY
8593: PUSH
8594: LD_STRING p
8596: EQUAL
8597: IFFALSE 8607
// result := true ;
8599: LD_ADDR_VAR 0 2
8603: PUSH
8604: LD_INT 1
8606: ST_TO_ADDR
// end ;
8607: LD_VAR 0 2
8611: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8612: LD_INT 0
8614: PPUSH
8615: PPUSH
8616: PPUSH
8617: PPUSH
// if pos < 1 then
8618: LD_VAR 0 2
8622: PUSH
8623: LD_INT 1
8625: LESS
8626: IFFALSE 8630
// exit ;
8628: GO 8933
// if pos = 1 then
8630: LD_VAR 0 2
8634: PUSH
8635: LD_INT 1
8637: EQUAL
8638: IFFALSE 8671
// result := Replace ( arr , pos [ 1 ] , value ) else
8640: LD_ADDR_VAR 0 4
8644: PUSH
8645: LD_VAR 0 1
8649: PPUSH
8650: LD_VAR 0 2
8654: PUSH
8655: LD_INT 1
8657: ARRAY
8658: PPUSH
8659: LD_VAR 0 3
8663: PPUSH
8664: CALL_OW 1
8668: ST_TO_ADDR
8669: GO 8933
// begin tmp := arr ;
8671: LD_ADDR_VAR 0 6
8675: PUSH
8676: LD_VAR 0 1
8680: ST_TO_ADDR
// s_arr := [ tmp ] ;
8681: LD_ADDR_VAR 0 7
8685: PUSH
8686: LD_VAR 0 6
8690: PUSH
8691: EMPTY
8692: LIST
8693: ST_TO_ADDR
// for i = 1 to pos - 1 do
8694: LD_ADDR_VAR 0 5
8698: PUSH
8699: DOUBLE
8700: LD_INT 1
8702: DEC
8703: ST_TO_ADDR
8704: LD_VAR 0 2
8708: PUSH
8709: LD_INT 1
8711: MINUS
8712: PUSH
8713: FOR_TO
8714: IFFALSE 8759
// begin tmp := tmp [ pos [ i ] ] ;
8716: LD_ADDR_VAR 0 6
8720: PUSH
8721: LD_VAR 0 6
8725: PUSH
8726: LD_VAR 0 2
8730: PUSH
8731: LD_VAR 0 5
8735: ARRAY
8736: ARRAY
8737: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8738: LD_ADDR_VAR 0 7
8742: PUSH
8743: LD_VAR 0 7
8747: PUSH
8748: LD_VAR 0 6
8752: PUSH
8753: EMPTY
8754: LIST
8755: ADD
8756: ST_TO_ADDR
// end ;
8757: GO 8713
8759: POP
8760: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8761: LD_ADDR_VAR 0 6
8765: PUSH
8766: LD_VAR 0 6
8770: PPUSH
8771: LD_VAR 0 2
8775: PUSH
8776: LD_VAR 0 2
8780: ARRAY
8781: PPUSH
8782: LD_VAR 0 3
8786: PPUSH
8787: CALL_OW 1
8791: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8792: LD_ADDR_VAR 0 7
8796: PUSH
8797: LD_VAR 0 7
8801: PPUSH
8802: LD_VAR 0 7
8806: PPUSH
8807: LD_VAR 0 6
8811: PPUSH
8812: CALL_OW 1
8816: ST_TO_ADDR
// for i = s_arr downto 2 do
8817: LD_ADDR_VAR 0 5
8821: PUSH
8822: DOUBLE
8823: LD_VAR 0 7
8827: INC
8828: ST_TO_ADDR
8829: LD_INT 2
8831: PUSH
8832: FOR_DOWNTO
8833: IFFALSE 8917
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8835: LD_ADDR_VAR 0 6
8839: PUSH
8840: LD_VAR 0 7
8844: PUSH
8845: LD_VAR 0 5
8849: PUSH
8850: LD_INT 1
8852: MINUS
8853: ARRAY
8854: PPUSH
8855: LD_VAR 0 2
8859: PUSH
8860: LD_VAR 0 5
8864: PUSH
8865: LD_INT 1
8867: MINUS
8868: ARRAY
8869: PPUSH
8870: LD_VAR 0 7
8874: PUSH
8875: LD_VAR 0 5
8879: ARRAY
8880: PPUSH
8881: CALL_OW 1
8885: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8886: LD_ADDR_VAR 0 7
8890: PUSH
8891: LD_VAR 0 7
8895: PPUSH
8896: LD_VAR 0 5
8900: PUSH
8901: LD_INT 1
8903: MINUS
8904: PPUSH
8905: LD_VAR 0 6
8909: PPUSH
8910: CALL_OW 1
8914: ST_TO_ADDR
// end ;
8915: GO 8832
8917: POP
8918: POP
// result := s_arr [ 1 ] ;
8919: LD_ADDR_VAR 0 4
8923: PUSH
8924: LD_VAR 0 7
8928: PUSH
8929: LD_INT 1
8931: ARRAY
8932: ST_TO_ADDR
// end ; end ;
8933: LD_VAR 0 4
8937: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8938: LD_INT 0
8940: PPUSH
8941: PPUSH
// if not list then
8942: LD_VAR 0 1
8946: NOT
8947: IFFALSE 8951
// exit ;
8949: GO 9042
// i := list [ pos1 ] ;
8951: LD_ADDR_VAR 0 5
8955: PUSH
8956: LD_VAR 0 1
8960: PUSH
8961: LD_VAR 0 2
8965: ARRAY
8966: ST_TO_ADDR
// if not i then
8967: LD_VAR 0 5
8971: NOT
8972: IFFALSE 8976
// exit ;
8974: GO 9042
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8976: LD_ADDR_VAR 0 1
8980: PUSH
8981: LD_VAR 0 1
8985: PPUSH
8986: LD_VAR 0 2
8990: PPUSH
8991: LD_VAR 0 1
8995: PUSH
8996: LD_VAR 0 3
9000: ARRAY
9001: PPUSH
9002: CALL_OW 1
9006: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
9007: LD_ADDR_VAR 0 1
9011: PUSH
9012: LD_VAR 0 1
9016: PPUSH
9017: LD_VAR 0 3
9021: PPUSH
9022: LD_VAR 0 5
9026: PPUSH
9027: CALL_OW 1
9031: ST_TO_ADDR
// result := list ;
9032: LD_ADDR_VAR 0 4
9036: PUSH
9037: LD_VAR 0 1
9041: ST_TO_ADDR
// end ;
9042: LD_VAR 0 4
9046: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
9047: LD_INT 0
9049: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
9050: LD_ADDR_VAR 0 5
9054: PUSH
9055: LD_VAR 0 1
9059: PPUSH
9060: CALL_OW 250
9064: PPUSH
9065: LD_VAR 0 1
9069: PPUSH
9070: CALL_OW 251
9074: PPUSH
9075: LD_VAR 0 2
9079: PPUSH
9080: LD_VAR 0 3
9084: PPUSH
9085: LD_VAR 0 4
9089: PPUSH
9090: CALL 9100 0 5
9094: ST_TO_ADDR
// end ;
9095: LD_VAR 0 5
9099: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
9100: LD_INT 0
9102: PPUSH
9103: PPUSH
9104: PPUSH
9105: PPUSH
// if not list then
9106: LD_VAR 0 3
9110: NOT
9111: IFFALSE 9115
// exit ;
9113: GO 9503
// result := [ ] ;
9115: LD_ADDR_VAR 0 6
9119: PUSH
9120: EMPTY
9121: ST_TO_ADDR
// for i in list do
9122: LD_ADDR_VAR 0 7
9126: PUSH
9127: LD_VAR 0 3
9131: PUSH
9132: FOR_IN
9133: IFFALSE 9335
// begin tmp := GetDistUnitXY ( i , x , y ) ;
9135: LD_ADDR_VAR 0 9
9139: PUSH
9140: LD_VAR 0 7
9144: PPUSH
9145: LD_VAR 0 1
9149: PPUSH
9150: LD_VAR 0 2
9154: PPUSH
9155: CALL_OW 297
9159: ST_TO_ADDR
// if not result then
9160: LD_VAR 0 6
9164: NOT
9165: IFFALSE 9191
// result := [ [ i , tmp ] ] else
9167: LD_ADDR_VAR 0 6
9171: PUSH
9172: LD_VAR 0 7
9176: PUSH
9177: LD_VAR 0 9
9181: PUSH
9182: EMPTY
9183: LIST
9184: LIST
9185: PUSH
9186: EMPTY
9187: LIST
9188: ST_TO_ADDR
9189: GO 9333
// begin if result [ result ] [ 2 ] < tmp then
9191: LD_VAR 0 6
9195: PUSH
9196: LD_VAR 0 6
9200: ARRAY
9201: PUSH
9202: LD_INT 2
9204: ARRAY
9205: PUSH
9206: LD_VAR 0 9
9210: LESS
9211: IFFALSE 9253
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9213: LD_ADDR_VAR 0 6
9217: PUSH
9218: LD_VAR 0 6
9222: PPUSH
9223: LD_VAR 0 6
9227: PUSH
9228: LD_INT 1
9230: PLUS
9231: PPUSH
9232: LD_VAR 0 7
9236: PUSH
9237: LD_VAR 0 9
9241: PUSH
9242: EMPTY
9243: LIST
9244: LIST
9245: PPUSH
9246: CALL_OW 2
9250: ST_TO_ADDR
9251: GO 9333
// for j = 1 to result do
9253: LD_ADDR_VAR 0 8
9257: PUSH
9258: DOUBLE
9259: LD_INT 1
9261: DEC
9262: ST_TO_ADDR
9263: LD_VAR 0 6
9267: PUSH
9268: FOR_TO
9269: IFFALSE 9331
// begin if tmp < result [ j ] [ 2 ] then
9271: LD_VAR 0 9
9275: PUSH
9276: LD_VAR 0 6
9280: PUSH
9281: LD_VAR 0 8
9285: ARRAY
9286: PUSH
9287: LD_INT 2
9289: ARRAY
9290: LESS
9291: IFFALSE 9329
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9293: LD_ADDR_VAR 0 6
9297: PUSH
9298: LD_VAR 0 6
9302: PPUSH
9303: LD_VAR 0 8
9307: PPUSH
9308: LD_VAR 0 7
9312: PUSH
9313: LD_VAR 0 9
9317: PUSH
9318: EMPTY
9319: LIST
9320: LIST
9321: PPUSH
9322: CALL_OW 2
9326: ST_TO_ADDR
// break ;
9327: GO 9331
// end ; end ;
9329: GO 9268
9331: POP
9332: POP
// end ; end ;
9333: GO 9132
9335: POP
9336: POP
// if result and not asc then
9337: LD_VAR 0 6
9341: PUSH
9342: LD_VAR 0 4
9346: NOT
9347: AND
9348: IFFALSE 9423
// begin tmp := result ;
9350: LD_ADDR_VAR 0 9
9354: PUSH
9355: LD_VAR 0 6
9359: ST_TO_ADDR
// for i = tmp downto 1 do
9360: LD_ADDR_VAR 0 7
9364: PUSH
9365: DOUBLE
9366: LD_VAR 0 9
9370: INC
9371: ST_TO_ADDR
9372: LD_INT 1
9374: PUSH
9375: FOR_DOWNTO
9376: IFFALSE 9421
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9378: LD_ADDR_VAR 0 6
9382: PUSH
9383: LD_VAR 0 6
9387: PPUSH
9388: LD_VAR 0 9
9392: PUSH
9393: LD_VAR 0 7
9397: MINUS
9398: PUSH
9399: LD_INT 1
9401: PLUS
9402: PPUSH
9403: LD_VAR 0 9
9407: PUSH
9408: LD_VAR 0 7
9412: ARRAY
9413: PPUSH
9414: CALL_OW 1
9418: ST_TO_ADDR
9419: GO 9375
9421: POP
9422: POP
// end ; tmp := [ ] ;
9423: LD_ADDR_VAR 0 9
9427: PUSH
9428: EMPTY
9429: ST_TO_ADDR
// if mode then
9430: LD_VAR 0 5
9434: IFFALSE 9503
// begin for i = 1 to result do
9436: LD_ADDR_VAR 0 7
9440: PUSH
9441: DOUBLE
9442: LD_INT 1
9444: DEC
9445: ST_TO_ADDR
9446: LD_VAR 0 6
9450: PUSH
9451: FOR_TO
9452: IFFALSE 9491
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9454: LD_ADDR_VAR 0 9
9458: PUSH
9459: LD_VAR 0 9
9463: PPUSH
9464: LD_VAR 0 7
9468: PPUSH
9469: LD_VAR 0 6
9473: PUSH
9474: LD_VAR 0 7
9478: ARRAY
9479: PUSH
9480: LD_INT 1
9482: ARRAY
9483: PPUSH
9484: CALL_OW 1
9488: ST_TO_ADDR
9489: GO 9451
9491: POP
9492: POP
// result := tmp ;
9493: LD_ADDR_VAR 0 6
9497: PUSH
9498: LD_VAR 0 9
9502: ST_TO_ADDR
// end ; end ;
9503: LD_VAR 0 6
9507: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9508: LD_INT 0
9510: PPUSH
9511: PPUSH
9512: PPUSH
9513: PPUSH
9514: PPUSH
9515: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9516: LD_ADDR_VAR 0 5
9520: PUSH
9521: LD_INT 0
9523: PUSH
9524: LD_INT 0
9526: PUSH
9527: LD_INT 0
9529: PUSH
9530: EMPTY
9531: PUSH
9532: EMPTY
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: ST_TO_ADDR
// if not x or not y then
9538: LD_VAR 0 2
9542: NOT
9543: PUSH
9544: LD_VAR 0 3
9548: NOT
9549: OR
9550: IFFALSE 9554
// exit ;
9552: GO 11204
// if not range then
9554: LD_VAR 0 4
9558: NOT
9559: IFFALSE 9569
// range := 10 ;
9561: LD_ADDR_VAR 0 4
9565: PUSH
9566: LD_INT 10
9568: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9569: LD_ADDR_VAR 0 8
9573: PUSH
9574: LD_INT 81
9576: PUSH
9577: LD_VAR 0 1
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: PUSH
9586: LD_INT 92
9588: PUSH
9589: LD_VAR 0 2
9593: PUSH
9594: LD_VAR 0 3
9598: PUSH
9599: LD_VAR 0 4
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: PUSH
9610: LD_INT 3
9612: PUSH
9613: LD_INT 21
9615: PUSH
9616: LD_INT 3
9618: PUSH
9619: EMPTY
9620: LIST
9621: LIST
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: PUSH
9627: EMPTY
9628: LIST
9629: LIST
9630: LIST
9631: PPUSH
9632: CALL_OW 69
9636: ST_TO_ADDR
// if not tmp then
9637: LD_VAR 0 8
9641: NOT
9642: IFFALSE 9646
// exit ;
9644: GO 11204
// for i in tmp do
9646: LD_ADDR_VAR 0 6
9650: PUSH
9651: LD_VAR 0 8
9655: PUSH
9656: FOR_IN
9657: IFFALSE 11179
// begin points := [ 0 , 0 , 0 ] ;
9659: LD_ADDR_VAR 0 9
9663: PUSH
9664: LD_INT 0
9666: PUSH
9667: LD_INT 0
9669: PUSH
9670: LD_INT 0
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: LIST
9677: ST_TO_ADDR
// bpoints := 1 ;
9678: LD_ADDR_VAR 0 10
9682: PUSH
9683: LD_INT 1
9685: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9686: LD_VAR 0 6
9690: PPUSH
9691: CALL_OW 247
9695: PUSH
9696: LD_INT 1
9698: DOUBLE
9699: EQUAL
9700: IFTRUE 9704
9702: GO 10282
9704: POP
// begin if GetClass ( i ) = 1 then
9705: LD_VAR 0 6
9709: PPUSH
9710: CALL_OW 257
9714: PUSH
9715: LD_INT 1
9717: EQUAL
9718: IFFALSE 9739
// points := [ 10 , 5 , 3 ] ;
9720: LD_ADDR_VAR 0 9
9724: PUSH
9725: LD_INT 10
9727: PUSH
9728: LD_INT 5
9730: PUSH
9731: LD_INT 3
9733: PUSH
9734: EMPTY
9735: LIST
9736: LIST
9737: LIST
9738: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9739: LD_VAR 0 6
9743: PPUSH
9744: CALL_OW 257
9748: PUSH
9749: LD_INT 2
9751: PUSH
9752: LD_INT 3
9754: PUSH
9755: LD_INT 4
9757: PUSH
9758: EMPTY
9759: LIST
9760: LIST
9761: LIST
9762: IN
9763: IFFALSE 9784
// points := [ 3 , 2 , 1 ] ;
9765: LD_ADDR_VAR 0 9
9769: PUSH
9770: LD_INT 3
9772: PUSH
9773: LD_INT 2
9775: PUSH
9776: LD_INT 1
9778: PUSH
9779: EMPTY
9780: LIST
9781: LIST
9782: LIST
9783: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9784: LD_VAR 0 6
9788: PPUSH
9789: CALL_OW 257
9793: PUSH
9794: LD_INT 5
9796: EQUAL
9797: IFFALSE 9818
// points := [ 130 , 5 , 2 ] ;
9799: LD_ADDR_VAR 0 9
9803: PUSH
9804: LD_INT 130
9806: PUSH
9807: LD_INT 5
9809: PUSH
9810: LD_INT 2
9812: PUSH
9813: EMPTY
9814: LIST
9815: LIST
9816: LIST
9817: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9818: LD_VAR 0 6
9822: PPUSH
9823: CALL_OW 257
9827: PUSH
9828: LD_INT 8
9830: EQUAL
9831: IFFALSE 9852
// points := [ 35 , 35 , 30 ] ;
9833: LD_ADDR_VAR 0 9
9837: PUSH
9838: LD_INT 35
9840: PUSH
9841: LD_INT 35
9843: PUSH
9844: LD_INT 30
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: LIST
9851: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9852: LD_VAR 0 6
9856: PPUSH
9857: CALL_OW 257
9861: PUSH
9862: LD_INT 9
9864: EQUAL
9865: IFFALSE 9886
// points := [ 20 , 55 , 40 ] ;
9867: LD_ADDR_VAR 0 9
9871: PUSH
9872: LD_INT 20
9874: PUSH
9875: LD_INT 55
9877: PUSH
9878: LD_INT 40
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: LIST
9885: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9886: LD_VAR 0 6
9890: PPUSH
9891: CALL_OW 257
9895: PUSH
9896: LD_INT 12
9898: PUSH
9899: LD_INT 16
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: IN
9906: IFFALSE 9927
// points := [ 5 , 3 , 2 ] ;
9908: LD_ADDR_VAR 0 9
9912: PUSH
9913: LD_INT 5
9915: PUSH
9916: LD_INT 3
9918: PUSH
9919: LD_INT 2
9921: PUSH
9922: EMPTY
9923: LIST
9924: LIST
9925: LIST
9926: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9927: LD_VAR 0 6
9931: PPUSH
9932: CALL_OW 257
9936: PUSH
9937: LD_INT 17
9939: EQUAL
9940: IFFALSE 9961
// points := [ 100 , 50 , 75 ] ;
9942: LD_ADDR_VAR 0 9
9946: PUSH
9947: LD_INT 100
9949: PUSH
9950: LD_INT 50
9952: PUSH
9953: LD_INT 75
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: LIST
9960: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9961: LD_VAR 0 6
9965: PPUSH
9966: CALL_OW 257
9970: PUSH
9971: LD_INT 15
9973: EQUAL
9974: IFFALSE 9995
// points := [ 10 , 5 , 3 ] ;
9976: LD_ADDR_VAR 0 9
9980: PUSH
9981: LD_INT 10
9983: PUSH
9984: LD_INT 5
9986: PUSH
9987: LD_INT 3
9989: PUSH
9990: EMPTY
9991: LIST
9992: LIST
9993: LIST
9994: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9995: LD_VAR 0 6
9999: PPUSH
10000: CALL_OW 257
10004: PUSH
10005: LD_INT 14
10007: EQUAL
10008: IFFALSE 10029
// points := [ 10 , 0 , 0 ] ;
10010: LD_ADDR_VAR 0 9
10014: PUSH
10015: LD_INT 10
10017: PUSH
10018: LD_INT 0
10020: PUSH
10021: LD_INT 0
10023: PUSH
10024: EMPTY
10025: LIST
10026: LIST
10027: LIST
10028: ST_TO_ADDR
// if GetClass ( i ) = 11 then
10029: LD_VAR 0 6
10033: PPUSH
10034: CALL_OW 257
10038: PUSH
10039: LD_INT 11
10041: EQUAL
10042: IFFALSE 10063
// points := [ 30 , 10 , 5 ] ;
10044: LD_ADDR_VAR 0 9
10048: PUSH
10049: LD_INT 30
10051: PUSH
10052: LD_INT 10
10054: PUSH
10055: LD_INT 5
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: LIST
10062: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
10063: LD_VAR 0 1
10067: PPUSH
10068: LD_INT 5
10070: PPUSH
10071: CALL_OW 321
10075: PUSH
10076: LD_INT 2
10078: EQUAL
10079: IFFALSE 10096
// bpoints := bpoints * 1.8 ;
10081: LD_ADDR_VAR 0 10
10085: PUSH
10086: LD_VAR 0 10
10090: PUSH
10091: LD_REAL  1.80000000000000E+0000
10094: MUL
10095: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
10096: LD_VAR 0 6
10100: PPUSH
10101: CALL_OW 257
10105: PUSH
10106: LD_INT 1
10108: PUSH
10109: LD_INT 2
10111: PUSH
10112: LD_INT 3
10114: PUSH
10115: LD_INT 4
10117: PUSH
10118: EMPTY
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: IN
10124: PUSH
10125: LD_VAR 0 1
10129: PPUSH
10130: LD_INT 51
10132: PPUSH
10133: CALL_OW 321
10137: PUSH
10138: LD_INT 2
10140: EQUAL
10141: AND
10142: IFFALSE 10159
// bpoints := bpoints * 1.2 ;
10144: LD_ADDR_VAR 0 10
10148: PUSH
10149: LD_VAR 0 10
10153: PUSH
10154: LD_REAL  1.20000000000000E+0000
10157: MUL
10158: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
10159: LD_VAR 0 6
10163: PPUSH
10164: CALL_OW 257
10168: PUSH
10169: LD_INT 5
10171: PUSH
10172: LD_INT 7
10174: PUSH
10175: LD_INT 9
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: LIST
10182: IN
10183: PUSH
10184: LD_VAR 0 1
10188: PPUSH
10189: LD_INT 52
10191: PPUSH
10192: CALL_OW 321
10196: PUSH
10197: LD_INT 2
10199: EQUAL
10200: AND
10201: IFFALSE 10218
// bpoints := bpoints * 1.5 ;
10203: LD_ADDR_VAR 0 10
10207: PUSH
10208: LD_VAR 0 10
10212: PUSH
10213: LD_REAL  1.50000000000000E+0000
10216: MUL
10217: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10218: LD_VAR 0 1
10222: PPUSH
10223: LD_INT 66
10225: PPUSH
10226: CALL_OW 321
10230: PUSH
10231: LD_INT 2
10233: EQUAL
10234: IFFALSE 10251
// bpoints := bpoints * 1.1 ;
10236: LD_ADDR_VAR 0 10
10240: PUSH
10241: LD_VAR 0 10
10245: PUSH
10246: LD_REAL  1.10000000000000E+0000
10249: MUL
10250: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10251: LD_ADDR_VAR 0 10
10255: PUSH
10256: LD_VAR 0 10
10260: PUSH
10261: LD_VAR 0 6
10265: PPUSH
10266: LD_INT 1
10268: PPUSH
10269: CALL_OW 259
10273: PUSH
10274: LD_REAL  1.15000000000000E+0000
10277: MUL
10278: MUL
10279: ST_TO_ADDR
// end ; unit_vehicle :
10280: GO 11108
10282: LD_INT 2
10284: DOUBLE
10285: EQUAL
10286: IFTRUE 10290
10288: GO 11096
10290: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10291: LD_VAR 0 6
10295: PPUSH
10296: CALL_OW 264
10300: PUSH
10301: LD_INT 2
10303: PUSH
10304: LD_INT 42
10306: PUSH
10307: LD_INT 24
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: LIST
10314: IN
10315: IFFALSE 10336
// points := [ 25 , 5 , 3 ] ;
10317: LD_ADDR_VAR 0 9
10321: PUSH
10322: LD_INT 25
10324: PUSH
10325: LD_INT 5
10327: PUSH
10328: LD_INT 3
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: LIST
10335: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10336: LD_VAR 0 6
10340: PPUSH
10341: CALL_OW 264
10345: PUSH
10346: LD_INT 4
10348: PUSH
10349: LD_INT 43
10351: PUSH
10352: LD_INT 25
10354: PUSH
10355: EMPTY
10356: LIST
10357: LIST
10358: LIST
10359: IN
10360: IFFALSE 10381
// points := [ 40 , 15 , 5 ] ;
10362: LD_ADDR_VAR 0 9
10366: PUSH
10367: LD_INT 40
10369: PUSH
10370: LD_INT 15
10372: PUSH
10373: LD_INT 5
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: LIST
10380: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10381: LD_VAR 0 6
10385: PPUSH
10386: CALL_OW 264
10390: PUSH
10391: LD_INT 3
10393: PUSH
10394: LD_INT 23
10396: PUSH
10397: EMPTY
10398: LIST
10399: LIST
10400: IN
10401: IFFALSE 10422
// points := [ 7 , 25 , 8 ] ;
10403: LD_ADDR_VAR 0 9
10407: PUSH
10408: LD_INT 7
10410: PUSH
10411: LD_INT 25
10413: PUSH
10414: LD_INT 8
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: LIST
10421: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10422: LD_VAR 0 6
10426: PPUSH
10427: CALL_OW 264
10431: PUSH
10432: LD_INT 5
10434: PUSH
10435: LD_INT 27
10437: PUSH
10438: LD_INT 44
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: LIST
10445: IN
10446: IFFALSE 10467
// points := [ 14 , 50 , 16 ] ;
10448: LD_ADDR_VAR 0 9
10452: PUSH
10453: LD_INT 14
10455: PUSH
10456: LD_INT 50
10458: PUSH
10459: LD_INT 16
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: LIST
10466: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10467: LD_VAR 0 6
10471: PPUSH
10472: CALL_OW 264
10476: PUSH
10477: LD_INT 6
10479: PUSH
10480: LD_INT 46
10482: PUSH
10483: EMPTY
10484: LIST
10485: LIST
10486: IN
10487: IFFALSE 10508
// points := [ 32 , 120 , 70 ] ;
10489: LD_ADDR_VAR 0 9
10493: PUSH
10494: LD_INT 32
10496: PUSH
10497: LD_INT 120
10499: PUSH
10500: LD_INT 70
10502: PUSH
10503: EMPTY
10504: LIST
10505: LIST
10506: LIST
10507: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10508: LD_VAR 0 6
10512: PPUSH
10513: CALL_OW 264
10517: PUSH
10518: LD_INT 7
10520: PUSH
10521: LD_INT 28
10523: PUSH
10524: LD_INT 45
10526: PUSH
10527: LD_INT 92
10529: PUSH
10530: EMPTY
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: IN
10536: IFFALSE 10557
// points := [ 35 , 20 , 45 ] ;
10538: LD_ADDR_VAR 0 9
10542: PUSH
10543: LD_INT 35
10545: PUSH
10546: LD_INT 20
10548: PUSH
10549: LD_INT 45
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: LIST
10556: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10557: LD_VAR 0 6
10561: PPUSH
10562: CALL_OW 264
10566: PUSH
10567: LD_INT 47
10569: PUSH
10570: EMPTY
10571: LIST
10572: IN
10573: IFFALSE 10594
// points := [ 67 , 45 , 75 ] ;
10575: LD_ADDR_VAR 0 9
10579: PUSH
10580: LD_INT 67
10582: PUSH
10583: LD_INT 45
10585: PUSH
10586: LD_INT 75
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: LIST
10593: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10594: LD_VAR 0 6
10598: PPUSH
10599: CALL_OW 264
10603: PUSH
10604: LD_INT 26
10606: PUSH
10607: EMPTY
10608: LIST
10609: IN
10610: IFFALSE 10631
// points := [ 120 , 30 , 80 ] ;
10612: LD_ADDR_VAR 0 9
10616: PUSH
10617: LD_INT 120
10619: PUSH
10620: LD_INT 30
10622: PUSH
10623: LD_INT 80
10625: PUSH
10626: EMPTY
10627: LIST
10628: LIST
10629: LIST
10630: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10631: LD_VAR 0 6
10635: PPUSH
10636: CALL_OW 264
10640: PUSH
10641: LD_INT 22
10643: PUSH
10644: EMPTY
10645: LIST
10646: IN
10647: IFFALSE 10668
// points := [ 40 , 1 , 1 ] ;
10649: LD_ADDR_VAR 0 9
10653: PUSH
10654: LD_INT 40
10656: PUSH
10657: LD_INT 1
10659: PUSH
10660: LD_INT 1
10662: PUSH
10663: EMPTY
10664: LIST
10665: LIST
10666: LIST
10667: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10668: LD_VAR 0 6
10672: PPUSH
10673: CALL_OW 264
10677: PUSH
10678: LD_INT 29
10680: PUSH
10681: EMPTY
10682: LIST
10683: IN
10684: IFFALSE 10705
// points := [ 70 , 200 , 400 ] ;
10686: LD_ADDR_VAR 0 9
10690: PUSH
10691: LD_INT 70
10693: PUSH
10694: LD_INT 200
10696: PUSH
10697: LD_INT 400
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: LIST
10704: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10705: LD_VAR 0 6
10709: PPUSH
10710: CALL_OW 264
10714: PUSH
10715: LD_INT 14
10717: PUSH
10718: LD_INT 53
10720: PUSH
10721: EMPTY
10722: LIST
10723: LIST
10724: IN
10725: IFFALSE 10746
// points := [ 40 , 10 , 20 ] ;
10727: LD_ADDR_VAR 0 9
10731: PUSH
10732: LD_INT 40
10734: PUSH
10735: LD_INT 10
10737: PUSH
10738: LD_INT 20
10740: PUSH
10741: EMPTY
10742: LIST
10743: LIST
10744: LIST
10745: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10746: LD_VAR 0 6
10750: PPUSH
10751: CALL_OW 264
10755: PUSH
10756: LD_INT 9
10758: PUSH
10759: EMPTY
10760: LIST
10761: IN
10762: IFFALSE 10783
// points := [ 5 , 70 , 20 ] ;
10764: LD_ADDR_VAR 0 9
10768: PUSH
10769: LD_INT 5
10771: PUSH
10772: LD_INT 70
10774: PUSH
10775: LD_INT 20
10777: PUSH
10778: EMPTY
10779: LIST
10780: LIST
10781: LIST
10782: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10783: LD_VAR 0 6
10787: PPUSH
10788: CALL_OW 264
10792: PUSH
10793: LD_INT 10
10795: PUSH
10796: EMPTY
10797: LIST
10798: IN
10799: IFFALSE 10820
// points := [ 35 , 110 , 70 ] ;
10801: LD_ADDR_VAR 0 9
10805: PUSH
10806: LD_INT 35
10808: PUSH
10809: LD_INT 110
10811: PUSH
10812: LD_INT 70
10814: PUSH
10815: EMPTY
10816: LIST
10817: LIST
10818: LIST
10819: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10820: LD_VAR 0 6
10824: PPUSH
10825: CALL_OW 265
10829: PUSH
10830: LD_INT 25
10832: EQUAL
10833: IFFALSE 10854
// points := [ 80 , 65 , 100 ] ;
10835: LD_ADDR_VAR 0 9
10839: PUSH
10840: LD_INT 80
10842: PUSH
10843: LD_INT 65
10845: PUSH
10846: LD_INT 100
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: LIST
10853: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10854: LD_VAR 0 6
10858: PPUSH
10859: CALL_OW 263
10863: PUSH
10864: LD_INT 1
10866: EQUAL
10867: IFFALSE 10902
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10869: LD_ADDR_VAR 0 10
10873: PUSH
10874: LD_VAR 0 10
10878: PUSH
10879: LD_VAR 0 6
10883: PPUSH
10884: CALL_OW 311
10888: PPUSH
10889: LD_INT 3
10891: PPUSH
10892: CALL_OW 259
10896: PUSH
10897: LD_INT 4
10899: MUL
10900: MUL
10901: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10902: LD_VAR 0 6
10906: PPUSH
10907: CALL_OW 263
10911: PUSH
10912: LD_INT 2
10914: EQUAL
10915: IFFALSE 10966
// begin j := IsControledBy ( i ) ;
10917: LD_ADDR_VAR 0 7
10921: PUSH
10922: LD_VAR 0 6
10926: PPUSH
10927: CALL_OW 312
10931: ST_TO_ADDR
// if j then
10932: LD_VAR 0 7
10936: IFFALSE 10966
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10938: LD_ADDR_VAR 0 10
10942: PUSH
10943: LD_VAR 0 10
10947: PUSH
10948: LD_VAR 0 7
10952: PPUSH
10953: LD_INT 3
10955: PPUSH
10956: CALL_OW 259
10960: PUSH
10961: LD_INT 3
10963: MUL
10964: MUL
10965: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10966: LD_VAR 0 6
10970: PPUSH
10971: CALL_OW 264
10975: PUSH
10976: LD_INT 5
10978: PUSH
10979: LD_INT 6
10981: PUSH
10982: LD_INT 46
10984: PUSH
10985: LD_INT 44
10987: PUSH
10988: LD_INT 47
10990: PUSH
10991: LD_INT 45
10993: PUSH
10994: LD_INT 28
10996: PUSH
10997: LD_INT 7
10999: PUSH
11000: LD_INT 27
11002: PUSH
11003: LD_INT 29
11005: PUSH
11006: EMPTY
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: IN
11018: PUSH
11019: LD_VAR 0 1
11023: PPUSH
11024: LD_INT 52
11026: PPUSH
11027: CALL_OW 321
11031: PUSH
11032: LD_INT 2
11034: EQUAL
11035: AND
11036: IFFALSE 11053
// bpoints := bpoints * 1.2 ;
11038: LD_ADDR_VAR 0 10
11042: PUSH
11043: LD_VAR 0 10
11047: PUSH
11048: LD_REAL  1.20000000000000E+0000
11051: MUL
11052: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
11053: LD_VAR 0 6
11057: PPUSH
11058: CALL_OW 264
11062: PUSH
11063: LD_INT 6
11065: PUSH
11066: LD_INT 46
11068: PUSH
11069: LD_INT 47
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: LIST
11076: IN
11077: IFFALSE 11094
// bpoints := bpoints * 1.2 ;
11079: LD_ADDR_VAR 0 10
11083: PUSH
11084: LD_VAR 0 10
11088: PUSH
11089: LD_REAL  1.20000000000000E+0000
11092: MUL
11093: ST_TO_ADDR
// end ; unit_building :
11094: GO 11108
11096: LD_INT 3
11098: DOUBLE
11099: EQUAL
11100: IFTRUE 11104
11102: GO 11107
11104: POP
// ; end ;
11105: GO 11108
11107: POP
// for j = 1 to 3 do
11108: LD_ADDR_VAR 0 7
11112: PUSH
11113: DOUBLE
11114: LD_INT 1
11116: DEC
11117: ST_TO_ADDR
11118: LD_INT 3
11120: PUSH
11121: FOR_TO
11122: IFFALSE 11175
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
11124: LD_ADDR_VAR 0 5
11128: PUSH
11129: LD_VAR 0 5
11133: PPUSH
11134: LD_VAR 0 7
11138: PPUSH
11139: LD_VAR 0 5
11143: PUSH
11144: LD_VAR 0 7
11148: ARRAY
11149: PUSH
11150: LD_VAR 0 9
11154: PUSH
11155: LD_VAR 0 7
11159: ARRAY
11160: PUSH
11161: LD_VAR 0 10
11165: MUL
11166: PLUS
11167: PPUSH
11168: CALL_OW 1
11172: ST_TO_ADDR
11173: GO 11121
11175: POP
11176: POP
// end ;
11177: GO 9656
11179: POP
11180: POP
// result := Replace ( result , 4 , tmp ) ;
11181: LD_ADDR_VAR 0 5
11185: PUSH
11186: LD_VAR 0 5
11190: PPUSH
11191: LD_INT 4
11193: PPUSH
11194: LD_VAR 0 8
11198: PPUSH
11199: CALL_OW 1
11203: ST_TO_ADDR
// end ;
11204: LD_VAR 0 5
11208: RET
// export function DangerAtRange ( unit , range ) ; begin
11209: LD_INT 0
11211: PPUSH
// if not unit then
11212: LD_VAR 0 1
11216: NOT
11217: IFFALSE 11221
// exit ;
11219: GO 11266
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11221: LD_ADDR_VAR 0 3
11225: PUSH
11226: LD_VAR 0 1
11230: PPUSH
11231: CALL_OW 255
11235: PPUSH
11236: LD_VAR 0 1
11240: PPUSH
11241: CALL_OW 250
11245: PPUSH
11246: LD_VAR 0 1
11250: PPUSH
11251: CALL_OW 251
11255: PPUSH
11256: LD_VAR 0 2
11260: PPUSH
11261: CALL 9508 0 4
11265: ST_TO_ADDR
// end ;
11266: LD_VAR 0 3
11270: RET
// export function DangerInArea ( side , area ) ; begin
11271: LD_INT 0
11273: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11274: LD_ADDR_VAR 0 3
11278: PUSH
11279: LD_VAR 0 2
11283: PPUSH
11284: LD_INT 81
11286: PUSH
11287: LD_VAR 0 1
11291: PUSH
11292: EMPTY
11293: LIST
11294: LIST
11295: PPUSH
11296: CALL_OW 70
11300: ST_TO_ADDR
// end ;
11301: LD_VAR 0 3
11305: RET
// export function IsExtension ( b ) ; begin
11306: LD_INT 0
11308: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11309: LD_ADDR_VAR 0 2
11313: PUSH
11314: LD_VAR 0 1
11318: PUSH
11319: LD_INT 23
11321: PUSH
11322: LD_INT 20
11324: PUSH
11325: LD_INT 22
11327: PUSH
11328: LD_INT 17
11330: PUSH
11331: LD_INT 24
11333: PUSH
11334: LD_INT 21
11336: PUSH
11337: LD_INT 19
11339: PUSH
11340: LD_INT 16
11342: PUSH
11343: LD_INT 25
11345: PUSH
11346: LD_INT 18
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: LIST
11360: IN
11361: ST_TO_ADDR
// end ;
11362: LD_VAR 0 2
11366: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11367: LD_INT 0
11369: PPUSH
11370: PPUSH
11371: PPUSH
// result := [ ] ;
11372: LD_ADDR_VAR 0 4
11376: PUSH
11377: EMPTY
11378: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11379: LD_ADDR_VAR 0 5
11383: PUSH
11384: LD_VAR 0 2
11388: PPUSH
11389: LD_INT 21
11391: PUSH
11392: LD_INT 3
11394: PUSH
11395: EMPTY
11396: LIST
11397: LIST
11398: PPUSH
11399: CALL_OW 70
11403: ST_TO_ADDR
// if not tmp then
11404: LD_VAR 0 5
11408: NOT
11409: IFFALSE 11413
// exit ;
11411: GO 11477
// if checkLink then
11413: LD_VAR 0 3
11417: IFFALSE 11467
// begin for i in tmp do
11419: LD_ADDR_VAR 0 6
11423: PUSH
11424: LD_VAR 0 5
11428: PUSH
11429: FOR_IN
11430: IFFALSE 11465
// if GetBase ( i ) <> base then
11432: LD_VAR 0 6
11436: PPUSH
11437: CALL_OW 274
11441: PUSH
11442: LD_VAR 0 1
11446: NONEQUAL
11447: IFFALSE 11463
// ComLinkToBase ( base , i ) ;
11449: LD_VAR 0 1
11453: PPUSH
11454: LD_VAR 0 6
11458: PPUSH
11459: CALL_OW 169
11463: GO 11429
11465: POP
11466: POP
// end ; result := tmp ;
11467: LD_ADDR_VAR 0 4
11471: PUSH
11472: LD_VAR 0 5
11476: ST_TO_ADDR
// end ;
11477: LD_VAR 0 4
11481: RET
// export function ComComplete ( units , b ) ; var i ; begin
11482: LD_INT 0
11484: PPUSH
11485: PPUSH
// if not units then
11486: LD_VAR 0 1
11490: NOT
11491: IFFALSE 11495
// exit ;
11493: GO 11585
// for i in units do
11495: LD_ADDR_VAR 0 4
11499: PUSH
11500: LD_VAR 0 1
11504: PUSH
11505: FOR_IN
11506: IFFALSE 11583
// if BuildingStatus ( b ) = bs_build then
11508: LD_VAR 0 2
11512: PPUSH
11513: CALL_OW 461
11517: PUSH
11518: LD_INT 1
11520: EQUAL
11521: IFFALSE 11581
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11523: LD_VAR 0 4
11527: PPUSH
11528: LD_STRING h
11530: PUSH
11531: LD_VAR 0 2
11535: PPUSH
11536: CALL_OW 250
11540: PUSH
11541: LD_VAR 0 2
11545: PPUSH
11546: CALL_OW 251
11550: PUSH
11551: LD_VAR 0 2
11555: PUSH
11556: LD_INT 0
11558: PUSH
11559: LD_INT 0
11561: PUSH
11562: LD_INT 0
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: PUSH
11574: EMPTY
11575: LIST
11576: PPUSH
11577: CALL_OW 446
11581: GO 11505
11583: POP
11584: POP
// end ;
11585: LD_VAR 0 3
11589: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11590: LD_INT 0
11592: PPUSH
11593: PPUSH
11594: PPUSH
11595: PPUSH
11596: PPUSH
11597: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11598: LD_VAR 0 1
11602: NOT
11603: PUSH
11604: LD_VAR 0 1
11608: PPUSH
11609: CALL_OW 263
11613: PUSH
11614: LD_INT 2
11616: NONEQUAL
11617: OR
11618: IFFALSE 11622
// exit ;
11620: GO 11938
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11622: LD_ADDR_VAR 0 6
11626: PUSH
11627: LD_INT 22
11629: PUSH
11630: LD_VAR 0 1
11634: PPUSH
11635: CALL_OW 255
11639: PUSH
11640: EMPTY
11641: LIST
11642: LIST
11643: PUSH
11644: LD_INT 2
11646: PUSH
11647: LD_INT 30
11649: PUSH
11650: LD_INT 36
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: PUSH
11657: LD_INT 34
11659: PUSH
11660: LD_INT 31
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: LIST
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: PPUSH
11676: CALL_OW 69
11680: ST_TO_ADDR
// if not tmp then
11681: LD_VAR 0 6
11685: NOT
11686: IFFALSE 11690
// exit ;
11688: GO 11938
// result := [ ] ;
11690: LD_ADDR_VAR 0 2
11694: PUSH
11695: EMPTY
11696: ST_TO_ADDR
// for i in tmp do
11697: LD_ADDR_VAR 0 3
11701: PUSH
11702: LD_VAR 0 6
11706: PUSH
11707: FOR_IN
11708: IFFALSE 11779
// begin t := UnitsInside ( i ) ;
11710: LD_ADDR_VAR 0 4
11714: PUSH
11715: LD_VAR 0 3
11719: PPUSH
11720: CALL_OW 313
11724: ST_TO_ADDR
// if t then
11725: LD_VAR 0 4
11729: IFFALSE 11777
// for j in t do
11731: LD_ADDR_VAR 0 7
11735: PUSH
11736: LD_VAR 0 4
11740: PUSH
11741: FOR_IN
11742: IFFALSE 11775
// result := Replace ( result , result + 1 , j ) ;
11744: LD_ADDR_VAR 0 2
11748: PUSH
11749: LD_VAR 0 2
11753: PPUSH
11754: LD_VAR 0 2
11758: PUSH
11759: LD_INT 1
11761: PLUS
11762: PPUSH
11763: LD_VAR 0 7
11767: PPUSH
11768: CALL_OW 1
11772: ST_TO_ADDR
11773: GO 11741
11775: POP
11776: POP
// end ;
11777: GO 11707
11779: POP
11780: POP
// if not result then
11781: LD_VAR 0 2
11785: NOT
11786: IFFALSE 11790
// exit ;
11788: GO 11938
// mech := result [ 1 ] ;
11790: LD_ADDR_VAR 0 5
11794: PUSH
11795: LD_VAR 0 2
11799: PUSH
11800: LD_INT 1
11802: ARRAY
11803: ST_TO_ADDR
// if result > 1 then
11804: LD_VAR 0 2
11808: PUSH
11809: LD_INT 1
11811: GREATER
11812: IFFALSE 11924
// begin for i = 2 to result do
11814: LD_ADDR_VAR 0 3
11818: PUSH
11819: DOUBLE
11820: LD_INT 2
11822: DEC
11823: ST_TO_ADDR
11824: LD_VAR 0 2
11828: PUSH
11829: FOR_TO
11830: IFFALSE 11922
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11832: LD_ADDR_VAR 0 4
11836: PUSH
11837: LD_VAR 0 2
11841: PUSH
11842: LD_VAR 0 3
11846: ARRAY
11847: PPUSH
11848: LD_INT 3
11850: PPUSH
11851: CALL_OW 259
11855: PUSH
11856: LD_VAR 0 2
11860: PUSH
11861: LD_VAR 0 3
11865: ARRAY
11866: PPUSH
11867: CALL_OW 432
11871: MINUS
11872: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11873: LD_VAR 0 4
11877: PUSH
11878: LD_VAR 0 5
11882: PPUSH
11883: LD_INT 3
11885: PPUSH
11886: CALL_OW 259
11890: PUSH
11891: LD_VAR 0 5
11895: PPUSH
11896: CALL_OW 432
11900: MINUS
11901: GREATEREQUAL
11902: IFFALSE 11920
// mech := result [ i ] ;
11904: LD_ADDR_VAR 0 5
11908: PUSH
11909: LD_VAR 0 2
11913: PUSH
11914: LD_VAR 0 3
11918: ARRAY
11919: ST_TO_ADDR
// end ;
11920: GO 11829
11922: POP
11923: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11924: LD_VAR 0 1
11928: PPUSH
11929: LD_VAR 0 5
11933: PPUSH
11934: CALL_OW 135
// end ;
11938: LD_VAR 0 2
11942: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11943: LD_INT 0
11945: PPUSH
11946: PPUSH
11947: PPUSH
11948: PPUSH
11949: PPUSH
11950: PPUSH
11951: PPUSH
11952: PPUSH
11953: PPUSH
11954: PPUSH
11955: PPUSH
11956: PPUSH
11957: PPUSH
// result := [ ] ;
11958: LD_ADDR_VAR 0 7
11962: PUSH
11963: EMPTY
11964: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11965: LD_VAR 0 1
11969: PPUSH
11970: CALL_OW 266
11974: PUSH
11975: LD_INT 0
11977: PUSH
11978: LD_INT 1
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: IN
11985: NOT
11986: IFFALSE 11990
// exit ;
11988: GO 13624
// if name then
11990: LD_VAR 0 3
11994: IFFALSE 12010
// SetBName ( base_dep , name ) ;
11996: LD_VAR 0 1
12000: PPUSH
12001: LD_VAR 0 3
12005: PPUSH
12006: CALL_OW 500
// base := GetBase ( base_dep ) ;
12010: LD_ADDR_VAR 0 15
12014: PUSH
12015: LD_VAR 0 1
12019: PPUSH
12020: CALL_OW 274
12024: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12025: LD_ADDR_VAR 0 16
12029: PUSH
12030: LD_VAR 0 1
12034: PPUSH
12035: CALL_OW 255
12039: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
12040: LD_ADDR_VAR 0 17
12044: PUSH
12045: LD_VAR 0 1
12049: PPUSH
12050: CALL_OW 248
12054: ST_TO_ADDR
// if sources then
12055: LD_VAR 0 5
12059: IFFALSE 12106
// for i = 1 to 3 do
12061: LD_ADDR_VAR 0 8
12065: PUSH
12066: DOUBLE
12067: LD_INT 1
12069: DEC
12070: ST_TO_ADDR
12071: LD_INT 3
12073: PUSH
12074: FOR_TO
12075: IFFALSE 12104
// AddResourceType ( base , i , sources [ i ] ) ;
12077: LD_VAR 0 15
12081: PPUSH
12082: LD_VAR 0 8
12086: PPUSH
12087: LD_VAR 0 5
12091: PUSH
12092: LD_VAR 0 8
12096: ARRAY
12097: PPUSH
12098: CALL_OW 276
12102: GO 12074
12104: POP
12105: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
12106: LD_ADDR_VAR 0 18
12110: PUSH
12111: LD_VAR 0 15
12115: PPUSH
12116: LD_VAR 0 2
12120: PPUSH
12121: LD_INT 1
12123: PPUSH
12124: CALL 11367 0 3
12128: ST_TO_ADDR
// InitHc ;
12129: CALL_OW 19
// InitUc ;
12133: CALL_OW 18
// uc_side := side ;
12137: LD_ADDR_OWVAR 20
12141: PUSH
12142: LD_VAR 0 16
12146: ST_TO_ADDR
// uc_nation := nation ;
12147: LD_ADDR_OWVAR 21
12151: PUSH
12152: LD_VAR 0 17
12156: ST_TO_ADDR
// if buildings then
12157: LD_VAR 0 18
12161: IFFALSE 13483
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12163: LD_ADDR_VAR 0 19
12167: PUSH
12168: LD_VAR 0 18
12172: PPUSH
12173: LD_INT 2
12175: PUSH
12176: LD_INT 30
12178: PUSH
12179: LD_INT 29
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: PUSH
12186: LD_INT 30
12188: PUSH
12189: LD_INT 30
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: PUSH
12196: EMPTY
12197: LIST
12198: LIST
12199: LIST
12200: PPUSH
12201: CALL_OW 72
12205: ST_TO_ADDR
// if tmp then
12206: LD_VAR 0 19
12210: IFFALSE 12258
// for i in tmp do
12212: LD_ADDR_VAR 0 8
12216: PUSH
12217: LD_VAR 0 19
12221: PUSH
12222: FOR_IN
12223: IFFALSE 12256
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12225: LD_VAR 0 8
12229: PPUSH
12230: CALL_OW 250
12234: PPUSH
12235: LD_VAR 0 8
12239: PPUSH
12240: CALL_OW 251
12244: PPUSH
12245: LD_VAR 0 16
12249: PPUSH
12250: CALL_OW 441
12254: GO 12222
12256: POP
12257: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12258: LD_VAR 0 18
12262: PPUSH
12263: LD_INT 2
12265: PUSH
12266: LD_INT 30
12268: PUSH
12269: LD_INT 32
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: PUSH
12276: LD_INT 30
12278: PUSH
12279: LD_INT 33
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: LIST
12290: PPUSH
12291: CALL_OW 72
12295: IFFALSE 12383
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12297: LD_ADDR_VAR 0 8
12301: PUSH
12302: LD_VAR 0 18
12306: PPUSH
12307: LD_INT 2
12309: PUSH
12310: LD_INT 30
12312: PUSH
12313: LD_INT 32
12315: PUSH
12316: EMPTY
12317: LIST
12318: LIST
12319: PUSH
12320: LD_INT 30
12322: PUSH
12323: LD_INT 33
12325: PUSH
12326: EMPTY
12327: LIST
12328: LIST
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: LIST
12334: PPUSH
12335: CALL_OW 72
12339: PUSH
12340: FOR_IN
12341: IFFALSE 12381
// begin if not GetBWeapon ( i ) then
12343: LD_VAR 0 8
12347: PPUSH
12348: CALL_OW 269
12352: NOT
12353: IFFALSE 12379
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12355: LD_VAR 0 8
12359: PPUSH
12360: LD_VAR 0 8
12364: PPUSH
12365: LD_VAR 0 2
12369: PPUSH
12370: CALL 13629 0 2
12374: PPUSH
12375: CALL_OW 431
// end ;
12379: GO 12340
12381: POP
12382: POP
// end ; for i = 1 to personel do
12383: LD_ADDR_VAR 0 8
12387: PUSH
12388: DOUBLE
12389: LD_INT 1
12391: DEC
12392: ST_TO_ADDR
12393: LD_VAR 0 6
12397: PUSH
12398: FOR_TO
12399: IFFALSE 13463
// begin if i > 4 then
12401: LD_VAR 0 8
12405: PUSH
12406: LD_INT 4
12408: GREATER
12409: IFFALSE 12413
// break ;
12411: GO 13463
// case i of 1 :
12413: LD_VAR 0 8
12417: PUSH
12418: LD_INT 1
12420: DOUBLE
12421: EQUAL
12422: IFTRUE 12426
12424: GO 12506
12426: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12427: LD_ADDR_VAR 0 12
12431: PUSH
12432: LD_VAR 0 18
12436: PPUSH
12437: LD_INT 22
12439: PUSH
12440: LD_VAR 0 16
12444: PUSH
12445: EMPTY
12446: LIST
12447: LIST
12448: PUSH
12449: LD_INT 58
12451: PUSH
12452: EMPTY
12453: LIST
12454: PUSH
12455: LD_INT 2
12457: PUSH
12458: LD_INT 30
12460: PUSH
12461: LD_INT 32
12463: PUSH
12464: EMPTY
12465: LIST
12466: LIST
12467: PUSH
12468: LD_INT 30
12470: PUSH
12471: LD_INT 4
12473: PUSH
12474: EMPTY
12475: LIST
12476: LIST
12477: PUSH
12478: LD_INT 30
12480: PUSH
12481: LD_INT 5
12483: PUSH
12484: EMPTY
12485: LIST
12486: LIST
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: LIST
12498: PPUSH
12499: CALL_OW 72
12503: ST_TO_ADDR
12504: GO 12728
12506: LD_INT 2
12508: DOUBLE
12509: EQUAL
12510: IFTRUE 12514
12512: GO 12576
12514: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12515: LD_ADDR_VAR 0 12
12519: PUSH
12520: LD_VAR 0 18
12524: PPUSH
12525: LD_INT 22
12527: PUSH
12528: LD_VAR 0 16
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: PUSH
12537: LD_INT 2
12539: PUSH
12540: LD_INT 30
12542: PUSH
12543: LD_INT 0
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: PUSH
12550: LD_INT 30
12552: PUSH
12553: LD_INT 1
12555: PUSH
12556: EMPTY
12557: LIST
12558: LIST
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: LIST
12564: PUSH
12565: EMPTY
12566: LIST
12567: LIST
12568: PPUSH
12569: CALL_OW 72
12573: ST_TO_ADDR
12574: GO 12728
12576: LD_INT 3
12578: DOUBLE
12579: EQUAL
12580: IFTRUE 12584
12582: GO 12646
12584: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12585: LD_ADDR_VAR 0 12
12589: PUSH
12590: LD_VAR 0 18
12594: PPUSH
12595: LD_INT 22
12597: PUSH
12598: LD_VAR 0 16
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: PUSH
12607: LD_INT 2
12609: PUSH
12610: LD_INT 30
12612: PUSH
12613: LD_INT 2
12615: PUSH
12616: EMPTY
12617: LIST
12618: LIST
12619: PUSH
12620: LD_INT 30
12622: PUSH
12623: LD_INT 3
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: PUSH
12630: EMPTY
12631: LIST
12632: LIST
12633: LIST
12634: PUSH
12635: EMPTY
12636: LIST
12637: LIST
12638: PPUSH
12639: CALL_OW 72
12643: ST_TO_ADDR
12644: GO 12728
12646: LD_INT 4
12648: DOUBLE
12649: EQUAL
12650: IFTRUE 12654
12652: GO 12727
12654: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12655: LD_ADDR_VAR 0 12
12659: PUSH
12660: LD_VAR 0 18
12664: PPUSH
12665: LD_INT 22
12667: PUSH
12668: LD_VAR 0 16
12672: PUSH
12673: EMPTY
12674: LIST
12675: LIST
12676: PUSH
12677: LD_INT 2
12679: PUSH
12680: LD_INT 30
12682: PUSH
12683: LD_INT 6
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: PUSH
12690: LD_INT 30
12692: PUSH
12693: LD_INT 7
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: PUSH
12700: LD_INT 30
12702: PUSH
12703: LD_INT 8
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: PUSH
12716: EMPTY
12717: LIST
12718: LIST
12719: PPUSH
12720: CALL_OW 72
12724: ST_TO_ADDR
12725: GO 12728
12727: POP
// if i = 1 then
12728: LD_VAR 0 8
12732: PUSH
12733: LD_INT 1
12735: EQUAL
12736: IFFALSE 12847
// begin tmp := [ ] ;
12738: LD_ADDR_VAR 0 19
12742: PUSH
12743: EMPTY
12744: ST_TO_ADDR
// for j in f do
12745: LD_ADDR_VAR 0 9
12749: PUSH
12750: LD_VAR 0 12
12754: PUSH
12755: FOR_IN
12756: IFFALSE 12829
// if GetBType ( j ) = b_bunker then
12758: LD_VAR 0 9
12762: PPUSH
12763: CALL_OW 266
12767: PUSH
12768: LD_INT 32
12770: EQUAL
12771: IFFALSE 12798
// tmp := Insert ( tmp , 1 , j ) else
12773: LD_ADDR_VAR 0 19
12777: PUSH
12778: LD_VAR 0 19
12782: PPUSH
12783: LD_INT 1
12785: PPUSH
12786: LD_VAR 0 9
12790: PPUSH
12791: CALL_OW 2
12795: ST_TO_ADDR
12796: GO 12827
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12798: LD_ADDR_VAR 0 19
12802: PUSH
12803: LD_VAR 0 19
12807: PPUSH
12808: LD_VAR 0 19
12812: PUSH
12813: LD_INT 1
12815: PLUS
12816: PPUSH
12817: LD_VAR 0 9
12821: PPUSH
12822: CALL_OW 2
12826: ST_TO_ADDR
12827: GO 12755
12829: POP
12830: POP
// if tmp then
12831: LD_VAR 0 19
12835: IFFALSE 12847
// f := tmp ;
12837: LD_ADDR_VAR 0 12
12841: PUSH
12842: LD_VAR 0 19
12846: ST_TO_ADDR
// end ; x := personel [ i ] ;
12847: LD_ADDR_VAR 0 13
12851: PUSH
12852: LD_VAR 0 6
12856: PUSH
12857: LD_VAR 0 8
12861: ARRAY
12862: ST_TO_ADDR
// if x = - 1 then
12863: LD_VAR 0 13
12867: PUSH
12868: LD_INT 1
12870: NEG
12871: EQUAL
12872: IFFALSE 13081
// begin for j in f do
12874: LD_ADDR_VAR 0 9
12878: PUSH
12879: LD_VAR 0 12
12883: PUSH
12884: FOR_IN
12885: IFFALSE 13077
// repeat InitHc ;
12887: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12891: LD_VAR 0 9
12895: PPUSH
12896: CALL_OW 266
12900: PUSH
12901: LD_INT 5
12903: EQUAL
12904: IFFALSE 12974
// begin if UnitsInside ( j ) < 3 then
12906: LD_VAR 0 9
12910: PPUSH
12911: CALL_OW 313
12915: PUSH
12916: LD_INT 3
12918: LESS
12919: IFFALSE 12955
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12921: LD_INT 0
12923: PPUSH
12924: LD_INT 5
12926: PUSH
12927: LD_INT 8
12929: PUSH
12930: LD_INT 9
12932: PUSH
12933: EMPTY
12934: LIST
12935: LIST
12936: LIST
12937: PUSH
12938: LD_VAR 0 17
12942: ARRAY
12943: PPUSH
12944: LD_VAR 0 4
12948: PPUSH
12949: CALL_OW 380
12953: GO 12972
// PrepareHuman ( false , i , skill ) ;
12955: LD_INT 0
12957: PPUSH
12958: LD_VAR 0 8
12962: PPUSH
12963: LD_VAR 0 4
12967: PPUSH
12968: CALL_OW 380
// end else
12972: GO 12991
// PrepareHuman ( false , i , skill ) ;
12974: LD_INT 0
12976: PPUSH
12977: LD_VAR 0 8
12981: PPUSH
12982: LD_VAR 0 4
12986: PPUSH
12987: CALL_OW 380
// un := CreateHuman ;
12991: LD_ADDR_VAR 0 14
12995: PUSH
12996: CALL_OW 44
13000: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13001: LD_ADDR_VAR 0 7
13005: PUSH
13006: LD_VAR 0 7
13010: PPUSH
13011: LD_INT 1
13013: PPUSH
13014: LD_VAR 0 14
13018: PPUSH
13019: CALL_OW 2
13023: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13024: LD_VAR 0 14
13028: PPUSH
13029: LD_VAR 0 9
13033: PPUSH
13034: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13038: LD_VAR 0 9
13042: PPUSH
13043: CALL_OW 313
13047: PUSH
13048: LD_INT 6
13050: EQUAL
13051: PUSH
13052: LD_VAR 0 9
13056: PPUSH
13057: CALL_OW 266
13061: PUSH
13062: LD_INT 32
13064: PUSH
13065: LD_INT 31
13067: PUSH
13068: EMPTY
13069: LIST
13070: LIST
13071: IN
13072: OR
13073: IFFALSE 12887
13075: GO 12884
13077: POP
13078: POP
// end else
13079: GO 13461
// for j = 1 to x do
13081: LD_ADDR_VAR 0 9
13085: PUSH
13086: DOUBLE
13087: LD_INT 1
13089: DEC
13090: ST_TO_ADDR
13091: LD_VAR 0 13
13095: PUSH
13096: FOR_TO
13097: IFFALSE 13459
// begin InitHc ;
13099: CALL_OW 19
// if not f then
13103: LD_VAR 0 12
13107: NOT
13108: IFFALSE 13197
// begin PrepareHuman ( false , i , skill ) ;
13110: LD_INT 0
13112: PPUSH
13113: LD_VAR 0 8
13117: PPUSH
13118: LD_VAR 0 4
13122: PPUSH
13123: CALL_OW 380
// un := CreateHuman ;
13127: LD_ADDR_VAR 0 14
13131: PUSH
13132: CALL_OW 44
13136: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13137: LD_ADDR_VAR 0 7
13141: PUSH
13142: LD_VAR 0 7
13146: PPUSH
13147: LD_INT 1
13149: PPUSH
13150: LD_VAR 0 14
13154: PPUSH
13155: CALL_OW 2
13159: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13160: LD_VAR 0 14
13164: PPUSH
13165: LD_VAR 0 1
13169: PPUSH
13170: CALL_OW 250
13174: PPUSH
13175: LD_VAR 0 1
13179: PPUSH
13180: CALL_OW 251
13184: PPUSH
13185: LD_INT 10
13187: PPUSH
13188: LD_INT 0
13190: PPUSH
13191: CALL_OW 50
// continue ;
13195: GO 13096
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13197: LD_VAR 0 12
13201: PUSH
13202: LD_INT 1
13204: ARRAY
13205: PPUSH
13206: CALL_OW 313
13210: PUSH
13211: LD_VAR 0 12
13215: PUSH
13216: LD_INT 1
13218: ARRAY
13219: PPUSH
13220: CALL_OW 266
13224: PUSH
13225: LD_INT 32
13227: PUSH
13228: LD_INT 31
13230: PUSH
13231: EMPTY
13232: LIST
13233: LIST
13234: IN
13235: AND
13236: PUSH
13237: LD_VAR 0 12
13241: PUSH
13242: LD_INT 1
13244: ARRAY
13245: PPUSH
13246: CALL_OW 313
13250: PUSH
13251: LD_INT 6
13253: EQUAL
13254: OR
13255: IFFALSE 13275
// f := Delete ( f , 1 ) ;
13257: LD_ADDR_VAR 0 12
13261: PUSH
13262: LD_VAR 0 12
13266: PPUSH
13267: LD_INT 1
13269: PPUSH
13270: CALL_OW 3
13274: ST_TO_ADDR
// if not f then
13275: LD_VAR 0 12
13279: NOT
13280: IFFALSE 13298
// begin x := x + 2 ;
13282: LD_ADDR_VAR 0 13
13286: PUSH
13287: LD_VAR 0 13
13291: PUSH
13292: LD_INT 2
13294: PLUS
13295: ST_TO_ADDR
// continue ;
13296: GO 13096
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13298: LD_VAR 0 12
13302: PUSH
13303: LD_INT 1
13305: ARRAY
13306: PPUSH
13307: CALL_OW 266
13311: PUSH
13312: LD_INT 5
13314: EQUAL
13315: IFFALSE 13389
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13317: LD_VAR 0 12
13321: PUSH
13322: LD_INT 1
13324: ARRAY
13325: PPUSH
13326: CALL_OW 313
13330: PUSH
13331: LD_INT 3
13333: LESS
13334: IFFALSE 13370
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13336: LD_INT 0
13338: PPUSH
13339: LD_INT 5
13341: PUSH
13342: LD_INT 8
13344: PUSH
13345: LD_INT 9
13347: PUSH
13348: EMPTY
13349: LIST
13350: LIST
13351: LIST
13352: PUSH
13353: LD_VAR 0 17
13357: ARRAY
13358: PPUSH
13359: LD_VAR 0 4
13363: PPUSH
13364: CALL_OW 380
13368: GO 13387
// PrepareHuman ( false , i , skill ) ;
13370: LD_INT 0
13372: PPUSH
13373: LD_VAR 0 8
13377: PPUSH
13378: LD_VAR 0 4
13382: PPUSH
13383: CALL_OW 380
// end else
13387: GO 13406
// PrepareHuman ( false , i , skill ) ;
13389: LD_INT 0
13391: PPUSH
13392: LD_VAR 0 8
13396: PPUSH
13397: LD_VAR 0 4
13401: PPUSH
13402: CALL_OW 380
// un := CreateHuman ;
13406: LD_ADDR_VAR 0 14
13410: PUSH
13411: CALL_OW 44
13415: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13416: LD_ADDR_VAR 0 7
13420: PUSH
13421: LD_VAR 0 7
13425: PPUSH
13426: LD_INT 1
13428: PPUSH
13429: LD_VAR 0 14
13433: PPUSH
13434: CALL_OW 2
13438: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13439: LD_VAR 0 14
13443: PPUSH
13444: LD_VAR 0 12
13448: PUSH
13449: LD_INT 1
13451: ARRAY
13452: PPUSH
13453: CALL_OW 52
// end ;
13457: GO 13096
13459: POP
13460: POP
// end ;
13461: GO 12398
13463: POP
13464: POP
// result := result ^ buildings ;
13465: LD_ADDR_VAR 0 7
13469: PUSH
13470: LD_VAR 0 7
13474: PUSH
13475: LD_VAR 0 18
13479: ADD
13480: ST_TO_ADDR
// end else
13481: GO 13624
// begin for i = 1 to personel do
13483: LD_ADDR_VAR 0 8
13487: PUSH
13488: DOUBLE
13489: LD_INT 1
13491: DEC
13492: ST_TO_ADDR
13493: LD_VAR 0 6
13497: PUSH
13498: FOR_TO
13499: IFFALSE 13622
// begin if i > 4 then
13501: LD_VAR 0 8
13505: PUSH
13506: LD_INT 4
13508: GREATER
13509: IFFALSE 13513
// break ;
13511: GO 13622
// x := personel [ i ] ;
13513: LD_ADDR_VAR 0 13
13517: PUSH
13518: LD_VAR 0 6
13522: PUSH
13523: LD_VAR 0 8
13527: ARRAY
13528: ST_TO_ADDR
// if x = - 1 then
13529: LD_VAR 0 13
13533: PUSH
13534: LD_INT 1
13536: NEG
13537: EQUAL
13538: IFFALSE 13542
// continue ;
13540: GO 13498
// PrepareHuman ( false , i , skill ) ;
13542: LD_INT 0
13544: PPUSH
13545: LD_VAR 0 8
13549: PPUSH
13550: LD_VAR 0 4
13554: PPUSH
13555: CALL_OW 380
// un := CreateHuman ;
13559: LD_ADDR_VAR 0 14
13563: PUSH
13564: CALL_OW 44
13568: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13569: LD_VAR 0 14
13573: PPUSH
13574: LD_VAR 0 1
13578: PPUSH
13579: CALL_OW 250
13583: PPUSH
13584: LD_VAR 0 1
13588: PPUSH
13589: CALL_OW 251
13593: PPUSH
13594: LD_INT 10
13596: PPUSH
13597: LD_INT 0
13599: PPUSH
13600: CALL_OW 50
// result := result ^ un ;
13604: LD_ADDR_VAR 0 7
13608: PUSH
13609: LD_VAR 0 7
13613: PUSH
13614: LD_VAR 0 14
13618: ADD
13619: ST_TO_ADDR
// end ;
13620: GO 13498
13622: POP
13623: POP
// end ; end ;
13624: LD_VAR 0 7
13628: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13629: LD_INT 0
13631: PPUSH
13632: PPUSH
13633: PPUSH
13634: PPUSH
13635: PPUSH
13636: PPUSH
13637: PPUSH
13638: PPUSH
13639: PPUSH
13640: PPUSH
13641: PPUSH
13642: PPUSH
13643: PPUSH
13644: PPUSH
13645: PPUSH
13646: PPUSH
// result := false ;
13647: LD_ADDR_VAR 0 3
13651: PUSH
13652: LD_INT 0
13654: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13655: LD_VAR 0 1
13659: NOT
13660: PUSH
13661: LD_VAR 0 1
13665: PPUSH
13666: CALL_OW 266
13670: PUSH
13671: LD_INT 32
13673: PUSH
13674: LD_INT 33
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: IN
13681: NOT
13682: OR
13683: IFFALSE 13687
// exit ;
13685: GO 14796
// nat := GetNation ( tower ) ;
13687: LD_ADDR_VAR 0 12
13691: PUSH
13692: LD_VAR 0 1
13696: PPUSH
13697: CALL_OW 248
13701: ST_TO_ADDR
// side := GetSide ( tower ) ;
13702: LD_ADDR_VAR 0 16
13706: PUSH
13707: LD_VAR 0 1
13711: PPUSH
13712: CALL_OW 255
13716: ST_TO_ADDR
// x := GetX ( tower ) ;
13717: LD_ADDR_VAR 0 10
13721: PUSH
13722: LD_VAR 0 1
13726: PPUSH
13727: CALL_OW 250
13731: ST_TO_ADDR
// y := GetY ( tower ) ;
13732: LD_ADDR_VAR 0 11
13736: PUSH
13737: LD_VAR 0 1
13741: PPUSH
13742: CALL_OW 251
13746: ST_TO_ADDR
// if not x or not y then
13747: LD_VAR 0 10
13751: NOT
13752: PUSH
13753: LD_VAR 0 11
13757: NOT
13758: OR
13759: IFFALSE 13763
// exit ;
13761: GO 14796
// weapon := 0 ;
13763: LD_ADDR_VAR 0 18
13767: PUSH
13768: LD_INT 0
13770: ST_TO_ADDR
// fac_list := [ ] ;
13771: LD_ADDR_VAR 0 17
13775: PUSH
13776: EMPTY
13777: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13778: LD_ADDR_VAR 0 6
13782: PUSH
13783: LD_VAR 0 1
13787: PPUSH
13788: CALL_OW 274
13792: PPUSH
13793: LD_VAR 0 2
13797: PPUSH
13798: LD_INT 0
13800: PPUSH
13801: CALL 11367 0 3
13805: PPUSH
13806: LD_INT 30
13808: PUSH
13809: LD_INT 3
13811: PUSH
13812: EMPTY
13813: LIST
13814: LIST
13815: PPUSH
13816: CALL_OW 72
13820: ST_TO_ADDR
// if not factories then
13821: LD_VAR 0 6
13825: NOT
13826: IFFALSE 13830
// exit ;
13828: GO 14796
// for i in factories do
13830: LD_ADDR_VAR 0 8
13834: PUSH
13835: LD_VAR 0 6
13839: PUSH
13840: FOR_IN
13841: IFFALSE 13866
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13843: LD_ADDR_VAR 0 17
13847: PUSH
13848: LD_VAR 0 17
13852: PUSH
13853: LD_VAR 0 8
13857: PPUSH
13858: CALL_OW 478
13862: UNION
13863: ST_TO_ADDR
13864: GO 13840
13866: POP
13867: POP
// if not fac_list then
13868: LD_VAR 0 17
13872: NOT
13873: IFFALSE 13877
// exit ;
13875: GO 14796
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13877: LD_ADDR_VAR 0 5
13881: PUSH
13882: LD_INT 4
13884: PUSH
13885: LD_INT 5
13887: PUSH
13888: LD_INT 9
13890: PUSH
13891: LD_INT 10
13893: PUSH
13894: LD_INT 6
13896: PUSH
13897: LD_INT 7
13899: PUSH
13900: LD_INT 11
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: PUSH
13912: LD_INT 27
13914: PUSH
13915: LD_INT 28
13917: PUSH
13918: LD_INT 26
13920: PUSH
13921: LD_INT 30
13923: PUSH
13924: EMPTY
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: PUSH
13930: LD_INT 43
13932: PUSH
13933: LD_INT 44
13935: PUSH
13936: LD_INT 46
13938: PUSH
13939: LD_INT 45
13941: PUSH
13942: LD_INT 47
13944: PUSH
13945: LD_INT 49
13947: PUSH
13948: EMPTY
13949: LIST
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: PUSH
13956: EMPTY
13957: LIST
13958: LIST
13959: LIST
13960: PUSH
13961: LD_VAR 0 12
13965: ARRAY
13966: ST_TO_ADDR
// list := list isect fac_list ;
13967: LD_ADDR_VAR 0 5
13971: PUSH
13972: LD_VAR 0 5
13976: PUSH
13977: LD_VAR 0 17
13981: ISECT
13982: ST_TO_ADDR
// if not list then
13983: LD_VAR 0 5
13987: NOT
13988: IFFALSE 13992
// exit ;
13990: GO 14796
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13992: LD_VAR 0 12
13996: PUSH
13997: LD_INT 3
13999: EQUAL
14000: PUSH
14001: LD_INT 49
14003: PUSH
14004: LD_VAR 0 5
14008: IN
14009: AND
14010: PUSH
14011: LD_INT 31
14013: PPUSH
14014: LD_VAR 0 16
14018: PPUSH
14019: CALL_OW 321
14023: PUSH
14024: LD_INT 2
14026: EQUAL
14027: AND
14028: IFFALSE 14088
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
14030: LD_INT 22
14032: PUSH
14033: LD_VAR 0 16
14037: PUSH
14038: EMPTY
14039: LIST
14040: LIST
14041: PUSH
14042: LD_INT 35
14044: PUSH
14045: LD_INT 49
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: PUSH
14052: LD_INT 91
14054: PUSH
14055: LD_VAR 0 1
14059: PUSH
14060: LD_INT 10
14062: PUSH
14063: EMPTY
14064: LIST
14065: LIST
14066: LIST
14067: PUSH
14068: EMPTY
14069: LIST
14070: LIST
14071: LIST
14072: PPUSH
14073: CALL_OW 69
14077: NOT
14078: IFFALSE 14088
// weapon := ru_time_lapser ;
14080: LD_ADDR_VAR 0 18
14084: PUSH
14085: LD_INT 49
14087: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
14088: LD_VAR 0 12
14092: PUSH
14093: LD_INT 1
14095: PUSH
14096: LD_INT 2
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: IN
14103: PUSH
14104: LD_INT 11
14106: PUSH
14107: LD_VAR 0 5
14111: IN
14112: PUSH
14113: LD_INT 30
14115: PUSH
14116: LD_VAR 0 5
14120: IN
14121: OR
14122: AND
14123: PUSH
14124: LD_INT 6
14126: PPUSH
14127: LD_VAR 0 16
14131: PPUSH
14132: CALL_OW 321
14136: PUSH
14137: LD_INT 2
14139: EQUAL
14140: AND
14141: IFFALSE 14306
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
14143: LD_INT 22
14145: PUSH
14146: LD_VAR 0 16
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: PUSH
14155: LD_INT 2
14157: PUSH
14158: LD_INT 35
14160: PUSH
14161: LD_INT 11
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: PUSH
14168: LD_INT 35
14170: PUSH
14171: LD_INT 30
14173: PUSH
14174: EMPTY
14175: LIST
14176: LIST
14177: PUSH
14178: EMPTY
14179: LIST
14180: LIST
14181: LIST
14182: PUSH
14183: LD_INT 91
14185: PUSH
14186: LD_VAR 0 1
14190: PUSH
14191: LD_INT 18
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: LIST
14198: PUSH
14199: EMPTY
14200: LIST
14201: LIST
14202: LIST
14203: PPUSH
14204: CALL_OW 69
14208: NOT
14209: PUSH
14210: LD_INT 22
14212: PUSH
14213: LD_VAR 0 16
14217: PUSH
14218: EMPTY
14219: LIST
14220: LIST
14221: PUSH
14222: LD_INT 2
14224: PUSH
14225: LD_INT 30
14227: PUSH
14228: LD_INT 32
14230: PUSH
14231: EMPTY
14232: LIST
14233: LIST
14234: PUSH
14235: LD_INT 30
14237: PUSH
14238: LD_INT 33
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: LIST
14249: PUSH
14250: LD_INT 91
14252: PUSH
14253: LD_VAR 0 1
14257: PUSH
14258: LD_INT 12
14260: PUSH
14261: EMPTY
14262: LIST
14263: LIST
14264: LIST
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: LIST
14270: PUSH
14271: EMPTY
14272: LIST
14273: PPUSH
14274: CALL_OW 69
14278: PUSH
14279: LD_INT 2
14281: GREATER
14282: AND
14283: IFFALSE 14306
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14285: LD_ADDR_VAR 0 18
14289: PUSH
14290: LD_INT 11
14292: PUSH
14293: LD_INT 30
14295: PUSH
14296: EMPTY
14297: LIST
14298: LIST
14299: PUSH
14300: LD_VAR 0 12
14304: ARRAY
14305: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14306: LD_VAR 0 18
14310: NOT
14311: PUSH
14312: LD_INT 40
14314: PPUSH
14315: LD_VAR 0 16
14319: PPUSH
14320: CALL_OW 321
14324: PUSH
14325: LD_INT 2
14327: EQUAL
14328: AND
14329: PUSH
14330: LD_INT 7
14332: PUSH
14333: LD_VAR 0 5
14337: IN
14338: PUSH
14339: LD_INT 28
14341: PUSH
14342: LD_VAR 0 5
14346: IN
14347: OR
14348: PUSH
14349: LD_INT 45
14351: PUSH
14352: LD_VAR 0 5
14356: IN
14357: OR
14358: AND
14359: IFFALSE 14613
// begin hex := GetHexInfo ( x , y ) ;
14361: LD_ADDR_VAR 0 4
14365: PUSH
14366: LD_VAR 0 10
14370: PPUSH
14371: LD_VAR 0 11
14375: PPUSH
14376: CALL_OW 546
14380: ST_TO_ADDR
// if hex [ 1 ] then
14381: LD_VAR 0 4
14385: PUSH
14386: LD_INT 1
14388: ARRAY
14389: IFFALSE 14393
// exit ;
14391: GO 14796
// height := hex [ 2 ] ;
14393: LD_ADDR_VAR 0 15
14397: PUSH
14398: LD_VAR 0 4
14402: PUSH
14403: LD_INT 2
14405: ARRAY
14406: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14407: LD_ADDR_VAR 0 14
14411: PUSH
14412: LD_INT 0
14414: PUSH
14415: LD_INT 2
14417: PUSH
14418: LD_INT 3
14420: PUSH
14421: LD_INT 5
14423: PUSH
14424: EMPTY
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: ST_TO_ADDR
// for i in tmp do
14430: LD_ADDR_VAR 0 8
14434: PUSH
14435: LD_VAR 0 14
14439: PUSH
14440: FOR_IN
14441: IFFALSE 14611
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14443: LD_ADDR_VAR 0 9
14447: PUSH
14448: LD_VAR 0 10
14452: PPUSH
14453: LD_VAR 0 8
14457: PPUSH
14458: LD_INT 5
14460: PPUSH
14461: CALL_OW 272
14465: PUSH
14466: LD_VAR 0 11
14470: PPUSH
14471: LD_VAR 0 8
14475: PPUSH
14476: LD_INT 5
14478: PPUSH
14479: CALL_OW 273
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14488: LD_VAR 0 9
14492: PUSH
14493: LD_INT 1
14495: ARRAY
14496: PPUSH
14497: LD_VAR 0 9
14501: PUSH
14502: LD_INT 2
14504: ARRAY
14505: PPUSH
14506: CALL_OW 488
14510: IFFALSE 14609
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14512: LD_ADDR_VAR 0 4
14516: PUSH
14517: LD_VAR 0 9
14521: PUSH
14522: LD_INT 1
14524: ARRAY
14525: PPUSH
14526: LD_VAR 0 9
14530: PUSH
14531: LD_INT 2
14533: ARRAY
14534: PPUSH
14535: CALL_OW 546
14539: ST_TO_ADDR
// if hex [ 1 ] then
14540: LD_VAR 0 4
14544: PUSH
14545: LD_INT 1
14547: ARRAY
14548: IFFALSE 14552
// continue ;
14550: GO 14440
// h := hex [ 2 ] ;
14552: LD_ADDR_VAR 0 13
14556: PUSH
14557: LD_VAR 0 4
14561: PUSH
14562: LD_INT 2
14564: ARRAY
14565: ST_TO_ADDR
// if h + 7 < height then
14566: LD_VAR 0 13
14570: PUSH
14571: LD_INT 7
14573: PLUS
14574: PUSH
14575: LD_VAR 0 15
14579: LESS
14580: IFFALSE 14609
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14582: LD_ADDR_VAR 0 18
14586: PUSH
14587: LD_INT 7
14589: PUSH
14590: LD_INT 28
14592: PUSH
14593: LD_INT 45
14595: PUSH
14596: EMPTY
14597: LIST
14598: LIST
14599: LIST
14600: PUSH
14601: LD_VAR 0 12
14605: ARRAY
14606: ST_TO_ADDR
// break ;
14607: GO 14611
// end ; end ; end ;
14609: GO 14440
14611: POP
14612: POP
// end ; if not weapon then
14613: LD_VAR 0 18
14617: NOT
14618: IFFALSE 14678
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14620: LD_ADDR_VAR 0 5
14624: PUSH
14625: LD_VAR 0 5
14629: PUSH
14630: LD_INT 11
14632: PUSH
14633: LD_INT 30
14635: PUSH
14636: LD_INT 49
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: LIST
14643: DIFF
14644: ST_TO_ADDR
// if not list then
14645: LD_VAR 0 5
14649: NOT
14650: IFFALSE 14654
// exit ;
14652: GO 14796
// weapon := list [ rand ( 1 , list ) ] ;
14654: LD_ADDR_VAR 0 18
14658: PUSH
14659: LD_VAR 0 5
14663: PUSH
14664: LD_INT 1
14666: PPUSH
14667: LD_VAR 0 5
14671: PPUSH
14672: CALL_OW 12
14676: ARRAY
14677: ST_TO_ADDR
// end ; if weapon then
14678: LD_VAR 0 18
14682: IFFALSE 14796
// begin tmp := CostOfWeapon ( weapon ) ;
14684: LD_ADDR_VAR 0 14
14688: PUSH
14689: LD_VAR 0 18
14693: PPUSH
14694: CALL_OW 451
14698: ST_TO_ADDR
// j := GetBase ( tower ) ;
14699: LD_ADDR_VAR 0 9
14703: PUSH
14704: LD_VAR 0 1
14708: PPUSH
14709: CALL_OW 274
14713: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14714: LD_VAR 0 9
14718: PPUSH
14719: LD_INT 1
14721: PPUSH
14722: CALL_OW 275
14726: PUSH
14727: LD_VAR 0 14
14731: PUSH
14732: LD_INT 1
14734: ARRAY
14735: GREATEREQUAL
14736: PUSH
14737: LD_VAR 0 9
14741: PPUSH
14742: LD_INT 2
14744: PPUSH
14745: CALL_OW 275
14749: PUSH
14750: LD_VAR 0 14
14754: PUSH
14755: LD_INT 2
14757: ARRAY
14758: GREATEREQUAL
14759: AND
14760: PUSH
14761: LD_VAR 0 9
14765: PPUSH
14766: LD_INT 3
14768: PPUSH
14769: CALL_OW 275
14773: PUSH
14774: LD_VAR 0 14
14778: PUSH
14779: LD_INT 3
14781: ARRAY
14782: GREATEREQUAL
14783: AND
14784: IFFALSE 14796
// result := weapon ;
14786: LD_ADDR_VAR 0 3
14790: PUSH
14791: LD_VAR 0 18
14795: ST_TO_ADDR
// end ; end ;
14796: LD_VAR 0 3
14800: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14801: LD_INT 0
14803: PPUSH
14804: PPUSH
// result := true ;
14805: LD_ADDR_VAR 0 3
14809: PUSH
14810: LD_INT 1
14812: ST_TO_ADDR
// if array1 = array2 then
14813: LD_VAR 0 1
14817: PUSH
14818: LD_VAR 0 2
14822: EQUAL
14823: IFFALSE 14883
// begin for i = 1 to array1 do
14825: LD_ADDR_VAR 0 4
14829: PUSH
14830: DOUBLE
14831: LD_INT 1
14833: DEC
14834: ST_TO_ADDR
14835: LD_VAR 0 1
14839: PUSH
14840: FOR_TO
14841: IFFALSE 14879
// if array1 [ i ] <> array2 [ i ] then
14843: LD_VAR 0 1
14847: PUSH
14848: LD_VAR 0 4
14852: ARRAY
14853: PUSH
14854: LD_VAR 0 2
14858: PUSH
14859: LD_VAR 0 4
14863: ARRAY
14864: NONEQUAL
14865: IFFALSE 14877
// begin result := false ;
14867: LD_ADDR_VAR 0 3
14871: PUSH
14872: LD_INT 0
14874: ST_TO_ADDR
// break ;
14875: GO 14879
// end ;
14877: GO 14840
14879: POP
14880: POP
// end else
14881: GO 14891
// result := false ;
14883: LD_ADDR_VAR 0 3
14887: PUSH
14888: LD_INT 0
14890: ST_TO_ADDR
// end ;
14891: LD_VAR 0 3
14895: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14896: LD_INT 0
14898: PPUSH
14899: PPUSH
// if not array1 or not array2 then
14900: LD_VAR 0 1
14904: NOT
14905: PUSH
14906: LD_VAR 0 2
14910: NOT
14911: OR
14912: IFFALSE 14916
// exit ;
14914: GO 14980
// result := true ;
14916: LD_ADDR_VAR 0 3
14920: PUSH
14921: LD_INT 1
14923: ST_TO_ADDR
// for i = 1 to array1 do
14924: LD_ADDR_VAR 0 4
14928: PUSH
14929: DOUBLE
14930: LD_INT 1
14932: DEC
14933: ST_TO_ADDR
14934: LD_VAR 0 1
14938: PUSH
14939: FOR_TO
14940: IFFALSE 14978
// if array1 [ i ] <> array2 [ i ] then
14942: LD_VAR 0 1
14946: PUSH
14947: LD_VAR 0 4
14951: ARRAY
14952: PUSH
14953: LD_VAR 0 2
14957: PUSH
14958: LD_VAR 0 4
14962: ARRAY
14963: NONEQUAL
14964: IFFALSE 14976
// begin result := false ;
14966: LD_ADDR_VAR 0 3
14970: PUSH
14971: LD_INT 0
14973: ST_TO_ADDR
// break ;
14974: GO 14978
// end ;
14976: GO 14939
14978: POP
14979: POP
// end ;
14980: LD_VAR 0 3
14984: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14985: LD_INT 0
14987: PPUSH
14988: PPUSH
14989: PPUSH
// pom := GetBase ( fac ) ;
14990: LD_ADDR_VAR 0 5
14994: PUSH
14995: LD_VAR 0 1
14999: PPUSH
15000: CALL_OW 274
15004: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
15005: LD_ADDR_VAR 0 4
15009: PUSH
15010: LD_VAR 0 2
15014: PUSH
15015: LD_INT 1
15017: ARRAY
15018: PPUSH
15019: LD_VAR 0 2
15023: PUSH
15024: LD_INT 2
15026: ARRAY
15027: PPUSH
15028: LD_VAR 0 2
15032: PUSH
15033: LD_INT 3
15035: ARRAY
15036: PPUSH
15037: LD_VAR 0 2
15041: PUSH
15042: LD_INT 4
15044: ARRAY
15045: PPUSH
15046: CALL_OW 449
15050: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15051: LD_ADDR_VAR 0 3
15055: PUSH
15056: LD_VAR 0 5
15060: PPUSH
15061: LD_INT 1
15063: PPUSH
15064: CALL_OW 275
15068: PUSH
15069: LD_VAR 0 4
15073: PUSH
15074: LD_INT 1
15076: ARRAY
15077: GREATEREQUAL
15078: PUSH
15079: LD_VAR 0 5
15083: PPUSH
15084: LD_INT 2
15086: PPUSH
15087: CALL_OW 275
15091: PUSH
15092: LD_VAR 0 4
15096: PUSH
15097: LD_INT 2
15099: ARRAY
15100: GREATEREQUAL
15101: AND
15102: PUSH
15103: LD_VAR 0 5
15107: PPUSH
15108: LD_INT 3
15110: PPUSH
15111: CALL_OW 275
15115: PUSH
15116: LD_VAR 0 4
15120: PUSH
15121: LD_INT 3
15123: ARRAY
15124: GREATEREQUAL
15125: AND
15126: ST_TO_ADDR
// end ;
15127: LD_VAR 0 3
15131: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
15132: LD_INT 0
15134: PPUSH
15135: PPUSH
15136: PPUSH
15137: PPUSH
// pom := GetBase ( building ) ;
15138: LD_ADDR_VAR 0 3
15142: PUSH
15143: LD_VAR 0 1
15147: PPUSH
15148: CALL_OW 274
15152: ST_TO_ADDR
// if not pom then
15153: LD_VAR 0 3
15157: NOT
15158: IFFALSE 15162
// exit ;
15160: GO 15332
// btype := GetBType ( building ) ;
15162: LD_ADDR_VAR 0 5
15166: PUSH
15167: LD_VAR 0 1
15171: PPUSH
15172: CALL_OW 266
15176: ST_TO_ADDR
// if btype = b_armoury then
15177: LD_VAR 0 5
15181: PUSH
15182: LD_INT 4
15184: EQUAL
15185: IFFALSE 15195
// btype := b_barracks ;
15187: LD_ADDR_VAR 0 5
15191: PUSH
15192: LD_INT 5
15194: ST_TO_ADDR
// if btype = b_depot then
15195: LD_VAR 0 5
15199: PUSH
15200: LD_INT 0
15202: EQUAL
15203: IFFALSE 15213
// btype := b_warehouse ;
15205: LD_ADDR_VAR 0 5
15209: PUSH
15210: LD_INT 1
15212: ST_TO_ADDR
// if btype = b_workshop then
15213: LD_VAR 0 5
15217: PUSH
15218: LD_INT 2
15220: EQUAL
15221: IFFALSE 15231
// btype := b_factory ;
15223: LD_ADDR_VAR 0 5
15227: PUSH
15228: LD_INT 3
15230: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15231: LD_ADDR_VAR 0 4
15235: PUSH
15236: LD_VAR 0 5
15240: PPUSH
15241: LD_VAR 0 1
15245: PPUSH
15246: CALL_OW 248
15250: PPUSH
15251: CALL_OW 450
15255: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15256: LD_ADDR_VAR 0 2
15260: PUSH
15261: LD_VAR 0 3
15265: PPUSH
15266: LD_INT 1
15268: PPUSH
15269: CALL_OW 275
15273: PUSH
15274: LD_VAR 0 4
15278: PUSH
15279: LD_INT 1
15281: ARRAY
15282: GREATEREQUAL
15283: PUSH
15284: LD_VAR 0 3
15288: PPUSH
15289: LD_INT 2
15291: PPUSH
15292: CALL_OW 275
15296: PUSH
15297: LD_VAR 0 4
15301: PUSH
15302: LD_INT 2
15304: ARRAY
15305: GREATEREQUAL
15306: AND
15307: PUSH
15308: LD_VAR 0 3
15312: PPUSH
15313: LD_INT 3
15315: PPUSH
15316: CALL_OW 275
15320: PUSH
15321: LD_VAR 0 4
15325: PUSH
15326: LD_INT 3
15328: ARRAY
15329: GREATEREQUAL
15330: AND
15331: ST_TO_ADDR
// end ;
15332: LD_VAR 0 2
15336: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15337: LD_INT 0
15339: PPUSH
15340: PPUSH
15341: PPUSH
// pom := GetBase ( building ) ;
15342: LD_ADDR_VAR 0 4
15346: PUSH
15347: LD_VAR 0 1
15351: PPUSH
15352: CALL_OW 274
15356: ST_TO_ADDR
// if not pom then
15357: LD_VAR 0 4
15361: NOT
15362: IFFALSE 15366
// exit ;
15364: GO 15467
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15366: LD_ADDR_VAR 0 5
15370: PUSH
15371: LD_VAR 0 2
15375: PPUSH
15376: LD_VAR 0 1
15380: PPUSH
15381: CALL_OW 248
15385: PPUSH
15386: CALL_OW 450
15390: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15391: LD_ADDR_VAR 0 3
15395: PUSH
15396: LD_VAR 0 4
15400: PPUSH
15401: LD_INT 1
15403: PPUSH
15404: CALL_OW 275
15408: PUSH
15409: LD_VAR 0 5
15413: PUSH
15414: LD_INT 1
15416: ARRAY
15417: GREATEREQUAL
15418: PUSH
15419: LD_VAR 0 4
15423: PPUSH
15424: LD_INT 2
15426: PPUSH
15427: CALL_OW 275
15431: PUSH
15432: LD_VAR 0 5
15436: PUSH
15437: LD_INT 2
15439: ARRAY
15440: GREATEREQUAL
15441: AND
15442: PUSH
15443: LD_VAR 0 4
15447: PPUSH
15448: LD_INT 3
15450: PPUSH
15451: CALL_OW 275
15455: PUSH
15456: LD_VAR 0 5
15460: PUSH
15461: LD_INT 3
15463: ARRAY
15464: GREATEREQUAL
15465: AND
15466: ST_TO_ADDR
// end ;
15467: LD_VAR 0 3
15471: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15472: LD_INT 0
15474: PPUSH
15475: PPUSH
15476: PPUSH
15477: PPUSH
15478: PPUSH
15479: PPUSH
15480: PPUSH
15481: PPUSH
15482: PPUSH
15483: PPUSH
15484: PPUSH
// result := false ;
15485: LD_ADDR_VAR 0 8
15489: PUSH
15490: LD_INT 0
15492: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15493: LD_VAR 0 5
15497: NOT
15498: PUSH
15499: LD_VAR 0 1
15503: NOT
15504: OR
15505: PUSH
15506: LD_VAR 0 2
15510: NOT
15511: OR
15512: PUSH
15513: LD_VAR 0 3
15517: NOT
15518: OR
15519: IFFALSE 15523
// exit ;
15521: GO 16337
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15523: LD_ADDR_VAR 0 14
15527: PUSH
15528: LD_VAR 0 1
15532: PPUSH
15533: LD_VAR 0 2
15537: PPUSH
15538: LD_VAR 0 3
15542: PPUSH
15543: LD_VAR 0 4
15547: PPUSH
15548: LD_VAR 0 5
15552: PUSH
15553: LD_INT 1
15555: ARRAY
15556: PPUSH
15557: CALL_OW 248
15561: PPUSH
15562: LD_INT 0
15564: PPUSH
15565: CALL 17570 0 6
15569: ST_TO_ADDR
// if not hexes then
15570: LD_VAR 0 14
15574: NOT
15575: IFFALSE 15579
// exit ;
15577: GO 16337
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15579: LD_ADDR_VAR 0 17
15583: PUSH
15584: LD_VAR 0 5
15588: PPUSH
15589: LD_INT 22
15591: PUSH
15592: LD_VAR 0 13
15596: PPUSH
15597: CALL_OW 255
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: PUSH
15606: LD_INT 2
15608: PUSH
15609: LD_INT 30
15611: PUSH
15612: LD_INT 0
15614: PUSH
15615: EMPTY
15616: LIST
15617: LIST
15618: PUSH
15619: LD_INT 30
15621: PUSH
15622: LD_INT 1
15624: PUSH
15625: EMPTY
15626: LIST
15627: LIST
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: LIST
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: PPUSH
15638: CALL_OW 72
15642: ST_TO_ADDR
// for i = 1 to hexes do
15643: LD_ADDR_VAR 0 9
15647: PUSH
15648: DOUBLE
15649: LD_INT 1
15651: DEC
15652: ST_TO_ADDR
15653: LD_VAR 0 14
15657: PUSH
15658: FOR_TO
15659: IFFALSE 16335
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15661: LD_ADDR_VAR 0 13
15665: PUSH
15666: LD_VAR 0 14
15670: PUSH
15671: LD_VAR 0 9
15675: ARRAY
15676: PUSH
15677: LD_INT 1
15679: ARRAY
15680: PPUSH
15681: LD_VAR 0 14
15685: PUSH
15686: LD_VAR 0 9
15690: ARRAY
15691: PUSH
15692: LD_INT 2
15694: ARRAY
15695: PPUSH
15696: CALL_OW 428
15700: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15701: LD_VAR 0 14
15705: PUSH
15706: LD_VAR 0 9
15710: ARRAY
15711: PUSH
15712: LD_INT 1
15714: ARRAY
15715: PPUSH
15716: LD_VAR 0 14
15720: PUSH
15721: LD_VAR 0 9
15725: ARRAY
15726: PUSH
15727: LD_INT 2
15729: ARRAY
15730: PPUSH
15731: CALL_OW 351
15735: PUSH
15736: LD_VAR 0 14
15740: PUSH
15741: LD_VAR 0 9
15745: ARRAY
15746: PUSH
15747: LD_INT 1
15749: ARRAY
15750: PPUSH
15751: LD_VAR 0 14
15755: PUSH
15756: LD_VAR 0 9
15760: ARRAY
15761: PUSH
15762: LD_INT 2
15764: ARRAY
15765: PPUSH
15766: CALL_OW 488
15770: NOT
15771: OR
15772: PUSH
15773: LD_VAR 0 13
15777: PPUSH
15778: CALL_OW 247
15782: PUSH
15783: LD_INT 3
15785: EQUAL
15786: OR
15787: IFFALSE 15793
// exit ;
15789: POP
15790: POP
15791: GO 16337
// if not tmp then
15793: LD_VAR 0 13
15797: NOT
15798: IFFALSE 15802
// continue ;
15800: GO 15658
// result := true ;
15802: LD_ADDR_VAR 0 8
15806: PUSH
15807: LD_INT 1
15809: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15810: LD_VAR 0 6
15814: PUSH
15815: LD_VAR 0 13
15819: PPUSH
15820: CALL_OW 247
15824: PUSH
15825: LD_INT 2
15827: EQUAL
15828: AND
15829: PUSH
15830: LD_VAR 0 13
15834: PPUSH
15835: CALL_OW 263
15839: PUSH
15840: LD_INT 1
15842: EQUAL
15843: AND
15844: IFFALSE 16008
// begin if IsDrivenBy ( tmp ) then
15846: LD_VAR 0 13
15850: PPUSH
15851: CALL_OW 311
15855: IFFALSE 15859
// continue ;
15857: GO 15658
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15859: LD_VAR 0 6
15863: PPUSH
15864: LD_INT 3
15866: PUSH
15867: LD_INT 60
15869: PUSH
15870: EMPTY
15871: LIST
15872: PUSH
15873: EMPTY
15874: LIST
15875: LIST
15876: PUSH
15877: LD_INT 3
15879: PUSH
15880: LD_INT 55
15882: PUSH
15883: EMPTY
15884: LIST
15885: PUSH
15886: EMPTY
15887: LIST
15888: LIST
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: PPUSH
15894: CALL_OW 72
15898: IFFALSE 16006
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15900: LD_ADDR_VAR 0 18
15904: PUSH
15905: LD_VAR 0 6
15909: PPUSH
15910: LD_INT 3
15912: PUSH
15913: LD_INT 60
15915: PUSH
15916: EMPTY
15917: LIST
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PUSH
15923: LD_INT 3
15925: PUSH
15926: LD_INT 55
15928: PUSH
15929: EMPTY
15930: LIST
15931: PUSH
15932: EMPTY
15933: LIST
15934: LIST
15935: PUSH
15936: EMPTY
15937: LIST
15938: LIST
15939: PPUSH
15940: CALL_OW 72
15944: PUSH
15945: LD_INT 1
15947: ARRAY
15948: ST_TO_ADDR
// if IsInUnit ( driver ) then
15949: LD_VAR 0 18
15953: PPUSH
15954: CALL_OW 310
15958: IFFALSE 15969
// ComExit ( driver ) ;
15960: LD_VAR 0 18
15964: PPUSH
15965: CALL 41349 0 1
// AddComEnterUnit ( driver , tmp ) ;
15969: LD_VAR 0 18
15973: PPUSH
15974: LD_VAR 0 13
15978: PPUSH
15979: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15983: LD_VAR 0 18
15987: PPUSH
15988: LD_VAR 0 7
15992: PPUSH
15993: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15997: LD_VAR 0 18
16001: PPUSH
16002: CALL_OW 181
// end ; continue ;
16006: GO 15658
// end ; if not cleaners or not tmp in cleaners then
16008: LD_VAR 0 6
16012: NOT
16013: PUSH
16014: LD_VAR 0 13
16018: PUSH
16019: LD_VAR 0 6
16023: IN
16024: NOT
16025: OR
16026: IFFALSE 16333
// begin if dep then
16028: LD_VAR 0 17
16032: IFFALSE 16168
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
16034: LD_ADDR_VAR 0 16
16038: PUSH
16039: LD_VAR 0 17
16043: PUSH
16044: LD_INT 1
16046: ARRAY
16047: PPUSH
16048: CALL_OW 250
16052: PPUSH
16053: LD_VAR 0 17
16057: PUSH
16058: LD_INT 1
16060: ARRAY
16061: PPUSH
16062: CALL_OW 254
16066: PPUSH
16067: LD_INT 5
16069: PPUSH
16070: CALL_OW 272
16074: PUSH
16075: LD_VAR 0 17
16079: PUSH
16080: LD_INT 1
16082: ARRAY
16083: PPUSH
16084: CALL_OW 251
16088: PPUSH
16089: LD_VAR 0 17
16093: PUSH
16094: LD_INT 1
16096: ARRAY
16097: PPUSH
16098: CALL_OW 254
16102: PPUSH
16103: LD_INT 5
16105: PPUSH
16106: CALL_OW 273
16110: PUSH
16111: EMPTY
16112: LIST
16113: LIST
16114: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
16115: LD_VAR 0 16
16119: PUSH
16120: LD_INT 1
16122: ARRAY
16123: PPUSH
16124: LD_VAR 0 16
16128: PUSH
16129: LD_INT 2
16131: ARRAY
16132: PPUSH
16133: CALL_OW 488
16137: IFFALSE 16168
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16139: LD_VAR 0 13
16143: PPUSH
16144: LD_VAR 0 16
16148: PUSH
16149: LD_INT 1
16151: ARRAY
16152: PPUSH
16153: LD_VAR 0 16
16157: PUSH
16158: LD_INT 2
16160: ARRAY
16161: PPUSH
16162: CALL_OW 111
// continue ;
16166: GO 15658
// end ; end ; r := GetDir ( tmp ) ;
16168: LD_ADDR_VAR 0 15
16172: PUSH
16173: LD_VAR 0 13
16177: PPUSH
16178: CALL_OW 254
16182: ST_TO_ADDR
// if r = 5 then
16183: LD_VAR 0 15
16187: PUSH
16188: LD_INT 5
16190: EQUAL
16191: IFFALSE 16201
// r := 0 ;
16193: LD_ADDR_VAR 0 15
16197: PUSH
16198: LD_INT 0
16200: ST_TO_ADDR
// for j = r to 5 do
16201: LD_ADDR_VAR 0 10
16205: PUSH
16206: DOUBLE
16207: LD_VAR 0 15
16211: DEC
16212: ST_TO_ADDR
16213: LD_INT 5
16215: PUSH
16216: FOR_TO
16217: IFFALSE 16331
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16219: LD_ADDR_VAR 0 11
16223: PUSH
16224: LD_VAR 0 13
16228: PPUSH
16229: CALL_OW 250
16233: PPUSH
16234: LD_VAR 0 10
16238: PPUSH
16239: LD_INT 2
16241: PPUSH
16242: CALL_OW 272
16246: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16247: LD_ADDR_VAR 0 12
16251: PUSH
16252: LD_VAR 0 13
16256: PPUSH
16257: CALL_OW 251
16261: PPUSH
16262: LD_VAR 0 10
16266: PPUSH
16267: LD_INT 2
16269: PPUSH
16270: CALL_OW 273
16274: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16275: LD_VAR 0 11
16279: PPUSH
16280: LD_VAR 0 12
16284: PPUSH
16285: CALL_OW 488
16289: PUSH
16290: LD_VAR 0 11
16294: PPUSH
16295: LD_VAR 0 12
16299: PPUSH
16300: CALL_OW 428
16304: NOT
16305: AND
16306: IFFALSE 16329
// begin ComMoveXY ( tmp , _x , _y ) ;
16308: LD_VAR 0 13
16312: PPUSH
16313: LD_VAR 0 11
16317: PPUSH
16318: LD_VAR 0 12
16322: PPUSH
16323: CALL_OW 111
// break ;
16327: GO 16331
// end ; end ;
16329: GO 16216
16331: POP
16332: POP
// end ; end ;
16333: GO 15658
16335: POP
16336: POP
// end ;
16337: LD_VAR 0 8
16341: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16342: LD_INT 0
16344: PPUSH
// result := true ;
16345: LD_ADDR_VAR 0 3
16349: PUSH
16350: LD_INT 1
16352: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16353: LD_VAR 0 2
16357: PUSH
16358: LD_INT 24
16360: DOUBLE
16361: EQUAL
16362: IFTRUE 16372
16364: LD_INT 33
16366: DOUBLE
16367: EQUAL
16368: IFTRUE 16372
16370: GO 16397
16372: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16373: LD_ADDR_VAR 0 3
16377: PUSH
16378: LD_INT 32
16380: PPUSH
16381: LD_VAR 0 1
16385: PPUSH
16386: CALL_OW 321
16390: PUSH
16391: LD_INT 2
16393: EQUAL
16394: ST_TO_ADDR
16395: GO 16713
16397: LD_INT 20
16399: DOUBLE
16400: EQUAL
16401: IFTRUE 16405
16403: GO 16430
16405: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16406: LD_ADDR_VAR 0 3
16410: PUSH
16411: LD_INT 6
16413: PPUSH
16414: LD_VAR 0 1
16418: PPUSH
16419: CALL_OW 321
16423: PUSH
16424: LD_INT 2
16426: EQUAL
16427: ST_TO_ADDR
16428: GO 16713
16430: LD_INT 22
16432: DOUBLE
16433: EQUAL
16434: IFTRUE 16444
16436: LD_INT 36
16438: DOUBLE
16439: EQUAL
16440: IFTRUE 16444
16442: GO 16469
16444: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16445: LD_ADDR_VAR 0 3
16449: PUSH
16450: LD_INT 15
16452: PPUSH
16453: LD_VAR 0 1
16457: PPUSH
16458: CALL_OW 321
16462: PUSH
16463: LD_INT 2
16465: EQUAL
16466: ST_TO_ADDR
16467: GO 16713
16469: LD_INT 30
16471: DOUBLE
16472: EQUAL
16473: IFTRUE 16477
16475: GO 16502
16477: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16478: LD_ADDR_VAR 0 3
16482: PUSH
16483: LD_INT 20
16485: PPUSH
16486: LD_VAR 0 1
16490: PPUSH
16491: CALL_OW 321
16495: PUSH
16496: LD_INT 2
16498: EQUAL
16499: ST_TO_ADDR
16500: GO 16713
16502: LD_INT 28
16504: DOUBLE
16505: EQUAL
16506: IFTRUE 16516
16508: LD_INT 21
16510: DOUBLE
16511: EQUAL
16512: IFTRUE 16516
16514: GO 16541
16516: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16517: LD_ADDR_VAR 0 3
16521: PUSH
16522: LD_INT 21
16524: PPUSH
16525: LD_VAR 0 1
16529: PPUSH
16530: CALL_OW 321
16534: PUSH
16535: LD_INT 2
16537: EQUAL
16538: ST_TO_ADDR
16539: GO 16713
16541: LD_INT 16
16543: DOUBLE
16544: EQUAL
16545: IFTRUE 16549
16547: GO 16574
16549: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16550: LD_ADDR_VAR 0 3
16554: PUSH
16555: LD_INT 84
16557: PPUSH
16558: LD_VAR 0 1
16562: PPUSH
16563: CALL_OW 321
16567: PUSH
16568: LD_INT 2
16570: EQUAL
16571: ST_TO_ADDR
16572: GO 16713
16574: LD_INT 19
16576: DOUBLE
16577: EQUAL
16578: IFTRUE 16588
16580: LD_INT 23
16582: DOUBLE
16583: EQUAL
16584: IFTRUE 16588
16586: GO 16613
16588: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16589: LD_ADDR_VAR 0 3
16593: PUSH
16594: LD_INT 83
16596: PPUSH
16597: LD_VAR 0 1
16601: PPUSH
16602: CALL_OW 321
16606: PUSH
16607: LD_INT 2
16609: EQUAL
16610: ST_TO_ADDR
16611: GO 16713
16613: LD_INT 17
16615: DOUBLE
16616: EQUAL
16617: IFTRUE 16621
16619: GO 16646
16621: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16622: LD_ADDR_VAR 0 3
16626: PUSH
16627: LD_INT 39
16629: PPUSH
16630: LD_VAR 0 1
16634: PPUSH
16635: CALL_OW 321
16639: PUSH
16640: LD_INT 2
16642: EQUAL
16643: ST_TO_ADDR
16644: GO 16713
16646: LD_INT 18
16648: DOUBLE
16649: EQUAL
16650: IFTRUE 16654
16652: GO 16679
16654: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16655: LD_ADDR_VAR 0 3
16659: PUSH
16660: LD_INT 40
16662: PPUSH
16663: LD_VAR 0 1
16667: PPUSH
16668: CALL_OW 321
16672: PUSH
16673: LD_INT 2
16675: EQUAL
16676: ST_TO_ADDR
16677: GO 16713
16679: LD_INT 27
16681: DOUBLE
16682: EQUAL
16683: IFTRUE 16687
16685: GO 16712
16687: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16688: LD_ADDR_VAR 0 3
16692: PUSH
16693: LD_INT 35
16695: PPUSH
16696: LD_VAR 0 1
16700: PPUSH
16701: CALL_OW 321
16705: PUSH
16706: LD_INT 2
16708: EQUAL
16709: ST_TO_ADDR
16710: GO 16713
16712: POP
// end ;
16713: LD_VAR 0 3
16717: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16718: LD_INT 0
16720: PPUSH
16721: PPUSH
16722: PPUSH
16723: PPUSH
16724: PPUSH
16725: PPUSH
16726: PPUSH
16727: PPUSH
16728: PPUSH
16729: PPUSH
16730: PPUSH
// result := false ;
16731: LD_ADDR_VAR 0 6
16735: PUSH
16736: LD_INT 0
16738: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16739: LD_VAR 0 1
16743: NOT
16744: PUSH
16745: LD_VAR 0 1
16749: PPUSH
16750: CALL_OW 266
16754: PUSH
16755: LD_INT 0
16757: PUSH
16758: LD_INT 1
16760: PUSH
16761: EMPTY
16762: LIST
16763: LIST
16764: IN
16765: NOT
16766: OR
16767: PUSH
16768: LD_VAR 0 2
16772: NOT
16773: OR
16774: PUSH
16775: LD_VAR 0 5
16779: PUSH
16780: LD_INT 0
16782: PUSH
16783: LD_INT 1
16785: PUSH
16786: LD_INT 2
16788: PUSH
16789: LD_INT 3
16791: PUSH
16792: LD_INT 4
16794: PUSH
16795: LD_INT 5
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: IN
16806: NOT
16807: OR
16808: PUSH
16809: LD_VAR 0 3
16813: PPUSH
16814: LD_VAR 0 4
16818: PPUSH
16819: CALL_OW 488
16823: NOT
16824: OR
16825: IFFALSE 16829
// exit ;
16827: GO 17565
// side := GetSide ( depot ) ;
16829: LD_ADDR_VAR 0 9
16833: PUSH
16834: LD_VAR 0 1
16838: PPUSH
16839: CALL_OW 255
16843: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16844: LD_VAR 0 9
16848: PPUSH
16849: LD_VAR 0 2
16853: PPUSH
16854: CALL 16342 0 2
16858: NOT
16859: IFFALSE 16863
// exit ;
16861: GO 17565
// pom := GetBase ( depot ) ;
16863: LD_ADDR_VAR 0 10
16867: PUSH
16868: LD_VAR 0 1
16872: PPUSH
16873: CALL_OW 274
16877: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16878: LD_ADDR_VAR 0 11
16882: PUSH
16883: LD_VAR 0 2
16887: PPUSH
16888: LD_VAR 0 1
16892: PPUSH
16893: CALL_OW 248
16897: PPUSH
16898: CALL_OW 450
16902: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16903: LD_VAR 0 10
16907: PPUSH
16908: LD_INT 1
16910: PPUSH
16911: CALL_OW 275
16915: PUSH
16916: LD_VAR 0 11
16920: PUSH
16921: LD_INT 1
16923: ARRAY
16924: GREATEREQUAL
16925: PUSH
16926: LD_VAR 0 10
16930: PPUSH
16931: LD_INT 2
16933: PPUSH
16934: CALL_OW 275
16938: PUSH
16939: LD_VAR 0 11
16943: PUSH
16944: LD_INT 2
16946: ARRAY
16947: GREATEREQUAL
16948: AND
16949: PUSH
16950: LD_VAR 0 10
16954: PPUSH
16955: LD_INT 3
16957: PPUSH
16958: CALL_OW 275
16962: PUSH
16963: LD_VAR 0 11
16967: PUSH
16968: LD_INT 3
16970: ARRAY
16971: GREATEREQUAL
16972: AND
16973: NOT
16974: IFFALSE 16978
// exit ;
16976: GO 17565
// if GetBType ( depot ) = b_depot then
16978: LD_VAR 0 1
16982: PPUSH
16983: CALL_OW 266
16987: PUSH
16988: LD_INT 0
16990: EQUAL
16991: IFFALSE 17003
// dist := 28 else
16993: LD_ADDR_VAR 0 14
16997: PUSH
16998: LD_INT 28
17000: ST_TO_ADDR
17001: GO 17011
// dist := 36 ;
17003: LD_ADDR_VAR 0 14
17007: PUSH
17008: LD_INT 36
17010: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
17011: LD_VAR 0 1
17015: PPUSH
17016: LD_VAR 0 3
17020: PPUSH
17021: LD_VAR 0 4
17025: PPUSH
17026: CALL_OW 297
17030: PUSH
17031: LD_VAR 0 14
17035: GREATER
17036: IFFALSE 17040
// exit ;
17038: GO 17565
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
17040: LD_ADDR_VAR 0 12
17044: PUSH
17045: LD_VAR 0 2
17049: PPUSH
17050: LD_VAR 0 3
17054: PPUSH
17055: LD_VAR 0 4
17059: PPUSH
17060: LD_VAR 0 5
17064: PPUSH
17065: LD_VAR 0 1
17069: PPUSH
17070: CALL_OW 248
17074: PPUSH
17075: LD_INT 0
17077: PPUSH
17078: CALL 17570 0 6
17082: ST_TO_ADDR
// if not hexes then
17083: LD_VAR 0 12
17087: NOT
17088: IFFALSE 17092
// exit ;
17090: GO 17565
// hex := GetHexInfo ( x , y ) ;
17092: LD_ADDR_VAR 0 15
17096: PUSH
17097: LD_VAR 0 3
17101: PPUSH
17102: LD_VAR 0 4
17106: PPUSH
17107: CALL_OW 546
17111: ST_TO_ADDR
// if hex [ 1 ] then
17112: LD_VAR 0 15
17116: PUSH
17117: LD_INT 1
17119: ARRAY
17120: IFFALSE 17124
// exit ;
17122: GO 17565
// height := hex [ 2 ] ;
17124: LD_ADDR_VAR 0 13
17128: PUSH
17129: LD_VAR 0 15
17133: PUSH
17134: LD_INT 2
17136: ARRAY
17137: ST_TO_ADDR
// for i = 1 to hexes do
17138: LD_ADDR_VAR 0 7
17142: PUSH
17143: DOUBLE
17144: LD_INT 1
17146: DEC
17147: ST_TO_ADDR
17148: LD_VAR 0 12
17152: PUSH
17153: FOR_TO
17154: IFFALSE 17484
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17156: LD_VAR 0 12
17160: PUSH
17161: LD_VAR 0 7
17165: ARRAY
17166: PUSH
17167: LD_INT 1
17169: ARRAY
17170: PPUSH
17171: LD_VAR 0 12
17175: PUSH
17176: LD_VAR 0 7
17180: ARRAY
17181: PUSH
17182: LD_INT 2
17184: ARRAY
17185: PPUSH
17186: CALL_OW 488
17190: NOT
17191: PUSH
17192: LD_VAR 0 12
17196: PUSH
17197: LD_VAR 0 7
17201: ARRAY
17202: PUSH
17203: LD_INT 1
17205: ARRAY
17206: PPUSH
17207: LD_VAR 0 12
17211: PUSH
17212: LD_VAR 0 7
17216: ARRAY
17217: PUSH
17218: LD_INT 2
17220: ARRAY
17221: PPUSH
17222: CALL_OW 428
17226: PUSH
17227: LD_INT 0
17229: GREATER
17230: OR
17231: PUSH
17232: LD_VAR 0 12
17236: PUSH
17237: LD_VAR 0 7
17241: ARRAY
17242: PUSH
17243: LD_INT 1
17245: ARRAY
17246: PPUSH
17247: LD_VAR 0 12
17251: PUSH
17252: LD_VAR 0 7
17256: ARRAY
17257: PUSH
17258: LD_INT 2
17260: ARRAY
17261: PPUSH
17262: CALL_OW 351
17266: OR
17267: IFFALSE 17273
// exit ;
17269: POP
17270: POP
17271: GO 17565
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17273: LD_ADDR_VAR 0 8
17277: PUSH
17278: LD_VAR 0 12
17282: PUSH
17283: LD_VAR 0 7
17287: ARRAY
17288: PUSH
17289: LD_INT 1
17291: ARRAY
17292: PPUSH
17293: LD_VAR 0 12
17297: PUSH
17298: LD_VAR 0 7
17302: ARRAY
17303: PUSH
17304: LD_INT 2
17306: ARRAY
17307: PPUSH
17308: CALL_OW 546
17312: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17313: LD_VAR 0 8
17317: PUSH
17318: LD_INT 1
17320: ARRAY
17321: PUSH
17322: LD_VAR 0 8
17326: PUSH
17327: LD_INT 2
17329: ARRAY
17330: PUSH
17331: LD_VAR 0 13
17335: PUSH
17336: LD_INT 2
17338: PLUS
17339: GREATER
17340: OR
17341: PUSH
17342: LD_VAR 0 8
17346: PUSH
17347: LD_INT 2
17349: ARRAY
17350: PUSH
17351: LD_VAR 0 13
17355: PUSH
17356: LD_INT 2
17358: MINUS
17359: LESS
17360: OR
17361: PUSH
17362: LD_VAR 0 8
17366: PUSH
17367: LD_INT 3
17369: ARRAY
17370: PUSH
17371: LD_INT 0
17373: PUSH
17374: LD_INT 8
17376: PUSH
17377: LD_INT 9
17379: PUSH
17380: LD_INT 10
17382: PUSH
17383: LD_INT 11
17385: PUSH
17386: LD_INT 12
17388: PUSH
17389: LD_INT 13
17391: PUSH
17392: LD_INT 16
17394: PUSH
17395: LD_INT 17
17397: PUSH
17398: LD_INT 18
17400: PUSH
17401: LD_INT 19
17403: PUSH
17404: LD_INT 20
17406: PUSH
17407: LD_INT 21
17409: PUSH
17410: EMPTY
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: IN
17425: NOT
17426: OR
17427: PUSH
17428: LD_VAR 0 8
17432: PUSH
17433: LD_INT 5
17435: ARRAY
17436: NOT
17437: OR
17438: PUSH
17439: LD_VAR 0 8
17443: PUSH
17444: LD_INT 6
17446: ARRAY
17447: PUSH
17448: LD_INT 1
17450: PUSH
17451: LD_INT 2
17453: PUSH
17454: LD_INT 7
17456: PUSH
17457: LD_INT 9
17459: PUSH
17460: LD_INT 10
17462: PUSH
17463: LD_INT 11
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: IN
17474: NOT
17475: OR
17476: IFFALSE 17482
// exit ;
17478: POP
17479: POP
17480: GO 17565
// end ;
17482: GO 17153
17484: POP
17485: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17486: LD_VAR 0 9
17490: PPUSH
17491: LD_VAR 0 3
17495: PPUSH
17496: LD_VAR 0 4
17500: PPUSH
17501: LD_INT 20
17503: PPUSH
17504: CALL 9508 0 4
17508: PUSH
17509: LD_INT 4
17511: ARRAY
17512: IFFALSE 17516
// exit ;
17514: GO 17565
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17516: LD_VAR 0 2
17520: PUSH
17521: LD_INT 29
17523: PUSH
17524: LD_INT 30
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: IN
17531: PUSH
17532: LD_VAR 0 3
17536: PPUSH
17537: LD_VAR 0 4
17541: PPUSH
17542: LD_VAR 0 9
17546: PPUSH
17547: CALL_OW 440
17551: NOT
17552: AND
17553: IFFALSE 17557
// exit ;
17555: GO 17565
// result := true ;
17557: LD_ADDR_VAR 0 6
17561: PUSH
17562: LD_INT 1
17564: ST_TO_ADDR
// end ;
17565: LD_VAR 0 6
17569: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17570: LD_INT 0
17572: PPUSH
17573: PPUSH
17574: PPUSH
17575: PPUSH
17576: PPUSH
17577: PPUSH
17578: PPUSH
17579: PPUSH
17580: PPUSH
17581: PPUSH
17582: PPUSH
17583: PPUSH
17584: PPUSH
17585: PPUSH
17586: PPUSH
17587: PPUSH
17588: PPUSH
17589: PPUSH
17590: PPUSH
17591: PPUSH
17592: PPUSH
17593: PPUSH
17594: PPUSH
17595: PPUSH
17596: PPUSH
17597: PPUSH
17598: PPUSH
17599: PPUSH
17600: PPUSH
17601: PPUSH
17602: PPUSH
17603: PPUSH
17604: PPUSH
17605: PPUSH
17606: PPUSH
17607: PPUSH
17608: PPUSH
17609: PPUSH
17610: PPUSH
17611: PPUSH
17612: PPUSH
17613: PPUSH
17614: PPUSH
17615: PPUSH
17616: PPUSH
17617: PPUSH
17618: PPUSH
17619: PPUSH
17620: PPUSH
17621: PPUSH
17622: PPUSH
17623: PPUSH
17624: PPUSH
17625: PPUSH
17626: PPUSH
17627: PPUSH
17628: PPUSH
17629: PPUSH
// result = [ ] ;
17630: LD_ADDR_VAR 0 7
17634: PUSH
17635: EMPTY
17636: ST_TO_ADDR
// temp_list = [ ] ;
17637: LD_ADDR_VAR 0 9
17641: PUSH
17642: EMPTY
17643: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17644: LD_VAR 0 4
17648: PUSH
17649: LD_INT 0
17651: PUSH
17652: LD_INT 1
17654: PUSH
17655: LD_INT 2
17657: PUSH
17658: LD_INT 3
17660: PUSH
17661: LD_INT 4
17663: PUSH
17664: LD_INT 5
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: LIST
17671: LIST
17672: LIST
17673: LIST
17674: IN
17675: NOT
17676: PUSH
17677: LD_VAR 0 1
17681: PUSH
17682: LD_INT 0
17684: PUSH
17685: LD_INT 1
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: IN
17692: PUSH
17693: LD_VAR 0 5
17697: PUSH
17698: LD_INT 1
17700: PUSH
17701: LD_INT 2
17703: PUSH
17704: LD_INT 3
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: LIST
17711: IN
17712: NOT
17713: AND
17714: OR
17715: IFFALSE 17719
// exit ;
17717: GO 36110
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17719: LD_VAR 0 1
17723: PUSH
17724: LD_INT 6
17726: PUSH
17727: LD_INT 7
17729: PUSH
17730: LD_INT 8
17732: PUSH
17733: LD_INT 13
17735: PUSH
17736: LD_INT 12
17738: PUSH
17739: LD_INT 15
17741: PUSH
17742: LD_INT 11
17744: PUSH
17745: LD_INT 14
17747: PUSH
17748: LD_INT 10
17750: PUSH
17751: EMPTY
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: IN
17762: IFFALSE 17772
// btype = b_lab ;
17764: LD_ADDR_VAR 0 1
17768: PUSH
17769: LD_INT 6
17771: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17772: LD_VAR 0 6
17776: PUSH
17777: LD_INT 0
17779: PUSH
17780: LD_INT 1
17782: PUSH
17783: LD_INT 2
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: LIST
17790: IN
17791: NOT
17792: PUSH
17793: LD_VAR 0 1
17797: PUSH
17798: LD_INT 0
17800: PUSH
17801: LD_INT 1
17803: PUSH
17804: LD_INT 2
17806: PUSH
17807: LD_INT 3
17809: PUSH
17810: LD_INT 6
17812: PUSH
17813: LD_INT 36
17815: PUSH
17816: LD_INT 4
17818: PUSH
17819: LD_INT 5
17821: PUSH
17822: LD_INT 31
17824: PUSH
17825: LD_INT 32
17827: PUSH
17828: LD_INT 33
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: LIST
17843: IN
17844: NOT
17845: PUSH
17846: LD_VAR 0 6
17850: PUSH
17851: LD_INT 1
17853: EQUAL
17854: AND
17855: OR
17856: PUSH
17857: LD_VAR 0 1
17861: PUSH
17862: LD_INT 2
17864: PUSH
17865: LD_INT 3
17867: PUSH
17868: EMPTY
17869: LIST
17870: LIST
17871: IN
17872: NOT
17873: PUSH
17874: LD_VAR 0 6
17878: PUSH
17879: LD_INT 2
17881: EQUAL
17882: AND
17883: OR
17884: IFFALSE 17894
// mode = 0 ;
17886: LD_ADDR_VAR 0 6
17890: PUSH
17891: LD_INT 0
17893: ST_TO_ADDR
// case mode of 0 :
17894: LD_VAR 0 6
17898: PUSH
17899: LD_INT 0
17901: DOUBLE
17902: EQUAL
17903: IFTRUE 17907
17905: GO 29360
17907: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17908: LD_ADDR_VAR 0 11
17912: PUSH
17913: LD_INT 0
17915: PUSH
17916: LD_INT 0
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: PUSH
17923: LD_INT 0
17925: PUSH
17926: LD_INT 1
17928: NEG
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: LD_INT 1
17936: PUSH
17937: LD_INT 0
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: LD_INT 1
17946: PUSH
17947: LD_INT 1
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: LD_INT 0
17956: PUSH
17957: LD_INT 1
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PUSH
17964: LD_INT 1
17966: NEG
17967: PUSH
17968: LD_INT 0
17970: PUSH
17971: EMPTY
17972: LIST
17973: LIST
17974: PUSH
17975: LD_INT 1
17977: NEG
17978: PUSH
17979: LD_INT 1
17981: NEG
17982: PUSH
17983: EMPTY
17984: LIST
17985: LIST
17986: PUSH
17987: LD_INT 1
17989: NEG
17990: PUSH
17991: LD_INT 2
17993: NEG
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: PUSH
17999: LD_INT 0
18001: PUSH
18002: LD_INT 2
18004: NEG
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: PUSH
18010: LD_INT 1
18012: PUSH
18013: LD_INT 1
18015: NEG
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: PUSH
18021: LD_INT 1
18023: PUSH
18024: LD_INT 2
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: PUSH
18031: LD_INT 0
18033: PUSH
18034: LD_INT 2
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PUSH
18041: LD_INT 1
18043: NEG
18044: PUSH
18045: LD_INT 1
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: PUSH
18052: LD_INT 1
18054: PUSH
18055: LD_INT 3
18057: PUSH
18058: EMPTY
18059: LIST
18060: LIST
18061: PUSH
18062: LD_INT 0
18064: PUSH
18065: LD_INT 3
18067: PUSH
18068: EMPTY
18069: LIST
18070: LIST
18071: PUSH
18072: LD_INT 1
18074: NEG
18075: PUSH
18076: LD_INT 2
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18101: LD_ADDR_VAR 0 12
18105: PUSH
18106: LD_INT 0
18108: PUSH
18109: LD_INT 0
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PUSH
18116: LD_INT 0
18118: PUSH
18119: LD_INT 1
18121: NEG
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PUSH
18127: LD_INT 1
18129: PUSH
18130: LD_INT 0
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PUSH
18137: LD_INT 1
18139: PUSH
18140: LD_INT 1
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PUSH
18147: LD_INT 0
18149: PUSH
18150: LD_INT 1
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PUSH
18157: LD_INT 1
18159: NEG
18160: PUSH
18161: LD_INT 0
18163: PUSH
18164: EMPTY
18165: LIST
18166: LIST
18167: PUSH
18168: LD_INT 1
18170: NEG
18171: PUSH
18172: LD_INT 1
18174: NEG
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: PUSH
18180: LD_INT 1
18182: PUSH
18183: LD_INT 1
18185: NEG
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PUSH
18191: LD_INT 2
18193: PUSH
18194: LD_INT 0
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: PUSH
18201: LD_INT 2
18203: PUSH
18204: LD_INT 1
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PUSH
18211: LD_INT 1
18213: NEG
18214: PUSH
18215: LD_INT 1
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: PUSH
18222: LD_INT 2
18224: NEG
18225: PUSH
18226: LD_INT 0
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: PUSH
18233: LD_INT 2
18235: NEG
18236: PUSH
18237: LD_INT 1
18239: NEG
18240: PUSH
18241: EMPTY
18242: LIST
18243: LIST
18244: PUSH
18245: LD_INT 2
18247: NEG
18248: PUSH
18249: LD_INT 1
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: PUSH
18256: LD_INT 3
18258: NEG
18259: PUSH
18260: LD_INT 0
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: LD_INT 3
18269: NEG
18270: PUSH
18271: LD_INT 1
18273: NEG
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: PUSH
18279: EMPTY
18280: LIST
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: LIST
18296: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18297: LD_ADDR_VAR 0 13
18301: PUSH
18302: LD_INT 0
18304: PUSH
18305: LD_INT 0
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: PUSH
18312: LD_INT 0
18314: PUSH
18315: LD_INT 1
18317: NEG
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PUSH
18323: LD_INT 1
18325: PUSH
18326: LD_INT 0
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: PUSH
18333: LD_INT 1
18335: PUSH
18336: LD_INT 1
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: PUSH
18343: LD_INT 0
18345: PUSH
18346: LD_INT 1
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: PUSH
18353: LD_INT 1
18355: NEG
18356: PUSH
18357: LD_INT 0
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: PUSH
18364: LD_INT 1
18366: NEG
18367: PUSH
18368: LD_INT 1
18370: NEG
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: PUSH
18376: LD_INT 1
18378: NEG
18379: PUSH
18380: LD_INT 2
18382: NEG
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: PUSH
18388: LD_INT 2
18390: PUSH
18391: LD_INT 1
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: PUSH
18398: LD_INT 2
18400: PUSH
18401: LD_INT 2
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PUSH
18408: LD_INT 1
18410: PUSH
18411: LD_INT 2
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: LD_INT 2
18420: NEG
18421: PUSH
18422: LD_INT 1
18424: NEG
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: PUSH
18430: LD_INT 2
18432: NEG
18433: PUSH
18434: LD_INT 2
18436: NEG
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: PUSH
18442: LD_INT 2
18444: NEG
18445: PUSH
18446: LD_INT 3
18448: NEG
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: PUSH
18454: LD_INT 3
18456: NEG
18457: PUSH
18458: LD_INT 2
18460: NEG
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: PUSH
18466: LD_INT 3
18468: NEG
18469: PUSH
18470: LD_INT 3
18472: NEG
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18496: LD_ADDR_VAR 0 14
18500: PUSH
18501: LD_INT 0
18503: PUSH
18504: LD_INT 0
18506: PUSH
18507: EMPTY
18508: LIST
18509: LIST
18510: PUSH
18511: LD_INT 0
18513: PUSH
18514: LD_INT 1
18516: NEG
18517: PUSH
18518: EMPTY
18519: LIST
18520: LIST
18521: PUSH
18522: LD_INT 1
18524: PUSH
18525: LD_INT 0
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: PUSH
18532: LD_INT 1
18534: PUSH
18535: LD_INT 1
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: PUSH
18542: LD_INT 0
18544: PUSH
18545: LD_INT 1
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: LD_INT 1
18554: NEG
18555: PUSH
18556: LD_INT 0
18558: PUSH
18559: EMPTY
18560: LIST
18561: LIST
18562: PUSH
18563: LD_INT 1
18565: NEG
18566: PUSH
18567: LD_INT 1
18569: NEG
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: PUSH
18575: LD_INT 1
18577: NEG
18578: PUSH
18579: LD_INT 2
18581: NEG
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: PUSH
18587: LD_INT 0
18589: PUSH
18590: LD_INT 2
18592: NEG
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: PUSH
18598: LD_INT 1
18600: PUSH
18601: LD_INT 1
18603: NEG
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: PUSH
18609: LD_INT 1
18611: PUSH
18612: LD_INT 2
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: PUSH
18619: LD_INT 0
18621: PUSH
18622: LD_INT 2
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: PUSH
18629: LD_INT 1
18631: NEG
18632: PUSH
18633: LD_INT 1
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: PUSH
18640: LD_INT 1
18642: NEG
18643: PUSH
18644: LD_INT 3
18646: NEG
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: PUSH
18652: LD_INT 0
18654: PUSH
18655: LD_INT 3
18657: NEG
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: PUSH
18663: LD_INT 1
18665: PUSH
18666: LD_INT 2
18668: NEG
18669: PUSH
18670: EMPTY
18671: LIST
18672: LIST
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18692: LD_ADDR_VAR 0 15
18696: PUSH
18697: LD_INT 0
18699: PUSH
18700: LD_INT 0
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: PUSH
18707: LD_INT 0
18709: PUSH
18710: LD_INT 1
18712: NEG
18713: PUSH
18714: EMPTY
18715: LIST
18716: LIST
18717: PUSH
18718: LD_INT 1
18720: PUSH
18721: LD_INT 0
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: PUSH
18728: LD_INT 1
18730: PUSH
18731: LD_INT 1
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: PUSH
18738: LD_INT 0
18740: PUSH
18741: LD_INT 1
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PUSH
18748: LD_INT 1
18750: NEG
18751: PUSH
18752: LD_INT 0
18754: PUSH
18755: EMPTY
18756: LIST
18757: LIST
18758: PUSH
18759: LD_INT 1
18761: NEG
18762: PUSH
18763: LD_INT 1
18765: NEG
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: PUSH
18771: LD_INT 1
18773: PUSH
18774: LD_INT 1
18776: NEG
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: PUSH
18782: LD_INT 2
18784: PUSH
18785: LD_INT 0
18787: PUSH
18788: EMPTY
18789: LIST
18790: LIST
18791: PUSH
18792: LD_INT 2
18794: PUSH
18795: LD_INT 1
18797: PUSH
18798: EMPTY
18799: LIST
18800: LIST
18801: PUSH
18802: LD_INT 1
18804: NEG
18805: PUSH
18806: LD_INT 1
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: PUSH
18813: LD_INT 2
18815: NEG
18816: PUSH
18817: LD_INT 0
18819: PUSH
18820: EMPTY
18821: LIST
18822: LIST
18823: PUSH
18824: LD_INT 2
18826: NEG
18827: PUSH
18828: LD_INT 1
18830: NEG
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: LD_INT 2
18838: PUSH
18839: LD_INT 1
18841: NEG
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: PUSH
18847: LD_INT 3
18849: PUSH
18850: LD_INT 0
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: PUSH
18857: LD_INT 3
18859: PUSH
18860: LD_INT 1
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: PUSH
18867: EMPTY
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18885: LD_ADDR_VAR 0 16
18889: PUSH
18890: LD_INT 0
18892: PUSH
18893: LD_INT 0
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: PUSH
18900: LD_INT 0
18902: PUSH
18903: LD_INT 1
18905: NEG
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: PUSH
18911: LD_INT 1
18913: PUSH
18914: LD_INT 0
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: LD_INT 1
18923: PUSH
18924: LD_INT 1
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: PUSH
18931: LD_INT 0
18933: PUSH
18934: LD_INT 1
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: PUSH
18941: LD_INT 1
18943: NEG
18944: PUSH
18945: LD_INT 0
18947: PUSH
18948: EMPTY
18949: LIST
18950: LIST
18951: PUSH
18952: LD_INT 1
18954: NEG
18955: PUSH
18956: LD_INT 1
18958: NEG
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: PUSH
18964: LD_INT 1
18966: NEG
18967: PUSH
18968: LD_INT 2
18970: NEG
18971: PUSH
18972: EMPTY
18973: LIST
18974: LIST
18975: PUSH
18976: LD_INT 2
18978: PUSH
18979: LD_INT 1
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: PUSH
18986: LD_INT 2
18988: PUSH
18989: LD_INT 2
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: PUSH
18996: LD_INT 1
18998: PUSH
18999: LD_INT 2
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: PUSH
19006: LD_INT 2
19008: NEG
19009: PUSH
19010: LD_INT 1
19012: NEG
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: LD_INT 2
19020: NEG
19021: PUSH
19022: LD_INT 2
19024: NEG
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: PUSH
19030: LD_INT 3
19032: PUSH
19033: LD_INT 2
19035: PUSH
19036: EMPTY
19037: LIST
19038: LIST
19039: PUSH
19040: LD_INT 3
19042: PUSH
19043: LD_INT 3
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PUSH
19050: LD_INT 2
19052: PUSH
19053: LD_INT 3
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: PUSH
19060: EMPTY
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: LIST
19072: LIST
19073: LIST
19074: LIST
19075: LIST
19076: LIST
19077: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19078: LD_ADDR_VAR 0 17
19082: PUSH
19083: LD_INT 0
19085: PUSH
19086: LD_INT 0
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: PUSH
19093: LD_INT 0
19095: PUSH
19096: LD_INT 1
19098: NEG
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: PUSH
19104: LD_INT 1
19106: PUSH
19107: LD_INT 0
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: PUSH
19114: LD_INT 1
19116: PUSH
19117: LD_INT 1
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PUSH
19124: LD_INT 0
19126: PUSH
19127: LD_INT 1
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: PUSH
19134: LD_INT 1
19136: NEG
19137: PUSH
19138: LD_INT 0
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: PUSH
19145: LD_INT 1
19147: NEG
19148: PUSH
19149: LD_INT 1
19151: NEG
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: PUSH
19157: LD_INT 1
19159: NEG
19160: PUSH
19161: LD_INT 2
19163: NEG
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: PUSH
19169: LD_INT 0
19171: PUSH
19172: LD_INT 2
19174: NEG
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: LD_INT 1
19182: PUSH
19183: LD_INT 1
19185: NEG
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PUSH
19191: LD_INT 2
19193: PUSH
19194: LD_INT 0
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: PUSH
19201: LD_INT 2
19203: PUSH
19204: LD_INT 1
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: PUSH
19211: LD_INT 2
19213: PUSH
19214: LD_INT 2
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: PUSH
19221: LD_INT 1
19223: PUSH
19224: LD_INT 2
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: PUSH
19231: LD_INT 0
19233: PUSH
19234: LD_INT 2
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: PUSH
19241: LD_INT 1
19243: NEG
19244: PUSH
19245: LD_INT 1
19247: PUSH
19248: EMPTY
19249: LIST
19250: LIST
19251: PUSH
19252: LD_INT 2
19254: NEG
19255: PUSH
19256: LD_INT 0
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: PUSH
19263: LD_INT 2
19265: NEG
19266: PUSH
19267: LD_INT 1
19269: NEG
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: PUSH
19275: LD_INT 2
19277: NEG
19278: PUSH
19279: LD_INT 2
19281: NEG
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: LIST
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: LIST
19306: LIST
19307: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19308: LD_ADDR_VAR 0 18
19312: PUSH
19313: LD_INT 0
19315: PUSH
19316: LD_INT 0
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: PUSH
19323: LD_INT 0
19325: PUSH
19326: LD_INT 1
19328: NEG
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: PUSH
19334: LD_INT 1
19336: PUSH
19337: LD_INT 0
19339: PUSH
19340: EMPTY
19341: LIST
19342: LIST
19343: PUSH
19344: LD_INT 1
19346: PUSH
19347: LD_INT 1
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: PUSH
19354: LD_INT 0
19356: PUSH
19357: LD_INT 1
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: PUSH
19364: LD_INT 1
19366: NEG
19367: PUSH
19368: LD_INT 0
19370: PUSH
19371: EMPTY
19372: LIST
19373: LIST
19374: PUSH
19375: LD_INT 1
19377: NEG
19378: PUSH
19379: LD_INT 1
19381: NEG
19382: PUSH
19383: EMPTY
19384: LIST
19385: LIST
19386: PUSH
19387: LD_INT 1
19389: NEG
19390: PUSH
19391: LD_INT 2
19393: NEG
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: PUSH
19399: LD_INT 0
19401: PUSH
19402: LD_INT 2
19404: NEG
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: PUSH
19410: LD_INT 1
19412: PUSH
19413: LD_INT 1
19415: NEG
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: PUSH
19421: LD_INT 2
19423: PUSH
19424: LD_INT 0
19426: PUSH
19427: EMPTY
19428: LIST
19429: LIST
19430: PUSH
19431: LD_INT 2
19433: PUSH
19434: LD_INT 1
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: PUSH
19441: LD_INT 2
19443: PUSH
19444: LD_INT 2
19446: PUSH
19447: EMPTY
19448: LIST
19449: LIST
19450: PUSH
19451: LD_INT 1
19453: PUSH
19454: LD_INT 2
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: PUSH
19461: LD_INT 0
19463: PUSH
19464: LD_INT 2
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PUSH
19471: LD_INT 1
19473: NEG
19474: PUSH
19475: LD_INT 1
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: PUSH
19482: LD_INT 2
19484: NEG
19485: PUSH
19486: LD_INT 0
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: PUSH
19493: LD_INT 2
19495: NEG
19496: PUSH
19497: LD_INT 1
19499: NEG
19500: PUSH
19501: EMPTY
19502: LIST
19503: LIST
19504: PUSH
19505: LD_INT 2
19507: NEG
19508: PUSH
19509: LD_INT 2
19511: NEG
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19538: LD_ADDR_VAR 0 19
19542: PUSH
19543: LD_INT 0
19545: PUSH
19546: LD_INT 0
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: PUSH
19553: LD_INT 0
19555: PUSH
19556: LD_INT 1
19558: NEG
19559: PUSH
19560: EMPTY
19561: LIST
19562: LIST
19563: PUSH
19564: LD_INT 1
19566: PUSH
19567: LD_INT 0
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: PUSH
19574: LD_INT 1
19576: PUSH
19577: LD_INT 1
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: PUSH
19584: LD_INT 0
19586: PUSH
19587: LD_INT 1
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: PUSH
19594: LD_INT 1
19596: NEG
19597: PUSH
19598: LD_INT 0
19600: PUSH
19601: EMPTY
19602: LIST
19603: LIST
19604: PUSH
19605: LD_INT 1
19607: NEG
19608: PUSH
19609: LD_INT 1
19611: NEG
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: PUSH
19617: LD_INT 1
19619: NEG
19620: PUSH
19621: LD_INT 2
19623: NEG
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: PUSH
19629: LD_INT 0
19631: PUSH
19632: LD_INT 2
19634: NEG
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: PUSH
19640: LD_INT 1
19642: PUSH
19643: LD_INT 1
19645: NEG
19646: PUSH
19647: EMPTY
19648: LIST
19649: LIST
19650: PUSH
19651: LD_INT 2
19653: PUSH
19654: LD_INT 0
19656: PUSH
19657: EMPTY
19658: LIST
19659: LIST
19660: PUSH
19661: LD_INT 2
19663: PUSH
19664: LD_INT 1
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: PUSH
19671: LD_INT 2
19673: PUSH
19674: LD_INT 2
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: PUSH
19681: LD_INT 1
19683: PUSH
19684: LD_INT 2
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: PUSH
19691: LD_INT 0
19693: PUSH
19694: LD_INT 2
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PUSH
19701: LD_INT 1
19703: NEG
19704: PUSH
19705: LD_INT 1
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: PUSH
19712: LD_INT 2
19714: NEG
19715: PUSH
19716: LD_INT 0
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PUSH
19723: LD_INT 2
19725: NEG
19726: PUSH
19727: LD_INT 1
19729: NEG
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: PUSH
19735: LD_INT 2
19737: NEG
19738: PUSH
19739: LD_INT 2
19741: NEG
19742: PUSH
19743: EMPTY
19744: LIST
19745: LIST
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19768: LD_ADDR_VAR 0 20
19772: PUSH
19773: LD_INT 0
19775: PUSH
19776: LD_INT 0
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: PUSH
19783: LD_INT 0
19785: PUSH
19786: LD_INT 1
19788: NEG
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: PUSH
19794: LD_INT 1
19796: PUSH
19797: LD_INT 0
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: PUSH
19804: LD_INT 1
19806: PUSH
19807: LD_INT 1
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: PUSH
19814: LD_INT 0
19816: PUSH
19817: LD_INT 1
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: PUSH
19824: LD_INT 1
19826: NEG
19827: PUSH
19828: LD_INT 0
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: PUSH
19835: LD_INT 1
19837: NEG
19838: PUSH
19839: LD_INT 1
19841: NEG
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: PUSH
19847: LD_INT 1
19849: NEG
19850: PUSH
19851: LD_INT 2
19853: NEG
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: PUSH
19859: LD_INT 0
19861: PUSH
19862: LD_INT 2
19864: NEG
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: PUSH
19870: LD_INT 1
19872: PUSH
19873: LD_INT 1
19875: NEG
19876: PUSH
19877: EMPTY
19878: LIST
19879: LIST
19880: PUSH
19881: LD_INT 2
19883: PUSH
19884: LD_INT 0
19886: PUSH
19887: EMPTY
19888: LIST
19889: LIST
19890: PUSH
19891: LD_INT 2
19893: PUSH
19894: LD_INT 1
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: PUSH
19901: LD_INT 2
19903: PUSH
19904: LD_INT 2
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: PUSH
19911: LD_INT 1
19913: PUSH
19914: LD_INT 2
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PUSH
19921: LD_INT 0
19923: PUSH
19924: LD_INT 2
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: PUSH
19931: LD_INT 1
19933: NEG
19934: PUSH
19935: LD_INT 1
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: PUSH
19942: LD_INT 2
19944: NEG
19945: PUSH
19946: LD_INT 0
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: PUSH
19953: LD_INT 2
19955: NEG
19956: PUSH
19957: LD_INT 1
19959: NEG
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: PUSH
19965: LD_INT 2
19967: NEG
19968: PUSH
19969: LD_INT 2
19971: NEG
19972: PUSH
19973: EMPTY
19974: LIST
19975: LIST
19976: PUSH
19977: EMPTY
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19998: LD_ADDR_VAR 0 21
20002: PUSH
20003: LD_INT 0
20005: PUSH
20006: LD_INT 0
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: PUSH
20013: LD_INT 0
20015: PUSH
20016: LD_INT 1
20018: NEG
20019: PUSH
20020: EMPTY
20021: LIST
20022: LIST
20023: PUSH
20024: LD_INT 1
20026: PUSH
20027: LD_INT 0
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: PUSH
20034: LD_INT 1
20036: PUSH
20037: LD_INT 1
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: PUSH
20044: LD_INT 0
20046: PUSH
20047: LD_INT 1
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: PUSH
20054: LD_INT 1
20056: NEG
20057: PUSH
20058: LD_INT 0
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: PUSH
20065: LD_INT 1
20067: NEG
20068: PUSH
20069: LD_INT 1
20071: NEG
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: PUSH
20077: LD_INT 1
20079: NEG
20080: PUSH
20081: LD_INT 2
20083: NEG
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: PUSH
20089: LD_INT 0
20091: PUSH
20092: LD_INT 2
20094: NEG
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: PUSH
20100: LD_INT 1
20102: PUSH
20103: LD_INT 1
20105: NEG
20106: PUSH
20107: EMPTY
20108: LIST
20109: LIST
20110: PUSH
20111: LD_INT 2
20113: PUSH
20114: LD_INT 0
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: PUSH
20121: LD_INT 2
20123: PUSH
20124: LD_INT 1
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: PUSH
20131: LD_INT 2
20133: PUSH
20134: LD_INT 2
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PUSH
20141: LD_INT 1
20143: PUSH
20144: LD_INT 2
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: PUSH
20151: LD_INT 0
20153: PUSH
20154: LD_INT 2
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: PUSH
20161: LD_INT 1
20163: NEG
20164: PUSH
20165: LD_INT 1
20167: PUSH
20168: EMPTY
20169: LIST
20170: LIST
20171: PUSH
20172: LD_INT 2
20174: NEG
20175: PUSH
20176: LD_INT 0
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: PUSH
20183: LD_INT 2
20185: NEG
20186: PUSH
20187: LD_INT 1
20189: NEG
20190: PUSH
20191: EMPTY
20192: LIST
20193: LIST
20194: PUSH
20195: LD_INT 2
20197: NEG
20198: PUSH
20199: LD_INT 2
20201: NEG
20202: PUSH
20203: EMPTY
20204: LIST
20205: LIST
20206: PUSH
20207: EMPTY
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20228: LD_ADDR_VAR 0 22
20232: PUSH
20233: LD_INT 0
20235: PUSH
20236: LD_INT 0
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: PUSH
20243: LD_INT 0
20245: PUSH
20246: LD_INT 1
20248: NEG
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: PUSH
20254: LD_INT 1
20256: PUSH
20257: LD_INT 0
20259: PUSH
20260: EMPTY
20261: LIST
20262: LIST
20263: PUSH
20264: LD_INT 1
20266: PUSH
20267: LD_INT 1
20269: PUSH
20270: EMPTY
20271: LIST
20272: LIST
20273: PUSH
20274: LD_INT 0
20276: PUSH
20277: LD_INT 1
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: PUSH
20284: LD_INT 1
20286: NEG
20287: PUSH
20288: LD_INT 0
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: PUSH
20295: LD_INT 1
20297: NEG
20298: PUSH
20299: LD_INT 1
20301: NEG
20302: PUSH
20303: EMPTY
20304: LIST
20305: LIST
20306: PUSH
20307: LD_INT 1
20309: NEG
20310: PUSH
20311: LD_INT 2
20313: NEG
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PUSH
20319: LD_INT 0
20321: PUSH
20322: LD_INT 2
20324: NEG
20325: PUSH
20326: EMPTY
20327: LIST
20328: LIST
20329: PUSH
20330: LD_INT 1
20332: PUSH
20333: LD_INT 1
20335: NEG
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: PUSH
20341: LD_INT 2
20343: PUSH
20344: LD_INT 0
20346: PUSH
20347: EMPTY
20348: LIST
20349: LIST
20350: PUSH
20351: LD_INT 2
20353: PUSH
20354: LD_INT 1
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: PUSH
20361: LD_INT 2
20363: PUSH
20364: LD_INT 2
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: PUSH
20371: LD_INT 1
20373: PUSH
20374: LD_INT 2
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: PUSH
20381: LD_INT 0
20383: PUSH
20384: LD_INT 2
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: PUSH
20391: LD_INT 1
20393: NEG
20394: PUSH
20395: LD_INT 1
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: PUSH
20402: LD_INT 2
20404: NEG
20405: PUSH
20406: LD_INT 0
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: PUSH
20413: LD_INT 2
20415: NEG
20416: PUSH
20417: LD_INT 1
20419: NEG
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: PUSH
20425: LD_INT 2
20427: NEG
20428: PUSH
20429: LD_INT 2
20431: NEG
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20458: LD_ADDR_VAR 0 23
20462: PUSH
20463: LD_INT 0
20465: PUSH
20466: LD_INT 0
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: PUSH
20473: LD_INT 0
20475: PUSH
20476: LD_INT 1
20478: NEG
20479: PUSH
20480: EMPTY
20481: LIST
20482: LIST
20483: PUSH
20484: LD_INT 1
20486: PUSH
20487: LD_INT 0
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: PUSH
20494: LD_INT 1
20496: PUSH
20497: LD_INT 1
20499: PUSH
20500: EMPTY
20501: LIST
20502: LIST
20503: PUSH
20504: LD_INT 0
20506: PUSH
20507: LD_INT 1
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: PUSH
20514: LD_INT 1
20516: NEG
20517: PUSH
20518: LD_INT 0
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: PUSH
20525: LD_INT 1
20527: NEG
20528: PUSH
20529: LD_INT 1
20531: NEG
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: PUSH
20537: LD_INT 1
20539: NEG
20540: PUSH
20541: LD_INT 2
20543: NEG
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: PUSH
20549: LD_INT 0
20551: PUSH
20552: LD_INT 2
20554: NEG
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: PUSH
20560: LD_INT 1
20562: PUSH
20563: LD_INT 1
20565: NEG
20566: PUSH
20567: EMPTY
20568: LIST
20569: LIST
20570: PUSH
20571: LD_INT 2
20573: PUSH
20574: LD_INT 0
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: PUSH
20581: LD_INT 2
20583: PUSH
20584: LD_INT 1
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: PUSH
20591: LD_INT 2
20593: PUSH
20594: LD_INT 2
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: PUSH
20601: LD_INT 1
20603: PUSH
20604: LD_INT 2
20606: PUSH
20607: EMPTY
20608: LIST
20609: LIST
20610: PUSH
20611: LD_INT 0
20613: PUSH
20614: LD_INT 2
20616: PUSH
20617: EMPTY
20618: LIST
20619: LIST
20620: PUSH
20621: LD_INT 1
20623: NEG
20624: PUSH
20625: LD_INT 1
20627: PUSH
20628: EMPTY
20629: LIST
20630: LIST
20631: PUSH
20632: LD_INT 2
20634: NEG
20635: PUSH
20636: LD_INT 0
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: PUSH
20643: LD_INT 2
20645: NEG
20646: PUSH
20647: LD_INT 1
20649: NEG
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PUSH
20655: LD_INT 2
20657: NEG
20658: PUSH
20659: LD_INT 2
20661: NEG
20662: PUSH
20663: EMPTY
20664: LIST
20665: LIST
20666: PUSH
20667: LD_INT 2
20669: NEG
20670: PUSH
20671: LD_INT 3
20673: NEG
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PUSH
20679: LD_INT 1
20681: NEG
20682: PUSH
20683: LD_INT 3
20685: NEG
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: LD_INT 1
20693: PUSH
20694: LD_INT 2
20696: NEG
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PUSH
20702: LD_INT 2
20704: PUSH
20705: LD_INT 1
20707: NEG
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: PUSH
20713: EMPTY
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20738: LD_ADDR_VAR 0 24
20742: PUSH
20743: LD_INT 0
20745: PUSH
20746: LD_INT 0
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: PUSH
20753: LD_INT 0
20755: PUSH
20756: LD_INT 1
20758: NEG
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: PUSH
20764: LD_INT 1
20766: PUSH
20767: LD_INT 0
20769: PUSH
20770: EMPTY
20771: LIST
20772: LIST
20773: PUSH
20774: LD_INT 1
20776: PUSH
20777: LD_INT 1
20779: PUSH
20780: EMPTY
20781: LIST
20782: LIST
20783: PUSH
20784: LD_INT 0
20786: PUSH
20787: LD_INT 1
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: PUSH
20794: LD_INT 1
20796: NEG
20797: PUSH
20798: LD_INT 0
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: PUSH
20805: LD_INT 1
20807: NEG
20808: PUSH
20809: LD_INT 1
20811: NEG
20812: PUSH
20813: EMPTY
20814: LIST
20815: LIST
20816: PUSH
20817: LD_INT 1
20819: NEG
20820: PUSH
20821: LD_INT 2
20823: NEG
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: PUSH
20829: LD_INT 0
20831: PUSH
20832: LD_INT 2
20834: NEG
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: PUSH
20840: LD_INT 1
20842: PUSH
20843: LD_INT 1
20845: NEG
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: PUSH
20851: LD_INT 2
20853: PUSH
20854: LD_INT 0
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: PUSH
20861: LD_INT 2
20863: PUSH
20864: LD_INT 1
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: PUSH
20871: LD_INT 2
20873: PUSH
20874: LD_INT 2
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: PUSH
20881: LD_INT 1
20883: PUSH
20884: LD_INT 2
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: PUSH
20891: LD_INT 0
20893: PUSH
20894: LD_INT 2
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: PUSH
20901: LD_INT 1
20903: NEG
20904: PUSH
20905: LD_INT 1
20907: PUSH
20908: EMPTY
20909: LIST
20910: LIST
20911: PUSH
20912: LD_INT 2
20914: NEG
20915: PUSH
20916: LD_INT 0
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: PUSH
20923: LD_INT 2
20925: NEG
20926: PUSH
20927: LD_INT 1
20929: NEG
20930: PUSH
20931: EMPTY
20932: LIST
20933: LIST
20934: PUSH
20935: LD_INT 2
20937: NEG
20938: PUSH
20939: LD_INT 2
20941: NEG
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: PUSH
20947: LD_INT 1
20949: PUSH
20950: LD_INT 2
20952: NEG
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: PUSH
20958: LD_INT 2
20960: PUSH
20961: LD_INT 1
20963: NEG
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: PUSH
20969: LD_INT 3
20971: PUSH
20972: LD_INT 1
20974: PUSH
20975: EMPTY
20976: LIST
20977: LIST
20978: PUSH
20979: LD_INT 3
20981: PUSH
20982: LD_INT 2
20984: PUSH
20985: EMPTY
20986: LIST
20987: LIST
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21014: LD_ADDR_VAR 0 25
21018: PUSH
21019: LD_INT 0
21021: PUSH
21022: LD_INT 0
21024: PUSH
21025: EMPTY
21026: LIST
21027: LIST
21028: PUSH
21029: LD_INT 0
21031: PUSH
21032: LD_INT 1
21034: NEG
21035: PUSH
21036: EMPTY
21037: LIST
21038: LIST
21039: PUSH
21040: LD_INT 1
21042: PUSH
21043: LD_INT 0
21045: PUSH
21046: EMPTY
21047: LIST
21048: LIST
21049: PUSH
21050: LD_INT 1
21052: PUSH
21053: LD_INT 1
21055: PUSH
21056: EMPTY
21057: LIST
21058: LIST
21059: PUSH
21060: LD_INT 0
21062: PUSH
21063: LD_INT 1
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: PUSH
21070: LD_INT 1
21072: NEG
21073: PUSH
21074: LD_INT 0
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: PUSH
21081: LD_INT 1
21083: NEG
21084: PUSH
21085: LD_INT 1
21087: NEG
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: PUSH
21093: LD_INT 1
21095: NEG
21096: PUSH
21097: LD_INT 2
21099: NEG
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: PUSH
21105: LD_INT 0
21107: PUSH
21108: LD_INT 2
21110: NEG
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: PUSH
21116: LD_INT 1
21118: PUSH
21119: LD_INT 1
21121: NEG
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: PUSH
21127: LD_INT 2
21129: PUSH
21130: LD_INT 0
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: PUSH
21137: LD_INT 2
21139: PUSH
21140: LD_INT 1
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: PUSH
21147: LD_INT 2
21149: PUSH
21150: LD_INT 2
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: PUSH
21157: LD_INT 1
21159: PUSH
21160: LD_INT 2
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: PUSH
21167: LD_INT 0
21169: PUSH
21170: LD_INT 2
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: PUSH
21177: LD_INT 1
21179: NEG
21180: PUSH
21181: LD_INT 1
21183: PUSH
21184: EMPTY
21185: LIST
21186: LIST
21187: PUSH
21188: LD_INT 2
21190: NEG
21191: PUSH
21192: LD_INT 0
21194: PUSH
21195: EMPTY
21196: LIST
21197: LIST
21198: PUSH
21199: LD_INT 2
21201: NEG
21202: PUSH
21203: LD_INT 1
21205: NEG
21206: PUSH
21207: EMPTY
21208: LIST
21209: LIST
21210: PUSH
21211: LD_INT 2
21213: NEG
21214: PUSH
21215: LD_INT 2
21217: NEG
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: PUSH
21223: LD_INT 3
21225: PUSH
21226: LD_INT 1
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 3
21235: PUSH
21236: LD_INT 2
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: PUSH
21243: LD_INT 2
21245: PUSH
21246: LD_INT 3
21248: PUSH
21249: EMPTY
21250: LIST
21251: LIST
21252: PUSH
21253: LD_INT 1
21255: PUSH
21256: LD_INT 3
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21288: LD_ADDR_VAR 0 26
21292: PUSH
21293: LD_INT 0
21295: PUSH
21296: LD_INT 0
21298: PUSH
21299: EMPTY
21300: LIST
21301: LIST
21302: PUSH
21303: LD_INT 0
21305: PUSH
21306: LD_INT 1
21308: NEG
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: PUSH
21314: LD_INT 1
21316: PUSH
21317: LD_INT 0
21319: PUSH
21320: EMPTY
21321: LIST
21322: LIST
21323: PUSH
21324: LD_INT 1
21326: PUSH
21327: LD_INT 1
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: PUSH
21334: LD_INT 0
21336: PUSH
21337: LD_INT 1
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PUSH
21344: LD_INT 1
21346: NEG
21347: PUSH
21348: LD_INT 0
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: PUSH
21355: LD_INT 1
21357: NEG
21358: PUSH
21359: LD_INT 1
21361: NEG
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: PUSH
21367: LD_INT 1
21369: NEG
21370: PUSH
21371: LD_INT 2
21373: NEG
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: PUSH
21379: LD_INT 0
21381: PUSH
21382: LD_INT 2
21384: NEG
21385: PUSH
21386: EMPTY
21387: LIST
21388: LIST
21389: PUSH
21390: LD_INT 1
21392: PUSH
21393: LD_INT 1
21395: NEG
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: PUSH
21401: LD_INT 2
21403: PUSH
21404: LD_INT 0
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: PUSH
21411: LD_INT 2
21413: PUSH
21414: LD_INT 1
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: PUSH
21421: LD_INT 2
21423: PUSH
21424: LD_INT 2
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: PUSH
21431: LD_INT 1
21433: PUSH
21434: LD_INT 2
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: PUSH
21441: LD_INT 0
21443: PUSH
21444: LD_INT 2
21446: PUSH
21447: EMPTY
21448: LIST
21449: LIST
21450: PUSH
21451: LD_INT 1
21453: NEG
21454: PUSH
21455: LD_INT 1
21457: PUSH
21458: EMPTY
21459: LIST
21460: LIST
21461: PUSH
21462: LD_INT 2
21464: NEG
21465: PUSH
21466: LD_INT 0
21468: PUSH
21469: EMPTY
21470: LIST
21471: LIST
21472: PUSH
21473: LD_INT 2
21475: NEG
21476: PUSH
21477: LD_INT 1
21479: NEG
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: PUSH
21485: LD_INT 2
21487: NEG
21488: PUSH
21489: LD_INT 2
21491: NEG
21492: PUSH
21493: EMPTY
21494: LIST
21495: LIST
21496: PUSH
21497: LD_INT 2
21499: PUSH
21500: LD_INT 3
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: PUSH
21507: LD_INT 1
21509: PUSH
21510: LD_INT 3
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: PUSH
21517: LD_INT 1
21519: NEG
21520: PUSH
21521: LD_INT 2
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: PUSH
21528: LD_INT 2
21530: NEG
21531: PUSH
21532: LD_INT 1
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21564: LD_ADDR_VAR 0 27
21568: PUSH
21569: LD_INT 0
21571: PUSH
21572: LD_INT 0
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: PUSH
21579: LD_INT 0
21581: PUSH
21582: LD_INT 1
21584: NEG
21585: PUSH
21586: EMPTY
21587: LIST
21588: LIST
21589: PUSH
21590: LD_INT 1
21592: PUSH
21593: LD_INT 0
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: PUSH
21600: LD_INT 1
21602: PUSH
21603: LD_INT 1
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: PUSH
21610: LD_INT 0
21612: PUSH
21613: LD_INT 1
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: PUSH
21620: LD_INT 1
21622: NEG
21623: PUSH
21624: LD_INT 0
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: PUSH
21631: LD_INT 1
21633: NEG
21634: PUSH
21635: LD_INT 1
21637: NEG
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: PUSH
21643: LD_INT 1
21645: NEG
21646: PUSH
21647: LD_INT 2
21649: NEG
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: PUSH
21655: LD_INT 0
21657: PUSH
21658: LD_INT 2
21660: NEG
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: PUSH
21666: LD_INT 1
21668: PUSH
21669: LD_INT 1
21671: NEG
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: PUSH
21677: LD_INT 2
21679: PUSH
21680: LD_INT 0
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: PUSH
21687: LD_INT 2
21689: PUSH
21690: LD_INT 1
21692: PUSH
21693: EMPTY
21694: LIST
21695: LIST
21696: PUSH
21697: LD_INT 2
21699: PUSH
21700: LD_INT 2
21702: PUSH
21703: EMPTY
21704: LIST
21705: LIST
21706: PUSH
21707: LD_INT 1
21709: PUSH
21710: LD_INT 2
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: PUSH
21717: LD_INT 0
21719: PUSH
21720: LD_INT 2
21722: PUSH
21723: EMPTY
21724: LIST
21725: LIST
21726: PUSH
21727: LD_INT 1
21729: NEG
21730: PUSH
21731: LD_INT 1
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: PUSH
21738: LD_INT 2
21740: NEG
21741: PUSH
21742: LD_INT 0
21744: PUSH
21745: EMPTY
21746: LIST
21747: LIST
21748: PUSH
21749: LD_INT 2
21751: NEG
21752: PUSH
21753: LD_INT 1
21755: NEG
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: PUSH
21761: LD_INT 2
21763: NEG
21764: PUSH
21765: LD_INT 2
21767: NEG
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PUSH
21773: LD_INT 1
21775: NEG
21776: PUSH
21777: LD_INT 2
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: PUSH
21784: LD_INT 2
21786: NEG
21787: PUSH
21788: LD_INT 1
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: PUSH
21795: LD_INT 3
21797: NEG
21798: PUSH
21799: LD_INT 1
21801: NEG
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: PUSH
21807: LD_INT 3
21809: NEG
21810: PUSH
21811: LD_INT 2
21813: NEG
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21844: LD_ADDR_VAR 0 28
21848: PUSH
21849: LD_INT 0
21851: PUSH
21852: LD_INT 0
21854: PUSH
21855: EMPTY
21856: LIST
21857: LIST
21858: PUSH
21859: LD_INT 0
21861: PUSH
21862: LD_INT 1
21864: NEG
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: PUSH
21870: LD_INT 1
21872: PUSH
21873: LD_INT 0
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: PUSH
21880: LD_INT 1
21882: PUSH
21883: LD_INT 1
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: LD_INT 0
21892: PUSH
21893: LD_INT 1
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: PUSH
21900: LD_INT 1
21902: NEG
21903: PUSH
21904: LD_INT 0
21906: PUSH
21907: EMPTY
21908: LIST
21909: LIST
21910: PUSH
21911: LD_INT 1
21913: NEG
21914: PUSH
21915: LD_INT 1
21917: NEG
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: PUSH
21923: LD_INT 1
21925: NEG
21926: PUSH
21927: LD_INT 2
21929: NEG
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: PUSH
21935: LD_INT 0
21937: PUSH
21938: LD_INT 2
21940: NEG
21941: PUSH
21942: EMPTY
21943: LIST
21944: LIST
21945: PUSH
21946: LD_INT 1
21948: PUSH
21949: LD_INT 1
21951: NEG
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: PUSH
21957: LD_INT 2
21959: PUSH
21960: LD_INT 0
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: PUSH
21967: LD_INT 2
21969: PUSH
21970: LD_INT 1
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: LD_INT 2
21979: PUSH
21980: LD_INT 2
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 1
21989: PUSH
21990: LD_INT 2
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PUSH
21997: LD_INT 0
21999: PUSH
22000: LD_INT 2
22002: PUSH
22003: EMPTY
22004: LIST
22005: LIST
22006: PUSH
22007: LD_INT 1
22009: NEG
22010: PUSH
22011: LD_INT 1
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PUSH
22018: LD_INT 2
22020: NEG
22021: PUSH
22022: LD_INT 0
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: LD_INT 2
22031: NEG
22032: PUSH
22033: LD_INT 1
22035: NEG
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: PUSH
22041: LD_INT 2
22043: NEG
22044: PUSH
22045: LD_INT 2
22047: NEG
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: PUSH
22053: LD_INT 2
22055: NEG
22056: PUSH
22057: LD_INT 3
22059: NEG
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: PUSH
22065: LD_INT 1
22067: NEG
22068: PUSH
22069: LD_INT 3
22071: NEG
22072: PUSH
22073: EMPTY
22074: LIST
22075: LIST
22076: PUSH
22077: LD_INT 3
22079: NEG
22080: PUSH
22081: LD_INT 1
22083: NEG
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: PUSH
22089: LD_INT 3
22091: NEG
22092: PUSH
22093: LD_INT 2
22095: NEG
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PUSH
22101: EMPTY
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22126: LD_ADDR_VAR 0 29
22130: PUSH
22131: LD_INT 0
22133: PUSH
22134: LD_INT 0
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: PUSH
22141: LD_INT 0
22143: PUSH
22144: LD_INT 1
22146: NEG
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: PUSH
22152: LD_INT 1
22154: PUSH
22155: LD_INT 0
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: PUSH
22162: LD_INT 1
22164: PUSH
22165: LD_INT 1
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: PUSH
22172: LD_INT 0
22174: PUSH
22175: LD_INT 1
22177: PUSH
22178: EMPTY
22179: LIST
22180: LIST
22181: PUSH
22182: LD_INT 1
22184: NEG
22185: PUSH
22186: LD_INT 0
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PUSH
22193: LD_INT 1
22195: NEG
22196: PUSH
22197: LD_INT 1
22199: NEG
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: PUSH
22205: LD_INT 1
22207: NEG
22208: PUSH
22209: LD_INT 2
22211: NEG
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: PUSH
22217: LD_INT 0
22219: PUSH
22220: LD_INT 2
22222: NEG
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: PUSH
22228: LD_INT 1
22230: PUSH
22231: LD_INT 1
22233: NEG
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: PUSH
22239: LD_INT 2
22241: PUSH
22242: LD_INT 0
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: PUSH
22249: LD_INT 2
22251: PUSH
22252: LD_INT 1
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: PUSH
22259: LD_INT 1
22261: PUSH
22262: LD_INT 2
22264: PUSH
22265: EMPTY
22266: LIST
22267: LIST
22268: PUSH
22269: LD_INT 0
22271: PUSH
22272: LD_INT 2
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: PUSH
22279: LD_INT 1
22281: NEG
22282: PUSH
22283: LD_INT 1
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PUSH
22290: LD_INT 2
22292: NEG
22293: PUSH
22294: LD_INT 1
22296: NEG
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PUSH
22302: LD_INT 2
22304: NEG
22305: PUSH
22306: LD_INT 2
22308: NEG
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PUSH
22314: LD_INT 2
22316: NEG
22317: PUSH
22318: LD_INT 3
22320: NEG
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PUSH
22326: LD_INT 2
22328: PUSH
22329: LD_INT 1
22331: NEG
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: PUSH
22337: LD_INT 3
22339: PUSH
22340: LD_INT 1
22342: PUSH
22343: EMPTY
22344: LIST
22345: LIST
22346: PUSH
22347: LD_INT 1
22349: PUSH
22350: LD_INT 3
22352: PUSH
22353: EMPTY
22354: LIST
22355: LIST
22356: PUSH
22357: LD_INT 1
22359: NEG
22360: PUSH
22361: LD_INT 2
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: PUSH
22368: LD_INT 3
22370: NEG
22371: PUSH
22372: LD_INT 2
22374: NEG
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22405: LD_ADDR_VAR 0 30
22409: PUSH
22410: LD_INT 0
22412: PUSH
22413: LD_INT 0
22415: PUSH
22416: EMPTY
22417: LIST
22418: LIST
22419: PUSH
22420: LD_INT 0
22422: PUSH
22423: LD_INT 1
22425: NEG
22426: PUSH
22427: EMPTY
22428: LIST
22429: LIST
22430: PUSH
22431: LD_INT 1
22433: PUSH
22434: LD_INT 0
22436: PUSH
22437: EMPTY
22438: LIST
22439: LIST
22440: PUSH
22441: LD_INT 1
22443: PUSH
22444: LD_INT 1
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: PUSH
22451: LD_INT 0
22453: PUSH
22454: LD_INT 1
22456: PUSH
22457: EMPTY
22458: LIST
22459: LIST
22460: PUSH
22461: LD_INT 1
22463: NEG
22464: PUSH
22465: LD_INT 0
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: PUSH
22472: LD_INT 1
22474: NEG
22475: PUSH
22476: LD_INT 1
22478: NEG
22479: PUSH
22480: EMPTY
22481: LIST
22482: LIST
22483: PUSH
22484: LD_INT 1
22486: NEG
22487: PUSH
22488: LD_INT 2
22490: NEG
22491: PUSH
22492: EMPTY
22493: LIST
22494: LIST
22495: PUSH
22496: LD_INT 0
22498: PUSH
22499: LD_INT 2
22501: NEG
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: PUSH
22507: LD_INT 1
22509: PUSH
22510: LD_INT 1
22512: NEG
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: PUSH
22518: LD_INT 2
22520: PUSH
22521: LD_INT 0
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: PUSH
22528: LD_INT 2
22530: PUSH
22531: LD_INT 1
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: PUSH
22538: LD_INT 2
22540: PUSH
22541: LD_INT 2
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PUSH
22548: LD_INT 1
22550: PUSH
22551: LD_INT 2
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: PUSH
22558: LD_INT 1
22560: NEG
22561: PUSH
22562: LD_INT 1
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: PUSH
22569: LD_INT 2
22571: NEG
22572: PUSH
22573: LD_INT 0
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: PUSH
22580: LD_INT 2
22582: NEG
22583: PUSH
22584: LD_INT 1
22586: NEG
22587: PUSH
22588: EMPTY
22589: LIST
22590: LIST
22591: PUSH
22592: LD_INT 1
22594: NEG
22595: PUSH
22596: LD_INT 3
22598: NEG
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: LD_INT 1
22606: PUSH
22607: LD_INT 2
22609: NEG
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: PUSH
22615: LD_INT 3
22617: PUSH
22618: LD_INT 2
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: PUSH
22625: LD_INT 2
22627: PUSH
22628: LD_INT 3
22630: PUSH
22631: EMPTY
22632: LIST
22633: LIST
22634: PUSH
22635: LD_INT 2
22637: NEG
22638: PUSH
22639: LD_INT 1
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: PUSH
22646: LD_INT 3
22648: NEG
22649: PUSH
22650: LD_INT 1
22652: NEG
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22683: LD_ADDR_VAR 0 31
22687: PUSH
22688: LD_INT 0
22690: PUSH
22691: LD_INT 0
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: PUSH
22698: LD_INT 0
22700: PUSH
22701: LD_INT 1
22703: NEG
22704: PUSH
22705: EMPTY
22706: LIST
22707: LIST
22708: PUSH
22709: LD_INT 1
22711: PUSH
22712: LD_INT 0
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: PUSH
22719: LD_INT 1
22721: PUSH
22722: LD_INT 1
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: PUSH
22729: LD_INT 0
22731: PUSH
22732: LD_INT 1
22734: PUSH
22735: EMPTY
22736: LIST
22737: LIST
22738: PUSH
22739: LD_INT 1
22741: NEG
22742: PUSH
22743: LD_INT 0
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: PUSH
22750: LD_INT 1
22752: NEG
22753: PUSH
22754: LD_INT 1
22756: NEG
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: PUSH
22762: LD_INT 1
22764: NEG
22765: PUSH
22766: LD_INT 2
22768: NEG
22769: PUSH
22770: EMPTY
22771: LIST
22772: LIST
22773: PUSH
22774: LD_INT 1
22776: PUSH
22777: LD_INT 1
22779: NEG
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: PUSH
22785: LD_INT 2
22787: PUSH
22788: LD_INT 0
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: PUSH
22795: LD_INT 2
22797: PUSH
22798: LD_INT 1
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: PUSH
22805: LD_INT 2
22807: PUSH
22808: LD_INT 2
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: PUSH
22815: LD_INT 1
22817: PUSH
22818: LD_INT 2
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: PUSH
22825: LD_INT 0
22827: PUSH
22828: LD_INT 2
22830: PUSH
22831: EMPTY
22832: LIST
22833: LIST
22834: PUSH
22835: LD_INT 1
22837: NEG
22838: PUSH
22839: LD_INT 1
22841: PUSH
22842: EMPTY
22843: LIST
22844: LIST
22845: PUSH
22846: LD_INT 2
22848: NEG
22849: PUSH
22850: LD_INT 1
22852: NEG
22853: PUSH
22854: EMPTY
22855: LIST
22856: LIST
22857: PUSH
22858: LD_INT 2
22860: NEG
22861: PUSH
22862: LD_INT 2
22864: NEG
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PUSH
22870: LD_INT 2
22872: NEG
22873: PUSH
22874: LD_INT 3
22876: NEG
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: PUSH
22882: LD_INT 2
22884: PUSH
22885: LD_INT 1
22887: NEG
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: PUSH
22893: LD_INT 3
22895: PUSH
22896: LD_INT 1
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: PUSH
22903: LD_INT 1
22905: PUSH
22906: LD_INT 3
22908: PUSH
22909: EMPTY
22910: LIST
22911: LIST
22912: PUSH
22913: LD_INT 1
22915: NEG
22916: PUSH
22917: LD_INT 2
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: LD_INT 3
22926: NEG
22927: PUSH
22928: LD_INT 2
22930: NEG
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: PUSH
22936: EMPTY
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22961: LD_ADDR_VAR 0 32
22965: PUSH
22966: LD_INT 0
22968: PUSH
22969: LD_INT 0
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: PUSH
22976: LD_INT 0
22978: PUSH
22979: LD_INT 1
22981: NEG
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: PUSH
22987: LD_INT 1
22989: PUSH
22990: LD_INT 0
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: PUSH
22997: LD_INT 1
22999: PUSH
23000: LD_INT 1
23002: PUSH
23003: EMPTY
23004: LIST
23005: LIST
23006: PUSH
23007: LD_INT 0
23009: PUSH
23010: LD_INT 1
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: PUSH
23017: LD_INT 1
23019: NEG
23020: PUSH
23021: LD_INT 0
23023: PUSH
23024: EMPTY
23025: LIST
23026: LIST
23027: PUSH
23028: LD_INT 1
23030: NEG
23031: PUSH
23032: LD_INT 1
23034: NEG
23035: PUSH
23036: EMPTY
23037: LIST
23038: LIST
23039: PUSH
23040: LD_INT 1
23042: NEG
23043: PUSH
23044: LD_INT 2
23046: NEG
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PUSH
23052: LD_INT 0
23054: PUSH
23055: LD_INT 2
23057: NEG
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: PUSH
23063: LD_INT 1
23065: PUSH
23066: LD_INT 1
23068: NEG
23069: PUSH
23070: EMPTY
23071: LIST
23072: LIST
23073: PUSH
23074: LD_INT 2
23076: PUSH
23077: LD_INT 1
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: PUSH
23084: LD_INT 2
23086: PUSH
23087: LD_INT 2
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: PUSH
23094: LD_INT 1
23096: PUSH
23097: LD_INT 2
23099: PUSH
23100: EMPTY
23101: LIST
23102: LIST
23103: PUSH
23104: LD_INT 0
23106: PUSH
23107: LD_INT 2
23109: PUSH
23110: EMPTY
23111: LIST
23112: LIST
23113: PUSH
23114: LD_INT 1
23116: NEG
23117: PUSH
23118: LD_INT 1
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: PUSH
23125: LD_INT 2
23127: NEG
23128: PUSH
23129: LD_INT 0
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: PUSH
23136: LD_INT 2
23138: NEG
23139: PUSH
23140: LD_INT 1
23142: NEG
23143: PUSH
23144: EMPTY
23145: LIST
23146: LIST
23147: PUSH
23148: LD_INT 1
23150: NEG
23151: PUSH
23152: LD_INT 3
23154: NEG
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: PUSH
23160: LD_INT 1
23162: PUSH
23163: LD_INT 2
23165: NEG
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: PUSH
23171: LD_INT 3
23173: PUSH
23174: LD_INT 2
23176: PUSH
23177: EMPTY
23178: LIST
23179: LIST
23180: PUSH
23181: LD_INT 2
23183: PUSH
23184: LD_INT 3
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PUSH
23191: LD_INT 2
23193: NEG
23194: PUSH
23195: LD_INT 1
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: PUSH
23202: LD_INT 3
23204: NEG
23205: PUSH
23206: LD_INT 1
23208: NEG
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23239: LD_ADDR_VAR 0 33
23243: PUSH
23244: LD_INT 0
23246: PUSH
23247: LD_INT 0
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: PUSH
23254: LD_INT 0
23256: PUSH
23257: LD_INT 1
23259: NEG
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: LD_INT 1
23267: PUSH
23268: LD_INT 0
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: LD_INT 1
23277: PUSH
23278: LD_INT 1
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: PUSH
23285: LD_INT 0
23287: PUSH
23288: LD_INT 1
23290: PUSH
23291: EMPTY
23292: LIST
23293: LIST
23294: PUSH
23295: LD_INT 1
23297: NEG
23298: PUSH
23299: LD_INT 0
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: PUSH
23306: LD_INT 1
23308: NEG
23309: PUSH
23310: LD_INT 1
23312: NEG
23313: PUSH
23314: EMPTY
23315: LIST
23316: LIST
23317: PUSH
23318: LD_INT 1
23320: NEG
23321: PUSH
23322: LD_INT 2
23324: NEG
23325: PUSH
23326: EMPTY
23327: LIST
23328: LIST
23329: PUSH
23330: LD_INT 1
23332: PUSH
23333: LD_INT 1
23335: NEG
23336: PUSH
23337: EMPTY
23338: LIST
23339: LIST
23340: PUSH
23341: LD_INT 2
23343: PUSH
23344: LD_INT 0
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: PUSH
23351: LD_INT 2
23353: PUSH
23354: LD_INT 1
23356: PUSH
23357: EMPTY
23358: LIST
23359: LIST
23360: PUSH
23361: LD_INT 1
23363: PUSH
23364: LD_INT 2
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: PUSH
23371: LD_INT 0
23373: PUSH
23374: LD_INT 2
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: PUSH
23381: LD_INT 1
23383: NEG
23384: PUSH
23385: LD_INT 1
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: PUSH
23392: LD_INT 2
23394: NEG
23395: PUSH
23396: LD_INT 0
23398: PUSH
23399: EMPTY
23400: LIST
23401: LIST
23402: PUSH
23403: LD_INT 2
23405: NEG
23406: PUSH
23407: LD_INT 1
23409: NEG
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: PUSH
23415: LD_INT 2
23417: NEG
23418: PUSH
23419: LD_INT 2
23421: NEG
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: PUSH
23427: LD_INT 2
23429: NEG
23430: PUSH
23431: LD_INT 3
23433: NEG
23434: PUSH
23435: EMPTY
23436: LIST
23437: LIST
23438: PUSH
23439: LD_INT 2
23441: PUSH
23442: LD_INT 1
23444: NEG
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: PUSH
23450: LD_INT 3
23452: PUSH
23453: LD_INT 1
23455: PUSH
23456: EMPTY
23457: LIST
23458: LIST
23459: PUSH
23460: LD_INT 1
23462: PUSH
23463: LD_INT 3
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: PUSH
23470: LD_INT 1
23472: NEG
23473: PUSH
23474: LD_INT 2
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: PUSH
23481: LD_INT 3
23483: NEG
23484: PUSH
23485: LD_INT 2
23487: NEG
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23518: LD_ADDR_VAR 0 34
23522: PUSH
23523: LD_INT 0
23525: PUSH
23526: LD_INT 0
23528: PUSH
23529: EMPTY
23530: LIST
23531: LIST
23532: PUSH
23533: LD_INT 0
23535: PUSH
23536: LD_INT 1
23538: NEG
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: PUSH
23544: LD_INT 1
23546: PUSH
23547: LD_INT 0
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: PUSH
23554: LD_INT 1
23556: PUSH
23557: LD_INT 1
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: PUSH
23564: LD_INT 0
23566: PUSH
23567: LD_INT 1
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: PUSH
23574: LD_INT 1
23576: NEG
23577: PUSH
23578: LD_INT 0
23580: PUSH
23581: EMPTY
23582: LIST
23583: LIST
23584: PUSH
23585: LD_INT 1
23587: NEG
23588: PUSH
23589: LD_INT 1
23591: NEG
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: PUSH
23597: LD_INT 1
23599: NEG
23600: PUSH
23601: LD_INT 2
23603: NEG
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: PUSH
23609: LD_INT 0
23611: PUSH
23612: LD_INT 2
23614: NEG
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: PUSH
23620: LD_INT 1
23622: PUSH
23623: LD_INT 1
23625: NEG
23626: PUSH
23627: EMPTY
23628: LIST
23629: LIST
23630: PUSH
23631: LD_INT 2
23633: PUSH
23634: LD_INT 1
23636: PUSH
23637: EMPTY
23638: LIST
23639: LIST
23640: PUSH
23641: LD_INT 2
23643: PUSH
23644: LD_INT 2
23646: PUSH
23647: EMPTY
23648: LIST
23649: LIST
23650: PUSH
23651: LD_INT 1
23653: PUSH
23654: LD_INT 2
23656: PUSH
23657: EMPTY
23658: LIST
23659: LIST
23660: PUSH
23661: LD_INT 1
23663: NEG
23664: PUSH
23665: LD_INT 1
23667: PUSH
23668: EMPTY
23669: LIST
23670: LIST
23671: PUSH
23672: LD_INT 2
23674: NEG
23675: PUSH
23676: LD_INT 0
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: PUSH
23683: LD_INT 2
23685: NEG
23686: PUSH
23687: LD_INT 1
23689: NEG
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: PUSH
23695: LD_INT 2
23697: NEG
23698: PUSH
23699: LD_INT 2
23701: NEG
23702: PUSH
23703: EMPTY
23704: LIST
23705: LIST
23706: PUSH
23707: LD_INT 1
23709: NEG
23710: PUSH
23711: LD_INT 3
23713: NEG
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: PUSH
23719: LD_INT 1
23721: PUSH
23722: LD_INT 2
23724: NEG
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: PUSH
23730: LD_INT 3
23732: PUSH
23733: LD_INT 2
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: PUSH
23740: LD_INT 2
23742: PUSH
23743: LD_INT 3
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: PUSH
23750: LD_INT 2
23752: NEG
23753: PUSH
23754: LD_INT 1
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: PUSH
23761: LD_INT 3
23763: NEG
23764: PUSH
23765: LD_INT 1
23767: NEG
23768: PUSH
23769: EMPTY
23770: LIST
23771: LIST
23772: PUSH
23773: EMPTY
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23798: LD_ADDR_VAR 0 35
23802: PUSH
23803: LD_INT 0
23805: PUSH
23806: LD_INT 0
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PUSH
23813: LD_INT 0
23815: PUSH
23816: LD_INT 1
23818: NEG
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: PUSH
23824: LD_INT 1
23826: PUSH
23827: LD_INT 0
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: LD_INT 1
23836: PUSH
23837: LD_INT 1
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 0
23846: PUSH
23847: LD_INT 1
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: PUSH
23854: LD_INT 1
23856: NEG
23857: PUSH
23858: LD_INT 0
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: LD_INT 1
23867: NEG
23868: PUSH
23869: LD_INT 1
23871: NEG
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: PUSH
23877: LD_INT 2
23879: PUSH
23880: LD_INT 1
23882: PUSH
23883: EMPTY
23884: LIST
23885: LIST
23886: PUSH
23887: LD_INT 2
23889: NEG
23890: PUSH
23891: LD_INT 1
23893: NEG
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23910: LD_ADDR_VAR 0 36
23914: PUSH
23915: LD_INT 0
23917: PUSH
23918: LD_INT 0
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 0
23927: PUSH
23928: LD_INT 1
23930: NEG
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: PUSH
23936: LD_INT 1
23938: PUSH
23939: LD_INT 0
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: PUSH
23946: LD_INT 1
23948: PUSH
23949: LD_INT 1
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PUSH
23956: LD_INT 0
23958: PUSH
23959: LD_INT 1
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: PUSH
23966: LD_INT 1
23968: NEG
23969: PUSH
23970: LD_INT 0
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: PUSH
23977: LD_INT 1
23979: NEG
23980: PUSH
23981: LD_INT 1
23983: NEG
23984: PUSH
23985: EMPTY
23986: LIST
23987: LIST
23988: PUSH
23989: LD_INT 1
23991: NEG
23992: PUSH
23993: LD_INT 2
23995: NEG
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: PUSH
24001: LD_INT 1
24003: PUSH
24004: LD_INT 2
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24022: LD_ADDR_VAR 0 37
24026: PUSH
24027: LD_INT 0
24029: PUSH
24030: LD_INT 0
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PUSH
24037: LD_INT 0
24039: PUSH
24040: LD_INT 1
24042: NEG
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: PUSH
24048: LD_INT 1
24050: PUSH
24051: LD_INT 0
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: PUSH
24058: LD_INT 1
24060: PUSH
24061: LD_INT 1
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 0
24070: PUSH
24071: LD_INT 1
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 1
24080: NEG
24081: PUSH
24082: LD_INT 0
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: LD_INT 1
24091: NEG
24092: PUSH
24093: LD_INT 1
24095: NEG
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: PUSH
24101: LD_INT 1
24103: PUSH
24104: LD_INT 1
24106: NEG
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: PUSH
24112: LD_INT 1
24114: NEG
24115: PUSH
24116: LD_INT 1
24118: PUSH
24119: EMPTY
24120: LIST
24121: LIST
24122: PUSH
24123: EMPTY
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24134: LD_ADDR_VAR 0 38
24138: PUSH
24139: LD_INT 0
24141: PUSH
24142: LD_INT 0
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PUSH
24149: LD_INT 0
24151: PUSH
24152: LD_INT 1
24154: NEG
24155: PUSH
24156: EMPTY
24157: LIST
24158: LIST
24159: PUSH
24160: LD_INT 1
24162: PUSH
24163: LD_INT 0
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: PUSH
24170: LD_INT 1
24172: PUSH
24173: LD_INT 1
24175: PUSH
24176: EMPTY
24177: LIST
24178: LIST
24179: PUSH
24180: LD_INT 0
24182: PUSH
24183: LD_INT 1
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PUSH
24190: LD_INT 1
24192: NEG
24193: PUSH
24194: LD_INT 0
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: PUSH
24201: LD_INT 1
24203: NEG
24204: PUSH
24205: LD_INT 1
24207: NEG
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: PUSH
24213: LD_INT 2
24215: PUSH
24216: LD_INT 1
24218: PUSH
24219: EMPTY
24220: LIST
24221: LIST
24222: PUSH
24223: LD_INT 2
24225: NEG
24226: PUSH
24227: LD_INT 1
24229: NEG
24230: PUSH
24231: EMPTY
24232: LIST
24233: LIST
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24246: LD_ADDR_VAR 0 39
24250: PUSH
24251: LD_INT 0
24253: PUSH
24254: LD_INT 0
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: PUSH
24261: LD_INT 0
24263: PUSH
24264: LD_INT 1
24266: NEG
24267: PUSH
24268: EMPTY
24269: LIST
24270: LIST
24271: PUSH
24272: LD_INT 1
24274: PUSH
24275: LD_INT 0
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: PUSH
24282: LD_INT 1
24284: PUSH
24285: LD_INT 1
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: PUSH
24292: LD_INT 0
24294: PUSH
24295: LD_INT 1
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: PUSH
24302: LD_INT 1
24304: NEG
24305: PUSH
24306: LD_INT 0
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: PUSH
24313: LD_INT 1
24315: NEG
24316: PUSH
24317: LD_INT 1
24319: NEG
24320: PUSH
24321: EMPTY
24322: LIST
24323: LIST
24324: PUSH
24325: LD_INT 1
24327: NEG
24328: PUSH
24329: LD_INT 2
24331: NEG
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: PUSH
24337: LD_INT 1
24339: PUSH
24340: LD_INT 2
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: PUSH
24347: EMPTY
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24358: LD_ADDR_VAR 0 40
24362: PUSH
24363: LD_INT 0
24365: PUSH
24366: LD_INT 0
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PUSH
24373: LD_INT 0
24375: PUSH
24376: LD_INT 1
24378: NEG
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: PUSH
24384: LD_INT 1
24386: PUSH
24387: LD_INT 0
24389: PUSH
24390: EMPTY
24391: LIST
24392: LIST
24393: PUSH
24394: LD_INT 1
24396: PUSH
24397: LD_INT 1
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: PUSH
24404: LD_INT 0
24406: PUSH
24407: LD_INT 1
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: PUSH
24414: LD_INT 1
24416: NEG
24417: PUSH
24418: LD_INT 0
24420: PUSH
24421: EMPTY
24422: LIST
24423: LIST
24424: PUSH
24425: LD_INT 1
24427: NEG
24428: PUSH
24429: LD_INT 1
24431: NEG
24432: PUSH
24433: EMPTY
24434: LIST
24435: LIST
24436: PUSH
24437: LD_INT 1
24439: PUSH
24440: LD_INT 1
24442: NEG
24443: PUSH
24444: EMPTY
24445: LIST
24446: LIST
24447: PUSH
24448: LD_INT 1
24450: NEG
24451: PUSH
24452: LD_INT 1
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24470: LD_ADDR_VAR 0 41
24474: PUSH
24475: LD_INT 0
24477: PUSH
24478: LD_INT 0
24480: PUSH
24481: EMPTY
24482: LIST
24483: LIST
24484: PUSH
24485: LD_INT 0
24487: PUSH
24488: LD_INT 1
24490: NEG
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: PUSH
24496: LD_INT 1
24498: PUSH
24499: LD_INT 0
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: PUSH
24506: LD_INT 1
24508: PUSH
24509: LD_INT 1
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: PUSH
24516: LD_INT 0
24518: PUSH
24519: LD_INT 1
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: PUSH
24526: LD_INT 1
24528: NEG
24529: PUSH
24530: LD_INT 0
24532: PUSH
24533: EMPTY
24534: LIST
24535: LIST
24536: PUSH
24537: LD_INT 1
24539: NEG
24540: PUSH
24541: LD_INT 1
24543: NEG
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: PUSH
24549: LD_INT 1
24551: NEG
24552: PUSH
24553: LD_INT 2
24555: NEG
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: PUSH
24561: LD_INT 1
24563: PUSH
24564: LD_INT 1
24566: NEG
24567: PUSH
24568: EMPTY
24569: LIST
24570: LIST
24571: PUSH
24572: LD_INT 2
24574: PUSH
24575: LD_INT 0
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: PUSH
24582: LD_INT 2
24584: PUSH
24585: LD_INT 1
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: PUSH
24592: LD_INT 2
24594: PUSH
24595: LD_INT 2
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PUSH
24602: LD_INT 1
24604: PUSH
24605: LD_INT 2
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: PUSH
24612: LD_INT 1
24614: NEG
24615: PUSH
24616: LD_INT 1
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: PUSH
24623: LD_INT 2
24625: NEG
24626: PUSH
24627: LD_INT 0
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: LD_INT 2
24636: NEG
24637: PUSH
24638: LD_INT 1
24640: NEG
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PUSH
24646: LD_INT 2
24648: NEG
24649: PUSH
24650: LD_INT 2
24652: NEG
24653: PUSH
24654: EMPTY
24655: LIST
24656: LIST
24657: PUSH
24658: LD_INT 2
24660: NEG
24661: PUSH
24662: LD_INT 3
24664: NEG
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: PUSH
24670: LD_INT 2
24672: PUSH
24673: LD_INT 1
24675: NEG
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PUSH
24681: LD_INT 3
24683: PUSH
24684: LD_INT 0
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: PUSH
24691: LD_INT 3
24693: PUSH
24694: LD_INT 1
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: PUSH
24701: LD_INT 3
24703: PUSH
24704: LD_INT 2
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: LD_INT 3
24713: PUSH
24714: LD_INT 3
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: LD_INT 2
24723: PUSH
24724: LD_INT 3
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: PUSH
24731: LD_INT 2
24733: NEG
24734: PUSH
24735: LD_INT 1
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PUSH
24742: LD_INT 3
24744: NEG
24745: PUSH
24746: LD_INT 0
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PUSH
24753: LD_INT 3
24755: NEG
24756: PUSH
24757: LD_INT 1
24759: NEG
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: PUSH
24765: LD_INT 3
24767: NEG
24768: PUSH
24769: LD_INT 2
24771: NEG
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: PUSH
24777: LD_INT 3
24779: NEG
24780: PUSH
24781: LD_INT 3
24783: NEG
24784: PUSH
24785: EMPTY
24786: LIST
24787: LIST
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24820: LD_ADDR_VAR 0 42
24824: PUSH
24825: LD_INT 0
24827: PUSH
24828: LD_INT 0
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: PUSH
24835: LD_INT 0
24837: PUSH
24838: LD_INT 1
24840: NEG
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: PUSH
24846: LD_INT 1
24848: PUSH
24849: LD_INT 0
24851: PUSH
24852: EMPTY
24853: LIST
24854: LIST
24855: PUSH
24856: LD_INT 1
24858: PUSH
24859: LD_INT 1
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: PUSH
24866: LD_INT 0
24868: PUSH
24869: LD_INT 1
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: LD_INT 1
24878: NEG
24879: PUSH
24880: LD_INT 0
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: PUSH
24887: LD_INT 1
24889: NEG
24890: PUSH
24891: LD_INT 1
24893: NEG
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PUSH
24899: LD_INT 1
24901: NEG
24902: PUSH
24903: LD_INT 2
24905: NEG
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: PUSH
24911: LD_INT 0
24913: PUSH
24914: LD_INT 2
24916: NEG
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: PUSH
24922: LD_INT 1
24924: PUSH
24925: LD_INT 1
24927: NEG
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PUSH
24933: LD_INT 2
24935: PUSH
24936: LD_INT 1
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: PUSH
24943: LD_INT 2
24945: PUSH
24946: LD_INT 2
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PUSH
24953: LD_INT 1
24955: PUSH
24956: LD_INT 2
24958: PUSH
24959: EMPTY
24960: LIST
24961: LIST
24962: PUSH
24963: LD_INT 0
24965: PUSH
24966: LD_INT 2
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: PUSH
24973: LD_INT 1
24975: NEG
24976: PUSH
24977: LD_INT 1
24979: PUSH
24980: EMPTY
24981: LIST
24982: LIST
24983: PUSH
24984: LD_INT 2
24986: NEG
24987: PUSH
24988: LD_INT 1
24990: NEG
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: PUSH
24996: LD_INT 2
24998: NEG
24999: PUSH
25000: LD_INT 2
25002: NEG
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: PUSH
25008: LD_INT 2
25010: NEG
25011: PUSH
25012: LD_INT 3
25014: NEG
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: LD_INT 1
25022: NEG
25023: PUSH
25024: LD_INT 3
25026: NEG
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: LD_INT 0
25034: PUSH
25035: LD_INT 3
25037: NEG
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: LD_INT 1
25045: PUSH
25046: LD_INT 2
25048: NEG
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: LD_INT 3
25056: PUSH
25057: LD_INT 2
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: PUSH
25064: LD_INT 3
25066: PUSH
25067: LD_INT 3
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PUSH
25074: LD_INT 2
25076: PUSH
25077: LD_INT 3
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: PUSH
25084: LD_INT 1
25086: PUSH
25087: LD_INT 3
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: PUSH
25094: LD_INT 0
25096: PUSH
25097: LD_INT 3
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: LD_INT 1
25106: NEG
25107: PUSH
25108: LD_INT 2
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: PUSH
25115: LD_INT 3
25117: NEG
25118: PUSH
25119: LD_INT 2
25121: NEG
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: PUSH
25127: LD_INT 3
25129: NEG
25130: PUSH
25131: LD_INT 3
25133: NEG
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25170: LD_ADDR_VAR 0 43
25174: PUSH
25175: LD_INT 0
25177: PUSH
25178: LD_INT 0
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: LD_INT 0
25187: PUSH
25188: LD_INT 1
25190: NEG
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 1
25198: PUSH
25199: LD_INT 0
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: PUSH
25206: LD_INT 1
25208: PUSH
25209: LD_INT 1
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 0
25218: PUSH
25219: LD_INT 1
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: PUSH
25226: LD_INT 1
25228: NEG
25229: PUSH
25230: LD_INT 0
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PUSH
25237: LD_INT 1
25239: NEG
25240: PUSH
25241: LD_INT 1
25243: NEG
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PUSH
25249: LD_INT 1
25251: NEG
25252: PUSH
25253: LD_INT 2
25255: NEG
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: PUSH
25261: LD_INT 0
25263: PUSH
25264: LD_INT 2
25266: NEG
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: PUSH
25272: LD_INT 1
25274: PUSH
25275: LD_INT 1
25277: NEG
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: LD_INT 2
25285: PUSH
25286: LD_INT 0
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: LD_INT 2
25295: PUSH
25296: LD_INT 1
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PUSH
25303: LD_INT 1
25305: PUSH
25306: LD_INT 2
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: PUSH
25313: LD_INT 0
25315: PUSH
25316: LD_INT 2
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: PUSH
25323: LD_INT 1
25325: NEG
25326: PUSH
25327: LD_INT 1
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: PUSH
25334: LD_INT 2
25336: NEG
25337: PUSH
25338: LD_INT 0
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: LD_INT 2
25347: NEG
25348: PUSH
25349: LD_INT 1
25351: NEG
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: PUSH
25357: LD_INT 1
25359: NEG
25360: PUSH
25361: LD_INT 3
25363: NEG
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: PUSH
25369: LD_INT 0
25371: PUSH
25372: LD_INT 3
25374: NEG
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: PUSH
25380: LD_INT 1
25382: PUSH
25383: LD_INT 2
25385: NEG
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: PUSH
25391: LD_INT 2
25393: PUSH
25394: LD_INT 1
25396: NEG
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: LD_INT 3
25404: PUSH
25405: LD_INT 0
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: LD_INT 3
25414: PUSH
25415: LD_INT 1
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: LD_INT 1
25424: PUSH
25425: LD_INT 3
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: LD_INT 0
25434: PUSH
25435: LD_INT 3
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: LD_INT 1
25444: NEG
25445: PUSH
25446: LD_INT 2
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: PUSH
25453: LD_INT 2
25455: NEG
25456: PUSH
25457: LD_INT 1
25459: PUSH
25460: EMPTY
25461: LIST
25462: LIST
25463: PUSH
25464: LD_INT 3
25466: NEG
25467: PUSH
25468: LD_INT 0
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: PUSH
25475: LD_INT 3
25477: NEG
25478: PUSH
25479: LD_INT 1
25481: NEG
25482: PUSH
25483: EMPTY
25484: LIST
25485: LIST
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25518: LD_ADDR_VAR 0 44
25522: PUSH
25523: LD_INT 0
25525: PUSH
25526: LD_INT 0
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: LD_INT 0
25535: PUSH
25536: LD_INT 1
25538: NEG
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: PUSH
25544: LD_INT 1
25546: PUSH
25547: LD_INT 0
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: PUSH
25554: LD_INT 1
25556: PUSH
25557: LD_INT 1
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: PUSH
25564: LD_INT 0
25566: PUSH
25567: LD_INT 1
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: LD_INT 1
25576: NEG
25577: PUSH
25578: LD_INT 0
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: PUSH
25585: LD_INT 1
25587: NEG
25588: PUSH
25589: LD_INT 1
25591: NEG
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PUSH
25597: LD_INT 1
25599: NEG
25600: PUSH
25601: LD_INT 2
25603: NEG
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PUSH
25609: LD_INT 1
25611: PUSH
25612: LD_INT 1
25614: NEG
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: PUSH
25620: LD_INT 2
25622: PUSH
25623: LD_INT 0
25625: PUSH
25626: EMPTY
25627: LIST
25628: LIST
25629: PUSH
25630: LD_INT 2
25632: PUSH
25633: LD_INT 1
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: PUSH
25640: LD_INT 2
25642: PUSH
25643: LD_INT 2
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: LD_INT 1
25652: PUSH
25653: LD_INT 2
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: PUSH
25660: LD_INT 1
25662: NEG
25663: PUSH
25664: LD_INT 1
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PUSH
25671: LD_INT 2
25673: NEG
25674: PUSH
25675: LD_INT 0
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: LD_INT 2
25684: NEG
25685: PUSH
25686: LD_INT 1
25688: NEG
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PUSH
25694: LD_INT 2
25696: NEG
25697: PUSH
25698: LD_INT 2
25700: NEG
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: PUSH
25706: LD_INT 2
25708: NEG
25709: PUSH
25710: LD_INT 3
25712: NEG
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: PUSH
25718: LD_INT 2
25720: PUSH
25721: LD_INT 1
25723: NEG
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: LD_INT 3
25731: PUSH
25732: LD_INT 0
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: LD_INT 3
25741: PUSH
25742: LD_INT 1
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PUSH
25749: LD_INT 3
25751: PUSH
25752: LD_INT 2
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: LD_INT 3
25761: PUSH
25762: LD_INT 3
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: LD_INT 2
25771: PUSH
25772: LD_INT 3
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: PUSH
25779: LD_INT 2
25781: NEG
25782: PUSH
25783: LD_INT 1
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PUSH
25790: LD_INT 3
25792: NEG
25793: PUSH
25794: LD_INT 0
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: LD_INT 3
25803: NEG
25804: PUSH
25805: LD_INT 1
25807: NEG
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PUSH
25813: LD_INT 3
25815: NEG
25816: PUSH
25817: LD_INT 2
25819: NEG
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: PUSH
25825: LD_INT 3
25827: NEG
25828: PUSH
25829: LD_INT 3
25831: NEG
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25868: LD_ADDR_VAR 0 45
25872: PUSH
25873: LD_INT 0
25875: PUSH
25876: LD_INT 0
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: PUSH
25883: LD_INT 0
25885: PUSH
25886: LD_INT 1
25888: NEG
25889: PUSH
25890: EMPTY
25891: LIST
25892: LIST
25893: PUSH
25894: LD_INT 1
25896: PUSH
25897: LD_INT 0
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: PUSH
25904: LD_INT 1
25906: PUSH
25907: LD_INT 1
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: LD_INT 0
25916: PUSH
25917: LD_INT 1
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: LD_INT 1
25926: NEG
25927: PUSH
25928: LD_INT 0
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PUSH
25935: LD_INT 1
25937: NEG
25938: PUSH
25939: LD_INT 1
25941: NEG
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PUSH
25947: LD_INT 1
25949: NEG
25950: PUSH
25951: LD_INT 2
25953: NEG
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PUSH
25959: LD_INT 0
25961: PUSH
25962: LD_INT 2
25964: NEG
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PUSH
25970: LD_INT 1
25972: PUSH
25973: LD_INT 1
25975: NEG
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PUSH
25981: LD_INT 2
25983: PUSH
25984: LD_INT 1
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PUSH
25991: LD_INT 2
25993: PUSH
25994: LD_INT 2
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: PUSH
26001: LD_INT 1
26003: PUSH
26004: LD_INT 2
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: PUSH
26011: LD_INT 0
26013: PUSH
26014: LD_INT 2
26016: PUSH
26017: EMPTY
26018: LIST
26019: LIST
26020: PUSH
26021: LD_INT 1
26023: NEG
26024: PUSH
26025: LD_INT 1
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: PUSH
26032: LD_INT 2
26034: NEG
26035: PUSH
26036: LD_INT 1
26038: NEG
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: PUSH
26044: LD_INT 2
26046: NEG
26047: PUSH
26048: LD_INT 2
26050: NEG
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PUSH
26056: LD_INT 2
26058: NEG
26059: PUSH
26060: LD_INT 3
26062: NEG
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: LD_INT 1
26070: NEG
26071: PUSH
26072: LD_INT 3
26074: NEG
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: LD_INT 0
26082: PUSH
26083: LD_INT 3
26085: NEG
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: PUSH
26091: LD_INT 1
26093: PUSH
26094: LD_INT 2
26096: NEG
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: PUSH
26102: LD_INT 3
26104: PUSH
26105: LD_INT 2
26107: PUSH
26108: EMPTY
26109: LIST
26110: LIST
26111: PUSH
26112: LD_INT 3
26114: PUSH
26115: LD_INT 3
26117: PUSH
26118: EMPTY
26119: LIST
26120: LIST
26121: PUSH
26122: LD_INT 2
26124: PUSH
26125: LD_INT 3
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: PUSH
26132: LD_INT 1
26134: PUSH
26135: LD_INT 3
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: PUSH
26142: LD_INT 0
26144: PUSH
26145: LD_INT 3
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: PUSH
26152: LD_INT 1
26154: NEG
26155: PUSH
26156: LD_INT 2
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: PUSH
26163: LD_INT 3
26165: NEG
26166: PUSH
26167: LD_INT 2
26169: NEG
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: PUSH
26175: LD_INT 3
26177: NEG
26178: PUSH
26179: LD_INT 3
26181: NEG
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: LIST
26199: LIST
26200: LIST
26201: LIST
26202: LIST
26203: LIST
26204: LIST
26205: LIST
26206: LIST
26207: LIST
26208: LIST
26209: LIST
26210: LIST
26211: LIST
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: LIST
26217: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26218: LD_ADDR_VAR 0 46
26222: PUSH
26223: LD_INT 0
26225: PUSH
26226: LD_INT 0
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: LD_INT 0
26235: PUSH
26236: LD_INT 1
26238: NEG
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: PUSH
26244: LD_INT 1
26246: PUSH
26247: LD_INT 0
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: PUSH
26254: LD_INT 1
26256: PUSH
26257: LD_INT 1
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: PUSH
26264: LD_INT 0
26266: PUSH
26267: LD_INT 1
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: PUSH
26274: LD_INT 1
26276: NEG
26277: PUSH
26278: LD_INT 0
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: PUSH
26285: LD_INT 1
26287: NEG
26288: PUSH
26289: LD_INT 1
26291: NEG
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: PUSH
26297: LD_INT 1
26299: NEG
26300: PUSH
26301: LD_INT 2
26303: NEG
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PUSH
26309: LD_INT 0
26311: PUSH
26312: LD_INT 2
26314: NEG
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PUSH
26320: LD_INT 1
26322: PUSH
26323: LD_INT 1
26325: NEG
26326: PUSH
26327: EMPTY
26328: LIST
26329: LIST
26330: PUSH
26331: LD_INT 2
26333: PUSH
26334: LD_INT 0
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: PUSH
26341: LD_INT 2
26343: PUSH
26344: LD_INT 1
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: LD_INT 1
26353: PUSH
26354: LD_INT 2
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 0
26363: PUSH
26364: LD_INT 2
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 1
26373: NEG
26374: PUSH
26375: LD_INT 1
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: PUSH
26382: LD_INT 2
26384: NEG
26385: PUSH
26386: LD_INT 0
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: PUSH
26393: LD_INT 2
26395: NEG
26396: PUSH
26397: LD_INT 1
26399: NEG
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PUSH
26405: LD_INT 1
26407: NEG
26408: PUSH
26409: LD_INT 3
26411: NEG
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: LD_INT 0
26419: PUSH
26420: LD_INT 3
26422: NEG
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 1
26430: PUSH
26431: LD_INT 2
26433: NEG
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: PUSH
26439: LD_INT 2
26441: PUSH
26442: LD_INT 1
26444: NEG
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: PUSH
26450: LD_INT 3
26452: PUSH
26453: LD_INT 0
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: LD_INT 3
26462: PUSH
26463: LD_INT 1
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PUSH
26470: LD_INT 1
26472: PUSH
26473: LD_INT 3
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: LD_INT 0
26482: PUSH
26483: LD_INT 3
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: PUSH
26490: LD_INT 1
26492: NEG
26493: PUSH
26494: LD_INT 2
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: LD_INT 2
26503: NEG
26504: PUSH
26505: LD_INT 1
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: LD_INT 3
26514: NEG
26515: PUSH
26516: LD_INT 0
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: PUSH
26523: LD_INT 3
26525: NEG
26526: PUSH
26527: LD_INT 1
26529: NEG
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26566: LD_ADDR_VAR 0 47
26570: PUSH
26571: LD_INT 0
26573: PUSH
26574: LD_INT 0
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PUSH
26581: LD_INT 0
26583: PUSH
26584: LD_INT 1
26586: NEG
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: PUSH
26592: LD_INT 1
26594: PUSH
26595: LD_INT 0
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: PUSH
26602: LD_INT 1
26604: PUSH
26605: LD_INT 1
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: PUSH
26612: LD_INT 0
26614: PUSH
26615: LD_INT 1
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: PUSH
26622: LD_INT 1
26624: NEG
26625: PUSH
26626: LD_INT 0
26628: PUSH
26629: EMPTY
26630: LIST
26631: LIST
26632: PUSH
26633: LD_INT 1
26635: NEG
26636: PUSH
26637: LD_INT 1
26639: NEG
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: PUSH
26645: LD_INT 1
26647: NEG
26648: PUSH
26649: LD_INT 2
26651: NEG
26652: PUSH
26653: EMPTY
26654: LIST
26655: LIST
26656: PUSH
26657: LD_INT 0
26659: PUSH
26660: LD_INT 2
26662: NEG
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: PUSH
26668: LD_INT 1
26670: PUSH
26671: LD_INT 1
26673: NEG
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: PUSH
26679: LD_INT 2
26681: NEG
26682: PUSH
26683: LD_INT 1
26685: NEG
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: PUSH
26691: LD_INT 2
26693: NEG
26694: PUSH
26695: LD_INT 2
26697: NEG
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26717: LD_ADDR_VAR 0 48
26721: PUSH
26722: LD_INT 0
26724: PUSH
26725: LD_INT 0
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: PUSH
26732: LD_INT 0
26734: PUSH
26735: LD_INT 1
26737: NEG
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PUSH
26743: LD_INT 1
26745: PUSH
26746: LD_INT 0
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PUSH
26753: LD_INT 1
26755: PUSH
26756: LD_INT 1
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: PUSH
26763: LD_INT 0
26765: PUSH
26766: LD_INT 1
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: PUSH
26773: LD_INT 1
26775: NEG
26776: PUSH
26777: LD_INT 0
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: PUSH
26784: LD_INT 1
26786: NEG
26787: PUSH
26788: LD_INT 1
26790: NEG
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: PUSH
26796: LD_INT 1
26798: NEG
26799: PUSH
26800: LD_INT 2
26802: NEG
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: LD_INT 0
26810: PUSH
26811: LD_INT 2
26813: NEG
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: LD_INT 1
26821: PUSH
26822: LD_INT 1
26824: NEG
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: PUSH
26830: LD_INT 2
26832: PUSH
26833: LD_INT 0
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: LD_INT 2
26842: PUSH
26843: LD_INT 1
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: LIST
26860: LIST
26861: LIST
26862: LIST
26863: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26864: LD_ADDR_VAR 0 49
26868: PUSH
26869: LD_INT 0
26871: PUSH
26872: LD_INT 0
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: LD_INT 0
26881: PUSH
26882: LD_INT 1
26884: NEG
26885: PUSH
26886: EMPTY
26887: LIST
26888: LIST
26889: PUSH
26890: LD_INT 1
26892: PUSH
26893: LD_INT 0
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: PUSH
26900: LD_INT 1
26902: PUSH
26903: LD_INT 1
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PUSH
26910: LD_INT 0
26912: PUSH
26913: LD_INT 1
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 1
26922: NEG
26923: PUSH
26924: LD_INT 0
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: LD_INT 1
26933: NEG
26934: PUSH
26935: LD_INT 1
26937: NEG
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PUSH
26943: LD_INT 1
26945: PUSH
26946: LD_INT 1
26948: NEG
26949: PUSH
26950: EMPTY
26951: LIST
26952: LIST
26953: PUSH
26954: LD_INT 2
26956: PUSH
26957: LD_INT 0
26959: PUSH
26960: EMPTY
26961: LIST
26962: LIST
26963: PUSH
26964: LD_INT 2
26966: PUSH
26967: LD_INT 1
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PUSH
26974: LD_INT 2
26976: PUSH
26977: LD_INT 2
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: PUSH
26984: LD_INT 1
26986: PUSH
26987: LD_INT 2
26989: PUSH
26990: EMPTY
26991: LIST
26992: LIST
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27008: LD_ADDR_VAR 0 50
27012: PUSH
27013: LD_INT 0
27015: PUSH
27016: LD_INT 0
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: PUSH
27023: LD_INT 0
27025: PUSH
27026: LD_INT 1
27028: NEG
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: PUSH
27034: LD_INT 1
27036: PUSH
27037: LD_INT 0
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: LD_INT 1
27046: PUSH
27047: LD_INT 1
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: LD_INT 0
27056: PUSH
27057: LD_INT 1
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PUSH
27064: LD_INT 1
27066: NEG
27067: PUSH
27068: LD_INT 0
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 1
27077: NEG
27078: PUSH
27079: LD_INT 1
27081: NEG
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: PUSH
27087: LD_INT 2
27089: PUSH
27090: LD_INT 1
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: PUSH
27097: LD_INT 2
27099: PUSH
27100: LD_INT 2
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: LD_INT 1
27109: PUSH
27110: LD_INT 2
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: LD_INT 0
27119: PUSH
27120: LD_INT 2
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 1
27129: NEG
27130: PUSH
27131: LD_INT 1
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27152: LD_ADDR_VAR 0 51
27156: PUSH
27157: LD_INT 0
27159: PUSH
27160: LD_INT 0
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PUSH
27167: LD_INT 0
27169: PUSH
27170: LD_INT 1
27172: NEG
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: PUSH
27178: LD_INT 1
27180: PUSH
27181: LD_INT 0
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: PUSH
27188: LD_INT 1
27190: PUSH
27191: LD_INT 1
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: PUSH
27198: LD_INT 0
27200: PUSH
27201: LD_INT 1
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: PUSH
27208: LD_INT 1
27210: NEG
27211: PUSH
27212: LD_INT 0
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PUSH
27219: LD_INT 1
27221: NEG
27222: PUSH
27223: LD_INT 1
27225: NEG
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PUSH
27231: LD_INT 1
27233: PUSH
27234: LD_INT 2
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: PUSH
27241: LD_INT 0
27243: PUSH
27244: LD_INT 2
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PUSH
27251: LD_INT 1
27253: NEG
27254: PUSH
27255: LD_INT 1
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: PUSH
27262: LD_INT 2
27264: NEG
27265: PUSH
27266: LD_INT 0
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: PUSH
27273: LD_INT 2
27275: NEG
27276: PUSH
27277: LD_INT 1
27279: NEG
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27299: LD_ADDR_VAR 0 52
27303: PUSH
27304: LD_INT 0
27306: PUSH
27307: LD_INT 0
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 0
27316: PUSH
27317: LD_INT 1
27319: NEG
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: LD_INT 1
27327: PUSH
27328: LD_INT 0
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: LD_INT 1
27337: PUSH
27338: LD_INT 1
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: LD_INT 0
27347: PUSH
27348: LD_INT 1
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: PUSH
27355: LD_INT 1
27357: NEG
27358: PUSH
27359: LD_INT 0
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: PUSH
27366: LD_INT 1
27368: NEG
27369: PUSH
27370: LD_INT 1
27372: NEG
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: PUSH
27378: LD_INT 1
27380: NEG
27381: PUSH
27382: LD_INT 2
27384: NEG
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: PUSH
27390: LD_INT 1
27392: NEG
27393: PUSH
27394: LD_INT 1
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: LD_INT 2
27403: NEG
27404: PUSH
27405: LD_INT 0
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: PUSH
27412: LD_INT 2
27414: NEG
27415: PUSH
27416: LD_INT 1
27418: NEG
27419: PUSH
27420: EMPTY
27421: LIST
27422: LIST
27423: PUSH
27424: LD_INT 2
27426: NEG
27427: PUSH
27428: LD_INT 2
27430: NEG
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27450: LD_ADDR_VAR 0 53
27454: PUSH
27455: LD_INT 0
27457: PUSH
27458: LD_INT 0
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 0
27467: PUSH
27468: LD_INT 1
27470: NEG
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: PUSH
27476: LD_INT 1
27478: PUSH
27479: LD_INT 0
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PUSH
27486: LD_INT 1
27488: PUSH
27489: LD_INT 1
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: PUSH
27496: LD_INT 0
27498: PUSH
27499: LD_INT 1
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PUSH
27506: LD_INT 1
27508: NEG
27509: PUSH
27510: LD_INT 0
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PUSH
27517: LD_INT 1
27519: NEG
27520: PUSH
27521: LD_INT 1
27523: NEG
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: PUSH
27529: LD_INT 1
27531: NEG
27532: PUSH
27533: LD_INT 2
27535: NEG
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: LD_INT 0
27543: PUSH
27544: LD_INT 2
27546: NEG
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: LD_INT 1
27554: PUSH
27555: LD_INT 1
27557: NEG
27558: PUSH
27559: EMPTY
27560: LIST
27561: LIST
27562: PUSH
27563: LD_INT 2
27565: PUSH
27566: LD_INT 0
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: PUSH
27573: LD_INT 2
27575: PUSH
27576: LD_INT 1
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PUSH
27583: LD_INT 2
27585: PUSH
27586: LD_INT 2
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: PUSH
27593: LD_INT 1
27595: PUSH
27596: LD_INT 2
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 0
27605: PUSH
27606: LD_INT 2
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 1
27615: NEG
27616: PUSH
27617: LD_INT 1
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: PUSH
27624: LD_INT 2
27626: NEG
27627: PUSH
27628: LD_INT 0
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: PUSH
27635: LD_INT 2
27637: NEG
27638: PUSH
27639: LD_INT 1
27641: NEG
27642: PUSH
27643: EMPTY
27644: LIST
27645: LIST
27646: PUSH
27647: LD_INT 2
27649: NEG
27650: PUSH
27651: LD_INT 2
27653: NEG
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27680: LD_ADDR_VAR 0 54
27684: PUSH
27685: LD_INT 0
27687: PUSH
27688: LD_INT 0
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PUSH
27695: LD_INT 0
27697: PUSH
27698: LD_INT 1
27700: NEG
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: PUSH
27706: LD_INT 1
27708: PUSH
27709: LD_INT 0
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: PUSH
27716: LD_INT 1
27718: PUSH
27719: LD_INT 1
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: PUSH
27726: LD_INT 0
27728: PUSH
27729: LD_INT 1
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: LD_INT 1
27738: NEG
27739: PUSH
27740: LD_INT 0
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_INT 1
27749: NEG
27750: PUSH
27751: LD_INT 1
27753: NEG
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: PUSH
27759: LD_INT 1
27761: NEG
27762: PUSH
27763: LD_INT 2
27765: NEG
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: PUSH
27771: LD_INT 0
27773: PUSH
27774: LD_INT 2
27776: NEG
27777: PUSH
27778: EMPTY
27779: LIST
27780: LIST
27781: PUSH
27782: LD_INT 1
27784: PUSH
27785: LD_INT 1
27787: NEG
27788: PUSH
27789: EMPTY
27790: LIST
27791: LIST
27792: PUSH
27793: LD_INT 2
27795: PUSH
27796: LD_INT 0
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: PUSH
27803: LD_INT 2
27805: PUSH
27806: LD_INT 1
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: PUSH
27813: LD_INT 2
27815: PUSH
27816: LD_INT 2
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: PUSH
27823: LD_INT 1
27825: PUSH
27826: LD_INT 2
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: PUSH
27833: LD_INT 0
27835: PUSH
27836: LD_INT 2
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: PUSH
27843: LD_INT 1
27845: NEG
27846: PUSH
27847: LD_INT 1
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: PUSH
27854: LD_INT 2
27856: NEG
27857: PUSH
27858: LD_INT 0
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: PUSH
27865: LD_INT 2
27867: NEG
27868: PUSH
27869: LD_INT 1
27871: NEG
27872: PUSH
27873: EMPTY
27874: LIST
27875: LIST
27876: PUSH
27877: LD_INT 2
27879: NEG
27880: PUSH
27881: LD_INT 2
27883: NEG
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: LIST
27893: LIST
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27910: LD_ADDR_VAR 0 55
27914: PUSH
27915: LD_INT 0
27917: PUSH
27918: LD_INT 0
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: LD_INT 0
27927: PUSH
27928: LD_INT 1
27930: NEG
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: PUSH
27936: LD_INT 1
27938: PUSH
27939: LD_INT 0
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: PUSH
27946: LD_INT 1
27948: PUSH
27949: LD_INT 1
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: PUSH
27956: LD_INT 0
27958: PUSH
27959: LD_INT 1
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: PUSH
27966: LD_INT 1
27968: NEG
27969: PUSH
27970: LD_INT 0
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PUSH
27977: LD_INT 1
27979: NEG
27980: PUSH
27981: LD_INT 1
27983: NEG
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: LD_INT 1
27991: NEG
27992: PUSH
27993: LD_INT 2
27995: NEG
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PUSH
28001: LD_INT 0
28003: PUSH
28004: LD_INT 2
28006: NEG
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: PUSH
28012: LD_INT 1
28014: PUSH
28015: LD_INT 1
28017: NEG
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: LD_INT 2
28025: PUSH
28026: LD_INT 0
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PUSH
28033: LD_INT 2
28035: PUSH
28036: LD_INT 1
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PUSH
28043: LD_INT 2
28045: PUSH
28046: LD_INT 2
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PUSH
28053: LD_INT 1
28055: PUSH
28056: LD_INT 2
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: LD_INT 0
28065: PUSH
28066: LD_INT 2
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: PUSH
28073: LD_INT 1
28075: NEG
28076: PUSH
28077: LD_INT 1
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: PUSH
28084: LD_INT 2
28086: NEG
28087: PUSH
28088: LD_INT 0
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: PUSH
28095: LD_INT 2
28097: NEG
28098: PUSH
28099: LD_INT 1
28101: NEG
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: PUSH
28107: LD_INT 2
28109: NEG
28110: PUSH
28111: LD_INT 2
28113: NEG
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: LIST
28123: LIST
28124: LIST
28125: LIST
28126: LIST
28127: LIST
28128: LIST
28129: LIST
28130: LIST
28131: LIST
28132: LIST
28133: LIST
28134: LIST
28135: LIST
28136: LIST
28137: LIST
28138: LIST
28139: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28140: LD_ADDR_VAR 0 56
28144: PUSH
28145: LD_INT 0
28147: PUSH
28148: LD_INT 0
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: LD_INT 0
28157: PUSH
28158: LD_INT 1
28160: NEG
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PUSH
28166: LD_INT 1
28168: PUSH
28169: LD_INT 0
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: PUSH
28176: LD_INT 1
28178: PUSH
28179: LD_INT 1
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: PUSH
28186: LD_INT 0
28188: PUSH
28189: LD_INT 1
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: LD_INT 1
28198: NEG
28199: PUSH
28200: LD_INT 0
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PUSH
28207: LD_INT 1
28209: NEG
28210: PUSH
28211: LD_INT 1
28213: NEG
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: PUSH
28219: LD_INT 1
28221: NEG
28222: PUSH
28223: LD_INT 2
28225: NEG
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 0
28233: PUSH
28234: LD_INT 2
28236: NEG
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: LD_INT 1
28244: PUSH
28245: LD_INT 1
28247: NEG
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: PUSH
28253: LD_INT 2
28255: PUSH
28256: LD_INT 0
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PUSH
28263: LD_INT 2
28265: PUSH
28266: LD_INT 1
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: PUSH
28273: LD_INT 2
28275: PUSH
28276: LD_INT 2
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: PUSH
28283: LD_INT 1
28285: PUSH
28286: LD_INT 2
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: PUSH
28293: LD_INT 0
28295: PUSH
28296: LD_INT 2
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PUSH
28303: LD_INT 1
28305: NEG
28306: PUSH
28307: LD_INT 1
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: PUSH
28314: LD_INT 2
28316: NEG
28317: PUSH
28318: LD_INT 0
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: PUSH
28325: LD_INT 2
28327: NEG
28328: PUSH
28329: LD_INT 1
28331: NEG
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: PUSH
28337: LD_INT 2
28339: NEG
28340: PUSH
28341: LD_INT 2
28343: NEG
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: LIST
28353: LIST
28354: LIST
28355: LIST
28356: LIST
28357: LIST
28358: LIST
28359: LIST
28360: LIST
28361: LIST
28362: LIST
28363: LIST
28364: LIST
28365: LIST
28366: LIST
28367: LIST
28368: LIST
28369: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28370: LD_ADDR_VAR 0 57
28374: PUSH
28375: LD_INT 0
28377: PUSH
28378: LD_INT 0
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: PUSH
28385: LD_INT 0
28387: PUSH
28388: LD_INT 1
28390: NEG
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: PUSH
28396: LD_INT 1
28398: PUSH
28399: LD_INT 0
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: PUSH
28406: LD_INT 1
28408: PUSH
28409: LD_INT 1
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: PUSH
28416: LD_INT 0
28418: PUSH
28419: LD_INT 1
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PUSH
28426: LD_INT 1
28428: NEG
28429: PUSH
28430: LD_INT 0
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 1
28439: NEG
28440: PUSH
28441: LD_INT 1
28443: NEG
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 1
28451: NEG
28452: PUSH
28453: LD_INT 2
28455: NEG
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: LD_INT 0
28463: PUSH
28464: LD_INT 2
28466: NEG
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: LD_INT 1
28474: PUSH
28475: LD_INT 1
28477: NEG
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: LD_INT 2
28485: PUSH
28486: LD_INT 0
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: LD_INT 2
28495: PUSH
28496: LD_INT 1
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 2
28505: PUSH
28506: LD_INT 2
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PUSH
28513: LD_INT 1
28515: PUSH
28516: LD_INT 2
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: PUSH
28523: LD_INT 0
28525: PUSH
28526: LD_INT 2
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: PUSH
28533: LD_INT 1
28535: NEG
28536: PUSH
28537: LD_INT 1
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: PUSH
28544: LD_INT 2
28546: NEG
28547: PUSH
28548: LD_INT 0
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: PUSH
28555: LD_INT 2
28557: NEG
28558: PUSH
28559: LD_INT 1
28561: NEG
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: LD_INT 2
28569: NEG
28570: PUSH
28571: LD_INT 2
28573: NEG
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28600: LD_ADDR_VAR 0 58
28604: PUSH
28605: LD_INT 0
28607: PUSH
28608: LD_INT 0
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: PUSH
28615: LD_INT 0
28617: PUSH
28618: LD_INT 1
28620: NEG
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: PUSH
28626: LD_INT 1
28628: PUSH
28629: LD_INT 0
28631: PUSH
28632: EMPTY
28633: LIST
28634: LIST
28635: PUSH
28636: LD_INT 1
28638: PUSH
28639: LD_INT 1
28641: PUSH
28642: EMPTY
28643: LIST
28644: LIST
28645: PUSH
28646: LD_INT 0
28648: PUSH
28649: LD_INT 1
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: PUSH
28656: LD_INT 1
28658: NEG
28659: PUSH
28660: LD_INT 0
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PUSH
28667: LD_INT 1
28669: NEG
28670: PUSH
28671: LD_INT 1
28673: NEG
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 1
28681: NEG
28682: PUSH
28683: LD_INT 2
28685: NEG
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 0
28693: PUSH
28694: LD_INT 2
28696: NEG
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 1
28704: PUSH
28705: LD_INT 1
28707: NEG
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: LD_INT 2
28715: PUSH
28716: LD_INT 0
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: LD_INT 2
28725: PUSH
28726: LD_INT 1
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: LD_INT 2
28735: PUSH
28736: LD_INT 2
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: PUSH
28743: LD_INT 1
28745: PUSH
28746: LD_INT 2
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: LD_INT 0
28755: PUSH
28756: LD_INT 2
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: PUSH
28763: LD_INT 1
28765: NEG
28766: PUSH
28767: LD_INT 1
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PUSH
28774: LD_INT 2
28776: NEG
28777: PUSH
28778: LD_INT 0
28780: PUSH
28781: EMPTY
28782: LIST
28783: LIST
28784: PUSH
28785: LD_INT 2
28787: NEG
28788: PUSH
28789: LD_INT 1
28791: NEG
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: LD_INT 2
28799: NEG
28800: PUSH
28801: LD_INT 2
28803: NEG
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: LIST
28813: LIST
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28830: LD_ADDR_VAR 0 59
28834: PUSH
28835: LD_INT 0
28837: PUSH
28838: LD_INT 0
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: PUSH
28845: LD_INT 0
28847: PUSH
28848: LD_INT 1
28850: NEG
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: PUSH
28856: LD_INT 1
28858: PUSH
28859: LD_INT 0
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PUSH
28866: LD_INT 1
28868: PUSH
28869: LD_INT 1
28871: PUSH
28872: EMPTY
28873: LIST
28874: LIST
28875: PUSH
28876: LD_INT 0
28878: PUSH
28879: LD_INT 1
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: PUSH
28886: LD_INT 1
28888: NEG
28889: PUSH
28890: LD_INT 0
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: PUSH
28897: LD_INT 1
28899: NEG
28900: PUSH
28901: LD_INT 1
28903: NEG
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: LIST
28913: LIST
28914: LIST
28915: LIST
28916: LIST
28917: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28918: LD_ADDR_VAR 0 60
28922: PUSH
28923: LD_INT 0
28925: PUSH
28926: LD_INT 0
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: PUSH
28933: LD_INT 0
28935: PUSH
28936: LD_INT 1
28938: NEG
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: PUSH
28944: LD_INT 1
28946: PUSH
28947: LD_INT 0
28949: PUSH
28950: EMPTY
28951: LIST
28952: LIST
28953: PUSH
28954: LD_INT 1
28956: PUSH
28957: LD_INT 1
28959: PUSH
28960: EMPTY
28961: LIST
28962: LIST
28963: PUSH
28964: LD_INT 0
28966: PUSH
28967: LD_INT 1
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: PUSH
28974: LD_INT 1
28976: NEG
28977: PUSH
28978: LD_INT 0
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PUSH
28985: LD_INT 1
28987: NEG
28988: PUSH
28989: LD_INT 1
28991: NEG
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: LIST
29001: LIST
29002: LIST
29003: LIST
29004: LIST
29005: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29006: LD_ADDR_VAR 0 61
29010: PUSH
29011: LD_INT 0
29013: PUSH
29014: LD_INT 0
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: PUSH
29021: LD_INT 0
29023: PUSH
29024: LD_INT 1
29026: NEG
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: PUSH
29032: LD_INT 1
29034: PUSH
29035: LD_INT 0
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: PUSH
29042: LD_INT 1
29044: PUSH
29045: LD_INT 1
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PUSH
29052: LD_INT 0
29054: PUSH
29055: LD_INT 1
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: PUSH
29062: LD_INT 1
29064: NEG
29065: PUSH
29066: LD_INT 0
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: PUSH
29073: LD_INT 1
29075: NEG
29076: PUSH
29077: LD_INT 1
29079: NEG
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PUSH
29085: EMPTY
29086: LIST
29087: LIST
29088: LIST
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29094: LD_ADDR_VAR 0 62
29098: PUSH
29099: LD_INT 0
29101: PUSH
29102: LD_INT 0
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: PUSH
29109: LD_INT 0
29111: PUSH
29112: LD_INT 1
29114: NEG
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: LD_INT 1
29122: PUSH
29123: LD_INT 0
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: PUSH
29130: LD_INT 1
29132: PUSH
29133: LD_INT 1
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PUSH
29140: LD_INT 0
29142: PUSH
29143: LD_INT 1
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: LD_INT 1
29152: NEG
29153: PUSH
29154: LD_INT 0
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: PUSH
29161: LD_INT 1
29163: NEG
29164: PUSH
29165: LD_INT 1
29167: NEG
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29182: LD_ADDR_VAR 0 63
29186: PUSH
29187: LD_INT 0
29189: PUSH
29190: LD_INT 0
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: LD_INT 0
29199: PUSH
29200: LD_INT 1
29202: NEG
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PUSH
29208: LD_INT 1
29210: PUSH
29211: LD_INT 0
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: PUSH
29218: LD_INT 1
29220: PUSH
29221: LD_INT 1
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PUSH
29228: LD_INT 0
29230: PUSH
29231: LD_INT 1
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PUSH
29238: LD_INT 1
29240: NEG
29241: PUSH
29242: LD_INT 0
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PUSH
29249: LD_INT 1
29251: NEG
29252: PUSH
29253: LD_INT 1
29255: NEG
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: LIST
29265: LIST
29266: LIST
29267: LIST
29268: LIST
29269: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29270: LD_ADDR_VAR 0 64
29274: PUSH
29275: LD_INT 0
29277: PUSH
29278: LD_INT 0
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 0
29287: PUSH
29288: LD_INT 1
29290: NEG
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: LD_INT 1
29298: PUSH
29299: LD_INT 0
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: LD_INT 1
29308: PUSH
29309: LD_INT 1
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PUSH
29316: LD_INT 0
29318: PUSH
29319: LD_INT 1
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: PUSH
29326: LD_INT 1
29328: NEG
29329: PUSH
29330: LD_INT 0
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: PUSH
29337: LD_INT 1
29339: NEG
29340: PUSH
29341: LD_INT 1
29343: NEG
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: LIST
29353: LIST
29354: LIST
29355: LIST
29356: LIST
29357: ST_TO_ADDR
// end ; 1 :
29358: GO 35255
29360: LD_INT 1
29362: DOUBLE
29363: EQUAL
29364: IFTRUE 29368
29366: GO 31991
29368: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29369: LD_ADDR_VAR 0 11
29373: PUSH
29374: LD_INT 1
29376: NEG
29377: PUSH
29378: LD_INT 3
29380: NEG
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: PUSH
29386: LD_INT 0
29388: PUSH
29389: LD_INT 3
29391: NEG
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PUSH
29397: LD_INT 1
29399: PUSH
29400: LD_INT 2
29402: NEG
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: LIST
29412: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29413: LD_ADDR_VAR 0 12
29417: PUSH
29418: LD_INT 2
29420: PUSH
29421: LD_INT 1
29423: NEG
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: LD_INT 3
29431: PUSH
29432: LD_INT 0
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PUSH
29439: LD_INT 3
29441: PUSH
29442: LD_INT 1
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: LIST
29453: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29454: LD_ADDR_VAR 0 13
29458: PUSH
29459: LD_INT 3
29461: PUSH
29462: LD_INT 2
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 3
29471: PUSH
29472: LD_INT 3
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: LD_INT 2
29481: PUSH
29482: LD_INT 3
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: LIST
29493: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29494: LD_ADDR_VAR 0 14
29498: PUSH
29499: LD_INT 1
29501: PUSH
29502: LD_INT 3
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: PUSH
29509: LD_INT 0
29511: PUSH
29512: LD_INT 3
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: PUSH
29519: LD_INT 1
29521: NEG
29522: PUSH
29523: LD_INT 2
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: LIST
29534: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29535: LD_ADDR_VAR 0 15
29539: PUSH
29540: LD_INT 2
29542: NEG
29543: PUSH
29544: LD_INT 1
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: PUSH
29551: LD_INT 3
29553: NEG
29554: PUSH
29555: LD_INT 0
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: PUSH
29562: LD_INT 3
29564: NEG
29565: PUSH
29566: LD_INT 1
29568: NEG
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: LIST
29578: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29579: LD_ADDR_VAR 0 16
29583: PUSH
29584: LD_INT 2
29586: NEG
29587: PUSH
29588: LD_INT 3
29590: NEG
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: PUSH
29596: LD_INT 3
29598: NEG
29599: PUSH
29600: LD_INT 2
29602: NEG
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PUSH
29608: LD_INT 3
29610: NEG
29611: PUSH
29612: LD_INT 3
29614: NEG
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: LIST
29624: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29625: LD_ADDR_VAR 0 17
29629: PUSH
29630: LD_INT 1
29632: NEG
29633: PUSH
29634: LD_INT 3
29636: NEG
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: PUSH
29642: LD_INT 0
29644: PUSH
29645: LD_INT 3
29647: NEG
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PUSH
29653: LD_INT 1
29655: PUSH
29656: LD_INT 2
29658: NEG
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: LIST
29668: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29669: LD_ADDR_VAR 0 18
29673: PUSH
29674: LD_INT 2
29676: PUSH
29677: LD_INT 1
29679: NEG
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: LD_INT 3
29687: PUSH
29688: LD_INT 0
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 3
29697: PUSH
29698: LD_INT 1
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: LIST
29709: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29710: LD_ADDR_VAR 0 19
29714: PUSH
29715: LD_INT 3
29717: PUSH
29718: LD_INT 2
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 3
29727: PUSH
29728: LD_INT 3
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: PUSH
29735: LD_INT 2
29737: PUSH
29738: LD_INT 3
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: LIST
29749: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29750: LD_ADDR_VAR 0 20
29754: PUSH
29755: LD_INT 1
29757: PUSH
29758: LD_INT 3
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: LD_INT 0
29767: PUSH
29768: LD_INT 3
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: LD_INT 1
29777: NEG
29778: PUSH
29779: LD_INT 2
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: LIST
29790: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29791: LD_ADDR_VAR 0 21
29795: PUSH
29796: LD_INT 2
29798: NEG
29799: PUSH
29800: LD_INT 1
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: LD_INT 3
29809: NEG
29810: PUSH
29811: LD_INT 0
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: LD_INT 3
29820: NEG
29821: PUSH
29822: LD_INT 1
29824: NEG
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: LIST
29834: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29835: LD_ADDR_VAR 0 22
29839: PUSH
29840: LD_INT 2
29842: NEG
29843: PUSH
29844: LD_INT 3
29846: NEG
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 3
29854: NEG
29855: PUSH
29856: LD_INT 2
29858: NEG
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: PUSH
29864: LD_INT 3
29866: NEG
29867: PUSH
29868: LD_INT 3
29870: NEG
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: LIST
29880: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29881: LD_ADDR_VAR 0 23
29885: PUSH
29886: LD_INT 0
29888: PUSH
29889: LD_INT 3
29891: NEG
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 1
29899: NEG
29900: PUSH
29901: LD_INT 4
29903: NEG
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PUSH
29909: LD_INT 1
29911: PUSH
29912: LD_INT 3
29914: NEG
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: LIST
29924: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29925: LD_ADDR_VAR 0 24
29929: PUSH
29930: LD_INT 3
29932: PUSH
29933: LD_INT 0
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: PUSH
29940: LD_INT 3
29942: PUSH
29943: LD_INT 1
29945: NEG
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: LD_INT 4
29953: PUSH
29954: LD_INT 1
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: LIST
29965: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29966: LD_ADDR_VAR 0 25
29970: PUSH
29971: LD_INT 3
29973: PUSH
29974: LD_INT 3
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: LD_INT 4
29983: PUSH
29984: LD_INT 3
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PUSH
29991: LD_INT 3
29993: PUSH
29994: LD_INT 4
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: LIST
30005: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30006: LD_ADDR_VAR 0 26
30010: PUSH
30011: LD_INT 0
30013: PUSH
30014: LD_INT 3
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: PUSH
30021: LD_INT 1
30023: PUSH
30024: LD_INT 4
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: PUSH
30031: LD_INT 1
30033: NEG
30034: PUSH
30035: LD_INT 3
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: LIST
30046: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30047: LD_ADDR_VAR 0 27
30051: PUSH
30052: LD_INT 3
30054: NEG
30055: PUSH
30056: LD_INT 0
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 3
30065: NEG
30066: PUSH
30067: LD_INT 1
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: LD_INT 4
30076: NEG
30077: PUSH
30078: LD_INT 1
30080: NEG
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: LIST
30090: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30091: LD_ADDR_VAR 0 28
30095: PUSH
30096: LD_INT 3
30098: NEG
30099: PUSH
30100: LD_INT 3
30102: NEG
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: LD_INT 3
30110: NEG
30111: PUSH
30112: LD_INT 4
30114: NEG
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: PUSH
30120: LD_INT 4
30122: NEG
30123: PUSH
30124: LD_INT 3
30126: NEG
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PUSH
30132: EMPTY
30133: LIST
30134: LIST
30135: LIST
30136: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30137: LD_ADDR_VAR 0 29
30141: PUSH
30142: LD_INT 1
30144: NEG
30145: PUSH
30146: LD_INT 3
30148: NEG
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: PUSH
30154: LD_INT 0
30156: PUSH
30157: LD_INT 3
30159: NEG
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: LD_INT 1
30167: PUSH
30168: LD_INT 2
30170: NEG
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: PUSH
30176: LD_INT 1
30178: NEG
30179: PUSH
30180: LD_INT 4
30182: NEG
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: PUSH
30188: LD_INT 0
30190: PUSH
30191: LD_INT 4
30193: NEG
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: LD_INT 1
30201: PUSH
30202: LD_INT 3
30204: NEG
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: LD_INT 1
30212: NEG
30213: PUSH
30214: LD_INT 5
30216: NEG
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: PUSH
30222: LD_INT 0
30224: PUSH
30225: LD_INT 5
30227: NEG
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: PUSH
30233: LD_INT 1
30235: PUSH
30236: LD_INT 4
30238: NEG
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: PUSH
30244: LD_INT 1
30246: NEG
30247: PUSH
30248: LD_INT 6
30250: NEG
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PUSH
30256: LD_INT 0
30258: PUSH
30259: LD_INT 6
30261: NEG
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: PUSH
30267: LD_INT 1
30269: PUSH
30270: LD_INT 5
30272: NEG
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: LIST
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30292: LD_ADDR_VAR 0 30
30296: PUSH
30297: LD_INT 2
30299: PUSH
30300: LD_INT 1
30302: NEG
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: LD_INT 3
30310: PUSH
30311: LD_INT 0
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: PUSH
30318: LD_INT 3
30320: PUSH
30321: LD_INT 1
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: PUSH
30328: LD_INT 3
30330: PUSH
30331: LD_INT 1
30333: NEG
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: PUSH
30339: LD_INT 4
30341: PUSH
30342: LD_INT 0
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: PUSH
30349: LD_INT 4
30351: PUSH
30352: LD_INT 1
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PUSH
30359: LD_INT 4
30361: PUSH
30362: LD_INT 1
30364: NEG
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 5
30372: PUSH
30373: LD_INT 0
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: LD_INT 5
30382: PUSH
30383: LD_INT 1
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: LD_INT 5
30392: PUSH
30393: LD_INT 1
30395: NEG
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: PUSH
30401: LD_INT 6
30403: PUSH
30404: LD_INT 0
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: LD_INT 6
30413: PUSH
30414: LD_INT 1
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: LIST
30425: LIST
30426: LIST
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30435: LD_ADDR_VAR 0 31
30439: PUSH
30440: LD_INT 3
30442: PUSH
30443: LD_INT 2
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PUSH
30450: LD_INT 3
30452: PUSH
30453: LD_INT 3
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: PUSH
30460: LD_INT 2
30462: PUSH
30463: LD_INT 3
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: PUSH
30470: LD_INT 4
30472: PUSH
30473: LD_INT 3
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 4
30482: PUSH
30483: LD_INT 4
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PUSH
30490: LD_INT 3
30492: PUSH
30493: LD_INT 4
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 5
30502: PUSH
30503: LD_INT 4
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 5
30512: PUSH
30513: LD_INT 5
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 4
30522: PUSH
30523: LD_INT 5
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: LD_INT 6
30532: PUSH
30533: LD_INT 5
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: LD_INT 6
30542: PUSH
30543: LD_INT 6
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PUSH
30550: LD_INT 5
30552: PUSH
30553: LD_INT 6
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30574: LD_ADDR_VAR 0 32
30578: PUSH
30579: LD_INT 1
30581: PUSH
30582: LD_INT 3
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: PUSH
30589: LD_INT 0
30591: PUSH
30592: LD_INT 3
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PUSH
30599: LD_INT 1
30601: NEG
30602: PUSH
30603: LD_INT 2
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: LD_INT 1
30612: PUSH
30613: LD_INT 4
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 0
30622: PUSH
30623: LD_INT 4
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 1
30632: NEG
30633: PUSH
30634: LD_INT 3
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: LD_INT 1
30643: PUSH
30644: LD_INT 5
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: LD_INT 0
30653: PUSH
30654: LD_INT 5
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 1
30663: NEG
30664: PUSH
30665: LD_INT 4
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: PUSH
30672: LD_INT 1
30674: PUSH
30675: LD_INT 6
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: LD_INT 0
30684: PUSH
30685: LD_INT 6
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: PUSH
30692: LD_INT 1
30694: NEG
30695: PUSH
30696: LD_INT 5
30698: PUSH
30699: EMPTY
30700: LIST
30701: LIST
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30717: LD_ADDR_VAR 0 33
30721: PUSH
30722: LD_INT 2
30724: NEG
30725: PUSH
30726: LD_INT 1
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: LD_INT 3
30735: NEG
30736: PUSH
30737: LD_INT 0
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: LD_INT 3
30746: NEG
30747: PUSH
30748: LD_INT 1
30750: NEG
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 3
30758: NEG
30759: PUSH
30760: LD_INT 1
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: LD_INT 4
30769: NEG
30770: PUSH
30771: LD_INT 0
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: PUSH
30778: LD_INT 4
30780: NEG
30781: PUSH
30782: LD_INT 1
30784: NEG
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: LD_INT 4
30792: NEG
30793: PUSH
30794: LD_INT 1
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: PUSH
30801: LD_INT 5
30803: NEG
30804: PUSH
30805: LD_INT 0
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: PUSH
30812: LD_INT 5
30814: NEG
30815: PUSH
30816: LD_INT 1
30818: NEG
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PUSH
30824: LD_INT 5
30826: NEG
30827: PUSH
30828: LD_INT 1
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: PUSH
30835: LD_INT 6
30837: NEG
30838: PUSH
30839: LD_INT 0
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: PUSH
30846: LD_INT 6
30848: NEG
30849: PUSH
30850: LD_INT 1
30852: NEG
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30872: LD_ADDR_VAR 0 34
30876: PUSH
30877: LD_INT 2
30879: NEG
30880: PUSH
30881: LD_INT 3
30883: NEG
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 3
30891: NEG
30892: PUSH
30893: LD_INT 2
30895: NEG
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: PUSH
30901: LD_INT 3
30903: NEG
30904: PUSH
30905: LD_INT 3
30907: NEG
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: PUSH
30913: LD_INT 3
30915: NEG
30916: PUSH
30917: LD_INT 4
30919: NEG
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: LD_INT 4
30927: NEG
30928: PUSH
30929: LD_INT 3
30931: NEG
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 4
30939: NEG
30940: PUSH
30941: LD_INT 4
30943: NEG
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PUSH
30949: LD_INT 4
30951: NEG
30952: PUSH
30953: LD_INT 5
30955: NEG
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: PUSH
30961: LD_INT 5
30963: NEG
30964: PUSH
30965: LD_INT 4
30967: NEG
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PUSH
30973: LD_INT 5
30975: NEG
30976: PUSH
30977: LD_INT 5
30979: NEG
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 5
30987: NEG
30988: PUSH
30989: LD_INT 6
30991: NEG
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 6
30999: NEG
31000: PUSH
31001: LD_INT 5
31003: NEG
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: PUSH
31009: LD_INT 6
31011: NEG
31012: PUSH
31013: LD_INT 6
31015: NEG
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31035: LD_ADDR_VAR 0 41
31039: PUSH
31040: LD_INT 0
31042: PUSH
31043: LD_INT 2
31045: NEG
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: PUSH
31051: LD_INT 1
31053: NEG
31054: PUSH
31055: LD_INT 3
31057: NEG
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PUSH
31063: LD_INT 1
31065: PUSH
31066: LD_INT 2
31068: NEG
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: LIST
31078: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31079: LD_ADDR_VAR 0 42
31083: PUSH
31084: LD_INT 2
31086: PUSH
31087: LD_INT 0
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PUSH
31094: LD_INT 2
31096: PUSH
31097: LD_INT 1
31099: NEG
31100: PUSH
31101: EMPTY
31102: LIST
31103: LIST
31104: PUSH
31105: LD_INT 3
31107: PUSH
31108: LD_INT 1
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: LIST
31119: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31120: LD_ADDR_VAR 0 43
31124: PUSH
31125: LD_INT 2
31127: PUSH
31128: LD_INT 2
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: PUSH
31135: LD_INT 3
31137: PUSH
31138: LD_INT 2
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PUSH
31145: LD_INT 2
31147: PUSH
31148: LD_INT 3
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: LIST
31159: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31160: LD_ADDR_VAR 0 44
31164: PUSH
31165: LD_INT 0
31167: PUSH
31168: LD_INT 2
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: LD_INT 1
31177: PUSH
31178: LD_INT 3
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: LD_INT 1
31187: NEG
31188: PUSH
31189: LD_INT 2
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: LIST
31200: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31201: LD_ADDR_VAR 0 45
31205: PUSH
31206: LD_INT 2
31208: NEG
31209: PUSH
31210: LD_INT 0
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: LD_INT 2
31219: NEG
31220: PUSH
31221: LD_INT 1
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: LD_INT 3
31230: NEG
31231: PUSH
31232: LD_INT 1
31234: NEG
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: LIST
31244: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31245: LD_ADDR_VAR 0 46
31249: PUSH
31250: LD_INT 2
31252: NEG
31253: PUSH
31254: LD_INT 2
31256: NEG
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 2
31264: NEG
31265: PUSH
31266: LD_INT 3
31268: NEG
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: LD_INT 3
31276: NEG
31277: PUSH
31278: LD_INT 2
31280: NEG
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: LIST
31290: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31291: LD_ADDR_VAR 0 47
31295: PUSH
31296: LD_INT 2
31298: NEG
31299: PUSH
31300: LD_INT 3
31302: NEG
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PUSH
31308: LD_INT 1
31310: NEG
31311: PUSH
31312: LD_INT 3
31314: NEG
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31324: LD_ADDR_VAR 0 48
31328: PUSH
31329: LD_INT 1
31331: PUSH
31332: LD_INT 2
31334: NEG
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: LD_INT 2
31342: PUSH
31343: LD_INT 1
31345: NEG
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31355: LD_ADDR_VAR 0 49
31359: PUSH
31360: LD_INT 3
31362: PUSH
31363: LD_INT 1
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: LD_INT 3
31372: PUSH
31373: LD_INT 2
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31384: LD_ADDR_VAR 0 50
31388: PUSH
31389: LD_INT 2
31391: PUSH
31392: LD_INT 3
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: PUSH
31399: LD_INT 1
31401: PUSH
31402: LD_INT 3
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31413: LD_ADDR_VAR 0 51
31417: PUSH
31418: LD_INT 1
31420: NEG
31421: PUSH
31422: LD_INT 2
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 2
31431: NEG
31432: PUSH
31433: LD_INT 1
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31444: LD_ADDR_VAR 0 52
31448: PUSH
31449: LD_INT 3
31451: NEG
31452: PUSH
31453: LD_INT 1
31455: NEG
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: LD_INT 3
31463: NEG
31464: PUSH
31465: LD_INT 2
31467: NEG
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31477: LD_ADDR_VAR 0 53
31481: PUSH
31482: LD_INT 1
31484: NEG
31485: PUSH
31486: LD_INT 3
31488: NEG
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: LD_INT 0
31496: PUSH
31497: LD_INT 3
31499: NEG
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: PUSH
31505: LD_INT 1
31507: PUSH
31508: LD_INT 2
31510: NEG
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: LIST
31520: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31521: LD_ADDR_VAR 0 54
31525: PUSH
31526: LD_INT 2
31528: PUSH
31529: LD_INT 1
31531: NEG
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PUSH
31537: LD_INT 3
31539: PUSH
31540: LD_INT 0
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: PUSH
31547: LD_INT 3
31549: PUSH
31550: LD_INT 1
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: LIST
31561: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31562: LD_ADDR_VAR 0 55
31566: PUSH
31567: LD_INT 3
31569: PUSH
31570: LD_INT 2
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: LD_INT 3
31579: PUSH
31580: LD_INT 3
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 2
31589: PUSH
31590: LD_INT 3
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: LIST
31601: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31602: LD_ADDR_VAR 0 56
31606: PUSH
31607: LD_INT 1
31609: PUSH
31610: LD_INT 3
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 0
31619: PUSH
31620: LD_INT 3
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 1
31629: NEG
31630: PUSH
31631: LD_INT 2
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: LIST
31642: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31643: LD_ADDR_VAR 0 57
31647: PUSH
31648: LD_INT 2
31650: NEG
31651: PUSH
31652: LD_INT 1
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 3
31661: NEG
31662: PUSH
31663: LD_INT 0
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: PUSH
31670: LD_INT 3
31672: NEG
31673: PUSH
31674: LD_INT 1
31676: NEG
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: LIST
31686: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31687: LD_ADDR_VAR 0 58
31691: PUSH
31692: LD_INT 2
31694: NEG
31695: PUSH
31696: LD_INT 3
31698: NEG
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: PUSH
31704: LD_INT 3
31706: NEG
31707: PUSH
31708: LD_INT 2
31710: NEG
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PUSH
31716: LD_INT 3
31718: NEG
31719: PUSH
31720: LD_INT 3
31722: NEG
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: LIST
31732: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31733: LD_ADDR_VAR 0 59
31737: PUSH
31738: LD_INT 1
31740: NEG
31741: PUSH
31742: LD_INT 2
31744: NEG
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: PUSH
31750: LD_INT 0
31752: PUSH
31753: LD_INT 2
31755: NEG
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PUSH
31761: LD_INT 1
31763: PUSH
31764: LD_INT 1
31766: NEG
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: LIST
31776: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31777: LD_ADDR_VAR 0 60
31781: PUSH
31782: LD_INT 1
31784: PUSH
31785: LD_INT 1
31787: NEG
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: PUSH
31793: LD_INT 2
31795: PUSH
31796: LD_INT 0
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: LD_INT 2
31805: PUSH
31806: LD_INT 1
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: LIST
31817: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31818: LD_ADDR_VAR 0 61
31822: PUSH
31823: LD_INT 2
31825: PUSH
31826: LD_INT 1
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: LD_INT 2
31835: PUSH
31836: LD_INT 2
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: PUSH
31843: LD_INT 1
31845: PUSH
31846: LD_INT 2
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: LIST
31857: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31858: LD_ADDR_VAR 0 62
31862: PUSH
31863: LD_INT 1
31865: PUSH
31866: LD_INT 2
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: LD_INT 0
31875: PUSH
31876: LD_INT 2
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: LD_INT 1
31885: NEG
31886: PUSH
31887: LD_INT 1
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: LIST
31898: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31899: LD_ADDR_VAR 0 63
31903: PUSH
31904: LD_INT 1
31906: NEG
31907: PUSH
31908: LD_INT 1
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: PUSH
31915: LD_INT 2
31917: NEG
31918: PUSH
31919: LD_INT 0
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: LD_INT 2
31928: NEG
31929: PUSH
31930: LD_INT 1
31932: NEG
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: LIST
31942: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31943: LD_ADDR_VAR 0 64
31947: PUSH
31948: LD_INT 1
31950: NEG
31951: PUSH
31952: LD_INT 2
31954: NEG
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 2
31962: NEG
31963: PUSH
31964: LD_INT 1
31966: NEG
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: LD_INT 2
31974: NEG
31975: PUSH
31976: LD_INT 2
31978: NEG
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: LIST
31988: ST_TO_ADDR
// end ; 2 :
31989: GO 35255
31991: LD_INT 2
31993: DOUBLE
31994: EQUAL
31995: IFTRUE 31999
31997: GO 35254
31999: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32000: LD_ADDR_VAR 0 29
32004: PUSH
32005: LD_INT 4
32007: PUSH
32008: LD_INT 0
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PUSH
32015: LD_INT 4
32017: PUSH
32018: LD_INT 1
32020: NEG
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: PUSH
32026: LD_INT 5
32028: PUSH
32029: LD_INT 0
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: PUSH
32036: LD_INT 5
32038: PUSH
32039: LD_INT 1
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 4
32048: PUSH
32049: LD_INT 1
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 3
32058: PUSH
32059: LD_INT 0
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PUSH
32066: LD_INT 3
32068: PUSH
32069: LD_INT 1
32071: NEG
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: LD_INT 3
32079: PUSH
32080: LD_INT 2
32082: NEG
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 5
32090: PUSH
32091: LD_INT 2
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PUSH
32098: LD_INT 3
32100: PUSH
32101: LD_INT 3
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 3
32110: PUSH
32111: LD_INT 2
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: LD_INT 4
32120: PUSH
32121: LD_INT 3
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 4
32130: PUSH
32131: LD_INT 4
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: PUSH
32138: LD_INT 3
32140: PUSH
32141: LD_INT 4
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: PUSH
32148: LD_INT 2
32150: PUSH
32151: LD_INT 3
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 2
32160: PUSH
32161: LD_INT 2
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PUSH
32168: LD_INT 4
32170: PUSH
32171: LD_INT 2
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: PUSH
32178: LD_INT 2
32180: PUSH
32181: LD_INT 4
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PUSH
32188: LD_INT 0
32190: PUSH
32191: LD_INT 4
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 0
32200: PUSH
32201: LD_INT 3
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PUSH
32208: LD_INT 1
32210: PUSH
32211: LD_INT 4
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: LD_INT 1
32220: PUSH
32221: LD_INT 5
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: PUSH
32228: LD_INT 0
32230: PUSH
32231: LD_INT 5
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: LD_INT 1
32240: NEG
32241: PUSH
32242: LD_INT 4
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PUSH
32249: LD_INT 1
32251: NEG
32252: PUSH
32253: LD_INT 3
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: PUSH
32260: LD_INT 2
32262: PUSH
32263: LD_INT 5
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: PUSH
32270: LD_INT 2
32272: NEG
32273: PUSH
32274: LD_INT 3
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: LD_INT 3
32283: NEG
32284: PUSH
32285: LD_INT 0
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: PUSH
32292: LD_INT 3
32294: NEG
32295: PUSH
32296: LD_INT 1
32298: NEG
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 2
32306: NEG
32307: PUSH
32308: LD_INT 0
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: LD_INT 2
32317: NEG
32318: PUSH
32319: LD_INT 1
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: LD_INT 3
32328: NEG
32329: PUSH
32330: LD_INT 1
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: PUSH
32337: LD_INT 4
32339: NEG
32340: PUSH
32341: LD_INT 0
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: LD_INT 4
32350: NEG
32351: PUSH
32352: LD_INT 1
32354: NEG
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: LD_INT 4
32362: NEG
32363: PUSH
32364: LD_INT 2
32366: NEG
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: PUSH
32372: LD_INT 2
32374: NEG
32375: PUSH
32376: LD_INT 2
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: PUSH
32383: LD_INT 4
32385: NEG
32386: PUSH
32387: LD_INT 4
32389: NEG
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 4
32397: NEG
32398: PUSH
32399: LD_INT 5
32401: NEG
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 3
32409: NEG
32410: PUSH
32411: LD_INT 4
32413: NEG
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 3
32421: NEG
32422: PUSH
32423: LD_INT 3
32425: NEG
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PUSH
32431: LD_INT 4
32433: NEG
32434: PUSH
32435: LD_INT 3
32437: NEG
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: PUSH
32443: LD_INT 5
32445: NEG
32446: PUSH
32447: LD_INT 4
32449: NEG
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 5
32457: NEG
32458: PUSH
32459: LD_INT 5
32461: NEG
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: LD_INT 3
32469: NEG
32470: PUSH
32471: LD_INT 5
32473: NEG
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: PUSH
32479: LD_INT 5
32481: NEG
32482: PUSH
32483: LD_INT 3
32485: NEG
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32538: LD_ADDR_VAR 0 30
32542: PUSH
32543: LD_INT 4
32545: PUSH
32546: LD_INT 4
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 4
32555: PUSH
32556: LD_INT 3
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: PUSH
32563: LD_INT 5
32565: PUSH
32566: LD_INT 4
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: PUSH
32573: LD_INT 5
32575: PUSH
32576: LD_INT 5
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: PUSH
32583: LD_INT 4
32585: PUSH
32586: LD_INT 5
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: PUSH
32593: LD_INT 3
32595: PUSH
32596: LD_INT 4
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: PUSH
32603: LD_INT 3
32605: PUSH
32606: LD_INT 3
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PUSH
32613: LD_INT 5
32615: PUSH
32616: LD_INT 3
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: LD_INT 3
32625: PUSH
32626: LD_INT 5
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 0
32635: PUSH
32636: LD_INT 3
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PUSH
32643: LD_INT 0
32645: PUSH
32646: LD_INT 2
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: PUSH
32653: LD_INT 1
32655: PUSH
32656: LD_INT 3
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: PUSH
32663: LD_INT 1
32665: PUSH
32666: LD_INT 4
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: PUSH
32673: LD_INT 0
32675: PUSH
32676: LD_INT 4
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: PUSH
32683: LD_INT 1
32685: NEG
32686: PUSH
32687: LD_INT 3
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PUSH
32694: LD_INT 1
32696: NEG
32697: PUSH
32698: LD_INT 2
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: LD_INT 2
32707: PUSH
32708: LD_INT 4
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: LD_INT 2
32717: NEG
32718: PUSH
32719: LD_INT 2
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 4
32728: NEG
32729: PUSH
32730: LD_INT 0
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: PUSH
32737: LD_INT 4
32739: NEG
32740: PUSH
32741: LD_INT 1
32743: NEG
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 3
32751: NEG
32752: PUSH
32753: LD_INT 0
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 3
32762: NEG
32763: PUSH
32764: LD_INT 1
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 4
32773: NEG
32774: PUSH
32775: LD_INT 1
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: LD_INT 5
32784: NEG
32785: PUSH
32786: LD_INT 0
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: LD_INT 5
32795: NEG
32796: PUSH
32797: LD_INT 1
32799: NEG
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PUSH
32805: LD_INT 5
32807: NEG
32808: PUSH
32809: LD_INT 2
32811: NEG
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PUSH
32817: LD_INT 3
32819: NEG
32820: PUSH
32821: LD_INT 2
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 3
32830: NEG
32831: PUSH
32832: LD_INT 3
32834: NEG
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PUSH
32840: LD_INT 3
32842: NEG
32843: PUSH
32844: LD_INT 4
32846: NEG
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 2
32854: NEG
32855: PUSH
32856: LD_INT 3
32858: NEG
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: PUSH
32864: LD_INT 2
32866: NEG
32867: PUSH
32868: LD_INT 2
32870: NEG
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PUSH
32876: LD_INT 3
32878: NEG
32879: PUSH
32880: LD_INT 2
32882: NEG
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 4
32890: NEG
32891: PUSH
32892: LD_INT 3
32894: NEG
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: PUSH
32900: LD_INT 4
32902: NEG
32903: PUSH
32904: LD_INT 4
32906: NEG
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PUSH
32912: LD_INT 2
32914: NEG
32915: PUSH
32916: LD_INT 4
32918: NEG
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: PUSH
32924: LD_INT 4
32926: NEG
32927: PUSH
32928: LD_INT 2
32930: NEG
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: PUSH
32936: LD_INT 0
32938: PUSH
32939: LD_INT 4
32941: NEG
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: PUSH
32947: LD_INT 0
32949: PUSH
32950: LD_INT 5
32952: NEG
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: LD_INT 1
32960: PUSH
32961: LD_INT 4
32963: NEG
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: PUSH
32969: LD_INT 1
32971: PUSH
32972: LD_INT 3
32974: NEG
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: PUSH
32980: LD_INT 0
32982: PUSH
32983: LD_INT 3
32985: NEG
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: LD_INT 1
32993: NEG
32994: PUSH
32995: LD_INT 4
32997: NEG
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: PUSH
33003: LD_INT 1
33005: NEG
33006: PUSH
33007: LD_INT 5
33009: NEG
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PUSH
33015: LD_INT 2
33017: PUSH
33018: LD_INT 3
33020: NEG
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: PUSH
33026: LD_INT 2
33028: NEG
33029: PUSH
33030: LD_INT 5
33032: NEG
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33085: LD_ADDR_VAR 0 31
33089: PUSH
33090: LD_INT 0
33092: PUSH
33093: LD_INT 4
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: PUSH
33100: LD_INT 0
33102: PUSH
33103: LD_INT 3
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: PUSH
33110: LD_INT 1
33112: PUSH
33113: LD_INT 4
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: PUSH
33120: LD_INT 1
33122: PUSH
33123: LD_INT 5
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: LD_INT 0
33132: PUSH
33133: LD_INT 5
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: LD_INT 1
33142: NEG
33143: PUSH
33144: LD_INT 4
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 1
33153: NEG
33154: PUSH
33155: LD_INT 3
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 2
33164: PUSH
33165: LD_INT 5
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 2
33174: NEG
33175: PUSH
33176: LD_INT 3
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: LD_INT 3
33185: NEG
33186: PUSH
33187: LD_INT 0
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: LD_INT 3
33196: NEG
33197: PUSH
33198: LD_INT 1
33200: NEG
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PUSH
33206: LD_INT 2
33208: NEG
33209: PUSH
33210: LD_INT 0
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 2
33219: NEG
33220: PUSH
33221: LD_INT 1
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: PUSH
33228: LD_INT 3
33230: NEG
33231: PUSH
33232: LD_INT 1
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: LD_INT 4
33241: NEG
33242: PUSH
33243: LD_INT 0
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 4
33252: NEG
33253: PUSH
33254: LD_INT 1
33256: NEG
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 4
33264: NEG
33265: PUSH
33266: LD_INT 2
33268: NEG
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 2
33276: NEG
33277: PUSH
33278: LD_INT 2
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 4
33287: NEG
33288: PUSH
33289: LD_INT 4
33291: NEG
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 4
33299: NEG
33300: PUSH
33301: LD_INT 5
33303: NEG
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 3
33311: NEG
33312: PUSH
33313: LD_INT 4
33315: NEG
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 3
33323: NEG
33324: PUSH
33325: LD_INT 3
33327: NEG
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: PUSH
33333: LD_INT 4
33335: NEG
33336: PUSH
33337: LD_INT 3
33339: NEG
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: PUSH
33345: LD_INT 5
33347: NEG
33348: PUSH
33349: LD_INT 4
33351: NEG
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 5
33359: NEG
33360: PUSH
33361: LD_INT 5
33363: NEG
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: PUSH
33369: LD_INT 3
33371: NEG
33372: PUSH
33373: LD_INT 5
33375: NEG
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 5
33383: NEG
33384: PUSH
33385: LD_INT 3
33387: NEG
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 0
33395: PUSH
33396: LD_INT 3
33398: NEG
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PUSH
33404: LD_INT 0
33406: PUSH
33407: LD_INT 4
33409: NEG
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: PUSH
33415: LD_INT 1
33417: PUSH
33418: LD_INT 3
33420: NEG
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: PUSH
33426: LD_INT 1
33428: PUSH
33429: LD_INT 2
33431: NEG
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: LD_INT 0
33439: PUSH
33440: LD_INT 2
33442: NEG
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 1
33450: NEG
33451: PUSH
33452: LD_INT 3
33454: NEG
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: LD_INT 1
33462: NEG
33463: PUSH
33464: LD_INT 4
33466: NEG
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: PUSH
33472: LD_INT 2
33474: PUSH
33475: LD_INT 2
33477: NEG
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: PUSH
33483: LD_INT 2
33485: NEG
33486: PUSH
33487: LD_INT 4
33489: NEG
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: PUSH
33495: LD_INT 4
33497: PUSH
33498: LD_INT 0
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: LD_INT 4
33507: PUSH
33508: LD_INT 1
33510: NEG
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: PUSH
33516: LD_INT 5
33518: PUSH
33519: LD_INT 0
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: PUSH
33526: LD_INT 5
33528: PUSH
33529: LD_INT 1
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: LD_INT 4
33538: PUSH
33539: LD_INT 1
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: PUSH
33546: LD_INT 3
33548: PUSH
33549: LD_INT 0
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: PUSH
33556: LD_INT 3
33558: PUSH
33559: LD_INT 1
33561: NEG
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: PUSH
33567: LD_INT 3
33569: PUSH
33570: LD_INT 2
33572: NEG
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 5
33580: PUSH
33581: LD_INT 2
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: LIST
33634: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33635: LD_ADDR_VAR 0 32
33639: PUSH
33640: LD_INT 4
33642: NEG
33643: PUSH
33644: LD_INT 0
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: PUSH
33651: LD_INT 4
33653: NEG
33654: PUSH
33655: LD_INT 1
33657: NEG
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: PUSH
33663: LD_INT 3
33665: NEG
33666: PUSH
33667: LD_INT 0
33669: PUSH
33670: EMPTY
33671: LIST
33672: LIST
33673: PUSH
33674: LD_INT 3
33676: NEG
33677: PUSH
33678: LD_INT 1
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 4
33687: NEG
33688: PUSH
33689: LD_INT 1
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: LD_INT 5
33698: NEG
33699: PUSH
33700: LD_INT 0
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 5
33709: NEG
33710: PUSH
33711: LD_INT 1
33713: NEG
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: LD_INT 5
33721: NEG
33722: PUSH
33723: LD_INT 2
33725: NEG
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PUSH
33731: LD_INT 3
33733: NEG
33734: PUSH
33735: LD_INT 2
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: PUSH
33742: LD_INT 3
33744: NEG
33745: PUSH
33746: LD_INT 3
33748: NEG
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PUSH
33754: LD_INT 3
33756: NEG
33757: PUSH
33758: LD_INT 4
33760: NEG
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 2
33768: NEG
33769: PUSH
33770: LD_INT 3
33772: NEG
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PUSH
33778: LD_INT 2
33780: NEG
33781: PUSH
33782: LD_INT 2
33784: NEG
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: LD_INT 3
33792: NEG
33793: PUSH
33794: LD_INT 2
33796: NEG
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 4
33804: NEG
33805: PUSH
33806: LD_INT 3
33808: NEG
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 4
33816: NEG
33817: PUSH
33818: LD_INT 4
33820: NEG
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: LD_INT 2
33828: NEG
33829: PUSH
33830: LD_INT 4
33832: NEG
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: LD_INT 4
33840: NEG
33841: PUSH
33842: LD_INT 2
33844: NEG
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PUSH
33850: LD_INT 0
33852: PUSH
33853: LD_INT 4
33855: NEG
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PUSH
33861: LD_INT 0
33863: PUSH
33864: LD_INT 5
33866: NEG
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: PUSH
33872: LD_INT 1
33874: PUSH
33875: LD_INT 4
33877: NEG
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: PUSH
33883: LD_INT 1
33885: PUSH
33886: LD_INT 3
33888: NEG
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: PUSH
33894: LD_INT 0
33896: PUSH
33897: LD_INT 3
33899: NEG
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: PUSH
33905: LD_INT 1
33907: NEG
33908: PUSH
33909: LD_INT 4
33911: NEG
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: PUSH
33917: LD_INT 1
33919: NEG
33920: PUSH
33921: LD_INT 5
33923: NEG
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: LD_INT 2
33931: PUSH
33932: LD_INT 3
33934: NEG
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: PUSH
33940: LD_INT 2
33942: NEG
33943: PUSH
33944: LD_INT 5
33946: NEG
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: PUSH
33952: LD_INT 3
33954: PUSH
33955: LD_INT 0
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: PUSH
33962: LD_INT 3
33964: PUSH
33965: LD_INT 1
33967: NEG
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: LD_INT 4
33975: PUSH
33976: LD_INT 0
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: LD_INT 4
33985: PUSH
33986: LD_INT 1
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 3
33995: PUSH
33996: LD_INT 1
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PUSH
34003: LD_INT 2
34005: PUSH
34006: LD_INT 0
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PUSH
34013: LD_INT 2
34015: PUSH
34016: LD_INT 1
34018: NEG
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: PUSH
34024: LD_INT 2
34026: PUSH
34027: LD_INT 2
34029: NEG
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: LD_INT 4
34037: PUSH
34038: LD_INT 2
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: PUSH
34045: LD_INT 4
34047: PUSH
34048: LD_INT 4
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: PUSH
34055: LD_INT 4
34057: PUSH
34058: LD_INT 3
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 5
34067: PUSH
34068: LD_INT 4
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 5
34077: PUSH
34078: LD_INT 5
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: LD_INT 4
34087: PUSH
34088: LD_INT 5
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: PUSH
34095: LD_INT 3
34097: PUSH
34098: LD_INT 4
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 3
34107: PUSH
34108: LD_INT 3
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: PUSH
34115: LD_INT 5
34117: PUSH
34118: LD_INT 3
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: PUSH
34125: LD_INT 3
34127: PUSH
34128: LD_INT 5
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: LIST
34168: LIST
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34182: LD_ADDR_VAR 0 33
34186: PUSH
34187: LD_INT 4
34189: NEG
34190: PUSH
34191: LD_INT 4
34193: NEG
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: PUSH
34199: LD_INT 4
34201: NEG
34202: PUSH
34203: LD_INT 5
34205: NEG
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PUSH
34211: LD_INT 3
34213: NEG
34214: PUSH
34215: LD_INT 4
34217: NEG
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 3
34225: NEG
34226: PUSH
34227: LD_INT 3
34229: NEG
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PUSH
34235: LD_INT 4
34237: NEG
34238: PUSH
34239: LD_INT 3
34241: NEG
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PUSH
34247: LD_INT 5
34249: NEG
34250: PUSH
34251: LD_INT 4
34253: NEG
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: PUSH
34259: LD_INT 5
34261: NEG
34262: PUSH
34263: LD_INT 5
34265: NEG
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: LD_INT 3
34273: NEG
34274: PUSH
34275: LD_INT 5
34277: NEG
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: LD_INT 5
34285: NEG
34286: PUSH
34287: LD_INT 3
34289: NEG
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: PUSH
34295: LD_INT 0
34297: PUSH
34298: LD_INT 3
34300: NEG
34301: PUSH
34302: EMPTY
34303: LIST
34304: LIST
34305: PUSH
34306: LD_INT 0
34308: PUSH
34309: LD_INT 4
34311: NEG
34312: PUSH
34313: EMPTY
34314: LIST
34315: LIST
34316: PUSH
34317: LD_INT 1
34319: PUSH
34320: LD_INT 3
34322: NEG
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PUSH
34328: LD_INT 1
34330: PUSH
34331: LD_INT 2
34333: NEG
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: PUSH
34339: LD_INT 0
34341: PUSH
34342: LD_INT 2
34344: NEG
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 1
34352: NEG
34353: PUSH
34354: LD_INT 3
34356: NEG
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 1
34364: NEG
34365: PUSH
34366: LD_INT 4
34368: NEG
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: PUSH
34374: LD_INT 2
34376: PUSH
34377: LD_INT 2
34379: NEG
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: PUSH
34385: LD_INT 2
34387: NEG
34388: PUSH
34389: LD_INT 4
34391: NEG
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: PUSH
34397: LD_INT 4
34399: PUSH
34400: LD_INT 0
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: LD_INT 4
34409: PUSH
34410: LD_INT 1
34412: NEG
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: PUSH
34418: LD_INT 5
34420: PUSH
34421: LD_INT 0
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 5
34430: PUSH
34431: LD_INT 1
34433: PUSH
34434: EMPTY
34435: LIST
34436: LIST
34437: PUSH
34438: LD_INT 4
34440: PUSH
34441: LD_INT 1
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: PUSH
34448: LD_INT 3
34450: PUSH
34451: LD_INT 0
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: LD_INT 3
34460: PUSH
34461: LD_INT 1
34463: NEG
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: PUSH
34469: LD_INT 3
34471: PUSH
34472: LD_INT 2
34474: NEG
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: LD_INT 5
34482: PUSH
34483: LD_INT 2
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: PUSH
34490: LD_INT 3
34492: PUSH
34493: LD_INT 3
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 3
34502: PUSH
34503: LD_INT 2
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: LD_INT 4
34512: PUSH
34513: LD_INT 3
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: LD_INT 4
34522: PUSH
34523: LD_INT 4
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 3
34532: PUSH
34533: LD_INT 4
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 2
34542: PUSH
34543: LD_INT 3
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: LD_INT 2
34552: PUSH
34553: LD_INT 2
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: LD_INT 4
34562: PUSH
34563: LD_INT 2
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PUSH
34570: LD_INT 2
34572: PUSH
34573: LD_INT 4
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: LD_INT 0
34582: PUSH
34583: LD_INT 4
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: LD_INT 0
34592: PUSH
34593: LD_INT 3
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 1
34602: PUSH
34603: LD_INT 4
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: PUSH
34610: LD_INT 1
34612: PUSH
34613: LD_INT 5
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: LD_INT 0
34622: PUSH
34623: LD_INT 5
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: LD_INT 1
34632: NEG
34633: PUSH
34634: LD_INT 4
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: LD_INT 1
34643: NEG
34644: PUSH
34645: LD_INT 3
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 2
34654: PUSH
34655: LD_INT 5
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: LD_INT 2
34664: NEG
34665: PUSH
34666: LD_INT 3
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34720: LD_ADDR_VAR 0 34
34724: PUSH
34725: LD_INT 0
34727: PUSH
34728: LD_INT 4
34730: NEG
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 0
34738: PUSH
34739: LD_INT 5
34741: NEG
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 1
34749: PUSH
34750: LD_INT 4
34752: NEG
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PUSH
34758: LD_INT 1
34760: PUSH
34761: LD_INT 3
34763: NEG
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: PUSH
34769: LD_INT 0
34771: PUSH
34772: LD_INT 3
34774: NEG
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PUSH
34780: LD_INT 1
34782: NEG
34783: PUSH
34784: LD_INT 4
34786: NEG
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: PUSH
34792: LD_INT 1
34794: NEG
34795: PUSH
34796: LD_INT 5
34798: NEG
34799: PUSH
34800: EMPTY
34801: LIST
34802: LIST
34803: PUSH
34804: LD_INT 2
34806: PUSH
34807: LD_INT 3
34809: NEG
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 2
34817: NEG
34818: PUSH
34819: LD_INT 5
34821: NEG
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: LD_INT 3
34829: PUSH
34830: LD_INT 0
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 3
34839: PUSH
34840: LD_INT 1
34842: NEG
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: LD_INT 4
34850: PUSH
34851: LD_INT 0
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: PUSH
34858: LD_INT 4
34860: PUSH
34861: LD_INT 1
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: LD_INT 3
34870: PUSH
34871: LD_INT 1
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_INT 2
34880: PUSH
34881: LD_INT 0
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: LD_INT 2
34890: PUSH
34891: LD_INT 1
34893: NEG
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: PUSH
34899: LD_INT 2
34901: PUSH
34902: LD_INT 2
34904: NEG
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: PUSH
34910: LD_INT 4
34912: PUSH
34913: LD_INT 2
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: PUSH
34920: LD_INT 4
34922: PUSH
34923: LD_INT 4
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: LD_INT 4
34932: PUSH
34933: LD_INT 3
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: PUSH
34940: LD_INT 5
34942: PUSH
34943: LD_INT 4
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 5
34952: PUSH
34953: LD_INT 5
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: LD_INT 4
34962: PUSH
34963: LD_INT 5
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: PUSH
34970: LD_INT 3
34972: PUSH
34973: LD_INT 4
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: PUSH
34980: LD_INT 3
34982: PUSH
34983: LD_INT 3
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: PUSH
34990: LD_INT 5
34992: PUSH
34993: LD_INT 3
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 3
35002: PUSH
35003: LD_INT 5
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 0
35012: PUSH
35013: LD_INT 3
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 0
35022: PUSH
35023: LD_INT 2
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: LD_INT 1
35032: PUSH
35033: LD_INT 3
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: LD_INT 1
35042: PUSH
35043: LD_INT 4
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: LD_INT 0
35052: PUSH
35053: LD_INT 4
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PUSH
35060: LD_INT 1
35062: NEG
35063: PUSH
35064: LD_INT 3
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 1
35073: NEG
35074: PUSH
35075: LD_INT 2
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: LD_INT 2
35084: PUSH
35085: LD_INT 4
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: PUSH
35092: LD_INT 2
35094: NEG
35095: PUSH
35096: LD_INT 2
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: PUSH
35103: LD_INT 4
35105: NEG
35106: PUSH
35107: LD_INT 0
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: PUSH
35114: LD_INT 4
35116: NEG
35117: PUSH
35118: LD_INT 1
35120: NEG
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PUSH
35126: LD_INT 3
35128: NEG
35129: PUSH
35130: LD_INT 0
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: PUSH
35137: LD_INT 3
35139: NEG
35140: PUSH
35141: LD_INT 1
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PUSH
35148: LD_INT 4
35150: NEG
35151: PUSH
35152: LD_INT 1
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PUSH
35159: LD_INT 5
35161: NEG
35162: PUSH
35163: LD_INT 0
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PUSH
35170: LD_INT 5
35172: NEG
35173: PUSH
35174: LD_INT 1
35176: NEG
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 5
35184: NEG
35185: PUSH
35186: LD_INT 2
35188: NEG
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 3
35196: NEG
35197: PUSH
35198: LD_INT 2
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: LIST
35209: LIST
35210: LIST
35211: LIST
35212: LIST
35213: LIST
35214: LIST
35215: LIST
35216: LIST
35217: LIST
35218: LIST
35219: LIST
35220: LIST
35221: LIST
35222: LIST
35223: LIST
35224: LIST
35225: LIST
35226: LIST
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: LIST
35241: LIST
35242: LIST
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: ST_TO_ADDR
// end ; end ;
35252: GO 35255
35254: POP
// case btype of b_depot , b_warehouse :
35255: LD_VAR 0 1
35259: PUSH
35260: LD_INT 0
35262: DOUBLE
35263: EQUAL
35264: IFTRUE 35274
35266: LD_INT 1
35268: DOUBLE
35269: EQUAL
35270: IFTRUE 35274
35272: GO 35475
35274: POP
// case nation of nation_american :
35275: LD_VAR 0 5
35279: PUSH
35280: LD_INT 1
35282: DOUBLE
35283: EQUAL
35284: IFTRUE 35288
35286: GO 35344
35288: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35289: LD_ADDR_VAR 0 9
35293: PUSH
35294: LD_VAR 0 11
35298: PUSH
35299: LD_VAR 0 12
35303: PUSH
35304: LD_VAR 0 13
35308: PUSH
35309: LD_VAR 0 14
35313: PUSH
35314: LD_VAR 0 15
35318: PUSH
35319: LD_VAR 0 16
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: PUSH
35332: LD_VAR 0 4
35336: PUSH
35337: LD_INT 1
35339: PLUS
35340: ARRAY
35341: ST_TO_ADDR
35342: GO 35473
35344: LD_INT 2
35346: DOUBLE
35347: EQUAL
35348: IFTRUE 35352
35350: GO 35408
35352: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35353: LD_ADDR_VAR 0 9
35357: PUSH
35358: LD_VAR 0 17
35362: PUSH
35363: LD_VAR 0 18
35367: PUSH
35368: LD_VAR 0 19
35372: PUSH
35373: LD_VAR 0 20
35377: PUSH
35378: LD_VAR 0 21
35382: PUSH
35383: LD_VAR 0 22
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: PUSH
35396: LD_VAR 0 4
35400: PUSH
35401: LD_INT 1
35403: PLUS
35404: ARRAY
35405: ST_TO_ADDR
35406: GO 35473
35408: LD_INT 3
35410: DOUBLE
35411: EQUAL
35412: IFTRUE 35416
35414: GO 35472
35416: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35417: LD_ADDR_VAR 0 9
35421: PUSH
35422: LD_VAR 0 23
35426: PUSH
35427: LD_VAR 0 24
35431: PUSH
35432: LD_VAR 0 25
35436: PUSH
35437: LD_VAR 0 26
35441: PUSH
35442: LD_VAR 0 27
35446: PUSH
35447: LD_VAR 0 28
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: LIST
35456: LIST
35457: LIST
35458: LIST
35459: PUSH
35460: LD_VAR 0 4
35464: PUSH
35465: LD_INT 1
35467: PLUS
35468: ARRAY
35469: ST_TO_ADDR
35470: GO 35473
35472: POP
35473: GO 36028
35475: LD_INT 2
35477: DOUBLE
35478: EQUAL
35479: IFTRUE 35489
35481: LD_INT 3
35483: DOUBLE
35484: EQUAL
35485: IFTRUE 35489
35487: GO 35545
35489: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35490: LD_ADDR_VAR 0 9
35494: PUSH
35495: LD_VAR 0 29
35499: PUSH
35500: LD_VAR 0 30
35504: PUSH
35505: LD_VAR 0 31
35509: PUSH
35510: LD_VAR 0 32
35514: PUSH
35515: LD_VAR 0 33
35519: PUSH
35520: LD_VAR 0 34
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: LIST
35529: LIST
35530: LIST
35531: LIST
35532: PUSH
35533: LD_VAR 0 4
35537: PUSH
35538: LD_INT 1
35540: PLUS
35541: ARRAY
35542: ST_TO_ADDR
35543: GO 36028
35545: LD_INT 16
35547: DOUBLE
35548: EQUAL
35549: IFTRUE 35607
35551: LD_INT 17
35553: DOUBLE
35554: EQUAL
35555: IFTRUE 35607
35557: LD_INT 18
35559: DOUBLE
35560: EQUAL
35561: IFTRUE 35607
35563: LD_INT 19
35565: DOUBLE
35566: EQUAL
35567: IFTRUE 35607
35569: LD_INT 22
35571: DOUBLE
35572: EQUAL
35573: IFTRUE 35607
35575: LD_INT 20
35577: DOUBLE
35578: EQUAL
35579: IFTRUE 35607
35581: LD_INT 21
35583: DOUBLE
35584: EQUAL
35585: IFTRUE 35607
35587: LD_INT 23
35589: DOUBLE
35590: EQUAL
35591: IFTRUE 35607
35593: LD_INT 24
35595: DOUBLE
35596: EQUAL
35597: IFTRUE 35607
35599: LD_INT 25
35601: DOUBLE
35602: EQUAL
35603: IFTRUE 35607
35605: GO 35663
35607: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35608: LD_ADDR_VAR 0 9
35612: PUSH
35613: LD_VAR 0 35
35617: PUSH
35618: LD_VAR 0 36
35622: PUSH
35623: LD_VAR 0 37
35627: PUSH
35628: LD_VAR 0 38
35632: PUSH
35633: LD_VAR 0 39
35637: PUSH
35638: LD_VAR 0 40
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: PUSH
35651: LD_VAR 0 4
35655: PUSH
35656: LD_INT 1
35658: PLUS
35659: ARRAY
35660: ST_TO_ADDR
35661: GO 36028
35663: LD_INT 6
35665: DOUBLE
35666: EQUAL
35667: IFTRUE 35719
35669: LD_INT 7
35671: DOUBLE
35672: EQUAL
35673: IFTRUE 35719
35675: LD_INT 8
35677: DOUBLE
35678: EQUAL
35679: IFTRUE 35719
35681: LD_INT 13
35683: DOUBLE
35684: EQUAL
35685: IFTRUE 35719
35687: LD_INT 12
35689: DOUBLE
35690: EQUAL
35691: IFTRUE 35719
35693: LD_INT 15
35695: DOUBLE
35696: EQUAL
35697: IFTRUE 35719
35699: LD_INT 11
35701: DOUBLE
35702: EQUAL
35703: IFTRUE 35719
35705: LD_INT 14
35707: DOUBLE
35708: EQUAL
35709: IFTRUE 35719
35711: LD_INT 10
35713: DOUBLE
35714: EQUAL
35715: IFTRUE 35719
35717: GO 35775
35719: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35720: LD_ADDR_VAR 0 9
35724: PUSH
35725: LD_VAR 0 41
35729: PUSH
35730: LD_VAR 0 42
35734: PUSH
35735: LD_VAR 0 43
35739: PUSH
35740: LD_VAR 0 44
35744: PUSH
35745: LD_VAR 0 45
35749: PUSH
35750: LD_VAR 0 46
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: LIST
35759: LIST
35760: LIST
35761: LIST
35762: PUSH
35763: LD_VAR 0 4
35767: PUSH
35768: LD_INT 1
35770: PLUS
35771: ARRAY
35772: ST_TO_ADDR
35773: GO 36028
35775: LD_INT 36
35777: DOUBLE
35778: EQUAL
35779: IFTRUE 35783
35781: GO 35839
35783: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35784: LD_ADDR_VAR 0 9
35788: PUSH
35789: LD_VAR 0 47
35793: PUSH
35794: LD_VAR 0 48
35798: PUSH
35799: LD_VAR 0 49
35803: PUSH
35804: LD_VAR 0 50
35808: PUSH
35809: LD_VAR 0 51
35813: PUSH
35814: LD_VAR 0 52
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: LIST
35826: PUSH
35827: LD_VAR 0 4
35831: PUSH
35832: LD_INT 1
35834: PLUS
35835: ARRAY
35836: ST_TO_ADDR
35837: GO 36028
35839: LD_INT 4
35841: DOUBLE
35842: EQUAL
35843: IFTRUE 35865
35845: LD_INT 5
35847: DOUBLE
35848: EQUAL
35849: IFTRUE 35865
35851: LD_INT 34
35853: DOUBLE
35854: EQUAL
35855: IFTRUE 35865
35857: LD_INT 37
35859: DOUBLE
35860: EQUAL
35861: IFTRUE 35865
35863: GO 35921
35865: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35866: LD_ADDR_VAR 0 9
35870: PUSH
35871: LD_VAR 0 53
35875: PUSH
35876: LD_VAR 0 54
35880: PUSH
35881: LD_VAR 0 55
35885: PUSH
35886: LD_VAR 0 56
35890: PUSH
35891: LD_VAR 0 57
35895: PUSH
35896: LD_VAR 0 58
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: PUSH
35909: LD_VAR 0 4
35913: PUSH
35914: LD_INT 1
35916: PLUS
35917: ARRAY
35918: ST_TO_ADDR
35919: GO 36028
35921: LD_INT 31
35923: DOUBLE
35924: EQUAL
35925: IFTRUE 35971
35927: LD_INT 32
35929: DOUBLE
35930: EQUAL
35931: IFTRUE 35971
35933: LD_INT 33
35935: DOUBLE
35936: EQUAL
35937: IFTRUE 35971
35939: LD_INT 27
35941: DOUBLE
35942: EQUAL
35943: IFTRUE 35971
35945: LD_INT 26
35947: DOUBLE
35948: EQUAL
35949: IFTRUE 35971
35951: LD_INT 28
35953: DOUBLE
35954: EQUAL
35955: IFTRUE 35971
35957: LD_INT 29
35959: DOUBLE
35960: EQUAL
35961: IFTRUE 35971
35963: LD_INT 30
35965: DOUBLE
35966: EQUAL
35967: IFTRUE 35971
35969: GO 36027
35971: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35972: LD_ADDR_VAR 0 9
35976: PUSH
35977: LD_VAR 0 59
35981: PUSH
35982: LD_VAR 0 60
35986: PUSH
35987: LD_VAR 0 61
35991: PUSH
35992: LD_VAR 0 62
35996: PUSH
35997: LD_VAR 0 63
36001: PUSH
36002: LD_VAR 0 64
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: LIST
36011: LIST
36012: LIST
36013: LIST
36014: PUSH
36015: LD_VAR 0 4
36019: PUSH
36020: LD_INT 1
36022: PLUS
36023: ARRAY
36024: ST_TO_ADDR
36025: GO 36028
36027: POP
// temp_list2 = [ ] ;
36028: LD_ADDR_VAR 0 10
36032: PUSH
36033: EMPTY
36034: ST_TO_ADDR
// for i in temp_list do
36035: LD_ADDR_VAR 0 8
36039: PUSH
36040: LD_VAR 0 9
36044: PUSH
36045: FOR_IN
36046: IFFALSE 36098
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36048: LD_ADDR_VAR 0 10
36052: PUSH
36053: LD_VAR 0 10
36057: PUSH
36058: LD_VAR 0 8
36062: PUSH
36063: LD_INT 1
36065: ARRAY
36066: PUSH
36067: LD_VAR 0 2
36071: PLUS
36072: PUSH
36073: LD_VAR 0 8
36077: PUSH
36078: LD_INT 2
36080: ARRAY
36081: PUSH
36082: LD_VAR 0 3
36086: PLUS
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: PUSH
36092: EMPTY
36093: LIST
36094: ADD
36095: ST_TO_ADDR
36096: GO 36045
36098: POP
36099: POP
// result = temp_list2 ;
36100: LD_ADDR_VAR 0 7
36104: PUSH
36105: LD_VAR 0 10
36109: ST_TO_ADDR
// end ;
36110: LD_VAR 0 7
36114: RET
// export function EnemyInRange ( unit , dist ) ; begin
36115: LD_INT 0
36117: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36118: LD_ADDR_VAR 0 3
36122: PUSH
36123: LD_VAR 0 1
36127: PPUSH
36128: CALL_OW 255
36132: PPUSH
36133: LD_VAR 0 1
36137: PPUSH
36138: CALL_OW 250
36142: PPUSH
36143: LD_VAR 0 1
36147: PPUSH
36148: CALL_OW 251
36152: PPUSH
36153: LD_VAR 0 2
36157: PPUSH
36158: CALL 9508 0 4
36162: PUSH
36163: LD_INT 4
36165: ARRAY
36166: ST_TO_ADDR
// end ;
36167: LD_VAR 0 3
36171: RET
// export function PlayerSeeMe ( unit ) ; begin
36172: LD_INT 0
36174: PPUSH
// result := See ( your_side , unit ) ;
36175: LD_ADDR_VAR 0 2
36179: PUSH
36180: LD_OWVAR 2
36184: PPUSH
36185: LD_VAR 0 1
36189: PPUSH
36190: CALL_OW 292
36194: ST_TO_ADDR
// end ;
36195: LD_VAR 0 2
36199: RET
// export function ReverseDir ( unit ) ; begin
36200: LD_INT 0
36202: PPUSH
// if not unit then
36203: LD_VAR 0 1
36207: NOT
36208: IFFALSE 36212
// exit ;
36210: GO 36235
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36212: LD_ADDR_VAR 0 2
36216: PUSH
36217: LD_VAR 0 1
36221: PPUSH
36222: CALL_OW 254
36226: PUSH
36227: LD_INT 3
36229: PLUS
36230: PUSH
36231: LD_INT 6
36233: MOD
36234: ST_TO_ADDR
// end ;
36235: LD_VAR 0 2
36239: RET
// export function ReverseArray ( array ) ; var i ; begin
36240: LD_INT 0
36242: PPUSH
36243: PPUSH
// if not array then
36244: LD_VAR 0 1
36248: NOT
36249: IFFALSE 36253
// exit ;
36251: GO 36308
// result := [ ] ;
36253: LD_ADDR_VAR 0 2
36257: PUSH
36258: EMPTY
36259: ST_TO_ADDR
// for i := array downto 1 do
36260: LD_ADDR_VAR 0 3
36264: PUSH
36265: DOUBLE
36266: LD_VAR 0 1
36270: INC
36271: ST_TO_ADDR
36272: LD_INT 1
36274: PUSH
36275: FOR_DOWNTO
36276: IFFALSE 36306
// result := Join ( result , array [ i ] ) ;
36278: LD_ADDR_VAR 0 2
36282: PUSH
36283: LD_VAR 0 2
36287: PPUSH
36288: LD_VAR 0 1
36292: PUSH
36293: LD_VAR 0 3
36297: ARRAY
36298: PPUSH
36299: CALL 40951 0 2
36303: ST_TO_ADDR
36304: GO 36275
36306: POP
36307: POP
// end ;
36308: LD_VAR 0 2
36312: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36313: LD_INT 0
36315: PPUSH
36316: PPUSH
36317: PPUSH
36318: PPUSH
36319: PPUSH
36320: PPUSH
// if not unit or not hexes then
36321: LD_VAR 0 1
36325: NOT
36326: PUSH
36327: LD_VAR 0 2
36331: NOT
36332: OR
36333: IFFALSE 36337
// exit ;
36335: GO 36460
// dist := 9999 ;
36337: LD_ADDR_VAR 0 5
36341: PUSH
36342: LD_INT 9999
36344: ST_TO_ADDR
// for i = 1 to hexes do
36345: LD_ADDR_VAR 0 4
36349: PUSH
36350: DOUBLE
36351: LD_INT 1
36353: DEC
36354: ST_TO_ADDR
36355: LD_VAR 0 2
36359: PUSH
36360: FOR_TO
36361: IFFALSE 36448
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36363: LD_ADDR_VAR 0 6
36367: PUSH
36368: LD_VAR 0 1
36372: PPUSH
36373: LD_VAR 0 2
36377: PUSH
36378: LD_VAR 0 4
36382: ARRAY
36383: PUSH
36384: LD_INT 1
36386: ARRAY
36387: PPUSH
36388: LD_VAR 0 2
36392: PUSH
36393: LD_VAR 0 4
36397: ARRAY
36398: PUSH
36399: LD_INT 2
36401: ARRAY
36402: PPUSH
36403: CALL_OW 297
36407: ST_TO_ADDR
// if tdist < dist then
36408: LD_VAR 0 6
36412: PUSH
36413: LD_VAR 0 5
36417: LESS
36418: IFFALSE 36446
// begin hex := hexes [ i ] ;
36420: LD_ADDR_VAR 0 8
36424: PUSH
36425: LD_VAR 0 2
36429: PUSH
36430: LD_VAR 0 4
36434: ARRAY
36435: ST_TO_ADDR
// dist := tdist ;
36436: LD_ADDR_VAR 0 5
36440: PUSH
36441: LD_VAR 0 6
36445: ST_TO_ADDR
// end ; end ;
36446: GO 36360
36448: POP
36449: POP
// result := hex ;
36450: LD_ADDR_VAR 0 3
36454: PUSH
36455: LD_VAR 0 8
36459: ST_TO_ADDR
// end ;
36460: LD_VAR 0 3
36464: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36465: LD_INT 0
36467: PPUSH
36468: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36469: LD_VAR 0 1
36473: NOT
36474: PUSH
36475: LD_VAR 0 1
36479: PUSH
36480: LD_INT 21
36482: PUSH
36483: LD_INT 2
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: PUSH
36490: LD_INT 23
36492: PUSH
36493: LD_INT 2
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: PPUSH
36504: CALL_OW 69
36508: IN
36509: NOT
36510: OR
36511: IFFALSE 36515
// exit ;
36513: GO 36562
// for i = 1 to 3 do
36515: LD_ADDR_VAR 0 3
36519: PUSH
36520: DOUBLE
36521: LD_INT 1
36523: DEC
36524: ST_TO_ADDR
36525: LD_INT 3
36527: PUSH
36528: FOR_TO
36529: IFFALSE 36560
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36531: LD_VAR 0 1
36535: PPUSH
36536: CALL_OW 250
36540: PPUSH
36541: LD_VAR 0 1
36545: PPUSH
36546: CALL_OW 251
36550: PPUSH
36551: LD_INT 1
36553: PPUSH
36554: CALL_OW 453
36558: GO 36528
36560: POP
36561: POP
// end ;
36562: LD_VAR 0 2
36566: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36567: LD_INT 0
36569: PPUSH
36570: PPUSH
36571: PPUSH
36572: PPUSH
36573: PPUSH
36574: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
36575: LD_VAR 0 1
36579: NOT
36580: PUSH
36581: LD_VAR 0 2
36585: NOT
36586: OR
36587: PUSH
36588: LD_VAR 0 1
36592: PPUSH
36593: CALL_OW 314
36597: OR
36598: IFFALSE 36602
// exit ;
36600: GO 37069
// if GetLives ( i ) < 250 then
36602: LD_VAR 0 4
36606: PPUSH
36607: CALL_OW 256
36611: PUSH
36612: LD_INT 250
36614: LESS
36615: IFFALSE 36628
// begin ComAutodestruct ( i ) ;
36617: LD_VAR 0 4
36621: PPUSH
36622: CALL 36465 0 1
// exit ;
36626: GO 37069
// end ; x := GetX ( enemy_unit ) ;
36628: LD_ADDR_VAR 0 7
36632: PUSH
36633: LD_VAR 0 2
36637: PPUSH
36638: CALL_OW 250
36642: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36643: LD_ADDR_VAR 0 8
36647: PUSH
36648: LD_VAR 0 2
36652: PPUSH
36653: CALL_OW 251
36657: ST_TO_ADDR
// if not x or not y then
36658: LD_VAR 0 7
36662: NOT
36663: PUSH
36664: LD_VAR 0 8
36668: NOT
36669: OR
36670: IFFALSE 36674
// exit ;
36672: GO 37069
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36674: LD_ADDR_VAR 0 6
36678: PUSH
36679: LD_VAR 0 7
36683: PPUSH
36684: LD_INT 0
36686: PPUSH
36687: LD_INT 4
36689: PPUSH
36690: CALL_OW 272
36694: PUSH
36695: LD_VAR 0 8
36699: PPUSH
36700: LD_INT 0
36702: PPUSH
36703: LD_INT 4
36705: PPUSH
36706: CALL_OW 273
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PUSH
36715: LD_VAR 0 7
36719: PPUSH
36720: LD_INT 1
36722: PPUSH
36723: LD_INT 4
36725: PPUSH
36726: CALL_OW 272
36730: PUSH
36731: LD_VAR 0 8
36735: PPUSH
36736: LD_INT 1
36738: PPUSH
36739: LD_INT 4
36741: PPUSH
36742: CALL_OW 273
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PUSH
36751: LD_VAR 0 7
36755: PPUSH
36756: LD_INT 2
36758: PPUSH
36759: LD_INT 4
36761: PPUSH
36762: CALL_OW 272
36766: PUSH
36767: LD_VAR 0 8
36771: PPUSH
36772: LD_INT 2
36774: PPUSH
36775: LD_INT 4
36777: PPUSH
36778: CALL_OW 273
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: PUSH
36787: LD_VAR 0 7
36791: PPUSH
36792: LD_INT 3
36794: PPUSH
36795: LD_INT 4
36797: PPUSH
36798: CALL_OW 272
36802: PUSH
36803: LD_VAR 0 8
36807: PPUSH
36808: LD_INT 3
36810: PPUSH
36811: LD_INT 4
36813: PPUSH
36814: CALL_OW 273
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: LD_VAR 0 7
36827: PPUSH
36828: LD_INT 4
36830: PPUSH
36831: LD_INT 4
36833: PPUSH
36834: CALL_OW 272
36838: PUSH
36839: LD_VAR 0 8
36843: PPUSH
36844: LD_INT 4
36846: PPUSH
36847: LD_INT 4
36849: PPUSH
36850: CALL_OW 273
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_VAR 0 7
36863: PPUSH
36864: LD_INT 5
36866: PPUSH
36867: LD_INT 4
36869: PPUSH
36870: CALL_OW 272
36874: PUSH
36875: LD_VAR 0 8
36879: PPUSH
36880: LD_INT 5
36882: PPUSH
36883: LD_INT 4
36885: PPUSH
36886: CALL_OW 273
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: ST_TO_ADDR
// for i = tmp downto 1 do
36903: LD_ADDR_VAR 0 4
36907: PUSH
36908: DOUBLE
36909: LD_VAR 0 6
36913: INC
36914: ST_TO_ADDR
36915: LD_INT 1
36917: PUSH
36918: FOR_DOWNTO
36919: IFFALSE 37020
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36921: LD_VAR 0 6
36925: PUSH
36926: LD_VAR 0 4
36930: ARRAY
36931: PUSH
36932: LD_INT 1
36934: ARRAY
36935: PPUSH
36936: LD_VAR 0 6
36940: PUSH
36941: LD_VAR 0 4
36945: ARRAY
36946: PUSH
36947: LD_INT 2
36949: ARRAY
36950: PPUSH
36951: CALL_OW 488
36955: NOT
36956: PUSH
36957: LD_VAR 0 6
36961: PUSH
36962: LD_VAR 0 4
36966: ARRAY
36967: PUSH
36968: LD_INT 1
36970: ARRAY
36971: PPUSH
36972: LD_VAR 0 6
36976: PUSH
36977: LD_VAR 0 4
36981: ARRAY
36982: PUSH
36983: LD_INT 2
36985: ARRAY
36986: PPUSH
36987: CALL_OW 428
36991: PUSH
36992: LD_INT 0
36994: NONEQUAL
36995: OR
36996: IFFALSE 37018
// tmp := Delete ( tmp , i ) ;
36998: LD_ADDR_VAR 0 6
37002: PUSH
37003: LD_VAR 0 6
37007: PPUSH
37008: LD_VAR 0 4
37012: PPUSH
37013: CALL_OW 3
37017: ST_TO_ADDR
37018: GO 36918
37020: POP
37021: POP
// j := GetClosestHex ( unit , tmp ) ;
37022: LD_ADDR_VAR 0 5
37026: PUSH
37027: LD_VAR 0 1
37031: PPUSH
37032: LD_VAR 0 6
37036: PPUSH
37037: CALL 36313 0 2
37041: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
37042: LD_VAR 0 1
37046: PPUSH
37047: LD_VAR 0 5
37051: PUSH
37052: LD_INT 1
37054: ARRAY
37055: PPUSH
37056: LD_VAR 0 5
37060: PUSH
37061: LD_INT 2
37063: ARRAY
37064: PPUSH
37065: CALL_OW 111
// end ;
37069: LD_VAR 0 3
37073: RET
// export function PrepareApemanSoldier ( ) ; begin
37074: LD_INT 0
37076: PPUSH
// uc_nation := 0 ;
37077: LD_ADDR_OWVAR 21
37081: PUSH
37082: LD_INT 0
37084: ST_TO_ADDR
// hc_sex := sex_male ;
37085: LD_ADDR_OWVAR 27
37089: PUSH
37090: LD_INT 1
37092: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
37093: LD_ADDR_OWVAR 28
37097: PUSH
37098: LD_INT 15
37100: ST_TO_ADDR
// hc_gallery :=  ;
37101: LD_ADDR_OWVAR 33
37105: PUSH
37106: LD_STRING 
37108: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37109: LD_ADDR_OWVAR 31
37113: PUSH
37114: LD_INT 0
37116: PPUSH
37117: LD_INT 3
37119: PPUSH
37120: CALL_OW 12
37124: PUSH
37125: LD_INT 0
37127: PPUSH
37128: LD_INT 3
37130: PPUSH
37131: CALL_OW 12
37135: PUSH
37136: LD_INT 0
37138: PUSH
37139: LD_INT 0
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: LIST
37146: LIST
37147: ST_TO_ADDR
// end ;
37148: LD_VAR 0 1
37152: RET
// export function PrepareApemanEngineer ( ) ; begin
37153: LD_INT 0
37155: PPUSH
// uc_nation := 0 ;
37156: LD_ADDR_OWVAR 21
37160: PUSH
37161: LD_INT 0
37163: ST_TO_ADDR
// hc_sex := sex_male ;
37164: LD_ADDR_OWVAR 27
37168: PUSH
37169: LD_INT 1
37171: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
37172: LD_ADDR_OWVAR 28
37176: PUSH
37177: LD_INT 16
37179: ST_TO_ADDR
// hc_gallery :=  ;
37180: LD_ADDR_OWVAR 33
37184: PUSH
37185: LD_STRING 
37187: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37188: LD_ADDR_OWVAR 31
37192: PUSH
37193: LD_INT 0
37195: PPUSH
37196: LD_INT 3
37198: PPUSH
37199: CALL_OW 12
37203: PUSH
37204: LD_INT 0
37206: PPUSH
37207: LD_INT 3
37209: PPUSH
37210: CALL_OW 12
37214: PUSH
37215: LD_INT 0
37217: PUSH
37218: LD_INT 0
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: ST_TO_ADDR
// end ;
37227: LD_VAR 0 1
37231: RET
// export function PrepareApeman ( agressivity ) ; begin
37232: LD_INT 0
37234: PPUSH
// uc_side := 0 ;
37235: LD_ADDR_OWVAR 20
37239: PUSH
37240: LD_INT 0
37242: ST_TO_ADDR
// uc_nation := 0 ;
37243: LD_ADDR_OWVAR 21
37247: PUSH
37248: LD_INT 0
37250: ST_TO_ADDR
// hc_sex := sex_male ;
37251: LD_ADDR_OWVAR 27
37255: PUSH
37256: LD_INT 1
37258: ST_TO_ADDR
// hc_class := class_apeman ;
37259: LD_ADDR_OWVAR 28
37263: PUSH
37264: LD_INT 12
37266: ST_TO_ADDR
// hc_gallery :=  ;
37267: LD_ADDR_OWVAR 33
37271: PUSH
37272: LD_STRING 
37274: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37275: LD_ADDR_OWVAR 35
37279: PUSH
37280: LD_VAR 0 1
37284: NEG
37285: PPUSH
37286: LD_VAR 0 1
37290: PPUSH
37291: CALL_OW 12
37295: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37296: LD_ADDR_OWVAR 31
37300: PUSH
37301: LD_INT 0
37303: PPUSH
37304: LD_INT 3
37306: PPUSH
37307: CALL_OW 12
37311: PUSH
37312: LD_INT 0
37314: PPUSH
37315: LD_INT 3
37317: PPUSH
37318: CALL_OW 12
37322: PUSH
37323: LD_INT 0
37325: PUSH
37326: LD_INT 0
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: LIST
37333: LIST
37334: ST_TO_ADDR
// end ;
37335: LD_VAR 0 2
37339: RET
// export function PrepareTiger ( agressivity ) ; begin
37340: LD_INT 0
37342: PPUSH
// uc_side := 0 ;
37343: LD_ADDR_OWVAR 20
37347: PUSH
37348: LD_INT 0
37350: ST_TO_ADDR
// uc_nation := 0 ;
37351: LD_ADDR_OWVAR 21
37355: PUSH
37356: LD_INT 0
37358: ST_TO_ADDR
// hc_class := class_tiger ;
37359: LD_ADDR_OWVAR 28
37363: PUSH
37364: LD_INT 14
37366: ST_TO_ADDR
// hc_gallery :=  ;
37367: LD_ADDR_OWVAR 33
37371: PUSH
37372: LD_STRING 
37374: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37375: LD_ADDR_OWVAR 35
37379: PUSH
37380: LD_VAR 0 1
37384: NEG
37385: PPUSH
37386: LD_VAR 0 1
37390: PPUSH
37391: CALL_OW 12
37395: ST_TO_ADDR
// end ;
37396: LD_VAR 0 2
37400: RET
// export function PrepareEnchidna ( ) ; begin
37401: LD_INT 0
37403: PPUSH
// uc_side := 0 ;
37404: LD_ADDR_OWVAR 20
37408: PUSH
37409: LD_INT 0
37411: ST_TO_ADDR
// uc_nation := 0 ;
37412: LD_ADDR_OWVAR 21
37416: PUSH
37417: LD_INT 0
37419: ST_TO_ADDR
// hc_class := class_baggie ;
37420: LD_ADDR_OWVAR 28
37424: PUSH
37425: LD_INT 13
37427: ST_TO_ADDR
// hc_gallery :=  ;
37428: LD_ADDR_OWVAR 33
37432: PUSH
37433: LD_STRING 
37435: ST_TO_ADDR
// end ;
37436: LD_VAR 0 1
37440: RET
// export function PrepareFrog ( ) ; begin
37441: LD_INT 0
37443: PPUSH
// uc_side := 0 ;
37444: LD_ADDR_OWVAR 20
37448: PUSH
37449: LD_INT 0
37451: ST_TO_ADDR
// uc_nation := 0 ;
37452: LD_ADDR_OWVAR 21
37456: PUSH
37457: LD_INT 0
37459: ST_TO_ADDR
// hc_class := class_frog ;
37460: LD_ADDR_OWVAR 28
37464: PUSH
37465: LD_INT 19
37467: ST_TO_ADDR
// hc_gallery :=  ;
37468: LD_ADDR_OWVAR 33
37472: PUSH
37473: LD_STRING 
37475: ST_TO_ADDR
// end ;
37476: LD_VAR 0 1
37480: RET
// export function PrepareFish ( ) ; begin
37481: LD_INT 0
37483: PPUSH
// uc_side := 0 ;
37484: LD_ADDR_OWVAR 20
37488: PUSH
37489: LD_INT 0
37491: ST_TO_ADDR
// uc_nation := 0 ;
37492: LD_ADDR_OWVAR 21
37496: PUSH
37497: LD_INT 0
37499: ST_TO_ADDR
// hc_class := class_fish ;
37500: LD_ADDR_OWVAR 28
37504: PUSH
37505: LD_INT 20
37507: ST_TO_ADDR
// hc_gallery :=  ;
37508: LD_ADDR_OWVAR 33
37512: PUSH
37513: LD_STRING 
37515: ST_TO_ADDR
// end ;
37516: LD_VAR 0 1
37520: RET
// export function PrepareBird ( ) ; begin
37521: LD_INT 0
37523: PPUSH
// uc_side := 0 ;
37524: LD_ADDR_OWVAR 20
37528: PUSH
37529: LD_INT 0
37531: ST_TO_ADDR
// uc_nation := 0 ;
37532: LD_ADDR_OWVAR 21
37536: PUSH
37537: LD_INT 0
37539: ST_TO_ADDR
// hc_class := class_phororhacos ;
37540: LD_ADDR_OWVAR 28
37544: PUSH
37545: LD_INT 18
37547: ST_TO_ADDR
// hc_gallery :=  ;
37548: LD_ADDR_OWVAR 33
37552: PUSH
37553: LD_STRING 
37555: ST_TO_ADDR
// end ;
37556: LD_VAR 0 1
37560: RET
// export function PrepareHorse ( ) ; begin
37561: LD_INT 0
37563: PPUSH
// uc_side := 0 ;
37564: LD_ADDR_OWVAR 20
37568: PUSH
37569: LD_INT 0
37571: ST_TO_ADDR
// uc_nation := 0 ;
37572: LD_ADDR_OWVAR 21
37576: PUSH
37577: LD_INT 0
37579: ST_TO_ADDR
// hc_class := class_horse ;
37580: LD_ADDR_OWVAR 28
37584: PUSH
37585: LD_INT 21
37587: ST_TO_ADDR
// hc_gallery :=  ;
37588: LD_ADDR_OWVAR 33
37592: PUSH
37593: LD_STRING 
37595: ST_TO_ADDR
// end ;
37596: LD_VAR 0 1
37600: RET
// export function PrepareMastodont ( ) ; begin
37601: LD_INT 0
37603: PPUSH
// uc_side := 0 ;
37604: LD_ADDR_OWVAR 20
37608: PUSH
37609: LD_INT 0
37611: ST_TO_ADDR
// uc_nation := 0 ;
37612: LD_ADDR_OWVAR 21
37616: PUSH
37617: LD_INT 0
37619: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37620: LD_ADDR_OWVAR 37
37624: PUSH
37625: LD_INT 31
37627: ST_TO_ADDR
// vc_control := control_rider ;
37628: LD_ADDR_OWVAR 38
37632: PUSH
37633: LD_INT 4
37635: ST_TO_ADDR
// end ;
37636: LD_VAR 0 1
37640: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37641: LD_INT 0
37643: PPUSH
37644: PPUSH
37645: PPUSH
// uc_side = 0 ;
37646: LD_ADDR_OWVAR 20
37650: PUSH
37651: LD_INT 0
37653: ST_TO_ADDR
// uc_nation = 0 ;
37654: LD_ADDR_OWVAR 21
37658: PUSH
37659: LD_INT 0
37661: ST_TO_ADDR
// InitHc_All ( ) ;
37662: CALL_OW 584
// InitVc ;
37666: CALL_OW 20
// if mastodonts then
37670: LD_VAR 0 6
37674: IFFALSE 37741
// for i = 1 to mastodonts do
37676: LD_ADDR_VAR 0 11
37680: PUSH
37681: DOUBLE
37682: LD_INT 1
37684: DEC
37685: ST_TO_ADDR
37686: LD_VAR 0 6
37690: PUSH
37691: FOR_TO
37692: IFFALSE 37739
// begin vc_chassis := 31 ;
37694: LD_ADDR_OWVAR 37
37698: PUSH
37699: LD_INT 31
37701: ST_TO_ADDR
// vc_control := control_rider ;
37702: LD_ADDR_OWVAR 38
37706: PUSH
37707: LD_INT 4
37709: ST_TO_ADDR
// animal := CreateVehicle ;
37710: LD_ADDR_VAR 0 12
37714: PUSH
37715: CALL_OW 45
37719: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37720: LD_VAR 0 12
37724: PPUSH
37725: LD_VAR 0 8
37729: PPUSH
37730: LD_INT 0
37732: PPUSH
37733: CALL 39869 0 3
// end ;
37737: GO 37691
37739: POP
37740: POP
// if horses then
37741: LD_VAR 0 5
37745: IFFALSE 37812
// for i = 1 to horses do
37747: LD_ADDR_VAR 0 11
37751: PUSH
37752: DOUBLE
37753: LD_INT 1
37755: DEC
37756: ST_TO_ADDR
37757: LD_VAR 0 5
37761: PUSH
37762: FOR_TO
37763: IFFALSE 37810
// begin hc_class := 21 ;
37765: LD_ADDR_OWVAR 28
37769: PUSH
37770: LD_INT 21
37772: ST_TO_ADDR
// hc_gallery :=  ;
37773: LD_ADDR_OWVAR 33
37777: PUSH
37778: LD_STRING 
37780: ST_TO_ADDR
// animal := CreateHuman ;
37781: LD_ADDR_VAR 0 12
37785: PUSH
37786: CALL_OW 44
37790: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37791: LD_VAR 0 12
37795: PPUSH
37796: LD_VAR 0 8
37800: PPUSH
37801: LD_INT 0
37803: PPUSH
37804: CALL 39869 0 3
// end ;
37808: GO 37762
37810: POP
37811: POP
// if birds then
37812: LD_VAR 0 1
37816: IFFALSE 37883
// for i = 1 to birds do
37818: LD_ADDR_VAR 0 11
37822: PUSH
37823: DOUBLE
37824: LD_INT 1
37826: DEC
37827: ST_TO_ADDR
37828: LD_VAR 0 1
37832: PUSH
37833: FOR_TO
37834: IFFALSE 37881
// begin hc_class = 18 ;
37836: LD_ADDR_OWVAR 28
37840: PUSH
37841: LD_INT 18
37843: ST_TO_ADDR
// hc_gallery =  ;
37844: LD_ADDR_OWVAR 33
37848: PUSH
37849: LD_STRING 
37851: ST_TO_ADDR
// animal := CreateHuman ;
37852: LD_ADDR_VAR 0 12
37856: PUSH
37857: CALL_OW 44
37861: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37862: LD_VAR 0 12
37866: PPUSH
37867: LD_VAR 0 8
37871: PPUSH
37872: LD_INT 0
37874: PPUSH
37875: CALL 39869 0 3
// end ;
37879: GO 37833
37881: POP
37882: POP
// if tigers then
37883: LD_VAR 0 2
37887: IFFALSE 37971
// for i = 1 to tigers do
37889: LD_ADDR_VAR 0 11
37893: PUSH
37894: DOUBLE
37895: LD_INT 1
37897: DEC
37898: ST_TO_ADDR
37899: LD_VAR 0 2
37903: PUSH
37904: FOR_TO
37905: IFFALSE 37969
// begin hc_class = class_tiger ;
37907: LD_ADDR_OWVAR 28
37911: PUSH
37912: LD_INT 14
37914: ST_TO_ADDR
// hc_gallery =  ;
37915: LD_ADDR_OWVAR 33
37919: PUSH
37920: LD_STRING 
37922: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37923: LD_ADDR_OWVAR 35
37927: PUSH
37928: LD_INT 7
37930: NEG
37931: PPUSH
37932: LD_INT 7
37934: PPUSH
37935: CALL_OW 12
37939: ST_TO_ADDR
// animal := CreateHuman ;
37940: LD_ADDR_VAR 0 12
37944: PUSH
37945: CALL_OW 44
37949: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37950: LD_VAR 0 12
37954: PPUSH
37955: LD_VAR 0 8
37959: PPUSH
37960: LD_INT 0
37962: PPUSH
37963: CALL 39869 0 3
// end ;
37967: GO 37904
37969: POP
37970: POP
// if apemans then
37971: LD_VAR 0 3
37975: IFFALSE 38098
// for i = 1 to apemans do
37977: LD_ADDR_VAR 0 11
37981: PUSH
37982: DOUBLE
37983: LD_INT 1
37985: DEC
37986: ST_TO_ADDR
37987: LD_VAR 0 3
37991: PUSH
37992: FOR_TO
37993: IFFALSE 38096
// begin hc_class = class_apeman ;
37995: LD_ADDR_OWVAR 28
37999: PUSH
38000: LD_INT 12
38002: ST_TO_ADDR
// hc_gallery =  ;
38003: LD_ADDR_OWVAR 33
38007: PUSH
38008: LD_STRING 
38010: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
38011: LD_ADDR_OWVAR 35
38015: PUSH
38016: LD_INT 2
38018: NEG
38019: PPUSH
38020: LD_INT 2
38022: PPUSH
38023: CALL_OW 12
38027: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38028: LD_ADDR_OWVAR 31
38032: PUSH
38033: LD_INT 1
38035: PPUSH
38036: LD_INT 3
38038: PPUSH
38039: CALL_OW 12
38043: PUSH
38044: LD_INT 1
38046: PPUSH
38047: LD_INT 3
38049: PPUSH
38050: CALL_OW 12
38054: PUSH
38055: LD_INT 0
38057: PUSH
38058: LD_INT 0
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: ST_TO_ADDR
// animal := CreateHuman ;
38067: LD_ADDR_VAR 0 12
38071: PUSH
38072: CALL_OW 44
38076: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38077: LD_VAR 0 12
38081: PPUSH
38082: LD_VAR 0 8
38086: PPUSH
38087: LD_INT 0
38089: PPUSH
38090: CALL 39869 0 3
// end ;
38094: GO 37992
38096: POP
38097: POP
// if enchidnas then
38098: LD_VAR 0 4
38102: IFFALSE 38169
// for i = 1 to enchidnas do
38104: LD_ADDR_VAR 0 11
38108: PUSH
38109: DOUBLE
38110: LD_INT 1
38112: DEC
38113: ST_TO_ADDR
38114: LD_VAR 0 4
38118: PUSH
38119: FOR_TO
38120: IFFALSE 38167
// begin hc_class = 13 ;
38122: LD_ADDR_OWVAR 28
38126: PUSH
38127: LD_INT 13
38129: ST_TO_ADDR
// hc_gallery =  ;
38130: LD_ADDR_OWVAR 33
38134: PUSH
38135: LD_STRING 
38137: ST_TO_ADDR
// animal := CreateHuman ;
38138: LD_ADDR_VAR 0 12
38142: PUSH
38143: CALL_OW 44
38147: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38148: LD_VAR 0 12
38152: PPUSH
38153: LD_VAR 0 8
38157: PPUSH
38158: LD_INT 0
38160: PPUSH
38161: CALL 39869 0 3
// end ;
38165: GO 38119
38167: POP
38168: POP
// if fishes then
38169: LD_VAR 0 7
38173: IFFALSE 38240
// for i = 1 to fishes do
38175: LD_ADDR_VAR 0 11
38179: PUSH
38180: DOUBLE
38181: LD_INT 1
38183: DEC
38184: ST_TO_ADDR
38185: LD_VAR 0 7
38189: PUSH
38190: FOR_TO
38191: IFFALSE 38238
// begin hc_class = 20 ;
38193: LD_ADDR_OWVAR 28
38197: PUSH
38198: LD_INT 20
38200: ST_TO_ADDR
// hc_gallery =  ;
38201: LD_ADDR_OWVAR 33
38205: PUSH
38206: LD_STRING 
38208: ST_TO_ADDR
// animal := CreateHuman ;
38209: LD_ADDR_VAR 0 12
38213: PUSH
38214: CALL_OW 44
38218: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
38219: LD_VAR 0 12
38223: PPUSH
38224: LD_VAR 0 9
38228: PPUSH
38229: LD_INT 0
38231: PPUSH
38232: CALL 39869 0 3
// end ;
38236: GO 38190
38238: POP
38239: POP
// end ;
38240: LD_VAR 0 10
38244: RET
// export function WantHeal ( sci , unit ) ; begin
38245: LD_INT 0
38247: PPUSH
// if GetTaskList ( sci ) > 0 then
38248: LD_VAR 0 1
38252: PPUSH
38253: CALL_OW 437
38257: PUSH
38258: LD_INT 0
38260: GREATER
38261: IFFALSE 38331
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38263: LD_VAR 0 1
38267: PPUSH
38268: CALL_OW 437
38272: PUSH
38273: LD_INT 1
38275: ARRAY
38276: PUSH
38277: LD_INT 1
38279: ARRAY
38280: PUSH
38281: LD_STRING l
38283: EQUAL
38284: PUSH
38285: LD_VAR 0 1
38289: PPUSH
38290: CALL_OW 437
38294: PUSH
38295: LD_INT 1
38297: ARRAY
38298: PUSH
38299: LD_INT 4
38301: ARRAY
38302: PUSH
38303: LD_VAR 0 2
38307: EQUAL
38308: AND
38309: IFFALSE 38321
// result := true else
38311: LD_ADDR_VAR 0 3
38315: PUSH
38316: LD_INT 1
38318: ST_TO_ADDR
38319: GO 38329
// result := false ;
38321: LD_ADDR_VAR 0 3
38325: PUSH
38326: LD_INT 0
38328: ST_TO_ADDR
// end else
38329: GO 38339
// result := false ;
38331: LD_ADDR_VAR 0 3
38335: PUSH
38336: LD_INT 0
38338: ST_TO_ADDR
// end ;
38339: LD_VAR 0 3
38343: RET
// export function HealTarget ( sci ) ; begin
38344: LD_INT 0
38346: PPUSH
// if not sci then
38347: LD_VAR 0 1
38351: NOT
38352: IFFALSE 38356
// exit ;
38354: GO 38421
// result := 0 ;
38356: LD_ADDR_VAR 0 2
38360: PUSH
38361: LD_INT 0
38363: ST_TO_ADDR
// if GetTaskList ( sci ) then
38364: LD_VAR 0 1
38368: PPUSH
38369: CALL_OW 437
38373: IFFALSE 38421
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38375: LD_VAR 0 1
38379: PPUSH
38380: CALL_OW 437
38384: PUSH
38385: LD_INT 1
38387: ARRAY
38388: PUSH
38389: LD_INT 1
38391: ARRAY
38392: PUSH
38393: LD_STRING l
38395: EQUAL
38396: IFFALSE 38421
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38398: LD_ADDR_VAR 0 2
38402: PUSH
38403: LD_VAR 0 1
38407: PPUSH
38408: CALL_OW 437
38412: PUSH
38413: LD_INT 1
38415: ARRAY
38416: PUSH
38417: LD_INT 4
38419: ARRAY
38420: ST_TO_ADDR
// end ;
38421: LD_VAR 0 2
38425: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38426: LD_INT 0
38428: PPUSH
38429: PPUSH
38430: PPUSH
38431: PPUSH
// if not base_units then
38432: LD_VAR 0 1
38436: NOT
38437: IFFALSE 38441
// exit ;
38439: GO 38528
// result := false ;
38441: LD_ADDR_VAR 0 2
38445: PUSH
38446: LD_INT 0
38448: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38449: LD_ADDR_VAR 0 5
38453: PUSH
38454: LD_VAR 0 1
38458: PPUSH
38459: LD_INT 21
38461: PUSH
38462: LD_INT 3
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: PPUSH
38469: CALL_OW 72
38473: ST_TO_ADDR
// if not tmp then
38474: LD_VAR 0 5
38478: NOT
38479: IFFALSE 38483
// exit ;
38481: GO 38528
// for i in tmp do
38483: LD_ADDR_VAR 0 3
38487: PUSH
38488: LD_VAR 0 5
38492: PUSH
38493: FOR_IN
38494: IFFALSE 38526
// begin result := EnemyInRange ( i , 22 ) ;
38496: LD_ADDR_VAR 0 2
38500: PUSH
38501: LD_VAR 0 3
38505: PPUSH
38506: LD_INT 22
38508: PPUSH
38509: CALL 36115 0 2
38513: ST_TO_ADDR
// if result then
38514: LD_VAR 0 2
38518: IFFALSE 38524
// exit ;
38520: POP
38521: POP
38522: GO 38528
// end ;
38524: GO 38493
38526: POP
38527: POP
// end ;
38528: LD_VAR 0 2
38532: RET
// export function FilterByTag ( units , tag ) ; begin
38533: LD_INT 0
38535: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38536: LD_ADDR_VAR 0 3
38540: PUSH
38541: LD_VAR 0 1
38545: PPUSH
38546: LD_INT 120
38548: PUSH
38549: LD_VAR 0 2
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PPUSH
38558: CALL_OW 72
38562: ST_TO_ADDR
// end ;
38563: LD_VAR 0 3
38567: RET
// export function IsDriver ( un ) ; begin
38568: LD_INT 0
38570: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38571: LD_ADDR_VAR 0 2
38575: PUSH
38576: LD_VAR 0 1
38580: PUSH
38581: LD_INT 55
38583: PUSH
38584: EMPTY
38585: LIST
38586: PPUSH
38587: CALL_OW 69
38591: IN
38592: ST_TO_ADDR
// end ;
38593: LD_VAR 0 2
38597: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38598: LD_INT 0
38600: PPUSH
38601: PPUSH
// list := [ ] ;
38602: LD_ADDR_VAR 0 5
38606: PUSH
38607: EMPTY
38608: ST_TO_ADDR
// case d of 0 :
38609: LD_VAR 0 3
38613: PUSH
38614: LD_INT 0
38616: DOUBLE
38617: EQUAL
38618: IFTRUE 38622
38620: GO 38755
38622: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38623: LD_ADDR_VAR 0 5
38627: PUSH
38628: LD_VAR 0 1
38632: PUSH
38633: LD_INT 4
38635: MINUS
38636: PUSH
38637: LD_VAR 0 2
38641: PUSH
38642: LD_INT 4
38644: MINUS
38645: PUSH
38646: LD_INT 2
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: LIST
38653: PUSH
38654: LD_VAR 0 1
38658: PUSH
38659: LD_INT 3
38661: MINUS
38662: PUSH
38663: LD_VAR 0 2
38667: PUSH
38668: LD_INT 1
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: LIST
38675: PUSH
38676: LD_VAR 0 1
38680: PUSH
38681: LD_INT 4
38683: PLUS
38684: PUSH
38685: LD_VAR 0 2
38689: PUSH
38690: LD_INT 4
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: LIST
38697: PUSH
38698: LD_VAR 0 1
38702: PUSH
38703: LD_INT 3
38705: PLUS
38706: PUSH
38707: LD_VAR 0 2
38711: PUSH
38712: LD_INT 3
38714: PLUS
38715: PUSH
38716: LD_INT 5
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: LIST
38723: PUSH
38724: LD_VAR 0 1
38728: PUSH
38729: LD_VAR 0 2
38733: PUSH
38734: LD_INT 4
38736: PLUS
38737: PUSH
38738: LD_INT 0
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: LIST
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: ST_TO_ADDR
// end ; 1 :
38753: GO 39453
38755: LD_INT 1
38757: DOUBLE
38758: EQUAL
38759: IFTRUE 38763
38761: GO 38896
38763: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38764: LD_ADDR_VAR 0 5
38768: PUSH
38769: LD_VAR 0 1
38773: PUSH
38774: LD_VAR 0 2
38778: PUSH
38779: LD_INT 4
38781: MINUS
38782: PUSH
38783: LD_INT 3
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: LIST
38790: PUSH
38791: LD_VAR 0 1
38795: PUSH
38796: LD_INT 3
38798: MINUS
38799: PUSH
38800: LD_VAR 0 2
38804: PUSH
38805: LD_INT 3
38807: MINUS
38808: PUSH
38809: LD_INT 2
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: LIST
38816: PUSH
38817: LD_VAR 0 1
38821: PUSH
38822: LD_INT 4
38824: MINUS
38825: PUSH
38826: LD_VAR 0 2
38830: PUSH
38831: LD_INT 1
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: LIST
38838: PUSH
38839: LD_VAR 0 1
38843: PUSH
38844: LD_VAR 0 2
38848: PUSH
38849: LD_INT 3
38851: PLUS
38852: PUSH
38853: LD_INT 0
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: LIST
38860: PUSH
38861: LD_VAR 0 1
38865: PUSH
38866: LD_INT 4
38868: PLUS
38869: PUSH
38870: LD_VAR 0 2
38874: PUSH
38875: LD_INT 4
38877: PLUS
38878: PUSH
38879: LD_INT 5
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: LIST
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: ST_TO_ADDR
// end ; 2 :
38894: GO 39453
38896: LD_INT 2
38898: DOUBLE
38899: EQUAL
38900: IFTRUE 38904
38902: GO 39033
38904: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38905: LD_ADDR_VAR 0 5
38909: PUSH
38910: LD_VAR 0 1
38914: PUSH
38915: LD_VAR 0 2
38919: PUSH
38920: LD_INT 3
38922: MINUS
38923: PUSH
38924: LD_INT 3
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: LIST
38931: PUSH
38932: LD_VAR 0 1
38936: PUSH
38937: LD_INT 4
38939: PLUS
38940: PUSH
38941: LD_VAR 0 2
38945: PUSH
38946: LD_INT 4
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: LIST
38953: PUSH
38954: LD_VAR 0 1
38958: PUSH
38959: LD_VAR 0 2
38963: PUSH
38964: LD_INT 4
38966: PLUS
38967: PUSH
38968: LD_INT 0
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: LIST
38975: PUSH
38976: LD_VAR 0 1
38980: PUSH
38981: LD_INT 3
38983: MINUS
38984: PUSH
38985: LD_VAR 0 2
38989: PUSH
38990: LD_INT 1
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: LIST
38997: PUSH
38998: LD_VAR 0 1
39002: PUSH
39003: LD_INT 4
39005: MINUS
39006: PUSH
39007: LD_VAR 0 2
39011: PUSH
39012: LD_INT 4
39014: MINUS
39015: PUSH
39016: LD_INT 2
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: LIST
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: LIST
39030: ST_TO_ADDR
// end ; 3 :
39031: GO 39453
39033: LD_INT 3
39035: DOUBLE
39036: EQUAL
39037: IFTRUE 39041
39039: GO 39174
39041: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39042: LD_ADDR_VAR 0 5
39046: PUSH
39047: LD_VAR 0 1
39051: PUSH
39052: LD_INT 3
39054: PLUS
39055: PUSH
39056: LD_VAR 0 2
39060: PUSH
39061: LD_INT 4
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: LIST
39068: PUSH
39069: LD_VAR 0 1
39073: PUSH
39074: LD_INT 4
39076: PLUS
39077: PUSH
39078: LD_VAR 0 2
39082: PUSH
39083: LD_INT 4
39085: PLUS
39086: PUSH
39087: LD_INT 5
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: LIST
39094: PUSH
39095: LD_VAR 0 1
39099: PUSH
39100: LD_INT 4
39102: MINUS
39103: PUSH
39104: LD_VAR 0 2
39108: PUSH
39109: LD_INT 1
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: LIST
39116: PUSH
39117: LD_VAR 0 1
39121: PUSH
39122: LD_VAR 0 2
39126: PUSH
39127: LD_INT 4
39129: MINUS
39130: PUSH
39131: LD_INT 3
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: LIST
39138: PUSH
39139: LD_VAR 0 1
39143: PUSH
39144: LD_INT 3
39146: MINUS
39147: PUSH
39148: LD_VAR 0 2
39152: PUSH
39153: LD_INT 3
39155: MINUS
39156: PUSH
39157: LD_INT 2
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: LIST
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: ST_TO_ADDR
// end ; 4 :
39172: GO 39453
39174: LD_INT 4
39176: DOUBLE
39177: EQUAL
39178: IFTRUE 39182
39180: GO 39315
39182: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
39183: LD_ADDR_VAR 0 5
39187: PUSH
39188: LD_VAR 0 1
39192: PUSH
39193: LD_VAR 0 2
39197: PUSH
39198: LD_INT 4
39200: PLUS
39201: PUSH
39202: LD_INT 0
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: LIST
39209: PUSH
39210: LD_VAR 0 1
39214: PUSH
39215: LD_INT 3
39217: PLUS
39218: PUSH
39219: LD_VAR 0 2
39223: PUSH
39224: LD_INT 3
39226: PLUS
39227: PUSH
39228: LD_INT 5
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: LIST
39235: PUSH
39236: LD_VAR 0 1
39240: PUSH
39241: LD_INT 4
39243: PLUS
39244: PUSH
39245: LD_VAR 0 2
39249: PUSH
39250: LD_INT 4
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: LIST
39257: PUSH
39258: LD_VAR 0 1
39262: PUSH
39263: LD_VAR 0 2
39267: PUSH
39268: LD_INT 3
39270: MINUS
39271: PUSH
39272: LD_INT 3
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: LIST
39279: PUSH
39280: LD_VAR 0 1
39284: PUSH
39285: LD_INT 4
39287: MINUS
39288: PUSH
39289: LD_VAR 0 2
39293: PUSH
39294: LD_INT 4
39296: MINUS
39297: PUSH
39298: LD_INT 2
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: LIST
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: ST_TO_ADDR
// end ; 5 :
39313: GO 39453
39315: LD_INT 5
39317: DOUBLE
39318: EQUAL
39319: IFTRUE 39323
39321: GO 39452
39323: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39324: LD_ADDR_VAR 0 5
39328: PUSH
39329: LD_VAR 0 1
39333: PUSH
39334: LD_INT 4
39336: MINUS
39337: PUSH
39338: LD_VAR 0 2
39342: PUSH
39343: LD_INT 1
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: LIST
39350: PUSH
39351: LD_VAR 0 1
39355: PUSH
39356: LD_VAR 0 2
39360: PUSH
39361: LD_INT 4
39363: MINUS
39364: PUSH
39365: LD_INT 3
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: LIST
39372: PUSH
39373: LD_VAR 0 1
39377: PUSH
39378: LD_INT 4
39380: PLUS
39381: PUSH
39382: LD_VAR 0 2
39386: PUSH
39387: LD_INT 4
39389: PLUS
39390: PUSH
39391: LD_INT 5
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: LIST
39398: PUSH
39399: LD_VAR 0 1
39403: PUSH
39404: LD_INT 3
39406: PLUS
39407: PUSH
39408: LD_VAR 0 2
39412: PUSH
39413: LD_INT 4
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: LIST
39420: PUSH
39421: LD_VAR 0 1
39425: PUSH
39426: LD_VAR 0 2
39430: PUSH
39431: LD_INT 3
39433: PLUS
39434: PUSH
39435: LD_INT 0
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: LIST
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: LIST
39447: LIST
39448: LIST
39449: ST_TO_ADDR
// end ; end ;
39450: GO 39453
39452: POP
// result := list ;
39453: LD_ADDR_VAR 0 4
39457: PUSH
39458: LD_VAR 0 5
39462: ST_TO_ADDR
// end ;
39463: LD_VAR 0 4
39467: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39468: LD_INT 0
39470: PPUSH
39471: PPUSH
39472: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39473: LD_VAR 0 1
39477: NOT
39478: PUSH
39479: LD_VAR 0 2
39483: PUSH
39484: LD_INT 1
39486: PUSH
39487: LD_INT 2
39489: PUSH
39490: LD_INT 3
39492: PUSH
39493: LD_INT 4
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: IN
39502: NOT
39503: OR
39504: IFFALSE 39508
// exit ;
39506: GO 39591
// tmp := [ ] ;
39508: LD_ADDR_VAR 0 5
39512: PUSH
39513: EMPTY
39514: ST_TO_ADDR
// for i in units do
39515: LD_ADDR_VAR 0 4
39519: PUSH
39520: LD_VAR 0 1
39524: PUSH
39525: FOR_IN
39526: IFFALSE 39560
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39528: LD_ADDR_VAR 0 5
39532: PUSH
39533: LD_VAR 0 5
39537: PPUSH
39538: LD_VAR 0 4
39542: PPUSH
39543: LD_VAR 0 2
39547: PPUSH
39548: CALL_OW 259
39552: PPUSH
39553: CALL 40951 0 2
39557: ST_TO_ADDR
39558: GO 39525
39560: POP
39561: POP
// if not tmp then
39562: LD_VAR 0 5
39566: NOT
39567: IFFALSE 39571
// exit ;
39569: GO 39591
// result := SortListByListDesc ( units , tmp ) ;
39571: LD_ADDR_VAR 0 3
39575: PUSH
39576: LD_VAR 0 1
39580: PPUSH
39581: LD_VAR 0 5
39585: PPUSH
39586: CALL_OW 77
39590: ST_TO_ADDR
// end ;
39591: LD_VAR 0 3
39595: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39596: LD_INT 0
39598: PPUSH
39599: PPUSH
39600: PPUSH
// result := false ;
39601: LD_ADDR_VAR 0 3
39605: PUSH
39606: LD_INT 0
39608: ST_TO_ADDR
// if not building then
39609: LD_VAR 0 2
39613: NOT
39614: IFFALSE 39618
// exit ;
39616: GO 39756
// x := GetX ( building ) ;
39618: LD_ADDR_VAR 0 4
39622: PUSH
39623: LD_VAR 0 2
39627: PPUSH
39628: CALL_OW 250
39632: ST_TO_ADDR
// y := GetY ( building ) ;
39633: LD_ADDR_VAR 0 5
39637: PUSH
39638: LD_VAR 0 2
39642: PPUSH
39643: CALL_OW 251
39647: ST_TO_ADDR
// if not x or not y then
39648: LD_VAR 0 4
39652: NOT
39653: PUSH
39654: LD_VAR 0 5
39658: NOT
39659: OR
39660: IFFALSE 39664
// exit ;
39662: GO 39756
// if GetTaskList ( unit ) then
39664: LD_VAR 0 1
39668: PPUSH
39669: CALL_OW 437
39673: IFFALSE 39756
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39675: LD_STRING e
39677: PUSH
39678: LD_VAR 0 1
39682: PPUSH
39683: CALL_OW 437
39687: PUSH
39688: LD_INT 1
39690: ARRAY
39691: PUSH
39692: LD_INT 1
39694: ARRAY
39695: EQUAL
39696: PUSH
39697: LD_VAR 0 4
39701: PUSH
39702: LD_VAR 0 1
39706: PPUSH
39707: CALL_OW 437
39711: PUSH
39712: LD_INT 1
39714: ARRAY
39715: PUSH
39716: LD_INT 2
39718: ARRAY
39719: EQUAL
39720: AND
39721: PUSH
39722: LD_VAR 0 5
39726: PUSH
39727: LD_VAR 0 1
39731: PPUSH
39732: CALL_OW 437
39736: PUSH
39737: LD_INT 1
39739: ARRAY
39740: PUSH
39741: LD_INT 3
39743: ARRAY
39744: EQUAL
39745: AND
39746: IFFALSE 39756
// result := true end ;
39748: LD_ADDR_VAR 0 3
39752: PUSH
39753: LD_INT 1
39755: ST_TO_ADDR
// end ;
39756: LD_VAR 0 3
39760: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39761: LD_INT 0
39763: PPUSH
// result := false ;
39764: LD_ADDR_VAR 0 4
39768: PUSH
39769: LD_INT 0
39771: ST_TO_ADDR
// if GetTaskList ( unit ) then
39772: LD_VAR 0 1
39776: PPUSH
39777: CALL_OW 437
39781: IFFALSE 39864
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39783: LD_STRING M
39785: PUSH
39786: LD_VAR 0 1
39790: PPUSH
39791: CALL_OW 437
39795: PUSH
39796: LD_INT 1
39798: ARRAY
39799: PUSH
39800: LD_INT 1
39802: ARRAY
39803: EQUAL
39804: PUSH
39805: LD_VAR 0 2
39809: PUSH
39810: LD_VAR 0 1
39814: PPUSH
39815: CALL_OW 437
39819: PUSH
39820: LD_INT 1
39822: ARRAY
39823: PUSH
39824: LD_INT 2
39826: ARRAY
39827: EQUAL
39828: AND
39829: PUSH
39830: LD_VAR 0 3
39834: PUSH
39835: LD_VAR 0 1
39839: PPUSH
39840: CALL_OW 437
39844: PUSH
39845: LD_INT 1
39847: ARRAY
39848: PUSH
39849: LD_INT 3
39851: ARRAY
39852: EQUAL
39853: AND
39854: IFFALSE 39864
// result := true ;
39856: LD_ADDR_VAR 0 4
39860: PUSH
39861: LD_INT 1
39863: ST_TO_ADDR
// end ; end ;
39864: LD_VAR 0 4
39868: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39869: LD_INT 0
39871: PPUSH
39872: PPUSH
39873: PPUSH
39874: PPUSH
// if not unit or not area then
39875: LD_VAR 0 1
39879: NOT
39880: PUSH
39881: LD_VAR 0 2
39885: NOT
39886: OR
39887: IFFALSE 39891
// exit ;
39889: GO 40054
// tmp := AreaToList ( area , i ) ;
39891: LD_ADDR_VAR 0 6
39895: PUSH
39896: LD_VAR 0 2
39900: PPUSH
39901: LD_VAR 0 5
39905: PPUSH
39906: CALL_OW 517
39910: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39911: LD_ADDR_VAR 0 5
39915: PUSH
39916: DOUBLE
39917: LD_INT 1
39919: DEC
39920: ST_TO_ADDR
39921: LD_VAR 0 6
39925: PUSH
39926: LD_INT 1
39928: ARRAY
39929: PUSH
39930: FOR_TO
39931: IFFALSE 40052
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39933: LD_ADDR_VAR 0 7
39937: PUSH
39938: LD_VAR 0 6
39942: PUSH
39943: LD_INT 1
39945: ARRAY
39946: PUSH
39947: LD_VAR 0 5
39951: ARRAY
39952: PUSH
39953: LD_VAR 0 6
39957: PUSH
39958: LD_INT 2
39960: ARRAY
39961: PUSH
39962: LD_VAR 0 5
39966: ARRAY
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
39972: LD_INT 92
39974: PUSH
39975: LD_VAR 0 7
39979: PUSH
39980: LD_INT 1
39982: ARRAY
39983: PUSH
39984: LD_VAR 0 7
39988: PUSH
39989: LD_INT 2
39991: ARRAY
39992: PUSH
39993: LD_INT 3
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: PPUSH
40002: CALL_OW 69
40006: PUSH
40007: LD_INT 0
40009: EQUAL
40010: IFFALSE 40050
// begin PlaceUnitArea ( unit , area , mode ) ;
40012: LD_VAR 0 1
40016: PPUSH
40017: LD_VAR 0 2
40021: PPUSH
40022: LD_VAR 0 3
40026: PPUSH
40027: CALL_OW 49
// result := IsPlaced ( unit ) ;
40031: LD_ADDR_VAR 0 4
40035: PUSH
40036: LD_VAR 0 1
40040: PPUSH
40041: CALL_OW 305
40045: ST_TO_ADDR
// exit ;
40046: POP
40047: POP
40048: GO 40054
// end ; end ;
40050: GO 39930
40052: POP
40053: POP
// end ;
40054: LD_VAR 0 4
40058: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40059: LD_INT 0
40061: PPUSH
40062: PPUSH
40063: PPUSH
// if not side or side > 8 then
40064: LD_VAR 0 1
40068: NOT
40069: PUSH
40070: LD_VAR 0 1
40074: PUSH
40075: LD_INT 8
40077: GREATER
40078: OR
40079: IFFALSE 40083
// exit ;
40081: GO 40270
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40083: LD_ADDR_VAR 0 4
40087: PUSH
40088: LD_INT 22
40090: PUSH
40091: LD_VAR 0 1
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: LD_INT 21
40102: PUSH
40103: LD_INT 3
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PPUSH
40114: CALL_OW 69
40118: ST_TO_ADDR
// if not tmp then
40119: LD_VAR 0 4
40123: NOT
40124: IFFALSE 40128
// exit ;
40126: GO 40270
// enable_addtolog := true ;
40128: LD_ADDR_OWVAR 81
40132: PUSH
40133: LD_INT 1
40135: ST_TO_ADDR
// AddToLog ( [ ) ;
40136: LD_STRING [
40138: PPUSH
40139: CALL_OW 561
// for i in tmp do
40143: LD_ADDR_VAR 0 3
40147: PUSH
40148: LD_VAR 0 4
40152: PUSH
40153: FOR_IN
40154: IFFALSE 40261
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
40156: LD_STRING [
40158: PUSH
40159: LD_VAR 0 3
40163: PPUSH
40164: CALL_OW 266
40168: STR
40169: PUSH
40170: LD_STRING , 
40172: STR
40173: PUSH
40174: LD_VAR 0 3
40178: PPUSH
40179: CALL_OW 250
40183: STR
40184: PUSH
40185: LD_STRING , 
40187: STR
40188: PUSH
40189: LD_VAR 0 3
40193: PPUSH
40194: CALL_OW 251
40198: STR
40199: PUSH
40200: LD_STRING , 
40202: STR
40203: PUSH
40204: LD_VAR 0 3
40208: PPUSH
40209: CALL_OW 254
40213: STR
40214: PUSH
40215: LD_STRING , 
40217: STR
40218: PUSH
40219: LD_VAR 0 3
40223: PPUSH
40224: LD_INT 1
40226: PPUSH
40227: CALL_OW 268
40231: STR
40232: PUSH
40233: LD_STRING , 
40235: STR
40236: PUSH
40237: LD_VAR 0 3
40241: PPUSH
40242: LD_INT 2
40244: PPUSH
40245: CALL_OW 268
40249: STR
40250: PUSH
40251: LD_STRING ],
40253: STR
40254: PPUSH
40255: CALL_OW 561
// end ;
40259: GO 40153
40261: POP
40262: POP
// AddToLog ( ]; ) ;
40263: LD_STRING ];
40265: PPUSH
40266: CALL_OW 561
// end ;
40270: LD_VAR 0 2
40274: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40275: LD_INT 0
40277: PPUSH
40278: PPUSH
40279: PPUSH
40280: PPUSH
40281: PPUSH
// if not area or not rate or not max then
40282: LD_VAR 0 1
40286: NOT
40287: PUSH
40288: LD_VAR 0 2
40292: NOT
40293: OR
40294: PUSH
40295: LD_VAR 0 4
40299: NOT
40300: OR
40301: IFFALSE 40305
// exit ;
40303: GO 40494
// while 1 do
40305: LD_INT 1
40307: IFFALSE 40494
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40309: LD_ADDR_VAR 0 9
40313: PUSH
40314: LD_VAR 0 1
40318: PPUSH
40319: LD_INT 1
40321: PPUSH
40322: CALL_OW 287
40326: PUSH
40327: LD_INT 10
40329: MUL
40330: ST_TO_ADDR
// r := rate / 10 ;
40331: LD_ADDR_VAR 0 7
40335: PUSH
40336: LD_VAR 0 2
40340: PUSH
40341: LD_INT 10
40343: DIVREAL
40344: ST_TO_ADDR
// time := 1 1$00 ;
40345: LD_ADDR_VAR 0 8
40349: PUSH
40350: LD_INT 2100
40352: ST_TO_ADDR
// if amount < min then
40353: LD_VAR 0 9
40357: PUSH
40358: LD_VAR 0 3
40362: LESS
40363: IFFALSE 40381
// r := r * 2 else
40365: LD_ADDR_VAR 0 7
40369: PUSH
40370: LD_VAR 0 7
40374: PUSH
40375: LD_INT 2
40377: MUL
40378: ST_TO_ADDR
40379: GO 40407
// if amount > max then
40381: LD_VAR 0 9
40385: PUSH
40386: LD_VAR 0 4
40390: GREATER
40391: IFFALSE 40407
// r := r / 2 ;
40393: LD_ADDR_VAR 0 7
40397: PUSH
40398: LD_VAR 0 7
40402: PUSH
40403: LD_INT 2
40405: DIVREAL
40406: ST_TO_ADDR
// time := time / r ;
40407: LD_ADDR_VAR 0 8
40411: PUSH
40412: LD_VAR 0 8
40416: PUSH
40417: LD_VAR 0 7
40421: DIVREAL
40422: ST_TO_ADDR
// if time < 0 then
40423: LD_VAR 0 8
40427: PUSH
40428: LD_INT 0
40430: LESS
40431: IFFALSE 40448
// time := time * - 1 ;
40433: LD_ADDR_VAR 0 8
40437: PUSH
40438: LD_VAR 0 8
40442: PUSH
40443: LD_INT 1
40445: NEG
40446: MUL
40447: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40448: LD_VAR 0 8
40452: PUSH
40453: LD_INT 35
40455: PPUSH
40456: LD_INT 875
40458: PPUSH
40459: CALL_OW 12
40463: PLUS
40464: PPUSH
40465: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40469: LD_INT 1
40471: PPUSH
40472: LD_INT 5
40474: PPUSH
40475: CALL_OW 12
40479: PPUSH
40480: LD_VAR 0 1
40484: PPUSH
40485: LD_INT 1
40487: PPUSH
40488: CALL_OW 55
// end ;
40492: GO 40305
// end ;
40494: LD_VAR 0 5
40498: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40499: LD_INT 0
40501: PPUSH
40502: PPUSH
40503: PPUSH
40504: PPUSH
40505: PPUSH
40506: PPUSH
40507: PPUSH
40508: PPUSH
// if not turrets or not factories then
40509: LD_VAR 0 1
40513: NOT
40514: PUSH
40515: LD_VAR 0 2
40519: NOT
40520: OR
40521: IFFALSE 40525
// exit ;
40523: GO 40832
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40525: LD_ADDR_VAR 0 10
40529: PUSH
40530: LD_INT 5
40532: PUSH
40533: LD_INT 6
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 2
40542: PUSH
40543: LD_INT 4
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 3
40552: PUSH
40553: LD_INT 5
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: LIST
40564: PUSH
40565: LD_INT 24
40567: PUSH
40568: LD_INT 25
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 23
40577: PUSH
40578: LD_INT 27
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: LD_INT 42
40591: PUSH
40592: LD_INT 43
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 44
40601: PUSH
40602: LD_INT 46
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 45
40611: PUSH
40612: LD_INT 47
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: LIST
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: LIST
40628: ST_TO_ADDR
// result := [ ] ;
40629: LD_ADDR_VAR 0 3
40633: PUSH
40634: EMPTY
40635: ST_TO_ADDR
// for i in turrets do
40636: LD_ADDR_VAR 0 4
40640: PUSH
40641: LD_VAR 0 1
40645: PUSH
40646: FOR_IN
40647: IFFALSE 40830
// begin nat := GetNation ( i ) ;
40649: LD_ADDR_VAR 0 7
40653: PUSH
40654: LD_VAR 0 4
40658: PPUSH
40659: CALL_OW 248
40663: ST_TO_ADDR
// weapon := 0 ;
40664: LD_ADDR_VAR 0 8
40668: PUSH
40669: LD_INT 0
40671: ST_TO_ADDR
// if not nat then
40672: LD_VAR 0 7
40676: NOT
40677: IFFALSE 40681
// continue ;
40679: GO 40646
// for j in list [ nat ] do
40681: LD_ADDR_VAR 0 5
40685: PUSH
40686: LD_VAR 0 10
40690: PUSH
40691: LD_VAR 0 7
40695: ARRAY
40696: PUSH
40697: FOR_IN
40698: IFFALSE 40739
// if GetBWeapon ( i ) = j [ 1 ] then
40700: LD_VAR 0 4
40704: PPUSH
40705: CALL_OW 269
40709: PUSH
40710: LD_VAR 0 5
40714: PUSH
40715: LD_INT 1
40717: ARRAY
40718: EQUAL
40719: IFFALSE 40737
// begin weapon := j [ 2 ] ;
40721: LD_ADDR_VAR 0 8
40725: PUSH
40726: LD_VAR 0 5
40730: PUSH
40731: LD_INT 2
40733: ARRAY
40734: ST_TO_ADDR
// break ;
40735: GO 40739
// end ;
40737: GO 40697
40739: POP
40740: POP
// if not weapon then
40741: LD_VAR 0 8
40745: NOT
40746: IFFALSE 40750
// continue ;
40748: GO 40646
// for k in factories do
40750: LD_ADDR_VAR 0 6
40754: PUSH
40755: LD_VAR 0 2
40759: PUSH
40760: FOR_IN
40761: IFFALSE 40826
// begin weapons := AvailableWeaponList ( k ) ;
40763: LD_ADDR_VAR 0 9
40767: PUSH
40768: LD_VAR 0 6
40772: PPUSH
40773: CALL_OW 478
40777: ST_TO_ADDR
// if not weapons then
40778: LD_VAR 0 9
40782: NOT
40783: IFFALSE 40787
// continue ;
40785: GO 40760
// if weapon in weapons then
40787: LD_VAR 0 8
40791: PUSH
40792: LD_VAR 0 9
40796: IN
40797: IFFALSE 40824
// begin result := [ i , weapon ] ;
40799: LD_ADDR_VAR 0 3
40803: PUSH
40804: LD_VAR 0 4
40808: PUSH
40809: LD_VAR 0 8
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: ST_TO_ADDR
// exit ;
40818: POP
40819: POP
40820: POP
40821: POP
40822: GO 40832
// end ; end ;
40824: GO 40760
40826: POP
40827: POP
// end ;
40828: GO 40646
40830: POP
40831: POP
// end ;
40832: LD_VAR 0 3
40836: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40837: LD_INT 0
40839: PPUSH
// if not side or side > 8 then
40840: LD_VAR 0 3
40844: NOT
40845: PUSH
40846: LD_VAR 0 3
40850: PUSH
40851: LD_INT 8
40853: GREATER
40854: OR
40855: IFFALSE 40859
// exit ;
40857: GO 40918
// if not range then
40859: LD_VAR 0 4
40863: NOT
40864: IFFALSE 40875
// range := - 12 ;
40866: LD_ADDR_VAR 0 4
40870: PUSH
40871: LD_INT 12
40873: NEG
40874: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40875: LD_VAR 0 1
40879: PPUSH
40880: LD_VAR 0 2
40884: PPUSH
40885: LD_VAR 0 3
40889: PPUSH
40890: LD_VAR 0 4
40894: PPUSH
40895: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40899: LD_VAR 0 1
40903: PPUSH
40904: LD_VAR 0 2
40908: PPUSH
40909: LD_VAR 0 3
40913: PPUSH
40914: CALL_OW 331
// end ;
40918: LD_VAR 0 5
40922: RET
// export function Video ( mode ) ; begin
40923: LD_INT 0
40925: PPUSH
// ingame_video = mode ;
40926: LD_ADDR_OWVAR 52
40930: PUSH
40931: LD_VAR 0 1
40935: ST_TO_ADDR
// interface_hidden = mode ;
40936: LD_ADDR_OWVAR 54
40940: PUSH
40941: LD_VAR 0 1
40945: ST_TO_ADDR
// end ;
40946: LD_VAR 0 2
40950: RET
// export function Join ( array , element ) ; begin
40951: LD_INT 0
40953: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40954: LD_ADDR_VAR 0 3
40958: PUSH
40959: LD_VAR 0 1
40963: PPUSH
40964: LD_VAR 0 1
40968: PUSH
40969: LD_INT 1
40971: PLUS
40972: PPUSH
40973: LD_VAR 0 2
40977: PPUSH
40978: CALL_OW 1
40982: ST_TO_ADDR
// end ;
40983: LD_VAR 0 3
40987: RET
// export function JoinUnion ( array , element ) ; begin
40988: LD_INT 0
40990: PPUSH
// result := array union element ;
40991: LD_ADDR_VAR 0 3
40995: PUSH
40996: LD_VAR 0 1
41000: PUSH
41001: LD_VAR 0 2
41005: UNION
41006: ST_TO_ADDR
// end ;
41007: LD_VAR 0 3
41011: RET
// export function GetBehemoths ( side ) ; begin
41012: LD_INT 0
41014: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
41015: LD_ADDR_VAR 0 2
41019: PUSH
41020: LD_INT 22
41022: PUSH
41023: LD_VAR 0 1
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 31
41034: PUSH
41035: LD_INT 25
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PPUSH
41046: CALL_OW 69
41050: ST_TO_ADDR
// end ;
41051: LD_VAR 0 2
41055: RET
// export function Shuffle ( array ) ; var i , index ; begin
41056: LD_INT 0
41058: PPUSH
41059: PPUSH
41060: PPUSH
// result := [ ] ;
41061: LD_ADDR_VAR 0 2
41065: PUSH
41066: EMPTY
41067: ST_TO_ADDR
// if not array then
41068: LD_VAR 0 1
41072: NOT
41073: IFFALSE 41077
// exit ;
41075: GO 41176
// Randomize ;
41077: CALL_OW 10
// for i = array downto 1 do
41081: LD_ADDR_VAR 0 3
41085: PUSH
41086: DOUBLE
41087: LD_VAR 0 1
41091: INC
41092: ST_TO_ADDR
41093: LD_INT 1
41095: PUSH
41096: FOR_DOWNTO
41097: IFFALSE 41174
// begin index := rand ( 1 , array ) ;
41099: LD_ADDR_VAR 0 4
41103: PUSH
41104: LD_INT 1
41106: PPUSH
41107: LD_VAR 0 1
41111: PPUSH
41112: CALL_OW 12
41116: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41117: LD_ADDR_VAR 0 2
41121: PUSH
41122: LD_VAR 0 2
41126: PPUSH
41127: LD_VAR 0 2
41131: PUSH
41132: LD_INT 1
41134: PLUS
41135: PPUSH
41136: LD_VAR 0 1
41140: PUSH
41141: LD_VAR 0 4
41145: ARRAY
41146: PPUSH
41147: CALL_OW 2
41151: ST_TO_ADDR
// array := Delete ( array , index ) ;
41152: LD_ADDR_VAR 0 1
41156: PUSH
41157: LD_VAR 0 1
41161: PPUSH
41162: LD_VAR 0 4
41166: PPUSH
41167: CALL_OW 3
41171: ST_TO_ADDR
// end ;
41172: GO 41096
41174: POP
41175: POP
// end ;
41176: LD_VAR 0 2
41180: RET
// export function GetBaseMaterials ( base ) ; begin
41181: LD_INT 0
41183: PPUSH
// result := [ 0 , 0 , 0 ] ;
41184: LD_ADDR_VAR 0 2
41188: PUSH
41189: LD_INT 0
41191: PUSH
41192: LD_INT 0
41194: PUSH
41195: LD_INT 0
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: LIST
41202: ST_TO_ADDR
// if not base then
41203: LD_VAR 0 1
41207: NOT
41208: IFFALSE 41212
// exit ;
41210: GO 41261
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
41212: LD_ADDR_VAR 0 2
41216: PUSH
41217: LD_VAR 0 1
41221: PPUSH
41222: LD_INT 1
41224: PPUSH
41225: CALL_OW 275
41229: PUSH
41230: LD_VAR 0 1
41234: PPUSH
41235: LD_INT 2
41237: PPUSH
41238: CALL_OW 275
41242: PUSH
41243: LD_VAR 0 1
41247: PPUSH
41248: LD_INT 3
41250: PPUSH
41251: CALL_OW 275
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: LIST
41260: ST_TO_ADDR
// end ;
41261: LD_VAR 0 2
41265: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41266: LD_INT 0
41268: PPUSH
41269: PPUSH
// result := array ;
41270: LD_ADDR_VAR 0 3
41274: PUSH
41275: LD_VAR 0 1
41279: ST_TO_ADDR
// if size >= result then
41280: LD_VAR 0 2
41284: PUSH
41285: LD_VAR 0 3
41289: GREATEREQUAL
41290: IFFALSE 41294
// exit ;
41292: GO 41344
// if size then
41294: LD_VAR 0 2
41298: IFFALSE 41344
// for i := array downto size do
41300: LD_ADDR_VAR 0 4
41304: PUSH
41305: DOUBLE
41306: LD_VAR 0 1
41310: INC
41311: ST_TO_ADDR
41312: LD_VAR 0 2
41316: PUSH
41317: FOR_DOWNTO
41318: IFFALSE 41342
// result := Delete ( result , result ) ;
41320: LD_ADDR_VAR 0 3
41324: PUSH
41325: LD_VAR 0 3
41329: PPUSH
41330: LD_VAR 0 3
41334: PPUSH
41335: CALL_OW 3
41339: ST_TO_ADDR
41340: GO 41317
41342: POP
41343: POP
// end ;
41344: LD_VAR 0 3
41348: RET
// export function ComExit ( unit ) ; var tmp ; begin
41349: LD_INT 0
41351: PPUSH
41352: PPUSH
// if not IsInUnit ( unit ) then
41353: LD_VAR 0 1
41357: PPUSH
41358: CALL_OW 310
41362: NOT
41363: IFFALSE 41367
// exit ;
41365: GO 41427
// tmp := IsInUnit ( unit ) ;
41367: LD_ADDR_VAR 0 3
41371: PUSH
41372: LD_VAR 0 1
41376: PPUSH
41377: CALL_OW 310
41381: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41382: LD_VAR 0 3
41386: PPUSH
41387: CALL_OW 247
41391: PUSH
41392: LD_INT 2
41394: EQUAL
41395: IFFALSE 41408
// ComExitVehicle ( unit ) else
41397: LD_VAR 0 1
41401: PPUSH
41402: CALL_OW 121
41406: GO 41417
// ComExitBuilding ( unit ) ;
41408: LD_VAR 0 1
41412: PPUSH
41413: CALL_OW 122
// result := tmp ;
41417: LD_ADDR_VAR 0 2
41421: PUSH
41422: LD_VAR 0 3
41426: ST_TO_ADDR
// end ;
41427: LD_VAR 0 2
41431: RET
// export function ComExitAll ( units ) ; var i ; begin
41432: LD_INT 0
41434: PPUSH
41435: PPUSH
// if not units then
41436: LD_VAR 0 1
41440: NOT
41441: IFFALSE 41445
// exit ;
41443: GO 41471
// for i in units do
41445: LD_ADDR_VAR 0 3
41449: PUSH
41450: LD_VAR 0 1
41454: PUSH
41455: FOR_IN
41456: IFFALSE 41469
// ComExit ( i ) ;
41458: LD_VAR 0 3
41462: PPUSH
41463: CALL 41349 0 1
41467: GO 41455
41469: POP
41470: POP
// end ;
41471: LD_VAR 0 2
41475: RET
// export function ResetHc ; begin
41476: LD_INT 0
41478: PPUSH
// InitHc ;
41479: CALL_OW 19
// hc_importance := 0 ;
41483: LD_ADDR_OWVAR 32
41487: PUSH
41488: LD_INT 0
41490: ST_TO_ADDR
// end ;
41491: LD_VAR 0 1
41495: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41496: LD_INT 0
41498: PPUSH
41499: PPUSH
41500: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41501: LD_ADDR_VAR 0 6
41505: PUSH
41506: LD_VAR 0 1
41510: PUSH
41511: LD_VAR 0 3
41515: PLUS
41516: PUSH
41517: LD_INT 2
41519: DIV
41520: ST_TO_ADDR
// if _x < 0 then
41521: LD_VAR 0 6
41525: PUSH
41526: LD_INT 0
41528: LESS
41529: IFFALSE 41546
// _x := _x * - 1 ;
41531: LD_ADDR_VAR 0 6
41535: PUSH
41536: LD_VAR 0 6
41540: PUSH
41541: LD_INT 1
41543: NEG
41544: MUL
41545: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41546: LD_ADDR_VAR 0 7
41550: PUSH
41551: LD_VAR 0 2
41555: PUSH
41556: LD_VAR 0 4
41560: PLUS
41561: PUSH
41562: LD_INT 2
41564: DIV
41565: ST_TO_ADDR
// if _y < 0 then
41566: LD_VAR 0 7
41570: PUSH
41571: LD_INT 0
41573: LESS
41574: IFFALSE 41591
// _y := _y * - 1 ;
41576: LD_ADDR_VAR 0 7
41580: PUSH
41581: LD_VAR 0 7
41585: PUSH
41586: LD_INT 1
41588: NEG
41589: MUL
41590: ST_TO_ADDR
// result := [ _x , _y ] ;
41591: LD_ADDR_VAR 0 5
41595: PUSH
41596: LD_VAR 0 6
41600: PUSH
41601: LD_VAR 0 7
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: ST_TO_ADDR
// end ;
41610: LD_VAR 0 5
41614: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41615: LD_INT 0
41617: PPUSH
41618: PPUSH
41619: PPUSH
41620: PPUSH
// task := GetTaskList ( unit ) ;
41621: LD_ADDR_VAR 0 7
41625: PUSH
41626: LD_VAR 0 1
41630: PPUSH
41631: CALL_OW 437
41635: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41636: LD_VAR 0 7
41640: NOT
41641: PUSH
41642: LD_VAR 0 1
41646: PPUSH
41647: LD_VAR 0 2
41651: PPUSH
41652: CALL_OW 308
41656: NOT
41657: AND
41658: IFFALSE 41662
// exit ;
41660: GO 41780
// if IsInArea ( unit , area ) then
41662: LD_VAR 0 1
41666: PPUSH
41667: LD_VAR 0 2
41671: PPUSH
41672: CALL_OW 308
41676: IFFALSE 41694
// begin ComMoveToArea ( unit , goAway ) ;
41678: LD_VAR 0 1
41682: PPUSH
41683: LD_VAR 0 3
41687: PPUSH
41688: CALL_OW 113
// exit ;
41692: GO 41780
// end ; if task [ 1 ] [ 1 ] <> M then
41694: LD_VAR 0 7
41698: PUSH
41699: LD_INT 1
41701: ARRAY
41702: PUSH
41703: LD_INT 1
41705: ARRAY
41706: PUSH
41707: LD_STRING M
41709: NONEQUAL
41710: IFFALSE 41714
// exit ;
41712: GO 41780
// x := task [ 1 ] [ 2 ] ;
41714: LD_ADDR_VAR 0 5
41718: PUSH
41719: LD_VAR 0 7
41723: PUSH
41724: LD_INT 1
41726: ARRAY
41727: PUSH
41728: LD_INT 2
41730: ARRAY
41731: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41732: LD_ADDR_VAR 0 6
41736: PUSH
41737: LD_VAR 0 7
41741: PUSH
41742: LD_INT 1
41744: ARRAY
41745: PUSH
41746: LD_INT 3
41748: ARRAY
41749: ST_TO_ADDR
// if InArea ( x , y , area ) then
41750: LD_VAR 0 5
41754: PPUSH
41755: LD_VAR 0 6
41759: PPUSH
41760: LD_VAR 0 2
41764: PPUSH
41765: CALL_OW 309
41769: IFFALSE 41780
// ComStop ( unit ) ;
41771: LD_VAR 0 1
41775: PPUSH
41776: CALL_OW 141
// end ;
41780: LD_VAR 0 4
41784: RET
// export function Abs ( value ) ; begin
41785: LD_INT 0
41787: PPUSH
// result := value ;
41788: LD_ADDR_VAR 0 2
41792: PUSH
41793: LD_VAR 0 1
41797: ST_TO_ADDR
// if value < 0 then
41798: LD_VAR 0 1
41802: PUSH
41803: LD_INT 0
41805: LESS
41806: IFFALSE 41823
// result := value * - 1 ;
41808: LD_ADDR_VAR 0 2
41812: PUSH
41813: LD_VAR 0 1
41817: PUSH
41818: LD_INT 1
41820: NEG
41821: MUL
41822: ST_TO_ADDR
// end ;
41823: LD_VAR 0 2
41827: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41828: LD_INT 0
41830: PPUSH
41831: PPUSH
41832: PPUSH
41833: PPUSH
41834: PPUSH
41835: PPUSH
41836: PPUSH
41837: PPUSH
// if not unit or not building then
41838: LD_VAR 0 1
41842: NOT
41843: PUSH
41844: LD_VAR 0 2
41848: NOT
41849: OR
41850: IFFALSE 41854
// exit ;
41852: GO 42080
// x := GetX ( building ) ;
41854: LD_ADDR_VAR 0 4
41858: PUSH
41859: LD_VAR 0 2
41863: PPUSH
41864: CALL_OW 250
41868: ST_TO_ADDR
// y := GetY ( building ) ;
41869: LD_ADDR_VAR 0 6
41873: PUSH
41874: LD_VAR 0 2
41878: PPUSH
41879: CALL_OW 251
41883: ST_TO_ADDR
// d := GetDir ( building ) ;
41884: LD_ADDR_VAR 0 8
41888: PUSH
41889: LD_VAR 0 2
41893: PPUSH
41894: CALL_OW 254
41898: ST_TO_ADDR
// r := 4 ;
41899: LD_ADDR_VAR 0 9
41903: PUSH
41904: LD_INT 4
41906: ST_TO_ADDR
// for i := 1 to 5 do
41907: LD_ADDR_VAR 0 10
41911: PUSH
41912: DOUBLE
41913: LD_INT 1
41915: DEC
41916: ST_TO_ADDR
41917: LD_INT 5
41919: PUSH
41920: FOR_TO
41921: IFFALSE 42078
// begin _x := ShiftX ( x , d , r + i ) ;
41923: LD_ADDR_VAR 0 5
41927: PUSH
41928: LD_VAR 0 4
41932: PPUSH
41933: LD_VAR 0 8
41937: PPUSH
41938: LD_VAR 0 9
41942: PUSH
41943: LD_VAR 0 10
41947: PLUS
41948: PPUSH
41949: CALL_OW 272
41953: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41954: LD_ADDR_VAR 0 7
41958: PUSH
41959: LD_VAR 0 6
41963: PPUSH
41964: LD_VAR 0 8
41968: PPUSH
41969: LD_VAR 0 9
41973: PUSH
41974: LD_VAR 0 10
41978: PLUS
41979: PPUSH
41980: CALL_OW 273
41984: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41985: LD_VAR 0 5
41989: PPUSH
41990: LD_VAR 0 7
41994: PPUSH
41995: CALL_OW 488
41999: PUSH
42000: LD_VAR 0 5
42004: PPUSH
42005: LD_VAR 0 7
42009: PPUSH
42010: CALL_OW 428
42014: PPUSH
42015: CALL_OW 247
42019: PUSH
42020: LD_INT 3
42022: PUSH
42023: LD_INT 2
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: IN
42030: NOT
42031: AND
42032: IFFALSE 42076
// begin ComMoveXY ( unit , _x , _y ) ;
42034: LD_VAR 0 1
42038: PPUSH
42039: LD_VAR 0 5
42043: PPUSH
42044: LD_VAR 0 7
42048: PPUSH
42049: CALL_OW 111
// result := [ _x , _y ] ;
42053: LD_ADDR_VAR 0 3
42057: PUSH
42058: LD_VAR 0 5
42062: PUSH
42063: LD_VAR 0 7
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: ST_TO_ADDR
// exit ;
42072: POP
42073: POP
42074: GO 42080
// end ; end ;
42076: GO 41920
42078: POP
42079: POP
// end ;
42080: LD_VAR 0 3
42084: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42085: LD_INT 0
42087: PPUSH
42088: PPUSH
42089: PPUSH
// result := 0 ;
42090: LD_ADDR_VAR 0 3
42094: PUSH
42095: LD_INT 0
42097: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42098: LD_VAR 0 1
42102: PUSH
42103: LD_INT 0
42105: LESS
42106: PUSH
42107: LD_VAR 0 1
42111: PUSH
42112: LD_INT 8
42114: GREATER
42115: OR
42116: PUSH
42117: LD_VAR 0 2
42121: PUSH
42122: LD_INT 0
42124: LESS
42125: OR
42126: PUSH
42127: LD_VAR 0 2
42131: PUSH
42132: LD_INT 8
42134: GREATER
42135: OR
42136: IFFALSE 42140
// exit ;
42138: GO 42215
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
42140: LD_ADDR_VAR 0 4
42144: PUSH
42145: LD_INT 22
42147: PUSH
42148: LD_VAR 0 2
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PPUSH
42157: CALL_OW 69
42161: PUSH
42162: FOR_IN
42163: IFFALSE 42213
// begin un := UnitShoot ( i ) ;
42165: LD_ADDR_VAR 0 5
42169: PUSH
42170: LD_VAR 0 4
42174: PPUSH
42175: CALL_OW 504
42179: ST_TO_ADDR
// if GetSide ( un ) = side1 then
42180: LD_VAR 0 5
42184: PPUSH
42185: CALL_OW 255
42189: PUSH
42190: LD_VAR 0 1
42194: EQUAL
42195: IFFALSE 42211
// begin result := un ;
42197: LD_ADDR_VAR 0 3
42201: PUSH
42202: LD_VAR 0 5
42206: ST_TO_ADDR
// exit ;
42207: POP
42208: POP
42209: GO 42215
// end ; end ;
42211: GO 42162
42213: POP
42214: POP
// end ;
42215: LD_VAR 0 3
42219: RET
// export function GetCargoBay ( units ) ; begin
42220: LD_INT 0
42222: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42223: LD_ADDR_VAR 0 2
42227: PUSH
42228: LD_VAR 0 1
42232: PPUSH
42233: LD_INT 2
42235: PUSH
42236: LD_INT 34
42238: PUSH
42239: LD_INT 12
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 34
42248: PUSH
42249: LD_INT 51
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 34
42258: PUSH
42259: LD_INT 32
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 34
42268: PUSH
42269: LD_INT 89
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: PPUSH
42283: CALL_OW 72
42287: ST_TO_ADDR
// end ;
42288: LD_VAR 0 2
42292: RET
// export function Negate ( value ) ; begin
42293: LD_INT 0
42295: PPUSH
// result := not value ;
42296: LD_ADDR_VAR 0 2
42300: PUSH
42301: LD_VAR 0 1
42305: NOT
42306: ST_TO_ADDR
// end ;
42307: LD_VAR 0 2
42311: RET
// export function Inc ( value ) ; begin
42312: LD_INT 0
42314: PPUSH
// result := value + 1 ;
42315: LD_ADDR_VAR 0 2
42319: PUSH
42320: LD_VAR 0 1
42324: PUSH
42325: LD_INT 1
42327: PLUS
42328: ST_TO_ADDR
// end ;
42329: LD_VAR 0 2
42333: RET
// export function Dec ( value ) ; begin
42334: LD_INT 0
42336: PPUSH
// result := value - 1 ;
42337: LD_ADDR_VAR 0 2
42341: PUSH
42342: LD_VAR 0 1
42346: PUSH
42347: LD_INT 1
42349: MINUS
42350: ST_TO_ADDR
// end ;
42351: LD_VAR 0 2
42355: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42356: LD_INT 0
42358: PPUSH
42359: PPUSH
42360: PPUSH
42361: PPUSH
42362: PPUSH
42363: PPUSH
42364: PPUSH
42365: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42366: LD_VAR 0 1
42370: PPUSH
42371: LD_VAR 0 2
42375: PPUSH
42376: CALL_OW 488
42380: NOT
42381: PUSH
42382: LD_VAR 0 3
42386: PPUSH
42387: LD_VAR 0 4
42391: PPUSH
42392: CALL_OW 488
42396: NOT
42397: OR
42398: IFFALSE 42411
// begin result := - 1 ;
42400: LD_ADDR_VAR 0 5
42404: PUSH
42405: LD_INT 1
42407: NEG
42408: ST_TO_ADDR
// exit ;
42409: GO 42646
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42411: LD_ADDR_VAR 0 12
42415: PUSH
42416: LD_VAR 0 1
42420: PPUSH
42421: LD_VAR 0 2
42425: PPUSH
42426: LD_VAR 0 3
42430: PPUSH
42431: LD_VAR 0 4
42435: PPUSH
42436: CALL 41496 0 4
42440: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42441: LD_ADDR_VAR 0 11
42445: PUSH
42446: LD_VAR 0 1
42450: PPUSH
42451: LD_VAR 0 2
42455: PPUSH
42456: LD_VAR 0 12
42460: PUSH
42461: LD_INT 1
42463: ARRAY
42464: PPUSH
42465: LD_VAR 0 12
42469: PUSH
42470: LD_INT 2
42472: ARRAY
42473: PPUSH
42474: CALL_OW 298
42478: ST_TO_ADDR
// distance := 9999 ;
42479: LD_ADDR_VAR 0 10
42483: PUSH
42484: LD_INT 9999
42486: ST_TO_ADDR
// for i := 0 to 5 do
42487: LD_ADDR_VAR 0 6
42491: PUSH
42492: DOUBLE
42493: LD_INT 0
42495: DEC
42496: ST_TO_ADDR
42497: LD_INT 5
42499: PUSH
42500: FOR_TO
42501: IFFALSE 42644
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42503: LD_ADDR_VAR 0 7
42507: PUSH
42508: LD_VAR 0 1
42512: PPUSH
42513: LD_VAR 0 6
42517: PPUSH
42518: LD_VAR 0 11
42522: PPUSH
42523: CALL_OW 272
42527: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42528: LD_ADDR_VAR 0 8
42532: PUSH
42533: LD_VAR 0 2
42537: PPUSH
42538: LD_VAR 0 6
42542: PPUSH
42543: LD_VAR 0 11
42547: PPUSH
42548: CALL_OW 273
42552: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42553: LD_VAR 0 7
42557: PPUSH
42558: LD_VAR 0 8
42562: PPUSH
42563: CALL_OW 488
42567: NOT
42568: IFFALSE 42572
// continue ;
42570: GO 42500
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42572: LD_ADDR_VAR 0 9
42576: PUSH
42577: LD_VAR 0 12
42581: PUSH
42582: LD_INT 1
42584: ARRAY
42585: PPUSH
42586: LD_VAR 0 12
42590: PUSH
42591: LD_INT 2
42593: ARRAY
42594: PPUSH
42595: LD_VAR 0 7
42599: PPUSH
42600: LD_VAR 0 8
42604: PPUSH
42605: CALL_OW 298
42609: ST_TO_ADDR
// if tmp < distance then
42610: LD_VAR 0 9
42614: PUSH
42615: LD_VAR 0 10
42619: LESS
42620: IFFALSE 42642
// begin result := i ;
42622: LD_ADDR_VAR 0 5
42626: PUSH
42627: LD_VAR 0 6
42631: ST_TO_ADDR
// distance := tmp ;
42632: LD_ADDR_VAR 0 10
42636: PUSH
42637: LD_VAR 0 9
42641: ST_TO_ADDR
// end ; end ;
42642: GO 42500
42644: POP
42645: POP
// end ;
42646: LD_VAR 0 5
42650: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42651: LD_INT 0
42653: PPUSH
42654: PPUSH
// if not driver or not IsInUnit ( driver ) then
42655: LD_VAR 0 1
42659: NOT
42660: PUSH
42661: LD_VAR 0 1
42665: PPUSH
42666: CALL_OW 310
42670: NOT
42671: OR
42672: IFFALSE 42676
// exit ;
42674: GO 42766
// vehicle := IsInUnit ( driver ) ;
42676: LD_ADDR_VAR 0 3
42680: PUSH
42681: LD_VAR 0 1
42685: PPUSH
42686: CALL_OW 310
42690: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42691: LD_VAR 0 1
42695: PPUSH
42696: LD_STRING \
42698: PUSH
42699: LD_INT 0
42701: PUSH
42702: LD_INT 0
42704: PUSH
42705: LD_INT 0
42707: PUSH
42708: LD_INT 0
42710: PUSH
42711: LD_INT 0
42713: PUSH
42714: LD_INT 0
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: PUSH
42726: LD_STRING E
42728: PUSH
42729: LD_INT 0
42731: PUSH
42732: LD_INT 0
42734: PUSH
42735: LD_VAR 0 3
42739: PUSH
42740: LD_INT 0
42742: PUSH
42743: LD_INT 0
42745: PUSH
42746: LD_INT 0
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: PPUSH
42762: CALL_OW 446
// end ;
42766: LD_VAR 0 2
42770: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42771: LD_INT 0
42773: PPUSH
42774: PPUSH
// if not driver or not IsInUnit ( driver ) then
42775: LD_VAR 0 1
42779: NOT
42780: PUSH
42781: LD_VAR 0 1
42785: PPUSH
42786: CALL_OW 310
42790: NOT
42791: OR
42792: IFFALSE 42796
// exit ;
42794: GO 42886
// vehicle := IsInUnit ( driver ) ;
42796: LD_ADDR_VAR 0 3
42800: PUSH
42801: LD_VAR 0 1
42805: PPUSH
42806: CALL_OW 310
42810: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42811: LD_VAR 0 1
42815: PPUSH
42816: LD_STRING \
42818: PUSH
42819: LD_INT 0
42821: PUSH
42822: LD_INT 0
42824: PUSH
42825: LD_INT 0
42827: PUSH
42828: LD_INT 0
42830: PUSH
42831: LD_INT 0
42833: PUSH
42834: LD_INT 0
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: PUSH
42846: LD_STRING E
42848: PUSH
42849: LD_INT 0
42851: PUSH
42852: LD_INT 0
42854: PUSH
42855: LD_VAR 0 3
42859: PUSH
42860: LD_INT 0
42862: PUSH
42863: LD_INT 0
42865: PUSH
42866: LD_INT 0
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PPUSH
42882: CALL_OW 447
// end ;
42886: LD_VAR 0 2
42890: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42891: LD_INT 0
42893: PPUSH
42894: PPUSH
42895: PPUSH
// tmp := [ ] ;
42896: LD_ADDR_VAR 0 5
42900: PUSH
42901: EMPTY
42902: ST_TO_ADDR
// for i in units do
42903: LD_ADDR_VAR 0 4
42907: PUSH
42908: LD_VAR 0 1
42912: PUSH
42913: FOR_IN
42914: IFFALSE 42952
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42916: LD_ADDR_VAR 0 5
42920: PUSH
42921: LD_VAR 0 5
42925: PPUSH
42926: LD_VAR 0 5
42930: PUSH
42931: LD_INT 1
42933: PLUS
42934: PPUSH
42935: LD_VAR 0 4
42939: PPUSH
42940: CALL_OW 256
42944: PPUSH
42945: CALL_OW 2
42949: ST_TO_ADDR
42950: GO 42913
42952: POP
42953: POP
// if not tmp then
42954: LD_VAR 0 5
42958: NOT
42959: IFFALSE 42963
// exit ;
42961: GO 43011
// if asc then
42963: LD_VAR 0 2
42967: IFFALSE 42991
// result := SortListByListAsc ( units , tmp ) else
42969: LD_ADDR_VAR 0 3
42973: PUSH
42974: LD_VAR 0 1
42978: PPUSH
42979: LD_VAR 0 5
42983: PPUSH
42984: CALL_OW 76
42988: ST_TO_ADDR
42989: GO 43011
// result := SortListByListDesc ( units , tmp ) ;
42991: LD_ADDR_VAR 0 3
42995: PUSH
42996: LD_VAR 0 1
43000: PPUSH
43001: LD_VAR 0 5
43005: PPUSH
43006: CALL_OW 77
43010: ST_TO_ADDR
// end ;
43011: LD_VAR 0 3
43015: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43016: LD_INT 0
43018: PPUSH
43019: PPUSH
// task := GetTaskList ( mech ) ;
43020: LD_ADDR_VAR 0 4
43024: PUSH
43025: LD_VAR 0 1
43029: PPUSH
43030: CALL_OW 437
43034: ST_TO_ADDR
// if not task then
43035: LD_VAR 0 4
43039: NOT
43040: IFFALSE 43044
// exit ;
43042: GO 43086
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43044: LD_ADDR_VAR 0 3
43048: PUSH
43049: LD_VAR 0 4
43053: PUSH
43054: LD_INT 1
43056: ARRAY
43057: PUSH
43058: LD_INT 1
43060: ARRAY
43061: PUSH
43062: LD_STRING r
43064: EQUAL
43065: PUSH
43066: LD_VAR 0 4
43070: PUSH
43071: LD_INT 1
43073: ARRAY
43074: PUSH
43075: LD_INT 4
43077: ARRAY
43078: PUSH
43079: LD_VAR 0 2
43083: EQUAL
43084: AND
43085: ST_TO_ADDR
// end ;
43086: LD_VAR 0 3
43090: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
43091: LD_INT 0
43093: PPUSH
// SetDir ( unit , d ) ;
43094: LD_VAR 0 1
43098: PPUSH
43099: LD_VAR 0 4
43103: PPUSH
43104: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
43108: LD_VAR 0 1
43112: PPUSH
43113: LD_VAR 0 2
43117: PPUSH
43118: LD_VAR 0 3
43122: PPUSH
43123: LD_VAR 0 5
43127: PPUSH
43128: CALL_OW 48
// end ;
43132: LD_VAR 0 6
43136: RET
// export function ToNaturalNumber ( number ) ; begin
43137: LD_INT 0
43139: PPUSH
// result := number div 1 ;
43140: LD_ADDR_VAR 0 2
43144: PUSH
43145: LD_VAR 0 1
43149: PUSH
43150: LD_INT 1
43152: DIV
43153: ST_TO_ADDR
// if number < 0 then
43154: LD_VAR 0 1
43158: PUSH
43159: LD_INT 0
43161: LESS
43162: IFFALSE 43172
// result := 0 ;
43164: LD_ADDR_VAR 0 2
43168: PUSH
43169: LD_INT 0
43171: ST_TO_ADDR
// end ;
43172: LD_VAR 0 2
43176: RET
// export function SortByClass ( units , class ) ; var un ; begin
43177: LD_INT 0
43179: PPUSH
43180: PPUSH
// if not units or not class then
43181: LD_VAR 0 1
43185: NOT
43186: PUSH
43187: LD_VAR 0 2
43191: NOT
43192: OR
43193: IFFALSE 43197
// exit ;
43195: GO 43292
// result := [ ] ;
43197: LD_ADDR_VAR 0 3
43201: PUSH
43202: EMPTY
43203: ST_TO_ADDR
// for un in units do
43204: LD_ADDR_VAR 0 4
43208: PUSH
43209: LD_VAR 0 1
43213: PUSH
43214: FOR_IN
43215: IFFALSE 43290
// if GetClass ( un ) = class then
43217: LD_VAR 0 4
43221: PPUSH
43222: CALL_OW 257
43226: PUSH
43227: LD_VAR 0 2
43231: EQUAL
43232: IFFALSE 43259
// result := Insert ( result , 1 , un ) else
43234: LD_ADDR_VAR 0 3
43238: PUSH
43239: LD_VAR 0 3
43243: PPUSH
43244: LD_INT 1
43246: PPUSH
43247: LD_VAR 0 4
43251: PPUSH
43252: CALL_OW 2
43256: ST_TO_ADDR
43257: GO 43288
// result := Replace ( result , result + 1 , un ) ;
43259: LD_ADDR_VAR 0 3
43263: PUSH
43264: LD_VAR 0 3
43268: PPUSH
43269: LD_VAR 0 3
43273: PUSH
43274: LD_INT 1
43276: PLUS
43277: PPUSH
43278: LD_VAR 0 4
43282: PPUSH
43283: CALL_OW 1
43287: ST_TO_ADDR
43288: GO 43214
43290: POP
43291: POP
// end ;
43292: LD_VAR 0 3
43296: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43297: LD_INT 0
43299: PPUSH
43300: PPUSH
43301: PPUSH
43302: PPUSH
43303: PPUSH
43304: PPUSH
43305: PPUSH
// result := [ ] ;
43306: LD_ADDR_VAR 0 4
43310: PUSH
43311: EMPTY
43312: ST_TO_ADDR
// if x - r < 0 then
43313: LD_VAR 0 1
43317: PUSH
43318: LD_VAR 0 3
43322: MINUS
43323: PUSH
43324: LD_INT 0
43326: LESS
43327: IFFALSE 43339
// min_x := 0 else
43329: LD_ADDR_VAR 0 8
43333: PUSH
43334: LD_INT 0
43336: ST_TO_ADDR
43337: GO 43355
// min_x := x - r ;
43339: LD_ADDR_VAR 0 8
43343: PUSH
43344: LD_VAR 0 1
43348: PUSH
43349: LD_VAR 0 3
43353: MINUS
43354: ST_TO_ADDR
// if y - r < 0 then
43355: LD_VAR 0 2
43359: PUSH
43360: LD_VAR 0 3
43364: MINUS
43365: PUSH
43366: LD_INT 0
43368: LESS
43369: IFFALSE 43381
// min_y := 0 else
43371: LD_ADDR_VAR 0 7
43375: PUSH
43376: LD_INT 0
43378: ST_TO_ADDR
43379: GO 43397
// min_y := y - r ;
43381: LD_ADDR_VAR 0 7
43385: PUSH
43386: LD_VAR 0 2
43390: PUSH
43391: LD_VAR 0 3
43395: MINUS
43396: ST_TO_ADDR
// max_x := x + r ;
43397: LD_ADDR_VAR 0 9
43401: PUSH
43402: LD_VAR 0 1
43406: PUSH
43407: LD_VAR 0 3
43411: PLUS
43412: ST_TO_ADDR
// max_y := y + r ;
43413: LD_ADDR_VAR 0 10
43417: PUSH
43418: LD_VAR 0 2
43422: PUSH
43423: LD_VAR 0 3
43427: PLUS
43428: ST_TO_ADDR
// for _x = min_x to max_x do
43429: LD_ADDR_VAR 0 5
43433: PUSH
43434: DOUBLE
43435: LD_VAR 0 8
43439: DEC
43440: ST_TO_ADDR
43441: LD_VAR 0 9
43445: PUSH
43446: FOR_TO
43447: IFFALSE 43548
// for _y = min_y to max_y do
43449: LD_ADDR_VAR 0 6
43453: PUSH
43454: DOUBLE
43455: LD_VAR 0 7
43459: DEC
43460: ST_TO_ADDR
43461: LD_VAR 0 10
43465: PUSH
43466: FOR_TO
43467: IFFALSE 43544
// begin if not ValidHex ( _x , _y ) then
43469: LD_VAR 0 5
43473: PPUSH
43474: LD_VAR 0 6
43478: PPUSH
43479: CALL_OW 488
43483: NOT
43484: IFFALSE 43488
// continue ;
43486: GO 43466
// if GetResourceTypeXY ( _x , _y ) then
43488: LD_VAR 0 5
43492: PPUSH
43493: LD_VAR 0 6
43497: PPUSH
43498: CALL_OW 283
43502: IFFALSE 43542
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43504: LD_ADDR_VAR 0 4
43508: PUSH
43509: LD_VAR 0 4
43513: PPUSH
43514: LD_VAR 0 4
43518: PUSH
43519: LD_INT 1
43521: PLUS
43522: PPUSH
43523: LD_VAR 0 5
43527: PUSH
43528: LD_VAR 0 6
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PPUSH
43537: CALL_OW 1
43541: ST_TO_ADDR
// end ;
43542: GO 43466
43544: POP
43545: POP
43546: GO 43446
43548: POP
43549: POP
// end ;
43550: LD_VAR 0 4
43554: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43555: LD_INT 0
43557: PPUSH
43558: PPUSH
43559: PPUSH
43560: PPUSH
43561: PPUSH
43562: PPUSH
43563: PPUSH
43564: PPUSH
// if not units then
43565: LD_VAR 0 1
43569: NOT
43570: IFFALSE 43574
// exit ;
43572: GO 44098
// result := UnitFilter ( units , [ f_ok ] ) ;
43574: LD_ADDR_VAR 0 3
43578: PUSH
43579: LD_VAR 0 1
43583: PPUSH
43584: LD_INT 50
43586: PUSH
43587: EMPTY
43588: LIST
43589: PPUSH
43590: CALL_OW 72
43594: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43595: LD_ADDR_VAR 0 8
43599: PUSH
43600: LD_VAR 0 1
43604: PUSH
43605: LD_INT 1
43607: ARRAY
43608: PPUSH
43609: CALL_OW 255
43613: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43614: LD_ADDR_VAR 0 10
43618: PUSH
43619: LD_INT 29
43621: PUSH
43622: LD_INT 91
43624: PUSH
43625: LD_INT 49
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: LIST
43632: ST_TO_ADDR
// if not result then
43633: LD_VAR 0 3
43637: NOT
43638: IFFALSE 43642
// exit ;
43640: GO 44098
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43642: LD_ADDR_VAR 0 5
43646: PUSH
43647: LD_INT 81
43649: PUSH
43650: LD_VAR 0 8
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PPUSH
43659: CALL_OW 69
43663: ST_TO_ADDR
// for i in result do
43664: LD_ADDR_VAR 0 4
43668: PUSH
43669: LD_VAR 0 3
43673: PUSH
43674: FOR_IN
43675: IFFALSE 44096
// begin tag := GetTag ( i ) + 1 ;
43677: LD_ADDR_VAR 0 9
43681: PUSH
43682: LD_VAR 0 4
43686: PPUSH
43687: CALL_OW 110
43691: PUSH
43692: LD_INT 1
43694: PLUS
43695: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
43696: LD_ADDR_VAR 0 7
43700: PUSH
43701: LD_VAR 0 4
43705: PPUSH
43706: CALL_OW 250
43710: PPUSH
43711: LD_VAR 0 4
43715: PPUSH
43716: CALL_OW 251
43720: PPUSH
43721: LD_INT 6
43723: PPUSH
43724: CALL 43297 0 3
43728: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
43729: LD_VAR 0 4
43733: PPUSH
43734: CALL_OW 247
43738: PUSH
43739: LD_INT 2
43741: EQUAL
43742: PUSH
43743: LD_VAR 0 7
43747: AND
43748: PUSH
43749: LD_VAR 0 4
43753: PPUSH
43754: CALL_OW 264
43758: PUSH
43759: LD_VAR 0 10
43763: IN
43764: NOT
43765: AND
43766: IFFALSE 43805
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43768: LD_VAR 0 4
43772: PPUSH
43773: LD_VAR 0 7
43777: PUSH
43778: LD_INT 1
43780: ARRAY
43781: PUSH
43782: LD_INT 1
43784: ARRAY
43785: PPUSH
43786: LD_VAR 0 7
43790: PUSH
43791: LD_INT 1
43793: ARRAY
43794: PUSH
43795: LD_INT 2
43797: ARRAY
43798: PPUSH
43799: CALL_OW 116
43803: GO 44094
// if path > tag then
43805: LD_VAR 0 2
43809: PUSH
43810: LD_VAR 0 9
43814: GREATER
43815: IFFALSE 44023
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43817: LD_ADDR_VAR 0 6
43821: PUSH
43822: LD_VAR 0 5
43826: PPUSH
43827: LD_INT 91
43829: PUSH
43830: LD_VAR 0 4
43834: PUSH
43835: LD_INT 8
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: LIST
43842: PPUSH
43843: CALL_OW 72
43847: ST_TO_ADDR
// if nearEnemy then
43848: LD_VAR 0 6
43852: IFFALSE 43921
// begin if GetWeapon ( i ) = ru_time_lapser then
43854: LD_VAR 0 4
43858: PPUSH
43859: CALL_OW 264
43863: PUSH
43864: LD_INT 49
43866: EQUAL
43867: IFFALSE 43895
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43869: LD_VAR 0 4
43873: PPUSH
43874: LD_VAR 0 6
43878: PPUSH
43879: LD_VAR 0 4
43883: PPUSH
43884: CALL_OW 74
43888: PPUSH
43889: CALL_OW 112
43893: GO 43919
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43895: LD_VAR 0 4
43899: PPUSH
43900: LD_VAR 0 6
43904: PPUSH
43905: LD_VAR 0 4
43909: PPUSH
43910: CALL_OW 74
43914: PPUSH
43915: CALL_OW 115
// end else
43919: GO 44021
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43921: LD_VAR 0 4
43925: PPUSH
43926: LD_VAR 0 2
43930: PUSH
43931: LD_VAR 0 9
43935: ARRAY
43936: PUSH
43937: LD_INT 1
43939: ARRAY
43940: PPUSH
43941: LD_VAR 0 2
43945: PUSH
43946: LD_VAR 0 9
43950: ARRAY
43951: PUSH
43952: LD_INT 2
43954: ARRAY
43955: PPUSH
43956: CALL_OW 297
43960: PUSH
43961: LD_INT 6
43963: GREATER
43964: IFFALSE 44007
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43966: LD_VAR 0 4
43970: PPUSH
43971: LD_VAR 0 2
43975: PUSH
43976: LD_VAR 0 9
43980: ARRAY
43981: PUSH
43982: LD_INT 1
43984: ARRAY
43985: PPUSH
43986: LD_VAR 0 2
43990: PUSH
43991: LD_VAR 0 9
43995: ARRAY
43996: PUSH
43997: LD_INT 2
43999: ARRAY
44000: PPUSH
44001: CALL_OW 114
44005: GO 44021
// SetTag ( i , tag ) ;
44007: LD_VAR 0 4
44011: PPUSH
44012: LD_VAR 0 9
44016: PPUSH
44017: CALL_OW 109
// end else
44021: GO 44094
// if enemy then
44023: LD_VAR 0 5
44027: IFFALSE 44094
// begin if GetWeapon ( i ) = ru_time_lapser then
44029: LD_VAR 0 4
44033: PPUSH
44034: CALL_OW 264
44038: PUSH
44039: LD_INT 49
44041: EQUAL
44042: IFFALSE 44070
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
44044: LD_VAR 0 4
44048: PPUSH
44049: LD_VAR 0 5
44053: PPUSH
44054: LD_VAR 0 4
44058: PPUSH
44059: CALL_OW 74
44063: PPUSH
44064: CALL_OW 112
44068: GO 44094
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
44070: LD_VAR 0 4
44074: PPUSH
44075: LD_VAR 0 5
44079: PPUSH
44080: LD_VAR 0 4
44084: PPUSH
44085: CALL_OW 74
44089: PPUSH
44090: CALL_OW 115
// end ; end ;
44094: GO 43674
44096: POP
44097: POP
// end ;
44098: LD_VAR 0 3
44102: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
44103: LD_INT 0
44105: PPUSH
44106: PPUSH
44107: PPUSH
// if not unit or IsInUnit ( unit ) then
44108: LD_VAR 0 1
44112: NOT
44113: PUSH
44114: LD_VAR 0 1
44118: PPUSH
44119: CALL_OW 310
44123: OR
44124: IFFALSE 44128
// exit ;
44126: GO 44219
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
44128: LD_ADDR_VAR 0 4
44132: PUSH
44133: LD_VAR 0 1
44137: PPUSH
44138: CALL_OW 250
44142: PPUSH
44143: LD_VAR 0 2
44147: PPUSH
44148: LD_INT 1
44150: PPUSH
44151: CALL_OW 272
44155: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
44156: LD_ADDR_VAR 0 5
44160: PUSH
44161: LD_VAR 0 1
44165: PPUSH
44166: CALL_OW 251
44170: PPUSH
44171: LD_VAR 0 2
44175: PPUSH
44176: LD_INT 1
44178: PPUSH
44179: CALL_OW 273
44183: ST_TO_ADDR
// if ValidHex ( x , y ) then
44184: LD_VAR 0 4
44188: PPUSH
44189: LD_VAR 0 5
44193: PPUSH
44194: CALL_OW 488
44198: IFFALSE 44219
// ComTurnXY ( unit , x , y ) ;
44200: LD_VAR 0 1
44204: PPUSH
44205: LD_VAR 0 4
44209: PPUSH
44210: LD_VAR 0 5
44214: PPUSH
44215: CALL_OW 118
// end ;
44219: LD_VAR 0 3
44223: RET
// export function SeeUnits ( side , units ) ; var i ; begin
44224: LD_INT 0
44226: PPUSH
44227: PPUSH
// result := false ;
44228: LD_ADDR_VAR 0 3
44232: PUSH
44233: LD_INT 0
44235: ST_TO_ADDR
// if not units then
44236: LD_VAR 0 2
44240: NOT
44241: IFFALSE 44245
// exit ;
44243: GO 44290
// for i in units do
44245: LD_ADDR_VAR 0 4
44249: PUSH
44250: LD_VAR 0 2
44254: PUSH
44255: FOR_IN
44256: IFFALSE 44288
// if See ( side , i ) then
44258: LD_VAR 0 1
44262: PPUSH
44263: LD_VAR 0 4
44267: PPUSH
44268: CALL_OW 292
44272: IFFALSE 44286
// begin result := true ;
44274: LD_ADDR_VAR 0 3
44278: PUSH
44279: LD_INT 1
44281: ST_TO_ADDR
// exit ;
44282: POP
44283: POP
44284: GO 44290
// end ;
44286: GO 44255
44288: POP
44289: POP
// end ;
44290: LD_VAR 0 3
44294: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44295: LD_INT 0
44297: PPUSH
44298: PPUSH
44299: PPUSH
44300: PPUSH
// if not unit or not points then
44301: LD_VAR 0 1
44305: NOT
44306: PUSH
44307: LD_VAR 0 2
44311: NOT
44312: OR
44313: IFFALSE 44317
// exit ;
44315: GO 44407
// dist := 99999 ;
44317: LD_ADDR_VAR 0 5
44321: PUSH
44322: LD_INT 99999
44324: ST_TO_ADDR
// for i in points do
44325: LD_ADDR_VAR 0 4
44329: PUSH
44330: LD_VAR 0 2
44334: PUSH
44335: FOR_IN
44336: IFFALSE 44405
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44338: LD_ADDR_VAR 0 6
44342: PUSH
44343: LD_VAR 0 1
44347: PPUSH
44348: LD_VAR 0 4
44352: PUSH
44353: LD_INT 1
44355: ARRAY
44356: PPUSH
44357: LD_VAR 0 4
44361: PUSH
44362: LD_INT 2
44364: ARRAY
44365: PPUSH
44366: CALL_OW 297
44370: ST_TO_ADDR
// if tmpDist < dist then
44371: LD_VAR 0 6
44375: PUSH
44376: LD_VAR 0 5
44380: LESS
44381: IFFALSE 44403
// begin result := i ;
44383: LD_ADDR_VAR 0 3
44387: PUSH
44388: LD_VAR 0 4
44392: ST_TO_ADDR
// dist := tmpDist ;
44393: LD_ADDR_VAR 0 5
44397: PUSH
44398: LD_VAR 0 6
44402: ST_TO_ADDR
// end ; end ;
44403: GO 44335
44405: POP
44406: POP
// end ;
44407: LD_VAR 0 3
44411: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44412: LD_INT 0
44414: PPUSH
// uc_side := side ;
44415: LD_ADDR_OWVAR 20
44419: PUSH
44420: LD_VAR 0 1
44424: ST_TO_ADDR
// uc_nation := 3 ;
44425: LD_ADDR_OWVAR 21
44429: PUSH
44430: LD_INT 3
44432: ST_TO_ADDR
// vc_chassis := 25 ;
44433: LD_ADDR_OWVAR 37
44437: PUSH
44438: LD_INT 25
44440: ST_TO_ADDR
// vc_engine := engine_siberite ;
44441: LD_ADDR_OWVAR 39
44445: PUSH
44446: LD_INT 3
44448: ST_TO_ADDR
// vc_control := control_computer ;
44449: LD_ADDR_OWVAR 38
44453: PUSH
44454: LD_INT 3
44456: ST_TO_ADDR
// vc_weapon := 59 ;
44457: LD_ADDR_OWVAR 40
44461: PUSH
44462: LD_INT 59
44464: ST_TO_ADDR
// result := CreateVehicle ;
44465: LD_ADDR_VAR 0 5
44469: PUSH
44470: CALL_OW 45
44474: ST_TO_ADDR
// SetDir ( result , d ) ;
44475: LD_VAR 0 5
44479: PPUSH
44480: LD_VAR 0 4
44484: PPUSH
44485: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44489: LD_VAR 0 5
44493: PPUSH
44494: LD_VAR 0 2
44498: PPUSH
44499: LD_VAR 0 3
44503: PPUSH
44504: LD_INT 0
44506: PPUSH
44507: CALL_OW 48
// end ;
44511: LD_VAR 0 5
44515: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44516: LD_INT 0
44518: PPUSH
44519: PPUSH
44520: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44521: LD_ADDR_VAR 0 2
44525: PUSH
44526: LD_INT 0
44528: PUSH
44529: LD_INT 0
44531: PUSH
44532: LD_INT 0
44534: PUSH
44535: LD_INT 0
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44544: LD_VAR 0 1
44548: NOT
44549: PUSH
44550: LD_VAR 0 1
44554: PPUSH
44555: CALL_OW 264
44559: PUSH
44560: LD_INT 12
44562: PUSH
44563: LD_INT 51
44565: PUSH
44566: LD_INT 32
44568: PUSH
44569: LD_INT 89
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: IN
44578: NOT
44579: OR
44580: IFFALSE 44584
// exit ;
44582: GO 44682
// for i := 1 to 3 do
44584: LD_ADDR_VAR 0 3
44588: PUSH
44589: DOUBLE
44590: LD_INT 1
44592: DEC
44593: ST_TO_ADDR
44594: LD_INT 3
44596: PUSH
44597: FOR_TO
44598: IFFALSE 44680
// begin tmp := GetCargo ( cargo , i ) ;
44600: LD_ADDR_VAR 0 4
44604: PUSH
44605: LD_VAR 0 1
44609: PPUSH
44610: LD_VAR 0 3
44614: PPUSH
44615: CALL_OW 289
44619: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44620: LD_ADDR_VAR 0 2
44624: PUSH
44625: LD_VAR 0 2
44629: PPUSH
44630: LD_VAR 0 3
44634: PPUSH
44635: LD_VAR 0 4
44639: PPUSH
44640: CALL_OW 1
44644: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44645: LD_ADDR_VAR 0 2
44649: PUSH
44650: LD_VAR 0 2
44654: PPUSH
44655: LD_INT 4
44657: PPUSH
44658: LD_VAR 0 2
44662: PUSH
44663: LD_INT 4
44665: ARRAY
44666: PUSH
44667: LD_VAR 0 4
44671: PLUS
44672: PPUSH
44673: CALL_OW 1
44677: ST_TO_ADDR
// end ;
44678: GO 44597
44680: POP
44681: POP
// end ;
44682: LD_VAR 0 2
44686: RET
// export function Length ( array ) ; begin
44687: LD_INT 0
44689: PPUSH
// result := array + 0 ;
44690: LD_ADDR_VAR 0 2
44694: PUSH
44695: LD_VAR 0 1
44699: PUSH
44700: LD_INT 0
44702: PLUS
44703: ST_TO_ADDR
// end ;
44704: LD_VAR 0 2
44708: RET
// export function PrepareArray ( array ) ; begin
44709: LD_INT 0
44711: PPUSH
// result := array diff 0 ;
44712: LD_ADDR_VAR 0 2
44716: PUSH
44717: LD_VAR 0 1
44721: PUSH
44722: LD_INT 0
44724: DIFF
44725: ST_TO_ADDR
// if not result [ 1 ] then
44726: LD_VAR 0 2
44730: PUSH
44731: LD_INT 1
44733: ARRAY
44734: NOT
44735: IFFALSE 44755
// result := Delete ( result , 1 ) ;
44737: LD_ADDR_VAR 0 2
44741: PUSH
44742: LD_VAR 0 2
44746: PPUSH
44747: LD_INT 1
44749: PPUSH
44750: CALL_OW 3
44754: ST_TO_ADDR
// end ;
44755: LD_VAR 0 2
44759: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44760: LD_INT 0
44762: PPUSH
44763: PPUSH
44764: PPUSH
44765: PPUSH
// sibRocketRange := 25 ;
44766: LD_ADDR_VAR 0 6
44770: PUSH
44771: LD_INT 25
44773: ST_TO_ADDR
// result := false ;
44774: LD_ADDR_VAR 0 4
44778: PUSH
44779: LD_INT 0
44781: ST_TO_ADDR
// for i := 0 to 5 do
44782: LD_ADDR_VAR 0 5
44786: PUSH
44787: DOUBLE
44788: LD_INT 0
44790: DEC
44791: ST_TO_ADDR
44792: LD_INT 5
44794: PUSH
44795: FOR_TO
44796: IFFALSE 44863
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44798: LD_VAR 0 1
44802: PPUSH
44803: LD_VAR 0 5
44807: PPUSH
44808: LD_VAR 0 6
44812: PPUSH
44813: CALL_OW 272
44817: PPUSH
44818: LD_VAR 0 2
44822: PPUSH
44823: LD_VAR 0 5
44827: PPUSH
44828: LD_VAR 0 6
44832: PPUSH
44833: CALL_OW 273
44837: PPUSH
44838: LD_VAR 0 3
44842: PPUSH
44843: CALL_OW 309
44847: IFFALSE 44861
// begin result := true ;
44849: LD_ADDR_VAR 0 4
44853: PUSH
44854: LD_INT 1
44856: ST_TO_ADDR
// exit ;
44857: POP
44858: POP
44859: GO 44865
// end ;
44861: GO 44795
44863: POP
44864: POP
// end ;
44865: LD_VAR 0 4
44869: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
44870: LD_INT 0
44872: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
44873: LD_VAR 0 1
44877: PPUSH
44878: LD_VAR 0 2
44882: PPUSH
44883: LD_INT 0
44885: PPUSH
44886: LD_INT 0
44888: PPUSH
44889: LD_INT 1
44891: PPUSH
44892: LD_INT 0
44894: PPUSH
44895: CALL_OW 587
// end ;
44899: LD_VAR 0 3
44903: RET
// export function CenterOnNow ( unit ) ; begin
44904: LD_INT 0
44906: PPUSH
// result := IsInUnit ( unit ) ;
44907: LD_ADDR_VAR 0 2
44911: PUSH
44912: LD_VAR 0 1
44916: PPUSH
44917: CALL_OW 310
44921: ST_TO_ADDR
// if not result then
44922: LD_VAR 0 2
44926: NOT
44927: IFFALSE 44939
// result := unit ;
44929: LD_ADDR_VAR 0 2
44933: PUSH
44934: LD_VAR 0 1
44938: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
44939: LD_VAR 0 1
44943: PPUSH
44944: CALL_OW 87
// end ;
44948: LD_VAR 0 2
44952: RET
// export function ComMoveHex ( unit , hex ) ; begin
44953: LD_INT 0
44955: PPUSH
// if not hex then
44956: LD_VAR 0 2
44960: NOT
44961: IFFALSE 44965
// exit ;
44963: GO 45018
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
44965: LD_VAR 0 2
44969: PUSH
44970: LD_INT 1
44972: ARRAY
44973: PPUSH
44974: LD_VAR 0 2
44978: PUSH
44979: LD_INT 2
44981: ARRAY
44982: PPUSH
44983: CALL_OW 428
44987: IFFALSE 44991
// exit ;
44989: GO 45018
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
44991: LD_VAR 0 1
44995: PPUSH
44996: LD_VAR 0 2
45000: PUSH
45001: LD_INT 1
45003: ARRAY
45004: PPUSH
45005: LD_VAR 0 2
45009: PUSH
45010: LD_INT 2
45012: ARRAY
45013: PPUSH
45014: CALL_OW 111
// end ;
45018: LD_VAR 0 3
45022: RET
