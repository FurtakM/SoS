// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// PrepareArabian ;
   8: CALL 65 0 0
// PrepareRussian ;
  12: CALL 1515 0 0
// PrepareHeike ;
  16: CALL 614 0 0
// Action ;
  20: CALL 2681 0 0
// end ;
  24: END
// export debug , prefix , startAttackOnKabul , startAttackOnHeike ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := true ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 1
  35: ST_TO_ADDR
// prefix := 07_ ;
  36: LD_ADDR_EXP 2
  40: PUSH
  41: LD_STRING 07_
  43: ST_TO_ADDR
// startAttackOnKabul := false ;
  44: LD_ADDR_EXP 3
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// startAttackOnHeike := false ;
  52: LD_ADDR_EXP 4
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// end ; end_of_file
  60: LD_VAR 0 1
  64: RET
// export function PrepareArabian ; var i , un , lives ; begin
  65: LD_INT 0
  67: PPUSH
  68: PPUSH
  69: PPUSH
  70: PPUSH
// SetBName ( ar_dep , newkabul ) ;
  71: LD_INT 2
  73: PPUSH
  74: LD_STRING newkabul
  76: PPUSH
  77: CALL_OW 500
// uc_side := 5 ;
  81: LD_ADDR_OWVAR 20
  85: PUSH
  86: LD_INT 5
  88: ST_TO_ADDR
// uc_nation := 2 ;
  89: LD_ADDR_OWVAR 21
  93: PUSH
  94: LD_INT 2
  96: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do
  97: LD_ADDR_VAR 0 2
 101: PUSH
 102: LD_INT 22
 104: PUSH
 105: LD_INT 2
 107: PUSH
 108: EMPTY
 109: LIST
 110: LIST
 111: PUSH
 112: LD_INT 21
 114: PUSH
 115: LD_INT 3
 117: PUSH
 118: EMPTY
 119: LIST
 120: LIST
 121: PUSH
 122: EMPTY
 123: LIST
 124: LIST
 125: PPUSH
 126: CALL_OW 69
 130: PUSH
 131: FOR_IN
 132: IFFALSE 266
// begin SetSide ( i , 5 ) ;
 134: LD_VAR 0 2
 138: PPUSH
 139: LD_INT 5
 141: PPUSH
 142: CALL_OW 235
// lives := rand ( 248 , 510 ) ;
 146: LD_ADDR_VAR 0 4
 150: PUSH
 151: LD_INT 248
 153: PPUSH
 154: LD_INT 510
 156: PPUSH
 157: CALL_OW 12
 161: ST_TO_ADDR
// SetLives ( i , lives ) ;
 162: LD_VAR 0 2
 166: PPUSH
 167: LD_VAR 0 4
 171: PPUSH
 172: CALL_OW 234
// if GetBType ( i ) = b_bunker then
 176: LD_VAR 0 2
 180: PPUSH
 181: CALL_OW 266
 185: PUSH
 186: LD_INT 32
 188: EQUAL
 189: IFFALSE 264
// begin PlaceWeaponTurret ( i , [ ar_double_machine_gun , ar_gun , ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] ) ;
 191: LD_VAR 0 2
 195: PPUSH
 196: LD_INT 24
 198: PUSH
 199: LD_INT 27
 201: PUSH
 202: LD_INT 25
 204: PUSH
 205: LD_INT 28
 207: PUSH
 208: EMPTY
 209: LIST
 210: LIST
 211: LIST
 212: LIST
 213: PUSH
 214: LD_INT 1
 216: PPUSH
 217: LD_INT 4
 219: PPUSH
 220: CALL_OW 12
 224: ARRAY
 225: PPUSH
 226: CALL_OW 431
// if lives > 250 then
 230: LD_VAR 0 4
 234: PUSH
 235: LD_INT 250
 237: GREATER
 238: IFFALSE 264
// begin PrepareSoldier ( false , 6 ) ;
 240: LD_INT 0
 242: PPUSH
 243: LD_INT 6
 245: PPUSH
 246: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
 250: CALL_OW 44
 254: PPUSH
 255: LD_VAR 0 2
 259: PPUSH
 260: CALL_OW 52
// end ; end ; end ;
 264: GO 131
 266: POP
 267: POP
// for i := 1 to 9 do
 268: LD_ADDR_VAR 0 2
 272: PUSH
 273: DOUBLE
 274: LD_INT 1
 276: DEC
 277: ST_TO_ADDR
 278: LD_INT 9
 280: PUSH
 281: FOR_TO
 282: IFFALSE 361
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 0 ) ;
 284: LD_INT 0
 286: PPUSH
 287: LD_INT 1
 289: PPUSH
 290: LD_INT 4
 292: PPUSH
 293: CALL_OW 12
 297: PPUSH
 298: LD_INT 0
 300: PPUSH
 301: CALL_OW 380
// un := CreateHuman ;
 305: LD_ADDR_VAR 0 3
 309: PUSH
 310: CALL_OW 44
 314: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 315: LD_VAR 0 3
 319: PPUSH
 320: LD_INT 0
 322: PPUSH
 323: LD_INT 5
 325: PPUSH
 326: CALL_OW 12
 330: PPUSH
 331: CALL_OW 233
// PlaceUnitArea ( un , kabulDeadArea , false ) ;
 335: LD_VAR 0 3
 339: PPUSH
 340: LD_INT 1
 342: PPUSH
 343: LD_INT 0
 345: PPUSH
 346: CALL_OW 49
// KillUnit ( un ) ;
 350: LD_VAR 0 3
 354: PPUSH
 355: CALL_OW 66
// end ;
 359: GO 281
 361: POP
 362: POP
// for i := 1 to 3 do
 363: LD_ADDR_VAR 0 2
 367: PUSH
 368: DOUBLE
 369: LD_INT 1
 371: DEC
 372: ST_TO_ADDR
 373: LD_INT 3
 375: PUSH
 376: FOR_TO
 377: IFFALSE 531
// begin vc_chassis := ar_medium_trike ;
 379: LD_ADDR_OWVAR 37
 383: PUSH
 384: LD_INT 13
 386: ST_TO_ADDR
// vc_engine := [ engine_solar , engine_combustion ] [ rand ( 1 , 2 ) ] ;
 387: LD_ADDR_OWVAR 39
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 1
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: PUSH
 402: LD_INT 1
 404: PPUSH
 405: LD_INT 2
 407: PPUSH
 408: CALL_OW 12
 412: ARRAY
 413: ST_TO_ADDR
// vc_control := [ control_manual , control_remote ] [ rand ( 1 , 2 ) ] ;
 414: LD_ADDR_OWVAR 38
 418: PUSH
 419: LD_INT 1
 421: PUSH
 422: LD_INT 2
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: PUSH
 429: LD_INT 1
 431: PPUSH
 432: LD_INT 2
 434: PPUSH
 435: CALL_OW 12
 439: ARRAY
 440: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_gatling_gun , ar_gun ] [ rand ( 1 , 3 ) ] ;
 441: LD_ADDR_OWVAR 40
 445: PUSH
 446: LD_INT 24
 448: PUSH
 449: LD_INT 25
 451: PUSH
 452: LD_INT 27
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: LIST
 459: PUSH
 460: LD_INT 1
 462: PPUSH
 463: LD_INT 3
 465: PPUSH
 466: CALL_OW 12
 470: ARRAY
 471: ST_TO_ADDR
// un := CreateVehicle ;
 472: LD_ADDR_VAR 0 3
 476: PUSH
 477: CALL_OW 45
 481: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 482: LD_VAR 0 3
 486: PPUSH
 487: LD_INT 0
 489: PPUSH
 490: LD_INT 5
 492: PPUSH
 493: CALL_OW 12
 497: PPUSH
 498: CALL_OW 233
// PlaceUnitArea ( un , kabulVDeadArea , false ) ;
 502: LD_VAR 0 3
 506: PPUSH
 507: LD_INT 2
 509: PPUSH
 510: LD_INT 0
 512: PPUSH
 513: CALL_OW 49
// SetLives ( un , 200 ) ;
 517: LD_VAR 0 3
 521: PPUSH
 522: LD_INT 200
 524: PPUSH
 525: CALL_OW 234
// end ;
 529: GO 376
 531: POP
 532: POP
// for i := 1 to 3 do
 533: LD_ADDR_VAR 0 2
 537: PUSH
 538: DOUBLE
 539: LD_INT 1
 541: DEC
 542: ST_TO_ADDR
 543: LD_INT 3
 545: PUSH
 546: FOR_TO
 547: IFFALSE 607
// begin PrepareSoldier ( false , 6 ) ;
 549: LD_INT 0
 551: PPUSH
 552: LD_INT 6
 554: PPUSH
 555: CALL_OW 381
// un := CreateHuman ;
 559: LD_ADDR_VAR 0 3
 563: PUSH
 564: CALL_OW 44
 568: ST_TO_ADDR
// PlaceUnitXYR ( un , 106 , 47 , 4 , false ) ;
 569: LD_VAR 0 3
 573: PPUSH
 574: LD_INT 106
 576: PPUSH
 577: LD_INT 47
 579: PPUSH
 580: LD_INT 4
 582: PPUSH
 583: LD_INT 0
 585: PPUSH
 586: CALL_OW 50
// ComAgressiveMove ( un , 71 , 53 ) ;
 590: LD_VAR 0 3
 594: PPUSH
 595: LD_INT 71
 597: PPUSH
 598: LD_INT 53
 600: PPUSH
 601: CALL_OW 114
// end ;
 605: GO 546
 607: POP
 608: POP
// end ;
 609: LD_VAR 0 1
 613: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad ; export function PrepareHeike ; var i , tmp , un , veh ; begin
 614: LD_INT 0
 616: PPUSH
 617: PPUSH
 618: PPUSH
 619: PPUSH
 620: PPUSH
// uc_side := 5 ;
 621: LD_ADDR_OWVAR 20
 625: PUSH
 626: LD_INT 5
 628: ST_TO_ADDR
// uc_nation := 1 ;
 629: LD_ADDR_OWVAR 21
 633: PUSH
 634: LD_INT 1
 636: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 07_Americans ) ;
 637: LD_ADDR_EXP 17
 641: PUSH
 642: LD_STRING 07_Americans
 644: PPUSH
 645: CALL_OW 31
 649: ST_TO_ADDR
// if not americanSquad then
 650: LD_EXP 17
 654: NOT
 655: IFFALSE 720
// begin for i := 1 to 4 do
 657: LD_ADDR_VAR 0 2
 661: PUSH
 662: DOUBLE
 663: LD_INT 1
 665: DEC
 666: ST_TO_ADDR
 667: LD_INT 4
 669: PUSH
 670: FOR_TO
 671: IFFALSE 716
// begin PrepareHuman ( false , rand ( 2 , 4 ) , 6 ) ;
 673: LD_INT 0
 675: PPUSH
 676: LD_INT 2
 678: PPUSH
 679: LD_INT 4
 681: PPUSH
 682: CALL_OW 12
 686: PPUSH
 687: LD_INT 6
 689: PPUSH
 690: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 694: LD_ADDR_EXP 17
 698: PUSH
 699: LD_EXP 17
 703: PPUSH
 704: CALL_OW 44
 708: PPUSH
 709: CALL 40986 0 2
 713: ST_TO_ADDR
// end ;
 714: GO 670
 716: POP
 717: POP
// end else
 718: GO 771
// begin for i in americanSquad do
 720: LD_ADDR_VAR 0 2
 724: PUSH
 725: LD_EXP 17
 729: PUSH
 730: FOR_IN
 731: IFFALSE 769
// if GetClass ( i ) in [ class_sniper , class_soldier ] then
 733: LD_VAR 0 2
 737: PPUSH
 738: CALL_OW 257
 742: PUSH
 743: LD_INT 5
 745: PUSH
 746: LD_INT 1
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: IN
 753: IFFALSE 767
// SetClass ( i , class_engineer ) ;
 755: LD_VAR 0 2
 759: PPUSH
 760: LD_INT 2
 762: PPUSH
 763: CALL_OW 336
 767: GO 730
 769: POP
 770: POP
// end ; uc_side := 2 ;
 771: LD_ADDR_OWVAR 20
 775: PUSH
 776: LD_INT 2
 778: ST_TO_ADDR
// uc_nation := 2 ;
 779: LD_ADDR_OWVAR 21
 783: PUSH
 784: LD_INT 2
 786: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 787: LD_ADDR_EXP 5
 791: PUSH
 792: LD_STRING Heike
 794: PPUSH
 795: LD_EXP 1
 799: NOT
 800: PPUSH
 801: LD_EXP 2
 805: PPUSH
 806: CALL 3585 0 3
 810: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 811: LD_ADDR_EXP 8
 815: PUSH
 816: LD_STRING Ibrahim
 818: PPUSH
 819: LD_EXP 1
 823: NOT
 824: PPUSH
 825: LD_EXP 2
 829: PPUSH
 830: CALL 3585 0 3
 834: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 835: LD_ADDR_EXP 6
 839: PUSH
 840: LD_STRING Givi
 842: PPUSH
 843: LD_EXP 1
 847: NOT
 848: PPUSH
 849: LD_EXP 2
 853: PPUSH
 854: CALL 3585 0 3
 858: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 859: LD_ADDR_EXP 9
 863: PUSH
 864: LD_STRING Kamil
 866: PPUSH
 867: LD_EXP 1
 871: NOT
 872: PPUSH
 873: LD_EXP 2
 877: PPUSH
 878: CALL 3585 0 3
 882: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 883: LD_ADDR_EXP 10
 887: PUSH
 888: LD_STRING Kaia
 890: PPUSH
 891: LD_EXP 1
 895: NOT
 896: PPUSH
 897: LD_EXP 2
 901: PPUSH
 902: CALL 3585 0 3
 906: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 907: LD_ADDR_EXP 11
 911: PUSH
 912: LD_STRING Sophia
 914: PPUSH
 915: LD_EXP 1
 919: NOT
 920: PPUSH
 921: LD_EXP 2
 925: PPUSH
 926: CALL 3585 0 3
 930: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 931: LD_ADDR_EXP 12
 935: PUSH
 936: LD_STRING Markov
 938: PPUSH
 939: LD_EXP 1
 943: NOT
 944: PPUSH
 945: LD_EXP 2
 949: PPUSH
 950: CALL 3585 0 3
 954: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 955: LD_ADDR_EXP 15
 959: PUSH
 960: LD_STRING Aviradze
 962: PPUSH
 963: LD_EXP 1
 967: NOT
 968: PPUSH
 969: LD_EXP 2
 973: PPUSH
 974: CALL 3585 0 3
 978: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 979: LD_ADDR_EXP 14
 983: PUSH
 984: LD_STRING Kurt
 986: PPUSH
 987: LD_EXP 1
 991: NOT
 992: PPUSH
 993: LD_EXP 2
 997: PPUSH
 998: CALL 3585 0 3
1002: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1003: LD_ADDR_EXP 7
1007: PUSH
1008: LD_STRING Mike
1010: PPUSH
1011: LD_EXP 1
1015: NOT
1016: PPUSH
1017: LD_EXP 2
1021: PPUSH
1022: CALL 3585 0 3
1026: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1027: LD_ADDR_EXP 13
1031: PUSH
1032: LD_STRING Olaf
1034: PPUSH
1035: LD_INT 0
1037: PPUSH
1038: LD_STRING 
1040: PPUSH
1041: CALL 3585 0 3
1045: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
1046: LD_ADDR_EXP 16
1050: PUSH
1051: LD_STRING 07_others
1053: PPUSH
1054: CALL_OW 31
1058: ST_TO_ADDR
// veh := [ [ ar_half_tracked , engine_combustion , control_manual , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] , ] ;
1059: LD_ADDR_VAR 0 5
1063: PUSH
1064: LD_INT 14
1066: PUSH
1067: LD_INT 1
1069: PUSH
1070: LD_INT 1
1072: PUSH
1073: LD_INT 25
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: LIST
1080: LIST
1081: PUSH
1082: LD_INT 14
1084: PUSH
1085: LD_INT 1
1087: PUSH
1088: LD_INT 1
1090: PUSH
1091: LD_INT 27
1093: PUSH
1094: EMPTY
1095: LIST
1096: LIST
1097: LIST
1098: LIST
1099: PUSH
1100: LD_INT 14
1102: PUSH
1103: LD_INT 1
1105: PUSH
1106: LD_INT 1
1108: PUSH
1109: LD_INT 27
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: LIST
1116: LIST
1117: PUSH
1118: EMPTY
1119: LIST
1120: LIST
1121: LIST
1122: ST_TO_ADDR
// for i in veh do
1123: LD_ADDR_VAR 0 2
1127: PUSH
1128: LD_VAR 0 5
1132: PUSH
1133: FOR_IN
1134: IFFALSE 1239
// begin vc_chassis := i [ 1 ] ;
1136: LD_ADDR_OWVAR 37
1140: PUSH
1141: LD_VAR 0 2
1145: PUSH
1146: LD_INT 1
1148: ARRAY
1149: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
1150: LD_ADDR_OWVAR 39
1154: PUSH
1155: LD_VAR 0 2
1159: PUSH
1160: LD_INT 2
1162: ARRAY
1163: ST_TO_ADDR
// vc_control := i [ 3 ] ;
1164: LD_ADDR_OWVAR 38
1168: PUSH
1169: LD_VAR 0 2
1173: PUSH
1174: LD_INT 3
1176: ARRAY
1177: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
1178: LD_ADDR_OWVAR 40
1182: PUSH
1183: LD_VAR 0 2
1187: PUSH
1188: LD_INT 4
1190: ARRAY
1191: ST_TO_ADDR
// vc_fuel_battery := 25 ;
1192: LD_ADDR_OWVAR 41
1196: PUSH
1197: LD_INT 25
1199: ST_TO_ADDR
// un := CreateVehicle ;
1200: LD_ADDR_VAR 0 4
1204: PUSH
1205: CALL_OW 45
1209: ST_TO_ADDR
// SetDir ( un , 0 ) ;
1210: LD_VAR 0 4
1214: PPUSH
1215: LD_INT 0
1217: PPUSH
1218: CALL_OW 233
// PlaceUnitArea ( un , heikeVehArea , false ) ;
1222: LD_VAR 0 4
1226: PPUSH
1227: LD_INT 7
1229: PPUSH
1230: LD_INT 0
1232: PPUSH
1233: CALL_OW 49
// end ;
1237: GO 1133
1239: POP
1240: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad union americanSquad ;
1241: LD_ADDR_VAR 0 3
1245: PUSH
1246: LD_EXP 7
1250: PUSH
1251: LD_EXP 8
1255: PUSH
1256: LD_EXP 9
1260: PUSH
1261: LD_EXP 10
1265: PUSH
1266: LD_EXP 11
1270: PUSH
1271: LD_EXP 12
1275: PUSH
1276: LD_EXP 13
1280: PUSH
1281: LD_EXP 14
1285: PUSH
1286: LD_EXP 15
1290: PUSH
1291: EMPTY
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: PUSH
1302: LD_EXP 16
1306: UNION
1307: PUSH
1308: LD_EXP 17
1312: UNION
1313: ST_TO_ADDR
// for i in tmp do
1314: LD_ADDR_VAR 0 2
1318: PUSH
1319: LD_VAR 0 3
1323: PUSH
1324: FOR_IN
1325: IFFALSE 1445
// begin if GetClass ( i ) in [ class_mechanic , class_engineer , class_scientistic ] and FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) then
1327: LD_VAR 0 2
1331: PPUSH
1332: CALL_OW 257
1336: PUSH
1337: LD_INT 3
1339: PUSH
1340: LD_INT 2
1342: PUSH
1343: LD_INT 4
1345: PUSH
1346: EMPTY
1347: LIST
1348: LIST
1349: LIST
1350: IN
1351: PUSH
1352: LD_INT 22
1354: PUSH
1355: LD_INT 2
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: PUSH
1362: LD_INT 58
1364: PUSH
1365: EMPTY
1366: LIST
1367: PUSH
1368: EMPTY
1369: LIST
1370: LIST
1371: PPUSH
1372: CALL_OW 69
1376: AND
1377: IFFALSE 1419
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) [ 1 ] ) else
1379: LD_VAR 0 2
1383: PPUSH
1384: LD_INT 22
1386: PUSH
1387: LD_INT 2
1389: PUSH
1390: EMPTY
1391: LIST
1392: LIST
1393: PUSH
1394: LD_INT 58
1396: PUSH
1397: EMPTY
1398: LIST
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: PPUSH
1404: CALL_OW 69
1408: PUSH
1409: LD_INT 1
1411: ARRAY
1412: PPUSH
1413: CALL_OW 52
1417: GO 1434
// PlaceUnitArea ( i , heikePeopleArea , false ) ;
1419: LD_VAR 0 2
1423: PPUSH
1424: LD_INT 6
1426: PPUSH
1427: LD_INT 0
1429: PPUSH
1430: CALL_OW 49
// ComHold ( i ) ;
1434: LD_VAR 0 2
1438: PPUSH
1439: CALL_OW 140
// end ;
1443: GO 1324
1445: POP
1446: POP
// PlaceUnitArea ( Heike , heikeArea , false ) ;
1447: LD_EXP 5
1451: PPUSH
1452: LD_INT 5
1454: PPUSH
1455: LD_INT 0
1457: PPUSH
1458: CALL_OW 49
// ComTurnUnit ( Heike , ar_dep ) ;
1462: LD_EXP 5
1466: PPUSH
1467: LD_INT 2
1469: PPUSH
1470: CALL_OW 119
// if Givi then
1474: LD_EXP 6
1478: IFFALSE 1510
// begin PlaceUnitXY ( Givi , 129 , 158 , false ) ;
1480: LD_EXP 6
1484: PPUSH
1485: LD_INT 129
1487: PPUSH
1488: LD_INT 158
1490: PPUSH
1491: LD_INT 0
1493: PPUSH
1494: CALL_OW 48
// ComTurnUnit ( Givi , ar_dep ) ;
1498: LD_EXP 6
1502: PPUSH
1503: LD_INT 2
1505: PPUSH
1506: CALL_OW 119
// end ; end ; end_of_file
1510: LD_VAR 0 1
1514: RET
// export kabulAttackers , heikeAttackers , Burlak ; export function PrepareRussian ; var i , un ; begin
1515: LD_INT 0
1517: PPUSH
1518: PPUSH
1519: PPUSH
// uc_side := 3 ;
1520: LD_ADDR_OWVAR 20
1524: PUSH
1525: LD_INT 3
1527: ST_TO_ADDR
// uc_nation := 3 ;
1528: LD_ADDR_OWVAR 21
1532: PUSH
1533: LD_INT 3
1535: ST_TO_ADDR
// Burlak := NewCharacter ( Burlak ) ;
1536: LD_ADDR_EXP 20
1540: PUSH
1541: LD_STRING Burlak
1543: PPUSH
1544: CALL_OW 25
1548: ST_TO_ADDR
// kabulAttackers := [ ] ;
1549: LD_ADDR_EXP 18
1553: PUSH
1554: EMPTY
1555: ST_TO_ADDR
// heikeAttackers := [ ] ;
1556: LD_ADDR_EXP 19
1560: PUSH
1561: EMPTY
1562: ST_TO_ADDR
// for i := 1 to 9 do
1563: LD_ADDR_VAR 0 2
1567: PUSH
1568: DOUBLE
1569: LD_INT 1
1571: DEC
1572: ST_TO_ADDR
1573: LD_INT 9
1575: PUSH
1576: FOR_TO
1577: IFFALSE 1669
// begin PrepareHuman ( false , class_soldier , 0 ) ;
1579: LD_INT 0
1581: PPUSH
1582: LD_INT 1
1584: PPUSH
1585: LD_INT 0
1587: PPUSH
1588: CALL_OW 380
// un := CreateHuman ;
1592: LD_ADDR_VAR 0 3
1596: PUSH
1597: CALL_OW 44
1601: ST_TO_ADDR
// if Prob ( 40 ) then
1602: LD_INT 40
1604: PPUSH
1605: CALL_OW 13
1609: IFFALSE 1623
// SetClass ( un , class_bazooker ) ;
1611: LD_VAR 0 3
1615: PPUSH
1616: LD_INT 9
1618: PPUSH
1619: CALL_OW 336
// SetDir ( un , rand ( 0 , 5 ) ) ;
1623: LD_VAR 0 3
1627: PPUSH
1628: LD_INT 0
1630: PPUSH
1631: LD_INT 5
1633: PPUSH
1634: CALL_OW 12
1638: PPUSH
1639: CALL_OW 233
// PlaceUnitArea ( un , KabulRuDead , false ) ;
1643: LD_VAR 0 3
1647: PPUSH
1648: LD_INT 10
1650: PPUSH
1651: LD_INT 0
1653: PPUSH
1654: CALL_OW 49
// KillUnit ( un ) ;
1658: LD_VAR 0 3
1662: PPUSH
1663: CALL_OW 66
// end ;
1667: GO 1576
1669: POP
1670: POP
// for i := 1 to 9 do
1671: LD_ADDR_VAR 0 2
1675: PUSH
1676: DOUBLE
1677: LD_INT 1
1679: DEC
1680: ST_TO_ADDR
1681: LD_INT 9
1683: PUSH
1684: FOR_TO
1685: IFFALSE 1906
// begin if rand ( 0 , 1 ) then
1687: LD_INT 0
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: CALL_OW 12
1697: IFFALSE 1760
// begin PrepareHuman ( false , class_soldier , 7 ) ;
1699: LD_INT 0
1701: PPUSH
1702: LD_INT 1
1704: PPUSH
1705: LD_INT 7
1707: PPUSH
1708: CALL_OW 380
// un := CreateHuman ;
1712: LD_ADDR_VAR 0 3
1716: PUSH
1717: CALL_OW 44
1721: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1722: LD_VAR 0 3
1726: PPUSH
1727: LD_INT 1
1729: PPUSH
1730: CALL_OW 233
// PlaceUnitArea ( un , kabulRuArea , false ) ;
1734: LD_VAR 0 3
1738: PPUSH
1739: LD_INT 3
1741: PPUSH
1742: LD_INT 0
1744: PPUSH
1745: CALL_OW 49
// ComHold ( un ) ;
1749: LD_VAR 0 3
1753: PPUSH
1754: CALL_OW 140
// end else
1758: GO 1875
// begin vc_chassis := ru_medium_tracked ;
1760: LD_ADDR_OWVAR 37
1764: PUSH
1765: LD_INT 22
1767: ST_TO_ADDR
// vc_engine := engine_combustion ;
1768: LD_ADDR_OWVAR 39
1772: PUSH
1773: LD_INT 1
1775: ST_TO_ADDR
// vc_control := control_manual ;
1776: LD_ADDR_OWVAR 38
1780: PUSH
1781: LD_INT 1
1783: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
1784: LD_ADDR_OWVAR 40
1788: PUSH
1789: LD_INT 44
1791: PUSH
1792: LD_INT 43
1794: PUSH
1795: LD_INT 45
1797: PUSH
1798: EMPTY
1799: LIST
1800: LIST
1801: LIST
1802: PUSH
1803: LD_INT 1
1805: PPUSH
1806: LD_INT 3
1808: PPUSH
1809: CALL_OW 12
1813: ARRAY
1814: ST_TO_ADDR
// un := CreateVehicle ;
1815: LD_ADDR_VAR 0 3
1819: PUSH
1820: CALL_OW 45
1824: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1825: LD_VAR 0 3
1829: PPUSH
1830: LD_INT 1
1832: PPUSH
1833: CALL_OW 233
// PlaceUnitArea ( un , kabulRuArea , false ) ;
1837: LD_VAR 0 3
1841: PPUSH
1842: LD_INT 3
1844: PPUSH
1845: LD_INT 0
1847: PPUSH
1848: CALL_OW 49
// ComHold ( un ) ;
1852: LD_VAR 0 3
1856: PPUSH
1857: CALL_OW 140
// PlaceHumanInUnit ( CreateHuman , un ) ;
1861: CALL_OW 44
1865: PPUSH
1866: LD_VAR 0 3
1870: PPUSH
1871: CALL_OW 52
// end ; kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
1875: LD_ADDR_EXP 18
1879: PUSH
1880: LD_EXP 18
1884: PPUSH
1885: LD_EXP 18
1889: PUSH
1890: LD_INT 1
1892: PLUS
1893: PPUSH
1894: LD_VAR 0 3
1898: PPUSH
1899: CALL_OW 1
1903: ST_TO_ADDR
// end ;
1904: GO 1684
1906: POP
1907: POP
// for i := 1 to 5 do
1908: LD_ADDR_VAR 0 2
1912: PUSH
1913: DOUBLE
1914: LD_INT 1
1916: DEC
1917: ST_TO_ADDR
1918: LD_INT 5
1920: PUSH
1921: FOR_TO
1922: IFFALSE 2155
// begin if rand ( 0 , 1 ) then
1924: LD_INT 0
1926: PPUSH
1927: LD_INT 1
1929: PPUSH
1930: CALL_OW 12
1934: IFFALSE 2009
// begin PrepareHuman ( false , class_soldier , 7 ) ;
1936: LD_INT 0
1938: PPUSH
1939: LD_INT 1
1941: PPUSH
1942: LD_INT 7
1944: PPUSH
1945: CALL_OW 380
// un := CreateHuman ;
1949: LD_ADDR_VAR 0 3
1953: PUSH
1954: CALL_OW 44
1958: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1959: LD_VAR 0 3
1963: PPUSH
1964: LD_INT 1
1966: PPUSH
1967: CALL_OW 233
// SetClass ( un , class_bazooker ) ;
1971: LD_VAR 0 3
1975: PPUSH
1976: LD_INT 9
1978: PPUSH
1979: CALL_OW 336
// PlaceUnitArea ( un , kabulRu2Area , false ) ;
1983: LD_VAR 0 3
1987: PPUSH
1988: LD_INT 8
1990: PPUSH
1991: LD_INT 0
1993: PPUSH
1994: CALL_OW 49
// ComHold ( un ) ;
1998: LD_VAR 0 3
2002: PPUSH
2003: CALL_OW 140
// end else
2007: GO 2124
// begin vc_chassis := ru_heavy_wheeled ;
2009: LD_ADDR_OWVAR 37
2013: PUSH
2014: LD_INT 23
2016: ST_TO_ADDR
// vc_engine := engine_combustion ;
2017: LD_ADDR_OWVAR 39
2021: PUSH
2022: LD_INT 1
2024: ST_TO_ADDR
// vc_control := control_manual ;
2025: LD_ADDR_OWVAR 38
2029: PUSH
2030: LD_INT 1
2032: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
2033: LD_ADDR_OWVAR 40
2037: PUSH
2038: LD_INT 44
2040: PUSH
2041: LD_INT 43
2043: PUSH
2044: LD_INT 45
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: LIST
2051: PUSH
2052: LD_INT 1
2054: PPUSH
2055: LD_INT 3
2057: PPUSH
2058: CALL_OW 12
2062: ARRAY
2063: ST_TO_ADDR
// un := CreateVehicle ;
2064: LD_ADDR_VAR 0 3
2068: PUSH
2069: CALL_OW 45
2073: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2074: LD_VAR 0 3
2078: PPUSH
2079: LD_INT 4
2081: PPUSH
2082: CALL_OW 233
// PlaceUnitArea ( un , kabulRu2Area , false ) ;
2086: LD_VAR 0 3
2090: PPUSH
2091: LD_INT 8
2093: PPUSH
2094: LD_INT 0
2096: PPUSH
2097: CALL_OW 49
// ComHold ( un ) ;
2101: LD_VAR 0 3
2105: PPUSH
2106: CALL_OW 140
// PlaceHumanInUnit ( CreateHuman , un ) ;
2110: CALL_OW 44
2114: PPUSH
2115: LD_VAR 0 3
2119: PPUSH
2120: CALL_OW 52
// end ; kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
2124: LD_ADDR_EXP 18
2128: PUSH
2129: LD_EXP 18
2133: PPUSH
2134: LD_EXP 18
2138: PUSH
2139: LD_INT 1
2141: PLUS
2142: PPUSH
2143: LD_VAR 0 3
2147: PPUSH
2148: CALL_OW 1
2152: ST_TO_ADDR
// end ;
2153: GO 1921
2155: POP
2156: POP
// for i := 1 to 5 do
2157: LD_ADDR_VAR 0 2
2161: PUSH
2162: DOUBLE
2163: LD_INT 1
2165: DEC
2166: ST_TO_ADDR
2167: LD_INT 5
2169: PUSH
2170: FOR_TO
2171: IFFALSE 2275
// begin PrepareHuman ( false , class_soldier , 7 ) ;
2173: LD_INT 0
2175: PPUSH
2176: LD_INT 1
2178: PPUSH
2179: LD_INT 7
2181: PPUSH
2182: CALL_OW 380
// un := CreateHuman ;
2186: LD_ADDR_VAR 0 3
2190: PUSH
2191: CALL_OW 44
2195: ST_TO_ADDR
// SetDir ( un , 0 ) ;
2196: LD_VAR 0 3
2200: PPUSH
2201: LD_INT 0
2203: PPUSH
2204: CALL_OW 233
// SetClass ( un , class_bazooker ) ;
2208: LD_VAR 0 3
2212: PPUSH
2213: LD_INT 9
2215: PPUSH
2216: CALL_OW 336
// PlaceUnitArea ( un , kabulRu3Area , false ) ;
2220: LD_VAR 0 3
2224: PPUSH
2225: LD_INT 9
2227: PPUSH
2228: LD_INT 0
2230: PPUSH
2231: CALL_OW 49
// ComHold ( un ) ;
2235: LD_VAR 0 3
2239: PPUSH
2240: CALL_OW 140
// kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
2244: LD_ADDR_EXP 18
2248: PUSH
2249: LD_EXP 18
2253: PPUSH
2254: LD_EXP 18
2258: PUSH
2259: LD_INT 1
2261: PLUS
2262: PPUSH
2263: LD_VAR 0 3
2267: PPUSH
2268: CALL_OW 1
2272: ST_TO_ADDR
// end ;
2273: GO 2170
2275: POP
2276: POP
// for i := 1 to 12 do
2277: LD_ADDR_VAR 0 2
2281: PUSH
2282: DOUBLE
2283: LD_INT 1
2285: DEC
2286: ST_TO_ADDR
2287: LD_INT 12
2289: PUSH
2290: FOR_TO
2291: IFFALSE 2528
// begin if Prob ( 22 ) then
2293: LD_INT 22
2295: PPUSH
2296: CALL_OW 13
2300: IFFALSE 2363
// begin PrepareHuman ( false , class_soldier , 7 ) ;
2302: LD_INT 0
2304: PPUSH
2305: LD_INT 1
2307: PPUSH
2308: LD_INT 7
2310: PPUSH
2311: CALL_OW 380
// un := CreateHuman ;
2315: LD_ADDR_VAR 0 3
2319: PUSH
2320: CALL_OW 44
2324: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2325: LD_VAR 0 3
2329: PPUSH
2330: LD_INT 3
2332: PPUSH
2333: CALL_OW 233
// PlaceUnitArea ( un , heikeRuArea , false ) ;
2337: LD_VAR 0 3
2341: PPUSH
2342: LD_INT 4
2344: PPUSH
2345: LD_INT 0
2347: PPUSH
2348: CALL_OW 49
// ComHold ( un ) ;
2352: LD_VAR 0 3
2356: PPUSH
2357: CALL_OW 140
// end else
2361: GO 2497
// begin vc_chassis := [ ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] ;
2363: LD_ADDR_OWVAR 37
2367: PUSH
2368: LD_INT 22
2370: PUSH
2371: LD_INT 24
2373: PUSH
2374: EMPTY
2375: LIST
2376: LIST
2377: PUSH
2378: LD_INT 1
2380: PPUSH
2381: LD_INT 2
2383: PPUSH
2384: CALL_OW 12
2388: ARRAY
2389: ST_TO_ADDR
// vc_engine := engine_combustion ;
2390: LD_ADDR_OWVAR 39
2394: PUSH
2395: LD_INT 1
2397: ST_TO_ADDR
// vc_control := control_manual ;
2398: LD_ADDR_OWVAR 38
2402: PUSH
2403: LD_INT 1
2405: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
2406: LD_ADDR_OWVAR 40
2410: PUSH
2411: LD_INT 44
2413: PUSH
2414: LD_INT 43
2416: PUSH
2417: LD_INT 45
2419: PUSH
2420: EMPTY
2421: LIST
2422: LIST
2423: LIST
2424: PUSH
2425: LD_INT 1
2427: PPUSH
2428: LD_INT 3
2430: PPUSH
2431: CALL_OW 12
2435: ARRAY
2436: ST_TO_ADDR
// un := CreateVehicle ;
2437: LD_ADDR_VAR 0 3
2441: PUSH
2442: CALL_OW 45
2446: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2447: LD_VAR 0 3
2451: PPUSH
2452: LD_INT 3
2454: PPUSH
2455: CALL_OW 233
// PlaceUnitArea ( un , heikeRuArea , false ) ;
2459: LD_VAR 0 3
2463: PPUSH
2464: LD_INT 4
2466: PPUSH
2467: LD_INT 0
2469: PPUSH
2470: CALL_OW 49
// ComHold ( un ) ;
2474: LD_VAR 0 3
2478: PPUSH
2479: CALL_OW 140
// PlaceHumanInUnit ( CreateHuman , un ) ;
2483: CALL_OW 44
2487: PPUSH
2488: LD_VAR 0 3
2492: PPUSH
2493: CALL_OW 52
// end ; heikeAttackers := Replace ( heikeAttackers , heikeAttackers + 1 , un ) ;
2497: LD_ADDR_EXP 19
2501: PUSH
2502: LD_EXP 19
2506: PPUSH
2507: LD_EXP 19
2511: PUSH
2512: LD_INT 1
2514: PLUS
2515: PPUSH
2516: LD_VAR 0 3
2520: PPUSH
2521: CALL_OW 1
2525: ST_TO_ADDR
// end ;
2526: GO 2290
2528: POP
2529: POP
// end ;
2530: LD_VAR 0 1
2534: RET
// every 0 0$2 trigger startAttackOnKabul and kabulAttackers do var i ;
2535: LD_EXP 3
2539: PUSH
2540: LD_EXP 18
2544: AND
2545: IFFALSE 2605
2547: GO 2549
2549: DISABLE
2550: LD_INT 0
2552: PPUSH
// begin enable ;
2553: ENABLE
// for i in kabulAttackers do
2554: LD_ADDR_VAR 0 1
2558: PUSH
2559: LD_EXP 18
2563: PUSH
2564: FOR_IN
2565: IFFALSE 2603
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 5 ] ) , i ) ) ;
2567: LD_VAR 0 1
2571: PPUSH
2572: LD_INT 22
2574: PUSH
2575: LD_INT 5
2577: PUSH
2578: EMPTY
2579: LIST
2580: LIST
2581: PPUSH
2582: CALL_OW 69
2586: PPUSH
2587: LD_VAR 0 1
2591: PPUSH
2592: CALL_OW 74
2596: PPUSH
2597: CALL_OW 115
2601: GO 2564
2603: POP
2604: POP
// end ;
2605: PPOPN 1
2607: END
// every 0 0$2 trigger startAttackOnHeike and heikeAttackers do var i ;
2608: LD_EXP 4
2612: PUSH
2613: LD_EXP 19
2617: AND
2618: IFFALSE 2678
2620: GO 2622
2622: DISABLE
2623: LD_INT 0
2625: PPUSH
// begin enable ;
2626: ENABLE
// for i in heikeAttackers do
2627: LD_ADDR_VAR 0 1
2631: PUSH
2632: LD_EXP 19
2636: PUSH
2637: FOR_IN
2638: IFFALSE 2676
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ) ;
2640: LD_VAR 0 1
2644: PPUSH
2645: LD_INT 22
2647: PUSH
2648: LD_INT 2
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: PPUSH
2655: CALL_OW 69
2659: PPUSH
2660: LD_VAR 0 1
2664: PPUSH
2665: CALL_OW 74
2669: PPUSH
2670: CALL_OW 115
2674: GO 2637
2676: POP
2677: POP
// end ; end_of_file
2678: PPOPN 1
2680: END
// export function Action ; var i ; begin
2681: LD_INT 0
2683: PPUSH
2684: PPUSH
// music_nat := nation_russian ;
2685: LD_ADDR_OWVAR 71
2689: PUSH
2690: LD_INT 3
2692: ST_TO_ADDR
// Video ( true ) ;
2693: LD_INT 1
2695: PPUSH
2696: CALL 40958 0 1
// PlaceSeeing ( 111 , 168 , 2 , - 25 ) ;
2700: LD_INT 111
2702: PPUSH
2703: LD_INT 168
2705: PPUSH
2706: LD_INT 2
2708: PPUSH
2709: LD_INT 25
2711: NEG
2712: PPUSH
2713: CALL_OW 330
// PlaceSeeing ( 102 , 47 , 2 , - 40 ) ;
2717: LD_INT 102
2719: PPUSH
2720: LD_INT 47
2722: PPUSH
2723: LD_INT 2
2725: PPUSH
2726: LD_INT 40
2728: NEG
2729: PPUSH
2730: CALL_OW 330
// CenterNowOnUnits ( Heike ) ;
2734: LD_EXP 5
2738: PPUSH
2739: CALL_OW 87
// startAttackOnKabul := true ;
2743: LD_ADDR_EXP 3
2747: PUSH
2748: LD_INT 1
2750: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2751: LD_INT 70
2753: PPUSH
2754: CALL_OW 67
// CenterOnXY ( 102 , 47 ) ;
2758: LD_INT 102
2760: PPUSH
2761: LD_INT 47
2763: PPUSH
2764: CALL_OW 84
// if Givi then
2768: LD_EXP 6
2772: IFFALSE 2963
// begin ComMoveXY ( Givi , 113 , 162 ) ;
2774: LD_EXP 6
2778: PPUSH
2779: LD_INT 113
2781: PPUSH
2782: LD_INT 162
2784: PPUSH
2785: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
2789: LD_EXP 6
2793: PPUSH
2794: LD_EXP 5
2798: PPUSH
2799: CALL_OW 179
// Say ( Givi , DG-Intro-1 ) ;
2803: LD_EXP 6
2807: PPUSH
2808: LD_STRING DG-Intro-1
2810: PPUSH
2811: CALL_OW 88
// Say ( Givi , DG-Intro-2 ) ;
2815: LD_EXP 6
2819: PPUSH
2820: LD_STRING DG-Intro-2
2822: PPUSH
2823: CALL_OW 88
// CenterOnUnits ( Heike ) ;
2827: LD_EXP 5
2831: PPUSH
2832: CALL_OW 85
// RemoveSeeing ( 102 , 47 , 2 ) ;
2836: LD_INT 102
2838: PPUSH
2839: LD_INT 47
2841: PPUSH
2842: LD_INT 2
2844: PPUSH
2845: CALL_OW 331
// wait ( 0 0$0.3 ) ;
2849: LD_INT 10
2851: PPUSH
2852: CALL_OW 67
// Say ( Heike , DH-Intro-3 ) ;
2856: LD_EXP 5
2860: PPUSH
2861: LD_STRING DH-Intro-3
2863: PPUSH
2864: CALL_OW 88
// if Mike then
2868: LD_EXP 7
2872: IFFALSE 2961
// begin PlaceSeeing ( 92 , 129 , 2 , - 18 ) ;
2874: LD_INT 92
2876: PPUSH
2877: LD_INT 129
2879: PPUSH
2880: LD_INT 2
2882: PPUSH
2883: LD_INT 18
2885: NEG
2886: PPUSH
2887: CALL_OW 330
// CenterOnXY ( 92 , 129 ) ;
2891: LD_INT 92
2893: PPUSH
2894: LD_INT 129
2896: PPUSH
2897: CALL_OW 84
// ComTurnUnit ( [ Mike , Kaia ] , Heike ) ;
2901: LD_EXP 7
2905: PUSH
2906: LD_EXP 10
2910: PUSH
2911: EMPTY
2912: LIST
2913: LIST
2914: PPUSH
2915: LD_EXP 5
2919: PPUSH
2920: CALL_OW 119
// Say ( Mike , DM-Intro-4 ) ;
2924: LD_EXP 7
2928: PPUSH
2929: LD_STRING DM-Intro-4
2931: PPUSH
2932: CALL_OW 88
// Say ( Kaia , DK-Intro-5 ) ;
2936: LD_EXP 10
2940: PPUSH
2941: LD_STRING DK-Intro-5
2943: PPUSH
2944: CALL_OW 88
// RemoveSeeing ( 92 , 129 , 2 ) ;
2948: LD_INT 92
2950: PPUSH
2951: LD_INT 129
2953: PPUSH
2954: LD_INT 2
2956: PPUSH
2957: CALL_OW 331
// end ; end else
2961: GO 3216
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-1 ) then
2963: LD_EXP 16
2967: PPUSH
2968: LD_INT 26
2970: PUSH
2971: LD_INT 1
2973: PUSH
2974: EMPTY
2975: LIST
2976: LIST
2977: PPUSH
2978: CALL_OW 72
2982: PUSH
2983: LD_INT 1
2985: ARRAY
2986: PPUSH
2987: LD_STRING DArm-Intro-b-1
2989: PPUSH
2990: CALL_OW 88
2994: NOT
2995: IFFALSE 3028
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-1 ) ;
2997: LD_EXP 16
3001: PPUSH
3002: LD_INT 26
3004: PUSH
3005: LD_INT 2
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: PPUSH
3012: CALL_OW 72
3016: PUSH
3017: LD_INT 1
3019: ARRAY
3020: PPUSH
3021: LD_STRING DArf-Intro-b-1
3023: PPUSH
3024: CALL_OW 88
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-2 ) then
3028: LD_EXP 16
3032: PPUSH
3033: LD_INT 26
3035: PUSH
3036: LD_INT 1
3038: PUSH
3039: EMPTY
3040: LIST
3041: LIST
3042: PPUSH
3043: CALL_OW 72
3047: PUSH
3048: LD_INT 1
3050: ARRAY
3051: PPUSH
3052: LD_STRING DArm-Intro-b-2
3054: PPUSH
3055: CALL_OW 88
3059: NOT
3060: IFFALSE 3093
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-2 ) ;
3062: LD_EXP 16
3066: PPUSH
3067: LD_INT 26
3069: PUSH
3070: LD_INT 2
3072: PUSH
3073: EMPTY
3074: LIST
3075: LIST
3076: PPUSH
3077: CALL_OW 72
3081: PUSH
3082: LD_INT 1
3084: ARRAY
3085: PPUSH
3086: LD_STRING DArf-Intro-b-2
3088: PPUSH
3089: CALL_OW 88
// if Kaia then
3093: LD_EXP 10
3097: IFFALSE 3111
// Say ( Kaia , DK-Intro-5 ) ;
3099: LD_EXP 10
3103: PPUSH
3104: LD_STRING DK-Intro-5
3106: PPUSH
3107: CALL_OW 88
// PlaceSeeing ( 92 , 129 , 2 , - 18 ) ;
3111: LD_INT 92
3113: PPUSH
3114: LD_INT 129
3116: PPUSH
3117: LD_INT 2
3119: PPUSH
3120: LD_INT 18
3122: NEG
3123: PPUSH
3124: CALL_OW 330
// CenterOnXY ( 92 , 129 ) ;
3128: LD_INT 92
3130: PPUSH
3131: LD_INT 129
3133: PPUSH
3134: CALL_OW 84
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-4 ) then
3138: LD_EXP 16
3142: PPUSH
3143: LD_INT 26
3145: PUSH
3146: LD_INT 1
3148: PUSH
3149: EMPTY
3150: LIST
3151: LIST
3152: PPUSH
3153: CALL_OW 72
3157: PUSH
3158: LD_INT 1
3160: ARRAY
3161: PPUSH
3162: LD_STRING DArm-Intro-b-4
3164: PPUSH
3165: CALL_OW 88
3169: NOT
3170: IFFALSE 3203
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-4 ) ;
3172: LD_EXP 16
3176: PPUSH
3177: LD_INT 26
3179: PUSH
3180: LD_INT 2
3182: PUSH
3183: EMPTY
3184: LIST
3185: LIST
3186: PPUSH
3187: CALL_OW 72
3191: PUSH
3192: LD_INT 1
3194: ARRAY
3195: PPUSH
3196: LD_STRING DArf-Intro-b-4
3198: PPUSH
3199: CALL_OW 88
// RemoveSeeing ( 92 , 129 , 2 ) ;
3203: LD_INT 92
3205: PPUSH
3206: LD_INT 129
3208: PPUSH
3209: LD_INT 2
3211: PPUSH
3212: CALL_OW 331
// end ; CenterOnUnits ( Heike ) ;
3216: LD_EXP 5
3220: PPUSH
3221: CALL_OW 85
// SayRadio ( Burlak , DB-Intro-6 ) ;
3225: LD_EXP 20
3229: PPUSH
3230: LD_STRING DB-Intro-6
3232: PPUSH
3233: CALL_OW 94
// Say ( Heike , DH-Intro-7 ) ;
3237: LD_EXP 5
3241: PPUSH
3242: LD_STRING DH-Intro-7
3244: PPUSH
3245: CALL_OW 88
// SayRadio ( Burlak , DB-Intro-8 ) ;
3249: LD_EXP 20
3253: PPUSH
3254: LD_STRING DB-Intro-8
3256: PPUSH
3257: CALL_OW 94
// SayRadio ( Burlak , DB-Intro-9 ) ;
3261: LD_EXP 20
3265: PPUSH
3266: LD_STRING DB-Intro-9
3268: PPUSH
3269: CALL_OW 94
// if Givi then
3273: LD_EXP 6
3277: IFFALSE 3305
// begin Say ( Givi , DG-Intro-10 ) ;
3279: LD_EXP 6
3283: PPUSH
3284: LD_STRING DG-Intro-10
3286: PPUSH
3287: CALL_OW 88
// Say ( Kaia , DK-Intro-11 ) ;
3291: LD_EXP 10
3295: PPUSH
3296: LD_STRING DK-Intro-11
3298: PPUSH
3299: CALL_OW 88
// end else
3303: GO 3370
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-10 ) then
3305: LD_EXP 16
3309: PPUSH
3310: LD_INT 26
3312: PUSH
3313: LD_INT 1
3315: PUSH
3316: EMPTY
3317: LIST
3318: LIST
3319: PPUSH
3320: CALL_OW 72
3324: PUSH
3325: LD_INT 1
3327: ARRAY
3328: PPUSH
3329: LD_STRING DArm-Intro-b-10
3331: PPUSH
3332: CALL_OW 88
3336: NOT
3337: IFFALSE 3370
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-10 ) ;
3339: LD_EXP 16
3343: PPUSH
3344: LD_INT 26
3346: PUSH
3347: LD_INT 2
3349: PUSH
3350: EMPTY
3351: LIST
3352: LIST
3353: PPUSH
3354: CALL_OW 72
3358: PUSH
3359: LD_INT 1
3361: ARRAY
3362: PPUSH
3363: LD_STRING DArf-Intro-b-10
3365: PPUSH
3366: CALL_OW 88
// Say ( Mike , DM-Intro-12 ) ;
3370: LD_EXP 7
3374: PPUSH
3375: LD_STRING DM-Intro-12
3377: PPUSH
3378: CALL_OW 88
// Say ( Kurt , DKs-Intro-13 ) ;
3382: LD_EXP 14
3386: PPUSH
3387: LD_STRING DKs-Intro-13
3389: PPUSH
3390: CALL_OW 88
// Say ( Kamil , DKam-Intro-14 ) ;
3394: LD_EXP 9
3398: PPUSH
3399: LD_STRING DKam-Intro-14
3401: PPUSH
3402: CALL_OW 88
// case Query ( QSurrender ) of 1 :
3406: LD_STRING QSurrender
3408: PPUSH
3409: CALL_OW 97
3413: PUSH
3414: LD_INT 1
3416: DOUBLE
3417: EQUAL
3418: IFTRUE 3422
3420: GO 3441
3422: POP
// begin Say ( Heike , DH-Intro-16 ) ;
3423: LD_EXP 5
3427: PPUSH
3428: LD_STRING DH-Intro-16
3430: PPUSH
3431: CALL_OW 88
// missionEnd ;
3435: CALL 3567 0 0
// end ; 2 :
3439: GO 3485
3441: LD_INT 2
3443: DOUBLE
3444: EQUAL
3445: IFTRUE 3449
3447: GO 3484
3449: POP
// begin Say ( Heike , DH-Intro-a-16 ) ;
3450: LD_EXP 5
3454: PPUSH
3455: LD_STRING DH-Intro-a-16
3457: PPUSH
3458: CALL_OW 88
// SayRadio ( Burlak , DB-Intro-a-17 ) ;
3462: LD_EXP 20
3466: PPUSH
3467: LD_STRING DB-Intro-a-17
3469: PPUSH
3470: CALL_OW 94
// startAttackOnHeike := true ;
3474: LD_ADDR_EXP 4
3478: PUSH
3479: LD_INT 1
3481: ST_TO_ADDR
// end ; end ;
3482: GO 3485
3484: POP
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
3485: LD_ADDR_VAR 0 2
3489: PUSH
3490: LD_INT 22
3492: PUSH
3493: LD_INT 2
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: PPUSH
3500: CALL_OW 69
3504: PUSH
3505: FOR_IN
3506: IFFALSE 3525
// ComAgressiveMove ( i , 98 , 143 ) ;
3508: LD_VAR 0 2
3512: PPUSH
3513: LD_INT 98
3515: PPUSH
3516: LD_INT 143
3518: PPUSH
3519: CALL_OW 114
3523: GO 3505
3525: POP
3526: POP
// CenterOnXY ( 98 , 143 ) ;
3527: LD_INT 98
3529: PPUSH
3530: LD_INT 143
3532: PPUSH
3533: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
3537: LD_INT 35
3539: PPUSH
3540: CALL_OW 67
// until IsDead ( Heike ) ;
3544: LD_EXP 5
3548: PPUSH
3549: CALL_OW 301
3553: IFFALSE 3537
// YouLost ( HeikeNoSurrender ) ;
3555: LD_STRING HeikeNoSurrender
3557: PPUSH
3558: CALL_OW 104
// end ;
3562: LD_VAR 0 1
3566: RET
// function MissionEnd ( ) ; begin
3567: LD_INT 0
3569: PPUSH
// ChangeMap ( 1 , %_cont ) ;
3570: LD_INT 1
3572: PPUSH
3573: LD_STRING %_cont
3575: PPUSH
3576: CALL_OW 340
// end ; end_of_file
3580: LD_VAR 0 1
3584: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
3585: LD_INT 0
3587: PPUSH
3588: PPUSH
// if exist_mode then
3589: LD_VAR 0 2
3593: IFFALSE 3618
// unit := CreateCharacter ( prefix & ident ) else
3595: LD_ADDR_VAR 0 5
3599: PUSH
3600: LD_VAR 0 3
3604: PUSH
3605: LD_VAR 0 1
3609: STR
3610: PPUSH
3611: CALL_OW 34
3615: ST_TO_ADDR
3616: GO 3633
// unit := NewCharacter ( ident ) ;
3618: LD_ADDR_VAR 0 5
3622: PUSH
3623: LD_VAR 0 1
3627: PPUSH
3628: CALL_OW 25
3632: ST_TO_ADDR
// result := unit ;
3633: LD_ADDR_VAR 0 4
3637: PUSH
3638: LD_VAR 0 5
3642: ST_TO_ADDR
// end ;
3643: LD_VAR 0 4
3647: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3648: LD_INT 0
3650: PPUSH
3651: PPUSH
// if not side or not nation then
3652: LD_VAR 0 1
3656: NOT
3657: PUSH
3658: LD_VAR 0 2
3662: NOT
3663: OR
3664: IFFALSE 3668
// exit ;
3666: GO 4436
// case nation of nation_american :
3668: LD_VAR 0 2
3672: PUSH
3673: LD_INT 1
3675: DOUBLE
3676: EQUAL
3677: IFTRUE 3681
3679: GO 3895
3681: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
3682: LD_ADDR_VAR 0 4
3686: PUSH
3687: LD_INT 35
3689: PUSH
3690: LD_INT 45
3692: PUSH
3693: LD_INT 46
3695: PUSH
3696: LD_INT 47
3698: PUSH
3699: LD_INT 82
3701: PUSH
3702: LD_INT 83
3704: PUSH
3705: LD_INT 84
3707: PUSH
3708: LD_INT 85
3710: PUSH
3711: LD_INT 86
3713: PUSH
3714: LD_INT 1
3716: PUSH
3717: LD_INT 2
3719: PUSH
3720: LD_INT 6
3722: PUSH
3723: LD_INT 15
3725: PUSH
3726: LD_INT 16
3728: PUSH
3729: LD_INT 7
3731: PUSH
3732: LD_INT 12
3734: PUSH
3735: LD_INT 13
3737: PUSH
3738: LD_INT 10
3740: PUSH
3741: LD_INT 14
3743: PUSH
3744: LD_INT 20
3746: PUSH
3747: LD_INT 21
3749: PUSH
3750: LD_INT 22
3752: PUSH
3753: LD_INT 25
3755: PUSH
3756: LD_INT 32
3758: PUSH
3759: LD_INT 27
3761: PUSH
3762: LD_INT 36
3764: PUSH
3765: LD_INT 69
3767: PUSH
3768: LD_INT 39
3770: PUSH
3771: LD_INT 34
3773: PUSH
3774: LD_INT 40
3776: PUSH
3777: LD_INT 48
3779: PUSH
3780: LD_INT 49
3782: PUSH
3783: LD_INT 50
3785: PUSH
3786: LD_INT 51
3788: PUSH
3789: LD_INT 52
3791: PUSH
3792: LD_INT 53
3794: PUSH
3795: LD_INT 54
3797: PUSH
3798: LD_INT 55
3800: PUSH
3801: LD_INT 56
3803: PUSH
3804: LD_INT 57
3806: PUSH
3807: LD_INT 58
3809: PUSH
3810: LD_INT 59
3812: PUSH
3813: LD_INT 60
3815: PUSH
3816: LD_INT 61
3818: PUSH
3819: LD_INT 62
3821: PUSH
3822: LD_INT 80
3824: PUSH
3825: LD_INT 82
3827: PUSH
3828: LD_INT 83
3830: PUSH
3831: LD_INT 84
3833: PUSH
3834: LD_INT 85
3836: PUSH
3837: LD_INT 86
3839: PUSH
3840: EMPTY
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: LIST
3866: LIST
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: LIST
3882: LIST
3883: LIST
3884: LIST
3885: LIST
3886: LIST
3887: LIST
3888: LIST
3889: LIST
3890: LIST
3891: LIST
3892: ST_TO_ADDR
3893: GO 4360
3895: LD_INT 2
3897: DOUBLE
3898: EQUAL
3899: IFTRUE 3903
3901: GO 4129
3903: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3904: LD_ADDR_VAR 0 4
3908: PUSH
3909: LD_INT 35
3911: PUSH
3912: LD_INT 45
3914: PUSH
3915: LD_INT 46
3917: PUSH
3918: LD_INT 47
3920: PUSH
3921: LD_INT 82
3923: PUSH
3924: LD_INT 83
3926: PUSH
3927: LD_INT 84
3929: PUSH
3930: LD_INT 85
3932: PUSH
3933: LD_INT 87
3935: PUSH
3936: LD_INT 70
3938: PUSH
3939: LD_INT 1
3941: PUSH
3942: LD_INT 11
3944: PUSH
3945: LD_INT 3
3947: PUSH
3948: LD_INT 4
3950: PUSH
3951: LD_INT 5
3953: PUSH
3954: LD_INT 6
3956: PUSH
3957: LD_INT 15
3959: PUSH
3960: LD_INT 18
3962: PUSH
3963: LD_INT 7
3965: PUSH
3966: LD_INT 17
3968: PUSH
3969: LD_INT 8
3971: PUSH
3972: LD_INT 20
3974: PUSH
3975: LD_INT 21
3977: PUSH
3978: LD_INT 22
3980: PUSH
3981: LD_INT 72
3983: PUSH
3984: LD_INT 26
3986: PUSH
3987: LD_INT 69
3989: PUSH
3990: LD_INT 39
3992: PUSH
3993: LD_INT 40
3995: PUSH
3996: LD_INT 41
3998: PUSH
3999: LD_INT 42
4001: PUSH
4002: LD_INT 43
4004: PUSH
4005: LD_INT 48
4007: PUSH
4008: LD_INT 49
4010: PUSH
4011: LD_INT 50
4013: PUSH
4014: LD_INT 51
4016: PUSH
4017: LD_INT 52
4019: PUSH
4020: LD_INT 53
4022: PUSH
4023: LD_INT 54
4025: PUSH
4026: LD_INT 55
4028: PUSH
4029: LD_INT 56
4031: PUSH
4032: LD_INT 60
4034: PUSH
4035: LD_INT 61
4037: PUSH
4038: LD_INT 62
4040: PUSH
4041: LD_INT 66
4043: PUSH
4044: LD_INT 67
4046: PUSH
4047: LD_INT 68
4049: PUSH
4050: LD_INT 81
4052: PUSH
4053: LD_INT 82
4055: PUSH
4056: LD_INT 83
4058: PUSH
4059: LD_INT 84
4061: PUSH
4062: LD_INT 85
4064: PUSH
4065: LD_INT 87
4067: PUSH
4068: LD_INT 88
4070: PUSH
4071: EMPTY
4072: LIST
4073: LIST
4074: LIST
4075: LIST
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: LIST
4090: LIST
4091: LIST
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: LIST
4097: LIST
4098: LIST
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: LIST
4104: LIST
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: LIST
4110: LIST
4111: LIST
4112: LIST
4113: LIST
4114: LIST
4115: LIST
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: LIST
4121: LIST
4122: LIST
4123: LIST
4124: LIST
4125: LIST
4126: ST_TO_ADDR
4127: GO 4360
4129: LD_INT 3
4131: DOUBLE
4132: EQUAL
4133: IFTRUE 4137
4135: GO 4359
4137: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
4138: LD_ADDR_VAR 0 4
4142: PUSH
4143: LD_INT 46
4145: PUSH
4146: LD_INT 47
4148: PUSH
4149: LD_INT 1
4151: PUSH
4152: LD_INT 2
4154: PUSH
4155: LD_INT 82
4157: PUSH
4158: LD_INT 83
4160: PUSH
4161: LD_INT 84
4163: PUSH
4164: LD_INT 85
4166: PUSH
4167: LD_INT 86
4169: PUSH
4170: LD_INT 11
4172: PUSH
4173: LD_INT 9
4175: PUSH
4176: LD_INT 20
4178: PUSH
4179: LD_INT 19
4181: PUSH
4182: LD_INT 21
4184: PUSH
4185: LD_INT 24
4187: PUSH
4188: LD_INT 22
4190: PUSH
4191: LD_INT 25
4193: PUSH
4194: LD_INT 28
4196: PUSH
4197: LD_INT 29
4199: PUSH
4200: LD_INT 30
4202: PUSH
4203: LD_INT 31
4205: PUSH
4206: LD_INT 37
4208: PUSH
4209: LD_INT 38
4211: PUSH
4212: LD_INT 32
4214: PUSH
4215: LD_INT 27
4217: PUSH
4218: LD_INT 33
4220: PUSH
4221: LD_INT 69
4223: PUSH
4224: LD_INT 39
4226: PUSH
4227: LD_INT 34
4229: PUSH
4230: LD_INT 40
4232: PUSH
4233: LD_INT 71
4235: PUSH
4236: LD_INT 23
4238: PUSH
4239: LD_INT 44
4241: PUSH
4242: LD_INT 48
4244: PUSH
4245: LD_INT 49
4247: PUSH
4248: LD_INT 50
4250: PUSH
4251: LD_INT 51
4253: PUSH
4254: LD_INT 52
4256: PUSH
4257: LD_INT 53
4259: PUSH
4260: LD_INT 54
4262: PUSH
4263: LD_INT 55
4265: PUSH
4266: LD_INT 56
4268: PUSH
4269: LD_INT 57
4271: PUSH
4272: LD_INT 58
4274: PUSH
4275: LD_INT 59
4277: PUSH
4278: LD_INT 63
4280: PUSH
4281: LD_INT 64
4283: PUSH
4284: LD_INT 65
4286: PUSH
4287: LD_INT 82
4289: PUSH
4290: LD_INT 83
4292: PUSH
4293: LD_INT 84
4295: PUSH
4296: LD_INT 85
4298: PUSH
4299: LD_INT 86
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: LIST
4306: LIST
4307: LIST
4308: LIST
4309: LIST
4310: LIST
4311: LIST
4312: LIST
4313: LIST
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: LIST
4322: LIST
4323: LIST
4324: LIST
4325: LIST
4326: LIST
4327: LIST
4328: LIST
4329: LIST
4330: LIST
4331: LIST
4332: LIST
4333: LIST
4334: LIST
4335: LIST
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: LIST
4348: LIST
4349: LIST
4350: LIST
4351: LIST
4352: LIST
4353: LIST
4354: LIST
4355: LIST
4356: ST_TO_ADDR
4357: GO 4360
4359: POP
// if state > - 1 and state < 3 then
4360: LD_VAR 0 3
4364: PUSH
4365: LD_INT 1
4367: NEG
4368: GREATER
4369: PUSH
4370: LD_VAR 0 3
4374: PUSH
4375: LD_INT 3
4377: LESS
4378: AND
4379: IFFALSE 4436
// for i in result do
4381: LD_ADDR_VAR 0 5
4385: PUSH
4386: LD_VAR 0 4
4390: PUSH
4391: FOR_IN
4392: IFFALSE 4434
// if GetTech ( i , side ) <> state then
4394: LD_VAR 0 5
4398: PPUSH
4399: LD_VAR 0 1
4403: PPUSH
4404: CALL_OW 321
4408: PUSH
4409: LD_VAR 0 3
4413: NONEQUAL
4414: IFFALSE 4432
// result := result diff i ;
4416: LD_ADDR_VAR 0 4
4420: PUSH
4421: LD_VAR 0 4
4425: PUSH
4426: LD_VAR 0 5
4430: DIFF
4431: ST_TO_ADDR
4432: GO 4391
4434: POP
4435: POP
// end ;
4436: LD_VAR 0 4
4440: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
4441: LD_INT 0
4443: PPUSH
4444: PPUSH
4445: PPUSH
// result := true ;
4446: LD_ADDR_VAR 0 3
4450: PUSH
4451: LD_INT 1
4453: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
4454: LD_ADDR_VAR 0 5
4458: PUSH
4459: LD_VAR 0 2
4463: PPUSH
4464: CALL_OW 480
4468: ST_TO_ADDR
// if not tmp then
4469: LD_VAR 0 5
4473: NOT
4474: IFFALSE 4478
// exit ;
4476: GO 4527
// for i in tmp do
4478: LD_ADDR_VAR 0 4
4482: PUSH
4483: LD_VAR 0 5
4487: PUSH
4488: FOR_IN
4489: IFFALSE 4525
// if GetTech ( i , side ) <> state_researched then
4491: LD_VAR 0 4
4495: PPUSH
4496: LD_VAR 0 1
4500: PPUSH
4501: CALL_OW 321
4505: PUSH
4506: LD_INT 2
4508: NONEQUAL
4509: IFFALSE 4523
// begin result := false ;
4511: LD_ADDR_VAR 0 3
4515: PUSH
4516: LD_INT 0
4518: ST_TO_ADDR
// exit ;
4519: POP
4520: POP
4521: GO 4527
// end ;
4523: GO 4488
4525: POP
4526: POP
// end ;
4527: LD_VAR 0 3
4531: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
4532: LD_INT 0
4534: PPUSH
4535: PPUSH
4536: PPUSH
4537: PPUSH
4538: PPUSH
4539: PPUSH
4540: PPUSH
4541: PPUSH
4542: PPUSH
4543: PPUSH
4544: PPUSH
4545: PPUSH
4546: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
4547: LD_VAR 0 1
4551: NOT
4552: PUSH
4553: LD_VAR 0 1
4557: PPUSH
4558: CALL_OW 257
4562: PUSH
4563: LD_INT 9
4565: NONEQUAL
4566: OR
4567: IFFALSE 4571
// exit ;
4569: GO 5144
// side := GetSide ( unit ) ;
4571: LD_ADDR_VAR 0 9
4575: PUSH
4576: LD_VAR 0 1
4580: PPUSH
4581: CALL_OW 255
4585: ST_TO_ADDR
// tech_space := tech_spacanom ;
4586: LD_ADDR_VAR 0 12
4590: PUSH
4591: LD_INT 29
4593: ST_TO_ADDR
// tech_time := tech_taurad ;
4594: LD_ADDR_VAR 0 13
4598: PUSH
4599: LD_INT 28
4601: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4602: LD_ADDR_VAR 0 11
4606: PUSH
4607: LD_VAR 0 1
4611: PPUSH
4612: CALL_OW 310
4616: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4617: LD_VAR 0 11
4621: PPUSH
4622: CALL_OW 247
4626: PUSH
4627: LD_INT 2
4629: EQUAL
4630: IFFALSE 4634
// exit ;
4632: GO 5144
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4634: LD_ADDR_VAR 0 8
4638: PUSH
4639: LD_INT 81
4641: PUSH
4642: LD_VAR 0 9
4646: PUSH
4647: EMPTY
4648: LIST
4649: LIST
4650: PUSH
4651: LD_INT 3
4653: PUSH
4654: LD_INT 21
4656: PUSH
4657: LD_INT 3
4659: PUSH
4660: EMPTY
4661: LIST
4662: LIST
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: PUSH
4668: EMPTY
4669: LIST
4670: LIST
4671: PPUSH
4672: CALL_OW 69
4676: ST_TO_ADDR
// if not tmp then
4677: LD_VAR 0 8
4681: NOT
4682: IFFALSE 4686
// exit ;
4684: GO 5144
// if in_unit then
4686: LD_VAR 0 11
4690: IFFALSE 4714
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4692: LD_ADDR_VAR 0 10
4696: PUSH
4697: LD_VAR 0 8
4701: PPUSH
4702: LD_VAR 0 11
4706: PPUSH
4707: CALL_OW 74
4711: ST_TO_ADDR
4712: GO 4734
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4714: LD_ADDR_VAR 0 10
4718: PUSH
4719: LD_VAR 0 8
4723: PPUSH
4724: LD_VAR 0 1
4728: PPUSH
4729: CALL_OW 74
4733: ST_TO_ADDR
// if not enemy then
4734: LD_VAR 0 10
4738: NOT
4739: IFFALSE 4743
// exit ;
4741: GO 5144
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4743: LD_VAR 0 11
4747: PUSH
4748: LD_VAR 0 11
4752: PPUSH
4753: LD_VAR 0 10
4757: PPUSH
4758: CALL_OW 296
4762: PUSH
4763: LD_INT 13
4765: GREATER
4766: AND
4767: PUSH
4768: LD_VAR 0 1
4772: PPUSH
4773: LD_VAR 0 10
4777: PPUSH
4778: CALL_OW 296
4782: PUSH
4783: LD_INT 12
4785: GREATER
4786: OR
4787: IFFALSE 4791
// exit ;
4789: GO 5144
// missile := [ 1 ] ;
4791: LD_ADDR_VAR 0 14
4795: PUSH
4796: LD_INT 1
4798: PUSH
4799: EMPTY
4800: LIST
4801: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4802: LD_VAR 0 9
4806: PPUSH
4807: LD_VAR 0 12
4811: PPUSH
4812: CALL_OW 325
4816: IFFALSE 4845
// missile := Replace ( missile , missile + 1 , 2 ) ;
4818: LD_ADDR_VAR 0 14
4822: PUSH
4823: LD_VAR 0 14
4827: PPUSH
4828: LD_VAR 0 14
4832: PUSH
4833: LD_INT 1
4835: PLUS
4836: PPUSH
4837: LD_INT 2
4839: PPUSH
4840: CALL_OW 1
4844: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4845: LD_VAR 0 9
4849: PPUSH
4850: LD_VAR 0 13
4854: PPUSH
4855: CALL_OW 325
4859: PUSH
4860: LD_VAR 0 10
4864: PPUSH
4865: CALL_OW 255
4869: PPUSH
4870: LD_VAR 0 13
4874: PPUSH
4875: CALL_OW 325
4879: NOT
4880: AND
4881: IFFALSE 4910
// missile := Replace ( missile , missile + 1 , 3 ) ;
4883: LD_ADDR_VAR 0 14
4887: PUSH
4888: LD_VAR 0 14
4892: PPUSH
4893: LD_VAR 0 14
4897: PUSH
4898: LD_INT 1
4900: PLUS
4901: PPUSH
4902: LD_INT 3
4904: PPUSH
4905: CALL_OW 1
4909: ST_TO_ADDR
// if missile < 2 then
4910: LD_VAR 0 14
4914: PUSH
4915: LD_INT 2
4917: LESS
4918: IFFALSE 4922
// exit ;
4920: GO 5144
// x := GetX ( enemy ) ;
4922: LD_ADDR_VAR 0 4
4926: PUSH
4927: LD_VAR 0 10
4931: PPUSH
4932: CALL_OW 250
4936: ST_TO_ADDR
// y := GetY ( enemy ) ;
4937: LD_ADDR_VAR 0 5
4941: PUSH
4942: LD_VAR 0 10
4946: PPUSH
4947: CALL_OW 251
4951: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4952: LD_ADDR_VAR 0 6
4956: PUSH
4957: LD_VAR 0 4
4961: PUSH
4962: LD_INT 1
4964: NEG
4965: PPUSH
4966: LD_INT 1
4968: PPUSH
4969: CALL_OW 12
4973: PLUS
4974: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4975: LD_ADDR_VAR 0 7
4979: PUSH
4980: LD_VAR 0 5
4984: PUSH
4985: LD_INT 1
4987: NEG
4988: PPUSH
4989: LD_INT 1
4991: PPUSH
4992: CALL_OW 12
4996: PLUS
4997: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4998: LD_VAR 0 6
5002: PPUSH
5003: LD_VAR 0 7
5007: PPUSH
5008: CALL_OW 488
5012: NOT
5013: IFFALSE 5035
// begin _x := x ;
5015: LD_ADDR_VAR 0 6
5019: PUSH
5020: LD_VAR 0 4
5024: ST_TO_ADDR
// _y := y ;
5025: LD_ADDR_VAR 0 7
5029: PUSH
5030: LD_VAR 0 5
5034: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
5035: LD_ADDR_VAR 0 3
5039: PUSH
5040: LD_INT 1
5042: PPUSH
5043: LD_VAR 0 14
5047: PPUSH
5048: CALL_OW 12
5052: ST_TO_ADDR
// case i of 1 :
5053: LD_VAR 0 3
5057: PUSH
5058: LD_INT 1
5060: DOUBLE
5061: EQUAL
5062: IFTRUE 5066
5064: GO 5083
5066: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
5067: LD_VAR 0 1
5071: PPUSH
5072: LD_VAR 0 10
5076: PPUSH
5077: CALL_OW 115
5081: GO 5144
5083: LD_INT 2
5085: DOUBLE
5086: EQUAL
5087: IFTRUE 5091
5089: GO 5113
5091: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
5092: LD_VAR 0 1
5096: PPUSH
5097: LD_VAR 0 6
5101: PPUSH
5102: LD_VAR 0 7
5106: PPUSH
5107: CALL_OW 153
5111: GO 5144
5113: LD_INT 3
5115: DOUBLE
5116: EQUAL
5117: IFTRUE 5121
5119: GO 5143
5121: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
5122: LD_VAR 0 1
5126: PPUSH
5127: LD_VAR 0 6
5131: PPUSH
5132: LD_VAR 0 7
5136: PPUSH
5137: CALL_OW 154
5141: GO 5144
5143: POP
// end ;
5144: LD_VAR 0 2
5148: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
5149: LD_INT 0
5151: PPUSH
5152: PPUSH
5153: PPUSH
5154: PPUSH
5155: PPUSH
5156: PPUSH
// if not unit or not building then
5157: LD_VAR 0 1
5161: NOT
5162: PUSH
5163: LD_VAR 0 2
5167: NOT
5168: OR
5169: IFFALSE 5173
// exit ;
5171: GO 5331
// x := GetX ( building ) ;
5173: LD_ADDR_VAR 0 5
5177: PUSH
5178: LD_VAR 0 2
5182: PPUSH
5183: CALL_OW 250
5187: ST_TO_ADDR
// y := GetY ( building ) ;
5188: LD_ADDR_VAR 0 6
5192: PUSH
5193: LD_VAR 0 2
5197: PPUSH
5198: CALL_OW 251
5202: ST_TO_ADDR
// for i = 0 to 5 do
5203: LD_ADDR_VAR 0 4
5207: PUSH
5208: DOUBLE
5209: LD_INT 0
5211: DEC
5212: ST_TO_ADDR
5213: LD_INT 5
5215: PUSH
5216: FOR_TO
5217: IFFALSE 5329
// begin _x := ShiftX ( x , i , 3 ) ;
5219: LD_ADDR_VAR 0 7
5223: PUSH
5224: LD_VAR 0 5
5228: PPUSH
5229: LD_VAR 0 4
5233: PPUSH
5234: LD_INT 3
5236: PPUSH
5237: CALL_OW 272
5241: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
5242: LD_ADDR_VAR 0 8
5246: PUSH
5247: LD_VAR 0 6
5251: PPUSH
5252: LD_VAR 0 4
5256: PPUSH
5257: LD_INT 3
5259: PPUSH
5260: CALL_OW 273
5264: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5265: LD_VAR 0 7
5269: PPUSH
5270: LD_VAR 0 8
5274: PPUSH
5275: CALL_OW 488
5279: NOT
5280: IFFALSE 5284
// continue ;
5282: GO 5216
// if HexInfo ( _x , _y ) = 0 then
5284: LD_VAR 0 7
5288: PPUSH
5289: LD_VAR 0 8
5293: PPUSH
5294: CALL_OW 428
5298: PUSH
5299: LD_INT 0
5301: EQUAL
5302: IFFALSE 5327
// begin ComMoveXY ( unit , _x , _y ) ;
5304: LD_VAR 0 1
5308: PPUSH
5309: LD_VAR 0 7
5313: PPUSH
5314: LD_VAR 0 8
5318: PPUSH
5319: CALL_OW 111
// exit ;
5323: POP
5324: POP
5325: GO 5331
// end ; end ;
5327: GO 5216
5329: POP
5330: POP
// end ;
5331: LD_VAR 0 3
5335: RET
// export function ScanBase ( side , base_area ) ; begin
5336: LD_INT 0
5338: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
5339: LD_ADDR_VAR 0 3
5343: PUSH
5344: LD_VAR 0 2
5348: PPUSH
5349: LD_INT 81
5351: PUSH
5352: LD_VAR 0 1
5356: PUSH
5357: EMPTY
5358: LIST
5359: LIST
5360: PPUSH
5361: CALL_OW 70
5365: ST_TO_ADDR
// end ;
5366: LD_VAR 0 3
5370: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
5371: LD_INT 0
5373: PPUSH
5374: PPUSH
5375: PPUSH
5376: PPUSH
// result := false ;
5377: LD_ADDR_VAR 0 2
5381: PUSH
5382: LD_INT 0
5384: ST_TO_ADDR
// side := GetSide ( unit ) ;
5385: LD_ADDR_VAR 0 3
5389: PUSH
5390: LD_VAR 0 1
5394: PPUSH
5395: CALL_OW 255
5399: ST_TO_ADDR
// nat := GetNation ( unit ) ;
5400: LD_ADDR_VAR 0 4
5404: PUSH
5405: LD_VAR 0 1
5409: PPUSH
5410: CALL_OW 248
5414: ST_TO_ADDR
// case nat of 1 :
5415: LD_VAR 0 4
5419: PUSH
5420: LD_INT 1
5422: DOUBLE
5423: EQUAL
5424: IFTRUE 5428
5426: GO 5439
5428: POP
// tech := tech_lassight ; 2 :
5429: LD_ADDR_VAR 0 5
5433: PUSH
5434: LD_INT 12
5436: ST_TO_ADDR
5437: GO 5478
5439: LD_INT 2
5441: DOUBLE
5442: EQUAL
5443: IFTRUE 5447
5445: GO 5458
5447: POP
// tech := tech_mortar ; 3 :
5448: LD_ADDR_VAR 0 5
5452: PUSH
5453: LD_INT 41
5455: ST_TO_ADDR
5456: GO 5478
5458: LD_INT 3
5460: DOUBLE
5461: EQUAL
5462: IFTRUE 5466
5464: GO 5477
5466: POP
// tech := tech_bazooka ; end ;
5467: LD_ADDR_VAR 0 5
5471: PUSH
5472: LD_INT 44
5474: ST_TO_ADDR
5475: GO 5478
5477: POP
// if Researched ( side , tech ) then
5478: LD_VAR 0 3
5482: PPUSH
5483: LD_VAR 0 5
5487: PPUSH
5488: CALL_OW 325
5492: IFFALSE 5519
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
5494: LD_ADDR_VAR 0 2
5498: PUSH
5499: LD_INT 5
5501: PUSH
5502: LD_INT 8
5504: PUSH
5505: LD_INT 9
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: LIST
5512: PUSH
5513: LD_VAR 0 4
5517: ARRAY
5518: ST_TO_ADDR
// end ;
5519: LD_VAR 0 2
5523: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
5524: LD_INT 0
5526: PPUSH
5527: PPUSH
5528: PPUSH
// if not mines then
5529: LD_VAR 0 2
5533: NOT
5534: IFFALSE 5538
// exit ;
5536: GO 5682
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5538: LD_ADDR_VAR 0 5
5542: PUSH
5543: LD_INT 81
5545: PUSH
5546: LD_VAR 0 1
5550: PUSH
5551: EMPTY
5552: LIST
5553: LIST
5554: PUSH
5555: LD_INT 3
5557: PUSH
5558: LD_INT 21
5560: PUSH
5561: LD_INT 3
5563: PUSH
5564: EMPTY
5565: LIST
5566: LIST
5567: PUSH
5568: EMPTY
5569: LIST
5570: LIST
5571: PUSH
5572: EMPTY
5573: LIST
5574: LIST
5575: PPUSH
5576: CALL_OW 69
5580: ST_TO_ADDR
// for i in mines do
5581: LD_ADDR_VAR 0 4
5585: PUSH
5586: LD_VAR 0 2
5590: PUSH
5591: FOR_IN
5592: IFFALSE 5680
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5594: LD_VAR 0 4
5598: PUSH
5599: LD_INT 1
5601: ARRAY
5602: PPUSH
5603: LD_VAR 0 4
5607: PUSH
5608: LD_INT 2
5610: ARRAY
5611: PPUSH
5612: CALL_OW 458
5616: NOT
5617: IFFALSE 5621
// continue ;
5619: GO 5591
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5621: LD_VAR 0 4
5625: PUSH
5626: LD_INT 1
5628: ARRAY
5629: PPUSH
5630: LD_VAR 0 4
5634: PUSH
5635: LD_INT 2
5637: ARRAY
5638: PPUSH
5639: CALL_OW 428
5643: PUSH
5644: LD_VAR 0 5
5648: IN
5649: IFFALSE 5678
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5651: LD_VAR 0 4
5655: PUSH
5656: LD_INT 1
5658: ARRAY
5659: PPUSH
5660: LD_VAR 0 4
5664: PUSH
5665: LD_INT 2
5667: ARRAY
5668: PPUSH
5669: LD_VAR 0 1
5673: PPUSH
5674: CALL_OW 456
// end ;
5678: GO 5591
5680: POP
5681: POP
// end ;
5682: LD_VAR 0 3
5686: RET
// export function Count ( array ) ; var i ; begin
5687: LD_INT 0
5689: PPUSH
5690: PPUSH
// result := 0 ;
5691: LD_ADDR_VAR 0 2
5695: PUSH
5696: LD_INT 0
5698: ST_TO_ADDR
// for i in array do
5699: LD_ADDR_VAR 0 3
5703: PUSH
5704: LD_VAR 0 1
5708: PUSH
5709: FOR_IN
5710: IFFALSE 5734
// if i then
5712: LD_VAR 0 3
5716: IFFALSE 5732
// result := result + 1 ;
5718: LD_ADDR_VAR 0 2
5722: PUSH
5723: LD_VAR 0 2
5727: PUSH
5728: LD_INT 1
5730: PLUS
5731: ST_TO_ADDR
5732: GO 5709
5734: POP
5735: POP
// end ;
5736: LD_VAR 0 2
5740: RET
// export function IsEmpty ( building ) ; begin
5741: LD_INT 0
5743: PPUSH
// if not building then
5744: LD_VAR 0 1
5748: NOT
5749: IFFALSE 5753
// exit ;
5751: GO 5796
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5753: LD_ADDR_VAR 0 2
5757: PUSH
5758: LD_VAR 0 1
5762: PUSH
5763: LD_INT 22
5765: PUSH
5766: LD_VAR 0 1
5770: PPUSH
5771: CALL_OW 255
5775: PUSH
5776: EMPTY
5777: LIST
5778: LIST
5779: PUSH
5780: LD_INT 58
5782: PUSH
5783: EMPTY
5784: LIST
5785: PUSH
5786: EMPTY
5787: LIST
5788: LIST
5789: PPUSH
5790: CALL_OW 69
5794: IN
5795: ST_TO_ADDR
// end ;
5796: LD_VAR 0 2
5800: RET
// export function IsNotFull ( building ) ; var places ; begin
5801: LD_INT 0
5803: PPUSH
5804: PPUSH
// if not building then
5805: LD_VAR 0 1
5809: NOT
5810: IFFALSE 5814
// exit ;
5812: GO 5985
// result := false ;
5814: LD_ADDR_VAR 0 2
5818: PUSH
5819: LD_INT 0
5821: ST_TO_ADDR
// places := 0 ;
5822: LD_ADDR_VAR 0 3
5826: PUSH
5827: LD_INT 0
5829: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
5830: LD_VAR 0 1
5834: PPUSH
5835: CALL_OW 266
5839: PUSH
5840: LD_INT 0
5842: DOUBLE
5843: EQUAL
5844: IFTRUE 5902
5846: LD_INT 1
5848: DOUBLE
5849: EQUAL
5850: IFTRUE 5902
5852: LD_INT 6
5854: DOUBLE
5855: EQUAL
5856: IFTRUE 5902
5858: LD_INT 7
5860: DOUBLE
5861: EQUAL
5862: IFTRUE 5902
5864: LD_INT 8
5866: DOUBLE
5867: EQUAL
5868: IFTRUE 5902
5870: LD_INT 4
5872: DOUBLE
5873: EQUAL
5874: IFTRUE 5902
5876: LD_INT 5
5878: DOUBLE
5879: EQUAL
5880: IFTRUE 5902
5882: LD_INT 2
5884: DOUBLE
5885: EQUAL
5886: IFTRUE 5902
5888: LD_INT 3
5890: DOUBLE
5891: EQUAL
5892: IFTRUE 5902
5894: LD_INT 35
5896: DOUBLE
5897: EQUAL
5898: IFTRUE 5902
5900: GO 5913
5902: POP
// places := 6 ; b_bunker , b_breastwork :
5903: LD_ADDR_VAR 0 3
5907: PUSH
5908: LD_INT 6
5910: ST_TO_ADDR
5911: GO 5958
5913: LD_INT 32
5915: DOUBLE
5916: EQUAL
5917: IFTRUE 5927
5919: LD_INT 31
5921: DOUBLE
5922: EQUAL
5923: IFTRUE 5927
5925: GO 5938
5927: POP
// places := 1 ; b_control_tower :
5928: LD_ADDR_VAR 0 3
5932: PUSH
5933: LD_INT 1
5935: ST_TO_ADDR
5936: GO 5958
5938: LD_INT 36
5940: DOUBLE
5941: EQUAL
5942: IFTRUE 5946
5944: GO 5957
5946: POP
// places := 3 ; end ;
5947: LD_ADDR_VAR 0 3
5951: PUSH
5952: LD_INT 3
5954: ST_TO_ADDR
5955: GO 5958
5957: POP
// if places then
5958: LD_VAR 0 3
5962: IFFALSE 5985
// result := UnitsInside ( building ) < places ;
5964: LD_ADDR_VAR 0 2
5968: PUSH
5969: LD_VAR 0 1
5973: PPUSH
5974: CALL_OW 313
5978: PUSH
5979: LD_VAR 0 3
5983: LESS
5984: ST_TO_ADDR
// end ;
5985: LD_VAR 0 2
5989: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5990: LD_INT 0
5992: PPUSH
5993: PPUSH
5994: PPUSH
5995: PPUSH
// tmp := [ ] ;
5996: LD_ADDR_VAR 0 3
6000: PUSH
6001: EMPTY
6002: ST_TO_ADDR
// list := [ ] ;
6003: LD_ADDR_VAR 0 5
6007: PUSH
6008: EMPTY
6009: ST_TO_ADDR
// for i = 16 to 25 do
6010: LD_ADDR_VAR 0 4
6014: PUSH
6015: DOUBLE
6016: LD_INT 16
6018: DEC
6019: ST_TO_ADDR
6020: LD_INT 25
6022: PUSH
6023: FOR_TO
6024: IFFALSE 6097
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
6026: LD_ADDR_VAR 0 3
6030: PUSH
6031: LD_VAR 0 3
6035: PUSH
6036: LD_INT 22
6038: PUSH
6039: LD_VAR 0 1
6043: PPUSH
6044: CALL_OW 255
6048: PUSH
6049: EMPTY
6050: LIST
6051: LIST
6052: PUSH
6053: LD_INT 91
6055: PUSH
6056: LD_VAR 0 1
6060: PUSH
6061: LD_INT 6
6063: PUSH
6064: EMPTY
6065: LIST
6066: LIST
6067: LIST
6068: PUSH
6069: LD_INT 30
6071: PUSH
6072: LD_VAR 0 4
6076: PUSH
6077: EMPTY
6078: LIST
6079: LIST
6080: PUSH
6081: EMPTY
6082: LIST
6083: LIST
6084: LIST
6085: PUSH
6086: EMPTY
6087: LIST
6088: PPUSH
6089: CALL_OW 69
6093: ADD
6094: ST_TO_ADDR
6095: GO 6023
6097: POP
6098: POP
// for i = 1 to tmp do
6099: LD_ADDR_VAR 0 4
6103: PUSH
6104: DOUBLE
6105: LD_INT 1
6107: DEC
6108: ST_TO_ADDR
6109: LD_VAR 0 3
6113: PUSH
6114: FOR_TO
6115: IFFALSE 6203
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
6117: LD_ADDR_VAR 0 5
6121: PUSH
6122: LD_VAR 0 5
6126: PUSH
6127: LD_VAR 0 3
6131: PUSH
6132: LD_VAR 0 4
6136: ARRAY
6137: PPUSH
6138: CALL_OW 266
6142: PUSH
6143: LD_VAR 0 3
6147: PUSH
6148: LD_VAR 0 4
6152: ARRAY
6153: PPUSH
6154: CALL_OW 250
6158: PUSH
6159: LD_VAR 0 3
6163: PUSH
6164: LD_VAR 0 4
6168: ARRAY
6169: PPUSH
6170: CALL_OW 251
6174: PUSH
6175: LD_VAR 0 3
6179: PUSH
6180: LD_VAR 0 4
6184: ARRAY
6185: PPUSH
6186: CALL_OW 254
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: PUSH
6197: EMPTY
6198: LIST
6199: ADD
6200: ST_TO_ADDR
6201: GO 6114
6203: POP
6204: POP
// result := list ;
6205: LD_ADDR_VAR 0 2
6209: PUSH
6210: LD_VAR 0 5
6214: ST_TO_ADDR
// end ;
6215: LD_VAR 0 2
6219: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
6220: LD_INT 0
6222: PPUSH
6223: PPUSH
6224: PPUSH
6225: PPUSH
6226: PPUSH
6227: PPUSH
6228: PPUSH
// if not factory then
6229: LD_VAR 0 1
6233: NOT
6234: IFFALSE 6238
// exit ;
6236: GO 6831
// if control = control_apeman then
6238: LD_VAR 0 4
6242: PUSH
6243: LD_INT 5
6245: EQUAL
6246: IFFALSE 6355
// begin tmp := UnitsInside ( factory ) ;
6248: LD_ADDR_VAR 0 8
6252: PUSH
6253: LD_VAR 0 1
6257: PPUSH
6258: CALL_OW 313
6262: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
6263: LD_VAR 0 8
6267: PPUSH
6268: LD_INT 25
6270: PUSH
6271: LD_INT 12
6273: PUSH
6274: EMPTY
6275: LIST
6276: LIST
6277: PPUSH
6278: CALL_OW 72
6282: NOT
6283: IFFALSE 6293
// control := control_manual ;
6285: LD_ADDR_VAR 0 4
6289: PUSH
6290: LD_INT 1
6292: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
6293: LD_ADDR_VAR 0 8
6297: PUSH
6298: LD_VAR 0 1
6302: PPUSH
6303: CALL 5990 0 1
6307: ST_TO_ADDR
// if tmp then
6308: LD_VAR 0 8
6312: IFFALSE 6355
// begin for i in tmp do
6314: LD_ADDR_VAR 0 7
6318: PUSH
6319: LD_VAR 0 8
6323: PUSH
6324: FOR_IN
6325: IFFALSE 6353
// if i [ 1 ] = b_ext_radio then
6327: LD_VAR 0 7
6331: PUSH
6332: LD_INT 1
6334: ARRAY
6335: PUSH
6336: LD_INT 22
6338: EQUAL
6339: IFFALSE 6351
// begin control := control_remote ;
6341: LD_ADDR_VAR 0 4
6345: PUSH
6346: LD_INT 2
6348: ST_TO_ADDR
// break ;
6349: GO 6353
// end ;
6351: GO 6324
6353: POP
6354: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6355: LD_VAR 0 1
6359: PPUSH
6360: LD_VAR 0 2
6364: PPUSH
6365: LD_VAR 0 3
6369: PPUSH
6370: LD_VAR 0 4
6374: PPUSH
6375: LD_VAR 0 5
6379: PPUSH
6380: CALL_OW 448
6384: IFFALSE 6419
// begin result := [ chassis , engine , control , weapon ] ;
6386: LD_ADDR_VAR 0 6
6390: PUSH
6391: LD_VAR 0 2
6395: PUSH
6396: LD_VAR 0 3
6400: PUSH
6401: LD_VAR 0 4
6405: PUSH
6406: LD_VAR 0 5
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: ST_TO_ADDR
// exit ;
6417: GO 6831
// end ; _chassis := AvailableChassisList ( factory ) ;
6419: LD_ADDR_VAR 0 9
6423: PUSH
6424: LD_VAR 0 1
6428: PPUSH
6429: CALL_OW 475
6433: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
6434: LD_ADDR_VAR 0 11
6438: PUSH
6439: LD_VAR 0 1
6443: PPUSH
6444: CALL_OW 476
6448: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
6449: LD_ADDR_VAR 0 12
6453: PUSH
6454: LD_VAR 0 1
6458: PPUSH
6459: CALL_OW 477
6463: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
6464: LD_ADDR_VAR 0 10
6468: PUSH
6469: LD_VAR 0 1
6473: PPUSH
6474: CALL_OW 478
6478: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
6479: LD_VAR 0 9
6483: NOT
6484: PUSH
6485: LD_VAR 0 11
6489: NOT
6490: OR
6491: PUSH
6492: LD_VAR 0 12
6496: NOT
6497: OR
6498: PUSH
6499: LD_VAR 0 10
6503: NOT
6504: OR
6505: IFFALSE 6540
// begin result := [ chassis , engine , control , weapon ] ;
6507: LD_ADDR_VAR 0 6
6511: PUSH
6512: LD_VAR 0 2
6516: PUSH
6517: LD_VAR 0 3
6521: PUSH
6522: LD_VAR 0 4
6526: PUSH
6527: LD_VAR 0 5
6531: PUSH
6532: EMPTY
6533: LIST
6534: LIST
6535: LIST
6536: LIST
6537: ST_TO_ADDR
// exit ;
6538: GO 6831
// end ; if not chassis in _chassis then
6540: LD_VAR 0 2
6544: PUSH
6545: LD_VAR 0 9
6549: IN
6550: NOT
6551: IFFALSE 6577
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
6553: LD_ADDR_VAR 0 2
6557: PUSH
6558: LD_VAR 0 9
6562: PUSH
6563: LD_INT 1
6565: PPUSH
6566: LD_VAR 0 9
6570: PPUSH
6571: CALL_OW 12
6575: ARRAY
6576: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
6577: LD_VAR 0 2
6581: PPUSH
6582: LD_VAR 0 3
6586: PPUSH
6587: CALL 6836 0 2
6591: NOT
6592: IFFALSE 6651
// repeat engine := _engine [ 1 ] ;
6594: LD_ADDR_VAR 0 3
6598: PUSH
6599: LD_VAR 0 11
6603: PUSH
6604: LD_INT 1
6606: ARRAY
6607: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
6608: LD_ADDR_VAR 0 11
6612: PUSH
6613: LD_VAR 0 11
6617: PPUSH
6618: LD_INT 1
6620: PPUSH
6621: CALL_OW 3
6625: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
6626: LD_VAR 0 2
6630: PPUSH
6631: LD_VAR 0 3
6635: PPUSH
6636: CALL 6836 0 2
6640: PUSH
6641: LD_VAR 0 11
6645: PUSH
6646: EMPTY
6647: EQUAL
6648: OR
6649: IFFALSE 6594
// if not control in _control then
6651: LD_VAR 0 4
6655: PUSH
6656: LD_VAR 0 12
6660: IN
6661: NOT
6662: IFFALSE 6688
// control := _control [ rand ( 1 , _control ) ] ;
6664: LD_ADDR_VAR 0 4
6668: PUSH
6669: LD_VAR 0 12
6673: PUSH
6674: LD_INT 1
6676: PPUSH
6677: LD_VAR 0 12
6681: PPUSH
6682: CALL_OW 12
6686: ARRAY
6687: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
6688: LD_VAR 0 2
6692: PPUSH
6693: LD_VAR 0 5
6697: PPUSH
6698: CALL 7056 0 2
6702: NOT
6703: IFFALSE 6762
// repeat weapon := _weapon [ 1 ] ;
6705: LD_ADDR_VAR 0 5
6709: PUSH
6710: LD_VAR 0 10
6714: PUSH
6715: LD_INT 1
6717: ARRAY
6718: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
6719: LD_ADDR_VAR 0 10
6723: PUSH
6724: LD_VAR 0 10
6728: PPUSH
6729: LD_INT 1
6731: PPUSH
6732: CALL_OW 3
6736: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6737: LD_VAR 0 2
6741: PPUSH
6742: LD_VAR 0 5
6746: PPUSH
6747: CALL 7056 0 2
6751: PUSH
6752: LD_VAR 0 10
6756: PUSH
6757: EMPTY
6758: EQUAL
6759: OR
6760: IFFALSE 6705
// result := [ ] ;
6762: LD_ADDR_VAR 0 6
6766: PUSH
6767: EMPTY
6768: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6769: LD_VAR 0 1
6773: PPUSH
6774: LD_VAR 0 2
6778: PPUSH
6779: LD_VAR 0 3
6783: PPUSH
6784: LD_VAR 0 4
6788: PPUSH
6789: LD_VAR 0 5
6793: PPUSH
6794: CALL_OW 448
6798: IFFALSE 6831
// result := [ chassis , engine , control , weapon ] ;
6800: LD_ADDR_VAR 0 6
6804: PUSH
6805: LD_VAR 0 2
6809: PUSH
6810: LD_VAR 0 3
6814: PUSH
6815: LD_VAR 0 4
6819: PUSH
6820: LD_VAR 0 5
6824: PUSH
6825: EMPTY
6826: LIST
6827: LIST
6828: LIST
6829: LIST
6830: ST_TO_ADDR
// end ;
6831: LD_VAR 0 6
6835: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6836: LD_INT 0
6838: PPUSH
// if not chassis or not engine then
6839: LD_VAR 0 1
6843: NOT
6844: PUSH
6845: LD_VAR 0 2
6849: NOT
6850: OR
6851: IFFALSE 6855
// exit ;
6853: GO 7051
// case engine of engine_solar :
6855: LD_VAR 0 2
6859: PUSH
6860: LD_INT 2
6862: DOUBLE
6863: EQUAL
6864: IFTRUE 6868
6866: GO 6906
6868: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6869: LD_ADDR_VAR 0 3
6873: PUSH
6874: LD_INT 11
6876: PUSH
6877: LD_INT 12
6879: PUSH
6880: LD_INT 13
6882: PUSH
6883: LD_INT 14
6885: PUSH
6886: LD_INT 1
6888: PUSH
6889: LD_INT 2
6891: PUSH
6892: LD_INT 3
6894: PUSH
6895: EMPTY
6896: LIST
6897: LIST
6898: LIST
6899: LIST
6900: LIST
6901: LIST
6902: LIST
6903: ST_TO_ADDR
6904: GO 7035
6906: LD_INT 1
6908: DOUBLE
6909: EQUAL
6910: IFTRUE 6914
6912: GO 6976
6914: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6915: LD_ADDR_VAR 0 3
6919: PUSH
6920: LD_INT 11
6922: PUSH
6923: LD_INT 12
6925: PUSH
6926: LD_INT 13
6928: PUSH
6929: LD_INT 14
6931: PUSH
6932: LD_INT 1
6934: PUSH
6935: LD_INT 2
6937: PUSH
6938: LD_INT 3
6940: PUSH
6941: LD_INT 4
6943: PUSH
6944: LD_INT 5
6946: PUSH
6947: LD_INT 21
6949: PUSH
6950: LD_INT 23
6952: PUSH
6953: LD_INT 22
6955: PUSH
6956: LD_INT 24
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: ST_TO_ADDR
6974: GO 7035
6976: LD_INT 3
6978: DOUBLE
6979: EQUAL
6980: IFTRUE 6984
6982: GO 7034
6984: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6985: LD_ADDR_VAR 0 3
6989: PUSH
6990: LD_INT 13
6992: PUSH
6993: LD_INT 14
6995: PUSH
6996: LD_INT 2
6998: PUSH
6999: LD_INT 3
7001: PUSH
7002: LD_INT 4
7004: PUSH
7005: LD_INT 5
7007: PUSH
7008: LD_INT 21
7010: PUSH
7011: LD_INT 22
7013: PUSH
7014: LD_INT 23
7016: PUSH
7017: LD_INT 24
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: ST_TO_ADDR
7032: GO 7035
7034: POP
// result := ( chassis in result ) ;
7035: LD_ADDR_VAR 0 3
7039: PUSH
7040: LD_VAR 0 1
7044: PUSH
7045: LD_VAR 0 3
7049: IN
7050: ST_TO_ADDR
// end ;
7051: LD_VAR 0 3
7055: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
7056: LD_INT 0
7058: PPUSH
// if not chassis or not weapon then
7059: LD_VAR 0 1
7063: NOT
7064: PUSH
7065: LD_VAR 0 2
7069: NOT
7070: OR
7071: IFFALSE 7075
// exit ;
7073: GO 8137
// case weapon of us_machine_gun :
7075: LD_VAR 0 2
7079: PUSH
7080: LD_INT 2
7082: DOUBLE
7083: EQUAL
7084: IFTRUE 7088
7086: GO 7118
7088: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
7089: LD_ADDR_VAR 0 3
7093: PUSH
7094: LD_INT 1
7096: PUSH
7097: LD_INT 2
7099: PUSH
7100: LD_INT 3
7102: PUSH
7103: LD_INT 4
7105: PUSH
7106: LD_INT 5
7108: PUSH
7109: EMPTY
7110: LIST
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: ST_TO_ADDR
7116: GO 8121
7118: LD_INT 3
7120: DOUBLE
7121: EQUAL
7122: IFTRUE 7126
7124: GO 7156
7126: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
7127: LD_ADDR_VAR 0 3
7131: PUSH
7132: LD_INT 1
7134: PUSH
7135: LD_INT 2
7137: PUSH
7138: LD_INT 3
7140: PUSH
7141: LD_INT 4
7143: PUSH
7144: LD_INT 5
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: LIST
7151: LIST
7152: LIST
7153: ST_TO_ADDR
7154: GO 8121
7156: LD_INT 11
7158: DOUBLE
7159: EQUAL
7160: IFTRUE 7164
7162: GO 7194
7164: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
7165: LD_ADDR_VAR 0 3
7169: PUSH
7170: LD_INT 1
7172: PUSH
7173: LD_INT 2
7175: PUSH
7176: LD_INT 3
7178: PUSH
7179: LD_INT 4
7181: PUSH
7182: LD_INT 5
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: LIST
7189: LIST
7190: LIST
7191: ST_TO_ADDR
7192: GO 8121
7194: LD_INT 4
7196: DOUBLE
7197: EQUAL
7198: IFTRUE 7202
7200: GO 7228
7202: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
7203: LD_ADDR_VAR 0 3
7207: PUSH
7208: LD_INT 2
7210: PUSH
7211: LD_INT 3
7213: PUSH
7214: LD_INT 4
7216: PUSH
7217: LD_INT 5
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: LIST
7224: LIST
7225: ST_TO_ADDR
7226: GO 8121
7228: LD_INT 5
7230: DOUBLE
7231: EQUAL
7232: IFTRUE 7236
7234: GO 7262
7236: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
7237: LD_ADDR_VAR 0 3
7241: PUSH
7242: LD_INT 2
7244: PUSH
7245: LD_INT 3
7247: PUSH
7248: LD_INT 4
7250: PUSH
7251: LD_INT 5
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: LIST
7258: LIST
7259: ST_TO_ADDR
7260: GO 8121
7262: LD_INT 9
7264: DOUBLE
7265: EQUAL
7266: IFTRUE 7270
7268: GO 7296
7270: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
7271: LD_ADDR_VAR 0 3
7275: PUSH
7276: LD_INT 2
7278: PUSH
7279: LD_INT 3
7281: PUSH
7282: LD_INT 4
7284: PUSH
7285: LD_INT 5
7287: PUSH
7288: EMPTY
7289: LIST
7290: LIST
7291: LIST
7292: LIST
7293: ST_TO_ADDR
7294: GO 8121
7296: LD_INT 7
7298: DOUBLE
7299: EQUAL
7300: IFTRUE 7304
7302: GO 7330
7304: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
7305: LD_ADDR_VAR 0 3
7309: PUSH
7310: LD_INT 2
7312: PUSH
7313: LD_INT 3
7315: PUSH
7316: LD_INT 4
7318: PUSH
7319: LD_INT 5
7321: PUSH
7322: EMPTY
7323: LIST
7324: LIST
7325: LIST
7326: LIST
7327: ST_TO_ADDR
7328: GO 8121
7330: LD_INT 12
7332: DOUBLE
7333: EQUAL
7334: IFTRUE 7338
7336: GO 7364
7338: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
7339: LD_ADDR_VAR 0 3
7343: PUSH
7344: LD_INT 2
7346: PUSH
7347: LD_INT 3
7349: PUSH
7350: LD_INT 4
7352: PUSH
7353: LD_INT 5
7355: PUSH
7356: EMPTY
7357: LIST
7358: LIST
7359: LIST
7360: LIST
7361: ST_TO_ADDR
7362: GO 8121
7364: LD_INT 13
7366: DOUBLE
7367: EQUAL
7368: IFTRUE 7372
7370: GO 7398
7372: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
7373: LD_ADDR_VAR 0 3
7377: PUSH
7378: LD_INT 2
7380: PUSH
7381: LD_INT 3
7383: PUSH
7384: LD_INT 4
7386: PUSH
7387: LD_INT 5
7389: PUSH
7390: EMPTY
7391: LIST
7392: LIST
7393: LIST
7394: LIST
7395: ST_TO_ADDR
7396: GO 8121
7398: LD_INT 14
7400: DOUBLE
7401: EQUAL
7402: IFTRUE 7406
7404: GO 7424
7406: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
7407: LD_ADDR_VAR 0 3
7411: PUSH
7412: LD_INT 4
7414: PUSH
7415: LD_INT 5
7417: PUSH
7418: EMPTY
7419: LIST
7420: LIST
7421: ST_TO_ADDR
7422: GO 8121
7424: LD_INT 6
7426: DOUBLE
7427: EQUAL
7428: IFTRUE 7432
7430: GO 7450
7432: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
7433: LD_ADDR_VAR 0 3
7437: PUSH
7438: LD_INT 4
7440: PUSH
7441: LD_INT 5
7443: PUSH
7444: EMPTY
7445: LIST
7446: LIST
7447: ST_TO_ADDR
7448: GO 8121
7450: LD_INT 10
7452: DOUBLE
7453: EQUAL
7454: IFTRUE 7458
7456: GO 7476
7458: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
7459: LD_ADDR_VAR 0 3
7463: PUSH
7464: LD_INT 4
7466: PUSH
7467: LD_INT 5
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: ST_TO_ADDR
7474: GO 8121
7476: LD_INT 22
7478: DOUBLE
7479: EQUAL
7480: IFTRUE 7484
7482: GO 7510
7484: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
7485: LD_ADDR_VAR 0 3
7489: PUSH
7490: LD_INT 11
7492: PUSH
7493: LD_INT 12
7495: PUSH
7496: LD_INT 13
7498: PUSH
7499: LD_INT 14
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: LIST
7506: LIST
7507: ST_TO_ADDR
7508: GO 8121
7510: LD_INT 23
7512: DOUBLE
7513: EQUAL
7514: IFTRUE 7518
7516: GO 7544
7518: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
7519: LD_ADDR_VAR 0 3
7523: PUSH
7524: LD_INT 11
7526: PUSH
7527: LD_INT 12
7529: PUSH
7530: LD_INT 13
7532: PUSH
7533: LD_INT 14
7535: PUSH
7536: EMPTY
7537: LIST
7538: LIST
7539: LIST
7540: LIST
7541: ST_TO_ADDR
7542: GO 8121
7544: LD_INT 24
7546: DOUBLE
7547: EQUAL
7548: IFTRUE 7552
7550: GO 7578
7552: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
7553: LD_ADDR_VAR 0 3
7557: PUSH
7558: LD_INT 11
7560: PUSH
7561: LD_INT 12
7563: PUSH
7564: LD_INT 13
7566: PUSH
7567: LD_INT 14
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: ST_TO_ADDR
7576: GO 8121
7578: LD_INT 30
7580: DOUBLE
7581: EQUAL
7582: IFTRUE 7586
7584: GO 7612
7586: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
7587: LD_ADDR_VAR 0 3
7591: PUSH
7592: LD_INT 11
7594: PUSH
7595: LD_INT 12
7597: PUSH
7598: LD_INT 13
7600: PUSH
7601: LD_INT 14
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: ST_TO_ADDR
7610: GO 8121
7612: LD_INT 25
7614: DOUBLE
7615: EQUAL
7616: IFTRUE 7620
7618: GO 7638
7620: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
7621: LD_ADDR_VAR 0 3
7625: PUSH
7626: LD_INT 13
7628: PUSH
7629: LD_INT 14
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: ST_TO_ADDR
7636: GO 8121
7638: LD_INT 27
7640: DOUBLE
7641: EQUAL
7642: IFTRUE 7646
7644: GO 7664
7646: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
7647: LD_ADDR_VAR 0 3
7651: PUSH
7652: LD_INT 13
7654: PUSH
7655: LD_INT 14
7657: PUSH
7658: EMPTY
7659: LIST
7660: LIST
7661: ST_TO_ADDR
7662: GO 8121
7664: LD_EXP 26
7668: DOUBLE
7669: EQUAL
7670: IFTRUE 7674
7672: GO 7700
7674: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
7675: LD_ADDR_VAR 0 3
7679: PUSH
7680: LD_INT 11
7682: PUSH
7683: LD_INT 12
7685: PUSH
7686: LD_INT 13
7688: PUSH
7689: LD_INT 14
7691: PUSH
7692: EMPTY
7693: LIST
7694: LIST
7695: LIST
7696: LIST
7697: ST_TO_ADDR
7698: GO 8121
7700: LD_INT 28
7702: DOUBLE
7703: EQUAL
7704: IFTRUE 7708
7706: GO 7726
7708: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
7709: LD_ADDR_VAR 0 3
7713: PUSH
7714: LD_INT 13
7716: PUSH
7717: LD_INT 14
7719: PUSH
7720: EMPTY
7721: LIST
7722: LIST
7723: ST_TO_ADDR
7724: GO 8121
7726: LD_INT 29
7728: DOUBLE
7729: EQUAL
7730: IFTRUE 7734
7732: GO 7752
7734: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7735: LD_ADDR_VAR 0 3
7739: PUSH
7740: LD_INT 13
7742: PUSH
7743: LD_INT 14
7745: PUSH
7746: EMPTY
7747: LIST
7748: LIST
7749: ST_TO_ADDR
7750: GO 8121
7752: LD_INT 31
7754: DOUBLE
7755: EQUAL
7756: IFTRUE 7760
7758: GO 7778
7760: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7761: LD_ADDR_VAR 0 3
7765: PUSH
7766: LD_INT 13
7768: PUSH
7769: LD_INT 14
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: ST_TO_ADDR
7776: GO 8121
7778: LD_INT 26
7780: DOUBLE
7781: EQUAL
7782: IFTRUE 7786
7784: GO 7804
7786: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7787: LD_ADDR_VAR 0 3
7791: PUSH
7792: LD_INT 13
7794: PUSH
7795: LD_INT 14
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: ST_TO_ADDR
7802: GO 8121
7804: LD_INT 42
7806: DOUBLE
7807: EQUAL
7808: IFTRUE 7812
7810: GO 7838
7812: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7813: LD_ADDR_VAR 0 3
7817: PUSH
7818: LD_INT 21
7820: PUSH
7821: LD_INT 22
7823: PUSH
7824: LD_INT 23
7826: PUSH
7827: LD_INT 24
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: ST_TO_ADDR
7836: GO 8121
7838: LD_INT 43
7840: DOUBLE
7841: EQUAL
7842: IFTRUE 7846
7844: GO 7872
7846: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7847: LD_ADDR_VAR 0 3
7851: PUSH
7852: LD_INT 21
7854: PUSH
7855: LD_INT 22
7857: PUSH
7858: LD_INT 23
7860: PUSH
7861: LD_INT 24
7863: PUSH
7864: EMPTY
7865: LIST
7866: LIST
7867: LIST
7868: LIST
7869: ST_TO_ADDR
7870: GO 8121
7872: LD_INT 44
7874: DOUBLE
7875: EQUAL
7876: IFTRUE 7880
7878: GO 7906
7880: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7881: LD_ADDR_VAR 0 3
7885: PUSH
7886: LD_INT 21
7888: PUSH
7889: LD_INT 22
7891: PUSH
7892: LD_INT 23
7894: PUSH
7895: LD_INT 24
7897: PUSH
7898: EMPTY
7899: LIST
7900: LIST
7901: LIST
7902: LIST
7903: ST_TO_ADDR
7904: GO 8121
7906: LD_INT 45
7908: DOUBLE
7909: EQUAL
7910: IFTRUE 7914
7912: GO 7940
7914: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7915: LD_ADDR_VAR 0 3
7919: PUSH
7920: LD_INT 21
7922: PUSH
7923: LD_INT 22
7925: PUSH
7926: LD_INT 23
7928: PUSH
7929: LD_INT 24
7931: PUSH
7932: EMPTY
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: ST_TO_ADDR
7938: GO 8121
7940: LD_INT 49
7942: DOUBLE
7943: EQUAL
7944: IFTRUE 7948
7946: GO 7974
7948: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7949: LD_ADDR_VAR 0 3
7953: PUSH
7954: LD_INT 21
7956: PUSH
7957: LD_INT 22
7959: PUSH
7960: LD_INT 23
7962: PUSH
7963: LD_INT 24
7965: PUSH
7966: EMPTY
7967: LIST
7968: LIST
7969: LIST
7970: LIST
7971: ST_TO_ADDR
7972: GO 8121
7974: LD_INT 51
7976: DOUBLE
7977: EQUAL
7978: IFTRUE 7982
7980: GO 8008
7982: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7983: LD_ADDR_VAR 0 3
7987: PUSH
7988: LD_INT 21
7990: PUSH
7991: LD_INT 22
7993: PUSH
7994: LD_INT 23
7996: PUSH
7997: LD_INT 24
7999: PUSH
8000: EMPTY
8001: LIST
8002: LIST
8003: LIST
8004: LIST
8005: ST_TO_ADDR
8006: GO 8121
8008: LD_INT 52
8010: DOUBLE
8011: EQUAL
8012: IFTRUE 8016
8014: GO 8042
8016: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
8017: LD_ADDR_VAR 0 3
8021: PUSH
8022: LD_INT 21
8024: PUSH
8025: LD_INT 22
8027: PUSH
8028: LD_INT 23
8030: PUSH
8031: LD_INT 24
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: ST_TO_ADDR
8040: GO 8121
8042: LD_INT 53
8044: DOUBLE
8045: EQUAL
8046: IFTRUE 8050
8048: GO 8068
8050: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
8051: LD_ADDR_VAR 0 3
8055: PUSH
8056: LD_INT 23
8058: PUSH
8059: LD_INT 24
8061: PUSH
8062: EMPTY
8063: LIST
8064: LIST
8065: ST_TO_ADDR
8066: GO 8121
8068: LD_INT 46
8070: DOUBLE
8071: EQUAL
8072: IFTRUE 8076
8074: GO 8094
8076: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
8077: LD_ADDR_VAR 0 3
8081: PUSH
8082: LD_INT 23
8084: PUSH
8085: LD_INT 24
8087: PUSH
8088: EMPTY
8089: LIST
8090: LIST
8091: ST_TO_ADDR
8092: GO 8121
8094: LD_INT 47
8096: DOUBLE
8097: EQUAL
8098: IFTRUE 8102
8100: GO 8120
8102: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
8103: LD_ADDR_VAR 0 3
8107: PUSH
8108: LD_INT 23
8110: PUSH
8111: LD_INT 24
8113: PUSH
8114: EMPTY
8115: LIST
8116: LIST
8117: ST_TO_ADDR
8118: GO 8121
8120: POP
// result := ( chassis in result ) ;
8121: LD_ADDR_VAR 0 3
8125: PUSH
8126: LD_VAR 0 1
8130: PUSH
8131: LD_VAR 0 3
8135: IN
8136: ST_TO_ADDR
// end ;
8137: LD_VAR 0 3
8141: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
8142: LD_INT 0
8144: PPUSH
8145: PPUSH
8146: PPUSH
8147: PPUSH
8148: PPUSH
8149: PPUSH
8150: PPUSH
// result := array ;
8151: LD_ADDR_VAR 0 5
8155: PUSH
8156: LD_VAR 0 1
8160: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
8161: LD_VAR 0 1
8165: NOT
8166: PUSH
8167: LD_VAR 0 2
8171: NOT
8172: OR
8173: PUSH
8174: LD_VAR 0 3
8178: NOT
8179: OR
8180: PUSH
8181: LD_VAR 0 2
8185: PUSH
8186: LD_VAR 0 1
8190: GREATER
8191: OR
8192: PUSH
8193: LD_VAR 0 3
8197: PUSH
8198: LD_VAR 0 1
8202: GREATER
8203: OR
8204: IFFALSE 8208
// exit ;
8206: GO 8504
// if direction then
8208: LD_VAR 0 4
8212: IFFALSE 8276
// begin d := 1 ;
8214: LD_ADDR_VAR 0 9
8218: PUSH
8219: LD_INT 1
8221: ST_TO_ADDR
// if i_from > i_to then
8222: LD_VAR 0 2
8226: PUSH
8227: LD_VAR 0 3
8231: GREATER
8232: IFFALSE 8258
// length := ( array - i_from ) + i_to else
8234: LD_ADDR_VAR 0 11
8238: PUSH
8239: LD_VAR 0 1
8243: PUSH
8244: LD_VAR 0 2
8248: MINUS
8249: PUSH
8250: LD_VAR 0 3
8254: PLUS
8255: ST_TO_ADDR
8256: GO 8274
// length := i_to - i_from ;
8258: LD_ADDR_VAR 0 11
8262: PUSH
8263: LD_VAR 0 3
8267: PUSH
8268: LD_VAR 0 2
8272: MINUS
8273: ST_TO_ADDR
// end else
8274: GO 8337
// begin d := - 1 ;
8276: LD_ADDR_VAR 0 9
8280: PUSH
8281: LD_INT 1
8283: NEG
8284: ST_TO_ADDR
// if i_from > i_to then
8285: LD_VAR 0 2
8289: PUSH
8290: LD_VAR 0 3
8294: GREATER
8295: IFFALSE 8315
// length := i_from - i_to else
8297: LD_ADDR_VAR 0 11
8301: PUSH
8302: LD_VAR 0 2
8306: PUSH
8307: LD_VAR 0 3
8311: MINUS
8312: ST_TO_ADDR
8313: GO 8337
// length := ( array - i_to ) + i_from ;
8315: LD_ADDR_VAR 0 11
8319: PUSH
8320: LD_VAR 0 1
8324: PUSH
8325: LD_VAR 0 3
8329: MINUS
8330: PUSH
8331: LD_VAR 0 2
8335: PLUS
8336: ST_TO_ADDR
// end ; if not length then
8337: LD_VAR 0 11
8341: NOT
8342: IFFALSE 8346
// exit ;
8344: GO 8504
// tmp := array ;
8346: LD_ADDR_VAR 0 10
8350: PUSH
8351: LD_VAR 0 1
8355: ST_TO_ADDR
// for i = 1 to length do
8356: LD_ADDR_VAR 0 6
8360: PUSH
8361: DOUBLE
8362: LD_INT 1
8364: DEC
8365: ST_TO_ADDR
8366: LD_VAR 0 11
8370: PUSH
8371: FOR_TO
8372: IFFALSE 8492
// begin for j = 1 to array do
8374: LD_ADDR_VAR 0 7
8378: PUSH
8379: DOUBLE
8380: LD_INT 1
8382: DEC
8383: ST_TO_ADDR
8384: LD_VAR 0 1
8388: PUSH
8389: FOR_TO
8390: IFFALSE 8478
// begin k := j + d ;
8392: LD_ADDR_VAR 0 8
8396: PUSH
8397: LD_VAR 0 7
8401: PUSH
8402: LD_VAR 0 9
8406: PLUS
8407: ST_TO_ADDR
// if k > array then
8408: LD_VAR 0 8
8412: PUSH
8413: LD_VAR 0 1
8417: GREATER
8418: IFFALSE 8428
// k := 1 ;
8420: LD_ADDR_VAR 0 8
8424: PUSH
8425: LD_INT 1
8427: ST_TO_ADDR
// if not k then
8428: LD_VAR 0 8
8432: NOT
8433: IFFALSE 8445
// k := array ;
8435: LD_ADDR_VAR 0 8
8439: PUSH
8440: LD_VAR 0 1
8444: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
8445: LD_ADDR_VAR 0 10
8449: PUSH
8450: LD_VAR 0 10
8454: PPUSH
8455: LD_VAR 0 8
8459: PPUSH
8460: LD_VAR 0 1
8464: PUSH
8465: LD_VAR 0 7
8469: ARRAY
8470: PPUSH
8471: CALL_OW 1
8475: ST_TO_ADDR
// end ;
8476: GO 8389
8478: POP
8479: POP
// array := tmp ;
8480: LD_ADDR_VAR 0 1
8484: PUSH
8485: LD_VAR 0 10
8489: ST_TO_ADDR
// end ;
8490: GO 8371
8492: POP
8493: POP
// result := array ;
8494: LD_ADDR_VAR 0 5
8498: PUSH
8499: LD_VAR 0 1
8503: ST_TO_ADDR
// end ;
8504: LD_VAR 0 5
8508: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
8509: LD_INT 0
8511: PPUSH
8512: PPUSH
// result := 0 ;
8513: LD_ADDR_VAR 0 3
8517: PUSH
8518: LD_INT 0
8520: ST_TO_ADDR
// if not array or not value in array then
8521: LD_VAR 0 1
8525: NOT
8526: PUSH
8527: LD_VAR 0 2
8531: PUSH
8532: LD_VAR 0 1
8536: IN
8537: NOT
8538: OR
8539: IFFALSE 8543
// exit ;
8541: GO 8597
// for i = 1 to array do
8543: LD_ADDR_VAR 0 4
8547: PUSH
8548: DOUBLE
8549: LD_INT 1
8551: DEC
8552: ST_TO_ADDR
8553: LD_VAR 0 1
8557: PUSH
8558: FOR_TO
8559: IFFALSE 8595
// if value = array [ i ] then
8561: LD_VAR 0 2
8565: PUSH
8566: LD_VAR 0 1
8570: PUSH
8571: LD_VAR 0 4
8575: ARRAY
8576: EQUAL
8577: IFFALSE 8593
// begin result := i ;
8579: LD_ADDR_VAR 0 3
8583: PUSH
8584: LD_VAR 0 4
8588: ST_TO_ADDR
// exit ;
8589: POP
8590: POP
8591: GO 8597
// end ;
8593: GO 8558
8595: POP
8596: POP
// end ;
8597: LD_VAR 0 3
8601: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
8602: LD_INT 0
8604: PPUSH
// vc_chassis := chassis ;
8605: LD_ADDR_OWVAR 37
8609: PUSH
8610: LD_VAR 0 1
8614: ST_TO_ADDR
// vc_engine := engine ;
8615: LD_ADDR_OWVAR 39
8619: PUSH
8620: LD_VAR 0 2
8624: ST_TO_ADDR
// vc_control := control ;
8625: LD_ADDR_OWVAR 38
8629: PUSH
8630: LD_VAR 0 3
8634: ST_TO_ADDR
// vc_weapon := weapon ;
8635: LD_ADDR_OWVAR 40
8639: PUSH
8640: LD_VAR 0 4
8644: ST_TO_ADDR
// vc_fuel_battery := fuel ;
8645: LD_ADDR_OWVAR 41
8649: PUSH
8650: LD_VAR 0 5
8654: ST_TO_ADDR
// end ;
8655: LD_VAR 0 6
8659: RET
// export function WantPlant ( unit ) ; var task ; begin
8660: LD_INT 0
8662: PPUSH
8663: PPUSH
// result := false ;
8664: LD_ADDR_VAR 0 2
8668: PUSH
8669: LD_INT 0
8671: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
8672: LD_ADDR_VAR 0 3
8676: PUSH
8677: LD_VAR 0 1
8681: PPUSH
8682: CALL_OW 437
8686: ST_TO_ADDR
// if task then
8687: LD_VAR 0 3
8691: IFFALSE 8719
// if task [ 1 ] [ 1 ] = p then
8693: LD_VAR 0 3
8697: PUSH
8698: LD_INT 1
8700: ARRAY
8701: PUSH
8702: LD_INT 1
8704: ARRAY
8705: PUSH
8706: LD_STRING p
8708: EQUAL
8709: IFFALSE 8719
// result := true ;
8711: LD_ADDR_VAR 0 2
8715: PUSH
8716: LD_INT 1
8718: ST_TO_ADDR
// end ;
8719: LD_VAR 0 2
8723: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8724: LD_INT 0
8726: PPUSH
8727: PPUSH
8728: PPUSH
8729: PPUSH
// if pos < 1 then
8730: LD_VAR 0 2
8734: PUSH
8735: LD_INT 1
8737: LESS
8738: IFFALSE 8742
// exit ;
8740: GO 9045
// if pos = 1 then
8742: LD_VAR 0 2
8746: PUSH
8747: LD_INT 1
8749: EQUAL
8750: IFFALSE 8783
// result := Replace ( arr , pos [ 1 ] , value ) else
8752: LD_ADDR_VAR 0 4
8756: PUSH
8757: LD_VAR 0 1
8761: PPUSH
8762: LD_VAR 0 2
8766: PUSH
8767: LD_INT 1
8769: ARRAY
8770: PPUSH
8771: LD_VAR 0 3
8775: PPUSH
8776: CALL_OW 1
8780: ST_TO_ADDR
8781: GO 9045
// begin tmp := arr ;
8783: LD_ADDR_VAR 0 6
8787: PUSH
8788: LD_VAR 0 1
8792: ST_TO_ADDR
// s_arr := [ tmp ] ;
8793: LD_ADDR_VAR 0 7
8797: PUSH
8798: LD_VAR 0 6
8802: PUSH
8803: EMPTY
8804: LIST
8805: ST_TO_ADDR
// for i = 1 to pos - 1 do
8806: LD_ADDR_VAR 0 5
8810: PUSH
8811: DOUBLE
8812: LD_INT 1
8814: DEC
8815: ST_TO_ADDR
8816: LD_VAR 0 2
8820: PUSH
8821: LD_INT 1
8823: MINUS
8824: PUSH
8825: FOR_TO
8826: IFFALSE 8871
// begin tmp := tmp [ pos [ i ] ] ;
8828: LD_ADDR_VAR 0 6
8832: PUSH
8833: LD_VAR 0 6
8837: PUSH
8838: LD_VAR 0 2
8842: PUSH
8843: LD_VAR 0 5
8847: ARRAY
8848: ARRAY
8849: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8850: LD_ADDR_VAR 0 7
8854: PUSH
8855: LD_VAR 0 7
8859: PUSH
8860: LD_VAR 0 6
8864: PUSH
8865: EMPTY
8866: LIST
8867: ADD
8868: ST_TO_ADDR
// end ;
8869: GO 8825
8871: POP
8872: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8873: LD_ADDR_VAR 0 6
8877: PUSH
8878: LD_VAR 0 6
8882: PPUSH
8883: LD_VAR 0 2
8887: PUSH
8888: LD_VAR 0 2
8892: ARRAY
8893: PPUSH
8894: LD_VAR 0 3
8898: PPUSH
8899: CALL_OW 1
8903: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8904: LD_ADDR_VAR 0 7
8908: PUSH
8909: LD_VAR 0 7
8913: PPUSH
8914: LD_VAR 0 7
8918: PPUSH
8919: LD_VAR 0 6
8923: PPUSH
8924: CALL_OW 1
8928: ST_TO_ADDR
// for i = s_arr downto 2 do
8929: LD_ADDR_VAR 0 5
8933: PUSH
8934: DOUBLE
8935: LD_VAR 0 7
8939: INC
8940: ST_TO_ADDR
8941: LD_INT 2
8943: PUSH
8944: FOR_DOWNTO
8945: IFFALSE 9029
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8947: LD_ADDR_VAR 0 6
8951: PUSH
8952: LD_VAR 0 7
8956: PUSH
8957: LD_VAR 0 5
8961: PUSH
8962: LD_INT 1
8964: MINUS
8965: ARRAY
8966: PPUSH
8967: LD_VAR 0 2
8971: PUSH
8972: LD_VAR 0 5
8976: PUSH
8977: LD_INT 1
8979: MINUS
8980: ARRAY
8981: PPUSH
8982: LD_VAR 0 7
8986: PUSH
8987: LD_VAR 0 5
8991: ARRAY
8992: PPUSH
8993: CALL_OW 1
8997: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8998: LD_ADDR_VAR 0 7
9002: PUSH
9003: LD_VAR 0 7
9007: PPUSH
9008: LD_VAR 0 5
9012: PUSH
9013: LD_INT 1
9015: MINUS
9016: PPUSH
9017: LD_VAR 0 6
9021: PPUSH
9022: CALL_OW 1
9026: ST_TO_ADDR
// end ;
9027: GO 8944
9029: POP
9030: POP
// result := s_arr [ 1 ] ;
9031: LD_ADDR_VAR 0 4
9035: PUSH
9036: LD_VAR 0 7
9040: PUSH
9041: LD_INT 1
9043: ARRAY
9044: ST_TO_ADDR
// end ; end ;
9045: LD_VAR 0 4
9049: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
9050: LD_INT 0
9052: PPUSH
9053: PPUSH
// if not list then
9054: LD_VAR 0 1
9058: NOT
9059: IFFALSE 9063
// exit ;
9061: GO 9154
// i := list [ pos1 ] ;
9063: LD_ADDR_VAR 0 5
9067: PUSH
9068: LD_VAR 0 1
9072: PUSH
9073: LD_VAR 0 2
9077: ARRAY
9078: ST_TO_ADDR
// if not i then
9079: LD_VAR 0 5
9083: NOT
9084: IFFALSE 9088
// exit ;
9086: GO 9154
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
9088: LD_ADDR_VAR 0 1
9092: PUSH
9093: LD_VAR 0 1
9097: PPUSH
9098: LD_VAR 0 2
9102: PPUSH
9103: LD_VAR 0 1
9107: PUSH
9108: LD_VAR 0 3
9112: ARRAY
9113: PPUSH
9114: CALL_OW 1
9118: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
9119: LD_ADDR_VAR 0 1
9123: PUSH
9124: LD_VAR 0 1
9128: PPUSH
9129: LD_VAR 0 3
9133: PPUSH
9134: LD_VAR 0 5
9138: PPUSH
9139: CALL_OW 1
9143: ST_TO_ADDR
// result := list ;
9144: LD_ADDR_VAR 0 4
9148: PUSH
9149: LD_VAR 0 1
9153: ST_TO_ADDR
// end ;
9154: LD_VAR 0 4
9158: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
9159: LD_INT 0
9161: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
9162: LD_ADDR_VAR 0 5
9166: PUSH
9167: LD_VAR 0 1
9171: PPUSH
9172: CALL_OW 250
9176: PPUSH
9177: LD_VAR 0 1
9181: PPUSH
9182: CALL_OW 251
9186: PPUSH
9187: LD_VAR 0 2
9191: PPUSH
9192: LD_VAR 0 3
9196: PPUSH
9197: LD_VAR 0 4
9201: PPUSH
9202: CALL 9212 0 5
9206: ST_TO_ADDR
// end ;
9207: LD_VAR 0 5
9211: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
9212: LD_INT 0
9214: PPUSH
9215: PPUSH
9216: PPUSH
9217: PPUSH
// if not list then
9218: LD_VAR 0 3
9222: NOT
9223: IFFALSE 9227
// exit ;
9225: GO 9615
// result := [ ] ;
9227: LD_ADDR_VAR 0 6
9231: PUSH
9232: EMPTY
9233: ST_TO_ADDR
// for i in list do
9234: LD_ADDR_VAR 0 7
9238: PUSH
9239: LD_VAR 0 3
9243: PUSH
9244: FOR_IN
9245: IFFALSE 9447
// begin tmp := GetDistUnitXY ( i , x , y ) ;
9247: LD_ADDR_VAR 0 9
9251: PUSH
9252: LD_VAR 0 7
9256: PPUSH
9257: LD_VAR 0 1
9261: PPUSH
9262: LD_VAR 0 2
9266: PPUSH
9267: CALL_OW 297
9271: ST_TO_ADDR
// if not result then
9272: LD_VAR 0 6
9276: NOT
9277: IFFALSE 9303
// result := [ [ i , tmp ] ] else
9279: LD_ADDR_VAR 0 6
9283: PUSH
9284: LD_VAR 0 7
9288: PUSH
9289: LD_VAR 0 9
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: PUSH
9298: EMPTY
9299: LIST
9300: ST_TO_ADDR
9301: GO 9445
// begin if result [ result ] [ 2 ] < tmp then
9303: LD_VAR 0 6
9307: PUSH
9308: LD_VAR 0 6
9312: ARRAY
9313: PUSH
9314: LD_INT 2
9316: ARRAY
9317: PUSH
9318: LD_VAR 0 9
9322: LESS
9323: IFFALSE 9365
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9325: LD_ADDR_VAR 0 6
9329: PUSH
9330: LD_VAR 0 6
9334: PPUSH
9335: LD_VAR 0 6
9339: PUSH
9340: LD_INT 1
9342: PLUS
9343: PPUSH
9344: LD_VAR 0 7
9348: PUSH
9349: LD_VAR 0 9
9353: PUSH
9354: EMPTY
9355: LIST
9356: LIST
9357: PPUSH
9358: CALL_OW 2
9362: ST_TO_ADDR
9363: GO 9445
// for j = 1 to result do
9365: LD_ADDR_VAR 0 8
9369: PUSH
9370: DOUBLE
9371: LD_INT 1
9373: DEC
9374: ST_TO_ADDR
9375: LD_VAR 0 6
9379: PUSH
9380: FOR_TO
9381: IFFALSE 9443
// begin if tmp < result [ j ] [ 2 ] then
9383: LD_VAR 0 9
9387: PUSH
9388: LD_VAR 0 6
9392: PUSH
9393: LD_VAR 0 8
9397: ARRAY
9398: PUSH
9399: LD_INT 2
9401: ARRAY
9402: LESS
9403: IFFALSE 9441
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9405: LD_ADDR_VAR 0 6
9409: PUSH
9410: LD_VAR 0 6
9414: PPUSH
9415: LD_VAR 0 8
9419: PPUSH
9420: LD_VAR 0 7
9424: PUSH
9425: LD_VAR 0 9
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: PPUSH
9434: CALL_OW 2
9438: ST_TO_ADDR
// break ;
9439: GO 9443
// end ; end ;
9441: GO 9380
9443: POP
9444: POP
// end ; end ;
9445: GO 9244
9447: POP
9448: POP
// if result and not asc then
9449: LD_VAR 0 6
9453: PUSH
9454: LD_VAR 0 4
9458: NOT
9459: AND
9460: IFFALSE 9535
// begin tmp := result ;
9462: LD_ADDR_VAR 0 9
9466: PUSH
9467: LD_VAR 0 6
9471: ST_TO_ADDR
// for i = tmp downto 1 do
9472: LD_ADDR_VAR 0 7
9476: PUSH
9477: DOUBLE
9478: LD_VAR 0 9
9482: INC
9483: ST_TO_ADDR
9484: LD_INT 1
9486: PUSH
9487: FOR_DOWNTO
9488: IFFALSE 9533
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9490: LD_ADDR_VAR 0 6
9494: PUSH
9495: LD_VAR 0 6
9499: PPUSH
9500: LD_VAR 0 9
9504: PUSH
9505: LD_VAR 0 7
9509: MINUS
9510: PUSH
9511: LD_INT 1
9513: PLUS
9514: PPUSH
9515: LD_VAR 0 9
9519: PUSH
9520: LD_VAR 0 7
9524: ARRAY
9525: PPUSH
9526: CALL_OW 1
9530: ST_TO_ADDR
9531: GO 9487
9533: POP
9534: POP
// end ; tmp := [ ] ;
9535: LD_ADDR_VAR 0 9
9539: PUSH
9540: EMPTY
9541: ST_TO_ADDR
// if mode then
9542: LD_VAR 0 5
9546: IFFALSE 9615
// begin for i = 1 to result do
9548: LD_ADDR_VAR 0 7
9552: PUSH
9553: DOUBLE
9554: LD_INT 1
9556: DEC
9557: ST_TO_ADDR
9558: LD_VAR 0 6
9562: PUSH
9563: FOR_TO
9564: IFFALSE 9603
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9566: LD_ADDR_VAR 0 9
9570: PUSH
9571: LD_VAR 0 9
9575: PPUSH
9576: LD_VAR 0 7
9580: PPUSH
9581: LD_VAR 0 6
9585: PUSH
9586: LD_VAR 0 7
9590: ARRAY
9591: PUSH
9592: LD_INT 1
9594: ARRAY
9595: PPUSH
9596: CALL_OW 1
9600: ST_TO_ADDR
9601: GO 9563
9603: POP
9604: POP
// result := tmp ;
9605: LD_ADDR_VAR 0 6
9609: PUSH
9610: LD_VAR 0 9
9614: ST_TO_ADDR
// end ; end ;
9615: LD_VAR 0 6
9619: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9620: LD_INT 0
9622: PPUSH
9623: PPUSH
9624: PPUSH
9625: PPUSH
9626: PPUSH
9627: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9628: LD_ADDR_VAR 0 5
9632: PUSH
9633: LD_INT 0
9635: PUSH
9636: LD_INT 0
9638: PUSH
9639: LD_INT 0
9641: PUSH
9642: EMPTY
9643: PUSH
9644: EMPTY
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: ST_TO_ADDR
// if not x or not y then
9650: LD_VAR 0 2
9654: NOT
9655: PUSH
9656: LD_VAR 0 3
9660: NOT
9661: OR
9662: IFFALSE 9666
// exit ;
9664: GO 11318
// if not range then
9666: LD_VAR 0 4
9670: NOT
9671: IFFALSE 9681
// range := 10 ;
9673: LD_ADDR_VAR 0 4
9677: PUSH
9678: LD_INT 10
9680: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9681: LD_ADDR_VAR 0 8
9685: PUSH
9686: LD_INT 81
9688: PUSH
9689: LD_VAR 0 1
9693: PUSH
9694: EMPTY
9695: LIST
9696: LIST
9697: PUSH
9698: LD_INT 92
9700: PUSH
9701: LD_VAR 0 2
9705: PUSH
9706: LD_VAR 0 3
9710: PUSH
9711: LD_VAR 0 4
9715: PUSH
9716: EMPTY
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: PUSH
9722: LD_INT 3
9724: PUSH
9725: LD_INT 21
9727: PUSH
9728: LD_INT 3
9730: PUSH
9731: EMPTY
9732: LIST
9733: LIST
9734: PUSH
9735: EMPTY
9736: LIST
9737: LIST
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: LIST
9743: PPUSH
9744: CALL_OW 69
9748: ST_TO_ADDR
// if not tmp then
9749: LD_VAR 0 8
9753: NOT
9754: IFFALSE 9758
// exit ;
9756: GO 11318
// for i in tmp do
9758: LD_ADDR_VAR 0 6
9762: PUSH
9763: LD_VAR 0 8
9767: PUSH
9768: FOR_IN
9769: IFFALSE 11293
// begin points := [ 0 , 0 , 0 ] ;
9771: LD_ADDR_VAR 0 9
9775: PUSH
9776: LD_INT 0
9778: PUSH
9779: LD_INT 0
9781: PUSH
9782: LD_INT 0
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: LIST
9789: ST_TO_ADDR
// bpoints := 1 ;
9790: LD_ADDR_VAR 0 10
9794: PUSH
9795: LD_INT 1
9797: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9798: LD_VAR 0 6
9802: PPUSH
9803: CALL_OW 247
9807: PUSH
9808: LD_INT 1
9810: DOUBLE
9811: EQUAL
9812: IFTRUE 9816
9814: GO 10394
9816: POP
// begin if GetClass ( i ) = 1 then
9817: LD_VAR 0 6
9821: PPUSH
9822: CALL_OW 257
9826: PUSH
9827: LD_INT 1
9829: EQUAL
9830: IFFALSE 9851
// points := [ 10 , 5 , 3 ] ;
9832: LD_ADDR_VAR 0 9
9836: PUSH
9837: LD_INT 10
9839: PUSH
9840: LD_INT 5
9842: PUSH
9843: LD_INT 3
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: LIST
9850: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9851: LD_VAR 0 6
9855: PPUSH
9856: CALL_OW 257
9860: PUSH
9861: LD_INT 2
9863: PUSH
9864: LD_INT 3
9866: PUSH
9867: LD_INT 4
9869: PUSH
9870: EMPTY
9871: LIST
9872: LIST
9873: LIST
9874: IN
9875: IFFALSE 9896
// points := [ 3 , 2 , 1 ] ;
9877: LD_ADDR_VAR 0 9
9881: PUSH
9882: LD_INT 3
9884: PUSH
9885: LD_INT 2
9887: PUSH
9888: LD_INT 1
9890: PUSH
9891: EMPTY
9892: LIST
9893: LIST
9894: LIST
9895: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9896: LD_VAR 0 6
9900: PPUSH
9901: CALL_OW 257
9905: PUSH
9906: LD_INT 5
9908: EQUAL
9909: IFFALSE 9930
// points := [ 130 , 5 , 2 ] ;
9911: LD_ADDR_VAR 0 9
9915: PUSH
9916: LD_INT 130
9918: PUSH
9919: LD_INT 5
9921: PUSH
9922: LD_INT 2
9924: PUSH
9925: EMPTY
9926: LIST
9927: LIST
9928: LIST
9929: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9930: LD_VAR 0 6
9934: PPUSH
9935: CALL_OW 257
9939: PUSH
9940: LD_INT 8
9942: EQUAL
9943: IFFALSE 9964
// points := [ 35 , 35 , 30 ] ;
9945: LD_ADDR_VAR 0 9
9949: PUSH
9950: LD_INT 35
9952: PUSH
9953: LD_INT 35
9955: PUSH
9956: LD_INT 30
9958: PUSH
9959: EMPTY
9960: LIST
9961: LIST
9962: LIST
9963: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9964: LD_VAR 0 6
9968: PPUSH
9969: CALL_OW 257
9973: PUSH
9974: LD_INT 9
9976: EQUAL
9977: IFFALSE 9998
// points := [ 20 , 55 , 40 ] ;
9979: LD_ADDR_VAR 0 9
9983: PUSH
9984: LD_INT 20
9986: PUSH
9987: LD_INT 55
9989: PUSH
9990: LD_INT 40
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: LIST
9997: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9998: LD_VAR 0 6
10002: PPUSH
10003: CALL_OW 257
10007: PUSH
10008: LD_INT 12
10010: PUSH
10011: LD_INT 16
10013: PUSH
10014: EMPTY
10015: LIST
10016: LIST
10017: IN
10018: IFFALSE 10039
// points := [ 5 , 3 , 2 ] ;
10020: LD_ADDR_VAR 0 9
10024: PUSH
10025: LD_INT 5
10027: PUSH
10028: LD_INT 3
10030: PUSH
10031: LD_INT 2
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: LIST
10038: ST_TO_ADDR
// if GetClass ( i ) = 17 then
10039: LD_VAR 0 6
10043: PPUSH
10044: CALL_OW 257
10048: PUSH
10049: LD_INT 17
10051: EQUAL
10052: IFFALSE 10073
// points := [ 100 , 50 , 75 ] ;
10054: LD_ADDR_VAR 0 9
10058: PUSH
10059: LD_INT 100
10061: PUSH
10062: LD_INT 50
10064: PUSH
10065: LD_INT 75
10067: PUSH
10068: EMPTY
10069: LIST
10070: LIST
10071: LIST
10072: ST_TO_ADDR
// if GetClass ( i ) = 15 then
10073: LD_VAR 0 6
10077: PPUSH
10078: CALL_OW 257
10082: PUSH
10083: LD_INT 15
10085: EQUAL
10086: IFFALSE 10107
// points := [ 10 , 5 , 3 ] ;
10088: LD_ADDR_VAR 0 9
10092: PUSH
10093: LD_INT 10
10095: PUSH
10096: LD_INT 5
10098: PUSH
10099: LD_INT 3
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: LIST
10106: ST_TO_ADDR
// if GetClass ( i ) = 14 then
10107: LD_VAR 0 6
10111: PPUSH
10112: CALL_OW 257
10116: PUSH
10117: LD_INT 14
10119: EQUAL
10120: IFFALSE 10141
// points := [ 10 , 0 , 0 ] ;
10122: LD_ADDR_VAR 0 9
10126: PUSH
10127: LD_INT 10
10129: PUSH
10130: LD_INT 0
10132: PUSH
10133: LD_INT 0
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: LIST
10140: ST_TO_ADDR
// if GetClass ( i ) = 11 then
10141: LD_VAR 0 6
10145: PPUSH
10146: CALL_OW 257
10150: PUSH
10151: LD_INT 11
10153: EQUAL
10154: IFFALSE 10175
// points := [ 30 , 10 , 5 ] ;
10156: LD_ADDR_VAR 0 9
10160: PUSH
10161: LD_INT 30
10163: PUSH
10164: LD_INT 10
10166: PUSH
10167: LD_INT 5
10169: PUSH
10170: EMPTY
10171: LIST
10172: LIST
10173: LIST
10174: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
10175: LD_VAR 0 1
10179: PPUSH
10180: LD_INT 5
10182: PPUSH
10183: CALL_OW 321
10187: PUSH
10188: LD_INT 2
10190: EQUAL
10191: IFFALSE 10208
// bpoints := bpoints * 1.8 ;
10193: LD_ADDR_VAR 0 10
10197: PUSH
10198: LD_VAR 0 10
10202: PUSH
10203: LD_REAL  1.80000000000000E+0000
10206: MUL
10207: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
10208: LD_VAR 0 6
10212: PPUSH
10213: CALL_OW 257
10217: PUSH
10218: LD_INT 1
10220: PUSH
10221: LD_INT 2
10223: PUSH
10224: LD_INT 3
10226: PUSH
10227: LD_INT 4
10229: PUSH
10230: EMPTY
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: IN
10236: PUSH
10237: LD_VAR 0 1
10241: PPUSH
10242: LD_INT 51
10244: PPUSH
10245: CALL_OW 321
10249: PUSH
10250: LD_INT 2
10252: EQUAL
10253: AND
10254: IFFALSE 10271
// bpoints := bpoints * 1.2 ;
10256: LD_ADDR_VAR 0 10
10260: PUSH
10261: LD_VAR 0 10
10265: PUSH
10266: LD_REAL  1.20000000000000E+0000
10269: MUL
10270: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
10271: LD_VAR 0 6
10275: PPUSH
10276: CALL_OW 257
10280: PUSH
10281: LD_INT 5
10283: PUSH
10284: LD_INT 7
10286: PUSH
10287: LD_INT 9
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: LIST
10294: IN
10295: PUSH
10296: LD_VAR 0 1
10300: PPUSH
10301: LD_INT 52
10303: PPUSH
10304: CALL_OW 321
10308: PUSH
10309: LD_INT 2
10311: EQUAL
10312: AND
10313: IFFALSE 10330
// bpoints := bpoints * 1.5 ;
10315: LD_ADDR_VAR 0 10
10319: PUSH
10320: LD_VAR 0 10
10324: PUSH
10325: LD_REAL  1.50000000000000E+0000
10328: MUL
10329: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10330: LD_VAR 0 1
10334: PPUSH
10335: LD_INT 66
10337: PPUSH
10338: CALL_OW 321
10342: PUSH
10343: LD_INT 2
10345: EQUAL
10346: IFFALSE 10363
// bpoints := bpoints * 1.1 ;
10348: LD_ADDR_VAR 0 10
10352: PUSH
10353: LD_VAR 0 10
10357: PUSH
10358: LD_REAL  1.10000000000000E+0000
10361: MUL
10362: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10363: LD_ADDR_VAR 0 10
10367: PUSH
10368: LD_VAR 0 10
10372: PUSH
10373: LD_VAR 0 6
10377: PPUSH
10378: LD_INT 1
10380: PPUSH
10381: CALL_OW 259
10385: PUSH
10386: LD_REAL  1.15000000000000E+0000
10389: MUL
10390: MUL
10391: ST_TO_ADDR
// end ; unit_vehicle :
10392: GO 11222
10394: LD_INT 2
10396: DOUBLE
10397: EQUAL
10398: IFTRUE 10402
10400: GO 11210
10402: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10403: LD_VAR 0 6
10407: PPUSH
10408: CALL_OW 264
10412: PUSH
10413: LD_INT 2
10415: PUSH
10416: LD_INT 42
10418: PUSH
10419: LD_INT 24
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: LIST
10426: IN
10427: IFFALSE 10448
// points := [ 25 , 5 , 3 ] ;
10429: LD_ADDR_VAR 0 9
10433: PUSH
10434: LD_INT 25
10436: PUSH
10437: LD_INT 5
10439: PUSH
10440: LD_INT 3
10442: PUSH
10443: EMPTY
10444: LIST
10445: LIST
10446: LIST
10447: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10448: LD_VAR 0 6
10452: PPUSH
10453: CALL_OW 264
10457: PUSH
10458: LD_INT 4
10460: PUSH
10461: LD_INT 43
10463: PUSH
10464: LD_INT 25
10466: PUSH
10467: EMPTY
10468: LIST
10469: LIST
10470: LIST
10471: IN
10472: IFFALSE 10493
// points := [ 40 , 15 , 5 ] ;
10474: LD_ADDR_VAR 0 9
10478: PUSH
10479: LD_INT 40
10481: PUSH
10482: LD_INT 15
10484: PUSH
10485: LD_INT 5
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: LIST
10492: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10493: LD_VAR 0 6
10497: PPUSH
10498: CALL_OW 264
10502: PUSH
10503: LD_INT 3
10505: PUSH
10506: LD_INT 23
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: IN
10513: IFFALSE 10534
// points := [ 7 , 25 , 8 ] ;
10515: LD_ADDR_VAR 0 9
10519: PUSH
10520: LD_INT 7
10522: PUSH
10523: LD_INT 25
10525: PUSH
10526: LD_INT 8
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: LIST
10533: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10534: LD_VAR 0 6
10538: PPUSH
10539: CALL_OW 264
10543: PUSH
10544: LD_INT 5
10546: PUSH
10547: LD_INT 27
10549: PUSH
10550: LD_INT 44
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: LIST
10557: IN
10558: IFFALSE 10579
// points := [ 14 , 50 , 16 ] ;
10560: LD_ADDR_VAR 0 9
10564: PUSH
10565: LD_INT 14
10567: PUSH
10568: LD_INT 50
10570: PUSH
10571: LD_INT 16
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: LIST
10578: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10579: LD_VAR 0 6
10583: PPUSH
10584: CALL_OW 264
10588: PUSH
10589: LD_INT 6
10591: PUSH
10592: LD_INT 46
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: IN
10599: IFFALSE 10620
// points := [ 32 , 120 , 70 ] ;
10601: LD_ADDR_VAR 0 9
10605: PUSH
10606: LD_INT 32
10608: PUSH
10609: LD_INT 120
10611: PUSH
10612: LD_INT 70
10614: PUSH
10615: EMPTY
10616: LIST
10617: LIST
10618: LIST
10619: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10620: LD_VAR 0 6
10624: PPUSH
10625: CALL_OW 264
10629: PUSH
10630: LD_INT 7
10632: PUSH
10633: LD_INT 28
10635: PUSH
10636: LD_INT 45
10638: PUSH
10639: LD_EXP 26
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: IN
10650: IFFALSE 10671
// points := [ 35 , 20 , 45 ] ;
10652: LD_ADDR_VAR 0 9
10656: PUSH
10657: LD_INT 35
10659: PUSH
10660: LD_INT 20
10662: PUSH
10663: LD_INT 45
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: LIST
10670: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10671: LD_VAR 0 6
10675: PPUSH
10676: CALL_OW 264
10680: PUSH
10681: LD_INT 47
10683: PUSH
10684: EMPTY
10685: LIST
10686: IN
10687: IFFALSE 10708
// points := [ 67 , 45 , 75 ] ;
10689: LD_ADDR_VAR 0 9
10693: PUSH
10694: LD_INT 67
10696: PUSH
10697: LD_INT 45
10699: PUSH
10700: LD_INT 75
10702: PUSH
10703: EMPTY
10704: LIST
10705: LIST
10706: LIST
10707: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10708: LD_VAR 0 6
10712: PPUSH
10713: CALL_OW 264
10717: PUSH
10718: LD_INT 26
10720: PUSH
10721: EMPTY
10722: LIST
10723: IN
10724: IFFALSE 10745
// points := [ 120 , 30 , 80 ] ;
10726: LD_ADDR_VAR 0 9
10730: PUSH
10731: LD_INT 120
10733: PUSH
10734: LD_INT 30
10736: PUSH
10737: LD_INT 80
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: LIST
10744: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10745: LD_VAR 0 6
10749: PPUSH
10750: CALL_OW 264
10754: PUSH
10755: LD_INT 22
10757: PUSH
10758: EMPTY
10759: LIST
10760: IN
10761: IFFALSE 10782
// points := [ 40 , 1 , 1 ] ;
10763: LD_ADDR_VAR 0 9
10767: PUSH
10768: LD_INT 40
10770: PUSH
10771: LD_INT 1
10773: PUSH
10774: LD_INT 1
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: LIST
10781: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10782: LD_VAR 0 6
10786: PPUSH
10787: CALL_OW 264
10791: PUSH
10792: LD_INT 29
10794: PUSH
10795: EMPTY
10796: LIST
10797: IN
10798: IFFALSE 10819
// points := [ 70 , 200 , 400 ] ;
10800: LD_ADDR_VAR 0 9
10804: PUSH
10805: LD_INT 70
10807: PUSH
10808: LD_INT 200
10810: PUSH
10811: LD_INT 400
10813: PUSH
10814: EMPTY
10815: LIST
10816: LIST
10817: LIST
10818: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10819: LD_VAR 0 6
10823: PPUSH
10824: CALL_OW 264
10828: PUSH
10829: LD_INT 14
10831: PUSH
10832: LD_INT 53
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: IN
10839: IFFALSE 10860
// points := [ 40 , 10 , 20 ] ;
10841: LD_ADDR_VAR 0 9
10845: PUSH
10846: LD_INT 40
10848: PUSH
10849: LD_INT 10
10851: PUSH
10852: LD_INT 20
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: LIST
10859: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10860: LD_VAR 0 6
10864: PPUSH
10865: CALL_OW 264
10869: PUSH
10870: LD_INT 9
10872: PUSH
10873: EMPTY
10874: LIST
10875: IN
10876: IFFALSE 10897
// points := [ 5 , 70 , 20 ] ;
10878: LD_ADDR_VAR 0 9
10882: PUSH
10883: LD_INT 5
10885: PUSH
10886: LD_INT 70
10888: PUSH
10889: LD_INT 20
10891: PUSH
10892: EMPTY
10893: LIST
10894: LIST
10895: LIST
10896: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10897: LD_VAR 0 6
10901: PPUSH
10902: CALL_OW 264
10906: PUSH
10907: LD_INT 10
10909: PUSH
10910: EMPTY
10911: LIST
10912: IN
10913: IFFALSE 10934
// points := [ 35 , 110 , 70 ] ;
10915: LD_ADDR_VAR 0 9
10919: PUSH
10920: LD_INT 35
10922: PUSH
10923: LD_INT 110
10925: PUSH
10926: LD_INT 70
10928: PUSH
10929: EMPTY
10930: LIST
10931: LIST
10932: LIST
10933: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10934: LD_VAR 0 6
10938: PPUSH
10939: CALL_OW 265
10943: PUSH
10944: LD_INT 25
10946: EQUAL
10947: IFFALSE 10968
// points := [ 80 , 65 , 100 ] ;
10949: LD_ADDR_VAR 0 9
10953: PUSH
10954: LD_INT 80
10956: PUSH
10957: LD_INT 65
10959: PUSH
10960: LD_INT 100
10962: PUSH
10963: EMPTY
10964: LIST
10965: LIST
10966: LIST
10967: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10968: LD_VAR 0 6
10972: PPUSH
10973: CALL_OW 263
10977: PUSH
10978: LD_INT 1
10980: EQUAL
10981: IFFALSE 11016
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10983: LD_ADDR_VAR 0 10
10987: PUSH
10988: LD_VAR 0 10
10992: PUSH
10993: LD_VAR 0 6
10997: PPUSH
10998: CALL_OW 311
11002: PPUSH
11003: LD_INT 3
11005: PPUSH
11006: CALL_OW 259
11010: PUSH
11011: LD_INT 4
11013: MUL
11014: MUL
11015: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
11016: LD_VAR 0 6
11020: PPUSH
11021: CALL_OW 263
11025: PUSH
11026: LD_INT 2
11028: EQUAL
11029: IFFALSE 11080
// begin j := IsControledBy ( i ) ;
11031: LD_ADDR_VAR 0 7
11035: PUSH
11036: LD_VAR 0 6
11040: PPUSH
11041: CALL_OW 312
11045: ST_TO_ADDR
// if j then
11046: LD_VAR 0 7
11050: IFFALSE 11080
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
11052: LD_ADDR_VAR 0 10
11056: PUSH
11057: LD_VAR 0 10
11061: PUSH
11062: LD_VAR 0 7
11066: PPUSH
11067: LD_INT 3
11069: PPUSH
11070: CALL_OW 259
11074: PUSH
11075: LD_INT 3
11077: MUL
11078: MUL
11079: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
11080: LD_VAR 0 6
11084: PPUSH
11085: CALL_OW 264
11089: PUSH
11090: LD_INT 5
11092: PUSH
11093: LD_INT 6
11095: PUSH
11096: LD_INT 46
11098: PUSH
11099: LD_INT 44
11101: PUSH
11102: LD_INT 47
11104: PUSH
11105: LD_INT 45
11107: PUSH
11108: LD_INT 28
11110: PUSH
11111: LD_INT 7
11113: PUSH
11114: LD_INT 27
11116: PUSH
11117: LD_INT 29
11119: PUSH
11120: EMPTY
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: IN
11132: PUSH
11133: LD_VAR 0 1
11137: PPUSH
11138: LD_INT 52
11140: PPUSH
11141: CALL_OW 321
11145: PUSH
11146: LD_INT 2
11148: EQUAL
11149: AND
11150: IFFALSE 11167
// bpoints := bpoints * 1.2 ;
11152: LD_ADDR_VAR 0 10
11156: PUSH
11157: LD_VAR 0 10
11161: PUSH
11162: LD_REAL  1.20000000000000E+0000
11165: MUL
11166: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
11167: LD_VAR 0 6
11171: PPUSH
11172: CALL_OW 264
11176: PUSH
11177: LD_INT 6
11179: PUSH
11180: LD_INT 46
11182: PUSH
11183: LD_INT 47
11185: PUSH
11186: EMPTY
11187: LIST
11188: LIST
11189: LIST
11190: IN
11191: IFFALSE 11208
// bpoints := bpoints * 1.2 ;
11193: LD_ADDR_VAR 0 10
11197: PUSH
11198: LD_VAR 0 10
11202: PUSH
11203: LD_REAL  1.20000000000000E+0000
11206: MUL
11207: ST_TO_ADDR
// end ; unit_building :
11208: GO 11222
11210: LD_INT 3
11212: DOUBLE
11213: EQUAL
11214: IFTRUE 11218
11216: GO 11221
11218: POP
// ; end ;
11219: GO 11222
11221: POP
// for j = 1 to 3 do
11222: LD_ADDR_VAR 0 7
11226: PUSH
11227: DOUBLE
11228: LD_INT 1
11230: DEC
11231: ST_TO_ADDR
11232: LD_INT 3
11234: PUSH
11235: FOR_TO
11236: IFFALSE 11289
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
11238: LD_ADDR_VAR 0 5
11242: PUSH
11243: LD_VAR 0 5
11247: PPUSH
11248: LD_VAR 0 7
11252: PPUSH
11253: LD_VAR 0 5
11257: PUSH
11258: LD_VAR 0 7
11262: ARRAY
11263: PUSH
11264: LD_VAR 0 9
11268: PUSH
11269: LD_VAR 0 7
11273: ARRAY
11274: PUSH
11275: LD_VAR 0 10
11279: MUL
11280: PLUS
11281: PPUSH
11282: CALL_OW 1
11286: ST_TO_ADDR
11287: GO 11235
11289: POP
11290: POP
// end ;
11291: GO 9768
11293: POP
11294: POP
// result := Replace ( result , 4 , tmp ) ;
11295: LD_ADDR_VAR 0 5
11299: PUSH
11300: LD_VAR 0 5
11304: PPUSH
11305: LD_INT 4
11307: PPUSH
11308: LD_VAR 0 8
11312: PPUSH
11313: CALL_OW 1
11317: ST_TO_ADDR
// end ;
11318: LD_VAR 0 5
11322: RET
// export function DangerAtRange ( unit , range ) ; begin
11323: LD_INT 0
11325: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11326: LD_ADDR_VAR 0 3
11330: PUSH
11331: LD_VAR 0 1
11335: PPUSH
11336: CALL_OW 255
11340: PPUSH
11341: LD_VAR 0 1
11345: PPUSH
11346: CALL_OW 250
11350: PPUSH
11351: LD_VAR 0 1
11355: PPUSH
11356: CALL_OW 251
11360: PPUSH
11361: LD_VAR 0 2
11365: PPUSH
11366: CALL 9620 0 4
11370: ST_TO_ADDR
// end ;
11371: LD_VAR 0 3
11375: RET
// export function DangerInArea ( side , area ) ; begin
11376: LD_INT 0
11378: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11379: LD_ADDR_VAR 0 3
11383: PUSH
11384: LD_VAR 0 2
11388: PPUSH
11389: LD_INT 81
11391: PUSH
11392: LD_VAR 0 1
11396: PUSH
11397: EMPTY
11398: LIST
11399: LIST
11400: PPUSH
11401: CALL_OW 70
11405: ST_TO_ADDR
// end ;
11406: LD_VAR 0 3
11410: RET
// export function IsExtension ( b ) ; begin
11411: LD_INT 0
11413: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11414: LD_ADDR_VAR 0 2
11418: PUSH
11419: LD_VAR 0 1
11423: PUSH
11424: LD_INT 23
11426: PUSH
11427: LD_INT 20
11429: PUSH
11430: LD_INT 22
11432: PUSH
11433: LD_INT 17
11435: PUSH
11436: LD_INT 24
11438: PUSH
11439: LD_INT 21
11441: PUSH
11442: LD_INT 19
11444: PUSH
11445: LD_INT 16
11447: PUSH
11448: LD_INT 25
11450: PUSH
11451: LD_INT 18
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: IN
11466: ST_TO_ADDR
// end ;
11467: LD_VAR 0 2
11471: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11472: LD_INT 0
11474: PPUSH
11475: PPUSH
11476: PPUSH
// result := [ ] ;
11477: LD_ADDR_VAR 0 4
11481: PUSH
11482: EMPTY
11483: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11484: LD_ADDR_VAR 0 5
11488: PUSH
11489: LD_VAR 0 2
11493: PPUSH
11494: LD_INT 21
11496: PUSH
11497: LD_INT 3
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: PPUSH
11504: CALL_OW 70
11508: ST_TO_ADDR
// if not tmp then
11509: LD_VAR 0 5
11513: NOT
11514: IFFALSE 11518
// exit ;
11516: GO 11582
// if checkLink then
11518: LD_VAR 0 3
11522: IFFALSE 11572
// begin for i in tmp do
11524: LD_ADDR_VAR 0 6
11528: PUSH
11529: LD_VAR 0 5
11533: PUSH
11534: FOR_IN
11535: IFFALSE 11570
// if GetBase ( i ) <> base then
11537: LD_VAR 0 6
11541: PPUSH
11542: CALL_OW 274
11546: PUSH
11547: LD_VAR 0 1
11551: NONEQUAL
11552: IFFALSE 11568
// ComLinkToBase ( base , i ) ;
11554: LD_VAR 0 1
11558: PPUSH
11559: LD_VAR 0 6
11563: PPUSH
11564: CALL_OW 169
11568: GO 11534
11570: POP
11571: POP
// end ; result := tmp ;
11572: LD_ADDR_VAR 0 4
11576: PUSH
11577: LD_VAR 0 5
11581: ST_TO_ADDR
// end ;
11582: LD_VAR 0 4
11586: RET
// export function ComComplete ( units , b ) ; var i ; begin
11587: LD_INT 0
11589: PPUSH
11590: PPUSH
// if not units then
11591: LD_VAR 0 1
11595: NOT
11596: IFFALSE 11600
// exit ;
11598: GO 11690
// for i in units do
11600: LD_ADDR_VAR 0 4
11604: PUSH
11605: LD_VAR 0 1
11609: PUSH
11610: FOR_IN
11611: IFFALSE 11688
// if BuildingStatus ( b ) = bs_build then
11613: LD_VAR 0 2
11617: PPUSH
11618: CALL_OW 461
11622: PUSH
11623: LD_INT 1
11625: EQUAL
11626: IFFALSE 11686
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11628: LD_VAR 0 4
11632: PPUSH
11633: LD_STRING h
11635: PUSH
11636: LD_VAR 0 2
11640: PPUSH
11641: CALL_OW 250
11645: PUSH
11646: LD_VAR 0 2
11650: PPUSH
11651: CALL_OW 251
11655: PUSH
11656: LD_VAR 0 2
11660: PUSH
11661: LD_INT 0
11663: PUSH
11664: LD_INT 0
11666: PUSH
11667: LD_INT 0
11669: PUSH
11670: EMPTY
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: PUSH
11679: EMPTY
11680: LIST
11681: PPUSH
11682: CALL_OW 446
11686: GO 11610
11688: POP
11689: POP
// end ;
11690: LD_VAR 0 3
11694: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11695: LD_INT 0
11697: PPUSH
11698: PPUSH
11699: PPUSH
11700: PPUSH
11701: PPUSH
11702: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11703: LD_VAR 0 1
11707: NOT
11708: PUSH
11709: LD_VAR 0 1
11713: PPUSH
11714: CALL_OW 263
11718: PUSH
11719: LD_INT 2
11721: NONEQUAL
11722: OR
11723: IFFALSE 11727
// exit ;
11725: GO 12043
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11727: LD_ADDR_VAR 0 6
11731: PUSH
11732: LD_INT 22
11734: PUSH
11735: LD_VAR 0 1
11739: PPUSH
11740: CALL_OW 255
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: PUSH
11749: LD_INT 2
11751: PUSH
11752: LD_INT 30
11754: PUSH
11755: LD_INT 36
11757: PUSH
11758: EMPTY
11759: LIST
11760: LIST
11761: PUSH
11762: LD_INT 34
11764: PUSH
11765: LD_INT 31
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: PUSH
11772: EMPTY
11773: LIST
11774: LIST
11775: LIST
11776: PUSH
11777: EMPTY
11778: LIST
11779: LIST
11780: PPUSH
11781: CALL_OW 69
11785: ST_TO_ADDR
// if not tmp then
11786: LD_VAR 0 6
11790: NOT
11791: IFFALSE 11795
// exit ;
11793: GO 12043
// result := [ ] ;
11795: LD_ADDR_VAR 0 2
11799: PUSH
11800: EMPTY
11801: ST_TO_ADDR
// for i in tmp do
11802: LD_ADDR_VAR 0 3
11806: PUSH
11807: LD_VAR 0 6
11811: PUSH
11812: FOR_IN
11813: IFFALSE 11884
// begin t := UnitsInside ( i ) ;
11815: LD_ADDR_VAR 0 4
11819: PUSH
11820: LD_VAR 0 3
11824: PPUSH
11825: CALL_OW 313
11829: ST_TO_ADDR
// if t then
11830: LD_VAR 0 4
11834: IFFALSE 11882
// for j in t do
11836: LD_ADDR_VAR 0 7
11840: PUSH
11841: LD_VAR 0 4
11845: PUSH
11846: FOR_IN
11847: IFFALSE 11880
// result := Replace ( result , result + 1 , j ) ;
11849: LD_ADDR_VAR 0 2
11853: PUSH
11854: LD_VAR 0 2
11858: PPUSH
11859: LD_VAR 0 2
11863: PUSH
11864: LD_INT 1
11866: PLUS
11867: PPUSH
11868: LD_VAR 0 7
11872: PPUSH
11873: CALL_OW 1
11877: ST_TO_ADDR
11878: GO 11846
11880: POP
11881: POP
// end ;
11882: GO 11812
11884: POP
11885: POP
// if not result then
11886: LD_VAR 0 2
11890: NOT
11891: IFFALSE 11895
// exit ;
11893: GO 12043
// mech := result [ 1 ] ;
11895: LD_ADDR_VAR 0 5
11899: PUSH
11900: LD_VAR 0 2
11904: PUSH
11905: LD_INT 1
11907: ARRAY
11908: ST_TO_ADDR
// if result > 1 then
11909: LD_VAR 0 2
11913: PUSH
11914: LD_INT 1
11916: GREATER
11917: IFFALSE 12029
// begin for i = 2 to result do
11919: LD_ADDR_VAR 0 3
11923: PUSH
11924: DOUBLE
11925: LD_INT 2
11927: DEC
11928: ST_TO_ADDR
11929: LD_VAR 0 2
11933: PUSH
11934: FOR_TO
11935: IFFALSE 12027
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11937: LD_ADDR_VAR 0 4
11941: PUSH
11942: LD_VAR 0 2
11946: PUSH
11947: LD_VAR 0 3
11951: ARRAY
11952: PPUSH
11953: LD_INT 3
11955: PPUSH
11956: CALL_OW 259
11960: PUSH
11961: LD_VAR 0 2
11965: PUSH
11966: LD_VAR 0 3
11970: ARRAY
11971: PPUSH
11972: CALL_OW 432
11976: MINUS
11977: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11978: LD_VAR 0 4
11982: PUSH
11983: LD_VAR 0 5
11987: PPUSH
11988: LD_INT 3
11990: PPUSH
11991: CALL_OW 259
11995: PUSH
11996: LD_VAR 0 5
12000: PPUSH
12001: CALL_OW 432
12005: MINUS
12006: GREATEREQUAL
12007: IFFALSE 12025
// mech := result [ i ] ;
12009: LD_ADDR_VAR 0 5
12013: PUSH
12014: LD_VAR 0 2
12018: PUSH
12019: LD_VAR 0 3
12023: ARRAY
12024: ST_TO_ADDR
// end ;
12025: GO 11934
12027: POP
12028: POP
// end ; ComLinkTo ( vehicle , mech ) ;
12029: LD_VAR 0 1
12033: PPUSH
12034: LD_VAR 0 5
12038: PPUSH
12039: CALL_OW 135
// end ;
12043: LD_VAR 0 2
12047: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
12048: LD_INT 0
12050: PPUSH
12051: PPUSH
12052: PPUSH
12053: PPUSH
12054: PPUSH
12055: PPUSH
12056: PPUSH
12057: PPUSH
12058: PPUSH
12059: PPUSH
12060: PPUSH
12061: PPUSH
12062: PPUSH
// result := [ ] ;
12063: LD_ADDR_VAR 0 7
12067: PUSH
12068: EMPTY
12069: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
12070: LD_VAR 0 1
12074: PPUSH
12075: CALL_OW 266
12079: PUSH
12080: LD_INT 0
12082: PUSH
12083: LD_INT 1
12085: PUSH
12086: EMPTY
12087: LIST
12088: LIST
12089: IN
12090: NOT
12091: IFFALSE 12095
// exit ;
12093: GO 13729
// if name then
12095: LD_VAR 0 3
12099: IFFALSE 12115
// SetBName ( base_dep , name ) ;
12101: LD_VAR 0 1
12105: PPUSH
12106: LD_VAR 0 3
12110: PPUSH
12111: CALL_OW 500
// base := GetBase ( base_dep ) ;
12115: LD_ADDR_VAR 0 15
12119: PUSH
12120: LD_VAR 0 1
12124: PPUSH
12125: CALL_OW 274
12129: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12130: LD_ADDR_VAR 0 16
12134: PUSH
12135: LD_VAR 0 1
12139: PPUSH
12140: CALL_OW 255
12144: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
12145: LD_ADDR_VAR 0 17
12149: PUSH
12150: LD_VAR 0 1
12154: PPUSH
12155: CALL_OW 248
12159: ST_TO_ADDR
// if sources then
12160: LD_VAR 0 5
12164: IFFALSE 12211
// for i = 1 to 3 do
12166: LD_ADDR_VAR 0 8
12170: PUSH
12171: DOUBLE
12172: LD_INT 1
12174: DEC
12175: ST_TO_ADDR
12176: LD_INT 3
12178: PUSH
12179: FOR_TO
12180: IFFALSE 12209
// AddResourceType ( base , i , sources [ i ] ) ;
12182: LD_VAR 0 15
12186: PPUSH
12187: LD_VAR 0 8
12191: PPUSH
12192: LD_VAR 0 5
12196: PUSH
12197: LD_VAR 0 8
12201: ARRAY
12202: PPUSH
12203: CALL_OW 276
12207: GO 12179
12209: POP
12210: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
12211: LD_ADDR_VAR 0 18
12215: PUSH
12216: LD_VAR 0 15
12220: PPUSH
12221: LD_VAR 0 2
12225: PPUSH
12226: LD_INT 1
12228: PPUSH
12229: CALL 11472 0 3
12233: ST_TO_ADDR
// InitHc ;
12234: CALL_OW 19
// InitUc ;
12238: CALL_OW 18
// uc_side := side ;
12242: LD_ADDR_OWVAR 20
12246: PUSH
12247: LD_VAR 0 16
12251: ST_TO_ADDR
// uc_nation := nation ;
12252: LD_ADDR_OWVAR 21
12256: PUSH
12257: LD_VAR 0 17
12261: ST_TO_ADDR
// if buildings then
12262: LD_VAR 0 18
12266: IFFALSE 13588
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12268: LD_ADDR_VAR 0 19
12272: PUSH
12273: LD_VAR 0 18
12277: PPUSH
12278: LD_INT 2
12280: PUSH
12281: LD_INT 30
12283: PUSH
12284: LD_INT 29
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: PUSH
12291: LD_INT 30
12293: PUSH
12294: LD_INT 30
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: PUSH
12301: EMPTY
12302: LIST
12303: LIST
12304: LIST
12305: PPUSH
12306: CALL_OW 72
12310: ST_TO_ADDR
// if tmp then
12311: LD_VAR 0 19
12315: IFFALSE 12363
// for i in tmp do
12317: LD_ADDR_VAR 0 8
12321: PUSH
12322: LD_VAR 0 19
12326: PUSH
12327: FOR_IN
12328: IFFALSE 12361
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12330: LD_VAR 0 8
12334: PPUSH
12335: CALL_OW 250
12339: PPUSH
12340: LD_VAR 0 8
12344: PPUSH
12345: CALL_OW 251
12349: PPUSH
12350: LD_VAR 0 16
12354: PPUSH
12355: CALL_OW 441
12359: GO 12327
12361: POP
12362: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12363: LD_VAR 0 18
12367: PPUSH
12368: LD_INT 2
12370: PUSH
12371: LD_INT 30
12373: PUSH
12374: LD_INT 32
12376: PUSH
12377: EMPTY
12378: LIST
12379: LIST
12380: PUSH
12381: LD_INT 30
12383: PUSH
12384: LD_INT 33
12386: PUSH
12387: EMPTY
12388: LIST
12389: LIST
12390: PUSH
12391: EMPTY
12392: LIST
12393: LIST
12394: LIST
12395: PPUSH
12396: CALL_OW 72
12400: IFFALSE 12488
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12402: LD_ADDR_VAR 0 8
12406: PUSH
12407: LD_VAR 0 18
12411: PPUSH
12412: LD_INT 2
12414: PUSH
12415: LD_INT 30
12417: PUSH
12418: LD_INT 32
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: PUSH
12425: LD_INT 30
12427: PUSH
12428: LD_INT 33
12430: PUSH
12431: EMPTY
12432: LIST
12433: LIST
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: LIST
12439: PPUSH
12440: CALL_OW 72
12444: PUSH
12445: FOR_IN
12446: IFFALSE 12486
// begin if not GetBWeapon ( i ) then
12448: LD_VAR 0 8
12452: PPUSH
12453: CALL_OW 269
12457: NOT
12458: IFFALSE 12484
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12460: LD_VAR 0 8
12464: PPUSH
12465: LD_VAR 0 8
12469: PPUSH
12470: LD_VAR 0 2
12474: PPUSH
12475: CALL 13734 0 2
12479: PPUSH
12480: CALL_OW 431
// end ;
12484: GO 12445
12486: POP
12487: POP
// end ; for i = 1 to personel do
12488: LD_ADDR_VAR 0 8
12492: PUSH
12493: DOUBLE
12494: LD_INT 1
12496: DEC
12497: ST_TO_ADDR
12498: LD_VAR 0 6
12502: PUSH
12503: FOR_TO
12504: IFFALSE 13568
// begin if i > 4 then
12506: LD_VAR 0 8
12510: PUSH
12511: LD_INT 4
12513: GREATER
12514: IFFALSE 12518
// break ;
12516: GO 13568
// case i of 1 :
12518: LD_VAR 0 8
12522: PUSH
12523: LD_INT 1
12525: DOUBLE
12526: EQUAL
12527: IFTRUE 12531
12529: GO 12611
12531: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12532: LD_ADDR_VAR 0 12
12536: PUSH
12537: LD_VAR 0 18
12541: PPUSH
12542: LD_INT 22
12544: PUSH
12545: LD_VAR 0 16
12549: PUSH
12550: EMPTY
12551: LIST
12552: LIST
12553: PUSH
12554: LD_INT 58
12556: PUSH
12557: EMPTY
12558: LIST
12559: PUSH
12560: LD_INT 2
12562: PUSH
12563: LD_INT 30
12565: PUSH
12566: LD_INT 32
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: PUSH
12573: LD_INT 30
12575: PUSH
12576: LD_INT 4
12578: PUSH
12579: EMPTY
12580: LIST
12581: LIST
12582: PUSH
12583: LD_INT 30
12585: PUSH
12586: LD_INT 5
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: LIST
12597: LIST
12598: PUSH
12599: EMPTY
12600: LIST
12601: LIST
12602: LIST
12603: PPUSH
12604: CALL_OW 72
12608: ST_TO_ADDR
12609: GO 12833
12611: LD_INT 2
12613: DOUBLE
12614: EQUAL
12615: IFTRUE 12619
12617: GO 12681
12619: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12620: LD_ADDR_VAR 0 12
12624: PUSH
12625: LD_VAR 0 18
12629: PPUSH
12630: LD_INT 22
12632: PUSH
12633: LD_VAR 0 16
12637: PUSH
12638: EMPTY
12639: LIST
12640: LIST
12641: PUSH
12642: LD_INT 2
12644: PUSH
12645: LD_INT 30
12647: PUSH
12648: LD_INT 0
12650: PUSH
12651: EMPTY
12652: LIST
12653: LIST
12654: PUSH
12655: LD_INT 30
12657: PUSH
12658: LD_INT 1
12660: PUSH
12661: EMPTY
12662: LIST
12663: LIST
12664: PUSH
12665: EMPTY
12666: LIST
12667: LIST
12668: LIST
12669: PUSH
12670: EMPTY
12671: LIST
12672: LIST
12673: PPUSH
12674: CALL_OW 72
12678: ST_TO_ADDR
12679: GO 12833
12681: LD_INT 3
12683: DOUBLE
12684: EQUAL
12685: IFTRUE 12689
12687: GO 12751
12689: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12690: LD_ADDR_VAR 0 12
12694: PUSH
12695: LD_VAR 0 18
12699: PPUSH
12700: LD_INT 22
12702: PUSH
12703: LD_VAR 0 16
12707: PUSH
12708: EMPTY
12709: LIST
12710: LIST
12711: PUSH
12712: LD_INT 2
12714: PUSH
12715: LD_INT 30
12717: PUSH
12718: LD_INT 2
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: PUSH
12725: LD_INT 30
12727: PUSH
12728: LD_INT 3
12730: PUSH
12731: EMPTY
12732: LIST
12733: LIST
12734: PUSH
12735: EMPTY
12736: LIST
12737: LIST
12738: LIST
12739: PUSH
12740: EMPTY
12741: LIST
12742: LIST
12743: PPUSH
12744: CALL_OW 72
12748: ST_TO_ADDR
12749: GO 12833
12751: LD_INT 4
12753: DOUBLE
12754: EQUAL
12755: IFTRUE 12759
12757: GO 12832
12759: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12760: LD_ADDR_VAR 0 12
12764: PUSH
12765: LD_VAR 0 18
12769: PPUSH
12770: LD_INT 22
12772: PUSH
12773: LD_VAR 0 16
12777: PUSH
12778: EMPTY
12779: LIST
12780: LIST
12781: PUSH
12782: LD_INT 2
12784: PUSH
12785: LD_INT 30
12787: PUSH
12788: LD_INT 6
12790: PUSH
12791: EMPTY
12792: LIST
12793: LIST
12794: PUSH
12795: LD_INT 30
12797: PUSH
12798: LD_INT 7
12800: PUSH
12801: EMPTY
12802: LIST
12803: LIST
12804: PUSH
12805: LD_INT 30
12807: PUSH
12808: LD_INT 8
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: PUSH
12815: EMPTY
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: PUSH
12821: EMPTY
12822: LIST
12823: LIST
12824: PPUSH
12825: CALL_OW 72
12829: ST_TO_ADDR
12830: GO 12833
12832: POP
// if i = 1 then
12833: LD_VAR 0 8
12837: PUSH
12838: LD_INT 1
12840: EQUAL
12841: IFFALSE 12952
// begin tmp := [ ] ;
12843: LD_ADDR_VAR 0 19
12847: PUSH
12848: EMPTY
12849: ST_TO_ADDR
// for j in f do
12850: LD_ADDR_VAR 0 9
12854: PUSH
12855: LD_VAR 0 12
12859: PUSH
12860: FOR_IN
12861: IFFALSE 12934
// if GetBType ( j ) = b_bunker then
12863: LD_VAR 0 9
12867: PPUSH
12868: CALL_OW 266
12872: PUSH
12873: LD_INT 32
12875: EQUAL
12876: IFFALSE 12903
// tmp := Insert ( tmp , 1 , j ) else
12878: LD_ADDR_VAR 0 19
12882: PUSH
12883: LD_VAR 0 19
12887: PPUSH
12888: LD_INT 1
12890: PPUSH
12891: LD_VAR 0 9
12895: PPUSH
12896: CALL_OW 2
12900: ST_TO_ADDR
12901: GO 12932
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12903: LD_ADDR_VAR 0 19
12907: PUSH
12908: LD_VAR 0 19
12912: PPUSH
12913: LD_VAR 0 19
12917: PUSH
12918: LD_INT 1
12920: PLUS
12921: PPUSH
12922: LD_VAR 0 9
12926: PPUSH
12927: CALL_OW 2
12931: ST_TO_ADDR
12932: GO 12860
12934: POP
12935: POP
// if tmp then
12936: LD_VAR 0 19
12940: IFFALSE 12952
// f := tmp ;
12942: LD_ADDR_VAR 0 12
12946: PUSH
12947: LD_VAR 0 19
12951: ST_TO_ADDR
// end ; x := personel [ i ] ;
12952: LD_ADDR_VAR 0 13
12956: PUSH
12957: LD_VAR 0 6
12961: PUSH
12962: LD_VAR 0 8
12966: ARRAY
12967: ST_TO_ADDR
// if x = - 1 then
12968: LD_VAR 0 13
12972: PUSH
12973: LD_INT 1
12975: NEG
12976: EQUAL
12977: IFFALSE 13186
// begin for j in f do
12979: LD_ADDR_VAR 0 9
12983: PUSH
12984: LD_VAR 0 12
12988: PUSH
12989: FOR_IN
12990: IFFALSE 13182
// repeat InitHc ;
12992: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12996: LD_VAR 0 9
13000: PPUSH
13001: CALL_OW 266
13005: PUSH
13006: LD_INT 5
13008: EQUAL
13009: IFFALSE 13079
// begin if UnitsInside ( j ) < 3 then
13011: LD_VAR 0 9
13015: PPUSH
13016: CALL_OW 313
13020: PUSH
13021: LD_INT 3
13023: LESS
13024: IFFALSE 13060
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13026: LD_INT 0
13028: PPUSH
13029: LD_INT 5
13031: PUSH
13032: LD_INT 8
13034: PUSH
13035: LD_INT 9
13037: PUSH
13038: EMPTY
13039: LIST
13040: LIST
13041: LIST
13042: PUSH
13043: LD_VAR 0 17
13047: ARRAY
13048: PPUSH
13049: LD_VAR 0 4
13053: PPUSH
13054: CALL_OW 380
13058: GO 13077
// PrepareHuman ( false , i , skill ) ;
13060: LD_INT 0
13062: PPUSH
13063: LD_VAR 0 8
13067: PPUSH
13068: LD_VAR 0 4
13072: PPUSH
13073: CALL_OW 380
// end else
13077: GO 13096
// PrepareHuman ( false , i , skill ) ;
13079: LD_INT 0
13081: PPUSH
13082: LD_VAR 0 8
13086: PPUSH
13087: LD_VAR 0 4
13091: PPUSH
13092: CALL_OW 380
// un := CreateHuman ;
13096: LD_ADDR_VAR 0 14
13100: PUSH
13101: CALL_OW 44
13105: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13106: LD_ADDR_VAR 0 7
13110: PUSH
13111: LD_VAR 0 7
13115: PPUSH
13116: LD_INT 1
13118: PPUSH
13119: LD_VAR 0 14
13123: PPUSH
13124: CALL_OW 2
13128: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13129: LD_VAR 0 14
13133: PPUSH
13134: LD_VAR 0 9
13138: PPUSH
13139: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13143: LD_VAR 0 9
13147: PPUSH
13148: CALL_OW 313
13152: PUSH
13153: LD_INT 6
13155: EQUAL
13156: PUSH
13157: LD_VAR 0 9
13161: PPUSH
13162: CALL_OW 266
13166: PUSH
13167: LD_INT 32
13169: PUSH
13170: LD_INT 31
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: IN
13177: OR
13178: IFFALSE 12992
13180: GO 12989
13182: POP
13183: POP
// end else
13184: GO 13566
// for j = 1 to x do
13186: LD_ADDR_VAR 0 9
13190: PUSH
13191: DOUBLE
13192: LD_INT 1
13194: DEC
13195: ST_TO_ADDR
13196: LD_VAR 0 13
13200: PUSH
13201: FOR_TO
13202: IFFALSE 13564
// begin InitHc ;
13204: CALL_OW 19
// if not f then
13208: LD_VAR 0 12
13212: NOT
13213: IFFALSE 13302
// begin PrepareHuman ( false , i , skill ) ;
13215: LD_INT 0
13217: PPUSH
13218: LD_VAR 0 8
13222: PPUSH
13223: LD_VAR 0 4
13227: PPUSH
13228: CALL_OW 380
// un := CreateHuman ;
13232: LD_ADDR_VAR 0 14
13236: PUSH
13237: CALL_OW 44
13241: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13242: LD_ADDR_VAR 0 7
13246: PUSH
13247: LD_VAR 0 7
13251: PPUSH
13252: LD_INT 1
13254: PPUSH
13255: LD_VAR 0 14
13259: PPUSH
13260: CALL_OW 2
13264: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13265: LD_VAR 0 14
13269: PPUSH
13270: LD_VAR 0 1
13274: PPUSH
13275: CALL_OW 250
13279: PPUSH
13280: LD_VAR 0 1
13284: PPUSH
13285: CALL_OW 251
13289: PPUSH
13290: LD_INT 10
13292: PPUSH
13293: LD_INT 0
13295: PPUSH
13296: CALL_OW 50
// continue ;
13300: GO 13201
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13302: LD_VAR 0 12
13306: PUSH
13307: LD_INT 1
13309: ARRAY
13310: PPUSH
13311: CALL_OW 313
13315: PUSH
13316: LD_VAR 0 12
13320: PUSH
13321: LD_INT 1
13323: ARRAY
13324: PPUSH
13325: CALL_OW 266
13329: PUSH
13330: LD_INT 32
13332: PUSH
13333: LD_INT 31
13335: PUSH
13336: EMPTY
13337: LIST
13338: LIST
13339: IN
13340: AND
13341: PUSH
13342: LD_VAR 0 12
13346: PUSH
13347: LD_INT 1
13349: ARRAY
13350: PPUSH
13351: CALL_OW 313
13355: PUSH
13356: LD_INT 6
13358: EQUAL
13359: OR
13360: IFFALSE 13380
// f := Delete ( f , 1 ) ;
13362: LD_ADDR_VAR 0 12
13366: PUSH
13367: LD_VAR 0 12
13371: PPUSH
13372: LD_INT 1
13374: PPUSH
13375: CALL_OW 3
13379: ST_TO_ADDR
// if not f then
13380: LD_VAR 0 12
13384: NOT
13385: IFFALSE 13403
// begin x := x + 2 ;
13387: LD_ADDR_VAR 0 13
13391: PUSH
13392: LD_VAR 0 13
13396: PUSH
13397: LD_INT 2
13399: PLUS
13400: ST_TO_ADDR
// continue ;
13401: GO 13201
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13403: LD_VAR 0 12
13407: PUSH
13408: LD_INT 1
13410: ARRAY
13411: PPUSH
13412: CALL_OW 266
13416: PUSH
13417: LD_INT 5
13419: EQUAL
13420: IFFALSE 13494
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13422: LD_VAR 0 12
13426: PUSH
13427: LD_INT 1
13429: ARRAY
13430: PPUSH
13431: CALL_OW 313
13435: PUSH
13436: LD_INT 3
13438: LESS
13439: IFFALSE 13475
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13441: LD_INT 0
13443: PPUSH
13444: LD_INT 5
13446: PUSH
13447: LD_INT 8
13449: PUSH
13450: LD_INT 9
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: LIST
13457: PUSH
13458: LD_VAR 0 17
13462: ARRAY
13463: PPUSH
13464: LD_VAR 0 4
13468: PPUSH
13469: CALL_OW 380
13473: GO 13492
// PrepareHuman ( false , i , skill ) ;
13475: LD_INT 0
13477: PPUSH
13478: LD_VAR 0 8
13482: PPUSH
13483: LD_VAR 0 4
13487: PPUSH
13488: CALL_OW 380
// end else
13492: GO 13511
// PrepareHuman ( false , i , skill ) ;
13494: LD_INT 0
13496: PPUSH
13497: LD_VAR 0 8
13501: PPUSH
13502: LD_VAR 0 4
13506: PPUSH
13507: CALL_OW 380
// un := CreateHuman ;
13511: LD_ADDR_VAR 0 14
13515: PUSH
13516: CALL_OW 44
13520: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13521: LD_ADDR_VAR 0 7
13525: PUSH
13526: LD_VAR 0 7
13530: PPUSH
13531: LD_INT 1
13533: PPUSH
13534: LD_VAR 0 14
13538: PPUSH
13539: CALL_OW 2
13543: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13544: LD_VAR 0 14
13548: PPUSH
13549: LD_VAR 0 12
13553: PUSH
13554: LD_INT 1
13556: ARRAY
13557: PPUSH
13558: CALL_OW 52
// end ;
13562: GO 13201
13564: POP
13565: POP
// end ;
13566: GO 12503
13568: POP
13569: POP
// result := result ^ buildings ;
13570: LD_ADDR_VAR 0 7
13574: PUSH
13575: LD_VAR 0 7
13579: PUSH
13580: LD_VAR 0 18
13584: ADD
13585: ST_TO_ADDR
// end else
13586: GO 13729
// begin for i = 1 to personel do
13588: LD_ADDR_VAR 0 8
13592: PUSH
13593: DOUBLE
13594: LD_INT 1
13596: DEC
13597: ST_TO_ADDR
13598: LD_VAR 0 6
13602: PUSH
13603: FOR_TO
13604: IFFALSE 13727
// begin if i > 4 then
13606: LD_VAR 0 8
13610: PUSH
13611: LD_INT 4
13613: GREATER
13614: IFFALSE 13618
// break ;
13616: GO 13727
// x := personel [ i ] ;
13618: LD_ADDR_VAR 0 13
13622: PUSH
13623: LD_VAR 0 6
13627: PUSH
13628: LD_VAR 0 8
13632: ARRAY
13633: ST_TO_ADDR
// if x = - 1 then
13634: LD_VAR 0 13
13638: PUSH
13639: LD_INT 1
13641: NEG
13642: EQUAL
13643: IFFALSE 13647
// continue ;
13645: GO 13603
// PrepareHuman ( false , i , skill ) ;
13647: LD_INT 0
13649: PPUSH
13650: LD_VAR 0 8
13654: PPUSH
13655: LD_VAR 0 4
13659: PPUSH
13660: CALL_OW 380
// un := CreateHuman ;
13664: LD_ADDR_VAR 0 14
13668: PUSH
13669: CALL_OW 44
13673: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13674: LD_VAR 0 14
13678: PPUSH
13679: LD_VAR 0 1
13683: PPUSH
13684: CALL_OW 250
13688: PPUSH
13689: LD_VAR 0 1
13693: PPUSH
13694: CALL_OW 251
13698: PPUSH
13699: LD_INT 10
13701: PPUSH
13702: LD_INT 0
13704: PPUSH
13705: CALL_OW 50
// result := result ^ un ;
13709: LD_ADDR_VAR 0 7
13713: PUSH
13714: LD_VAR 0 7
13718: PUSH
13719: LD_VAR 0 14
13723: ADD
13724: ST_TO_ADDR
// end ;
13725: GO 13603
13727: POP
13728: POP
// end ; end ;
13729: LD_VAR 0 7
13733: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13734: LD_INT 0
13736: PPUSH
13737: PPUSH
13738: PPUSH
13739: PPUSH
13740: PPUSH
13741: PPUSH
13742: PPUSH
13743: PPUSH
13744: PPUSH
13745: PPUSH
13746: PPUSH
13747: PPUSH
13748: PPUSH
13749: PPUSH
13750: PPUSH
13751: PPUSH
// result := false ;
13752: LD_ADDR_VAR 0 3
13756: PUSH
13757: LD_INT 0
13759: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13760: LD_VAR 0 1
13764: NOT
13765: PUSH
13766: LD_VAR 0 1
13770: PPUSH
13771: CALL_OW 266
13775: PUSH
13776: LD_INT 32
13778: PUSH
13779: LD_INT 33
13781: PUSH
13782: EMPTY
13783: LIST
13784: LIST
13785: IN
13786: NOT
13787: OR
13788: IFFALSE 13792
// exit ;
13790: GO 14901
// nat := GetNation ( tower ) ;
13792: LD_ADDR_VAR 0 12
13796: PUSH
13797: LD_VAR 0 1
13801: PPUSH
13802: CALL_OW 248
13806: ST_TO_ADDR
// side := GetSide ( tower ) ;
13807: LD_ADDR_VAR 0 16
13811: PUSH
13812: LD_VAR 0 1
13816: PPUSH
13817: CALL_OW 255
13821: ST_TO_ADDR
// x := GetX ( tower ) ;
13822: LD_ADDR_VAR 0 10
13826: PUSH
13827: LD_VAR 0 1
13831: PPUSH
13832: CALL_OW 250
13836: ST_TO_ADDR
// y := GetY ( tower ) ;
13837: LD_ADDR_VAR 0 11
13841: PUSH
13842: LD_VAR 0 1
13846: PPUSH
13847: CALL_OW 251
13851: ST_TO_ADDR
// if not x or not y then
13852: LD_VAR 0 10
13856: NOT
13857: PUSH
13858: LD_VAR 0 11
13862: NOT
13863: OR
13864: IFFALSE 13868
// exit ;
13866: GO 14901
// weapon := 0 ;
13868: LD_ADDR_VAR 0 18
13872: PUSH
13873: LD_INT 0
13875: ST_TO_ADDR
// fac_list := [ ] ;
13876: LD_ADDR_VAR 0 17
13880: PUSH
13881: EMPTY
13882: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13883: LD_ADDR_VAR 0 6
13887: PUSH
13888: LD_VAR 0 1
13892: PPUSH
13893: CALL_OW 274
13897: PPUSH
13898: LD_VAR 0 2
13902: PPUSH
13903: LD_INT 0
13905: PPUSH
13906: CALL 11472 0 3
13910: PPUSH
13911: LD_INT 30
13913: PUSH
13914: LD_INT 3
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: PPUSH
13921: CALL_OW 72
13925: ST_TO_ADDR
// if not factories then
13926: LD_VAR 0 6
13930: NOT
13931: IFFALSE 13935
// exit ;
13933: GO 14901
// for i in factories do
13935: LD_ADDR_VAR 0 8
13939: PUSH
13940: LD_VAR 0 6
13944: PUSH
13945: FOR_IN
13946: IFFALSE 13971
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13948: LD_ADDR_VAR 0 17
13952: PUSH
13953: LD_VAR 0 17
13957: PUSH
13958: LD_VAR 0 8
13962: PPUSH
13963: CALL_OW 478
13967: UNION
13968: ST_TO_ADDR
13969: GO 13945
13971: POP
13972: POP
// if not fac_list then
13973: LD_VAR 0 17
13977: NOT
13978: IFFALSE 13982
// exit ;
13980: GO 14901
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13982: LD_ADDR_VAR 0 5
13986: PUSH
13987: LD_INT 4
13989: PUSH
13990: LD_INT 5
13992: PUSH
13993: LD_INT 9
13995: PUSH
13996: LD_INT 10
13998: PUSH
13999: LD_INT 6
14001: PUSH
14002: LD_INT 7
14004: PUSH
14005: LD_INT 11
14007: PUSH
14008: EMPTY
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: PUSH
14017: LD_INT 27
14019: PUSH
14020: LD_INT 28
14022: PUSH
14023: LD_INT 26
14025: PUSH
14026: LD_INT 30
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: PUSH
14035: LD_INT 43
14037: PUSH
14038: LD_INT 44
14040: PUSH
14041: LD_INT 46
14043: PUSH
14044: LD_INT 45
14046: PUSH
14047: LD_INT 47
14049: PUSH
14050: LD_INT 49
14052: PUSH
14053: EMPTY
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: PUSH
14061: EMPTY
14062: LIST
14063: LIST
14064: LIST
14065: PUSH
14066: LD_VAR 0 12
14070: ARRAY
14071: ST_TO_ADDR
// list := list isect fac_list ;
14072: LD_ADDR_VAR 0 5
14076: PUSH
14077: LD_VAR 0 5
14081: PUSH
14082: LD_VAR 0 17
14086: ISECT
14087: ST_TO_ADDR
// if not list then
14088: LD_VAR 0 5
14092: NOT
14093: IFFALSE 14097
// exit ;
14095: GO 14901
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
14097: LD_VAR 0 12
14101: PUSH
14102: LD_INT 3
14104: EQUAL
14105: PUSH
14106: LD_INT 49
14108: PUSH
14109: LD_VAR 0 5
14113: IN
14114: AND
14115: PUSH
14116: LD_INT 31
14118: PPUSH
14119: LD_VAR 0 16
14123: PPUSH
14124: CALL_OW 321
14128: PUSH
14129: LD_INT 2
14131: EQUAL
14132: AND
14133: IFFALSE 14193
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
14135: LD_INT 22
14137: PUSH
14138: LD_VAR 0 16
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: PUSH
14147: LD_INT 35
14149: PUSH
14150: LD_INT 49
14152: PUSH
14153: EMPTY
14154: LIST
14155: LIST
14156: PUSH
14157: LD_INT 91
14159: PUSH
14160: LD_VAR 0 1
14164: PUSH
14165: LD_INT 10
14167: PUSH
14168: EMPTY
14169: LIST
14170: LIST
14171: LIST
14172: PUSH
14173: EMPTY
14174: LIST
14175: LIST
14176: LIST
14177: PPUSH
14178: CALL_OW 69
14182: NOT
14183: IFFALSE 14193
// weapon := ru_time_lapser ;
14185: LD_ADDR_VAR 0 18
14189: PUSH
14190: LD_INT 49
14192: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
14193: LD_VAR 0 12
14197: PUSH
14198: LD_INT 1
14200: PUSH
14201: LD_INT 2
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: IN
14208: PUSH
14209: LD_INT 11
14211: PUSH
14212: LD_VAR 0 5
14216: IN
14217: PUSH
14218: LD_INT 30
14220: PUSH
14221: LD_VAR 0 5
14225: IN
14226: OR
14227: AND
14228: PUSH
14229: LD_INT 6
14231: PPUSH
14232: LD_VAR 0 16
14236: PPUSH
14237: CALL_OW 321
14241: PUSH
14242: LD_INT 2
14244: EQUAL
14245: AND
14246: IFFALSE 14411
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
14248: LD_INT 22
14250: PUSH
14251: LD_VAR 0 16
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: PUSH
14260: LD_INT 2
14262: PUSH
14263: LD_INT 35
14265: PUSH
14266: LD_INT 11
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: PUSH
14273: LD_INT 35
14275: PUSH
14276: LD_INT 30
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: LIST
14287: PUSH
14288: LD_INT 91
14290: PUSH
14291: LD_VAR 0 1
14295: PUSH
14296: LD_INT 18
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: LIST
14303: PUSH
14304: EMPTY
14305: LIST
14306: LIST
14307: LIST
14308: PPUSH
14309: CALL_OW 69
14313: NOT
14314: PUSH
14315: LD_INT 22
14317: PUSH
14318: LD_VAR 0 16
14322: PUSH
14323: EMPTY
14324: LIST
14325: LIST
14326: PUSH
14327: LD_INT 2
14329: PUSH
14330: LD_INT 30
14332: PUSH
14333: LD_INT 32
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: PUSH
14340: LD_INT 30
14342: PUSH
14343: LD_INT 33
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: PUSH
14350: EMPTY
14351: LIST
14352: LIST
14353: LIST
14354: PUSH
14355: LD_INT 91
14357: PUSH
14358: LD_VAR 0 1
14362: PUSH
14363: LD_INT 12
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: LIST
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: LIST
14375: PUSH
14376: EMPTY
14377: LIST
14378: PPUSH
14379: CALL_OW 69
14383: PUSH
14384: LD_INT 2
14386: GREATER
14387: AND
14388: IFFALSE 14411
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14390: LD_ADDR_VAR 0 18
14394: PUSH
14395: LD_INT 11
14397: PUSH
14398: LD_INT 30
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: PUSH
14405: LD_VAR 0 12
14409: ARRAY
14410: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14411: LD_VAR 0 18
14415: NOT
14416: PUSH
14417: LD_INT 40
14419: PPUSH
14420: LD_VAR 0 16
14424: PPUSH
14425: CALL_OW 321
14429: PUSH
14430: LD_INT 2
14432: EQUAL
14433: AND
14434: PUSH
14435: LD_INT 7
14437: PUSH
14438: LD_VAR 0 5
14442: IN
14443: PUSH
14444: LD_INT 28
14446: PUSH
14447: LD_VAR 0 5
14451: IN
14452: OR
14453: PUSH
14454: LD_INT 45
14456: PUSH
14457: LD_VAR 0 5
14461: IN
14462: OR
14463: AND
14464: IFFALSE 14718
// begin hex := GetHexInfo ( x , y ) ;
14466: LD_ADDR_VAR 0 4
14470: PUSH
14471: LD_VAR 0 10
14475: PPUSH
14476: LD_VAR 0 11
14480: PPUSH
14481: CALL_OW 546
14485: ST_TO_ADDR
// if hex [ 1 ] then
14486: LD_VAR 0 4
14490: PUSH
14491: LD_INT 1
14493: ARRAY
14494: IFFALSE 14498
// exit ;
14496: GO 14901
// height := hex [ 2 ] ;
14498: LD_ADDR_VAR 0 15
14502: PUSH
14503: LD_VAR 0 4
14507: PUSH
14508: LD_INT 2
14510: ARRAY
14511: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14512: LD_ADDR_VAR 0 14
14516: PUSH
14517: LD_INT 0
14519: PUSH
14520: LD_INT 2
14522: PUSH
14523: LD_INT 3
14525: PUSH
14526: LD_INT 5
14528: PUSH
14529: EMPTY
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: ST_TO_ADDR
// for i in tmp do
14535: LD_ADDR_VAR 0 8
14539: PUSH
14540: LD_VAR 0 14
14544: PUSH
14545: FOR_IN
14546: IFFALSE 14716
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14548: LD_ADDR_VAR 0 9
14552: PUSH
14553: LD_VAR 0 10
14557: PPUSH
14558: LD_VAR 0 8
14562: PPUSH
14563: LD_INT 5
14565: PPUSH
14566: CALL_OW 272
14570: PUSH
14571: LD_VAR 0 11
14575: PPUSH
14576: LD_VAR 0 8
14580: PPUSH
14581: LD_INT 5
14583: PPUSH
14584: CALL_OW 273
14588: PUSH
14589: EMPTY
14590: LIST
14591: LIST
14592: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14593: LD_VAR 0 9
14597: PUSH
14598: LD_INT 1
14600: ARRAY
14601: PPUSH
14602: LD_VAR 0 9
14606: PUSH
14607: LD_INT 2
14609: ARRAY
14610: PPUSH
14611: CALL_OW 488
14615: IFFALSE 14714
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14617: LD_ADDR_VAR 0 4
14621: PUSH
14622: LD_VAR 0 9
14626: PUSH
14627: LD_INT 1
14629: ARRAY
14630: PPUSH
14631: LD_VAR 0 9
14635: PUSH
14636: LD_INT 2
14638: ARRAY
14639: PPUSH
14640: CALL_OW 546
14644: ST_TO_ADDR
// if hex [ 1 ] then
14645: LD_VAR 0 4
14649: PUSH
14650: LD_INT 1
14652: ARRAY
14653: IFFALSE 14657
// continue ;
14655: GO 14545
// h := hex [ 2 ] ;
14657: LD_ADDR_VAR 0 13
14661: PUSH
14662: LD_VAR 0 4
14666: PUSH
14667: LD_INT 2
14669: ARRAY
14670: ST_TO_ADDR
// if h + 7 < height then
14671: LD_VAR 0 13
14675: PUSH
14676: LD_INT 7
14678: PLUS
14679: PUSH
14680: LD_VAR 0 15
14684: LESS
14685: IFFALSE 14714
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14687: LD_ADDR_VAR 0 18
14691: PUSH
14692: LD_INT 7
14694: PUSH
14695: LD_INT 28
14697: PUSH
14698: LD_INT 45
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: LIST
14705: PUSH
14706: LD_VAR 0 12
14710: ARRAY
14711: ST_TO_ADDR
// break ;
14712: GO 14716
// end ; end ; end ;
14714: GO 14545
14716: POP
14717: POP
// end ; if not weapon then
14718: LD_VAR 0 18
14722: NOT
14723: IFFALSE 14783
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14725: LD_ADDR_VAR 0 5
14729: PUSH
14730: LD_VAR 0 5
14734: PUSH
14735: LD_INT 11
14737: PUSH
14738: LD_INT 30
14740: PUSH
14741: LD_INT 49
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: LIST
14748: DIFF
14749: ST_TO_ADDR
// if not list then
14750: LD_VAR 0 5
14754: NOT
14755: IFFALSE 14759
// exit ;
14757: GO 14901
// weapon := list [ rand ( 1 , list ) ] ;
14759: LD_ADDR_VAR 0 18
14763: PUSH
14764: LD_VAR 0 5
14768: PUSH
14769: LD_INT 1
14771: PPUSH
14772: LD_VAR 0 5
14776: PPUSH
14777: CALL_OW 12
14781: ARRAY
14782: ST_TO_ADDR
// end ; if weapon then
14783: LD_VAR 0 18
14787: IFFALSE 14901
// begin tmp := CostOfWeapon ( weapon ) ;
14789: LD_ADDR_VAR 0 14
14793: PUSH
14794: LD_VAR 0 18
14798: PPUSH
14799: CALL_OW 451
14803: ST_TO_ADDR
// j := GetBase ( tower ) ;
14804: LD_ADDR_VAR 0 9
14808: PUSH
14809: LD_VAR 0 1
14813: PPUSH
14814: CALL_OW 274
14818: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14819: LD_VAR 0 9
14823: PPUSH
14824: LD_INT 1
14826: PPUSH
14827: CALL_OW 275
14831: PUSH
14832: LD_VAR 0 14
14836: PUSH
14837: LD_INT 1
14839: ARRAY
14840: GREATEREQUAL
14841: PUSH
14842: LD_VAR 0 9
14846: PPUSH
14847: LD_INT 2
14849: PPUSH
14850: CALL_OW 275
14854: PUSH
14855: LD_VAR 0 14
14859: PUSH
14860: LD_INT 2
14862: ARRAY
14863: GREATEREQUAL
14864: AND
14865: PUSH
14866: LD_VAR 0 9
14870: PPUSH
14871: LD_INT 3
14873: PPUSH
14874: CALL_OW 275
14878: PUSH
14879: LD_VAR 0 14
14883: PUSH
14884: LD_INT 3
14886: ARRAY
14887: GREATEREQUAL
14888: AND
14889: IFFALSE 14901
// result := weapon ;
14891: LD_ADDR_VAR 0 3
14895: PUSH
14896: LD_VAR 0 18
14900: ST_TO_ADDR
// end ; end ;
14901: LD_VAR 0 3
14905: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14906: LD_INT 0
14908: PPUSH
14909: PPUSH
// result := true ;
14910: LD_ADDR_VAR 0 3
14914: PUSH
14915: LD_INT 1
14917: ST_TO_ADDR
// if array1 = array2 then
14918: LD_VAR 0 1
14922: PUSH
14923: LD_VAR 0 2
14927: EQUAL
14928: IFFALSE 14988
// begin for i = 1 to array1 do
14930: LD_ADDR_VAR 0 4
14934: PUSH
14935: DOUBLE
14936: LD_INT 1
14938: DEC
14939: ST_TO_ADDR
14940: LD_VAR 0 1
14944: PUSH
14945: FOR_TO
14946: IFFALSE 14984
// if array1 [ i ] <> array2 [ i ] then
14948: LD_VAR 0 1
14952: PUSH
14953: LD_VAR 0 4
14957: ARRAY
14958: PUSH
14959: LD_VAR 0 2
14963: PUSH
14964: LD_VAR 0 4
14968: ARRAY
14969: NONEQUAL
14970: IFFALSE 14982
// begin result := false ;
14972: LD_ADDR_VAR 0 3
14976: PUSH
14977: LD_INT 0
14979: ST_TO_ADDR
// break ;
14980: GO 14984
// end ;
14982: GO 14945
14984: POP
14985: POP
// end else
14986: GO 14996
// result := false ;
14988: LD_ADDR_VAR 0 3
14992: PUSH
14993: LD_INT 0
14995: ST_TO_ADDR
// end ;
14996: LD_VAR 0 3
15000: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
15001: LD_INT 0
15003: PPUSH
15004: PPUSH
// if not array1 or not array2 then
15005: LD_VAR 0 1
15009: NOT
15010: PUSH
15011: LD_VAR 0 2
15015: NOT
15016: OR
15017: IFFALSE 15021
// exit ;
15019: GO 15085
// result := true ;
15021: LD_ADDR_VAR 0 3
15025: PUSH
15026: LD_INT 1
15028: ST_TO_ADDR
// for i = 1 to array1 do
15029: LD_ADDR_VAR 0 4
15033: PUSH
15034: DOUBLE
15035: LD_INT 1
15037: DEC
15038: ST_TO_ADDR
15039: LD_VAR 0 1
15043: PUSH
15044: FOR_TO
15045: IFFALSE 15083
// if array1 [ i ] <> array2 [ i ] then
15047: LD_VAR 0 1
15051: PUSH
15052: LD_VAR 0 4
15056: ARRAY
15057: PUSH
15058: LD_VAR 0 2
15062: PUSH
15063: LD_VAR 0 4
15067: ARRAY
15068: NONEQUAL
15069: IFFALSE 15081
// begin result := false ;
15071: LD_ADDR_VAR 0 3
15075: PUSH
15076: LD_INT 0
15078: ST_TO_ADDR
// break ;
15079: GO 15083
// end ;
15081: GO 15044
15083: POP
15084: POP
// end ;
15085: LD_VAR 0 3
15089: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
15090: LD_INT 0
15092: PPUSH
15093: PPUSH
15094: PPUSH
// pom := GetBase ( fac ) ;
15095: LD_ADDR_VAR 0 5
15099: PUSH
15100: LD_VAR 0 1
15104: PPUSH
15105: CALL_OW 274
15109: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
15110: LD_ADDR_VAR 0 4
15114: PUSH
15115: LD_VAR 0 2
15119: PUSH
15120: LD_INT 1
15122: ARRAY
15123: PPUSH
15124: LD_VAR 0 2
15128: PUSH
15129: LD_INT 2
15131: ARRAY
15132: PPUSH
15133: LD_VAR 0 2
15137: PUSH
15138: LD_INT 3
15140: ARRAY
15141: PPUSH
15142: LD_VAR 0 2
15146: PUSH
15147: LD_INT 4
15149: ARRAY
15150: PPUSH
15151: CALL_OW 449
15155: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15156: LD_ADDR_VAR 0 3
15160: PUSH
15161: LD_VAR 0 5
15165: PPUSH
15166: LD_INT 1
15168: PPUSH
15169: CALL_OW 275
15173: PUSH
15174: LD_VAR 0 4
15178: PUSH
15179: LD_INT 1
15181: ARRAY
15182: GREATEREQUAL
15183: PUSH
15184: LD_VAR 0 5
15188: PPUSH
15189: LD_INT 2
15191: PPUSH
15192: CALL_OW 275
15196: PUSH
15197: LD_VAR 0 4
15201: PUSH
15202: LD_INT 2
15204: ARRAY
15205: GREATEREQUAL
15206: AND
15207: PUSH
15208: LD_VAR 0 5
15212: PPUSH
15213: LD_INT 3
15215: PPUSH
15216: CALL_OW 275
15220: PUSH
15221: LD_VAR 0 4
15225: PUSH
15226: LD_INT 3
15228: ARRAY
15229: GREATEREQUAL
15230: AND
15231: ST_TO_ADDR
// end ;
15232: LD_VAR 0 3
15236: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
15237: LD_INT 0
15239: PPUSH
15240: PPUSH
15241: PPUSH
15242: PPUSH
// pom := GetBase ( building ) ;
15243: LD_ADDR_VAR 0 3
15247: PUSH
15248: LD_VAR 0 1
15252: PPUSH
15253: CALL_OW 274
15257: ST_TO_ADDR
// if not pom then
15258: LD_VAR 0 3
15262: NOT
15263: IFFALSE 15267
// exit ;
15265: GO 15437
// btype := GetBType ( building ) ;
15267: LD_ADDR_VAR 0 5
15271: PUSH
15272: LD_VAR 0 1
15276: PPUSH
15277: CALL_OW 266
15281: ST_TO_ADDR
// if btype = b_armoury then
15282: LD_VAR 0 5
15286: PUSH
15287: LD_INT 4
15289: EQUAL
15290: IFFALSE 15300
// btype := b_barracks ;
15292: LD_ADDR_VAR 0 5
15296: PUSH
15297: LD_INT 5
15299: ST_TO_ADDR
// if btype = b_depot then
15300: LD_VAR 0 5
15304: PUSH
15305: LD_INT 0
15307: EQUAL
15308: IFFALSE 15318
// btype := b_warehouse ;
15310: LD_ADDR_VAR 0 5
15314: PUSH
15315: LD_INT 1
15317: ST_TO_ADDR
// if btype = b_workshop then
15318: LD_VAR 0 5
15322: PUSH
15323: LD_INT 2
15325: EQUAL
15326: IFFALSE 15336
// btype := b_factory ;
15328: LD_ADDR_VAR 0 5
15332: PUSH
15333: LD_INT 3
15335: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15336: LD_ADDR_VAR 0 4
15340: PUSH
15341: LD_VAR 0 5
15345: PPUSH
15346: LD_VAR 0 1
15350: PPUSH
15351: CALL_OW 248
15355: PPUSH
15356: CALL_OW 450
15360: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15361: LD_ADDR_VAR 0 2
15365: PUSH
15366: LD_VAR 0 3
15370: PPUSH
15371: LD_INT 1
15373: PPUSH
15374: CALL_OW 275
15378: PUSH
15379: LD_VAR 0 4
15383: PUSH
15384: LD_INT 1
15386: ARRAY
15387: GREATEREQUAL
15388: PUSH
15389: LD_VAR 0 3
15393: PPUSH
15394: LD_INT 2
15396: PPUSH
15397: CALL_OW 275
15401: PUSH
15402: LD_VAR 0 4
15406: PUSH
15407: LD_INT 2
15409: ARRAY
15410: GREATEREQUAL
15411: AND
15412: PUSH
15413: LD_VAR 0 3
15417: PPUSH
15418: LD_INT 3
15420: PPUSH
15421: CALL_OW 275
15425: PUSH
15426: LD_VAR 0 4
15430: PUSH
15431: LD_INT 3
15433: ARRAY
15434: GREATEREQUAL
15435: AND
15436: ST_TO_ADDR
// end ;
15437: LD_VAR 0 2
15441: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15442: LD_INT 0
15444: PPUSH
15445: PPUSH
15446: PPUSH
// pom := GetBase ( building ) ;
15447: LD_ADDR_VAR 0 4
15451: PUSH
15452: LD_VAR 0 1
15456: PPUSH
15457: CALL_OW 274
15461: ST_TO_ADDR
// if not pom then
15462: LD_VAR 0 4
15466: NOT
15467: IFFALSE 15471
// exit ;
15469: GO 15572
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15471: LD_ADDR_VAR 0 5
15475: PUSH
15476: LD_VAR 0 2
15480: PPUSH
15481: LD_VAR 0 1
15485: PPUSH
15486: CALL_OW 248
15490: PPUSH
15491: CALL_OW 450
15495: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15496: LD_ADDR_VAR 0 3
15500: PUSH
15501: LD_VAR 0 4
15505: PPUSH
15506: LD_INT 1
15508: PPUSH
15509: CALL_OW 275
15513: PUSH
15514: LD_VAR 0 5
15518: PUSH
15519: LD_INT 1
15521: ARRAY
15522: GREATEREQUAL
15523: PUSH
15524: LD_VAR 0 4
15528: PPUSH
15529: LD_INT 2
15531: PPUSH
15532: CALL_OW 275
15536: PUSH
15537: LD_VAR 0 5
15541: PUSH
15542: LD_INT 2
15544: ARRAY
15545: GREATEREQUAL
15546: AND
15547: PUSH
15548: LD_VAR 0 4
15552: PPUSH
15553: LD_INT 3
15555: PPUSH
15556: CALL_OW 275
15560: PUSH
15561: LD_VAR 0 5
15565: PUSH
15566: LD_INT 3
15568: ARRAY
15569: GREATEREQUAL
15570: AND
15571: ST_TO_ADDR
// end ;
15572: LD_VAR 0 3
15576: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15577: LD_INT 0
15579: PPUSH
15580: PPUSH
15581: PPUSH
15582: PPUSH
15583: PPUSH
15584: PPUSH
15585: PPUSH
15586: PPUSH
15587: PPUSH
15588: PPUSH
15589: PPUSH
// result := false ;
15590: LD_ADDR_VAR 0 8
15594: PUSH
15595: LD_INT 0
15597: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15598: LD_VAR 0 5
15602: NOT
15603: PUSH
15604: LD_VAR 0 1
15608: NOT
15609: OR
15610: PUSH
15611: LD_VAR 0 2
15615: NOT
15616: OR
15617: PUSH
15618: LD_VAR 0 3
15622: NOT
15623: OR
15624: IFFALSE 15628
// exit ;
15626: GO 16442
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15628: LD_ADDR_VAR 0 14
15632: PUSH
15633: LD_VAR 0 1
15637: PPUSH
15638: LD_VAR 0 2
15642: PPUSH
15643: LD_VAR 0 3
15647: PPUSH
15648: LD_VAR 0 4
15652: PPUSH
15653: LD_VAR 0 5
15657: PUSH
15658: LD_INT 1
15660: ARRAY
15661: PPUSH
15662: CALL_OW 248
15666: PPUSH
15667: LD_INT 0
15669: PPUSH
15670: CALL 17679 0 6
15674: ST_TO_ADDR
// if not hexes then
15675: LD_VAR 0 14
15679: NOT
15680: IFFALSE 15684
// exit ;
15682: GO 16442
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15684: LD_ADDR_VAR 0 17
15688: PUSH
15689: LD_VAR 0 5
15693: PPUSH
15694: LD_INT 22
15696: PUSH
15697: LD_VAR 0 13
15701: PPUSH
15702: CALL_OW 255
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: PUSH
15711: LD_INT 2
15713: PUSH
15714: LD_INT 30
15716: PUSH
15717: LD_INT 0
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: PUSH
15724: LD_INT 30
15726: PUSH
15727: LD_INT 1
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: LIST
15738: PUSH
15739: EMPTY
15740: LIST
15741: LIST
15742: PPUSH
15743: CALL_OW 72
15747: ST_TO_ADDR
// for i = 1 to hexes do
15748: LD_ADDR_VAR 0 9
15752: PUSH
15753: DOUBLE
15754: LD_INT 1
15756: DEC
15757: ST_TO_ADDR
15758: LD_VAR 0 14
15762: PUSH
15763: FOR_TO
15764: IFFALSE 16440
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15766: LD_ADDR_VAR 0 13
15770: PUSH
15771: LD_VAR 0 14
15775: PUSH
15776: LD_VAR 0 9
15780: ARRAY
15781: PUSH
15782: LD_INT 1
15784: ARRAY
15785: PPUSH
15786: LD_VAR 0 14
15790: PUSH
15791: LD_VAR 0 9
15795: ARRAY
15796: PUSH
15797: LD_INT 2
15799: ARRAY
15800: PPUSH
15801: CALL_OW 428
15805: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15806: LD_VAR 0 14
15810: PUSH
15811: LD_VAR 0 9
15815: ARRAY
15816: PUSH
15817: LD_INT 1
15819: ARRAY
15820: PPUSH
15821: LD_VAR 0 14
15825: PUSH
15826: LD_VAR 0 9
15830: ARRAY
15831: PUSH
15832: LD_INT 2
15834: ARRAY
15835: PPUSH
15836: CALL_OW 351
15840: PUSH
15841: LD_VAR 0 14
15845: PUSH
15846: LD_VAR 0 9
15850: ARRAY
15851: PUSH
15852: LD_INT 1
15854: ARRAY
15855: PPUSH
15856: LD_VAR 0 14
15860: PUSH
15861: LD_VAR 0 9
15865: ARRAY
15866: PUSH
15867: LD_INT 2
15869: ARRAY
15870: PPUSH
15871: CALL_OW 488
15875: NOT
15876: OR
15877: PUSH
15878: LD_VAR 0 13
15882: PPUSH
15883: CALL_OW 247
15887: PUSH
15888: LD_INT 3
15890: EQUAL
15891: OR
15892: IFFALSE 15898
// exit ;
15894: POP
15895: POP
15896: GO 16442
// if not tmp then
15898: LD_VAR 0 13
15902: NOT
15903: IFFALSE 15907
// continue ;
15905: GO 15763
// result := true ;
15907: LD_ADDR_VAR 0 8
15911: PUSH
15912: LD_INT 1
15914: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15915: LD_VAR 0 6
15919: PUSH
15920: LD_VAR 0 13
15924: PPUSH
15925: CALL_OW 247
15929: PUSH
15930: LD_INT 2
15932: EQUAL
15933: AND
15934: PUSH
15935: LD_VAR 0 13
15939: PPUSH
15940: CALL_OW 263
15944: PUSH
15945: LD_INT 1
15947: EQUAL
15948: AND
15949: IFFALSE 16113
// begin if IsDrivenBy ( tmp ) then
15951: LD_VAR 0 13
15955: PPUSH
15956: CALL_OW 311
15960: IFFALSE 15964
// continue ;
15962: GO 15763
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15964: LD_VAR 0 6
15968: PPUSH
15969: LD_INT 3
15971: PUSH
15972: LD_INT 60
15974: PUSH
15975: EMPTY
15976: LIST
15977: PUSH
15978: EMPTY
15979: LIST
15980: LIST
15981: PUSH
15982: LD_INT 3
15984: PUSH
15985: LD_INT 55
15987: PUSH
15988: EMPTY
15989: LIST
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: PUSH
15995: EMPTY
15996: LIST
15997: LIST
15998: PPUSH
15999: CALL_OW 72
16003: IFFALSE 16111
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
16005: LD_ADDR_VAR 0 18
16009: PUSH
16010: LD_VAR 0 6
16014: PPUSH
16015: LD_INT 3
16017: PUSH
16018: LD_INT 60
16020: PUSH
16021: EMPTY
16022: LIST
16023: PUSH
16024: EMPTY
16025: LIST
16026: LIST
16027: PUSH
16028: LD_INT 3
16030: PUSH
16031: LD_INT 55
16033: PUSH
16034: EMPTY
16035: LIST
16036: PUSH
16037: EMPTY
16038: LIST
16039: LIST
16040: PUSH
16041: EMPTY
16042: LIST
16043: LIST
16044: PPUSH
16045: CALL_OW 72
16049: PUSH
16050: LD_INT 1
16052: ARRAY
16053: ST_TO_ADDR
// if IsInUnit ( driver ) then
16054: LD_VAR 0 18
16058: PPUSH
16059: CALL_OW 310
16063: IFFALSE 16074
// ComExit ( driver ) ;
16065: LD_VAR 0 18
16069: PPUSH
16070: CALL 41384 0 1
// AddComEnterUnit ( driver , tmp ) ;
16074: LD_VAR 0 18
16078: PPUSH
16079: LD_VAR 0 13
16083: PPUSH
16084: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
16088: LD_VAR 0 18
16092: PPUSH
16093: LD_VAR 0 7
16097: PPUSH
16098: CALL_OW 173
// AddComExitVehicle ( driver ) ;
16102: LD_VAR 0 18
16106: PPUSH
16107: CALL_OW 181
// end ; continue ;
16111: GO 15763
// end ; if not cleaners or not tmp in cleaners then
16113: LD_VAR 0 6
16117: NOT
16118: PUSH
16119: LD_VAR 0 13
16123: PUSH
16124: LD_VAR 0 6
16128: IN
16129: NOT
16130: OR
16131: IFFALSE 16438
// begin if dep then
16133: LD_VAR 0 17
16137: IFFALSE 16273
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
16139: LD_ADDR_VAR 0 16
16143: PUSH
16144: LD_VAR 0 17
16148: PUSH
16149: LD_INT 1
16151: ARRAY
16152: PPUSH
16153: CALL_OW 250
16157: PPUSH
16158: LD_VAR 0 17
16162: PUSH
16163: LD_INT 1
16165: ARRAY
16166: PPUSH
16167: CALL_OW 254
16171: PPUSH
16172: LD_INT 5
16174: PPUSH
16175: CALL_OW 272
16179: PUSH
16180: LD_VAR 0 17
16184: PUSH
16185: LD_INT 1
16187: ARRAY
16188: PPUSH
16189: CALL_OW 251
16193: PPUSH
16194: LD_VAR 0 17
16198: PUSH
16199: LD_INT 1
16201: ARRAY
16202: PPUSH
16203: CALL_OW 254
16207: PPUSH
16208: LD_INT 5
16210: PPUSH
16211: CALL_OW 273
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
16220: LD_VAR 0 16
16224: PUSH
16225: LD_INT 1
16227: ARRAY
16228: PPUSH
16229: LD_VAR 0 16
16233: PUSH
16234: LD_INT 2
16236: ARRAY
16237: PPUSH
16238: CALL_OW 488
16242: IFFALSE 16273
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16244: LD_VAR 0 13
16248: PPUSH
16249: LD_VAR 0 16
16253: PUSH
16254: LD_INT 1
16256: ARRAY
16257: PPUSH
16258: LD_VAR 0 16
16262: PUSH
16263: LD_INT 2
16265: ARRAY
16266: PPUSH
16267: CALL_OW 111
// continue ;
16271: GO 15763
// end ; end ; r := GetDir ( tmp ) ;
16273: LD_ADDR_VAR 0 15
16277: PUSH
16278: LD_VAR 0 13
16282: PPUSH
16283: CALL_OW 254
16287: ST_TO_ADDR
// if r = 5 then
16288: LD_VAR 0 15
16292: PUSH
16293: LD_INT 5
16295: EQUAL
16296: IFFALSE 16306
// r := 0 ;
16298: LD_ADDR_VAR 0 15
16302: PUSH
16303: LD_INT 0
16305: ST_TO_ADDR
// for j = r to 5 do
16306: LD_ADDR_VAR 0 10
16310: PUSH
16311: DOUBLE
16312: LD_VAR 0 15
16316: DEC
16317: ST_TO_ADDR
16318: LD_INT 5
16320: PUSH
16321: FOR_TO
16322: IFFALSE 16436
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16324: LD_ADDR_VAR 0 11
16328: PUSH
16329: LD_VAR 0 13
16333: PPUSH
16334: CALL_OW 250
16338: PPUSH
16339: LD_VAR 0 10
16343: PPUSH
16344: LD_INT 2
16346: PPUSH
16347: CALL_OW 272
16351: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16352: LD_ADDR_VAR 0 12
16356: PUSH
16357: LD_VAR 0 13
16361: PPUSH
16362: CALL_OW 251
16366: PPUSH
16367: LD_VAR 0 10
16371: PPUSH
16372: LD_INT 2
16374: PPUSH
16375: CALL_OW 273
16379: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16380: LD_VAR 0 11
16384: PPUSH
16385: LD_VAR 0 12
16389: PPUSH
16390: CALL_OW 488
16394: PUSH
16395: LD_VAR 0 11
16399: PPUSH
16400: LD_VAR 0 12
16404: PPUSH
16405: CALL_OW 428
16409: NOT
16410: AND
16411: IFFALSE 16434
// begin ComMoveXY ( tmp , _x , _y ) ;
16413: LD_VAR 0 13
16417: PPUSH
16418: LD_VAR 0 11
16422: PPUSH
16423: LD_VAR 0 12
16427: PPUSH
16428: CALL_OW 111
// break ;
16432: GO 16436
// end ; end ;
16434: GO 16321
16436: POP
16437: POP
// end ; end ;
16438: GO 15763
16440: POP
16441: POP
// end ;
16442: LD_VAR 0 8
16446: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16447: LD_INT 0
16449: PPUSH
// result := true ;
16450: LD_ADDR_VAR 0 3
16454: PUSH
16455: LD_INT 1
16457: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16458: LD_VAR 0 2
16462: PUSH
16463: LD_INT 24
16465: DOUBLE
16466: EQUAL
16467: IFTRUE 16477
16469: LD_INT 33
16471: DOUBLE
16472: EQUAL
16473: IFTRUE 16477
16475: GO 16502
16477: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16478: LD_ADDR_VAR 0 3
16482: PUSH
16483: LD_INT 32
16485: PPUSH
16486: LD_VAR 0 1
16490: PPUSH
16491: CALL_OW 321
16495: PUSH
16496: LD_INT 2
16498: EQUAL
16499: ST_TO_ADDR
16500: GO 16822
16502: LD_INT 20
16504: DOUBLE
16505: EQUAL
16506: IFTRUE 16510
16508: GO 16535
16510: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16511: LD_ADDR_VAR 0 3
16515: PUSH
16516: LD_INT 6
16518: PPUSH
16519: LD_VAR 0 1
16523: PPUSH
16524: CALL_OW 321
16528: PUSH
16529: LD_INT 2
16531: EQUAL
16532: ST_TO_ADDR
16533: GO 16822
16535: LD_INT 22
16537: DOUBLE
16538: EQUAL
16539: IFTRUE 16549
16541: LD_INT 36
16543: DOUBLE
16544: EQUAL
16545: IFTRUE 16549
16547: GO 16574
16549: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16550: LD_ADDR_VAR 0 3
16554: PUSH
16555: LD_INT 15
16557: PPUSH
16558: LD_VAR 0 1
16562: PPUSH
16563: CALL_OW 321
16567: PUSH
16568: LD_INT 2
16570: EQUAL
16571: ST_TO_ADDR
16572: GO 16822
16574: LD_INT 30
16576: DOUBLE
16577: EQUAL
16578: IFTRUE 16582
16580: GO 16607
16582: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16583: LD_ADDR_VAR 0 3
16587: PUSH
16588: LD_INT 20
16590: PPUSH
16591: LD_VAR 0 1
16595: PPUSH
16596: CALL_OW 321
16600: PUSH
16601: LD_INT 2
16603: EQUAL
16604: ST_TO_ADDR
16605: GO 16822
16607: LD_INT 28
16609: DOUBLE
16610: EQUAL
16611: IFTRUE 16621
16613: LD_INT 21
16615: DOUBLE
16616: EQUAL
16617: IFTRUE 16621
16619: GO 16646
16621: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16622: LD_ADDR_VAR 0 3
16626: PUSH
16627: LD_INT 21
16629: PPUSH
16630: LD_VAR 0 1
16634: PPUSH
16635: CALL_OW 321
16639: PUSH
16640: LD_INT 2
16642: EQUAL
16643: ST_TO_ADDR
16644: GO 16822
16646: LD_INT 16
16648: DOUBLE
16649: EQUAL
16650: IFTRUE 16654
16652: GO 16681
16654: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16655: LD_ADDR_VAR 0 3
16659: PUSH
16660: LD_EXP 34
16664: PPUSH
16665: LD_VAR 0 1
16669: PPUSH
16670: CALL_OW 321
16674: PUSH
16675: LD_INT 2
16677: EQUAL
16678: ST_TO_ADDR
16679: GO 16822
16681: LD_INT 19
16683: DOUBLE
16684: EQUAL
16685: IFTRUE 16695
16687: LD_INT 23
16689: DOUBLE
16690: EQUAL
16691: IFTRUE 16695
16693: GO 16722
16695: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16696: LD_ADDR_VAR 0 3
16700: PUSH
16701: LD_EXP 33
16705: PPUSH
16706: LD_VAR 0 1
16710: PPUSH
16711: CALL_OW 321
16715: PUSH
16716: LD_INT 2
16718: EQUAL
16719: ST_TO_ADDR
16720: GO 16822
16722: LD_INT 17
16724: DOUBLE
16725: EQUAL
16726: IFTRUE 16730
16728: GO 16755
16730: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16731: LD_ADDR_VAR 0 3
16735: PUSH
16736: LD_INT 39
16738: PPUSH
16739: LD_VAR 0 1
16743: PPUSH
16744: CALL_OW 321
16748: PUSH
16749: LD_INT 2
16751: EQUAL
16752: ST_TO_ADDR
16753: GO 16822
16755: LD_INT 18
16757: DOUBLE
16758: EQUAL
16759: IFTRUE 16763
16761: GO 16788
16763: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16764: LD_ADDR_VAR 0 3
16768: PUSH
16769: LD_INT 40
16771: PPUSH
16772: LD_VAR 0 1
16776: PPUSH
16777: CALL_OW 321
16781: PUSH
16782: LD_INT 2
16784: EQUAL
16785: ST_TO_ADDR
16786: GO 16822
16788: LD_INT 27
16790: DOUBLE
16791: EQUAL
16792: IFTRUE 16796
16794: GO 16821
16796: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16797: LD_ADDR_VAR 0 3
16801: PUSH
16802: LD_INT 35
16804: PPUSH
16805: LD_VAR 0 1
16809: PPUSH
16810: CALL_OW 321
16814: PUSH
16815: LD_INT 2
16817: EQUAL
16818: ST_TO_ADDR
16819: GO 16822
16821: POP
// end ;
16822: LD_VAR 0 3
16826: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16827: LD_INT 0
16829: PPUSH
16830: PPUSH
16831: PPUSH
16832: PPUSH
16833: PPUSH
16834: PPUSH
16835: PPUSH
16836: PPUSH
16837: PPUSH
16838: PPUSH
16839: PPUSH
// result := false ;
16840: LD_ADDR_VAR 0 6
16844: PUSH
16845: LD_INT 0
16847: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16848: LD_VAR 0 1
16852: NOT
16853: PUSH
16854: LD_VAR 0 1
16858: PPUSH
16859: CALL_OW 266
16863: PUSH
16864: LD_INT 0
16866: PUSH
16867: LD_INT 1
16869: PUSH
16870: EMPTY
16871: LIST
16872: LIST
16873: IN
16874: NOT
16875: OR
16876: PUSH
16877: LD_VAR 0 2
16881: NOT
16882: OR
16883: PUSH
16884: LD_VAR 0 5
16888: PUSH
16889: LD_INT 0
16891: PUSH
16892: LD_INT 1
16894: PUSH
16895: LD_INT 2
16897: PUSH
16898: LD_INT 3
16900: PUSH
16901: LD_INT 4
16903: PUSH
16904: LD_INT 5
16906: PUSH
16907: EMPTY
16908: LIST
16909: LIST
16910: LIST
16911: LIST
16912: LIST
16913: LIST
16914: IN
16915: NOT
16916: OR
16917: PUSH
16918: LD_VAR 0 3
16922: PPUSH
16923: LD_VAR 0 4
16927: PPUSH
16928: CALL_OW 488
16932: NOT
16933: OR
16934: IFFALSE 16938
// exit ;
16936: GO 17674
// side := GetSide ( depot ) ;
16938: LD_ADDR_VAR 0 9
16942: PUSH
16943: LD_VAR 0 1
16947: PPUSH
16948: CALL_OW 255
16952: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16953: LD_VAR 0 9
16957: PPUSH
16958: LD_VAR 0 2
16962: PPUSH
16963: CALL 16447 0 2
16967: NOT
16968: IFFALSE 16972
// exit ;
16970: GO 17674
// pom := GetBase ( depot ) ;
16972: LD_ADDR_VAR 0 10
16976: PUSH
16977: LD_VAR 0 1
16981: PPUSH
16982: CALL_OW 274
16986: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16987: LD_ADDR_VAR 0 11
16991: PUSH
16992: LD_VAR 0 2
16996: PPUSH
16997: LD_VAR 0 1
17001: PPUSH
17002: CALL_OW 248
17006: PPUSH
17007: CALL_OW 450
17011: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17012: LD_VAR 0 10
17016: PPUSH
17017: LD_INT 1
17019: PPUSH
17020: CALL_OW 275
17024: PUSH
17025: LD_VAR 0 11
17029: PUSH
17030: LD_INT 1
17032: ARRAY
17033: GREATEREQUAL
17034: PUSH
17035: LD_VAR 0 10
17039: PPUSH
17040: LD_INT 2
17042: PPUSH
17043: CALL_OW 275
17047: PUSH
17048: LD_VAR 0 11
17052: PUSH
17053: LD_INT 2
17055: ARRAY
17056: GREATEREQUAL
17057: AND
17058: PUSH
17059: LD_VAR 0 10
17063: PPUSH
17064: LD_INT 3
17066: PPUSH
17067: CALL_OW 275
17071: PUSH
17072: LD_VAR 0 11
17076: PUSH
17077: LD_INT 3
17079: ARRAY
17080: GREATEREQUAL
17081: AND
17082: NOT
17083: IFFALSE 17087
// exit ;
17085: GO 17674
// if GetBType ( depot ) = b_depot then
17087: LD_VAR 0 1
17091: PPUSH
17092: CALL_OW 266
17096: PUSH
17097: LD_INT 0
17099: EQUAL
17100: IFFALSE 17112
// dist := 28 else
17102: LD_ADDR_VAR 0 14
17106: PUSH
17107: LD_INT 28
17109: ST_TO_ADDR
17110: GO 17120
// dist := 36 ;
17112: LD_ADDR_VAR 0 14
17116: PUSH
17117: LD_INT 36
17119: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
17120: LD_VAR 0 1
17124: PPUSH
17125: LD_VAR 0 3
17129: PPUSH
17130: LD_VAR 0 4
17134: PPUSH
17135: CALL_OW 297
17139: PUSH
17140: LD_VAR 0 14
17144: GREATER
17145: IFFALSE 17149
// exit ;
17147: GO 17674
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
17149: LD_ADDR_VAR 0 12
17153: PUSH
17154: LD_VAR 0 2
17158: PPUSH
17159: LD_VAR 0 3
17163: PPUSH
17164: LD_VAR 0 4
17168: PPUSH
17169: LD_VAR 0 5
17173: PPUSH
17174: LD_VAR 0 1
17178: PPUSH
17179: CALL_OW 248
17183: PPUSH
17184: LD_INT 0
17186: PPUSH
17187: CALL 17679 0 6
17191: ST_TO_ADDR
// if not hexes then
17192: LD_VAR 0 12
17196: NOT
17197: IFFALSE 17201
// exit ;
17199: GO 17674
// hex := GetHexInfo ( x , y ) ;
17201: LD_ADDR_VAR 0 15
17205: PUSH
17206: LD_VAR 0 3
17210: PPUSH
17211: LD_VAR 0 4
17215: PPUSH
17216: CALL_OW 546
17220: ST_TO_ADDR
// if hex [ 1 ] then
17221: LD_VAR 0 15
17225: PUSH
17226: LD_INT 1
17228: ARRAY
17229: IFFALSE 17233
// exit ;
17231: GO 17674
// height := hex [ 2 ] ;
17233: LD_ADDR_VAR 0 13
17237: PUSH
17238: LD_VAR 0 15
17242: PUSH
17243: LD_INT 2
17245: ARRAY
17246: ST_TO_ADDR
// for i = 1 to hexes do
17247: LD_ADDR_VAR 0 7
17251: PUSH
17252: DOUBLE
17253: LD_INT 1
17255: DEC
17256: ST_TO_ADDR
17257: LD_VAR 0 12
17261: PUSH
17262: FOR_TO
17263: IFFALSE 17593
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17265: LD_VAR 0 12
17269: PUSH
17270: LD_VAR 0 7
17274: ARRAY
17275: PUSH
17276: LD_INT 1
17278: ARRAY
17279: PPUSH
17280: LD_VAR 0 12
17284: PUSH
17285: LD_VAR 0 7
17289: ARRAY
17290: PUSH
17291: LD_INT 2
17293: ARRAY
17294: PPUSH
17295: CALL_OW 488
17299: NOT
17300: PUSH
17301: LD_VAR 0 12
17305: PUSH
17306: LD_VAR 0 7
17310: ARRAY
17311: PUSH
17312: LD_INT 1
17314: ARRAY
17315: PPUSH
17316: LD_VAR 0 12
17320: PUSH
17321: LD_VAR 0 7
17325: ARRAY
17326: PUSH
17327: LD_INT 2
17329: ARRAY
17330: PPUSH
17331: CALL_OW 428
17335: PUSH
17336: LD_INT 0
17338: GREATER
17339: OR
17340: PUSH
17341: LD_VAR 0 12
17345: PUSH
17346: LD_VAR 0 7
17350: ARRAY
17351: PUSH
17352: LD_INT 1
17354: ARRAY
17355: PPUSH
17356: LD_VAR 0 12
17360: PUSH
17361: LD_VAR 0 7
17365: ARRAY
17366: PUSH
17367: LD_INT 2
17369: ARRAY
17370: PPUSH
17371: CALL_OW 351
17375: OR
17376: IFFALSE 17382
// exit ;
17378: POP
17379: POP
17380: GO 17674
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17382: LD_ADDR_VAR 0 8
17386: PUSH
17387: LD_VAR 0 12
17391: PUSH
17392: LD_VAR 0 7
17396: ARRAY
17397: PUSH
17398: LD_INT 1
17400: ARRAY
17401: PPUSH
17402: LD_VAR 0 12
17406: PUSH
17407: LD_VAR 0 7
17411: ARRAY
17412: PUSH
17413: LD_INT 2
17415: ARRAY
17416: PPUSH
17417: CALL_OW 546
17421: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17422: LD_VAR 0 8
17426: PUSH
17427: LD_INT 1
17429: ARRAY
17430: PUSH
17431: LD_VAR 0 8
17435: PUSH
17436: LD_INT 2
17438: ARRAY
17439: PUSH
17440: LD_VAR 0 13
17444: PUSH
17445: LD_INT 2
17447: PLUS
17448: GREATER
17449: OR
17450: PUSH
17451: LD_VAR 0 8
17455: PUSH
17456: LD_INT 2
17458: ARRAY
17459: PUSH
17460: LD_VAR 0 13
17464: PUSH
17465: LD_INT 2
17467: MINUS
17468: LESS
17469: OR
17470: PUSH
17471: LD_VAR 0 8
17475: PUSH
17476: LD_INT 3
17478: ARRAY
17479: PUSH
17480: LD_INT 0
17482: PUSH
17483: LD_INT 8
17485: PUSH
17486: LD_INT 9
17488: PUSH
17489: LD_INT 10
17491: PUSH
17492: LD_INT 11
17494: PUSH
17495: LD_INT 12
17497: PUSH
17498: LD_INT 13
17500: PUSH
17501: LD_INT 16
17503: PUSH
17504: LD_INT 17
17506: PUSH
17507: LD_INT 18
17509: PUSH
17510: LD_INT 19
17512: PUSH
17513: LD_INT 20
17515: PUSH
17516: LD_INT 21
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: IN
17534: NOT
17535: OR
17536: PUSH
17537: LD_VAR 0 8
17541: PUSH
17542: LD_INT 5
17544: ARRAY
17545: NOT
17546: OR
17547: PUSH
17548: LD_VAR 0 8
17552: PUSH
17553: LD_INT 6
17555: ARRAY
17556: PUSH
17557: LD_INT 1
17559: PUSH
17560: LD_INT 2
17562: PUSH
17563: LD_INT 7
17565: PUSH
17566: LD_INT 9
17568: PUSH
17569: LD_INT 10
17571: PUSH
17572: LD_INT 11
17574: PUSH
17575: EMPTY
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: LIST
17582: IN
17583: NOT
17584: OR
17585: IFFALSE 17591
// exit ;
17587: POP
17588: POP
17589: GO 17674
// end ;
17591: GO 17262
17593: POP
17594: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17595: LD_VAR 0 9
17599: PPUSH
17600: LD_VAR 0 3
17604: PPUSH
17605: LD_VAR 0 4
17609: PPUSH
17610: LD_INT 20
17612: PPUSH
17613: CALL 9620 0 4
17617: PUSH
17618: LD_INT 4
17620: ARRAY
17621: IFFALSE 17625
// exit ;
17623: GO 17674
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17625: LD_VAR 0 2
17629: PUSH
17630: LD_INT 29
17632: PUSH
17633: LD_INT 30
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: IN
17640: PUSH
17641: LD_VAR 0 3
17645: PPUSH
17646: LD_VAR 0 4
17650: PPUSH
17651: LD_VAR 0 9
17655: PPUSH
17656: CALL_OW 440
17660: NOT
17661: AND
17662: IFFALSE 17666
// exit ;
17664: GO 17674
// result := true ;
17666: LD_ADDR_VAR 0 6
17670: PUSH
17671: LD_INT 1
17673: ST_TO_ADDR
// end ;
17674: LD_VAR 0 6
17678: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17679: LD_INT 0
17681: PPUSH
17682: PPUSH
17683: PPUSH
17684: PPUSH
17685: PPUSH
17686: PPUSH
17687: PPUSH
17688: PPUSH
17689: PPUSH
17690: PPUSH
17691: PPUSH
17692: PPUSH
17693: PPUSH
17694: PPUSH
17695: PPUSH
17696: PPUSH
17697: PPUSH
17698: PPUSH
17699: PPUSH
17700: PPUSH
17701: PPUSH
17702: PPUSH
17703: PPUSH
17704: PPUSH
17705: PPUSH
17706: PPUSH
17707: PPUSH
17708: PPUSH
17709: PPUSH
17710: PPUSH
17711: PPUSH
17712: PPUSH
17713: PPUSH
17714: PPUSH
17715: PPUSH
17716: PPUSH
17717: PPUSH
17718: PPUSH
17719: PPUSH
17720: PPUSH
17721: PPUSH
17722: PPUSH
17723: PPUSH
17724: PPUSH
17725: PPUSH
17726: PPUSH
17727: PPUSH
17728: PPUSH
17729: PPUSH
17730: PPUSH
17731: PPUSH
17732: PPUSH
17733: PPUSH
17734: PPUSH
17735: PPUSH
17736: PPUSH
17737: PPUSH
17738: PPUSH
// result = [ ] ;
17739: LD_ADDR_VAR 0 7
17743: PUSH
17744: EMPTY
17745: ST_TO_ADDR
// temp_list = [ ] ;
17746: LD_ADDR_VAR 0 9
17750: PUSH
17751: EMPTY
17752: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17753: LD_VAR 0 4
17757: PUSH
17758: LD_INT 0
17760: PUSH
17761: LD_INT 1
17763: PUSH
17764: LD_INT 2
17766: PUSH
17767: LD_INT 3
17769: PUSH
17770: LD_INT 4
17772: PUSH
17773: LD_INT 5
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: IN
17784: NOT
17785: PUSH
17786: LD_VAR 0 1
17790: PUSH
17791: LD_INT 0
17793: PUSH
17794: LD_INT 1
17796: PUSH
17797: EMPTY
17798: LIST
17799: LIST
17800: IN
17801: PUSH
17802: LD_VAR 0 5
17806: PUSH
17807: LD_INT 1
17809: PUSH
17810: LD_INT 2
17812: PUSH
17813: LD_INT 3
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: LIST
17820: IN
17821: NOT
17822: AND
17823: OR
17824: IFFALSE 17828
// exit ;
17826: GO 36219
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17828: LD_VAR 0 1
17832: PUSH
17833: LD_INT 6
17835: PUSH
17836: LD_INT 7
17838: PUSH
17839: LD_INT 8
17841: PUSH
17842: LD_INT 13
17844: PUSH
17845: LD_INT 12
17847: PUSH
17848: LD_INT 15
17850: PUSH
17851: LD_INT 11
17853: PUSH
17854: LD_INT 14
17856: PUSH
17857: LD_INT 10
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: IN
17871: IFFALSE 17881
// btype = b_lab ;
17873: LD_ADDR_VAR 0 1
17877: PUSH
17878: LD_INT 6
17880: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17881: LD_VAR 0 6
17885: PUSH
17886: LD_INT 0
17888: PUSH
17889: LD_INT 1
17891: PUSH
17892: LD_INT 2
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: LIST
17899: IN
17900: NOT
17901: PUSH
17902: LD_VAR 0 1
17906: PUSH
17907: LD_INT 0
17909: PUSH
17910: LD_INT 1
17912: PUSH
17913: LD_INT 2
17915: PUSH
17916: LD_INT 3
17918: PUSH
17919: LD_INT 6
17921: PUSH
17922: LD_INT 36
17924: PUSH
17925: LD_INT 4
17927: PUSH
17928: LD_INT 5
17930: PUSH
17931: LD_INT 31
17933: PUSH
17934: LD_INT 32
17936: PUSH
17937: LD_INT 33
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: LIST
17947: LIST
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: IN
17953: NOT
17954: PUSH
17955: LD_VAR 0 6
17959: PUSH
17960: LD_INT 1
17962: EQUAL
17963: AND
17964: OR
17965: PUSH
17966: LD_VAR 0 1
17970: PUSH
17971: LD_INT 2
17973: PUSH
17974: LD_INT 3
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: IN
17981: NOT
17982: PUSH
17983: LD_VAR 0 6
17987: PUSH
17988: LD_INT 2
17990: EQUAL
17991: AND
17992: OR
17993: IFFALSE 18003
// mode = 0 ;
17995: LD_ADDR_VAR 0 6
17999: PUSH
18000: LD_INT 0
18002: ST_TO_ADDR
// case mode of 0 :
18003: LD_VAR 0 6
18007: PUSH
18008: LD_INT 0
18010: DOUBLE
18011: EQUAL
18012: IFTRUE 18016
18014: GO 29469
18016: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
18017: LD_ADDR_VAR 0 11
18021: PUSH
18022: LD_INT 0
18024: PUSH
18025: LD_INT 0
18027: PUSH
18028: EMPTY
18029: LIST
18030: LIST
18031: PUSH
18032: LD_INT 0
18034: PUSH
18035: LD_INT 1
18037: NEG
18038: PUSH
18039: EMPTY
18040: LIST
18041: LIST
18042: PUSH
18043: LD_INT 1
18045: PUSH
18046: LD_INT 0
18048: PUSH
18049: EMPTY
18050: LIST
18051: LIST
18052: PUSH
18053: LD_INT 1
18055: PUSH
18056: LD_INT 1
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: PUSH
18063: LD_INT 0
18065: PUSH
18066: LD_INT 1
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: LD_INT 1
18075: NEG
18076: PUSH
18077: LD_INT 0
18079: PUSH
18080: EMPTY
18081: LIST
18082: LIST
18083: PUSH
18084: LD_INT 1
18086: NEG
18087: PUSH
18088: LD_INT 1
18090: NEG
18091: PUSH
18092: EMPTY
18093: LIST
18094: LIST
18095: PUSH
18096: LD_INT 1
18098: NEG
18099: PUSH
18100: LD_INT 2
18102: NEG
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: PUSH
18108: LD_INT 0
18110: PUSH
18111: LD_INT 2
18113: NEG
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: PUSH
18119: LD_INT 1
18121: PUSH
18122: LD_INT 1
18124: NEG
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: LD_INT 1
18132: PUSH
18133: LD_INT 2
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PUSH
18140: LD_INT 0
18142: PUSH
18143: LD_INT 2
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: PUSH
18150: LD_INT 1
18152: NEG
18153: PUSH
18154: LD_INT 1
18156: PUSH
18157: EMPTY
18158: LIST
18159: LIST
18160: PUSH
18161: LD_INT 1
18163: PUSH
18164: LD_INT 3
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PUSH
18171: LD_INT 0
18173: PUSH
18174: LD_INT 3
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: PUSH
18181: LD_INT 1
18183: NEG
18184: PUSH
18185: LD_INT 2
18187: PUSH
18188: EMPTY
18189: LIST
18190: LIST
18191: PUSH
18192: EMPTY
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18210: LD_ADDR_VAR 0 12
18214: PUSH
18215: LD_INT 0
18217: PUSH
18218: LD_INT 0
18220: PUSH
18221: EMPTY
18222: LIST
18223: LIST
18224: PUSH
18225: LD_INT 0
18227: PUSH
18228: LD_INT 1
18230: NEG
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PUSH
18236: LD_INT 1
18238: PUSH
18239: LD_INT 0
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: PUSH
18246: LD_INT 1
18248: PUSH
18249: LD_INT 1
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: PUSH
18256: LD_INT 0
18258: PUSH
18259: LD_INT 1
18261: PUSH
18262: EMPTY
18263: LIST
18264: LIST
18265: PUSH
18266: LD_INT 1
18268: NEG
18269: PUSH
18270: LD_INT 0
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PUSH
18277: LD_INT 1
18279: NEG
18280: PUSH
18281: LD_INT 1
18283: NEG
18284: PUSH
18285: EMPTY
18286: LIST
18287: LIST
18288: PUSH
18289: LD_INT 1
18291: PUSH
18292: LD_INT 1
18294: NEG
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: PUSH
18300: LD_INT 2
18302: PUSH
18303: LD_INT 0
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: PUSH
18310: LD_INT 2
18312: PUSH
18313: LD_INT 1
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: PUSH
18320: LD_INT 1
18322: NEG
18323: PUSH
18324: LD_INT 1
18326: PUSH
18327: EMPTY
18328: LIST
18329: LIST
18330: PUSH
18331: LD_INT 2
18333: NEG
18334: PUSH
18335: LD_INT 0
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: PUSH
18342: LD_INT 2
18344: NEG
18345: PUSH
18346: LD_INT 1
18348: NEG
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 2
18356: NEG
18357: PUSH
18358: LD_INT 1
18360: PUSH
18361: EMPTY
18362: LIST
18363: LIST
18364: PUSH
18365: LD_INT 3
18367: NEG
18368: PUSH
18369: LD_INT 0
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: PUSH
18376: LD_INT 3
18378: NEG
18379: PUSH
18380: LD_INT 1
18382: NEG
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: LIST
18400: LIST
18401: LIST
18402: LIST
18403: LIST
18404: LIST
18405: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18406: LD_ADDR_VAR 0 13
18410: PUSH
18411: LD_INT 0
18413: PUSH
18414: LD_INT 0
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: PUSH
18421: LD_INT 0
18423: PUSH
18424: LD_INT 1
18426: NEG
18427: PUSH
18428: EMPTY
18429: LIST
18430: LIST
18431: PUSH
18432: LD_INT 1
18434: PUSH
18435: LD_INT 0
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: PUSH
18442: LD_INT 1
18444: PUSH
18445: LD_INT 1
18447: PUSH
18448: EMPTY
18449: LIST
18450: LIST
18451: PUSH
18452: LD_INT 0
18454: PUSH
18455: LD_INT 1
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: PUSH
18462: LD_INT 1
18464: NEG
18465: PUSH
18466: LD_INT 0
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: PUSH
18473: LD_INT 1
18475: NEG
18476: PUSH
18477: LD_INT 1
18479: NEG
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: PUSH
18485: LD_INT 1
18487: NEG
18488: PUSH
18489: LD_INT 2
18491: NEG
18492: PUSH
18493: EMPTY
18494: LIST
18495: LIST
18496: PUSH
18497: LD_INT 2
18499: PUSH
18500: LD_INT 1
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: PUSH
18507: LD_INT 2
18509: PUSH
18510: LD_INT 2
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PUSH
18517: LD_INT 1
18519: PUSH
18520: LD_INT 2
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: LD_INT 2
18529: NEG
18530: PUSH
18531: LD_INT 1
18533: NEG
18534: PUSH
18535: EMPTY
18536: LIST
18537: LIST
18538: PUSH
18539: LD_INT 2
18541: NEG
18542: PUSH
18543: LD_INT 2
18545: NEG
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: PUSH
18551: LD_INT 2
18553: NEG
18554: PUSH
18555: LD_INT 3
18557: NEG
18558: PUSH
18559: EMPTY
18560: LIST
18561: LIST
18562: PUSH
18563: LD_INT 3
18565: NEG
18566: PUSH
18567: LD_INT 2
18569: NEG
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: PUSH
18575: LD_INT 3
18577: NEG
18578: PUSH
18579: LD_INT 3
18581: NEG
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: PUSH
18587: EMPTY
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: LIST
18604: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18605: LD_ADDR_VAR 0 14
18609: PUSH
18610: LD_INT 0
18612: PUSH
18613: LD_INT 0
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: PUSH
18620: LD_INT 0
18622: PUSH
18623: LD_INT 1
18625: NEG
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: PUSH
18631: LD_INT 1
18633: PUSH
18634: LD_INT 0
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: PUSH
18641: LD_INT 1
18643: PUSH
18644: LD_INT 1
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: PUSH
18651: LD_INT 0
18653: PUSH
18654: LD_INT 1
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: LD_INT 1
18663: NEG
18664: PUSH
18665: LD_INT 0
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: PUSH
18672: LD_INT 1
18674: NEG
18675: PUSH
18676: LD_INT 1
18678: NEG
18679: PUSH
18680: EMPTY
18681: LIST
18682: LIST
18683: PUSH
18684: LD_INT 1
18686: NEG
18687: PUSH
18688: LD_INT 2
18690: NEG
18691: PUSH
18692: EMPTY
18693: LIST
18694: LIST
18695: PUSH
18696: LD_INT 0
18698: PUSH
18699: LD_INT 2
18701: NEG
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: PUSH
18707: LD_INT 1
18709: PUSH
18710: LD_INT 1
18712: NEG
18713: PUSH
18714: EMPTY
18715: LIST
18716: LIST
18717: PUSH
18718: LD_INT 1
18720: PUSH
18721: LD_INT 2
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: PUSH
18728: LD_INT 0
18730: PUSH
18731: LD_INT 2
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: PUSH
18738: LD_INT 1
18740: NEG
18741: PUSH
18742: LD_INT 1
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: PUSH
18749: LD_INT 1
18751: NEG
18752: PUSH
18753: LD_INT 3
18755: NEG
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: PUSH
18761: LD_INT 0
18763: PUSH
18764: LD_INT 3
18766: NEG
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: PUSH
18772: LD_INT 1
18774: PUSH
18775: LD_INT 2
18777: NEG
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18801: LD_ADDR_VAR 0 15
18805: PUSH
18806: LD_INT 0
18808: PUSH
18809: LD_INT 0
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PUSH
18816: LD_INT 0
18818: PUSH
18819: LD_INT 1
18821: NEG
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: PUSH
18827: LD_INT 1
18829: PUSH
18830: LD_INT 0
18832: PUSH
18833: EMPTY
18834: LIST
18835: LIST
18836: PUSH
18837: LD_INT 1
18839: PUSH
18840: LD_INT 1
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: PUSH
18847: LD_INT 0
18849: PUSH
18850: LD_INT 1
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: PUSH
18857: LD_INT 1
18859: NEG
18860: PUSH
18861: LD_INT 0
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: PUSH
18868: LD_INT 1
18870: NEG
18871: PUSH
18872: LD_INT 1
18874: NEG
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: PUSH
18880: LD_INT 1
18882: PUSH
18883: LD_INT 1
18885: NEG
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: PUSH
18891: LD_INT 2
18893: PUSH
18894: LD_INT 0
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: PUSH
18901: LD_INT 2
18903: PUSH
18904: LD_INT 1
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: PUSH
18911: LD_INT 1
18913: NEG
18914: PUSH
18915: LD_INT 1
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: PUSH
18922: LD_INT 2
18924: NEG
18925: PUSH
18926: LD_INT 0
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PUSH
18933: LD_INT 2
18935: NEG
18936: PUSH
18937: LD_INT 1
18939: NEG
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PUSH
18945: LD_INT 2
18947: PUSH
18948: LD_INT 1
18950: NEG
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: PUSH
18956: LD_INT 3
18958: PUSH
18959: LD_INT 0
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: PUSH
18966: LD_INT 3
18968: PUSH
18969: LD_INT 1
18971: PUSH
18972: EMPTY
18973: LIST
18974: LIST
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18994: LD_ADDR_VAR 0 16
18998: PUSH
18999: LD_INT 0
19001: PUSH
19002: LD_INT 0
19004: PUSH
19005: EMPTY
19006: LIST
19007: LIST
19008: PUSH
19009: LD_INT 0
19011: PUSH
19012: LD_INT 1
19014: NEG
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: PUSH
19020: LD_INT 1
19022: PUSH
19023: LD_INT 0
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: PUSH
19030: LD_INT 1
19032: PUSH
19033: LD_INT 1
19035: PUSH
19036: EMPTY
19037: LIST
19038: LIST
19039: PUSH
19040: LD_INT 0
19042: PUSH
19043: LD_INT 1
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PUSH
19050: LD_INT 1
19052: NEG
19053: PUSH
19054: LD_INT 0
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: PUSH
19061: LD_INT 1
19063: NEG
19064: PUSH
19065: LD_INT 1
19067: NEG
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: PUSH
19073: LD_INT 1
19075: NEG
19076: PUSH
19077: LD_INT 2
19079: NEG
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: LD_INT 2
19087: PUSH
19088: LD_INT 1
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PUSH
19095: LD_INT 2
19097: PUSH
19098: LD_INT 2
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PUSH
19105: LD_INT 1
19107: PUSH
19108: LD_INT 2
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: PUSH
19115: LD_INT 2
19117: NEG
19118: PUSH
19119: LD_INT 1
19121: NEG
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: PUSH
19127: LD_INT 2
19129: NEG
19130: PUSH
19131: LD_INT 2
19133: NEG
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PUSH
19139: LD_INT 3
19141: PUSH
19142: LD_INT 2
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: PUSH
19149: LD_INT 3
19151: PUSH
19152: LD_INT 3
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: PUSH
19159: LD_INT 2
19161: PUSH
19162: LD_INT 3
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19187: LD_ADDR_VAR 0 17
19191: PUSH
19192: LD_INT 0
19194: PUSH
19195: LD_INT 0
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: PUSH
19202: LD_INT 0
19204: PUSH
19205: LD_INT 1
19207: NEG
19208: PUSH
19209: EMPTY
19210: LIST
19211: LIST
19212: PUSH
19213: LD_INT 1
19215: PUSH
19216: LD_INT 0
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: PUSH
19223: LD_INT 1
19225: PUSH
19226: LD_INT 1
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: PUSH
19233: LD_INT 0
19235: PUSH
19236: LD_INT 1
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: PUSH
19243: LD_INT 1
19245: NEG
19246: PUSH
19247: LD_INT 0
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: PUSH
19254: LD_INT 1
19256: NEG
19257: PUSH
19258: LD_INT 1
19260: NEG
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: PUSH
19266: LD_INT 1
19268: NEG
19269: PUSH
19270: LD_INT 2
19272: NEG
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: PUSH
19278: LD_INT 0
19280: PUSH
19281: LD_INT 2
19283: NEG
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: PUSH
19289: LD_INT 1
19291: PUSH
19292: LD_INT 1
19294: NEG
19295: PUSH
19296: EMPTY
19297: LIST
19298: LIST
19299: PUSH
19300: LD_INT 2
19302: PUSH
19303: LD_INT 0
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: PUSH
19310: LD_INT 2
19312: PUSH
19313: LD_INT 1
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: PUSH
19320: LD_INT 2
19322: PUSH
19323: LD_INT 2
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: PUSH
19330: LD_INT 1
19332: PUSH
19333: LD_INT 2
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: PUSH
19340: LD_INT 0
19342: PUSH
19343: LD_INT 2
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: PUSH
19350: LD_INT 1
19352: NEG
19353: PUSH
19354: LD_INT 1
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PUSH
19361: LD_INT 2
19363: NEG
19364: PUSH
19365: LD_INT 0
19367: PUSH
19368: EMPTY
19369: LIST
19370: LIST
19371: PUSH
19372: LD_INT 2
19374: NEG
19375: PUSH
19376: LD_INT 1
19378: NEG
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: PUSH
19384: LD_INT 2
19386: NEG
19387: PUSH
19388: LD_INT 2
19390: NEG
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19417: LD_ADDR_VAR 0 18
19421: PUSH
19422: LD_INT 0
19424: PUSH
19425: LD_INT 0
19427: PUSH
19428: EMPTY
19429: LIST
19430: LIST
19431: PUSH
19432: LD_INT 0
19434: PUSH
19435: LD_INT 1
19437: NEG
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: PUSH
19443: LD_INT 1
19445: PUSH
19446: LD_INT 0
19448: PUSH
19449: EMPTY
19450: LIST
19451: LIST
19452: PUSH
19453: LD_INT 1
19455: PUSH
19456: LD_INT 1
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: PUSH
19463: LD_INT 0
19465: PUSH
19466: LD_INT 1
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: PUSH
19473: LD_INT 1
19475: NEG
19476: PUSH
19477: LD_INT 0
19479: PUSH
19480: EMPTY
19481: LIST
19482: LIST
19483: PUSH
19484: LD_INT 1
19486: NEG
19487: PUSH
19488: LD_INT 1
19490: NEG
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: PUSH
19496: LD_INT 1
19498: NEG
19499: PUSH
19500: LD_INT 2
19502: NEG
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: LD_INT 0
19510: PUSH
19511: LD_INT 2
19513: NEG
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: PUSH
19519: LD_INT 1
19521: PUSH
19522: LD_INT 1
19524: NEG
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: PUSH
19530: LD_INT 2
19532: PUSH
19533: LD_INT 0
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: PUSH
19540: LD_INT 2
19542: PUSH
19543: LD_INT 1
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: PUSH
19550: LD_INT 2
19552: PUSH
19553: LD_INT 2
19555: PUSH
19556: EMPTY
19557: LIST
19558: LIST
19559: PUSH
19560: LD_INT 1
19562: PUSH
19563: LD_INT 2
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: PUSH
19570: LD_INT 0
19572: PUSH
19573: LD_INT 2
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: PUSH
19580: LD_INT 1
19582: NEG
19583: PUSH
19584: LD_INT 1
19586: PUSH
19587: EMPTY
19588: LIST
19589: LIST
19590: PUSH
19591: LD_INT 2
19593: NEG
19594: PUSH
19595: LD_INT 0
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: PUSH
19602: LD_INT 2
19604: NEG
19605: PUSH
19606: LD_INT 1
19608: NEG
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: PUSH
19614: LD_INT 2
19616: NEG
19617: PUSH
19618: LD_INT 2
19620: NEG
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19647: LD_ADDR_VAR 0 19
19651: PUSH
19652: LD_INT 0
19654: PUSH
19655: LD_INT 0
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: PUSH
19662: LD_INT 0
19664: PUSH
19665: LD_INT 1
19667: NEG
19668: PUSH
19669: EMPTY
19670: LIST
19671: LIST
19672: PUSH
19673: LD_INT 1
19675: PUSH
19676: LD_INT 0
19678: PUSH
19679: EMPTY
19680: LIST
19681: LIST
19682: PUSH
19683: LD_INT 1
19685: PUSH
19686: LD_INT 1
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: PUSH
19693: LD_INT 0
19695: PUSH
19696: LD_INT 1
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: PUSH
19703: LD_INT 1
19705: NEG
19706: PUSH
19707: LD_INT 0
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: PUSH
19714: LD_INT 1
19716: NEG
19717: PUSH
19718: LD_INT 1
19720: NEG
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: PUSH
19726: LD_INT 1
19728: NEG
19729: PUSH
19730: LD_INT 2
19732: NEG
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: PUSH
19738: LD_INT 0
19740: PUSH
19741: LD_INT 2
19743: NEG
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: PUSH
19749: LD_INT 1
19751: PUSH
19752: LD_INT 1
19754: NEG
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: PUSH
19760: LD_INT 2
19762: PUSH
19763: LD_INT 0
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: LD_INT 2
19772: PUSH
19773: LD_INT 1
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: LD_INT 2
19782: PUSH
19783: LD_INT 2
19785: PUSH
19786: EMPTY
19787: LIST
19788: LIST
19789: PUSH
19790: LD_INT 1
19792: PUSH
19793: LD_INT 2
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PUSH
19800: LD_INT 0
19802: PUSH
19803: LD_INT 2
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PUSH
19810: LD_INT 1
19812: NEG
19813: PUSH
19814: LD_INT 1
19816: PUSH
19817: EMPTY
19818: LIST
19819: LIST
19820: PUSH
19821: LD_INT 2
19823: NEG
19824: PUSH
19825: LD_INT 0
19827: PUSH
19828: EMPTY
19829: LIST
19830: LIST
19831: PUSH
19832: LD_INT 2
19834: NEG
19835: PUSH
19836: LD_INT 1
19838: NEG
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: PUSH
19844: LD_INT 2
19846: NEG
19847: PUSH
19848: LD_INT 2
19850: NEG
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19877: LD_ADDR_VAR 0 20
19881: PUSH
19882: LD_INT 0
19884: PUSH
19885: LD_INT 0
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: PUSH
19892: LD_INT 0
19894: PUSH
19895: LD_INT 1
19897: NEG
19898: PUSH
19899: EMPTY
19900: LIST
19901: LIST
19902: PUSH
19903: LD_INT 1
19905: PUSH
19906: LD_INT 0
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: PUSH
19913: LD_INT 1
19915: PUSH
19916: LD_INT 1
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: PUSH
19923: LD_INT 0
19925: PUSH
19926: LD_INT 1
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: PUSH
19933: LD_INT 1
19935: NEG
19936: PUSH
19937: LD_INT 0
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: PUSH
19944: LD_INT 1
19946: NEG
19947: PUSH
19948: LD_INT 1
19950: NEG
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: PUSH
19956: LD_INT 1
19958: NEG
19959: PUSH
19960: LD_INT 2
19962: NEG
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: PUSH
19968: LD_INT 0
19970: PUSH
19971: LD_INT 2
19973: NEG
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: PUSH
19979: LD_INT 1
19981: PUSH
19982: LD_INT 1
19984: NEG
19985: PUSH
19986: EMPTY
19987: LIST
19988: LIST
19989: PUSH
19990: LD_INT 2
19992: PUSH
19993: LD_INT 0
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: PUSH
20000: LD_INT 2
20002: PUSH
20003: LD_INT 1
20005: PUSH
20006: EMPTY
20007: LIST
20008: LIST
20009: PUSH
20010: LD_INT 2
20012: PUSH
20013: LD_INT 2
20015: PUSH
20016: EMPTY
20017: LIST
20018: LIST
20019: PUSH
20020: LD_INT 1
20022: PUSH
20023: LD_INT 2
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: PUSH
20030: LD_INT 0
20032: PUSH
20033: LD_INT 2
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: PUSH
20040: LD_INT 1
20042: NEG
20043: PUSH
20044: LD_INT 1
20046: PUSH
20047: EMPTY
20048: LIST
20049: LIST
20050: PUSH
20051: LD_INT 2
20053: NEG
20054: PUSH
20055: LD_INT 0
20057: PUSH
20058: EMPTY
20059: LIST
20060: LIST
20061: PUSH
20062: LD_INT 2
20064: NEG
20065: PUSH
20066: LD_INT 1
20068: NEG
20069: PUSH
20070: EMPTY
20071: LIST
20072: LIST
20073: PUSH
20074: LD_INT 2
20076: NEG
20077: PUSH
20078: LD_INT 2
20080: NEG
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: PUSH
20086: EMPTY
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20107: LD_ADDR_VAR 0 21
20111: PUSH
20112: LD_INT 0
20114: PUSH
20115: LD_INT 0
20117: PUSH
20118: EMPTY
20119: LIST
20120: LIST
20121: PUSH
20122: LD_INT 0
20124: PUSH
20125: LD_INT 1
20127: NEG
20128: PUSH
20129: EMPTY
20130: LIST
20131: LIST
20132: PUSH
20133: LD_INT 1
20135: PUSH
20136: LD_INT 0
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PUSH
20143: LD_INT 1
20145: PUSH
20146: LD_INT 1
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: PUSH
20153: LD_INT 0
20155: PUSH
20156: LD_INT 1
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PUSH
20163: LD_INT 1
20165: NEG
20166: PUSH
20167: LD_INT 0
20169: PUSH
20170: EMPTY
20171: LIST
20172: LIST
20173: PUSH
20174: LD_INT 1
20176: NEG
20177: PUSH
20178: LD_INT 1
20180: NEG
20181: PUSH
20182: EMPTY
20183: LIST
20184: LIST
20185: PUSH
20186: LD_INT 1
20188: NEG
20189: PUSH
20190: LD_INT 2
20192: NEG
20193: PUSH
20194: EMPTY
20195: LIST
20196: LIST
20197: PUSH
20198: LD_INT 0
20200: PUSH
20201: LD_INT 2
20203: NEG
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: PUSH
20209: LD_INT 1
20211: PUSH
20212: LD_INT 1
20214: NEG
20215: PUSH
20216: EMPTY
20217: LIST
20218: LIST
20219: PUSH
20220: LD_INT 2
20222: PUSH
20223: LD_INT 0
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: LD_INT 2
20232: PUSH
20233: LD_INT 1
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: PUSH
20240: LD_INT 2
20242: PUSH
20243: LD_INT 2
20245: PUSH
20246: EMPTY
20247: LIST
20248: LIST
20249: PUSH
20250: LD_INT 1
20252: PUSH
20253: LD_INT 2
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: PUSH
20260: LD_INT 0
20262: PUSH
20263: LD_INT 2
20265: PUSH
20266: EMPTY
20267: LIST
20268: LIST
20269: PUSH
20270: LD_INT 1
20272: NEG
20273: PUSH
20274: LD_INT 1
20276: PUSH
20277: EMPTY
20278: LIST
20279: LIST
20280: PUSH
20281: LD_INT 2
20283: NEG
20284: PUSH
20285: LD_INT 0
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: PUSH
20292: LD_INT 2
20294: NEG
20295: PUSH
20296: LD_INT 1
20298: NEG
20299: PUSH
20300: EMPTY
20301: LIST
20302: LIST
20303: PUSH
20304: LD_INT 2
20306: NEG
20307: PUSH
20308: LD_INT 2
20310: NEG
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: LIST
20330: LIST
20331: LIST
20332: LIST
20333: LIST
20334: LIST
20335: LIST
20336: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20337: LD_ADDR_VAR 0 22
20341: PUSH
20342: LD_INT 0
20344: PUSH
20345: LD_INT 0
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: PUSH
20352: LD_INT 0
20354: PUSH
20355: LD_INT 1
20357: NEG
20358: PUSH
20359: EMPTY
20360: LIST
20361: LIST
20362: PUSH
20363: LD_INT 1
20365: PUSH
20366: LD_INT 0
20368: PUSH
20369: EMPTY
20370: LIST
20371: LIST
20372: PUSH
20373: LD_INT 1
20375: PUSH
20376: LD_INT 1
20378: PUSH
20379: EMPTY
20380: LIST
20381: LIST
20382: PUSH
20383: LD_INT 0
20385: PUSH
20386: LD_INT 1
20388: PUSH
20389: EMPTY
20390: LIST
20391: LIST
20392: PUSH
20393: LD_INT 1
20395: NEG
20396: PUSH
20397: LD_INT 0
20399: PUSH
20400: EMPTY
20401: LIST
20402: LIST
20403: PUSH
20404: LD_INT 1
20406: NEG
20407: PUSH
20408: LD_INT 1
20410: NEG
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: PUSH
20416: LD_INT 1
20418: NEG
20419: PUSH
20420: LD_INT 2
20422: NEG
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: PUSH
20428: LD_INT 0
20430: PUSH
20431: LD_INT 2
20433: NEG
20434: PUSH
20435: EMPTY
20436: LIST
20437: LIST
20438: PUSH
20439: LD_INT 1
20441: PUSH
20442: LD_INT 1
20444: NEG
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: PUSH
20450: LD_INT 2
20452: PUSH
20453: LD_INT 0
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: PUSH
20460: LD_INT 2
20462: PUSH
20463: LD_INT 1
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: PUSH
20470: LD_INT 2
20472: PUSH
20473: LD_INT 2
20475: PUSH
20476: EMPTY
20477: LIST
20478: LIST
20479: PUSH
20480: LD_INT 1
20482: PUSH
20483: LD_INT 2
20485: PUSH
20486: EMPTY
20487: LIST
20488: LIST
20489: PUSH
20490: LD_INT 0
20492: PUSH
20493: LD_INT 2
20495: PUSH
20496: EMPTY
20497: LIST
20498: LIST
20499: PUSH
20500: LD_INT 1
20502: NEG
20503: PUSH
20504: LD_INT 1
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: PUSH
20511: LD_INT 2
20513: NEG
20514: PUSH
20515: LD_INT 0
20517: PUSH
20518: EMPTY
20519: LIST
20520: LIST
20521: PUSH
20522: LD_INT 2
20524: NEG
20525: PUSH
20526: LD_INT 1
20528: NEG
20529: PUSH
20530: EMPTY
20531: LIST
20532: LIST
20533: PUSH
20534: LD_INT 2
20536: NEG
20537: PUSH
20538: LD_INT 2
20540: NEG
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20567: LD_ADDR_VAR 0 23
20571: PUSH
20572: LD_INT 0
20574: PUSH
20575: LD_INT 0
20577: PUSH
20578: EMPTY
20579: LIST
20580: LIST
20581: PUSH
20582: LD_INT 0
20584: PUSH
20585: LD_INT 1
20587: NEG
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: PUSH
20593: LD_INT 1
20595: PUSH
20596: LD_INT 0
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: PUSH
20603: LD_INT 1
20605: PUSH
20606: LD_INT 1
20608: PUSH
20609: EMPTY
20610: LIST
20611: LIST
20612: PUSH
20613: LD_INT 0
20615: PUSH
20616: LD_INT 1
20618: PUSH
20619: EMPTY
20620: LIST
20621: LIST
20622: PUSH
20623: LD_INT 1
20625: NEG
20626: PUSH
20627: LD_INT 0
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: PUSH
20634: LD_INT 1
20636: NEG
20637: PUSH
20638: LD_INT 1
20640: NEG
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: PUSH
20646: LD_INT 1
20648: NEG
20649: PUSH
20650: LD_INT 2
20652: NEG
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: PUSH
20658: LD_INT 0
20660: PUSH
20661: LD_INT 2
20663: NEG
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: PUSH
20669: LD_INT 1
20671: PUSH
20672: LD_INT 1
20674: NEG
20675: PUSH
20676: EMPTY
20677: LIST
20678: LIST
20679: PUSH
20680: LD_INT 2
20682: PUSH
20683: LD_INT 0
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: PUSH
20690: LD_INT 2
20692: PUSH
20693: LD_INT 1
20695: PUSH
20696: EMPTY
20697: LIST
20698: LIST
20699: PUSH
20700: LD_INT 2
20702: PUSH
20703: LD_INT 2
20705: PUSH
20706: EMPTY
20707: LIST
20708: LIST
20709: PUSH
20710: LD_INT 1
20712: PUSH
20713: LD_INT 2
20715: PUSH
20716: EMPTY
20717: LIST
20718: LIST
20719: PUSH
20720: LD_INT 0
20722: PUSH
20723: LD_INT 2
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: PUSH
20730: LD_INT 1
20732: NEG
20733: PUSH
20734: LD_INT 1
20736: PUSH
20737: EMPTY
20738: LIST
20739: LIST
20740: PUSH
20741: LD_INT 2
20743: NEG
20744: PUSH
20745: LD_INT 0
20747: PUSH
20748: EMPTY
20749: LIST
20750: LIST
20751: PUSH
20752: LD_INT 2
20754: NEG
20755: PUSH
20756: LD_INT 1
20758: NEG
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: PUSH
20764: LD_INT 2
20766: NEG
20767: PUSH
20768: LD_INT 2
20770: NEG
20771: PUSH
20772: EMPTY
20773: LIST
20774: LIST
20775: PUSH
20776: LD_INT 2
20778: NEG
20779: PUSH
20780: LD_INT 3
20782: NEG
20783: PUSH
20784: EMPTY
20785: LIST
20786: LIST
20787: PUSH
20788: LD_INT 1
20790: NEG
20791: PUSH
20792: LD_INT 3
20794: NEG
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: PUSH
20800: LD_INT 1
20802: PUSH
20803: LD_INT 2
20805: NEG
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PUSH
20811: LD_INT 2
20813: PUSH
20814: LD_INT 1
20816: NEG
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20847: LD_ADDR_VAR 0 24
20851: PUSH
20852: LD_INT 0
20854: PUSH
20855: LD_INT 0
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: PUSH
20862: LD_INT 0
20864: PUSH
20865: LD_INT 1
20867: NEG
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PUSH
20873: LD_INT 1
20875: PUSH
20876: LD_INT 0
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: LD_INT 1
20885: PUSH
20886: LD_INT 1
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PUSH
20893: LD_INT 0
20895: PUSH
20896: LD_INT 1
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: PUSH
20903: LD_INT 1
20905: NEG
20906: PUSH
20907: LD_INT 0
20909: PUSH
20910: EMPTY
20911: LIST
20912: LIST
20913: PUSH
20914: LD_INT 1
20916: NEG
20917: PUSH
20918: LD_INT 1
20920: NEG
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: PUSH
20926: LD_INT 1
20928: NEG
20929: PUSH
20930: LD_INT 2
20932: NEG
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: PUSH
20938: LD_INT 0
20940: PUSH
20941: LD_INT 2
20943: NEG
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: PUSH
20949: LD_INT 1
20951: PUSH
20952: LD_INT 1
20954: NEG
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: PUSH
20960: LD_INT 2
20962: PUSH
20963: LD_INT 0
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: PUSH
20970: LD_INT 2
20972: PUSH
20973: LD_INT 1
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: PUSH
20980: LD_INT 2
20982: PUSH
20983: LD_INT 2
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: PUSH
20990: LD_INT 1
20992: PUSH
20993: LD_INT 2
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: PUSH
21000: LD_INT 0
21002: PUSH
21003: LD_INT 2
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: PUSH
21010: LD_INT 1
21012: NEG
21013: PUSH
21014: LD_INT 1
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: PUSH
21021: LD_INT 2
21023: NEG
21024: PUSH
21025: LD_INT 0
21027: PUSH
21028: EMPTY
21029: LIST
21030: LIST
21031: PUSH
21032: LD_INT 2
21034: NEG
21035: PUSH
21036: LD_INT 1
21038: NEG
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: PUSH
21044: LD_INT 2
21046: NEG
21047: PUSH
21048: LD_INT 2
21050: NEG
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: PUSH
21056: LD_INT 1
21058: PUSH
21059: LD_INT 2
21061: NEG
21062: PUSH
21063: EMPTY
21064: LIST
21065: LIST
21066: PUSH
21067: LD_INT 2
21069: PUSH
21070: LD_INT 1
21072: NEG
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: PUSH
21078: LD_INT 3
21080: PUSH
21081: LD_INT 1
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: PUSH
21088: LD_INT 3
21090: PUSH
21091: LD_INT 2
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: PUSH
21098: EMPTY
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21123: LD_ADDR_VAR 0 25
21127: PUSH
21128: LD_INT 0
21130: PUSH
21131: LD_INT 0
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PUSH
21138: LD_INT 0
21140: PUSH
21141: LD_INT 1
21143: NEG
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: PUSH
21149: LD_INT 1
21151: PUSH
21152: LD_INT 0
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: PUSH
21159: LD_INT 1
21161: PUSH
21162: LD_INT 1
21164: PUSH
21165: EMPTY
21166: LIST
21167: LIST
21168: PUSH
21169: LD_INT 0
21171: PUSH
21172: LD_INT 1
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: PUSH
21179: LD_INT 1
21181: NEG
21182: PUSH
21183: LD_INT 0
21185: PUSH
21186: EMPTY
21187: LIST
21188: LIST
21189: PUSH
21190: LD_INT 1
21192: NEG
21193: PUSH
21194: LD_INT 1
21196: NEG
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: PUSH
21202: LD_INT 1
21204: NEG
21205: PUSH
21206: LD_INT 2
21208: NEG
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: PUSH
21214: LD_INT 0
21216: PUSH
21217: LD_INT 2
21219: NEG
21220: PUSH
21221: EMPTY
21222: LIST
21223: LIST
21224: PUSH
21225: LD_INT 1
21227: PUSH
21228: LD_INT 1
21230: NEG
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: PUSH
21236: LD_INT 2
21238: PUSH
21239: LD_INT 0
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PUSH
21246: LD_INT 2
21248: PUSH
21249: LD_INT 1
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PUSH
21256: LD_INT 2
21258: PUSH
21259: LD_INT 2
21261: PUSH
21262: EMPTY
21263: LIST
21264: LIST
21265: PUSH
21266: LD_INT 1
21268: PUSH
21269: LD_INT 2
21271: PUSH
21272: EMPTY
21273: LIST
21274: LIST
21275: PUSH
21276: LD_INT 0
21278: PUSH
21279: LD_INT 2
21281: PUSH
21282: EMPTY
21283: LIST
21284: LIST
21285: PUSH
21286: LD_INT 1
21288: NEG
21289: PUSH
21290: LD_INT 1
21292: PUSH
21293: EMPTY
21294: LIST
21295: LIST
21296: PUSH
21297: LD_INT 2
21299: NEG
21300: PUSH
21301: LD_INT 0
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: PUSH
21308: LD_INT 2
21310: NEG
21311: PUSH
21312: LD_INT 1
21314: NEG
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PUSH
21320: LD_INT 2
21322: NEG
21323: PUSH
21324: LD_INT 2
21326: NEG
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: PUSH
21332: LD_INT 3
21334: PUSH
21335: LD_INT 1
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: PUSH
21342: LD_INT 3
21344: PUSH
21345: LD_INT 2
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: PUSH
21352: LD_INT 2
21354: PUSH
21355: LD_INT 3
21357: PUSH
21358: EMPTY
21359: LIST
21360: LIST
21361: PUSH
21362: LD_INT 1
21364: PUSH
21365: LD_INT 3
21367: PUSH
21368: EMPTY
21369: LIST
21370: LIST
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21397: LD_ADDR_VAR 0 26
21401: PUSH
21402: LD_INT 0
21404: PUSH
21405: LD_INT 0
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: PUSH
21412: LD_INT 0
21414: PUSH
21415: LD_INT 1
21417: NEG
21418: PUSH
21419: EMPTY
21420: LIST
21421: LIST
21422: PUSH
21423: LD_INT 1
21425: PUSH
21426: LD_INT 0
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PUSH
21433: LD_INT 1
21435: PUSH
21436: LD_INT 1
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: PUSH
21443: LD_INT 0
21445: PUSH
21446: LD_INT 1
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: PUSH
21453: LD_INT 1
21455: NEG
21456: PUSH
21457: LD_INT 0
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PUSH
21464: LD_INT 1
21466: NEG
21467: PUSH
21468: LD_INT 1
21470: NEG
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: PUSH
21476: LD_INT 1
21478: NEG
21479: PUSH
21480: LD_INT 2
21482: NEG
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: PUSH
21488: LD_INT 0
21490: PUSH
21491: LD_INT 2
21493: NEG
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: PUSH
21499: LD_INT 1
21501: PUSH
21502: LD_INT 1
21504: NEG
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PUSH
21510: LD_INT 2
21512: PUSH
21513: LD_INT 0
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: PUSH
21520: LD_INT 2
21522: PUSH
21523: LD_INT 1
21525: PUSH
21526: EMPTY
21527: LIST
21528: LIST
21529: PUSH
21530: LD_INT 2
21532: PUSH
21533: LD_INT 2
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: PUSH
21540: LD_INT 1
21542: PUSH
21543: LD_INT 2
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: PUSH
21550: LD_INT 0
21552: PUSH
21553: LD_INT 2
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: PUSH
21560: LD_INT 1
21562: NEG
21563: PUSH
21564: LD_INT 1
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: PUSH
21571: LD_INT 2
21573: NEG
21574: PUSH
21575: LD_INT 0
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: PUSH
21582: LD_INT 2
21584: NEG
21585: PUSH
21586: LD_INT 1
21588: NEG
21589: PUSH
21590: EMPTY
21591: LIST
21592: LIST
21593: PUSH
21594: LD_INT 2
21596: NEG
21597: PUSH
21598: LD_INT 2
21600: NEG
21601: PUSH
21602: EMPTY
21603: LIST
21604: LIST
21605: PUSH
21606: LD_INT 2
21608: PUSH
21609: LD_INT 3
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: PUSH
21616: LD_INT 1
21618: PUSH
21619: LD_INT 3
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: PUSH
21626: LD_INT 1
21628: NEG
21629: PUSH
21630: LD_INT 2
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: PUSH
21637: LD_INT 2
21639: NEG
21640: PUSH
21641: LD_INT 1
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21673: LD_ADDR_VAR 0 27
21677: PUSH
21678: LD_INT 0
21680: PUSH
21681: LD_INT 0
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: PUSH
21688: LD_INT 0
21690: PUSH
21691: LD_INT 1
21693: NEG
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: PUSH
21699: LD_INT 1
21701: PUSH
21702: LD_INT 0
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: LD_INT 1
21711: PUSH
21712: LD_INT 1
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PUSH
21719: LD_INT 0
21721: PUSH
21722: LD_INT 1
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: PUSH
21729: LD_INT 1
21731: NEG
21732: PUSH
21733: LD_INT 0
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: PUSH
21740: LD_INT 1
21742: NEG
21743: PUSH
21744: LD_INT 1
21746: NEG
21747: PUSH
21748: EMPTY
21749: LIST
21750: LIST
21751: PUSH
21752: LD_INT 1
21754: NEG
21755: PUSH
21756: LD_INT 2
21758: NEG
21759: PUSH
21760: EMPTY
21761: LIST
21762: LIST
21763: PUSH
21764: LD_INT 0
21766: PUSH
21767: LD_INT 2
21769: NEG
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: PUSH
21775: LD_INT 1
21777: PUSH
21778: LD_INT 1
21780: NEG
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: PUSH
21786: LD_INT 2
21788: PUSH
21789: LD_INT 0
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: PUSH
21796: LD_INT 2
21798: PUSH
21799: LD_INT 1
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: PUSH
21806: LD_INT 2
21808: PUSH
21809: LD_INT 2
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: PUSH
21816: LD_INT 1
21818: PUSH
21819: LD_INT 2
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: PUSH
21826: LD_INT 0
21828: PUSH
21829: LD_INT 2
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PUSH
21836: LD_INT 1
21838: NEG
21839: PUSH
21840: LD_INT 1
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: PUSH
21847: LD_INT 2
21849: NEG
21850: PUSH
21851: LD_INT 0
21853: PUSH
21854: EMPTY
21855: LIST
21856: LIST
21857: PUSH
21858: LD_INT 2
21860: NEG
21861: PUSH
21862: LD_INT 1
21864: NEG
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: PUSH
21870: LD_INT 2
21872: NEG
21873: PUSH
21874: LD_INT 2
21876: NEG
21877: PUSH
21878: EMPTY
21879: LIST
21880: LIST
21881: PUSH
21882: LD_INT 1
21884: NEG
21885: PUSH
21886: LD_INT 2
21888: PUSH
21889: EMPTY
21890: LIST
21891: LIST
21892: PUSH
21893: LD_INT 2
21895: NEG
21896: PUSH
21897: LD_INT 1
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: PUSH
21904: LD_INT 3
21906: NEG
21907: PUSH
21908: LD_INT 1
21910: NEG
21911: PUSH
21912: EMPTY
21913: LIST
21914: LIST
21915: PUSH
21916: LD_INT 3
21918: NEG
21919: PUSH
21920: LD_INT 2
21922: NEG
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: PUSH
21928: EMPTY
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21953: LD_ADDR_VAR 0 28
21957: PUSH
21958: LD_INT 0
21960: PUSH
21961: LD_INT 0
21963: PUSH
21964: EMPTY
21965: LIST
21966: LIST
21967: PUSH
21968: LD_INT 0
21970: PUSH
21971: LD_INT 1
21973: NEG
21974: PUSH
21975: EMPTY
21976: LIST
21977: LIST
21978: PUSH
21979: LD_INT 1
21981: PUSH
21982: LD_INT 0
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: PUSH
21989: LD_INT 1
21991: PUSH
21992: LD_INT 1
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: PUSH
21999: LD_INT 0
22001: PUSH
22002: LD_INT 1
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: PUSH
22009: LD_INT 1
22011: NEG
22012: PUSH
22013: LD_INT 0
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: PUSH
22020: LD_INT 1
22022: NEG
22023: PUSH
22024: LD_INT 1
22026: NEG
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: PUSH
22032: LD_INT 1
22034: NEG
22035: PUSH
22036: LD_INT 2
22038: NEG
22039: PUSH
22040: EMPTY
22041: LIST
22042: LIST
22043: PUSH
22044: LD_INT 0
22046: PUSH
22047: LD_INT 2
22049: NEG
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: PUSH
22055: LD_INT 1
22057: PUSH
22058: LD_INT 1
22060: NEG
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: PUSH
22066: LD_INT 2
22068: PUSH
22069: LD_INT 0
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: PUSH
22076: LD_INT 2
22078: PUSH
22079: LD_INT 1
22081: PUSH
22082: EMPTY
22083: LIST
22084: LIST
22085: PUSH
22086: LD_INT 2
22088: PUSH
22089: LD_INT 2
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: PUSH
22096: LD_INT 1
22098: PUSH
22099: LD_INT 2
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: PUSH
22106: LD_INT 0
22108: PUSH
22109: LD_INT 2
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: PUSH
22116: LD_INT 1
22118: NEG
22119: PUSH
22120: LD_INT 1
22122: PUSH
22123: EMPTY
22124: LIST
22125: LIST
22126: PUSH
22127: LD_INT 2
22129: NEG
22130: PUSH
22131: LD_INT 0
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: PUSH
22138: LD_INT 2
22140: NEG
22141: PUSH
22142: LD_INT 1
22144: NEG
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: PUSH
22150: LD_INT 2
22152: NEG
22153: PUSH
22154: LD_INT 2
22156: NEG
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: PUSH
22162: LD_INT 2
22164: NEG
22165: PUSH
22166: LD_INT 3
22168: NEG
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: PUSH
22174: LD_INT 1
22176: NEG
22177: PUSH
22178: LD_INT 3
22180: NEG
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: PUSH
22186: LD_INT 3
22188: NEG
22189: PUSH
22190: LD_INT 1
22192: NEG
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: PUSH
22198: LD_INT 3
22200: NEG
22201: PUSH
22202: LD_INT 2
22204: NEG
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22235: LD_ADDR_VAR 0 29
22239: PUSH
22240: LD_INT 0
22242: PUSH
22243: LD_INT 0
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: PUSH
22250: LD_INT 0
22252: PUSH
22253: LD_INT 1
22255: NEG
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: PUSH
22261: LD_INT 1
22263: PUSH
22264: LD_INT 0
22266: PUSH
22267: EMPTY
22268: LIST
22269: LIST
22270: PUSH
22271: LD_INT 1
22273: PUSH
22274: LD_INT 1
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: PUSH
22281: LD_INT 0
22283: PUSH
22284: LD_INT 1
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: PUSH
22291: LD_INT 1
22293: NEG
22294: PUSH
22295: LD_INT 0
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PUSH
22302: LD_INT 1
22304: NEG
22305: PUSH
22306: LD_INT 1
22308: NEG
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PUSH
22314: LD_INT 1
22316: NEG
22317: PUSH
22318: LD_INT 2
22320: NEG
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PUSH
22326: LD_INT 0
22328: PUSH
22329: LD_INT 2
22331: NEG
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: PUSH
22337: LD_INT 1
22339: PUSH
22340: LD_INT 1
22342: NEG
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: PUSH
22348: LD_INT 2
22350: PUSH
22351: LD_INT 0
22353: PUSH
22354: EMPTY
22355: LIST
22356: LIST
22357: PUSH
22358: LD_INT 2
22360: PUSH
22361: LD_INT 1
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: PUSH
22368: LD_INT 1
22370: PUSH
22371: LD_INT 2
22373: PUSH
22374: EMPTY
22375: LIST
22376: LIST
22377: PUSH
22378: LD_INT 0
22380: PUSH
22381: LD_INT 2
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: PUSH
22388: LD_INT 1
22390: NEG
22391: PUSH
22392: LD_INT 1
22394: PUSH
22395: EMPTY
22396: LIST
22397: LIST
22398: PUSH
22399: LD_INT 2
22401: NEG
22402: PUSH
22403: LD_INT 1
22405: NEG
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: PUSH
22411: LD_INT 2
22413: NEG
22414: PUSH
22415: LD_INT 2
22417: NEG
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: PUSH
22423: LD_INT 2
22425: NEG
22426: PUSH
22427: LD_INT 3
22429: NEG
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PUSH
22435: LD_INT 2
22437: PUSH
22438: LD_INT 1
22440: NEG
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PUSH
22446: LD_INT 3
22448: PUSH
22449: LD_INT 1
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: PUSH
22456: LD_INT 1
22458: PUSH
22459: LD_INT 3
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PUSH
22466: LD_INT 1
22468: NEG
22469: PUSH
22470: LD_INT 2
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: PUSH
22477: LD_INT 3
22479: NEG
22480: PUSH
22481: LD_INT 2
22483: NEG
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: PUSH
22489: EMPTY
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22514: LD_ADDR_VAR 0 30
22518: PUSH
22519: LD_INT 0
22521: PUSH
22522: LD_INT 0
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: PUSH
22529: LD_INT 0
22531: PUSH
22532: LD_INT 1
22534: NEG
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: PUSH
22540: LD_INT 1
22542: PUSH
22543: LD_INT 0
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 1
22552: PUSH
22553: LD_INT 1
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: LD_INT 0
22562: PUSH
22563: LD_INT 1
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: PUSH
22570: LD_INT 1
22572: NEG
22573: PUSH
22574: LD_INT 0
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: PUSH
22581: LD_INT 1
22583: NEG
22584: PUSH
22585: LD_INT 1
22587: NEG
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: PUSH
22593: LD_INT 1
22595: NEG
22596: PUSH
22597: LD_INT 2
22599: NEG
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: PUSH
22605: LD_INT 0
22607: PUSH
22608: LD_INT 2
22610: NEG
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PUSH
22616: LD_INT 1
22618: PUSH
22619: LD_INT 1
22621: NEG
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: PUSH
22627: LD_INT 2
22629: PUSH
22630: LD_INT 0
22632: PUSH
22633: EMPTY
22634: LIST
22635: LIST
22636: PUSH
22637: LD_INT 2
22639: PUSH
22640: LD_INT 1
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: PUSH
22647: LD_INT 2
22649: PUSH
22650: LD_INT 2
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: PUSH
22657: LD_INT 1
22659: PUSH
22660: LD_INT 2
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: PUSH
22667: LD_INT 1
22669: NEG
22670: PUSH
22671: LD_INT 1
22673: PUSH
22674: EMPTY
22675: LIST
22676: LIST
22677: PUSH
22678: LD_INT 2
22680: NEG
22681: PUSH
22682: LD_INT 0
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: PUSH
22689: LD_INT 2
22691: NEG
22692: PUSH
22693: LD_INT 1
22695: NEG
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: PUSH
22701: LD_INT 1
22703: NEG
22704: PUSH
22705: LD_INT 3
22707: NEG
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: PUSH
22713: LD_INT 1
22715: PUSH
22716: LD_INT 2
22718: NEG
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: PUSH
22724: LD_INT 3
22726: PUSH
22727: LD_INT 2
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: PUSH
22734: LD_INT 2
22736: PUSH
22737: LD_INT 3
22739: PUSH
22740: EMPTY
22741: LIST
22742: LIST
22743: PUSH
22744: LD_INT 2
22746: NEG
22747: PUSH
22748: LD_INT 1
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: PUSH
22755: LD_INT 3
22757: NEG
22758: PUSH
22759: LD_INT 1
22761: NEG
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: PUSH
22767: EMPTY
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22792: LD_ADDR_VAR 0 31
22796: PUSH
22797: LD_INT 0
22799: PUSH
22800: LD_INT 0
22802: PUSH
22803: EMPTY
22804: LIST
22805: LIST
22806: PUSH
22807: LD_INT 0
22809: PUSH
22810: LD_INT 1
22812: NEG
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PUSH
22818: LD_INT 1
22820: PUSH
22821: LD_INT 0
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PUSH
22828: LD_INT 1
22830: PUSH
22831: LD_INT 1
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PUSH
22838: LD_INT 0
22840: PUSH
22841: LD_INT 1
22843: PUSH
22844: EMPTY
22845: LIST
22846: LIST
22847: PUSH
22848: LD_INT 1
22850: NEG
22851: PUSH
22852: LD_INT 0
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: PUSH
22859: LD_INT 1
22861: NEG
22862: PUSH
22863: LD_INT 1
22865: NEG
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: PUSH
22871: LD_INT 1
22873: NEG
22874: PUSH
22875: LD_INT 2
22877: NEG
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: PUSH
22883: LD_INT 1
22885: PUSH
22886: LD_INT 1
22888: NEG
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: PUSH
22894: LD_INT 2
22896: PUSH
22897: LD_INT 0
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: PUSH
22904: LD_INT 2
22906: PUSH
22907: LD_INT 1
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: PUSH
22914: LD_INT 2
22916: PUSH
22917: LD_INT 2
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: LD_INT 1
22926: PUSH
22927: LD_INT 2
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: PUSH
22934: LD_INT 0
22936: PUSH
22937: LD_INT 2
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 1
22946: NEG
22947: PUSH
22948: LD_INT 1
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: PUSH
22955: LD_INT 2
22957: NEG
22958: PUSH
22959: LD_INT 1
22961: NEG
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: PUSH
22967: LD_INT 2
22969: NEG
22970: PUSH
22971: LD_INT 2
22973: NEG
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: LD_INT 2
22981: NEG
22982: PUSH
22983: LD_INT 3
22985: NEG
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: PUSH
22991: LD_INT 2
22993: PUSH
22994: LD_INT 1
22996: NEG
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: PUSH
23002: LD_INT 3
23004: PUSH
23005: LD_INT 1
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: PUSH
23012: LD_INT 1
23014: PUSH
23015: LD_INT 3
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: PUSH
23022: LD_INT 1
23024: NEG
23025: PUSH
23026: LD_INT 2
23028: PUSH
23029: EMPTY
23030: LIST
23031: LIST
23032: PUSH
23033: LD_INT 3
23035: NEG
23036: PUSH
23037: LD_INT 2
23039: NEG
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23070: LD_ADDR_VAR 0 32
23074: PUSH
23075: LD_INT 0
23077: PUSH
23078: LD_INT 0
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: PUSH
23085: LD_INT 0
23087: PUSH
23088: LD_INT 1
23090: NEG
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: PUSH
23096: LD_INT 1
23098: PUSH
23099: LD_INT 0
23101: PUSH
23102: EMPTY
23103: LIST
23104: LIST
23105: PUSH
23106: LD_INT 1
23108: PUSH
23109: LD_INT 1
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: PUSH
23116: LD_INT 0
23118: PUSH
23119: LD_INT 1
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: PUSH
23126: LD_INT 1
23128: NEG
23129: PUSH
23130: LD_INT 0
23132: PUSH
23133: EMPTY
23134: LIST
23135: LIST
23136: PUSH
23137: LD_INT 1
23139: NEG
23140: PUSH
23141: LD_INT 1
23143: NEG
23144: PUSH
23145: EMPTY
23146: LIST
23147: LIST
23148: PUSH
23149: LD_INT 1
23151: NEG
23152: PUSH
23153: LD_INT 2
23155: NEG
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: PUSH
23161: LD_INT 0
23163: PUSH
23164: LD_INT 2
23166: NEG
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: PUSH
23172: LD_INT 1
23174: PUSH
23175: LD_INT 1
23177: NEG
23178: PUSH
23179: EMPTY
23180: LIST
23181: LIST
23182: PUSH
23183: LD_INT 2
23185: PUSH
23186: LD_INT 1
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: PUSH
23193: LD_INT 2
23195: PUSH
23196: LD_INT 2
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: PUSH
23203: LD_INT 1
23205: PUSH
23206: LD_INT 2
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: PUSH
23213: LD_INT 0
23215: PUSH
23216: LD_INT 2
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PUSH
23223: LD_INT 1
23225: NEG
23226: PUSH
23227: LD_INT 1
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: PUSH
23234: LD_INT 2
23236: NEG
23237: PUSH
23238: LD_INT 0
23240: PUSH
23241: EMPTY
23242: LIST
23243: LIST
23244: PUSH
23245: LD_INT 2
23247: NEG
23248: PUSH
23249: LD_INT 1
23251: NEG
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: PUSH
23257: LD_INT 1
23259: NEG
23260: PUSH
23261: LD_INT 3
23263: NEG
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: PUSH
23269: LD_INT 1
23271: PUSH
23272: LD_INT 2
23274: NEG
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: PUSH
23280: LD_INT 3
23282: PUSH
23283: LD_INT 2
23285: PUSH
23286: EMPTY
23287: LIST
23288: LIST
23289: PUSH
23290: LD_INT 2
23292: PUSH
23293: LD_INT 3
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: PUSH
23300: LD_INT 2
23302: NEG
23303: PUSH
23304: LD_INT 1
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: PUSH
23311: LD_INT 3
23313: NEG
23314: PUSH
23315: LD_INT 1
23317: NEG
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23348: LD_ADDR_VAR 0 33
23352: PUSH
23353: LD_INT 0
23355: PUSH
23356: LD_INT 0
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: PUSH
23363: LD_INT 0
23365: PUSH
23366: LD_INT 1
23368: NEG
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: PUSH
23374: LD_INT 1
23376: PUSH
23377: LD_INT 0
23379: PUSH
23380: EMPTY
23381: LIST
23382: LIST
23383: PUSH
23384: LD_INT 1
23386: PUSH
23387: LD_INT 1
23389: PUSH
23390: EMPTY
23391: LIST
23392: LIST
23393: PUSH
23394: LD_INT 0
23396: PUSH
23397: LD_INT 1
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: PUSH
23404: LD_INT 1
23406: NEG
23407: PUSH
23408: LD_INT 0
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: PUSH
23415: LD_INT 1
23417: NEG
23418: PUSH
23419: LD_INT 1
23421: NEG
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: PUSH
23427: LD_INT 1
23429: NEG
23430: PUSH
23431: LD_INT 2
23433: NEG
23434: PUSH
23435: EMPTY
23436: LIST
23437: LIST
23438: PUSH
23439: LD_INT 1
23441: PUSH
23442: LD_INT 1
23444: NEG
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: PUSH
23450: LD_INT 2
23452: PUSH
23453: LD_INT 0
23455: PUSH
23456: EMPTY
23457: LIST
23458: LIST
23459: PUSH
23460: LD_INT 2
23462: PUSH
23463: LD_INT 1
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: PUSH
23470: LD_INT 1
23472: PUSH
23473: LD_INT 2
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: PUSH
23480: LD_INT 0
23482: PUSH
23483: LD_INT 2
23485: PUSH
23486: EMPTY
23487: LIST
23488: LIST
23489: PUSH
23490: LD_INT 1
23492: NEG
23493: PUSH
23494: LD_INT 1
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: PUSH
23501: LD_INT 2
23503: NEG
23504: PUSH
23505: LD_INT 0
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: PUSH
23512: LD_INT 2
23514: NEG
23515: PUSH
23516: LD_INT 1
23518: NEG
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: PUSH
23524: LD_INT 2
23526: NEG
23527: PUSH
23528: LD_INT 2
23530: NEG
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: PUSH
23536: LD_INT 2
23538: NEG
23539: PUSH
23540: LD_INT 3
23542: NEG
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: PUSH
23548: LD_INT 2
23550: PUSH
23551: LD_INT 1
23553: NEG
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: PUSH
23559: LD_INT 3
23561: PUSH
23562: LD_INT 1
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: PUSH
23569: LD_INT 1
23571: PUSH
23572: LD_INT 3
23574: PUSH
23575: EMPTY
23576: LIST
23577: LIST
23578: PUSH
23579: LD_INT 1
23581: NEG
23582: PUSH
23583: LD_INT 2
23585: PUSH
23586: EMPTY
23587: LIST
23588: LIST
23589: PUSH
23590: LD_INT 3
23592: NEG
23593: PUSH
23594: LD_INT 2
23596: NEG
23597: PUSH
23598: EMPTY
23599: LIST
23600: LIST
23601: PUSH
23602: EMPTY
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23627: LD_ADDR_VAR 0 34
23631: PUSH
23632: LD_INT 0
23634: PUSH
23635: LD_INT 0
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: PUSH
23642: LD_INT 0
23644: PUSH
23645: LD_INT 1
23647: NEG
23648: PUSH
23649: EMPTY
23650: LIST
23651: LIST
23652: PUSH
23653: LD_INT 1
23655: PUSH
23656: LD_INT 0
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: PUSH
23663: LD_INT 1
23665: PUSH
23666: LD_INT 1
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: PUSH
23673: LD_INT 0
23675: PUSH
23676: LD_INT 1
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: PUSH
23683: LD_INT 1
23685: NEG
23686: PUSH
23687: LD_INT 0
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: PUSH
23694: LD_INT 1
23696: NEG
23697: PUSH
23698: LD_INT 1
23700: NEG
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 1
23708: NEG
23709: PUSH
23710: LD_INT 2
23712: NEG
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PUSH
23718: LD_INT 0
23720: PUSH
23721: LD_INT 2
23723: NEG
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PUSH
23729: LD_INT 1
23731: PUSH
23732: LD_INT 1
23734: NEG
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: PUSH
23740: LD_INT 2
23742: PUSH
23743: LD_INT 1
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: PUSH
23750: LD_INT 2
23752: PUSH
23753: LD_INT 2
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: PUSH
23760: LD_INT 1
23762: PUSH
23763: LD_INT 2
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: PUSH
23770: LD_INT 1
23772: NEG
23773: PUSH
23774: LD_INT 1
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: PUSH
23781: LD_INT 2
23783: NEG
23784: PUSH
23785: LD_INT 0
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PUSH
23792: LD_INT 2
23794: NEG
23795: PUSH
23796: LD_INT 1
23798: NEG
23799: PUSH
23800: EMPTY
23801: LIST
23802: LIST
23803: PUSH
23804: LD_INT 2
23806: NEG
23807: PUSH
23808: LD_INT 2
23810: NEG
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: PUSH
23816: LD_INT 1
23818: NEG
23819: PUSH
23820: LD_INT 3
23822: NEG
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PUSH
23828: LD_INT 1
23830: PUSH
23831: LD_INT 2
23833: NEG
23834: PUSH
23835: EMPTY
23836: LIST
23837: LIST
23838: PUSH
23839: LD_INT 3
23841: PUSH
23842: LD_INT 2
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: PUSH
23849: LD_INT 2
23851: PUSH
23852: LD_INT 3
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PUSH
23859: LD_INT 2
23861: NEG
23862: PUSH
23863: LD_INT 1
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: PUSH
23870: LD_INT 3
23872: NEG
23873: PUSH
23874: LD_INT 1
23876: NEG
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23907: LD_ADDR_VAR 0 35
23911: PUSH
23912: LD_INT 0
23914: PUSH
23915: LD_INT 0
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PUSH
23922: LD_INT 0
23924: PUSH
23925: LD_INT 1
23927: NEG
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: PUSH
23933: LD_INT 1
23935: PUSH
23936: LD_INT 0
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: PUSH
23943: LD_INT 1
23945: PUSH
23946: LD_INT 1
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: LD_INT 0
23955: PUSH
23956: LD_INT 1
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: PUSH
23963: LD_INT 1
23965: NEG
23966: PUSH
23967: LD_INT 0
23969: PUSH
23970: EMPTY
23971: LIST
23972: LIST
23973: PUSH
23974: LD_INT 1
23976: NEG
23977: PUSH
23978: LD_INT 1
23980: NEG
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: PUSH
23986: LD_INT 2
23988: PUSH
23989: LD_INT 1
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: PUSH
23996: LD_INT 2
23998: NEG
23999: PUSH
24000: LD_INT 1
24002: NEG
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: PUSH
24008: EMPTY
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24019: LD_ADDR_VAR 0 36
24023: PUSH
24024: LD_INT 0
24026: PUSH
24027: LD_INT 0
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: PUSH
24034: LD_INT 0
24036: PUSH
24037: LD_INT 1
24039: NEG
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PUSH
24045: LD_INT 1
24047: PUSH
24048: LD_INT 0
24050: PUSH
24051: EMPTY
24052: LIST
24053: LIST
24054: PUSH
24055: LD_INT 1
24057: PUSH
24058: LD_INT 1
24060: PUSH
24061: EMPTY
24062: LIST
24063: LIST
24064: PUSH
24065: LD_INT 0
24067: PUSH
24068: LD_INT 1
24070: PUSH
24071: EMPTY
24072: LIST
24073: LIST
24074: PUSH
24075: LD_INT 1
24077: NEG
24078: PUSH
24079: LD_INT 0
24081: PUSH
24082: EMPTY
24083: LIST
24084: LIST
24085: PUSH
24086: LD_INT 1
24088: NEG
24089: PUSH
24090: LD_INT 1
24092: NEG
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: PUSH
24098: LD_INT 1
24100: NEG
24101: PUSH
24102: LD_INT 2
24104: NEG
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: PUSH
24110: LD_INT 1
24112: PUSH
24113: LD_INT 2
24115: PUSH
24116: EMPTY
24117: LIST
24118: LIST
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24131: LD_ADDR_VAR 0 37
24135: PUSH
24136: LD_INT 0
24138: PUSH
24139: LD_INT 0
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: PUSH
24146: LD_INT 0
24148: PUSH
24149: LD_INT 1
24151: NEG
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: PUSH
24157: LD_INT 1
24159: PUSH
24160: LD_INT 0
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: PUSH
24167: LD_INT 1
24169: PUSH
24170: LD_INT 1
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: PUSH
24177: LD_INT 0
24179: PUSH
24180: LD_INT 1
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: PUSH
24187: LD_INT 1
24189: NEG
24190: PUSH
24191: LD_INT 0
24193: PUSH
24194: EMPTY
24195: LIST
24196: LIST
24197: PUSH
24198: LD_INT 1
24200: NEG
24201: PUSH
24202: LD_INT 1
24204: NEG
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: PUSH
24210: LD_INT 1
24212: PUSH
24213: LD_INT 1
24215: NEG
24216: PUSH
24217: EMPTY
24218: LIST
24219: LIST
24220: PUSH
24221: LD_INT 1
24223: NEG
24224: PUSH
24225: LD_INT 1
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: PUSH
24232: EMPTY
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24243: LD_ADDR_VAR 0 38
24247: PUSH
24248: LD_INT 0
24250: PUSH
24251: LD_INT 0
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: PUSH
24258: LD_INT 0
24260: PUSH
24261: LD_INT 1
24263: NEG
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: PUSH
24269: LD_INT 1
24271: PUSH
24272: LD_INT 0
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PUSH
24279: LD_INT 1
24281: PUSH
24282: LD_INT 1
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: PUSH
24289: LD_INT 0
24291: PUSH
24292: LD_INT 1
24294: PUSH
24295: EMPTY
24296: LIST
24297: LIST
24298: PUSH
24299: LD_INT 1
24301: NEG
24302: PUSH
24303: LD_INT 0
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: PUSH
24310: LD_INT 1
24312: NEG
24313: PUSH
24314: LD_INT 1
24316: NEG
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: PUSH
24322: LD_INT 2
24324: PUSH
24325: LD_INT 1
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: PUSH
24332: LD_INT 2
24334: NEG
24335: PUSH
24336: LD_INT 1
24338: NEG
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: PUSH
24344: EMPTY
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24355: LD_ADDR_VAR 0 39
24359: PUSH
24360: LD_INT 0
24362: PUSH
24363: LD_INT 0
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: PUSH
24370: LD_INT 0
24372: PUSH
24373: LD_INT 1
24375: NEG
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: PUSH
24381: LD_INT 1
24383: PUSH
24384: LD_INT 0
24386: PUSH
24387: EMPTY
24388: LIST
24389: LIST
24390: PUSH
24391: LD_INT 1
24393: PUSH
24394: LD_INT 1
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: PUSH
24401: LD_INT 0
24403: PUSH
24404: LD_INT 1
24406: PUSH
24407: EMPTY
24408: LIST
24409: LIST
24410: PUSH
24411: LD_INT 1
24413: NEG
24414: PUSH
24415: LD_INT 0
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: PUSH
24422: LD_INT 1
24424: NEG
24425: PUSH
24426: LD_INT 1
24428: NEG
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: PUSH
24434: LD_INT 1
24436: NEG
24437: PUSH
24438: LD_INT 2
24440: NEG
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: PUSH
24446: LD_INT 1
24448: PUSH
24449: LD_INT 2
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: PUSH
24456: EMPTY
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24467: LD_ADDR_VAR 0 40
24471: PUSH
24472: LD_INT 0
24474: PUSH
24475: LD_INT 0
24477: PUSH
24478: EMPTY
24479: LIST
24480: LIST
24481: PUSH
24482: LD_INT 0
24484: PUSH
24485: LD_INT 1
24487: NEG
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PUSH
24493: LD_INT 1
24495: PUSH
24496: LD_INT 0
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: PUSH
24503: LD_INT 1
24505: PUSH
24506: LD_INT 1
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: PUSH
24513: LD_INT 0
24515: PUSH
24516: LD_INT 1
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: PUSH
24523: LD_INT 1
24525: NEG
24526: PUSH
24527: LD_INT 0
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: PUSH
24534: LD_INT 1
24536: NEG
24537: PUSH
24538: LD_INT 1
24540: NEG
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: PUSH
24546: LD_INT 1
24548: PUSH
24549: LD_INT 1
24551: NEG
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: PUSH
24557: LD_INT 1
24559: NEG
24560: PUSH
24561: LD_INT 1
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PUSH
24568: EMPTY
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24579: LD_ADDR_VAR 0 41
24583: PUSH
24584: LD_INT 0
24586: PUSH
24587: LD_INT 0
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: PUSH
24594: LD_INT 0
24596: PUSH
24597: LD_INT 1
24599: NEG
24600: PUSH
24601: EMPTY
24602: LIST
24603: LIST
24604: PUSH
24605: LD_INT 1
24607: PUSH
24608: LD_INT 0
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: PUSH
24615: LD_INT 1
24617: PUSH
24618: LD_INT 1
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: PUSH
24625: LD_INT 0
24627: PUSH
24628: LD_INT 1
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: PUSH
24635: LD_INT 1
24637: NEG
24638: PUSH
24639: LD_INT 0
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PUSH
24646: LD_INT 1
24648: NEG
24649: PUSH
24650: LD_INT 1
24652: NEG
24653: PUSH
24654: EMPTY
24655: LIST
24656: LIST
24657: PUSH
24658: LD_INT 1
24660: NEG
24661: PUSH
24662: LD_INT 2
24664: NEG
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: PUSH
24670: LD_INT 1
24672: PUSH
24673: LD_INT 1
24675: NEG
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PUSH
24681: LD_INT 2
24683: PUSH
24684: LD_INT 0
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: PUSH
24691: LD_INT 2
24693: PUSH
24694: LD_INT 1
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: PUSH
24701: LD_INT 2
24703: PUSH
24704: LD_INT 2
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: LD_INT 1
24713: PUSH
24714: LD_INT 2
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: LD_INT 1
24723: NEG
24724: PUSH
24725: LD_INT 1
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: PUSH
24732: LD_INT 2
24734: NEG
24735: PUSH
24736: LD_INT 0
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PUSH
24743: LD_INT 2
24745: NEG
24746: PUSH
24747: LD_INT 1
24749: NEG
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: PUSH
24755: LD_INT 2
24757: NEG
24758: PUSH
24759: LD_INT 2
24761: NEG
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PUSH
24767: LD_INT 2
24769: NEG
24770: PUSH
24771: LD_INT 3
24773: NEG
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: PUSH
24779: LD_INT 2
24781: PUSH
24782: LD_INT 1
24784: NEG
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: PUSH
24790: LD_INT 3
24792: PUSH
24793: LD_INT 0
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: PUSH
24800: LD_INT 3
24802: PUSH
24803: LD_INT 1
24805: PUSH
24806: EMPTY
24807: LIST
24808: LIST
24809: PUSH
24810: LD_INT 3
24812: PUSH
24813: LD_INT 2
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: PUSH
24820: LD_INT 3
24822: PUSH
24823: LD_INT 3
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PUSH
24830: LD_INT 2
24832: PUSH
24833: LD_INT 3
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 2
24842: NEG
24843: PUSH
24844: LD_INT 1
24846: PUSH
24847: EMPTY
24848: LIST
24849: LIST
24850: PUSH
24851: LD_INT 3
24853: NEG
24854: PUSH
24855: LD_INT 0
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: PUSH
24862: LD_INT 3
24864: NEG
24865: PUSH
24866: LD_INT 1
24868: NEG
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: PUSH
24874: LD_INT 3
24876: NEG
24877: PUSH
24878: LD_INT 2
24880: NEG
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: PUSH
24886: LD_INT 3
24888: NEG
24889: PUSH
24890: LD_INT 3
24892: NEG
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24929: LD_ADDR_VAR 0 42
24933: PUSH
24934: LD_INT 0
24936: PUSH
24937: LD_INT 0
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: PUSH
24944: LD_INT 0
24946: PUSH
24947: LD_INT 1
24949: NEG
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: PUSH
24955: LD_INT 1
24957: PUSH
24958: LD_INT 0
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: PUSH
24965: LD_INT 1
24967: PUSH
24968: LD_INT 1
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: PUSH
24975: LD_INT 0
24977: PUSH
24978: LD_INT 1
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: PUSH
24985: LD_INT 1
24987: NEG
24988: PUSH
24989: LD_INT 0
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: PUSH
24996: LD_INT 1
24998: NEG
24999: PUSH
25000: LD_INT 1
25002: NEG
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: PUSH
25008: LD_INT 1
25010: NEG
25011: PUSH
25012: LD_INT 2
25014: NEG
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: LD_INT 0
25022: PUSH
25023: LD_INT 2
25025: NEG
25026: PUSH
25027: EMPTY
25028: LIST
25029: LIST
25030: PUSH
25031: LD_INT 1
25033: PUSH
25034: LD_INT 1
25036: NEG
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PUSH
25042: LD_INT 2
25044: PUSH
25045: LD_INT 1
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: LD_INT 2
25054: PUSH
25055: LD_INT 2
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: LD_INT 1
25064: PUSH
25065: LD_INT 2
25067: PUSH
25068: EMPTY
25069: LIST
25070: LIST
25071: PUSH
25072: LD_INT 0
25074: PUSH
25075: LD_INT 2
25077: PUSH
25078: EMPTY
25079: LIST
25080: LIST
25081: PUSH
25082: LD_INT 1
25084: NEG
25085: PUSH
25086: LD_INT 1
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PUSH
25093: LD_INT 2
25095: NEG
25096: PUSH
25097: LD_INT 1
25099: NEG
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: LD_INT 2
25107: NEG
25108: PUSH
25109: LD_INT 2
25111: NEG
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PUSH
25117: LD_INT 2
25119: NEG
25120: PUSH
25121: LD_INT 3
25123: NEG
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: PUSH
25129: LD_INT 1
25131: NEG
25132: PUSH
25133: LD_INT 3
25135: NEG
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: LD_INT 0
25143: PUSH
25144: LD_INT 3
25146: NEG
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: PUSH
25152: LD_INT 1
25154: PUSH
25155: LD_INT 2
25157: NEG
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PUSH
25163: LD_INT 3
25165: PUSH
25166: LD_INT 2
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: PUSH
25173: LD_INT 3
25175: PUSH
25176: LD_INT 3
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: PUSH
25183: LD_INT 2
25185: PUSH
25186: LD_INT 3
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: PUSH
25193: LD_INT 1
25195: PUSH
25196: LD_INT 3
25198: PUSH
25199: EMPTY
25200: LIST
25201: LIST
25202: PUSH
25203: LD_INT 0
25205: PUSH
25206: LD_INT 3
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: PUSH
25213: LD_INT 1
25215: NEG
25216: PUSH
25217: LD_INT 2
25219: PUSH
25220: EMPTY
25221: LIST
25222: LIST
25223: PUSH
25224: LD_INT 3
25226: NEG
25227: PUSH
25228: LD_INT 2
25230: NEG
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: PUSH
25236: LD_INT 3
25238: NEG
25239: PUSH
25240: LD_INT 3
25242: NEG
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25279: LD_ADDR_VAR 0 43
25283: PUSH
25284: LD_INT 0
25286: PUSH
25287: LD_INT 0
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: PUSH
25294: LD_INT 0
25296: PUSH
25297: LD_INT 1
25299: NEG
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: PUSH
25305: LD_INT 1
25307: PUSH
25308: LD_INT 0
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: LD_INT 1
25317: PUSH
25318: LD_INT 1
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PUSH
25325: LD_INT 0
25327: PUSH
25328: LD_INT 1
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: PUSH
25335: LD_INT 1
25337: NEG
25338: PUSH
25339: LD_INT 0
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: PUSH
25346: LD_INT 1
25348: NEG
25349: PUSH
25350: LD_INT 1
25352: NEG
25353: PUSH
25354: EMPTY
25355: LIST
25356: LIST
25357: PUSH
25358: LD_INT 1
25360: NEG
25361: PUSH
25362: LD_INT 2
25364: NEG
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: PUSH
25370: LD_INT 0
25372: PUSH
25373: LD_INT 2
25375: NEG
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: PUSH
25381: LD_INT 1
25383: PUSH
25384: LD_INT 1
25386: NEG
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: LD_INT 2
25394: PUSH
25395: LD_INT 0
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: LD_INT 2
25404: PUSH
25405: LD_INT 1
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: LD_INT 1
25414: PUSH
25415: LD_INT 2
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: LD_INT 0
25424: PUSH
25425: LD_INT 2
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: LD_INT 1
25434: NEG
25435: PUSH
25436: LD_INT 1
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PUSH
25443: LD_INT 2
25445: NEG
25446: PUSH
25447: LD_INT 0
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: PUSH
25454: LD_INT 2
25456: NEG
25457: PUSH
25458: LD_INT 1
25460: NEG
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PUSH
25466: LD_INT 1
25468: NEG
25469: PUSH
25470: LD_INT 3
25472: NEG
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: LD_INT 0
25480: PUSH
25481: LD_INT 3
25483: NEG
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 1
25491: PUSH
25492: LD_INT 2
25494: NEG
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: LD_INT 2
25502: PUSH
25503: LD_INT 1
25505: NEG
25506: PUSH
25507: EMPTY
25508: LIST
25509: LIST
25510: PUSH
25511: LD_INT 3
25513: PUSH
25514: LD_INT 0
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: PUSH
25521: LD_INT 3
25523: PUSH
25524: LD_INT 1
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: PUSH
25531: LD_INT 1
25533: PUSH
25534: LD_INT 3
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: PUSH
25541: LD_INT 0
25543: PUSH
25544: LD_INT 3
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: PUSH
25551: LD_INT 1
25553: NEG
25554: PUSH
25555: LD_INT 2
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: PUSH
25562: LD_INT 2
25564: NEG
25565: PUSH
25566: LD_INT 1
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: PUSH
25573: LD_INT 3
25575: NEG
25576: PUSH
25577: LD_INT 0
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: LD_INT 3
25586: NEG
25587: PUSH
25588: LD_INT 1
25590: NEG
25591: PUSH
25592: EMPTY
25593: LIST
25594: LIST
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: LIST
25623: LIST
25624: LIST
25625: LIST
25626: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25627: LD_ADDR_VAR 0 44
25631: PUSH
25632: LD_INT 0
25634: PUSH
25635: LD_INT 0
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: PUSH
25642: LD_INT 0
25644: PUSH
25645: LD_INT 1
25647: NEG
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: PUSH
25653: LD_INT 1
25655: PUSH
25656: LD_INT 0
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PUSH
25663: LD_INT 1
25665: PUSH
25666: LD_INT 1
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: PUSH
25673: LD_INT 0
25675: PUSH
25676: LD_INT 1
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: PUSH
25683: LD_INT 1
25685: NEG
25686: PUSH
25687: LD_INT 0
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PUSH
25694: LD_INT 1
25696: NEG
25697: PUSH
25698: LD_INT 1
25700: NEG
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: PUSH
25706: LD_INT 1
25708: NEG
25709: PUSH
25710: LD_INT 2
25712: NEG
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: PUSH
25718: LD_INT 1
25720: PUSH
25721: LD_INT 1
25723: NEG
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: LD_INT 2
25731: PUSH
25732: LD_INT 0
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: LD_INT 2
25741: PUSH
25742: LD_INT 1
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PUSH
25749: LD_INT 2
25751: PUSH
25752: LD_INT 2
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: LD_INT 1
25761: PUSH
25762: LD_INT 2
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: LD_INT 1
25771: NEG
25772: PUSH
25773: LD_INT 1
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: PUSH
25780: LD_INT 2
25782: NEG
25783: PUSH
25784: LD_INT 0
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: PUSH
25791: LD_INT 2
25793: NEG
25794: PUSH
25795: LD_INT 1
25797: NEG
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: PUSH
25803: LD_INT 2
25805: NEG
25806: PUSH
25807: LD_INT 2
25809: NEG
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: PUSH
25815: LD_INT 2
25817: NEG
25818: PUSH
25819: LD_INT 3
25821: NEG
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: LD_INT 2
25829: PUSH
25830: LD_INT 1
25832: NEG
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PUSH
25838: LD_INT 3
25840: PUSH
25841: LD_INT 0
25843: PUSH
25844: EMPTY
25845: LIST
25846: LIST
25847: PUSH
25848: LD_INT 3
25850: PUSH
25851: LD_INT 1
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: PUSH
25858: LD_INT 3
25860: PUSH
25861: LD_INT 2
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: PUSH
25868: LD_INT 3
25870: PUSH
25871: LD_INT 3
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: PUSH
25878: LD_INT 2
25880: PUSH
25881: LD_INT 3
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: PUSH
25888: LD_INT 2
25890: NEG
25891: PUSH
25892: LD_INT 1
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: PUSH
25899: LD_INT 3
25901: NEG
25902: PUSH
25903: LD_INT 0
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: PUSH
25910: LD_INT 3
25912: NEG
25913: PUSH
25914: LD_INT 1
25916: NEG
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: PUSH
25922: LD_INT 3
25924: NEG
25925: PUSH
25926: LD_INT 2
25928: NEG
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: PUSH
25934: LD_INT 3
25936: NEG
25937: PUSH
25938: LD_INT 3
25940: NEG
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25977: LD_ADDR_VAR 0 45
25981: PUSH
25982: LD_INT 0
25984: PUSH
25985: LD_INT 0
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PUSH
25992: LD_INT 0
25994: PUSH
25995: LD_INT 1
25997: NEG
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: PUSH
26003: LD_INT 1
26005: PUSH
26006: LD_INT 0
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: PUSH
26013: LD_INT 1
26015: PUSH
26016: LD_INT 1
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: PUSH
26023: LD_INT 0
26025: PUSH
26026: LD_INT 1
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: PUSH
26033: LD_INT 1
26035: NEG
26036: PUSH
26037: LD_INT 0
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: PUSH
26044: LD_INT 1
26046: NEG
26047: PUSH
26048: LD_INT 1
26050: NEG
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PUSH
26056: LD_INT 1
26058: NEG
26059: PUSH
26060: LD_INT 2
26062: NEG
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: LD_INT 0
26070: PUSH
26071: LD_INT 2
26073: NEG
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: LD_INT 1
26081: PUSH
26082: LD_INT 1
26084: NEG
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: PUSH
26090: LD_INT 2
26092: PUSH
26093: LD_INT 1
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 2
26102: PUSH
26103: LD_INT 2
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 1
26112: PUSH
26113: LD_INT 2
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 0
26122: PUSH
26123: LD_INT 2
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: LD_INT 1
26132: NEG
26133: PUSH
26134: LD_INT 1
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 2
26143: NEG
26144: PUSH
26145: LD_INT 1
26147: NEG
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: LD_INT 2
26155: NEG
26156: PUSH
26157: LD_INT 2
26159: NEG
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: LD_INT 2
26167: NEG
26168: PUSH
26169: LD_INT 3
26171: NEG
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: LD_INT 1
26179: NEG
26180: PUSH
26181: LD_INT 3
26183: NEG
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 0
26191: PUSH
26192: LD_INT 3
26194: NEG
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: LD_INT 1
26202: PUSH
26203: LD_INT 2
26205: NEG
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PUSH
26211: LD_INT 3
26213: PUSH
26214: LD_INT 2
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: PUSH
26221: LD_INT 3
26223: PUSH
26224: LD_INT 3
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: PUSH
26231: LD_INT 2
26233: PUSH
26234: LD_INT 3
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: LD_INT 1
26243: PUSH
26244: LD_INT 3
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: PUSH
26251: LD_INT 0
26253: PUSH
26254: LD_INT 3
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: PUSH
26261: LD_INT 1
26263: NEG
26264: PUSH
26265: LD_INT 2
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PUSH
26272: LD_INT 3
26274: NEG
26275: PUSH
26276: LD_INT 2
26278: NEG
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: PUSH
26284: LD_INT 3
26286: NEG
26287: PUSH
26288: LD_INT 3
26290: NEG
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PUSH
26296: EMPTY
26297: LIST
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: LIST
26323: LIST
26324: LIST
26325: LIST
26326: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26327: LD_ADDR_VAR 0 46
26331: PUSH
26332: LD_INT 0
26334: PUSH
26335: LD_INT 0
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: LD_INT 0
26344: PUSH
26345: LD_INT 1
26347: NEG
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: PUSH
26353: LD_INT 1
26355: PUSH
26356: LD_INT 0
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: PUSH
26363: LD_INT 1
26365: PUSH
26366: LD_INT 1
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PUSH
26373: LD_INT 0
26375: PUSH
26376: LD_INT 1
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PUSH
26383: LD_INT 1
26385: NEG
26386: PUSH
26387: LD_INT 0
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 1
26396: NEG
26397: PUSH
26398: LD_INT 1
26400: NEG
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: LD_INT 1
26408: NEG
26409: PUSH
26410: LD_INT 2
26412: NEG
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: PUSH
26418: LD_INT 0
26420: PUSH
26421: LD_INT 2
26423: NEG
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: PUSH
26429: LD_INT 1
26431: PUSH
26432: LD_INT 1
26434: NEG
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: LD_INT 2
26442: PUSH
26443: LD_INT 0
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: PUSH
26450: LD_INT 2
26452: PUSH
26453: LD_INT 1
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: LD_INT 1
26462: PUSH
26463: LD_INT 2
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PUSH
26470: LD_INT 0
26472: PUSH
26473: LD_INT 2
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: LD_INT 1
26482: NEG
26483: PUSH
26484: LD_INT 1
26486: PUSH
26487: EMPTY
26488: LIST
26489: LIST
26490: PUSH
26491: LD_INT 2
26493: NEG
26494: PUSH
26495: LD_INT 0
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: PUSH
26502: LD_INT 2
26504: NEG
26505: PUSH
26506: LD_INT 1
26508: NEG
26509: PUSH
26510: EMPTY
26511: LIST
26512: LIST
26513: PUSH
26514: LD_INT 1
26516: NEG
26517: PUSH
26518: LD_INT 3
26520: NEG
26521: PUSH
26522: EMPTY
26523: LIST
26524: LIST
26525: PUSH
26526: LD_INT 0
26528: PUSH
26529: LD_INT 3
26531: NEG
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: PUSH
26537: LD_INT 1
26539: PUSH
26540: LD_INT 2
26542: NEG
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PUSH
26548: LD_INT 2
26550: PUSH
26551: LD_INT 1
26553: NEG
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: LD_INT 3
26561: PUSH
26562: LD_INT 0
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: PUSH
26569: LD_INT 3
26571: PUSH
26572: LD_INT 1
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: PUSH
26579: LD_INT 1
26581: PUSH
26582: LD_INT 3
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: LD_INT 0
26591: PUSH
26592: LD_INT 3
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: PUSH
26599: LD_INT 1
26601: NEG
26602: PUSH
26603: LD_INT 2
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: LD_INT 2
26612: NEG
26613: PUSH
26614: LD_INT 1
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: PUSH
26621: LD_INT 3
26623: NEG
26624: PUSH
26625: LD_INT 0
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: PUSH
26632: LD_INT 3
26634: NEG
26635: PUSH
26636: LD_INT 1
26638: NEG
26639: PUSH
26640: EMPTY
26641: LIST
26642: LIST
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26675: LD_ADDR_VAR 0 47
26679: PUSH
26680: LD_INT 0
26682: PUSH
26683: LD_INT 0
26685: PUSH
26686: EMPTY
26687: LIST
26688: LIST
26689: PUSH
26690: LD_INT 0
26692: PUSH
26693: LD_INT 1
26695: NEG
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: PUSH
26701: LD_INT 1
26703: PUSH
26704: LD_INT 0
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: PUSH
26711: LD_INT 1
26713: PUSH
26714: LD_INT 1
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: PUSH
26721: LD_INT 0
26723: PUSH
26724: LD_INT 1
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PUSH
26731: LD_INT 1
26733: NEG
26734: PUSH
26735: LD_INT 0
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PUSH
26742: LD_INT 1
26744: NEG
26745: PUSH
26746: LD_INT 1
26748: NEG
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: LD_INT 1
26756: NEG
26757: PUSH
26758: LD_INT 2
26760: NEG
26761: PUSH
26762: EMPTY
26763: LIST
26764: LIST
26765: PUSH
26766: LD_INT 0
26768: PUSH
26769: LD_INT 2
26771: NEG
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: PUSH
26777: LD_INT 1
26779: PUSH
26780: LD_INT 1
26782: NEG
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: PUSH
26788: LD_INT 2
26790: NEG
26791: PUSH
26792: LD_INT 1
26794: NEG
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: PUSH
26800: LD_INT 2
26802: NEG
26803: PUSH
26804: LD_INT 2
26806: NEG
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: LIST
26816: LIST
26817: LIST
26818: LIST
26819: LIST
26820: LIST
26821: LIST
26822: LIST
26823: LIST
26824: LIST
26825: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26826: LD_ADDR_VAR 0 48
26830: PUSH
26831: LD_INT 0
26833: PUSH
26834: LD_INT 0
26836: PUSH
26837: EMPTY
26838: LIST
26839: LIST
26840: PUSH
26841: LD_INT 0
26843: PUSH
26844: LD_INT 1
26846: NEG
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: PUSH
26852: LD_INT 1
26854: PUSH
26855: LD_INT 0
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: PUSH
26862: LD_INT 1
26864: PUSH
26865: LD_INT 1
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: PUSH
26872: LD_INT 0
26874: PUSH
26875: LD_INT 1
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: PUSH
26882: LD_INT 1
26884: NEG
26885: PUSH
26886: LD_INT 0
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: PUSH
26893: LD_INT 1
26895: NEG
26896: PUSH
26897: LD_INT 1
26899: NEG
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 1
26907: NEG
26908: PUSH
26909: LD_INT 2
26911: NEG
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: PUSH
26917: LD_INT 0
26919: PUSH
26920: LD_INT 2
26922: NEG
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: PUSH
26928: LD_INT 1
26930: PUSH
26931: LD_INT 1
26933: NEG
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PUSH
26939: LD_INT 2
26941: PUSH
26942: LD_INT 0
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PUSH
26949: LD_INT 2
26951: PUSH
26952: LD_INT 1
26954: PUSH
26955: EMPTY
26956: LIST
26957: LIST
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: LIST
26972: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26973: LD_ADDR_VAR 0 49
26977: PUSH
26978: LD_INT 0
26980: PUSH
26981: LD_INT 0
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: PUSH
26988: LD_INT 0
26990: PUSH
26991: LD_INT 1
26993: NEG
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PUSH
26999: LD_INT 1
27001: PUSH
27002: LD_INT 0
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: PUSH
27009: LD_INT 1
27011: PUSH
27012: LD_INT 1
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: LD_INT 0
27021: PUSH
27022: LD_INT 1
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PUSH
27029: LD_INT 1
27031: NEG
27032: PUSH
27033: LD_INT 0
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PUSH
27040: LD_INT 1
27042: NEG
27043: PUSH
27044: LD_INT 1
27046: NEG
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: LD_INT 1
27054: PUSH
27055: LD_INT 1
27057: NEG
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: LD_INT 2
27065: PUSH
27066: LD_INT 0
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: PUSH
27073: LD_INT 2
27075: PUSH
27076: LD_INT 1
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: PUSH
27083: LD_INT 2
27085: PUSH
27086: LD_INT 2
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: PUSH
27093: LD_INT 1
27095: PUSH
27096: LD_INT 2
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27117: LD_ADDR_VAR 0 50
27121: PUSH
27122: LD_INT 0
27124: PUSH
27125: LD_INT 0
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: PUSH
27132: LD_INT 0
27134: PUSH
27135: LD_INT 1
27137: NEG
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: LD_INT 1
27145: PUSH
27146: LD_INT 0
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: PUSH
27153: LD_INT 1
27155: PUSH
27156: LD_INT 1
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PUSH
27163: LD_INT 0
27165: PUSH
27166: LD_INT 1
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: PUSH
27173: LD_INT 1
27175: NEG
27176: PUSH
27177: LD_INT 0
27179: PUSH
27180: EMPTY
27181: LIST
27182: LIST
27183: PUSH
27184: LD_INT 1
27186: NEG
27187: PUSH
27188: LD_INT 1
27190: NEG
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: PUSH
27196: LD_INT 2
27198: PUSH
27199: LD_INT 1
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: PUSH
27206: LD_INT 2
27208: PUSH
27209: LD_INT 2
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PUSH
27216: LD_INT 1
27218: PUSH
27219: LD_INT 2
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: LD_INT 0
27228: PUSH
27229: LD_INT 2
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PUSH
27236: LD_INT 1
27238: NEG
27239: PUSH
27240: LD_INT 1
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27261: LD_ADDR_VAR 0 51
27265: PUSH
27266: LD_INT 0
27268: PUSH
27269: LD_INT 0
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: LD_INT 0
27278: PUSH
27279: LD_INT 1
27281: NEG
27282: PUSH
27283: EMPTY
27284: LIST
27285: LIST
27286: PUSH
27287: LD_INT 1
27289: PUSH
27290: LD_INT 0
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: PUSH
27297: LD_INT 1
27299: PUSH
27300: LD_INT 1
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: PUSH
27307: LD_INT 0
27309: PUSH
27310: LD_INT 1
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: LD_INT 1
27319: NEG
27320: PUSH
27321: LD_INT 0
27323: PUSH
27324: EMPTY
27325: LIST
27326: LIST
27327: PUSH
27328: LD_INT 1
27330: NEG
27331: PUSH
27332: LD_INT 1
27334: NEG
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: PUSH
27340: LD_INT 1
27342: PUSH
27343: LD_INT 2
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: PUSH
27350: LD_INT 0
27352: PUSH
27353: LD_INT 2
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PUSH
27360: LD_INT 1
27362: NEG
27363: PUSH
27364: LD_INT 1
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: PUSH
27371: LD_INT 2
27373: NEG
27374: PUSH
27375: LD_INT 0
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: PUSH
27382: LD_INT 2
27384: NEG
27385: PUSH
27386: LD_INT 1
27388: NEG
27389: PUSH
27390: EMPTY
27391: LIST
27392: LIST
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27408: LD_ADDR_VAR 0 52
27412: PUSH
27413: LD_INT 0
27415: PUSH
27416: LD_INT 0
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: PUSH
27423: LD_INT 0
27425: PUSH
27426: LD_INT 1
27428: NEG
27429: PUSH
27430: EMPTY
27431: LIST
27432: LIST
27433: PUSH
27434: LD_INT 1
27436: PUSH
27437: LD_INT 0
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: LD_INT 1
27446: PUSH
27447: LD_INT 1
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: LD_INT 0
27456: PUSH
27457: LD_INT 1
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: LD_INT 1
27466: NEG
27467: PUSH
27468: LD_INT 0
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: LD_INT 1
27477: NEG
27478: PUSH
27479: LD_INT 1
27481: NEG
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PUSH
27487: LD_INT 1
27489: NEG
27490: PUSH
27491: LD_INT 2
27493: NEG
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: LD_INT 1
27501: NEG
27502: PUSH
27503: LD_INT 1
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: LD_INT 2
27512: NEG
27513: PUSH
27514: LD_INT 0
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: PUSH
27521: LD_INT 2
27523: NEG
27524: PUSH
27525: LD_INT 1
27527: NEG
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: PUSH
27533: LD_INT 2
27535: NEG
27536: PUSH
27537: LD_INT 2
27539: NEG
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: EMPTY
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: LIST
27557: LIST
27558: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27559: LD_ADDR_VAR 0 53
27563: PUSH
27564: LD_INT 0
27566: PUSH
27567: LD_INT 0
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: LD_INT 0
27576: PUSH
27577: LD_INT 1
27579: NEG
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: PUSH
27585: LD_INT 1
27587: PUSH
27588: LD_INT 0
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: LD_INT 1
27597: PUSH
27598: LD_INT 1
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: PUSH
27605: LD_INT 0
27607: PUSH
27608: LD_INT 1
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: PUSH
27615: LD_INT 1
27617: NEG
27618: PUSH
27619: LD_INT 0
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: PUSH
27626: LD_INT 1
27628: NEG
27629: PUSH
27630: LD_INT 1
27632: NEG
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PUSH
27638: LD_INT 1
27640: NEG
27641: PUSH
27642: LD_INT 2
27644: NEG
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: LD_INT 0
27652: PUSH
27653: LD_INT 2
27655: NEG
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: PUSH
27661: LD_INT 1
27663: PUSH
27664: LD_INT 1
27666: NEG
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: LD_INT 2
27674: PUSH
27675: LD_INT 0
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: LD_INT 2
27684: PUSH
27685: LD_INT 1
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: PUSH
27692: LD_INT 2
27694: PUSH
27695: LD_INT 2
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: PUSH
27702: LD_INT 1
27704: PUSH
27705: LD_INT 2
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: PUSH
27712: LD_INT 0
27714: PUSH
27715: LD_INT 2
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: PUSH
27722: LD_INT 1
27724: NEG
27725: PUSH
27726: LD_INT 1
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PUSH
27733: LD_INT 2
27735: NEG
27736: PUSH
27737: LD_INT 0
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PUSH
27744: LD_INT 2
27746: NEG
27747: PUSH
27748: LD_INT 1
27750: NEG
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: PUSH
27756: LD_INT 2
27758: NEG
27759: PUSH
27760: LD_INT 2
27762: NEG
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PUSH
27768: EMPTY
27769: LIST
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: LIST
27788: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27789: LD_ADDR_VAR 0 54
27793: PUSH
27794: LD_INT 0
27796: PUSH
27797: LD_INT 0
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PUSH
27804: LD_INT 0
27806: PUSH
27807: LD_INT 1
27809: NEG
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: PUSH
27815: LD_INT 1
27817: PUSH
27818: LD_INT 0
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: PUSH
27825: LD_INT 1
27827: PUSH
27828: LD_INT 1
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: PUSH
27835: LD_INT 0
27837: PUSH
27838: LD_INT 1
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PUSH
27845: LD_INT 1
27847: NEG
27848: PUSH
27849: LD_INT 0
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: PUSH
27856: LD_INT 1
27858: NEG
27859: PUSH
27860: LD_INT 1
27862: NEG
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: PUSH
27868: LD_INT 1
27870: NEG
27871: PUSH
27872: LD_INT 2
27874: NEG
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 0
27882: PUSH
27883: LD_INT 2
27885: NEG
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: PUSH
27891: LD_INT 1
27893: PUSH
27894: LD_INT 1
27896: NEG
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: PUSH
27902: LD_INT 2
27904: PUSH
27905: LD_INT 0
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: PUSH
27912: LD_INT 2
27914: PUSH
27915: LD_INT 1
27917: PUSH
27918: EMPTY
27919: LIST
27920: LIST
27921: PUSH
27922: LD_INT 2
27924: PUSH
27925: LD_INT 2
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: PUSH
27932: LD_INT 1
27934: PUSH
27935: LD_INT 2
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: PUSH
27942: LD_INT 0
27944: PUSH
27945: LD_INT 2
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 1
27954: NEG
27955: PUSH
27956: LD_INT 1
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: PUSH
27963: LD_INT 2
27965: NEG
27966: PUSH
27967: LD_INT 0
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: PUSH
27974: LD_INT 2
27976: NEG
27977: PUSH
27978: LD_INT 1
27980: NEG
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: PUSH
27986: LD_INT 2
27988: NEG
27989: PUSH
27990: LD_INT 2
27992: NEG
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: LIST
28017: LIST
28018: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28019: LD_ADDR_VAR 0 55
28023: PUSH
28024: LD_INT 0
28026: PUSH
28027: LD_INT 0
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: PUSH
28034: LD_INT 0
28036: PUSH
28037: LD_INT 1
28039: NEG
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: PUSH
28045: LD_INT 1
28047: PUSH
28048: LD_INT 0
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: LD_INT 1
28057: PUSH
28058: LD_INT 1
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PUSH
28065: LD_INT 0
28067: PUSH
28068: LD_INT 1
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: PUSH
28075: LD_INT 1
28077: NEG
28078: PUSH
28079: LD_INT 0
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: PUSH
28086: LD_INT 1
28088: NEG
28089: PUSH
28090: LD_INT 1
28092: NEG
28093: PUSH
28094: EMPTY
28095: LIST
28096: LIST
28097: PUSH
28098: LD_INT 1
28100: NEG
28101: PUSH
28102: LD_INT 2
28104: NEG
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PUSH
28110: LD_INT 0
28112: PUSH
28113: LD_INT 2
28115: NEG
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: PUSH
28121: LD_INT 1
28123: PUSH
28124: LD_INT 1
28126: NEG
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: PUSH
28132: LD_INT 2
28134: PUSH
28135: LD_INT 0
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: PUSH
28142: LD_INT 2
28144: PUSH
28145: LD_INT 1
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: PUSH
28152: LD_INT 2
28154: PUSH
28155: LD_INT 2
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: PUSH
28162: LD_INT 1
28164: PUSH
28165: LD_INT 2
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: LD_INT 0
28174: PUSH
28175: LD_INT 2
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: PUSH
28182: LD_INT 1
28184: NEG
28185: PUSH
28186: LD_INT 1
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: PUSH
28193: LD_INT 2
28195: NEG
28196: PUSH
28197: LD_INT 0
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PUSH
28204: LD_INT 2
28206: NEG
28207: PUSH
28208: LD_INT 1
28210: NEG
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: LD_INT 2
28218: NEG
28219: PUSH
28220: LD_INT 2
28222: NEG
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: LIST
28232: LIST
28233: LIST
28234: LIST
28235: LIST
28236: LIST
28237: LIST
28238: LIST
28239: LIST
28240: LIST
28241: LIST
28242: LIST
28243: LIST
28244: LIST
28245: LIST
28246: LIST
28247: LIST
28248: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28249: LD_ADDR_VAR 0 56
28253: PUSH
28254: LD_INT 0
28256: PUSH
28257: LD_INT 0
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: PUSH
28264: LD_INT 0
28266: PUSH
28267: LD_INT 1
28269: NEG
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: PUSH
28275: LD_INT 1
28277: PUSH
28278: LD_INT 0
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: PUSH
28285: LD_INT 1
28287: PUSH
28288: LD_INT 1
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PUSH
28295: LD_INT 0
28297: PUSH
28298: LD_INT 1
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: PUSH
28305: LD_INT 1
28307: NEG
28308: PUSH
28309: LD_INT 0
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: PUSH
28316: LD_INT 1
28318: NEG
28319: PUSH
28320: LD_INT 1
28322: NEG
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 1
28330: NEG
28331: PUSH
28332: LD_INT 2
28334: NEG
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: PUSH
28340: LD_INT 0
28342: PUSH
28343: LD_INT 2
28345: NEG
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PUSH
28351: LD_INT 1
28353: PUSH
28354: LD_INT 1
28356: NEG
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: PUSH
28362: LD_INT 2
28364: PUSH
28365: LD_INT 0
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: LD_INT 2
28374: PUSH
28375: LD_INT 1
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: PUSH
28382: LD_INT 2
28384: PUSH
28385: LD_INT 2
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: PUSH
28392: LD_INT 1
28394: PUSH
28395: LD_INT 2
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: PUSH
28402: LD_INT 0
28404: PUSH
28405: LD_INT 2
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 1
28414: NEG
28415: PUSH
28416: LD_INT 1
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: PUSH
28423: LD_INT 2
28425: NEG
28426: PUSH
28427: LD_INT 0
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: PUSH
28434: LD_INT 2
28436: NEG
28437: PUSH
28438: LD_INT 1
28440: NEG
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: PUSH
28446: LD_INT 2
28448: NEG
28449: PUSH
28450: LD_INT 2
28452: NEG
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: LIST
28468: LIST
28469: LIST
28470: LIST
28471: LIST
28472: LIST
28473: LIST
28474: LIST
28475: LIST
28476: LIST
28477: LIST
28478: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28479: LD_ADDR_VAR 0 57
28483: PUSH
28484: LD_INT 0
28486: PUSH
28487: LD_INT 0
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: PUSH
28494: LD_INT 0
28496: PUSH
28497: LD_INT 1
28499: NEG
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: PUSH
28505: LD_INT 1
28507: PUSH
28508: LD_INT 0
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PUSH
28515: LD_INT 1
28517: PUSH
28518: LD_INT 1
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: PUSH
28525: LD_INT 0
28527: PUSH
28528: LD_INT 1
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: PUSH
28535: LD_INT 1
28537: NEG
28538: PUSH
28539: LD_INT 0
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: LD_INT 1
28548: NEG
28549: PUSH
28550: LD_INT 1
28552: NEG
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: PUSH
28558: LD_INT 1
28560: NEG
28561: PUSH
28562: LD_INT 2
28564: NEG
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: PUSH
28570: LD_INT 0
28572: PUSH
28573: LD_INT 2
28575: NEG
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: LD_INT 1
28583: PUSH
28584: LD_INT 1
28586: NEG
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: PUSH
28592: LD_INT 2
28594: PUSH
28595: LD_INT 0
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: PUSH
28602: LD_INT 2
28604: PUSH
28605: LD_INT 1
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: PUSH
28612: LD_INT 2
28614: PUSH
28615: LD_INT 2
28617: PUSH
28618: EMPTY
28619: LIST
28620: LIST
28621: PUSH
28622: LD_INT 1
28624: PUSH
28625: LD_INT 2
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: PUSH
28632: LD_INT 0
28634: PUSH
28635: LD_INT 2
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: PUSH
28642: LD_INT 1
28644: NEG
28645: PUSH
28646: LD_INT 1
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: PUSH
28653: LD_INT 2
28655: NEG
28656: PUSH
28657: LD_INT 0
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: PUSH
28664: LD_INT 2
28666: NEG
28667: PUSH
28668: LD_INT 1
28670: NEG
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: PUSH
28676: LD_INT 2
28678: NEG
28679: PUSH
28680: LD_INT 2
28682: NEG
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: LIST
28692: LIST
28693: LIST
28694: LIST
28695: LIST
28696: LIST
28697: LIST
28698: LIST
28699: LIST
28700: LIST
28701: LIST
28702: LIST
28703: LIST
28704: LIST
28705: LIST
28706: LIST
28707: LIST
28708: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28709: LD_ADDR_VAR 0 58
28713: PUSH
28714: LD_INT 0
28716: PUSH
28717: LD_INT 0
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: PUSH
28724: LD_INT 0
28726: PUSH
28727: LD_INT 1
28729: NEG
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: PUSH
28735: LD_INT 1
28737: PUSH
28738: LD_INT 0
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: LD_INT 1
28747: PUSH
28748: LD_INT 1
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: LD_INT 0
28757: PUSH
28758: LD_INT 1
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: PUSH
28765: LD_INT 1
28767: NEG
28768: PUSH
28769: LD_INT 0
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: PUSH
28776: LD_INT 1
28778: NEG
28779: PUSH
28780: LD_INT 1
28782: NEG
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PUSH
28788: LD_INT 1
28790: NEG
28791: PUSH
28792: LD_INT 2
28794: NEG
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: PUSH
28800: LD_INT 0
28802: PUSH
28803: LD_INT 2
28805: NEG
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: LD_INT 1
28813: PUSH
28814: LD_INT 1
28816: NEG
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: LD_INT 2
28824: PUSH
28825: LD_INT 0
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: LD_INT 2
28834: PUSH
28835: LD_INT 1
28837: PUSH
28838: EMPTY
28839: LIST
28840: LIST
28841: PUSH
28842: LD_INT 2
28844: PUSH
28845: LD_INT 2
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: PUSH
28852: LD_INT 1
28854: PUSH
28855: LD_INT 2
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: LD_INT 0
28864: PUSH
28865: LD_INT 2
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 1
28874: NEG
28875: PUSH
28876: LD_INT 1
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: PUSH
28883: LD_INT 2
28885: NEG
28886: PUSH
28887: LD_INT 0
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: PUSH
28894: LD_INT 2
28896: NEG
28897: PUSH
28898: LD_INT 1
28900: NEG
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: PUSH
28906: LD_INT 2
28908: NEG
28909: PUSH
28910: LD_INT 2
28912: NEG
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: LIST
28922: LIST
28923: LIST
28924: LIST
28925: LIST
28926: LIST
28927: LIST
28928: LIST
28929: LIST
28930: LIST
28931: LIST
28932: LIST
28933: LIST
28934: LIST
28935: LIST
28936: LIST
28937: LIST
28938: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28939: LD_ADDR_VAR 0 59
28943: PUSH
28944: LD_INT 0
28946: PUSH
28947: LD_INT 0
28949: PUSH
28950: EMPTY
28951: LIST
28952: LIST
28953: PUSH
28954: LD_INT 0
28956: PUSH
28957: LD_INT 1
28959: NEG
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: PUSH
28965: LD_INT 1
28967: PUSH
28968: LD_INT 0
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: PUSH
28975: LD_INT 1
28977: PUSH
28978: LD_INT 1
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PUSH
28985: LD_INT 0
28987: PUSH
28988: LD_INT 1
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: PUSH
28995: LD_INT 1
28997: NEG
28998: PUSH
28999: LD_INT 0
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: LD_INT 1
29008: NEG
29009: PUSH
29010: LD_INT 1
29012: NEG
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: LIST
29026: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29027: LD_ADDR_VAR 0 60
29031: PUSH
29032: LD_INT 0
29034: PUSH
29035: LD_INT 0
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: PUSH
29042: LD_INT 0
29044: PUSH
29045: LD_INT 1
29047: NEG
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: PUSH
29053: LD_INT 1
29055: PUSH
29056: LD_INT 0
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: PUSH
29063: LD_INT 1
29065: PUSH
29066: LD_INT 1
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: PUSH
29073: LD_INT 0
29075: PUSH
29076: LD_INT 1
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: PUSH
29083: LD_INT 1
29085: NEG
29086: PUSH
29087: LD_INT 0
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: PUSH
29094: LD_INT 1
29096: NEG
29097: PUSH
29098: LD_INT 1
29100: NEG
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29115: LD_ADDR_VAR 0 61
29119: PUSH
29120: LD_INT 0
29122: PUSH
29123: LD_INT 0
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: PUSH
29130: LD_INT 0
29132: PUSH
29133: LD_INT 1
29135: NEG
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: LD_INT 1
29143: PUSH
29144: LD_INT 0
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: PUSH
29151: LD_INT 1
29153: PUSH
29154: LD_INT 1
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: PUSH
29161: LD_INT 0
29163: PUSH
29164: LD_INT 1
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PUSH
29171: LD_INT 1
29173: NEG
29174: PUSH
29175: LD_INT 0
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PUSH
29182: LD_INT 1
29184: NEG
29185: PUSH
29186: LD_INT 1
29188: NEG
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: LIST
29198: LIST
29199: LIST
29200: LIST
29201: LIST
29202: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29203: LD_ADDR_VAR 0 62
29207: PUSH
29208: LD_INT 0
29210: PUSH
29211: LD_INT 0
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: PUSH
29218: LD_INT 0
29220: PUSH
29221: LD_INT 1
29223: NEG
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: LD_INT 1
29231: PUSH
29232: LD_INT 0
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: LD_INT 1
29241: PUSH
29242: LD_INT 1
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PUSH
29249: LD_INT 0
29251: PUSH
29252: LD_INT 1
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PUSH
29259: LD_INT 1
29261: NEG
29262: PUSH
29263: LD_INT 0
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PUSH
29270: LD_INT 1
29272: NEG
29273: PUSH
29274: LD_INT 1
29276: NEG
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29291: LD_ADDR_VAR 0 63
29295: PUSH
29296: LD_INT 0
29298: PUSH
29299: LD_INT 0
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: LD_INT 0
29308: PUSH
29309: LD_INT 1
29311: NEG
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: LD_INT 1
29319: PUSH
29320: LD_INT 0
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PUSH
29327: LD_INT 1
29329: PUSH
29330: LD_INT 1
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: PUSH
29337: LD_INT 0
29339: PUSH
29340: LD_INT 1
29342: PUSH
29343: EMPTY
29344: LIST
29345: LIST
29346: PUSH
29347: LD_INT 1
29349: NEG
29350: PUSH
29351: LD_INT 0
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: LD_INT 1
29360: NEG
29361: PUSH
29362: LD_INT 1
29364: NEG
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29379: LD_ADDR_VAR 0 64
29383: PUSH
29384: LD_INT 0
29386: PUSH
29387: LD_INT 0
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PUSH
29394: LD_INT 0
29396: PUSH
29397: LD_INT 1
29399: NEG
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: PUSH
29405: LD_INT 1
29407: PUSH
29408: LD_INT 0
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: PUSH
29415: LD_INT 1
29417: PUSH
29418: LD_INT 1
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PUSH
29425: LD_INT 0
29427: PUSH
29428: LD_INT 1
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PUSH
29435: LD_INT 1
29437: NEG
29438: PUSH
29439: LD_INT 0
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: PUSH
29446: LD_INT 1
29448: NEG
29449: PUSH
29450: LD_INT 1
29452: NEG
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: LIST
29465: LIST
29466: ST_TO_ADDR
// end ; 1 :
29467: GO 35364
29469: LD_INT 1
29471: DOUBLE
29472: EQUAL
29473: IFTRUE 29477
29475: GO 32100
29477: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29478: LD_ADDR_VAR 0 11
29482: PUSH
29483: LD_INT 1
29485: NEG
29486: PUSH
29487: LD_INT 3
29489: NEG
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PUSH
29495: LD_INT 0
29497: PUSH
29498: LD_INT 3
29500: NEG
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PUSH
29506: LD_INT 1
29508: PUSH
29509: LD_INT 2
29511: NEG
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: LIST
29521: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29522: LD_ADDR_VAR 0 12
29526: PUSH
29527: LD_INT 2
29529: PUSH
29530: LD_INT 1
29532: NEG
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: PUSH
29538: LD_INT 3
29540: PUSH
29541: LD_INT 0
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: LD_INT 3
29550: PUSH
29551: LD_INT 1
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: LIST
29562: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29563: LD_ADDR_VAR 0 13
29567: PUSH
29568: LD_INT 3
29570: PUSH
29571: LD_INT 2
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: PUSH
29578: LD_INT 3
29580: PUSH
29581: LD_INT 3
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: LD_INT 2
29590: PUSH
29591: LD_INT 3
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: LIST
29602: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29603: LD_ADDR_VAR 0 14
29607: PUSH
29608: LD_INT 1
29610: PUSH
29611: LD_INT 3
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: PUSH
29618: LD_INT 0
29620: PUSH
29621: LD_INT 3
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 1
29630: NEG
29631: PUSH
29632: LD_INT 2
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: LIST
29643: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29644: LD_ADDR_VAR 0 15
29648: PUSH
29649: LD_INT 2
29651: NEG
29652: PUSH
29653: LD_INT 1
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: PUSH
29660: LD_INT 3
29662: NEG
29663: PUSH
29664: LD_INT 0
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: LD_INT 3
29673: NEG
29674: PUSH
29675: LD_INT 1
29677: NEG
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: LIST
29687: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29688: LD_ADDR_VAR 0 16
29692: PUSH
29693: LD_INT 2
29695: NEG
29696: PUSH
29697: LD_INT 3
29699: NEG
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: LD_INT 3
29707: NEG
29708: PUSH
29709: LD_INT 2
29711: NEG
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: LD_INT 3
29719: NEG
29720: PUSH
29721: LD_INT 3
29723: NEG
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: LIST
29733: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29734: LD_ADDR_VAR 0 17
29738: PUSH
29739: LD_INT 1
29741: NEG
29742: PUSH
29743: LD_INT 3
29745: NEG
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 0
29753: PUSH
29754: LD_INT 3
29756: NEG
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: PUSH
29762: LD_INT 1
29764: PUSH
29765: LD_INT 2
29767: NEG
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: LIST
29777: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29778: LD_ADDR_VAR 0 18
29782: PUSH
29783: LD_INT 2
29785: PUSH
29786: LD_INT 1
29788: NEG
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: LD_INT 3
29796: PUSH
29797: LD_INT 0
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: PUSH
29804: LD_INT 3
29806: PUSH
29807: LD_INT 1
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: LIST
29818: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29819: LD_ADDR_VAR 0 19
29823: PUSH
29824: LD_INT 3
29826: PUSH
29827: LD_INT 2
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: PUSH
29834: LD_INT 3
29836: PUSH
29837: LD_INT 3
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: LD_INT 2
29846: PUSH
29847: LD_INT 3
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: LIST
29858: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29859: LD_ADDR_VAR 0 20
29863: PUSH
29864: LD_INT 1
29866: PUSH
29867: LD_INT 3
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: LD_INT 0
29876: PUSH
29877: LD_INT 3
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 1
29886: NEG
29887: PUSH
29888: LD_INT 2
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: LIST
29899: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29900: LD_ADDR_VAR 0 21
29904: PUSH
29905: LD_INT 2
29907: NEG
29908: PUSH
29909: LD_INT 1
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 3
29918: NEG
29919: PUSH
29920: LD_INT 0
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: LD_INT 3
29929: NEG
29930: PUSH
29931: LD_INT 1
29933: NEG
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: LIST
29943: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29944: LD_ADDR_VAR 0 22
29948: PUSH
29949: LD_INT 2
29951: NEG
29952: PUSH
29953: LD_INT 3
29955: NEG
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: LD_INT 3
29963: NEG
29964: PUSH
29965: LD_INT 2
29967: NEG
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: PUSH
29973: LD_INT 3
29975: NEG
29976: PUSH
29977: LD_INT 3
29979: NEG
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: LIST
29989: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29990: LD_ADDR_VAR 0 23
29994: PUSH
29995: LD_INT 0
29997: PUSH
29998: LD_INT 3
30000: NEG
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 1
30008: NEG
30009: PUSH
30010: LD_INT 4
30012: NEG
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: PUSH
30018: LD_INT 1
30020: PUSH
30021: LD_INT 3
30023: NEG
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: LIST
30033: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30034: LD_ADDR_VAR 0 24
30038: PUSH
30039: LD_INT 3
30041: PUSH
30042: LD_INT 0
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PUSH
30049: LD_INT 3
30051: PUSH
30052: LD_INT 1
30054: NEG
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: PUSH
30060: LD_INT 4
30062: PUSH
30063: LD_INT 1
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: LIST
30074: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30075: LD_ADDR_VAR 0 25
30079: PUSH
30080: LD_INT 3
30082: PUSH
30083: LD_INT 3
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: PUSH
30090: LD_INT 4
30092: PUSH
30093: LD_INT 3
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: PUSH
30100: LD_INT 3
30102: PUSH
30103: LD_INT 4
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: LIST
30114: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30115: LD_ADDR_VAR 0 26
30119: PUSH
30120: LD_INT 0
30122: PUSH
30123: LD_INT 3
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 1
30132: PUSH
30133: LD_INT 4
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: LD_INT 1
30142: NEG
30143: PUSH
30144: LD_INT 3
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: LIST
30155: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30156: LD_ADDR_VAR 0 27
30160: PUSH
30161: LD_INT 3
30163: NEG
30164: PUSH
30165: LD_INT 0
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: LD_INT 3
30174: NEG
30175: PUSH
30176: LD_INT 1
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: PUSH
30183: LD_INT 4
30185: NEG
30186: PUSH
30187: LD_INT 1
30189: NEG
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: LIST
30199: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30200: LD_ADDR_VAR 0 28
30204: PUSH
30205: LD_INT 3
30207: NEG
30208: PUSH
30209: LD_INT 3
30211: NEG
30212: PUSH
30213: EMPTY
30214: LIST
30215: LIST
30216: PUSH
30217: LD_INT 3
30219: NEG
30220: PUSH
30221: LD_INT 4
30223: NEG
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 4
30231: NEG
30232: PUSH
30233: LD_INT 3
30235: NEG
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: LIST
30245: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30246: LD_ADDR_VAR 0 29
30250: PUSH
30251: LD_INT 1
30253: NEG
30254: PUSH
30255: LD_INT 3
30257: NEG
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: PUSH
30263: LD_INT 0
30265: PUSH
30266: LD_INT 3
30268: NEG
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: PUSH
30274: LD_INT 1
30276: PUSH
30277: LD_INT 2
30279: NEG
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: LD_INT 1
30287: NEG
30288: PUSH
30289: LD_INT 4
30291: NEG
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: LD_INT 0
30299: PUSH
30300: LD_INT 4
30302: NEG
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: LD_INT 1
30310: PUSH
30311: LD_INT 3
30313: NEG
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: LD_INT 1
30321: NEG
30322: PUSH
30323: LD_INT 5
30325: NEG
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: LD_INT 0
30333: PUSH
30334: LD_INT 5
30336: NEG
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: PUSH
30342: LD_INT 1
30344: PUSH
30345: LD_INT 4
30347: NEG
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: PUSH
30353: LD_INT 1
30355: NEG
30356: PUSH
30357: LD_INT 6
30359: NEG
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 0
30367: PUSH
30368: LD_INT 6
30370: NEG
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: LD_INT 1
30378: PUSH
30379: LD_INT 5
30381: NEG
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: LIST
30391: LIST
30392: LIST
30393: LIST
30394: LIST
30395: LIST
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30401: LD_ADDR_VAR 0 30
30405: PUSH
30406: LD_INT 2
30408: PUSH
30409: LD_INT 1
30411: NEG
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: LD_INT 3
30419: PUSH
30420: LD_INT 0
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 3
30429: PUSH
30430: LD_INT 1
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PUSH
30437: LD_INT 3
30439: PUSH
30440: LD_INT 1
30442: NEG
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: PUSH
30448: LD_INT 4
30450: PUSH
30451: LD_INT 0
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: LD_INT 4
30460: PUSH
30461: LD_INT 1
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PUSH
30468: LD_INT 4
30470: PUSH
30471: LD_INT 1
30473: NEG
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 5
30481: PUSH
30482: LD_INT 0
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: LD_INT 5
30491: PUSH
30492: LD_INT 1
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PUSH
30499: LD_INT 5
30501: PUSH
30502: LD_INT 1
30504: NEG
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 6
30512: PUSH
30513: LD_INT 0
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 6
30522: PUSH
30523: LD_INT 1
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30544: LD_ADDR_VAR 0 31
30548: PUSH
30549: LD_INT 3
30551: PUSH
30552: LD_INT 2
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: LD_INT 3
30561: PUSH
30562: LD_INT 3
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: LD_INT 2
30571: PUSH
30572: LD_INT 3
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: LD_INT 4
30581: PUSH
30582: LD_INT 3
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: PUSH
30589: LD_INT 4
30591: PUSH
30592: LD_INT 4
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PUSH
30599: LD_INT 3
30601: PUSH
30602: LD_INT 4
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: PUSH
30609: LD_INT 5
30611: PUSH
30612: LD_INT 4
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: PUSH
30619: LD_INT 5
30621: PUSH
30622: LD_INT 5
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: PUSH
30629: LD_INT 4
30631: PUSH
30632: LD_INT 5
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: LD_INT 6
30641: PUSH
30642: LD_INT 5
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 6
30651: PUSH
30652: LD_INT 6
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 5
30661: PUSH
30662: LD_INT 6
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30683: LD_ADDR_VAR 0 32
30687: PUSH
30688: LD_INT 1
30690: PUSH
30691: LD_INT 3
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: PUSH
30698: LD_INT 0
30700: PUSH
30701: LD_INT 3
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: PUSH
30708: LD_INT 1
30710: NEG
30711: PUSH
30712: LD_INT 2
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: PUSH
30719: LD_INT 1
30721: PUSH
30722: LD_INT 4
30724: PUSH
30725: EMPTY
30726: LIST
30727: LIST
30728: PUSH
30729: LD_INT 0
30731: PUSH
30732: LD_INT 4
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: PUSH
30739: LD_INT 1
30741: NEG
30742: PUSH
30743: LD_INT 3
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PUSH
30750: LD_INT 1
30752: PUSH
30753: LD_INT 5
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: PUSH
30760: LD_INT 0
30762: PUSH
30763: LD_INT 5
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: LD_INT 1
30772: NEG
30773: PUSH
30774: LD_INT 4
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: PUSH
30781: LD_INT 1
30783: PUSH
30784: LD_INT 6
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: LD_INT 0
30793: PUSH
30794: LD_INT 6
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: PUSH
30801: LD_INT 1
30803: NEG
30804: PUSH
30805: LD_INT 5
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: LIST
30825: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30826: LD_ADDR_VAR 0 33
30830: PUSH
30831: LD_INT 2
30833: NEG
30834: PUSH
30835: LD_INT 1
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PUSH
30842: LD_INT 3
30844: NEG
30845: PUSH
30846: LD_INT 0
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: LD_INT 3
30855: NEG
30856: PUSH
30857: LD_INT 1
30859: NEG
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 3
30867: NEG
30868: PUSH
30869: LD_INT 1
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: PUSH
30876: LD_INT 4
30878: NEG
30879: PUSH
30880: LD_INT 0
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 4
30889: NEG
30890: PUSH
30891: LD_INT 1
30893: NEG
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: LD_INT 4
30901: NEG
30902: PUSH
30903: LD_INT 1
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PUSH
30910: LD_INT 5
30912: NEG
30913: PUSH
30914: LD_INT 0
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: LD_INT 5
30923: NEG
30924: PUSH
30925: LD_INT 1
30927: NEG
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: LD_INT 5
30935: NEG
30936: PUSH
30937: LD_INT 1
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: PUSH
30944: LD_INT 6
30946: NEG
30947: PUSH
30948: LD_INT 0
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: PUSH
30955: LD_INT 6
30957: NEG
30958: PUSH
30959: LD_INT 1
30961: NEG
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30981: LD_ADDR_VAR 0 34
30985: PUSH
30986: LD_INT 2
30988: NEG
30989: PUSH
30990: LD_INT 3
30992: NEG
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: LD_INT 3
31000: NEG
31001: PUSH
31002: LD_INT 2
31004: NEG
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: LD_INT 3
31012: NEG
31013: PUSH
31014: LD_INT 3
31016: NEG
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: LD_INT 3
31024: NEG
31025: PUSH
31026: LD_INT 4
31028: NEG
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PUSH
31034: LD_INT 4
31036: NEG
31037: PUSH
31038: LD_INT 3
31040: NEG
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: LD_INT 4
31048: NEG
31049: PUSH
31050: LD_INT 4
31052: NEG
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: LD_INT 4
31060: NEG
31061: PUSH
31062: LD_INT 5
31064: NEG
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: PUSH
31070: LD_INT 5
31072: NEG
31073: PUSH
31074: LD_INT 4
31076: NEG
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: LD_INT 5
31084: NEG
31085: PUSH
31086: LD_INT 5
31088: NEG
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PUSH
31094: LD_INT 5
31096: NEG
31097: PUSH
31098: LD_INT 6
31100: NEG
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 6
31108: NEG
31109: PUSH
31110: LD_INT 5
31112: NEG
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 6
31120: NEG
31121: PUSH
31122: LD_INT 6
31124: NEG
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: LIST
31138: LIST
31139: LIST
31140: LIST
31141: LIST
31142: LIST
31143: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31144: LD_ADDR_VAR 0 41
31148: PUSH
31149: LD_INT 0
31151: PUSH
31152: LD_INT 2
31154: NEG
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: PUSH
31160: LD_INT 1
31162: NEG
31163: PUSH
31164: LD_INT 3
31166: NEG
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PUSH
31172: LD_INT 1
31174: PUSH
31175: LD_INT 2
31177: NEG
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: LIST
31187: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31188: LD_ADDR_VAR 0 42
31192: PUSH
31193: LD_INT 2
31195: PUSH
31196: LD_INT 0
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: LD_INT 2
31205: PUSH
31206: LD_INT 1
31208: NEG
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: LD_INT 3
31216: PUSH
31217: LD_INT 1
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: LIST
31228: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31229: LD_ADDR_VAR 0 43
31233: PUSH
31234: LD_INT 2
31236: PUSH
31237: LD_INT 2
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: LD_INT 3
31246: PUSH
31247: LD_INT 2
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: PUSH
31254: LD_INT 2
31256: PUSH
31257: LD_INT 3
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: LIST
31268: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31269: LD_ADDR_VAR 0 44
31273: PUSH
31274: LD_INT 0
31276: PUSH
31277: LD_INT 2
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 1
31286: PUSH
31287: LD_INT 3
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 1
31296: NEG
31297: PUSH
31298: LD_INT 2
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: LIST
31309: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31310: LD_ADDR_VAR 0 45
31314: PUSH
31315: LD_INT 2
31317: NEG
31318: PUSH
31319: LD_INT 0
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: PUSH
31326: LD_INT 2
31328: NEG
31329: PUSH
31330: LD_INT 1
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: PUSH
31337: LD_INT 3
31339: NEG
31340: PUSH
31341: LD_INT 1
31343: NEG
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: LIST
31353: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31354: LD_ADDR_VAR 0 46
31358: PUSH
31359: LD_INT 2
31361: NEG
31362: PUSH
31363: LD_INT 2
31365: NEG
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: LD_INT 2
31373: NEG
31374: PUSH
31375: LD_INT 3
31377: NEG
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PUSH
31383: LD_INT 3
31385: NEG
31386: PUSH
31387: LD_INT 2
31389: NEG
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: LIST
31399: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31400: LD_ADDR_VAR 0 47
31404: PUSH
31405: LD_INT 2
31407: NEG
31408: PUSH
31409: LD_INT 3
31411: NEG
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 1
31419: NEG
31420: PUSH
31421: LD_INT 3
31423: NEG
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31433: LD_ADDR_VAR 0 48
31437: PUSH
31438: LD_INT 1
31440: PUSH
31441: LD_INT 2
31443: NEG
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: PUSH
31449: LD_INT 2
31451: PUSH
31452: LD_INT 1
31454: NEG
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31464: LD_ADDR_VAR 0 49
31468: PUSH
31469: LD_INT 3
31471: PUSH
31472: LD_INT 1
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 3
31481: PUSH
31482: LD_INT 2
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31493: LD_ADDR_VAR 0 50
31497: PUSH
31498: LD_INT 2
31500: PUSH
31501: LD_INT 3
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: LD_INT 1
31510: PUSH
31511: LD_INT 3
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31522: LD_ADDR_VAR 0 51
31526: PUSH
31527: LD_INT 1
31529: NEG
31530: PUSH
31531: LD_INT 2
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 2
31540: NEG
31541: PUSH
31542: LD_INT 1
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31553: LD_ADDR_VAR 0 52
31557: PUSH
31558: LD_INT 3
31560: NEG
31561: PUSH
31562: LD_INT 1
31564: NEG
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: PUSH
31570: LD_INT 3
31572: NEG
31573: PUSH
31574: LD_INT 2
31576: NEG
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31586: LD_ADDR_VAR 0 53
31590: PUSH
31591: LD_INT 1
31593: NEG
31594: PUSH
31595: LD_INT 3
31597: NEG
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: PUSH
31603: LD_INT 0
31605: PUSH
31606: LD_INT 3
31608: NEG
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 1
31616: PUSH
31617: LD_INT 2
31619: NEG
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: LIST
31629: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31630: LD_ADDR_VAR 0 54
31634: PUSH
31635: LD_INT 2
31637: PUSH
31638: LD_INT 1
31640: NEG
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PUSH
31646: LD_INT 3
31648: PUSH
31649: LD_INT 0
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 3
31658: PUSH
31659: LD_INT 1
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: LIST
31670: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31671: LD_ADDR_VAR 0 55
31675: PUSH
31676: LD_INT 3
31678: PUSH
31679: LD_INT 2
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 3
31688: PUSH
31689: LD_INT 3
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 2
31698: PUSH
31699: LD_INT 3
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: LIST
31710: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31711: LD_ADDR_VAR 0 56
31715: PUSH
31716: LD_INT 1
31718: PUSH
31719: LD_INT 3
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: PUSH
31726: LD_INT 0
31728: PUSH
31729: LD_INT 3
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 1
31738: NEG
31739: PUSH
31740: LD_INT 2
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: LIST
31751: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31752: LD_ADDR_VAR 0 57
31756: PUSH
31757: LD_INT 2
31759: NEG
31760: PUSH
31761: LD_INT 1
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PUSH
31768: LD_INT 3
31770: NEG
31771: PUSH
31772: LD_INT 0
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PUSH
31779: LD_INT 3
31781: NEG
31782: PUSH
31783: LD_INT 1
31785: NEG
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: LIST
31795: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31796: LD_ADDR_VAR 0 58
31800: PUSH
31801: LD_INT 2
31803: NEG
31804: PUSH
31805: LD_INT 3
31807: NEG
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: PUSH
31813: LD_INT 3
31815: NEG
31816: PUSH
31817: LD_INT 2
31819: NEG
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PUSH
31825: LD_INT 3
31827: NEG
31828: PUSH
31829: LD_INT 3
31831: NEG
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: LIST
31841: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31842: LD_ADDR_VAR 0 59
31846: PUSH
31847: LD_INT 1
31849: NEG
31850: PUSH
31851: LD_INT 2
31853: NEG
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PUSH
31859: LD_INT 0
31861: PUSH
31862: LD_INT 2
31864: NEG
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: PUSH
31870: LD_INT 1
31872: PUSH
31873: LD_INT 1
31875: NEG
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: LIST
31885: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31886: LD_ADDR_VAR 0 60
31890: PUSH
31891: LD_INT 1
31893: PUSH
31894: LD_INT 1
31896: NEG
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: LD_INT 2
31904: PUSH
31905: LD_INT 0
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: LD_INT 2
31914: PUSH
31915: LD_INT 1
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: LIST
31926: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31927: LD_ADDR_VAR 0 61
31931: PUSH
31932: LD_INT 2
31934: PUSH
31935: LD_INT 1
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: PUSH
31942: LD_INT 2
31944: PUSH
31945: LD_INT 2
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: PUSH
31952: LD_INT 1
31954: PUSH
31955: LD_INT 2
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: LIST
31966: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31967: LD_ADDR_VAR 0 62
31971: PUSH
31972: LD_INT 1
31974: PUSH
31975: LD_INT 2
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: LD_INT 0
31984: PUSH
31985: LD_INT 2
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 1
31994: NEG
31995: PUSH
31996: LD_INT 1
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: LIST
32007: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32008: LD_ADDR_VAR 0 63
32012: PUSH
32013: LD_INT 1
32015: NEG
32016: PUSH
32017: LD_INT 1
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: LD_INT 2
32026: NEG
32027: PUSH
32028: LD_INT 0
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 2
32037: NEG
32038: PUSH
32039: LD_INT 1
32041: NEG
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: LIST
32051: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32052: LD_ADDR_VAR 0 64
32056: PUSH
32057: LD_INT 1
32059: NEG
32060: PUSH
32061: LD_INT 2
32063: NEG
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: LD_INT 2
32071: NEG
32072: PUSH
32073: LD_INT 1
32075: NEG
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 2
32083: NEG
32084: PUSH
32085: LD_INT 2
32087: NEG
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: LIST
32097: ST_TO_ADDR
// end ; 2 :
32098: GO 35364
32100: LD_INT 2
32102: DOUBLE
32103: EQUAL
32104: IFTRUE 32108
32106: GO 35363
32108: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32109: LD_ADDR_VAR 0 29
32113: PUSH
32114: LD_INT 4
32116: PUSH
32117: LD_INT 0
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: LD_INT 4
32126: PUSH
32127: LD_INT 1
32129: NEG
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: LD_INT 5
32137: PUSH
32138: LD_INT 0
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: PUSH
32145: LD_INT 5
32147: PUSH
32148: LD_INT 1
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PUSH
32155: LD_INT 4
32157: PUSH
32158: LD_INT 1
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PUSH
32165: LD_INT 3
32167: PUSH
32168: LD_INT 0
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: LD_INT 3
32177: PUSH
32178: LD_INT 1
32180: NEG
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: LD_INT 3
32188: PUSH
32189: LD_INT 2
32191: NEG
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 5
32199: PUSH
32200: LD_INT 2
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: LD_INT 3
32209: PUSH
32210: LD_INT 3
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: PUSH
32217: LD_INT 3
32219: PUSH
32220: LD_INT 2
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PUSH
32227: LD_INT 4
32229: PUSH
32230: LD_INT 3
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: PUSH
32237: LD_INT 4
32239: PUSH
32240: LD_INT 4
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 3
32249: PUSH
32250: LD_INT 4
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 2
32259: PUSH
32260: LD_INT 3
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 2
32269: PUSH
32270: LD_INT 2
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 4
32279: PUSH
32280: LD_INT 2
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 2
32289: PUSH
32290: LD_INT 4
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 0
32299: PUSH
32300: LD_INT 4
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 0
32309: PUSH
32310: LD_INT 3
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: LD_INT 1
32319: PUSH
32320: LD_INT 4
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: PUSH
32327: LD_INT 1
32329: PUSH
32330: LD_INT 5
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: PUSH
32337: LD_INT 0
32339: PUSH
32340: LD_INT 5
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 1
32349: NEG
32350: PUSH
32351: LD_INT 4
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 1
32360: NEG
32361: PUSH
32362: LD_INT 3
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: LD_INT 2
32371: PUSH
32372: LD_INT 5
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PUSH
32379: LD_INT 2
32381: NEG
32382: PUSH
32383: LD_INT 3
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PUSH
32390: LD_INT 3
32392: NEG
32393: PUSH
32394: LD_INT 0
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 3
32403: NEG
32404: PUSH
32405: LD_INT 1
32407: NEG
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: LD_INT 2
32415: NEG
32416: PUSH
32417: LD_INT 0
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: PUSH
32424: LD_INT 2
32426: NEG
32427: PUSH
32428: LD_INT 1
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: PUSH
32435: LD_INT 3
32437: NEG
32438: PUSH
32439: LD_INT 1
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PUSH
32446: LD_INT 4
32448: NEG
32449: PUSH
32450: LD_INT 0
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 4
32459: NEG
32460: PUSH
32461: LD_INT 1
32463: NEG
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 4
32471: NEG
32472: PUSH
32473: LD_INT 2
32475: NEG
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: PUSH
32481: LD_INT 2
32483: NEG
32484: PUSH
32485: LD_INT 2
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 4
32494: NEG
32495: PUSH
32496: LD_INT 4
32498: NEG
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 4
32506: NEG
32507: PUSH
32508: LD_INT 5
32510: NEG
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PUSH
32516: LD_INT 3
32518: NEG
32519: PUSH
32520: LD_INT 4
32522: NEG
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: PUSH
32528: LD_INT 3
32530: NEG
32531: PUSH
32532: LD_INT 3
32534: NEG
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PUSH
32540: LD_INT 4
32542: NEG
32543: PUSH
32544: LD_INT 3
32546: NEG
32547: PUSH
32548: EMPTY
32549: LIST
32550: LIST
32551: PUSH
32552: LD_INT 5
32554: NEG
32555: PUSH
32556: LD_INT 4
32558: NEG
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 5
32566: NEG
32567: PUSH
32568: LD_INT 5
32570: NEG
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 3
32578: NEG
32579: PUSH
32580: LD_INT 5
32582: NEG
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 5
32590: NEG
32591: PUSH
32592: LD_INT 3
32594: NEG
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32647: LD_ADDR_VAR 0 30
32651: PUSH
32652: LD_INT 4
32654: PUSH
32655: LD_INT 4
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 4
32664: PUSH
32665: LD_INT 3
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 5
32674: PUSH
32675: LD_INT 4
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 5
32684: PUSH
32685: LD_INT 5
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 4
32694: PUSH
32695: LD_INT 5
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 3
32704: PUSH
32705: LD_INT 4
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: LD_INT 3
32714: PUSH
32715: LD_INT 3
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 5
32724: PUSH
32725: LD_INT 3
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PUSH
32732: LD_INT 3
32734: PUSH
32735: LD_INT 5
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: PUSH
32742: LD_INT 0
32744: PUSH
32745: LD_INT 3
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PUSH
32752: LD_INT 0
32754: PUSH
32755: LD_INT 2
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: PUSH
32762: LD_INT 1
32764: PUSH
32765: LD_INT 3
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: PUSH
32772: LD_INT 1
32774: PUSH
32775: LD_INT 4
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: LD_INT 0
32784: PUSH
32785: LD_INT 4
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: PUSH
32792: LD_INT 1
32794: NEG
32795: PUSH
32796: LD_INT 3
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: LD_INT 1
32805: NEG
32806: PUSH
32807: LD_INT 2
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 2
32816: PUSH
32817: LD_INT 4
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PUSH
32824: LD_INT 2
32826: NEG
32827: PUSH
32828: LD_INT 2
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: LD_INT 4
32837: NEG
32838: PUSH
32839: LD_INT 0
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: PUSH
32846: LD_INT 4
32848: NEG
32849: PUSH
32850: LD_INT 1
32852: NEG
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 3
32860: NEG
32861: PUSH
32862: LD_INT 0
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PUSH
32869: LD_INT 3
32871: NEG
32872: PUSH
32873: LD_INT 1
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: PUSH
32880: LD_INT 4
32882: NEG
32883: PUSH
32884: LD_INT 1
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: PUSH
32891: LD_INT 5
32893: NEG
32894: PUSH
32895: LD_INT 0
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: LD_INT 5
32904: NEG
32905: PUSH
32906: LD_INT 1
32908: NEG
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PUSH
32914: LD_INT 5
32916: NEG
32917: PUSH
32918: LD_INT 2
32920: NEG
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PUSH
32926: LD_INT 3
32928: NEG
32929: PUSH
32930: LD_INT 2
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 3
32939: NEG
32940: PUSH
32941: LD_INT 3
32943: NEG
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 3
32951: NEG
32952: PUSH
32953: LD_INT 4
32955: NEG
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 2
32963: NEG
32964: PUSH
32965: LD_INT 3
32967: NEG
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: LD_INT 2
32975: NEG
32976: PUSH
32977: LD_INT 2
32979: NEG
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: PUSH
32985: LD_INT 3
32987: NEG
32988: PUSH
32989: LD_INT 2
32991: NEG
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 4
32999: NEG
33000: PUSH
33001: LD_INT 3
33003: NEG
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 4
33011: NEG
33012: PUSH
33013: LD_INT 4
33015: NEG
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 2
33023: NEG
33024: PUSH
33025: LD_INT 4
33027: NEG
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 4
33035: NEG
33036: PUSH
33037: LD_INT 2
33039: NEG
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 0
33047: PUSH
33048: LD_INT 4
33050: NEG
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 0
33058: PUSH
33059: LD_INT 5
33061: NEG
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: LD_INT 1
33069: PUSH
33070: LD_INT 4
33072: NEG
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 1
33080: PUSH
33081: LD_INT 3
33083: NEG
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PUSH
33089: LD_INT 0
33091: PUSH
33092: LD_INT 3
33094: NEG
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: PUSH
33100: LD_INT 1
33102: NEG
33103: PUSH
33104: LD_INT 4
33106: NEG
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: PUSH
33112: LD_INT 1
33114: NEG
33115: PUSH
33116: LD_INT 5
33118: NEG
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 2
33126: PUSH
33127: LD_INT 3
33129: NEG
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: PUSH
33135: LD_INT 2
33137: NEG
33138: PUSH
33139: LD_INT 5
33141: NEG
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33194: LD_ADDR_VAR 0 31
33198: PUSH
33199: LD_INT 0
33201: PUSH
33202: LD_INT 4
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 0
33211: PUSH
33212: LD_INT 3
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PUSH
33219: LD_INT 1
33221: PUSH
33222: LD_INT 4
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: LD_INT 1
33231: PUSH
33232: LD_INT 5
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: LD_INT 0
33241: PUSH
33242: LD_INT 5
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 1
33251: NEG
33252: PUSH
33253: LD_INT 4
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 1
33262: NEG
33263: PUSH
33264: LD_INT 3
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: LD_INT 2
33273: PUSH
33274: LD_INT 5
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: PUSH
33281: LD_INT 2
33283: NEG
33284: PUSH
33285: LD_INT 3
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: PUSH
33292: LD_INT 3
33294: NEG
33295: PUSH
33296: LD_INT 0
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: PUSH
33303: LD_INT 3
33305: NEG
33306: PUSH
33307: LD_INT 1
33309: NEG
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 2
33317: NEG
33318: PUSH
33319: LD_INT 0
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: PUSH
33326: LD_INT 2
33328: NEG
33329: PUSH
33330: LD_INT 1
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: LD_INT 3
33339: NEG
33340: PUSH
33341: LD_INT 1
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: PUSH
33348: LD_INT 4
33350: NEG
33351: PUSH
33352: LD_INT 0
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: PUSH
33359: LD_INT 4
33361: NEG
33362: PUSH
33363: LD_INT 1
33365: NEG
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 4
33373: NEG
33374: PUSH
33375: LD_INT 2
33377: NEG
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: PUSH
33383: LD_INT 2
33385: NEG
33386: PUSH
33387: LD_INT 2
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: PUSH
33394: LD_INT 4
33396: NEG
33397: PUSH
33398: LD_INT 4
33400: NEG
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 4
33408: NEG
33409: PUSH
33410: LD_INT 5
33412: NEG
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 3
33420: NEG
33421: PUSH
33422: LD_INT 4
33424: NEG
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: LD_INT 3
33432: NEG
33433: PUSH
33434: LD_INT 3
33436: NEG
33437: PUSH
33438: EMPTY
33439: LIST
33440: LIST
33441: PUSH
33442: LD_INT 4
33444: NEG
33445: PUSH
33446: LD_INT 3
33448: NEG
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: PUSH
33454: LD_INT 5
33456: NEG
33457: PUSH
33458: LD_INT 4
33460: NEG
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: PUSH
33466: LD_INT 5
33468: NEG
33469: PUSH
33470: LD_INT 5
33472: NEG
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: PUSH
33478: LD_INT 3
33480: NEG
33481: PUSH
33482: LD_INT 5
33484: NEG
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 5
33492: NEG
33493: PUSH
33494: LD_INT 3
33496: NEG
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 0
33504: PUSH
33505: LD_INT 3
33507: NEG
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 0
33515: PUSH
33516: LD_INT 4
33518: NEG
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: PUSH
33524: LD_INT 1
33526: PUSH
33527: LD_INT 3
33529: NEG
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: PUSH
33535: LD_INT 1
33537: PUSH
33538: LD_INT 2
33540: NEG
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: PUSH
33546: LD_INT 0
33548: PUSH
33549: LD_INT 2
33551: NEG
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PUSH
33557: LD_INT 1
33559: NEG
33560: PUSH
33561: LD_INT 3
33563: NEG
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: PUSH
33569: LD_INT 1
33571: NEG
33572: PUSH
33573: LD_INT 4
33575: NEG
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 2
33583: PUSH
33584: LD_INT 2
33586: NEG
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 2
33594: NEG
33595: PUSH
33596: LD_INT 4
33598: NEG
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 4
33606: PUSH
33607: LD_INT 0
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 4
33616: PUSH
33617: LD_INT 1
33619: NEG
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PUSH
33625: LD_INT 5
33627: PUSH
33628: LD_INT 0
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: PUSH
33635: LD_INT 5
33637: PUSH
33638: LD_INT 1
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 4
33647: PUSH
33648: LD_INT 1
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 3
33657: PUSH
33658: LD_INT 0
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 3
33667: PUSH
33668: LD_INT 1
33670: NEG
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: PUSH
33676: LD_INT 3
33678: PUSH
33679: LD_INT 2
33681: NEG
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: PUSH
33687: LD_INT 5
33689: PUSH
33690: LD_INT 2
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33744: LD_ADDR_VAR 0 32
33748: PUSH
33749: LD_INT 4
33751: NEG
33752: PUSH
33753: LD_INT 0
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: PUSH
33760: LD_INT 4
33762: NEG
33763: PUSH
33764: LD_INT 1
33766: NEG
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: PUSH
33772: LD_INT 3
33774: NEG
33775: PUSH
33776: LD_INT 0
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: LD_INT 3
33785: NEG
33786: PUSH
33787: LD_INT 1
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: PUSH
33794: LD_INT 4
33796: NEG
33797: PUSH
33798: LD_INT 1
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PUSH
33805: LD_INT 5
33807: NEG
33808: PUSH
33809: LD_INT 0
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: PUSH
33816: LD_INT 5
33818: NEG
33819: PUSH
33820: LD_INT 1
33822: NEG
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: PUSH
33828: LD_INT 5
33830: NEG
33831: PUSH
33832: LD_INT 2
33834: NEG
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: LD_INT 3
33842: NEG
33843: PUSH
33844: LD_INT 2
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: PUSH
33851: LD_INT 3
33853: NEG
33854: PUSH
33855: LD_INT 3
33857: NEG
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 3
33865: NEG
33866: PUSH
33867: LD_INT 4
33869: NEG
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 2
33877: NEG
33878: PUSH
33879: LD_INT 3
33881: NEG
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 2
33889: NEG
33890: PUSH
33891: LD_INT 2
33893: NEG
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: LD_INT 3
33901: NEG
33902: PUSH
33903: LD_INT 2
33905: NEG
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 4
33913: NEG
33914: PUSH
33915: LD_INT 3
33917: NEG
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PUSH
33923: LD_INT 4
33925: NEG
33926: PUSH
33927: LD_INT 4
33929: NEG
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: PUSH
33935: LD_INT 2
33937: NEG
33938: PUSH
33939: LD_INT 4
33941: NEG
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: PUSH
33947: LD_INT 4
33949: NEG
33950: PUSH
33951: LD_INT 2
33953: NEG
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 0
33961: PUSH
33962: LD_INT 4
33964: NEG
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 0
33972: PUSH
33973: LD_INT 5
33975: NEG
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: PUSH
33981: LD_INT 1
33983: PUSH
33984: LD_INT 4
33986: NEG
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: PUSH
33992: LD_INT 1
33994: PUSH
33995: LD_INT 3
33997: NEG
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PUSH
34003: LD_INT 0
34005: PUSH
34006: LD_INT 3
34008: NEG
34009: PUSH
34010: EMPTY
34011: LIST
34012: LIST
34013: PUSH
34014: LD_INT 1
34016: NEG
34017: PUSH
34018: LD_INT 4
34020: NEG
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: PUSH
34026: LD_INT 1
34028: NEG
34029: PUSH
34030: LD_INT 5
34032: NEG
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: PUSH
34038: LD_INT 2
34040: PUSH
34041: LD_INT 3
34043: NEG
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: LD_INT 2
34051: NEG
34052: PUSH
34053: LD_INT 5
34055: NEG
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 3
34063: PUSH
34064: LD_INT 0
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 3
34073: PUSH
34074: LD_INT 1
34076: NEG
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 4
34084: PUSH
34085: LD_INT 0
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 4
34094: PUSH
34095: LD_INT 1
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: PUSH
34102: LD_INT 3
34104: PUSH
34105: LD_INT 1
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: PUSH
34112: LD_INT 2
34114: PUSH
34115: LD_INT 0
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 2
34124: PUSH
34125: LD_INT 1
34127: NEG
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PUSH
34133: LD_INT 2
34135: PUSH
34136: LD_INT 2
34138: NEG
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: LD_INT 4
34146: PUSH
34147: LD_INT 2
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PUSH
34154: LD_INT 4
34156: PUSH
34157: LD_INT 4
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: PUSH
34164: LD_INT 4
34166: PUSH
34167: LD_INT 3
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: PUSH
34174: LD_INT 5
34176: PUSH
34177: LD_INT 4
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PUSH
34184: LD_INT 5
34186: PUSH
34187: LD_INT 5
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PUSH
34194: LD_INT 4
34196: PUSH
34197: LD_INT 5
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: LD_INT 3
34206: PUSH
34207: LD_INT 4
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: PUSH
34214: LD_INT 3
34216: PUSH
34217: LD_INT 3
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: PUSH
34224: LD_INT 5
34226: PUSH
34227: LD_INT 3
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: PUSH
34234: LD_INT 3
34236: PUSH
34237: LD_INT 5
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34291: LD_ADDR_VAR 0 33
34295: PUSH
34296: LD_INT 4
34298: NEG
34299: PUSH
34300: LD_INT 4
34302: NEG
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 4
34310: NEG
34311: PUSH
34312: LD_INT 5
34314: NEG
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: LD_INT 3
34322: NEG
34323: PUSH
34324: LD_INT 4
34326: NEG
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 3
34334: NEG
34335: PUSH
34336: LD_INT 3
34338: NEG
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: PUSH
34344: LD_INT 4
34346: NEG
34347: PUSH
34348: LD_INT 3
34350: NEG
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 5
34358: NEG
34359: PUSH
34360: LD_INT 4
34362: NEG
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 5
34370: NEG
34371: PUSH
34372: LD_INT 5
34374: NEG
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 3
34382: NEG
34383: PUSH
34384: LD_INT 5
34386: NEG
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_INT 5
34394: NEG
34395: PUSH
34396: LD_INT 3
34398: NEG
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: LD_INT 0
34406: PUSH
34407: LD_INT 3
34409: NEG
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: LD_INT 0
34417: PUSH
34418: LD_INT 4
34420: NEG
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PUSH
34426: LD_INT 1
34428: PUSH
34429: LD_INT 3
34431: NEG
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: LD_INT 1
34439: PUSH
34440: LD_INT 2
34442: NEG
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: PUSH
34448: LD_INT 0
34450: PUSH
34451: LD_INT 2
34453: NEG
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: PUSH
34459: LD_INT 1
34461: NEG
34462: PUSH
34463: LD_INT 3
34465: NEG
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: PUSH
34471: LD_INT 1
34473: NEG
34474: PUSH
34475: LD_INT 4
34477: NEG
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: LD_INT 2
34485: PUSH
34486: LD_INT 2
34488: NEG
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: LD_INT 2
34496: NEG
34497: PUSH
34498: LD_INT 4
34500: NEG
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: LD_INT 4
34508: PUSH
34509: LD_INT 0
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PUSH
34516: LD_INT 4
34518: PUSH
34519: LD_INT 1
34521: NEG
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: LD_INT 5
34529: PUSH
34530: LD_INT 0
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: LD_INT 5
34539: PUSH
34540: LD_INT 1
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: PUSH
34547: LD_INT 4
34549: PUSH
34550: LD_INT 1
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: PUSH
34557: LD_INT 3
34559: PUSH
34560: LD_INT 0
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: PUSH
34567: LD_INT 3
34569: PUSH
34570: LD_INT 1
34572: NEG
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: PUSH
34578: LD_INT 3
34580: PUSH
34581: LD_INT 2
34583: NEG
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: PUSH
34589: LD_INT 5
34591: PUSH
34592: LD_INT 2
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: PUSH
34599: LD_INT 3
34601: PUSH
34602: LD_INT 3
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: PUSH
34609: LD_INT 3
34611: PUSH
34612: LD_INT 2
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: LD_INT 4
34621: PUSH
34622: LD_INT 3
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: LD_INT 4
34631: PUSH
34632: LD_INT 4
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 3
34641: PUSH
34642: LD_INT 4
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 2
34651: PUSH
34652: LD_INT 3
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PUSH
34659: LD_INT 2
34661: PUSH
34662: LD_INT 2
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 4
34671: PUSH
34672: LD_INT 2
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 2
34681: PUSH
34682: LD_INT 4
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 0
34691: PUSH
34692: LD_INT 4
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: PUSH
34699: LD_INT 0
34701: PUSH
34702: LD_INT 3
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: PUSH
34709: LD_INT 1
34711: PUSH
34712: LD_INT 4
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: PUSH
34719: LD_INT 1
34721: PUSH
34722: LD_INT 5
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: PUSH
34729: LD_INT 0
34731: PUSH
34732: LD_INT 5
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PUSH
34739: LD_INT 1
34741: NEG
34742: PUSH
34743: LD_INT 4
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 1
34752: NEG
34753: PUSH
34754: LD_INT 3
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 2
34763: PUSH
34764: LD_INT 5
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 2
34773: NEG
34774: PUSH
34775: LD_INT 3
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: LIST
34826: LIST
34827: LIST
34828: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34829: LD_ADDR_VAR 0 34
34833: PUSH
34834: LD_INT 0
34836: PUSH
34837: LD_INT 4
34839: NEG
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: LD_INT 0
34847: PUSH
34848: LD_INT 5
34850: NEG
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: PUSH
34856: LD_INT 1
34858: PUSH
34859: LD_INT 4
34861: NEG
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: PUSH
34867: LD_INT 1
34869: PUSH
34870: LD_INT 3
34872: NEG
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_INT 0
34880: PUSH
34881: LD_INT 3
34883: NEG
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 1
34891: NEG
34892: PUSH
34893: LD_INT 4
34895: NEG
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: PUSH
34901: LD_INT 1
34903: NEG
34904: PUSH
34905: LD_INT 5
34907: NEG
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 2
34915: PUSH
34916: LD_INT 3
34918: NEG
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 2
34926: NEG
34927: PUSH
34928: LD_INT 5
34930: NEG
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 3
34938: PUSH
34939: LD_INT 0
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: PUSH
34946: LD_INT 3
34948: PUSH
34949: LD_INT 1
34951: NEG
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: PUSH
34957: LD_INT 4
34959: PUSH
34960: LD_INT 0
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: PUSH
34967: LD_INT 4
34969: PUSH
34970: LD_INT 1
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: PUSH
34977: LD_INT 3
34979: PUSH
34980: LD_INT 1
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: PUSH
34987: LD_INT 2
34989: PUSH
34990: LD_INT 0
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: PUSH
34997: LD_INT 2
34999: PUSH
35000: LD_INT 1
35002: NEG
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: LD_INT 2
35010: PUSH
35011: LD_INT 2
35013: NEG
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PUSH
35019: LD_INT 4
35021: PUSH
35022: LD_INT 2
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: PUSH
35029: LD_INT 4
35031: PUSH
35032: LD_INT 4
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: PUSH
35039: LD_INT 4
35041: PUSH
35042: LD_INT 3
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: PUSH
35049: LD_INT 5
35051: PUSH
35052: LD_INT 4
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PUSH
35059: LD_INT 5
35061: PUSH
35062: LD_INT 5
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: PUSH
35069: LD_INT 4
35071: PUSH
35072: LD_INT 5
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: LD_INT 3
35081: PUSH
35082: LD_INT 4
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 3
35091: PUSH
35092: LD_INT 3
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: PUSH
35099: LD_INT 5
35101: PUSH
35102: LD_INT 3
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: PUSH
35109: LD_INT 3
35111: PUSH
35112: LD_INT 5
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: PUSH
35119: LD_INT 0
35121: PUSH
35122: LD_INT 3
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: PUSH
35129: LD_INT 0
35131: PUSH
35132: LD_INT 2
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: LD_INT 1
35141: PUSH
35142: LD_INT 3
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: PUSH
35149: LD_INT 1
35151: PUSH
35152: LD_INT 4
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PUSH
35159: LD_INT 0
35161: PUSH
35162: LD_INT 4
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: LD_INT 1
35171: NEG
35172: PUSH
35173: LD_INT 3
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 1
35182: NEG
35183: PUSH
35184: LD_INT 2
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: PUSH
35191: LD_INT 2
35193: PUSH
35194: LD_INT 4
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: PUSH
35201: LD_INT 2
35203: NEG
35204: PUSH
35205: LD_INT 2
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: PUSH
35212: LD_INT 4
35214: NEG
35215: PUSH
35216: LD_INT 0
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: PUSH
35223: LD_INT 4
35225: NEG
35226: PUSH
35227: LD_INT 1
35229: NEG
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PUSH
35235: LD_INT 3
35237: NEG
35238: PUSH
35239: LD_INT 0
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: PUSH
35246: LD_INT 3
35248: NEG
35249: PUSH
35250: LD_INT 1
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: PUSH
35257: LD_INT 4
35259: NEG
35260: PUSH
35261: LD_INT 1
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PUSH
35268: LD_INT 5
35270: NEG
35271: PUSH
35272: LD_INT 0
35274: PUSH
35275: EMPTY
35276: LIST
35277: LIST
35278: PUSH
35279: LD_INT 5
35281: NEG
35282: PUSH
35283: LD_INT 1
35285: NEG
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 5
35293: NEG
35294: PUSH
35295: LD_INT 2
35297: NEG
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: LD_INT 3
35305: NEG
35306: PUSH
35307: LD_INT 2
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: ST_TO_ADDR
// end ; end ;
35361: GO 35364
35363: POP
// case btype of b_depot , b_warehouse :
35364: LD_VAR 0 1
35368: PUSH
35369: LD_INT 0
35371: DOUBLE
35372: EQUAL
35373: IFTRUE 35383
35375: LD_INT 1
35377: DOUBLE
35378: EQUAL
35379: IFTRUE 35383
35381: GO 35584
35383: POP
// case nation of nation_american :
35384: LD_VAR 0 5
35388: PUSH
35389: LD_INT 1
35391: DOUBLE
35392: EQUAL
35393: IFTRUE 35397
35395: GO 35453
35397: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35398: LD_ADDR_VAR 0 9
35402: PUSH
35403: LD_VAR 0 11
35407: PUSH
35408: LD_VAR 0 12
35412: PUSH
35413: LD_VAR 0 13
35417: PUSH
35418: LD_VAR 0 14
35422: PUSH
35423: LD_VAR 0 15
35427: PUSH
35428: LD_VAR 0 16
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: LIST
35437: LIST
35438: LIST
35439: LIST
35440: PUSH
35441: LD_VAR 0 4
35445: PUSH
35446: LD_INT 1
35448: PLUS
35449: ARRAY
35450: ST_TO_ADDR
35451: GO 35582
35453: LD_INT 2
35455: DOUBLE
35456: EQUAL
35457: IFTRUE 35461
35459: GO 35517
35461: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35462: LD_ADDR_VAR 0 9
35466: PUSH
35467: LD_VAR 0 17
35471: PUSH
35472: LD_VAR 0 18
35476: PUSH
35477: LD_VAR 0 19
35481: PUSH
35482: LD_VAR 0 20
35486: PUSH
35487: LD_VAR 0 21
35491: PUSH
35492: LD_VAR 0 22
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: LIST
35501: LIST
35502: LIST
35503: LIST
35504: PUSH
35505: LD_VAR 0 4
35509: PUSH
35510: LD_INT 1
35512: PLUS
35513: ARRAY
35514: ST_TO_ADDR
35515: GO 35582
35517: LD_INT 3
35519: DOUBLE
35520: EQUAL
35521: IFTRUE 35525
35523: GO 35581
35525: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35526: LD_ADDR_VAR 0 9
35530: PUSH
35531: LD_VAR 0 23
35535: PUSH
35536: LD_VAR 0 24
35540: PUSH
35541: LD_VAR 0 25
35545: PUSH
35546: LD_VAR 0 26
35550: PUSH
35551: LD_VAR 0 27
35555: PUSH
35556: LD_VAR 0 28
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: LIST
35565: LIST
35566: LIST
35567: LIST
35568: PUSH
35569: LD_VAR 0 4
35573: PUSH
35574: LD_INT 1
35576: PLUS
35577: ARRAY
35578: ST_TO_ADDR
35579: GO 35582
35581: POP
35582: GO 36137
35584: LD_INT 2
35586: DOUBLE
35587: EQUAL
35588: IFTRUE 35598
35590: LD_INT 3
35592: DOUBLE
35593: EQUAL
35594: IFTRUE 35598
35596: GO 35654
35598: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35599: LD_ADDR_VAR 0 9
35603: PUSH
35604: LD_VAR 0 29
35608: PUSH
35609: LD_VAR 0 30
35613: PUSH
35614: LD_VAR 0 31
35618: PUSH
35619: LD_VAR 0 32
35623: PUSH
35624: LD_VAR 0 33
35628: PUSH
35629: LD_VAR 0 34
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: PUSH
35642: LD_VAR 0 4
35646: PUSH
35647: LD_INT 1
35649: PLUS
35650: ARRAY
35651: ST_TO_ADDR
35652: GO 36137
35654: LD_INT 16
35656: DOUBLE
35657: EQUAL
35658: IFTRUE 35716
35660: LD_INT 17
35662: DOUBLE
35663: EQUAL
35664: IFTRUE 35716
35666: LD_INT 18
35668: DOUBLE
35669: EQUAL
35670: IFTRUE 35716
35672: LD_INT 19
35674: DOUBLE
35675: EQUAL
35676: IFTRUE 35716
35678: LD_INT 22
35680: DOUBLE
35681: EQUAL
35682: IFTRUE 35716
35684: LD_INT 20
35686: DOUBLE
35687: EQUAL
35688: IFTRUE 35716
35690: LD_INT 21
35692: DOUBLE
35693: EQUAL
35694: IFTRUE 35716
35696: LD_INT 23
35698: DOUBLE
35699: EQUAL
35700: IFTRUE 35716
35702: LD_INT 24
35704: DOUBLE
35705: EQUAL
35706: IFTRUE 35716
35708: LD_INT 25
35710: DOUBLE
35711: EQUAL
35712: IFTRUE 35716
35714: GO 35772
35716: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35717: LD_ADDR_VAR 0 9
35721: PUSH
35722: LD_VAR 0 35
35726: PUSH
35727: LD_VAR 0 36
35731: PUSH
35732: LD_VAR 0 37
35736: PUSH
35737: LD_VAR 0 38
35741: PUSH
35742: LD_VAR 0 39
35746: PUSH
35747: LD_VAR 0 40
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: LIST
35756: LIST
35757: LIST
35758: LIST
35759: PUSH
35760: LD_VAR 0 4
35764: PUSH
35765: LD_INT 1
35767: PLUS
35768: ARRAY
35769: ST_TO_ADDR
35770: GO 36137
35772: LD_INT 6
35774: DOUBLE
35775: EQUAL
35776: IFTRUE 35828
35778: LD_INT 7
35780: DOUBLE
35781: EQUAL
35782: IFTRUE 35828
35784: LD_INT 8
35786: DOUBLE
35787: EQUAL
35788: IFTRUE 35828
35790: LD_INT 13
35792: DOUBLE
35793: EQUAL
35794: IFTRUE 35828
35796: LD_INT 12
35798: DOUBLE
35799: EQUAL
35800: IFTRUE 35828
35802: LD_INT 15
35804: DOUBLE
35805: EQUAL
35806: IFTRUE 35828
35808: LD_INT 11
35810: DOUBLE
35811: EQUAL
35812: IFTRUE 35828
35814: LD_INT 14
35816: DOUBLE
35817: EQUAL
35818: IFTRUE 35828
35820: LD_INT 10
35822: DOUBLE
35823: EQUAL
35824: IFTRUE 35828
35826: GO 35884
35828: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35829: LD_ADDR_VAR 0 9
35833: PUSH
35834: LD_VAR 0 41
35838: PUSH
35839: LD_VAR 0 42
35843: PUSH
35844: LD_VAR 0 43
35848: PUSH
35849: LD_VAR 0 44
35853: PUSH
35854: LD_VAR 0 45
35858: PUSH
35859: LD_VAR 0 46
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: PUSH
35872: LD_VAR 0 4
35876: PUSH
35877: LD_INT 1
35879: PLUS
35880: ARRAY
35881: ST_TO_ADDR
35882: GO 36137
35884: LD_INT 36
35886: DOUBLE
35887: EQUAL
35888: IFTRUE 35892
35890: GO 35948
35892: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35893: LD_ADDR_VAR 0 9
35897: PUSH
35898: LD_VAR 0 47
35902: PUSH
35903: LD_VAR 0 48
35907: PUSH
35908: LD_VAR 0 49
35912: PUSH
35913: LD_VAR 0 50
35917: PUSH
35918: LD_VAR 0 51
35922: PUSH
35923: LD_VAR 0 52
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: LIST
35932: LIST
35933: LIST
35934: LIST
35935: PUSH
35936: LD_VAR 0 4
35940: PUSH
35941: LD_INT 1
35943: PLUS
35944: ARRAY
35945: ST_TO_ADDR
35946: GO 36137
35948: LD_INT 4
35950: DOUBLE
35951: EQUAL
35952: IFTRUE 35974
35954: LD_INT 5
35956: DOUBLE
35957: EQUAL
35958: IFTRUE 35974
35960: LD_INT 34
35962: DOUBLE
35963: EQUAL
35964: IFTRUE 35974
35966: LD_INT 37
35968: DOUBLE
35969: EQUAL
35970: IFTRUE 35974
35972: GO 36030
35974: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35975: LD_ADDR_VAR 0 9
35979: PUSH
35980: LD_VAR 0 53
35984: PUSH
35985: LD_VAR 0 54
35989: PUSH
35990: LD_VAR 0 55
35994: PUSH
35995: LD_VAR 0 56
35999: PUSH
36000: LD_VAR 0 57
36004: PUSH
36005: LD_VAR 0 58
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: LIST
36014: LIST
36015: LIST
36016: LIST
36017: PUSH
36018: LD_VAR 0 4
36022: PUSH
36023: LD_INT 1
36025: PLUS
36026: ARRAY
36027: ST_TO_ADDR
36028: GO 36137
36030: LD_INT 31
36032: DOUBLE
36033: EQUAL
36034: IFTRUE 36080
36036: LD_INT 32
36038: DOUBLE
36039: EQUAL
36040: IFTRUE 36080
36042: LD_INT 33
36044: DOUBLE
36045: EQUAL
36046: IFTRUE 36080
36048: LD_INT 27
36050: DOUBLE
36051: EQUAL
36052: IFTRUE 36080
36054: LD_INT 26
36056: DOUBLE
36057: EQUAL
36058: IFTRUE 36080
36060: LD_INT 28
36062: DOUBLE
36063: EQUAL
36064: IFTRUE 36080
36066: LD_INT 29
36068: DOUBLE
36069: EQUAL
36070: IFTRUE 36080
36072: LD_INT 30
36074: DOUBLE
36075: EQUAL
36076: IFTRUE 36080
36078: GO 36136
36080: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
36081: LD_ADDR_VAR 0 9
36085: PUSH
36086: LD_VAR 0 59
36090: PUSH
36091: LD_VAR 0 60
36095: PUSH
36096: LD_VAR 0 61
36100: PUSH
36101: LD_VAR 0 62
36105: PUSH
36106: LD_VAR 0 63
36110: PUSH
36111: LD_VAR 0 64
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: LIST
36123: PUSH
36124: LD_VAR 0 4
36128: PUSH
36129: LD_INT 1
36131: PLUS
36132: ARRAY
36133: ST_TO_ADDR
36134: GO 36137
36136: POP
// temp_list2 = [ ] ;
36137: LD_ADDR_VAR 0 10
36141: PUSH
36142: EMPTY
36143: ST_TO_ADDR
// for i in temp_list do
36144: LD_ADDR_VAR 0 8
36148: PUSH
36149: LD_VAR 0 9
36153: PUSH
36154: FOR_IN
36155: IFFALSE 36207
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36157: LD_ADDR_VAR 0 10
36161: PUSH
36162: LD_VAR 0 10
36166: PUSH
36167: LD_VAR 0 8
36171: PUSH
36172: LD_INT 1
36174: ARRAY
36175: PUSH
36176: LD_VAR 0 2
36180: PLUS
36181: PUSH
36182: LD_VAR 0 8
36186: PUSH
36187: LD_INT 2
36189: ARRAY
36190: PUSH
36191: LD_VAR 0 3
36195: PLUS
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: EMPTY
36202: LIST
36203: ADD
36204: ST_TO_ADDR
36205: GO 36154
36207: POP
36208: POP
// result = temp_list2 ;
36209: LD_ADDR_VAR 0 7
36213: PUSH
36214: LD_VAR 0 10
36218: ST_TO_ADDR
// end ;
36219: LD_VAR 0 7
36223: RET
// export function EnemyInRange ( unit , dist ) ; begin
36224: LD_INT 0
36226: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36227: LD_ADDR_VAR 0 3
36231: PUSH
36232: LD_VAR 0 1
36236: PPUSH
36237: CALL_OW 255
36241: PPUSH
36242: LD_VAR 0 1
36246: PPUSH
36247: CALL_OW 250
36251: PPUSH
36252: LD_VAR 0 1
36256: PPUSH
36257: CALL_OW 251
36261: PPUSH
36262: LD_VAR 0 2
36266: PPUSH
36267: CALL 9620 0 4
36271: PUSH
36272: LD_INT 4
36274: ARRAY
36275: ST_TO_ADDR
// end ;
36276: LD_VAR 0 3
36280: RET
// export function PlayerSeeMe ( unit ) ; begin
36281: LD_INT 0
36283: PPUSH
// result := See ( your_side , unit ) ;
36284: LD_ADDR_VAR 0 2
36288: PUSH
36289: LD_OWVAR 2
36293: PPUSH
36294: LD_VAR 0 1
36298: PPUSH
36299: CALL_OW 292
36303: ST_TO_ADDR
// end ;
36304: LD_VAR 0 2
36308: RET
// export function ReverseDir ( unit ) ; begin
36309: LD_INT 0
36311: PPUSH
// if not unit then
36312: LD_VAR 0 1
36316: NOT
36317: IFFALSE 36321
// exit ;
36319: GO 36344
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36321: LD_ADDR_VAR 0 2
36325: PUSH
36326: LD_VAR 0 1
36330: PPUSH
36331: CALL_OW 254
36335: PUSH
36336: LD_INT 3
36338: PLUS
36339: PUSH
36340: LD_INT 6
36342: MOD
36343: ST_TO_ADDR
// end ;
36344: LD_VAR 0 2
36348: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
36349: LD_INT 0
36351: PPUSH
36352: PPUSH
36353: PPUSH
36354: PPUSH
36355: PPUSH
// if not hexes then
36356: LD_VAR 0 2
36360: NOT
36361: IFFALSE 36365
// exit ;
36363: GO 36513
// dist := 9999 ;
36365: LD_ADDR_VAR 0 5
36369: PUSH
36370: LD_INT 9999
36372: ST_TO_ADDR
// for i = 1 to hexes do
36373: LD_ADDR_VAR 0 4
36377: PUSH
36378: DOUBLE
36379: LD_INT 1
36381: DEC
36382: ST_TO_ADDR
36383: LD_VAR 0 2
36387: PUSH
36388: FOR_TO
36389: IFFALSE 36501
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
36391: LD_VAR 0 1
36395: PPUSH
36396: LD_VAR 0 2
36400: PUSH
36401: LD_VAR 0 4
36405: ARRAY
36406: PUSH
36407: LD_INT 1
36409: ARRAY
36410: PPUSH
36411: LD_VAR 0 2
36415: PUSH
36416: LD_VAR 0 4
36420: ARRAY
36421: PUSH
36422: LD_INT 2
36424: ARRAY
36425: PPUSH
36426: CALL_OW 297
36430: PUSH
36431: LD_VAR 0 5
36435: LESS
36436: IFFALSE 36499
// begin hex := hexes [ i ] ;
36438: LD_ADDR_VAR 0 7
36442: PUSH
36443: LD_VAR 0 2
36447: PUSH
36448: LD_VAR 0 4
36452: ARRAY
36453: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36454: LD_ADDR_VAR 0 5
36458: PUSH
36459: LD_VAR 0 1
36463: PPUSH
36464: LD_VAR 0 2
36468: PUSH
36469: LD_VAR 0 4
36473: ARRAY
36474: PUSH
36475: LD_INT 1
36477: ARRAY
36478: PPUSH
36479: LD_VAR 0 2
36483: PUSH
36484: LD_VAR 0 4
36488: ARRAY
36489: PUSH
36490: LD_INT 2
36492: ARRAY
36493: PPUSH
36494: CALL_OW 297
36498: ST_TO_ADDR
// end ; end ;
36499: GO 36388
36501: POP
36502: POP
// result := hex ;
36503: LD_ADDR_VAR 0 3
36507: PUSH
36508: LD_VAR 0 7
36512: ST_TO_ADDR
// end ;
36513: LD_VAR 0 3
36517: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36518: LD_INT 0
36520: PPUSH
36521: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36522: LD_VAR 0 1
36526: NOT
36527: PUSH
36528: LD_VAR 0 1
36532: PUSH
36533: LD_INT 21
36535: PUSH
36536: LD_INT 2
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: PUSH
36543: LD_INT 23
36545: PUSH
36546: LD_INT 2
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PPUSH
36557: CALL_OW 69
36561: IN
36562: NOT
36563: OR
36564: IFFALSE 36568
// exit ;
36566: GO 36615
// for i = 1 to 3 do
36568: LD_ADDR_VAR 0 3
36572: PUSH
36573: DOUBLE
36574: LD_INT 1
36576: DEC
36577: ST_TO_ADDR
36578: LD_INT 3
36580: PUSH
36581: FOR_TO
36582: IFFALSE 36613
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36584: LD_VAR 0 1
36588: PPUSH
36589: CALL_OW 250
36593: PPUSH
36594: LD_VAR 0 1
36598: PPUSH
36599: CALL_OW 251
36603: PPUSH
36604: LD_INT 1
36606: PPUSH
36607: CALL_OW 453
36611: GO 36581
36613: POP
36614: POP
// end ;
36615: LD_VAR 0 2
36619: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36620: LD_INT 0
36622: PPUSH
36623: PPUSH
36624: PPUSH
36625: PPUSH
36626: PPUSH
36627: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
36628: LD_VAR 0 1
36632: NOT
36633: PUSH
36634: LD_VAR 0 2
36638: NOT
36639: OR
36640: PUSH
36641: LD_VAR 0 1
36645: PPUSH
36646: CALL_OW 314
36650: OR
36651: IFFALSE 36655
// exit ;
36653: GO 37096
// x := GetX ( enemy_unit ) ;
36655: LD_ADDR_VAR 0 7
36659: PUSH
36660: LD_VAR 0 2
36664: PPUSH
36665: CALL_OW 250
36669: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36670: LD_ADDR_VAR 0 8
36674: PUSH
36675: LD_VAR 0 2
36679: PPUSH
36680: CALL_OW 251
36684: ST_TO_ADDR
// if not x or not y then
36685: LD_VAR 0 7
36689: NOT
36690: PUSH
36691: LD_VAR 0 8
36695: NOT
36696: OR
36697: IFFALSE 36701
// exit ;
36699: GO 37096
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36701: LD_ADDR_VAR 0 6
36705: PUSH
36706: LD_VAR 0 7
36710: PPUSH
36711: LD_INT 0
36713: PPUSH
36714: LD_INT 4
36716: PPUSH
36717: CALL_OW 272
36721: PUSH
36722: LD_VAR 0 8
36726: PPUSH
36727: LD_INT 0
36729: PPUSH
36730: LD_INT 4
36732: PPUSH
36733: CALL_OW 273
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: LD_VAR 0 7
36746: PPUSH
36747: LD_INT 1
36749: PPUSH
36750: LD_INT 4
36752: PPUSH
36753: CALL_OW 272
36757: PUSH
36758: LD_VAR 0 8
36762: PPUSH
36763: LD_INT 1
36765: PPUSH
36766: LD_INT 4
36768: PPUSH
36769: CALL_OW 273
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: PUSH
36778: LD_VAR 0 7
36782: PPUSH
36783: LD_INT 2
36785: PPUSH
36786: LD_INT 4
36788: PPUSH
36789: CALL_OW 272
36793: PUSH
36794: LD_VAR 0 8
36798: PPUSH
36799: LD_INT 2
36801: PPUSH
36802: LD_INT 4
36804: PPUSH
36805: CALL_OW 273
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: LD_VAR 0 7
36818: PPUSH
36819: LD_INT 3
36821: PPUSH
36822: LD_INT 4
36824: PPUSH
36825: CALL_OW 272
36829: PUSH
36830: LD_VAR 0 8
36834: PPUSH
36835: LD_INT 3
36837: PPUSH
36838: LD_INT 4
36840: PPUSH
36841: CALL_OW 273
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: PUSH
36850: LD_VAR 0 7
36854: PPUSH
36855: LD_INT 4
36857: PPUSH
36858: LD_INT 4
36860: PPUSH
36861: CALL_OW 272
36865: PUSH
36866: LD_VAR 0 8
36870: PPUSH
36871: LD_INT 4
36873: PPUSH
36874: LD_INT 4
36876: PPUSH
36877: CALL_OW 273
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: PUSH
36886: LD_VAR 0 7
36890: PPUSH
36891: LD_INT 5
36893: PPUSH
36894: LD_INT 4
36896: PPUSH
36897: CALL_OW 272
36901: PUSH
36902: LD_VAR 0 8
36906: PPUSH
36907: LD_INT 5
36909: PPUSH
36910: LD_INT 4
36912: PPUSH
36913: CALL_OW 273
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: LIST
36929: ST_TO_ADDR
// for i = tmp downto 1 do
36930: LD_ADDR_VAR 0 4
36934: PUSH
36935: DOUBLE
36936: LD_VAR 0 6
36940: INC
36941: ST_TO_ADDR
36942: LD_INT 1
36944: PUSH
36945: FOR_DOWNTO
36946: IFFALSE 37047
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36948: LD_VAR 0 6
36952: PUSH
36953: LD_VAR 0 4
36957: ARRAY
36958: PUSH
36959: LD_INT 1
36961: ARRAY
36962: PPUSH
36963: LD_VAR 0 6
36967: PUSH
36968: LD_VAR 0 4
36972: ARRAY
36973: PUSH
36974: LD_INT 2
36976: ARRAY
36977: PPUSH
36978: CALL_OW 488
36982: NOT
36983: PUSH
36984: LD_VAR 0 6
36988: PUSH
36989: LD_VAR 0 4
36993: ARRAY
36994: PUSH
36995: LD_INT 1
36997: ARRAY
36998: PPUSH
36999: LD_VAR 0 6
37003: PUSH
37004: LD_VAR 0 4
37008: ARRAY
37009: PUSH
37010: LD_INT 2
37012: ARRAY
37013: PPUSH
37014: CALL_OW 428
37018: PUSH
37019: LD_INT 0
37021: NONEQUAL
37022: OR
37023: IFFALSE 37045
// tmp := Delete ( tmp , i ) ;
37025: LD_ADDR_VAR 0 6
37029: PUSH
37030: LD_VAR 0 6
37034: PPUSH
37035: LD_VAR 0 4
37039: PPUSH
37040: CALL_OW 3
37044: ST_TO_ADDR
37045: GO 36945
37047: POP
37048: POP
// j := GetClosestHex ( unit , tmp ) ;
37049: LD_ADDR_VAR 0 5
37053: PUSH
37054: LD_VAR 0 1
37058: PPUSH
37059: LD_VAR 0 6
37063: PPUSH
37064: CALL 36349 0 2
37068: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
37069: LD_VAR 0 1
37073: PPUSH
37074: LD_VAR 0 5
37078: PUSH
37079: LD_INT 1
37081: ARRAY
37082: PPUSH
37083: LD_VAR 0 5
37087: PUSH
37088: LD_INT 2
37090: ARRAY
37091: PPUSH
37092: CALL_OW 111
// end ;
37096: LD_VAR 0 3
37100: RET
// export function PrepareApemanSoldier ( ) ; begin
37101: LD_INT 0
37103: PPUSH
// uc_nation := 0 ;
37104: LD_ADDR_OWVAR 21
37108: PUSH
37109: LD_INT 0
37111: ST_TO_ADDR
// hc_sex := sex_male ;
37112: LD_ADDR_OWVAR 27
37116: PUSH
37117: LD_INT 1
37119: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
37120: LD_ADDR_OWVAR 28
37124: PUSH
37125: LD_INT 15
37127: ST_TO_ADDR
// hc_gallery :=  ;
37128: LD_ADDR_OWVAR 33
37132: PUSH
37133: LD_STRING 
37135: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37136: LD_ADDR_OWVAR 31
37140: PUSH
37141: LD_INT 0
37143: PPUSH
37144: LD_INT 3
37146: PPUSH
37147: CALL_OW 12
37151: PUSH
37152: LD_INT 0
37154: PPUSH
37155: LD_INT 3
37157: PPUSH
37158: CALL_OW 12
37162: PUSH
37163: LD_INT 0
37165: PUSH
37166: LD_INT 0
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: LIST
37173: LIST
37174: ST_TO_ADDR
// end ;
37175: LD_VAR 0 1
37179: RET
// export function PrepareApemanEngineer ( ) ; begin
37180: LD_INT 0
37182: PPUSH
// uc_nation := 0 ;
37183: LD_ADDR_OWVAR 21
37187: PUSH
37188: LD_INT 0
37190: ST_TO_ADDR
// hc_sex := sex_male ;
37191: LD_ADDR_OWVAR 27
37195: PUSH
37196: LD_INT 1
37198: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
37199: LD_ADDR_OWVAR 28
37203: PUSH
37204: LD_INT 16
37206: ST_TO_ADDR
// hc_gallery :=  ;
37207: LD_ADDR_OWVAR 33
37211: PUSH
37212: LD_STRING 
37214: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37215: LD_ADDR_OWVAR 31
37219: PUSH
37220: LD_INT 0
37222: PPUSH
37223: LD_INT 3
37225: PPUSH
37226: CALL_OW 12
37230: PUSH
37231: LD_INT 0
37233: PPUSH
37234: LD_INT 3
37236: PPUSH
37237: CALL_OW 12
37241: PUSH
37242: LD_INT 0
37244: PUSH
37245: LD_INT 0
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: ST_TO_ADDR
// end ;
37254: LD_VAR 0 1
37258: RET
// export function PrepareApeman ( agressivity ) ; begin
37259: LD_INT 0
37261: PPUSH
// uc_side := 0 ;
37262: LD_ADDR_OWVAR 20
37266: PUSH
37267: LD_INT 0
37269: ST_TO_ADDR
// uc_nation := 0 ;
37270: LD_ADDR_OWVAR 21
37274: PUSH
37275: LD_INT 0
37277: ST_TO_ADDR
// hc_sex := sex_male ;
37278: LD_ADDR_OWVAR 27
37282: PUSH
37283: LD_INT 1
37285: ST_TO_ADDR
// hc_class := class_apeman ;
37286: LD_ADDR_OWVAR 28
37290: PUSH
37291: LD_INT 12
37293: ST_TO_ADDR
// hc_gallery :=  ;
37294: LD_ADDR_OWVAR 33
37298: PUSH
37299: LD_STRING 
37301: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37302: LD_ADDR_OWVAR 35
37306: PUSH
37307: LD_VAR 0 1
37311: NEG
37312: PPUSH
37313: LD_VAR 0 1
37317: PPUSH
37318: CALL_OW 12
37322: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37323: LD_ADDR_OWVAR 31
37327: PUSH
37328: LD_INT 0
37330: PPUSH
37331: LD_INT 3
37333: PPUSH
37334: CALL_OW 12
37338: PUSH
37339: LD_INT 0
37341: PPUSH
37342: LD_INT 3
37344: PPUSH
37345: CALL_OW 12
37349: PUSH
37350: LD_INT 0
37352: PUSH
37353: LD_INT 0
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: ST_TO_ADDR
// end ;
37362: LD_VAR 0 2
37366: RET
// export function PrepareTiger ( agressivity ) ; begin
37367: LD_INT 0
37369: PPUSH
// uc_side := 0 ;
37370: LD_ADDR_OWVAR 20
37374: PUSH
37375: LD_INT 0
37377: ST_TO_ADDR
// uc_nation := 0 ;
37378: LD_ADDR_OWVAR 21
37382: PUSH
37383: LD_INT 0
37385: ST_TO_ADDR
// hc_class := class_tiger ;
37386: LD_ADDR_OWVAR 28
37390: PUSH
37391: LD_INT 14
37393: ST_TO_ADDR
// hc_gallery :=  ;
37394: LD_ADDR_OWVAR 33
37398: PUSH
37399: LD_STRING 
37401: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37402: LD_ADDR_OWVAR 35
37406: PUSH
37407: LD_VAR 0 1
37411: NEG
37412: PPUSH
37413: LD_VAR 0 1
37417: PPUSH
37418: CALL_OW 12
37422: ST_TO_ADDR
// end ;
37423: LD_VAR 0 2
37427: RET
// export function PrepareEnchidna ( ) ; begin
37428: LD_INT 0
37430: PPUSH
// uc_side := 0 ;
37431: LD_ADDR_OWVAR 20
37435: PUSH
37436: LD_INT 0
37438: ST_TO_ADDR
// uc_nation := 0 ;
37439: LD_ADDR_OWVAR 21
37443: PUSH
37444: LD_INT 0
37446: ST_TO_ADDR
// hc_class := class_baggie ;
37447: LD_ADDR_OWVAR 28
37451: PUSH
37452: LD_INT 13
37454: ST_TO_ADDR
// hc_gallery :=  ;
37455: LD_ADDR_OWVAR 33
37459: PUSH
37460: LD_STRING 
37462: ST_TO_ADDR
// end ;
37463: LD_VAR 0 1
37467: RET
// export function PrepareFrog ( ) ; begin
37468: LD_INT 0
37470: PPUSH
// uc_side := 0 ;
37471: LD_ADDR_OWVAR 20
37475: PUSH
37476: LD_INT 0
37478: ST_TO_ADDR
// uc_nation := 0 ;
37479: LD_ADDR_OWVAR 21
37483: PUSH
37484: LD_INT 0
37486: ST_TO_ADDR
// hc_class := class_frog ;
37487: LD_ADDR_OWVAR 28
37491: PUSH
37492: LD_INT 19
37494: ST_TO_ADDR
// hc_gallery :=  ;
37495: LD_ADDR_OWVAR 33
37499: PUSH
37500: LD_STRING 
37502: ST_TO_ADDR
// end ;
37503: LD_VAR 0 1
37507: RET
// export function PrepareFish ( ) ; begin
37508: LD_INT 0
37510: PPUSH
// uc_side := 0 ;
37511: LD_ADDR_OWVAR 20
37515: PUSH
37516: LD_INT 0
37518: ST_TO_ADDR
// uc_nation := 0 ;
37519: LD_ADDR_OWVAR 21
37523: PUSH
37524: LD_INT 0
37526: ST_TO_ADDR
// hc_class := class_fish ;
37527: LD_ADDR_OWVAR 28
37531: PUSH
37532: LD_INT 20
37534: ST_TO_ADDR
// hc_gallery :=  ;
37535: LD_ADDR_OWVAR 33
37539: PUSH
37540: LD_STRING 
37542: ST_TO_ADDR
// end ;
37543: LD_VAR 0 1
37547: RET
// export function PrepareBird ( ) ; begin
37548: LD_INT 0
37550: PPUSH
// uc_side := 0 ;
37551: LD_ADDR_OWVAR 20
37555: PUSH
37556: LD_INT 0
37558: ST_TO_ADDR
// uc_nation := 0 ;
37559: LD_ADDR_OWVAR 21
37563: PUSH
37564: LD_INT 0
37566: ST_TO_ADDR
// hc_class := class_phororhacos ;
37567: LD_ADDR_OWVAR 28
37571: PUSH
37572: LD_INT 18
37574: ST_TO_ADDR
// hc_gallery :=  ;
37575: LD_ADDR_OWVAR 33
37579: PUSH
37580: LD_STRING 
37582: ST_TO_ADDR
// end ;
37583: LD_VAR 0 1
37587: RET
// export function PrepareHorse ( ) ; begin
37588: LD_INT 0
37590: PPUSH
// uc_side := 0 ;
37591: LD_ADDR_OWVAR 20
37595: PUSH
37596: LD_INT 0
37598: ST_TO_ADDR
// uc_nation := 0 ;
37599: LD_ADDR_OWVAR 21
37603: PUSH
37604: LD_INT 0
37606: ST_TO_ADDR
// hc_class := class_horse ;
37607: LD_ADDR_OWVAR 28
37611: PUSH
37612: LD_INT 21
37614: ST_TO_ADDR
// hc_gallery :=  ;
37615: LD_ADDR_OWVAR 33
37619: PUSH
37620: LD_STRING 
37622: ST_TO_ADDR
// end ;
37623: LD_VAR 0 1
37627: RET
// export function PrepareMastodont ( ) ; begin
37628: LD_INT 0
37630: PPUSH
// uc_side := 0 ;
37631: LD_ADDR_OWVAR 20
37635: PUSH
37636: LD_INT 0
37638: ST_TO_ADDR
// uc_nation := 0 ;
37639: LD_ADDR_OWVAR 21
37643: PUSH
37644: LD_INT 0
37646: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37647: LD_ADDR_OWVAR 37
37651: PUSH
37652: LD_INT 31
37654: ST_TO_ADDR
// vc_control := control_rider ;
37655: LD_ADDR_OWVAR 38
37659: PUSH
37660: LD_INT 4
37662: ST_TO_ADDR
// end ;
37663: LD_VAR 0 1
37667: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37668: LD_INT 0
37670: PPUSH
37671: PPUSH
37672: PPUSH
// uc_side = 0 ;
37673: LD_ADDR_OWVAR 20
37677: PUSH
37678: LD_INT 0
37680: ST_TO_ADDR
// uc_nation = 0 ;
37681: LD_ADDR_OWVAR 21
37685: PUSH
37686: LD_INT 0
37688: ST_TO_ADDR
// InitHc_All ( ) ;
37689: CALL_OW 584
// InitVc ;
37693: CALL_OW 20
// if mastodonts then
37697: LD_VAR 0 6
37701: IFFALSE 37768
// for i = 1 to mastodonts do
37703: LD_ADDR_VAR 0 11
37707: PUSH
37708: DOUBLE
37709: LD_INT 1
37711: DEC
37712: ST_TO_ADDR
37713: LD_VAR 0 6
37717: PUSH
37718: FOR_TO
37719: IFFALSE 37766
// begin vc_chassis := 31 ;
37721: LD_ADDR_OWVAR 37
37725: PUSH
37726: LD_INT 31
37728: ST_TO_ADDR
// vc_control := control_rider ;
37729: LD_ADDR_OWVAR 38
37733: PUSH
37734: LD_INT 4
37736: ST_TO_ADDR
// animal := CreateVehicle ;
37737: LD_ADDR_VAR 0 12
37741: PUSH
37742: CALL_OW 45
37746: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37747: LD_VAR 0 12
37751: PPUSH
37752: LD_VAR 0 8
37756: PPUSH
37757: LD_INT 0
37759: PPUSH
37760: CALL 39903 0 3
// end ;
37764: GO 37718
37766: POP
37767: POP
// if horses then
37768: LD_VAR 0 5
37772: IFFALSE 37839
// for i = 1 to horses do
37774: LD_ADDR_VAR 0 11
37778: PUSH
37779: DOUBLE
37780: LD_INT 1
37782: DEC
37783: ST_TO_ADDR
37784: LD_VAR 0 5
37788: PUSH
37789: FOR_TO
37790: IFFALSE 37837
// begin hc_class := 21 ;
37792: LD_ADDR_OWVAR 28
37796: PUSH
37797: LD_INT 21
37799: ST_TO_ADDR
// hc_gallery :=  ;
37800: LD_ADDR_OWVAR 33
37804: PUSH
37805: LD_STRING 
37807: ST_TO_ADDR
// animal := CreateHuman ;
37808: LD_ADDR_VAR 0 12
37812: PUSH
37813: CALL_OW 44
37817: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37818: LD_VAR 0 12
37822: PPUSH
37823: LD_VAR 0 8
37827: PPUSH
37828: LD_INT 0
37830: PPUSH
37831: CALL 39903 0 3
// end ;
37835: GO 37789
37837: POP
37838: POP
// if birds then
37839: LD_VAR 0 1
37843: IFFALSE 37910
// for i = 1 to birds do
37845: LD_ADDR_VAR 0 11
37849: PUSH
37850: DOUBLE
37851: LD_INT 1
37853: DEC
37854: ST_TO_ADDR
37855: LD_VAR 0 1
37859: PUSH
37860: FOR_TO
37861: IFFALSE 37908
// begin hc_class = 18 ;
37863: LD_ADDR_OWVAR 28
37867: PUSH
37868: LD_INT 18
37870: ST_TO_ADDR
// hc_gallery =  ;
37871: LD_ADDR_OWVAR 33
37875: PUSH
37876: LD_STRING 
37878: ST_TO_ADDR
// animal := CreateHuman ;
37879: LD_ADDR_VAR 0 12
37883: PUSH
37884: CALL_OW 44
37888: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37889: LD_VAR 0 12
37893: PPUSH
37894: LD_VAR 0 8
37898: PPUSH
37899: LD_INT 0
37901: PPUSH
37902: CALL 39903 0 3
// end ;
37906: GO 37860
37908: POP
37909: POP
// if tigers then
37910: LD_VAR 0 2
37914: IFFALSE 37998
// for i = 1 to tigers do
37916: LD_ADDR_VAR 0 11
37920: PUSH
37921: DOUBLE
37922: LD_INT 1
37924: DEC
37925: ST_TO_ADDR
37926: LD_VAR 0 2
37930: PUSH
37931: FOR_TO
37932: IFFALSE 37996
// begin hc_class = class_tiger ;
37934: LD_ADDR_OWVAR 28
37938: PUSH
37939: LD_INT 14
37941: ST_TO_ADDR
// hc_gallery =  ;
37942: LD_ADDR_OWVAR 33
37946: PUSH
37947: LD_STRING 
37949: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37950: LD_ADDR_OWVAR 35
37954: PUSH
37955: LD_INT 7
37957: NEG
37958: PPUSH
37959: LD_INT 7
37961: PPUSH
37962: CALL_OW 12
37966: ST_TO_ADDR
// animal := CreateHuman ;
37967: LD_ADDR_VAR 0 12
37971: PUSH
37972: CALL_OW 44
37976: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37977: LD_VAR 0 12
37981: PPUSH
37982: LD_VAR 0 8
37986: PPUSH
37987: LD_INT 0
37989: PPUSH
37990: CALL 39903 0 3
// end ;
37994: GO 37931
37996: POP
37997: POP
// if apemans then
37998: LD_VAR 0 3
38002: IFFALSE 38125
// for i = 1 to apemans do
38004: LD_ADDR_VAR 0 11
38008: PUSH
38009: DOUBLE
38010: LD_INT 1
38012: DEC
38013: ST_TO_ADDR
38014: LD_VAR 0 3
38018: PUSH
38019: FOR_TO
38020: IFFALSE 38123
// begin hc_class = class_apeman ;
38022: LD_ADDR_OWVAR 28
38026: PUSH
38027: LD_INT 12
38029: ST_TO_ADDR
// hc_gallery =  ;
38030: LD_ADDR_OWVAR 33
38034: PUSH
38035: LD_STRING 
38037: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
38038: LD_ADDR_OWVAR 35
38042: PUSH
38043: LD_INT 2
38045: NEG
38046: PPUSH
38047: LD_INT 2
38049: PPUSH
38050: CALL_OW 12
38054: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38055: LD_ADDR_OWVAR 31
38059: PUSH
38060: LD_INT 1
38062: PPUSH
38063: LD_INT 3
38065: PPUSH
38066: CALL_OW 12
38070: PUSH
38071: LD_INT 1
38073: PPUSH
38074: LD_INT 3
38076: PPUSH
38077: CALL_OW 12
38081: PUSH
38082: LD_INT 0
38084: PUSH
38085: LD_INT 0
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: ST_TO_ADDR
// animal := CreateHuman ;
38094: LD_ADDR_VAR 0 12
38098: PUSH
38099: CALL_OW 44
38103: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38104: LD_VAR 0 12
38108: PPUSH
38109: LD_VAR 0 8
38113: PPUSH
38114: LD_INT 0
38116: PPUSH
38117: CALL 39903 0 3
// end ;
38121: GO 38019
38123: POP
38124: POP
// if enchidnas then
38125: LD_VAR 0 4
38129: IFFALSE 38196
// for i = 1 to enchidnas do
38131: LD_ADDR_VAR 0 11
38135: PUSH
38136: DOUBLE
38137: LD_INT 1
38139: DEC
38140: ST_TO_ADDR
38141: LD_VAR 0 4
38145: PUSH
38146: FOR_TO
38147: IFFALSE 38194
// begin hc_class = 13 ;
38149: LD_ADDR_OWVAR 28
38153: PUSH
38154: LD_INT 13
38156: ST_TO_ADDR
// hc_gallery =  ;
38157: LD_ADDR_OWVAR 33
38161: PUSH
38162: LD_STRING 
38164: ST_TO_ADDR
// animal := CreateHuman ;
38165: LD_ADDR_VAR 0 12
38169: PUSH
38170: CALL_OW 44
38174: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38175: LD_VAR 0 12
38179: PPUSH
38180: LD_VAR 0 8
38184: PPUSH
38185: LD_INT 0
38187: PPUSH
38188: CALL 39903 0 3
// end ;
38192: GO 38146
38194: POP
38195: POP
// if fishes then
38196: LD_VAR 0 7
38200: IFFALSE 38267
// for i = 1 to fishes do
38202: LD_ADDR_VAR 0 11
38206: PUSH
38207: DOUBLE
38208: LD_INT 1
38210: DEC
38211: ST_TO_ADDR
38212: LD_VAR 0 7
38216: PUSH
38217: FOR_TO
38218: IFFALSE 38265
// begin hc_class = 20 ;
38220: LD_ADDR_OWVAR 28
38224: PUSH
38225: LD_INT 20
38227: ST_TO_ADDR
// hc_gallery =  ;
38228: LD_ADDR_OWVAR 33
38232: PUSH
38233: LD_STRING 
38235: ST_TO_ADDR
// animal := CreateHuman ;
38236: LD_ADDR_VAR 0 12
38240: PUSH
38241: CALL_OW 44
38245: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
38246: LD_VAR 0 12
38250: PPUSH
38251: LD_VAR 0 9
38255: PPUSH
38256: LD_INT 0
38258: PPUSH
38259: CALL 39903 0 3
// end ;
38263: GO 38217
38265: POP
38266: POP
// end ;
38267: LD_VAR 0 10
38271: RET
// export function WantHeal ( sci , unit ) ; begin
38272: LD_INT 0
38274: PPUSH
// if GetTaskList ( sci ) > 0 then
38275: LD_VAR 0 1
38279: PPUSH
38280: CALL_OW 437
38284: PUSH
38285: LD_INT 0
38287: GREATER
38288: IFFALSE 38358
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38290: LD_VAR 0 1
38294: PPUSH
38295: CALL_OW 437
38299: PUSH
38300: LD_INT 1
38302: ARRAY
38303: PUSH
38304: LD_INT 1
38306: ARRAY
38307: PUSH
38308: LD_STRING l
38310: EQUAL
38311: PUSH
38312: LD_VAR 0 1
38316: PPUSH
38317: CALL_OW 437
38321: PUSH
38322: LD_INT 1
38324: ARRAY
38325: PUSH
38326: LD_INT 4
38328: ARRAY
38329: PUSH
38330: LD_VAR 0 2
38334: EQUAL
38335: AND
38336: IFFALSE 38348
// result := true else
38338: LD_ADDR_VAR 0 3
38342: PUSH
38343: LD_INT 1
38345: ST_TO_ADDR
38346: GO 38356
// result := false ;
38348: LD_ADDR_VAR 0 3
38352: PUSH
38353: LD_INT 0
38355: ST_TO_ADDR
// end else
38356: GO 38366
// result := false ;
38358: LD_ADDR_VAR 0 3
38362: PUSH
38363: LD_INT 0
38365: ST_TO_ADDR
// end ;
38366: LD_VAR 0 3
38370: RET
// export function HealTarget ( sci ) ; begin
38371: LD_INT 0
38373: PPUSH
// if not sci then
38374: LD_VAR 0 1
38378: NOT
38379: IFFALSE 38383
// exit ;
38381: GO 38448
// result := 0 ;
38383: LD_ADDR_VAR 0 2
38387: PUSH
38388: LD_INT 0
38390: ST_TO_ADDR
// if GetTaskList ( sci ) then
38391: LD_VAR 0 1
38395: PPUSH
38396: CALL_OW 437
38400: IFFALSE 38448
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38402: LD_VAR 0 1
38406: PPUSH
38407: CALL_OW 437
38411: PUSH
38412: LD_INT 1
38414: ARRAY
38415: PUSH
38416: LD_INT 1
38418: ARRAY
38419: PUSH
38420: LD_STRING l
38422: EQUAL
38423: IFFALSE 38448
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38425: LD_ADDR_VAR 0 2
38429: PUSH
38430: LD_VAR 0 1
38434: PPUSH
38435: CALL_OW 437
38439: PUSH
38440: LD_INT 1
38442: ARRAY
38443: PUSH
38444: LD_INT 4
38446: ARRAY
38447: ST_TO_ADDR
// end ;
38448: LD_VAR 0 2
38452: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38453: LD_INT 0
38455: PPUSH
38456: PPUSH
38457: PPUSH
38458: PPUSH
// if not base_units then
38459: LD_VAR 0 1
38463: NOT
38464: IFFALSE 38468
// exit ;
38466: GO 38555
// result := false ;
38468: LD_ADDR_VAR 0 2
38472: PUSH
38473: LD_INT 0
38475: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38476: LD_ADDR_VAR 0 5
38480: PUSH
38481: LD_VAR 0 1
38485: PPUSH
38486: LD_INT 21
38488: PUSH
38489: LD_INT 3
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PPUSH
38496: CALL_OW 72
38500: ST_TO_ADDR
// if not tmp then
38501: LD_VAR 0 5
38505: NOT
38506: IFFALSE 38510
// exit ;
38508: GO 38555
// for i in tmp do
38510: LD_ADDR_VAR 0 3
38514: PUSH
38515: LD_VAR 0 5
38519: PUSH
38520: FOR_IN
38521: IFFALSE 38553
// begin result := EnemyInRange ( i , 22 ) ;
38523: LD_ADDR_VAR 0 2
38527: PUSH
38528: LD_VAR 0 3
38532: PPUSH
38533: LD_INT 22
38535: PPUSH
38536: CALL 36224 0 2
38540: ST_TO_ADDR
// if result then
38541: LD_VAR 0 2
38545: IFFALSE 38551
// exit ;
38547: POP
38548: POP
38549: GO 38555
// end ;
38551: GO 38520
38553: POP
38554: POP
// end ;
38555: LD_VAR 0 2
38559: RET
// export function FilterByTag ( units , tag ) ; begin
38560: LD_INT 0
38562: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38563: LD_ADDR_VAR 0 3
38567: PUSH
38568: LD_VAR 0 1
38572: PPUSH
38573: LD_INT 120
38575: PUSH
38576: LD_VAR 0 2
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PPUSH
38585: CALL_OW 72
38589: ST_TO_ADDR
// end ;
38590: LD_VAR 0 3
38594: RET
// export function IsDriver ( un ) ; begin
38595: LD_INT 0
38597: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38598: LD_ADDR_VAR 0 2
38602: PUSH
38603: LD_VAR 0 1
38607: PUSH
38608: LD_INT 55
38610: PUSH
38611: EMPTY
38612: LIST
38613: PPUSH
38614: CALL_OW 69
38618: IN
38619: ST_TO_ADDR
// end ;
38620: LD_VAR 0 2
38624: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38625: LD_INT 0
38627: PPUSH
38628: PPUSH
// list := [ ] ;
38629: LD_ADDR_VAR 0 5
38633: PUSH
38634: EMPTY
38635: ST_TO_ADDR
// case d of 0 :
38636: LD_VAR 0 3
38640: PUSH
38641: LD_INT 0
38643: DOUBLE
38644: EQUAL
38645: IFTRUE 38649
38647: GO 38782
38649: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38650: LD_ADDR_VAR 0 5
38654: PUSH
38655: LD_VAR 0 1
38659: PUSH
38660: LD_INT 4
38662: MINUS
38663: PUSH
38664: LD_VAR 0 2
38668: PUSH
38669: LD_INT 4
38671: MINUS
38672: PUSH
38673: LD_INT 2
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: LIST
38680: PUSH
38681: LD_VAR 0 1
38685: PUSH
38686: LD_INT 3
38688: MINUS
38689: PUSH
38690: LD_VAR 0 2
38694: PUSH
38695: LD_INT 1
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: LIST
38702: PUSH
38703: LD_VAR 0 1
38707: PUSH
38708: LD_INT 4
38710: PLUS
38711: PUSH
38712: LD_VAR 0 2
38716: PUSH
38717: LD_INT 4
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: LIST
38724: PUSH
38725: LD_VAR 0 1
38729: PUSH
38730: LD_INT 3
38732: PLUS
38733: PUSH
38734: LD_VAR 0 2
38738: PUSH
38739: LD_INT 3
38741: PLUS
38742: PUSH
38743: LD_INT 5
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: LIST
38750: PUSH
38751: LD_VAR 0 1
38755: PUSH
38756: LD_VAR 0 2
38760: PUSH
38761: LD_INT 4
38763: PLUS
38764: PUSH
38765: LD_INT 0
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: LIST
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: ST_TO_ADDR
// end ; 1 :
38780: GO 39480
38782: LD_INT 1
38784: DOUBLE
38785: EQUAL
38786: IFTRUE 38790
38788: GO 38923
38790: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38791: LD_ADDR_VAR 0 5
38795: PUSH
38796: LD_VAR 0 1
38800: PUSH
38801: LD_VAR 0 2
38805: PUSH
38806: LD_INT 4
38808: MINUS
38809: PUSH
38810: LD_INT 3
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: LIST
38817: PUSH
38818: LD_VAR 0 1
38822: PUSH
38823: LD_INT 3
38825: MINUS
38826: PUSH
38827: LD_VAR 0 2
38831: PUSH
38832: LD_INT 3
38834: MINUS
38835: PUSH
38836: LD_INT 2
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: LIST
38843: PUSH
38844: LD_VAR 0 1
38848: PUSH
38849: LD_INT 4
38851: MINUS
38852: PUSH
38853: LD_VAR 0 2
38857: PUSH
38858: LD_INT 1
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: LIST
38865: PUSH
38866: LD_VAR 0 1
38870: PUSH
38871: LD_VAR 0 2
38875: PUSH
38876: LD_INT 3
38878: PLUS
38879: PUSH
38880: LD_INT 0
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: LIST
38887: PUSH
38888: LD_VAR 0 1
38892: PUSH
38893: LD_INT 4
38895: PLUS
38896: PUSH
38897: LD_VAR 0 2
38901: PUSH
38902: LD_INT 4
38904: PLUS
38905: PUSH
38906: LD_INT 5
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: LIST
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: ST_TO_ADDR
// end ; 2 :
38921: GO 39480
38923: LD_INT 2
38925: DOUBLE
38926: EQUAL
38927: IFTRUE 38931
38929: GO 39060
38931: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38932: LD_ADDR_VAR 0 5
38936: PUSH
38937: LD_VAR 0 1
38941: PUSH
38942: LD_VAR 0 2
38946: PUSH
38947: LD_INT 3
38949: MINUS
38950: PUSH
38951: LD_INT 3
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: LIST
38958: PUSH
38959: LD_VAR 0 1
38963: PUSH
38964: LD_INT 4
38966: PLUS
38967: PUSH
38968: LD_VAR 0 2
38972: PUSH
38973: LD_INT 4
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: LIST
38980: PUSH
38981: LD_VAR 0 1
38985: PUSH
38986: LD_VAR 0 2
38990: PUSH
38991: LD_INT 4
38993: PLUS
38994: PUSH
38995: LD_INT 0
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: LIST
39002: PUSH
39003: LD_VAR 0 1
39007: PUSH
39008: LD_INT 3
39010: MINUS
39011: PUSH
39012: LD_VAR 0 2
39016: PUSH
39017: LD_INT 1
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: LIST
39024: PUSH
39025: LD_VAR 0 1
39029: PUSH
39030: LD_INT 4
39032: MINUS
39033: PUSH
39034: LD_VAR 0 2
39038: PUSH
39039: LD_INT 4
39041: MINUS
39042: PUSH
39043: LD_INT 2
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: LIST
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: ST_TO_ADDR
// end ; 3 :
39058: GO 39480
39060: LD_INT 3
39062: DOUBLE
39063: EQUAL
39064: IFTRUE 39068
39066: GO 39201
39068: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39069: LD_ADDR_VAR 0 5
39073: PUSH
39074: LD_VAR 0 1
39078: PUSH
39079: LD_INT 3
39081: PLUS
39082: PUSH
39083: LD_VAR 0 2
39087: PUSH
39088: LD_INT 4
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: LIST
39095: PUSH
39096: LD_VAR 0 1
39100: PUSH
39101: LD_INT 4
39103: PLUS
39104: PUSH
39105: LD_VAR 0 2
39109: PUSH
39110: LD_INT 4
39112: PLUS
39113: PUSH
39114: LD_INT 5
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: LIST
39121: PUSH
39122: LD_VAR 0 1
39126: PUSH
39127: LD_INT 4
39129: MINUS
39130: PUSH
39131: LD_VAR 0 2
39135: PUSH
39136: LD_INT 1
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: LIST
39143: PUSH
39144: LD_VAR 0 1
39148: PUSH
39149: LD_VAR 0 2
39153: PUSH
39154: LD_INT 4
39156: MINUS
39157: PUSH
39158: LD_INT 3
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: LIST
39165: PUSH
39166: LD_VAR 0 1
39170: PUSH
39171: LD_INT 3
39173: MINUS
39174: PUSH
39175: LD_VAR 0 2
39179: PUSH
39180: LD_INT 3
39182: MINUS
39183: PUSH
39184: LD_INT 2
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: LIST
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: ST_TO_ADDR
// end ; 4 :
39199: GO 39480
39201: LD_INT 4
39203: DOUBLE
39204: EQUAL
39205: IFTRUE 39209
39207: GO 39342
39209: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
39210: LD_ADDR_VAR 0 5
39214: PUSH
39215: LD_VAR 0 1
39219: PUSH
39220: LD_VAR 0 2
39224: PUSH
39225: LD_INT 4
39227: PLUS
39228: PUSH
39229: LD_INT 0
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: LIST
39236: PUSH
39237: LD_VAR 0 1
39241: PUSH
39242: LD_INT 3
39244: PLUS
39245: PUSH
39246: LD_VAR 0 2
39250: PUSH
39251: LD_INT 3
39253: PLUS
39254: PUSH
39255: LD_INT 5
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: LIST
39262: PUSH
39263: LD_VAR 0 1
39267: PUSH
39268: LD_INT 4
39270: PLUS
39271: PUSH
39272: LD_VAR 0 2
39276: PUSH
39277: LD_INT 4
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: LIST
39284: PUSH
39285: LD_VAR 0 1
39289: PUSH
39290: LD_VAR 0 2
39294: PUSH
39295: LD_INT 3
39297: MINUS
39298: PUSH
39299: LD_INT 3
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: LIST
39306: PUSH
39307: LD_VAR 0 1
39311: PUSH
39312: LD_INT 4
39314: MINUS
39315: PUSH
39316: LD_VAR 0 2
39320: PUSH
39321: LD_INT 4
39323: MINUS
39324: PUSH
39325: LD_INT 2
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: LIST
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: ST_TO_ADDR
// end ; 5 :
39340: GO 39480
39342: LD_INT 5
39344: DOUBLE
39345: EQUAL
39346: IFTRUE 39350
39348: GO 39479
39350: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39351: LD_ADDR_VAR 0 5
39355: PUSH
39356: LD_VAR 0 1
39360: PUSH
39361: LD_INT 4
39363: MINUS
39364: PUSH
39365: LD_VAR 0 2
39369: PUSH
39370: LD_INT 1
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: LIST
39377: PUSH
39378: LD_VAR 0 1
39382: PUSH
39383: LD_VAR 0 2
39387: PUSH
39388: LD_INT 4
39390: MINUS
39391: PUSH
39392: LD_INT 3
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: LIST
39399: PUSH
39400: LD_VAR 0 1
39404: PUSH
39405: LD_INT 4
39407: PLUS
39408: PUSH
39409: LD_VAR 0 2
39413: PUSH
39414: LD_INT 4
39416: PLUS
39417: PUSH
39418: LD_INT 5
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: LIST
39425: PUSH
39426: LD_VAR 0 1
39430: PUSH
39431: LD_INT 3
39433: PLUS
39434: PUSH
39435: LD_VAR 0 2
39439: PUSH
39440: LD_INT 4
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: LIST
39447: PUSH
39448: LD_VAR 0 1
39452: PUSH
39453: LD_VAR 0 2
39457: PUSH
39458: LD_INT 3
39460: PLUS
39461: PUSH
39462: LD_INT 0
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: LIST
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: ST_TO_ADDR
// end ; end ;
39477: GO 39480
39479: POP
// result := list ;
39480: LD_ADDR_VAR 0 4
39484: PUSH
39485: LD_VAR 0 5
39489: ST_TO_ADDR
// end ;
39490: LD_VAR 0 4
39494: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39495: LD_INT 0
39497: PPUSH
39498: PPUSH
39499: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39500: LD_VAR 0 1
39504: NOT
39505: PUSH
39506: LD_VAR 0 2
39510: PUSH
39511: LD_INT 1
39513: PUSH
39514: LD_INT 2
39516: PUSH
39517: LD_INT 3
39519: PUSH
39520: LD_INT 4
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: IN
39529: NOT
39530: OR
39531: IFFALSE 39535
// exit ;
39533: GO 39627
// tmp := [ ] ;
39535: LD_ADDR_VAR 0 5
39539: PUSH
39540: EMPTY
39541: ST_TO_ADDR
// for i in units do
39542: LD_ADDR_VAR 0 4
39546: PUSH
39547: LD_VAR 0 1
39551: PUSH
39552: FOR_IN
39553: IFFALSE 39596
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
39555: LD_ADDR_VAR 0 5
39559: PUSH
39560: LD_VAR 0 5
39564: PPUSH
39565: LD_VAR 0 5
39569: PUSH
39570: LD_INT 1
39572: PLUS
39573: PPUSH
39574: LD_VAR 0 4
39578: PPUSH
39579: LD_VAR 0 2
39583: PPUSH
39584: CALL_OW 259
39588: PPUSH
39589: CALL_OW 2
39593: ST_TO_ADDR
39594: GO 39552
39596: POP
39597: POP
// if not tmp then
39598: LD_VAR 0 5
39602: NOT
39603: IFFALSE 39607
// exit ;
39605: GO 39627
// result := SortListByListDesc ( units , tmp ) ;
39607: LD_ADDR_VAR 0 3
39611: PUSH
39612: LD_VAR 0 1
39616: PPUSH
39617: LD_VAR 0 5
39621: PPUSH
39622: CALL_OW 77
39626: ST_TO_ADDR
// end ;
39627: LD_VAR 0 3
39631: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39632: LD_INT 0
39634: PPUSH
39635: PPUSH
39636: PPUSH
// result := false ;
39637: LD_ADDR_VAR 0 3
39641: PUSH
39642: LD_INT 0
39644: ST_TO_ADDR
// x := GetX ( building ) ;
39645: LD_ADDR_VAR 0 4
39649: PUSH
39650: LD_VAR 0 2
39654: PPUSH
39655: CALL_OW 250
39659: ST_TO_ADDR
// y := GetY ( building ) ;
39660: LD_ADDR_VAR 0 5
39664: PUSH
39665: LD_VAR 0 2
39669: PPUSH
39670: CALL_OW 251
39674: ST_TO_ADDR
// if not building or not x or not y then
39675: LD_VAR 0 2
39679: NOT
39680: PUSH
39681: LD_VAR 0 4
39685: NOT
39686: OR
39687: PUSH
39688: LD_VAR 0 5
39692: NOT
39693: OR
39694: IFFALSE 39698
// exit ;
39696: GO 39790
// if GetTaskList ( unit ) then
39698: LD_VAR 0 1
39702: PPUSH
39703: CALL_OW 437
39707: IFFALSE 39790
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39709: LD_STRING e
39711: PUSH
39712: LD_VAR 0 1
39716: PPUSH
39717: CALL_OW 437
39721: PUSH
39722: LD_INT 1
39724: ARRAY
39725: PUSH
39726: LD_INT 1
39728: ARRAY
39729: EQUAL
39730: PUSH
39731: LD_VAR 0 4
39735: PUSH
39736: LD_VAR 0 1
39740: PPUSH
39741: CALL_OW 437
39745: PUSH
39746: LD_INT 1
39748: ARRAY
39749: PUSH
39750: LD_INT 2
39752: ARRAY
39753: EQUAL
39754: AND
39755: PUSH
39756: LD_VAR 0 5
39760: PUSH
39761: LD_VAR 0 1
39765: PPUSH
39766: CALL_OW 437
39770: PUSH
39771: LD_INT 1
39773: ARRAY
39774: PUSH
39775: LD_INT 3
39777: ARRAY
39778: EQUAL
39779: AND
39780: IFFALSE 39790
// result := true end ;
39782: LD_ADDR_VAR 0 3
39786: PUSH
39787: LD_INT 1
39789: ST_TO_ADDR
// end ;
39790: LD_VAR 0 3
39794: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39795: LD_INT 0
39797: PPUSH
// result := false ;
39798: LD_ADDR_VAR 0 4
39802: PUSH
39803: LD_INT 0
39805: ST_TO_ADDR
// if GetTaskList ( unit ) then
39806: LD_VAR 0 1
39810: PPUSH
39811: CALL_OW 437
39815: IFFALSE 39898
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39817: LD_STRING M
39819: PUSH
39820: LD_VAR 0 1
39824: PPUSH
39825: CALL_OW 437
39829: PUSH
39830: LD_INT 1
39832: ARRAY
39833: PUSH
39834: LD_INT 1
39836: ARRAY
39837: EQUAL
39838: PUSH
39839: LD_VAR 0 2
39843: PUSH
39844: LD_VAR 0 1
39848: PPUSH
39849: CALL_OW 437
39853: PUSH
39854: LD_INT 1
39856: ARRAY
39857: PUSH
39858: LD_INT 2
39860: ARRAY
39861: EQUAL
39862: AND
39863: PUSH
39864: LD_VAR 0 3
39868: PUSH
39869: LD_VAR 0 1
39873: PPUSH
39874: CALL_OW 437
39878: PUSH
39879: LD_INT 1
39881: ARRAY
39882: PUSH
39883: LD_INT 3
39885: ARRAY
39886: EQUAL
39887: AND
39888: IFFALSE 39898
// result := true ;
39890: LD_ADDR_VAR 0 4
39894: PUSH
39895: LD_INT 1
39897: ST_TO_ADDR
// end ; end ;
39898: LD_VAR 0 4
39902: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39903: LD_INT 0
39905: PPUSH
39906: PPUSH
39907: PPUSH
39908: PPUSH
// if not unit or not area then
39909: LD_VAR 0 1
39913: NOT
39914: PUSH
39915: LD_VAR 0 2
39919: NOT
39920: OR
39921: IFFALSE 39925
// exit ;
39923: GO 40089
// tmp := AreaToList ( area , i ) ;
39925: LD_ADDR_VAR 0 6
39929: PUSH
39930: LD_VAR 0 2
39934: PPUSH
39935: LD_VAR 0 5
39939: PPUSH
39940: CALL_OW 517
39944: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39945: LD_ADDR_VAR 0 5
39949: PUSH
39950: DOUBLE
39951: LD_INT 1
39953: DEC
39954: ST_TO_ADDR
39955: LD_VAR 0 6
39959: PUSH
39960: LD_INT 1
39962: ARRAY
39963: PUSH
39964: FOR_TO
39965: IFFALSE 40087
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39967: LD_ADDR_VAR 0 7
39971: PUSH
39972: LD_VAR 0 6
39976: PUSH
39977: LD_INT 1
39979: ARRAY
39980: PUSH
39981: LD_VAR 0 5
39985: ARRAY
39986: PUSH
39987: LD_VAR 0 6
39991: PUSH
39992: LD_INT 2
39994: ARRAY
39995: PUSH
39996: LD_VAR 0 5
40000: ARRAY
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
40006: LD_VAR 0 7
40010: PUSH
40011: LD_INT 1
40013: ARRAY
40014: PPUSH
40015: LD_VAR 0 7
40019: PUSH
40020: LD_INT 2
40022: ARRAY
40023: PPUSH
40024: CALL_OW 428
40028: PUSH
40029: LD_INT 0
40031: EQUAL
40032: IFFALSE 40085
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
40034: LD_VAR 0 1
40038: PPUSH
40039: LD_VAR 0 7
40043: PUSH
40044: LD_INT 1
40046: ARRAY
40047: PPUSH
40048: LD_VAR 0 7
40052: PUSH
40053: LD_INT 2
40055: ARRAY
40056: PPUSH
40057: LD_VAR 0 3
40061: PPUSH
40062: CALL_OW 48
// result := IsPlaced ( unit ) ;
40066: LD_ADDR_VAR 0 4
40070: PUSH
40071: LD_VAR 0 1
40075: PPUSH
40076: CALL_OW 305
40080: ST_TO_ADDR
// exit ;
40081: POP
40082: POP
40083: GO 40089
// end ; end ;
40085: GO 39964
40087: POP
40088: POP
// end ;
40089: LD_VAR 0 4
40093: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40094: LD_INT 0
40096: PPUSH
40097: PPUSH
40098: PPUSH
// if not side or side > 8 then
40099: LD_VAR 0 1
40103: NOT
40104: PUSH
40105: LD_VAR 0 1
40109: PUSH
40110: LD_INT 8
40112: GREATER
40113: OR
40114: IFFALSE 40118
// exit ;
40116: GO 40305
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40118: LD_ADDR_VAR 0 4
40122: PUSH
40123: LD_INT 22
40125: PUSH
40126: LD_VAR 0 1
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 21
40137: PUSH
40138: LD_INT 3
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PPUSH
40149: CALL_OW 69
40153: ST_TO_ADDR
// if not tmp then
40154: LD_VAR 0 4
40158: NOT
40159: IFFALSE 40163
// exit ;
40161: GO 40305
// enable_addtolog := true ;
40163: LD_ADDR_OWVAR 81
40167: PUSH
40168: LD_INT 1
40170: ST_TO_ADDR
// AddToLog ( [ ) ;
40171: LD_STRING [
40173: PPUSH
40174: CALL_OW 561
// for i in tmp do
40178: LD_ADDR_VAR 0 3
40182: PUSH
40183: LD_VAR 0 4
40187: PUSH
40188: FOR_IN
40189: IFFALSE 40296
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
40191: LD_STRING [
40193: PUSH
40194: LD_VAR 0 3
40198: PPUSH
40199: CALL_OW 266
40203: STR
40204: PUSH
40205: LD_STRING , 
40207: STR
40208: PUSH
40209: LD_VAR 0 3
40213: PPUSH
40214: CALL_OW 250
40218: STR
40219: PUSH
40220: LD_STRING , 
40222: STR
40223: PUSH
40224: LD_VAR 0 3
40228: PPUSH
40229: CALL_OW 251
40233: STR
40234: PUSH
40235: LD_STRING , 
40237: STR
40238: PUSH
40239: LD_VAR 0 3
40243: PPUSH
40244: CALL_OW 254
40248: STR
40249: PUSH
40250: LD_STRING , 
40252: STR
40253: PUSH
40254: LD_VAR 0 3
40258: PPUSH
40259: LD_INT 1
40261: PPUSH
40262: CALL_OW 268
40266: STR
40267: PUSH
40268: LD_STRING , 
40270: STR
40271: PUSH
40272: LD_VAR 0 3
40276: PPUSH
40277: LD_INT 2
40279: PPUSH
40280: CALL_OW 268
40284: STR
40285: PUSH
40286: LD_STRING ],
40288: STR
40289: PPUSH
40290: CALL_OW 561
// end ;
40294: GO 40188
40296: POP
40297: POP
// AddToLog ( ]; ) ;
40298: LD_STRING ];
40300: PPUSH
40301: CALL_OW 561
// end ;
40305: LD_VAR 0 2
40309: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40310: LD_INT 0
40312: PPUSH
40313: PPUSH
40314: PPUSH
40315: PPUSH
40316: PPUSH
// if not area or not rate or not max then
40317: LD_VAR 0 1
40321: NOT
40322: PUSH
40323: LD_VAR 0 2
40327: NOT
40328: OR
40329: PUSH
40330: LD_VAR 0 4
40334: NOT
40335: OR
40336: IFFALSE 40340
// exit ;
40338: GO 40529
// while 1 do
40340: LD_INT 1
40342: IFFALSE 40529
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40344: LD_ADDR_VAR 0 9
40348: PUSH
40349: LD_VAR 0 1
40353: PPUSH
40354: LD_INT 1
40356: PPUSH
40357: CALL_OW 287
40361: PUSH
40362: LD_INT 10
40364: MUL
40365: ST_TO_ADDR
// r := rate / 10 ;
40366: LD_ADDR_VAR 0 7
40370: PUSH
40371: LD_VAR 0 2
40375: PUSH
40376: LD_INT 10
40378: DIVREAL
40379: ST_TO_ADDR
// time := 1 1$00 ;
40380: LD_ADDR_VAR 0 8
40384: PUSH
40385: LD_INT 2100
40387: ST_TO_ADDR
// if amount < min then
40388: LD_VAR 0 9
40392: PUSH
40393: LD_VAR 0 3
40397: LESS
40398: IFFALSE 40416
// r := r * 2 else
40400: LD_ADDR_VAR 0 7
40404: PUSH
40405: LD_VAR 0 7
40409: PUSH
40410: LD_INT 2
40412: MUL
40413: ST_TO_ADDR
40414: GO 40442
// if amount > max then
40416: LD_VAR 0 9
40420: PUSH
40421: LD_VAR 0 4
40425: GREATER
40426: IFFALSE 40442
// r := r / 2 ;
40428: LD_ADDR_VAR 0 7
40432: PUSH
40433: LD_VAR 0 7
40437: PUSH
40438: LD_INT 2
40440: DIVREAL
40441: ST_TO_ADDR
// time := time / r ;
40442: LD_ADDR_VAR 0 8
40446: PUSH
40447: LD_VAR 0 8
40451: PUSH
40452: LD_VAR 0 7
40456: DIVREAL
40457: ST_TO_ADDR
// if time < 0 then
40458: LD_VAR 0 8
40462: PUSH
40463: LD_INT 0
40465: LESS
40466: IFFALSE 40483
// time := time * - 1 ;
40468: LD_ADDR_VAR 0 8
40472: PUSH
40473: LD_VAR 0 8
40477: PUSH
40478: LD_INT 1
40480: NEG
40481: MUL
40482: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40483: LD_VAR 0 8
40487: PUSH
40488: LD_INT 35
40490: PPUSH
40491: LD_INT 875
40493: PPUSH
40494: CALL_OW 12
40498: PLUS
40499: PPUSH
40500: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40504: LD_INT 1
40506: PPUSH
40507: LD_INT 5
40509: PPUSH
40510: CALL_OW 12
40514: PPUSH
40515: LD_VAR 0 1
40519: PPUSH
40520: LD_INT 1
40522: PPUSH
40523: CALL_OW 55
// end ;
40527: GO 40340
// end ;
40529: LD_VAR 0 5
40533: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40534: LD_INT 0
40536: PPUSH
40537: PPUSH
40538: PPUSH
40539: PPUSH
40540: PPUSH
40541: PPUSH
40542: PPUSH
40543: PPUSH
// if not turrets or not factories then
40544: LD_VAR 0 1
40548: NOT
40549: PUSH
40550: LD_VAR 0 2
40554: NOT
40555: OR
40556: IFFALSE 40560
// exit ;
40558: GO 40867
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40560: LD_ADDR_VAR 0 10
40564: PUSH
40565: LD_INT 5
40567: PUSH
40568: LD_INT 6
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 2
40577: PUSH
40578: LD_INT 4
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 3
40587: PUSH
40588: LD_INT 5
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: LIST
40599: PUSH
40600: LD_INT 24
40602: PUSH
40603: LD_INT 25
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 23
40612: PUSH
40613: LD_INT 27
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 42
40626: PUSH
40627: LD_INT 43
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 44
40636: PUSH
40637: LD_INT 46
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 45
40646: PUSH
40647: LD_INT 47
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: LIST
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: LIST
40663: ST_TO_ADDR
// result := [ ] ;
40664: LD_ADDR_VAR 0 3
40668: PUSH
40669: EMPTY
40670: ST_TO_ADDR
// for i in turrets do
40671: LD_ADDR_VAR 0 4
40675: PUSH
40676: LD_VAR 0 1
40680: PUSH
40681: FOR_IN
40682: IFFALSE 40865
// begin nat := GetNation ( i ) ;
40684: LD_ADDR_VAR 0 7
40688: PUSH
40689: LD_VAR 0 4
40693: PPUSH
40694: CALL_OW 248
40698: ST_TO_ADDR
// weapon := 0 ;
40699: LD_ADDR_VAR 0 8
40703: PUSH
40704: LD_INT 0
40706: ST_TO_ADDR
// if not nat then
40707: LD_VAR 0 7
40711: NOT
40712: IFFALSE 40716
// continue ;
40714: GO 40681
// for j in list [ nat ] do
40716: LD_ADDR_VAR 0 5
40720: PUSH
40721: LD_VAR 0 10
40725: PUSH
40726: LD_VAR 0 7
40730: ARRAY
40731: PUSH
40732: FOR_IN
40733: IFFALSE 40774
// if GetBWeapon ( i ) = j [ 1 ] then
40735: LD_VAR 0 4
40739: PPUSH
40740: CALL_OW 269
40744: PUSH
40745: LD_VAR 0 5
40749: PUSH
40750: LD_INT 1
40752: ARRAY
40753: EQUAL
40754: IFFALSE 40772
// begin weapon := j [ 2 ] ;
40756: LD_ADDR_VAR 0 8
40760: PUSH
40761: LD_VAR 0 5
40765: PUSH
40766: LD_INT 2
40768: ARRAY
40769: ST_TO_ADDR
// break ;
40770: GO 40774
// end ;
40772: GO 40732
40774: POP
40775: POP
// if not weapon then
40776: LD_VAR 0 8
40780: NOT
40781: IFFALSE 40785
// continue ;
40783: GO 40681
// for k in factories do
40785: LD_ADDR_VAR 0 6
40789: PUSH
40790: LD_VAR 0 2
40794: PUSH
40795: FOR_IN
40796: IFFALSE 40861
// begin weapons := AvailableWeaponList ( k ) ;
40798: LD_ADDR_VAR 0 9
40802: PUSH
40803: LD_VAR 0 6
40807: PPUSH
40808: CALL_OW 478
40812: ST_TO_ADDR
// if not weapons then
40813: LD_VAR 0 9
40817: NOT
40818: IFFALSE 40822
// continue ;
40820: GO 40795
// if weapon in weapons then
40822: LD_VAR 0 8
40826: PUSH
40827: LD_VAR 0 9
40831: IN
40832: IFFALSE 40859
// begin result := [ i , weapon ] ;
40834: LD_ADDR_VAR 0 3
40838: PUSH
40839: LD_VAR 0 4
40843: PUSH
40844: LD_VAR 0 8
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: ST_TO_ADDR
// exit ;
40853: POP
40854: POP
40855: POP
40856: POP
40857: GO 40867
// end ; end ;
40859: GO 40795
40861: POP
40862: POP
// end ;
40863: GO 40681
40865: POP
40866: POP
// end ;
40867: LD_VAR 0 3
40871: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40872: LD_INT 0
40874: PPUSH
// if not side or side > 8 then
40875: LD_VAR 0 3
40879: NOT
40880: PUSH
40881: LD_VAR 0 3
40885: PUSH
40886: LD_INT 8
40888: GREATER
40889: OR
40890: IFFALSE 40894
// exit ;
40892: GO 40953
// if not range then
40894: LD_VAR 0 4
40898: NOT
40899: IFFALSE 40910
// range := - 12 ;
40901: LD_ADDR_VAR 0 4
40905: PUSH
40906: LD_INT 12
40908: NEG
40909: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40910: LD_VAR 0 1
40914: PPUSH
40915: LD_VAR 0 2
40919: PPUSH
40920: LD_VAR 0 3
40924: PPUSH
40925: LD_VAR 0 4
40929: PPUSH
40930: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40934: LD_VAR 0 1
40938: PPUSH
40939: LD_VAR 0 2
40943: PPUSH
40944: LD_VAR 0 3
40948: PPUSH
40949: CALL_OW 331
// end ;
40953: LD_VAR 0 5
40957: RET
// export function Video ( mode ) ; begin
40958: LD_INT 0
40960: PPUSH
// ingame_video = mode ;
40961: LD_ADDR_OWVAR 52
40965: PUSH
40966: LD_VAR 0 1
40970: ST_TO_ADDR
// interface_hidden = mode ;
40971: LD_ADDR_OWVAR 54
40975: PUSH
40976: LD_VAR 0 1
40980: ST_TO_ADDR
// end ;
40981: LD_VAR 0 2
40985: RET
// export function Join ( array , element ) ; begin
40986: LD_INT 0
40988: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40989: LD_ADDR_VAR 0 3
40993: PUSH
40994: LD_VAR 0 1
40998: PPUSH
40999: LD_VAR 0 1
41003: PUSH
41004: LD_INT 1
41006: PLUS
41007: PPUSH
41008: LD_VAR 0 2
41012: PPUSH
41013: CALL_OW 1
41017: ST_TO_ADDR
// end ;
41018: LD_VAR 0 3
41022: RET
// export function JoinUnion ( array , element ) ; begin
41023: LD_INT 0
41025: PPUSH
// result := array union element ;
41026: LD_ADDR_VAR 0 3
41030: PUSH
41031: LD_VAR 0 1
41035: PUSH
41036: LD_VAR 0 2
41040: UNION
41041: ST_TO_ADDR
// end ;
41042: LD_VAR 0 3
41046: RET
// export function GetBehemoths ( side ) ; begin
41047: LD_INT 0
41049: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
41050: LD_ADDR_VAR 0 2
41054: PUSH
41055: LD_INT 22
41057: PUSH
41058: LD_VAR 0 1
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 31
41069: PUSH
41070: LD_INT 25
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: PPUSH
41081: CALL_OW 69
41085: ST_TO_ADDR
// end ;
41086: LD_VAR 0 2
41090: RET
// export function Shuffle ( array ) ; var i , index ; begin
41091: LD_INT 0
41093: PPUSH
41094: PPUSH
41095: PPUSH
// result := [ ] ;
41096: LD_ADDR_VAR 0 2
41100: PUSH
41101: EMPTY
41102: ST_TO_ADDR
// if not array then
41103: LD_VAR 0 1
41107: NOT
41108: IFFALSE 41112
// exit ;
41110: GO 41211
// Randomize ;
41112: CALL_OW 10
// for i = array downto 1 do
41116: LD_ADDR_VAR 0 3
41120: PUSH
41121: DOUBLE
41122: LD_VAR 0 1
41126: INC
41127: ST_TO_ADDR
41128: LD_INT 1
41130: PUSH
41131: FOR_DOWNTO
41132: IFFALSE 41209
// begin index := rand ( 1 , array ) ;
41134: LD_ADDR_VAR 0 4
41138: PUSH
41139: LD_INT 1
41141: PPUSH
41142: LD_VAR 0 1
41146: PPUSH
41147: CALL_OW 12
41151: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41152: LD_ADDR_VAR 0 2
41156: PUSH
41157: LD_VAR 0 2
41161: PPUSH
41162: LD_VAR 0 2
41166: PUSH
41167: LD_INT 1
41169: PLUS
41170: PPUSH
41171: LD_VAR 0 1
41175: PUSH
41176: LD_VAR 0 4
41180: ARRAY
41181: PPUSH
41182: CALL_OW 2
41186: ST_TO_ADDR
// array := Delete ( array , index ) ;
41187: LD_ADDR_VAR 0 1
41191: PUSH
41192: LD_VAR 0 1
41196: PPUSH
41197: LD_VAR 0 4
41201: PPUSH
41202: CALL_OW 3
41206: ST_TO_ADDR
// end ;
41207: GO 41131
41209: POP
41210: POP
// end ;
41211: LD_VAR 0 2
41215: RET
// export function GetBaseMaterials ( base ) ; begin
41216: LD_INT 0
41218: PPUSH
// result := [ 0 , 0 , 0 ] ;
41219: LD_ADDR_VAR 0 2
41223: PUSH
41224: LD_INT 0
41226: PUSH
41227: LD_INT 0
41229: PUSH
41230: LD_INT 0
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: LIST
41237: ST_TO_ADDR
// if not base then
41238: LD_VAR 0 1
41242: NOT
41243: IFFALSE 41247
// exit ;
41245: GO 41296
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
41247: LD_ADDR_VAR 0 2
41251: PUSH
41252: LD_VAR 0 1
41256: PPUSH
41257: LD_INT 1
41259: PPUSH
41260: CALL_OW 275
41264: PUSH
41265: LD_VAR 0 1
41269: PPUSH
41270: LD_INT 2
41272: PPUSH
41273: CALL_OW 275
41277: PUSH
41278: LD_VAR 0 1
41282: PPUSH
41283: LD_INT 3
41285: PPUSH
41286: CALL_OW 275
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: LIST
41295: ST_TO_ADDR
// end ;
41296: LD_VAR 0 2
41300: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41301: LD_INT 0
41303: PPUSH
41304: PPUSH
// result := array ;
41305: LD_ADDR_VAR 0 3
41309: PUSH
41310: LD_VAR 0 1
41314: ST_TO_ADDR
// if size >= result then
41315: LD_VAR 0 2
41319: PUSH
41320: LD_VAR 0 3
41324: GREATEREQUAL
41325: IFFALSE 41329
// exit ;
41327: GO 41379
// if size then
41329: LD_VAR 0 2
41333: IFFALSE 41379
// for i := array downto size do
41335: LD_ADDR_VAR 0 4
41339: PUSH
41340: DOUBLE
41341: LD_VAR 0 1
41345: INC
41346: ST_TO_ADDR
41347: LD_VAR 0 2
41351: PUSH
41352: FOR_DOWNTO
41353: IFFALSE 41377
// result := Delete ( result , result ) ;
41355: LD_ADDR_VAR 0 3
41359: PUSH
41360: LD_VAR 0 3
41364: PPUSH
41365: LD_VAR 0 3
41369: PPUSH
41370: CALL_OW 3
41374: ST_TO_ADDR
41375: GO 41352
41377: POP
41378: POP
// end ;
41379: LD_VAR 0 3
41383: RET
// export function ComExit ( unit ) ; var tmp ; begin
41384: LD_INT 0
41386: PPUSH
41387: PPUSH
// if not IsInUnit ( unit ) then
41388: LD_VAR 0 1
41392: PPUSH
41393: CALL_OW 310
41397: NOT
41398: IFFALSE 41402
// exit ;
41400: GO 41462
// tmp := IsInUnit ( unit ) ;
41402: LD_ADDR_VAR 0 3
41406: PUSH
41407: LD_VAR 0 1
41411: PPUSH
41412: CALL_OW 310
41416: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41417: LD_VAR 0 3
41421: PPUSH
41422: CALL_OW 247
41426: PUSH
41427: LD_INT 2
41429: EQUAL
41430: IFFALSE 41443
// ComExitVehicle ( unit ) else
41432: LD_VAR 0 1
41436: PPUSH
41437: CALL_OW 121
41441: GO 41452
// ComExitBuilding ( unit ) ;
41443: LD_VAR 0 1
41447: PPUSH
41448: CALL_OW 122
// result := tmp ;
41452: LD_ADDR_VAR 0 2
41456: PUSH
41457: LD_VAR 0 3
41461: ST_TO_ADDR
// end ;
41462: LD_VAR 0 2
41466: RET
// export function ComExitAll ( units ) ; var i ; begin
41467: LD_INT 0
41469: PPUSH
41470: PPUSH
// if not units then
41471: LD_VAR 0 1
41475: NOT
41476: IFFALSE 41480
// exit ;
41478: GO 41506
// for i in units do
41480: LD_ADDR_VAR 0 3
41484: PUSH
41485: LD_VAR 0 1
41489: PUSH
41490: FOR_IN
41491: IFFALSE 41504
// ComExit ( i ) ;
41493: LD_VAR 0 3
41497: PPUSH
41498: CALL 41384 0 1
41502: GO 41490
41504: POP
41505: POP
// end ;
41506: LD_VAR 0 2
41510: RET
// export function ResetHc ; begin
41511: LD_INT 0
41513: PPUSH
// InitHc ;
41514: CALL_OW 19
// hc_importance := 0 ;
41518: LD_ADDR_OWVAR 32
41522: PUSH
41523: LD_INT 0
41525: ST_TO_ADDR
// end ;
41526: LD_VAR 0 1
41530: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41531: LD_INT 0
41533: PPUSH
41534: PPUSH
41535: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41536: LD_ADDR_VAR 0 6
41540: PUSH
41541: LD_VAR 0 1
41545: PUSH
41546: LD_VAR 0 3
41550: PLUS
41551: PUSH
41552: LD_INT 2
41554: DIV
41555: ST_TO_ADDR
// if _x < 0 then
41556: LD_VAR 0 6
41560: PUSH
41561: LD_INT 0
41563: LESS
41564: IFFALSE 41581
// _x := _x * - 1 ;
41566: LD_ADDR_VAR 0 6
41570: PUSH
41571: LD_VAR 0 6
41575: PUSH
41576: LD_INT 1
41578: NEG
41579: MUL
41580: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41581: LD_ADDR_VAR 0 7
41585: PUSH
41586: LD_VAR 0 2
41590: PUSH
41591: LD_VAR 0 4
41595: PLUS
41596: PUSH
41597: LD_INT 2
41599: DIV
41600: ST_TO_ADDR
// if _y < 0 then
41601: LD_VAR 0 7
41605: PUSH
41606: LD_INT 0
41608: LESS
41609: IFFALSE 41626
// _y := _y * - 1 ;
41611: LD_ADDR_VAR 0 7
41615: PUSH
41616: LD_VAR 0 7
41620: PUSH
41621: LD_INT 1
41623: NEG
41624: MUL
41625: ST_TO_ADDR
// result := [ _x , _y ] ;
41626: LD_ADDR_VAR 0 5
41630: PUSH
41631: LD_VAR 0 6
41635: PUSH
41636: LD_VAR 0 7
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: ST_TO_ADDR
// end ;
41645: LD_VAR 0 5
41649: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41650: LD_INT 0
41652: PPUSH
41653: PPUSH
41654: PPUSH
41655: PPUSH
// task := GetTaskList ( unit ) ;
41656: LD_ADDR_VAR 0 7
41660: PUSH
41661: LD_VAR 0 1
41665: PPUSH
41666: CALL_OW 437
41670: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41671: LD_VAR 0 7
41675: NOT
41676: PUSH
41677: LD_VAR 0 1
41681: PPUSH
41682: LD_VAR 0 2
41686: PPUSH
41687: CALL_OW 308
41691: NOT
41692: AND
41693: IFFALSE 41697
// exit ;
41695: GO 41815
// if IsInArea ( unit , area ) then
41697: LD_VAR 0 1
41701: PPUSH
41702: LD_VAR 0 2
41706: PPUSH
41707: CALL_OW 308
41711: IFFALSE 41729
// begin ComMoveToArea ( unit , goAway ) ;
41713: LD_VAR 0 1
41717: PPUSH
41718: LD_VAR 0 3
41722: PPUSH
41723: CALL_OW 113
// exit ;
41727: GO 41815
// end ; if task [ 1 ] [ 1 ] <> M then
41729: LD_VAR 0 7
41733: PUSH
41734: LD_INT 1
41736: ARRAY
41737: PUSH
41738: LD_INT 1
41740: ARRAY
41741: PUSH
41742: LD_STRING M
41744: NONEQUAL
41745: IFFALSE 41749
// exit ;
41747: GO 41815
// x := task [ 1 ] [ 2 ] ;
41749: LD_ADDR_VAR 0 5
41753: PUSH
41754: LD_VAR 0 7
41758: PUSH
41759: LD_INT 1
41761: ARRAY
41762: PUSH
41763: LD_INT 2
41765: ARRAY
41766: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41767: LD_ADDR_VAR 0 6
41771: PUSH
41772: LD_VAR 0 7
41776: PUSH
41777: LD_INT 1
41779: ARRAY
41780: PUSH
41781: LD_INT 3
41783: ARRAY
41784: ST_TO_ADDR
// if InArea ( x , y , area ) then
41785: LD_VAR 0 5
41789: PPUSH
41790: LD_VAR 0 6
41794: PPUSH
41795: LD_VAR 0 2
41799: PPUSH
41800: CALL_OW 309
41804: IFFALSE 41815
// ComStop ( unit ) ;
41806: LD_VAR 0 1
41810: PPUSH
41811: CALL_OW 141
// end ;
41815: LD_VAR 0 4
41819: RET
// export function Abs ( value ) ; begin
41820: LD_INT 0
41822: PPUSH
// result := value ;
41823: LD_ADDR_VAR 0 2
41827: PUSH
41828: LD_VAR 0 1
41832: ST_TO_ADDR
// if value < 0 then
41833: LD_VAR 0 1
41837: PUSH
41838: LD_INT 0
41840: LESS
41841: IFFALSE 41858
// result := value * - 1 ;
41843: LD_ADDR_VAR 0 2
41847: PUSH
41848: LD_VAR 0 1
41852: PUSH
41853: LD_INT 1
41855: NEG
41856: MUL
41857: ST_TO_ADDR
// end ;
41858: LD_VAR 0 2
41862: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41863: LD_INT 0
41865: PPUSH
41866: PPUSH
41867: PPUSH
41868: PPUSH
41869: PPUSH
41870: PPUSH
41871: PPUSH
41872: PPUSH
// if not unit or not building then
41873: LD_VAR 0 1
41877: NOT
41878: PUSH
41879: LD_VAR 0 2
41883: NOT
41884: OR
41885: IFFALSE 41889
// exit ;
41887: GO 42115
// x := GetX ( building ) ;
41889: LD_ADDR_VAR 0 4
41893: PUSH
41894: LD_VAR 0 2
41898: PPUSH
41899: CALL_OW 250
41903: ST_TO_ADDR
// y := GetY ( building ) ;
41904: LD_ADDR_VAR 0 6
41908: PUSH
41909: LD_VAR 0 2
41913: PPUSH
41914: CALL_OW 251
41918: ST_TO_ADDR
// d := GetDir ( building ) ;
41919: LD_ADDR_VAR 0 8
41923: PUSH
41924: LD_VAR 0 2
41928: PPUSH
41929: CALL_OW 254
41933: ST_TO_ADDR
// r := 4 ;
41934: LD_ADDR_VAR 0 9
41938: PUSH
41939: LD_INT 4
41941: ST_TO_ADDR
// for i := 1 to 5 do
41942: LD_ADDR_VAR 0 10
41946: PUSH
41947: DOUBLE
41948: LD_INT 1
41950: DEC
41951: ST_TO_ADDR
41952: LD_INT 5
41954: PUSH
41955: FOR_TO
41956: IFFALSE 42113
// begin _x := ShiftX ( x , d , r + i ) ;
41958: LD_ADDR_VAR 0 5
41962: PUSH
41963: LD_VAR 0 4
41967: PPUSH
41968: LD_VAR 0 8
41972: PPUSH
41973: LD_VAR 0 9
41977: PUSH
41978: LD_VAR 0 10
41982: PLUS
41983: PPUSH
41984: CALL_OW 272
41988: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41989: LD_ADDR_VAR 0 7
41993: PUSH
41994: LD_VAR 0 6
41998: PPUSH
41999: LD_VAR 0 8
42003: PPUSH
42004: LD_VAR 0 9
42008: PUSH
42009: LD_VAR 0 10
42013: PLUS
42014: PPUSH
42015: CALL_OW 273
42019: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
42020: LD_VAR 0 5
42024: PPUSH
42025: LD_VAR 0 7
42029: PPUSH
42030: CALL_OW 488
42034: PUSH
42035: LD_VAR 0 5
42039: PPUSH
42040: LD_VAR 0 7
42044: PPUSH
42045: CALL_OW 428
42049: PPUSH
42050: CALL_OW 247
42054: PUSH
42055: LD_INT 3
42057: PUSH
42058: LD_INT 2
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: IN
42065: NOT
42066: AND
42067: IFFALSE 42111
// begin ComMoveXY ( unit , _x , _y ) ;
42069: LD_VAR 0 1
42073: PPUSH
42074: LD_VAR 0 5
42078: PPUSH
42079: LD_VAR 0 7
42083: PPUSH
42084: CALL_OW 111
// result := [ _x , _y ] ;
42088: LD_ADDR_VAR 0 3
42092: PUSH
42093: LD_VAR 0 5
42097: PUSH
42098: LD_VAR 0 7
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: ST_TO_ADDR
// exit ;
42107: POP
42108: POP
42109: GO 42115
// end ; end ;
42111: GO 41955
42113: POP
42114: POP
// end ;
42115: LD_VAR 0 3
42119: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42120: LD_INT 0
42122: PPUSH
42123: PPUSH
42124: PPUSH
// result := 0 ;
42125: LD_ADDR_VAR 0 3
42129: PUSH
42130: LD_INT 0
42132: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42133: LD_VAR 0 1
42137: PUSH
42138: LD_INT 0
42140: LESS
42141: PUSH
42142: LD_VAR 0 1
42146: PUSH
42147: LD_INT 8
42149: GREATER
42150: OR
42151: PUSH
42152: LD_VAR 0 2
42156: PUSH
42157: LD_INT 0
42159: LESS
42160: OR
42161: PUSH
42162: LD_VAR 0 2
42166: PUSH
42167: LD_INT 8
42169: GREATER
42170: OR
42171: IFFALSE 42175
// exit ;
42173: GO 42250
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
42175: LD_ADDR_VAR 0 4
42179: PUSH
42180: LD_INT 22
42182: PUSH
42183: LD_VAR 0 2
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PPUSH
42192: CALL_OW 69
42196: PUSH
42197: FOR_IN
42198: IFFALSE 42248
// begin un := UnitShoot ( i ) ;
42200: LD_ADDR_VAR 0 5
42204: PUSH
42205: LD_VAR 0 4
42209: PPUSH
42210: CALL_OW 504
42214: ST_TO_ADDR
// if GetSide ( un ) = side1 then
42215: LD_VAR 0 5
42219: PPUSH
42220: CALL_OW 255
42224: PUSH
42225: LD_VAR 0 1
42229: EQUAL
42230: IFFALSE 42246
// begin result := un ;
42232: LD_ADDR_VAR 0 3
42236: PUSH
42237: LD_VAR 0 5
42241: ST_TO_ADDR
// exit ;
42242: POP
42243: POP
42244: GO 42250
// end ; end ;
42246: GO 42197
42248: POP
42249: POP
// end ;
42250: LD_VAR 0 3
42254: RET
// export function GetCargoBay ( units ) ; begin
42255: LD_INT 0
42257: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42258: LD_ADDR_VAR 0 2
42262: PUSH
42263: LD_VAR 0 1
42267: PPUSH
42268: LD_INT 2
42270: PUSH
42271: LD_INT 34
42273: PUSH
42274: LD_INT 12
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 34
42283: PUSH
42284: LD_INT 51
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 34
42293: PUSH
42294: LD_INT 32
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 34
42303: PUSH
42304: LD_EXP 22
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: PPUSH
42320: CALL_OW 72
42324: ST_TO_ADDR
// end ;
42325: LD_VAR 0 2
42329: RET
// export function Negate ( value ) ; begin
42330: LD_INT 0
42332: PPUSH
// result := not value ;
42333: LD_ADDR_VAR 0 2
42337: PUSH
42338: LD_VAR 0 1
42342: NOT
42343: ST_TO_ADDR
// end ;
42344: LD_VAR 0 2
42348: RET
// export function Inc ( value ) ; begin
42349: LD_INT 0
42351: PPUSH
// result := value + 1 ;
42352: LD_ADDR_VAR 0 2
42356: PUSH
42357: LD_VAR 0 1
42361: PUSH
42362: LD_INT 1
42364: PLUS
42365: ST_TO_ADDR
// end ;
42366: LD_VAR 0 2
42370: RET
// export function Dec ( value ) ; begin
42371: LD_INT 0
42373: PPUSH
// result := value - 1 ;
42374: LD_ADDR_VAR 0 2
42378: PUSH
42379: LD_VAR 0 1
42383: PUSH
42384: LD_INT 1
42386: MINUS
42387: ST_TO_ADDR
// end ;
42388: LD_VAR 0 2
42392: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42393: LD_INT 0
42395: PPUSH
42396: PPUSH
42397: PPUSH
42398: PPUSH
42399: PPUSH
42400: PPUSH
42401: PPUSH
42402: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42403: LD_VAR 0 1
42407: PPUSH
42408: LD_VAR 0 2
42412: PPUSH
42413: CALL_OW 488
42417: NOT
42418: PUSH
42419: LD_VAR 0 3
42423: PPUSH
42424: LD_VAR 0 4
42428: PPUSH
42429: CALL_OW 488
42433: NOT
42434: OR
42435: IFFALSE 42448
// begin result := - 1 ;
42437: LD_ADDR_VAR 0 5
42441: PUSH
42442: LD_INT 1
42444: NEG
42445: ST_TO_ADDR
// exit ;
42446: GO 42683
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42448: LD_ADDR_VAR 0 12
42452: PUSH
42453: LD_VAR 0 1
42457: PPUSH
42458: LD_VAR 0 2
42462: PPUSH
42463: LD_VAR 0 3
42467: PPUSH
42468: LD_VAR 0 4
42472: PPUSH
42473: CALL 41531 0 4
42477: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42478: LD_ADDR_VAR 0 11
42482: PUSH
42483: LD_VAR 0 1
42487: PPUSH
42488: LD_VAR 0 2
42492: PPUSH
42493: LD_VAR 0 12
42497: PUSH
42498: LD_INT 1
42500: ARRAY
42501: PPUSH
42502: LD_VAR 0 12
42506: PUSH
42507: LD_INT 2
42509: ARRAY
42510: PPUSH
42511: CALL_OW 298
42515: ST_TO_ADDR
// distance := 9999 ;
42516: LD_ADDR_VAR 0 10
42520: PUSH
42521: LD_INT 9999
42523: ST_TO_ADDR
// for i := 0 to 5 do
42524: LD_ADDR_VAR 0 6
42528: PUSH
42529: DOUBLE
42530: LD_INT 0
42532: DEC
42533: ST_TO_ADDR
42534: LD_INT 5
42536: PUSH
42537: FOR_TO
42538: IFFALSE 42681
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42540: LD_ADDR_VAR 0 7
42544: PUSH
42545: LD_VAR 0 1
42549: PPUSH
42550: LD_VAR 0 6
42554: PPUSH
42555: LD_VAR 0 11
42559: PPUSH
42560: CALL_OW 272
42564: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42565: LD_ADDR_VAR 0 8
42569: PUSH
42570: LD_VAR 0 2
42574: PPUSH
42575: LD_VAR 0 6
42579: PPUSH
42580: LD_VAR 0 11
42584: PPUSH
42585: CALL_OW 273
42589: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42590: LD_VAR 0 7
42594: PPUSH
42595: LD_VAR 0 8
42599: PPUSH
42600: CALL_OW 488
42604: NOT
42605: IFFALSE 42609
// continue ;
42607: GO 42537
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42609: LD_ADDR_VAR 0 9
42613: PUSH
42614: LD_VAR 0 12
42618: PUSH
42619: LD_INT 1
42621: ARRAY
42622: PPUSH
42623: LD_VAR 0 12
42627: PUSH
42628: LD_INT 2
42630: ARRAY
42631: PPUSH
42632: LD_VAR 0 7
42636: PPUSH
42637: LD_VAR 0 8
42641: PPUSH
42642: CALL_OW 298
42646: ST_TO_ADDR
// if tmp < distance then
42647: LD_VAR 0 9
42651: PUSH
42652: LD_VAR 0 10
42656: LESS
42657: IFFALSE 42679
// begin result := i ;
42659: LD_ADDR_VAR 0 5
42663: PUSH
42664: LD_VAR 0 6
42668: ST_TO_ADDR
// distance := tmp ;
42669: LD_ADDR_VAR 0 10
42673: PUSH
42674: LD_VAR 0 9
42678: ST_TO_ADDR
// end ; end ;
42679: GO 42537
42681: POP
42682: POP
// end ;
42683: LD_VAR 0 5
42687: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42688: LD_INT 0
42690: PPUSH
42691: PPUSH
// if not driver or not IsInUnit ( driver ) then
42692: LD_VAR 0 1
42696: NOT
42697: PUSH
42698: LD_VAR 0 1
42702: PPUSH
42703: CALL_OW 310
42707: NOT
42708: OR
42709: IFFALSE 42713
// exit ;
42711: GO 42803
// vehicle := IsInUnit ( driver ) ;
42713: LD_ADDR_VAR 0 3
42717: PUSH
42718: LD_VAR 0 1
42722: PPUSH
42723: CALL_OW 310
42727: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42728: LD_VAR 0 1
42732: PPUSH
42733: LD_STRING \
42735: PUSH
42736: LD_INT 0
42738: PUSH
42739: LD_INT 0
42741: PUSH
42742: LD_INT 0
42744: PUSH
42745: LD_INT 0
42747: PUSH
42748: LD_INT 0
42750: PUSH
42751: LD_INT 0
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: PUSH
42763: LD_STRING E
42765: PUSH
42766: LD_INT 0
42768: PUSH
42769: LD_INT 0
42771: PUSH
42772: LD_VAR 0 3
42776: PUSH
42777: LD_INT 0
42779: PUSH
42780: LD_INT 0
42782: PUSH
42783: LD_INT 0
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PPUSH
42799: CALL_OW 446
// end ;
42803: LD_VAR 0 2
42807: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42808: LD_INT 0
42810: PPUSH
42811: PPUSH
// if not driver or not IsInUnit ( driver ) then
42812: LD_VAR 0 1
42816: NOT
42817: PUSH
42818: LD_VAR 0 1
42822: PPUSH
42823: CALL_OW 310
42827: NOT
42828: OR
42829: IFFALSE 42833
// exit ;
42831: GO 42923
// vehicle := IsInUnit ( driver ) ;
42833: LD_ADDR_VAR 0 3
42837: PUSH
42838: LD_VAR 0 1
42842: PPUSH
42843: CALL_OW 310
42847: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42848: LD_VAR 0 1
42852: PPUSH
42853: LD_STRING \
42855: PUSH
42856: LD_INT 0
42858: PUSH
42859: LD_INT 0
42861: PUSH
42862: LD_INT 0
42864: PUSH
42865: LD_INT 0
42867: PUSH
42868: LD_INT 0
42870: PUSH
42871: LD_INT 0
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: PUSH
42883: LD_STRING E
42885: PUSH
42886: LD_INT 0
42888: PUSH
42889: LD_INT 0
42891: PUSH
42892: LD_VAR 0 3
42896: PUSH
42897: LD_INT 0
42899: PUSH
42900: LD_INT 0
42902: PUSH
42903: LD_INT 0
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PPUSH
42919: CALL_OW 447
// end ;
42923: LD_VAR 0 2
42927: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42928: LD_INT 0
42930: PPUSH
42931: PPUSH
42932: PPUSH
// tmp := [ ] ;
42933: LD_ADDR_VAR 0 5
42937: PUSH
42938: EMPTY
42939: ST_TO_ADDR
// for i in units do
42940: LD_ADDR_VAR 0 4
42944: PUSH
42945: LD_VAR 0 1
42949: PUSH
42950: FOR_IN
42951: IFFALSE 42989
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42953: LD_ADDR_VAR 0 5
42957: PUSH
42958: LD_VAR 0 5
42962: PPUSH
42963: LD_VAR 0 5
42967: PUSH
42968: LD_INT 1
42970: PLUS
42971: PPUSH
42972: LD_VAR 0 4
42976: PPUSH
42977: CALL_OW 256
42981: PPUSH
42982: CALL_OW 2
42986: ST_TO_ADDR
42987: GO 42950
42989: POP
42990: POP
// if not tmp then
42991: LD_VAR 0 5
42995: NOT
42996: IFFALSE 43000
// exit ;
42998: GO 43048
// if asc then
43000: LD_VAR 0 2
43004: IFFALSE 43028
// result := SortListByListAsc ( units , tmp ) else
43006: LD_ADDR_VAR 0 3
43010: PUSH
43011: LD_VAR 0 1
43015: PPUSH
43016: LD_VAR 0 5
43020: PPUSH
43021: CALL_OW 76
43025: ST_TO_ADDR
43026: GO 43048
// result := SortListByListDesc ( units , tmp ) ;
43028: LD_ADDR_VAR 0 3
43032: PUSH
43033: LD_VAR 0 1
43037: PPUSH
43038: LD_VAR 0 5
43042: PPUSH
43043: CALL_OW 77
43047: ST_TO_ADDR
// end ;
43048: LD_VAR 0 3
43052: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43053: LD_INT 0
43055: PPUSH
43056: PPUSH
// task := GetTaskList ( mech ) ;
43057: LD_ADDR_VAR 0 4
43061: PUSH
43062: LD_VAR 0 1
43066: PPUSH
43067: CALL_OW 437
43071: ST_TO_ADDR
// if not task then
43072: LD_VAR 0 4
43076: NOT
43077: IFFALSE 43081
// exit ;
43079: GO 43123
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43081: LD_ADDR_VAR 0 3
43085: PUSH
43086: LD_VAR 0 4
43090: PUSH
43091: LD_INT 1
43093: ARRAY
43094: PUSH
43095: LD_INT 1
43097: ARRAY
43098: PUSH
43099: LD_STRING r
43101: EQUAL
43102: PUSH
43103: LD_VAR 0 4
43107: PUSH
43108: LD_INT 1
43110: ARRAY
43111: PUSH
43112: LD_INT 4
43114: ARRAY
43115: PUSH
43116: LD_VAR 0 2
43120: EQUAL
43121: AND
43122: ST_TO_ADDR
// end ;
43123: LD_VAR 0 3
43127: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
43128: LD_INT 0
43130: PPUSH
// SetDir ( unit , d ) ;
43131: LD_VAR 0 1
43135: PPUSH
43136: LD_VAR 0 4
43140: PPUSH
43141: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
43145: LD_VAR 0 1
43149: PPUSH
43150: LD_VAR 0 2
43154: PPUSH
43155: LD_VAR 0 3
43159: PPUSH
43160: LD_VAR 0 5
43164: PPUSH
43165: CALL_OW 48
// end ;
43169: LD_VAR 0 6
43173: RET
// export function ToNaturalNumber ( number ) ; begin
43174: LD_INT 0
43176: PPUSH
// result := number div 1 ;
43177: LD_ADDR_VAR 0 2
43181: PUSH
43182: LD_VAR 0 1
43186: PUSH
43187: LD_INT 1
43189: DIV
43190: ST_TO_ADDR
// if number < 0 then
43191: LD_VAR 0 1
43195: PUSH
43196: LD_INT 0
43198: LESS
43199: IFFALSE 43209
// result := 0 ;
43201: LD_ADDR_VAR 0 2
43205: PUSH
43206: LD_INT 0
43208: ST_TO_ADDR
// end ;
43209: LD_VAR 0 2
43213: RET
// export function SortByClass ( units , class ) ; var un ; begin
43214: LD_INT 0
43216: PPUSH
43217: PPUSH
// if not units or not class then
43218: LD_VAR 0 1
43222: NOT
43223: PUSH
43224: LD_VAR 0 2
43228: NOT
43229: OR
43230: IFFALSE 43234
// exit ;
43232: GO 43329
// result := [ ] ;
43234: LD_ADDR_VAR 0 3
43238: PUSH
43239: EMPTY
43240: ST_TO_ADDR
// for un in units do
43241: LD_ADDR_VAR 0 4
43245: PUSH
43246: LD_VAR 0 1
43250: PUSH
43251: FOR_IN
43252: IFFALSE 43327
// if GetClass ( un ) = class then
43254: LD_VAR 0 4
43258: PPUSH
43259: CALL_OW 257
43263: PUSH
43264: LD_VAR 0 2
43268: EQUAL
43269: IFFALSE 43296
// result := Insert ( result , 1 , un ) else
43271: LD_ADDR_VAR 0 3
43275: PUSH
43276: LD_VAR 0 3
43280: PPUSH
43281: LD_INT 1
43283: PPUSH
43284: LD_VAR 0 4
43288: PPUSH
43289: CALL_OW 2
43293: ST_TO_ADDR
43294: GO 43325
// result := Replace ( result , result + 1 , un ) ;
43296: LD_ADDR_VAR 0 3
43300: PUSH
43301: LD_VAR 0 3
43305: PPUSH
43306: LD_VAR 0 3
43310: PUSH
43311: LD_INT 1
43313: PLUS
43314: PPUSH
43315: LD_VAR 0 4
43319: PPUSH
43320: CALL_OW 1
43324: ST_TO_ADDR
43325: GO 43251
43327: POP
43328: POP
// end ;
43329: LD_VAR 0 3
43333: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43334: LD_INT 0
43336: PPUSH
43337: PPUSH
43338: PPUSH
43339: PPUSH
43340: PPUSH
43341: PPUSH
43342: PPUSH
// result := [ ] ;
43343: LD_ADDR_VAR 0 4
43347: PUSH
43348: EMPTY
43349: ST_TO_ADDR
// if x - r < 0 then
43350: LD_VAR 0 1
43354: PUSH
43355: LD_VAR 0 3
43359: MINUS
43360: PUSH
43361: LD_INT 0
43363: LESS
43364: IFFALSE 43376
// min_x := 0 else
43366: LD_ADDR_VAR 0 8
43370: PUSH
43371: LD_INT 0
43373: ST_TO_ADDR
43374: GO 43392
// min_x := x - r ;
43376: LD_ADDR_VAR 0 8
43380: PUSH
43381: LD_VAR 0 1
43385: PUSH
43386: LD_VAR 0 3
43390: MINUS
43391: ST_TO_ADDR
// if y - r < 0 then
43392: LD_VAR 0 2
43396: PUSH
43397: LD_VAR 0 3
43401: MINUS
43402: PUSH
43403: LD_INT 0
43405: LESS
43406: IFFALSE 43418
// min_y := 0 else
43408: LD_ADDR_VAR 0 7
43412: PUSH
43413: LD_INT 0
43415: ST_TO_ADDR
43416: GO 43434
// min_y := y - r ;
43418: LD_ADDR_VAR 0 7
43422: PUSH
43423: LD_VAR 0 2
43427: PUSH
43428: LD_VAR 0 3
43432: MINUS
43433: ST_TO_ADDR
// max_x := x + r ;
43434: LD_ADDR_VAR 0 9
43438: PUSH
43439: LD_VAR 0 1
43443: PUSH
43444: LD_VAR 0 3
43448: PLUS
43449: ST_TO_ADDR
// max_y := y + r ;
43450: LD_ADDR_VAR 0 10
43454: PUSH
43455: LD_VAR 0 2
43459: PUSH
43460: LD_VAR 0 3
43464: PLUS
43465: ST_TO_ADDR
// for _x = min_x to max_x do
43466: LD_ADDR_VAR 0 5
43470: PUSH
43471: DOUBLE
43472: LD_VAR 0 8
43476: DEC
43477: ST_TO_ADDR
43478: LD_VAR 0 9
43482: PUSH
43483: FOR_TO
43484: IFFALSE 43585
// for _y = min_y to max_y do
43486: LD_ADDR_VAR 0 6
43490: PUSH
43491: DOUBLE
43492: LD_VAR 0 7
43496: DEC
43497: ST_TO_ADDR
43498: LD_VAR 0 10
43502: PUSH
43503: FOR_TO
43504: IFFALSE 43581
// begin if not ValidHex ( _x , _y ) then
43506: LD_VAR 0 5
43510: PPUSH
43511: LD_VAR 0 6
43515: PPUSH
43516: CALL_OW 488
43520: NOT
43521: IFFALSE 43525
// continue ;
43523: GO 43503
// if GetResourceTypeXY ( _x , _y ) then
43525: LD_VAR 0 5
43529: PPUSH
43530: LD_VAR 0 6
43534: PPUSH
43535: CALL_OW 283
43539: IFFALSE 43579
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43541: LD_ADDR_VAR 0 4
43545: PUSH
43546: LD_VAR 0 4
43550: PPUSH
43551: LD_VAR 0 4
43555: PUSH
43556: LD_INT 1
43558: PLUS
43559: PPUSH
43560: LD_VAR 0 5
43564: PUSH
43565: LD_VAR 0 6
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PPUSH
43574: CALL_OW 1
43578: ST_TO_ADDR
// end ;
43579: GO 43503
43581: POP
43582: POP
43583: GO 43483
43585: POP
43586: POP
// end ;
43587: LD_VAR 0 4
43591: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43592: LD_INT 0
43594: PPUSH
43595: PPUSH
43596: PPUSH
43597: PPUSH
43598: PPUSH
43599: PPUSH
43600: PPUSH
43601: PPUSH
// if not units then
43602: LD_VAR 0 1
43606: NOT
43607: IFFALSE 43611
// exit ;
43609: GO 44137
// result := UnitFilter ( units , [ f_ok ] ) ;
43611: LD_ADDR_VAR 0 3
43615: PUSH
43616: LD_VAR 0 1
43620: PPUSH
43621: LD_INT 50
43623: PUSH
43624: EMPTY
43625: LIST
43626: PPUSH
43627: CALL_OW 72
43631: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43632: LD_ADDR_VAR 0 8
43636: PUSH
43637: LD_VAR 0 1
43641: PUSH
43642: LD_INT 1
43644: ARRAY
43645: PPUSH
43646: CALL_OW 255
43650: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43651: LD_ADDR_VAR 0 10
43655: PUSH
43656: LD_INT 29
43658: PUSH
43659: LD_EXP 25
43663: PUSH
43664: LD_INT 49
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: LIST
43671: ST_TO_ADDR
// if not result then
43672: LD_VAR 0 3
43676: NOT
43677: IFFALSE 43681
// exit ;
43679: GO 44137
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43681: LD_ADDR_VAR 0 5
43685: PUSH
43686: LD_INT 81
43688: PUSH
43689: LD_VAR 0 8
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PPUSH
43698: CALL_OW 69
43702: ST_TO_ADDR
// for i in result do
43703: LD_ADDR_VAR 0 4
43707: PUSH
43708: LD_VAR 0 3
43712: PUSH
43713: FOR_IN
43714: IFFALSE 44135
// begin tag := GetTag ( i ) + 1 ;
43716: LD_ADDR_VAR 0 9
43720: PUSH
43721: LD_VAR 0 4
43725: PPUSH
43726: CALL_OW 110
43730: PUSH
43731: LD_INT 1
43733: PLUS
43734: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
43735: LD_ADDR_VAR 0 7
43739: PUSH
43740: LD_VAR 0 4
43744: PPUSH
43745: CALL_OW 250
43749: PPUSH
43750: LD_VAR 0 4
43754: PPUSH
43755: CALL_OW 251
43759: PPUSH
43760: LD_INT 6
43762: PPUSH
43763: CALL 43334 0 3
43767: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
43768: LD_VAR 0 4
43772: PPUSH
43773: CALL_OW 247
43777: PUSH
43778: LD_INT 2
43780: EQUAL
43781: PUSH
43782: LD_VAR 0 7
43786: AND
43787: PUSH
43788: LD_VAR 0 4
43792: PPUSH
43793: CALL_OW 264
43797: PUSH
43798: LD_VAR 0 10
43802: IN
43803: NOT
43804: AND
43805: IFFALSE 43844
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43807: LD_VAR 0 4
43811: PPUSH
43812: LD_VAR 0 7
43816: PUSH
43817: LD_INT 1
43819: ARRAY
43820: PUSH
43821: LD_INT 1
43823: ARRAY
43824: PPUSH
43825: LD_VAR 0 7
43829: PUSH
43830: LD_INT 1
43832: ARRAY
43833: PUSH
43834: LD_INT 2
43836: ARRAY
43837: PPUSH
43838: CALL_OW 116
43842: GO 44133
// if path > tag then
43844: LD_VAR 0 2
43848: PUSH
43849: LD_VAR 0 9
43853: GREATER
43854: IFFALSE 44062
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43856: LD_ADDR_VAR 0 6
43860: PUSH
43861: LD_VAR 0 5
43865: PPUSH
43866: LD_INT 91
43868: PUSH
43869: LD_VAR 0 4
43873: PUSH
43874: LD_INT 8
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: LIST
43881: PPUSH
43882: CALL_OW 72
43886: ST_TO_ADDR
// if nearEnemy then
43887: LD_VAR 0 6
43891: IFFALSE 43960
// begin if GetWeapon ( i ) = ru_time_lapser then
43893: LD_VAR 0 4
43897: PPUSH
43898: CALL_OW 264
43902: PUSH
43903: LD_INT 49
43905: EQUAL
43906: IFFALSE 43934
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43908: LD_VAR 0 4
43912: PPUSH
43913: LD_VAR 0 6
43917: PPUSH
43918: LD_VAR 0 4
43922: PPUSH
43923: CALL_OW 74
43927: PPUSH
43928: CALL_OW 112
43932: GO 43958
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43934: LD_VAR 0 4
43938: PPUSH
43939: LD_VAR 0 6
43943: PPUSH
43944: LD_VAR 0 4
43948: PPUSH
43949: CALL_OW 74
43953: PPUSH
43954: CALL_OW 115
// end else
43958: GO 44060
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43960: LD_VAR 0 4
43964: PPUSH
43965: LD_VAR 0 2
43969: PUSH
43970: LD_VAR 0 9
43974: ARRAY
43975: PUSH
43976: LD_INT 1
43978: ARRAY
43979: PPUSH
43980: LD_VAR 0 2
43984: PUSH
43985: LD_VAR 0 9
43989: ARRAY
43990: PUSH
43991: LD_INT 2
43993: ARRAY
43994: PPUSH
43995: CALL_OW 297
43999: PUSH
44000: LD_INT 6
44002: GREATER
44003: IFFALSE 44046
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
44005: LD_VAR 0 4
44009: PPUSH
44010: LD_VAR 0 2
44014: PUSH
44015: LD_VAR 0 9
44019: ARRAY
44020: PUSH
44021: LD_INT 1
44023: ARRAY
44024: PPUSH
44025: LD_VAR 0 2
44029: PUSH
44030: LD_VAR 0 9
44034: ARRAY
44035: PUSH
44036: LD_INT 2
44038: ARRAY
44039: PPUSH
44040: CALL_OW 114
44044: GO 44060
// SetTag ( i , tag ) ;
44046: LD_VAR 0 4
44050: PPUSH
44051: LD_VAR 0 9
44055: PPUSH
44056: CALL_OW 109
// end else
44060: GO 44133
// if enemy then
44062: LD_VAR 0 5
44066: IFFALSE 44133
// begin if GetWeapon ( i ) = ru_time_lapser then
44068: LD_VAR 0 4
44072: PPUSH
44073: CALL_OW 264
44077: PUSH
44078: LD_INT 49
44080: EQUAL
44081: IFFALSE 44109
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
44083: LD_VAR 0 4
44087: PPUSH
44088: LD_VAR 0 5
44092: PPUSH
44093: LD_VAR 0 4
44097: PPUSH
44098: CALL_OW 74
44102: PPUSH
44103: CALL_OW 112
44107: GO 44133
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
44109: LD_VAR 0 4
44113: PPUSH
44114: LD_VAR 0 5
44118: PPUSH
44119: LD_VAR 0 4
44123: PPUSH
44124: CALL_OW 74
44128: PPUSH
44129: CALL_OW 115
// end ; end ;
44133: GO 43713
44135: POP
44136: POP
// end ;
44137: LD_VAR 0 3
44141: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
44142: LD_INT 0
44144: PPUSH
44145: PPUSH
44146: PPUSH
// if not unit or IsInUnit ( unit ) then
44147: LD_VAR 0 1
44151: NOT
44152: PUSH
44153: LD_VAR 0 1
44157: PPUSH
44158: CALL_OW 310
44162: OR
44163: IFFALSE 44167
// exit ;
44165: GO 44258
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
44167: LD_ADDR_VAR 0 4
44171: PUSH
44172: LD_VAR 0 1
44176: PPUSH
44177: CALL_OW 250
44181: PPUSH
44182: LD_VAR 0 2
44186: PPUSH
44187: LD_INT 1
44189: PPUSH
44190: CALL_OW 272
44194: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
44195: LD_ADDR_VAR 0 5
44199: PUSH
44200: LD_VAR 0 1
44204: PPUSH
44205: CALL_OW 251
44209: PPUSH
44210: LD_VAR 0 2
44214: PPUSH
44215: LD_INT 1
44217: PPUSH
44218: CALL_OW 273
44222: ST_TO_ADDR
// if ValidHex ( x , y ) then
44223: LD_VAR 0 4
44227: PPUSH
44228: LD_VAR 0 5
44232: PPUSH
44233: CALL_OW 488
44237: IFFALSE 44258
// ComTurnXY ( unit , x , y ) ;
44239: LD_VAR 0 1
44243: PPUSH
44244: LD_VAR 0 4
44248: PPUSH
44249: LD_VAR 0 5
44253: PPUSH
44254: CALL_OW 118
// end ;
44258: LD_VAR 0 3
44262: RET
// export function SeeUnits ( side , units ) ; var i ; begin
44263: LD_INT 0
44265: PPUSH
44266: PPUSH
// result := false ;
44267: LD_ADDR_VAR 0 3
44271: PUSH
44272: LD_INT 0
44274: ST_TO_ADDR
// if not units then
44275: LD_VAR 0 2
44279: NOT
44280: IFFALSE 44284
// exit ;
44282: GO 44329
// for i in units do
44284: LD_ADDR_VAR 0 4
44288: PUSH
44289: LD_VAR 0 2
44293: PUSH
44294: FOR_IN
44295: IFFALSE 44327
// if See ( side , i ) then
44297: LD_VAR 0 1
44301: PPUSH
44302: LD_VAR 0 4
44306: PPUSH
44307: CALL_OW 292
44311: IFFALSE 44325
// begin result := true ;
44313: LD_ADDR_VAR 0 3
44317: PUSH
44318: LD_INT 1
44320: ST_TO_ADDR
// exit ;
44321: POP
44322: POP
44323: GO 44329
// end ;
44325: GO 44294
44327: POP
44328: POP
// end ;
44329: LD_VAR 0 3
44333: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44334: LD_INT 0
44336: PPUSH
44337: PPUSH
44338: PPUSH
44339: PPUSH
// if not unit or not points then
44340: LD_VAR 0 1
44344: NOT
44345: PUSH
44346: LD_VAR 0 2
44350: NOT
44351: OR
44352: IFFALSE 44356
// exit ;
44354: GO 44446
// dist := 99999 ;
44356: LD_ADDR_VAR 0 5
44360: PUSH
44361: LD_INT 99999
44363: ST_TO_ADDR
// for i in points do
44364: LD_ADDR_VAR 0 4
44368: PUSH
44369: LD_VAR 0 2
44373: PUSH
44374: FOR_IN
44375: IFFALSE 44444
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44377: LD_ADDR_VAR 0 6
44381: PUSH
44382: LD_VAR 0 1
44386: PPUSH
44387: LD_VAR 0 4
44391: PUSH
44392: LD_INT 1
44394: ARRAY
44395: PPUSH
44396: LD_VAR 0 4
44400: PUSH
44401: LD_INT 2
44403: ARRAY
44404: PPUSH
44405: CALL_OW 297
44409: ST_TO_ADDR
// if tmpDist < dist then
44410: LD_VAR 0 6
44414: PUSH
44415: LD_VAR 0 5
44419: LESS
44420: IFFALSE 44442
// begin result := i ;
44422: LD_ADDR_VAR 0 3
44426: PUSH
44427: LD_VAR 0 4
44431: ST_TO_ADDR
// dist := tmpDist ;
44432: LD_ADDR_VAR 0 5
44436: PUSH
44437: LD_VAR 0 6
44441: ST_TO_ADDR
// end ; end ;
44442: GO 44374
44444: POP
44445: POP
// end ;
44446: LD_VAR 0 3
44450: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44451: LD_INT 0
44453: PPUSH
// uc_side := side ;
44454: LD_ADDR_OWVAR 20
44458: PUSH
44459: LD_VAR 0 1
44463: ST_TO_ADDR
// uc_nation := 3 ;
44464: LD_ADDR_OWVAR 21
44468: PUSH
44469: LD_INT 3
44471: ST_TO_ADDR
// vc_chassis := 25 ;
44472: LD_ADDR_OWVAR 37
44476: PUSH
44477: LD_INT 25
44479: ST_TO_ADDR
// vc_engine := engine_siberite ;
44480: LD_ADDR_OWVAR 39
44484: PUSH
44485: LD_INT 3
44487: ST_TO_ADDR
// vc_control := control_computer ;
44488: LD_ADDR_OWVAR 38
44492: PUSH
44493: LD_INT 3
44495: ST_TO_ADDR
// vc_weapon := 59 ;
44496: LD_ADDR_OWVAR 40
44500: PUSH
44501: LD_INT 59
44503: ST_TO_ADDR
// result := CreateVehicle ;
44504: LD_ADDR_VAR 0 5
44508: PUSH
44509: CALL_OW 45
44513: ST_TO_ADDR
// SetDir ( result , d ) ;
44514: LD_VAR 0 5
44518: PPUSH
44519: LD_VAR 0 4
44523: PPUSH
44524: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44528: LD_VAR 0 5
44532: PPUSH
44533: LD_VAR 0 2
44537: PPUSH
44538: LD_VAR 0 3
44542: PPUSH
44543: LD_INT 0
44545: PPUSH
44546: CALL_OW 48
// end ;
44550: LD_VAR 0 5
44554: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44555: LD_INT 0
44557: PPUSH
44558: PPUSH
44559: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44560: LD_ADDR_VAR 0 2
44564: PUSH
44565: LD_INT 0
44567: PUSH
44568: LD_INT 0
44570: PUSH
44571: LD_INT 0
44573: PUSH
44574: LD_INT 0
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44583: LD_VAR 0 1
44587: NOT
44588: PUSH
44589: LD_VAR 0 1
44593: PPUSH
44594: CALL_OW 264
44598: PUSH
44599: LD_INT 12
44601: PUSH
44602: LD_INT 51
44604: PUSH
44605: LD_INT 32
44607: PUSH
44608: LD_EXP 22
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: IN
44619: NOT
44620: OR
44621: IFFALSE 44625
// exit ;
44623: GO 44723
// for i := 1 to 3 do
44625: LD_ADDR_VAR 0 3
44629: PUSH
44630: DOUBLE
44631: LD_INT 1
44633: DEC
44634: ST_TO_ADDR
44635: LD_INT 3
44637: PUSH
44638: FOR_TO
44639: IFFALSE 44721
// begin tmp := GetCargo ( cargo , i ) ;
44641: LD_ADDR_VAR 0 4
44645: PUSH
44646: LD_VAR 0 1
44650: PPUSH
44651: LD_VAR 0 3
44655: PPUSH
44656: CALL_OW 289
44660: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44661: LD_ADDR_VAR 0 2
44665: PUSH
44666: LD_VAR 0 2
44670: PPUSH
44671: LD_VAR 0 3
44675: PPUSH
44676: LD_VAR 0 4
44680: PPUSH
44681: CALL_OW 1
44685: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44686: LD_ADDR_VAR 0 2
44690: PUSH
44691: LD_VAR 0 2
44695: PPUSH
44696: LD_INT 4
44698: PPUSH
44699: LD_VAR 0 2
44703: PUSH
44704: LD_INT 4
44706: ARRAY
44707: PUSH
44708: LD_VAR 0 4
44712: PLUS
44713: PPUSH
44714: CALL_OW 1
44718: ST_TO_ADDR
// end ;
44719: GO 44638
44721: POP
44722: POP
// end ;
44723: LD_VAR 0 2
44727: RET
// export function Length ( array ) ; begin
44728: LD_INT 0
44730: PPUSH
// result := array + 0 ;
44731: LD_ADDR_VAR 0 2
44735: PUSH
44736: LD_VAR 0 1
44740: PUSH
44741: LD_INT 0
44743: PLUS
44744: ST_TO_ADDR
// end ;
44745: LD_VAR 0 2
44749: RET
// export function PrepareArray ( array ) ; begin
44750: LD_INT 0
44752: PPUSH
// result := array diff 0 ;
44753: LD_ADDR_VAR 0 2
44757: PUSH
44758: LD_VAR 0 1
44762: PUSH
44763: LD_INT 0
44765: DIFF
44766: ST_TO_ADDR
// if not result [ 1 ] then
44767: LD_VAR 0 2
44771: PUSH
44772: LD_INT 1
44774: ARRAY
44775: NOT
44776: IFFALSE 44796
// result := Delete ( result , 1 ) ;
44778: LD_ADDR_VAR 0 2
44782: PUSH
44783: LD_VAR 0 2
44787: PPUSH
44788: LD_INT 1
44790: PPUSH
44791: CALL_OW 3
44795: ST_TO_ADDR
// end ; end_of_file
44796: LD_VAR 0 2
44800: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
44801: LD_INT 0
44803: PPUSH
// ar_miner := 81 ;
44804: LD_ADDR_EXP 28
44808: PUSH
44809: LD_INT 81
44811: ST_TO_ADDR
// ar_crane := 88 ;
44812: LD_ADDR_EXP 27
44816: PUSH
44817: LD_INT 88
44819: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
44820: LD_ADDR_EXP 22
44824: PUSH
44825: LD_INT 89
44827: ST_TO_ADDR
// us_hack := 99 ;
44828: LD_ADDR_EXP 23
44832: PUSH
44833: LD_INT 99
44835: ST_TO_ADDR
// us_artillery := 97 ;
44836: LD_ADDR_EXP 24
44840: PUSH
44841: LD_INT 97
44843: ST_TO_ADDR
// ar_bio_bomb := 91 ;
44844: LD_ADDR_EXP 25
44848: PUSH
44849: LD_INT 91
44851: ST_TO_ADDR
// ar_mortar := 92 ;
44852: LD_ADDR_EXP 26
44856: PUSH
44857: LD_INT 92
44859: ST_TO_ADDR
// ru_flamethrower := 93 ;
44860: LD_ADDR_EXP 29
44864: PUSH
44865: LD_INT 93
44867: ST_TO_ADDR
// ru_radar := 98 ;
44868: LD_ADDR_EXP 21
44872: PUSH
44873: LD_INT 98
44875: ST_TO_ADDR
// tech_Artillery := 80 ;
44876: LD_ADDR_EXP 30
44880: PUSH
44881: LD_INT 80
44883: ST_TO_ADDR
// tech_RadMat := 81 ;
44884: LD_ADDR_EXP 31
44888: PUSH
44889: LD_INT 81
44891: ST_TO_ADDR
// tech_BasicTools := 82 ;
44892: LD_ADDR_EXP 32
44896: PUSH
44897: LD_INT 82
44899: ST_TO_ADDR
// tech_Cargo := 83 ;
44900: LD_ADDR_EXP 33
44904: PUSH
44905: LD_INT 83
44907: ST_TO_ADDR
// tech_Track := 84 ;
44908: LD_ADDR_EXP 34
44912: PUSH
44913: LD_INT 84
44915: ST_TO_ADDR
// tech_Crane := 85 ;
44916: LD_ADDR_EXP 35
44920: PUSH
44921: LD_INT 85
44923: ST_TO_ADDR
// tech_Bulldozer := 86 ;
44924: LD_ADDR_EXP 36
44928: PUSH
44929: LD_INT 86
44931: ST_TO_ADDR
// tech_Hovercraft := 87 ;
44932: LD_ADDR_EXP 37
44936: PUSH
44937: LD_INT 87
44939: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
44940: LD_ADDR_EXP 38
44944: PUSH
44945: LD_INT 88
44947: ST_TO_ADDR
// end ;
44948: LD_VAR 0 1
44952: RET
// every 1 do
44953: GO 44955
44955: DISABLE
// InitGlobalVariables ;
44956: CALL 44801 0 0
44960: END
