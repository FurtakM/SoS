// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// PrepareArabian ;
   8: CALL 65 0 0
// PrepareRussian ;
  12: CALL 1514 0 0
// PrepareHeike ;
  16: CALL 614 0 0
// Action ;
  20: CALL 2694 0 0
// end ;
  24: END
// export debug , prefix , startAttackOnKabul , startAttackOnHeike ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// prefix := 07_ ;
  36: LD_ADDR_EXP 2
  40: PUSH
  41: LD_STRING 07_
  43: ST_TO_ADDR
// startAttackOnKabul := false ;
  44: LD_ADDR_EXP 3
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// startAttackOnHeike := false ;
  52: LD_ADDR_EXP 4
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// end ; end_of_file
  60: LD_VAR 0 1
  64: RET
// export function PrepareArabian ; var i , un , lives ; begin
  65: LD_INT 0
  67: PPUSH
  68: PPUSH
  69: PPUSH
  70: PPUSH
// SetBName ( ar_dep , newkabul ) ;
  71: LD_INT 2
  73: PPUSH
  74: LD_STRING newkabul
  76: PPUSH
  77: CALL_OW 500
// uc_side := 5 ;
  81: LD_ADDR_OWVAR 20
  85: PUSH
  86: LD_INT 5
  88: ST_TO_ADDR
// uc_nation := 2 ;
  89: LD_ADDR_OWVAR 21
  93: PUSH
  94: LD_INT 2
  96: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do
  97: LD_ADDR_VAR 0 2
 101: PUSH
 102: LD_INT 22
 104: PUSH
 105: LD_INT 2
 107: PUSH
 108: EMPTY
 109: LIST
 110: LIST
 111: PUSH
 112: LD_INT 21
 114: PUSH
 115: LD_INT 3
 117: PUSH
 118: EMPTY
 119: LIST
 120: LIST
 121: PUSH
 122: EMPTY
 123: LIST
 124: LIST
 125: PPUSH
 126: CALL_OW 69
 130: PUSH
 131: FOR_IN
 132: IFFALSE 266
// begin SetSide ( i , 5 ) ;
 134: LD_VAR 0 2
 138: PPUSH
 139: LD_INT 5
 141: PPUSH
 142: CALL_OW 235
// lives := rand ( 248 , 510 ) ;
 146: LD_ADDR_VAR 0 4
 150: PUSH
 151: LD_INT 248
 153: PPUSH
 154: LD_INT 510
 156: PPUSH
 157: CALL_OW 12
 161: ST_TO_ADDR
// SetLives ( i , lives ) ;
 162: LD_VAR 0 2
 166: PPUSH
 167: LD_VAR 0 4
 171: PPUSH
 172: CALL_OW 234
// if GetBType ( i ) = b_bunker then
 176: LD_VAR 0 2
 180: PPUSH
 181: CALL_OW 266
 185: PUSH
 186: LD_INT 32
 188: EQUAL
 189: IFFALSE 264
// begin PlaceWeaponTurret ( i , [ ar_double_machine_gun , ar_gun , ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] ) ;
 191: LD_VAR 0 2
 195: PPUSH
 196: LD_INT 24
 198: PUSH
 199: LD_INT 27
 201: PUSH
 202: LD_INT 25
 204: PUSH
 205: LD_INT 28
 207: PUSH
 208: EMPTY
 209: LIST
 210: LIST
 211: LIST
 212: LIST
 213: PUSH
 214: LD_INT 1
 216: PPUSH
 217: LD_INT 4
 219: PPUSH
 220: CALL_OW 12
 224: ARRAY
 225: PPUSH
 226: CALL_OW 431
// if lives > 250 then
 230: LD_VAR 0 4
 234: PUSH
 235: LD_INT 250
 237: GREATER
 238: IFFALSE 264
// begin PrepareSoldier ( false , 6 ) ;
 240: LD_INT 0
 242: PPUSH
 243: LD_INT 6
 245: PPUSH
 246: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
 250: CALL_OW 44
 254: PPUSH
 255: LD_VAR 0 2
 259: PPUSH
 260: CALL_OW 52
// end ; end ; end ;
 264: GO 131
 266: POP
 267: POP
// for i := 1 to 9 do
 268: LD_ADDR_VAR 0 2
 272: PUSH
 273: DOUBLE
 274: LD_INT 1
 276: DEC
 277: ST_TO_ADDR
 278: LD_INT 9
 280: PUSH
 281: FOR_TO
 282: IFFALSE 361
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 0 ) ;
 284: LD_INT 0
 286: PPUSH
 287: LD_INT 1
 289: PPUSH
 290: LD_INT 4
 292: PPUSH
 293: CALL_OW 12
 297: PPUSH
 298: LD_INT 0
 300: PPUSH
 301: CALL_OW 380
// un := CreateHuman ;
 305: LD_ADDR_VAR 0 3
 309: PUSH
 310: CALL_OW 44
 314: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 315: LD_VAR 0 3
 319: PPUSH
 320: LD_INT 0
 322: PPUSH
 323: LD_INT 5
 325: PPUSH
 326: CALL_OW 12
 330: PPUSH
 331: CALL_OW 233
// PlaceUnitArea ( un , kabulDeadArea , false ) ;
 335: LD_VAR 0 3
 339: PPUSH
 340: LD_INT 1
 342: PPUSH
 343: LD_INT 0
 345: PPUSH
 346: CALL_OW 49
// KillUnit ( un ) ;
 350: LD_VAR 0 3
 354: PPUSH
 355: CALL_OW 66
// end ;
 359: GO 281
 361: POP
 362: POP
// for i := 1 to 3 do
 363: LD_ADDR_VAR 0 2
 367: PUSH
 368: DOUBLE
 369: LD_INT 1
 371: DEC
 372: ST_TO_ADDR
 373: LD_INT 3
 375: PUSH
 376: FOR_TO
 377: IFFALSE 531
// begin vc_chassis := ar_medium_trike ;
 379: LD_ADDR_OWVAR 37
 383: PUSH
 384: LD_INT 13
 386: ST_TO_ADDR
// vc_engine := [ engine_solar , engine_combustion ] [ rand ( 1 , 2 ) ] ;
 387: LD_ADDR_OWVAR 39
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 1
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: PUSH
 402: LD_INT 1
 404: PPUSH
 405: LD_INT 2
 407: PPUSH
 408: CALL_OW 12
 412: ARRAY
 413: ST_TO_ADDR
// vc_control := [ control_manual , control_remote ] [ rand ( 1 , 2 ) ] ;
 414: LD_ADDR_OWVAR 38
 418: PUSH
 419: LD_INT 1
 421: PUSH
 422: LD_INT 2
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: PUSH
 429: LD_INT 1
 431: PPUSH
 432: LD_INT 2
 434: PPUSH
 435: CALL_OW 12
 439: ARRAY
 440: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_gatling_gun , ar_gun ] [ rand ( 1 , 3 ) ] ;
 441: LD_ADDR_OWVAR 40
 445: PUSH
 446: LD_INT 24
 448: PUSH
 449: LD_INT 25
 451: PUSH
 452: LD_INT 27
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: LIST
 459: PUSH
 460: LD_INT 1
 462: PPUSH
 463: LD_INT 3
 465: PPUSH
 466: CALL_OW 12
 470: ARRAY
 471: ST_TO_ADDR
// un := CreateVehicle ;
 472: LD_ADDR_VAR 0 3
 476: PUSH
 477: CALL_OW 45
 481: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 482: LD_VAR 0 3
 486: PPUSH
 487: LD_INT 0
 489: PPUSH
 490: LD_INT 5
 492: PPUSH
 493: CALL_OW 12
 497: PPUSH
 498: CALL_OW 233
// PlaceUnitArea ( un , kabulVDeadArea , false ) ;
 502: LD_VAR 0 3
 506: PPUSH
 507: LD_INT 2
 509: PPUSH
 510: LD_INT 0
 512: PPUSH
 513: CALL_OW 49
// SetLives ( un , 200 ) ;
 517: LD_VAR 0 3
 521: PPUSH
 522: LD_INT 200
 524: PPUSH
 525: CALL_OW 234
// end ;
 529: GO 376
 531: POP
 532: POP
// for i := 1 to 3 do
 533: LD_ADDR_VAR 0 2
 537: PUSH
 538: DOUBLE
 539: LD_INT 1
 541: DEC
 542: ST_TO_ADDR
 543: LD_INT 3
 545: PUSH
 546: FOR_TO
 547: IFFALSE 607
// begin PrepareSoldier ( false , 6 ) ;
 549: LD_INT 0
 551: PPUSH
 552: LD_INT 6
 554: PPUSH
 555: CALL_OW 381
// un := CreateHuman ;
 559: LD_ADDR_VAR 0 3
 563: PUSH
 564: CALL_OW 44
 568: ST_TO_ADDR
// PlaceUnitXYR ( un , 106 , 47 , 4 , false ) ;
 569: LD_VAR 0 3
 573: PPUSH
 574: LD_INT 106
 576: PPUSH
 577: LD_INT 47
 579: PPUSH
 580: LD_INT 4
 582: PPUSH
 583: LD_INT 0
 585: PPUSH
 586: CALL_OW 50
// ComAgressiveMove ( un , 71 , 53 ) ;
 590: LD_VAR 0 3
 594: PPUSH
 595: LD_INT 71
 597: PPUSH
 598: LD_INT 53
 600: PPUSH
 601: CALL_OW 114
// end ;
 605: GO 546
 607: POP
 608: POP
// end ;
 609: LD_VAR 0 1
 613: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad ; export function PrepareHeike ; var i , tmp , un , veh ; begin
 614: LD_INT 0
 616: PPUSH
 617: PPUSH
 618: PPUSH
 619: PPUSH
 620: PPUSH
// uc_side := 5 ;
 621: LD_ADDR_OWVAR 20
 625: PUSH
 626: LD_INT 5
 628: ST_TO_ADDR
// uc_nation := 1 ;
 629: LD_ADDR_OWVAR 21
 633: PUSH
 634: LD_INT 1
 636: ST_TO_ADDR
// americanSquad := [ ] ;
 637: LD_ADDR_EXP 17
 641: PUSH
 642: EMPTY
 643: ST_TO_ADDR
// if not americanSquad then
 644: LD_EXP 17
 648: NOT
 649: IFFALSE 714
// begin for i := 1 to 4 do
 651: LD_ADDR_VAR 0 2
 655: PUSH
 656: DOUBLE
 657: LD_INT 1
 659: DEC
 660: ST_TO_ADDR
 661: LD_INT 4
 663: PUSH
 664: FOR_TO
 665: IFFALSE 710
// begin PrepareHuman ( false , rand ( 2 , 4 ) , 6 ) ;
 667: LD_INT 0
 669: PPUSH
 670: LD_INT 2
 672: PPUSH
 673: LD_INT 4
 675: PPUSH
 676: CALL_OW 12
 680: PPUSH
 681: LD_INT 6
 683: PPUSH
 684: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 688: LD_ADDR_EXP 17
 692: PUSH
 693: LD_EXP 17
 697: PPUSH
 698: CALL_OW 44
 702: PPUSH
 703: CALL 41445 0 2
 707: ST_TO_ADDR
// end ;
 708: GO 664
 710: POP
 711: POP
// end else
 712: GO 765
// begin for i in americanSquad do
 714: LD_ADDR_VAR 0 2
 718: PUSH
 719: LD_EXP 17
 723: PUSH
 724: FOR_IN
 725: IFFALSE 763
// if GetClass ( i ) in [ class_sniper , class_soldier ] then
 727: LD_VAR 0 2
 731: PPUSH
 732: CALL_OW 257
 736: PUSH
 737: LD_INT 5
 739: PUSH
 740: LD_INT 1
 742: PUSH
 743: EMPTY
 744: LIST
 745: LIST
 746: IN
 747: IFFALSE 761
// SetClass ( i , class_engineer ) ;
 749: LD_VAR 0 2
 753: PPUSH
 754: LD_INT 2
 756: PPUSH
 757: CALL_OW 336
 761: GO 724
 763: POP
 764: POP
// end ; uc_side := 2 ;
 765: LD_ADDR_OWVAR 20
 769: PUSH
 770: LD_INT 2
 772: ST_TO_ADDR
// uc_nation := 2 ;
 773: LD_ADDR_OWVAR 21
 777: PUSH
 778: LD_INT 2
 780: ST_TO_ADDR
// Heike := PrepareUnitForce ( Heike , ( not debug ) , prefix ) ;
 781: LD_ADDR_EXP 5
 785: PUSH
 786: LD_STRING Heike
 788: PPUSH
 789: LD_EXP 1
 793: NOT
 794: PPUSH
 795: LD_EXP 2
 799: PPUSH
 800: CALL 3734 0 3
 804: ST_TO_ADDR
// Ibrahim := PrepareUnitForce ( Ibrahim , ( not debug ) , prefix ) ;
 805: LD_ADDR_EXP 8
 809: PUSH
 810: LD_STRING Ibrahim
 812: PPUSH
 813: LD_EXP 1
 817: NOT
 818: PPUSH
 819: LD_EXP 2
 823: PPUSH
 824: CALL 3734 0 3
 828: ST_TO_ADDR
// Givi := PrepareUnitForce ( Givi , ( not debug ) , prefix ) ;
 829: LD_ADDR_EXP 6
 833: PUSH
 834: LD_STRING Givi
 836: PPUSH
 837: LD_EXP 1
 841: NOT
 842: PPUSH
 843: LD_EXP 2
 847: PPUSH
 848: CALL 3734 0 3
 852: ST_TO_ADDR
// Kamil := PrepareUnitForce ( Kamil , ( not debug ) , prefix ) ;
 853: LD_ADDR_EXP 9
 857: PUSH
 858: LD_STRING Kamil
 860: PPUSH
 861: LD_EXP 1
 865: NOT
 866: PPUSH
 867: LD_EXP 2
 871: PPUSH
 872: CALL 3734 0 3
 876: ST_TO_ADDR
// Kaia := PrepareUnitForce ( Kaia , ( not debug ) , prefix ) ;
 877: LD_ADDR_EXP 10
 881: PUSH
 882: LD_STRING Kaia
 884: PPUSH
 885: LD_EXP 1
 889: NOT
 890: PPUSH
 891: LD_EXP 2
 895: PPUSH
 896: CALL 3734 0 3
 900: ST_TO_ADDR
// Sophia := PrepareUnitForce ( Sophia , ( not debug ) , prefix ) ;
 901: LD_ADDR_EXP 11
 905: PUSH
 906: LD_STRING Sophia
 908: PPUSH
 909: LD_EXP 1
 913: NOT
 914: PPUSH
 915: LD_EXP 2
 919: PPUSH
 920: CALL 3734 0 3
 924: ST_TO_ADDR
// Markov := PrepareUnitForce ( Markov , ( not debug ) , prefix ) ;
 925: LD_ADDR_EXP 12
 929: PUSH
 930: LD_STRING Markov
 932: PPUSH
 933: LD_EXP 1
 937: NOT
 938: PPUSH
 939: LD_EXP 2
 943: PPUSH
 944: CALL 3734 0 3
 948: ST_TO_ADDR
// Aviradze := PrepareUnitForce ( Aviradze , ( not debug ) , prefix ) ;
 949: LD_ADDR_EXP 15
 953: PUSH
 954: LD_STRING Aviradze
 956: PPUSH
 957: LD_EXP 1
 961: NOT
 962: PPUSH
 963: LD_EXP 2
 967: PPUSH
 968: CALL 3734 0 3
 972: ST_TO_ADDR
// Kurt := PrepareUnitForce ( Kurt , ( not debug ) , prefix ) ;
 973: LD_ADDR_EXP 14
 977: PUSH
 978: LD_STRING Kurt
 980: PPUSH
 981: LD_EXP 1
 985: NOT
 986: PPUSH
 987: LD_EXP 2
 991: PPUSH
 992: CALL 3734 0 3
 996: ST_TO_ADDR
// Mike := PrepareUnitForce ( Mike , ( not debug ) , prefix ) ;
 997: LD_ADDR_EXP 7
1001: PUSH
1002: LD_STRING Mike
1004: PPUSH
1005: LD_EXP 1
1009: NOT
1010: PPUSH
1011: LD_EXP 2
1015: PPUSH
1016: CALL 3734 0 3
1020: ST_TO_ADDR
// Olaf := PrepareUnitForce ( Olaf , ( not debug ) , prefix ) ;
1021: LD_ADDR_EXP 13
1025: PUSH
1026: LD_STRING Olaf
1028: PPUSH
1029: LD_EXP 1
1033: NOT
1034: PPUSH
1035: LD_EXP 2
1039: PPUSH
1040: CALL 3734 0 3
1044: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
1045: LD_ADDR_EXP 16
1049: PUSH
1050: LD_STRING 07_others
1052: PPUSH
1053: CALL_OW 31
1057: ST_TO_ADDR
// veh := [ [ ar_half_tracked , engine_combustion , control_manual , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] , ] ;
1058: LD_ADDR_VAR 0 5
1062: PUSH
1063: LD_INT 14
1065: PUSH
1066: LD_INT 1
1068: PUSH
1069: LD_INT 1
1071: PUSH
1072: LD_INT 25
1074: PUSH
1075: EMPTY
1076: LIST
1077: LIST
1078: LIST
1079: LIST
1080: PUSH
1081: LD_INT 14
1083: PUSH
1084: LD_INT 1
1086: PUSH
1087: LD_INT 1
1089: PUSH
1090: LD_INT 27
1092: PUSH
1093: EMPTY
1094: LIST
1095: LIST
1096: LIST
1097: LIST
1098: PUSH
1099: LD_INT 14
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: LD_INT 1
1107: PUSH
1108: LD_INT 27
1110: PUSH
1111: EMPTY
1112: LIST
1113: LIST
1114: LIST
1115: LIST
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: LIST
1121: ST_TO_ADDR
// for i in veh do
1122: LD_ADDR_VAR 0 2
1126: PUSH
1127: LD_VAR 0 5
1131: PUSH
1132: FOR_IN
1133: IFFALSE 1238
// begin vc_chassis := i [ 1 ] ;
1135: LD_ADDR_OWVAR 37
1139: PUSH
1140: LD_VAR 0 2
1144: PUSH
1145: LD_INT 1
1147: ARRAY
1148: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
1149: LD_ADDR_OWVAR 39
1153: PUSH
1154: LD_VAR 0 2
1158: PUSH
1159: LD_INT 2
1161: ARRAY
1162: ST_TO_ADDR
// vc_control := i [ 3 ] ;
1163: LD_ADDR_OWVAR 38
1167: PUSH
1168: LD_VAR 0 2
1172: PUSH
1173: LD_INT 3
1175: ARRAY
1176: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
1177: LD_ADDR_OWVAR 40
1181: PUSH
1182: LD_VAR 0 2
1186: PUSH
1187: LD_INT 4
1189: ARRAY
1190: ST_TO_ADDR
// vc_fuel_battery := 25 ;
1191: LD_ADDR_OWVAR 41
1195: PUSH
1196: LD_INT 25
1198: ST_TO_ADDR
// un := CreateVehicle ;
1199: LD_ADDR_VAR 0 4
1203: PUSH
1204: CALL_OW 45
1208: ST_TO_ADDR
// SetDir ( un , 0 ) ;
1209: LD_VAR 0 4
1213: PPUSH
1214: LD_INT 0
1216: PPUSH
1217: CALL_OW 233
// PlaceUnitArea ( un , heikeVehArea , false ) ;
1221: LD_VAR 0 4
1225: PPUSH
1226: LD_INT 7
1228: PPUSH
1229: LD_INT 0
1231: PPUSH
1232: CALL_OW 49
// end ;
1236: GO 1132
1238: POP
1239: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad union americanSquad ;
1240: LD_ADDR_VAR 0 3
1244: PUSH
1245: LD_EXP 7
1249: PUSH
1250: LD_EXP 8
1254: PUSH
1255: LD_EXP 9
1259: PUSH
1260: LD_EXP 10
1264: PUSH
1265: LD_EXP 11
1269: PUSH
1270: LD_EXP 12
1274: PUSH
1275: LD_EXP 13
1279: PUSH
1280: LD_EXP 14
1284: PUSH
1285: LD_EXP 15
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: PUSH
1301: LD_EXP 16
1305: UNION
1306: PUSH
1307: LD_EXP 17
1311: UNION
1312: ST_TO_ADDR
// for i in tmp do
1313: LD_ADDR_VAR 0 2
1317: PUSH
1318: LD_VAR 0 3
1322: PUSH
1323: FOR_IN
1324: IFFALSE 1444
// begin if GetClass ( i ) in [ class_mechanic , class_engineer , class_scientistic ] and FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) then
1326: LD_VAR 0 2
1330: PPUSH
1331: CALL_OW 257
1335: PUSH
1336: LD_INT 3
1338: PUSH
1339: LD_INT 2
1341: PUSH
1342: LD_INT 4
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: LIST
1349: IN
1350: PUSH
1351: LD_INT 22
1353: PUSH
1354: LD_INT 2
1356: PUSH
1357: EMPTY
1358: LIST
1359: LIST
1360: PUSH
1361: LD_INT 58
1363: PUSH
1364: EMPTY
1365: LIST
1366: PUSH
1367: EMPTY
1368: LIST
1369: LIST
1370: PPUSH
1371: CALL_OW 69
1375: AND
1376: IFFALSE 1418
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) [ 1 ] ) else
1378: LD_VAR 0 2
1382: PPUSH
1383: LD_INT 22
1385: PUSH
1386: LD_INT 2
1388: PUSH
1389: EMPTY
1390: LIST
1391: LIST
1392: PUSH
1393: LD_INT 58
1395: PUSH
1396: EMPTY
1397: LIST
1398: PUSH
1399: EMPTY
1400: LIST
1401: LIST
1402: PPUSH
1403: CALL_OW 69
1407: PUSH
1408: LD_INT 1
1410: ARRAY
1411: PPUSH
1412: CALL_OW 52
1416: GO 1433
// PlaceUnitArea ( i , heikePeopleArea , false ) ;
1418: LD_VAR 0 2
1422: PPUSH
1423: LD_INT 6
1425: PPUSH
1426: LD_INT 0
1428: PPUSH
1429: CALL_OW 49
// ComHold ( i ) ;
1433: LD_VAR 0 2
1437: PPUSH
1438: CALL_OW 140
// end ;
1442: GO 1323
1444: POP
1445: POP
// PlaceUnitArea ( Heike , heikeArea , false ) ;
1446: LD_EXP 5
1450: PPUSH
1451: LD_INT 5
1453: PPUSH
1454: LD_INT 0
1456: PPUSH
1457: CALL_OW 49
// ComTurnUnit ( Heike , ar_dep ) ;
1461: LD_EXP 5
1465: PPUSH
1466: LD_INT 2
1468: PPUSH
1469: CALL_OW 119
// if Givi then
1473: LD_EXP 6
1477: IFFALSE 1509
// begin PlaceUnitXY ( Givi , 129 , 158 , false ) ;
1479: LD_EXP 6
1483: PPUSH
1484: LD_INT 129
1486: PPUSH
1487: LD_INT 158
1489: PPUSH
1490: LD_INT 0
1492: PPUSH
1493: CALL_OW 48
// ComTurnUnit ( Givi , ar_dep ) ;
1497: LD_EXP 6
1501: PPUSH
1502: LD_INT 2
1504: PPUSH
1505: CALL_OW 119
// end ; end ; end_of_file
1509: LD_VAR 0 1
1513: RET
// export kabulAttackers , heikeAttackers , Burlak ; export function PrepareRussian ; var i , un ; begin
1514: LD_INT 0
1516: PPUSH
1517: PPUSH
1518: PPUSH
// uc_side := 3 ;
1519: LD_ADDR_OWVAR 20
1523: PUSH
1524: LD_INT 3
1526: ST_TO_ADDR
// uc_nation := 3 ;
1527: LD_ADDR_OWVAR 21
1531: PUSH
1532: LD_INT 3
1534: ST_TO_ADDR
// Burlak := NewCharacter ( Burlak ) ;
1535: LD_ADDR_EXP 20
1539: PUSH
1540: LD_STRING Burlak
1542: PPUSH
1543: CALL_OW 25
1547: ST_TO_ADDR
// kabulAttackers := [ ] ;
1548: LD_ADDR_EXP 18
1552: PUSH
1553: EMPTY
1554: ST_TO_ADDR
// heikeAttackers := [ ] ;
1555: LD_ADDR_EXP 19
1559: PUSH
1560: EMPTY
1561: ST_TO_ADDR
// for i := 1 to 9 do
1562: LD_ADDR_VAR 0 2
1566: PUSH
1567: DOUBLE
1568: LD_INT 1
1570: DEC
1571: ST_TO_ADDR
1572: LD_INT 9
1574: PUSH
1575: FOR_TO
1576: IFFALSE 1668
// begin PrepareHuman ( false , class_soldier , 0 ) ;
1578: LD_INT 0
1580: PPUSH
1581: LD_INT 1
1583: PPUSH
1584: LD_INT 0
1586: PPUSH
1587: CALL_OW 380
// un := CreateHuman ;
1591: LD_ADDR_VAR 0 3
1595: PUSH
1596: CALL_OW 44
1600: ST_TO_ADDR
// if Prob ( 40 ) then
1601: LD_INT 40
1603: PPUSH
1604: CALL_OW 13
1608: IFFALSE 1622
// SetClass ( un , class_bazooker ) ;
1610: LD_VAR 0 3
1614: PPUSH
1615: LD_INT 9
1617: PPUSH
1618: CALL_OW 336
// SetDir ( un , rand ( 0 , 5 ) ) ;
1622: LD_VAR 0 3
1626: PPUSH
1627: LD_INT 0
1629: PPUSH
1630: LD_INT 5
1632: PPUSH
1633: CALL_OW 12
1637: PPUSH
1638: CALL_OW 233
// PlaceUnitArea ( un , KabulRuDead , false ) ;
1642: LD_VAR 0 3
1646: PPUSH
1647: LD_INT 10
1649: PPUSH
1650: LD_INT 0
1652: PPUSH
1653: CALL_OW 49
// KillUnit ( un ) ;
1657: LD_VAR 0 3
1661: PPUSH
1662: CALL_OW 66
// end ;
1666: GO 1575
1668: POP
1669: POP
// for i := 1 to 9 do
1670: LD_ADDR_VAR 0 2
1674: PUSH
1675: DOUBLE
1676: LD_INT 1
1678: DEC
1679: ST_TO_ADDR
1680: LD_INT 9
1682: PUSH
1683: FOR_TO
1684: IFFALSE 1905
// begin if rand ( 0 , 1 ) then
1686: LD_INT 0
1688: PPUSH
1689: LD_INT 1
1691: PPUSH
1692: CALL_OW 12
1696: IFFALSE 1759
// begin PrepareHuman ( false , class_soldier , 7 ) ;
1698: LD_INT 0
1700: PPUSH
1701: LD_INT 1
1703: PPUSH
1704: LD_INT 7
1706: PPUSH
1707: CALL_OW 380
// un := CreateHuman ;
1711: LD_ADDR_VAR 0 3
1715: PUSH
1716: CALL_OW 44
1720: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1721: LD_VAR 0 3
1725: PPUSH
1726: LD_INT 1
1728: PPUSH
1729: CALL_OW 233
// PlaceUnitArea ( un , kabulRuArea , false ) ;
1733: LD_VAR 0 3
1737: PPUSH
1738: LD_INT 3
1740: PPUSH
1741: LD_INT 0
1743: PPUSH
1744: CALL_OW 49
// ComHold ( un ) ;
1748: LD_VAR 0 3
1752: PPUSH
1753: CALL_OW 140
// end else
1757: GO 1874
// begin vc_chassis := ru_medium_tracked ;
1759: LD_ADDR_OWVAR 37
1763: PUSH
1764: LD_INT 22
1766: ST_TO_ADDR
// vc_engine := engine_combustion ;
1767: LD_ADDR_OWVAR 39
1771: PUSH
1772: LD_INT 1
1774: ST_TO_ADDR
// vc_control := control_manual ;
1775: LD_ADDR_OWVAR 38
1779: PUSH
1780: LD_INT 1
1782: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
1783: LD_ADDR_OWVAR 40
1787: PUSH
1788: LD_INT 44
1790: PUSH
1791: LD_INT 43
1793: PUSH
1794: LD_INT 45
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: LIST
1801: PUSH
1802: LD_INT 1
1804: PPUSH
1805: LD_INT 3
1807: PPUSH
1808: CALL_OW 12
1812: ARRAY
1813: ST_TO_ADDR
// un := CreateVehicle ;
1814: LD_ADDR_VAR 0 3
1818: PUSH
1819: CALL_OW 45
1823: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1824: LD_VAR 0 3
1828: PPUSH
1829: LD_INT 1
1831: PPUSH
1832: CALL_OW 233
// PlaceUnitArea ( un , kabulRuArea , false ) ;
1836: LD_VAR 0 3
1840: PPUSH
1841: LD_INT 3
1843: PPUSH
1844: LD_INT 0
1846: PPUSH
1847: CALL_OW 49
// ComHold ( un ) ;
1851: LD_VAR 0 3
1855: PPUSH
1856: CALL_OW 140
// PlaceHumanInUnit ( CreateHuman , un ) ;
1860: CALL_OW 44
1864: PPUSH
1865: LD_VAR 0 3
1869: PPUSH
1870: CALL_OW 52
// end ; kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
1874: LD_ADDR_EXP 18
1878: PUSH
1879: LD_EXP 18
1883: PPUSH
1884: LD_EXP 18
1888: PUSH
1889: LD_INT 1
1891: PLUS
1892: PPUSH
1893: LD_VAR 0 3
1897: PPUSH
1898: CALL_OW 1
1902: ST_TO_ADDR
// end ;
1903: GO 1683
1905: POP
1906: POP
// for i := 1 to 5 do
1907: LD_ADDR_VAR 0 2
1911: PUSH
1912: DOUBLE
1913: LD_INT 1
1915: DEC
1916: ST_TO_ADDR
1917: LD_INT 5
1919: PUSH
1920: FOR_TO
1921: IFFALSE 2154
// begin if rand ( 0 , 1 ) then
1923: LD_INT 0
1925: PPUSH
1926: LD_INT 1
1928: PPUSH
1929: CALL_OW 12
1933: IFFALSE 2008
// begin PrepareHuman ( false , class_soldier , 7 ) ;
1935: LD_INT 0
1937: PPUSH
1938: LD_INT 1
1940: PPUSH
1941: LD_INT 7
1943: PPUSH
1944: CALL_OW 380
// un := CreateHuman ;
1948: LD_ADDR_VAR 0 3
1952: PUSH
1953: CALL_OW 44
1957: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1958: LD_VAR 0 3
1962: PPUSH
1963: LD_INT 1
1965: PPUSH
1966: CALL_OW 233
// SetClass ( un , class_bazooker ) ;
1970: LD_VAR 0 3
1974: PPUSH
1975: LD_INT 9
1977: PPUSH
1978: CALL_OW 336
// PlaceUnitArea ( un , kabulRu2Area , false ) ;
1982: LD_VAR 0 3
1986: PPUSH
1987: LD_INT 8
1989: PPUSH
1990: LD_INT 0
1992: PPUSH
1993: CALL_OW 49
// ComHold ( un ) ;
1997: LD_VAR 0 3
2001: PPUSH
2002: CALL_OW 140
// end else
2006: GO 2123
// begin vc_chassis := ru_heavy_wheeled ;
2008: LD_ADDR_OWVAR 37
2012: PUSH
2013: LD_INT 23
2015: ST_TO_ADDR
// vc_engine := engine_combustion ;
2016: LD_ADDR_OWVAR 39
2020: PUSH
2021: LD_INT 1
2023: ST_TO_ADDR
// vc_control := control_manual ;
2024: LD_ADDR_OWVAR 38
2028: PUSH
2029: LD_INT 1
2031: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
2032: LD_ADDR_OWVAR 40
2036: PUSH
2037: LD_INT 44
2039: PUSH
2040: LD_INT 43
2042: PUSH
2043: LD_INT 45
2045: PUSH
2046: EMPTY
2047: LIST
2048: LIST
2049: LIST
2050: PUSH
2051: LD_INT 1
2053: PPUSH
2054: LD_INT 3
2056: PPUSH
2057: CALL_OW 12
2061: ARRAY
2062: ST_TO_ADDR
// un := CreateVehicle ;
2063: LD_ADDR_VAR 0 3
2067: PUSH
2068: CALL_OW 45
2072: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2073: LD_VAR 0 3
2077: PPUSH
2078: LD_INT 4
2080: PPUSH
2081: CALL_OW 233
// PlaceUnitArea ( un , kabulRu2Area , false ) ;
2085: LD_VAR 0 3
2089: PPUSH
2090: LD_INT 8
2092: PPUSH
2093: LD_INT 0
2095: PPUSH
2096: CALL_OW 49
// ComHold ( un ) ;
2100: LD_VAR 0 3
2104: PPUSH
2105: CALL_OW 140
// PlaceHumanInUnit ( CreateHuman , un ) ;
2109: CALL_OW 44
2113: PPUSH
2114: LD_VAR 0 3
2118: PPUSH
2119: CALL_OW 52
// end ; kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
2123: LD_ADDR_EXP 18
2127: PUSH
2128: LD_EXP 18
2132: PPUSH
2133: LD_EXP 18
2137: PUSH
2138: LD_INT 1
2140: PLUS
2141: PPUSH
2142: LD_VAR 0 3
2146: PPUSH
2147: CALL_OW 1
2151: ST_TO_ADDR
// end ;
2152: GO 1920
2154: POP
2155: POP
// for i := 1 to 5 do
2156: LD_ADDR_VAR 0 2
2160: PUSH
2161: DOUBLE
2162: LD_INT 1
2164: DEC
2165: ST_TO_ADDR
2166: LD_INT 5
2168: PUSH
2169: FOR_TO
2170: IFFALSE 2274
// begin PrepareHuman ( false , class_soldier , 7 ) ;
2172: LD_INT 0
2174: PPUSH
2175: LD_INT 1
2177: PPUSH
2178: LD_INT 7
2180: PPUSH
2181: CALL_OW 380
// un := CreateHuman ;
2185: LD_ADDR_VAR 0 3
2189: PUSH
2190: CALL_OW 44
2194: ST_TO_ADDR
// SetDir ( un , 0 ) ;
2195: LD_VAR 0 3
2199: PPUSH
2200: LD_INT 0
2202: PPUSH
2203: CALL_OW 233
// SetClass ( un , class_bazooker ) ;
2207: LD_VAR 0 3
2211: PPUSH
2212: LD_INT 9
2214: PPUSH
2215: CALL_OW 336
// PlaceUnitArea ( un , kabulRu3Area , false ) ;
2219: LD_VAR 0 3
2223: PPUSH
2224: LD_INT 9
2226: PPUSH
2227: LD_INT 0
2229: PPUSH
2230: CALL_OW 49
// ComHold ( un ) ;
2234: LD_VAR 0 3
2238: PPUSH
2239: CALL_OW 140
// kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
2243: LD_ADDR_EXP 18
2247: PUSH
2248: LD_EXP 18
2252: PPUSH
2253: LD_EXP 18
2257: PUSH
2258: LD_INT 1
2260: PLUS
2261: PPUSH
2262: LD_VAR 0 3
2266: PPUSH
2267: CALL_OW 1
2271: ST_TO_ADDR
// end ;
2272: GO 2169
2274: POP
2275: POP
// for i := 1 to 12 do
2276: LD_ADDR_VAR 0 2
2280: PUSH
2281: DOUBLE
2282: LD_INT 1
2284: DEC
2285: ST_TO_ADDR
2286: LD_INT 12
2288: PUSH
2289: FOR_TO
2290: IFFALSE 2541
// begin if Prob ( 22 ) then
2292: LD_INT 22
2294: PPUSH
2295: CALL_OW 13
2299: IFFALSE 2362
// begin PrepareHuman ( false , class_soldier , 10 ) ;
2301: LD_INT 0
2303: PPUSH
2304: LD_INT 1
2306: PPUSH
2307: LD_INT 10
2309: PPUSH
2310: CALL_OW 380
// un := CreateHuman ;
2314: LD_ADDR_VAR 0 3
2318: PUSH
2319: CALL_OW 44
2323: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2324: LD_VAR 0 3
2328: PPUSH
2329: LD_INT 3
2331: PPUSH
2332: CALL_OW 233
// PlaceUnitArea ( un , heikeRuArea , false ) ;
2336: LD_VAR 0 3
2340: PPUSH
2341: LD_INT 4
2343: PPUSH
2344: LD_INT 0
2346: PPUSH
2347: CALL_OW 49
// ComHold ( un ) ;
2351: LD_VAR 0 3
2355: PPUSH
2356: CALL_OW 140
// end else
2360: GO 2510
// begin vc_chassis := [ ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] ;
2362: LD_ADDR_OWVAR 37
2366: PUSH
2367: LD_INT 22
2369: PUSH
2370: LD_INT 24
2372: PUSH
2373: EMPTY
2374: LIST
2375: LIST
2376: PUSH
2377: LD_INT 1
2379: PPUSH
2380: LD_INT 2
2382: PPUSH
2383: CALL_OW 12
2387: ARRAY
2388: ST_TO_ADDR
// vc_engine := engine_combustion ;
2389: LD_ADDR_OWVAR 39
2393: PUSH
2394: LD_INT 1
2396: ST_TO_ADDR
// vc_control := control_manual ;
2397: LD_ADDR_OWVAR 38
2401: PUSH
2402: LD_INT 1
2404: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 4 ) ] ;
2405: LD_ADDR_OWVAR 40
2409: PUSH
2410: LD_INT 44
2412: PUSH
2413: LD_INT 43
2415: PUSH
2416: LD_INT 43
2418: PUSH
2419: LD_INT 45
2421: PUSH
2422: EMPTY
2423: LIST
2424: LIST
2425: LIST
2426: LIST
2427: PUSH
2428: LD_INT 1
2430: PPUSH
2431: LD_INT 4
2433: PPUSH
2434: CALL_OW 12
2438: ARRAY
2439: ST_TO_ADDR
// un := CreateVehicle ;
2440: LD_ADDR_VAR 0 3
2444: PUSH
2445: CALL_OW 45
2449: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2450: LD_VAR 0 3
2454: PPUSH
2455: LD_INT 3
2457: PPUSH
2458: CALL_OW 233
// PlaceUnitArea ( un , heikeRuArea , false ) ;
2462: LD_VAR 0 3
2466: PPUSH
2467: LD_INT 4
2469: PPUSH
2470: LD_INT 0
2472: PPUSH
2473: CALL_OW 49
// ComHold ( un ) ;
2477: LD_VAR 0 3
2481: PPUSH
2482: CALL_OW 140
// PrepareMechanic ( false , 10 ) ;
2486: LD_INT 0
2488: PPUSH
2489: LD_INT 10
2491: PPUSH
2492: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
2496: CALL_OW 44
2500: PPUSH
2501: LD_VAR 0 3
2505: PPUSH
2506: CALL_OW 52
// end ; heikeAttackers := Replace ( heikeAttackers , heikeAttackers + 1 , un ) ;
2510: LD_ADDR_EXP 19
2514: PUSH
2515: LD_EXP 19
2519: PPUSH
2520: LD_EXP 19
2524: PUSH
2525: LD_INT 1
2527: PLUS
2528: PPUSH
2529: LD_VAR 0 3
2533: PPUSH
2534: CALL_OW 1
2538: ST_TO_ADDR
// end ;
2539: GO 2289
2541: POP
2542: POP
// end ;
2543: LD_VAR 0 1
2547: RET
// every 0 0$2 trigger startAttackOnKabul and kabulAttackers do var i ;
2548: LD_EXP 3
2552: PUSH
2553: LD_EXP 18
2557: AND
2558: IFFALSE 2618
2560: GO 2562
2562: DISABLE
2563: LD_INT 0
2565: PPUSH
// begin enable ;
2566: ENABLE
// for i in kabulAttackers do
2567: LD_ADDR_VAR 0 1
2571: PUSH
2572: LD_EXP 18
2576: PUSH
2577: FOR_IN
2578: IFFALSE 2616
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 5 ] ) , i ) ) ;
2580: LD_VAR 0 1
2584: PPUSH
2585: LD_INT 22
2587: PUSH
2588: LD_INT 5
2590: PUSH
2591: EMPTY
2592: LIST
2593: LIST
2594: PPUSH
2595: CALL_OW 69
2599: PPUSH
2600: LD_VAR 0 1
2604: PPUSH
2605: CALL_OW 74
2609: PPUSH
2610: CALL_OW 115
2614: GO 2577
2616: POP
2617: POP
// end ;
2618: PPOPN 1
2620: END
// every 0 0$1 trigger startAttackOnHeike and heikeAttackers do var i ;
2621: LD_EXP 4
2625: PUSH
2626: LD_EXP 19
2630: AND
2631: IFFALSE 2691
2633: GO 2635
2635: DISABLE
2636: LD_INT 0
2638: PPUSH
// begin enable ;
2639: ENABLE
// for i in heikeAttackers do
2640: LD_ADDR_VAR 0 1
2644: PUSH
2645: LD_EXP 19
2649: PUSH
2650: FOR_IN
2651: IFFALSE 2689
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ) ;
2653: LD_VAR 0 1
2657: PPUSH
2658: LD_INT 22
2660: PUSH
2661: LD_INT 2
2663: PUSH
2664: EMPTY
2665: LIST
2666: LIST
2667: PPUSH
2668: CALL_OW 69
2672: PPUSH
2673: LD_VAR 0 1
2677: PPUSH
2678: CALL_OW 74
2682: PPUSH
2683: CALL_OW 115
2687: GO 2650
2689: POP
2690: POP
// end ; end_of_file
2691: PPOPN 1
2693: END
// export function Action ; var i ; begin
2694: LD_INT 0
2696: PPUSH
2697: PPUSH
// Video ( true ) ;
2698: LD_INT 1
2700: PPUSH
2701: CALL 41417 0 1
// PlaceSeeing ( 111 , 168 , 2 , - 25 ) ;
2705: LD_INT 111
2707: PPUSH
2708: LD_INT 168
2710: PPUSH
2711: LD_INT 2
2713: PPUSH
2714: LD_INT 25
2716: NEG
2717: PPUSH
2718: CALL_OW 330
// PlaceSeeing ( 102 , 47 , 2 , - 40 ) ;
2722: LD_INT 102
2724: PPUSH
2725: LD_INT 47
2727: PPUSH
2728: LD_INT 2
2730: PPUSH
2731: LD_INT 40
2733: NEG
2734: PPUSH
2735: CALL_OW 330
// CenterNowOnUnits ( Heike ) ;
2739: LD_EXP 5
2743: PPUSH
2744: CALL_OW 87
// startAttackOnKabul := true ;
2748: LD_ADDR_EXP 3
2752: PUSH
2753: LD_INT 1
2755: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2756: LD_INT 70
2758: PPUSH
2759: CALL_OW 67
// CenterOnXY ( 102 , 47 ) ;
2763: LD_INT 102
2765: PPUSH
2766: LD_INT 47
2768: PPUSH
2769: CALL_OW 84
// if Givi then
2773: LD_EXP 6
2777: IFFALSE 2968
// begin ComMoveXY ( Givi , 113 , 162 ) ;
2779: LD_EXP 6
2783: PPUSH
2784: LD_INT 113
2786: PPUSH
2787: LD_INT 162
2789: PPUSH
2790: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
2794: LD_EXP 6
2798: PPUSH
2799: LD_EXP 5
2803: PPUSH
2804: CALL_OW 179
// Say ( Givi , DG-Intro-1 ) ;
2808: LD_EXP 6
2812: PPUSH
2813: LD_STRING DG-Intro-1
2815: PPUSH
2816: CALL_OW 88
// Say ( Givi , DG-Intro-2 ) ;
2820: LD_EXP 6
2824: PPUSH
2825: LD_STRING DG-Intro-2
2827: PPUSH
2828: CALL_OW 88
// CenterOnUnits ( Heike ) ;
2832: LD_EXP 5
2836: PPUSH
2837: CALL_OW 85
// RemoveSeeing ( 102 , 47 , 2 ) ;
2841: LD_INT 102
2843: PPUSH
2844: LD_INT 47
2846: PPUSH
2847: LD_INT 2
2849: PPUSH
2850: CALL_OW 331
// wait ( 0 0$0.3 ) ;
2854: LD_INT 10
2856: PPUSH
2857: CALL_OW 67
// Say ( Heike , DH-Intro-3 ) ;
2861: LD_EXP 5
2865: PPUSH
2866: LD_STRING DH-Intro-3
2868: PPUSH
2869: CALL_OW 88
// if Mike then
2873: LD_EXP 7
2877: IFFALSE 2966
// begin PlaceSeeing ( 92 , 129 , 2 , - 18 ) ;
2879: LD_INT 92
2881: PPUSH
2882: LD_INT 129
2884: PPUSH
2885: LD_INT 2
2887: PPUSH
2888: LD_INT 18
2890: NEG
2891: PPUSH
2892: CALL_OW 330
// CenterOnXY ( 92 , 129 ) ;
2896: LD_INT 92
2898: PPUSH
2899: LD_INT 129
2901: PPUSH
2902: CALL_OW 84
// ComTurnUnit ( [ Mike , Kaia ] , Heike ) ;
2906: LD_EXP 7
2910: PUSH
2911: LD_EXP 10
2915: PUSH
2916: EMPTY
2917: LIST
2918: LIST
2919: PPUSH
2920: LD_EXP 5
2924: PPUSH
2925: CALL_OW 119
// Say ( Mike , DM-Intro-4 ) ;
2929: LD_EXP 7
2933: PPUSH
2934: LD_STRING DM-Intro-4
2936: PPUSH
2937: CALL_OW 88
// Say ( Kaia , DK-Intro-5 ) ;
2941: LD_EXP 10
2945: PPUSH
2946: LD_STRING DK-Intro-5
2948: PPUSH
2949: CALL_OW 88
// RemoveSeeing ( 92 , 129 , 2 ) ;
2953: LD_INT 92
2955: PPUSH
2956: LD_INT 129
2958: PPUSH
2959: LD_INT 2
2961: PPUSH
2962: CALL_OW 331
// end ; end else
2966: GO 3221
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-1 ) then
2968: LD_EXP 16
2972: PPUSH
2973: LD_INT 26
2975: PUSH
2976: LD_INT 1
2978: PUSH
2979: EMPTY
2980: LIST
2981: LIST
2982: PPUSH
2983: CALL_OW 72
2987: PUSH
2988: LD_INT 1
2990: ARRAY
2991: PPUSH
2992: LD_STRING DArm-Intro-b-1
2994: PPUSH
2995: CALL_OW 88
2999: NOT
3000: IFFALSE 3033
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-1 ) ;
3002: LD_EXP 16
3006: PPUSH
3007: LD_INT 26
3009: PUSH
3010: LD_INT 2
3012: PUSH
3013: EMPTY
3014: LIST
3015: LIST
3016: PPUSH
3017: CALL_OW 72
3021: PUSH
3022: LD_INT 1
3024: ARRAY
3025: PPUSH
3026: LD_STRING DArf-Intro-b-1
3028: PPUSH
3029: CALL_OW 88
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-2 ) then
3033: LD_EXP 16
3037: PPUSH
3038: LD_INT 26
3040: PUSH
3041: LD_INT 1
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PPUSH
3048: CALL_OW 72
3052: PUSH
3053: LD_INT 1
3055: ARRAY
3056: PPUSH
3057: LD_STRING DArm-Intro-b-2
3059: PPUSH
3060: CALL_OW 88
3064: NOT
3065: IFFALSE 3098
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-2 ) ;
3067: LD_EXP 16
3071: PPUSH
3072: LD_INT 26
3074: PUSH
3075: LD_INT 2
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: PPUSH
3082: CALL_OW 72
3086: PUSH
3087: LD_INT 1
3089: ARRAY
3090: PPUSH
3091: LD_STRING DArf-Intro-b-2
3093: PPUSH
3094: CALL_OW 88
// if Kaia then
3098: LD_EXP 10
3102: IFFALSE 3116
// Say ( Kaia , DK-Intro-5 ) ;
3104: LD_EXP 10
3108: PPUSH
3109: LD_STRING DK-Intro-5
3111: PPUSH
3112: CALL_OW 88
// PlaceSeeing ( 92 , 129 , 2 , - 18 ) ;
3116: LD_INT 92
3118: PPUSH
3119: LD_INT 129
3121: PPUSH
3122: LD_INT 2
3124: PPUSH
3125: LD_INT 18
3127: NEG
3128: PPUSH
3129: CALL_OW 330
// CenterOnXY ( 92 , 129 ) ;
3133: LD_INT 92
3135: PPUSH
3136: LD_INT 129
3138: PPUSH
3139: CALL_OW 84
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-4 ) then
3143: LD_EXP 16
3147: PPUSH
3148: LD_INT 26
3150: PUSH
3151: LD_INT 1
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: PPUSH
3158: CALL_OW 72
3162: PUSH
3163: LD_INT 1
3165: ARRAY
3166: PPUSH
3167: LD_STRING DArm-Intro-b-4
3169: PPUSH
3170: CALL_OW 88
3174: NOT
3175: IFFALSE 3208
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-4 ) ;
3177: LD_EXP 16
3181: PPUSH
3182: LD_INT 26
3184: PUSH
3185: LD_INT 2
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PPUSH
3192: CALL_OW 72
3196: PUSH
3197: LD_INT 1
3199: ARRAY
3200: PPUSH
3201: LD_STRING DArf-Intro-b-4
3203: PPUSH
3204: CALL_OW 88
// RemoveSeeing ( 92 , 129 , 2 ) ;
3208: LD_INT 92
3210: PPUSH
3211: LD_INT 129
3213: PPUSH
3214: LD_INT 2
3216: PPUSH
3217: CALL_OW 331
// end ; CenterOnUnits ( Heike ) ;
3221: LD_EXP 5
3225: PPUSH
3226: CALL_OW 85
// SayRadio ( Burlak , DB-Intro-6 ) ;
3230: LD_EXP 20
3234: PPUSH
3235: LD_STRING DB-Intro-6
3237: PPUSH
3238: CALL_OW 94
// Say ( Heike , DH-Intro-7 ) ;
3242: LD_EXP 5
3246: PPUSH
3247: LD_STRING DH-Intro-7
3249: PPUSH
3250: CALL_OW 88
// SayRadio ( Burlak , DB-Intro-8 ) ;
3254: LD_EXP 20
3258: PPUSH
3259: LD_STRING DB-Intro-8
3261: PPUSH
3262: CALL_OW 94
// SayRadio ( Burlak , DB-Intro-9 ) ;
3266: LD_EXP 20
3270: PPUSH
3271: LD_STRING DB-Intro-9
3273: PPUSH
3274: CALL_OW 94
// if Givi then
3278: LD_EXP 6
3282: IFFALSE 3310
// begin Say ( Givi , DG-Intro-10 ) ;
3284: LD_EXP 6
3288: PPUSH
3289: LD_STRING DG-Intro-10
3291: PPUSH
3292: CALL_OW 88
// Say ( Kaia , DK-Intro-11 ) ;
3296: LD_EXP 10
3300: PPUSH
3301: LD_STRING DK-Intro-11
3303: PPUSH
3304: CALL_OW 88
// end else
3308: GO 3375
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-10 ) then
3310: LD_EXP 16
3314: PPUSH
3315: LD_INT 26
3317: PUSH
3318: LD_INT 1
3320: PUSH
3321: EMPTY
3322: LIST
3323: LIST
3324: PPUSH
3325: CALL_OW 72
3329: PUSH
3330: LD_INT 1
3332: ARRAY
3333: PPUSH
3334: LD_STRING DArm-Intro-b-10
3336: PPUSH
3337: CALL_OW 88
3341: NOT
3342: IFFALSE 3375
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-10 ) ;
3344: LD_EXP 16
3348: PPUSH
3349: LD_INT 26
3351: PUSH
3352: LD_INT 2
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PPUSH
3359: CALL_OW 72
3363: PUSH
3364: LD_INT 1
3366: ARRAY
3367: PPUSH
3368: LD_STRING DArf-Intro-b-10
3370: PPUSH
3371: CALL_OW 88
// Say ( Mike , DM-Intro-12 ) ;
3375: LD_EXP 7
3379: PPUSH
3380: LD_STRING DM-Intro-12
3382: PPUSH
3383: CALL_OW 88
// Say ( Kurt , DKs-Intro-13 ) ;
3387: LD_EXP 14
3391: PPUSH
3392: LD_STRING DKs-Intro-13
3394: PPUSH
3395: CALL_OW 88
// Say ( Kamil , DKam-Intro-14 ) ;
3399: LD_EXP 9
3403: PPUSH
3404: LD_STRING DKam-Intro-14
3406: PPUSH
3407: CALL_OW 88
// case Query ( QSurrender ) of 1 :
3411: LD_STRING QSurrender
3413: PPUSH
3414: CALL_OW 97
3418: PUSH
3419: LD_INT 1
3421: DOUBLE
3422: EQUAL
3423: IFTRUE 3427
3425: GO 3446
3427: POP
// begin Say ( Heike , DH-Intro-16 ) ;
3428: LD_EXP 5
3432: PPUSH
3433: LD_STRING DH-Intro-16
3435: PPUSH
3436: CALL_OW 88
// missionEnd ;
3440: CALL 3632 0 0
// end ; 2 :
3444: GO 3490
3446: LD_INT 2
3448: DOUBLE
3449: EQUAL
3450: IFTRUE 3454
3452: GO 3489
3454: POP
// begin Say ( Heike , DH-Intro-a-16 ) ;
3455: LD_EXP 5
3459: PPUSH
3460: LD_STRING DH-Intro-a-16
3462: PPUSH
3463: CALL_OW 88
// SayRadio ( Burlak , DB-Intro-a-17 ) ;
3467: LD_EXP 20
3471: PPUSH
3472: LD_STRING DB-Intro-a-17
3474: PPUSH
3475: CALL_OW 94
// startAttackOnHeike := true ;
3479: LD_ADDR_EXP 4
3483: PUSH
3484: LD_INT 1
3486: ST_TO_ADDR
// end ; end ;
3487: GO 3490
3489: POP
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
3490: LD_ADDR_VAR 0 2
3494: PUSH
3495: LD_INT 22
3497: PUSH
3498: LD_INT 2
3500: PUSH
3501: EMPTY
3502: LIST
3503: LIST
3504: PPUSH
3505: CALL_OW 69
3509: PUSH
3510: FOR_IN
3511: IFFALSE 3530
// ComAgressiveMove ( i , 98 , 143 ) ;
3513: LD_VAR 0 2
3517: PPUSH
3518: LD_INT 98
3520: PPUSH
3521: LD_INT 143
3523: PPUSH
3524: CALL_OW 114
3528: GO 3510
3530: POP
3531: POP
// ComAgressiveMove ( Heike , 84 , 116 ) ;
3532: LD_EXP 5
3536: PPUSH
3537: LD_INT 84
3539: PPUSH
3540: LD_INT 116
3542: PPUSH
3543: CALL_OW 114
// CenterOnXY ( 98 , 143 ) ;
3547: LD_INT 98
3549: PPUSH
3550: LD_INT 143
3552: PPUSH
3553: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
3557: LD_INT 35
3559: PPUSH
3560: CALL_OW 67
// until IsDead ( Heike ) ;
3564: LD_EXP 5
3568: PPUSH
3569: CALL_OW 301
3573: IFFALSE 3557
// wait ( 0 0$3 ) ;
3575: LD_INT 105
3577: PPUSH
3578: CALL_OW 67
// YouLost ( HeikeNoSurrender ) ;
3582: LD_STRING HeikeNoSurrender
3584: PPUSH
3585: CALL_OW 104
// end ;
3589: LD_VAR 0 1
3593: RET
// every 0 0$1 trigger GetLives ( Heike ) < 900 do
3594: LD_EXP 5
3598: PPUSH
3599: CALL_OW 256
3603: PUSH
3604: LD_INT 900
3606: LESS
3607: IFFALSE 3631
3609: GO 3611
3611: DISABLE
// begin wait ( 0 0$3 ) ;
3612: LD_INT 105
3614: PPUSH
3615: CALL_OW 67
// SetLives ( Heike , 100 ) ;
3619: LD_EXP 5
3623: PPUSH
3624: LD_INT 100
3626: PPUSH
3627: CALL_OW 234
// end ;
3631: END
// function MissionEnd ( ) ; begin
3632: LD_INT 0
3634: PPUSH
// ChangeMap ( 1 , %_cont ) ;
3635: LD_INT 1
3637: PPUSH
3638: LD_STRING %_cont
3640: PPUSH
3641: CALL_OW 340
// end ; end_of_file
3645: LD_VAR 0 1
3649: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
3650: LD_INT 0
3652: PPUSH
3653: PPUSH
// if exist_mode then
3654: LD_VAR 0 2
3658: IFFALSE 3704
// begin unit := CreateCharacter ( prefix & ident ) ;
3660: LD_ADDR_VAR 0 5
3664: PUSH
3665: LD_VAR 0 3
3669: PUSH
3670: LD_VAR 0 1
3674: STR
3675: PPUSH
3676: CALL_OW 34
3680: ST_TO_ADDR
// if unit then
3681: LD_VAR 0 5
3685: IFFALSE 3702
// DeleteCharacters ( prefix & ident ) ;
3687: LD_VAR 0 3
3691: PUSH
3692: LD_VAR 0 1
3696: STR
3697: PPUSH
3698: CALL_OW 40
// end else
3702: GO 3719
// unit := NewCharacter ( ident ) ;
3704: LD_ADDR_VAR 0 5
3708: PUSH
3709: LD_VAR 0 1
3713: PPUSH
3714: CALL_OW 25
3718: ST_TO_ADDR
// result := unit ;
3719: LD_ADDR_VAR 0 4
3723: PUSH
3724: LD_VAR 0 5
3728: ST_TO_ADDR
// end ;
3729: LD_VAR 0 4
3733: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
3734: LD_INT 0
3736: PPUSH
3737: PPUSH
// if exist_mode then
3738: LD_VAR 0 2
3742: IFFALSE 3767
// unit := CreateCharacter ( prefix & ident ) else
3744: LD_ADDR_VAR 0 5
3748: PUSH
3749: LD_VAR 0 3
3753: PUSH
3754: LD_VAR 0 1
3758: STR
3759: PPUSH
3760: CALL_OW 34
3764: ST_TO_ADDR
3765: GO 3782
// unit := NewCharacter ( ident ) ;
3767: LD_ADDR_VAR 0 5
3771: PUSH
3772: LD_VAR 0 1
3776: PPUSH
3777: CALL_OW 25
3781: ST_TO_ADDR
// result := unit ;
3782: LD_ADDR_VAR 0 4
3786: PUSH
3787: LD_VAR 0 5
3791: ST_TO_ADDR
// end ;
3792: LD_VAR 0 4
3796: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3797: LD_INT 0
3799: PPUSH
3800: PPUSH
// if not side or not nation then
3801: LD_VAR 0 1
3805: NOT
3806: PUSH
3807: LD_VAR 0 2
3811: NOT
3812: OR
3813: IFFALSE 3817
// exit ;
3815: GO 4585
// case nation of nation_american :
3817: LD_VAR 0 2
3821: PUSH
3822: LD_INT 1
3824: DOUBLE
3825: EQUAL
3826: IFTRUE 3830
3828: GO 4044
3830: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
3831: LD_ADDR_VAR 0 4
3835: PUSH
3836: LD_INT 35
3838: PUSH
3839: LD_INT 45
3841: PUSH
3842: LD_INT 46
3844: PUSH
3845: LD_INT 47
3847: PUSH
3848: LD_INT 82
3850: PUSH
3851: LD_INT 83
3853: PUSH
3854: LD_INT 84
3856: PUSH
3857: LD_INT 85
3859: PUSH
3860: LD_INT 86
3862: PUSH
3863: LD_INT 1
3865: PUSH
3866: LD_INT 2
3868: PUSH
3869: LD_INT 6
3871: PUSH
3872: LD_INT 15
3874: PUSH
3875: LD_INT 16
3877: PUSH
3878: LD_INT 7
3880: PUSH
3881: LD_INT 12
3883: PUSH
3884: LD_INT 13
3886: PUSH
3887: LD_INT 10
3889: PUSH
3890: LD_INT 14
3892: PUSH
3893: LD_INT 20
3895: PUSH
3896: LD_INT 21
3898: PUSH
3899: LD_INT 22
3901: PUSH
3902: LD_INT 25
3904: PUSH
3905: LD_INT 32
3907: PUSH
3908: LD_INT 27
3910: PUSH
3911: LD_INT 36
3913: PUSH
3914: LD_INT 69
3916: PUSH
3917: LD_INT 39
3919: PUSH
3920: LD_INT 34
3922: PUSH
3923: LD_INT 40
3925: PUSH
3926: LD_INT 48
3928: PUSH
3929: LD_INT 49
3931: PUSH
3932: LD_INT 50
3934: PUSH
3935: LD_INT 51
3937: PUSH
3938: LD_INT 52
3940: PUSH
3941: LD_INT 53
3943: PUSH
3944: LD_INT 54
3946: PUSH
3947: LD_INT 55
3949: PUSH
3950: LD_INT 56
3952: PUSH
3953: LD_INT 57
3955: PUSH
3956: LD_INT 58
3958: PUSH
3959: LD_INT 59
3961: PUSH
3962: LD_INT 60
3964: PUSH
3965: LD_INT 61
3967: PUSH
3968: LD_INT 62
3970: PUSH
3971: LD_INT 80
3973: PUSH
3974: LD_INT 82
3976: PUSH
3977: LD_INT 83
3979: PUSH
3980: LD_INT 84
3982: PUSH
3983: LD_INT 85
3985: PUSH
3986: LD_INT 86
3988: PUSH
3989: EMPTY
3990: LIST
3991: LIST
3992: LIST
3993: LIST
3994: LIST
3995: LIST
3996: LIST
3997: LIST
3998: LIST
3999: LIST
4000: LIST
4001: LIST
4002: LIST
4003: LIST
4004: LIST
4005: LIST
4006: LIST
4007: LIST
4008: LIST
4009: LIST
4010: LIST
4011: LIST
4012: LIST
4013: LIST
4014: LIST
4015: LIST
4016: LIST
4017: LIST
4018: LIST
4019: LIST
4020: LIST
4021: LIST
4022: LIST
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: LIST
4028: LIST
4029: LIST
4030: LIST
4031: LIST
4032: LIST
4033: LIST
4034: LIST
4035: LIST
4036: LIST
4037: LIST
4038: LIST
4039: LIST
4040: LIST
4041: ST_TO_ADDR
4042: GO 4509
4044: LD_INT 2
4046: DOUBLE
4047: EQUAL
4048: IFTRUE 4052
4050: GO 4278
4052: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
4053: LD_ADDR_VAR 0 4
4057: PUSH
4058: LD_INT 35
4060: PUSH
4061: LD_INT 45
4063: PUSH
4064: LD_INT 46
4066: PUSH
4067: LD_INT 47
4069: PUSH
4070: LD_INT 82
4072: PUSH
4073: LD_INT 83
4075: PUSH
4076: LD_INT 84
4078: PUSH
4079: LD_INT 85
4081: PUSH
4082: LD_INT 87
4084: PUSH
4085: LD_INT 70
4087: PUSH
4088: LD_INT 1
4090: PUSH
4091: LD_INT 11
4093: PUSH
4094: LD_INT 3
4096: PUSH
4097: LD_INT 4
4099: PUSH
4100: LD_INT 5
4102: PUSH
4103: LD_INT 6
4105: PUSH
4106: LD_INT 15
4108: PUSH
4109: LD_INT 18
4111: PUSH
4112: LD_INT 7
4114: PUSH
4115: LD_INT 17
4117: PUSH
4118: LD_INT 8
4120: PUSH
4121: LD_INT 20
4123: PUSH
4124: LD_INT 21
4126: PUSH
4127: LD_INT 22
4129: PUSH
4130: LD_INT 72
4132: PUSH
4133: LD_INT 26
4135: PUSH
4136: LD_INT 69
4138: PUSH
4139: LD_INT 39
4141: PUSH
4142: LD_INT 40
4144: PUSH
4145: LD_INT 41
4147: PUSH
4148: LD_INT 42
4150: PUSH
4151: LD_INT 43
4153: PUSH
4154: LD_INT 48
4156: PUSH
4157: LD_INT 49
4159: PUSH
4160: LD_INT 50
4162: PUSH
4163: LD_INT 51
4165: PUSH
4166: LD_INT 52
4168: PUSH
4169: LD_INT 53
4171: PUSH
4172: LD_INT 54
4174: PUSH
4175: LD_INT 55
4177: PUSH
4178: LD_INT 56
4180: PUSH
4181: LD_INT 60
4183: PUSH
4184: LD_INT 61
4186: PUSH
4187: LD_INT 62
4189: PUSH
4190: LD_INT 66
4192: PUSH
4193: LD_INT 67
4195: PUSH
4196: LD_INT 68
4198: PUSH
4199: LD_INT 81
4201: PUSH
4202: LD_INT 82
4204: PUSH
4205: LD_INT 83
4207: PUSH
4208: LD_INT 84
4210: PUSH
4211: LD_INT 85
4213: PUSH
4214: LD_INT 87
4216: PUSH
4217: LD_INT 88
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: LIST
4224: LIST
4225: LIST
4226: LIST
4227: LIST
4228: LIST
4229: LIST
4230: LIST
4231: LIST
4232: LIST
4233: LIST
4234: LIST
4235: LIST
4236: LIST
4237: LIST
4238: LIST
4239: LIST
4240: LIST
4241: LIST
4242: LIST
4243: LIST
4244: LIST
4245: LIST
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: LIST
4251: LIST
4252: LIST
4253: LIST
4254: LIST
4255: LIST
4256: LIST
4257: LIST
4258: LIST
4259: LIST
4260: LIST
4261: LIST
4262: LIST
4263: LIST
4264: LIST
4265: LIST
4266: LIST
4267: LIST
4268: LIST
4269: LIST
4270: LIST
4271: LIST
4272: LIST
4273: LIST
4274: LIST
4275: ST_TO_ADDR
4276: GO 4509
4278: LD_INT 3
4280: DOUBLE
4281: EQUAL
4282: IFTRUE 4286
4284: GO 4508
4286: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
4287: LD_ADDR_VAR 0 4
4291: PUSH
4292: LD_INT 46
4294: PUSH
4295: LD_INT 47
4297: PUSH
4298: LD_INT 1
4300: PUSH
4301: LD_INT 2
4303: PUSH
4304: LD_INT 82
4306: PUSH
4307: LD_INT 83
4309: PUSH
4310: LD_INT 84
4312: PUSH
4313: LD_INT 85
4315: PUSH
4316: LD_INT 86
4318: PUSH
4319: LD_INT 11
4321: PUSH
4322: LD_INT 9
4324: PUSH
4325: LD_INT 20
4327: PUSH
4328: LD_INT 19
4330: PUSH
4331: LD_INT 21
4333: PUSH
4334: LD_INT 24
4336: PUSH
4337: LD_INT 22
4339: PUSH
4340: LD_INT 25
4342: PUSH
4343: LD_INT 28
4345: PUSH
4346: LD_INT 29
4348: PUSH
4349: LD_INT 30
4351: PUSH
4352: LD_INT 31
4354: PUSH
4355: LD_INT 37
4357: PUSH
4358: LD_INT 38
4360: PUSH
4361: LD_INT 32
4363: PUSH
4364: LD_INT 27
4366: PUSH
4367: LD_INT 33
4369: PUSH
4370: LD_INT 69
4372: PUSH
4373: LD_INT 39
4375: PUSH
4376: LD_INT 34
4378: PUSH
4379: LD_INT 40
4381: PUSH
4382: LD_INT 71
4384: PUSH
4385: LD_INT 23
4387: PUSH
4388: LD_INT 44
4390: PUSH
4391: LD_INT 48
4393: PUSH
4394: LD_INT 49
4396: PUSH
4397: LD_INT 50
4399: PUSH
4400: LD_INT 51
4402: PUSH
4403: LD_INT 52
4405: PUSH
4406: LD_INT 53
4408: PUSH
4409: LD_INT 54
4411: PUSH
4412: LD_INT 55
4414: PUSH
4415: LD_INT 56
4417: PUSH
4418: LD_INT 57
4420: PUSH
4421: LD_INT 58
4423: PUSH
4424: LD_INT 59
4426: PUSH
4427: LD_INT 63
4429: PUSH
4430: LD_INT 64
4432: PUSH
4433: LD_INT 65
4435: PUSH
4436: LD_INT 82
4438: PUSH
4439: LD_INT 83
4441: PUSH
4442: LD_INT 84
4444: PUSH
4445: LD_INT 85
4447: PUSH
4448: LD_INT 86
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: LIST
4457: LIST
4458: LIST
4459: LIST
4460: LIST
4461: LIST
4462: LIST
4463: LIST
4464: LIST
4465: LIST
4466: LIST
4467: LIST
4468: LIST
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: LIST
4484: LIST
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: LIST
4499: LIST
4500: LIST
4501: LIST
4502: LIST
4503: LIST
4504: LIST
4505: ST_TO_ADDR
4506: GO 4509
4508: POP
// if state > - 1 and state < 3 then
4509: LD_VAR 0 3
4513: PUSH
4514: LD_INT 1
4516: NEG
4517: GREATER
4518: PUSH
4519: LD_VAR 0 3
4523: PUSH
4524: LD_INT 3
4526: LESS
4527: AND
4528: IFFALSE 4585
// for i in result do
4530: LD_ADDR_VAR 0 5
4534: PUSH
4535: LD_VAR 0 4
4539: PUSH
4540: FOR_IN
4541: IFFALSE 4583
// if GetTech ( i , side ) <> state then
4543: LD_VAR 0 5
4547: PPUSH
4548: LD_VAR 0 1
4552: PPUSH
4553: CALL_OW 321
4557: PUSH
4558: LD_VAR 0 3
4562: NONEQUAL
4563: IFFALSE 4581
// result := result diff i ;
4565: LD_ADDR_VAR 0 4
4569: PUSH
4570: LD_VAR 0 4
4574: PUSH
4575: LD_VAR 0 5
4579: DIFF
4580: ST_TO_ADDR
4581: GO 4540
4583: POP
4584: POP
// end ;
4585: LD_VAR 0 4
4589: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
4590: LD_INT 0
4592: PPUSH
4593: PPUSH
4594: PPUSH
// result := true ;
4595: LD_ADDR_VAR 0 3
4599: PUSH
4600: LD_INT 1
4602: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
4603: LD_ADDR_VAR 0 5
4607: PUSH
4608: LD_VAR 0 2
4612: PPUSH
4613: CALL_OW 480
4617: ST_TO_ADDR
// if not tmp then
4618: LD_VAR 0 5
4622: NOT
4623: IFFALSE 4627
// exit ;
4625: GO 4676
// for i in tmp do
4627: LD_ADDR_VAR 0 4
4631: PUSH
4632: LD_VAR 0 5
4636: PUSH
4637: FOR_IN
4638: IFFALSE 4674
// if GetTech ( i , side ) <> state_researched then
4640: LD_VAR 0 4
4644: PPUSH
4645: LD_VAR 0 1
4649: PPUSH
4650: CALL_OW 321
4654: PUSH
4655: LD_INT 2
4657: NONEQUAL
4658: IFFALSE 4672
// begin result := false ;
4660: LD_ADDR_VAR 0 3
4664: PUSH
4665: LD_INT 0
4667: ST_TO_ADDR
// exit ;
4668: POP
4669: POP
4670: GO 4676
// end ;
4672: GO 4637
4674: POP
4675: POP
// end ;
4676: LD_VAR 0 3
4680: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
4681: LD_INT 0
4683: PPUSH
4684: PPUSH
4685: PPUSH
4686: PPUSH
4687: PPUSH
4688: PPUSH
4689: PPUSH
4690: PPUSH
4691: PPUSH
4692: PPUSH
4693: PPUSH
4694: PPUSH
4695: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
4696: LD_VAR 0 1
4700: NOT
4701: PUSH
4702: LD_VAR 0 1
4706: PPUSH
4707: CALL_OW 257
4711: PUSH
4712: LD_INT 9
4714: NONEQUAL
4715: OR
4716: IFFALSE 4720
// exit ;
4718: GO 5293
// side := GetSide ( unit ) ;
4720: LD_ADDR_VAR 0 9
4724: PUSH
4725: LD_VAR 0 1
4729: PPUSH
4730: CALL_OW 255
4734: ST_TO_ADDR
// tech_space := tech_spacanom ;
4735: LD_ADDR_VAR 0 12
4739: PUSH
4740: LD_INT 29
4742: ST_TO_ADDR
// tech_time := tech_taurad ;
4743: LD_ADDR_VAR 0 13
4747: PUSH
4748: LD_INT 28
4750: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4751: LD_ADDR_VAR 0 11
4755: PUSH
4756: LD_VAR 0 1
4760: PPUSH
4761: CALL_OW 310
4765: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4766: LD_VAR 0 11
4770: PPUSH
4771: CALL_OW 247
4775: PUSH
4776: LD_INT 2
4778: EQUAL
4779: IFFALSE 4783
// exit ;
4781: GO 5293
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4783: LD_ADDR_VAR 0 8
4787: PUSH
4788: LD_INT 81
4790: PUSH
4791: LD_VAR 0 9
4795: PUSH
4796: EMPTY
4797: LIST
4798: LIST
4799: PUSH
4800: LD_INT 3
4802: PUSH
4803: LD_INT 21
4805: PUSH
4806: LD_INT 3
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: PUSH
4813: EMPTY
4814: LIST
4815: LIST
4816: PUSH
4817: EMPTY
4818: LIST
4819: LIST
4820: PPUSH
4821: CALL_OW 69
4825: ST_TO_ADDR
// if not tmp then
4826: LD_VAR 0 8
4830: NOT
4831: IFFALSE 4835
// exit ;
4833: GO 5293
// if in_unit then
4835: LD_VAR 0 11
4839: IFFALSE 4863
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4841: LD_ADDR_VAR 0 10
4845: PUSH
4846: LD_VAR 0 8
4850: PPUSH
4851: LD_VAR 0 11
4855: PPUSH
4856: CALL_OW 74
4860: ST_TO_ADDR
4861: GO 4883
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4863: LD_ADDR_VAR 0 10
4867: PUSH
4868: LD_VAR 0 8
4872: PPUSH
4873: LD_VAR 0 1
4877: PPUSH
4878: CALL_OW 74
4882: ST_TO_ADDR
// if not enemy then
4883: LD_VAR 0 10
4887: NOT
4888: IFFALSE 4892
// exit ;
4890: GO 5293
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4892: LD_VAR 0 11
4896: PUSH
4897: LD_VAR 0 11
4901: PPUSH
4902: LD_VAR 0 10
4906: PPUSH
4907: CALL_OW 296
4911: PUSH
4912: LD_INT 13
4914: GREATER
4915: AND
4916: PUSH
4917: LD_VAR 0 1
4921: PPUSH
4922: LD_VAR 0 10
4926: PPUSH
4927: CALL_OW 296
4931: PUSH
4932: LD_INT 12
4934: GREATER
4935: OR
4936: IFFALSE 4940
// exit ;
4938: GO 5293
// missile := [ 1 ] ;
4940: LD_ADDR_VAR 0 14
4944: PUSH
4945: LD_INT 1
4947: PUSH
4948: EMPTY
4949: LIST
4950: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4951: LD_VAR 0 9
4955: PPUSH
4956: LD_VAR 0 12
4960: PPUSH
4961: CALL_OW 325
4965: IFFALSE 4994
// missile := Replace ( missile , missile + 1 , 2 ) ;
4967: LD_ADDR_VAR 0 14
4971: PUSH
4972: LD_VAR 0 14
4976: PPUSH
4977: LD_VAR 0 14
4981: PUSH
4982: LD_INT 1
4984: PLUS
4985: PPUSH
4986: LD_INT 2
4988: PPUSH
4989: CALL_OW 1
4993: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4994: LD_VAR 0 9
4998: PPUSH
4999: LD_VAR 0 13
5003: PPUSH
5004: CALL_OW 325
5008: PUSH
5009: LD_VAR 0 10
5013: PPUSH
5014: CALL_OW 255
5018: PPUSH
5019: LD_VAR 0 13
5023: PPUSH
5024: CALL_OW 325
5028: NOT
5029: AND
5030: IFFALSE 5059
// missile := Replace ( missile , missile + 1 , 3 ) ;
5032: LD_ADDR_VAR 0 14
5036: PUSH
5037: LD_VAR 0 14
5041: PPUSH
5042: LD_VAR 0 14
5046: PUSH
5047: LD_INT 1
5049: PLUS
5050: PPUSH
5051: LD_INT 3
5053: PPUSH
5054: CALL_OW 1
5058: ST_TO_ADDR
// if missile < 2 then
5059: LD_VAR 0 14
5063: PUSH
5064: LD_INT 2
5066: LESS
5067: IFFALSE 5071
// exit ;
5069: GO 5293
// x := GetX ( enemy ) ;
5071: LD_ADDR_VAR 0 4
5075: PUSH
5076: LD_VAR 0 10
5080: PPUSH
5081: CALL_OW 250
5085: ST_TO_ADDR
// y := GetY ( enemy ) ;
5086: LD_ADDR_VAR 0 5
5090: PUSH
5091: LD_VAR 0 10
5095: PPUSH
5096: CALL_OW 251
5100: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
5101: LD_ADDR_VAR 0 6
5105: PUSH
5106: LD_VAR 0 4
5110: PUSH
5111: LD_INT 1
5113: NEG
5114: PPUSH
5115: LD_INT 1
5117: PPUSH
5118: CALL_OW 12
5122: PLUS
5123: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
5124: LD_ADDR_VAR 0 7
5128: PUSH
5129: LD_VAR 0 5
5133: PUSH
5134: LD_INT 1
5136: NEG
5137: PPUSH
5138: LD_INT 1
5140: PPUSH
5141: CALL_OW 12
5145: PLUS
5146: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5147: LD_VAR 0 6
5151: PPUSH
5152: LD_VAR 0 7
5156: PPUSH
5157: CALL_OW 488
5161: NOT
5162: IFFALSE 5184
// begin _x := x ;
5164: LD_ADDR_VAR 0 6
5168: PUSH
5169: LD_VAR 0 4
5173: ST_TO_ADDR
// _y := y ;
5174: LD_ADDR_VAR 0 7
5178: PUSH
5179: LD_VAR 0 5
5183: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
5184: LD_ADDR_VAR 0 3
5188: PUSH
5189: LD_INT 1
5191: PPUSH
5192: LD_VAR 0 14
5196: PPUSH
5197: CALL_OW 12
5201: ST_TO_ADDR
// case i of 1 :
5202: LD_VAR 0 3
5206: PUSH
5207: LD_INT 1
5209: DOUBLE
5210: EQUAL
5211: IFTRUE 5215
5213: GO 5232
5215: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
5216: LD_VAR 0 1
5220: PPUSH
5221: LD_VAR 0 10
5225: PPUSH
5226: CALL_OW 115
5230: GO 5293
5232: LD_INT 2
5234: DOUBLE
5235: EQUAL
5236: IFTRUE 5240
5238: GO 5262
5240: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
5241: LD_VAR 0 1
5245: PPUSH
5246: LD_VAR 0 6
5250: PPUSH
5251: LD_VAR 0 7
5255: PPUSH
5256: CALL_OW 153
5260: GO 5293
5262: LD_INT 3
5264: DOUBLE
5265: EQUAL
5266: IFTRUE 5270
5268: GO 5292
5270: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
5271: LD_VAR 0 1
5275: PPUSH
5276: LD_VAR 0 6
5280: PPUSH
5281: LD_VAR 0 7
5285: PPUSH
5286: CALL_OW 154
5290: GO 5293
5292: POP
// end ;
5293: LD_VAR 0 2
5297: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
5298: LD_INT 0
5300: PPUSH
5301: PPUSH
5302: PPUSH
5303: PPUSH
5304: PPUSH
5305: PPUSH
// if not unit or not building then
5306: LD_VAR 0 1
5310: NOT
5311: PUSH
5312: LD_VAR 0 2
5316: NOT
5317: OR
5318: IFFALSE 5322
// exit ;
5320: GO 5480
// x := GetX ( building ) ;
5322: LD_ADDR_VAR 0 5
5326: PUSH
5327: LD_VAR 0 2
5331: PPUSH
5332: CALL_OW 250
5336: ST_TO_ADDR
// y := GetY ( building ) ;
5337: LD_ADDR_VAR 0 6
5341: PUSH
5342: LD_VAR 0 2
5346: PPUSH
5347: CALL_OW 251
5351: ST_TO_ADDR
// for i = 0 to 5 do
5352: LD_ADDR_VAR 0 4
5356: PUSH
5357: DOUBLE
5358: LD_INT 0
5360: DEC
5361: ST_TO_ADDR
5362: LD_INT 5
5364: PUSH
5365: FOR_TO
5366: IFFALSE 5478
// begin _x := ShiftX ( x , i , 3 ) ;
5368: LD_ADDR_VAR 0 7
5372: PUSH
5373: LD_VAR 0 5
5377: PPUSH
5378: LD_VAR 0 4
5382: PPUSH
5383: LD_INT 3
5385: PPUSH
5386: CALL_OW 272
5390: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
5391: LD_ADDR_VAR 0 8
5395: PUSH
5396: LD_VAR 0 6
5400: PPUSH
5401: LD_VAR 0 4
5405: PPUSH
5406: LD_INT 3
5408: PPUSH
5409: CALL_OW 273
5413: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5414: LD_VAR 0 7
5418: PPUSH
5419: LD_VAR 0 8
5423: PPUSH
5424: CALL_OW 488
5428: NOT
5429: IFFALSE 5433
// continue ;
5431: GO 5365
// if HexInfo ( _x , _y ) = 0 then
5433: LD_VAR 0 7
5437: PPUSH
5438: LD_VAR 0 8
5442: PPUSH
5443: CALL_OW 428
5447: PUSH
5448: LD_INT 0
5450: EQUAL
5451: IFFALSE 5476
// begin ComMoveXY ( unit , _x , _y ) ;
5453: LD_VAR 0 1
5457: PPUSH
5458: LD_VAR 0 7
5462: PPUSH
5463: LD_VAR 0 8
5467: PPUSH
5468: CALL_OW 111
// exit ;
5472: POP
5473: POP
5474: GO 5480
// end ; end ;
5476: GO 5365
5478: POP
5479: POP
// end ;
5480: LD_VAR 0 3
5484: RET
// export function ScanBase ( side , base_area ) ; begin
5485: LD_INT 0
5487: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
5488: LD_ADDR_VAR 0 3
5492: PUSH
5493: LD_VAR 0 2
5497: PPUSH
5498: LD_INT 81
5500: PUSH
5501: LD_VAR 0 1
5505: PUSH
5506: EMPTY
5507: LIST
5508: LIST
5509: PPUSH
5510: CALL_OW 70
5514: ST_TO_ADDR
// end ;
5515: LD_VAR 0 3
5519: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
5520: LD_INT 0
5522: PPUSH
5523: PPUSH
5524: PPUSH
5525: PPUSH
// result := false ;
5526: LD_ADDR_VAR 0 2
5530: PUSH
5531: LD_INT 0
5533: ST_TO_ADDR
// side := GetSide ( unit ) ;
5534: LD_ADDR_VAR 0 3
5538: PUSH
5539: LD_VAR 0 1
5543: PPUSH
5544: CALL_OW 255
5548: ST_TO_ADDR
// nat := GetNation ( unit ) ;
5549: LD_ADDR_VAR 0 4
5553: PUSH
5554: LD_VAR 0 1
5558: PPUSH
5559: CALL_OW 248
5563: ST_TO_ADDR
// case nat of 1 :
5564: LD_VAR 0 4
5568: PUSH
5569: LD_INT 1
5571: DOUBLE
5572: EQUAL
5573: IFTRUE 5577
5575: GO 5588
5577: POP
// tech := tech_lassight ; 2 :
5578: LD_ADDR_VAR 0 5
5582: PUSH
5583: LD_INT 12
5585: ST_TO_ADDR
5586: GO 5627
5588: LD_INT 2
5590: DOUBLE
5591: EQUAL
5592: IFTRUE 5596
5594: GO 5607
5596: POP
// tech := tech_mortar ; 3 :
5597: LD_ADDR_VAR 0 5
5601: PUSH
5602: LD_INT 41
5604: ST_TO_ADDR
5605: GO 5627
5607: LD_INT 3
5609: DOUBLE
5610: EQUAL
5611: IFTRUE 5615
5613: GO 5626
5615: POP
// tech := tech_bazooka ; end ;
5616: LD_ADDR_VAR 0 5
5620: PUSH
5621: LD_INT 44
5623: ST_TO_ADDR
5624: GO 5627
5626: POP
// if Researched ( side , tech ) then
5627: LD_VAR 0 3
5631: PPUSH
5632: LD_VAR 0 5
5636: PPUSH
5637: CALL_OW 325
5641: IFFALSE 5668
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
5643: LD_ADDR_VAR 0 2
5647: PUSH
5648: LD_INT 5
5650: PUSH
5651: LD_INT 8
5653: PUSH
5654: LD_INT 9
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: LIST
5661: PUSH
5662: LD_VAR 0 4
5666: ARRAY
5667: ST_TO_ADDR
// end ;
5668: LD_VAR 0 2
5672: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
5673: LD_INT 0
5675: PPUSH
5676: PPUSH
5677: PPUSH
// if not mines then
5678: LD_VAR 0 2
5682: NOT
5683: IFFALSE 5687
// exit ;
5685: GO 5831
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5687: LD_ADDR_VAR 0 5
5691: PUSH
5692: LD_INT 81
5694: PUSH
5695: LD_VAR 0 1
5699: PUSH
5700: EMPTY
5701: LIST
5702: LIST
5703: PUSH
5704: LD_INT 3
5706: PUSH
5707: LD_INT 21
5709: PUSH
5710: LD_INT 3
5712: PUSH
5713: EMPTY
5714: LIST
5715: LIST
5716: PUSH
5717: EMPTY
5718: LIST
5719: LIST
5720: PUSH
5721: EMPTY
5722: LIST
5723: LIST
5724: PPUSH
5725: CALL_OW 69
5729: ST_TO_ADDR
// for i in mines do
5730: LD_ADDR_VAR 0 4
5734: PUSH
5735: LD_VAR 0 2
5739: PUSH
5740: FOR_IN
5741: IFFALSE 5829
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5743: LD_VAR 0 4
5747: PUSH
5748: LD_INT 1
5750: ARRAY
5751: PPUSH
5752: LD_VAR 0 4
5756: PUSH
5757: LD_INT 2
5759: ARRAY
5760: PPUSH
5761: CALL_OW 458
5765: NOT
5766: IFFALSE 5770
// continue ;
5768: GO 5740
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5770: LD_VAR 0 4
5774: PUSH
5775: LD_INT 1
5777: ARRAY
5778: PPUSH
5779: LD_VAR 0 4
5783: PUSH
5784: LD_INT 2
5786: ARRAY
5787: PPUSH
5788: CALL_OW 428
5792: PUSH
5793: LD_VAR 0 5
5797: IN
5798: IFFALSE 5827
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5800: LD_VAR 0 4
5804: PUSH
5805: LD_INT 1
5807: ARRAY
5808: PPUSH
5809: LD_VAR 0 4
5813: PUSH
5814: LD_INT 2
5816: ARRAY
5817: PPUSH
5818: LD_VAR 0 1
5822: PPUSH
5823: CALL_OW 456
// end ;
5827: GO 5740
5829: POP
5830: POP
// end ;
5831: LD_VAR 0 3
5835: RET
// export function Count ( array ) ; begin
5836: LD_INT 0
5838: PPUSH
// result := array + 0 ;
5839: LD_ADDR_VAR 0 2
5843: PUSH
5844: LD_VAR 0 1
5848: PUSH
5849: LD_INT 0
5851: PLUS
5852: ST_TO_ADDR
// end ;
5853: LD_VAR 0 2
5857: RET
// export function IsEmpty ( building ) ; begin
5858: LD_INT 0
5860: PPUSH
// if not building then
5861: LD_VAR 0 1
5865: NOT
5866: IFFALSE 5870
// exit ;
5868: GO 5913
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5870: LD_ADDR_VAR 0 2
5874: PUSH
5875: LD_VAR 0 1
5879: PUSH
5880: LD_INT 22
5882: PUSH
5883: LD_VAR 0 1
5887: PPUSH
5888: CALL_OW 255
5892: PUSH
5893: EMPTY
5894: LIST
5895: LIST
5896: PUSH
5897: LD_INT 58
5899: PUSH
5900: EMPTY
5901: LIST
5902: PUSH
5903: EMPTY
5904: LIST
5905: LIST
5906: PPUSH
5907: CALL_OW 69
5911: IN
5912: ST_TO_ADDR
// end ;
5913: LD_VAR 0 2
5917: RET
// export function IsNotFull ( building ) ; var places ; begin
5918: LD_INT 0
5920: PPUSH
5921: PPUSH
// if not building then
5922: LD_VAR 0 1
5926: NOT
5927: IFFALSE 5931
// exit ;
5929: GO 5959
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5931: LD_ADDR_VAR 0 2
5935: PUSH
5936: LD_VAR 0 1
5940: PPUSH
5941: LD_INT 3
5943: PUSH
5944: LD_INT 62
5946: PUSH
5947: EMPTY
5948: LIST
5949: PUSH
5950: EMPTY
5951: LIST
5952: LIST
5953: PPUSH
5954: CALL_OW 72
5958: ST_TO_ADDR
// end ;
5959: LD_VAR 0 2
5963: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5964: LD_INT 0
5966: PPUSH
5967: PPUSH
5968: PPUSH
5969: PPUSH
// tmp := [ ] ;
5970: LD_ADDR_VAR 0 3
5974: PUSH
5975: EMPTY
5976: ST_TO_ADDR
// list := [ ] ;
5977: LD_ADDR_VAR 0 5
5981: PUSH
5982: EMPTY
5983: ST_TO_ADDR
// for i = 16 to 25 do
5984: LD_ADDR_VAR 0 4
5988: PUSH
5989: DOUBLE
5990: LD_INT 16
5992: DEC
5993: ST_TO_ADDR
5994: LD_INT 25
5996: PUSH
5997: FOR_TO
5998: IFFALSE 6071
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
6000: LD_ADDR_VAR 0 3
6004: PUSH
6005: LD_VAR 0 3
6009: PUSH
6010: LD_INT 22
6012: PUSH
6013: LD_VAR 0 1
6017: PPUSH
6018: CALL_OW 255
6022: PUSH
6023: EMPTY
6024: LIST
6025: LIST
6026: PUSH
6027: LD_INT 91
6029: PUSH
6030: LD_VAR 0 1
6034: PUSH
6035: LD_INT 6
6037: PUSH
6038: EMPTY
6039: LIST
6040: LIST
6041: LIST
6042: PUSH
6043: LD_INT 30
6045: PUSH
6046: LD_VAR 0 4
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: PUSH
6055: EMPTY
6056: LIST
6057: LIST
6058: LIST
6059: PUSH
6060: EMPTY
6061: LIST
6062: PPUSH
6063: CALL_OW 69
6067: ADD
6068: ST_TO_ADDR
6069: GO 5997
6071: POP
6072: POP
// for i = 1 to tmp do
6073: LD_ADDR_VAR 0 4
6077: PUSH
6078: DOUBLE
6079: LD_INT 1
6081: DEC
6082: ST_TO_ADDR
6083: LD_VAR 0 3
6087: PUSH
6088: FOR_TO
6089: IFFALSE 6177
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
6091: LD_ADDR_VAR 0 5
6095: PUSH
6096: LD_VAR 0 5
6100: PUSH
6101: LD_VAR 0 3
6105: PUSH
6106: LD_VAR 0 4
6110: ARRAY
6111: PPUSH
6112: CALL_OW 266
6116: PUSH
6117: LD_VAR 0 3
6121: PUSH
6122: LD_VAR 0 4
6126: ARRAY
6127: PPUSH
6128: CALL_OW 250
6132: PUSH
6133: LD_VAR 0 3
6137: PUSH
6138: LD_VAR 0 4
6142: ARRAY
6143: PPUSH
6144: CALL_OW 251
6148: PUSH
6149: LD_VAR 0 3
6153: PUSH
6154: LD_VAR 0 4
6158: ARRAY
6159: PPUSH
6160: CALL_OW 254
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: LIST
6169: LIST
6170: PUSH
6171: EMPTY
6172: LIST
6173: ADD
6174: ST_TO_ADDR
6175: GO 6088
6177: POP
6178: POP
// result := list ;
6179: LD_ADDR_VAR 0 2
6183: PUSH
6184: LD_VAR 0 5
6188: ST_TO_ADDR
// end ;
6189: LD_VAR 0 2
6193: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
6194: LD_INT 0
6196: PPUSH
6197: PPUSH
6198: PPUSH
6199: PPUSH
6200: PPUSH
6201: PPUSH
6202: PPUSH
// if not factory then
6203: LD_VAR 0 1
6207: NOT
6208: IFFALSE 6212
// exit ;
6210: GO 6805
// if control = control_apeman then
6212: LD_VAR 0 4
6216: PUSH
6217: LD_INT 5
6219: EQUAL
6220: IFFALSE 6329
// begin tmp := UnitsInside ( factory ) ;
6222: LD_ADDR_VAR 0 8
6226: PUSH
6227: LD_VAR 0 1
6231: PPUSH
6232: CALL_OW 313
6236: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
6237: LD_VAR 0 8
6241: PPUSH
6242: LD_INT 25
6244: PUSH
6245: LD_INT 12
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: PPUSH
6252: CALL_OW 72
6256: NOT
6257: IFFALSE 6267
// control := control_manual ;
6259: LD_ADDR_VAR 0 4
6263: PUSH
6264: LD_INT 1
6266: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
6267: LD_ADDR_VAR 0 8
6271: PUSH
6272: LD_VAR 0 1
6276: PPUSH
6277: CALL 5964 0 1
6281: ST_TO_ADDR
// if tmp then
6282: LD_VAR 0 8
6286: IFFALSE 6329
// begin for i in tmp do
6288: LD_ADDR_VAR 0 7
6292: PUSH
6293: LD_VAR 0 8
6297: PUSH
6298: FOR_IN
6299: IFFALSE 6327
// if i [ 1 ] = b_ext_radio then
6301: LD_VAR 0 7
6305: PUSH
6306: LD_INT 1
6308: ARRAY
6309: PUSH
6310: LD_INT 22
6312: EQUAL
6313: IFFALSE 6325
// begin control := control_remote ;
6315: LD_ADDR_VAR 0 4
6319: PUSH
6320: LD_INT 2
6322: ST_TO_ADDR
// break ;
6323: GO 6327
// end ;
6325: GO 6298
6327: POP
6328: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6329: LD_VAR 0 1
6333: PPUSH
6334: LD_VAR 0 2
6338: PPUSH
6339: LD_VAR 0 3
6343: PPUSH
6344: LD_VAR 0 4
6348: PPUSH
6349: LD_VAR 0 5
6353: PPUSH
6354: CALL_OW 448
6358: IFFALSE 6393
// begin result := [ chassis , engine , control , weapon ] ;
6360: LD_ADDR_VAR 0 6
6364: PUSH
6365: LD_VAR 0 2
6369: PUSH
6370: LD_VAR 0 3
6374: PUSH
6375: LD_VAR 0 4
6379: PUSH
6380: LD_VAR 0 5
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: ST_TO_ADDR
// exit ;
6391: GO 6805
// end ; _chassis := AvailableChassisList ( factory ) ;
6393: LD_ADDR_VAR 0 9
6397: PUSH
6398: LD_VAR 0 1
6402: PPUSH
6403: CALL_OW 475
6407: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
6408: LD_ADDR_VAR 0 11
6412: PUSH
6413: LD_VAR 0 1
6417: PPUSH
6418: CALL_OW 476
6422: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
6423: LD_ADDR_VAR 0 12
6427: PUSH
6428: LD_VAR 0 1
6432: PPUSH
6433: CALL_OW 477
6437: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
6438: LD_ADDR_VAR 0 10
6442: PUSH
6443: LD_VAR 0 1
6447: PPUSH
6448: CALL_OW 478
6452: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
6453: LD_VAR 0 9
6457: NOT
6458: PUSH
6459: LD_VAR 0 11
6463: NOT
6464: OR
6465: PUSH
6466: LD_VAR 0 12
6470: NOT
6471: OR
6472: PUSH
6473: LD_VAR 0 10
6477: NOT
6478: OR
6479: IFFALSE 6514
// begin result := [ chassis , engine , control , weapon ] ;
6481: LD_ADDR_VAR 0 6
6485: PUSH
6486: LD_VAR 0 2
6490: PUSH
6491: LD_VAR 0 3
6495: PUSH
6496: LD_VAR 0 4
6500: PUSH
6501: LD_VAR 0 5
6505: PUSH
6506: EMPTY
6507: LIST
6508: LIST
6509: LIST
6510: LIST
6511: ST_TO_ADDR
// exit ;
6512: GO 6805
// end ; if not chassis in _chassis then
6514: LD_VAR 0 2
6518: PUSH
6519: LD_VAR 0 9
6523: IN
6524: NOT
6525: IFFALSE 6551
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
6527: LD_ADDR_VAR 0 2
6531: PUSH
6532: LD_VAR 0 9
6536: PUSH
6537: LD_INT 1
6539: PPUSH
6540: LD_VAR 0 9
6544: PPUSH
6545: CALL_OW 12
6549: ARRAY
6550: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
6551: LD_VAR 0 2
6555: PPUSH
6556: LD_VAR 0 3
6560: PPUSH
6561: CALL 6810 0 2
6565: NOT
6566: IFFALSE 6625
// repeat engine := _engine [ 1 ] ;
6568: LD_ADDR_VAR 0 3
6572: PUSH
6573: LD_VAR 0 11
6577: PUSH
6578: LD_INT 1
6580: ARRAY
6581: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
6582: LD_ADDR_VAR 0 11
6586: PUSH
6587: LD_VAR 0 11
6591: PPUSH
6592: LD_INT 1
6594: PPUSH
6595: CALL_OW 3
6599: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
6600: LD_VAR 0 2
6604: PPUSH
6605: LD_VAR 0 3
6609: PPUSH
6610: CALL 6810 0 2
6614: PUSH
6615: LD_VAR 0 11
6619: PUSH
6620: EMPTY
6621: EQUAL
6622: OR
6623: IFFALSE 6568
// if not control in _control then
6625: LD_VAR 0 4
6629: PUSH
6630: LD_VAR 0 12
6634: IN
6635: NOT
6636: IFFALSE 6662
// control := _control [ rand ( 1 , _control ) ] ;
6638: LD_ADDR_VAR 0 4
6642: PUSH
6643: LD_VAR 0 12
6647: PUSH
6648: LD_INT 1
6650: PPUSH
6651: LD_VAR 0 12
6655: PPUSH
6656: CALL_OW 12
6660: ARRAY
6661: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
6662: LD_VAR 0 2
6666: PPUSH
6667: LD_VAR 0 5
6671: PPUSH
6672: CALL 7030 0 2
6676: NOT
6677: IFFALSE 6736
// repeat weapon := _weapon [ 1 ] ;
6679: LD_ADDR_VAR 0 5
6683: PUSH
6684: LD_VAR 0 10
6688: PUSH
6689: LD_INT 1
6691: ARRAY
6692: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
6693: LD_ADDR_VAR 0 10
6697: PUSH
6698: LD_VAR 0 10
6702: PPUSH
6703: LD_INT 1
6705: PPUSH
6706: CALL_OW 3
6710: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6711: LD_VAR 0 2
6715: PPUSH
6716: LD_VAR 0 5
6720: PPUSH
6721: CALL 7030 0 2
6725: PUSH
6726: LD_VAR 0 10
6730: PUSH
6731: EMPTY
6732: EQUAL
6733: OR
6734: IFFALSE 6679
// result := [ ] ;
6736: LD_ADDR_VAR 0 6
6740: PUSH
6741: EMPTY
6742: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6743: LD_VAR 0 1
6747: PPUSH
6748: LD_VAR 0 2
6752: PPUSH
6753: LD_VAR 0 3
6757: PPUSH
6758: LD_VAR 0 4
6762: PPUSH
6763: LD_VAR 0 5
6767: PPUSH
6768: CALL_OW 448
6772: IFFALSE 6805
// result := [ chassis , engine , control , weapon ] ;
6774: LD_ADDR_VAR 0 6
6778: PUSH
6779: LD_VAR 0 2
6783: PUSH
6784: LD_VAR 0 3
6788: PUSH
6789: LD_VAR 0 4
6793: PUSH
6794: LD_VAR 0 5
6798: PUSH
6799: EMPTY
6800: LIST
6801: LIST
6802: LIST
6803: LIST
6804: ST_TO_ADDR
// end ;
6805: LD_VAR 0 6
6809: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6810: LD_INT 0
6812: PPUSH
// if not chassis or not engine then
6813: LD_VAR 0 1
6817: NOT
6818: PUSH
6819: LD_VAR 0 2
6823: NOT
6824: OR
6825: IFFALSE 6829
// exit ;
6827: GO 7025
// case engine of engine_solar :
6829: LD_VAR 0 2
6833: PUSH
6834: LD_INT 2
6836: DOUBLE
6837: EQUAL
6838: IFTRUE 6842
6840: GO 6880
6842: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6843: LD_ADDR_VAR 0 3
6847: PUSH
6848: LD_INT 11
6850: PUSH
6851: LD_INT 12
6853: PUSH
6854: LD_INT 13
6856: PUSH
6857: LD_INT 14
6859: PUSH
6860: LD_INT 1
6862: PUSH
6863: LD_INT 2
6865: PUSH
6866: LD_INT 3
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: LIST
6873: LIST
6874: LIST
6875: LIST
6876: LIST
6877: ST_TO_ADDR
6878: GO 7009
6880: LD_INT 1
6882: DOUBLE
6883: EQUAL
6884: IFTRUE 6888
6886: GO 6950
6888: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6889: LD_ADDR_VAR 0 3
6893: PUSH
6894: LD_INT 11
6896: PUSH
6897: LD_INT 12
6899: PUSH
6900: LD_INT 13
6902: PUSH
6903: LD_INT 14
6905: PUSH
6906: LD_INT 1
6908: PUSH
6909: LD_INT 2
6911: PUSH
6912: LD_INT 3
6914: PUSH
6915: LD_INT 4
6917: PUSH
6918: LD_INT 5
6920: PUSH
6921: LD_INT 21
6923: PUSH
6924: LD_INT 23
6926: PUSH
6927: LD_INT 22
6929: PUSH
6930: LD_INT 24
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: LIST
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: LIST
6946: LIST
6947: ST_TO_ADDR
6948: GO 7009
6950: LD_INT 3
6952: DOUBLE
6953: EQUAL
6954: IFTRUE 6958
6956: GO 7008
6958: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6959: LD_ADDR_VAR 0 3
6963: PUSH
6964: LD_INT 13
6966: PUSH
6967: LD_INT 14
6969: PUSH
6970: LD_INT 2
6972: PUSH
6973: LD_INT 3
6975: PUSH
6976: LD_INT 4
6978: PUSH
6979: LD_INT 5
6981: PUSH
6982: LD_INT 21
6984: PUSH
6985: LD_INT 22
6987: PUSH
6988: LD_INT 23
6990: PUSH
6991: LD_INT 24
6993: PUSH
6994: EMPTY
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: ST_TO_ADDR
7006: GO 7009
7008: POP
// result := ( chassis in result ) ;
7009: LD_ADDR_VAR 0 3
7013: PUSH
7014: LD_VAR 0 1
7018: PUSH
7019: LD_VAR 0 3
7023: IN
7024: ST_TO_ADDR
// end ;
7025: LD_VAR 0 3
7029: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
7030: LD_INT 0
7032: PPUSH
// if not chassis or not weapon then
7033: LD_VAR 0 1
7037: NOT
7038: PUSH
7039: LD_VAR 0 2
7043: NOT
7044: OR
7045: IFFALSE 7049
// exit ;
7047: GO 8109
// case weapon of us_machine_gun :
7049: LD_VAR 0 2
7053: PUSH
7054: LD_INT 2
7056: DOUBLE
7057: EQUAL
7058: IFTRUE 7062
7060: GO 7092
7062: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
7063: LD_ADDR_VAR 0 3
7067: PUSH
7068: LD_INT 1
7070: PUSH
7071: LD_INT 2
7073: PUSH
7074: LD_INT 3
7076: PUSH
7077: LD_INT 4
7079: PUSH
7080: LD_INT 5
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: LIST
7087: LIST
7088: LIST
7089: ST_TO_ADDR
7090: GO 8093
7092: LD_INT 3
7094: DOUBLE
7095: EQUAL
7096: IFTRUE 7100
7098: GO 7130
7100: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
7101: LD_ADDR_VAR 0 3
7105: PUSH
7106: LD_INT 1
7108: PUSH
7109: LD_INT 2
7111: PUSH
7112: LD_INT 3
7114: PUSH
7115: LD_INT 4
7117: PUSH
7118: LD_INT 5
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: ST_TO_ADDR
7128: GO 8093
7130: LD_INT 11
7132: DOUBLE
7133: EQUAL
7134: IFTRUE 7138
7136: GO 7168
7138: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
7139: LD_ADDR_VAR 0 3
7143: PUSH
7144: LD_INT 1
7146: PUSH
7147: LD_INT 2
7149: PUSH
7150: LD_INT 3
7152: PUSH
7153: LD_INT 4
7155: PUSH
7156: LD_INT 5
7158: PUSH
7159: EMPTY
7160: LIST
7161: LIST
7162: LIST
7163: LIST
7164: LIST
7165: ST_TO_ADDR
7166: GO 8093
7168: LD_INT 4
7170: DOUBLE
7171: EQUAL
7172: IFTRUE 7176
7174: GO 7202
7176: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
7177: LD_ADDR_VAR 0 3
7181: PUSH
7182: LD_INT 2
7184: PUSH
7185: LD_INT 3
7187: PUSH
7188: LD_INT 4
7190: PUSH
7191: LD_INT 5
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: ST_TO_ADDR
7200: GO 8093
7202: LD_INT 5
7204: DOUBLE
7205: EQUAL
7206: IFTRUE 7210
7208: GO 7236
7210: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
7211: LD_ADDR_VAR 0 3
7215: PUSH
7216: LD_INT 2
7218: PUSH
7219: LD_INT 3
7221: PUSH
7222: LD_INT 4
7224: PUSH
7225: LD_INT 5
7227: PUSH
7228: EMPTY
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: ST_TO_ADDR
7234: GO 8093
7236: LD_INT 9
7238: DOUBLE
7239: EQUAL
7240: IFTRUE 7244
7242: GO 7270
7244: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
7245: LD_ADDR_VAR 0 3
7249: PUSH
7250: LD_INT 2
7252: PUSH
7253: LD_INT 3
7255: PUSH
7256: LD_INT 4
7258: PUSH
7259: LD_INT 5
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: LIST
7266: LIST
7267: ST_TO_ADDR
7268: GO 8093
7270: LD_INT 7
7272: DOUBLE
7273: EQUAL
7274: IFTRUE 7278
7276: GO 7304
7278: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
7279: LD_ADDR_VAR 0 3
7283: PUSH
7284: LD_INT 2
7286: PUSH
7287: LD_INT 3
7289: PUSH
7290: LD_INT 4
7292: PUSH
7293: LD_INT 5
7295: PUSH
7296: EMPTY
7297: LIST
7298: LIST
7299: LIST
7300: LIST
7301: ST_TO_ADDR
7302: GO 8093
7304: LD_INT 12
7306: DOUBLE
7307: EQUAL
7308: IFTRUE 7312
7310: GO 7338
7312: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
7313: LD_ADDR_VAR 0 3
7317: PUSH
7318: LD_INT 2
7320: PUSH
7321: LD_INT 3
7323: PUSH
7324: LD_INT 4
7326: PUSH
7327: LD_INT 5
7329: PUSH
7330: EMPTY
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: ST_TO_ADDR
7336: GO 8093
7338: LD_INT 13
7340: DOUBLE
7341: EQUAL
7342: IFTRUE 7346
7344: GO 7372
7346: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
7347: LD_ADDR_VAR 0 3
7351: PUSH
7352: LD_INT 2
7354: PUSH
7355: LD_INT 3
7357: PUSH
7358: LD_INT 4
7360: PUSH
7361: LD_INT 5
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: ST_TO_ADDR
7370: GO 8093
7372: LD_INT 14
7374: DOUBLE
7375: EQUAL
7376: IFTRUE 7380
7378: GO 7398
7380: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
7381: LD_ADDR_VAR 0 3
7385: PUSH
7386: LD_INT 4
7388: PUSH
7389: LD_INT 5
7391: PUSH
7392: EMPTY
7393: LIST
7394: LIST
7395: ST_TO_ADDR
7396: GO 8093
7398: LD_INT 6
7400: DOUBLE
7401: EQUAL
7402: IFTRUE 7406
7404: GO 7424
7406: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
7407: LD_ADDR_VAR 0 3
7411: PUSH
7412: LD_INT 4
7414: PUSH
7415: LD_INT 5
7417: PUSH
7418: EMPTY
7419: LIST
7420: LIST
7421: ST_TO_ADDR
7422: GO 8093
7424: LD_INT 10
7426: DOUBLE
7427: EQUAL
7428: IFTRUE 7432
7430: GO 7450
7432: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
7433: LD_ADDR_VAR 0 3
7437: PUSH
7438: LD_INT 4
7440: PUSH
7441: LD_INT 5
7443: PUSH
7444: EMPTY
7445: LIST
7446: LIST
7447: ST_TO_ADDR
7448: GO 8093
7450: LD_INT 22
7452: DOUBLE
7453: EQUAL
7454: IFTRUE 7458
7456: GO 7484
7458: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
7459: LD_ADDR_VAR 0 3
7463: PUSH
7464: LD_INT 11
7466: PUSH
7467: LD_INT 12
7469: PUSH
7470: LD_INT 13
7472: PUSH
7473: LD_INT 14
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: LIST
7480: LIST
7481: ST_TO_ADDR
7482: GO 8093
7484: LD_INT 23
7486: DOUBLE
7487: EQUAL
7488: IFTRUE 7492
7490: GO 7518
7492: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
7493: LD_ADDR_VAR 0 3
7497: PUSH
7498: LD_INT 11
7500: PUSH
7501: LD_INT 12
7503: PUSH
7504: LD_INT 13
7506: PUSH
7507: LD_INT 14
7509: PUSH
7510: EMPTY
7511: LIST
7512: LIST
7513: LIST
7514: LIST
7515: ST_TO_ADDR
7516: GO 8093
7518: LD_INT 24
7520: DOUBLE
7521: EQUAL
7522: IFTRUE 7526
7524: GO 7552
7526: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
7527: LD_ADDR_VAR 0 3
7531: PUSH
7532: LD_INT 11
7534: PUSH
7535: LD_INT 12
7537: PUSH
7538: LD_INT 13
7540: PUSH
7541: LD_INT 14
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: LIST
7548: LIST
7549: ST_TO_ADDR
7550: GO 8093
7552: LD_INT 30
7554: DOUBLE
7555: EQUAL
7556: IFTRUE 7560
7558: GO 7586
7560: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
7561: LD_ADDR_VAR 0 3
7565: PUSH
7566: LD_INT 11
7568: PUSH
7569: LD_INT 12
7571: PUSH
7572: LD_INT 13
7574: PUSH
7575: LD_INT 14
7577: PUSH
7578: EMPTY
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: ST_TO_ADDR
7584: GO 8093
7586: LD_INT 25
7588: DOUBLE
7589: EQUAL
7590: IFTRUE 7594
7592: GO 7612
7594: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
7595: LD_ADDR_VAR 0 3
7599: PUSH
7600: LD_INT 13
7602: PUSH
7603: LD_INT 14
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: ST_TO_ADDR
7610: GO 8093
7612: LD_INT 27
7614: DOUBLE
7615: EQUAL
7616: IFTRUE 7620
7618: GO 7638
7620: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
7621: LD_ADDR_VAR 0 3
7625: PUSH
7626: LD_INT 13
7628: PUSH
7629: LD_INT 14
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: ST_TO_ADDR
7636: GO 8093
7638: LD_INT 92
7640: DOUBLE
7641: EQUAL
7642: IFTRUE 7646
7644: GO 7672
7646: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
7647: LD_ADDR_VAR 0 3
7651: PUSH
7652: LD_INT 11
7654: PUSH
7655: LD_INT 12
7657: PUSH
7658: LD_INT 13
7660: PUSH
7661: LD_INT 14
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: ST_TO_ADDR
7670: GO 8093
7672: LD_INT 28
7674: DOUBLE
7675: EQUAL
7676: IFTRUE 7680
7678: GO 7698
7680: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
7681: LD_ADDR_VAR 0 3
7685: PUSH
7686: LD_INT 13
7688: PUSH
7689: LD_INT 14
7691: PUSH
7692: EMPTY
7693: LIST
7694: LIST
7695: ST_TO_ADDR
7696: GO 8093
7698: LD_INT 29
7700: DOUBLE
7701: EQUAL
7702: IFTRUE 7706
7704: GO 7724
7706: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7707: LD_ADDR_VAR 0 3
7711: PUSH
7712: LD_INT 13
7714: PUSH
7715: LD_INT 14
7717: PUSH
7718: EMPTY
7719: LIST
7720: LIST
7721: ST_TO_ADDR
7722: GO 8093
7724: LD_INT 31
7726: DOUBLE
7727: EQUAL
7728: IFTRUE 7732
7730: GO 7750
7732: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7733: LD_ADDR_VAR 0 3
7737: PUSH
7738: LD_INT 13
7740: PUSH
7741: LD_INT 14
7743: PUSH
7744: EMPTY
7745: LIST
7746: LIST
7747: ST_TO_ADDR
7748: GO 8093
7750: LD_INT 26
7752: DOUBLE
7753: EQUAL
7754: IFTRUE 7758
7756: GO 7776
7758: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7759: LD_ADDR_VAR 0 3
7763: PUSH
7764: LD_INT 13
7766: PUSH
7767: LD_INT 14
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: ST_TO_ADDR
7774: GO 8093
7776: LD_INT 42
7778: DOUBLE
7779: EQUAL
7780: IFTRUE 7784
7782: GO 7810
7784: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7785: LD_ADDR_VAR 0 3
7789: PUSH
7790: LD_INT 21
7792: PUSH
7793: LD_INT 22
7795: PUSH
7796: LD_INT 23
7798: PUSH
7799: LD_INT 24
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: ST_TO_ADDR
7808: GO 8093
7810: LD_INT 43
7812: DOUBLE
7813: EQUAL
7814: IFTRUE 7818
7816: GO 7844
7818: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7819: LD_ADDR_VAR 0 3
7823: PUSH
7824: LD_INT 21
7826: PUSH
7827: LD_INT 22
7829: PUSH
7830: LD_INT 23
7832: PUSH
7833: LD_INT 24
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: ST_TO_ADDR
7842: GO 8093
7844: LD_INT 44
7846: DOUBLE
7847: EQUAL
7848: IFTRUE 7852
7850: GO 7878
7852: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7853: LD_ADDR_VAR 0 3
7857: PUSH
7858: LD_INT 21
7860: PUSH
7861: LD_INT 22
7863: PUSH
7864: LD_INT 23
7866: PUSH
7867: LD_INT 24
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: ST_TO_ADDR
7876: GO 8093
7878: LD_INT 45
7880: DOUBLE
7881: EQUAL
7882: IFTRUE 7886
7884: GO 7912
7886: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7887: LD_ADDR_VAR 0 3
7891: PUSH
7892: LD_INT 21
7894: PUSH
7895: LD_INT 22
7897: PUSH
7898: LD_INT 23
7900: PUSH
7901: LD_INT 24
7903: PUSH
7904: EMPTY
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: ST_TO_ADDR
7910: GO 8093
7912: LD_INT 49
7914: DOUBLE
7915: EQUAL
7916: IFTRUE 7920
7918: GO 7946
7920: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7921: LD_ADDR_VAR 0 3
7925: PUSH
7926: LD_INT 21
7928: PUSH
7929: LD_INT 22
7931: PUSH
7932: LD_INT 23
7934: PUSH
7935: LD_INT 24
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: ST_TO_ADDR
7944: GO 8093
7946: LD_INT 51
7948: DOUBLE
7949: EQUAL
7950: IFTRUE 7954
7952: GO 7980
7954: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7955: LD_ADDR_VAR 0 3
7959: PUSH
7960: LD_INT 21
7962: PUSH
7963: LD_INT 22
7965: PUSH
7966: LD_INT 23
7968: PUSH
7969: LD_INT 24
7971: PUSH
7972: EMPTY
7973: LIST
7974: LIST
7975: LIST
7976: LIST
7977: ST_TO_ADDR
7978: GO 8093
7980: LD_INT 52
7982: DOUBLE
7983: EQUAL
7984: IFTRUE 7988
7986: GO 8014
7988: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7989: LD_ADDR_VAR 0 3
7993: PUSH
7994: LD_INT 21
7996: PUSH
7997: LD_INT 22
7999: PUSH
8000: LD_INT 23
8002: PUSH
8003: LD_INT 24
8005: PUSH
8006: EMPTY
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: ST_TO_ADDR
8012: GO 8093
8014: LD_INT 53
8016: DOUBLE
8017: EQUAL
8018: IFTRUE 8022
8020: GO 8040
8022: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
8023: LD_ADDR_VAR 0 3
8027: PUSH
8028: LD_INT 23
8030: PUSH
8031: LD_INT 24
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: ST_TO_ADDR
8038: GO 8093
8040: LD_INT 46
8042: DOUBLE
8043: EQUAL
8044: IFTRUE 8048
8046: GO 8066
8048: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
8049: LD_ADDR_VAR 0 3
8053: PUSH
8054: LD_INT 23
8056: PUSH
8057: LD_INT 24
8059: PUSH
8060: EMPTY
8061: LIST
8062: LIST
8063: ST_TO_ADDR
8064: GO 8093
8066: LD_INT 47
8068: DOUBLE
8069: EQUAL
8070: IFTRUE 8074
8072: GO 8092
8074: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
8075: LD_ADDR_VAR 0 3
8079: PUSH
8080: LD_INT 23
8082: PUSH
8083: LD_INT 24
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: ST_TO_ADDR
8090: GO 8093
8092: POP
// result := ( chassis in result ) ;
8093: LD_ADDR_VAR 0 3
8097: PUSH
8098: LD_VAR 0 1
8102: PUSH
8103: LD_VAR 0 3
8107: IN
8108: ST_TO_ADDR
// end ;
8109: LD_VAR 0 3
8113: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
8114: LD_INT 0
8116: PPUSH
8117: PPUSH
8118: PPUSH
8119: PPUSH
8120: PPUSH
8121: PPUSH
8122: PPUSH
// result := array ;
8123: LD_ADDR_VAR 0 5
8127: PUSH
8128: LD_VAR 0 1
8132: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
8133: LD_VAR 0 1
8137: NOT
8138: PUSH
8139: LD_VAR 0 2
8143: NOT
8144: OR
8145: PUSH
8146: LD_VAR 0 3
8150: NOT
8151: OR
8152: PUSH
8153: LD_VAR 0 2
8157: PUSH
8158: LD_VAR 0 1
8162: GREATER
8163: OR
8164: PUSH
8165: LD_VAR 0 3
8169: PUSH
8170: LD_VAR 0 1
8174: GREATER
8175: OR
8176: IFFALSE 8180
// exit ;
8178: GO 8476
// if direction then
8180: LD_VAR 0 4
8184: IFFALSE 8248
// begin d := 1 ;
8186: LD_ADDR_VAR 0 9
8190: PUSH
8191: LD_INT 1
8193: ST_TO_ADDR
// if i_from > i_to then
8194: LD_VAR 0 2
8198: PUSH
8199: LD_VAR 0 3
8203: GREATER
8204: IFFALSE 8230
// length := ( array - i_from ) + i_to else
8206: LD_ADDR_VAR 0 11
8210: PUSH
8211: LD_VAR 0 1
8215: PUSH
8216: LD_VAR 0 2
8220: MINUS
8221: PUSH
8222: LD_VAR 0 3
8226: PLUS
8227: ST_TO_ADDR
8228: GO 8246
// length := i_to - i_from ;
8230: LD_ADDR_VAR 0 11
8234: PUSH
8235: LD_VAR 0 3
8239: PUSH
8240: LD_VAR 0 2
8244: MINUS
8245: ST_TO_ADDR
// end else
8246: GO 8309
// begin d := - 1 ;
8248: LD_ADDR_VAR 0 9
8252: PUSH
8253: LD_INT 1
8255: NEG
8256: ST_TO_ADDR
// if i_from > i_to then
8257: LD_VAR 0 2
8261: PUSH
8262: LD_VAR 0 3
8266: GREATER
8267: IFFALSE 8287
// length := i_from - i_to else
8269: LD_ADDR_VAR 0 11
8273: PUSH
8274: LD_VAR 0 2
8278: PUSH
8279: LD_VAR 0 3
8283: MINUS
8284: ST_TO_ADDR
8285: GO 8309
// length := ( array - i_to ) + i_from ;
8287: LD_ADDR_VAR 0 11
8291: PUSH
8292: LD_VAR 0 1
8296: PUSH
8297: LD_VAR 0 3
8301: MINUS
8302: PUSH
8303: LD_VAR 0 2
8307: PLUS
8308: ST_TO_ADDR
// end ; if not length then
8309: LD_VAR 0 11
8313: NOT
8314: IFFALSE 8318
// exit ;
8316: GO 8476
// tmp := array ;
8318: LD_ADDR_VAR 0 10
8322: PUSH
8323: LD_VAR 0 1
8327: ST_TO_ADDR
// for i = 1 to length do
8328: LD_ADDR_VAR 0 6
8332: PUSH
8333: DOUBLE
8334: LD_INT 1
8336: DEC
8337: ST_TO_ADDR
8338: LD_VAR 0 11
8342: PUSH
8343: FOR_TO
8344: IFFALSE 8464
// begin for j = 1 to array do
8346: LD_ADDR_VAR 0 7
8350: PUSH
8351: DOUBLE
8352: LD_INT 1
8354: DEC
8355: ST_TO_ADDR
8356: LD_VAR 0 1
8360: PUSH
8361: FOR_TO
8362: IFFALSE 8450
// begin k := j + d ;
8364: LD_ADDR_VAR 0 8
8368: PUSH
8369: LD_VAR 0 7
8373: PUSH
8374: LD_VAR 0 9
8378: PLUS
8379: ST_TO_ADDR
// if k > array then
8380: LD_VAR 0 8
8384: PUSH
8385: LD_VAR 0 1
8389: GREATER
8390: IFFALSE 8400
// k := 1 ;
8392: LD_ADDR_VAR 0 8
8396: PUSH
8397: LD_INT 1
8399: ST_TO_ADDR
// if not k then
8400: LD_VAR 0 8
8404: NOT
8405: IFFALSE 8417
// k := array ;
8407: LD_ADDR_VAR 0 8
8411: PUSH
8412: LD_VAR 0 1
8416: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
8417: LD_ADDR_VAR 0 10
8421: PUSH
8422: LD_VAR 0 10
8426: PPUSH
8427: LD_VAR 0 8
8431: PPUSH
8432: LD_VAR 0 1
8436: PUSH
8437: LD_VAR 0 7
8441: ARRAY
8442: PPUSH
8443: CALL_OW 1
8447: ST_TO_ADDR
// end ;
8448: GO 8361
8450: POP
8451: POP
// array := tmp ;
8452: LD_ADDR_VAR 0 1
8456: PUSH
8457: LD_VAR 0 10
8461: ST_TO_ADDR
// end ;
8462: GO 8343
8464: POP
8465: POP
// result := array ;
8466: LD_ADDR_VAR 0 5
8470: PUSH
8471: LD_VAR 0 1
8475: ST_TO_ADDR
// end ;
8476: LD_VAR 0 5
8480: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
8481: LD_INT 0
8483: PPUSH
8484: PPUSH
// result := 0 ;
8485: LD_ADDR_VAR 0 3
8489: PUSH
8490: LD_INT 0
8492: ST_TO_ADDR
// if not array or not value in array then
8493: LD_VAR 0 1
8497: NOT
8498: PUSH
8499: LD_VAR 0 2
8503: PUSH
8504: LD_VAR 0 1
8508: IN
8509: NOT
8510: OR
8511: IFFALSE 8515
// exit ;
8513: GO 8569
// for i = 1 to array do
8515: LD_ADDR_VAR 0 4
8519: PUSH
8520: DOUBLE
8521: LD_INT 1
8523: DEC
8524: ST_TO_ADDR
8525: LD_VAR 0 1
8529: PUSH
8530: FOR_TO
8531: IFFALSE 8567
// if value = array [ i ] then
8533: LD_VAR 0 2
8537: PUSH
8538: LD_VAR 0 1
8542: PUSH
8543: LD_VAR 0 4
8547: ARRAY
8548: EQUAL
8549: IFFALSE 8565
// begin result := i ;
8551: LD_ADDR_VAR 0 3
8555: PUSH
8556: LD_VAR 0 4
8560: ST_TO_ADDR
// exit ;
8561: POP
8562: POP
8563: GO 8569
// end ;
8565: GO 8530
8567: POP
8568: POP
// end ;
8569: LD_VAR 0 3
8573: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
8574: LD_INT 0
8576: PPUSH
// vc_chassis := chassis ;
8577: LD_ADDR_OWVAR 37
8581: PUSH
8582: LD_VAR 0 1
8586: ST_TO_ADDR
// vc_engine := engine ;
8587: LD_ADDR_OWVAR 39
8591: PUSH
8592: LD_VAR 0 2
8596: ST_TO_ADDR
// vc_control := control ;
8597: LD_ADDR_OWVAR 38
8601: PUSH
8602: LD_VAR 0 3
8606: ST_TO_ADDR
// vc_weapon := weapon ;
8607: LD_ADDR_OWVAR 40
8611: PUSH
8612: LD_VAR 0 4
8616: ST_TO_ADDR
// vc_fuel_battery := fuel ;
8617: LD_ADDR_OWVAR 41
8621: PUSH
8622: LD_VAR 0 5
8626: ST_TO_ADDR
// end ;
8627: LD_VAR 0 6
8631: RET
// export function WantPlant ( unit ) ; var task ; begin
8632: LD_INT 0
8634: PPUSH
8635: PPUSH
// result := false ;
8636: LD_ADDR_VAR 0 2
8640: PUSH
8641: LD_INT 0
8643: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
8644: LD_ADDR_VAR 0 3
8648: PUSH
8649: LD_VAR 0 1
8653: PPUSH
8654: CALL_OW 437
8658: ST_TO_ADDR
// if task then
8659: LD_VAR 0 3
8663: IFFALSE 8691
// if task [ 1 ] [ 1 ] = p then
8665: LD_VAR 0 3
8669: PUSH
8670: LD_INT 1
8672: ARRAY
8673: PUSH
8674: LD_INT 1
8676: ARRAY
8677: PUSH
8678: LD_STRING p
8680: EQUAL
8681: IFFALSE 8691
// result := true ;
8683: LD_ADDR_VAR 0 2
8687: PUSH
8688: LD_INT 1
8690: ST_TO_ADDR
// end ;
8691: LD_VAR 0 2
8695: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8696: LD_INT 0
8698: PPUSH
8699: PPUSH
8700: PPUSH
8701: PPUSH
// if pos < 1 then
8702: LD_VAR 0 2
8706: PUSH
8707: LD_INT 1
8709: LESS
8710: IFFALSE 8714
// exit ;
8712: GO 9017
// if pos = 1 then
8714: LD_VAR 0 2
8718: PUSH
8719: LD_INT 1
8721: EQUAL
8722: IFFALSE 8755
// result := Replace ( arr , pos [ 1 ] , value ) else
8724: LD_ADDR_VAR 0 4
8728: PUSH
8729: LD_VAR 0 1
8733: PPUSH
8734: LD_VAR 0 2
8738: PUSH
8739: LD_INT 1
8741: ARRAY
8742: PPUSH
8743: LD_VAR 0 3
8747: PPUSH
8748: CALL_OW 1
8752: ST_TO_ADDR
8753: GO 9017
// begin tmp := arr ;
8755: LD_ADDR_VAR 0 6
8759: PUSH
8760: LD_VAR 0 1
8764: ST_TO_ADDR
// s_arr := [ tmp ] ;
8765: LD_ADDR_VAR 0 7
8769: PUSH
8770: LD_VAR 0 6
8774: PUSH
8775: EMPTY
8776: LIST
8777: ST_TO_ADDR
// for i = 1 to pos - 1 do
8778: LD_ADDR_VAR 0 5
8782: PUSH
8783: DOUBLE
8784: LD_INT 1
8786: DEC
8787: ST_TO_ADDR
8788: LD_VAR 0 2
8792: PUSH
8793: LD_INT 1
8795: MINUS
8796: PUSH
8797: FOR_TO
8798: IFFALSE 8843
// begin tmp := tmp [ pos [ i ] ] ;
8800: LD_ADDR_VAR 0 6
8804: PUSH
8805: LD_VAR 0 6
8809: PUSH
8810: LD_VAR 0 2
8814: PUSH
8815: LD_VAR 0 5
8819: ARRAY
8820: ARRAY
8821: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8822: LD_ADDR_VAR 0 7
8826: PUSH
8827: LD_VAR 0 7
8831: PUSH
8832: LD_VAR 0 6
8836: PUSH
8837: EMPTY
8838: LIST
8839: ADD
8840: ST_TO_ADDR
// end ;
8841: GO 8797
8843: POP
8844: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8845: LD_ADDR_VAR 0 6
8849: PUSH
8850: LD_VAR 0 6
8854: PPUSH
8855: LD_VAR 0 2
8859: PUSH
8860: LD_VAR 0 2
8864: ARRAY
8865: PPUSH
8866: LD_VAR 0 3
8870: PPUSH
8871: CALL_OW 1
8875: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8876: LD_ADDR_VAR 0 7
8880: PUSH
8881: LD_VAR 0 7
8885: PPUSH
8886: LD_VAR 0 7
8890: PPUSH
8891: LD_VAR 0 6
8895: PPUSH
8896: CALL_OW 1
8900: ST_TO_ADDR
// for i = s_arr downto 2 do
8901: LD_ADDR_VAR 0 5
8905: PUSH
8906: DOUBLE
8907: LD_VAR 0 7
8911: INC
8912: ST_TO_ADDR
8913: LD_INT 2
8915: PUSH
8916: FOR_DOWNTO
8917: IFFALSE 9001
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8919: LD_ADDR_VAR 0 6
8923: PUSH
8924: LD_VAR 0 7
8928: PUSH
8929: LD_VAR 0 5
8933: PUSH
8934: LD_INT 1
8936: MINUS
8937: ARRAY
8938: PPUSH
8939: LD_VAR 0 2
8943: PUSH
8944: LD_VAR 0 5
8948: PUSH
8949: LD_INT 1
8951: MINUS
8952: ARRAY
8953: PPUSH
8954: LD_VAR 0 7
8958: PUSH
8959: LD_VAR 0 5
8963: ARRAY
8964: PPUSH
8965: CALL_OW 1
8969: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8970: LD_ADDR_VAR 0 7
8974: PUSH
8975: LD_VAR 0 7
8979: PPUSH
8980: LD_VAR 0 5
8984: PUSH
8985: LD_INT 1
8987: MINUS
8988: PPUSH
8989: LD_VAR 0 6
8993: PPUSH
8994: CALL_OW 1
8998: ST_TO_ADDR
// end ;
8999: GO 8916
9001: POP
9002: POP
// result := s_arr [ 1 ] ;
9003: LD_ADDR_VAR 0 4
9007: PUSH
9008: LD_VAR 0 7
9012: PUSH
9013: LD_INT 1
9015: ARRAY
9016: ST_TO_ADDR
// end ; end ;
9017: LD_VAR 0 4
9021: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
9022: LD_INT 0
9024: PPUSH
9025: PPUSH
// if not list then
9026: LD_VAR 0 1
9030: NOT
9031: IFFALSE 9035
// exit ;
9033: GO 9126
// i := list [ pos1 ] ;
9035: LD_ADDR_VAR 0 5
9039: PUSH
9040: LD_VAR 0 1
9044: PUSH
9045: LD_VAR 0 2
9049: ARRAY
9050: ST_TO_ADDR
// if not i then
9051: LD_VAR 0 5
9055: NOT
9056: IFFALSE 9060
// exit ;
9058: GO 9126
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
9060: LD_ADDR_VAR 0 1
9064: PUSH
9065: LD_VAR 0 1
9069: PPUSH
9070: LD_VAR 0 2
9074: PPUSH
9075: LD_VAR 0 1
9079: PUSH
9080: LD_VAR 0 3
9084: ARRAY
9085: PPUSH
9086: CALL_OW 1
9090: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
9091: LD_ADDR_VAR 0 1
9095: PUSH
9096: LD_VAR 0 1
9100: PPUSH
9101: LD_VAR 0 3
9105: PPUSH
9106: LD_VAR 0 5
9110: PPUSH
9111: CALL_OW 1
9115: ST_TO_ADDR
// result := list ;
9116: LD_ADDR_VAR 0 4
9120: PUSH
9121: LD_VAR 0 1
9125: ST_TO_ADDR
// end ;
9126: LD_VAR 0 4
9130: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
9131: LD_INT 0
9133: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
9134: LD_ADDR_VAR 0 5
9138: PUSH
9139: LD_VAR 0 1
9143: PPUSH
9144: CALL_OW 250
9148: PPUSH
9149: LD_VAR 0 1
9153: PPUSH
9154: CALL_OW 251
9158: PPUSH
9159: LD_VAR 0 2
9163: PPUSH
9164: LD_VAR 0 3
9168: PPUSH
9169: LD_VAR 0 4
9173: PPUSH
9174: CALL 9552 0 5
9178: ST_TO_ADDR
// end ;
9179: LD_VAR 0 5
9183: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
9184: LD_INT 0
9186: PPUSH
9187: PPUSH
9188: PPUSH
9189: PPUSH
// if not list or not unit then
9190: LD_VAR 0 2
9194: NOT
9195: PUSH
9196: LD_VAR 0 1
9200: NOT
9201: OR
9202: IFFALSE 9206
// exit ;
9204: GO 9547
// result := [ ] ;
9206: LD_ADDR_VAR 0 5
9210: PUSH
9211: EMPTY
9212: ST_TO_ADDR
// for i in list do
9213: LD_ADDR_VAR 0 6
9217: PUSH
9218: LD_VAR 0 2
9222: PUSH
9223: FOR_IN
9224: IFFALSE 9442
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
9226: LD_ADDR_VAR 0 8
9230: PUSH
9231: LD_VAR 0 1
9235: PPUSH
9236: LD_VAR 0 6
9240: PUSH
9241: LD_INT 1
9243: ARRAY
9244: PPUSH
9245: LD_VAR 0 6
9249: PUSH
9250: LD_INT 2
9252: ARRAY
9253: PPUSH
9254: CALL_OW 297
9258: ST_TO_ADDR
// if not Count ( result ) then
9259: LD_VAR 0 5
9263: PPUSH
9264: CALL 5836 0 1
9268: NOT
9269: IFFALSE 9302
// begin result := Join ( result , [ i , tmp ] ) ;
9271: LD_ADDR_VAR 0 5
9275: PUSH
9276: LD_VAR 0 5
9280: PPUSH
9281: LD_VAR 0 6
9285: PUSH
9286: LD_VAR 0 8
9290: PUSH
9291: EMPTY
9292: LIST
9293: LIST
9294: PPUSH
9295: CALL 41445 0 2
9299: ST_TO_ADDR
// continue ;
9300: GO 9223
// end ; if result [ result ] [ 2 ] <= tmp then
9302: LD_VAR 0 5
9306: PUSH
9307: LD_VAR 0 5
9311: ARRAY
9312: PUSH
9313: LD_INT 2
9315: ARRAY
9316: PUSH
9317: LD_VAR 0 8
9321: LESSEQUAL
9322: IFFALSE 9355
// result := Join ( result , [ i , tmp ] ) else
9324: LD_ADDR_VAR 0 5
9328: PUSH
9329: LD_VAR 0 5
9333: PPUSH
9334: LD_VAR 0 6
9338: PUSH
9339: LD_VAR 0 8
9343: PUSH
9344: EMPTY
9345: LIST
9346: LIST
9347: PPUSH
9348: CALL 41445 0 2
9352: ST_TO_ADDR
9353: GO 9440
// begin for j := 1 to Count ( result ) do
9355: LD_ADDR_VAR 0 7
9359: PUSH
9360: DOUBLE
9361: LD_INT 1
9363: DEC
9364: ST_TO_ADDR
9365: LD_VAR 0 5
9369: PPUSH
9370: CALL 5836 0 1
9374: PUSH
9375: FOR_TO
9376: IFFALSE 9438
// begin if tmp < result [ j ] [ 2 ] then
9378: LD_VAR 0 8
9382: PUSH
9383: LD_VAR 0 5
9387: PUSH
9388: LD_VAR 0 7
9392: ARRAY
9393: PUSH
9394: LD_INT 2
9396: ARRAY
9397: LESS
9398: IFFALSE 9436
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9400: LD_ADDR_VAR 0 5
9404: PUSH
9405: LD_VAR 0 5
9409: PPUSH
9410: LD_VAR 0 7
9414: PPUSH
9415: LD_VAR 0 6
9419: PUSH
9420: LD_VAR 0 8
9424: PUSH
9425: EMPTY
9426: LIST
9427: LIST
9428: PPUSH
9429: CALL_OW 2
9433: ST_TO_ADDR
// break ;
9434: GO 9438
// end ; end ;
9436: GO 9375
9438: POP
9439: POP
// end ; end ;
9440: GO 9223
9442: POP
9443: POP
// if result and not asc then
9444: LD_VAR 0 5
9448: PUSH
9449: LD_VAR 0 3
9453: NOT
9454: AND
9455: IFFALSE 9472
// result := ReverseArray ( result ) ;
9457: LD_ADDR_VAR 0 5
9461: PUSH
9462: LD_VAR 0 5
9466: PPUSH
9467: CALL 36712 0 1
9471: ST_TO_ADDR
// tmp := [ ] ;
9472: LD_ADDR_VAR 0 8
9476: PUSH
9477: EMPTY
9478: ST_TO_ADDR
// if mode then
9479: LD_VAR 0 4
9483: IFFALSE 9547
// begin for i := 1 to result do
9485: LD_ADDR_VAR 0 6
9489: PUSH
9490: DOUBLE
9491: LD_INT 1
9493: DEC
9494: ST_TO_ADDR
9495: LD_VAR 0 5
9499: PUSH
9500: FOR_TO
9501: IFFALSE 9535
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
9503: LD_ADDR_VAR 0 8
9507: PUSH
9508: LD_VAR 0 8
9512: PPUSH
9513: LD_VAR 0 5
9517: PUSH
9518: LD_VAR 0 6
9522: ARRAY
9523: PUSH
9524: LD_INT 1
9526: ARRAY
9527: PPUSH
9528: CALL 41445 0 2
9532: ST_TO_ADDR
9533: GO 9500
9535: POP
9536: POP
// result := tmp ;
9537: LD_ADDR_VAR 0 5
9541: PUSH
9542: LD_VAR 0 8
9546: ST_TO_ADDR
// end ; end ;
9547: LD_VAR 0 5
9551: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
9552: LD_INT 0
9554: PPUSH
9555: PPUSH
9556: PPUSH
9557: PPUSH
// if not list then
9558: LD_VAR 0 3
9562: NOT
9563: IFFALSE 9567
// exit ;
9565: GO 9955
// result := [ ] ;
9567: LD_ADDR_VAR 0 6
9571: PUSH
9572: EMPTY
9573: ST_TO_ADDR
// for i in list do
9574: LD_ADDR_VAR 0 7
9578: PUSH
9579: LD_VAR 0 3
9583: PUSH
9584: FOR_IN
9585: IFFALSE 9787
// begin tmp := GetDistUnitXY ( i , x , y ) ;
9587: LD_ADDR_VAR 0 9
9591: PUSH
9592: LD_VAR 0 7
9596: PPUSH
9597: LD_VAR 0 1
9601: PPUSH
9602: LD_VAR 0 2
9606: PPUSH
9607: CALL_OW 297
9611: ST_TO_ADDR
// if not result then
9612: LD_VAR 0 6
9616: NOT
9617: IFFALSE 9643
// result := [ [ i , tmp ] ] else
9619: LD_ADDR_VAR 0 6
9623: PUSH
9624: LD_VAR 0 7
9628: PUSH
9629: LD_VAR 0 9
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: PUSH
9638: EMPTY
9639: LIST
9640: ST_TO_ADDR
9641: GO 9785
// begin if result [ result ] [ 2 ] <= tmp then
9643: LD_VAR 0 6
9647: PUSH
9648: LD_VAR 0 6
9652: ARRAY
9653: PUSH
9654: LD_INT 2
9656: ARRAY
9657: PUSH
9658: LD_VAR 0 9
9662: LESSEQUAL
9663: IFFALSE 9705
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9665: LD_ADDR_VAR 0 6
9669: PUSH
9670: LD_VAR 0 6
9674: PPUSH
9675: LD_VAR 0 6
9679: PUSH
9680: LD_INT 1
9682: PLUS
9683: PPUSH
9684: LD_VAR 0 7
9688: PUSH
9689: LD_VAR 0 9
9693: PUSH
9694: EMPTY
9695: LIST
9696: LIST
9697: PPUSH
9698: CALL_OW 2
9702: ST_TO_ADDR
9703: GO 9785
// for j := 1 to result do
9705: LD_ADDR_VAR 0 8
9709: PUSH
9710: DOUBLE
9711: LD_INT 1
9713: DEC
9714: ST_TO_ADDR
9715: LD_VAR 0 6
9719: PUSH
9720: FOR_TO
9721: IFFALSE 9783
// begin if tmp < result [ j ] [ 2 ] then
9723: LD_VAR 0 9
9727: PUSH
9728: LD_VAR 0 6
9732: PUSH
9733: LD_VAR 0 8
9737: ARRAY
9738: PUSH
9739: LD_INT 2
9741: ARRAY
9742: LESS
9743: IFFALSE 9781
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9745: LD_ADDR_VAR 0 6
9749: PUSH
9750: LD_VAR 0 6
9754: PPUSH
9755: LD_VAR 0 8
9759: PPUSH
9760: LD_VAR 0 7
9764: PUSH
9765: LD_VAR 0 9
9769: PUSH
9770: EMPTY
9771: LIST
9772: LIST
9773: PPUSH
9774: CALL_OW 2
9778: ST_TO_ADDR
// break ;
9779: GO 9783
// end ; end ;
9781: GO 9720
9783: POP
9784: POP
// end ; end ;
9785: GO 9584
9787: POP
9788: POP
// if result and not asc then
9789: LD_VAR 0 6
9793: PUSH
9794: LD_VAR 0 4
9798: NOT
9799: AND
9800: IFFALSE 9875
// begin tmp := result ;
9802: LD_ADDR_VAR 0 9
9806: PUSH
9807: LD_VAR 0 6
9811: ST_TO_ADDR
// for i = tmp downto 1 do
9812: LD_ADDR_VAR 0 7
9816: PUSH
9817: DOUBLE
9818: LD_VAR 0 9
9822: INC
9823: ST_TO_ADDR
9824: LD_INT 1
9826: PUSH
9827: FOR_DOWNTO
9828: IFFALSE 9873
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9830: LD_ADDR_VAR 0 6
9834: PUSH
9835: LD_VAR 0 6
9839: PPUSH
9840: LD_VAR 0 9
9844: PUSH
9845: LD_VAR 0 7
9849: MINUS
9850: PUSH
9851: LD_INT 1
9853: PLUS
9854: PPUSH
9855: LD_VAR 0 9
9859: PUSH
9860: LD_VAR 0 7
9864: ARRAY
9865: PPUSH
9866: CALL_OW 1
9870: ST_TO_ADDR
9871: GO 9827
9873: POP
9874: POP
// end ; tmp := [ ] ;
9875: LD_ADDR_VAR 0 9
9879: PUSH
9880: EMPTY
9881: ST_TO_ADDR
// if mode then
9882: LD_VAR 0 5
9886: IFFALSE 9955
// begin for i = 1 to result do
9888: LD_ADDR_VAR 0 7
9892: PUSH
9893: DOUBLE
9894: LD_INT 1
9896: DEC
9897: ST_TO_ADDR
9898: LD_VAR 0 6
9902: PUSH
9903: FOR_TO
9904: IFFALSE 9943
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9906: LD_ADDR_VAR 0 9
9910: PUSH
9911: LD_VAR 0 9
9915: PPUSH
9916: LD_VAR 0 7
9920: PPUSH
9921: LD_VAR 0 6
9925: PUSH
9926: LD_VAR 0 7
9930: ARRAY
9931: PUSH
9932: LD_INT 1
9934: ARRAY
9935: PPUSH
9936: CALL_OW 1
9940: ST_TO_ADDR
9941: GO 9903
9943: POP
9944: POP
// result := tmp ;
9945: LD_ADDR_VAR 0 6
9949: PUSH
9950: LD_VAR 0 9
9954: ST_TO_ADDR
// end ; end ;
9955: LD_VAR 0 6
9959: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9960: LD_INT 0
9962: PPUSH
9963: PPUSH
9964: PPUSH
9965: PPUSH
9966: PPUSH
9967: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9968: LD_ADDR_VAR 0 5
9972: PUSH
9973: LD_INT 0
9975: PUSH
9976: LD_INT 0
9978: PUSH
9979: LD_INT 0
9981: PUSH
9982: EMPTY
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: ST_TO_ADDR
// if not x or not y then
9990: LD_VAR 0 2
9994: NOT
9995: PUSH
9996: LD_VAR 0 3
10000: NOT
10001: OR
10002: IFFALSE 10006
// exit ;
10004: GO 11656
// if not range then
10006: LD_VAR 0 4
10010: NOT
10011: IFFALSE 10021
// range := 10 ;
10013: LD_ADDR_VAR 0 4
10017: PUSH
10018: LD_INT 10
10020: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10021: LD_ADDR_VAR 0 8
10025: PUSH
10026: LD_INT 81
10028: PUSH
10029: LD_VAR 0 1
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: PUSH
10038: LD_INT 92
10040: PUSH
10041: LD_VAR 0 2
10045: PUSH
10046: LD_VAR 0 3
10050: PUSH
10051: LD_VAR 0 4
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: PUSH
10062: LD_INT 3
10064: PUSH
10065: LD_INT 21
10067: PUSH
10068: LD_INT 3
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: PUSH
10079: EMPTY
10080: LIST
10081: LIST
10082: LIST
10083: PPUSH
10084: CALL_OW 69
10088: ST_TO_ADDR
// if not tmp then
10089: LD_VAR 0 8
10093: NOT
10094: IFFALSE 10098
// exit ;
10096: GO 11656
// for i in tmp do
10098: LD_ADDR_VAR 0 6
10102: PUSH
10103: LD_VAR 0 8
10107: PUSH
10108: FOR_IN
10109: IFFALSE 11631
// begin points := [ 0 , 0 , 0 ] ;
10111: LD_ADDR_VAR 0 9
10115: PUSH
10116: LD_INT 0
10118: PUSH
10119: LD_INT 0
10121: PUSH
10122: LD_INT 0
10124: PUSH
10125: EMPTY
10126: LIST
10127: LIST
10128: LIST
10129: ST_TO_ADDR
// bpoints := 1 ;
10130: LD_ADDR_VAR 0 10
10134: PUSH
10135: LD_INT 1
10137: ST_TO_ADDR
// case GetType ( i ) of unit_human :
10138: LD_VAR 0 6
10142: PPUSH
10143: CALL_OW 247
10147: PUSH
10148: LD_INT 1
10150: DOUBLE
10151: EQUAL
10152: IFTRUE 10156
10154: GO 10734
10156: POP
// begin if GetClass ( i ) = 1 then
10157: LD_VAR 0 6
10161: PPUSH
10162: CALL_OW 257
10166: PUSH
10167: LD_INT 1
10169: EQUAL
10170: IFFALSE 10191
// points := [ 10 , 5 , 3 ] ;
10172: LD_ADDR_VAR 0 9
10176: PUSH
10177: LD_INT 10
10179: PUSH
10180: LD_INT 5
10182: PUSH
10183: LD_INT 3
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: LIST
10190: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
10191: LD_VAR 0 6
10195: PPUSH
10196: CALL_OW 257
10200: PUSH
10201: LD_INT 2
10203: PUSH
10204: LD_INT 3
10206: PUSH
10207: LD_INT 4
10209: PUSH
10210: EMPTY
10211: LIST
10212: LIST
10213: LIST
10214: IN
10215: IFFALSE 10236
// points := [ 3 , 2 , 1 ] ;
10217: LD_ADDR_VAR 0 9
10221: PUSH
10222: LD_INT 3
10224: PUSH
10225: LD_INT 2
10227: PUSH
10228: LD_INT 1
10230: PUSH
10231: EMPTY
10232: LIST
10233: LIST
10234: LIST
10235: ST_TO_ADDR
// if GetClass ( i ) = 5 then
10236: LD_VAR 0 6
10240: PPUSH
10241: CALL_OW 257
10245: PUSH
10246: LD_INT 5
10248: EQUAL
10249: IFFALSE 10270
// points := [ 130 , 5 , 2 ] ;
10251: LD_ADDR_VAR 0 9
10255: PUSH
10256: LD_INT 130
10258: PUSH
10259: LD_INT 5
10261: PUSH
10262: LD_INT 2
10264: PUSH
10265: EMPTY
10266: LIST
10267: LIST
10268: LIST
10269: ST_TO_ADDR
// if GetClass ( i ) = 8 then
10270: LD_VAR 0 6
10274: PPUSH
10275: CALL_OW 257
10279: PUSH
10280: LD_INT 8
10282: EQUAL
10283: IFFALSE 10304
// points := [ 35 , 35 , 30 ] ;
10285: LD_ADDR_VAR 0 9
10289: PUSH
10290: LD_INT 35
10292: PUSH
10293: LD_INT 35
10295: PUSH
10296: LD_INT 30
10298: PUSH
10299: EMPTY
10300: LIST
10301: LIST
10302: LIST
10303: ST_TO_ADDR
// if GetClass ( i ) = 9 then
10304: LD_VAR 0 6
10308: PPUSH
10309: CALL_OW 257
10313: PUSH
10314: LD_INT 9
10316: EQUAL
10317: IFFALSE 10338
// points := [ 20 , 55 , 40 ] ;
10319: LD_ADDR_VAR 0 9
10323: PUSH
10324: LD_INT 20
10326: PUSH
10327: LD_INT 55
10329: PUSH
10330: LD_INT 40
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: LIST
10337: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
10338: LD_VAR 0 6
10342: PPUSH
10343: CALL_OW 257
10347: PUSH
10348: LD_INT 12
10350: PUSH
10351: LD_INT 16
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: IN
10358: IFFALSE 10379
// points := [ 5 , 3 , 2 ] ;
10360: LD_ADDR_VAR 0 9
10364: PUSH
10365: LD_INT 5
10367: PUSH
10368: LD_INT 3
10370: PUSH
10371: LD_INT 2
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: LIST
10378: ST_TO_ADDR
// if GetClass ( i ) = 17 then
10379: LD_VAR 0 6
10383: PPUSH
10384: CALL_OW 257
10388: PUSH
10389: LD_INT 17
10391: EQUAL
10392: IFFALSE 10413
// points := [ 100 , 50 , 75 ] ;
10394: LD_ADDR_VAR 0 9
10398: PUSH
10399: LD_INT 100
10401: PUSH
10402: LD_INT 50
10404: PUSH
10405: LD_INT 75
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: LIST
10412: ST_TO_ADDR
// if GetClass ( i ) = 15 then
10413: LD_VAR 0 6
10417: PPUSH
10418: CALL_OW 257
10422: PUSH
10423: LD_INT 15
10425: EQUAL
10426: IFFALSE 10447
// points := [ 10 , 5 , 3 ] ;
10428: LD_ADDR_VAR 0 9
10432: PUSH
10433: LD_INT 10
10435: PUSH
10436: LD_INT 5
10438: PUSH
10439: LD_INT 3
10441: PUSH
10442: EMPTY
10443: LIST
10444: LIST
10445: LIST
10446: ST_TO_ADDR
// if GetClass ( i ) = 14 then
10447: LD_VAR 0 6
10451: PPUSH
10452: CALL_OW 257
10456: PUSH
10457: LD_INT 14
10459: EQUAL
10460: IFFALSE 10481
// points := [ 10 , 0 , 0 ] ;
10462: LD_ADDR_VAR 0 9
10466: PUSH
10467: LD_INT 10
10469: PUSH
10470: LD_INT 0
10472: PUSH
10473: LD_INT 0
10475: PUSH
10476: EMPTY
10477: LIST
10478: LIST
10479: LIST
10480: ST_TO_ADDR
// if GetClass ( i ) = 11 then
10481: LD_VAR 0 6
10485: PPUSH
10486: CALL_OW 257
10490: PUSH
10491: LD_INT 11
10493: EQUAL
10494: IFFALSE 10515
// points := [ 30 , 10 , 5 ] ;
10496: LD_ADDR_VAR 0 9
10500: PUSH
10501: LD_INT 30
10503: PUSH
10504: LD_INT 10
10506: PUSH
10507: LD_INT 5
10509: PUSH
10510: EMPTY
10511: LIST
10512: LIST
10513: LIST
10514: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
10515: LD_VAR 0 1
10519: PPUSH
10520: LD_INT 5
10522: PPUSH
10523: CALL_OW 321
10527: PUSH
10528: LD_INT 2
10530: EQUAL
10531: IFFALSE 10548
// bpoints := bpoints * 1.8 ;
10533: LD_ADDR_VAR 0 10
10537: PUSH
10538: LD_VAR 0 10
10542: PUSH
10543: LD_REAL  1.80000000000000E+0000
10546: MUL
10547: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
10548: LD_VAR 0 6
10552: PPUSH
10553: CALL_OW 257
10557: PUSH
10558: LD_INT 1
10560: PUSH
10561: LD_INT 2
10563: PUSH
10564: LD_INT 3
10566: PUSH
10567: LD_INT 4
10569: PUSH
10570: EMPTY
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: IN
10576: PUSH
10577: LD_VAR 0 1
10581: PPUSH
10582: LD_INT 51
10584: PPUSH
10585: CALL_OW 321
10589: PUSH
10590: LD_INT 2
10592: EQUAL
10593: AND
10594: IFFALSE 10611
// bpoints := bpoints * 1.2 ;
10596: LD_ADDR_VAR 0 10
10600: PUSH
10601: LD_VAR 0 10
10605: PUSH
10606: LD_REAL  1.20000000000000E+0000
10609: MUL
10610: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
10611: LD_VAR 0 6
10615: PPUSH
10616: CALL_OW 257
10620: PUSH
10621: LD_INT 5
10623: PUSH
10624: LD_INT 7
10626: PUSH
10627: LD_INT 9
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: LIST
10634: IN
10635: PUSH
10636: LD_VAR 0 1
10640: PPUSH
10641: LD_INT 52
10643: PPUSH
10644: CALL_OW 321
10648: PUSH
10649: LD_INT 2
10651: EQUAL
10652: AND
10653: IFFALSE 10670
// bpoints := bpoints * 1.5 ;
10655: LD_ADDR_VAR 0 10
10659: PUSH
10660: LD_VAR 0 10
10664: PUSH
10665: LD_REAL  1.50000000000000E+0000
10668: MUL
10669: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10670: LD_VAR 0 1
10674: PPUSH
10675: LD_INT 66
10677: PPUSH
10678: CALL_OW 321
10682: PUSH
10683: LD_INT 2
10685: EQUAL
10686: IFFALSE 10703
// bpoints := bpoints * 1.1 ;
10688: LD_ADDR_VAR 0 10
10692: PUSH
10693: LD_VAR 0 10
10697: PUSH
10698: LD_REAL  1.10000000000000E+0000
10701: MUL
10702: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10703: LD_ADDR_VAR 0 10
10707: PUSH
10708: LD_VAR 0 10
10712: PUSH
10713: LD_VAR 0 6
10717: PPUSH
10718: LD_INT 1
10720: PPUSH
10721: CALL_OW 259
10725: PUSH
10726: LD_REAL  1.15000000000000E+0000
10729: MUL
10730: MUL
10731: ST_TO_ADDR
// end ; unit_vehicle :
10732: GO 11560
10734: LD_INT 2
10736: DOUBLE
10737: EQUAL
10738: IFTRUE 10742
10740: GO 11548
10742: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10743: LD_VAR 0 6
10747: PPUSH
10748: CALL_OW 264
10752: PUSH
10753: LD_INT 2
10755: PUSH
10756: LD_INT 42
10758: PUSH
10759: LD_INT 24
10761: PUSH
10762: EMPTY
10763: LIST
10764: LIST
10765: LIST
10766: IN
10767: IFFALSE 10788
// points := [ 25 , 5 , 3 ] ;
10769: LD_ADDR_VAR 0 9
10773: PUSH
10774: LD_INT 25
10776: PUSH
10777: LD_INT 5
10779: PUSH
10780: LD_INT 3
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: LIST
10787: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10788: LD_VAR 0 6
10792: PPUSH
10793: CALL_OW 264
10797: PUSH
10798: LD_INT 4
10800: PUSH
10801: LD_INT 43
10803: PUSH
10804: LD_INT 25
10806: PUSH
10807: EMPTY
10808: LIST
10809: LIST
10810: LIST
10811: IN
10812: IFFALSE 10833
// points := [ 40 , 15 , 5 ] ;
10814: LD_ADDR_VAR 0 9
10818: PUSH
10819: LD_INT 40
10821: PUSH
10822: LD_INT 15
10824: PUSH
10825: LD_INT 5
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: LIST
10832: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10833: LD_VAR 0 6
10837: PPUSH
10838: CALL_OW 264
10842: PUSH
10843: LD_INT 3
10845: PUSH
10846: LD_INT 23
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: IN
10853: IFFALSE 10874
// points := [ 7 , 25 , 8 ] ;
10855: LD_ADDR_VAR 0 9
10859: PUSH
10860: LD_INT 7
10862: PUSH
10863: LD_INT 25
10865: PUSH
10866: LD_INT 8
10868: PUSH
10869: EMPTY
10870: LIST
10871: LIST
10872: LIST
10873: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10874: LD_VAR 0 6
10878: PPUSH
10879: CALL_OW 264
10883: PUSH
10884: LD_INT 5
10886: PUSH
10887: LD_INT 27
10889: PUSH
10890: LD_INT 44
10892: PUSH
10893: EMPTY
10894: LIST
10895: LIST
10896: LIST
10897: IN
10898: IFFALSE 10919
// points := [ 14 , 50 , 16 ] ;
10900: LD_ADDR_VAR 0 9
10904: PUSH
10905: LD_INT 14
10907: PUSH
10908: LD_INT 50
10910: PUSH
10911: LD_INT 16
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: LIST
10918: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10919: LD_VAR 0 6
10923: PPUSH
10924: CALL_OW 264
10928: PUSH
10929: LD_INT 6
10931: PUSH
10932: LD_INT 46
10934: PUSH
10935: EMPTY
10936: LIST
10937: LIST
10938: IN
10939: IFFALSE 10960
// points := [ 32 , 120 , 70 ] ;
10941: LD_ADDR_VAR 0 9
10945: PUSH
10946: LD_INT 32
10948: PUSH
10949: LD_INT 120
10951: PUSH
10952: LD_INT 70
10954: PUSH
10955: EMPTY
10956: LIST
10957: LIST
10958: LIST
10959: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10960: LD_VAR 0 6
10964: PPUSH
10965: CALL_OW 264
10969: PUSH
10970: LD_INT 7
10972: PUSH
10973: LD_INT 28
10975: PUSH
10976: LD_INT 45
10978: PUSH
10979: LD_INT 92
10981: PUSH
10982: EMPTY
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: IN
10988: IFFALSE 11009
// points := [ 35 , 20 , 45 ] ;
10990: LD_ADDR_VAR 0 9
10994: PUSH
10995: LD_INT 35
10997: PUSH
10998: LD_INT 20
11000: PUSH
11001: LD_INT 45
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: LIST
11008: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
11009: LD_VAR 0 6
11013: PPUSH
11014: CALL_OW 264
11018: PUSH
11019: LD_INT 47
11021: PUSH
11022: EMPTY
11023: LIST
11024: IN
11025: IFFALSE 11046
// points := [ 67 , 45 , 75 ] ;
11027: LD_ADDR_VAR 0 9
11031: PUSH
11032: LD_INT 67
11034: PUSH
11035: LD_INT 45
11037: PUSH
11038: LD_INT 75
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: LIST
11045: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
11046: LD_VAR 0 6
11050: PPUSH
11051: CALL_OW 264
11055: PUSH
11056: LD_INT 26
11058: PUSH
11059: EMPTY
11060: LIST
11061: IN
11062: IFFALSE 11083
// points := [ 120 , 30 , 80 ] ;
11064: LD_ADDR_VAR 0 9
11068: PUSH
11069: LD_INT 120
11071: PUSH
11072: LD_INT 30
11074: PUSH
11075: LD_INT 80
11077: PUSH
11078: EMPTY
11079: LIST
11080: LIST
11081: LIST
11082: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
11083: LD_VAR 0 6
11087: PPUSH
11088: CALL_OW 264
11092: PUSH
11093: LD_INT 22
11095: PUSH
11096: EMPTY
11097: LIST
11098: IN
11099: IFFALSE 11120
// points := [ 40 , 1 , 1 ] ;
11101: LD_ADDR_VAR 0 9
11105: PUSH
11106: LD_INT 40
11108: PUSH
11109: LD_INT 1
11111: PUSH
11112: LD_INT 1
11114: PUSH
11115: EMPTY
11116: LIST
11117: LIST
11118: LIST
11119: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
11120: LD_VAR 0 6
11124: PPUSH
11125: CALL_OW 264
11129: PUSH
11130: LD_INT 29
11132: PUSH
11133: EMPTY
11134: LIST
11135: IN
11136: IFFALSE 11157
// points := [ 70 , 200 , 400 ] ;
11138: LD_ADDR_VAR 0 9
11142: PUSH
11143: LD_INT 70
11145: PUSH
11146: LD_INT 200
11148: PUSH
11149: LD_INT 400
11151: PUSH
11152: EMPTY
11153: LIST
11154: LIST
11155: LIST
11156: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
11157: LD_VAR 0 6
11161: PPUSH
11162: CALL_OW 264
11166: PUSH
11167: LD_INT 14
11169: PUSH
11170: LD_INT 53
11172: PUSH
11173: EMPTY
11174: LIST
11175: LIST
11176: IN
11177: IFFALSE 11198
// points := [ 40 , 10 , 20 ] ;
11179: LD_ADDR_VAR 0 9
11183: PUSH
11184: LD_INT 40
11186: PUSH
11187: LD_INT 10
11189: PUSH
11190: LD_INT 20
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: LIST
11197: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
11198: LD_VAR 0 6
11202: PPUSH
11203: CALL_OW 264
11207: PUSH
11208: LD_INT 9
11210: PUSH
11211: EMPTY
11212: LIST
11213: IN
11214: IFFALSE 11235
// points := [ 5 , 70 , 20 ] ;
11216: LD_ADDR_VAR 0 9
11220: PUSH
11221: LD_INT 5
11223: PUSH
11224: LD_INT 70
11226: PUSH
11227: LD_INT 20
11229: PUSH
11230: EMPTY
11231: LIST
11232: LIST
11233: LIST
11234: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
11235: LD_VAR 0 6
11239: PPUSH
11240: CALL_OW 264
11244: PUSH
11245: LD_INT 10
11247: PUSH
11248: EMPTY
11249: LIST
11250: IN
11251: IFFALSE 11272
// points := [ 35 , 110 , 70 ] ;
11253: LD_ADDR_VAR 0 9
11257: PUSH
11258: LD_INT 35
11260: PUSH
11261: LD_INT 110
11263: PUSH
11264: LD_INT 70
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: LIST
11271: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
11272: LD_VAR 0 6
11276: PPUSH
11277: CALL_OW 265
11281: PUSH
11282: LD_INT 25
11284: EQUAL
11285: IFFALSE 11306
// points := [ 80 , 65 , 100 ] ;
11287: LD_ADDR_VAR 0 9
11291: PUSH
11292: LD_INT 80
11294: PUSH
11295: LD_INT 65
11297: PUSH
11298: LD_INT 100
11300: PUSH
11301: EMPTY
11302: LIST
11303: LIST
11304: LIST
11305: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
11306: LD_VAR 0 6
11310: PPUSH
11311: CALL_OW 263
11315: PUSH
11316: LD_INT 1
11318: EQUAL
11319: IFFALSE 11354
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
11321: LD_ADDR_VAR 0 10
11325: PUSH
11326: LD_VAR 0 10
11330: PUSH
11331: LD_VAR 0 6
11335: PPUSH
11336: CALL_OW 311
11340: PPUSH
11341: LD_INT 3
11343: PPUSH
11344: CALL_OW 259
11348: PUSH
11349: LD_INT 4
11351: MUL
11352: MUL
11353: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
11354: LD_VAR 0 6
11358: PPUSH
11359: CALL_OW 263
11363: PUSH
11364: LD_INT 2
11366: EQUAL
11367: IFFALSE 11418
// begin j := IsControledBy ( i ) ;
11369: LD_ADDR_VAR 0 7
11373: PUSH
11374: LD_VAR 0 6
11378: PPUSH
11379: CALL_OW 312
11383: ST_TO_ADDR
// if j then
11384: LD_VAR 0 7
11388: IFFALSE 11418
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
11390: LD_ADDR_VAR 0 10
11394: PUSH
11395: LD_VAR 0 10
11399: PUSH
11400: LD_VAR 0 7
11404: PPUSH
11405: LD_INT 3
11407: PPUSH
11408: CALL_OW 259
11412: PUSH
11413: LD_INT 3
11415: MUL
11416: MUL
11417: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
11418: LD_VAR 0 6
11422: PPUSH
11423: CALL_OW 264
11427: PUSH
11428: LD_INT 5
11430: PUSH
11431: LD_INT 6
11433: PUSH
11434: LD_INT 46
11436: PUSH
11437: LD_INT 44
11439: PUSH
11440: LD_INT 47
11442: PUSH
11443: LD_INT 45
11445: PUSH
11446: LD_INT 28
11448: PUSH
11449: LD_INT 7
11451: PUSH
11452: LD_INT 27
11454: PUSH
11455: LD_INT 29
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: IN
11470: PUSH
11471: LD_VAR 0 1
11475: PPUSH
11476: LD_INT 52
11478: PPUSH
11479: CALL_OW 321
11483: PUSH
11484: LD_INT 2
11486: EQUAL
11487: AND
11488: IFFALSE 11505
// bpoints := bpoints * 1.2 ;
11490: LD_ADDR_VAR 0 10
11494: PUSH
11495: LD_VAR 0 10
11499: PUSH
11500: LD_REAL  1.20000000000000E+0000
11503: MUL
11504: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
11505: LD_VAR 0 6
11509: PPUSH
11510: CALL_OW 264
11514: PUSH
11515: LD_INT 6
11517: PUSH
11518: LD_INT 46
11520: PUSH
11521: LD_INT 47
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: LIST
11528: IN
11529: IFFALSE 11546
// bpoints := bpoints * 1.2 ;
11531: LD_ADDR_VAR 0 10
11535: PUSH
11536: LD_VAR 0 10
11540: PUSH
11541: LD_REAL  1.20000000000000E+0000
11544: MUL
11545: ST_TO_ADDR
// end ; unit_building :
11546: GO 11560
11548: LD_INT 3
11550: DOUBLE
11551: EQUAL
11552: IFTRUE 11556
11554: GO 11559
11556: POP
// ; end ;
11557: GO 11560
11559: POP
// for j = 1 to 3 do
11560: LD_ADDR_VAR 0 7
11564: PUSH
11565: DOUBLE
11566: LD_INT 1
11568: DEC
11569: ST_TO_ADDR
11570: LD_INT 3
11572: PUSH
11573: FOR_TO
11574: IFFALSE 11627
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
11576: LD_ADDR_VAR 0 5
11580: PUSH
11581: LD_VAR 0 5
11585: PPUSH
11586: LD_VAR 0 7
11590: PPUSH
11591: LD_VAR 0 5
11595: PUSH
11596: LD_VAR 0 7
11600: ARRAY
11601: PUSH
11602: LD_VAR 0 9
11606: PUSH
11607: LD_VAR 0 7
11611: ARRAY
11612: PUSH
11613: LD_VAR 0 10
11617: MUL
11618: PLUS
11619: PPUSH
11620: CALL_OW 1
11624: ST_TO_ADDR
11625: GO 11573
11627: POP
11628: POP
// end ;
11629: GO 10108
11631: POP
11632: POP
// result := Replace ( result , 4 , tmp ) ;
11633: LD_ADDR_VAR 0 5
11637: PUSH
11638: LD_VAR 0 5
11642: PPUSH
11643: LD_INT 4
11645: PPUSH
11646: LD_VAR 0 8
11650: PPUSH
11651: CALL_OW 1
11655: ST_TO_ADDR
// end ;
11656: LD_VAR 0 5
11660: RET
// export function DangerAtRange ( unit , range ) ; begin
11661: LD_INT 0
11663: PPUSH
// if not unit then
11664: LD_VAR 0 1
11668: NOT
11669: IFFALSE 11673
// exit ;
11671: GO 11718
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11673: LD_ADDR_VAR 0 3
11677: PUSH
11678: LD_VAR 0 1
11682: PPUSH
11683: CALL_OW 255
11687: PPUSH
11688: LD_VAR 0 1
11692: PPUSH
11693: CALL_OW 250
11697: PPUSH
11698: LD_VAR 0 1
11702: PPUSH
11703: CALL_OW 251
11707: PPUSH
11708: LD_VAR 0 2
11712: PPUSH
11713: CALL 9960 0 4
11717: ST_TO_ADDR
// end ;
11718: LD_VAR 0 3
11722: RET
// export function DangerInArea ( side , area ) ; begin
11723: LD_INT 0
11725: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11726: LD_ADDR_VAR 0 3
11730: PUSH
11731: LD_VAR 0 2
11735: PPUSH
11736: LD_INT 81
11738: PUSH
11739: LD_VAR 0 1
11743: PUSH
11744: EMPTY
11745: LIST
11746: LIST
11747: PPUSH
11748: CALL_OW 70
11752: ST_TO_ADDR
// end ;
11753: LD_VAR 0 3
11757: RET
// export function IsExtension ( b ) ; begin
11758: LD_INT 0
11760: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11761: LD_ADDR_VAR 0 2
11765: PUSH
11766: LD_VAR 0 1
11770: PUSH
11771: LD_INT 23
11773: PUSH
11774: LD_INT 20
11776: PUSH
11777: LD_INT 22
11779: PUSH
11780: LD_INT 17
11782: PUSH
11783: LD_INT 24
11785: PUSH
11786: LD_INT 21
11788: PUSH
11789: LD_INT 19
11791: PUSH
11792: LD_INT 16
11794: PUSH
11795: LD_INT 25
11797: PUSH
11798: LD_INT 18
11800: PUSH
11801: EMPTY
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: IN
11813: ST_TO_ADDR
// end ;
11814: LD_VAR 0 2
11818: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11819: LD_INT 0
11821: PPUSH
11822: PPUSH
11823: PPUSH
// result := [ ] ;
11824: LD_ADDR_VAR 0 4
11828: PUSH
11829: EMPTY
11830: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11831: LD_ADDR_VAR 0 5
11835: PUSH
11836: LD_VAR 0 2
11840: PPUSH
11841: LD_INT 21
11843: PUSH
11844: LD_INT 3
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PPUSH
11851: CALL_OW 70
11855: ST_TO_ADDR
// if not tmp then
11856: LD_VAR 0 5
11860: NOT
11861: IFFALSE 11865
// exit ;
11863: GO 11929
// if checkLink then
11865: LD_VAR 0 3
11869: IFFALSE 11919
// begin for i in tmp do
11871: LD_ADDR_VAR 0 6
11875: PUSH
11876: LD_VAR 0 5
11880: PUSH
11881: FOR_IN
11882: IFFALSE 11917
// if GetBase ( i ) <> base then
11884: LD_VAR 0 6
11888: PPUSH
11889: CALL_OW 274
11893: PUSH
11894: LD_VAR 0 1
11898: NONEQUAL
11899: IFFALSE 11915
// ComLinkToBase ( base , i ) ;
11901: LD_VAR 0 1
11905: PPUSH
11906: LD_VAR 0 6
11910: PPUSH
11911: CALL_OW 169
11915: GO 11881
11917: POP
11918: POP
// end ; result := tmp ;
11919: LD_ADDR_VAR 0 4
11923: PUSH
11924: LD_VAR 0 5
11928: ST_TO_ADDR
// end ;
11929: LD_VAR 0 4
11933: RET
// export function ComComplete ( units , b ) ; var i ; begin
11934: LD_INT 0
11936: PPUSH
11937: PPUSH
// if not units then
11938: LD_VAR 0 1
11942: NOT
11943: IFFALSE 11947
// exit ;
11945: GO 12037
// for i in units do
11947: LD_ADDR_VAR 0 4
11951: PUSH
11952: LD_VAR 0 1
11956: PUSH
11957: FOR_IN
11958: IFFALSE 12035
// if BuildingStatus ( b ) = bs_build then
11960: LD_VAR 0 2
11964: PPUSH
11965: CALL_OW 461
11969: PUSH
11970: LD_INT 1
11972: EQUAL
11973: IFFALSE 12033
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11975: LD_VAR 0 4
11979: PPUSH
11980: LD_STRING h
11982: PUSH
11983: LD_VAR 0 2
11987: PPUSH
11988: CALL_OW 250
11992: PUSH
11993: LD_VAR 0 2
11997: PPUSH
11998: CALL_OW 251
12002: PUSH
12003: LD_VAR 0 2
12007: PUSH
12008: LD_INT 0
12010: PUSH
12011: LD_INT 0
12013: PUSH
12014: LD_INT 0
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: PUSH
12026: EMPTY
12027: LIST
12028: PPUSH
12029: CALL_OW 446
12033: GO 11957
12035: POP
12036: POP
// end ;
12037: LD_VAR 0 3
12041: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
12042: LD_INT 0
12044: PPUSH
12045: PPUSH
12046: PPUSH
12047: PPUSH
12048: PPUSH
12049: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
12050: LD_VAR 0 1
12054: NOT
12055: PUSH
12056: LD_VAR 0 1
12060: PPUSH
12061: CALL_OW 263
12065: PUSH
12066: LD_INT 2
12068: NONEQUAL
12069: OR
12070: IFFALSE 12074
// exit ;
12072: GO 12390
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
12074: LD_ADDR_VAR 0 6
12078: PUSH
12079: LD_INT 22
12081: PUSH
12082: LD_VAR 0 1
12086: PPUSH
12087: CALL_OW 255
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: PUSH
12096: LD_INT 2
12098: PUSH
12099: LD_INT 30
12101: PUSH
12102: LD_INT 36
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: PUSH
12109: LD_INT 34
12111: PUSH
12112: LD_INT 31
12114: PUSH
12115: EMPTY
12116: LIST
12117: LIST
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: LIST
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PPUSH
12128: CALL_OW 69
12132: ST_TO_ADDR
// if not tmp then
12133: LD_VAR 0 6
12137: NOT
12138: IFFALSE 12142
// exit ;
12140: GO 12390
// result := [ ] ;
12142: LD_ADDR_VAR 0 2
12146: PUSH
12147: EMPTY
12148: ST_TO_ADDR
// for i in tmp do
12149: LD_ADDR_VAR 0 3
12153: PUSH
12154: LD_VAR 0 6
12158: PUSH
12159: FOR_IN
12160: IFFALSE 12231
// begin t := UnitsInside ( i ) ;
12162: LD_ADDR_VAR 0 4
12166: PUSH
12167: LD_VAR 0 3
12171: PPUSH
12172: CALL_OW 313
12176: ST_TO_ADDR
// if t then
12177: LD_VAR 0 4
12181: IFFALSE 12229
// for j in t do
12183: LD_ADDR_VAR 0 7
12187: PUSH
12188: LD_VAR 0 4
12192: PUSH
12193: FOR_IN
12194: IFFALSE 12227
// result := Replace ( result , result + 1 , j ) ;
12196: LD_ADDR_VAR 0 2
12200: PUSH
12201: LD_VAR 0 2
12205: PPUSH
12206: LD_VAR 0 2
12210: PUSH
12211: LD_INT 1
12213: PLUS
12214: PPUSH
12215: LD_VAR 0 7
12219: PPUSH
12220: CALL_OW 1
12224: ST_TO_ADDR
12225: GO 12193
12227: POP
12228: POP
// end ;
12229: GO 12159
12231: POP
12232: POP
// if not result then
12233: LD_VAR 0 2
12237: NOT
12238: IFFALSE 12242
// exit ;
12240: GO 12390
// mech := result [ 1 ] ;
12242: LD_ADDR_VAR 0 5
12246: PUSH
12247: LD_VAR 0 2
12251: PUSH
12252: LD_INT 1
12254: ARRAY
12255: ST_TO_ADDR
// if result > 1 then
12256: LD_VAR 0 2
12260: PUSH
12261: LD_INT 1
12263: GREATER
12264: IFFALSE 12376
// begin for i = 2 to result do
12266: LD_ADDR_VAR 0 3
12270: PUSH
12271: DOUBLE
12272: LD_INT 2
12274: DEC
12275: ST_TO_ADDR
12276: LD_VAR 0 2
12280: PUSH
12281: FOR_TO
12282: IFFALSE 12374
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
12284: LD_ADDR_VAR 0 4
12288: PUSH
12289: LD_VAR 0 2
12293: PUSH
12294: LD_VAR 0 3
12298: ARRAY
12299: PPUSH
12300: LD_INT 3
12302: PPUSH
12303: CALL_OW 259
12307: PUSH
12308: LD_VAR 0 2
12312: PUSH
12313: LD_VAR 0 3
12317: ARRAY
12318: PPUSH
12319: CALL_OW 432
12323: MINUS
12324: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
12325: LD_VAR 0 4
12329: PUSH
12330: LD_VAR 0 5
12334: PPUSH
12335: LD_INT 3
12337: PPUSH
12338: CALL_OW 259
12342: PUSH
12343: LD_VAR 0 5
12347: PPUSH
12348: CALL_OW 432
12352: MINUS
12353: GREATEREQUAL
12354: IFFALSE 12372
// mech := result [ i ] ;
12356: LD_ADDR_VAR 0 5
12360: PUSH
12361: LD_VAR 0 2
12365: PUSH
12366: LD_VAR 0 3
12370: ARRAY
12371: ST_TO_ADDR
// end ;
12372: GO 12281
12374: POP
12375: POP
// end ; ComLinkTo ( vehicle , mech ) ;
12376: LD_VAR 0 1
12380: PPUSH
12381: LD_VAR 0 5
12385: PPUSH
12386: CALL_OW 135
// end ;
12390: LD_VAR 0 2
12394: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
12395: LD_INT 0
12397: PPUSH
12398: PPUSH
12399: PPUSH
12400: PPUSH
12401: PPUSH
12402: PPUSH
12403: PPUSH
12404: PPUSH
12405: PPUSH
12406: PPUSH
12407: PPUSH
12408: PPUSH
12409: PPUSH
// result := [ ] ;
12410: LD_ADDR_VAR 0 7
12414: PUSH
12415: EMPTY
12416: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
12417: LD_VAR 0 1
12421: PPUSH
12422: CALL_OW 266
12426: PUSH
12427: LD_INT 0
12429: PUSH
12430: LD_INT 1
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: IN
12437: NOT
12438: IFFALSE 12442
// exit ;
12440: GO 14076
// if name then
12442: LD_VAR 0 3
12446: IFFALSE 12462
// SetBName ( base_dep , name ) ;
12448: LD_VAR 0 1
12452: PPUSH
12453: LD_VAR 0 3
12457: PPUSH
12458: CALL_OW 500
// base := GetBase ( base_dep ) ;
12462: LD_ADDR_VAR 0 15
12466: PUSH
12467: LD_VAR 0 1
12471: PPUSH
12472: CALL_OW 274
12476: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12477: LD_ADDR_VAR 0 16
12481: PUSH
12482: LD_VAR 0 1
12486: PPUSH
12487: CALL_OW 255
12491: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
12492: LD_ADDR_VAR 0 17
12496: PUSH
12497: LD_VAR 0 1
12501: PPUSH
12502: CALL_OW 248
12506: ST_TO_ADDR
// if sources then
12507: LD_VAR 0 5
12511: IFFALSE 12558
// for i = 1 to 3 do
12513: LD_ADDR_VAR 0 8
12517: PUSH
12518: DOUBLE
12519: LD_INT 1
12521: DEC
12522: ST_TO_ADDR
12523: LD_INT 3
12525: PUSH
12526: FOR_TO
12527: IFFALSE 12556
// AddResourceType ( base , i , sources [ i ] ) ;
12529: LD_VAR 0 15
12533: PPUSH
12534: LD_VAR 0 8
12538: PPUSH
12539: LD_VAR 0 5
12543: PUSH
12544: LD_VAR 0 8
12548: ARRAY
12549: PPUSH
12550: CALL_OW 276
12554: GO 12526
12556: POP
12557: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
12558: LD_ADDR_VAR 0 18
12562: PUSH
12563: LD_VAR 0 15
12567: PPUSH
12568: LD_VAR 0 2
12572: PPUSH
12573: LD_INT 1
12575: PPUSH
12576: CALL 11819 0 3
12580: ST_TO_ADDR
// InitHc ;
12581: CALL_OW 19
// InitUc ;
12585: CALL_OW 18
// uc_side := side ;
12589: LD_ADDR_OWVAR 20
12593: PUSH
12594: LD_VAR 0 16
12598: ST_TO_ADDR
// uc_nation := nation ;
12599: LD_ADDR_OWVAR 21
12603: PUSH
12604: LD_VAR 0 17
12608: ST_TO_ADDR
// if buildings then
12609: LD_VAR 0 18
12613: IFFALSE 13935
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12615: LD_ADDR_VAR 0 19
12619: PUSH
12620: LD_VAR 0 18
12624: PPUSH
12625: LD_INT 2
12627: PUSH
12628: LD_INT 30
12630: PUSH
12631: LD_INT 29
12633: PUSH
12634: EMPTY
12635: LIST
12636: LIST
12637: PUSH
12638: LD_INT 30
12640: PUSH
12641: LD_INT 30
12643: PUSH
12644: EMPTY
12645: LIST
12646: LIST
12647: PUSH
12648: EMPTY
12649: LIST
12650: LIST
12651: LIST
12652: PPUSH
12653: CALL_OW 72
12657: ST_TO_ADDR
// if tmp then
12658: LD_VAR 0 19
12662: IFFALSE 12710
// for i in tmp do
12664: LD_ADDR_VAR 0 8
12668: PUSH
12669: LD_VAR 0 19
12673: PUSH
12674: FOR_IN
12675: IFFALSE 12708
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12677: LD_VAR 0 8
12681: PPUSH
12682: CALL_OW 250
12686: PPUSH
12687: LD_VAR 0 8
12691: PPUSH
12692: CALL_OW 251
12696: PPUSH
12697: LD_VAR 0 16
12701: PPUSH
12702: CALL_OW 441
12706: GO 12674
12708: POP
12709: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12710: LD_VAR 0 18
12714: PPUSH
12715: LD_INT 2
12717: PUSH
12718: LD_INT 30
12720: PUSH
12721: LD_INT 32
12723: PUSH
12724: EMPTY
12725: LIST
12726: LIST
12727: PUSH
12728: LD_INT 30
12730: PUSH
12731: LD_INT 33
12733: PUSH
12734: EMPTY
12735: LIST
12736: LIST
12737: PUSH
12738: EMPTY
12739: LIST
12740: LIST
12741: LIST
12742: PPUSH
12743: CALL_OW 72
12747: IFFALSE 12835
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12749: LD_ADDR_VAR 0 8
12753: PUSH
12754: LD_VAR 0 18
12758: PPUSH
12759: LD_INT 2
12761: PUSH
12762: LD_INT 30
12764: PUSH
12765: LD_INT 32
12767: PUSH
12768: EMPTY
12769: LIST
12770: LIST
12771: PUSH
12772: LD_INT 30
12774: PUSH
12775: LD_INT 33
12777: PUSH
12778: EMPTY
12779: LIST
12780: LIST
12781: PUSH
12782: EMPTY
12783: LIST
12784: LIST
12785: LIST
12786: PPUSH
12787: CALL_OW 72
12791: PUSH
12792: FOR_IN
12793: IFFALSE 12833
// begin if not GetBWeapon ( i ) then
12795: LD_VAR 0 8
12799: PPUSH
12800: CALL_OW 269
12804: NOT
12805: IFFALSE 12831
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12807: LD_VAR 0 8
12811: PPUSH
12812: LD_VAR 0 8
12816: PPUSH
12817: LD_VAR 0 2
12821: PPUSH
12822: CALL 14081 0 2
12826: PPUSH
12827: CALL_OW 431
// end ;
12831: GO 12792
12833: POP
12834: POP
// end ; for i = 1 to personel do
12835: LD_ADDR_VAR 0 8
12839: PUSH
12840: DOUBLE
12841: LD_INT 1
12843: DEC
12844: ST_TO_ADDR
12845: LD_VAR 0 6
12849: PUSH
12850: FOR_TO
12851: IFFALSE 13915
// begin if i > 4 then
12853: LD_VAR 0 8
12857: PUSH
12858: LD_INT 4
12860: GREATER
12861: IFFALSE 12865
// break ;
12863: GO 13915
// case i of 1 :
12865: LD_VAR 0 8
12869: PUSH
12870: LD_INT 1
12872: DOUBLE
12873: EQUAL
12874: IFTRUE 12878
12876: GO 12958
12878: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12879: LD_ADDR_VAR 0 12
12883: PUSH
12884: LD_VAR 0 18
12888: PPUSH
12889: LD_INT 22
12891: PUSH
12892: LD_VAR 0 16
12896: PUSH
12897: EMPTY
12898: LIST
12899: LIST
12900: PUSH
12901: LD_INT 58
12903: PUSH
12904: EMPTY
12905: LIST
12906: PUSH
12907: LD_INT 2
12909: PUSH
12910: LD_INT 30
12912: PUSH
12913: LD_INT 32
12915: PUSH
12916: EMPTY
12917: LIST
12918: LIST
12919: PUSH
12920: LD_INT 30
12922: PUSH
12923: LD_INT 4
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: PUSH
12930: LD_INT 30
12932: PUSH
12933: LD_INT 5
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: PUSH
12946: EMPTY
12947: LIST
12948: LIST
12949: LIST
12950: PPUSH
12951: CALL_OW 72
12955: ST_TO_ADDR
12956: GO 13180
12958: LD_INT 2
12960: DOUBLE
12961: EQUAL
12962: IFTRUE 12966
12964: GO 13028
12966: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12967: LD_ADDR_VAR 0 12
12971: PUSH
12972: LD_VAR 0 18
12976: PPUSH
12977: LD_INT 22
12979: PUSH
12980: LD_VAR 0 16
12984: PUSH
12985: EMPTY
12986: LIST
12987: LIST
12988: PUSH
12989: LD_INT 2
12991: PUSH
12992: LD_INT 30
12994: PUSH
12995: LD_INT 0
12997: PUSH
12998: EMPTY
12999: LIST
13000: LIST
13001: PUSH
13002: LD_INT 30
13004: PUSH
13005: LD_INT 1
13007: PUSH
13008: EMPTY
13009: LIST
13010: LIST
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: LIST
13016: PUSH
13017: EMPTY
13018: LIST
13019: LIST
13020: PPUSH
13021: CALL_OW 72
13025: ST_TO_ADDR
13026: GO 13180
13028: LD_INT 3
13030: DOUBLE
13031: EQUAL
13032: IFTRUE 13036
13034: GO 13098
13036: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
13037: LD_ADDR_VAR 0 12
13041: PUSH
13042: LD_VAR 0 18
13046: PPUSH
13047: LD_INT 22
13049: PUSH
13050: LD_VAR 0 16
13054: PUSH
13055: EMPTY
13056: LIST
13057: LIST
13058: PUSH
13059: LD_INT 2
13061: PUSH
13062: LD_INT 30
13064: PUSH
13065: LD_INT 2
13067: PUSH
13068: EMPTY
13069: LIST
13070: LIST
13071: PUSH
13072: LD_INT 30
13074: PUSH
13075: LD_INT 3
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: PUSH
13082: EMPTY
13083: LIST
13084: LIST
13085: LIST
13086: PUSH
13087: EMPTY
13088: LIST
13089: LIST
13090: PPUSH
13091: CALL_OW 72
13095: ST_TO_ADDR
13096: GO 13180
13098: LD_INT 4
13100: DOUBLE
13101: EQUAL
13102: IFTRUE 13106
13104: GO 13179
13106: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
13107: LD_ADDR_VAR 0 12
13111: PUSH
13112: LD_VAR 0 18
13116: PPUSH
13117: LD_INT 22
13119: PUSH
13120: LD_VAR 0 16
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: PUSH
13129: LD_INT 2
13131: PUSH
13132: LD_INT 30
13134: PUSH
13135: LD_INT 6
13137: PUSH
13138: EMPTY
13139: LIST
13140: LIST
13141: PUSH
13142: LD_INT 30
13144: PUSH
13145: LD_INT 7
13147: PUSH
13148: EMPTY
13149: LIST
13150: LIST
13151: PUSH
13152: LD_INT 30
13154: PUSH
13155: LD_INT 8
13157: PUSH
13158: EMPTY
13159: LIST
13160: LIST
13161: PUSH
13162: EMPTY
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: PUSH
13168: EMPTY
13169: LIST
13170: LIST
13171: PPUSH
13172: CALL_OW 72
13176: ST_TO_ADDR
13177: GO 13180
13179: POP
// if i = 1 then
13180: LD_VAR 0 8
13184: PUSH
13185: LD_INT 1
13187: EQUAL
13188: IFFALSE 13299
// begin tmp := [ ] ;
13190: LD_ADDR_VAR 0 19
13194: PUSH
13195: EMPTY
13196: ST_TO_ADDR
// for j in f do
13197: LD_ADDR_VAR 0 9
13201: PUSH
13202: LD_VAR 0 12
13206: PUSH
13207: FOR_IN
13208: IFFALSE 13281
// if GetBType ( j ) = b_bunker then
13210: LD_VAR 0 9
13214: PPUSH
13215: CALL_OW 266
13219: PUSH
13220: LD_INT 32
13222: EQUAL
13223: IFFALSE 13250
// tmp := Insert ( tmp , 1 , j ) else
13225: LD_ADDR_VAR 0 19
13229: PUSH
13230: LD_VAR 0 19
13234: PPUSH
13235: LD_INT 1
13237: PPUSH
13238: LD_VAR 0 9
13242: PPUSH
13243: CALL_OW 2
13247: ST_TO_ADDR
13248: GO 13279
// tmp := Insert ( tmp , tmp + 1 , j ) ;
13250: LD_ADDR_VAR 0 19
13254: PUSH
13255: LD_VAR 0 19
13259: PPUSH
13260: LD_VAR 0 19
13264: PUSH
13265: LD_INT 1
13267: PLUS
13268: PPUSH
13269: LD_VAR 0 9
13273: PPUSH
13274: CALL_OW 2
13278: ST_TO_ADDR
13279: GO 13207
13281: POP
13282: POP
// if tmp then
13283: LD_VAR 0 19
13287: IFFALSE 13299
// f := tmp ;
13289: LD_ADDR_VAR 0 12
13293: PUSH
13294: LD_VAR 0 19
13298: ST_TO_ADDR
// end ; x := personel [ i ] ;
13299: LD_ADDR_VAR 0 13
13303: PUSH
13304: LD_VAR 0 6
13308: PUSH
13309: LD_VAR 0 8
13313: ARRAY
13314: ST_TO_ADDR
// if x = - 1 then
13315: LD_VAR 0 13
13319: PUSH
13320: LD_INT 1
13322: NEG
13323: EQUAL
13324: IFFALSE 13533
// begin for j in f do
13326: LD_ADDR_VAR 0 9
13330: PUSH
13331: LD_VAR 0 12
13335: PUSH
13336: FOR_IN
13337: IFFALSE 13529
// repeat InitHc ;
13339: CALL_OW 19
// if GetBType ( j ) = b_barracks then
13343: LD_VAR 0 9
13347: PPUSH
13348: CALL_OW 266
13352: PUSH
13353: LD_INT 5
13355: EQUAL
13356: IFFALSE 13426
// begin if UnitsInside ( j ) < 3 then
13358: LD_VAR 0 9
13362: PPUSH
13363: CALL_OW 313
13367: PUSH
13368: LD_INT 3
13370: LESS
13371: IFFALSE 13407
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13373: LD_INT 0
13375: PPUSH
13376: LD_INT 5
13378: PUSH
13379: LD_INT 8
13381: PUSH
13382: LD_INT 9
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: LIST
13389: PUSH
13390: LD_VAR 0 17
13394: ARRAY
13395: PPUSH
13396: LD_VAR 0 4
13400: PPUSH
13401: CALL_OW 380
13405: GO 13424
// PrepareHuman ( false , i , skill ) ;
13407: LD_INT 0
13409: PPUSH
13410: LD_VAR 0 8
13414: PPUSH
13415: LD_VAR 0 4
13419: PPUSH
13420: CALL_OW 380
// end else
13424: GO 13443
// PrepareHuman ( false , i , skill ) ;
13426: LD_INT 0
13428: PPUSH
13429: LD_VAR 0 8
13433: PPUSH
13434: LD_VAR 0 4
13438: PPUSH
13439: CALL_OW 380
// un := CreateHuman ;
13443: LD_ADDR_VAR 0 14
13447: PUSH
13448: CALL_OW 44
13452: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13453: LD_ADDR_VAR 0 7
13457: PUSH
13458: LD_VAR 0 7
13462: PPUSH
13463: LD_INT 1
13465: PPUSH
13466: LD_VAR 0 14
13470: PPUSH
13471: CALL_OW 2
13475: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13476: LD_VAR 0 14
13480: PPUSH
13481: LD_VAR 0 9
13485: PPUSH
13486: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13490: LD_VAR 0 9
13494: PPUSH
13495: CALL_OW 313
13499: PUSH
13500: LD_INT 6
13502: EQUAL
13503: PUSH
13504: LD_VAR 0 9
13508: PPUSH
13509: CALL_OW 266
13513: PUSH
13514: LD_INT 32
13516: PUSH
13517: LD_INT 31
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: IN
13524: OR
13525: IFFALSE 13339
13527: GO 13336
13529: POP
13530: POP
// end else
13531: GO 13913
// for j = 1 to x do
13533: LD_ADDR_VAR 0 9
13537: PUSH
13538: DOUBLE
13539: LD_INT 1
13541: DEC
13542: ST_TO_ADDR
13543: LD_VAR 0 13
13547: PUSH
13548: FOR_TO
13549: IFFALSE 13911
// begin InitHc ;
13551: CALL_OW 19
// if not f then
13555: LD_VAR 0 12
13559: NOT
13560: IFFALSE 13649
// begin PrepareHuman ( false , i , skill ) ;
13562: LD_INT 0
13564: PPUSH
13565: LD_VAR 0 8
13569: PPUSH
13570: LD_VAR 0 4
13574: PPUSH
13575: CALL_OW 380
// un := CreateHuman ;
13579: LD_ADDR_VAR 0 14
13583: PUSH
13584: CALL_OW 44
13588: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13589: LD_ADDR_VAR 0 7
13593: PUSH
13594: LD_VAR 0 7
13598: PPUSH
13599: LD_INT 1
13601: PPUSH
13602: LD_VAR 0 14
13606: PPUSH
13607: CALL_OW 2
13611: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13612: LD_VAR 0 14
13616: PPUSH
13617: LD_VAR 0 1
13621: PPUSH
13622: CALL_OW 250
13626: PPUSH
13627: LD_VAR 0 1
13631: PPUSH
13632: CALL_OW 251
13636: PPUSH
13637: LD_INT 10
13639: PPUSH
13640: LD_INT 0
13642: PPUSH
13643: CALL_OW 50
// continue ;
13647: GO 13548
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13649: LD_VAR 0 12
13653: PUSH
13654: LD_INT 1
13656: ARRAY
13657: PPUSH
13658: CALL_OW 313
13662: PUSH
13663: LD_VAR 0 12
13667: PUSH
13668: LD_INT 1
13670: ARRAY
13671: PPUSH
13672: CALL_OW 266
13676: PUSH
13677: LD_INT 32
13679: PUSH
13680: LD_INT 31
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: IN
13687: AND
13688: PUSH
13689: LD_VAR 0 12
13693: PUSH
13694: LD_INT 1
13696: ARRAY
13697: PPUSH
13698: CALL_OW 313
13702: PUSH
13703: LD_INT 6
13705: EQUAL
13706: OR
13707: IFFALSE 13727
// f := Delete ( f , 1 ) ;
13709: LD_ADDR_VAR 0 12
13713: PUSH
13714: LD_VAR 0 12
13718: PPUSH
13719: LD_INT 1
13721: PPUSH
13722: CALL_OW 3
13726: ST_TO_ADDR
// if not f then
13727: LD_VAR 0 12
13731: NOT
13732: IFFALSE 13750
// begin x := x + 2 ;
13734: LD_ADDR_VAR 0 13
13738: PUSH
13739: LD_VAR 0 13
13743: PUSH
13744: LD_INT 2
13746: PLUS
13747: ST_TO_ADDR
// continue ;
13748: GO 13548
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13750: LD_VAR 0 12
13754: PUSH
13755: LD_INT 1
13757: ARRAY
13758: PPUSH
13759: CALL_OW 266
13763: PUSH
13764: LD_INT 5
13766: EQUAL
13767: IFFALSE 13841
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13769: LD_VAR 0 12
13773: PUSH
13774: LD_INT 1
13776: ARRAY
13777: PPUSH
13778: CALL_OW 313
13782: PUSH
13783: LD_INT 3
13785: LESS
13786: IFFALSE 13822
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13788: LD_INT 0
13790: PPUSH
13791: LD_INT 5
13793: PUSH
13794: LD_INT 8
13796: PUSH
13797: LD_INT 9
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: LIST
13804: PUSH
13805: LD_VAR 0 17
13809: ARRAY
13810: PPUSH
13811: LD_VAR 0 4
13815: PPUSH
13816: CALL_OW 380
13820: GO 13839
// PrepareHuman ( false , i , skill ) ;
13822: LD_INT 0
13824: PPUSH
13825: LD_VAR 0 8
13829: PPUSH
13830: LD_VAR 0 4
13834: PPUSH
13835: CALL_OW 380
// end else
13839: GO 13858
// PrepareHuman ( false , i , skill ) ;
13841: LD_INT 0
13843: PPUSH
13844: LD_VAR 0 8
13848: PPUSH
13849: LD_VAR 0 4
13853: PPUSH
13854: CALL_OW 380
// un := CreateHuman ;
13858: LD_ADDR_VAR 0 14
13862: PUSH
13863: CALL_OW 44
13867: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13868: LD_ADDR_VAR 0 7
13872: PUSH
13873: LD_VAR 0 7
13877: PPUSH
13878: LD_INT 1
13880: PPUSH
13881: LD_VAR 0 14
13885: PPUSH
13886: CALL_OW 2
13890: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13891: LD_VAR 0 14
13895: PPUSH
13896: LD_VAR 0 12
13900: PUSH
13901: LD_INT 1
13903: ARRAY
13904: PPUSH
13905: CALL_OW 52
// end ;
13909: GO 13548
13911: POP
13912: POP
// end ;
13913: GO 12850
13915: POP
13916: POP
// result := result ^ buildings ;
13917: LD_ADDR_VAR 0 7
13921: PUSH
13922: LD_VAR 0 7
13926: PUSH
13927: LD_VAR 0 18
13931: ADD
13932: ST_TO_ADDR
// end else
13933: GO 14076
// begin for i = 1 to personel do
13935: LD_ADDR_VAR 0 8
13939: PUSH
13940: DOUBLE
13941: LD_INT 1
13943: DEC
13944: ST_TO_ADDR
13945: LD_VAR 0 6
13949: PUSH
13950: FOR_TO
13951: IFFALSE 14074
// begin if i > 4 then
13953: LD_VAR 0 8
13957: PUSH
13958: LD_INT 4
13960: GREATER
13961: IFFALSE 13965
// break ;
13963: GO 14074
// x := personel [ i ] ;
13965: LD_ADDR_VAR 0 13
13969: PUSH
13970: LD_VAR 0 6
13974: PUSH
13975: LD_VAR 0 8
13979: ARRAY
13980: ST_TO_ADDR
// if x = - 1 then
13981: LD_VAR 0 13
13985: PUSH
13986: LD_INT 1
13988: NEG
13989: EQUAL
13990: IFFALSE 13994
// continue ;
13992: GO 13950
// PrepareHuman ( false , i , skill ) ;
13994: LD_INT 0
13996: PPUSH
13997: LD_VAR 0 8
14001: PPUSH
14002: LD_VAR 0 4
14006: PPUSH
14007: CALL_OW 380
// un := CreateHuman ;
14011: LD_ADDR_VAR 0 14
14015: PUSH
14016: CALL_OW 44
14020: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14021: LD_VAR 0 14
14025: PPUSH
14026: LD_VAR 0 1
14030: PPUSH
14031: CALL_OW 250
14035: PPUSH
14036: LD_VAR 0 1
14040: PPUSH
14041: CALL_OW 251
14045: PPUSH
14046: LD_INT 10
14048: PPUSH
14049: LD_INT 0
14051: PPUSH
14052: CALL_OW 50
// result := result ^ un ;
14056: LD_ADDR_VAR 0 7
14060: PUSH
14061: LD_VAR 0 7
14065: PUSH
14066: LD_VAR 0 14
14070: ADD
14071: ST_TO_ADDR
// end ;
14072: GO 13950
14074: POP
14075: POP
// end ; end ;
14076: LD_VAR 0 7
14080: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
14081: LD_INT 0
14083: PPUSH
14084: PPUSH
14085: PPUSH
14086: PPUSH
14087: PPUSH
14088: PPUSH
14089: PPUSH
14090: PPUSH
14091: PPUSH
14092: PPUSH
14093: PPUSH
14094: PPUSH
14095: PPUSH
14096: PPUSH
14097: PPUSH
14098: PPUSH
// result := false ;
14099: LD_ADDR_VAR 0 3
14103: PUSH
14104: LD_INT 0
14106: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
14107: LD_VAR 0 1
14111: NOT
14112: PUSH
14113: LD_VAR 0 1
14117: PPUSH
14118: CALL_OW 266
14122: PUSH
14123: LD_INT 32
14125: PUSH
14126: LD_INT 33
14128: PUSH
14129: EMPTY
14130: LIST
14131: LIST
14132: IN
14133: NOT
14134: OR
14135: IFFALSE 14139
// exit ;
14137: GO 15248
// nat := GetNation ( tower ) ;
14139: LD_ADDR_VAR 0 12
14143: PUSH
14144: LD_VAR 0 1
14148: PPUSH
14149: CALL_OW 248
14153: ST_TO_ADDR
// side := GetSide ( tower ) ;
14154: LD_ADDR_VAR 0 16
14158: PUSH
14159: LD_VAR 0 1
14163: PPUSH
14164: CALL_OW 255
14168: ST_TO_ADDR
// x := GetX ( tower ) ;
14169: LD_ADDR_VAR 0 10
14173: PUSH
14174: LD_VAR 0 1
14178: PPUSH
14179: CALL_OW 250
14183: ST_TO_ADDR
// y := GetY ( tower ) ;
14184: LD_ADDR_VAR 0 11
14188: PUSH
14189: LD_VAR 0 1
14193: PPUSH
14194: CALL_OW 251
14198: ST_TO_ADDR
// if not x or not y then
14199: LD_VAR 0 10
14203: NOT
14204: PUSH
14205: LD_VAR 0 11
14209: NOT
14210: OR
14211: IFFALSE 14215
// exit ;
14213: GO 15248
// weapon := 0 ;
14215: LD_ADDR_VAR 0 18
14219: PUSH
14220: LD_INT 0
14222: ST_TO_ADDR
// fac_list := [ ] ;
14223: LD_ADDR_VAR 0 17
14227: PUSH
14228: EMPTY
14229: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
14230: LD_ADDR_VAR 0 6
14234: PUSH
14235: LD_VAR 0 1
14239: PPUSH
14240: CALL_OW 274
14244: PPUSH
14245: LD_VAR 0 2
14249: PPUSH
14250: LD_INT 0
14252: PPUSH
14253: CALL 11819 0 3
14257: PPUSH
14258: LD_INT 30
14260: PUSH
14261: LD_INT 3
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PPUSH
14268: CALL_OW 72
14272: ST_TO_ADDR
// if not factories then
14273: LD_VAR 0 6
14277: NOT
14278: IFFALSE 14282
// exit ;
14280: GO 15248
// for i in factories do
14282: LD_ADDR_VAR 0 8
14286: PUSH
14287: LD_VAR 0 6
14291: PUSH
14292: FOR_IN
14293: IFFALSE 14318
// fac_list := fac_list union AvailableWeaponList ( i ) ;
14295: LD_ADDR_VAR 0 17
14299: PUSH
14300: LD_VAR 0 17
14304: PUSH
14305: LD_VAR 0 8
14309: PPUSH
14310: CALL_OW 478
14314: UNION
14315: ST_TO_ADDR
14316: GO 14292
14318: POP
14319: POP
// if not fac_list then
14320: LD_VAR 0 17
14324: NOT
14325: IFFALSE 14329
// exit ;
14327: GO 15248
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
14329: LD_ADDR_VAR 0 5
14333: PUSH
14334: LD_INT 4
14336: PUSH
14337: LD_INT 5
14339: PUSH
14340: LD_INT 9
14342: PUSH
14343: LD_INT 10
14345: PUSH
14346: LD_INT 6
14348: PUSH
14349: LD_INT 7
14351: PUSH
14352: LD_INT 11
14354: PUSH
14355: EMPTY
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: PUSH
14364: LD_INT 27
14366: PUSH
14367: LD_INT 28
14369: PUSH
14370: LD_INT 26
14372: PUSH
14373: LD_INT 30
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: PUSH
14382: LD_INT 43
14384: PUSH
14385: LD_INT 44
14387: PUSH
14388: LD_INT 46
14390: PUSH
14391: LD_INT 45
14393: PUSH
14394: LD_INT 47
14396: PUSH
14397: LD_INT 49
14399: PUSH
14400: EMPTY
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: PUSH
14408: EMPTY
14409: LIST
14410: LIST
14411: LIST
14412: PUSH
14413: LD_VAR 0 12
14417: ARRAY
14418: ST_TO_ADDR
// list := list isect fac_list ;
14419: LD_ADDR_VAR 0 5
14423: PUSH
14424: LD_VAR 0 5
14428: PUSH
14429: LD_VAR 0 17
14433: ISECT
14434: ST_TO_ADDR
// if not list then
14435: LD_VAR 0 5
14439: NOT
14440: IFFALSE 14444
// exit ;
14442: GO 15248
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
14444: LD_VAR 0 12
14448: PUSH
14449: LD_INT 3
14451: EQUAL
14452: PUSH
14453: LD_INT 49
14455: PUSH
14456: LD_VAR 0 5
14460: IN
14461: AND
14462: PUSH
14463: LD_INT 31
14465: PPUSH
14466: LD_VAR 0 16
14470: PPUSH
14471: CALL_OW 321
14475: PUSH
14476: LD_INT 2
14478: EQUAL
14479: AND
14480: IFFALSE 14540
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
14482: LD_INT 22
14484: PUSH
14485: LD_VAR 0 16
14489: PUSH
14490: EMPTY
14491: LIST
14492: LIST
14493: PUSH
14494: LD_INT 35
14496: PUSH
14497: LD_INT 49
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: PUSH
14504: LD_INT 91
14506: PUSH
14507: LD_VAR 0 1
14511: PUSH
14512: LD_INT 10
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: LIST
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: LIST
14524: PPUSH
14525: CALL_OW 69
14529: NOT
14530: IFFALSE 14540
// weapon := ru_time_lapser ;
14532: LD_ADDR_VAR 0 18
14536: PUSH
14537: LD_INT 49
14539: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
14540: LD_VAR 0 12
14544: PUSH
14545: LD_INT 1
14547: PUSH
14548: LD_INT 2
14550: PUSH
14551: EMPTY
14552: LIST
14553: LIST
14554: IN
14555: PUSH
14556: LD_INT 11
14558: PUSH
14559: LD_VAR 0 5
14563: IN
14564: PUSH
14565: LD_INT 30
14567: PUSH
14568: LD_VAR 0 5
14572: IN
14573: OR
14574: AND
14575: PUSH
14576: LD_INT 6
14578: PPUSH
14579: LD_VAR 0 16
14583: PPUSH
14584: CALL_OW 321
14588: PUSH
14589: LD_INT 2
14591: EQUAL
14592: AND
14593: IFFALSE 14758
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
14595: LD_INT 22
14597: PUSH
14598: LD_VAR 0 16
14602: PUSH
14603: EMPTY
14604: LIST
14605: LIST
14606: PUSH
14607: LD_INT 2
14609: PUSH
14610: LD_INT 35
14612: PUSH
14613: LD_INT 11
14615: PUSH
14616: EMPTY
14617: LIST
14618: LIST
14619: PUSH
14620: LD_INT 35
14622: PUSH
14623: LD_INT 30
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: PUSH
14630: EMPTY
14631: LIST
14632: LIST
14633: LIST
14634: PUSH
14635: LD_INT 91
14637: PUSH
14638: LD_VAR 0 1
14642: PUSH
14643: LD_INT 18
14645: PUSH
14646: EMPTY
14647: LIST
14648: LIST
14649: LIST
14650: PUSH
14651: EMPTY
14652: LIST
14653: LIST
14654: LIST
14655: PPUSH
14656: CALL_OW 69
14660: NOT
14661: PUSH
14662: LD_INT 22
14664: PUSH
14665: LD_VAR 0 16
14669: PUSH
14670: EMPTY
14671: LIST
14672: LIST
14673: PUSH
14674: LD_INT 2
14676: PUSH
14677: LD_INT 30
14679: PUSH
14680: LD_INT 32
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: PUSH
14687: LD_INT 30
14689: PUSH
14690: LD_INT 33
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: PUSH
14697: EMPTY
14698: LIST
14699: LIST
14700: LIST
14701: PUSH
14702: LD_INT 91
14704: PUSH
14705: LD_VAR 0 1
14709: PUSH
14710: LD_INT 12
14712: PUSH
14713: EMPTY
14714: LIST
14715: LIST
14716: LIST
14717: PUSH
14718: EMPTY
14719: LIST
14720: LIST
14721: LIST
14722: PUSH
14723: EMPTY
14724: LIST
14725: PPUSH
14726: CALL_OW 69
14730: PUSH
14731: LD_INT 2
14733: GREATER
14734: AND
14735: IFFALSE 14758
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14737: LD_ADDR_VAR 0 18
14741: PUSH
14742: LD_INT 11
14744: PUSH
14745: LD_INT 30
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: PUSH
14752: LD_VAR 0 12
14756: ARRAY
14757: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14758: LD_VAR 0 18
14762: NOT
14763: PUSH
14764: LD_INT 40
14766: PPUSH
14767: LD_VAR 0 16
14771: PPUSH
14772: CALL_OW 321
14776: PUSH
14777: LD_INT 2
14779: EQUAL
14780: AND
14781: PUSH
14782: LD_INT 7
14784: PUSH
14785: LD_VAR 0 5
14789: IN
14790: PUSH
14791: LD_INT 28
14793: PUSH
14794: LD_VAR 0 5
14798: IN
14799: OR
14800: PUSH
14801: LD_INT 45
14803: PUSH
14804: LD_VAR 0 5
14808: IN
14809: OR
14810: AND
14811: IFFALSE 15065
// begin hex := GetHexInfo ( x , y ) ;
14813: LD_ADDR_VAR 0 4
14817: PUSH
14818: LD_VAR 0 10
14822: PPUSH
14823: LD_VAR 0 11
14827: PPUSH
14828: CALL_OW 546
14832: ST_TO_ADDR
// if hex [ 1 ] then
14833: LD_VAR 0 4
14837: PUSH
14838: LD_INT 1
14840: ARRAY
14841: IFFALSE 14845
// exit ;
14843: GO 15248
// height := hex [ 2 ] ;
14845: LD_ADDR_VAR 0 15
14849: PUSH
14850: LD_VAR 0 4
14854: PUSH
14855: LD_INT 2
14857: ARRAY
14858: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14859: LD_ADDR_VAR 0 14
14863: PUSH
14864: LD_INT 0
14866: PUSH
14867: LD_INT 2
14869: PUSH
14870: LD_INT 3
14872: PUSH
14873: LD_INT 5
14875: PUSH
14876: EMPTY
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: ST_TO_ADDR
// for i in tmp do
14882: LD_ADDR_VAR 0 8
14886: PUSH
14887: LD_VAR 0 14
14891: PUSH
14892: FOR_IN
14893: IFFALSE 15063
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14895: LD_ADDR_VAR 0 9
14899: PUSH
14900: LD_VAR 0 10
14904: PPUSH
14905: LD_VAR 0 8
14909: PPUSH
14910: LD_INT 5
14912: PPUSH
14913: CALL_OW 272
14917: PUSH
14918: LD_VAR 0 11
14922: PPUSH
14923: LD_VAR 0 8
14927: PPUSH
14928: LD_INT 5
14930: PPUSH
14931: CALL_OW 273
14935: PUSH
14936: EMPTY
14937: LIST
14938: LIST
14939: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14940: LD_VAR 0 9
14944: PUSH
14945: LD_INT 1
14947: ARRAY
14948: PPUSH
14949: LD_VAR 0 9
14953: PUSH
14954: LD_INT 2
14956: ARRAY
14957: PPUSH
14958: CALL_OW 488
14962: IFFALSE 15061
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14964: LD_ADDR_VAR 0 4
14968: PUSH
14969: LD_VAR 0 9
14973: PUSH
14974: LD_INT 1
14976: ARRAY
14977: PPUSH
14978: LD_VAR 0 9
14982: PUSH
14983: LD_INT 2
14985: ARRAY
14986: PPUSH
14987: CALL_OW 546
14991: ST_TO_ADDR
// if hex [ 1 ] then
14992: LD_VAR 0 4
14996: PUSH
14997: LD_INT 1
14999: ARRAY
15000: IFFALSE 15004
// continue ;
15002: GO 14892
// h := hex [ 2 ] ;
15004: LD_ADDR_VAR 0 13
15008: PUSH
15009: LD_VAR 0 4
15013: PUSH
15014: LD_INT 2
15016: ARRAY
15017: ST_TO_ADDR
// if h + 7 < height then
15018: LD_VAR 0 13
15022: PUSH
15023: LD_INT 7
15025: PLUS
15026: PUSH
15027: LD_VAR 0 15
15031: LESS
15032: IFFALSE 15061
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
15034: LD_ADDR_VAR 0 18
15038: PUSH
15039: LD_INT 7
15041: PUSH
15042: LD_INT 28
15044: PUSH
15045: LD_INT 45
15047: PUSH
15048: EMPTY
15049: LIST
15050: LIST
15051: LIST
15052: PUSH
15053: LD_VAR 0 12
15057: ARRAY
15058: ST_TO_ADDR
// break ;
15059: GO 15063
// end ; end ; end ;
15061: GO 14892
15063: POP
15064: POP
// end ; if not weapon then
15065: LD_VAR 0 18
15069: NOT
15070: IFFALSE 15130
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
15072: LD_ADDR_VAR 0 5
15076: PUSH
15077: LD_VAR 0 5
15081: PUSH
15082: LD_INT 11
15084: PUSH
15085: LD_INT 30
15087: PUSH
15088: LD_INT 49
15090: PUSH
15091: EMPTY
15092: LIST
15093: LIST
15094: LIST
15095: DIFF
15096: ST_TO_ADDR
// if not list then
15097: LD_VAR 0 5
15101: NOT
15102: IFFALSE 15106
// exit ;
15104: GO 15248
// weapon := list [ rand ( 1 , list ) ] ;
15106: LD_ADDR_VAR 0 18
15110: PUSH
15111: LD_VAR 0 5
15115: PUSH
15116: LD_INT 1
15118: PPUSH
15119: LD_VAR 0 5
15123: PPUSH
15124: CALL_OW 12
15128: ARRAY
15129: ST_TO_ADDR
// end ; if weapon then
15130: LD_VAR 0 18
15134: IFFALSE 15248
// begin tmp := CostOfWeapon ( weapon ) ;
15136: LD_ADDR_VAR 0 14
15140: PUSH
15141: LD_VAR 0 18
15145: PPUSH
15146: CALL_OW 451
15150: ST_TO_ADDR
// j := GetBase ( tower ) ;
15151: LD_ADDR_VAR 0 9
15155: PUSH
15156: LD_VAR 0 1
15160: PPUSH
15161: CALL_OW 274
15165: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
15166: LD_VAR 0 9
15170: PPUSH
15171: LD_INT 1
15173: PPUSH
15174: CALL_OW 275
15178: PUSH
15179: LD_VAR 0 14
15183: PUSH
15184: LD_INT 1
15186: ARRAY
15187: GREATEREQUAL
15188: PUSH
15189: LD_VAR 0 9
15193: PPUSH
15194: LD_INT 2
15196: PPUSH
15197: CALL_OW 275
15201: PUSH
15202: LD_VAR 0 14
15206: PUSH
15207: LD_INT 2
15209: ARRAY
15210: GREATEREQUAL
15211: AND
15212: PUSH
15213: LD_VAR 0 9
15217: PPUSH
15218: LD_INT 3
15220: PPUSH
15221: CALL_OW 275
15225: PUSH
15226: LD_VAR 0 14
15230: PUSH
15231: LD_INT 3
15233: ARRAY
15234: GREATEREQUAL
15235: AND
15236: IFFALSE 15248
// result := weapon ;
15238: LD_ADDR_VAR 0 3
15242: PUSH
15243: LD_VAR 0 18
15247: ST_TO_ADDR
// end ; end ;
15248: LD_VAR 0 3
15252: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
15253: LD_INT 0
15255: PPUSH
15256: PPUSH
// result := true ;
15257: LD_ADDR_VAR 0 3
15261: PUSH
15262: LD_INT 1
15264: ST_TO_ADDR
// if array1 = array2 then
15265: LD_VAR 0 1
15269: PUSH
15270: LD_VAR 0 2
15274: EQUAL
15275: IFFALSE 15335
// begin for i = 1 to array1 do
15277: LD_ADDR_VAR 0 4
15281: PUSH
15282: DOUBLE
15283: LD_INT 1
15285: DEC
15286: ST_TO_ADDR
15287: LD_VAR 0 1
15291: PUSH
15292: FOR_TO
15293: IFFALSE 15331
// if array1 [ i ] <> array2 [ i ] then
15295: LD_VAR 0 1
15299: PUSH
15300: LD_VAR 0 4
15304: ARRAY
15305: PUSH
15306: LD_VAR 0 2
15310: PUSH
15311: LD_VAR 0 4
15315: ARRAY
15316: NONEQUAL
15317: IFFALSE 15329
// begin result := false ;
15319: LD_ADDR_VAR 0 3
15323: PUSH
15324: LD_INT 0
15326: ST_TO_ADDR
// break ;
15327: GO 15331
// end ;
15329: GO 15292
15331: POP
15332: POP
// end else
15333: GO 15343
// result := false ;
15335: LD_ADDR_VAR 0 3
15339: PUSH
15340: LD_INT 0
15342: ST_TO_ADDR
// end ;
15343: LD_VAR 0 3
15347: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
15348: LD_INT 0
15350: PPUSH
15351: PPUSH
// if not array1 or not array2 then
15352: LD_VAR 0 1
15356: NOT
15357: PUSH
15358: LD_VAR 0 2
15362: NOT
15363: OR
15364: IFFALSE 15368
// exit ;
15366: GO 15432
// result := true ;
15368: LD_ADDR_VAR 0 3
15372: PUSH
15373: LD_INT 1
15375: ST_TO_ADDR
// for i = 1 to array1 do
15376: LD_ADDR_VAR 0 4
15380: PUSH
15381: DOUBLE
15382: LD_INT 1
15384: DEC
15385: ST_TO_ADDR
15386: LD_VAR 0 1
15390: PUSH
15391: FOR_TO
15392: IFFALSE 15430
// if array1 [ i ] <> array2 [ i ] then
15394: LD_VAR 0 1
15398: PUSH
15399: LD_VAR 0 4
15403: ARRAY
15404: PUSH
15405: LD_VAR 0 2
15409: PUSH
15410: LD_VAR 0 4
15414: ARRAY
15415: NONEQUAL
15416: IFFALSE 15428
// begin result := false ;
15418: LD_ADDR_VAR 0 3
15422: PUSH
15423: LD_INT 0
15425: ST_TO_ADDR
// break ;
15426: GO 15430
// end ;
15428: GO 15391
15430: POP
15431: POP
// end ;
15432: LD_VAR 0 3
15436: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
15437: LD_INT 0
15439: PPUSH
15440: PPUSH
15441: PPUSH
// pom := GetBase ( fac ) ;
15442: LD_ADDR_VAR 0 5
15446: PUSH
15447: LD_VAR 0 1
15451: PPUSH
15452: CALL_OW 274
15456: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
15457: LD_ADDR_VAR 0 4
15461: PUSH
15462: LD_VAR 0 2
15466: PUSH
15467: LD_INT 1
15469: ARRAY
15470: PPUSH
15471: LD_VAR 0 2
15475: PUSH
15476: LD_INT 2
15478: ARRAY
15479: PPUSH
15480: LD_VAR 0 2
15484: PUSH
15485: LD_INT 3
15487: ARRAY
15488: PPUSH
15489: LD_VAR 0 2
15493: PUSH
15494: LD_INT 4
15496: ARRAY
15497: PPUSH
15498: CALL_OW 449
15502: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15503: LD_ADDR_VAR 0 3
15507: PUSH
15508: LD_VAR 0 5
15512: PPUSH
15513: LD_INT 1
15515: PPUSH
15516: CALL_OW 275
15520: PUSH
15521: LD_VAR 0 4
15525: PUSH
15526: LD_INT 1
15528: ARRAY
15529: GREATEREQUAL
15530: PUSH
15531: LD_VAR 0 5
15535: PPUSH
15536: LD_INT 2
15538: PPUSH
15539: CALL_OW 275
15543: PUSH
15544: LD_VAR 0 4
15548: PUSH
15549: LD_INT 2
15551: ARRAY
15552: GREATEREQUAL
15553: AND
15554: PUSH
15555: LD_VAR 0 5
15559: PPUSH
15560: LD_INT 3
15562: PPUSH
15563: CALL_OW 275
15567: PUSH
15568: LD_VAR 0 4
15572: PUSH
15573: LD_INT 3
15575: ARRAY
15576: GREATEREQUAL
15577: AND
15578: ST_TO_ADDR
// end ;
15579: LD_VAR 0 3
15583: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
15584: LD_INT 0
15586: PPUSH
15587: PPUSH
15588: PPUSH
15589: PPUSH
// pom := GetBase ( building ) ;
15590: LD_ADDR_VAR 0 3
15594: PUSH
15595: LD_VAR 0 1
15599: PPUSH
15600: CALL_OW 274
15604: ST_TO_ADDR
// if not pom then
15605: LD_VAR 0 3
15609: NOT
15610: IFFALSE 15614
// exit ;
15612: GO 15784
// btype := GetBType ( building ) ;
15614: LD_ADDR_VAR 0 5
15618: PUSH
15619: LD_VAR 0 1
15623: PPUSH
15624: CALL_OW 266
15628: ST_TO_ADDR
// if btype = b_armoury then
15629: LD_VAR 0 5
15633: PUSH
15634: LD_INT 4
15636: EQUAL
15637: IFFALSE 15647
// btype := b_barracks ;
15639: LD_ADDR_VAR 0 5
15643: PUSH
15644: LD_INT 5
15646: ST_TO_ADDR
// if btype = b_depot then
15647: LD_VAR 0 5
15651: PUSH
15652: LD_INT 0
15654: EQUAL
15655: IFFALSE 15665
// btype := b_warehouse ;
15657: LD_ADDR_VAR 0 5
15661: PUSH
15662: LD_INT 1
15664: ST_TO_ADDR
// if btype = b_workshop then
15665: LD_VAR 0 5
15669: PUSH
15670: LD_INT 2
15672: EQUAL
15673: IFFALSE 15683
// btype := b_factory ;
15675: LD_ADDR_VAR 0 5
15679: PUSH
15680: LD_INT 3
15682: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15683: LD_ADDR_VAR 0 4
15687: PUSH
15688: LD_VAR 0 5
15692: PPUSH
15693: LD_VAR 0 1
15697: PPUSH
15698: CALL_OW 248
15702: PPUSH
15703: CALL_OW 450
15707: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15708: LD_ADDR_VAR 0 2
15712: PUSH
15713: LD_VAR 0 3
15717: PPUSH
15718: LD_INT 1
15720: PPUSH
15721: CALL_OW 275
15725: PUSH
15726: LD_VAR 0 4
15730: PUSH
15731: LD_INT 1
15733: ARRAY
15734: GREATEREQUAL
15735: PUSH
15736: LD_VAR 0 3
15740: PPUSH
15741: LD_INT 2
15743: PPUSH
15744: CALL_OW 275
15748: PUSH
15749: LD_VAR 0 4
15753: PUSH
15754: LD_INT 2
15756: ARRAY
15757: GREATEREQUAL
15758: AND
15759: PUSH
15760: LD_VAR 0 3
15764: PPUSH
15765: LD_INT 3
15767: PPUSH
15768: CALL_OW 275
15772: PUSH
15773: LD_VAR 0 4
15777: PUSH
15778: LD_INT 3
15780: ARRAY
15781: GREATEREQUAL
15782: AND
15783: ST_TO_ADDR
// end ;
15784: LD_VAR 0 2
15788: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15789: LD_INT 0
15791: PPUSH
15792: PPUSH
15793: PPUSH
// pom := GetBase ( building ) ;
15794: LD_ADDR_VAR 0 4
15798: PUSH
15799: LD_VAR 0 1
15803: PPUSH
15804: CALL_OW 274
15808: ST_TO_ADDR
// if not pom then
15809: LD_VAR 0 4
15813: NOT
15814: IFFALSE 15818
// exit ;
15816: GO 15919
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15818: LD_ADDR_VAR 0 5
15822: PUSH
15823: LD_VAR 0 2
15827: PPUSH
15828: LD_VAR 0 1
15832: PPUSH
15833: CALL_OW 248
15837: PPUSH
15838: CALL_OW 450
15842: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15843: LD_ADDR_VAR 0 3
15847: PUSH
15848: LD_VAR 0 4
15852: PPUSH
15853: LD_INT 1
15855: PPUSH
15856: CALL_OW 275
15860: PUSH
15861: LD_VAR 0 5
15865: PUSH
15866: LD_INT 1
15868: ARRAY
15869: GREATEREQUAL
15870: PUSH
15871: LD_VAR 0 4
15875: PPUSH
15876: LD_INT 2
15878: PPUSH
15879: CALL_OW 275
15883: PUSH
15884: LD_VAR 0 5
15888: PUSH
15889: LD_INT 2
15891: ARRAY
15892: GREATEREQUAL
15893: AND
15894: PUSH
15895: LD_VAR 0 4
15899: PPUSH
15900: LD_INT 3
15902: PPUSH
15903: CALL_OW 275
15907: PUSH
15908: LD_VAR 0 5
15912: PUSH
15913: LD_INT 3
15915: ARRAY
15916: GREATEREQUAL
15917: AND
15918: ST_TO_ADDR
// end ;
15919: LD_VAR 0 3
15923: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15924: LD_INT 0
15926: PPUSH
15927: PPUSH
15928: PPUSH
15929: PPUSH
15930: PPUSH
15931: PPUSH
15932: PPUSH
15933: PPUSH
15934: PPUSH
15935: PPUSH
15936: PPUSH
// result := false ;
15937: LD_ADDR_VAR 0 8
15941: PUSH
15942: LD_INT 0
15944: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15945: LD_VAR 0 5
15949: NOT
15950: PUSH
15951: LD_VAR 0 1
15955: NOT
15956: OR
15957: PUSH
15958: LD_VAR 0 2
15962: NOT
15963: OR
15964: PUSH
15965: LD_VAR 0 3
15969: NOT
15970: OR
15971: IFFALSE 15975
// exit ;
15973: GO 16789
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15975: LD_ADDR_VAR 0 14
15979: PUSH
15980: LD_VAR 0 1
15984: PPUSH
15985: LD_VAR 0 2
15989: PPUSH
15990: LD_VAR 0 3
15994: PPUSH
15995: LD_VAR 0 4
15999: PPUSH
16000: LD_VAR 0 5
16004: PUSH
16005: LD_INT 1
16007: ARRAY
16008: PPUSH
16009: CALL_OW 248
16013: PPUSH
16014: LD_INT 0
16016: PPUSH
16017: CALL 18042 0 6
16021: ST_TO_ADDR
// if not hexes then
16022: LD_VAR 0 14
16026: NOT
16027: IFFALSE 16031
// exit ;
16029: GO 16789
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16031: LD_ADDR_VAR 0 17
16035: PUSH
16036: LD_VAR 0 5
16040: PPUSH
16041: LD_INT 22
16043: PUSH
16044: LD_VAR 0 13
16048: PPUSH
16049: CALL_OW 255
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: PUSH
16058: LD_INT 2
16060: PUSH
16061: LD_INT 30
16063: PUSH
16064: LD_INT 0
16066: PUSH
16067: EMPTY
16068: LIST
16069: LIST
16070: PUSH
16071: LD_INT 30
16073: PUSH
16074: LD_INT 1
16076: PUSH
16077: EMPTY
16078: LIST
16079: LIST
16080: PUSH
16081: EMPTY
16082: LIST
16083: LIST
16084: LIST
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: PPUSH
16090: CALL_OW 72
16094: ST_TO_ADDR
// for i = 1 to hexes do
16095: LD_ADDR_VAR 0 9
16099: PUSH
16100: DOUBLE
16101: LD_INT 1
16103: DEC
16104: ST_TO_ADDR
16105: LD_VAR 0 14
16109: PUSH
16110: FOR_TO
16111: IFFALSE 16787
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16113: LD_ADDR_VAR 0 13
16117: PUSH
16118: LD_VAR 0 14
16122: PUSH
16123: LD_VAR 0 9
16127: ARRAY
16128: PUSH
16129: LD_INT 1
16131: ARRAY
16132: PPUSH
16133: LD_VAR 0 14
16137: PUSH
16138: LD_VAR 0 9
16142: ARRAY
16143: PUSH
16144: LD_INT 2
16146: ARRAY
16147: PPUSH
16148: CALL_OW 428
16152: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
16153: LD_VAR 0 14
16157: PUSH
16158: LD_VAR 0 9
16162: ARRAY
16163: PUSH
16164: LD_INT 1
16166: ARRAY
16167: PPUSH
16168: LD_VAR 0 14
16172: PUSH
16173: LD_VAR 0 9
16177: ARRAY
16178: PUSH
16179: LD_INT 2
16181: ARRAY
16182: PPUSH
16183: CALL_OW 351
16187: PUSH
16188: LD_VAR 0 14
16192: PUSH
16193: LD_VAR 0 9
16197: ARRAY
16198: PUSH
16199: LD_INT 1
16201: ARRAY
16202: PPUSH
16203: LD_VAR 0 14
16207: PUSH
16208: LD_VAR 0 9
16212: ARRAY
16213: PUSH
16214: LD_INT 2
16216: ARRAY
16217: PPUSH
16218: CALL_OW 488
16222: NOT
16223: OR
16224: PUSH
16225: LD_VAR 0 13
16229: PPUSH
16230: CALL_OW 247
16234: PUSH
16235: LD_INT 3
16237: EQUAL
16238: OR
16239: IFFALSE 16245
// exit ;
16241: POP
16242: POP
16243: GO 16789
// if not tmp then
16245: LD_VAR 0 13
16249: NOT
16250: IFFALSE 16254
// continue ;
16252: GO 16110
// result := true ;
16254: LD_ADDR_VAR 0 8
16258: PUSH
16259: LD_INT 1
16261: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
16262: LD_VAR 0 6
16266: PUSH
16267: LD_VAR 0 13
16271: PPUSH
16272: CALL_OW 247
16276: PUSH
16277: LD_INT 2
16279: EQUAL
16280: AND
16281: PUSH
16282: LD_VAR 0 13
16286: PPUSH
16287: CALL_OW 263
16291: PUSH
16292: LD_INT 1
16294: EQUAL
16295: AND
16296: IFFALSE 16460
// begin if IsDrivenBy ( tmp ) then
16298: LD_VAR 0 13
16302: PPUSH
16303: CALL_OW 311
16307: IFFALSE 16311
// continue ;
16309: GO 16110
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
16311: LD_VAR 0 6
16315: PPUSH
16316: LD_INT 3
16318: PUSH
16319: LD_INT 60
16321: PUSH
16322: EMPTY
16323: LIST
16324: PUSH
16325: EMPTY
16326: LIST
16327: LIST
16328: PUSH
16329: LD_INT 3
16331: PUSH
16332: LD_INT 55
16334: PUSH
16335: EMPTY
16336: LIST
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: PPUSH
16346: CALL_OW 72
16350: IFFALSE 16458
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
16352: LD_ADDR_VAR 0 18
16356: PUSH
16357: LD_VAR 0 6
16361: PPUSH
16362: LD_INT 3
16364: PUSH
16365: LD_INT 60
16367: PUSH
16368: EMPTY
16369: LIST
16370: PUSH
16371: EMPTY
16372: LIST
16373: LIST
16374: PUSH
16375: LD_INT 3
16377: PUSH
16378: LD_INT 55
16380: PUSH
16381: EMPTY
16382: LIST
16383: PUSH
16384: EMPTY
16385: LIST
16386: LIST
16387: PUSH
16388: EMPTY
16389: LIST
16390: LIST
16391: PPUSH
16392: CALL_OW 72
16396: PUSH
16397: LD_INT 1
16399: ARRAY
16400: ST_TO_ADDR
// if IsInUnit ( driver ) then
16401: LD_VAR 0 18
16405: PPUSH
16406: CALL_OW 310
16410: IFFALSE 16421
// ComExit ( driver ) ;
16412: LD_VAR 0 18
16416: PPUSH
16417: CALL 41843 0 1
// AddComEnterUnit ( driver , tmp ) ;
16421: LD_VAR 0 18
16425: PPUSH
16426: LD_VAR 0 13
16430: PPUSH
16431: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
16435: LD_VAR 0 18
16439: PPUSH
16440: LD_VAR 0 7
16444: PPUSH
16445: CALL_OW 173
// AddComExitVehicle ( driver ) ;
16449: LD_VAR 0 18
16453: PPUSH
16454: CALL_OW 181
// end ; continue ;
16458: GO 16110
// end ; if not cleaners or not tmp in cleaners then
16460: LD_VAR 0 6
16464: NOT
16465: PUSH
16466: LD_VAR 0 13
16470: PUSH
16471: LD_VAR 0 6
16475: IN
16476: NOT
16477: OR
16478: IFFALSE 16785
// begin if dep then
16480: LD_VAR 0 17
16484: IFFALSE 16620
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
16486: LD_ADDR_VAR 0 16
16490: PUSH
16491: LD_VAR 0 17
16495: PUSH
16496: LD_INT 1
16498: ARRAY
16499: PPUSH
16500: CALL_OW 250
16504: PPUSH
16505: LD_VAR 0 17
16509: PUSH
16510: LD_INT 1
16512: ARRAY
16513: PPUSH
16514: CALL_OW 254
16518: PPUSH
16519: LD_INT 5
16521: PPUSH
16522: CALL_OW 272
16526: PUSH
16527: LD_VAR 0 17
16531: PUSH
16532: LD_INT 1
16534: ARRAY
16535: PPUSH
16536: CALL_OW 251
16540: PPUSH
16541: LD_VAR 0 17
16545: PUSH
16546: LD_INT 1
16548: ARRAY
16549: PPUSH
16550: CALL_OW 254
16554: PPUSH
16555: LD_INT 5
16557: PPUSH
16558: CALL_OW 273
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
16567: LD_VAR 0 16
16571: PUSH
16572: LD_INT 1
16574: ARRAY
16575: PPUSH
16576: LD_VAR 0 16
16580: PUSH
16581: LD_INT 2
16583: ARRAY
16584: PPUSH
16585: CALL_OW 488
16589: IFFALSE 16620
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16591: LD_VAR 0 13
16595: PPUSH
16596: LD_VAR 0 16
16600: PUSH
16601: LD_INT 1
16603: ARRAY
16604: PPUSH
16605: LD_VAR 0 16
16609: PUSH
16610: LD_INT 2
16612: ARRAY
16613: PPUSH
16614: CALL_OW 111
// continue ;
16618: GO 16110
// end ; end ; r := GetDir ( tmp ) ;
16620: LD_ADDR_VAR 0 15
16624: PUSH
16625: LD_VAR 0 13
16629: PPUSH
16630: CALL_OW 254
16634: ST_TO_ADDR
// if r = 5 then
16635: LD_VAR 0 15
16639: PUSH
16640: LD_INT 5
16642: EQUAL
16643: IFFALSE 16653
// r := 0 ;
16645: LD_ADDR_VAR 0 15
16649: PUSH
16650: LD_INT 0
16652: ST_TO_ADDR
// for j = r to 5 do
16653: LD_ADDR_VAR 0 10
16657: PUSH
16658: DOUBLE
16659: LD_VAR 0 15
16663: DEC
16664: ST_TO_ADDR
16665: LD_INT 5
16667: PUSH
16668: FOR_TO
16669: IFFALSE 16783
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16671: LD_ADDR_VAR 0 11
16675: PUSH
16676: LD_VAR 0 13
16680: PPUSH
16681: CALL_OW 250
16685: PPUSH
16686: LD_VAR 0 10
16690: PPUSH
16691: LD_INT 2
16693: PPUSH
16694: CALL_OW 272
16698: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16699: LD_ADDR_VAR 0 12
16703: PUSH
16704: LD_VAR 0 13
16708: PPUSH
16709: CALL_OW 251
16713: PPUSH
16714: LD_VAR 0 10
16718: PPUSH
16719: LD_INT 2
16721: PPUSH
16722: CALL_OW 273
16726: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16727: LD_VAR 0 11
16731: PPUSH
16732: LD_VAR 0 12
16736: PPUSH
16737: CALL_OW 488
16741: PUSH
16742: LD_VAR 0 11
16746: PPUSH
16747: LD_VAR 0 12
16751: PPUSH
16752: CALL_OW 428
16756: NOT
16757: AND
16758: IFFALSE 16781
// begin ComMoveXY ( tmp , _x , _y ) ;
16760: LD_VAR 0 13
16764: PPUSH
16765: LD_VAR 0 11
16769: PPUSH
16770: LD_VAR 0 12
16774: PPUSH
16775: CALL_OW 111
// break ;
16779: GO 16783
// end ; end ;
16781: GO 16668
16783: POP
16784: POP
// end ; end ;
16785: GO 16110
16787: POP
16788: POP
// end ;
16789: LD_VAR 0 8
16793: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16794: LD_INT 0
16796: PPUSH
// result := true ;
16797: LD_ADDR_VAR 0 3
16801: PUSH
16802: LD_INT 1
16804: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16805: LD_VAR 0 2
16809: PUSH
16810: LD_INT 24
16812: DOUBLE
16813: EQUAL
16814: IFTRUE 16824
16816: LD_INT 33
16818: DOUBLE
16819: EQUAL
16820: IFTRUE 16824
16822: GO 16849
16824: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16825: LD_ADDR_VAR 0 3
16829: PUSH
16830: LD_INT 32
16832: PPUSH
16833: LD_VAR 0 1
16837: PPUSH
16838: CALL_OW 321
16842: PUSH
16843: LD_INT 2
16845: EQUAL
16846: ST_TO_ADDR
16847: GO 17165
16849: LD_INT 20
16851: DOUBLE
16852: EQUAL
16853: IFTRUE 16857
16855: GO 16882
16857: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16858: LD_ADDR_VAR 0 3
16862: PUSH
16863: LD_INT 6
16865: PPUSH
16866: LD_VAR 0 1
16870: PPUSH
16871: CALL_OW 321
16875: PUSH
16876: LD_INT 2
16878: EQUAL
16879: ST_TO_ADDR
16880: GO 17165
16882: LD_INT 22
16884: DOUBLE
16885: EQUAL
16886: IFTRUE 16896
16888: LD_INT 36
16890: DOUBLE
16891: EQUAL
16892: IFTRUE 16896
16894: GO 16921
16896: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16897: LD_ADDR_VAR 0 3
16901: PUSH
16902: LD_INT 15
16904: PPUSH
16905: LD_VAR 0 1
16909: PPUSH
16910: CALL_OW 321
16914: PUSH
16915: LD_INT 2
16917: EQUAL
16918: ST_TO_ADDR
16919: GO 17165
16921: LD_INT 30
16923: DOUBLE
16924: EQUAL
16925: IFTRUE 16929
16927: GO 16954
16929: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16930: LD_ADDR_VAR 0 3
16934: PUSH
16935: LD_INT 20
16937: PPUSH
16938: LD_VAR 0 1
16942: PPUSH
16943: CALL_OW 321
16947: PUSH
16948: LD_INT 2
16950: EQUAL
16951: ST_TO_ADDR
16952: GO 17165
16954: LD_INT 28
16956: DOUBLE
16957: EQUAL
16958: IFTRUE 16968
16960: LD_INT 21
16962: DOUBLE
16963: EQUAL
16964: IFTRUE 16968
16966: GO 16993
16968: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16969: LD_ADDR_VAR 0 3
16973: PUSH
16974: LD_INT 21
16976: PPUSH
16977: LD_VAR 0 1
16981: PPUSH
16982: CALL_OW 321
16986: PUSH
16987: LD_INT 2
16989: EQUAL
16990: ST_TO_ADDR
16991: GO 17165
16993: LD_INT 16
16995: DOUBLE
16996: EQUAL
16997: IFTRUE 17001
16999: GO 17026
17001: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
17002: LD_ADDR_VAR 0 3
17006: PUSH
17007: LD_INT 84
17009: PPUSH
17010: LD_VAR 0 1
17014: PPUSH
17015: CALL_OW 321
17019: PUSH
17020: LD_INT 2
17022: EQUAL
17023: ST_TO_ADDR
17024: GO 17165
17026: LD_INT 19
17028: DOUBLE
17029: EQUAL
17030: IFTRUE 17040
17032: LD_INT 23
17034: DOUBLE
17035: EQUAL
17036: IFTRUE 17040
17038: GO 17065
17040: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
17041: LD_ADDR_VAR 0 3
17045: PUSH
17046: LD_INT 83
17048: PPUSH
17049: LD_VAR 0 1
17053: PPUSH
17054: CALL_OW 321
17058: PUSH
17059: LD_INT 2
17061: EQUAL
17062: ST_TO_ADDR
17063: GO 17165
17065: LD_INT 17
17067: DOUBLE
17068: EQUAL
17069: IFTRUE 17073
17071: GO 17098
17073: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
17074: LD_ADDR_VAR 0 3
17078: PUSH
17079: LD_INT 39
17081: PPUSH
17082: LD_VAR 0 1
17086: PPUSH
17087: CALL_OW 321
17091: PUSH
17092: LD_INT 2
17094: EQUAL
17095: ST_TO_ADDR
17096: GO 17165
17098: LD_INT 18
17100: DOUBLE
17101: EQUAL
17102: IFTRUE 17106
17104: GO 17131
17106: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
17107: LD_ADDR_VAR 0 3
17111: PUSH
17112: LD_INT 40
17114: PPUSH
17115: LD_VAR 0 1
17119: PPUSH
17120: CALL_OW 321
17124: PUSH
17125: LD_INT 2
17127: EQUAL
17128: ST_TO_ADDR
17129: GO 17165
17131: LD_INT 27
17133: DOUBLE
17134: EQUAL
17135: IFTRUE 17139
17137: GO 17164
17139: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
17140: LD_ADDR_VAR 0 3
17144: PUSH
17145: LD_INT 35
17147: PPUSH
17148: LD_VAR 0 1
17152: PPUSH
17153: CALL_OW 321
17157: PUSH
17158: LD_INT 2
17160: EQUAL
17161: ST_TO_ADDR
17162: GO 17165
17164: POP
// end ;
17165: LD_VAR 0 3
17169: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
17170: LD_INT 0
17172: PPUSH
17173: PPUSH
17174: PPUSH
17175: PPUSH
17176: PPUSH
17177: PPUSH
17178: PPUSH
17179: PPUSH
17180: PPUSH
17181: PPUSH
17182: PPUSH
// result := false ;
17183: LD_ADDR_VAR 0 6
17187: PUSH
17188: LD_INT 0
17190: ST_TO_ADDR
// if btype = b_depot then
17191: LD_VAR 0 2
17195: PUSH
17196: LD_INT 0
17198: EQUAL
17199: IFFALSE 17211
// begin result := true ;
17201: LD_ADDR_VAR 0 6
17205: PUSH
17206: LD_INT 1
17208: ST_TO_ADDR
// exit ;
17209: GO 18037
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17211: LD_VAR 0 1
17215: NOT
17216: PUSH
17217: LD_VAR 0 1
17221: PPUSH
17222: CALL_OW 266
17226: PUSH
17227: LD_INT 0
17229: PUSH
17230: LD_INT 1
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: IN
17237: NOT
17238: OR
17239: PUSH
17240: LD_VAR 0 2
17244: NOT
17245: OR
17246: PUSH
17247: LD_VAR 0 5
17251: PUSH
17252: LD_INT 0
17254: PUSH
17255: LD_INT 1
17257: PUSH
17258: LD_INT 2
17260: PUSH
17261: LD_INT 3
17263: PUSH
17264: LD_INT 4
17266: PUSH
17267: LD_INT 5
17269: PUSH
17270: EMPTY
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: IN
17278: NOT
17279: OR
17280: PUSH
17281: LD_VAR 0 3
17285: PPUSH
17286: LD_VAR 0 4
17290: PPUSH
17291: CALL_OW 488
17295: NOT
17296: OR
17297: IFFALSE 17301
// exit ;
17299: GO 18037
// side := GetSide ( depot ) ;
17301: LD_ADDR_VAR 0 9
17305: PUSH
17306: LD_VAR 0 1
17310: PPUSH
17311: CALL_OW 255
17315: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
17316: LD_VAR 0 9
17320: PPUSH
17321: LD_VAR 0 2
17325: PPUSH
17326: CALL 16794 0 2
17330: NOT
17331: IFFALSE 17335
// exit ;
17333: GO 18037
// pom := GetBase ( depot ) ;
17335: LD_ADDR_VAR 0 10
17339: PUSH
17340: LD_VAR 0 1
17344: PPUSH
17345: CALL_OW 274
17349: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
17350: LD_ADDR_VAR 0 11
17354: PUSH
17355: LD_VAR 0 2
17359: PPUSH
17360: LD_VAR 0 1
17364: PPUSH
17365: CALL_OW 248
17369: PPUSH
17370: CALL_OW 450
17374: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17375: LD_VAR 0 10
17379: PPUSH
17380: LD_INT 1
17382: PPUSH
17383: CALL_OW 275
17387: PUSH
17388: LD_VAR 0 11
17392: PUSH
17393: LD_INT 1
17395: ARRAY
17396: GREATEREQUAL
17397: PUSH
17398: LD_VAR 0 10
17402: PPUSH
17403: LD_INT 2
17405: PPUSH
17406: CALL_OW 275
17410: PUSH
17411: LD_VAR 0 11
17415: PUSH
17416: LD_INT 2
17418: ARRAY
17419: GREATEREQUAL
17420: AND
17421: PUSH
17422: LD_VAR 0 10
17426: PPUSH
17427: LD_INT 3
17429: PPUSH
17430: CALL_OW 275
17434: PUSH
17435: LD_VAR 0 11
17439: PUSH
17440: LD_INT 3
17442: ARRAY
17443: GREATEREQUAL
17444: AND
17445: NOT
17446: IFFALSE 17450
// exit ;
17448: GO 18037
// if GetBType ( depot ) = b_depot then
17450: LD_VAR 0 1
17454: PPUSH
17455: CALL_OW 266
17459: PUSH
17460: LD_INT 0
17462: EQUAL
17463: IFFALSE 17475
// dist := 28 else
17465: LD_ADDR_VAR 0 14
17469: PUSH
17470: LD_INT 28
17472: ST_TO_ADDR
17473: GO 17483
// dist := 36 ;
17475: LD_ADDR_VAR 0 14
17479: PUSH
17480: LD_INT 36
17482: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
17483: LD_VAR 0 1
17487: PPUSH
17488: LD_VAR 0 3
17492: PPUSH
17493: LD_VAR 0 4
17497: PPUSH
17498: CALL_OW 297
17502: PUSH
17503: LD_VAR 0 14
17507: GREATER
17508: IFFALSE 17512
// exit ;
17510: GO 18037
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
17512: LD_ADDR_VAR 0 12
17516: PUSH
17517: LD_VAR 0 2
17521: PPUSH
17522: LD_VAR 0 3
17526: PPUSH
17527: LD_VAR 0 4
17531: PPUSH
17532: LD_VAR 0 5
17536: PPUSH
17537: LD_VAR 0 1
17541: PPUSH
17542: CALL_OW 248
17546: PPUSH
17547: LD_INT 0
17549: PPUSH
17550: CALL 18042 0 6
17554: ST_TO_ADDR
// if not hexes then
17555: LD_VAR 0 12
17559: NOT
17560: IFFALSE 17564
// exit ;
17562: GO 18037
// hex := GetHexInfo ( x , y ) ;
17564: LD_ADDR_VAR 0 15
17568: PUSH
17569: LD_VAR 0 3
17573: PPUSH
17574: LD_VAR 0 4
17578: PPUSH
17579: CALL_OW 546
17583: ST_TO_ADDR
// if hex [ 1 ] then
17584: LD_VAR 0 15
17588: PUSH
17589: LD_INT 1
17591: ARRAY
17592: IFFALSE 17596
// exit ;
17594: GO 18037
// height := hex [ 2 ] ;
17596: LD_ADDR_VAR 0 13
17600: PUSH
17601: LD_VAR 0 15
17605: PUSH
17606: LD_INT 2
17608: ARRAY
17609: ST_TO_ADDR
// for i = 1 to hexes do
17610: LD_ADDR_VAR 0 7
17614: PUSH
17615: DOUBLE
17616: LD_INT 1
17618: DEC
17619: ST_TO_ADDR
17620: LD_VAR 0 12
17624: PUSH
17625: FOR_TO
17626: IFFALSE 17956
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17628: LD_VAR 0 12
17632: PUSH
17633: LD_VAR 0 7
17637: ARRAY
17638: PUSH
17639: LD_INT 1
17641: ARRAY
17642: PPUSH
17643: LD_VAR 0 12
17647: PUSH
17648: LD_VAR 0 7
17652: ARRAY
17653: PUSH
17654: LD_INT 2
17656: ARRAY
17657: PPUSH
17658: CALL_OW 488
17662: NOT
17663: PUSH
17664: LD_VAR 0 12
17668: PUSH
17669: LD_VAR 0 7
17673: ARRAY
17674: PUSH
17675: LD_INT 1
17677: ARRAY
17678: PPUSH
17679: LD_VAR 0 12
17683: PUSH
17684: LD_VAR 0 7
17688: ARRAY
17689: PUSH
17690: LD_INT 2
17692: ARRAY
17693: PPUSH
17694: CALL_OW 428
17698: PUSH
17699: LD_INT 0
17701: GREATER
17702: OR
17703: PUSH
17704: LD_VAR 0 12
17708: PUSH
17709: LD_VAR 0 7
17713: ARRAY
17714: PUSH
17715: LD_INT 1
17717: ARRAY
17718: PPUSH
17719: LD_VAR 0 12
17723: PUSH
17724: LD_VAR 0 7
17728: ARRAY
17729: PUSH
17730: LD_INT 2
17732: ARRAY
17733: PPUSH
17734: CALL_OW 351
17738: OR
17739: IFFALSE 17745
// exit ;
17741: POP
17742: POP
17743: GO 18037
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17745: LD_ADDR_VAR 0 8
17749: PUSH
17750: LD_VAR 0 12
17754: PUSH
17755: LD_VAR 0 7
17759: ARRAY
17760: PUSH
17761: LD_INT 1
17763: ARRAY
17764: PPUSH
17765: LD_VAR 0 12
17769: PUSH
17770: LD_VAR 0 7
17774: ARRAY
17775: PUSH
17776: LD_INT 2
17778: ARRAY
17779: PPUSH
17780: CALL_OW 546
17784: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17785: LD_VAR 0 8
17789: PUSH
17790: LD_INT 1
17792: ARRAY
17793: PUSH
17794: LD_VAR 0 8
17798: PUSH
17799: LD_INT 2
17801: ARRAY
17802: PUSH
17803: LD_VAR 0 13
17807: PUSH
17808: LD_INT 2
17810: PLUS
17811: GREATER
17812: OR
17813: PUSH
17814: LD_VAR 0 8
17818: PUSH
17819: LD_INT 2
17821: ARRAY
17822: PUSH
17823: LD_VAR 0 13
17827: PUSH
17828: LD_INT 2
17830: MINUS
17831: LESS
17832: OR
17833: PUSH
17834: LD_VAR 0 8
17838: PUSH
17839: LD_INT 3
17841: ARRAY
17842: PUSH
17843: LD_INT 0
17845: PUSH
17846: LD_INT 8
17848: PUSH
17849: LD_INT 9
17851: PUSH
17852: LD_INT 10
17854: PUSH
17855: LD_INT 11
17857: PUSH
17858: LD_INT 12
17860: PUSH
17861: LD_INT 13
17863: PUSH
17864: LD_INT 16
17866: PUSH
17867: LD_INT 17
17869: PUSH
17870: LD_INT 18
17872: PUSH
17873: LD_INT 19
17875: PUSH
17876: LD_INT 20
17878: PUSH
17879: LD_INT 21
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: LIST
17892: LIST
17893: LIST
17894: LIST
17895: LIST
17896: IN
17897: NOT
17898: OR
17899: PUSH
17900: LD_VAR 0 8
17904: PUSH
17905: LD_INT 5
17907: ARRAY
17908: NOT
17909: OR
17910: PUSH
17911: LD_VAR 0 8
17915: PUSH
17916: LD_INT 6
17918: ARRAY
17919: PUSH
17920: LD_INT 1
17922: PUSH
17923: LD_INT 2
17925: PUSH
17926: LD_INT 7
17928: PUSH
17929: LD_INT 9
17931: PUSH
17932: LD_INT 10
17934: PUSH
17935: LD_INT 11
17937: PUSH
17938: EMPTY
17939: LIST
17940: LIST
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: IN
17946: NOT
17947: OR
17948: IFFALSE 17954
// exit ;
17950: POP
17951: POP
17952: GO 18037
// end ;
17954: GO 17625
17956: POP
17957: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17958: LD_VAR 0 9
17962: PPUSH
17963: LD_VAR 0 3
17967: PPUSH
17968: LD_VAR 0 4
17972: PPUSH
17973: LD_INT 20
17975: PPUSH
17976: CALL 9960 0 4
17980: PUSH
17981: LD_INT 4
17983: ARRAY
17984: IFFALSE 17988
// exit ;
17986: GO 18037
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17988: LD_VAR 0 2
17992: PUSH
17993: LD_INT 29
17995: PUSH
17996: LD_INT 30
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: IN
18003: PUSH
18004: LD_VAR 0 3
18008: PPUSH
18009: LD_VAR 0 4
18013: PPUSH
18014: LD_VAR 0 9
18018: PPUSH
18019: CALL_OW 440
18023: NOT
18024: AND
18025: IFFALSE 18029
// exit ;
18027: GO 18037
// result := true ;
18029: LD_ADDR_VAR 0 6
18033: PUSH
18034: LD_INT 1
18036: ST_TO_ADDR
// end ;
18037: LD_VAR 0 6
18041: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
18042: LD_INT 0
18044: PPUSH
18045: PPUSH
18046: PPUSH
18047: PPUSH
18048: PPUSH
18049: PPUSH
18050: PPUSH
18051: PPUSH
18052: PPUSH
18053: PPUSH
18054: PPUSH
18055: PPUSH
18056: PPUSH
18057: PPUSH
18058: PPUSH
18059: PPUSH
18060: PPUSH
18061: PPUSH
18062: PPUSH
18063: PPUSH
18064: PPUSH
18065: PPUSH
18066: PPUSH
18067: PPUSH
18068: PPUSH
18069: PPUSH
18070: PPUSH
18071: PPUSH
18072: PPUSH
18073: PPUSH
18074: PPUSH
18075: PPUSH
18076: PPUSH
18077: PPUSH
18078: PPUSH
18079: PPUSH
18080: PPUSH
18081: PPUSH
18082: PPUSH
18083: PPUSH
18084: PPUSH
18085: PPUSH
18086: PPUSH
18087: PPUSH
18088: PPUSH
18089: PPUSH
18090: PPUSH
18091: PPUSH
18092: PPUSH
18093: PPUSH
18094: PPUSH
18095: PPUSH
18096: PPUSH
18097: PPUSH
18098: PPUSH
18099: PPUSH
18100: PPUSH
18101: PPUSH
// result = [ ] ;
18102: LD_ADDR_VAR 0 7
18106: PUSH
18107: EMPTY
18108: ST_TO_ADDR
// temp_list = [ ] ;
18109: LD_ADDR_VAR 0 9
18113: PUSH
18114: EMPTY
18115: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
18116: LD_VAR 0 4
18120: PUSH
18121: LD_INT 0
18123: PUSH
18124: LD_INT 1
18126: PUSH
18127: LD_INT 2
18129: PUSH
18130: LD_INT 3
18132: PUSH
18133: LD_INT 4
18135: PUSH
18136: LD_INT 5
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: IN
18147: NOT
18148: PUSH
18149: LD_VAR 0 1
18153: PUSH
18154: LD_INT 0
18156: PUSH
18157: LD_INT 1
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: IN
18164: PUSH
18165: LD_VAR 0 5
18169: PUSH
18170: LD_INT 1
18172: PUSH
18173: LD_INT 2
18175: PUSH
18176: LD_INT 3
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: LIST
18183: IN
18184: NOT
18185: AND
18186: OR
18187: IFFALSE 18191
// exit ;
18189: GO 36582
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
18191: LD_VAR 0 1
18195: PUSH
18196: LD_INT 6
18198: PUSH
18199: LD_INT 7
18201: PUSH
18202: LD_INT 8
18204: PUSH
18205: LD_INT 13
18207: PUSH
18208: LD_INT 12
18210: PUSH
18211: LD_INT 15
18213: PUSH
18214: LD_INT 11
18216: PUSH
18217: LD_INT 14
18219: PUSH
18220: LD_INT 10
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: IN
18234: IFFALSE 18244
// btype = b_lab ;
18236: LD_ADDR_VAR 0 1
18240: PUSH
18241: LD_INT 6
18243: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
18244: LD_VAR 0 6
18248: PUSH
18249: LD_INT 0
18251: PUSH
18252: LD_INT 1
18254: PUSH
18255: LD_INT 2
18257: PUSH
18258: EMPTY
18259: LIST
18260: LIST
18261: LIST
18262: IN
18263: NOT
18264: PUSH
18265: LD_VAR 0 1
18269: PUSH
18270: LD_INT 0
18272: PUSH
18273: LD_INT 1
18275: PUSH
18276: LD_INT 2
18278: PUSH
18279: LD_INT 3
18281: PUSH
18282: LD_INT 6
18284: PUSH
18285: LD_INT 36
18287: PUSH
18288: LD_INT 4
18290: PUSH
18291: LD_INT 5
18293: PUSH
18294: LD_INT 31
18296: PUSH
18297: LD_INT 32
18299: PUSH
18300: LD_INT 33
18302: PUSH
18303: EMPTY
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: LIST
18310: LIST
18311: LIST
18312: LIST
18313: LIST
18314: LIST
18315: IN
18316: NOT
18317: PUSH
18318: LD_VAR 0 6
18322: PUSH
18323: LD_INT 1
18325: EQUAL
18326: AND
18327: OR
18328: PUSH
18329: LD_VAR 0 1
18333: PUSH
18334: LD_INT 2
18336: PUSH
18337: LD_INT 3
18339: PUSH
18340: EMPTY
18341: LIST
18342: LIST
18343: IN
18344: NOT
18345: PUSH
18346: LD_VAR 0 6
18350: PUSH
18351: LD_INT 2
18353: EQUAL
18354: AND
18355: OR
18356: IFFALSE 18366
// mode = 0 ;
18358: LD_ADDR_VAR 0 6
18362: PUSH
18363: LD_INT 0
18365: ST_TO_ADDR
// case mode of 0 :
18366: LD_VAR 0 6
18370: PUSH
18371: LD_INT 0
18373: DOUBLE
18374: EQUAL
18375: IFTRUE 18379
18377: GO 29832
18379: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
18380: LD_ADDR_VAR 0 11
18384: PUSH
18385: LD_INT 0
18387: PUSH
18388: LD_INT 0
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: PUSH
18395: LD_INT 0
18397: PUSH
18398: LD_INT 1
18400: NEG
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: PUSH
18406: LD_INT 1
18408: PUSH
18409: LD_INT 0
18411: PUSH
18412: EMPTY
18413: LIST
18414: LIST
18415: PUSH
18416: LD_INT 1
18418: PUSH
18419: LD_INT 1
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: PUSH
18426: LD_INT 0
18428: PUSH
18429: LD_INT 1
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: PUSH
18436: LD_INT 1
18438: NEG
18439: PUSH
18440: LD_INT 0
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: PUSH
18447: LD_INT 1
18449: NEG
18450: PUSH
18451: LD_INT 1
18453: NEG
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: PUSH
18459: LD_INT 1
18461: NEG
18462: PUSH
18463: LD_INT 2
18465: NEG
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: PUSH
18471: LD_INT 0
18473: PUSH
18474: LD_INT 2
18476: NEG
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: PUSH
18482: LD_INT 1
18484: PUSH
18485: LD_INT 1
18487: NEG
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: PUSH
18493: LD_INT 1
18495: PUSH
18496: LD_INT 2
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: LD_INT 0
18505: PUSH
18506: LD_INT 2
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: PUSH
18513: LD_INT 1
18515: NEG
18516: PUSH
18517: LD_INT 1
18519: PUSH
18520: EMPTY
18521: LIST
18522: LIST
18523: PUSH
18524: LD_INT 1
18526: PUSH
18527: LD_INT 3
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: PUSH
18534: LD_INT 0
18536: PUSH
18537: LD_INT 3
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: PUSH
18544: LD_INT 1
18546: NEG
18547: PUSH
18548: LD_INT 2
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18573: LD_ADDR_VAR 0 12
18577: PUSH
18578: LD_INT 0
18580: PUSH
18581: LD_INT 0
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: PUSH
18588: LD_INT 0
18590: PUSH
18591: LD_INT 1
18593: NEG
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: PUSH
18599: LD_INT 1
18601: PUSH
18602: LD_INT 0
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: PUSH
18609: LD_INT 1
18611: PUSH
18612: LD_INT 1
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: PUSH
18619: LD_INT 0
18621: PUSH
18622: LD_INT 1
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: PUSH
18629: LD_INT 1
18631: NEG
18632: PUSH
18633: LD_INT 0
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: PUSH
18640: LD_INT 1
18642: NEG
18643: PUSH
18644: LD_INT 1
18646: NEG
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: PUSH
18652: LD_INT 1
18654: PUSH
18655: LD_INT 1
18657: NEG
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: PUSH
18663: LD_INT 2
18665: PUSH
18666: LD_INT 0
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: PUSH
18673: LD_INT 2
18675: PUSH
18676: LD_INT 1
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PUSH
18683: LD_INT 1
18685: NEG
18686: PUSH
18687: LD_INT 1
18689: PUSH
18690: EMPTY
18691: LIST
18692: LIST
18693: PUSH
18694: LD_INT 2
18696: NEG
18697: PUSH
18698: LD_INT 0
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: PUSH
18705: LD_INT 2
18707: NEG
18708: PUSH
18709: LD_INT 1
18711: NEG
18712: PUSH
18713: EMPTY
18714: LIST
18715: LIST
18716: PUSH
18717: LD_INT 2
18719: NEG
18720: PUSH
18721: LD_INT 1
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: PUSH
18728: LD_INT 3
18730: NEG
18731: PUSH
18732: LD_INT 0
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: LD_INT 3
18741: NEG
18742: PUSH
18743: LD_INT 1
18745: NEG
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: LIST
18758: LIST
18759: LIST
18760: LIST
18761: LIST
18762: LIST
18763: LIST
18764: LIST
18765: LIST
18766: LIST
18767: LIST
18768: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18769: LD_ADDR_VAR 0 13
18773: PUSH
18774: LD_INT 0
18776: PUSH
18777: LD_INT 0
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: PUSH
18784: LD_INT 0
18786: PUSH
18787: LD_INT 1
18789: NEG
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PUSH
18795: LD_INT 1
18797: PUSH
18798: LD_INT 0
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: PUSH
18805: LD_INT 1
18807: PUSH
18808: LD_INT 1
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: PUSH
18815: LD_INT 0
18817: PUSH
18818: LD_INT 1
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: PUSH
18825: LD_INT 1
18827: NEG
18828: PUSH
18829: LD_INT 0
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: LD_INT 1
18838: NEG
18839: PUSH
18840: LD_INT 1
18842: NEG
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: PUSH
18848: LD_INT 1
18850: NEG
18851: PUSH
18852: LD_INT 2
18854: NEG
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: PUSH
18860: LD_INT 2
18862: PUSH
18863: LD_INT 1
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: PUSH
18870: LD_INT 2
18872: PUSH
18873: LD_INT 2
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: PUSH
18880: LD_INT 1
18882: PUSH
18883: LD_INT 2
18885: PUSH
18886: EMPTY
18887: LIST
18888: LIST
18889: PUSH
18890: LD_INT 2
18892: NEG
18893: PUSH
18894: LD_INT 1
18896: NEG
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: PUSH
18902: LD_INT 2
18904: NEG
18905: PUSH
18906: LD_INT 2
18908: NEG
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: PUSH
18914: LD_INT 2
18916: NEG
18917: PUSH
18918: LD_INT 3
18920: NEG
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: PUSH
18926: LD_INT 3
18928: NEG
18929: PUSH
18930: LD_INT 2
18932: NEG
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: PUSH
18938: LD_INT 3
18940: NEG
18941: PUSH
18942: LD_INT 3
18944: NEG
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: LIST
18966: LIST
18967: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18968: LD_ADDR_VAR 0 14
18972: PUSH
18973: LD_INT 0
18975: PUSH
18976: LD_INT 0
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: PUSH
18983: LD_INT 0
18985: PUSH
18986: LD_INT 1
18988: NEG
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: PUSH
18994: LD_INT 1
18996: PUSH
18997: LD_INT 0
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: PUSH
19004: LD_INT 1
19006: PUSH
19007: LD_INT 1
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: LD_INT 0
19016: PUSH
19017: LD_INT 1
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 1
19026: NEG
19027: PUSH
19028: LD_INT 0
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PUSH
19035: LD_INT 1
19037: NEG
19038: PUSH
19039: LD_INT 1
19041: NEG
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: PUSH
19047: LD_INT 1
19049: NEG
19050: PUSH
19051: LD_INT 2
19053: NEG
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: PUSH
19059: LD_INT 0
19061: PUSH
19062: LD_INT 2
19064: NEG
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: PUSH
19070: LD_INT 1
19072: PUSH
19073: LD_INT 1
19075: NEG
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: PUSH
19081: LD_INT 1
19083: PUSH
19084: LD_INT 2
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: PUSH
19091: LD_INT 0
19093: PUSH
19094: LD_INT 2
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: PUSH
19101: LD_INT 1
19103: NEG
19104: PUSH
19105: LD_INT 1
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: PUSH
19112: LD_INT 1
19114: NEG
19115: PUSH
19116: LD_INT 3
19118: NEG
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PUSH
19124: LD_INT 0
19126: PUSH
19127: LD_INT 3
19129: NEG
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PUSH
19135: LD_INT 1
19137: PUSH
19138: LD_INT 2
19140: NEG
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
19164: LD_ADDR_VAR 0 15
19168: PUSH
19169: LD_INT 0
19171: PUSH
19172: LD_INT 0
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: PUSH
19179: LD_INT 0
19181: PUSH
19182: LD_INT 1
19184: NEG
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: PUSH
19190: LD_INT 1
19192: PUSH
19193: LD_INT 0
19195: PUSH
19196: EMPTY
19197: LIST
19198: LIST
19199: PUSH
19200: LD_INT 1
19202: PUSH
19203: LD_INT 1
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PUSH
19210: LD_INT 0
19212: PUSH
19213: LD_INT 1
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PUSH
19220: LD_INT 1
19222: NEG
19223: PUSH
19224: LD_INT 0
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: PUSH
19231: LD_INT 1
19233: NEG
19234: PUSH
19235: LD_INT 1
19237: NEG
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: PUSH
19243: LD_INT 1
19245: PUSH
19246: LD_INT 1
19248: NEG
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: PUSH
19254: LD_INT 2
19256: PUSH
19257: LD_INT 0
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: PUSH
19264: LD_INT 2
19266: PUSH
19267: LD_INT 1
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: PUSH
19274: LD_INT 1
19276: NEG
19277: PUSH
19278: LD_INT 1
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: PUSH
19285: LD_INT 2
19287: NEG
19288: PUSH
19289: LD_INT 0
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: PUSH
19296: LD_INT 2
19298: NEG
19299: PUSH
19300: LD_INT 1
19302: NEG
19303: PUSH
19304: EMPTY
19305: LIST
19306: LIST
19307: PUSH
19308: LD_INT 2
19310: PUSH
19311: LD_INT 1
19313: NEG
19314: PUSH
19315: EMPTY
19316: LIST
19317: LIST
19318: PUSH
19319: LD_INT 3
19321: PUSH
19322: LD_INT 0
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: PUSH
19329: LD_INT 3
19331: PUSH
19332: LD_INT 1
19334: PUSH
19335: EMPTY
19336: LIST
19337: LIST
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
19357: LD_ADDR_VAR 0 16
19361: PUSH
19362: LD_INT 0
19364: PUSH
19365: LD_INT 0
19367: PUSH
19368: EMPTY
19369: LIST
19370: LIST
19371: PUSH
19372: LD_INT 0
19374: PUSH
19375: LD_INT 1
19377: NEG
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PUSH
19383: LD_INT 1
19385: PUSH
19386: LD_INT 0
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: PUSH
19393: LD_INT 1
19395: PUSH
19396: LD_INT 1
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: LD_INT 0
19405: PUSH
19406: LD_INT 1
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PUSH
19413: LD_INT 1
19415: NEG
19416: PUSH
19417: LD_INT 0
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: PUSH
19424: LD_INT 1
19426: NEG
19427: PUSH
19428: LD_INT 1
19430: NEG
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PUSH
19436: LD_INT 1
19438: NEG
19439: PUSH
19440: LD_INT 2
19442: NEG
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: PUSH
19448: LD_INT 2
19450: PUSH
19451: LD_INT 1
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: PUSH
19458: LD_INT 2
19460: PUSH
19461: LD_INT 2
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PUSH
19468: LD_INT 1
19470: PUSH
19471: LD_INT 2
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: LD_INT 2
19480: NEG
19481: PUSH
19482: LD_INT 1
19484: NEG
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: PUSH
19490: LD_INT 2
19492: NEG
19493: PUSH
19494: LD_INT 2
19496: NEG
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: PUSH
19502: LD_INT 3
19504: PUSH
19505: LD_INT 2
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: LD_INT 3
19514: PUSH
19515: LD_INT 3
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PUSH
19522: LD_INT 2
19524: PUSH
19525: LD_INT 3
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19550: LD_ADDR_VAR 0 17
19554: PUSH
19555: LD_INT 0
19557: PUSH
19558: LD_INT 0
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: PUSH
19565: LD_INT 0
19567: PUSH
19568: LD_INT 1
19570: NEG
19571: PUSH
19572: EMPTY
19573: LIST
19574: LIST
19575: PUSH
19576: LD_INT 1
19578: PUSH
19579: LD_INT 0
19581: PUSH
19582: EMPTY
19583: LIST
19584: LIST
19585: PUSH
19586: LD_INT 1
19588: PUSH
19589: LD_INT 1
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PUSH
19596: LD_INT 0
19598: PUSH
19599: LD_INT 1
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PUSH
19606: LD_INT 1
19608: NEG
19609: PUSH
19610: LD_INT 0
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: PUSH
19617: LD_INT 1
19619: NEG
19620: PUSH
19621: LD_INT 1
19623: NEG
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: PUSH
19629: LD_INT 1
19631: NEG
19632: PUSH
19633: LD_INT 2
19635: NEG
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: PUSH
19641: LD_INT 0
19643: PUSH
19644: LD_INT 2
19646: NEG
19647: PUSH
19648: EMPTY
19649: LIST
19650: LIST
19651: PUSH
19652: LD_INT 1
19654: PUSH
19655: LD_INT 1
19657: NEG
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PUSH
19663: LD_INT 2
19665: PUSH
19666: LD_INT 0
19668: PUSH
19669: EMPTY
19670: LIST
19671: LIST
19672: PUSH
19673: LD_INT 2
19675: PUSH
19676: LD_INT 1
19678: PUSH
19679: EMPTY
19680: LIST
19681: LIST
19682: PUSH
19683: LD_INT 2
19685: PUSH
19686: LD_INT 2
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: PUSH
19693: LD_INT 1
19695: PUSH
19696: LD_INT 2
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: PUSH
19703: LD_INT 0
19705: PUSH
19706: LD_INT 2
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: PUSH
19713: LD_INT 1
19715: NEG
19716: PUSH
19717: LD_INT 1
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: PUSH
19724: LD_INT 2
19726: NEG
19727: PUSH
19728: LD_INT 0
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: PUSH
19735: LD_INT 2
19737: NEG
19738: PUSH
19739: LD_INT 1
19741: NEG
19742: PUSH
19743: EMPTY
19744: LIST
19745: LIST
19746: PUSH
19747: LD_INT 2
19749: NEG
19750: PUSH
19751: LD_INT 2
19753: NEG
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19780: LD_ADDR_VAR 0 18
19784: PUSH
19785: LD_INT 0
19787: PUSH
19788: LD_INT 0
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: PUSH
19795: LD_INT 0
19797: PUSH
19798: LD_INT 1
19800: NEG
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: PUSH
19806: LD_INT 1
19808: PUSH
19809: LD_INT 0
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: PUSH
19816: LD_INT 1
19818: PUSH
19819: LD_INT 1
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: PUSH
19826: LD_INT 0
19828: PUSH
19829: LD_INT 1
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: LD_INT 1
19838: NEG
19839: PUSH
19840: LD_INT 0
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: PUSH
19847: LD_INT 1
19849: NEG
19850: PUSH
19851: LD_INT 1
19853: NEG
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: PUSH
19859: LD_INT 1
19861: NEG
19862: PUSH
19863: LD_INT 2
19865: NEG
19866: PUSH
19867: EMPTY
19868: LIST
19869: LIST
19870: PUSH
19871: LD_INT 0
19873: PUSH
19874: LD_INT 2
19876: NEG
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: PUSH
19882: LD_INT 1
19884: PUSH
19885: LD_INT 1
19887: NEG
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: PUSH
19893: LD_INT 2
19895: PUSH
19896: LD_INT 0
19898: PUSH
19899: EMPTY
19900: LIST
19901: LIST
19902: PUSH
19903: LD_INT 2
19905: PUSH
19906: LD_INT 1
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: PUSH
19913: LD_INT 2
19915: PUSH
19916: LD_INT 2
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: PUSH
19923: LD_INT 1
19925: PUSH
19926: LD_INT 2
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: PUSH
19933: LD_INT 0
19935: PUSH
19936: LD_INT 2
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: PUSH
19943: LD_INT 1
19945: NEG
19946: PUSH
19947: LD_INT 1
19949: PUSH
19950: EMPTY
19951: LIST
19952: LIST
19953: PUSH
19954: LD_INT 2
19956: NEG
19957: PUSH
19958: LD_INT 0
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: PUSH
19965: LD_INT 2
19967: NEG
19968: PUSH
19969: LD_INT 1
19971: NEG
19972: PUSH
19973: EMPTY
19974: LIST
19975: LIST
19976: PUSH
19977: LD_INT 2
19979: NEG
19980: PUSH
19981: LD_INT 2
19983: NEG
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20010: LD_ADDR_VAR 0 19
20014: PUSH
20015: LD_INT 0
20017: PUSH
20018: LD_INT 0
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: PUSH
20025: LD_INT 0
20027: PUSH
20028: LD_INT 1
20030: NEG
20031: PUSH
20032: EMPTY
20033: LIST
20034: LIST
20035: PUSH
20036: LD_INT 1
20038: PUSH
20039: LD_INT 0
20041: PUSH
20042: EMPTY
20043: LIST
20044: LIST
20045: PUSH
20046: LD_INT 1
20048: PUSH
20049: LD_INT 1
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: PUSH
20056: LD_INT 0
20058: PUSH
20059: LD_INT 1
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: PUSH
20066: LD_INT 1
20068: NEG
20069: PUSH
20070: LD_INT 0
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: PUSH
20077: LD_INT 1
20079: NEG
20080: PUSH
20081: LD_INT 1
20083: NEG
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: PUSH
20089: LD_INT 1
20091: NEG
20092: PUSH
20093: LD_INT 2
20095: NEG
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: PUSH
20101: LD_INT 0
20103: PUSH
20104: LD_INT 2
20106: NEG
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: PUSH
20112: LD_INT 1
20114: PUSH
20115: LD_INT 1
20117: NEG
20118: PUSH
20119: EMPTY
20120: LIST
20121: LIST
20122: PUSH
20123: LD_INT 2
20125: PUSH
20126: LD_INT 0
20128: PUSH
20129: EMPTY
20130: LIST
20131: LIST
20132: PUSH
20133: LD_INT 2
20135: PUSH
20136: LD_INT 1
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PUSH
20143: LD_INT 2
20145: PUSH
20146: LD_INT 2
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: PUSH
20153: LD_INT 1
20155: PUSH
20156: LD_INT 2
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PUSH
20163: LD_INT 0
20165: PUSH
20166: LD_INT 2
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: PUSH
20173: LD_INT 1
20175: NEG
20176: PUSH
20177: LD_INT 1
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PUSH
20184: LD_INT 2
20186: NEG
20187: PUSH
20188: LD_INT 0
20190: PUSH
20191: EMPTY
20192: LIST
20193: LIST
20194: PUSH
20195: LD_INT 2
20197: NEG
20198: PUSH
20199: LD_INT 1
20201: NEG
20202: PUSH
20203: EMPTY
20204: LIST
20205: LIST
20206: PUSH
20207: LD_INT 2
20209: NEG
20210: PUSH
20211: LD_INT 2
20213: NEG
20214: PUSH
20215: EMPTY
20216: LIST
20217: LIST
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20240: LD_ADDR_VAR 0 20
20244: PUSH
20245: LD_INT 0
20247: PUSH
20248: LD_INT 0
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: PUSH
20255: LD_INT 0
20257: PUSH
20258: LD_INT 1
20260: NEG
20261: PUSH
20262: EMPTY
20263: LIST
20264: LIST
20265: PUSH
20266: LD_INT 1
20268: PUSH
20269: LD_INT 0
20271: PUSH
20272: EMPTY
20273: LIST
20274: LIST
20275: PUSH
20276: LD_INT 1
20278: PUSH
20279: LD_INT 1
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: PUSH
20286: LD_INT 0
20288: PUSH
20289: LD_INT 1
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: LD_INT 1
20298: NEG
20299: PUSH
20300: LD_INT 0
20302: PUSH
20303: EMPTY
20304: LIST
20305: LIST
20306: PUSH
20307: LD_INT 1
20309: NEG
20310: PUSH
20311: LD_INT 1
20313: NEG
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PUSH
20319: LD_INT 1
20321: NEG
20322: PUSH
20323: LD_INT 2
20325: NEG
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: PUSH
20331: LD_INT 0
20333: PUSH
20334: LD_INT 2
20336: NEG
20337: PUSH
20338: EMPTY
20339: LIST
20340: LIST
20341: PUSH
20342: LD_INT 1
20344: PUSH
20345: LD_INT 1
20347: NEG
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: PUSH
20353: LD_INT 2
20355: PUSH
20356: LD_INT 0
20358: PUSH
20359: EMPTY
20360: LIST
20361: LIST
20362: PUSH
20363: LD_INT 2
20365: PUSH
20366: LD_INT 1
20368: PUSH
20369: EMPTY
20370: LIST
20371: LIST
20372: PUSH
20373: LD_INT 2
20375: PUSH
20376: LD_INT 2
20378: PUSH
20379: EMPTY
20380: LIST
20381: LIST
20382: PUSH
20383: LD_INT 1
20385: PUSH
20386: LD_INT 2
20388: PUSH
20389: EMPTY
20390: LIST
20391: LIST
20392: PUSH
20393: LD_INT 0
20395: PUSH
20396: LD_INT 2
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: PUSH
20403: LD_INT 1
20405: NEG
20406: PUSH
20407: LD_INT 1
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: PUSH
20414: LD_INT 2
20416: NEG
20417: PUSH
20418: LD_INT 0
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: PUSH
20425: LD_INT 2
20427: NEG
20428: PUSH
20429: LD_INT 1
20431: NEG
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: PUSH
20437: LD_INT 2
20439: NEG
20440: PUSH
20441: LD_INT 2
20443: NEG
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20470: LD_ADDR_VAR 0 21
20474: PUSH
20475: LD_INT 0
20477: PUSH
20478: LD_INT 0
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: PUSH
20485: LD_INT 0
20487: PUSH
20488: LD_INT 1
20490: NEG
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: PUSH
20496: LD_INT 1
20498: PUSH
20499: LD_INT 0
20501: PUSH
20502: EMPTY
20503: LIST
20504: LIST
20505: PUSH
20506: LD_INT 1
20508: PUSH
20509: LD_INT 1
20511: PUSH
20512: EMPTY
20513: LIST
20514: LIST
20515: PUSH
20516: LD_INT 0
20518: PUSH
20519: LD_INT 1
20521: PUSH
20522: EMPTY
20523: LIST
20524: LIST
20525: PUSH
20526: LD_INT 1
20528: NEG
20529: PUSH
20530: LD_INT 0
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: PUSH
20537: LD_INT 1
20539: NEG
20540: PUSH
20541: LD_INT 1
20543: NEG
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: PUSH
20549: LD_INT 1
20551: NEG
20552: PUSH
20553: LD_INT 2
20555: NEG
20556: PUSH
20557: EMPTY
20558: LIST
20559: LIST
20560: PUSH
20561: LD_INT 0
20563: PUSH
20564: LD_INT 2
20566: NEG
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: PUSH
20572: LD_INT 1
20574: PUSH
20575: LD_INT 1
20577: NEG
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: PUSH
20583: LD_INT 2
20585: PUSH
20586: LD_INT 0
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: PUSH
20593: LD_INT 2
20595: PUSH
20596: LD_INT 1
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: PUSH
20603: LD_INT 2
20605: PUSH
20606: LD_INT 2
20608: PUSH
20609: EMPTY
20610: LIST
20611: LIST
20612: PUSH
20613: LD_INT 1
20615: PUSH
20616: LD_INT 2
20618: PUSH
20619: EMPTY
20620: LIST
20621: LIST
20622: PUSH
20623: LD_INT 0
20625: PUSH
20626: LD_INT 2
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: PUSH
20633: LD_INT 1
20635: NEG
20636: PUSH
20637: LD_INT 1
20639: PUSH
20640: EMPTY
20641: LIST
20642: LIST
20643: PUSH
20644: LD_INT 2
20646: NEG
20647: PUSH
20648: LD_INT 0
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PUSH
20655: LD_INT 2
20657: NEG
20658: PUSH
20659: LD_INT 1
20661: NEG
20662: PUSH
20663: EMPTY
20664: LIST
20665: LIST
20666: PUSH
20667: LD_INT 2
20669: NEG
20670: PUSH
20671: LD_INT 2
20673: NEG
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20700: LD_ADDR_VAR 0 22
20704: PUSH
20705: LD_INT 0
20707: PUSH
20708: LD_INT 0
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: PUSH
20715: LD_INT 0
20717: PUSH
20718: LD_INT 1
20720: NEG
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: PUSH
20726: LD_INT 1
20728: PUSH
20729: LD_INT 0
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: PUSH
20736: LD_INT 1
20738: PUSH
20739: LD_INT 1
20741: PUSH
20742: EMPTY
20743: LIST
20744: LIST
20745: PUSH
20746: LD_INT 0
20748: PUSH
20749: LD_INT 1
20751: PUSH
20752: EMPTY
20753: LIST
20754: LIST
20755: PUSH
20756: LD_INT 1
20758: NEG
20759: PUSH
20760: LD_INT 0
20762: PUSH
20763: EMPTY
20764: LIST
20765: LIST
20766: PUSH
20767: LD_INT 1
20769: NEG
20770: PUSH
20771: LD_INT 1
20773: NEG
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: PUSH
20779: LD_INT 1
20781: NEG
20782: PUSH
20783: LD_INT 2
20785: NEG
20786: PUSH
20787: EMPTY
20788: LIST
20789: LIST
20790: PUSH
20791: LD_INT 0
20793: PUSH
20794: LD_INT 2
20796: NEG
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: PUSH
20802: LD_INT 1
20804: PUSH
20805: LD_INT 1
20807: NEG
20808: PUSH
20809: EMPTY
20810: LIST
20811: LIST
20812: PUSH
20813: LD_INT 2
20815: PUSH
20816: LD_INT 0
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: PUSH
20823: LD_INT 2
20825: PUSH
20826: LD_INT 1
20828: PUSH
20829: EMPTY
20830: LIST
20831: LIST
20832: PUSH
20833: LD_INT 2
20835: PUSH
20836: LD_INT 2
20838: PUSH
20839: EMPTY
20840: LIST
20841: LIST
20842: PUSH
20843: LD_INT 1
20845: PUSH
20846: LD_INT 2
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: PUSH
20853: LD_INT 0
20855: PUSH
20856: LD_INT 2
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: PUSH
20863: LD_INT 1
20865: NEG
20866: PUSH
20867: LD_INT 1
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: PUSH
20874: LD_INT 2
20876: NEG
20877: PUSH
20878: LD_INT 0
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PUSH
20885: LD_INT 2
20887: NEG
20888: PUSH
20889: LD_INT 1
20891: NEG
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: PUSH
20897: LD_INT 2
20899: NEG
20900: PUSH
20901: LD_INT 2
20903: NEG
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20930: LD_ADDR_VAR 0 23
20934: PUSH
20935: LD_INT 0
20937: PUSH
20938: LD_INT 0
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: PUSH
20945: LD_INT 0
20947: PUSH
20948: LD_INT 1
20950: NEG
20951: PUSH
20952: EMPTY
20953: LIST
20954: LIST
20955: PUSH
20956: LD_INT 1
20958: PUSH
20959: LD_INT 0
20961: PUSH
20962: EMPTY
20963: LIST
20964: LIST
20965: PUSH
20966: LD_INT 1
20968: PUSH
20969: LD_INT 1
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: PUSH
20976: LD_INT 0
20978: PUSH
20979: LD_INT 1
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: PUSH
20986: LD_INT 1
20988: NEG
20989: PUSH
20990: LD_INT 0
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: PUSH
20997: LD_INT 1
20999: NEG
21000: PUSH
21001: LD_INT 1
21003: NEG
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: PUSH
21009: LD_INT 1
21011: NEG
21012: PUSH
21013: LD_INT 2
21015: NEG
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: PUSH
21021: LD_INT 0
21023: PUSH
21024: LD_INT 2
21026: NEG
21027: PUSH
21028: EMPTY
21029: LIST
21030: LIST
21031: PUSH
21032: LD_INT 1
21034: PUSH
21035: LD_INT 1
21037: NEG
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: PUSH
21043: LD_INT 2
21045: PUSH
21046: LD_INT 0
21048: PUSH
21049: EMPTY
21050: LIST
21051: LIST
21052: PUSH
21053: LD_INT 2
21055: PUSH
21056: LD_INT 1
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: PUSH
21063: LD_INT 2
21065: PUSH
21066: LD_INT 2
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: PUSH
21073: LD_INT 1
21075: PUSH
21076: LD_INT 2
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: PUSH
21083: LD_INT 0
21085: PUSH
21086: LD_INT 2
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: PUSH
21093: LD_INT 1
21095: NEG
21096: PUSH
21097: LD_INT 1
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: PUSH
21104: LD_INT 2
21106: NEG
21107: PUSH
21108: LD_INT 0
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: LD_INT 2
21117: NEG
21118: PUSH
21119: LD_INT 1
21121: NEG
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: PUSH
21127: LD_INT 2
21129: NEG
21130: PUSH
21131: LD_INT 2
21133: NEG
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: PUSH
21139: LD_INT 2
21141: NEG
21142: PUSH
21143: LD_INT 3
21145: NEG
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: PUSH
21151: LD_INT 1
21153: NEG
21154: PUSH
21155: LD_INT 3
21157: NEG
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: PUSH
21163: LD_INT 1
21165: PUSH
21166: LD_INT 2
21168: NEG
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: PUSH
21174: LD_INT 2
21176: PUSH
21177: LD_INT 1
21179: NEG
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: PUSH
21185: EMPTY
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
21210: LD_ADDR_VAR 0 24
21214: PUSH
21215: LD_INT 0
21217: PUSH
21218: LD_INT 0
21220: PUSH
21221: EMPTY
21222: LIST
21223: LIST
21224: PUSH
21225: LD_INT 0
21227: PUSH
21228: LD_INT 1
21230: NEG
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: PUSH
21236: LD_INT 1
21238: PUSH
21239: LD_INT 0
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PUSH
21246: LD_INT 1
21248: PUSH
21249: LD_INT 1
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PUSH
21256: LD_INT 0
21258: PUSH
21259: LD_INT 1
21261: PUSH
21262: EMPTY
21263: LIST
21264: LIST
21265: PUSH
21266: LD_INT 1
21268: NEG
21269: PUSH
21270: LD_INT 0
21272: PUSH
21273: EMPTY
21274: LIST
21275: LIST
21276: PUSH
21277: LD_INT 1
21279: NEG
21280: PUSH
21281: LD_INT 1
21283: NEG
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: PUSH
21289: LD_INT 1
21291: NEG
21292: PUSH
21293: LD_INT 2
21295: NEG
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: PUSH
21301: LD_INT 0
21303: PUSH
21304: LD_INT 2
21306: NEG
21307: PUSH
21308: EMPTY
21309: LIST
21310: LIST
21311: PUSH
21312: LD_INT 1
21314: PUSH
21315: LD_INT 1
21317: NEG
21318: PUSH
21319: EMPTY
21320: LIST
21321: LIST
21322: PUSH
21323: LD_INT 2
21325: PUSH
21326: LD_INT 0
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: PUSH
21333: LD_INT 2
21335: PUSH
21336: LD_INT 1
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: PUSH
21343: LD_INT 2
21345: PUSH
21346: LD_INT 2
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: PUSH
21353: LD_INT 1
21355: PUSH
21356: LD_INT 2
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: PUSH
21363: LD_INT 0
21365: PUSH
21366: LD_INT 2
21368: PUSH
21369: EMPTY
21370: LIST
21371: LIST
21372: PUSH
21373: LD_INT 1
21375: NEG
21376: PUSH
21377: LD_INT 1
21379: PUSH
21380: EMPTY
21381: LIST
21382: LIST
21383: PUSH
21384: LD_INT 2
21386: NEG
21387: PUSH
21388: LD_INT 0
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: PUSH
21395: LD_INT 2
21397: NEG
21398: PUSH
21399: LD_INT 1
21401: NEG
21402: PUSH
21403: EMPTY
21404: LIST
21405: LIST
21406: PUSH
21407: LD_INT 2
21409: NEG
21410: PUSH
21411: LD_INT 2
21413: NEG
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: PUSH
21419: LD_INT 1
21421: PUSH
21422: LD_INT 2
21424: NEG
21425: PUSH
21426: EMPTY
21427: LIST
21428: LIST
21429: PUSH
21430: LD_INT 2
21432: PUSH
21433: LD_INT 1
21435: NEG
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: PUSH
21441: LD_INT 3
21443: PUSH
21444: LD_INT 1
21446: PUSH
21447: EMPTY
21448: LIST
21449: LIST
21450: PUSH
21451: LD_INT 3
21453: PUSH
21454: LD_INT 2
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21486: LD_ADDR_VAR 0 25
21490: PUSH
21491: LD_INT 0
21493: PUSH
21494: LD_INT 0
21496: PUSH
21497: EMPTY
21498: LIST
21499: LIST
21500: PUSH
21501: LD_INT 0
21503: PUSH
21504: LD_INT 1
21506: NEG
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: PUSH
21512: LD_INT 1
21514: PUSH
21515: LD_INT 0
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: PUSH
21522: LD_INT 1
21524: PUSH
21525: LD_INT 1
21527: PUSH
21528: EMPTY
21529: LIST
21530: LIST
21531: PUSH
21532: LD_INT 0
21534: PUSH
21535: LD_INT 1
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: PUSH
21542: LD_INT 1
21544: NEG
21545: PUSH
21546: LD_INT 0
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: PUSH
21553: LD_INT 1
21555: NEG
21556: PUSH
21557: LD_INT 1
21559: NEG
21560: PUSH
21561: EMPTY
21562: LIST
21563: LIST
21564: PUSH
21565: LD_INT 1
21567: NEG
21568: PUSH
21569: LD_INT 2
21571: NEG
21572: PUSH
21573: EMPTY
21574: LIST
21575: LIST
21576: PUSH
21577: LD_INT 0
21579: PUSH
21580: LD_INT 2
21582: NEG
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: LD_INT 1
21590: PUSH
21591: LD_INT 1
21593: NEG
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: PUSH
21599: LD_INT 2
21601: PUSH
21602: LD_INT 0
21604: PUSH
21605: EMPTY
21606: LIST
21607: LIST
21608: PUSH
21609: LD_INT 2
21611: PUSH
21612: LD_INT 1
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: LD_INT 2
21621: PUSH
21622: LD_INT 2
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: PUSH
21629: LD_INT 1
21631: PUSH
21632: LD_INT 2
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PUSH
21639: LD_INT 0
21641: PUSH
21642: LD_INT 2
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PUSH
21649: LD_INT 1
21651: NEG
21652: PUSH
21653: LD_INT 1
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: PUSH
21660: LD_INT 2
21662: NEG
21663: PUSH
21664: LD_INT 0
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: PUSH
21671: LD_INT 2
21673: NEG
21674: PUSH
21675: LD_INT 1
21677: NEG
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: PUSH
21683: LD_INT 2
21685: NEG
21686: PUSH
21687: LD_INT 2
21689: NEG
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: PUSH
21695: LD_INT 3
21697: PUSH
21698: LD_INT 1
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: PUSH
21705: LD_INT 3
21707: PUSH
21708: LD_INT 2
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: PUSH
21715: LD_INT 2
21717: PUSH
21718: LD_INT 3
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: PUSH
21725: LD_INT 1
21727: PUSH
21728: LD_INT 3
21730: PUSH
21731: EMPTY
21732: LIST
21733: LIST
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21760: LD_ADDR_VAR 0 26
21764: PUSH
21765: LD_INT 0
21767: PUSH
21768: LD_INT 0
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: PUSH
21775: LD_INT 0
21777: PUSH
21778: LD_INT 1
21780: NEG
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: PUSH
21786: LD_INT 1
21788: PUSH
21789: LD_INT 0
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: PUSH
21796: LD_INT 1
21798: PUSH
21799: LD_INT 1
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: PUSH
21806: LD_INT 0
21808: PUSH
21809: LD_INT 1
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: PUSH
21816: LD_INT 1
21818: NEG
21819: PUSH
21820: LD_INT 0
21822: PUSH
21823: EMPTY
21824: LIST
21825: LIST
21826: PUSH
21827: LD_INT 1
21829: NEG
21830: PUSH
21831: LD_INT 1
21833: NEG
21834: PUSH
21835: EMPTY
21836: LIST
21837: LIST
21838: PUSH
21839: LD_INT 1
21841: NEG
21842: PUSH
21843: LD_INT 2
21845: NEG
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: PUSH
21851: LD_INT 0
21853: PUSH
21854: LD_INT 2
21856: NEG
21857: PUSH
21858: EMPTY
21859: LIST
21860: LIST
21861: PUSH
21862: LD_INT 1
21864: PUSH
21865: LD_INT 1
21867: NEG
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: PUSH
21873: LD_INT 2
21875: PUSH
21876: LD_INT 0
21878: PUSH
21879: EMPTY
21880: LIST
21881: LIST
21882: PUSH
21883: LD_INT 2
21885: PUSH
21886: LD_INT 1
21888: PUSH
21889: EMPTY
21890: LIST
21891: LIST
21892: PUSH
21893: LD_INT 2
21895: PUSH
21896: LD_INT 2
21898: PUSH
21899: EMPTY
21900: LIST
21901: LIST
21902: PUSH
21903: LD_INT 1
21905: PUSH
21906: LD_INT 2
21908: PUSH
21909: EMPTY
21910: LIST
21911: LIST
21912: PUSH
21913: LD_INT 0
21915: PUSH
21916: LD_INT 2
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: PUSH
21923: LD_INT 1
21925: NEG
21926: PUSH
21927: LD_INT 1
21929: PUSH
21930: EMPTY
21931: LIST
21932: LIST
21933: PUSH
21934: LD_INT 2
21936: NEG
21937: PUSH
21938: LD_INT 0
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: PUSH
21945: LD_INT 2
21947: NEG
21948: PUSH
21949: LD_INT 1
21951: NEG
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: PUSH
21957: LD_INT 2
21959: NEG
21960: PUSH
21961: LD_INT 2
21963: NEG
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: PUSH
21969: LD_INT 2
21971: PUSH
21972: LD_INT 3
21974: PUSH
21975: EMPTY
21976: LIST
21977: LIST
21978: PUSH
21979: LD_INT 1
21981: PUSH
21982: LD_INT 3
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: PUSH
21989: LD_INT 1
21991: NEG
21992: PUSH
21993: LD_INT 2
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: PUSH
22000: LD_INT 2
22002: NEG
22003: PUSH
22004: LD_INT 1
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22036: LD_ADDR_VAR 0 27
22040: PUSH
22041: LD_INT 0
22043: PUSH
22044: LD_INT 0
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: PUSH
22051: LD_INT 0
22053: PUSH
22054: LD_INT 1
22056: NEG
22057: PUSH
22058: EMPTY
22059: LIST
22060: LIST
22061: PUSH
22062: LD_INT 1
22064: PUSH
22065: LD_INT 0
22067: PUSH
22068: EMPTY
22069: LIST
22070: LIST
22071: PUSH
22072: LD_INT 1
22074: PUSH
22075: LD_INT 1
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: PUSH
22082: LD_INT 0
22084: PUSH
22085: LD_INT 1
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: PUSH
22092: LD_INT 1
22094: NEG
22095: PUSH
22096: LD_INT 0
22098: PUSH
22099: EMPTY
22100: LIST
22101: LIST
22102: PUSH
22103: LD_INT 1
22105: NEG
22106: PUSH
22107: LD_INT 1
22109: NEG
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: PUSH
22115: LD_INT 1
22117: NEG
22118: PUSH
22119: LD_INT 2
22121: NEG
22122: PUSH
22123: EMPTY
22124: LIST
22125: LIST
22126: PUSH
22127: LD_INT 0
22129: PUSH
22130: LD_INT 2
22132: NEG
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: PUSH
22138: LD_INT 1
22140: PUSH
22141: LD_INT 1
22143: NEG
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: PUSH
22149: LD_INT 2
22151: PUSH
22152: LD_INT 0
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: PUSH
22159: LD_INT 2
22161: PUSH
22162: LD_INT 1
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: PUSH
22169: LD_INT 2
22171: PUSH
22172: LD_INT 2
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: PUSH
22179: LD_INT 1
22181: PUSH
22182: LD_INT 2
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: PUSH
22189: LD_INT 0
22191: PUSH
22192: LD_INT 2
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: PUSH
22199: LD_INT 1
22201: NEG
22202: PUSH
22203: LD_INT 1
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PUSH
22210: LD_INT 2
22212: NEG
22213: PUSH
22214: LD_INT 0
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: LD_INT 2
22223: NEG
22224: PUSH
22225: LD_INT 1
22227: NEG
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PUSH
22233: LD_INT 2
22235: NEG
22236: PUSH
22237: LD_INT 2
22239: NEG
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: PUSH
22245: LD_INT 1
22247: NEG
22248: PUSH
22249: LD_INT 2
22251: PUSH
22252: EMPTY
22253: LIST
22254: LIST
22255: PUSH
22256: LD_INT 2
22258: NEG
22259: PUSH
22260: LD_INT 1
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: PUSH
22267: LD_INT 3
22269: NEG
22270: PUSH
22271: LD_INT 1
22273: NEG
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: PUSH
22279: LD_INT 3
22281: NEG
22282: PUSH
22283: LD_INT 2
22285: NEG
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: PUSH
22291: EMPTY
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22316: LD_ADDR_VAR 0 28
22320: PUSH
22321: LD_INT 0
22323: PUSH
22324: LD_INT 0
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: PUSH
22331: LD_INT 0
22333: PUSH
22334: LD_INT 1
22336: NEG
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: PUSH
22342: LD_INT 1
22344: PUSH
22345: LD_INT 0
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: PUSH
22352: LD_INT 1
22354: PUSH
22355: LD_INT 1
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: PUSH
22362: LD_INT 0
22364: PUSH
22365: LD_INT 1
22367: PUSH
22368: EMPTY
22369: LIST
22370: LIST
22371: PUSH
22372: LD_INT 1
22374: NEG
22375: PUSH
22376: LD_INT 0
22378: PUSH
22379: EMPTY
22380: LIST
22381: LIST
22382: PUSH
22383: LD_INT 1
22385: NEG
22386: PUSH
22387: LD_INT 1
22389: NEG
22390: PUSH
22391: EMPTY
22392: LIST
22393: LIST
22394: PUSH
22395: LD_INT 1
22397: NEG
22398: PUSH
22399: LD_INT 2
22401: NEG
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: PUSH
22407: LD_INT 0
22409: PUSH
22410: LD_INT 2
22412: NEG
22413: PUSH
22414: EMPTY
22415: LIST
22416: LIST
22417: PUSH
22418: LD_INT 1
22420: PUSH
22421: LD_INT 1
22423: NEG
22424: PUSH
22425: EMPTY
22426: LIST
22427: LIST
22428: PUSH
22429: LD_INT 2
22431: PUSH
22432: LD_INT 0
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: PUSH
22439: LD_INT 2
22441: PUSH
22442: LD_INT 1
22444: PUSH
22445: EMPTY
22446: LIST
22447: LIST
22448: PUSH
22449: LD_INT 2
22451: PUSH
22452: LD_INT 2
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: PUSH
22459: LD_INT 1
22461: PUSH
22462: LD_INT 2
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: PUSH
22469: LD_INT 0
22471: PUSH
22472: LD_INT 2
22474: PUSH
22475: EMPTY
22476: LIST
22477: LIST
22478: PUSH
22479: LD_INT 1
22481: NEG
22482: PUSH
22483: LD_INT 1
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: PUSH
22490: LD_INT 2
22492: NEG
22493: PUSH
22494: LD_INT 0
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: PUSH
22501: LD_INT 2
22503: NEG
22504: PUSH
22505: LD_INT 1
22507: NEG
22508: PUSH
22509: EMPTY
22510: LIST
22511: LIST
22512: PUSH
22513: LD_INT 2
22515: NEG
22516: PUSH
22517: LD_INT 2
22519: NEG
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: PUSH
22525: LD_INT 2
22527: NEG
22528: PUSH
22529: LD_INT 3
22531: NEG
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: PUSH
22537: LD_INT 1
22539: NEG
22540: PUSH
22541: LD_INT 3
22543: NEG
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PUSH
22549: LD_INT 3
22551: NEG
22552: PUSH
22553: LD_INT 1
22555: NEG
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: PUSH
22561: LD_INT 3
22563: NEG
22564: PUSH
22565: LD_INT 2
22567: NEG
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22598: LD_ADDR_VAR 0 29
22602: PUSH
22603: LD_INT 0
22605: PUSH
22606: LD_INT 0
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: PUSH
22613: LD_INT 0
22615: PUSH
22616: LD_INT 1
22618: NEG
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: PUSH
22624: LD_INT 1
22626: PUSH
22627: LD_INT 0
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: LD_INT 1
22636: PUSH
22637: LD_INT 1
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: PUSH
22644: LD_INT 0
22646: PUSH
22647: LD_INT 1
22649: PUSH
22650: EMPTY
22651: LIST
22652: LIST
22653: PUSH
22654: LD_INT 1
22656: NEG
22657: PUSH
22658: LD_INT 0
22660: PUSH
22661: EMPTY
22662: LIST
22663: LIST
22664: PUSH
22665: LD_INT 1
22667: NEG
22668: PUSH
22669: LD_INT 1
22671: NEG
22672: PUSH
22673: EMPTY
22674: LIST
22675: LIST
22676: PUSH
22677: LD_INT 1
22679: NEG
22680: PUSH
22681: LD_INT 2
22683: NEG
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: PUSH
22689: LD_INT 0
22691: PUSH
22692: LD_INT 2
22694: NEG
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: PUSH
22700: LD_INT 1
22702: PUSH
22703: LD_INT 1
22705: NEG
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PUSH
22711: LD_INT 2
22713: PUSH
22714: LD_INT 0
22716: PUSH
22717: EMPTY
22718: LIST
22719: LIST
22720: PUSH
22721: LD_INT 2
22723: PUSH
22724: LD_INT 1
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: PUSH
22731: LD_INT 1
22733: PUSH
22734: LD_INT 2
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PUSH
22741: LD_INT 0
22743: PUSH
22744: LD_INT 2
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: PUSH
22751: LD_INT 1
22753: NEG
22754: PUSH
22755: LD_INT 1
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: PUSH
22762: LD_INT 2
22764: NEG
22765: PUSH
22766: LD_INT 1
22768: NEG
22769: PUSH
22770: EMPTY
22771: LIST
22772: LIST
22773: PUSH
22774: LD_INT 2
22776: NEG
22777: PUSH
22778: LD_INT 2
22780: NEG
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: PUSH
22786: LD_INT 2
22788: NEG
22789: PUSH
22790: LD_INT 3
22792: NEG
22793: PUSH
22794: EMPTY
22795: LIST
22796: LIST
22797: PUSH
22798: LD_INT 2
22800: PUSH
22801: LD_INT 1
22803: NEG
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: PUSH
22809: LD_INT 3
22811: PUSH
22812: LD_INT 1
22814: PUSH
22815: EMPTY
22816: LIST
22817: LIST
22818: PUSH
22819: LD_INT 1
22821: PUSH
22822: LD_INT 3
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: PUSH
22829: LD_INT 1
22831: NEG
22832: PUSH
22833: LD_INT 2
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 3
22842: NEG
22843: PUSH
22844: LD_INT 2
22846: NEG
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: PUSH
22852: EMPTY
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22877: LD_ADDR_VAR 0 30
22881: PUSH
22882: LD_INT 0
22884: PUSH
22885: LD_INT 0
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: PUSH
22892: LD_INT 0
22894: PUSH
22895: LD_INT 1
22897: NEG
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: PUSH
22903: LD_INT 1
22905: PUSH
22906: LD_INT 0
22908: PUSH
22909: EMPTY
22910: LIST
22911: LIST
22912: PUSH
22913: LD_INT 1
22915: PUSH
22916: LD_INT 1
22918: PUSH
22919: EMPTY
22920: LIST
22921: LIST
22922: PUSH
22923: LD_INT 0
22925: PUSH
22926: LD_INT 1
22928: PUSH
22929: EMPTY
22930: LIST
22931: LIST
22932: PUSH
22933: LD_INT 1
22935: NEG
22936: PUSH
22937: LD_INT 0
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 1
22946: NEG
22947: PUSH
22948: LD_INT 1
22950: NEG
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: PUSH
22956: LD_INT 1
22958: NEG
22959: PUSH
22960: LD_INT 2
22962: NEG
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PUSH
22968: LD_INT 0
22970: PUSH
22971: LD_INT 2
22973: NEG
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: LD_INT 1
22981: PUSH
22982: LD_INT 1
22984: NEG
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PUSH
22990: LD_INT 2
22992: PUSH
22993: LD_INT 0
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: PUSH
23000: LD_INT 2
23002: PUSH
23003: LD_INT 1
23005: PUSH
23006: EMPTY
23007: LIST
23008: LIST
23009: PUSH
23010: LD_INT 2
23012: PUSH
23013: LD_INT 2
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: PUSH
23020: LD_INT 1
23022: PUSH
23023: LD_INT 2
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PUSH
23030: LD_INT 1
23032: NEG
23033: PUSH
23034: LD_INT 1
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: PUSH
23041: LD_INT 2
23043: NEG
23044: PUSH
23045: LD_INT 0
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PUSH
23052: LD_INT 2
23054: NEG
23055: PUSH
23056: LD_INT 1
23058: NEG
23059: PUSH
23060: EMPTY
23061: LIST
23062: LIST
23063: PUSH
23064: LD_INT 1
23066: NEG
23067: PUSH
23068: LD_INT 3
23070: NEG
23071: PUSH
23072: EMPTY
23073: LIST
23074: LIST
23075: PUSH
23076: LD_INT 1
23078: PUSH
23079: LD_INT 2
23081: NEG
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: PUSH
23087: LD_INT 3
23089: PUSH
23090: LD_INT 2
23092: PUSH
23093: EMPTY
23094: LIST
23095: LIST
23096: PUSH
23097: LD_INT 2
23099: PUSH
23100: LD_INT 3
23102: PUSH
23103: EMPTY
23104: LIST
23105: LIST
23106: PUSH
23107: LD_INT 2
23109: NEG
23110: PUSH
23111: LD_INT 1
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: PUSH
23118: LD_INT 3
23120: NEG
23121: PUSH
23122: LD_INT 1
23124: NEG
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PUSH
23130: EMPTY
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23155: LD_ADDR_VAR 0 31
23159: PUSH
23160: LD_INT 0
23162: PUSH
23163: LD_INT 0
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: PUSH
23170: LD_INT 0
23172: PUSH
23173: LD_INT 1
23175: NEG
23176: PUSH
23177: EMPTY
23178: LIST
23179: LIST
23180: PUSH
23181: LD_INT 1
23183: PUSH
23184: LD_INT 0
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PUSH
23191: LD_INT 1
23193: PUSH
23194: LD_INT 1
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: PUSH
23201: LD_INT 0
23203: PUSH
23204: LD_INT 1
23206: PUSH
23207: EMPTY
23208: LIST
23209: LIST
23210: PUSH
23211: LD_INT 1
23213: NEG
23214: PUSH
23215: LD_INT 0
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: PUSH
23222: LD_INT 1
23224: NEG
23225: PUSH
23226: LD_INT 1
23228: NEG
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: PUSH
23234: LD_INT 1
23236: NEG
23237: PUSH
23238: LD_INT 2
23240: NEG
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: PUSH
23246: LD_INT 1
23248: PUSH
23249: LD_INT 1
23251: NEG
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: PUSH
23257: LD_INT 2
23259: PUSH
23260: LD_INT 0
23262: PUSH
23263: EMPTY
23264: LIST
23265: LIST
23266: PUSH
23267: LD_INT 2
23269: PUSH
23270: LD_INT 1
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: PUSH
23277: LD_INT 2
23279: PUSH
23280: LD_INT 2
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: PUSH
23287: LD_INT 1
23289: PUSH
23290: LD_INT 2
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: PUSH
23297: LD_INT 0
23299: PUSH
23300: LD_INT 2
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: PUSH
23307: LD_INT 1
23309: NEG
23310: PUSH
23311: LD_INT 1
23313: PUSH
23314: EMPTY
23315: LIST
23316: LIST
23317: PUSH
23318: LD_INT 2
23320: NEG
23321: PUSH
23322: LD_INT 1
23324: NEG
23325: PUSH
23326: EMPTY
23327: LIST
23328: LIST
23329: PUSH
23330: LD_INT 2
23332: NEG
23333: PUSH
23334: LD_INT 2
23336: NEG
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: PUSH
23342: LD_INT 2
23344: NEG
23345: PUSH
23346: LD_INT 3
23348: NEG
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: PUSH
23354: LD_INT 2
23356: PUSH
23357: LD_INT 1
23359: NEG
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: PUSH
23365: LD_INT 3
23367: PUSH
23368: LD_INT 1
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: PUSH
23375: LD_INT 1
23377: PUSH
23378: LD_INT 3
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PUSH
23385: LD_INT 1
23387: NEG
23388: PUSH
23389: LD_INT 2
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 3
23398: NEG
23399: PUSH
23400: LD_INT 2
23402: NEG
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23433: LD_ADDR_VAR 0 32
23437: PUSH
23438: LD_INT 0
23440: PUSH
23441: LD_INT 0
23443: PUSH
23444: EMPTY
23445: LIST
23446: LIST
23447: PUSH
23448: LD_INT 0
23450: PUSH
23451: LD_INT 1
23453: NEG
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: PUSH
23459: LD_INT 1
23461: PUSH
23462: LD_INT 0
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: PUSH
23469: LD_INT 1
23471: PUSH
23472: LD_INT 1
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: PUSH
23479: LD_INT 0
23481: PUSH
23482: LD_INT 1
23484: PUSH
23485: EMPTY
23486: LIST
23487: LIST
23488: PUSH
23489: LD_INT 1
23491: NEG
23492: PUSH
23493: LD_INT 0
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: PUSH
23500: LD_INT 1
23502: NEG
23503: PUSH
23504: LD_INT 1
23506: NEG
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: PUSH
23512: LD_INT 1
23514: NEG
23515: PUSH
23516: LD_INT 2
23518: NEG
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: PUSH
23524: LD_INT 0
23526: PUSH
23527: LD_INT 2
23529: NEG
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PUSH
23535: LD_INT 1
23537: PUSH
23538: LD_INT 1
23540: NEG
23541: PUSH
23542: EMPTY
23543: LIST
23544: LIST
23545: PUSH
23546: LD_INT 2
23548: PUSH
23549: LD_INT 1
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: PUSH
23556: LD_INT 2
23558: PUSH
23559: LD_INT 2
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PUSH
23566: LD_INT 1
23568: PUSH
23569: LD_INT 2
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PUSH
23576: LD_INT 0
23578: PUSH
23579: LD_INT 2
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PUSH
23586: LD_INT 1
23588: NEG
23589: PUSH
23590: LD_INT 1
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: PUSH
23597: LD_INT 2
23599: NEG
23600: PUSH
23601: LD_INT 0
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: PUSH
23608: LD_INT 2
23610: NEG
23611: PUSH
23612: LD_INT 1
23614: NEG
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: PUSH
23620: LD_INT 1
23622: NEG
23623: PUSH
23624: LD_INT 3
23626: NEG
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: PUSH
23632: LD_INT 1
23634: PUSH
23635: LD_INT 2
23637: NEG
23638: PUSH
23639: EMPTY
23640: LIST
23641: LIST
23642: PUSH
23643: LD_INT 3
23645: PUSH
23646: LD_INT 2
23648: PUSH
23649: EMPTY
23650: LIST
23651: LIST
23652: PUSH
23653: LD_INT 2
23655: PUSH
23656: LD_INT 3
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: PUSH
23663: LD_INT 2
23665: NEG
23666: PUSH
23667: LD_INT 1
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: PUSH
23674: LD_INT 3
23676: NEG
23677: PUSH
23678: LD_INT 1
23680: NEG
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23711: LD_ADDR_VAR 0 33
23715: PUSH
23716: LD_INT 0
23718: PUSH
23719: LD_INT 0
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: PUSH
23726: LD_INT 0
23728: PUSH
23729: LD_INT 1
23731: NEG
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: PUSH
23737: LD_INT 1
23739: PUSH
23740: LD_INT 0
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: PUSH
23747: LD_INT 1
23749: PUSH
23750: LD_INT 1
23752: PUSH
23753: EMPTY
23754: LIST
23755: LIST
23756: PUSH
23757: LD_INT 0
23759: PUSH
23760: LD_INT 1
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: PUSH
23767: LD_INT 1
23769: NEG
23770: PUSH
23771: LD_INT 0
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 1
23780: NEG
23781: PUSH
23782: LD_INT 1
23784: NEG
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: PUSH
23790: LD_INT 1
23792: NEG
23793: PUSH
23794: LD_INT 2
23796: NEG
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PUSH
23802: LD_INT 1
23804: PUSH
23805: LD_INT 1
23807: NEG
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PUSH
23813: LD_INT 2
23815: PUSH
23816: LD_INT 0
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: PUSH
23823: LD_INT 2
23825: PUSH
23826: LD_INT 1
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 1
23835: PUSH
23836: LD_INT 2
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: LD_INT 0
23845: PUSH
23846: LD_INT 2
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: PUSH
23853: LD_INT 1
23855: NEG
23856: PUSH
23857: LD_INT 1
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: PUSH
23864: LD_INT 2
23866: NEG
23867: PUSH
23868: LD_INT 0
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: PUSH
23875: LD_INT 2
23877: NEG
23878: PUSH
23879: LD_INT 1
23881: NEG
23882: PUSH
23883: EMPTY
23884: LIST
23885: LIST
23886: PUSH
23887: LD_INT 2
23889: NEG
23890: PUSH
23891: LD_INT 2
23893: NEG
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: PUSH
23899: LD_INT 2
23901: NEG
23902: PUSH
23903: LD_INT 3
23905: NEG
23906: PUSH
23907: EMPTY
23908: LIST
23909: LIST
23910: PUSH
23911: LD_INT 2
23913: PUSH
23914: LD_INT 1
23916: NEG
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PUSH
23922: LD_INT 3
23924: PUSH
23925: LD_INT 1
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: PUSH
23932: LD_INT 1
23934: PUSH
23935: LD_INT 3
23937: PUSH
23938: EMPTY
23939: LIST
23940: LIST
23941: PUSH
23942: LD_INT 1
23944: NEG
23945: PUSH
23946: LD_INT 2
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: LD_INT 3
23955: NEG
23956: PUSH
23957: LD_INT 2
23959: NEG
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: PUSH
23965: EMPTY
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23990: LD_ADDR_VAR 0 34
23994: PUSH
23995: LD_INT 0
23997: PUSH
23998: LD_INT 0
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: LD_INT 0
24007: PUSH
24008: LD_INT 1
24010: NEG
24011: PUSH
24012: EMPTY
24013: LIST
24014: LIST
24015: PUSH
24016: LD_INT 1
24018: PUSH
24019: LD_INT 0
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: PUSH
24026: LD_INT 1
24028: PUSH
24029: LD_INT 1
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: PUSH
24036: LD_INT 0
24038: PUSH
24039: LD_INT 1
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: PUSH
24046: LD_INT 1
24048: NEG
24049: PUSH
24050: LD_INT 0
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: PUSH
24057: LD_INT 1
24059: NEG
24060: PUSH
24061: LD_INT 1
24063: NEG
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: PUSH
24069: LD_INT 1
24071: NEG
24072: PUSH
24073: LD_INT 2
24075: NEG
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: PUSH
24081: LD_INT 0
24083: PUSH
24084: LD_INT 2
24086: NEG
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: PUSH
24092: LD_INT 1
24094: PUSH
24095: LD_INT 1
24097: NEG
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: PUSH
24103: LD_INT 2
24105: PUSH
24106: LD_INT 1
24108: PUSH
24109: EMPTY
24110: LIST
24111: LIST
24112: PUSH
24113: LD_INT 2
24115: PUSH
24116: LD_INT 2
24118: PUSH
24119: EMPTY
24120: LIST
24121: LIST
24122: PUSH
24123: LD_INT 1
24125: PUSH
24126: LD_INT 2
24128: PUSH
24129: EMPTY
24130: LIST
24131: LIST
24132: PUSH
24133: LD_INT 1
24135: NEG
24136: PUSH
24137: LD_INT 1
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: PUSH
24144: LD_INT 2
24146: NEG
24147: PUSH
24148: LD_INT 0
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PUSH
24155: LD_INT 2
24157: NEG
24158: PUSH
24159: LD_INT 1
24161: NEG
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: PUSH
24167: LD_INT 2
24169: NEG
24170: PUSH
24171: LD_INT 2
24173: NEG
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 1
24181: NEG
24182: PUSH
24183: LD_INT 3
24185: NEG
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: PUSH
24191: LD_INT 1
24193: PUSH
24194: LD_INT 2
24196: NEG
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: PUSH
24202: LD_INT 3
24204: PUSH
24205: LD_INT 2
24207: PUSH
24208: EMPTY
24209: LIST
24210: LIST
24211: PUSH
24212: LD_INT 2
24214: PUSH
24215: LD_INT 3
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 2
24224: NEG
24225: PUSH
24226: LD_INT 1
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 3
24235: NEG
24236: PUSH
24237: LD_INT 1
24239: NEG
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24270: LD_ADDR_VAR 0 35
24274: PUSH
24275: LD_INT 0
24277: PUSH
24278: LD_INT 0
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: PUSH
24285: LD_INT 0
24287: PUSH
24288: LD_INT 1
24290: NEG
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PUSH
24296: LD_INT 1
24298: PUSH
24299: LD_INT 0
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 1
24308: PUSH
24309: LD_INT 1
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: PUSH
24316: LD_INT 0
24318: PUSH
24319: LD_INT 1
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: PUSH
24326: LD_INT 1
24328: NEG
24329: PUSH
24330: LD_INT 0
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: PUSH
24337: LD_INT 1
24339: NEG
24340: PUSH
24341: LD_INT 1
24343: NEG
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: PUSH
24349: LD_INT 2
24351: PUSH
24352: LD_INT 1
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PUSH
24359: LD_INT 2
24361: NEG
24362: PUSH
24363: LD_INT 1
24365: NEG
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24382: LD_ADDR_VAR 0 36
24386: PUSH
24387: LD_INT 0
24389: PUSH
24390: LD_INT 0
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: PUSH
24397: LD_INT 0
24399: PUSH
24400: LD_INT 1
24402: NEG
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: PUSH
24408: LD_INT 1
24410: PUSH
24411: LD_INT 0
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: PUSH
24418: LD_INT 1
24420: PUSH
24421: LD_INT 1
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: PUSH
24428: LD_INT 0
24430: PUSH
24431: LD_INT 1
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: PUSH
24438: LD_INT 1
24440: NEG
24441: PUSH
24442: LD_INT 0
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: PUSH
24449: LD_INT 1
24451: NEG
24452: PUSH
24453: LD_INT 1
24455: NEG
24456: PUSH
24457: EMPTY
24458: LIST
24459: LIST
24460: PUSH
24461: LD_INT 1
24463: NEG
24464: PUSH
24465: LD_INT 2
24467: NEG
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: PUSH
24473: LD_INT 1
24475: PUSH
24476: LD_INT 2
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24494: LD_ADDR_VAR 0 37
24498: PUSH
24499: LD_INT 0
24501: PUSH
24502: LD_INT 0
24504: PUSH
24505: EMPTY
24506: LIST
24507: LIST
24508: PUSH
24509: LD_INT 0
24511: PUSH
24512: LD_INT 1
24514: NEG
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PUSH
24520: LD_INT 1
24522: PUSH
24523: LD_INT 0
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: LD_INT 1
24532: PUSH
24533: LD_INT 1
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: LD_INT 0
24542: PUSH
24543: LD_INT 1
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: PUSH
24550: LD_INT 1
24552: NEG
24553: PUSH
24554: LD_INT 0
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: PUSH
24561: LD_INT 1
24563: NEG
24564: PUSH
24565: LD_INT 1
24567: NEG
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: PUSH
24573: LD_INT 1
24575: PUSH
24576: LD_INT 1
24578: NEG
24579: PUSH
24580: EMPTY
24581: LIST
24582: LIST
24583: PUSH
24584: LD_INT 1
24586: NEG
24587: PUSH
24588: LD_INT 1
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24606: LD_ADDR_VAR 0 38
24610: PUSH
24611: LD_INT 0
24613: PUSH
24614: LD_INT 0
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PUSH
24621: LD_INT 0
24623: PUSH
24624: LD_INT 1
24626: NEG
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: PUSH
24632: LD_INT 1
24634: PUSH
24635: LD_INT 0
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: PUSH
24642: LD_INT 1
24644: PUSH
24645: LD_INT 1
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: PUSH
24652: LD_INT 0
24654: PUSH
24655: LD_INT 1
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: PUSH
24662: LD_INT 1
24664: NEG
24665: PUSH
24666: LD_INT 0
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: LD_INT 1
24675: NEG
24676: PUSH
24677: LD_INT 1
24679: NEG
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 2
24687: PUSH
24688: LD_INT 1
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 2
24697: NEG
24698: PUSH
24699: LD_INT 1
24701: NEG
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24718: LD_ADDR_VAR 0 39
24722: PUSH
24723: LD_INT 0
24725: PUSH
24726: LD_INT 0
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: PUSH
24733: LD_INT 0
24735: PUSH
24736: LD_INT 1
24738: NEG
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PUSH
24744: LD_INT 1
24746: PUSH
24747: LD_INT 0
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PUSH
24754: LD_INT 1
24756: PUSH
24757: LD_INT 1
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: PUSH
24764: LD_INT 0
24766: PUSH
24767: LD_INT 1
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: PUSH
24774: LD_INT 1
24776: NEG
24777: PUSH
24778: LD_INT 0
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PUSH
24785: LD_INT 1
24787: NEG
24788: PUSH
24789: LD_INT 1
24791: NEG
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: PUSH
24797: LD_INT 1
24799: NEG
24800: PUSH
24801: LD_INT 2
24803: NEG
24804: PUSH
24805: EMPTY
24806: LIST
24807: LIST
24808: PUSH
24809: LD_INT 1
24811: PUSH
24812: LD_INT 2
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24830: LD_ADDR_VAR 0 40
24834: PUSH
24835: LD_INT 0
24837: PUSH
24838: LD_INT 0
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: PUSH
24845: LD_INT 0
24847: PUSH
24848: LD_INT 1
24850: NEG
24851: PUSH
24852: EMPTY
24853: LIST
24854: LIST
24855: PUSH
24856: LD_INT 1
24858: PUSH
24859: LD_INT 0
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: PUSH
24866: LD_INT 1
24868: PUSH
24869: LD_INT 1
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: LD_INT 0
24878: PUSH
24879: LD_INT 1
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: PUSH
24886: LD_INT 1
24888: NEG
24889: PUSH
24890: LD_INT 0
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: LD_INT 1
24899: NEG
24900: PUSH
24901: LD_INT 1
24903: NEG
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: PUSH
24909: LD_INT 1
24911: PUSH
24912: LD_INT 1
24914: NEG
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PUSH
24920: LD_INT 1
24922: NEG
24923: PUSH
24924: LD_INT 1
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24942: LD_ADDR_VAR 0 41
24946: PUSH
24947: LD_INT 0
24949: PUSH
24950: LD_INT 0
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: PUSH
24957: LD_INT 0
24959: PUSH
24960: LD_INT 1
24962: NEG
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: PUSH
24968: LD_INT 1
24970: PUSH
24971: LD_INT 0
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 1
24980: PUSH
24981: LD_INT 1
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: PUSH
24988: LD_INT 0
24990: PUSH
24991: LD_INT 1
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: PUSH
24998: LD_INT 1
25000: NEG
25001: PUSH
25002: LD_INT 0
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: LD_INT 1
25011: NEG
25012: PUSH
25013: LD_INT 1
25015: NEG
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 1
25023: NEG
25024: PUSH
25025: LD_INT 2
25027: NEG
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PUSH
25033: LD_INT 1
25035: PUSH
25036: LD_INT 1
25038: NEG
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: PUSH
25044: LD_INT 2
25046: PUSH
25047: LD_INT 0
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: LD_INT 2
25056: PUSH
25057: LD_INT 1
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: PUSH
25064: LD_INT 2
25066: PUSH
25067: LD_INT 2
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PUSH
25074: LD_INT 1
25076: PUSH
25077: LD_INT 2
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: PUSH
25084: LD_INT 1
25086: NEG
25087: PUSH
25088: LD_INT 1
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: LD_INT 2
25097: NEG
25098: PUSH
25099: LD_INT 0
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: PUSH
25106: LD_INT 2
25108: NEG
25109: PUSH
25110: LD_INT 1
25112: NEG
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: PUSH
25118: LD_INT 2
25120: NEG
25121: PUSH
25122: LD_INT 2
25124: NEG
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PUSH
25130: LD_INT 2
25132: NEG
25133: PUSH
25134: LD_INT 3
25136: NEG
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: PUSH
25142: LD_INT 2
25144: PUSH
25145: LD_INT 1
25147: NEG
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: PUSH
25153: LD_INT 3
25155: PUSH
25156: LD_INT 0
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PUSH
25163: LD_INT 3
25165: PUSH
25166: LD_INT 1
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: PUSH
25173: LD_INT 3
25175: PUSH
25176: LD_INT 2
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: PUSH
25183: LD_INT 3
25185: PUSH
25186: LD_INT 3
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: PUSH
25193: LD_INT 2
25195: PUSH
25196: LD_INT 3
25198: PUSH
25199: EMPTY
25200: LIST
25201: LIST
25202: PUSH
25203: LD_INT 2
25205: NEG
25206: PUSH
25207: LD_INT 1
25209: PUSH
25210: EMPTY
25211: LIST
25212: LIST
25213: PUSH
25214: LD_INT 3
25216: NEG
25217: PUSH
25218: LD_INT 0
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PUSH
25225: LD_INT 3
25227: NEG
25228: PUSH
25229: LD_INT 1
25231: NEG
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PUSH
25237: LD_INT 3
25239: NEG
25240: PUSH
25241: LD_INT 2
25243: NEG
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PUSH
25249: LD_INT 3
25251: NEG
25252: PUSH
25253: LD_INT 3
25255: NEG
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25292: LD_ADDR_VAR 0 42
25296: PUSH
25297: LD_INT 0
25299: PUSH
25300: LD_INT 0
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: PUSH
25307: LD_INT 0
25309: PUSH
25310: LD_INT 1
25312: NEG
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: PUSH
25318: LD_INT 1
25320: PUSH
25321: LD_INT 0
25323: PUSH
25324: EMPTY
25325: LIST
25326: LIST
25327: PUSH
25328: LD_INT 1
25330: PUSH
25331: LD_INT 1
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: PUSH
25338: LD_INT 0
25340: PUSH
25341: LD_INT 1
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: PUSH
25348: LD_INT 1
25350: NEG
25351: PUSH
25352: LD_INT 0
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 1
25361: NEG
25362: PUSH
25363: LD_INT 1
25365: NEG
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: LD_INT 1
25373: NEG
25374: PUSH
25375: LD_INT 2
25377: NEG
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: LD_INT 0
25385: PUSH
25386: LD_INT 2
25388: NEG
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: PUSH
25394: LD_INT 1
25396: PUSH
25397: LD_INT 1
25399: NEG
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: PUSH
25405: LD_INT 2
25407: PUSH
25408: LD_INT 1
25410: PUSH
25411: EMPTY
25412: LIST
25413: LIST
25414: PUSH
25415: LD_INT 2
25417: PUSH
25418: LD_INT 2
25420: PUSH
25421: EMPTY
25422: LIST
25423: LIST
25424: PUSH
25425: LD_INT 1
25427: PUSH
25428: LD_INT 2
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: PUSH
25435: LD_INT 0
25437: PUSH
25438: LD_INT 2
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: PUSH
25445: LD_INT 1
25447: NEG
25448: PUSH
25449: LD_INT 1
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: PUSH
25456: LD_INT 2
25458: NEG
25459: PUSH
25460: LD_INT 1
25462: NEG
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: LD_INT 2
25470: NEG
25471: PUSH
25472: LD_INT 2
25474: NEG
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: PUSH
25480: LD_INT 2
25482: NEG
25483: PUSH
25484: LD_INT 3
25486: NEG
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: PUSH
25492: LD_INT 1
25494: NEG
25495: PUSH
25496: LD_INT 3
25498: NEG
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PUSH
25504: LD_INT 0
25506: PUSH
25507: LD_INT 3
25509: NEG
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: PUSH
25515: LD_INT 1
25517: PUSH
25518: LD_INT 2
25520: NEG
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: PUSH
25526: LD_INT 3
25528: PUSH
25529: LD_INT 2
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: PUSH
25536: LD_INT 3
25538: PUSH
25539: LD_INT 3
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: PUSH
25546: LD_INT 2
25548: PUSH
25549: LD_INT 3
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: PUSH
25556: LD_INT 1
25558: PUSH
25559: LD_INT 3
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PUSH
25566: LD_INT 0
25568: PUSH
25569: LD_INT 3
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: LD_INT 1
25578: NEG
25579: PUSH
25580: LD_INT 2
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: PUSH
25587: LD_INT 3
25589: NEG
25590: PUSH
25591: LD_INT 2
25593: NEG
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: LD_INT 3
25601: NEG
25602: PUSH
25603: LD_INT 3
25605: NEG
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: LIST
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25642: LD_ADDR_VAR 0 43
25646: PUSH
25647: LD_INT 0
25649: PUSH
25650: LD_INT 0
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: LD_INT 0
25659: PUSH
25660: LD_INT 1
25662: NEG
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PUSH
25668: LD_INT 1
25670: PUSH
25671: LD_INT 0
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: PUSH
25678: LD_INT 1
25680: PUSH
25681: LD_INT 1
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: LD_INT 0
25690: PUSH
25691: LD_INT 1
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: PUSH
25698: LD_INT 1
25700: NEG
25701: PUSH
25702: LD_INT 0
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: LD_INT 1
25711: NEG
25712: PUSH
25713: LD_INT 1
25715: NEG
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 1
25723: NEG
25724: PUSH
25725: LD_INT 2
25727: NEG
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PUSH
25733: LD_INT 0
25735: PUSH
25736: LD_INT 2
25738: NEG
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PUSH
25744: LD_INT 1
25746: PUSH
25747: LD_INT 1
25749: NEG
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: LD_INT 2
25757: PUSH
25758: LD_INT 0
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: PUSH
25765: LD_INT 2
25767: PUSH
25768: LD_INT 1
25770: PUSH
25771: EMPTY
25772: LIST
25773: LIST
25774: PUSH
25775: LD_INT 1
25777: PUSH
25778: LD_INT 2
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: PUSH
25785: LD_INT 0
25787: PUSH
25788: LD_INT 2
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: PUSH
25795: LD_INT 1
25797: NEG
25798: PUSH
25799: LD_INT 1
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: PUSH
25806: LD_INT 2
25808: NEG
25809: PUSH
25810: LD_INT 0
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PUSH
25817: LD_INT 2
25819: NEG
25820: PUSH
25821: LD_INT 1
25823: NEG
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PUSH
25829: LD_INT 1
25831: NEG
25832: PUSH
25833: LD_INT 3
25835: NEG
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PUSH
25841: LD_INT 0
25843: PUSH
25844: LD_INT 3
25846: NEG
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: PUSH
25852: LD_INT 1
25854: PUSH
25855: LD_INT 2
25857: NEG
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PUSH
25863: LD_INT 2
25865: PUSH
25866: LD_INT 1
25868: NEG
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: LD_INT 3
25876: PUSH
25877: LD_INT 0
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: PUSH
25884: LD_INT 3
25886: PUSH
25887: LD_INT 1
25889: PUSH
25890: EMPTY
25891: LIST
25892: LIST
25893: PUSH
25894: LD_INT 1
25896: PUSH
25897: LD_INT 3
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: PUSH
25904: LD_INT 0
25906: PUSH
25907: LD_INT 3
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: LD_INT 1
25916: NEG
25917: PUSH
25918: LD_INT 2
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: LD_INT 2
25927: NEG
25928: PUSH
25929: LD_INT 1
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 3
25938: NEG
25939: PUSH
25940: LD_INT 0
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PUSH
25947: LD_INT 3
25949: NEG
25950: PUSH
25951: LD_INT 1
25953: NEG
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: LIST
25984: LIST
25985: LIST
25986: LIST
25987: LIST
25988: LIST
25989: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25990: LD_ADDR_VAR 0 44
25994: PUSH
25995: LD_INT 0
25997: PUSH
25998: LD_INT 0
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: PUSH
26005: LD_INT 0
26007: PUSH
26008: LD_INT 1
26010: NEG
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: PUSH
26016: LD_INT 1
26018: PUSH
26019: LD_INT 0
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PUSH
26026: LD_INT 1
26028: PUSH
26029: LD_INT 1
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: LD_INT 0
26038: PUSH
26039: LD_INT 1
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PUSH
26046: LD_INT 1
26048: NEG
26049: PUSH
26050: LD_INT 0
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 1
26059: NEG
26060: PUSH
26061: LD_INT 1
26063: NEG
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: LD_INT 1
26071: NEG
26072: PUSH
26073: LD_INT 2
26075: NEG
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: LD_INT 1
26083: PUSH
26084: LD_INT 1
26086: NEG
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: LD_INT 2
26094: PUSH
26095: LD_INT 0
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: PUSH
26102: LD_INT 2
26104: PUSH
26105: LD_INT 1
26107: PUSH
26108: EMPTY
26109: LIST
26110: LIST
26111: PUSH
26112: LD_INT 2
26114: PUSH
26115: LD_INT 2
26117: PUSH
26118: EMPTY
26119: LIST
26120: LIST
26121: PUSH
26122: LD_INT 1
26124: PUSH
26125: LD_INT 2
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: PUSH
26132: LD_INT 1
26134: NEG
26135: PUSH
26136: LD_INT 1
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: LD_INT 2
26145: NEG
26146: PUSH
26147: LD_INT 0
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 2
26156: NEG
26157: PUSH
26158: LD_INT 1
26160: NEG
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: PUSH
26166: LD_INT 2
26168: NEG
26169: PUSH
26170: LD_INT 2
26172: NEG
26173: PUSH
26174: EMPTY
26175: LIST
26176: LIST
26177: PUSH
26178: LD_INT 2
26180: NEG
26181: PUSH
26182: LD_INT 3
26184: NEG
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: PUSH
26190: LD_INT 2
26192: PUSH
26193: LD_INT 1
26195: NEG
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: PUSH
26201: LD_INT 3
26203: PUSH
26204: LD_INT 0
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PUSH
26211: LD_INT 3
26213: PUSH
26214: LD_INT 1
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: PUSH
26221: LD_INT 3
26223: PUSH
26224: LD_INT 2
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: PUSH
26231: LD_INT 3
26233: PUSH
26234: LD_INT 3
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: LD_INT 2
26243: PUSH
26244: LD_INT 3
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: PUSH
26251: LD_INT 2
26253: NEG
26254: PUSH
26255: LD_INT 1
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PUSH
26262: LD_INT 3
26264: NEG
26265: PUSH
26266: LD_INT 0
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: PUSH
26273: LD_INT 3
26275: NEG
26276: PUSH
26277: LD_INT 1
26279: NEG
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: PUSH
26285: LD_INT 3
26287: NEG
26288: PUSH
26289: LD_INT 2
26291: NEG
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: PUSH
26297: LD_INT 3
26299: NEG
26300: PUSH
26301: LD_INT 3
26303: NEG
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: LIST
26323: LIST
26324: LIST
26325: LIST
26326: LIST
26327: LIST
26328: LIST
26329: LIST
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26340: LD_ADDR_VAR 0 45
26344: PUSH
26345: LD_INT 0
26347: PUSH
26348: LD_INT 0
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: PUSH
26355: LD_INT 0
26357: PUSH
26358: LD_INT 1
26360: NEG
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PUSH
26366: LD_INT 1
26368: PUSH
26369: LD_INT 0
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: LD_INT 1
26378: PUSH
26379: LD_INT 1
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: PUSH
26386: LD_INT 0
26388: PUSH
26389: LD_INT 1
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 1
26398: NEG
26399: PUSH
26400: LD_INT 0
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 1
26409: NEG
26410: PUSH
26411: LD_INT 1
26413: NEG
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: PUSH
26419: LD_INT 1
26421: NEG
26422: PUSH
26423: LD_INT 2
26425: NEG
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: PUSH
26431: LD_INT 0
26433: PUSH
26434: LD_INT 2
26436: NEG
26437: PUSH
26438: EMPTY
26439: LIST
26440: LIST
26441: PUSH
26442: LD_INT 1
26444: PUSH
26445: LD_INT 1
26447: NEG
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: PUSH
26453: LD_INT 2
26455: PUSH
26456: LD_INT 1
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 2
26465: PUSH
26466: LD_INT 2
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 1
26475: PUSH
26476: LD_INT 2
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 0
26485: PUSH
26486: LD_INT 2
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 1
26495: NEG
26496: PUSH
26497: LD_INT 1
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: PUSH
26504: LD_INT 2
26506: NEG
26507: PUSH
26508: LD_INT 1
26510: NEG
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: PUSH
26516: LD_INT 2
26518: NEG
26519: PUSH
26520: LD_INT 2
26522: NEG
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: PUSH
26528: LD_INT 2
26530: NEG
26531: PUSH
26532: LD_INT 3
26534: NEG
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PUSH
26540: LD_INT 1
26542: NEG
26543: PUSH
26544: LD_INT 3
26546: NEG
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PUSH
26552: LD_INT 0
26554: PUSH
26555: LD_INT 3
26557: NEG
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: LD_INT 1
26565: PUSH
26566: LD_INT 2
26568: NEG
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: PUSH
26574: LD_INT 3
26576: PUSH
26577: LD_INT 2
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: PUSH
26584: LD_INT 3
26586: PUSH
26587: LD_INT 3
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 2
26596: PUSH
26597: LD_INT 3
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PUSH
26604: LD_INT 1
26606: PUSH
26607: LD_INT 3
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: LD_INT 0
26616: PUSH
26617: LD_INT 3
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 1
26626: NEG
26627: PUSH
26628: LD_INT 2
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: LD_INT 3
26637: NEG
26638: PUSH
26639: LD_INT 2
26641: NEG
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: LD_INT 3
26649: NEG
26650: PUSH
26651: LD_INT 3
26653: NEG
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: LIST
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26690: LD_ADDR_VAR 0 46
26694: PUSH
26695: LD_INT 0
26697: PUSH
26698: LD_INT 0
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: PUSH
26705: LD_INT 0
26707: PUSH
26708: LD_INT 1
26710: NEG
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: LD_INT 1
26718: PUSH
26719: LD_INT 0
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: PUSH
26726: LD_INT 1
26728: PUSH
26729: LD_INT 1
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: PUSH
26736: LD_INT 0
26738: PUSH
26739: LD_INT 1
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: PUSH
26746: LD_INT 1
26748: NEG
26749: PUSH
26750: LD_INT 0
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PUSH
26757: LD_INT 1
26759: NEG
26760: PUSH
26761: LD_INT 1
26763: NEG
26764: PUSH
26765: EMPTY
26766: LIST
26767: LIST
26768: PUSH
26769: LD_INT 1
26771: NEG
26772: PUSH
26773: LD_INT 2
26775: NEG
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: LD_INT 0
26783: PUSH
26784: LD_INT 2
26786: NEG
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: PUSH
26792: LD_INT 1
26794: PUSH
26795: LD_INT 1
26797: NEG
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: PUSH
26803: LD_INT 2
26805: PUSH
26806: LD_INT 0
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: PUSH
26813: LD_INT 2
26815: PUSH
26816: LD_INT 1
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: LD_INT 1
26825: PUSH
26826: LD_INT 2
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: LD_INT 0
26835: PUSH
26836: LD_INT 2
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: PUSH
26843: LD_INT 1
26845: NEG
26846: PUSH
26847: LD_INT 1
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PUSH
26854: LD_INT 2
26856: NEG
26857: PUSH
26858: LD_INT 0
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: LD_INT 2
26867: NEG
26868: PUSH
26869: LD_INT 1
26871: NEG
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: PUSH
26877: LD_INT 1
26879: NEG
26880: PUSH
26881: LD_INT 3
26883: NEG
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 0
26891: PUSH
26892: LD_INT 3
26894: NEG
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: PUSH
26900: LD_INT 1
26902: PUSH
26903: LD_INT 2
26905: NEG
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: PUSH
26911: LD_INT 2
26913: PUSH
26914: LD_INT 1
26916: NEG
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: PUSH
26922: LD_INT 3
26924: PUSH
26925: LD_INT 0
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: LD_INT 3
26934: PUSH
26935: LD_INT 1
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PUSH
26942: LD_INT 1
26944: PUSH
26945: LD_INT 3
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: LD_INT 0
26954: PUSH
26955: LD_INT 3
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 1
26964: NEG
26965: PUSH
26966: LD_INT 2
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: PUSH
26973: LD_INT 2
26975: NEG
26976: PUSH
26977: LD_INT 1
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: PUSH
26984: LD_INT 3
26986: NEG
26987: PUSH
26988: LD_INT 0
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 3
26997: NEG
26998: PUSH
26999: LD_INT 1
27001: NEG
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: LIST
27011: LIST
27012: LIST
27013: LIST
27014: LIST
27015: LIST
27016: LIST
27017: LIST
27018: LIST
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: LIST
27037: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27038: LD_ADDR_VAR 0 47
27042: PUSH
27043: LD_INT 0
27045: PUSH
27046: LD_INT 0
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: PUSH
27053: LD_INT 0
27055: PUSH
27056: LD_INT 1
27058: NEG
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PUSH
27064: LD_INT 1
27066: PUSH
27067: LD_INT 0
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PUSH
27074: LD_INT 1
27076: PUSH
27077: LD_INT 1
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PUSH
27084: LD_INT 0
27086: PUSH
27087: LD_INT 1
27089: PUSH
27090: EMPTY
27091: LIST
27092: LIST
27093: PUSH
27094: LD_INT 1
27096: NEG
27097: PUSH
27098: LD_INT 0
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: LD_INT 1
27107: NEG
27108: PUSH
27109: LD_INT 1
27111: NEG
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: LD_INT 1
27119: NEG
27120: PUSH
27121: LD_INT 2
27123: NEG
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PUSH
27129: LD_INT 0
27131: PUSH
27132: LD_INT 2
27134: NEG
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: LD_INT 1
27142: PUSH
27143: LD_INT 1
27145: NEG
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 2
27153: NEG
27154: PUSH
27155: LD_INT 1
27157: NEG
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PUSH
27163: LD_INT 2
27165: NEG
27166: PUSH
27167: LD_INT 2
27169: NEG
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
27189: LD_ADDR_VAR 0 48
27193: PUSH
27194: LD_INT 0
27196: PUSH
27197: LD_INT 0
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: PUSH
27204: LD_INT 0
27206: PUSH
27207: LD_INT 1
27209: NEG
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: PUSH
27215: LD_INT 1
27217: PUSH
27218: LD_INT 0
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PUSH
27225: LD_INT 1
27227: PUSH
27228: LD_INT 1
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: LD_INT 0
27237: PUSH
27238: LD_INT 1
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: LD_INT 1
27247: NEG
27248: PUSH
27249: LD_INT 0
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: PUSH
27256: LD_INT 1
27258: NEG
27259: PUSH
27260: LD_INT 1
27262: NEG
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: PUSH
27268: LD_INT 1
27270: NEG
27271: PUSH
27272: LD_INT 2
27274: NEG
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: PUSH
27280: LD_INT 0
27282: PUSH
27283: LD_INT 2
27285: NEG
27286: PUSH
27287: EMPTY
27288: LIST
27289: LIST
27290: PUSH
27291: LD_INT 1
27293: PUSH
27294: LD_INT 1
27296: NEG
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: PUSH
27302: LD_INT 2
27304: PUSH
27305: LD_INT 0
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: PUSH
27312: LD_INT 2
27314: PUSH
27315: LD_INT 1
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: LIST
27326: LIST
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
27336: LD_ADDR_VAR 0 49
27340: PUSH
27341: LD_INT 0
27343: PUSH
27344: LD_INT 0
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PUSH
27351: LD_INT 0
27353: PUSH
27354: LD_INT 1
27356: NEG
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PUSH
27362: LD_INT 1
27364: PUSH
27365: LD_INT 0
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: PUSH
27372: LD_INT 1
27374: PUSH
27375: LD_INT 1
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: PUSH
27382: LD_INT 0
27384: PUSH
27385: LD_INT 1
27387: PUSH
27388: EMPTY
27389: LIST
27390: LIST
27391: PUSH
27392: LD_INT 1
27394: NEG
27395: PUSH
27396: LD_INT 0
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PUSH
27403: LD_INT 1
27405: NEG
27406: PUSH
27407: LD_INT 1
27409: NEG
27410: PUSH
27411: EMPTY
27412: LIST
27413: LIST
27414: PUSH
27415: LD_INT 1
27417: PUSH
27418: LD_INT 1
27420: NEG
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: PUSH
27426: LD_INT 2
27428: PUSH
27429: LD_INT 0
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: PUSH
27436: LD_INT 2
27438: PUSH
27439: LD_INT 1
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: PUSH
27446: LD_INT 2
27448: PUSH
27449: LD_INT 2
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: PUSH
27456: LD_INT 1
27458: PUSH
27459: LD_INT 2
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PUSH
27466: EMPTY
27467: LIST
27468: LIST
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27480: LD_ADDR_VAR 0 50
27484: PUSH
27485: LD_INT 0
27487: PUSH
27488: LD_INT 0
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: LD_INT 0
27497: PUSH
27498: LD_INT 1
27500: NEG
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PUSH
27506: LD_INT 1
27508: PUSH
27509: LD_INT 0
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: LD_INT 1
27518: PUSH
27519: LD_INT 1
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: PUSH
27526: LD_INT 0
27528: PUSH
27529: LD_INT 1
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: PUSH
27536: LD_INT 1
27538: NEG
27539: PUSH
27540: LD_INT 0
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: PUSH
27547: LD_INT 1
27549: NEG
27550: PUSH
27551: LD_INT 1
27553: NEG
27554: PUSH
27555: EMPTY
27556: LIST
27557: LIST
27558: PUSH
27559: LD_INT 2
27561: PUSH
27562: LD_INT 1
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PUSH
27569: LD_INT 2
27571: PUSH
27572: LD_INT 2
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: LD_INT 1
27581: PUSH
27582: LD_INT 2
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: PUSH
27589: LD_INT 0
27591: PUSH
27592: LD_INT 2
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PUSH
27599: LD_INT 1
27601: NEG
27602: PUSH
27603: LD_INT 1
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: LIST
27622: LIST
27623: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27624: LD_ADDR_VAR 0 51
27628: PUSH
27629: LD_INT 0
27631: PUSH
27632: LD_INT 0
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PUSH
27639: LD_INT 0
27641: PUSH
27642: LD_INT 1
27644: NEG
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: LD_INT 1
27652: PUSH
27653: LD_INT 0
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: PUSH
27660: LD_INT 1
27662: PUSH
27663: LD_INT 1
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: PUSH
27670: LD_INT 0
27672: PUSH
27673: LD_INT 1
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: PUSH
27680: LD_INT 1
27682: NEG
27683: PUSH
27684: LD_INT 0
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PUSH
27691: LD_INT 1
27693: NEG
27694: PUSH
27695: LD_INT 1
27697: NEG
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: PUSH
27703: LD_INT 1
27705: PUSH
27706: LD_INT 2
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: PUSH
27713: LD_INT 0
27715: PUSH
27716: LD_INT 2
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PUSH
27723: LD_INT 1
27725: NEG
27726: PUSH
27727: LD_INT 1
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: PUSH
27734: LD_INT 2
27736: NEG
27737: PUSH
27738: LD_INT 0
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: PUSH
27745: LD_INT 2
27747: NEG
27748: PUSH
27749: LD_INT 1
27751: NEG
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27771: LD_ADDR_VAR 0 52
27775: PUSH
27776: LD_INT 0
27778: PUSH
27779: LD_INT 0
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 0
27788: PUSH
27789: LD_INT 1
27791: NEG
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: LD_INT 1
27799: PUSH
27800: LD_INT 0
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 1
27809: PUSH
27810: LD_INT 1
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 0
27819: PUSH
27820: LD_INT 1
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 1
27829: NEG
27830: PUSH
27831: LD_INT 0
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: LD_INT 1
27840: NEG
27841: PUSH
27842: LD_INT 1
27844: NEG
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: PUSH
27850: LD_INT 1
27852: NEG
27853: PUSH
27854: LD_INT 2
27856: NEG
27857: PUSH
27858: EMPTY
27859: LIST
27860: LIST
27861: PUSH
27862: LD_INT 1
27864: NEG
27865: PUSH
27866: LD_INT 1
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 2
27875: NEG
27876: PUSH
27877: LD_INT 0
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: PUSH
27884: LD_INT 2
27886: NEG
27887: PUSH
27888: LD_INT 1
27890: NEG
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: PUSH
27896: LD_INT 2
27898: NEG
27899: PUSH
27900: LD_INT 2
27902: NEG
27903: PUSH
27904: EMPTY
27905: LIST
27906: LIST
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: LIST
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27922: LD_ADDR_VAR 0 53
27926: PUSH
27927: LD_INT 0
27929: PUSH
27930: LD_INT 0
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 0
27939: PUSH
27940: LD_INT 1
27942: NEG
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: LD_INT 1
27950: PUSH
27951: LD_INT 0
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PUSH
27958: LD_INT 1
27960: PUSH
27961: LD_INT 1
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: PUSH
27968: LD_INT 0
27970: PUSH
27971: LD_INT 1
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: PUSH
27978: LD_INT 1
27980: NEG
27981: PUSH
27982: LD_INT 0
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: LD_INT 1
27991: NEG
27992: PUSH
27993: LD_INT 1
27995: NEG
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PUSH
28001: LD_INT 1
28003: NEG
28004: PUSH
28005: LD_INT 2
28007: NEG
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PUSH
28013: LD_INT 0
28015: PUSH
28016: LD_INT 2
28018: NEG
28019: PUSH
28020: EMPTY
28021: LIST
28022: LIST
28023: PUSH
28024: LD_INT 1
28026: PUSH
28027: LD_INT 1
28029: NEG
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: PUSH
28035: LD_INT 2
28037: PUSH
28038: LD_INT 0
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: PUSH
28045: LD_INT 2
28047: PUSH
28048: LD_INT 1
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: LD_INT 2
28057: PUSH
28058: LD_INT 2
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PUSH
28065: LD_INT 1
28067: PUSH
28068: LD_INT 2
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: PUSH
28075: LD_INT 0
28077: PUSH
28078: LD_INT 2
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PUSH
28085: LD_INT 1
28087: NEG
28088: PUSH
28089: LD_INT 1
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: LD_INT 2
28098: NEG
28099: PUSH
28100: LD_INT 0
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: PUSH
28107: LD_INT 2
28109: NEG
28110: PUSH
28111: LD_INT 1
28113: NEG
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PUSH
28119: LD_INT 2
28121: NEG
28122: PUSH
28123: LD_INT 2
28125: NEG
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: LIST
28135: LIST
28136: LIST
28137: LIST
28138: LIST
28139: LIST
28140: LIST
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: LIST
28146: LIST
28147: LIST
28148: LIST
28149: LIST
28150: LIST
28151: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28152: LD_ADDR_VAR 0 54
28156: PUSH
28157: LD_INT 0
28159: PUSH
28160: LD_INT 0
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 0
28169: PUSH
28170: LD_INT 1
28172: NEG
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: PUSH
28178: LD_INT 1
28180: PUSH
28181: LD_INT 0
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: PUSH
28188: LD_INT 1
28190: PUSH
28191: LD_INT 1
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PUSH
28198: LD_INT 0
28200: PUSH
28201: LD_INT 1
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: PUSH
28208: LD_INT 1
28210: NEG
28211: PUSH
28212: LD_INT 0
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: PUSH
28219: LD_INT 1
28221: NEG
28222: PUSH
28223: LD_INT 1
28225: NEG
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 1
28233: NEG
28234: PUSH
28235: LD_INT 2
28237: NEG
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: PUSH
28243: LD_INT 0
28245: PUSH
28246: LD_INT 2
28248: NEG
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PUSH
28254: LD_INT 1
28256: PUSH
28257: LD_INT 1
28259: NEG
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PUSH
28265: LD_INT 2
28267: PUSH
28268: LD_INT 0
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: PUSH
28275: LD_INT 2
28277: PUSH
28278: LD_INT 1
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: PUSH
28285: LD_INT 2
28287: PUSH
28288: LD_INT 2
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PUSH
28295: LD_INT 1
28297: PUSH
28298: LD_INT 2
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: PUSH
28305: LD_INT 0
28307: PUSH
28308: LD_INT 2
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: PUSH
28315: LD_INT 1
28317: NEG
28318: PUSH
28319: LD_INT 1
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: PUSH
28326: LD_INT 2
28328: NEG
28329: PUSH
28330: LD_INT 0
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: PUSH
28337: LD_INT 2
28339: NEG
28340: PUSH
28341: LD_INT 1
28343: NEG
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: PUSH
28349: LD_INT 2
28351: NEG
28352: PUSH
28353: LD_INT 2
28355: NEG
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: LIST
28365: LIST
28366: LIST
28367: LIST
28368: LIST
28369: LIST
28370: LIST
28371: LIST
28372: LIST
28373: LIST
28374: LIST
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28382: LD_ADDR_VAR 0 55
28386: PUSH
28387: LD_INT 0
28389: PUSH
28390: LD_INT 0
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 0
28399: PUSH
28400: LD_INT 1
28402: NEG
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PUSH
28408: LD_INT 1
28410: PUSH
28411: LD_INT 0
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: PUSH
28418: LD_INT 1
28420: PUSH
28421: LD_INT 1
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: PUSH
28428: LD_INT 0
28430: PUSH
28431: LD_INT 1
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: LD_INT 1
28440: NEG
28441: PUSH
28442: LD_INT 0
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 1
28451: NEG
28452: PUSH
28453: LD_INT 1
28455: NEG
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: LD_INT 1
28463: NEG
28464: PUSH
28465: LD_INT 2
28467: NEG
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: LD_INT 0
28475: PUSH
28476: LD_INT 2
28478: NEG
28479: PUSH
28480: EMPTY
28481: LIST
28482: LIST
28483: PUSH
28484: LD_INT 1
28486: PUSH
28487: LD_INT 1
28489: NEG
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: PUSH
28495: LD_INT 2
28497: PUSH
28498: LD_INT 0
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: PUSH
28505: LD_INT 2
28507: PUSH
28508: LD_INT 1
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PUSH
28515: LD_INT 2
28517: PUSH
28518: LD_INT 2
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: PUSH
28525: LD_INT 1
28527: PUSH
28528: LD_INT 2
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: PUSH
28535: LD_INT 0
28537: PUSH
28538: LD_INT 2
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: PUSH
28545: LD_INT 1
28547: NEG
28548: PUSH
28549: LD_INT 1
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: PUSH
28556: LD_INT 2
28558: NEG
28559: PUSH
28560: LD_INT 0
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: LD_INT 2
28569: NEG
28570: PUSH
28571: LD_INT 1
28573: NEG
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: PUSH
28579: LD_INT 2
28581: NEG
28582: PUSH
28583: LD_INT 2
28585: NEG
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28612: LD_ADDR_VAR 0 56
28616: PUSH
28617: LD_INT 0
28619: PUSH
28620: LD_INT 0
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PUSH
28627: LD_INT 0
28629: PUSH
28630: LD_INT 1
28632: NEG
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PUSH
28638: LD_INT 1
28640: PUSH
28641: LD_INT 0
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 1
28650: PUSH
28651: LD_INT 1
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: LD_INT 0
28660: PUSH
28661: LD_INT 1
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 1
28670: NEG
28671: PUSH
28672: LD_INT 0
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 1
28681: NEG
28682: PUSH
28683: LD_INT 1
28685: NEG
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 1
28693: NEG
28694: PUSH
28695: LD_INT 2
28697: NEG
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: PUSH
28703: LD_INT 0
28705: PUSH
28706: LD_INT 2
28708: NEG
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: PUSH
28714: LD_INT 1
28716: PUSH
28717: LD_INT 1
28719: NEG
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: PUSH
28725: LD_INT 2
28727: PUSH
28728: LD_INT 0
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: PUSH
28735: LD_INT 2
28737: PUSH
28738: LD_INT 1
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: LD_INT 2
28747: PUSH
28748: LD_INT 2
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: LD_INT 1
28757: PUSH
28758: LD_INT 2
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: PUSH
28765: LD_INT 0
28767: PUSH
28768: LD_INT 2
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PUSH
28775: LD_INT 1
28777: NEG
28778: PUSH
28779: LD_INT 1
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: PUSH
28786: LD_INT 2
28788: NEG
28789: PUSH
28790: LD_INT 0
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: LD_INT 2
28799: NEG
28800: PUSH
28801: LD_INT 1
28803: NEG
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: PUSH
28809: LD_INT 2
28811: NEG
28812: PUSH
28813: LD_INT 2
28815: NEG
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28842: LD_ADDR_VAR 0 57
28846: PUSH
28847: LD_INT 0
28849: PUSH
28850: LD_INT 0
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 0
28859: PUSH
28860: LD_INT 1
28862: NEG
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PUSH
28868: LD_INT 1
28870: PUSH
28871: LD_INT 0
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PUSH
28878: LD_INT 1
28880: PUSH
28881: LD_INT 1
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: PUSH
28888: LD_INT 0
28890: PUSH
28891: LD_INT 1
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: LD_INT 1
28900: NEG
28901: PUSH
28902: LD_INT 0
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: LD_INT 1
28911: NEG
28912: PUSH
28913: LD_INT 1
28915: NEG
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: PUSH
28921: LD_INT 1
28923: NEG
28924: PUSH
28925: LD_INT 2
28927: NEG
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: PUSH
28933: LD_INT 0
28935: PUSH
28936: LD_INT 2
28938: NEG
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: PUSH
28944: LD_INT 1
28946: PUSH
28947: LD_INT 1
28949: NEG
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: PUSH
28955: LD_INT 2
28957: PUSH
28958: LD_INT 0
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: PUSH
28965: LD_INT 2
28967: PUSH
28968: LD_INT 1
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: PUSH
28975: LD_INT 2
28977: PUSH
28978: LD_INT 2
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PUSH
28985: LD_INT 1
28987: PUSH
28988: LD_INT 2
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: PUSH
28995: LD_INT 0
28997: PUSH
28998: LD_INT 2
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PUSH
29005: LD_INT 1
29007: NEG
29008: PUSH
29009: LD_INT 1
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: LD_INT 2
29018: NEG
29019: PUSH
29020: LD_INT 0
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: LD_INT 2
29029: NEG
29030: PUSH
29031: LD_INT 1
29033: NEG
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PUSH
29039: LD_INT 2
29041: NEG
29042: PUSH
29043: LD_INT 2
29045: NEG
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: LIST
29061: LIST
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29072: LD_ADDR_VAR 0 58
29076: PUSH
29077: LD_INT 0
29079: PUSH
29080: LD_INT 0
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: PUSH
29087: LD_INT 0
29089: PUSH
29090: LD_INT 1
29092: NEG
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: LD_INT 1
29100: PUSH
29101: LD_INT 0
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PUSH
29108: LD_INT 1
29110: PUSH
29111: LD_INT 1
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: PUSH
29118: LD_INT 0
29120: PUSH
29121: LD_INT 1
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PUSH
29128: LD_INT 1
29130: NEG
29131: PUSH
29132: LD_INT 0
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 1
29141: NEG
29142: PUSH
29143: LD_INT 1
29145: NEG
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: PUSH
29151: LD_INT 1
29153: NEG
29154: PUSH
29155: LD_INT 2
29157: NEG
29158: PUSH
29159: EMPTY
29160: LIST
29161: LIST
29162: PUSH
29163: LD_INT 0
29165: PUSH
29166: LD_INT 2
29168: NEG
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PUSH
29174: LD_INT 1
29176: PUSH
29177: LD_INT 1
29179: NEG
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: PUSH
29185: LD_INT 2
29187: PUSH
29188: LD_INT 0
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PUSH
29195: LD_INT 2
29197: PUSH
29198: LD_INT 1
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PUSH
29205: LD_INT 2
29207: PUSH
29208: LD_INT 2
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PUSH
29215: LD_INT 1
29217: PUSH
29218: LD_INT 2
29220: PUSH
29221: EMPTY
29222: LIST
29223: LIST
29224: PUSH
29225: LD_INT 0
29227: PUSH
29228: LD_INT 2
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: PUSH
29235: LD_INT 1
29237: NEG
29238: PUSH
29239: LD_INT 1
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: LD_INT 2
29248: NEG
29249: PUSH
29250: LD_INT 0
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PUSH
29257: LD_INT 2
29259: NEG
29260: PUSH
29261: LD_INT 1
29263: NEG
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: LD_INT 2
29271: NEG
29272: PUSH
29273: LD_INT 2
29275: NEG
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: LIST
29291: LIST
29292: LIST
29293: LIST
29294: LIST
29295: LIST
29296: LIST
29297: LIST
29298: LIST
29299: LIST
29300: LIST
29301: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29302: LD_ADDR_VAR 0 59
29306: PUSH
29307: LD_INT 0
29309: PUSH
29310: LD_INT 0
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: LD_INT 0
29319: PUSH
29320: LD_INT 1
29322: NEG
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: LD_INT 1
29330: PUSH
29331: LD_INT 0
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: LD_INT 1
29340: PUSH
29341: LD_INT 1
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PUSH
29348: LD_INT 0
29350: PUSH
29351: LD_INT 1
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: LD_INT 1
29360: NEG
29361: PUSH
29362: LD_INT 0
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: LD_INT 1
29371: NEG
29372: PUSH
29373: LD_INT 1
29375: NEG
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29390: LD_ADDR_VAR 0 60
29394: PUSH
29395: LD_INT 0
29397: PUSH
29398: LD_INT 0
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: PUSH
29405: LD_INT 0
29407: PUSH
29408: LD_INT 1
29410: NEG
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: PUSH
29416: LD_INT 1
29418: PUSH
29419: LD_INT 0
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: PUSH
29426: LD_INT 1
29428: PUSH
29429: LD_INT 1
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: LD_INT 0
29438: PUSH
29439: LD_INT 1
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: PUSH
29446: LD_INT 1
29448: NEG
29449: PUSH
29450: LD_INT 0
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: PUSH
29457: LD_INT 1
29459: NEG
29460: PUSH
29461: LD_INT 1
29463: NEG
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: LIST
29473: LIST
29474: LIST
29475: LIST
29476: LIST
29477: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29478: LD_ADDR_VAR 0 61
29482: PUSH
29483: LD_INT 0
29485: PUSH
29486: LD_INT 0
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: LD_INT 0
29495: PUSH
29496: LD_INT 1
29498: NEG
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: PUSH
29504: LD_INT 1
29506: PUSH
29507: LD_INT 0
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 1
29516: PUSH
29517: LD_INT 1
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: LD_INT 0
29526: PUSH
29527: LD_INT 1
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: LD_INT 1
29536: NEG
29537: PUSH
29538: LD_INT 0
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: LD_INT 1
29547: NEG
29548: PUSH
29549: LD_INT 1
29551: NEG
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: LIST
29561: LIST
29562: LIST
29563: LIST
29564: LIST
29565: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29566: LD_ADDR_VAR 0 62
29570: PUSH
29571: LD_INT 0
29573: PUSH
29574: LD_INT 0
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: LD_INT 0
29583: PUSH
29584: LD_INT 1
29586: NEG
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PUSH
29592: LD_INT 1
29594: PUSH
29595: LD_INT 0
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PUSH
29602: LD_INT 1
29604: PUSH
29605: LD_INT 1
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: PUSH
29612: LD_INT 0
29614: PUSH
29615: LD_INT 1
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: PUSH
29622: LD_INT 1
29624: NEG
29625: PUSH
29626: LD_INT 0
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 1
29635: NEG
29636: PUSH
29637: LD_INT 1
29639: NEG
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: LIST
29649: LIST
29650: LIST
29651: LIST
29652: LIST
29653: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29654: LD_ADDR_VAR 0 63
29658: PUSH
29659: LD_INT 0
29661: PUSH
29662: LD_INT 0
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: PUSH
29669: LD_INT 0
29671: PUSH
29672: LD_INT 1
29674: NEG
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: LD_INT 1
29682: PUSH
29683: LD_INT 0
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: PUSH
29690: LD_INT 1
29692: PUSH
29693: LD_INT 1
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: LD_INT 0
29702: PUSH
29703: LD_INT 1
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: PUSH
29710: LD_INT 1
29712: NEG
29713: PUSH
29714: LD_INT 0
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: LD_INT 1
29723: NEG
29724: PUSH
29725: LD_INT 1
29727: NEG
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: PUSH
29733: EMPTY
29734: LIST
29735: LIST
29736: LIST
29737: LIST
29738: LIST
29739: LIST
29740: LIST
29741: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29742: LD_ADDR_VAR 0 64
29746: PUSH
29747: LD_INT 0
29749: PUSH
29750: LD_INT 0
29752: PUSH
29753: EMPTY
29754: LIST
29755: LIST
29756: PUSH
29757: LD_INT 0
29759: PUSH
29760: LD_INT 1
29762: NEG
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PUSH
29768: LD_INT 1
29770: PUSH
29771: LD_INT 0
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: PUSH
29778: LD_INT 1
29780: PUSH
29781: LD_INT 1
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 0
29790: PUSH
29791: LD_INT 1
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: PUSH
29798: LD_INT 1
29800: NEG
29801: PUSH
29802: LD_INT 0
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: PUSH
29809: LD_INT 1
29811: NEG
29812: PUSH
29813: LD_INT 1
29815: NEG
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: ST_TO_ADDR
// end ; 1 :
29830: GO 35727
29832: LD_INT 1
29834: DOUBLE
29835: EQUAL
29836: IFTRUE 29840
29838: GO 32463
29840: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29841: LD_ADDR_VAR 0 11
29845: PUSH
29846: LD_INT 1
29848: NEG
29849: PUSH
29850: LD_INT 3
29852: NEG
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: LD_INT 0
29860: PUSH
29861: LD_INT 3
29863: NEG
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: PUSH
29869: LD_INT 1
29871: PUSH
29872: LD_INT 2
29874: NEG
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: LIST
29884: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29885: LD_ADDR_VAR 0 12
29889: PUSH
29890: LD_INT 2
29892: PUSH
29893: LD_INT 1
29895: NEG
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: PUSH
29901: LD_INT 3
29903: PUSH
29904: LD_INT 0
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PUSH
29911: LD_INT 3
29913: PUSH
29914: LD_INT 1
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: LIST
29925: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29926: LD_ADDR_VAR 0 13
29930: PUSH
29931: LD_INT 3
29933: PUSH
29934: LD_INT 2
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: LD_INT 3
29943: PUSH
29944: LD_INT 3
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: LD_INT 2
29953: PUSH
29954: LD_INT 3
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: LIST
29965: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29966: LD_ADDR_VAR 0 14
29970: PUSH
29971: LD_INT 1
29973: PUSH
29974: LD_INT 3
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: LD_INT 0
29983: PUSH
29984: LD_INT 3
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PUSH
29991: LD_INT 1
29993: NEG
29994: PUSH
29995: LD_INT 2
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: LIST
30006: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30007: LD_ADDR_VAR 0 15
30011: PUSH
30012: LD_INT 2
30014: NEG
30015: PUSH
30016: LD_INT 1
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: LD_INT 3
30025: NEG
30026: PUSH
30027: LD_INT 0
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PUSH
30034: LD_INT 3
30036: NEG
30037: PUSH
30038: LD_INT 1
30040: NEG
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: LIST
30050: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30051: LD_ADDR_VAR 0 16
30055: PUSH
30056: LD_INT 2
30058: NEG
30059: PUSH
30060: LD_INT 3
30062: NEG
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: LD_INT 3
30070: NEG
30071: PUSH
30072: LD_INT 2
30074: NEG
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: LD_INT 3
30082: NEG
30083: PUSH
30084: LD_INT 3
30086: NEG
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: LIST
30096: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30097: LD_ADDR_VAR 0 17
30101: PUSH
30102: LD_INT 1
30104: NEG
30105: PUSH
30106: LD_INT 3
30108: NEG
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: LD_INT 0
30116: PUSH
30117: LD_INT 3
30119: NEG
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PUSH
30125: LD_INT 1
30127: PUSH
30128: LD_INT 2
30130: NEG
30131: PUSH
30132: EMPTY
30133: LIST
30134: LIST
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: LIST
30140: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30141: LD_ADDR_VAR 0 18
30145: PUSH
30146: LD_INT 2
30148: PUSH
30149: LD_INT 1
30151: NEG
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: LD_INT 3
30159: PUSH
30160: LD_INT 0
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: PUSH
30167: LD_INT 3
30169: PUSH
30170: LD_INT 1
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: LIST
30181: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30182: LD_ADDR_VAR 0 19
30186: PUSH
30187: LD_INT 3
30189: PUSH
30190: LD_INT 2
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PUSH
30197: LD_INT 3
30199: PUSH
30200: LD_INT 3
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: PUSH
30207: LD_INT 2
30209: PUSH
30210: LD_INT 3
30212: PUSH
30213: EMPTY
30214: LIST
30215: LIST
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: LIST
30221: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30222: LD_ADDR_VAR 0 20
30226: PUSH
30227: LD_INT 1
30229: PUSH
30230: LD_INT 3
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: PUSH
30237: LD_INT 0
30239: PUSH
30240: LD_INT 3
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: LD_INT 1
30249: NEG
30250: PUSH
30251: LD_INT 2
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: LIST
30262: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30263: LD_ADDR_VAR 0 21
30267: PUSH
30268: LD_INT 2
30270: NEG
30271: PUSH
30272: LD_INT 1
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: PUSH
30279: LD_INT 3
30281: NEG
30282: PUSH
30283: LD_INT 0
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PUSH
30290: LD_INT 3
30292: NEG
30293: PUSH
30294: LD_INT 1
30296: NEG
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: LIST
30306: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30307: LD_ADDR_VAR 0 22
30311: PUSH
30312: LD_INT 2
30314: NEG
30315: PUSH
30316: LD_INT 3
30318: NEG
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PUSH
30324: LD_INT 3
30326: NEG
30327: PUSH
30328: LD_INT 2
30330: NEG
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: LD_INT 3
30338: NEG
30339: PUSH
30340: LD_INT 3
30342: NEG
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: LIST
30352: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
30353: LD_ADDR_VAR 0 23
30357: PUSH
30358: LD_INT 0
30360: PUSH
30361: LD_INT 3
30363: NEG
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 1
30371: NEG
30372: PUSH
30373: LD_INT 4
30375: NEG
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PUSH
30381: LD_INT 1
30383: PUSH
30384: LD_INT 3
30386: NEG
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: LIST
30396: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30397: LD_ADDR_VAR 0 24
30401: PUSH
30402: LD_INT 3
30404: PUSH
30405: LD_INT 0
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: LD_INT 3
30414: PUSH
30415: LD_INT 1
30417: NEG
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PUSH
30423: LD_INT 4
30425: PUSH
30426: LD_INT 1
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: LIST
30437: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30438: LD_ADDR_VAR 0 25
30442: PUSH
30443: LD_INT 3
30445: PUSH
30446: LD_INT 3
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: LD_INT 4
30455: PUSH
30456: LD_INT 3
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: PUSH
30463: LD_INT 3
30465: PUSH
30466: LD_INT 4
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: LIST
30477: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30478: LD_ADDR_VAR 0 26
30482: PUSH
30483: LD_INT 0
30485: PUSH
30486: LD_INT 3
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: LD_INT 1
30495: PUSH
30496: LD_INT 4
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: LD_INT 1
30505: NEG
30506: PUSH
30507: LD_INT 3
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: LIST
30518: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30519: LD_ADDR_VAR 0 27
30523: PUSH
30524: LD_INT 3
30526: NEG
30527: PUSH
30528: LD_INT 0
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: LD_INT 3
30537: NEG
30538: PUSH
30539: LD_INT 1
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PUSH
30546: LD_INT 4
30548: NEG
30549: PUSH
30550: LD_INT 1
30552: NEG
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: LIST
30562: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30563: LD_ADDR_VAR 0 28
30567: PUSH
30568: LD_INT 3
30570: NEG
30571: PUSH
30572: LD_INT 3
30574: NEG
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 3
30582: NEG
30583: PUSH
30584: LD_INT 4
30586: NEG
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 4
30594: NEG
30595: PUSH
30596: LD_INT 3
30598: NEG
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: LIST
30608: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30609: LD_ADDR_VAR 0 29
30613: PUSH
30614: LD_INT 1
30616: NEG
30617: PUSH
30618: LD_INT 3
30620: NEG
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 0
30628: PUSH
30629: LD_INT 3
30631: NEG
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 1
30639: PUSH
30640: LD_INT 2
30642: NEG
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: LD_INT 1
30650: NEG
30651: PUSH
30652: LD_INT 4
30654: NEG
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PUSH
30660: LD_INT 0
30662: PUSH
30663: LD_INT 4
30665: NEG
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 1
30673: PUSH
30674: LD_INT 3
30676: NEG
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: LD_INT 1
30684: NEG
30685: PUSH
30686: LD_INT 5
30688: NEG
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 0
30696: PUSH
30697: LD_INT 5
30699: NEG
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: PUSH
30705: LD_INT 1
30707: PUSH
30708: LD_INT 4
30710: NEG
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: PUSH
30716: LD_INT 1
30718: NEG
30719: PUSH
30720: LD_INT 6
30722: NEG
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: LD_INT 0
30730: PUSH
30731: LD_INT 6
30733: NEG
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: PUSH
30739: LD_INT 1
30741: PUSH
30742: LD_INT 5
30744: NEG
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30764: LD_ADDR_VAR 0 30
30768: PUSH
30769: LD_INT 2
30771: PUSH
30772: LD_INT 1
30774: NEG
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: LD_INT 3
30782: PUSH
30783: LD_INT 0
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: LD_INT 3
30792: PUSH
30793: LD_INT 1
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: LD_INT 3
30802: PUSH
30803: LD_INT 1
30805: NEG
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PUSH
30811: LD_INT 4
30813: PUSH
30814: LD_INT 0
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: LD_INT 4
30823: PUSH
30824: LD_INT 1
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PUSH
30831: LD_INT 4
30833: PUSH
30834: LD_INT 1
30836: NEG
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PUSH
30842: LD_INT 5
30844: PUSH
30845: LD_INT 0
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: PUSH
30852: LD_INT 5
30854: PUSH
30855: LD_INT 1
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: PUSH
30862: LD_INT 5
30864: PUSH
30865: LD_INT 1
30867: NEG
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 6
30875: PUSH
30876: LD_INT 0
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PUSH
30883: LD_INT 6
30885: PUSH
30886: LD_INT 1
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30907: LD_ADDR_VAR 0 31
30911: PUSH
30912: LD_INT 3
30914: PUSH
30915: LD_INT 2
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: LD_INT 3
30924: PUSH
30925: LD_INT 3
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: PUSH
30932: LD_INT 2
30934: PUSH
30935: LD_INT 3
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: PUSH
30942: LD_INT 4
30944: PUSH
30945: LD_INT 3
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: PUSH
30952: LD_INT 4
30954: PUSH
30955: LD_INT 4
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 3
30964: PUSH
30965: LD_INT 4
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: LD_INT 5
30974: PUSH
30975: LD_INT 4
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: LD_INT 5
30984: PUSH
30985: LD_INT 5
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PUSH
30992: LD_INT 4
30994: PUSH
30995: LD_INT 5
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PUSH
31002: LD_INT 6
31004: PUSH
31005: LD_INT 5
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: PUSH
31012: LD_INT 6
31014: PUSH
31015: LD_INT 6
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: LD_INT 5
31024: PUSH
31025: LD_INT 6
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
31046: LD_ADDR_VAR 0 32
31050: PUSH
31051: LD_INT 1
31053: PUSH
31054: LD_INT 3
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PUSH
31061: LD_INT 0
31063: PUSH
31064: LD_INT 3
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 1
31073: NEG
31074: PUSH
31075: LD_INT 2
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: LD_INT 1
31084: PUSH
31085: LD_INT 4
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 0
31094: PUSH
31095: LD_INT 4
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PUSH
31102: LD_INT 1
31104: NEG
31105: PUSH
31106: LD_INT 3
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: LD_INT 1
31115: PUSH
31116: LD_INT 5
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 0
31125: PUSH
31126: LD_INT 5
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 1
31135: NEG
31136: PUSH
31137: LD_INT 4
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: LD_INT 1
31146: PUSH
31147: LD_INT 6
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 0
31156: PUSH
31157: LD_INT 6
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 1
31166: NEG
31167: PUSH
31168: LD_INT 5
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
31189: LD_ADDR_VAR 0 33
31193: PUSH
31194: LD_INT 2
31196: NEG
31197: PUSH
31198: LD_INT 1
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: LD_INT 3
31207: NEG
31208: PUSH
31209: LD_INT 0
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: LD_INT 3
31218: NEG
31219: PUSH
31220: LD_INT 1
31222: NEG
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: LD_INT 3
31230: NEG
31231: PUSH
31232: LD_INT 1
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: PUSH
31239: LD_INT 4
31241: NEG
31242: PUSH
31243: LD_INT 0
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 4
31252: NEG
31253: PUSH
31254: LD_INT 1
31256: NEG
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 4
31264: NEG
31265: PUSH
31266: LD_INT 1
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: LD_INT 5
31275: NEG
31276: PUSH
31277: LD_INT 0
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 5
31286: NEG
31287: PUSH
31288: LD_INT 1
31290: NEG
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: LD_INT 5
31298: NEG
31299: PUSH
31300: LD_INT 1
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: LD_INT 6
31309: NEG
31310: PUSH
31311: LD_INT 0
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 6
31320: NEG
31321: PUSH
31322: LD_INT 1
31324: NEG
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
31344: LD_ADDR_VAR 0 34
31348: PUSH
31349: LD_INT 2
31351: NEG
31352: PUSH
31353: LD_INT 3
31355: NEG
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: LD_INT 3
31363: NEG
31364: PUSH
31365: LD_INT 2
31367: NEG
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: PUSH
31373: LD_INT 3
31375: NEG
31376: PUSH
31377: LD_INT 3
31379: NEG
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 3
31387: NEG
31388: PUSH
31389: LD_INT 4
31391: NEG
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: LD_INT 4
31399: NEG
31400: PUSH
31401: LD_INT 3
31403: NEG
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: PUSH
31409: LD_INT 4
31411: NEG
31412: PUSH
31413: LD_INT 4
31415: NEG
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: LD_INT 4
31423: NEG
31424: PUSH
31425: LD_INT 5
31427: NEG
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: PUSH
31433: LD_INT 5
31435: NEG
31436: PUSH
31437: LD_INT 4
31439: NEG
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: PUSH
31445: LD_INT 5
31447: NEG
31448: PUSH
31449: LD_INT 5
31451: NEG
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: LD_INT 5
31459: NEG
31460: PUSH
31461: LD_INT 6
31463: NEG
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: LD_INT 6
31471: NEG
31472: PUSH
31473: LD_INT 5
31475: NEG
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: LD_INT 6
31483: NEG
31484: PUSH
31485: LD_INT 6
31487: NEG
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31507: LD_ADDR_VAR 0 41
31511: PUSH
31512: LD_INT 0
31514: PUSH
31515: LD_INT 2
31517: NEG
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 1
31525: NEG
31526: PUSH
31527: LD_INT 3
31529: NEG
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 1
31537: PUSH
31538: LD_INT 2
31540: NEG
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: LIST
31550: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31551: LD_ADDR_VAR 0 42
31555: PUSH
31556: LD_INT 2
31558: PUSH
31559: LD_INT 0
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: LD_INT 2
31568: PUSH
31569: LD_INT 1
31571: NEG
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: LD_INT 3
31579: PUSH
31580: LD_INT 1
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: LIST
31591: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31592: LD_ADDR_VAR 0 43
31596: PUSH
31597: LD_INT 2
31599: PUSH
31600: LD_INT 2
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 3
31609: PUSH
31610: LD_INT 2
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 2
31619: PUSH
31620: LD_INT 3
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: LIST
31631: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31632: LD_ADDR_VAR 0 44
31636: PUSH
31637: LD_INT 0
31639: PUSH
31640: LD_INT 2
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PUSH
31647: LD_INT 1
31649: PUSH
31650: LD_INT 3
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PUSH
31657: LD_INT 1
31659: NEG
31660: PUSH
31661: LD_INT 2
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: LIST
31672: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31673: LD_ADDR_VAR 0 45
31677: PUSH
31678: LD_INT 2
31680: NEG
31681: PUSH
31682: LD_INT 0
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: PUSH
31689: LD_INT 2
31691: NEG
31692: PUSH
31693: LD_INT 1
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 3
31702: NEG
31703: PUSH
31704: LD_INT 1
31706: NEG
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: LIST
31716: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31717: LD_ADDR_VAR 0 46
31721: PUSH
31722: LD_INT 2
31724: NEG
31725: PUSH
31726: LD_INT 2
31728: NEG
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: LD_INT 2
31736: NEG
31737: PUSH
31738: LD_INT 3
31740: NEG
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 3
31748: NEG
31749: PUSH
31750: LD_INT 2
31752: NEG
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: LIST
31762: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31763: LD_ADDR_VAR 0 47
31767: PUSH
31768: LD_INT 2
31770: NEG
31771: PUSH
31772: LD_INT 3
31774: NEG
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 1
31782: NEG
31783: PUSH
31784: LD_INT 3
31786: NEG
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31796: LD_ADDR_VAR 0 48
31800: PUSH
31801: LD_INT 1
31803: PUSH
31804: LD_INT 2
31806: NEG
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: PUSH
31812: LD_INT 2
31814: PUSH
31815: LD_INT 1
31817: NEG
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31827: LD_ADDR_VAR 0 49
31831: PUSH
31832: LD_INT 3
31834: PUSH
31835: LD_INT 1
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: PUSH
31842: LD_INT 3
31844: PUSH
31845: LD_INT 2
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31856: LD_ADDR_VAR 0 50
31860: PUSH
31861: LD_INT 2
31863: PUSH
31864: LD_INT 3
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 1
31873: PUSH
31874: LD_INT 3
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31885: LD_ADDR_VAR 0 51
31889: PUSH
31890: LD_INT 1
31892: NEG
31893: PUSH
31894: LD_INT 2
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: LD_INT 2
31903: NEG
31904: PUSH
31905: LD_INT 1
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31916: LD_ADDR_VAR 0 52
31920: PUSH
31921: LD_INT 3
31923: NEG
31924: PUSH
31925: LD_INT 1
31927: NEG
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: PUSH
31933: LD_INT 3
31935: NEG
31936: PUSH
31937: LD_INT 2
31939: NEG
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31949: LD_ADDR_VAR 0 53
31953: PUSH
31954: LD_INT 1
31956: NEG
31957: PUSH
31958: LD_INT 3
31960: NEG
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: PUSH
31966: LD_INT 0
31968: PUSH
31969: LD_INT 3
31971: NEG
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: LD_INT 1
31979: PUSH
31980: LD_INT 2
31982: NEG
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: LIST
31992: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31993: LD_ADDR_VAR 0 54
31997: PUSH
31998: LD_INT 2
32000: PUSH
32001: LD_INT 1
32003: NEG
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: LD_INT 3
32011: PUSH
32012: LD_INT 0
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: PUSH
32019: LD_INT 3
32021: PUSH
32022: LD_INT 1
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: LIST
32033: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32034: LD_ADDR_VAR 0 55
32038: PUSH
32039: LD_INT 3
32041: PUSH
32042: LD_INT 2
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: PUSH
32049: LD_INT 3
32051: PUSH
32052: LD_INT 3
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: PUSH
32059: LD_INT 2
32061: PUSH
32062: LD_INT 3
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: LIST
32073: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32074: LD_ADDR_VAR 0 56
32078: PUSH
32079: LD_INT 1
32081: PUSH
32082: LD_INT 3
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: PUSH
32089: LD_INT 0
32091: PUSH
32092: LD_INT 3
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 1
32101: NEG
32102: PUSH
32103: LD_INT 2
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: LIST
32114: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32115: LD_ADDR_VAR 0 57
32119: PUSH
32120: LD_INT 2
32122: NEG
32123: PUSH
32124: LD_INT 1
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 3
32133: NEG
32134: PUSH
32135: LD_INT 0
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: LD_INT 3
32144: NEG
32145: PUSH
32146: LD_INT 1
32148: NEG
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: LIST
32158: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32159: LD_ADDR_VAR 0 58
32163: PUSH
32164: LD_INT 2
32166: NEG
32167: PUSH
32168: LD_INT 3
32170: NEG
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: PUSH
32176: LD_INT 3
32178: NEG
32179: PUSH
32180: LD_INT 2
32182: NEG
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PUSH
32188: LD_INT 3
32190: NEG
32191: PUSH
32192: LD_INT 3
32194: NEG
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: LIST
32204: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
32205: LD_ADDR_VAR 0 59
32209: PUSH
32210: LD_INT 1
32212: NEG
32213: PUSH
32214: LD_INT 2
32216: NEG
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: LD_INT 0
32224: PUSH
32225: LD_INT 2
32227: NEG
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 1
32235: PUSH
32236: LD_INT 1
32238: NEG
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: LIST
32248: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32249: LD_ADDR_VAR 0 60
32253: PUSH
32254: LD_INT 1
32256: PUSH
32257: LD_INT 1
32259: NEG
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: PUSH
32265: LD_INT 2
32267: PUSH
32268: LD_INT 0
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 2
32277: PUSH
32278: LD_INT 1
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: LIST
32289: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32290: LD_ADDR_VAR 0 61
32294: PUSH
32295: LD_INT 2
32297: PUSH
32298: LD_INT 1
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PUSH
32305: LD_INT 2
32307: PUSH
32308: LD_INT 2
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: LD_INT 1
32317: PUSH
32318: LD_INT 2
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: LIST
32329: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32330: LD_ADDR_VAR 0 62
32334: PUSH
32335: LD_INT 1
32337: PUSH
32338: LD_INT 2
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: PUSH
32345: LD_INT 0
32347: PUSH
32348: LD_INT 2
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: LD_INT 1
32357: NEG
32358: PUSH
32359: LD_INT 1
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: LIST
32370: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32371: LD_ADDR_VAR 0 63
32375: PUSH
32376: LD_INT 1
32378: NEG
32379: PUSH
32380: LD_INT 1
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 2
32389: NEG
32390: PUSH
32391: LD_INT 0
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 2
32400: NEG
32401: PUSH
32402: LD_INT 1
32404: NEG
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: LIST
32414: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32415: LD_ADDR_VAR 0 64
32419: PUSH
32420: LD_INT 1
32422: NEG
32423: PUSH
32424: LD_INT 2
32426: NEG
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: PUSH
32432: LD_INT 2
32434: NEG
32435: PUSH
32436: LD_INT 1
32438: NEG
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: LD_INT 2
32446: NEG
32447: PUSH
32448: LD_INT 2
32450: NEG
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: LIST
32460: ST_TO_ADDR
// end ; 2 :
32461: GO 35727
32463: LD_INT 2
32465: DOUBLE
32466: EQUAL
32467: IFTRUE 32471
32469: GO 35726
32471: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32472: LD_ADDR_VAR 0 29
32476: PUSH
32477: LD_INT 4
32479: PUSH
32480: LD_INT 0
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 4
32489: PUSH
32490: LD_INT 1
32492: NEG
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: LD_INT 5
32500: PUSH
32501: LD_INT 0
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 5
32510: PUSH
32511: LD_INT 1
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: LD_INT 4
32520: PUSH
32521: LD_INT 1
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: PUSH
32528: LD_INT 3
32530: PUSH
32531: LD_INT 0
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: PUSH
32538: LD_INT 3
32540: PUSH
32541: LD_INT 1
32543: NEG
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 3
32551: PUSH
32552: LD_INT 2
32554: NEG
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 5
32562: PUSH
32563: LD_INT 2
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PUSH
32570: LD_INT 3
32572: PUSH
32573: LD_INT 3
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PUSH
32580: LD_INT 3
32582: PUSH
32583: LD_INT 2
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: LD_INT 4
32592: PUSH
32593: LD_INT 3
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: LD_INT 4
32602: PUSH
32603: LD_INT 4
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PUSH
32610: LD_INT 3
32612: PUSH
32613: LD_INT 4
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: PUSH
32620: LD_INT 2
32622: PUSH
32623: LD_INT 3
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: PUSH
32630: LD_INT 2
32632: PUSH
32633: LD_INT 2
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: PUSH
32640: LD_INT 4
32642: PUSH
32643: LD_INT 2
32645: PUSH
32646: EMPTY
32647: LIST
32648: LIST
32649: PUSH
32650: LD_INT 2
32652: PUSH
32653: LD_INT 4
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: PUSH
32660: LD_INT 0
32662: PUSH
32663: LD_INT 4
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: LD_INT 0
32672: PUSH
32673: LD_INT 3
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 1
32682: PUSH
32683: LD_INT 4
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 1
32692: PUSH
32693: LD_INT 5
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 0
32702: PUSH
32703: LD_INT 5
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: PUSH
32710: LD_INT 1
32712: NEG
32713: PUSH
32714: LD_INT 4
32716: PUSH
32717: EMPTY
32718: LIST
32719: LIST
32720: PUSH
32721: LD_INT 1
32723: NEG
32724: PUSH
32725: LD_INT 3
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PUSH
32732: LD_INT 2
32734: PUSH
32735: LD_INT 5
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: PUSH
32742: LD_INT 2
32744: NEG
32745: PUSH
32746: LD_INT 3
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PUSH
32753: LD_INT 3
32755: NEG
32756: PUSH
32757: LD_INT 0
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 3
32766: NEG
32767: PUSH
32768: LD_INT 1
32770: NEG
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: LD_INT 2
32778: NEG
32779: PUSH
32780: LD_INT 0
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: LD_INT 2
32789: NEG
32790: PUSH
32791: LD_INT 1
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 3
32800: NEG
32801: PUSH
32802: LD_INT 1
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: LD_INT 4
32811: NEG
32812: PUSH
32813: LD_INT 0
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: PUSH
32820: LD_INT 4
32822: NEG
32823: PUSH
32824: LD_INT 1
32826: NEG
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 4
32834: NEG
32835: PUSH
32836: LD_INT 2
32838: NEG
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: PUSH
32844: LD_INT 2
32846: NEG
32847: PUSH
32848: LD_INT 2
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: PUSH
32855: LD_INT 4
32857: NEG
32858: PUSH
32859: LD_INT 4
32861: NEG
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: LD_INT 4
32869: NEG
32870: PUSH
32871: LD_INT 5
32873: NEG
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: LD_INT 3
32881: NEG
32882: PUSH
32883: LD_INT 4
32885: NEG
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: PUSH
32891: LD_INT 3
32893: NEG
32894: PUSH
32895: LD_INT 3
32897: NEG
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: PUSH
32903: LD_INT 4
32905: NEG
32906: PUSH
32907: LD_INT 3
32909: NEG
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 5
32917: NEG
32918: PUSH
32919: LD_INT 4
32921: NEG
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 5
32929: NEG
32930: PUSH
32931: LD_INT 5
32933: NEG
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: PUSH
32939: LD_INT 3
32941: NEG
32942: PUSH
32943: LD_INT 5
32945: NEG
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: PUSH
32951: LD_INT 5
32953: NEG
32954: PUSH
32955: LD_INT 3
32957: NEG
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: LIST
32991: LIST
32992: LIST
32993: LIST
32994: LIST
32995: LIST
32996: LIST
32997: LIST
32998: LIST
32999: LIST
33000: LIST
33001: LIST
33002: LIST
33003: LIST
33004: LIST
33005: LIST
33006: LIST
33007: LIST
33008: LIST
33009: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
33010: LD_ADDR_VAR 0 30
33014: PUSH
33015: LD_INT 4
33017: PUSH
33018: LD_INT 4
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: PUSH
33025: LD_INT 4
33027: PUSH
33028: LD_INT 3
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PUSH
33035: LD_INT 5
33037: PUSH
33038: LD_INT 4
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 5
33047: PUSH
33048: LD_INT 5
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: PUSH
33055: LD_INT 4
33057: PUSH
33058: LD_INT 5
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: PUSH
33065: LD_INT 3
33067: PUSH
33068: LD_INT 4
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 3
33077: PUSH
33078: LD_INT 3
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: PUSH
33085: LD_INT 5
33087: PUSH
33088: LD_INT 3
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PUSH
33095: LD_INT 3
33097: PUSH
33098: LD_INT 5
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: LD_INT 0
33107: PUSH
33108: LD_INT 3
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 0
33117: PUSH
33118: LD_INT 2
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PUSH
33125: LD_INT 1
33127: PUSH
33128: LD_INT 3
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: PUSH
33135: LD_INT 1
33137: PUSH
33138: LD_INT 4
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: PUSH
33145: LD_INT 0
33147: PUSH
33148: LD_INT 4
33150: PUSH
33151: EMPTY
33152: LIST
33153: LIST
33154: PUSH
33155: LD_INT 1
33157: NEG
33158: PUSH
33159: LD_INT 3
33161: PUSH
33162: EMPTY
33163: LIST
33164: LIST
33165: PUSH
33166: LD_INT 1
33168: NEG
33169: PUSH
33170: LD_INT 2
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: PUSH
33177: LD_INT 2
33179: PUSH
33180: LD_INT 4
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PUSH
33187: LD_INT 2
33189: NEG
33190: PUSH
33191: LD_INT 2
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: LD_INT 4
33200: NEG
33201: PUSH
33202: LD_INT 0
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 4
33211: NEG
33212: PUSH
33213: LD_INT 1
33215: NEG
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 3
33223: NEG
33224: PUSH
33225: LD_INT 0
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: PUSH
33232: LD_INT 3
33234: NEG
33235: PUSH
33236: LD_INT 1
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: PUSH
33243: LD_INT 4
33245: NEG
33246: PUSH
33247: LD_INT 1
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: PUSH
33254: LD_INT 5
33256: NEG
33257: PUSH
33258: LD_INT 0
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 5
33267: NEG
33268: PUSH
33269: LD_INT 1
33271: NEG
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 5
33279: NEG
33280: PUSH
33281: LD_INT 2
33283: NEG
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 3
33291: NEG
33292: PUSH
33293: LD_INT 2
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 3
33302: NEG
33303: PUSH
33304: LD_INT 3
33306: NEG
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 3
33314: NEG
33315: PUSH
33316: LD_INT 4
33318: NEG
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: LD_INT 2
33326: NEG
33327: PUSH
33328: LD_INT 3
33330: NEG
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: PUSH
33336: LD_INT 2
33338: NEG
33339: PUSH
33340: LD_INT 2
33342: NEG
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: PUSH
33348: LD_INT 3
33350: NEG
33351: PUSH
33352: LD_INT 2
33354: NEG
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: LD_INT 4
33362: NEG
33363: PUSH
33364: LD_INT 3
33366: NEG
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 4
33374: NEG
33375: PUSH
33376: LD_INT 4
33378: NEG
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 2
33386: NEG
33387: PUSH
33388: LD_INT 4
33390: NEG
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PUSH
33396: LD_INT 4
33398: NEG
33399: PUSH
33400: LD_INT 2
33402: NEG
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 0
33410: PUSH
33411: LD_INT 4
33413: NEG
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: PUSH
33419: LD_INT 0
33421: PUSH
33422: LD_INT 5
33424: NEG
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: LD_INT 1
33432: PUSH
33433: LD_INT 4
33435: NEG
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: LD_INT 1
33443: PUSH
33444: LD_INT 3
33446: NEG
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: PUSH
33452: LD_INT 0
33454: PUSH
33455: LD_INT 3
33457: NEG
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PUSH
33463: LD_INT 1
33465: NEG
33466: PUSH
33467: LD_INT 4
33469: NEG
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: PUSH
33475: LD_INT 1
33477: NEG
33478: PUSH
33479: LD_INT 5
33481: NEG
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PUSH
33487: LD_INT 2
33489: PUSH
33490: LD_INT 3
33492: NEG
33493: PUSH
33494: EMPTY
33495: LIST
33496: LIST
33497: PUSH
33498: LD_INT 2
33500: NEG
33501: PUSH
33502: LD_INT 5
33504: NEG
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33557: LD_ADDR_VAR 0 31
33561: PUSH
33562: LD_INT 0
33564: PUSH
33565: LD_INT 4
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: PUSH
33572: LD_INT 0
33574: PUSH
33575: LD_INT 3
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 1
33584: PUSH
33585: LD_INT 4
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 1
33594: PUSH
33595: LD_INT 5
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: LD_INT 0
33604: PUSH
33605: LD_INT 5
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: LD_INT 1
33614: NEG
33615: PUSH
33616: LD_INT 4
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 1
33625: NEG
33626: PUSH
33627: LD_INT 3
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 2
33636: PUSH
33637: LD_INT 5
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 2
33646: NEG
33647: PUSH
33648: LD_INT 3
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 3
33657: NEG
33658: PUSH
33659: LD_INT 0
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: LD_INT 3
33668: NEG
33669: PUSH
33670: LD_INT 1
33672: NEG
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: PUSH
33678: LD_INT 2
33680: NEG
33681: PUSH
33682: LD_INT 0
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 2
33691: NEG
33692: PUSH
33693: LD_INT 1
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: PUSH
33700: LD_INT 3
33702: NEG
33703: PUSH
33704: LD_INT 1
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 4
33713: NEG
33714: PUSH
33715: LD_INT 0
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: LD_INT 4
33724: NEG
33725: PUSH
33726: LD_INT 1
33728: NEG
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: LD_INT 4
33736: NEG
33737: PUSH
33738: LD_INT 2
33740: NEG
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PUSH
33746: LD_INT 2
33748: NEG
33749: PUSH
33750: LD_INT 2
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: LD_INT 4
33759: NEG
33760: PUSH
33761: LD_INT 4
33763: NEG
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 4
33771: NEG
33772: PUSH
33773: LD_INT 5
33775: NEG
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: LD_INT 3
33783: NEG
33784: PUSH
33785: LD_INT 4
33787: NEG
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: PUSH
33793: LD_INT 3
33795: NEG
33796: PUSH
33797: LD_INT 3
33799: NEG
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PUSH
33805: LD_INT 4
33807: NEG
33808: PUSH
33809: LD_INT 3
33811: NEG
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PUSH
33817: LD_INT 5
33819: NEG
33820: PUSH
33821: LD_INT 4
33823: NEG
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 5
33831: NEG
33832: PUSH
33833: LD_INT 5
33835: NEG
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: LD_INT 3
33843: NEG
33844: PUSH
33845: LD_INT 5
33847: NEG
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 5
33855: NEG
33856: PUSH
33857: LD_INT 3
33859: NEG
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PUSH
33865: LD_INT 0
33867: PUSH
33868: LD_INT 3
33870: NEG
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PUSH
33876: LD_INT 0
33878: PUSH
33879: LD_INT 4
33881: NEG
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 1
33889: PUSH
33890: LD_INT 3
33892: NEG
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: LD_INT 1
33900: PUSH
33901: LD_INT 2
33903: NEG
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 0
33911: PUSH
33912: LD_INT 2
33914: NEG
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: LD_INT 1
33922: NEG
33923: PUSH
33924: LD_INT 3
33926: NEG
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: PUSH
33932: LD_INT 1
33934: NEG
33935: PUSH
33936: LD_INT 4
33938: NEG
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: PUSH
33944: LD_INT 2
33946: PUSH
33947: LD_INT 2
33949: NEG
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PUSH
33955: LD_INT 2
33957: NEG
33958: PUSH
33959: LD_INT 4
33961: NEG
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: PUSH
33967: LD_INT 4
33969: PUSH
33970: LD_INT 0
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: LD_INT 4
33979: PUSH
33980: LD_INT 1
33982: NEG
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: PUSH
33988: LD_INT 5
33990: PUSH
33991: LD_INT 0
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: PUSH
33998: LD_INT 5
34000: PUSH
34001: LD_INT 1
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: PUSH
34008: LD_INT 4
34010: PUSH
34011: LD_INT 1
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: LD_INT 3
34020: PUSH
34021: LD_INT 0
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 3
34030: PUSH
34031: LD_INT 1
34033: NEG
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 3
34041: PUSH
34042: LD_INT 2
34044: NEG
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 5
34052: PUSH
34053: LD_INT 2
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: LIST
34064: LIST
34065: LIST
34066: LIST
34067: LIST
34068: LIST
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: LIST
34091: LIST
34092: LIST
34093: LIST
34094: LIST
34095: LIST
34096: LIST
34097: LIST
34098: LIST
34099: LIST
34100: LIST
34101: LIST
34102: LIST
34103: LIST
34104: LIST
34105: LIST
34106: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
34107: LD_ADDR_VAR 0 32
34111: PUSH
34112: LD_INT 4
34114: NEG
34115: PUSH
34116: LD_INT 0
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_INT 4
34125: NEG
34126: PUSH
34127: LD_INT 1
34129: NEG
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 3
34137: NEG
34138: PUSH
34139: LD_INT 0
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: LD_INT 3
34148: NEG
34149: PUSH
34150: LD_INT 1
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 4
34159: NEG
34160: PUSH
34161: LD_INT 1
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: PUSH
34168: LD_INT 5
34170: NEG
34171: PUSH
34172: LD_INT 0
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: PUSH
34179: LD_INT 5
34181: NEG
34182: PUSH
34183: LD_INT 1
34185: NEG
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 5
34193: NEG
34194: PUSH
34195: LD_INT 2
34197: NEG
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: PUSH
34203: LD_INT 3
34205: NEG
34206: PUSH
34207: LD_INT 2
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: PUSH
34214: LD_INT 3
34216: NEG
34217: PUSH
34218: LD_INT 3
34220: NEG
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: PUSH
34226: LD_INT 3
34228: NEG
34229: PUSH
34230: LD_INT 4
34232: NEG
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: PUSH
34238: LD_INT 2
34240: NEG
34241: PUSH
34242: LD_INT 3
34244: NEG
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: PUSH
34250: LD_INT 2
34252: NEG
34253: PUSH
34254: LD_INT 2
34256: NEG
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: PUSH
34262: LD_INT 3
34264: NEG
34265: PUSH
34266: LD_INT 2
34268: NEG
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: LD_INT 4
34276: NEG
34277: PUSH
34278: LD_INT 3
34280: NEG
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: PUSH
34286: LD_INT 4
34288: NEG
34289: PUSH
34290: LD_INT 4
34292: NEG
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PUSH
34298: LD_INT 2
34300: NEG
34301: PUSH
34302: LD_INT 4
34304: NEG
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: PUSH
34310: LD_INT 4
34312: NEG
34313: PUSH
34314: LD_INT 2
34316: NEG
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 0
34324: PUSH
34325: LD_INT 4
34327: NEG
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PUSH
34333: LD_INT 0
34335: PUSH
34336: LD_INT 5
34338: NEG
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: PUSH
34344: LD_INT 1
34346: PUSH
34347: LD_INT 4
34349: NEG
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: PUSH
34355: LD_INT 1
34357: PUSH
34358: LD_INT 3
34360: NEG
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 0
34368: PUSH
34369: LD_INT 3
34371: NEG
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: PUSH
34377: LD_INT 1
34379: NEG
34380: PUSH
34381: LD_INT 4
34383: NEG
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: PUSH
34389: LD_INT 1
34391: NEG
34392: PUSH
34393: LD_INT 5
34395: NEG
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: LD_INT 2
34403: PUSH
34404: LD_INT 3
34406: NEG
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 2
34414: NEG
34415: PUSH
34416: LD_INT 5
34418: NEG
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: LD_INT 3
34426: PUSH
34427: LD_INT 0
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 3
34436: PUSH
34437: LD_INT 1
34439: NEG
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: PUSH
34445: LD_INT 4
34447: PUSH
34448: LD_INT 0
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PUSH
34455: LD_INT 4
34457: PUSH
34458: LD_INT 1
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 3
34467: PUSH
34468: LD_INT 1
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PUSH
34475: LD_INT 2
34477: PUSH
34478: LD_INT 0
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: PUSH
34485: LD_INT 2
34487: PUSH
34488: LD_INT 1
34490: NEG
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PUSH
34496: LD_INT 2
34498: PUSH
34499: LD_INT 2
34501: NEG
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 4
34509: PUSH
34510: LD_INT 2
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 4
34519: PUSH
34520: LD_INT 4
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: LD_INT 4
34529: PUSH
34530: LD_INT 3
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: LD_INT 5
34539: PUSH
34540: LD_INT 4
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: PUSH
34547: LD_INT 5
34549: PUSH
34550: LD_INT 5
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: PUSH
34557: LD_INT 4
34559: PUSH
34560: LD_INT 5
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: PUSH
34567: LD_INT 3
34569: PUSH
34570: LD_INT 4
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: PUSH
34577: LD_INT 3
34579: PUSH
34580: LD_INT 3
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 5
34589: PUSH
34590: LD_INT 3
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 3
34599: PUSH
34600: LD_INT 5
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: LIST
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: LIST
34644: LIST
34645: LIST
34646: LIST
34647: LIST
34648: LIST
34649: LIST
34650: LIST
34651: LIST
34652: LIST
34653: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34654: LD_ADDR_VAR 0 33
34658: PUSH
34659: LD_INT 4
34661: NEG
34662: PUSH
34663: LD_INT 4
34665: NEG
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: PUSH
34671: LD_INT 4
34673: NEG
34674: PUSH
34675: LD_INT 5
34677: NEG
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 3
34685: NEG
34686: PUSH
34687: LD_INT 4
34689: NEG
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 3
34697: NEG
34698: PUSH
34699: LD_INT 3
34701: NEG
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: PUSH
34707: LD_INT 4
34709: NEG
34710: PUSH
34711: LD_INT 3
34713: NEG
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: PUSH
34719: LD_INT 5
34721: NEG
34722: PUSH
34723: LD_INT 4
34725: NEG
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: PUSH
34731: LD_INT 5
34733: NEG
34734: PUSH
34735: LD_INT 5
34737: NEG
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: PUSH
34743: LD_INT 3
34745: NEG
34746: PUSH
34747: LD_INT 5
34749: NEG
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: PUSH
34755: LD_INT 5
34757: NEG
34758: PUSH
34759: LD_INT 3
34761: NEG
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 0
34769: PUSH
34770: LD_INT 3
34772: NEG
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 0
34780: PUSH
34781: LD_INT 4
34783: NEG
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: LD_INT 1
34791: PUSH
34792: LD_INT 3
34794: NEG
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PUSH
34800: LD_INT 1
34802: PUSH
34803: LD_INT 2
34805: NEG
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: PUSH
34811: LD_INT 0
34813: PUSH
34814: LD_INT 2
34816: NEG
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: LD_INT 1
34824: NEG
34825: PUSH
34826: LD_INT 3
34828: NEG
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PUSH
34834: LD_INT 1
34836: NEG
34837: PUSH
34838: LD_INT 4
34840: NEG
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: PUSH
34846: LD_INT 2
34848: PUSH
34849: LD_INT 2
34851: NEG
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_INT 2
34859: NEG
34860: PUSH
34861: LD_INT 4
34863: NEG
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: LD_INT 4
34871: PUSH
34872: LD_INT 0
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 4
34881: PUSH
34882: LD_INT 1
34884: NEG
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: PUSH
34890: LD_INT 5
34892: PUSH
34893: LD_INT 0
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: PUSH
34900: LD_INT 5
34902: PUSH
34903: LD_INT 1
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: PUSH
34910: LD_INT 4
34912: PUSH
34913: LD_INT 1
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: PUSH
34920: LD_INT 3
34922: PUSH
34923: LD_INT 0
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: LD_INT 3
34932: PUSH
34933: LD_INT 1
34935: NEG
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: LD_INT 3
34943: PUSH
34944: LD_INT 2
34946: NEG
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PUSH
34952: LD_INT 5
34954: PUSH
34955: LD_INT 2
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: LD_INT 3
34964: PUSH
34965: LD_INT 3
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 3
34974: PUSH
34975: LD_INT 2
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: PUSH
34982: LD_INT 4
34984: PUSH
34985: LD_INT 3
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: PUSH
34992: LD_INT 4
34994: PUSH
34995: LD_INT 4
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 3
35004: PUSH
35005: LD_INT 4
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: LD_INT 2
35014: PUSH
35015: LD_INT 3
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PUSH
35022: LD_INT 2
35024: PUSH
35025: LD_INT 2
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: LD_INT 4
35034: PUSH
35035: LD_INT 2
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: PUSH
35042: LD_INT 2
35044: PUSH
35045: LD_INT 4
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PUSH
35052: LD_INT 0
35054: PUSH
35055: LD_INT 4
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: PUSH
35062: LD_INT 0
35064: PUSH
35065: LD_INT 3
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: LD_INT 1
35074: PUSH
35075: LD_INT 4
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: LD_INT 1
35084: PUSH
35085: LD_INT 5
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: PUSH
35092: LD_INT 0
35094: PUSH
35095: LD_INT 5
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 1
35104: NEG
35105: PUSH
35106: LD_INT 4
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 1
35115: NEG
35116: PUSH
35117: LD_INT 3
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 2
35126: PUSH
35127: LD_INT 5
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 2
35136: NEG
35137: PUSH
35138: LD_INT 3
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: LIST
35166: LIST
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
35192: LD_ADDR_VAR 0 34
35196: PUSH
35197: LD_INT 0
35199: PUSH
35200: LD_INT 4
35202: NEG
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: PUSH
35208: LD_INT 0
35210: PUSH
35211: LD_INT 5
35213: NEG
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_INT 1
35221: PUSH
35222: LD_INT 4
35224: NEG
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 1
35232: PUSH
35233: LD_INT 3
35235: NEG
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: PUSH
35241: LD_INT 0
35243: PUSH
35244: LD_INT 3
35246: NEG
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: PUSH
35252: LD_INT 1
35254: NEG
35255: PUSH
35256: LD_INT 4
35258: NEG
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: LD_INT 1
35266: NEG
35267: PUSH
35268: LD_INT 5
35270: NEG
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: PUSH
35276: LD_INT 2
35278: PUSH
35279: LD_INT 3
35281: NEG
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: PUSH
35287: LD_INT 2
35289: NEG
35290: PUSH
35291: LD_INT 5
35293: NEG
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: PUSH
35299: LD_INT 3
35301: PUSH
35302: LD_INT 0
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PUSH
35309: LD_INT 3
35311: PUSH
35312: LD_INT 1
35314: NEG
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: PUSH
35320: LD_INT 4
35322: PUSH
35323: LD_INT 0
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: PUSH
35330: LD_INT 4
35332: PUSH
35333: LD_INT 1
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 3
35342: PUSH
35343: LD_INT 1
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: PUSH
35350: LD_INT 2
35352: PUSH
35353: LD_INT 0
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: LD_INT 2
35362: PUSH
35363: LD_INT 1
35365: NEG
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: LD_INT 2
35373: PUSH
35374: LD_INT 2
35376: NEG
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: LD_INT 4
35384: PUSH
35385: LD_INT 2
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: LD_INT 4
35394: PUSH
35395: LD_INT 4
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: LD_INT 4
35404: PUSH
35405: LD_INT 3
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: LD_INT 5
35414: PUSH
35415: LD_INT 4
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PUSH
35422: LD_INT 5
35424: PUSH
35425: LD_INT 5
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: PUSH
35432: LD_INT 4
35434: PUSH
35435: LD_INT 5
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: PUSH
35442: LD_INT 3
35444: PUSH
35445: LD_INT 4
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: PUSH
35452: LD_INT 3
35454: PUSH
35455: LD_INT 3
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: PUSH
35462: LD_INT 5
35464: PUSH
35465: LD_INT 3
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: LD_INT 3
35474: PUSH
35475: LD_INT 5
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: PUSH
35482: LD_INT 0
35484: PUSH
35485: LD_INT 3
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: LD_INT 0
35494: PUSH
35495: LD_INT 2
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: PUSH
35502: LD_INT 1
35504: PUSH
35505: LD_INT 3
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PUSH
35512: LD_INT 1
35514: PUSH
35515: LD_INT 4
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PUSH
35522: LD_INT 0
35524: PUSH
35525: LD_INT 4
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 1
35534: NEG
35535: PUSH
35536: LD_INT 3
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 1
35545: NEG
35546: PUSH
35547: LD_INT 2
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: PUSH
35554: LD_INT 2
35556: PUSH
35557: LD_INT 4
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: PUSH
35564: LD_INT 2
35566: NEG
35567: PUSH
35568: LD_INT 2
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: PUSH
35575: LD_INT 4
35577: NEG
35578: PUSH
35579: LD_INT 0
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: PUSH
35586: LD_INT 4
35588: NEG
35589: PUSH
35590: LD_INT 1
35592: NEG
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: PUSH
35598: LD_INT 3
35600: NEG
35601: PUSH
35602: LD_INT 0
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: PUSH
35609: LD_INT 3
35611: NEG
35612: PUSH
35613: LD_INT 1
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: PUSH
35620: LD_INT 4
35622: NEG
35623: PUSH
35624: LD_INT 1
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: PUSH
35631: LD_INT 5
35633: NEG
35634: PUSH
35635: LD_INT 0
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PUSH
35642: LD_INT 5
35644: NEG
35645: PUSH
35646: LD_INT 1
35648: NEG
35649: PUSH
35650: EMPTY
35651: LIST
35652: LIST
35653: PUSH
35654: LD_INT 5
35656: NEG
35657: PUSH
35658: LD_INT 2
35660: NEG
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: LD_INT 3
35668: NEG
35669: PUSH
35670: LD_INT 2
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: LIST
35716: LIST
35717: LIST
35718: LIST
35719: LIST
35720: LIST
35721: LIST
35722: LIST
35723: ST_TO_ADDR
// end ; end ;
35724: GO 35727
35726: POP
// case btype of b_depot , b_warehouse :
35727: LD_VAR 0 1
35731: PUSH
35732: LD_INT 0
35734: DOUBLE
35735: EQUAL
35736: IFTRUE 35746
35738: LD_INT 1
35740: DOUBLE
35741: EQUAL
35742: IFTRUE 35746
35744: GO 35947
35746: POP
// case nation of nation_american :
35747: LD_VAR 0 5
35751: PUSH
35752: LD_INT 1
35754: DOUBLE
35755: EQUAL
35756: IFTRUE 35760
35758: GO 35816
35760: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35761: LD_ADDR_VAR 0 9
35765: PUSH
35766: LD_VAR 0 11
35770: PUSH
35771: LD_VAR 0 12
35775: PUSH
35776: LD_VAR 0 13
35780: PUSH
35781: LD_VAR 0 14
35785: PUSH
35786: LD_VAR 0 15
35790: PUSH
35791: LD_VAR 0 16
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: LIST
35803: PUSH
35804: LD_VAR 0 4
35808: PUSH
35809: LD_INT 1
35811: PLUS
35812: ARRAY
35813: ST_TO_ADDR
35814: GO 35945
35816: LD_INT 2
35818: DOUBLE
35819: EQUAL
35820: IFTRUE 35824
35822: GO 35880
35824: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35825: LD_ADDR_VAR 0 9
35829: PUSH
35830: LD_VAR 0 17
35834: PUSH
35835: LD_VAR 0 18
35839: PUSH
35840: LD_VAR 0 19
35844: PUSH
35845: LD_VAR 0 20
35849: PUSH
35850: LD_VAR 0 21
35854: PUSH
35855: LD_VAR 0 22
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: PUSH
35868: LD_VAR 0 4
35872: PUSH
35873: LD_INT 1
35875: PLUS
35876: ARRAY
35877: ST_TO_ADDR
35878: GO 35945
35880: LD_INT 3
35882: DOUBLE
35883: EQUAL
35884: IFTRUE 35888
35886: GO 35944
35888: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35889: LD_ADDR_VAR 0 9
35893: PUSH
35894: LD_VAR 0 23
35898: PUSH
35899: LD_VAR 0 24
35903: PUSH
35904: LD_VAR 0 25
35908: PUSH
35909: LD_VAR 0 26
35913: PUSH
35914: LD_VAR 0 27
35918: PUSH
35919: LD_VAR 0 28
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: LIST
35928: LIST
35929: LIST
35930: LIST
35931: PUSH
35932: LD_VAR 0 4
35936: PUSH
35937: LD_INT 1
35939: PLUS
35940: ARRAY
35941: ST_TO_ADDR
35942: GO 35945
35944: POP
35945: GO 36500
35947: LD_INT 2
35949: DOUBLE
35950: EQUAL
35951: IFTRUE 35961
35953: LD_INT 3
35955: DOUBLE
35956: EQUAL
35957: IFTRUE 35961
35959: GO 36017
35961: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35962: LD_ADDR_VAR 0 9
35966: PUSH
35967: LD_VAR 0 29
35971: PUSH
35972: LD_VAR 0 30
35976: PUSH
35977: LD_VAR 0 31
35981: PUSH
35982: LD_VAR 0 32
35986: PUSH
35987: LD_VAR 0 33
35991: PUSH
35992: LD_VAR 0 34
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: LIST
36001: LIST
36002: LIST
36003: LIST
36004: PUSH
36005: LD_VAR 0 4
36009: PUSH
36010: LD_INT 1
36012: PLUS
36013: ARRAY
36014: ST_TO_ADDR
36015: GO 36500
36017: LD_INT 16
36019: DOUBLE
36020: EQUAL
36021: IFTRUE 36079
36023: LD_INT 17
36025: DOUBLE
36026: EQUAL
36027: IFTRUE 36079
36029: LD_INT 18
36031: DOUBLE
36032: EQUAL
36033: IFTRUE 36079
36035: LD_INT 19
36037: DOUBLE
36038: EQUAL
36039: IFTRUE 36079
36041: LD_INT 22
36043: DOUBLE
36044: EQUAL
36045: IFTRUE 36079
36047: LD_INT 20
36049: DOUBLE
36050: EQUAL
36051: IFTRUE 36079
36053: LD_INT 21
36055: DOUBLE
36056: EQUAL
36057: IFTRUE 36079
36059: LD_INT 23
36061: DOUBLE
36062: EQUAL
36063: IFTRUE 36079
36065: LD_INT 24
36067: DOUBLE
36068: EQUAL
36069: IFTRUE 36079
36071: LD_INT 25
36073: DOUBLE
36074: EQUAL
36075: IFTRUE 36079
36077: GO 36135
36079: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
36080: LD_ADDR_VAR 0 9
36084: PUSH
36085: LD_VAR 0 35
36089: PUSH
36090: LD_VAR 0 36
36094: PUSH
36095: LD_VAR 0 37
36099: PUSH
36100: LD_VAR 0 38
36104: PUSH
36105: LD_VAR 0 39
36109: PUSH
36110: LD_VAR 0 40
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: PUSH
36123: LD_VAR 0 4
36127: PUSH
36128: LD_INT 1
36130: PLUS
36131: ARRAY
36132: ST_TO_ADDR
36133: GO 36500
36135: LD_INT 6
36137: DOUBLE
36138: EQUAL
36139: IFTRUE 36191
36141: LD_INT 7
36143: DOUBLE
36144: EQUAL
36145: IFTRUE 36191
36147: LD_INT 8
36149: DOUBLE
36150: EQUAL
36151: IFTRUE 36191
36153: LD_INT 13
36155: DOUBLE
36156: EQUAL
36157: IFTRUE 36191
36159: LD_INT 12
36161: DOUBLE
36162: EQUAL
36163: IFTRUE 36191
36165: LD_INT 15
36167: DOUBLE
36168: EQUAL
36169: IFTRUE 36191
36171: LD_INT 11
36173: DOUBLE
36174: EQUAL
36175: IFTRUE 36191
36177: LD_INT 14
36179: DOUBLE
36180: EQUAL
36181: IFTRUE 36191
36183: LD_INT 10
36185: DOUBLE
36186: EQUAL
36187: IFTRUE 36191
36189: GO 36247
36191: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
36192: LD_ADDR_VAR 0 9
36196: PUSH
36197: LD_VAR 0 41
36201: PUSH
36202: LD_VAR 0 42
36206: PUSH
36207: LD_VAR 0 43
36211: PUSH
36212: LD_VAR 0 44
36216: PUSH
36217: LD_VAR 0 45
36221: PUSH
36222: LD_VAR 0 46
36226: PUSH
36227: EMPTY
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: PUSH
36235: LD_VAR 0 4
36239: PUSH
36240: LD_INT 1
36242: PLUS
36243: ARRAY
36244: ST_TO_ADDR
36245: GO 36500
36247: LD_INT 36
36249: DOUBLE
36250: EQUAL
36251: IFTRUE 36255
36253: GO 36311
36255: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
36256: LD_ADDR_VAR 0 9
36260: PUSH
36261: LD_VAR 0 47
36265: PUSH
36266: LD_VAR 0 48
36270: PUSH
36271: LD_VAR 0 49
36275: PUSH
36276: LD_VAR 0 50
36280: PUSH
36281: LD_VAR 0 51
36285: PUSH
36286: LD_VAR 0 52
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: LIST
36295: LIST
36296: LIST
36297: LIST
36298: PUSH
36299: LD_VAR 0 4
36303: PUSH
36304: LD_INT 1
36306: PLUS
36307: ARRAY
36308: ST_TO_ADDR
36309: GO 36500
36311: LD_INT 4
36313: DOUBLE
36314: EQUAL
36315: IFTRUE 36337
36317: LD_INT 5
36319: DOUBLE
36320: EQUAL
36321: IFTRUE 36337
36323: LD_INT 34
36325: DOUBLE
36326: EQUAL
36327: IFTRUE 36337
36329: LD_INT 37
36331: DOUBLE
36332: EQUAL
36333: IFTRUE 36337
36335: GO 36393
36337: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
36338: LD_ADDR_VAR 0 9
36342: PUSH
36343: LD_VAR 0 53
36347: PUSH
36348: LD_VAR 0 54
36352: PUSH
36353: LD_VAR 0 55
36357: PUSH
36358: LD_VAR 0 56
36362: PUSH
36363: LD_VAR 0 57
36367: PUSH
36368: LD_VAR 0 58
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: LIST
36377: LIST
36378: LIST
36379: LIST
36380: PUSH
36381: LD_VAR 0 4
36385: PUSH
36386: LD_INT 1
36388: PLUS
36389: ARRAY
36390: ST_TO_ADDR
36391: GO 36500
36393: LD_INT 31
36395: DOUBLE
36396: EQUAL
36397: IFTRUE 36443
36399: LD_INT 32
36401: DOUBLE
36402: EQUAL
36403: IFTRUE 36443
36405: LD_INT 33
36407: DOUBLE
36408: EQUAL
36409: IFTRUE 36443
36411: LD_INT 27
36413: DOUBLE
36414: EQUAL
36415: IFTRUE 36443
36417: LD_INT 26
36419: DOUBLE
36420: EQUAL
36421: IFTRUE 36443
36423: LD_INT 28
36425: DOUBLE
36426: EQUAL
36427: IFTRUE 36443
36429: LD_INT 29
36431: DOUBLE
36432: EQUAL
36433: IFTRUE 36443
36435: LD_INT 30
36437: DOUBLE
36438: EQUAL
36439: IFTRUE 36443
36441: GO 36499
36443: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
36444: LD_ADDR_VAR 0 9
36448: PUSH
36449: LD_VAR 0 59
36453: PUSH
36454: LD_VAR 0 60
36458: PUSH
36459: LD_VAR 0 61
36463: PUSH
36464: LD_VAR 0 62
36468: PUSH
36469: LD_VAR 0 63
36473: PUSH
36474: LD_VAR 0 64
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: PUSH
36487: LD_VAR 0 4
36491: PUSH
36492: LD_INT 1
36494: PLUS
36495: ARRAY
36496: ST_TO_ADDR
36497: GO 36500
36499: POP
// temp_list2 = [ ] ;
36500: LD_ADDR_VAR 0 10
36504: PUSH
36505: EMPTY
36506: ST_TO_ADDR
// for i in temp_list do
36507: LD_ADDR_VAR 0 8
36511: PUSH
36512: LD_VAR 0 9
36516: PUSH
36517: FOR_IN
36518: IFFALSE 36570
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36520: LD_ADDR_VAR 0 10
36524: PUSH
36525: LD_VAR 0 10
36529: PUSH
36530: LD_VAR 0 8
36534: PUSH
36535: LD_INT 1
36537: ARRAY
36538: PUSH
36539: LD_VAR 0 2
36543: PLUS
36544: PUSH
36545: LD_VAR 0 8
36549: PUSH
36550: LD_INT 2
36552: ARRAY
36553: PUSH
36554: LD_VAR 0 3
36558: PLUS
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: PUSH
36564: EMPTY
36565: LIST
36566: ADD
36567: ST_TO_ADDR
36568: GO 36517
36570: POP
36571: POP
// result = temp_list2 ;
36572: LD_ADDR_VAR 0 7
36576: PUSH
36577: LD_VAR 0 10
36581: ST_TO_ADDR
// end ;
36582: LD_VAR 0 7
36586: RET
// export function EnemyInRange ( unit , dist ) ; begin
36587: LD_INT 0
36589: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36590: LD_ADDR_VAR 0 3
36594: PUSH
36595: LD_VAR 0 1
36599: PPUSH
36600: CALL_OW 255
36604: PPUSH
36605: LD_VAR 0 1
36609: PPUSH
36610: CALL_OW 250
36614: PPUSH
36615: LD_VAR 0 1
36619: PPUSH
36620: CALL_OW 251
36624: PPUSH
36625: LD_VAR 0 2
36629: PPUSH
36630: CALL 9960 0 4
36634: PUSH
36635: LD_INT 4
36637: ARRAY
36638: ST_TO_ADDR
// end ;
36639: LD_VAR 0 3
36643: RET
// export function PlayerSeeMe ( unit ) ; begin
36644: LD_INT 0
36646: PPUSH
// result := See ( your_side , unit ) ;
36647: LD_ADDR_VAR 0 2
36651: PUSH
36652: LD_OWVAR 2
36656: PPUSH
36657: LD_VAR 0 1
36661: PPUSH
36662: CALL_OW 292
36666: ST_TO_ADDR
// end ;
36667: LD_VAR 0 2
36671: RET
// export function ReverseDir ( unit ) ; begin
36672: LD_INT 0
36674: PPUSH
// if not unit then
36675: LD_VAR 0 1
36679: NOT
36680: IFFALSE 36684
// exit ;
36682: GO 36707
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36684: LD_ADDR_VAR 0 2
36688: PUSH
36689: LD_VAR 0 1
36693: PPUSH
36694: CALL_OW 254
36698: PUSH
36699: LD_INT 3
36701: PLUS
36702: PUSH
36703: LD_INT 6
36705: MOD
36706: ST_TO_ADDR
// end ;
36707: LD_VAR 0 2
36711: RET
// export function ReverseArray ( array ) ; var i ; begin
36712: LD_INT 0
36714: PPUSH
36715: PPUSH
// if not array then
36716: LD_VAR 0 1
36720: NOT
36721: IFFALSE 36725
// exit ;
36723: GO 36780
// result := [ ] ;
36725: LD_ADDR_VAR 0 2
36729: PUSH
36730: EMPTY
36731: ST_TO_ADDR
// for i := array downto 1 do
36732: LD_ADDR_VAR 0 3
36736: PUSH
36737: DOUBLE
36738: LD_VAR 0 1
36742: INC
36743: ST_TO_ADDR
36744: LD_INT 1
36746: PUSH
36747: FOR_DOWNTO
36748: IFFALSE 36778
// result := Join ( result , array [ i ] ) ;
36750: LD_ADDR_VAR 0 2
36754: PUSH
36755: LD_VAR 0 2
36759: PPUSH
36760: LD_VAR 0 1
36764: PUSH
36765: LD_VAR 0 3
36769: ARRAY
36770: PPUSH
36771: CALL 41445 0 2
36775: ST_TO_ADDR
36776: GO 36747
36778: POP
36779: POP
// end ;
36780: LD_VAR 0 2
36784: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36785: LD_INT 0
36787: PPUSH
36788: PPUSH
36789: PPUSH
36790: PPUSH
36791: PPUSH
36792: PPUSH
// if not unit or not hexes then
36793: LD_VAR 0 1
36797: NOT
36798: PUSH
36799: LD_VAR 0 2
36803: NOT
36804: OR
36805: IFFALSE 36809
// exit ;
36807: GO 36932
// dist := 9999 ;
36809: LD_ADDR_VAR 0 5
36813: PUSH
36814: LD_INT 9999
36816: ST_TO_ADDR
// for i = 1 to hexes do
36817: LD_ADDR_VAR 0 4
36821: PUSH
36822: DOUBLE
36823: LD_INT 1
36825: DEC
36826: ST_TO_ADDR
36827: LD_VAR 0 2
36831: PUSH
36832: FOR_TO
36833: IFFALSE 36920
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36835: LD_ADDR_VAR 0 6
36839: PUSH
36840: LD_VAR 0 1
36844: PPUSH
36845: LD_VAR 0 2
36849: PUSH
36850: LD_VAR 0 4
36854: ARRAY
36855: PUSH
36856: LD_INT 1
36858: ARRAY
36859: PPUSH
36860: LD_VAR 0 2
36864: PUSH
36865: LD_VAR 0 4
36869: ARRAY
36870: PUSH
36871: LD_INT 2
36873: ARRAY
36874: PPUSH
36875: CALL_OW 297
36879: ST_TO_ADDR
// if tdist < dist then
36880: LD_VAR 0 6
36884: PUSH
36885: LD_VAR 0 5
36889: LESS
36890: IFFALSE 36918
// begin hex := hexes [ i ] ;
36892: LD_ADDR_VAR 0 8
36896: PUSH
36897: LD_VAR 0 2
36901: PUSH
36902: LD_VAR 0 4
36906: ARRAY
36907: ST_TO_ADDR
// dist := tdist ;
36908: LD_ADDR_VAR 0 5
36912: PUSH
36913: LD_VAR 0 6
36917: ST_TO_ADDR
// end ; end ;
36918: GO 36832
36920: POP
36921: POP
// result := hex ;
36922: LD_ADDR_VAR 0 3
36926: PUSH
36927: LD_VAR 0 8
36931: ST_TO_ADDR
// end ;
36932: LD_VAR 0 3
36936: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36937: LD_INT 0
36939: PPUSH
36940: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36941: LD_VAR 0 1
36945: NOT
36946: PUSH
36947: LD_VAR 0 1
36951: PUSH
36952: LD_INT 21
36954: PUSH
36955: LD_INT 2
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: PUSH
36962: LD_INT 23
36964: PUSH
36965: LD_INT 2
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: PPUSH
36976: CALL_OW 69
36980: IN
36981: NOT
36982: OR
36983: IFFALSE 36987
// exit ;
36985: GO 37034
// for i = 1 to 3 do
36987: LD_ADDR_VAR 0 3
36991: PUSH
36992: DOUBLE
36993: LD_INT 1
36995: DEC
36996: ST_TO_ADDR
36997: LD_INT 3
36999: PUSH
37000: FOR_TO
37001: IFFALSE 37032
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
37003: LD_VAR 0 1
37007: PPUSH
37008: CALL_OW 250
37012: PPUSH
37013: LD_VAR 0 1
37017: PPUSH
37018: CALL_OW 251
37022: PPUSH
37023: LD_INT 1
37025: PPUSH
37026: CALL_OW 453
37030: GO 37000
37032: POP
37033: POP
// end ;
37034: LD_VAR 0 2
37038: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
37039: LD_INT 0
37041: PPUSH
37042: PPUSH
37043: PPUSH
37044: PPUSH
37045: PPUSH
37046: PPUSH
// if not unit or not enemy_unit then
37047: LD_VAR 0 1
37051: NOT
37052: PUSH
37053: LD_VAR 0 2
37057: NOT
37058: OR
37059: IFFALSE 37063
// exit ;
37061: GO 37530
// if GetLives ( i ) < 250 then
37063: LD_VAR 0 4
37067: PPUSH
37068: CALL_OW 256
37072: PUSH
37073: LD_INT 250
37075: LESS
37076: IFFALSE 37089
// begin ComAutodestruct ( i ) ;
37078: LD_VAR 0 4
37082: PPUSH
37083: CALL 36937 0 1
// exit ;
37087: GO 37530
// end ; x := GetX ( enemy_unit ) ;
37089: LD_ADDR_VAR 0 7
37093: PUSH
37094: LD_VAR 0 2
37098: PPUSH
37099: CALL_OW 250
37103: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
37104: LD_ADDR_VAR 0 8
37108: PUSH
37109: LD_VAR 0 2
37113: PPUSH
37114: CALL_OW 251
37118: ST_TO_ADDR
// if not x or not y then
37119: LD_VAR 0 7
37123: NOT
37124: PUSH
37125: LD_VAR 0 8
37129: NOT
37130: OR
37131: IFFALSE 37135
// exit ;
37133: GO 37530
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
37135: LD_ADDR_VAR 0 6
37139: PUSH
37140: LD_VAR 0 7
37144: PPUSH
37145: LD_INT 0
37147: PPUSH
37148: LD_INT 4
37150: PPUSH
37151: CALL_OW 272
37155: PUSH
37156: LD_VAR 0 8
37160: PPUSH
37161: LD_INT 0
37163: PPUSH
37164: LD_INT 4
37166: PPUSH
37167: CALL_OW 273
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_VAR 0 7
37180: PPUSH
37181: LD_INT 1
37183: PPUSH
37184: LD_INT 4
37186: PPUSH
37187: CALL_OW 272
37191: PUSH
37192: LD_VAR 0 8
37196: PPUSH
37197: LD_INT 1
37199: PPUSH
37200: LD_INT 4
37202: PPUSH
37203: CALL_OW 273
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: PUSH
37212: LD_VAR 0 7
37216: PPUSH
37217: LD_INT 2
37219: PPUSH
37220: LD_INT 4
37222: PPUSH
37223: CALL_OW 272
37227: PUSH
37228: LD_VAR 0 8
37232: PPUSH
37233: LD_INT 2
37235: PPUSH
37236: LD_INT 4
37238: PPUSH
37239: CALL_OW 273
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: LD_VAR 0 7
37252: PPUSH
37253: LD_INT 3
37255: PPUSH
37256: LD_INT 4
37258: PPUSH
37259: CALL_OW 272
37263: PUSH
37264: LD_VAR 0 8
37268: PPUSH
37269: LD_INT 3
37271: PPUSH
37272: LD_INT 4
37274: PPUSH
37275: CALL_OW 273
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: PUSH
37284: LD_VAR 0 7
37288: PPUSH
37289: LD_INT 4
37291: PPUSH
37292: LD_INT 4
37294: PPUSH
37295: CALL_OW 272
37299: PUSH
37300: LD_VAR 0 8
37304: PPUSH
37305: LD_INT 4
37307: PPUSH
37308: LD_INT 4
37310: PPUSH
37311: CALL_OW 273
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_VAR 0 7
37324: PPUSH
37325: LD_INT 5
37327: PPUSH
37328: LD_INT 4
37330: PPUSH
37331: CALL_OW 272
37335: PUSH
37336: LD_VAR 0 8
37340: PPUSH
37341: LD_INT 5
37343: PPUSH
37344: LD_INT 4
37346: PPUSH
37347: CALL_OW 273
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: ST_TO_ADDR
// for i = tmp downto 1 do
37364: LD_ADDR_VAR 0 4
37368: PUSH
37369: DOUBLE
37370: LD_VAR 0 6
37374: INC
37375: ST_TO_ADDR
37376: LD_INT 1
37378: PUSH
37379: FOR_DOWNTO
37380: IFFALSE 37481
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
37382: LD_VAR 0 6
37386: PUSH
37387: LD_VAR 0 4
37391: ARRAY
37392: PUSH
37393: LD_INT 1
37395: ARRAY
37396: PPUSH
37397: LD_VAR 0 6
37401: PUSH
37402: LD_VAR 0 4
37406: ARRAY
37407: PUSH
37408: LD_INT 2
37410: ARRAY
37411: PPUSH
37412: CALL_OW 488
37416: NOT
37417: PUSH
37418: LD_VAR 0 6
37422: PUSH
37423: LD_VAR 0 4
37427: ARRAY
37428: PUSH
37429: LD_INT 1
37431: ARRAY
37432: PPUSH
37433: LD_VAR 0 6
37437: PUSH
37438: LD_VAR 0 4
37442: ARRAY
37443: PUSH
37444: LD_INT 2
37446: ARRAY
37447: PPUSH
37448: CALL_OW 428
37452: PUSH
37453: LD_INT 0
37455: NONEQUAL
37456: OR
37457: IFFALSE 37479
// tmp := Delete ( tmp , i ) ;
37459: LD_ADDR_VAR 0 6
37463: PUSH
37464: LD_VAR 0 6
37468: PPUSH
37469: LD_VAR 0 4
37473: PPUSH
37474: CALL_OW 3
37478: ST_TO_ADDR
37479: GO 37379
37481: POP
37482: POP
// j := GetClosestHex ( unit , tmp ) ;
37483: LD_ADDR_VAR 0 5
37487: PUSH
37488: LD_VAR 0 1
37492: PPUSH
37493: LD_VAR 0 6
37497: PPUSH
37498: CALL 36785 0 2
37502: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
37503: LD_VAR 0 1
37507: PPUSH
37508: LD_VAR 0 5
37512: PUSH
37513: LD_INT 1
37515: ARRAY
37516: PPUSH
37517: LD_VAR 0 5
37521: PUSH
37522: LD_INT 2
37524: ARRAY
37525: PPUSH
37526: CALL_OW 111
// end ;
37530: LD_VAR 0 3
37534: RET
// export function PrepareApemanSoldier ( ) ; begin
37535: LD_INT 0
37537: PPUSH
// uc_nation := 0 ;
37538: LD_ADDR_OWVAR 21
37542: PUSH
37543: LD_INT 0
37545: ST_TO_ADDR
// hc_sex := sex_male ;
37546: LD_ADDR_OWVAR 27
37550: PUSH
37551: LD_INT 1
37553: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
37554: LD_ADDR_OWVAR 28
37558: PUSH
37559: LD_INT 15
37561: ST_TO_ADDR
// hc_gallery :=  ;
37562: LD_ADDR_OWVAR 33
37566: PUSH
37567: LD_STRING 
37569: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37570: LD_ADDR_OWVAR 31
37574: PUSH
37575: LD_INT 0
37577: PPUSH
37578: LD_INT 3
37580: PPUSH
37581: CALL_OW 12
37585: PUSH
37586: LD_INT 0
37588: PPUSH
37589: LD_INT 3
37591: PPUSH
37592: CALL_OW 12
37596: PUSH
37597: LD_INT 0
37599: PUSH
37600: LD_INT 0
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: ST_TO_ADDR
// end ;
37609: LD_VAR 0 1
37613: RET
// export function PrepareApemanEngineer ( ) ; begin
37614: LD_INT 0
37616: PPUSH
// uc_nation := 0 ;
37617: LD_ADDR_OWVAR 21
37621: PUSH
37622: LD_INT 0
37624: ST_TO_ADDR
// hc_sex := sex_male ;
37625: LD_ADDR_OWVAR 27
37629: PUSH
37630: LD_INT 1
37632: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
37633: LD_ADDR_OWVAR 28
37637: PUSH
37638: LD_INT 16
37640: ST_TO_ADDR
// hc_gallery :=  ;
37641: LD_ADDR_OWVAR 33
37645: PUSH
37646: LD_STRING 
37648: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37649: LD_ADDR_OWVAR 31
37653: PUSH
37654: LD_INT 0
37656: PPUSH
37657: LD_INT 3
37659: PPUSH
37660: CALL_OW 12
37664: PUSH
37665: LD_INT 0
37667: PPUSH
37668: LD_INT 3
37670: PPUSH
37671: CALL_OW 12
37675: PUSH
37676: LD_INT 0
37678: PUSH
37679: LD_INT 0
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: ST_TO_ADDR
// end ;
37688: LD_VAR 0 1
37692: RET
// export function PrepareApeman ( agressivity ) ; begin
37693: LD_INT 0
37695: PPUSH
// uc_side := 0 ;
37696: LD_ADDR_OWVAR 20
37700: PUSH
37701: LD_INT 0
37703: ST_TO_ADDR
// uc_nation := 0 ;
37704: LD_ADDR_OWVAR 21
37708: PUSH
37709: LD_INT 0
37711: ST_TO_ADDR
// hc_sex := sex_male ;
37712: LD_ADDR_OWVAR 27
37716: PUSH
37717: LD_INT 1
37719: ST_TO_ADDR
// hc_class := class_apeman ;
37720: LD_ADDR_OWVAR 28
37724: PUSH
37725: LD_INT 12
37727: ST_TO_ADDR
// hc_gallery :=  ;
37728: LD_ADDR_OWVAR 33
37732: PUSH
37733: LD_STRING 
37735: ST_TO_ADDR
// if agressivity = 0 then
37736: LD_VAR 0 1
37740: PUSH
37741: LD_INT 0
37743: EQUAL
37744: IFFALSE 37756
// hc_agressivity := 0 else
37746: LD_ADDR_OWVAR 35
37750: PUSH
37751: LD_INT 0
37753: ST_TO_ADDR
37754: GO 37777
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37756: LD_ADDR_OWVAR 35
37760: PUSH
37761: LD_VAR 0 1
37765: NEG
37766: PPUSH
37767: LD_VAR 0 1
37771: PPUSH
37772: CALL_OW 12
37776: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37777: LD_ADDR_OWVAR 31
37781: PUSH
37782: LD_INT 0
37784: PPUSH
37785: LD_INT 3
37787: PPUSH
37788: CALL_OW 12
37792: PUSH
37793: LD_INT 0
37795: PPUSH
37796: LD_INT 3
37798: PPUSH
37799: CALL_OW 12
37803: PUSH
37804: LD_INT 0
37806: PUSH
37807: LD_INT 0
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: LIST
37814: LIST
37815: ST_TO_ADDR
// end ;
37816: LD_VAR 0 2
37820: RET
// export function PrepareTiger ( agressivity ) ; begin
37821: LD_INT 0
37823: PPUSH
// uc_side := 0 ;
37824: LD_ADDR_OWVAR 20
37828: PUSH
37829: LD_INT 0
37831: ST_TO_ADDR
// uc_nation := 0 ;
37832: LD_ADDR_OWVAR 21
37836: PUSH
37837: LD_INT 0
37839: ST_TO_ADDR
// hc_class := class_tiger ;
37840: LD_ADDR_OWVAR 28
37844: PUSH
37845: LD_INT 14
37847: ST_TO_ADDR
// hc_gallery :=  ;
37848: LD_ADDR_OWVAR 33
37852: PUSH
37853: LD_STRING 
37855: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37856: LD_ADDR_OWVAR 35
37860: PUSH
37861: LD_VAR 0 1
37865: NEG
37866: PPUSH
37867: LD_VAR 0 1
37871: PPUSH
37872: CALL_OW 12
37876: ST_TO_ADDR
// end ;
37877: LD_VAR 0 2
37881: RET
// export function PrepareEnchidna ( ) ; begin
37882: LD_INT 0
37884: PPUSH
// uc_side := 0 ;
37885: LD_ADDR_OWVAR 20
37889: PUSH
37890: LD_INT 0
37892: ST_TO_ADDR
// uc_nation := 0 ;
37893: LD_ADDR_OWVAR 21
37897: PUSH
37898: LD_INT 0
37900: ST_TO_ADDR
// hc_class := class_baggie ;
37901: LD_ADDR_OWVAR 28
37905: PUSH
37906: LD_INT 13
37908: ST_TO_ADDR
// hc_gallery :=  ;
37909: LD_ADDR_OWVAR 33
37913: PUSH
37914: LD_STRING 
37916: ST_TO_ADDR
// end ;
37917: LD_VAR 0 1
37921: RET
// export function PrepareFrog ( ) ; begin
37922: LD_INT 0
37924: PPUSH
// uc_side := 0 ;
37925: LD_ADDR_OWVAR 20
37929: PUSH
37930: LD_INT 0
37932: ST_TO_ADDR
// uc_nation := 0 ;
37933: LD_ADDR_OWVAR 21
37937: PUSH
37938: LD_INT 0
37940: ST_TO_ADDR
// hc_class := class_frog ;
37941: LD_ADDR_OWVAR 28
37945: PUSH
37946: LD_INT 19
37948: ST_TO_ADDR
// hc_gallery :=  ;
37949: LD_ADDR_OWVAR 33
37953: PUSH
37954: LD_STRING 
37956: ST_TO_ADDR
// end ;
37957: LD_VAR 0 1
37961: RET
// export function PrepareFish ( ) ; begin
37962: LD_INT 0
37964: PPUSH
// uc_side := 0 ;
37965: LD_ADDR_OWVAR 20
37969: PUSH
37970: LD_INT 0
37972: ST_TO_ADDR
// uc_nation := 0 ;
37973: LD_ADDR_OWVAR 21
37977: PUSH
37978: LD_INT 0
37980: ST_TO_ADDR
// hc_class := class_fish ;
37981: LD_ADDR_OWVAR 28
37985: PUSH
37986: LD_INT 20
37988: ST_TO_ADDR
// hc_gallery :=  ;
37989: LD_ADDR_OWVAR 33
37993: PUSH
37994: LD_STRING 
37996: ST_TO_ADDR
// end ;
37997: LD_VAR 0 1
38001: RET
// export function PrepareBird ( ) ; begin
38002: LD_INT 0
38004: PPUSH
// uc_side := 0 ;
38005: LD_ADDR_OWVAR 20
38009: PUSH
38010: LD_INT 0
38012: ST_TO_ADDR
// uc_nation := 0 ;
38013: LD_ADDR_OWVAR 21
38017: PUSH
38018: LD_INT 0
38020: ST_TO_ADDR
// hc_class := class_phororhacos ;
38021: LD_ADDR_OWVAR 28
38025: PUSH
38026: LD_INT 18
38028: ST_TO_ADDR
// hc_gallery :=  ;
38029: LD_ADDR_OWVAR 33
38033: PUSH
38034: LD_STRING 
38036: ST_TO_ADDR
// end ;
38037: LD_VAR 0 1
38041: RET
// export function PrepareHorse ( ) ; begin
38042: LD_INT 0
38044: PPUSH
// uc_side := 0 ;
38045: LD_ADDR_OWVAR 20
38049: PUSH
38050: LD_INT 0
38052: ST_TO_ADDR
// uc_nation := 0 ;
38053: LD_ADDR_OWVAR 21
38057: PUSH
38058: LD_INT 0
38060: ST_TO_ADDR
// hc_class := class_horse ;
38061: LD_ADDR_OWVAR 28
38065: PUSH
38066: LD_INT 21
38068: ST_TO_ADDR
// hc_gallery :=  ;
38069: LD_ADDR_OWVAR 33
38073: PUSH
38074: LD_STRING 
38076: ST_TO_ADDR
// end ;
38077: LD_VAR 0 1
38081: RET
// export function PrepareMastodont ( ) ; begin
38082: LD_INT 0
38084: PPUSH
// uc_side := 0 ;
38085: LD_ADDR_OWVAR 20
38089: PUSH
38090: LD_INT 0
38092: ST_TO_ADDR
// uc_nation := 0 ;
38093: LD_ADDR_OWVAR 21
38097: PUSH
38098: LD_INT 0
38100: ST_TO_ADDR
// vc_chassis := class_mastodont ;
38101: LD_ADDR_OWVAR 37
38105: PUSH
38106: LD_INT 31
38108: ST_TO_ADDR
// vc_control := control_rider ;
38109: LD_ADDR_OWVAR 38
38113: PUSH
38114: LD_INT 4
38116: ST_TO_ADDR
// end ;
38117: LD_VAR 0 1
38121: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
38122: LD_INT 0
38124: PPUSH
38125: PPUSH
38126: PPUSH
// uc_side = 0 ;
38127: LD_ADDR_OWVAR 20
38131: PUSH
38132: LD_INT 0
38134: ST_TO_ADDR
// uc_nation = 0 ;
38135: LD_ADDR_OWVAR 21
38139: PUSH
38140: LD_INT 0
38142: ST_TO_ADDR
// InitHc_All ( ) ;
38143: CALL_OW 584
// InitVc ;
38147: CALL_OW 20
// if mastodonts then
38151: LD_VAR 0 6
38155: IFFALSE 38222
// for i = 1 to mastodonts do
38157: LD_ADDR_VAR 0 11
38161: PUSH
38162: DOUBLE
38163: LD_INT 1
38165: DEC
38166: ST_TO_ADDR
38167: LD_VAR 0 6
38171: PUSH
38172: FOR_TO
38173: IFFALSE 38220
// begin vc_chassis := 31 ;
38175: LD_ADDR_OWVAR 37
38179: PUSH
38180: LD_INT 31
38182: ST_TO_ADDR
// vc_control := control_rider ;
38183: LD_ADDR_OWVAR 38
38187: PUSH
38188: LD_INT 4
38190: ST_TO_ADDR
// animal := CreateVehicle ;
38191: LD_ADDR_VAR 0 12
38195: PUSH
38196: CALL_OW 45
38200: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38201: LD_VAR 0 12
38205: PPUSH
38206: LD_VAR 0 8
38210: PPUSH
38211: LD_INT 0
38213: PPUSH
38214: CALL 40350 0 3
// end ;
38218: GO 38172
38220: POP
38221: POP
// if horses then
38222: LD_VAR 0 5
38226: IFFALSE 38293
// for i = 1 to horses do
38228: LD_ADDR_VAR 0 11
38232: PUSH
38233: DOUBLE
38234: LD_INT 1
38236: DEC
38237: ST_TO_ADDR
38238: LD_VAR 0 5
38242: PUSH
38243: FOR_TO
38244: IFFALSE 38291
// begin hc_class := 21 ;
38246: LD_ADDR_OWVAR 28
38250: PUSH
38251: LD_INT 21
38253: ST_TO_ADDR
// hc_gallery :=  ;
38254: LD_ADDR_OWVAR 33
38258: PUSH
38259: LD_STRING 
38261: ST_TO_ADDR
// animal := CreateHuman ;
38262: LD_ADDR_VAR 0 12
38266: PUSH
38267: CALL_OW 44
38271: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38272: LD_VAR 0 12
38276: PPUSH
38277: LD_VAR 0 8
38281: PPUSH
38282: LD_INT 0
38284: PPUSH
38285: CALL 40350 0 3
// end ;
38289: GO 38243
38291: POP
38292: POP
// if birds then
38293: LD_VAR 0 1
38297: IFFALSE 38364
// for i = 1 to birds do
38299: LD_ADDR_VAR 0 11
38303: PUSH
38304: DOUBLE
38305: LD_INT 1
38307: DEC
38308: ST_TO_ADDR
38309: LD_VAR 0 1
38313: PUSH
38314: FOR_TO
38315: IFFALSE 38362
// begin hc_class := 18 ;
38317: LD_ADDR_OWVAR 28
38321: PUSH
38322: LD_INT 18
38324: ST_TO_ADDR
// hc_gallery =  ;
38325: LD_ADDR_OWVAR 33
38329: PUSH
38330: LD_STRING 
38332: ST_TO_ADDR
// animal := CreateHuman ;
38333: LD_ADDR_VAR 0 12
38337: PUSH
38338: CALL_OW 44
38342: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38343: LD_VAR 0 12
38347: PPUSH
38348: LD_VAR 0 8
38352: PPUSH
38353: LD_INT 0
38355: PPUSH
38356: CALL 40350 0 3
// end ;
38360: GO 38314
38362: POP
38363: POP
// if tigers then
38364: LD_VAR 0 2
38368: IFFALSE 38452
// for i = 1 to tigers do
38370: LD_ADDR_VAR 0 11
38374: PUSH
38375: DOUBLE
38376: LD_INT 1
38378: DEC
38379: ST_TO_ADDR
38380: LD_VAR 0 2
38384: PUSH
38385: FOR_TO
38386: IFFALSE 38450
// begin hc_class = class_tiger ;
38388: LD_ADDR_OWVAR 28
38392: PUSH
38393: LD_INT 14
38395: ST_TO_ADDR
// hc_gallery =  ;
38396: LD_ADDR_OWVAR 33
38400: PUSH
38401: LD_STRING 
38403: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
38404: LD_ADDR_OWVAR 35
38408: PUSH
38409: LD_INT 7
38411: NEG
38412: PPUSH
38413: LD_INT 7
38415: PPUSH
38416: CALL_OW 12
38420: ST_TO_ADDR
// animal := CreateHuman ;
38421: LD_ADDR_VAR 0 12
38425: PUSH
38426: CALL_OW 44
38430: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38431: LD_VAR 0 12
38435: PPUSH
38436: LD_VAR 0 8
38440: PPUSH
38441: LD_INT 0
38443: PPUSH
38444: CALL 40350 0 3
// end ;
38448: GO 38385
38450: POP
38451: POP
// if apemans then
38452: LD_VAR 0 3
38456: IFFALSE 38579
// for i = 1 to apemans do
38458: LD_ADDR_VAR 0 11
38462: PUSH
38463: DOUBLE
38464: LD_INT 1
38466: DEC
38467: ST_TO_ADDR
38468: LD_VAR 0 3
38472: PUSH
38473: FOR_TO
38474: IFFALSE 38577
// begin hc_class = class_apeman ;
38476: LD_ADDR_OWVAR 28
38480: PUSH
38481: LD_INT 12
38483: ST_TO_ADDR
// hc_gallery =  ;
38484: LD_ADDR_OWVAR 33
38488: PUSH
38489: LD_STRING 
38491: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
38492: LD_ADDR_OWVAR 35
38496: PUSH
38497: LD_INT 2
38499: NEG
38500: PPUSH
38501: LD_INT 2
38503: PPUSH
38504: CALL_OW 12
38508: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38509: LD_ADDR_OWVAR 31
38513: PUSH
38514: LD_INT 1
38516: PPUSH
38517: LD_INT 3
38519: PPUSH
38520: CALL_OW 12
38524: PUSH
38525: LD_INT 1
38527: PPUSH
38528: LD_INT 3
38530: PPUSH
38531: CALL_OW 12
38535: PUSH
38536: LD_INT 0
38538: PUSH
38539: LD_INT 0
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: LIST
38546: LIST
38547: ST_TO_ADDR
// animal := CreateHuman ;
38548: LD_ADDR_VAR 0 12
38552: PUSH
38553: CALL_OW 44
38557: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38558: LD_VAR 0 12
38562: PPUSH
38563: LD_VAR 0 8
38567: PPUSH
38568: LD_INT 0
38570: PPUSH
38571: CALL 40350 0 3
// end ;
38575: GO 38473
38577: POP
38578: POP
// if enchidnas then
38579: LD_VAR 0 4
38583: IFFALSE 38650
// for i = 1 to enchidnas do
38585: LD_ADDR_VAR 0 11
38589: PUSH
38590: DOUBLE
38591: LD_INT 1
38593: DEC
38594: ST_TO_ADDR
38595: LD_VAR 0 4
38599: PUSH
38600: FOR_TO
38601: IFFALSE 38648
// begin hc_class = 13 ;
38603: LD_ADDR_OWVAR 28
38607: PUSH
38608: LD_INT 13
38610: ST_TO_ADDR
// hc_gallery =  ;
38611: LD_ADDR_OWVAR 33
38615: PUSH
38616: LD_STRING 
38618: ST_TO_ADDR
// animal := CreateHuman ;
38619: LD_ADDR_VAR 0 12
38623: PUSH
38624: CALL_OW 44
38628: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38629: LD_VAR 0 12
38633: PPUSH
38634: LD_VAR 0 8
38638: PPUSH
38639: LD_INT 0
38641: PPUSH
38642: CALL 40350 0 3
// end ;
38646: GO 38600
38648: POP
38649: POP
// if fishes then
38650: LD_VAR 0 7
38654: IFFALSE 38721
// for i = 1 to fishes do
38656: LD_ADDR_VAR 0 11
38660: PUSH
38661: DOUBLE
38662: LD_INT 1
38664: DEC
38665: ST_TO_ADDR
38666: LD_VAR 0 7
38670: PUSH
38671: FOR_TO
38672: IFFALSE 38719
// begin hc_class = 20 ;
38674: LD_ADDR_OWVAR 28
38678: PUSH
38679: LD_INT 20
38681: ST_TO_ADDR
// hc_gallery =  ;
38682: LD_ADDR_OWVAR 33
38686: PUSH
38687: LD_STRING 
38689: ST_TO_ADDR
// animal := CreateHuman ;
38690: LD_ADDR_VAR 0 12
38694: PUSH
38695: CALL_OW 44
38699: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
38700: LD_VAR 0 12
38704: PPUSH
38705: LD_VAR 0 9
38709: PPUSH
38710: LD_INT 0
38712: PPUSH
38713: CALL 40350 0 3
// end ;
38717: GO 38671
38719: POP
38720: POP
// end ;
38721: LD_VAR 0 10
38725: RET
// export function WantHeal ( sci , unit ) ; begin
38726: LD_INT 0
38728: PPUSH
// if GetTaskList ( sci ) > 0 then
38729: LD_VAR 0 1
38733: PPUSH
38734: CALL_OW 437
38738: PUSH
38739: LD_INT 0
38741: GREATER
38742: IFFALSE 38812
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38744: LD_VAR 0 1
38748: PPUSH
38749: CALL_OW 437
38753: PUSH
38754: LD_INT 1
38756: ARRAY
38757: PUSH
38758: LD_INT 1
38760: ARRAY
38761: PUSH
38762: LD_STRING l
38764: EQUAL
38765: PUSH
38766: LD_VAR 0 1
38770: PPUSH
38771: CALL_OW 437
38775: PUSH
38776: LD_INT 1
38778: ARRAY
38779: PUSH
38780: LD_INT 4
38782: ARRAY
38783: PUSH
38784: LD_VAR 0 2
38788: EQUAL
38789: AND
38790: IFFALSE 38802
// result := true else
38792: LD_ADDR_VAR 0 3
38796: PUSH
38797: LD_INT 1
38799: ST_TO_ADDR
38800: GO 38810
// result := false ;
38802: LD_ADDR_VAR 0 3
38806: PUSH
38807: LD_INT 0
38809: ST_TO_ADDR
// end else
38810: GO 38820
// result := false ;
38812: LD_ADDR_VAR 0 3
38816: PUSH
38817: LD_INT 0
38819: ST_TO_ADDR
// end ;
38820: LD_VAR 0 3
38824: RET
// export function HealTarget ( sci ) ; begin
38825: LD_INT 0
38827: PPUSH
// if not sci then
38828: LD_VAR 0 1
38832: NOT
38833: IFFALSE 38837
// exit ;
38835: GO 38902
// result := 0 ;
38837: LD_ADDR_VAR 0 2
38841: PUSH
38842: LD_INT 0
38844: ST_TO_ADDR
// if GetTaskList ( sci ) then
38845: LD_VAR 0 1
38849: PPUSH
38850: CALL_OW 437
38854: IFFALSE 38902
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38856: LD_VAR 0 1
38860: PPUSH
38861: CALL_OW 437
38865: PUSH
38866: LD_INT 1
38868: ARRAY
38869: PUSH
38870: LD_INT 1
38872: ARRAY
38873: PUSH
38874: LD_STRING l
38876: EQUAL
38877: IFFALSE 38902
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38879: LD_ADDR_VAR 0 2
38883: PUSH
38884: LD_VAR 0 1
38888: PPUSH
38889: CALL_OW 437
38893: PUSH
38894: LD_INT 1
38896: ARRAY
38897: PUSH
38898: LD_INT 4
38900: ARRAY
38901: ST_TO_ADDR
// end ;
38902: LD_VAR 0 2
38906: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38907: LD_INT 0
38909: PPUSH
38910: PPUSH
38911: PPUSH
38912: PPUSH
// if not base_units then
38913: LD_VAR 0 1
38917: NOT
38918: IFFALSE 38922
// exit ;
38920: GO 39009
// result := false ;
38922: LD_ADDR_VAR 0 2
38926: PUSH
38927: LD_INT 0
38929: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38930: LD_ADDR_VAR 0 5
38934: PUSH
38935: LD_VAR 0 1
38939: PPUSH
38940: LD_INT 21
38942: PUSH
38943: LD_INT 3
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: PPUSH
38950: CALL_OW 72
38954: ST_TO_ADDR
// if not tmp then
38955: LD_VAR 0 5
38959: NOT
38960: IFFALSE 38964
// exit ;
38962: GO 39009
// for i in tmp do
38964: LD_ADDR_VAR 0 3
38968: PUSH
38969: LD_VAR 0 5
38973: PUSH
38974: FOR_IN
38975: IFFALSE 39007
// begin result := EnemyInRange ( i , 22 ) ;
38977: LD_ADDR_VAR 0 2
38981: PUSH
38982: LD_VAR 0 3
38986: PPUSH
38987: LD_INT 22
38989: PPUSH
38990: CALL 36587 0 2
38994: ST_TO_ADDR
// if result then
38995: LD_VAR 0 2
38999: IFFALSE 39005
// exit ;
39001: POP
39002: POP
39003: GO 39009
// end ;
39005: GO 38974
39007: POP
39008: POP
// end ;
39009: LD_VAR 0 2
39013: RET
// export function FilterByTag ( units , tag ) ; begin
39014: LD_INT 0
39016: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
39017: LD_ADDR_VAR 0 3
39021: PUSH
39022: LD_VAR 0 1
39026: PPUSH
39027: LD_INT 120
39029: PUSH
39030: LD_VAR 0 2
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PPUSH
39039: CALL_OW 72
39043: ST_TO_ADDR
// end ;
39044: LD_VAR 0 3
39048: RET
// export function IsDriver ( un ) ; begin
39049: LD_INT 0
39051: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
39052: LD_ADDR_VAR 0 2
39056: PUSH
39057: LD_VAR 0 1
39061: PUSH
39062: LD_INT 55
39064: PUSH
39065: EMPTY
39066: LIST
39067: PPUSH
39068: CALL_OW 69
39072: IN
39073: ST_TO_ADDR
// end ;
39074: LD_VAR 0 2
39078: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
39079: LD_INT 0
39081: PPUSH
39082: PPUSH
// list := [ ] ;
39083: LD_ADDR_VAR 0 5
39087: PUSH
39088: EMPTY
39089: ST_TO_ADDR
// case d of 0 :
39090: LD_VAR 0 3
39094: PUSH
39095: LD_INT 0
39097: DOUBLE
39098: EQUAL
39099: IFTRUE 39103
39101: GO 39236
39103: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
39104: LD_ADDR_VAR 0 5
39108: PUSH
39109: LD_VAR 0 1
39113: PUSH
39114: LD_INT 4
39116: MINUS
39117: PUSH
39118: LD_VAR 0 2
39122: PUSH
39123: LD_INT 4
39125: MINUS
39126: PUSH
39127: LD_INT 2
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: LIST
39134: PUSH
39135: LD_VAR 0 1
39139: PUSH
39140: LD_INT 3
39142: MINUS
39143: PUSH
39144: LD_VAR 0 2
39148: PUSH
39149: LD_INT 1
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: LIST
39156: PUSH
39157: LD_VAR 0 1
39161: PUSH
39162: LD_INT 4
39164: PLUS
39165: PUSH
39166: LD_VAR 0 2
39170: PUSH
39171: LD_INT 4
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: LIST
39178: PUSH
39179: LD_VAR 0 1
39183: PUSH
39184: LD_INT 3
39186: PLUS
39187: PUSH
39188: LD_VAR 0 2
39192: PUSH
39193: LD_INT 3
39195: PLUS
39196: PUSH
39197: LD_INT 5
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: LIST
39204: PUSH
39205: LD_VAR 0 1
39209: PUSH
39210: LD_VAR 0 2
39214: PUSH
39215: LD_INT 4
39217: PLUS
39218: PUSH
39219: LD_INT 0
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: LIST
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: ST_TO_ADDR
// end ; 1 :
39234: GO 39934
39236: LD_INT 1
39238: DOUBLE
39239: EQUAL
39240: IFTRUE 39244
39242: GO 39377
39244: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
39245: LD_ADDR_VAR 0 5
39249: PUSH
39250: LD_VAR 0 1
39254: PUSH
39255: LD_VAR 0 2
39259: PUSH
39260: LD_INT 4
39262: MINUS
39263: PUSH
39264: LD_INT 3
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: LIST
39271: PUSH
39272: LD_VAR 0 1
39276: PUSH
39277: LD_INT 3
39279: MINUS
39280: PUSH
39281: LD_VAR 0 2
39285: PUSH
39286: LD_INT 3
39288: MINUS
39289: PUSH
39290: LD_INT 2
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: LIST
39297: PUSH
39298: LD_VAR 0 1
39302: PUSH
39303: LD_INT 4
39305: MINUS
39306: PUSH
39307: LD_VAR 0 2
39311: PUSH
39312: LD_INT 1
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: LIST
39319: PUSH
39320: LD_VAR 0 1
39324: PUSH
39325: LD_VAR 0 2
39329: PUSH
39330: LD_INT 3
39332: PLUS
39333: PUSH
39334: LD_INT 0
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: LIST
39341: PUSH
39342: LD_VAR 0 1
39346: PUSH
39347: LD_INT 4
39349: PLUS
39350: PUSH
39351: LD_VAR 0 2
39355: PUSH
39356: LD_INT 4
39358: PLUS
39359: PUSH
39360: LD_INT 5
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: LIST
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: ST_TO_ADDR
// end ; 2 :
39375: GO 39934
39377: LD_INT 2
39379: DOUBLE
39380: EQUAL
39381: IFTRUE 39385
39383: GO 39514
39385: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
39386: LD_ADDR_VAR 0 5
39390: PUSH
39391: LD_VAR 0 1
39395: PUSH
39396: LD_VAR 0 2
39400: PUSH
39401: LD_INT 3
39403: MINUS
39404: PUSH
39405: LD_INT 3
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: LIST
39412: PUSH
39413: LD_VAR 0 1
39417: PUSH
39418: LD_INT 4
39420: PLUS
39421: PUSH
39422: LD_VAR 0 2
39426: PUSH
39427: LD_INT 4
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: LIST
39434: PUSH
39435: LD_VAR 0 1
39439: PUSH
39440: LD_VAR 0 2
39444: PUSH
39445: LD_INT 4
39447: PLUS
39448: PUSH
39449: LD_INT 0
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: LIST
39456: PUSH
39457: LD_VAR 0 1
39461: PUSH
39462: LD_INT 3
39464: MINUS
39465: PUSH
39466: LD_VAR 0 2
39470: PUSH
39471: LD_INT 1
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: LIST
39478: PUSH
39479: LD_VAR 0 1
39483: PUSH
39484: LD_INT 4
39486: MINUS
39487: PUSH
39488: LD_VAR 0 2
39492: PUSH
39493: LD_INT 4
39495: MINUS
39496: PUSH
39497: LD_INT 2
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: LIST
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: ST_TO_ADDR
// end ; 3 :
39512: GO 39934
39514: LD_INT 3
39516: DOUBLE
39517: EQUAL
39518: IFTRUE 39522
39520: GO 39655
39522: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39523: LD_ADDR_VAR 0 5
39527: PUSH
39528: LD_VAR 0 1
39532: PUSH
39533: LD_INT 3
39535: PLUS
39536: PUSH
39537: LD_VAR 0 2
39541: PUSH
39542: LD_INT 4
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: LIST
39549: PUSH
39550: LD_VAR 0 1
39554: PUSH
39555: LD_INT 4
39557: PLUS
39558: PUSH
39559: LD_VAR 0 2
39563: PUSH
39564: LD_INT 4
39566: PLUS
39567: PUSH
39568: LD_INT 5
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: LIST
39575: PUSH
39576: LD_VAR 0 1
39580: PUSH
39581: LD_INT 4
39583: MINUS
39584: PUSH
39585: LD_VAR 0 2
39589: PUSH
39590: LD_INT 1
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: LIST
39597: PUSH
39598: LD_VAR 0 1
39602: PUSH
39603: LD_VAR 0 2
39607: PUSH
39608: LD_INT 4
39610: MINUS
39611: PUSH
39612: LD_INT 3
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: LIST
39619: PUSH
39620: LD_VAR 0 1
39624: PUSH
39625: LD_INT 3
39627: MINUS
39628: PUSH
39629: LD_VAR 0 2
39633: PUSH
39634: LD_INT 3
39636: MINUS
39637: PUSH
39638: LD_INT 2
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: LIST
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: ST_TO_ADDR
// end ; 4 :
39653: GO 39934
39655: LD_INT 4
39657: DOUBLE
39658: EQUAL
39659: IFTRUE 39663
39661: GO 39796
39663: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
39664: LD_ADDR_VAR 0 5
39668: PUSH
39669: LD_VAR 0 1
39673: PUSH
39674: LD_VAR 0 2
39678: PUSH
39679: LD_INT 4
39681: PLUS
39682: PUSH
39683: LD_INT 0
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: LIST
39690: PUSH
39691: LD_VAR 0 1
39695: PUSH
39696: LD_INT 3
39698: PLUS
39699: PUSH
39700: LD_VAR 0 2
39704: PUSH
39705: LD_INT 3
39707: PLUS
39708: PUSH
39709: LD_INT 5
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: LIST
39716: PUSH
39717: LD_VAR 0 1
39721: PUSH
39722: LD_INT 4
39724: PLUS
39725: PUSH
39726: LD_VAR 0 2
39730: PUSH
39731: LD_INT 4
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: LIST
39738: PUSH
39739: LD_VAR 0 1
39743: PUSH
39744: LD_VAR 0 2
39748: PUSH
39749: LD_INT 3
39751: MINUS
39752: PUSH
39753: LD_INT 3
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: LIST
39760: PUSH
39761: LD_VAR 0 1
39765: PUSH
39766: LD_INT 4
39768: MINUS
39769: PUSH
39770: LD_VAR 0 2
39774: PUSH
39775: LD_INT 4
39777: MINUS
39778: PUSH
39779: LD_INT 2
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: LIST
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: ST_TO_ADDR
// end ; 5 :
39794: GO 39934
39796: LD_INT 5
39798: DOUBLE
39799: EQUAL
39800: IFTRUE 39804
39802: GO 39933
39804: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39805: LD_ADDR_VAR 0 5
39809: PUSH
39810: LD_VAR 0 1
39814: PUSH
39815: LD_INT 4
39817: MINUS
39818: PUSH
39819: LD_VAR 0 2
39823: PUSH
39824: LD_INT 1
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: LIST
39831: PUSH
39832: LD_VAR 0 1
39836: PUSH
39837: LD_VAR 0 2
39841: PUSH
39842: LD_INT 4
39844: MINUS
39845: PUSH
39846: LD_INT 3
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: LIST
39853: PUSH
39854: LD_VAR 0 1
39858: PUSH
39859: LD_INT 4
39861: PLUS
39862: PUSH
39863: LD_VAR 0 2
39867: PUSH
39868: LD_INT 4
39870: PLUS
39871: PUSH
39872: LD_INT 5
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: LIST
39879: PUSH
39880: LD_VAR 0 1
39884: PUSH
39885: LD_INT 3
39887: PLUS
39888: PUSH
39889: LD_VAR 0 2
39893: PUSH
39894: LD_INT 4
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: LIST
39901: PUSH
39902: LD_VAR 0 1
39906: PUSH
39907: LD_VAR 0 2
39911: PUSH
39912: LD_INT 3
39914: PLUS
39915: PUSH
39916: LD_INT 0
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: LIST
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: LIST
39928: LIST
39929: LIST
39930: ST_TO_ADDR
// end ; end ;
39931: GO 39934
39933: POP
// result := list ;
39934: LD_ADDR_VAR 0 4
39938: PUSH
39939: LD_VAR 0 5
39943: ST_TO_ADDR
// end ;
39944: LD_VAR 0 4
39948: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39949: LD_INT 0
39951: PPUSH
39952: PPUSH
39953: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39954: LD_VAR 0 1
39958: NOT
39959: PUSH
39960: LD_VAR 0 2
39964: PUSH
39965: LD_INT 1
39967: PUSH
39968: LD_INT 2
39970: PUSH
39971: LD_INT 3
39973: PUSH
39974: LD_INT 4
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: IN
39983: NOT
39984: OR
39985: IFFALSE 39989
// exit ;
39987: GO 40072
// tmp := [ ] ;
39989: LD_ADDR_VAR 0 5
39993: PUSH
39994: EMPTY
39995: ST_TO_ADDR
// for i in units do
39996: LD_ADDR_VAR 0 4
40000: PUSH
40001: LD_VAR 0 1
40005: PUSH
40006: FOR_IN
40007: IFFALSE 40041
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
40009: LD_ADDR_VAR 0 5
40013: PUSH
40014: LD_VAR 0 5
40018: PPUSH
40019: LD_VAR 0 4
40023: PPUSH
40024: LD_VAR 0 2
40028: PPUSH
40029: CALL_OW 259
40033: PPUSH
40034: CALL 41445 0 2
40038: ST_TO_ADDR
40039: GO 40006
40041: POP
40042: POP
// if not tmp then
40043: LD_VAR 0 5
40047: NOT
40048: IFFALSE 40052
// exit ;
40050: GO 40072
// result := SortListByListDesc ( units , tmp ) ;
40052: LD_ADDR_VAR 0 3
40056: PUSH
40057: LD_VAR 0 1
40061: PPUSH
40062: LD_VAR 0 5
40066: PPUSH
40067: CALL_OW 77
40071: ST_TO_ADDR
// end ;
40072: LD_VAR 0 3
40076: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
40077: LD_INT 0
40079: PPUSH
40080: PPUSH
40081: PPUSH
// result := false ;
40082: LD_ADDR_VAR 0 3
40086: PUSH
40087: LD_INT 0
40089: ST_TO_ADDR
// if not building then
40090: LD_VAR 0 2
40094: NOT
40095: IFFALSE 40099
// exit ;
40097: GO 40237
// x := GetX ( building ) ;
40099: LD_ADDR_VAR 0 4
40103: PUSH
40104: LD_VAR 0 2
40108: PPUSH
40109: CALL_OW 250
40113: ST_TO_ADDR
// y := GetY ( building ) ;
40114: LD_ADDR_VAR 0 5
40118: PUSH
40119: LD_VAR 0 2
40123: PPUSH
40124: CALL_OW 251
40128: ST_TO_ADDR
// if not x or not y then
40129: LD_VAR 0 4
40133: NOT
40134: PUSH
40135: LD_VAR 0 5
40139: NOT
40140: OR
40141: IFFALSE 40145
// exit ;
40143: GO 40237
// if GetTaskList ( unit ) then
40145: LD_VAR 0 1
40149: PPUSH
40150: CALL_OW 437
40154: IFFALSE 40237
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
40156: LD_STRING e
40158: PUSH
40159: LD_VAR 0 1
40163: PPUSH
40164: CALL_OW 437
40168: PUSH
40169: LD_INT 1
40171: ARRAY
40172: PUSH
40173: LD_INT 1
40175: ARRAY
40176: EQUAL
40177: PUSH
40178: LD_VAR 0 4
40182: PUSH
40183: LD_VAR 0 1
40187: PPUSH
40188: CALL_OW 437
40192: PUSH
40193: LD_INT 1
40195: ARRAY
40196: PUSH
40197: LD_INT 2
40199: ARRAY
40200: EQUAL
40201: AND
40202: PUSH
40203: LD_VAR 0 5
40207: PUSH
40208: LD_VAR 0 1
40212: PPUSH
40213: CALL_OW 437
40217: PUSH
40218: LD_INT 1
40220: ARRAY
40221: PUSH
40222: LD_INT 3
40224: ARRAY
40225: EQUAL
40226: AND
40227: IFFALSE 40237
// result := true end ;
40229: LD_ADDR_VAR 0 3
40233: PUSH
40234: LD_INT 1
40236: ST_TO_ADDR
// end ;
40237: LD_VAR 0 3
40241: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
40242: LD_INT 0
40244: PPUSH
// result := false ;
40245: LD_ADDR_VAR 0 4
40249: PUSH
40250: LD_INT 0
40252: ST_TO_ADDR
// if GetTaskList ( unit ) then
40253: LD_VAR 0 1
40257: PPUSH
40258: CALL_OW 437
40262: IFFALSE 40345
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
40264: LD_STRING M
40266: PUSH
40267: LD_VAR 0 1
40271: PPUSH
40272: CALL_OW 437
40276: PUSH
40277: LD_INT 1
40279: ARRAY
40280: PUSH
40281: LD_INT 1
40283: ARRAY
40284: EQUAL
40285: PUSH
40286: LD_VAR 0 2
40290: PUSH
40291: LD_VAR 0 1
40295: PPUSH
40296: CALL_OW 437
40300: PUSH
40301: LD_INT 1
40303: ARRAY
40304: PUSH
40305: LD_INT 2
40307: ARRAY
40308: EQUAL
40309: AND
40310: PUSH
40311: LD_VAR 0 3
40315: PUSH
40316: LD_VAR 0 1
40320: PPUSH
40321: CALL_OW 437
40325: PUSH
40326: LD_INT 1
40328: ARRAY
40329: PUSH
40330: LD_INT 3
40332: ARRAY
40333: EQUAL
40334: AND
40335: IFFALSE 40345
// result := true ;
40337: LD_ADDR_VAR 0 4
40341: PUSH
40342: LD_INT 1
40344: ST_TO_ADDR
// end ; end ;
40345: LD_VAR 0 4
40349: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
40350: LD_INT 0
40352: PPUSH
40353: PPUSH
40354: PPUSH
40355: PPUSH
// if not unit or not area then
40356: LD_VAR 0 1
40360: NOT
40361: PUSH
40362: LD_VAR 0 2
40366: NOT
40367: OR
40368: IFFALSE 40372
// exit ;
40370: GO 40548
// tmp := AreaToList ( area , i ) ;
40372: LD_ADDR_VAR 0 6
40376: PUSH
40377: LD_VAR 0 2
40381: PPUSH
40382: LD_VAR 0 5
40386: PPUSH
40387: CALL_OW 517
40391: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
40392: LD_ADDR_VAR 0 5
40396: PUSH
40397: DOUBLE
40398: LD_INT 1
40400: DEC
40401: ST_TO_ADDR
40402: LD_VAR 0 6
40406: PUSH
40407: LD_INT 1
40409: ARRAY
40410: PUSH
40411: FOR_TO
40412: IFFALSE 40546
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
40414: LD_ADDR_VAR 0 7
40418: PUSH
40419: LD_VAR 0 6
40423: PUSH
40424: LD_INT 1
40426: ARRAY
40427: PUSH
40428: LD_VAR 0 5
40432: ARRAY
40433: PUSH
40434: LD_VAR 0 6
40438: PUSH
40439: LD_INT 2
40441: ARRAY
40442: PUSH
40443: LD_VAR 0 5
40447: ARRAY
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
40453: LD_INT 92
40455: PUSH
40456: LD_VAR 0 7
40460: PUSH
40461: LD_INT 1
40463: ARRAY
40464: PUSH
40465: LD_VAR 0 7
40469: PUSH
40470: LD_INT 2
40472: ARRAY
40473: PUSH
40474: LD_INT 2
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: PPUSH
40483: CALL_OW 69
40487: PUSH
40488: LD_INT 0
40490: EQUAL
40491: IFFALSE 40544
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
40493: LD_VAR 0 1
40497: PPUSH
40498: LD_VAR 0 7
40502: PUSH
40503: LD_INT 1
40505: ARRAY
40506: PPUSH
40507: LD_VAR 0 7
40511: PUSH
40512: LD_INT 2
40514: ARRAY
40515: PPUSH
40516: LD_VAR 0 3
40520: PPUSH
40521: CALL_OW 48
// result := IsPlaced ( unit ) ;
40525: LD_ADDR_VAR 0 4
40529: PUSH
40530: LD_VAR 0 1
40534: PPUSH
40535: CALL_OW 305
40539: ST_TO_ADDR
// exit ;
40540: POP
40541: POP
40542: GO 40548
// end ; end ;
40544: GO 40411
40546: POP
40547: POP
// end ;
40548: LD_VAR 0 4
40552: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40553: LD_INT 0
40555: PPUSH
40556: PPUSH
40557: PPUSH
// if not side or side > 8 then
40558: LD_VAR 0 1
40562: NOT
40563: PUSH
40564: LD_VAR 0 1
40568: PUSH
40569: LD_INT 8
40571: GREATER
40572: OR
40573: IFFALSE 40577
// exit ;
40575: GO 40764
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40577: LD_ADDR_VAR 0 4
40581: PUSH
40582: LD_INT 22
40584: PUSH
40585: LD_VAR 0 1
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 21
40596: PUSH
40597: LD_INT 3
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PPUSH
40608: CALL_OW 69
40612: ST_TO_ADDR
// if not tmp then
40613: LD_VAR 0 4
40617: NOT
40618: IFFALSE 40622
// exit ;
40620: GO 40764
// enable_addtolog := true ;
40622: LD_ADDR_OWVAR 81
40626: PUSH
40627: LD_INT 1
40629: ST_TO_ADDR
// AddToLog ( [ ) ;
40630: LD_STRING [
40632: PPUSH
40633: CALL_OW 561
// for i in tmp do
40637: LD_ADDR_VAR 0 3
40641: PUSH
40642: LD_VAR 0 4
40646: PUSH
40647: FOR_IN
40648: IFFALSE 40755
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
40650: LD_STRING [
40652: PUSH
40653: LD_VAR 0 3
40657: PPUSH
40658: CALL_OW 266
40662: STR
40663: PUSH
40664: LD_STRING , 
40666: STR
40667: PUSH
40668: LD_VAR 0 3
40672: PPUSH
40673: CALL_OW 250
40677: STR
40678: PUSH
40679: LD_STRING , 
40681: STR
40682: PUSH
40683: LD_VAR 0 3
40687: PPUSH
40688: CALL_OW 251
40692: STR
40693: PUSH
40694: LD_STRING , 
40696: STR
40697: PUSH
40698: LD_VAR 0 3
40702: PPUSH
40703: CALL_OW 254
40707: STR
40708: PUSH
40709: LD_STRING , 
40711: STR
40712: PUSH
40713: LD_VAR 0 3
40717: PPUSH
40718: LD_INT 1
40720: PPUSH
40721: CALL_OW 268
40725: STR
40726: PUSH
40727: LD_STRING , 
40729: STR
40730: PUSH
40731: LD_VAR 0 3
40735: PPUSH
40736: LD_INT 2
40738: PPUSH
40739: CALL_OW 268
40743: STR
40744: PUSH
40745: LD_STRING ],
40747: STR
40748: PPUSH
40749: CALL_OW 561
// end ;
40753: GO 40647
40755: POP
40756: POP
// AddToLog ( ]; ) ;
40757: LD_STRING ];
40759: PPUSH
40760: CALL_OW 561
// end ;
40764: LD_VAR 0 2
40768: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40769: LD_INT 0
40771: PPUSH
40772: PPUSH
40773: PPUSH
40774: PPUSH
40775: PPUSH
// if not area or not rate or not max then
40776: LD_VAR 0 1
40780: NOT
40781: PUSH
40782: LD_VAR 0 2
40786: NOT
40787: OR
40788: PUSH
40789: LD_VAR 0 4
40793: NOT
40794: OR
40795: IFFALSE 40799
// exit ;
40797: GO 40988
// while 1 do
40799: LD_INT 1
40801: IFFALSE 40988
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40803: LD_ADDR_VAR 0 9
40807: PUSH
40808: LD_VAR 0 1
40812: PPUSH
40813: LD_INT 1
40815: PPUSH
40816: CALL_OW 287
40820: PUSH
40821: LD_INT 10
40823: MUL
40824: ST_TO_ADDR
// r := rate / 10 ;
40825: LD_ADDR_VAR 0 7
40829: PUSH
40830: LD_VAR 0 2
40834: PUSH
40835: LD_INT 10
40837: DIVREAL
40838: ST_TO_ADDR
// time := 1 1$00 ;
40839: LD_ADDR_VAR 0 8
40843: PUSH
40844: LD_INT 2100
40846: ST_TO_ADDR
// if amount < min then
40847: LD_VAR 0 9
40851: PUSH
40852: LD_VAR 0 3
40856: LESS
40857: IFFALSE 40875
// r := r * 2 else
40859: LD_ADDR_VAR 0 7
40863: PUSH
40864: LD_VAR 0 7
40868: PUSH
40869: LD_INT 2
40871: MUL
40872: ST_TO_ADDR
40873: GO 40901
// if amount > max then
40875: LD_VAR 0 9
40879: PUSH
40880: LD_VAR 0 4
40884: GREATER
40885: IFFALSE 40901
// r := r / 2 ;
40887: LD_ADDR_VAR 0 7
40891: PUSH
40892: LD_VAR 0 7
40896: PUSH
40897: LD_INT 2
40899: DIVREAL
40900: ST_TO_ADDR
// time := time / r ;
40901: LD_ADDR_VAR 0 8
40905: PUSH
40906: LD_VAR 0 8
40910: PUSH
40911: LD_VAR 0 7
40915: DIVREAL
40916: ST_TO_ADDR
// if time < 0 then
40917: LD_VAR 0 8
40921: PUSH
40922: LD_INT 0
40924: LESS
40925: IFFALSE 40942
// time := time * - 1 ;
40927: LD_ADDR_VAR 0 8
40931: PUSH
40932: LD_VAR 0 8
40936: PUSH
40937: LD_INT 1
40939: NEG
40940: MUL
40941: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40942: LD_VAR 0 8
40946: PUSH
40947: LD_INT 35
40949: PPUSH
40950: LD_INT 875
40952: PPUSH
40953: CALL_OW 12
40957: PLUS
40958: PPUSH
40959: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40963: LD_INT 1
40965: PPUSH
40966: LD_INT 5
40968: PPUSH
40969: CALL_OW 12
40973: PPUSH
40974: LD_VAR 0 1
40978: PPUSH
40979: LD_INT 1
40981: PPUSH
40982: CALL_OW 55
// end ;
40986: GO 40799
// end ;
40988: LD_VAR 0 5
40992: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40993: LD_INT 0
40995: PPUSH
40996: PPUSH
40997: PPUSH
40998: PPUSH
40999: PPUSH
41000: PPUSH
41001: PPUSH
41002: PPUSH
// if not turrets or not factories then
41003: LD_VAR 0 1
41007: NOT
41008: PUSH
41009: LD_VAR 0 2
41013: NOT
41014: OR
41015: IFFALSE 41019
// exit ;
41017: GO 41326
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
41019: LD_ADDR_VAR 0 10
41023: PUSH
41024: LD_INT 5
41026: PUSH
41027: LD_INT 6
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 2
41036: PUSH
41037: LD_INT 4
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 3
41046: PUSH
41047: LD_INT 5
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 24
41061: PUSH
41062: LD_INT 25
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 23
41071: PUSH
41072: LD_INT 27
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 42
41085: PUSH
41086: LD_INT 43
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 44
41095: PUSH
41096: LD_INT 46
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 45
41105: PUSH
41106: LD_INT 47
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: LIST
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: LIST
41122: ST_TO_ADDR
// result := [ ] ;
41123: LD_ADDR_VAR 0 3
41127: PUSH
41128: EMPTY
41129: ST_TO_ADDR
// for i in turrets do
41130: LD_ADDR_VAR 0 4
41134: PUSH
41135: LD_VAR 0 1
41139: PUSH
41140: FOR_IN
41141: IFFALSE 41324
// begin nat := GetNation ( i ) ;
41143: LD_ADDR_VAR 0 7
41147: PUSH
41148: LD_VAR 0 4
41152: PPUSH
41153: CALL_OW 248
41157: ST_TO_ADDR
// weapon := 0 ;
41158: LD_ADDR_VAR 0 8
41162: PUSH
41163: LD_INT 0
41165: ST_TO_ADDR
// if not nat then
41166: LD_VAR 0 7
41170: NOT
41171: IFFALSE 41175
// continue ;
41173: GO 41140
// for j in list [ nat ] do
41175: LD_ADDR_VAR 0 5
41179: PUSH
41180: LD_VAR 0 10
41184: PUSH
41185: LD_VAR 0 7
41189: ARRAY
41190: PUSH
41191: FOR_IN
41192: IFFALSE 41233
// if GetBWeapon ( i ) = j [ 1 ] then
41194: LD_VAR 0 4
41198: PPUSH
41199: CALL_OW 269
41203: PUSH
41204: LD_VAR 0 5
41208: PUSH
41209: LD_INT 1
41211: ARRAY
41212: EQUAL
41213: IFFALSE 41231
// begin weapon := j [ 2 ] ;
41215: LD_ADDR_VAR 0 8
41219: PUSH
41220: LD_VAR 0 5
41224: PUSH
41225: LD_INT 2
41227: ARRAY
41228: ST_TO_ADDR
// break ;
41229: GO 41233
// end ;
41231: GO 41191
41233: POP
41234: POP
// if not weapon then
41235: LD_VAR 0 8
41239: NOT
41240: IFFALSE 41244
// continue ;
41242: GO 41140
// for k in factories do
41244: LD_ADDR_VAR 0 6
41248: PUSH
41249: LD_VAR 0 2
41253: PUSH
41254: FOR_IN
41255: IFFALSE 41320
// begin weapons := AvailableWeaponList ( k ) ;
41257: LD_ADDR_VAR 0 9
41261: PUSH
41262: LD_VAR 0 6
41266: PPUSH
41267: CALL_OW 478
41271: ST_TO_ADDR
// if not weapons then
41272: LD_VAR 0 9
41276: NOT
41277: IFFALSE 41281
// continue ;
41279: GO 41254
// if weapon in weapons then
41281: LD_VAR 0 8
41285: PUSH
41286: LD_VAR 0 9
41290: IN
41291: IFFALSE 41318
// begin result := [ i , weapon ] ;
41293: LD_ADDR_VAR 0 3
41297: PUSH
41298: LD_VAR 0 4
41302: PUSH
41303: LD_VAR 0 8
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: ST_TO_ADDR
// exit ;
41312: POP
41313: POP
41314: POP
41315: POP
41316: GO 41326
// end ; end ;
41318: GO 41254
41320: POP
41321: POP
// end ;
41322: GO 41140
41324: POP
41325: POP
// end ;
41326: LD_VAR 0 3
41330: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
41331: LD_INT 0
41333: PPUSH
// if not side or side > 8 then
41334: LD_VAR 0 3
41338: NOT
41339: PUSH
41340: LD_VAR 0 3
41344: PUSH
41345: LD_INT 8
41347: GREATER
41348: OR
41349: IFFALSE 41353
// exit ;
41351: GO 41412
// if not range then
41353: LD_VAR 0 4
41357: NOT
41358: IFFALSE 41369
// range := - 12 ;
41360: LD_ADDR_VAR 0 4
41364: PUSH
41365: LD_INT 12
41367: NEG
41368: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
41369: LD_VAR 0 1
41373: PPUSH
41374: LD_VAR 0 2
41378: PPUSH
41379: LD_VAR 0 3
41383: PPUSH
41384: LD_VAR 0 4
41388: PPUSH
41389: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
41393: LD_VAR 0 1
41397: PPUSH
41398: LD_VAR 0 2
41402: PPUSH
41403: LD_VAR 0 3
41407: PPUSH
41408: CALL_OW 331
// end ;
41412: LD_VAR 0 5
41416: RET
// export function Video ( mode ) ; begin
41417: LD_INT 0
41419: PPUSH
// ingame_video = mode ;
41420: LD_ADDR_OWVAR 52
41424: PUSH
41425: LD_VAR 0 1
41429: ST_TO_ADDR
// interface_hidden = mode ;
41430: LD_ADDR_OWVAR 54
41434: PUSH
41435: LD_VAR 0 1
41439: ST_TO_ADDR
// end ;
41440: LD_VAR 0 2
41444: RET
// export function Join ( array , element ) ; begin
41445: LD_INT 0
41447: PPUSH
// result := Replace ( array , array + 1 , element ) ;
41448: LD_ADDR_VAR 0 3
41452: PUSH
41453: LD_VAR 0 1
41457: PPUSH
41458: LD_VAR 0 1
41462: PUSH
41463: LD_INT 1
41465: PLUS
41466: PPUSH
41467: LD_VAR 0 2
41471: PPUSH
41472: CALL_OW 1
41476: ST_TO_ADDR
// end ;
41477: LD_VAR 0 3
41481: RET
// export function JoinUnion ( array , element ) ; begin
41482: LD_INT 0
41484: PPUSH
// result := array union element ;
41485: LD_ADDR_VAR 0 3
41489: PUSH
41490: LD_VAR 0 1
41494: PUSH
41495: LD_VAR 0 2
41499: UNION
41500: ST_TO_ADDR
// end ;
41501: LD_VAR 0 3
41505: RET
// export function GetBehemoths ( side ) ; begin
41506: LD_INT 0
41508: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
41509: LD_ADDR_VAR 0 2
41513: PUSH
41514: LD_INT 22
41516: PUSH
41517: LD_VAR 0 1
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 31
41528: PUSH
41529: LD_INT 25
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PPUSH
41540: CALL_OW 69
41544: ST_TO_ADDR
// end ;
41545: LD_VAR 0 2
41549: RET
// export function Shuffle ( array ) ; var i , index ; begin
41550: LD_INT 0
41552: PPUSH
41553: PPUSH
41554: PPUSH
// result := [ ] ;
41555: LD_ADDR_VAR 0 2
41559: PUSH
41560: EMPTY
41561: ST_TO_ADDR
// if not array then
41562: LD_VAR 0 1
41566: NOT
41567: IFFALSE 41571
// exit ;
41569: GO 41670
// Randomize ;
41571: CALL_OW 10
// for i = array downto 1 do
41575: LD_ADDR_VAR 0 3
41579: PUSH
41580: DOUBLE
41581: LD_VAR 0 1
41585: INC
41586: ST_TO_ADDR
41587: LD_INT 1
41589: PUSH
41590: FOR_DOWNTO
41591: IFFALSE 41668
// begin index := rand ( 1 , array ) ;
41593: LD_ADDR_VAR 0 4
41597: PUSH
41598: LD_INT 1
41600: PPUSH
41601: LD_VAR 0 1
41605: PPUSH
41606: CALL_OW 12
41610: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41611: LD_ADDR_VAR 0 2
41615: PUSH
41616: LD_VAR 0 2
41620: PPUSH
41621: LD_VAR 0 2
41625: PUSH
41626: LD_INT 1
41628: PLUS
41629: PPUSH
41630: LD_VAR 0 1
41634: PUSH
41635: LD_VAR 0 4
41639: ARRAY
41640: PPUSH
41641: CALL_OW 2
41645: ST_TO_ADDR
// array := Delete ( array , index ) ;
41646: LD_ADDR_VAR 0 1
41650: PUSH
41651: LD_VAR 0 1
41655: PPUSH
41656: LD_VAR 0 4
41660: PPUSH
41661: CALL_OW 3
41665: ST_TO_ADDR
// end ;
41666: GO 41590
41668: POP
41669: POP
// end ;
41670: LD_VAR 0 2
41674: RET
// export function GetBaseMaterials ( base ) ; begin
41675: LD_INT 0
41677: PPUSH
// result := [ 0 , 0 , 0 ] ;
41678: LD_ADDR_VAR 0 2
41682: PUSH
41683: LD_INT 0
41685: PUSH
41686: LD_INT 0
41688: PUSH
41689: LD_INT 0
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: LIST
41696: ST_TO_ADDR
// if not base then
41697: LD_VAR 0 1
41701: NOT
41702: IFFALSE 41706
// exit ;
41704: GO 41755
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
41706: LD_ADDR_VAR 0 2
41710: PUSH
41711: LD_VAR 0 1
41715: PPUSH
41716: LD_INT 1
41718: PPUSH
41719: CALL_OW 275
41723: PUSH
41724: LD_VAR 0 1
41728: PPUSH
41729: LD_INT 2
41731: PPUSH
41732: CALL_OW 275
41736: PUSH
41737: LD_VAR 0 1
41741: PPUSH
41742: LD_INT 3
41744: PPUSH
41745: CALL_OW 275
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: LIST
41754: ST_TO_ADDR
// end ;
41755: LD_VAR 0 2
41759: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41760: LD_INT 0
41762: PPUSH
41763: PPUSH
// result := array ;
41764: LD_ADDR_VAR 0 3
41768: PUSH
41769: LD_VAR 0 1
41773: ST_TO_ADDR
// if size >= result then
41774: LD_VAR 0 2
41778: PUSH
41779: LD_VAR 0 3
41783: GREATEREQUAL
41784: IFFALSE 41788
// exit ;
41786: GO 41838
// if size then
41788: LD_VAR 0 2
41792: IFFALSE 41838
// for i := array downto size do
41794: LD_ADDR_VAR 0 4
41798: PUSH
41799: DOUBLE
41800: LD_VAR 0 1
41804: INC
41805: ST_TO_ADDR
41806: LD_VAR 0 2
41810: PUSH
41811: FOR_DOWNTO
41812: IFFALSE 41836
// result := Delete ( result , result ) ;
41814: LD_ADDR_VAR 0 3
41818: PUSH
41819: LD_VAR 0 3
41823: PPUSH
41824: LD_VAR 0 3
41828: PPUSH
41829: CALL_OW 3
41833: ST_TO_ADDR
41834: GO 41811
41836: POP
41837: POP
// end ;
41838: LD_VAR 0 3
41842: RET
// export function ComExit ( unit ) ; var tmp ; begin
41843: LD_INT 0
41845: PPUSH
41846: PPUSH
// if not IsInUnit ( unit ) then
41847: LD_VAR 0 1
41851: PPUSH
41852: CALL_OW 310
41856: NOT
41857: IFFALSE 41861
// exit ;
41859: GO 41921
// tmp := IsInUnit ( unit ) ;
41861: LD_ADDR_VAR 0 3
41865: PUSH
41866: LD_VAR 0 1
41870: PPUSH
41871: CALL_OW 310
41875: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41876: LD_VAR 0 3
41880: PPUSH
41881: CALL_OW 247
41885: PUSH
41886: LD_INT 2
41888: EQUAL
41889: IFFALSE 41902
// ComExitVehicle ( unit ) else
41891: LD_VAR 0 1
41895: PPUSH
41896: CALL_OW 121
41900: GO 41911
// ComExitBuilding ( unit ) ;
41902: LD_VAR 0 1
41906: PPUSH
41907: CALL_OW 122
// result := tmp ;
41911: LD_ADDR_VAR 0 2
41915: PUSH
41916: LD_VAR 0 3
41920: ST_TO_ADDR
// end ;
41921: LD_VAR 0 2
41925: RET
// export function ComExitAll ( units ) ; var i ; begin
41926: LD_INT 0
41928: PPUSH
41929: PPUSH
// if not units then
41930: LD_VAR 0 1
41934: NOT
41935: IFFALSE 41939
// exit ;
41937: GO 41965
// for i in units do
41939: LD_ADDR_VAR 0 3
41943: PUSH
41944: LD_VAR 0 1
41948: PUSH
41949: FOR_IN
41950: IFFALSE 41963
// ComExit ( i ) ;
41952: LD_VAR 0 3
41956: PPUSH
41957: CALL 41843 0 1
41961: GO 41949
41963: POP
41964: POP
// end ;
41965: LD_VAR 0 2
41969: RET
// export function ResetHc ; begin
41970: LD_INT 0
41972: PPUSH
// InitHc ;
41973: CALL_OW 19
// hc_importance := 0 ;
41977: LD_ADDR_OWVAR 32
41981: PUSH
41982: LD_INT 0
41984: ST_TO_ADDR
// end ;
41985: LD_VAR 0 1
41989: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41990: LD_INT 0
41992: PPUSH
41993: PPUSH
41994: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41995: LD_ADDR_VAR 0 6
41999: PUSH
42000: LD_VAR 0 1
42004: PUSH
42005: LD_VAR 0 3
42009: PLUS
42010: PUSH
42011: LD_INT 2
42013: DIV
42014: ST_TO_ADDR
// if _x < 0 then
42015: LD_VAR 0 6
42019: PUSH
42020: LD_INT 0
42022: LESS
42023: IFFALSE 42040
// _x := _x * - 1 ;
42025: LD_ADDR_VAR 0 6
42029: PUSH
42030: LD_VAR 0 6
42034: PUSH
42035: LD_INT 1
42037: NEG
42038: MUL
42039: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
42040: LD_ADDR_VAR 0 7
42044: PUSH
42045: LD_VAR 0 2
42049: PUSH
42050: LD_VAR 0 4
42054: PLUS
42055: PUSH
42056: LD_INT 2
42058: DIV
42059: ST_TO_ADDR
// if _y < 0 then
42060: LD_VAR 0 7
42064: PUSH
42065: LD_INT 0
42067: LESS
42068: IFFALSE 42085
// _y := _y * - 1 ;
42070: LD_ADDR_VAR 0 7
42074: PUSH
42075: LD_VAR 0 7
42079: PUSH
42080: LD_INT 1
42082: NEG
42083: MUL
42084: ST_TO_ADDR
// result := [ _x , _y ] ;
42085: LD_ADDR_VAR 0 5
42089: PUSH
42090: LD_VAR 0 6
42094: PUSH
42095: LD_VAR 0 7
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: ST_TO_ADDR
// end ;
42104: LD_VAR 0 5
42108: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
42109: LD_INT 0
42111: PPUSH
42112: PPUSH
42113: PPUSH
42114: PPUSH
// task := GetTaskList ( unit ) ;
42115: LD_ADDR_VAR 0 7
42119: PUSH
42120: LD_VAR 0 1
42124: PPUSH
42125: CALL_OW 437
42129: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
42130: LD_VAR 0 7
42134: NOT
42135: PUSH
42136: LD_VAR 0 1
42140: PPUSH
42141: LD_VAR 0 2
42145: PPUSH
42146: CALL_OW 308
42150: NOT
42151: AND
42152: IFFALSE 42156
// exit ;
42154: GO 42274
// if IsInArea ( unit , area ) then
42156: LD_VAR 0 1
42160: PPUSH
42161: LD_VAR 0 2
42165: PPUSH
42166: CALL_OW 308
42170: IFFALSE 42188
// begin ComMoveToArea ( unit , goAway ) ;
42172: LD_VAR 0 1
42176: PPUSH
42177: LD_VAR 0 3
42181: PPUSH
42182: CALL_OW 113
// exit ;
42186: GO 42274
// end ; if task [ 1 ] [ 1 ] <> M then
42188: LD_VAR 0 7
42192: PUSH
42193: LD_INT 1
42195: ARRAY
42196: PUSH
42197: LD_INT 1
42199: ARRAY
42200: PUSH
42201: LD_STRING M
42203: NONEQUAL
42204: IFFALSE 42208
// exit ;
42206: GO 42274
// x := task [ 1 ] [ 2 ] ;
42208: LD_ADDR_VAR 0 5
42212: PUSH
42213: LD_VAR 0 7
42217: PUSH
42218: LD_INT 1
42220: ARRAY
42221: PUSH
42222: LD_INT 2
42224: ARRAY
42225: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
42226: LD_ADDR_VAR 0 6
42230: PUSH
42231: LD_VAR 0 7
42235: PUSH
42236: LD_INT 1
42238: ARRAY
42239: PUSH
42240: LD_INT 3
42242: ARRAY
42243: ST_TO_ADDR
// if InArea ( x , y , area ) then
42244: LD_VAR 0 5
42248: PPUSH
42249: LD_VAR 0 6
42253: PPUSH
42254: LD_VAR 0 2
42258: PPUSH
42259: CALL_OW 309
42263: IFFALSE 42274
// ComStop ( unit ) ;
42265: LD_VAR 0 1
42269: PPUSH
42270: CALL_OW 141
// end ;
42274: LD_VAR 0 4
42278: RET
// export function Abs ( value ) ; begin
42279: LD_INT 0
42281: PPUSH
// result := value ;
42282: LD_ADDR_VAR 0 2
42286: PUSH
42287: LD_VAR 0 1
42291: ST_TO_ADDR
// if value < 0 then
42292: LD_VAR 0 1
42296: PUSH
42297: LD_INT 0
42299: LESS
42300: IFFALSE 42317
// result := value * - 1 ;
42302: LD_ADDR_VAR 0 2
42306: PUSH
42307: LD_VAR 0 1
42311: PUSH
42312: LD_INT 1
42314: NEG
42315: MUL
42316: ST_TO_ADDR
// end ;
42317: LD_VAR 0 2
42321: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
42322: LD_INT 0
42324: PPUSH
42325: PPUSH
42326: PPUSH
42327: PPUSH
42328: PPUSH
42329: PPUSH
42330: PPUSH
42331: PPUSH
// if not unit or not building then
42332: LD_VAR 0 1
42336: NOT
42337: PUSH
42338: LD_VAR 0 2
42342: NOT
42343: OR
42344: IFFALSE 42348
// exit ;
42346: GO 42574
// x := GetX ( building ) ;
42348: LD_ADDR_VAR 0 4
42352: PUSH
42353: LD_VAR 0 2
42357: PPUSH
42358: CALL_OW 250
42362: ST_TO_ADDR
// y := GetY ( building ) ;
42363: LD_ADDR_VAR 0 6
42367: PUSH
42368: LD_VAR 0 2
42372: PPUSH
42373: CALL_OW 251
42377: ST_TO_ADDR
// d := GetDir ( building ) ;
42378: LD_ADDR_VAR 0 8
42382: PUSH
42383: LD_VAR 0 2
42387: PPUSH
42388: CALL_OW 254
42392: ST_TO_ADDR
// r := 4 ;
42393: LD_ADDR_VAR 0 9
42397: PUSH
42398: LD_INT 4
42400: ST_TO_ADDR
// for i := 1 to 5 do
42401: LD_ADDR_VAR 0 10
42405: PUSH
42406: DOUBLE
42407: LD_INT 1
42409: DEC
42410: ST_TO_ADDR
42411: LD_INT 5
42413: PUSH
42414: FOR_TO
42415: IFFALSE 42572
// begin _x := ShiftX ( x , d , r + i ) ;
42417: LD_ADDR_VAR 0 5
42421: PUSH
42422: LD_VAR 0 4
42426: PPUSH
42427: LD_VAR 0 8
42431: PPUSH
42432: LD_VAR 0 9
42436: PUSH
42437: LD_VAR 0 10
42441: PLUS
42442: PPUSH
42443: CALL_OW 272
42447: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
42448: LD_ADDR_VAR 0 7
42452: PUSH
42453: LD_VAR 0 6
42457: PPUSH
42458: LD_VAR 0 8
42462: PPUSH
42463: LD_VAR 0 9
42467: PUSH
42468: LD_VAR 0 10
42472: PLUS
42473: PPUSH
42474: CALL_OW 273
42478: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
42479: LD_VAR 0 5
42483: PPUSH
42484: LD_VAR 0 7
42488: PPUSH
42489: CALL_OW 488
42493: PUSH
42494: LD_VAR 0 5
42498: PPUSH
42499: LD_VAR 0 7
42503: PPUSH
42504: CALL_OW 428
42508: PPUSH
42509: CALL_OW 247
42513: PUSH
42514: LD_INT 3
42516: PUSH
42517: LD_INT 2
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: IN
42524: NOT
42525: AND
42526: IFFALSE 42570
// begin ComMoveXY ( unit , _x , _y ) ;
42528: LD_VAR 0 1
42532: PPUSH
42533: LD_VAR 0 5
42537: PPUSH
42538: LD_VAR 0 7
42542: PPUSH
42543: CALL_OW 111
// result := [ _x , _y ] ;
42547: LD_ADDR_VAR 0 3
42551: PUSH
42552: LD_VAR 0 5
42556: PUSH
42557: LD_VAR 0 7
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: ST_TO_ADDR
// exit ;
42566: POP
42567: POP
42568: GO 42574
// end ; end ;
42570: GO 42414
42572: POP
42573: POP
// end ;
42574: LD_VAR 0 3
42578: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42579: LD_INT 0
42581: PPUSH
42582: PPUSH
42583: PPUSH
// result := 0 ;
42584: LD_ADDR_VAR 0 3
42588: PUSH
42589: LD_INT 0
42591: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42592: LD_VAR 0 1
42596: PUSH
42597: LD_INT 0
42599: LESS
42600: PUSH
42601: LD_VAR 0 1
42605: PUSH
42606: LD_INT 8
42608: GREATER
42609: OR
42610: PUSH
42611: LD_VAR 0 2
42615: PUSH
42616: LD_INT 0
42618: LESS
42619: OR
42620: PUSH
42621: LD_VAR 0 2
42625: PUSH
42626: LD_INT 8
42628: GREATER
42629: OR
42630: IFFALSE 42634
// exit ;
42632: GO 42709
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
42634: LD_ADDR_VAR 0 4
42638: PUSH
42639: LD_INT 22
42641: PUSH
42642: LD_VAR 0 2
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PPUSH
42651: CALL_OW 69
42655: PUSH
42656: FOR_IN
42657: IFFALSE 42707
// begin un := UnitShoot ( i ) ;
42659: LD_ADDR_VAR 0 5
42663: PUSH
42664: LD_VAR 0 4
42668: PPUSH
42669: CALL_OW 504
42673: ST_TO_ADDR
// if GetSide ( un ) = side1 then
42674: LD_VAR 0 5
42678: PPUSH
42679: CALL_OW 255
42683: PUSH
42684: LD_VAR 0 1
42688: EQUAL
42689: IFFALSE 42705
// begin result := un ;
42691: LD_ADDR_VAR 0 3
42695: PUSH
42696: LD_VAR 0 5
42700: ST_TO_ADDR
// exit ;
42701: POP
42702: POP
42703: GO 42709
// end ; end ;
42705: GO 42656
42707: POP
42708: POP
// end ;
42709: LD_VAR 0 3
42713: RET
// export function GetCargoBay ( units ) ; begin
42714: LD_INT 0
42716: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42717: LD_ADDR_VAR 0 2
42721: PUSH
42722: LD_VAR 0 1
42726: PPUSH
42727: LD_INT 2
42729: PUSH
42730: LD_INT 34
42732: PUSH
42733: LD_INT 12
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 34
42742: PUSH
42743: LD_INT 51
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 34
42752: PUSH
42753: LD_INT 32
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 34
42762: PUSH
42763: LD_INT 89
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: PPUSH
42777: CALL_OW 72
42781: ST_TO_ADDR
// end ;
42782: LD_VAR 0 2
42786: RET
// export function Negate ( value ) ; begin
42787: LD_INT 0
42789: PPUSH
// result := not value ;
42790: LD_ADDR_VAR 0 2
42794: PUSH
42795: LD_VAR 0 1
42799: NOT
42800: ST_TO_ADDR
// end ;
42801: LD_VAR 0 2
42805: RET
// export function Inc ( value ) ; begin
42806: LD_INT 0
42808: PPUSH
// result := value + 1 ;
42809: LD_ADDR_VAR 0 2
42813: PUSH
42814: LD_VAR 0 1
42818: PUSH
42819: LD_INT 1
42821: PLUS
42822: ST_TO_ADDR
// end ;
42823: LD_VAR 0 2
42827: RET
// export function Dec ( value ) ; begin
42828: LD_INT 0
42830: PPUSH
// result := value - 1 ;
42831: LD_ADDR_VAR 0 2
42835: PUSH
42836: LD_VAR 0 1
42840: PUSH
42841: LD_INT 1
42843: MINUS
42844: ST_TO_ADDR
// end ;
42845: LD_VAR 0 2
42849: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42850: LD_INT 0
42852: PPUSH
42853: PPUSH
42854: PPUSH
42855: PPUSH
42856: PPUSH
42857: PPUSH
42858: PPUSH
42859: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42860: LD_VAR 0 1
42864: PPUSH
42865: LD_VAR 0 2
42869: PPUSH
42870: CALL_OW 488
42874: NOT
42875: PUSH
42876: LD_VAR 0 3
42880: PPUSH
42881: LD_VAR 0 4
42885: PPUSH
42886: CALL_OW 488
42890: NOT
42891: OR
42892: IFFALSE 42905
// begin result := - 1 ;
42894: LD_ADDR_VAR 0 5
42898: PUSH
42899: LD_INT 1
42901: NEG
42902: ST_TO_ADDR
// exit ;
42903: GO 43140
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42905: LD_ADDR_VAR 0 12
42909: PUSH
42910: LD_VAR 0 1
42914: PPUSH
42915: LD_VAR 0 2
42919: PPUSH
42920: LD_VAR 0 3
42924: PPUSH
42925: LD_VAR 0 4
42929: PPUSH
42930: CALL 41990 0 4
42934: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42935: LD_ADDR_VAR 0 11
42939: PUSH
42940: LD_VAR 0 1
42944: PPUSH
42945: LD_VAR 0 2
42949: PPUSH
42950: LD_VAR 0 12
42954: PUSH
42955: LD_INT 1
42957: ARRAY
42958: PPUSH
42959: LD_VAR 0 12
42963: PUSH
42964: LD_INT 2
42966: ARRAY
42967: PPUSH
42968: CALL_OW 298
42972: ST_TO_ADDR
// distance := 9999 ;
42973: LD_ADDR_VAR 0 10
42977: PUSH
42978: LD_INT 9999
42980: ST_TO_ADDR
// for i := 0 to 5 do
42981: LD_ADDR_VAR 0 6
42985: PUSH
42986: DOUBLE
42987: LD_INT 0
42989: DEC
42990: ST_TO_ADDR
42991: LD_INT 5
42993: PUSH
42994: FOR_TO
42995: IFFALSE 43138
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42997: LD_ADDR_VAR 0 7
43001: PUSH
43002: LD_VAR 0 1
43006: PPUSH
43007: LD_VAR 0 6
43011: PPUSH
43012: LD_VAR 0 11
43016: PPUSH
43017: CALL_OW 272
43021: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
43022: LD_ADDR_VAR 0 8
43026: PUSH
43027: LD_VAR 0 2
43031: PPUSH
43032: LD_VAR 0 6
43036: PPUSH
43037: LD_VAR 0 11
43041: PPUSH
43042: CALL_OW 273
43046: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43047: LD_VAR 0 7
43051: PPUSH
43052: LD_VAR 0 8
43056: PPUSH
43057: CALL_OW 488
43061: NOT
43062: IFFALSE 43066
// continue ;
43064: GO 42994
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
43066: LD_ADDR_VAR 0 9
43070: PUSH
43071: LD_VAR 0 12
43075: PUSH
43076: LD_INT 1
43078: ARRAY
43079: PPUSH
43080: LD_VAR 0 12
43084: PUSH
43085: LD_INT 2
43087: ARRAY
43088: PPUSH
43089: LD_VAR 0 7
43093: PPUSH
43094: LD_VAR 0 8
43098: PPUSH
43099: CALL_OW 298
43103: ST_TO_ADDR
// if tmp < distance then
43104: LD_VAR 0 9
43108: PUSH
43109: LD_VAR 0 10
43113: LESS
43114: IFFALSE 43136
// begin result := i ;
43116: LD_ADDR_VAR 0 5
43120: PUSH
43121: LD_VAR 0 6
43125: ST_TO_ADDR
// distance := tmp ;
43126: LD_ADDR_VAR 0 10
43130: PUSH
43131: LD_VAR 0 9
43135: ST_TO_ADDR
// end ; end ;
43136: GO 42994
43138: POP
43139: POP
// end ;
43140: LD_VAR 0 5
43144: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
43145: LD_INT 0
43147: PPUSH
43148: PPUSH
// if not driver or not IsInUnit ( driver ) then
43149: LD_VAR 0 1
43153: NOT
43154: PUSH
43155: LD_VAR 0 1
43159: PPUSH
43160: CALL_OW 310
43164: NOT
43165: OR
43166: IFFALSE 43170
// exit ;
43168: GO 43260
// vehicle := IsInUnit ( driver ) ;
43170: LD_ADDR_VAR 0 3
43174: PUSH
43175: LD_VAR 0 1
43179: PPUSH
43180: CALL_OW 310
43184: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
43185: LD_VAR 0 1
43189: PPUSH
43190: LD_STRING \
43192: PUSH
43193: LD_INT 0
43195: PUSH
43196: LD_INT 0
43198: PUSH
43199: LD_INT 0
43201: PUSH
43202: LD_INT 0
43204: PUSH
43205: LD_INT 0
43207: PUSH
43208: LD_INT 0
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: PUSH
43220: LD_STRING E
43222: PUSH
43223: LD_INT 0
43225: PUSH
43226: LD_INT 0
43228: PUSH
43229: LD_VAR 0 3
43233: PUSH
43234: LD_INT 0
43236: PUSH
43237: LD_INT 0
43239: PUSH
43240: LD_INT 0
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PPUSH
43256: CALL_OW 446
// end ;
43260: LD_VAR 0 2
43264: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
43265: LD_INT 0
43267: PPUSH
43268: PPUSH
// if not driver or not IsInUnit ( driver ) then
43269: LD_VAR 0 1
43273: NOT
43274: PUSH
43275: LD_VAR 0 1
43279: PPUSH
43280: CALL_OW 310
43284: NOT
43285: OR
43286: IFFALSE 43290
// exit ;
43288: GO 43380
// vehicle := IsInUnit ( driver ) ;
43290: LD_ADDR_VAR 0 3
43294: PUSH
43295: LD_VAR 0 1
43299: PPUSH
43300: CALL_OW 310
43304: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
43305: LD_VAR 0 1
43309: PPUSH
43310: LD_STRING \
43312: PUSH
43313: LD_INT 0
43315: PUSH
43316: LD_INT 0
43318: PUSH
43319: LD_INT 0
43321: PUSH
43322: LD_INT 0
43324: PUSH
43325: LD_INT 0
43327: PUSH
43328: LD_INT 0
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: PUSH
43340: LD_STRING E
43342: PUSH
43343: LD_INT 0
43345: PUSH
43346: LD_INT 0
43348: PUSH
43349: LD_VAR 0 3
43353: PUSH
43354: LD_INT 0
43356: PUSH
43357: LD_INT 0
43359: PUSH
43360: LD_INT 0
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PPUSH
43376: CALL_OW 447
// end ;
43380: LD_VAR 0 2
43384: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
43385: LD_INT 0
43387: PPUSH
43388: PPUSH
43389: PPUSH
// tmp := [ ] ;
43390: LD_ADDR_VAR 0 5
43394: PUSH
43395: EMPTY
43396: ST_TO_ADDR
// for i in units do
43397: LD_ADDR_VAR 0 4
43401: PUSH
43402: LD_VAR 0 1
43406: PUSH
43407: FOR_IN
43408: IFFALSE 43446
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
43410: LD_ADDR_VAR 0 5
43414: PUSH
43415: LD_VAR 0 5
43419: PPUSH
43420: LD_VAR 0 5
43424: PUSH
43425: LD_INT 1
43427: PLUS
43428: PPUSH
43429: LD_VAR 0 4
43433: PPUSH
43434: CALL_OW 256
43438: PPUSH
43439: CALL_OW 2
43443: ST_TO_ADDR
43444: GO 43407
43446: POP
43447: POP
// if not tmp then
43448: LD_VAR 0 5
43452: NOT
43453: IFFALSE 43457
// exit ;
43455: GO 43505
// if asc then
43457: LD_VAR 0 2
43461: IFFALSE 43485
// result := SortListByListAsc ( units , tmp ) else
43463: LD_ADDR_VAR 0 3
43467: PUSH
43468: LD_VAR 0 1
43472: PPUSH
43473: LD_VAR 0 5
43477: PPUSH
43478: CALL_OW 76
43482: ST_TO_ADDR
43483: GO 43505
// result := SortListByListDesc ( units , tmp ) ;
43485: LD_ADDR_VAR 0 3
43489: PUSH
43490: LD_VAR 0 1
43494: PPUSH
43495: LD_VAR 0 5
43499: PPUSH
43500: CALL_OW 77
43504: ST_TO_ADDR
// end ;
43505: LD_VAR 0 3
43509: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43510: LD_INT 0
43512: PPUSH
43513: PPUSH
// task := GetTaskList ( mech ) ;
43514: LD_ADDR_VAR 0 4
43518: PUSH
43519: LD_VAR 0 1
43523: PPUSH
43524: CALL_OW 437
43528: ST_TO_ADDR
// if not task then
43529: LD_VAR 0 4
43533: NOT
43534: IFFALSE 43538
// exit ;
43536: GO 43580
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43538: LD_ADDR_VAR 0 3
43542: PUSH
43543: LD_VAR 0 4
43547: PUSH
43548: LD_INT 1
43550: ARRAY
43551: PUSH
43552: LD_INT 1
43554: ARRAY
43555: PUSH
43556: LD_STRING r
43558: EQUAL
43559: PUSH
43560: LD_VAR 0 4
43564: PUSH
43565: LD_INT 1
43567: ARRAY
43568: PUSH
43569: LD_INT 4
43571: ARRAY
43572: PUSH
43573: LD_VAR 0 2
43577: EQUAL
43578: AND
43579: ST_TO_ADDR
// end ;
43580: LD_VAR 0 3
43584: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
43585: LD_INT 0
43587: PPUSH
// SetDir ( unit , d ) ;
43588: LD_VAR 0 1
43592: PPUSH
43593: LD_VAR 0 4
43597: PPUSH
43598: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
43602: LD_ADDR_VAR 0 6
43606: PUSH
43607: LD_VAR 0 1
43611: PPUSH
43612: LD_VAR 0 2
43616: PPUSH
43617: LD_VAR 0 3
43621: PPUSH
43622: LD_VAR 0 5
43626: PPUSH
43627: CALL_OW 48
43631: ST_TO_ADDR
// end ;
43632: LD_VAR 0 6
43636: RET
// export function ToNaturalNumber ( number ) ; begin
43637: LD_INT 0
43639: PPUSH
// result := number div 1 ;
43640: LD_ADDR_VAR 0 2
43644: PUSH
43645: LD_VAR 0 1
43649: PUSH
43650: LD_INT 1
43652: DIV
43653: ST_TO_ADDR
// if number < 0 then
43654: LD_VAR 0 1
43658: PUSH
43659: LD_INT 0
43661: LESS
43662: IFFALSE 43672
// result := 0 ;
43664: LD_ADDR_VAR 0 2
43668: PUSH
43669: LD_INT 0
43671: ST_TO_ADDR
// end ;
43672: LD_VAR 0 2
43676: RET
// export function SortByClass ( units , class ) ; var un ; begin
43677: LD_INT 0
43679: PPUSH
43680: PPUSH
// if not units or not class then
43681: LD_VAR 0 1
43685: NOT
43686: PUSH
43687: LD_VAR 0 2
43691: NOT
43692: OR
43693: IFFALSE 43697
// exit ;
43695: GO 43792
// result := [ ] ;
43697: LD_ADDR_VAR 0 3
43701: PUSH
43702: EMPTY
43703: ST_TO_ADDR
// for un in units do
43704: LD_ADDR_VAR 0 4
43708: PUSH
43709: LD_VAR 0 1
43713: PUSH
43714: FOR_IN
43715: IFFALSE 43790
// if GetClass ( un ) = class then
43717: LD_VAR 0 4
43721: PPUSH
43722: CALL_OW 257
43726: PUSH
43727: LD_VAR 0 2
43731: EQUAL
43732: IFFALSE 43759
// result := Insert ( result , 1 , un ) else
43734: LD_ADDR_VAR 0 3
43738: PUSH
43739: LD_VAR 0 3
43743: PPUSH
43744: LD_INT 1
43746: PPUSH
43747: LD_VAR 0 4
43751: PPUSH
43752: CALL_OW 2
43756: ST_TO_ADDR
43757: GO 43788
// result := Replace ( result , result + 1 , un ) ;
43759: LD_ADDR_VAR 0 3
43763: PUSH
43764: LD_VAR 0 3
43768: PPUSH
43769: LD_VAR 0 3
43773: PUSH
43774: LD_INT 1
43776: PLUS
43777: PPUSH
43778: LD_VAR 0 4
43782: PPUSH
43783: CALL_OW 1
43787: ST_TO_ADDR
43788: GO 43714
43790: POP
43791: POP
// end ;
43792: LD_VAR 0 3
43796: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43797: LD_INT 0
43799: PPUSH
43800: PPUSH
43801: PPUSH
43802: PPUSH
43803: PPUSH
43804: PPUSH
43805: PPUSH
// result := [ ] ;
43806: LD_ADDR_VAR 0 4
43810: PUSH
43811: EMPTY
43812: ST_TO_ADDR
// if x - r < 0 then
43813: LD_VAR 0 1
43817: PUSH
43818: LD_VAR 0 3
43822: MINUS
43823: PUSH
43824: LD_INT 0
43826: LESS
43827: IFFALSE 43839
// min_x := 0 else
43829: LD_ADDR_VAR 0 8
43833: PUSH
43834: LD_INT 0
43836: ST_TO_ADDR
43837: GO 43855
// min_x := x - r ;
43839: LD_ADDR_VAR 0 8
43843: PUSH
43844: LD_VAR 0 1
43848: PUSH
43849: LD_VAR 0 3
43853: MINUS
43854: ST_TO_ADDR
// if y - r < 0 then
43855: LD_VAR 0 2
43859: PUSH
43860: LD_VAR 0 3
43864: MINUS
43865: PUSH
43866: LD_INT 0
43868: LESS
43869: IFFALSE 43881
// min_y := 0 else
43871: LD_ADDR_VAR 0 7
43875: PUSH
43876: LD_INT 0
43878: ST_TO_ADDR
43879: GO 43897
// min_y := y - r ;
43881: LD_ADDR_VAR 0 7
43885: PUSH
43886: LD_VAR 0 2
43890: PUSH
43891: LD_VAR 0 3
43895: MINUS
43896: ST_TO_ADDR
// max_x := x + r ;
43897: LD_ADDR_VAR 0 9
43901: PUSH
43902: LD_VAR 0 1
43906: PUSH
43907: LD_VAR 0 3
43911: PLUS
43912: ST_TO_ADDR
// max_y := y + r ;
43913: LD_ADDR_VAR 0 10
43917: PUSH
43918: LD_VAR 0 2
43922: PUSH
43923: LD_VAR 0 3
43927: PLUS
43928: ST_TO_ADDR
// for _x = min_x to max_x do
43929: LD_ADDR_VAR 0 5
43933: PUSH
43934: DOUBLE
43935: LD_VAR 0 8
43939: DEC
43940: ST_TO_ADDR
43941: LD_VAR 0 9
43945: PUSH
43946: FOR_TO
43947: IFFALSE 44048
// for _y = min_y to max_y do
43949: LD_ADDR_VAR 0 6
43953: PUSH
43954: DOUBLE
43955: LD_VAR 0 7
43959: DEC
43960: ST_TO_ADDR
43961: LD_VAR 0 10
43965: PUSH
43966: FOR_TO
43967: IFFALSE 44044
// begin if not ValidHex ( _x , _y ) then
43969: LD_VAR 0 5
43973: PPUSH
43974: LD_VAR 0 6
43978: PPUSH
43979: CALL_OW 488
43983: NOT
43984: IFFALSE 43988
// continue ;
43986: GO 43966
// if GetResourceTypeXY ( _x , _y ) then
43988: LD_VAR 0 5
43992: PPUSH
43993: LD_VAR 0 6
43997: PPUSH
43998: CALL_OW 283
44002: IFFALSE 44042
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
44004: LD_ADDR_VAR 0 4
44008: PUSH
44009: LD_VAR 0 4
44013: PPUSH
44014: LD_VAR 0 4
44018: PUSH
44019: LD_INT 1
44021: PLUS
44022: PPUSH
44023: LD_VAR 0 5
44027: PUSH
44028: LD_VAR 0 6
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PPUSH
44037: CALL_OW 1
44041: ST_TO_ADDR
// end ;
44042: GO 43966
44044: POP
44045: POP
44046: GO 43946
44048: POP
44049: POP
// end ;
44050: LD_VAR 0 4
44054: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
44055: LD_INT 0
44057: PPUSH
44058: PPUSH
44059: PPUSH
44060: PPUSH
44061: PPUSH
44062: PPUSH
44063: PPUSH
44064: PPUSH
// if not units then
44065: LD_VAR 0 1
44069: NOT
44070: IFFALSE 44074
// exit ;
44072: GO 44602
// result := UnitFilter ( units , [ f_ok ] ) ;
44074: LD_ADDR_VAR 0 3
44078: PUSH
44079: LD_VAR 0 1
44083: PPUSH
44084: LD_INT 50
44086: PUSH
44087: EMPTY
44088: LIST
44089: PPUSH
44090: CALL_OW 72
44094: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
44095: LD_ADDR_VAR 0 8
44099: PUSH
44100: LD_VAR 0 1
44104: PUSH
44105: LD_INT 1
44107: ARRAY
44108: PPUSH
44109: CALL_OW 255
44113: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
44114: LD_ADDR_VAR 0 10
44118: PUSH
44119: LD_INT 29
44121: PUSH
44122: LD_INT 91
44124: PUSH
44125: LD_INT 49
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: LIST
44132: ST_TO_ADDR
// if not result then
44133: LD_VAR 0 3
44137: NOT
44138: IFFALSE 44142
// exit ;
44140: GO 44602
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
44142: LD_ADDR_VAR 0 5
44146: PUSH
44147: LD_INT 81
44149: PUSH
44150: LD_VAR 0 8
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PPUSH
44159: CALL_OW 69
44163: ST_TO_ADDR
// for i in result do
44164: LD_ADDR_VAR 0 4
44168: PUSH
44169: LD_VAR 0 3
44173: PUSH
44174: FOR_IN
44175: IFFALSE 44600
// begin tag := GetTag ( i ) + 1 ;
44177: LD_ADDR_VAR 0 9
44181: PUSH
44182: LD_VAR 0 4
44186: PPUSH
44187: CALL_OW 110
44191: PUSH
44192: LD_INT 1
44194: PLUS
44195: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
44196: LD_ADDR_VAR 0 7
44200: PUSH
44201: LD_VAR 0 4
44205: PPUSH
44206: CALL_OW 250
44210: PPUSH
44211: LD_VAR 0 4
44215: PPUSH
44216: CALL_OW 251
44220: PPUSH
44221: LD_INT 4
44223: PPUSH
44224: CALL 43797 0 3
44228: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
44229: LD_VAR 0 4
44233: PPUSH
44234: CALL_OW 247
44238: PUSH
44239: LD_INT 2
44241: EQUAL
44242: PUSH
44243: LD_VAR 0 7
44247: PUSH
44248: LD_INT 2
44250: GREATER
44251: AND
44252: PUSH
44253: LD_VAR 0 4
44257: PPUSH
44258: CALL_OW 264
44262: PUSH
44263: LD_VAR 0 10
44267: IN
44268: NOT
44269: AND
44270: IFFALSE 44309
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
44272: LD_VAR 0 4
44276: PPUSH
44277: LD_VAR 0 7
44281: PUSH
44282: LD_INT 1
44284: ARRAY
44285: PUSH
44286: LD_INT 1
44288: ARRAY
44289: PPUSH
44290: LD_VAR 0 7
44294: PUSH
44295: LD_INT 1
44297: ARRAY
44298: PUSH
44299: LD_INT 2
44301: ARRAY
44302: PPUSH
44303: CALL_OW 116
44307: GO 44598
// if path > tag then
44309: LD_VAR 0 2
44313: PUSH
44314: LD_VAR 0 9
44318: GREATER
44319: IFFALSE 44527
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
44321: LD_ADDR_VAR 0 6
44325: PUSH
44326: LD_VAR 0 5
44330: PPUSH
44331: LD_INT 91
44333: PUSH
44334: LD_VAR 0 4
44338: PUSH
44339: LD_INT 8
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: LIST
44346: PPUSH
44347: CALL_OW 72
44351: ST_TO_ADDR
// if nearEnemy then
44352: LD_VAR 0 6
44356: IFFALSE 44425
// begin if GetWeapon ( i ) = ru_time_lapser then
44358: LD_VAR 0 4
44362: PPUSH
44363: CALL_OW 264
44367: PUSH
44368: LD_INT 49
44370: EQUAL
44371: IFFALSE 44399
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
44373: LD_VAR 0 4
44377: PPUSH
44378: LD_VAR 0 6
44382: PPUSH
44383: LD_VAR 0 4
44387: PPUSH
44388: CALL_OW 74
44392: PPUSH
44393: CALL_OW 112
44397: GO 44423
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
44399: LD_VAR 0 4
44403: PPUSH
44404: LD_VAR 0 6
44408: PPUSH
44409: LD_VAR 0 4
44413: PPUSH
44414: CALL_OW 74
44418: PPUSH
44419: CALL 45673 0 2
// end else
44423: GO 44525
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
44425: LD_VAR 0 4
44429: PPUSH
44430: LD_VAR 0 2
44434: PUSH
44435: LD_VAR 0 9
44439: ARRAY
44440: PUSH
44441: LD_INT 1
44443: ARRAY
44444: PPUSH
44445: LD_VAR 0 2
44449: PUSH
44450: LD_VAR 0 9
44454: ARRAY
44455: PUSH
44456: LD_INT 2
44458: ARRAY
44459: PPUSH
44460: CALL_OW 297
44464: PUSH
44465: LD_INT 6
44467: GREATER
44468: IFFALSE 44511
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
44470: LD_VAR 0 4
44474: PPUSH
44475: LD_VAR 0 2
44479: PUSH
44480: LD_VAR 0 9
44484: ARRAY
44485: PUSH
44486: LD_INT 1
44488: ARRAY
44489: PPUSH
44490: LD_VAR 0 2
44494: PUSH
44495: LD_VAR 0 9
44499: ARRAY
44500: PUSH
44501: LD_INT 2
44503: ARRAY
44504: PPUSH
44505: CALL_OW 114
44509: GO 44525
// SetTag ( i , tag ) ;
44511: LD_VAR 0 4
44515: PPUSH
44516: LD_VAR 0 9
44520: PPUSH
44521: CALL_OW 109
// end else
44525: GO 44598
// if enemy then
44527: LD_VAR 0 5
44531: IFFALSE 44598
// begin if GetWeapon ( i ) = ru_time_lapser then
44533: LD_VAR 0 4
44537: PPUSH
44538: CALL_OW 264
44542: PUSH
44543: LD_INT 49
44545: EQUAL
44546: IFFALSE 44574
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
44548: LD_VAR 0 4
44552: PPUSH
44553: LD_VAR 0 5
44557: PPUSH
44558: LD_VAR 0 4
44562: PPUSH
44563: CALL_OW 74
44567: PPUSH
44568: CALL_OW 112
44572: GO 44598
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
44574: LD_VAR 0 4
44578: PPUSH
44579: LD_VAR 0 5
44583: PPUSH
44584: LD_VAR 0 4
44588: PPUSH
44589: CALL_OW 74
44593: PPUSH
44594: CALL 45673 0 2
// end ; end ;
44598: GO 44174
44600: POP
44601: POP
// end ;
44602: LD_VAR 0 3
44606: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
44607: LD_INT 0
44609: PPUSH
44610: PPUSH
44611: PPUSH
// if not unit or IsInUnit ( unit ) then
44612: LD_VAR 0 1
44616: NOT
44617: PUSH
44618: LD_VAR 0 1
44622: PPUSH
44623: CALL_OW 310
44627: OR
44628: IFFALSE 44632
// exit ;
44630: GO 44723
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
44632: LD_ADDR_VAR 0 4
44636: PUSH
44637: LD_VAR 0 1
44641: PPUSH
44642: CALL_OW 250
44646: PPUSH
44647: LD_VAR 0 2
44651: PPUSH
44652: LD_INT 1
44654: PPUSH
44655: CALL_OW 272
44659: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
44660: LD_ADDR_VAR 0 5
44664: PUSH
44665: LD_VAR 0 1
44669: PPUSH
44670: CALL_OW 251
44674: PPUSH
44675: LD_VAR 0 2
44679: PPUSH
44680: LD_INT 1
44682: PPUSH
44683: CALL_OW 273
44687: ST_TO_ADDR
// if ValidHex ( x , y ) then
44688: LD_VAR 0 4
44692: PPUSH
44693: LD_VAR 0 5
44697: PPUSH
44698: CALL_OW 488
44702: IFFALSE 44723
// ComTurnXY ( unit , x , y ) ;
44704: LD_VAR 0 1
44708: PPUSH
44709: LD_VAR 0 4
44713: PPUSH
44714: LD_VAR 0 5
44718: PPUSH
44719: CALL_OW 118
// end ;
44723: LD_VAR 0 3
44727: RET
// export function SeeUnits ( side , units ) ; var i ; begin
44728: LD_INT 0
44730: PPUSH
44731: PPUSH
// result := false ;
44732: LD_ADDR_VAR 0 3
44736: PUSH
44737: LD_INT 0
44739: ST_TO_ADDR
// if not units then
44740: LD_VAR 0 2
44744: NOT
44745: IFFALSE 44749
// exit ;
44747: GO 44794
// for i in units do
44749: LD_ADDR_VAR 0 4
44753: PUSH
44754: LD_VAR 0 2
44758: PUSH
44759: FOR_IN
44760: IFFALSE 44792
// if See ( side , i ) then
44762: LD_VAR 0 1
44766: PPUSH
44767: LD_VAR 0 4
44771: PPUSH
44772: CALL_OW 292
44776: IFFALSE 44790
// begin result := true ;
44778: LD_ADDR_VAR 0 3
44782: PUSH
44783: LD_INT 1
44785: ST_TO_ADDR
// exit ;
44786: POP
44787: POP
44788: GO 44794
// end ;
44790: GO 44759
44792: POP
44793: POP
// end ;
44794: LD_VAR 0 3
44798: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44799: LD_INT 0
44801: PPUSH
44802: PPUSH
44803: PPUSH
44804: PPUSH
// if not unit or not points then
44805: LD_VAR 0 1
44809: NOT
44810: PUSH
44811: LD_VAR 0 2
44815: NOT
44816: OR
44817: IFFALSE 44821
// exit ;
44819: GO 44911
// dist := 99999 ;
44821: LD_ADDR_VAR 0 5
44825: PUSH
44826: LD_INT 99999
44828: ST_TO_ADDR
// for i in points do
44829: LD_ADDR_VAR 0 4
44833: PUSH
44834: LD_VAR 0 2
44838: PUSH
44839: FOR_IN
44840: IFFALSE 44909
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44842: LD_ADDR_VAR 0 6
44846: PUSH
44847: LD_VAR 0 1
44851: PPUSH
44852: LD_VAR 0 4
44856: PUSH
44857: LD_INT 1
44859: ARRAY
44860: PPUSH
44861: LD_VAR 0 4
44865: PUSH
44866: LD_INT 2
44868: ARRAY
44869: PPUSH
44870: CALL_OW 297
44874: ST_TO_ADDR
// if tmpDist < dist then
44875: LD_VAR 0 6
44879: PUSH
44880: LD_VAR 0 5
44884: LESS
44885: IFFALSE 44907
// begin result := i ;
44887: LD_ADDR_VAR 0 3
44891: PUSH
44892: LD_VAR 0 4
44896: ST_TO_ADDR
// dist := tmpDist ;
44897: LD_ADDR_VAR 0 5
44901: PUSH
44902: LD_VAR 0 6
44906: ST_TO_ADDR
// end ; end ;
44907: GO 44839
44909: POP
44910: POP
// end ;
44911: LD_VAR 0 3
44915: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44916: LD_INT 0
44918: PPUSH
// uc_side := side ;
44919: LD_ADDR_OWVAR 20
44923: PUSH
44924: LD_VAR 0 1
44928: ST_TO_ADDR
// uc_nation := 3 ;
44929: LD_ADDR_OWVAR 21
44933: PUSH
44934: LD_INT 3
44936: ST_TO_ADDR
// vc_chassis := 25 ;
44937: LD_ADDR_OWVAR 37
44941: PUSH
44942: LD_INT 25
44944: ST_TO_ADDR
// vc_engine := engine_siberite ;
44945: LD_ADDR_OWVAR 39
44949: PUSH
44950: LD_INT 3
44952: ST_TO_ADDR
// vc_control := control_computer ;
44953: LD_ADDR_OWVAR 38
44957: PUSH
44958: LD_INT 3
44960: ST_TO_ADDR
// vc_weapon := 59 ;
44961: LD_ADDR_OWVAR 40
44965: PUSH
44966: LD_INT 59
44968: ST_TO_ADDR
// result := CreateVehicle ;
44969: LD_ADDR_VAR 0 5
44973: PUSH
44974: CALL_OW 45
44978: ST_TO_ADDR
// SetDir ( result , d ) ;
44979: LD_VAR 0 5
44983: PPUSH
44984: LD_VAR 0 4
44988: PPUSH
44989: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44993: LD_VAR 0 5
44997: PPUSH
44998: LD_VAR 0 2
45002: PPUSH
45003: LD_VAR 0 3
45007: PPUSH
45008: LD_INT 0
45010: PPUSH
45011: CALL_OW 48
// end ;
45015: LD_VAR 0 5
45019: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
45020: LD_INT 0
45022: PPUSH
45023: PPUSH
45024: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
45025: LD_ADDR_VAR 0 2
45029: PUSH
45030: LD_INT 0
45032: PUSH
45033: LD_INT 0
45035: PUSH
45036: LD_INT 0
45038: PUSH
45039: LD_INT 0
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
45048: LD_VAR 0 1
45052: NOT
45053: PUSH
45054: LD_VAR 0 1
45058: PPUSH
45059: CALL_OW 264
45063: PUSH
45064: LD_INT 12
45066: PUSH
45067: LD_INT 51
45069: PUSH
45070: LD_INT 32
45072: PUSH
45073: LD_INT 89
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: IN
45082: NOT
45083: OR
45084: IFFALSE 45088
// exit ;
45086: GO 45186
// for i := 1 to 3 do
45088: LD_ADDR_VAR 0 3
45092: PUSH
45093: DOUBLE
45094: LD_INT 1
45096: DEC
45097: ST_TO_ADDR
45098: LD_INT 3
45100: PUSH
45101: FOR_TO
45102: IFFALSE 45184
// begin tmp := GetCargo ( cargo , i ) ;
45104: LD_ADDR_VAR 0 4
45108: PUSH
45109: LD_VAR 0 1
45113: PPUSH
45114: LD_VAR 0 3
45118: PPUSH
45119: CALL_OW 289
45123: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
45124: LD_ADDR_VAR 0 2
45128: PUSH
45129: LD_VAR 0 2
45133: PPUSH
45134: LD_VAR 0 3
45138: PPUSH
45139: LD_VAR 0 4
45143: PPUSH
45144: CALL_OW 1
45148: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
45149: LD_ADDR_VAR 0 2
45153: PUSH
45154: LD_VAR 0 2
45158: PPUSH
45159: LD_INT 4
45161: PPUSH
45162: LD_VAR 0 2
45166: PUSH
45167: LD_INT 4
45169: ARRAY
45170: PUSH
45171: LD_VAR 0 4
45175: PLUS
45176: PPUSH
45177: CALL_OW 1
45181: ST_TO_ADDR
// end ;
45182: GO 45101
45184: POP
45185: POP
// end ;
45186: LD_VAR 0 2
45190: RET
// export function Length ( array ) ; begin
45191: LD_INT 0
45193: PPUSH
// result := array + 0 ;
45194: LD_ADDR_VAR 0 2
45198: PUSH
45199: LD_VAR 0 1
45203: PUSH
45204: LD_INT 0
45206: PLUS
45207: ST_TO_ADDR
// end ;
45208: LD_VAR 0 2
45212: RET
// export function PrepareArray ( array ) ; begin
45213: LD_INT 0
45215: PPUSH
// result := array diff 0 ;
45216: LD_ADDR_VAR 0 2
45220: PUSH
45221: LD_VAR 0 1
45225: PUSH
45226: LD_INT 0
45228: DIFF
45229: ST_TO_ADDR
// if not result [ 1 ] then
45230: LD_VAR 0 2
45234: PUSH
45235: LD_INT 1
45237: ARRAY
45238: NOT
45239: IFFALSE 45259
// result := Delete ( result , 1 ) ;
45241: LD_ADDR_VAR 0 2
45245: PUSH
45246: LD_VAR 0 2
45250: PPUSH
45251: LD_INT 1
45253: PPUSH
45254: CALL_OW 3
45258: ST_TO_ADDR
// end ;
45259: LD_VAR 0 2
45263: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
45264: LD_INT 0
45266: PPUSH
45267: PPUSH
45268: PPUSH
45269: PPUSH
// sibRocketRange := 25 ;
45270: LD_ADDR_VAR 0 6
45274: PUSH
45275: LD_INT 25
45277: ST_TO_ADDR
// result := false ;
45278: LD_ADDR_VAR 0 4
45282: PUSH
45283: LD_INT 0
45285: ST_TO_ADDR
// for i := 0 to 5 do
45286: LD_ADDR_VAR 0 5
45290: PUSH
45291: DOUBLE
45292: LD_INT 0
45294: DEC
45295: ST_TO_ADDR
45296: LD_INT 5
45298: PUSH
45299: FOR_TO
45300: IFFALSE 45367
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
45302: LD_VAR 0 1
45306: PPUSH
45307: LD_VAR 0 5
45311: PPUSH
45312: LD_VAR 0 6
45316: PPUSH
45317: CALL_OW 272
45321: PPUSH
45322: LD_VAR 0 2
45326: PPUSH
45327: LD_VAR 0 5
45331: PPUSH
45332: LD_VAR 0 6
45336: PPUSH
45337: CALL_OW 273
45341: PPUSH
45342: LD_VAR 0 3
45346: PPUSH
45347: CALL_OW 309
45351: IFFALSE 45365
// begin result := true ;
45353: LD_ADDR_VAR 0 4
45357: PUSH
45358: LD_INT 1
45360: ST_TO_ADDR
// exit ;
45361: POP
45362: POP
45363: GO 45369
// end ;
45365: GO 45299
45367: POP
45368: POP
// end ;
45369: LD_VAR 0 4
45373: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
45374: LD_INT 0
45376: PPUSH
45377: PPUSH
45378: PPUSH
// if btype = b_depot then
45379: LD_VAR 0 2
45383: PUSH
45384: LD_INT 0
45386: EQUAL
45387: IFFALSE 45399
// begin result := true ;
45389: LD_ADDR_VAR 0 3
45393: PUSH
45394: LD_INT 1
45396: ST_TO_ADDR
// exit ;
45397: GO 45515
// end ; pom := GetBase ( depot ) ;
45399: LD_ADDR_VAR 0 4
45403: PUSH
45404: LD_VAR 0 1
45408: PPUSH
45409: CALL_OW 274
45413: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45414: LD_ADDR_VAR 0 5
45418: PUSH
45419: LD_VAR 0 2
45423: PPUSH
45424: LD_VAR 0 1
45428: PPUSH
45429: CALL_OW 248
45433: PPUSH
45434: CALL_OW 450
45438: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
45439: LD_ADDR_VAR 0 3
45443: PUSH
45444: LD_VAR 0 4
45448: PPUSH
45449: LD_INT 1
45451: PPUSH
45452: CALL_OW 275
45456: PUSH
45457: LD_VAR 0 5
45461: PUSH
45462: LD_INT 1
45464: ARRAY
45465: GREATEREQUAL
45466: PUSH
45467: LD_VAR 0 4
45471: PPUSH
45472: LD_INT 2
45474: PPUSH
45475: CALL_OW 275
45479: PUSH
45480: LD_VAR 0 5
45484: PUSH
45485: LD_INT 2
45487: ARRAY
45488: GREATEREQUAL
45489: AND
45490: PUSH
45491: LD_VAR 0 4
45495: PPUSH
45496: LD_INT 3
45498: PPUSH
45499: CALL_OW 275
45503: PUSH
45504: LD_VAR 0 5
45508: PUSH
45509: LD_INT 3
45511: ARRAY
45512: GREATEREQUAL
45513: AND
45514: ST_TO_ADDR
// end ;
45515: LD_VAR 0 3
45519: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
45520: LD_INT 0
45522: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
45523: LD_VAR 0 1
45527: PPUSH
45528: LD_VAR 0 2
45532: PPUSH
45533: LD_INT 0
45535: PPUSH
45536: LD_INT 0
45538: PPUSH
45539: LD_INT 1
45541: PPUSH
45542: LD_INT 0
45544: PPUSH
45545: CALL_OW 587
// end ;
45549: LD_VAR 0 3
45553: RET
// export function CenterOnNow ( unit ) ; begin
45554: LD_INT 0
45556: PPUSH
// result := IsInUnit ( unit ) ;
45557: LD_ADDR_VAR 0 2
45561: PUSH
45562: LD_VAR 0 1
45566: PPUSH
45567: CALL_OW 310
45571: ST_TO_ADDR
// if not result then
45572: LD_VAR 0 2
45576: NOT
45577: IFFALSE 45589
// result := unit ;
45579: LD_ADDR_VAR 0 2
45583: PUSH
45584: LD_VAR 0 1
45588: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
45589: LD_VAR 0 1
45593: PPUSH
45594: CALL_OW 87
// end ;
45598: LD_VAR 0 2
45602: RET
// export function ComMoveHex ( unit , hex ) ; begin
45603: LD_INT 0
45605: PPUSH
// if not hex then
45606: LD_VAR 0 2
45610: NOT
45611: IFFALSE 45615
// exit ;
45613: GO 45668
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
45615: LD_VAR 0 2
45619: PUSH
45620: LD_INT 1
45622: ARRAY
45623: PPUSH
45624: LD_VAR 0 2
45628: PUSH
45629: LD_INT 2
45631: ARRAY
45632: PPUSH
45633: CALL_OW 428
45637: IFFALSE 45641
// exit ;
45639: GO 45668
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
45641: LD_VAR 0 1
45645: PPUSH
45646: LD_VAR 0 2
45650: PUSH
45651: LD_INT 1
45653: ARRAY
45654: PPUSH
45655: LD_VAR 0 2
45659: PUSH
45660: LD_INT 2
45662: ARRAY
45663: PPUSH
45664: CALL_OW 111
// end ;
45668: LD_VAR 0 3
45672: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
45673: LD_INT 0
45675: PPUSH
45676: PPUSH
45677: PPUSH
// if not unit or not enemy then
45678: LD_VAR 0 1
45682: NOT
45683: PUSH
45684: LD_VAR 0 2
45688: NOT
45689: OR
45690: IFFALSE 45694
// exit ;
45692: GO 45818
// x := GetX ( enemy ) ;
45694: LD_ADDR_VAR 0 4
45698: PUSH
45699: LD_VAR 0 2
45703: PPUSH
45704: CALL_OW 250
45708: ST_TO_ADDR
// y := GetY ( enemy ) ;
45709: LD_ADDR_VAR 0 5
45713: PUSH
45714: LD_VAR 0 2
45718: PPUSH
45719: CALL_OW 251
45723: ST_TO_ADDR
// if ValidHex ( x , y ) then
45724: LD_VAR 0 4
45728: PPUSH
45729: LD_VAR 0 5
45733: PPUSH
45734: CALL_OW 488
45738: IFFALSE 45818
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
45740: LD_VAR 0 2
45744: PPUSH
45745: CALL_OW 247
45749: PUSH
45750: LD_INT 3
45752: PUSH
45753: LD_INT 2
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: IN
45760: PUSH
45761: LD_VAR 0 1
45765: PPUSH
45766: CALL_OW 255
45770: PPUSH
45771: LD_VAR 0 2
45775: PPUSH
45776: CALL_OW 292
45780: OR
45781: IFFALSE 45799
// ComAttackUnit ( unit , enemy ) else
45783: LD_VAR 0 1
45787: PPUSH
45788: LD_VAR 0 2
45792: PPUSH
45793: CALL_OW 115
45797: GO 45818
// ComAgressiveMove ( unit , x , y ) ;
45799: LD_VAR 0 1
45803: PPUSH
45804: LD_VAR 0 4
45808: PPUSH
45809: LD_VAR 0 5
45813: PPUSH
45814: CALL_OW 114
// end ;
45818: LD_VAR 0 3
45822: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
45823: LD_INT 0
45825: PPUSH
45826: PPUSH
45827: PPUSH
// list := AreaToList ( area , 0 ) ;
45828: LD_ADDR_VAR 0 5
45832: PUSH
45833: LD_VAR 0 1
45837: PPUSH
45838: LD_INT 0
45840: PPUSH
45841: CALL_OW 517
45845: ST_TO_ADDR
// if not list then
45846: LD_VAR 0 5
45850: NOT
45851: IFFALSE 45855
// exit ;
45853: GO 45985
// if all then
45855: LD_VAR 0 2
45859: IFFALSE 45947
// begin for i := 1 to list [ 1 ] do
45861: LD_ADDR_VAR 0 4
45865: PUSH
45866: DOUBLE
45867: LD_INT 1
45869: DEC
45870: ST_TO_ADDR
45871: LD_VAR 0 5
45875: PUSH
45876: LD_INT 1
45878: ARRAY
45879: PUSH
45880: FOR_TO
45881: IFFALSE 45943
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
45883: LD_ADDR_VAR 0 3
45887: PUSH
45888: LD_VAR 0 3
45892: PPUSH
45893: LD_VAR 0 3
45897: PUSH
45898: LD_INT 1
45900: PLUS
45901: PPUSH
45902: LD_VAR 0 5
45906: PUSH
45907: LD_INT 1
45909: ARRAY
45910: PUSH
45911: LD_VAR 0 4
45915: ARRAY
45916: PUSH
45917: LD_VAR 0 5
45921: PUSH
45922: LD_INT 2
45924: ARRAY
45925: PUSH
45926: LD_VAR 0 4
45930: ARRAY
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PPUSH
45936: CALL_OW 1
45940: ST_TO_ADDR
45941: GO 45880
45943: POP
45944: POP
// exit ;
45945: GO 45985
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
45947: LD_ADDR_VAR 0 3
45951: PUSH
45952: LD_VAR 0 5
45956: PUSH
45957: LD_INT 1
45959: ARRAY
45960: PUSH
45961: LD_INT 1
45963: ARRAY
45964: PUSH
45965: LD_VAR 0 5
45969: PUSH
45970: LD_INT 2
45972: ARRAY
45973: PUSH
45974: LD_INT 1
45976: ARRAY
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: EMPTY
45983: LIST
45984: ST_TO_ADDR
// end ;
45985: LD_VAR 0 3
45989: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45990: LD_INT 0
45992: PPUSH
45993: PPUSH
// list := AreaToList ( area , 0 ) ;
45994: LD_ADDR_VAR 0 4
45998: PUSH
45999: LD_VAR 0 1
46003: PPUSH
46004: LD_INT 0
46006: PPUSH
46007: CALL_OW 517
46011: ST_TO_ADDR
// if not list then
46012: LD_VAR 0 4
46016: NOT
46017: IFFALSE 46021
// exit ;
46019: GO 46062
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
46021: LD_ADDR_VAR 0 3
46025: PUSH
46026: LD_VAR 0 4
46030: PUSH
46031: LD_INT 1
46033: ARRAY
46034: PUSH
46035: LD_INT 1
46037: ARRAY
46038: PUSH
46039: LD_VAR 0 4
46043: PUSH
46044: LD_INT 2
46046: ARRAY
46047: PUSH
46048: LD_INT 1
46050: ARRAY
46051: PUSH
46052: LD_VAR 0 2
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: LIST
46061: ST_TO_ADDR
// end ;
46062: LD_VAR 0 3
46066: RET
// export function First ( array ) ; begin
46067: LD_INT 0
46069: PPUSH
// if not array then
46070: LD_VAR 0 1
46074: NOT
46075: IFFALSE 46079
// exit ;
46077: GO 46093
// result := array [ 1 ] ;
46079: LD_ADDR_VAR 0 2
46083: PUSH
46084: LD_VAR 0 1
46088: PUSH
46089: LD_INT 1
46091: ARRAY
46092: ST_TO_ADDR
// end ;
46093: LD_VAR 0 2
46097: RET
// export function Last ( array ) ; begin
46098: LD_INT 0
46100: PPUSH
// if not array then
46101: LD_VAR 0 1
46105: NOT
46106: IFFALSE 46110
// exit ;
46108: GO 46126
// result := array [ array ] ;
46110: LD_ADDR_VAR 0 2
46114: PUSH
46115: LD_VAR 0 1
46119: PUSH
46120: LD_VAR 0 1
46124: ARRAY
46125: ST_TO_ADDR
// end ;
46126: LD_VAR 0 2
46130: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
46131: LD_INT 0
46133: PPUSH
46134: PPUSH
// result := [ ] ;
46135: LD_ADDR_VAR 0 5
46139: PUSH
46140: EMPTY
46141: ST_TO_ADDR
// if not array then
46142: LD_VAR 0 1
46146: NOT
46147: IFFALSE 46151
// exit ;
46149: GO 46263
// for i := 1 to array do
46151: LD_ADDR_VAR 0 6
46155: PUSH
46156: DOUBLE
46157: LD_INT 1
46159: DEC
46160: ST_TO_ADDR
46161: LD_VAR 0 1
46165: PUSH
46166: FOR_TO
46167: IFFALSE 46261
// if array [ i ] [ index ] = value then
46169: LD_VAR 0 1
46173: PUSH
46174: LD_VAR 0 6
46178: ARRAY
46179: PUSH
46180: LD_VAR 0 2
46184: ARRAY
46185: PUSH
46186: LD_VAR 0 3
46190: EQUAL
46191: IFFALSE 46259
// begin if indexColumn then
46193: LD_VAR 0 4
46197: IFFALSE 46233
// result := Join ( result , array [ i ] [ indexColumn ] ) else
46199: LD_ADDR_VAR 0 5
46203: PUSH
46204: LD_VAR 0 5
46208: PPUSH
46209: LD_VAR 0 1
46213: PUSH
46214: LD_VAR 0 6
46218: ARRAY
46219: PUSH
46220: LD_VAR 0 4
46224: ARRAY
46225: PPUSH
46226: CALL 41445 0 2
46230: ST_TO_ADDR
46231: GO 46259
// result := Join ( result , array [ i ] ) ;
46233: LD_ADDR_VAR 0 5
46237: PUSH
46238: LD_VAR 0 5
46242: PPUSH
46243: LD_VAR 0 1
46247: PUSH
46248: LD_VAR 0 6
46252: ARRAY
46253: PPUSH
46254: CALL 41445 0 2
46258: ST_TO_ADDR
// end ;
46259: GO 46166
46261: POP
46262: POP
// end ;
46263: LD_VAR 0 5
46267: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
46268: LD_INT 0
46270: PPUSH
// if not vehicles or not parkingPoint then
46271: LD_VAR 0 1
46275: NOT
46276: PUSH
46277: LD_VAR 0 2
46281: NOT
46282: OR
46283: IFFALSE 46287
// exit ;
46285: GO 46385
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
46287: LD_ADDR_VAR 0 1
46291: PUSH
46292: LD_VAR 0 1
46296: PPUSH
46297: LD_INT 50
46299: PUSH
46300: EMPTY
46301: LIST
46302: PUSH
46303: LD_INT 3
46305: PUSH
46306: LD_INT 92
46308: PUSH
46309: LD_VAR 0 2
46313: PUSH
46314: LD_INT 1
46316: ARRAY
46317: PUSH
46318: LD_VAR 0 2
46322: PUSH
46323: LD_INT 2
46325: ARRAY
46326: PUSH
46327: LD_INT 8
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PPUSH
46344: CALL_OW 72
46348: ST_TO_ADDR
// if not vehicles then
46349: LD_VAR 0 1
46353: NOT
46354: IFFALSE 46358
// exit ;
46356: GO 46385
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
46358: LD_VAR 0 1
46362: PPUSH
46363: LD_VAR 0 2
46367: PUSH
46368: LD_INT 1
46370: ARRAY
46371: PPUSH
46372: LD_VAR 0 2
46376: PUSH
46377: LD_INT 2
46379: ARRAY
46380: PPUSH
46381: CALL_OW 111
// end ;
46385: LD_VAR 0 3
46389: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
46390: LD_INT 0
46392: PPUSH
46393: PPUSH
46394: PPUSH
// if not side or not area then
46395: LD_VAR 0 1
46399: NOT
46400: PUSH
46401: LD_VAR 0 2
46405: NOT
46406: OR
46407: IFFALSE 46411
// exit ;
46409: GO 46530
// tmp := AreaToList ( area , 0 ) ;
46411: LD_ADDR_VAR 0 5
46415: PUSH
46416: LD_VAR 0 2
46420: PPUSH
46421: LD_INT 0
46423: PPUSH
46424: CALL_OW 517
46428: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
46429: LD_ADDR_VAR 0 4
46433: PUSH
46434: DOUBLE
46435: LD_INT 1
46437: DEC
46438: ST_TO_ADDR
46439: LD_VAR 0 5
46443: PUSH
46444: LD_INT 1
46446: ARRAY
46447: PUSH
46448: FOR_TO
46449: IFFALSE 46528
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
46451: LD_VAR 0 5
46455: PUSH
46456: LD_INT 1
46458: ARRAY
46459: PUSH
46460: LD_VAR 0 4
46464: ARRAY
46465: PPUSH
46466: LD_VAR 0 5
46470: PUSH
46471: LD_INT 2
46473: ARRAY
46474: PUSH
46475: LD_VAR 0 4
46479: ARRAY
46480: PPUSH
46481: CALL_OW 351
46485: IFFALSE 46526
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
46487: LD_VAR 0 5
46491: PUSH
46492: LD_INT 1
46494: ARRAY
46495: PUSH
46496: LD_VAR 0 4
46500: ARRAY
46501: PPUSH
46502: LD_VAR 0 5
46506: PUSH
46507: LD_INT 2
46509: ARRAY
46510: PUSH
46511: LD_VAR 0 4
46515: ARRAY
46516: PPUSH
46517: LD_VAR 0 1
46521: PPUSH
46522: CALL_OW 244
// end ;
46526: GO 46448
46528: POP
46529: POP
// end ;
46530: LD_VAR 0 3
46534: RET
