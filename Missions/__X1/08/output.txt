// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// PrepareArabian ;
   8: CALL 65 0 0
// PrepareRussian ;
  12: CALL 1514 0 0
// PrepareHeike ;
  16: CALL 614 0 0
// Action ;
  20: CALL 2694 0 0
// end ;
  24: END
// export debug , prefix , startAttackOnKabul , startAttackOnHeike ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// prefix := 07_ ;
  36: LD_ADDR_EXP 2
  40: PUSH
  41: LD_STRING 07_
  43: ST_TO_ADDR
// startAttackOnKabul := false ;
  44: LD_ADDR_EXP 3
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// startAttackOnHeike := false ;
  52: LD_ADDR_EXP 4
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// end ; end_of_file
  60: LD_VAR 0 1
  64: RET
// export function PrepareArabian ; var i , un , lives ; begin
  65: LD_INT 0
  67: PPUSH
  68: PPUSH
  69: PPUSH
  70: PPUSH
// SetBName ( ar_dep , newkabul ) ;
  71: LD_INT 2
  73: PPUSH
  74: LD_STRING newkabul
  76: PPUSH
  77: CALL_OW 500
// uc_side := 5 ;
  81: LD_ADDR_OWVAR 20
  85: PUSH
  86: LD_INT 5
  88: ST_TO_ADDR
// uc_nation := 2 ;
  89: LD_ADDR_OWVAR 21
  93: PUSH
  94: LD_INT 2
  96: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do
  97: LD_ADDR_VAR 0 2
 101: PUSH
 102: LD_INT 22
 104: PUSH
 105: LD_INT 2
 107: PUSH
 108: EMPTY
 109: LIST
 110: LIST
 111: PUSH
 112: LD_INT 21
 114: PUSH
 115: LD_INT 3
 117: PUSH
 118: EMPTY
 119: LIST
 120: LIST
 121: PUSH
 122: EMPTY
 123: LIST
 124: LIST
 125: PPUSH
 126: CALL_OW 69
 130: PUSH
 131: FOR_IN
 132: IFFALSE 266
// begin SetSide ( i , 5 ) ;
 134: LD_VAR 0 2
 138: PPUSH
 139: LD_INT 5
 141: PPUSH
 142: CALL_OW 235
// lives := rand ( 248 , 510 ) ;
 146: LD_ADDR_VAR 0 4
 150: PUSH
 151: LD_INT 248
 153: PPUSH
 154: LD_INT 510
 156: PPUSH
 157: CALL_OW 12
 161: ST_TO_ADDR
// SetLives ( i , lives ) ;
 162: LD_VAR 0 2
 166: PPUSH
 167: LD_VAR 0 4
 171: PPUSH
 172: CALL_OW 234
// if GetBType ( i ) = b_bunker then
 176: LD_VAR 0 2
 180: PPUSH
 181: CALL_OW 266
 185: PUSH
 186: LD_INT 32
 188: EQUAL
 189: IFFALSE 264
// begin PlaceWeaponTurret ( i , [ ar_double_machine_gun , ar_gun , ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] ) ;
 191: LD_VAR 0 2
 195: PPUSH
 196: LD_INT 24
 198: PUSH
 199: LD_INT 27
 201: PUSH
 202: LD_INT 25
 204: PUSH
 205: LD_INT 28
 207: PUSH
 208: EMPTY
 209: LIST
 210: LIST
 211: LIST
 212: LIST
 213: PUSH
 214: LD_INT 1
 216: PPUSH
 217: LD_INT 4
 219: PPUSH
 220: CALL_OW 12
 224: ARRAY
 225: PPUSH
 226: CALL_OW 431
// if lives > 250 then
 230: LD_VAR 0 4
 234: PUSH
 235: LD_INT 250
 237: GREATER
 238: IFFALSE 264
// begin PrepareSoldier ( false , 6 ) ;
 240: LD_INT 0
 242: PPUSH
 243: LD_INT 6
 245: PPUSH
 246: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
 250: CALL_OW 44
 254: PPUSH
 255: LD_VAR 0 2
 259: PPUSH
 260: CALL_OW 52
// end ; end ; end ;
 264: GO 131
 266: POP
 267: POP
// for i := 1 to 9 do
 268: LD_ADDR_VAR 0 2
 272: PUSH
 273: DOUBLE
 274: LD_INT 1
 276: DEC
 277: ST_TO_ADDR
 278: LD_INT 9
 280: PUSH
 281: FOR_TO
 282: IFFALSE 361
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 0 ) ;
 284: LD_INT 0
 286: PPUSH
 287: LD_INT 1
 289: PPUSH
 290: LD_INT 4
 292: PPUSH
 293: CALL_OW 12
 297: PPUSH
 298: LD_INT 0
 300: PPUSH
 301: CALL_OW 380
// un := CreateHuman ;
 305: LD_ADDR_VAR 0 3
 309: PUSH
 310: CALL_OW 44
 314: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 315: LD_VAR 0 3
 319: PPUSH
 320: LD_INT 0
 322: PPUSH
 323: LD_INT 5
 325: PPUSH
 326: CALL_OW 12
 330: PPUSH
 331: CALL_OW 233
// PlaceUnitArea ( un , kabulDeadArea , false ) ;
 335: LD_VAR 0 3
 339: PPUSH
 340: LD_INT 1
 342: PPUSH
 343: LD_INT 0
 345: PPUSH
 346: CALL_OW 49
// KillUnit ( un ) ;
 350: LD_VAR 0 3
 354: PPUSH
 355: CALL_OW 66
// end ;
 359: GO 281
 361: POP
 362: POP
// for i := 1 to 3 do
 363: LD_ADDR_VAR 0 2
 367: PUSH
 368: DOUBLE
 369: LD_INT 1
 371: DEC
 372: ST_TO_ADDR
 373: LD_INT 3
 375: PUSH
 376: FOR_TO
 377: IFFALSE 531
// begin vc_chassis := ar_medium_trike ;
 379: LD_ADDR_OWVAR 37
 383: PUSH
 384: LD_INT 13
 386: ST_TO_ADDR
// vc_engine := [ engine_solar , engine_combustion ] [ rand ( 1 , 2 ) ] ;
 387: LD_ADDR_OWVAR 39
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 1
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: PUSH
 402: LD_INT 1
 404: PPUSH
 405: LD_INT 2
 407: PPUSH
 408: CALL_OW 12
 412: ARRAY
 413: ST_TO_ADDR
// vc_control := [ control_manual , control_remote ] [ rand ( 1 , 2 ) ] ;
 414: LD_ADDR_OWVAR 38
 418: PUSH
 419: LD_INT 1
 421: PUSH
 422: LD_INT 2
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: PUSH
 429: LD_INT 1
 431: PPUSH
 432: LD_INT 2
 434: PPUSH
 435: CALL_OW 12
 439: ARRAY
 440: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_gatling_gun , ar_gun ] [ rand ( 1 , 3 ) ] ;
 441: LD_ADDR_OWVAR 40
 445: PUSH
 446: LD_INT 24
 448: PUSH
 449: LD_INT 25
 451: PUSH
 452: LD_INT 27
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: LIST
 459: PUSH
 460: LD_INT 1
 462: PPUSH
 463: LD_INT 3
 465: PPUSH
 466: CALL_OW 12
 470: ARRAY
 471: ST_TO_ADDR
// un := CreateVehicle ;
 472: LD_ADDR_VAR 0 3
 476: PUSH
 477: CALL_OW 45
 481: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 482: LD_VAR 0 3
 486: PPUSH
 487: LD_INT 0
 489: PPUSH
 490: LD_INT 5
 492: PPUSH
 493: CALL_OW 12
 497: PPUSH
 498: CALL_OW 233
// PlaceUnitArea ( un , kabulVDeadArea , false ) ;
 502: LD_VAR 0 3
 506: PPUSH
 507: LD_INT 2
 509: PPUSH
 510: LD_INT 0
 512: PPUSH
 513: CALL_OW 49
// SetLives ( un , 200 ) ;
 517: LD_VAR 0 3
 521: PPUSH
 522: LD_INT 200
 524: PPUSH
 525: CALL_OW 234
// end ;
 529: GO 376
 531: POP
 532: POP
// for i := 1 to 3 do
 533: LD_ADDR_VAR 0 2
 537: PUSH
 538: DOUBLE
 539: LD_INT 1
 541: DEC
 542: ST_TO_ADDR
 543: LD_INT 3
 545: PUSH
 546: FOR_TO
 547: IFFALSE 607
// begin PrepareSoldier ( false , 6 ) ;
 549: LD_INT 0
 551: PPUSH
 552: LD_INT 6
 554: PPUSH
 555: CALL_OW 381
// un := CreateHuman ;
 559: LD_ADDR_VAR 0 3
 563: PUSH
 564: CALL_OW 44
 568: ST_TO_ADDR
// PlaceUnitXYR ( un , 106 , 47 , 4 , false ) ;
 569: LD_VAR 0 3
 573: PPUSH
 574: LD_INT 106
 576: PPUSH
 577: LD_INT 47
 579: PPUSH
 580: LD_INT 4
 582: PPUSH
 583: LD_INT 0
 585: PPUSH
 586: CALL_OW 50
// ComAgressiveMove ( un , 71 , 53 ) ;
 590: LD_VAR 0 3
 594: PPUSH
 595: LD_INT 71
 597: PPUSH
 598: LD_INT 53
 600: PPUSH
 601: CALL_OW 114
// end ;
 605: GO 546
 607: POP
 608: POP
// end ;
 609: LD_VAR 0 1
 613: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad ; export function PrepareHeike ; var i , tmp , un , veh ; begin
 614: LD_INT 0
 616: PPUSH
 617: PPUSH
 618: PPUSH
 619: PPUSH
 620: PPUSH
// uc_side := 5 ;
 621: LD_ADDR_OWVAR 20
 625: PUSH
 626: LD_INT 5
 628: ST_TO_ADDR
// uc_nation := 1 ;
 629: LD_ADDR_OWVAR 21
 633: PUSH
 634: LD_INT 1
 636: ST_TO_ADDR
// americanSquad := [ ] ;
 637: LD_ADDR_EXP 17
 641: PUSH
 642: EMPTY
 643: ST_TO_ADDR
// if not americanSquad then
 644: LD_EXP 17
 648: NOT
 649: IFFALSE 714
// begin for i := 1 to 4 do
 651: LD_ADDR_VAR 0 2
 655: PUSH
 656: DOUBLE
 657: LD_INT 1
 659: DEC
 660: ST_TO_ADDR
 661: LD_INT 4
 663: PUSH
 664: FOR_TO
 665: IFFALSE 710
// begin PrepareHuman ( false , rand ( 2 , 4 ) , 6 ) ;
 667: LD_INT 0
 669: PPUSH
 670: LD_INT 2
 672: PPUSH
 673: LD_INT 4
 675: PPUSH
 676: CALL_OW 12
 680: PPUSH
 681: LD_INT 6
 683: PPUSH
 684: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 688: LD_ADDR_EXP 17
 692: PUSH
 693: LD_EXP 17
 697: PPUSH
 698: CALL_OW 44
 702: PPUSH
 703: CALL 41073 0 2
 707: ST_TO_ADDR
// end ;
 708: GO 664
 710: POP
 711: POP
// end else
 712: GO 765
// begin for i in americanSquad do
 714: LD_ADDR_VAR 0 2
 718: PUSH
 719: LD_EXP 17
 723: PUSH
 724: FOR_IN
 725: IFFALSE 763
// if GetClass ( i ) in [ class_sniper , class_soldier ] then
 727: LD_VAR 0 2
 731: PPUSH
 732: CALL_OW 257
 736: PUSH
 737: LD_INT 5
 739: PUSH
 740: LD_INT 1
 742: PUSH
 743: EMPTY
 744: LIST
 745: LIST
 746: IN
 747: IFFALSE 761
// SetClass ( i , class_engineer ) ;
 749: LD_VAR 0 2
 753: PPUSH
 754: LD_INT 2
 756: PPUSH
 757: CALL_OW 336
 761: GO 724
 763: POP
 764: POP
// end ; uc_side := 2 ;
 765: LD_ADDR_OWVAR 20
 769: PUSH
 770: LD_INT 2
 772: ST_TO_ADDR
// uc_nation := 2 ;
 773: LD_ADDR_OWVAR 21
 777: PUSH
 778: LD_INT 2
 780: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 781: LD_ADDR_EXP 5
 785: PUSH
 786: LD_STRING Heike
 788: PPUSH
 789: LD_EXP 1
 793: NOT
 794: PPUSH
 795: LD_EXP 2
 799: PPUSH
 800: CALL 3605 0 3
 804: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 805: LD_ADDR_EXP 8
 809: PUSH
 810: LD_STRING Ibrahim
 812: PPUSH
 813: LD_EXP 1
 817: NOT
 818: PPUSH
 819: LD_EXP 2
 823: PPUSH
 824: CALL 3605 0 3
 828: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 829: LD_ADDR_EXP 6
 833: PUSH
 834: LD_STRING Givi
 836: PPUSH
 837: LD_EXP 1
 841: NOT
 842: PPUSH
 843: LD_EXP 2
 847: PPUSH
 848: CALL 3605 0 3
 852: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 853: LD_ADDR_EXP 9
 857: PUSH
 858: LD_STRING Kamil
 860: PPUSH
 861: LD_EXP 1
 865: NOT
 866: PPUSH
 867: LD_EXP 2
 871: PPUSH
 872: CALL 3605 0 3
 876: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 877: LD_ADDR_EXP 10
 881: PUSH
 882: LD_STRING Kaia
 884: PPUSH
 885: LD_EXP 1
 889: NOT
 890: PPUSH
 891: LD_EXP 2
 895: PPUSH
 896: CALL 3605 0 3
 900: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 901: LD_ADDR_EXP 11
 905: PUSH
 906: LD_STRING Sophia
 908: PPUSH
 909: LD_EXP 1
 913: NOT
 914: PPUSH
 915: LD_EXP 2
 919: PPUSH
 920: CALL 3605 0 3
 924: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 925: LD_ADDR_EXP 12
 929: PUSH
 930: LD_STRING Markov
 932: PPUSH
 933: LD_EXP 1
 937: NOT
 938: PPUSH
 939: LD_EXP 2
 943: PPUSH
 944: CALL 3605 0 3
 948: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 949: LD_ADDR_EXP 15
 953: PUSH
 954: LD_STRING Aviradze
 956: PPUSH
 957: LD_EXP 1
 961: NOT
 962: PPUSH
 963: LD_EXP 2
 967: PPUSH
 968: CALL 3605 0 3
 972: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 973: LD_ADDR_EXP 14
 977: PUSH
 978: LD_STRING Kurt
 980: PPUSH
 981: LD_EXP 1
 985: NOT
 986: PPUSH
 987: LD_EXP 2
 991: PPUSH
 992: CALL 3605 0 3
 996: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 997: LD_ADDR_EXP 7
1001: PUSH
1002: LD_STRING Mike
1004: PPUSH
1005: LD_EXP 1
1009: NOT
1010: PPUSH
1011: LD_EXP 2
1015: PPUSH
1016: CALL 3605 0 3
1020: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
1021: LD_ADDR_EXP 13
1025: PUSH
1026: LD_STRING Olaf
1028: PPUSH
1029: LD_EXP 1
1033: NOT
1034: PPUSH
1035: LD_EXP 2
1039: PPUSH
1040: CALL 3605 0 3
1044: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
1045: LD_ADDR_EXP 16
1049: PUSH
1050: LD_STRING 07_others
1052: PPUSH
1053: CALL_OW 31
1057: ST_TO_ADDR
// veh := [ [ ar_half_tracked , engine_combustion , control_manual , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] , ] ;
1058: LD_ADDR_VAR 0 5
1062: PUSH
1063: LD_INT 14
1065: PUSH
1066: LD_INT 1
1068: PUSH
1069: LD_INT 1
1071: PUSH
1072: LD_INT 25
1074: PUSH
1075: EMPTY
1076: LIST
1077: LIST
1078: LIST
1079: LIST
1080: PUSH
1081: LD_INT 14
1083: PUSH
1084: LD_INT 1
1086: PUSH
1087: LD_INT 1
1089: PUSH
1090: LD_INT 27
1092: PUSH
1093: EMPTY
1094: LIST
1095: LIST
1096: LIST
1097: LIST
1098: PUSH
1099: LD_INT 14
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: LD_INT 1
1107: PUSH
1108: LD_INT 27
1110: PUSH
1111: EMPTY
1112: LIST
1113: LIST
1114: LIST
1115: LIST
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: LIST
1121: ST_TO_ADDR
// for i in veh do
1122: LD_ADDR_VAR 0 2
1126: PUSH
1127: LD_VAR 0 5
1131: PUSH
1132: FOR_IN
1133: IFFALSE 1238
// begin vc_chassis := i [ 1 ] ;
1135: LD_ADDR_OWVAR 37
1139: PUSH
1140: LD_VAR 0 2
1144: PUSH
1145: LD_INT 1
1147: ARRAY
1148: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
1149: LD_ADDR_OWVAR 39
1153: PUSH
1154: LD_VAR 0 2
1158: PUSH
1159: LD_INT 2
1161: ARRAY
1162: ST_TO_ADDR
// vc_control := i [ 3 ] ;
1163: LD_ADDR_OWVAR 38
1167: PUSH
1168: LD_VAR 0 2
1172: PUSH
1173: LD_INT 3
1175: ARRAY
1176: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
1177: LD_ADDR_OWVAR 40
1181: PUSH
1182: LD_VAR 0 2
1186: PUSH
1187: LD_INT 4
1189: ARRAY
1190: ST_TO_ADDR
// vc_fuel_battery := 25 ;
1191: LD_ADDR_OWVAR 41
1195: PUSH
1196: LD_INT 25
1198: ST_TO_ADDR
// un := CreateVehicle ;
1199: LD_ADDR_VAR 0 4
1203: PUSH
1204: CALL_OW 45
1208: ST_TO_ADDR
// SetDir ( un , 0 ) ;
1209: LD_VAR 0 4
1213: PPUSH
1214: LD_INT 0
1216: PPUSH
1217: CALL_OW 233
// PlaceUnitArea ( un , heikeVehArea , false ) ;
1221: LD_VAR 0 4
1225: PPUSH
1226: LD_INT 7
1228: PPUSH
1229: LD_INT 0
1231: PPUSH
1232: CALL_OW 49
// end ;
1236: GO 1132
1238: POP
1239: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad union americanSquad ;
1240: LD_ADDR_VAR 0 3
1244: PUSH
1245: LD_EXP 7
1249: PUSH
1250: LD_EXP 8
1254: PUSH
1255: LD_EXP 9
1259: PUSH
1260: LD_EXP 10
1264: PUSH
1265: LD_EXP 11
1269: PUSH
1270: LD_EXP 12
1274: PUSH
1275: LD_EXP 13
1279: PUSH
1280: LD_EXP 14
1284: PUSH
1285: LD_EXP 15
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: PUSH
1301: LD_EXP 16
1305: UNION
1306: PUSH
1307: LD_EXP 17
1311: UNION
1312: ST_TO_ADDR
// for i in tmp do
1313: LD_ADDR_VAR 0 2
1317: PUSH
1318: LD_VAR 0 3
1322: PUSH
1323: FOR_IN
1324: IFFALSE 1444
// begin if GetClass ( i ) in [ class_mechanic , class_engineer , class_scientistic ] and FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) then
1326: LD_VAR 0 2
1330: PPUSH
1331: CALL_OW 257
1335: PUSH
1336: LD_INT 3
1338: PUSH
1339: LD_INT 2
1341: PUSH
1342: LD_INT 4
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: LIST
1349: IN
1350: PUSH
1351: LD_INT 22
1353: PUSH
1354: LD_INT 2
1356: PUSH
1357: EMPTY
1358: LIST
1359: LIST
1360: PUSH
1361: LD_INT 58
1363: PUSH
1364: EMPTY
1365: LIST
1366: PUSH
1367: EMPTY
1368: LIST
1369: LIST
1370: PPUSH
1371: CALL_OW 69
1375: AND
1376: IFFALSE 1418
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) [ 1 ] ) else
1378: LD_VAR 0 2
1382: PPUSH
1383: LD_INT 22
1385: PUSH
1386: LD_INT 2
1388: PUSH
1389: EMPTY
1390: LIST
1391: LIST
1392: PUSH
1393: LD_INT 58
1395: PUSH
1396: EMPTY
1397: LIST
1398: PUSH
1399: EMPTY
1400: LIST
1401: LIST
1402: PPUSH
1403: CALL_OW 69
1407: PUSH
1408: LD_INT 1
1410: ARRAY
1411: PPUSH
1412: CALL_OW 52
1416: GO 1433
// PlaceUnitArea ( i , heikePeopleArea , false ) ;
1418: LD_VAR 0 2
1422: PPUSH
1423: LD_INT 6
1425: PPUSH
1426: LD_INT 0
1428: PPUSH
1429: CALL_OW 49
// ComHold ( i ) ;
1433: LD_VAR 0 2
1437: PPUSH
1438: CALL_OW 140
// end ;
1442: GO 1323
1444: POP
1445: POP
// PlaceUnitArea ( Heike , heikeArea , false ) ;
1446: LD_EXP 5
1450: PPUSH
1451: LD_INT 5
1453: PPUSH
1454: LD_INT 0
1456: PPUSH
1457: CALL_OW 49
// ComTurnUnit ( Heike , ar_dep ) ;
1461: LD_EXP 5
1465: PPUSH
1466: LD_INT 2
1468: PPUSH
1469: CALL_OW 119
// if Givi then
1473: LD_EXP 6
1477: IFFALSE 1509
// begin PlaceUnitXY ( Givi , 129 , 158 , false ) ;
1479: LD_EXP 6
1483: PPUSH
1484: LD_INT 129
1486: PPUSH
1487: LD_INT 158
1489: PPUSH
1490: LD_INT 0
1492: PPUSH
1493: CALL_OW 48
// ComTurnUnit ( Givi , ar_dep ) ;
1497: LD_EXP 6
1501: PPUSH
1502: LD_INT 2
1504: PPUSH
1505: CALL_OW 119
// end ; end ; end_of_file
1509: LD_VAR 0 1
1513: RET
// export kabulAttackers , heikeAttackers , Burlak ; export function PrepareRussian ; var i , un ; begin
1514: LD_INT 0
1516: PPUSH
1517: PPUSH
1518: PPUSH
// uc_side := 3 ;
1519: LD_ADDR_OWVAR 20
1523: PUSH
1524: LD_INT 3
1526: ST_TO_ADDR
// uc_nation := 3 ;
1527: LD_ADDR_OWVAR 21
1531: PUSH
1532: LD_INT 3
1534: ST_TO_ADDR
// Burlak := NewCharacter ( Burlak ) ;
1535: LD_ADDR_EXP 20
1539: PUSH
1540: LD_STRING Burlak
1542: PPUSH
1543: CALL_OW 25
1547: ST_TO_ADDR
// kabulAttackers := [ ] ;
1548: LD_ADDR_EXP 18
1552: PUSH
1553: EMPTY
1554: ST_TO_ADDR
// heikeAttackers := [ ] ;
1555: LD_ADDR_EXP 19
1559: PUSH
1560: EMPTY
1561: ST_TO_ADDR
// for i := 1 to 9 do
1562: LD_ADDR_VAR 0 2
1566: PUSH
1567: DOUBLE
1568: LD_INT 1
1570: DEC
1571: ST_TO_ADDR
1572: LD_INT 9
1574: PUSH
1575: FOR_TO
1576: IFFALSE 1668
// begin PrepareHuman ( false , class_soldier , 0 ) ;
1578: LD_INT 0
1580: PPUSH
1581: LD_INT 1
1583: PPUSH
1584: LD_INT 0
1586: PPUSH
1587: CALL_OW 380
// un := CreateHuman ;
1591: LD_ADDR_VAR 0 3
1595: PUSH
1596: CALL_OW 44
1600: ST_TO_ADDR
// if Prob ( 40 ) then
1601: LD_INT 40
1603: PPUSH
1604: CALL_OW 13
1608: IFFALSE 1622
// SetClass ( un , class_bazooker ) ;
1610: LD_VAR 0 3
1614: PPUSH
1615: LD_INT 9
1617: PPUSH
1618: CALL_OW 336
// SetDir ( un , rand ( 0 , 5 ) ) ;
1622: LD_VAR 0 3
1626: PPUSH
1627: LD_INT 0
1629: PPUSH
1630: LD_INT 5
1632: PPUSH
1633: CALL_OW 12
1637: PPUSH
1638: CALL_OW 233
// PlaceUnitArea ( un , KabulRuDead , false ) ;
1642: LD_VAR 0 3
1646: PPUSH
1647: LD_INT 10
1649: PPUSH
1650: LD_INT 0
1652: PPUSH
1653: CALL_OW 49
// KillUnit ( un ) ;
1657: LD_VAR 0 3
1661: PPUSH
1662: CALL_OW 66
// end ;
1666: GO 1575
1668: POP
1669: POP
// for i := 1 to 9 do
1670: LD_ADDR_VAR 0 2
1674: PUSH
1675: DOUBLE
1676: LD_INT 1
1678: DEC
1679: ST_TO_ADDR
1680: LD_INT 9
1682: PUSH
1683: FOR_TO
1684: IFFALSE 1905
// begin if rand ( 0 , 1 ) then
1686: LD_INT 0
1688: PPUSH
1689: LD_INT 1
1691: PPUSH
1692: CALL_OW 12
1696: IFFALSE 1759
// begin PrepareHuman ( false , class_soldier , 7 ) ;
1698: LD_INT 0
1700: PPUSH
1701: LD_INT 1
1703: PPUSH
1704: LD_INT 7
1706: PPUSH
1707: CALL_OW 380
// un := CreateHuman ;
1711: LD_ADDR_VAR 0 3
1715: PUSH
1716: CALL_OW 44
1720: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1721: LD_VAR 0 3
1725: PPUSH
1726: LD_INT 1
1728: PPUSH
1729: CALL_OW 233
// PlaceUnitArea ( un , kabulRuArea , false ) ;
1733: LD_VAR 0 3
1737: PPUSH
1738: LD_INT 3
1740: PPUSH
1741: LD_INT 0
1743: PPUSH
1744: CALL_OW 49
// ComHold ( un ) ;
1748: LD_VAR 0 3
1752: PPUSH
1753: CALL_OW 140
// end else
1757: GO 1874
// begin vc_chassis := ru_medium_tracked ;
1759: LD_ADDR_OWVAR 37
1763: PUSH
1764: LD_INT 22
1766: ST_TO_ADDR
// vc_engine := engine_combustion ;
1767: LD_ADDR_OWVAR 39
1771: PUSH
1772: LD_INT 1
1774: ST_TO_ADDR
// vc_control := control_manual ;
1775: LD_ADDR_OWVAR 38
1779: PUSH
1780: LD_INT 1
1782: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
1783: LD_ADDR_OWVAR 40
1787: PUSH
1788: LD_INT 44
1790: PUSH
1791: LD_INT 43
1793: PUSH
1794: LD_INT 45
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: LIST
1801: PUSH
1802: LD_INT 1
1804: PPUSH
1805: LD_INT 3
1807: PPUSH
1808: CALL_OW 12
1812: ARRAY
1813: ST_TO_ADDR
// un := CreateVehicle ;
1814: LD_ADDR_VAR 0 3
1818: PUSH
1819: CALL_OW 45
1823: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1824: LD_VAR 0 3
1828: PPUSH
1829: LD_INT 1
1831: PPUSH
1832: CALL_OW 233
// PlaceUnitArea ( un , kabulRuArea , false ) ;
1836: LD_VAR 0 3
1840: PPUSH
1841: LD_INT 3
1843: PPUSH
1844: LD_INT 0
1846: PPUSH
1847: CALL_OW 49
// ComHold ( un ) ;
1851: LD_VAR 0 3
1855: PPUSH
1856: CALL_OW 140
// PlaceHumanInUnit ( CreateHuman , un ) ;
1860: CALL_OW 44
1864: PPUSH
1865: LD_VAR 0 3
1869: PPUSH
1870: CALL_OW 52
// end ; kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
1874: LD_ADDR_EXP 18
1878: PUSH
1879: LD_EXP 18
1883: PPUSH
1884: LD_EXP 18
1888: PUSH
1889: LD_INT 1
1891: PLUS
1892: PPUSH
1893: LD_VAR 0 3
1897: PPUSH
1898: CALL_OW 1
1902: ST_TO_ADDR
// end ;
1903: GO 1683
1905: POP
1906: POP
// for i := 1 to 5 do
1907: LD_ADDR_VAR 0 2
1911: PUSH
1912: DOUBLE
1913: LD_INT 1
1915: DEC
1916: ST_TO_ADDR
1917: LD_INT 5
1919: PUSH
1920: FOR_TO
1921: IFFALSE 2154
// begin if rand ( 0 , 1 ) then
1923: LD_INT 0
1925: PPUSH
1926: LD_INT 1
1928: PPUSH
1929: CALL_OW 12
1933: IFFALSE 2008
// begin PrepareHuman ( false , class_soldier , 7 ) ;
1935: LD_INT 0
1937: PPUSH
1938: LD_INT 1
1940: PPUSH
1941: LD_INT 7
1943: PPUSH
1944: CALL_OW 380
// un := CreateHuman ;
1948: LD_ADDR_VAR 0 3
1952: PUSH
1953: CALL_OW 44
1957: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1958: LD_VAR 0 3
1962: PPUSH
1963: LD_INT 1
1965: PPUSH
1966: CALL_OW 233
// SetClass ( un , class_bazooker ) ;
1970: LD_VAR 0 3
1974: PPUSH
1975: LD_INT 9
1977: PPUSH
1978: CALL_OW 336
// PlaceUnitArea ( un , kabulRu2Area , false ) ;
1982: LD_VAR 0 3
1986: PPUSH
1987: LD_INT 8
1989: PPUSH
1990: LD_INT 0
1992: PPUSH
1993: CALL_OW 49
// ComHold ( un ) ;
1997: LD_VAR 0 3
2001: PPUSH
2002: CALL_OW 140
// end else
2006: GO 2123
// begin vc_chassis := ru_heavy_wheeled ;
2008: LD_ADDR_OWVAR 37
2012: PUSH
2013: LD_INT 23
2015: ST_TO_ADDR
// vc_engine := engine_combustion ;
2016: LD_ADDR_OWVAR 39
2020: PUSH
2021: LD_INT 1
2023: ST_TO_ADDR
// vc_control := control_manual ;
2024: LD_ADDR_OWVAR 38
2028: PUSH
2029: LD_INT 1
2031: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
2032: LD_ADDR_OWVAR 40
2036: PUSH
2037: LD_INT 44
2039: PUSH
2040: LD_INT 43
2042: PUSH
2043: LD_INT 45
2045: PUSH
2046: EMPTY
2047: LIST
2048: LIST
2049: LIST
2050: PUSH
2051: LD_INT 1
2053: PPUSH
2054: LD_INT 3
2056: PPUSH
2057: CALL_OW 12
2061: ARRAY
2062: ST_TO_ADDR
// un := CreateVehicle ;
2063: LD_ADDR_VAR 0 3
2067: PUSH
2068: CALL_OW 45
2072: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2073: LD_VAR 0 3
2077: PPUSH
2078: LD_INT 4
2080: PPUSH
2081: CALL_OW 233
// PlaceUnitArea ( un , kabulRu2Area , false ) ;
2085: LD_VAR 0 3
2089: PPUSH
2090: LD_INT 8
2092: PPUSH
2093: LD_INT 0
2095: PPUSH
2096: CALL_OW 49
// ComHold ( un ) ;
2100: LD_VAR 0 3
2104: PPUSH
2105: CALL_OW 140
// PlaceHumanInUnit ( CreateHuman , un ) ;
2109: CALL_OW 44
2113: PPUSH
2114: LD_VAR 0 3
2118: PPUSH
2119: CALL_OW 52
// end ; kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
2123: LD_ADDR_EXP 18
2127: PUSH
2128: LD_EXP 18
2132: PPUSH
2133: LD_EXP 18
2137: PUSH
2138: LD_INT 1
2140: PLUS
2141: PPUSH
2142: LD_VAR 0 3
2146: PPUSH
2147: CALL_OW 1
2151: ST_TO_ADDR
// end ;
2152: GO 1920
2154: POP
2155: POP
// for i := 1 to 5 do
2156: LD_ADDR_VAR 0 2
2160: PUSH
2161: DOUBLE
2162: LD_INT 1
2164: DEC
2165: ST_TO_ADDR
2166: LD_INT 5
2168: PUSH
2169: FOR_TO
2170: IFFALSE 2274
// begin PrepareHuman ( false , class_soldier , 7 ) ;
2172: LD_INT 0
2174: PPUSH
2175: LD_INT 1
2177: PPUSH
2178: LD_INT 7
2180: PPUSH
2181: CALL_OW 380
// un := CreateHuman ;
2185: LD_ADDR_VAR 0 3
2189: PUSH
2190: CALL_OW 44
2194: ST_TO_ADDR
// SetDir ( un , 0 ) ;
2195: LD_VAR 0 3
2199: PPUSH
2200: LD_INT 0
2202: PPUSH
2203: CALL_OW 233
// SetClass ( un , class_bazooker ) ;
2207: LD_VAR 0 3
2211: PPUSH
2212: LD_INT 9
2214: PPUSH
2215: CALL_OW 336
// PlaceUnitArea ( un , kabulRu3Area , false ) ;
2219: LD_VAR 0 3
2223: PPUSH
2224: LD_INT 9
2226: PPUSH
2227: LD_INT 0
2229: PPUSH
2230: CALL_OW 49
// ComHold ( un ) ;
2234: LD_VAR 0 3
2238: PPUSH
2239: CALL_OW 140
// kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
2243: LD_ADDR_EXP 18
2247: PUSH
2248: LD_EXP 18
2252: PPUSH
2253: LD_EXP 18
2257: PUSH
2258: LD_INT 1
2260: PLUS
2261: PPUSH
2262: LD_VAR 0 3
2266: PPUSH
2267: CALL_OW 1
2271: ST_TO_ADDR
// end ;
2272: GO 2169
2274: POP
2275: POP
// for i := 1 to 12 do
2276: LD_ADDR_VAR 0 2
2280: PUSH
2281: DOUBLE
2282: LD_INT 1
2284: DEC
2285: ST_TO_ADDR
2286: LD_INT 12
2288: PUSH
2289: FOR_TO
2290: IFFALSE 2541
// begin if Prob ( 22 ) then
2292: LD_INT 22
2294: PPUSH
2295: CALL_OW 13
2299: IFFALSE 2362
// begin PrepareHuman ( false , class_soldier , 10 ) ;
2301: LD_INT 0
2303: PPUSH
2304: LD_INT 1
2306: PPUSH
2307: LD_INT 10
2309: PPUSH
2310: CALL_OW 380
// un := CreateHuman ;
2314: LD_ADDR_VAR 0 3
2318: PUSH
2319: CALL_OW 44
2323: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2324: LD_VAR 0 3
2328: PPUSH
2329: LD_INT 3
2331: PPUSH
2332: CALL_OW 233
// PlaceUnitArea ( un , heikeRuArea , false ) ;
2336: LD_VAR 0 3
2340: PPUSH
2341: LD_INT 4
2343: PPUSH
2344: LD_INT 0
2346: PPUSH
2347: CALL_OW 49
// ComHold ( un ) ;
2351: LD_VAR 0 3
2355: PPUSH
2356: CALL_OW 140
// end else
2360: GO 2510
// begin vc_chassis := [ ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] ;
2362: LD_ADDR_OWVAR 37
2366: PUSH
2367: LD_INT 22
2369: PUSH
2370: LD_INT 24
2372: PUSH
2373: EMPTY
2374: LIST
2375: LIST
2376: PUSH
2377: LD_INT 1
2379: PPUSH
2380: LD_INT 2
2382: PPUSH
2383: CALL_OW 12
2387: ARRAY
2388: ST_TO_ADDR
// vc_engine := engine_combustion ;
2389: LD_ADDR_OWVAR 39
2393: PUSH
2394: LD_INT 1
2396: ST_TO_ADDR
// vc_control := control_manual ;
2397: LD_ADDR_OWVAR 38
2401: PUSH
2402: LD_INT 1
2404: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 4 ) ] ;
2405: LD_ADDR_OWVAR 40
2409: PUSH
2410: LD_INT 44
2412: PUSH
2413: LD_INT 43
2415: PUSH
2416: LD_INT 43
2418: PUSH
2419: LD_INT 45
2421: PUSH
2422: EMPTY
2423: LIST
2424: LIST
2425: LIST
2426: LIST
2427: PUSH
2428: LD_INT 1
2430: PPUSH
2431: LD_INT 4
2433: PPUSH
2434: CALL_OW 12
2438: ARRAY
2439: ST_TO_ADDR
// un := CreateVehicle ;
2440: LD_ADDR_VAR 0 3
2444: PUSH
2445: CALL_OW 45
2449: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2450: LD_VAR 0 3
2454: PPUSH
2455: LD_INT 3
2457: PPUSH
2458: CALL_OW 233
// PlaceUnitArea ( un , heikeRuArea , false ) ;
2462: LD_VAR 0 3
2466: PPUSH
2467: LD_INT 4
2469: PPUSH
2470: LD_INT 0
2472: PPUSH
2473: CALL_OW 49
// ComHold ( un ) ;
2477: LD_VAR 0 3
2481: PPUSH
2482: CALL_OW 140
// PrepareMechanic ( false , 10 ) ;
2486: LD_INT 0
2488: PPUSH
2489: LD_INT 10
2491: PPUSH
2492: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
2496: CALL_OW 44
2500: PPUSH
2501: LD_VAR 0 3
2505: PPUSH
2506: CALL_OW 52
// end ; heikeAttackers := Replace ( heikeAttackers , heikeAttackers + 1 , un ) ;
2510: LD_ADDR_EXP 19
2514: PUSH
2515: LD_EXP 19
2519: PPUSH
2520: LD_EXP 19
2524: PUSH
2525: LD_INT 1
2527: PLUS
2528: PPUSH
2529: LD_VAR 0 3
2533: PPUSH
2534: CALL_OW 1
2538: ST_TO_ADDR
// end ;
2539: GO 2289
2541: POP
2542: POP
// end ;
2543: LD_VAR 0 1
2547: RET
// every 0 0$2 trigger startAttackOnKabul and kabulAttackers do var i ;
2548: LD_EXP 3
2552: PUSH
2553: LD_EXP 18
2557: AND
2558: IFFALSE 2618
2560: GO 2562
2562: DISABLE
2563: LD_INT 0
2565: PPUSH
// begin enable ;
2566: ENABLE
// for i in kabulAttackers do
2567: LD_ADDR_VAR 0 1
2571: PUSH
2572: LD_EXP 18
2576: PUSH
2577: FOR_IN
2578: IFFALSE 2616
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 5 ] ) , i ) ) ;
2580: LD_VAR 0 1
2584: PPUSH
2585: LD_INT 22
2587: PUSH
2588: LD_INT 5
2590: PUSH
2591: EMPTY
2592: LIST
2593: LIST
2594: PPUSH
2595: CALL_OW 69
2599: PPUSH
2600: LD_VAR 0 1
2604: PPUSH
2605: CALL_OW 74
2609: PPUSH
2610: CALL_OW 115
2614: GO 2577
2616: POP
2617: POP
// end ;
2618: PPOPN 1
2620: END
// every 0 0$1 trigger startAttackOnHeike and heikeAttackers do var i ;
2621: LD_EXP 4
2625: PUSH
2626: LD_EXP 19
2630: AND
2631: IFFALSE 2691
2633: GO 2635
2635: DISABLE
2636: LD_INT 0
2638: PPUSH
// begin enable ;
2639: ENABLE
// for i in heikeAttackers do
2640: LD_ADDR_VAR 0 1
2644: PUSH
2645: LD_EXP 19
2649: PUSH
2650: FOR_IN
2651: IFFALSE 2689
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ) ;
2653: LD_VAR 0 1
2657: PPUSH
2658: LD_INT 22
2660: PUSH
2661: LD_INT 2
2663: PUSH
2664: EMPTY
2665: LIST
2666: LIST
2667: PPUSH
2668: CALL_OW 69
2672: PPUSH
2673: LD_VAR 0 1
2677: PPUSH
2678: CALL_OW 74
2682: PPUSH
2683: CALL_OW 115
2687: GO 2650
2689: POP
2690: POP
// end ; end_of_file
2691: PPOPN 1
2693: END
// export function Action ; var i ; begin
2694: LD_INT 0
2696: PPUSH
2697: PPUSH
// Video ( true ) ;
2698: LD_INT 1
2700: PPUSH
2701: CALL 41045 0 1
// PlaceSeeing ( 111 , 168 , 2 , - 25 ) ;
2705: LD_INT 111
2707: PPUSH
2708: LD_INT 168
2710: PPUSH
2711: LD_INT 2
2713: PPUSH
2714: LD_INT 25
2716: NEG
2717: PPUSH
2718: CALL_OW 330
// PlaceSeeing ( 102 , 47 , 2 , - 40 ) ;
2722: LD_INT 102
2724: PPUSH
2725: LD_INT 47
2727: PPUSH
2728: LD_INT 2
2730: PPUSH
2731: LD_INT 40
2733: NEG
2734: PPUSH
2735: CALL_OW 330
// CenterNowOnUnits ( Heike ) ;
2739: LD_EXP 5
2743: PPUSH
2744: CALL_OW 87
// startAttackOnKabul := true ;
2748: LD_ADDR_EXP 3
2752: PUSH
2753: LD_INT 1
2755: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2756: LD_INT 70
2758: PPUSH
2759: CALL_OW 67
// CenterOnXY ( 102 , 47 ) ;
2763: LD_INT 102
2765: PPUSH
2766: LD_INT 47
2768: PPUSH
2769: CALL_OW 84
// if Givi then
2773: LD_EXP 6
2777: IFFALSE 2968
// begin ComMoveXY ( Givi , 113 , 162 ) ;
2779: LD_EXP 6
2783: PPUSH
2784: LD_INT 113
2786: PPUSH
2787: LD_INT 162
2789: PPUSH
2790: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
2794: LD_EXP 6
2798: PPUSH
2799: LD_EXP 5
2803: PPUSH
2804: CALL_OW 179
// Say ( Givi , DG-Intro-1 ) ;
2808: LD_EXP 6
2812: PPUSH
2813: LD_STRING DG-Intro-1
2815: PPUSH
2816: CALL_OW 88
// Say ( Givi , DG-Intro-2 ) ;
2820: LD_EXP 6
2824: PPUSH
2825: LD_STRING DG-Intro-2
2827: PPUSH
2828: CALL_OW 88
// CenterOnUnits ( Heike ) ;
2832: LD_EXP 5
2836: PPUSH
2837: CALL_OW 85
// RemoveSeeing ( 102 , 47 , 2 ) ;
2841: LD_INT 102
2843: PPUSH
2844: LD_INT 47
2846: PPUSH
2847: LD_INT 2
2849: PPUSH
2850: CALL_OW 331
// wait ( 0 0$0.3 ) ;
2854: LD_INT 10
2856: PPUSH
2857: CALL_OW 67
// Say ( Heike , DH-Intro-3 ) ;
2861: LD_EXP 5
2865: PPUSH
2866: LD_STRING DH-Intro-3
2868: PPUSH
2869: CALL_OW 88
// if Mike then
2873: LD_EXP 7
2877: IFFALSE 2966
// begin PlaceSeeing ( 92 , 129 , 2 , - 18 ) ;
2879: LD_INT 92
2881: PPUSH
2882: LD_INT 129
2884: PPUSH
2885: LD_INT 2
2887: PPUSH
2888: LD_INT 18
2890: NEG
2891: PPUSH
2892: CALL_OW 330
// CenterOnXY ( 92 , 129 ) ;
2896: LD_INT 92
2898: PPUSH
2899: LD_INT 129
2901: PPUSH
2902: CALL_OW 84
// ComTurnUnit ( [ Mike , Kaia ] , Heike ) ;
2906: LD_EXP 7
2910: PUSH
2911: LD_EXP 10
2915: PUSH
2916: EMPTY
2917: LIST
2918: LIST
2919: PPUSH
2920: LD_EXP 5
2924: PPUSH
2925: CALL_OW 119
// Say ( Mike , DM-Intro-4 ) ;
2929: LD_EXP 7
2933: PPUSH
2934: LD_STRING DM-Intro-4
2936: PPUSH
2937: CALL_OW 88
// Say ( Kaia , DK-Intro-5 ) ;
2941: LD_EXP 10
2945: PPUSH
2946: LD_STRING DK-Intro-5
2948: PPUSH
2949: CALL_OW 88
// RemoveSeeing ( 92 , 129 , 2 ) ;
2953: LD_INT 92
2955: PPUSH
2956: LD_INT 129
2958: PPUSH
2959: LD_INT 2
2961: PPUSH
2962: CALL_OW 331
// end ; end else
2966: GO 3221
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-1 ) then
2968: LD_EXP 16
2972: PPUSH
2973: LD_INT 26
2975: PUSH
2976: LD_INT 1
2978: PUSH
2979: EMPTY
2980: LIST
2981: LIST
2982: PPUSH
2983: CALL_OW 72
2987: PUSH
2988: LD_INT 1
2990: ARRAY
2991: PPUSH
2992: LD_STRING DArm-Intro-b-1
2994: PPUSH
2995: CALL_OW 88
2999: NOT
3000: IFFALSE 3033
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-1 ) ;
3002: LD_EXP 16
3006: PPUSH
3007: LD_INT 26
3009: PUSH
3010: LD_INT 2
3012: PUSH
3013: EMPTY
3014: LIST
3015: LIST
3016: PPUSH
3017: CALL_OW 72
3021: PUSH
3022: LD_INT 1
3024: ARRAY
3025: PPUSH
3026: LD_STRING DArf-Intro-b-1
3028: PPUSH
3029: CALL_OW 88
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-2 ) then
3033: LD_EXP 16
3037: PPUSH
3038: LD_INT 26
3040: PUSH
3041: LD_INT 1
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PPUSH
3048: CALL_OW 72
3052: PUSH
3053: LD_INT 1
3055: ARRAY
3056: PPUSH
3057: LD_STRING DArm-Intro-b-2
3059: PPUSH
3060: CALL_OW 88
3064: NOT
3065: IFFALSE 3098
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-2 ) ;
3067: LD_EXP 16
3071: PPUSH
3072: LD_INT 26
3074: PUSH
3075: LD_INT 2
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: PPUSH
3082: CALL_OW 72
3086: PUSH
3087: LD_INT 1
3089: ARRAY
3090: PPUSH
3091: LD_STRING DArf-Intro-b-2
3093: PPUSH
3094: CALL_OW 88
// if Kaia then
3098: LD_EXP 10
3102: IFFALSE 3116
// Say ( Kaia , DK-Intro-5 ) ;
3104: LD_EXP 10
3108: PPUSH
3109: LD_STRING DK-Intro-5
3111: PPUSH
3112: CALL_OW 88
// PlaceSeeing ( 92 , 129 , 2 , - 18 ) ;
3116: LD_INT 92
3118: PPUSH
3119: LD_INT 129
3121: PPUSH
3122: LD_INT 2
3124: PPUSH
3125: LD_INT 18
3127: NEG
3128: PPUSH
3129: CALL_OW 330
// CenterOnXY ( 92 , 129 ) ;
3133: LD_INT 92
3135: PPUSH
3136: LD_INT 129
3138: PPUSH
3139: CALL_OW 84
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-4 ) then
3143: LD_EXP 16
3147: PPUSH
3148: LD_INT 26
3150: PUSH
3151: LD_INT 1
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: PPUSH
3158: CALL_OW 72
3162: PUSH
3163: LD_INT 1
3165: ARRAY
3166: PPUSH
3167: LD_STRING DArm-Intro-b-4
3169: PPUSH
3170: CALL_OW 88
3174: NOT
3175: IFFALSE 3208
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-4 ) ;
3177: LD_EXP 16
3181: PPUSH
3182: LD_INT 26
3184: PUSH
3185: LD_INT 2
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PPUSH
3192: CALL_OW 72
3196: PUSH
3197: LD_INT 1
3199: ARRAY
3200: PPUSH
3201: LD_STRING DArf-Intro-b-4
3203: PPUSH
3204: CALL_OW 88
// RemoveSeeing ( 92 , 129 , 2 ) ;
3208: LD_INT 92
3210: PPUSH
3211: LD_INT 129
3213: PPUSH
3214: LD_INT 2
3216: PPUSH
3217: CALL_OW 331
// end ; CenterOnUnits ( Heike ) ;
3221: LD_EXP 5
3225: PPUSH
3226: CALL_OW 85
// SayRadio ( Burlak , DB-Intro-6 ) ;
3230: LD_EXP 20
3234: PPUSH
3235: LD_STRING DB-Intro-6
3237: PPUSH
3238: CALL_OW 94
// Say ( Heike , DH-Intro-7 ) ;
3242: LD_EXP 5
3246: PPUSH
3247: LD_STRING DH-Intro-7
3249: PPUSH
3250: CALL_OW 88
// SayRadio ( Burlak , DB-Intro-8 ) ;
3254: LD_EXP 20
3258: PPUSH
3259: LD_STRING DB-Intro-8
3261: PPUSH
3262: CALL_OW 94
// SayRadio ( Burlak , DB-Intro-9 ) ;
3266: LD_EXP 20
3270: PPUSH
3271: LD_STRING DB-Intro-9
3273: PPUSH
3274: CALL_OW 94
// if Givi then
3278: LD_EXP 6
3282: IFFALSE 3310
// begin Say ( Givi , DG-Intro-10 ) ;
3284: LD_EXP 6
3288: PPUSH
3289: LD_STRING DG-Intro-10
3291: PPUSH
3292: CALL_OW 88
// Say ( Kaia , DK-Intro-11 ) ;
3296: LD_EXP 10
3300: PPUSH
3301: LD_STRING DK-Intro-11
3303: PPUSH
3304: CALL_OW 88
// end else
3308: GO 3375
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-10 ) then
3310: LD_EXP 16
3314: PPUSH
3315: LD_INT 26
3317: PUSH
3318: LD_INT 1
3320: PUSH
3321: EMPTY
3322: LIST
3323: LIST
3324: PPUSH
3325: CALL_OW 72
3329: PUSH
3330: LD_INT 1
3332: ARRAY
3333: PPUSH
3334: LD_STRING DArm-Intro-b-10
3336: PPUSH
3337: CALL_OW 88
3341: NOT
3342: IFFALSE 3375
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-10 ) ;
3344: LD_EXP 16
3348: PPUSH
3349: LD_INT 26
3351: PUSH
3352: LD_INT 2
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PPUSH
3359: CALL_OW 72
3363: PUSH
3364: LD_INT 1
3366: ARRAY
3367: PPUSH
3368: LD_STRING DArf-Intro-b-10
3370: PPUSH
3371: CALL_OW 88
// Say ( Mike , DM-Intro-12 ) ;
3375: LD_EXP 7
3379: PPUSH
3380: LD_STRING DM-Intro-12
3382: PPUSH
3383: CALL_OW 88
// Say ( Kurt , DKs-Intro-13 ) ;
3387: LD_EXP 14
3391: PPUSH
3392: LD_STRING DKs-Intro-13
3394: PPUSH
3395: CALL_OW 88
// Say ( Kamil , DKam-Intro-14 ) ;
3399: LD_EXP 9
3403: PPUSH
3404: LD_STRING DKam-Intro-14
3406: PPUSH
3407: CALL_OW 88
// case Query ( QSurrender ) of 1 :
3411: LD_STRING QSurrender
3413: PPUSH
3414: CALL_OW 97
3418: PUSH
3419: LD_INT 1
3421: DOUBLE
3422: EQUAL
3423: IFTRUE 3427
3425: GO 3446
3427: POP
// begin Say ( Heike , DH-Intro-16 ) ;
3428: LD_EXP 5
3432: PPUSH
3433: LD_STRING DH-Intro-16
3435: PPUSH
3436: CALL_OW 88
// missionEnd ;
3440: CALL 3587 0 0
// end ; 2 :
3444: GO 3490
3446: LD_INT 2
3448: DOUBLE
3449: EQUAL
3450: IFTRUE 3454
3452: GO 3489
3454: POP
// begin Say ( Heike , DH-Intro-a-16 ) ;
3455: LD_EXP 5
3459: PPUSH
3460: LD_STRING DH-Intro-a-16
3462: PPUSH
3463: CALL_OW 88
// SayRadio ( Burlak , DB-Intro-a-17 ) ;
3467: LD_EXP 20
3471: PPUSH
3472: LD_STRING DB-Intro-a-17
3474: PPUSH
3475: CALL_OW 94
// startAttackOnHeike := true ;
3479: LD_ADDR_EXP 4
3483: PUSH
3484: LD_INT 1
3486: ST_TO_ADDR
// end ; end ;
3487: GO 3490
3489: POP
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
3490: LD_ADDR_VAR 0 2
3494: PUSH
3495: LD_INT 22
3497: PUSH
3498: LD_INT 2
3500: PUSH
3501: EMPTY
3502: LIST
3503: LIST
3504: PPUSH
3505: CALL_OW 69
3509: PUSH
3510: FOR_IN
3511: IFFALSE 3530
// ComAgressiveMove ( i , 98 , 143 ) ;
3513: LD_VAR 0 2
3517: PPUSH
3518: LD_INT 98
3520: PPUSH
3521: LD_INT 143
3523: PPUSH
3524: CALL_OW 114
3528: GO 3510
3530: POP
3531: POP
// ComAgressiveMove ( Heike , 84 , 116 ) ;
3532: LD_EXP 5
3536: PPUSH
3537: LD_INT 84
3539: PPUSH
3540: LD_INT 116
3542: PPUSH
3543: CALL_OW 114
// CenterOnXY ( 98 , 143 ) ;
3547: LD_INT 98
3549: PPUSH
3550: LD_INT 143
3552: PPUSH
3553: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
3557: LD_INT 35
3559: PPUSH
3560: CALL_OW 67
// until IsDead ( Heike ) ;
3564: LD_EXP 5
3568: PPUSH
3569: CALL_OW 301
3573: IFFALSE 3557
// YouLost ( HeikeNoSurrender ) ;
3575: LD_STRING HeikeNoSurrender
3577: PPUSH
3578: CALL_OW 104
// end ;
3582: LD_VAR 0 1
3586: RET
// function MissionEnd ( ) ; begin
3587: LD_INT 0
3589: PPUSH
// ChangeMap ( 1 , %_cont ) ;
3590: LD_INT 1
3592: PPUSH
3593: LD_STRING %_cont
3595: PPUSH
3596: CALL_OW 340
// end ; end_of_file
3600: LD_VAR 0 1
3604: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
3605: LD_INT 0
3607: PPUSH
3608: PPUSH
// if exist_mode then
3609: LD_VAR 0 2
3613: IFFALSE 3638
// unit := CreateCharacter ( prefix & ident ) else
3615: LD_ADDR_VAR 0 5
3619: PUSH
3620: LD_VAR 0 3
3624: PUSH
3625: LD_VAR 0 1
3629: STR
3630: PPUSH
3631: CALL_OW 34
3635: ST_TO_ADDR
3636: GO 3653
// unit := NewCharacter ( ident ) ;
3638: LD_ADDR_VAR 0 5
3642: PUSH
3643: LD_VAR 0 1
3647: PPUSH
3648: CALL_OW 25
3652: ST_TO_ADDR
// result := unit ;
3653: LD_ADDR_VAR 0 4
3657: PUSH
3658: LD_VAR 0 5
3662: ST_TO_ADDR
// end ;
3663: LD_VAR 0 4
3667: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3668: LD_INT 0
3670: PPUSH
3671: PPUSH
// if not side or not nation then
3672: LD_VAR 0 1
3676: NOT
3677: PUSH
3678: LD_VAR 0 2
3682: NOT
3683: OR
3684: IFFALSE 3688
// exit ;
3686: GO 4456
// case nation of nation_american :
3688: LD_VAR 0 2
3692: PUSH
3693: LD_INT 1
3695: DOUBLE
3696: EQUAL
3697: IFTRUE 3701
3699: GO 3915
3701: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
3702: LD_ADDR_VAR 0 4
3706: PUSH
3707: LD_INT 35
3709: PUSH
3710: LD_INT 45
3712: PUSH
3713: LD_INT 46
3715: PUSH
3716: LD_INT 47
3718: PUSH
3719: LD_INT 82
3721: PUSH
3722: LD_INT 83
3724: PUSH
3725: LD_INT 84
3727: PUSH
3728: LD_INT 85
3730: PUSH
3731: LD_INT 86
3733: PUSH
3734: LD_INT 1
3736: PUSH
3737: LD_INT 2
3739: PUSH
3740: LD_INT 6
3742: PUSH
3743: LD_INT 15
3745: PUSH
3746: LD_INT 16
3748: PUSH
3749: LD_INT 7
3751: PUSH
3752: LD_INT 12
3754: PUSH
3755: LD_INT 13
3757: PUSH
3758: LD_INT 10
3760: PUSH
3761: LD_INT 14
3763: PUSH
3764: LD_INT 20
3766: PUSH
3767: LD_INT 21
3769: PUSH
3770: LD_INT 22
3772: PUSH
3773: LD_INT 25
3775: PUSH
3776: LD_INT 32
3778: PUSH
3779: LD_INT 27
3781: PUSH
3782: LD_INT 36
3784: PUSH
3785: LD_INT 69
3787: PUSH
3788: LD_INT 39
3790: PUSH
3791: LD_INT 34
3793: PUSH
3794: LD_INT 40
3796: PUSH
3797: LD_INT 48
3799: PUSH
3800: LD_INT 49
3802: PUSH
3803: LD_INT 50
3805: PUSH
3806: LD_INT 51
3808: PUSH
3809: LD_INT 52
3811: PUSH
3812: LD_INT 53
3814: PUSH
3815: LD_INT 54
3817: PUSH
3818: LD_INT 55
3820: PUSH
3821: LD_INT 56
3823: PUSH
3824: LD_INT 57
3826: PUSH
3827: LD_INT 58
3829: PUSH
3830: LD_INT 59
3832: PUSH
3833: LD_INT 60
3835: PUSH
3836: LD_INT 61
3838: PUSH
3839: LD_INT 62
3841: PUSH
3842: LD_INT 80
3844: PUSH
3845: LD_INT 82
3847: PUSH
3848: LD_INT 83
3850: PUSH
3851: LD_INT 84
3853: PUSH
3854: LD_INT 85
3856: PUSH
3857: LD_INT 86
3859: PUSH
3860: EMPTY
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: LIST
3866: LIST
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: LIST
3882: LIST
3883: LIST
3884: LIST
3885: LIST
3886: LIST
3887: LIST
3888: LIST
3889: LIST
3890: LIST
3891: LIST
3892: LIST
3893: LIST
3894: LIST
3895: LIST
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: LIST
3901: LIST
3902: LIST
3903: LIST
3904: LIST
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: ST_TO_ADDR
3913: GO 4380
3915: LD_INT 2
3917: DOUBLE
3918: EQUAL
3919: IFTRUE 3923
3921: GO 4149
3923: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3924: LD_ADDR_VAR 0 4
3928: PUSH
3929: LD_INT 35
3931: PUSH
3932: LD_INT 45
3934: PUSH
3935: LD_INT 46
3937: PUSH
3938: LD_INT 47
3940: PUSH
3941: LD_INT 82
3943: PUSH
3944: LD_INT 83
3946: PUSH
3947: LD_INT 84
3949: PUSH
3950: LD_INT 85
3952: PUSH
3953: LD_INT 87
3955: PUSH
3956: LD_INT 70
3958: PUSH
3959: LD_INT 1
3961: PUSH
3962: LD_INT 11
3964: PUSH
3965: LD_INT 3
3967: PUSH
3968: LD_INT 4
3970: PUSH
3971: LD_INT 5
3973: PUSH
3974: LD_INT 6
3976: PUSH
3977: LD_INT 15
3979: PUSH
3980: LD_INT 18
3982: PUSH
3983: LD_INT 7
3985: PUSH
3986: LD_INT 17
3988: PUSH
3989: LD_INT 8
3991: PUSH
3992: LD_INT 20
3994: PUSH
3995: LD_INT 21
3997: PUSH
3998: LD_INT 22
4000: PUSH
4001: LD_INT 72
4003: PUSH
4004: LD_INT 26
4006: PUSH
4007: LD_INT 69
4009: PUSH
4010: LD_INT 39
4012: PUSH
4013: LD_INT 40
4015: PUSH
4016: LD_INT 41
4018: PUSH
4019: LD_INT 42
4021: PUSH
4022: LD_INT 43
4024: PUSH
4025: LD_INT 48
4027: PUSH
4028: LD_INT 49
4030: PUSH
4031: LD_INT 50
4033: PUSH
4034: LD_INT 51
4036: PUSH
4037: LD_INT 52
4039: PUSH
4040: LD_INT 53
4042: PUSH
4043: LD_INT 54
4045: PUSH
4046: LD_INT 55
4048: PUSH
4049: LD_INT 56
4051: PUSH
4052: LD_INT 60
4054: PUSH
4055: LD_INT 61
4057: PUSH
4058: LD_INT 62
4060: PUSH
4061: LD_INT 66
4063: PUSH
4064: LD_INT 67
4066: PUSH
4067: LD_INT 68
4069: PUSH
4070: LD_INT 81
4072: PUSH
4073: LD_INT 82
4075: PUSH
4076: LD_INT 83
4078: PUSH
4079: LD_INT 84
4081: PUSH
4082: LD_INT 85
4084: PUSH
4085: LD_INT 87
4087: PUSH
4088: LD_INT 88
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: LIST
4097: LIST
4098: LIST
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: LIST
4104: LIST
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: LIST
4110: LIST
4111: LIST
4112: LIST
4113: LIST
4114: LIST
4115: LIST
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: LIST
4121: LIST
4122: LIST
4123: LIST
4124: LIST
4125: LIST
4126: LIST
4127: LIST
4128: LIST
4129: LIST
4130: LIST
4131: LIST
4132: LIST
4133: LIST
4134: LIST
4135: LIST
4136: LIST
4137: LIST
4138: LIST
4139: LIST
4140: LIST
4141: LIST
4142: LIST
4143: LIST
4144: LIST
4145: LIST
4146: ST_TO_ADDR
4147: GO 4380
4149: LD_INT 3
4151: DOUBLE
4152: EQUAL
4153: IFTRUE 4157
4155: GO 4379
4157: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
4158: LD_ADDR_VAR 0 4
4162: PUSH
4163: LD_INT 46
4165: PUSH
4166: LD_INT 47
4168: PUSH
4169: LD_INT 1
4171: PUSH
4172: LD_INT 2
4174: PUSH
4175: LD_INT 82
4177: PUSH
4178: LD_INT 83
4180: PUSH
4181: LD_INT 84
4183: PUSH
4184: LD_INT 85
4186: PUSH
4187: LD_INT 86
4189: PUSH
4190: LD_INT 11
4192: PUSH
4193: LD_INT 9
4195: PUSH
4196: LD_INT 20
4198: PUSH
4199: LD_INT 19
4201: PUSH
4202: LD_INT 21
4204: PUSH
4205: LD_INT 24
4207: PUSH
4208: LD_INT 22
4210: PUSH
4211: LD_INT 25
4213: PUSH
4214: LD_INT 28
4216: PUSH
4217: LD_INT 29
4219: PUSH
4220: LD_INT 30
4222: PUSH
4223: LD_INT 31
4225: PUSH
4226: LD_INT 37
4228: PUSH
4229: LD_INT 38
4231: PUSH
4232: LD_INT 32
4234: PUSH
4235: LD_INT 27
4237: PUSH
4238: LD_INT 33
4240: PUSH
4241: LD_INT 69
4243: PUSH
4244: LD_INT 39
4246: PUSH
4247: LD_INT 34
4249: PUSH
4250: LD_INT 40
4252: PUSH
4253: LD_INT 71
4255: PUSH
4256: LD_INT 23
4258: PUSH
4259: LD_INT 44
4261: PUSH
4262: LD_INT 48
4264: PUSH
4265: LD_INT 49
4267: PUSH
4268: LD_INT 50
4270: PUSH
4271: LD_INT 51
4273: PUSH
4274: LD_INT 52
4276: PUSH
4277: LD_INT 53
4279: PUSH
4280: LD_INT 54
4282: PUSH
4283: LD_INT 55
4285: PUSH
4286: LD_INT 56
4288: PUSH
4289: LD_INT 57
4291: PUSH
4292: LD_INT 58
4294: PUSH
4295: LD_INT 59
4297: PUSH
4298: LD_INT 63
4300: PUSH
4301: LD_INT 64
4303: PUSH
4304: LD_INT 65
4306: PUSH
4307: LD_INT 82
4309: PUSH
4310: LD_INT 83
4312: PUSH
4313: LD_INT 84
4315: PUSH
4316: LD_INT 85
4318: PUSH
4319: LD_INT 86
4321: PUSH
4322: EMPTY
4323: LIST
4324: LIST
4325: LIST
4326: LIST
4327: LIST
4328: LIST
4329: LIST
4330: LIST
4331: LIST
4332: LIST
4333: LIST
4334: LIST
4335: LIST
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: LIST
4348: LIST
4349: LIST
4350: LIST
4351: LIST
4352: LIST
4353: LIST
4354: LIST
4355: LIST
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: LIST
4374: LIST
4375: LIST
4376: ST_TO_ADDR
4377: GO 4380
4379: POP
// if state > - 1 and state < 3 then
4380: LD_VAR 0 3
4384: PUSH
4385: LD_INT 1
4387: NEG
4388: GREATER
4389: PUSH
4390: LD_VAR 0 3
4394: PUSH
4395: LD_INT 3
4397: LESS
4398: AND
4399: IFFALSE 4456
// for i in result do
4401: LD_ADDR_VAR 0 5
4405: PUSH
4406: LD_VAR 0 4
4410: PUSH
4411: FOR_IN
4412: IFFALSE 4454
// if GetTech ( i , side ) <> state then
4414: LD_VAR 0 5
4418: PPUSH
4419: LD_VAR 0 1
4423: PPUSH
4424: CALL_OW 321
4428: PUSH
4429: LD_VAR 0 3
4433: NONEQUAL
4434: IFFALSE 4452
// result := result diff i ;
4436: LD_ADDR_VAR 0 4
4440: PUSH
4441: LD_VAR 0 4
4445: PUSH
4446: LD_VAR 0 5
4450: DIFF
4451: ST_TO_ADDR
4452: GO 4411
4454: POP
4455: POP
// end ;
4456: LD_VAR 0 4
4460: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
4461: LD_INT 0
4463: PPUSH
4464: PPUSH
4465: PPUSH
// result := true ;
4466: LD_ADDR_VAR 0 3
4470: PUSH
4471: LD_INT 1
4473: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
4474: LD_ADDR_VAR 0 5
4478: PUSH
4479: LD_VAR 0 2
4483: PPUSH
4484: CALL_OW 480
4488: ST_TO_ADDR
// if not tmp then
4489: LD_VAR 0 5
4493: NOT
4494: IFFALSE 4498
// exit ;
4496: GO 4547
// for i in tmp do
4498: LD_ADDR_VAR 0 4
4502: PUSH
4503: LD_VAR 0 5
4507: PUSH
4508: FOR_IN
4509: IFFALSE 4545
// if GetTech ( i , side ) <> state_researched then
4511: LD_VAR 0 4
4515: PPUSH
4516: LD_VAR 0 1
4520: PPUSH
4521: CALL_OW 321
4525: PUSH
4526: LD_INT 2
4528: NONEQUAL
4529: IFFALSE 4543
// begin result := false ;
4531: LD_ADDR_VAR 0 3
4535: PUSH
4536: LD_INT 0
4538: ST_TO_ADDR
// exit ;
4539: POP
4540: POP
4541: GO 4547
// end ;
4543: GO 4508
4545: POP
4546: POP
// end ;
4547: LD_VAR 0 3
4551: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
4552: LD_INT 0
4554: PPUSH
4555: PPUSH
4556: PPUSH
4557: PPUSH
4558: PPUSH
4559: PPUSH
4560: PPUSH
4561: PPUSH
4562: PPUSH
4563: PPUSH
4564: PPUSH
4565: PPUSH
4566: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
4567: LD_VAR 0 1
4571: NOT
4572: PUSH
4573: LD_VAR 0 1
4577: PPUSH
4578: CALL_OW 257
4582: PUSH
4583: LD_INT 9
4585: NONEQUAL
4586: OR
4587: IFFALSE 4591
// exit ;
4589: GO 5164
// side := GetSide ( unit ) ;
4591: LD_ADDR_VAR 0 9
4595: PUSH
4596: LD_VAR 0 1
4600: PPUSH
4601: CALL_OW 255
4605: ST_TO_ADDR
// tech_space := tech_spacanom ;
4606: LD_ADDR_VAR 0 12
4610: PUSH
4611: LD_INT 29
4613: ST_TO_ADDR
// tech_time := tech_taurad ;
4614: LD_ADDR_VAR 0 13
4618: PUSH
4619: LD_INT 28
4621: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4622: LD_ADDR_VAR 0 11
4626: PUSH
4627: LD_VAR 0 1
4631: PPUSH
4632: CALL_OW 310
4636: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4637: LD_VAR 0 11
4641: PPUSH
4642: CALL_OW 247
4646: PUSH
4647: LD_INT 2
4649: EQUAL
4650: IFFALSE 4654
// exit ;
4652: GO 5164
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4654: LD_ADDR_VAR 0 8
4658: PUSH
4659: LD_INT 81
4661: PUSH
4662: LD_VAR 0 9
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PUSH
4671: LD_INT 3
4673: PUSH
4674: LD_INT 21
4676: PUSH
4677: LD_INT 3
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PUSH
4684: EMPTY
4685: LIST
4686: LIST
4687: PUSH
4688: EMPTY
4689: LIST
4690: LIST
4691: PPUSH
4692: CALL_OW 69
4696: ST_TO_ADDR
// if not tmp then
4697: LD_VAR 0 8
4701: NOT
4702: IFFALSE 4706
// exit ;
4704: GO 5164
// if in_unit then
4706: LD_VAR 0 11
4710: IFFALSE 4734
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4712: LD_ADDR_VAR 0 10
4716: PUSH
4717: LD_VAR 0 8
4721: PPUSH
4722: LD_VAR 0 11
4726: PPUSH
4727: CALL_OW 74
4731: ST_TO_ADDR
4732: GO 4754
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4734: LD_ADDR_VAR 0 10
4738: PUSH
4739: LD_VAR 0 8
4743: PPUSH
4744: LD_VAR 0 1
4748: PPUSH
4749: CALL_OW 74
4753: ST_TO_ADDR
// if not enemy then
4754: LD_VAR 0 10
4758: NOT
4759: IFFALSE 4763
// exit ;
4761: GO 5164
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4763: LD_VAR 0 11
4767: PUSH
4768: LD_VAR 0 11
4772: PPUSH
4773: LD_VAR 0 10
4777: PPUSH
4778: CALL_OW 296
4782: PUSH
4783: LD_INT 13
4785: GREATER
4786: AND
4787: PUSH
4788: LD_VAR 0 1
4792: PPUSH
4793: LD_VAR 0 10
4797: PPUSH
4798: CALL_OW 296
4802: PUSH
4803: LD_INT 12
4805: GREATER
4806: OR
4807: IFFALSE 4811
// exit ;
4809: GO 5164
// missile := [ 1 ] ;
4811: LD_ADDR_VAR 0 14
4815: PUSH
4816: LD_INT 1
4818: PUSH
4819: EMPTY
4820: LIST
4821: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4822: LD_VAR 0 9
4826: PPUSH
4827: LD_VAR 0 12
4831: PPUSH
4832: CALL_OW 325
4836: IFFALSE 4865
// missile := Replace ( missile , missile + 1 , 2 ) ;
4838: LD_ADDR_VAR 0 14
4842: PUSH
4843: LD_VAR 0 14
4847: PPUSH
4848: LD_VAR 0 14
4852: PUSH
4853: LD_INT 1
4855: PLUS
4856: PPUSH
4857: LD_INT 2
4859: PPUSH
4860: CALL_OW 1
4864: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4865: LD_VAR 0 9
4869: PPUSH
4870: LD_VAR 0 13
4874: PPUSH
4875: CALL_OW 325
4879: PUSH
4880: LD_VAR 0 10
4884: PPUSH
4885: CALL_OW 255
4889: PPUSH
4890: LD_VAR 0 13
4894: PPUSH
4895: CALL_OW 325
4899: NOT
4900: AND
4901: IFFALSE 4930
// missile := Replace ( missile , missile + 1 , 3 ) ;
4903: LD_ADDR_VAR 0 14
4907: PUSH
4908: LD_VAR 0 14
4912: PPUSH
4913: LD_VAR 0 14
4917: PUSH
4918: LD_INT 1
4920: PLUS
4921: PPUSH
4922: LD_INT 3
4924: PPUSH
4925: CALL_OW 1
4929: ST_TO_ADDR
// if missile < 2 then
4930: LD_VAR 0 14
4934: PUSH
4935: LD_INT 2
4937: LESS
4938: IFFALSE 4942
// exit ;
4940: GO 5164
// x := GetX ( enemy ) ;
4942: LD_ADDR_VAR 0 4
4946: PUSH
4947: LD_VAR 0 10
4951: PPUSH
4952: CALL_OW 250
4956: ST_TO_ADDR
// y := GetY ( enemy ) ;
4957: LD_ADDR_VAR 0 5
4961: PUSH
4962: LD_VAR 0 10
4966: PPUSH
4967: CALL_OW 251
4971: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4972: LD_ADDR_VAR 0 6
4976: PUSH
4977: LD_VAR 0 4
4981: PUSH
4982: LD_INT 1
4984: NEG
4985: PPUSH
4986: LD_INT 1
4988: PPUSH
4989: CALL_OW 12
4993: PLUS
4994: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4995: LD_ADDR_VAR 0 7
4999: PUSH
5000: LD_VAR 0 5
5004: PUSH
5005: LD_INT 1
5007: NEG
5008: PPUSH
5009: LD_INT 1
5011: PPUSH
5012: CALL_OW 12
5016: PLUS
5017: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5018: LD_VAR 0 6
5022: PPUSH
5023: LD_VAR 0 7
5027: PPUSH
5028: CALL_OW 488
5032: NOT
5033: IFFALSE 5055
// begin _x := x ;
5035: LD_ADDR_VAR 0 6
5039: PUSH
5040: LD_VAR 0 4
5044: ST_TO_ADDR
// _y := y ;
5045: LD_ADDR_VAR 0 7
5049: PUSH
5050: LD_VAR 0 5
5054: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
5055: LD_ADDR_VAR 0 3
5059: PUSH
5060: LD_INT 1
5062: PPUSH
5063: LD_VAR 0 14
5067: PPUSH
5068: CALL_OW 12
5072: ST_TO_ADDR
// case i of 1 :
5073: LD_VAR 0 3
5077: PUSH
5078: LD_INT 1
5080: DOUBLE
5081: EQUAL
5082: IFTRUE 5086
5084: GO 5103
5086: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
5087: LD_VAR 0 1
5091: PPUSH
5092: LD_VAR 0 10
5096: PPUSH
5097: CALL_OW 115
5101: GO 5164
5103: LD_INT 2
5105: DOUBLE
5106: EQUAL
5107: IFTRUE 5111
5109: GO 5133
5111: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
5112: LD_VAR 0 1
5116: PPUSH
5117: LD_VAR 0 6
5121: PPUSH
5122: LD_VAR 0 7
5126: PPUSH
5127: CALL_OW 153
5131: GO 5164
5133: LD_INT 3
5135: DOUBLE
5136: EQUAL
5137: IFTRUE 5141
5139: GO 5163
5141: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
5142: LD_VAR 0 1
5146: PPUSH
5147: LD_VAR 0 6
5151: PPUSH
5152: LD_VAR 0 7
5156: PPUSH
5157: CALL_OW 154
5161: GO 5164
5163: POP
// end ;
5164: LD_VAR 0 2
5168: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
5169: LD_INT 0
5171: PPUSH
5172: PPUSH
5173: PPUSH
5174: PPUSH
5175: PPUSH
5176: PPUSH
// if not unit or not building then
5177: LD_VAR 0 1
5181: NOT
5182: PUSH
5183: LD_VAR 0 2
5187: NOT
5188: OR
5189: IFFALSE 5193
// exit ;
5191: GO 5351
// x := GetX ( building ) ;
5193: LD_ADDR_VAR 0 5
5197: PUSH
5198: LD_VAR 0 2
5202: PPUSH
5203: CALL_OW 250
5207: ST_TO_ADDR
// y := GetY ( building ) ;
5208: LD_ADDR_VAR 0 6
5212: PUSH
5213: LD_VAR 0 2
5217: PPUSH
5218: CALL_OW 251
5222: ST_TO_ADDR
// for i = 0 to 5 do
5223: LD_ADDR_VAR 0 4
5227: PUSH
5228: DOUBLE
5229: LD_INT 0
5231: DEC
5232: ST_TO_ADDR
5233: LD_INT 5
5235: PUSH
5236: FOR_TO
5237: IFFALSE 5349
// begin _x := ShiftX ( x , i , 3 ) ;
5239: LD_ADDR_VAR 0 7
5243: PUSH
5244: LD_VAR 0 5
5248: PPUSH
5249: LD_VAR 0 4
5253: PPUSH
5254: LD_INT 3
5256: PPUSH
5257: CALL_OW 272
5261: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
5262: LD_ADDR_VAR 0 8
5266: PUSH
5267: LD_VAR 0 6
5271: PPUSH
5272: LD_VAR 0 4
5276: PPUSH
5277: LD_INT 3
5279: PPUSH
5280: CALL_OW 273
5284: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5285: LD_VAR 0 7
5289: PPUSH
5290: LD_VAR 0 8
5294: PPUSH
5295: CALL_OW 488
5299: NOT
5300: IFFALSE 5304
// continue ;
5302: GO 5236
// if HexInfo ( _x , _y ) = 0 then
5304: LD_VAR 0 7
5308: PPUSH
5309: LD_VAR 0 8
5313: PPUSH
5314: CALL_OW 428
5318: PUSH
5319: LD_INT 0
5321: EQUAL
5322: IFFALSE 5347
// begin ComMoveXY ( unit , _x , _y ) ;
5324: LD_VAR 0 1
5328: PPUSH
5329: LD_VAR 0 7
5333: PPUSH
5334: LD_VAR 0 8
5338: PPUSH
5339: CALL_OW 111
// exit ;
5343: POP
5344: POP
5345: GO 5351
// end ; end ;
5347: GO 5236
5349: POP
5350: POP
// end ;
5351: LD_VAR 0 3
5355: RET
// export function ScanBase ( side , base_area ) ; begin
5356: LD_INT 0
5358: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
5359: LD_ADDR_VAR 0 3
5363: PUSH
5364: LD_VAR 0 2
5368: PPUSH
5369: LD_INT 81
5371: PUSH
5372: LD_VAR 0 1
5376: PUSH
5377: EMPTY
5378: LIST
5379: LIST
5380: PPUSH
5381: CALL_OW 70
5385: ST_TO_ADDR
// end ;
5386: LD_VAR 0 3
5390: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
5391: LD_INT 0
5393: PPUSH
5394: PPUSH
5395: PPUSH
5396: PPUSH
// result := false ;
5397: LD_ADDR_VAR 0 2
5401: PUSH
5402: LD_INT 0
5404: ST_TO_ADDR
// side := GetSide ( unit ) ;
5405: LD_ADDR_VAR 0 3
5409: PUSH
5410: LD_VAR 0 1
5414: PPUSH
5415: CALL_OW 255
5419: ST_TO_ADDR
// nat := GetNation ( unit ) ;
5420: LD_ADDR_VAR 0 4
5424: PUSH
5425: LD_VAR 0 1
5429: PPUSH
5430: CALL_OW 248
5434: ST_TO_ADDR
// case nat of 1 :
5435: LD_VAR 0 4
5439: PUSH
5440: LD_INT 1
5442: DOUBLE
5443: EQUAL
5444: IFTRUE 5448
5446: GO 5459
5448: POP
// tech := tech_lassight ; 2 :
5449: LD_ADDR_VAR 0 5
5453: PUSH
5454: LD_INT 12
5456: ST_TO_ADDR
5457: GO 5498
5459: LD_INT 2
5461: DOUBLE
5462: EQUAL
5463: IFTRUE 5467
5465: GO 5478
5467: POP
// tech := tech_mortar ; 3 :
5468: LD_ADDR_VAR 0 5
5472: PUSH
5473: LD_INT 41
5475: ST_TO_ADDR
5476: GO 5498
5478: LD_INT 3
5480: DOUBLE
5481: EQUAL
5482: IFTRUE 5486
5484: GO 5497
5486: POP
// tech := tech_bazooka ; end ;
5487: LD_ADDR_VAR 0 5
5491: PUSH
5492: LD_INT 44
5494: ST_TO_ADDR
5495: GO 5498
5497: POP
// if Researched ( side , tech ) then
5498: LD_VAR 0 3
5502: PPUSH
5503: LD_VAR 0 5
5507: PPUSH
5508: CALL_OW 325
5512: IFFALSE 5539
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
5514: LD_ADDR_VAR 0 2
5518: PUSH
5519: LD_INT 5
5521: PUSH
5522: LD_INT 8
5524: PUSH
5525: LD_INT 9
5527: PUSH
5528: EMPTY
5529: LIST
5530: LIST
5531: LIST
5532: PUSH
5533: LD_VAR 0 4
5537: ARRAY
5538: ST_TO_ADDR
// end ;
5539: LD_VAR 0 2
5543: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
5544: LD_INT 0
5546: PPUSH
5547: PPUSH
5548: PPUSH
// if not mines then
5549: LD_VAR 0 2
5553: NOT
5554: IFFALSE 5558
// exit ;
5556: GO 5702
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5558: LD_ADDR_VAR 0 5
5562: PUSH
5563: LD_INT 81
5565: PUSH
5566: LD_VAR 0 1
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: PUSH
5575: LD_INT 3
5577: PUSH
5578: LD_INT 21
5580: PUSH
5581: LD_INT 3
5583: PUSH
5584: EMPTY
5585: LIST
5586: LIST
5587: PUSH
5588: EMPTY
5589: LIST
5590: LIST
5591: PUSH
5592: EMPTY
5593: LIST
5594: LIST
5595: PPUSH
5596: CALL_OW 69
5600: ST_TO_ADDR
// for i in mines do
5601: LD_ADDR_VAR 0 4
5605: PUSH
5606: LD_VAR 0 2
5610: PUSH
5611: FOR_IN
5612: IFFALSE 5700
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5614: LD_VAR 0 4
5618: PUSH
5619: LD_INT 1
5621: ARRAY
5622: PPUSH
5623: LD_VAR 0 4
5627: PUSH
5628: LD_INT 2
5630: ARRAY
5631: PPUSH
5632: CALL_OW 458
5636: NOT
5637: IFFALSE 5641
// continue ;
5639: GO 5611
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5641: LD_VAR 0 4
5645: PUSH
5646: LD_INT 1
5648: ARRAY
5649: PPUSH
5650: LD_VAR 0 4
5654: PUSH
5655: LD_INT 2
5657: ARRAY
5658: PPUSH
5659: CALL_OW 428
5663: PUSH
5664: LD_VAR 0 5
5668: IN
5669: IFFALSE 5698
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5671: LD_VAR 0 4
5675: PUSH
5676: LD_INT 1
5678: ARRAY
5679: PPUSH
5680: LD_VAR 0 4
5684: PUSH
5685: LD_INT 2
5687: ARRAY
5688: PPUSH
5689: LD_VAR 0 1
5693: PPUSH
5694: CALL_OW 456
// end ;
5698: GO 5611
5700: POP
5701: POP
// end ;
5702: LD_VAR 0 3
5706: RET
// export function Count ( array ) ; var i ; begin
5707: LD_INT 0
5709: PPUSH
5710: PPUSH
// result := 0 ;
5711: LD_ADDR_VAR 0 2
5715: PUSH
5716: LD_INT 0
5718: ST_TO_ADDR
// for i in array do
5719: LD_ADDR_VAR 0 3
5723: PUSH
5724: LD_VAR 0 1
5728: PUSH
5729: FOR_IN
5730: IFFALSE 5754
// if i then
5732: LD_VAR 0 3
5736: IFFALSE 5752
// result := result + 1 ;
5738: LD_ADDR_VAR 0 2
5742: PUSH
5743: LD_VAR 0 2
5747: PUSH
5748: LD_INT 1
5750: PLUS
5751: ST_TO_ADDR
5752: GO 5729
5754: POP
5755: POP
// end ;
5756: LD_VAR 0 2
5760: RET
// export function IsEmpty ( building ) ; begin
5761: LD_INT 0
5763: PPUSH
// if not building then
5764: LD_VAR 0 1
5768: NOT
5769: IFFALSE 5773
// exit ;
5771: GO 5816
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5773: LD_ADDR_VAR 0 2
5777: PUSH
5778: LD_VAR 0 1
5782: PUSH
5783: LD_INT 22
5785: PUSH
5786: LD_VAR 0 1
5790: PPUSH
5791: CALL_OW 255
5795: PUSH
5796: EMPTY
5797: LIST
5798: LIST
5799: PUSH
5800: LD_INT 58
5802: PUSH
5803: EMPTY
5804: LIST
5805: PUSH
5806: EMPTY
5807: LIST
5808: LIST
5809: PPUSH
5810: CALL_OW 69
5814: IN
5815: ST_TO_ADDR
// end ;
5816: LD_VAR 0 2
5820: RET
// export function IsNotFull ( building ) ; var places ; begin
5821: LD_INT 0
5823: PPUSH
5824: PPUSH
// if not building then
5825: LD_VAR 0 1
5829: NOT
5830: IFFALSE 5834
// exit ;
5832: GO 6005
// result := false ;
5834: LD_ADDR_VAR 0 2
5838: PUSH
5839: LD_INT 0
5841: ST_TO_ADDR
// places := 0 ;
5842: LD_ADDR_VAR 0 3
5846: PUSH
5847: LD_INT 0
5849: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
5850: LD_VAR 0 1
5854: PPUSH
5855: CALL_OW 266
5859: PUSH
5860: LD_INT 0
5862: DOUBLE
5863: EQUAL
5864: IFTRUE 5922
5866: LD_INT 1
5868: DOUBLE
5869: EQUAL
5870: IFTRUE 5922
5872: LD_INT 6
5874: DOUBLE
5875: EQUAL
5876: IFTRUE 5922
5878: LD_INT 7
5880: DOUBLE
5881: EQUAL
5882: IFTRUE 5922
5884: LD_INT 8
5886: DOUBLE
5887: EQUAL
5888: IFTRUE 5922
5890: LD_INT 4
5892: DOUBLE
5893: EQUAL
5894: IFTRUE 5922
5896: LD_INT 5
5898: DOUBLE
5899: EQUAL
5900: IFTRUE 5922
5902: LD_INT 2
5904: DOUBLE
5905: EQUAL
5906: IFTRUE 5922
5908: LD_INT 3
5910: DOUBLE
5911: EQUAL
5912: IFTRUE 5922
5914: LD_INT 35
5916: DOUBLE
5917: EQUAL
5918: IFTRUE 5922
5920: GO 5933
5922: POP
// places := 6 ; b_bunker , b_breastwork :
5923: LD_ADDR_VAR 0 3
5927: PUSH
5928: LD_INT 6
5930: ST_TO_ADDR
5931: GO 5978
5933: LD_INT 32
5935: DOUBLE
5936: EQUAL
5937: IFTRUE 5947
5939: LD_INT 31
5941: DOUBLE
5942: EQUAL
5943: IFTRUE 5947
5945: GO 5958
5947: POP
// places := 1 ; b_control_tower :
5948: LD_ADDR_VAR 0 3
5952: PUSH
5953: LD_INT 1
5955: ST_TO_ADDR
5956: GO 5978
5958: LD_INT 36
5960: DOUBLE
5961: EQUAL
5962: IFTRUE 5966
5964: GO 5977
5966: POP
// places := 3 ; end ;
5967: LD_ADDR_VAR 0 3
5971: PUSH
5972: LD_INT 3
5974: ST_TO_ADDR
5975: GO 5978
5977: POP
// if places then
5978: LD_VAR 0 3
5982: IFFALSE 6005
// result := UnitsInside ( building ) < places ;
5984: LD_ADDR_VAR 0 2
5988: PUSH
5989: LD_VAR 0 1
5993: PPUSH
5994: CALL_OW 313
5998: PUSH
5999: LD_VAR 0 3
6003: LESS
6004: ST_TO_ADDR
// end ;
6005: LD_VAR 0 2
6009: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
6010: LD_INT 0
6012: PPUSH
6013: PPUSH
6014: PPUSH
6015: PPUSH
// tmp := [ ] ;
6016: LD_ADDR_VAR 0 3
6020: PUSH
6021: EMPTY
6022: ST_TO_ADDR
// list := [ ] ;
6023: LD_ADDR_VAR 0 5
6027: PUSH
6028: EMPTY
6029: ST_TO_ADDR
// for i = 16 to 25 do
6030: LD_ADDR_VAR 0 4
6034: PUSH
6035: DOUBLE
6036: LD_INT 16
6038: DEC
6039: ST_TO_ADDR
6040: LD_INT 25
6042: PUSH
6043: FOR_TO
6044: IFFALSE 6117
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
6046: LD_ADDR_VAR 0 3
6050: PUSH
6051: LD_VAR 0 3
6055: PUSH
6056: LD_INT 22
6058: PUSH
6059: LD_VAR 0 1
6063: PPUSH
6064: CALL_OW 255
6068: PUSH
6069: EMPTY
6070: LIST
6071: LIST
6072: PUSH
6073: LD_INT 91
6075: PUSH
6076: LD_VAR 0 1
6080: PUSH
6081: LD_INT 6
6083: PUSH
6084: EMPTY
6085: LIST
6086: LIST
6087: LIST
6088: PUSH
6089: LD_INT 30
6091: PUSH
6092: LD_VAR 0 4
6096: PUSH
6097: EMPTY
6098: LIST
6099: LIST
6100: PUSH
6101: EMPTY
6102: LIST
6103: LIST
6104: LIST
6105: PUSH
6106: EMPTY
6107: LIST
6108: PPUSH
6109: CALL_OW 69
6113: ADD
6114: ST_TO_ADDR
6115: GO 6043
6117: POP
6118: POP
// for i = 1 to tmp do
6119: LD_ADDR_VAR 0 4
6123: PUSH
6124: DOUBLE
6125: LD_INT 1
6127: DEC
6128: ST_TO_ADDR
6129: LD_VAR 0 3
6133: PUSH
6134: FOR_TO
6135: IFFALSE 6223
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
6137: LD_ADDR_VAR 0 5
6141: PUSH
6142: LD_VAR 0 5
6146: PUSH
6147: LD_VAR 0 3
6151: PUSH
6152: LD_VAR 0 4
6156: ARRAY
6157: PPUSH
6158: CALL_OW 266
6162: PUSH
6163: LD_VAR 0 3
6167: PUSH
6168: LD_VAR 0 4
6172: ARRAY
6173: PPUSH
6174: CALL_OW 250
6178: PUSH
6179: LD_VAR 0 3
6183: PUSH
6184: LD_VAR 0 4
6188: ARRAY
6189: PPUSH
6190: CALL_OW 251
6194: PUSH
6195: LD_VAR 0 3
6199: PUSH
6200: LD_VAR 0 4
6204: ARRAY
6205: PPUSH
6206: CALL_OW 254
6210: PUSH
6211: EMPTY
6212: LIST
6213: LIST
6214: LIST
6215: LIST
6216: PUSH
6217: EMPTY
6218: LIST
6219: ADD
6220: ST_TO_ADDR
6221: GO 6134
6223: POP
6224: POP
// result := list ;
6225: LD_ADDR_VAR 0 2
6229: PUSH
6230: LD_VAR 0 5
6234: ST_TO_ADDR
// end ;
6235: LD_VAR 0 2
6239: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
6240: LD_INT 0
6242: PPUSH
6243: PPUSH
6244: PPUSH
6245: PPUSH
6246: PPUSH
6247: PPUSH
6248: PPUSH
// if not factory then
6249: LD_VAR 0 1
6253: NOT
6254: IFFALSE 6258
// exit ;
6256: GO 6851
// if control = control_apeman then
6258: LD_VAR 0 4
6262: PUSH
6263: LD_INT 5
6265: EQUAL
6266: IFFALSE 6375
// begin tmp := UnitsInside ( factory ) ;
6268: LD_ADDR_VAR 0 8
6272: PUSH
6273: LD_VAR 0 1
6277: PPUSH
6278: CALL_OW 313
6282: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
6283: LD_VAR 0 8
6287: PPUSH
6288: LD_INT 25
6290: PUSH
6291: LD_INT 12
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: PPUSH
6298: CALL_OW 72
6302: NOT
6303: IFFALSE 6313
// control := control_manual ;
6305: LD_ADDR_VAR 0 4
6309: PUSH
6310: LD_INT 1
6312: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
6313: LD_ADDR_VAR 0 8
6317: PUSH
6318: LD_VAR 0 1
6322: PPUSH
6323: CALL 6010 0 1
6327: ST_TO_ADDR
// if tmp then
6328: LD_VAR 0 8
6332: IFFALSE 6375
// begin for i in tmp do
6334: LD_ADDR_VAR 0 7
6338: PUSH
6339: LD_VAR 0 8
6343: PUSH
6344: FOR_IN
6345: IFFALSE 6373
// if i [ 1 ] = b_ext_radio then
6347: LD_VAR 0 7
6351: PUSH
6352: LD_INT 1
6354: ARRAY
6355: PUSH
6356: LD_INT 22
6358: EQUAL
6359: IFFALSE 6371
// begin control := control_remote ;
6361: LD_ADDR_VAR 0 4
6365: PUSH
6366: LD_INT 2
6368: ST_TO_ADDR
// break ;
6369: GO 6373
// end ;
6371: GO 6344
6373: POP
6374: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6375: LD_VAR 0 1
6379: PPUSH
6380: LD_VAR 0 2
6384: PPUSH
6385: LD_VAR 0 3
6389: PPUSH
6390: LD_VAR 0 4
6394: PPUSH
6395: LD_VAR 0 5
6399: PPUSH
6400: CALL_OW 448
6404: IFFALSE 6439
// begin result := [ chassis , engine , control , weapon ] ;
6406: LD_ADDR_VAR 0 6
6410: PUSH
6411: LD_VAR 0 2
6415: PUSH
6416: LD_VAR 0 3
6420: PUSH
6421: LD_VAR 0 4
6425: PUSH
6426: LD_VAR 0 5
6430: PUSH
6431: EMPTY
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: ST_TO_ADDR
// exit ;
6437: GO 6851
// end ; _chassis := AvailableChassisList ( factory ) ;
6439: LD_ADDR_VAR 0 9
6443: PUSH
6444: LD_VAR 0 1
6448: PPUSH
6449: CALL_OW 475
6453: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
6454: LD_ADDR_VAR 0 11
6458: PUSH
6459: LD_VAR 0 1
6463: PPUSH
6464: CALL_OW 476
6468: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
6469: LD_ADDR_VAR 0 12
6473: PUSH
6474: LD_VAR 0 1
6478: PPUSH
6479: CALL_OW 477
6483: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
6484: LD_ADDR_VAR 0 10
6488: PUSH
6489: LD_VAR 0 1
6493: PPUSH
6494: CALL_OW 478
6498: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
6499: LD_VAR 0 9
6503: NOT
6504: PUSH
6505: LD_VAR 0 11
6509: NOT
6510: OR
6511: PUSH
6512: LD_VAR 0 12
6516: NOT
6517: OR
6518: PUSH
6519: LD_VAR 0 10
6523: NOT
6524: OR
6525: IFFALSE 6560
// begin result := [ chassis , engine , control , weapon ] ;
6527: LD_ADDR_VAR 0 6
6531: PUSH
6532: LD_VAR 0 2
6536: PUSH
6537: LD_VAR 0 3
6541: PUSH
6542: LD_VAR 0 4
6546: PUSH
6547: LD_VAR 0 5
6551: PUSH
6552: EMPTY
6553: LIST
6554: LIST
6555: LIST
6556: LIST
6557: ST_TO_ADDR
// exit ;
6558: GO 6851
// end ; if not chassis in _chassis then
6560: LD_VAR 0 2
6564: PUSH
6565: LD_VAR 0 9
6569: IN
6570: NOT
6571: IFFALSE 6597
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
6573: LD_ADDR_VAR 0 2
6577: PUSH
6578: LD_VAR 0 9
6582: PUSH
6583: LD_INT 1
6585: PPUSH
6586: LD_VAR 0 9
6590: PPUSH
6591: CALL_OW 12
6595: ARRAY
6596: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
6597: LD_VAR 0 2
6601: PPUSH
6602: LD_VAR 0 3
6606: PPUSH
6607: CALL 6856 0 2
6611: NOT
6612: IFFALSE 6671
// repeat engine := _engine [ 1 ] ;
6614: LD_ADDR_VAR 0 3
6618: PUSH
6619: LD_VAR 0 11
6623: PUSH
6624: LD_INT 1
6626: ARRAY
6627: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
6628: LD_ADDR_VAR 0 11
6632: PUSH
6633: LD_VAR 0 11
6637: PPUSH
6638: LD_INT 1
6640: PPUSH
6641: CALL_OW 3
6645: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
6646: LD_VAR 0 2
6650: PPUSH
6651: LD_VAR 0 3
6655: PPUSH
6656: CALL 6856 0 2
6660: PUSH
6661: LD_VAR 0 11
6665: PUSH
6666: EMPTY
6667: EQUAL
6668: OR
6669: IFFALSE 6614
// if not control in _control then
6671: LD_VAR 0 4
6675: PUSH
6676: LD_VAR 0 12
6680: IN
6681: NOT
6682: IFFALSE 6708
// control := _control [ rand ( 1 , _control ) ] ;
6684: LD_ADDR_VAR 0 4
6688: PUSH
6689: LD_VAR 0 12
6693: PUSH
6694: LD_INT 1
6696: PPUSH
6697: LD_VAR 0 12
6701: PPUSH
6702: CALL_OW 12
6706: ARRAY
6707: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
6708: LD_VAR 0 2
6712: PPUSH
6713: LD_VAR 0 5
6717: PPUSH
6718: CALL 7076 0 2
6722: NOT
6723: IFFALSE 6782
// repeat weapon := _weapon [ 1 ] ;
6725: LD_ADDR_VAR 0 5
6729: PUSH
6730: LD_VAR 0 10
6734: PUSH
6735: LD_INT 1
6737: ARRAY
6738: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
6739: LD_ADDR_VAR 0 10
6743: PUSH
6744: LD_VAR 0 10
6748: PPUSH
6749: LD_INT 1
6751: PPUSH
6752: CALL_OW 3
6756: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6757: LD_VAR 0 2
6761: PPUSH
6762: LD_VAR 0 5
6766: PPUSH
6767: CALL 7076 0 2
6771: PUSH
6772: LD_VAR 0 10
6776: PUSH
6777: EMPTY
6778: EQUAL
6779: OR
6780: IFFALSE 6725
// result := [ ] ;
6782: LD_ADDR_VAR 0 6
6786: PUSH
6787: EMPTY
6788: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6789: LD_VAR 0 1
6793: PPUSH
6794: LD_VAR 0 2
6798: PPUSH
6799: LD_VAR 0 3
6803: PPUSH
6804: LD_VAR 0 4
6808: PPUSH
6809: LD_VAR 0 5
6813: PPUSH
6814: CALL_OW 448
6818: IFFALSE 6851
// result := [ chassis , engine , control , weapon ] ;
6820: LD_ADDR_VAR 0 6
6824: PUSH
6825: LD_VAR 0 2
6829: PUSH
6830: LD_VAR 0 3
6834: PUSH
6835: LD_VAR 0 4
6839: PUSH
6840: LD_VAR 0 5
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: LIST
6849: LIST
6850: ST_TO_ADDR
// end ;
6851: LD_VAR 0 6
6855: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6856: LD_INT 0
6858: PPUSH
// if not chassis or not engine then
6859: LD_VAR 0 1
6863: NOT
6864: PUSH
6865: LD_VAR 0 2
6869: NOT
6870: OR
6871: IFFALSE 6875
// exit ;
6873: GO 7071
// case engine of engine_solar :
6875: LD_VAR 0 2
6879: PUSH
6880: LD_INT 2
6882: DOUBLE
6883: EQUAL
6884: IFTRUE 6888
6886: GO 6926
6888: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6889: LD_ADDR_VAR 0 3
6893: PUSH
6894: LD_INT 11
6896: PUSH
6897: LD_INT 12
6899: PUSH
6900: LD_INT 13
6902: PUSH
6903: LD_INT 14
6905: PUSH
6906: LD_INT 1
6908: PUSH
6909: LD_INT 2
6911: PUSH
6912: LD_INT 3
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: LIST
6923: ST_TO_ADDR
6924: GO 7055
6926: LD_INT 1
6928: DOUBLE
6929: EQUAL
6930: IFTRUE 6934
6932: GO 6996
6934: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6935: LD_ADDR_VAR 0 3
6939: PUSH
6940: LD_INT 11
6942: PUSH
6943: LD_INT 12
6945: PUSH
6946: LD_INT 13
6948: PUSH
6949: LD_INT 14
6951: PUSH
6952: LD_INT 1
6954: PUSH
6955: LD_INT 2
6957: PUSH
6958: LD_INT 3
6960: PUSH
6961: LD_INT 4
6963: PUSH
6964: LD_INT 5
6966: PUSH
6967: LD_INT 21
6969: PUSH
6970: LD_INT 23
6972: PUSH
6973: LD_INT 22
6975: PUSH
6976: LD_INT 24
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: LIST
6983: LIST
6984: LIST
6985: LIST
6986: LIST
6987: LIST
6988: LIST
6989: LIST
6990: LIST
6991: LIST
6992: LIST
6993: ST_TO_ADDR
6994: GO 7055
6996: LD_INT 3
6998: DOUBLE
6999: EQUAL
7000: IFTRUE 7004
7002: GO 7054
7004: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7005: LD_ADDR_VAR 0 3
7009: PUSH
7010: LD_INT 13
7012: PUSH
7013: LD_INT 14
7015: PUSH
7016: LD_INT 2
7018: PUSH
7019: LD_INT 3
7021: PUSH
7022: LD_INT 4
7024: PUSH
7025: LD_INT 5
7027: PUSH
7028: LD_INT 21
7030: PUSH
7031: LD_INT 22
7033: PUSH
7034: LD_INT 23
7036: PUSH
7037: LD_INT 24
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: LIST
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: LIST
7049: LIST
7050: LIST
7051: ST_TO_ADDR
7052: GO 7055
7054: POP
// result := ( chassis in result ) ;
7055: LD_ADDR_VAR 0 3
7059: PUSH
7060: LD_VAR 0 1
7064: PUSH
7065: LD_VAR 0 3
7069: IN
7070: ST_TO_ADDR
// end ;
7071: LD_VAR 0 3
7075: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
7076: LD_INT 0
7078: PPUSH
// if not chassis or not weapon then
7079: LD_VAR 0 1
7083: NOT
7084: PUSH
7085: LD_VAR 0 2
7089: NOT
7090: OR
7091: IFFALSE 7095
// exit ;
7093: GO 8155
// case weapon of us_machine_gun :
7095: LD_VAR 0 2
7099: PUSH
7100: LD_INT 2
7102: DOUBLE
7103: EQUAL
7104: IFTRUE 7108
7106: GO 7138
7108: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
7109: LD_ADDR_VAR 0 3
7113: PUSH
7114: LD_INT 1
7116: PUSH
7117: LD_INT 2
7119: PUSH
7120: LD_INT 3
7122: PUSH
7123: LD_INT 4
7125: PUSH
7126: LD_INT 5
7128: PUSH
7129: EMPTY
7130: LIST
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: ST_TO_ADDR
7136: GO 8139
7138: LD_INT 3
7140: DOUBLE
7141: EQUAL
7142: IFTRUE 7146
7144: GO 7176
7146: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
7147: LD_ADDR_VAR 0 3
7151: PUSH
7152: LD_INT 1
7154: PUSH
7155: LD_INT 2
7157: PUSH
7158: LD_INT 3
7160: PUSH
7161: LD_INT 4
7163: PUSH
7164: LD_INT 5
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: ST_TO_ADDR
7174: GO 8139
7176: LD_INT 11
7178: DOUBLE
7179: EQUAL
7180: IFTRUE 7184
7182: GO 7214
7184: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
7185: LD_ADDR_VAR 0 3
7189: PUSH
7190: LD_INT 1
7192: PUSH
7193: LD_INT 2
7195: PUSH
7196: LD_INT 3
7198: PUSH
7199: LD_INT 4
7201: PUSH
7202: LD_INT 5
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: ST_TO_ADDR
7212: GO 8139
7214: LD_INT 4
7216: DOUBLE
7217: EQUAL
7218: IFTRUE 7222
7220: GO 7248
7222: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
7223: LD_ADDR_VAR 0 3
7227: PUSH
7228: LD_INT 2
7230: PUSH
7231: LD_INT 3
7233: PUSH
7234: LD_INT 4
7236: PUSH
7237: LD_INT 5
7239: PUSH
7240: EMPTY
7241: LIST
7242: LIST
7243: LIST
7244: LIST
7245: ST_TO_ADDR
7246: GO 8139
7248: LD_INT 5
7250: DOUBLE
7251: EQUAL
7252: IFTRUE 7256
7254: GO 7282
7256: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
7257: LD_ADDR_VAR 0 3
7261: PUSH
7262: LD_INT 2
7264: PUSH
7265: LD_INT 3
7267: PUSH
7268: LD_INT 4
7270: PUSH
7271: LD_INT 5
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: LIST
7278: LIST
7279: ST_TO_ADDR
7280: GO 8139
7282: LD_INT 9
7284: DOUBLE
7285: EQUAL
7286: IFTRUE 7290
7288: GO 7316
7290: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
7291: LD_ADDR_VAR 0 3
7295: PUSH
7296: LD_INT 2
7298: PUSH
7299: LD_INT 3
7301: PUSH
7302: LD_INT 4
7304: PUSH
7305: LD_INT 5
7307: PUSH
7308: EMPTY
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: ST_TO_ADDR
7314: GO 8139
7316: LD_INT 7
7318: DOUBLE
7319: EQUAL
7320: IFTRUE 7324
7322: GO 7350
7324: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
7325: LD_ADDR_VAR 0 3
7329: PUSH
7330: LD_INT 2
7332: PUSH
7333: LD_INT 3
7335: PUSH
7336: LD_INT 4
7338: PUSH
7339: LD_INT 5
7341: PUSH
7342: EMPTY
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: ST_TO_ADDR
7348: GO 8139
7350: LD_INT 12
7352: DOUBLE
7353: EQUAL
7354: IFTRUE 7358
7356: GO 7384
7358: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
7359: LD_ADDR_VAR 0 3
7363: PUSH
7364: LD_INT 2
7366: PUSH
7367: LD_INT 3
7369: PUSH
7370: LD_INT 4
7372: PUSH
7373: LD_INT 5
7375: PUSH
7376: EMPTY
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: ST_TO_ADDR
7382: GO 8139
7384: LD_INT 13
7386: DOUBLE
7387: EQUAL
7388: IFTRUE 7392
7390: GO 7418
7392: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
7393: LD_ADDR_VAR 0 3
7397: PUSH
7398: LD_INT 2
7400: PUSH
7401: LD_INT 3
7403: PUSH
7404: LD_INT 4
7406: PUSH
7407: LD_INT 5
7409: PUSH
7410: EMPTY
7411: LIST
7412: LIST
7413: LIST
7414: LIST
7415: ST_TO_ADDR
7416: GO 8139
7418: LD_INT 14
7420: DOUBLE
7421: EQUAL
7422: IFTRUE 7426
7424: GO 7444
7426: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
7427: LD_ADDR_VAR 0 3
7431: PUSH
7432: LD_INT 4
7434: PUSH
7435: LD_INT 5
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: ST_TO_ADDR
7442: GO 8139
7444: LD_INT 6
7446: DOUBLE
7447: EQUAL
7448: IFTRUE 7452
7450: GO 7470
7452: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
7453: LD_ADDR_VAR 0 3
7457: PUSH
7458: LD_INT 4
7460: PUSH
7461: LD_INT 5
7463: PUSH
7464: EMPTY
7465: LIST
7466: LIST
7467: ST_TO_ADDR
7468: GO 8139
7470: LD_INT 10
7472: DOUBLE
7473: EQUAL
7474: IFTRUE 7478
7476: GO 7496
7478: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
7479: LD_ADDR_VAR 0 3
7483: PUSH
7484: LD_INT 4
7486: PUSH
7487: LD_INT 5
7489: PUSH
7490: EMPTY
7491: LIST
7492: LIST
7493: ST_TO_ADDR
7494: GO 8139
7496: LD_INT 22
7498: DOUBLE
7499: EQUAL
7500: IFTRUE 7504
7502: GO 7530
7504: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
7505: LD_ADDR_VAR 0 3
7509: PUSH
7510: LD_INT 11
7512: PUSH
7513: LD_INT 12
7515: PUSH
7516: LD_INT 13
7518: PUSH
7519: LD_INT 14
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: ST_TO_ADDR
7528: GO 8139
7530: LD_INT 23
7532: DOUBLE
7533: EQUAL
7534: IFTRUE 7538
7536: GO 7564
7538: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
7539: LD_ADDR_VAR 0 3
7543: PUSH
7544: LD_INT 11
7546: PUSH
7547: LD_INT 12
7549: PUSH
7550: LD_INT 13
7552: PUSH
7553: LD_INT 14
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: LIST
7560: LIST
7561: ST_TO_ADDR
7562: GO 8139
7564: LD_INT 24
7566: DOUBLE
7567: EQUAL
7568: IFTRUE 7572
7570: GO 7598
7572: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
7573: LD_ADDR_VAR 0 3
7577: PUSH
7578: LD_INT 11
7580: PUSH
7581: LD_INT 12
7583: PUSH
7584: LD_INT 13
7586: PUSH
7587: LD_INT 14
7589: PUSH
7590: EMPTY
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: ST_TO_ADDR
7596: GO 8139
7598: LD_INT 30
7600: DOUBLE
7601: EQUAL
7602: IFTRUE 7606
7604: GO 7632
7606: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
7607: LD_ADDR_VAR 0 3
7611: PUSH
7612: LD_INT 11
7614: PUSH
7615: LD_INT 12
7617: PUSH
7618: LD_INT 13
7620: PUSH
7621: LD_INT 14
7623: PUSH
7624: EMPTY
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: ST_TO_ADDR
7630: GO 8139
7632: LD_INT 25
7634: DOUBLE
7635: EQUAL
7636: IFTRUE 7640
7638: GO 7658
7640: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
7641: LD_ADDR_VAR 0 3
7645: PUSH
7646: LD_INT 13
7648: PUSH
7649: LD_INT 14
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: ST_TO_ADDR
7656: GO 8139
7658: LD_INT 27
7660: DOUBLE
7661: EQUAL
7662: IFTRUE 7666
7664: GO 7684
7666: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
7667: LD_ADDR_VAR 0 3
7671: PUSH
7672: LD_INT 13
7674: PUSH
7675: LD_INT 14
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: ST_TO_ADDR
7682: GO 8139
7684: LD_INT 92
7686: DOUBLE
7687: EQUAL
7688: IFTRUE 7692
7690: GO 7718
7692: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
7693: LD_ADDR_VAR 0 3
7697: PUSH
7698: LD_INT 11
7700: PUSH
7701: LD_INT 12
7703: PUSH
7704: LD_INT 13
7706: PUSH
7707: LD_INT 14
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: LIST
7714: LIST
7715: ST_TO_ADDR
7716: GO 8139
7718: LD_INT 28
7720: DOUBLE
7721: EQUAL
7722: IFTRUE 7726
7724: GO 7744
7726: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
7727: LD_ADDR_VAR 0 3
7731: PUSH
7732: LD_INT 13
7734: PUSH
7735: LD_INT 14
7737: PUSH
7738: EMPTY
7739: LIST
7740: LIST
7741: ST_TO_ADDR
7742: GO 8139
7744: LD_INT 29
7746: DOUBLE
7747: EQUAL
7748: IFTRUE 7752
7750: GO 7770
7752: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7753: LD_ADDR_VAR 0 3
7757: PUSH
7758: LD_INT 13
7760: PUSH
7761: LD_INT 14
7763: PUSH
7764: EMPTY
7765: LIST
7766: LIST
7767: ST_TO_ADDR
7768: GO 8139
7770: LD_INT 31
7772: DOUBLE
7773: EQUAL
7774: IFTRUE 7778
7776: GO 7796
7778: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7779: LD_ADDR_VAR 0 3
7783: PUSH
7784: LD_INT 13
7786: PUSH
7787: LD_INT 14
7789: PUSH
7790: EMPTY
7791: LIST
7792: LIST
7793: ST_TO_ADDR
7794: GO 8139
7796: LD_INT 26
7798: DOUBLE
7799: EQUAL
7800: IFTRUE 7804
7802: GO 7822
7804: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7805: LD_ADDR_VAR 0 3
7809: PUSH
7810: LD_INT 13
7812: PUSH
7813: LD_INT 14
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: ST_TO_ADDR
7820: GO 8139
7822: LD_INT 42
7824: DOUBLE
7825: EQUAL
7826: IFTRUE 7830
7828: GO 7856
7830: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7831: LD_ADDR_VAR 0 3
7835: PUSH
7836: LD_INT 21
7838: PUSH
7839: LD_INT 22
7841: PUSH
7842: LD_INT 23
7844: PUSH
7845: LD_INT 24
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: ST_TO_ADDR
7854: GO 8139
7856: LD_INT 43
7858: DOUBLE
7859: EQUAL
7860: IFTRUE 7864
7862: GO 7890
7864: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7865: LD_ADDR_VAR 0 3
7869: PUSH
7870: LD_INT 21
7872: PUSH
7873: LD_INT 22
7875: PUSH
7876: LD_INT 23
7878: PUSH
7879: LD_INT 24
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: ST_TO_ADDR
7888: GO 8139
7890: LD_INT 44
7892: DOUBLE
7893: EQUAL
7894: IFTRUE 7898
7896: GO 7924
7898: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7899: LD_ADDR_VAR 0 3
7903: PUSH
7904: LD_INT 21
7906: PUSH
7907: LD_INT 22
7909: PUSH
7910: LD_INT 23
7912: PUSH
7913: LD_INT 24
7915: PUSH
7916: EMPTY
7917: LIST
7918: LIST
7919: LIST
7920: LIST
7921: ST_TO_ADDR
7922: GO 8139
7924: LD_INT 45
7926: DOUBLE
7927: EQUAL
7928: IFTRUE 7932
7930: GO 7958
7932: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7933: LD_ADDR_VAR 0 3
7937: PUSH
7938: LD_INT 21
7940: PUSH
7941: LD_INT 22
7943: PUSH
7944: LD_INT 23
7946: PUSH
7947: LD_INT 24
7949: PUSH
7950: EMPTY
7951: LIST
7952: LIST
7953: LIST
7954: LIST
7955: ST_TO_ADDR
7956: GO 8139
7958: LD_INT 49
7960: DOUBLE
7961: EQUAL
7962: IFTRUE 7966
7964: GO 7992
7966: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7967: LD_ADDR_VAR 0 3
7971: PUSH
7972: LD_INT 21
7974: PUSH
7975: LD_INT 22
7977: PUSH
7978: LD_INT 23
7980: PUSH
7981: LD_INT 24
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: LIST
7988: LIST
7989: ST_TO_ADDR
7990: GO 8139
7992: LD_INT 51
7994: DOUBLE
7995: EQUAL
7996: IFTRUE 8000
7998: GO 8026
8000: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
8001: LD_ADDR_VAR 0 3
8005: PUSH
8006: LD_INT 21
8008: PUSH
8009: LD_INT 22
8011: PUSH
8012: LD_INT 23
8014: PUSH
8015: LD_INT 24
8017: PUSH
8018: EMPTY
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: ST_TO_ADDR
8024: GO 8139
8026: LD_INT 52
8028: DOUBLE
8029: EQUAL
8030: IFTRUE 8034
8032: GO 8060
8034: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
8035: LD_ADDR_VAR 0 3
8039: PUSH
8040: LD_INT 21
8042: PUSH
8043: LD_INT 22
8045: PUSH
8046: LD_INT 23
8048: PUSH
8049: LD_INT 24
8051: PUSH
8052: EMPTY
8053: LIST
8054: LIST
8055: LIST
8056: LIST
8057: ST_TO_ADDR
8058: GO 8139
8060: LD_INT 53
8062: DOUBLE
8063: EQUAL
8064: IFTRUE 8068
8066: GO 8086
8068: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
8069: LD_ADDR_VAR 0 3
8073: PUSH
8074: LD_INT 23
8076: PUSH
8077: LD_INT 24
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: ST_TO_ADDR
8084: GO 8139
8086: LD_INT 46
8088: DOUBLE
8089: EQUAL
8090: IFTRUE 8094
8092: GO 8112
8094: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
8095: LD_ADDR_VAR 0 3
8099: PUSH
8100: LD_INT 23
8102: PUSH
8103: LD_INT 24
8105: PUSH
8106: EMPTY
8107: LIST
8108: LIST
8109: ST_TO_ADDR
8110: GO 8139
8112: LD_INT 47
8114: DOUBLE
8115: EQUAL
8116: IFTRUE 8120
8118: GO 8138
8120: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
8121: LD_ADDR_VAR 0 3
8125: PUSH
8126: LD_INT 23
8128: PUSH
8129: LD_INT 24
8131: PUSH
8132: EMPTY
8133: LIST
8134: LIST
8135: ST_TO_ADDR
8136: GO 8139
8138: POP
// result := ( chassis in result ) ;
8139: LD_ADDR_VAR 0 3
8143: PUSH
8144: LD_VAR 0 1
8148: PUSH
8149: LD_VAR 0 3
8153: IN
8154: ST_TO_ADDR
// end ;
8155: LD_VAR 0 3
8159: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
8160: LD_INT 0
8162: PPUSH
8163: PPUSH
8164: PPUSH
8165: PPUSH
8166: PPUSH
8167: PPUSH
8168: PPUSH
// result := array ;
8169: LD_ADDR_VAR 0 5
8173: PUSH
8174: LD_VAR 0 1
8178: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
8179: LD_VAR 0 1
8183: NOT
8184: PUSH
8185: LD_VAR 0 2
8189: NOT
8190: OR
8191: PUSH
8192: LD_VAR 0 3
8196: NOT
8197: OR
8198: PUSH
8199: LD_VAR 0 2
8203: PUSH
8204: LD_VAR 0 1
8208: GREATER
8209: OR
8210: PUSH
8211: LD_VAR 0 3
8215: PUSH
8216: LD_VAR 0 1
8220: GREATER
8221: OR
8222: IFFALSE 8226
// exit ;
8224: GO 8522
// if direction then
8226: LD_VAR 0 4
8230: IFFALSE 8294
// begin d := 1 ;
8232: LD_ADDR_VAR 0 9
8236: PUSH
8237: LD_INT 1
8239: ST_TO_ADDR
// if i_from > i_to then
8240: LD_VAR 0 2
8244: PUSH
8245: LD_VAR 0 3
8249: GREATER
8250: IFFALSE 8276
// length := ( array - i_from ) + i_to else
8252: LD_ADDR_VAR 0 11
8256: PUSH
8257: LD_VAR 0 1
8261: PUSH
8262: LD_VAR 0 2
8266: MINUS
8267: PUSH
8268: LD_VAR 0 3
8272: PLUS
8273: ST_TO_ADDR
8274: GO 8292
// length := i_to - i_from ;
8276: LD_ADDR_VAR 0 11
8280: PUSH
8281: LD_VAR 0 3
8285: PUSH
8286: LD_VAR 0 2
8290: MINUS
8291: ST_TO_ADDR
// end else
8292: GO 8355
// begin d := - 1 ;
8294: LD_ADDR_VAR 0 9
8298: PUSH
8299: LD_INT 1
8301: NEG
8302: ST_TO_ADDR
// if i_from > i_to then
8303: LD_VAR 0 2
8307: PUSH
8308: LD_VAR 0 3
8312: GREATER
8313: IFFALSE 8333
// length := i_from - i_to else
8315: LD_ADDR_VAR 0 11
8319: PUSH
8320: LD_VAR 0 2
8324: PUSH
8325: LD_VAR 0 3
8329: MINUS
8330: ST_TO_ADDR
8331: GO 8355
// length := ( array - i_to ) + i_from ;
8333: LD_ADDR_VAR 0 11
8337: PUSH
8338: LD_VAR 0 1
8342: PUSH
8343: LD_VAR 0 3
8347: MINUS
8348: PUSH
8349: LD_VAR 0 2
8353: PLUS
8354: ST_TO_ADDR
// end ; if not length then
8355: LD_VAR 0 11
8359: NOT
8360: IFFALSE 8364
// exit ;
8362: GO 8522
// tmp := array ;
8364: LD_ADDR_VAR 0 10
8368: PUSH
8369: LD_VAR 0 1
8373: ST_TO_ADDR
// for i = 1 to length do
8374: LD_ADDR_VAR 0 6
8378: PUSH
8379: DOUBLE
8380: LD_INT 1
8382: DEC
8383: ST_TO_ADDR
8384: LD_VAR 0 11
8388: PUSH
8389: FOR_TO
8390: IFFALSE 8510
// begin for j = 1 to array do
8392: LD_ADDR_VAR 0 7
8396: PUSH
8397: DOUBLE
8398: LD_INT 1
8400: DEC
8401: ST_TO_ADDR
8402: LD_VAR 0 1
8406: PUSH
8407: FOR_TO
8408: IFFALSE 8496
// begin k := j + d ;
8410: LD_ADDR_VAR 0 8
8414: PUSH
8415: LD_VAR 0 7
8419: PUSH
8420: LD_VAR 0 9
8424: PLUS
8425: ST_TO_ADDR
// if k > array then
8426: LD_VAR 0 8
8430: PUSH
8431: LD_VAR 0 1
8435: GREATER
8436: IFFALSE 8446
// k := 1 ;
8438: LD_ADDR_VAR 0 8
8442: PUSH
8443: LD_INT 1
8445: ST_TO_ADDR
// if not k then
8446: LD_VAR 0 8
8450: NOT
8451: IFFALSE 8463
// k := array ;
8453: LD_ADDR_VAR 0 8
8457: PUSH
8458: LD_VAR 0 1
8462: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
8463: LD_ADDR_VAR 0 10
8467: PUSH
8468: LD_VAR 0 10
8472: PPUSH
8473: LD_VAR 0 8
8477: PPUSH
8478: LD_VAR 0 1
8482: PUSH
8483: LD_VAR 0 7
8487: ARRAY
8488: PPUSH
8489: CALL_OW 1
8493: ST_TO_ADDR
// end ;
8494: GO 8407
8496: POP
8497: POP
// array := tmp ;
8498: LD_ADDR_VAR 0 1
8502: PUSH
8503: LD_VAR 0 10
8507: ST_TO_ADDR
// end ;
8508: GO 8389
8510: POP
8511: POP
// result := array ;
8512: LD_ADDR_VAR 0 5
8516: PUSH
8517: LD_VAR 0 1
8521: ST_TO_ADDR
// end ;
8522: LD_VAR 0 5
8526: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
8527: LD_INT 0
8529: PPUSH
8530: PPUSH
// result := 0 ;
8531: LD_ADDR_VAR 0 3
8535: PUSH
8536: LD_INT 0
8538: ST_TO_ADDR
// if not array or not value in array then
8539: LD_VAR 0 1
8543: NOT
8544: PUSH
8545: LD_VAR 0 2
8549: PUSH
8550: LD_VAR 0 1
8554: IN
8555: NOT
8556: OR
8557: IFFALSE 8561
// exit ;
8559: GO 8615
// for i = 1 to array do
8561: LD_ADDR_VAR 0 4
8565: PUSH
8566: DOUBLE
8567: LD_INT 1
8569: DEC
8570: ST_TO_ADDR
8571: LD_VAR 0 1
8575: PUSH
8576: FOR_TO
8577: IFFALSE 8613
// if value = array [ i ] then
8579: LD_VAR 0 2
8583: PUSH
8584: LD_VAR 0 1
8588: PUSH
8589: LD_VAR 0 4
8593: ARRAY
8594: EQUAL
8595: IFFALSE 8611
// begin result := i ;
8597: LD_ADDR_VAR 0 3
8601: PUSH
8602: LD_VAR 0 4
8606: ST_TO_ADDR
// exit ;
8607: POP
8608: POP
8609: GO 8615
// end ;
8611: GO 8576
8613: POP
8614: POP
// end ;
8615: LD_VAR 0 3
8619: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
8620: LD_INT 0
8622: PPUSH
// vc_chassis := chassis ;
8623: LD_ADDR_OWVAR 37
8627: PUSH
8628: LD_VAR 0 1
8632: ST_TO_ADDR
// vc_engine := engine ;
8633: LD_ADDR_OWVAR 39
8637: PUSH
8638: LD_VAR 0 2
8642: ST_TO_ADDR
// vc_control := control ;
8643: LD_ADDR_OWVAR 38
8647: PUSH
8648: LD_VAR 0 3
8652: ST_TO_ADDR
// vc_weapon := weapon ;
8653: LD_ADDR_OWVAR 40
8657: PUSH
8658: LD_VAR 0 4
8662: ST_TO_ADDR
// vc_fuel_battery := fuel ;
8663: LD_ADDR_OWVAR 41
8667: PUSH
8668: LD_VAR 0 5
8672: ST_TO_ADDR
// end ;
8673: LD_VAR 0 6
8677: RET
// export function WantPlant ( unit ) ; var task ; begin
8678: LD_INT 0
8680: PPUSH
8681: PPUSH
// result := false ;
8682: LD_ADDR_VAR 0 2
8686: PUSH
8687: LD_INT 0
8689: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
8690: LD_ADDR_VAR 0 3
8694: PUSH
8695: LD_VAR 0 1
8699: PPUSH
8700: CALL_OW 437
8704: ST_TO_ADDR
// if task then
8705: LD_VAR 0 3
8709: IFFALSE 8737
// if task [ 1 ] [ 1 ] = p then
8711: LD_VAR 0 3
8715: PUSH
8716: LD_INT 1
8718: ARRAY
8719: PUSH
8720: LD_INT 1
8722: ARRAY
8723: PUSH
8724: LD_STRING p
8726: EQUAL
8727: IFFALSE 8737
// result := true ;
8729: LD_ADDR_VAR 0 2
8733: PUSH
8734: LD_INT 1
8736: ST_TO_ADDR
// end ;
8737: LD_VAR 0 2
8741: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8742: LD_INT 0
8744: PPUSH
8745: PPUSH
8746: PPUSH
8747: PPUSH
// if pos < 1 then
8748: LD_VAR 0 2
8752: PUSH
8753: LD_INT 1
8755: LESS
8756: IFFALSE 8760
// exit ;
8758: GO 9063
// if pos = 1 then
8760: LD_VAR 0 2
8764: PUSH
8765: LD_INT 1
8767: EQUAL
8768: IFFALSE 8801
// result := Replace ( arr , pos [ 1 ] , value ) else
8770: LD_ADDR_VAR 0 4
8774: PUSH
8775: LD_VAR 0 1
8779: PPUSH
8780: LD_VAR 0 2
8784: PUSH
8785: LD_INT 1
8787: ARRAY
8788: PPUSH
8789: LD_VAR 0 3
8793: PPUSH
8794: CALL_OW 1
8798: ST_TO_ADDR
8799: GO 9063
// begin tmp := arr ;
8801: LD_ADDR_VAR 0 6
8805: PUSH
8806: LD_VAR 0 1
8810: ST_TO_ADDR
// s_arr := [ tmp ] ;
8811: LD_ADDR_VAR 0 7
8815: PUSH
8816: LD_VAR 0 6
8820: PUSH
8821: EMPTY
8822: LIST
8823: ST_TO_ADDR
// for i = 1 to pos - 1 do
8824: LD_ADDR_VAR 0 5
8828: PUSH
8829: DOUBLE
8830: LD_INT 1
8832: DEC
8833: ST_TO_ADDR
8834: LD_VAR 0 2
8838: PUSH
8839: LD_INT 1
8841: MINUS
8842: PUSH
8843: FOR_TO
8844: IFFALSE 8889
// begin tmp := tmp [ pos [ i ] ] ;
8846: LD_ADDR_VAR 0 6
8850: PUSH
8851: LD_VAR 0 6
8855: PUSH
8856: LD_VAR 0 2
8860: PUSH
8861: LD_VAR 0 5
8865: ARRAY
8866: ARRAY
8867: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8868: LD_ADDR_VAR 0 7
8872: PUSH
8873: LD_VAR 0 7
8877: PUSH
8878: LD_VAR 0 6
8882: PUSH
8883: EMPTY
8884: LIST
8885: ADD
8886: ST_TO_ADDR
// end ;
8887: GO 8843
8889: POP
8890: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8891: LD_ADDR_VAR 0 6
8895: PUSH
8896: LD_VAR 0 6
8900: PPUSH
8901: LD_VAR 0 2
8905: PUSH
8906: LD_VAR 0 2
8910: ARRAY
8911: PPUSH
8912: LD_VAR 0 3
8916: PPUSH
8917: CALL_OW 1
8921: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8922: LD_ADDR_VAR 0 7
8926: PUSH
8927: LD_VAR 0 7
8931: PPUSH
8932: LD_VAR 0 7
8936: PPUSH
8937: LD_VAR 0 6
8941: PPUSH
8942: CALL_OW 1
8946: ST_TO_ADDR
// for i = s_arr downto 2 do
8947: LD_ADDR_VAR 0 5
8951: PUSH
8952: DOUBLE
8953: LD_VAR 0 7
8957: INC
8958: ST_TO_ADDR
8959: LD_INT 2
8961: PUSH
8962: FOR_DOWNTO
8963: IFFALSE 9047
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8965: LD_ADDR_VAR 0 6
8969: PUSH
8970: LD_VAR 0 7
8974: PUSH
8975: LD_VAR 0 5
8979: PUSH
8980: LD_INT 1
8982: MINUS
8983: ARRAY
8984: PPUSH
8985: LD_VAR 0 2
8989: PUSH
8990: LD_VAR 0 5
8994: PUSH
8995: LD_INT 1
8997: MINUS
8998: ARRAY
8999: PPUSH
9000: LD_VAR 0 7
9004: PUSH
9005: LD_VAR 0 5
9009: ARRAY
9010: PPUSH
9011: CALL_OW 1
9015: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
9016: LD_ADDR_VAR 0 7
9020: PUSH
9021: LD_VAR 0 7
9025: PPUSH
9026: LD_VAR 0 5
9030: PUSH
9031: LD_INT 1
9033: MINUS
9034: PPUSH
9035: LD_VAR 0 6
9039: PPUSH
9040: CALL_OW 1
9044: ST_TO_ADDR
// end ;
9045: GO 8962
9047: POP
9048: POP
// result := s_arr [ 1 ] ;
9049: LD_ADDR_VAR 0 4
9053: PUSH
9054: LD_VAR 0 7
9058: PUSH
9059: LD_INT 1
9061: ARRAY
9062: ST_TO_ADDR
// end ; end ;
9063: LD_VAR 0 4
9067: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
9068: LD_INT 0
9070: PPUSH
9071: PPUSH
// if not list then
9072: LD_VAR 0 1
9076: NOT
9077: IFFALSE 9081
// exit ;
9079: GO 9172
// i := list [ pos1 ] ;
9081: LD_ADDR_VAR 0 5
9085: PUSH
9086: LD_VAR 0 1
9090: PUSH
9091: LD_VAR 0 2
9095: ARRAY
9096: ST_TO_ADDR
// if not i then
9097: LD_VAR 0 5
9101: NOT
9102: IFFALSE 9106
// exit ;
9104: GO 9172
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
9106: LD_ADDR_VAR 0 1
9110: PUSH
9111: LD_VAR 0 1
9115: PPUSH
9116: LD_VAR 0 2
9120: PPUSH
9121: LD_VAR 0 1
9125: PUSH
9126: LD_VAR 0 3
9130: ARRAY
9131: PPUSH
9132: CALL_OW 1
9136: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
9137: LD_ADDR_VAR 0 1
9141: PUSH
9142: LD_VAR 0 1
9146: PPUSH
9147: LD_VAR 0 3
9151: PPUSH
9152: LD_VAR 0 5
9156: PPUSH
9157: CALL_OW 1
9161: ST_TO_ADDR
// result := list ;
9162: LD_ADDR_VAR 0 4
9166: PUSH
9167: LD_VAR 0 1
9171: ST_TO_ADDR
// end ;
9172: LD_VAR 0 4
9176: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
9177: LD_INT 0
9179: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
9180: LD_ADDR_VAR 0 5
9184: PUSH
9185: LD_VAR 0 1
9189: PPUSH
9190: CALL_OW 250
9194: PPUSH
9195: LD_VAR 0 1
9199: PPUSH
9200: CALL_OW 251
9204: PPUSH
9205: LD_VAR 0 2
9209: PPUSH
9210: LD_VAR 0 3
9214: PPUSH
9215: LD_VAR 0 4
9219: PPUSH
9220: CALL 9230 0 5
9224: ST_TO_ADDR
// end ;
9225: LD_VAR 0 5
9229: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
9230: LD_INT 0
9232: PPUSH
9233: PPUSH
9234: PPUSH
9235: PPUSH
// if not list then
9236: LD_VAR 0 3
9240: NOT
9241: IFFALSE 9245
// exit ;
9243: GO 9633
// result := [ ] ;
9245: LD_ADDR_VAR 0 6
9249: PUSH
9250: EMPTY
9251: ST_TO_ADDR
// for i in list do
9252: LD_ADDR_VAR 0 7
9256: PUSH
9257: LD_VAR 0 3
9261: PUSH
9262: FOR_IN
9263: IFFALSE 9465
// begin tmp := GetDistUnitXY ( i , x , y ) ;
9265: LD_ADDR_VAR 0 9
9269: PUSH
9270: LD_VAR 0 7
9274: PPUSH
9275: LD_VAR 0 1
9279: PPUSH
9280: LD_VAR 0 2
9284: PPUSH
9285: CALL_OW 297
9289: ST_TO_ADDR
// if not result then
9290: LD_VAR 0 6
9294: NOT
9295: IFFALSE 9321
// result := [ [ i , tmp ] ] else
9297: LD_ADDR_VAR 0 6
9301: PUSH
9302: LD_VAR 0 7
9306: PUSH
9307: LD_VAR 0 9
9311: PUSH
9312: EMPTY
9313: LIST
9314: LIST
9315: PUSH
9316: EMPTY
9317: LIST
9318: ST_TO_ADDR
9319: GO 9463
// begin if result [ result ] [ 2 ] < tmp then
9321: LD_VAR 0 6
9325: PUSH
9326: LD_VAR 0 6
9330: ARRAY
9331: PUSH
9332: LD_INT 2
9334: ARRAY
9335: PUSH
9336: LD_VAR 0 9
9340: LESS
9341: IFFALSE 9383
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9343: LD_ADDR_VAR 0 6
9347: PUSH
9348: LD_VAR 0 6
9352: PPUSH
9353: LD_VAR 0 6
9357: PUSH
9358: LD_INT 1
9360: PLUS
9361: PPUSH
9362: LD_VAR 0 7
9366: PUSH
9367: LD_VAR 0 9
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: PPUSH
9376: CALL_OW 2
9380: ST_TO_ADDR
9381: GO 9463
// for j = 1 to result do
9383: LD_ADDR_VAR 0 8
9387: PUSH
9388: DOUBLE
9389: LD_INT 1
9391: DEC
9392: ST_TO_ADDR
9393: LD_VAR 0 6
9397: PUSH
9398: FOR_TO
9399: IFFALSE 9461
// begin if tmp < result [ j ] [ 2 ] then
9401: LD_VAR 0 9
9405: PUSH
9406: LD_VAR 0 6
9410: PUSH
9411: LD_VAR 0 8
9415: ARRAY
9416: PUSH
9417: LD_INT 2
9419: ARRAY
9420: LESS
9421: IFFALSE 9459
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9423: LD_ADDR_VAR 0 6
9427: PUSH
9428: LD_VAR 0 6
9432: PPUSH
9433: LD_VAR 0 8
9437: PPUSH
9438: LD_VAR 0 7
9442: PUSH
9443: LD_VAR 0 9
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: PPUSH
9452: CALL_OW 2
9456: ST_TO_ADDR
// break ;
9457: GO 9461
// end ; end ;
9459: GO 9398
9461: POP
9462: POP
// end ; end ;
9463: GO 9262
9465: POP
9466: POP
// if result and not asc then
9467: LD_VAR 0 6
9471: PUSH
9472: LD_VAR 0 4
9476: NOT
9477: AND
9478: IFFALSE 9553
// begin tmp := result ;
9480: LD_ADDR_VAR 0 9
9484: PUSH
9485: LD_VAR 0 6
9489: ST_TO_ADDR
// for i = tmp downto 1 do
9490: LD_ADDR_VAR 0 7
9494: PUSH
9495: DOUBLE
9496: LD_VAR 0 9
9500: INC
9501: ST_TO_ADDR
9502: LD_INT 1
9504: PUSH
9505: FOR_DOWNTO
9506: IFFALSE 9551
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9508: LD_ADDR_VAR 0 6
9512: PUSH
9513: LD_VAR 0 6
9517: PPUSH
9518: LD_VAR 0 9
9522: PUSH
9523: LD_VAR 0 7
9527: MINUS
9528: PUSH
9529: LD_INT 1
9531: PLUS
9532: PPUSH
9533: LD_VAR 0 9
9537: PUSH
9538: LD_VAR 0 7
9542: ARRAY
9543: PPUSH
9544: CALL_OW 1
9548: ST_TO_ADDR
9549: GO 9505
9551: POP
9552: POP
// end ; tmp := [ ] ;
9553: LD_ADDR_VAR 0 9
9557: PUSH
9558: EMPTY
9559: ST_TO_ADDR
// if mode then
9560: LD_VAR 0 5
9564: IFFALSE 9633
// begin for i = 1 to result do
9566: LD_ADDR_VAR 0 7
9570: PUSH
9571: DOUBLE
9572: LD_INT 1
9574: DEC
9575: ST_TO_ADDR
9576: LD_VAR 0 6
9580: PUSH
9581: FOR_TO
9582: IFFALSE 9621
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9584: LD_ADDR_VAR 0 9
9588: PUSH
9589: LD_VAR 0 9
9593: PPUSH
9594: LD_VAR 0 7
9598: PPUSH
9599: LD_VAR 0 6
9603: PUSH
9604: LD_VAR 0 7
9608: ARRAY
9609: PUSH
9610: LD_INT 1
9612: ARRAY
9613: PPUSH
9614: CALL_OW 1
9618: ST_TO_ADDR
9619: GO 9581
9621: POP
9622: POP
// result := tmp ;
9623: LD_ADDR_VAR 0 6
9627: PUSH
9628: LD_VAR 0 9
9632: ST_TO_ADDR
// end ; end ;
9633: LD_VAR 0 6
9637: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9638: LD_INT 0
9640: PPUSH
9641: PPUSH
9642: PPUSH
9643: PPUSH
9644: PPUSH
9645: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9646: LD_ADDR_VAR 0 5
9650: PUSH
9651: LD_INT 0
9653: PUSH
9654: LD_INT 0
9656: PUSH
9657: LD_INT 0
9659: PUSH
9660: EMPTY
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: ST_TO_ADDR
// if not x or not y then
9668: LD_VAR 0 2
9672: NOT
9673: PUSH
9674: LD_VAR 0 3
9678: NOT
9679: OR
9680: IFFALSE 9684
// exit ;
9682: GO 11334
// if not range then
9684: LD_VAR 0 4
9688: NOT
9689: IFFALSE 9699
// range := 10 ;
9691: LD_ADDR_VAR 0 4
9695: PUSH
9696: LD_INT 10
9698: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9699: LD_ADDR_VAR 0 8
9703: PUSH
9704: LD_INT 81
9706: PUSH
9707: LD_VAR 0 1
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: PUSH
9716: LD_INT 92
9718: PUSH
9719: LD_VAR 0 2
9723: PUSH
9724: LD_VAR 0 3
9728: PUSH
9729: LD_VAR 0 4
9733: PUSH
9734: EMPTY
9735: LIST
9736: LIST
9737: LIST
9738: LIST
9739: PUSH
9740: LD_INT 3
9742: PUSH
9743: LD_INT 21
9745: PUSH
9746: LD_INT 3
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: PUSH
9753: EMPTY
9754: LIST
9755: LIST
9756: PUSH
9757: EMPTY
9758: LIST
9759: LIST
9760: LIST
9761: PPUSH
9762: CALL_OW 69
9766: ST_TO_ADDR
// if not tmp then
9767: LD_VAR 0 8
9771: NOT
9772: IFFALSE 9776
// exit ;
9774: GO 11334
// for i in tmp do
9776: LD_ADDR_VAR 0 6
9780: PUSH
9781: LD_VAR 0 8
9785: PUSH
9786: FOR_IN
9787: IFFALSE 11309
// begin points := [ 0 , 0 , 0 ] ;
9789: LD_ADDR_VAR 0 9
9793: PUSH
9794: LD_INT 0
9796: PUSH
9797: LD_INT 0
9799: PUSH
9800: LD_INT 0
9802: PUSH
9803: EMPTY
9804: LIST
9805: LIST
9806: LIST
9807: ST_TO_ADDR
// bpoints := 1 ;
9808: LD_ADDR_VAR 0 10
9812: PUSH
9813: LD_INT 1
9815: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9816: LD_VAR 0 6
9820: PPUSH
9821: CALL_OW 247
9825: PUSH
9826: LD_INT 1
9828: DOUBLE
9829: EQUAL
9830: IFTRUE 9834
9832: GO 10412
9834: POP
// begin if GetClass ( i ) = 1 then
9835: LD_VAR 0 6
9839: PPUSH
9840: CALL_OW 257
9844: PUSH
9845: LD_INT 1
9847: EQUAL
9848: IFFALSE 9869
// points := [ 10 , 5 , 3 ] ;
9850: LD_ADDR_VAR 0 9
9854: PUSH
9855: LD_INT 10
9857: PUSH
9858: LD_INT 5
9860: PUSH
9861: LD_INT 3
9863: PUSH
9864: EMPTY
9865: LIST
9866: LIST
9867: LIST
9868: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9869: LD_VAR 0 6
9873: PPUSH
9874: CALL_OW 257
9878: PUSH
9879: LD_INT 2
9881: PUSH
9882: LD_INT 3
9884: PUSH
9885: LD_INT 4
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: LIST
9892: IN
9893: IFFALSE 9914
// points := [ 3 , 2 , 1 ] ;
9895: LD_ADDR_VAR 0 9
9899: PUSH
9900: LD_INT 3
9902: PUSH
9903: LD_INT 2
9905: PUSH
9906: LD_INT 1
9908: PUSH
9909: EMPTY
9910: LIST
9911: LIST
9912: LIST
9913: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9914: LD_VAR 0 6
9918: PPUSH
9919: CALL_OW 257
9923: PUSH
9924: LD_INT 5
9926: EQUAL
9927: IFFALSE 9948
// points := [ 130 , 5 , 2 ] ;
9929: LD_ADDR_VAR 0 9
9933: PUSH
9934: LD_INT 130
9936: PUSH
9937: LD_INT 5
9939: PUSH
9940: LD_INT 2
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: LIST
9947: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9948: LD_VAR 0 6
9952: PPUSH
9953: CALL_OW 257
9957: PUSH
9958: LD_INT 8
9960: EQUAL
9961: IFFALSE 9982
// points := [ 35 , 35 , 30 ] ;
9963: LD_ADDR_VAR 0 9
9967: PUSH
9968: LD_INT 35
9970: PUSH
9971: LD_INT 35
9973: PUSH
9974: LD_INT 30
9976: PUSH
9977: EMPTY
9978: LIST
9979: LIST
9980: LIST
9981: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9982: LD_VAR 0 6
9986: PPUSH
9987: CALL_OW 257
9991: PUSH
9992: LD_INT 9
9994: EQUAL
9995: IFFALSE 10016
// points := [ 20 , 55 , 40 ] ;
9997: LD_ADDR_VAR 0 9
10001: PUSH
10002: LD_INT 20
10004: PUSH
10005: LD_INT 55
10007: PUSH
10008: LD_INT 40
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: LIST
10015: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
10016: LD_VAR 0 6
10020: PPUSH
10021: CALL_OW 257
10025: PUSH
10026: LD_INT 12
10028: PUSH
10029: LD_INT 16
10031: PUSH
10032: EMPTY
10033: LIST
10034: LIST
10035: IN
10036: IFFALSE 10057
// points := [ 5 , 3 , 2 ] ;
10038: LD_ADDR_VAR 0 9
10042: PUSH
10043: LD_INT 5
10045: PUSH
10046: LD_INT 3
10048: PUSH
10049: LD_INT 2
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: LIST
10056: ST_TO_ADDR
// if GetClass ( i ) = 17 then
10057: LD_VAR 0 6
10061: PPUSH
10062: CALL_OW 257
10066: PUSH
10067: LD_INT 17
10069: EQUAL
10070: IFFALSE 10091
// points := [ 100 , 50 , 75 ] ;
10072: LD_ADDR_VAR 0 9
10076: PUSH
10077: LD_INT 100
10079: PUSH
10080: LD_INT 50
10082: PUSH
10083: LD_INT 75
10085: PUSH
10086: EMPTY
10087: LIST
10088: LIST
10089: LIST
10090: ST_TO_ADDR
// if GetClass ( i ) = 15 then
10091: LD_VAR 0 6
10095: PPUSH
10096: CALL_OW 257
10100: PUSH
10101: LD_INT 15
10103: EQUAL
10104: IFFALSE 10125
// points := [ 10 , 5 , 3 ] ;
10106: LD_ADDR_VAR 0 9
10110: PUSH
10111: LD_INT 10
10113: PUSH
10114: LD_INT 5
10116: PUSH
10117: LD_INT 3
10119: PUSH
10120: EMPTY
10121: LIST
10122: LIST
10123: LIST
10124: ST_TO_ADDR
// if GetClass ( i ) = 14 then
10125: LD_VAR 0 6
10129: PPUSH
10130: CALL_OW 257
10134: PUSH
10135: LD_INT 14
10137: EQUAL
10138: IFFALSE 10159
// points := [ 10 , 0 , 0 ] ;
10140: LD_ADDR_VAR 0 9
10144: PUSH
10145: LD_INT 10
10147: PUSH
10148: LD_INT 0
10150: PUSH
10151: LD_INT 0
10153: PUSH
10154: EMPTY
10155: LIST
10156: LIST
10157: LIST
10158: ST_TO_ADDR
// if GetClass ( i ) = 11 then
10159: LD_VAR 0 6
10163: PPUSH
10164: CALL_OW 257
10168: PUSH
10169: LD_INT 11
10171: EQUAL
10172: IFFALSE 10193
// points := [ 30 , 10 , 5 ] ;
10174: LD_ADDR_VAR 0 9
10178: PUSH
10179: LD_INT 30
10181: PUSH
10182: LD_INT 10
10184: PUSH
10185: LD_INT 5
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: LIST
10192: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
10193: LD_VAR 0 1
10197: PPUSH
10198: LD_INT 5
10200: PPUSH
10201: CALL_OW 321
10205: PUSH
10206: LD_INT 2
10208: EQUAL
10209: IFFALSE 10226
// bpoints := bpoints * 1.8 ;
10211: LD_ADDR_VAR 0 10
10215: PUSH
10216: LD_VAR 0 10
10220: PUSH
10221: LD_REAL  1.80000000000000E+0000
10224: MUL
10225: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
10226: LD_VAR 0 6
10230: PPUSH
10231: CALL_OW 257
10235: PUSH
10236: LD_INT 1
10238: PUSH
10239: LD_INT 2
10241: PUSH
10242: LD_INT 3
10244: PUSH
10245: LD_INT 4
10247: PUSH
10248: EMPTY
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: IN
10254: PUSH
10255: LD_VAR 0 1
10259: PPUSH
10260: LD_INT 51
10262: PPUSH
10263: CALL_OW 321
10267: PUSH
10268: LD_INT 2
10270: EQUAL
10271: AND
10272: IFFALSE 10289
// bpoints := bpoints * 1.2 ;
10274: LD_ADDR_VAR 0 10
10278: PUSH
10279: LD_VAR 0 10
10283: PUSH
10284: LD_REAL  1.20000000000000E+0000
10287: MUL
10288: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
10289: LD_VAR 0 6
10293: PPUSH
10294: CALL_OW 257
10298: PUSH
10299: LD_INT 5
10301: PUSH
10302: LD_INT 7
10304: PUSH
10305: LD_INT 9
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: LIST
10312: IN
10313: PUSH
10314: LD_VAR 0 1
10318: PPUSH
10319: LD_INT 52
10321: PPUSH
10322: CALL_OW 321
10326: PUSH
10327: LD_INT 2
10329: EQUAL
10330: AND
10331: IFFALSE 10348
// bpoints := bpoints * 1.5 ;
10333: LD_ADDR_VAR 0 10
10337: PUSH
10338: LD_VAR 0 10
10342: PUSH
10343: LD_REAL  1.50000000000000E+0000
10346: MUL
10347: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10348: LD_VAR 0 1
10352: PPUSH
10353: LD_INT 66
10355: PPUSH
10356: CALL_OW 321
10360: PUSH
10361: LD_INT 2
10363: EQUAL
10364: IFFALSE 10381
// bpoints := bpoints * 1.1 ;
10366: LD_ADDR_VAR 0 10
10370: PUSH
10371: LD_VAR 0 10
10375: PUSH
10376: LD_REAL  1.10000000000000E+0000
10379: MUL
10380: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10381: LD_ADDR_VAR 0 10
10385: PUSH
10386: LD_VAR 0 10
10390: PUSH
10391: LD_VAR 0 6
10395: PPUSH
10396: LD_INT 1
10398: PPUSH
10399: CALL_OW 259
10403: PUSH
10404: LD_REAL  1.15000000000000E+0000
10407: MUL
10408: MUL
10409: ST_TO_ADDR
// end ; unit_vehicle :
10410: GO 11238
10412: LD_INT 2
10414: DOUBLE
10415: EQUAL
10416: IFTRUE 10420
10418: GO 11226
10420: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10421: LD_VAR 0 6
10425: PPUSH
10426: CALL_OW 264
10430: PUSH
10431: LD_INT 2
10433: PUSH
10434: LD_INT 42
10436: PUSH
10437: LD_INT 24
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: LIST
10444: IN
10445: IFFALSE 10466
// points := [ 25 , 5 , 3 ] ;
10447: LD_ADDR_VAR 0 9
10451: PUSH
10452: LD_INT 25
10454: PUSH
10455: LD_INT 5
10457: PUSH
10458: LD_INT 3
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: LIST
10465: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10466: LD_VAR 0 6
10470: PPUSH
10471: CALL_OW 264
10475: PUSH
10476: LD_INT 4
10478: PUSH
10479: LD_INT 43
10481: PUSH
10482: LD_INT 25
10484: PUSH
10485: EMPTY
10486: LIST
10487: LIST
10488: LIST
10489: IN
10490: IFFALSE 10511
// points := [ 40 , 15 , 5 ] ;
10492: LD_ADDR_VAR 0 9
10496: PUSH
10497: LD_INT 40
10499: PUSH
10500: LD_INT 15
10502: PUSH
10503: LD_INT 5
10505: PUSH
10506: EMPTY
10507: LIST
10508: LIST
10509: LIST
10510: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10511: LD_VAR 0 6
10515: PPUSH
10516: CALL_OW 264
10520: PUSH
10521: LD_INT 3
10523: PUSH
10524: LD_INT 23
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: IN
10531: IFFALSE 10552
// points := [ 7 , 25 , 8 ] ;
10533: LD_ADDR_VAR 0 9
10537: PUSH
10538: LD_INT 7
10540: PUSH
10541: LD_INT 25
10543: PUSH
10544: LD_INT 8
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: LIST
10551: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10552: LD_VAR 0 6
10556: PPUSH
10557: CALL_OW 264
10561: PUSH
10562: LD_INT 5
10564: PUSH
10565: LD_INT 27
10567: PUSH
10568: LD_INT 44
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: LIST
10575: IN
10576: IFFALSE 10597
// points := [ 14 , 50 , 16 ] ;
10578: LD_ADDR_VAR 0 9
10582: PUSH
10583: LD_INT 14
10585: PUSH
10586: LD_INT 50
10588: PUSH
10589: LD_INT 16
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: LIST
10596: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10597: LD_VAR 0 6
10601: PPUSH
10602: CALL_OW 264
10606: PUSH
10607: LD_INT 6
10609: PUSH
10610: LD_INT 46
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: IN
10617: IFFALSE 10638
// points := [ 32 , 120 , 70 ] ;
10619: LD_ADDR_VAR 0 9
10623: PUSH
10624: LD_INT 32
10626: PUSH
10627: LD_INT 120
10629: PUSH
10630: LD_INT 70
10632: PUSH
10633: EMPTY
10634: LIST
10635: LIST
10636: LIST
10637: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10638: LD_VAR 0 6
10642: PPUSH
10643: CALL_OW 264
10647: PUSH
10648: LD_INT 7
10650: PUSH
10651: LD_INT 28
10653: PUSH
10654: LD_INT 45
10656: PUSH
10657: LD_INT 92
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: IN
10666: IFFALSE 10687
// points := [ 35 , 20 , 45 ] ;
10668: LD_ADDR_VAR 0 9
10672: PUSH
10673: LD_INT 35
10675: PUSH
10676: LD_INT 20
10678: PUSH
10679: LD_INT 45
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: LIST
10686: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10687: LD_VAR 0 6
10691: PPUSH
10692: CALL_OW 264
10696: PUSH
10697: LD_INT 47
10699: PUSH
10700: EMPTY
10701: LIST
10702: IN
10703: IFFALSE 10724
// points := [ 67 , 45 , 75 ] ;
10705: LD_ADDR_VAR 0 9
10709: PUSH
10710: LD_INT 67
10712: PUSH
10713: LD_INT 45
10715: PUSH
10716: LD_INT 75
10718: PUSH
10719: EMPTY
10720: LIST
10721: LIST
10722: LIST
10723: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10724: LD_VAR 0 6
10728: PPUSH
10729: CALL_OW 264
10733: PUSH
10734: LD_INT 26
10736: PUSH
10737: EMPTY
10738: LIST
10739: IN
10740: IFFALSE 10761
// points := [ 120 , 30 , 80 ] ;
10742: LD_ADDR_VAR 0 9
10746: PUSH
10747: LD_INT 120
10749: PUSH
10750: LD_INT 30
10752: PUSH
10753: LD_INT 80
10755: PUSH
10756: EMPTY
10757: LIST
10758: LIST
10759: LIST
10760: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10761: LD_VAR 0 6
10765: PPUSH
10766: CALL_OW 264
10770: PUSH
10771: LD_INT 22
10773: PUSH
10774: EMPTY
10775: LIST
10776: IN
10777: IFFALSE 10798
// points := [ 40 , 1 , 1 ] ;
10779: LD_ADDR_VAR 0 9
10783: PUSH
10784: LD_INT 40
10786: PUSH
10787: LD_INT 1
10789: PUSH
10790: LD_INT 1
10792: PUSH
10793: EMPTY
10794: LIST
10795: LIST
10796: LIST
10797: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10798: LD_VAR 0 6
10802: PPUSH
10803: CALL_OW 264
10807: PUSH
10808: LD_INT 29
10810: PUSH
10811: EMPTY
10812: LIST
10813: IN
10814: IFFALSE 10835
// points := [ 70 , 200 , 400 ] ;
10816: LD_ADDR_VAR 0 9
10820: PUSH
10821: LD_INT 70
10823: PUSH
10824: LD_INT 200
10826: PUSH
10827: LD_INT 400
10829: PUSH
10830: EMPTY
10831: LIST
10832: LIST
10833: LIST
10834: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10835: LD_VAR 0 6
10839: PPUSH
10840: CALL_OW 264
10844: PUSH
10845: LD_INT 14
10847: PUSH
10848: LD_INT 53
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: IN
10855: IFFALSE 10876
// points := [ 40 , 10 , 20 ] ;
10857: LD_ADDR_VAR 0 9
10861: PUSH
10862: LD_INT 40
10864: PUSH
10865: LD_INT 10
10867: PUSH
10868: LD_INT 20
10870: PUSH
10871: EMPTY
10872: LIST
10873: LIST
10874: LIST
10875: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10876: LD_VAR 0 6
10880: PPUSH
10881: CALL_OW 264
10885: PUSH
10886: LD_INT 9
10888: PUSH
10889: EMPTY
10890: LIST
10891: IN
10892: IFFALSE 10913
// points := [ 5 , 70 , 20 ] ;
10894: LD_ADDR_VAR 0 9
10898: PUSH
10899: LD_INT 5
10901: PUSH
10902: LD_INT 70
10904: PUSH
10905: LD_INT 20
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: LIST
10912: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10913: LD_VAR 0 6
10917: PPUSH
10918: CALL_OW 264
10922: PUSH
10923: LD_INT 10
10925: PUSH
10926: EMPTY
10927: LIST
10928: IN
10929: IFFALSE 10950
// points := [ 35 , 110 , 70 ] ;
10931: LD_ADDR_VAR 0 9
10935: PUSH
10936: LD_INT 35
10938: PUSH
10939: LD_INT 110
10941: PUSH
10942: LD_INT 70
10944: PUSH
10945: EMPTY
10946: LIST
10947: LIST
10948: LIST
10949: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10950: LD_VAR 0 6
10954: PPUSH
10955: CALL_OW 265
10959: PUSH
10960: LD_INT 25
10962: EQUAL
10963: IFFALSE 10984
// points := [ 80 , 65 , 100 ] ;
10965: LD_ADDR_VAR 0 9
10969: PUSH
10970: LD_INT 80
10972: PUSH
10973: LD_INT 65
10975: PUSH
10976: LD_INT 100
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: LIST
10983: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10984: LD_VAR 0 6
10988: PPUSH
10989: CALL_OW 263
10993: PUSH
10994: LD_INT 1
10996: EQUAL
10997: IFFALSE 11032
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10999: LD_ADDR_VAR 0 10
11003: PUSH
11004: LD_VAR 0 10
11008: PUSH
11009: LD_VAR 0 6
11013: PPUSH
11014: CALL_OW 311
11018: PPUSH
11019: LD_INT 3
11021: PPUSH
11022: CALL_OW 259
11026: PUSH
11027: LD_INT 4
11029: MUL
11030: MUL
11031: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
11032: LD_VAR 0 6
11036: PPUSH
11037: CALL_OW 263
11041: PUSH
11042: LD_INT 2
11044: EQUAL
11045: IFFALSE 11096
// begin j := IsControledBy ( i ) ;
11047: LD_ADDR_VAR 0 7
11051: PUSH
11052: LD_VAR 0 6
11056: PPUSH
11057: CALL_OW 312
11061: ST_TO_ADDR
// if j then
11062: LD_VAR 0 7
11066: IFFALSE 11096
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
11068: LD_ADDR_VAR 0 10
11072: PUSH
11073: LD_VAR 0 10
11077: PUSH
11078: LD_VAR 0 7
11082: PPUSH
11083: LD_INT 3
11085: PPUSH
11086: CALL_OW 259
11090: PUSH
11091: LD_INT 3
11093: MUL
11094: MUL
11095: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
11096: LD_VAR 0 6
11100: PPUSH
11101: CALL_OW 264
11105: PUSH
11106: LD_INT 5
11108: PUSH
11109: LD_INT 6
11111: PUSH
11112: LD_INT 46
11114: PUSH
11115: LD_INT 44
11117: PUSH
11118: LD_INT 47
11120: PUSH
11121: LD_INT 45
11123: PUSH
11124: LD_INT 28
11126: PUSH
11127: LD_INT 7
11129: PUSH
11130: LD_INT 27
11132: PUSH
11133: LD_INT 29
11135: PUSH
11136: EMPTY
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: IN
11148: PUSH
11149: LD_VAR 0 1
11153: PPUSH
11154: LD_INT 52
11156: PPUSH
11157: CALL_OW 321
11161: PUSH
11162: LD_INT 2
11164: EQUAL
11165: AND
11166: IFFALSE 11183
// bpoints := bpoints * 1.2 ;
11168: LD_ADDR_VAR 0 10
11172: PUSH
11173: LD_VAR 0 10
11177: PUSH
11178: LD_REAL  1.20000000000000E+0000
11181: MUL
11182: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
11183: LD_VAR 0 6
11187: PPUSH
11188: CALL_OW 264
11192: PUSH
11193: LD_INT 6
11195: PUSH
11196: LD_INT 46
11198: PUSH
11199: LD_INT 47
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: LIST
11206: IN
11207: IFFALSE 11224
// bpoints := bpoints * 1.2 ;
11209: LD_ADDR_VAR 0 10
11213: PUSH
11214: LD_VAR 0 10
11218: PUSH
11219: LD_REAL  1.20000000000000E+0000
11222: MUL
11223: ST_TO_ADDR
// end ; unit_building :
11224: GO 11238
11226: LD_INT 3
11228: DOUBLE
11229: EQUAL
11230: IFTRUE 11234
11232: GO 11237
11234: POP
// ; end ;
11235: GO 11238
11237: POP
// for j = 1 to 3 do
11238: LD_ADDR_VAR 0 7
11242: PUSH
11243: DOUBLE
11244: LD_INT 1
11246: DEC
11247: ST_TO_ADDR
11248: LD_INT 3
11250: PUSH
11251: FOR_TO
11252: IFFALSE 11305
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
11254: LD_ADDR_VAR 0 5
11258: PUSH
11259: LD_VAR 0 5
11263: PPUSH
11264: LD_VAR 0 7
11268: PPUSH
11269: LD_VAR 0 5
11273: PUSH
11274: LD_VAR 0 7
11278: ARRAY
11279: PUSH
11280: LD_VAR 0 9
11284: PUSH
11285: LD_VAR 0 7
11289: ARRAY
11290: PUSH
11291: LD_VAR 0 10
11295: MUL
11296: PLUS
11297: PPUSH
11298: CALL_OW 1
11302: ST_TO_ADDR
11303: GO 11251
11305: POP
11306: POP
// end ;
11307: GO 9786
11309: POP
11310: POP
// result := Replace ( result , 4 , tmp ) ;
11311: LD_ADDR_VAR 0 5
11315: PUSH
11316: LD_VAR 0 5
11320: PPUSH
11321: LD_INT 4
11323: PPUSH
11324: LD_VAR 0 8
11328: PPUSH
11329: CALL_OW 1
11333: ST_TO_ADDR
// end ;
11334: LD_VAR 0 5
11338: RET
// export function DangerAtRange ( unit , range ) ; begin
11339: LD_INT 0
11341: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11342: LD_ADDR_VAR 0 3
11346: PUSH
11347: LD_VAR 0 1
11351: PPUSH
11352: CALL_OW 255
11356: PPUSH
11357: LD_VAR 0 1
11361: PPUSH
11362: CALL_OW 250
11366: PPUSH
11367: LD_VAR 0 1
11371: PPUSH
11372: CALL_OW 251
11376: PPUSH
11377: LD_VAR 0 2
11381: PPUSH
11382: CALL 9638 0 4
11386: ST_TO_ADDR
// end ;
11387: LD_VAR 0 3
11391: RET
// export function DangerInArea ( side , area ) ; begin
11392: LD_INT 0
11394: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11395: LD_ADDR_VAR 0 3
11399: PUSH
11400: LD_VAR 0 2
11404: PPUSH
11405: LD_INT 81
11407: PUSH
11408: LD_VAR 0 1
11412: PUSH
11413: EMPTY
11414: LIST
11415: LIST
11416: PPUSH
11417: CALL_OW 70
11421: ST_TO_ADDR
// end ;
11422: LD_VAR 0 3
11426: RET
// export function IsExtension ( b ) ; begin
11427: LD_INT 0
11429: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11430: LD_ADDR_VAR 0 2
11434: PUSH
11435: LD_VAR 0 1
11439: PUSH
11440: LD_INT 23
11442: PUSH
11443: LD_INT 20
11445: PUSH
11446: LD_INT 22
11448: PUSH
11449: LD_INT 17
11451: PUSH
11452: LD_INT 24
11454: PUSH
11455: LD_INT 21
11457: PUSH
11458: LD_INT 19
11460: PUSH
11461: LD_INT 16
11463: PUSH
11464: LD_INT 25
11466: PUSH
11467: LD_INT 18
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: IN
11482: ST_TO_ADDR
// end ;
11483: LD_VAR 0 2
11487: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11488: LD_INT 0
11490: PPUSH
11491: PPUSH
11492: PPUSH
// result := [ ] ;
11493: LD_ADDR_VAR 0 4
11497: PUSH
11498: EMPTY
11499: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11500: LD_ADDR_VAR 0 5
11504: PUSH
11505: LD_VAR 0 2
11509: PPUSH
11510: LD_INT 21
11512: PUSH
11513: LD_INT 3
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: PPUSH
11520: CALL_OW 70
11524: ST_TO_ADDR
// if not tmp then
11525: LD_VAR 0 5
11529: NOT
11530: IFFALSE 11534
// exit ;
11532: GO 11598
// if checkLink then
11534: LD_VAR 0 3
11538: IFFALSE 11588
// begin for i in tmp do
11540: LD_ADDR_VAR 0 6
11544: PUSH
11545: LD_VAR 0 5
11549: PUSH
11550: FOR_IN
11551: IFFALSE 11586
// if GetBase ( i ) <> base then
11553: LD_VAR 0 6
11557: PPUSH
11558: CALL_OW 274
11562: PUSH
11563: LD_VAR 0 1
11567: NONEQUAL
11568: IFFALSE 11584
// ComLinkToBase ( base , i ) ;
11570: LD_VAR 0 1
11574: PPUSH
11575: LD_VAR 0 6
11579: PPUSH
11580: CALL_OW 169
11584: GO 11550
11586: POP
11587: POP
// end ; result := tmp ;
11588: LD_ADDR_VAR 0 4
11592: PUSH
11593: LD_VAR 0 5
11597: ST_TO_ADDR
// end ;
11598: LD_VAR 0 4
11602: RET
// export function ComComplete ( units , b ) ; var i ; begin
11603: LD_INT 0
11605: PPUSH
11606: PPUSH
// if not units then
11607: LD_VAR 0 1
11611: NOT
11612: IFFALSE 11616
// exit ;
11614: GO 11706
// for i in units do
11616: LD_ADDR_VAR 0 4
11620: PUSH
11621: LD_VAR 0 1
11625: PUSH
11626: FOR_IN
11627: IFFALSE 11704
// if BuildingStatus ( b ) = bs_build then
11629: LD_VAR 0 2
11633: PPUSH
11634: CALL_OW 461
11638: PUSH
11639: LD_INT 1
11641: EQUAL
11642: IFFALSE 11702
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11644: LD_VAR 0 4
11648: PPUSH
11649: LD_STRING h
11651: PUSH
11652: LD_VAR 0 2
11656: PPUSH
11657: CALL_OW 250
11661: PUSH
11662: LD_VAR 0 2
11666: PPUSH
11667: CALL_OW 251
11671: PUSH
11672: LD_VAR 0 2
11676: PUSH
11677: LD_INT 0
11679: PUSH
11680: LD_INT 0
11682: PUSH
11683: LD_INT 0
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: PUSH
11695: EMPTY
11696: LIST
11697: PPUSH
11698: CALL_OW 446
11702: GO 11626
11704: POP
11705: POP
// end ;
11706: LD_VAR 0 3
11710: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11711: LD_INT 0
11713: PPUSH
11714: PPUSH
11715: PPUSH
11716: PPUSH
11717: PPUSH
11718: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11719: LD_VAR 0 1
11723: NOT
11724: PUSH
11725: LD_VAR 0 1
11729: PPUSH
11730: CALL_OW 263
11734: PUSH
11735: LD_INT 2
11737: NONEQUAL
11738: OR
11739: IFFALSE 11743
// exit ;
11741: GO 12059
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11743: LD_ADDR_VAR 0 6
11747: PUSH
11748: LD_INT 22
11750: PUSH
11751: LD_VAR 0 1
11755: PPUSH
11756: CALL_OW 255
11760: PUSH
11761: EMPTY
11762: LIST
11763: LIST
11764: PUSH
11765: LD_INT 2
11767: PUSH
11768: LD_INT 30
11770: PUSH
11771: LD_INT 36
11773: PUSH
11774: EMPTY
11775: LIST
11776: LIST
11777: PUSH
11778: LD_INT 34
11780: PUSH
11781: LD_INT 31
11783: PUSH
11784: EMPTY
11785: LIST
11786: LIST
11787: PUSH
11788: EMPTY
11789: LIST
11790: LIST
11791: LIST
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: PPUSH
11797: CALL_OW 69
11801: ST_TO_ADDR
// if not tmp then
11802: LD_VAR 0 6
11806: NOT
11807: IFFALSE 11811
// exit ;
11809: GO 12059
// result := [ ] ;
11811: LD_ADDR_VAR 0 2
11815: PUSH
11816: EMPTY
11817: ST_TO_ADDR
// for i in tmp do
11818: LD_ADDR_VAR 0 3
11822: PUSH
11823: LD_VAR 0 6
11827: PUSH
11828: FOR_IN
11829: IFFALSE 11900
// begin t := UnitsInside ( i ) ;
11831: LD_ADDR_VAR 0 4
11835: PUSH
11836: LD_VAR 0 3
11840: PPUSH
11841: CALL_OW 313
11845: ST_TO_ADDR
// if t then
11846: LD_VAR 0 4
11850: IFFALSE 11898
// for j in t do
11852: LD_ADDR_VAR 0 7
11856: PUSH
11857: LD_VAR 0 4
11861: PUSH
11862: FOR_IN
11863: IFFALSE 11896
// result := Replace ( result , result + 1 , j ) ;
11865: LD_ADDR_VAR 0 2
11869: PUSH
11870: LD_VAR 0 2
11874: PPUSH
11875: LD_VAR 0 2
11879: PUSH
11880: LD_INT 1
11882: PLUS
11883: PPUSH
11884: LD_VAR 0 7
11888: PPUSH
11889: CALL_OW 1
11893: ST_TO_ADDR
11894: GO 11862
11896: POP
11897: POP
// end ;
11898: GO 11828
11900: POP
11901: POP
// if not result then
11902: LD_VAR 0 2
11906: NOT
11907: IFFALSE 11911
// exit ;
11909: GO 12059
// mech := result [ 1 ] ;
11911: LD_ADDR_VAR 0 5
11915: PUSH
11916: LD_VAR 0 2
11920: PUSH
11921: LD_INT 1
11923: ARRAY
11924: ST_TO_ADDR
// if result > 1 then
11925: LD_VAR 0 2
11929: PUSH
11930: LD_INT 1
11932: GREATER
11933: IFFALSE 12045
// begin for i = 2 to result do
11935: LD_ADDR_VAR 0 3
11939: PUSH
11940: DOUBLE
11941: LD_INT 2
11943: DEC
11944: ST_TO_ADDR
11945: LD_VAR 0 2
11949: PUSH
11950: FOR_TO
11951: IFFALSE 12043
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11953: LD_ADDR_VAR 0 4
11957: PUSH
11958: LD_VAR 0 2
11962: PUSH
11963: LD_VAR 0 3
11967: ARRAY
11968: PPUSH
11969: LD_INT 3
11971: PPUSH
11972: CALL_OW 259
11976: PUSH
11977: LD_VAR 0 2
11981: PUSH
11982: LD_VAR 0 3
11986: ARRAY
11987: PPUSH
11988: CALL_OW 432
11992: MINUS
11993: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11994: LD_VAR 0 4
11998: PUSH
11999: LD_VAR 0 5
12003: PPUSH
12004: LD_INT 3
12006: PPUSH
12007: CALL_OW 259
12011: PUSH
12012: LD_VAR 0 5
12016: PPUSH
12017: CALL_OW 432
12021: MINUS
12022: GREATEREQUAL
12023: IFFALSE 12041
// mech := result [ i ] ;
12025: LD_ADDR_VAR 0 5
12029: PUSH
12030: LD_VAR 0 2
12034: PUSH
12035: LD_VAR 0 3
12039: ARRAY
12040: ST_TO_ADDR
// end ;
12041: GO 11950
12043: POP
12044: POP
// end ; ComLinkTo ( vehicle , mech ) ;
12045: LD_VAR 0 1
12049: PPUSH
12050: LD_VAR 0 5
12054: PPUSH
12055: CALL_OW 135
// end ;
12059: LD_VAR 0 2
12063: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
12064: LD_INT 0
12066: PPUSH
12067: PPUSH
12068: PPUSH
12069: PPUSH
12070: PPUSH
12071: PPUSH
12072: PPUSH
12073: PPUSH
12074: PPUSH
12075: PPUSH
12076: PPUSH
12077: PPUSH
12078: PPUSH
// result := [ ] ;
12079: LD_ADDR_VAR 0 7
12083: PUSH
12084: EMPTY
12085: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
12086: LD_VAR 0 1
12090: PPUSH
12091: CALL_OW 266
12095: PUSH
12096: LD_INT 0
12098: PUSH
12099: LD_INT 1
12101: PUSH
12102: EMPTY
12103: LIST
12104: LIST
12105: IN
12106: NOT
12107: IFFALSE 12111
// exit ;
12109: GO 13745
// if name then
12111: LD_VAR 0 3
12115: IFFALSE 12131
// SetBName ( base_dep , name ) ;
12117: LD_VAR 0 1
12121: PPUSH
12122: LD_VAR 0 3
12126: PPUSH
12127: CALL_OW 500
// base := GetBase ( base_dep ) ;
12131: LD_ADDR_VAR 0 15
12135: PUSH
12136: LD_VAR 0 1
12140: PPUSH
12141: CALL_OW 274
12145: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12146: LD_ADDR_VAR 0 16
12150: PUSH
12151: LD_VAR 0 1
12155: PPUSH
12156: CALL_OW 255
12160: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
12161: LD_ADDR_VAR 0 17
12165: PUSH
12166: LD_VAR 0 1
12170: PPUSH
12171: CALL_OW 248
12175: ST_TO_ADDR
// if sources then
12176: LD_VAR 0 5
12180: IFFALSE 12227
// for i = 1 to 3 do
12182: LD_ADDR_VAR 0 8
12186: PUSH
12187: DOUBLE
12188: LD_INT 1
12190: DEC
12191: ST_TO_ADDR
12192: LD_INT 3
12194: PUSH
12195: FOR_TO
12196: IFFALSE 12225
// AddResourceType ( base , i , sources [ i ] ) ;
12198: LD_VAR 0 15
12202: PPUSH
12203: LD_VAR 0 8
12207: PPUSH
12208: LD_VAR 0 5
12212: PUSH
12213: LD_VAR 0 8
12217: ARRAY
12218: PPUSH
12219: CALL_OW 276
12223: GO 12195
12225: POP
12226: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
12227: LD_ADDR_VAR 0 18
12231: PUSH
12232: LD_VAR 0 15
12236: PPUSH
12237: LD_VAR 0 2
12241: PPUSH
12242: LD_INT 1
12244: PPUSH
12245: CALL 11488 0 3
12249: ST_TO_ADDR
// InitHc ;
12250: CALL_OW 19
// InitUc ;
12254: CALL_OW 18
// uc_side := side ;
12258: LD_ADDR_OWVAR 20
12262: PUSH
12263: LD_VAR 0 16
12267: ST_TO_ADDR
// uc_nation := nation ;
12268: LD_ADDR_OWVAR 21
12272: PUSH
12273: LD_VAR 0 17
12277: ST_TO_ADDR
// if buildings then
12278: LD_VAR 0 18
12282: IFFALSE 13604
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12284: LD_ADDR_VAR 0 19
12288: PUSH
12289: LD_VAR 0 18
12293: PPUSH
12294: LD_INT 2
12296: PUSH
12297: LD_INT 30
12299: PUSH
12300: LD_INT 29
12302: PUSH
12303: EMPTY
12304: LIST
12305: LIST
12306: PUSH
12307: LD_INT 30
12309: PUSH
12310: LD_INT 30
12312: PUSH
12313: EMPTY
12314: LIST
12315: LIST
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: LIST
12321: PPUSH
12322: CALL_OW 72
12326: ST_TO_ADDR
// if tmp then
12327: LD_VAR 0 19
12331: IFFALSE 12379
// for i in tmp do
12333: LD_ADDR_VAR 0 8
12337: PUSH
12338: LD_VAR 0 19
12342: PUSH
12343: FOR_IN
12344: IFFALSE 12377
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12346: LD_VAR 0 8
12350: PPUSH
12351: CALL_OW 250
12355: PPUSH
12356: LD_VAR 0 8
12360: PPUSH
12361: CALL_OW 251
12365: PPUSH
12366: LD_VAR 0 16
12370: PPUSH
12371: CALL_OW 441
12375: GO 12343
12377: POP
12378: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12379: LD_VAR 0 18
12383: PPUSH
12384: LD_INT 2
12386: PUSH
12387: LD_INT 30
12389: PUSH
12390: LD_INT 32
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: PUSH
12397: LD_INT 30
12399: PUSH
12400: LD_INT 33
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: PUSH
12407: EMPTY
12408: LIST
12409: LIST
12410: LIST
12411: PPUSH
12412: CALL_OW 72
12416: IFFALSE 12504
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12418: LD_ADDR_VAR 0 8
12422: PUSH
12423: LD_VAR 0 18
12427: PPUSH
12428: LD_INT 2
12430: PUSH
12431: LD_INT 30
12433: PUSH
12434: LD_INT 32
12436: PUSH
12437: EMPTY
12438: LIST
12439: LIST
12440: PUSH
12441: LD_INT 30
12443: PUSH
12444: LD_INT 33
12446: PUSH
12447: EMPTY
12448: LIST
12449: LIST
12450: PUSH
12451: EMPTY
12452: LIST
12453: LIST
12454: LIST
12455: PPUSH
12456: CALL_OW 72
12460: PUSH
12461: FOR_IN
12462: IFFALSE 12502
// begin if not GetBWeapon ( i ) then
12464: LD_VAR 0 8
12468: PPUSH
12469: CALL_OW 269
12473: NOT
12474: IFFALSE 12500
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12476: LD_VAR 0 8
12480: PPUSH
12481: LD_VAR 0 8
12485: PPUSH
12486: LD_VAR 0 2
12490: PPUSH
12491: CALL 13750 0 2
12495: PPUSH
12496: CALL_OW 431
// end ;
12500: GO 12461
12502: POP
12503: POP
// end ; for i = 1 to personel do
12504: LD_ADDR_VAR 0 8
12508: PUSH
12509: DOUBLE
12510: LD_INT 1
12512: DEC
12513: ST_TO_ADDR
12514: LD_VAR 0 6
12518: PUSH
12519: FOR_TO
12520: IFFALSE 13584
// begin if i > 4 then
12522: LD_VAR 0 8
12526: PUSH
12527: LD_INT 4
12529: GREATER
12530: IFFALSE 12534
// break ;
12532: GO 13584
// case i of 1 :
12534: LD_VAR 0 8
12538: PUSH
12539: LD_INT 1
12541: DOUBLE
12542: EQUAL
12543: IFTRUE 12547
12545: GO 12627
12547: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12548: LD_ADDR_VAR 0 12
12552: PUSH
12553: LD_VAR 0 18
12557: PPUSH
12558: LD_INT 22
12560: PUSH
12561: LD_VAR 0 16
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: PUSH
12570: LD_INT 58
12572: PUSH
12573: EMPTY
12574: LIST
12575: PUSH
12576: LD_INT 2
12578: PUSH
12579: LD_INT 30
12581: PUSH
12582: LD_INT 32
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: PUSH
12589: LD_INT 30
12591: PUSH
12592: LD_INT 4
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: PUSH
12599: LD_INT 30
12601: PUSH
12602: LD_INT 5
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: LIST
12613: LIST
12614: PUSH
12615: EMPTY
12616: LIST
12617: LIST
12618: LIST
12619: PPUSH
12620: CALL_OW 72
12624: ST_TO_ADDR
12625: GO 12849
12627: LD_INT 2
12629: DOUBLE
12630: EQUAL
12631: IFTRUE 12635
12633: GO 12697
12635: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12636: LD_ADDR_VAR 0 12
12640: PUSH
12641: LD_VAR 0 18
12645: PPUSH
12646: LD_INT 22
12648: PUSH
12649: LD_VAR 0 16
12653: PUSH
12654: EMPTY
12655: LIST
12656: LIST
12657: PUSH
12658: LD_INT 2
12660: PUSH
12661: LD_INT 30
12663: PUSH
12664: LD_INT 0
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: PUSH
12671: LD_INT 30
12673: PUSH
12674: LD_INT 1
12676: PUSH
12677: EMPTY
12678: LIST
12679: LIST
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: LIST
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: PPUSH
12690: CALL_OW 72
12694: ST_TO_ADDR
12695: GO 12849
12697: LD_INT 3
12699: DOUBLE
12700: EQUAL
12701: IFTRUE 12705
12703: GO 12767
12705: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12706: LD_ADDR_VAR 0 12
12710: PUSH
12711: LD_VAR 0 18
12715: PPUSH
12716: LD_INT 22
12718: PUSH
12719: LD_VAR 0 16
12723: PUSH
12724: EMPTY
12725: LIST
12726: LIST
12727: PUSH
12728: LD_INT 2
12730: PUSH
12731: LD_INT 30
12733: PUSH
12734: LD_INT 2
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: PUSH
12741: LD_INT 30
12743: PUSH
12744: LD_INT 3
12746: PUSH
12747: EMPTY
12748: LIST
12749: LIST
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: LIST
12755: PUSH
12756: EMPTY
12757: LIST
12758: LIST
12759: PPUSH
12760: CALL_OW 72
12764: ST_TO_ADDR
12765: GO 12849
12767: LD_INT 4
12769: DOUBLE
12770: EQUAL
12771: IFTRUE 12775
12773: GO 12848
12775: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12776: LD_ADDR_VAR 0 12
12780: PUSH
12781: LD_VAR 0 18
12785: PPUSH
12786: LD_INT 22
12788: PUSH
12789: LD_VAR 0 16
12793: PUSH
12794: EMPTY
12795: LIST
12796: LIST
12797: PUSH
12798: LD_INT 2
12800: PUSH
12801: LD_INT 30
12803: PUSH
12804: LD_INT 6
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: PUSH
12811: LD_INT 30
12813: PUSH
12814: LD_INT 7
12816: PUSH
12817: EMPTY
12818: LIST
12819: LIST
12820: PUSH
12821: LD_INT 30
12823: PUSH
12824: LD_INT 8
12826: PUSH
12827: EMPTY
12828: LIST
12829: LIST
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: PUSH
12837: EMPTY
12838: LIST
12839: LIST
12840: PPUSH
12841: CALL_OW 72
12845: ST_TO_ADDR
12846: GO 12849
12848: POP
// if i = 1 then
12849: LD_VAR 0 8
12853: PUSH
12854: LD_INT 1
12856: EQUAL
12857: IFFALSE 12968
// begin tmp := [ ] ;
12859: LD_ADDR_VAR 0 19
12863: PUSH
12864: EMPTY
12865: ST_TO_ADDR
// for j in f do
12866: LD_ADDR_VAR 0 9
12870: PUSH
12871: LD_VAR 0 12
12875: PUSH
12876: FOR_IN
12877: IFFALSE 12950
// if GetBType ( j ) = b_bunker then
12879: LD_VAR 0 9
12883: PPUSH
12884: CALL_OW 266
12888: PUSH
12889: LD_INT 32
12891: EQUAL
12892: IFFALSE 12919
// tmp := Insert ( tmp , 1 , j ) else
12894: LD_ADDR_VAR 0 19
12898: PUSH
12899: LD_VAR 0 19
12903: PPUSH
12904: LD_INT 1
12906: PPUSH
12907: LD_VAR 0 9
12911: PPUSH
12912: CALL_OW 2
12916: ST_TO_ADDR
12917: GO 12948
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12919: LD_ADDR_VAR 0 19
12923: PUSH
12924: LD_VAR 0 19
12928: PPUSH
12929: LD_VAR 0 19
12933: PUSH
12934: LD_INT 1
12936: PLUS
12937: PPUSH
12938: LD_VAR 0 9
12942: PPUSH
12943: CALL_OW 2
12947: ST_TO_ADDR
12948: GO 12876
12950: POP
12951: POP
// if tmp then
12952: LD_VAR 0 19
12956: IFFALSE 12968
// f := tmp ;
12958: LD_ADDR_VAR 0 12
12962: PUSH
12963: LD_VAR 0 19
12967: ST_TO_ADDR
// end ; x := personel [ i ] ;
12968: LD_ADDR_VAR 0 13
12972: PUSH
12973: LD_VAR 0 6
12977: PUSH
12978: LD_VAR 0 8
12982: ARRAY
12983: ST_TO_ADDR
// if x = - 1 then
12984: LD_VAR 0 13
12988: PUSH
12989: LD_INT 1
12991: NEG
12992: EQUAL
12993: IFFALSE 13202
// begin for j in f do
12995: LD_ADDR_VAR 0 9
12999: PUSH
13000: LD_VAR 0 12
13004: PUSH
13005: FOR_IN
13006: IFFALSE 13198
// repeat InitHc ;
13008: CALL_OW 19
// if GetBType ( j ) = b_barracks then
13012: LD_VAR 0 9
13016: PPUSH
13017: CALL_OW 266
13021: PUSH
13022: LD_INT 5
13024: EQUAL
13025: IFFALSE 13095
// begin if UnitsInside ( j ) < 3 then
13027: LD_VAR 0 9
13031: PPUSH
13032: CALL_OW 313
13036: PUSH
13037: LD_INT 3
13039: LESS
13040: IFFALSE 13076
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13042: LD_INT 0
13044: PPUSH
13045: LD_INT 5
13047: PUSH
13048: LD_INT 8
13050: PUSH
13051: LD_INT 9
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: LIST
13058: PUSH
13059: LD_VAR 0 17
13063: ARRAY
13064: PPUSH
13065: LD_VAR 0 4
13069: PPUSH
13070: CALL_OW 380
13074: GO 13093
// PrepareHuman ( false , i , skill ) ;
13076: LD_INT 0
13078: PPUSH
13079: LD_VAR 0 8
13083: PPUSH
13084: LD_VAR 0 4
13088: PPUSH
13089: CALL_OW 380
// end else
13093: GO 13112
// PrepareHuman ( false , i , skill ) ;
13095: LD_INT 0
13097: PPUSH
13098: LD_VAR 0 8
13102: PPUSH
13103: LD_VAR 0 4
13107: PPUSH
13108: CALL_OW 380
// un := CreateHuman ;
13112: LD_ADDR_VAR 0 14
13116: PUSH
13117: CALL_OW 44
13121: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13122: LD_ADDR_VAR 0 7
13126: PUSH
13127: LD_VAR 0 7
13131: PPUSH
13132: LD_INT 1
13134: PPUSH
13135: LD_VAR 0 14
13139: PPUSH
13140: CALL_OW 2
13144: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13145: LD_VAR 0 14
13149: PPUSH
13150: LD_VAR 0 9
13154: PPUSH
13155: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13159: LD_VAR 0 9
13163: PPUSH
13164: CALL_OW 313
13168: PUSH
13169: LD_INT 6
13171: EQUAL
13172: PUSH
13173: LD_VAR 0 9
13177: PPUSH
13178: CALL_OW 266
13182: PUSH
13183: LD_INT 32
13185: PUSH
13186: LD_INT 31
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: IN
13193: OR
13194: IFFALSE 13008
13196: GO 13005
13198: POP
13199: POP
// end else
13200: GO 13582
// for j = 1 to x do
13202: LD_ADDR_VAR 0 9
13206: PUSH
13207: DOUBLE
13208: LD_INT 1
13210: DEC
13211: ST_TO_ADDR
13212: LD_VAR 0 13
13216: PUSH
13217: FOR_TO
13218: IFFALSE 13580
// begin InitHc ;
13220: CALL_OW 19
// if not f then
13224: LD_VAR 0 12
13228: NOT
13229: IFFALSE 13318
// begin PrepareHuman ( false , i , skill ) ;
13231: LD_INT 0
13233: PPUSH
13234: LD_VAR 0 8
13238: PPUSH
13239: LD_VAR 0 4
13243: PPUSH
13244: CALL_OW 380
// un := CreateHuman ;
13248: LD_ADDR_VAR 0 14
13252: PUSH
13253: CALL_OW 44
13257: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13258: LD_ADDR_VAR 0 7
13262: PUSH
13263: LD_VAR 0 7
13267: PPUSH
13268: LD_INT 1
13270: PPUSH
13271: LD_VAR 0 14
13275: PPUSH
13276: CALL_OW 2
13280: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13281: LD_VAR 0 14
13285: PPUSH
13286: LD_VAR 0 1
13290: PPUSH
13291: CALL_OW 250
13295: PPUSH
13296: LD_VAR 0 1
13300: PPUSH
13301: CALL_OW 251
13305: PPUSH
13306: LD_INT 10
13308: PPUSH
13309: LD_INT 0
13311: PPUSH
13312: CALL_OW 50
// continue ;
13316: GO 13217
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13318: LD_VAR 0 12
13322: PUSH
13323: LD_INT 1
13325: ARRAY
13326: PPUSH
13327: CALL_OW 313
13331: PUSH
13332: LD_VAR 0 12
13336: PUSH
13337: LD_INT 1
13339: ARRAY
13340: PPUSH
13341: CALL_OW 266
13345: PUSH
13346: LD_INT 32
13348: PUSH
13349: LD_INT 31
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: IN
13356: AND
13357: PUSH
13358: LD_VAR 0 12
13362: PUSH
13363: LD_INT 1
13365: ARRAY
13366: PPUSH
13367: CALL_OW 313
13371: PUSH
13372: LD_INT 6
13374: EQUAL
13375: OR
13376: IFFALSE 13396
// f := Delete ( f , 1 ) ;
13378: LD_ADDR_VAR 0 12
13382: PUSH
13383: LD_VAR 0 12
13387: PPUSH
13388: LD_INT 1
13390: PPUSH
13391: CALL_OW 3
13395: ST_TO_ADDR
// if not f then
13396: LD_VAR 0 12
13400: NOT
13401: IFFALSE 13419
// begin x := x + 2 ;
13403: LD_ADDR_VAR 0 13
13407: PUSH
13408: LD_VAR 0 13
13412: PUSH
13413: LD_INT 2
13415: PLUS
13416: ST_TO_ADDR
// continue ;
13417: GO 13217
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13419: LD_VAR 0 12
13423: PUSH
13424: LD_INT 1
13426: ARRAY
13427: PPUSH
13428: CALL_OW 266
13432: PUSH
13433: LD_INT 5
13435: EQUAL
13436: IFFALSE 13510
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13438: LD_VAR 0 12
13442: PUSH
13443: LD_INT 1
13445: ARRAY
13446: PPUSH
13447: CALL_OW 313
13451: PUSH
13452: LD_INT 3
13454: LESS
13455: IFFALSE 13491
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13457: LD_INT 0
13459: PPUSH
13460: LD_INT 5
13462: PUSH
13463: LD_INT 8
13465: PUSH
13466: LD_INT 9
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: LIST
13473: PUSH
13474: LD_VAR 0 17
13478: ARRAY
13479: PPUSH
13480: LD_VAR 0 4
13484: PPUSH
13485: CALL_OW 380
13489: GO 13508
// PrepareHuman ( false , i , skill ) ;
13491: LD_INT 0
13493: PPUSH
13494: LD_VAR 0 8
13498: PPUSH
13499: LD_VAR 0 4
13503: PPUSH
13504: CALL_OW 380
// end else
13508: GO 13527
// PrepareHuman ( false , i , skill ) ;
13510: LD_INT 0
13512: PPUSH
13513: LD_VAR 0 8
13517: PPUSH
13518: LD_VAR 0 4
13522: PPUSH
13523: CALL_OW 380
// un := CreateHuman ;
13527: LD_ADDR_VAR 0 14
13531: PUSH
13532: CALL_OW 44
13536: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13537: LD_ADDR_VAR 0 7
13541: PUSH
13542: LD_VAR 0 7
13546: PPUSH
13547: LD_INT 1
13549: PPUSH
13550: LD_VAR 0 14
13554: PPUSH
13555: CALL_OW 2
13559: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13560: LD_VAR 0 14
13564: PPUSH
13565: LD_VAR 0 12
13569: PUSH
13570: LD_INT 1
13572: ARRAY
13573: PPUSH
13574: CALL_OW 52
// end ;
13578: GO 13217
13580: POP
13581: POP
// end ;
13582: GO 12519
13584: POP
13585: POP
// result := result ^ buildings ;
13586: LD_ADDR_VAR 0 7
13590: PUSH
13591: LD_VAR 0 7
13595: PUSH
13596: LD_VAR 0 18
13600: ADD
13601: ST_TO_ADDR
// end else
13602: GO 13745
// begin for i = 1 to personel do
13604: LD_ADDR_VAR 0 8
13608: PUSH
13609: DOUBLE
13610: LD_INT 1
13612: DEC
13613: ST_TO_ADDR
13614: LD_VAR 0 6
13618: PUSH
13619: FOR_TO
13620: IFFALSE 13743
// begin if i > 4 then
13622: LD_VAR 0 8
13626: PUSH
13627: LD_INT 4
13629: GREATER
13630: IFFALSE 13634
// break ;
13632: GO 13743
// x := personel [ i ] ;
13634: LD_ADDR_VAR 0 13
13638: PUSH
13639: LD_VAR 0 6
13643: PUSH
13644: LD_VAR 0 8
13648: ARRAY
13649: ST_TO_ADDR
// if x = - 1 then
13650: LD_VAR 0 13
13654: PUSH
13655: LD_INT 1
13657: NEG
13658: EQUAL
13659: IFFALSE 13663
// continue ;
13661: GO 13619
// PrepareHuman ( false , i , skill ) ;
13663: LD_INT 0
13665: PPUSH
13666: LD_VAR 0 8
13670: PPUSH
13671: LD_VAR 0 4
13675: PPUSH
13676: CALL_OW 380
// un := CreateHuman ;
13680: LD_ADDR_VAR 0 14
13684: PUSH
13685: CALL_OW 44
13689: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13690: LD_VAR 0 14
13694: PPUSH
13695: LD_VAR 0 1
13699: PPUSH
13700: CALL_OW 250
13704: PPUSH
13705: LD_VAR 0 1
13709: PPUSH
13710: CALL_OW 251
13714: PPUSH
13715: LD_INT 10
13717: PPUSH
13718: LD_INT 0
13720: PPUSH
13721: CALL_OW 50
// result := result ^ un ;
13725: LD_ADDR_VAR 0 7
13729: PUSH
13730: LD_VAR 0 7
13734: PUSH
13735: LD_VAR 0 14
13739: ADD
13740: ST_TO_ADDR
// end ;
13741: GO 13619
13743: POP
13744: POP
// end ; end ;
13745: LD_VAR 0 7
13749: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13750: LD_INT 0
13752: PPUSH
13753: PPUSH
13754: PPUSH
13755: PPUSH
13756: PPUSH
13757: PPUSH
13758: PPUSH
13759: PPUSH
13760: PPUSH
13761: PPUSH
13762: PPUSH
13763: PPUSH
13764: PPUSH
13765: PPUSH
13766: PPUSH
13767: PPUSH
// result := false ;
13768: LD_ADDR_VAR 0 3
13772: PUSH
13773: LD_INT 0
13775: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13776: LD_VAR 0 1
13780: NOT
13781: PUSH
13782: LD_VAR 0 1
13786: PPUSH
13787: CALL_OW 266
13791: PUSH
13792: LD_INT 32
13794: PUSH
13795: LD_INT 33
13797: PUSH
13798: EMPTY
13799: LIST
13800: LIST
13801: IN
13802: NOT
13803: OR
13804: IFFALSE 13808
// exit ;
13806: GO 14917
// nat := GetNation ( tower ) ;
13808: LD_ADDR_VAR 0 12
13812: PUSH
13813: LD_VAR 0 1
13817: PPUSH
13818: CALL_OW 248
13822: ST_TO_ADDR
// side := GetSide ( tower ) ;
13823: LD_ADDR_VAR 0 16
13827: PUSH
13828: LD_VAR 0 1
13832: PPUSH
13833: CALL_OW 255
13837: ST_TO_ADDR
// x := GetX ( tower ) ;
13838: LD_ADDR_VAR 0 10
13842: PUSH
13843: LD_VAR 0 1
13847: PPUSH
13848: CALL_OW 250
13852: ST_TO_ADDR
// y := GetY ( tower ) ;
13853: LD_ADDR_VAR 0 11
13857: PUSH
13858: LD_VAR 0 1
13862: PPUSH
13863: CALL_OW 251
13867: ST_TO_ADDR
// if not x or not y then
13868: LD_VAR 0 10
13872: NOT
13873: PUSH
13874: LD_VAR 0 11
13878: NOT
13879: OR
13880: IFFALSE 13884
// exit ;
13882: GO 14917
// weapon := 0 ;
13884: LD_ADDR_VAR 0 18
13888: PUSH
13889: LD_INT 0
13891: ST_TO_ADDR
// fac_list := [ ] ;
13892: LD_ADDR_VAR 0 17
13896: PUSH
13897: EMPTY
13898: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13899: LD_ADDR_VAR 0 6
13903: PUSH
13904: LD_VAR 0 1
13908: PPUSH
13909: CALL_OW 274
13913: PPUSH
13914: LD_VAR 0 2
13918: PPUSH
13919: LD_INT 0
13921: PPUSH
13922: CALL 11488 0 3
13926: PPUSH
13927: LD_INT 30
13929: PUSH
13930: LD_INT 3
13932: PUSH
13933: EMPTY
13934: LIST
13935: LIST
13936: PPUSH
13937: CALL_OW 72
13941: ST_TO_ADDR
// if not factories then
13942: LD_VAR 0 6
13946: NOT
13947: IFFALSE 13951
// exit ;
13949: GO 14917
// for i in factories do
13951: LD_ADDR_VAR 0 8
13955: PUSH
13956: LD_VAR 0 6
13960: PUSH
13961: FOR_IN
13962: IFFALSE 13987
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13964: LD_ADDR_VAR 0 17
13968: PUSH
13969: LD_VAR 0 17
13973: PUSH
13974: LD_VAR 0 8
13978: PPUSH
13979: CALL_OW 478
13983: UNION
13984: ST_TO_ADDR
13985: GO 13961
13987: POP
13988: POP
// if not fac_list then
13989: LD_VAR 0 17
13993: NOT
13994: IFFALSE 13998
// exit ;
13996: GO 14917
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13998: LD_ADDR_VAR 0 5
14002: PUSH
14003: LD_INT 4
14005: PUSH
14006: LD_INT 5
14008: PUSH
14009: LD_INT 9
14011: PUSH
14012: LD_INT 10
14014: PUSH
14015: LD_INT 6
14017: PUSH
14018: LD_INT 7
14020: PUSH
14021: LD_INT 11
14023: PUSH
14024: EMPTY
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: PUSH
14033: LD_INT 27
14035: PUSH
14036: LD_INT 28
14038: PUSH
14039: LD_INT 26
14041: PUSH
14042: LD_INT 30
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: PUSH
14051: LD_INT 43
14053: PUSH
14054: LD_INT 44
14056: PUSH
14057: LD_INT 46
14059: PUSH
14060: LD_INT 45
14062: PUSH
14063: LD_INT 47
14065: PUSH
14066: LD_INT 49
14068: PUSH
14069: EMPTY
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: PUSH
14077: EMPTY
14078: LIST
14079: LIST
14080: LIST
14081: PUSH
14082: LD_VAR 0 12
14086: ARRAY
14087: ST_TO_ADDR
// list := list isect fac_list ;
14088: LD_ADDR_VAR 0 5
14092: PUSH
14093: LD_VAR 0 5
14097: PUSH
14098: LD_VAR 0 17
14102: ISECT
14103: ST_TO_ADDR
// if not list then
14104: LD_VAR 0 5
14108: NOT
14109: IFFALSE 14113
// exit ;
14111: GO 14917
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
14113: LD_VAR 0 12
14117: PUSH
14118: LD_INT 3
14120: EQUAL
14121: PUSH
14122: LD_INT 49
14124: PUSH
14125: LD_VAR 0 5
14129: IN
14130: AND
14131: PUSH
14132: LD_INT 31
14134: PPUSH
14135: LD_VAR 0 16
14139: PPUSH
14140: CALL_OW 321
14144: PUSH
14145: LD_INT 2
14147: EQUAL
14148: AND
14149: IFFALSE 14209
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
14151: LD_INT 22
14153: PUSH
14154: LD_VAR 0 16
14158: PUSH
14159: EMPTY
14160: LIST
14161: LIST
14162: PUSH
14163: LD_INT 35
14165: PUSH
14166: LD_INT 49
14168: PUSH
14169: EMPTY
14170: LIST
14171: LIST
14172: PUSH
14173: LD_INT 91
14175: PUSH
14176: LD_VAR 0 1
14180: PUSH
14181: LD_INT 10
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: LIST
14188: PUSH
14189: EMPTY
14190: LIST
14191: LIST
14192: LIST
14193: PPUSH
14194: CALL_OW 69
14198: NOT
14199: IFFALSE 14209
// weapon := ru_time_lapser ;
14201: LD_ADDR_VAR 0 18
14205: PUSH
14206: LD_INT 49
14208: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
14209: LD_VAR 0 12
14213: PUSH
14214: LD_INT 1
14216: PUSH
14217: LD_INT 2
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: IN
14224: PUSH
14225: LD_INT 11
14227: PUSH
14228: LD_VAR 0 5
14232: IN
14233: PUSH
14234: LD_INT 30
14236: PUSH
14237: LD_VAR 0 5
14241: IN
14242: OR
14243: AND
14244: PUSH
14245: LD_INT 6
14247: PPUSH
14248: LD_VAR 0 16
14252: PPUSH
14253: CALL_OW 321
14257: PUSH
14258: LD_INT 2
14260: EQUAL
14261: AND
14262: IFFALSE 14427
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
14264: LD_INT 22
14266: PUSH
14267: LD_VAR 0 16
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: PUSH
14276: LD_INT 2
14278: PUSH
14279: LD_INT 35
14281: PUSH
14282: LD_INT 11
14284: PUSH
14285: EMPTY
14286: LIST
14287: LIST
14288: PUSH
14289: LD_INT 35
14291: PUSH
14292: LD_INT 30
14294: PUSH
14295: EMPTY
14296: LIST
14297: LIST
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: LIST
14303: PUSH
14304: LD_INT 91
14306: PUSH
14307: LD_VAR 0 1
14311: PUSH
14312: LD_INT 18
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: LIST
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: LIST
14324: PPUSH
14325: CALL_OW 69
14329: NOT
14330: PUSH
14331: LD_INT 22
14333: PUSH
14334: LD_VAR 0 16
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: PUSH
14343: LD_INT 2
14345: PUSH
14346: LD_INT 30
14348: PUSH
14349: LD_INT 32
14351: PUSH
14352: EMPTY
14353: LIST
14354: LIST
14355: PUSH
14356: LD_INT 30
14358: PUSH
14359: LD_INT 33
14361: PUSH
14362: EMPTY
14363: LIST
14364: LIST
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: LIST
14370: PUSH
14371: LD_INT 91
14373: PUSH
14374: LD_VAR 0 1
14378: PUSH
14379: LD_INT 12
14381: PUSH
14382: EMPTY
14383: LIST
14384: LIST
14385: LIST
14386: PUSH
14387: EMPTY
14388: LIST
14389: LIST
14390: LIST
14391: PUSH
14392: EMPTY
14393: LIST
14394: PPUSH
14395: CALL_OW 69
14399: PUSH
14400: LD_INT 2
14402: GREATER
14403: AND
14404: IFFALSE 14427
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14406: LD_ADDR_VAR 0 18
14410: PUSH
14411: LD_INT 11
14413: PUSH
14414: LD_INT 30
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: PUSH
14421: LD_VAR 0 12
14425: ARRAY
14426: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14427: LD_VAR 0 18
14431: NOT
14432: PUSH
14433: LD_INT 40
14435: PPUSH
14436: LD_VAR 0 16
14440: PPUSH
14441: CALL_OW 321
14445: PUSH
14446: LD_INT 2
14448: EQUAL
14449: AND
14450: PUSH
14451: LD_INT 7
14453: PUSH
14454: LD_VAR 0 5
14458: IN
14459: PUSH
14460: LD_INT 28
14462: PUSH
14463: LD_VAR 0 5
14467: IN
14468: OR
14469: PUSH
14470: LD_INT 45
14472: PUSH
14473: LD_VAR 0 5
14477: IN
14478: OR
14479: AND
14480: IFFALSE 14734
// begin hex := GetHexInfo ( x , y ) ;
14482: LD_ADDR_VAR 0 4
14486: PUSH
14487: LD_VAR 0 10
14491: PPUSH
14492: LD_VAR 0 11
14496: PPUSH
14497: CALL_OW 546
14501: ST_TO_ADDR
// if hex [ 1 ] then
14502: LD_VAR 0 4
14506: PUSH
14507: LD_INT 1
14509: ARRAY
14510: IFFALSE 14514
// exit ;
14512: GO 14917
// height := hex [ 2 ] ;
14514: LD_ADDR_VAR 0 15
14518: PUSH
14519: LD_VAR 0 4
14523: PUSH
14524: LD_INT 2
14526: ARRAY
14527: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14528: LD_ADDR_VAR 0 14
14532: PUSH
14533: LD_INT 0
14535: PUSH
14536: LD_INT 2
14538: PUSH
14539: LD_INT 3
14541: PUSH
14542: LD_INT 5
14544: PUSH
14545: EMPTY
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: ST_TO_ADDR
// for i in tmp do
14551: LD_ADDR_VAR 0 8
14555: PUSH
14556: LD_VAR 0 14
14560: PUSH
14561: FOR_IN
14562: IFFALSE 14732
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14564: LD_ADDR_VAR 0 9
14568: PUSH
14569: LD_VAR 0 10
14573: PPUSH
14574: LD_VAR 0 8
14578: PPUSH
14579: LD_INT 5
14581: PPUSH
14582: CALL_OW 272
14586: PUSH
14587: LD_VAR 0 11
14591: PPUSH
14592: LD_VAR 0 8
14596: PPUSH
14597: LD_INT 5
14599: PPUSH
14600: CALL_OW 273
14604: PUSH
14605: EMPTY
14606: LIST
14607: LIST
14608: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14609: LD_VAR 0 9
14613: PUSH
14614: LD_INT 1
14616: ARRAY
14617: PPUSH
14618: LD_VAR 0 9
14622: PUSH
14623: LD_INT 2
14625: ARRAY
14626: PPUSH
14627: CALL_OW 488
14631: IFFALSE 14730
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14633: LD_ADDR_VAR 0 4
14637: PUSH
14638: LD_VAR 0 9
14642: PUSH
14643: LD_INT 1
14645: ARRAY
14646: PPUSH
14647: LD_VAR 0 9
14651: PUSH
14652: LD_INT 2
14654: ARRAY
14655: PPUSH
14656: CALL_OW 546
14660: ST_TO_ADDR
// if hex [ 1 ] then
14661: LD_VAR 0 4
14665: PUSH
14666: LD_INT 1
14668: ARRAY
14669: IFFALSE 14673
// continue ;
14671: GO 14561
// h := hex [ 2 ] ;
14673: LD_ADDR_VAR 0 13
14677: PUSH
14678: LD_VAR 0 4
14682: PUSH
14683: LD_INT 2
14685: ARRAY
14686: ST_TO_ADDR
// if h + 7 < height then
14687: LD_VAR 0 13
14691: PUSH
14692: LD_INT 7
14694: PLUS
14695: PUSH
14696: LD_VAR 0 15
14700: LESS
14701: IFFALSE 14730
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14703: LD_ADDR_VAR 0 18
14707: PUSH
14708: LD_INT 7
14710: PUSH
14711: LD_INT 28
14713: PUSH
14714: LD_INT 45
14716: PUSH
14717: EMPTY
14718: LIST
14719: LIST
14720: LIST
14721: PUSH
14722: LD_VAR 0 12
14726: ARRAY
14727: ST_TO_ADDR
// break ;
14728: GO 14732
// end ; end ; end ;
14730: GO 14561
14732: POP
14733: POP
// end ; if not weapon then
14734: LD_VAR 0 18
14738: NOT
14739: IFFALSE 14799
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14741: LD_ADDR_VAR 0 5
14745: PUSH
14746: LD_VAR 0 5
14750: PUSH
14751: LD_INT 11
14753: PUSH
14754: LD_INT 30
14756: PUSH
14757: LD_INT 49
14759: PUSH
14760: EMPTY
14761: LIST
14762: LIST
14763: LIST
14764: DIFF
14765: ST_TO_ADDR
// if not list then
14766: LD_VAR 0 5
14770: NOT
14771: IFFALSE 14775
// exit ;
14773: GO 14917
// weapon := list [ rand ( 1 , list ) ] ;
14775: LD_ADDR_VAR 0 18
14779: PUSH
14780: LD_VAR 0 5
14784: PUSH
14785: LD_INT 1
14787: PPUSH
14788: LD_VAR 0 5
14792: PPUSH
14793: CALL_OW 12
14797: ARRAY
14798: ST_TO_ADDR
// end ; if weapon then
14799: LD_VAR 0 18
14803: IFFALSE 14917
// begin tmp := CostOfWeapon ( weapon ) ;
14805: LD_ADDR_VAR 0 14
14809: PUSH
14810: LD_VAR 0 18
14814: PPUSH
14815: CALL_OW 451
14819: ST_TO_ADDR
// j := GetBase ( tower ) ;
14820: LD_ADDR_VAR 0 9
14824: PUSH
14825: LD_VAR 0 1
14829: PPUSH
14830: CALL_OW 274
14834: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14835: LD_VAR 0 9
14839: PPUSH
14840: LD_INT 1
14842: PPUSH
14843: CALL_OW 275
14847: PUSH
14848: LD_VAR 0 14
14852: PUSH
14853: LD_INT 1
14855: ARRAY
14856: GREATEREQUAL
14857: PUSH
14858: LD_VAR 0 9
14862: PPUSH
14863: LD_INT 2
14865: PPUSH
14866: CALL_OW 275
14870: PUSH
14871: LD_VAR 0 14
14875: PUSH
14876: LD_INT 2
14878: ARRAY
14879: GREATEREQUAL
14880: AND
14881: PUSH
14882: LD_VAR 0 9
14886: PPUSH
14887: LD_INT 3
14889: PPUSH
14890: CALL_OW 275
14894: PUSH
14895: LD_VAR 0 14
14899: PUSH
14900: LD_INT 3
14902: ARRAY
14903: GREATEREQUAL
14904: AND
14905: IFFALSE 14917
// result := weapon ;
14907: LD_ADDR_VAR 0 3
14911: PUSH
14912: LD_VAR 0 18
14916: ST_TO_ADDR
// end ; end ;
14917: LD_VAR 0 3
14921: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14922: LD_INT 0
14924: PPUSH
14925: PPUSH
// result := true ;
14926: LD_ADDR_VAR 0 3
14930: PUSH
14931: LD_INT 1
14933: ST_TO_ADDR
// if array1 = array2 then
14934: LD_VAR 0 1
14938: PUSH
14939: LD_VAR 0 2
14943: EQUAL
14944: IFFALSE 15004
// begin for i = 1 to array1 do
14946: LD_ADDR_VAR 0 4
14950: PUSH
14951: DOUBLE
14952: LD_INT 1
14954: DEC
14955: ST_TO_ADDR
14956: LD_VAR 0 1
14960: PUSH
14961: FOR_TO
14962: IFFALSE 15000
// if array1 [ i ] <> array2 [ i ] then
14964: LD_VAR 0 1
14968: PUSH
14969: LD_VAR 0 4
14973: ARRAY
14974: PUSH
14975: LD_VAR 0 2
14979: PUSH
14980: LD_VAR 0 4
14984: ARRAY
14985: NONEQUAL
14986: IFFALSE 14998
// begin result := false ;
14988: LD_ADDR_VAR 0 3
14992: PUSH
14993: LD_INT 0
14995: ST_TO_ADDR
// break ;
14996: GO 15000
// end ;
14998: GO 14961
15000: POP
15001: POP
// end else
15002: GO 15012
// result := false ;
15004: LD_ADDR_VAR 0 3
15008: PUSH
15009: LD_INT 0
15011: ST_TO_ADDR
// end ;
15012: LD_VAR 0 3
15016: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
15017: LD_INT 0
15019: PPUSH
15020: PPUSH
// if not array1 or not array2 then
15021: LD_VAR 0 1
15025: NOT
15026: PUSH
15027: LD_VAR 0 2
15031: NOT
15032: OR
15033: IFFALSE 15037
// exit ;
15035: GO 15101
// result := true ;
15037: LD_ADDR_VAR 0 3
15041: PUSH
15042: LD_INT 1
15044: ST_TO_ADDR
// for i = 1 to array1 do
15045: LD_ADDR_VAR 0 4
15049: PUSH
15050: DOUBLE
15051: LD_INT 1
15053: DEC
15054: ST_TO_ADDR
15055: LD_VAR 0 1
15059: PUSH
15060: FOR_TO
15061: IFFALSE 15099
// if array1 [ i ] <> array2 [ i ] then
15063: LD_VAR 0 1
15067: PUSH
15068: LD_VAR 0 4
15072: ARRAY
15073: PUSH
15074: LD_VAR 0 2
15078: PUSH
15079: LD_VAR 0 4
15083: ARRAY
15084: NONEQUAL
15085: IFFALSE 15097
// begin result := false ;
15087: LD_ADDR_VAR 0 3
15091: PUSH
15092: LD_INT 0
15094: ST_TO_ADDR
// break ;
15095: GO 15099
// end ;
15097: GO 15060
15099: POP
15100: POP
// end ;
15101: LD_VAR 0 3
15105: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
15106: LD_INT 0
15108: PPUSH
15109: PPUSH
15110: PPUSH
// pom := GetBase ( fac ) ;
15111: LD_ADDR_VAR 0 5
15115: PUSH
15116: LD_VAR 0 1
15120: PPUSH
15121: CALL_OW 274
15125: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
15126: LD_ADDR_VAR 0 4
15130: PUSH
15131: LD_VAR 0 2
15135: PUSH
15136: LD_INT 1
15138: ARRAY
15139: PPUSH
15140: LD_VAR 0 2
15144: PUSH
15145: LD_INT 2
15147: ARRAY
15148: PPUSH
15149: LD_VAR 0 2
15153: PUSH
15154: LD_INT 3
15156: ARRAY
15157: PPUSH
15158: LD_VAR 0 2
15162: PUSH
15163: LD_INT 4
15165: ARRAY
15166: PPUSH
15167: CALL_OW 449
15171: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15172: LD_ADDR_VAR 0 3
15176: PUSH
15177: LD_VAR 0 5
15181: PPUSH
15182: LD_INT 1
15184: PPUSH
15185: CALL_OW 275
15189: PUSH
15190: LD_VAR 0 4
15194: PUSH
15195: LD_INT 1
15197: ARRAY
15198: GREATEREQUAL
15199: PUSH
15200: LD_VAR 0 5
15204: PPUSH
15205: LD_INT 2
15207: PPUSH
15208: CALL_OW 275
15212: PUSH
15213: LD_VAR 0 4
15217: PUSH
15218: LD_INT 2
15220: ARRAY
15221: GREATEREQUAL
15222: AND
15223: PUSH
15224: LD_VAR 0 5
15228: PPUSH
15229: LD_INT 3
15231: PPUSH
15232: CALL_OW 275
15236: PUSH
15237: LD_VAR 0 4
15241: PUSH
15242: LD_INT 3
15244: ARRAY
15245: GREATEREQUAL
15246: AND
15247: ST_TO_ADDR
// end ;
15248: LD_VAR 0 3
15252: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
15253: LD_INT 0
15255: PPUSH
15256: PPUSH
15257: PPUSH
15258: PPUSH
// pom := GetBase ( building ) ;
15259: LD_ADDR_VAR 0 3
15263: PUSH
15264: LD_VAR 0 1
15268: PPUSH
15269: CALL_OW 274
15273: ST_TO_ADDR
// if not pom then
15274: LD_VAR 0 3
15278: NOT
15279: IFFALSE 15283
// exit ;
15281: GO 15453
// btype := GetBType ( building ) ;
15283: LD_ADDR_VAR 0 5
15287: PUSH
15288: LD_VAR 0 1
15292: PPUSH
15293: CALL_OW 266
15297: ST_TO_ADDR
// if btype = b_armoury then
15298: LD_VAR 0 5
15302: PUSH
15303: LD_INT 4
15305: EQUAL
15306: IFFALSE 15316
// btype := b_barracks ;
15308: LD_ADDR_VAR 0 5
15312: PUSH
15313: LD_INT 5
15315: ST_TO_ADDR
// if btype = b_depot then
15316: LD_VAR 0 5
15320: PUSH
15321: LD_INT 0
15323: EQUAL
15324: IFFALSE 15334
// btype := b_warehouse ;
15326: LD_ADDR_VAR 0 5
15330: PUSH
15331: LD_INT 1
15333: ST_TO_ADDR
// if btype = b_workshop then
15334: LD_VAR 0 5
15338: PUSH
15339: LD_INT 2
15341: EQUAL
15342: IFFALSE 15352
// btype := b_factory ;
15344: LD_ADDR_VAR 0 5
15348: PUSH
15349: LD_INT 3
15351: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15352: LD_ADDR_VAR 0 4
15356: PUSH
15357: LD_VAR 0 5
15361: PPUSH
15362: LD_VAR 0 1
15366: PPUSH
15367: CALL_OW 248
15371: PPUSH
15372: CALL_OW 450
15376: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15377: LD_ADDR_VAR 0 2
15381: PUSH
15382: LD_VAR 0 3
15386: PPUSH
15387: LD_INT 1
15389: PPUSH
15390: CALL_OW 275
15394: PUSH
15395: LD_VAR 0 4
15399: PUSH
15400: LD_INT 1
15402: ARRAY
15403: GREATEREQUAL
15404: PUSH
15405: LD_VAR 0 3
15409: PPUSH
15410: LD_INT 2
15412: PPUSH
15413: CALL_OW 275
15417: PUSH
15418: LD_VAR 0 4
15422: PUSH
15423: LD_INT 2
15425: ARRAY
15426: GREATEREQUAL
15427: AND
15428: PUSH
15429: LD_VAR 0 3
15433: PPUSH
15434: LD_INT 3
15436: PPUSH
15437: CALL_OW 275
15441: PUSH
15442: LD_VAR 0 4
15446: PUSH
15447: LD_INT 3
15449: ARRAY
15450: GREATEREQUAL
15451: AND
15452: ST_TO_ADDR
// end ;
15453: LD_VAR 0 2
15457: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15458: LD_INT 0
15460: PPUSH
15461: PPUSH
15462: PPUSH
// pom := GetBase ( building ) ;
15463: LD_ADDR_VAR 0 4
15467: PUSH
15468: LD_VAR 0 1
15472: PPUSH
15473: CALL_OW 274
15477: ST_TO_ADDR
// if not pom then
15478: LD_VAR 0 4
15482: NOT
15483: IFFALSE 15487
// exit ;
15485: GO 15588
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15487: LD_ADDR_VAR 0 5
15491: PUSH
15492: LD_VAR 0 2
15496: PPUSH
15497: LD_VAR 0 1
15501: PPUSH
15502: CALL_OW 248
15506: PPUSH
15507: CALL_OW 450
15511: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15512: LD_ADDR_VAR 0 3
15516: PUSH
15517: LD_VAR 0 4
15521: PPUSH
15522: LD_INT 1
15524: PPUSH
15525: CALL_OW 275
15529: PUSH
15530: LD_VAR 0 5
15534: PUSH
15535: LD_INT 1
15537: ARRAY
15538: GREATEREQUAL
15539: PUSH
15540: LD_VAR 0 4
15544: PPUSH
15545: LD_INT 2
15547: PPUSH
15548: CALL_OW 275
15552: PUSH
15553: LD_VAR 0 5
15557: PUSH
15558: LD_INT 2
15560: ARRAY
15561: GREATEREQUAL
15562: AND
15563: PUSH
15564: LD_VAR 0 4
15568: PPUSH
15569: LD_INT 3
15571: PPUSH
15572: CALL_OW 275
15576: PUSH
15577: LD_VAR 0 5
15581: PUSH
15582: LD_INT 3
15584: ARRAY
15585: GREATEREQUAL
15586: AND
15587: ST_TO_ADDR
// end ;
15588: LD_VAR 0 3
15592: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15593: LD_INT 0
15595: PPUSH
15596: PPUSH
15597: PPUSH
15598: PPUSH
15599: PPUSH
15600: PPUSH
15601: PPUSH
15602: PPUSH
15603: PPUSH
15604: PPUSH
15605: PPUSH
// result := false ;
15606: LD_ADDR_VAR 0 8
15610: PUSH
15611: LD_INT 0
15613: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15614: LD_VAR 0 5
15618: NOT
15619: PUSH
15620: LD_VAR 0 1
15624: NOT
15625: OR
15626: PUSH
15627: LD_VAR 0 2
15631: NOT
15632: OR
15633: PUSH
15634: LD_VAR 0 3
15638: NOT
15639: OR
15640: IFFALSE 15644
// exit ;
15642: GO 16458
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15644: LD_ADDR_VAR 0 14
15648: PUSH
15649: LD_VAR 0 1
15653: PPUSH
15654: LD_VAR 0 2
15658: PPUSH
15659: LD_VAR 0 3
15663: PPUSH
15664: LD_VAR 0 4
15668: PPUSH
15669: LD_VAR 0 5
15673: PUSH
15674: LD_INT 1
15676: ARRAY
15677: PPUSH
15678: CALL_OW 248
15682: PPUSH
15683: LD_INT 0
15685: PPUSH
15686: CALL 17691 0 6
15690: ST_TO_ADDR
// if not hexes then
15691: LD_VAR 0 14
15695: NOT
15696: IFFALSE 15700
// exit ;
15698: GO 16458
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15700: LD_ADDR_VAR 0 17
15704: PUSH
15705: LD_VAR 0 5
15709: PPUSH
15710: LD_INT 22
15712: PUSH
15713: LD_VAR 0 13
15717: PPUSH
15718: CALL_OW 255
15722: PUSH
15723: EMPTY
15724: LIST
15725: LIST
15726: PUSH
15727: LD_INT 2
15729: PUSH
15730: LD_INT 30
15732: PUSH
15733: LD_INT 0
15735: PUSH
15736: EMPTY
15737: LIST
15738: LIST
15739: PUSH
15740: LD_INT 30
15742: PUSH
15743: LD_INT 1
15745: PUSH
15746: EMPTY
15747: LIST
15748: LIST
15749: PUSH
15750: EMPTY
15751: LIST
15752: LIST
15753: LIST
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: PPUSH
15759: CALL_OW 72
15763: ST_TO_ADDR
// for i = 1 to hexes do
15764: LD_ADDR_VAR 0 9
15768: PUSH
15769: DOUBLE
15770: LD_INT 1
15772: DEC
15773: ST_TO_ADDR
15774: LD_VAR 0 14
15778: PUSH
15779: FOR_TO
15780: IFFALSE 16456
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15782: LD_ADDR_VAR 0 13
15786: PUSH
15787: LD_VAR 0 14
15791: PUSH
15792: LD_VAR 0 9
15796: ARRAY
15797: PUSH
15798: LD_INT 1
15800: ARRAY
15801: PPUSH
15802: LD_VAR 0 14
15806: PUSH
15807: LD_VAR 0 9
15811: ARRAY
15812: PUSH
15813: LD_INT 2
15815: ARRAY
15816: PPUSH
15817: CALL_OW 428
15821: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15822: LD_VAR 0 14
15826: PUSH
15827: LD_VAR 0 9
15831: ARRAY
15832: PUSH
15833: LD_INT 1
15835: ARRAY
15836: PPUSH
15837: LD_VAR 0 14
15841: PUSH
15842: LD_VAR 0 9
15846: ARRAY
15847: PUSH
15848: LD_INT 2
15850: ARRAY
15851: PPUSH
15852: CALL_OW 351
15856: PUSH
15857: LD_VAR 0 14
15861: PUSH
15862: LD_VAR 0 9
15866: ARRAY
15867: PUSH
15868: LD_INT 1
15870: ARRAY
15871: PPUSH
15872: LD_VAR 0 14
15876: PUSH
15877: LD_VAR 0 9
15881: ARRAY
15882: PUSH
15883: LD_INT 2
15885: ARRAY
15886: PPUSH
15887: CALL_OW 488
15891: NOT
15892: OR
15893: PUSH
15894: LD_VAR 0 13
15898: PPUSH
15899: CALL_OW 247
15903: PUSH
15904: LD_INT 3
15906: EQUAL
15907: OR
15908: IFFALSE 15914
// exit ;
15910: POP
15911: POP
15912: GO 16458
// if not tmp then
15914: LD_VAR 0 13
15918: NOT
15919: IFFALSE 15923
// continue ;
15921: GO 15779
// result := true ;
15923: LD_ADDR_VAR 0 8
15927: PUSH
15928: LD_INT 1
15930: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15931: LD_VAR 0 6
15935: PUSH
15936: LD_VAR 0 13
15940: PPUSH
15941: CALL_OW 247
15945: PUSH
15946: LD_INT 2
15948: EQUAL
15949: AND
15950: PUSH
15951: LD_VAR 0 13
15955: PPUSH
15956: CALL_OW 263
15960: PUSH
15961: LD_INT 1
15963: EQUAL
15964: AND
15965: IFFALSE 16129
// begin if IsDrivenBy ( tmp ) then
15967: LD_VAR 0 13
15971: PPUSH
15972: CALL_OW 311
15976: IFFALSE 15980
// continue ;
15978: GO 15779
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15980: LD_VAR 0 6
15984: PPUSH
15985: LD_INT 3
15987: PUSH
15988: LD_INT 60
15990: PUSH
15991: EMPTY
15992: LIST
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: PUSH
15998: LD_INT 3
16000: PUSH
16001: LD_INT 55
16003: PUSH
16004: EMPTY
16005: LIST
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: PPUSH
16015: CALL_OW 72
16019: IFFALSE 16127
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
16021: LD_ADDR_VAR 0 18
16025: PUSH
16026: LD_VAR 0 6
16030: PPUSH
16031: LD_INT 3
16033: PUSH
16034: LD_INT 60
16036: PUSH
16037: EMPTY
16038: LIST
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: PUSH
16044: LD_INT 3
16046: PUSH
16047: LD_INT 55
16049: PUSH
16050: EMPTY
16051: LIST
16052: PUSH
16053: EMPTY
16054: LIST
16055: LIST
16056: PUSH
16057: EMPTY
16058: LIST
16059: LIST
16060: PPUSH
16061: CALL_OW 72
16065: PUSH
16066: LD_INT 1
16068: ARRAY
16069: ST_TO_ADDR
// if IsInUnit ( driver ) then
16070: LD_VAR 0 18
16074: PPUSH
16075: CALL_OW 310
16079: IFFALSE 16090
// ComExit ( driver ) ;
16081: LD_VAR 0 18
16085: PPUSH
16086: CALL 41471 0 1
// AddComEnterUnit ( driver , tmp ) ;
16090: LD_VAR 0 18
16094: PPUSH
16095: LD_VAR 0 13
16099: PPUSH
16100: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
16104: LD_VAR 0 18
16108: PPUSH
16109: LD_VAR 0 7
16113: PPUSH
16114: CALL_OW 173
// AddComExitVehicle ( driver ) ;
16118: LD_VAR 0 18
16122: PPUSH
16123: CALL_OW 181
// end ; continue ;
16127: GO 15779
// end ; if not cleaners or not tmp in cleaners then
16129: LD_VAR 0 6
16133: NOT
16134: PUSH
16135: LD_VAR 0 13
16139: PUSH
16140: LD_VAR 0 6
16144: IN
16145: NOT
16146: OR
16147: IFFALSE 16454
// begin if dep then
16149: LD_VAR 0 17
16153: IFFALSE 16289
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
16155: LD_ADDR_VAR 0 16
16159: PUSH
16160: LD_VAR 0 17
16164: PUSH
16165: LD_INT 1
16167: ARRAY
16168: PPUSH
16169: CALL_OW 250
16173: PPUSH
16174: LD_VAR 0 17
16178: PUSH
16179: LD_INT 1
16181: ARRAY
16182: PPUSH
16183: CALL_OW 254
16187: PPUSH
16188: LD_INT 5
16190: PPUSH
16191: CALL_OW 272
16195: PUSH
16196: LD_VAR 0 17
16200: PUSH
16201: LD_INT 1
16203: ARRAY
16204: PPUSH
16205: CALL_OW 251
16209: PPUSH
16210: LD_VAR 0 17
16214: PUSH
16215: LD_INT 1
16217: ARRAY
16218: PPUSH
16219: CALL_OW 254
16223: PPUSH
16224: LD_INT 5
16226: PPUSH
16227: CALL_OW 273
16231: PUSH
16232: EMPTY
16233: LIST
16234: LIST
16235: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
16236: LD_VAR 0 16
16240: PUSH
16241: LD_INT 1
16243: ARRAY
16244: PPUSH
16245: LD_VAR 0 16
16249: PUSH
16250: LD_INT 2
16252: ARRAY
16253: PPUSH
16254: CALL_OW 488
16258: IFFALSE 16289
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16260: LD_VAR 0 13
16264: PPUSH
16265: LD_VAR 0 16
16269: PUSH
16270: LD_INT 1
16272: ARRAY
16273: PPUSH
16274: LD_VAR 0 16
16278: PUSH
16279: LD_INT 2
16281: ARRAY
16282: PPUSH
16283: CALL_OW 111
// continue ;
16287: GO 15779
// end ; end ; r := GetDir ( tmp ) ;
16289: LD_ADDR_VAR 0 15
16293: PUSH
16294: LD_VAR 0 13
16298: PPUSH
16299: CALL_OW 254
16303: ST_TO_ADDR
// if r = 5 then
16304: LD_VAR 0 15
16308: PUSH
16309: LD_INT 5
16311: EQUAL
16312: IFFALSE 16322
// r := 0 ;
16314: LD_ADDR_VAR 0 15
16318: PUSH
16319: LD_INT 0
16321: ST_TO_ADDR
// for j = r to 5 do
16322: LD_ADDR_VAR 0 10
16326: PUSH
16327: DOUBLE
16328: LD_VAR 0 15
16332: DEC
16333: ST_TO_ADDR
16334: LD_INT 5
16336: PUSH
16337: FOR_TO
16338: IFFALSE 16452
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16340: LD_ADDR_VAR 0 11
16344: PUSH
16345: LD_VAR 0 13
16349: PPUSH
16350: CALL_OW 250
16354: PPUSH
16355: LD_VAR 0 10
16359: PPUSH
16360: LD_INT 2
16362: PPUSH
16363: CALL_OW 272
16367: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16368: LD_ADDR_VAR 0 12
16372: PUSH
16373: LD_VAR 0 13
16377: PPUSH
16378: CALL_OW 251
16382: PPUSH
16383: LD_VAR 0 10
16387: PPUSH
16388: LD_INT 2
16390: PPUSH
16391: CALL_OW 273
16395: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16396: LD_VAR 0 11
16400: PPUSH
16401: LD_VAR 0 12
16405: PPUSH
16406: CALL_OW 488
16410: PUSH
16411: LD_VAR 0 11
16415: PPUSH
16416: LD_VAR 0 12
16420: PPUSH
16421: CALL_OW 428
16425: NOT
16426: AND
16427: IFFALSE 16450
// begin ComMoveXY ( tmp , _x , _y ) ;
16429: LD_VAR 0 13
16433: PPUSH
16434: LD_VAR 0 11
16438: PPUSH
16439: LD_VAR 0 12
16443: PPUSH
16444: CALL_OW 111
// break ;
16448: GO 16452
// end ; end ;
16450: GO 16337
16452: POP
16453: POP
// end ; end ;
16454: GO 15779
16456: POP
16457: POP
// end ;
16458: LD_VAR 0 8
16462: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16463: LD_INT 0
16465: PPUSH
// result := true ;
16466: LD_ADDR_VAR 0 3
16470: PUSH
16471: LD_INT 1
16473: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16474: LD_VAR 0 2
16478: PUSH
16479: LD_INT 24
16481: DOUBLE
16482: EQUAL
16483: IFTRUE 16493
16485: LD_INT 33
16487: DOUBLE
16488: EQUAL
16489: IFTRUE 16493
16491: GO 16518
16493: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16494: LD_ADDR_VAR 0 3
16498: PUSH
16499: LD_INT 32
16501: PPUSH
16502: LD_VAR 0 1
16506: PPUSH
16507: CALL_OW 321
16511: PUSH
16512: LD_INT 2
16514: EQUAL
16515: ST_TO_ADDR
16516: GO 16834
16518: LD_INT 20
16520: DOUBLE
16521: EQUAL
16522: IFTRUE 16526
16524: GO 16551
16526: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16527: LD_ADDR_VAR 0 3
16531: PUSH
16532: LD_INT 6
16534: PPUSH
16535: LD_VAR 0 1
16539: PPUSH
16540: CALL_OW 321
16544: PUSH
16545: LD_INT 2
16547: EQUAL
16548: ST_TO_ADDR
16549: GO 16834
16551: LD_INT 22
16553: DOUBLE
16554: EQUAL
16555: IFTRUE 16565
16557: LD_INT 36
16559: DOUBLE
16560: EQUAL
16561: IFTRUE 16565
16563: GO 16590
16565: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16566: LD_ADDR_VAR 0 3
16570: PUSH
16571: LD_INT 15
16573: PPUSH
16574: LD_VAR 0 1
16578: PPUSH
16579: CALL_OW 321
16583: PUSH
16584: LD_INT 2
16586: EQUAL
16587: ST_TO_ADDR
16588: GO 16834
16590: LD_INT 30
16592: DOUBLE
16593: EQUAL
16594: IFTRUE 16598
16596: GO 16623
16598: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16599: LD_ADDR_VAR 0 3
16603: PUSH
16604: LD_INT 20
16606: PPUSH
16607: LD_VAR 0 1
16611: PPUSH
16612: CALL_OW 321
16616: PUSH
16617: LD_INT 2
16619: EQUAL
16620: ST_TO_ADDR
16621: GO 16834
16623: LD_INT 28
16625: DOUBLE
16626: EQUAL
16627: IFTRUE 16637
16629: LD_INT 21
16631: DOUBLE
16632: EQUAL
16633: IFTRUE 16637
16635: GO 16662
16637: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16638: LD_ADDR_VAR 0 3
16642: PUSH
16643: LD_INT 21
16645: PPUSH
16646: LD_VAR 0 1
16650: PPUSH
16651: CALL_OW 321
16655: PUSH
16656: LD_INT 2
16658: EQUAL
16659: ST_TO_ADDR
16660: GO 16834
16662: LD_INT 16
16664: DOUBLE
16665: EQUAL
16666: IFTRUE 16670
16668: GO 16695
16670: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16671: LD_ADDR_VAR 0 3
16675: PUSH
16676: LD_INT 84
16678: PPUSH
16679: LD_VAR 0 1
16683: PPUSH
16684: CALL_OW 321
16688: PUSH
16689: LD_INT 2
16691: EQUAL
16692: ST_TO_ADDR
16693: GO 16834
16695: LD_INT 19
16697: DOUBLE
16698: EQUAL
16699: IFTRUE 16709
16701: LD_INT 23
16703: DOUBLE
16704: EQUAL
16705: IFTRUE 16709
16707: GO 16734
16709: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16710: LD_ADDR_VAR 0 3
16714: PUSH
16715: LD_INT 83
16717: PPUSH
16718: LD_VAR 0 1
16722: PPUSH
16723: CALL_OW 321
16727: PUSH
16728: LD_INT 2
16730: EQUAL
16731: ST_TO_ADDR
16732: GO 16834
16734: LD_INT 17
16736: DOUBLE
16737: EQUAL
16738: IFTRUE 16742
16740: GO 16767
16742: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16743: LD_ADDR_VAR 0 3
16747: PUSH
16748: LD_INT 39
16750: PPUSH
16751: LD_VAR 0 1
16755: PPUSH
16756: CALL_OW 321
16760: PUSH
16761: LD_INT 2
16763: EQUAL
16764: ST_TO_ADDR
16765: GO 16834
16767: LD_INT 18
16769: DOUBLE
16770: EQUAL
16771: IFTRUE 16775
16773: GO 16800
16775: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16776: LD_ADDR_VAR 0 3
16780: PUSH
16781: LD_INT 40
16783: PPUSH
16784: LD_VAR 0 1
16788: PPUSH
16789: CALL_OW 321
16793: PUSH
16794: LD_INT 2
16796: EQUAL
16797: ST_TO_ADDR
16798: GO 16834
16800: LD_INT 27
16802: DOUBLE
16803: EQUAL
16804: IFTRUE 16808
16806: GO 16833
16808: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16809: LD_ADDR_VAR 0 3
16813: PUSH
16814: LD_INT 35
16816: PPUSH
16817: LD_VAR 0 1
16821: PPUSH
16822: CALL_OW 321
16826: PUSH
16827: LD_INT 2
16829: EQUAL
16830: ST_TO_ADDR
16831: GO 16834
16833: POP
// end ;
16834: LD_VAR 0 3
16838: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16839: LD_INT 0
16841: PPUSH
16842: PPUSH
16843: PPUSH
16844: PPUSH
16845: PPUSH
16846: PPUSH
16847: PPUSH
16848: PPUSH
16849: PPUSH
16850: PPUSH
16851: PPUSH
// result := false ;
16852: LD_ADDR_VAR 0 6
16856: PUSH
16857: LD_INT 0
16859: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16860: LD_VAR 0 1
16864: NOT
16865: PUSH
16866: LD_VAR 0 1
16870: PPUSH
16871: CALL_OW 266
16875: PUSH
16876: LD_INT 0
16878: PUSH
16879: LD_INT 1
16881: PUSH
16882: EMPTY
16883: LIST
16884: LIST
16885: IN
16886: NOT
16887: OR
16888: PUSH
16889: LD_VAR 0 2
16893: NOT
16894: OR
16895: PUSH
16896: LD_VAR 0 5
16900: PUSH
16901: LD_INT 0
16903: PUSH
16904: LD_INT 1
16906: PUSH
16907: LD_INT 2
16909: PUSH
16910: LD_INT 3
16912: PUSH
16913: LD_INT 4
16915: PUSH
16916: LD_INT 5
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: LIST
16925: LIST
16926: IN
16927: NOT
16928: OR
16929: PUSH
16930: LD_VAR 0 3
16934: PPUSH
16935: LD_VAR 0 4
16939: PPUSH
16940: CALL_OW 488
16944: NOT
16945: OR
16946: IFFALSE 16950
// exit ;
16948: GO 17686
// side := GetSide ( depot ) ;
16950: LD_ADDR_VAR 0 9
16954: PUSH
16955: LD_VAR 0 1
16959: PPUSH
16960: CALL_OW 255
16964: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16965: LD_VAR 0 9
16969: PPUSH
16970: LD_VAR 0 2
16974: PPUSH
16975: CALL 16463 0 2
16979: NOT
16980: IFFALSE 16984
// exit ;
16982: GO 17686
// pom := GetBase ( depot ) ;
16984: LD_ADDR_VAR 0 10
16988: PUSH
16989: LD_VAR 0 1
16993: PPUSH
16994: CALL_OW 274
16998: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16999: LD_ADDR_VAR 0 11
17003: PUSH
17004: LD_VAR 0 2
17008: PPUSH
17009: LD_VAR 0 1
17013: PPUSH
17014: CALL_OW 248
17018: PPUSH
17019: CALL_OW 450
17023: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17024: LD_VAR 0 10
17028: PPUSH
17029: LD_INT 1
17031: PPUSH
17032: CALL_OW 275
17036: PUSH
17037: LD_VAR 0 11
17041: PUSH
17042: LD_INT 1
17044: ARRAY
17045: GREATEREQUAL
17046: PUSH
17047: LD_VAR 0 10
17051: PPUSH
17052: LD_INT 2
17054: PPUSH
17055: CALL_OW 275
17059: PUSH
17060: LD_VAR 0 11
17064: PUSH
17065: LD_INT 2
17067: ARRAY
17068: GREATEREQUAL
17069: AND
17070: PUSH
17071: LD_VAR 0 10
17075: PPUSH
17076: LD_INT 3
17078: PPUSH
17079: CALL_OW 275
17083: PUSH
17084: LD_VAR 0 11
17088: PUSH
17089: LD_INT 3
17091: ARRAY
17092: GREATEREQUAL
17093: AND
17094: NOT
17095: IFFALSE 17099
// exit ;
17097: GO 17686
// if GetBType ( depot ) = b_depot then
17099: LD_VAR 0 1
17103: PPUSH
17104: CALL_OW 266
17108: PUSH
17109: LD_INT 0
17111: EQUAL
17112: IFFALSE 17124
// dist := 28 else
17114: LD_ADDR_VAR 0 14
17118: PUSH
17119: LD_INT 28
17121: ST_TO_ADDR
17122: GO 17132
// dist := 36 ;
17124: LD_ADDR_VAR 0 14
17128: PUSH
17129: LD_INT 36
17131: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
17132: LD_VAR 0 1
17136: PPUSH
17137: LD_VAR 0 3
17141: PPUSH
17142: LD_VAR 0 4
17146: PPUSH
17147: CALL_OW 297
17151: PUSH
17152: LD_VAR 0 14
17156: GREATER
17157: IFFALSE 17161
// exit ;
17159: GO 17686
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
17161: LD_ADDR_VAR 0 12
17165: PUSH
17166: LD_VAR 0 2
17170: PPUSH
17171: LD_VAR 0 3
17175: PPUSH
17176: LD_VAR 0 4
17180: PPUSH
17181: LD_VAR 0 5
17185: PPUSH
17186: LD_VAR 0 1
17190: PPUSH
17191: CALL_OW 248
17195: PPUSH
17196: LD_INT 0
17198: PPUSH
17199: CALL 17691 0 6
17203: ST_TO_ADDR
// if not hexes then
17204: LD_VAR 0 12
17208: NOT
17209: IFFALSE 17213
// exit ;
17211: GO 17686
// hex := GetHexInfo ( x , y ) ;
17213: LD_ADDR_VAR 0 15
17217: PUSH
17218: LD_VAR 0 3
17222: PPUSH
17223: LD_VAR 0 4
17227: PPUSH
17228: CALL_OW 546
17232: ST_TO_ADDR
// if hex [ 1 ] then
17233: LD_VAR 0 15
17237: PUSH
17238: LD_INT 1
17240: ARRAY
17241: IFFALSE 17245
// exit ;
17243: GO 17686
// height := hex [ 2 ] ;
17245: LD_ADDR_VAR 0 13
17249: PUSH
17250: LD_VAR 0 15
17254: PUSH
17255: LD_INT 2
17257: ARRAY
17258: ST_TO_ADDR
// for i = 1 to hexes do
17259: LD_ADDR_VAR 0 7
17263: PUSH
17264: DOUBLE
17265: LD_INT 1
17267: DEC
17268: ST_TO_ADDR
17269: LD_VAR 0 12
17273: PUSH
17274: FOR_TO
17275: IFFALSE 17605
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17277: LD_VAR 0 12
17281: PUSH
17282: LD_VAR 0 7
17286: ARRAY
17287: PUSH
17288: LD_INT 1
17290: ARRAY
17291: PPUSH
17292: LD_VAR 0 12
17296: PUSH
17297: LD_VAR 0 7
17301: ARRAY
17302: PUSH
17303: LD_INT 2
17305: ARRAY
17306: PPUSH
17307: CALL_OW 488
17311: NOT
17312: PUSH
17313: LD_VAR 0 12
17317: PUSH
17318: LD_VAR 0 7
17322: ARRAY
17323: PUSH
17324: LD_INT 1
17326: ARRAY
17327: PPUSH
17328: LD_VAR 0 12
17332: PUSH
17333: LD_VAR 0 7
17337: ARRAY
17338: PUSH
17339: LD_INT 2
17341: ARRAY
17342: PPUSH
17343: CALL_OW 428
17347: PUSH
17348: LD_INT 0
17350: GREATER
17351: OR
17352: PUSH
17353: LD_VAR 0 12
17357: PUSH
17358: LD_VAR 0 7
17362: ARRAY
17363: PUSH
17364: LD_INT 1
17366: ARRAY
17367: PPUSH
17368: LD_VAR 0 12
17372: PUSH
17373: LD_VAR 0 7
17377: ARRAY
17378: PUSH
17379: LD_INT 2
17381: ARRAY
17382: PPUSH
17383: CALL_OW 351
17387: OR
17388: IFFALSE 17394
// exit ;
17390: POP
17391: POP
17392: GO 17686
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17394: LD_ADDR_VAR 0 8
17398: PUSH
17399: LD_VAR 0 12
17403: PUSH
17404: LD_VAR 0 7
17408: ARRAY
17409: PUSH
17410: LD_INT 1
17412: ARRAY
17413: PPUSH
17414: LD_VAR 0 12
17418: PUSH
17419: LD_VAR 0 7
17423: ARRAY
17424: PUSH
17425: LD_INT 2
17427: ARRAY
17428: PPUSH
17429: CALL_OW 546
17433: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17434: LD_VAR 0 8
17438: PUSH
17439: LD_INT 1
17441: ARRAY
17442: PUSH
17443: LD_VAR 0 8
17447: PUSH
17448: LD_INT 2
17450: ARRAY
17451: PUSH
17452: LD_VAR 0 13
17456: PUSH
17457: LD_INT 2
17459: PLUS
17460: GREATER
17461: OR
17462: PUSH
17463: LD_VAR 0 8
17467: PUSH
17468: LD_INT 2
17470: ARRAY
17471: PUSH
17472: LD_VAR 0 13
17476: PUSH
17477: LD_INT 2
17479: MINUS
17480: LESS
17481: OR
17482: PUSH
17483: LD_VAR 0 8
17487: PUSH
17488: LD_INT 3
17490: ARRAY
17491: PUSH
17492: LD_INT 0
17494: PUSH
17495: LD_INT 8
17497: PUSH
17498: LD_INT 9
17500: PUSH
17501: LD_INT 10
17503: PUSH
17504: LD_INT 11
17506: PUSH
17507: LD_INT 12
17509: PUSH
17510: LD_INT 13
17512: PUSH
17513: LD_INT 16
17515: PUSH
17516: LD_INT 17
17518: PUSH
17519: LD_INT 18
17521: PUSH
17522: LD_INT 19
17524: PUSH
17525: LD_INT 20
17527: PUSH
17528: LD_INT 21
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: LIST
17543: LIST
17544: LIST
17545: IN
17546: NOT
17547: OR
17548: PUSH
17549: LD_VAR 0 8
17553: PUSH
17554: LD_INT 5
17556: ARRAY
17557: NOT
17558: OR
17559: PUSH
17560: LD_VAR 0 8
17564: PUSH
17565: LD_INT 6
17567: ARRAY
17568: PUSH
17569: LD_INT 1
17571: PUSH
17572: LD_INT 2
17574: PUSH
17575: LD_INT 7
17577: PUSH
17578: LD_INT 9
17580: PUSH
17581: LD_INT 10
17583: PUSH
17584: LD_INT 11
17586: PUSH
17587: EMPTY
17588: LIST
17589: LIST
17590: LIST
17591: LIST
17592: LIST
17593: LIST
17594: IN
17595: NOT
17596: OR
17597: IFFALSE 17603
// exit ;
17599: POP
17600: POP
17601: GO 17686
// end ;
17603: GO 17274
17605: POP
17606: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17607: LD_VAR 0 9
17611: PPUSH
17612: LD_VAR 0 3
17616: PPUSH
17617: LD_VAR 0 4
17621: PPUSH
17622: LD_INT 20
17624: PPUSH
17625: CALL 9638 0 4
17629: PUSH
17630: LD_INT 4
17632: ARRAY
17633: IFFALSE 17637
// exit ;
17635: GO 17686
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17637: LD_VAR 0 2
17641: PUSH
17642: LD_INT 29
17644: PUSH
17645: LD_INT 30
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: IN
17652: PUSH
17653: LD_VAR 0 3
17657: PPUSH
17658: LD_VAR 0 4
17662: PPUSH
17663: LD_VAR 0 9
17667: PPUSH
17668: CALL_OW 440
17672: NOT
17673: AND
17674: IFFALSE 17678
// exit ;
17676: GO 17686
// result := true ;
17678: LD_ADDR_VAR 0 6
17682: PUSH
17683: LD_INT 1
17685: ST_TO_ADDR
// end ;
17686: LD_VAR 0 6
17690: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17691: LD_INT 0
17693: PPUSH
17694: PPUSH
17695: PPUSH
17696: PPUSH
17697: PPUSH
17698: PPUSH
17699: PPUSH
17700: PPUSH
17701: PPUSH
17702: PPUSH
17703: PPUSH
17704: PPUSH
17705: PPUSH
17706: PPUSH
17707: PPUSH
17708: PPUSH
17709: PPUSH
17710: PPUSH
17711: PPUSH
17712: PPUSH
17713: PPUSH
17714: PPUSH
17715: PPUSH
17716: PPUSH
17717: PPUSH
17718: PPUSH
17719: PPUSH
17720: PPUSH
17721: PPUSH
17722: PPUSH
17723: PPUSH
17724: PPUSH
17725: PPUSH
17726: PPUSH
17727: PPUSH
17728: PPUSH
17729: PPUSH
17730: PPUSH
17731: PPUSH
17732: PPUSH
17733: PPUSH
17734: PPUSH
17735: PPUSH
17736: PPUSH
17737: PPUSH
17738: PPUSH
17739: PPUSH
17740: PPUSH
17741: PPUSH
17742: PPUSH
17743: PPUSH
17744: PPUSH
17745: PPUSH
17746: PPUSH
17747: PPUSH
17748: PPUSH
17749: PPUSH
17750: PPUSH
// result = [ ] ;
17751: LD_ADDR_VAR 0 7
17755: PUSH
17756: EMPTY
17757: ST_TO_ADDR
// temp_list = [ ] ;
17758: LD_ADDR_VAR 0 9
17762: PUSH
17763: EMPTY
17764: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17765: LD_VAR 0 4
17769: PUSH
17770: LD_INT 0
17772: PUSH
17773: LD_INT 1
17775: PUSH
17776: LD_INT 2
17778: PUSH
17779: LD_INT 3
17781: PUSH
17782: LD_INT 4
17784: PUSH
17785: LD_INT 5
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: IN
17796: NOT
17797: PUSH
17798: LD_VAR 0 1
17802: PUSH
17803: LD_INT 0
17805: PUSH
17806: LD_INT 1
17808: PUSH
17809: EMPTY
17810: LIST
17811: LIST
17812: IN
17813: PUSH
17814: LD_VAR 0 5
17818: PUSH
17819: LD_INT 1
17821: PUSH
17822: LD_INT 2
17824: PUSH
17825: LD_INT 3
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: LIST
17832: IN
17833: NOT
17834: AND
17835: OR
17836: IFFALSE 17840
// exit ;
17838: GO 36231
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17840: LD_VAR 0 1
17844: PUSH
17845: LD_INT 6
17847: PUSH
17848: LD_INT 7
17850: PUSH
17851: LD_INT 8
17853: PUSH
17854: LD_INT 13
17856: PUSH
17857: LD_INT 12
17859: PUSH
17860: LD_INT 15
17862: PUSH
17863: LD_INT 11
17865: PUSH
17866: LD_INT 14
17868: PUSH
17869: LD_INT 10
17871: PUSH
17872: EMPTY
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: IN
17883: IFFALSE 17893
// btype = b_lab ;
17885: LD_ADDR_VAR 0 1
17889: PUSH
17890: LD_INT 6
17892: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17893: LD_VAR 0 6
17897: PUSH
17898: LD_INT 0
17900: PUSH
17901: LD_INT 1
17903: PUSH
17904: LD_INT 2
17906: PUSH
17907: EMPTY
17908: LIST
17909: LIST
17910: LIST
17911: IN
17912: NOT
17913: PUSH
17914: LD_VAR 0 1
17918: PUSH
17919: LD_INT 0
17921: PUSH
17922: LD_INT 1
17924: PUSH
17925: LD_INT 2
17927: PUSH
17928: LD_INT 3
17930: PUSH
17931: LD_INT 6
17933: PUSH
17934: LD_INT 36
17936: PUSH
17937: LD_INT 4
17939: PUSH
17940: LD_INT 5
17942: PUSH
17943: LD_INT 31
17945: PUSH
17946: LD_INT 32
17948: PUSH
17949: LD_INT 33
17951: PUSH
17952: EMPTY
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: LIST
17962: LIST
17963: LIST
17964: IN
17965: NOT
17966: PUSH
17967: LD_VAR 0 6
17971: PUSH
17972: LD_INT 1
17974: EQUAL
17975: AND
17976: OR
17977: PUSH
17978: LD_VAR 0 1
17982: PUSH
17983: LD_INT 2
17985: PUSH
17986: LD_INT 3
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: IN
17993: NOT
17994: PUSH
17995: LD_VAR 0 6
17999: PUSH
18000: LD_INT 2
18002: EQUAL
18003: AND
18004: OR
18005: IFFALSE 18015
// mode = 0 ;
18007: LD_ADDR_VAR 0 6
18011: PUSH
18012: LD_INT 0
18014: ST_TO_ADDR
// case mode of 0 :
18015: LD_VAR 0 6
18019: PUSH
18020: LD_INT 0
18022: DOUBLE
18023: EQUAL
18024: IFTRUE 18028
18026: GO 29481
18028: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
18029: LD_ADDR_VAR 0 11
18033: PUSH
18034: LD_INT 0
18036: PUSH
18037: LD_INT 0
18039: PUSH
18040: EMPTY
18041: LIST
18042: LIST
18043: PUSH
18044: LD_INT 0
18046: PUSH
18047: LD_INT 1
18049: NEG
18050: PUSH
18051: EMPTY
18052: LIST
18053: LIST
18054: PUSH
18055: LD_INT 1
18057: PUSH
18058: LD_INT 0
18060: PUSH
18061: EMPTY
18062: LIST
18063: LIST
18064: PUSH
18065: LD_INT 1
18067: PUSH
18068: LD_INT 1
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: PUSH
18075: LD_INT 0
18077: PUSH
18078: LD_INT 1
18080: PUSH
18081: EMPTY
18082: LIST
18083: LIST
18084: PUSH
18085: LD_INT 1
18087: NEG
18088: PUSH
18089: LD_INT 0
18091: PUSH
18092: EMPTY
18093: LIST
18094: LIST
18095: PUSH
18096: LD_INT 1
18098: NEG
18099: PUSH
18100: LD_INT 1
18102: NEG
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: PUSH
18108: LD_INT 1
18110: NEG
18111: PUSH
18112: LD_INT 2
18114: NEG
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PUSH
18120: LD_INT 0
18122: PUSH
18123: LD_INT 2
18125: NEG
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: PUSH
18131: LD_INT 1
18133: PUSH
18134: LD_INT 1
18136: NEG
18137: PUSH
18138: EMPTY
18139: LIST
18140: LIST
18141: PUSH
18142: LD_INT 1
18144: PUSH
18145: LD_INT 2
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: PUSH
18152: LD_INT 0
18154: PUSH
18155: LD_INT 2
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: PUSH
18162: LD_INT 1
18164: NEG
18165: PUSH
18166: LD_INT 1
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: PUSH
18173: LD_INT 1
18175: PUSH
18176: LD_INT 3
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: PUSH
18183: LD_INT 0
18185: PUSH
18186: LD_INT 3
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: LD_INT 1
18195: NEG
18196: PUSH
18197: LD_INT 2
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: LIST
18221: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18222: LD_ADDR_VAR 0 12
18226: PUSH
18227: LD_INT 0
18229: PUSH
18230: LD_INT 0
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: LD_INT 0
18239: PUSH
18240: LD_INT 1
18242: NEG
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: PUSH
18248: LD_INT 1
18250: PUSH
18251: LD_INT 0
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: PUSH
18258: LD_INT 1
18260: PUSH
18261: LD_INT 1
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: PUSH
18268: LD_INT 0
18270: PUSH
18271: LD_INT 1
18273: PUSH
18274: EMPTY
18275: LIST
18276: LIST
18277: PUSH
18278: LD_INT 1
18280: NEG
18281: PUSH
18282: LD_INT 0
18284: PUSH
18285: EMPTY
18286: LIST
18287: LIST
18288: PUSH
18289: LD_INT 1
18291: NEG
18292: PUSH
18293: LD_INT 1
18295: NEG
18296: PUSH
18297: EMPTY
18298: LIST
18299: LIST
18300: PUSH
18301: LD_INT 1
18303: PUSH
18304: LD_INT 1
18306: NEG
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: PUSH
18312: LD_INT 2
18314: PUSH
18315: LD_INT 0
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: PUSH
18322: LD_INT 2
18324: PUSH
18325: LD_INT 1
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PUSH
18332: LD_INT 1
18334: NEG
18335: PUSH
18336: LD_INT 1
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: PUSH
18343: LD_INT 2
18345: NEG
18346: PUSH
18347: LD_INT 0
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 2
18356: NEG
18357: PUSH
18358: LD_INT 1
18360: NEG
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: PUSH
18366: LD_INT 2
18368: NEG
18369: PUSH
18370: LD_INT 1
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: PUSH
18377: LD_INT 3
18379: NEG
18380: PUSH
18381: LD_INT 0
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: PUSH
18388: LD_INT 3
18390: NEG
18391: PUSH
18392: LD_INT 1
18394: NEG
18395: PUSH
18396: EMPTY
18397: LIST
18398: LIST
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: LIST
18404: LIST
18405: LIST
18406: LIST
18407: LIST
18408: LIST
18409: LIST
18410: LIST
18411: LIST
18412: LIST
18413: LIST
18414: LIST
18415: LIST
18416: LIST
18417: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18418: LD_ADDR_VAR 0 13
18422: PUSH
18423: LD_INT 0
18425: PUSH
18426: LD_INT 0
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PUSH
18433: LD_INT 0
18435: PUSH
18436: LD_INT 1
18438: NEG
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: PUSH
18444: LD_INT 1
18446: PUSH
18447: LD_INT 0
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: PUSH
18454: LD_INT 1
18456: PUSH
18457: LD_INT 1
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: PUSH
18464: LD_INT 0
18466: PUSH
18467: LD_INT 1
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: PUSH
18474: LD_INT 1
18476: NEG
18477: PUSH
18478: LD_INT 0
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: PUSH
18485: LD_INT 1
18487: NEG
18488: PUSH
18489: LD_INT 1
18491: NEG
18492: PUSH
18493: EMPTY
18494: LIST
18495: LIST
18496: PUSH
18497: LD_INT 1
18499: NEG
18500: PUSH
18501: LD_INT 2
18503: NEG
18504: PUSH
18505: EMPTY
18506: LIST
18507: LIST
18508: PUSH
18509: LD_INT 2
18511: PUSH
18512: LD_INT 1
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: PUSH
18519: LD_INT 2
18521: PUSH
18522: LD_INT 2
18524: PUSH
18525: EMPTY
18526: LIST
18527: LIST
18528: PUSH
18529: LD_INT 1
18531: PUSH
18532: LD_INT 2
18534: PUSH
18535: EMPTY
18536: LIST
18537: LIST
18538: PUSH
18539: LD_INT 2
18541: NEG
18542: PUSH
18543: LD_INT 1
18545: NEG
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: PUSH
18551: LD_INT 2
18553: NEG
18554: PUSH
18555: LD_INT 2
18557: NEG
18558: PUSH
18559: EMPTY
18560: LIST
18561: LIST
18562: PUSH
18563: LD_INT 2
18565: NEG
18566: PUSH
18567: LD_INT 3
18569: NEG
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: PUSH
18575: LD_INT 3
18577: NEG
18578: PUSH
18579: LD_INT 2
18581: NEG
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: PUSH
18587: LD_INT 3
18589: NEG
18590: PUSH
18591: LD_INT 3
18593: NEG
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: PUSH
18599: EMPTY
18600: LIST
18601: LIST
18602: LIST
18603: LIST
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18617: LD_ADDR_VAR 0 14
18621: PUSH
18622: LD_INT 0
18624: PUSH
18625: LD_INT 0
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: PUSH
18632: LD_INT 0
18634: PUSH
18635: LD_INT 1
18637: NEG
18638: PUSH
18639: EMPTY
18640: LIST
18641: LIST
18642: PUSH
18643: LD_INT 1
18645: PUSH
18646: LD_INT 0
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: PUSH
18653: LD_INT 1
18655: PUSH
18656: LD_INT 1
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: PUSH
18663: LD_INT 0
18665: PUSH
18666: LD_INT 1
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: PUSH
18673: LD_INT 1
18675: NEG
18676: PUSH
18677: LD_INT 0
18679: PUSH
18680: EMPTY
18681: LIST
18682: LIST
18683: PUSH
18684: LD_INT 1
18686: NEG
18687: PUSH
18688: LD_INT 1
18690: NEG
18691: PUSH
18692: EMPTY
18693: LIST
18694: LIST
18695: PUSH
18696: LD_INT 1
18698: NEG
18699: PUSH
18700: LD_INT 2
18702: NEG
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: PUSH
18708: LD_INT 0
18710: PUSH
18711: LD_INT 2
18713: NEG
18714: PUSH
18715: EMPTY
18716: LIST
18717: LIST
18718: PUSH
18719: LD_INT 1
18721: PUSH
18722: LD_INT 1
18724: NEG
18725: PUSH
18726: EMPTY
18727: LIST
18728: LIST
18729: PUSH
18730: LD_INT 1
18732: PUSH
18733: LD_INT 2
18735: PUSH
18736: EMPTY
18737: LIST
18738: LIST
18739: PUSH
18740: LD_INT 0
18742: PUSH
18743: LD_INT 2
18745: PUSH
18746: EMPTY
18747: LIST
18748: LIST
18749: PUSH
18750: LD_INT 1
18752: NEG
18753: PUSH
18754: LD_INT 1
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: PUSH
18761: LD_INT 1
18763: NEG
18764: PUSH
18765: LD_INT 3
18767: NEG
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: PUSH
18773: LD_INT 0
18775: PUSH
18776: LD_INT 3
18778: NEG
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: PUSH
18784: LD_INT 1
18786: PUSH
18787: LD_INT 2
18789: NEG
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: LIST
18812: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18813: LD_ADDR_VAR 0 15
18817: PUSH
18818: LD_INT 0
18820: PUSH
18821: LD_INT 0
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: PUSH
18828: LD_INT 0
18830: PUSH
18831: LD_INT 1
18833: NEG
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: PUSH
18839: LD_INT 1
18841: PUSH
18842: LD_INT 0
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: PUSH
18849: LD_INT 1
18851: PUSH
18852: LD_INT 1
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: PUSH
18859: LD_INT 0
18861: PUSH
18862: LD_INT 1
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: PUSH
18869: LD_INT 1
18871: NEG
18872: PUSH
18873: LD_INT 0
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: PUSH
18880: LD_INT 1
18882: NEG
18883: PUSH
18884: LD_INT 1
18886: NEG
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: PUSH
18892: LD_INT 1
18894: PUSH
18895: LD_INT 1
18897: NEG
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: PUSH
18903: LD_INT 2
18905: PUSH
18906: LD_INT 0
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: PUSH
18913: LD_INT 2
18915: PUSH
18916: LD_INT 1
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: PUSH
18923: LD_INT 1
18925: NEG
18926: PUSH
18927: LD_INT 1
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: PUSH
18934: LD_INT 2
18936: NEG
18937: PUSH
18938: LD_INT 0
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PUSH
18945: LD_INT 2
18947: NEG
18948: PUSH
18949: LD_INT 1
18951: NEG
18952: PUSH
18953: EMPTY
18954: LIST
18955: LIST
18956: PUSH
18957: LD_INT 2
18959: PUSH
18960: LD_INT 1
18962: NEG
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: PUSH
18968: LD_INT 3
18970: PUSH
18971: LD_INT 0
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PUSH
18978: LD_INT 3
18980: PUSH
18981: LD_INT 1
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: LIST
19004: LIST
19005: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
19006: LD_ADDR_VAR 0 16
19010: PUSH
19011: LD_INT 0
19013: PUSH
19014: LD_INT 0
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: LD_INT 0
19023: PUSH
19024: LD_INT 1
19026: NEG
19027: PUSH
19028: EMPTY
19029: LIST
19030: LIST
19031: PUSH
19032: LD_INT 1
19034: PUSH
19035: LD_INT 0
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: PUSH
19042: LD_INT 1
19044: PUSH
19045: LD_INT 1
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: PUSH
19052: LD_INT 0
19054: PUSH
19055: LD_INT 1
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: PUSH
19062: LD_INT 1
19064: NEG
19065: PUSH
19066: LD_INT 0
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: PUSH
19073: LD_INT 1
19075: NEG
19076: PUSH
19077: LD_INT 1
19079: NEG
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: LD_INT 1
19087: NEG
19088: PUSH
19089: LD_INT 2
19091: NEG
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: PUSH
19097: LD_INT 2
19099: PUSH
19100: LD_INT 1
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: PUSH
19107: LD_INT 2
19109: PUSH
19110: LD_INT 2
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: PUSH
19117: LD_INT 1
19119: PUSH
19120: LD_INT 2
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: PUSH
19127: LD_INT 2
19129: NEG
19130: PUSH
19131: LD_INT 1
19133: NEG
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PUSH
19139: LD_INT 2
19141: NEG
19142: PUSH
19143: LD_INT 2
19145: NEG
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: LD_INT 3
19153: PUSH
19154: LD_INT 2
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: PUSH
19161: LD_INT 3
19163: PUSH
19164: LD_INT 3
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: PUSH
19171: LD_INT 2
19173: PUSH
19174: LD_INT 3
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: EMPTY
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19199: LD_ADDR_VAR 0 17
19203: PUSH
19204: LD_INT 0
19206: PUSH
19207: LD_INT 0
19209: PUSH
19210: EMPTY
19211: LIST
19212: LIST
19213: PUSH
19214: LD_INT 0
19216: PUSH
19217: LD_INT 1
19219: NEG
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PUSH
19225: LD_INT 1
19227: PUSH
19228: LD_INT 0
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PUSH
19235: LD_INT 1
19237: PUSH
19238: LD_INT 1
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: PUSH
19245: LD_INT 0
19247: PUSH
19248: LD_INT 1
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: PUSH
19255: LD_INT 1
19257: NEG
19258: PUSH
19259: LD_INT 0
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: PUSH
19266: LD_INT 1
19268: NEG
19269: PUSH
19270: LD_INT 1
19272: NEG
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: PUSH
19278: LD_INT 1
19280: NEG
19281: PUSH
19282: LD_INT 2
19284: NEG
19285: PUSH
19286: EMPTY
19287: LIST
19288: LIST
19289: PUSH
19290: LD_INT 0
19292: PUSH
19293: LD_INT 2
19295: NEG
19296: PUSH
19297: EMPTY
19298: LIST
19299: LIST
19300: PUSH
19301: LD_INT 1
19303: PUSH
19304: LD_INT 1
19306: NEG
19307: PUSH
19308: EMPTY
19309: LIST
19310: LIST
19311: PUSH
19312: LD_INT 2
19314: PUSH
19315: LD_INT 0
19317: PUSH
19318: EMPTY
19319: LIST
19320: LIST
19321: PUSH
19322: LD_INT 2
19324: PUSH
19325: LD_INT 1
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: PUSH
19332: LD_INT 2
19334: PUSH
19335: LD_INT 2
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: PUSH
19342: LD_INT 1
19344: PUSH
19345: LD_INT 2
19347: PUSH
19348: EMPTY
19349: LIST
19350: LIST
19351: PUSH
19352: LD_INT 0
19354: PUSH
19355: LD_INT 2
19357: PUSH
19358: EMPTY
19359: LIST
19360: LIST
19361: PUSH
19362: LD_INT 1
19364: NEG
19365: PUSH
19366: LD_INT 1
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: PUSH
19373: LD_INT 2
19375: NEG
19376: PUSH
19377: LD_INT 0
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: PUSH
19384: LD_INT 2
19386: NEG
19387: PUSH
19388: LD_INT 1
19390: NEG
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PUSH
19396: LD_INT 2
19398: NEG
19399: PUSH
19400: LD_INT 2
19402: NEG
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19429: LD_ADDR_VAR 0 18
19433: PUSH
19434: LD_INT 0
19436: PUSH
19437: LD_INT 0
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: PUSH
19444: LD_INT 0
19446: PUSH
19447: LD_INT 1
19449: NEG
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: PUSH
19455: LD_INT 1
19457: PUSH
19458: LD_INT 0
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: PUSH
19465: LD_INT 1
19467: PUSH
19468: LD_INT 1
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PUSH
19475: LD_INT 0
19477: PUSH
19478: LD_INT 1
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: PUSH
19485: LD_INT 1
19487: NEG
19488: PUSH
19489: LD_INT 0
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: PUSH
19496: LD_INT 1
19498: NEG
19499: PUSH
19500: LD_INT 1
19502: NEG
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: LD_INT 1
19510: NEG
19511: PUSH
19512: LD_INT 2
19514: NEG
19515: PUSH
19516: EMPTY
19517: LIST
19518: LIST
19519: PUSH
19520: LD_INT 0
19522: PUSH
19523: LD_INT 2
19525: NEG
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: PUSH
19531: LD_INT 1
19533: PUSH
19534: LD_INT 1
19536: NEG
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: PUSH
19542: LD_INT 2
19544: PUSH
19545: LD_INT 0
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PUSH
19552: LD_INT 2
19554: PUSH
19555: LD_INT 1
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PUSH
19562: LD_INT 2
19564: PUSH
19565: LD_INT 2
19567: PUSH
19568: EMPTY
19569: LIST
19570: LIST
19571: PUSH
19572: LD_INT 1
19574: PUSH
19575: LD_INT 2
19577: PUSH
19578: EMPTY
19579: LIST
19580: LIST
19581: PUSH
19582: LD_INT 0
19584: PUSH
19585: LD_INT 2
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PUSH
19592: LD_INT 1
19594: NEG
19595: PUSH
19596: LD_INT 1
19598: PUSH
19599: EMPTY
19600: LIST
19601: LIST
19602: PUSH
19603: LD_INT 2
19605: NEG
19606: PUSH
19607: LD_INT 0
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: PUSH
19614: LD_INT 2
19616: NEG
19617: PUSH
19618: LD_INT 1
19620: NEG
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: PUSH
19626: LD_INT 2
19628: NEG
19629: PUSH
19630: LD_INT 2
19632: NEG
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19659: LD_ADDR_VAR 0 19
19663: PUSH
19664: LD_INT 0
19666: PUSH
19667: LD_INT 0
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PUSH
19674: LD_INT 0
19676: PUSH
19677: LD_INT 1
19679: NEG
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PUSH
19685: LD_INT 1
19687: PUSH
19688: LD_INT 0
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PUSH
19695: LD_INT 1
19697: PUSH
19698: LD_INT 1
19700: PUSH
19701: EMPTY
19702: LIST
19703: LIST
19704: PUSH
19705: LD_INT 0
19707: PUSH
19708: LD_INT 1
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: PUSH
19715: LD_INT 1
19717: NEG
19718: PUSH
19719: LD_INT 0
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: PUSH
19726: LD_INT 1
19728: NEG
19729: PUSH
19730: LD_INT 1
19732: NEG
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: PUSH
19738: LD_INT 1
19740: NEG
19741: PUSH
19742: LD_INT 2
19744: NEG
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: PUSH
19750: LD_INT 0
19752: PUSH
19753: LD_INT 2
19755: NEG
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: PUSH
19761: LD_INT 1
19763: PUSH
19764: LD_INT 1
19766: NEG
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: PUSH
19772: LD_INT 2
19774: PUSH
19775: LD_INT 0
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PUSH
19782: LD_INT 2
19784: PUSH
19785: LD_INT 1
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: LD_INT 2
19794: PUSH
19795: LD_INT 2
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: LD_INT 1
19804: PUSH
19805: LD_INT 2
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: PUSH
19812: LD_INT 0
19814: PUSH
19815: LD_INT 2
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: PUSH
19822: LD_INT 1
19824: NEG
19825: PUSH
19826: LD_INT 1
19828: PUSH
19829: EMPTY
19830: LIST
19831: LIST
19832: PUSH
19833: LD_INT 2
19835: NEG
19836: PUSH
19837: LD_INT 0
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: PUSH
19844: LD_INT 2
19846: NEG
19847: PUSH
19848: LD_INT 1
19850: NEG
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: PUSH
19856: LD_INT 2
19858: NEG
19859: PUSH
19860: LD_INT 2
19862: NEG
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19889: LD_ADDR_VAR 0 20
19893: PUSH
19894: LD_INT 0
19896: PUSH
19897: LD_INT 0
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: PUSH
19904: LD_INT 0
19906: PUSH
19907: LD_INT 1
19909: NEG
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: PUSH
19915: LD_INT 1
19917: PUSH
19918: LD_INT 0
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: PUSH
19925: LD_INT 1
19927: PUSH
19928: LD_INT 1
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: PUSH
19935: LD_INT 0
19937: PUSH
19938: LD_INT 1
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: PUSH
19945: LD_INT 1
19947: NEG
19948: PUSH
19949: LD_INT 0
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: PUSH
19956: LD_INT 1
19958: NEG
19959: PUSH
19960: LD_INT 1
19962: NEG
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: PUSH
19968: LD_INT 1
19970: NEG
19971: PUSH
19972: LD_INT 2
19974: NEG
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: PUSH
19980: LD_INT 0
19982: PUSH
19983: LD_INT 2
19985: NEG
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: PUSH
19991: LD_INT 1
19993: PUSH
19994: LD_INT 1
19996: NEG
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: PUSH
20002: LD_INT 2
20004: PUSH
20005: LD_INT 0
20007: PUSH
20008: EMPTY
20009: LIST
20010: LIST
20011: PUSH
20012: LD_INT 2
20014: PUSH
20015: LD_INT 1
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: PUSH
20022: LD_INT 2
20024: PUSH
20025: LD_INT 2
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: PUSH
20032: LD_INT 1
20034: PUSH
20035: LD_INT 2
20037: PUSH
20038: EMPTY
20039: LIST
20040: LIST
20041: PUSH
20042: LD_INT 0
20044: PUSH
20045: LD_INT 2
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: PUSH
20052: LD_INT 1
20054: NEG
20055: PUSH
20056: LD_INT 1
20058: PUSH
20059: EMPTY
20060: LIST
20061: LIST
20062: PUSH
20063: LD_INT 2
20065: NEG
20066: PUSH
20067: LD_INT 0
20069: PUSH
20070: EMPTY
20071: LIST
20072: LIST
20073: PUSH
20074: LD_INT 2
20076: NEG
20077: PUSH
20078: LD_INT 1
20080: NEG
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: PUSH
20086: LD_INT 2
20088: NEG
20089: PUSH
20090: LD_INT 2
20092: NEG
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PUSH
20098: EMPTY
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20119: LD_ADDR_VAR 0 21
20123: PUSH
20124: LD_INT 0
20126: PUSH
20127: LD_INT 0
20129: PUSH
20130: EMPTY
20131: LIST
20132: LIST
20133: PUSH
20134: LD_INT 0
20136: PUSH
20137: LD_INT 1
20139: NEG
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: PUSH
20145: LD_INT 1
20147: PUSH
20148: LD_INT 0
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: PUSH
20155: LD_INT 1
20157: PUSH
20158: LD_INT 1
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: PUSH
20165: LD_INT 0
20167: PUSH
20168: LD_INT 1
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: PUSH
20175: LD_INT 1
20177: NEG
20178: PUSH
20179: LD_INT 0
20181: PUSH
20182: EMPTY
20183: LIST
20184: LIST
20185: PUSH
20186: LD_INT 1
20188: NEG
20189: PUSH
20190: LD_INT 1
20192: NEG
20193: PUSH
20194: EMPTY
20195: LIST
20196: LIST
20197: PUSH
20198: LD_INT 1
20200: NEG
20201: PUSH
20202: LD_INT 2
20204: NEG
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: PUSH
20210: LD_INT 0
20212: PUSH
20213: LD_INT 2
20215: NEG
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: PUSH
20221: LD_INT 1
20223: PUSH
20224: LD_INT 1
20226: NEG
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: PUSH
20232: LD_INT 2
20234: PUSH
20235: LD_INT 0
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: PUSH
20242: LD_INT 2
20244: PUSH
20245: LD_INT 1
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: PUSH
20252: LD_INT 2
20254: PUSH
20255: LD_INT 2
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: PUSH
20262: LD_INT 1
20264: PUSH
20265: LD_INT 2
20267: PUSH
20268: EMPTY
20269: LIST
20270: LIST
20271: PUSH
20272: LD_INT 0
20274: PUSH
20275: LD_INT 2
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: PUSH
20282: LD_INT 1
20284: NEG
20285: PUSH
20286: LD_INT 1
20288: PUSH
20289: EMPTY
20290: LIST
20291: LIST
20292: PUSH
20293: LD_INT 2
20295: NEG
20296: PUSH
20297: LD_INT 0
20299: PUSH
20300: EMPTY
20301: LIST
20302: LIST
20303: PUSH
20304: LD_INT 2
20306: NEG
20307: PUSH
20308: LD_INT 1
20310: NEG
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: PUSH
20316: LD_INT 2
20318: NEG
20319: PUSH
20320: LD_INT 2
20322: NEG
20323: PUSH
20324: EMPTY
20325: LIST
20326: LIST
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: LIST
20332: LIST
20333: LIST
20334: LIST
20335: LIST
20336: LIST
20337: LIST
20338: LIST
20339: LIST
20340: LIST
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20349: LD_ADDR_VAR 0 22
20353: PUSH
20354: LD_INT 0
20356: PUSH
20357: LD_INT 0
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: PUSH
20364: LD_INT 0
20366: PUSH
20367: LD_INT 1
20369: NEG
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: PUSH
20375: LD_INT 1
20377: PUSH
20378: LD_INT 0
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: PUSH
20385: LD_INT 1
20387: PUSH
20388: LD_INT 1
20390: PUSH
20391: EMPTY
20392: LIST
20393: LIST
20394: PUSH
20395: LD_INT 0
20397: PUSH
20398: LD_INT 1
20400: PUSH
20401: EMPTY
20402: LIST
20403: LIST
20404: PUSH
20405: LD_INT 1
20407: NEG
20408: PUSH
20409: LD_INT 0
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: PUSH
20416: LD_INT 1
20418: NEG
20419: PUSH
20420: LD_INT 1
20422: NEG
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: PUSH
20428: LD_INT 1
20430: NEG
20431: PUSH
20432: LD_INT 2
20434: NEG
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: PUSH
20440: LD_INT 0
20442: PUSH
20443: LD_INT 2
20445: NEG
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: PUSH
20451: LD_INT 1
20453: PUSH
20454: LD_INT 1
20456: NEG
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: PUSH
20462: LD_INT 2
20464: PUSH
20465: LD_INT 0
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: PUSH
20472: LD_INT 2
20474: PUSH
20475: LD_INT 1
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: PUSH
20482: LD_INT 2
20484: PUSH
20485: LD_INT 2
20487: PUSH
20488: EMPTY
20489: LIST
20490: LIST
20491: PUSH
20492: LD_INT 1
20494: PUSH
20495: LD_INT 2
20497: PUSH
20498: EMPTY
20499: LIST
20500: LIST
20501: PUSH
20502: LD_INT 0
20504: PUSH
20505: LD_INT 2
20507: PUSH
20508: EMPTY
20509: LIST
20510: LIST
20511: PUSH
20512: LD_INT 1
20514: NEG
20515: PUSH
20516: LD_INT 1
20518: PUSH
20519: EMPTY
20520: LIST
20521: LIST
20522: PUSH
20523: LD_INT 2
20525: NEG
20526: PUSH
20527: LD_INT 0
20529: PUSH
20530: EMPTY
20531: LIST
20532: LIST
20533: PUSH
20534: LD_INT 2
20536: NEG
20537: PUSH
20538: LD_INT 1
20540: NEG
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: PUSH
20546: LD_INT 2
20548: NEG
20549: PUSH
20550: LD_INT 2
20552: NEG
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20579: LD_ADDR_VAR 0 23
20583: PUSH
20584: LD_INT 0
20586: PUSH
20587: LD_INT 0
20589: PUSH
20590: EMPTY
20591: LIST
20592: LIST
20593: PUSH
20594: LD_INT 0
20596: PUSH
20597: LD_INT 1
20599: NEG
20600: PUSH
20601: EMPTY
20602: LIST
20603: LIST
20604: PUSH
20605: LD_INT 1
20607: PUSH
20608: LD_INT 0
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: PUSH
20615: LD_INT 1
20617: PUSH
20618: LD_INT 1
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: PUSH
20625: LD_INT 0
20627: PUSH
20628: LD_INT 1
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: PUSH
20635: LD_INT 1
20637: NEG
20638: PUSH
20639: LD_INT 0
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: PUSH
20646: LD_INT 1
20648: NEG
20649: PUSH
20650: LD_INT 1
20652: NEG
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: PUSH
20658: LD_INT 1
20660: NEG
20661: PUSH
20662: LD_INT 2
20664: NEG
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: PUSH
20670: LD_INT 0
20672: PUSH
20673: LD_INT 2
20675: NEG
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 1
20683: PUSH
20684: LD_INT 1
20686: NEG
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: PUSH
20692: LD_INT 2
20694: PUSH
20695: LD_INT 0
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PUSH
20702: LD_INT 2
20704: PUSH
20705: LD_INT 1
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: PUSH
20712: LD_INT 2
20714: PUSH
20715: LD_INT 2
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: PUSH
20722: LD_INT 1
20724: PUSH
20725: LD_INT 2
20727: PUSH
20728: EMPTY
20729: LIST
20730: LIST
20731: PUSH
20732: LD_INT 0
20734: PUSH
20735: LD_INT 2
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: PUSH
20742: LD_INT 1
20744: NEG
20745: PUSH
20746: LD_INT 1
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: PUSH
20753: LD_INT 2
20755: NEG
20756: PUSH
20757: LD_INT 0
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: PUSH
20764: LD_INT 2
20766: NEG
20767: PUSH
20768: LD_INT 1
20770: NEG
20771: PUSH
20772: EMPTY
20773: LIST
20774: LIST
20775: PUSH
20776: LD_INT 2
20778: NEG
20779: PUSH
20780: LD_INT 2
20782: NEG
20783: PUSH
20784: EMPTY
20785: LIST
20786: LIST
20787: PUSH
20788: LD_INT 2
20790: NEG
20791: PUSH
20792: LD_INT 3
20794: NEG
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: PUSH
20800: LD_INT 1
20802: NEG
20803: PUSH
20804: LD_INT 3
20806: NEG
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: PUSH
20812: LD_INT 1
20814: PUSH
20815: LD_INT 2
20817: NEG
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: PUSH
20823: LD_INT 2
20825: PUSH
20826: LD_INT 1
20828: NEG
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20859: LD_ADDR_VAR 0 24
20863: PUSH
20864: LD_INT 0
20866: PUSH
20867: LD_INT 0
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: PUSH
20874: LD_INT 0
20876: PUSH
20877: LD_INT 1
20879: NEG
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PUSH
20885: LD_INT 1
20887: PUSH
20888: LD_INT 0
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: PUSH
20895: LD_INT 1
20897: PUSH
20898: LD_INT 1
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PUSH
20905: LD_INT 0
20907: PUSH
20908: LD_INT 1
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: PUSH
20915: LD_INT 1
20917: NEG
20918: PUSH
20919: LD_INT 0
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: PUSH
20926: LD_INT 1
20928: NEG
20929: PUSH
20930: LD_INT 1
20932: NEG
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: PUSH
20938: LD_INT 1
20940: NEG
20941: PUSH
20942: LD_INT 2
20944: NEG
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: PUSH
20950: LD_INT 0
20952: PUSH
20953: LD_INT 2
20955: NEG
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: LD_INT 1
20963: PUSH
20964: LD_INT 1
20966: NEG
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: LD_INT 2
20974: PUSH
20975: LD_INT 0
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PUSH
20982: LD_INT 2
20984: PUSH
20985: LD_INT 1
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: LD_INT 2
20994: PUSH
20995: LD_INT 2
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: PUSH
21002: LD_INT 1
21004: PUSH
21005: LD_INT 2
21007: PUSH
21008: EMPTY
21009: LIST
21010: LIST
21011: PUSH
21012: LD_INT 0
21014: PUSH
21015: LD_INT 2
21017: PUSH
21018: EMPTY
21019: LIST
21020: LIST
21021: PUSH
21022: LD_INT 1
21024: NEG
21025: PUSH
21026: LD_INT 1
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: PUSH
21033: LD_INT 2
21035: NEG
21036: PUSH
21037: LD_INT 0
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: PUSH
21044: LD_INT 2
21046: NEG
21047: PUSH
21048: LD_INT 1
21050: NEG
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: PUSH
21056: LD_INT 2
21058: NEG
21059: PUSH
21060: LD_INT 2
21062: NEG
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: PUSH
21068: LD_INT 1
21070: PUSH
21071: LD_INT 2
21073: NEG
21074: PUSH
21075: EMPTY
21076: LIST
21077: LIST
21078: PUSH
21079: LD_INT 2
21081: PUSH
21082: LD_INT 1
21084: NEG
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: PUSH
21090: LD_INT 3
21092: PUSH
21093: LD_INT 1
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: PUSH
21100: LD_INT 3
21102: PUSH
21103: LD_INT 2
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: PUSH
21110: EMPTY
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21135: LD_ADDR_VAR 0 25
21139: PUSH
21140: LD_INT 0
21142: PUSH
21143: LD_INT 0
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: PUSH
21150: LD_INT 0
21152: PUSH
21153: LD_INT 1
21155: NEG
21156: PUSH
21157: EMPTY
21158: LIST
21159: LIST
21160: PUSH
21161: LD_INT 1
21163: PUSH
21164: LD_INT 0
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: PUSH
21171: LD_INT 1
21173: PUSH
21174: LD_INT 1
21176: PUSH
21177: EMPTY
21178: LIST
21179: LIST
21180: PUSH
21181: LD_INT 0
21183: PUSH
21184: LD_INT 1
21186: PUSH
21187: EMPTY
21188: LIST
21189: LIST
21190: PUSH
21191: LD_INT 1
21193: NEG
21194: PUSH
21195: LD_INT 0
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: PUSH
21202: LD_INT 1
21204: NEG
21205: PUSH
21206: LD_INT 1
21208: NEG
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: PUSH
21214: LD_INT 1
21216: NEG
21217: PUSH
21218: LD_INT 2
21220: NEG
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: LD_INT 0
21228: PUSH
21229: LD_INT 2
21231: NEG
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: PUSH
21237: LD_INT 1
21239: PUSH
21240: LD_INT 1
21242: NEG
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: PUSH
21248: LD_INT 2
21250: PUSH
21251: LD_INT 0
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: PUSH
21258: LD_INT 2
21260: PUSH
21261: LD_INT 1
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: PUSH
21268: LD_INT 2
21270: PUSH
21271: LD_INT 2
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: PUSH
21278: LD_INT 1
21280: PUSH
21281: LD_INT 2
21283: PUSH
21284: EMPTY
21285: LIST
21286: LIST
21287: PUSH
21288: LD_INT 0
21290: PUSH
21291: LD_INT 2
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: PUSH
21298: LD_INT 1
21300: NEG
21301: PUSH
21302: LD_INT 1
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: PUSH
21309: LD_INT 2
21311: NEG
21312: PUSH
21313: LD_INT 0
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PUSH
21320: LD_INT 2
21322: NEG
21323: PUSH
21324: LD_INT 1
21326: NEG
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: PUSH
21332: LD_INT 2
21334: NEG
21335: PUSH
21336: LD_INT 2
21338: NEG
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PUSH
21344: LD_INT 3
21346: PUSH
21347: LD_INT 1
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: PUSH
21354: LD_INT 3
21356: PUSH
21357: LD_INT 2
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: PUSH
21364: LD_INT 2
21366: PUSH
21367: LD_INT 3
21369: PUSH
21370: EMPTY
21371: LIST
21372: LIST
21373: PUSH
21374: LD_INT 1
21376: PUSH
21377: LD_INT 3
21379: PUSH
21380: EMPTY
21381: LIST
21382: LIST
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21409: LD_ADDR_VAR 0 26
21413: PUSH
21414: LD_INT 0
21416: PUSH
21417: LD_INT 0
21419: PUSH
21420: EMPTY
21421: LIST
21422: LIST
21423: PUSH
21424: LD_INT 0
21426: PUSH
21427: LD_INT 1
21429: NEG
21430: PUSH
21431: EMPTY
21432: LIST
21433: LIST
21434: PUSH
21435: LD_INT 1
21437: PUSH
21438: LD_INT 0
21440: PUSH
21441: EMPTY
21442: LIST
21443: LIST
21444: PUSH
21445: LD_INT 1
21447: PUSH
21448: LD_INT 1
21450: PUSH
21451: EMPTY
21452: LIST
21453: LIST
21454: PUSH
21455: LD_INT 0
21457: PUSH
21458: LD_INT 1
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: PUSH
21465: LD_INT 1
21467: NEG
21468: PUSH
21469: LD_INT 0
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: PUSH
21476: LD_INT 1
21478: NEG
21479: PUSH
21480: LD_INT 1
21482: NEG
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: PUSH
21488: LD_INT 1
21490: NEG
21491: PUSH
21492: LD_INT 2
21494: NEG
21495: PUSH
21496: EMPTY
21497: LIST
21498: LIST
21499: PUSH
21500: LD_INT 0
21502: PUSH
21503: LD_INT 2
21505: NEG
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: PUSH
21511: LD_INT 1
21513: PUSH
21514: LD_INT 1
21516: NEG
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: PUSH
21522: LD_INT 2
21524: PUSH
21525: LD_INT 0
21527: PUSH
21528: EMPTY
21529: LIST
21530: LIST
21531: PUSH
21532: LD_INT 2
21534: PUSH
21535: LD_INT 1
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: PUSH
21542: LD_INT 2
21544: PUSH
21545: LD_INT 2
21547: PUSH
21548: EMPTY
21549: LIST
21550: LIST
21551: PUSH
21552: LD_INT 1
21554: PUSH
21555: LD_INT 2
21557: PUSH
21558: EMPTY
21559: LIST
21560: LIST
21561: PUSH
21562: LD_INT 0
21564: PUSH
21565: LD_INT 2
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: PUSH
21572: LD_INT 1
21574: NEG
21575: PUSH
21576: LD_INT 1
21578: PUSH
21579: EMPTY
21580: LIST
21581: LIST
21582: PUSH
21583: LD_INT 2
21585: NEG
21586: PUSH
21587: LD_INT 0
21589: PUSH
21590: EMPTY
21591: LIST
21592: LIST
21593: PUSH
21594: LD_INT 2
21596: NEG
21597: PUSH
21598: LD_INT 1
21600: NEG
21601: PUSH
21602: EMPTY
21603: LIST
21604: LIST
21605: PUSH
21606: LD_INT 2
21608: NEG
21609: PUSH
21610: LD_INT 2
21612: NEG
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: PUSH
21618: LD_INT 2
21620: PUSH
21621: LD_INT 3
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: PUSH
21628: LD_INT 1
21630: PUSH
21631: LD_INT 3
21633: PUSH
21634: EMPTY
21635: LIST
21636: LIST
21637: PUSH
21638: LD_INT 1
21640: NEG
21641: PUSH
21642: LD_INT 2
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PUSH
21649: LD_INT 2
21651: NEG
21652: PUSH
21653: LD_INT 1
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21685: LD_ADDR_VAR 0 27
21689: PUSH
21690: LD_INT 0
21692: PUSH
21693: LD_INT 0
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: PUSH
21700: LD_INT 0
21702: PUSH
21703: LD_INT 1
21705: NEG
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: PUSH
21711: LD_INT 1
21713: PUSH
21714: LD_INT 0
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: PUSH
21721: LD_INT 1
21723: PUSH
21724: LD_INT 1
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: PUSH
21731: LD_INT 0
21733: PUSH
21734: LD_INT 1
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: PUSH
21741: LD_INT 1
21743: NEG
21744: PUSH
21745: LD_INT 0
21747: PUSH
21748: EMPTY
21749: LIST
21750: LIST
21751: PUSH
21752: LD_INT 1
21754: NEG
21755: PUSH
21756: LD_INT 1
21758: NEG
21759: PUSH
21760: EMPTY
21761: LIST
21762: LIST
21763: PUSH
21764: LD_INT 1
21766: NEG
21767: PUSH
21768: LD_INT 2
21770: NEG
21771: PUSH
21772: EMPTY
21773: LIST
21774: LIST
21775: PUSH
21776: LD_INT 0
21778: PUSH
21779: LD_INT 2
21781: NEG
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: PUSH
21787: LD_INT 1
21789: PUSH
21790: LD_INT 1
21792: NEG
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: PUSH
21798: LD_INT 2
21800: PUSH
21801: LD_INT 0
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: PUSH
21808: LD_INT 2
21810: PUSH
21811: LD_INT 1
21813: PUSH
21814: EMPTY
21815: LIST
21816: LIST
21817: PUSH
21818: LD_INT 2
21820: PUSH
21821: LD_INT 2
21823: PUSH
21824: EMPTY
21825: LIST
21826: LIST
21827: PUSH
21828: LD_INT 1
21830: PUSH
21831: LD_INT 2
21833: PUSH
21834: EMPTY
21835: LIST
21836: LIST
21837: PUSH
21838: LD_INT 0
21840: PUSH
21841: LD_INT 2
21843: PUSH
21844: EMPTY
21845: LIST
21846: LIST
21847: PUSH
21848: LD_INT 1
21850: NEG
21851: PUSH
21852: LD_INT 1
21854: PUSH
21855: EMPTY
21856: LIST
21857: LIST
21858: PUSH
21859: LD_INT 2
21861: NEG
21862: PUSH
21863: LD_INT 0
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: PUSH
21870: LD_INT 2
21872: NEG
21873: PUSH
21874: LD_INT 1
21876: NEG
21877: PUSH
21878: EMPTY
21879: LIST
21880: LIST
21881: PUSH
21882: LD_INT 2
21884: NEG
21885: PUSH
21886: LD_INT 2
21888: NEG
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: PUSH
21894: LD_INT 1
21896: NEG
21897: PUSH
21898: LD_INT 2
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: PUSH
21905: LD_INT 2
21907: NEG
21908: PUSH
21909: LD_INT 1
21911: PUSH
21912: EMPTY
21913: LIST
21914: LIST
21915: PUSH
21916: LD_INT 3
21918: NEG
21919: PUSH
21920: LD_INT 1
21922: NEG
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: PUSH
21928: LD_INT 3
21930: NEG
21931: PUSH
21932: LD_INT 2
21934: NEG
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21965: LD_ADDR_VAR 0 28
21969: PUSH
21970: LD_INT 0
21972: PUSH
21973: LD_INT 0
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: PUSH
21980: LD_INT 0
21982: PUSH
21983: LD_INT 1
21985: NEG
21986: PUSH
21987: EMPTY
21988: LIST
21989: LIST
21990: PUSH
21991: LD_INT 1
21993: PUSH
21994: LD_INT 0
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PUSH
22001: LD_INT 1
22003: PUSH
22004: LD_INT 1
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: PUSH
22011: LD_INT 0
22013: PUSH
22014: LD_INT 1
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: PUSH
22021: LD_INT 1
22023: NEG
22024: PUSH
22025: LD_INT 0
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: PUSH
22032: LD_INT 1
22034: NEG
22035: PUSH
22036: LD_INT 1
22038: NEG
22039: PUSH
22040: EMPTY
22041: LIST
22042: LIST
22043: PUSH
22044: LD_INT 1
22046: NEG
22047: PUSH
22048: LD_INT 2
22050: NEG
22051: PUSH
22052: EMPTY
22053: LIST
22054: LIST
22055: PUSH
22056: LD_INT 0
22058: PUSH
22059: LD_INT 2
22061: NEG
22062: PUSH
22063: EMPTY
22064: LIST
22065: LIST
22066: PUSH
22067: LD_INT 1
22069: PUSH
22070: LD_INT 1
22072: NEG
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: PUSH
22078: LD_INT 2
22080: PUSH
22081: LD_INT 0
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: PUSH
22088: LD_INT 2
22090: PUSH
22091: LD_INT 1
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: PUSH
22098: LD_INT 2
22100: PUSH
22101: LD_INT 2
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PUSH
22108: LD_INT 1
22110: PUSH
22111: LD_INT 2
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PUSH
22118: LD_INT 0
22120: PUSH
22121: LD_INT 2
22123: PUSH
22124: EMPTY
22125: LIST
22126: LIST
22127: PUSH
22128: LD_INT 1
22130: NEG
22131: PUSH
22132: LD_INT 1
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: PUSH
22139: LD_INT 2
22141: NEG
22142: PUSH
22143: LD_INT 0
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: PUSH
22150: LD_INT 2
22152: NEG
22153: PUSH
22154: LD_INT 1
22156: NEG
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: PUSH
22162: LD_INT 2
22164: NEG
22165: PUSH
22166: LD_INT 2
22168: NEG
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: PUSH
22174: LD_INT 2
22176: NEG
22177: PUSH
22178: LD_INT 3
22180: NEG
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: PUSH
22186: LD_INT 1
22188: NEG
22189: PUSH
22190: LD_INT 3
22192: NEG
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: PUSH
22198: LD_INT 3
22200: NEG
22201: PUSH
22202: LD_INT 1
22204: NEG
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PUSH
22210: LD_INT 3
22212: NEG
22213: PUSH
22214: LD_INT 2
22216: NEG
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22247: LD_ADDR_VAR 0 29
22251: PUSH
22252: LD_INT 0
22254: PUSH
22255: LD_INT 0
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: PUSH
22262: LD_INT 0
22264: PUSH
22265: LD_INT 1
22267: NEG
22268: PUSH
22269: EMPTY
22270: LIST
22271: LIST
22272: PUSH
22273: LD_INT 1
22275: PUSH
22276: LD_INT 0
22278: PUSH
22279: EMPTY
22280: LIST
22281: LIST
22282: PUSH
22283: LD_INT 1
22285: PUSH
22286: LD_INT 1
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: PUSH
22293: LD_INT 0
22295: PUSH
22296: LD_INT 1
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: PUSH
22303: LD_INT 1
22305: NEG
22306: PUSH
22307: LD_INT 0
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PUSH
22314: LD_INT 1
22316: NEG
22317: PUSH
22318: LD_INT 1
22320: NEG
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PUSH
22326: LD_INT 1
22328: NEG
22329: PUSH
22330: LD_INT 2
22332: NEG
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: PUSH
22338: LD_INT 0
22340: PUSH
22341: LD_INT 2
22343: NEG
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: PUSH
22349: LD_INT 1
22351: PUSH
22352: LD_INT 1
22354: NEG
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: PUSH
22360: LD_INT 2
22362: PUSH
22363: LD_INT 0
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: PUSH
22370: LD_INT 2
22372: PUSH
22373: LD_INT 1
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PUSH
22380: LD_INT 1
22382: PUSH
22383: LD_INT 2
22385: PUSH
22386: EMPTY
22387: LIST
22388: LIST
22389: PUSH
22390: LD_INT 0
22392: PUSH
22393: LD_INT 2
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: PUSH
22400: LD_INT 1
22402: NEG
22403: PUSH
22404: LD_INT 1
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: PUSH
22411: LD_INT 2
22413: NEG
22414: PUSH
22415: LD_INT 1
22417: NEG
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: PUSH
22423: LD_INT 2
22425: NEG
22426: PUSH
22427: LD_INT 2
22429: NEG
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PUSH
22435: LD_INT 2
22437: NEG
22438: PUSH
22439: LD_INT 3
22441: NEG
22442: PUSH
22443: EMPTY
22444: LIST
22445: LIST
22446: PUSH
22447: LD_INT 2
22449: PUSH
22450: LD_INT 1
22452: NEG
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: PUSH
22458: LD_INT 3
22460: PUSH
22461: LD_INT 1
22463: PUSH
22464: EMPTY
22465: LIST
22466: LIST
22467: PUSH
22468: LD_INT 1
22470: PUSH
22471: LD_INT 3
22473: PUSH
22474: EMPTY
22475: LIST
22476: LIST
22477: PUSH
22478: LD_INT 1
22480: NEG
22481: PUSH
22482: LD_INT 2
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: PUSH
22489: LD_INT 3
22491: NEG
22492: PUSH
22493: LD_INT 2
22495: NEG
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22526: LD_ADDR_VAR 0 30
22530: PUSH
22531: LD_INT 0
22533: PUSH
22534: LD_INT 0
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: PUSH
22541: LD_INT 0
22543: PUSH
22544: LD_INT 1
22546: NEG
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: PUSH
22552: LD_INT 1
22554: PUSH
22555: LD_INT 0
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: PUSH
22562: LD_INT 1
22564: PUSH
22565: LD_INT 1
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: PUSH
22572: LD_INT 0
22574: PUSH
22575: LD_INT 1
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: PUSH
22582: LD_INT 1
22584: NEG
22585: PUSH
22586: LD_INT 0
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: PUSH
22593: LD_INT 1
22595: NEG
22596: PUSH
22597: LD_INT 1
22599: NEG
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: PUSH
22605: LD_INT 1
22607: NEG
22608: PUSH
22609: LD_INT 2
22611: NEG
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: PUSH
22617: LD_INT 0
22619: PUSH
22620: LD_INT 2
22622: NEG
22623: PUSH
22624: EMPTY
22625: LIST
22626: LIST
22627: PUSH
22628: LD_INT 1
22630: PUSH
22631: LD_INT 1
22633: NEG
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: PUSH
22639: LD_INT 2
22641: PUSH
22642: LD_INT 0
22644: PUSH
22645: EMPTY
22646: LIST
22647: LIST
22648: PUSH
22649: LD_INT 2
22651: PUSH
22652: LD_INT 1
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: PUSH
22659: LD_INT 2
22661: PUSH
22662: LD_INT 2
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PUSH
22669: LD_INT 1
22671: PUSH
22672: LD_INT 2
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PUSH
22679: LD_INT 1
22681: NEG
22682: PUSH
22683: LD_INT 1
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: PUSH
22690: LD_INT 2
22692: NEG
22693: PUSH
22694: LD_INT 0
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: PUSH
22701: LD_INT 2
22703: NEG
22704: PUSH
22705: LD_INT 1
22707: NEG
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: PUSH
22713: LD_INT 1
22715: NEG
22716: PUSH
22717: LD_INT 3
22719: NEG
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: PUSH
22725: LD_INT 1
22727: PUSH
22728: LD_INT 2
22730: NEG
22731: PUSH
22732: EMPTY
22733: LIST
22734: LIST
22735: PUSH
22736: LD_INT 3
22738: PUSH
22739: LD_INT 2
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: PUSH
22746: LD_INT 2
22748: PUSH
22749: LD_INT 3
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PUSH
22756: LD_INT 2
22758: NEG
22759: PUSH
22760: LD_INT 1
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: PUSH
22767: LD_INT 3
22769: NEG
22770: PUSH
22771: LD_INT 1
22773: NEG
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22804: LD_ADDR_VAR 0 31
22808: PUSH
22809: LD_INT 0
22811: PUSH
22812: LD_INT 0
22814: PUSH
22815: EMPTY
22816: LIST
22817: LIST
22818: PUSH
22819: LD_INT 0
22821: PUSH
22822: LD_INT 1
22824: NEG
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: PUSH
22830: LD_INT 1
22832: PUSH
22833: LD_INT 0
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 1
22842: PUSH
22843: LD_INT 1
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: LD_INT 0
22852: PUSH
22853: LD_INT 1
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 1
22862: NEG
22863: PUSH
22864: LD_INT 0
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: PUSH
22871: LD_INT 1
22873: NEG
22874: PUSH
22875: LD_INT 1
22877: NEG
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: PUSH
22883: LD_INT 1
22885: NEG
22886: PUSH
22887: LD_INT 2
22889: NEG
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 1
22897: PUSH
22898: LD_INT 1
22900: NEG
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: PUSH
22906: LD_INT 2
22908: PUSH
22909: LD_INT 0
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: LD_INT 2
22918: PUSH
22919: LD_INT 1
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: LD_INT 2
22928: PUSH
22929: LD_INT 2
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: PUSH
22936: LD_INT 1
22938: PUSH
22939: LD_INT 2
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: PUSH
22946: LD_INT 0
22948: PUSH
22949: LD_INT 2
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: PUSH
22956: LD_INT 1
22958: NEG
22959: PUSH
22960: LD_INT 1
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: PUSH
22967: LD_INT 2
22969: NEG
22970: PUSH
22971: LD_INT 1
22973: NEG
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: LD_INT 2
22981: NEG
22982: PUSH
22983: LD_INT 2
22985: NEG
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: PUSH
22991: LD_INT 2
22993: NEG
22994: PUSH
22995: LD_INT 3
22997: NEG
22998: PUSH
22999: EMPTY
23000: LIST
23001: LIST
23002: PUSH
23003: LD_INT 2
23005: PUSH
23006: LD_INT 1
23008: NEG
23009: PUSH
23010: EMPTY
23011: LIST
23012: LIST
23013: PUSH
23014: LD_INT 3
23016: PUSH
23017: LD_INT 1
23019: PUSH
23020: EMPTY
23021: LIST
23022: LIST
23023: PUSH
23024: LD_INT 1
23026: PUSH
23027: LD_INT 3
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: PUSH
23034: LD_INT 1
23036: NEG
23037: PUSH
23038: LD_INT 2
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PUSH
23045: LD_INT 3
23047: NEG
23048: PUSH
23049: LD_INT 2
23051: NEG
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23082: LD_ADDR_VAR 0 32
23086: PUSH
23087: LD_INT 0
23089: PUSH
23090: LD_INT 0
23092: PUSH
23093: EMPTY
23094: LIST
23095: LIST
23096: PUSH
23097: LD_INT 0
23099: PUSH
23100: LD_INT 1
23102: NEG
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: PUSH
23108: LD_INT 1
23110: PUSH
23111: LD_INT 0
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: PUSH
23118: LD_INT 1
23120: PUSH
23121: LD_INT 1
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PUSH
23128: LD_INT 0
23130: PUSH
23131: LD_INT 1
23133: PUSH
23134: EMPTY
23135: LIST
23136: LIST
23137: PUSH
23138: LD_INT 1
23140: NEG
23141: PUSH
23142: LD_INT 0
23144: PUSH
23145: EMPTY
23146: LIST
23147: LIST
23148: PUSH
23149: LD_INT 1
23151: NEG
23152: PUSH
23153: LD_INT 1
23155: NEG
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: PUSH
23161: LD_INT 1
23163: NEG
23164: PUSH
23165: LD_INT 2
23167: NEG
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: PUSH
23173: LD_INT 0
23175: PUSH
23176: LD_INT 2
23178: NEG
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: PUSH
23184: LD_INT 1
23186: PUSH
23187: LD_INT 1
23189: NEG
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: PUSH
23195: LD_INT 2
23197: PUSH
23198: LD_INT 1
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PUSH
23205: LD_INT 2
23207: PUSH
23208: LD_INT 2
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: PUSH
23215: LD_INT 1
23217: PUSH
23218: LD_INT 2
23220: PUSH
23221: EMPTY
23222: LIST
23223: LIST
23224: PUSH
23225: LD_INT 0
23227: PUSH
23228: LD_INT 2
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: PUSH
23235: LD_INT 1
23237: NEG
23238: PUSH
23239: LD_INT 1
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: PUSH
23246: LD_INT 2
23248: NEG
23249: PUSH
23250: LD_INT 0
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: PUSH
23257: LD_INT 2
23259: NEG
23260: PUSH
23261: LD_INT 1
23263: NEG
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: PUSH
23269: LD_INT 1
23271: NEG
23272: PUSH
23273: LD_INT 3
23275: NEG
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: PUSH
23281: LD_INT 1
23283: PUSH
23284: LD_INT 2
23286: NEG
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: LD_INT 3
23294: PUSH
23295: LD_INT 2
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: PUSH
23302: LD_INT 2
23304: PUSH
23305: LD_INT 3
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: PUSH
23312: LD_INT 2
23314: NEG
23315: PUSH
23316: LD_INT 1
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: PUSH
23323: LD_INT 3
23325: NEG
23326: PUSH
23327: LD_INT 1
23329: NEG
23330: PUSH
23331: EMPTY
23332: LIST
23333: LIST
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23360: LD_ADDR_VAR 0 33
23364: PUSH
23365: LD_INT 0
23367: PUSH
23368: LD_INT 0
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: PUSH
23375: LD_INT 0
23377: PUSH
23378: LD_INT 1
23380: NEG
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: PUSH
23386: LD_INT 1
23388: PUSH
23389: LD_INT 0
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 1
23398: PUSH
23399: LD_INT 1
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: PUSH
23406: LD_INT 0
23408: PUSH
23409: LD_INT 1
23411: PUSH
23412: EMPTY
23413: LIST
23414: LIST
23415: PUSH
23416: LD_INT 1
23418: NEG
23419: PUSH
23420: LD_INT 0
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: PUSH
23427: LD_INT 1
23429: NEG
23430: PUSH
23431: LD_INT 1
23433: NEG
23434: PUSH
23435: EMPTY
23436: LIST
23437: LIST
23438: PUSH
23439: LD_INT 1
23441: NEG
23442: PUSH
23443: LD_INT 2
23445: NEG
23446: PUSH
23447: EMPTY
23448: LIST
23449: LIST
23450: PUSH
23451: LD_INT 1
23453: PUSH
23454: LD_INT 1
23456: NEG
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: PUSH
23462: LD_INT 2
23464: PUSH
23465: LD_INT 0
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: PUSH
23472: LD_INT 2
23474: PUSH
23475: LD_INT 1
23477: PUSH
23478: EMPTY
23479: LIST
23480: LIST
23481: PUSH
23482: LD_INT 1
23484: PUSH
23485: LD_INT 2
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: PUSH
23492: LD_INT 0
23494: PUSH
23495: LD_INT 2
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: PUSH
23502: LD_INT 1
23504: NEG
23505: PUSH
23506: LD_INT 1
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: PUSH
23513: LD_INT 2
23515: NEG
23516: PUSH
23517: LD_INT 0
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: PUSH
23524: LD_INT 2
23526: NEG
23527: PUSH
23528: LD_INT 1
23530: NEG
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: PUSH
23536: LD_INT 2
23538: NEG
23539: PUSH
23540: LD_INT 2
23542: NEG
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: PUSH
23548: LD_INT 2
23550: NEG
23551: PUSH
23552: LD_INT 3
23554: NEG
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: PUSH
23560: LD_INT 2
23562: PUSH
23563: LD_INT 1
23565: NEG
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: PUSH
23571: LD_INT 3
23573: PUSH
23574: LD_INT 1
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: PUSH
23581: LD_INT 1
23583: PUSH
23584: LD_INT 3
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: PUSH
23591: LD_INT 1
23593: NEG
23594: PUSH
23595: LD_INT 2
23597: PUSH
23598: EMPTY
23599: LIST
23600: LIST
23601: PUSH
23602: LD_INT 3
23604: NEG
23605: PUSH
23606: LD_INT 2
23608: NEG
23609: PUSH
23610: EMPTY
23611: LIST
23612: LIST
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23639: LD_ADDR_VAR 0 34
23643: PUSH
23644: LD_INT 0
23646: PUSH
23647: LD_INT 0
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: PUSH
23654: LD_INT 0
23656: PUSH
23657: LD_INT 1
23659: NEG
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: PUSH
23665: LD_INT 1
23667: PUSH
23668: LD_INT 0
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: PUSH
23675: LD_INT 1
23677: PUSH
23678: LD_INT 1
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: PUSH
23685: LD_INT 0
23687: PUSH
23688: LD_INT 1
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: PUSH
23695: LD_INT 1
23697: NEG
23698: PUSH
23699: LD_INT 0
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 1
23708: NEG
23709: PUSH
23710: LD_INT 1
23712: NEG
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PUSH
23718: LD_INT 1
23720: NEG
23721: PUSH
23722: LD_INT 2
23724: NEG
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: PUSH
23730: LD_INT 0
23732: PUSH
23733: LD_INT 2
23735: NEG
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: PUSH
23741: LD_INT 1
23743: PUSH
23744: LD_INT 1
23746: NEG
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: PUSH
23752: LD_INT 2
23754: PUSH
23755: LD_INT 1
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: PUSH
23762: LD_INT 2
23764: PUSH
23765: LD_INT 2
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: PUSH
23772: LD_INT 1
23774: PUSH
23775: LD_INT 2
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: PUSH
23782: LD_INT 1
23784: NEG
23785: PUSH
23786: LD_INT 1
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: PUSH
23793: LD_INT 2
23795: NEG
23796: PUSH
23797: LD_INT 0
23799: PUSH
23800: EMPTY
23801: LIST
23802: LIST
23803: PUSH
23804: LD_INT 2
23806: NEG
23807: PUSH
23808: LD_INT 1
23810: NEG
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: PUSH
23816: LD_INT 2
23818: NEG
23819: PUSH
23820: LD_INT 2
23822: NEG
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PUSH
23828: LD_INT 1
23830: NEG
23831: PUSH
23832: LD_INT 3
23834: NEG
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: PUSH
23840: LD_INT 1
23842: PUSH
23843: LD_INT 2
23845: NEG
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: PUSH
23851: LD_INT 3
23853: PUSH
23854: LD_INT 2
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: PUSH
23861: LD_INT 2
23863: PUSH
23864: LD_INT 3
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: PUSH
23871: LD_INT 2
23873: NEG
23874: PUSH
23875: LD_INT 1
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: PUSH
23882: LD_INT 3
23884: NEG
23885: PUSH
23886: LD_INT 1
23888: NEG
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23919: LD_ADDR_VAR 0 35
23923: PUSH
23924: LD_INT 0
23926: PUSH
23927: LD_INT 0
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: PUSH
23934: LD_INT 0
23936: PUSH
23937: LD_INT 1
23939: NEG
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PUSH
23945: LD_INT 1
23947: PUSH
23948: LD_INT 0
23950: PUSH
23951: EMPTY
23952: LIST
23953: LIST
23954: PUSH
23955: LD_INT 1
23957: PUSH
23958: LD_INT 1
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: PUSH
23965: LD_INT 0
23967: PUSH
23968: LD_INT 1
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: PUSH
23975: LD_INT 1
23977: NEG
23978: PUSH
23979: LD_INT 0
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: PUSH
23986: LD_INT 1
23988: NEG
23989: PUSH
23990: LD_INT 1
23992: NEG
23993: PUSH
23994: EMPTY
23995: LIST
23996: LIST
23997: PUSH
23998: LD_INT 2
24000: PUSH
24001: LD_INT 1
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: PUSH
24008: LD_INT 2
24010: NEG
24011: PUSH
24012: LD_INT 1
24014: NEG
24015: PUSH
24016: EMPTY
24017: LIST
24018: LIST
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24031: LD_ADDR_VAR 0 36
24035: PUSH
24036: LD_INT 0
24038: PUSH
24039: LD_INT 0
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: PUSH
24046: LD_INT 0
24048: PUSH
24049: LD_INT 1
24051: NEG
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: PUSH
24057: LD_INT 1
24059: PUSH
24060: LD_INT 0
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: PUSH
24067: LD_INT 1
24069: PUSH
24070: LD_INT 1
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: PUSH
24077: LD_INT 0
24079: PUSH
24080: LD_INT 1
24082: PUSH
24083: EMPTY
24084: LIST
24085: LIST
24086: PUSH
24087: LD_INT 1
24089: NEG
24090: PUSH
24091: LD_INT 0
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: PUSH
24098: LD_INT 1
24100: NEG
24101: PUSH
24102: LD_INT 1
24104: NEG
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: PUSH
24110: LD_INT 1
24112: NEG
24113: PUSH
24114: LD_INT 2
24116: NEG
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: PUSH
24122: LD_INT 1
24124: PUSH
24125: LD_INT 2
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24143: LD_ADDR_VAR 0 37
24147: PUSH
24148: LD_INT 0
24150: PUSH
24151: LD_INT 0
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: PUSH
24158: LD_INT 0
24160: PUSH
24161: LD_INT 1
24163: NEG
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 1
24171: PUSH
24172: LD_INT 0
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 1
24181: PUSH
24182: LD_INT 1
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: LD_INT 0
24191: PUSH
24192: LD_INT 1
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: PUSH
24199: LD_INT 1
24201: NEG
24202: PUSH
24203: LD_INT 0
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: PUSH
24210: LD_INT 1
24212: NEG
24213: PUSH
24214: LD_INT 1
24216: NEG
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 1
24224: PUSH
24225: LD_INT 1
24227: NEG
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 1
24235: NEG
24236: PUSH
24237: LD_INT 1
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24255: LD_ADDR_VAR 0 38
24259: PUSH
24260: LD_INT 0
24262: PUSH
24263: LD_INT 0
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: PUSH
24270: LD_INT 0
24272: PUSH
24273: LD_INT 1
24275: NEG
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: PUSH
24281: LD_INT 1
24283: PUSH
24284: LD_INT 0
24286: PUSH
24287: EMPTY
24288: LIST
24289: LIST
24290: PUSH
24291: LD_INT 1
24293: PUSH
24294: LD_INT 1
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: PUSH
24301: LD_INT 0
24303: PUSH
24304: LD_INT 1
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: PUSH
24311: LD_INT 1
24313: NEG
24314: PUSH
24315: LD_INT 0
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: PUSH
24322: LD_INT 1
24324: NEG
24325: PUSH
24326: LD_INT 1
24328: NEG
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: PUSH
24334: LD_INT 2
24336: PUSH
24337: LD_INT 1
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: PUSH
24344: LD_INT 2
24346: NEG
24347: PUSH
24348: LD_INT 1
24350: NEG
24351: PUSH
24352: EMPTY
24353: LIST
24354: LIST
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24367: LD_ADDR_VAR 0 39
24371: PUSH
24372: LD_INT 0
24374: PUSH
24375: LD_INT 0
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: PUSH
24382: LD_INT 0
24384: PUSH
24385: LD_INT 1
24387: NEG
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PUSH
24393: LD_INT 1
24395: PUSH
24396: LD_INT 0
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: PUSH
24403: LD_INT 1
24405: PUSH
24406: LD_INT 1
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: LD_INT 0
24415: PUSH
24416: LD_INT 1
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: PUSH
24423: LD_INT 1
24425: NEG
24426: PUSH
24427: LD_INT 0
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: PUSH
24434: LD_INT 1
24436: NEG
24437: PUSH
24438: LD_INT 1
24440: NEG
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: PUSH
24446: LD_INT 1
24448: NEG
24449: PUSH
24450: LD_INT 2
24452: NEG
24453: PUSH
24454: EMPTY
24455: LIST
24456: LIST
24457: PUSH
24458: LD_INT 1
24460: PUSH
24461: LD_INT 2
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PUSH
24468: EMPTY
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24479: LD_ADDR_VAR 0 40
24483: PUSH
24484: LD_INT 0
24486: PUSH
24487: LD_INT 0
24489: PUSH
24490: EMPTY
24491: LIST
24492: LIST
24493: PUSH
24494: LD_INT 0
24496: PUSH
24497: LD_INT 1
24499: NEG
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: PUSH
24505: LD_INT 1
24507: PUSH
24508: LD_INT 0
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: PUSH
24515: LD_INT 1
24517: PUSH
24518: LD_INT 1
24520: PUSH
24521: EMPTY
24522: LIST
24523: LIST
24524: PUSH
24525: LD_INT 0
24527: PUSH
24528: LD_INT 1
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: PUSH
24535: LD_INT 1
24537: NEG
24538: PUSH
24539: LD_INT 0
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: PUSH
24546: LD_INT 1
24548: NEG
24549: PUSH
24550: LD_INT 1
24552: NEG
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 1
24560: PUSH
24561: LD_INT 1
24563: NEG
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PUSH
24569: LD_INT 1
24571: NEG
24572: PUSH
24573: LD_INT 1
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: PUSH
24580: EMPTY
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24591: LD_ADDR_VAR 0 41
24595: PUSH
24596: LD_INT 0
24598: PUSH
24599: LD_INT 0
24601: PUSH
24602: EMPTY
24603: LIST
24604: LIST
24605: PUSH
24606: LD_INT 0
24608: PUSH
24609: LD_INT 1
24611: NEG
24612: PUSH
24613: EMPTY
24614: LIST
24615: LIST
24616: PUSH
24617: LD_INT 1
24619: PUSH
24620: LD_INT 0
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: PUSH
24627: LD_INT 1
24629: PUSH
24630: LD_INT 1
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: PUSH
24637: LD_INT 0
24639: PUSH
24640: LD_INT 1
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: PUSH
24647: LD_INT 1
24649: NEG
24650: PUSH
24651: LD_INT 0
24653: PUSH
24654: EMPTY
24655: LIST
24656: LIST
24657: PUSH
24658: LD_INT 1
24660: NEG
24661: PUSH
24662: LD_INT 1
24664: NEG
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: PUSH
24670: LD_INT 1
24672: NEG
24673: PUSH
24674: LD_INT 2
24676: NEG
24677: PUSH
24678: EMPTY
24679: LIST
24680: LIST
24681: PUSH
24682: LD_INT 1
24684: PUSH
24685: LD_INT 1
24687: NEG
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: PUSH
24693: LD_INT 2
24695: PUSH
24696: LD_INT 0
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: PUSH
24703: LD_INT 2
24705: PUSH
24706: LD_INT 1
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: PUSH
24713: LD_INT 2
24715: PUSH
24716: LD_INT 2
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: PUSH
24723: LD_INT 1
24725: PUSH
24726: LD_INT 2
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: PUSH
24733: LD_INT 1
24735: NEG
24736: PUSH
24737: LD_INT 1
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PUSH
24744: LD_INT 2
24746: NEG
24747: PUSH
24748: LD_INT 0
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: PUSH
24755: LD_INT 2
24757: NEG
24758: PUSH
24759: LD_INT 1
24761: NEG
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PUSH
24767: LD_INT 2
24769: NEG
24770: PUSH
24771: LD_INT 2
24773: NEG
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: PUSH
24779: LD_INT 2
24781: NEG
24782: PUSH
24783: LD_INT 3
24785: NEG
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: PUSH
24791: LD_INT 2
24793: PUSH
24794: LD_INT 1
24796: NEG
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: PUSH
24802: LD_INT 3
24804: PUSH
24805: LD_INT 0
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: PUSH
24812: LD_INT 3
24814: PUSH
24815: LD_INT 1
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PUSH
24822: LD_INT 3
24824: PUSH
24825: LD_INT 2
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PUSH
24832: LD_INT 3
24834: PUSH
24835: LD_INT 3
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: PUSH
24842: LD_INT 2
24844: PUSH
24845: LD_INT 3
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: PUSH
24852: LD_INT 2
24854: NEG
24855: PUSH
24856: LD_INT 1
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: PUSH
24863: LD_INT 3
24865: NEG
24866: PUSH
24867: LD_INT 0
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: PUSH
24874: LD_INT 3
24876: NEG
24877: PUSH
24878: LD_INT 1
24880: NEG
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: PUSH
24886: LD_INT 3
24888: NEG
24889: PUSH
24890: LD_INT 2
24892: NEG
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PUSH
24898: LD_INT 3
24900: NEG
24901: PUSH
24902: LD_INT 3
24904: NEG
24905: PUSH
24906: EMPTY
24907: LIST
24908: LIST
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24941: LD_ADDR_VAR 0 42
24945: PUSH
24946: LD_INT 0
24948: PUSH
24949: LD_INT 0
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: PUSH
24956: LD_INT 0
24958: PUSH
24959: LD_INT 1
24961: NEG
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PUSH
24967: LD_INT 1
24969: PUSH
24970: LD_INT 0
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: PUSH
24977: LD_INT 1
24979: PUSH
24980: LD_INT 1
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: PUSH
24987: LD_INT 0
24989: PUSH
24990: LD_INT 1
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: PUSH
24997: LD_INT 1
24999: NEG
25000: PUSH
25001: LD_INT 0
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: PUSH
25008: LD_INT 1
25010: NEG
25011: PUSH
25012: LD_INT 1
25014: NEG
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: LD_INT 1
25022: NEG
25023: PUSH
25024: LD_INT 2
25026: NEG
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: LD_INT 0
25034: PUSH
25035: LD_INT 2
25037: NEG
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: LD_INT 1
25045: PUSH
25046: LD_INT 1
25048: NEG
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: LD_INT 2
25056: PUSH
25057: LD_INT 1
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: PUSH
25064: LD_INT 2
25066: PUSH
25067: LD_INT 2
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PUSH
25074: LD_INT 1
25076: PUSH
25077: LD_INT 2
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: PUSH
25084: LD_INT 0
25086: PUSH
25087: LD_INT 2
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: PUSH
25094: LD_INT 1
25096: NEG
25097: PUSH
25098: LD_INT 1
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: LD_INT 2
25107: NEG
25108: PUSH
25109: LD_INT 1
25111: NEG
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PUSH
25117: LD_INT 2
25119: NEG
25120: PUSH
25121: LD_INT 2
25123: NEG
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: PUSH
25129: LD_INT 2
25131: NEG
25132: PUSH
25133: LD_INT 3
25135: NEG
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: LD_INT 1
25143: NEG
25144: PUSH
25145: LD_INT 3
25147: NEG
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: PUSH
25153: LD_INT 0
25155: PUSH
25156: LD_INT 3
25158: NEG
25159: PUSH
25160: EMPTY
25161: LIST
25162: LIST
25163: PUSH
25164: LD_INT 1
25166: PUSH
25167: LD_INT 2
25169: NEG
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: PUSH
25175: LD_INT 3
25177: PUSH
25178: LD_INT 2
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: LD_INT 3
25187: PUSH
25188: LD_INT 3
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: PUSH
25195: LD_INT 2
25197: PUSH
25198: LD_INT 3
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: PUSH
25205: LD_INT 1
25207: PUSH
25208: LD_INT 3
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: LD_INT 0
25217: PUSH
25218: LD_INT 3
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PUSH
25225: LD_INT 1
25227: NEG
25228: PUSH
25229: LD_INT 2
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: PUSH
25236: LD_INT 3
25238: NEG
25239: PUSH
25240: LD_INT 2
25242: NEG
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: PUSH
25248: LD_INT 3
25250: NEG
25251: PUSH
25252: LD_INT 3
25254: NEG
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25291: LD_ADDR_VAR 0 43
25295: PUSH
25296: LD_INT 0
25298: PUSH
25299: LD_INT 0
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PUSH
25306: LD_INT 0
25308: PUSH
25309: LD_INT 1
25311: NEG
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PUSH
25317: LD_INT 1
25319: PUSH
25320: LD_INT 0
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: PUSH
25327: LD_INT 1
25329: PUSH
25330: LD_INT 1
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: PUSH
25337: LD_INT 0
25339: PUSH
25340: LD_INT 1
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PUSH
25347: LD_INT 1
25349: NEG
25350: PUSH
25351: LD_INT 0
25353: PUSH
25354: EMPTY
25355: LIST
25356: LIST
25357: PUSH
25358: LD_INT 1
25360: NEG
25361: PUSH
25362: LD_INT 1
25364: NEG
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: PUSH
25370: LD_INT 1
25372: NEG
25373: PUSH
25374: LD_INT 2
25376: NEG
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PUSH
25382: LD_INT 0
25384: PUSH
25385: LD_INT 2
25387: NEG
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: PUSH
25393: LD_INT 1
25395: PUSH
25396: LD_INT 1
25398: NEG
25399: PUSH
25400: EMPTY
25401: LIST
25402: LIST
25403: PUSH
25404: LD_INT 2
25406: PUSH
25407: LD_INT 0
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: PUSH
25414: LD_INT 2
25416: PUSH
25417: LD_INT 1
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: PUSH
25424: LD_INT 1
25426: PUSH
25427: LD_INT 2
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: PUSH
25434: LD_INT 0
25436: PUSH
25437: LD_INT 2
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: PUSH
25444: LD_INT 1
25446: NEG
25447: PUSH
25448: LD_INT 1
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: PUSH
25455: LD_INT 2
25457: NEG
25458: PUSH
25459: LD_INT 0
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PUSH
25466: LD_INT 2
25468: NEG
25469: PUSH
25470: LD_INT 1
25472: NEG
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: LD_INT 1
25480: NEG
25481: PUSH
25482: LD_INT 3
25484: NEG
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: PUSH
25490: LD_INT 0
25492: PUSH
25493: LD_INT 3
25495: NEG
25496: PUSH
25497: EMPTY
25498: LIST
25499: LIST
25500: PUSH
25501: LD_INT 1
25503: PUSH
25504: LD_INT 2
25506: NEG
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: PUSH
25512: LD_INT 2
25514: PUSH
25515: LD_INT 1
25517: NEG
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: PUSH
25523: LD_INT 3
25525: PUSH
25526: LD_INT 0
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: LD_INT 3
25535: PUSH
25536: LD_INT 1
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: LD_INT 1
25545: PUSH
25546: LD_INT 3
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: PUSH
25553: LD_INT 0
25555: PUSH
25556: LD_INT 3
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PUSH
25563: LD_INT 1
25565: NEG
25566: PUSH
25567: LD_INT 2
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: LD_INT 2
25576: NEG
25577: PUSH
25578: LD_INT 1
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: PUSH
25585: LD_INT 3
25587: NEG
25588: PUSH
25589: LD_INT 0
25591: PUSH
25592: EMPTY
25593: LIST
25594: LIST
25595: PUSH
25596: LD_INT 3
25598: NEG
25599: PUSH
25600: LD_INT 1
25602: NEG
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: LIST
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25639: LD_ADDR_VAR 0 44
25643: PUSH
25644: LD_INT 0
25646: PUSH
25647: LD_INT 0
25649: PUSH
25650: EMPTY
25651: LIST
25652: LIST
25653: PUSH
25654: LD_INT 0
25656: PUSH
25657: LD_INT 1
25659: NEG
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: PUSH
25665: LD_INT 1
25667: PUSH
25668: LD_INT 0
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: LD_INT 1
25677: PUSH
25678: LD_INT 1
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: LD_INT 0
25687: PUSH
25688: LD_INT 1
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: PUSH
25695: LD_INT 1
25697: NEG
25698: PUSH
25699: LD_INT 0
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: PUSH
25706: LD_INT 1
25708: NEG
25709: PUSH
25710: LD_INT 1
25712: NEG
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: PUSH
25718: LD_INT 1
25720: NEG
25721: PUSH
25722: LD_INT 2
25724: NEG
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: PUSH
25730: LD_INT 1
25732: PUSH
25733: LD_INT 1
25735: NEG
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PUSH
25741: LD_INT 2
25743: PUSH
25744: LD_INT 0
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: PUSH
25751: LD_INT 2
25753: PUSH
25754: LD_INT 1
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: PUSH
25761: LD_INT 2
25763: PUSH
25764: LD_INT 2
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PUSH
25771: LD_INT 1
25773: PUSH
25774: LD_INT 2
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PUSH
25781: LD_INT 1
25783: NEG
25784: PUSH
25785: LD_INT 1
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: LD_INT 2
25794: NEG
25795: PUSH
25796: LD_INT 0
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: PUSH
25803: LD_INT 2
25805: NEG
25806: PUSH
25807: LD_INT 1
25809: NEG
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: PUSH
25815: LD_INT 2
25817: NEG
25818: PUSH
25819: LD_INT 2
25821: NEG
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: LD_INT 2
25829: NEG
25830: PUSH
25831: LD_INT 3
25833: NEG
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: PUSH
25839: LD_INT 2
25841: PUSH
25842: LD_INT 1
25844: NEG
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 3
25852: PUSH
25853: LD_INT 0
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PUSH
25860: LD_INT 3
25862: PUSH
25863: LD_INT 1
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: PUSH
25870: LD_INT 3
25872: PUSH
25873: LD_INT 2
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PUSH
25880: LD_INT 3
25882: PUSH
25883: LD_INT 3
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: PUSH
25890: LD_INT 2
25892: PUSH
25893: LD_INT 3
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: PUSH
25900: LD_INT 2
25902: NEG
25903: PUSH
25904: LD_INT 1
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: PUSH
25911: LD_INT 3
25913: NEG
25914: PUSH
25915: LD_INT 0
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: PUSH
25922: LD_INT 3
25924: NEG
25925: PUSH
25926: LD_INT 1
25928: NEG
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: PUSH
25934: LD_INT 3
25936: NEG
25937: PUSH
25938: LD_INT 2
25940: NEG
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: LD_INT 3
25948: NEG
25949: PUSH
25950: LD_INT 3
25952: NEG
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: LIST
25984: LIST
25985: LIST
25986: LIST
25987: LIST
25988: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25989: LD_ADDR_VAR 0 45
25993: PUSH
25994: LD_INT 0
25996: PUSH
25997: LD_INT 0
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: PUSH
26004: LD_INT 0
26006: PUSH
26007: LD_INT 1
26009: NEG
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: PUSH
26015: LD_INT 1
26017: PUSH
26018: LD_INT 0
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: PUSH
26025: LD_INT 1
26027: PUSH
26028: LD_INT 1
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: PUSH
26035: LD_INT 0
26037: PUSH
26038: LD_INT 1
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: PUSH
26045: LD_INT 1
26047: NEG
26048: PUSH
26049: LD_INT 0
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PUSH
26056: LD_INT 1
26058: NEG
26059: PUSH
26060: LD_INT 1
26062: NEG
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: LD_INT 1
26070: NEG
26071: PUSH
26072: LD_INT 2
26074: NEG
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: LD_INT 0
26082: PUSH
26083: LD_INT 2
26085: NEG
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: PUSH
26091: LD_INT 1
26093: PUSH
26094: LD_INT 1
26096: NEG
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: PUSH
26102: LD_INT 2
26104: PUSH
26105: LD_INT 1
26107: PUSH
26108: EMPTY
26109: LIST
26110: LIST
26111: PUSH
26112: LD_INT 2
26114: PUSH
26115: LD_INT 2
26117: PUSH
26118: EMPTY
26119: LIST
26120: LIST
26121: PUSH
26122: LD_INT 1
26124: PUSH
26125: LD_INT 2
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: PUSH
26132: LD_INT 0
26134: PUSH
26135: LD_INT 2
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: PUSH
26142: LD_INT 1
26144: NEG
26145: PUSH
26146: LD_INT 1
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: LD_INT 2
26155: NEG
26156: PUSH
26157: LD_INT 1
26159: NEG
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: LD_INT 2
26167: NEG
26168: PUSH
26169: LD_INT 2
26171: NEG
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: LD_INT 2
26179: NEG
26180: PUSH
26181: LD_INT 3
26183: NEG
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 1
26191: NEG
26192: PUSH
26193: LD_INT 3
26195: NEG
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: PUSH
26201: LD_INT 0
26203: PUSH
26204: LD_INT 3
26206: NEG
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PUSH
26212: LD_INT 1
26214: PUSH
26215: LD_INT 2
26217: NEG
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: PUSH
26223: LD_INT 3
26225: PUSH
26226: LD_INT 2
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: LD_INT 3
26235: PUSH
26236: LD_INT 3
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PUSH
26243: LD_INT 2
26245: PUSH
26246: LD_INT 3
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 1
26255: PUSH
26256: LD_INT 3
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PUSH
26263: LD_INT 0
26265: PUSH
26266: LD_INT 3
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: PUSH
26273: LD_INT 1
26275: NEG
26276: PUSH
26277: LD_INT 2
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: PUSH
26284: LD_INT 3
26286: NEG
26287: PUSH
26288: LD_INT 2
26290: NEG
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PUSH
26296: LD_INT 3
26298: NEG
26299: PUSH
26300: LD_INT 3
26302: NEG
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: LIST
26323: LIST
26324: LIST
26325: LIST
26326: LIST
26327: LIST
26328: LIST
26329: LIST
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26339: LD_ADDR_VAR 0 46
26343: PUSH
26344: LD_INT 0
26346: PUSH
26347: LD_INT 0
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: PUSH
26354: LD_INT 0
26356: PUSH
26357: LD_INT 1
26359: NEG
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: PUSH
26365: LD_INT 1
26367: PUSH
26368: LD_INT 0
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: PUSH
26375: LD_INT 1
26377: PUSH
26378: LD_INT 1
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: PUSH
26385: LD_INT 0
26387: PUSH
26388: LD_INT 1
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: PUSH
26395: LD_INT 1
26397: NEG
26398: PUSH
26399: LD_INT 0
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: LD_INT 1
26408: NEG
26409: PUSH
26410: LD_INT 1
26412: NEG
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: PUSH
26418: LD_INT 1
26420: NEG
26421: PUSH
26422: LD_INT 2
26424: NEG
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: LD_INT 0
26432: PUSH
26433: LD_INT 2
26435: NEG
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: PUSH
26441: LD_INT 1
26443: PUSH
26444: LD_INT 1
26446: NEG
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: PUSH
26452: LD_INT 2
26454: PUSH
26455: LD_INT 0
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: PUSH
26462: LD_INT 2
26464: PUSH
26465: LD_INT 1
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: PUSH
26472: LD_INT 1
26474: PUSH
26475: LD_INT 2
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: PUSH
26482: LD_INT 0
26484: PUSH
26485: LD_INT 2
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PUSH
26492: LD_INT 1
26494: NEG
26495: PUSH
26496: LD_INT 1
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: LD_INT 2
26505: NEG
26506: PUSH
26507: LD_INT 0
26509: PUSH
26510: EMPTY
26511: LIST
26512: LIST
26513: PUSH
26514: LD_INT 2
26516: NEG
26517: PUSH
26518: LD_INT 1
26520: NEG
26521: PUSH
26522: EMPTY
26523: LIST
26524: LIST
26525: PUSH
26526: LD_INT 1
26528: NEG
26529: PUSH
26530: LD_INT 3
26532: NEG
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: PUSH
26538: LD_INT 0
26540: PUSH
26541: LD_INT 3
26543: NEG
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: PUSH
26549: LD_INT 1
26551: PUSH
26552: LD_INT 2
26554: NEG
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: PUSH
26560: LD_INT 2
26562: PUSH
26563: LD_INT 1
26565: NEG
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: LD_INT 3
26573: PUSH
26574: LD_INT 0
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PUSH
26581: LD_INT 3
26583: PUSH
26584: LD_INT 1
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: LD_INT 1
26593: PUSH
26594: LD_INT 3
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 0
26603: PUSH
26604: LD_INT 3
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 1
26613: NEG
26614: PUSH
26615: LD_INT 2
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: PUSH
26622: LD_INT 2
26624: NEG
26625: PUSH
26626: LD_INT 1
26628: PUSH
26629: EMPTY
26630: LIST
26631: LIST
26632: PUSH
26633: LD_INT 3
26635: NEG
26636: PUSH
26637: LD_INT 0
26639: PUSH
26640: EMPTY
26641: LIST
26642: LIST
26643: PUSH
26644: LD_INT 3
26646: NEG
26647: PUSH
26648: LD_INT 1
26650: NEG
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: LIST
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26687: LD_ADDR_VAR 0 47
26691: PUSH
26692: LD_INT 0
26694: PUSH
26695: LD_INT 0
26697: PUSH
26698: EMPTY
26699: LIST
26700: LIST
26701: PUSH
26702: LD_INT 0
26704: PUSH
26705: LD_INT 1
26707: NEG
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PUSH
26713: LD_INT 1
26715: PUSH
26716: LD_INT 0
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: LD_INT 1
26725: PUSH
26726: LD_INT 1
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: PUSH
26733: LD_INT 0
26735: PUSH
26736: LD_INT 1
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PUSH
26743: LD_INT 1
26745: NEG
26746: PUSH
26747: LD_INT 0
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: LD_INT 1
26756: NEG
26757: PUSH
26758: LD_INT 1
26760: NEG
26761: PUSH
26762: EMPTY
26763: LIST
26764: LIST
26765: PUSH
26766: LD_INT 1
26768: NEG
26769: PUSH
26770: LD_INT 2
26772: NEG
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: PUSH
26778: LD_INT 0
26780: PUSH
26781: LD_INT 2
26783: NEG
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: LD_INT 1
26791: PUSH
26792: LD_INT 1
26794: NEG
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: PUSH
26800: LD_INT 2
26802: NEG
26803: PUSH
26804: LD_INT 1
26806: NEG
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PUSH
26812: LD_INT 2
26814: NEG
26815: PUSH
26816: LD_INT 2
26818: NEG
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: LIST
26828: LIST
26829: LIST
26830: LIST
26831: LIST
26832: LIST
26833: LIST
26834: LIST
26835: LIST
26836: LIST
26837: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26838: LD_ADDR_VAR 0 48
26842: PUSH
26843: LD_INT 0
26845: PUSH
26846: LD_INT 0
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: PUSH
26853: LD_INT 0
26855: PUSH
26856: LD_INT 1
26858: NEG
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: PUSH
26864: LD_INT 1
26866: PUSH
26867: LD_INT 0
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: LD_INT 1
26876: PUSH
26877: LD_INT 1
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: PUSH
26884: LD_INT 0
26886: PUSH
26887: LD_INT 1
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: PUSH
26894: LD_INT 1
26896: NEG
26897: PUSH
26898: LD_INT 0
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 1
26907: NEG
26908: PUSH
26909: LD_INT 1
26911: NEG
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: PUSH
26917: LD_INT 1
26919: NEG
26920: PUSH
26921: LD_INT 2
26923: NEG
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: PUSH
26929: LD_INT 0
26931: PUSH
26932: LD_INT 2
26934: NEG
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: PUSH
26940: LD_INT 1
26942: PUSH
26943: LD_INT 1
26945: NEG
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: PUSH
26951: LD_INT 2
26953: PUSH
26954: LD_INT 0
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PUSH
26961: LD_INT 2
26963: PUSH
26964: LD_INT 1
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: LIST
26975: LIST
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26985: LD_ADDR_VAR 0 49
26989: PUSH
26990: LD_INT 0
26992: PUSH
26993: LD_INT 0
26995: PUSH
26996: EMPTY
26997: LIST
26998: LIST
26999: PUSH
27000: LD_INT 0
27002: PUSH
27003: LD_INT 1
27005: NEG
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: LD_INT 1
27013: PUSH
27014: LD_INT 0
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 1
27023: PUSH
27024: LD_INT 1
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PUSH
27031: LD_INT 0
27033: PUSH
27034: LD_INT 1
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: PUSH
27041: LD_INT 1
27043: NEG
27044: PUSH
27045: LD_INT 0
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: LD_INT 1
27054: NEG
27055: PUSH
27056: LD_INT 1
27058: NEG
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PUSH
27064: LD_INT 1
27066: PUSH
27067: LD_INT 1
27069: NEG
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 2
27077: PUSH
27078: LD_INT 0
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 2
27087: PUSH
27088: LD_INT 1
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 2
27097: PUSH
27098: LD_INT 2
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: LD_INT 1
27107: PUSH
27108: LD_INT 2
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27129: LD_ADDR_VAR 0 50
27133: PUSH
27134: LD_INT 0
27136: PUSH
27137: LD_INT 0
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: PUSH
27144: LD_INT 0
27146: PUSH
27147: LD_INT 1
27149: NEG
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: PUSH
27155: LD_INT 1
27157: PUSH
27158: LD_INT 0
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: LD_INT 1
27167: PUSH
27168: LD_INT 1
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PUSH
27175: LD_INT 0
27177: PUSH
27178: LD_INT 1
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: PUSH
27185: LD_INT 1
27187: NEG
27188: PUSH
27189: LD_INT 0
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: PUSH
27196: LD_INT 1
27198: NEG
27199: PUSH
27200: LD_INT 1
27202: NEG
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: PUSH
27208: LD_INT 2
27210: PUSH
27211: LD_INT 1
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: LD_INT 2
27220: PUSH
27221: LD_INT 2
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: PUSH
27228: LD_INT 1
27230: PUSH
27231: LD_INT 2
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: PUSH
27238: LD_INT 0
27240: PUSH
27241: LD_INT 2
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: PUSH
27248: LD_INT 1
27250: NEG
27251: PUSH
27252: LD_INT 1
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27273: LD_ADDR_VAR 0 51
27277: PUSH
27278: LD_INT 0
27280: PUSH
27281: LD_INT 0
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PUSH
27288: LD_INT 0
27290: PUSH
27291: LD_INT 1
27293: NEG
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: PUSH
27299: LD_INT 1
27301: PUSH
27302: LD_INT 0
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: PUSH
27309: LD_INT 1
27311: PUSH
27312: LD_INT 1
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PUSH
27319: LD_INT 0
27321: PUSH
27322: LD_INT 1
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PUSH
27329: LD_INT 1
27331: NEG
27332: PUSH
27333: LD_INT 0
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: PUSH
27340: LD_INT 1
27342: NEG
27343: PUSH
27344: LD_INT 1
27346: NEG
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: LD_INT 1
27354: PUSH
27355: LD_INT 2
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PUSH
27362: LD_INT 0
27364: PUSH
27365: LD_INT 2
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: PUSH
27372: LD_INT 1
27374: NEG
27375: PUSH
27376: LD_INT 1
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: PUSH
27383: LD_INT 2
27385: NEG
27386: PUSH
27387: LD_INT 0
27389: PUSH
27390: EMPTY
27391: LIST
27392: LIST
27393: PUSH
27394: LD_INT 2
27396: NEG
27397: PUSH
27398: LD_INT 1
27400: NEG
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27420: LD_ADDR_VAR 0 52
27424: PUSH
27425: LD_INT 0
27427: PUSH
27428: LD_INT 0
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: PUSH
27435: LD_INT 0
27437: PUSH
27438: LD_INT 1
27440: NEG
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: PUSH
27446: LD_INT 1
27448: PUSH
27449: LD_INT 0
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: PUSH
27456: LD_INT 1
27458: PUSH
27459: LD_INT 1
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PUSH
27466: LD_INT 0
27468: PUSH
27469: LD_INT 1
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: PUSH
27476: LD_INT 1
27478: NEG
27479: PUSH
27480: LD_INT 0
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PUSH
27487: LD_INT 1
27489: NEG
27490: PUSH
27491: LD_INT 1
27493: NEG
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: LD_INT 1
27501: NEG
27502: PUSH
27503: LD_INT 2
27505: NEG
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: LD_INT 1
27513: NEG
27514: PUSH
27515: LD_INT 1
27517: PUSH
27518: EMPTY
27519: LIST
27520: LIST
27521: PUSH
27522: LD_INT 2
27524: NEG
27525: PUSH
27526: LD_INT 0
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: PUSH
27533: LD_INT 2
27535: NEG
27536: PUSH
27537: LD_INT 1
27539: NEG
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: LD_INT 2
27547: NEG
27548: PUSH
27549: LD_INT 2
27551: NEG
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: LIST
27563: LIST
27564: LIST
27565: LIST
27566: LIST
27567: LIST
27568: LIST
27569: LIST
27570: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27571: LD_ADDR_VAR 0 53
27575: PUSH
27576: LD_INT 0
27578: PUSH
27579: LD_INT 0
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: PUSH
27586: LD_INT 0
27588: PUSH
27589: LD_INT 1
27591: NEG
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: PUSH
27597: LD_INT 1
27599: PUSH
27600: LD_INT 0
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: LD_INT 1
27609: PUSH
27610: LD_INT 1
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: PUSH
27617: LD_INT 0
27619: PUSH
27620: LD_INT 1
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: PUSH
27627: LD_INT 1
27629: NEG
27630: PUSH
27631: LD_INT 0
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PUSH
27638: LD_INT 1
27640: NEG
27641: PUSH
27642: LD_INT 1
27644: NEG
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: LD_INT 1
27652: NEG
27653: PUSH
27654: LD_INT 2
27656: NEG
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PUSH
27662: LD_INT 0
27664: PUSH
27665: LD_INT 2
27667: NEG
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: PUSH
27673: LD_INT 1
27675: PUSH
27676: LD_INT 1
27678: NEG
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: PUSH
27684: LD_INT 2
27686: PUSH
27687: LD_INT 0
27689: PUSH
27690: EMPTY
27691: LIST
27692: LIST
27693: PUSH
27694: LD_INT 2
27696: PUSH
27697: LD_INT 1
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: PUSH
27704: LD_INT 2
27706: PUSH
27707: LD_INT 2
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: PUSH
27714: LD_INT 1
27716: PUSH
27717: LD_INT 2
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: PUSH
27724: LD_INT 0
27726: PUSH
27727: LD_INT 2
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: PUSH
27734: LD_INT 1
27736: NEG
27737: PUSH
27738: LD_INT 1
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: PUSH
27745: LD_INT 2
27747: NEG
27748: PUSH
27749: LD_INT 0
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: PUSH
27756: LD_INT 2
27758: NEG
27759: PUSH
27760: LD_INT 1
27762: NEG
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PUSH
27768: LD_INT 2
27770: NEG
27771: PUSH
27772: LD_INT 2
27774: NEG
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: LIST
27792: LIST
27793: LIST
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27801: LD_ADDR_VAR 0 54
27805: PUSH
27806: LD_INT 0
27808: PUSH
27809: LD_INT 0
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: PUSH
27816: LD_INT 0
27818: PUSH
27819: LD_INT 1
27821: NEG
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 1
27829: PUSH
27830: LD_INT 0
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: PUSH
27837: LD_INT 1
27839: PUSH
27840: LD_INT 1
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: PUSH
27847: LD_INT 0
27849: PUSH
27850: LD_INT 1
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: PUSH
27857: LD_INT 1
27859: NEG
27860: PUSH
27861: LD_INT 0
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: PUSH
27868: LD_INT 1
27870: NEG
27871: PUSH
27872: LD_INT 1
27874: NEG
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 1
27882: NEG
27883: PUSH
27884: LD_INT 2
27886: NEG
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PUSH
27892: LD_INT 0
27894: PUSH
27895: LD_INT 2
27897: NEG
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PUSH
27903: LD_INT 1
27905: PUSH
27906: LD_INT 1
27908: NEG
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: PUSH
27914: LD_INT 2
27916: PUSH
27917: LD_INT 0
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: PUSH
27924: LD_INT 2
27926: PUSH
27927: LD_INT 1
27929: PUSH
27930: EMPTY
27931: LIST
27932: LIST
27933: PUSH
27934: LD_INT 2
27936: PUSH
27937: LD_INT 2
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: PUSH
27944: LD_INT 1
27946: PUSH
27947: LD_INT 2
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: PUSH
27954: LD_INT 0
27956: PUSH
27957: LD_INT 2
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: LD_INT 1
27966: NEG
27967: PUSH
27968: LD_INT 1
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: PUSH
27975: LD_INT 2
27977: NEG
27978: PUSH
27979: LD_INT 0
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: PUSH
27986: LD_INT 2
27988: NEG
27989: PUSH
27990: LD_INT 1
27992: NEG
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: PUSH
27998: LD_INT 2
28000: NEG
28001: PUSH
28002: LD_INT 2
28004: NEG
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: PUSH
28010: EMPTY
28011: LIST
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: LIST
28023: LIST
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28031: LD_ADDR_VAR 0 55
28035: PUSH
28036: LD_INT 0
28038: PUSH
28039: LD_INT 0
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PUSH
28046: LD_INT 0
28048: PUSH
28049: LD_INT 1
28051: NEG
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PUSH
28057: LD_INT 1
28059: PUSH
28060: LD_INT 0
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: LD_INT 1
28069: PUSH
28070: LD_INT 1
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: LD_INT 0
28079: PUSH
28080: LD_INT 1
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: PUSH
28087: LD_INT 1
28089: NEG
28090: PUSH
28091: LD_INT 0
28093: PUSH
28094: EMPTY
28095: LIST
28096: LIST
28097: PUSH
28098: LD_INT 1
28100: NEG
28101: PUSH
28102: LD_INT 1
28104: NEG
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PUSH
28110: LD_INT 1
28112: NEG
28113: PUSH
28114: LD_INT 2
28116: NEG
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: PUSH
28122: LD_INT 0
28124: PUSH
28125: LD_INT 2
28127: NEG
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PUSH
28133: LD_INT 1
28135: PUSH
28136: LD_INT 1
28138: NEG
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: PUSH
28144: LD_INT 2
28146: PUSH
28147: LD_INT 0
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: PUSH
28154: LD_INT 2
28156: PUSH
28157: LD_INT 1
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PUSH
28164: LD_INT 2
28166: PUSH
28167: LD_INT 2
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: PUSH
28174: LD_INT 1
28176: PUSH
28177: LD_INT 2
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: LD_INT 0
28186: PUSH
28187: LD_INT 2
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: PUSH
28194: LD_INT 1
28196: NEG
28197: PUSH
28198: LD_INT 1
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PUSH
28205: LD_INT 2
28207: NEG
28208: PUSH
28209: LD_INT 0
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: LD_INT 2
28218: NEG
28219: PUSH
28220: LD_INT 1
28222: NEG
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: PUSH
28228: LD_INT 2
28230: NEG
28231: PUSH
28232: LD_INT 2
28234: NEG
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: LIST
28244: LIST
28245: LIST
28246: LIST
28247: LIST
28248: LIST
28249: LIST
28250: LIST
28251: LIST
28252: LIST
28253: LIST
28254: LIST
28255: LIST
28256: LIST
28257: LIST
28258: LIST
28259: LIST
28260: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28261: LD_ADDR_VAR 0 56
28265: PUSH
28266: LD_INT 0
28268: PUSH
28269: LD_INT 0
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: LD_INT 0
28278: PUSH
28279: LD_INT 1
28281: NEG
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PUSH
28287: LD_INT 1
28289: PUSH
28290: LD_INT 0
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: LD_INT 1
28299: PUSH
28300: LD_INT 1
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PUSH
28307: LD_INT 0
28309: PUSH
28310: LD_INT 1
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: LD_INT 1
28319: NEG
28320: PUSH
28321: LD_INT 0
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 1
28330: NEG
28331: PUSH
28332: LD_INT 1
28334: NEG
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: PUSH
28340: LD_INT 1
28342: NEG
28343: PUSH
28344: LD_INT 2
28346: NEG
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: PUSH
28352: LD_INT 0
28354: PUSH
28355: LD_INT 2
28357: NEG
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: PUSH
28363: LD_INT 1
28365: PUSH
28366: LD_INT 1
28368: NEG
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: PUSH
28374: LD_INT 2
28376: PUSH
28377: LD_INT 0
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: LD_INT 2
28386: PUSH
28387: LD_INT 1
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PUSH
28394: LD_INT 2
28396: PUSH
28397: LD_INT 2
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: PUSH
28404: LD_INT 1
28406: PUSH
28407: LD_INT 2
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: PUSH
28414: LD_INT 0
28416: PUSH
28417: LD_INT 2
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: LD_INT 1
28426: NEG
28427: PUSH
28428: LD_INT 1
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: PUSH
28435: LD_INT 2
28437: NEG
28438: PUSH
28439: LD_INT 0
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: PUSH
28446: LD_INT 2
28448: NEG
28449: PUSH
28450: LD_INT 1
28452: NEG
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: LD_INT 2
28460: NEG
28461: PUSH
28462: LD_INT 2
28464: NEG
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: LIST
28474: LIST
28475: LIST
28476: LIST
28477: LIST
28478: LIST
28479: LIST
28480: LIST
28481: LIST
28482: LIST
28483: LIST
28484: LIST
28485: LIST
28486: LIST
28487: LIST
28488: LIST
28489: LIST
28490: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28491: LD_ADDR_VAR 0 57
28495: PUSH
28496: LD_INT 0
28498: PUSH
28499: LD_INT 0
28501: PUSH
28502: EMPTY
28503: LIST
28504: LIST
28505: PUSH
28506: LD_INT 0
28508: PUSH
28509: LD_INT 1
28511: NEG
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: PUSH
28517: LD_INT 1
28519: PUSH
28520: LD_INT 0
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: PUSH
28527: LD_INT 1
28529: PUSH
28530: LD_INT 1
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: PUSH
28537: LD_INT 0
28539: PUSH
28540: LD_INT 1
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: PUSH
28547: LD_INT 1
28549: NEG
28550: PUSH
28551: LD_INT 0
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: PUSH
28558: LD_INT 1
28560: NEG
28561: PUSH
28562: LD_INT 1
28564: NEG
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: PUSH
28570: LD_INT 1
28572: NEG
28573: PUSH
28574: LD_INT 2
28576: NEG
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: LD_INT 0
28584: PUSH
28585: LD_INT 2
28587: NEG
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: LD_INT 1
28595: PUSH
28596: LD_INT 1
28598: NEG
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: PUSH
28604: LD_INT 2
28606: PUSH
28607: LD_INT 0
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: PUSH
28614: LD_INT 2
28616: PUSH
28617: LD_INT 1
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PUSH
28624: LD_INT 2
28626: PUSH
28627: LD_INT 2
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PUSH
28634: LD_INT 1
28636: PUSH
28637: LD_INT 2
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: PUSH
28644: LD_INT 0
28646: PUSH
28647: LD_INT 2
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: PUSH
28654: LD_INT 1
28656: NEG
28657: PUSH
28658: LD_INT 1
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: LD_INT 2
28667: NEG
28668: PUSH
28669: LD_INT 0
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: PUSH
28676: LD_INT 2
28678: NEG
28679: PUSH
28680: LD_INT 1
28682: NEG
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: PUSH
28688: LD_INT 2
28690: NEG
28691: PUSH
28692: LD_INT 2
28694: NEG
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: LIST
28704: LIST
28705: LIST
28706: LIST
28707: LIST
28708: LIST
28709: LIST
28710: LIST
28711: LIST
28712: LIST
28713: LIST
28714: LIST
28715: LIST
28716: LIST
28717: LIST
28718: LIST
28719: LIST
28720: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28721: LD_ADDR_VAR 0 58
28725: PUSH
28726: LD_INT 0
28728: PUSH
28729: LD_INT 0
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: PUSH
28736: LD_INT 0
28738: PUSH
28739: LD_INT 1
28741: NEG
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: PUSH
28747: LD_INT 1
28749: PUSH
28750: LD_INT 0
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PUSH
28757: LD_INT 1
28759: PUSH
28760: LD_INT 1
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: PUSH
28767: LD_INT 0
28769: PUSH
28770: LD_INT 1
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: PUSH
28777: LD_INT 1
28779: NEG
28780: PUSH
28781: LD_INT 0
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PUSH
28788: LD_INT 1
28790: NEG
28791: PUSH
28792: LD_INT 1
28794: NEG
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: PUSH
28800: LD_INT 1
28802: NEG
28803: PUSH
28804: LD_INT 2
28806: NEG
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: PUSH
28812: LD_INT 0
28814: PUSH
28815: LD_INT 2
28817: NEG
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: LD_INT 1
28825: PUSH
28826: LD_INT 1
28828: NEG
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: LD_INT 2
28836: PUSH
28837: LD_INT 0
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: PUSH
28844: LD_INT 2
28846: PUSH
28847: LD_INT 1
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PUSH
28854: LD_INT 2
28856: PUSH
28857: LD_INT 2
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: PUSH
28864: LD_INT 1
28866: PUSH
28867: LD_INT 2
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: PUSH
28874: LD_INT 0
28876: PUSH
28877: LD_INT 2
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PUSH
28884: LD_INT 1
28886: NEG
28887: PUSH
28888: LD_INT 1
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: PUSH
28895: LD_INT 2
28897: NEG
28898: PUSH
28899: LD_INT 0
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: PUSH
28906: LD_INT 2
28908: NEG
28909: PUSH
28910: LD_INT 1
28912: NEG
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: LD_INT 2
28920: NEG
28921: PUSH
28922: LD_INT 2
28924: NEG
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: LIST
28934: LIST
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: LIST
28950: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28951: LD_ADDR_VAR 0 59
28955: PUSH
28956: LD_INT 0
28958: PUSH
28959: LD_INT 0
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: PUSH
28966: LD_INT 0
28968: PUSH
28969: LD_INT 1
28971: NEG
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 1
28979: PUSH
28980: LD_INT 0
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: LD_INT 1
28989: PUSH
28990: LD_INT 1
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: LD_INT 0
28999: PUSH
29000: LD_INT 1
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PUSH
29007: LD_INT 1
29009: NEG
29010: PUSH
29011: LD_INT 0
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: PUSH
29018: LD_INT 1
29020: NEG
29021: PUSH
29022: LD_INT 1
29024: NEG
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: LIST
29034: LIST
29035: LIST
29036: LIST
29037: LIST
29038: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29039: LD_ADDR_VAR 0 60
29043: PUSH
29044: LD_INT 0
29046: PUSH
29047: LD_INT 0
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: LD_INT 0
29056: PUSH
29057: LD_INT 1
29059: NEG
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PUSH
29065: LD_INT 1
29067: PUSH
29068: LD_INT 0
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: PUSH
29075: LD_INT 1
29077: PUSH
29078: LD_INT 1
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PUSH
29085: LD_INT 0
29087: PUSH
29088: LD_INT 1
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: PUSH
29095: LD_INT 1
29097: NEG
29098: PUSH
29099: LD_INT 0
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: PUSH
29106: LD_INT 1
29108: NEG
29109: PUSH
29110: LD_INT 1
29112: NEG
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: LIST
29126: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29127: LD_ADDR_VAR 0 61
29131: PUSH
29132: LD_INT 0
29134: PUSH
29135: LD_INT 0
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PUSH
29142: LD_INT 0
29144: PUSH
29145: LD_INT 1
29147: NEG
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: LD_INT 1
29155: PUSH
29156: LD_INT 0
29158: PUSH
29159: EMPTY
29160: LIST
29161: LIST
29162: PUSH
29163: LD_INT 1
29165: PUSH
29166: LD_INT 1
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: LD_INT 0
29175: PUSH
29176: LD_INT 1
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: LD_INT 1
29185: NEG
29186: PUSH
29187: LD_INT 0
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: LD_INT 1
29196: NEG
29197: PUSH
29198: LD_INT 1
29200: NEG
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29215: LD_ADDR_VAR 0 62
29219: PUSH
29220: LD_INT 0
29222: PUSH
29223: LD_INT 0
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PUSH
29230: LD_INT 0
29232: PUSH
29233: LD_INT 1
29235: NEG
29236: PUSH
29237: EMPTY
29238: LIST
29239: LIST
29240: PUSH
29241: LD_INT 1
29243: PUSH
29244: LD_INT 0
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: PUSH
29251: LD_INT 1
29253: PUSH
29254: LD_INT 1
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: PUSH
29261: LD_INT 0
29263: PUSH
29264: LD_INT 1
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: PUSH
29271: LD_INT 1
29273: NEG
29274: PUSH
29275: LD_INT 0
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: PUSH
29282: LD_INT 1
29284: NEG
29285: PUSH
29286: LD_INT 1
29288: NEG
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: LIST
29298: LIST
29299: LIST
29300: LIST
29301: LIST
29302: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29303: LD_ADDR_VAR 0 63
29307: PUSH
29308: LD_INT 0
29310: PUSH
29311: LD_INT 0
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: LD_INT 0
29320: PUSH
29321: LD_INT 1
29323: NEG
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: LD_INT 1
29331: PUSH
29332: LD_INT 0
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: LD_INT 1
29341: PUSH
29342: LD_INT 1
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: LD_INT 0
29351: PUSH
29352: LD_INT 1
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: PUSH
29359: LD_INT 1
29361: NEG
29362: PUSH
29363: LD_INT 0
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: LD_INT 1
29372: NEG
29373: PUSH
29374: LD_INT 1
29376: NEG
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29391: LD_ADDR_VAR 0 64
29395: PUSH
29396: LD_INT 0
29398: PUSH
29399: LD_INT 0
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: LD_INT 0
29408: PUSH
29409: LD_INT 1
29411: NEG
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PUSH
29417: LD_INT 1
29419: PUSH
29420: LD_INT 0
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: PUSH
29427: LD_INT 1
29429: PUSH
29430: LD_INT 1
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PUSH
29437: LD_INT 0
29439: PUSH
29440: LD_INT 1
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 1
29449: NEG
29450: PUSH
29451: LD_INT 0
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: LD_INT 1
29460: NEG
29461: PUSH
29462: LD_INT 1
29464: NEG
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: LIST
29474: LIST
29475: LIST
29476: LIST
29477: LIST
29478: ST_TO_ADDR
// end ; 1 :
29479: GO 35376
29481: LD_INT 1
29483: DOUBLE
29484: EQUAL
29485: IFTRUE 29489
29487: GO 32112
29489: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29490: LD_ADDR_VAR 0 11
29494: PUSH
29495: LD_INT 1
29497: NEG
29498: PUSH
29499: LD_INT 3
29501: NEG
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: LD_INT 0
29509: PUSH
29510: LD_INT 3
29512: NEG
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: PUSH
29518: LD_INT 1
29520: PUSH
29521: LD_INT 2
29523: NEG
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: LIST
29533: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29534: LD_ADDR_VAR 0 12
29538: PUSH
29539: LD_INT 2
29541: PUSH
29542: LD_INT 1
29544: NEG
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PUSH
29550: LD_INT 3
29552: PUSH
29553: LD_INT 0
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: LD_INT 3
29562: PUSH
29563: LD_INT 1
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: LIST
29574: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29575: LD_ADDR_VAR 0 13
29579: PUSH
29580: LD_INT 3
29582: PUSH
29583: LD_INT 2
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PUSH
29590: LD_INT 3
29592: PUSH
29593: LD_INT 3
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PUSH
29600: LD_INT 2
29602: PUSH
29603: LD_INT 3
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: LIST
29614: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29615: LD_ADDR_VAR 0 14
29619: PUSH
29620: LD_INT 1
29622: PUSH
29623: LD_INT 3
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: PUSH
29630: LD_INT 0
29632: PUSH
29633: LD_INT 3
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: LD_INT 1
29642: NEG
29643: PUSH
29644: LD_INT 2
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: EMPTY
29652: LIST
29653: LIST
29654: LIST
29655: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29656: LD_ADDR_VAR 0 15
29660: PUSH
29661: LD_INT 2
29663: NEG
29664: PUSH
29665: LD_INT 1
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: PUSH
29672: LD_INT 3
29674: NEG
29675: PUSH
29676: LD_INT 0
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: PUSH
29683: LD_INT 3
29685: NEG
29686: PUSH
29687: LD_INT 1
29689: NEG
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: LIST
29699: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29700: LD_ADDR_VAR 0 16
29704: PUSH
29705: LD_INT 2
29707: NEG
29708: PUSH
29709: LD_INT 3
29711: NEG
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: LD_INT 3
29719: NEG
29720: PUSH
29721: LD_INT 2
29723: NEG
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 3
29731: NEG
29732: PUSH
29733: LD_INT 3
29735: NEG
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: LIST
29745: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29746: LD_ADDR_VAR 0 17
29750: PUSH
29751: LD_INT 1
29753: NEG
29754: PUSH
29755: LD_INT 3
29757: NEG
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 0
29765: PUSH
29766: LD_INT 3
29768: NEG
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PUSH
29774: LD_INT 1
29776: PUSH
29777: LD_INT 2
29779: NEG
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: LIST
29789: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29790: LD_ADDR_VAR 0 18
29794: PUSH
29795: LD_INT 2
29797: PUSH
29798: LD_INT 1
29800: NEG
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: LD_INT 3
29808: PUSH
29809: LD_INT 0
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: LD_INT 3
29818: PUSH
29819: LD_INT 1
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: LIST
29830: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29831: LD_ADDR_VAR 0 19
29835: PUSH
29836: LD_INT 3
29838: PUSH
29839: LD_INT 2
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: PUSH
29846: LD_INT 3
29848: PUSH
29849: LD_INT 3
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: PUSH
29856: LD_INT 2
29858: PUSH
29859: LD_INT 3
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: LIST
29870: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29871: LD_ADDR_VAR 0 20
29875: PUSH
29876: LD_INT 1
29878: PUSH
29879: LD_INT 3
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: PUSH
29886: LD_INT 0
29888: PUSH
29889: LD_INT 3
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 1
29898: NEG
29899: PUSH
29900: LD_INT 2
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: LIST
29911: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29912: LD_ADDR_VAR 0 21
29916: PUSH
29917: LD_INT 2
29919: NEG
29920: PUSH
29921: LD_INT 1
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: PUSH
29928: LD_INT 3
29930: NEG
29931: PUSH
29932: LD_INT 0
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: LD_INT 3
29941: NEG
29942: PUSH
29943: LD_INT 1
29945: NEG
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: LIST
29955: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29956: LD_ADDR_VAR 0 22
29960: PUSH
29961: LD_INT 2
29963: NEG
29964: PUSH
29965: LD_INT 3
29967: NEG
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: PUSH
29973: LD_INT 3
29975: NEG
29976: PUSH
29977: LD_INT 2
29979: NEG
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: LD_INT 3
29987: NEG
29988: PUSH
29989: LD_INT 3
29991: NEG
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: LIST
30001: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
30002: LD_ADDR_VAR 0 23
30006: PUSH
30007: LD_INT 0
30009: PUSH
30010: LD_INT 3
30012: NEG
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: PUSH
30018: LD_INT 1
30020: NEG
30021: PUSH
30022: LD_INT 4
30024: NEG
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: LD_INT 1
30032: PUSH
30033: LD_INT 3
30035: NEG
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: LIST
30045: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30046: LD_ADDR_VAR 0 24
30050: PUSH
30051: LD_INT 3
30053: PUSH
30054: LD_INT 0
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: PUSH
30061: LD_INT 3
30063: PUSH
30064: LD_INT 1
30066: NEG
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: PUSH
30072: LD_INT 4
30074: PUSH
30075: LD_INT 1
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: LIST
30086: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30087: LD_ADDR_VAR 0 25
30091: PUSH
30092: LD_INT 3
30094: PUSH
30095: LD_INT 3
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PUSH
30102: LD_INT 4
30104: PUSH
30105: LD_INT 3
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PUSH
30112: LD_INT 3
30114: PUSH
30115: LD_INT 4
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: LIST
30126: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30127: LD_ADDR_VAR 0 26
30131: PUSH
30132: LD_INT 0
30134: PUSH
30135: LD_INT 3
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: PUSH
30142: LD_INT 1
30144: PUSH
30145: LD_INT 4
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PUSH
30152: LD_INT 1
30154: NEG
30155: PUSH
30156: LD_INT 3
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: LIST
30167: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30168: LD_ADDR_VAR 0 27
30172: PUSH
30173: LD_INT 3
30175: NEG
30176: PUSH
30177: LD_INT 0
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: LD_INT 3
30186: NEG
30187: PUSH
30188: LD_INT 1
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: PUSH
30195: LD_INT 4
30197: NEG
30198: PUSH
30199: LD_INT 1
30201: NEG
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: LIST
30211: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30212: LD_ADDR_VAR 0 28
30216: PUSH
30217: LD_INT 3
30219: NEG
30220: PUSH
30221: LD_INT 3
30223: NEG
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 3
30231: NEG
30232: PUSH
30233: LD_INT 4
30235: NEG
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: LD_INT 4
30243: NEG
30244: PUSH
30245: LD_INT 3
30247: NEG
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: LIST
30257: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30258: LD_ADDR_VAR 0 29
30262: PUSH
30263: LD_INT 1
30265: NEG
30266: PUSH
30267: LD_INT 3
30269: NEG
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PUSH
30275: LD_INT 0
30277: PUSH
30278: LD_INT 3
30280: NEG
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: PUSH
30286: LD_INT 1
30288: PUSH
30289: LD_INT 2
30291: NEG
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: LD_INT 1
30299: NEG
30300: PUSH
30301: LD_INT 4
30303: NEG
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 0
30311: PUSH
30312: LD_INT 4
30314: NEG
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 1
30322: PUSH
30323: LD_INT 3
30325: NEG
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: LD_INT 1
30333: NEG
30334: PUSH
30335: LD_INT 5
30337: NEG
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: PUSH
30343: LD_INT 0
30345: PUSH
30346: LD_INT 5
30348: NEG
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: PUSH
30354: LD_INT 1
30356: PUSH
30357: LD_INT 4
30359: NEG
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 1
30367: NEG
30368: PUSH
30369: LD_INT 6
30371: NEG
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: LD_INT 0
30379: PUSH
30380: LD_INT 6
30382: NEG
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PUSH
30388: LD_INT 1
30390: PUSH
30391: LD_INT 5
30393: NEG
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: LIST
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30413: LD_ADDR_VAR 0 30
30417: PUSH
30418: LD_INT 2
30420: PUSH
30421: LD_INT 1
30423: NEG
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: LD_INT 3
30431: PUSH
30432: LD_INT 0
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: PUSH
30439: LD_INT 3
30441: PUSH
30442: LD_INT 1
30444: PUSH
30445: EMPTY
30446: LIST
30447: LIST
30448: PUSH
30449: LD_INT 3
30451: PUSH
30452: LD_INT 1
30454: NEG
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: PUSH
30460: LD_INT 4
30462: PUSH
30463: LD_INT 0
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: PUSH
30470: LD_INT 4
30472: PUSH
30473: LD_INT 1
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 4
30482: PUSH
30483: LD_INT 1
30485: NEG
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: PUSH
30491: LD_INT 5
30493: PUSH
30494: LD_INT 0
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: LD_INT 5
30503: PUSH
30504: LD_INT 1
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 5
30513: PUSH
30514: LD_INT 1
30516: NEG
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: PUSH
30522: LD_INT 6
30524: PUSH
30525: LD_INT 0
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: LD_INT 6
30534: PUSH
30535: LD_INT 1
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30556: LD_ADDR_VAR 0 31
30560: PUSH
30561: LD_INT 3
30563: PUSH
30564: LD_INT 2
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PUSH
30571: LD_INT 3
30573: PUSH
30574: LD_INT 3
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: LD_INT 2
30583: PUSH
30584: LD_INT 3
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: PUSH
30591: LD_INT 4
30593: PUSH
30594: LD_INT 3
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: LD_INT 4
30603: PUSH
30604: LD_INT 4
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: PUSH
30611: LD_INT 3
30613: PUSH
30614: LD_INT 4
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: PUSH
30621: LD_INT 5
30623: PUSH
30624: LD_INT 4
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: PUSH
30631: LD_INT 5
30633: PUSH
30634: LD_INT 5
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: LD_INT 4
30643: PUSH
30644: LD_INT 5
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: LD_INT 6
30653: PUSH
30654: LD_INT 5
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 6
30663: PUSH
30664: LD_INT 6
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 5
30673: PUSH
30674: LD_INT 6
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30695: LD_ADDR_VAR 0 32
30699: PUSH
30700: LD_INT 1
30702: PUSH
30703: LD_INT 3
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PUSH
30710: LD_INT 0
30712: PUSH
30713: LD_INT 3
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: LD_INT 1
30722: NEG
30723: PUSH
30724: LD_INT 2
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: LD_INT 1
30733: PUSH
30734: LD_INT 4
30736: PUSH
30737: EMPTY
30738: LIST
30739: LIST
30740: PUSH
30741: LD_INT 0
30743: PUSH
30744: LD_INT 4
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: PUSH
30751: LD_INT 1
30753: NEG
30754: PUSH
30755: LD_INT 3
30757: PUSH
30758: EMPTY
30759: LIST
30760: LIST
30761: PUSH
30762: LD_INT 1
30764: PUSH
30765: LD_INT 5
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: PUSH
30772: LD_INT 0
30774: PUSH
30775: LD_INT 5
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PUSH
30782: LD_INT 1
30784: NEG
30785: PUSH
30786: LD_INT 4
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 1
30795: PUSH
30796: LD_INT 6
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: PUSH
30803: LD_INT 0
30805: PUSH
30806: LD_INT 6
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: LD_INT 1
30815: NEG
30816: PUSH
30817: LD_INT 5
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PUSH
30824: EMPTY
30825: LIST
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30838: LD_ADDR_VAR 0 33
30842: PUSH
30843: LD_INT 2
30845: NEG
30846: PUSH
30847: LD_INT 1
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: LD_INT 3
30856: NEG
30857: PUSH
30858: LD_INT 0
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 3
30867: NEG
30868: PUSH
30869: LD_INT 1
30871: NEG
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 3
30879: NEG
30880: PUSH
30881: LD_INT 1
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 4
30890: NEG
30891: PUSH
30892: LD_INT 0
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: LD_INT 4
30901: NEG
30902: PUSH
30903: LD_INT 1
30905: NEG
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: PUSH
30911: LD_INT 4
30913: NEG
30914: PUSH
30915: LD_INT 1
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: LD_INT 5
30924: NEG
30925: PUSH
30926: LD_INT 0
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: LD_INT 5
30935: NEG
30936: PUSH
30937: LD_INT 1
30939: NEG
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: LD_INT 5
30947: NEG
30948: PUSH
30949: LD_INT 1
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: PUSH
30956: LD_INT 6
30958: NEG
30959: PUSH
30960: LD_INT 0
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 6
30969: NEG
30970: PUSH
30971: LD_INT 1
30973: NEG
30974: PUSH
30975: EMPTY
30976: LIST
30977: LIST
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30993: LD_ADDR_VAR 0 34
30997: PUSH
30998: LD_INT 2
31000: NEG
31001: PUSH
31002: LD_INT 3
31004: NEG
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: LD_INT 3
31012: NEG
31013: PUSH
31014: LD_INT 2
31016: NEG
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: LD_INT 3
31024: NEG
31025: PUSH
31026: LD_INT 3
31028: NEG
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PUSH
31034: LD_INT 3
31036: NEG
31037: PUSH
31038: LD_INT 4
31040: NEG
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: LD_INT 4
31048: NEG
31049: PUSH
31050: LD_INT 3
31052: NEG
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: LD_INT 4
31060: NEG
31061: PUSH
31062: LD_INT 4
31064: NEG
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: PUSH
31070: LD_INT 4
31072: NEG
31073: PUSH
31074: LD_INT 5
31076: NEG
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: LD_INT 5
31084: NEG
31085: PUSH
31086: LD_INT 4
31088: NEG
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PUSH
31094: LD_INT 5
31096: NEG
31097: PUSH
31098: LD_INT 5
31100: NEG
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 5
31108: NEG
31109: PUSH
31110: LD_INT 6
31112: NEG
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 6
31120: NEG
31121: PUSH
31122: LD_INT 5
31124: NEG
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 6
31132: NEG
31133: PUSH
31134: LD_INT 6
31136: NEG
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: LIST
31146: LIST
31147: LIST
31148: LIST
31149: LIST
31150: LIST
31151: LIST
31152: LIST
31153: LIST
31154: LIST
31155: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31156: LD_ADDR_VAR 0 41
31160: PUSH
31161: LD_INT 0
31163: PUSH
31164: LD_INT 2
31166: NEG
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PUSH
31172: LD_INT 1
31174: NEG
31175: PUSH
31176: LD_INT 3
31178: NEG
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: LD_INT 1
31186: PUSH
31187: LD_INT 2
31189: NEG
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: LIST
31199: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31200: LD_ADDR_VAR 0 42
31204: PUSH
31205: LD_INT 2
31207: PUSH
31208: LD_INT 0
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 2
31217: PUSH
31218: LD_INT 1
31220: NEG
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: LD_INT 3
31228: PUSH
31229: LD_INT 1
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: LIST
31240: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31241: LD_ADDR_VAR 0 43
31245: PUSH
31246: LD_INT 2
31248: PUSH
31249: LD_INT 2
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: PUSH
31256: LD_INT 3
31258: PUSH
31259: LD_INT 2
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: PUSH
31266: LD_INT 2
31268: PUSH
31269: LD_INT 3
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: LIST
31280: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31281: LD_ADDR_VAR 0 44
31285: PUSH
31286: LD_INT 0
31288: PUSH
31289: LD_INT 2
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: LD_INT 1
31298: PUSH
31299: LD_INT 3
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: LD_INT 1
31308: NEG
31309: PUSH
31310: LD_INT 2
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: LIST
31321: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31322: LD_ADDR_VAR 0 45
31326: PUSH
31327: LD_INT 2
31329: NEG
31330: PUSH
31331: LD_INT 0
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: LD_INT 2
31340: NEG
31341: PUSH
31342: LD_INT 1
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: LD_INT 3
31351: NEG
31352: PUSH
31353: LD_INT 1
31355: NEG
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: LIST
31365: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31366: LD_ADDR_VAR 0 46
31370: PUSH
31371: LD_INT 2
31373: NEG
31374: PUSH
31375: LD_INT 2
31377: NEG
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PUSH
31383: LD_INT 2
31385: NEG
31386: PUSH
31387: LD_INT 3
31389: NEG
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 3
31397: NEG
31398: PUSH
31399: LD_INT 2
31401: NEG
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: LIST
31411: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31412: LD_ADDR_VAR 0 47
31416: PUSH
31417: LD_INT 2
31419: NEG
31420: PUSH
31421: LD_INT 3
31423: NEG
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 1
31431: NEG
31432: PUSH
31433: LD_INT 3
31435: NEG
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31445: LD_ADDR_VAR 0 48
31449: PUSH
31450: LD_INT 1
31452: PUSH
31453: LD_INT 2
31455: NEG
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: LD_INT 2
31463: PUSH
31464: LD_INT 1
31466: NEG
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31476: LD_ADDR_VAR 0 49
31480: PUSH
31481: LD_INT 3
31483: PUSH
31484: LD_INT 1
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PUSH
31491: LD_INT 3
31493: PUSH
31494: LD_INT 2
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31505: LD_ADDR_VAR 0 50
31509: PUSH
31510: LD_INT 2
31512: PUSH
31513: LD_INT 3
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 1
31522: PUSH
31523: LD_INT 3
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31534: LD_ADDR_VAR 0 51
31538: PUSH
31539: LD_INT 1
31541: NEG
31542: PUSH
31543: LD_INT 2
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: PUSH
31550: LD_INT 2
31552: NEG
31553: PUSH
31554: LD_INT 1
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31565: LD_ADDR_VAR 0 52
31569: PUSH
31570: LD_INT 3
31572: NEG
31573: PUSH
31574: LD_INT 1
31576: NEG
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: PUSH
31582: LD_INT 3
31584: NEG
31585: PUSH
31586: LD_INT 2
31588: NEG
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31598: LD_ADDR_VAR 0 53
31602: PUSH
31603: LD_INT 1
31605: NEG
31606: PUSH
31607: LD_INT 3
31609: NEG
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: PUSH
31615: LD_INT 0
31617: PUSH
31618: LD_INT 3
31620: NEG
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: PUSH
31626: LD_INT 1
31628: PUSH
31629: LD_INT 2
31631: NEG
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: LIST
31641: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31642: LD_ADDR_VAR 0 54
31646: PUSH
31647: LD_INT 2
31649: PUSH
31650: LD_INT 1
31652: NEG
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: LD_INT 3
31660: PUSH
31661: LD_INT 0
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PUSH
31668: LD_INT 3
31670: PUSH
31671: LD_INT 1
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: LIST
31682: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31683: LD_ADDR_VAR 0 55
31687: PUSH
31688: LD_INT 3
31690: PUSH
31691: LD_INT 2
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 3
31700: PUSH
31701: LD_INT 3
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 2
31710: PUSH
31711: LD_INT 3
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: LIST
31722: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31723: LD_ADDR_VAR 0 56
31727: PUSH
31728: LD_INT 1
31730: PUSH
31731: LD_INT 3
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: PUSH
31738: LD_INT 0
31740: PUSH
31741: LD_INT 3
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: LD_INT 1
31750: NEG
31751: PUSH
31752: LD_INT 2
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: LIST
31763: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31764: LD_ADDR_VAR 0 57
31768: PUSH
31769: LD_INT 2
31771: NEG
31772: PUSH
31773: LD_INT 1
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 3
31782: NEG
31783: PUSH
31784: LD_INT 0
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: LD_INT 3
31793: NEG
31794: PUSH
31795: LD_INT 1
31797: NEG
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: LIST
31807: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31808: LD_ADDR_VAR 0 58
31812: PUSH
31813: LD_INT 2
31815: NEG
31816: PUSH
31817: LD_INT 3
31819: NEG
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PUSH
31825: LD_INT 3
31827: NEG
31828: PUSH
31829: LD_INT 2
31831: NEG
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 3
31839: NEG
31840: PUSH
31841: LD_INT 3
31843: NEG
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: LIST
31853: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31854: LD_ADDR_VAR 0 59
31858: PUSH
31859: LD_INT 1
31861: NEG
31862: PUSH
31863: LD_INT 2
31865: NEG
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 0
31873: PUSH
31874: LD_INT 2
31876: NEG
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: LD_INT 1
31884: PUSH
31885: LD_INT 1
31887: NEG
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: LIST
31897: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31898: LD_ADDR_VAR 0 60
31902: PUSH
31903: LD_INT 1
31905: PUSH
31906: LD_INT 1
31908: NEG
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: PUSH
31914: LD_INT 2
31916: PUSH
31917: LD_INT 0
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 2
31926: PUSH
31927: LD_INT 1
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: LIST
31938: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31939: LD_ADDR_VAR 0 61
31943: PUSH
31944: LD_INT 2
31946: PUSH
31947: LD_INT 1
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: PUSH
31954: LD_INT 2
31956: PUSH
31957: LD_INT 2
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 1
31966: PUSH
31967: LD_INT 2
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: LIST
31978: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31979: LD_ADDR_VAR 0 62
31983: PUSH
31984: LD_INT 1
31986: PUSH
31987: LD_INT 2
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: PUSH
31994: LD_INT 0
31996: PUSH
31997: LD_INT 2
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 1
32006: NEG
32007: PUSH
32008: LD_INT 1
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: LIST
32019: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32020: LD_ADDR_VAR 0 63
32024: PUSH
32025: LD_INT 1
32027: NEG
32028: PUSH
32029: LD_INT 1
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: PUSH
32036: LD_INT 2
32038: NEG
32039: PUSH
32040: LD_INT 0
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: LD_INT 2
32049: NEG
32050: PUSH
32051: LD_INT 1
32053: NEG
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: LIST
32063: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32064: LD_ADDR_VAR 0 64
32068: PUSH
32069: LD_INT 1
32071: NEG
32072: PUSH
32073: LD_INT 2
32075: NEG
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 2
32083: NEG
32084: PUSH
32085: LD_INT 1
32087: NEG
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: PUSH
32093: LD_INT 2
32095: NEG
32096: PUSH
32097: LD_INT 2
32099: NEG
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: LIST
32109: ST_TO_ADDR
// end ; 2 :
32110: GO 35376
32112: LD_INT 2
32114: DOUBLE
32115: EQUAL
32116: IFTRUE 32120
32118: GO 35375
32120: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32121: LD_ADDR_VAR 0 29
32125: PUSH
32126: LD_INT 4
32128: PUSH
32129: LD_INT 0
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PUSH
32136: LD_INT 4
32138: PUSH
32139: LD_INT 1
32141: NEG
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: LD_INT 5
32149: PUSH
32150: LD_INT 0
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: PUSH
32157: LD_INT 5
32159: PUSH
32160: LD_INT 1
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: PUSH
32167: LD_INT 4
32169: PUSH
32170: LD_INT 1
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: LD_INT 3
32179: PUSH
32180: LD_INT 0
32182: PUSH
32183: EMPTY
32184: LIST
32185: LIST
32186: PUSH
32187: LD_INT 3
32189: PUSH
32190: LD_INT 1
32192: NEG
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 3
32200: PUSH
32201: LD_INT 2
32203: NEG
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: LD_INT 5
32211: PUSH
32212: LD_INT 2
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: LD_INT 3
32221: PUSH
32222: LD_INT 3
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PUSH
32229: LD_INT 3
32231: PUSH
32232: LD_INT 2
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 4
32241: PUSH
32242: LD_INT 3
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PUSH
32249: LD_INT 4
32251: PUSH
32252: LD_INT 4
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: LD_INT 3
32261: PUSH
32262: LD_INT 4
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PUSH
32269: LD_INT 2
32271: PUSH
32272: LD_INT 3
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 2
32281: PUSH
32282: LD_INT 2
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: PUSH
32289: LD_INT 4
32291: PUSH
32292: LD_INT 2
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PUSH
32299: LD_INT 2
32301: PUSH
32302: LD_INT 4
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: LD_INT 0
32311: PUSH
32312: LD_INT 4
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 0
32321: PUSH
32322: LD_INT 3
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: LD_INT 1
32331: PUSH
32332: LD_INT 4
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PUSH
32339: LD_INT 1
32341: PUSH
32342: LD_INT 5
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: LD_INT 0
32351: PUSH
32352: LD_INT 5
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: PUSH
32359: LD_INT 1
32361: NEG
32362: PUSH
32363: LD_INT 4
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: PUSH
32370: LD_INT 1
32372: NEG
32373: PUSH
32374: LD_INT 3
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PUSH
32381: LD_INT 2
32383: PUSH
32384: LD_INT 5
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PUSH
32391: LD_INT 2
32393: NEG
32394: PUSH
32395: LD_INT 3
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: PUSH
32402: LD_INT 3
32404: NEG
32405: PUSH
32406: LD_INT 0
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: LD_INT 3
32415: NEG
32416: PUSH
32417: LD_INT 1
32419: NEG
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: LD_INT 2
32427: NEG
32428: PUSH
32429: LD_INT 0
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 2
32438: NEG
32439: PUSH
32440: LD_INT 1
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 3
32449: NEG
32450: PUSH
32451: LD_INT 1
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 4
32460: NEG
32461: PUSH
32462: LD_INT 0
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 4
32471: NEG
32472: PUSH
32473: LD_INT 1
32475: NEG
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: PUSH
32481: LD_INT 4
32483: NEG
32484: PUSH
32485: LD_INT 2
32487: NEG
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: PUSH
32493: LD_INT 2
32495: NEG
32496: PUSH
32497: LD_INT 2
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 4
32506: NEG
32507: PUSH
32508: LD_INT 4
32510: NEG
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PUSH
32516: LD_INT 4
32518: NEG
32519: PUSH
32520: LD_INT 5
32522: NEG
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: PUSH
32528: LD_INT 3
32530: NEG
32531: PUSH
32532: LD_INT 4
32534: NEG
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PUSH
32540: LD_INT 3
32542: NEG
32543: PUSH
32544: LD_INT 3
32546: NEG
32547: PUSH
32548: EMPTY
32549: LIST
32550: LIST
32551: PUSH
32552: LD_INT 4
32554: NEG
32555: PUSH
32556: LD_INT 3
32558: NEG
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 5
32566: NEG
32567: PUSH
32568: LD_INT 4
32570: NEG
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 5
32578: NEG
32579: PUSH
32580: LD_INT 5
32582: NEG
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 3
32590: NEG
32591: PUSH
32592: LD_INT 5
32594: NEG
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: LD_INT 5
32602: NEG
32603: PUSH
32604: LD_INT 3
32606: NEG
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32659: LD_ADDR_VAR 0 30
32663: PUSH
32664: LD_INT 4
32666: PUSH
32667: LD_INT 4
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: PUSH
32674: LD_INT 4
32676: PUSH
32677: LD_INT 3
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: LD_INT 5
32686: PUSH
32687: LD_INT 4
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PUSH
32694: LD_INT 5
32696: PUSH
32697: LD_INT 5
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: PUSH
32704: LD_INT 4
32706: PUSH
32707: LD_INT 5
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: LD_INT 3
32716: PUSH
32717: LD_INT 4
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PUSH
32724: LD_INT 3
32726: PUSH
32727: LD_INT 3
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: PUSH
32734: LD_INT 5
32736: PUSH
32737: LD_INT 3
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: PUSH
32744: LD_INT 3
32746: PUSH
32747: LD_INT 5
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: PUSH
32754: LD_INT 0
32756: PUSH
32757: LD_INT 3
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 0
32766: PUSH
32767: LD_INT 2
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 1
32776: PUSH
32777: LD_INT 3
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 1
32786: PUSH
32787: LD_INT 4
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: LD_INT 0
32796: PUSH
32797: LD_INT 4
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 1
32806: NEG
32807: PUSH
32808: LD_INT 3
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 1
32817: NEG
32818: PUSH
32819: LD_INT 2
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 2
32828: PUSH
32829: LD_INT 4
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: PUSH
32836: LD_INT 2
32838: NEG
32839: PUSH
32840: LD_INT 2
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 4
32849: NEG
32850: PUSH
32851: LD_INT 0
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 4
32860: NEG
32861: PUSH
32862: LD_INT 1
32864: NEG
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 3
32872: NEG
32873: PUSH
32874: LD_INT 0
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: LD_INT 3
32883: NEG
32884: PUSH
32885: LD_INT 1
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: LD_INT 4
32894: NEG
32895: PUSH
32896: LD_INT 1
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: PUSH
32903: LD_INT 5
32905: NEG
32906: PUSH
32907: LD_INT 0
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PUSH
32914: LD_INT 5
32916: NEG
32917: PUSH
32918: LD_INT 1
32920: NEG
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PUSH
32926: LD_INT 5
32928: NEG
32929: PUSH
32930: LD_INT 2
32932: NEG
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 3
32940: NEG
32941: PUSH
32942: LD_INT 2
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 3
32951: NEG
32952: PUSH
32953: LD_INT 3
32955: NEG
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 3
32963: NEG
32964: PUSH
32965: LD_INT 4
32967: NEG
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: LD_INT 2
32975: NEG
32976: PUSH
32977: LD_INT 3
32979: NEG
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: PUSH
32985: LD_INT 2
32987: NEG
32988: PUSH
32989: LD_INT 2
32991: NEG
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 3
32999: NEG
33000: PUSH
33001: LD_INT 2
33003: NEG
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 4
33011: NEG
33012: PUSH
33013: LD_INT 3
33015: NEG
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 4
33023: NEG
33024: PUSH
33025: LD_INT 4
33027: NEG
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 2
33035: NEG
33036: PUSH
33037: LD_INT 4
33039: NEG
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 4
33047: NEG
33048: PUSH
33049: LD_INT 2
33051: NEG
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: PUSH
33057: LD_INT 0
33059: PUSH
33060: LD_INT 4
33062: NEG
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 0
33070: PUSH
33071: LD_INT 5
33073: NEG
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: LD_INT 1
33081: PUSH
33082: LD_INT 4
33084: NEG
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PUSH
33090: LD_INT 1
33092: PUSH
33093: LD_INT 3
33095: NEG
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 0
33103: PUSH
33104: LD_INT 3
33106: NEG
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: PUSH
33112: LD_INT 1
33114: NEG
33115: PUSH
33116: LD_INT 4
33118: NEG
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 1
33126: NEG
33127: PUSH
33128: LD_INT 5
33130: NEG
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 2
33138: PUSH
33139: LD_INT 3
33141: NEG
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: LD_INT 2
33149: NEG
33150: PUSH
33151: LD_INT 5
33153: NEG
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33206: LD_ADDR_VAR 0 31
33210: PUSH
33211: LD_INT 0
33213: PUSH
33214: LD_INT 4
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 0
33223: PUSH
33224: LD_INT 3
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 1
33233: PUSH
33234: LD_INT 4
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: PUSH
33241: LD_INT 1
33243: PUSH
33244: LD_INT 5
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PUSH
33251: LD_INT 0
33253: PUSH
33254: LD_INT 5
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PUSH
33261: LD_INT 1
33263: NEG
33264: PUSH
33265: LD_INT 4
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PUSH
33272: LD_INT 1
33274: NEG
33275: PUSH
33276: LD_INT 3
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: LD_INT 2
33285: PUSH
33286: LD_INT 5
33288: PUSH
33289: EMPTY
33290: LIST
33291: LIST
33292: PUSH
33293: LD_INT 2
33295: NEG
33296: PUSH
33297: LD_INT 3
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: PUSH
33304: LD_INT 3
33306: NEG
33307: PUSH
33308: LD_INT 0
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 3
33317: NEG
33318: PUSH
33319: LD_INT 1
33321: NEG
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 2
33329: NEG
33330: PUSH
33331: LD_INT 0
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: PUSH
33338: LD_INT 2
33340: NEG
33341: PUSH
33342: LD_INT 1
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PUSH
33349: LD_INT 3
33351: NEG
33352: PUSH
33353: LD_INT 1
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: LD_INT 4
33362: NEG
33363: PUSH
33364: LD_INT 0
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 4
33373: NEG
33374: PUSH
33375: LD_INT 1
33377: NEG
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: PUSH
33383: LD_INT 4
33385: NEG
33386: PUSH
33387: LD_INT 2
33389: NEG
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: LD_INT 2
33397: NEG
33398: PUSH
33399: LD_INT 2
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 4
33408: NEG
33409: PUSH
33410: LD_INT 4
33412: NEG
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 4
33420: NEG
33421: PUSH
33422: LD_INT 5
33424: NEG
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: LD_INT 3
33432: NEG
33433: PUSH
33434: LD_INT 4
33436: NEG
33437: PUSH
33438: EMPTY
33439: LIST
33440: LIST
33441: PUSH
33442: LD_INT 3
33444: NEG
33445: PUSH
33446: LD_INT 3
33448: NEG
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: PUSH
33454: LD_INT 4
33456: NEG
33457: PUSH
33458: LD_INT 3
33460: NEG
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: PUSH
33466: LD_INT 5
33468: NEG
33469: PUSH
33470: LD_INT 4
33472: NEG
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: PUSH
33478: LD_INT 5
33480: NEG
33481: PUSH
33482: LD_INT 5
33484: NEG
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 3
33492: NEG
33493: PUSH
33494: LD_INT 5
33496: NEG
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 5
33504: NEG
33505: PUSH
33506: LD_INT 3
33508: NEG
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 0
33516: PUSH
33517: LD_INT 3
33519: NEG
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 0
33527: PUSH
33528: LD_INT 4
33530: NEG
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: LD_INT 1
33538: PUSH
33539: LD_INT 3
33541: NEG
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: LD_INT 1
33549: PUSH
33550: LD_INT 2
33552: NEG
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 0
33560: PUSH
33561: LD_INT 2
33563: NEG
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: PUSH
33569: LD_INT 1
33571: NEG
33572: PUSH
33573: LD_INT 3
33575: NEG
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 1
33583: NEG
33584: PUSH
33585: LD_INT 4
33587: NEG
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 2
33595: PUSH
33596: LD_INT 2
33598: NEG
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 2
33606: NEG
33607: PUSH
33608: LD_INT 4
33610: NEG
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 4
33618: PUSH
33619: LD_INT 0
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: PUSH
33626: LD_INT 4
33628: PUSH
33629: LD_INT 1
33631: NEG
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 5
33639: PUSH
33640: LD_INT 0
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: LD_INT 5
33649: PUSH
33650: LD_INT 1
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: LD_INT 4
33659: PUSH
33660: LD_INT 1
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: PUSH
33667: LD_INT 3
33669: PUSH
33670: LD_INT 0
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: LD_INT 3
33679: PUSH
33680: LD_INT 1
33682: NEG
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 3
33690: PUSH
33691: LD_INT 2
33693: NEG
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 5
33701: PUSH
33702: LD_INT 2
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: EMPTY
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33756: LD_ADDR_VAR 0 32
33760: PUSH
33761: LD_INT 4
33763: NEG
33764: PUSH
33765: LD_INT 0
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: PUSH
33772: LD_INT 4
33774: NEG
33775: PUSH
33776: LD_INT 1
33778: NEG
33779: PUSH
33780: EMPTY
33781: LIST
33782: LIST
33783: PUSH
33784: LD_INT 3
33786: NEG
33787: PUSH
33788: LD_INT 0
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: LD_INT 3
33797: NEG
33798: PUSH
33799: LD_INT 1
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: PUSH
33806: LD_INT 4
33808: NEG
33809: PUSH
33810: LD_INT 1
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PUSH
33817: LD_INT 5
33819: NEG
33820: PUSH
33821: LD_INT 0
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: PUSH
33828: LD_INT 5
33830: NEG
33831: PUSH
33832: LD_INT 1
33834: NEG
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: LD_INT 5
33842: NEG
33843: PUSH
33844: LD_INT 2
33846: NEG
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: LD_INT 3
33854: NEG
33855: PUSH
33856: LD_INT 2
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 3
33865: NEG
33866: PUSH
33867: LD_INT 3
33869: NEG
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 3
33877: NEG
33878: PUSH
33879: LD_INT 4
33881: NEG
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 2
33889: NEG
33890: PUSH
33891: LD_INT 3
33893: NEG
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: LD_INT 2
33901: NEG
33902: PUSH
33903: LD_INT 2
33905: NEG
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 3
33913: NEG
33914: PUSH
33915: LD_INT 2
33917: NEG
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PUSH
33923: LD_INT 4
33925: NEG
33926: PUSH
33927: LD_INT 3
33929: NEG
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: PUSH
33935: LD_INT 4
33937: NEG
33938: PUSH
33939: LD_INT 4
33941: NEG
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: PUSH
33947: LD_INT 2
33949: NEG
33950: PUSH
33951: LD_INT 4
33953: NEG
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 4
33961: NEG
33962: PUSH
33963: LD_INT 2
33965: NEG
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: PUSH
33971: LD_INT 0
33973: PUSH
33974: LD_INT 4
33976: NEG
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: PUSH
33982: LD_INT 0
33984: PUSH
33985: LD_INT 5
33987: NEG
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 1
33995: PUSH
33996: LD_INT 4
33998: NEG
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: LD_INT 1
34006: PUSH
34007: LD_INT 3
34009: NEG
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_INT 0
34017: PUSH
34018: LD_INT 3
34020: NEG
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: PUSH
34026: LD_INT 1
34028: NEG
34029: PUSH
34030: LD_INT 4
34032: NEG
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: PUSH
34038: LD_INT 1
34040: NEG
34041: PUSH
34042: LD_INT 5
34044: NEG
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 2
34052: PUSH
34053: LD_INT 3
34055: NEG
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 2
34063: NEG
34064: PUSH
34065: LD_INT 5
34067: NEG
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PUSH
34073: LD_INT 3
34075: PUSH
34076: LD_INT 0
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: LD_INT 3
34085: PUSH
34086: LD_INT 1
34088: NEG
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 4
34096: PUSH
34097: LD_INT 0
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 4
34106: PUSH
34107: LD_INT 1
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: PUSH
34114: LD_INT 3
34116: PUSH
34117: LD_INT 1
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: PUSH
34124: LD_INT 2
34126: PUSH
34127: LD_INT 0
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: LD_INT 2
34136: PUSH
34137: LD_INT 1
34139: NEG
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: PUSH
34145: LD_INT 2
34147: PUSH
34148: LD_INT 2
34150: NEG
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: PUSH
34156: LD_INT 4
34158: PUSH
34159: LD_INT 2
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: PUSH
34166: LD_INT 4
34168: PUSH
34169: LD_INT 4
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: PUSH
34176: LD_INT 4
34178: PUSH
34179: LD_INT 3
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: PUSH
34186: LD_INT 5
34188: PUSH
34189: LD_INT 4
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: PUSH
34196: LD_INT 5
34198: PUSH
34199: LD_INT 5
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: PUSH
34206: LD_INT 4
34208: PUSH
34209: LD_INT 5
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: PUSH
34216: LD_INT 3
34218: PUSH
34219: LD_INT 4
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: PUSH
34226: LD_INT 3
34228: PUSH
34229: LD_INT 3
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: PUSH
34236: LD_INT 5
34238: PUSH
34239: LD_INT 3
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: PUSH
34246: LD_INT 3
34248: PUSH
34249: LD_INT 5
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34303: LD_ADDR_VAR 0 33
34307: PUSH
34308: LD_INT 4
34310: NEG
34311: PUSH
34312: LD_INT 4
34314: NEG
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: LD_INT 4
34322: NEG
34323: PUSH
34324: LD_INT 5
34326: NEG
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 3
34334: NEG
34335: PUSH
34336: LD_INT 4
34338: NEG
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: PUSH
34344: LD_INT 3
34346: NEG
34347: PUSH
34348: LD_INT 3
34350: NEG
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 4
34358: NEG
34359: PUSH
34360: LD_INT 3
34362: NEG
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 5
34370: NEG
34371: PUSH
34372: LD_INT 4
34374: NEG
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 5
34382: NEG
34383: PUSH
34384: LD_INT 5
34386: NEG
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_INT 3
34394: NEG
34395: PUSH
34396: LD_INT 5
34398: NEG
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: LD_INT 5
34406: NEG
34407: PUSH
34408: LD_INT 3
34410: NEG
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: PUSH
34416: LD_INT 0
34418: PUSH
34419: LD_INT 3
34421: NEG
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: PUSH
34427: LD_INT 0
34429: PUSH
34430: LD_INT 4
34432: NEG
34433: PUSH
34434: EMPTY
34435: LIST
34436: LIST
34437: PUSH
34438: LD_INT 1
34440: PUSH
34441: LD_INT 3
34443: NEG
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 1
34451: PUSH
34452: LD_INT 2
34454: NEG
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: PUSH
34460: LD_INT 0
34462: PUSH
34463: LD_INT 2
34465: NEG
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: PUSH
34471: LD_INT 1
34473: NEG
34474: PUSH
34475: LD_INT 3
34477: NEG
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: LD_INT 1
34485: NEG
34486: PUSH
34487: LD_INT 4
34489: NEG
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 2
34497: PUSH
34498: LD_INT 2
34500: NEG
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: LD_INT 2
34508: NEG
34509: PUSH
34510: LD_INT 4
34512: NEG
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: LD_INT 4
34520: PUSH
34521: LD_INT 0
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PUSH
34528: LD_INT 4
34530: PUSH
34531: LD_INT 1
34533: NEG
34534: PUSH
34535: EMPTY
34536: LIST
34537: LIST
34538: PUSH
34539: LD_INT 5
34541: PUSH
34542: LD_INT 0
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: PUSH
34549: LD_INT 5
34551: PUSH
34552: LD_INT 1
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: PUSH
34559: LD_INT 4
34561: PUSH
34562: LD_INT 1
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: PUSH
34569: LD_INT 3
34571: PUSH
34572: LD_INT 0
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: LD_INT 3
34581: PUSH
34582: LD_INT 1
34584: NEG
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: LD_INT 3
34592: PUSH
34593: LD_INT 2
34595: NEG
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 5
34603: PUSH
34604: LD_INT 2
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 3
34613: PUSH
34614: LD_INT 3
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: PUSH
34621: LD_INT 3
34623: PUSH
34624: LD_INT 2
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: LD_INT 4
34633: PUSH
34634: LD_INT 3
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: LD_INT 4
34643: PUSH
34644: LD_INT 4
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: PUSH
34651: LD_INT 3
34653: PUSH
34654: LD_INT 4
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 2
34663: PUSH
34664: LD_INT 3
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: PUSH
34671: LD_INT 2
34673: PUSH
34674: LD_INT 2
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: PUSH
34681: LD_INT 4
34683: PUSH
34684: LD_INT 2
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: PUSH
34691: LD_INT 2
34693: PUSH
34694: LD_INT 4
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 0
34703: PUSH
34704: LD_INT 4
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: PUSH
34711: LD_INT 0
34713: PUSH
34714: LD_INT 3
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: PUSH
34721: LD_INT 1
34723: PUSH
34724: LD_INT 4
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: PUSH
34731: LD_INT 1
34733: PUSH
34734: LD_INT 5
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: LD_INT 0
34743: PUSH
34744: LD_INT 5
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: PUSH
34751: LD_INT 1
34753: NEG
34754: PUSH
34755: LD_INT 4
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: LD_INT 1
34764: NEG
34765: PUSH
34766: LD_INT 3
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: LD_INT 2
34775: PUSH
34776: LD_INT 5
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: LD_INT 2
34785: NEG
34786: PUSH
34787: LD_INT 3
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: LIST
34840: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34841: LD_ADDR_VAR 0 34
34845: PUSH
34846: LD_INT 0
34848: PUSH
34849: LD_INT 4
34851: NEG
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_INT 0
34859: PUSH
34860: LD_INT 5
34862: NEG
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: LD_INT 1
34870: PUSH
34871: LD_INT 4
34873: NEG
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 1
34881: PUSH
34882: LD_INT 3
34884: NEG
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: PUSH
34890: LD_INT 0
34892: PUSH
34893: LD_INT 3
34895: NEG
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: PUSH
34901: LD_INT 1
34903: NEG
34904: PUSH
34905: LD_INT 4
34907: NEG
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 1
34915: NEG
34916: PUSH
34917: LD_INT 5
34919: NEG
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PUSH
34925: LD_INT 2
34927: PUSH
34928: LD_INT 3
34930: NEG
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 2
34938: NEG
34939: PUSH
34940: LD_INT 5
34942: NEG
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 3
34950: PUSH
34951: LD_INT 0
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 3
34960: PUSH
34961: LD_INT 1
34963: NEG
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: PUSH
34969: LD_INT 4
34971: PUSH
34972: LD_INT 0
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 4
34981: PUSH
34982: LD_INT 1
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 3
34991: PUSH
34992: LD_INT 1
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: PUSH
34999: LD_INT 2
35001: PUSH
35002: LD_INT 0
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: PUSH
35009: LD_INT 2
35011: PUSH
35012: LD_INT 1
35014: NEG
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 2
35022: PUSH
35023: LD_INT 2
35025: NEG
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: LD_INT 4
35033: PUSH
35034: LD_INT 2
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 4
35043: PUSH
35044: LD_INT 4
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 4
35053: PUSH
35054: LD_INT 3
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 5
35063: PUSH
35064: LD_INT 4
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 5
35073: PUSH
35074: LD_INT 5
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: PUSH
35081: LD_INT 4
35083: PUSH
35084: LD_INT 5
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PUSH
35091: LD_INT 3
35093: PUSH
35094: LD_INT 4
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 3
35103: PUSH
35104: LD_INT 3
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: PUSH
35111: LD_INT 5
35113: PUSH
35114: LD_INT 3
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PUSH
35121: LD_INT 3
35123: PUSH
35124: LD_INT 5
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 0
35133: PUSH
35134: LD_INT 3
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: PUSH
35141: LD_INT 0
35143: PUSH
35144: LD_INT 2
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: PUSH
35151: LD_INT 1
35153: PUSH
35154: LD_INT 3
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: LD_INT 1
35163: PUSH
35164: LD_INT 4
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: PUSH
35171: LD_INT 0
35173: PUSH
35174: LD_INT 4
35176: PUSH
35177: EMPTY
35178: LIST
35179: LIST
35180: PUSH
35181: LD_INT 1
35183: NEG
35184: PUSH
35185: LD_INT 3
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: PUSH
35192: LD_INT 1
35194: NEG
35195: PUSH
35196: LD_INT 2
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: PUSH
35203: LD_INT 2
35205: PUSH
35206: LD_INT 4
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: PUSH
35213: LD_INT 2
35215: NEG
35216: PUSH
35217: LD_INT 2
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PUSH
35224: LD_INT 4
35226: NEG
35227: PUSH
35228: LD_INT 0
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PUSH
35235: LD_INT 4
35237: NEG
35238: PUSH
35239: LD_INT 1
35241: NEG
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: PUSH
35247: LD_INT 3
35249: NEG
35250: PUSH
35251: LD_INT 0
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PUSH
35258: LD_INT 3
35260: NEG
35261: PUSH
35262: LD_INT 1
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PUSH
35269: LD_INT 4
35271: NEG
35272: PUSH
35273: LD_INT 1
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 5
35282: NEG
35283: PUSH
35284: LD_INT 0
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 5
35293: NEG
35294: PUSH
35295: LD_INT 1
35297: NEG
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: LD_INT 5
35305: NEG
35306: PUSH
35307: LD_INT 2
35309: NEG
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: PUSH
35315: LD_INT 3
35317: NEG
35318: PUSH
35319: LD_INT 2
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: ST_TO_ADDR
// end ; end ;
35373: GO 35376
35375: POP
// case btype of b_depot , b_warehouse :
35376: LD_VAR 0 1
35380: PUSH
35381: LD_INT 0
35383: DOUBLE
35384: EQUAL
35385: IFTRUE 35395
35387: LD_INT 1
35389: DOUBLE
35390: EQUAL
35391: IFTRUE 35395
35393: GO 35596
35395: POP
// case nation of nation_american :
35396: LD_VAR 0 5
35400: PUSH
35401: LD_INT 1
35403: DOUBLE
35404: EQUAL
35405: IFTRUE 35409
35407: GO 35465
35409: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35410: LD_ADDR_VAR 0 9
35414: PUSH
35415: LD_VAR 0 11
35419: PUSH
35420: LD_VAR 0 12
35424: PUSH
35425: LD_VAR 0 13
35429: PUSH
35430: LD_VAR 0 14
35434: PUSH
35435: LD_VAR 0 15
35439: PUSH
35440: LD_VAR 0 16
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: LIST
35449: LIST
35450: LIST
35451: LIST
35452: PUSH
35453: LD_VAR 0 4
35457: PUSH
35458: LD_INT 1
35460: PLUS
35461: ARRAY
35462: ST_TO_ADDR
35463: GO 35594
35465: LD_INT 2
35467: DOUBLE
35468: EQUAL
35469: IFTRUE 35473
35471: GO 35529
35473: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35474: LD_ADDR_VAR 0 9
35478: PUSH
35479: LD_VAR 0 17
35483: PUSH
35484: LD_VAR 0 18
35488: PUSH
35489: LD_VAR 0 19
35493: PUSH
35494: LD_VAR 0 20
35498: PUSH
35499: LD_VAR 0 21
35503: PUSH
35504: LD_VAR 0 22
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: LIST
35513: LIST
35514: LIST
35515: LIST
35516: PUSH
35517: LD_VAR 0 4
35521: PUSH
35522: LD_INT 1
35524: PLUS
35525: ARRAY
35526: ST_TO_ADDR
35527: GO 35594
35529: LD_INT 3
35531: DOUBLE
35532: EQUAL
35533: IFTRUE 35537
35535: GO 35593
35537: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35538: LD_ADDR_VAR 0 9
35542: PUSH
35543: LD_VAR 0 23
35547: PUSH
35548: LD_VAR 0 24
35552: PUSH
35553: LD_VAR 0 25
35557: PUSH
35558: LD_VAR 0 26
35562: PUSH
35563: LD_VAR 0 27
35567: PUSH
35568: LD_VAR 0 28
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: PUSH
35581: LD_VAR 0 4
35585: PUSH
35586: LD_INT 1
35588: PLUS
35589: ARRAY
35590: ST_TO_ADDR
35591: GO 35594
35593: POP
35594: GO 36149
35596: LD_INT 2
35598: DOUBLE
35599: EQUAL
35600: IFTRUE 35610
35602: LD_INT 3
35604: DOUBLE
35605: EQUAL
35606: IFTRUE 35610
35608: GO 35666
35610: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35611: LD_ADDR_VAR 0 9
35615: PUSH
35616: LD_VAR 0 29
35620: PUSH
35621: LD_VAR 0 30
35625: PUSH
35626: LD_VAR 0 31
35630: PUSH
35631: LD_VAR 0 32
35635: PUSH
35636: LD_VAR 0 33
35640: PUSH
35641: LD_VAR 0 34
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: PUSH
35654: LD_VAR 0 4
35658: PUSH
35659: LD_INT 1
35661: PLUS
35662: ARRAY
35663: ST_TO_ADDR
35664: GO 36149
35666: LD_INT 16
35668: DOUBLE
35669: EQUAL
35670: IFTRUE 35728
35672: LD_INT 17
35674: DOUBLE
35675: EQUAL
35676: IFTRUE 35728
35678: LD_INT 18
35680: DOUBLE
35681: EQUAL
35682: IFTRUE 35728
35684: LD_INT 19
35686: DOUBLE
35687: EQUAL
35688: IFTRUE 35728
35690: LD_INT 22
35692: DOUBLE
35693: EQUAL
35694: IFTRUE 35728
35696: LD_INT 20
35698: DOUBLE
35699: EQUAL
35700: IFTRUE 35728
35702: LD_INT 21
35704: DOUBLE
35705: EQUAL
35706: IFTRUE 35728
35708: LD_INT 23
35710: DOUBLE
35711: EQUAL
35712: IFTRUE 35728
35714: LD_INT 24
35716: DOUBLE
35717: EQUAL
35718: IFTRUE 35728
35720: LD_INT 25
35722: DOUBLE
35723: EQUAL
35724: IFTRUE 35728
35726: GO 35784
35728: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35729: LD_ADDR_VAR 0 9
35733: PUSH
35734: LD_VAR 0 35
35738: PUSH
35739: LD_VAR 0 36
35743: PUSH
35744: LD_VAR 0 37
35748: PUSH
35749: LD_VAR 0 38
35753: PUSH
35754: LD_VAR 0 39
35758: PUSH
35759: LD_VAR 0 40
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: LIST
35768: LIST
35769: LIST
35770: LIST
35771: PUSH
35772: LD_VAR 0 4
35776: PUSH
35777: LD_INT 1
35779: PLUS
35780: ARRAY
35781: ST_TO_ADDR
35782: GO 36149
35784: LD_INT 6
35786: DOUBLE
35787: EQUAL
35788: IFTRUE 35840
35790: LD_INT 7
35792: DOUBLE
35793: EQUAL
35794: IFTRUE 35840
35796: LD_INT 8
35798: DOUBLE
35799: EQUAL
35800: IFTRUE 35840
35802: LD_INT 13
35804: DOUBLE
35805: EQUAL
35806: IFTRUE 35840
35808: LD_INT 12
35810: DOUBLE
35811: EQUAL
35812: IFTRUE 35840
35814: LD_INT 15
35816: DOUBLE
35817: EQUAL
35818: IFTRUE 35840
35820: LD_INT 11
35822: DOUBLE
35823: EQUAL
35824: IFTRUE 35840
35826: LD_INT 14
35828: DOUBLE
35829: EQUAL
35830: IFTRUE 35840
35832: LD_INT 10
35834: DOUBLE
35835: EQUAL
35836: IFTRUE 35840
35838: GO 35896
35840: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35841: LD_ADDR_VAR 0 9
35845: PUSH
35846: LD_VAR 0 41
35850: PUSH
35851: LD_VAR 0 42
35855: PUSH
35856: LD_VAR 0 43
35860: PUSH
35861: LD_VAR 0 44
35865: PUSH
35866: LD_VAR 0 45
35870: PUSH
35871: LD_VAR 0 46
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: PUSH
35884: LD_VAR 0 4
35888: PUSH
35889: LD_INT 1
35891: PLUS
35892: ARRAY
35893: ST_TO_ADDR
35894: GO 36149
35896: LD_INT 36
35898: DOUBLE
35899: EQUAL
35900: IFTRUE 35904
35902: GO 35960
35904: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35905: LD_ADDR_VAR 0 9
35909: PUSH
35910: LD_VAR 0 47
35914: PUSH
35915: LD_VAR 0 48
35919: PUSH
35920: LD_VAR 0 49
35924: PUSH
35925: LD_VAR 0 50
35929: PUSH
35930: LD_VAR 0 51
35934: PUSH
35935: LD_VAR 0 52
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: PUSH
35948: LD_VAR 0 4
35952: PUSH
35953: LD_INT 1
35955: PLUS
35956: ARRAY
35957: ST_TO_ADDR
35958: GO 36149
35960: LD_INT 4
35962: DOUBLE
35963: EQUAL
35964: IFTRUE 35986
35966: LD_INT 5
35968: DOUBLE
35969: EQUAL
35970: IFTRUE 35986
35972: LD_INT 34
35974: DOUBLE
35975: EQUAL
35976: IFTRUE 35986
35978: LD_INT 37
35980: DOUBLE
35981: EQUAL
35982: IFTRUE 35986
35984: GO 36042
35986: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35987: LD_ADDR_VAR 0 9
35991: PUSH
35992: LD_VAR 0 53
35996: PUSH
35997: LD_VAR 0 54
36001: PUSH
36002: LD_VAR 0 55
36006: PUSH
36007: LD_VAR 0 56
36011: PUSH
36012: LD_VAR 0 57
36016: PUSH
36017: LD_VAR 0 58
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: LIST
36026: LIST
36027: LIST
36028: LIST
36029: PUSH
36030: LD_VAR 0 4
36034: PUSH
36035: LD_INT 1
36037: PLUS
36038: ARRAY
36039: ST_TO_ADDR
36040: GO 36149
36042: LD_INT 31
36044: DOUBLE
36045: EQUAL
36046: IFTRUE 36092
36048: LD_INT 32
36050: DOUBLE
36051: EQUAL
36052: IFTRUE 36092
36054: LD_INT 33
36056: DOUBLE
36057: EQUAL
36058: IFTRUE 36092
36060: LD_INT 27
36062: DOUBLE
36063: EQUAL
36064: IFTRUE 36092
36066: LD_INT 26
36068: DOUBLE
36069: EQUAL
36070: IFTRUE 36092
36072: LD_INT 28
36074: DOUBLE
36075: EQUAL
36076: IFTRUE 36092
36078: LD_INT 29
36080: DOUBLE
36081: EQUAL
36082: IFTRUE 36092
36084: LD_INT 30
36086: DOUBLE
36087: EQUAL
36088: IFTRUE 36092
36090: GO 36148
36092: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
36093: LD_ADDR_VAR 0 9
36097: PUSH
36098: LD_VAR 0 59
36102: PUSH
36103: LD_VAR 0 60
36107: PUSH
36108: LD_VAR 0 61
36112: PUSH
36113: LD_VAR 0 62
36117: PUSH
36118: LD_VAR 0 63
36122: PUSH
36123: LD_VAR 0 64
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: PUSH
36136: LD_VAR 0 4
36140: PUSH
36141: LD_INT 1
36143: PLUS
36144: ARRAY
36145: ST_TO_ADDR
36146: GO 36149
36148: POP
// temp_list2 = [ ] ;
36149: LD_ADDR_VAR 0 10
36153: PUSH
36154: EMPTY
36155: ST_TO_ADDR
// for i in temp_list do
36156: LD_ADDR_VAR 0 8
36160: PUSH
36161: LD_VAR 0 9
36165: PUSH
36166: FOR_IN
36167: IFFALSE 36219
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36169: LD_ADDR_VAR 0 10
36173: PUSH
36174: LD_VAR 0 10
36178: PUSH
36179: LD_VAR 0 8
36183: PUSH
36184: LD_INT 1
36186: ARRAY
36187: PUSH
36188: LD_VAR 0 2
36192: PLUS
36193: PUSH
36194: LD_VAR 0 8
36198: PUSH
36199: LD_INT 2
36201: ARRAY
36202: PUSH
36203: LD_VAR 0 3
36207: PLUS
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PUSH
36213: EMPTY
36214: LIST
36215: ADD
36216: ST_TO_ADDR
36217: GO 36166
36219: POP
36220: POP
// result = temp_list2 ;
36221: LD_ADDR_VAR 0 7
36225: PUSH
36226: LD_VAR 0 10
36230: ST_TO_ADDR
// end ;
36231: LD_VAR 0 7
36235: RET
// export function EnemyInRange ( unit , dist ) ; begin
36236: LD_INT 0
36238: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36239: LD_ADDR_VAR 0 3
36243: PUSH
36244: LD_VAR 0 1
36248: PPUSH
36249: CALL_OW 255
36253: PPUSH
36254: LD_VAR 0 1
36258: PPUSH
36259: CALL_OW 250
36263: PPUSH
36264: LD_VAR 0 1
36268: PPUSH
36269: CALL_OW 251
36273: PPUSH
36274: LD_VAR 0 2
36278: PPUSH
36279: CALL 9638 0 4
36283: PUSH
36284: LD_INT 4
36286: ARRAY
36287: ST_TO_ADDR
// end ;
36288: LD_VAR 0 3
36292: RET
// export function PlayerSeeMe ( unit ) ; begin
36293: LD_INT 0
36295: PPUSH
// result := See ( your_side , unit ) ;
36296: LD_ADDR_VAR 0 2
36300: PUSH
36301: LD_OWVAR 2
36305: PPUSH
36306: LD_VAR 0 1
36310: PPUSH
36311: CALL_OW 292
36315: ST_TO_ADDR
// end ;
36316: LD_VAR 0 2
36320: RET
// export function ReverseDir ( unit ) ; begin
36321: LD_INT 0
36323: PPUSH
// if not unit then
36324: LD_VAR 0 1
36328: NOT
36329: IFFALSE 36333
// exit ;
36331: GO 36356
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36333: LD_ADDR_VAR 0 2
36337: PUSH
36338: LD_VAR 0 1
36342: PPUSH
36343: CALL_OW 254
36347: PUSH
36348: LD_INT 3
36350: PLUS
36351: PUSH
36352: LD_INT 6
36354: MOD
36355: ST_TO_ADDR
// end ;
36356: LD_VAR 0 2
36360: RET
// export function ReverseArray ( array ) ; var i ; begin
36361: LD_INT 0
36363: PPUSH
36364: PPUSH
// if not array then
36365: LD_VAR 0 1
36369: NOT
36370: IFFALSE 36374
// exit ;
36372: GO 36429
// result := [ ] ;
36374: LD_ADDR_VAR 0 2
36378: PUSH
36379: EMPTY
36380: ST_TO_ADDR
// for i := array downto 1 do
36381: LD_ADDR_VAR 0 3
36385: PUSH
36386: DOUBLE
36387: LD_VAR 0 1
36391: INC
36392: ST_TO_ADDR
36393: LD_INT 1
36395: PUSH
36396: FOR_DOWNTO
36397: IFFALSE 36427
// result := Join ( result , array [ i ] ) ;
36399: LD_ADDR_VAR 0 2
36403: PUSH
36404: LD_VAR 0 2
36408: PPUSH
36409: LD_VAR 0 1
36413: PUSH
36414: LD_VAR 0 3
36418: ARRAY
36419: PPUSH
36420: CALL 41073 0 2
36424: ST_TO_ADDR
36425: GO 36396
36427: POP
36428: POP
// end ;
36429: LD_VAR 0 2
36433: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36434: LD_INT 0
36436: PPUSH
36437: PPUSH
36438: PPUSH
36439: PPUSH
36440: PPUSH
36441: PPUSH
// if not unit or not hexes then
36442: LD_VAR 0 1
36446: NOT
36447: PUSH
36448: LD_VAR 0 2
36452: NOT
36453: OR
36454: IFFALSE 36458
// exit ;
36456: GO 36581
// dist := 9999 ;
36458: LD_ADDR_VAR 0 5
36462: PUSH
36463: LD_INT 9999
36465: ST_TO_ADDR
// for i = 1 to hexes do
36466: LD_ADDR_VAR 0 4
36470: PUSH
36471: DOUBLE
36472: LD_INT 1
36474: DEC
36475: ST_TO_ADDR
36476: LD_VAR 0 2
36480: PUSH
36481: FOR_TO
36482: IFFALSE 36569
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36484: LD_ADDR_VAR 0 6
36488: PUSH
36489: LD_VAR 0 1
36493: PPUSH
36494: LD_VAR 0 2
36498: PUSH
36499: LD_VAR 0 4
36503: ARRAY
36504: PUSH
36505: LD_INT 1
36507: ARRAY
36508: PPUSH
36509: LD_VAR 0 2
36513: PUSH
36514: LD_VAR 0 4
36518: ARRAY
36519: PUSH
36520: LD_INT 2
36522: ARRAY
36523: PPUSH
36524: CALL_OW 297
36528: ST_TO_ADDR
// if tdist < dist then
36529: LD_VAR 0 6
36533: PUSH
36534: LD_VAR 0 5
36538: LESS
36539: IFFALSE 36567
// begin hex := hexes [ i ] ;
36541: LD_ADDR_VAR 0 8
36545: PUSH
36546: LD_VAR 0 2
36550: PUSH
36551: LD_VAR 0 4
36555: ARRAY
36556: ST_TO_ADDR
// dist := tdist ;
36557: LD_ADDR_VAR 0 5
36561: PUSH
36562: LD_VAR 0 6
36566: ST_TO_ADDR
// end ; end ;
36567: GO 36481
36569: POP
36570: POP
// result := hex ;
36571: LD_ADDR_VAR 0 3
36575: PUSH
36576: LD_VAR 0 8
36580: ST_TO_ADDR
// end ;
36581: LD_VAR 0 3
36585: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36586: LD_INT 0
36588: PPUSH
36589: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36590: LD_VAR 0 1
36594: NOT
36595: PUSH
36596: LD_VAR 0 1
36600: PUSH
36601: LD_INT 21
36603: PUSH
36604: LD_INT 2
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: PUSH
36611: LD_INT 23
36613: PUSH
36614: LD_INT 2
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: PPUSH
36625: CALL_OW 69
36629: IN
36630: NOT
36631: OR
36632: IFFALSE 36636
// exit ;
36634: GO 36683
// for i = 1 to 3 do
36636: LD_ADDR_VAR 0 3
36640: PUSH
36641: DOUBLE
36642: LD_INT 1
36644: DEC
36645: ST_TO_ADDR
36646: LD_INT 3
36648: PUSH
36649: FOR_TO
36650: IFFALSE 36681
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36652: LD_VAR 0 1
36656: PPUSH
36657: CALL_OW 250
36661: PPUSH
36662: LD_VAR 0 1
36666: PPUSH
36667: CALL_OW 251
36671: PPUSH
36672: LD_INT 1
36674: PPUSH
36675: CALL_OW 453
36679: GO 36649
36681: POP
36682: POP
// end ;
36683: LD_VAR 0 2
36687: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36688: LD_INT 0
36690: PPUSH
36691: PPUSH
36692: PPUSH
36693: PPUSH
36694: PPUSH
36695: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
36696: LD_VAR 0 1
36700: NOT
36701: PUSH
36702: LD_VAR 0 2
36706: NOT
36707: OR
36708: PUSH
36709: LD_VAR 0 1
36713: PPUSH
36714: CALL_OW 314
36718: OR
36719: IFFALSE 36723
// exit ;
36721: GO 37190
// if GetLives ( i ) < 250 then
36723: LD_VAR 0 4
36727: PPUSH
36728: CALL_OW 256
36732: PUSH
36733: LD_INT 250
36735: LESS
36736: IFFALSE 36749
// begin ComAutodestruct ( i ) ;
36738: LD_VAR 0 4
36742: PPUSH
36743: CALL 36586 0 1
// exit ;
36747: GO 37190
// end ; x := GetX ( enemy_unit ) ;
36749: LD_ADDR_VAR 0 7
36753: PUSH
36754: LD_VAR 0 2
36758: PPUSH
36759: CALL_OW 250
36763: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36764: LD_ADDR_VAR 0 8
36768: PUSH
36769: LD_VAR 0 2
36773: PPUSH
36774: CALL_OW 251
36778: ST_TO_ADDR
// if not x or not y then
36779: LD_VAR 0 7
36783: NOT
36784: PUSH
36785: LD_VAR 0 8
36789: NOT
36790: OR
36791: IFFALSE 36795
// exit ;
36793: GO 37190
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36795: LD_ADDR_VAR 0 6
36799: PUSH
36800: LD_VAR 0 7
36804: PPUSH
36805: LD_INT 0
36807: PPUSH
36808: LD_INT 4
36810: PPUSH
36811: CALL_OW 272
36815: PUSH
36816: LD_VAR 0 8
36820: PPUSH
36821: LD_INT 0
36823: PPUSH
36824: LD_INT 4
36826: PPUSH
36827: CALL_OW 273
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: LD_VAR 0 7
36840: PPUSH
36841: LD_INT 1
36843: PPUSH
36844: LD_INT 4
36846: PPUSH
36847: CALL_OW 272
36851: PUSH
36852: LD_VAR 0 8
36856: PPUSH
36857: LD_INT 1
36859: PPUSH
36860: LD_INT 4
36862: PPUSH
36863: CALL_OW 273
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_VAR 0 7
36876: PPUSH
36877: LD_INT 2
36879: PPUSH
36880: LD_INT 4
36882: PPUSH
36883: CALL_OW 272
36887: PUSH
36888: LD_VAR 0 8
36892: PPUSH
36893: LD_INT 2
36895: PPUSH
36896: LD_INT 4
36898: PPUSH
36899: CALL_OW 273
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: PUSH
36908: LD_VAR 0 7
36912: PPUSH
36913: LD_INT 3
36915: PPUSH
36916: LD_INT 4
36918: PPUSH
36919: CALL_OW 272
36923: PUSH
36924: LD_VAR 0 8
36928: PPUSH
36929: LD_INT 3
36931: PPUSH
36932: LD_INT 4
36934: PPUSH
36935: CALL_OW 273
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PUSH
36944: LD_VAR 0 7
36948: PPUSH
36949: LD_INT 4
36951: PPUSH
36952: LD_INT 4
36954: PPUSH
36955: CALL_OW 272
36959: PUSH
36960: LD_VAR 0 8
36964: PPUSH
36965: LD_INT 4
36967: PPUSH
36968: LD_INT 4
36970: PPUSH
36971: CALL_OW 273
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: LD_VAR 0 7
36984: PPUSH
36985: LD_INT 5
36987: PPUSH
36988: LD_INT 4
36990: PPUSH
36991: CALL_OW 272
36995: PUSH
36996: LD_VAR 0 8
37000: PPUSH
37001: LD_INT 5
37003: PPUSH
37004: LD_INT 4
37006: PPUSH
37007: CALL_OW 273
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: ST_TO_ADDR
// for i = tmp downto 1 do
37024: LD_ADDR_VAR 0 4
37028: PUSH
37029: DOUBLE
37030: LD_VAR 0 6
37034: INC
37035: ST_TO_ADDR
37036: LD_INT 1
37038: PUSH
37039: FOR_DOWNTO
37040: IFFALSE 37141
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
37042: LD_VAR 0 6
37046: PUSH
37047: LD_VAR 0 4
37051: ARRAY
37052: PUSH
37053: LD_INT 1
37055: ARRAY
37056: PPUSH
37057: LD_VAR 0 6
37061: PUSH
37062: LD_VAR 0 4
37066: ARRAY
37067: PUSH
37068: LD_INT 2
37070: ARRAY
37071: PPUSH
37072: CALL_OW 488
37076: NOT
37077: PUSH
37078: LD_VAR 0 6
37082: PUSH
37083: LD_VAR 0 4
37087: ARRAY
37088: PUSH
37089: LD_INT 1
37091: ARRAY
37092: PPUSH
37093: LD_VAR 0 6
37097: PUSH
37098: LD_VAR 0 4
37102: ARRAY
37103: PUSH
37104: LD_INT 2
37106: ARRAY
37107: PPUSH
37108: CALL_OW 428
37112: PUSH
37113: LD_INT 0
37115: NONEQUAL
37116: OR
37117: IFFALSE 37139
// tmp := Delete ( tmp , i ) ;
37119: LD_ADDR_VAR 0 6
37123: PUSH
37124: LD_VAR 0 6
37128: PPUSH
37129: LD_VAR 0 4
37133: PPUSH
37134: CALL_OW 3
37138: ST_TO_ADDR
37139: GO 37039
37141: POP
37142: POP
// j := GetClosestHex ( unit , tmp ) ;
37143: LD_ADDR_VAR 0 5
37147: PUSH
37148: LD_VAR 0 1
37152: PPUSH
37153: LD_VAR 0 6
37157: PPUSH
37158: CALL 36434 0 2
37162: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
37163: LD_VAR 0 1
37167: PPUSH
37168: LD_VAR 0 5
37172: PUSH
37173: LD_INT 1
37175: ARRAY
37176: PPUSH
37177: LD_VAR 0 5
37181: PUSH
37182: LD_INT 2
37184: ARRAY
37185: PPUSH
37186: CALL_OW 111
// end ;
37190: LD_VAR 0 3
37194: RET
// export function PrepareApemanSoldier ( ) ; begin
37195: LD_INT 0
37197: PPUSH
// uc_nation := 0 ;
37198: LD_ADDR_OWVAR 21
37202: PUSH
37203: LD_INT 0
37205: ST_TO_ADDR
// hc_sex := sex_male ;
37206: LD_ADDR_OWVAR 27
37210: PUSH
37211: LD_INT 1
37213: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
37214: LD_ADDR_OWVAR 28
37218: PUSH
37219: LD_INT 15
37221: ST_TO_ADDR
// hc_gallery :=  ;
37222: LD_ADDR_OWVAR 33
37226: PUSH
37227: LD_STRING 
37229: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37230: LD_ADDR_OWVAR 31
37234: PUSH
37235: LD_INT 0
37237: PPUSH
37238: LD_INT 3
37240: PPUSH
37241: CALL_OW 12
37245: PUSH
37246: LD_INT 0
37248: PPUSH
37249: LD_INT 3
37251: PPUSH
37252: CALL_OW 12
37256: PUSH
37257: LD_INT 0
37259: PUSH
37260: LD_INT 0
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: LIST
37267: LIST
37268: ST_TO_ADDR
// end ;
37269: LD_VAR 0 1
37273: RET
// export function PrepareApemanEngineer ( ) ; begin
37274: LD_INT 0
37276: PPUSH
// uc_nation := 0 ;
37277: LD_ADDR_OWVAR 21
37281: PUSH
37282: LD_INT 0
37284: ST_TO_ADDR
// hc_sex := sex_male ;
37285: LD_ADDR_OWVAR 27
37289: PUSH
37290: LD_INT 1
37292: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
37293: LD_ADDR_OWVAR 28
37297: PUSH
37298: LD_INT 16
37300: ST_TO_ADDR
// hc_gallery :=  ;
37301: LD_ADDR_OWVAR 33
37305: PUSH
37306: LD_STRING 
37308: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37309: LD_ADDR_OWVAR 31
37313: PUSH
37314: LD_INT 0
37316: PPUSH
37317: LD_INT 3
37319: PPUSH
37320: CALL_OW 12
37324: PUSH
37325: LD_INT 0
37327: PPUSH
37328: LD_INT 3
37330: PPUSH
37331: CALL_OW 12
37335: PUSH
37336: LD_INT 0
37338: PUSH
37339: LD_INT 0
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: ST_TO_ADDR
// end ;
37348: LD_VAR 0 1
37352: RET
// export function PrepareApeman ( agressivity ) ; begin
37353: LD_INT 0
37355: PPUSH
// uc_side := 0 ;
37356: LD_ADDR_OWVAR 20
37360: PUSH
37361: LD_INT 0
37363: ST_TO_ADDR
// uc_nation := 0 ;
37364: LD_ADDR_OWVAR 21
37368: PUSH
37369: LD_INT 0
37371: ST_TO_ADDR
// hc_sex := sex_male ;
37372: LD_ADDR_OWVAR 27
37376: PUSH
37377: LD_INT 1
37379: ST_TO_ADDR
// hc_class := class_apeman ;
37380: LD_ADDR_OWVAR 28
37384: PUSH
37385: LD_INT 12
37387: ST_TO_ADDR
// hc_gallery :=  ;
37388: LD_ADDR_OWVAR 33
37392: PUSH
37393: LD_STRING 
37395: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37396: LD_ADDR_OWVAR 35
37400: PUSH
37401: LD_VAR 0 1
37405: NEG
37406: PPUSH
37407: LD_VAR 0 1
37411: PPUSH
37412: CALL_OW 12
37416: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37417: LD_ADDR_OWVAR 31
37421: PUSH
37422: LD_INT 0
37424: PPUSH
37425: LD_INT 3
37427: PPUSH
37428: CALL_OW 12
37432: PUSH
37433: LD_INT 0
37435: PPUSH
37436: LD_INT 3
37438: PPUSH
37439: CALL_OW 12
37443: PUSH
37444: LD_INT 0
37446: PUSH
37447: LD_INT 0
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: ST_TO_ADDR
// end ;
37456: LD_VAR 0 2
37460: RET
// export function PrepareTiger ( agressivity ) ; begin
37461: LD_INT 0
37463: PPUSH
// uc_side := 0 ;
37464: LD_ADDR_OWVAR 20
37468: PUSH
37469: LD_INT 0
37471: ST_TO_ADDR
// uc_nation := 0 ;
37472: LD_ADDR_OWVAR 21
37476: PUSH
37477: LD_INT 0
37479: ST_TO_ADDR
// hc_class := class_tiger ;
37480: LD_ADDR_OWVAR 28
37484: PUSH
37485: LD_INT 14
37487: ST_TO_ADDR
// hc_gallery :=  ;
37488: LD_ADDR_OWVAR 33
37492: PUSH
37493: LD_STRING 
37495: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37496: LD_ADDR_OWVAR 35
37500: PUSH
37501: LD_VAR 0 1
37505: NEG
37506: PPUSH
37507: LD_VAR 0 1
37511: PPUSH
37512: CALL_OW 12
37516: ST_TO_ADDR
// end ;
37517: LD_VAR 0 2
37521: RET
// export function PrepareEnchidna ( ) ; begin
37522: LD_INT 0
37524: PPUSH
// uc_side := 0 ;
37525: LD_ADDR_OWVAR 20
37529: PUSH
37530: LD_INT 0
37532: ST_TO_ADDR
// uc_nation := 0 ;
37533: LD_ADDR_OWVAR 21
37537: PUSH
37538: LD_INT 0
37540: ST_TO_ADDR
// hc_class := class_baggie ;
37541: LD_ADDR_OWVAR 28
37545: PUSH
37546: LD_INT 13
37548: ST_TO_ADDR
// hc_gallery :=  ;
37549: LD_ADDR_OWVAR 33
37553: PUSH
37554: LD_STRING 
37556: ST_TO_ADDR
// end ;
37557: LD_VAR 0 1
37561: RET
// export function PrepareFrog ( ) ; begin
37562: LD_INT 0
37564: PPUSH
// uc_side := 0 ;
37565: LD_ADDR_OWVAR 20
37569: PUSH
37570: LD_INT 0
37572: ST_TO_ADDR
// uc_nation := 0 ;
37573: LD_ADDR_OWVAR 21
37577: PUSH
37578: LD_INT 0
37580: ST_TO_ADDR
// hc_class := class_frog ;
37581: LD_ADDR_OWVAR 28
37585: PUSH
37586: LD_INT 19
37588: ST_TO_ADDR
// hc_gallery :=  ;
37589: LD_ADDR_OWVAR 33
37593: PUSH
37594: LD_STRING 
37596: ST_TO_ADDR
// end ;
37597: LD_VAR 0 1
37601: RET
// export function PrepareFish ( ) ; begin
37602: LD_INT 0
37604: PPUSH
// uc_side := 0 ;
37605: LD_ADDR_OWVAR 20
37609: PUSH
37610: LD_INT 0
37612: ST_TO_ADDR
// uc_nation := 0 ;
37613: LD_ADDR_OWVAR 21
37617: PUSH
37618: LD_INT 0
37620: ST_TO_ADDR
// hc_class := class_fish ;
37621: LD_ADDR_OWVAR 28
37625: PUSH
37626: LD_INT 20
37628: ST_TO_ADDR
// hc_gallery :=  ;
37629: LD_ADDR_OWVAR 33
37633: PUSH
37634: LD_STRING 
37636: ST_TO_ADDR
// end ;
37637: LD_VAR 0 1
37641: RET
// export function PrepareBird ( ) ; begin
37642: LD_INT 0
37644: PPUSH
// uc_side := 0 ;
37645: LD_ADDR_OWVAR 20
37649: PUSH
37650: LD_INT 0
37652: ST_TO_ADDR
// uc_nation := 0 ;
37653: LD_ADDR_OWVAR 21
37657: PUSH
37658: LD_INT 0
37660: ST_TO_ADDR
// hc_class := class_phororhacos ;
37661: LD_ADDR_OWVAR 28
37665: PUSH
37666: LD_INT 18
37668: ST_TO_ADDR
// hc_gallery :=  ;
37669: LD_ADDR_OWVAR 33
37673: PUSH
37674: LD_STRING 
37676: ST_TO_ADDR
// end ;
37677: LD_VAR 0 1
37681: RET
// export function PrepareHorse ( ) ; begin
37682: LD_INT 0
37684: PPUSH
// uc_side := 0 ;
37685: LD_ADDR_OWVAR 20
37689: PUSH
37690: LD_INT 0
37692: ST_TO_ADDR
// uc_nation := 0 ;
37693: LD_ADDR_OWVAR 21
37697: PUSH
37698: LD_INT 0
37700: ST_TO_ADDR
// hc_class := class_horse ;
37701: LD_ADDR_OWVAR 28
37705: PUSH
37706: LD_INT 21
37708: ST_TO_ADDR
// hc_gallery :=  ;
37709: LD_ADDR_OWVAR 33
37713: PUSH
37714: LD_STRING 
37716: ST_TO_ADDR
// end ;
37717: LD_VAR 0 1
37721: RET
// export function PrepareMastodont ( ) ; begin
37722: LD_INT 0
37724: PPUSH
// uc_side := 0 ;
37725: LD_ADDR_OWVAR 20
37729: PUSH
37730: LD_INT 0
37732: ST_TO_ADDR
// uc_nation := 0 ;
37733: LD_ADDR_OWVAR 21
37737: PUSH
37738: LD_INT 0
37740: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37741: LD_ADDR_OWVAR 37
37745: PUSH
37746: LD_INT 31
37748: ST_TO_ADDR
// vc_control := control_rider ;
37749: LD_ADDR_OWVAR 38
37753: PUSH
37754: LD_INT 4
37756: ST_TO_ADDR
// end ;
37757: LD_VAR 0 1
37761: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37762: LD_INT 0
37764: PPUSH
37765: PPUSH
37766: PPUSH
// uc_side = 0 ;
37767: LD_ADDR_OWVAR 20
37771: PUSH
37772: LD_INT 0
37774: ST_TO_ADDR
// uc_nation = 0 ;
37775: LD_ADDR_OWVAR 21
37779: PUSH
37780: LD_INT 0
37782: ST_TO_ADDR
// InitHc_All ( ) ;
37783: CALL_OW 584
// InitVc ;
37787: CALL_OW 20
// if mastodonts then
37791: LD_VAR 0 6
37795: IFFALSE 37862
// for i = 1 to mastodonts do
37797: LD_ADDR_VAR 0 11
37801: PUSH
37802: DOUBLE
37803: LD_INT 1
37805: DEC
37806: ST_TO_ADDR
37807: LD_VAR 0 6
37811: PUSH
37812: FOR_TO
37813: IFFALSE 37860
// begin vc_chassis := 31 ;
37815: LD_ADDR_OWVAR 37
37819: PUSH
37820: LD_INT 31
37822: ST_TO_ADDR
// vc_control := control_rider ;
37823: LD_ADDR_OWVAR 38
37827: PUSH
37828: LD_INT 4
37830: ST_TO_ADDR
// animal := CreateVehicle ;
37831: LD_ADDR_VAR 0 12
37835: PUSH
37836: CALL_OW 45
37840: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37841: LD_VAR 0 12
37845: PPUSH
37846: LD_VAR 0 8
37850: PPUSH
37851: LD_INT 0
37853: PPUSH
37854: CALL 39990 0 3
// end ;
37858: GO 37812
37860: POP
37861: POP
// if horses then
37862: LD_VAR 0 5
37866: IFFALSE 37933
// for i = 1 to horses do
37868: LD_ADDR_VAR 0 11
37872: PUSH
37873: DOUBLE
37874: LD_INT 1
37876: DEC
37877: ST_TO_ADDR
37878: LD_VAR 0 5
37882: PUSH
37883: FOR_TO
37884: IFFALSE 37931
// begin hc_class := 21 ;
37886: LD_ADDR_OWVAR 28
37890: PUSH
37891: LD_INT 21
37893: ST_TO_ADDR
// hc_gallery :=  ;
37894: LD_ADDR_OWVAR 33
37898: PUSH
37899: LD_STRING 
37901: ST_TO_ADDR
// animal := CreateHuman ;
37902: LD_ADDR_VAR 0 12
37906: PUSH
37907: CALL_OW 44
37911: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37912: LD_VAR 0 12
37916: PPUSH
37917: LD_VAR 0 8
37921: PPUSH
37922: LD_INT 0
37924: PPUSH
37925: CALL 39990 0 3
// end ;
37929: GO 37883
37931: POP
37932: POP
// if birds then
37933: LD_VAR 0 1
37937: IFFALSE 38004
// for i = 1 to birds do
37939: LD_ADDR_VAR 0 11
37943: PUSH
37944: DOUBLE
37945: LD_INT 1
37947: DEC
37948: ST_TO_ADDR
37949: LD_VAR 0 1
37953: PUSH
37954: FOR_TO
37955: IFFALSE 38002
// begin hc_class = 18 ;
37957: LD_ADDR_OWVAR 28
37961: PUSH
37962: LD_INT 18
37964: ST_TO_ADDR
// hc_gallery =  ;
37965: LD_ADDR_OWVAR 33
37969: PUSH
37970: LD_STRING 
37972: ST_TO_ADDR
// animal := CreateHuman ;
37973: LD_ADDR_VAR 0 12
37977: PUSH
37978: CALL_OW 44
37982: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37983: LD_VAR 0 12
37987: PPUSH
37988: LD_VAR 0 8
37992: PPUSH
37993: LD_INT 0
37995: PPUSH
37996: CALL 39990 0 3
// end ;
38000: GO 37954
38002: POP
38003: POP
// if tigers then
38004: LD_VAR 0 2
38008: IFFALSE 38092
// for i = 1 to tigers do
38010: LD_ADDR_VAR 0 11
38014: PUSH
38015: DOUBLE
38016: LD_INT 1
38018: DEC
38019: ST_TO_ADDR
38020: LD_VAR 0 2
38024: PUSH
38025: FOR_TO
38026: IFFALSE 38090
// begin hc_class = class_tiger ;
38028: LD_ADDR_OWVAR 28
38032: PUSH
38033: LD_INT 14
38035: ST_TO_ADDR
// hc_gallery =  ;
38036: LD_ADDR_OWVAR 33
38040: PUSH
38041: LD_STRING 
38043: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
38044: LD_ADDR_OWVAR 35
38048: PUSH
38049: LD_INT 7
38051: NEG
38052: PPUSH
38053: LD_INT 7
38055: PPUSH
38056: CALL_OW 12
38060: ST_TO_ADDR
// animal := CreateHuman ;
38061: LD_ADDR_VAR 0 12
38065: PUSH
38066: CALL_OW 44
38070: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38071: LD_VAR 0 12
38075: PPUSH
38076: LD_VAR 0 8
38080: PPUSH
38081: LD_INT 0
38083: PPUSH
38084: CALL 39990 0 3
// end ;
38088: GO 38025
38090: POP
38091: POP
// if apemans then
38092: LD_VAR 0 3
38096: IFFALSE 38219
// for i = 1 to apemans do
38098: LD_ADDR_VAR 0 11
38102: PUSH
38103: DOUBLE
38104: LD_INT 1
38106: DEC
38107: ST_TO_ADDR
38108: LD_VAR 0 3
38112: PUSH
38113: FOR_TO
38114: IFFALSE 38217
// begin hc_class = class_apeman ;
38116: LD_ADDR_OWVAR 28
38120: PUSH
38121: LD_INT 12
38123: ST_TO_ADDR
// hc_gallery =  ;
38124: LD_ADDR_OWVAR 33
38128: PUSH
38129: LD_STRING 
38131: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
38132: LD_ADDR_OWVAR 35
38136: PUSH
38137: LD_INT 2
38139: NEG
38140: PPUSH
38141: LD_INT 2
38143: PPUSH
38144: CALL_OW 12
38148: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38149: LD_ADDR_OWVAR 31
38153: PUSH
38154: LD_INT 1
38156: PPUSH
38157: LD_INT 3
38159: PPUSH
38160: CALL_OW 12
38164: PUSH
38165: LD_INT 1
38167: PPUSH
38168: LD_INT 3
38170: PPUSH
38171: CALL_OW 12
38175: PUSH
38176: LD_INT 0
38178: PUSH
38179: LD_INT 0
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: ST_TO_ADDR
// animal := CreateHuman ;
38188: LD_ADDR_VAR 0 12
38192: PUSH
38193: CALL_OW 44
38197: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38198: LD_VAR 0 12
38202: PPUSH
38203: LD_VAR 0 8
38207: PPUSH
38208: LD_INT 0
38210: PPUSH
38211: CALL 39990 0 3
// end ;
38215: GO 38113
38217: POP
38218: POP
// if enchidnas then
38219: LD_VAR 0 4
38223: IFFALSE 38290
// for i = 1 to enchidnas do
38225: LD_ADDR_VAR 0 11
38229: PUSH
38230: DOUBLE
38231: LD_INT 1
38233: DEC
38234: ST_TO_ADDR
38235: LD_VAR 0 4
38239: PUSH
38240: FOR_TO
38241: IFFALSE 38288
// begin hc_class = 13 ;
38243: LD_ADDR_OWVAR 28
38247: PUSH
38248: LD_INT 13
38250: ST_TO_ADDR
// hc_gallery =  ;
38251: LD_ADDR_OWVAR 33
38255: PUSH
38256: LD_STRING 
38258: ST_TO_ADDR
// animal := CreateHuman ;
38259: LD_ADDR_VAR 0 12
38263: PUSH
38264: CALL_OW 44
38268: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38269: LD_VAR 0 12
38273: PPUSH
38274: LD_VAR 0 8
38278: PPUSH
38279: LD_INT 0
38281: PPUSH
38282: CALL 39990 0 3
// end ;
38286: GO 38240
38288: POP
38289: POP
// if fishes then
38290: LD_VAR 0 7
38294: IFFALSE 38361
// for i = 1 to fishes do
38296: LD_ADDR_VAR 0 11
38300: PUSH
38301: DOUBLE
38302: LD_INT 1
38304: DEC
38305: ST_TO_ADDR
38306: LD_VAR 0 7
38310: PUSH
38311: FOR_TO
38312: IFFALSE 38359
// begin hc_class = 20 ;
38314: LD_ADDR_OWVAR 28
38318: PUSH
38319: LD_INT 20
38321: ST_TO_ADDR
// hc_gallery =  ;
38322: LD_ADDR_OWVAR 33
38326: PUSH
38327: LD_STRING 
38329: ST_TO_ADDR
// animal := CreateHuman ;
38330: LD_ADDR_VAR 0 12
38334: PUSH
38335: CALL_OW 44
38339: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
38340: LD_VAR 0 12
38344: PPUSH
38345: LD_VAR 0 9
38349: PPUSH
38350: LD_INT 0
38352: PPUSH
38353: CALL 39990 0 3
// end ;
38357: GO 38311
38359: POP
38360: POP
// end ;
38361: LD_VAR 0 10
38365: RET
// export function WantHeal ( sci , unit ) ; begin
38366: LD_INT 0
38368: PPUSH
// if GetTaskList ( sci ) > 0 then
38369: LD_VAR 0 1
38373: PPUSH
38374: CALL_OW 437
38378: PUSH
38379: LD_INT 0
38381: GREATER
38382: IFFALSE 38452
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38384: LD_VAR 0 1
38388: PPUSH
38389: CALL_OW 437
38393: PUSH
38394: LD_INT 1
38396: ARRAY
38397: PUSH
38398: LD_INT 1
38400: ARRAY
38401: PUSH
38402: LD_STRING l
38404: EQUAL
38405: PUSH
38406: LD_VAR 0 1
38410: PPUSH
38411: CALL_OW 437
38415: PUSH
38416: LD_INT 1
38418: ARRAY
38419: PUSH
38420: LD_INT 4
38422: ARRAY
38423: PUSH
38424: LD_VAR 0 2
38428: EQUAL
38429: AND
38430: IFFALSE 38442
// result := true else
38432: LD_ADDR_VAR 0 3
38436: PUSH
38437: LD_INT 1
38439: ST_TO_ADDR
38440: GO 38450
// result := false ;
38442: LD_ADDR_VAR 0 3
38446: PUSH
38447: LD_INT 0
38449: ST_TO_ADDR
// end else
38450: GO 38460
// result := false ;
38452: LD_ADDR_VAR 0 3
38456: PUSH
38457: LD_INT 0
38459: ST_TO_ADDR
// end ;
38460: LD_VAR 0 3
38464: RET
// export function HealTarget ( sci ) ; begin
38465: LD_INT 0
38467: PPUSH
// if not sci then
38468: LD_VAR 0 1
38472: NOT
38473: IFFALSE 38477
// exit ;
38475: GO 38542
// result := 0 ;
38477: LD_ADDR_VAR 0 2
38481: PUSH
38482: LD_INT 0
38484: ST_TO_ADDR
// if GetTaskList ( sci ) then
38485: LD_VAR 0 1
38489: PPUSH
38490: CALL_OW 437
38494: IFFALSE 38542
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38496: LD_VAR 0 1
38500: PPUSH
38501: CALL_OW 437
38505: PUSH
38506: LD_INT 1
38508: ARRAY
38509: PUSH
38510: LD_INT 1
38512: ARRAY
38513: PUSH
38514: LD_STRING l
38516: EQUAL
38517: IFFALSE 38542
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38519: LD_ADDR_VAR 0 2
38523: PUSH
38524: LD_VAR 0 1
38528: PPUSH
38529: CALL_OW 437
38533: PUSH
38534: LD_INT 1
38536: ARRAY
38537: PUSH
38538: LD_INT 4
38540: ARRAY
38541: ST_TO_ADDR
// end ;
38542: LD_VAR 0 2
38546: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38547: LD_INT 0
38549: PPUSH
38550: PPUSH
38551: PPUSH
38552: PPUSH
// if not base_units then
38553: LD_VAR 0 1
38557: NOT
38558: IFFALSE 38562
// exit ;
38560: GO 38649
// result := false ;
38562: LD_ADDR_VAR 0 2
38566: PUSH
38567: LD_INT 0
38569: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38570: LD_ADDR_VAR 0 5
38574: PUSH
38575: LD_VAR 0 1
38579: PPUSH
38580: LD_INT 21
38582: PUSH
38583: LD_INT 3
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: PPUSH
38590: CALL_OW 72
38594: ST_TO_ADDR
// if not tmp then
38595: LD_VAR 0 5
38599: NOT
38600: IFFALSE 38604
// exit ;
38602: GO 38649
// for i in tmp do
38604: LD_ADDR_VAR 0 3
38608: PUSH
38609: LD_VAR 0 5
38613: PUSH
38614: FOR_IN
38615: IFFALSE 38647
// begin result := EnemyInRange ( i , 22 ) ;
38617: LD_ADDR_VAR 0 2
38621: PUSH
38622: LD_VAR 0 3
38626: PPUSH
38627: LD_INT 22
38629: PPUSH
38630: CALL 36236 0 2
38634: ST_TO_ADDR
// if result then
38635: LD_VAR 0 2
38639: IFFALSE 38645
// exit ;
38641: POP
38642: POP
38643: GO 38649
// end ;
38645: GO 38614
38647: POP
38648: POP
// end ;
38649: LD_VAR 0 2
38653: RET
// export function FilterByTag ( units , tag ) ; begin
38654: LD_INT 0
38656: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38657: LD_ADDR_VAR 0 3
38661: PUSH
38662: LD_VAR 0 1
38666: PPUSH
38667: LD_INT 120
38669: PUSH
38670: LD_VAR 0 2
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PPUSH
38679: CALL_OW 72
38683: ST_TO_ADDR
// end ;
38684: LD_VAR 0 3
38688: RET
// export function IsDriver ( un ) ; begin
38689: LD_INT 0
38691: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38692: LD_ADDR_VAR 0 2
38696: PUSH
38697: LD_VAR 0 1
38701: PUSH
38702: LD_INT 55
38704: PUSH
38705: EMPTY
38706: LIST
38707: PPUSH
38708: CALL_OW 69
38712: IN
38713: ST_TO_ADDR
// end ;
38714: LD_VAR 0 2
38718: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38719: LD_INT 0
38721: PPUSH
38722: PPUSH
// list := [ ] ;
38723: LD_ADDR_VAR 0 5
38727: PUSH
38728: EMPTY
38729: ST_TO_ADDR
// case d of 0 :
38730: LD_VAR 0 3
38734: PUSH
38735: LD_INT 0
38737: DOUBLE
38738: EQUAL
38739: IFTRUE 38743
38741: GO 38876
38743: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38744: LD_ADDR_VAR 0 5
38748: PUSH
38749: LD_VAR 0 1
38753: PUSH
38754: LD_INT 4
38756: MINUS
38757: PUSH
38758: LD_VAR 0 2
38762: PUSH
38763: LD_INT 4
38765: MINUS
38766: PUSH
38767: LD_INT 2
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: LIST
38774: PUSH
38775: LD_VAR 0 1
38779: PUSH
38780: LD_INT 3
38782: MINUS
38783: PUSH
38784: LD_VAR 0 2
38788: PUSH
38789: LD_INT 1
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: LIST
38796: PUSH
38797: LD_VAR 0 1
38801: PUSH
38802: LD_INT 4
38804: PLUS
38805: PUSH
38806: LD_VAR 0 2
38810: PUSH
38811: LD_INT 4
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: LIST
38818: PUSH
38819: LD_VAR 0 1
38823: PUSH
38824: LD_INT 3
38826: PLUS
38827: PUSH
38828: LD_VAR 0 2
38832: PUSH
38833: LD_INT 3
38835: PLUS
38836: PUSH
38837: LD_INT 5
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: LIST
38844: PUSH
38845: LD_VAR 0 1
38849: PUSH
38850: LD_VAR 0 2
38854: PUSH
38855: LD_INT 4
38857: PLUS
38858: PUSH
38859: LD_INT 0
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: LIST
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: LIST
38871: LIST
38872: LIST
38873: ST_TO_ADDR
// end ; 1 :
38874: GO 39574
38876: LD_INT 1
38878: DOUBLE
38879: EQUAL
38880: IFTRUE 38884
38882: GO 39017
38884: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38885: LD_ADDR_VAR 0 5
38889: PUSH
38890: LD_VAR 0 1
38894: PUSH
38895: LD_VAR 0 2
38899: PUSH
38900: LD_INT 4
38902: MINUS
38903: PUSH
38904: LD_INT 3
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: LIST
38911: PUSH
38912: LD_VAR 0 1
38916: PUSH
38917: LD_INT 3
38919: MINUS
38920: PUSH
38921: LD_VAR 0 2
38925: PUSH
38926: LD_INT 3
38928: MINUS
38929: PUSH
38930: LD_INT 2
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: LIST
38937: PUSH
38938: LD_VAR 0 1
38942: PUSH
38943: LD_INT 4
38945: MINUS
38946: PUSH
38947: LD_VAR 0 2
38951: PUSH
38952: LD_INT 1
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: LIST
38959: PUSH
38960: LD_VAR 0 1
38964: PUSH
38965: LD_VAR 0 2
38969: PUSH
38970: LD_INT 3
38972: PLUS
38973: PUSH
38974: LD_INT 0
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: LIST
38981: PUSH
38982: LD_VAR 0 1
38986: PUSH
38987: LD_INT 4
38989: PLUS
38990: PUSH
38991: LD_VAR 0 2
38995: PUSH
38996: LD_INT 4
38998: PLUS
38999: PUSH
39000: LD_INT 5
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: LIST
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: ST_TO_ADDR
// end ; 2 :
39015: GO 39574
39017: LD_INT 2
39019: DOUBLE
39020: EQUAL
39021: IFTRUE 39025
39023: GO 39154
39025: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
39026: LD_ADDR_VAR 0 5
39030: PUSH
39031: LD_VAR 0 1
39035: PUSH
39036: LD_VAR 0 2
39040: PUSH
39041: LD_INT 3
39043: MINUS
39044: PUSH
39045: LD_INT 3
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: LIST
39052: PUSH
39053: LD_VAR 0 1
39057: PUSH
39058: LD_INT 4
39060: PLUS
39061: PUSH
39062: LD_VAR 0 2
39066: PUSH
39067: LD_INT 4
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: LIST
39074: PUSH
39075: LD_VAR 0 1
39079: PUSH
39080: LD_VAR 0 2
39084: PUSH
39085: LD_INT 4
39087: PLUS
39088: PUSH
39089: LD_INT 0
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: LIST
39096: PUSH
39097: LD_VAR 0 1
39101: PUSH
39102: LD_INT 3
39104: MINUS
39105: PUSH
39106: LD_VAR 0 2
39110: PUSH
39111: LD_INT 1
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: LIST
39118: PUSH
39119: LD_VAR 0 1
39123: PUSH
39124: LD_INT 4
39126: MINUS
39127: PUSH
39128: LD_VAR 0 2
39132: PUSH
39133: LD_INT 4
39135: MINUS
39136: PUSH
39137: LD_INT 2
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: LIST
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: ST_TO_ADDR
// end ; 3 :
39152: GO 39574
39154: LD_INT 3
39156: DOUBLE
39157: EQUAL
39158: IFTRUE 39162
39160: GO 39295
39162: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39163: LD_ADDR_VAR 0 5
39167: PUSH
39168: LD_VAR 0 1
39172: PUSH
39173: LD_INT 3
39175: PLUS
39176: PUSH
39177: LD_VAR 0 2
39181: PUSH
39182: LD_INT 4
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: LIST
39189: PUSH
39190: LD_VAR 0 1
39194: PUSH
39195: LD_INT 4
39197: PLUS
39198: PUSH
39199: LD_VAR 0 2
39203: PUSH
39204: LD_INT 4
39206: PLUS
39207: PUSH
39208: LD_INT 5
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: LIST
39215: PUSH
39216: LD_VAR 0 1
39220: PUSH
39221: LD_INT 4
39223: MINUS
39224: PUSH
39225: LD_VAR 0 2
39229: PUSH
39230: LD_INT 1
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: LIST
39237: PUSH
39238: LD_VAR 0 1
39242: PUSH
39243: LD_VAR 0 2
39247: PUSH
39248: LD_INT 4
39250: MINUS
39251: PUSH
39252: LD_INT 3
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: LIST
39259: PUSH
39260: LD_VAR 0 1
39264: PUSH
39265: LD_INT 3
39267: MINUS
39268: PUSH
39269: LD_VAR 0 2
39273: PUSH
39274: LD_INT 3
39276: MINUS
39277: PUSH
39278: LD_INT 2
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: LIST
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: ST_TO_ADDR
// end ; 4 :
39293: GO 39574
39295: LD_INT 4
39297: DOUBLE
39298: EQUAL
39299: IFTRUE 39303
39301: GO 39436
39303: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
39304: LD_ADDR_VAR 0 5
39308: PUSH
39309: LD_VAR 0 1
39313: PUSH
39314: LD_VAR 0 2
39318: PUSH
39319: LD_INT 4
39321: PLUS
39322: PUSH
39323: LD_INT 0
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: LIST
39330: PUSH
39331: LD_VAR 0 1
39335: PUSH
39336: LD_INT 3
39338: PLUS
39339: PUSH
39340: LD_VAR 0 2
39344: PUSH
39345: LD_INT 3
39347: PLUS
39348: PUSH
39349: LD_INT 5
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: LIST
39356: PUSH
39357: LD_VAR 0 1
39361: PUSH
39362: LD_INT 4
39364: PLUS
39365: PUSH
39366: LD_VAR 0 2
39370: PUSH
39371: LD_INT 4
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: LIST
39378: PUSH
39379: LD_VAR 0 1
39383: PUSH
39384: LD_VAR 0 2
39388: PUSH
39389: LD_INT 3
39391: MINUS
39392: PUSH
39393: LD_INT 3
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: LIST
39400: PUSH
39401: LD_VAR 0 1
39405: PUSH
39406: LD_INT 4
39408: MINUS
39409: PUSH
39410: LD_VAR 0 2
39414: PUSH
39415: LD_INT 4
39417: MINUS
39418: PUSH
39419: LD_INT 2
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: LIST
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: LIST
39431: LIST
39432: LIST
39433: ST_TO_ADDR
// end ; 5 :
39434: GO 39574
39436: LD_INT 5
39438: DOUBLE
39439: EQUAL
39440: IFTRUE 39444
39442: GO 39573
39444: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39445: LD_ADDR_VAR 0 5
39449: PUSH
39450: LD_VAR 0 1
39454: PUSH
39455: LD_INT 4
39457: MINUS
39458: PUSH
39459: LD_VAR 0 2
39463: PUSH
39464: LD_INT 1
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: LIST
39471: PUSH
39472: LD_VAR 0 1
39476: PUSH
39477: LD_VAR 0 2
39481: PUSH
39482: LD_INT 4
39484: MINUS
39485: PUSH
39486: LD_INT 3
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: LIST
39493: PUSH
39494: LD_VAR 0 1
39498: PUSH
39499: LD_INT 4
39501: PLUS
39502: PUSH
39503: LD_VAR 0 2
39507: PUSH
39508: LD_INT 4
39510: PLUS
39511: PUSH
39512: LD_INT 5
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: LIST
39519: PUSH
39520: LD_VAR 0 1
39524: PUSH
39525: LD_INT 3
39527: PLUS
39528: PUSH
39529: LD_VAR 0 2
39533: PUSH
39534: LD_INT 4
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: LIST
39541: PUSH
39542: LD_VAR 0 1
39546: PUSH
39547: LD_VAR 0 2
39551: PUSH
39552: LD_INT 3
39554: PLUS
39555: PUSH
39556: LD_INT 0
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: LIST
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: ST_TO_ADDR
// end ; end ;
39571: GO 39574
39573: POP
// result := list ;
39574: LD_ADDR_VAR 0 4
39578: PUSH
39579: LD_VAR 0 5
39583: ST_TO_ADDR
// end ;
39584: LD_VAR 0 4
39588: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39589: LD_INT 0
39591: PPUSH
39592: PPUSH
39593: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39594: LD_VAR 0 1
39598: NOT
39599: PUSH
39600: LD_VAR 0 2
39604: PUSH
39605: LD_INT 1
39607: PUSH
39608: LD_INT 2
39610: PUSH
39611: LD_INT 3
39613: PUSH
39614: LD_INT 4
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: IN
39623: NOT
39624: OR
39625: IFFALSE 39629
// exit ;
39627: GO 39712
// tmp := [ ] ;
39629: LD_ADDR_VAR 0 5
39633: PUSH
39634: EMPTY
39635: ST_TO_ADDR
// for i in units do
39636: LD_ADDR_VAR 0 4
39640: PUSH
39641: LD_VAR 0 1
39645: PUSH
39646: FOR_IN
39647: IFFALSE 39681
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39649: LD_ADDR_VAR 0 5
39653: PUSH
39654: LD_VAR 0 5
39658: PPUSH
39659: LD_VAR 0 4
39663: PPUSH
39664: LD_VAR 0 2
39668: PPUSH
39669: CALL_OW 259
39673: PPUSH
39674: CALL 41073 0 2
39678: ST_TO_ADDR
39679: GO 39646
39681: POP
39682: POP
// if not tmp then
39683: LD_VAR 0 5
39687: NOT
39688: IFFALSE 39692
// exit ;
39690: GO 39712
// result := SortListByListDesc ( units , tmp ) ;
39692: LD_ADDR_VAR 0 3
39696: PUSH
39697: LD_VAR 0 1
39701: PPUSH
39702: LD_VAR 0 5
39706: PPUSH
39707: CALL_OW 77
39711: ST_TO_ADDR
// end ;
39712: LD_VAR 0 3
39716: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39717: LD_INT 0
39719: PPUSH
39720: PPUSH
39721: PPUSH
// result := false ;
39722: LD_ADDR_VAR 0 3
39726: PUSH
39727: LD_INT 0
39729: ST_TO_ADDR
// if not building then
39730: LD_VAR 0 2
39734: NOT
39735: IFFALSE 39739
// exit ;
39737: GO 39877
// x := GetX ( building ) ;
39739: LD_ADDR_VAR 0 4
39743: PUSH
39744: LD_VAR 0 2
39748: PPUSH
39749: CALL_OW 250
39753: ST_TO_ADDR
// y := GetY ( building ) ;
39754: LD_ADDR_VAR 0 5
39758: PUSH
39759: LD_VAR 0 2
39763: PPUSH
39764: CALL_OW 251
39768: ST_TO_ADDR
// if not x or not y then
39769: LD_VAR 0 4
39773: NOT
39774: PUSH
39775: LD_VAR 0 5
39779: NOT
39780: OR
39781: IFFALSE 39785
// exit ;
39783: GO 39877
// if GetTaskList ( unit ) then
39785: LD_VAR 0 1
39789: PPUSH
39790: CALL_OW 437
39794: IFFALSE 39877
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39796: LD_STRING e
39798: PUSH
39799: LD_VAR 0 1
39803: PPUSH
39804: CALL_OW 437
39808: PUSH
39809: LD_INT 1
39811: ARRAY
39812: PUSH
39813: LD_INT 1
39815: ARRAY
39816: EQUAL
39817: PUSH
39818: LD_VAR 0 4
39822: PUSH
39823: LD_VAR 0 1
39827: PPUSH
39828: CALL_OW 437
39832: PUSH
39833: LD_INT 1
39835: ARRAY
39836: PUSH
39837: LD_INT 2
39839: ARRAY
39840: EQUAL
39841: AND
39842: PUSH
39843: LD_VAR 0 5
39847: PUSH
39848: LD_VAR 0 1
39852: PPUSH
39853: CALL_OW 437
39857: PUSH
39858: LD_INT 1
39860: ARRAY
39861: PUSH
39862: LD_INT 3
39864: ARRAY
39865: EQUAL
39866: AND
39867: IFFALSE 39877
// result := true end ;
39869: LD_ADDR_VAR 0 3
39873: PUSH
39874: LD_INT 1
39876: ST_TO_ADDR
// end ;
39877: LD_VAR 0 3
39881: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39882: LD_INT 0
39884: PPUSH
// result := false ;
39885: LD_ADDR_VAR 0 4
39889: PUSH
39890: LD_INT 0
39892: ST_TO_ADDR
// if GetTaskList ( unit ) then
39893: LD_VAR 0 1
39897: PPUSH
39898: CALL_OW 437
39902: IFFALSE 39985
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39904: LD_STRING M
39906: PUSH
39907: LD_VAR 0 1
39911: PPUSH
39912: CALL_OW 437
39916: PUSH
39917: LD_INT 1
39919: ARRAY
39920: PUSH
39921: LD_INT 1
39923: ARRAY
39924: EQUAL
39925: PUSH
39926: LD_VAR 0 2
39930: PUSH
39931: LD_VAR 0 1
39935: PPUSH
39936: CALL_OW 437
39940: PUSH
39941: LD_INT 1
39943: ARRAY
39944: PUSH
39945: LD_INT 2
39947: ARRAY
39948: EQUAL
39949: AND
39950: PUSH
39951: LD_VAR 0 3
39955: PUSH
39956: LD_VAR 0 1
39960: PPUSH
39961: CALL_OW 437
39965: PUSH
39966: LD_INT 1
39968: ARRAY
39969: PUSH
39970: LD_INT 3
39972: ARRAY
39973: EQUAL
39974: AND
39975: IFFALSE 39985
// result := true ;
39977: LD_ADDR_VAR 0 4
39981: PUSH
39982: LD_INT 1
39984: ST_TO_ADDR
// end ; end ;
39985: LD_VAR 0 4
39989: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39990: LD_INT 0
39992: PPUSH
39993: PPUSH
39994: PPUSH
39995: PPUSH
// if not unit or not area then
39996: LD_VAR 0 1
40000: NOT
40001: PUSH
40002: LD_VAR 0 2
40006: NOT
40007: OR
40008: IFFALSE 40012
// exit ;
40010: GO 40176
// tmp := AreaToList ( area , i ) ;
40012: LD_ADDR_VAR 0 6
40016: PUSH
40017: LD_VAR 0 2
40021: PPUSH
40022: LD_VAR 0 5
40026: PPUSH
40027: CALL_OW 517
40031: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
40032: LD_ADDR_VAR 0 5
40036: PUSH
40037: DOUBLE
40038: LD_INT 1
40040: DEC
40041: ST_TO_ADDR
40042: LD_VAR 0 6
40046: PUSH
40047: LD_INT 1
40049: ARRAY
40050: PUSH
40051: FOR_TO
40052: IFFALSE 40174
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
40054: LD_ADDR_VAR 0 7
40058: PUSH
40059: LD_VAR 0 6
40063: PUSH
40064: LD_INT 1
40066: ARRAY
40067: PUSH
40068: LD_VAR 0 5
40072: ARRAY
40073: PUSH
40074: LD_VAR 0 6
40078: PUSH
40079: LD_INT 2
40081: ARRAY
40082: PUSH
40083: LD_VAR 0 5
40087: ARRAY
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
40093: LD_VAR 0 7
40097: PUSH
40098: LD_INT 1
40100: ARRAY
40101: PPUSH
40102: LD_VAR 0 7
40106: PUSH
40107: LD_INT 2
40109: ARRAY
40110: PPUSH
40111: CALL_OW 428
40115: PUSH
40116: LD_INT 0
40118: EQUAL
40119: IFFALSE 40172
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
40121: LD_VAR 0 1
40125: PPUSH
40126: LD_VAR 0 7
40130: PUSH
40131: LD_INT 1
40133: ARRAY
40134: PPUSH
40135: LD_VAR 0 7
40139: PUSH
40140: LD_INT 2
40142: ARRAY
40143: PPUSH
40144: LD_VAR 0 3
40148: PPUSH
40149: CALL_OW 48
// result := IsPlaced ( unit ) ;
40153: LD_ADDR_VAR 0 4
40157: PUSH
40158: LD_VAR 0 1
40162: PPUSH
40163: CALL_OW 305
40167: ST_TO_ADDR
// exit ;
40168: POP
40169: POP
40170: GO 40176
// end ; end ;
40172: GO 40051
40174: POP
40175: POP
// end ;
40176: LD_VAR 0 4
40180: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40181: LD_INT 0
40183: PPUSH
40184: PPUSH
40185: PPUSH
// if not side or side > 8 then
40186: LD_VAR 0 1
40190: NOT
40191: PUSH
40192: LD_VAR 0 1
40196: PUSH
40197: LD_INT 8
40199: GREATER
40200: OR
40201: IFFALSE 40205
// exit ;
40203: GO 40392
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40205: LD_ADDR_VAR 0 4
40209: PUSH
40210: LD_INT 22
40212: PUSH
40213: LD_VAR 0 1
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 21
40224: PUSH
40225: LD_INT 3
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PPUSH
40236: CALL_OW 69
40240: ST_TO_ADDR
// if not tmp then
40241: LD_VAR 0 4
40245: NOT
40246: IFFALSE 40250
// exit ;
40248: GO 40392
// enable_addtolog := true ;
40250: LD_ADDR_OWVAR 81
40254: PUSH
40255: LD_INT 1
40257: ST_TO_ADDR
// AddToLog ( [ ) ;
40258: LD_STRING [
40260: PPUSH
40261: CALL_OW 561
// for i in tmp do
40265: LD_ADDR_VAR 0 3
40269: PUSH
40270: LD_VAR 0 4
40274: PUSH
40275: FOR_IN
40276: IFFALSE 40383
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
40278: LD_STRING [
40280: PUSH
40281: LD_VAR 0 3
40285: PPUSH
40286: CALL_OW 266
40290: STR
40291: PUSH
40292: LD_STRING , 
40294: STR
40295: PUSH
40296: LD_VAR 0 3
40300: PPUSH
40301: CALL_OW 250
40305: STR
40306: PUSH
40307: LD_STRING , 
40309: STR
40310: PUSH
40311: LD_VAR 0 3
40315: PPUSH
40316: CALL_OW 251
40320: STR
40321: PUSH
40322: LD_STRING , 
40324: STR
40325: PUSH
40326: LD_VAR 0 3
40330: PPUSH
40331: CALL_OW 254
40335: STR
40336: PUSH
40337: LD_STRING , 
40339: STR
40340: PUSH
40341: LD_VAR 0 3
40345: PPUSH
40346: LD_INT 1
40348: PPUSH
40349: CALL_OW 268
40353: STR
40354: PUSH
40355: LD_STRING , 
40357: STR
40358: PUSH
40359: LD_VAR 0 3
40363: PPUSH
40364: LD_INT 2
40366: PPUSH
40367: CALL_OW 268
40371: STR
40372: PUSH
40373: LD_STRING ],
40375: STR
40376: PPUSH
40377: CALL_OW 561
// end ;
40381: GO 40275
40383: POP
40384: POP
// AddToLog ( ]; ) ;
40385: LD_STRING ];
40387: PPUSH
40388: CALL_OW 561
// end ;
40392: LD_VAR 0 2
40396: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40397: LD_INT 0
40399: PPUSH
40400: PPUSH
40401: PPUSH
40402: PPUSH
40403: PPUSH
// if not area or not rate or not max then
40404: LD_VAR 0 1
40408: NOT
40409: PUSH
40410: LD_VAR 0 2
40414: NOT
40415: OR
40416: PUSH
40417: LD_VAR 0 4
40421: NOT
40422: OR
40423: IFFALSE 40427
// exit ;
40425: GO 40616
// while 1 do
40427: LD_INT 1
40429: IFFALSE 40616
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40431: LD_ADDR_VAR 0 9
40435: PUSH
40436: LD_VAR 0 1
40440: PPUSH
40441: LD_INT 1
40443: PPUSH
40444: CALL_OW 287
40448: PUSH
40449: LD_INT 10
40451: MUL
40452: ST_TO_ADDR
// r := rate / 10 ;
40453: LD_ADDR_VAR 0 7
40457: PUSH
40458: LD_VAR 0 2
40462: PUSH
40463: LD_INT 10
40465: DIVREAL
40466: ST_TO_ADDR
// time := 1 1$00 ;
40467: LD_ADDR_VAR 0 8
40471: PUSH
40472: LD_INT 2100
40474: ST_TO_ADDR
// if amount < min then
40475: LD_VAR 0 9
40479: PUSH
40480: LD_VAR 0 3
40484: LESS
40485: IFFALSE 40503
// r := r * 2 else
40487: LD_ADDR_VAR 0 7
40491: PUSH
40492: LD_VAR 0 7
40496: PUSH
40497: LD_INT 2
40499: MUL
40500: ST_TO_ADDR
40501: GO 40529
// if amount > max then
40503: LD_VAR 0 9
40507: PUSH
40508: LD_VAR 0 4
40512: GREATER
40513: IFFALSE 40529
// r := r / 2 ;
40515: LD_ADDR_VAR 0 7
40519: PUSH
40520: LD_VAR 0 7
40524: PUSH
40525: LD_INT 2
40527: DIVREAL
40528: ST_TO_ADDR
// time := time / r ;
40529: LD_ADDR_VAR 0 8
40533: PUSH
40534: LD_VAR 0 8
40538: PUSH
40539: LD_VAR 0 7
40543: DIVREAL
40544: ST_TO_ADDR
// if time < 0 then
40545: LD_VAR 0 8
40549: PUSH
40550: LD_INT 0
40552: LESS
40553: IFFALSE 40570
// time := time * - 1 ;
40555: LD_ADDR_VAR 0 8
40559: PUSH
40560: LD_VAR 0 8
40564: PUSH
40565: LD_INT 1
40567: NEG
40568: MUL
40569: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40570: LD_VAR 0 8
40574: PUSH
40575: LD_INT 35
40577: PPUSH
40578: LD_INT 875
40580: PPUSH
40581: CALL_OW 12
40585: PLUS
40586: PPUSH
40587: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40591: LD_INT 1
40593: PPUSH
40594: LD_INT 5
40596: PPUSH
40597: CALL_OW 12
40601: PPUSH
40602: LD_VAR 0 1
40606: PPUSH
40607: LD_INT 1
40609: PPUSH
40610: CALL_OW 55
// end ;
40614: GO 40427
// end ;
40616: LD_VAR 0 5
40620: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40621: LD_INT 0
40623: PPUSH
40624: PPUSH
40625: PPUSH
40626: PPUSH
40627: PPUSH
40628: PPUSH
40629: PPUSH
40630: PPUSH
// if not turrets or not factories then
40631: LD_VAR 0 1
40635: NOT
40636: PUSH
40637: LD_VAR 0 2
40641: NOT
40642: OR
40643: IFFALSE 40647
// exit ;
40645: GO 40954
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40647: LD_ADDR_VAR 0 10
40651: PUSH
40652: LD_INT 5
40654: PUSH
40655: LD_INT 6
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: LD_INT 2
40664: PUSH
40665: LD_INT 4
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 3
40674: PUSH
40675: LD_INT 5
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 24
40689: PUSH
40690: LD_INT 25
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: LD_INT 23
40699: PUSH
40700: LD_INT 27
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 42
40713: PUSH
40714: LD_INT 43
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 44
40723: PUSH
40724: LD_INT 46
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 45
40733: PUSH
40734: LD_INT 47
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: LIST
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: LIST
40750: ST_TO_ADDR
// result := [ ] ;
40751: LD_ADDR_VAR 0 3
40755: PUSH
40756: EMPTY
40757: ST_TO_ADDR
// for i in turrets do
40758: LD_ADDR_VAR 0 4
40762: PUSH
40763: LD_VAR 0 1
40767: PUSH
40768: FOR_IN
40769: IFFALSE 40952
// begin nat := GetNation ( i ) ;
40771: LD_ADDR_VAR 0 7
40775: PUSH
40776: LD_VAR 0 4
40780: PPUSH
40781: CALL_OW 248
40785: ST_TO_ADDR
// weapon := 0 ;
40786: LD_ADDR_VAR 0 8
40790: PUSH
40791: LD_INT 0
40793: ST_TO_ADDR
// if not nat then
40794: LD_VAR 0 7
40798: NOT
40799: IFFALSE 40803
// continue ;
40801: GO 40768
// for j in list [ nat ] do
40803: LD_ADDR_VAR 0 5
40807: PUSH
40808: LD_VAR 0 10
40812: PUSH
40813: LD_VAR 0 7
40817: ARRAY
40818: PUSH
40819: FOR_IN
40820: IFFALSE 40861
// if GetBWeapon ( i ) = j [ 1 ] then
40822: LD_VAR 0 4
40826: PPUSH
40827: CALL_OW 269
40831: PUSH
40832: LD_VAR 0 5
40836: PUSH
40837: LD_INT 1
40839: ARRAY
40840: EQUAL
40841: IFFALSE 40859
// begin weapon := j [ 2 ] ;
40843: LD_ADDR_VAR 0 8
40847: PUSH
40848: LD_VAR 0 5
40852: PUSH
40853: LD_INT 2
40855: ARRAY
40856: ST_TO_ADDR
// break ;
40857: GO 40861
// end ;
40859: GO 40819
40861: POP
40862: POP
// if not weapon then
40863: LD_VAR 0 8
40867: NOT
40868: IFFALSE 40872
// continue ;
40870: GO 40768
// for k in factories do
40872: LD_ADDR_VAR 0 6
40876: PUSH
40877: LD_VAR 0 2
40881: PUSH
40882: FOR_IN
40883: IFFALSE 40948
// begin weapons := AvailableWeaponList ( k ) ;
40885: LD_ADDR_VAR 0 9
40889: PUSH
40890: LD_VAR 0 6
40894: PPUSH
40895: CALL_OW 478
40899: ST_TO_ADDR
// if not weapons then
40900: LD_VAR 0 9
40904: NOT
40905: IFFALSE 40909
// continue ;
40907: GO 40882
// if weapon in weapons then
40909: LD_VAR 0 8
40913: PUSH
40914: LD_VAR 0 9
40918: IN
40919: IFFALSE 40946
// begin result := [ i , weapon ] ;
40921: LD_ADDR_VAR 0 3
40925: PUSH
40926: LD_VAR 0 4
40930: PUSH
40931: LD_VAR 0 8
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: ST_TO_ADDR
// exit ;
40940: POP
40941: POP
40942: POP
40943: POP
40944: GO 40954
// end ; end ;
40946: GO 40882
40948: POP
40949: POP
// end ;
40950: GO 40768
40952: POP
40953: POP
// end ;
40954: LD_VAR 0 3
40958: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40959: LD_INT 0
40961: PPUSH
// if not side or side > 8 then
40962: LD_VAR 0 3
40966: NOT
40967: PUSH
40968: LD_VAR 0 3
40972: PUSH
40973: LD_INT 8
40975: GREATER
40976: OR
40977: IFFALSE 40981
// exit ;
40979: GO 41040
// if not range then
40981: LD_VAR 0 4
40985: NOT
40986: IFFALSE 40997
// range := - 12 ;
40988: LD_ADDR_VAR 0 4
40992: PUSH
40993: LD_INT 12
40995: NEG
40996: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40997: LD_VAR 0 1
41001: PPUSH
41002: LD_VAR 0 2
41006: PPUSH
41007: LD_VAR 0 3
41011: PPUSH
41012: LD_VAR 0 4
41016: PPUSH
41017: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
41021: LD_VAR 0 1
41025: PPUSH
41026: LD_VAR 0 2
41030: PPUSH
41031: LD_VAR 0 3
41035: PPUSH
41036: CALL_OW 331
// end ;
41040: LD_VAR 0 5
41044: RET
// export function Video ( mode ) ; begin
41045: LD_INT 0
41047: PPUSH
// ingame_video = mode ;
41048: LD_ADDR_OWVAR 52
41052: PUSH
41053: LD_VAR 0 1
41057: ST_TO_ADDR
// interface_hidden = mode ;
41058: LD_ADDR_OWVAR 54
41062: PUSH
41063: LD_VAR 0 1
41067: ST_TO_ADDR
// end ;
41068: LD_VAR 0 2
41072: RET
// export function Join ( array , element ) ; begin
41073: LD_INT 0
41075: PPUSH
// result := Replace ( array , array + 1 , element ) ;
41076: LD_ADDR_VAR 0 3
41080: PUSH
41081: LD_VAR 0 1
41085: PPUSH
41086: LD_VAR 0 1
41090: PUSH
41091: LD_INT 1
41093: PLUS
41094: PPUSH
41095: LD_VAR 0 2
41099: PPUSH
41100: CALL_OW 1
41104: ST_TO_ADDR
// end ;
41105: LD_VAR 0 3
41109: RET
// export function JoinUnion ( array , element ) ; begin
41110: LD_INT 0
41112: PPUSH
// result := array union element ;
41113: LD_ADDR_VAR 0 3
41117: PUSH
41118: LD_VAR 0 1
41122: PUSH
41123: LD_VAR 0 2
41127: UNION
41128: ST_TO_ADDR
// end ;
41129: LD_VAR 0 3
41133: RET
// export function GetBehemoths ( side ) ; begin
41134: LD_INT 0
41136: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
41137: LD_ADDR_VAR 0 2
41141: PUSH
41142: LD_INT 22
41144: PUSH
41145: LD_VAR 0 1
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: LD_INT 31
41156: PUSH
41157: LD_INT 25
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: PPUSH
41168: CALL_OW 69
41172: ST_TO_ADDR
// end ;
41173: LD_VAR 0 2
41177: RET
// export function Shuffle ( array ) ; var i , index ; begin
41178: LD_INT 0
41180: PPUSH
41181: PPUSH
41182: PPUSH
// result := [ ] ;
41183: LD_ADDR_VAR 0 2
41187: PUSH
41188: EMPTY
41189: ST_TO_ADDR
// if not array then
41190: LD_VAR 0 1
41194: NOT
41195: IFFALSE 41199
// exit ;
41197: GO 41298
// Randomize ;
41199: CALL_OW 10
// for i = array downto 1 do
41203: LD_ADDR_VAR 0 3
41207: PUSH
41208: DOUBLE
41209: LD_VAR 0 1
41213: INC
41214: ST_TO_ADDR
41215: LD_INT 1
41217: PUSH
41218: FOR_DOWNTO
41219: IFFALSE 41296
// begin index := rand ( 1 , array ) ;
41221: LD_ADDR_VAR 0 4
41225: PUSH
41226: LD_INT 1
41228: PPUSH
41229: LD_VAR 0 1
41233: PPUSH
41234: CALL_OW 12
41238: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41239: LD_ADDR_VAR 0 2
41243: PUSH
41244: LD_VAR 0 2
41248: PPUSH
41249: LD_VAR 0 2
41253: PUSH
41254: LD_INT 1
41256: PLUS
41257: PPUSH
41258: LD_VAR 0 1
41262: PUSH
41263: LD_VAR 0 4
41267: ARRAY
41268: PPUSH
41269: CALL_OW 2
41273: ST_TO_ADDR
// array := Delete ( array , index ) ;
41274: LD_ADDR_VAR 0 1
41278: PUSH
41279: LD_VAR 0 1
41283: PPUSH
41284: LD_VAR 0 4
41288: PPUSH
41289: CALL_OW 3
41293: ST_TO_ADDR
// end ;
41294: GO 41218
41296: POP
41297: POP
// end ;
41298: LD_VAR 0 2
41302: RET
// export function GetBaseMaterials ( base ) ; begin
41303: LD_INT 0
41305: PPUSH
// result := [ 0 , 0 , 0 ] ;
41306: LD_ADDR_VAR 0 2
41310: PUSH
41311: LD_INT 0
41313: PUSH
41314: LD_INT 0
41316: PUSH
41317: LD_INT 0
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: LIST
41324: ST_TO_ADDR
// if not base then
41325: LD_VAR 0 1
41329: NOT
41330: IFFALSE 41334
// exit ;
41332: GO 41383
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
41334: LD_ADDR_VAR 0 2
41338: PUSH
41339: LD_VAR 0 1
41343: PPUSH
41344: LD_INT 1
41346: PPUSH
41347: CALL_OW 275
41351: PUSH
41352: LD_VAR 0 1
41356: PPUSH
41357: LD_INT 2
41359: PPUSH
41360: CALL_OW 275
41364: PUSH
41365: LD_VAR 0 1
41369: PPUSH
41370: LD_INT 3
41372: PPUSH
41373: CALL_OW 275
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: LIST
41382: ST_TO_ADDR
// end ;
41383: LD_VAR 0 2
41387: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41388: LD_INT 0
41390: PPUSH
41391: PPUSH
// result := array ;
41392: LD_ADDR_VAR 0 3
41396: PUSH
41397: LD_VAR 0 1
41401: ST_TO_ADDR
// if size >= result then
41402: LD_VAR 0 2
41406: PUSH
41407: LD_VAR 0 3
41411: GREATEREQUAL
41412: IFFALSE 41416
// exit ;
41414: GO 41466
// if size then
41416: LD_VAR 0 2
41420: IFFALSE 41466
// for i := array downto size do
41422: LD_ADDR_VAR 0 4
41426: PUSH
41427: DOUBLE
41428: LD_VAR 0 1
41432: INC
41433: ST_TO_ADDR
41434: LD_VAR 0 2
41438: PUSH
41439: FOR_DOWNTO
41440: IFFALSE 41464
// result := Delete ( result , result ) ;
41442: LD_ADDR_VAR 0 3
41446: PUSH
41447: LD_VAR 0 3
41451: PPUSH
41452: LD_VAR 0 3
41456: PPUSH
41457: CALL_OW 3
41461: ST_TO_ADDR
41462: GO 41439
41464: POP
41465: POP
// end ;
41466: LD_VAR 0 3
41470: RET
// export function ComExit ( unit ) ; var tmp ; begin
41471: LD_INT 0
41473: PPUSH
41474: PPUSH
// if not IsInUnit ( unit ) then
41475: LD_VAR 0 1
41479: PPUSH
41480: CALL_OW 310
41484: NOT
41485: IFFALSE 41489
// exit ;
41487: GO 41549
// tmp := IsInUnit ( unit ) ;
41489: LD_ADDR_VAR 0 3
41493: PUSH
41494: LD_VAR 0 1
41498: PPUSH
41499: CALL_OW 310
41503: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41504: LD_VAR 0 3
41508: PPUSH
41509: CALL_OW 247
41513: PUSH
41514: LD_INT 2
41516: EQUAL
41517: IFFALSE 41530
// ComExitVehicle ( unit ) else
41519: LD_VAR 0 1
41523: PPUSH
41524: CALL_OW 121
41528: GO 41539
// ComExitBuilding ( unit ) ;
41530: LD_VAR 0 1
41534: PPUSH
41535: CALL_OW 122
// result := tmp ;
41539: LD_ADDR_VAR 0 2
41543: PUSH
41544: LD_VAR 0 3
41548: ST_TO_ADDR
// end ;
41549: LD_VAR 0 2
41553: RET
// export function ComExitAll ( units ) ; var i ; begin
41554: LD_INT 0
41556: PPUSH
41557: PPUSH
// if not units then
41558: LD_VAR 0 1
41562: NOT
41563: IFFALSE 41567
// exit ;
41565: GO 41593
// for i in units do
41567: LD_ADDR_VAR 0 3
41571: PUSH
41572: LD_VAR 0 1
41576: PUSH
41577: FOR_IN
41578: IFFALSE 41591
// ComExit ( i ) ;
41580: LD_VAR 0 3
41584: PPUSH
41585: CALL 41471 0 1
41589: GO 41577
41591: POP
41592: POP
// end ;
41593: LD_VAR 0 2
41597: RET
// export function ResetHc ; begin
41598: LD_INT 0
41600: PPUSH
// InitHc ;
41601: CALL_OW 19
// hc_importance := 0 ;
41605: LD_ADDR_OWVAR 32
41609: PUSH
41610: LD_INT 0
41612: ST_TO_ADDR
// end ;
41613: LD_VAR 0 1
41617: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41618: LD_INT 0
41620: PPUSH
41621: PPUSH
41622: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41623: LD_ADDR_VAR 0 6
41627: PUSH
41628: LD_VAR 0 1
41632: PUSH
41633: LD_VAR 0 3
41637: PLUS
41638: PUSH
41639: LD_INT 2
41641: DIV
41642: ST_TO_ADDR
// if _x < 0 then
41643: LD_VAR 0 6
41647: PUSH
41648: LD_INT 0
41650: LESS
41651: IFFALSE 41668
// _x := _x * - 1 ;
41653: LD_ADDR_VAR 0 6
41657: PUSH
41658: LD_VAR 0 6
41662: PUSH
41663: LD_INT 1
41665: NEG
41666: MUL
41667: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41668: LD_ADDR_VAR 0 7
41672: PUSH
41673: LD_VAR 0 2
41677: PUSH
41678: LD_VAR 0 4
41682: PLUS
41683: PUSH
41684: LD_INT 2
41686: DIV
41687: ST_TO_ADDR
// if _y < 0 then
41688: LD_VAR 0 7
41692: PUSH
41693: LD_INT 0
41695: LESS
41696: IFFALSE 41713
// _y := _y * - 1 ;
41698: LD_ADDR_VAR 0 7
41702: PUSH
41703: LD_VAR 0 7
41707: PUSH
41708: LD_INT 1
41710: NEG
41711: MUL
41712: ST_TO_ADDR
// result := [ _x , _y ] ;
41713: LD_ADDR_VAR 0 5
41717: PUSH
41718: LD_VAR 0 6
41722: PUSH
41723: LD_VAR 0 7
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: ST_TO_ADDR
// end ;
41732: LD_VAR 0 5
41736: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41737: LD_INT 0
41739: PPUSH
41740: PPUSH
41741: PPUSH
41742: PPUSH
// task := GetTaskList ( unit ) ;
41743: LD_ADDR_VAR 0 7
41747: PUSH
41748: LD_VAR 0 1
41752: PPUSH
41753: CALL_OW 437
41757: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41758: LD_VAR 0 7
41762: NOT
41763: PUSH
41764: LD_VAR 0 1
41768: PPUSH
41769: LD_VAR 0 2
41773: PPUSH
41774: CALL_OW 308
41778: NOT
41779: AND
41780: IFFALSE 41784
// exit ;
41782: GO 41902
// if IsInArea ( unit , area ) then
41784: LD_VAR 0 1
41788: PPUSH
41789: LD_VAR 0 2
41793: PPUSH
41794: CALL_OW 308
41798: IFFALSE 41816
// begin ComMoveToArea ( unit , goAway ) ;
41800: LD_VAR 0 1
41804: PPUSH
41805: LD_VAR 0 3
41809: PPUSH
41810: CALL_OW 113
// exit ;
41814: GO 41902
// end ; if task [ 1 ] [ 1 ] <> M then
41816: LD_VAR 0 7
41820: PUSH
41821: LD_INT 1
41823: ARRAY
41824: PUSH
41825: LD_INT 1
41827: ARRAY
41828: PUSH
41829: LD_STRING M
41831: NONEQUAL
41832: IFFALSE 41836
// exit ;
41834: GO 41902
// x := task [ 1 ] [ 2 ] ;
41836: LD_ADDR_VAR 0 5
41840: PUSH
41841: LD_VAR 0 7
41845: PUSH
41846: LD_INT 1
41848: ARRAY
41849: PUSH
41850: LD_INT 2
41852: ARRAY
41853: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41854: LD_ADDR_VAR 0 6
41858: PUSH
41859: LD_VAR 0 7
41863: PUSH
41864: LD_INT 1
41866: ARRAY
41867: PUSH
41868: LD_INT 3
41870: ARRAY
41871: ST_TO_ADDR
// if InArea ( x , y , area ) then
41872: LD_VAR 0 5
41876: PPUSH
41877: LD_VAR 0 6
41881: PPUSH
41882: LD_VAR 0 2
41886: PPUSH
41887: CALL_OW 309
41891: IFFALSE 41902
// ComStop ( unit ) ;
41893: LD_VAR 0 1
41897: PPUSH
41898: CALL_OW 141
// end ;
41902: LD_VAR 0 4
41906: RET
// export function Abs ( value ) ; begin
41907: LD_INT 0
41909: PPUSH
// result := value ;
41910: LD_ADDR_VAR 0 2
41914: PUSH
41915: LD_VAR 0 1
41919: ST_TO_ADDR
// if value < 0 then
41920: LD_VAR 0 1
41924: PUSH
41925: LD_INT 0
41927: LESS
41928: IFFALSE 41945
// result := value * - 1 ;
41930: LD_ADDR_VAR 0 2
41934: PUSH
41935: LD_VAR 0 1
41939: PUSH
41940: LD_INT 1
41942: NEG
41943: MUL
41944: ST_TO_ADDR
// end ;
41945: LD_VAR 0 2
41949: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41950: LD_INT 0
41952: PPUSH
41953: PPUSH
41954: PPUSH
41955: PPUSH
41956: PPUSH
41957: PPUSH
41958: PPUSH
41959: PPUSH
// if not unit or not building then
41960: LD_VAR 0 1
41964: NOT
41965: PUSH
41966: LD_VAR 0 2
41970: NOT
41971: OR
41972: IFFALSE 41976
// exit ;
41974: GO 42202
// x := GetX ( building ) ;
41976: LD_ADDR_VAR 0 4
41980: PUSH
41981: LD_VAR 0 2
41985: PPUSH
41986: CALL_OW 250
41990: ST_TO_ADDR
// y := GetY ( building ) ;
41991: LD_ADDR_VAR 0 6
41995: PUSH
41996: LD_VAR 0 2
42000: PPUSH
42001: CALL_OW 251
42005: ST_TO_ADDR
// d := GetDir ( building ) ;
42006: LD_ADDR_VAR 0 8
42010: PUSH
42011: LD_VAR 0 2
42015: PPUSH
42016: CALL_OW 254
42020: ST_TO_ADDR
// r := 4 ;
42021: LD_ADDR_VAR 0 9
42025: PUSH
42026: LD_INT 4
42028: ST_TO_ADDR
// for i := 1 to 5 do
42029: LD_ADDR_VAR 0 10
42033: PUSH
42034: DOUBLE
42035: LD_INT 1
42037: DEC
42038: ST_TO_ADDR
42039: LD_INT 5
42041: PUSH
42042: FOR_TO
42043: IFFALSE 42200
// begin _x := ShiftX ( x , d , r + i ) ;
42045: LD_ADDR_VAR 0 5
42049: PUSH
42050: LD_VAR 0 4
42054: PPUSH
42055: LD_VAR 0 8
42059: PPUSH
42060: LD_VAR 0 9
42064: PUSH
42065: LD_VAR 0 10
42069: PLUS
42070: PPUSH
42071: CALL_OW 272
42075: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
42076: LD_ADDR_VAR 0 7
42080: PUSH
42081: LD_VAR 0 6
42085: PPUSH
42086: LD_VAR 0 8
42090: PPUSH
42091: LD_VAR 0 9
42095: PUSH
42096: LD_VAR 0 10
42100: PLUS
42101: PPUSH
42102: CALL_OW 273
42106: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
42107: LD_VAR 0 5
42111: PPUSH
42112: LD_VAR 0 7
42116: PPUSH
42117: CALL_OW 488
42121: PUSH
42122: LD_VAR 0 5
42126: PPUSH
42127: LD_VAR 0 7
42131: PPUSH
42132: CALL_OW 428
42136: PPUSH
42137: CALL_OW 247
42141: PUSH
42142: LD_INT 3
42144: PUSH
42145: LD_INT 2
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: IN
42152: NOT
42153: AND
42154: IFFALSE 42198
// begin ComMoveXY ( unit , _x , _y ) ;
42156: LD_VAR 0 1
42160: PPUSH
42161: LD_VAR 0 5
42165: PPUSH
42166: LD_VAR 0 7
42170: PPUSH
42171: CALL_OW 111
// result := [ _x , _y ] ;
42175: LD_ADDR_VAR 0 3
42179: PUSH
42180: LD_VAR 0 5
42184: PUSH
42185: LD_VAR 0 7
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: ST_TO_ADDR
// exit ;
42194: POP
42195: POP
42196: GO 42202
// end ; end ;
42198: GO 42042
42200: POP
42201: POP
// end ;
42202: LD_VAR 0 3
42206: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42207: LD_INT 0
42209: PPUSH
42210: PPUSH
42211: PPUSH
// result := 0 ;
42212: LD_ADDR_VAR 0 3
42216: PUSH
42217: LD_INT 0
42219: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42220: LD_VAR 0 1
42224: PUSH
42225: LD_INT 0
42227: LESS
42228: PUSH
42229: LD_VAR 0 1
42233: PUSH
42234: LD_INT 8
42236: GREATER
42237: OR
42238: PUSH
42239: LD_VAR 0 2
42243: PUSH
42244: LD_INT 0
42246: LESS
42247: OR
42248: PUSH
42249: LD_VAR 0 2
42253: PUSH
42254: LD_INT 8
42256: GREATER
42257: OR
42258: IFFALSE 42262
// exit ;
42260: GO 42337
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
42262: LD_ADDR_VAR 0 4
42266: PUSH
42267: LD_INT 22
42269: PUSH
42270: LD_VAR 0 2
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PPUSH
42279: CALL_OW 69
42283: PUSH
42284: FOR_IN
42285: IFFALSE 42335
// begin un := UnitShoot ( i ) ;
42287: LD_ADDR_VAR 0 5
42291: PUSH
42292: LD_VAR 0 4
42296: PPUSH
42297: CALL_OW 504
42301: ST_TO_ADDR
// if GetSide ( un ) = side1 then
42302: LD_VAR 0 5
42306: PPUSH
42307: CALL_OW 255
42311: PUSH
42312: LD_VAR 0 1
42316: EQUAL
42317: IFFALSE 42333
// begin result := un ;
42319: LD_ADDR_VAR 0 3
42323: PUSH
42324: LD_VAR 0 5
42328: ST_TO_ADDR
// exit ;
42329: POP
42330: POP
42331: GO 42337
// end ; end ;
42333: GO 42284
42335: POP
42336: POP
// end ;
42337: LD_VAR 0 3
42341: RET
// export function GetCargoBay ( units ) ; begin
42342: LD_INT 0
42344: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42345: LD_ADDR_VAR 0 2
42349: PUSH
42350: LD_VAR 0 1
42354: PPUSH
42355: LD_INT 2
42357: PUSH
42358: LD_INT 34
42360: PUSH
42361: LD_INT 12
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 34
42370: PUSH
42371: LD_INT 51
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 34
42380: PUSH
42381: LD_INT 32
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 34
42390: PUSH
42391: LD_INT 89
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: PPUSH
42405: CALL_OW 72
42409: ST_TO_ADDR
// end ;
42410: LD_VAR 0 2
42414: RET
// export function Negate ( value ) ; begin
42415: LD_INT 0
42417: PPUSH
// result := not value ;
42418: LD_ADDR_VAR 0 2
42422: PUSH
42423: LD_VAR 0 1
42427: NOT
42428: ST_TO_ADDR
// end ;
42429: LD_VAR 0 2
42433: RET
// export function Inc ( value ) ; begin
42434: LD_INT 0
42436: PPUSH
// result := value + 1 ;
42437: LD_ADDR_VAR 0 2
42441: PUSH
42442: LD_VAR 0 1
42446: PUSH
42447: LD_INT 1
42449: PLUS
42450: ST_TO_ADDR
// end ;
42451: LD_VAR 0 2
42455: RET
// export function Dec ( value ) ; begin
42456: LD_INT 0
42458: PPUSH
// result := value - 1 ;
42459: LD_ADDR_VAR 0 2
42463: PUSH
42464: LD_VAR 0 1
42468: PUSH
42469: LD_INT 1
42471: MINUS
42472: ST_TO_ADDR
// end ;
42473: LD_VAR 0 2
42477: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42478: LD_INT 0
42480: PPUSH
42481: PPUSH
42482: PPUSH
42483: PPUSH
42484: PPUSH
42485: PPUSH
42486: PPUSH
42487: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42488: LD_VAR 0 1
42492: PPUSH
42493: LD_VAR 0 2
42497: PPUSH
42498: CALL_OW 488
42502: NOT
42503: PUSH
42504: LD_VAR 0 3
42508: PPUSH
42509: LD_VAR 0 4
42513: PPUSH
42514: CALL_OW 488
42518: NOT
42519: OR
42520: IFFALSE 42533
// begin result := - 1 ;
42522: LD_ADDR_VAR 0 5
42526: PUSH
42527: LD_INT 1
42529: NEG
42530: ST_TO_ADDR
// exit ;
42531: GO 42768
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42533: LD_ADDR_VAR 0 12
42537: PUSH
42538: LD_VAR 0 1
42542: PPUSH
42543: LD_VAR 0 2
42547: PPUSH
42548: LD_VAR 0 3
42552: PPUSH
42553: LD_VAR 0 4
42557: PPUSH
42558: CALL 41618 0 4
42562: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42563: LD_ADDR_VAR 0 11
42567: PUSH
42568: LD_VAR 0 1
42572: PPUSH
42573: LD_VAR 0 2
42577: PPUSH
42578: LD_VAR 0 12
42582: PUSH
42583: LD_INT 1
42585: ARRAY
42586: PPUSH
42587: LD_VAR 0 12
42591: PUSH
42592: LD_INT 2
42594: ARRAY
42595: PPUSH
42596: CALL_OW 298
42600: ST_TO_ADDR
// distance := 9999 ;
42601: LD_ADDR_VAR 0 10
42605: PUSH
42606: LD_INT 9999
42608: ST_TO_ADDR
// for i := 0 to 5 do
42609: LD_ADDR_VAR 0 6
42613: PUSH
42614: DOUBLE
42615: LD_INT 0
42617: DEC
42618: ST_TO_ADDR
42619: LD_INT 5
42621: PUSH
42622: FOR_TO
42623: IFFALSE 42766
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42625: LD_ADDR_VAR 0 7
42629: PUSH
42630: LD_VAR 0 1
42634: PPUSH
42635: LD_VAR 0 6
42639: PPUSH
42640: LD_VAR 0 11
42644: PPUSH
42645: CALL_OW 272
42649: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42650: LD_ADDR_VAR 0 8
42654: PUSH
42655: LD_VAR 0 2
42659: PPUSH
42660: LD_VAR 0 6
42664: PPUSH
42665: LD_VAR 0 11
42669: PPUSH
42670: CALL_OW 273
42674: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42675: LD_VAR 0 7
42679: PPUSH
42680: LD_VAR 0 8
42684: PPUSH
42685: CALL_OW 488
42689: NOT
42690: IFFALSE 42694
// continue ;
42692: GO 42622
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42694: LD_ADDR_VAR 0 9
42698: PUSH
42699: LD_VAR 0 12
42703: PUSH
42704: LD_INT 1
42706: ARRAY
42707: PPUSH
42708: LD_VAR 0 12
42712: PUSH
42713: LD_INT 2
42715: ARRAY
42716: PPUSH
42717: LD_VAR 0 7
42721: PPUSH
42722: LD_VAR 0 8
42726: PPUSH
42727: CALL_OW 298
42731: ST_TO_ADDR
// if tmp < distance then
42732: LD_VAR 0 9
42736: PUSH
42737: LD_VAR 0 10
42741: LESS
42742: IFFALSE 42764
// begin result := i ;
42744: LD_ADDR_VAR 0 5
42748: PUSH
42749: LD_VAR 0 6
42753: ST_TO_ADDR
// distance := tmp ;
42754: LD_ADDR_VAR 0 10
42758: PUSH
42759: LD_VAR 0 9
42763: ST_TO_ADDR
// end ; end ;
42764: GO 42622
42766: POP
42767: POP
// end ;
42768: LD_VAR 0 5
42772: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42773: LD_INT 0
42775: PPUSH
42776: PPUSH
// if not driver or not IsInUnit ( driver ) then
42777: LD_VAR 0 1
42781: NOT
42782: PUSH
42783: LD_VAR 0 1
42787: PPUSH
42788: CALL_OW 310
42792: NOT
42793: OR
42794: IFFALSE 42798
// exit ;
42796: GO 42888
// vehicle := IsInUnit ( driver ) ;
42798: LD_ADDR_VAR 0 3
42802: PUSH
42803: LD_VAR 0 1
42807: PPUSH
42808: CALL_OW 310
42812: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42813: LD_VAR 0 1
42817: PPUSH
42818: LD_STRING \
42820: PUSH
42821: LD_INT 0
42823: PUSH
42824: LD_INT 0
42826: PUSH
42827: LD_INT 0
42829: PUSH
42830: LD_INT 0
42832: PUSH
42833: LD_INT 0
42835: PUSH
42836: LD_INT 0
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: PUSH
42848: LD_STRING E
42850: PUSH
42851: LD_INT 0
42853: PUSH
42854: LD_INT 0
42856: PUSH
42857: LD_VAR 0 3
42861: PUSH
42862: LD_INT 0
42864: PUSH
42865: LD_INT 0
42867: PUSH
42868: LD_INT 0
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PPUSH
42884: CALL_OW 446
// end ;
42888: LD_VAR 0 2
42892: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42893: LD_INT 0
42895: PPUSH
42896: PPUSH
// if not driver or not IsInUnit ( driver ) then
42897: LD_VAR 0 1
42901: NOT
42902: PUSH
42903: LD_VAR 0 1
42907: PPUSH
42908: CALL_OW 310
42912: NOT
42913: OR
42914: IFFALSE 42918
// exit ;
42916: GO 43008
// vehicle := IsInUnit ( driver ) ;
42918: LD_ADDR_VAR 0 3
42922: PUSH
42923: LD_VAR 0 1
42927: PPUSH
42928: CALL_OW 310
42932: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42933: LD_VAR 0 1
42937: PPUSH
42938: LD_STRING \
42940: PUSH
42941: LD_INT 0
42943: PUSH
42944: LD_INT 0
42946: PUSH
42947: LD_INT 0
42949: PUSH
42950: LD_INT 0
42952: PUSH
42953: LD_INT 0
42955: PUSH
42956: LD_INT 0
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: PUSH
42968: LD_STRING E
42970: PUSH
42971: LD_INT 0
42973: PUSH
42974: LD_INT 0
42976: PUSH
42977: LD_VAR 0 3
42981: PUSH
42982: LD_INT 0
42984: PUSH
42985: LD_INT 0
42987: PUSH
42988: LD_INT 0
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PPUSH
43004: CALL_OW 447
// end ;
43008: LD_VAR 0 2
43012: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
43013: LD_INT 0
43015: PPUSH
43016: PPUSH
43017: PPUSH
// tmp := [ ] ;
43018: LD_ADDR_VAR 0 5
43022: PUSH
43023: EMPTY
43024: ST_TO_ADDR
// for i in units do
43025: LD_ADDR_VAR 0 4
43029: PUSH
43030: LD_VAR 0 1
43034: PUSH
43035: FOR_IN
43036: IFFALSE 43074
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
43038: LD_ADDR_VAR 0 5
43042: PUSH
43043: LD_VAR 0 5
43047: PPUSH
43048: LD_VAR 0 5
43052: PUSH
43053: LD_INT 1
43055: PLUS
43056: PPUSH
43057: LD_VAR 0 4
43061: PPUSH
43062: CALL_OW 256
43066: PPUSH
43067: CALL_OW 2
43071: ST_TO_ADDR
43072: GO 43035
43074: POP
43075: POP
// if not tmp then
43076: LD_VAR 0 5
43080: NOT
43081: IFFALSE 43085
// exit ;
43083: GO 43133
// if asc then
43085: LD_VAR 0 2
43089: IFFALSE 43113
// result := SortListByListAsc ( units , tmp ) else
43091: LD_ADDR_VAR 0 3
43095: PUSH
43096: LD_VAR 0 1
43100: PPUSH
43101: LD_VAR 0 5
43105: PPUSH
43106: CALL_OW 76
43110: ST_TO_ADDR
43111: GO 43133
// result := SortListByListDesc ( units , tmp ) ;
43113: LD_ADDR_VAR 0 3
43117: PUSH
43118: LD_VAR 0 1
43122: PPUSH
43123: LD_VAR 0 5
43127: PPUSH
43128: CALL_OW 77
43132: ST_TO_ADDR
// end ;
43133: LD_VAR 0 3
43137: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43138: LD_INT 0
43140: PPUSH
43141: PPUSH
// task := GetTaskList ( mech ) ;
43142: LD_ADDR_VAR 0 4
43146: PUSH
43147: LD_VAR 0 1
43151: PPUSH
43152: CALL_OW 437
43156: ST_TO_ADDR
// if not task then
43157: LD_VAR 0 4
43161: NOT
43162: IFFALSE 43166
// exit ;
43164: GO 43208
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43166: LD_ADDR_VAR 0 3
43170: PUSH
43171: LD_VAR 0 4
43175: PUSH
43176: LD_INT 1
43178: ARRAY
43179: PUSH
43180: LD_INT 1
43182: ARRAY
43183: PUSH
43184: LD_STRING r
43186: EQUAL
43187: PUSH
43188: LD_VAR 0 4
43192: PUSH
43193: LD_INT 1
43195: ARRAY
43196: PUSH
43197: LD_INT 4
43199: ARRAY
43200: PUSH
43201: LD_VAR 0 2
43205: EQUAL
43206: AND
43207: ST_TO_ADDR
// end ;
43208: LD_VAR 0 3
43212: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
43213: LD_INT 0
43215: PPUSH
// SetDir ( unit , d ) ;
43216: LD_VAR 0 1
43220: PPUSH
43221: LD_VAR 0 4
43225: PPUSH
43226: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
43230: LD_VAR 0 1
43234: PPUSH
43235: LD_VAR 0 2
43239: PPUSH
43240: LD_VAR 0 3
43244: PPUSH
43245: LD_VAR 0 5
43249: PPUSH
43250: CALL_OW 48
// end ;
43254: LD_VAR 0 6
43258: RET
// export function ToNaturalNumber ( number ) ; begin
43259: LD_INT 0
43261: PPUSH
// result := number div 1 ;
43262: LD_ADDR_VAR 0 2
43266: PUSH
43267: LD_VAR 0 1
43271: PUSH
43272: LD_INT 1
43274: DIV
43275: ST_TO_ADDR
// if number < 0 then
43276: LD_VAR 0 1
43280: PUSH
43281: LD_INT 0
43283: LESS
43284: IFFALSE 43294
// result := 0 ;
43286: LD_ADDR_VAR 0 2
43290: PUSH
43291: LD_INT 0
43293: ST_TO_ADDR
// end ;
43294: LD_VAR 0 2
43298: RET
// export function SortByClass ( units , class ) ; var un ; begin
43299: LD_INT 0
43301: PPUSH
43302: PPUSH
// if not units or not class then
43303: LD_VAR 0 1
43307: NOT
43308: PUSH
43309: LD_VAR 0 2
43313: NOT
43314: OR
43315: IFFALSE 43319
// exit ;
43317: GO 43414
// result := [ ] ;
43319: LD_ADDR_VAR 0 3
43323: PUSH
43324: EMPTY
43325: ST_TO_ADDR
// for un in units do
43326: LD_ADDR_VAR 0 4
43330: PUSH
43331: LD_VAR 0 1
43335: PUSH
43336: FOR_IN
43337: IFFALSE 43412
// if GetClass ( un ) = class then
43339: LD_VAR 0 4
43343: PPUSH
43344: CALL_OW 257
43348: PUSH
43349: LD_VAR 0 2
43353: EQUAL
43354: IFFALSE 43381
// result := Insert ( result , 1 , un ) else
43356: LD_ADDR_VAR 0 3
43360: PUSH
43361: LD_VAR 0 3
43365: PPUSH
43366: LD_INT 1
43368: PPUSH
43369: LD_VAR 0 4
43373: PPUSH
43374: CALL_OW 2
43378: ST_TO_ADDR
43379: GO 43410
// result := Replace ( result , result + 1 , un ) ;
43381: LD_ADDR_VAR 0 3
43385: PUSH
43386: LD_VAR 0 3
43390: PPUSH
43391: LD_VAR 0 3
43395: PUSH
43396: LD_INT 1
43398: PLUS
43399: PPUSH
43400: LD_VAR 0 4
43404: PPUSH
43405: CALL_OW 1
43409: ST_TO_ADDR
43410: GO 43336
43412: POP
43413: POP
// end ;
43414: LD_VAR 0 3
43418: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43419: LD_INT 0
43421: PPUSH
43422: PPUSH
43423: PPUSH
43424: PPUSH
43425: PPUSH
43426: PPUSH
43427: PPUSH
// result := [ ] ;
43428: LD_ADDR_VAR 0 4
43432: PUSH
43433: EMPTY
43434: ST_TO_ADDR
// if x - r < 0 then
43435: LD_VAR 0 1
43439: PUSH
43440: LD_VAR 0 3
43444: MINUS
43445: PUSH
43446: LD_INT 0
43448: LESS
43449: IFFALSE 43461
// min_x := 0 else
43451: LD_ADDR_VAR 0 8
43455: PUSH
43456: LD_INT 0
43458: ST_TO_ADDR
43459: GO 43477
// min_x := x - r ;
43461: LD_ADDR_VAR 0 8
43465: PUSH
43466: LD_VAR 0 1
43470: PUSH
43471: LD_VAR 0 3
43475: MINUS
43476: ST_TO_ADDR
// if y - r < 0 then
43477: LD_VAR 0 2
43481: PUSH
43482: LD_VAR 0 3
43486: MINUS
43487: PUSH
43488: LD_INT 0
43490: LESS
43491: IFFALSE 43503
// min_y := 0 else
43493: LD_ADDR_VAR 0 7
43497: PUSH
43498: LD_INT 0
43500: ST_TO_ADDR
43501: GO 43519
// min_y := y - r ;
43503: LD_ADDR_VAR 0 7
43507: PUSH
43508: LD_VAR 0 2
43512: PUSH
43513: LD_VAR 0 3
43517: MINUS
43518: ST_TO_ADDR
// max_x := x + r ;
43519: LD_ADDR_VAR 0 9
43523: PUSH
43524: LD_VAR 0 1
43528: PUSH
43529: LD_VAR 0 3
43533: PLUS
43534: ST_TO_ADDR
// max_y := y + r ;
43535: LD_ADDR_VAR 0 10
43539: PUSH
43540: LD_VAR 0 2
43544: PUSH
43545: LD_VAR 0 3
43549: PLUS
43550: ST_TO_ADDR
// for _x = min_x to max_x do
43551: LD_ADDR_VAR 0 5
43555: PUSH
43556: DOUBLE
43557: LD_VAR 0 8
43561: DEC
43562: ST_TO_ADDR
43563: LD_VAR 0 9
43567: PUSH
43568: FOR_TO
43569: IFFALSE 43670
// for _y = min_y to max_y do
43571: LD_ADDR_VAR 0 6
43575: PUSH
43576: DOUBLE
43577: LD_VAR 0 7
43581: DEC
43582: ST_TO_ADDR
43583: LD_VAR 0 10
43587: PUSH
43588: FOR_TO
43589: IFFALSE 43666
// begin if not ValidHex ( _x , _y ) then
43591: LD_VAR 0 5
43595: PPUSH
43596: LD_VAR 0 6
43600: PPUSH
43601: CALL_OW 488
43605: NOT
43606: IFFALSE 43610
// continue ;
43608: GO 43588
// if GetResourceTypeXY ( _x , _y ) then
43610: LD_VAR 0 5
43614: PPUSH
43615: LD_VAR 0 6
43619: PPUSH
43620: CALL_OW 283
43624: IFFALSE 43664
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43626: LD_ADDR_VAR 0 4
43630: PUSH
43631: LD_VAR 0 4
43635: PPUSH
43636: LD_VAR 0 4
43640: PUSH
43641: LD_INT 1
43643: PLUS
43644: PPUSH
43645: LD_VAR 0 5
43649: PUSH
43650: LD_VAR 0 6
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PPUSH
43659: CALL_OW 1
43663: ST_TO_ADDR
// end ;
43664: GO 43588
43666: POP
43667: POP
43668: GO 43568
43670: POP
43671: POP
// end ;
43672: LD_VAR 0 4
43676: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43677: LD_INT 0
43679: PPUSH
43680: PPUSH
43681: PPUSH
43682: PPUSH
43683: PPUSH
43684: PPUSH
43685: PPUSH
43686: PPUSH
// if not units then
43687: LD_VAR 0 1
43691: NOT
43692: IFFALSE 43696
// exit ;
43694: GO 44220
// result := UnitFilter ( units , [ f_ok ] ) ;
43696: LD_ADDR_VAR 0 3
43700: PUSH
43701: LD_VAR 0 1
43705: PPUSH
43706: LD_INT 50
43708: PUSH
43709: EMPTY
43710: LIST
43711: PPUSH
43712: CALL_OW 72
43716: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43717: LD_ADDR_VAR 0 8
43721: PUSH
43722: LD_VAR 0 1
43726: PUSH
43727: LD_INT 1
43729: ARRAY
43730: PPUSH
43731: CALL_OW 255
43735: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43736: LD_ADDR_VAR 0 10
43740: PUSH
43741: LD_INT 29
43743: PUSH
43744: LD_INT 91
43746: PUSH
43747: LD_INT 49
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: LIST
43754: ST_TO_ADDR
// if not result then
43755: LD_VAR 0 3
43759: NOT
43760: IFFALSE 43764
// exit ;
43762: GO 44220
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43764: LD_ADDR_VAR 0 5
43768: PUSH
43769: LD_INT 81
43771: PUSH
43772: LD_VAR 0 8
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PPUSH
43781: CALL_OW 69
43785: ST_TO_ADDR
// for i in result do
43786: LD_ADDR_VAR 0 4
43790: PUSH
43791: LD_VAR 0 3
43795: PUSH
43796: FOR_IN
43797: IFFALSE 44218
// begin tag := GetTag ( i ) + 1 ;
43799: LD_ADDR_VAR 0 9
43803: PUSH
43804: LD_VAR 0 4
43808: PPUSH
43809: CALL_OW 110
43813: PUSH
43814: LD_INT 1
43816: PLUS
43817: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
43818: LD_ADDR_VAR 0 7
43822: PUSH
43823: LD_VAR 0 4
43827: PPUSH
43828: CALL_OW 250
43832: PPUSH
43833: LD_VAR 0 4
43837: PPUSH
43838: CALL_OW 251
43842: PPUSH
43843: LD_INT 6
43845: PPUSH
43846: CALL 43419 0 3
43850: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
43851: LD_VAR 0 4
43855: PPUSH
43856: CALL_OW 247
43860: PUSH
43861: LD_INT 2
43863: EQUAL
43864: PUSH
43865: LD_VAR 0 7
43869: AND
43870: PUSH
43871: LD_VAR 0 4
43875: PPUSH
43876: CALL_OW 264
43880: PUSH
43881: LD_VAR 0 10
43885: IN
43886: NOT
43887: AND
43888: IFFALSE 43927
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43890: LD_VAR 0 4
43894: PPUSH
43895: LD_VAR 0 7
43899: PUSH
43900: LD_INT 1
43902: ARRAY
43903: PUSH
43904: LD_INT 1
43906: ARRAY
43907: PPUSH
43908: LD_VAR 0 7
43912: PUSH
43913: LD_INT 1
43915: ARRAY
43916: PUSH
43917: LD_INT 2
43919: ARRAY
43920: PPUSH
43921: CALL_OW 116
43925: GO 44216
// if path > tag then
43927: LD_VAR 0 2
43931: PUSH
43932: LD_VAR 0 9
43936: GREATER
43937: IFFALSE 44145
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43939: LD_ADDR_VAR 0 6
43943: PUSH
43944: LD_VAR 0 5
43948: PPUSH
43949: LD_INT 91
43951: PUSH
43952: LD_VAR 0 4
43956: PUSH
43957: LD_INT 8
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: LIST
43964: PPUSH
43965: CALL_OW 72
43969: ST_TO_ADDR
// if nearEnemy then
43970: LD_VAR 0 6
43974: IFFALSE 44043
// begin if GetWeapon ( i ) = ru_time_lapser then
43976: LD_VAR 0 4
43980: PPUSH
43981: CALL_OW 264
43985: PUSH
43986: LD_INT 49
43988: EQUAL
43989: IFFALSE 44017
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43991: LD_VAR 0 4
43995: PPUSH
43996: LD_VAR 0 6
44000: PPUSH
44001: LD_VAR 0 4
44005: PPUSH
44006: CALL_OW 74
44010: PPUSH
44011: CALL_OW 112
44015: GO 44041
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
44017: LD_VAR 0 4
44021: PPUSH
44022: LD_VAR 0 6
44026: PPUSH
44027: LD_VAR 0 4
44031: PPUSH
44032: CALL_OW 74
44036: PPUSH
44037: CALL_OW 115
// end else
44041: GO 44143
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
44043: LD_VAR 0 4
44047: PPUSH
44048: LD_VAR 0 2
44052: PUSH
44053: LD_VAR 0 9
44057: ARRAY
44058: PUSH
44059: LD_INT 1
44061: ARRAY
44062: PPUSH
44063: LD_VAR 0 2
44067: PUSH
44068: LD_VAR 0 9
44072: ARRAY
44073: PUSH
44074: LD_INT 2
44076: ARRAY
44077: PPUSH
44078: CALL_OW 297
44082: PUSH
44083: LD_INT 6
44085: GREATER
44086: IFFALSE 44129
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
44088: LD_VAR 0 4
44092: PPUSH
44093: LD_VAR 0 2
44097: PUSH
44098: LD_VAR 0 9
44102: ARRAY
44103: PUSH
44104: LD_INT 1
44106: ARRAY
44107: PPUSH
44108: LD_VAR 0 2
44112: PUSH
44113: LD_VAR 0 9
44117: ARRAY
44118: PUSH
44119: LD_INT 2
44121: ARRAY
44122: PPUSH
44123: CALL_OW 114
44127: GO 44143
// SetTag ( i , tag ) ;
44129: LD_VAR 0 4
44133: PPUSH
44134: LD_VAR 0 9
44138: PPUSH
44139: CALL_OW 109
// end else
44143: GO 44216
// if enemy then
44145: LD_VAR 0 5
44149: IFFALSE 44216
// begin if GetWeapon ( i ) = ru_time_lapser then
44151: LD_VAR 0 4
44155: PPUSH
44156: CALL_OW 264
44160: PUSH
44161: LD_INT 49
44163: EQUAL
44164: IFFALSE 44192
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
44166: LD_VAR 0 4
44170: PPUSH
44171: LD_VAR 0 5
44175: PPUSH
44176: LD_VAR 0 4
44180: PPUSH
44181: CALL_OW 74
44185: PPUSH
44186: CALL_OW 112
44190: GO 44216
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
44192: LD_VAR 0 4
44196: PPUSH
44197: LD_VAR 0 5
44201: PPUSH
44202: LD_VAR 0 4
44206: PPUSH
44207: CALL_OW 74
44211: PPUSH
44212: CALL_OW 115
// end ; end ;
44216: GO 43796
44218: POP
44219: POP
// end ;
44220: LD_VAR 0 3
44224: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
44225: LD_INT 0
44227: PPUSH
44228: PPUSH
44229: PPUSH
// if not unit or IsInUnit ( unit ) then
44230: LD_VAR 0 1
44234: NOT
44235: PUSH
44236: LD_VAR 0 1
44240: PPUSH
44241: CALL_OW 310
44245: OR
44246: IFFALSE 44250
// exit ;
44248: GO 44341
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
44250: LD_ADDR_VAR 0 4
44254: PUSH
44255: LD_VAR 0 1
44259: PPUSH
44260: CALL_OW 250
44264: PPUSH
44265: LD_VAR 0 2
44269: PPUSH
44270: LD_INT 1
44272: PPUSH
44273: CALL_OW 272
44277: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
44278: LD_ADDR_VAR 0 5
44282: PUSH
44283: LD_VAR 0 1
44287: PPUSH
44288: CALL_OW 251
44292: PPUSH
44293: LD_VAR 0 2
44297: PPUSH
44298: LD_INT 1
44300: PPUSH
44301: CALL_OW 273
44305: ST_TO_ADDR
// if ValidHex ( x , y ) then
44306: LD_VAR 0 4
44310: PPUSH
44311: LD_VAR 0 5
44315: PPUSH
44316: CALL_OW 488
44320: IFFALSE 44341
// ComTurnXY ( unit , x , y ) ;
44322: LD_VAR 0 1
44326: PPUSH
44327: LD_VAR 0 4
44331: PPUSH
44332: LD_VAR 0 5
44336: PPUSH
44337: CALL_OW 118
// end ;
44341: LD_VAR 0 3
44345: RET
// export function SeeUnits ( side , units ) ; var i ; begin
44346: LD_INT 0
44348: PPUSH
44349: PPUSH
// result := false ;
44350: LD_ADDR_VAR 0 3
44354: PUSH
44355: LD_INT 0
44357: ST_TO_ADDR
// if not units then
44358: LD_VAR 0 2
44362: NOT
44363: IFFALSE 44367
// exit ;
44365: GO 44412
// for i in units do
44367: LD_ADDR_VAR 0 4
44371: PUSH
44372: LD_VAR 0 2
44376: PUSH
44377: FOR_IN
44378: IFFALSE 44410
// if See ( side , i ) then
44380: LD_VAR 0 1
44384: PPUSH
44385: LD_VAR 0 4
44389: PPUSH
44390: CALL_OW 292
44394: IFFALSE 44408
// begin result := true ;
44396: LD_ADDR_VAR 0 3
44400: PUSH
44401: LD_INT 1
44403: ST_TO_ADDR
// exit ;
44404: POP
44405: POP
44406: GO 44412
// end ;
44408: GO 44377
44410: POP
44411: POP
// end ;
44412: LD_VAR 0 3
44416: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44417: LD_INT 0
44419: PPUSH
44420: PPUSH
44421: PPUSH
44422: PPUSH
// if not unit or not points then
44423: LD_VAR 0 1
44427: NOT
44428: PUSH
44429: LD_VAR 0 2
44433: NOT
44434: OR
44435: IFFALSE 44439
// exit ;
44437: GO 44529
// dist := 99999 ;
44439: LD_ADDR_VAR 0 5
44443: PUSH
44444: LD_INT 99999
44446: ST_TO_ADDR
// for i in points do
44447: LD_ADDR_VAR 0 4
44451: PUSH
44452: LD_VAR 0 2
44456: PUSH
44457: FOR_IN
44458: IFFALSE 44527
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44460: LD_ADDR_VAR 0 6
44464: PUSH
44465: LD_VAR 0 1
44469: PPUSH
44470: LD_VAR 0 4
44474: PUSH
44475: LD_INT 1
44477: ARRAY
44478: PPUSH
44479: LD_VAR 0 4
44483: PUSH
44484: LD_INT 2
44486: ARRAY
44487: PPUSH
44488: CALL_OW 297
44492: ST_TO_ADDR
// if tmpDist < dist then
44493: LD_VAR 0 6
44497: PUSH
44498: LD_VAR 0 5
44502: LESS
44503: IFFALSE 44525
// begin result := i ;
44505: LD_ADDR_VAR 0 3
44509: PUSH
44510: LD_VAR 0 4
44514: ST_TO_ADDR
// dist := tmpDist ;
44515: LD_ADDR_VAR 0 5
44519: PUSH
44520: LD_VAR 0 6
44524: ST_TO_ADDR
// end ; end ;
44525: GO 44457
44527: POP
44528: POP
// end ;
44529: LD_VAR 0 3
44533: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44534: LD_INT 0
44536: PPUSH
// uc_side := side ;
44537: LD_ADDR_OWVAR 20
44541: PUSH
44542: LD_VAR 0 1
44546: ST_TO_ADDR
// uc_nation := 3 ;
44547: LD_ADDR_OWVAR 21
44551: PUSH
44552: LD_INT 3
44554: ST_TO_ADDR
// vc_chassis := 25 ;
44555: LD_ADDR_OWVAR 37
44559: PUSH
44560: LD_INT 25
44562: ST_TO_ADDR
// vc_engine := engine_siberite ;
44563: LD_ADDR_OWVAR 39
44567: PUSH
44568: LD_INT 3
44570: ST_TO_ADDR
// vc_control := control_computer ;
44571: LD_ADDR_OWVAR 38
44575: PUSH
44576: LD_INT 3
44578: ST_TO_ADDR
// vc_weapon := 59 ;
44579: LD_ADDR_OWVAR 40
44583: PUSH
44584: LD_INT 59
44586: ST_TO_ADDR
// result := CreateVehicle ;
44587: LD_ADDR_VAR 0 5
44591: PUSH
44592: CALL_OW 45
44596: ST_TO_ADDR
// SetDir ( result , d ) ;
44597: LD_VAR 0 5
44601: PPUSH
44602: LD_VAR 0 4
44606: PPUSH
44607: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44611: LD_VAR 0 5
44615: PPUSH
44616: LD_VAR 0 2
44620: PPUSH
44621: LD_VAR 0 3
44625: PPUSH
44626: LD_INT 0
44628: PPUSH
44629: CALL_OW 48
// end ;
44633: LD_VAR 0 5
44637: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44638: LD_INT 0
44640: PPUSH
44641: PPUSH
44642: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44643: LD_ADDR_VAR 0 2
44647: PUSH
44648: LD_INT 0
44650: PUSH
44651: LD_INT 0
44653: PUSH
44654: LD_INT 0
44656: PUSH
44657: LD_INT 0
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44666: LD_VAR 0 1
44670: NOT
44671: PUSH
44672: LD_VAR 0 1
44676: PPUSH
44677: CALL_OW 264
44681: PUSH
44682: LD_INT 12
44684: PUSH
44685: LD_INT 51
44687: PUSH
44688: LD_INT 32
44690: PUSH
44691: LD_INT 89
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: IN
44700: NOT
44701: OR
44702: IFFALSE 44706
// exit ;
44704: GO 44804
// for i := 1 to 3 do
44706: LD_ADDR_VAR 0 3
44710: PUSH
44711: DOUBLE
44712: LD_INT 1
44714: DEC
44715: ST_TO_ADDR
44716: LD_INT 3
44718: PUSH
44719: FOR_TO
44720: IFFALSE 44802
// begin tmp := GetCargo ( cargo , i ) ;
44722: LD_ADDR_VAR 0 4
44726: PUSH
44727: LD_VAR 0 1
44731: PPUSH
44732: LD_VAR 0 3
44736: PPUSH
44737: CALL_OW 289
44741: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44742: LD_ADDR_VAR 0 2
44746: PUSH
44747: LD_VAR 0 2
44751: PPUSH
44752: LD_VAR 0 3
44756: PPUSH
44757: LD_VAR 0 4
44761: PPUSH
44762: CALL_OW 1
44766: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44767: LD_ADDR_VAR 0 2
44771: PUSH
44772: LD_VAR 0 2
44776: PPUSH
44777: LD_INT 4
44779: PPUSH
44780: LD_VAR 0 2
44784: PUSH
44785: LD_INT 4
44787: ARRAY
44788: PUSH
44789: LD_VAR 0 4
44793: PLUS
44794: PPUSH
44795: CALL_OW 1
44799: ST_TO_ADDR
// end ;
44800: GO 44719
44802: POP
44803: POP
// end ;
44804: LD_VAR 0 2
44808: RET
// export function Length ( array ) ; begin
44809: LD_INT 0
44811: PPUSH
// result := array + 0 ;
44812: LD_ADDR_VAR 0 2
44816: PUSH
44817: LD_VAR 0 1
44821: PUSH
44822: LD_INT 0
44824: PLUS
44825: ST_TO_ADDR
// end ;
44826: LD_VAR 0 2
44830: RET
// export function PrepareArray ( array ) ; begin
44831: LD_INT 0
44833: PPUSH
// result := array diff 0 ;
44834: LD_ADDR_VAR 0 2
44838: PUSH
44839: LD_VAR 0 1
44843: PUSH
44844: LD_INT 0
44846: DIFF
44847: ST_TO_ADDR
// if not result [ 1 ] then
44848: LD_VAR 0 2
44852: PUSH
44853: LD_INT 1
44855: ARRAY
44856: NOT
44857: IFFALSE 44877
// result := Delete ( result , 1 ) ;
44859: LD_ADDR_VAR 0 2
44863: PUSH
44864: LD_VAR 0 2
44868: PPUSH
44869: LD_INT 1
44871: PPUSH
44872: CALL_OW 3
44876: ST_TO_ADDR
// end ;
44877: LD_VAR 0 2
44881: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44882: LD_INT 0
44884: PPUSH
44885: PPUSH
44886: PPUSH
44887: PPUSH
// sibRocketRange := 25 ;
44888: LD_ADDR_VAR 0 6
44892: PUSH
44893: LD_INT 25
44895: ST_TO_ADDR
// result := false ;
44896: LD_ADDR_VAR 0 4
44900: PUSH
44901: LD_INT 0
44903: ST_TO_ADDR
// for i := 0 to 5 do
44904: LD_ADDR_VAR 0 5
44908: PUSH
44909: DOUBLE
44910: LD_INT 0
44912: DEC
44913: ST_TO_ADDR
44914: LD_INT 5
44916: PUSH
44917: FOR_TO
44918: IFFALSE 44985
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44920: LD_VAR 0 1
44924: PPUSH
44925: LD_VAR 0 5
44929: PPUSH
44930: LD_VAR 0 6
44934: PPUSH
44935: CALL_OW 272
44939: PPUSH
44940: LD_VAR 0 2
44944: PPUSH
44945: LD_VAR 0 5
44949: PPUSH
44950: LD_VAR 0 6
44954: PPUSH
44955: CALL_OW 273
44959: PPUSH
44960: LD_VAR 0 3
44964: PPUSH
44965: CALL_OW 309
44969: IFFALSE 44983
// begin result := true ;
44971: LD_ADDR_VAR 0 4
44975: PUSH
44976: LD_INT 1
44978: ST_TO_ADDR
// exit ;
44979: POP
44980: POP
44981: GO 44987
// end ;
44983: GO 44917
44985: POP
44986: POP
// end ;
44987: LD_VAR 0 4
44991: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
44992: LD_INT 0
44994: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
44995: LD_VAR 0 1
44999: PPUSH
45000: LD_VAR 0 2
45004: PPUSH
45005: LD_INT 0
45007: PPUSH
45008: LD_INT 0
45010: PPUSH
45011: LD_INT 1
45013: PPUSH
45014: LD_INT 0
45016: PPUSH
45017: CALL_OW 587
// end ;
45021: LD_VAR 0 3
45025: RET
