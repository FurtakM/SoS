// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// PrepareArabian ;
   8: CALL 65 0 0
// PrepareRussian ;
  12: CALL 1359 0 0
// PrepareHeike ;
  16: CALL 614 0 0
// Action ;
  20: CALL 2525 0 0
// end ;
  24: END
// export debug , prefix , startAttackOnKabul , startAttackOnHeike ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := true ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 1
  35: ST_TO_ADDR
// prefix := 07_ ;
  36: LD_ADDR_EXP 2
  40: PUSH
  41: LD_STRING 07_
  43: ST_TO_ADDR
// startAttackOnKabul := false ;
  44: LD_ADDR_EXP 3
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// startAttackOnHeike := false ;
  52: LD_ADDR_EXP 4
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// end ; end_of_file
  60: LD_VAR 0 1
  64: RET
// export function PrepareArabian ; var i , un , lives ; begin
  65: LD_INT 0
  67: PPUSH
  68: PPUSH
  69: PPUSH
  70: PPUSH
// SetBName ( ar_dep , newkabul ) ;
  71: LD_INT 2
  73: PPUSH
  74: LD_STRING newkabul
  76: PPUSH
  77: CALL_OW 500
// uc_side := 5 ;
  81: LD_ADDR_OWVAR 20
  85: PUSH
  86: LD_INT 5
  88: ST_TO_ADDR
// uc_nation := 2 ;
  89: LD_ADDR_OWVAR 21
  93: PUSH
  94: LD_INT 2
  96: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do
  97: LD_ADDR_VAR 0 2
 101: PUSH
 102: LD_INT 22
 104: PUSH
 105: LD_INT 2
 107: PUSH
 108: EMPTY
 109: LIST
 110: LIST
 111: PUSH
 112: LD_INT 21
 114: PUSH
 115: LD_INT 3
 117: PUSH
 118: EMPTY
 119: LIST
 120: LIST
 121: PUSH
 122: EMPTY
 123: LIST
 124: LIST
 125: PPUSH
 126: CALL_OW 69
 130: PUSH
 131: FOR_IN
 132: IFFALSE 266
// begin SetSide ( i , 5 ) ;
 134: LD_VAR 0 2
 138: PPUSH
 139: LD_INT 5
 141: PPUSH
 142: CALL_OW 235
// lives := rand ( 248 , 510 ) ;
 146: LD_ADDR_VAR 0 4
 150: PUSH
 151: LD_INT 248
 153: PPUSH
 154: LD_INT 510
 156: PPUSH
 157: CALL_OW 12
 161: ST_TO_ADDR
// SetLives ( i , lives ) ;
 162: LD_VAR 0 2
 166: PPUSH
 167: LD_VAR 0 4
 171: PPUSH
 172: CALL_OW 234
// if GetBType ( i ) = b_bunker then
 176: LD_VAR 0 2
 180: PPUSH
 181: CALL_OW 266
 185: PUSH
 186: LD_INT 32
 188: EQUAL
 189: IFFALSE 264
// begin PlaceWeaponTurret ( i , [ ar_double_machine_gun , ar_gun , ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] ) ;
 191: LD_VAR 0 2
 195: PPUSH
 196: LD_INT 24
 198: PUSH
 199: LD_INT 27
 201: PUSH
 202: LD_INT 25
 204: PUSH
 205: LD_INT 28
 207: PUSH
 208: EMPTY
 209: LIST
 210: LIST
 211: LIST
 212: LIST
 213: PUSH
 214: LD_INT 1
 216: PPUSH
 217: LD_INT 4
 219: PPUSH
 220: CALL_OW 12
 224: ARRAY
 225: PPUSH
 226: CALL_OW 431
// if lives > 250 then
 230: LD_VAR 0 4
 234: PUSH
 235: LD_INT 250
 237: GREATER
 238: IFFALSE 264
// begin PrepareSoldier ( false , 6 ) ;
 240: LD_INT 0
 242: PPUSH
 243: LD_INT 6
 245: PPUSH
 246: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
 250: CALL_OW 44
 254: PPUSH
 255: LD_VAR 0 2
 259: PPUSH
 260: CALL_OW 52
// end ; end ; end ;
 264: GO 131
 266: POP
 267: POP
// for i := 1 to 9 do
 268: LD_ADDR_VAR 0 2
 272: PUSH
 273: DOUBLE
 274: LD_INT 1
 276: DEC
 277: ST_TO_ADDR
 278: LD_INT 9
 280: PUSH
 281: FOR_TO
 282: IFFALSE 361
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 0 ) ;
 284: LD_INT 0
 286: PPUSH
 287: LD_INT 1
 289: PPUSH
 290: LD_INT 4
 292: PPUSH
 293: CALL_OW 12
 297: PPUSH
 298: LD_INT 0
 300: PPUSH
 301: CALL_OW 380
// un := CreateHuman ;
 305: LD_ADDR_VAR 0 3
 309: PUSH
 310: CALL_OW 44
 314: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 315: LD_VAR 0 3
 319: PPUSH
 320: LD_INT 0
 322: PPUSH
 323: LD_INT 5
 325: PPUSH
 326: CALL_OW 12
 330: PPUSH
 331: CALL_OW 233
// PlaceUnitArea ( un , kabulDeadArea , false ) ;
 335: LD_VAR 0 3
 339: PPUSH
 340: LD_INT 1
 342: PPUSH
 343: LD_INT 0
 345: PPUSH
 346: CALL_OW 49
// KillUnit ( un ) ;
 350: LD_VAR 0 3
 354: PPUSH
 355: CALL_OW 66
// end ;
 359: GO 281
 361: POP
 362: POP
// for i := 1 to 3 do
 363: LD_ADDR_VAR 0 2
 367: PUSH
 368: DOUBLE
 369: LD_INT 1
 371: DEC
 372: ST_TO_ADDR
 373: LD_INT 3
 375: PUSH
 376: FOR_TO
 377: IFFALSE 531
// begin vc_chassis := ar_medium_trike ;
 379: LD_ADDR_OWVAR 37
 383: PUSH
 384: LD_INT 13
 386: ST_TO_ADDR
// vc_engine := [ engine_solar , engine_combustion ] [ rand ( 1 , 2 ) ] ;
 387: LD_ADDR_OWVAR 39
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 1
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: PUSH
 402: LD_INT 1
 404: PPUSH
 405: LD_INT 2
 407: PPUSH
 408: CALL_OW 12
 412: ARRAY
 413: ST_TO_ADDR
// vc_control := [ control_manual , control_remote ] [ rand ( 1 , 2 ) ] ;
 414: LD_ADDR_OWVAR 38
 418: PUSH
 419: LD_INT 1
 421: PUSH
 422: LD_INT 2
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: PUSH
 429: LD_INT 1
 431: PPUSH
 432: LD_INT 2
 434: PPUSH
 435: CALL_OW 12
 439: ARRAY
 440: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_gatling_gun , ar_gun ] [ rand ( 1 , 3 ) ] ;
 441: LD_ADDR_OWVAR 40
 445: PUSH
 446: LD_INT 24
 448: PUSH
 449: LD_INT 25
 451: PUSH
 452: LD_INT 27
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: LIST
 459: PUSH
 460: LD_INT 1
 462: PPUSH
 463: LD_INT 3
 465: PPUSH
 466: CALL_OW 12
 470: ARRAY
 471: ST_TO_ADDR
// un := CreateVehicle ;
 472: LD_ADDR_VAR 0 3
 476: PUSH
 477: CALL_OW 45
 481: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 482: LD_VAR 0 3
 486: PPUSH
 487: LD_INT 0
 489: PPUSH
 490: LD_INT 5
 492: PPUSH
 493: CALL_OW 12
 497: PPUSH
 498: CALL_OW 233
// PlaceUnitArea ( un , kabulVDeadArea , false ) ;
 502: LD_VAR 0 3
 506: PPUSH
 507: LD_INT 2
 509: PPUSH
 510: LD_INT 0
 512: PPUSH
 513: CALL_OW 49
// SetLives ( un , 200 ) ;
 517: LD_VAR 0 3
 521: PPUSH
 522: LD_INT 200
 524: PPUSH
 525: CALL_OW 234
// end ;
 529: GO 376
 531: POP
 532: POP
// for i := 1 to 3 do
 533: LD_ADDR_VAR 0 2
 537: PUSH
 538: DOUBLE
 539: LD_INT 1
 541: DEC
 542: ST_TO_ADDR
 543: LD_INT 3
 545: PUSH
 546: FOR_TO
 547: IFFALSE 607
// begin PrepareSoldier ( false , 6 ) ;
 549: LD_INT 0
 551: PPUSH
 552: LD_INT 6
 554: PPUSH
 555: CALL_OW 381
// un := CreateHuman ;
 559: LD_ADDR_VAR 0 3
 563: PUSH
 564: CALL_OW 44
 568: ST_TO_ADDR
// PlaceUnitXYR ( un , 106 , 47 , 4 , false ) ;
 569: LD_VAR 0 3
 573: PPUSH
 574: LD_INT 106
 576: PPUSH
 577: LD_INT 47
 579: PPUSH
 580: LD_INT 4
 582: PPUSH
 583: LD_INT 0
 585: PPUSH
 586: CALL_OW 50
// ComAgressiveMove ( un , 71 , 53 ) ;
 590: LD_VAR 0 3
 594: PPUSH
 595: LD_INT 71
 597: PPUSH
 598: LD_INT 53
 600: PPUSH
 601: CALL_OW 114
// end ;
 605: GO 546
 607: POP
 608: POP
// end ;
 609: LD_VAR 0 1
 613: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad ; export function PrepareHeike ; var i , tmp , un , veh ; begin
 614: LD_INT 0
 616: PPUSH
 617: PPUSH
 618: PPUSH
 619: PPUSH
 620: PPUSH
// uc_side := 2 ;
 621: LD_ADDR_OWVAR 20
 625: PUSH
 626: LD_INT 2
 628: ST_TO_ADDR
// uc_nation := 2 ;
 629: LD_ADDR_OWVAR 21
 633: PUSH
 634: LD_INT 2
 636: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 637: LD_ADDR_EXP 5
 641: PUSH
 642: LD_STRING Heike
 644: PPUSH
 645: LD_EXP 1
 649: NOT
 650: PPUSH
 651: LD_EXP 2
 655: PPUSH
 656: CALL 3429 0 3
 660: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 661: LD_ADDR_EXP 8
 665: PUSH
 666: LD_STRING Ibrahim
 668: PPUSH
 669: LD_EXP 1
 673: NOT
 674: PPUSH
 675: LD_EXP 2
 679: PPUSH
 680: CALL 3429 0 3
 684: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 685: LD_ADDR_EXP 6
 689: PUSH
 690: LD_STRING Givi
 692: PPUSH
 693: LD_EXP 1
 697: NOT
 698: PPUSH
 699: LD_EXP 2
 703: PPUSH
 704: CALL 3429 0 3
 708: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 709: LD_ADDR_EXP 9
 713: PUSH
 714: LD_STRING Kamil
 716: PPUSH
 717: LD_EXP 1
 721: NOT
 722: PPUSH
 723: LD_EXP 2
 727: PPUSH
 728: CALL 3429 0 3
 732: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 733: LD_ADDR_EXP 10
 737: PUSH
 738: LD_STRING Kaia
 740: PPUSH
 741: LD_EXP 1
 745: NOT
 746: PPUSH
 747: LD_EXP 2
 751: PPUSH
 752: CALL 3429 0 3
 756: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 757: LD_ADDR_EXP 11
 761: PUSH
 762: LD_STRING Sophia
 764: PPUSH
 765: LD_EXP 1
 769: NOT
 770: PPUSH
 771: LD_EXP 2
 775: PPUSH
 776: CALL 3429 0 3
 780: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 781: LD_ADDR_EXP 12
 785: PUSH
 786: LD_STRING Markov
 788: PPUSH
 789: LD_EXP 1
 793: NOT
 794: PPUSH
 795: LD_EXP 2
 799: PPUSH
 800: CALL 3429 0 3
 804: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 805: LD_ADDR_EXP 15
 809: PUSH
 810: LD_STRING Aviradze
 812: PPUSH
 813: LD_EXP 1
 817: NOT
 818: PPUSH
 819: LD_EXP 2
 823: PPUSH
 824: CALL 3429 0 3
 828: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 829: LD_ADDR_EXP 14
 833: PUSH
 834: LD_STRING Kurt
 836: PPUSH
 837: LD_EXP 1
 841: NOT
 842: PPUSH
 843: LD_EXP 2
 847: PPUSH
 848: CALL 3429 0 3
 852: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 853: LD_ADDR_EXP 7
 857: PUSH
 858: LD_STRING Mike
 860: PPUSH
 861: LD_EXP 1
 865: NOT
 866: PPUSH
 867: LD_EXP 2
 871: PPUSH
 872: CALL 3429 0 3
 876: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 877: LD_ADDR_EXP 13
 881: PUSH
 882: LD_STRING Olaf
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: LD_STRING 
 890: PPUSH
 891: CALL 3429 0 3
 895: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
 896: LD_ADDR_EXP 16
 900: PUSH
 901: LD_STRING 07_others
 903: PPUSH
 904: CALL_OW 31
 908: ST_TO_ADDR
// veh := [ [ ar_half_tracked , engine_combustion , control_manual , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] , ] ;
 909: LD_ADDR_VAR 0 5
 913: PUSH
 914: LD_INT 14
 916: PUSH
 917: LD_INT 1
 919: PUSH
 920: LD_INT 1
 922: PUSH
 923: LD_INT 25
 925: PUSH
 926: EMPTY
 927: LIST
 928: LIST
 929: LIST
 930: LIST
 931: PUSH
 932: LD_INT 14
 934: PUSH
 935: LD_INT 1
 937: PUSH
 938: LD_INT 1
 940: PUSH
 941: LD_INT 27
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: LIST
 948: LIST
 949: PUSH
 950: LD_INT 14
 952: PUSH
 953: LD_INT 1
 955: PUSH
 956: LD_INT 1
 958: PUSH
 959: LD_INT 27
 961: PUSH
 962: EMPTY
 963: LIST
 964: LIST
 965: LIST
 966: LIST
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: LIST
 972: ST_TO_ADDR
// for i in veh do
 973: LD_ADDR_VAR 0 2
 977: PUSH
 978: LD_VAR 0 5
 982: PUSH
 983: FOR_IN
 984: IFFALSE 1089
// begin vc_chassis := i [ 1 ] ;
 986: LD_ADDR_OWVAR 37
 990: PUSH
 991: LD_VAR 0 2
 995: PUSH
 996: LD_INT 1
 998: ARRAY
 999: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
1000: LD_ADDR_OWVAR 39
1004: PUSH
1005: LD_VAR 0 2
1009: PUSH
1010: LD_INT 2
1012: ARRAY
1013: ST_TO_ADDR
// vc_control := i [ 3 ] ;
1014: LD_ADDR_OWVAR 38
1018: PUSH
1019: LD_VAR 0 2
1023: PUSH
1024: LD_INT 3
1026: ARRAY
1027: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
1028: LD_ADDR_OWVAR 40
1032: PUSH
1033: LD_VAR 0 2
1037: PUSH
1038: LD_INT 4
1040: ARRAY
1041: ST_TO_ADDR
// vc_fuel_battery := 25 ;
1042: LD_ADDR_OWVAR 41
1046: PUSH
1047: LD_INT 25
1049: ST_TO_ADDR
// un := CreateVehicle ;
1050: LD_ADDR_VAR 0 4
1054: PUSH
1055: CALL_OW 45
1059: ST_TO_ADDR
// SetDir ( un , 0 ) ;
1060: LD_VAR 0 4
1064: PPUSH
1065: LD_INT 0
1067: PPUSH
1068: CALL_OW 233
// PlaceUnitArea ( un , heikeVehArea , false ) ;
1072: LD_VAR 0 4
1076: PPUSH
1077: LD_INT 7
1079: PPUSH
1080: LD_INT 0
1082: PPUSH
1083: CALL_OW 49
// end ;
1087: GO 983
1089: POP
1090: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad ;
1091: LD_ADDR_VAR 0 3
1095: PUSH
1096: LD_EXP 7
1100: PUSH
1101: LD_EXP 8
1105: PUSH
1106: LD_EXP 9
1110: PUSH
1111: LD_EXP 10
1115: PUSH
1116: LD_EXP 11
1120: PUSH
1121: LD_EXP 12
1125: PUSH
1126: LD_EXP 13
1130: PUSH
1131: LD_EXP 14
1135: PUSH
1136: LD_EXP 15
1140: PUSH
1141: EMPTY
1142: LIST
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: PUSH
1152: LD_EXP 16
1156: UNION
1157: ST_TO_ADDR
// for i in tmp do
1158: LD_ADDR_VAR 0 2
1162: PUSH
1163: LD_VAR 0 3
1167: PUSH
1168: FOR_IN
1169: IFFALSE 1289
// begin if GetClass ( i ) in [ class_mechanic , class_engineer , class_scientistic ] and FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) then
1171: LD_VAR 0 2
1175: PPUSH
1176: CALL_OW 257
1180: PUSH
1181: LD_INT 3
1183: PUSH
1184: LD_INT 2
1186: PUSH
1187: LD_INT 4
1189: PUSH
1190: EMPTY
1191: LIST
1192: LIST
1193: LIST
1194: IN
1195: PUSH
1196: LD_INT 22
1198: PUSH
1199: LD_INT 2
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: PUSH
1206: LD_INT 58
1208: PUSH
1209: EMPTY
1210: LIST
1211: PUSH
1212: EMPTY
1213: LIST
1214: LIST
1215: PPUSH
1216: CALL_OW 69
1220: AND
1221: IFFALSE 1263
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) [ 1 ] ) else
1223: LD_VAR 0 2
1227: PPUSH
1228: LD_INT 22
1230: PUSH
1231: LD_INT 2
1233: PUSH
1234: EMPTY
1235: LIST
1236: LIST
1237: PUSH
1238: LD_INT 58
1240: PUSH
1241: EMPTY
1242: LIST
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: PPUSH
1248: CALL_OW 69
1252: PUSH
1253: LD_INT 1
1255: ARRAY
1256: PPUSH
1257: CALL_OW 52
1261: GO 1278
// PlaceUnitArea ( i , heikePeopleArea , false ) ;
1263: LD_VAR 0 2
1267: PPUSH
1268: LD_INT 6
1270: PPUSH
1271: LD_INT 0
1273: PPUSH
1274: CALL_OW 49
// ComHold ( i ) ;
1278: LD_VAR 0 2
1282: PPUSH
1283: CALL_OW 140
// end ;
1287: GO 1168
1289: POP
1290: POP
// PlaceUnitArea ( Heike , heikeArea , false ) ;
1291: LD_EXP 5
1295: PPUSH
1296: LD_INT 5
1298: PPUSH
1299: LD_INT 0
1301: PPUSH
1302: CALL_OW 49
// ComTurnUnit ( Heike , ar_dep ) ;
1306: LD_EXP 5
1310: PPUSH
1311: LD_INT 2
1313: PPUSH
1314: CALL_OW 119
// if Givi then
1318: LD_EXP 6
1322: IFFALSE 1354
// begin PlaceUnitXY ( Givi , 129 , 158 , false ) ;
1324: LD_EXP 6
1328: PPUSH
1329: LD_INT 129
1331: PPUSH
1332: LD_INT 158
1334: PPUSH
1335: LD_INT 0
1337: PPUSH
1338: CALL_OW 48
// ComTurnUnit ( Givi , ar_dep ) ;
1342: LD_EXP 6
1346: PPUSH
1347: LD_INT 2
1349: PPUSH
1350: CALL_OW 119
// end ; end ; end_of_file
1354: LD_VAR 0 1
1358: RET
// export kabulAttackers , heikeAttackers , Burlak ; export function PrepareRussian ; var i , un ; begin
1359: LD_INT 0
1361: PPUSH
1362: PPUSH
1363: PPUSH
// uc_side := 3 ;
1364: LD_ADDR_OWVAR 20
1368: PUSH
1369: LD_INT 3
1371: ST_TO_ADDR
// uc_nation := 3 ;
1372: LD_ADDR_OWVAR 21
1376: PUSH
1377: LD_INT 3
1379: ST_TO_ADDR
// Burlak := NewCharacter ( Burlak ) ;
1380: LD_ADDR_EXP 19
1384: PUSH
1385: LD_STRING Burlak
1387: PPUSH
1388: CALL_OW 25
1392: ST_TO_ADDR
// kabulAttackers := [ ] ;
1393: LD_ADDR_EXP 17
1397: PUSH
1398: EMPTY
1399: ST_TO_ADDR
// heikeAttackers := [ ] ;
1400: LD_ADDR_EXP 18
1404: PUSH
1405: EMPTY
1406: ST_TO_ADDR
// for i := 1 to 9 do
1407: LD_ADDR_VAR 0 2
1411: PUSH
1412: DOUBLE
1413: LD_INT 1
1415: DEC
1416: ST_TO_ADDR
1417: LD_INT 9
1419: PUSH
1420: FOR_TO
1421: IFFALSE 1513
// begin PrepareHuman ( false , class_soldier , 0 ) ;
1423: LD_INT 0
1425: PPUSH
1426: LD_INT 1
1428: PPUSH
1429: LD_INT 0
1431: PPUSH
1432: CALL_OW 380
// un := CreateHuman ;
1436: LD_ADDR_VAR 0 3
1440: PUSH
1441: CALL_OW 44
1445: ST_TO_ADDR
// if Prob ( 40 ) then
1446: LD_INT 40
1448: PPUSH
1449: CALL_OW 13
1453: IFFALSE 1467
// SetClass ( un , class_bazooker ) ;
1455: LD_VAR 0 3
1459: PPUSH
1460: LD_INT 9
1462: PPUSH
1463: CALL_OW 336
// SetDir ( un , rand ( 0 , 5 ) ) ;
1467: LD_VAR 0 3
1471: PPUSH
1472: LD_INT 0
1474: PPUSH
1475: LD_INT 5
1477: PPUSH
1478: CALL_OW 12
1482: PPUSH
1483: CALL_OW 233
// PlaceUnitArea ( un , KabulRuDead , false ) ;
1487: LD_VAR 0 3
1491: PPUSH
1492: LD_INT 10
1494: PPUSH
1495: LD_INT 0
1497: PPUSH
1498: CALL_OW 49
// KillUnit ( un ) ;
1502: LD_VAR 0 3
1506: PPUSH
1507: CALL_OW 66
// end ;
1511: GO 1420
1513: POP
1514: POP
// for i := 1 to 9 do
1515: LD_ADDR_VAR 0 2
1519: PUSH
1520: DOUBLE
1521: LD_INT 1
1523: DEC
1524: ST_TO_ADDR
1525: LD_INT 9
1527: PUSH
1528: FOR_TO
1529: IFFALSE 1750
// begin if rand ( 0 , 1 ) then
1531: LD_INT 0
1533: PPUSH
1534: LD_INT 1
1536: PPUSH
1537: CALL_OW 12
1541: IFFALSE 1604
// begin PrepareHuman ( false , class_soldier , 7 ) ;
1543: LD_INT 0
1545: PPUSH
1546: LD_INT 1
1548: PPUSH
1549: LD_INT 7
1551: PPUSH
1552: CALL_OW 380
// un := CreateHuman ;
1556: LD_ADDR_VAR 0 3
1560: PUSH
1561: CALL_OW 44
1565: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1566: LD_VAR 0 3
1570: PPUSH
1571: LD_INT 1
1573: PPUSH
1574: CALL_OW 233
// PlaceUnitArea ( un , kabulRuArea , false ) ;
1578: LD_VAR 0 3
1582: PPUSH
1583: LD_INT 3
1585: PPUSH
1586: LD_INT 0
1588: PPUSH
1589: CALL_OW 49
// ComHold ( un ) ;
1593: LD_VAR 0 3
1597: PPUSH
1598: CALL_OW 140
// end else
1602: GO 1719
// begin vc_chassis := ru_medium_tracked ;
1604: LD_ADDR_OWVAR 37
1608: PUSH
1609: LD_INT 22
1611: ST_TO_ADDR
// vc_engine := engine_combustion ;
1612: LD_ADDR_OWVAR 39
1616: PUSH
1617: LD_INT 1
1619: ST_TO_ADDR
// vc_control := control_manual ;
1620: LD_ADDR_OWVAR 38
1624: PUSH
1625: LD_INT 1
1627: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
1628: LD_ADDR_OWVAR 40
1632: PUSH
1633: LD_INT 44
1635: PUSH
1636: LD_INT 43
1638: PUSH
1639: LD_INT 45
1641: PUSH
1642: EMPTY
1643: LIST
1644: LIST
1645: LIST
1646: PUSH
1647: LD_INT 1
1649: PPUSH
1650: LD_INT 3
1652: PPUSH
1653: CALL_OW 12
1657: ARRAY
1658: ST_TO_ADDR
// un := CreateVehicle ;
1659: LD_ADDR_VAR 0 3
1663: PUSH
1664: CALL_OW 45
1668: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1669: LD_VAR 0 3
1673: PPUSH
1674: LD_INT 1
1676: PPUSH
1677: CALL_OW 233
// PlaceUnitArea ( un , kabulRuArea , false ) ;
1681: LD_VAR 0 3
1685: PPUSH
1686: LD_INT 3
1688: PPUSH
1689: LD_INT 0
1691: PPUSH
1692: CALL_OW 49
// ComHold ( un ) ;
1696: LD_VAR 0 3
1700: PPUSH
1701: CALL_OW 140
// PlaceHumanInUnit ( CreateHuman , un ) ;
1705: CALL_OW 44
1709: PPUSH
1710: LD_VAR 0 3
1714: PPUSH
1715: CALL_OW 52
// end ; kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
1719: LD_ADDR_EXP 17
1723: PUSH
1724: LD_EXP 17
1728: PPUSH
1729: LD_EXP 17
1733: PUSH
1734: LD_INT 1
1736: PLUS
1737: PPUSH
1738: LD_VAR 0 3
1742: PPUSH
1743: CALL_OW 1
1747: ST_TO_ADDR
// end ;
1748: GO 1528
1750: POP
1751: POP
// for i := 1 to 5 do
1752: LD_ADDR_VAR 0 2
1756: PUSH
1757: DOUBLE
1758: LD_INT 1
1760: DEC
1761: ST_TO_ADDR
1762: LD_INT 5
1764: PUSH
1765: FOR_TO
1766: IFFALSE 1999
// begin if rand ( 0 , 1 ) then
1768: LD_INT 0
1770: PPUSH
1771: LD_INT 1
1773: PPUSH
1774: CALL_OW 12
1778: IFFALSE 1853
// begin PrepareHuman ( false , class_soldier , 7 ) ;
1780: LD_INT 0
1782: PPUSH
1783: LD_INT 1
1785: PPUSH
1786: LD_INT 7
1788: PPUSH
1789: CALL_OW 380
// un := CreateHuman ;
1793: LD_ADDR_VAR 0 3
1797: PUSH
1798: CALL_OW 44
1802: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1803: LD_VAR 0 3
1807: PPUSH
1808: LD_INT 1
1810: PPUSH
1811: CALL_OW 233
// SetClass ( un , class_bazooker ) ;
1815: LD_VAR 0 3
1819: PPUSH
1820: LD_INT 9
1822: PPUSH
1823: CALL_OW 336
// PlaceUnitArea ( un , kabulRu2Area , false ) ;
1827: LD_VAR 0 3
1831: PPUSH
1832: LD_INT 8
1834: PPUSH
1835: LD_INT 0
1837: PPUSH
1838: CALL_OW 49
// ComHold ( un ) ;
1842: LD_VAR 0 3
1846: PPUSH
1847: CALL_OW 140
// end else
1851: GO 1968
// begin vc_chassis := ru_heavy_wheeled ;
1853: LD_ADDR_OWVAR 37
1857: PUSH
1858: LD_INT 23
1860: ST_TO_ADDR
// vc_engine := engine_combustion ;
1861: LD_ADDR_OWVAR 39
1865: PUSH
1866: LD_INT 1
1868: ST_TO_ADDR
// vc_control := control_manual ;
1869: LD_ADDR_OWVAR 38
1873: PUSH
1874: LD_INT 1
1876: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
1877: LD_ADDR_OWVAR 40
1881: PUSH
1882: LD_INT 44
1884: PUSH
1885: LD_INT 43
1887: PUSH
1888: LD_INT 45
1890: PUSH
1891: EMPTY
1892: LIST
1893: LIST
1894: LIST
1895: PUSH
1896: LD_INT 1
1898: PPUSH
1899: LD_INT 3
1901: PPUSH
1902: CALL_OW 12
1906: ARRAY
1907: ST_TO_ADDR
// un := CreateVehicle ;
1908: LD_ADDR_VAR 0 3
1912: PUSH
1913: CALL_OW 45
1917: ST_TO_ADDR
// SetDir ( un , 4 ) ;
1918: LD_VAR 0 3
1922: PPUSH
1923: LD_INT 4
1925: PPUSH
1926: CALL_OW 233
// PlaceUnitArea ( un , kabulRu2Area , false ) ;
1930: LD_VAR 0 3
1934: PPUSH
1935: LD_INT 8
1937: PPUSH
1938: LD_INT 0
1940: PPUSH
1941: CALL_OW 49
// ComHold ( un ) ;
1945: LD_VAR 0 3
1949: PPUSH
1950: CALL_OW 140
// PlaceHumanInUnit ( CreateHuman , un ) ;
1954: CALL_OW 44
1958: PPUSH
1959: LD_VAR 0 3
1963: PPUSH
1964: CALL_OW 52
// end ; kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
1968: LD_ADDR_EXP 17
1972: PUSH
1973: LD_EXP 17
1977: PPUSH
1978: LD_EXP 17
1982: PUSH
1983: LD_INT 1
1985: PLUS
1986: PPUSH
1987: LD_VAR 0 3
1991: PPUSH
1992: CALL_OW 1
1996: ST_TO_ADDR
// end ;
1997: GO 1765
1999: POP
2000: POP
// for i := 1 to 5 do
2001: LD_ADDR_VAR 0 2
2005: PUSH
2006: DOUBLE
2007: LD_INT 1
2009: DEC
2010: ST_TO_ADDR
2011: LD_INT 5
2013: PUSH
2014: FOR_TO
2015: IFFALSE 2119
// begin PrepareHuman ( false , class_soldier , 7 ) ;
2017: LD_INT 0
2019: PPUSH
2020: LD_INT 1
2022: PPUSH
2023: LD_INT 7
2025: PPUSH
2026: CALL_OW 380
// un := CreateHuman ;
2030: LD_ADDR_VAR 0 3
2034: PUSH
2035: CALL_OW 44
2039: ST_TO_ADDR
// SetDir ( un , 0 ) ;
2040: LD_VAR 0 3
2044: PPUSH
2045: LD_INT 0
2047: PPUSH
2048: CALL_OW 233
// SetClass ( un , class_bazooker ) ;
2052: LD_VAR 0 3
2056: PPUSH
2057: LD_INT 9
2059: PPUSH
2060: CALL_OW 336
// PlaceUnitArea ( un , kabulRu3Area , false ) ;
2064: LD_VAR 0 3
2068: PPUSH
2069: LD_INT 9
2071: PPUSH
2072: LD_INT 0
2074: PPUSH
2075: CALL_OW 49
// ComHold ( un ) ;
2079: LD_VAR 0 3
2083: PPUSH
2084: CALL_OW 140
// kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
2088: LD_ADDR_EXP 17
2092: PUSH
2093: LD_EXP 17
2097: PPUSH
2098: LD_EXP 17
2102: PUSH
2103: LD_INT 1
2105: PLUS
2106: PPUSH
2107: LD_VAR 0 3
2111: PPUSH
2112: CALL_OW 1
2116: ST_TO_ADDR
// end ;
2117: GO 2014
2119: POP
2120: POP
// for i := 1 to 12 do
2121: LD_ADDR_VAR 0 2
2125: PUSH
2126: DOUBLE
2127: LD_INT 1
2129: DEC
2130: ST_TO_ADDR
2131: LD_INT 12
2133: PUSH
2134: FOR_TO
2135: IFFALSE 2372
// begin if Prob ( 22 ) then
2137: LD_INT 22
2139: PPUSH
2140: CALL_OW 13
2144: IFFALSE 2207
// begin PrepareHuman ( false , class_soldier , 7 ) ;
2146: LD_INT 0
2148: PPUSH
2149: LD_INT 1
2151: PPUSH
2152: LD_INT 7
2154: PPUSH
2155: CALL_OW 380
// un := CreateHuman ;
2159: LD_ADDR_VAR 0 3
2163: PUSH
2164: CALL_OW 44
2168: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2169: LD_VAR 0 3
2173: PPUSH
2174: LD_INT 3
2176: PPUSH
2177: CALL_OW 233
// PlaceUnitArea ( un , heikeRuArea , false ) ;
2181: LD_VAR 0 3
2185: PPUSH
2186: LD_INT 4
2188: PPUSH
2189: LD_INT 0
2191: PPUSH
2192: CALL_OW 49
// ComHold ( un ) ;
2196: LD_VAR 0 3
2200: PPUSH
2201: CALL_OW 140
// end else
2205: GO 2341
// begin vc_chassis := [ ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] ;
2207: LD_ADDR_OWVAR 37
2211: PUSH
2212: LD_INT 22
2214: PUSH
2215: LD_INT 24
2217: PUSH
2218: EMPTY
2219: LIST
2220: LIST
2221: PUSH
2222: LD_INT 1
2224: PPUSH
2225: LD_INT 2
2227: PPUSH
2228: CALL_OW 12
2232: ARRAY
2233: ST_TO_ADDR
// vc_engine := engine_combustion ;
2234: LD_ADDR_OWVAR 39
2238: PUSH
2239: LD_INT 1
2241: ST_TO_ADDR
// vc_control := control_manual ;
2242: LD_ADDR_OWVAR 38
2246: PUSH
2247: LD_INT 1
2249: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
2250: LD_ADDR_OWVAR 40
2254: PUSH
2255: LD_INT 44
2257: PUSH
2258: LD_INT 43
2260: PUSH
2261: LD_INT 45
2263: PUSH
2264: EMPTY
2265: LIST
2266: LIST
2267: LIST
2268: PUSH
2269: LD_INT 1
2271: PPUSH
2272: LD_INT 3
2274: PPUSH
2275: CALL_OW 12
2279: ARRAY
2280: ST_TO_ADDR
// un := CreateVehicle ;
2281: LD_ADDR_VAR 0 3
2285: PUSH
2286: CALL_OW 45
2290: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2291: LD_VAR 0 3
2295: PPUSH
2296: LD_INT 3
2298: PPUSH
2299: CALL_OW 233
// PlaceUnitArea ( un , heikeRuArea , false ) ;
2303: LD_VAR 0 3
2307: PPUSH
2308: LD_INT 4
2310: PPUSH
2311: LD_INT 0
2313: PPUSH
2314: CALL_OW 49
// ComHold ( un ) ;
2318: LD_VAR 0 3
2322: PPUSH
2323: CALL_OW 140
// PlaceHumanInUnit ( CreateHuman , un ) ;
2327: CALL_OW 44
2331: PPUSH
2332: LD_VAR 0 3
2336: PPUSH
2337: CALL_OW 52
// end ; heikeAttackers := Replace ( heikeAttackers , heikeAttackers + 1 , un ) ;
2341: LD_ADDR_EXP 18
2345: PUSH
2346: LD_EXP 18
2350: PPUSH
2351: LD_EXP 18
2355: PUSH
2356: LD_INT 1
2358: PLUS
2359: PPUSH
2360: LD_VAR 0 3
2364: PPUSH
2365: CALL_OW 1
2369: ST_TO_ADDR
// end ;
2370: GO 2134
2372: POP
2373: POP
// end ;
2374: LD_VAR 0 1
2378: RET
// every 0 0$2 trigger startAttackOnKabul and kabulAttackers do var i ;
2379: LD_EXP 3
2383: PUSH
2384: LD_EXP 17
2388: AND
2389: IFFALSE 2449
2391: GO 2393
2393: DISABLE
2394: LD_INT 0
2396: PPUSH
// begin enable ;
2397: ENABLE
// for i in kabulAttackers do
2398: LD_ADDR_VAR 0 1
2402: PUSH
2403: LD_EXP 17
2407: PUSH
2408: FOR_IN
2409: IFFALSE 2447
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 5 ] ) , i ) ) ;
2411: LD_VAR 0 1
2415: PPUSH
2416: LD_INT 22
2418: PUSH
2419: LD_INT 5
2421: PUSH
2422: EMPTY
2423: LIST
2424: LIST
2425: PPUSH
2426: CALL_OW 69
2430: PPUSH
2431: LD_VAR 0 1
2435: PPUSH
2436: CALL_OW 74
2440: PPUSH
2441: CALL_OW 115
2445: GO 2408
2447: POP
2448: POP
// end ;
2449: PPOPN 1
2451: END
// every 0 0$2 trigger startAttackOnHeike and heikeAttackers do var i ;
2452: LD_EXP 4
2456: PUSH
2457: LD_EXP 18
2461: AND
2462: IFFALSE 2522
2464: GO 2466
2466: DISABLE
2467: LD_INT 0
2469: PPUSH
// begin enable ;
2470: ENABLE
// for i in heikeAttackers do
2471: LD_ADDR_VAR 0 1
2475: PUSH
2476: LD_EXP 18
2480: PUSH
2481: FOR_IN
2482: IFFALSE 2520
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ) ;
2484: LD_VAR 0 1
2488: PPUSH
2489: LD_INT 22
2491: PUSH
2492: LD_INT 2
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: PPUSH
2499: CALL_OW 69
2503: PPUSH
2504: LD_VAR 0 1
2508: PPUSH
2509: CALL_OW 74
2513: PPUSH
2514: CALL_OW 115
2518: GO 2481
2520: POP
2521: POP
// end ; end_of_file
2522: PPOPN 1
2524: END
// export function Action ; var i ; begin
2525: LD_INT 0
2527: PPUSH
2528: PPUSH
// music_nat := nation_russian ;
2529: LD_ADDR_OWVAR 71
2533: PUSH
2534: LD_INT 3
2536: ST_TO_ADDR
// Video ( true ) ;
2537: LD_INT 1
2539: PPUSH
2540: CALL 40138 0 1
// PlaceSeeing ( 111 , 168 , 2 , - 25 ) ;
2544: LD_INT 111
2546: PPUSH
2547: LD_INT 168
2549: PPUSH
2550: LD_INT 2
2552: PPUSH
2553: LD_INT 25
2555: NEG
2556: PPUSH
2557: CALL_OW 330
// PlaceSeeing ( 102 , 47 , 2 , - 40 ) ;
2561: LD_INT 102
2563: PPUSH
2564: LD_INT 47
2566: PPUSH
2567: LD_INT 2
2569: PPUSH
2570: LD_INT 40
2572: NEG
2573: PPUSH
2574: CALL_OW 330
// CenterNowOnUnits ( Heike ) ;
2578: LD_EXP 5
2582: PPUSH
2583: CALL_OW 87
// startAttackOnKabul := true ;
2587: LD_ADDR_EXP 3
2591: PUSH
2592: LD_INT 1
2594: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2595: LD_INT 70
2597: PPUSH
2598: CALL_OW 67
// CenterOnXY ( 102 , 47 ) ;
2602: LD_INT 102
2604: PPUSH
2605: LD_INT 47
2607: PPUSH
2608: CALL_OW 84
// if Givi then
2612: LD_EXP 6
2616: IFFALSE 2807
// begin ComMoveXY ( Givi , 113 , 162 ) ;
2618: LD_EXP 6
2622: PPUSH
2623: LD_INT 113
2625: PPUSH
2626: LD_INT 162
2628: PPUSH
2629: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
2633: LD_EXP 6
2637: PPUSH
2638: LD_EXP 5
2642: PPUSH
2643: CALL_OW 179
// Say ( Givi , DG-Intro-1 ) ;
2647: LD_EXP 6
2651: PPUSH
2652: LD_STRING DG-Intro-1
2654: PPUSH
2655: CALL_OW 88
// Say ( Givi , DG-Intro-2 ) ;
2659: LD_EXP 6
2663: PPUSH
2664: LD_STRING DG-Intro-2
2666: PPUSH
2667: CALL_OW 88
// CenterOnUnits ( Heike ) ;
2671: LD_EXP 5
2675: PPUSH
2676: CALL_OW 85
// RemoveSeeing ( 102 , 47 , 2 ) ;
2680: LD_INT 102
2682: PPUSH
2683: LD_INT 47
2685: PPUSH
2686: LD_INT 2
2688: PPUSH
2689: CALL_OW 331
// wait ( 0 0$0.3 ) ;
2693: LD_INT 10
2695: PPUSH
2696: CALL_OW 67
// Say ( Heike , DH-Intro-3 ) ;
2700: LD_EXP 5
2704: PPUSH
2705: LD_STRING DH-Intro-3
2707: PPUSH
2708: CALL_OW 88
// if Mike then
2712: LD_EXP 7
2716: IFFALSE 2805
// begin PlaceSeeing ( 92 , 129 , 2 , - 18 ) ;
2718: LD_INT 92
2720: PPUSH
2721: LD_INT 129
2723: PPUSH
2724: LD_INT 2
2726: PPUSH
2727: LD_INT 18
2729: NEG
2730: PPUSH
2731: CALL_OW 330
// CenterOnXY ( 92 , 129 ) ;
2735: LD_INT 92
2737: PPUSH
2738: LD_INT 129
2740: PPUSH
2741: CALL_OW 84
// ComTurnUnit ( [ Mike , Kaia ] , Heike ) ;
2745: LD_EXP 7
2749: PUSH
2750: LD_EXP 10
2754: PUSH
2755: EMPTY
2756: LIST
2757: LIST
2758: PPUSH
2759: LD_EXP 5
2763: PPUSH
2764: CALL_OW 119
// Say ( Mike , DM-Intro-4 ) ;
2768: LD_EXP 7
2772: PPUSH
2773: LD_STRING DM-Intro-4
2775: PPUSH
2776: CALL_OW 88
// Say ( Kaia , DK-Intro-5 ) ;
2780: LD_EXP 10
2784: PPUSH
2785: LD_STRING DK-Intro-5
2787: PPUSH
2788: CALL_OW 88
// RemoveSeeing ( 92 , 129 , 2 ) ;
2792: LD_INT 92
2794: PPUSH
2795: LD_INT 129
2797: PPUSH
2798: LD_INT 2
2800: PPUSH
2801: CALL_OW 331
// end ; end else
2805: GO 3060
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-1 ) then
2807: LD_EXP 16
2811: PPUSH
2812: LD_INT 26
2814: PUSH
2815: LD_INT 1
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: PPUSH
2822: CALL_OW 72
2826: PUSH
2827: LD_INT 1
2829: ARRAY
2830: PPUSH
2831: LD_STRING DArm-Intro-b-1
2833: PPUSH
2834: CALL_OW 88
2838: NOT
2839: IFFALSE 2872
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-1 ) ;
2841: LD_EXP 16
2845: PPUSH
2846: LD_INT 26
2848: PUSH
2849: LD_INT 2
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: PPUSH
2856: CALL_OW 72
2860: PUSH
2861: LD_INT 1
2863: ARRAY
2864: PPUSH
2865: LD_STRING DArf-Intro-b-1
2867: PPUSH
2868: CALL_OW 88
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-2 ) then
2872: LD_EXP 16
2876: PPUSH
2877: LD_INT 26
2879: PUSH
2880: LD_INT 1
2882: PUSH
2883: EMPTY
2884: LIST
2885: LIST
2886: PPUSH
2887: CALL_OW 72
2891: PUSH
2892: LD_INT 1
2894: ARRAY
2895: PPUSH
2896: LD_STRING DArm-Intro-b-2
2898: PPUSH
2899: CALL_OW 88
2903: NOT
2904: IFFALSE 2937
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-2 ) ;
2906: LD_EXP 16
2910: PPUSH
2911: LD_INT 26
2913: PUSH
2914: LD_INT 2
2916: PUSH
2917: EMPTY
2918: LIST
2919: LIST
2920: PPUSH
2921: CALL_OW 72
2925: PUSH
2926: LD_INT 1
2928: ARRAY
2929: PPUSH
2930: LD_STRING DArf-Intro-b-2
2932: PPUSH
2933: CALL_OW 88
// if Kaia then
2937: LD_EXP 10
2941: IFFALSE 2955
// Say ( Kaia , DK-Intro-5 ) ;
2943: LD_EXP 10
2947: PPUSH
2948: LD_STRING DK-Intro-5
2950: PPUSH
2951: CALL_OW 88
// PlaceSeeing ( 92 , 129 , 2 , - 18 ) ;
2955: LD_INT 92
2957: PPUSH
2958: LD_INT 129
2960: PPUSH
2961: LD_INT 2
2963: PPUSH
2964: LD_INT 18
2966: NEG
2967: PPUSH
2968: CALL_OW 330
// CenterOnXY ( 92 , 129 ) ;
2972: LD_INT 92
2974: PPUSH
2975: LD_INT 129
2977: PPUSH
2978: CALL_OW 84
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-4 ) then
2982: LD_EXP 16
2986: PPUSH
2987: LD_INT 26
2989: PUSH
2990: LD_INT 1
2992: PUSH
2993: EMPTY
2994: LIST
2995: LIST
2996: PPUSH
2997: CALL_OW 72
3001: PUSH
3002: LD_INT 1
3004: ARRAY
3005: PPUSH
3006: LD_STRING DArm-Intro-b-4
3008: PPUSH
3009: CALL_OW 88
3013: NOT
3014: IFFALSE 3047
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-4 ) ;
3016: LD_EXP 16
3020: PPUSH
3021: LD_INT 26
3023: PUSH
3024: LD_INT 2
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: PPUSH
3031: CALL_OW 72
3035: PUSH
3036: LD_INT 1
3038: ARRAY
3039: PPUSH
3040: LD_STRING DArf-Intro-b-4
3042: PPUSH
3043: CALL_OW 88
// RemoveSeeing ( 92 , 129 , 2 ) ;
3047: LD_INT 92
3049: PPUSH
3050: LD_INT 129
3052: PPUSH
3053: LD_INT 2
3055: PPUSH
3056: CALL_OW 331
// end ; CenterOnUnits ( Heike ) ;
3060: LD_EXP 5
3064: PPUSH
3065: CALL_OW 85
// SayRadio ( Burlak , DB-Intro-6 ) ;
3069: LD_EXP 19
3073: PPUSH
3074: LD_STRING DB-Intro-6
3076: PPUSH
3077: CALL_OW 94
// Say ( Heike , DH-Intro-7 ) ;
3081: LD_EXP 5
3085: PPUSH
3086: LD_STRING DH-Intro-7
3088: PPUSH
3089: CALL_OW 88
// SayRadio ( Burlak , DB-Intro-8 ) ;
3093: LD_EXP 19
3097: PPUSH
3098: LD_STRING DB-Intro-8
3100: PPUSH
3101: CALL_OW 94
// SayRadio ( Burlak , DB-Intro-9 ) ;
3105: LD_EXP 19
3109: PPUSH
3110: LD_STRING DB-Intro-9
3112: PPUSH
3113: CALL_OW 94
// if Givi then
3117: LD_EXP 6
3121: IFFALSE 3149
// begin Say ( Givi , DG-Intro-10 ) ;
3123: LD_EXP 6
3127: PPUSH
3128: LD_STRING DG-Intro-10
3130: PPUSH
3131: CALL_OW 88
// Say ( Kaia , DK-Intro-11 ) ;
3135: LD_EXP 10
3139: PPUSH
3140: LD_STRING DK-Intro-11
3142: PPUSH
3143: CALL_OW 88
// end else
3147: GO 3214
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-10 ) then
3149: LD_EXP 16
3153: PPUSH
3154: LD_INT 26
3156: PUSH
3157: LD_INT 1
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: PPUSH
3164: CALL_OW 72
3168: PUSH
3169: LD_INT 1
3171: ARRAY
3172: PPUSH
3173: LD_STRING DArm-Intro-b-10
3175: PPUSH
3176: CALL_OW 88
3180: NOT
3181: IFFALSE 3214
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-10 ) ;
3183: LD_EXP 16
3187: PPUSH
3188: LD_INT 26
3190: PUSH
3191: LD_INT 2
3193: PUSH
3194: EMPTY
3195: LIST
3196: LIST
3197: PPUSH
3198: CALL_OW 72
3202: PUSH
3203: LD_INT 1
3205: ARRAY
3206: PPUSH
3207: LD_STRING DArf-Intro-b-10
3209: PPUSH
3210: CALL_OW 88
// Say ( Mike , DM-Intro-12 ) ;
3214: LD_EXP 7
3218: PPUSH
3219: LD_STRING DM-Intro-12
3221: PPUSH
3222: CALL_OW 88
// Say ( Kurt , DKs-Intro-13 ) ;
3226: LD_EXP 14
3230: PPUSH
3231: LD_STRING DKs-Intro-13
3233: PPUSH
3234: CALL_OW 88
// Say ( Kamil , DKam-Intro-14 ) ;
3238: LD_EXP 9
3242: PPUSH
3243: LD_STRING DKam-Intro-14
3245: PPUSH
3246: CALL_OW 88
// case Query ( QSurrender ) of 1 :
3250: LD_STRING QSurrender
3252: PPUSH
3253: CALL_OW 97
3257: PUSH
3258: LD_INT 1
3260: DOUBLE
3261: EQUAL
3262: IFTRUE 3266
3264: GO 3285
3266: POP
// begin Say ( Heike , DH-Intro-16 ) ;
3267: LD_EXP 5
3271: PPUSH
3272: LD_STRING DH-Intro-16
3274: PPUSH
3275: CALL_OW 88
// missionEnd ;
3279: CALL 3411 0 0
// end ; 2 :
3283: GO 3329
3285: LD_INT 2
3287: DOUBLE
3288: EQUAL
3289: IFTRUE 3293
3291: GO 3328
3293: POP
// begin Say ( Heike , DH-Intro-a-16 ) ;
3294: LD_EXP 5
3298: PPUSH
3299: LD_STRING DH-Intro-a-16
3301: PPUSH
3302: CALL_OW 88
// SayRadio ( Burlak , DB-Intro-a-17 ) ;
3306: LD_EXP 19
3310: PPUSH
3311: LD_STRING DB-Intro-a-17
3313: PPUSH
3314: CALL_OW 94
// startAttackOnHeike := true ;
3318: LD_ADDR_EXP 4
3322: PUSH
3323: LD_INT 1
3325: ST_TO_ADDR
// end ; end ;
3326: GO 3329
3328: POP
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
3329: LD_ADDR_VAR 0 2
3333: PUSH
3334: LD_INT 22
3336: PUSH
3337: LD_INT 2
3339: PUSH
3340: EMPTY
3341: LIST
3342: LIST
3343: PPUSH
3344: CALL_OW 69
3348: PUSH
3349: FOR_IN
3350: IFFALSE 3369
// ComAgressiveMove ( i , 98 , 143 ) ;
3352: LD_VAR 0 2
3356: PPUSH
3357: LD_INT 98
3359: PPUSH
3360: LD_INT 143
3362: PPUSH
3363: CALL_OW 114
3367: GO 3349
3369: POP
3370: POP
// CenterOnXY ( 98 , 143 ) ;
3371: LD_INT 98
3373: PPUSH
3374: LD_INT 143
3376: PPUSH
3377: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
3381: LD_INT 35
3383: PPUSH
3384: CALL_OW 67
// until IsDead ( Heike ) ;
3388: LD_EXP 5
3392: PPUSH
3393: CALL_OW 301
3397: IFFALSE 3381
// YouLost ( HeikeNoSurrender ) ;
3399: LD_STRING HeikeNoSurrender
3401: PPUSH
3402: CALL_OW 104
// end ;
3406: LD_VAR 0 1
3410: RET
// function MissionEnd ( ) ; begin
3411: LD_INT 0
3413: PPUSH
// ChangeMap ( 1 , %_cont ) ;
3414: LD_INT 1
3416: PPUSH
3417: LD_STRING %_cont
3419: PPUSH
3420: CALL_OW 340
// end ; end_of_file
3424: LD_VAR 0 1
3428: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
3429: LD_INT 0
3431: PPUSH
3432: PPUSH
// if exist_mode then
3433: LD_VAR 0 2
3437: IFFALSE 3462
// unit := CreateCharacter ( prefix & ident ) else
3439: LD_ADDR_VAR 0 5
3443: PUSH
3444: LD_VAR 0 3
3448: PUSH
3449: LD_VAR 0 1
3453: STR
3454: PPUSH
3455: CALL_OW 34
3459: ST_TO_ADDR
3460: GO 3477
// unit := NewCharacter ( ident ) ;
3462: LD_ADDR_VAR 0 5
3466: PUSH
3467: LD_VAR 0 1
3471: PPUSH
3472: CALL_OW 25
3476: ST_TO_ADDR
// result := unit ;
3477: LD_ADDR_VAR 0 4
3481: PUSH
3482: LD_VAR 0 5
3486: ST_TO_ADDR
// end ;
3487: LD_VAR 0 4
3491: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3492: LD_INT 0
3494: PPUSH
3495: PPUSH
// if not side or not nation then
3496: LD_VAR 0 1
3500: NOT
3501: PUSH
3502: LD_VAR 0 2
3506: NOT
3507: OR
3508: IFFALSE 3512
// exit ;
3510: GO 4280
// case nation of nation_american :
3512: LD_VAR 0 2
3516: PUSH
3517: LD_INT 1
3519: DOUBLE
3520: EQUAL
3521: IFTRUE 3525
3523: GO 3739
3525: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
3526: LD_ADDR_VAR 0 4
3530: PUSH
3531: LD_INT 35
3533: PUSH
3534: LD_INT 45
3536: PUSH
3537: LD_INT 46
3539: PUSH
3540: LD_INT 47
3542: PUSH
3543: LD_INT 82
3545: PUSH
3546: LD_INT 83
3548: PUSH
3549: LD_INT 84
3551: PUSH
3552: LD_INT 85
3554: PUSH
3555: LD_INT 86
3557: PUSH
3558: LD_INT 1
3560: PUSH
3561: LD_INT 2
3563: PUSH
3564: LD_INT 6
3566: PUSH
3567: LD_INT 15
3569: PUSH
3570: LD_INT 16
3572: PUSH
3573: LD_INT 7
3575: PUSH
3576: LD_INT 12
3578: PUSH
3579: LD_INT 13
3581: PUSH
3582: LD_INT 10
3584: PUSH
3585: LD_INT 14
3587: PUSH
3588: LD_INT 20
3590: PUSH
3591: LD_INT 21
3593: PUSH
3594: LD_INT 22
3596: PUSH
3597: LD_INT 25
3599: PUSH
3600: LD_INT 32
3602: PUSH
3603: LD_INT 27
3605: PUSH
3606: LD_INT 36
3608: PUSH
3609: LD_INT 69
3611: PUSH
3612: LD_INT 39
3614: PUSH
3615: LD_INT 34
3617: PUSH
3618: LD_INT 40
3620: PUSH
3621: LD_INT 48
3623: PUSH
3624: LD_INT 49
3626: PUSH
3627: LD_INT 50
3629: PUSH
3630: LD_INT 51
3632: PUSH
3633: LD_INT 52
3635: PUSH
3636: LD_INT 53
3638: PUSH
3639: LD_INT 54
3641: PUSH
3642: LD_INT 55
3644: PUSH
3645: LD_INT 56
3647: PUSH
3648: LD_INT 57
3650: PUSH
3651: LD_INT 58
3653: PUSH
3654: LD_INT 59
3656: PUSH
3657: LD_INT 60
3659: PUSH
3660: LD_INT 61
3662: PUSH
3663: LD_INT 62
3665: PUSH
3666: LD_INT 80
3668: PUSH
3669: LD_INT 82
3671: PUSH
3672: LD_INT 83
3674: PUSH
3675: LD_INT 84
3677: PUSH
3678: LD_INT 85
3680: PUSH
3681: LD_INT 86
3683: PUSH
3684: EMPTY
3685: LIST
3686: LIST
3687: LIST
3688: LIST
3689: LIST
3690: LIST
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: LIST
3699: LIST
3700: LIST
3701: LIST
3702: LIST
3703: LIST
3704: LIST
3705: LIST
3706: LIST
3707: LIST
3708: LIST
3709: LIST
3710: LIST
3711: LIST
3712: LIST
3713: LIST
3714: LIST
3715: LIST
3716: LIST
3717: LIST
3718: LIST
3719: LIST
3720: LIST
3721: LIST
3722: LIST
3723: LIST
3724: LIST
3725: LIST
3726: LIST
3727: LIST
3728: LIST
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: LIST
3734: LIST
3735: LIST
3736: ST_TO_ADDR
3737: GO 4204
3739: LD_INT 2
3741: DOUBLE
3742: EQUAL
3743: IFTRUE 3747
3745: GO 3973
3747: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3748: LD_ADDR_VAR 0 4
3752: PUSH
3753: LD_INT 35
3755: PUSH
3756: LD_INT 45
3758: PUSH
3759: LD_INT 46
3761: PUSH
3762: LD_INT 47
3764: PUSH
3765: LD_INT 82
3767: PUSH
3768: LD_INT 83
3770: PUSH
3771: LD_INT 84
3773: PUSH
3774: LD_INT 85
3776: PUSH
3777: LD_INT 87
3779: PUSH
3780: LD_INT 70
3782: PUSH
3783: LD_INT 1
3785: PUSH
3786: LD_INT 11
3788: PUSH
3789: LD_INT 3
3791: PUSH
3792: LD_INT 4
3794: PUSH
3795: LD_INT 5
3797: PUSH
3798: LD_INT 6
3800: PUSH
3801: LD_INT 15
3803: PUSH
3804: LD_INT 18
3806: PUSH
3807: LD_INT 7
3809: PUSH
3810: LD_INT 17
3812: PUSH
3813: LD_INT 8
3815: PUSH
3816: LD_INT 20
3818: PUSH
3819: LD_INT 21
3821: PUSH
3822: LD_INT 22
3824: PUSH
3825: LD_INT 72
3827: PUSH
3828: LD_INT 26
3830: PUSH
3831: LD_INT 69
3833: PUSH
3834: LD_INT 39
3836: PUSH
3837: LD_INT 40
3839: PUSH
3840: LD_INT 41
3842: PUSH
3843: LD_INT 42
3845: PUSH
3846: LD_INT 43
3848: PUSH
3849: LD_INT 48
3851: PUSH
3852: LD_INT 49
3854: PUSH
3855: LD_INT 50
3857: PUSH
3858: LD_INT 51
3860: PUSH
3861: LD_INT 52
3863: PUSH
3864: LD_INT 53
3866: PUSH
3867: LD_INT 54
3869: PUSH
3870: LD_INT 55
3872: PUSH
3873: LD_INT 56
3875: PUSH
3876: LD_INT 60
3878: PUSH
3879: LD_INT 61
3881: PUSH
3882: LD_INT 62
3884: PUSH
3885: LD_INT 66
3887: PUSH
3888: LD_INT 67
3890: PUSH
3891: LD_INT 68
3893: PUSH
3894: LD_INT 81
3896: PUSH
3897: LD_INT 82
3899: PUSH
3900: LD_INT 83
3902: PUSH
3903: LD_INT 84
3905: PUSH
3906: LD_INT 85
3908: PUSH
3909: LD_INT 87
3911: PUSH
3912: LD_INT 88
3914: PUSH
3915: EMPTY
3916: LIST
3917: LIST
3918: LIST
3919: LIST
3920: LIST
3921: LIST
3922: LIST
3923: LIST
3924: LIST
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: LIST
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: LIST
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: LIST
3951: LIST
3952: LIST
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: LIST
3958: LIST
3959: LIST
3960: LIST
3961: LIST
3962: LIST
3963: LIST
3964: LIST
3965: LIST
3966: LIST
3967: LIST
3968: LIST
3969: LIST
3970: ST_TO_ADDR
3971: GO 4204
3973: LD_INT 3
3975: DOUBLE
3976: EQUAL
3977: IFTRUE 3981
3979: GO 4203
3981: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3982: LD_ADDR_VAR 0 4
3986: PUSH
3987: LD_INT 46
3989: PUSH
3990: LD_INT 47
3992: PUSH
3993: LD_INT 1
3995: PUSH
3996: LD_INT 2
3998: PUSH
3999: LD_INT 82
4001: PUSH
4002: LD_INT 83
4004: PUSH
4005: LD_INT 84
4007: PUSH
4008: LD_INT 85
4010: PUSH
4011: LD_INT 86
4013: PUSH
4014: LD_INT 11
4016: PUSH
4017: LD_INT 9
4019: PUSH
4020: LD_INT 20
4022: PUSH
4023: LD_INT 19
4025: PUSH
4026: LD_INT 21
4028: PUSH
4029: LD_INT 24
4031: PUSH
4032: LD_INT 22
4034: PUSH
4035: LD_INT 25
4037: PUSH
4038: LD_INT 28
4040: PUSH
4041: LD_INT 29
4043: PUSH
4044: LD_INT 30
4046: PUSH
4047: LD_INT 31
4049: PUSH
4050: LD_INT 37
4052: PUSH
4053: LD_INT 38
4055: PUSH
4056: LD_INT 32
4058: PUSH
4059: LD_INT 27
4061: PUSH
4062: LD_INT 33
4064: PUSH
4065: LD_INT 69
4067: PUSH
4068: LD_INT 39
4070: PUSH
4071: LD_INT 34
4073: PUSH
4074: LD_INT 40
4076: PUSH
4077: LD_INT 71
4079: PUSH
4080: LD_INT 23
4082: PUSH
4083: LD_INT 44
4085: PUSH
4086: LD_INT 48
4088: PUSH
4089: LD_INT 49
4091: PUSH
4092: LD_INT 50
4094: PUSH
4095: LD_INT 51
4097: PUSH
4098: LD_INT 52
4100: PUSH
4101: LD_INT 53
4103: PUSH
4104: LD_INT 54
4106: PUSH
4107: LD_INT 55
4109: PUSH
4110: LD_INT 56
4112: PUSH
4113: LD_INT 57
4115: PUSH
4116: LD_INT 58
4118: PUSH
4119: LD_INT 59
4121: PUSH
4122: LD_INT 63
4124: PUSH
4125: LD_INT 64
4127: PUSH
4128: LD_INT 65
4130: PUSH
4131: LD_INT 82
4133: PUSH
4134: LD_INT 83
4136: PUSH
4137: LD_INT 84
4139: PUSH
4140: LD_INT 85
4142: PUSH
4143: LD_INT 86
4145: PUSH
4146: EMPTY
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: LIST
4152: LIST
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: LIST
4170: LIST
4171: LIST
4172: LIST
4173: LIST
4174: LIST
4175: LIST
4176: LIST
4177: LIST
4178: LIST
4179: LIST
4180: LIST
4181: LIST
4182: LIST
4183: LIST
4184: LIST
4185: LIST
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: LIST
4191: LIST
4192: LIST
4193: LIST
4194: LIST
4195: LIST
4196: LIST
4197: LIST
4198: LIST
4199: LIST
4200: ST_TO_ADDR
4201: GO 4204
4203: POP
// if state > - 1 and state < 3 then
4204: LD_VAR 0 3
4208: PUSH
4209: LD_INT 1
4211: NEG
4212: GREATER
4213: PUSH
4214: LD_VAR 0 3
4218: PUSH
4219: LD_INT 3
4221: LESS
4222: AND
4223: IFFALSE 4280
// for i in result do
4225: LD_ADDR_VAR 0 5
4229: PUSH
4230: LD_VAR 0 4
4234: PUSH
4235: FOR_IN
4236: IFFALSE 4278
// if GetTech ( i , side ) <> state then
4238: LD_VAR 0 5
4242: PPUSH
4243: LD_VAR 0 1
4247: PPUSH
4248: CALL_OW 321
4252: PUSH
4253: LD_VAR 0 3
4257: NONEQUAL
4258: IFFALSE 4276
// result := result diff i ;
4260: LD_ADDR_VAR 0 4
4264: PUSH
4265: LD_VAR 0 4
4269: PUSH
4270: LD_VAR 0 5
4274: DIFF
4275: ST_TO_ADDR
4276: GO 4235
4278: POP
4279: POP
// end ;
4280: LD_VAR 0 4
4284: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
4285: LD_INT 0
4287: PPUSH
4288: PPUSH
4289: PPUSH
// result := true ;
4290: LD_ADDR_VAR 0 3
4294: PUSH
4295: LD_INT 1
4297: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
4298: LD_ADDR_VAR 0 5
4302: PUSH
4303: LD_VAR 0 2
4307: PPUSH
4308: CALL_OW 480
4312: ST_TO_ADDR
// if not tmp then
4313: LD_VAR 0 5
4317: NOT
4318: IFFALSE 4322
// exit ;
4320: GO 4371
// for i in tmp do
4322: LD_ADDR_VAR 0 4
4326: PUSH
4327: LD_VAR 0 5
4331: PUSH
4332: FOR_IN
4333: IFFALSE 4369
// if GetTech ( i , side ) <> state_researched then
4335: LD_VAR 0 4
4339: PPUSH
4340: LD_VAR 0 1
4344: PPUSH
4345: CALL_OW 321
4349: PUSH
4350: LD_INT 2
4352: NONEQUAL
4353: IFFALSE 4367
// begin result := false ;
4355: LD_ADDR_VAR 0 3
4359: PUSH
4360: LD_INT 0
4362: ST_TO_ADDR
// exit ;
4363: POP
4364: POP
4365: GO 4371
// end ;
4367: GO 4332
4369: POP
4370: POP
// end ;
4371: LD_VAR 0 3
4375: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
4376: LD_INT 0
4378: PPUSH
4379: PPUSH
4380: PPUSH
4381: PPUSH
4382: PPUSH
4383: PPUSH
4384: PPUSH
4385: PPUSH
4386: PPUSH
4387: PPUSH
4388: PPUSH
4389: PPUSH
4390: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
4391: LD_VAR 0 1
4395: NOT
4396: PUSH
4397: LD_VAR 0 1
4401: PPUSH
4402: CALL_OW 257
4406: PUSH
4407: LD_INT 9
4409: NONEQUAL
4410: OR
4411: IFFALSE 4415
// exit ;
4413: GO 4988
// side := GetSide ( unit ) ;
4415: LD_ADDR_VAR 0 9
4419: PUSH
4420: LD_VAR 0 1
4424: PPUSH
4425: CALL_OW 255
4429: ST_TO_ADDR
// tech_space := tech_spacanom ;
4430: LD_ADDR_VAR 0 12
4434: PUSH
4435: LD_INT 29
4437: ST_TO_ADDR
// tech_time := tech_taurad ;
4438: LD_ADDR_VAR 0 13
4442: PUSH
4443: LD_INT 28
4445: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4446: LD_ADDR_VAR 0 11
4450: PUSH
4451: LD_VAR 0 1
4455: PPUSH
4456: CALL_OW 310
4460: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4461: LD_VAR 0 11
4465: PPUSH
4466: CALL_OW 247
4470: PUSH
4471: LD_INT 2
4473: EQUAL
4474: IFFALSE 4478
// exit ;
4476: GO 4988
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4478: LD_ADDR_VAR 0 8
4482: PUSH
4483: LD_INT 81
4485: PUSH
4486: LD_VAR 0 9
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: PUSH
4495: LD_INT 3
4497: PUSH
4498: LD_INT 21
4500: PUSH
4501: LD_INT 3
4503: PUSH
4504: EMPTY
4505: LIST
4506: LIST
4507: PUSH
4508: EMPTY
4509: LIST
4510: LIST
4511: PUSH
4512: EMPTY
4513: LIST
4514: LIST
4515: PPUSH
4516: CALL_OW 69
4520: ST_TO_ADDR
// if not tmp then
4521: LD_VAR 0 8
4525: NOT
4526: IFFALSE 4530
// exit ;
4528: GO 4988
// if in_unit then
4530: LD_VAR 0 11
4534: IFFALSE 4558
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4536: LD_ADDR_VAR 0 10
4540: PUSH
4541: LD_VAR 0 8
4545: PPUSH
4546: LD_VAR 0 11
4550: PPUSH
4551: CALL_OW 74
4555: ST_TO_ADDR
4556: GO 4578
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4558: LD_ADDR_VAR 0 10
4562: PUSH
4563: LD_VAR 0 8
4567: PPUSH
4568: LD_VAR 0 1
4572: PPUSH
4573: CALL_OW 74
4577: ST_TO_ADDR
// if not enemy then
4578: LD_VAR 0 10
4582: NOT
4583: IFFALSE 4587
// exit ;
4585: GO 4988
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4587: LD_VAR 0 11
4591: PUSH
4592: LD_VAR 0 11
4596: PPUSH
4597: LD_VAR 0 10
4601: PPUSH
4602: CALL_OW 296
4606: PUSH
4607: LD_INT 13
4609: GREATER
4610: AND
4611: PUSH
4612: LD_VAR 0 1
4616: PPUSH
4617: LD_VAR 0 10
4621: PPUSH
4622: CALL_OW 296
4626: PUSH
4627: LD_INT 12
4629: GREATER
4630: OR
4631: IFFALSE 4635
// exit ;
4633: GO 4988
// missile := [ 1 ] ;
4635: LD_ADDR_VAR 0 14
4639: PUSH
4640: LD_INT 1
4642: PUSH
4643: EMPTY
4644: LIST
4645: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4646: LD_VAR 0 9
4650: PPUSH
4651: LD_VAR 0 12
4655: PPUSH
4656: CALL_OW 325
4660: IFFALSE 4689
// missile := Insert ( missile , missile + 1 , 2 ) ;
4662: LD_ADDR_VAR 0 14
4666: PUSH
4667: LD_VAR 0 14
4671: PPUSH
4672: LD_VAR 0 14
4676: PUSH
4677: LD_INT 1
4679: PLUS
4680: PPUSH
4681: LD_INT 2
4683: PPUSH
4684: CALL_OW 2
4688: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4689: LD_VAR 0 9
4693: PPUSH
4694: LD_VAR 0 13
4698: PPUSH
4699: CALL_OW 325
4703: PUSH
4704: LD_VAR 0 10
4708: PPUSH
4709: CALL_OW 255
4713: PPUSH
4714: LD_VAR 0 13
4718: PPUSH
4719: CALL_OW 325
4723: NOT
4724: AND
4725: IFFALSE 4754
// missile := Insert ( missile , missile + 1 , 3 ) ;
4727: LD_ADDR_VAR 0 14
4731: PUSH
4732: LD_VAR 0 14
4736: PPUSH
4737: LD_VAR 0 14
4741: PUSH
4742: LD_INT 1
4744: PLUS
4745: PPUSH
4746: LD_INT 3
4748: PPUSH
4749: CALL_OW 2
4753: ST_TO_ADDR
// if missile < 2 then
4754: LD_VAR 0 14
4758: PUSH
4759: LD_INT 2
4761: LESS
4762: IFFALSE 4766
// exit ;
4764: GO 4988
// x := GetX ( enemy ) ;
4766: LD_ADDR_VAR 0 4
4770: PUSH
4771: LD_VAR 0 10
4775: PPUSH
4776: CALL_OW 250
4780: ST_TO_ADDR
// y := GetY ( enemy ) ;
4781: LD_ADDR_VAR 0 5
4785: PUSH
4786: LD_VAR 0 10
4790: PPUSH
4791: CALL_OW 251
4795: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4796: LD_ADDR_VAR 0 6
4800: PUSH
4801: LD_VAR 0 4
4805: PUSH
4806: LD_INT 1
4808: NEG
4809: PPUSH
4810: LD_INT 1
4812: PPUSH
4813: CALL_OW 12
4817: PLUS
4818: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4819: LD_ADDR_VAR 0 7
4823: PUSH
4824: LD_VAR 0 5
4828: PUSH
4829: LD_INT 1
4831: NEG
4832: PPUSH
4833: LD_INT 1
4835: PPUSH
4836: CALL_OW 12
4840: PLUS
4841: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4842: LD_VAR 0 6
4846: PPUSH
4847: LD_VAR 0 7
4851: PPUSH
4852: CALL_OW 488
4856: NOT
4857: IFFALSE 4879
// begin _x := x ;
4859: LD_ADDR_VAR 0 6
4863: PUSH
4864: LD_VAR 0 4
4868: ST_TO_ADDR
// _y := y ;
4869: LD_ADDR_VAR 0 7
4873: PUSH
4874: LD_VAR 0 5
4878: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4879: LD_ADDR_VAR 0 3
4883: PUSH
4884: LD_INT 1
4886: PPUSH
4887: LD_VAR 0 14
4891: PPUSH
4892: CALL_OW 12
4896: ST_TO_ADDR
// case i of 1 :
4897: LD_VAR 0 3
4901: PUSH
4902: LD_INT 1
4904: DOUBLE
4905: EQUAL
4906: IFTRUE 4910
4908: GO 4927
4910: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4911: LD_VAR 0 1
4915: PPUSH
4916: LD_VAR 0 10
4920: PPUSH
4921: CALL_OW 115
4925: GO 4988
4927: LD_INT 2
4929: DOUBLE
4930: EQUAL
4931: IFTRUE 4935
4933: GO 4957
4935: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4936: LD_VAR 0 1
4940: PPUSH
4941: LD_VAR 0 6
4945: PPUSH
4946: LD_VAR 0 7
4950: PPUSH
4951: CALL_OW 153
4955: GO 4988
4957: LD_INT 3
4959: DOUBLE
4960: EQUAL
4961: IFTRUE 4965
4963: GO 4987
4965: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4966: LD_VAR 0 1
4970: PPUSH
4971: LD_VAR 0 6
4975: PPUSH
4976: LD_VAR 0 7
4980: PPUSH
4981: CALL_OW 154
4985: GO 4988
4987: POP
// end ;
4988: LD_VAR 0 2
4992: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4993: LD_INT 0
4995: PPUSH
4996: PPUSH
4997: PPUSH
4998: PPUSH
4999: PPUSH
5000: PPUSH
// if not unit or not building then
5001: LD_VAR 0 1
5005: NOT
5006: PUSH
5007: LD_VAR 0 2
5011: NOT
5012: OR
5013: IFFALSE 5017
// exit ;
5015: GO 5175
// x := GetX ( building ) ;
5017: LD_ADDR_VAR 0 5
5021: PUSH
5022: LD_VAR 0 2
5026: PPUSH
5027: CALL_OW 250
5031: ST_TO_ADDR
// y := GetY ( building ) ;
5032: LD_ADDR_VAR 0 6
5036: PUSH
5037: LD_VAR 0 2
5041: PPUSH
5042: CALL_OW 251
5046: ST_TO_ADDR
// for i = 0 to 5 do
5047: LD_ADDR_VAR 0 4
5051: PUSH
5052: DOUBLE
5053: LD_INT 0
5055: DEC
5056: ST_TO_ADDR
5057: LD_INT 5
5059: PUSH
5060: FOR_TO
5061: IFFALSE 5173
// begin _x := ShiftX ( x , i , 3 ) ;
5063: LD_ADDR_VAR 0 7
5067: PUSH
5068: LD_VAR 0 5
5072: PPUSH
5073: LD_VAR 0 4
5077: PPUSH
5078: LD_INT 3
5080: PPUSH
5081: CALL_OW 272
5085: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
5086: LD_ADDR_VAR 0 8
5090: PUSH
5091: LD_VAR 0 6
5095: PPUSH
5096: LD_VAR 0 4
5100: PPUSH
5101: LD_INT 3
5103: PPUSH
5104: CALL_OW 273
5108: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5109: LD_VAR 0 7
5113: PPUSH
5114: LD_VAR 0 8
5118: PPUSH
5119: CALL_OW 488
5123: NOT
5124: IFFALSE 5128
// continue ;
5126: GO 5060
// if HexInfo ( _x , _y ) = 0 then
5128: LD_VAR 0 7
5132: PPUSH
5133: LD_VAR 0 8
5137: PPUSH
5138: CALL_OW 428
5142: PUSH
5143: LD_INT 0
5145: EQUAL
5146: IFFALSE 5171
// begin ComMoveXY ( unit , _x , _y ) ;
5148: LD_VAR 0 1
5152: PPUSH
5153: LD_VAR 0 7
5157: PPUSH
5158: LD_VAR 0 8
5162: PPUSH
5163: CALL_OW 111
// exit ;
5167: POP
5168: POP
5169: GO 5175
// end ; end ;
5171: GO 5060
5173: POP
5174: POP
// end ;
5175: LD_VAR 0 3
5179: RET
// export function ScanBase ( side , base_area ) ; begin
5180: LD_INT 0
5182: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
5183: LD_ADDR_VAR 0 3
5187: PUSH
5188: LD_VAR 0 2
5192: PPUSH
5193: LD_INT 81
5195: PUSH
5196: LD_VAR 0 1
5200: PUSH
5201: EMPTY
5202: LIST
5203: LIST
5204: PPUSH
5205: CALL_OW 70
5209: ST_TO_ADDR
// end ;
5210: LD_VAR 0 3
5214: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
5215: LD_INT 0
5217: PPUSH
5218: PPUSH
5219: PPUSH
5220: PPUSH
// result := false ;
5221: LD_ADDR_VAR 0 2
5225: PUSH
5226: LD_INT 0
5228: ST_TO_ADDR
// side := GetSide ( unit ) ;
5229: LD_ADDR_VAR 0 3
5233: PUSH
5234: LD_VAR 0 1
5238: PPUSH
5239: CALL_OW 255
5243: ST_TO_ADDR
// nat := GetNation ( unit ) ;
5244: LD_ADDR_VAR 0 4
5248: PUSH
5249: LD_VAR 0 1
5253: PPUSH
5254: CALL_OW 248
5258: ST_TO_ADDR
// case nat of 1 :
5259: LD_VAR 0 4
5263: PUSH
5264: LD_INT 1
5266: DOUBLE
5267: EQUAL
5268: IFTRUE 5272
5270: GO 5283
5272: POP
// tech := tech_lassight ; 2 :
5273: LD_ADDR_VAR 0 5
5277: PUSH
5278: LD_INT 12
5280: ST_TO_ADDR
5281: GO 5322
5283: LD_INT 2
5285: DOUBLE
5286: EQUAL
5287: IFTRUE 5291
5289: GO 5302
5291: POP
// tech := tech_mortar ; 3 :
5292: LD_ADDR_VAR 0 5
5296: PUSH
5297: LD_INT 41
5299: ST_TO_ADDR
5300: GO 5322
5302: LD_INT 3
5304: DOUBLE
5305: EQUAL
5306: IFTRUE 5310
5308: GO 5321
5310: POP
// tech := tech_bazooka ; end ;
5311: LD_ADDR_VAR 0 5
5315: PUSH
5316: LD_INT 44
5318: ST_TO_ADDR
5319: GO 5322
5321: POP
// if Researched ( side , tech ) then
5322: LD_VAR 0 3
5326: PPUSH
5327: LD_VAR 0 5
5331: PPUSH
5332: CALL_OW 325
5336: IFFALSE 5363
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
5338: LD_ADDR_VAR 0 2
5342: PUSH
5343: LD_INT 5
5345: PUSH
5346: LD_INT 8
5348: PUSH
5349: LD_INT 9
5351: PUSH
5352: EMPTY
5353: LIST
5354: LIST
5355: LIST
5356: PUSH
5357: LD_VAR 0 4
5361: ARRAY
5362: ST_TO_ADDR
// end ;
5363: LD_VAR 0 2
5367: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
5368: LD_INT 0
5370: PPUSH
5371: PPUSH
5372: PPUSH
// if not mines then
5373: LD_VAR 0 2
5377: NOT
5378: IFFALSE 5382
// exit ;
5380: GO 5526
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5382: LD_ADDR_VAR 0 5
5386: PUSH
5387: LD_INT 81
5389: PUSH
5390: LD_VAR 0 1
5394: PUSH
5395: EMPTY
5396: LIST
5397: LIST
5398: PUSH
5399: LD_INT 3
5401: PUSH
5402: LD_INT 21
5404: PUSH
5405: LD_INT 3
5407: PUSH
5408: EMPTY
5409: LIST
5410: LIST
5411: PUSH
5412: EMPTY
5413: LIST
5414: LIST
5415: PUSH
5416: EMPTY
5417: LIST
5418: LIST
5419: PPUSH
5420: CALL_OW 69
5424: ST_TO_ADDR
// for i in mines do
5425: LD_ADDR_VAR 0 4
5429: PUSH
5430: LD_VAR 0 2
5434: PUSH
5435: FOR_IN
5436: IFFALSE 5524
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5438: LD_VAR 0 4
5442: PUSH
5443: LD_INT 1
5445: ARRAY
5446: PPUSH
5447: LD_VAR 0 4
5451: PUSH
5452: LD_INT 2
5454: ARRAY
5455: PPUSH
5456: CALL_OW 458
5460: NOT
5461: IFFALSE 5465
// continue ;
5463: GO 5435
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5465: LD_VAR 0 4
5469: PUSH
5470: LD_INT 1
5472: ARRAY
5473: PPUSH
5474: LD_VAR 0 4
5478: PUSH
5479: LD_INT 2
5481: ARRAY
5482: PPUSH
5483: CALL_OW 428
5487: PUSH
5488: LD_VAR 0 5
5492: IN
5493: IFFALSE 5522
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5495: LD_VAR 0 4
5499: PUSH
5500: LD_INT 1
5502: ARRAY
5503: PPUSH
5504: LD_VAR 0 4
5508: PUSH
5509: LD_INT 2
5511: ARRAY
5512: PPUSH
5513: LD_VAR 0 1
5517: PPUSH
5518: CALL_OW 456
// end ;
5522: GO 5435
5524: POP
5525: POP
// end ;
5526: LD_VAR 0 3
5530: RET
// export function Count ( array ) ; var i ; begin
5531: LD_INT 0
5533: PPUSH
5534: PPUSH
// result := 0 ;
5535: LD_ADDR_VAR 0 2
5539: PUSH
5540: LD_INT 0
5542: ST_TO_ADDR
// for i in array do
5543: LD_ADDR_VAR 0 3
5547: PUSH
5548: LD_VAR 0 1
5552: PUSH
5553: FOR_IN
5554: IFFALSE 5578
// if i then
5556: LD_VAR 0 3
5560: IFFALSE 5576
// result := result + 1 ;
5562: LD_ADDR_VAR 0 2
5566: PUSH
5567: LD_VAR 0 2
5571: PUSH
5572: LD_INT 1
5574: PLUS
5575: ST_TO_ADDR
5576: GO 5553
5578: POP
5579: POP
// end ;
5580: LD_VAR 0 2
5584: RET
// export function IsEmpty ( building ) ; begin
5585: LD_INT 0
5587: PPUSH
// if not building then
5588: LD_VAR 0 1
5592: NOT
5593: IFFALSE 5597
// exit ;
5595: GO 5640
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5597: LD_ADDR_VAR 0 2
5601: PUSH
5602: LD_VAR 0 1
5606: PUSH
5607: LD_INT 22
5609: PUSH
5610: LD_VAR 0 1
5614: PPUSH
5615: CALL_OW 255
5619: PUSH
5620: EMPTY
5621: LIST
5622: LIST
5623: PUSH
5624: LD_INT 58
5626: PUSH
5627: EMPTY
5628: LIST
5629: PUSH
5630: EMPTY
5631: LIST
5632: LIST
5633: PPUSH
5634: CALL_OW 69
5638: IN
5639: ST_TO_ADDR
// end ;
5640: LD_VAR 0 2
5644: RET
// export function IsNotFull ( building ) ; begin
5645: LD_INT 0
5647: PPUSH
// if not building then
5648: LD_VAR 0 1
5652: NOT
5653: IFFALSE 5657
// exit ;
5655: GO 5676
// result := UnitsInside ( building ) < 6 ;
5657: LD_ADDR_VAR 0 2
5661: PUSH
5662: LD_VAR 0 1
5666: PPUSH
5667: CALL_OW 313
5671: PUSH
5672: LD_INT 6
5674: LESS
5675: ST_TO_ADDR
// end ;
5676: LD_VAR 0 2
5680: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5681: LD_INT 0
5683: PPUSH
5684: PPUSH
5685: PPUSH
5686: PPUSH
// tmp := [ ] ;
5687: LD_ADDR_VAR 0 3
5691: PUSH
5692: EMPTY
5693: ST_TO_ADDR
// list := [ ] ;
5694: LD_ADDR_VAR 0 5
5698: PUSH
5699: EMPTY
5700: ST_TO_ADDR
// for i = 16 to 25 do
5701: LD_ADDR_VAR 0 4
5705: PUSH
5706: DOUBLE
5707: LD_INT 16
5709: DEC
5710: ST_TO_ADDR
5711: LD_INT 25
5713: PUSH
5714: FOR_TO
5715: IFFALSE 5788
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5717: LD_ADDR_VAR 0 3
5721: PUSH
5722: LD_VAR 0 3
5726: PUSH
5727: LD_INT 22
5729: PUSH
5730: LD_VAR 0 1
5734: PPUSH
5735: CALL_OW 255
5739: PUSH
5740: EMPTY
5741: LIST
5742: LIST
5743: PUSH
5744: LD_INT 91
5746: PUSH
5747: LD_VAR 0 1
5751: PUSH
5752: LD_INT 6
5754: PUSH
5755: EMPTY
5756: LIST
5757: LIST
5758: LIST
5759: PUSH
5760: LD_INT 30
5762: PUSH
5763: LD_VAR 0 4
5767: PUSH
5768: EMPTY
5769: LIST
5770: LIST
5771: PUSH
5772: EMPTY
5773: LIST
5774: LIST
5775: LIST
5776: PUSH
5777: EMPTY
5778: LIST
5779: PPUSH
5780: CALL_OW 69
5784: ADD
5785: ST_TO_ADDR
5786: GO 5714
5788: POP
5789: POP
// for i = 1 to tmp do
5790: LD_ADDR_VAR 0 4
5794: PUSH
5795: DOUBLE
5796: LD_INT 1
5798: DEC
5799: ST_TO_ADDR
5800: LD_VAR 0 3
5804: PUSH
5805: FOR_TO
5806: IFFALSE 5894
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5808: LD_ADDR_VAR 0 5
5812: PUSH
5813: LD_VAR 0 5
5817: PUSH
5818: LD_VAR 0 3
5822: PUSH
5823: LD_VAR 0 4
5827: ARRAY
5828: PPUSH
5829: CALL_OW 266
5833: PUSH
5834: LD_VAR 0 3
5838: PUSH
5839: LD_VAR 0 4
5843: ARRAY
5844: PPUSH
5845: CALL_OW 250
5849: PUSH
5850: LD_VAR 0 3
5854: PUSH
5855: LD_VAR 0 4
5859: ARRAY
5860: PPUSH
5861: CALL_OW 251
5865: PUSH
5866: LD_VAR 0 3
5870: PUSH
5871: LD_VAR 0 4
5875: ARRAY
5876: PPUSH
5877: CALL_OW 254
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: PUSH
5888: EMPTY
5889: LIST
5890: ADD
5891: ST_TO_ADDR
5892: GO 5805
5894: POP
5895: POP
// result := list ;
5896: LD_ADDR_VAR 0 2
5900: PUSH
5901: LD_VAR 0 5
5905: ST_TO_ADDR
// end ;
5906: LD_VAR 0 2
5910: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5911: LD_INT 0
5913: PPUSH
5914: PPUSH
5915: PPUSH
5916: PPUSH
5917: PPUSH
5918: PPUSH
5919: PPUSH
// if not factory then
5920: LD_VAR 0 1
5924: NOT
5925: IFFALSE 5929
// exit ;
5927: GO 6522
// if control = control_apeman then
5929: LD_VAR 0 4
5933: PUSH
5934: LD_INT 5
5936: EQUAL
5937: IFFALSE 6046
// begin tmp := UnitsInside ( factory ) ;
5939: LD_ADDR_VAR 0 8
5943: PUSH
5944: LD_VAR 0 1
5948: PPUSH
5949: CALL_OW 313
5953: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5954: LD_VAR 0 8
5958: PPUSH
5959: LD_INT 25
5961: PUSH
5962: LD_INT 12
5964: PUSH
5965: EMPTY
5966: LIST
5967: LIST
5968: PPUSH
5969: CALL_OW 72
5973: NOT
5974: IFFALSE 5984
// control := control_manual ;
5976: LD_ADDR_VAR 0 4
5980: PUSH
5981: LD_INT 1
5983: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5984: LD_ADDR_VAR 0 8
5988: PUSH
5989: LD_VAR 0 1
5993: PPUSH
5994: CALL 5681 0 1
5998: ST_TO_ADDR
// if tmp then
5999: LD_VAR 0 8
6003: IFFALSE 6046
// begin for i in tmp do
6005: LD_ADDR_VAR 0 7
6009: PUSH
6010: LD_VAR 0 8
6014: PUSH
6015: FOR_IN
6016: IFFALSE 6044
// if i [ 1 ] = b_ext_radio then
6018: LD_VAR 0 7
6022: PUSH
6023: LD_INT 1
6025: ARRAY
6026: PUSH
6027: LD_INT 22
6029: EQUAL
6030: IFFALSE 6042
// begin control := control_remote ;
6032: LD_ADDR_VAR 0 4
6036: PUSH
6037: LD_INT 2
6039: ST_TO_ADDR
// break ;
6040: GO 6044
// end ;
6042: GO 6015
6044: POP
6045: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6046: LD_VAR 0 1
6050: PPUSH
6051: LD_VAR 0 2
6055: PPUSH
6056: LD_VAR 0 3
6060: PPUSH
6061: LD_VAR 0 4
6065: PPUSH
6066: LD_VAR 0 5
6070: PPUSH
6071: CALL_OW 448
6075: IFFALSE 6110
// begin result := [ chassis , engine , control , weapon ] ;
6077: LD_ADDR_VAR 0 6
6081: PUSH
6082: LD_VAR 0 2
6086: PUSH
6087: LD_VAR 0 3
6091: PUSH
6092: LD_VAR 0 4
6096: PUSH
6097: LD_VAR 0 5
6101: PUSH
6102: EMPTY
6103: LIST
6104: LIST
6105: LIST
6106: LIST
6107: ST_TO_ADDR
// exit ;
6108: GO 6522
// end ; _chassis := AvailableChassisList ( factory ) ;
6110: LD_ADDR_VAR 0 9
6114: PUSH
6115: LD_VAR 0 1
6119: PPUSH
6120: CALL_OW 475
6124: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
6125: LD_ADDR_VAR 0 11
6129: PUSH
6130: LD_VAR 0 1
6134: PPUSH
6135: CALL_OW 476
6139: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
6140: LD_ADDR_VAR 0 12
6144: PUSH
6145: LD_VAR 0 1
6149: PPUSH
6150: CALL_OW 477
6154: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
6155: LD_ADDR_VAR 0 10
6159: PUSH
6160: LD_VAR 0 1
6164: PPUSH
6165: CALL_OW 478
6169: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
6170: LD_VAR 0 9
6174: NOT
6175: PUSH
6176: LD_VAR 0 11
6180: NOT
6181: OR
6182: PUSH
6183: LD_VAR 0 12
6187: NOT
6188: OR
6189: PUSH
6190: LD_VAR 0 10
6194: NOT
6195: OR
6196: IFFALSE 6231
// begin result := [ chassis , engine , control , weapon ] ;
6198: LD_ADDR_VAR 0 6
6202: PUSH
6203: LD_VAR 0 2
6207: PUSH
6208: LD_VAR 0 3
6212: PUSH
6213: LD_VAR 0 4
6217: PUSH
6218: LD_VAR 0 5
6222: PUSH
6223: EMPTY
6224: LIST
6225: LIST
6226: LIST
6227: LIST
6228: ST_TO_ADDR
// exit ;
6229: GO 6522
// end ; if not chassis in _chassis then
6231: LD_VAR 0 2
6235: PUSH
6236: LD_VAR 0 9
6240: IN
6241: NOT
6242: IFFALSE 6268
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
6244: LD_ADDR_VAR 0 2
6248: PUSH
6249: LD_VAR 0 9
6253: PUSH
6254: LD_INT 1
6256: PPUSH
6257: LD_VAR 0 9
6261: PPUSH
6262: CALL_OW 12
6266: ARRAY
6267: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
6268: LD_VAR 0 2
6272: PPUSH
6273: LD_VAR 0 3
6277: PPUSH
6278: CALL 6527 0 2
6282: NOT
6283: IFFALSE 6342
// repeat engine := _engine [ 1 ] ;
6285: LD_ADDR_VAR 0 3
6289: PUSH
6290: LD_VAR 0 11
6294: PUSH
6295: LD_INT 1
6297: ARRAY
6298: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
6299: LD_ADDR_VAR 0 11
6303: PUSH
6304: LD_VAR 0 11
6308: PPUSH
6309: LD_INT 1
6311: PPUSH
6312: CALL_OW 3
6316: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
6317: LD_VAR 0 2
6321: PPUSH
6322: LD_VAR 0 3
6326: PPUSH
6327: CALL 6527 0 2
6331: PUSH
6332: LD_VAR 0 11
6336: PUSH
6337: EMPTY
6338: EQUAL
6339: OR
6340: IFFALSE 6285
// if not control in _control then
6342: LD_VAR 0 4
6346: PUSH
6347: LD_VAR 0 12
6351: IN
6352: NOT
6353: IFFALSE 6379
// control := _control [ rand ( 1 , _control ) ] ;
6355: LD_ADDR_VAR 0 4
6359: PUSH
6360: LD_VAR 0 12
6364: PUSH
6365: LD_INT 1
6367: PPUSH
6368: LD_VAR 0 12
6372: PPUSH
6373: CALL_OW 12
6377: ARRAY
6378: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
6379: LD_VAR 0 2
6383: PPUSH
6384: LD_VAR 0 5
6388: PPUSH
6389: CALL 6747 0 2
6393: NOT
6394: IFFALSE 6453
// repeat weapon := _weapon [ 1 ] ;
6396: LD_ADDR_VAR 0 5
6400: PUSH
6401: LD_VAR 0 10
6405: PUSH
6406: LD_INT 1
6408: ARRAY
6409: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
6410: LD_ADDR_VAR 0 10
6414: PUSH
6415: LD_VAR 0 10
6419: PPUSH
6420: LD_INT 1
6422: PPUSH
6423: CALL_OW 3
6427: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6428: LD_VAR 0 2
6432: PPUSH
6433: LD_VAR 0 5
6437: PPUSH
6438: CALL 6747 0 2
6442: PUSH
6443: LD_VAR 0 10
6447: PUSH
6448: EMPTY
6449: EQUAL
6450: OR
6451: IFFALSE 6396
// result := [ ] ;
6453: LD_ADDR_VAR 0 6
6457: PUSH
6458: EMPTY
6459: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6460: LD_VAR 0 1
6464: PPUSH
6465: LD_VAR 0 2
6469: PPUSH
6470: LD_VAR 0 3
6474: PPUSH
6475: LD_VAR 0 4
6479: PPUSH
6480: LD_VAR 0 5
6484: PPUSH
6485: CALL_OW 448
6489: IFFALSE 6522
// result := [ chassis , engine , control , weapon ] ;
6491: LD_ADDR_VAR 0 6
6495: PUSH
6496: LD_VAR 0 2
6500: PUSH
6501: LD_VAR 0 3
6505: PUSH
6506: LD_VAR 0 4
6510: PUSH
6511: LD_VAR 0 5
6515: PUSH
6516: EMPTY
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: ST_TO_ADDR
// end ;
6522: LD_VAR 0 6
6526: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6527: LD_INT 0
6529: PPUSH
// if not chassis or not engine then
6530: LD_VAR 0 1
6534: NOT
6535: PUSH
6536: LD_VAR 0 2
6540: NOT
6541: OR
6542: IFFALSE 6546
// exit ;
6544: GO 6742
// case engine of engine_solar :
6546: LD_VAR 0 2
6550: PUSH
6551: LD_INT 2
6553: DOUBLE
6554: EQUAL
6555: IFTRUE 6559
6557: GO 6597
6559: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6560: LD_ADDR_VAR 0 3
6564: PUSH
6565: LD_INT 11
6567: PUSH
6568: LD_INT 12
6570: PUSH
6571: LD_INT 13
6573: PUSH
6574: LD_INT 14
6576: PUSH
6577: LD_INT 1
6579: PUSH
6580: LD_INT 2
6582: PUSH
6583: LD_INT 3
6585: PUSH
6586: EMPTY
6587: LIST
6588: LIST
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: ST_TO_ADDR
6595: GO 6726
6597: LD_INT 1
6599: DOUBLE
6600: EQUAL
6601: IFTRUE 6605
6603: GO 6667
6605: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6606: LD_ADDR_VAR 0 3
6610: PUSH
6611: LD_INT 11
6613: PUSH
6614: LD_INT 12
6616: PUSH
6617: LD_INT 13
6619: PUSH
6620: LD_INT 14
6622: PUSH
6623: LD_INT 1
6625: PUSH
6626: LD_INT 2
6628: PUSH
6629: LD_INT 3
6631: PUSH
6632: LD_INT 4
6634: PUSH
6635: LD_INT 5
6637: PUSH
6638: LD_INT 21
6640: PUSH
6641: LD_INT 23
6643: PUSH
6644: LD_INT 22
6646: PUSH
6647: LD_INT 24
6649: PUSH
6650: EMPTY
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: LIST
6661: LIST
6662: LIST
6663: LIST
6664: ST_TO_ADDR
6665: GO 6726
6667: LD_INT 3
6669: DOUBLE
6670: EQUAL
6671: IFTRUE 6675
6673: GO 6725
6675: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6676: LD_ADDR_VAR 0 3
6680: PUSH
6681: LD_INT 13
6683: PUSH
6684: LD_INT 14
6686: PUSH
6687: LD_INT 2
6689: PUSH
6690: LD_INT 3
6692: PUSH
6693: LD_INT 4
6695: PUSH
6696: LD_INT 5
6698: PUSH
6699: LD_INT 21
6701: PUSH
6702: LD_INT 22
6704: PUSH
6705: LD_INT 23
6707: PUSH
6708: LD_INT 24
6710: PUSH
6711: EMPTY
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: ST_TO_ADDR
6723: GO 6726
6725: POP
// result := ( chassis in result ) ;
6726: LD_ADDR_VAR 0 3
6730: PUSH
6731: LD_VAR 0 1
6735: PUSH
6736: LD_VAR 0 3
6740: IN
6741: ST_TO_ADDR
// end ;
6742: LD_VAR 0 3
6746: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6747: LD_INT 0
6749: PPUSH
// if not chassis or not weapon then
6750: LD_VAR 0 1
6754: NOT
6755: PUSH
6756: LD_VAR 0 2
6760: NOT
6761: OR
6762: IFFALSE 6766
// exit ;
6764: GO 7828
// case weapon of us_machine_gun :
6766: LD_VAR 0 2
6770: PUSH
6771: LD_INT 2
6773: DOUBLE
6774: EQUAL
6775: IFTRUE 6779
6777: GO 6809
6779: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6780: LD_ADDR_VAR 0 3
6784: PUSH
6785: LD_INT 1
6787: PUSH
6788: LD_INT 2
6790: PUSH
6791: LD_INT 3
6793: PUSH
6794: LD_INT 4
6796: PUSH
6797: LD_INT 5
6799: PUSH
6800: EMPTY
6801: LIST
6802: LIST
6803: LIST
6804: LIST
6805: LIST
6806: ST_TO_ADDR
6807: GO 7812
6809: LD_INT 3
6811: DOUBLE
6812: EQUAL
6813: IFTRUE 6817
6815: GO 6847
6817: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6818: LD_ADDR_VAR 0 3
6822: PUSH
6823: LD_INT 1
6825: PUSH
6826: LD_INT 2
6828: PUSH
6829: LD_INT 3
6831: PUSH
6832: LD_INT 4
6834: PUSH
6835: LD_INT 5
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: LIST
6842: LIST
6843: LIST
6844: ST_TO_ADDR
6845: GO 7812
6847: LD_INT 11
6849: DOUBLE
6850: EQUAL
6851: IFTRUE 6855
6853: GO 6885
6855: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6856: LD_ADDR_VAR 0 3
6860: PUSH
6861: LD_INT 1
6863: PUSH
6864: LD_INT 2
6866: PUSH
6867: LD_INT 3
6869: PUSH
6870: LD_INT 4
6872: PUSH
6873: LD_INT 5
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: LIST
6882: ST_TO_ADDR
6883: GO 7812
6885: LD_INT 4
6887: DOUBLE
6888: EQUAL
6889: IFTRUE 6893
6891: GO 6919
6893: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6894: LD_ADDR_VAR 0 3
6898: PUSH
6899: LD_INT 2
6901: PUSH
6902: LD_INT 3
6904: PUSH
6905: LD_INT 4
6907: PUSH
6908: LD_INT 5
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: ST_TO_ADDR
6917: GO 7812
6919: LD_INT 5
6921: DOUBLE
6922: EQUAL
6923: IFTRUE 6927
6925: GO 6953
6927: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6928: LD_ADDR_VAR 0 3
6932: PUSH
6933: LD_INT 2
6935: PUSH
6936: LD_INT 3
6938: PUSH
6939: LD_INT 4
6941: PUSH
6942: LD_INT 5
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: LIST
6949: LIST
6950: ST_TO_ADDR
6951: GO 7812
6953: LD_INT 9
6955: DOUBLE
6956: EQUAL
6957: IFTRUE 6961
6959: GO 6987
6961: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6962: LD_ADDR_VAR 0 3
6966: PUSH
6967: LD_INT 2
6969: PUSH
6970: LD_INT 3
6972: PUSH
6973: LD_INT 4
6975: PUSH
6976: LD_INT 5
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: LIST
6983: LIST
6984: ST_TO_ADDR
6985: GO 7812
6987: LD_INT 7
6989: DOUBLE
6990: EQUAL
6991: IFTRUE 6995
6993: GO 7021
6995: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6996: LD_ADDR_VAR 0 3
7000: PUSH
7001: LD_INT 2
7003: PUSH
7004: LD_INT 3
7006: PUSH
7007: LD_INT 4
7009: PUSH
7010: LD_INT 5
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: ST_TO_ADDR
7019: GO 7812
7021: LD_INT 12
7023: DOUBLE
7024: EQUAL
7025: IFTRUE 7029
7027: GO 7055
7029: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
7030: LD_ADDR_VAR 0 3
7034: PUSH
7035: LD_INT 2
7037: PUSH
7038: LD_INT 3
7040: PUSH
7041: LD_INT 4
7043: PUSH
7044: LD_INT 5
7046: PUSH
7047: EMPTY
7048: LIST
7049: LIST
7050: LIST
7051: LIST
7052: ST_TO_ADDR
7053: GO 7812
7055: LD_INT 13
7057: DOUBLE
7058: EQUAL
7059: IFTRUE 7063
7061: GO 7089
7063: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
7064: LD_ADDR_VAR 0 3
7068: PUSH
7069: LD_INT 2
7071: PUSH
7072: LD_INT 3
7074: PUSH
7075: LD_INT 4
7077: PUSH
7078: LD_INT 5
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: LIST
7085: LIST
7086: ST_TO_ADDR
7087: GO 7812
7089: LD_INT 14
7091: DOUBLE
7092: EQUAL
7093: IFTRUE 7097
7095: GO 7115
7097: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
7098: LD_ADDR_VAR 0 3
7102: PUSH
7103: LD_INT 4
7105: PUSH
7106: LD_INT 5
7108: PUSH
7109: EMPTY
7110: LIST
7111: LIST
7112: ST_TO_ADDR
7113: GO 7812
7115: LD_INT 6
7117: DOUBLE
7118: EQUAL
7119: IFTRUE 7123
7121: GO 7141
7123: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
7124: LD_ADDR_VAR 0 3
7128: PUSH
7129: LD_INT 4
7131: PUSH
7132: LD_INT 5
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: ST_TO_ADDR
7139: GO 7812
7141: LD_INT 10
7143: DOUBLE
7144: EQUAL
7145: IFTRUE 7149
7147: GO 7167
7149: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
7150: LD_ADDR_VAR 0 3
7154: PUSH
7155: LD_INT 4
7157: PUSH
7158: LD_INT 5
7160: PUSH
7161: EMPTY
7162: LIST
7163: LIST
7164: ST_TO_ADDR
7165: GO 7812
7167: LD_INT 22
7169: DOUBLE
7170: EQUAL
7171: IFTRUE 7175
7173: GO 7201
7175: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
7176: LD_ADDR_VAR 0 3
7180: PUSH
7181: LD_INT 11
7183: PUSH
7184: LD_INT 12
7186: PUSH
7187: LD_INT 13
7189: PUSH
7190: LD_INT 14
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: ST_TO_ADDR
7199: GO 7812
7201: LD_INT 23
7203: DOUBLE
7204: EQUAL
7205: IFTRUE 7209
7207: GO 7235
7209: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
7210: LD_ADDR_VAR 0 3
7214: PUSH
7215: LD_INT 11
7217: PUSH
7218: LD_INT 12
7220: PUSH
7221: LD_INT 13
7223: PUSH
7224: LD_INT 14
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: ST_TO_ADDR
7233: GO 7812
7235: LD_INT 24
7237: DOUBLE
7238: EQUAL
7239: IFTRUE 7243
7241: GO 7269
7243: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
7244: LD_ADDR_VAR 0 3
7248: PUSH
7249: LD_INT 11
7251: PUSH
7252: LD_INT 12
7254: PUSH
7255: LD_INT 13
7257: PUSH
7258: LD_INT 14
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: LIST
7265: LIST
7266: ST_TO_ADDR
7267: GO 7812
7269: LD_INT 30
7271: DOUBLE
7272: EQUAL
7273: IFTRUE 7277
7275: GO 7303
7277: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
7278: LD_ADDR_VAR 0 3
7282: PUSH
7283: LD_INT 11
7285: PUSH
7286: LD_INT 12
7288: PUSH
7289: LD_INT 13
7291: PUSH
7292: LD_INT 14
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: LIST
7299: LIST
7300: ST_TO_ADDR
7301: GO 7812
7303: LD_INT 25
7305: DOUBLE
7306: EQUAL
7307: IFTRUE 7311
7309: GO 7329
7311: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
7312: LD_ADDR_VAR 0 3
7316: PUSH
7317: LD_INT 13
7319: PUSH
7320: LD_INT 14
7322: PUSH
7323: EMPTY
7324: LIST
7325: LIST
7326: ST_TO_ADDR
7327: GO 7812
7329: LD_INT 27
7331: DOUBLE
7332: EQUAL
7333: IFTRUE 7337
7335: GO 7355
7337: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
7338: LD_ADDR_VAR 0 3
7342: PUSH
7343: LD_INT 13
7345: PUSH
7346: LD_INT 14
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: ST_TO_ADDR
7353: GO 7812
7355: LD_EXP 25
7359: DOUBLE
7360: EQUAL
7361: IFTRUE 7365
7363: GO 7391
7365: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
7366: LD_ADDR_VAR 0 3
7370: PUSH
7371: LD_INT 11
7373: PUSH
7374: LD_INT 12
7376: PUSH
7377: LD_INT 13
7379: PUSH
7380: LD_INT 14
7382: PUSH
7383: EMPTY
7384: LIST
7385: LIST
7386: LIST
7387: LIST
7388: ST_TO_ADDR
7389: GO 7812
7391: LD_INT 28
7393: DOUBLE
7394: EQUAL
7395: IFTRUE 7399
7397: GO 7417
7399: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
7400: LD_ADDR_VAR 0 3
7404: PUSH
7405: LD_INT 13
7407: PUSH
7408: LD_INT 14
7410: PUSH
7411: EMPTY
7412: LIST
7413: LIST
7414: ST_TO_ADDR
7415: GO 7812
7417: LD_INT 29
7419: DOUBLE
7420: EQUAL
7421: IFTRUE 7425
7423: GO 7443
7425: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7426: LD_ADDR_VAR 0 3
7430: PUSH
7431: LD_INT 13
7433: PUSH
7434: LD_INT 14
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: ST_TO_ADDR
7441: GO 7812
7443: LD_INT 31
7445: DOUBLE
7446: EQUAL
7447: IFTRUE 7451
7449: GO 7469
7451: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7452: LD_ADDR_VAR 0 3
7456: PUSH
7457: LD_INT 13
7459: PUSH
7460: LD_INT 14
7462: PUSH
7463: EMPTY
7464: LIST
7465: LIST
7466: ST_TO_ADDR
7467: GO 7812
7469: LD_INT 26
7471: DOUBLE
7472: EQUAL
7473: IFTRUE 7477
7475: GO 7495
7477: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7478: LD_ADDR_VAR 0 3
7482: PUSH
7483: LD_INT 13
7485: PUSH
7486: LD_INT 14
7488: PUSH
7489: EMPTY
7490: LIST
7491: LIST
7492: ST_TO_ADDR
7493: GO 7812
7495: LD_INT 42
7497: DOUBLE
7498: EQUAL
7499: IFTRUE 7503
7501: GO 7529
7503: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7504: LD_ADDR_VAR 0 3
7508: PUSH
7509: LD_INT 21
7511: PUSH
7512: LD_INT 22
7514: PUSH
7515: LD_INT 23
7517: PUSH
7518: LD_INT 24
7520: PUSH
7521: EMPTY
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: ST_TO_ADDR
7527: GO 7812
7529: LD_INT 43
7531: DOUBLE
7532: EQUAL
7533: IFTRUE 7537
7535: GO 7563
7537: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7538: LD_ADDR_VAR 0 3
7542: PUSH
7543: LD_INT 21
7545: PUSH
7546: LD_INT 22
7548: PUSH
7549: LD_INT 23
7551: PUSH
7552: LD_INT 24
7554: PUSH
7555: EMPTY
7556: LIST
7557: LIST
7558: LIST
7559: LIST
7560: ST_TO_ADDR
7561: GO 7812
7563: LD_INT 44
7565: DOUBLE
7566: EQUAL
7567: IFTRUE 7571
7569: GO 7597
7571: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7572: LD_ADDR_VAR 0 3
7576: PUSH
7577: LD_INT 21
7579: PUSH
7580: LD_INT 22
7582: PUSH
7583: LD_INT 23
7585: PUSH
7586: LD_INT 24
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: ST_TO_ADDR
7595: GO 7812
7597: LD_INT 45
7599: DOUBLE
7600: EQUAL
7601: IFTRUE 7605
7603: GO 7631
7605: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7606: LD_ADDR_VAR 0 3
7610: PUSH
7611: LD_INT 21
7613: PUSH
7614: LD_INT 22
7616: PUSH
7617: LD_INT 23
7619: PUSH
7620: LD_INT 24
7622: PUSH
7623: EMPTY
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: ST_TO_ADDR
7629: GO 7812
7631: LD_INT 49
7633: DOUBLE
7634: EQUAL
7635: IFTRUE 7639
7637: GO 7665
7639: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7640: LD_ADDR_VAR 0 3
7644: PUSH
7645: LD_INT 21
7647: PUSH
7648: LD_INT 22
7650: PUSH
7651: LD_INT 23
7653: PUSH
7654: LD_INT 24
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: LIST
7661: LIST
7662: ST_TO_ADDR
7663: GO 7812
7665: LD_INT 51
7667: DOUBLE
7668: EQUAL
7669: IFTRUE 7673
7671: GO 7699
7673: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7674: LD_ADDR_VAR 0 3
7678: PUSH
7679: LD_INT 21
7681: PUSH
7682: LD_INT 22
7684: PUSH
7685: LD_INT 23
7687: PUSH
7688: LD_INT 24
7690: PUSH
7691: EMPTY
7692: LIST
7693: LIST
7694: LIST
7695: LIST
7696: ST_TO_ADDR
7697: GO 7812
7699: LD_INT 52
7701: DOUBLE
7702: EQUAL
7703: IFTRUE 7707
7705: GO 7733
7707: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7708: LD_ADDR_VAR 0 3
7712: PUSH
7713: LD_INT 21
7715: PUSH
7716: LD_INT 22
7718: PUSH
7719: LD_INT 23
7721: PUSH
7722: LD_INT 24
7724: PUSH
7725: EMPTY
7726: LIST
7727: LIST
7728: LIST
7729: LIST
7730: ST_TO_ADDR
7731: GO 7812
7733: LD_INT 53
7735: DOUBLE
7736: EQUAL
7737: IFTRUE 7741
7739: GO 7759
7741: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7742: LD_ADDR_VAR 0 3
7746: PUSH
7747: LD_INT 23
7749: PUSH
7750: LD_INT 24
7752: PUSH
7753: EMPTY
7754: LIST
7755: LIST
7756: ST_TO_ADDR
7757: GO 7812
7759: LD_INT 46
7761: DOUBLE
7762: EQUAL
7763: IFTRUE 7767
7765: GO 7785
7767: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7768: LD_ADDR_VAR 0 3
7772: PUSH
7773: LD_INT 23
7775: PUSH
7776: LD_INT 24
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: ST_TO_ADDR
7783: GO 7812
7785: LD_INT 47
7787: DOUBLE
7788: EQUAL
7789: IFTRUE 7793
7791: GO 7811
7793: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7794: LD_ADDR_VAR 0 3
7798: PUSH
7799: LD_INT 23
7801: PUSH
7802: LD_INT 24
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: ST_TO_ADDR
7809: GO 7812
7811: POP
// result := ( chassis in result ) ;
7812: LD_ADDR_VAR 0 3
7816: PUSH
7817: LD_VAR 0 1
7821: PUSH
7822: LD_VAR 0 3
7826: IN
7827: ST_TO_ADDR
// end ;
7828: LD_VAR 0 3
7832: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7833: LD_INT 0
7835: PPUSH
7836: PPUSH
7837: PPUSH
7838: PPUSH
7839: PPUSH
7840: PPUSH
7841: PPUSH
// result := array ;
7842: LD_ADDR_VAR 0 5
7846: PUSH
7847: LD_VAR 0 1
7851: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7852: LD_VAR 0 1
7856: NOT
7857: PUSH
7858: LD_VAR 0 2
7862: NOT
7863: OR
7864: PUSH
7865: LD_VAR 0 3
7869: NOT
7870: OR
7871: PUSH
7872: LD_VAR 0 2
7876: PUSH
7877: LD_VAR 0 1
7881: GREATER
7882: OR
7883: PUSH
7884: LD_VAR 0 3
7888: PUSH
7889: LD_VAR 0 1
7893: GREATER
7894: OR
7895: IFFALSE 7899
// exit ;
7897: GO 8195
// if direction then
7899: LD_VAR 0 4
7903: IFFALSE 7967
// begin d := 1 ;
7905: LD_ADDR_VAR 0 9
7909: PUSH
7910: LD_INT 1
7912: ST_TO_ADDR
// if i_from > i_to then
7913: LD_VAR 0 2
7917: PUSH
7918: LD_VAR 0 3
7922: GREATER
7923: IFFALSE 7949
// length := ( array - i_from ) + i_to else
7925: LD_ADDR_VAR 0 11
7929: PUSH
7930: LD_VAR 0 1
7934: PUSH
7935: LD_VAR 0 2
7939: MINUS
7940: PUSH
7941: LD_VAR 0 3
7945: PLUS
7946: ST_TO_ADDR
7947: GO 7965
// length := i_to - i_from ;
7949: LD_ADDR_VAR 0 11
7953: PUSH
7954: LD_VAR 0 3
7958: PUSH
7959: LD_VAR 0 2
7963: MINUS
7964: ST_TO_ADDR
// end else
7965: GO 8028
// begin d := - 1 ;
7967: LD_ADDR_VAR 0 9
7971: PUSH
7972: LD_INT 1
7974: NEG
7975: ST_TO_ADDR
// if i_from > i_to then
7976: LD_VAR 0 2
7980: PUSH
7981: LD_VAR 0 3
7985: GREATER
7986: IFFALSE 8006
// length := i_from - i_to else
7988: LD_ADDR_VAR 0 11
7992: PUSH
7993: LD_VAR 0 2
7997: PUSH
7998: LD_VAR 0 3
8002: MINUS
8003: ST_TO_ADDR
8004: GO 8028
// length := ( array - i_to ) + i_from ;
8006: LD_ADDR_VAR 0 11
8010: PUSH
8011: LD_VAR 0 1
8015: PUSH
8016: LD_VAR 0 3
8020: MINUS
8021: PUSH
8022: LD_VAR 0 2
8026: PLUS
8027: ST_TO_ADDR
// end ; if not length then
8028: LD_VAR 0 11
8032: NOT
8033: IFFALSE 8037
// exit ;
8035: GO 8195
// tmp := array ;
8037: LD_ADDR_VAR 0 10
8041: PUSH
8042: LD_VAR 0 1
8046: ST_TO_ADDR
// for i = 1 to length do
8047: LD_ADDR_VAR 0 6
8051: PUSH
8052: DOUBLE
8053: LD_INT 1
8055: DEC
8056: ST_TO_ADDR
8057: LD_VAR 0 11
8061: PUSH
8062: FOR_TO
8063: IFFALSE 8183
// begin for j = 1 to array do
8065: LD_ADDR_VAR 0 7
8069: PUSH
8070: DOUBLE
8071: LD_INT 1
8073: DEC
8074: ST_TO_ADDR
8075: LD_VAR 0 1
8079: PUSH
8080: FOR_TO
8081: IFFALSE 8169
// begin k := j + d ;
8083: LD_ADDR_VAR 0 8
8087: PUSH
8088: LD_VAR 0 7
8092: PUSH
8093: LD_VAR 0 9
8097: PLUS
8098: ST_TO_ADDR
// if k > array then
8099: LD_VAR 0 8
8103: PUSH
8104: LD_VAR 0 1
8108: GREATER
8109: IFFALSE 8119
// k := 1 ;
8111: LD_ADDR_VAR 0 8
8115: PUSH
8116: LD_INT 1
8118: ST_TO_ADDR
// if not k then
8119: LD_VAR 0 8
8123: NOT
8124: IFFALSE 8136
// k := array ;
8126: LD_ADDR_VAR 0 8
8130: PUSH
8131: LD_VAR 0 1
8135: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
8136: LD_ADDR_VAR 0 10
8140: PUSH
8141: LD_VAR 0 10
8145: PPUSH
8146: LD_VAR 0 8
8150: PPUSH
8151: LD_VAR 0 1
8155: PUSH
8156: LD_VAR 0 7
8160: ARRAY
8161: PPUSH
8162: CALL_OW 1
8166: ST_TO_ADDR
// end ;
8167: GO 8080
8169: POP
8170: POP
// array := tmp ;
8171: LD_ADDR_VAR 0 1
8175: PUSH
8176: LD_VAR 0 10
8180: ST_TO_ADDR
// end ;
8181: GO 8062
8183: POP
8184: POP
// result := array ;
8185: LD_ADDR_VAR 0 5
8189: PUSH
8190: LD_VAR 0 1
8194: ST_TO_ADDR
// end ;
8195: LD_VAR 0 5
8199: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
8200: LD_INT 0
8202: PPUSH
8203: PPUSH
// result := 0 ;
8204: LD_ADDR_VAR 0 3
8208: PUSH
8209: LD_INT 0
8211: ST_TO_ADDR
// if not array or not value in array then
8212: LD_VAR 0 1
8216: NOT
8217: PUSH
8218: LD_VAR 0 2
8222: PUSH
8223: LD_VAR 0 1
8227: IN
8228: NOT
8229: OR
8230: IFFALSE 8234
// exit ;
8232: GO 8288
// for i = 1 to array do
8234: LD_ADDR_VAR 0 4
8238: PUSH
8239: DOUBLE
8240: LD_INT 1
8242: DEC
8243: ST_TO_ADDR
8244: LD_VAR 0 1
8248: PUSH
8249: FOR_TO
8250: IFFALSE 8286
// if value = array [ i ] then
8252: LD_VAR 0 2
8256: PUSH
8257: LD_VAR 0 1
8261: PUSH
8262: LD_VAR 0 4
8266: ARRAY
8267: EQUAL
8268: IFFALSE 8284
// begin result := i ;
8270: LD_ADDR_VAR 0 3
8274: PUSH
8275: LD_VAR 0 4
8279: ST_TO_ADDR
// exit ;
8280: POP
8281: POP
8282: GO 8288
// end ;
8284: GO 8249
8286: POP
8287: POP
// end ;
8288: LD_VAR 0 3
8292: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
8293: LD_INT 0
8295: PPUSH
// vc_chassis := chassis ;
8296: LD_ADDR_OWVAR 37
8300: PUSH
8301: LD_VAR 0 1
8305: ST_TO_ADDR
// vc_engine := engine ;
8306: LD_ADDR_OWVAR 39
8310: PUSH
8311: LD_VAR 0 2
8315: ST_TO_ADDR
// vc_control := control ;
8316: LD_ADDR_OWVAR 38
8320: PUSH
8321: LD_VAR 0 3
8325: ST_TO_ADDR
// vc_weapon := weapon ;
8326: LD_ADDR_OWVAR 40
8330: PUSH
8331: LD_VAR 0 4
8335: ST_TO_ADDR
// vc_fuel_battery := fuel ;
8336: LD_ADDR_OWVAR 41
8340: PUSH
8341: LD_VAR 0 5
8345: ST_TO_ADDR
// end ;
8346: LD_VAR 0 6
8350: RET
// export function WantPlant ( unit ) ; var task ; begin
8351: LD_INT 0
8353: PPUSH
8354: PPUSH
// result := false ;
8355: LD_ADDR_VAR 0 2
8359: PUSH
8360: LD_INT 0
8362: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
8363: LD_ADDR_VAR 0 3
8367: PUSH
8368: LD_VAR 0 1
8372: PPUSH
8373: CALL_OW 437
8377: ST_TO_ADDR
// if task then
8378: LD_VAR 0 3
8382: IFFALSE 8410
// if task [ 1 ] [ 1 ] = p then
8384: LD_VAR 0 3
8388: PUSH
8389: LD_INT 1
8391: ARRAY
8392: PUSH
8393: LD_INT 1
8395: ARRAY
8396: PUSH
8397: LD_STRING p
8399: EQUAL
8400: IFFALSE 8410
// result := true ;
8402: LD_ADDR_VAR 0 2
8406: PUSH
8407: LD_INT 1
8409: ST_TO_ADDR
// end ;
8410: LD_VAR 0 2
8414: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8415: LD_INT 0
8417: PPUSH
8418: PPUSH
8419: PPUSH
8420: PPUSH
// if pos < 1 then
8421: LD_VAR 0 2
8425: PUSH
8426: LD_INT 1
8428: LESS
8429: IFFALSE 8433
// exit ;
8431: GO 8736
// if pos = 1 then
8433: LD_VAR 0 2
8437: PUSH
8438: LD_INT 1
8440: EQUAL
8441: IFFALSE 8474
// result := Replace ( arr , pos [ 1 ] , value ) else
8443: LD_ADDR_VAR 0 4
8447: PUSH
8448: LD_VAR 0 1
8452: PPUSH
8453: LD_VAR 0 2
8457: PUSH
8458: LD_INT 1
8460: ARRAY
8461: PPUSH
8462: LD_VAR 0 3
8466: PPUSH
8467: CALL_OW 1
8471: ST_TO_ADDR
8472: GO 8736
// begin tmp := arr ;
8474: LD_ADDR_VAR 0 6
8478: PUSH
8479: LD_VAR 0 1
8483: ST_TO_ADDR
// s_arr := [ tmp ] ;
8484: LD_ADDR_VAR 0 7
8488: PUSH
8489: LD_VAR 0 6
8493: PUSH
8494: EMPTY
8495: LIST
8496: ST_TO_ADDR
// for i = 1 to pos - 1 do
8497: LD_ADDR_VAR 0 5
8501: PUSH
8502: DOUBLE
8503: LD_INT 1
8505: DEC
8506: ST_TO_ADDR
8507: LD_VAR 0 2
8511: PUSH
8512: LD_INT 1
8514: MINUS
8515: PUSH
8516: FOR_TO
8517: IFFALSE 8562
// begin tmp := tmp [ pos [ i ] ] ;
8519: LD_ADDR_VAR 0 6
8523: PUSH
8524: LD_VAR 0 6
8528: PUSH
8529: LD_VAR 0 2
8533: PUSH
8534: LD_VAR 0 5
8538: ARRAY
8539: ARRAY
8540: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8541: LD_ADDR_VAR 0 7
8545: PUSH
8546: LD_VAR 0 7
8550: PUSH
8551: LD_VAR 0 6
8555: PUSH
8556: EMPTY
8557: LIST
8558: ADD
8559: ST_TO_ADDR
// end ;
8560: GO 8516
8562: POP
8563: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8564: LD_ADDR_VAR 0 6
8568: PUSH
8569: LD_VAR 0 6
8573: PPUSH
8574: LD_VAR 0 2
8578: PUSH
8579: LD_VAR 0 2
8583: ARRAY
8584: PPUSH
8585: LD_VAR 0 3
8589: PPUSH
8590: CALL_OW 1
8594: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8595: LD_ADDR_VAR 0 7
8599: PUSH
8600: LD_VAR 0 7
8604: PPUSH
8605: LD_VAR 0 7
8609: PPUSH
8610: LD_VAR 0 6
8614: PPUSH
8615: CALL_OW 1
8619: ST_TO_ADDR
// for i = s_arr downto 2 do
8620: LD_ADDR_VAR 0 5
8624: PUSH
8625: DOUBLE
8626: LD_VAR 0 7
8630: INC
8631: ST_TO_ADDR
8632: LD_INT 2
8634: PUSH
8635: FOR_DOWNTO
8636: IFFALSE 8720
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8638: LD_ADDR_VAR 0 6
8642: PUSH
8643: LD_VAR 0 7
8647: PUSH
8648: LD_VAR 0 5
8652: PUSH
8653: LD_INT 1
8655: MINUS
8656: ARRAY
8657: PPUSH
8658: LD_VAR 0 2
8662: PUSH
8663: LD_VAR 0 5
8667: PUSH
8668: LD_INT 1
8670: MINUS
8671: ARRAY
8672: PPUSH
8673: LD_VAR 0 7
8677: PUSH
8678: LD_VAR 0 5
8682: ARRAY
8683: PPUSH
8684: CALL_OW 1
8688: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8689: LD_ADDR_VAR 0 7
8693: PUSH
8694: LD_VAR 0 7
8698: PPUSH
8699: LD_VAR 0 5
8703: PUSH
8704: LD_INT 1
8706: MINUS
8707: PPUSH
8708: LD_VAR 0 6
8712: PPUSH
8713: CALL_OW 1
8717: ST_TO_ADDR
// end ;
8718: GO 8635
8720: POP
8721: POP
// result := s_arr [ 1 ] ;
8722: LD_ADDR_VAR 0 4
8726: PUSH
8727: LD_VAR 0 7
8731: PUSH
8732: LD_INT 1
8734: ARRAY
8735: ST_TO_ADDR
// end ; end ;
8736: LD_VAR 0 4
8740: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8741: LD_INT 0
8743: PPUSH
8744: PPUSH
// if not list then
8745: LD_VAR 0 1
8749: NOT
8750: IFFALSE 8754
// exit ;
8752: GO 8845
// i := list [ pos1 ] ;
8754: LD_ADDR_VAR 0 5
8758: PUSH
8759: LD_VAR 0 1
8763: PUSH
8764: LD_VAR 0 2
8768: ARRAY
8769: ST_TO_ADDR
// if not i then
8770: LD_VAR 0 5
8774: NOT
8775: IFFALSE 8779
// exit ;
8777: GO 8845
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8779: LD_ADDR_VAR 0 1
8783: PUSH
8784: LD_VAR 0 1
8788: PPUSH
8789: LD_VAR 0 2
8793: PPUSH
8794: LD_VAR 0 1
8798: PUSH
8799: LD_VAR 0 3
8803: ARRAY
8804: PPUSH
8805: CALL_OW 1
8809: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8810: LD_ADDR_VAR 0 1
8814: PUSH
8815: LD_VAR 0 1
8819: PPUSH
8820: LD_VAR 0 3
8824: PPUSH
8825: LD_VAR 0 5
8829: PPUSH
8830: CALL_OW 1
8834: ST_TO_ADDR
// result := list ;
8835: LD_ADDR_VAR 0 4
8839: PUSH
8840: LD_VAR 0 1
8844: ST_TO_ADDR
// end ;
8845: LD_VAR 0 4
8849: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8850: LD_INT 0
8852: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8853: LD_ADDR_VAR 0 5
8857: PUSH
8858: LD_VAR 0 1
8862: PPUSH
8863: CALL_OW 250
8867: PPUSH
8868: LD_VAR 0 1
8872: PPUSH
8873: CALL_OW 251
8877: PPUSH
8878: LD_VAR 0 2
8882: PPUSH
8883: LD_VAR 0 3
8887: PPUSH
8888: LD_VAR 0 4
8892: PPUSH
8893: CALL 8903 0 5
8897: ST_TO_ADDR
// end ;
8898: LD_VAR 0 5
8902: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8903: LD_INT 0
8905: PPUSH
8906: PPUSH
8907: PPUSH
8908: PPUSH
// if not list then
8909: LD_VAR 0 3
8913: NOT
8914: IFFALSE 8918
// exit ;
8916: GO 9306
// result := [ ] ;
8918: LD_ADDR_VAR 0 6
8922: PUSH
8923: EMPTY
8924: ST_TO_ADDR
// for i in list do
8925: LD_ADDR_VAR 0 7
8929: PUSH
8930: LD_VAR 0 3
8934: PUSH
8935: FOR_IN
8936: IFFALSE 9138
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8938: LD_ADDR_VAR 0 9
8942: PUSH
8943: LD_VAR 0 7
8947: PPUSH
8948: LD_VAR 0 1
8952: PPUSH
8953: LD_VAR 0 2
8957: PPUSH
8958: CALL_OW 297
8962: ST_TO_ADDR
// if not result then
8963: LD_VAR 0 6
8967: NOT
8968: IFFALSE 8994
// result := [ [ i , tmp ] ] else
8970: LD_ADDR_VAR 0 6
8974: PUSH
8975: LD_VAR 0 7
8979: PUSH
8980: LD_VAR 0 9
8984: PUSH
8985: EMPTY
8986: LIST
8987: LIST
8988: PUSH
8989: EMPTY
8990: LIST
8991: ST_TO_ADDR
8992: GO 9136
// begin if result [ result ] [ 2 ] < tmp then
8994: LD_VAR 0 6
8998: PUSH
8999: LD_VAR 0 6
9003: ARRAY
9004: PUSH
9005: LD_INT 2
9007: ARRAY
9008: PUSH
9009: LD_VAR 0 9
9013: LESS
9014: IFFALSE 9056
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9016: LD_ADDR_VAR 0 6
9020: PUSH
9021: LD_VAR 0 6
9025: PPUSH
9026: LD_VAR 0 6
9030: PUSH
9031: LD_INT 1
9033: PLUS
9034: PPUSH
9035: LD_VAR 0 7
9039: PUSH
9040: LD_VAR 0 9
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PPUSH
9049: CALL_OW 2
9053: ST_TO_ADDR
9054: GO 9136
// for j = 1 to result do
9056: LD_ADDR_VAR 0 8
9060: PUSH
9061: DOUBLE
9062: LD_INT 1
9064: DEC
9065: ST_TO_ADDR
9066: LD_VAR 0 6
9070: PUSH
9071: FOR_TO
9072: IFFALSE 9134
// begin if tmp < result [ j ] [ 2 ] then
9074: LD_VAR 0 9
9078: PUSH
9079: LD_VAR 0 6
9083: PUSH
9084: LD_VAR 0 8
9088: ARRAY
9089: PUSH
9090: LD_INT 2
9092: ARRAY
9093: LESS
9094: IFFALSE 9132
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9096: LD_ADDR_VAR 0 6
9100: PUSH
9101: LD_VAR 0 6
9105: PPUSH
9106: LD_VAR 0 8
9110: PPUSH
9111: LD_VAR 0 7
9115: PUSH
9116: LD_VAR 0 9
9120: PUSH
9121: EMPTY
9122: LIST
9123: LIST
9124: PPUSH
9125: CALL_OW 2
9129: ST_TO_ADDR
// break ;
9130: GO 9134
// end ; end ;
9132: GO 9071
9134: POP
9135: POP
// end ; end ;
9136: GO 8935
9138: POP
9139: POP
// if result and not asc then
9140: LD_VAR 0 6
9144: PUSH
9145: LD_VAR 0 4
9149: NOT
9150: AND
9151: IFFALSE 9226
// begin tmp := result ;
9153: LD_ADDR_VAR 0 9
9157: PUSH
9158: LD_VAR 0 6
9162: ST_TO_ADDR
// for i = tmp downto 1 do
9163: LD_ADDR_VAR 0 7
9167: PUSH
9168: DOUBLE
9169: LD_VAR 0 9
9173: INC
9174: ST_TO_ADDR
9175: LD_INT 1
9177: PUSH
9178: FOR_DOWNTO
9179: IFFALSE 9224
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9181: LD_ADDR_VAR 0 6
9185: PUSH
9186: LD_VAR 0 6
9190: PPUSH
9191: LD_VAR 0 9
9195: PUSH
9196: LD_VAR 0 7
9200: MINUS
9201: PUSH
9202: LD_INT 1
9204: PLUS
9205: PPUSH
9206: LD_VAR 0 9
9210: PUSH
9211: LD_VAR 0 7
9215: ARRAY
9216: PPUSH
9217: CALL_OW 1
9221: ST_TO_ADDR
9222: GO 9178
9224: POP
9225: POP
// end ; tmp := [ ] ;
9226: LD_ADDR_VAR 0 9
9230: PUSH
9231: EMPTY
9232: ST_TO_ADDR
// if mode then
9233: LD_VAR 0 5
9237: IFFALSE 9306
// begin for i = 1 to result do
9239: LD_ADDR_VAR 0 7
9243: PUSH
9244: DOUBLE
9245: LD_INT 1
9247: DEC
9248: ST_TO_ADDR
9249: LD_VAR 0 6
9253: PUSH
9254: FOR_TO
9255: IFFALSE 9294
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9257: LD_ADDR_VAR 0 9
9261: PUSH
9262: LD_VAR 0 9
9266: PPUSH
9267: LD_VAR 0 7
9271: PPUSH
9272: LD_VAR 0 6
9276: PUSH
9277: LD_VAR 0 7
9281: ARRAY
9282: PUSH
9283: LD_INT 1
9285: ARRAY
9286: PPUSH
9287: CALL_OW 1
9291: ST_TO_ADDR
9292: GO 9254
9294: POP
9295: POP
// result := tmp ;
9296: LD_ADDR_VAR 0 6
9300: PUSH
9301: LD_VAR 0 9
9305: ST_TO_ADDR
// end ; end ;
9306: LD_VAR 0 6
9310: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9311: LD_INT 0
9313: PPUSH
9314: PPUSH
9315: PPUSH
9316: PPUSH
9317: PPUSH
9318: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9319: LD_ADDR_VAR 0 5
9323: PUSH
9324: LD_INT 0
9326: PUSH
9327: LD_INT 0
9329: PUSH
9330: LD_INT 0
9332: PUSH
9333: EMPTY
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: ST_TO_ADDR
// if not x or not y then
9341: LD_VAR 0 2
9345: NOT
9346: PUSH
9347: LD_VAR 0 3
9351: NOT
9352: OR
9353: IFFALSE 9357
// exit ;
9355: GO 11009
// if not range then
9357: LD_VAR 0 4
9361: NOT
9362: IFFALSE 9372
// range := 10 ;
9364: LD_ADDR_VAR 0 4
9368: PUSH
9369: LD_INT 10
9371: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9372: LD_ADDR_VAR 0 8
9376: PUSH
9377: LD_INT 81
9379: PUSH
9380: LD_VAR 0 1
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: PUSH
9389: LD_INT 92
9391: PUSH
9392: LD_VAR 0 2
9396: PUSH
9397: LD_VAR 0 3
9401: PUSH
9402: LD_VAR 0 4
9406: PUSH
9407: EMPTY
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: PUSH
9413: LD_INT 3
9415: PUSH
9416: LD_INT 21
9418: PUSH
9419: LD_INT 3
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: PUSH
9426: EMPTY
9427: LIST
9428: LIST
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: LIST
9434: PPUSH
9435: CALL_OW 69
9439: ST_TO_ADDR
// if not tmp then
9440: LD_VAR 0 8
9444: NOT
9445: IFFALSE 9449
// exit ;
9447: GO 11009
// for i in tmp do
9449: LD_ADDR_VAR 0 6
9453: PUSH
9454: LD_VAR 0 8
9458: PUSH
9459: FOR_IN
9460: IFFALSE 10984
// begin points := [ 0 , 0 , 0 ] ;
9462: LD_ADDR_VAR 0 9
9466: PUSH
9467: LD_INT 0
9469: PUSH
9470: LD_INT 0
9472: PUSH
9473: LD_INT 0
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: LIST
9480: ST_TO_ADDR
// bpoints := 1 ;
9481: LD_ADDR_VAR 0 10
9485: PUSH
9486: LD_INT 1
9488: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9489: LD_VAR 0 6
9493: PPUSH
9494: CALL_OW 247
9498: PUSH
9499: LD_INT 1
9501: DOUBLE
9502: EQUAL
9503: IFTRUE 9507
9505: GO 10085
9507: POP
// begin if GetClass ( i ) = 1 then
9508: LD_VAR 0 6
9512: PPUSH
9513: CALL_OW 257
9517: PUSH
9518: LD_INT 1
9520: EQUAL
9521: IFFALSE 9542
// points := [ 10 , 5 , 3 ] ;
9523: LD_ADDR_VAR 0 9
9527: PUSH
9528: LD_INT 10
9530: PUSH
9531: LD_INT 5
9533: PUSH
9534: LD_INT 3
9536: PUSH
9537: EMPTY
9538: LIST
9539: LIST
9540: LIST
9541: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9542: LD_VAR 0 6
9546: PPUSH
9547: CALL_OW 257
9551: PUSH
9552: LD_INT 2
9554: PUSH
9555: LD_INT 3
9557: PUSH
9558: LD_INT 4
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: LIST
9565: IN
9566: IFFALSE 9587
// points := [ 3 , 2 , 1 ] ;
9568: LD_ADDR_VAR 0 9
9572: PUSH
9573: LD_INT 3
9575: PUSH
9576: LD_INT 2
9578: PUSH
9579: LD_INT 1
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: LIST
9586: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9587: LD_VAR 0 6
9591: PPUSH
9592: CALL_OW 257
9596: PUSH
9597: LD_INT 5
9599: EQUAL
9600: IFFALSE 9621
// points := [ 130 , 5 , 2 ] ;
9602: LD_ADDR_VAR 0 9
9606: PUSH
9607: LD_INT 130
9609: PUSH
9610: LD_INT 5
9612: PUSH
9613: LD_INT 2
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: LIST
9620: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9621: LD_VAR 0 6
9625: PPUSH
9626: CALL_OW 257
9630: PUSH
9631: LD_INT 8
9633: EQUAL
9634: IFFALSE 9655
// points := [ 35 , 35 , 30 ] ;
9636: LD_ADDR_VAR 0 9
9640: PUSH
9641: LD_INT 35
9643: PUSH
9644: LD_INT 35
9646: PUSH
9647: LD_INT 30
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: LIST
9654: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9655: LD_VAR 0 6
9659: PPUSH
9660: CALL_OW 257
9664: PUSH
9665: LD_INT 9
9667: EQUAL
9668: IFFALSE 9689
// points := [ 20 , 55 , 40 ] ;
9670: LD_ADDR_VAR 0 9
9674: PUSH
9675: LD_INT 20
9677: PUSH
9678: LD_INT 55
9680: PUSH
9681: LD_INT 40
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: LIST
9688: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9689: LD_VAR 0 6
9693: PPUSH
9694: CALL_OW 257
9698: PUSH
9699: LD_INT 12
9701: PUSH
9702: LD_INT 16
9704: PUSH
9705: EMPTY
9706: LIST
9707: LIST
9708: IN
9709: IFFALSE 9730
// points := [ 5 , 3 , 2 ] ;
9711: LD_ADDR_VAR 0 9
9715: PUSH
9716: LD_INT 5
9718: PUSH
9719: LD_INT 3
9721: PUSH
9722: LD_INT 2
9724: PUSH
9725: EMPTY
9726: LIST
9727: LIST
9728: LIST
9729: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9730: LD_VAR 0 6
9734: PPUSH
9735: CALL_OW 257
9739: PUSH
9740: LD_INT 17
9742: EQUAL
9743: IFFALSE 9764
// points := [ 100 , 50 , 75 ] ;
9745: LD_ADDR_VAR 0 9
9749: PUSH
9750: LD_INT 100
9752: PUSH
9753: LD_INT 50
9755: PUSH
9756: LD_INT 75
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: LIST
9763: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9764: LD_VAR 0 6
9768: PPUSH
9769: CALL_OW 257
9773: PUSH
9774: LD_INT 15
9776: EQUAL
9777: IFFALSE 9798
// points := [ 10 , 5 , 3 ] ;
9779: LD_ADDR_VAR 0 9
9783: PUSH
9784: LD_INT 10
9786: PUSH
9787: LD_INT 5
9789: PUSH
9790: LD_INT 3
9792: PUSH
9793: EMPTY
9794: LIST
9795: LIST
9796: LIST
9797: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9798: LD_VAR 0 6
9802: PPUSH
9803: CALL_OW 257
9807: PUSH
9808: LD_INT 14
9810: EQUAL
9811: IFFALSE 9832
// points := [ 10 , 0 , 0 ] ;
9813: LD_ADDR_VAR 0 9
9817: PUSH
9818: LD_INT 10
9820: PUSH
9821: LD_INT 0
9823: PUSH
9824: LD_INT 0
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: LIST
9831: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9832: LD_VAR 0 6
9836: PPUSH
9837: CALL_OW 257
9841: PUSH
9842: LD_INT 11
9844: EQUAL
9845: IFFALSE 9866
// points := [ 30 , 10 , 5 ] ;
9847: LD_ADDR_VAR 0 9
9851: PUSH
9852: LD_INT 30
9854: PUSH
9855: LD_INT 10
9857: PUSH
9858: LD_INT 5
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: LIST
9865: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9866: LD_VAR 0 1
9870: PPUSH
9871: LD_INT 5
9873: PPUSH
9874: CALL_OW 321
9878: PUSH
9879: LD_INT 2
9881: EQUAL
9882: IFFALSE 9899
// bpoints := bpoints * 1.8 ;
9884: LD_ADDR_VAR 0 10
9888: PUSH
9889: LD_VAR 0 10
9893: PUSH
9894: LD_REAL  1.80000000000000E+0000
9897: MUL
9898: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9899: LD_VAR 0 6
9903: PPUSH
9904: CALL_OW 257
9908: PUSH
9909: LD_INT 1
9911: PUSH
9912: LD_INT 2
9914: PUSH
9915: LD_INT 3
9917: PUSH
9918: LD_INT 4
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: IN
9927: PUSH
9928: LD_VAR 0 1
9932: PPUSH
9933: LD_INT 51
9935: PPUSH
9936: CALL_OW 321
9940: PUSH
9941: LD_INT 2
9943: EQUAL
9944: AND
9945: IFFALSE 9962
// bpoints := bpoints * 1.2 ;
9947: LD_ADDR_VAR 0 10
9951: PUSH
9952: LD_VAR 0 10
9956: PUSH
9957: LD_REAL  1.20000000000000E+0000
9960: MUL
9961: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9962: LD_VAR 0 6
9966: PPUSH
9967: CALL_OW 257
9971: PUSH
9972: LD_INT 5
9974: PUSH
9975: LD_INT 7
9977: PUSH
9978: LD_INT 9
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: LIST
9985: IN
9986: PUSH
9987: LD_VAR 0 1
9991: PPUSH
9992: LD_INT 52
9994: PPUSH
9995: CALL_OW 321
9999: PUSH
10000: LD_INT 2
10002: EQUAL
10003: AND
10004: IFFALSE 10021
// bpoints := bpoints * 1.5 ;
10006: LD_ADDR_VAR 0 10
10010: PUSH
10011: LD_VAR 0 10
10015: PUSH
10016: LD_REAL  1.50000000000000E+0000
10019: MUL
10020: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10021: LD_VAR 0 1
10025: PPUSH
10026: LD_INT 66
10028: PPUSH
10029: CALL_OW 321
10033: PUSH
10034: LD_INT 2
10036: EQUAL
10037: IFFALSE 10054
// bpoints := bpoints * 1.1 ;
10039: LD_ADDR_VAR 0 10
10043: PUSH
10044: LD_VAR 0 10
10048: PUSH
10049: LD_REAL  1.10000000000000E+0000
10052: MUL
10053: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10054: LD_ADDR_VAR 0 10
10058: PUSH
10059: LD_VAR 0 10
10063: PUSH
10064: LD_VAR 0 6
10068: PPUSH
10069: LD_INT 1
10071: PPUSH
10072: CALL_OW 259
10076: PUSH
10077: LD_REAL  1.15000000000000E+0000
10080: MUL
10081: MUL
10082: ST_TO_ADDR
// end ; unit_vehicle :
10083: GO 10913
10085: LD_INT 2
10087: DOUBLE
10088: EQUAL
10089: IFTRUE 10093
10091: GO 10901
10093: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10094: LD_VAR 0 6
10098: PPUSH
10099: CALL_OW 264
10103: PUSH
10104: LD_INT 2
10106: PUSH
10107: LD_INT 42
10109: PUSH
10110: LD_INT 24
10112: PUSH
10113: EMPTY
10114: LIST
10115: LIST
10116: LIST
10117: IN
10118: IFFALSE 10139
// points := [ 25 , 5 , 3 ] ;
10120: LD_ADDR_VAR 0 9
10124: PUSH
10125: LD_INT 25
10127: PUSH
10128: LD_INT 5
10130: PUSH
10131: LD_INT 3
10133: PUSH
10134: EMPTY
10135: LIST
10136: LIST
10137: LIST
10138: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10139: LD_VAR 0 6
10143: PPUSH
10144: CALL_OW 264
10148: PUSH
10149: LD_INT 4
10151: PUSH
10152: LD_INT 43
10154: PUSH
10155: LD_INT 25
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: LIST
10162: IN
10163: IFFALSE 10184
// points := [ 40 , 15 , 5 ] ;
10165: LD_ADDR_VAR 0 9
10169: PUSH
10170: LD_INT 40
10172: PUSH
10173: LD_INT 15
10175: PUSH
10176: LD_INT 5
10178: PUSH
10179: EMPTY
10180: LIST
10181: LIST
10182: LIST
10183: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10184: LD_VAR 0 6
10188: PPUSH
10189: CALL_OW 264
10193: PUSH
10194: LD_INT 3
10196: PUSH
10197: LD_INT 23
10199: PUSH
10200: EMPTY
10201: LIST
10202: LIST
10203: IN
10204: IFFALSE 10225
// points := [ 7 , 25 , 8 ] ;
10206: LD_ADDR_VAR 0 9
10210: PUSH
10211: LD_INT 7
10213: PUSH
10214: LD_INT 25
10216: PUSH
10217: LD_INT 8
10219: PUSH
10220: EMPTY
10221: LIST
10222: LIST
10223: LIST
10224: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10225: LD_VAR 0 6
10229: PPUSH
10230: CALL_OW 264
10234: PUSH
10235: LD_INT 5
10237: PUSH
10238: LD_INT 27
10240: PUSH
10241: LD_INT 44
10243: PUSH
10244: EMPTY
10245: LIST
10246: LIST
10247: LIST
10248: IN
10249: IFFALSE 10270
// points := [ 14 , 50 , 16 ] ;
10251: LD_ADDR_VAR 0 9
10255: PUSH
10256: LD_INT 14
10258: PUSH
10259: LD_INT 50
10261: PUSH
10262: LD_INT 16
10264: PUSH
10265: EMPTY
10266: LIST
10267: LIST
10268: LIST
10269: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10270: LD_VAR 0 6
10274: PPUSH
10275: CALL_OW 264
10279: PUSH
10280: LD_INT 6
10282: PUSH
10283: LD_INT 46
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: IN
10290: IFFALSE 10311
// points := [ 32 , 120 , 70 ] ;
10292: LD_ADDR_VAR 0 9
10296: PUSH
10297: LD_INT 32
10299: PUSH
10300: LD_INT 120
10302: PUSH
10303: LD_INT 70
10305: PUSH
10306: EMPTY
10307: LIST
10308: LIST
10309: LIST
10310: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10311: LD_VAR 0 6
10315: PPUSH
10316: CALL_OW 264
10320: PUSH
10321: LD_INT 7
10323: PUSH
10324: LD_INT 28
10326: PUSH
10327: LD_INT 45
10329: PUSH
10330: LD_EXP 25
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: IN
10341: IFFALSE 10362
// points := [ 35 , 20 , 45 ] ;
10343: LD_ADDR_VAR 0 9
10347: PUSH
10348: LD_INT 35
10350: PUSH
10351: LD_INT 20
10353: PUSH
10354: LD_INT 45
10356: PUSH
10357: EMPTY
10358: LIST
10359: LIST
10360: LIST
10361: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10362: LD_VAR 0 6
10366: PPUSH
10367: CALL_OW 264
10371: PUSH
10372: LD_INT 47
10374: PUSH
10375: EMPTY
10376: LIST
10377: IN
10378: IFFALSE 10399
// points := [ 67 , 45 , 75 ] ;
10380: LD_ADDR_VAR 0 9
10384: PUSH
10385: LD_INT 67
10387: PUSH
10388: LD_INT 45
10390: PUSH
10391: LD_INT 75
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: LIST
10398: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10399: LD_VAR 0 6
10403: PPUSH
10404: CALL_OW 264
10408: PUSH
10409: LD_INT 26
10411: PUSH
10412: EMPTY
10413: LIST
10414: IN
10415: IFFALSE 10436
// points := [ 120 , 30 , 80 ] ;
10417: LD_ADDR_VAR 0 9
10421: PUSH
10422: LD_INT 120
10424: PUSH
10425: LD_INT 30
10427: PUSH
10428: LD_INT 80
10430: PUSH
10431: EMPTY
10432: LIST
10433: LIST
10434: LIST
10435: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10436: LD_VAR 0 6
10440: PPUSH
10441: CALL_OW 264
10445: PUSH
10446: LD_INT 22
10448: PUSH
10449: EMPTY
10450: LIST
10451: IN
10452: IFFALSE 10473
// points := [ 40 , 1 , 1 ] ;
10454: LD_ADDR_VAR 0 9
10458: PUSH
10459: LD_INT 40
10461: PUSH
10462: LD_INT 1
10464: PUSH
10465: LD_INT 1
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: LIST
10472: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10473: LD_VAR 0 6
10477: PPUSH
10478: CALL_OW 264
10482: PUSH
10483: LD_INT 29
10485: PUSH
10486: EMPTY
10487: LIST
10488: IN
10489: IFFALSE 10510
// points := [ 70 , 200 , 400 ] ;
10491: LD_ADDR_VAR 0 9
10495: PUSH
10496: LD_INT 70
10498: PUSH
10499: LD_INT 200
10501: PUSH
10502: LD_INT 400
10504: PUSH
10505: EMPTY
10506: LIST
10507: LIST
10508: LIST
10509: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10510: LD_VAR 0 6
10514: PPUSH
10515: CALL_OW 264
10519: PUSH
10520: LD_INT 14
10522: PUSH
10523: LD_INT 53
10525: PUSH
10526: EMPTY
10527: LIST
10528: LIST
10529: IN
10530: IFFALSE 10551
// points := [ 40 , 10 , 20 ] ;
10532: LD_ADDR_VAR 0 9
10536: PUSH
10537: LD_INT 40
10539: PUSH
10540: LD_INT 10
10542: PUSH
10543: LD_INT 20
10545: PUSH
10546: EMPTY
10547: LIST
10548: LIST
10549: LIST
10550: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10551: LD_VAR 0 6
10555: PPUSH
10556: CALL_OW 264
10560: PUSH
10561: LD_INT 9
10563: PUSH
10564: EMPTY
10565: LIST
10566: IN
10567: IFFALSE 10588
// points := [ 5 , 70 , 20 ] ;
10569: LD_ADDR_VAR 0 9
10573: PUSH
10574: LD_INT 5
10576: PUSH
10577: LD_INT 70
10579: PUSH
10580: LD_INT 20
10582: PUSH
10583: EMPTY
10584: LIST
10585: LIST
10586: LIST
10587: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10588: LD_VAR 0 6
10592: PPUSH
10593: CALL_OW 264
10597: PUSH
10598: LD_INT 10
10600: PUSH
10601: EMPTY
10602: LIST
10603: IN
10604: IFFALSE 10625
// points := [ 35 , 110 , 70 ] ;
10606: LD_ADDR_VAR 0 9
10610: PUSH
10611: LD_INT 35
10613: PUSH
10614: LD_INT 110
10616: PUSH
10617: LD_INT 70
10619: PUSH
10620: EMPTY
10621: LIST
10622: LIST
10623: LIST
10624: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10625: LD_VAR 0 6
10629: PPUSH
10630: CALL_OW 265
10634: PUSH
10635: LD_INT 25
10637: EQUAL
10638: IFFALSE 10659
// points := [ 80 , 65 , 100 ] ;
10640: LD_ADDR_VAR 0 9
10644: PUSH
10645: LD_INT 80
10647: PUSH
10648: LD_INT 65
10650: PUSH
10651: LD_INT 100
10653: PUSH
10654: EMPTY
10655: LIST
10656: LIST
10657: LIST
10658: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10659: LD_VAR 0 6
10663: PPUSH
10664: CALL_OW 263
10668: PUSH
10669: LD_INT 1
10671: EQUAL
10672: IFFALSE 10707
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10674: LD_ADDR_VAR 0 10
10678: PUSH
10679: LD_VAR 0 10
10683: PUSH
10684: LD_VAR 0 6
10688: PPUSH
10689: CALL_OW 311
10693: PPUSH
10694: LD_INT 3
10696: PPUSH
10697: CALL_OW 259
10701: PUSH
10702: LD_INT 4
10704: MUL
10705: MUL
10706: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10707: LD_VAR 0 6
10711: PPUSH
10712: CALL_OW 263
10716: PUSH
10717: LD_INT 2
10719: EQUAL
10720: IFFALSE 10771
// begin j := IsControledBy ( i ) ;
10722: LD_ADDR_VAR 0 7
10726: PUSH
10727: LD_VAR 0 6
10731: PPUSH
10732: CALL_OW 312
10736: ST_TO_ADDR
// if j then
10737: LD_VAR 0 7
10741: IFFALSE 10771
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10743: LD_ADDR_VAR 0 10
10747: PUSH
10748: LD_VAR 0 10
10752: PUSH
10753: LD_VAR 0 7
10757: PPUSH
10758: LD_INT 3
10760: PPUSH
10761: CALL_OW 259
10765: PUSH
10766: LD_INT 3
10768: MUL
10769: MUL
10770: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10771: LD_VAR 0 6
10775: PPUSH
10776: CALL_OW 264
10780: PUSH
10781: LD_INT 5
10783: PUSH
10784: LD_INT 6
10786: PUSH
10787: LD_INT 46
10789: PUSH
10790: LD_INT 44
10792: PUSH
10793: LD_INT 47
10795: PUSH
10796: LD_INT 45
10798: PUSH
10799: LD_INT 28
10801: PUSH
10802: LD_INT 7
10804: PUSH
10805: LD_INT 27
10807: PUSH
10808: LD_INT 29
10810: PUSH
10811: EMPTY
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: IN
10823: PUSH
10824: LD_VAR 0 1
10828: PPUSH
10829: LD_INT 52
10831: PPUSH
10832: CALL_OW 321
10836: PUSH
10837: LD_INT 2
10839: EQUAL
10840: AND
10841: IFFALSE 10858
// bpoints := bpoints * 1.2 ;
10843: LD_ADDR_VAR 0 10
10847: PUSH
10848: LD_VAR 0 10
10852: PUSH
10853: LD_REAL  1.20000000000000E+0000
10856: MUL
10857: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10858: LD_VAR 0 6
10862: PPUSH
10863: CALL_OW 264
10867: PUSH
10868: LD_INT 6
10870: PUSH
10871: LD_INT 46
10873: PUSH
10874: LD_INT 47
10876: PUSH
10877: EMPTY
10878: LIST
10879: LIST
10880: LIST
10881: IN
10882: IFFALSE 10899
// bpoints := bpoints * 1.2 ;
10884: LD_ADDR_VAR 0 10
10888: PUSH
10889: LD_VAR 0 10
10893: PUSH
10894: LD_REAL  1.20000000000000E+0000
10897: MUL
10898: ST_TO_ADDR
// end ; unit_building :
10899: GO 10913
10901: LD_INT 3
10903: DOUBLE
10904: EQUAL
10905: IFTRUE 10909
10907: GO 10912
10909: POP
// ; end ;
10910: GO 10913
10912: POP
// for j = 1 to 3 do
10913: LD_ADDR_VAR 0 7
10917: PUSH
10918: DOUBLE
10919: LD_INT 1
10921: DEC
10922: ST_TO_ADDR
10923: LD_INT 3
10925: PUSH
10926: FOR_TO
10927: IFFALSE 10980
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10929: LD_ADDR_VAR 0 5
10933: PUSH
10934: LD_VAR 0 5
10938: PPUSH
10939: LD_VAR 0 7
10943: PPUSH
10944: LD_VAR 0 5
10948: PUSH
10949: LD_VAR 0 7
10953: ARRAY
10954: PUSH
10955: LD_VAR 0 9
10959: PUSH
10960: LD_VAR 0 7
10964: ARRAY
10965: PUSH
10966: LD_VAR 0 10
10970: MUL
10971: PLUS
10972: PPUSH
10973: CALL_OW 1
10977: ST_TO_ADDR
10978: GO 10926
10980: POP
10981: POP
// end ;
10982: GO 9459
10984: POP
10985: POP
// result := Replace ( result , 4 , tmp ) ;
10986: LD_ADDR_VAR 0 5
10990: PUSH
10991: LD_VAR 0 5
10995: PPUSH
10996: LD_INT 4
10998: PPUSH
10999: LD_VAR 0 8
11003: PPUSH
11004: CALL_OW 1
11008: ST_TO_ADDR
// end ;
11009: LD_VAR 0 5
11013: RET
// export function DangerAtRange ( unit , range ) ; begin
11014: LD_INT 0
11016: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11017: LD_ADDR_VAR 0 3
11021: PUSH
11022: LD_VAR 0 1
11026: PPUSH
11027: CALL_OW 255
11031: PPUSH
11032: LD_VAR 0 1
11036: PPUSH
11037: CALL_OW 250
11041: PPUSH
11042: LD_VAR 0 1
11046: PPUSH
11047: CALL_OW 251
11051: PPUSH
11052: LD_VAR 0 2
11056: PPUSH
11057: CALL 9311 0 4
11061: ST_TO_ADDR
// end ;
11062: LD_VAR 0 3
11066: RET
// export function DangerInArea ( side , area ) ; begin
11067: LD_INT 0
11069: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11070: LD_ADDR_VAR 0 3
11074: PUSH
11075: LD_VAR 0 2
11079: PPUSH
11080: LD_INT 81
11082: PUSH
11083: LD_VAR 0 1
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: PPUSH
11092: CALL_OW 70
11096: ST_TO_ADDR
// end ;
11097: LD_VAR 0 3
11101: RET
// export function IsExtension ( b ) ; begin
11102: LD_INT 0
11104: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11105: LD_ADDR_VAR 0 2
11109: PUSH
11110: LD_VAR 0 1
11114: PUSH
11115: LD_INT 23
11117: PUSH
11118: LD_INT 20
11120: PUSH
11121: LD_INT 22
11123: PUSH
11124: LD_INT 17
11126: PUSH
11127: LD_INT 24
11129: PUSH
11130: LD_INT 21
11132: PUSH
11133: LD_INT 19
11135: PUSH
11136: LD_INT 16
11138: PUSH
11139: LD_INT 25
11141: PUSH
11142: LD_INT 18
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: IN
11157: ST_TO_ADDR
// end ;
11158: LD_VAR 0 2
11162: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11163: LD_INT 0
11165: PPUSH
11166: PPUSH
11167: PPUSH
// result := [ ] ;
11168: LD_ADDR_VAR 0 4
11172: PUSH
11173: EMPTY
11174: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11175: LD_ADDR_VAR 0 5
11179: PUSH
11180: LD_VAR 0 2
11184: PPUSH
11185: LD_INT 21
11187: PUSH
11188: LD_INT 3
11190: PUSH
11191: EMPTY
11192: LIST
11193: LIST
11194: PPUSH
11195: CALL_OW 70
11199: ST_TO_ADDR
// if not tmp then
11200: LD_VAR 0 5
11204: NOT
11205: IFFALSE 11209
// exit ;
11207: GO 11273
// if checkLink then
11209: LD_VAR 0 3
11213: IFFALSE 11263
// begin for i in tmp do
11215: LD_ADDR_VAR 0 6
11219: PUSH
11220: LD_VAR 0 5
11224: PUSH
11225: FOR_IN
11226: IFFALSE 11261
// if GetBase ( i ) <> base then
11228: LD_VAR 0 6
11232: PPUSH
11233: CALL_OW 274
11237: PUSH
11238: LD_VAR 0 1
11242: NONEQUAL
11243: IFFALSE 11259
// ComLinkToBase ( base , i ) ;
11245: LD_VAR 0 1
11249: PPUSH
11250: LD_VAR 0 6
11254: PPUSH
11255: CALL_OW 169
11259: GO 11225
11261: POP
11262: POP
// end ; result := tmp ;
11263: LD_ADDR_VAR 0 4
11267: PUSH
11268: LD_VAR 0 5
11272: ST_TO_ADDR
// end ;
11273: LD_VAR 0 4
11277: RET
// export function ComComplete ( units , b ) ; var i ; begin
11278: LD_INT 0
11280: PPUSH
11281: PPUSH
// if not units then
11282: LD_VAR 0 1
11286: NOT
11287: IFFALSE 11291
// exit ;
11289: GO 11381
// for i in units do
11291: LD_ADDR_VAR 0 4
11295: PUSH
11296: LD_VAR 0 1
11300: PUSH
11301: FOR_IN
11302: IFFALSE 11379
// if BuildingStatus ( b ) = bs_build then
11304: LD_VAR 0 2
11308: PPUSH
11309: CALL_OW 461
11313: PUSH
11314: LD_INT 1
11316: EQUAL
11317: IFFALSE 11377
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11319: LD_VAR 0 4
11323: PPUSH
11324: LD_STRING h
11326: PUSH
11327: LD_VAR 0 2
11331: PPUSH
11332: CALL_OW 250
11336: PUSH
11337: LD_VAR 0 2
11341: PPUSH
11342: CALL_OW 251
11346: PUSH
11347: LD_VAR 0 2
11351: PUSH
11352: LD_INT 0
11354: PUSH
11355: LD_INT 0
11357: PUSH
11358: LD_INT 0
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: LIST
11365: LIST
11366: LIST
11367: LIST
11368: LIST
11369: PUSH
11370: EMPTY
11371: LIST
11372: PPUSH
11373: CALL_OW 446
11377: GO 11301
11379: POP
11380: POP
// end ;
11381: LD_VAR 0 3
11385: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11386: LD_INT 0
11388: PPUSH
11389: PPUSH
11390: PPUSH
11391: PPUSH
11392: PPUSH
11393: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11394: LD_VAR 0 1
11398: NOT
11399: PUSH
11400: LD_VAR 0 1
11404: PPUSH
11405: CALL_OW 263
11409: PUSH
11410: LD_INT 2
11412: NONEQUAL
11413: OR
11414: IFFALSE 11418
// exit ;
11416: GO 11734
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11418: LD_ADDR_VAR 0 6
11422: PUSH
11423: LD_INT 22
11425: PUSH
11426: LD_VAR 0 1
11430: PPUSH
11431: CALL_OW 255
11435: PUSH
11436: EMPTY
11437: LIST
11438: LIST
11439: PUSH
11440: LD_INT 2
11442: PUSH
11443: LD_INT 30
11445: PUSH
11446: LD_INT 36
11448: PUSH
11449: EMPTY
11450: LIST
11451: LIST
11452: PUSH
11453: LD_INT 34
11455: PUSH
11456: LD_INT 31
11458: PUSH
11459: EMPTY
11460: LIST
11461: LIST
11462: PUSH
11463: EMPTY
11464: LIST
11465: LIST
11466: LIST
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: PPUSH
11472: CALL_OW 69
11476: ST_TO_ADDR
// if not tmp then
11477: LD_VAR 0 6
11481: NOT
11482: IFFALSE 11486
// exit ;
11484: GO 11734
// result := [ ] ;
11486: LD_ADDR_VAR 0 2
11490: PUSH
11491: EMPTY
11492: ST_TO_ADDR
// for i in tmp do
11493: LD_ADDR_VAR 0 3
11497: PUSH
11498: LD_VAR 0 6
11502: PUSH
11503: FOR_IN
11504: IFFALSE 11575
// begin t := UnitsInside ( i ) ;
11506: LD_ADDR_VAR 0 4
11510: PUSH
11511: LD_VAR 0 3
11515: PPUSH
11516: CALL_OW 313
11520: ST_TO_ADDR
// if t then
11521: LD_VAR 0 4
11525: IFFALSE 11573
// for j in t do
11527: LD_ADDR_VAR 0 7
11531: PUSH
11532: LD_VAR 0 4
11536: PUSH
11537: FOR_IN
11538: IFFALSE 11571
// result := Replace ( result , result + 1 , j ) ;
11540: LD_ADDR_VAR 0 2
11544: PUSH
11545: LD_VAR 0 2
11549: PPUSH
11550: LD_VAR 0 2
11554: PUSH
11555: LD_INT 1
11557: PLUS
11558: PPUSH
11559: LD_VAR 0 7
11563: PPUSH
11564: CALL_OW 1
11568: ST_TO_ADDR
11569: GO 11537
11571: POP
11572: POP
// end ;
11573: GO 11503
11575: POP
11576: POP
// if not result then
11577: LD_VAR 0 2
11581: NOT
11582: IFFALSE 11586
// exit ;
11584: GO 11734
// mech := result [ 1 ] ;
11586: LD_ADDR_VAR 0 5
11590: PUSH
11591: LD_VAR 0 2
11595: PUSH
11596: LD_INT 1
11598: ARRAY
11599: ST_TO_ADDR
// if result > 1 then
11600: LD_VAR 0 2
11604: PUSH
11605: LD_INT 1
11607: GREATER
11608: IFFALSE 11720
// begin for i = 2 to result do
11610: LD_ADDR_VAR 0 3
11614: PUSH
11615: DOUBLE
11616: LD_INT 2
11618: DEC
11619: ST_TO_ADDR
11620: LD_VAR 0 2
11624: PUSH
11625: FOR_TO
11626: IFFALSE 11718
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11628: LD_ADDR_VAR 0 4
11632: PUSH
11633: LD_VAR 0 2
11637: PUSH
11638: LD_VAR 0 3
11642: ARRAY
11643: PPUSH
11644: LD_INT 3
11646: PPUSH
11647: CALL_OW 259
11651: PUSH
11652: LD_VAR 0 2
11656: PUSH
11657: LD_VAR 0 3
11661: ARRAY
11662: PPUSH
11663: CALL_OW 432
11667: MINUS
11668: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11669: LD_VAR 0 4
11673: PUSH
11674: LD_VAR 0 5
11678: PPUSH
11679: LD_INT 3
11681: PPUSH
11682: CALL_OW 259
11686: PUSH
11687: LD_VAR 0 5
11691: PPUSH
11692: CALL_OW 432
11696: MINUS
11697: GREATEREQUAL
11698: IFFALSE 11716
// mech := result [ i ] ;
11700: LD_ADDR_VAR 0 5
11704: PUSH
11705: LD_VAR 0 2
11709: PUSH
11710: LD_VAR 0 3
11714: ARRAY
11715: ST_TO_ADDR
// end ;
11716: GO 11625
11718: POP
11719: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11720: LD_VAR 0 1
11724: PPUSH
11725: LD_VAR 0 5
11729: PPUSH
11730: CALL_OW 135
// end ;
11734: LD_VAR 0 2
11738: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11739: LD_INT 0
11741: PPUSH
11742: PPUSH
11743: PPUSH
11744: PPUSH
11745: PPUSH
11746: PPUSH
11747: PPUSH
11748: PPUSH
11749: PPUSH
11750: PPUSH
11751: PPUSH
11752: PPUSH
11753: PPUSH
// result := [ ] ;
11754: LD_ADDR_VAR 0 7
11758: PUSH
11759: EMPTY
11760: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11761: LD_VAR 0 1
11765: PPUSH
11766: CALL_OW 266
11770: PUSH
11771: LD_INT 0
11773: PUSH
11774: LD_INT 1
11776: PUSH
11777: EMPTY
11778: LIST
11779: LIST
11780: IN
11781: NOT
11782: IFFALSE 11786
// exit ;
11784: GO 13420
// if name then
11786: LD_VAR 0 3
11790: IFFALSE 11806
// SetBName ( base_dep , name ) ;
11792: LD_VAR 0 1
11796: PPUSH
11797: LD_VAR 0 3
11801: PPUSH
11802: CALL_OW 500
// base := GetBase ( base_dep ) ;
11806: LD_ADDR_VAR 0 15
11810: PUSH
11811: LD_VAR 0 1
11815: PPUSH
11816: CALL_OW 274
11820: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11821: LD_ADDR_VAR 0 16
11825: PUSH
11826: LD_VAR 0 1
11830: PPUSH
11831: CALL_OW 255
11835: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11836: LD_ADDR_VAR 0 17
11840: PUSH
11841: LD_VAR 0 1
11845: PPUSH
11846: CALL_OW 248
11850: ST_TO_ADDR
// if sources then
11851: LD_VAR 0 5
11855: IFFALSE 11902
// for i = 1 to 3 do
11857: LD_ADDR_VAR 0 8
11861: PUSH
11862: DOUBLE
11863: LD_INT 1
11865: DEC
11866: ST_TO_ADDR
11867: LD_INT 3
11869: PUSH
11870: FOR_TO
11871: IFFALSE 11900
// AddResourceType ( base , i , sources [ i ] ) ;
11873: LD_VAR 0 15
11877: PPUSH
11878: LD_VAR 0 8
11882: PPUSH
11883: LD_VAR 0 5
11887: PUSH
11888: LD_VAR 0 8
11892: ARRAY
11893: PPUSH
11894: CALL_OW 276
11898: GO 11870
11900: POP
11901: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11902: LD_ADDR_VAR 0 18
11906: PUSH
11907: LD_VAR 0 15
11911: PPUSH
11912: LD_VAR 0 2
11916: PPUSH
11917: LD_INT 1
11919: PPUSH
11920: CALL 11163 0 3
11924: ST_TO_ADDR
// InitHc ;
11925: CALL_OW 19
// InitUc ;
11929: CALL_OW 18
// uc_side := side ;
11933: LD_ADDR_OWVAR 20
11937: PUSH
11938: LD_VAR 0 16
11942: ST_TO_ADDR
// uc_nation := nation ;
11943: LD_ADDR_OWVAR 21
11947: PUSH
11948: LD_VAR 0 17
11952: ST_TO_ADDR
// if buildings then
11953: LD_VAR 0 18
11957: IFFALSE 13279
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11959: LD_ADDR_VAR 0 19
11963: PUSH
11964: LD_VAR 0 18
11968: PPUSH
11969: LD_INT 2
11971: PUSH
11972: LD_INT 30
11974: PUSH
11975: LD_INT 29
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: PUSH
11982: LD_INT 30
11984: PUSH
11985: LD_INT 30
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: PUSH
11992: EMPTY
11993: LIST
11994: LIST
11995: LIST
11996: PPUSH
11997: CALL_OW 72
12001: ST_TO_ADDR
// if tmp then
12002: LD_VAR 0 19
12006: IFFALSE 12054
// for i in tmp do
12008: LD_ADDR_VAR 0 8
12012: PUSH
12013: LD_VAR 0 19
12017: PUSH
12018: FOR_IN
12019: IFFALSE 12052
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12021: LD_VAR 0 8
12025: PPUSH
12026: CALL_OW 250
12030: PPUSH
12031: LD_VAR 0 8
12035: PPUSH
12036: CALL_OW 251
12040: PPUSH
12041: LD_VAR 0 16
12045: PPUSH
12046: CALL_OW 441
12050: GO 12018
12052: POP
12053: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12054: LD_VAR 0 18
12058: PPUSH
12059: LD_INT 2
12061: PUSH
12062: LD_INT 30
12064: PUSH
12065: LD_INT 32
12067: PUSH
12068: EMPTY
12069: LIST
12070: LIST
12071: PUSH
12072: LD_INT 30
12074: PUSH
12075: LD_INT 33
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: PUSH
12082: EMPTY
12083: LIST
12084: LIST
12085: LIST
12086: PPUSH
12087: CALL_OW 72
12091: IFFALSE 12179
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12093: LD_ADDR_VAR 0 8
12097: PUSH
12098: LD_VAR 0 18
12102: PPUSH
12103: LD_INT 2
12105: PUSH
12106: LD_INT 30
12108: PUSH
12109: LD_INT 32
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: PUSH
12116: LD_INT 30
12118: PUSH
12119: LD_INT 33
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: PUSH
12126: EMPTY
12127: LIST
12128: LIST
12129: LIST
12130: PPUSH
12131: CALL_OW 72
12135: PUSH
12136: FOR_IN
12137: IFFALSE 12177
// begin if not GetBWeapon ( i ) then
12139: LD_VAR 0 8
12143: PPUSH
12144: CALL_OW 269
12148: NOT
12149: IFFALSE 12175
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12151: LD_VAR 0 8
12155: PPUSH
12156: LD_VAR 0 8
12160: PPUSH
12161: LD_VAR 0 2
12165: PPUSH
12166: CALL 13425 0 2
12170: PPUSH
12171: CALL_OW 431
// end ;
12175: GO 12136
12177: POP
12178: POP
// end ; for i = 1 to personel do
12179: LD_ADDR_VAR 0 8
12183: PUSH
12184: DOUBLE
12185: LD_INT 1
12187: DEC
12188: ST_TO_ADDR
12189: LD_VAR 0 6
12193: PUSH
12194: FOR_TO
12195: IFFALSE 13259
// begin if i > 4 then
12197: LD_VAR 0 8
12201: PUSH
12202: LD_INT 4
12204: GREATER
12205: IFFALSE 12209
// break ;
12207: GO 13259
// case i of 1 :
12209: LD_VAR 0 8
12213: PUSH
12214: LD_INT 1
12216: DOUBLE
12217: EQUAL
12218: IFTRUE 12222
12220: GO 12302
12222: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12223: LD_ADDR_VAR 0 12
12227: PUSH
12228: LD_VAR 0 18
12232: PPUSH
12233: LD_INT 22
12235: PUSH
12236: LD_VAR 0 16
12240: PUSH
12241: EMPTY
12242: LIST
12243: LIST
12244: PUSH
12245: LD_INT 58
12247: PUSH
12248: EMPTY
12249: LIST
12250: PUSH
12251: LD_INT 2
12253: PUSH
12254: LD_INT 30
12256: PUSH
12257: LD_INT 32
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: PUSH
12264: LD_INT 30
12266: PUSH
12267: LD_INT 4
12269: PUSH
12270: EMPTY
12271: LIST
12272: LIST
12273: PUSH
12274: LD_INT 30
12276: PUSH
12277: LD_INT 5
12279: PUSH
12280: EMPTY
12281: LIST
12282: LIST
12283: PUSH
12284: EMPTY
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: LIST
12294: PPUSH
12295: CALL_OW 72
12299: ST_TO_ADDR
12300: GO 12524
12302: LD_INT 2
12304: DOUBLE
12305: EQUAL
12306: IFTRUE 12310
12308: GO 12372
12310: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12311: LD_ADDR_VAR 0 12
12315: PUSH
12316: LD_VAR 0 18
12320: PPUSH
12321: LD_INT 22
12323: PUSH
12324: LD_VAR 0 16
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PUSH
12333: LD_INT 2
12335: PUSH
12336: LD_INT 30
12338: PUSH
12339: LD_INT 0
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: PUSH
12346: LD_INT 30
12348: PUSH
12349: LD_INT 1
12351: PUSH
12352: EMPTY
12353: LIST
12354: LIST
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: LIST
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: PPUSH
12365: CALL_OW 72
12369: ST_TO_ADDR
12370: GO 12524
12372: LD_INT 3
12374: DOUBLE
12375: EQUAL
12376: IFTRUE 12380
12378: GO 12442
12380: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12381: LD_ADDR_VAR 0 12
12385: PUSH
12386: LD_VAR 0 18
12390: PPUSH
12391: LD_INT 22
12393: PUSH
12394: LD_VAR 0 16
12398: PUSH
12399: EMPTY
12400: LIST
12401: LIST
12402: PUSH
12403: LD_INT 2
12405: PUSH
12406: LD_INT 30
12408: PUSH
12409: LD_INT 2
12411: PUSH
12412: EMPTY
12413: LIST
12414: LIST
12415: PUSH
12416: LD_INT 30
12418: PUSH
12419: LD_INT 3
12421: PUSH
12422: EMPTY
12423: LIST
12424: LIST
12425: PUSH
12426: EMPTY
12427: LIST
12428: LIST
12429: LIST
12430: PUSH
12431: EMPTY
12432: LIST
12433: LIST
12434: PPUSH
12435: CALL_OW 72
12439: ST_TO_ADDR
12440: GO 12524
12442: LD_INT 4
12444: DOUBLE
12445: EQUAL
12446: IFTRUE 12450
12448: GO 12523
12450: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12451: LD_ADDR_VAR 0 12
12455: PUSH
12456: LD_VAR 0 18
12460: PPUSH
12461: LD_INT 22
12463: PUSH
12464: LD_VAR 0 16
12468: PUSH
12469: EMPTY
12470: LIST
12471: LIST
12472: PUSH
12473: LD_INT 2
12475: PUSH
12476: LD_INT 30
12478: PUSH
12479: LD_INT 6
12481: PUSH
12482: EMPTY
12483: LIST
12484: LIST
12485: PUSH
12486: LD_INT 30
12488: PUSH
12489: LD_INT 7
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: PUSH
12496: LD_INT 30
12498: PUSH
12499: LD_INT 8
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: PUSH
12506: EMPTY
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: PUSH
12512: EMPTY
12513: LIST
12514: LIST
12515: PPUSH
12516: CALL_OW 72
12520: ST_TO_ADDR
12521: GO 12524
12523: POP
// if i = 1 then
12524: LD_VAR 0 8
12528: PUSH
12529: LD_INT 1
12531: EQUAL
12532: IFFALSE 12643
// begin tmp := [ ] ;
12534: LD_ADDR_VAR 0 19
12538: PUSH
12539: EMPTY
12540: ST_TO_ADDR
// for j in f do
12541: LD_ADDR_VAR 0 9
12545: PUSH
12546: LD_VAR 0 12
12550: PUSH
12551: FOR_IN
12552: IFFALSE 12625
// if GetBType ( j ) = b_bunker then
12554: LD_VAR 0 9
12558: PPUSH
12559: CALL_OW 266
12563: PUSH
12564: LD_INT 32
12566: EQUAL
12567: IFFALSE 12594
// tmp := Insert ( tmp , 1 , j ) else
12569: LD_ADDR_VAR 0 19
12573: PUSH
12574: LD_VAR 0 19
12578: PPUSH
12579: LD_INT 1
12581: PPUSH
12582: LD_VAR 0 9
12586: PPUSH
12587: CALL_OW 2
12591: ST_TO_ADDR
12592: GO 12623
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12594: LD_ADDR_VAR 0 19
12598: PUSH
12599: LD_VAR 0 19
12603: PPUSH
12604: LD_VAR 0 19
12608: PUSH
12609: LD_INT 1
12611: PLUS
12612: PPUSH
12613: LD_VAR 0 9
12617: PPUSH
12618: CALL_OW 2
12622: ST_TO_ADDR
12623: GO 12551
12625: POP
12626: POP
// if tmp then
12627: LD_VAR 0 19
12631: IFFALSE 12643
// f := tmp ;
12633: LD_ADDR_VAR 0 12
12637: PUSH
12638: LD_VAR 0 19
12642: ST_TO_ADDR
// end ; x := personel [ i ] ;
12643: LD_ADDR_VAR 0 13
12647: PUSH
12648: LD_VAR 0 6
12652: PUSH
12653: LD_VAR 0 8
12657: ARRAY
12658: ST_TO_ADDR
// if x = - 1 then
12659: LD_VAR 0 13
12663: PUSH
12664: LD_INT 1
12666: NEG
12667: EQUAL
12668: IFFALSE 12877
// begin for j in f do
12670: LD_ADDR_VAR 0 9
12674: PUSH
12675: LD_VAR 0 12
12679: PUSH
12680: FOR_IN
12681: IFFALSE 12873
// repeat InitHc ;
12683: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12687: LD_VAR 0 9
12691: PPUSH
12692: CALL_OW 266
12696: PUSH
12697: LD_INT 5
12699: EQUAL
12700: IFFALSE 12770
// begin if UnitsInside ( j ) < 3 then
12702: LD_VAR 0 9
12706: PPUSH
12707: CALL_OW 313
12711: PUSH
12712: LD_INT 3
12714: LESS
12715: IFFALSE 12751
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12717: LD_INT 0
12719: PPUSH
12720: LD_INT 5
12722: PUSH
12723: LD_INT 8
12725: PUSH
12726: LD_INT 9
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: LIST
12733: PUSH
12734: LD_VAR 0 17
12738: ARRAY
12739: PPUSH
12740: LD_VAR 0 4
12744: PPUSH
12745: CALL_OW 380
12749: GO 12768
// PrepareHuman ( false , i , skill ) ;
12751: LD_INT 0
12753: PPUSH
12754: LD_VAR 0 8
12758: PPUSH
12759: LD_VAR 0 4
12763: PPUSH
12764: CALL_OW 380
// end else
12768: GO 12787
// PrepareHuman ( false , i , skill ) ;
12770: LD_INT 0
12772: PPUSH
12773: LD_VAR 0 8
12777: PPUSH
12778: LD_VAR 0 4
12782: PPUSH
12783: CALL_OW 380
// un := CreateHuman ;
12787: LD_ADDR_VAR 0 14
12791: PUSH
12792: CALL_OW 44
12796: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12797: LD_ADDR_VAR 0 7
12801: PUSH
12802: LD_VAR 0 7
12806: PPUSH
12807: LD_INT 1
12809: PPUSH
12810: LD_VAR 0 14
12814: PPUSH
12815: CALL_OW 2
12819: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12820: LD_VAR 0 14
12824: PPUSH
12825: LD_VAR 0 9
12829: PPUSH
12830: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12834: LD_VAR 0 9
12838: PPUSH
12839: CALL_OW 313
12843: PUSH
12844: LD_INT 6
12846: EQUAL
12847: PUSH
12848: LD_VAR 0 9
12852: PPUSH
12853: CALL_OW 266
12857: PUSH
12858: LD_INT 32
12860: PUSH
12861: LD_INT 31
12863: PUSH
12864: EMPTY
12865: LIST
12866: LIST
12867: IN
12868: OR
12869: IFFALSE 12683
12871: GO 12680
12873: POP
12874: POP
// end else
12875: GO 13257
// for j = 1 to x do
12877: LD_ADDR_VAR 0 9
12881: PUSH
12882: DOUBLE
12883: LD_INT 1
12885: DEC
12886: ST_TO_ADDR
12887: LD_VAR 0 13
12891: PUSH
12892: FOR_TO
12893: IFFALSE 13255
// begin InitHc ;
12895: CALL_OW 19
// if not f then
12899: LD_VAR 0 12
12903: NOT
12904: IFFALSE 12993
// begin PrepareHuman ( false , i , skill ) ;
12906: LD_INT 0
12908: PPUSH
12909: LD_VAR 0 8
12913: PPUSH
12914: LD_VAR 0 4
12918: PPUSH
12919: CALL_OW 380
// un := CreateHuman ;
12923: LD_ADDR_VAR 0 14
12927: PUSH
12928: CALL_OW 44
12932: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12933: LD_ADDR_VAR 0 7
12937: PUSH
12938: LD_VAR 0 7
12942: PPUSH
12943: LD_INT 1
12945: PPUSH
12946: LD_VAR 0 14
12950: PPUSH
12951: CALL_OW 2
12955: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12956: LD_VAR 0 14
12960: PPUSH
12961: LD_VAR 0 1
12965: PPUSH
12966: CALL_OW 250
12970: PPUSH
12971: LD_VAR 0 1
12975: PPUSH
12976: CALL_OW 251
12980: PPUSH
12981: LD_INT 10
12983: PPUSH
12984: LD_INT 0
12986: PPUSH
12987: CALL_OW 50
// continue ;
12991: GO 12892
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12993: LD_VAR 0 12
12997: PUSH
12998: LD_INT 1
13000: ARRAY
13001: PPUSH
13002: CALL_OW 313
13006: PUSH
13007: LD_VAR 0 12
13011: PUSH
13012: LD_INT 1
13014: ARRAY
13015: PPUSH
13016: CALL_OW 266
13020: PUSH
13021: LD_INT 32
13023: PUSH
13024: LD_INT 31
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: IN
13031: AND
13032: PUSH
13033: LD_VAR 0 12
13037: PUSH
13038: LD_INT 1
13040: ARRAY
13041: PPUSH
13042: CALL_OW 313
13046: PUSH
13047: LD_INT 6
13049: EQUAL
13050: OR
13051: IFFALSE 13071
// f := Delete ( f , 1 ) ;
13053: LD_ADDR_VAR 0 12
13057: PUSH
13058: LD_VAR 0 12
13062: PPUSH
13063: LD_INT 1
13065: PPUSH
13066: CALL_OW 3
13070: ST_TO_ADDR
// if not f then
13071: LD_VAR 0 12
13075: NOT
13076: IFFALSE 13094
// begin x := x + 2 ;
13078: LD_ADDR_VAR 0 13
13082: PUSH
13083: LD_VAR 0 13
13087: PUSH
13088: LD_INT 2
13090: PLUS
13091: ST_TO_ADDR
// continue ;
13092: GO 12892
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13094: LD_VAR 0 12
13098: PUSH
13099: LD_INT 1
13101: ARRAY
13102: PPUSH
13103: CALL_OW 266
13107: PUSH
13108: LD_INT 5
13110: EQUAL
13111: IFFALSE 13185
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13113: LD_VAR 0 12
13117: PUSH
13118: LD_INT 1
13120: ARRAY
13121: PPUSH
13122: CALL_OW 313
13126: PUSH
13127: LD_INT 3
13129: LESS
13130: IFFALSE 13166
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13132: LD_INT 0
13134: PPUSH
13135: LD_INT 5
13137: PUSH
13138: LD_INT 8
13140: PUSH
13141: LD_INT 9
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: LIST
13148: PUSH
13149: LD_VAR 0 17
13153: ARRAY
13154: PPUSH
13155: LD_VAR 0 4
13159: PPUSH
13160: CALL_OW 380
13164: GO 13183
// PrepareHuman ( false , i , skill ) ;
13166: LD_INT 0
13168: PPUSH
13169: LD_VAR 0 8
13173: PPUSH
13174: LD_VAR 0 4
13178: PPUSH
13179: CALL_OW 380
// end else
13183: GO 13202
// PrepareHuman ( false , i , skill ) ;
13185: LD_INT 0
13187: PPUSH
13188: LD_VAR 0 8
13192: PPUSH
13193: LD_VAR 0 4
13197: PPUSH
13198: CALL_OW 380
// un := CreateHuman ;
13202: LD_ADDR_VAR 0 14
13206: PUSH
13207: CALL_OW 44
13211: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13212: LD_ADDR_VAR 0 7
13216: PUSH
13217: LD_VAR 0 7
13221: PPUSH
13222: LD_INT 1
13224: PPUSH
13225: LD_VAR 0 14
13229: PPUSH
13230: CALL_OW 2
13234: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13235: LD_VAR 0 14
13239: PPUSH
13240: LD_VAR 0 12
13244: PUSH
13245: LD_INT 1
13247: ARRAY
13248: PPUSH
13249: CALL_OW 52
// end ;
13253: GO 12892
13255: POP
13256: POP
// end ;
13257: GO 12194
13259: POP
13260: POP
// result := result ^ buildings ;
13261: LD_ADDR_VAR 0 7
13265: PUSH
13266: LD_VAR 0 7
13270: PUSH
13271: LD_VAR 0 18
13275: ADD
13276: ST_TO_ADDR
// end else
13277: GO 13420
// begin for i = 1 to personel do
13279: LD_ADDR_VAR 0 8
13283: PUSH
13284: DOUBLE
13285: LD_INT 1
13287: DEC
13288: ST_TO_ADDR
13289: LD_VAR 0 6
13293: PUSH
13294: FOR_TO
13295: IFFALSE 13418
// begin if i > 4 then
13297: LD_VAR 0 8
13301: PUSH
13302: LD_INT 4
13304: GREATER
13305: IFFALSE 13309
// break ;
13307: GO 13418
// x := personel [ i ] ;
13309: LD_ADDR_VAR 0 13
13313: PUSH
13314: LD_VAR 0 6
13318: PUSH
13319: LD_VAR 0 8
13323: ARRAY
13324: ST_TO_ADDR
// if x = - 1 then
13325: LD_VAR 0 13
13329: PUSH
13330: LD_INT 1
13332: NEG
13333: EQUAL
13334: IFFALSE 13338
// continue ;
13336: GO 13294
// PrepareHuman ( false , i , skill ) ;
13338: LD_INT 0
13340: PPUSH
13341: LD_VAR 0 8
13345: PPUSH
13346: LD_VAR 0 4
13350: PPUSH
13351: CALL_OW 380
// un := CreateHuman ;
13355: LD_ADDR_VAR 0 14
13359: PUSH
13360: CALL_OW 44
13364: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13365: LD_VAR 0 14
13369: PPUSH
13370: LD_VAR 0 1
13374: PPUSH
13375: CALL_OW 250
13379: PPUSH
13380: LD_VAR 0 1
13384: PPUSH
13385: CALL_OW 251
13389: PPUSH
13390: LD_INT 10
13392: PPUSH
13393: LD_INT 0
13395: PPUSH
13396: CALL_OW 50
// result := result ^ un ;
13400: LD_ADDR_VAR 0 7
13404: PUSH
13405: LD_VAR 0 7
13409: PUSH
13410: LD_VAR 0 14
13414: ADD
13415: ST_TO_ADDR
// end ;
13416: GO 13294
13418: POP
13419: POP
// end ; end ;
13420: LD_VAR 0 7
13424: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13425: LD_INT 0
13427: PPUSH
13428: PPUSH
13429: PPUSH
13430: PPUSH
13431: PPUSH
13432: PPUSH
13433: PPUSH
13434: PPUSH
13435: PPUSH
13436: PPUSH
13437: PPUSH
13438: PPUSH
13439: PPUSH
13440: PPUSH
13441: PPUSH
13442: PPUSH
// result := false ;
13443: LD_ADDR_VAR 0 3
13447: PUSH
13448: LD_INT 0
13450: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13451: LD_VAR 0 1
13455: NOT
13456: PUSH
13457: LD_VAR 0 1
13461: PPUSH
13462: CALL_OW 266
13466: PUSH
13467: LD_INT 32
13469: PUSH
13470: LD_INT 33
13472: PUSH
13473: EMPTY
13474: LIST
13475: LIST
13476: IN
13477: NOT
13478: OR
13479: IFFALSE 13483
// exit ;
13481: GO 14592
// nat := GetNation ( tower ) ;
13483: LD_ADDR_VAR 0 12
13487: PUSH
13488: LD_VAR 0 1
13492: PPUSH
13493: CALL_OW 248
13497: ST_TO_ADDR
// side := GetSide ( tower ) ;
13498: LD_ADDR_VAR 0 16
13502: PUSH
13503: LD_VAR 0 1
13507: PPUSH
13508: CALL_OW 255
13512: ST_TO_ADDR
// x := GetX ( tower ) ;
13513: LD_ADDR_VAR 0 10
13517: PUSH
13518: LD_VAR 0 1
13522: PPUSH
13523: CALL_OW 250
13527: ST_TO_ADDR
// y := GetY ( tower ) ;
13528: LD_ADDR_VAR 0 11
13532: PUSH
13533: LD_VAR 0 1
13537: PPUSH
13538: CALL_OW 251
13542: ST_TO_ADDR
// if not x or not y then
13543: LD_VAR 0 10
13547: NOT
13548: PUSH
13549: LD_VAR 0 11
13553: NOT
13554: OR
13555: IFFALSE 13559
// exit ;
13557: GO 14592
// weapon := 0 ;
13559: LD_ADDR_VAR 0 18
13563: PUSH
13564: LD_INT 0
13566: ST_TO_ADDR
// fac_list := [ ] ;
13567: LD_ADDR_VAR 0 17
13571: PUSH
13572: EMPTY
13573: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13574: LD_ADDR_VAR 0 6
13578: PUSH
13579: LD_VAR 0 1
13583: PPUSH
13584: CALL_OW 274
13588: PPUSH
13589: LD_VAR 0 2
13593: PPUSH
13594: LD_INT 0
13596: PPUSH
13597: CALL 11163 0 3
13601: PPUSH
13602: LD_INT 30
13604: PUSH
13605: LD_INT 3
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: PPUSH
13612: CALL_OW 72
13616: ST_TO_ADDR
// if not factories then
13617: LD_VAR 0 6
13621: NOT
13622: IFFALSE 13626
// exit ;
13624: GO 14592
// for i in factories do
13626: LD_ADDR_VAR 0 8
13630: PUSH
13631: LD_VAR 0 6
13635: PUSH
13636: FOR_IN
13637: IFFALSE 13662
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13639: LD_ADDR_VAR 0 17
13643: PUSH
13644: LD_VAR 0 17
13648: PUSH
13649: LD_VAR 0 8
13653: PPUSH
13654: CALL_OW 478
13658: UNION
13659: ST_TO_ADDR
13660: GO 13636
13662: POP
13663: POP
// if not fac_list then
13664: LD_VAR 0 17
13668: NOT
13669: IFFALSE 13673
// exit ;
13671: GO 14592
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13673: LD_ADDR_VAR 0 5
13677: PUSH
13678: LD_INT 4
13680: PUSH
13681: LD_INT 5
13683: PUSH
13684: LD_INT 9
13686: PUSH
13687: LD_INT 10
13689: PUSH
13690: LD_INT 6
13692: PUSH
13693: LD_INT 7
13695: PUSH
13696: LD_INT 11
13698: PUSH
13699: EMPTY
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: PUSH
13708: LD_INT 27
13710: PUSH
13711: LD_INT 28
13713: PUSH
13714: LD_INT 26
13716: PUSH
13717: LD_INT 30
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: PUSH
13726: LD_INT 43
13728: PUSH
13729: LD_INT 44
13731: PUSH
13732: LD_INT 46
13734: PUSH
13735: LD_INT 45
13737: PUSH
13738: LD_INT 47
13740: PUSH
13741: LD_INT 49
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: LIST
13756: PUSH
13757: LD_VAR 0 12
13761: ARRAY
13762: ST_TO_ADDR
// list := list isect fac_list ;
13763: LD_ADDR_VAR 0 5
13767: PUSH
13768: LD_VAR 0 5
13772: PUSH
13773: LD_VAR 0 17
13777: ISECT
13778: ST_TO_ADDR
// if not list then
13779: LD_VAR 0 5
13783: NOT
13784: IFFALSE 13788
// exit ;
13786: GO 14592
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13788: LD_VAR 0 12
13792: PUSH
13793: LD_INT 3
13795: EQUAL
13796: PUSH
13797: LD_INT 49
13799: PUSH
13800: LD_VAR 0 5
13804: IN
13805: AND
13806: PUSH
13807: LD_INT 31
13809: PPUSH
13810: LD_VAR 0 16
13814: PPUSH
13815: CALL_OW 321
13819: PUSH
13820: LD_INT 2
13822: EQUAL
13823: AND
13824: IFFALSE 13884
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13826: LD_INT 22
13828: PUSH
13829: LD_VAR 0 16
13833: PUSH
13834: EMPTY
13835: LIST
13836: LIST
13837: PUSH
13838: LD_INT 35
13840: PUSH
13841: LD_INT 49
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: PUSH
13848: LD_INT 91
13850: PUSH
13851: LD_VAR 0 1
13855: PUSH
13856: LD_INT 10
13858: PUSH
13859: EMPTY
13860: LIST
13861: LIST
13862: LIST
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: LIST
13868: PPUSH
13869: CALL_OW 69
13873: NOT
13874: IFFALSE 13884
// weapon := ru_time_lapser ;
13876: LD_ADDR_VAR 0 18
13880: PUSH
13881: LD_INT 49
13883: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13884: LD_VAR 0 12
13888: PUSH
13889: LD_INT 1
13891: PUSH
13892: LD_INT 2
13894: PUSH
13895: EMPTY
13896: LIST
13897: LIST
13898: IN
13899: PUSH
13900: LD_INT 11
13902: PUSH
13903: LD_VAR 0 5
13907: IN
13908: PUSH
13909: LD_INT 30
13911: PUSH
13912: LD_VAR 0 5
13916: IN
13917: OR
13918: AND
13919: PUSH
13920: LD_INT 6
13922: PPUSH
13923: LD_VAR 0 16
13927: PPUSH
13928: CALL_OW 321
13932: PUSH
13933: LD_INT 2
13935: EQUAL
13936: AND
13937: IFFALSE 14102
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13939: LD_INT 22
13941: PUSH
13942: LD_VAR 0 16
13946: PUSH
13947: EMPTY
13948: LIST
13949: LIST
13950: PUSH
13951: LD_INT 2
13953: PUSH
13954: LD_INT 35
13956: PUSH
13957: LD_INT 11
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: PUSH
13964: LD_INT 35
13966: PUSH
13967: LD_INT 30
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: PUSH
13974: EMPTY
13975: LIST
13976: LIST
13977: LIST
13978: PUSH
13979: LD_INT 91
13981: PUSH
13982: LD_VAR 0 1
13986: PUSH
13987: LD_INT 18
13989: PUSH
13990: EMPTY
13991: LIST
13992: LIST
13993: LIST
13994: PUSH
13995: EMPTY
13996: LIST
13997: LIST
13998: LIST
13999: PPUSH
14000: CALL_OW 69
14004: NOT
14005: PUSH
14006: LD_INT 22
14008: PUSH
14009: LD_VAR 0 16
14013: PUSH
14014: EMPTY
14015: LIST
14016: LIST
14017: PUSH
14018: LD_INT 2
14020: PUSH
14021: LD_INT 30
14023: PUSH
14024: LD_INT 32
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: PUSH
14031: LD_INT 30
14033: PUSH
14034: LD_INT 33
14036: PUSH
14037: EMPTY
14038: LIST
14039: LIST
14040: PUSH
14041: EMPTY
14042: LIST
14043: LIST
14044: LIST
14045: PUSH
14046: LD_INT 91
14048: PUSH
14049: LD_VAR 0 1
14053: PUSH
14054: LD_INT 12
14056: PUSH
14057: EMPTY
14058: LIST
14059: LIST
14060: LIST
14061: PUSH
14062: EMPTY
14063: LIST
14064: LIST
14065: LIST
14066: PUSH
14067: EMPTY
14068: LIST
14069: PPUSH
14070: CALL_OW 69
14074: PUSH
14075: LD_INT 2
14077: GREATER
14078: AND
14079: IFFALSE 14102
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14081: LD_ADDR_VAR 0 18
14085: PUSH
14086: LD_INT 11
14088: PUSH
14089: LD_INT 30
14091: PUSH
14092: EMPTY
14093: LIST
14094: LIST
14095: PUSH
14096: LD_VAR 0 12
14100: ARRAY
14101: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14102: LD_VAR 0 18
14106: NOT
14107: PUSH
14108: LD_INT 40
14110: PPUSH
14111: LD_VAR 0 16
14115: PPUSH
14116: CALL_OW 321
14120: PUSH
14121: LD_INT 2
14123: EQUAL
14124: AND
14125: PUSH
14126: LD_INT 7
14128: PUSH
14129: LD_VAR 0 5
14133: IN
14134: PUSH
14135: LD_INT 28
14137: PUSH
14138: LD_VAR 0 5
14142: IN
14143: OR
14144: PUSH
14145: LD_INT 45
14147: PUSH
14148: LD_VAR 0 5
14152: IN
14153: OR
14154: AND
14155: IFFALSE 14409
// begin hex := GetHexInfo ( x , y ) ;
14157: LD_ADDR_VAR 0 4
14161: PUSH
14162: LD_VAR 0 10
14166: PPUSH
14167: LD_VAR 0 11
14171: PPUSH
14172: CALL_OW 546
14176: ST_TO_ADDR
// if hex [ 1 ] then
14177: LD_VAR 0 4
14181: PUSH
14182: LD_INT 1
14184: ARRAY
14185: IFFALSE 14189
// exit ;
14187: GO 14592
// height := hex [ 2 ] ;
14189: LD_ADDR_VAR 0 15
14193: PUSH
14194: LD_VAR 0 4
14198: PUSH
14199: LD_INT 2
14201: ARRAY
14202: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14203: LD_ADDR_VAR 0 14
14207: PUSH
14208: LD_INT 0
14210: PUSH
14211: LD_INT 2
14213: PUSH
14214: LD_INT 3
14216: PUSH
14217: LD_INT 5
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: ST_TO_ADDR
// for i in tmp do
14226: LD_ADDR_VAR 0 8
14230: PUSH
14231: LD_VAR 0 14
14235: PUSH
14236: FOR_IN
14237: IFFALSE 14407
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14239: LD_ADDR_VAR 0 9
14243: PUSH
14244: LD_VAR 0 10
14248: PPUSH
14249: LD_VAR 0 8
14253: PPUSH
14254: LD_INT 5
14256: PPUSH
14257: CALL_OW 272
14261: PUSH
14262: LD_VAR 0 11
14266: PPUSH
14267: LD_VAR 0 8
14271: PPUSH
14272: LD_INT 5
14274: PPUSH
14275: CALL_OW 273
14279: PUSH
14280: EMPTY
14281: LIST
14282: LIST
14283: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14284: LD_VAR 0 9
14288: PUSH
14289: LD_INT 1
14291: ARRAY
14292: PPUSH
14293: LD_VAR 0 9
14297: PUSH
14298: LD_INT 2
14300: ARRAY
14301: PPUSH
14302: CALL_OW 488
14306: IFFALSE 14405
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14308: LD_ADDR_VAR 0 4
14312: PUSH
14313: LD_VAR 0 9
14317: PUSH
14318: LD_INT 1
14320: ARRAY
14321: PPUSH
14322: LD_VAR 0 9
14326: PUSH
14327: LD_INT 2
14329: ARRAY
14330: PPUSH
14331: CALL_OW 546
14335: ST_TO_ADDR
// if hex [ 1 ] then
14336: LD_VAR 0 4
14340: PUSH
14341: LD_INT 1
14343: ARRAY
14344: IFFALSE 14348
// continue ;
14346: GO 14236
// h := hex [ 2 ] ;
14348: LD_ADDR_VAR 0 13
14352: PUSH
14353: LD_VAR 0 4
14357: PUSH
14358: LD_INT 2
14360: ARRAY
14361: ST_TO_ADDR
// if h + 7 < height then
14362: LD_VAR 0 13
14366: PUSH
14367: LD_INT 7
14369: PLUS
14370: PUSH
14371: LD_VAR 0 15
14375: LESS
14376: IFFALSE 14405
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14378: LD_ADDR_VAR 0 18
14382: PUSH
14383: LD_INT 7
14385: PUSH
14386: LD_INT 28
14388: PUSH
14389: LD_INT 45
14391: PUSH
14392: EMPTY
14393: LIST
14394: LIST
14395: LIST
14396: PUSH
14397: LD_VAR 0 12
14401: ARRAY
14402: ST_TO_ADDR
// break ;
14403: GO 14407
// end ; end ; end ;
14405: GO 14236
14407: POP
14408: POP
// end ; if not weapon then
14409: LD_VAR 0 18
14413: NOT
14414: IFFALSE 14474
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14416: LD_ADDR_VAR 0 5
14420: PUSH
14421: LD_VAR 0 5
14425: PUSH
14426: LD_INT 11
14428: PUSH
14429: LD_INT 30
14431: PUSH
14432: LD_INT 49
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: LIST
14439: DIFF
14440: ST_TO_ADDR
// if not list then
14441: LD_VAR 0 5
14445: NOT
14446: IFFALSE 14450
// exit ;
14448: GO 14592
// weapon := list [ rand ( 1 , list ) ] ;
14450: LD_ADDR_VAR 0 18
14454: PUSH
14455: LD_VAR 0 5
14459: PUSH
14460: LD_INT 1
14462: PPUSH
14463: LD_VAR 0 5
14467: PPUSH
14468: CALL_OW 12
14472: ARRAY
14473: ST_TO_ADDR
// end ; if weapon then
14474: LD_VAR 0 18
14478: IFFALSE 14592
// begin tmp := CostOfWeapon ( weapon ) ;
14480: LD_ADDR_VAR 0 14
14484: PUSH
14485: LD_VAR 0 18
14489: PPUSH
14490: CALL_OW 451
14494: ST_TO_ADDR
// j := GetBase ( tower ) ;
14495: LD_ADDR_VAR 0 9
14499: PUSH
14500: LD_VAR 0 1
14504: PPUSH
14505: CALL_OW 274
14509: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14510: LD_VAR 0 9
14514: PPUSH
14515: LD_INT 1
14517: PPUSH
14518: CALL_OW 275
14522: PUSH
14523: LD_VAR 0 14
14527: PUSH
14528: LD_INT 1
14530: ARRAY
14531: GREATEREQUAL
14532: PUSH
14533: LD_VAR 0 9
14537: PPUSH
14538: LD_INT 2
14540: PPUSH
14541: CALL_OW 275
14545: PUSH
14546: LD_VAR 0 14
14550: PUSH
14551: LD_INT 2
14553: ARRAY
14554: GREATEREQUAL
14555: AND
14556: PUSH
14557: LD_VAR 0 9
14561: PPUSH
14562: LD_INT 3
14564: PPUSH
14565: CALL_OW 275
14569: PUSH
14570: LD_VAR 0 14
14574: PUSH
14575: LD_INT 3
14577: ARRAY
14578: GREATEREQUAL
14579: AND
14580: IFFALSE 14592
// result := weapon ;
14582: LD_ADDR_VAR 0 3
14586: PUSH
14587: LD_VAR 0 18
14591: ST_TO_ADDR
// end ; end ;
14592: LD_VAR 0 3
14596: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14597: LD_INT 0
14599: PPUSH
14600: PPUSH
// result := true ;
14601: LD_ADDR_VAR 0 3
14605: PUSH
14606: LD_INT 1
14608: ST_TO_ADDR
// if array1 = array2 then
14609: LD_VAR 0 1
14613: PUSH
14614: LD_VAR 0 2
14618: EQUAL
14619: IFFALSE 14679
// begin for i = 1 to array1 do
14621: LD_ADDR_VAR 0 4
14625: PUSH
14626: DOUBLE
14627: LD_INT 1
14629: DEC
14630: ST_TO_ADDR
14631: LD_VAR 0 1
14635: PUSH
14636: FOR_TO
14637: IFFALSE 14675
// if array1 [ i ] <> array2 [ i ] then
14639: LD_VAR 0 1
14643: PUSH
14644: LD_VAR 0 4
14648: ARRAY
14649: PUSH
14650: LD_VAR 0 2
14654: PUSH
14655: LD_VAR 0 4
14659: ARRAY
14660: NONEQUAL
14661: IFFALSE 14673
// begin result := false ;
14663: LD_ADDR_VAR 0 3
14667: PUSH
14668: LD_INT 0
14670: ST_TO_ADDR
// break ;
14671: GO 14675
// end ;
14673: GO 14636
14675: POP
14676: POP
// end else
14677: GO 14687
// result := false ;
14679: LD_ADDR_VAR 0 3
14683: PUSH
14684: LD_INT 0
14686: ST_TO_ADDR
// end ;
14687: LD_VAR 0 3
14691: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14692: LD_INT 0
14694: PPUSH
14695: PPUSH
// if not array1 or not array2 then
14696: LD_VAR 0 1
14700: NOT
14701: PUSH
14702: LD_VAR 0 2
14706: NOT
14707: OR
14708: IFFALSE 14712
// exit ;
14710: GO 14776
// result := true ;
14712: LD_ADDR_VAR 0 3
14716: PUSH
14717: LD_INT 1
14719: ST_TO_ADDR
// for i = 1 to array1 do
14720: LD_ADDR_VAR 0 4
14724: PUSH
14725: DOUBLE
14726: LD_INT 1
14728: DEC
14729: ST_TO_ADDR
14730: LD_VAR 0 1
14734: PUSH
14735: FOR_TO
14736: IFFALSE 14774
// if array1 [ i ] <> array2 [ i ] then
14738: LD_VAR 0 1
14742: PUSH
14743: LD_VAR 0 4
14747: ARRAY
14748: PUSH
14749: LD_VAR 0 2
14753: PUSH
14754: LD_VAR 0 4
14758: ARRAY
14759: NONEQUAL
14760: IFFALSE 14772
// begin result := false ;
14762: LD_ADDR_VAR 0 3
14766: PUSH
14767: LD_INT 0
14769: ST_TO_ADDR
// break ;
14770: GO 14774
// end ;
14772: GO 14735
14774: POP
14775: POP
// end ;
14776: LD_VAR 0 3
14780: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14781: LD_INT 0
14783: PPUSH
14784: PPUSH
14785: PPUSH
// pom := GetBase ( fac ) ;
14786: LD_ADDR_VAR 0 5
14790: PUSH
14791: LD_VAR 0 1
14795: PPUSH
14796: CALL_OW 274
14800: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14801: LD_ADDR_VAR 0 4
14805: PUSH
14806: LD_VAR 0 2
14810: PUSH
14811: LD_INT 1
14813: ARRAY
14814: PPUSH
14815: LD_VAR 0 2
14819: PUSH
14820: LD_INT 2
14822: ARRAY
14823: PPUSH
14824: LD_VAR 0 2
14828: PUSH
14829: LD_INT 3
14831: ARRAY
14832: PPUSH
14833: LD_VAR 0 2
14837: PUSH
14838: LD_INT 4
14840: ARRAY
14841: PPUSH
14842: CALL_OW 449
14846: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14847: LD_ADDR_VAR 0 3
14851: PUSH
14852: LD_VAR 0 5
14856: PPUSH
14857: LD_INT 1
14859: PPUSH
14860: CALL_OW 275
14864: PUSH
14865: LD_VAR 0 4
14869: PUSH
14870: LD_INT 1
14872: ARRAY
14873: GREATEREQUAL
14874: PUSH
14875: LD_VAR 0 5
14879: PPUSH
14880: LD_INT 2
14882: PPUSH
14883: CALL_OW 275
14887: PUSH
14888: LD_VAR 0 4
14892: PUSH
14893: LD_INT 2
14895: ARRAY
14896: GREATEREQUAL
14897: AND
14898: PUSH
14899: LD_VAR 0 5
14903: PPUSH
14904: LD_INT 3
14906: PPUSH
14907: CALL_OW 275
14911: PUSH
14912: LD_VAR 0 4
14916: PUSH
14917: LD_INT 3
14919: ARRAY
14920: GREATEREQUAL
14921: AND
14922: ST_TO_ADDR
// end ;
14923: LD_VAR 0 3
14927: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14928: LD_INT 0
14930: PPUSH
14931: PPUSH
14932: PPUSH
14933: PPUSH
// pom := GetBase ( building ) ;
14934: LD_ADDR_VAR 0 3
14938: PUSH
14939: LD_VAR 0 1
14943: PPUSH
14944: CALL_OW 274
14948: ST_TO_ADDR
// if not pom then
14949: LD_VAR 0 3
14953: NOT
14954: IFFALSE 14958
// exit ;
14956: GO 15128
// btype := GetBType ( building ) ;
14958: LD_ADDR_VAR 0 5
14962: PUSH
14963: LD_VAR 0 1
14967: PPUSH
14968: CALL_OW 266
14972: ST_TO_ADDR
// if btype = b_armoury then
14973: LD_VAR 0 5
14977: PUSH
14978: LD_INT 4
14980: EQUAL
14981: IFFALSE 14991
// btype := b_barracks ;
14983: LD_ADDR_VAR 0 5
14987: PUSH
14988: LD_INT 5
14990: ST_TO_ADDR
// if btype = b_depot then
14991: LD_VAR 0 5
14995: PUSH
14996: LD_INT 0
14998: EQUAL
14999: IFFALSE 15009
// btype := b_warehouse ;
15001: LD_ADDR_VAR 0 5
15005: PUSH
15006: LD_INT 1
15008: ST_TO_ADDR
// if btype = b_workshop then
15009: LD_VAR 0 5
15013: PUSH
15014: LD_INT 2
15016: EQUAL
15017: IFFALSE 15027
// btype := b_factory ;
15019: LD_ADDR_VAR 0 5
15023: PUSH
15024: LD_INT 3
15026: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15027: LD_ADDR_VAR 0 4
15031: PUSH
15032: LD_VAR 0 5
15036: PPUSH
15037: LD_VAR 0 1
15041: PPUSH
15042: CALL_OW 248
15046: PPUSH
15047: CALL_OW 450
15051: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15052: LD_ADDR_VAR 0 2
15056: PUSH
15057: LD_VAR 0 3
15061: PPUSH
15062: LD_INT 1
15064: PPUSH
15065: CALL_OW 275
15069: PUSH
15070: LD_VAR 0 4
15074: PUSH
15075: LD_INT 1
15077: ARRAY
15078: GREATEREQUAL
15079: PUSH
15080: LD_VAR 0 3
15084: PPUSH
15085: LD_INT 2
15087: PPUSH
15088: CALL_OW 275
15092: PUSH
15093: LD_VAR 0 4
15097: PUSH
15098: LD_INT 2
15100: ARRAY
15101: GREATEREQUAL
15102: AND
15103: PUSH
15104: LD_VAR 0 3
15108: PPUSH
15109: LD_INT 3
15111: PPUSH
15112: CALL_OW 275
15116: PUSH
15117: LD_VAR 0 4
15121: PUSH
15122: LD_INT 3
15124: ARRAY
15125: GREATEREQUAL
15126: AND
15127: ST_TO_ADDR
// end ;
15128: LD_VAR 0 2
15132: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15133: LD_INT 0
15135: PPUSH
15136: PPUSH
15137: PPUSH
// pom := GetBase ( building ) ;
15138: LD_ADDR_VAR 0 4
15142: PUSH
15143: LD_VAR 0 1
15147: PPUSH
15148: CALL_OW 274
15152: ST_TO_ADDR
// if not pom then
15153: LD_VAR 0 4
15157: NOT
15158: IFFALSE 15162
// exit ;
15160: GO 15263
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15162: LD_ADDR_VAR 0 5
15166: PUSH
15167: LD_VAR 0 2
15171: PPUSH
15172: LD_VAR 0 1
15176: PPUSH
15177: CALL_OW 248
15181: PPUSH
15182: CALL_OW 450
15186: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15187: LD_ADDR_VAR 0 3
15191: PUSH
15192: LD_VAR 0 4
15196: PPUSH
15197: LD_INT 1
15199: PPUSH
15200: CALL_OW 275
15204: PUSH
15205: LD_VAR 0 5
15209: PUSH
15210: LD_INT 1
15212: ARRAY
15213: GREATEREQUAL
15214: PUSH
15215: LD_VAR 0 4
15219: PPUSH
15220: LD_INT 2
15222: PPUSH
15223: CALL_OW 275
15227: PUSH
15228: LD_VAR 0 5
15232: PUSH
15233: LD_INT 2
15235: ARRAY
15236: GREATEREQUAL
15237: AND
15238: PUSH
15239: LD_VAR 0 4
15243: PPUSH
15244: LD_INT 3
15246: PPUSH
15247: CALL_OW 275
15251: PUSH
15252: LD_VAR 0 5
15256: PUSH
15257: LD_INT 3
15259: ARRAY
15260: GREATEREQUAL
15261: AND
15262: ST_TO_ADDR
// end ;
15263: LD_VAR 0 3
15267: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15268: LD_INT 0
15270: PPUSH
15271: PPUSH
15272: PPUSH
15273: PPUSH
15274: PPUSH
15275: PPUSH
15276: PPUSH
15277: PPUSH
15278: PPUSH
15279: PPUSH
15280: PPUSH
// result := false ;
15281: LD_ADDR_VAR 0 8
15285: PUSH
15286: LD_INT 0
15288: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15289: LD_VAR 0 5
15293: NOT
15294: PUSH
15295: LD_VAR 0 1
15299: NOT
15300: OR
15301: PUSH
15302: LD_VAR 0 2
15306: NOT
15307: OR
15308: PUSH
15309: LD_VAR 0 3
15313: NOT
15314: OR
15315: IFFALSE 15319
// exit ;
15317: GO 16133
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15319: LD_ADDR_VAR 0 14
15323: PUSH
15324: LD_VAR 0 1
15328: PPUSH
15329: LD_VAR 0 2
15333: PPUSH
15334: LD_VAR 0 3
15338: PPUSH
15339: LD_VAR 0 4
15343: PPUSH
15344: LD_VAR 0 5
15348: PUSH
15349: LD_INT 1
15351: ARRAY
15352: PPUSH
15353: CALL_OW 248
15357: PPUSH
15358: LD_INT 0
15360: PPUSH
15361: CALL 17370 0 6
15365: ST_TO_ADDR
// if not hexes then
15366: LD_VAR 0 14
15370: NOT
15371: IFFALSE 15375
// exit ;
15373: GO 16133
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15375: LD_ADDR_VAR 0 17
15379: PUSH
15380: LD_VAR 0 5
15384: PPUSH
15385: LD_INT 22
15387: PUSH
15388: LD_VAR 0 13
15392: PPUSH
15393: CALL_OW 255
15397: PUSH
15398: EMPTY
15399: LIST
15400: LIST
15401: PUSH
15402: LD_INT 2
15404: PUSH
15405: LD_INT 30
15407: PUSH
15408: LD_INT 0
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: PUSH
15415: LD_INT 30
15417: PUSH
15418: LD_INT 1
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: PUSH
15425: EMPTY
15426: LIST
15427: LIST
15428: LIST
15429: PUSH
15430: EMPTY
15431: LIST
15432: LIST
15433: PPUSH
15434: CALL_OW 72
15438: ST_TO_ADDR
// for i = 1 to hexes do
15439: LD_ADDR_VAR 0 9
15443: PUSH
15444: DOUBLE
15445: LD_INT 1
15447: DEC
15448: ST_TO_ADDR
15449: LD_VAR 0 14
15453: PUSH
15454: FOR_TO
15455: IFFALSE 16131
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15457: LD_ADDR_VAR 0 13
15461: PUSH
15462: LD_VAR 0 14
15466: PUSH
15467: LD_VAR 0 9
15471: ARRAY
15472: PUSH
15473: LD_INT 1
15475: ARRAY
15476: PPUSH
15477: LD_VAR 0 14
15481: PUSH
15482: LD_VAR 0 9
15486: ARRAY
15487: PUSH
15488: LD_INT 2
15490: ARRAY
15491: PPUSH
15492: CALL_OW 428
15496: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15497: LD_VAR 0 14
15501: PUSH
15502: LD_VAR 0 9
15506: ARRAY
15507: PUSH
15508: LD_INT 1
15510: ARRAY
15511: PPUSH
15512: LD_VAR 0 14
15516: PUSH
15517: LD_VAR 0 9
15521: ARRAY
15522: PUSH
15523: LD_INT 2
15525: ARRAY
15526: PPUSH
15527: CALL_OW 351
15531: PUSH
15532: LD_VAR 0 14
15536: PUSH
15537: LD_VAR 0 9
15541: ARRAY
15542: PUSH
15543: LD_INT 1
15545: ARRAY
15546: PPUSH
15547: LD_VAR 0 14
15551: PUSH
15552: LD_VAR 0 9
15556: ARRAY
15557: PUSH
15558: LD_INT 2
15560: ARRAY
15561: PPUSH
15562: CALL_OW 488
15566: NOT
15567: OR
15568: PUSH
15569: LD_VAR 0 13
15573: PPUSH
15574: CALL_OW 247
15578: PUSH
15579: LD_INT 3
15581: EQUAL
15582: OR
15583: IFFALSE 15589
// exit ;
15585: POP
15586: POP
15587: GO 16133
// if not tmp then
15589: LD_VAR 0 13
15593: NOT
15594: IFFALSE 15598
// continue ;
15596: GO 15454
// result := true ;
15598: LD_ADDR_VAR 0 8
15602: PUSH
15603: LD_INT 1
15605: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15606: LD_VAR 0 6
15610: PUSH
15611: LD_VAR 0 13
15615: PPUSH
15616: CALL_OW 247
15620: PUSH
15621: LD_INT 2
15623: EQUAL
15624: AND
15625: PUSH
15626: LD_VAR 0 13
15630: PPUSH
15631: CALL_OW 263
15635: PUSH
15636: LD_INT 1
15638: EQUAL
15639: AND
15640: IFFALSE 15804
// begin if IsDrivenBy ( tmp ) then
15642: LD_VAR 0 13
15646: PPUSH
15647: CALL_OW 311
15651: IFFALSE 15655
// continue ;
15653: GO 15454
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15655: LD_VAR 0 6
15659: PPUSH
15660: LD_INT 3
15662: PUSH
15663: LD_INT 60
15665: PUSH
15666: EMPTY
15667: LIST
15668: PUSH
15669: EMPTY
15670: LIST
15671: LIST
15672: PUSH
15673: LD_INT 3
15675: PUSH
15676: LD_INT 55
15678: PUSH
15679: EMPTY
15680: LIST
15681: PUSH
15682: EMPTY
15683: LIST
15684: LIST
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: PPUSH
15690: CALL_OW 72
15694: IFFALSE 15802
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15696: LD_ADDR_VAR 0 18
15700: PUSH
15701: LD_VAR 0 6
15705: PPUSH
15706: LD_INT 3
15708: PUSH
15709: LD_INT 60
15711: PUSH
15712: EMPTY
15713: LIST
15714: PUSH
15715: EMPTY
15716: LIST
15717: LIST
15718: PUSH
15719: LD_INT 3
15721: PUSH
15722: LD_INT 55
15724: PUSH
15725: EMPTY
15726: LIST
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: PPUSH
15736: CALL_OW 72
15740: PUSH
15741: LD_INT 1
15743: ARRAY
15744: ST_TO_ADDR
// if IsInUnit ( driver ) then
15745: LD_VAR 0 18
15749: PPUSH
15750: CALL_OW 310
15754: IFFALSE 15765
// ComExit ( driver ) ;
15756: LD_VAR 0 18
15760: PPUSH
15761: CALL 40554 0 1
// AddComEnterUnit ( driver , tmp ) ;
15765: LD_VAR 0 18
15769: PPUSH
15770: LD_VAR 0 13
15774: PPUSH
15775: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15779: LD_VAR 0 18
15783: PPUSH
15784: LD_VAR 0 7
15788: PPUSH
15789: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15793: LD_VAR 0 18
15797: PPUSH
15798: CALL_OW 181
// end ; continue ;
15802: GO 15454
// end ; if not cleaners or not tmp in cleaners then
15804: LD_VAR 0 6
15808: NOT
15809: PUSH
15810: LD_VAR 0 13
15814: PUSH
15815: LD_VAR 0 6
15819: IN
15820: NOT
15821: OR
15822: IFFALSE 16129
// begin if dep then
15824: LD_VAR 0 17
15828: IFFALSE 15964
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15830: LD_ADDR_VAR 0 16
15834: PUSH
15835: LD_VAR 0 17
15839: PUSH
15840: LD_INT 1
15842: ARRAY
15843: PPUSH
15844: CALL_OW 250
15848: PPUSH
15849: LD_VAR 0 17
15853: PUSH
15854: LD_INT 1
15856: ARRAY
15857: PPUSH
15858: CALL_OW 254
15862: PPUSH
15863: LD_INT 5
15865: PPUSH
15866: CALL_OW 272
15870: PUSH
15871: LD_VAR 0 17
15875: PUSH
15876: LD_INT 1
15878: ARRAY
15879: PPUSH
15880: CALL_OW 251
15884: PPUSH
15885: LD_VAR 0 17
15889: PUSH
15890: LD_INT 1
15892: ARRAY
15893: PPUSH
15894: CALL_OW 254
15898: PPUSH
15899: LD_INT 5
15901: PPUSH
15902: CALL_OW 273
15906: PUSH
15907: EMPTY
15908: LIST
15909: LIST
15910: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15911: LD_VAR 0 16
15915: PUSH
15916: LD_INT 1
15918: ARRAY
15919: PPUSH
15920: LD_VAR 0 16
15924: PUSH
15925: LD_INT 2
15927: ARRAY
15928: PPUSH
15929: CALL_OW 488
15933: IFFALSE 15964
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15935: LD_VAR 0 13
15939: PPUSH
15940: LD_VAR 0 16
15944: PUSH
15945: LD_INT 1
15947: ARRAY
15948: PPUSH
15949: LD_VAR 0 16
15953: PUSH
15954: LD_INT 2
15956: ARRAY
15957: PPUSH
15958: CALL_OW 111
// continue ;
15962: GO 15454
// end ; end ; r := GetDir ( tmp ) ;
15964: LD_ADDR_VAR 0 15
15968: PUSH
15969: LD_VAR 0 13
15973: PPUSH
15974: CALL_OW 254
15978: ST_TO_ADDR
// if r = 5 then
15979: LD_VAR 0 15
15983: PUSH
15984: LD_INT 5
15986: EQUAL
15987: IFFALSE 15997
// r := 0 ;
15989: LD_ADDR_VAR 0 15
15993: PUSH
15994: LD_INT 0
15996: ST_TO_ADDR
// for j = r to 5 do
15997: LD_ADDR_VAR 0 10
16001: PUSH
16002: DOUBLE
16003: LD_VAR 0 15
16007: DEC
16008: ST_TO_ADDR
16009: LD_INT 5
16011: PUSH
16012: FOR_TO
16013: IFFALSE 16127
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16015: LD_ADDR_VAR 0 11
16019: PUSH
16020: LD_VAR 0 13
16024: PPUSH
16025: CALL_OW 250
16029: PPUSH
16030: LD_VAR 0 10
16034: PPUSH
16035: LD_INT 2
16037: PPUSH
16038: CALL_OW 272
16042: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16043: LD_ADDR_VAR 0 12
16047: PUSH
16048: LD_VAR 0 13
16052: PPUSH
16053: CALL_OW 251
16057: PPUSH
16058: LD_VAR 0 10
16062: PPUSH
16063: LD_INT 2
16065: PPUSH
16066: CALL_OW 273
16070: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16071: LD_VAR 0 11
16075: PPUSH
16076: LD_VAR 0 12
16080: PPUSH
16081: CALL_OW 488
16085: PUSH
16086: LD_VAR 0 11
16090: PPUSH
16091: LD_VAR 0 12
16095: PPUSH
16096: CALL_OW 428
16100: NOT
16101: AND
16102: IFFALSE 16125
// begin ComMoveXY ( tmp , _x , _y ) ;
16104: LD_VAR 0 13
16108: PPUSH
16109: LD_VAR 0 11
16113: PPUSH
16114: LD_VAR 0 12
16118: PPUSH
16119: CALL_OW 111
// break ;
16123: GO 16127
// end ; end ;
16125: GO 16012
16127: POP
16128: POP
// end ; end ;
16129: GO 15454
16131: POP
16132: POP
// end ;
16133: LD_VAR 0 8
16137: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16138: LD_INT 0
16140: PPUSH
// result := true ;
16141: LD_ADDR_VAR 0 3
16145: PUSH
16146: LD_INT 1
16148: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16149: LD_VAR 0 2
16153: PUSH
16154: LD_INT 24
16156: DOUBLE
16157: EQUAL
16158: IFTRUE 16168
16160: LD_INT 33
16162: DOUBLE
16163: EQUAL
16164: IFTRUE 16168
16166: GO 16193
16168: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16169: LD_ADDR_VAR 0 3
16173: PUSH
16174: LD_INT 32
16176: PPUSH
16177: LD_VAR 0 1
16181: PPUSH
16182: CALL_OW 321
16186: PUSH
16187: LD_INT 2
16189: EQUAL
16190: ST_TO_ADDR
16191: GO 16513
16193: LD_INT 20
16195: DOUBLE
16196: EQUAL
16197: IFTRUE 16201
16199: GO 16226
16201: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16202: LD_ADDR_VAR 0 3
16206: PUSH
16207: LD_INT 6
16209: PPUSH
16210: LD_VAR 0 1
16214: PPUSH
16215: CALL_OW 321
16219: PUSH
16220: LD_INT 2
16222: EQUAL
16223: ST_TO_ADDR
16224: GO 16513
16226: LD_INT 22
16228: DOUBLE
16229: EQUAL
16230: IFTRUE 16240
16232: LD_INT 36
16234: DOUBLE
16235: EQUAL
16236: IFTRUE 16240
16238: GO 16265
16240: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16241: LD_ADDR_VAR 0 3
16245: PUSH
16246: LD_INT 15
16248: PPUSH
16249: LD_VAR 0 1
16253: PPUSH
16254: CALL_OW 321
16258: PUSH
16259: LD_INT 2
16261: EQUAL
16262: ST_TO_ADDR
16263: GO 16513
16265: LD_INT 30
16267: DOUBLE
16268: EQUAL
16269: IFTRUE 16273
16271: GO 16298
16273: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16274: LD_ADDR_VAR 0 3
16278: PUSH
16279: LD_INT 20
16281: PPUSH
16282: LD_VAR 0 1
16286: PPUSH
16287: CALL_OW 321
16291: PUSH
16292: LD_INT 2
16294: EQUAL
16295: ST_TO_ADDR
16296: GO 16513
16298: LD_INT 28
16300: DOUBLE
16301: EQUAL
16302: IFTRUE 16312
16304: LD_INT 21
16306: DOUBLE
16307: EQUAL
16308: IFTRUE 16312
16310: GO 16337
16312: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16313: LD_ADDR_VAR 0 3
16317: PUSH
16318: LD_INT 21
16320: PPUSH
16321: LD_VAR 0 1
16325: PPUSH
16326: CALL_OW 321
16330: PUSH
16331: LD_INT 2
16333: EQUAL
16334: ST_TO_ADDR
16335: GO 16513
16337: LD_INT 16
16339: DOUBLE
16340: EQUAL
16341: IFTRUE 16345
16343: GO 16372
16345: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16346: LD_ADDR_VAR 0 3
16350: PUSH
16351: LD_EXP 32
16355: PPUSH
16356: LD_VAR 0 1
16360: PPUSH
16361: CALL_OW 321
16365: PUSH
16366: LD_INT 2
16368: EQUAL
16369: ST_TO_ADDR
16370: GO 16513
16372: LD_INT 19
16374: DOUBLE
16375: EQUAL
16376: IFTRUE 16386
16378: LD_INT 23
16380: DOUBLE
16381: EQUAL
16382: IFTRUE 16386
16384: GO 16413
16386: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16387: LD_ADDR_VAR 0 3
16391: PUSH
16392: LD_EXP 31
16396: PPUSH
16397: LD_VAR 0 1
16401: PPUSH
16402: CALL_OW 321
16406: PUSH
16407: LD_INT 2
16409: EQUAL
16410: ST_TO_ADDR
16411: GO 16513
16413: LD_INT 17
16415: DOUBLE
16416: EQUAL
16417: IFTRUE 16421
16419: GO 16446
16421: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16422: LD_ADDR_VAR 0 3
16426: PUSH
16427: LD_INT 39
16429: PPUSH
16430: LD_VAR 0 1
16434: PPUSH
16435: CALL_OW 321
16439: PUSH
16440: LD_INT 2
16442: EQUAL
16443: ST_TO_ADDR
16444: GO 16513
16446: LD_INT 18
16448: DOUBLE
16449: EQUAL
16450: IFTRUE 16454
16452: GO 16479
16454: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16455: LD_ADDR_VAR 0 3
16459: PUSH
16460: LD_INT 40
16462: PPUSH
16463: LD_VAR 0 1
16467: PPUSH
16468: CALL_OW 321
16472: PUSH
16473: LD_INT 2
16475: EQUAL
16476: ST_TO_ADDR
16477: GO 16513
16479: LD_INT 27
16481: DOUBLE
16482: EQUAL
16483: IFTRUE 16487
16485: GO 16512
16487: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16488: LD_ADDR_VAR 0 3
16492: PUSH
16493: LD_INT 35
16495: PPUSH
16496: LD_VAR 0 1
16500: PPUSH
16501: CALL_OW 321
16505: PUSH
16506: LD_INT 2
16508: EQUAL
16509: ST_TO_ADDR
16510: GO 16513
16512: POP
// end ;
16513: LD_VAR 0 3
16517: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16518: LD_INT 0
16520: PPUSH
16521: PPUSH
16522: PPUSH
16523: PPUSH
16524: PPUSH
16525: PPUSH
16526: PPUSH
16527: PPUSH
16528: PPUSH
16529: PPUSH
16530: PPUSH
// result := false ;
16531: LD_ADDR_VAR 0 6
16535: PUSH
16536: LD_INT 0
16538: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16539: LD_VAR 0 1
16543: NOT
16544: PUSH
16545: LD_VAR 0 1
16549: PPUSH
16550: CALL_OW 266
16554: PUSH
16555: LD_INT 0
16557: PUSH
16558: LD_INT 1
16560: PUSH
16561: EMPTY
16562: LIST
16563: LIST
16564: IN
16565: NOT
16566: OR
16567: PUSH
16568: LD_VAR 0 2
16572: NOT
16573: OR
16574: PUSH
16575: LD_VAR 0 5
16579: PUSH
16580: LD_INT 0
16582: PUSH
16583: LD_INT 1
16585: PUSH
16586: LD_INT 2
16588: PUSH
16589: LD_INT 3
16591: PUSH
16592: LD_INT 4
16594: PUSH
16595: LD_INT 5
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: IN
16606: NOT
16607: OR
16608: PUSH
16609: LD_VAR 0 3
16613: PPUSH
16614: LD_VAR 0 4
16618: PPUSH
16619: CALL_OW 488
16623: NOT
16624: OR
16625: IFFALSE 16629
// exit ;
16627: GO 17365
// side := GetSide ( depot ) ;
16629: LD_ADDR_VAR 0 9
16633: PUSH
16634: LD_VAR 0 1
16638: PPUSH
16639: CALL_OW 255
16643: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16644: LD_VAR 0 9
16648: PPUSH
16649: LD_VAR 0 2
16653: PPUSH
16654: CALL 16138 0 2
16658: NOT
16659: IFFALSE 16663
// exit ;
16661: GO 17365
// pom := GetBase ( depot ) ;
16663: LD_ADDR_VAR 0 10
16667: PUSH
16668: LD_VAR 0 1
16672: PPUSH
16673: CALL_OW 274
16677: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16678: LD_ADDR_VAR 0 11
16682: PUSH
16683: LD_VAR 0 2
16687: PPUSH
16688: LD_VAR 0 1
16692: PPUSH
16693: CALL_OW 248
16697: PPUSH
16698: CALL_OW 450
16702: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16703: LD_VAR 0 10
16707: PPUSH
16708: LD_INT 1
16710: PPUSH
16711: CALL_OW 275
16715: PUSH
16716: LD_VAR 0 11
16720: PUSH
16721: LD_INT 1
16723: ARRAY
16724: GREATEREQUAL
16725: PUSH
16726: LD_VAR 0 10
16730: PPUSH
16731: LD_INT 2
16733: PPUSH
16734: CALL_OW 275
16738: PUSH
16739: LD_VAR 0 11
16743: PUSH
16744: LD_INT 2
16746: ARRAY
16747: GREATEREQUAL
16748: AND
16749: PUSH
16750: LD_VAR 0 10
16754: PPUSH
16755: LD_INT 3
16757: PPUSH
16758: CALL_OW 275
16762: PUSH
16763: LD_VAR 0 11
16767: PUSH
16768: LD_INT 3
16770: ARRAY
16771: GREATEREQUAL
16772: AND
16773: NOT
16774: IFFALSE 16778
// exit ;
16776: GO 17365
// if GetBType ( depot ) = b_depot then
16778: LD_VAR 0 1
16782: PPUSH
16783: CALL_OW 266
16787: PUSH
16788: LD_INT 0
16790: EQUAL
16791: IFFALSE 16803
// dist := 28 else
16793: LD_ADDR_VAR 0 14
16797: PUSH
16798: LD_INT 28
16800: ST_TO_ADDR
16801: GO 16811
// dist := 36 ;
16803: LD_ADDR_VAR 0 14
16807: PUSH
16808: LD_INT 36
16810: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16811: LD_VAR 0 1
16815: PPUSH
16816: LD_VAR 0 3
16820: PPUSH
16821: LD_VAR 0 4
16825: PPUSH
16826: CALL_OW 297
16830: PUSH
16831: LD_VAR 0 14
16835: GREATER
16836: IFFALSE 16840
// exit ;
16838: GO 17365
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16840: LD_ADDR_VAR 0 12
16844: PUSH
16845: LD_VAR 0 2
16849: PPUSH
16850: LD_VAR 0 3
16854: PPUSH
16855: LD_VAR 0 4
16859: PPUSH
16860: LD_VAR 0 5
16864: PPUSH
16865: LD_VAR 0 1
16869: PPUSH
16870: CALL_OW 248
16874: PPUSH
16875: LD_INT 0
16877: PPUSH
16878: CALL 17370 0 6
16882: ST_TO_ADDR
// if not hexes then
16883: LD_VAR 0 12
16887: NOT
16888: IFFALSE 16892
// exit ;
16890: GO 17365
// hex := GetHexInfo ( x , y ) ;
16892: LD_ADDR_VAR 0 15
16896: PUSH
16897: LD_VAR 0 3
16901: PPUSH
16902: LD_VAR 0 4
16906: PPUSH
16907: CALL_OW 546
16911: ST_TO_ADDR
// if hex [ 1 ] then
16912: LD_VAR 0 15
16916: PUSH
16917: LD_INT 1
16919: ARRAY
16920: IFFALSE 16924
// exit ;
16922: GO 17365
// height := hex [ 2 ] ;
16924: LD_ADDR_VAR 0 13
16928: PUSH
16929: LD_VAR 0 15
16933: PUSH
16934: LD_INT 2
16936: ARRAY
16937: ST_TO_ADDR
// for i = 1 to hexes do
16938: LD_ADDR_VAR 0 7
16942: PUSH
16943: DOUBLE
16944: LD_INT 1
16946: DEC
16947: ST_TO_ADDR
16948: LD_VAR 0 12
16952: PUSH
16953: FOR_TO
16954: IFFALSE 17284
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16956: LD_VAR 0 12
16960: PUSH
16961: LD_VAR 0 7
16965: ARRAY
16966: PUSH
16967: LD_INT 1
16969: ARRAY
16970: PPUSH
16971: LD_VAR 0 12
16975: PUSH
16976: LD_VAR 0 7
16980: ARRAY
16981: PUSH
16982: LD_INT 2
16984: ARRAY
16985: PPUSH
16986: CALL_OW 488
16990: NOT
16991: PUSH
16992: LD_VAR 0 12
16996: PUSH
16997: LD_VAR 0 7
17001: ARRAY
17002: PUSH
17003: LD_INT 1
17005: ARRAY
17006: PPUSH
17007: LD_VAR 0 12
17011: PUSH
17012: LD_VAR 0 7
17016: ARRAY
17017: PUSH
17018: LD_INT 2
17020: ARRAY
17021: PPUSH
17022: CALL_OW 428
17026: PUSH
17027: LD_INT 0
17029: GREATER
17030: OR
17031: PUSH
17032: LD_VAR 0 12
17036: PUSH
17037: LD_VAR 0 7
17041: ARRAY
17042: PUSH
17043: LD_INT 1
17045: ARRAY
17046: PPUSH
17047: LD_VAR 0 12
17051: PUSH
17052: LD_VAR 0 7
17056: ARRAY
17057: PUSH
17058: LD_INT 2
17060: ARRAY
17061: PPUSH
17062: CALL_OW 351
17066: OR
17067: IFFALSE 17073
// exit ;
17069: POP
17070: POP
17071: GO 17365
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17073: LD_ADDR_VAR 0 8
17077: PUSH
17078: LD_VAR 0 12
17082: PUSH
17083: LD_VAR 0 7
17087: ARRAY
17088: PUSH
17089: LD_INT 1
17091: ARRAY
17092: PPUSH
17093: LD_VAR 0 12
17097: PUSH
17098: LD_VAR 0 7
17102: ARRAY
17103: PUSH
17104: LD_INT 2
17106: ARRAY
17107: PPUSH
17108: CALL_OW 546
17112: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17113: LD_VAR 0 8
17117: PUSH
17118: LD_INT 1
17120: ARRAY
17121: PUSH
17122: LD_VAR 0 8
17126: PUSH
17127: LD_INT 2
17129: ARRAY
17130: PUSH
17131: LD_VAR 0 13
17135: PUSH
17136: LD_INT 2
17138: PLUS
17139: GREATER
17140: OR
17141: PUSH
17142: LD_VAR 0 8
17146: PUSH
17147: LD_INT 2
17149: ARRAY
17150: PUSH
17151: LD_VAR 0 13
17155: PUSH
17156: LD_INT 2
17158: MINUS
17159: LESS
17160: OR
17161: PUSH
17162: LD_VAR 0 8
17166: PUSH
17167: LD_INT 3
17169: ARRAY
17170: PUSH
17171: LD_INT 0
17173: PUSH
17174: LD_INT 8
17176: PUSH
17177: LD_INT 9
17179: PUSH
17180: LD_INT 10
17182: PUSH
17183: LD_INT 11
17185: PUSH
17186: LD_INT 12
17188: PUSH
17189: LD_INT 13
17191: PUSH
17192: LD_INT 16
17194: PUSH
17195: LD_INT 17
17197: PUSH
17198: LD_INT 18
17200: PUSH
17201: LD_INT 19
17203: PUSH
17204: LD_INT 20
17206: PUSH
17207: LD_INT 21
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: IN
17225: NOT
17226: OR
17227: PUSH
17228: LD_VAR 0 8
17232: PUSH
17233: LD_INT 5
17235: ARRAY
17236: NOT
17237: OR
17238: PUSH
17239: LD_VAR 0 8
17243: PUSH
17244: LD_INT 6
17246: ARRAY
17247: PUSH
17248: LD_INT 1
17250: PUSH
17251: LD_INT 2
17253: PUSH
17254: LD_INT 7
17256: PUSH
17257: LD_INT 9
17259: PUSH
17260: LD_INT 10
17262: PUSH
17263: LD_INT 11
17265: PUSH
17266: EMPTY
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: IN
17274: NOT
17275: OR
17276: IFFALSE 17282
// exit ;
17278: POP
17279: POP
17280: GO 17365
// end ;
17282: GO 16953
17284: POP
17285: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17286: LD_VAR 0 9
17290: PPUSH
17291: LD_VAR 0 3
17295: PPUSH
17296: LD_VAR 0 4
17300: PPUSH
17301: LD_INT 20
17303: PPUSH
17304: CALL 9311 0 4
17308: PUSH
17309: LD_INT 4
17311: ARRAY
17312: IFFALSE 17316
// exit ;
17314: GO 17365
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17316: LD_VAR 0 2
17320: PUSH
17321: LD_INT 29
17323: PUSH
17324: LD_INT 30
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: IN
17331: PUSH
17332: LD_VAR 0 3
17336: PPUSH
17337: LD_VAR 0 4
17341: PPUSH
17342: LD_VAR 0 9
17346: PPUSH
17347: CALL_OW 440
17351: NOT
17352: AND
17353: IFFALSE 17357
// exit ;
17355: GO 17365
// result := true ;
17357: LD_ADDR_VAR 0 6
17361: PUSH
17362: LD_INT 1
17364: ST_TO_ADDR
// end ;
17365: LD_VAR 0 6
17369: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17370: LD_INT 0
17372: PPUSH
17373: PPUSH
17374: PPUSH
17375: PPUSH
17376: PPUSH
17377: PPUSH
17378: PPUSH
17379: PPUSH
17380: PPUSH
17381: PPUSH
17382: PPUSH
17383: PPUSH
17384: PPUSH
17385: PPUSH
17386: PPUSH
17387: PPUSH
17388: PPUSH
17389: PPUSH
17390: PPUSH
17391: PPUSH
17392: PPUSH
17393: PPUSH
17394: PPUSH
17395: PPUSH
17396: PPUSH
17397: PPUSH
17398: PPUSH
17399: PPUSH
17400: PPUSH
17401: PPUSH
17402: PPUSH
17403: PPUSH
17404: PPUSH
17405: PPUSH
17406: PPUSH
17407: PPUSH
17408: PPUSH
17409: PPUSH
17410: PPUSH
17411: PPUSH
17412: PPUSH
17413: PPUSH
17414: PPUSH
17415: PPUSH
17416: PPUSH
17417: PPUSH
17418: PPUSH
17419: PPUSH
17420: PPUSH
17421: PPUSH
17422: PPUSH
17423: PPUSH
17424: PPUSH
17425: PPUSH
17426: PPUSH
17427: PPUSH
17428: PPUSH
17429: PPUSH
// result = [ ] ;
17430: LD_ADDR_VAR 0 7
17434: PUSH
17435: EMPTY
17436: ST_TO_ADDR
// temp_list = [ ] ;
17437: LD_ADDR_VAR 0 9
17441: PUSH
17442: EMPTY
17443: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17444: LD_VAR 0 4
17448: PUSH
17449: LD_INT 0
17451: PUSH
17452: LD_INT 1
17454: PUSH
17455: LD_INT 2
17457: PUSH
17458: LD_INT 3
17460: PUSH
17461: LD_INT 4
17463: PUSH
17464: LD_INT 5
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: IN
17475: NOT
17476: PUSH
17477: LD_VAR 0 1
17481: PUSH
17482: LD_INT 0
17484: PUSH
17485: LD_INT 1
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: IN
17492: PUSH
17493: LD_VAR 0 5
17497: PUSH
17498: LD_INT 1
17500: PUSH
17501: LD_INT 2
17503: PUSH
17504: LD_INT 3
17506: PUSH
17507: EMPTY
17508: LIST
17509: LIST
17510: LIST
17511: IN
17512: NOT
17513: AND
17514: OR
17515: IFFALSE 17519
// exit ;
17517: GO 35910
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17519: LD_VAR 0 1
17523: PUSH
17524: LD_INT 6
17526: PUSH
17527: LD_INT 7
17529: PUSH
17530: LD_INT 8
17532: PUSH
17533: LD_INT 13
17535: PUSH
17536: LD_INT 12
17538: PUSH
17539: LD_INT 15
17541: PUSH
17542: LD_INT 11
17544: PUSH
17545: LD_INT 14
17547: PUSH
17548: LD_INT 10
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: IN
17562: IFFALSE 17572
// btype = b_lab ;
17564: LD_ADDR_VAR 0 1
17568: PUSH
17569: LD_INT 6
17571: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17572: LD_VAR 0 6
17576: PUSH
17577: LD_INT 0
17579: PUSH
17580: LD_INT 1
17582: PUSH
17583: LD_INT 2
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: LIST
17590: IN
17591: NOT
17592: PUSH
17593: LD_VAR 0 1
17597: PUSH
17598: LD_INT 0
17600: PUSH
17601: LD_INT 1
17603: PUSH
17604: LD_INT 2
17606: PUSH
17607: LD_INT 3
17609: PUSH
17610: LD_INT 6
17612: PUSH
17613: LD_INT 36
17615: PUSH
17616: LD_INT 4
17618: PUSH
17619: LD_INT 5
17621: PUSH
17622: LD_INT 31
17624: PUSH
17625: LD_INT 32
17627: PUSH
17628: LD_INT 33
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: LIST
17642: LIST
17643: IN
17644: NOT
17645: PUSH
17646: LD_VAR 0 6
17650: PUSH
17651: LD_INT 1
17653: EQUAL
17654: AND
17655: OR
17656: PUSH
17657: LD_VAR 0 1
17661: PUSH
17662: LD_INT 2
17664: PUSH
17665: LD_INT 3
17667: PUSH
17668: EMPTY
17669: LIST
17670: LIST
17671: IN
17672: NOT
17673: PUSH
17674: LD_VAR 0 6
17678: PUSH
17679: LD_INT 2
17681: EQUAL
17682: AND
17683: OR
17684: IFFALSE 17694
// mode = 0 ;
17686: LD_ADDR_VAR 0 6
17690: PUSH
17691: LD_INT 0
17693: ST_TO_ADDR
// case mode of 0 :
17694: LD_VAR 0 6
17698: PUSH
17699: LD_INT 0
17701: DOUBLE
17702: EQUAL
17703: IFTRUE 17707
17705: GO 29160
17707: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17708: LD_ADDR_VAR 0 11
17712: PUSH
17713: LD_INT 0
17715: PUSH
17716: LD_INT 0
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: PUSH
17723: LD_INT 0
17725: PUSH
17726: LD_INT 1
17728: NEG
17729: PUSH
17730: EMPTY
17731: LIST
17732: LIST
17733: PUSH
17734: LD_INT 1
17736: PUSH
17737: LD_INT 0
17739: PUSH
17740: EMPTY
17741: LIST
17742: LIST
17743: PUSH
17744: LD_INT 1
17746: PUSH
17747: LD_INT 1
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: PUSH
17754: LD_INT 0
17756: PUSH
17757: LD_INT 1
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: PUSH
17764: LD_INT 1
17766: NEG
17767: PUSH
17768: LD_INT 0
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: PUSH
17775: LD_INT 1
17777: NEG
17778: PUSH
17779: LD_INT 1
17781: NEG
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: PUSH
17787: LD_INT 1
17789: NEG
17790: PUSH
17791: LD_INT 2
17793: NEG
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: PUSH
17799: LD_INT 0
17801: PUSH
17802: LD_INT 2
17804: NEG
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: PUSH
17810: LD_INT 1
17812: PUSH
17813: LD_INT 1
17815: NEG
17816: PUSH
17817: EMPTY
17818: LIST
17819: LIST
17820: PUSH
17821: LD_INT 1
17823: PUSH
17824: LD_INT 2
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: PUSH
17831: LD_INT 0
17833: PUSH
17834: LD_INT 2
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: PUSH
17841: LD_INT 1
17843: NEG
17844: PUSH
17845: LD_INT 1
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: PUSH
17852: LD_INT 1
17854: PUSH
17855: LD_INT 3
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: PUSH
17862: LD_INT 0
17864: PUSH
17865: LD_INT 3
17867: PUSH
17868: EMPTY
17869: LIST
17870: LIST
17871: PUSH
17872: LD_INT 1
17874: NEG
17875: PUSH
17876: LD_INT 2
17878: PUSH
17879: EMPTY
17880: LIST
17881: LIST
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: LIST
17892: LIST
17893: LIST
17894: LIST
17895: LIST
17896: LIST
17897: LIST
17898: LIST
17899: LIST
17900: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17901: LD_ADDR_VAR 0 12
17905: PUSH
17906: LD_INT 0
17908: PUSH
17909: LD_INT 0
17911: PUSH
17912: EMPTY
17913: LIST
17914: LIST
17915: PUSH
17916: LD_INT 0
17918: PUSH
17919: LD_INT 1
17921: NEG
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: PUSH
17927: LD_INT 1
17929: PUSH
17930: LD_INT 0
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PUSH
17937: LD_INT 1
17939: PUSH
17940: LD_INT 1
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: PUSH
17947: LD_INT 0
17949: PUSH
17950: LD_INT 1
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PUSH
17957: LD_INT 1
17959: NEG
17960: PUSH
17961: LD_INT 0
17963: PUSH
17964: EMPTY
17965: LIST
17966: LIST
17967: PUSH
17968: LD_INT 1
17970: NEG
17971: PUSH
17972: LD_INT 1
17974: NEG
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: PUSH
17980: LD_INT 1
17982: PUSH
17983: LD_INT 1
17985: NEG
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: PUSH
17991: LD_INT 2
17993: PUSH
17994: LD_INT 0
17996: PUSH
17997: EMPTY
17998: LIST
17999: LIST
18000: PUSH
18001: LD_INT 2
18003: PUSH
18004: LD_INT 1
18006: PUSH
18007: EMPTY
18008: LIST
18009: LIST
18010: PUSH
18011: LD_INT 1
18013: NEG
18014: PUSH
18015: LD_INT 1
18017: PUSH
18018: EMPTY
18019: LIST
18020: LIST
18021: PUSH
18022: LD_INT 2
18024: NEG
18025: PUSH
18026: LD_INT 0
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: PUSH
18033: LD_INT 2
18035: NEG
18036: PUSH
18037: LD_INT 1
18039: NEG
18040: PUSH
18041: EMPTY
18042: LIST
18043: LIST
18044: PUSH
18045: LD_INT 2
18047: NEG
18048: PUSH
18049: LD_INT 1
18051: PUSH
18052: EMPTY
18053: LIST
18054: LIST
18055: PUSH
18056: LD_INT 3
18058: NEG
18059: PUSH
18060: LD_INT 0
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: PUSH
18067: LD_INT 3
18069: NEG
18070: PUSH
18071: LD_INT 1
18073: NEG
18074: PUSH
18075: EMPTY
18076: LIST
18077: LIST
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: LIST
18083: LIST
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18097: LD_ADDR_VAR 0 13
18101: PUSH
18102: LD_INT 0
18104: PUSH
18105: LD_INT 0
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: PUSH
18112: LD_INT 0
18114: PUSH
18115: LD_INT 1
18117: NEG
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: PUSH
18123: LD_INT 1
18125: PUSH
18126: LD_INT 0
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: PUSH
18133: LD_INT 1
18135: PUSH
18136: LD_INT 1
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PUSH
18143: LD_INT 0
18145: PUSH
18146: LD_INT 1
18148: PUSH
18149: EMPTY
18150: LIST
18151: LIST
18152: PUSH
18153: LD_INT 1
18155: NEG
18156: PUSH
18157: LD_INT 0
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: PUSH
18164: LD_INT 1
18166: NEG
18167: PUSH
18168: LD_INT 1
18170: NEG
18171: PUSH
18172: EMPTY
18173: LIST
18174: LIST
18175: PUSH
18176: LD_INT 1
18178: NEG
18179: PUSH
18180: LD_INT 2
18182: NEG
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PUSH
18188: LD_INT 2
18190: PUSH
18191: LD_INT 1
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PUSH
18198: LD_INT 2
18200: PUSH
18201: LD_INT 2
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PUSH
18208: LD_INT 1
18210: PUSH
18211: LD_INT 2
18213: PUSH
18214: EMPTY
18215: LIST
18216: LIST
18217: PUSH
18218: LD_INT 2
18220: NEG
18221: PUSH
18222: LD_INT 1
18224: NEG
18225: PUSH
18226: EMPTY
18227: LIST
18228: LIST
18229: PUSH
18230: LD_INT 2
18232: NEG
18233: PUSH
18234: LD_INT 2
18236: NEG
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: PUSH
18242: LD_INT 2
18244: NEG
18245: PUSH
18246: LD_INT 3
18248: NEG
18249: PUSH
18250: EMPTY
18251: LIST
18252: LIST
18253: PUSH
18254: LD_INT 3
18256: NEG
18257: PUSH
18258: LD_INT 2
18260: NEG
18261: PUSH
18262: EMPTY
18263: LIST
18264: LIST
18265: PUSH
18266: LD_INT 3
18268: NEG
18269: PUSH
18270: LD_INT 3
18272: NEG
18273: PUSH
18274: EMPTY
18275: LIST
18276: LIST
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18296: LD_ADDR_VAR 0 14
18300: PUSH
18301: LD_INT 0
18303: PUSH
18304: LD_INT 0
18306: PUSH
18307: EMPTY
18308: LIST
18309: LIST
18310: PUSH
18311: LD_INT 0
18313: PUSH
18314: LD_INT 1
18316: NEG
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: PUSH
18322: LD_INT 1
18324: PUSH
18325: LD_INT 0
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PUSH
18332: LD_INT 1
18334: PUSH
18335: LD_INT 1
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: PUSH
18342: LD_INT 0
18344: PUSH
18345: LD_INT 1
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: PUSH
18352: LD_INT 1
18354: NEG
18355: PUSH
18356: LD_INT 0
18358: PUSH
18359: EMPTY
18360: LIST
18361: LIST
18362: PUSH
18363: LD_INT 1
18365: NEG
18366: PUSH
18367: LD_INT 1
18369: NEG
18370: PUSH
18371: EMPTY
18372: LIST
18373: LIST
18374: PUSH
18375: LD_INT 1
18377: NEG
18378: PUSH
18379: LD_INT 2
18381: NEG
18382: PUSH
18383: EMPTY
18384: LIST
18385: LIST
18386: PUSH
18387: LD_INT 0
18389: PUSH
18390: LD_INT 2
18392: NEG
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: PUSH
18398: LD_INT 1
18400: PUSH
18401: LD_INT 1
18403: NEG
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: PUSH
18409: LD_INT 1
18411: PUSH
18412: LD_INT 2
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: PUSH
18419: LD_INT 0
18421: PUSH
18422: LD_INT 2
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: PUSH
18429: LD_INT 1
18431: NEG
18432: PUSH
18433: LD_INT 1
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PUSH
18440: LD_INT 1
18442: NEG
18443: PUSH
18444: LD_INT 3
18446: NEG
18447: PUSH
18448: EMPTY
18449: LIST
18450: LIST
18451: PUSH
18452: LD_INT 0
18454: PUSH
18455: LD_INT 3
18457: NEG
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: PUSH
18463: LD_INT 1
18465: PUSH
18466: LD_INT 2
18468: NEG
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18492: LD_ADDR_VAR 0 15
18496: PUSH
18497: LD_INT 0
18499: PUSH
18500: LD_INT 0
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: PUSH
18507: LD_INT 0
18509: PUSH
18510: LD_INT 1
18512: NEG
18513: PUSH
18514: EMPTY
18515: LIST
18516: LIST
18517: PUSH
18518: LD_INT 1
18520: PUSH
18521: LD_INT 0
18523: PUSH
18524: EMPTY
18525: LIST
18526: LIST
18527: PUSH
18528: LD_INT 1
18530: PUSH
18531: LD_INT 1
18533: PUSH
18534: EMPTY
18535: LIST
18536: LIST
18537: PUSH
18538: LD_INT 0
18540: PUSH
18541: LD_INT 1
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: PUSH
18548: LD_INT 1
18550: NEG
18551: PUSH
18552: LD_INT 0
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: PUSH
18559: LD_INT 1
18561: NEG
18562: PUSH
18563: LD_INT 1
18565: NEG
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: PUSH
18571: LD_INT 1
18573: PUSH
18574: LD_INT 1
18576: NEG
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: PUSH
18582: LD_INT 2
18584: PUSH
18585: LD_INT 0
18587: PUSH
18588: EMPTY
18589: LIST
18590: LIST
18591: PUSH
18592: LD_INT 2
18594: PUSH
18595: LD_INT 1
18597: PUSH
18598: EMPTY
18599: LIST
18600: LIST
18601: PUSH
18602: LD_INT 1
18604: NEG
18605: PUSH
18606: LD_INT 1
18608: PUSH
18609: EMPTY
18610: LIST
18611: LIST
18612: PUSH
18613: LD_INT 2
18615: NEG
18616: PUSH
18617: LD_INT 0
18619: PUSH
18620: EMPTY
18621: LIST
18622: LIST
18623: PUSH
18624: LD_INT 2
18626: NEG
18627: PUSH
18628: LD_INT 1
18630: NEG
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: PUSH
18636: LD_INT 2
18638: PUSH
18639: LD_INT 1
18641: NEG
18642: PUSH
18643: EMPTY
18644: LIST
18645: LIST
18646: PUSH
18647: LD_INT 3
18649: PUSH
18650: LD_INT 0
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PUSH
18657: LD_INT 3
18659: PUSH
18660: LD_INT 1
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: LIST
18671: LIST
18672: LIST
18673: LIST
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18685: LD_ADDR_VAR 0 16
18689: PUSH
18690: LD_INT 0
18692: PUSH
18693: LD_INT 0
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PUSH
18700: LD_INT 0
18702: PUSH
18703: LD_INT 1
18705: NEG
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: PUSH
18711: LD_INT 1
18713: PUSH
18714: LD_INT 0
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: LD_INT 1
18723: PUSH
18724: LD_INT 1
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: LD_INT 0
18733: PUSH
18734: LD_INT 1
18736: PUSH
18737: EMPTY
18738: LIST
18739: LIST
18740: PUSH
18741: LD_INT 1
18743: NEG
18744: PUSH
18745: LD_INT 0
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: PUSH
18752: LD_INT 1
18754: NEG
18755: PUSH
18756: LD_INT 1
18758: NEG
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: PUSH
18764: LD_INT 1
18766: NEG
18767: PUSH
18768: LD_INT 2
18770: NEG
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PUSH
18776: LD_INT 2
18778: PUSH
18779: LD_INT 1
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: PUSH
18786: LD_INT 2
18788: PUSH
18789: LD_INT 2
18791: PUSH
18792: EMPTY
18793: LIST
18794: LIST
18795: PUSH
18796: LD_INT 1
18798: PUSH
18799: LD_INT 2
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: PUSH
18806: LD_INT 2
18808: NEG
18809: PUSH
18810: LD_INT 1
18812: NEG
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: PUSH
18818: LD_INT 2
18820: NEG
18821: PUSH
18822: LD_INT 2
18824: NEG
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: LD_INT 3
18832: PUSH
18833: LD_INT 2
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: PUSH
18840: LD_INT 3
18842: PUSH
18843: LD_INT 3
18845: PUSH
18846: EMPTY
18847: LIST
18848: LIST
18849: PUSH
18850: LD_INT 2
18852: PUSH
18853: LD_INT 3
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18878: LD_ADDR_VAR 0 17
18882: PUSH
18883: LD_INT 0
18885: PUSH
18886: LD_INT 0
18888: PUSH
18889: EMPTY
18890: LIST
18891: LIST
18892: PUSH
18893: LD_INT 0
18895: PUSH
18896: LD_INT 1
18898: NEG
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: PUSH
18904: LD_INT 1
18906: PUSH
18907: LD_INT 0
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: PUSH
18914: LD_INT 1
18916: PUSH
18917: LD_INT 1
18919: PUSH
18920: EMPTY
18921: LIST
18922: LIST
18923: PUSH
18924: LD_INT 0
18926: PUSH
18927: LD_INT 1
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: PUSH
18934: LD_INT 1
18936: NEG
18937: PUSH
18938: LD_INT 0
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PUSH
18945: LD_INT 1
18947: NEG
18948: PUSH
18949: LD_INT 1
18951: NEG
18952: PUSH
18953: EMPTY
18954: LIST
18955: LIST
18956: PUSH
18957: LD_INT 1
18959: NEG
18960: PUSH
18961: LD_INT 2
18963: NEG
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: PUSH
18969: LD_INT 0
18971: PUSH
18972: LD_INT 2
18974: NEG
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PUSH
18980: LD_INT 1
18982: PUSH
18983: LD_INT 1
18985: NEG
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: PUSH
18991: LD_INT 2
18993: PUSH
18994: LD_INT 0
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: LD_INT 2
19003: PUSH
19004: LD_INT 1
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: PUSH
19011: LD_INT 2
19013: PUSH
19014: LD_INT 2
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: LD_INT 1
19023: PUSH
19024: LD_INT 2
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: PUSH
19031: LD_INT 0
19033: PUSH
19034: LD_INT 2
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: PUSH
19041: LD_INT 1
19043: NEG
19044: PUSH
19045: LD_INT 1
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: PUSH
19052: LD_INT 2
19054: NEG
19055: PUSH
19056: LD_INT 0
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: PUSH
19063: LD_INT 2
19065: NEG
19066: PUSH
19067: LD_INT 1
19069: NEG
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PUSH
19075: LD_INT 2
19077: NEG
19078: PUSH
19079: LD_INT 2
19081: NEG
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19108: LD_ADDR_VAR 0 18
19112: PUSH
19113: LD_INT 0
19115: PUSH
19116: LD_INT 0
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: PUSH
19123: LD_INT 0
19125: PUSH
19126: LD_INT 1
19128: NEG
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: PUSH
19134: LD_INT 1
19136: PUSH
19137: LD_INT 0
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: PUSH
19144: LD_INT 1
19146: PUSH
19147: LD_INT 1
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: PUSH
19154: LD_INT 0
19156: PUSH
19157: LD_INT 1
19159: PUSH
19160: EMPTY
19161: LIST
19162: LIST
19163: PUSH
19164: LD_INT 1
19166: NEG
19167: PUSH
19168: LD_INT 0
19170: PUSH
19171: EMPTY
19172: LIST
19173: LIST
19174: PUSH
19175: LD_INT 1
19177: NEG
19178: PUSH
19179: LD_INT 1
19181: NEG
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: LD_INT 1
19189: NEG
19190: PUSH
19191: LD_INT 2
19193: NEG
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: LD_INT 0
19201: PUSH
19202: LD_INT 2
19204: NEG
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PUSH
19210: LD_INT 1
19212: PUSH
19213: LD_INT 1
19215: NEG
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: PUSH
19221: LD_INT 2
19223: PUSH
19224: LD_INT 0
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: PUSH
19231: LD_INT 2
19233: PUSH
19234: LD_INT 1
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: PUSH
19241: LD_INT 2
19243: PUSH
19244: LD_INT 2
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: LD_INT 1
19253: PUSH
19254: LD_INT 2
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PUSH
19261: LD_INT 0
19263: PUSH
19264: LD_INT 2
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PUSH
19271: LD_INT 1
19273: NEG
19274: PUSH
19275: LD_INT 1
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: PUSH
19282: LD_INT 2
19284: NEG
19285: PUSH
19286: LD_INT 0
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PUSH
19293: LD_INT 2
19295: NEG
19296: PUSH
19297: LD_INT 1
19299: NEG
19300: PUSH
19301: EMPTY
19302: LIST
19303: LIST
19304: PUSH
19305: LD_INT 2
19307: NEG
19308: PUSH
19309: LD_INT 2
19311: NEG
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19338: LD_ADDR_VAR 0 19
19342: PUSH
19343: LD_INT 0
19345: PUSH
19346: LD_INT 0
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PUSH
19353: LD_INT 0
19355: PUSH
19356: LD_INT 1
19358: NEG
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: PUSH
19364: LD_INT 1
19366: PUSH
19367: LD_INT 0
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PUSH
19374: LD_INT 1
19376: PUSH
19377: LD_INT 1
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: PUSH
19384: LD_INT 0
19386: PUSH
19387: LD_INT 1
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: PUSH
19394: LD_INT 1
19396: NEG
19397: PUSH
19398: LD_INT 0
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: PUSH
19405: LD_INT 1
19407: NEG
19408: PUSH
19409: LD_INT 1
19411: NEG
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PUSH
19417: LD_INT 1
19419: NEG
19420: PUSH
19421: LD_INT 2
19423: NEG
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PUSH
19429: LD_INT 0
19431: PUSH
19432: LD_INT 2
19434: NEG
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: PUSH
19440: LD_INT 1
19442: PUSH
19443: LD_INT 1
19445: NEG
19446: PUSH
19447: EMPTY
19448: LIST
19449: LIST
19450: PUSH
19451: LD_INT 2
19453: PUSH
19454: LD_INT 0
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: PUSH
19461: LD_INT 2
19463: PUSH
19464: LD_INT 1
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PUSH
19471: LD_INT 2
19473: PUSH
19474: LD_INT 2
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PUSH
19481: LD_INT 1
19483: PUSH
19484: LD_INT 2
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: PUSH
19491: LD_INT 0
19493: PUSH
19494: LD_INT 2
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: PUSH
19501: LD_INT 1
19503: NEG
19504: PUSH
19505: LD_INT 1
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: LD_INT 2
19514: NEG
19515: PUSH
19516: LD_INT 0
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PUSH
19523: LD_INT 2
19525: NEG
19526: PUSH
19527: LD_INT 1
19529: NEG
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: PUSH
19535: LD_INT 2
19537: NEG
19538: PUSH
19539: LD_INT 2
19541: NEG
19542: PUSH
19543: EMPTY
19544: LIST
19545: LIST
19546: PUSH
19547: EMPTY
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19568: LD_ADDR_VAR 0 20
19572: PUSH
19573: LD_INT 0
19575: PUSH
19576: LD_INT 0
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: PUSH
19583: LD_INT 0
19585: PUSH
19586: LD_INT 1
19588: NEG
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: PUSH
19594: LD_INT 1
19596: PUSH
19597: LD_INT 0
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: PUSH
19604: LD_INT 1
19606: PUSH
19607: LD_INT 1
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: PUSH
19614: LD_INT 0
19616: PUSH
19617: LD_INT 1
19619: PUSH
19620: EMPTY
19621: LIST
19622: LIST
19623: PUSH
19624: LD_INT 1
19626: NEG
19627: PUSH
19628: LD_INT 0
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: PUSH
19635: LD_INT 1
19637: NEG
19638: PUSH
19639: LD_INT 1
19641: NEG
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: PUSH
19647: LD_INT 1
19649: NEG
19650: PUSH
19651: LD_INT 2
19653: NEG
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: PUSH
19659: LD_INT 0
19661: PUSH
19662: LD_INT 2
19664: NEG
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: PUSH
19670: LD_INT 1
19672: PUSH
19673: LD_INT 1
19675: NEG
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: PUSH
19681: LD_INT 2
19683: PUSH
19684: LD_INT 0
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: PUSH
19691: LD_INT 2
19693: PUSH
19694: LD_INT 1
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PUSH
19701: LD_INT 2
19703: PUSH
19704: LD_INT 2
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: LD_INT 1
19713: PUSH
19714: LD_INT 2
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: LD_INT 0
19723: PUSH
19724: LD_INT 2
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PUSH
19731: LD_INT 1
19733: NEG
19734: PUSH
19735: LD_INT 1
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: PUSH
19742: LD_INT 2
19744: NEG
19745: PUSH
19746: LD_INT 0
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PUSH
19753: LD_INT 2
19755: NEG
19756: PUSH
19757: LD_INT 1
19759: NEG
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: PUSH
19765: LD_INT 2
19767: NEG
19768: PUSH
19769: LD_INT 2
19771: NEG
19772: PUSH
19773: EMPTY
19774: LIST
19775: LIST
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19798: LD_ADDR_VAR 0 21
19802: PUSH
19803: LD_INT 0
19805: PUSH
19806: LD_INT 0
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PUSH
19813: LD_INT 0
19815: PUSH
19816: LD_INT 1
19818: NEG
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: PUSH
19824: LD_INT 1
19826: PUSH
19827: LD_INT 0
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PUSH
19834: LD_INT 1
19836: PUSH
19837: LD_INT 1
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: PUSH
19844: LD_INT 0
19846: PUSH
19847: LD_INT 1
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: PUSH
19854: LD_INT 1
19856: NEG
19857: PUSH
19858: LD_INT 0
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: PUSH
19865: LD_INT 1
19867: NEG
19868: PUSH
19869: LD_INT 1
19871: NEG
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: PUSH
19877: LD_INT 1
19879: NEG
19880: PUSH
19881: LD_INT 2
19883: NEG
19884: PUSH
19885: EMPTY
19886: LIST
19887: LIST
19888: PUSH
19889: LD_INT 0
19891: PUSH
19892: LD_INT 2
19894: NEG
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: PUSH
19900: LD_INT 1
19902: PUSH
19903: LD_INT 1
19905: NEG
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: PUSH
19911: LD_INT 2
19913: PUSH
19914: LD_INT 0
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PUSH
19921: LD_INT 2
19923: PUSH
19924: LD_INT 1
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: PUSH
19931: LD_INT 2
19933: PUSH
19934: LD_INT 2
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: PUSH
19941: LD_INT 1
19943: PUSH
19944: LD_INT 2
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: PUSH
19951: LD_INT 0
19953: PUSH
19954: LD_INT 2
19956: PUSH
19957: EMPTY
19958: LIST
19959: LIST
19960: PUSH
19961: LD_INT 1
19963: NEG
19964: PUSH
19965: LD_INT 1
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: PUSH
19972: LD_INT 2
19974: NEG
19975: PUSH
19976: LD_INT 0
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: PUSH
19983: LD_INT 2
19985: NEG
19986: PUSH
19987: LD_INT 1
19989: NEG
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: PUSH
19995: LD_INT 2
19997: NEG
19998: PUSH
19999: LD_INT 2
20001: NEG
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20028: LD_ADDR_VAR 0 22
20032: PUSH
20033: LD_INT 0
20035: PUSH
20036: LD_INT 0
20038: PUSH
20039: EMPTY
20040: LIST
20041: LIST
20042: PUSH
20043: LD_INT 0
20045: PUSH
20046: LD_INT 1
20048: NEG
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: PUSH
20054: LD_INT 1
20056: PUSH
20057: LD_INT 0
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: PUSH
20064: LD_INT 1
20066: PUSH
20067: LD_INT 1
20069: PUSH
20070: EMPTY
20071: LIST
20072: LIST
20073: PUSH
20074: LD_INT 0
20076: PUSH
20077: LD_INT 1
20079: PUSH
20080: EMPTY
20081: LIST
20082: LIST
20083: PUSH
20084: LD_INT 1
20086: NEG
20087: PUSH
20088: LD_INT 0
20090: PUSH
20091: EMPTY
20092: LIST
20093: LIST
20094: PUSH
20095: LD_INT 1
20097: NEG
20098: PUSH
20099: LD_INT 1
20101: NEG
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PUSH
20107: LD_INT 1
20109: NEG
20110: PUSH
20111: LD_INT 2
20113: NEG
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PUSH
20119: LD_INT 0
20121: PUSH
20122: LD_INT 2
20124: NEG
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PUSH
20130: LD_INT 1
20132: PUSH
20133: LD_INT 1
20135: NEG
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PUSH
20141: LD_INT 2
20143: PUSH
20144: LD_INT 0
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: PUSH
20151: LD_INT 2
20153: PUSH
20154: LD_INT 1
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: PUSH
20161: LD_INT 2
20163: PUSH
20164: LD_INT 2
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PUSH
20171: LD_INT 1
20173: PUSH
20174: LD_INT 2
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: PUSH
20181: LD_INT 0
20183: PUSH
20184: LD_INT 2
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: PUSH
20191: LD_INT 1
20193: NEG
20194: PUSH
20195: LD_INT 1
20197: PUSH
20198: EMPTY
20199: LIST
20200: LIST
20201: PUSH
20202: LD_INT 2
20204: NEG
20205: PUSH
20206: LD_INT 0
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: PUSH
20213: LD_INT 2
20215: NEG
20216: PUSH
20217: LD_INT 1
20219: NEG
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PUSH
20225: LD_INT 2
20227: NEG
20228: PUSH
20229: LD_INT 2
20231: NEG
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20258: LD_ADDR_VAR 0 23
20262: PUSH
20263: LD_INT 0
20265: PUSH
20266: LD_INT 0
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: PUSH
20273: LD_INT 0
20275: PUSH
20276: LD_INT 1
20278: NEG
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: PUSH
20284: LD_INT 1
20286: PUSH
20287: LD_INT 0
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: PUSH
20294: LD_INT 1
20296: PUSH
20297: LD_INT 1
20299: PUSH
20300: EMPTY
20301: LIST
20302: LIST
20303: PUSH
20304: LD_INT 0
20306: PUSH
20307: LD_INT 1
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: PUSH
20314: LD_INT 1
20316: NEG
20317: PUSH
20318: LD_INT 0
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: PUSH
20325: LD_INT 1
20327: NEG
20328: PUSH
20329: LD_INT 1
20331: NEG
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: PUSH
20337: LD_INT 1
20339: NEG
20340: PUSH
20341: LD_INT 2
20343: NEG
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: PUSH
20349: LD_INT 0
20351: PUSH
20352: LD_INT 2
20354: NEG
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: PUSH
20360: LD_INT 1
20362: PUSH
20363: LD_INT 1
20365: NEG
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: PUSH
20371: LD_INT 2
20373: PUSH
20374: LD_INT 0
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: PUSH
20381: LD_INT 2
20383: PUSH
20384: LD_INT 1
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: PUSH
20391: LD_INT 2
20393: PUSH
20394: LD_INT 2
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: PUSH
20401: LD_INT 1
20403: PUSH
20404: LD_INT 2
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: PUSH
20411: LD_INT 0
20413: PUSH
20414: LD_INT 2
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: LD_INT 1
20423: NEG
20424: PUSH
20425: LD_INT 1
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PUSH
20432: LD_INT 2
20434: NEG
20435: PUSH
20436: LD_INT 0
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 2
20445: NEG
20446: PUSH
20447: LD_INT 1
20449: NEG
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PUSH
20455: LD_INT 2
20457: NEG
20458: PUSH
20459: LD_INT 2
20461: NEG
20462: PUSH
20463: EMPTY
20464: LIST
20465: LIST
20466: PUSH
20467: LD_INT 2
20469: NEG
20470: PUSH
20471: LD_INT 3
20473: NEG
20474: PUSH
20475: EMPTY
20476: LIST
20477: LIST
20478: PUSH
20479: LD_INT 1
20481: NEG
20482: PUSH
20483: LD_INT 3
20485: NEG
20486: PUSH
20487: EMPTY
20488: LIST
20489: LIST
20490: PUSH
20491: LD_INT 1
20493: PUSH
20494: LD_INT 2
20496: NEG
20497: PUSH
20498: EMPTY
20499: LIST
20500: LIST
20501: PUSH
20502: LD_INT 2
20504: PUSH
20505: LD_INT 1
20507: NEG
20508: PUSH
20509: EMPTY
20510: LIST
20511: LIST
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20538: LD_ADDR_VAR 0 24
20542: PUSH
20543: LD_INT 0
20545: PUSH
20546: LD_INT 0
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PUSH
20553: LD_INT 0
20555: PUSH
20556: LD_INT 1
20558: NEG
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: PUSH
20564: LD_INT 1
20566: PUSH
20567: LD_INT 0
20569: PUSH
20570: EMPTY
20571: LIST
20572: LIST
20573: PUSH
20574: LD_INT 1
20576: PUSH
20577: LD_INT 1
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: PUSH
20584: LD_INT 0
20586: PUSH
20587: LD_INT 1
20589: PUSH
20590: EMPTY
20591: LIST
20592: LIST
20593: PUSH
20594: LD_INT 1
20596: NEG
20597: PUSH
20598: LD_INT 0
20600: PUSH
20601: EMPTY
20602: LIST
20603: LIST
20604: PUSH
20605: LD_INT 1
20607: NEG
20608: PUSH
20609: LD_INT 1
20611: NEG
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: PUSH
20617: LD_INT 1
20619: NEG
20620: PUSH
20621: LD_INT 2
20623: NEG
20624: PUSH
20625: EMPTY
20626: LIST
20627: LIST
20628: PUSH
20629: LD_INT 0
20631: PUSH
20632: LD_INT 2
20634: NEG
20635: PUSH
20636: EMPTY
20637: LIST
20638: LIST
20639: PUSH
20640: LD_INT 1
20642: PUSH
20643: LD_INT 1
20645: NEG
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: PUSH
20651: LD_INT 2
20653: PUSH
20654: LD_INT 0
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: PUSH
20661: LD_INT 2
20663: PUSH
20664: LD_INT 1
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PUSH
20671: LD_INT 2
20673: PUSH
20674: LD_INT 2
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 1
20683: PUSH
20684: LD_INT 2
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: LD_INT 0
20693: PUSH
20694: LD_INT 2
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: PUSH
20701: LD_INT 1
20703: NEG
20704: PUSH
20705: LD_INT 1
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: PUSH
20712: LD_INT 2
20714: NEG
20715: PUSH
20716: LD_INT 0
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: PUSH
20723: LD_INT 2
20725: NEG
20726: PUSH
20727: LD_INT 1
20729: NEG
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: PUSH
20735: LD_INT 2
20737: NEG
20738: PUSH
20739: LD_INT 2
20741: NEG
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: PUSH
20747: LD_INT 1
20749: PUSH
20750: LD_INT 2
20752: NEG
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: PUSH
20758: LD_INT 2
20760: PUSH
20761: LD_INT 1
20763: NEG
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: PUSH
20769: LD_INT 3
20771: PUSH
20772: LD_INT 1
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: PUSH
20779: LD_INT 3
20781: PUSH
20782: LD_INT 2
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: PUSH
20789: EMPTY
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20814: LD_ADDR_VAR 0 25
20818: PUSH
20819: LD_INT 0
20821: PUSH
20822: LD_INT 0
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: PUSH
20829: LD_INT 0
20831: PUSH
20832: LD_INT 1
20834: NEG
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: PUSH
20840: LD_INT 1
20842: PUSH
20843: LD_INT 0
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: PUSH
20850: LD_INT 1
20852: PUSH
20853: LD_INT 1
20855: PUSH
20856: EMPTY
20857: LIST
20858: LIST
20859: PUSH
20860: LD_INT 0
20862: PUSH
20863: LD_INT 1
20865: PUSH
20866: EMPTY
20867: LIST
20868: LIST
20869: PUSH
20870: LD_INT 1
20872: NEG
20873: PUSH
20874: LD_INT 0
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: PUSH
20881: LD_INT 1
20883: NEG
20884: PUSH
20885: LD_INT 1
20887: NEG
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PUSH
20893: LD_INT 1
20895: NEG
20896: PUSH
20897: LD_INT 2
20899: NEG
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PUSH
20905: LD_INT 0
20907: PUSH
20908: LD_INT 2
20910: NEG
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: PUSH
20916: LD_INT 1
20918: PUSH
20919: LD_INT 1
20921: NEG
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: PUSH
20927: LD_INT 2
20929: PUSH
20930: LD_INT 0
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: PUSH
20937: LD_INT 2
20939: PUSH
20940: LD_INT 1
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: PUSH
20947: LD_INT 2
20949: PUSH
20950: LD_INT 2
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: PUSH
20957: LD_INT 1
20959: PUSH
20960: LD_INT 2
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PUSH
20967: LD_INT 0
20969: PUSH
20970: LD_INT 2
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: PUSH
20977: LD_INT 1
20979: NEG
20980: PUSH
20981: LD_INT 1
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: PUSH
20988: LD_INT 2
20990: NEG
20991: PUSH
20992: LD_INT 0
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: PUSH
20999: LD_INT 2
21001: NEG
21002: PUSH
21003: LD_INT 1
21005: NEG
21006: PUSH
21007: EMPTY
21008: LIST
21009: LIST
21010: PUSH
21011: LD_INT 2
21013: NEG
21014: PUSH
21015: LD_INT 2
21017: NEG
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: PUSH
21023: LD_INT 3
21025: PUSH
21026: LD_INT 1
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: PUSH
21033: LD_INT 3
21035: PUSH
21036: LD_INT 2
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: PUSH
21043: LD_INT 2
21045: PUSH
21046: LD_INT 3
21048: PUSH
21049: EMPTY
21050: LIST
21051: LIST
21052: PUSH
21053: LD_INT 1
21055: PUSH
21056: LD_INT 3
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: PUSH
21063: EMPTY
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21088: LD_ADDR_VAR 0 26
21092: PUSH
21093: LD_INT 0
21095: PUSH
21096: LD_INT 0
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: PUSH
21103: LD_INT 0
21105: PUSH
21106: LD_INT 1
21108: NEG
21109: PUSH
21110: EMPTY
21111: LIST
21112: LIST
21113: PUSH
21114: LD_INT 1
21116: PUSH
21117: LD_INT 0
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: PUSH
21124: LD_INT 1
21126: PUSH
21127: LD_INT 1
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: PUSH
21134: LD_INT 0
21136: PUSH
21137: LD_INT 1
21139: PUSH
21140: EMPTY
21141: LIST
21142: LIST
21143: PUSH
21144: LD_INT 1
21146: NEG
21147: PUSH
21148: LD_INT 0
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: PUSH
21155: LD_INT 1
21157: NEG
21158: PUSH
21159: LD_INT 1
21161: NEG
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: PUSH
21167: LD_INT 1
21169: NEG
21170: PUSH
21171: LD_INT 2
21173: NEG
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: PUSH
21179: LD_INT 0
21181: PUSH
21182: LD_INT 2
21184: NEG
21185: PUSH
21186: EMPTY
21187: LIST
21188: LIST
21189: PUSH
21190: LD_INT 1
21192: PUSH
21193: LD_INT 1
21195: NEG
21196: PUSH
21197: EMPTY
21198: LIST
21199: LIST
21200: PUSH
21201: LD_INT 2
21203: PUSH
21204: LD_INT 0
21206: PUSH
21207: EMPTY
21208: LIST
21209: LIST
21210: PUSH
21211: LD_INT 2
21213: PUSH
21214: LD_INT 1
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: PUSH
21221: LD_INT 2
21223: PUSH
21224: LD_INT 2
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: PUSH
21231: LD_INT 1
21233: PUSH
21234: LD_INT 2
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: PUSH
21241: LD_INT 0
21243: PUSH
21244: LD_INT 2
21246: PUSH
21247: EMPTY
21248: LIST
21249: LIST
21250: PUSH
21251: LD_INT 1
21253: NEG
21254: PUSH
21255: LD_INT 1
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: PUSH
21262: LD_INT 2
21264: NEG
21265: PUSH
21266: LD_INT 0
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: PUSH
21273: LD_INT 2
21275: NEG
21276: PUSH
21277: LD_INT 1
21279: NEG
21280: PUSH
21281: EMPTY
21282: LIST
21283: LIST
21284: PUSH
21285: LD_INT 2
21287: NEG
21288: PUSH
21289: LD_INT 2
21291: NEG
21292: PUSH
21293: EMPTY
21294: LIST
21295: LIST
21296: PUSH
21297: LD_INT 2
21299: PUSH
21300: LD_INT 3
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: PUSH
21307: LD_INT 1
21309: PUSH
21310: LD_INT 3
21312: PUSH
21313: EMPTY
21314: LIST
21315: LIST
21316: PUSH
21317: LD_INT 1
21319: NEG
21320: PUSH
21321: LD_INT 2
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: PUSH
21328: LD_INT 2
21330: NEG
21331: PUSH
21332: LD_INT 1
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21364: LD_ADDR_VAR 0 27
21368: PUSH
21369: LD_INT 0
21371: PUSH
21372: LD_INT 0
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: PUSH
21379: LD_INT 0
21381: PUSH
21382: LD_INT 1
21384: NEG
21385: PUSH
21386: EMPTY
21387: LIST
21388: LIST
21389: PUSH
21390: LD_INT 1
21392: PUSH
21393: LD_INT 0
21395: PUSH
21396: EMPTY
21397: LIST
21398: LIST
21399: PUSH
21400: LD_INT 1
21402: PUSH
21403: LD_INT 1
21405: PUSH
21406: EMPTY
21407: LIST
21408: LIST
21409: PUSH
21410: LD_INT 0
21412: PUSH
21413: LD_INT 1
21415: PUSH
21416: EMPTY
21417: LIST
21418: LIST
21419: PUSH
21420: LD_INT 1
21422: NEG
21423: PUSH
21424: LD_INT 0
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: PUSH
21431: LD_INT 1
21433: NEG
21434: PUSH
21435: LD_INT 1
21437: NEG
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: PUSH
21443: LD_INT 1
21445: NEG
21446: PUSH
21447: LD_INT 2
21449: NEG
21450: PUSH
21451: EMPTY
21452: LIST
21453: LIST
21454: PUSH
21455: LD_INT 0
21457: PUSH
21458: LD_INT 2
21460: NEG
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: PUSH
21466: LD_INT 1
21468: PUSH
21469: LD_INT 1
21471: NEG
21472: PUSH
21473: EMPTY
21474: LIST
21475: LIST
21476: PUSH
21477: LD_INT 2
21479: PUSH
21480: LD_INT 0
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: PUSH
21487: LD_INT 2
21489: PUSH
21490: LD_INT 1
21492: PUSH
21493: EMPTY
21494: LIST
21495: LIST
21496: PUSH
21497: LD_INT 2
21499: PUSH
21500: LD_INT 2
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: PUSH
21507: LD_INT 1
21509: PUSH
21510: LD_INT 2
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: PUSH
21517: LD_INT 0
21519: PUSH
21520: LD_INT 2
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: PUSH
21527: LD_INT 1
21529: NEG
21530: PUSH
21531: LD_INT 1
21533: PUSH
21534: EMPTY
21535: LIST
21536: LIST
21537: PUSH
21538: LD_INT 2
21540: NEG
21541: PUSH
21542: LD_INT 0
21544: PUSH
21545: EMPTY
21546: LIST
21547: LIST
21548: PUSH
21549: LD_INT 2
21551: NEG
21552: PUSH
21553: LD_INT 1
21555: NEG
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: PUSH
21561: LD_INT 2
21563: NEG
21564: PUSH
21565: LD_INT 2
21567: NEG
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: PUSH
21573: LD_INT 1
21575: NEG
21576: PUSH
21577: LD_INT 2
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: PUSH
21584: LD_INT 2
21586: NEG
21587: PUSH
21588: LD_INT 1
21590: PUSH
21591: EMPTY
21592: LIST
21593: LIST
21594: PUSH
21595: LD_INT 3
21597: NEG
21598: PUSH
21599: LD_INT 1
21601: NEG
21602: PUSH
21603: EMPTY
21604: LIST
21605: LIST
21606: PUSH
21607: LD_INT 3
21609: NEG
21610: PUSH
21611: LD_INT 2
21613: NEG
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21644: LD_ADDR_VAR 0 28
21648: PUSH
21649: LD_INT 0
21651: PUSH
21652: LD_INT 0
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: PUSH
21659: LD_INT 0
21661: PUSH
21662: LD_INT 1
21664: NEG
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: PUSH
21670: LD_INT 1
21672: PUSH
21673: LD_INT 0
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 1
21682: PUSH
21683: LD_INT 1
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: PUSH
21690: LD_INT 0
21692: PUSH
21693: LD_INT 1
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: PUSH
21700: LD_INT 1
21702: NEG
21703: PUSH
21704: LD_INT 0
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: PUSH
21711: LD_INT 1
21713: NEG
21714: PUSH
21715: LD_INT 1
21717: NEG
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: PUSH
21723: LD_INT 1
21725: NEG
21726: PUSH
21727: LD_INT 2
21729: NEG
21730: PUSH
21731: EMPTY
21732: LIST
21733: LIST
21734: PUSH
21735: LD_INT 0
21737: PUSH
21738: LD_INT 2
21740: NEG
21741: PUSH
21742: EMPTY
21743: LIST
21744: LIST
21745: PUSH
21746: LD_INT 1
21748: PUSH
21749: LD_INT 1
21751: NEG
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PUSH
21757: LD_INT 2
21759: PUSH
21760: LD_INT 0
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: LD_INT 2
21769: PUSH
21770: LD_INT 1
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: PUSH
21777: LD_INT 2
21779: PUSH
21780: LD_INT 2
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: PUSH
21787: LD_INT 1
21789: PUSH
21790: LD_INT 2
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: PUSH
21797: LD_INT 0
21799: PUSH
21800: LD_INT 2
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: PUSH
21807: LD_INT 1
21809: NEG
21810: PUSH
21811: LD_INT 1
21813: PUSH
21814: EMPTY
21815: LIST
21816: LIST
21817: PUSH
21818: LD_INT 2
21820: NEG
21821: PUSH
21822: LD_INT 0
21824: PUSH
21825: EMPTY
21826: LIST
21827: LIST
21828: PUSH
21829: LD_INT 2
21831: NEG
21832: PUSH
21833: LD_INT 1
21835: NEG
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: PUSH
21841: LD_INT 2
21843: NEG
21844: PUSH
21845: LD_INT 2
21847: NEG
21848: PUSH
21849: EMPTY
21850: LIST
21851: LIST
21852: PUSH
21853: LD_INT 2
21855: NEG
21856: PUSH
21857: LD_INT 3
21859: NEG
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: PUSH
21865: LD_INT 1
21867: NEG
21868: PUSH
21869: LD_INT 3
21871: NEG
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PUSH
21877: LD_INT 3
21879: NEG
21880: PUSH
21881: LD_INT 1
21883: NEG
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: PUSH
21889: LD_INT 3
21891: NEG
21892: PUSH
21893: LD_INT 2
21895: NEG
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21926: LD_ADDR_VAR 0 29
21930: PUSH
21931: LD_INT 0
21933: PUSH
21934: LD_INT 0
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: PUSH
21941: LD_INT 0
21943: PUSH
21944: LD_INT 1
21946: NEG
21947: PUSH
21948: EMPTY
21949: LIST
21950: LIST
21951: PUSH
21952: LD_INT 1
21954: PUSH
21955: LD_INT 0
21957: PUSH
21958: EMPTY
21959: LIST
21960: LIST
21961: PUSH
21962: LD_INT 1
21964: PUSH
21965: LD_INT 1
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: PUSH
21972: LD_INT 0
21974: PUSH
21975: LD_INT 1
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: PUSH
21982: LD_INT 1
21984: NEG
21985: PUSH
21986: LD_INT 0
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: PUSH
21993: LD_INT 1
21995: NEG
21996: PUSH
21997: LD_INT 1
21999: NEG
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: PUSH
22005: LD_INT 1
22007: NEG
22008: PUSH
22009: LD_INT 2
22011: NEG
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: PUSH
22017: LD_INT 0
22019: PUSH
22020: LD_INT 2
22022: NEG
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: PUSH
22028: LD_INT 1
22030: PUSH
22031: LD_INT 1
22033: NEG
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: PUSH
22039: LD_INT 2
22041: PUSH
22042: LD_INT 0
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: PUSH
22049: LD_INT 2
22051: PUSH
22052: LD_INT 1
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: PUSH
22059: LD_INT 1
22061: PUSH
22062: LD_INT 2
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: PUSH
22069: LD_INT 0
22071: PUSH
22072: LD_INT 2
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: PUSH
22079: LD_INT 1
22081: NEG
22082: PUSH
22083: LD_INT 1
22085: PUSH
22086: EMPTY
22087: LIST
22088: LIST
22089: PUSH
22090: LD_INT 2
22092: NEG
22093: PUSH
22094: LD_INT 1
22096: NEG
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: PUSH
22102: LD_INT 2
22104: NEG
22105: PUSH
22106: LD_INT 2
22108: NEG
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: PUSH
22114: LD_INT 2
22116: NEG
22117: PUSH
22118: LD_INT 3
22120: NEG
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: PUSH
22126: LD_INT 2
22128: PUSH
22129: LD_INT 1
22131: NEG
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: PUSH
22137: LD_INT 3
22139: PUSH
22140: LD_INT 1
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: PUSH
22147: LD_INT 1
22149: PUSH
22150: LD_INT 3
22152: PUSH
22153: EMPTY
22154: LIST
22155: LIST
22156: PUSH
22157: LD_INT 1
22159: NEG
22160: PUSH
22161: LD_INT 2
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: PUSH
22168: LD_INT 3
22170: NEG
22171: PUSH
22172: LD_INT 2
22174: NEG
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: PUSH
22180: EMPTY
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22205: LD_ADDR_VAR 0 30
22209: PUSH
22210: LD_INT 0
22212: PUSH
22213: LD_INT 0
22215: PUSH
22216: EMPTY
22217: LIST
22218: LIST
22219: PUSH
22220: LD_INT 0
22222: PUSH
22223: LD_INT 1
22225: NEG
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: PUSH
22231: LD_INT 1
22233: PUSH
22234: LD_INT 0
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: PUSH
22241: LD_INT 1
22243: PUSH
22244: LD_INT 1
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: PUSH
22251: LD_INT 0
22253: PUSH
22254: LD_INT 1
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: PUSH
22261: LD_INT 1
22263: NEG
22264: PUSH
22265: LD_INT 0
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: PUSH
22272: LD_INT 1
22274: NEG
22275: PUSH
22276: LD_INT 1
22278: NEG
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PUSH
22284: LD_INT 1
22286: NEG
22287: PUSH
22288: LD_INT 2
22290: NEG
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PUSH
22296: LD_INT 0
22298: PUSH
22299: LD_INT 2
22301: NEG
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: PUSH
22307: LD_INT 1
22309: PUSH
22310: LD_INT 1
22312: NEG
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: PUSH
22318: LD_INT 2
22320: PUSH
22321: LD_INT 0
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: PUSH
22328: LD_INT 2
22330: PUSH
22331: LD_INT 1
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: PUSH
22338: LD_INT 2
22340: PUSH
22341: LD_INT 2
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: PUSH
22348: LD_INT 1
22350: PUSH
22351: LD_INT 2
22353: PUSH
22354: EMPTY
22355: LIST
22356: LIST
22357: PUSH
22358: LD_INT 1
22360: NEG
22361: PUSH
22362: LD_INT 1
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: PUSH
22369: LD_INT 2
22371: NEG
22372: PUSH
22373: LD_INT 0
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PUSH
22380: LD_INT 2
22382: NEG
22383: PUSH
22384: LD_INT 1
22386: NEG
22387: PUSH
22388: EMPTY
22389: LIST
22390: LIST
22391: PUSH
22392: LD_INT 1
22394: NEG
22395: PUSH
22396: LD_INT 3
22398: NEG
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: PUSH
22404: LD_INT 1
22406: PUSH
22407: LD_INT 2
22409: NEG
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: LD_INT 3
22417: PUSH
22418: LD_INT 2
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: PUSH
22425: LD_INT 2
22427: PUSH
22428: LD_INT 3
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PUSH
22435: LD_INT 2
22437: NEG
22438: PUSH
22439: LD_INT 1
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PUSH
22446: LD_INT 3
22448: NEG
22449: PUSH
22450: LD_INT 1
22452: NEG
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22483: LD_ADDR_VAR 0 31
22487: PUSH
22488: LD_INT 0
22490: PUSH
22491: LD_INT 0
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: PUSH
22498: LD_INT 0
22500: PUSH
22501: LD_INT 1
22503: NEG
22504: PUSH
22505: EMPTY
22506: LIST
22507: LIST
22508: PUSH
22509: LD_INT 1
22511: PUSH
22512: LD_INT 0
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: PUSH
22519: LD_INT 1
22521: PUSH
22522: LD_INT 1
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: PUSH
22529: LD_INT 0
22531: PUSH
22532: LD_INT 1
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 1
22541: NEG
22542: PUSH
22543: LD_INT 0
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 1
22552: NEG
22553: PUSH
22554: LD_INT 1
22556: NEG
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: PUSH
22562: LD_INT 1
22564: NEG
22565: PUSH
22566: LD_INT 2
22568: NEG
22569: PUSH
22570: EMPTY
22571: LIST
22572: LIST
22573: PUSH
22574: LD_INT 1
22576: PUSH
22577: LD_INT 1
22579: NEG
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: PUSH
22585: LD_INT 2
22587: PUSH
22588: LD_INT 0
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: PUSH
22595: LD_INT 2
22597: PUSH
22598: LD_INT 1
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: PUSH
22605: LD_INT 2
22607: PUSH
22608: LD_INT 2
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: PUSH
22615: LD_INT 1
22617: PUSH
22618: LD_INT 2
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: PUSH
22625: LD_INT 0
22627: PUSH
22628: LD_INT 2
22630: PUSH
22631: EMPTY
22632: LIST
22633: LIST
22634: PUSH
22635: LD_INT 1
22637: NEG
22638: PUSH
22639: LD_INT 1
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: PUSH
22646: LD_INT 2
22648: NEG
22649: PUSH
22650: LD_INT 1
22652: NEG
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: PUSH
22658: LD_INT 2
22660: NEG
22661: PUSH
22662: LD_INT 2
22664: NEG
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: PUSH
22670: LD_INT 2
22672: NEG
22673: PUSH
22674: LD_INT 3
22676: NEG
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: PUSH
22682: LD_INT 2
22684: PUSH
22685: LD_INT 1
22687: NEG
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: PUSH
22693: LD_INT 3
22695: PUSH
22696: LD_INT 1
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: PUSH
22703: LD_INT 1
22705: PUSH
22706: LD_INT 3
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: PUSH
22713: LD_INT 1
22715: NEG
22716: PUSH
22717: LD_INT 2
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: PUSH
22724: LD_INT 3
22726: NEG
22727: PUSH
22728: LD_INT 2
22730: NEG
22731: PUSH
22732: EMPTY
22733: LIST
22734: LIST
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22761: LD_ADDR_VAR 0 32
22765: PUSH
22766: LD_INT 0
22768: PUSH
22769: LD_INT 0
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: PUSH
22776: LD_INT 0
22778: PUSH
22779: LD_INT 1
22781: NEG
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: PUSH
22787: LD_INT 1
22789: PUSH
22790: LD_INT 0
22792: PUSH
22793: EMPTY
22794: LIST
22795: LIST
22796: PUSH
22797: LD_INT 1
22799: PUSH
22800: LD_INT 1
22802: PUSH
22803: EMPTY
22804: LIST
22805: LIST
22806: PUSH
22807: LD_INT 0
22809: PUSH
22810: LD_INT 1
22812: PUSH
22813: EMPTY
22814: LIST
22815: LIST
22816: PUSH
22817: LD_INT 1
22819: NEG
22820: PUSH
22821: LD_INT 0
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PUSH
22828: LD_INT 1
22830: NEG
22831: PUSH
22832: LD_INT 1
22834: NEG
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 1
22842: NEG
22843: PUSH
22844: LD_INT 2
22846: NEG
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: PUSH
22852: LD_INT 0
22854: PUSH
22855: LD_INT 2
22857: NEG
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: PUSH
22863: LD_INT 1
22865: PUSH
22866: LD_INT 1
22868: NEG
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: PUSH
22874: LD_INT 2
22876: PUSH
22877: LD_INT 1
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: PUSH
22884: LD_INT 2
22886: PUSH
22887: LD_INT 2
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: PUSH
22894: LD_INT 1
22896: PUSH
22897: LD_INT 2
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: PUSH
22904: LD_INT 0
22906: PUSH
22907: LD_INT 2
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: PUSH
22914: LD_INT 1
22916: NEG
22917: PUSH
22918: LD_INT 1
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: PUSH
22925: LD_INT 2
22927: NEG
22928: PUSH
22929: LD_INT 0
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: PUSH
22936: LD_INT 2
22938: NEG
22939: PUSH
22940: LD_INT 1
22942: NEG
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PUSH
22948: LD_INT 1
22950: NEG
22951: PUSH
22952: LD_INT 3
22954: NEG
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: PUSH
22960: LD_INT 1
22962: PUSH
22963: LD_INT 2
22965: NEG
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PUSH
22971: LD_INT 3
22973: PUSH
22974: LD_INT 2
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: PUSH
22981: LD_INT 2
22983: PUSH
22984: LD_INT 3
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: PUSH
22991: LD_INT 2
22993: NEG
22994: PUSH
22995: LD_INT 1
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: PUSH
23002: LD_INT 3
23004: NEG
23005: PUSH
23006: LD_INT 1
23008: NEG
23009: PUSH
23010: EMPTY
23011: LIST
23012: LIST
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23039: LD_ADDR_VAR 0 33
23043: PUSH
23044: LD_INT 0
23046: PUSH
23047: LD_INT 0
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: PUSH
23054: LD_INT 0
23056: PUSH
23057: LD_INT 1
23059: NEG
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: PUSH
23065: LD_INT 1
23067: PUSH
23068: LD_INT 0
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: PUSH
23075: LD_INT 1
23077: PUSH
23078: LD_INT 1
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: PUSH
23085: LD_INT 0
23087: PUSH
23088: LD_INT 1
23090: PUSH
23091: EMPTY
23092: LIST
23093: LIST
23094: PUSH
23095: LD_INT 1
23097: NEG
23098: PUSH
23099: LD_INT 0
23101: PUSH
23102: EMPTY
23103: LIST
23104: LIST
23105: PUSH
23106: LD_INT 1
23108: NEG
23109: PUSH
23110: LD_INT 1
23112: NEG
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: PUSH
23118: LD_INT 1
23120: NEG
23121: PUSH
23122: LD_INT 2
23124: NEG
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PUSH
23130: LD_INT 1
23132: PUSH
23133: LD_INT 1
23135: NEG
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PUSH
23141: LD_INT 2
23143: PUSH
23144: LD_INT 0
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: LD_INT 2
23153: PUSH
23154: LD_INT 1
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: PUSH
23161: LD_INT 1
23163: PUSH
23164: LD_INT 2
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: PUSH
23171: LD_INT 0
23173: PUSH
23174: LD_INT 2
23176: PUSH
23177: EMPTY
23178: LIST
23179: LIST
23180: PUSH
23181: LD_INT 1
23183: NEG
23184: PUSH
23185: LD_INT 1
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: PUSH
23192: LD_INT 2
23194: NEG
23195: PUSH
23196: LD_INT 0
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: PUSH
23203: LD_INT 2
23205: NEG
23206: PUSH
23207: LD_INT 1
23209: NEG
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: PUSH
23215: LD_INT 2
23217: NEG
23218: PUSH
23219: LD_INT 2
23221: NEG
23222: PUSH
23223: EMPTY
23224: LIST
23225: LIST
23226: PUSH
23227: LD_INT 2
23229: NEG
23230: PUSH
23231: LD_INT 3
23233: NEG
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: PUSH
23239: LD_INT 2
23241: PUSH
23242: LD_INT 1
23244: NEG
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: PUSH
23250: LD_INT 3
23252: PUSH
23253: LD_INT 1
23255: PUSH
23256: EMPTY
23257: LIST
23258: LIST
23259: PUSH
23260: LD_INT 1
23262: PUSH
23263: LD_INT 3
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: PUSH
23270: LD_INT 1
23272: NEG
23273: PUSH
23274: LD_INT 2
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: PUSH
23281: LD_INT 3
23283: NEG
23284: PUSH
23285: LD_INT 2
23287: NEG
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23318: LD_ADDR_VAR 0 34
23322: PUSH
23323: LD_INT 0
23325: PUSH
23326: LD_INT 0
23328: PUSH
23329: EMPTY
23330: LIST
23331: LIST
23332: PUSH
23333: LD_INT 0
23335: PUSH
23336: LD_INT 1
23338: NEG
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: PUSH
23344: LD_INT 1
23346: PUSH
23347: LD_INT 0
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: PUSH
23354: LD_INT 1
23356: PUSH
23357: LD_INT 1
23359: PUSH
23360: EMPTY
23361: LIST
23362: LIST
23363: PUSH
23364: LD_INT 0
23366: PUSH
23367: LD_INT 1
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: PUSH
23374: LD_INT 1
23376: NEG
23377: PUSH
23378: LD_INT 0
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PUSH
23385: LD_INT 1
23387: NEG
23388: PUSH
23389: LD_INT 1
23391: NEG
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: PUSH
23397: LD_INT 1
23399: NEG
23400: PUSH
23401: LD_INT 2
23403: NEG
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: PUSH
23409: LD_INT 0
23411: PUSH
23412: LD_INT 2
23414: NEG
23415: PUSH
23416: EMPTY
23417: LIST
23418: LIST
23419: PUSH
23420: LD_INT 1
23422: PUSH
23423: LD_INT 1
23425: NEG
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: PUSH
23431: LD_INT 2
23433: PUSH
23434: LD_INT 1
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: LD_INT 2
23443: PUSH
23444: LD_INT 2
23446: PUSH
23447: EMPTY
23448: LIST
23449: LIST
23450: PUSH
23451: LD_INT 1
23453: PUSH
23454: LD_INT 2
23456: PUSH
23457: EMPTY
23458: LIST
23459: LIST
23460: PUSH
23461: LD_INT 1
23463: NEG
23464: PUSH
23465: LD_INT 1
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: PUSH
23472: LD_INT 2
23474: NEG
23475: PUSH
23476: LD_INT 0
23478: PUSH
23479: EMPTY
23480: LIST
23481: LIST
23482: PUSH
23483: LD_INT 2
23485: NEG
23486: PUSH
23487: LD_INT 1
23489: NEG
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: PUSH
23495: LD_INT 2
23497: NEG
23498: PUSH
23499: LD_INT 2
23501: NEG
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: PUSH
23507: LD_INT 1
23509: NEG
23510: PUSH
23511: LD_INT 3
23513: NEG
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: PUSH
23519: LD_INT 1
23521: PUSH
23522: LD_INT 2
23524: NEG
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: PUSH
23530: LD_INT 3
23532: PUSH
23533: LD_INT 2
23535: PUSH
23536: EMPTY
23537: LIST
23538: LIST
23539: PUSH
23540: LD_INT 2
23542: PUSH
23543: LD_INT 3
23545: PUSH
23546: EMPTY
23547: LIST
23548: LIST
23549: PUSH
23550: LD_INT 2
23552: NEG
23553: PUSH
23554: LD_INT 1
23556: PUSH
23557: EMPTY
23558: LIST
23559: LIST
23560: PUSH
23561: LD_INT 3
23563: NEG
23564: PUSH
23565: LD_INT 1
23567: NEG
23568: PUSH
23569: EMPTY
23570: LIST
23571: LIST
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23598: LD_ADDR_VAR 0 35
23602: PUSH
23603: LD_INT 0
23605: PUSH
23606: LD_INT 0
23608: PUSH
23609: EMPTY
23610: LIST
23611: LIST
23612: PUSH
23613: LD_INT 0
23615: PUSH
23616: LD_INT 1
23618: NEG
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: PUSH
23624: LD_INT 1
23626: PUSH
23627: LD_INT 0
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: PUSH
23634: LD_INT 1
23636: PUSH
23637: LD_INT 1
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: PUSH
23644: LD_INT 0
23646: PUSH
23647: LD_INT 1
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: PUSH
23654: LD_INT 1
23656: NEG
23657: PUSH
23658: LD_INT 0
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: PUSH
23665: LD_INT 1
23667: NEG
23668: PUSH
23669: LD_INT 1
23671: NEG
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: PUSH
23677: LD_INT 2
23679: PUSH
23680: LD_INT 1
23682: PUSH
23683: EMPTY
23684: LIST
23685: LIST
23686: PUSH
23687: LD_INT 2
23689: NEG
23690: PUSH
23691: LD_INT 1
23693: NEG
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: PUSH
23699: EMPTY
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23710: LD_ADDR_VAR 0 36
23714: PUSH
23715: LD_INT 0
23717: PUSH
23718: LD_INT 0
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: PUSH
23725: LD_INT 0
23727: PUSH
23728: LD_INT 1
23730: NEG
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PUSH
23736: LD_INT 1
23738: PUSH
23739: LD_INT 0
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: PUSH
23746: LD_INT 1
23748: PUSH
23749: LD_INT 1
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: PUSH
23756: LD_INT 0
23758: PUSH
23759: LD_INT 1
23761: PUSH
23762: EMPTY
23763: LIST
23764: LIST
23765: PUSH
23766: LD_INT 1
23768: NEG
23769: PUSH
23770: LD_INT 0
23772: PUSH
23773: EMPTY
23774: LIST
23775: LIST
23776: PUSH
23777: LD_INT 1
23779: NEG
23780: PUSH
23781: LD_INT 1
23783: NEG
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: PUSH
23789: LD_INT 1
23791: NEG
23792: PUSH
23793: LD_INT 2
23795: NEG
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PUSH
23801: LD_INT 1
23803: PUSH
23804: LD_INT 2
23806: PUSH
23807: EMPTY
23808: LIST
23809: LIST
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23822: LD_ADDR_VAR 0 37
23826: PUSH
23827: LD_INT 0
23829: PUSH
23830: LD_INT 0
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: PUSH
23837: LD_INT 0
23839: PUSH
23840: LD_INT 1
23842: NEG
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: PUSH
23848: LD_INT 1
23850: PUSH
23851: LD_INT 0
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: PUSH
23858: LD_INT 1
23860: PUSH
23861: LD_INT 1
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: PUSH
23868: LD_INT 0
23870: PUSH
23871: LD_INT 1
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: PUSH
23878: LD_INT 1
23880: NEG
23881: PUSH
23882: LD_INT 0
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: PUSH
23889: LD_INT 1
23891: NEG
23892: PUSH
23893: LD_INT 1
23895: NEG
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PUSH
23901: LD_INT 1
23903: PUSH
23904: LD_INT 1
23906: NEG
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: PUSH
23912: LD_INT 1
23914: NEG
23915: PUSH
23916: LD_INT 1
23918: PUSH
23919: EMPTY
23920: LIST
23921: LIST
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23934: LD_ADDR_VAR 0 38
23938: PUSH
23939: LD_INT 0
23941: PUSH
23942: LD_INT 0
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: PUSH
23949: LD_INT 0
23951: PUSH
23952: LD_INT 1
23954: NEG
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: PUSH
23960: LD_INT 1
23962: PUSH
23963: LD_INT 0
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: PUSH
23970: LD_INT 1
23972: PUSH
23973: LD_INT 1
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: PUSH
23980: LD_INT 0
23982: PUSH
23983: LD_INT 1
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: PUSH
23990: LD_INT 1
23992: NEG
23993: PUSH
23994: LD_INT 0
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: PUSH
24001: LD_INT 1
24003: NEG
24004: PUSH
24005: LD_INT 1
24007: NEG
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: PUSH
24013: LD_INT 2
24015: PUSH
24016: LD_INT 1
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PUSH
24023: LD_INT 2
24025: NEG
24026: PUSH
24027: LD_INT 1
24029: NEG
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24046: LD_ADDR_VAR 0 39
24050: PUSH
24051: LD_INT 0
24053: PUSH
24054: LD_INT 0
24056: PUSH
24057: EMPTY
24058: LIST
24059: LIST
24060: PUSH
24061: LD_INT 0
24063: PUSH
24064: LD_INT 1
24066: NEG
24067: PUSH
24068: EMPTY
24069: LIST
24070: LIST
24071: PUSH
24072: LD_INT 1
24074: PUSH
24075: LD_INT 0
24077: PUSH
24078: EMPTY
24079: LIST
24080: LIST
24081: PUSH
24082: LD_INT 1
24084: PUSH
24085: LD_INT 1
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: PUSH
24092: LD_INT 0
24094: PUSH
24095: LD_INT 1
24097: PUSH
24098: EMPTY
24099: LIST
24100: LIST
24101: PUSH
24102: LD_INT 1
24104: NEG
24105: PUSH
24106: LD_INT 0
24108: PUSH
24109: EMPTY
24110: LIST
24111: LIST
24112: PUSH
24113: LD_INT 1
24115: NEG
24116: PUSH
24117: LD_INT 1
24119: NEG
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: PUSH
24125: LD_INT 1
24127: NEG
24128: PUSH
24129: LD_INT 2
24131: NEG
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: PUSH
24137: LD_INT 1
24139: PUSH
24140: LD_INT 2
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24158: LD_ADDR_VAR 0 40
24162: PUSH
24163: LD_INT 0
24165: PUSH
24166: LD_INT 0
24168: PUSH
24169: EMPTY
24170: LIST
24171: LIST
24172: PUSH
24173: LD_INT 0
24175: PUSH
24176: LD_INT 1
24178: NEG
24179: PUSH
24180: EMPTY
24181: LIST
24182: LIST
24183: PUSH
24184: LD_INT 1
24186: PUSH
24187: LD_INT 0
24189: PUSH
24190: EMPTY
24191: LIST
24192: LIST
24193: PUSH
24194: LD_INT 1
24196: PUSH
24197: LD_INT 1
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: PUSH
24204: LD_INT 0
24206: PUSH
24207: LD_INT 1
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: PUSH
24214: LD_INT 1
24216: NEG
24217: PUSH
24218: LD_INT 0
24220: PUSH
24221: EMPTY
24222: LIST
24223: LIST
24224: PUSH
24225: LD_INT 1
24227: NEG
24228: PUSH
24229: LD_INT 1
24231: NEG
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: PUSH
24237: LD_INT 1
24239: PUSH
24240: LD_INT 1
24242: NEG
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: PUSH
24248: LD_INT 1
24250: NEG
24251: PUSH
24252: LD_INT 1
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24270: LD_ADDR_VAR 0 41
24274: PUSH
24275: LD_INT 0
24277: PUSH
24278: LD_INT 0
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: PUSH
24285: LD_INT 0
24287: PUSH
24288: LD_INT 1
24290: NEG
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PUSH
24296: LD_INT 1
24298: PUSH
24299: LD_INT 0
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 1
24308: PUSH
24309: LD_INT 1
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: PUSH
24316: LD_INT 0
24318: PUSH
24319: LD_INT 1
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: PUSH
24326: LD_INT 1
24328: NEG
24329: PUSH
24330: LD_INT 0
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: PUSH
24337: LD_INT 1
24339: NEG
24340: PUSH
24341: LD_INT 1
24343: NEG
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: PUSH
24349: LD_INT 1
24351: NEG
24352: PUSH
24353: LD_INT 2
24355: NEG
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: PUSH
24361: LD_INT 1
24363: PUSH
24364: LD_INT 1
24366: NEG
24367: PUSH
24368: EMPTY
24369: LIST
24370: LIST
24371: PUSH
24372: LD_INT 2
24374: PUSH
24375: LD_INT 0
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: PUSH
24382: LD_INT 2
24384: PUSH
24385: LD_INT 1
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: PUSH
24392: LD_INT 2
24394: PUSH
24395: LD_INT 2
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: PUSH
24402: LD_INT 1
24404: PUSH
24405: LD_INT 2
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: PUSH
24412: LD_INT 1
24414: NEG
24415: PUSH
24416: LD_INT 1
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: PUSH
24423: LD_INT 2
24425: NEG
24426: PUSH
24427: LD_INT 0
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: PUSH
24434: LD_INT 2
24436: NEG
24437: PUSH
24438: LD_INT 1
24440: NEG
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: PUSH
24446: LD_INT 2
24448: NEG
24449: PUSH
24450: LD_INT 2
24452: NEG
24453: PUSH
24454: EMPTY
24455: LIST
24456: LIST
24457: PUSH
24458: LD_INT 2
24460: NEG
24461: PUSH
24462: LD_INT 3
24464: NEG
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: PUSH
24470: LD_INT 2
24472: PUSH
24473: LD_INT 1
24475: NEG
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: LD_INT 3
24483: PUSH
24484: LD_INT 0
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PUSH
24491: LD_INT 3
24493: PUSH
24494: LD_INT 1
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PUSH
24501: LD_INT 3
24503: PUSH
24504: LD_INT 2
24506: PUSH
24507: EMPTY
24508: LIST
24509: LIST
24510: PUSH
24511: LD_INT 3
24513: PUSH
24514: LD_INT 3
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: PUSH
24521: LD_INT 2
24523: PUSH
24524: LD_INT 3
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PUSH
24531: LD_INT 2
24533: NEG
24534: PUSH
24535: LD_INT 1
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: PUSH
24542: LD_INT 3
24544: NEG
24545: PUSH
24546: LD_INT 0
24548: PUSH
24549: EMPTY
24550: LIST
24551: LIST
24552: PUSH
24553: LD_INT 3
24555: NEG
24556: PUSH
24557: LD_INT 1
24559: NEG
24560: PUSH
24561: EMPTY
24562: LIST
24563: LIST
24564: PUSH
24565: LD_INT 3
24567: NEG
24568: PUSH
24569: LD_INT 2
24571: NEG
24572: PUSH
24573: EMPTY
24574: LIST
24575: LIST
24576: PUSH
24577: LD_INT 3
24579: NEG
24580: PUSH
24581: LD_INT 3
24583: NEG
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24620: LD_ADDR_VAR 0 42
24624: PUSH
24625: LD_INT 0
24627: PUSH
24628: LD_INT 0
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: PUSH
24635: LD_INT 0
24637: PUSH
24638: LD_INT 1
24640: NEG
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PUSH
24646: LD_INT 1
24648: PUSH
24649: LD_INT 0
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PUSH
24656: LD_INT 1
24658: PUSH
24659: LD_INT 1
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: PUSH
24666: LD_INT 0
24668: PUSH
24669: LD_INT 1
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: PUSH
24676: LD_INT 1
24678: NEG
24679: PUSH
24680: LD_INT 0
24682: PUSH
24683: EMPTY
24684: LIST
24685: LIST
24686: PUSH
24687: LD_INT 1
24689: NEG
24690: PUSH
24691: LD_INT 1
24693: NEG
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: PUSH
24699: LD_INT 1
24701: NEG
24702: PUSH
24703: LD_INT 2
24705: NEG
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: LD_INT 0
24713: PUSH
24714: LD_INT 2
24716: NEG
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: PUSH
24722: LD_INT 1
24724: PUSH
24725: LD_INT 1
24727: NEG
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: PUSH
24733: LD_INT 2
24735: PUSH
24736: LD_INT 1
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PUSH
24743: LD_INT 2
24745: PUSH
24746: LD_INT 2
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PUSH
24753: LD_INT 1
24755: PUSH
24756: LD_INT 2
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 0
24765: PUSH
24766: LD_INT 2
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: LD_INT 1
24775: NEG
24776: PUSH
24777: LD_INT 1
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: PUSH
24784: LD_INT 2
24786: NEG
24787: PUSH
24788: LD_INT 1
24790: NEG
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: PUSH
24796: LD_INT 2
24798: NEG
24799: PUSH
24800: LD_INT 2
24802: NEG
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 2
24810: NEG
24811: PUSH
24812: LD_INT 3
24814: NEG
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: PUSH
24820: LD_INT 1
24822: NEG
24823: PUSH
24824: LD_INT 3
24826: NEG
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PUSH
24832: LD_INT 0
24834: PUSH
24835: LD_INT 3
24837: NEG
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: PUSH
24843: LD_INT 1
24845: PUSH
24846: LD_INT 2
24848: NEG
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: PUSH
24854: LD_INT 3
24856: PUSH
24857: LD_INT 2
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: PUSH
24864: LD_INT 3
24866: PUSH
24867: LD_INT 3
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: PUSH
24874: LD_INT 2
24876: PUSH
24877: LD_INT 3
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PUSH
24884: LD_INT 1
24886: PUSH
24887: LD_INT 3
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PUSH
24894: LD_INT 0
24896: PUSH
24897: LD_INT 3
24899: PUSH
24900: EMPTY
24901: LIST
24902: LIST
24903: PUSH
24904: LD_INT 1
24906: NEG
24907: PUSH
24908: LD_INT 2
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: LD_INT 3
24917: NEG
24918: PUSH
24919: LD_INT 2
24921: NEG
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: PUSH
24927: LD_INT 3
24929: NEG
24930: PUSH
24931: LD_INT 3
24933: NEG
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24970: LD_ADDR_VAR 0 43
24974: PUSH
24975: LD_INT 0
24977: PUSH
24978: LD_INT 0
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: PUSH
24985: LD_INT 0
24987: PUSH
24988: LD_INT 1
24990: NEG
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: PUSH
24996: LD_INT 1
24998: PUSH
24999: LD_INT 0
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: PUSH
25006: LD_INT 1
25008: PUSH
25009: LD_INT 1
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: LD_INT 0
25018: PUSH
25019: LD_INT 1
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: PUSH
25026: LD_INT 1
25028: NEG
25029: PUSH
25030: LD_INT 0
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: PUSH
25037: LD_INT 1
25039: NEG
25040: PUSH
25041: LD_INT 1
25043: NEG
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: PUSH
25049: LD_INT 1
25051: NEG
25052: PUSH
25053: LD_INT 2
25055: NEG
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: PUSH
25061: LD_INT 0
25063: PUSH
25064: LD_INT 2
25066: NEG
25067: PUSH
25068: EMPTY
25069: LIST
25070: LIST
25071: PUSH
25072: LD_INT 1
25074: PUSH
25075: LD_INT 1
25077: NEG
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: PUSH
25083: LD_INT 2
25085: PUSH
25086: LD_INT 0
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PUSH
25093: LD_INT 2
25095: PUSH
25096: LD_INT 1
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: PUSH
25103: LD_INT 1
25105: PUSH
25106: LD_INT 2
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: PUSH
25113: LD_INT 0
25115: PUSH
25116: LD_INT 2
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: PUSH
25123: LD_INT 1
25125: NEG
25126: PUSH
25127: LD_INT 1
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: PUSH
25134: LD_INT 2
25136: NEG
25137: PUSH
25138: LD_INT 0
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: PUSH
25145: LD_INT 2
25147: NEG
25148: PUSH
25149: LD_INT 1
25151: NEG
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: PUSH
25157: LD_INT 1
25159: NEG
25160: PUSH
25161: LD_INT 3
25163: NEG
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: LD_INT 0
25171: PUSH
25172: LD_INT 3
25174: NEG
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: PUSH
25180: LD_INT 1
25182: PUSH
25183: LD_INT 2
25185: NEG
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: PUSH
25191: LD_INT 2
25193: PUSH
25194: LD_INT 1
25196: NEG
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PUSH
25202: LD_INT 3
25204: PUSH
25205: LD_INT 0
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: PUSH
25212: LD_INT 3
25214: PUSH
25215: LD_INT 1
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PUSH
25222: LD_INT 1
25224: PUSH
25225: LD_INT 3
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: PUSH
25232: LD_INT 0
25234: PUSH
25235: LD_INT 3
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PUSH
25242: LD_INT 1
25244: NEG
25245: PUSH
25246: LD_INT 2
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: PUSH
25253: LD_INT 2
25255: NEG
25256: PUSH
25257: LD_INT 1
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: PUSH
25264: LD_INT 3
25266: NEG
25267: PUSH
25268: LD_INT 0
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PUSH
25275: LD_INT 3
25277: NEG
25278: PUSH
25279: LD_INT 1
25281: NEG
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25318: LD_ADDR_VAR 0 44
25322: PUSH
25323: LD_INT 0
25325: PUSH
25326: LD_INT 0
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PUSH
25333: LD_INT 0
25335: PUSH
25336: LD_INT 1
25338: NEG
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: PUSH
25344: LD_INT 1
25346: PUSH
25347: LD_INT 0
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PUSH
25354: LD_INT 1
25356: PUSH
25357: LD_INT 1
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PUSH
25364: LD_INT 0
25366: PUSH
25367: LD_INT 1
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: PUSH
25374: LD_INT 1
25376: NEG
25377: PUSH
25378: LD_INT 0
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: PUSH
25385: LD_INT 1
25387: NEG
25388: PUSH
25389: LD_INT 1
25391: NEG
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PUSH
25397: LD_INT 1
25399: NEG
25400: PUSH
25401: LD_INT 2
25403: NEG
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PUSH
25409: LD_INT 1
25411: PUSH
25412: LD_INT 1
25414: NEG
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PUSH
25420: LD_INT 2
25422: PUSH
25423: LD_INT 0
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: PUSH
25430: LD_INT 2
25432: PUSH
25433: LD_INT 1
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 2
25442: PUSH
25443: LD_INT 2
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PUSH
25450: LD_INT 1
25452: PUSH
25453: LD_INT 2
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: LD_INT 1
25462: NEG
25463: PUSH
25464: LD_INT 1
25466: PUSH
25467: EMPTY
25468: LIST
25469: LIST
25470: PUSH
25471: LD_INT 2
25473: NEG
25474: PUSH
25475: LD_INT 0
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: PUSH
25482: LD_INT 2
25484: NEG
25485: PUSH
25486: LD_INT 1
25488: NEG
25489: PUSH
25490: EMPTY
25491: LIST
25492: LIST
25493: PUSH
25494: LD_INT 2
25496: NEG
25497: PUSH
25498: LD_INT 2
25500: NEG
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: PUSH
25506: LD_INT 2
25508: NEG
25509: PUSH
25510: LD_INT 3
25512: NEG
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: PUSH
25518: LD_INT 2
25520: PUSH
25521: LD_INT 1
25523: NEG
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: LD_INT 3
25531: PUSH
25532: LD_INT 0
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: PUSH
25539: LD_INT 3
25541: PUSH
25542: LD_INT 1
25544: PUSH
25545: EMPTY
25546: LIST
25547: LIST
25548: PUSH
25549: LD_INT 3
25551: PUSH
25552: LD_INT 2
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: PUSH
25559: LD_INT 3
25561: PUSH
25562: LD_INT 3
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: LD_INT 2
25571: PUSH
25572: LD_INT 3
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: LD_INT 2
25581: NEG
25582: PUSH
25583: LD_INT 1
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: PUSH
25590: LD_INT 3
25592: NEG
25593: PUSH
25594: LD_INT 0
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: PUSH
25601: LD_INT 3
25603: NEG
25604: PUSH
25605: LD_INT 1
25607: NEG
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: PUSH
25613: LD_INT 3
25615: NEG
25616: PUSH
25617: LD_INT 2
25619: NEG
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: LD_INT 3
25627: NEG
25628: PUSH
25629: LD_INT 3
25631: NEG
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: LIST
25664: LIST
25665: LIST
25666: LIST
25667: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25668: LD_ADDR_VAR 0 45
25672: PUSH
25673: LD_INT 0
25675: PUSH
25676: LD_INT 0
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: PUSH
25683: LD_INT 0
25685: PUSH
25686: LD_INT 1
25688: NEG
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PUSH
25694: LD_INT 1
25696: PUSH
25697: LD_INT 0
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 1
25706: PUSH
25707: LD_INT 1
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: LD_INT 0
25716: PUSH
25717: LD_INT 1
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: PUSH
25724: LD_INT 1
25726: NEG
25727: PUSH
25728: LD_INT 0
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: PUSH
25735: LD_INT 1
25737: NEG
25738: PUSH
25739: LD_INT 1
25741: NEG
25742: PUSH
25743: EMPTY
25744: LIST
25745: LIST
25746: PUSH
25747: LD_INT 1
25749: NEG
25750: PUSH
25751: LD_INT 2
25753: NEG
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: LD_INT 0
25761: PUSH
25762: LD_INT 2
25764: NEG
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PUSH
25770: LD_INT 1
25772: PUSH
25773: LD_INT 1
25775: NEG
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PUSH
25781: LD_INT 2
25783: PUSH
25784: LD_INT 1
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: PUSH
25791: LD_INT 2
25793: PUSH
25794: LD_INT 2
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: LD_INT 1
25803: PUSH
25804: LD_INT 2
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 0
25813: PUSH
25814: LD_INT 2
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PUSH
25821: LD_INT 1
25823: NEG
25824: PUSH
25825: LD_INT 1
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PUSH
25832: LD_INT 2
25834: NEG
25835: PUSH
25836: LD_INT 1
25838: NEG
25839: PUSH
25840: EMPTY
25841: LIST
25842: LIST
25843: PUSH
25844: LD_INT 2
25846: NEG
25847: PUSH
25848: LD_INT 2
25850: NEG
25851: PUSH
25852: EMPTY
25853: LIST
25854: LIST
25855: PUSH
25856: LD_INT 2
25858: NEG
25859: PUSH
25860: LD_INT 3
25862: NEG
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: PUSH
25868: LD_INT 1
25870: NEG
25871: PUSH
25872: LD_INT 3
25874: NEG
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PUSH
25880: LD_INT 0
25882: PUSH
25883: LD_INT 3
25885: NEG
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PUSH
25891: LD_INT 1
25893: PUSH
25894: LD_INT 2
25896: NEG
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: LD_INT 3
25904: PUSH
25905: LD_INT 2
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: PUSH
25912: LD_INT 3
25914: PUSH
25915: LD_INT 3
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: PUSH
25922: LD_INT 2
25924: PUSH
25925: LD_INT 3
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: LD_INT 1
25934: PUSH
25935: LD_INT 3
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: PUSH
25942: LD_INT 0
25944: PUSH
25945: LD_INT 3
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PUSH
25952: LD_INT 1
25954: NEG
25955: PUSH
25956: LD_INT 2
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: LD_INT 3
25965: NEG
25966: PUSH
25967: LD_INT 2
25969: NEG
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PUSH
25975: LD_INT 3
25977: NEG
25978: PUSH
25979: LD_INT 3
25981: NEG
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: LIST
25991: LIST
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26018: LD_ADDR_VAR 0 46
26022: PUSH
26023: LD_INT 0
26025: PUSH
26026: LD_INT 0
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: PUSH
26033: LD_INT 0
26035: PUSH
26036: LD_INT 1
26038: NEG
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: PUSH
26044: LD_INT 1
26046: PUSH
26047: LD_INT 0
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: LD_INT 1
26056: PUSH
26057: LD_INT 1
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 0
26066: PUSH
26067: LD_INT 1
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: PUSH
26074: LD_INT 1
26076: NEG
26077: PUSH
26078: LD_INT 0
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: PUSH
26085: LD_INT 1
26087: NEG
26088: PUSH
26089: LD_INT 1
26091: NEG
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: PUSH
26097: LD_INT 1
26099: NEG
26100: PUSH
26101: LD_INT 2
26103: NEG
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: PUSH
26109: LD_INT 0
26111: PUSH
26112: LD_INT 2
26114: NEG
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 1
26122: PUSH
26123: LD_INT 1
26125: NEG
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 2
26133: PUSH
26134: LD_INT 0
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 2
26143: PUSH
26144: LD_INT 1
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 1
26153: PUSH
26154: LD_INT 2
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: PUSH
26161: LD_INT 0
26163: PUSH
26164: LD_INT 2
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: PUSH
26171: LD_INT 1
26173: NEG
26174: PUSH
26175: LD_INT 1
26177: PUSH
26178: EMPTY
26179: LIST
26180: LIST
26181: PUSH
26182: LD_INT 2
26184: NEG
26185: PUSH
26186: LD_INT 0
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: PUSH
26193: LD_INT 2
26195: NEG
26196: PUSH
26197: LD_INT 1
26199: NEG
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: PUSH
26205: LD_INT 1
26207: NEG
26208: PUSH
26209: LD_INT 3
26211: NEG
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PUSH
26217: LD_INT 0
26219: PUSH
26220: LD_INT 3
26222: NEG
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PUSH
26228: LD_INT 1
26230: PUSH
26231: LD_INT 2
26233: NEG
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: LD_INT 2
26241: PUSH
26242: LD_INT 1
26244: NEG
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: PUSH
26250: LD_INT 3
26252: PUSH
26253: LD_INT 0
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: PUSH
26260: LD_INT 3
26262: PUSH
26263: LD_INT 1
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: PUSH
26270: LD_INT 1
26272: PUSH
26273: LD_INT 3
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: PUSH
26280: LD_INT 0
26282: PUSH
26283: LD_INT 3
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: PUSH
26290: LD_INT 1
26292: NEG
26293: PUSH
26294: LD_INT 2
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PUSH
26301: LD_INT 2
26303: NEG
26304: PUSH
26305: LD_INT 1
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: PUSH
26312: LD_INT 3
26314: NEG
26315: PUSH
26316: LD_INT 0
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: LD_INT 3
26325: NEG
26326: PUSH
26327: LD_INT 1
26329: NEG
26330: PUSH
26331: EMPTY
26332: LIST
26333: LIST
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26366: LD_ADDR_VAR 0 47
26370: PUSH
26371: LD_INT 0
26373: PUSH
26374: LD_INT 0
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: LD_INT 0
26383: PUSH
26384: LD_INT 1
26386: NEG
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: PUSH
26392: LD_INT 1
26394: PUSH
26395: LD_INT 0
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: PUSH
26402: LD_INT 1
26404: PUSH
26405: LD_INT 1
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: PUSH
26412: LD_INT 0
26414: PUSH
26415: LD_INT 1
26417: PUSH
26418: EMPTY
26419: LIST
26420: LIST
26421: PUSH
26422: LD_INT 1
26424: NEG
26425: PUSH
26426: LD_INT 0
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PUSH
26433: LD_INT 1
26435: NEG
26436: PUSH
26437: LD_INT 1
26439: NEG
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PUSH
26445: LD_INT 1
26447: NEG
26448: PUSH
26449: LD_INT 2
26451: NEG
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: PUSH
26457: LD_INT 0
26459: PUSH
26460: LD_INT 2
26462: NEG
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PUSH
26468: LD_INT 1
26470: PUSH
26471: LD_INT 1
26473: NEG
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: PUSH
26479: LD_INT 2
26481: NEG
26482: PUSH
26483: LD_INT 1
26485: NEG
26486: PUSH
26487: EMPTY
26488: LIST
26489: LIST
26490: PUSH
26491: LD_INT 2
26493: NEG
26494: PUSH
26495: LD_INT 2
26497: NEG
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26517: LD_ADDR_VAR 0 48
26521: PUSH
26522: LD_INT 0
26524: PUSH
26525: LD_INT 0
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: LD_INT 0
26534: PUSH
26535: LD_INT 1
26537: NEG
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: LD_INT 1
26545: PUSH
26546: LD_INT 0
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: PUSH
26553: LD_INT 1
26555: PUSH
26556: LD_INT 1
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: LD_INT 0
26565: PUSH
26566: LD_INT 1
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: PUSH
26573: LD_INT 1
26575: NEG
26576: PUSH
26577: LD_INT 0
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: PUSH
26584: LD_INT 1
26586: NEG
26587: PUSH
26588: LD_INT 1
26590: NEG
26591: PUSH
26592: EMPTY
26593: LIST
26594: LIST
26595: PUSH
26596: LD_INT 1
26598: NEG
26599: PUSH
26600: LD_INT 2
26602: NEG
26603: PUSH
26604: EMPTY
26605: LIST
26606: LIST
26607: PUSH
26608: LD_INT 0
26610: PUSH
26611: LD_INT 2
26613: NEG
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: PUSH
26619: LD_INT 1
26621: PUSH
26622: LD_INT 1
26624: NEG
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: PUSH
26630: LD_INT 2
26632: PUSH
26633: LD_INT 0
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: PUSH
26640: LD_INT 2
26642: PUSH
26643: LD_INT 1
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26664: LD_ADDR_VAR 0 49
26668: PUSH
26669: LD_INT 0
26671: PUSH
26672: LD_INT 0
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: PUSH
26679: LD_INT 0
26681: PUSH
26682: LD_INT 1
26684: NEG
26685: PUSH
26686: EMPTY
26687: LIST
26688: LIST
26689: PUSH
26690: LD_INT 1
26692: PUSH
26693: LD_INT 0
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: PUSH
26700: LD_INT 1
26702: PUSH
26703: LD_INT 1
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: PUSH
26710: LD_INT 0
26712: PUSH
26713: LD_INT 1
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: PUSH
26720: LD_INT 1
26722: NEG
26723: PUSH
26724: LD_INT 0
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PUSH
26731: LD_INT 1
26733: NEG
26734: PUSH
26735: LD_INT 1
26737: NEG
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PUSH
26743: LD_INT 1
26745: PUSH
26746: LD_INT 1
26748: NEG
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: LD_INT 2
26756: PUSH
26757: LD_INT 0
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: PUSH
26764: LD_INT 2
26766: PUSH
26767: LD_INT 1
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: LD_INT 2
26776: PUSH
26777: LD_INT 2
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: PUSH
26784: LD_INT 1
26786: PUSH
26787: LD_INT 2
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26808: LD_ADDR_VAR 0 50
26812: PUSH
26813: LD_INT 0
26815: PUSH
26816: LD_INT 0
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: LD_INT 0
26825: PUSH
26826: LD_INT 1
26828: NEG
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: LD_INT 1
26836: PUSH
26837: LD_INT 0
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PUSH
26844: LD_INT 1
26846: PUSH
26847: LD_INT 1
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PUSH
26854: LD_INT 0
26856: PUSH
26857: LD_INT 1
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: PUSH
26864: LD_INT 1
26866: NEG
26867: PUSH
26868: LD_INT 0
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: PUSH
26875: LD_INT 1
26877: NEG
26878: PUSH
26879: LD_INT 1
26881: NEG
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PUSH
26887: LD_INT 2
26889: PUSH
26890: LD_INT 1
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: LD_INT 2
26899: PUSH
26900: LD_INT 2
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: PUSH
26907: LD_INT 1
26909: PUSH
26910: LD_INT 2
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: PUSH
26917: LD_INT 0
26919: PUSH
26920: LD_INT 2
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PUSH
26927: LD_INT 1
26929: NEG
26930: PUSH
26931: LD_INT 1
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26952: LD_ADDR_VAR 0 51
26956: PUSH
26957: LD_INT 0
26959: PUSH
26960: LD_INT 0
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PUSH
26967: LD_INT 0
26969: PUSH
26970: LD_INT 1
26972: NEG
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: PUSH
26978: LD_INT 1
26980: PUSH
26981: LD_INT 0
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: PUSH
26988: LD_INT 1
26990: PUSH
26991: LD_INT 1
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: PUSH
26998: LD_INT 0
27000: PUSH
27001: LD_INT 1
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: PUSH
27008: LD_INT 1
27010: NEG
27011: PUSH
27012: LD_INT 0
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: LD_INT 1
27021: NEG
27022: PUSH
27023: LD_INT 1
27025: NEG
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PUSH
27031: LD_INT 1
27033: PUSH
27034: LD_INT 2
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: PUSH
27041: LD_INT 0
27043: PUSH
27044: LD_INT 2
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: LD_INT 1
27053: NEG
27054: PUSH
27055: LD_INT 1
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: PUSH
27062: LD_INT 2
27064: NEG
27065: PUSH
27066: LD_INT 0
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: PUSH
27073: LD_INT 2
27075: NEG
27076: PUSH
27077: LD_INT 1
27079: NEG
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: LIST
27089: LIST
27090: LIST
27091: LIST
27092: LIST
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27099: LD_ADDR_VAR 0 52
27103: PUSH
27104: LD_INT 0
27106: PUSH
27107: LD_INT 0
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: PUSH
27114: LD_INT 0
27116: PUSH
27117: LD_INT 1
27119: NEG
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: PUSH
27125: LD_INT 1
27127: PUSH
27128: LD_INT 0
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: LD_INT 1
27137: PUSH
27138: LD_INT 1
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: PUSH
27145: LD_INT 0
27147: PUSH
27148: LD_INT 1
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: PUSH
27155: LD_INT 1
27157: NEG
27158: PUSH
27159: LD_INT 0
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: LD_INT 1
27168: NEG
27169: PUSH
27170: LD_INT 1
27172: NEG
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: PUSH
27178: LD_INT 1
27180: NEG
27181: PUSH
27182: LD_INT 2
27184: NEG
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: PUSH
27190: LD_INT 1
27192: NEG
27193: PUSH
27194: LD_INT 1
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: PUSH
27201: LD_INT 2
27203: NEG
27204: PUSH
27205: LD_INT 0
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PUSH
27212: LD_INT 2
27214: NEG
27215: PUSH
27216: LD_INT 1
27218: NEG
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: PUSH
27224: LD_INT 2
27226: NEG
27227: PUSH
27228: LD_INT 2
27230: NEG
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27250: LD_ADDR_VAR 0 53
27254: PUSH
27255: LD_INT 0
27257: PUSH
27258: LD_INT 0
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: LD_INT 0
27267: PUSH
27268: LD_INT 1
27270: NEG
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: LD_INT 1
27278: PUSH
27279: LD_INT 0
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: LD_INT 1
27288: PUSH
27289: LD_INT 1
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PUSH
27296: LD_INT 0
27298: PUSH
27299: LD_INT 1
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 1
27308: NEG
27309: PUSH
27310: LD_INT 0
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: LD_INT 1
27319: NEG
27320: PUSH
27321: LD_INT 1
27323: NEG
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PUSH
27329: LD_INT 1
27331: NEG
27332: PUSH
27333: LD_INT 2
27335: NEG
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 0
27343: PUSH
27344: LD_INT 2
27346: NEG
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: LD_INT 1
27354: PUSH
27355: LD_INT 1
27357: NEG
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: LD_INT 2
27365: PUSH
27366: LD_INT 0
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: PUSH
27373: LD_INT 2
27375: PUSH
27376: LD_INT 1
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: PUSH
27383: LD_INT 2
27385: PUSH
27386: LD_INT 2
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PUSH
27393: LD_INT 1
27395: PUSH
27396: LD_INT 2
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PUSH
27403: LD_INT 0
27405: PUSH
27406: LD_INT 2
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: LD_INT 1
27415: NEG
27416: PUSH
27417: LD_INT 1
27419: PUSH
27420: EMPTY
27421: LIST
27422: LIST
27423: PUSH
27424: LD_INT 2
27426: NEG
27427: PUSH
27428: LD_INT 0
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: PUSH
27435: LD_INT 2
27437: NEG
27438: PUSH
27439: LD_INT 1
27441: NEG
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: PUSH
27447: LD_INT 2
27449: NEG
27450: PUSH
27451: LD_INT 2
27453: NEG
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: LIST
27465: LIST
27466: LIST
27467: LIST
27468: LIST
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27480: LD_ADDR_VAR 0 54
27484: PUSH
27485: LD_INT 0
27487: PUSH
27488: LD_INT 0
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: LD_INT 0
27497: PUSH
27498: LD_INT 1
27500: NEG
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PUSH
27506: LD_INT 1
27508: PUSH
27509: LD_INT 0
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: LD_INT 1
27518: PUSH
27519: LD_INT 1
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: PUSH
27526: LD_INT 0
27528: PUSH
27529: LD_INT 1
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: PUSH
27536: LD_INT 1
27538: NEG
27539: PUSH
27540: LD_INT 0
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: PUSH
27547: LD_INT 1
27549: NEG
27550: PUSH
27551: LD_INT 1
27553: NEG
27554: PUSH
27555: EMPTY
27556: LIST
27557: LIST
27558: PUSH
27559: LD_INT 1
27561: NEG
27562: PUSH
27563: LD_INT 2
27565: NEG
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PUSH
27571: LD_INT 0
27573: PUSH
27574: LD_INT 2
27576: NEG
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: LD_INT 1
27584: PUSH
27585: LD_INT 1
27587: NEG
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: PUSH
27593: LD_INT 2
27595: PUSH
27596: LD_INT 0
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 2
27605: PUSH
27606: LD_INT 1
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 2
27615: PUSH
27616: LD_INT 2
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PUSH
27623: LD_INT 1
27625: PUSH
27626: LD_INT 2
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: PUSH
27633: LD_INT 0
27635: PUSH
27636: LD_INT 2
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: LD_INT 1
27645: NEG
27646: PUSH
27647: LD_INT 1
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: PUSH
27654: LD_INT 2
27656: NEG
27657: PUSH
27658: LD_INT 0
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: LD_INT 2
27667: NEG
27668: PUSH
27669: LD_INT 1
27671: NEG
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PUSH
27677: LD_INT 2
27679: NEG
27680: PUSH
27681: LD_INT 2
27683: NEG
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27710: LD_ADDR_VAR 0 55
27714: PUSH
27715: LD_INT 0
27717: PUSH
27718: LD_INT 0
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: PUSH
27725: LD_INT 0
27727: PUSH
27728: LD_INT 1
27730: NEG
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: LD_INT 1
27738: PUSH
27739: LD_INT 0
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: PUSH
27746: LD_INT 1
27748: PUSH
27749: LD_INT 1
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: PUSH
27756: LD_INT 0
27758: PUSH
27759: LD_INT 1
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PUSH
27766: LD_INT 1
27768: NEG
27769: PUSH
27770: LD_INT 0
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: PUSH
27777: LD_INT 1
27779: NEG
27780: PUSH
27781: LD_INT 1
27783: NEG
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: PUSH
27789: LD_INT 1
27791: NEG
27792: PUSH
27793: LD_INT 2
27795: NEG
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 0
27803: PUSH
27804: LD_INT 2
27806: NEG
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: PUSH
27812: LD_INT 1
27814: PUSH
27815: LD_INT 1
27817: NEG
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: PUSH
27823: LD_INT 2
27825: PUSH
27826: LD_INT 0
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: PUSH
27833: LD_INT 2
27835: PUSH
27836: LD_INT 1
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: PUSH
27843: LD_INT 2
27845: PUSH
27846: LD_INT 2
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: PUSH
27853: LD_INT 1
27855: PUSH
27856: LD_INT 2
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 0
27865: PUSH
27866: LD_INT 2
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 1
27875: NEG
27876: PUSH
27877: LD_INT 1
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: PUSH
27884: LD_INT 2
27886: NEG
27887: PUSH
27888: LD_INT 0
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: LD_INT 2
27897: NEG
27898: PUSH
27899: LD_INT 1
27901: NEG
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: PUSH
27907: LD_INT 2
27909: NEG
27910: PUSH
27911: LD_INT 2
27913: NEG
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27940: LD_ADDR_VAR 0 56
27944: PUSH
27945: LD_INT 0
27947: PUSH
27948: LD_INT 0
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: PUSH
27955: LD_INT 0
27957: PUSH
27958: LD_INT 1
27960: NEG
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: PUSH
27966: LD_INT 1
27968: PUSH
27969: LD_INT 0
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: PUSH
27976: LD_INT 1
27978: PUSH
27979: LD_INT 1
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: PUSH
27986: LD_INT 0
27988: PUSH
27989: LD_INT 1
27991: PUSH
27992: EMPTY
27993: LIST
27994: LIST
27995: PUSH
27996: LD_INT 1
27998: NEG
27999: PUSH
28000: LD_INT 0
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: PUSH
28007: LD_INT 1
28009: NEG
28010: PUSH
28011: LD_INT 1
28013: NEG
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: LD_INT 1
28021: NEG
28022: PUSH
28023: LD_INT 2
28025: NEG
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: LD_INT 0
28033: PUSH
28034: LD_INT 2
28036: NEG
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: PUSH
28042: LD_INT 1
28044: PUSH
28045: LD_INT 1
28047: NEG
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PUSH
28053: LD_INT 2
28055: PUSH
28056: LD_INT 0
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: LD_INT 2
28065: PUSH
28066: LD_INT 1
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: PUSH
28073: LD_INT 2
28075: PUSH
28076: LD_INT 2
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 1
28085: PUSH
28086: LD_INT 2
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: PUSH
28093: LD_INT 0
28095: PUSH
28096: LD_INT 2
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: LD_INT 1
28105: NEG
28106: PUSH
28107: LD_INT 1
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: PUSH
28114: LD_INT 2
28116: NEG
28117: PUSH
28118: LD_INT 0
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: LD_INT 2
28127: NEG
28128: PUSH
28129: LD_INT 1
28131: NEG
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: LD_INT 2
28139: NEG
28140: PUSH
28141: LD_INT 2
28143: NEG
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: LIST
28153: LIST
28154: LIST
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28170: LD_ADDR_VAR 0 57
28174: PUSH
28175: LD_INT 0
28177: PUSH
28178: LD_INT 0
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: PUSH
28185: LD_INT 0
28187: PUSH
28188: LD_INT 1
28190: NEG
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: LD_INT 1
28198: PUSH
28199: LD_INT 0
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: LD_INT 1
28208: PUSH
28209: LD_INT 1
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: LD_INT 0
28218: PUSH
28219: LD_INT 1
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: PUSH
28226: LD_INT 1
28228: NEG
28229: PUSH
28230: LD_INT 0
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: LD_INT 1
28239: NEG
28240: PUSH
28241: LD_INT 1
28243: NEG
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 1
28251: NEG
28252: PUSH
28253: LD_INT 2
28255: NEG
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PUSH
28261: LD_INT 0
28263: PUSH
28264: LD_INT 2
28266: NEG
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PUSH
28272: LD_INT 1
28274: PUSH
28275: LD_INT 1
28277: NEG
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: PUSH
28283: LD_INT 2
28285: PUSH
28286: LD_INT 0
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: PUSH
28293: LD_INT 2
28295: PUSH
28296: LD_INT 1
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PUSH
28303: LD_INT 2
28305: PUSH
28306: LD_INT 2
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: LD_INT 1
28315: PUSH
28316: LD_INT 2
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: PUSH
28323: LD_INT 0
28325: PUSH
28326: LD_INT 2
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: LD_INT 1
28335: NEG
28336: PUSH
28337: LD_INT 1
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: LD_INT 2
28346: NEG
28347: PUSH
28348: LD_INT 0
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: LD_INT 2
28357: NEG
28358: PUSH
28359: LD_INT 1
28361: NEG
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: LD_INT 2
28369: NEG
28370: PUSH
28371: LD_INT 2
28373: NEG
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: LIST
28397: LIST
28398: LIST
28399: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28400: LD_ADDR_VAR 0 58
28404: PUSH
28405: LD_INT 0
28407: PUSH
28408: LD_INT 0
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: PUSH
28415: LD_INT 0
28417: PUSH
28418: LD_INT 1
28420: NEG
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PUSH
28426: LD_INT 1
28428: PUSH
28429: LD_INT 0
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: LD_INT 1
28438: PUSH
28439: LD_INT 1
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: PUSH
28446: LD_INT 0
28448: PUSH
28449: LD_INT 1
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: PUSH
28456: LD_INT 1
28458: NEG
28459: PUSH
28460: LD_INT 0
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: PUSH
28467: LD_INT 1
28469: NEG
28470: PUSH
28471: LD_INT 1
28473: NEG
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: LD_INT 1
28481: NEG
28482: PUSH
28483: LD_INT 2
28485: NEG
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: LD_INT 0
28493: PUSH
28494: LD_INT 2
28496: NEG
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: PUSH
28502: LD_INT 1
28504: PUSH
28505: LD_INT 1
28507: NEG
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PUSH
28513: LD_INT 2
28515: PUSH
28516: LD_INT 0
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: PUSH
28523: LD_INT 2
28525: PUSH
28526: LD_INT 1
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: PUSH
28533: LD_INT 2
28535: PUSH
28536: LD_INT 2
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: LD_INT 1
28545: PUSH
28546: LD_INT 2
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: LD_INT 0
28555: PUSH
28556: LD_INT 2
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 1
28565: NEG
28566: PUSH
28567: LD_INT 1
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PUSH
28574: LD_INT 2
28576: NEG
28577: PUSH
28578: LD_INT 0
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PUSH
28585: LD_INT 2
28587: NEG
28588: PUSH
28589: LD_INT 1
28591: NEG
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: LD_INT 2
28599: NEG
28600: PUSH
28601: LD_INT 2
28603: NEG
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: LIST
28615: LIST
28616: LIST
28617: LIST
28618: LIST
28619: LIST
28620: LIST
28621: LIST
28622: LIST
28623: LIST
28624: LIST
28625: LIST
28626: LIST
28627: LIST
28628: LIST
28629: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28630: LD_ADDR_VAR 0 59
28634: PUSH
28635: LD_INT 0
28637: PUSH
28638: LD_INT 0
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 0
28647: PUSH
28648: LD_INT 1
28650: NEG
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: PUSH
28656: LD_INT 1
28658: PUSH
28659: LD_INT 0
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: PUSH
28666: LD_INT 1
28668: PUSH
28669: LD_INT 1
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: PUSH
28676: LD_INT 0
28678: PUSH
28679: LD_INT 1
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: PUSH
28686: LD_INT 1
28688: NEG
28689: PUSH
28690: LD_INT 0
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PUSH
28697: LD_INT 1
28699: NEG
28700: PUSH
28701: LD_INT 1
28703: NEG
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: LIST
28713: LIST
28714: LIST
28715: LIST
28716: LIST
28717: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28718: LD_ADDR_VAR 0 60
28722: PUSH
28723: LD_INT 0
28725: PUSH
28726: LD_INT 0
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: LD_INT 0
28735: PUSH
28736: LD_INT 1
28738: NEG
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: PUSH
28744: LD_INT 1
28746: PUSH
28747: LD_INT 0
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: PUSH
28754: LD_INT 1
28756: PUSH
28757: LD_INT 1
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PUSH
28764: LD_INT 0
28766: PUSH
28767: LD_INT 1
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PUSH
28774: LD_INT 1
28776: NEG
28777: PUSH
28778: LD_INT 0
28780: PUSH
28781: EMPTY
28782: LIST
28783: LIST
28784: PUSH
28785: LD_INT 1
28787: NEG
28788: PUSH
28789: LD_INT 1
28791: NEG
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: LIST
28801: LIST
28802: LIST
28803: LIST
28804: LIST
28805: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28806: LD_ADDR_VAR 0 61
28810: PUSH
28811: LD_INT 0
28813: PUSH
28814: LD_INT 0
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: PUSH
28821: LD_INT 0
28823: PUSH
28824: LD_INT 1
28826: NEG
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: LD_INT 1
28834: PUSH
28835: LD_INT 0
28837: PUSH
28838: EMPTY
28839: LIST
28840: LIST
28841: PUSH
28842: LD_INT 1
28844: PUSH
28845: LD_INT 1
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: PUSH
28852: LD_INT 0
28854: PUSH
28855: LD_INT 1
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: LD_INT 1
28864: NEG
28865: PUSH
28866: LD_INT 0
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PUSH
28873: LD_INT 1
28875: NEG
28876: PUSH
28877: LD_INT 1
28879: NEG
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: LIST
28892: LIST
28893: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28894: LD_ADDR_VAR 0 62
28898: PUSH
28899: LD_INT 0
28901: PUSH
28902: LD_INT 0
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: LD_INT 0
28911: PUSH
28912: LD_INT 1
28914: NEG
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PUSH
28920: LD_INT 1
28922: PUSH
28923: LD_INT 0
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: LD_INT 1
28932: PUSH
28933: LD_INT 1
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: PUSH
28940: LD_INT 0
28942: PUSH
28943: LD_INT 1
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: PUSH
28950: LD_INT 1
28952: NEG
28953: PUSH
28954: LD_INT 0
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PUSH
28961: LD_INT 1
28963: NEG
28964: PUSH
28965: LD_INT 1
28967: NEG
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: LIST
28977: LIST
28978: LIST
28979: LIST
28980: LIST
28981: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28982: LD_ADDR_VAR 0 63
28986: PUSH
28987: LD_INT 0
28989: PUSH
28990: LD_INT 0
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: LD_INT 0
28999: PUSH
29000: LD_INT 1
29002: NEG
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: LD_INT 1
29010: PUSH
29011: LD_INT 0
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: PUSH
29018: LD_INT 1
29020: PUSH
29021: LD_INT 1
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: LD_INT 0
29030: PUSH
29031: LD_INT 1
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PUSH
29038: LD_INT 1
29040: NEG
29041: PUSH
29042: LD_INT 0
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: LD_INT 1
29051: NEG
29052: PUSH
29053: LD_INT 1
29055: NEG
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29070: LD_ADDR_VAR 0 64
29074: PUSH
29075: LD_INT 0
29077: PUSH
29078: LD_INT 0
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PUSH
29085: LD_INT 0
29087: PUSH
29088: LD_INT 1
29090: NEG
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: PUSH
29096: LD_INT 1
29098: PUSH
29099: LD_INT 0
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: PUSH
29106: LD_INT 1
29108: PUSH
29109: LD_INT 1
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: PUSH
29116: LD_INT 0
29118: PUSH
29119: LD_INT 1
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: PUSH
29126: LD_INT 1
29128: NEG
29129: PUSH
29130: LD_INT 0
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: PUSH
29137: LD_INT 1
29139: NEG
29140: PUSH
29141: LD_INT 1
29143: NEG
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: ST_TO_ADDR
// end ; 1 :
29158: GO 35055
29160: LD_INT 1
29162: DOUBLE
29163: EQUAL
29164: IFTRUE 29168
29166: GO 31791
29168: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29169: LD_ADDR_VAR 0 11
29173: PUSH
29174: LD_INT 1
29176: NEG
29177: PUSH
29178: LD_INT 3
29180: NEG
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PUSH
29186: LD_INT 0
29188: PUSH
29189: LD_INT 3
29191: NEG
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: LD_INT 1
29199: PUSH
29200: LD_INT 2
29202: NEG
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: LIST
29212: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29213: LD_ADDR_VAR 0 12
29217: PUSH
29218: LD_INT 2
29220: PUSH
29221: LD_INT 1
29223: NEG
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: LD_INT 3
29231: PUSH
29232: LD_INT 0
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: LD_INT 3
29241: PUSH
29242: LD_INT 1
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: LIST
29253: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29254: LD_ADDR_VAR 0 13
29258: PUSH
29259: LD_INT 3
29261: PUSH
29262: LD_INT 2
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: LD_INT 3
29271: PUSH
29272: LD_INT 3
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: LD_INT 2
29281: PUSH
29282: LD_INT 3
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: LIST
29293: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29294: LD_ADDR_VAR 0 14
29298: PUSH
29299: LD_INT 1
29301: PUSH
29302: LD_INT 3
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PUSH
29309: LD_INT 0
29311: PUSH
29312: LD_INT 3
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PUSH
29319: LD_INT 1
29321: NEG
29322: PUSH
29323: LD_INT 2
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: LIST
29334: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29335: LD_ADDR_VAR 0 15
29339: PUSH
29340: LD_INT 2
29342: NEG
29343: PUSH
29344: LD_INT 1
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: PUSH
29351: LD_INT 3
29353: NEG
29354: PUSH
29355: LD_INT 0
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: LD_INT 3
29364: NEG
29365: PUSH
29366: LD_INT 1
29368: NEG
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: LIST
29378: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29379: LD_ADDR_VAR 0 16
29383: PUSH
29384: LD_INT 2
29386: NEG
29387: PUSH
29388: LD_INT 3
29390: NEG
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: LD_INT 3
29398: NEG
29399: PUSH
29400: LD_INT 2
29402: NEG
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: PUSH
29408: LD_INT 3
29410: NEG
29411: PUSH
29412: LD_INT 3
29414: NEG
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: LIST
29424: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29425: LD_ADDR_VAR 0 17
29429: PUSH
29430: LD_INT 1
29432: NEG
29433: PUSH
29434: LD_INT 3
29436: NEG
29437: PUSH
29438: EMPTY
29439: LIST
29440: LIST
29441: PUSH
29442: LD_INT 0
29444: PUSH
29445: LD_INT 3
29447: NEG
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: PUSH
29453: LD_INT 1
29455: PUSH
29456: LD_INT 2
29458: NEG
29459: PUSH
29460: EMPTY
29461: LIST
29462: LIST
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: LIST
29468: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29469: LD_ADDR_VAR 0 18
29473: PUSH
29474: LD_INT 2
29476: PUSH
29477: LD_INT 1
29479: NEG
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: PUSH
29485: LD_INT 3
29487: PUSH
29488: LD_INT 0
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PUSH
29495: LD_INT 3
29497: PUSH
29498: LD_INT 1
29500: PUSH
29501: EMPTY
29502: LIST
29503: LIST
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: LIST
29509: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29510: LD_ADDR_VAR 0 19
29514: PUSH
29515: LD_INT 3
29517: PUSH
29518: LD_INT 2
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PUSH
29525: LD_INT 3
29527: PUSH
29528: LD_INT 3
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: LD_INT 2
29537: PUSH
29538: LD_INT 3
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: LIST
29549: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29550: LD_ADDR_VAR 0 20
29554: PUSH
29555: LD_INT 1
29557: PUSH
29558: LD_INT 3
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PUSH
29565: LD_INT 0
29567: PUSH
29568: LD_INT 3
29570: PUSH
29571: EMPTY
29572: LIST
29573: LIST
29574: PUSH
29575: LD_INT 1
29577: NEG
29578: PUSH
29579: LD_INT 2
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: LIST
29590: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29591: LD_ADDR_VAR 0 21
29595: PUSH
29596: LD_INT 2
29598: NEG
29599: PUSH
29600: LD_INT 1
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: PUSH
29607: LD_INT 3
29609: NEG
29610: PUSH
29611: LD_INT 0
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: PUSH
29618: LD_INT 3
29620: NEG
29621: PUSH
29622: LD_INT 1
29624: NEG
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: LIST
29634: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29635: LD_ADDR_VAR 0 22
29639: PUSH
29640: LD_INT 2
29642: NEG
29643: PUSH
29644: LD_INT 3
29646: NEG
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: PUSH
29652: LD_INT 3
29654: NEG
29655: PUSH
29656: LD_INT 2
29658: NEG
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PUSH
29664: LD_INT 3
29666: NEG
29667: PUSH
29668: LD_INT 3
29670: NEG
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: LIST
29680: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29681: LD_ADDR_VAR 0 23
29685: PUSH
29686: LD_INT 0
29688: PUSH
29689: LD_INT 3
29691: NEG
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: LD_INT 1
29699: NEG
29700: PUSH
29701: LD_INT 4
29703: NEG
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: PUSH
29709: LD_INT 1
29711: PUSH
29712: LD_INT 3
29714: NEG
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: LIST
29724: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29725: LD_ADDR_VAR 0 24
29729: PUSH
29730: LD_INT 3
29732: PUSH
29733: LD_INT 0
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 3
29742: PUSH
29743: LD_INT 1
29745: NEG
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 4
29753: PUSH
29754: LD_INT 1
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: LIST
29765: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29766: LD_ADDR_VAR 0 25
29770: PUSH
29771: LD_INT 3
29773: PUSH
29774: LD_INT 3
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: LD_INT 4
29783: PUSH
29784: LD_INT 3
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: PUSH
29791: LD_INT 3
29793: PUSH
29794: LD_INT 4
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: LIST
29805: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29806: LD_ADDR_VAR 0 26
29810: PUSH
29811: LD_INT 0
29813: PUSH
29814: LD_INT 3
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: PUSH
29821: LD_INT 1
29823: PUSH
29824: LD_INT 4
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: LD_INT 1
29833: NEG
29834: PUSH
29835: LD_INT 3
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: LIST
29846: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29847: LD_ADDR_VAR 0 27
29851: PUSH
29852: LD_INT 3
29854: NEG
29855: PUSH
29856: LD_INT 0
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 3
29865: NEG
29866: PUSH
29867: LD_INT 1
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: LD_INT 4
29876: NEG
29877: PUSH
29878: LD_INT 1
29880: NEG
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: LIST
29890: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29891: LD_ADDR_VAR 0 28
29895: PUSH
29896: LD_INT 3
29898: NEG
29899: PUSH
29900: LD_INT 3
29902: NEG
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PUSH
29908: LD_INT 3
29910: NEG
29911: PUSH
29912: LD_INT 4
29914: NEG
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 4
29922: NEG
29923: PUSH
29924: LD_INT 3
29926: NEG
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: LIST
29936: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29937: LD_ADDR_VAR 0 29
29941: PUSH
29942: LD_INT 1
29944: NEG
29945: PUSH
29946: LD_INT 3
29948: NEG
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: PUSH
29954: LD_INT 0
29956: PUSH
29957: LD_INT 3
29959: NEG
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: LD_INT 1
29967: PUSH
29968: LD_INT 2
29970: NEG
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 1
29978: NEG
29979: PUSH
29980: LD_INT 4
29982: NEG
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: PUSH
29988: LD_INT 0
29990: PUSH
29991: LD_INT 4
29993: NEG
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PUSH
29999: LD_INT 1
30001: PUSH
30002: LD_INT 3
30004: NEG
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: PUSH
30010: LD_INT 1
30012: NEG
30013: PUSH
30014: LD_INT 5
30016: NEG
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: LD_INT 0
30024: PUSH
30025: LD_INT 5
30027: NEG
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: PUSH
30033: LD_INT 1
30035: PUSH
30036: LD_INT 4
30038: NEG
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PUSH
30044: LD_INT 1
30046: NEG
30047: PUSH
30048: LD_INT 6
30050: NEG
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: LD_INT 0
30058: PUSH
30059: LD_INT 6
30061: NEG
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: LD_INT 1
30069: PUSH
30070: LD_INT 5
30072: NEG
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30092: LD_ADDR_VAR 0 30
30096: PUSH
30097: LD_INT 2
30099: PUSH
30100: LD_INT 1
30102: NEG
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: LD_INT 3
30110: PUSH
30111: LD_INT 0
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 3
30120: PUSH
30121: LD_INT 1
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: PUSH
30128: LD_INT 3
30130: PUSH
30131: LD_INT 1
30133: NEG
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: PUSH
30139: LD_INT 4
30141: PUSH
30142: LD_INT 0
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: PUSH
30149: LD_INT 4
30151: PUSH
30152: LD_INT 1
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 4
30161: PUSH
30162: LD_INT 1
30164: NEG
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 5
30172: PUSH
30173: LD_INT 0
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PUSH
30180: LD_INT 5
30182: PUSH
30183: LD_INT 1
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 5
30192: PUSH
30193: LD_INT 1
30195: NEG
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: PUSH
30201: LD_INT 6
30203: PUSH
30204: LD_INT 0
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: PUSH
30211: LD_INT 6
30213: PUSH
30214: LD_INT 1
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: EMPTY
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30235: LD_ADDR_VAR 0 31
30239: PUSH
30240: LD_INT 3
30242: PUSH
30243: LD_INT 2
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 3
30252: PUSH
30253: LD_INT 3
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: LD_INT 2
30262: PUSH
30263: LD_INT 3
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: LD_INT 4
30272: PUSH
30273: LD_INT 3
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: LD_INT 4
30282: PUSH
30283: LD_INT 4
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PUSH
30290: LD_INT 3
30292: PUSH
30293: LD_INT 4
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: LD_INT 5
30302: PUSH
30303: LD_INT 4
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: LD_INT 5
30312: PUSH
30313: LD_INT 5
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 4
30322: PUSH
30323: LD_INT 5
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: LD_INT 6
30332: PUSH
30333: LD_INT 5
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 6
30342: PUSH
30343: LD_INT 6
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: LD_INT 5
30352: PUSH
30353: LD_INT 6
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: LIST
30366: LIST
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30374: LD_ADDR_VAR 0 32
30378: PUSH
30379: LD_INT 1
30381: PUSH
30382: LD_INT 3
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: LD_INT 0
30391: PUSH
30392: LD_INT 3
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 1
30401: NEG
30402: PUSH
30403: LD_INT 2
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: PUSH
30410: LD_INT 1
30412: PUSH
30413: LD_INT 4
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PUSH
30420: LD_INT 0
30422: PUSH
30423: LD_INT 4
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PUSH
30430: LD_INT 1
30432: NEG
30433: PUSH
30434: LD_INT 3
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 1
30443: PUSH
30444: LD_INT 5
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 0
30453: PUSH
30454: LD_INT 5
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PUSH
30461: LD_INT 1
30463: NEG
30464: PUSH
30465: LD_INT 4
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: PUSH
30472: LD_INT 1
30474: PUSH
30475: LD_INT 6
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PUSH
30482: LD_INT 0
30484: PUSH
30485: LD_INT 6
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: LD_INT 1
30494: NEG
30495: PUSH
30496: LD_INT 5
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30517: LD_ADDR_VAR 0 33
30521: PUSH
30522: LD_INT 2
30524: NEG
30525: PUSH
30526: LD_INT 1
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: PUSH
30533: LD_INT 3
30535: NEG
30536: PUSH
30537: LD_INT 0
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: LD_INT 3
30546: NEG
30547: PUSH
30548: LD_INT 1
30550: NEG
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: LD_INT 3
30558: NEG
30559: PUSH
30560: LD_INT 1
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: LD_INT 4
30569: NEG
30570: PUSH
30571: LD_INT 0
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: PUSH
30578: LD_INT 4
30580: NEG
30581: PUSH
30582: LD_INT 1
30584: NEG
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 4
30592: NEG
30593: PUSH
30594: LD_INT 1
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: LD_INT 5
30603: NEG
30604: PUSH
30605: LD_INT 0
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: PUSH
30612: LD_INT 5
30614: NEG
30615: PUSH
30616: LD_INT 1
30618: NEG
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 5
30626: NEG
30627: PUSH
30628: LD_INT 1
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: LD_INT 6
30637: NEG
30638: PUSH
30639: LD_INT 0
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PUSH
30646: LD_INT 6
30648: NEG
30649: PUSH
30650: LD_INT 1
30652: NEG
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30672: LD_ADDR_VAR 0 34
30676: PUSH
30677: LD_INT 2
30679: NEG
30680: PUSH
30681: LD_INT 3
30683: NEG
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: LD_INT 3
30691: NEG
30692: PUSH
30693: LD_INT 2
30695: NEG
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: LD_INT 3
30703: NEG
30704: PUSH
30705: LD_INT 3
30707: NEG
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PUSH
30713: LD_INT 3
30715: NEG
30716: PUSH
30717: LD_INT 4
30719: NEG
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 4
30727: NEG
30728: PUSH
30729: LD_INT 3
30731: NEG
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: LD_INT 4
30739: NEG
30740: PUSH
30741: LD_INT 4
30743: NEG
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: LD_INT 4
30751: NEG
30752: PUSH
30753: LD_INT 5
30755: NEG
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PUSH
30761: LD_INT 5
30763: NEG
30764: PUSH
30765: LD_INT 4
30767: NEG
30768: PUSH
30769: EMPTY
30770: LIST
30771: LIST
30772: PUSH
30773: LD_INT 5
30775: NEG
30776: PUSH
30777: LD_INT 5
30779: NEG
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: PUSH
30785: LD_INT 5
30787: NEG
30788: PUSH
30789: LD_INT 6
30791: NEG
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: LD_INT 6
30799: NEG
30800: PUSH
30801: LD_INT 5
30803: NEG
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: LD_INT 6
30811: NEG
30812: PUSH
30813: LD_INT 6
30815: NEG
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30835: LD_ADDR_VAR 0 41
30839: PUSH
30840: LD_INT 0
30842: PUSH
30843: LD_INT 2
30845: NEG
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: PUSH
30851: LD_INT 1
30853: NEG
30854: PUSH
30855: LD_INT 3
30857: NEG
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: LD_INT 1
30865: PUSH
30866: LD_INT 2
30868: NEG
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: LIST
30878: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30879: LD_ADDR_VAR 0 42
30883: PUSH
30884: LD_INT 2
30886: PUSH
30887: LD_INT 0
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: LD_INT 2
30896: PUSH
30897: LD_INT 1
30899: NEG
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: LD_INT 3
30907: PUSH
30908: LD_INT 1
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: LIST
30919: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30920: LD_ADDR_VAR 0 43
30924: PUSH
30925: LD_INT 2
30927: PUSH
30928: LD_INT 2
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: PUSH
30935: LD_INT 3
30937: PUSH
30938: LD_INT 2
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: LD_INT 2
30947: PUSH
30948: LD_INT 3
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: LIST
30959: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30960: LD_ADDR_VAR 0 44
30964: PUSH
30965: LD_INT 0
30967: PUSH
30968: LD_INT 2
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 1
30977: PUSH
30978: LD_INT 3
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 1
30987: NEG
30988: PUSH
30989: LD_INT 2
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: LIST
31000: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31001: LD_ADDR_VAR 0 45
31005: PUSH
31006: LD_INT 2
31008: NEG
31009: PUSH
31010: LD_INT 0
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: LD_INT 2
31019: NEG
31020: PUSH
31021: LD_INT 1
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 3
31030: NEG
31031: PUSH
31032: LD_INT 1
31034: NEG
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: LIST
31044: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31045: LD_ADDR_VAR 0 46
31049: PUSH
31050: LD_INT 2
31052: NEG
31053: PUSH
31054: LD_INT 2
31056: NEG
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: PUSH
31062: LD_INT 2
31064: NEG
31065: PUSH
31066: LD_INT 3
31068: NEG
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PUSH
31074: LD_INT 3
31076: NEG
31077: PUSH
31078: LD_INT 2
31080: NEG
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: LIST
31090: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31091: LD_ADDR_VAR 0 47
31095: PUSH
31096: LD_INT 2
31098: NEG
31099: PUSH
31100: LD_INT 3
31102: NEG
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: LD_INT 1
31110: NEG
31111: PUSH
31112: LD_INT 3
31114: NEG
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31124: LD_ADDR_VAR 0 48
31128: PUSH
31129: LD_INT 1
31131: PUSH
31132: LD_INT 2
31134: NEG
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: LD_INT 2
31142: PUSH
31143: LD_INT 1
31145: NEG
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31155: LD_ADDR_VAR 0 49
31159: PUSH
31160: LD_INT 3
31162: PUSH
31163: LD_INT 1
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: PUSH
31170: LD_INT 3
31172: PUSH
31173: LD_INT 2
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31184: LD_ADDR_VAR 0 50
31188: PUSH
31189: LD_INT 2
31191: PUSH
31192: LD_INT 3
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: PUSH
31199: LD_INT 1
31201: PUSH
31202: LD_INT 3
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31213: LD_ADDR_VAR 0 51
31217: PUSH
31218: LD_INT 1
31220: NEG
31221: PUSH
31222: LD_INT 2
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: PUSH
31229: LD_INT 2
31231: NEG
31232: PUSH
31233: LD_INT 1
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31244: LD_ADDR_VAR 0 52
31248: PUSH
31249: LD_INT 3
31251: NEG
31252: PUSH
31253: LD_INT 1
31255: NEG
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 3
31263: NEG
31264: PUSH
31265: LD_INT 2
31267: NEG
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31277: LD_ADDR_VAR 0 53
31281: PUSH
31282: LD_INT 1
31284: NEG
31285: PUSH
31286: LD_INT 3
31288: NEG
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 0
31296: PUSH
31297: LD_INT 3
31299: NEG
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PUSH
31305: LD_INT 1
31307: PUSH
31308: LD_INT 2
31310: NEG
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: LIST
31320: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31321: LD_ADDR_VAR 0 54
31325: PUSH
31326: LD_INT 2
31328: PUSH
31329: LD_INT 1
31331: NEG
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: PUSH
31337: LD_INT 3
31339: PUSH
31340: LD_INT 0
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PUSH
31347: LD_INT 3
31349: PUSH
31350: LD_INT 1
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: LIST
31361: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31362: LD_ADDR_VAR 0 55
31366: PUSH
31367: LD_INT 3
31369: PUSH
31370: LD_INT 2
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: LD_INT 3
31379: PUSH
31380: LD_INT 3
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: PUSH
31387: LD_INT 2
31389: PUSH
31390: LD_INT 3
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: LIST
31401: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31402: LD_ADDR_VAR 0 56
31406: PUSH
31407: LD_INT 1
31409: PUSH
31410: LD_INT 3
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 0
31419: PUSH
31420: LD_INT 3
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: LD_INT 1
31429: NEG
31430: PUSH
31431: LD_INT 2
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: LIST
31442: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31443: LD_ADDR_VAR 0 57
31447: PUSH
31448: LD_INT 2
31450: NEG
31451: PUSH
31452: LD_INT 1
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: PUSH
31459: LD_INT 3
31461: NEG
31462: PUSH
31463: LD_INT 0
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: PUSH
31470: LD_INT 3
31472: NEG
31473: PUSH
31474: LD_INT 1
31476: NEG
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: LIST
31486: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31487: LD_ADDR_VAR 0 58
31491: PUSH
31492: LD_INT 2
31494: NEG
31495: PUSH
31496: LD_INT 3
31498: NEG
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PUSH
31504: LD_INT 3
31506: NEG
31507: PUSH
31508: LD_INT 2
31510: NEG
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 3
31518: NEG
31519: PUSH
31520: LD_INT 3
31522: NEG
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: LIST
31532: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31533: LD_ADDR_VAR 0 59
31537: PUSH
31538: LD_INT 1
31540: NEG
31541: PUSH
31542: LD_INT 2
31544: NEG
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: PUSH
31550: LD_INT 0
31552: PUSH
31553: LD_INT 2
31555: NEG
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: LD_INT 1
31563: PUSH
31564: LD_INT 1
31566: NEG
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PUSH
31572: EMPTY
31573: LIST
31574: LIST
31575: LIST
31576: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31577: LD_ADDR_VAR 0 60
31581: PUSH
31582: LD_INT 1
31584: PUSH
31585: LD_INT 1
31587: NEG
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: LD_INT 2
31595: PUSH
31596: LD_INT 0
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: PUSH
31603: LD_INT 2
31605: PUSH
31606: LD_INT 1
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: LIST
31617: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31618: LD_ADDR_VAR 0 61
31622: PUSH
31623: LD_INT 2
31625: PUSH
31626: LD_INT 1
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PUSH
31633: LD_INT 2
31635: PUSH
31636: LD_INT 2
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: LD_INT 1
31645: PUSH
31646: LD_INT 2
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: LIST
31657: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31658: LD_ADDR_VAR 0 62
31662: PUSH
31663: LD_INT 1
31665: PUSH
31666: LD_INT 2
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PUSH
31673: LD_INT 0
31675: PUSH
31676: LD_INT 2
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: PUSH
31683: LD_INT 1
31685: NEG
31686: PUSH
31687: LD_INT 1
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: LIST
31698: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31699: LD_ADDR_VAR 0 63
31703: PUSH
31704: LD_INT 1
31706: NEG
31707: PUSH
31708: LD_INT 1
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: PUSH
31715: LD_INT 2
31717: NEG
31718: PUSH
31719: LD_INT 0
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: PUSH
31726: LD_INT 2
31728: NEG
31729: PUSH
31730: LD_INT 1
31732: NEG
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: LIST
31742: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31743: LD_ADDR_VAR 0 64
31747: PUSH
31748: LD_INT 1
31750: NEG
31751: PUSH
31752: LD_INT 2
31754: NEG
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PUSH
31760: LD_INT 2
31762: NEG
31763: PUSH
31764: LD_INT 1
31766: NEG
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: LD_INT 2
31774: NEG
31775: PUSH
31776: LD_INT 2
31778: NEG
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: LIST
31788: ST_TO_ADDR
// end ; 2 :
31789: GO 35055
31791: LD_INT 2
31793: DOUBLE
31794: EQUAL
31795: IFTRUE 31799
31797: GO 35054
31799: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31800: LD_ADDR_VAR 0 29
31804: PUSH
31805: LD_INT 4
31807: PUSH
31808: LD_INT 0
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PUSH
31815: LD_INT 4
31817: PUSH
31818: LD_INT 1
31820: NEG
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PUSH
31826: LD_INT 5
31828: PUSH
31829: LD_INT 0
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: PUSH
31836: LD_INT 5
31838: PUSH
31839: LD_INT 1
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: PUSH
31846: LD_INT 4
31848: PUSH
31849: LD_INT 1
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: PUSH
31856: LD_INT 3
31858: PUSH
31859: LD_INT 0
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: LD_INT 3
31868: PUSH
31869: LD_INT 1
31871: NEG
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: LD_INT 3
31879: PUSH
31880: LD_INT 2
31882: NEG
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: PUSH
31888: LD_INT 5
31890: PUSH
31891: LD_INT 2
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: PUSH
31898: LD_INT 3
31900: PUSH
31901: LD_INT 3
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: LD_INT 3
31910: PUSH
31911: LD_INT 2
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 4
31920: PUSH
31921: LD_INT 3
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: PUSH
31928: LD_INT 4
31930: PUSH
31931: LD_INT 4
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: PUSH
31938: LD_INT 3
31940: PUSH
31941: LD_INT 4
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 2
31950: PUSH
31951: LD_INT 3
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: PUSH
31958: LD_INT 2
31960: PUSH
31961: LD_INT 2
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: PUSH
31968: LD_INT 4
31970: PUSH
31971: LD_INT 2
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: PUSH
31978: LD_INT 2
31980: PUSH
31981: LD_INT 4
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: PUSH
31988: LD_INT 0
31990: PUSH
31991: LD_INT 4
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: PUSH
31998: LD_INT 0
32000: PUSH
32001: LD_INT 3
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PUSH
32008: LD_INT 1
32010: PUSH
32011: LD_INT 4
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PUSH
32018: LD_INT 1
32020: PUSH
32021: LD_INT 5
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 0
32030: PUSH
32031: LD_INT 5
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 1
32040: NEG
32041: PUSH
32042: LD_INT 4
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: PUSH
32049: LD_INT 1
32051: NEG
32052: PUSH
32053: LD_INT 3
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: PUSH
32060: LD_INT 2
32062: PUSH
32063: LD_INT 5
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 2
32072: NEG
32073: PUSH
32074: LD_INT 3
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 3
32083: NEG
32084: PUSH
32085: LD_INT 0
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PUSH
32092: LD_INT 3
32094: NEG
32095: PUSH
32096: LD_INT 1
32098: NEG
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 2
32106: NEG
32107: PUSH
32108: LD_INT 0
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: PUSH
32115: LD_INT 2
32117: NEG
32118: PUSH
32119: LD_INT 1
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: PUSH
32126: LD_INT 3
32128: NEG
32129: PUSH
32130: LD_INT 1
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PUSH
32137: LD_INT 4
32139: NEG
32140: PUSH
32141: LD_INT 0
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: PUSH
32148: LD_INT 4
32150: NEG
32151: PUSH
32152: LD_INT 1
32154: NEG
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: PUSH
32160: LD_INT 4
32162: NEG
32163: PUSH
32164: LD_INT 2
32166: NEG
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: PUSH
32172: LD_INT 2
32174: NEG
32175: PUSH
32176: LD_INT 2
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: PUSH
32183: LD_INT 4
32185: NEG
32186: PUSH
32187: LD_INT 4
32189: NEG
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: LD_INT 4
32197: NEG
32198: PUSH
32199: LD_INT 5
32201: NEG
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: LD_INT 3
32209: NEG
32210: PUSH
32211: LD_INT 4
32213: NEG
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: LD_INT 3
32221: NEG
32222: PUSH
32223: LD_INT 3
32225: NEG
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: LD_INT 4
32233: NEG
32234: PUSH
32235: LD_INT 3
32237: NEG
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: LD_INT 5
32245: NEG
32246: PUSH
32247: LD_INT 4
32249: NEG
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 5
32257: NEG
32258: PUSH
32259: LD_INT 5
32261: NEG
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 3
32269: NEG
32270: PUSH
32271: LD_INT 5
32273: NEG
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 5
32281: NEG
32282: PUSH
32283: LD_INT 3
32285: NEG
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32338: LD_ADDR_VAR 0 30
32342: PUSH
32343: LD_INT 4
32345: PUSH
32346: LD_INT 4
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 4
32355: PUSH
32356: LD_INT 3
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 5
32365: PUSH
32366: LD_INT 4
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: LD_INT 5
32375: PUSH
32376: LD_INT 5
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: PUSH
32383: LD_INT 4
32385: PUSH
32386: LD_INT 5
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: PUSH
32393: LD_INT 3
32395: PUSH
32396: LD_INT 4
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 3
32405: PUSH
32406: LD_INT 3
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: LD_INT 5
32415: PUSH
32416: LD_INT 3
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: LD_INT 3
32425: PUSH
32426: LD_INT 5
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PUSH
32433: LD_INT 0
32435: PUSH
32436: LD_INT 3
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: PUSH
32443: LD_INT 0
32445: PUSH
32446: LD_INT 2
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: PUSH
32453: LD_INT 1
32455: PUSH
32456: LD_INT 3
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: PUSH
32463: LD_INT 1
32465: PUSH
32466: LD_INT 4
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: PUSH
32473: LD_INT 0
32475: PUSH
32476: LD_INT 4
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PUSH
32483: LD_INT 1
32485: NEG
32486: PUSH
32487: LD_INT 3
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: PUSH
32494: LD_INT 1
32496: NEG
32497: PUSH
32498: LD_INT 2
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: PUSH
32505: LD_INT 2
32507: PUSH
32508: LD_INT 4
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 2
32517: NEG
32518: PUSH
32519: LD_INT 2
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: PUSH
32526: LD_INT 4
32528: NEG
32529: PUSH
32530: LD_INT 0
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: LD_INT 4
32539: NEG
32540: PUSH
32541: LD_INT 1
32543: NEG
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 3
32551: NEG
32552: PUSH
32553: LD_INT 0
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 3
32562: NEG
32563: PUSH
32564: LD_INT 1
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PUSH
32571: LD_INT 4
32573: NEG
32574: PUSH
32575: LD_INT 1
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: PUSH
32582: LD_INT 5
32584: NEG
32585: PUSH
32586: LD_INT 0
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: PUSH
32593: LD_INT 5
32595: NEG
32596: PUSH
32597: LD_INT 1
32599: NEG
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 5
32607: NEG
32608: PUSH
32609: LD_INT 2
32611: NEG
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: PUSH
32617: LD_INT 3
32619: NEG
32620: PUSH
32621: LD_INT 2
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PUSH
32628: LD_INT 3
32630: NEG
32631: PUSH
32632: LD_INT 3
32634: NEG
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: PUSH
32640: LD_INT 3
32642: NEG
32643: PUSH
32644: LD_INT 4
32646: NEG
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: LD_INT 2
32654: NEG
32655: PUSH
32656: LD_INT 3
32658: NEG
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: PUSH
32664: LD_INT 2
32666: NEG
32667: PUSH
32668: LD_INT 2
32670: NEG
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: PUSH
32676: LD_INT 3
32678: NEG
32679: PUSH
32680: LD_INT 2
32682: NEG
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: LD_INT 4
32690: NEG
32691: PUSH
32692: LD_INT 3
32694: NEG
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 4
32702: NEG
32703: PUSH
32704: LD_INT 4
32706: NEG
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: LD_INT 2
32714: NEG
32715: PUSH
32716: LD_INT 4
32718: NEG
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PUSH
32724: LD_INT 4
32726: NEG
32727: PUSH
32728: LD_INT 2
32730: NEG
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 0
32738: PUSH
32739: LD_INT 4
32741: NEG
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 0
32749: PUSH
32750: LD_INT 5
32752: NEG
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PUSH
32758: LD_INT 1
32760: PUSH
32761: LD_INT 4
32763: NEG
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 1
32771: PUSH
32772: LD_INT 3
32774: NEG
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: LD_INT 0
32782: PUSH
32783: LD_INT 3
32785: NEG
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 1
32793: NEG
32794: PUSH
32795: LD_INT 4
32797: NEG
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: LD_INT 1
32805: NEG
32806: PUSH
32807: LD_INT 5
32809: NEG
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 2
32817: PUSH
32818: LD_INT 3
32820: NEG
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 2
32828: NEG
32829: PUSH
32830: LD_INT 5
32832: NEG
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32885: LD_ADDR_VAR 0 31
32889: PUSH
32890: LD_INT 0
32892: PUSH
32893: LD_INT 4
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: PUSH
32900: LD_INT 0
32902: PUSH
32903: LD_INT 3
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: LD_INT 1
32912: PUSH
32913: LD_INT 4
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: LD_INT 1
32922: PUSH
32923: LD_INT 5
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: LD_INT 0
32932: PUSH
32933: LD_INT 5
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 1
32942: NEG
32943: PUSH
32944: LD_INT 4
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: PUSH
32951: LD_INT 1
32953: NEG
32954: PUSH
32955: LD_INT 3
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PUSH
32962: LD_INT 2
32964: PUSH
32965: LD_INT 5
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: LD_INT 2
32974: NEG
32975: PUSH
32976: LD_INT 3
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: LD_INT 3
32985: NEG
32986: PUSH
32987: LD_INT 0
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: LD_INT 3
32996: NEG
32997: PUSH
32998: LD_INT 1
33000: NEG
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PUSH
33006: LD_INT 2
33008: NEG
33009: PUSH
33010: LD_INT 0
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 2
33019: NEG
33020: PUSH
33021: LD_INT 1
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PUSH
33028: LD_INT 3
33030: NEG
33031: PUSH
33032: LD_INT 1
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: PUSH
33039: LD_INT 4
33041: NEG
33042: PUSH
33043: LD_INT 0
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: PUSH
33050: LD_INT 4
33052: NEG
33053: PUSH
33054: LD_INT 1
33056: NEG
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: PUSH
33062: LD_INT 4
33064: NEG
33065: PUSH
33066: LD_INT 2
33068: NEG
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: PUSH
33074: LD_INT 2
33076: NEG
33077: PUSH
33078: LD_INT 2
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: PUSH
33085: LD_INT 4
33087: NEG
33088: PUSH
33089: LD_INT 4
33091: NEG
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PUSH
33097: LD_INT 4
33099: NEG
33100: PUSH
33101: LD_INT 5
33103: NEG
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PUSH
33109: LD_INT 3
33111: NEG
33112: PUSH
33113: LD_INT 4
33115: NEG
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: LD_INT 3
33123: NEG
33124: PUSH
33125: LD_INT 3
33127: NEG
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: LD_INT 4
33135: NEG
33136: PUSH
33137: LD_INT 3
33139: NEG
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: PUSH
33145: LD_INT 5
33147: NEG
33148: PUSH
33149: LD_INT 4
33151: NEG
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 5
33159: NEG
33160: PUSH
33161: LD_INT 5
33163: NEG
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: LD_INT 3
33171: NEG
33172: PUSH
33173: LD_INT 5
33175: NEG
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: PUSH
33181: LD_INT 5
33183: NEG
33184: PUSH
33185: LD_INT 3
33187: NEG
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 0
33195: PUSH
33196: LD_INT 3
33198: NEG
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 0
33206: PUSH
33207: LD_INT 4
33209: NEG
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 1
33217: PUSH
33218: LD_INT 3
33220: NEG
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: LD_INT 1
33228: PUSH
33229: LD_INT 2
33231: NEG
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: LD_INT 0
33239: PUSH
33240: LD_INT 2
33242: NEG
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: LD_INT 1
33250: NEG
33251: PUSH
33252: LD_INT 3
33254: NEG
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 1
33262: NEG
33263: PUSH
33264: LD_INT 4
33266: NEG
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PUSH
33272: LD_INT 2
33274: PUSH
33275: LD_INT 2
33277: NEG
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: LD_INT 2
33285: NEG
33286: PUSH
33287: LD_INT 4
33289: NEG
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: LD_INT 4
33297: PUSH
33298: LD_INT 0
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 4
33307: PUSH
33308: LD_INT 1
33310: NEG
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: LD_INT 5
33318: PUSH
33319: LD_INT 0
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: PUSH
33326: LD_INT 5
33328: PUSH
33329: LD_INT 1
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: PUSH
33336: LD_INT 4
33338: PUSH
33339: LD_INT 1
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PUSH
33346: LD_INT 3
33348: PUSH
33349: LD_INT 0
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: PUSH
33356: LD_INT 3
33358: PUSH
33359: LD_INT 1
33361: NEG
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 3
33369: PUSH
33370: LD_INT 2
33372: NEG
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PUSH
33378: LD_INT 5
33380: PUSH
33381: LD_INT 2
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33435: LD_ADDR_VAR 0 32
33439: PUSH
33440: LD_INT 4
33442: NEG
33443: PUSH
33444: LD_INT 0
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 4
33453: NEG
33454: PUSH
33455: LD_INT 1
33457: NEG
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PUSH
33463: LD_INT 3
33465: NEG
33466: PUSH
33467: LD_INT 0
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: LD_INT 3
33476: NEG
33477: PUSH
33478: LD_INT 1
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: PUSH
33485: LD_INT 4
33487: NEG
33488: PUSH
33489: LD_INT 1
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: PUSH
33496: LD_INT 5
33498: NEG
33499: PUSH
33500: LD_INT 0
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: PUSH
33507: LD_INT 5
33509: NEG
33510: PUSH
33511: LD_INT 1
33513: NEG
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PUSH
33519: LD_INT 5
33521: NEG
33522: PUSH
33523: LD_INT 2
33525: NEG
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: PUSH
33531: LD_INT 3
33533: NEG
33534: PUSH
33535: LD_INT 2
33537: PUSH
33538: EMPTY
33539: LIST
33540: LIST
33541: PUSH
33542: LD_INT 3
33544: NEG
33545: PUSH
33546: LD_INT 3
33548: NEG
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PUSH
33554: LD_INT 3
33556: NEG
33557: PUSH
33558: LD_INT 4
33560: NEG
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: PUSH
33566: LD_INT 2
33568: NEG
33569: PUSH
33570: LD_INT 3
33572: NEG
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 2
33580: NEG
33581: PUSH
33582: LD_INT 2
33584: NEG
33585: PUSH
33586: EMPTY
33587: LIST
33588: LIST
33589: PUSH
33590: LD_INT 3
33592: NEG
33593: PUSH
33594: LD_INT 2
33596: NEG
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: LD_INT 4
33604: NEG
33605: PUSH
33606: LD_INT 3
33608: NEG
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 4
33616: NEG
33617: PUSH
33618: LD_INT 4
33620: NEG
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: PUSH
33626: LD_INT 2
33628: NEG
33629: PUSH
33630: LD_INT 4
33632: NEG
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: PUSH
33638: LD_INT 4
33640: NEG
33641: PUSH
33642: LD_INT 2
33644: NEG
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 0
33652: PUSH
33653: LD_INT 4
33655: NEG
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: PUSH
33661: LD_INT 0
33663: PUSH
33664: LD_INT 5
33666: NEG
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: LD_INT 1
33674: PUSH
33675: LD_INT 4
33677: NEG
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 1
33685: PUSH
33686: LD_INT 3
33688: NEG
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: LD_INT 0
33696: PUSH
33697: LD_INT 3
33699: NEG
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: PUSH
33705: LD_INT 1
33707: NEG
33708: PUSH
33709: LD_INT 4
33711: NEG
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PUSH
33717: LD_INT 1
33719: NEG
33720: PUSH
33721: LD_INT 5
33723: NEG
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PUSH
33729: LD_INT 2
33731: PUSH
33732: LD_INT 3
33734: NEG
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: PUSH
33740: LD_INT 2
33742: NEG
33743: PUSH
33744: LD_INT 5
33746: NEG
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: LD_INT 3
33754: PUSH
33755: LD_INT 0
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PUSH
33762: LD_INT 3
33764: PUSH
33765: LD_INT 1
33767: NEG
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: LD_INT 4
33775: PUSH
33776: LD_INT 0
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: LD_INT 4
33785: PUSH
33786: LD_INT 1
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: PUSH
33793: LD_INT 3
33795: PUSH
33796: LD_INT 1
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: LD_INT 2
33805: PUSH
33806: LD_INT 0
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: PUSH
33813: LD_INT 2
33815: PUSH
33816: LD_INT 1
33818: NEG
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 2
33826: PUSH
33827: LD_INT 2
33829: NEG
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: LD_INT 4
33837: PUSH
33838: LD_INT 2
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PUSH
33845: LD_INT 4
33847: PUSH
33848: LD_INT 4
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 4
33857: PUSH
33858: LD_INT 3
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PUSH
33865: LD_INT 5
33867: PUSH
33868: LD_INT 4
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 5
33877: PUSH
33878: LD_INT 5
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 4
33887: PUSH
33888: LD_INT 5
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: PUSH
33895: LD_INT 3
33897: PUSH
33898: LD_INT 4
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: PUSH
33905: LD_INT 3
33907: PUSH
33908: LD_INT 3
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: LD_INT 5
33917: PUSH
33918: LD_INT 3
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: PUSH
33925: LD_INT 3
33927: PUSH
33928: LD_INT 5
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33982: LD_ADDR_VAR 0 33
33986: PUSH
33987: LD_INT 4
33989: NEG
33990: PUSH
33991: LD_INT 4
33993: NEG
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: LD_INT 4
34001: NEG
34002: PUSH
34003: LD_INT 5
34005: NEG
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 3
34013: NEG
34014: PUSH
34015: LD_INT 4
34017: NEG
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: PUSH
34023: LD_INT 3
34025: NEG
34026: PUSH
34027: LD_INT 3
34029: NEG
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: LD_INT 4
34037: NEG
34038: PUSH
34039: LD_INT 3
34041: NEG
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: PUSH
34047: LD_INT 5
34049: NEG
34050: PUSH
34051: LD_INT 4
34053: NEG
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PUSH
34059: LD_INT 5
34061: NEG
34062: PUSH
34063: LD_INT 5
34065: NEG
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 3
34073: NEG
34074: PUSH
34075: LD_INT 5
34077: NEG
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: LD_INT 5
34085: NEG
34086: PUSH
34087: LD_INT 3
34089: NEG
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: PUSH
34095: LD_INT 0
34097: PUSH
34098: LD_INT 3
34100: NEG
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PUSH
34106: LD_INT 0
34108: PUSH
34109: LD_INT 4
34111: NEG
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 1
34119: PUSH
34120: LD_INT 3
34122: NEG
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 1
34130: PUSH
34131: LD_INT 2
34133: NEG
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 0
34141: PUSH
34142: LD_INT 2
34144: NEG
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PUSH
34150: LD_INT 1
34152: NEG
34153: PUSH
34154: LD_INT 3
34156: NEG
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: PUSH
34162: LD_INT 1
34164: NEG
34165: PUSH
34166: LD_INT 4
34168: NEG
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: PUSH
34174: LD_INT 2
34176: PUSH
34177: LD_INT 2
34179: NEG
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: PUSH
34185: LD_INT 2
34187: NEG
34188: PUSH
34189: LD_INT 4
34191: NEG
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: PUSH
34197: LD_INT 4
34199: PUSH
34200: LD_INT 0
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: PUSH
34207: LD_INT 4
34209: PUSH
34210: LD_INT 1
34212: NEG
34213: PUSH
34214: EMPTY
34215: LIST
34216: LIST
34217: PUSH
34218: LD_INT 5
34220: PUSH
34221: LD_INT 0
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: PUSH
34228: LD_INT 5
34230: PUSH
34231: LD_INT 1
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: PUSH
34238: LD_INT 4
34240: PUSH
34241: LD_INT 1
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PUSH
34248: LD_INT 3
34250: PUSH
34251: LD_INT 0
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: PUSH
34258: LD_INT 3
34260: PUSH
34261: LD_INT 1
34263: NEG
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: PUSH
34269: LD_INT 3
34271: PUSH
34272: LD_INT 2
34274: NEG
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: PUSH
34280: LD_INT 5
34282: PUSH
34283: LD_INT 2
34285: PUSH
34286: EMPTY
34287: LIST
34288: LIST
34289: PUSH
34290: LD_INT 3
34292: PUSH
34293: LD_INT 3
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 3
34302: PUSH
34303: LD_INT 2
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: PUSH
34310: LD_INT 4
34312: PUSH
34313: LD_INT 3
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: LD_INT 4
34322: PUSH
34323: LD_INT 4
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: PUSH
34330: LD_INT 3
34332: PUSH
34333: LD_INT 4
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: PUSH
34340: LD_INT 2
34342: PUSH
34343: LD_INT 3
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 2
34352: PUSH
34353: LD_INT 2
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: LD_INT 4
34362: PUSH
34363: LD_INT 2
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: LD_INT 2
34372: PUSH
34373: LD_INT 4
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 0
34382: PUSH
34383: LD_INT 4
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: LD_INT 0
34392: PUSH
34393: LD_INT 3
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: LD_INT 1
34402: PUSH
34403: LD_INT 4
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: PUSH
34410: LD_INT 1
34412: PUSH
34413: LD_INT 5
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: PUSH
34420: LD_INT 0
34422: PUSH
34423: LD_INT 5
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PUSH
34430: LD_INT 1
34432: NEG
34433: PUSH
34434: LD_INT 4
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: PUSH
34441: LD_INT 1
34443: NEG
34444: PUSH
34445: LD_INT 3
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: PUSH
34452: LD_INT 2
34454: PUSH
34455: LD_INT 5
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: PUSH
34462: LD_INT 2
34464: NEG
34465: PUSH
34466: LD_INT 3
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34520: LD_ADDR_VAR 0 34
34524: PUSH
34525: LD_INT 0
34527: PUSH
34528: LD_INT 4
34530: NEG
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: PUSH
34536: LD_INT 0
34538: PUSH
34539: LD_INT 5
34541: NEG
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: PUSH
34547: LD_INT 1
34549: PUSH
34550: LD_INT 4
34552: NEG
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PUSH
34558: LD_INT 1
34560: PUSH
34561: LD_INT 3
34563: NEG
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: PUSH
34569: LD_INT 0
34571: PUSH
34572: LD_INT 3
34574: NEG
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: LD_INT 1
34582: NEG
34583: PUSH
34584: LD_INT 4
34586: NEG
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 1
34594: NEG
34595: PUSH
34596: LD_INT 5
34598: NEG
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: PUSH
34604: LD_INT 2
34606: PUSH
34607: LD_INT 3
34609: NEG
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PUSH
34615: LD_INT 2
34617: NEG
34618: PUSH
34619: LD_INT 5
34621: NEG
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PUSH
34627: LD_INT 3
34629: PUSH
34630: LD_INT 0
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: PUSH
34637: LD_INT 3
34639: PUSH
34640: LD_INT 1
34642: NEG
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: PUSH
34648: LD_INT 4
34650: PUSH
34651: LD_INT 0
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PUSH
34658: LD_INT 4
34660: PUSH
34661: LD_INT 1
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PUSH
34668: LD_INT 3
34670: PUSH
34671: LD_INT 1
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: PUSH
34678: LD_INT 2
34680: PUSH
34681: LD_INT 0
34683: PUSH
34684: EMPTY
34685: LIST
34686: LIST
34687: PUSH
34688: LD_INT 2
34690: PUSH
34691: LD_INT 1
34693: NEG
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: PUSH
34699: LD_INT 2
34701: PUSH
34702: LD_INT 2
34704: NEG
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 4
34712: PUSH
34713: LD_INT 2
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: PUSH
34720: LD_INT 4
34722: PUSH
34723: LD_INT 4
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: PUSH
34730: LD_INT 4
34732: PUSH
34733: LD_INT 3
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: PUSH
34740: LD_INT 5
34742: PUSH
34743: LD_INT 4
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 5
34752: PUSH
34753: LD_INT 5
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 4
34762: PUSH
34763: LD_INT 5
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: PUSH
34770: LD_INT 3
34772: PUSH
34773: LD_INT 4
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PUSH
34780: LD_INT 3
34782: PUSH
34783: LD_INT 3
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 5
34792: PUSH
34793: LD_INT 3
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PUSH
34800: LD_INT 3
34802: PUSH
34803: LD_INT 5
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: PUSH
34810: LD_INT 0
34812: PUSH
34813: LD_INT 3
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: LD_INT 0
34822: PUSH
34823: LD_INT 2
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 1
34832: PUSH
34833: LD_INT 3
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: PUSH
34840: LD_INT 1
34842: PUSH
34843: LD_INT 4
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: LD_INT 0
34852: PUSH
34853: LD_INT 4
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: PUSH
34860: LD_INT 1
34862: NEG
34863: PUSH
34864: LD_INT 3
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: PUSH
34871: LD_INT 1
34873: NEG
34874: PUSH
34875: LD_INT 2
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 2
34884: PUSH
34885: LD_INT 4
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PUSH
34892: LD_INT 2
34894: NEG
34895: PUSH
34896: LD_INT 2
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PUSH
34903: LD_INT 4
34905: NEG
34906: PUSH
34907: LD_INT 0
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: PUSH
34914: LD_INT 4
34916: NEG
34917: PUSH
34918: LD_INT 1
34920: NEG
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: PUSH
34926: LD_INT 3
34928: NEG
34929: PUSH
34930: LD_INT 0
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 3
34939: NEG
34940: PUSH
34941: LD_INT 1
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 4
34950: NEG
34951: PUSH
34952: LD_INT 1
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: PUSH
34959: LD_INT 5
34961: NEG
34962: PUSH
34963: LD_INT 0
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: PUSH
34970: LD_INT 5
34972: NEG
34973: PUSH
34974: LD_INT 1
34976: NEG
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: PUSH
34982: LD_INT 5
34984: NEG
34985: PUSH
34986: LD_INT 2
34988: NEG
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: PUSH
34994: LD_INT 3
34996: NEG
34997: PUSH
34998: LD_INT 2
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: ST_TO_ADDR
// end ; end ;
35052: GO 35055
35054: POP
// case btype of b_depot , b_warehouse :
35055: LD_VAR 0 1
35059: PUSH
35060: LD_INT 0
35062: DOUBLE
35063: EQUAL
35064: IFTRUE 35074
35066: LD_INT 1
35068: DOUBLE
35069: EQUAL
35070: IFTRUE 35074
35072: GO 35275
35074: POP
// case nation of nation_american :
35075: LD_VAR 0 5
35079: PUSH
35080: LD_INT 1
35082: DOUBLE
35083: EQUAL
35084: IFTRUE 35088
35086: GO 35144
35088: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35089: LD_ADDR_VAR 0 9
35093: PUSH
35094: LD_VAR 0 11
35098: PUSH
35099: LD_VAR 0 12
35103: PUSH
35104: LD_VAR 0 13
35108: PUSH
35109: LD_VAR 0 14
35113: PUSH
35114: LD_VAR 0 15
35118: PUSH
35119: LD_VAR 0 16
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: PUSH
35132: LD_VAR 0 4
35136: PUSH
35137: LD_INT 1
35139: PLUS
35140: ARRAY
35141: ST_TO_ADDR
35142: GO 35273
35144: LD_INT 2
35146: DOUBLE
35147: EQUAL
35148: IFTRUE 35152
35150: GO 35208
35152: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35153: LD_ADDR_VAR 0 9
35157: PUSH
35158: LD_VAR 0 17
35162: PUSH
35163: LD_VAR 0 18
35167: PUSH
35168: LD_VAR 0 19
35172: PUSH
35173: LD_VAR 0 20
35177: PUSH
35178: LD_VAR 0 21
35182: PUSH
35183: LD_VAR 0 22
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: PUSH
35196: LD_VAR 0 4
35200: PUSH
35201: LD_INT 1
35203: PLUS
35204: ARRAY
35205: ST_TO_ADDR
35206: GO 35273
35208: LD_INT 3
35210: DOUBLE
35211: EQUAL
35212: IFTRUE 35216
35214: GO 35272
35216: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35217: LD_ADDR_VAR 0 9
35221: PUSH
35222: LD_VAR 0 23
35226: PUSH
35227: LD_VAR 0 24
35231: PUSH
35232: LD_VAR 0 25
35236: PUSH
35237: LD_VAR 0 26
35241: PUSH
35242: LD_VAR 0 27
35246: PUSH
35247: LD_VAR 0 28
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: LIST
35256: LIST
35257: LIST
35258: LIST
35259: PUSH
35260: LD_VAR 0 4
35264: PUSH
35265: LD_INT 1
35267: PLUS
35268: ARRAY
35269: ST_TO_ADDR
35270: GO 35273
35272: POP
35273: GO 35828
35275: LD_INT 2
35277: DOUBLE
35278: EQUAL
35279: IFTRUE 35289
35281: LD_INT 3
35283: DOUBLE
35284: EQUAL
35285: IFTRUE 35289
35287: GO 35345
35289: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35290: LD_ADDR_VAR 0 9
35294: PUSH
35295: LD_VAR 0 29
35299: PUSH
35300: LD_VAR 0 30
35304: PUSH
35305: LD_VAR 0 31
35309: PUSH
35310: LD_VAR 0 32
35314: PUSH
35315: LD_VAR 0 33
35319: PUSH
35320: LD_VAR 0 34
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: PUSH
35333: LD_VAR 0 4
35337: PUSH
35338: LD_INT 1
35340: PLUS
35341: ARRAY
35342: ST_TO_ADDR
35343: GO 35828
35345: LD_INT 16
35347: DOUBLE
35348: EQUAL
35349: IFTRUE 35407
35351: LD_INT 17
35353: DOUBLE
35354: EQUAL
35355: IFTRUE 35407
35357: LD_INT 18
35359: DOUBLE
35360: EQUAL
35361: IFTRUE 35407
35363: LD_INT 19
35365: DOUBLE
35366: EQUAL
35367: IFTRUE 35407
35369: LD_INT 22
35371: DOUBLE
35372: EQUAL
35373: IFTRUE 35407
35375: LD_INT 20
35377: DOUBLE
35378: EQUAL
35379: IFTRUE 35407
35381: LD_INT 21
35383: DOUBLE
35384: EQUAL
35385: IFTRUE 35407
35387: LD_INT 23
35389: DOUBLE
35390: EQUAL
35391: IFTRUE 35407
35393: LD_INT 24
35395: DOUBLE
35396: EQUAL
35397: IFTRUE 35407
35399: LD_INT 25
35401: DOUBLE
35402: EQUAL
35403: IFTRUE 35407
35405: GO 35463
35407: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35408: LD_ADDR_VAR 0 9
35412: PUSH
35413: LD_VAR 0 35
35417: PUSH
35418: LD_VAR 0 36
35422: PUSH
35423: LD_VAR 0 37
35427: PUSH
35428: LD_VAR 0 38
35432: PUSH
35433: LD_VAR 0 39
35437: PUSH
35438: LD_VAR 0 40
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: LIST
35447: LIST
35448: LIST
35449: LIST
35450: PUSH
35451: LD_VAR 0 4
35455: PUSH
35456: LD_INT 1
35458: PLUS
35459: ARRAY
35460: ST_TO_ADDR
35461: GO 35828
35463: LD_INT 6
35465: DOUBLE
35466: EQUAL
35467: IFTRUE 35519
35469: LD_INT 7
35471: DOUBLE
35472: EQUAL
35473: IFTRUE 35519
35475: LD_INT 8
35477: DOUBLE
35478: EQUAL
35479: IFTRUE 35519
35481: LD_INT 13
35483: DOUBLE
35484: EQUAL
35485: IFTRUE 35519
35487: LD_INT 12
35489: DOUBLE
35490: EQUAL
35491: IFTRUE 35519
35493: LD_INT 15
35495: DOUBLE
35496: EQUAL
35497: IFTRUE 35519
35499: LD_INT 11
35501: DOUBLE
35502: EQUAL
35503: IFTRUE 35519
35505: LD_INT 14
35507: DOUBLE
35508: EQUAL
35509: IFTRUE 35519
35511: LD_INT 10
35513: DOUBLE
35514: EQUAL
35515: IFTRUE 35519
35517: GO 35575
35519: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35520: LD_ADDR_VAR 0 9
35524: PUSH
35525: LD_VAR 0 41
35529: PUSH
35530: LD_VAR 0 42
35534: PUSH
35535: LD_VAR 0 43
35539: PUSH
35540: LD_VAR 0 44
35544: PUSH
35545: LD_VAR 0 45
35549: PUSH
35550: LD_VAR 0 46
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: LIST
35561: LIST
35562: PUSH
35563: LD_VAR 0 4
35567: PUSH
35568: LD_INT 1
35570: PLUS
35571: ARRAY
35572: ST_TO_ADDR
35573: GO 35828
35575: LD_INT 36
35577: DOUBLE
35578: EQUAL
35579: IFTRUE 35583
35581: GO 35639
35583: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35584: LD_ADDR_VAR 0 9
35588: PUSH
35589: LD_VAR 0 47
35593: PUSH
35594: LD_VAR 0 48
35598: PUSH
35599: LD_VAR 0 49
35603: PUSH
35604: LD_VAR 0 50
35608: PUSH
35609: LD_VAR 0 51
35613: PUSH
35614: LD_VAR 0 52
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: PUSH
35627: LD_VAR 0 4
35631: PUSH
35632: LD_INT 1
35634: PLUS
35635: ARRAY
35636: ST_TO_ADDR
35637: GO 35828
35639: LD_INT 4
35641: DOUBLE
35642: EQUAL
35643: IFTRUE 35665
35645: LD_INT 5
35647: DOUBLE
35648: EQUAL
35649: IFTRUE 35665
35651: LD_INT 34
35653: DOUBLE
35654: EQUAL
35655: IFTRUE 35665
35657: LD_INT 37
35659: DOUBLE
35660: EQUAL
35661: IFTRUE 35665
35663: GO 35721
35665: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35666: LD_ADDR_VAR 0 9
35670: PUSH
35671: LD_VAR 0 53
35675: PUSH
35676: LD_VAR 0 54
35680: PUSH
35681: LD_VAR 0 55
35685: PUSH
35686: LD_VAR 0 56
35690: PUSH
35691: LD_VAR 0 57
35695: PUSH
35696: LD_VAR 0 58
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: PUSH
35709: LD_VAR 0 4
35713: PUSH
35714: LD_INT 1
35716: PLUS
35717: ARRAY
35718: ST_TO_ADDR
35719: GO 35828
35721: LD_INT 31
35723: DOUBLE
35724: EQUAL
35725: IFTRUE 35771
35727: LD_INT 32
35729: DOUBLE
35730: EQUAL
35731: IFTRUE 35771
35733: LD_INT 33
35735: DOUBLE
35736: EQUAL
35737: IFTRUE 35771
35739: LD_INT 27
35741: DOUBLE
35742: EQUAL
35743: IFTRUE 35771
35745: LD_INT 26
35747: DOUBLE
35748: EQUAL
35749: IFTRUE 35771
35751: LD_INT 28
35753: DOUBLE
35754: EQUAL
35755: IFTRUE 35771
35757: LD_INT 29
35759: DOUBLE
35760: EQUAL
35761: IFTRUE 35771
35763: LD_INT 30
35765: DOUBLE
35766: EQUAL
35767: IFTRUE 35771
35769: GO 35827
35771: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35772: LD_ADDR_VAR 0 9
35776: PUSH
35777: LD_VAR 0 59
35781: PUSH
35782: LD_VAR 0 60
35786: PUSH
35787: LD_VAR 0 61
35791: PUSH
35792: LD_VAR 0 62
35796: PUSH
35797: LD_VAR 0 63
35801: PUSH
35802: LD_VAR 0 64
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: LIST
35813: LIST
35814: PUSH
35815: LD_VAR 0 4
35819: PUSH
35820: LD_INT 1
35822: PLUS
35823: ARRAY
35824: ST_TO_ADDR
35825: GO 35828
35827: POP
// temp_list2 = [ ] ;
35828: LD_ADDR_VAR 0 10
35832: PUSH
35833: EMPTY
35834: ST_TO_ADDR
// for i in temp_list do
35835: LD_ADDR_VAR 0 8
35839: PUSH
35840: LD_VAR 0 9
35844: PUSH
35845: FOR_IN
35846: IFFALSE 35898
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35848: LD_ADDR_VAR 0 10
35852: PUSH
35853: LD_VAR 0 10
35857: PUSH
35858: LD_VAR 0 8
35862: PUSH
35863: LD_INT 1
35865: ARRAY
35866: PUSH
35867: LD_VAR 0 2
35871: PLUS
35872: PUSH
35873: LD_VAR 0 8
35877: PUSH
35878: LD_INT 2
35880: ARRAY
35881: PUSH
35882: LD_VAR 0 3
35886: PLUS
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: EMPTY
35893: LIST
35894: ADD
35895: ST_TO_ADDR
35896: GO 35845
35898: POP
35899: POP
// result = temp_list2 ;
35900: LD_ADDR_VAR 0 7
35904: PUSH
35905: LD_VAR 0 10
35909: ST_TO_ADDR
// end ;
35910: LD_VAR 0 7
35914: RET
// export function EnemyInRange ( unit , dist ) ; begin
35915: LD_INT 0
35917: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35918: LD_ADDR_VAR 0 3
35922: PUSH
35923: LD_VAR 0 1
35927: PPUSH
35928: CALL_OW 255
35932: PPUSH
35933: LD_VAR 0 1
35937: PPUSH
35938: CALL_OW 250
35942: PPUSH
35943: LD_VAR 0 1
35947: PPUSH
35948: CALL_OW 251
35952: PPUSH
35953: LD_VAR 0 2
35957: PPUSH
35958: CALL 9311 0 4
35962: PUSH
35963: LD_INT 4
35965: ARRAY
35966: ST_TO_ADDR
// end ;
35967: LD_VAR 0 3
35971: RET
// export function PlayerSeeMe ( unit ) ; begin
35972: LD_INT 0
35974: PPUSH
// result := See ( your_side , unit ) ;
35975: LD_ADDR_VAR 0 2
35979: PUSH
35980: LD_OWVAR 2
35984: PPUSH
35985: LD_VAR 0 1
35989: PPUSH
35990: CALL_OW 292
35994: ST_TO_ADDR
// end ;
35995: LD_VAR 0 2
35999: RET
// export function ReverseDir ( unit ) ; begin
36000: LD_INT 0
36002: PPUSH
// if not unit then
36003: LD_VAR 0 1
36007: NOT
36008: IFFALSE 36012
// exit ;
36010: GO 36035
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36012: LD_ADDR_VAR 0 2
36016: PUSH
36017: LD_VAR 0 1
36021: PPUSH
36022: CALL_OW 254
36026: PUSH
36027: LD_INT 3
36029: PLUS
36030: PUSH
36031: LD_INT 6
36033: MOD
36034: ST_TO_ADDR
// end ;
36035: LD_VAR 0 2
36039: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
36040: LD_INT 0
36042: PPUSH
36043: PPUSH
36044: PPUSH
36045: PPUSH
36046: PPUSH
// if not hexes then
36047: LD_VAR 0 2
36051: NOT
36052: IFFALSE 36056
// exit ;
36054: GO 36204
// dist := 9999 ;
36056: LD_ADDR_VAR 0 5
36060: PUSH
36061: LD_INT 9999
36063: ST_TO_ADDR
// for i = 1 to hexes do
36064: LD_ADDR_VAR 0 4
36068: PUSH
36069: DOUBLE
36070: LD_INT 1
36072: DEC
36073: ST_TO_ADDR
36074: LD_VAR 0 2
36078: PUSH
36079: FOR_TO
36080: IFFALSE 36192
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
36082: LD_VAR 0 1
36086: PPUSH
36087: LD_VAR 0 2
36091: PUSH
36092: LD_VAR 0 4
36096: ARRAY
36097: PUSH
36098: LD_INT 1
36100: ARRAY
36101: PPUSH
36102: LD_VAR 0 2
36106: PUSH
36107: LD_VAR 0 4
36111: ARRAY
36112: PUSH
36113: LD_INT 2
36115: ARRAY
36116: PPUSH
36117: CALL_OW 297
36121: PUSH
36122: LD_VAR 0 5
36126: LESS
36127: IFFALSE 36190
// begin hex := hexes [ i ] ;
36129: LD_ADDR_VAR 0 7
36133: PUSH
36134: LD_VAR 0 2
36138: PUSH
36139: LD_VAR 0 4
36143: ARRAY
36144: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36145: LD_ADDR_VAR 0 5
36149: PUSH
36150: LD_VAR 0 1
36154: PPUSH
36155: LD_VAR 0 2
36159: PUSH
36160: LD_VAR 0 4
36164: ARRAY
36165: PUSH
36166: LD_INT 1
36168: ARRAY
36169: PPUSH
36170: LD_VAR 0 2
36174: PUSH
36175: LD_VAR 0 4
36179: ARRAY
36180: PUSH
36181: LD_INT 2
36183: ARRAY
36184: PPUSH
36185: CALL_OW 297
36189: ST_TO_ADDR
// end ; end ;
36190: GO 36079
36192: POP
36193: POP
// result := hex ;
36194: LD_ADDR_VAR 0 3
36198: PUSH
36199: LD_VAR 0 7
36203: ST_TO_ADDR
// end ;
36204: LD_VAR 0 3
36208: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36209: LD_INT 0
36211: PPUSH
36212: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36213: LD_VAR 0 1
36217: NOT
36218: PUSH
36219: LD_VAR 0 1
36223: PUSH
36224: LD_INT 21
36226: PUSH
36227: LD_INT 2
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: PUSH
36234: LD_INT 23
36236: PUSH
36237: LD_INT 2
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PPUSH
36248: CALL_OW 69
36252: IN
36253: NOT
36254: OR
36255: IFFALSE 36259
// exit ;
36257: GO 36306
// for i = 1 to 3 do
36259: LD_ADDR_VAR 0 3
36263: PUSH
36264: DOUBLE
36265: LD_INT 1
36267: DEC
36268: ST_TO_ADDR
36269: LD_INT 3
36271: PUSH
36272: FOR_TO
36273: IFFALSE 36304
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36275: LD_VAR 0 1
36279: PPUSH
36280: CALL_OW 250
36284: PPUSH
36285: LD_VAR 0 1
36289: PPUSH
36290: CALL_OW 251
36294: PPUSH
36295: LD_INT 1
36297: PPUSH
36298: CALL_OW 453
36302: GO 36272
36304: POP
36305: POP
// end ;
36306: LD_VAR 0 2
36310: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36311: LD_INT 0
36313: PPUSH
36314: PPUSH
36315: PPUSH
36316: PPUSH
36317: PPUSH
36318: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
36319: LD_VAR 0 1
36323: NOT
36324: PUSH
36325: LD_VAR 0 2
36329: NOT
36330: OR
36331: PUSH
36332: LD_VAR 0 1
36336: PPUSH
36337: CALL_OW 314
36341: OR
36342: IFFALSE 36346
// exit ;
36344: GO 36787
// x := GetX ( enemy_unit ) ;
36346: LD_ADDR_VAR 0 7
36350: PUSH
36351: LD_VAR 0 2
36355: PPUSH
36356: CALL_OW 250
36360: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36361: LD_ADDR_VAR 0 8
36365: PUSH
36366: LD_VAR 0 2
36370: PPUSH
36371: CALL_OW 251
36375: ST_TO_ADDR
// if not x or not y then
36376: LD_VAR 0 7
36380: NOT
36381: PUSH
36382: LD_VAR 0 8
36386: NOT
36387: OR
36388: IFFALSE 36392
// exit ;
36390: GO 36787
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36392: LD_ADDR_VAR 0 6
36396: PUSH
36397: LD_VAR 0 7
36401: PPUSH
36402: LD_INT 0
36404: PPUSH
36405: LD_INT 4
36407: PPUSH
36408: CALL_OW 272
36412: PUSH
36413: LD_VAR 0 8
36417: PPUSH
36418: LD_INT 0
36420: PPUSH
36421: LD_INT 4
36423: PPUSH
36424: CALL_OW 273
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: LD_VAR 0 7
36437: PPUSH
36438: LD_INT 1
36440: PPUSH
36441: LD_INT 4
36443: PPUSH
36444: CALL_OW 272
36448: PUSH
36449: LD_VAR 0 8
36453: PPUSH
36454: LD_INT 1
36456: PPUSH
36457: LD_INT 4
36459: PPUSH
36460: CALL_OW 273
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: PUSH
36469: LD_VAR 0 7
36473: PPUSH
36474: LD_INT 2
36476: PPUSH
36477: LD_INT 4
36479: PPUSH
36480: CALL_OW 272
36484: PUSH
36485: LD_VAR 0 8
36489: PPUSH
36490: LD_INT 2
36492: PPUSH
36493: LD_INT 4
36495: PPUSH
36496: CALL_OW 273
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: LD_VAR 0 7
36509: PPUSH
36510: LD_INT 3
36512: PPUSH
36513: LD_INT 4
36515: PPUSH
36516: CALL_OW 272
36520: PUSH
36521: LD_VAR 0 8
36525: PPUSH
36526: LD_INT 3
36528: PPUSH
36529: LD_INT 4
36531: PPUSH
36532: CALL_OW 273
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_VAR 0 7
36545: PPUSH
36546: LD_INT 4
36548: PPUSH
36549: LD_INT 4
36551: PPUSH
36552: CALL_OW 272
36556: PUSH
36557: LD_VAR 0 8
36561: PPUSH
36562: LD_INT 4
36564: PPUSH
36565: LD_INT 4
36567: PPUSH
36568: CALL_OW 273
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: LD_VAR 0 7
36581: PPUSH
36582: LD_INT 5
36584: PPUSH
36585: LD_INT 4
36587: PPUSH
36588: CALL_OW 272
36592: PUSH
36593: LD_VAR 0 8
36597: PPUSH
36598: LD_INT 5
36600: PPUSH
36601: LD_INT 4
36603: PPUSH
36604: CALL_OW 273
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: LIST
36617: LIST
36618: LIST
36619: LIST
36620: ST_TO_ADDR
// for i = tmp downto 1 do
36621: LD_ADDR_VAR 0 4
36625: PUSH
36626: DOUBLE
36627: LD_VAR 0 6
36631: INC
36632: ST_TO_ADDR
36633: LD_INT 1
36635: PUSH
36636: FOR_DOWNTO
36637: IFFALSE 36738
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36639: LD_VAR 0 6
36643: PUSH
36644: LD_VAR 0 4
36648: ARRAY
36649: PUSH
36650: LD_INT 1
36652: ARRAY
36653: PPUSH
36654: LD_VAR 0 6
36658: PUSH
36659: LD_VAR 0 4
36663: ARRAY
36664: PUSH
36665: LD_INT 2
36667: ARRAY
36668: PPUSH
36669: CALL_OW 488
36673: NOT
36674: PUSH
36675: LD_VAR 0 6
36679: PUSH
36680: LD_VAR 0 4
36684: ARRAY
36685: PUSH
36686: LD_INT 1
36688: ARRAY
36689: PPUSH
36690: LD_VAR 0 6
36694: PUSH
36695: LD_VAR 0 4
36699: ARRAY
36700: PUSH
36701: LD_INT 2
36703: ARRAY
36704: PPUSH
36705: CALL_OW 428
36709: PUSH
36710: LD_INT 0
36712: NONEQUAL
36713: OR
36714: IFFALSE 36736
// tmp := Delete ( tmp , i ) ;
36716: LD_ADDR_VAR 0 6
36720: PUSH
36721: LD_VAR 0 6
36725: PPUSH
36726: LD_VAR 0 4
36730: PPUSH
36731: CALL_OW 3
36735: ST_TO_ADDR
36736: GO 36636
36738: POP
36739: POP
// j := GetClosestHex ( unit , tmp ) ;
36740: LD_ADDR_VAR 0 5
36744: PUSH
36745: LD_VAR 0 1
36749: PPUSH
36750: LD_VAR 0 6
36754: PPUSH
36755: CALL 36040 0 2
36759: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36760: LD_VAR 0 1
36764: PPUSH
36765: LD_VAR 0 5
36769: PUSH
36770: LD_INT 1
36772: ARRAY
36773: PPUSH
36774: LD_VAR 0 5
36778: PUSH
36779: LD_INT 2
36781: ARRAY
36782: PPUSH
36783: CALL_OW 111
// end ;
36787: LD_VAR 0 3
36791: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
36792: LD_INT 0
36794: PPUSH
36795: PPUSH
36796: PPUSH
// uc_side = 0 ;
36797: LD_ADDR_OWVAR 20
36801: PUSH
36802: LD_INT 0
36804: ST_TO_ADDR
// uc_nation = 0 ;
36805: LD_ADDR_OWVAR 21
36809: PUSH
36810: LD_INT 0
36812: ST_TO_ADDR
// InitHc_All ( ) ;
36813: CALL_OW 584
// InitVc ;
36817: CALL_OW 20
// if mastodonts then
36821: LD_VAR 0 6
36825: IFFALSE 36892
// for i = 1 to mastodonts do
36827: LD_ADDR_VAR 0 11
36831: PUSH
36832: DOUBLE
36833: LD_INT 1
36835: DEC
36836: ST_TO_ADDR
36837: LD_VAR 0 6
36841: PUSH
36842: FOR_TO
36843: IFFALSE 36890
// begin vc_chassis := 31 ;
36845: LD_ADDR_OWVAR 37
36849: PUSH
36850: LD_INT 31
36852: ST_TO_ADDR
// vc_control := control_rider ;
36853: LD_ADDR_OWVAR 38
36857: PUSH
36858: LD_INT 4
36860: ST_TO_ADDR
// animal := CreateVehicle ;
36861: LD_ADDR_VAR 0 12
36865: PUSH
36866: CALL_OW 45
36870: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36871: LD_VAR 0 12
36875: PPUSH
36876: LD_VAR 0 8
36880: PPUSH
36881: LD_INT 0
36883: PPUSH
36884: CALL 39080 0 3
// end ;
36888: GO 36842
36890: POP
36891: POP
// if horses then
36892: LD_VAR 0 5
36896: IFFALSE 36963
// for i = 1 to horses do
36898: LD_ADDR_VAR 0 11
36902: PUSH
36903: DOUBLE
36904: LD_INT 1
36906: DEC
36907: ST_TO_ADDR
36908: LD_VAR 0 5
36912: PUSH
36913: FOR_TO
36914: IFFALSE 36961
// begin hc_class := 21 ;
36916: LD_ADDR_OWVAR 28
36920: PUSH
36921: LD_INT 21
36923: ST_TO_ADDR
// hc_gallery :=  ;
36924: LD_ADDR_OWVAR 33
36928: PUSH
36929: LD_STRING 
36931: ST_TO_ADDR
// animal := CreateHuman ;
36932: LD_ADDR_VAR 0 12
36936: PUSH
36937: CALL_OW 44
36941: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36942: LD_VAR 0 12
36946: PPUSH
36947: LD_VAR 0 8
36951: PPUSH
36952: LD_INT 0
36954: PPUSH
36955: CALL 39080 0 3
// end ;
36959: GO 36913
36961: POP
36962: POP
// if birds then
36963: LD_VAR 0 1
36967: IFFALSE 37034
// for i = 1 to birds do
36969: LD_ADDR_VAR 0 11
36973: PUSH
36974: DOUBLE
36975: LD_INT 1
36977: DEC
36978: ST_TO_ADDR
36979: LD_VAR 0 1
36983: PUSH
36984: FOR_TO
36985: IFFALSE 37032
// begin hc_class = 18 ;
36987: LD_ADDR_OWVAR 28
36991: PUSH
36992: LD_INT 18
36994: ST_TO_ADDR
// hc_gallery =  ;
36995: LD_ADDR_OWVAR 33
36999: PUSH
37000: LD_STRING 
37002: ST_TO_ADDR
// animal := CreateHuman ;
37003: LD_ADDR_VAR 0 12
37007: PUSH
37008: CALL_OW 44
37012: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37013: LD_VAR 0 12
37017: PPUSH
37018: LD_VAR 0 8
37022: PPUSH
37023: LD_INT 0
37025: PPUSH
37026: CALL 39080 0 3
// end ;
37030: GO 36984
37032: POP
37033: POP
// if tigers then
37034: LD_VAR 0 2
37038: IFFALSE 37122
// for i = 1 to tigers do
37040: LD_ADDR_VAR 0 11
37044: PUSH
37045: DOUBLE
37046: LD_INT 1
37048: DEC
37049: ST_TO_ADDR
37050: LD_VAR 0 2
37054: PUSH
37055: FOR_TO
37056: IFFALSE 37120
// begin hc_class = class_tiger ;
37058: LD_ADDR_OWVAR 28
37062: PUSH
37063: LD_INT 14
37065: ST_TO_ADDR
// hc_gallery =  ;
37066: LD_ADDR_OWVAR 33
37070: PUSH
37071: LD_STRING 
37073: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37074: LD_ADDR_OWVAR 35
37078: PUSH
37079: LD_INT 7
37081: NEG
37082: PPUSH
37083: LD_INT 7
37085: PPUSH
37086: CALL_OW 12
37090: ST_TO_ADDR
// animal := CreateHuman ;
37091: LD_ADDR_VAR 0 12
37095: PUSH
37096: CALL_OW 44
37100: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37101: LD_VAR 0 12
37105: PPUSH
37106: LD_VAR 0 8
37110: PPUSH
37111: LD_INT 0
37113: PPUSH
37114: CALL 39080 0 3
// end ;
37118: GO 37055
37120: POP
37121: POP
// if apemans then
37122: LD_VAR 0 3
37126: IFFALSE 37249
// for i = 1 to apemans do
37128: LD_ADDR_VAR 0 11
37132: PUSH
37133: DOUBLE
37134: LD_INT 1
37136: DEC
37137: ST_TO_ADDR
37138: LD_VAR 0 3
37142: PUSH
37143: FOR_TO
37144: IFFALSE 37247
// begin hc_class = class_apeman ;
37146: LD_ADDR_OWVAR 28
37150: PUSH
37151: LD_INT 12
37153: ST_TO_ADDR
// hc_gallery =  ;
37154: LD_ADDR_OWVAR 33
37158: PUSH
37159: LD_STRING 
37161: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37162: LD_ADDR_OWVAR 35
37166: PUSH
37167: LD_INT 2
37169: NEG
37170: PPUSH
37171: LD_INT 2
37173: PPUSH
37174: CALL_OW 12
37178: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37179: LD_ADDR_OWVAR 31
37183: PUSH
37184: LD_INT 1
37186: PPUSH
37187: LD_INT 3
37189: PPUSH
37190: CALL_OW 12
37194: PUSH
37195: LD_INT 1
37197: PPUSH
37198: LD_INT 3
37200: PPUSH
37201: CALL_OW 12
37205: PUSH
37206: LD_INT 0
37208: PUSH
37209: LD_INT 0
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: LIST
37216: LIST
37217: ST_TO_ADDR
// animal := CreateHuman ;
37218: LD_ADDR_VAR 0 12
37222: PUSH
37223: CALL_OW 44
37227: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37228: LD_VAR 0 12
37232: PPUSH
37233: LD_VAR 0 8
37237: PPUSH
37238: LD_INT 0
37240: PPUSH
37241: CALL 39080 0 3
// end ;
37245: GO 37143
37247: POP
37248: POP
// if enchidnas then
37249: LD_VAR 0 4
37253: IFFALSE 37320
// for i = 1 to enchidnas do
37255: LD_ADDR_VAR 0 11
37259: PUSH
37260: DOUBLE
37261: LD_INT 1
37263: DEC
37264: ST_TO_ADDR
37265: LD_VAR 0 4
37269: PUSH
37270: FOR_TO
37271: IFFALSE 37318
// begin hc_class = 13 ;
37273: LD_ADDR_OWVAR 28
37277: PUSH
37278: LD_INT 13
37280: ST_TO_ADDR
// hc_gallery =  ;
37281: LD_ADDR_OWVAR 33
37285: PUSH
37286: LD_STRING 
37288: ST_TO_ADDR
// animal := CreateHuman ;
37289: LD_ADDR_VAR 0 12
37293: PUSH
37294: CALL_OW 44
37298: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37299: LD_VAR 0 12
37303: PPUSH
37304: LD_VAR 0 8
37308: PPUSH
37309: LD_INT 0
37311: PPUSH
37312: CALL 39080 0 3
// end ;
37316: GO 37270
37318: POP
37319: POP
// if fishes then
37320: LD_VAR 0 7
37324: IFFALSE 37391
// for i = 1 to fishes do
37326: LD_ADDR_VAR 0 11
37330: PUSH
37331: DOUBLE
37332: LD_INT 1
37334: DEC
37335: ST_TO_ADDR
37336: LD_VAR 0 7
37340: PUSH
37341: FOR_TO
37342: IFFALSE 37389
// begin hc_class = 20 ;
37344: LD_ADDR_OWVAR 28
37348: PUSH
37349: LD_INT 20
37351: ST_TO_ADDR
// hc_gallery =  ;
37352: LD_ADDR_OWVAR 33
37356: PUSH
37357: LD_STRING 
37359: ST_TO_ADDR
// animal := CreateHuman ;
37360: LD_ADDR_VAR 0 12
37364: PUSH
37365: CALL_OW 44
37369: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37370: LD_VAR 0 12
37374: PPUSH
37375: LD_VAR 0 9
37379: PPUSH
37380: LD_INT 0
37382: PPUSH
37383: CALL 39080 0 3
// end ;
37387: GO 37341
37389: POP
37390: POP
// end ;
37391: LD_VAR 0 10
37395: RET
// export function WantHeal ( sci , unit ) ; begin
37396: LD_INT 0
37398: PPUSH
// if GetTaskList ( sci ) > 0 then
37399: LD_VAR 0 1
37403: PPUSH
37404: CALL_OW 437
37408: PUSH
37409: LD_INT 0
37411: GREATER
37412: IFFALSE 37482
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37414: LD_VAR 0 1
37418: PPUSH
37419: CALL_OW 437
37423: PUSH
37424: LD_INT 1
37426: ARRAY
37427: PUSH
37428: LD_INT 1
37430: ARRAY
37431: PUSH
37432: LD_STRING l
37434: EQUAL
37435: PUSH
37436: LD_VAR 0 1
37440: PPUSH
37441: CALL_OW 437
37445: PUSH
37446: LD_INT 1
37448: ARRAY
37449: PUSH
37450: LD_INT 4
37452: ARRAY
37453: PUSH
37454: LD_VAR 0 2
37458: EQUAL
37459: AND
37460: IFFALSE 37472
// result := true else
37462: LD_ADDR_VAR 0 3
37466: PUSH
37467: LD_INT 1
37469: ST_TO_ADDR
37470: GO 37480
// result := false ;
37472: LD_ADDR_VAR 0 3
37476: PUSH
37477: LD_INT 0
37479: ST_TO_ADDR
// end else
37480: GO 37490
// result := false ;
37482: LD_ADDR_VAR 0 3
37486: PUSH
37487: LD_INT 0
37489: ST_TO_ADDR
// end ;
37490: LD_VAR 0 3
37494: RET
// export function HealTarget ( sci ) ; begin
37495: LD_INT 0
37497: PPUSH
// if not sci then
37498: LD_VAR 0 1
37502: NOT
37503: IFFALSE 37507
// exit ;
37505: GO 37572
// result := 0 ;
37507: LD_ADDR_VAR 0 2
37511: PUSH
37512: LD_INT 0
37514: ST_TO_ADDR
// if GetTaskList ( sci ) then
37515: LD_VAR 0 1
37519: PPUSH
37520: CALL_OW 437
37524: IFFALSE 37572
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
37526: LD_VAR 0 1
37530: PPUSH
37531: CALL_OW 437
37535: PUSH
37536: LD_INT 1
37538: ARRAY
37539: PUSH
37540: LD_INT 1
37542: ARRAY
37543: PUSH
37544: LD_STRING l
37546: EQUAL
37547: IFFALSE 37572
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
37549: LD_ADDR_VAR 0 2
37553: PUSH
37554: LD_VAR 0 1
37558: PPUSH
37559: CALL_OW 437
37563: PUSH
37564: LD_INT 1
37566: ARRAY
37567: PUSH
37568: LD_INT 4
37570: ARRAY
37571: ST_TO_ADDR
// end ;
37572: LD_VAR 0 2
37576: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
37577: LD_INT 0
37579: PPUSH
37580: PPUSH
37581: PPUSH
37582: PPUSH
// if not base_units then
37583: LD_VAR 0 1
37587: NOT
37588: IFFALSE 37592
// exit ;
37590: GO 37679
// result := false ;
37592: LD_ADDR_VAR 0 2
37596: PUSH
37597: LD_INT 0
37599: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
37600: LD_ADDR_VAR 0 5
37604: PUSH
37605: LD_VAR 0 1
37609: PPUSH
37610: LD_INT 21
37612: PUSH
37613: LD_INT 3
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PPUSH
37620: CALL_OW 72
37624: ST_TO_ADDR
// if not tmp then
37625: LD_VAR 0 5
37629: NOT
37630: IFFALSE 37634
// exit ;
37632: GO 37679
// for i in tmp do
37634: LD_ADDR_VAR 0 3
37638: PUSH
37639: LD_VAR 0 5
37643: PUSH
37644: FOR_IN
37645: IFFALSE 37677
// begin result := EnemyInRange ( i , 22 ) ;
37647: LD_ADDR_VAR 0 2
37651: PUSH
37652: LD_VAR 0 3
37656: PPUSH
37657: LD_INT 22
37659: PPUSH
37660: CALL 35915 0 2
37664: ST_TO_ADDR
// if result then
37665: LD_VAR 0 2
37669: IFFALSE 37675
// exit ;
37671: POP
37672: POP
37673: GO 37679
// end ;
37675: GO 37644
37677: POP
37678: POP
// end ;
37679: LD_VAR 0 2
37683: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
37684: LD_INT 0
37686: PPUSH
37687: PPUSH
// if not units then
37688: LD_VAR 0 1
37692: NOT
37693: IFFALSE 37697
// exit ;
37695: GO 37767
// result := [ ] ;
37697: LD_ADDR_VAR 0 3
37701: PUSH
37702: EMPTY
37703: ST_TO_ADDR
// for i in units do
37704: LD_ADDR_VAR 0 4
37708: PUSH
37709: LD_VAR 0 1
37713: PUSH
37714: FOR_IN
37715: IFFALSE 37765
// if GetTag ( i ) = tag then
37717: LD_VAR 0 4
37721: PPUSH
37722: CALL_OW 110
37726: PUSH
37727: LD_VAR 0 2
37731: EQUAL
37732: IFFALSE 37763
// result := Replace ( result , result + 1 , i ) ;
37734: LD_ADDR_VAR 0 3
37738: PUSH
37739: LD_VAR 0 3
37743: PPUSH
37744: LD_VAR 0 3
37748: PUSH
37749: LD_INT 1
37751: PLUS
37752: PPUSH
37753: LD_VAR 0 4
37757: PPUSH
37758: CALL_OW 1
37762: ST_TO_ADDR
37763: GO 37714
37765: POP
37766: POP
// end ;
37767: LD_VAR 0 3
37771: RET
// export function IsDriver ( un ) ; begin
37772: LD_INT 0
37774: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
37775: LD_ADDR_VAR 0 2
37779: PUSH
37780: LD_VAR 0 1
37784: PUSH
37785: LD_INT 55
37787: PUSH
37788: EMPTY
37789: LIST
37790: PPUSH
37791: CALL_OW 69
37795: IN
37796: ST_TO_ADDR
// end ;
37797: LD_VAR 0 2
37801: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
37802: LD_INT 0
37804: PPUSH
37805: PPUSH
// list := [ ] ;
37806: LD_ADDR_VAR 0 5
37810: PUSH
37811: EMPTY
37812: ST_TO_ADDR
// case d of 0 :
37813: LD_VAR 0 3
37817: PUSH
37818: LD_INT 0
37820: DOUBLE
37821: EQUAL
37822: IFTRUE 37826
37824: GO 37959
37826: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
37827: LD_ADDR_VAR 0 5
37831: PUSH
37832: LD_VAR 0 1
37836: PUSH
37837: LD_INT 4
37839: MINUS
37840: PUSH
37841: LD_VAR 0 2
37845: PUSH
37846: LD_INT 4
37848: MINUS
37849: PUSH
37850: LD_INT 2
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: LIST
37857: PUSH
37858: LD_VAR 0 1
37862: PUSH
37863: LD_INT 3
37865: MINUS
37866: PUSH
37867: LD_VAR 0 2
37871: PUSH
37872: LD_INT 1
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: LIST
37879: PUSH
37880: LD_VAR 0 1
37884: PUSH
37885: LD_INT 4
37887: PLUS
37888: PUSH
37889: LD_VAR 0 2
37893: PUSH
37894: LD_INT 4
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: LIST
37901: PUSH
37902: LD_VAR 0 1
37906: PUSH
37907: LD_INT 3
37909: PLUS
37910: PUSH
37911: LD_VAR 0 2
37915: PUSH
37916: LD_INT 3
37918: PLUS
37919: PUSH
37920: LD_INT 5
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: LIST
37927: PUSH
37928: LD_VAR 0 1
37932: PUSH
37933: LD_VAR 0 2
37937: PUSH
37938: LD_INT 4
37940: PLUS
37941: PUSH
37942: LD_INT 0
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: LIST
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: ST_TO_ADDR
// end ; 1 :
37957: GO 38657
37959: LD_INT 1
37961: DOUBLE
37962: EQUAL
37963: IFTRUE 37967
37965: GO 38100
37967: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
37968: LD_ADDR_VAR 0 5
37972: PUSH
37973: LD_VAR 0 1
37977: PUSH
37978: LD_VAR 0 2
37982: PUSH
37983: LD_INT 4
37985: MINUS
37986: PUSH
37987: LD_INT 3
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: LIST
37994: PUSH
37995: LD_VAR 0 1
37999: PUSH
38000: LD_INT 3
38002: MINUS
38003: PUSH
38004: LD_VAR 0 2
38008: PUSH
38009: LD_INT 3
38011: MINUS
38012: PUSH
38013: LD_INT 2
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: LIST
38020: PUSH
38021: LD_VAR 0 1
38025: PUSH
38026: LD_INT 4
38028: MINUS
38029: PUSH
38030: LD_VAR 0 2
38034: PUSH
38035: LD_INT 1
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: LIST
38042: PUSH
38043: LD_VAR 0 1
38047: PUSH
38048: LD_VAR 0 2
38052: PUSH
38053: LD_INT 3
38055: PLUS
38056: PUSH
38057: LD_INT 0
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: LIST
38064: PUSH
38065: LD_VAR 0 1
38069: PUSH
38070: LD_INT 4
38072: PLUS
38073: PUSH
38074: LD_VAR 0 2
38078: PUSH
38079: LD_INT 4
38081: PLUS
38082: PUSH
38083: LD_INT 5
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: LIST
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: ST_TO_ADDR
// end ; 2 :
38098: GO 38657
38100: LD_INT 2
38102: DOUBLE
38103: EQUAL
38104: IFTRUE 38108
38106: GO 38237
38108: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38109: LD_ADDR_VAR 0 5
38113: PUSH
38114: LD_VAR 0 1
38118: PUSH
38119: LD_VAR 0 2
38123: PUSH
38124: LD_INT 3
38126: MINUS
38127: PUSH
38128: LD_INT 3
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: LIST
38135: PUSH
38136: LD_VAR 0 1
38140: PUSH
38141: LD_INT 4
38143: PLUS
38144: PUSH
38145: LD_VAR 0 2
38149: PUSH
38150: LD_INT 4
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: LIST
38157: PUSH
38158: LD_VAR 0 1
38162: PUSH
38163: LD_VAR 0 2
38167: PUSH
38168: LD_INT 4
38170: PLUS
38171: PUSH
38172: LD_INT 0
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: LIST
38179: PUSH
38180: LD_VAR 0 1
38184: PUSH
38185: LD_INT 3
38187: MINUS
38188: PUSH
38189: LD_VAR 0 2
38193: PUSH
38194: LD_INT 1
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: LIST
38201: PUSH
38202: LD_VAR 0 1
38206: PUSH
38207: LD_INT 4
38209: MINUS
38210: PUSH
38211: LD_VAR 0 2
38215: PUSH
38216: LD_INT 4
38218: MINUS
38219: PUSH
38220: LD_INT 2
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: LIST
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: LIST
38232: LIST
38233: LIST
38234: ST_TO_ADDR
// end ; 3 :
38235: GO 38657
38237: LD_INT 3
38239: DOUBLE
38240: EQUAL
38241: IFTRUE 38245
38243: GO 38378
38245: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38246: LD_ADDR_VAR 0 5
38250: PUSH
38251: LD_VAR 0 1
38255: PUSH
38256: LD_INT 3
38258: PLUS
38259: PUSH
38260: LD_VAR 0 2
38264: PUSH
38265: LD_INT 4
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: LIST
38272: PUSH
38273: LD_VAR 0 1
38277: PUSH
38278: LD_INT 4
38280: PLUS
38281: PUSH
38282: LD_VAR 0 2
38286: PUSH
38287: LD_INT 4
38289: PLUS
38290: PUSH
38291: LD_INT 5
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: LIST
38298: PUSH
38299: LD_VAR 0 1
38303: PUSH
38304: LD_INT 4
38306: MINUS
38307: PUSH
38308: LD_VAR 0 2
38312: PUSH
38313: LD_INT 1
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: LIST
38320: PUSH
38321: LD_VAR 0 1
38325: PUSH
38326: LD_VAR 0 2
38330: PUSH
38331: LD_INT 4
38333: MINUS
38334: PUSH
38335: LD_INT 3
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: LIST
38342: PUSH
38343: LD_VAR 0 1
38347: PUSH
38348: LD_INT 3
38350: MINUS
38351: PUSH
38352: LD_VAR 0 2
38356: PUSH
38357: LD_INT 3
38359: MINUS
38360: PUSH
38361: LD_INT 2
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: LIST
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: ST_TO_ADDR
// end ; 4 :
38376: GO 38657
38378: LD_INT 4
38380: DOUBLE
38381: EQUAL
38382: IFTRUE 38386
38384: GO 38519
38386: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38387: LD_ADDR_VAR 0 5
38391: PUSH
38392: LD_VAR 0 1
38396: PUSH
38397: LD_VAR 0 2
38401: PUSH
38402: LD_INT 4
38404: PLUS
38405: PUSH
38406: LD_INT 0
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: LIST
38413: PUSH
38414: LD_VAR 0 1
38418: PUSH
38419: LD_INT 3
38421: PLUS
38422: PUSH
38423: LD_VAR 0 2
38427: PUSH
38428: LD_INT 3
38430: PLUS
38431: PUSH
38432: LD_INT 5
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: LIST
38439: PUSH
38440: LD_VAR 0 1
38444: PUSH
38445: LD_INT 4
38447: PLUS
38448: PUSH
38449: LD_VAR 0 2
38453: PUSH
38454: LD_INT 4
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: LIST
38461: PUSH
38462: LD_VAR 0 1
38466: PUSH
38467: LD_VAR 0 2
38471: PUSH
38472: LD_INT 3
38474: MINUS
38475: PUSH
38476: LD_INT 3
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: LIST
38483: PUSH
38484: LD_VAR 0 1
38488: PUSH
38489: LD_INT 4
38491: MINUS
38492: PUSH
38493: LD_VAR 0 2
38497: PUSH
38498: LD_INT 4
38500: MINUS
38501: PUSH
38502: LD_INT 2
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: LIST
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: LIST
38514: LIST
38515: LIST
38516: ST_TO_ADDR
// end ; 5 :
38517: GO 38657
38519: LD_INT 5
38521: DOUBLE
38522: EQUAL
38523: IFTRUE 38527
38525: GO 38656
38527: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38528: LD_ADDR_VAR 0 5
38532: PUSH
38533: LD_VAR 0 1
38537: PUSH
38538: LD_INT 4
38540: MINUS
38541: PUSH
38542: LD_VAR 0 2
38546: PUSH
38547: LD_INT 1
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: LIST
38554: PUSH
38555: LD_VAR 0 1
38559: PUSH
38560: LD_VAR 0 2
38564: PUSH
38565: LD_INT 4
38567: MINUS
38568: PUSH
38569: LD_INT 3
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: LIST
38576: PUSH
38577: LD_VAR 0 1
38581: PUSH
38582: LD_INT 4
38584: PLUS
38585: PUSH
38586: LD_VAR 0 2
38590: PUSH
38591: LD_INT 4
38593: PLUS
38594: PUSH
38595: LD_INT 5
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: LIST
38602: PUSH
38603: LD_VAR 0 1
38607: PUSH
38608: LD_INT 3
38610: PLUS
38611: PUSH
38612: LD_VAR 0 2
38616: PUSH
38617: LD_INT 4
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: LIST
38624: PUSH
38625: LD_VAR 0 1
38629: PUSH
38630: LD_VAR 0 2
38634: PUSH
38635: LD_INT 3
38637: PLUS
38638: PUSH
38639: LD_INT 0
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: LIST
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: ST_TO_ADDR
// end ; end ;
38654: GO 38657
38656: POP
// result := list ;
38657: LD_ADDR_VAR 0 4
38661: PUSH
38662: LD_VAR 0 5
38666: ST_TO_ADDR
// end ;
38667: LD_VAR 0 4
38671: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
38672: LD_INT 0
38674: PPUSH
38675: PPUSH
38676: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
38677: LD_VAR 0 1
38681: NOT
38682: PUSH
38683: LD_VAR 0 2
38687: PUSH
38688: LD_INT 1
38690: PUSH
38691: LD_INT 2
38693: PUSH
38694: LD_INT 3
38696: PUSH
38697: LD_INT 4
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: IN
38706: NOT
38707: OR
38708: IFFALSE 38712
// exit ;
38710: GO 38804
// tmp := [ ] ;
38712: LD_ADDR_VAR 0 5
38716: PUSH
38717: EMPTY
38718: ST_TO_ADDR
// for i in units do
38719: LD_ADDR_VAR 0 4
38723: PUSH
38724: LD_VAR 0 1
38728: PUSH
38729: FOR_IN
38730: IFFALSE 38773
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
38732: LD_ADDR_VAR 0 5
38736: PUSH
38737: LD_VAR 0 5
38741: PPUSH
38742: LD_VAR 0 5
38746: PUSH
38747: LD_INT 1
38749: PLUS
38750: PPUSH
38751: LD_VAR 0 4
38755: PPUSH
38756: LD_VAR 0 2
38760: PPUSH
38761: CALL_OW 259
38765: PPUSH
38766: CALL_OW 2
38770: ST_TO_ADDR
38771: GO 38729
38773: POP
38774: POP
// if not tmp then
38775: LD_VAR 0 5
38779: NOT
38780: IFFALSE 38784
// exit ;
38782: GO 38804
// result := SortListByListDesc ( units , tmp ) ;
38784: LD_ADDR_VAR 0 3
38788: PUSH
38789: LD_VAR 0 1
38793: PPUSH
38794: LD_VAR 0 5
38798: PPUSH
38799: CALL_OW 77
38803: ST_TO_ADDR
// end ;
38804: LD_VAR 0 3
38808: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
38809: LD_INT 0
38811: PPUSH
38812: PPUSH
38813: PPUSH
// result := false ;
38814: LD_ADDR_VAR 0 3
38818: PUSH
38819: LD_INT 0
38821: ST_TO_ADDR
// x := GetX ( building ) ;
38822: LD_ADDR_VAR 0 4
38826: PUSH
38827: LD_VAR 0 2
38831: PPUSH
38832: CALL_OW 250
38836: ST_TO_ADDR
// y := GetY ( building ) ;
38837: LD_ADDR_VAR 0 5
38841: PUSH
38842: LD_VAR 0 2
38846: PPUSH
38847: CALL_OW 251
38851: ST_TO_ADDR
// if not building or not x or not y then
38852: LD_VAR 0 2
38856: NOT
38857: PUSH
38858: LD_VAR 0 4
38862: NOT
38863: OR
38864: PUSH
38865: LD_VAR 0 5
38869: NOT
38870: OR
38871: IFFALSE 38875
// exit ;
38873: GO 38967
// if GetTaskList ( unit ) then
38875: LD_VAR 0 1
38879: PPUSH
38880: CALL_OW 437
38884: IFFALSE 38967
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38886: LD_STRING e
38888: PUSH
38889: LD_VAR 0 1
38893: PPUSH
38894: CALL_OW 437
38898: PUSH
38899: LD_INT 1
38901: ARRAY
38902: PUSH
38903: LD_INT 1
38905: ARRAY
38906: EQUAL
38907: PUSH
38908: LD_VAR 0 4
38912: PUSH
38913: LD_VAR 0 1
38917: PPUSH
38918: CALL_OW 437
38922: PUSH
38923: LD_INT 1
38925: ARRAY
38926: PUSH
38927: LD_INT 2
38929: ARRAY
38930: EQUAL
38931: AND
38932: PUSH
38933: LD_VAR 0 5
38937: PUSH
38938: LD_VAR 0 1
38942: PPUSH
38943: CALL_OW 437
38947: PUSH
38948: LD_INT 1
38950: ARRAY
38951: PUSH
38952: LD_INT 3
38954: ARRAY
38955: EQUAL
38956: AND
38957: IFFALSE 38967
// result := true end ;
38959: LD_ADDR_VAR 0 3
38963: PUSH
38964: LD_INT 1
38966: ST_TO_ADDR
// end ;
38967: LD_VAR 0 3
38971: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
38972: LD_INT 0
38974: PPUSH
// result := false ;
38975: LD_ADDR_VAR 0 4
38979: PUSH
38980: LD_INT 0
38982: ST_TO_ADDR
// if GetTaskList ( unit ) then
38983: LD_VAR 0 1
38987: PPUSH
38988: CALL_OW 437
38992: IFFALSE 39075
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38994: LD_STRING M
38996: PUSH
38997: LD_VAR 0 1
39001: PPUSH
39002: CALL_OW 437
39006: PUSH
39007: LD_INT 1
39009: ARRAY
39010: PUSH
39011: LD_INT 1
39013: ARRAY
39014: EQUAL
39015: PUSH
39016: LD_VAR 0 2
39020: PUSH
39021: LD_VAR 0 1
39025: PPUSH
39026: CALL_OW 437
39030: PUSH
39031: LD_INT 1
39033: ARRAY
39034: PUSH
39035: LD_INT 2
39037: ARRAY
39038: EQUAL
39039: AND
39040: PUSH
39041: LD_VAR 0 3
39045: PUSH
39046: LD_VAR 0 1
39050: PPUSH
39051: CALL_OW 437
39055: PUSH
39056: LD_INT 1
39058: ARRAY
39059: PUSH
39060: LD_INT 3
39062: ARRAY
39063: EQUAL
39064: AND
39065: IFFALSE 39075
// result := true ;
39067: LD_ADDR_VAR 0 4
39071: PUSH
39072: LD_INT 1
39074: ST_TO_ADDR
// end ; end ;
39075: LD_VAR 0 4
39079: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39080: LD_INT 0
39082: PPUSH
39083: PPUSH
39084: PPUSH
39085: PPUSH
// if not unit or not area then
39086: LD_VAR 0 1
39090: NOT
39091: PUSH
39092: LD_VAR 0 2
39096: NOT
39097: OR
39098: IFFALSE 39102
// exit ;
39100: GO 39266
// tmp := AreaToList ( area , i ) ;
39102: LD_ADDR_VAR 0 6
39106: PUSH
39107: LD_VAR 0 2
39111: PPUSH
39112: LD_VAR 0 5
39116: PPUSH
39117: CALL_OW 517
39121: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39122: LD_ADDR_VAR 0 5
39126: PUSH
39127: DOUBLE
39128: LD_INT 1
39130: DEC
39131: ST_TO_ADDR
39132: LD_VAR 0 6
39136: PUSH
39137: LD_INT 1
39139: ARRAY
39140: PUSH
39141: FOR_TO
39142: IFFALSE 39264
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39144: LD_ADDR_VAR 0 7
39148: PUSH
39149: LD_VAR 0 6
39153: PUSH
39154: LD_INT 1
39156: ARRAY
39157: PUSH
39158: LD_VAR 0 5
39162: ARRAY
39163: PUSH
39164: LD_VAR 0 6
39168: PUSH
39169: LD_INT 2
39171: ARRAY
39172: PUSH
39173: LD_VAR 0 5
39177: ARRAY
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
39183: LD_VAR 0 7
39187: PUSH
39188: LD_INT 1
39190: ARRAY
39191: PPUSH
39192: LD_VAR 0 7
39196: PUSH
39197: LD_INT 2
39199: ARRAY
39200: PPUSH
39201: CALL_OW 428
39205: PUSH
39206: LD_INT 0
39208: EQUAL
39209: IFFALSE 39262
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39211: LD_VAR 0 1
39215: PPUSH
39216: LD_VAR 0 7
39220: PUSH
39221: LD_INT 1
39223: ARRAY
39224: PPUSH
39225: LD_VAR 0 7
39229: PUSH
39230: LD_INT 2
39232: ARRAY
39233: PPUSH
39234: LD_VAR 0 3
39238: PPUSH
39239: CALL_OW 48
// result := IsPlaced ( unit ) ;
39243: LD_ADDR_VAR 0 4
39247: PUSH
39248: LD_VAR 0 1
39252: PPUSH
39253: CALL_OW 305
39257: ST_TO_ADDR
// exit ;
39258: POP
39259: POP
39260: GO 39266
// end ; end ;
39262: GO 39141
39264: POP
39265: POP
// end ;
39266: LD_VAR 0 4
39270: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39271: LD_INT 0
39273: PPUSH
39274: PPUSH
39275: PPUSH
// if not side or side > 8 then
39276: LD_VAR 0 1
39280: NOT
39281: PUSH
39282: LD_VAR 0 1
39286: PUSH
39287: LD_INT 8
39289: GREATER
39290: OR
39291: IFFALSE 39295
// exit ;
39293: GO 39482
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39295: LD_ADDR_VAR 0 4
39299: PUSH
39300: LD_INT 22
39302: PUSH
39303: LD_VAR 0 1
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: LD_INT 21
39314: PUSH
39315: LD_INT 3
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PPUSH
39326: CALL_OW 69
39330: ST_TO_ADDR
// if not tmp then
39331: LD_VAR 0 4
39335: NOT
39336: IFFALSE 39340
// exit ;
39338: GO 39482
// enable_addtolog := true ;
39340: LD_ADDR_OWVAR 81
39344: PUSH
39345: LD_INT 1
39347: ST_TO_ADDR
// AddToLog ( [ ) ;
39348: LD_STRING [
39350: PPUSH
39351: CALL_OW 561
// for i in tmp do
39355: LD_ADDR_VAR 0 3
39359: PUSH
39360: LD_VAR 0 4
39364: PUSH
39365: FOR_IN
39366: IFFALSE 39473
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39368: LD_STRING [
39370: PUSH
39371: LD_VAR 0 3
39375: PPUSH
39376: CALL_OW 266
39380: STR
39381: PUSH
39382: LD_STRING , 
39384: STR
39385: PUSH
39386: LD_VAR 0 3
39390: PPUSH
39391: CALL_OW 250
39395: STR
39396: PUSH
39397: LD_STRING , 
39399: STR
39400: PUSH
39401: LD_VAR 0 3
39405: PPUSH
39406: CALL_OW 251
39410: STR
39411: PUSH
39412: LD_STRING , 
39414: STR
39415: PUSH
39416: LD_VAR 0 3
39420: PPUSH
39421: CALL_OW 254
39425: STR
39426: PUSH
39427: LD_STRING , 
39429: STR
39430: PUSH
39431: LD_VAR 0 3
39435: PPUSH
39436: LD_INT 1
39438: PPUSH
39439: CALL_OW 268
39443: STR
39444: PUSH
39445: LD_STRING , 
39447: STR
39448: PUSH
39449: LD_VAR 0 3
39453: PPUSH
39454: LD_INT 2
39456: PPUSH
39457: CALL_OW 268
39461: STR
39462: PUSH
39463: LD_STRING ],
39465: STR
39466: PPUSH
39467: CALL_OW 561
// end ;
39471: GO 39365
39473: POP
39474: POP
// AddToLog ( ]; ) ;
39475: LD_STRING ];
39477: PPUSH
39478: CALL_OW 561
// end ;
39482: LD_VAR 0 2
39486: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39487: LD_INT 0
39489: PPUSH
39490: PPUSH
39491: PPUSH
39492: PPUSH
39493: PPUSH
// if not area or not rate or not max then
39494: LD_VAR 0 1
39498: NOT
39499: PUSH
39500: LD_VAR 0 2
39504: NOT
39505: OR
39506: PUSH
39507: LD_VAR 0 4
39511: NOT
39512: OR
39513: IFFALSE 39517
// exit ;
39515: GO 39709
// while 1 do
39517: LD_INT 1
39519: IFFALSE 39709
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39521: LD_ADDR_VAR 0 9
39525: PUSH
39526: LD_VAR 0 1
39530: PPUSH
39531: LD_INT 1
39533: PPUSH
39534: CALL_OW 287
39538: PUSH
39539: LD_INT 10
39541: MUL
39542: ST_TO_ADDR
// r := rate / 10 ;
39543: LD_ADDR_VAR 0 7
39547: PUSH
39548: LD_VAR 0 2
39552: PUSH
39553: LD_INT 10
39555: DIVREAL
39556: ST_TO_ADDR
// time := 1 1$00 ;
39557: LD_ADDR_VAR 0 8
39561: PUSH
39562: LD_INT 2100
39564: ST_TO_ADDR
// if amount < min then
39565: LD_VAR 0 9
39569: PUSH
39570: LD_VAR 0 3
39574: LESS
39575: IFFALSE 39593
// r := r * 2 else
39577: LD_ADDR_VAR 0 7
39581: PUSH
39582: LD_VAR 0 7
39586: PUSH
39587: LD_INT 2
39589: MUL
39590: ST_TO_ADDR
39591: GO 39619
// if amount > max then
39593: LD_VAR 0 9
39597: PUSH
39598: LD_VAR 0 4
39602: GREATER
39603: IFFALSE 39619
// r := r / 2 ;
39605: LD_ADDR_VAR 0 7
39609: PUSH
39610: LD_VAR 0 7
39614: PUSH
39615: LD_INT 2
39617: DIVREAL
39618: ST_TO_ADDR
// time := time / r ;
39619: LD_ADDR_VAR 0 8
39623: PUSH
39624: LD_VAR 0 8
39628: PUSH
39629: LD_VAR 0 7
39633: DIVREAL
39634: ST_TO_ADDR
// if time < 0 then
39635: LD_VAR 0 8
39639: PUSH
39640: LD_INT 0
39642: LESS
39643: IFFALSE 39660
// time := time * - 1 ;
39645: LD_ADDR_VAR 0 8
39649: PUSH
39650: LD_VAR 0 8
39654: PUSH
39655: LD_INT 1
39657: NEG
39658: MUL
39659: ST_TO_ADDR
// wait ( time ) ;
39660: LD_VAR 0 8
39664: PPUSH
39665: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
39669: LD_INT 35
39671: PPUSH
39672: LD_INT 875
39674: PPUSH
39675: CALL_OW 12
39679: PPUSH
39680: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
39684: LD_INT 1
39686: PPUSH
39687: LD_INT 5
39689: PPUSH
39690: CALL_OW 12
39694: PPUSH
39695: LD_VAR 0 1
39699: PPUSH
39700: LD_INT 1
39702: PPUSH
39703: CALL_OW 55
// end ;
39707: GO 39517
// end ;
39709: LD_VAR 0 5
39713: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
39714: LD_INT 0
39716: PPUSH
39717: PPUSH
39718: PPUSH
39719: PPUSH
39720: PPUSH
39721: PPUSH
39722: PPUSH
39723: PPUSH
// if not turrets or not factories then
39724: LD_VAR 0 1
39728: NOT
39729: PUSH
39730: LD_VAR 0 2
39734: NOT
39735: OR
39736: IFFALSE 39740
// exit ;
39738: GO 40047
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
39740: LD_ADDR_VAR 0 10
39744: PUSH
39745: LD_INT 5
39747: PUSH
39748: LD_INT 6
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 2
39757: PUSH
39758: LD_INT 4
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 3
39767: PUSH
39768: LD_INT 5
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: LIST
39779: PUSH
39780: LD_INT 24
39782: PUSH
39783: LD_INT 25
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 23
39792: PUSH
39793: LD_INT 27
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 42
39806: PUSH
39807: LD_INT 43
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 44
39816: PUSH
39817: LD_INT 46
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 45
39826: PUSH
39827: LD_INT 47
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: LIST
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: LIST
39843: ST_TO_ADDR
// result := [ ] ;
39844: LD_ADDR_VAR 0 3
39848: PUSH
39849: EMPTY
39850: ST_TO_ADDR
// for i in turrets do
39851: LD_ADDR_VAR 0 4
39855: PUSH
39856: LD_VAR 0 1
39860: PUSH
39861: FOR_IN
39862: IFFALSE 40045
// begin nat := GetNation ( i ) ;
39864: LD_ADDR_VAR 0 7
39868: PUSH
39869: LD_VAR 0 4
39873: PPUSH
39874: CALL_OW 248
39878: ST_TO_ADDR
// weapon := 0 ;
39879: LD_ADDR_VAR 0 8
39883: PUSH
39884: LD_INT 0
39886: ST_TO_ADDR
// if not nat then
39887: LD_VAR 0 7
39891: NOT
39892: IFFALSE 39896
// continue ;
39894: GO 39861
// for j in list [ nat ] do
39896: LD_ADDR_VAR 0 5
39900: PUSH
39901: LD_VAR 0 10
39905: PUSH
39906: LD_VAR 0 7
39910: ARRAY
39911: PUSH
39912: FOR_IN
39913: IFFALSE 39954
// if GetBWeapon ( i ) = j [ 1 ] then
39915: LD_VAR 0 4
39919: PPUSH
39920: CALL_OW 269
39924: PUSH
39925: LD_VAR 0 5
39929: PUSH
39930: LD_INT 1
39932: ARRAY
39933: EQUAL
39934: IFFALSE 39952
// begin weapon := j [ 2 ] ;
39936: LD_ADDR_VAR 0 8
39940: PUSH
39941: LD_VAR 0 5
39945: PUSH
39946: LD_INT 2
39948: ARRAY
39949: ST_TO_ADDR
// break ;
39950: GO 39954
// end ;
39952: GO 39912
39954: POP
39955: POP
// if not weapon then
39956: LD_VAR 0 8
39960: NOT
39961: IFFALSE 39965
// continue ;
39963: GO 39861
// for k in factories do
39965: LD_ADDR_VAR 0 6
39969: PUSH
39970: LD_VAR 0 2
39974: PUSH
39975: FOR_IN
39976: IFFALSE 40041
// begin weapons := AvailableWeaponList ( k ) ;
39978: LD_ADDR_VAR 0 9
39982: PUSH
39983: LD_VAR 0 6
39987: PPUSH
39988: CALL_OW 478
39992: ST_TO_ADDR
// if not weapons then
39993: LD_VAR 0 9
39997: NOT
39998: IFFALSE 40002
// continue ;
40000: GO 39975
// if weapon in weapons then
40002: LD_VAR 0 8
40006: PUSH
40007: LD_VAR 0 9
40011: IN
40012: IFFALSE 40039
// begin result := [ i , weapon ] ;
40014: LD_ADDR_VAR 0 3
40018: PUSH
40019: LD_VAR 0 4
40023: PUSH
40024: LD_VAR 0 8
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: ST_TO_ADDR
// exit ;
40033: POP
40034: POP
40035: POP
40036: POP
40037: GO 40047
// end ; end ;
40039: GO 39975
40041: POP
40042: POP
// end ;
40043: GO 39861
40045: POP
40046: POP
// end ;
40047: LD_VAR 0 3
40051: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40052: LD_INT 0
40054: PPUSH
// if not side or side > 8 then
40055: LD_VAR 0 3
40059: NOT
40060: PUSH
40061: LD_VAR 0 3
40065: PUSH
40066: LD_INT 8
40068: GREATER
40069: OR
40070: IFFALSE 40074
// exit ;
40072: GO 40133
// if not range then
40074: LD_VAR 0 4
40078: NOT
40079: IFFALSE 40090
// range := - 12 ;
40081: LD_ADDR_VAR 0 4
40085: PUSH
40086: LD_INT 12
40088: NEG
40089: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40090: LD_VAR 0 1
40094: PPUSH
40095: LD_VAR 0 2
40099: PPUSH
40100: LD_VAR 0 3
40104: PPUSH
40105: LD_VAR 0 4
40109: PPUSH
40110: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40114: LD_VAR 0 1
40118: PPUSH
40119: LD_VAR 0 2
40123: PPUSH
40124: LD_VAR 0 3
40128: PPUSH
40129: CALL_OW 331
// end ;
40133: LD_VAR 0 5
40137: RET
// export function Video ( mode ) ; begin
40138: LD_INT 0
40140: PPUSH
// ingame_video = mode ;
40141: LD_ADDR_OWVAR 52
40145: PUSH
40146: LD_VAR 0 1
40150: ST_TO_ADDR
// interface_hidden = mode ;
40151: LD_ADDR_OWVAR 54
40155: PUSH
40156: LD_VAR 0 1
40160: ST_TO_ADDR
// end ;
40161: LD_VAR 0 2
40165: RET
// export function Join ( array , element ) ; begin
40166: LD_INT 0
40168: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40169: LD_ADDR_VAR 0 3
40173: PUSH
40174: LD_VAR 0 1
40178: PPUSH
40179: LD_VAR 0 1
40183: PUSH
40184: LD_INT 1
40186: PLUS
40187: PPUSH
40188: LD_VAR 0 2
40192: PPUSH
40193: CALL_OW 1
40197: ST_TO_ADDR
// end ;
40198: LD_VAR 0 3
40202: RET
// export function JoinUnion ( array , element ) ; begin
40203: LD_INT 0
40205: PPUSH
// result := array union element ;
40206: LD_ADDR_VAR 0 3
40210: PUSH
40211: LD_VAR 0 1
40215: PUSH
40216: LD_VAR 0 2
40220: UNION
40221: ST_TO_ADDR
// end ;
40222: LD_VAR 0 3
40226: RET
// export function GetBehemoths ( side ) ; begin
40227: LD_INT 0
40229: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
40230: LD_ADDR_VAR 0 2
40234: PUSH
40235: LD_INT 22
40237: PUSH
40238: LD_VAR 0 1
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 31
40249: PUSH
40250: LD_INT 25
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PPUSH
40261: CALL_OW 69
40265: ST_TO_ADDR
// end ;
40266: LD_VAR 0 2
40270: RET
// export function Shuffle ( array ) ; var i , index ; begin
40271: LD_INT 0
40273: PPUSH
40274: PPUSH
40275: PPUSH
// result := [ ] ;
40276: LD_ADDR_VAR 0 2
40280: PUSH
40281: EMPTY
40282: ST_TO_ADDR
// if not array then
40283: LD_VAR 0 1
40287: NOT
40288: IFFALSE 40292
// exit ;
40290: GO 40391
// Randomize ;
40292: CALL_OW 10
// for i = array downto 1 do
40296: LD_ADDR_VAR 0 3
40300: PUSH
40301: DOUBLE
40302: LD_VAR 0 1
40306: INC
40307: ST_TO_ADDR
40308: LD_INT 1
40310: PUSH
40311: FOR_DOWNTO
40312: IFFALSE 40389
// begin index := rand ( 1 , array ) ;
40314: LD_ADDR_VAR 0 4
40318: PUSH
40319: LD_INT 1
40321: PPUSH
40322: LD_VAR 0 1
40326: PPUSH
40327: CALL_OW 12
40331: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40332: LD_ADDR_VAR 0 2
40336: PUSH
40337: LD_VAR 0 2
40341: PPUSH
40342: LD_VAR 0 2
40346: PUSH
40347: LD_INT 1
40349: PLUS
40350: PPUSH
40351: LD_VAR 0 1
40355: PUSH
40356: LD_VAR 0 4
40360: ARRAY
40361: PPUSH
40362: CALL_OW 2
40366: ST_TO_ADDR
// array := Delete ( array , index ) ;
40367: LD_ADDR_VAR 0 1
40371: PUSH
40372: LD_VAR 0 1
40376: PPUSH
40377: LD_VAR 0 4
40381: PPUSH
40382: CALL_OW 3
40386: ST_TO_ADDR
// end ;
40387: GO 40311
40389: POP
40390: POP
// end ;
40391: LD_VAR 0 2
40395: RET
// export function GetBaseMaterials ( base ) ; begin
40396: LD_INT 0
40398: PPUSH
// result := [ 0 , 0 , 0 ] ;
40399: LD_ADDR_VAR 0 2
40403: PUSH
40404: LD_INT 0
40406: PUSH
40407: LD_INT 0
40409: PUSH
40410: LD_INT 0
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: LIST
40417: ST_TO_ADDR
// if not base then
40418: LD_VAR 0 1
40422: NOT
40423: IFFALSE 40427
// exit ;
40425: GO 40476
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40427: LD_ADDR_VAR 0 2
40431: PUSH
40432: LD_VAR 0 1
40436: PPUSH
40437: LD_INT 1
40439: PPUSH
40440: CALL_OW 275
40444: PUSH
40445: LD_VAR 0 1
40449: PPUSH
40450: LD_INT 2
40452: PPUSH
40453: CALL_OW 275
40457: PUSH
40458: LD_VAR 0 1
40462: PPUSH
40463: LD_INT 3
40465: PPUSH
40466: CALL_OW 275
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: LIST
40475: ST_TO_ADDR
// end ;
40476: LD_VAR 0 2
40480: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40481: LD_INT 0
40483: PPUSH
40484: PPUSH
// result := array ;
40485: LD_ADDR_VAR 0 3
40489: PUSH
40490: LD_VAR 0 1
40494: ST_TO_ADDR
// if size > 0 then
40495: LD_VAR 0 2
40499: PUSH
40500: LD_INT 0
40502: GREATER
40503: IFFALSE 40549
// for i := array downto size do
40505: LD_ADDR_VAR 0 4
40509: PUSH
40510: DOUBLE
40511: LD_VAR 0 1
40515: INC
40516: ST_TO_ADDR
40517: LD_VAR 0 2
40521: PUSH
40522: FOR_DOWNTO
40523: IFFALSE 40547
// result := Delete ( result , result ) ;
40525: LD_ADDR_VAR 0 3
40529: PUSH
40530: LD_VAR 0 3
40534: PPUSH
40535: LD_VAR 0 3
40539: PPUSH
40540: CALL_OW 3
40544: ST_TO_ADDR
40545: GO 40522
40547: POP
40548: POP
// end ;
40549: LD_VAR 0 3
40553: RET
// export function ComExit ( unit ) ; var tmp ; begin
40554: LD_INT 0
40556: PPUSH
40557: PPUSH
// if not IsInUnit ( unit ) then
40558: LD_VAR 0 1
40562: PPUSH
40563: CALL_OW 310
40567: NOT
40568: IFFALSE 40572
// exit ;
40570: GO 40632
// tmp := IsInUnit ( unit ) ;
40572: LD_ADDR_VAR 0 3
40576: PUSH
40577: LD_VAR 0 1
40581: PPUSH
40582: CALL_OW 310
40586: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
40587: LD_VAR 0 3
40591: PPUSH
40592: CALL_OW 247
40596: PUSH
40597: LD_INT 2
40599: EQUAL
40600: IFFALSE 40613
// ComExitVehicle ( unit ) else
40602: LD_VAR 0 1
40606: PPUSH
40607: CALL_OW 121
40611: GO 40622
// ComExitBuilding ( unit ) ;
40613: LD_VAR 0 1
40617: PPUSH
40618: CALL_OW 122
// result := tmp ;
40622: LD_ADDR_VAR 0 2
40626: PUSH
40627: LD_VAR 0 3
40631: ST_TO_ADDR
// end ;
40632: LD_VAR 0 2
40636: RET
// export function ComExitAll ( units ) ; var i ; begin
40637: LD_INT 0
40639: PPUSH
40640: PPUSH
// if not units then
40641: LD_VAR 0 1
40645: NOT
40646: IFFALSE 40650
// exit ;
40648: GO 40676
// for i in units do
40650: LD_ADDR_VAR 0 3
40654: PUSH
40655: LD_VAR 0 1
40659: PUSH
40660: FOR_IN
40661: IFFALSE 40674
// ComExit ( i ) ;
40663: LD_VAR 0 3
40667: PPUSH
40668: CALL 40554 0 1
40672: GO 40660
40674: POP
40675: POP
// end ;
40676: LD_VAR 0 2
40680: RET
// export function ResetHc ; begin
40681: LD_INT 0
40683: PPUSH
// InitHc ;
40684: CALL_OW 19
// hc_importance := 0 ;
40688: LD_ADDR_OWVAR 32
40692: PUSH
40693: LD_INT 0
40695: ST_TO_ADDR
// end ;
40696: LD_VAR 0 1
40700: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
40701: LD_INT 0
40703: PPUSH
40704: PPUSH
40705: PPUSH
// _x := ( x1 + x2 ) div 2 ;
40706: LD_ADDR_VAR 0 6
40710: PUSH
40711: LD_VAR 0 1
40715: PUSH
40716: LD_VAR 0 3
40720: PLUS
40721: PUSH
40722: LD_INT 2
40724: DIV
40725: ST_TO_ADDR
// if _x < 0 then
40726: LD_VAR 0 6
40730: PUSH
40731: LD_INT 0
40733: LESS
40734: IFFALSE 40751
// _x := _x * - 1 ;
40736: LD_ADDR_VAR 0 6
40740: PUSH
40741: LD_VAR 0 6
40745: PUSH
40746: LD_INT 1
40748: NEG
40749: MUL
40750: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
40751: LD_ADDR_VAR 0 7
40755: PUSH
40756: LD_VAR 0 2
40760: PUSH
40761: LD_VAR 0 4
40765: PLUS
40766: PUSH
40767: LD_INT 2
40769: DIV
40770: ST_TO_ADDR
// if _y < 0 then
40771: LD_VAR 0 7
40775: PUSH
40776: LD_INT 0
40778: LESS
40779: IFFALSE 40796
// _y := _y * - 1 ;
40781: LD_ADDR_VAR 0 7
40785: PUSH
40786: LD_VAR 0 7
40790: PUSH
40791: LD_INT 1
40793: NEG
40794: MUL
40795: ST_TO_ADDR
// result := [ _x , _y ] ;
40796: LD_ADDR_VAR 0 5
40800: PUSH
40801: LD_VAR 0 6
40805: PUSH
40806: LD_VAR 0 7
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: ST_TO_ADDR
// end ;
40815: LD_VAR 0 5
40819: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
40820: LD_INT 0
40822: PPUSH
40823: PPUSH
40824: PPUSH
40825: PPUSH
// task := GetTaskList ( unit ) ;
40826: LD_ADDR_VAR 0 7
40830: PUSH
40831: LD_VAR 0 1
40835: PPUSH
40836: CALL_OW 437
40840: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
40841: LD_VAR 0 7
40845: NOT
40846: PUSH
40847: LD_VAR 0 1
40851: PPUSH
40852: LD_VAR 0 2
40856: PPUSH
40857: CALL_OW 308
40861: NOT
40862: AND
40863: IFFALSE 40867
// exit ;
40865: GO 40985
// if IsInArea ( unit , area ) then
40867: LD_VAR 0 1
40871: PPUSH
40872: LD_VAR 0 2
40876: PPUSH
40877: CALL_OW 308
40881: IFFALSE 40899
// begin ComMoveToArea ( unit , goAway ) ;
40883: LD_VAR 0 1
40887: PPUSH
40888: LD_VAR 0 3
40892: PPUSH
40893: CALL_OW 113
// exit ;
40897: GO 40985
// end ; if task [ 1 ] [ 1 ] <> M then
40899: LD_VAR 0 7
40903: PUSH
40904: LD_INT 1
40906: ARRAY
40907: PUSH
40908: LD_INT 1
40910: ARRAY
40911: PUSH
40912: LD_STRING M
40914: NONEQUAL
40915: IFFALSE 40919
// exit ;
40917: GO 40985
// x := task [ 1 ] [ 2 ] ;
40919: LD_ADDR_VAR 0 5
40923: PUSH
40924: LD_VAR 0 7
40928: PUSH
40929: LD_INT 1
40931: ARRAY
40932: PUSH
40933: LD_INT 2
40935: ARRAY
40936: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
40937: LD_ADDR_VAR 0 6
40941: PUSH
40942: LD_VAR 0 7
40946: PUSH
40947: LD_INT 1
40949: ARRAY
40950: PUSH
40951: LD_INT 3
40953: ARRAY
40954: ST_TO_ADDR
// if InArea ( x , y , area ) then
40955: LD_VAR 0 5
40959: PPUSH
40960: LD_VAR 0 6
40964: PPUSH
40965: LD_VAR 0 2
40969: PPUSH
40970: CALL_OW 309
40974: IFFALSE 40985
// ComStop ( unit ) ;
40976: LD_VAR 0 1
40980: PPUSH
40981: CALL_OW 141
// end ;
40985: LD_VAR 0 4
40989: RET
// export function Abs ( value ) ; begin
40990: LD_INT 0
40992: PPUSH
// result := value ;
40993: LD_ADDR_VAR 0 2
40997: PUSH
40998: LD_VAR 0 1
41002: ST_TO_ADDR
// if value < 0 then
41003: LD_VAR 0 1
41007: PUSH
41008: LD_INT 0
41010: LESS
41011: IFFALSE 41028
// result := value * - 1 ;
41013: LD_ADDR_VAR 0 2
41017: PUSH
41018: LD_VAR 0 1
41022: PUSH
41023: LD_INT 1
41025: NEG
41026: MUL
41027: ST_TO_ADDR
// end ;
41028: LD_VAR 0 2
41032: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41033: LD_INT 0
41035: PPUSH
41036: PPUSH
41037: PPUSH
41038: PPUSH
41039: PPUSH
41040: PPUSH
41041: PPUSH
41042: PPUSH
// if not unit or not building then
41043: LD_VAR 0 1
41047: NOT
41048: PUSH
41049: LD_VAR 0 2
41053: NOT
41054: OR
41055: IFFALSE 41059
// exit ;
41057: GO 41285
// x := GetX ( building ) ;
41059: LD_ADDR_VAR 0 4
41063: PUSH
41064: LD_VAR 0 2
41068: PPUSH
41069: CALL_OW 250
41073: ST_TO_ADDR
// y := GetY ( building ) ;
41074: LD_ADDR_VAR 0 6
41078: PUSH
41079: LD_VAR 0 2
41083: PPUSH
41084: CALL_OW 251
41088: ST_TO_ADDR
// d := GetDir ( building ) ;
41089: LD_ADDR_VAR 0 8
41093: PUSH
41094: LD_VAR 0 2
41098: PPUSH
41099: CALL_OW 254
41103: ST_TO_ADDR
// r := 4 ;
41104: LD_ADDR_VAR 0 9
41108: PUSH
41109: LD_INT 4
41111: ST_TO_ADDR
// for i := 1 to 5 do
41112: LD_ADDR_VAR 0 10
41116: PUSH
41117: DOUBLE
41118: LD_INT 1
41120: DEC
41121: ST_TO_ADDR
41122: LD_INT 5
41124: PUSH
41125: FOR_TO
41126: IFFALSE 41283
// begin _x := ShiftX ( x , d , r + i ) ;
41128: LD_ADDR_VAR 0 5
41132: PUSH
41133: LD_VAR 0 4
41137: PPUSH
41138: LD_VAR 0 8
41142: PPUSH
41143: LD_VAR 0 9
41147: PUSH
41148: LD_VAR 0 10
41152: PLUS
41153: PPUSH
41154: CALL_OW 272
41158: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41159: LD_ADDR_VAR 0 7
41163: PUSH
41164: LD_VAR 0 6
41168: PPUSH
41169: LD_VAR 0 8
41173: PPUSH
41174: LD_VAR 0 9
41178: PUSH
41179: LD_VAR 0 10
41183: PLUS
41184: PPUSH
41185: CALL_OW 273
41189: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41190: LD_VAR 0 5
41194: PPUSH
41195: LD_VAR 0 7
41199: PPUSH
41200: CALL_OW 488
41204: PUSH
41205: LD_VAR 0 5
41209: PPUSH
41210: LD_VAR 0 7
41214: PPUSH
41215: CALL_OW 428
41219: PPUSH
41220: CALL_OW 247
41224: PUSH
41225: LD_INT 3
41227: PUSH
41228: LD_INT 2
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: IN
41235: NOT
41236: AND
41237: IFFALSE 41281
// begin ComMoveXY ( unit , _x , _y ) ;
41239: LD_VAR 0 1
41243: PPUSH
41244: LD_VAR 0 5
41248: PPUSH
41249: LD_VAR 0 7
41253: PPUSH
41254: CALL_OW 111
// result := [ _x , _y ] ;
41258: LD_ADDR_VAR 0 3
41262: PUSH
41263: LD_VAR 0 5
41267: PUSH
41268: LD_VAR 0 7
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: ST_TO_ADDR
// exit ;
41277: POP
41278: POP
41279: GO 41285
// end ; end ;
41281: GO 41125
41283: POP
41284: POP
// end ;
41285: LD_VAR 0 3
41289: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41290: LD_INT 0
41292: PPUSH
41293: PPUSH
41294: PPUSH
// result := 0 ;
41295: LD_ADDR_VAR 0 3
41299: PUSH
41300: LD_INT 0
41302: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41303: LD_VAR 0 1
41307: PUSH
41308: LD_INT 0
41310: LESS
41311: PUSH
41312: LD_VAR 0 1
41316: PUSH
41317: LD_INT 8
41319: GREATER
41320: OR
41321: PUSH
41322: LD_VAR 0 2
41326: PUSH
41327: LD_INT 0
41329: LESS
41330: OR
41331: PUSH
41332: LD_VAR 0 2
41336: PUSH
41337: LD_INT 8
41339: GREATER
41340: OR
41341: IFFALSE 41345
// exit ;
41343: GO 41420
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41345: LD_ADDR_VAR 0 4
41349: PUSH
41350: LD_INT 22
41352: PUSH
41353: LD_VAR 0 2
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PPUSH
41362: CALL_OW 69
41366: PUSH
41367: FOR_IN
41368: IFFALSE 41418
// begin un := UnitShoot ( i ) ;
41370: LD_ADDR_VAR 0 5
41374: PUSH
41375: LD_VAR 0 4
41379: PPUSH
41380: CALL_OW 504
41384: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41385: LD_VAR 0 5
41389: PPUSH
41390: CALL_OW 255
41394: PUSH
41395: LD_VAR 0 1
41399: EQUAL
41400: IFFALSE 41416
// begin result := un ;
41402: LD_ADDR_VAR 0 3
41406: PUSH
41407: LD_VAR 0 5
41411: ST_TO_ADDR
// exit ;
41412: POP
41413: POP
41414: GO 41420
// end ; end ;
41416: GO 41367
41418: POP
41419: POP
// end ;
41420: LD_VAR 0 3
41424: RET
// export function GetCargoBay ( units ) ; begin
41425: LD_INT 0
41427: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41428: LD_ADDR_VAR 0 2
41432: PUSH
41433: LD_VAR 0 1
41437: PPUSH
41438: LD_INT 2
41440: PUSH
41441: LD_INT 34
41443: PUSH
41444: LD_INT 12
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 34
41453: PUSH
41454: LD_INT 51
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 34
41463: PUSH
41464: LD_INT 32
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 34
41473: PUSH
41474: LD_EXP 21
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: PPUSH
41490: CALL_OW 72
41494: ST_TO_ADDR
// end ;
41495: LD_VAR 0 2
41499: RET
// export function Negate ( value ) ; begin
41500: LD_INT 0
41502: PPUSH
// result := not value ;
41503: LD_ADDR_VAR 0 2
41507: PUSH
41508: LD_VAR 0 1
41512: NOT
41513: ST_TO_ADDR
// end ;
41514: LD_VAR 0 2
41518: RET
// export function Inc ( value ) ; begin
41519: LD_INT 0
41521: PPUSH
// result := value + 1 ;
41522: LD_ADDR_VAR 0 2
41526: PUSH
41527: LD_VAR 0 1
41531: PUSH
41532: LD_INT 1
41534: PLUS
41535: ST_TO_ADDR
// end ;
41536: LD_VAR 0 2
41540: RET
// export function Dec ( value ) ; begin
41541: LD_INT 0
41543: PPUSH
// result := value - 1 ;
41544: LD_ADDR_VAR 0 2
41548: PUSH
41549: LD_VAR 0 1
41553: PUSH
41554: LD_INT 1
41556: MINUS
41557: ST_TO_ADDR
// end ;
41558: LD_VAR 0 2
41562: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
41563: LD_INT 0
41565: PPUSH
41566: PPUSH
41567: PPUSH
41568: PPUSH
41569: PPUSH
41570: PPUSH
41571: PPUSH
41572: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
41573: LD_VAR 0 1
41577: PPUSH
41578: LD_VAR 0 2
41582: PPUSH
41583: CALL_OW 488
41587: NOT
41588: PUSH
41589: LD_VAR 0 3
41593: PPUSH
41594: LD_VAR 0 4
41598: PPUSH
41599: CALL_OW 488
41603: NOT
41604: OR
41605: IFFALSE 41618
// begin result := - 1 ;
41607: LD_ADDR_VAR 0 5
41611: PUSH
41612: LD_INT 1
41614: NEG
41615: ST_TO_ADDR
// exit ;
41616: GO 41853
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
41618: LD_ADDR_VAR 0 12
41622: PUSH
41623: LD_VAR 0 1
41627: PPUSH
41628: LD_VAR 0 2
41632: PPUSH
41633: LD_VAR 0 3
41637: PPUSH
41638: LD_VAR 0 4
41642: PPUSH
41643: CALL 40701 0 4
41647: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
41648: LD_ADDR_VAR 0 11
41652: PUSH
41653: LD_VAR 0 1
41657: PPUSH
41658: LD_VAR 0 2
41662: PPUSH
41663: LD_VAR 0 12
41667: PUSH
41668: LD_INT 1
41670: ARRAY
41671: PPUSH
41672: LD_VAR 0 12
41676: PUSH
41677: LD_INT 2
41679: ARRAY
41680: PPUSH
41681: CALL_OW 298
41685: ST_TO_ADDR
// distance := 9999 ;
41686: LD_ADDR_VAR 0 10
41690: PUSH
41691: LD_INT 9999
41693: ST_TO_ADDR
// for i := 0 to 5 do
41694: LD_ADDR_VAR 0 6
41698: PUSH
41699: DOUBLE
41700: LD_INT 0
41702: DEC
41703: ST_TO_ADDR
41704: LD_INT 5
41706: PUSH
41707: FOR_TO
41708: IFFALSE 41851
// begin _x := ShiftX ( x1 , i , centerDist ) ;
41710: LD_ADDR_VAR 0 7
41714: PUSH
41715: LD_VAR 0 1
41719: PPUSH
41720: LD_VAR 0 6
41724: PPUSH
41725: LD_VAR 0 11
41729: PPUSH
41730: CALL_OW 272
41734: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
41735: LD_ADDR_VAR 0 8
41739: PUSH
41740: LD_VAR 0 2
41744: PPUSH
41745: LD_VAR 0 6
41749: PPUSH
41750: LD_VAR 0 11
41754: PPUSH
41755: CALL_OW 273
41759: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41760: LD_VAR 0 7
41764: PPUSH
41765: LD_VAR 0 8
41769: PPUSH
41770: CALL_OW 488
41774: NOT
41775: IFFALSE 41779
// continue ;
41777: GO 41707
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
41779: LD_ADDR_VAR 0 9
41783: PUSH
41784: LD_VAR 0 12
41788: PUSH
41789: LD_INT 1
41791: ARRAY
41792: PPUSH
41793: LD_VAR 0 12
41797: PUSH
41798: LD_INT 2
41800: ARRAY
41801: PPUSH
41802: LD_VAR 0 7
41806: PPUSH
41807: LD_VAR 0 8
41811: PPUSH
41812: CALL_OW 298
41816: ST_TO_ADDR
// if tmp < distance then
41817: LD_VAR 0 9
41821: PUSH
41822: LD_VAR 0 10
41826: LESS
41827: IFFALSE 41849
// begin result := i ;
41829: LD_ADDR_VAR 0 5
41833: PUSH
41834: LD_VAR 0 6
41838: ST_TO_ADDR
// distance := tmp ;
41839: LD_ADDR_VAR 0 10
41843: PUSH
41844: LD_VAR 0 9
41848: ST_TO_ADDR
// end ; end ;
41849: GO 41707
41851: POP
41852: POP
// end ;
41853: LD_VAR 0 5
41857: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41858: LD_INT 0
41860: PPUSH
41861: PPUSH
// if not driver or not IsInUnit ( driver ) then
41862: LD_VAR 0 1
41866: NOT
41867: PUSH
41868: LD_VAR 0 1
41872: PPUSH
41873: CALL_OW 310
41877: NOT
41878: OR
41879: IFFALSE 41883
// exit ;
41881: GO 41973
// vehicle := IsInUnit ( driver ) ;
41883: LD_ADDR_VAR 0 3
41887: PUSH
41888: LD_VAR 0 1
41892: PPUSH
41893: CALL_OW 310
41897: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41898: LD_VAR 0 1
41902: PPUSH
41903: LD_STRING \
41905: PUSH
41906: LD_INT 0
41908: PUSH
41909: LD_INT 0
41911: PUSH
41912: LD_INT 0
41914: PUSH
41915: LD_INT 0
41917: PUSH
41918: LD_INT 0
41920: PUSH
41921: LD_INT 0
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: PUSH
41933: LD_STRING E
41935: PUSH
41936: LD_INT 0
41938: PUSH
41939: LD_INT 0
41941: PUSH
41942: LD_VAR 0 3
41946: PUSH
41947: LD_INT 0
41949: PUSH
41950: LD_INT 0
41952: PUSH
41953: LD_INT 0
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: LIST
41960: LIST
41961: LIST
41962: LIST
41963: LIST
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PPUSH
41969: CALL_OW 446
// end ;
41973: LD_VAR 0 2
41977: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41978: LD_INT 0
41980: PPUSH
41981: PPUSH
// if not driver or not IsInUnit ( driver ) then
41982: LD_VAR 0 1
41986: NOT
41987: PUSH
41988: LD_VAR 0 1
41992: PPUSH
41993: CALL_OW 310
41997: NOT
41998: OR
41999: IFFALSE 42003
// exit ;
42001: GO 42093
// vehicle := IsInUnit ( driver ) ;
42003: LD_ADDR_VAR 0 3
42007: PUSH
42008: LD_VAR 0 1
42012: PPUSH
42013: CALL_OW 310
42017: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42018: LD_VAR 0 1
42022: PPUSH
42023: LD_STRING \
42025: PUSH
42026: LD_INT 0
42028: PUSH
42029: LD_INT 0
42031: PUSH
42032: LD_INT 0
42034: PUSH
42035: LD_INT 0
42037: PUSH
42038: LD_INT 0
42040: PUSH
42041: LD_INT 0
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: PUSH
42053: LD_STRING E
42055: PUSH
42056: LD_INT 0
42058: PUSH
42059: LD_INT 0
42061: PUSH
42062: LD_VAR 0 3
42066: PUSH
42067: LD_INT 0
42069: PUSH
42070: LD_INT 0
42072: PUSH
42073: LD_INT 0
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PPUSH
42089: CALL_OW 447
// end ;
42093: LD_VAR 0 2
42097: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42098: LD_INT 0
42100: PPUSH
42101: PPUSH
42102: PPUSH
// tmp := [ ] ;
42103: LD_ADDR_VAR 0 5
42107: PUSH
42108: EMPTY
42109: ST_TO_ADDR
// for i in units do
42110: LD_ADDR_VAR 0 4
42114: PUSH
42115: LD_VAR 0 1
42119: PUSH
42120: FOR_IN
42121: IFFALSE 42159
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42123: LD_ADDR_VAR 0 5
42127: PUSH
42128: LD_VAR 0 5
42132: PPUSH
42133: LD_VAR 0 5
42137: PUSH
42138: LD_INT 1
42140: PLUS
42141: PPUSH
42142: LD_VAR 0 4
42146: PPUSH
42147: CALL_OW 256
42151: PPUSH
42152: CALL_OW 2
42156: ST_TO_ADDR
42157: GO 42120
42159: POP
42160: POP
// if not tmp then
42161: LD_VAR 0 5
42165: NOT
42166: IFFALSE 42170
// exit ;
42168: GO 42218
// if asc then
42170: LD_VAR 0 2
42174: IFFALSE 42198
// result := SortListByListAsc ( units , tmp ) else
42176: LD_ADDR_VAR 0 3
42180: PUSH
42181: LD_VAR 0 1
42185: PPUSH
42186: LD_VAR 0 5
42190: PPUSH
42191: CALL_OW 76
42195: ST_TO_ADDR
42196: GO 42218
// result := SortListByListDesc ( units , tmp ) ;
42198: LD_ADDR_VAR 0 3
42202: PUSH
42203: LD_VAR 0 1
42207: PPUSH
42208: LD_VAR 0 5
42212: PPUSH
42213: CALL_OW 77
42217: ST_TO_ADDR
// end ;
42218: LD_VAR 0 3
42222: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42223: LD_INT 0
42225: PPUSH
42226: PPUSH
// task := GetTaskList ( mech ) ;
42227: LD_ADDR_VAR 0 4
42231: PUSH
42232: LD_VAR 0 1
42236: PPUSH
42237: CALL_OW 437
42241: ST_TO_ADDR
// if not task then
42242: LD_VAR 0 4
42246: NOT
42247: IFFALSE 42251
// exit ;
42249: GO 42293
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
42251: LD_ADDR_VAR 0 3
42255: PUSH
42256: LD_VAR 0 4
42260: PUSH
42261: LD_INT 1
42263: ARRAY
42264: PUSH
42265: LD_INT 1
42267: ARRAY
42268: PUSH
42269: LD_STRING r
42271: EQUAL
42272: PUSH
42273: LD_VAR 0 4
42277: PUSH
42278: LD_INT 1
42280: ARRAY
42281: PUSH
42282: LD_INT 4
42284: ARRAY
42285: PUSH
42286: LD_VAR 0 2
42290: EQUAL
42291: AND
42292: ST_TO_ADDR
// end ;
42293: LD_VAR 0 3
42297: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42298: LD_INT 0
42300: PPUSH
// SetDir ( unit , d ) ;
42301: LD_VAR 0 1
42305: PPUSH
42306: LD_VAR 0 4
42310: PPUSH
42311: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
42315: LD_VAR 0 1
42319: PPUSH
42320: LD_VAR 0 2
42324: PPUSH
42325: LD_VAR 0 3
42329: PPUSH
42330: LD_VAR 0 5
42334: PPUSH
42335: CALL_OW 48
// end ;
42339: LD_VAR 0 6
42343: RET
// export function ToNaturalNumber ( number ) ; begin
42344: LD_INT 0
42346: PPUSH
// result := number div 1 ;
42347: LD_ADDR_VAR 0 2
42351: PUSH
42352: LD_VAR 0 1
42356: PUSH
42357: LD_INT 1
42359: DIV
42360: ST_TO_ADDR
// if number < 0 then
42361: LD_VAR 0 1
42365: PUSH
42366: LD_INT 0
42368: LESS
42369: IFFALSE 42379
// result := 0 ;
42371: LD_ADDR_VAR 0 2
42375: PUSH
42376: LD_INT 0
42378: ST_TO_ADDR
// end ;
42379: LD_VAR 0 2
42383: RET
// export function SortByClass ( units , class ) ; var un ; begin
42384: LD_INT 0
42386: PPUSH
42387: PPUSH
// if not units or not class then
42388: LD_VAR 0 1
42392: NOT
42393: PUSH
42394: LD_VAR 0 2
42398: NOT
42399: OR
42400: IFFALSE 42404
// exit ;
42402: GO 42499
// result := [ ] ;
42404: LD_ADDR_VAR 0 3
42408: PUSH
42409: EMPTY
42410: ST_TO_ADDR
// for un in units do
42411: LD_ADDR_VAR 0 4
42415: PUSH
42416: LD_VAR 0 1
42420: PUSH
42421: FOR_IN
42422: IFFALSE 42497
// if GetClass ( un ) = class then
42424: LD_VAR 0 4
42428: PPUSH
42429: CALL_OW 257
42433: PUSH
42434: LD_VAR 0 2
42438: EQUAL
42439: IFFALSE 42466
// result := Insert ( result , 1 , un ) else
42441: LD_ADDR_VAR 0 3
42445: PUSH
42446: LD_VAR 0 3
42450: PPUSH
42451: LD_INT 1
42453: PPUSH
42454: LD_VAR 0 4
42458: PPUSH
42459: CALL_OW 2
42463: ST_TO_ADDR
42464: GO 42495
// result := Replace ( result , result + 1 , un ) ;
42466: LD_ADDR_VAR 0 3
42470: PUSH
42471: LD_VAR 0 3
42475: PPUSH
42476: LD_VAR 0 3
42480: PUSH
42481: LD_INT 1
42483: PLUS
42484: PPUSH
42485: LD_VAR 0 4
42489: PPUSH
42490: CALL_OW 1
42494: ST_TO_ADDR
42495: GO 42421
42497: POP
42498: POP
// end ;
42499: LD_VAR 0 3
42503: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
42504: LD_INT 0
42506: PPUSH
42507: PPUSH
42508: PPUSH
42509: PPUSH
42510: PPUSH
42511: PPUSH
42512: PPUSH
// result := [ ] ;
42513: LD_ADDR_VAR 0 4
42517: PUSH
42518: EMPTY
42519: ST_TO_ADDR
// if x - r < 0 then
42520: LD_VAR 0 1
42524: PUSH
42525: LD_VAR 0 3
42529: MINUS
42530: PUSH
42531: LD_INT 0
42533: LESS
42534: IFFALSE 42546
// min_x := 0 else
42536: LD_ADDR_VAR 0 8
42540: PUSH
42541: LD_INT 0
42543: ST_TO_ADDR
42544: GO 42562
// min_x := x - r ;
42546: LD_ADDR_VAR 0 8
42550: PUSH
42551: LD_VAR 0 1
42555: PUSH
42556: LD_VAR 0 3
42560: MINUS
42561: ST_TO_ADDR
// if y - r < 0 then
42562: LD_VAR 0 2
42566: PUSH
42567: LD_VAR 0 3
42571: MINUS
42572: PUSH
42573: LD_INT 0
42575: LESS
42576: IFFALSE 42588
// min_y := 0 else
42578: LD_ADDR_VAR 0 7
42582: PUSH
42583: LD_INT 0
42585: ST_TO_ADDR
42586: GO 42604
// min_y := y - r ;
42588: LD_ADDR_VAR 0 7
42592: PUSH
42593: LD_VAR 0 2
42597: PUSH
42598: LD_VAR 0 3
42602: MINUS
42603: ST_TO_ADDR
// max_x := x + r ;
42604: LD_ADDR_VAR 0 9
42608: PUSH
42609: LD_VAR 0 1
42613: PUSH
42614: LD_VAR 0 3
42618: PLUS
42619: ST_TO_ADDR
// max_y := y + r ;
42620: LD_ADDR_VAR 0 10
42624: PUSH
42625: LD_VAR 0 2
42629: PUSH
42630: LD_VAR 0 3
42634: PLUS
42635: ST_TO_ADDR
// for _x = min_x to max_x do
42636: LD_ADDR_VAR 0 5
42640: PUSH
42641: DOUBLE
42642: LD_VAR 0 8
42646: DEC
42647: ST_TO_ADDR
42648: LD_VAR 0 9
42652: PUSH
42653: FOR_TO
42654: IFFALSE 42755
// for _y = min_y to max_y do
42656: LD_ADDR_VAR 0 6
42660: PUSH
42661: DOUBLE
42662: LD_VAR 0 7
42666: DEC
42667: ST_TO_ADDR
42668: LD_VAR 0 10
42672: PUSH
42673: FOR_TO
42674: IFFALSE 42751
// begin if not ValidHex ( _x , _y ) then
42676: LD_VAR 0 5
42680: PPUSH
42681: LD_VAR 0 6
42685: PPUSH
42686: CALL_OW 488
42690: NOT
42691: IFFALSE 42695
// continue ;
42693: GO 42673
// if GetResourceTypeXY ( _x , _y ) then
42695: LD_VAR 0 5
42699: PPUSH
42700: LD_VAR 0 6
42704: PPUSH
42705: CALL_OW 283
42709: IFFALSE 42749
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
42711: LD_ADDR_VAR 0 4
42715: PUSH
42716: LD_VAR 0 4
42720: PPUSH
42721: LD_VAR 0 4
42725: PUSH
42726: LD_INT 1
42728: PLUS
42729: PPUSH
42730: LD_VAR 0 5
42734: PUSH
42735: LD_VAR 0 6
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PPUSH
42744: CALL_OW 1
42748: ST_TO_ADDR
// end ;
42749: GO 42673
42751: POP
42752: POP
42753: GO 42653
42755: POP
42756: POP
// end ;
42757: LD_VAR 0 4
42761: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
42762: LD_INT 0
42764: PPUSH
42765: PPUSH
42766: PPUSH
42767: PPUSH
42768: PPUSH
42769: PPUSH
42770: PPUSH
42771: PPUSH
// if not units then
42772: LD_VAR 0 1
42776: NOT
42777: IFFALSE 42781
// exit ;
42779: GO 43206
// result := UnitFilter ( units , [ f_ok ] ) ;
42781: LD_ADDR_VAR 0 3
42785: PUSH
42786: LD_VAR 0 1
42790: PPUSH
42791: LD_INT 50
42793: PUSH
42794: EMPTY
42795: LIST
42796: PPUSH
42797: CALL_OW 72
42801: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
42802: LD_ADDR_VAR 0 8
42806: PUSH
42807: LD_VAR 0 1
42811: PUSH
42812: LD_INT 1
42814: ARRAY
42815: PPUSH
42816: CALL_OW 255
42820: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
42821: LD_ADDR_VAR 0 10
42825: PUSH
42826: LD_INT 29
42828: PUSH
42829: LD_EXP 24
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: ST_TO_ADDR
// if not result then
42838: LD_VAR 0 3
42842: NOT
42843: IFFALSE 42847
// exit ;
42845: GO 43206
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
42847: LD_ADDR_VAR 0 5
42851: PUSH
42852: LD_INT 81
42854: PUSH
42855: LD_VAR 0 8
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PPUSH
42864: CALL_OW 69
42868: ST_TO_ADDR
// for i in result do
42869: LD_ADDR_VAR 0 4
42873: PUSH
42874: LD_VAR 0 3
42878: PUSH
42879: FOR_IN
42880: IFFALSE 43204
// begin tag := GetTag ( i ) + 1 ;
42882: LD_ADDR_VAR 0 9
42886: PUSH
42887: LD_VAR 0 4
42891: PPUSH
42892: CALL_OW 110
42896: PUSH
42897: LD_INT 1
42899: PLUS
42900: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
42901: LD_ADDR_VAR 0 7
42905: PUSH
42906: LD_VAR 0 4
42910: PPUSH
42911: CALL_OW 250
42915: PPUSH
42916: LD_VAR 0 4
42920: PPUSH
42921: CALL_OW 251
42925: PPUSH
42926: LD_INT 6
42928: PPUSH
42929: CALL 42504 0 3
42933: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
42934: LD_VAR 0 7
42938: PUSH
42939: LD_VAR 0 4
42943: PPUSH
42944: CALL_OW 264
42948: PUSH
42949: LD_VAR 0 10
42953: IN
42954: NOT
42955: AND
42956: IFFALSE 42995
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
42958: LD_VAR 0 4
42962: PPUSH
42963: LD_VAR 0 7
42967: PUSH
42968: LD_INT 1
42970: ARRAY
42971: PUSH
42972: LD_INT 1
42974: ARRAY
42975: PPUSH
42976: LD_VAR 0 7
42980: PUSH
42981: LD_INT 1
42983: ARRAY
42984: PUSH
42985: LD_INT 2
42987: ARRAY
42988: PPUSH
42989: CALL_OW 116
42993: GO 43202
// if path > tag then
42995: LD_VAR 0 2
42999: PUSH
43000: LD_VAR 0 9
43004: GREATER
43005: IFFALSE 43172
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
43007: LD_ADDR_VAR 0 6
43011: PUSH
43012: LD_VAR 0 5
43016: PPUSH
43017: LD_INT 91
43019: PUSH
43020: LD_VAR 0 4
43024: PUSH
43025: LD_INT 12
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: LIST
43032: PPUSH
43033: CALL_OW 72
43037: ST_TO_ADDR
// if nearEnemy then
43038: LD_VAR 0 6
43042: IFFALSE 43070
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43044: LD_VAR 0 4
43048: PPUSH
43049: LD_VAR 0 6
43053: PPUSH
43054: LD_VAR 0 4
43058: PPUSH
43059: CALL_OW 74
43063: PPUSH
43064: CALL_OW 115
43068: GO 43170
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43070: LD_VAR 0 4
43074: PPUSH
43075: LD_VAR 0 2
43079: PUSH
43080: LD_VAR 0 9
43084: ARRAY
43085: PUSH
43086: LD_INT 1
43088: ARRAY
43089: PPUSH
43090: LD_VAR 0 2
43094: PUSH
43095: LD_VAR 0 9
43099: ARRAY
43100: PUSH
43101: LD_INT 2
43103: ARRAY
43104: PPUSH
43105: CALL_OW 297
43109: PUSH
43110: LD_INT 6
43112: GREATER
43113: IFFALSE 43156
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43115: LD_VAR 0 4
43119: PPUSH
43120: LD_VAR 0 2
43124: PUSH
43125: LD_VAR 0 9
43129: ARRAY
43130: PUSH
43131: LD_INT 1
43133: ARRAY
43134: PPUSH
43135: LD_VAR 0 2
43139: PUSH
43140: LD_VAR 0 9
43144: ARRAY
43145: PUSH
43146: LD_INT 2
43148: ARRAY
43149: PPUSH
43150: CALL_OW 114
43154: GO 43170
// SetTag ( i , tag ) ;
43156: LD_VAR 0 4
43160: PPUSH
43161: LD_VAR 0 9
43165: PPUSH
43166: CALL_OW 109
// end else
43170: GO 43202
// if enemy then
43172: LD_VAR 0 5
43176: IFFALSE 43202
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43178: LD_VAR 0 4
43182: PPUSH
43183: LD_VAR 0 5
43187: PPUSH
43188: LD_VAR 0 4
43192: PPUSH
43193: CALL_OW 74
43197: PPUSH
43198: CALL_OW 115
// end ;
43202: GO 42879
43204: POP
43205: POP
// end ;
43206: LD_VAR 0 3
43210: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43211: LD_INT 0
43213: PPUSH
43214: PPUSH
43215: PPUSH
// if not unit or IsInUnit ( unit ) then
43216: LD_VAR 0 1
43220: NOT
43221: PUSH
43222: LD_VAR 0 1
43226: PPUSH
43227: CALL_OW 310
43231: OR
43232: IFFALSE 43236
// exit ;
43234: GO 43327
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43236: LD_ADDR_VAR 0 4
43240: PUSH
43241: LD_VAR 0 1
43245: PPUSH
43246: CALL_OW 250
43250: PPUSH
43251: LD_VAR 0 2
43255: PPUSH
43256: LD_INT 1
43258: PPUSH
43259: CALL_OW 272
43263: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43264: LD_ADDR_VAR 0 5
43268: PUSH
43269: LD_VAR 0 1
43273: PPUSH
43274: CALL_OW 251
43278: PPUSH
43279: LD_VAR 0 2
43283: PPUSH
43284: LD_INT 1
43286: PPUSH
43287: CALL_OW 273
43291: ST_TO_ADDR
// if ValidHex ( x , y ) then
43292: LD_VAR 0 4
43296: PPUSH
43297: LD_VAR 0 5
43301: PPUSH
43302: CALL_OW 488
43306: IFFALSE 43327
// ComTurnXY ( unit , x , y ) ;
43308: LD_VAR 0 1
43312: PPUSH
43313: LD_VAR 0 4
43317: PPUSH
43318: LD_VAR 0 5
43322: PPUSH
43323: CALL_OW 118
// end ;
43327: LD_VAR 0 3
43331: RET
// export function SeeUnits ( side , units ) ; var i ; begin
43332: LD_INT 0
43334: PPUSH
43335: PPUSH
// result := false ;
43336: LD_ADDR_VAR 0 3
43340: PUSH
43341: LD_INT 0
43343: ST_TO_ADDR
// if not units then
43344: LD_VAR 0 2
43348: NOT
43349: IFFALSE 43353
// exit ;
43351: GO 43398
// for i in units do
43353: LD_ADDR_VAR 0 4
43357: PUSH
43358: LD_VAR 0 2
43362: PUSH
43363: FOR_IN
43364: IFFALSE 43396
// if See ( side , i ) then
43366: LD_VAR 0 1
43370: PPUSH
43371: LD_VAR 0 4
43375: PPUSH
43376: CALL_OW 292
43380: IFFALSE 43394
// begin result := true ;
43382: LD_ADDR_VAR 0 3
43386: PUSH
43387: LD_INT 1
43389: ST_TO_ADDR
// exit ;
43390: POP
43391: POP
43392: GO 43398
// end ;
43394: GO 43363
43396: POP
43397: POP
// end ;
43398: LD_VAR 0 3
43402: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
43403: LD_INT 0
43405: PPUSH
43406: PPUSH
43407: PPUSH
43408: PPUSH
// if not unit or not points then
43409: LD_VAR 0 1
43413: NOT
43414: PUSH
43415: LD_VAR 0 2
43419: NOT
43420: OR
43421: IFFALSE 43425
// exit ;
43423: GO 43515
// dist := 99999 ;
43425: LD_ADDR_VAR 0 5
43429: PUSH
43430: LD_INT 99999
43432: ST_TO_ADDR
// for i in points do
43433: LD_ADDR_VAR 0 4
43437: PUSH
43438: LD_VAR 0 2
43442: PUSH
43443: FOR_IN
43444: IFFALSE 43513
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43446: LD_ADDR_VAR 0 6
43450: PUSH
43451: LD_VAR 0 1
43455: PPUSH
43456: LD_VAR 0 4
43460: PUSH
43461: LD_INT 1
43463: ARRAY
43464: PPUSH
43465: LD_VAR 0 4
43469: PUSH
43470: LD_INT 2
43472: ARRAY
43473: PPUSH
43474: CALL_OW 297
43478: ST_TO_ADDR
// if tmpDist < dist then
43479: LD_VAR 0 6
43483: PUSH
43484: LD_VAR 0 5
43488: LESS
43489: IFFALSE 43511
// begin result := i ;
43491: LD_ADDR_VAR 0 3
43495: PUSH
43496: LD_VAR 0 4
43500: ST_TO_ADDR
// dist := tmpDist ;
43501: LD_ADDR_VAR 0 5
43505: PUSH
43506: LD_VAR 0 6
43510: ST_TO_ADDR
// end ; end ;
43511: GO 43443
43513: POP
43514: POP
// end ; end_of_file
43515: LD_VAR 0 3
43519: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
43520: LD_INT 0
43522: PPUSH
// ar_miner := 81 ;
43523: LD_ADDR_EXP 27
43527: PUSH
43528: LD_INT 81
43530: ST_TO_ADDR
// ar_crane := 88 ;
43531: LD_ADDR_EXP 26
43535: PUSH
43536: LD_INT 88
43538: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
43539: LD_ADDR_EXP 21
43543: PUSH
43544: LD_INT 89
43546: ST_TO_ADDR
// us_hack := 99 ;
43547: LD_ADDR_EXP 22
43551: PUSH
43552: LD_INT 99
43554: ST_TO_ADDR
// us_artillery := 97 ;
43555: LD_ADDR_EXP 23
43559: PUSH
43560: LD_INT 97
43562: ST_TO_ADDR
// ar_bio_bomb := 91 ;
43563: LD_ADDR_EXP 24
43567: PUSH
43568: LD_INT 91
43570: ST_TO_ADDR
// ar_mortar := 92 ;
43571: LD_ADDR_EXP 25
43575: PUSH
43576: LD_INT 92
43578: ST_TO_ADDR
// ru_radar := 98 ;
43579: LD_ADDR_EXP 20
43583: PUSH
43584: LD_INT 98
43586: ST_TO_ADDR
// tech_Artillery := 80 ;
43587: LD_ADDR_EXP 28
43591: PUSH
43592: LD_INT 80
43594: ST_TO_ADDR
// tech_RadMat := 81 ;
43595: LD_ADDR_EXP 29
43599: PUSH
43600: LD_INT 81
43602: ST_TO_ADDR
// tech_BasicTools := 82 ;
43603: LD_ADDR_EXP 30
43607: PUSH
43608: LD_INT 82
43610: ST_TO_ADDR
// tech_Cargo := 83 ;
43611: LD_ADDR_EXP 31
43615: PUSH
43616: LD_INT 83
43618: ST_TO_ADDR
// tech_Track := 84 ;
43619: LD_ADDR_EXP 32
43623: PUSH
43624: LD_INT 84
43626: ST_TO_ADDR
// tech_Crane := 85 ;
43627: LD_ADDR_EXP 33
43631: PUSH
43632: LD_INT 85
43634: ST_TO_ADDR
// tech_Bulldozer := 86 ;
43635: LD_ADDR_EXP 34
43639: PUSH
43640: LD_INT 86
43642: ST_TO_ADDR
// tech_Hovercraft := 87 ;
43643: LD_ADDR_EXP 35
43647: PUSH
43648: LD_INT 87
43650: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
43651: LD_ADDR_EXP 36
43655: PUSH
43656: LD_INT 88
43658: ST_TO_ADDR
// class_mastodont := 31 ;
43659: LD_ADDR_EXP 37
43663: PUSH
43664: LD_INT 31
43666: ST_TO_ADDR
// class_horse := 21 ;
43667: LD_ADDR_EXP 38
43671: PUSH
43672: LD_INT 21
43674: ST_TO_ADDR
// end ;
43675: LD_VAR 0 1
43679: RET
// every 1 do
43680: GO 43682
43682: DISABLE
// InitGlobalVariables ;
43683: CALL 43520 0 0
43687: END
