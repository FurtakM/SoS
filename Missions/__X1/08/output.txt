// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// PrepareArabian ;
   8: CALL 65 0 0
// PrepareRussian ;
  12: CALL 1514 0 0
// PrepareHeike ;
  16: CALL 614 0 0
// Action ;
  20: CALL 2694 0 0
// end ;
  24: END
// export debug , prefix , startAttackOnKabul , startAttackOnHeike ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// prefix := 07_ ;
  36: LD_ADDR_EXP 2
  40: PUSH
  41: LD_STRING 07_
  43: ST_TO_ADDR
// startAttackOnKabul := false ;
  44: LD_ADDR_EXP 3
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// startAttackOnHeike := false ;
  52: LD_ADDR_EXP 4
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// end ; end_of_file
  60: LD_VAR 0 1
  64: RET
// export function PrepareArabian ; var i , un , lives ; begin
  65: LD_INT 0
  67: PPUSH
  68: PPUSH
  69: PPUSH
  70: PPUSH
// SetBName ( ar_dep , newkabul ) ;
  71: LD_INT 2
  73: PPUSH
  74: LD_STRING newkabul
  76: PPUSH
  77: CALL_OW 500
// uc_side := 5 ;
  81: LD_ADDR_OWVAR 20
  85: PUSH
  86: LD_INT 5
  88: ST_TO_ADDR
// uc_nation := 2 ;
  89: LD_ADDR_OWVAR 21
  93: PUSH
  94: LD_INT 2
  96: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do
  97: LD_ADDR_VAR 0 2
 101: PUSH
 102: LD_INT 22
 104: PUSH
 105: LD_INT 2
 107: PUSH
 108: EMPTY
 109: LIST
 110: LIST
 111: PUSH
 112: LD_INT 21
 114: PUSH
 115: LD_INT 3
 117: PUSH
 118: EMPTY
 119: LIST
 120: LIST
 121: PUSH
 122: EMPTY
 123: LIST
 124: LIST
 125: PPUSH
 126: CALL_OW 69
 130: PUSH
 131: FOR_IN
 132: IFFALSE 266
// begin SetSide ( i , 5 ) ;
 134: LD_VAR 0 2
 138: PPUSH
 139: LD_INT 5
 141: PPUSH
 142: CALL_OW 235
// lives := rand ( 248 , 510 ) ;
 146: LD_ADDR_VAR 0 4
 150: PUSH
 151: LD_INT 248
 153: PPUSH
 154: LD_INT 510
 156: PPUSH
 157: CALL_OW 12
 161: ST_TO_ADDR
// SetLives ( i , lives ) ;
 162: LD_VAR 0 2
 166: PPUSH
 167: LD_VAR 0 4
 171: PPUSH
 172: CALL_OW 234
// if GetBType ( i ) = b_bunker then
 176: LD_VAR 0 2
 180: PPUSH
 181: CALL_OW 266
 185: PUSH
 186: LD_INT 32
 188: EQUAL
 189: IFFALSE 264
// begin PlaceWeaponTurret ( i , [ ar_double_machine_gun , ar_gun , ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] ) ;
 191: LD_VAR 0 2
 195: PPUSH
 196: LD_INT 24
 198: PUSH
 199: LD_INT 27
 201: PUSH
 202: LD_INT 25
 204: PUSH
 205: LD_INT 28
 207: PUSH
 208: EMPTY
 209: LIST
 210: LIST
 211: LIST
 212: LIST
 213: PUSH
 214: LD_INT 1
 216: PPUSH
 217: LD_INT 4
 219: PPUSH
 220: CALL_OW 12
 224: ARRAY
 225: PPUSH
 226: CALL_OW 431
// if lives > 250 then
 230: LD_VAR 0 4
 234: PUSH
 235: LD_INT 250
 237: GREATER
 238: IFFALSE 264
// begin PrepareSoldier ( false , 6 ) ;
 240: LD_INT 0
 242: PPUSH
 243: LD_INT 6
 245: PPUSH
 246: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
 250: CALL_OW 44
 254: PPUSH
 255: LD_VAR 0 2
 259: PPUSH
 260: CALL_OW 52
// end ; end ; end ;
 264: GO 131
 266: POP
 267: POP
// for i := 1 to 9 do
 268: LD_ADDR_VAR 0 2
 272: PUSH
 273: DOUBLE
 274: LD_INT 1
 276: DEC
 277: ST_TO_ADDR
 278: LD_INT 9
 280: PUSH
 281: FOR_TO
 282: IFFALSE 361
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 0 ) ;
 284: LD_INT 0
 286: PPUSH
 287: LD_INT 1
 289: PPUSH
 290: LD_INT 4
 292: PPUSH
 293: CALL_OW 12
 297: PPUSH
 298: LD_INT 0
 300: PPUSH
 301: CALL_OW 380
// un := CreateHuman ;
 305: LD_ADDR_VAR 0 3
 309: PUSH
 310: CALL_OW 44
 314: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 315: LD_VAR 0 3
 319: PPUSH
 320: LD_INT 0
 322: PPUSH
 323: LD_INT 5
 325: PPUSH
 326: CALL_OW 12
 330: PPUSH
 331: CALL_OW 233
// PlaceUnitArea ( un , kabulDeadArea , false ) ;
 335: LD_VAR 0 3
 339: PPUSH
 340: LD_INT 1
 342: PPUSH
 343: LD_INT 0
 345: PPUSH
 346: CALL_OW 49
// KillUnit ( un ) ;
 350: LD_VAR 0 3
 354: PPUSH
 355: CALL_OW 66
// end ;
 359: GO 281
 361: POP
 362: POP
// for i := 1 to 3 do
 363: LD_ADDR_VAR 0 2
 367: PUSH
 368: DOUBLE
 369: LD_INT 1
 371: DEC
 372: ST_TO_ADDR
 373: LD_INT 3
 375: PUSH
 376: FOR_TO
 377: IFFALSE 531
// begin vc_chassis := ar_medium_trike ;
 379: LD_ADDR_OWVAR 37
 383: PUSH
 384: LD_INT 13
 386: ST_TO_ADDR
// vc_engine := [ engine_solar , engine_combustion ] [ rand ( 1 , 2 ) ] ;
 387: LD_ADDR_OWVAR 39
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 1
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: PUSH
 402: LD_INT 1
 404: PPUSH
 405: LD_INT 2
 407: PPUSH
 408: CALL_OW 12
 412: ARRAY
 413: ST_TO_ADDR
// vc_control := [ control_manual , control_remote ] [ rand ( 1 , 2 ) ] ;
 414: LD_ADDR_OWVAR 38
 418: PUSH
 419: LD_INT 1
 421: PUSH
 422: LD_INT 2
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: PUSH
 429: LD_INT 1
 431: PPUSH
 432: LD_INT 2
 434: PPUSH
 435: CALL_OW 12
 439: ARRAY
 440: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_gatling_gun , ar_gun ] [ rand ( 1 , 3 ) ] ;
 441: LD_ADDR_OWVAR 40
 445: PUSH
 446: LD_INT 24
 448: PUSH
 449: LD_INT 25
 451: PUSH
 452: LD_INT 27
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: LIST
 459: PUSH
 460: LD_INT 1
 462: PPUSH
 463: LD_INT 3
 465: PPUSH
 466: CALL_OW 12
 470: ARRAY
 471: ST_TO_ADDR
// un := CreateVehicle ;
 472: LD_ADDR_VAR 0 3
 476: PUSH
 477: CALL_OW 45
 481: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 482: LD_VAR 0 3
 486: PPUSH
 487: LD_INT 0
 489: PPUSH
 490: LD_INT 5
 492: PPUSH
 493: CALL_OW 12
 497: PPUSH
 498: CALL_OW 233
// PlaceUnitArea ( un , kabulVDeadArea , false ) ;
 502: LD_VAR 0 3
 506: PPUSH
 507: LD_INT 2
 509: PPUSH
 510: LD_INT 0
 512: PPUSH
 513: CALL_OW 49
// SetLives ( un , 200 ) ;
 517: LD_VAR 0 3
 521: PPUSH
 522: LD_INT 200
 524: PPUSH
 525: CALL_OW 234
// end ;
 529: GO 376
 531: POP
 532: POP
// for i := 1 to 3 do
 533: LD_ADDR_VAR 0 2
 537: PUSH
 538: DOUBLE
 539: LD_INT 1
 541: DEC
 542: ST_TO_ADDR
 543: LD_INT 3
 545: PUSH
 546: FOR_TO
 547: IFFALSE 607
// begin PrepareSoldier ( false , 6 ) ;
 549: LD_INT 0
 551: PPUSH
 552: LD_INT 6
 554: PPUSH
 555: CALL_OW 381
// un := CreateHuman ;
 559: LD_ADDR_VAR 0 3
 563: PUSH
 564: CALL_OW 44
 568: ST_TO_ADDR
// PlaceUnitXYR ( un , 106 , 47 , 4 , false ) ;
 569: LD_VAR 0 3
 573: PPUSH
 574: LD_INT 106
 576: PPUSH
 577: LD_INT 47
 579: PPUSH
 580: LD_INT 4
 582: PPUSH
 583: LD_INT 0
 585: PPUSH
 586: CALL_OW 50
// ComAgressiveMove ( un , 71 , 53 ) ;
 590: LD_VAR 0 3
 594: PPUSH
 595: LD_INT 71
 597: PPUSH
 598: LD_INT 53
 600: PPUSH
 601: CALL_OW 114
// end ;
 605: GO 546
 607: POP
 608: POP
// end ;
 609: LD_VAR 0 1
 613: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad ; export function PrepareHeike ; var i , tmp , un , veh ; begin
 614: LD_INT 0
 616: PPUSH
 617: PPUSH
 618: PPUSH
 619: PPUSH
 620: PPUSH
// uc_side := 5 ;
 621: LD_ADDR_OWVAR 20
 625: PUSH
 626: LD_INT 5
 628: ST_TO_ADDR
// uc_nation := 1 ;
 629: LD_ADDR_OWVAR 21
 633: PUSH
 634: LD_INT 1
 636: ST_TO_ADDR
// americanSquad := [ ] ;
 637: LD_ADDR_EXP 17
 641: PUSH
 642: EMPTY
 643: ST_TO_ADDR
// if not americanSquad then
 644: LD_EXP 17
 648: NOT
 649: IFFALSE 714
// begin for i := 1 to 4 do
 651: LD_ADDR_VAR 0 2
 655: PUSH
 656: DOUBLE
 657: LD_INT 1
 659: DEC
 660: ST_TO_ADDR
 661: LD_INT 4
 663: PUSH
 664: FOR_TO
 665: IFFALSE 710
// begin PrepareHuman ( false , rand ( 2 , 4 ) , 6 ) ;
 667: LD_INT 0
 669: PPUSH
 670: LD_INT 2
 672: PPUSH
 673: LD_INT 4
 675: PPUSH
 676: CALL_OW 12
 680: PPUSH
 681: LD_INT 6
 683: PPUSH
 684: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 688: LD_ADDR_EXP 17
 692: PUSH
 693: LD_EXP 17
 697: PPUSH
 698: CALL_OW 44
 702: PPUSH
 703: CALL 40971 0 2
 707: ST_TO_ADDR
// end ;
 708: GO 664
 710: POP
 711: POP
// end else
 712: GO 765
// begin for i in americanSquad do
 714: LD_ADDR_VAR 0 2
 718: PUSH
 719: LD_EXP 17
 723: PUSH
 724: FOR_IN
 725: IFFALSE 763
// if GetClass ( i ) in [ class_sniper , class_soldier ] then
 727: LD_VAR 0 2
 731: PPUSH
 732: CALL_OW 257
 736: PUSH
 737: LD_INT 5
 739: PUSH
 740: LD_INT 1
 742: PUSH
 743: EMPTY
 744: LIST
 745: LIST
 746: IN
 747: IFFALSE 761
// SetClass ( i , class_engineer ) ;
 749: LD_VAR 0 2
 753: PPUSH
 754: LD_INT 2
 756: PPUSH
 757: CALL_OW 336
 761: GO 724
 763: POP
 764: POP
// end ; uc_side := 2 ;
 765: LD_ADDR_OWVAR 20
 769: PUSH
 770: LD_INT 2
 772: ST_TO_ADDR
// uc_nation := 2 ;
 773: LD_ADDR_OWVAR 21
 777: PUSH
 778: LD_INT 2
 780: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 781: LD_ADDR_EXP 5
 785: PUSH
 786: LD_STRING Heike
 788: PPUSH
 789: LD_EXP 1
 793: NOT
 794: PPUSH
 795: LD_EXP 2
 799: PPUSH
 800: CALL 3650 0 3
 804: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 805: LD_ADDR_EXP 8
 809: PUSH
 810: LD_STRING Ibrahim
 812: PPUSH
 813: LD_EXP 1
 817: NOT
 818: PPUSH
 819: LD_EXP 2
 823: PPUSH
 824: CALL 3650 0 3
 828: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 829: LD_ADDR_EXP 6
 833: PUSH
 834: LD_STRING Givi
 836: PPUSH
 837: LD_EXP 1
 841: NOT
 842: PPUSH
 843: LD_EXP 2
 847: PPUSH
 848: CALL 3650 0 3
 852: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 853: LD_ADDR_EXP 9
 857: PUSH
 858: LD_STRING Kamil
 860: PPUSH
 861: LD_EXP 1
 865: NOT
 866: PPUSH
 867: LD_EXP 2
 871: PPUSH
 872: CALL 3650 0 3
 876: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 877: LD_ADDR_EXP 10
 881: PUSH
 882: LD_STRING Kaia
 884: PPUSH
 885: LD_EXP 1
 889: NOT
 890: PPUSH
 891: LD_EXP 2
 895: PPUSH
 896: CALL 3650 0 3
 900: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 901: LD_ADDR_EXP 11
 905: PUSH
 906: LD_STRING Sophia
 908: PPUSH
 909: LD_EXP 1
 913: NOT
 914: PPUSH
 915: LD_EXP 2
 919: PPUSH
 920: CALL 3650 0 3
 924: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 925: LD_ADDR_EXP 12
 929: PUSH
 930: LD_STRING Markov
 932: PPUSH
 933: LD_EXP 1
 937: NOT
 938: PPUSH
 939: LD_EXP 2
 943: PPUSH
 944: CALL 3650 0 3
 948: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 949: LD_ADDR_EXP 15
 953: PUSH
 954: LD_STRING Aviradze
 956: PPUSH
 957: LD_EXP 1
 961: NOT
 962: PPUSH
 963: LD_EXP 2
 967: PPUSH
 968: CALL 3650 0 3
 972: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 973: LD_ADDR_EXP 14
 977: PUSH
 978: LD_STRING Kurt
 980: PPUSH
 981: LD_EXP 1
 985: NOT
 986: PPUSH
 987: LD_EXP 2
 991: PPUSH
 992: CALL 3650 0 3
 996: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 997: LD_ADDR_EXP 7
1001: PUSH
1002: LD_STRING Mike
1004: PPUSH
1005: LD_EXP 1
1009: NOT
1010: PPUSH
1011: LD_EXP 2
1015: PPUSH
1016: CALL 3650 0 3
1020: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
1021: LD_ADDR_EXP 13
1025: PUSH
1026: LD_STRING Olaf
1028: PPUSH
1029: LD_EXP 1
1033: NOT
1034: PPUSH
1035: LD_EXP 2
1039: PPUSH
1040: CALL 3650 0 3
1044: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
1045: LD_ADDR_EXP 16
1049: PUSH
1050: LD_STRING 07_others
1052: PPUSH
1053: CALL_OW 31
1057: ST_TO_ADDR
// veh := [ [ ar_half_tracked , engine_combustion , control_manual , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] , ] ;
1058: LD_ADDR_VAR 0 5
1062: PUSH
1063: LD_INT 14
1065: PUSH
1066: LD_INT 1
1068: PUSH
1069: LD_INT 1
1071: PUSH
1072: LD_INT 25
1074: PUSH
1075: EMPTY
1076: LIST
1077: LIST
1078: LIST
1079: LIST
1080: PUSH
1081: LD_INT 14
1083: PUSH
1084: LD_INT 1
1086: PUSH
1087: LD_INT 1
1089: PUSH
1090: LD_INT 27
1092: PUSH
1093: EMPTY
1094: LIST
1095: LIST
1096: LIST
1097: LIST
1098: PUSH
1099: LD_INT 14
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: LD_INT 1
1107: PUSH
1108: LD_INT 27
1110: PUSH
1111: EMPTY
1112: LIST
1113: LIST
1114: LIST
1115: LIST
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: LIST
1121: ST_TO_ADDR
// for i in veh do
1122: LD_ADDR_VAR 0 2
1126: PUSH
1127: LD_VAR 0 5
1131: PUSH
1132: FOR_IN
1133: IFFALSE 1238
// begin vc_chassis := i [ 1 ] ;
1135: LD_ADDR_OWVAR 37
1139: PUSH
1140: LD_VAR 0 2
1144: PUSH
1145: LD_INT 1
1147: ARRAY
1148: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
1149: LD_ADDR_OWVAR 39
1153: PUSH
1154: LD_VAR 0 2
1158: PUSH
1159: LD_INT 2
1161: ARRAY
1162: ST_TO_ADDR
// vc_control := i [ 3 ] ;
1163: LD_ADDR_OWVAR 38
1167: PUSH
1168: LD_VAR 0 2
1172: PUSH
1173: LD_INT 3
1175: ARRAY
1176: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
1177: LD_ADDR_OWVAR 40
1181: PUSH
1182: LD_VAR 0 2
1186: PUSH
1187: LD_INT 4
1189: ARRAY
1190: ST_TO_ADDR
// vc_fuel_battery := 25 ;
1191: LD_ADDR_OWVAR 41
1195: PUSH
1196: LD_INT 25
1198: ST_TO_ADDR
// un := CreateVehicle ;
1199: LD_ADDR_VAR 0 4
1203: PUSH
1204: CALL_OW 45
1208: ST_TO_ADDR
// SetDir ( un , 0 ) ;
1209: LD_VAR 0 4
1213: PPUSH
1214: LD_INT 0
1216: PPUSH
1217: CALL_OW 233
// PlaceUnitArea ( un , heikeVehArea , false ) ;
1221: LD_VAR 0 4
1225: PPUSH
1226: LD_INT 7
1228: PPUSH
1229: LD_INT 0
1231: PPUSH
1232: CALL_OW 49
// end ;
1236: GO 1132
1238: POP
1239: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad union americanSquad ;
1240: LD_ADDR_VAR 0 3
1244: PUSH
1245: LD_EXP 7
1249: PUSH
1250: LD_EXP 8
1254: PUSH
1255: LD_EXP 9
1259: PUSH
1260: LD_EXP 10
1264: PUSH
1265: LD_EXP 11
1269: PUSH
1270: LD_EXP 12
1274: PUSH
1275: LD_EXP 13
1279: PUSH
1280: LD_EXP 14
1284: PUSH
1285: LD_EXP 15
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: PUSH
1301: LD_EXP 16
1305: UNION
1306: PUSH
1307: LD_EXP 17
1311: UNION
1312: ST_TO_ADDR
// for i in tmp do
1313: LD_ADDR_VAR 0 2
1317: PUSH
1318: LD_VAR 0 3
1322: PUSH
1323: FOR_IN
1324: IFFALSE 1444
// begin if GetClass ( i ) in [ class_mechanic , class_engineer , class_scientistic ] and FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) then
1326: LD_VAR 0 2
1330: PPUSH
1331: CALL_OW 257
1335: PUSH
1336: LD_INT 3
1338: PUSH
1339: LD_INT 2
1341: PUSH
1342: LD_INT 4
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: LIST
1349: IN
1350: PUSH
1351: LD_INT 22
1353: PUSH
1354: LD_INT 2
1356: PUSH
1357: EMPTY
1358: LIST
1359: LIST
1360: PUSH
1361: LD_INT 58
1363: PUSH
1364: EMPTY
1365: LIST
1366: PUSH
1367: EMPTY
1368: LIST
1369: LIST
1370: PPUSH
1371: CALL_OW 69
1375: AND
1376: IFFALSE 1418
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) [ 1 ] ) else
1378: LD_VAR 0 2
1382: PPUSH
1383: LD_INT 22
1385: PUSH
1386: LD_INT 2
1388: PUSH
1389: EMPTY
1390: LIST
1391: LIST
1392: PUSH
1393: LD_INT 58
1395: PUSH
1396: EMPTY
1397: LIST
1398: PUSH
1399: EMPTY
1400: LIST
1401: LIST
1402: PPUSH
1403: CALL_OW 69
1407: PUSH
1408: LD_INT 1
1410: ARRAY
1411: PPUSH
1412: CALL_OW 52
1416: GO 1433
// PlaceUnitArea ( i , heikePeopleArea , false ) ;
1418: LD_VAR 0 2
1422: PPUSH
1423: LD_INT 6
1425: PPUSH
1426: LD_INT 0
1428: PPUSH
1429: CALL_OW 49
// ComHold ( i ) ;
1433: LD_VAR 0 2
1437: PPUSH
1438: CALL_OW 140
// end ;
1442: GO 1323
1444: POP
1445: POP
// PlaceUnitArea ( Heike , heikeArea , false ) ;
1446: LD_EXP 5
1450: PPUSH
1451: LD_INT 5
1453: PPUSH
1454: LD_INT 0
1456: PPUSH
1457: CALL_OW 49
// ComTurnUnit ( Heike , ar_dep ) ;
1461: LD_EXP 5
1465: PPUSH
1466: LD_INT 2
1468: PPUSH
1469: CALL_OW 119
// if Givi then
1473: LD_EXP 6
1477: IFFALSE 1509
// begin PlaceUnitXY ( Givi , 129 , 158 , false ) ;
1479: LD_EXP 6
1483: PPUSH
1484: LD_INT 129
1486: PPUSH
1487: LD_INT 158
1489: PPUSH
1490: LD_INT 0
1492: PPUSH
1493: CALL_OW 48
// ComTurnUnit ( Givi , ar_dep ) ;
1497: LD_EXP 6
1501: PPUSH
1502: LD_INT 2
1504: PPUSH
1505: CALL_OW 119
// end ; end ; end_of_file
1509: LD_VAR 0 1
1513: RET
// export kabulAttackers , heikeAttackers , Burlak ; export function PrepareRussian ; var i , un ; begin
1514: LD_INT 0
1516: PPUSH
1517: PPUSH
1518: PPUSH
// uc_side := 3 ;
1519: LD_ADDR_OWVAR 20
1523: PUSH
1524: LD_INT 3
1526: ST_TO_ADDR
// uc_nation := 3 ;
1527: LD_ADDR_OWVAR 21
1531: PUSH
1532: LD_INT 3
1534: ST_TO_ADDR
// Burlak := NewCharacter ( Burlak ) ;
1535: LD_ADDR_EXP 20
1539: PUSH
1540: LD_STRING Burlak
1542: PPUSH
1543: CALL_OW 25
1547: ST_TO_ADDR
// kabulAttackers := [ ] ;
1548: LD_ADDR_EXP 18
1552: PUSH
1553: EMPTY
1554: ST_TO_ADDR
// heikeAttackers := [ ] ;
1555: LD_ADDR_EXP 19
1559: PUSH
1560: EMPTY
1561: ST_TO_ADDR
// for i := 1 to 9 do
1562: LD_ADDR_VAR 0 2
1566: PUSH
1567: DOUBLE
1568: LD_INT 1
1570: DEC
1571: ST_TO_ADDR
1572: LD_INT 9
1574: PUSH
1575: FOR_TO
1576: IFFALSE 1668
// begin PrepareHuman ( false , class_soldier , 0 ) ;
1578: LD_INT 0
1580: PPUSH
1581: LD_INT 1
1583: PPUSH
1584: LD_INT 0
1586: PPUSH
1587: CALL_OW 380
// un := CreateHuman ;
1591: LD_ADDR_VAR 0 3
1595: PUSH
1596: CALL_OW 44
1600: ST_TO_ADDR
// if Prob ( 40 ) then
1601: LD_INT 40
1603: PPUSH
1604: CALL_OW 13
1608: IFFALSE 1622
// SetClass ( un , class_bazooker ) ;
1610: LD_VAR 0 3
1614: PPUSH
1615: LD_INT 9
1617: PPUSH
1618: CALL_OW 336
// SetDir ( un , rand ( 0 , 5 ) ) ;
1622: LD_VAR 0 3
1626: PPUSH
1627: LD_INT 0
1629: PPUSH
1630: LD_INT 5
1632: PPUSH
1633: CALL_OW 12
1637: PPUSH
1638: CALL_OW 233
// PlaceUnitArea ( un , KabulRuDead , false ) ;
1642: LD_VAR 0 3
1646: PPUSH
1647: LD_INT 10
1649: PPUSH
1650: LD_INT 0
1652: PPUSH
1653: CALL_OW 49
// KillUnit ( un ) ;
1657: LD_VAR 0 3
1661: PPUSH
1662: CALL_OW 66
// end ;
1666: GO 1575
1668: POP
1669: POP
// for i := 1 to 9 do
1670: LD_ADDR_VAR 0 2
1674: PUSH
1675: DOUBLE
1676: LD_INT 1
1678: DEC
1679: ST_TO_ADDR
1680: LD_INT 9
1682: PUSH
1683: FOR_TO
1684: IFFALSE 1905
// begin if rand ( 0 , 1 ) then
1686: LD_INT 0
1688: PPUSH
1689: LD_INT 1
1691: PPUSH
1692: CALL_OW 12
1696: IFFALSE 1759
// begin PrepareHuman ( false , class_soldier , 7 ) ;
1698: LD_INT 0
1700: PPUSH
1701: LD_INT 1
1703: PPUSH
1704: LD_INT 7
1706: PPUSH
1707: CALL_OW 380
// un := CreateHuman ;
1711: LD_ADDR_VAR 0 3
1715: PUSH
1716: CALL_OW 44
1720: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1721: LD_VAR 0 3
1725: PPUSH
1726: LD_INT 1
1728: PPUSH
1729: CALL_OW 233
// PlaceUnitArea ( un , kabulRuArea , false ) ;
1733: LD_VAR 0 3
1737: PPUSH
1738: LD_INT 3
1740: PPUSH
1741: LD_INT 0
1743: PPUSH
1744: CALL_OW 49
// ComHold ( un ) ;
1748: LD_VAR 0 3
1752: PPUSH
1753: CALL_OW 140
// end else
1757: GO 1874
// begin vc_chassis := ru_medium_tracked ;
1759: LD_ADDR_OWVAR 37
1763: PUSH
1764: LD_INT 22
1766: ST_TO_ADDR
// vc_engine := engine_combustion ;
1767: LD_ADDR_OWVAR 39
1771: PUSH
1772: LD_INT 1
1774: ST_TO_ADDR
// vc_control := control_manual ;
1775: LD_ADDR_OWVAR 38
1779: PUSH
1780: LD_INT 1
1782: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
1783: LD_ADDR_OWVAR 40
1787: PUSH
1788: LD_INT 44
1790: PUSH
1791: LD_INT 43
1793: PUSH
1794: LD_INT 45
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: LIST
1801: PUSH
1802: LD_INT 1
1804: PPUSH
1805: LD_INT 3
1807: PPUSH
1808: CALL_OW 12
1812: ARRAY
1813: ST_TO_ADDR
// un := CreateVehicle ;
1814: LD_ADDR_VAR 0 3
1818: PUSH
1819: CALL_OW 45
1823: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1824: LD_VAR 0 3
1828: PPUSH
1829: LD_INT 1
1831: PPUSH
1832: CALL_OW 233
// PlaceUnitArea ( un , kabulRuArea , false ) ;
1836: LD_VAR 0 3
1840: PPUSH
1841: LD_INT 3
1843: PPUSH
1844: LD_INT 0
1846: PPUSH
1847: CALL_OW 49
// ComHold ( un ) ;
1851: LD_VAR 0 3
1855: PPUSH
1856: CALL_OW 140
// PlaceHumanInUnit ( CreateHuman , un ) ;
1860: CALL_OW 44
1864: PPUSH
1865: LD_VAR 0 3
1869: PPUSH
1870: CALL_OW 52
// end ; kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
1874: LD_ADDR_EXP 18
1878: PUSH
1879: LD_EXP 18
1883: PPUSH
1884: LD_EXP 18
1888: PUSH
1889: LD_INT 1
1891: PLUS
1892: PPUSH
1893: LD_VAR 0 3
1897: PPUSH
1898: CALL_OW 1
1902: ST_TO_ADDR
// end ;
1903: GO 1683
1905: POP
1906: POP
// for i := 1 to 5 do
1907: LD_ADDR_VAR 0 2
1911: PUSH
1912: DOUBLE
1913: LD_INT 1
1915: DEC
1916: ST_TO_ADDR
1917: LD_INT 5
1919: PUSH
1920: FOR_TO
1921: IFFALSE 2154
// begin if rand ( 0 , 1 ) then
1923: LD_INT 0
1925: PPUSH
1926: LD_INT 1
1928: PPUSH
1929: CALL_OW 12
1933: IFFALSE 2008
// begin PrepareHuman ( false , class_soldier , 7 ) ;
1935: LD_INT 0
1937: PPUSH
1938: LD_INT 1
1940: PPUSH
1941: LD_INT 7
1943: PPUSH
1944: CALL_OW 380
// un := CreateHuman ;
1948: LD_ADDR_VAR 0 3
1952: PUSH
1953: CALL_OW 44
1957: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1958: LD_VAR 0 3
1962: PPUSH
1963: LD_INT 1
1965: PPUSH
1966: CALL_OW 233
// SetClass ( un , class_bazooker ) ;
1970: LD_VAR 0 3
1974: PPUSH
1975: LD_INT 9
1977: PPUSH
1978: CALL_OW 336
// PlaceUnitArea ( un , kabulRu2Area , false ) ;
1982: LD_VAR 0 3
1986: PPUSH
1987: LD_INT 8
1989: PPUSH
1990: LD_INT 0
1992: PPUSH
1993: CALL_OW 49
// ComHold ( un ) ;
1997: LD_VAR 0 3
2001: PPUSH
2002: CALL_OW 140
// end else
2006: GO 2123
// begin vc_chassis := ru_heavy_wheeled ;
2008: LD_ADDR_OWVAR 37
2012: PUSH
2013: LD_INT 23
2015: ST_TO_ADDR
// vc_engine := engine_combustion ;
2016: LD_ADDR_OWVAR 39
2020: PUSH
2021: LD_INT 1
2023: ST_TO_ADDR
// vc_control := control_manual ;
2024: LD_ADDR_OWVAR 38
2028: PUSH
2029: LD_INT 1
2031: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
2032: LD_ADDR_OWVAR 40
2036: PUSH
2037: LD_INT 44
2039: PUSH
2040: LD_INT 43
2042: PUSH
2043: LD_INT 45
2045: PUSH
2046: EMPTY
2047: LIST
2048: LIST
2049: LIST
2050: PUSH
2051: LD_INT 1
2053: PPUSH
2054: LD_INT 3
2056: PPUSH
2057: CALL_OW 12
2061: ARRAY
2062: ST_TO_ADDR
// un := CreateVehicle ;
2063: LD_ADDR_VAR 0 3
2067: PUSH
2068: CALL_OW 45
2072: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2073: LD_VAR 0 3
2077: PPUSH
2078: LD_INT 4
2080: PPUSH
2081: CALL_OW 233
// PlaceUnitArea ( un , kabulRu2Area , false ) ;
2085: LD_VAR 0 3
2089: PPUSH
2090: LD_INT 8
2092: PPUSH
2093: LD_INT 0
2095: PPUSH
2096: CALL_OW 49
// ComHold ( un ) ;
2100: LD_VAR 0 3
2104: PPUSH
2105: CALL_OW 140
// PlaceHumanInUnit ( CreateHuman , un ) ;
2109: CALL_OW 44
2113: PPUSH
2114: LD_VAR 0 3
2118: PPUSH
2119: CALL_OW 52
// end ; kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
2123: LD_ADDR_EXP 18
2127: PUSH
2128: LD_EXP 18
2132: PPUSH
2133: LD_EXP 18
2137: PUSH
2138: LD_INT 1
2140: PLUS
2141: PPUSH
2142: LD_VAR 0 3
2146: PPUSH
2147: CALL_OW 1
2151: ST_TO_ADDR
// end ;
2152: GO 1920
2154: POP
2155: POP
// for i := 1 to 5 do
2156: LD_ADDR_VAR 0 2
2160: PUSH
2161: DOUBLE
2162: LD_INT 1
2164: DEC
2165: ST_TO_ADDR
2166: LD_INT 5
2168: PUSH
2169: FOR_TO
2170: IFFALSE 2274
// begin PrepareHuman ( false , class_soldier , 7 ) ;
2172: LD_INT 0
2174: PPUSH
2175: LD_INT 1
2177: PPUSH
2178: LD_INT 7
2180: PPUSH
2181: CALL_OW 380
// un := CreateHuman ;
2185: LD_ADDR_VAR 0 3
2189: PUSH
2190: CALL_OW 44
2194: ST_TO_ADDR
// SetDir ( un , 0 ) ;
2195: LD_VAR 0 3
2199: PPUSH
2200: LD_INT 0
2202: PPUSH
2203: CALL_OW 233
// SetClass ( un , class_bazooker ) ;
2207: LD_VAR 0 3
2211: PPUSH
2212: LD_INT 9
2214: PPUSH
2215: CALL_OW 336
// PlaceUnitArea ( un , kabulRu3Area , false ) ;
2219: LD_VAR 0 3
2223: PPUSH
2224: LD_INT 9
2226: PPUSH
2227: LD_INT 0
2229: PPUSH
2230: CALL_OW 49
// ComHold ( un ) ;
2234: LD_VAR 0 3
2238: PPUSH
2239: CALL_OW 140
// kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
2243: LD_ADDR_EXP 18
2247: PUSH
2248: LD_EXP 18
2252: PPUSH
2253: LD_EXP 18
2257: PUSH
2258: LD_INT 1
2260: PLUS
2261: PPUSH
2262: LD_VAR 0 3
2266: PPUSH
2267: CALL_OW 1
2271: ST_TO_ADDR
// end ;
2272: GO 2169
2274: POP
2275: POP
// for i := 1 to 12 do
2276: LD_ADDR_VAR 0 2
2280: PUSH
2281: DOUBLE
2282: LD_INT 1
2284: DEC
2285: ST_TO_ADDR
2286: LD_INT 12
2288: PUSH
2289: FOR_TO
2290: IFFALSE 2541
// begin if Prob ( 22 ) then
2292: LD_INT 22
2294: PPUSH
2295: CALL_OW 13
2299: IFFALSE 2362
// begin PrepareHuman ( false , class_soldier , 10 ) ;
2301: LD_INT 0
2303: PPUSH
2304: LD_INT 1
2306: PPUSH
2307: LD_INT 10
2309: PPUSH
2310: CALL_OW 380
// un := CreateHuman ;
2314: LD_ADDR_VAR 0 3
2318: PUSH
2319: CALL_OW 44
2323: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2324: LD_VAR 0 3
2328: PPUSH
2329: LD_INT 3
2331: PPUSH
2332: CALL_OW 233
// PlaceUnitArea ( un , heikeRuArea , false ) ;
2336: LD_VAR 0 3
2340: PPUSH
2341: LD_INT 4
2343: PPUSH
2344: LD_INT 0
2346: PPUSH
2347: CALL_OW 49
// ComHold ( un ) ;
2351: LD_VAR 0 3
2355: PPUSH
2356: CALL_OW 140
// end else
2360: GO 2510
// begin vc_chassis := [ ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] ;
2362: LD_ADDR_OWVAR 37
2366: PUSH
2367: LD_INT 22
2369: PUSH
2370: LD_INT 24
2372: PUSH
2373: EMPTY
2374: LIST
2375: LIST
2376: PUSH
2377: LD_INT 1
2379: PPUSH
2380: LD_INT 2
2382: PPUSH
2383: CALL_OW 12
2387: ARRAY
2388: ST_TO_ADDR
// vc_engine := engine_combustion ;
2389: LD_ADDR_OWVAR 39
2393: PUSH
2394: LD_INT 1
2396: ST_TO_ADDR
// vc_control := control_manual ;
2397: LD_ADDR_OWVAR 38
2401: PUSH
2402: LD_INT 1
2404: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 4 ) ] ;
2405: LD_ADDR_OWVAR 40
2409: PUSH
2410: LD_INT 44
2412: PUSH
2413: LD_INT 43
2415: PUSH
2416: LD_INT 43
2418: PUSH
2419: LD_INT 45
2421: PUSH
2422: EMPTY
2423: LIST
2424: LIST
2425: LIST
2426: LIST
2427: PUSH
2428: LD_INT 1
2430: PPUSH
2431: LD_INT 4
2433: PPUSH
2434: CALL_OW 12
2438: ARRAY
2439: ST_TO_ADDR
// un := CreateVehicle ;
2440: LD_ADDR_VAR 0 3
2444: PUSH
2445: CALL_OW 45
2449: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2450: LD_VAR 0 3
2454: PPUSH
2455: LD_INT 3
2457: PPUSH
2458: CALL_OW 233
// PlaceUnitArea ( un , heikeRuArea , false ) ;
2462: LD_VAR 0 3
2466: PPUSH
2467: LD_INT 4
2469: PPUSH
2470: LD_INT 0
2472: PPUSH
2473: CALL_OW 49
// ComHold ( un ) ;
2477: LD_VAR 0 3
2481: PPUSH
2482: CALL_OW 140
// PrepareMechanic ( false , 10 ) ;
2486: LD_INT 0
2488: PPUSH
2489: LD_INT 10
2491: PPUSH
2492: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
2496: CALL_OW 44
2500: PPUSH
2501: LD_VAR 0 3
2505: PPUSH
2506: CALL_OW 52
// end ; heikeAttackers := Replace ( heikeAttackers , heikeAttackers + 1 , un ) ;
2510: LD_ADDR_EXP 19
2514: PUSH
2515: LD_EXP 19
2519: PPUSH
2520: LD_EXP 19
2524: PUSH
2525: LD_INT 1
2527: PLUS
2528: PPUSH
2529: LD_VAR 0 3
2533: PPUSH
2534: CALL_OW 1
2538: ST_TO_ADDR
// end ;
2539: GO 2289
2541: POP
2542: POP
// end ;
2543: LD_VAR 0 1
2547: RET
// every 0 0$2 trigger startAttackOnKabul and kabulAttackers do var i ;
2548: LD_EXP 3
2552: PUSH
2553: LD_EXP 18
2557: AND
2558: IFFALSE 2618
2560: GO 2562
2562: DISABLE
2563: LD_INT 0
2565: PPUSH
// begin enable ;
2566: ENABLE
// for i in kabulAttackers do
2567: LD_ADDR_VAR 0 1
2571: PUSH
2572: LD_EXP 18
2576: PUSH
2577: FOR_IN
2578: IFFALSE 2616
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 5 ] ) , i ) ) ;
2580: LD_VAR 0 1
2584: PPUSH
2585: LD_INT 22
2587: PUSH
2588: LD_INT 5
2590: PUSH
2591: EMPTY
2592: LIST
2593: LIST
2594: PPUSH
2595: CALL_OW 69
2599: PPUSH
2600: LD_VAR 0 1
2604: PPUSH
2605: CALL_OW 74
2609: PPUSH
2610: CALL_OW 115
2614: GO 2577
2616: POP
2617: POP
// end ;
2618: PPOPN 1
2620: END
// every 0 0$1 trigger startAttackOnHeike and heikeAttackers do var i ;
2621: LD_EXP 4
2625: PUSH
2626: LD_EXP 19
2630: AND
2631: IFFALSE 2691
2633: GO 2635
2635: DISABLE
2636: LD_INT 0
2638: PPUSH
// begin enable ;
2639: ENABLE
// for i in heikeAttackers do
2640: LD_ADDR_VAR 0 1
2644: PUSH
2645: LD_EXP 19
2649: PUSH
2650: FOR_IN
2651: IFFALSE 2689
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ) ;
2653: LD_VAR 0 1
2657: PPUSH
2658: LD_INT 22
2660: PUSH
2661: LD_INT 2
2663: PUSH
2664: EMPTY
2665: LIST
2666: LIST
2667: PPUSH
2668: CALL_OW 69
2672: PPUSH
2673: LD_VAR 0 1
2677: PPUSH
2678: CALL_OW 74
2682: PPUSH
2683: CALL_OW 115
2687: GO 2650
2689: POP
2690: POP
// end ; end_of_file
2691: PPOPN 1
2693: END
// export function Action ; var i ; begin
2694: LD_INT 0
2696: PPUSH
2697: PPUSH
// Video ( true ) ;
2698: LD_INT 1
2700: PPUSH
2701: CALL 40943 0 1
// PlaceSeeing ( 111 , 168 , 2 , - 25 ) ;
2705: LD_INT 111
2707: PPUSH
2708: LD_INT 168
2710: PPUSH
2711: LD_INT 2
2713: PPUSH
2714: LD_INT 25
2716: NEG
2717: PPUSH
2718: CALL_OW 330
// PlaceSeeing ( 102 , 47 , 2 , - 40 ) ;
2722: LD_INT 102
2724: PPUSH
2725: LD_INT 47
2727: PPUSH
2728: LD_INT 2
2730: PPUSH
2731: LD_INT 40
2733: NEG
2734: PPUSH
2735: CALL_OW 330
// CenterNowOnUnits ( Heike ) ;
2739: LD_EXP 5
2743: PPUSH
2744: CALL_OW 87
// startAttackOnKabul := true ;
2748: LD_ADDR_EXP 3
2752: PUSH
2753: LD_INT 1
2755: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2756: LD_INT 70
2758: PPUSH
2759: CALL_OW 67
// CenterOnXY ( 102 , 47 ) ;
2763: LD_INT 102
2765: PPUSH
2766: LD_INT 47
2768: PPUSH
2769: CALL_OW 84
// if Givi then
2773: LD_EXP 6
2777: IFFALSE 2968
// begin ComMoveXY ( Givi , 113 , 162 ) ;
2779: LD_EXP 6
2783: PPUSH
2784: LD_INT 113
2786: PPUSH
2787: LD_INT 162
2789: PPUSH
2790: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
2794: LD_EXP 6
2798: PPUSH
2799: LD_EXP 5
2803: PPUSH
2804: CALL_OW 179
// Say ( Givi , DG-Intro-1 ) ;
2808: LD_EXP 6
2812: PPUSH
2813: LD_STRING DG-Intro-1
2815: PPUSH
2816: CALL_OW 88
// Say ( Givi , DG-Intro-2 ) ;
2820: LD_EXP 6
2824: PPUSH
2825: LD_STRING DG-Intro-2
2827: PPUSH
2828: CALL_OW 88
// CenterOnUnits ( Heike ) ;
2832: LD_EXP 5
2836: PPUSH
2837: CALL_OW 85
// RemoveSeeing ( 102 , 47 , 2 ) ;
2841: LD_INT 102
2843: PPUSH
2844: LD_INT 47
2846: PPUSH
2847: LD_INT 2
2849: PPUSH
2850: CALL_OW 331
// wait ( 0 0$0.3 ) ;
2854: LD_INT 10
2856: PPUSH
2857: CALL_OW 67
// Say ( Heike , DH-Intro-3 ) ;
2861: LD_EXP 5
2865: PPUSH
2866: LD_STRING DH-Intro-3
2868: PPUSH
2869: CALL_OW 88
// if Mike then
2873: LD_EXP 7
2877: IFFALSE 2966
// begin PlaceSeeing ( 92 , 129 , 2 , - 18 ) ;
2879: LD_INT 92
2881: PPUSH
2882: LD_INT 129
2884: PPUSH
2885: LD_INT 2
2887: PPUSH
2888: LD_INT 18
2890: NEG
2891: PPUSH
2892: CALL_OW 330
// CenterOnXY ( 92 , 129 ) ;
2896: LD_INT 92
2898: PPUSH
2899: LD_INT 129
2901: PPUSH
2902: CALL_OW 84
// ComTurnUnit ( [ Mike , Kaia ] , Heike ) ;
2906: LD_EXP 7
2910: PUSH
2911: LD_EXP 10
2915: PUSH
2916: EMPTY
2917: LIST
2918: LIST
2919: PPUSH
2920: LD_EXP 5
2924: PPUSH
2925: CALL_OW 119
// Say ( Mike , DM-Intro-4 ) ;
2929: LD_EXP 7
2933: PPUSH
2934: LD_STRING DM-Intro-4
2936: PPUSH
2937: CALL_OW 88
// Say ( Kaia , DK-Intro-5 ) ;
2941: LD_EXP 10
2945: PPUSH
2946: LD_STRING DK-Intro-5
2948: PPUSH
2949: CALL_OW 88
// RemoveSeeing ( 92 , 129 , 2 ) ;
2953: LD_INT 92
2955: PPUSH
2956: LD_INT 129
2958: PPUSH
2959: LD_INT 2
2961: PPUSH
2962: CALL_OW 331
// end ; end else
2966: GO 3221
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-1 ) then
2968: LD_EXP 16
2972: PPUSH
2973: LD_INT 26
2975: PUSH
2976: LD_INT 1
2978: PUSH
2979: EMPTY
2980: LIST
2981: LIST
2982: PPUSH
2983: CALL_OW 72
2987: PUSH
2988: LD_INT 1
2990: ARRAY
2991: PPUSH
2992: LD_STRING DArm-Intro-b-1
2994: PPUSH
2995: CALL_OW 88
2999: NOT
3000: IFFALSE 3033
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-1 ) ;
3002: LD_EXP 16
3006: PPUSH
3007: LD_INT 26
3009: PUSH
3010: LD_INT 2
3012: PUSH
3013: EMPTY
3014: LIST
3015: LIST
3016: PPUSH
3017: CALL_OW 72
3021: PUSH
3022: LD_INT 1
3024: ARRAY
3025: PPUSH
3026: LD_STRING DArf-Intro-b-1
3028: PPUSH
3029: CALL_OW 88
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-2 ) then
3033: LD_EXP 16
3037: PPUSH
3038: LD_INT 26
3040: PUSH
3041: LD_INT 1
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PPUSH
3048: CALL_OW 72
3052: PUSH
3053: LD_INT 1
3055: ARRAY
3056: PPUSH
3057: LD_STRING DArm-Intro-b-2
3059: PPUSH
3060: CALL_OW 88
3064: NOT
3065: IFFALSE 3098
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-2 ) ;
3067: LD_EXP 16
3071: PPUSH
3072: LD_INT 26
3074: PUSH
3075: LD_INT 2
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: PPUSH
3082: CALL_OW 72
3086: PUSH
3087: LD_INT 1
3089: ARRAY
3090: PPUSH
3091: LD_STRING DArf-Intro-b-2
3093: PPUSH
3094: CALL_OW 88
// if Kaia then
3098: LD_EXP 10
3102: IFFALSE 3116
// Say ( Kaia , DK-Intro-5 ) ;
3104: LD_EXP 10
3108: PPUSH
3109: LD_STRING DK-Intro-5
3111: PPUSH
3112: CALL_OW 88
// PlaceSeeing ( 92 , 129 , 2 , - 18 ) ;
3116: LD_INT 92
3118: PPUSH
3119: LD_INT 129
3121: PPUSH
3122: LD_INT 2
3124: PPUSH
3125: LD_INT 18
3127: NEG
3128: PPUSH
3129: CALL_OW 330
// CenterOnXY ( 92 , 129 ) ;
3133: LD_INT 92
3135: PPUSH
3136: LD_INT 129
3138: PPUSH
3139: CALL_OW 84
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-4 ) then
3143: LD_EXP 16
3147: PPUSH
3148: LD_INT 26
3150: PUSH
3151: LD_INT 1
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: PPUSH
3158: CALL_OW 72
3162: PUSH
3163: LD_INT 1
3165: ARRAY
3166: PPUSH
3167: LD_STRING DArm-Intro-b-4
3169: PPUSH
3170: CALL_OW 88
3174: NOT
3175: IFFALSE 3208
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-4 ) ;
3177: LD_EXP 16
3181: PPUSH
3182: LD_INT 26
3184: PUSH
3185: LD_INT 2
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PPUSH
3192: CALL_OW 72
3196: PUSH
3197: LD_INT 1
3199: ARRAY
3200: PPUSH
3201: LD_STRING DArf-Intro-b-4
3203: PPUSH
3204: CALL_OW 88
// RemoveSeeing ( 92 , 129 , 2 ) ;
3208: LD_INT 92
3210: PPUSH
3211: LD_INT 129
3213: PPUSH
3214: LD_INT 2
3216: PPUSH
3217: CALL_OW 331
// end ; CenterOnUnits ( Heike ) ;
3221: LD_EXP 5
3225: PPUSH
3226: CALL_OW 85
// SayRadio ( Burlak , DB-Intro-6 ) ;
3230: LD_EXP 20
3234: PPUSH
3235: LD_STRING DB-Intro-6
3237: PPUSH
3238: CALL_OW 94
// Say ( Heike , DH-Intro-7 ) ;
3242: LD_EXP 5
3246: PPUSH
3247: LD_STRING DH-Intro-7
3249: PPUSH
3250: CALL_OW 88
// SayRadio ( Burlak , DB-Intro-8 ) ;
3254: LD_EXP 20
3258: PPUSH
3259: LD_STRING DB-Intro-8
3261: PPUSH
3262: CALL_OW 94
// SayRadio ( Burlak , DB-Intro-9 ) ;
3266: LD_EXP 20
3270: PPUSH
3271: LD_STRING DB-Intro-9
3273: PPUSH
3274: CALL_OW 94
// if Givi then
3278: LD_EXP 6
3282: IFFALSE 3310
// begin Say ( Givi , DG-Intro-10 ) ;
3284: LD_EXP 6
3288: PPUSH
3289: LD_STRING DG-Intro-10
3291: PPUSH
3292: CALL_OW 88
// Say ( Kaia , DK-Intro-11 ) ;
3296: LD_EXP 10
3300: PPUSH
3301: LD_STRING DK-Intro-11
3303: PPUSH
3304: CALL_OW 88
// end else
3308: GO 3375
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-10 ) then
3310: LD_EXP 16
3314: PPUSH
3315: LD_INT 26
3317: PUSH
3318: LD_INT 1
3320: PUSH
3321: EMPTY
3322: LIST
3323: LIST
3324: PPUSH
3325: CALL_OW 72
3329: PUSH
3330: LD_INT 1
3332: ARRAY
3333: PPUSH
3334: LD_STRING DArm-Intro-b-10
3336: PPUSH
3337: CALL_OW 88
3341: NOT
3342: IFFALSE 3375
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-10 ) ;
3344: LD_EXP 16
3348: PPUSH
3349: LD_INT 26
3351: PUSH
3352: LD_INT 2
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PPUSH
3359: CALL_OW 72
3363: PUSH
3364: LD_INT 1
3366: ARRAY
3367: PPUSH
3368: LD_STRING DArf-Intro-b-10
3370: PPUSH
3371: CALL_OW 88
// Say ( Mike , DM-Intro-12 ) ;
3375: LD_EXP 7
3379: PPUSH
3380: LD_STRING DM-Intro-12
3382: PPUSH
3383: CALL_OW 88
// Say ( Kurt , DKs-Intro-13 ) ;
3387: LD_EXP 14
3391: PPUSH
3392: LD_STRING DKs-Intro-13
3394: PPUSH
3395: CALL_OW 88
// Say ( Kamil , DKam-Intro-14 ) ;
3399: LD_EXP 9
3403: PPUSH
3404: LD_STRING DKam-Intro-14
3406: PPUSH
3407: CALL_OW 88
// case Query ( QSurrender ) of 1 :
3411: LD_STRING QSurrender
3413: PPUSH
3414: CALL_OW 97
3418: PUSH
3419: LD_INT 1
3421: DOUBLE
3422: EQUAL
3423: IFTRUE 3427
3425: GO 3446
3427: POP
// begin Say ( Heike , DH-Intro-16 ) ;
3428: LD_EXP 5
3432: PPUSH
3433: LD_STRING DH-Intro-16
3435: PPUSH
3436: CALL_OW 88
// missionEnd ;
3440: CALL 3632 0 0
// end ; 2 :
3444: GO 3490
3446: LD_INT 2
3448: DOUBLE
3449: EQUAL
3450: IFTRUE 3454
3452: GO 3489
3454: POP
// begin Say ( Heike , DH-Intro-a-16 ) ;
3455: LD_EXP 5
3459: PPUSH
3460: LD_STRING DH-Intro-a-16
3462: PPUSH
3463: CALL_OW 88
// SayRadio ( Burlak , DB-Intro-a-17 ) ;
3467: LD_EXP 20
3471: PPUSH
3472: LD_STRING DB-Intro-a-17
3474: PPUSH
3475: CALL_OW 94
// startAttackOnHeike := true ;
3479: LD_ADDR_EXP 4
3483: PUSH
3484: LD_INT 1
3486: ST_TO_ADDR
// end ; end ;
3487: GO 3490
3489: POP
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
3490: LD_ADDR_VAR 0 2
3494: PUSH
3495: LD_INT 22
3497: PUSH
3498: LD_INT 2
3500: PUSH
3501: EMPTY
3502: LIST
3503: LIST
3504: PPUSH
3505: CALL_OW 69
3509: PUSH
3510: FOR_IN
3511: IFFALSE 3530
// ComAgressiveMove ( i , 98 , 143 ) ;
3513: LD_VAR 0 2
3517: PPUSH
3518: LD_INT 98
3520: PPUSH
3521: LD_INT 143
3523: PPUSH
3524: CALL_OW 114
3528: GO 3510
3530: POP
3531: POP
// ComAgressiveMove ( Heike , 84 , 116 ) ;
3532: LD_EXP 5
3536: PPUSH
3537: LD_INT 84
3539: PPUSH
3540: LD_INT 116
3542: PPUSH
3543: CALL_OW 114
// CenterOnXY ( 98 , 143 ) ;
3547: LD_INT 98
3549: PPUSH
3550: LD_INT 143
3552: PPUSH
3553: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
3557: LD_INT 35
3559: PPUSH
3560: CALL_OW 67
// until IsDead ( Heike ) ;
3564: LD_EXP 5
3568: PPUSH
3569: CALL_OW 301
3573: IFFALSE 3557
// wait ( 0 0$3 ) ;
3575: LD_INT 105
3577: PPUSH
3578: CALL_OW 67
// YouLost ( HeikeNoSurrender ) ;
3582: LD_STRING HeikeNoSurrender
3584: PPUSH
3585: CALL_OW 104
// end ;
3589: LD_VAR 0 1
3593: RET
// every 0 0$1 trigger GetLives ( Heike ) < 900 do
3594: LD_EXP 5
3598: PPUSH
3599: CALL_OW 256
3603: PUSH
3604: LD_INT 900
3606: LESS
3607: IFFALSE 3631
3609: GO 3611
3611: DISABLE
// begin wait ( 0 0$3 ) ;
3612: LD_INT 105
3614: PPUSH
3615: CALL_OW 67
// SetLives ( Heike , 100 ) ;
3619: LD_EXP 5
3623: PPUSH
3624: LD_INT 100
3626: PPUSH
3627: CALL_OW 234
// end ;
3631: END
// function MissionEnd ( ) ; begin
3632: LD_INT 0
3634: PPUSH
// ChangeMap ( 1 , %_cont ) ;
3635: LD_INT 1
3637: PPUSH
3638: LD_STRING %_cont
3640: PPUSH
3641: CALL_OW 340
// end ; end_of_file
3645: LD_VAR 0 1
3649: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
3650: LD_INT 0
3652: PPUSH
3653: PPUSH
// if exist_mode then
3654: LD_VAR 0 2
3658: IFFALSE 3683
// unit := CreateCharacter ( prefix & ident ) else
3660: LD_ADDR_VAR 0 5
3664: PUSH
3665: LD_VAR 0 3
3669: PUSH
3670: LD_VAR 0 1
3674: STR
3675: PPUSH
3676: CALL_OW 34
3680: ST_TO_ADDR
3681: GO 3698
// unit := NewCharacter ( ident ) ;
3683: LD_ADDR_VAR 0 5
3687: PUSH
3688: LD_VAR 0 1
3692: PPUSH
3693: CALL_OW 25
3697: ST_TO_ADDR
// result := unit ;
3698: LD_ADDR_VAR 0 4
3702: PUSH
3703: LD_VAR 0 5
3707: ST_TO_ADDR
// end ;
3708: LD_VAR 0 4
3712: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3713: LD_INT 0
3715: PPUSH
3716: PPUSH
// if not side or not nation then
3717: LD_VAR 0 1
3721: NOT
3722: PUSH
3723: LD_VAR 0 2
3727: NOT
3728: OR
3729: IFFALSE 3733
// exit ;
3731: GO 4501
// case nation of nation_american :
3733: LD_VAR 0 2
3737: PUSH
3738: LD_INT 1
3740: DOUBLE
3741: EQUAL
3742: IFTRUE 3746
3744: GO 3960
3746: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
3747: LD_ADDR_VAR 0 4
3751: PUSH
3752: LD_INT 35
3754: PUSH
3755: LD_INT 45
3757: PUSH
3758: LD_INT 46
3760: PUSH
3761: LD_INT 47
3763: PUSH
3764: LD_INT 82
3766: PUSH
3767: LD_INT 83
3769: PUSH
3770: LD_INT 84
3772: PUSH
3773: LD_INT 85
3775: PUSH
3776: LD_INT 86
3778: PUSH
3779: LD_INT 1
3781: PUSH
3782: LD_INT 2
3784: PUSH
3785: LD_INT 6
3787: PUSH
3788: LD_INT 15
3790: PUSH
3791: LD_INT 16
3793: PUSH
3794: LD_INT 7
3796: PUSH
3797: LD_INT 12
3799: PUSH
3800: LD_INT 13
3802: PUSH
3803: LD_INT 10
3805: PUSH
3806: LD_INT 14
3808: PUSH
3809: LD_INT 20
3811: PUSH
3812: LD_INT 21
3814: PUSH
3815: LD_INT 22
3817: PUSH
3818: LD_INT 25
3820: PUSH
3821: LD_INT 32
3823: PUSH
3824: LD_INT 27
3826: PUSH
3827: LD_INT 36
3829: PUSH
3830: LD_INT 69
3832: PUSH
3833: LD_INT 39
3835: PUSH
3836: LD_INT 34
3838: PUSH
3839: LD_INT 40
3841: PUSH
3842: LD_INT 48
3844: PUSH
3845: LD_INT 49
3847: PUSH
3848: LD_INT 50
3850: PUSH
3851: LD_INT 51
3853: PUSH
3854: LD_INT 52
3856: PUSH
3857: LD_INT 53
3859: PUSH
3860: LD_INT 54
3862: PUSH
3863: LD_INT 55
3865: PUSH
3866: LD_INT 56
3868: PUSH
3869: LD_INT 57
3871: PUSH
3872: LD_INT 58
3874: PUSH
3875: LD_INT 59
3877: PUSH
3878: LD_INT 60
3880: PUSH
3881: LD_INT 61
3883: PUSH
3884: LD_INT 62
3886: PUSH
3887: LD_INT 80
3889: PUSH
3890: LD_INT 82
3892: PUSH
3893: LD_INT 83
3895: PUSH
3896: LD_INT 84
3898: PUSH
3899: LD_INT 85
3901: PUSH
3902: LD_INT 86
3904: PUSH
3905: EMPTY
3906: LIST
3907: LIST
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: LIST
3916: LIST
3917: LIST
3918: LIST
3919: LIST
3920: LIST
3921: LIST
3922: LIST
3923: LIST
3924: LIST
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: LIST
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: LIST
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: LIST
3951: LIST
3952: LIST
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: ST_TO_ADDR
3958: GO 4425
3960: LD_INT 2
3962: DOUBLE
3963: EQUAL
3964: IFTRUE 3968
3966: GO 4194
3968: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3969: LD_ADDR_VAR 0 4
3973: PUSH
3974: LD_INT 35
3976: PUSH
3977: LD_INT 45
3979: PUSH
3980: LD_INT 46
3982: PUSH
3983: LD_INT 47
3985: PUSH
3986: LD_INT 82
3988: PUSH
3989: LD_INT 83
3991: PUSH
3992: LD_INT 84
3994: PUSH
3995: LD_INT 85
3997: PUSH
3998: LD_INT 87
4000: PUSH
4001: LD_INT 70
4003: PUSH
4004: LD_INT 1
4006: PUSH
4007: LD_INT 11
4009: PUSH
4010: LD_INT 3
4012: PUSH
4013: LD_INT 4
4015: PUSH
4016: LD_INT 5
4018: PUSH
4019: LD_INT 6
4021: PUSH
4022: LD_INT 15
4024: PUSH
4025: LD_INT 18
4027: PUSH
4028: LD_INT 7
4030: PUSH
4031: LD_INT 17
4033: PUSH
4034: LD_INT 8
4036: PUSH
4037: LD_INT 20
4039: PUSH
4040: LD_INT 21
4042: PUSH
4043: LD_INT 22
4045: PUSH
4046: LD_INT 72
4048: PUSH
4049: LD_INT 26
4051: PUSH
4052: LD_INT 69
4054: PUSH
4055: LD_INT 39
4057: PUSH
4058: LD_INT 40
4060: PUSH
4061: LD_INT 41
4063: PUSH
4064: LD_INT 42
4066: PUSH
4067: LD_INT 43
4069: PUSH
4070: LD_INT 48
4072: PUSH
4073: LD_INT 49
4075: PUSH
4076: LD_INT 50
4078: PUSH
4079: LD_INT 51
4081: PUSH
4082: LD_INT 52
4084: PUSH
4085: LD_INT 53
4087: PUSH
4088: LD_INT 54
4090: PUSH
4091: LD_INT 55
4093: PUSH
4094: LD_INT 56
4096: PUSH
4097: LD_INT 60
4099: PUSH
4100: LD_INT 61
4102: PUSH
4103: LD_INT 62
4105: PUSH
4106: LD_INT 66
4108: PUSH
4109: LD_INT 67
4111: PUSH
4112: LD_INT 68
4114: PUSH
4115: LD_INT 81
4117: PUSH
4118: LD_INT 82
4120: PUSH
4121: LD_INT 83
4123: PUSH
4124: LD_INT 84
4126: PUSH
4127: LD_INT 85
4129: PUSH
4130: LD_INT 87
4132: PUSH
4133: LD_INT 88
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: LIST
4140: LIST
4141: LIST
4142: LIST
4143: LIST
4144: LIST
4145: LIST
4146: LIST
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: LIST
4152: LIST
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: LIST
4170: LIST
4171: LIST
4172: LIST
4173: LIST
4174: LIST
4175: LIST
4176: LIST
4177: LIST
4178: LIST
4179: LIST
4180: LIST
4181: LIST
4182: LIST
4183: LIST
4184: LIST
4185: LIST
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: LIST
4191: ST_TO_ADDR
4192: GO 4425
4194: LD_INT 3
4196: DOUBLE
4197: EQUAL
4198: IFTRUE 4202
4200: GO 4424
4202: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
4203: LD_ADDR_VAR 0 4
4207: PUSH
4208: LD_INT 46
4210: PUSH
4211: LD_INT 47
4213: PUSH
4214: LD_INT 1
4216: PUSH
4217: LD_INT 2
4219: PUSH
4220: LD_INT 82
4222: PUSH
4223: LD_INT 83
4225: PUSH
4226: LD_INT 84
4228: PUSH
4229: LD_INT 85
4231: PUSH
4232: LD_INT 86
4234: PUSH
4235: LD_INT 11
4237: PUSH
4238: LD_INT 9
4240: PUSH
4241: LD_INT 20
4243: PUSH
4244: LD_INT 19
4246: PUSH
4247: LD_INT 21
4249: PUSH
4250: LD_INT 24
4252: PUSH
4253: LD_INT 22
4255: PUSH
4256: LD_INT 25
4258: PUSH
4259: LD_INT 28
4261: PUSH
4262: LD_INT 29
4264: PUSH
4265: LD_INT 30
4267: PUSH
4268: LD_INT 31
4270: PUSH
4271: LD_INT 37
4273: PUSH
4274: LD_INT 38
4276: PUSH
4277: LD_INT 32
4279: PUSH
4280: LD_INT 27
4282: PUSH
4283: LD_INT 33
4285: PUSH
4286: LD_INT 69
4288: PUSH
4289: LD_INT 39
4291: PUSH
4292: LD_INT 34
4294: PUSH
4295: LD_INT 40
4297: PUSH
4298: LD_INT 71
4300: PUSH
4301: LD_INT 23
4303: PUSH
4304: LD_INT 44
4306: PUSH
4307: LD_INT 48
4309: PUSH
4310: LD_INT 49
4312: PUSH
4313: LD_INT 50
4315: PUSH
4316: LD_INT 51
4318: PUSH
4319: LD_INT 52
4321: PUSH
4322: LD_INT 53
4324: PUSH
4325: LD_INT 54
4327: PUSH
4328: LD_INT 55
4330: PUSH
4331: LD_INT 56
4333: PUSH
4334: LD_INT 57
4336: PUSH
4337: LD_INT 58
4339: PUSH
4340: LD_INT 59
4342: PUSH
4343: LD_INT 63
4345: PUSH
4346: LD_INT 64
4348: PUSH
4349: LD_INT 65
4351: PUSH
4352: LD_INT 82
4354: PUSH
4355: LD_INT 83
4357: PUSH
4358: LD_INT 84
4360: PUSH
4361: LD_INT 85
4363: PUSH
4364: LD_INT 86
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: LIST
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: LIST
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: LIST
4388: LIST
4389: LIST
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: LIST
4400: LIST
4401: LIST
4402: LIST
4403: LIST
4404: LIST
4405: LIST
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: LIST
4421: ST_TO_ADDR
4422: GO 4425
4424: POP
// if state > - 1 and state < 3 then
4425: LD_VAR 0 3
4429: PUSH
4430: LD_INT 1
4432: NEG
4433: GREATER
4434: PUSH
4435: LD_VAR 0 3
4439: PUSH
4440: LD_INT 3
4442: LESS
4443: AND
4444: IFFALSE 4501
// for i in result do
4446: LD_ADDR_VAR 0 5
4450: PUSH
4451: LD_VAR 0 4
4455: PUSH
4456: FOR_IN
4457: IFFALSE 4499
// if GetTech ( i , side ) <> state then
4459: LD_VAR 0 5
4463: PPUSH
4464: LD_VAR 0 1
4468: PPUSH
4469: CALL_OW 321
4473: PUSH
4474: LD_VAR 0 3
4478: NONEQUAL
4479: IFFALSE 4497
// result := result diff i ;
4481: LD_ADDR_VAR 0 4
4485: PUSH
4486: LD_VAR 0 4
4490: PUSH
4491: LD_VAR 0 5
4495: DIFF
4496: ST_TO_ADDR
4497: GO 4456
4499: POP
4500: POP
// end ;
4501: LD_VAR 0 4
4505: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
4506: LD_INT 0
4508: PPUSH
4509: PPUSH
4510: PPUSH
// result := true ;
4511: LD_ADDR_VAR 0 3
4515: PUSH
4516: LD_INT 1
4518: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
4519: LD_ADDR_VAR 0 5
4523: PUSH
4524: LD_VAR 0 2
4528: PPUSH
4529: CALL_OW 480
4533: ST_TO_ADDR
// if not tmp then
4534: LD_VAR 0 5
4538: NOT
4539: IFFALSE 4543
// exit ;
4541: GO 4592
// for i in tmp do
4543: LD_ADDR_VAR 0 4
4547: PUSH
4548: LD_VAR 0 5
4552: PUSH
4553: FOR_IN
4554: IFFALSE 4590
// if GetTech ( i , side ) <> state_researched then
4556: LD_VAR 0 4
4560: PPUSH
4561: LD_VAR 0 1
4565: PPUSH
4566: CALL_OW 321
4570: PUSH
4571: LD_INT 2
4573: NONEQUAL
4574: IFFALSE 4588
// begin result := false ;
4576: LD_ADDR_VAR 0 3
4580: PUSH
4581: LD_INT 0
4583: ST_TO_ADDR
// exit ;
4584: POP
4585: POP
4586: GO 4592
// end ;
4588: GO 4553
4590: POP
4591: POP
// end ;
4592: LD_VAR 0 3
4596: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
4597: LD_INT 0
4599: PPUSH
4600: PPUSH
4601: PPUSH
4602: PPUSH
4603: PPUSH
4604: PPUSH
4605: PPUSH
4606: PPUSH
4607: PPUSH
4608: PPUSH
4609: PPUSH
4610: PPUSH
4611: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
4612: LD_VAR 0 1
4616: NOT
4617: PUSH
4618: LD_VAR 0 1
4622: PPUSH
4623: CALL_OW 257
4627: PUSH
4628: LD_INT 9
4630: NONEQUAL
4631: OR
4632: IFFALSE 4636
// exit ;
4634: GO 5209
// side := GetSide ( unit ) ;
4636: LD_ADDR_VAR 0 9
4640: PUSH
4641: LD_VAR 0 1
4645: PPUSH
4646: CALL_OW 255
4650: ST_TO_ADDR
// tech_space := tech_spacanom ;
4651: LD_ADDR_VAR 0 12
4655: PUSH
4656: LD_INT 29
4658: ST_TO_ADDR
// tech_time := tech_taurad ;
4659: LD_ADDR_VAR 0 13
4663: PUSH
4664: LD_INT 28
4666: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4667: LD_ADDR_VAR 0 11
4671: PUSH
4672: LD_VAR 0 1
4676: PPUSH
4677: CALL_OW 310
4681: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4682: LD_VAR 0 11
4686: PPUSH
4687: CALL_OW 247
4691: PUSH
4692: LD_INT 2
4694: EQUAL
4695: IFFALSE 4699
// exit ;
4697: GO 5209
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4699: LD_ADDR_VAR 0 8
4703: PUSH
4704: LD_INT 81
4706: PUSH
4707: LD_VAR 0 9
4711: PUSH
4712: EMPTY
4713: LIST
4714: LIST
4715: PUSH
4716: LD_INT 3
4718: PUSH
4719: LD_INT 21
4721: PUSH
4722: LD_INT 3
4724: PUSH
4725: EMPTY
4726: LIST
4727: LIST
4728: PUSH
4729: EMPTY
4730: LIST
4731: LIST
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: PPUSH
4737: CALL_OW 69
4741: ST_TO_ADDR
// if not tmp then
4742: LD_VAR 0 8
4746: NOT
4747: IFFALSE 4751
// exit ;
4749: GO 5209
// if in_unit then
4751: LD_VAR 0 11
4755: IFFALSE 4779
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4757: LD_ADDR_VAR 0 10
4761: PUSH
4762: LD_VAR 0 8
4766: PPUSH
4767: LD_VAR 0 11
4771: PPUSH
4772: CALL_OW 74
4776: ST_TO_ADDR
4777: GO 4799
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4779: LD_ADDR_VAR 0 10
4783: PUSH
4784: LD_VAR 0 8
4788: PPUSH
4789: LD_VAR 0 1
4793: PPUSH
4794: CALL_OW 74
4798: ST_TO_ADDR
// if not enemy then
4799: LD_VAR 0 10
4803: NOT
4804: IFFALSE 4808
// exit ;
4806: GO 5209
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4808: LD_VAR 0 11
4812: PUSH
4813: LD_VAR 0 11
4817: PPUSH
4818: LD_VAR 0 10
4822: PPUSH
4823: CALL_OW 296
4827: PUSH
4828: LD_INT 13
4830: GREATER
4831: AND
4832: PUSH
4833: LD_VAR 0 1
4837: PPUSH
4838: LD_VAR 0 10
4842: PPUSH
4843: CALL_OW 296
4847: PUSH
4848: LD_INT 12
4850: GREATER
4851: OR
4852: IFFALSE 4856
// exit ;
4854: GO 5209
// missile := [ 1 ] ;
4856: LD_ADDR_VAR 0 14
4860: PUSH
4861: LD_INT 1
4863: PUSH
4864: EMPTY
4865: LIST
4866: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4867: LD_VAR 0 9
4871: PPUSH
4872: LD_VAR 0 12
4876: PPUSH
4877: CALL_OW 325
4881: IFFALSE 4910
// missile := Replace ( missile , missile + 1 , 2 ) ;
4883: LD_ADDR_VAR 0 14
4887: PUSH
4888: LD_VAR 0 14
4892: PPUSH
4893: LD_VAR 0 14
4897: PUSH
4898: LD_INT 1
4900: PLUS
4901: PPUSH
4902: LD_INT 2
4904: PPUSH
4905: CALL_OW 1
4909: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4910: LD_VAR 0 9
4914: PPUSH
4915: LD_VAR 0 13
4919: PPUSH
4920: CALL_OW 325
4924: PUSH
4925: LD_VAR 0 10
4929: PPUSH
4930: CALL_OW 255
4934: PPUSH
4935: LD_VAR 0 13
4939: PPUSH
4940: CALL_OW 325
4944: NOT
4945: AND
4946: IFFALSE 4975
// missile := Replace ( missile , missile + 1 , 3 ) ;
4948: LD_ADDR_VAR 0 14
4952: PUSH
4953: LD_VAR 0 14
4957: PPUSH
4958: LD_VAR 0 14
4962: PUSH
4963: LD_INT 1
4965: PLUS
4966: PPUSH
4967: LD_INT 3
4969: PPUSH
4970: CALL_OW 1
4974: ST_TO_ADDR
// if missile < 2 then
4975: LD_VAR 0 14
4979: PUSH
4980: LD_INT 2
4982: LESS
4983: IFFALSE 4987
// exit ;
4985: GO 5209
// x := GetX ( enemy ) ;
4987: LD_ADDR_VAR 0 4
4991: PUSH
4992: LD_VAR 0 10
4996: PPUSH
4997: CALL_OW 250
5001: ST_TO_ADDR
// y := GetY ( enemy ) ;
5002: LD_ADDR_VAR 0 5
5006: PUSH
5007: LD_VAR 0 10
5011: PPUSH
5012: CALL_OW 251
5016: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
5017: LD_ADDR_VAR 0 6
5021: PUSH
5022: LD_VAR 0 4
5026: PUSH
5027: LD_INT 1
5029: NEG
5030: PPUSH
5031: LD_INT 1
5033: PPUSH
5034: CALL_OW 12
5038: PLUS
5039: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
5040: LD_ADDR_VAR 0 7
5044: PUSH
5045: LD_VAR 0 5
5049: PUSH
5050: LD_INT 1
5052: NEG
5053: PPUSH
5054: LD_INT 1
5056: PPUSH
5057: CALL_OW 12
5061: PLUS
5062: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5063: LD_VAR 0 6
5067: PPUSH
5068: LD_VAR 0 7
5072: PPUSH
5073: CALL_OW 488
5077: NOT
5078: IFFALSE 5100
// begin _x := x ;
5080: LD_ADDR_VAR 0 6
5084: PUSH
5085: LD_VAR 0 4
5089: ST_TO_ADDR
// _y := y ;
5090: LD_ADDR_VAR 0 7
5094: PUSH
5095: LD_VAR 0 5
5099: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
5100: LD_ADDR_VAR 0 3
5104: PUSH
5105: LD_INT 1
5107: PPUSH
5108: LD_VAR 0 14
5112: PPUSH
5113: CALL_OW 12
5117: ST_TO_ADDR
// case i of 1 :
5118: LD_VAR 0 3
5122: PUSH
5123: LD_INT 1
5125: DOUBLE
5126: EQUAL
5127: IFTRUE 5131
5129: GO 5148
5131: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
5132: LD_VAR 0 1
5136: PPUSH
5137: LD_VAR 0 10
5141: PPUSH
5142: CALL_OW 115
5146: GO 5209
5148: LD_INT 2
5150: DOUBLE
5151: EQUAL
5152: IFTRUE 5156
5154: GO 5178
5156: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
5157: LD_VAR 0 1
5161: PPUSH
5162: LD_VAR 0 6
5166: PPUSH
5167: LD_VAR 0 7
5171: PPUSH
5172: CALL_OW 153
5176: GO 5209
5178: LD_INT 3
5180: DOUBLE
5181: EQUAL
5182: IFTRUE 5186
5184: GO 5208
5186: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
5187: LD_VAR 0 1
5191: PPUSH
5192: LD_VAR 0 6
5196: PPUSH
5197: LD_VAR 0 7
5201: PPUSH
5202: CALL_OW 154
5206: GO 5209
5208: POP
// end ;
5209: LD_VAR 0 2
5213: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
5214: LD_INT 0
5216: PPUSH
5217: PPUSH
5218: PPUSH
5219: PPUSH
5220: PPUSH
5221: PPUSH
// if not unit or not building then
5222: LD_VAR 0 1
5226: NOT
5227: PUSH
5228: LD_VAR 0 2
5232: NOT
5233: OR
5234: IFFALSE 5238
// exit ;
5236: GO 5396
// x := GetX ( building ) ;
5238: LD_ADDR_VAR 0 5
5242: PUSH
5243: LD_VAR 0 2
5247: PPUSH
5248: CALL_OW 250
5252: ST_TO_ADDR
// y := GetY ( building ) ;
5253: LD_ADDR_VAR 0 6
5257: PUSH
5258: LD_VAR 0 2
5262: PPUSH
5263: CALL_OW 251
5267: ST_TO_ADDR
// for i = 0 to 5 do
5268: LD_ADDR_VAR 0 4
5272: PUSH
5273: DOUBLE
5274: LD_INT 0
5276: DEC
5277: ST_TO_ADDR
5278: LD_INT 5
5280: PUSH
5281: FOR_TO
5282: IFFALSE 5394
// begin _x := ShiftX ( x , i , 3 ) ;
5284: LD_ADDR_VAR 0 7
5288: PUSH
5289: LD_VAR 0 5
5293: PPUSH
5294: LD_VAR 0 4
5298: PPUSH
5299: LD_INT 3
5301: PPUSH
5302: CALL_OW 272
5306: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
5307: LD_ADDR_VAR 0 8
5311: PUSH
5312: LD_VAR 0 6
5316: PPUSH
5317: LD_VAR 0 4
5321: PPUSH
5322: LD_INT 3
5324: PPUSH
5325: CALL_OW 273
5329: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5330: LD_VAR 0 7
5334: PPUSH
5335: LD_VAR 0 8
5339: PPUSH
5340: CALL_OW 488
5344: NOT
5345: IFFALSE 5349
// continue ;
5347: GO 5281
// if HexInfo ( _x , _y ) = 0 then
5349: LD_VAR 0 7
5353: PPUSH
5354: LD_VAR 0 8
5358: PPUSH
5359: CALL_OW 428
5363: PUSH
5364: LD_INT 0
5366: EQUAL
5367: IFFALSE 5392
// begin ComMoveXY ( unit , _x , _y ) ;
5369: LD_VAR 0 1
5373: PPUSH
5374: LD_VAR 0 7
5378: PPUSH
5379: LD_VAR 0 8
5383: PPUSH
5384: CALL_OW 111
// exit ;
5388: POP
5389: POP
5390: GO 5396
// end ; end ;
5392: GO 5281
5394: POP
5395: POP
// end ;
5396: LD_VAR 0 3
5400: RET
// export function ScanBase ( side , base_area ) ; begin
5401: LD_INT 0
5403: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
5404: LD_ADDR_VAR 0 3
5408: PUSH
5409: LD_VAR 0 2
5413: PPUSH
5414: LD_INT 81
5416: PUSH
5417: LD_VAR 0 1
5421: PUSH
5422: EMPTY
5423: LIST
5424: LIST
5425: PPUSH
5426: CALL_OW 70
5430: ST_TO_ADDR
// end ;
5431: LD_VAR 0 3
5435: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
5436: LD_INT 0
5438: PPUSH
5439: PPUSH
5440: PPUSH
5441: PPUSH
// result := false ;
5442: LD_ADDR_VAR 0 2
5446: PUSH
5447: LD_INT 0
5449: ST_TO_ADDR
// side := GetSide ( unit ) ;
5450: LD_ADDR_VAR 0 3
5454: PUSH
5455: LD_VAR 0 1
5459: PPUSH
5460: CALL_OW 255
5464: ST_TO_ADDR
// nat := GetNation ( unit ) ;
5465: LD_ADDR_VAR 0 4
5469: PUSH
5470: LD_VAR 0 1
5474: PPUSH
5475: CALL_OW 248
5479: ST_TO_ADDR
// case nat of 1 :
5480: LD_VAR 0 4
5484: PUSH
5485: LD_INT 1
5487: DOUBLE
5488: EQUAL
5489: IFTRUE 5493
5491: GO 5504
5493: POP
// tech := tech_lassight ; 2 :
5494: LD_ADDR_VAR 0 5
5498: PUSH
5499: LD_INT 12
5501: ST_TO_ADDR
5502: GO 5543
5504: LD_INT 2
5506: DOUBLE
5507: EQUAL
5508: IFTRUE 5512
5510: GO 5523
5512: POP
// tech := tech_mortar ; 3 :
5513: LD_ADDR_VAR 0 5
5517: PUSH
5518: LD_INT 41
5520: ST_TO_ADDR
5521: GO 5543
5523: LD_INT 3
5525: DOUBLE
5526: EQUAL
5527: IFTRUE 5531
5529: GO 5542
5531: POP
// tech := tech_bazooka ; end ;
5532: LD_ADDR_VAR 0 5
5536: PUSH
5537: LD_INT 44
5539: ST_TO_ADDR
5540: GO 5543
5542: POP
// if Researched ( side , tech ) then
5543: LD_VAR 0 3
5547: PPUSH
5548: LD_VAR 0 5
5552: PPUSH
5553: CALL_OW 325
5557: IFFALSE 5584
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
5559: LD_ADDR_VAR 0 2
5563: PUSH
5564: LD_INT 5
5566: PUSH
5567: LD_INT 8
5569: PUSH
5570: LD_INT 9
5572: PUSH
5573: EMPTY
5574: LIST
5575: LIST
5576: LIST
5577: PUSH
5578: LD_VAR 0 4
5582: ARRAY
5583: ST_TO_ADDR
// end ;
5584: LD_VAR 0 2
5588: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
5589: LD_INT 0
5591: PPUSH
5592: PPUSH
5593: PPUSH
// if not mines then
5594: LD_VAR 0 2
5598: NOT
5599: IFFALSE 5603
// exit ;
5601: GO 5747
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5603: LD_ADDR_VAR 0 5
5607: PUSH
5608: LD_INT 81
5610: PUSH
5611: LD_VAR 0 1
5615: PUSH
5616: EMPTY
5617: LIST
5618: LIST
5619: PUSH
5620: LD_INT 3
5622: PUSH
5623: LD_INT 21
5625: PUSH
5626: LD_INT 3
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: PUSH
5633: EMPTY
5634: LIST
5635: LIST
5636: PUSH
5637: EMPTY
5638: LIST
5639: LIST
5640: PPUSH
5641: CALL_OW 69
5645: ST_TO_ADDR
// for i in mines do
5646: LD_ADDR_VAR 0 4
5650: PUSH
5651: LD_VAR 0 2
5655: PUSH
5656: FOR_IN
5657: IFFALSE 5745
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5659: LD_VAR 0 4
5663: PUSH
5664: LD_INT 1
5666: ARRAY
5667: PPUSH
5668: LD_VAR 0 4
5672: PUSH
5673: LD_INT 2
5675: ARRAY
5676: PPUSH
5677: CALL_OW 458
5681: NOT
5682: IFFALSE 5686
// continue ;
5684: GO 5656
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5686: LD_VAR 0 4
5690: PUSH
5691: LD_INT 1
5693: ARRAY
5694: PPUSH
5695: LD_VAR 0 4
5699: PUSH
5700: LD_INT 2
5702: ARRAY
5703: PPUSH
5704: CALL_OW 428
5708: PUSH
5709: LD_VAR 0 5
5713: IN
5714: IFFALSE 5743
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5716: LD_VAR 0 4
5720: PUSH
5721: LD_INT 1
5723: ARRAY
5724: PPUSH
5725: LD_VAR 0 4
5729: PUSH
5730: LD_INT 2
5732: ARRAY
5733: PPUSH
5734: LD_VAR 0 1
5738: PPUSH
5739: CALL_OW 456
// end ;
5743: GO 5656
5745: POP
5746: POP
// end ;
5747: LD_VAR 0 3
5751: RET
// export function Count ( array ) ; begin
5752: LD_INT 0
5754: PPUSH
// result := array + 0 ;
5755: LD_ADDR_VAR 0 2
5759: PUSH
5760: LD_VAR 0 1
5764: PUSH
5765: LD_INT 0
5767: PLUS
5768: ST_TO_ADDR
// end ;
5769: LD_VAR 0 2
5773: RET
// export function IsEmpty ( building ) ; begin
5774: LD_INT 0
5776: PPUSH
// if not building then
5777: LD_VAR 0 1
5781: NOT
5782: IFFALSE 5786
// exit ;
5784: GO 5829
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5786: LD_ADDR_VAR 0 2
5790: PUSH
5791: LD_VAR 0 1
5795: PUSH
5796: LD_INT 22
5798: PUSH
5799: LD_VAR 0 1
5803: PPUSH
5804: CALL_OW 255
5808: PUSH
5809: EMPTY
5810: LIST
5811: LIST
5812: PUSH
5813: LD_INT 58
5815: PUSH
5816: EMPTY
5817: LIST
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: PPUSH
5823: CALL_OW 69
5827: IN
5828: ST_TO_ADDR
// end ;
5829: LD_VAR 0 2
5833: RET
// export function IsNotFull ( building ) ; var places ; begin
5834: LD_INT 0
5836: PPUSH
5837: PPUSH
// if not building then
5838: LD_VAR 0 1
5842: NOT
5843: IFFALSE 5847
// exit ;
5845: GO 5875
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5847: LD_ADDR_VAR 0 2
5851: PUSH
5852: LD_VAR 0 1
5856: PPUSH
5857: LD_INT 3
5859: PUSH
5860: LD_INT 62
5862: PUSH
5863: EMPTY
5864: LIST
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: PPUSH
5870: CALL_OW 72
5874: ST_TO_ADDR
// end ;
5875: LD_VAR 0 2
5879: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5880: LD_INT 0
5882: PPUSH
5883: PPUSH
5884: PPUSH
5885: PPUSH
// tmp := [ ] ;
5886: LD_ADDR_VAR 0 3
5890: PUSH
5891: EMPTY
5892: ST_TO_ADDR
// list := [ ] ;
5893: LD_ADDR_VAR 0 5
5897: PUSH
5898: EMPTY
5899: ST_TO_ADDR
// for i = 16 to 25 do
5900: LD_ADDR_VAR 0 4
5904: PUSH
5905: DOUBLE
5906: LD_INT 16
5908: DEC
5909: ST_TO_ADDR
5910: LD_INT 25
5912: PUSH
5913: FOR_TO
5914: IFFALSE 5987
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5916: LD_ADDR_VAR 0 3
5920: PUSH
5921: LD_VAR 0 3
5925: PUSH
5926: LD_INT 22
5928: PUSH
5929: LD_VAR 0 1
5933: PPUSH
5934: CALL_OW 255
5938: PUSH
5939: EMPTY
5940: LIST
5941: LIST
5942: PUSH
5943: LD_INT 91
5945: PUSH
5946: LD_VAR 0 1
5950: PUSH
5951: LD_INT 6
5953: PUSH
5954: EMPTY
5955: LIST
5956: LIST
5957: LIST
5958: PUSH
5959: LD_INT 30
5961: PUSH
5962: LD_VAR 0 4
5966: PUSH
5967: EMPTY
5968: LIST
5969: LIST
5970: PUSH
5971: EMPTY
5972: LIST
5973: LIST
5974: LIST
5975: PUSH
5976: EMPTY
5977: LIST
5978: PPUSH
5979: CALL_OW 69
5983: ADD
5984: ST_TO_ADDR
5985: GO 5913
5987: POP
5988: POP
// for i = 1 to tmp do
5989: LD_ADDR_VAR 0 4
5993: PUSH
5994: DOUBLE
5995: LD_INT 1
5997: DEC
5998: ST_TO_ADDR
5999: LD_VAR 0 3
6003: PUSH
6004: FOR_TO
6005: IFFALSE 6093
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
6007: LD_ADDR_VAR 0 5
6011: PUSH
6012: LD_VAR 0 5
6016: PUSH
6017: LD_VAR 0 3
6021: PUSH
6022: LD_VAR 0 4
6026: ARRAY
6027: PPUSH
6028: CALL_OW 266
6032: PUSH
6033: LD_VAR 0 3
6037: PUSH
6038: LD_VAR 0 4
6042: ARRAY
6043: PPUSH
6044: CALL_OW 250
6048: PUSH
6049: LD_VAR 0 3
6053: PUSH
6054: LD_VAR 0 4
6058: ARRAY
6059: PPUSH
6060: CALL_OW 251
6064: PUSH
6065: LD_VAR 0 3
6069: PUSH
6070: LD_VAR 0 4
6074: ARRAY
6075: PPUSH
6076: CALL_OW 254
6080: PUSH
6081: EMPTY
6082: LIST
6083: LIST
6084: LIST
6085: LIST
6086: PUSH
6087: EMPTY
6088: LIST
6089: ADD
6090: ST_TO_ADDR
6091: GO 6004
6093: POP
6094: POP
// result := list ;
6095: LD_ADDR_VAR 0 2
6099: PUSH
6100: LD_VAR 0 5
6104: ST_TO_ADDR
// end ;
6105: LD_VAR 0 2
6109: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
6110: LD_INT 0
6112: PPUSH
6113: PPUSH
6114: PPUSH
6115: PPUSH
6116: PPUSH
6117: PPUSH
6118: PPUSH
// if not factory then
6119: LD_VAR 0 1
6123: NOT
6124: IFFALSE 6128
// exit ;
6126: GO 6721
// if control = control_apeman then
6128: LD_VAR 0 4
6132: PUSH
6133: LD_INT 5
6135: EQUAL
6136: IFFALSE 6245
// begin tmp := UnitsInside ( factory ) ;
6138: LD_ADDR_VAR 0 8
6142: PUSH
6143: LD_VAR 0 1
6147: PPUSH
6148: CALL_OW 313
6152: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
6153: LD_VAR 0 8
6157: PPUSH
6158: LD_INT 25
6160: PUSH
6161: LD_INT 12
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: PPUSH
6168: CALL_OW 72
6172: NOT
6173: IFFALSE 6183
// control := control_manual ;
6175: LD_ADDR_VAR 0 4
6179: PUSH
6180: LD_INT 1
6182: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
6183: LD_ADDR_VAR 0 8
6187: PUSH
6188: LD_VAR 0 1
6192: PPUSH
6193: CALL 5880 0 1
6197: ST_TO_ADDR
// if tmp then
6198: LD_VAR 0 8
6202: IFFALSE 6245
// begin for i in tmp do
6204: LD_ADDR_VAR 0 7
6208: PUSH
6209: LD_VAR 0 8
6213: PUSH
6214: FOR_IN
6215: IFFALSE 6243
// if i [ 1 ] = b_ext_radio then
6217: LD_VAR 0 7
6221: PUSH
6222: LD_INT 1
6224: ARRAY
6225: PUSH
6226: LD_INT 22
6228: EQUAL
6229: IFFALSE 6241
// begin control := control_remote ;
6231: LD_ADDR_VAR 0 4
6235: PUSH
6236: LD_INT 2
6238: ST_TO_ADDR
// break ;
6239: GO 6243
// end ;
6241: GO 6214
6243: POP
6244: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6245: LD_VAR 0 1
6249: PPUSH
6250: LD_VAR 0 2
6254: PPUSH
6255: LD_VAR 0 3
6259: PPUSH
6260: LD_VAR 0 4
6264: PPUSH
6265: LD_VAR 0 5
6269: PPUSH
6270: CALL_OW 448
6274: IFFALSE 6309
// begin result := [ chassis , engine , control , weapon ] ;
6276: LD_ADDR_VAR 0 6
6280: PUSH
6281: LD_VAR 0 2
6285: PUSH
6286: LD_VAR 0 3
6290: PUSH
6291: LD_VAR 0 4
6295: PUSH
6296: LD_VAR 0 5
6300: PUSH
6301: EMPTY
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: ST_TO_ADDR
// exit ;
6307: GO 6721
// end ; _chassis := AvailableChassisList ( factory ) ;
6309: LD_ADDR_VAR 0 9
6313: PUSH
6314: LD_VAR 0 1
6318: PPUSH
6319: CALL_OW 475
6323: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
6324: LD_ADDR_VAR 0 11
6328: PUSH
6329: LD_VAR 0 1
6333: PPUSH
6334: CALL_OW 476
6338: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
6339: LD_ADDR_VAR 0 12
6343: PUSH
6344: LD_VAR 0 1
6348: PPUSH
6349: CALL_OW 477
6353: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
6354: LD_ADDR_VAR 0 10
6358: PUSH
6359: LD_VAR 0 1
6363: PPUSH
6364: CALL_OW 478
6368: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
6369: LD_VAR 0 9
6373: NOT
6374: PUSH
6375: LD_VAR 0 11
6379: NOT
6380: OR
6381: PUSH
6382: LD_VAR 0 12
6386: NOT
6387: OR
6388: PUSH
6389: LD_VAR 0 10
6393: NOT
6394: OR
6395: IFFALSE 6430
// begin result := [ chassis , engine , control , weapon ] ;
6397: LD_ADDR_VAR 0 6
6401: PUSH
6402: LD_VAR 0 2
6406: PUSH
6407: LD_VAR 0 3
6411: PUSH
6412: LD_VAR 0 4
6416: PUSH
6417: LD_VAR 0 5
6421: PUSH
6422: EMPTY
6423: LIST
6424: LIST
6425: LIST
6426: LIST
6427: ST_TO_ADDR
// exit ;
6428: GO 6721
// end ; if not chassis in _chassis then
6430: LD_VAR 0 2
6434: PUSH
6435: LD_VAR 0 9
6439: IN
6440: NOT
6441: IFFALSE 6467
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
6443: LD_ADDR_VAR 0 2
6447: PUSH
6448: LD_VAR 0 9
6452: PUSH
6453: LD_INT 1
6455: PPUSH
6456: LD_VAR 0 9
6460: PPUSH
6461: CALL_OW 12
6465: ARRAY
6466: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
6467: LD_VAR 0 2
6471: PPUSH
6472: LD_VAR 0 3
6476: PPUSH
6477: CALL 6726 0 2
6481: NOT
6482: IFFALSE 6541
// repeat engine := _engine [ 1 ] ;
6484: LD_ADDR_VAR 0 3
6488: PUSH
6489: LD_VAR 0 11
6493: PUSH
6494: LD_INT 1
6496: ARRAY
6497: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
6498: LD_ADDR_VAR 0 11
6502: PUSH
6503: LD_VAR 0 11
6507: PPUSH
6508: LD_INT 1
6510: PPUSH
6511: CALL_OW 3
6515: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
6516: LD_VAR 0 2
6520: PPUSH
6521: LD_VAR 0 3
6525: PPUSH
6526: CALL 6726 0 2
6530: PUSH
6531: LD_VAR 0 11
6535: PUSH
6536: EMPTY
6537: EQUAL
6538: OR
6539: IFFALSE 6484
// if not control in _control then
6541: LD_VAR 0 4
6545: PUSH
6546: LD_VAR 0 12
6550: IN
6551: NOT
6552: IFFALSE 6578
// control := _control [ rand ( 1 , _control ) ] ;
6554: LD_ADDR_VAR 0 4
6558: PUSH
6559: LD_VAR 0 12
6563: PUSH
6564: LD_INT 1
6566: PPUSH
6567: LD_VAR 0 12
6571: PPUSH
6572: CALL_OW 12
6576: ARRAY
6577: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
6578: LD_VAR 0 2
6582: PPUSH
6583: LD_VAR 0 5
6587: PPUSH
6588: CALL 6946 0 2
6592: NOT
6593: IFFALSE 6652
// repeat weapon := _weapon [ 1 ] ;
6595: LD_ADDR_VAR 0 5
6599: PUSH
6600: LD_VAR 0 10
6604: PUSH
6605: LD_INT 1
6607: ARRAY
6608: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
6609: LD_ADDR_VAR 0 10
6613: PUSH
6614: LD_VAR 0 10
6618: PPUSH
6619: LD_INT 1
6621: PPUSH
6622: CALL_OW 3
6626: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6627: LD_VAR 0 2
6631: PPUSH
6632: LD_VAR 0 5
6636: PPUSH
6637: CALL 6946 0 2
6641: PUSH
6642: LD_VAR 0 10
6646: PUSH
6647: EMPTY
6648: EQUAL
6649: OR
6650: IFFALSE 6595
// result := [ ] ;
6652: LD_ADDR_VAR 0 6
6656: PUSH
6657: EMPTY
6658: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6659: LD_VAR 0 1
6663: PPUSH
6664: LD_VAR 0 2
6668: PPUSH
6669: LD_VAR 0 3
6673: PPUSH
6674: LD_VAR 0 4
6678: PPUSH
6679: LD_VAR 0 5
6683: PPUSH
6684: CALL_OW 448
6688: IFFALSE 6721
// result := [ chassis , engine , control , weapon ] ;
6690: LD_ADDR_VAR 0 6
6694: PUSH
6695: LD_VAR 0 2
6699: PUSH
6700: LD_VAR 0 3
6704: PUSH
6705: LD_VAR 0 4
6709: PUSH
6710: LD_VAR 0 5
6714: PUSH
6715: EMPTY
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: ST_TO_ADDR
// end ;
6721: LD_VAR 0 6
6725: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6726: LD_INT 0
6728: PPUSH
// if not chassis or not engine then
6729: LD_VAR 0 1
6733: NOT
6734: PUSH
6735: LD_VAR 0 2
6739: NOT
6740: OR
6741: IFFALSE 6745
// exit ;
6743: GO 6941
// case engine of engine_solar :
6745: LD_VAR 0 2
6749: PUSH
6750: LD_INT 2
6752: DOUBLE
6753: EQUAL
6754: IFTRUE 6758
6756: GO 6796
6758: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6759: LD_ADDR_VAR 0 3
6763: PUSH
6764: LD_INT 11
6766: PUSH
6767: LD_INT 12
6769: PUSH
6770: LD_INT 13
6772: PUSH
6773: LD_INT 14
6775: PUSH
6776: LD_INT 1
6778: PUSH
6779: LD_INT 2
6781: PUSH
6782: LD_INT 3
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: LIST
6792: LIST
6793: ST_TO_ADDR
6794: GO 6925
6796: LD_INT 1
6798: DOUBLE
6799: EQUAL
6800: IFTRUE 6804
6802: GO 6866
6804: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6805: LD_ADDR_VAR 0 3
6809: PUSH
6810: LD_INT 11
6812: PUSH
6813: LD_INT 12
6815: PUSH
6816: LD_INT 13
6818: PUSH
6819: LD_INT 14
6821: PUSH
6822: LD_INT 1
6824: PUSH
6825: LD_INT 2
6827: PUSH
6828: LD_INT 3
6830: PUSH
6831: LD_INT 4
6833: PUSH
6834: LD_INT 5
6836: PUSH
6837: LD_INT 21
6839: PUSH
6840: LD_INT 23
6842: PUSH
6843: LD_INT 22
6845: PUSH
6846: LD_INT 24
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: LIST
6856: LIST
6857: LIST
6858: LIST
6859: LIST
6860: LIST
6861: LIST
6862: LIST
6863: ST_TO_ADDR
6864: GO 6925
6866: LD_INT 3
6868: DOUBLE
6869: EQUAL
6870: IFTRUE 6874
6872: GO 6924
6874: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6875: LD_ADDR_VAR 0 3
6879: PUSH
6880: LD_INT 13
6882: PUSH
6883: LD_INT 14
6885: PUSH
6886: LD_INT 2
6888: PUSH
6889: LD_INT 3
6891: PUSH
6892: LD_INT 4
6894: PUSH
6895: LD_INT 5
6897: PUSH
6898: LD_INT 21
6900: PUSH
6901: LD_INT 22
6903: PUSH
6904: LD_INT 23
6906: PUSH
6907: LD_INT 24
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: ST_TO_ADDR
6922: GO 6925
6924: POP
// result := ( chassis in result ) ;
6925: LD_ADDR_VAR 0 3
6929: PUSH
6930: LD_VAR 0 1
6934: PUSH
6935: LD_VAR 0 3
6939: IN
6940: ST_TO_ADDR
// end ;
6941: LD_VAR 0 3
6945: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6946: LD_INT 0
6948: PPUSH
// if not chassis or not weapon then
6949: LD_VAR 0 1
6953: NOT
6954: PUSH
6955: LD_VAR 0 2
6959: NOT
6960: OR
6961: IFFALSE 6965
// exit ;
6963: GO 8025
// case weapon of us_machine_gun :
6965: LD_VAR 0 2
6969: PUSH
6970: LD_INT 2
6972: DOUBLE
6973: EQUAL
6974: IFTRUE 6978
6976: GO 7008
6978: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6979: LD_ADDR_VAR 0 3
6983: PUSH
6984: LD_INT 1
6986: PUSH
6987: LD_INT 2
6989: PUSH
6990: LD_INT 3
6992: PUSH
6993: LD_INT 4
6995: PUSH
6996: LD_INT 5
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: ST_TO_ADDR
7006: GO 8009
7008: LD_INT 3
7010: DOUBLE
7011: EQUAL
7012: IFTRUE 7016
7014: GO 7046
7016: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
7017: LD_ADDR_VAR 0 3
7021: PUSH
7022: LD_INT 1
7024: PUSH
7025: LD_INT 2
7027: PUSH
7028: LD_INT 3
7030: PUSH
7031: LD_INT 4
7033: PUSH
7034: LD_INT 5
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: LIST
7043: ST_TO_ADDR
7044: GO 8009
7046: LD_INT 11
7048: DOUBLE
7049: EQUAL
7050: IFTRUE 7054
7052: GO 7084
7054: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
7055: LD_ADDR_VAR 0 3
7059: PUSH
7060: LD_INT 1
7062: PUSH
7063: LD_INT 2
7065: PUSH
7066: LD_INT 3
7068: PUSH
7069: LD_INT 4
7071: PUSH
7072: LD_INT 5
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: LIST
7079: LIST
7080: LIST
7081: ST_TO_ADDR
7082: GO 8009
7084: LD_INT 4
7086: DOUBLE
7087: EQUAL
7088: IFTRUE 7092
7090: GO 7118
7092: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
7093: LD_ADDR_VAR 0 3
7097: PUSH
7098: LD_INT 2
7100: PUSH
7101: LD_INT 3
7103: PUSH
7104: LD_INT 4
7106: PUSH
7107: LD_INT 5
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: ST_TO_ADDR
7116: GO 8009
7118: LD_INT 5
7120: DOUBLE
7121: EQUAL
7122: IFTRUE 7126
7124: GO 7152
7126: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
7127: LD_ADDR_VAR 0 3
7131: PUSH
7132: LD_INT 2
7134: PUSH
7135: LD_INT 3
7137: PUSH
7138: LD_INT 4
7140: PUSH
7141: LD_INT 5
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: ST_TO_ADDR
7150: GO 8009
7152: LD_INT 9
7154: DOUBLE
7155: EQUAL
7156: IFTRUE 7160
7158: GO 7186
7160: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
7161: LD_ADDR_VAR 0 3
7165: PUSH
7166: LD_INT 2
7168: PUSH
7169: LD_INT 3
7171: PUSH
7172: LD_INT 4
7174: PUSH
7175: LD_INT 5
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: ST_TO_ADDR
7184: GO 8009
7186: LD_INT 7
7188: DOUBLE
7189: EQUAL
7190: IFTRUE 7194
7192: GO 7220
7194: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
7195: LD_ADDR_VAR 0 3
7199: PUSH
7200: LD_INT 2
7202: PUSH
7203: LD_INT 3
7205: PUSH
7206: LD_INT 4
7208: PUSH
7209: LD_INT 5
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: ST_TO_ADDR
7218: GO 8009
7220: LD_INT 12
7222: DOUBLE
7223: EQUAL
7224: IFTRUE 7228
7226: GO 7254
7228: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
7229: LD_ADDR_VAR 0 3
7233: PUSH
7234: LD_INT 2
7236: PUSH
7237: LD_INT 3
7239: PUSH
7240: LD_INT 4
7242: PUSH
7243: LD_INT 5
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: LIST
7250: LIST
7251: ST_TO_ADDR
7252: GO 8009
7254: LD_INT 13
7256: DOUBLE
7257: EQUAL
7258: IFTRUE 7262
7260: GO 7288
7262: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
7263: LD_ADDR_VAR 0 3
7267: PUSH
7268: LD_INT 2
7270: PUSH
7271: LD_INT 3
7273: PUSH
7274: LD_INT 4
7276: PUSH
7277: LD_INT 5
7279: PUSH
7280: EMPTY
7281: LIST
7282: LIST
7283: LIST
7284: LIST
7285: ST_TO_ADDR
7286: GO 8009
7288: LD_INT 14
7290: DOUBLE
7291: EQUAL
7292: IFTRUE 7296
7294: GO 7314
7296: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
7297: LD_ADDR_VAR 0 3
7301: PUSH
7302: LD_INT 4
7304: PUSH
7305: LD_INT 5
7307: PUSH
7308: EMPTY
7309: LIST
7310: LIST
7311: ST_TO_ADDR
7312: GO 8009
7314: LD_INT 6
7316: DOUBLE
7317: EQUAL
7318: IFTRUE 7322
7320: GO 7340
7322: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
7323: LD_ADDR_VAR 0 3
7327: PUSH
7328: LD_INT 4
7330: PUSH
7331: LD_INT 5
7333: PUSH
7334: EMPTY
7335: LIST
7336: LIST
7337: ST_TO_ADDR
7338: GO 8009
7340: LD_INT 10
7342: DOUBLE
7343: EQUAL
7344: IFTRUE 7348
7346: GO 7366
7348: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
7349: LD_ADDR_VAR 0 3
7353: PUSH
7354: LD_INT 4
7356: PUSH
7357: LD_INT 5
7359: PUSH
7360: EMPTY
7361: LIST
7362: LIST
7363: ST_TO_ADDR
7364: GO 8009
7366: LD_INT 22
7368: DOUBLE
7369: EQUAL
7370: IFTRUE 7374
7372: GO 7400
7374: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
7375: LD_ADDR_VAR 0 3
7379: PUSH
7380: LD_INT 11
7382: PUSH
7383: LD_INT 12
7385: PUSH
7386: LD_INT 13
7388: PUSH
7389: LD_INT 14
7391: PUSH
7392: EMPTY
7393: LIST
7394: LIST
7395: LIST
7396: LIST
7397: ST_TO_ADDR
7398: GO 8009
7400: LD_INT 23
7402: DOUBLE
7403: EQUAL
7404: IFTRUE 7408
7406: GO 7434
7408: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
7409: LD_ADDR_VAR 0 3
7413: PUSH
7414: LD_INT 11
7416: PUSH
7417: LD_INT 12
7419: PUSH
7420: LD_INT 13
7422: PUSH
7423: LD_INT 14
7425: PUSH
7426: EMPTY
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: ST_TO_ADDR
7432: GO 8009
7434: LD_INT 24
7436: DOUBLE
7437: EQUAL
7438: IFTRUE 7442
7440: GO 7468
7442: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
7443: LD_ADDR_VAR 0 3
7447: PUSH
7448: LD_INT 11
7450: PUSH
7451: LD_INT 12
7453: PUSH
7454: LD_INT 13
7456: PUSH
7457: LD_INT 14
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: ST_TO_ADDR
7466: GO 8009
7468: LD_INT 30
7470: DOUBLE
7471: EQUAL
7472: IFTRUE 7476
7474: GO 7502
7476: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
7477: LD_ADDR_VAR 0 3
7481: PUSH
7482: LD_INT 11
7484: PUSH
7485: LD_INT 12
7487: PUSH
7488: LD_INT 13
7490: PUSH
7491: LD_INT 14
7493: PUSH
7494: EMPTY
7495: LIST
7496: LIST
7497: LIST
7498: LIST
7499: ST_TO_ADDR
7500: GO 8009
7502: LD_INT 25
7504: DOUBLE
7505: EQUAL
7506: IFTRUE 7510
7508: GO 7528
7510: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
7511: LD_ADDR_VAR 0 3
7515: PUSH
7516: LD_INT 13
7518: PUSH
7519: LD_INT 14
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: ST_TO_ADDR
7526: GO 8009
7528: LD_INT 27
7530: DOUBLE
7531: EQUAL
7532: IFTRUE 7536
7534: GO 7554
7536: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
7537: LD_ADDR_VAR 0 3
7541: PUSH
7542: LD_INT 13
7544: PUSH
7545: LD_INT 14
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: ST_TO_ADDR
7552: GO 8009
7554: LD_INT 92
7556: DOUBLE
7557: EQUAL
7558: IFTRUE 7562
7560: GO 7588
7562: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
7563: LD_ADDR_VAR 0 3
7567: PUSH
7568: LD_INT 11
7570: PUSH
7571: LD_INT 12
7573: PUSH
7574: LD_INT 13
7576: PUSH
7577: LD_INT 14
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: LIST
7584: LIST
7585: ST_TO_ADDR
7586: GO 8009
7588: LD_INT 28
7590: DOUBLE
7591: EQUAL
7592: IFTRUE 7596
7594: GO 7614
7596: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
7597: LD_ADDR_VAR 0 3
7601: PUSH
7602: LD_INT 13
7604: PUSH
7605: LD_INT 14
7607: PUSH
7608: EMPTY
7609: LIST
7610: LIST
7611: ST_TO_ADDR
7612: GO 8009
7614: LD_INT 29
7616: DOUBLE
7617: EQUAL
7618: IFTRUE 7622
7620: GO 7640
7622: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7623: LD_ADDR_VAR 0 3
7627: PUSH
7628: LD_INT 13
7630: PUSH
7631: LD_INT 14
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: ST_TO_ADDR
7638: GO 8009
7640: LD_INT 31
7642: DOUBLE
7643: EQUAL
7644: IFTRUE 7648
7646: GO 7666
7648: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7649: LD_ADDR_VAR 0 3
7653: PUSH
7654: LD_INT 13
7656: PUSH
7657: LD_INT 14
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: ST_TO_ADDR
7664: GO 8009
7666: LD_INT 26
7668: DOUBLE
7669: EQUAL
7670: IFTRUE 7674
7672: GO 7692
7674: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7675: LD_ADDR_VAR 0 3
7679: PUSH
7680: LD_INT 13
7682: PUSH
7683: LD_INT 14
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: ST_TO_ADDR
7690: GO 8009
7692: LD_INT 42
7694: DOUBLE
7695: EQUAL
7696: IFTRUE 7700
7698: GO 7726
7700: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7701: LD_ADDR_VAR 0 3
7705: PUSH
7706: LD_INT 21
7708: PUSH
7709: LD_INT 22
7711: PUSH
7712: LD_INT 23
7714: PUSH
7715: LD_INT 24
7717: PUSH
7718: EMPTY
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: ST_TO_ADDR
7724: GO 8009
7726: LD_INT 43
7728: DOUBLE
7729: EQUAL
7730: IFTRUE 7734
7732: GO 7760
7734: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7735: LD_ADDR_VAR 0 3
7739: PUSH
7740: LD_INT 21
7742: PUSH
7743: LD_INT 22
7745: PUSH
7746: LD_INT 23
7748: PUSH
7749: LD_INT 24
7751: PUSH
7752: EMPTY
7753: LIST
7754: LIST
7755: LIST
7756: LIST
7757: ST_TO_ADDR
7758: GO 8009
7760: LD_INT 44
7762: DOUBLE
7763: EQUAL
7764: IFTRUE 7768
7766: GO 7794
7768: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7769: LD_ADDR_VAR 0 3
7773: PUSH
7774: LD_INT 21
7776: PUSH
7777: LD_INT 22
7779: PUSH
7780: LD_INT 23
7782: PUSH
7783: LD_INT 24
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: ST_TO_ADDR
7792: GO 8009
7794: LD_INT 45
7796: DOUBLE
7797: EQUAL
7798: IFTRUE 7802
7800: GO 7828
7802: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7803: LD_ADDR_VAR 0 3
7807: PUSH
7808: LD_INT 21
7810: PUSH
7811: LD_INT 22
7813: PUSH
7814: LD_INT 23
7816: PUSH
7817: LD_INT 24
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: ST_TO_ADDR
7826: GO 8009
7828: LD_INT 49
7830: DOUBLE
7831: EQUAL
7832: IFTRUE 7836
7834: GO 7862
7836: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7837: LD_ADDR_VAR 0 3
7841: PUSH
7842: LD_INT 21
7844: PUSH
7845: LD_INT 22
7847: PUSH
7848: LD_INT 23
7850: PUSH
7851: LD_INT 24
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: ST_TO_ADDR
7860: GO 8009
7862: LD_INT 51
7864: DOUBLE
7865: EQUAL
7866: IFTRUE 7870
7868: GO 7896
7870: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7871: LD_ADDR_VAR 0 3
7875: PUSH
7876: LD_INT 21
7878: PUSH
7879: LD_INT 22
7881: PUSH
7882: LD_INT 23
7884: PUSH
7885: LD_INT 24
7887: PUSH
7888: EMPTY
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: ST_TO_ADDR
7894: GO 8009
7896: LD_INT 52
7898: DOUBLE
7899: EQUAL
7900: IFTRUE 7904
7902: GO 7930
7904: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7905: LD_ADDR_VAR 0 3
7909: PUSH
7910: LD_INT 21
7912: PUSH
7913: LD_INT 22
7915: PUSH
7916: LD_INT 23
7918: PUSH
7919: LD_INT 24
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: ST_TO_ADDR
7928: GO 8009
7930: LD_INT 53
7932: DOUBLE
7933: EQUAL
7934: IFTRUE 7938
7936: GO 7956
7938: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7939: LD_ADDR_VAR 0 3
7943: PUSH
7944: LD_INT 23
7946: PUSH
7947: LD_INT 24
7949: PUSH
7950: EMPTY
7951: LIST
7952: LIST
7953: ST_TO_ADDR
7954: GO 8009
7956: LD_INT 46
7958: DOUBLE
7959: EQUAL
7960: IFTRUE 7964
7962: GO 7982
7964: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7965: LD_ADDR_VAR 0 3
7969: PUSH
7970: LD_INT 23
7972: PUSH
7973: LD_INT 24
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: ST_TO_ADDR
7980: GO 8009
7982: LD_INT 47
7984: DOUBLE
7985: EQUAL
7986: IFTRUE 7990
7988: GO 8008
7990: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7991: LD_ADDR_VAR 0 3
7995: PUSH
7996: LD_INT 23
7998: PUSH
7999: LD_INT 24
8001: PUSH
8002: EMPTY
8003: LIST
8004: LIST
8005: ST_TO_ADDR
8006: GO 8009
8008: POP
// result := ( chassis in result ) ;
8009: LD_ADDR_VAR 0 3
8013: PUSH
8014: LD_VAR 0 1
8018: PUSH
8019: LD_VAR 0 3
8023: IN
8024: ST_TO_ADDR
// end ;
8025: LD_VAR 0 3
8029: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
8030: LD_INT 0
8032: PPUSH
8033: PPUSH
8034: PPUSH
8035: PPUSH
8036: PPUSH
8037: PPUSH
8038: PPUSH
// result := array ;
8039: LD_ADDR_VAR 0 5
8043: PUSH
8044: LD_VAR 0 1
8048: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
8049: LD_VAR 0 1
8053: NOT
8054: PUSH
8055: LD_VAR 0 2
8059: NOT
8060: OR
8061: PUSH
8062: LD_VAR 0 3
8066: NOT
8067: OR
8068: PUSH
8069: LD_VAR 0 2
8073: PUSH
8074: LD_VAR 0 1
8078: GREATER
8079: OR
8080: PUSH
8081: LD_VAR 0 3
8085: PUSH
8086: LD_VAR 0 1
8090: GREATER
8091: OR
8092: IFFALSE 8096
// exit ;
8094: GO 8392
// if direction then
8096: LD_VAR 0 4
8100: IFFALSE 8164
// begin d := 1 ;
8102: LD_ADDR_VAR 0 9
8106: PUSH
8107: LD_INT 1
8109: ST_TO_ADDR
// if i_from > i_to then
8110: LD_VAR 0 2
8114: PUSH
8115: LD_VAR 0 3
8119: GREATER
8120: IFFALSE 8146
// length := ( array - i_from ) + i_to else
8122: LD_ADDR_VAR 0 11
8126: PUSH
8127: LD_VAR 0 1
8131: PUSH
8132: LD_VAR 0 2
8136: MINUS
8137: PUSH
8138: LD_VAR 0 3
8142: PLUS
8143: ST_TO_ADDR
8144: GO 8162
// length := i_to - i_from ;
8146: LD_ADDR_VAR 0 11
8150: PUSH
8151: LD_VAR 0 3
8155: PUSH
8156: LD_VAR 0 2
8160: MINUS
8161: ST_TO_ADDR
// end else
8162: GO 8225
// begin d := - 1 ;
8164: LD_ADDR_VAR 0 9
8168: PUSH
8169: LD_INT 1
8171: NEG
8172: ST_TO_ADDR
// if i_from > i_to then
8173: LD_VAR 0 2
8177: PUSH
8178: LD_VAR 0 3
8182: GREATER
8183: IFFALSE 8203
// length := i_from - i_to else
8185: LD_ADDR_VAR 0 11
8189: PUSH
8190: LD_VAR 0 2
8194: PUSH
8195: LD_VAR 0 3
8199: MINUS
8200: ST_TO_ADDR
8201: GO 8225
// length := ( array - i_to ) + i_from ;
8203: LD_ADDR_VAR 0 11
8207: PUSH
8208: LD_VAR 0 1
8212: PUSH
8213: LD_VAR 0 3
8217: MINUS
8218: PUSH
8219: LD_VAR 0 2
8223: PLUS
8224: ST_TO_ADDR
// end ; if not length then
8225: LD_VAR 0 11
8229: NOT
8230: IFFALSE 8234
// exit ;
8232: GO 8392
// tmp := array ;
8234: LD_ADDR_VAR 0 10
8238: PUSH
8239: LD_VAR 0 1
8243: ST_TO_ADDR
// for i = 1 to length do
8244: LD_ADDR_VAR 0 6
8248: PUSH
8249: DOUBLE
8250: LD_INT 1
8252: DEC
8253: ST_TO_ADDR
8254: LD_VAR 0 11
8258: PUSH
8259: FOR_TO
8260: IFFALSE 8380
// begin for j = 1 to array do
8262: LD_ADDR_VAR 0 7
8266: PUSH
8267: DOUBLE
8268: LD_INT 1
8270: DEC
8271: ST_TO_ADDR
8272: LD_VAR 0 1
8276: PUSH
8277: FOR_TO
8278: IFFALSE 8366
// begin k := j + d ;
8280: LD_ADDR_VAR 0 8
8284: PUSH
8285: LD_VAR 0 7
8289: PUSH
8290: LD_VAR 0 9
8294: PLUS
8295: ST_TO_ADDR
// if k > array then
8296: LD_VAR 0 8
8300: PUSH
8301: LD_VAR 0 1
8305: GREATER
8306: IFFALSE 8316
// k := 1 ;
8308: LD_ADDR_VAR 0 8
8312: PUSH
8313: LD_INT 1
8315: ST_TO_ADDR
// if not k then
8316: LD_VAR 0 8
8320: NOT
8321: IFFALSE 8333
// k := array ;
8323: LD_ADDR_VAR 0 8
8327: PUSH
8328: LD_VAR 0 1
8332: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
8333: LD_ADDR_VAR 0 10
8337: PUSH
8338: LD_VAR 0 10
8342: PPUSH
8343: LD_VAR 0 8
8347: PPUSH
8348: LD_VAR 0 1
8352: PUSH
8353: LD_VAR 0 7
8357: ARRAY
8358: PPUSH
8359: CALL_OW 1
8363: ST_TO_ADDR
// end ;
8364: GO 8277
8366: POP
8367: POP
// array := tmp ;
8368: LD_ADDR_VAR 0 1
8372: PUSH
8373: LD_VAR 0 10
8377: ST_TO_ADDR
// end ;
8378: GO 8259
8380: POP
8381: POP
// result := array ;
8382: LD_ADDR_VAR 0 5
8386: PUSH
8387: LD_VAR 0 1
8391: ST_TO_ADDR
// end ;
8392: LD_VAR 0 5
8396: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
8397: LD_INT 0
8399: PPUSH
8400: PPUSH
// result := 0 ;
8401: LD_ADDR_VAR 0 3
8405: PUSH
8406: LD_INT 0
8408: ST_TO_ADDR
// if not array or not value in array then
8409: LD_VAR 0 1
8413: NOT
8414: PUSH
8415: LD_VAR 0 2
8419: PUSH
8420: LD_VAR 0 1
8424: IN
8425: NOT
8426: OR
8427: IFFALSE 8431
// exit ;
8429: GO 8485
// for i = 1 to array do
8431: LD_ADDR_VAR 0 4
8435: PUSH
8436: DOUBLE
8437: LD_INT 1
8439: DEC
8440: ST_TO_ADDR
8441: LD_VAR 0 1
8445: PUSH
8446: FOR_TO
8447: IFFALSE 8483
// if value = array [ i ] then
8449: LD_VAR 0 2
8453: PUSH
8454: LD_VAR 0 1
8458: PUSH
8459: LD_VAR 0 4
8463: ARRAY
8464: EQUAL
8465: IFFALSE 8481
// begin result := i ;
8467: LD_ADDR_VAR 0 3
8471: PUSH
8472: LD_VAR 0 4
8476: ST_TO_ADDR
// exit ;
8477: POP
8478: POP
8479: GO 8485
// end ;
8481: GO 8446
8483: POP
8484: POP
// end ;
8485: LD_VAR 0 3
8489: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
8490: LD_INT 0
8492: PPUSH
// vc_chassis := chassis ;
8493: LD_ADDR_OWVAR 37
8497: PUSH
8498: LD_VAR 0 1
8502: ST_TO_ADDR
// vc_engine := engine ;
8503: LD_ADDR_OWVAR 39
8507: PUSH
8508: LD_VAR 0 2
8512: ST_TO_ADDR
// vc_control := control ;
8513: LD_ADDR_OWVAR 38
8517: PUSH
8518: LD_VAR 0 3
8522: ST_TO_ADDR
// vc_weapon := weapon ;
8523: LD_ADDR_OWVAR 40
8527: PUSH
8528: LD_VAR 0 4
8532: ST_TO_ADDR
// vc_fuel_battery := fuel ;
8533: LD_ADDR_OWVAR 41
8537: PUSH
8538: LD_VAR 0 5
8542: ST_TO_ADDR
// end ;
8543: LD_VAR 0 6
8547: RET
// export function WantPlant ( unit ) ; var task ; begin
8548: LD_INT 0
8550: PPUSH
8551: PPUSH
// result := false ;
8552: LD_ADDR_VAR 0 2
8556: PUSH
8557: LD_INT 0
8559: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
8560: LD_ADDR_VAR 0 3
8564: PUSH
8565: LD_VAR 0 1
8569: PPUSH
8570: CALL_OW 437
8574: ST_TO_ADDR
// if task then
8575: LD_VAR 0 3
8579: IFFALSE 8607
// if task [ 1 ] [ 1 ] = p then
8581: LD_VAR 0 3
8585: PUSH
8586: LD_INT 1
8588: ARRAY
8589: PUSH
8590: LD_INT 1
8592: ARRAY
8593: PUSH
8594: LD_STRING p
8596: EQUAL
8597: IFFALSE 8607
// result := true ;
8599: LD_ADDR_VAR 0 2
8603: PUSH
8604: LD_INT 1
8606: ST_TO_ADDR
// end ;
8607: LD_VAR 0 2
8611: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8612: LD_INT 0
8614: PPUSH
8615: PPUSH
8616: PPUSH
8617: PPUSH
// if pos < 1 then
8618: LD_VAR 0 2
8622: PUSH
8623: LD_INT 1
8625: LESS
8626: IFFALSE 8630
// exit ;
8628: GO 8933
// if pos = 1 then
8630: LD_VAR 0 2
8634: PUSH
8635: LD_INT 1
8637: EQUAL
8638: IFFALSE 8671
// result := Replace ( arr , pos [ 1 ] , value ) else
8640: LD_ADDR_VAR 0 4
8644: PUSH
8645: LD_VAR 0 1
8649: PPUSH
8650: LD_VAR 0 2
8654: PUSH
8655: LD_INT 1
8657: ARRAY
8658: PPUSH
8659: LD_VAR 0 3
8663: PPUSH
8664: CALL_OW 1
8668: ST_TO_ADDR
8669: GO 8933
// begin tmp := arr ;
8671: LD_ADDR_VAR 0 6
8675: PUSH
8676: LD_VAR 0 1
8680: ST_TO_ADDR
// s_arr := [ tmp ] ;
8681: LD_ADDR_VAR 0 7
8685: PUSH
8686: LD_VAR 0 6
8690: PUSH
8691: EMPTY
8692: LIST
8693: ST_TO_ADDR
// for i = 1 to pos - 1 do
8694: LD_ADDR_VAR 0 5
8698: PUSH
8699: DOUBLE
8700: LD_INT 1
8702: DEC
8703: ST_TO_ADDR
8704: LD_VAR 0 2
8708: PUSH
8709: LD_INT 1
8711: MINUS
8712: PUSH
8713: FOR_TO
8714: IFFALSE 8759
// begin tmp := tmp [ pos [ i ] ] ;
8716: LD_ADDR_VAR 0 6
8720: PUSH
8721: LD_VAR 0 6
8725: PUSH
8726: LD_VAR 0 2
8730: PUSH
8731: LD_VAR 0 5
8735: ARRAY
8736: ARRAY
8737: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8738: LD_ADDR_VAR 0 7
8742: PUSH
8743: LD_VAR 0 7
8747: PUSH
8748: LD_VAR 0 6
8752: PUSH
8753: EMPTY
8754: LIST
8755: ADD
8756: ST_TO_ADDR
// end ;
8757: GO 8713
8759: POP
8760: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8761: LD_ADDR_VAR 0 6
8765: PUSH
8766: LD_VAR 0 6
8770: PPUSH
8771: LD_VAR 0 2
8775: PUSH
8776: LD_VAR 0 2
8780: ARRAY
8781: PPUSH
8782: LD_VAR 0 3
8786: PPUSH
8787: CALL_OW 1
8791: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8792: LD_ADDR_VAR 0 7
8796: PUSH
8797: LD_VAR 0 7
8801: PPUSH
8802: LD_VAR 0 7
8806: PPUSH
8807: LD_VAR 0 6
8811: PPUSH
8812: CALL_OW 1
8816: ST_TO_ADDR
// for i = s_arr downto 2 do
8817: LD_ADDR_VAR 0 5
8821: PUSH
8822: DOUBLE
8823: LD_VAR 0 7
8827: INC
8828: ST_TO_ADDR
8829: LD_INT 2
8831: PUSH
8832: FOR_DOWNTO
8833: IFFALSE 8917
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8835: LD_ADDR_VAR 0 6
8839: PUSH
8840: LD_VAR 0 7
8844: PUSH
8845: LD_VAR 0 5
8849: PUSH
8850: LD_INT 1
8852: MINUS
8853: ARRAY
8854: PPUSH
8855: LD_VAR 0 2
8859: PUSH
8860: LD_VAR 0 5
8864: PUSH
8865: LD_INT 1
8867: MINUS
8868: ARRAY
8869: PPUSH
8870: LD_VAR 0 7
8874: PUSH
8875: LD_VAR 0 5
8879: ARRAY
8880: PPUSH
8881: CALL_OW 1
8885: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8886: LD_ADDR_VAR 0 7
8890: PUSH
8891: LD_VAR 0 7
8895: PPUSH
8896: LD_VAR 0 5
8900: PUSH
8901: LD_INT 1
8903: MINUS
8904: PPUSH
8905: LD_VAR 0 6
8909: PPUSH
8910: CALL_OW 1
8914: ST_TO_ADDR
// end ;
8915: GO 8832
8917: POP
8918: POP
// result := s_arr [ 1 ] ;
8919: LD_ADDR_VAR 0 4
8923: PUSH
8924: LD_VAR 0 7
8928: PUSH
8929: LD_INT 1
8931: ARRAY
8932: ST_TO_ADDR
// end ; end ;
8933: LD_VAR 0 4
8937: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8938: LD_INT 0
8940: PPUSH
8941: PPUSH
// if not list then
8942: LD_VAR 0 1
8946: NOT
8947: IFFALSE 8951
// exit ;
8949: GO 9042
// i := list [ pos1 ] ;
8951: LD_ADDR_VAR 0 5
8955: PUSH
8956: LD_VAR 0 1
8960: PUSH
8961: LD_VAR 0 2
8965: ARRAY
8966: ST_TO_ADDR
// if not i then
8967: LD_VAR 0 5
8971: NOT
8972: IFFALSE 8976
// exit ;
8974: GO 9042
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8976: LD_ADDR_VAR 0 1
8980: PUSH
8981: LD_VAR 0 1
8985: PPUSH
8986: LD_VAR 0 2
8990: PPUSH
8991: LD_VAR 0 1
8995: PUSH
8996: LD_VAR 0 3
9000: ARRAY
9001: PPUSH
9002: CALL_OW 1
9006: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
9007: LD_ADDR_VAR 0 1
9011: PUSH
9012: LD_VAR 0 1
9016: PPUSH
9017: LD_VAR 0 3
9021: PPUSH
9022: LD_VAR 0 5
9026: PPUSH
9027: CALL_OW 1
9031: ST_TO_ADDR
// result := list ;
9032: LD_ADDR_VAR 0 4
9036: PUSH
9037: LD_VAR 0 1
9041: ST_TO_ADDR
// end ;
9042: LD_VAR 0 4
9046: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
9047: LD_INT 0
9049: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
9050: LD_ADDR_VAR 0 5
9054: PUSH
9055: LD_VAR 0 1
9059: PPUSH
9060: CALL_OW 250
9064: PPUSH
9065: LD_VAR 0 1
9069: PPUSH
9070: CALL_OW 251
9074: PPUSH
9075: LD_VAR 0 2
9079: PPUSH
9080: LD_VAR 0 3
9084: PPUSH
9085: LD_VAR 0 4
9089: PPUSH
9090: CALL 9100 0 5
9094: ST_TO_ADDR
// end ;
9095: LD_VAR 0 5
9099: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
9100: LD_INT 0
9102: PPUSH
9103: PPUSH
9104: PPUSH
9105: PPUSH
// if not list then
9106: LD_VAR 0 3
9110: NOT
9111: IFFALSE 9115
// exit ;
9113: GO 9503
// result := [ ] ;
9115: LD_ADDR_VAR 0 6
9119: PUSH
9120: EMPTY
9121: ST_TO_ADDR
// for i in list do
9122: LD_ADDR_VAR 0 7
9126: PUSH
9127: LD_VAR 0 3
9131: PUSH
9132: FOR_IN
9133: IFFALSE 9335
// begin tmp := GetDistUnitXY ( i , x , y ) ;
9135: LD_ADDR_VAR 0 9
9139: PUSH
9140: LD_VAR 0 7
9144: PPUSH
9145: LD_VAR 0 1
9149: PPUSH
9150: LD_VAR 0 2
9154: PPUSH
9155: CALL_OW 297
9159: ST_TO_ADDR
// if not result then
9160: LD_VAR 0 6
9164: NOT
9165: IFFALSE 9191
// result := [ [ i , tmp ] ] else
9167: LD_ADDR_VAR 0 6
9171: PUSH
9172: LD_VAR 0 7
9176: PUSH
9177: LD_VAR 0 9
9181: PUSH
9182: EMPTY
9183: LIST
9184: LIST
9185: PUSH
9186: EMPTY
9187: LIST
9188: ST_TO_ADDR
9189: GO 9333
// begin if result [ result ] [ 2 ] < tmp then
9191: LD_VAR 0 6
9195: PUSH
9196: LD_VAR 0 6
9200: ARRAY
9201: PUSH
9202: LD_INT 2
9204: ARRAY
9205: PUSH
9206: LD_VAR 0 9
9210: LESS
9211: IFFALSE 9253
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9213: LD_ADDR_VAR 0 6
9217: PUSH
9218: LD_VAR 0 6
9222: PPUSH
9223: LD_VAR 0 6
9227: PUSH
9228: LD_INT 1
9230: PLUS
9231: PPUSH
9232: LD_VAR 0 7
9236: PUSH
9237: LD_VAR 0 9
9241: PUSH
9242: EMPTY
9243: LIST
9244: LIST
9245: PPUSH
9246: CALL_OW 2
9250: ST_TO_ADDR
9251: GO 9333
// for j = 1 to result do
9253: LD_ADDR_VAR 0 8
9257: PUSH
9258: DOUBLE
9259: LD_INT 1
9261: DEC
9262: ST_TO_ADDR
9263: LD_VAR 0 6
9267: PUSH
9268: FOR_TO
9269: IFFALSE 9331
// begin if tmp < result [ j ] [ 2 ] then
9271: LD_VAR 0 9
9275: PUSH
9276: LD_VAR 0 6
9280: PUSH
9281: LD_VAR 0 8
9285: ARRAY
9286: PUSH
9287: LD_INT 2
9289: ARRAY
9290: LESS
9291: IFFALSE 9329
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9293: LD_ADDR_VAR 0 6
9297: PUSH
9298: LD_VAR 0 6
9302: PPUSH
9303: LD_VAR 0 8
9307: PPUSH
9308: LD_VAR 0 7
9312: PUSH
9313: LD_VAR 0 9
9317: PUSH
9318: EMPTY
9319: LIST
9320: LIST
9321: PPUSH
9322: CALL_OW 2
9326: ST_TO_ADDR
// break ;
9327: GO 9331
// end ; end ;
9329: GO 9268
9331: POP
9332: POP
// end ; end ;
9333: GO 9132
9335: POP
9336: POP
// if result and not asc then
9337: LD_VAR 0 6
9341: PUSH
9342: LD_VAR 0 4
9346: NOT
9347: AND
9348: IFFALSE 9423
// begin tmp := result ;
9350: LD_ADDR_VAR 0 9
9354: PUSH
9355: LD_VAR 0 6
9359: ST_TO_ADDR
// for i = tmp downto 1 do
9360: LD_ADDR_VAR 0 7
9364: PUSH
9365: DOUBLE
9366: LD_VAR 0 9
9370: INC
9371: ST_TO_ADDR
9372: LD_INT 1
9374: PUSH
9375: FOR_DOWNTO
9376: IFFALSE 9421
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9378: LD_ADDR_VAR 0 6
9382: PUSH
9383: LD_VAR 0 6
9387: PPUSH
9388: LD_VAR 0 9
9392: PUSH
9393: LD_VAR 0 7
9397: MINUS
9398: PUSH
9399: LD_INT 1
9401: PLUS
9402: PPUSH
9403: LD_VAR 0 9
9407: PUSH
9408: LD_VAR 0 7
9412: ARRAY
9413: PPUSH
9414: CALL_OW 1
9418: ST_TO_ADDR
9419: GO 9375
9421: POP
9422: POP
// end ; tmp := [ ] ;
9423: LD_ADDR_VAR 0 9
9427: PUSH
9428: EMPTY
9429: ST_TO_ADDR
// if mode then
9430: LD_VAR 0 5
9434: IFFALSE 9503
// begin for i = 1 to result do
9436: LD_ADDR_VAR 0 7
9440: PUSH
9441: DOUBLE
9442: LD_INT 1
9444: DEC
9445: ST_TO_ADDR
9446: LD_VAR 0 6
9450: PUSH
9451: FOR_TO
9452: IFFALSE 9491
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9454: LD_ADDR_VAR 0 9
9458: PUSH
9459: LD_VAR 0 9
9463: PPUSH
9464: LD_VAR 0 7
9468: PPUSH
9469: LD_VAR 0 6
9473: PUSH
9474: LD_VAR 0 7
9478: ARRAY
9479: PUSH
9480: LD_INT 1
9482: ARRAY
9483: PPUSH
9484: CALL_OW 1
9488: ST_TO_ADDR
9489: GO 9451
9491: POP
9492: POP
// result := tmp ;
9493: LD_ADDR_VAR 0 6
9497: PUSH
9498: LD_VAR 0 9
9502: ST_TO_ADDR
// end ; end ;
9503: LD_VAR 0 6
9507: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9508: LD_INT 0
9510: PPUSH
9511: PPUSH
9512: PPUSH
9513: PPUSH
9514: PPUSH
9515: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9516: LD_ADDR_VAR 0 5
9520: PUSH
9521: LD_INT 0
9523: PUSH
9524: LD_INT 0
9526: PUSH
9527: LD_INT 0
9529: PUSH
9530: EMPTY
9531: PUSH
9532: EMPTY
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: ST_TO_ADDR
// if not x or not y then
9538: LD_VAR 0 2
9542: NOT
9543: PUSH
9544: LD_VAR 0 3
9548: NOT
9549: OR
9550: IFFALSE 9554
// exit ;
9552: GO 11204
// if not range then
9554: LD_VAR 0 4
9558: NOT
9559: IFFALSE 9569
// range := 10 ;
9561: LD_ADDR_VAR 0 4
9565: PUSH
9566: LD_INT 10
9568: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9569: LD_ADDR_VAR 0 8
9573: PUSH
9574: LD_INT 81
9576: PUSH
9577: LD_VAR 0 1
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: PUSH
9586: LD_INT 92
9588: PUSH
9589: LD_VAR 0 2
9593: PUSH
9594: LD_VAR 0 3
9598: PUSH
9599: LD_VAR 0 4
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: PUSH
9610: LD_INT 3
9612: PUSH
9613: LD_INT 21
9615: PUSH
9616: LD_INT 3
9618: PUSH
9619: EMPTY
9620: LIST
9621: LIST
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: PUSH
9627: EMPTY
9628: LIST
9629: LIST
9630: LIST
9631: PPUSH
9632: CALL_OW 69
9636: ST_TO_ADDR
// if not tmp then
9637: LD_VAR 0 8
9641: NOT
9642: IFFALSE 9646
// exit ;
9644: GO 11204
// for i in tmp do
9646: LD_ADDR_VAR 0 6
9650: PUSH
9651: LD_VAR 0 8
9655: PUSH
9656: FOR_IN
9657: IFFALSE 11179
// begin points := [ 0 , 0 , 0 ] ;
9659: LD_ADDR_VAR 0 9
9663: PUSH
9664: LD_INT 0
9666: PUSH
9667: LD_INT 0
9669: PUSH
9670: LD_INT 0
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: LIST
9677: ST_TO_ADDR
// bpoints := 1 ;
9678: LD_ADDR_VAR 0 10
9682: PUSH
9683: LD_INT 1
9685: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9686: LD_VAR 0 6
9690: PPUSH
9691: CALL_OW 247
9695: PUSH
9696: LD_INT 1
9698: DOUBLE
9699: EQUAL
9700: IFTRUE 9704
9702: GO 10282
9704: POP
// begin if GetClass ( i ) = 1 then
9705: LD_VAR 0 6
9709: PPUSH
9710: CALL_OW 257
9714: PUSH
9715: LD_INT 1
9717: EQUAL
9718: IFFALSE 9739
// points := [ 10 , 5 , 3 ] ;
9720: LD_ADDR_VAR 0 9
9724: PUSH
9725: LD_INT 10
9727: PUSH
9728: LD_INT 5
9730: PUSH
9731: LD_INT 3
9733: PUSH
9734: EMPTY
9735: LIST
9736: LIST
9737: LIST
9738: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9739: LD_VAR 0 6
9743: PPUSH
9744: CALL_OW 257
9748: PUSH
9749: LD_INT 2
9751: PUSH
9752: LD_INT 3
9754: PUSH
9755: LD_INT 4
9757: PUSH
9758: EMPTY
9759: LIST
9760: LIST
9761: LIST
9762: IN
9763: IFFALSE 9784
// points := [ 3 , 2 , 1 ] ;
9765: LD_ADDR_VAR 0 9
9769: PUSH
9770: LD_INT 3
9772: PUSH
9773: LD_INT 2
9775: PUSH
9776: LD_INT 1
9778: PUSH
9779: EMPTY
9780: LIST
9781: LIST
9782: LIST
9783: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9784: LD_VAR 0 6
9788: PPUSH
9789: CALL_OW 257
9793: PUSH
9794: LD_INT 5
9796: EQUAL
9797: IFFALSE 9818
// points := [ 130 , 5 , 2 ] ;
9799: LD_ADDR_VAR 0 9
9803: PUSH
9804: LD_INT 130
9806: PUSH
9807: LD_INT 5
9809: PUSH
9810: LD_INT 2
9812: PUSH
9813: EMPTY
9814: LIST
9815: LIST
9816: LIST
9817: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9818: LD_VAR 0 6
9822: PPUSH
9823: CALL_OW 257
9827: PUSH
9828: LD_INT 8
9830: EQUAL
9831: IFFALSE 9852
// points := [ 35 , 35 , 30 ] ;
9833: LD_ADDR_VAR 0 9
9837: PUSH
9838: LD_INT 35
9840: PUSH
9841: LD_INT 35
9843: PUSH
9844: LD_INT 30
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: LIST
9851: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9852: LD_VAR 0 6
9856: PPUSH
9857: CALL_OW 257
9861: PUSH
9862: LD_INT 9
9864: EQUAL
9865: IFFALSE 9886
// points := [ 20 , 55 , 40 ] ;
9867: LD_ADDR_VAR 0 9
9871: PUSH
9872: LD_INT 20
9874: PUSH
9875: LD_INT 55
9877: PUSH
9878: LD_INT 40
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: LIST
9885: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9886: LD_VAR 0 6
9890: PPUSH
9891: CALL_OW 257
9895: PUSH
9896: LD_INT 12
9898: PUSH
9899: LD_INT 16
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: IN
9906: IFFALSE 9927
// points := [ 5 , 3 , 2 ] ;
9908: LD_ADDR_VAR 0 9
9912: PUSH
9913: LD_INT 5
9915: PUSH
9916: LD_INT 3
9918: PUSH
9919: LD_INT 2
9921: PUSH
9922: EMPTY
9923: LIST
9924: LIST
9925: LIST
9926: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9927: LD_VAR 0 6
9931: PPUSH
9932: CALL_OW 257
9936: PUSH
9937: LD_INT 17
9939: EQUAL
9940: IFFALSE 9961
// points := [ 100 , 50 , 75 ] ;
9942: LD_ADDR_VAR 0 9
9946: PUSH
9947: LD_INT 100
9949: PUSH
9950: LD_INT 50
9952: PUSH
9953: LD_INT 75
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: LIST
9960: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9961: LD_VAR 0 6
9965: PPUSH
9966: CALL_OW 257
9970: PUSH
9971: LD_INT 15
9973: EQUAL
9974: IFFALSE 9995
// points := [ 10 , 5 , 3 ] ;
9976: LD_ADDR_VAR 0 9
9980: PUSH
9981: LD_INT 10
9983: PUSH
9984: LD_INT 5
9986: PUSH
9987: LD_INT 3
9989: PUSH
9990: EMPTY
9991: LIST
9992: LIST
9993: LIST
9994: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9995: LD_VAR 0 6
9999: PPUSH
10000: CALL_OW 257
10004: PUSH
10005: LD_INT 14
10007: EQUAL
10008: IFFALSE 10029
// points := [ 10 , 0 , 0 ] ;
10010: LD_ADDR_VAR 0 9
10014: PUSH
10015: LD_INT 10
10017: PUSH
10018: LD_INT 0
10020: PUSH
10021: LD_INT 0
10023: PUSH
10024: EMPTY
10025: LIST
10026: LIST
10027: LIST
10028: ST_TO_ADDR
// if GetClass ( i ) = 11 then
10029: LD_VAR 0 6
10033: PPUSH
10034: CALL_OW 257
10038: PUSH
10039: LD_INT 11
10041: EQUAL
10042: IFFALSE 10063
// points := [ 30 , 10 , 5 ] ;
10044: LD_ADDR_VAR 0 9
10048: PUSH
10049: LD_INT 30
10051: PUSH
10052: LD_INT 10
10054: PUSH
10055: LD_INT 5
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: LIST
10062: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
10063: LD_VAR 0 1
10067: PPUSH
10068: LD_INT 5
10070: PPUSH
10071: CALL_OW 321
10075: PUSH
10076: LD_INT 2
10078: EQUAL
10079: IFFALSE 10096
// bpoints := bpoints * 1.8 ;
10081: LD_ADDR_VAR 0 10
10085: PUSH
10086: LD_VAR 0 10
10090: PUSH
10091: LD_REAL  1.80000000000000E+0000
10094: MUL
10095: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
10096: LD_VAR 0 6
10100: PPUSH
10101: CALL_OW 257
10105: PUSH
10106: LD_INT 1
10108: PUSH
10109: LD_INT 2
10111: PUSH
10112: LD_INT 3
10114: PUSH
10115: LD_INT 4
10117: PUSH
10118: EMPTY
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: IN
10124: PUSH
10125: LD_VAR 0 1
10129: PPUSH
10130: LD_INT 51
10132: PPUSH
10133: CALL_OW 321
10137: PUSH
10138: LD_INT 2
10140: EQUAL
10141: AND
10142: IFFALSE 10159
// bpoints := bpoints * 1.2 ;
10144: LD_ADDR_VAR 0 10
10148: PUSH
10149: LD_VAR 0 10
10153: PUSH
10154: LD_REAL  1.20000000000000E+0000
10157: MUL
10158: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
10159: LD_VAR 0 6
10163: PPUSH
10164: CALL_OW 257
10168: PUSH
10169: LD_INT 5
10171: PUSH
10172: LD_INT 7
10174: PUSH
10175: LD_INT 9
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: LIST
10182: IN
10183: PUSH
10184: LD_VAR 0 1
10188: PPUSH
10189: LD_INT 52
10191: PPUSH
10192: CALL_OW 321
10196: PUSH
10197: LD_INT 2
10199: EQUAL
10200: AND
10201: IFFALSE 10218
// bpoints := bpoints * 1.5 ;
10203: LD_ADDR_VAR 0 10
10207: PUSH
10208: LD_VAR 0 10
10212: PUSH
10213: LD_REAL  1.50000000000000E+0000
10216: MUL
10217: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10218: LD_VAR 0 1
10222: PPUSH
10223: LD_INT 66
10225: PPUSH
10226: CALL_OW 321
10230: PUSH
10231: LD_INT 2
10233: EQUAL
10234: IFFALSE 10251
// bpoints := bpoints * 1.1 ;
10236: LD_ADDR_VAR 0 10
10240: PUSH
10241: LD_VAR 0 10
10245: PUSH
10246: LD_REAL  1.10000000000000E+0000
10249: MUL
10250: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10251: LD_ADDR_VAR 0 10
10255: PUSH
10256: LD_VAR 0 10
10260: PUSH
10261: LD_VAR 0 6
10265: PPUSH
10266: LD_INT 1
10268: PPUSH
10269: CALL_OW 259
10273: PUSH
10274: LD_REAL  1.15000000000000E+0000
10277: MUL
10278: MUL
10279: ST_TO_ADDR
// end ; unit_vehicle :
10280: GO 11108
10282: LD_INT 2
10284: DOUBLE
10285: EQUAL
10286: IFTRUE 10290
10288: GO 11096
10290: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10291: LD_VAR 0 6
10295: PPUSH
10296: CALL_OW 264
10300: PUSH
10301: LD_INT 2
10303: PUSH
10304: LD_INT 42
10306: PUSH
10307: LD_INT 24
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: LIST
10314: IN
10315: IFFALSE 10336
// points := [ 25 , 5 , 3 ] ;
10317: LD_ADDR_VAR 0 9
10321: PUSH
10322: LD_INT 25
10324: PUSH
10325: LD_INT 5
10327: PUSH
10328: LD_INT 3
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: LIST
10335: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10336: LD_VAR 0 6
10340: PPUSH
10341: CALL_OW 264
10345: PUSH
10346: LD_INT 4
10348: PUSH
10349: LD_INT 43
10351: PUSH
10352: LD_INT 25
10354: PUSH
10355: EMPTY
10356: LIST
10357: LIST
10358: LIST
10359: IN
10360: IFFALSE 10381
// points := [ 40 , 15 , 5 ] ;
10362: LD_ADDR_VAR 0 9
10366: PUSH
10367: LD_INT 40
10369: PUSH
10370: LD_INT 15
10372: PUSH
10373: LD_INT 5
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: LIST
10380: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10381: LD_VAR 0 6
10385: PPUSH
10386: CALL_OW 264
10390: PUSH
10391: LD_INT 3
10393: PUSH
10394: LD_INT 23
10396: PUSH
10397: EMPTY
10398: LIST
10399: LIST
10400: IN
10401: IFFALSE 10422
// points := [ 7 , 25 , 8 ] ;
10403: LD_ADDR_VAR 0 9
10407: PUSH
10408: LD_INT 7
10410: PUSH
10411: LD_INT 25
10413: PUSH
10414: LD_INT 8
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: LIST
10421: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10422: LD_VAR 0 6
10426: PPUSH
10427: CALL_OW 264
10431: PUSH
10432: LD_INT 5
10434: PUSH
10435: LD_INT 27
10437: PUSH
10438: LD_INT 44
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: LIST
10445: IN
10446: IFFALSE 10467
// points := [ 14 , 50 , 16 ] ;
10448: LD_ADDR_VAR 0 9
10452: PUSH
10453: LD_INT 14
10455: PUSH
10456: LD_INT 50
10458: PUSH
10459: LD_INT 16
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: LIST
10466: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10467: LD_VAR 0 6
10471: PPUSH
10472: CALL_OW 264
10476: PUSH
10477: LD_INT 6
10479: PUSH
10480: LD_INT 46
10482: PUSH
10483: EMPTY
10484: LIST
10485: LIST
10486: IN
10487: IFFALSE 10508
// points := [ 32 , 120 , 70 ] ;
10489: LD_ADDR_VAR 0 9
10493: PUSH
10494: LD_INT 32
10496: PUSH
10497: LD_INT 120
10499: PUSH
10500: LD_INT 70
10502: PUSH
10503: EMPTY
10504: LIST
10505: LIST
10506: LIST
10507: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10508: LD_VAR 0 6
10512: PPUSH
10513: CALL_OW 264
10517: PUSH
10518: LD_INT 7
10520: PUSH
10521: LD_INT 28
10523: PUSH
10524: LD_INT 45
10526: PUSH
10527: LD_INT 92
10529: PUSH
10530: EMPTY
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: IN
10536: IFFALSE 10557
// points := [ 35 , 20 , 45 ] ;
10538: LD_ADDR_VAR 0 9
10542: PUSH
10543: LD_INT 35
10545: PUSH
10546: LD_INT 20
10548: PUSH
10549: LD_INT 45
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: LIST
10556: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10557: LD_VAR 0 6
10561: PPUSH
10562: CALL_OW 264
10566: PUSH
10567: LD_INT 47
10569: PUSH
10570: EMPTY
10571: LIST
10572: IN
10573: IFFALSE 10594
// points := [ 67 , 45 , 75 ] ;
10575: LD_ADDR_VAR 0 9
10579: PUSH
10580: LD_INT 67
10582: PUSH
10583: LD_INT 45
10585: PUSH
10586: LD_INT 75
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: LIST
10593: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10594: LD_VAR 0 6
10598: PPUSH
10599: CALL_OW 264
10603: PUSH
10604: LD_INT 26
10606: PUSH
10607: EMPTY
10608: LIST
10609: IN
10610: IFFALSE 10631
// points := [ 120 , 30 , 80 ] ;
10612: LD_ADDR_VAR 0 9
10616: PUSH
10617: LD_INT 120
10619: PUSH
10620: LD_INT 30
10622: PUSH
10623: LD_INT 80
10625: PUSH
10626: EMPTY
10627: LIST
10628: LIST
10629: LIST
10630: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10631: LD_VAR 0 6
10635: PPUSH
10636: CALL_OW 264
10640: PUSH
10641: LD_INT 22
10643: PUSH
10644: EMPTY
10645: LIST
10646: IN
10647: IFFALSE 10668
// points := [ 40 , 1 , 1 ] ;
10649: LD_ADDR_VAR 0 9
10653: PUSH
10654: LD_INT 40
10656: PUSH
10657: LD_INT 1
10659: PUSH
10660: LD_INT 1
10662: PUSH
10663: EMPTY
10664: LIST
10665: LIST
10666: LIST
10667: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10668: LD_VAR 0 6
10672: PPUSH
10673: CALL_OW 264
10677: PUSH
10678: LD_INT 29
10680: PUSH
10681: EMPTY
10682: LIST
10683: IN
10684: IFFALSE 10705
// points := [ 70 , 200 , 400 ] ;
10686: LD_ADDR_VAR 0 9
10690: PUSH
10691: LD_INT 70
10693: PUSH
10694: LD_INT 200
10696: PUSH
10697: LD_INT 400
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: LIST
10704: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10705: LD_VAR 0 6
10709: PPUSH
10710: CALL_OW 264
10714: PUSH
10715: LD_INT 14
10717: PUSH
10718: LD_INT 53
10720: PUSH
10721: EMPTY
10722: LIST
10723: LIST
10724: IN
10725: IFFALSE 10746
// points := [ 40 , 10 , 20 ] ;
10727: LD_ADDR_VAR 0 9
10731: PUSH
10732: LD_INT 40
10734: PUSH
10735: LD_INT 10
10737: PUSH
10738: LD_INT 20
10740: PUSH
10741: EMPTY
10742: LIST
10743: LIST
10744: LIST
10745: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10746: LD_VAR 0 6
10750: PPUSH
10751: CALL_OW 264
10755: PUSH
10756: LD_INT 9
10758: PUSH
10759: EMPTY
10760: LIST
10761: IN
10762: IFFALSE 10783
// points := [ 5 , 70 , 20 ] ;
10764: LD_ADDR_VAR 0 9
10768: PUSH
10769: LD_INT 5
10771: PUSH
10772: LD_INT 70
10774: PUSH
10775: LD_INT 20
10777: PUSH
10778: EMPTY
10779: LIST
10780: LIST
10781: LIST
10782: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10783: LD_VAR 0 6
10787: PPUSH
10788: CALL_OW 264
10792: PUSH
10793: LD_INT 10
10795: PUSH
10796: EMPTY
10797: LIST
10798: IN
10799: IFFALSE 10820
// points := [ 35 , 110 , 70 ] ;
10801: LD_ADDR_VAR 0 9
10805: PUSH
10806: LD_INT 35
10808: PUSH
10809: LD_INT 110
10811: PUSH
10812: LD_INT 70
10814: PUSH
10815: EMPTY
10816: LIST
10817: LIST
10818: LIST
10819: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10820: LD_VAR 0 6
10824: PPUSH
10825: CALL_OW 265
10829: PUSH
10830: LD_INT 25
10832: EQUAL
10833: IFFALSE 10854
// points := [ 80 , 65 , 100 ] ;
10835: LD_ADDR_VAR 0 9
10839: PUSH
10840: LD_INT 80
10842: PUSH
10843: LD_INT 65
10845: PUSH
10846: LD_INT 100
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: LIST
10853: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10854: LD_VAR 0 6
10858: PPUSH
10859: CALL_OW 263
10863: PUSH
10864: LD_INT 1
10866: EQUAL
10867: IFFALSE 10902
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10869: LD_ADDR_VAR 0 10
10873: PUSH
10874: LD_VAR 0 10
10878: PUSH
10879: LD_VAR 0 6
10883: PPUSH
10884: CALL_OW 311
10888: PPUSH
10889: LD_INT 3
10891: PPUSH
10892: CALL_OW 259
10896: PUSH
10897: LD_INT 4
10899: MUL
10900: MUL
10901: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10902: LD_VAR 0 6
10906: PPUSH
10907: CALL_OW 263
10911: PUSH
10912: LD_INT 2
10914: EQUAL
10915: IFFALSE 10966
// begin j := IsControledBy ( i ) ;
10917: LD_ADDR_VAR 0 7
10921: PUSH
10922: LD_VAR 0 6
10926: PPUSH
10927: CALL_OW 312
10931: ST_TO_ADDR
// if j then
10932: LD_VAR 0 7
10936: IFFALSE 10966
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10938: LD_ADDR_VAR 0 10
10942: PUSH
10943: LD_VAR 0 10
10947: PUSH
10948: LD_VAR 0 7
10952: PPUSH
10953: LD_INT 3
10955: PPUSH
10956: CALL_OW 259
10960: PUSH
10961: LD_INT 3
10963: MUL
10964: MUL
10965: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10966: LD_VAR 0 6
10970: PPUSH
10971: CALL_OW 264
10975: PUSH
10976: LD_INT 5
10978: PUSH
10979: LD_INT 6
10981: PUSH
10982: LD_INT 46
10984: PUSH
10985: LD_INT 44
10987: PUSH
10988: LD_INT 47
10990: PUSH
10991: LD_INT 45
10993: PUSH
10994: LD_INT 28
10996: PUSH
10997: LD_INT 7
10999: PUSH
11000: LD_INT 27
11002: PUSH
11003: LD_INT 29
11005: PUSH
11006: EMPTY
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: IN
11018: PUSH
11019: LD_VAR 0 1
11023: PPUSH
11024: LD_INT 52
11026: PPUSH
11027: CALL_OW 321
11031: PUSH
11032: LD_INT 2
11034: EQUAL
11035: AND
11036: IFFALSE 11053
// bpoints := bpoints * 1.2 ;
11038: LD_ADDR_VAR 0 10
11042: PUSH
11043: LD_VAR 0 10
11047: PUSH
11048: LD_REAL  1.20000000000000E+0000
11051: MUL
11052: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
11053: LD_VAR 0 6
11057: PPUSH
11058: CALL_OW 264
11062: PUSH
11063: LD_INT 6
11065: PUSH
11066: LD_INT 46
11068: PUSH
11069: LD_INT 47
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: LIST
11076: IN
11077: IFFALSE 11094
// bpoints := bpoints * 1.2 ;
11079: LD_ADDR_VAR 0 10
11083: PUSH
11084: LD_VAR 0 10
11088: PUSH
11089: LD_REAL  1.20000000000000E+0000
11092: MUL
11093: ST_TO_ADDR
// end ; unit_building :
11094: GO 11108
11096: LD_INT 3
11098: DOUBLE
11099: EQUAL
11100: IFTRUE 11104
11102: GO 11107
11104: POP
// ; end ;
11105: GO 11108
11107: POP
// for j = 1 to 3 do
11108: LD_ADDR_VAR 0 7
11112: PUSH
11113: DOUBLE
11114: LD_INT 1
11116: DEC
11117: ST_TO_ADDR
11118: LD_INT 3
11120: PUSH
11121: FOR_TO
11122: IFFALSE 11175
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
11124: LD_ADDR_VAR 0 5
11128: PUSH
11129: LD_VAR 0 5
11133: PPUSH
11134: LD_VAR 0 7
11138: PPUSH
11139: LD_VAR 0 5
11143: PUSH
11144: LD_VAR 0 7
11148: ARRAY
11149: PUSH
11150: LD_VAR 0 9
11154: PUSH
11155: LD_VAR 0 7
11159: ARRAY
11160: PUSH
11161: LD_VAR 0 10
11165: MUL
11166: PLUS
11167: PPUSH
11168: CALL_OW 1
11172: ST_TO_ADDR
11173: GO 11121
11175: POP
11176: POP
// end ;
11177: GO 9656
11179: POP
11180: POP
// result := Replace ( result , 4 , tmp ) ;
11181: LD_ADDR_VAR 0 5
11185: PUSH
11186: LD_VAR 0 5
11190: PPUSH
11191: LD_INT 4
11193: PPUSH
11194: LD_VAR 0 8
11198: PPUSH
11199: CALL_OW 1
11203: ST_TO_ADDR
// end ;
11204: LD_VAR 0 5
11208: RET
// export function DangerAtRange ( unit , range ) ; begin
11209: LD_INT 0
11211: PPUSH
// if not unit then
11212: LD_VAR 0 1
11216: NOT
11217: IFFALSE 11221
// exit ;
11219: GO 11266
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11221: LD_ADDR_VAR 0 3
11225: PUSH
11226: LD_VAR 0 1
11230: PPUSH
11231: CALL_OW 255
11235: PPUSH
11236: LD_VAR 0 1
11240: PPUSH
11241: CALL_OW 250
11245: PPUSH
11246: LD_VAR 0 1
11250: PPUSH
11251: CALL_OW 251
11255: PPUSH
11256: LD_VAR 0 2
11260: PPUSH
11261: CALL 9508 0 4
11265: ST_TO_ADDR
// end ;
11266: LD_VAR 0 3
11270: RET
// export function DangerInArea ( side , area ) ; begin
11271: LD_INT 0
11273: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11274: LD_ADDR_VAR 0 3
11278: PUSH
11279: LD_VAR 0 2
11283: PPUSH
11284: LD_INT 81
11286: PUSH
11287: LD_VAR 0 1
11291: PUSH
11292: EMPTY
11293: LIST
11294: LIST
11295: PPUSH
11296: CALL_OW 70
11300: ST_TO_ADDR
// end ;
11301: LD_VAR 0 3
11305: RET
// export function IsExtension ( b ) ; begin
11306: LD_INT 0
11308: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11309: LD_ADDR_VAR 0 2
11313: PUSH
11314: LD_VAR 0 1
11318: PUSH
11319: LD_INT 23
11321: PUSH
11322: LD_INT 20
11324: PUSH
11325: LD_INT 22
11327: PUSH
11328: LD_INT 17
11330: PUSH
11331: LD_INT 24
11333: PUSH
11334: LD_INT 21
11336: PUSH
11337: LD_INT 19
11339: PUSH
11340: LD_INT 16
11342: PUSH
11343: LD_INT 25
11345: PUSH
11346: LD_INT 18
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: LIST
11360: IN
11361: ST_TO_ADDR
// end ;
11362: LD_VAR 0 2
11366: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11367: LD_INT 0
11369: PPUSH
11370: PPUSH
11371: PPUSH
// result := [ ] ;
11372: LD_ADDR_VAR 0 4
11376: PUSH
11377: EMPTY
11378: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11379: LD_ADDR_VAR 0 5
11383: PUSH
11384: LD_VAR 0 2
11388: PPUSH
11389: LD_INT 21
11391: PUSH
11392: LD_INT 3
11394: PUSH
11395: EMPTY
11396: LIST
11397: LIST
11398: PPUSH
11399: CALL_OW 70
11403: ST_TO_ADDR
// if not tmp then
11404: LD_VAR 0 5
11408: NOT
11409: IFFALSE 11413
// exit ;
11411: GO 11477
// if checkLink then
11413: LD_VAR 0 3
11417: IFFALSE 11467
// begin for i in tmp do
11419: LD_ADDR_VAR 0 6
11423: PUSH
11424: LD_VAR 0 5
11428: PUSH
11429: FOR_IN
11430: IFFALSE 11465
// if GetBase ( i ) <> base then
11432: LD_VAR 0 6
11436: PPUSH
11437: CALL_OW 274
11441: PUSH
11442: LD_VAR 0 1
11446: NONEQUAL
11447: IFFALSE 11463
// ComLinkToBase ( base , i ) ;
11449: LD_VAR 0 1
11453: PPUSH
11454: LD_VAR 0 6
11458: PPUSH
11459: CALL_OW 169
11463: GO 11429
11465: POP
11466: POP
// end ; result := tmp ;
11467: LD_ADDR_VAR 0 4
11471: PUSH
11472: LD_VAR 0 5
11476: ST_TO_ADDR
// end ;
11477: LD_VAR 0 4
11481: RET
// export function ComComplete ( units , b ) ; var i ; begin
11482: LD_INT 0
11484: PPUSH
11485: PPUSH
// if not units then
11486: LD_VAR 0 1
11490: NOT
11491: IFFALSE 11495
// exit ;
11493: GO 11585
// for i in units do
11495: LD_ADDR_VAR 0 4
11499: PUSH
11500: LD_VAR 0 1
11504: PUSH
11505: FOR_IN
11506: IFFALSE 11583
// if BuildingStatus ( b ) = bs_build then
11508: LD_VAR 0 2
11512: PPUSH
11513: CALL_OW 461
11517: PUSH
11518: LD_INT 1
11520: EQUAL
11521: IFFALSE 11581
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11523: LD_VAR 0 4
11527: PPUSH
11528: LD_STRING h
11530: PUSH
11531: LD_VAR 0 2
11535: PPUSH
11536: CALL_OW 250
11540: PUSH
11541: LD_VAR 0 2
11545: PPUSH
11546: CALL_OW 251
11550: PUSH
11551: LD_VAR 0 2
11555: PUSH
11556: LD_INT 0
11558: PUSH
11559: LD_INT 0
11561: PUSH
11562: LD_INT 0
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: PUSH
11574: EMPTY
11575: LIST
11576: PPUSH
11577: CALL_OW 446
11581: GO 11505
11583: POP
11584: POP
// end ;
11585: LD_VAR 0 3
11589: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11590: LD_INT 0
11592: PPUSH
11593: PPUSH
11594: PPUSH
11595: PPUSH
11596: PPUSH
11597: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11598: LD_VAR 0 1
11602: NOT
11603: PUSH
11604: LD_VAR 0 1
11608: PPUSH
11609: CALL_OW 263
11613: PUSH
11614: LD_INT 2
11616: NONEQUAL
11617: OR
11618: IFFALSE 11622
// exit ;
11620: GO 11938
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11622: LD_ADDR_VAR 0 6
11626: PUSH
11627: LD_INT 22
11629: PUSH
11630: LD_VAR 0 1
11634: PPUSH
11635: CALL_OW 255
11639: PUSH
11640: EMPTY
11641: LIST
11642: LIST
11643: PUSH
11644: LD_INT 2
11646: PUSH
11647: LD_INT 30
11649: PUSH
11650: LD_INT 36
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: PUSH
11657: LD_INT 34
11659: PUSH
11660: LD_INT 31
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: LIST
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: PPUSH
11676: CALL_OW 69
11680: ST_TO_ADDR
// if not tmp then
11681: LD_VAR 0 6
11685: NOT
11686: IFFALSE 11690
// exit ;
11688: GO 11938
// result := [ ] ;
11690: LD_ADDR_VAR 0 2
11694: PUSH
11695: EMPTY
11696: ST_TO_ADDR
// for i in tmp do
11697: LD_ADDR_VAR 0 3
11701: PUSH
11702: LD_VAR 0 6
11706: PUSH
11707: FOR_IN
11708: IFFALSE 11779
// begin t := UnitsInside ( i ) ;
11710: LD_ADDR_VAR 0 4
11714: PUSH
11715: LD_VAR 0 3
11719: PPUSH
11720: CALL_OW 313
11724: ST_TO_ADDR
// if t then
11725: LD_VAR 0 4
11729: IFFALSE 11777
// for j in t do
11731: LD_ADDR_VAR 0 7
11735: PUSH
11736: LD_VAR 0 4
11740: PUSH
11741: FOR_IN
11742: IFFALSE 11775
// result := Replace ( result , result + 1 , j ) ;
11744: LD_ADDR_VAR 0 2
11748: PUSH
11749: LD_VAR 0 2
11753: PPUSH
11754: LD_VAR 0 2
11758: PUSH
11759: LD_INT 1
11761: PLUS
11762: PPUSH
11763: LD_VAR 0 7
11767: PPUSH
11768: CALL_OW 1
11772: ST_TO_ADDR
11773: GO 11741
11775: POP
11776: POP
// end ;
11777: GO 11707
11779: POP
11780: POP
// if not result then
11781: LD_VAR 0 2
11785: NOT
11786: IFFALSE 11790
// exit ;
11788: GO 11938
// mech := result [ 1 ] ;
11790: LD_ADDR_VAR 0 5
11794: PUSH
11795: LD_VAR 0 2
11799: PUSH
11800: LD_INT 1
11802: ARRAY
11803: ST_TO_ADDR
// if result > 1 then
11804: LD_VAR 0 2
11808: PUSH
11809: LD_INT 1
11811: GREATER
11812: IFFALSE 11924
// begin for i = 2 to result do
11814: LD_ADDR_VAR 0 3
11818: PUSH
11819: DOUBLE
11820: LD_INT 2
11822: DEC
11823: ST_TO_ADDR
11824: LD_VAR 0 2
11828: PUSH
11829: FOR_TO
11830: IFFALSE 11922
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11832: LD_ADDR_VAR 0 4
11836: PUSH
11837: LD_VAR 0 2
11841: PUSH
11842: LD_VAR 0 3
11846: ARRAY
11847: PPUSH
11848: LD_INT 3
11850: PPUSH
11851: CALL_OW 259
11855: PUSH
11856: LD_VAR 0 2
11860: PUSH
11861: LD_VAR 0 3
11865: ARRAY
11866: PPUSH
11867: CALL_OW 432
11871: MINUS
11872: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11873: LD_VAR 0 4
11877: PUSH
11878: LD_VAR 0 5
11882: PPUSH
11883: LD_INT 3
11885: PPUSH
11886: CALL_OW 259
11890: PUSH
11891: LD_VAR 0 5
11895: PPUSH
11896: CALL_OW 432
11900: MINUS
11901: GREATEREQUAL
11902: IFFALSE 11920
// mech := result [ i ] ;
11904: LD_ADDR_VAR 0 5
11908: PUSH
11909: LD_VAR 0 2
11913: PUSH
11914: LD_VAR 0 3
11918: ARRAY
11919: ST_TO_ADDR
// end ;
11920: GO 11829
11922: POP
11923: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11924: LD_VAR 0 1
11928: PPUSH
11929: LD_VAR 0 5
11933: PPUSH
11934: CALL_OW 135
// end ;
11938: LD_VAR 0 2
11942: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11943: LD_INT 0
11945: PPUSH
11946: PPUSH
11947: PPUSH
11948: PPUSH
11949: PPUSH
11950: PPUSH
11951: PPUSH
11952: PPUSH
11953: PPUSH
11954: PPUSH
11955: PPUSH
11956: PPUSH
11957: PPUSH
// result := [ ] ;
11958: LD_ADDR_VAR 0 7
11962: PUSH
11963: EMPTY
11964: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11965: LD_VAR 0 1
11969: PPUSH
11970: CALL_OW 266
11974: PUSH
11975: LD_INT 0
11977: PUSH
11978: LD_INT 1
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: IN
11985: NOT
11986: IFFALSE 11990
// exit ;
11988: GO 13624
// if name then
11990: LD_VAR 0 3
11994: IFFALSE 12010
// SetBName ( base_dep , name ) ;
11996: LD_VAR 0 1
12000: PPUSH
12001: LD_VAR 0 3
12005: PPUSH
12006: CALL_OW 500
// base := GetBase ( base_dep ) ;
12010: LD_ADDR_VAR 0 15
12014: PUSH
12015: LD_VAR 0 1
12019: PPUSH
12020: CALL_OW 274
12024: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12025: LD_ADDR_VAR 0 16
12029: PUSH
12030: LD_VAR 0 1
12034: PPUSH
12035: CALL_OW 255
12039: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
12040: LD_ADDR_VAR 0 17
12044: PUSH
12045: LD_VAR 0 1
12049: PPUSH
12050: CALL_OW 248
12054: ST_TO_ADDR
// if sources then
12055: LD_VAR 0 5
12059: IFFALSE 12106
// for i = 1 to 3 do
12061: LD_ADDR_VAR 0 8
12065: PUSH
12066: DOUBLE
12067: LD_INT 1
12069: DEC
12070: ST_TO_ADDR
12071: LD_INT 3
12073: PUSH
12074: FOR_TO
12075: IFFALSE 12104
// AddResourceType ( base , i , sources [ i ] ) ;
12077: LD_VAR 0 15
12081: PPUSH
12082: LD_VAR 0 8
12086: PPUSH
12087: LD_VAR 0 5
12091: PUSH
12092: LD_VAR 0 8
12096: ARRAY
12097: PPUSH
12098: CALL_OW 276
12102: GO 12074
12104: POP
12105: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
12106: LD_ADDR_VAR 0 18
12110: PUSH
12111: LD_VAR 0 15
12115: PPUSH
12116: LD_VAR 0 2
12120: PPUSH
12121: LD_INT 1
12123: PPUSH
12124: CALL 11367 0 3
12128: ST_TO_ADDR
// InitHc ;
12129: CALL_OW 19
// InitUc ;
12133: CALL_OW 18
// uc_side := side ;
12137: LD_ADDR_OWVAR 20
12141: PUSH
12142: LD_VAR 0 16
12146: ST_TO_ADDR
// uc_nation := nation ;
12147: LD_ADDR_OWVAR 21
12151: PUSH
12152: LD_VAR 0 17
12156: ST_TO_ADDR
// if buildings then
12157: LD_VAR 0 18
12161: IFFALSE 13483
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12163: LD_ADDR_VAR 0 19
12167: PUSH
12168: LD_VAR 0 18
12172: PPUSH
12173: LD_INT 2
12175: PUSH
12176: LD_INT 30
12178: PUSH
12179: LD_INT 29
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: PUSH
12186: LD_INT 30
12188: PUSH
12189: LD_INT 30
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: PUSH
12196: EMPTY
12197: LIST
12198: LIST
12199: LIST
12200: PPUSH
12201: CALL_OW 72
12205: ST_TO_ADDR
// if tmp then
12206: LD_VAR 0 19
12210: IFFALSE 12258
// for i in tmp do
12212: LD_ADDR_VAR 0 8
12216: PUSH
12217: LD_VAR 0 19
12221: PUSH
12222: FOR_IN
12223: IFFALSE 12256
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12225: LD_VAR 0 8
12229: PPUSH
12230: CALL_OW 250
12234: PPUSH
12235: LD_VAR 0 8
12239: PPUSH
12240: CALL_OW 251
12244: PPUSH
12245: LD_VAR 0 16
12249: PPUSH
12250: CALL_OW 441
12254: GO 12222
12256: POP
12257: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12258: LD_VAR 0 18
12262: PPUSH
12263: LD_INT 2
12265: PUSH
12266: LD_INT 30
12268: PUSH
12269: LD_INT 32
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: PUSH
12276: LD_INT 30
12278: PUSH
12279: LD_INT 33
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: LIST
12290: PPUSH
12291: CALL_OW 72
12295: IFFALSE 12383
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12297: LD_ADDR_VAR 0 8
12301: PUSH
12302: LD_VAR 0 18
12306: PPUSH
12307: LD_INT 2
12309: PUSH
12310: LD_INT 30
12312: PUSH
12313: LD_INT 32
12315: PUSH
12316: EMPTY
12317: LIST
12318: LIST
12319: PUSH
12320: LD_INT 30
12322: PUSH
12323: LD_INT 33
12325: PUSH
12326: EMPTY
12327: LIST
12328: LIST
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: LIST
12334: PPUSH
12335: CALL_OW 72
12339: PUSH
12340: FOR_IN
12341: IFFALSE 12381
// begin if not GetBWeapon ( i ) then
12343: LD_VAR 0 8
12347: PPUSH
12348: CALL_OW 269
12352: NOT
12353: IFFALSE 12379
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12355: LD_VAR 0 8
12359: PPUSH
12360: LD_VAR 0 8
12364: PPUSH
12365: LD_VAR 0 2
12369: PPUSH
12370: CALL 13629 0 2
12374: PPUSH
12375: CALL_OW 431
// end ;
12379: GO 12340
12381: POP
12382: POP
// end ; for i = 1 to personel do
12383: LD_ADDR_VAR 0 8
12387: PUSH
12388: DOUBLE
12389: LD_INT 1
12391: DEC
12392: ST_TO_ADDR
12393: LD_VAR 0 6
12397: PUSH
12398: FOR_TO
12399: IFFALSE 13463
// begin if i > 4 then
12401: LD_VAR 0 8
12405: PUSH
12406: LD_INT 4
12408: GREATER
12409: IFFALSE 12413
// break ;
12411: GO 13463
// case i of 1 :
12413: LD_VAR 0 8
12417: PUSH
12418: LD_INT 1
12420: DOUBLE
12421: EQUAL
12422: IFTRUE 12426
12424: GO 12506
12426: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12427: LD_ADDR_VAR 0 12
12431: PUSH
12432: LD_VAR 0 18
12436: PPUSH
12437: LD_INT 22
12439: PUSH
12440: LD_VAR 0 16
12444: PUSH
12445: EMPTY
12446: LIST
12447: LIST
12448: PUSH
12449: LD_INT 58
12451: PUSH
12452: EMPTY
12453: LIST
12454: PUSH
12455: LD_INT 2
12457: PUSH
12458: LD_INT 30
12460: PUSH
12461: LD_INT 32
12463: PUSH
12464: EMPTY
12465: LIST
12466: LIST
12467: PUSH
12468: LD_INT 30
12470: PUSH
12471: LD_INT 4
12473: PUSH
12474: EMPTY
12475: LIST
12476: LIST
12477: PUSH
12478: LD_INT 30
12480: PUSH
12481: LD_INT 5
12483: PUSH
12484: EMPTY
12485: LIST
12486: LIST
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: LIST
12498: PPUSH
12499: CALL_OW 72
12503: ST_TO_ADDR
12504: GO 12728
12506: LD_INT 2
12508: DOUBLE
12509: EQUAL
12510: IFTRUE 12514
12512: GO 12576
12514: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12515: LD_ADDR_VAR 0 12
12519: PUSH
12520: LD_VAR 0 18
12524: PPUSH
12525: LD_INT 22
12527: PUSH
12528: LD_VAR 0 16
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: PUSH
12537: LD_INT 2
12539: PUSH
12540: LD_INT 30
12542: PUSH
12543: LD_INT 0
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: PUSH
12550: LD_INT 30
12552: PUSH
12553: LD_INT 1
12555: PUSH
12556: EMPTY
12557: LIST
12558: LIST
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: LIST
12564: PUSH
12565: EMPTY
12566: LIST
12567: LIST
12568: PPUSH
12569: CALL_OW 72
12573: ST_TO_ADDR
12574: GO 12728
12576: LD_INT 3
12578: DOUBLE
12579: EQUAL
12580: IFTRUE 12584
12582: GO 12646
12584: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12585: LD_ADDR_VAR 0 12
12589: PUSH
12590: LD_VAR 0 18
12594: PPUSH
12595: LD_INT 22
12597: PUSH
12598: LD_VAR 0 16
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: PUSH
12607: LD_INT 2
12609: PUSH
12610: LD_INT 30
12612: PUSH
12613: LD_INT 2
12615: PUSH
12616: EMPTY
12617: LIST
12618: LIST
12619: PUSH
12620: LD_INT 30
12622: PUSH
12623: LD_INT 3
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: PUSH
12630: EMPTY
12631: LIST
12632: LIST
12633: LIST
12634: PUSH
12635: EMPTY
12636: LIST
12637: LIST
12638: PPUSH
12639: CALL_OW 72
12643: ST_TO_ADDR
12644: GO 12728
12646: LD_INT 4
12648: DOUBLE
12649: EQUAL
12650: IFTRUE 12654
12652: GO 12727
12654: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12655: LD_ADDR_VAR 0 12
12659: PUSH
12660: LD_VAR 0 18
12664: PPUSH
12665: LD_INT 22
12667: PUSH
12668: LD_VAR 0 16
12672: PUSH
12673: EMPTY
12674: LIST
12675: LIST
12676: PUSH
12677: LD_INT 2
12679: PUSH
12680: LD_INT 30
12682: PUSH
12683: LD_INT 6
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: PUSH
12690: LD_INT 30
12692: PUSH
12693: LD_INT 7
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: PUSH
12700: LD_INT 30
12702: PUSH
12703: LD_INT 8
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: PUSH
12716: EMPTY
12717: LIST
12718: LIST
12719: PPUSH
12720: CALL_OW 72
12724: ST_TO_ADDR
12725: GO 12728
12727: POP
// if i = 1 then
12728: LD_VAR 0 8
12732: PUSH
12733: LD_INT 1
12735: EQUAL
12736: IFFALSE 12847
// begin tmp := [ ] ;
12738: LD_ADDR_VAR 0 19
12742: PUSH
12743: EMPTY
12744: ST_TO_ADDR
// for j in f do
12745: LD_ADDR_VAR 0 9
12749: PUSH
12750: LD_VAR 0 12
12754: PUSH
12755: FOR_IN
12756: IFFALSE 12829
// if GetBType ( j ) = b_bunker then
12758: LD_VAR 0 9
12762: PPUSH
12763: CALL_OW 266
12767: PUSH
12768: LD_INT 32
12770: EQUAL
12771: IFFALSE 12798
// tmp := Insert ( tmp , 1 , j ) else
12773: LD_ADDR_VAR 0 19
12777: PUSH
12778: LD_VAR 0 19
12782: PPUSH
12783: LD_INT 1
12785: PPUSH
12786: LD_VAR 0 9
12790: PPUSH
12791: CALL_OW 2
12795: ST_TO_ADDR
12796: GO 12827
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12798: LD_ADDR_VAR 0 19
12802: PUSH
12803: LD_VAR 0 19
12807: PPUSH
12808: LD_VAR 0 19
12812: PUSH
12813: LD_INT 1
12815: PLUS
12816: PPUSH
12817: LD_VAR 0 9
12821: PPUSH
12822: CALL_OW 2
12826: ST_TO_ADDR
12827: GO 12755
12829: POP
12830: POP
// if tmp then
12831: LD_VAR 0 19
12835: IFFALSE 12847
// f := tmp ;
12837: LD_ADDR_VAR 0 12
12841: PUSH
12842: LD_VAR 0 19
12846: ST_TO_ADDR
// end ; x := personel [ i ] ;
12847: LD_ADDR_VAR 0 13
12851: PUSH
12852: LD_VAR 0 6
12856: PUSH
12857: LD_VAR 0 8
12861: ARRAY
12862: ST_TO_ADDR
// if x = - 1 then
12863: LD_VAR 0 13
12867: PUSH
12868: LD_INT 1
12870: NEG
12871: EQUAL
12872: IFFALSE 13081
// begin for j in f do
12874: LD_ADDR_VAR 0 9
12878: PUSH
12879: LD_VAR 0 12
12883: PUSH
12884: FOR_IN
12885: IFFALSE 13077
// repeat InitHc ;
12887: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12891: LD_VAR 0 9
12895: PPUSH
12896: CALL_OW 266
12900: PUSH
12901: LD_INT 5
12903: EQUAL
12904: IFFALSE 12974
// begin if UnitsInside ( j ) < 3 then
12906: LD_VAR 0 9
12910: PPUSH
12911: CALL_OW 313
12915: PUSH
12916: LD_INT 3
12918: LESS
12919: IFFALSE 12955
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12921: LD_INT 0
12923: PPUSH
12924: LD_INT 5
12926: PUSH
12927: LD_INT 8
12929: PUSH
12930: LD_INT 9
12932: PUSH
12933: EMPTY
12934: LIST
12935: LIST
12936: LIST
12937: PUSH
12938: LD_VAR 0 17
12942: ARRAY
12943: PPUSH
12944: LD_VAR 0 4
12948: PPUSH
12949: CALL_OW 380
12953: GO 12972
// PrepareHuman ( false , i , skill ) ;
12955: LD_INT 0
12957: PPUSH
12958: LD_VAR 0 8
12962: PPUSH
12963: LD_VAR 0 4
12967: PPUSH
12968: CALL_OW 380
// end else
12972: GO 12991
// PrepareHuman ( false , i , skill ) ;
12974: LD_INT 0
12976: PPUSH
12977: LD_VAR 0 8
12981: PPUSH
12982: LD_VAR 0 4
12986: PPUSH
12987: CALL_OW 380
// un := CreateHuman ;
12991: LD_ADDR_VAR 0 14
12995: PUSH
12996: CALL_OW 44
13000: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13001: LD_ADDR_VAR 0 7
13005: PUSH
13006: LD_VAR 0 7
13010: PPUSH
13011: LD_INT 1
13013: PPUSH
13014: LD_VAR 0 14
13018: PPUSH
13019: CALL_OW 2
13023: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13024: LD_VAR 0 14
13028: PPUSH
13029: LD_VAR 0 9
13033: PPUSH
13034: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13038: LD_VAR 0 9
13042: PPUSH
13043: CALL_OW 313
13047: PUSH
13048: LD_INT 6
13050: EQUAL
13051: PUSH
13052: LD_VAR 0 9
13056: PPUSH
13057: CALL_OW 266
13061: PUSH
13062: LD_INT 32
13064: PUSH
13065: LD_INT 31
13067: PUSH
13068: EMPTY
13069: LIST
13070: LIST
13071: IN
13072: OR
13073: IFFALSE 12887
13075: GO 12884
13077: POP
13078: POP
// end else
13079: GO 13461
// for j = 1 to x do
13081: LD_ADDR_VAR 0 9
13085: PUSH
13086: DOUBLE
13087: LD_INT 1
13089: DEC
13090: ST_TO_ADDR
13091: LD_VAR 0 13
13095: PUSH
13096: FOR_TO
13097: IFFALSE 13459
// begin InitHc ;
13099: CALL_OW 19
// if not f then
13103: LD_VAR 0 12
13107: NOT
13108: IFFALSE 13197
// begin PrepareHuman ( false , i , skill ) ;
13110: LD_INT 0
13112: PPUSH
13113: LD_VAR 0 8
13117: PPUSH
13118: LD_VAR 0 4
13122: PPUSH
13123: CALL_OW 380
// un := CreateHuman ;
13127: LD_ADDR_VAR 0 14
13131: PUSH
13132: CALL_OW 44
13136: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13137: LD_ADDR_VAR 0 7
13141: PUSH
13142: LD_VAR 0 7
13146: PPUSH
13147: LD_INT 1
13149: PPUSH
13150: LD_VAR 0 14
13154: PPUSH
13155: CALL_OW 2
13159: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13160: LD_VAR 0 14
13164: PPUSH
13165: LD_VAR 0 1
13169: PPUSH
13170: CALL_OW 250
13174: PPUSH
13175: LD_VAR 0 1
13179: PPUSH
13180: CALL_OW 251
13184: PPUSH
13185: LD_INT 10
13187: PPUSH
13188: LD_INT 0
13190: PPUSH
13191: CALL_OW 50
// continue ;
13195: GO 13096
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13197: LD_VAR 0 12
13201: PUSH
13202: LD_INT 1
13204: ARRAY
13205: PPUSH
13206: CALL_OW 313
13210: PUSH
13211: LD_VAR 0 12
13215: PUSH
13216: LD_INT 1
13218: ARRAY
13219: PPUSH
13220: CALL_OW 266
13224: PUSH
13225: LD_INT 32
13227: PUSH
13228: LD_INT 31
13230: PUSH
13231: EMPTY
13232: LIST
13233: LIST
13234: IN
13235: AND
13236: PUSH
13237: LD_VAR 0 12
13241: PUSH
13242: LD_INT 1
13244: ARRAY
13245: PPUSH
13246: CALL_OW 313
13250: PUSH
13251: LD_INT 6
13253: EQUAL
13254: OR
13255: IFFALSE 13275
// f := Delete ( f , 1 ) ;
13257: LD_ADDR_VAR 0 12
13261: PUSH
13262: LD_VAR 0 12
13266: PPUSH
13267: LD_INT 1
13269: PPUSH
13270: CALL_OW 3
13274: ST_TO_ADDR
// if not f then
13275: LD_VAR 0 12
13279: NOT
13280: IFFALSE 13298
// begin x := x + 2 ;
13282: LD_ADDR_VAR 0 13
13286: PUSH
13287: LD_VAR 0 13
13291: PUSH
13292: LD_INT 2
13294: PLUS
13295: ST_TO_ADDR
// continue ;
13296: GO 13096
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13298: LD_VAR 0 12
13302: PUSH
13303: LD_INT 1
13305: ARRAY
13306: PPUSH
13307: CALL_OW 266
13311: PUSH
13312: LD_INT 5
13314: EQUAL
13315: IFFALSE 13389
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13317: LD_VAR 0 12
13321: PUSH
13322: LD_INT 1
13324: ARRAY
13325: PPUSH
13326: CALL_OW 313
13330: PUSH
13331: LD_INT 3
13333: LESS
13334: IFFALSE 13370
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13336: LD_INT 0
13338: PPUSH
13339: LD_INT 5
13341: PUSH
13342: LD_INT 8
13344: PUSH
13345: LD_INT 9
13347: PUSH
13348: EMPTY
13349: LIST
13350: LIST
13351: LIST
13352: PUSH
13353: LD_VAR 0 17
13357: ARRAY
13358: PPUSH
13359: LD_VAR 0 4
13363: PPUSH
13364: CALL_OW 380
13368: GO 13387
// PrepareHuman ( false , i , skill ) ;
13370: LD_INT 0
13372: PPUSH
13373: LD_VAR 0 8
13377: PPUSH
13378: LD_VAR 0 4
13382: PPUSH
13383: CALL_OW 380
// end else
13387: GO 13406
// PrepareHuman ( false , i , skill ) ;
13389: LD_INT 0
13391: PPUSH
13392: LD_VAR 0 8
13396: PPUSH
13397: LD_VAR 0 4
13401: PPUSH
13402: CALL_OW 380
// un := CreateHuman ;
13406: LD_ADDR_VAR 0 14
13410: PUSH
13411: CALL_OW 44
13415: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13416: LD_ADDR_VAR 0 7
13420: PUSH
13421: LD_VAR 0 7
13425: PPUSH
13426: LD_INT 1
13428: PPUSH
13429: LD_VAR 0 14
13433: PPUSH
13434: CALL_OW 2
13438: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13439: LD_VAR 0 14
13443: PPUSH
13444: LD_VAR 0 12
13448: PUSH
13449: LD_INT 1
13451: ARRAY
13452: PPUSH
13453: CALL_OW 52
// end ;
13457: GO 13096
13459: POP
13460: POP
// end ;
13461: GO 12398
13463: POP
13464: POP
// result := result ^ buildings ;
13465: LD_ADDR_VAR 0 7
13469: PUSH
13470: LD_VAR 0 7
13474: PUSH
13475: LD_VAR 0 18
13479: ADD
13480: ST_TO_ADDR
// end else
13481: GO 13624
// begin for i = 1 to personel do
13483: LD_ADDR_VAR 0 8
13487: PUSH
13488: DOUBLE
13489: LD_INT 1
13491: DEC
13492: ST_TO_ADDR
13493: LD_VAR 0 6
13497: PUSH
13498: FOR_TO
13499: IFFALSE 13622
// begin if i > 4 then
13501: LD_VAR 0 8
13505: PUSH
13506: LD_INT 4
13508: GREATER
13509: IFFALSE 13513
// break ;
13511: GO 13622
// x := personel [ i ] ;
13513: LD_ADDR_VAR 0 13
13517: PUSH
13518: LD_VAR 0 6
13522: PUSH
13523: LD_VAR 0 8
13527: ARRAY
13528: ST_TO_ADDR
// if x = - 1 then
13529: LD_VAR 0 13
13533: PUSH
13534: LD_INT 1
13536: NEG
13537: EQUAL
13538: IFFALSE 13542
// continue ;
13540: GO 13498
// PrepareHuman ( false , i , skill ) ;
13542: LD_INT 0
13544: PPUSH
13545: LD_VAR 0 8
13549: PPUSH
13550: LD_VAR 0 4
13554: PPUSH
13555: CALL_OW 380
// un := CreateHuman ;
13559: LD_ADDR_VAR 0 14
13563: PUSH
13564: CALL_OW 44
13568: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13569: LD_VAR 0 14
13573: PPUSH
13574: LD_VAR 0 1
13578: PPUSH
13579: CALL_OW 250
13583: PPUSH
13584: LD_VAR 0 1
13588: PPUSH
13589: CALL_OW 251
13593: PPUSH
13594: LD_INT 10
13596: PPUSH
13597: LD_INT 0
13599: PPUSH
13600: CALL_OW 50
// result := result ^ un ;
13604: LD_ADDR_VAR 0 7
13608: PUSH
13609: LD_VAR 0 7
13613: PUSH
13614: LD_VAR 0 14
13618: ADD
13619: ST_TO_ADDR
// end ;
13620: GO 13498
13622: POP
13623: POP
// end ; end ;
13624: LD_VAR 0 7
13628: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13629: LD_INT 0
13631: PPUSH
13632: PPUSH
13633: PPUSH
13634: PPUSH
13635: PPUSH
13636: PPUSH
13637: PPUSH
13638: PPUSH
13639: PPUSH
13640: PPUSH
13641: PPUSH
13642: PPUSH
13643: PPUSH
13644: PPUSH
13645: PPUSH
13646: PPUSH
// result := false ;
13647: LD_ADDR_VAR 0 3
13651: PUSH
13652: LD_INT 0
13654: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13655: LD_VAR 0 1
13659: NOT
13660: PUSH
13661: LD_VAR 0 1
13665: PPUSH
13666: CALL_OW 266
13670: PUSH
13671: LD_INT 32
13673: PUSH
13674: LD_INT 33
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: IN
13681: NOT
13682: OR
13683: IFFALSE 13687
// exit ;
13685: GO 14796
// nat := GetNation ( tower ) ;
13687: LD_ADDR_VAR 0 12
13691: PUSH
13692: LD_VAR 0 1
13696: PPUSH
13697: CALL_OW 248
13701: ST_TO_ADDR
// side := GetSide ( tower ) ;
13702: LD_ADDR_VAR 0 16
13706: PUSH
13707: LD_VAR 0 1
13711: PPUSH
13712: CALL_OW 255
13716: ST_TO_ADDR
// x := GetX ( tower ) ;
13717: LD_ADDR_VAR 0 10
13721: PUSH
13722: LD_VAR 0 1
13726: PPUSH
13727: CALL_OW 250
13731: ST_TO_ADDR
// y := GetY ( tower ) ;
13732: LD_ADDR_VAR 0 11
13736: PUSH
13737: LD_VAR 0 1
13741: PPUSH
13742: CALL_OW 251
13746: ST_TO_ADDR
// if not x or not y then
13747: LD_VAR 0 10
13751: NOT
13752: PUSH
13753: LD_VAR 0 11
13757: NOT
13758: OR
13759: IFFALSE 13763
// exit ;
13761: GO 14796
// weapon := 0 ;
13763: LD_ADDR_VAR 0 18
13767: PUSH
13768: LD_INT 0
13770: ST_TO_ADDR
// fac_list := [ ] ;
13771: LD_ADDR_VAR 0 17
13775: PUSH
13776: EMPTY
13777: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13778: LD_ADDR_VAR 0 6
13782: PUSH
13783: LD_VAR 0 1
13787: PPUSH
13788: CALL_OW 274
13792: PPUSH
13793: LD_VAR 0 2
13797: PPUSH
13798: LD_INT 0
13800: PPUSH
13801: CALL 11367 0 3
13805: PPUSH
13806: LD_INT 30
13808: PUSH
13809: LD_INT 3
13811: PUSH
13812: EMPTY
13813: LIST
13814: LIST
13815: PPUSH
13816: CALL_OW 72
13820: ST_TO_ADDR
// if not factories then
13821: LD_VAR 0 6
13825: NOT
13826: IFFALSE 13830
// exit ;
13828: GO 14796
// for i in factories do
13830: LD_ADDR_VAR 0 8
13834: PUSH
13835: LD_VAR 0 6
13839: PUSH
13840: FOR_IN
13841: IFFALSE 13866
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13843: LD_ADDR_VAR 0 17
13847: PUSH
13848: LD_VAR 0 17
13852: PUSH
13853: LD_VAR 0 8
13857: PPUSH
13858: CALL_OW 478
13862: UNION
13863: ST_TO_ADDR
13864: GO 13840
13866: POP
13867: POP
// if not fac_list then
13868: LD_VAR 0 17
13872: NOT
13873: IFFALSE 13877
// exit ;
13875: GO 14796
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13877: LD_ADDR_VAR 0 5
13881: PUSH
13882: LD_INT 4
13884: PUSH
13885: LD_INT 5
13887: PUSH
13888: LD_INT 9
13890: PUSH
13891: LD_INT 10
13893: PUSH
13894: LD_INT 6
13896: PUSH
13897: LD_INT 7
13899: PUSH
13900: LD_INT 11
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: PUSH
13912: LD_INT 27
13914: PUSH
13915: LD_INT 28
13917: PUSH
13918: LD_INT 26
13920: PUSH
13921: LD_INT 30
13923: PUSH
13924: EMPTY
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: PUSH
13930: LD_INT 43
13932: PUSH
13933: LD_INT 44
13935: PUSH
13936: LD_INT 46
13938: PUSH
13939: LD_INT 45
13941: PUSH
13942: LD_INT 47
13944: PUSH
13945: LD_INT 49
13947: PUSH
13948: EMPTY
13949: LIST
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: PUSH
13956: EMPTY
13957: LIST
13958: LIST
13959: LIST
13960: PUSH
13961: LD_VAR 0 12
13965: ARRAY
13966: ST_TO_ADDR
// list := list isect fac_list ;
13967: LD_ADDR_VAR 0 5
13971: PUSH
13972: LD_VAR 0 5
13976: PUSH
13977: LD_VAR 0 17
13981: ISECT
13982: ST_TO_ADDR
// if not list then
13983: LD_VAR 0 5
13987: NOT
13988: IFFALSE 13992
// exit ;
13990: GO 14796
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13992: LD_VAR 0 12
13996: PUSH
13997: LD_INT 3
13999: EQUAL
14000: PUSH
14001: LD_INT 49
14003: PUSH
14004: LD_VAR 0 5
14008: IN
14009: AND
14010: PUSH
14011: LD_INT 31
14013: PPUSH
14014: LD_VAR 0 16
14018: PPUSH
14019: CALL_OW 321
14023: PUSH
14024: LD_INT 2
14026: EQUAL
14027: AND
14028: IFFALSE 14088
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
14030: LD_INT 22
14032: PUSH
14033: LD_VAR 0 16
14037: PUSH
14038: EMPTY
14039: LIST
14040: LIST
14041: PUSH
14042: LD_INT 35
14044: PUSH
14045: LD_INT 49
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: PUSH
14052: LD_INT 91
14054: PUSH
14055: LD_VAR 0 1
14059: PUSH
14060: LD_INT 10
14062: PUSH
14063: EMPTY
14064: LIST
14065: LIST
14066: LIST
14067: PUSH
14068: EMPTY
14069: LIST
14070: LIST
14071: LIST
14072: PPUSH
14073: CALL_OW 69
14077: NOT
14078: IFFALSE 14088
// weapon := ru_time_lapser ;
14080: LD_ADDR_VAR 0 18
14084: PUSH
14085: LD_INT 49
14087: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
14088: LD_VAR 0 12
14092: PUSH
14093: LD_INT 1
14095: PUSH
14096: LD_INT 2
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: IN
14103: PUSH
14104: LD_INT 11
14106: PUSH
14107: LD_VAR 0 5
14111: IN
14112: PUSH
14113: LD_INT 30
14115: PUSH
14116: LD_VAR 0 5
14120: IN
14121: OR
14122: AND
14123: PUSH
14124: LD_INT 6
14126: PPUSH
14127: LD_VAR 0 16
14131: PPUSH
14132: CALL_OW 321
14136: PUSH
14137: LD_INT 2
14139: EQUAL
14140: AND
14141: IFFALSE 14306
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
14143: LD_INT 22
14145: PUSH
14146: LD_VAR 0 16
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: PUSH
14155: LD_INT 2
14157: PUSH
14158: LD_INT 35
14160: PUSH
14161: LD_INT 11
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: PUSH
14168: LD_INT 35
14170: PUSH
14171: LD_INT 30
14173: PUSH
14174: EMPTY
14175: LIST
14176: LIST
14177: PUSH
14178: EMPTY
14179: LIST
14180: LIST
14181: LIST
14182: PUSH
14183: LD_INT 91
14185: PUSH
14186: LD_VAR 0 1
14190: PUSH
14191: LD_INT 18
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: LIST
14198: PUSH
14199: EMPTY
14200: LIST
14201: LIST
14202: LIST
14203: PPUSH
14204: CALL_OW 69
14208: NOT
14209: PUSH
14210: LD_INT 22
14212: PUSH
14213: LD_VAR 0 16
14217: PUSH
14218: EMPTY
14219: LIST
14220: LIST
14221: PUSH
14222: LD_INT 2
14224: PUSH
14225: LD_INT 30
14227: PUSH
14228: LD_INT 32
14230: PUSH
14231: EMPTY
14232: LIST
14233: LIST
14234: PUSH
14235: LD_INT 30
14237: PUSH
14238: LD_INT 33
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: LIST
14249: PUSH
14250: LD_INT 91
14252: PUSH
14253: LD_VAR 0 1
14257: PUSH
14258: LD_INT 12
14260: PUSH
14261: EMPTY
14262: LIST
14263: LIST
14264: LIST
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: LIST
14270: PUSH
14271: EMPTY
14272: LIST
14273: PPUSH
14274: CALL_OW 69
14278: PUSH
14279: LD_INT 2
14281: GREATER
14282: AND
14283: IFFALSE 14306
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14285: LD_ADDR_VAR 0 18
14289: PUSH
14290: LD_INT 11
14292: PUSH
14293: LD_INT 30
14295: PUSH
14296: EMPTY
14297: LIST
14298: LIST
14299: PUSH
14300: LD_VAR 0 12
14304: ARRAY
14305: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14306: LD_VAR 0 18
14310: NOT
14311: PUSH
14312: LD_INT 40
14314: PPUSH
14315: LD_VAR 0 16
14319: PPUSH
14320: CALL_OW 321
14324: PUSH
14325: LD_INT 2
14327: EQUAL
14328: AND
14329: PUSH
14330: LD_INT 7
14332: PUSH
14333: LD_VAR 0 5
14337: IN
14338: PUSH
14339: LD_INT 28
14341: PUSH
14342: LD_VAR 0 5
14346: IN
14347: OR
14348: PUSH
14349: LD_INT 45
14351: PUSH
14352: LD_VAR 0 5
14356: IN
14357: OR
14358: AND
14359: IFFALSE 14613
// begin hex := GetHexInfo ( x , y ) ;
14361: LD_ADDR_VAR 0 4
14365: PUSH
14366: LD_VAR 0 10
14370: PPUSH
14371: LD_VAR 0 11
14375: PPUSH
14376: CALL_OW 546
14380: ST_TO_ADDR
// if hex [ 1 ] then
14381: LD_VAR 0 4
14385: PUSH
14386: LD_INT 1
14388: ARRAY
14389: IFFALSE 14393
// exit ;
14391: GO 14796
// height := hex [ 2 ] ;
14393: LD_ADDR_VAR 0 15
14397: PUSH
14398: LD_VAR 0 4
14402: PUSH
14403: LD_INT 2
14405: ARRAY
14406: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14407: LD_ADDR_VAR 0 14
14411: PUSH
14412: LD_INT 0
14414: PUSH
14415: LD_INT 2
14417: PUSH
14418: LD_INT 3
14420: PUSH
14421: LD_INT 5
14423: PUSH
14424: EMPTY
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: ST_TO_ADDR
// for i in tmp do
14430: LD_ADDR_VAR 0 8
14434: PUSH
14435: LD_VAR 0 14
14439: PUSH
14440: FOR_IN
14441: IFFALSE 14611
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14443: LD_ADDR_VAR 0 9
14447: PUSH
14448: LD_VAR 0 10
14452: PPUSH
14453: LD_VAR 0 8
14457: PPUSH
14458: LD_INT 5
14460: PPUSH
14461: CALL_OW 272
14465: PUSH
14466: LD_VAR 0 11
14470: PPUSH
14471: LD_VAR 0 8
14475: PPUSH
14476: LD_INT 5
14478: PPUSH
14479: CALL_OW 273
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14488: LD_VAR 0 9
14492: PUSH
14493: LD_INT 1
14495: ARRAY
14496: PPUSH
14497: LD_VAR 0 9
14501: PUSH
14502: LD_INT 2
14504: ARRAY
14505: PPUSH
14506: CALL_OW 488
14510: IFFALSE 14609
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14512: LD_ADDR_VAR 0 4
14516: PUSH
14517: LD_VAR 0 9
14521: PUSH
14522: LD_INT 1
14524: ARRAY
14525: PPUSH
14526: LD_VAR 0 9
14530: PUSH
14531: LD_INT 2
14533: ARRAY
14534: PPUSH
14535: CALL_OW 546
14539: ST_TO_ADDR
// if hex [ 1 ] then
14540: LD_VAR 0 4
14544: PUSH
14545: LD_INT 1
14547: ARRAY
14548: IFFALSE 14552
// continue ;
14550: GO 14440
// h := hex [ 2 ] ;
14552: LD_ADDR_VAR 0 13
14556: PUSH
14557: LD_VAR 0 4
14561: PUSH
14562: LD_INT 2
14564: ARRAY
14565: ST_TO_ADDR
// if h + 7 < height then
14566: LD_VAR 0 13
14570: PUSH
14571: LD_INT 7
14573: PLUS
14574: PUSH
14575: LD_VAR 0 15
14579: LESS
14580: IFFALSE 14609
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14582: LD_ADDR_VAR 0 18
14586: PUSH
14587: LD_INT 7
14589: PUSH
14590: LD_INT 28
14592: PUSH
14593: LD_INT 45
14595: PUSH
14596: EMPTY
14597: LIST
14598: LIST
14599: LIST
14600: PUSH
14601: LD_VAR 0 12
14605: ARRAY
14606: ST_TO_ADDR
// break ;
14607: GO 14611
// end ; end ; end ;
14609: GO 14440
14611: POP
14612: POP
// end ; if not weapon then
14613: LD_VAR 0 18
14617: NOT
14618: IFFALSE 14678
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14620: LD_ADDR_VAR 0 5
14624: PUSH
14625: LD_VAR 0 5
14629: PUSH
14630: LD_INT 11
14632: PUSH
14633: LD_INT 30
14635: PUSH
14636: LD_INT 49
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: LIST
14643: DIFF
14644: ST_TO_ADDR
// if not list then
14645: LD_VAR 0 5
14649: NOT
14650: IFFALSE 14654
// exit ;
14652: GO 14796
// weapon := list [ rand ( 1 , list ) ] ;
14654: LD_ADDR_VAR 0 18
14658: PUSH
14659: LD_VAR 0 5
14663: PUSH
14664: LD_INT 1
14666: PPUSH
14667: LD_VAR 0 5
14671: PPUSH
14672: CALL_OW 12
14676: ARRAY
14677: ST_TO_ADDR
// end ; if weapon then
14678: LD_VAR 0 18
14682: IFFALSE 14796
// begin tmp := CostOfWeapon ( weapon ) ;
14684: LD_ADDR_VAR 0 14
14688: PUSH
14689: LD_VAR 0 18
14693: PPUSH
14694: CALL_OW 451
14698: ST_TO_ADDR
// j := GetBase ( tower ) ;
14699: LD_ADDR_VAR 0 9
14703: PUSH
14704: LD_VAR 0 1
14708: PPUSH
14709: CALL_OW 274
14713: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14714: LD_VAR 0 9
14718: PPUSH
14719: LD_INT 1
14721: PPUSH
14722: CALL_OW 275
14726: PUSH
14727: LD_VAR 0 14
14731: PUSH
14732: LD_INT 1
14734: ARRAY
14735: GREATEREQUAL
14736: PUSH
14737: LD_VAR 0 9
14741: PPUSH
14742: LD_INT 2
14744: PPUSH
14745: CALL_OW 275
14749: PUSH
14750: LD_VAR 0 14
14754: PUSH
14755: LD_INT 2
14757: ARRAY
14758: GREATEREQUAL
14759: AND
14760: PUSH
14761: LD_VAR 0 9
14765: PPUSH
14766: LD_INT 3
14768: PPUSH
14769: CALL_OW 275
14773: PUSH
14774: LD_VAR 0 14
14778: PUSH
14779: LD_INT 3
14781: ARRAY
14782: GREATEREQUAL
14783: AND
14784: IFFALSE 14796
// result := weapon ;
14786: LD_ADDR_VAR 0 3
14790: PUSH
14791: LD_VAR 0 18
14795: ST_TO_ADDR
// end ; end ;
14796: LD_VAR 0 3
14800: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14801: LD_INT 0
14803: PPUSH
14804: PPUSH
// result := true ;
14805: LD_ADDR_VAR 0 3
14809: PUSH
14810: LD_INT 1
14812: ST_TO_ADDR
// if array1 = array2 then
14813: LD_VAR 0 1
14817: PUSH
14818: LD_VAR 0 2
14822: EQUAL
14823: IFFALSE 14883
// begin for i = 1 to array1 do
14825: LD_ADDR_VAR 0 4
14829: PUSH
14830: DOUBLE
14831: LD_INT 1
14833: DEC
14834: ST_TO_ADDR
14835: LD_VAR 0 1
14839: PUSH
14840: FOR_TO
14841: IFFALSE 14879
// if array1 [ i ] <> array2 [ i ] then
14843: LD_VAR 0 1
14847: PUSH
14848: LD_VAR 0 4
14852: ARRAY
14853: PUSH
14854: LD_VAR 0 2
14858: PUSH
14859: LD_VAR 0 4
14863: ARRAY
14864: NONEQUAL
14865: IFFALSE 14877
// begin result := false ;
14867: LD_ADDR_VAR 0 3
14871: PUSH
14872: LD_INT 0
14874: ST_TO_ADDR
// break ;
14875: GO 14879
// end ;
14877: GO 14840
14879: POP
14880: POP
// end else
14881: GO 14891
// result := false ;
14883: LD_ADDR_VAR 0 3
14887: PUSH
14888: LD_INT 0
14890: ST_TO_ADDR
// end ;
14891: LD_VAR 0 3
14895: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14896: LD_INT 0
14898: PPUSH
14899: PPUSH
// if not array1 or not array2 then
14900: LD_VAR 0 1
14904: NOT
14905: PUSH
14906: LD_VAR 0 2
14910: NOT
14911: OR
14912: IFFALSE 14916
// exit ;
14914: GO 14980
// result := true ;
14916: LD_ADDR_VAR 0 3
14920: PUSH
14921: LD_INT 1
14923: ST_TO_ADDR
// for i = 1 to array1 do
14924: LD_ADDR_VAR 0 4
14928: PUSH
14929: DOUBLE
14930: LD_INT 1
14932: DEC
14933: ST_TO_ADDR
14934: LD_VAR 0 1
14938: PUSH
14939: FOR_TO
14940: IFFALSE 14978
// if array1 [ i ] <> array2 [ i ] then
14942: LD_VAR 0 1
14946: PUSH
14947: LD_VAR 0 4
14951: ARRAY
14952: PUSH
14953: LD_VAR 0 2
14957: PUSH
14958: LD_VAR 0 4
14962: ARRAY
14963: NONEQUAL
14964: IFFALSE 14976
// begin result := false ;
14966: LD_ADDR_VAR 0 3
14970: PUSH
14971: LD_INT 0
14973: ST_TO_ADDR
// break ;
14974: GO 14978
// end ;
14976: GO 14939
14978: POP
14979: POP
// end ;
14980: LD_VAR 0 3
14984: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14985: LD_INT 0
14987: PPUSH
14988: PPUSH
14989: PPUSH
// pom := GetBase ( fac ) ;
14990: LD_ADDR_VAR 0 5
14994: PUSH
14995: LD_VAR 0 1
14999: PPUSH
15000: CALL_OW 274
15004: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
15005: LD_ADDR_VAR 0 4
15009: PUSH
15010: LD_VAR 0 2
15014: PUSH
15015: LD_INT 1
15017: ARRAY
15018: PPUSH
15019: LD_VAR 0 2
15023: PUSH
15024: LD_INT 2
15026: ARRAY
15027: PPUSH
15028: LD_VAR 0 2
15032: PUSH
15033: LD_INT 3
15035: ARRAY
15036: PPUSH
15037: LD_VAR 0 2
15041: PUSH
15042: LD_INT 4
15044: ARRAY
15045: PPUSH
15046: CALL_OW 449
15050: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15051: LD_ADDR_VAR 0 3
15055: PUSH
15056: LD_VAR 0 5
15060: PPUSH
15061: LD_INT 1
15063: PPUSH
15064: CALL_OW 275
15068: PUSH
15069: LD_VAR 0 4
15073: PUSH
15074: LD_INT 1
15076: ARRAY
15077: GREATEREQUAL
15078: PUSH
15079: LD_VAR 0 5
15083: PPUSH
15084: LD_INT 2
15086: PPUSH
15087: CALL_OW 275
15091: PUSH
15092: LD_VAR 0 4
15096: PUSH
15097: LD_INT 2
15099: ARRAY
15100: GREATEREQUAL
15101: AND
15102: PUSH
15103: LD_VAR 0 5
15107: PPUSH
15108: LD_INT 3
15110: PPUSH
15111: CALL_OW 275
15115: PUSH
15116: LD_VAR 0 4
15120: PUSH
15121: LD_INT 3
15123: ARRAY
15124: GREATEREQUAL
15125: AND
15126: ST_TO_ADDR
// end ;
15127: LD_VAR 0 3
15131: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
15132: LD_INT 0
15134: PPUSH
15135: PPUSH
15136: PPUSH
15137: PPUSH
// pom := GetBase ( building ) ;
15138: LD_ADDR_VAR 0 3
15142: PUSH
15143: LD_VAR 0 1
15147: PPUSH
15148: CALL_OW 274
15152: ST_TO_ADDR
// if not pom then
15153: LD_VAR 0 3
15157: NOT
15158: IFFALSE 15162
// exit ;
15160: GO 15332
// btype := GetBType ( building ) ;
15162: LD_ADDR_VAR 0 5
15166: PUSH
15167: LD_VAR 0 1
15171: PPUSH
15172: CALL_OW 266
15176: ST_TO_ADDR
// if btype = b_armoury then
15177: LD_VAR 0 5
15181: PUSH
15182: LD_INT 4
15184: EQUAL
15185: IFFALSE 15195
// btype := b_barracks ;
15187: LD_ADDR_VAR 0 5
15191: PUSH
15192: LD_INT 5
15194: ST_TO_ADDR
// if btype = b_depot then
15195: LD_VAR 0 5
15199: PUSH
15200: LD_INT 0
15202: EQUAL
15203: IFFALSE 15213
// btype := b_warehouse ;
15205: LD_ADDR_VAR 0 5
15209: PUSH
15210: LD_INT 1
15212: ST_TO_ADDR
// if btype = b_workshop then
15213: LD_VAR 0 5
15217: PUSH
15218: LD_INT 2
15220: EQUAL
15221: IFFALSE 15231
// btype := b_factory ;
15223: LD_ADDR_VAR 0 5
15227: PUSH
15228: LD_INT 3
15230: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15231: LD_ADDR_VAR 0 4
15235: PUSH
15236: LD_VAR 0 5
15240: PPUSH
15241: LD_VAR 0 1
15245: PPUSH
15246: CALL_OW 248
15250: PPUSH
15251: CALL_OW 450
15255: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15256: LD_ADDR_VAR 0 2
15260: PUSH
15261: LD_VAR 0 3
15265: PPUSH
15266: LD_INT 1
15268: PPUSH
15269: CALL_OW 275
15273: PUSH
15274: LD_VAR 0 4
15278: PUSH
15279: LD_INT 1
15281: ARRAY
15282: GREATEREQUAL
15283: PUSH
15284: LD_VAR 0 3
15288: PPUSH
15289: LD_INT 2
15291: PPUSH
15292: CALL_OW 275
15296: PUSH
15297: LD_VAR 0 4
15301: PUSH
15302: LD_INT 2
15304: ARRAY
15305: GREATEREQUAL
15306: AND
15307: PUSH
15308: LD_VAR 0 3
15312: PPUSH
15313: LD_INT 3
15315: PPUSH
15316: CALL_OW 275
15320: PUSH
15321: LD_VAR 0 4
15325: PUSH
15326: LD_INT 3
15328: ARRAY
15329: GREATEREQUAL
15330: AND
15331: ST_TO_ADDR
// end ;
15332: LD_VAR 0 2
15336: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15337: LD_INT 0
15339: PPUSH
15340: PPUSH
15341: PPUSH
// pom := GetBase ( building ) ;
15342: LD_ADDR_VAR 0 4
15346: PUSH
15347: LD_VAR 0 1
15351: PPUSH
15352: CALL_OW 274
15356: ST_TO_ADDR
// if not pom then
15357: LD_VAR 0 4
15361: NOT
15362: IFFALSE 15366
// exit ;
15364: GO 15467
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15366: LD_ADDR_VAR 0 5
15370: PUSH
15371: LD_VAR 0 2
15375: PPUSH
15376: LD_VAR 0 1
15380: PPUSH
15381: CALL_OW 248
15385: PPUSH
15386: CALL_OW 450
15390: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15391: LD_ADDR_VAR 0 3
15395: PUSH
15396: LD_VAR 0 4
15400: PPUSH
15401: LD_INT 1
15403: PPUSH
15404: CALL_OW 275
15408: PUSH
15409: LD_VAR 0 5
15413: PUSH
15414: LD_INT 1
15416: ARRAY
15417: GREATEREQUAL
15418: PUSH
15419: LD_VAR 0 4
15423: PPUSH
15424: LD_INT 2
15426: PPUSH
15427: CALL_OW 275
15431: PUSH
15432: LD_VAR 0 5
15436: PUSH
15437: LD_INT 2
15439: ARRAY
15440: GREATEREQUAL
15441: AND
15442: PUSH
15443: LD_VAR 0 4
15447: PPUSH
15448: LD_INT 3
15450: PPUSH
15451: CALL_OW 275
15455: PUSH
15456: LD_VAR 0 5
15460: PUSH
15461: LD_INT 3
15463: ARRAY
15464: GREATEREQUAL
15465: AND
15466: ST_TO_ADDR
// end ;
15467: LD_VAR 0 3
15471: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15472: LD_INT 0
15474: PPUSH
15475: PPUSH
15476: PPUSH
15477: PPUSH
15478: PPUSH
15479: PPUSH
15480: PPUSH
15481: PPUSH
15482: PPUSH
15483: PPUSH
15484: PPUSH
// result := false ;
15485: LD_ADDR_VAR 0 8
15489: PUSH
15490: LD_INT 0
15492: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15493: LD_VAR 0 5
15497: NOT
15498: PUSH
15499: LD_VAR 0 1
15503: NOT
15504: OR
15505: PUSH
15506: LD_VAR 0 2
15510: NOT
15511: OR
15512: PUSH
15513: LD_VAR 0 3
15517: NOT
15518: OR
15519: IFFALSE 15523
// exit ;
15521: GO 16337
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15523: LD_ADDR_VAR 0 14
15527: PUSH
15528: LD_VAR 0 1
15532: PPUSH
15533: LD_VAR 0 2
15537: PPUSH
15538: LD_VAR 0 3
15542: PPUSH
15543: LD_VAR 0 4
15547: PPUSH
15548: LD_VAR 0 5
15552: PUSH
15553: LD_INT 1
15555: ARRAY
15556: PPUSH
15557: CALL_OW 248
15561: PPUSH
15562: LD_INT 0
15564: PPUSH
15565: CALL 17590 0 6
15569: ST_TO_ADDR
// if not hexes then
15570: LD_VAR 0 14
15574: NOT
15575: IFFALSE 15579
// exit ;
15577: GO 16337
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15579: LD_ADDR_VAR 0 17
15583: PUSH
15584: LD_VAR 0 5
15588: PPUSH
15589: LD_INT 22
15591: PUSH
15592: LD_VAR 0 13
15596: PPUSH
15597: CALL_OW 255
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: PUSH
15606: LD_INT 2
15608: PUSH
15609: LD_INT 30
15611: PUSH
15612: LD_INT 0
15614: PUSH
15615: EMPTY
15616: LIST
15617: LIST
15618: PUSH
15619: LD_INT 30
15621: PUSH
15622: LD_INT 1
15624: PUSH
15625: EMPTY
15626: LIST
15627: LIST
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: LIST
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: PPUSH
15638: CALL_OW 72
15642: ST_TO_ADDR
// for i = 1 to hexes do
15643: LD_ADDR_VAR 0 9
15647: PUSH
15648: DOUBLE
15649: LD_INT 1
15651: DEC
15652: ST_TO_ADDR
15653: LD_VAR 0 14
15657: PUSH
15658: FOR_TO
15659: IFFALSE 16335
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15661: LD_ADDR_VAR 0 13
15665: PUSH
15666: LD_VAR 0 14
15670: PUSH
15671: LD_VAR 0 9
15675: ARRAY
15676: PUSH
15677: LD_INT 1
15679: ARRAY
15680: PPUSH
15681: LD_VAR 0 14
15685: PUSH
15686: LD_VAR 0 9
15690: ARRAY
15691: PUSH
15692: LD_INT 2
15694: ARRAY
15695: PPUSH
15696: CALL_OW 428
15700: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15701: LD_VAR 0 14
15705: PUSH
15706: LD_VAR 0 9
15710: ARRAY
15711: PUSH
15712: LD_INT 1
15714: ARRAY
15715: PPUSH
15716: LD_VAR 0 14
15720: PUSH
15721: LD_VAR 0 9
15725: ARRAY
15726: PUSH
15727: LD_INT 2
15729: ARRAY
15730: PPUSH
15731: CALL_OW 351
15735: PUSH
15736: LD_VAR 0 14
15740: PUSH
15741: LD_VAR 0 9
15745: ARRAY
15746: PUSH
15747: LD_INT 1
15749: ARRAY
15750: PPUSH
15751: LD_VAR 0 14
15755: PUSH
15756: LD_VAR 0 9
15760: ARRAY
15761: PUSH
15762: LD_INT 2
15764: ARRAY
15765: PPUSH
15766: CALL_OW 488
15770: NOT
15771: OR
15772: PUSH
15773: LD_VAR 0 13
15777: PPUSH
15778: CALL_OW 247
15782: PUSH
15783: LD_INT 3
15785: EQUAL
15786: OR
15787: IFFALSE 15793
// exit ;
15789: POP
15790: POP
15791: GO 16337
// if not tmp then
15793: LD_VAR 0 13
15797: NOT
15798: IFFALSE 15802
// continue ;
15800: GO 15658
// result := true ;
15802: LD_ADDR_VAR 0 8
15806: PUSH
15807: LD_INT 1
15809: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15810: LD_VAR 0 6
15814: PUSH
15815: LD_VAR 0 13
15819: PPUSH
15820: CALL_OW 247
15824: PUSH
15825: LD_INT 2
15827: EQUAL
15828: AND
15829: PUSH
15830: LD_VAR 0 13
15834: PPUSH
15835: CALL_OW 263
15839: PUSH
15840: LD_INT 1
15842: EQUAL
15843: AND
15844: IFFALSE 16008
// begin if IsDrivenBy ( tmp ) then
15846: LD_VAR 0 13
15850: PPUSH
15851: CALL_OW 311
15855: IFFALSE 15859
// continue ;
15857: GO 15658
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15859: LD_VAR 0 6
15863: PPUSH
15864: LD_INT 3
15866: PUSH
15867: LD_INT 60
15869: PUSH
15870: EMPTY
15871: LIST
15872: PUSH
15873: EMPTY
15874: LIST
15875: LIST
15876: PUSH
15877: LD_INT 3
15879: PUSH
15880: LD_INT 55
15882: PUSH
15883: EMPTY
15884: LIST
15885: PUSH
15886: EMPTY
15887: LIST
15888: LIST
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: PPUSH
15894: CALL_OW 72
15898: IFFALSE 16006
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15900: LD_ADDR_VAR 0 18
15904: PUSH
15905: LD_VAR 0 6
15909: PPUSH
15910: LD_INT 3
15912: PUSH
15913: LD_INT 60
15915: PUSH
15916: EMPTY
15917: LIST
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PUSH
15923: LD_INT 3
15925: PUSH
15926: LD_INT 55
15928: PUSH
15929: EMPTY
15930: LIST
15931: PUSH
15932: EMPTY
15933: LIST
15934: LIST
15935: PUSH
15936: EMPTY
15937: LIST
15938: LIST
15939: PPUSH
15940: CALL_OW 72
15944: PUSH
15945: LD_INT 1
15947: ARRAY
15948: ST_TO_ADDR
// if IsInUnit ( driver ) then
15949: LD_VAR 0 18
15953: PPUSH
15954: CALL_OW 310
15958: IFFALSE 15969
// ComExit ( driver ) ;
15960: LD_VAR 0 18
15964: PPUSH
15965: CALL 41369 0 1
// AddComEnterUnit ( driver , tmp ) ;
15969: LD_VAR 0 18
15973: PPUSH
15974: LD_VAR 0 13
15978: PPUSH
15979: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15983: LD_VAR 0 18
15987: PPUSH
15988: LD_VAR 0 7
15992: PPUSH
15993: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15997: LD_VAR 0 18
16001: PPUSH
16002: CALL_OW 181
// end ; continue ;
16006: GO 15658
// end ; if not cleaners or not tmp in cleaners then
16008: LD_VAR 0 6
16012: NOT
16013: PUSH
16014: LD_VAR 0 13
16018: PUSH
16019: LD_VAR 0 6
16023: IN
16024: NOT
16025: OR
16026: IFFALSE 16333
// begin if dep then
16028: LD_VAR 0 17
16032: IFFALSE 16168
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
16034: LD_ADDR_VAR 0 16
16038: PUSH
16039: LD_VAR 0 17
16043: PUSH
16044: LD_INT 1
16046: ARRAY
16047: PPUSH
16048: CALL_OW 250
16052: PPUSH
16053: LD_VAR 0 17
16057: PUSH
16058: LD_INT 1
16060: ARRAY
16061: PPUSH
16062: CALL_OW 254
16066: PPUSH
16067: LD_INT 5
16069: PPUSH
16070: CALL_OW 272
16074: PUSH
16075: LD_VAR 0 17
16079: PUSH
16080: LD_INT 1
16082: ARRAY
16083: PPUSH
16084: CALL_OW 251
16088: PPUSH
16089: LD_VAR 0 17
16093: PUSH
16094: LD_INT 1
16096: ARRAY
16097: PPUSH
16098: CALL_OW 254
16102: PPUSH
16103: LD_INT 5
16105: PPUSH
16106: CALL_OW 273
16110: PUSH
16111: EMPTY
16112: LIST
16113: LIST
16114: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
16115: LD_VAR 0 16
16119: PUSH
16120: LD_INT 1
16122: ARRAY
16123: PPUSH
16124: LD_VAR 0 16
16128: PUSH
16129: LD_INT 2
16131: ARRAY
16132: PPUSH
16133: CALL_OW 488
16137: IFFALSE 16168
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16139: LD_VAR 0 13
16143: PPUSH
16144: LD_VAR 0 16
16148: PUSH
16149: LD_INT 1
16151: ARRAY
16152: PPUSH
16153: LD_VAR 0 16
16157: PUSH
16158: LD_INT 2
16160: ARRAY
16161: PPUSH
16162: CALL_OW 111
// continue ;
16166: GO 15658
// end ; end ; r := GetDir ( tmp ) ;
16168: LD_ADDR_VAR 0 15
16172: PUSH
16173: LD_VAR 0 13
16177: PPUSH
16178: CALL_OW 254
16182: ST_TO_ADDR
// if r = 5 then
16183: LD_VAR 0 15
16187: PUSH
16188: LD_INT 5
16190: EQUAL
16191: IFFALSE 16201
// r := 0 ;
16193: LD_ADDR_VAR 0 15
16197: PUSH
16198: LD_INT 0
16200: ST_TO_ADDR
// for j = r to 5 do
16201: LD_ADDR_VAR 0 10
16205: PUSH
16206: DOUBLE
16207: LD_VAR 0 15
16211: DEC
16212: ST_TO_ADDR
16213: LD_INT 5
16215: PUSH
16216: FOR_TO
16217: IFFALSE 16331
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16219: LD_ADDR_VAR 0 11
16223: PUSH
16224: LD_VAR 0 13
16228: PPUSH
16229: CALL_OW 250
16233: PPUSH
16234: LD_VAR 0 10
16238: PPUSH
16239: LD_INT 2
16241: PPUSH
16242: CALL_OW 272
16246: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16247: LD_ADDR_VAR 0 12
16251: PUSH
16252: LD_VAR 0 13
16256: PPUSH
16257: CALL_OW 251
16261: PPUSH
16262: LD_VAR 0 10
16266: PPUSH
16267: LD_INT 2
16269: PPUSH
16270: CALL_OW 273
16274: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16275: LD_VAR 0 11
16279: PPUSH
16280: LD_VAR 0 12
16284: PPUSH
16285: CALL_OW 488
16289: PUSH
16290: LD_VAR 0 11
16294: PPUSH
16295: LD_VAR 0 12
16299: PPUSH
16300: CALL_OW 428
16304: NOT
16305: AND
16306: IFFALSE 16329
// begin ComMoveXY ( tmp , _x , _y ) ;
16308: LD_VAR 0 13
16312: PPUSH
16313: LD_VAR 0 11
16317: PPUSH
16318: LD_VAR 0 12
16322: PPUSH
16323: CALL_OW 111
// break ;
16327: GO 16331
// end ; end ;
16329: GO 16216
16331: POP
16332: POP
// end ; end ;
16333: GO 15658
16335: POP
16336: POP
// end ;
16337: LD_VAR 0 8
16341: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16342: LD_INT 0
16344: PPUSH
// result := true ;
16345: LD_ADDR_VAR 0 3
16349: PUSH
16350: LD_INT 1
16352: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16353: LD_VAR 0 2
16357: PUSH
16358: LD_INT 24
16360: DOUBLE
16361: EQUAL
16362: IFTRUE 16372
16364: LD_INT 33
16366: DOUBLE
16367: EQUAL
16368: IFTRUE 16372
16370: GO 16397
16372: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16373: LD_ADDR_VAR 0 3
16377: PUSH
16378: LD_INT 32
16380: PPUSH
16381: LD_VAR 0 1
16385: PPUSH
16386: CALL_OW 321
16390: PUSH
16391: LD_INT 2
16393: EQUAL
16394: ST_TO_ADDR
16395: GO 16713
16397: LD_INT 20
16399: DOUBLE
16400: EQUAL
16401: IFTRUE 16405
16403: GO 16430
16405: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16406: LD_ADDR_VAR 0 3
16410: PUSH
16411: LD_INT 6
16413: PPUSH
16414: LD_VAR 0 1
16418: PPUSH
16419: CALL_OW 321
16423: PUSH
16424: LD_INT 2
16426: EQUAL
16427: ST_TO_ADDR
16428: GO 16713
16430: LD_INT 22
16432: DOUBLE
16433: EQUAL
16434: IFTRUE 16444
16436: LD_INT 36
16438: DOUBLE
16439: EQUAL
16440: IFTRUE 16444
16442: GO 16469
16444: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16445: LD_ADDR_VAR 0 3
16449: PUSH
16450: LD_INT 15
16452: PPUSH
16453: LD_VAR 0 1
16457: PPUSH
16458: CALL_OW 321
16462: PUSH
16463: LD_INT 2
16465: EQUAL
16466: ST_TO_ADDR
16467: GO 16713
16469: LD_INT 30
16471: DOUBLE
16472: EQUAL
16473: IFTRUE 16477
16475: GO 16502
16477: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16478: LD_ADDR_VAR 0 3
16482: PUSH
16483: LD_INT 20
16485: PPUSH
16486: LD_VAR 0 1
16490: PPUSH
16491: CALL_OW 321
16495: PUSH
16496: LD_INT 2
16498: EQUAL
16499: ST_TO_ADDR
16500: GO 16713
16502: LD_INT 28
16504: DOUBLE
16505: EQUAL
16506: IFTRUE 16516
16508: LD_INT 21
16510: DOUBLE
16511: EQUAL
16512: IFTRUE 16516
16514: GO 16541
16516: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16517: LD_ADDR_VAR 0 3
16521: PUSH
16522: LD_INT 21
16524: PPUSH
16525: LD_VAR 0 1
16529: PPUSH
16530: CALL_OW 321
16534: PUSH
16535: LD_INT 2
16537: EQUAL
16538: ST_TO_ADDR
16539: GO 16713
16541: LD_INT 16
16543: DOUBLE
16544: EQUAL
16545: IFTRUE 16549
16547: GO 16574
16549: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16550: LD_ADDR_VAR 0 3
16554: PUSH
16555: LD_INT 84
16557: PPUSH
16558: LD_VAR 0 1
16562: PPUSH
16563: CALL_OW 321
16567: PUSH
16568: LD_INT 2
16570: EQUAL
16571: ST_TO_ADDR
16572: GO 16713
16574: LD_INT 19
16576: DOUBLE
16577: EQUAL
16578: IFTRUE 16588
16580: LD_INT 23
16582: DOUBLE
16583: EQUAL
16584: IFTRUE 16588
16586: GO 16613
16588: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16589: LD_ADDR_VAR 0 3
16593: PUSH
16594: LD_INT 83
16596: PPUSH
16597: LD_VAR 0 1
16601: PPUSH
16602: CALL_OW 321
16606: PUSH
16607: LD_INT 2
16609: EQUAL
16610: ST_TO_ADDR
16611: GO 16713
16613: LD_INT 17
16615: DOUBLE
16616: EQUAL
16617: IFTRUE 16621
16619: GO 16646
16621: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16622: LD_ADDR_VAR 0 3
16626: PUSH
16627: LD_INT 39
16629: PPUSH
16630: LD_VAR 0 1
16634: PPUSH
16635: CALL_OW 321
16639: PUSH
16640: LD_INT 2
16642: EQUAL
16643: ST_TO_ADDR
16644: GO 16713
16646: LD_INT 18
16648: DOUBLE
16649: EQUAL
16650: IFTRUE 16654
16652: GO 16679
16654: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16655: LD_ADDR_VAR 0 3
16659: PUSH
16660: LD_INT 40
16662: PPUSH
16663: LD_VAR 0 1
16667: PPUSH
16668: CALL_OW 321
16672: PUSH
16673: LD_INT 2
16675: EQUAL
16676: ST_TO_ADDR
16677: GO 16713
16679: LD_INT 27
16681: DOUBLE
16682: EQUAL
16683: IFTRUE 16687
16685: GO 16712
16687: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16688: LD_ADDR_VAR 0 3
16692: PUSH
16693: LD_INT 35
16695: PPUSH
16696: LD_VAR 0 1
16700: PPUSH
16701: CALL_OW 321
16705: PUSH
16706: LD_INT 2
16708: EQUAL
16709: ST_TO_ADDR
16710: GO 16713
16712: POP
// end ;
16713: LD_VAR 0 3
16717: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16718: LD_INT 0
16720: PPUSH
16721: PPUSH
16722: PPUSH
16723: PPUSH
16724: PPUSH
16725: PPUSH
16726: PPUSH
16727: PPUSH
16728: PPUSH
16729: PPUSH
16730: PPUSH
// result := false ;
16731: LD_ADDR_VAR 0 6
16735: PUSH
16736: LD_INT 0
16738: ST_TO_ADDR
// if btype = b_depot then
16739: LD_VAR 0 2
16743: PUSH
16744: LD_INT 0
16746: EQUAL
16747: IFFALSE 16759
// begin result := true ;
16749: LD_ADDR_VAR 0 6
16753: PUSH
16754: LD_INT 1
16756: ST_TO_ADDR
// exit ;
16757: GO 17585
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16759: LD_VAR 0 1
16763: NOT
16764: PUSH
16765: LD_VAR 0 1
16769: PPUSH
16770: CALL_OW 266
16774: PUSH
16775: LD_INT 0
16777: PUSH
16778: LD_INT 1
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: IN
16785: NOT
16786: OR
16787: PUSH
16788: LD_VAR 0 2
16792: NOT
16793: OR
16794: PUSH
16795: LD_VAR 0 5
16799: PUSH
16800: LD_INT 0
16802: PUSH
16803: LD_INT 1
16805: PUSH
16806: LD_INT 2
16808: PUSH
16809: LD_INT 3
16811: PUSH
16812: LD_INT 4
16814: PUSH
16815: LD_INT 5
16817: PUSH
16818: EMPTY
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: IN
16826: NOT
16827: OR
16828: PUSH
16829: LD_VAR 0 3
16833: PPUSH
16834: LD_VAR 0 4
16838: PPUSH
16839: CALL_OW 488
16843: NOT
16844: OR
16845: IFFALSE 16849
// exit ;
16847: GO 17585
// side := GetSide ( depot ) ;
16849: LD_ADDR_VAR 0 9
16853: PUSH
16854: LD_VAR 0 1
16858: PPUSH
16859: CALL_OW 255
16863: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16864: LD_VAR 0 9
16868: PPUSH
16869: LD_VAR 0 2
16873: PPUSH
16874: CALL 16342 0 2
16878: NOT
16879: IFFALSE 16883
// exit ;
16881: GO 17585
// pom := GetBase ( depot ) ;
16883: LD_ADDR_VAR 0 10
16887: PUSH
16888: LD_VAR 0 1
16892: PPUSH
16893: CALL_OW 274
16897: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16898: LD_ADDR_VAR 0 11
16902: PUSH
16903: LD_VAR 0 2
16907: PPUSH
16908: LD_VAR 0 1
16912: PPUSH
16913: CALL_OW 248
16917: PPUSH
16918: CALL_OW 450
16922: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16923: LD_VAR 0 10
16927: PPUSH
16928: LD_INT 1
16930: PPUSH
16931: CALL_OW 275
16935: PUSH
16936: LD_VAR 0 11
16940: PUSH
16941: LD_INT 1
16943: ARRAY
16944: GREATEREQUAL
16945: PUSH
16946: LD_VAR 0 10
16950: PPUSH
16951: LD_INT 2
16953: PPUSH
16954: CALL_OW 275
16958: PUSH
16959: LD_VAR 0 11
16963: PUSH
16964: LD_INT 2
16966: ARRAY
16967: GREATEREQUAL
16968: AND
16969: PUSH
16970: LD_VAR 0 10
16974: PPUSH
16975: LD_INT 3
16977: PPUSH
16978: CALL_OW 275
16982: PUSH
16983: LD_VAR 0 11
16987: PUSH
16988: LD_INT 3
16990: ARRAY
16991: GREATEREQUAL
16992: AND
16993: NOT
16994: IFFALSE 16998
// exit ;
16996: GO 17585
// if GetBType ( depot ) = b_depot then
16998: LD_VAR 0 1
17002: PPUSH
17003: CALL_OW 266
17007: PUSH
17008: LD_INT 0
17010: EQUAL
17011: IFFALSE 17023
// dist := 28 else
17013: LD_ADDR_VAR 0 14
17017: PUSH
17018: LD_INT 28
17020: ST_TO_ADDR
17021: GO 17031
// dist := 36 ;
17023: LD_ADDR_VAR 0 14
17027: PUSH
17028: LD_INT 36
17030: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
17031: LD_VAR 0 1
17035: PPUSH
17036: LD_VAR 0 3
17040: PPUSH
17041: LD_VAR 0 4
17045: PPUSH
17046: CALL_OW 297
17050: PUSH
17051: LD_VAR 0 14
17055: GREATER
17056: IFFALSE 17060
// exit ;
17058: GO 17585
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
17060: LD_ADDR_VAR 0 12
17064: PUSH
17065: LD_VAR 0 2
17069: PPUSH
17070: LD_VAR 0 3
17074: PPUSH
17075: LD_VAR 0 4
17079: PPUSH
17080: LD_VAR 0 5
17084: PPUSH
17085: LD_VAR 0 1
17089: PPUSH
17090: CALL_OW 248
17094: PPUSH
17095: LD_INT 0
17097: PPUSH
17098: CALL 17590 0 6
17102: ST_TO_ADDR
// if not hexes then
17103: LD_VAR 0 12
17107: NOT
17108: IFFALSE 17112
// exit ;
17110: GO 17585
// hex := GetHexInfo ( x , y ) ;
17112: LD_ADDR_VAR 0 15
17116: PUSH
17117: LD_VAR 0 3
17121: PPUSH
17122: LD_VAR 0 4
17126: PPUSH
17127: CALL_OW 546
17131: ST_TO_ADDR
// if hex [ 1 ] then
17132: LD_VAR 0 15
17136: PUSH
17137: LD_INT 1
17139: ARRAY
17140: IFFALSE 17144
// exit ;
17142: GO 17585
// height := hex [ 2 ] ;
17144: LD_ADDR_VAR 0 13
17148: PUSH
17149: LD_VAR 0 15
17153: PUSH
17154: LD_INT 2
17156: ARRAY
17157: ST_TO_ADDR
// for i = 1 to hexes do
17158: LD_ADDR_VAR 0 7
17162: PUSH
17163: DOUBLE
17164: LD_INT 1
17166: DEC
17167: ST_TO_ADDR
17168: LD_VAR 0 12
17172: PUSH
17173: FOR_TO
17174: IFFALSE 17504
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17176: LD_VAR 0 12
17180: PUSH
17181: LD_VAR 0 7
17185: ARRAY
17186: PUSH
17187: LD_INT 1
17189: ARRAY
17190: PPUSH
17191: LD_VAR 0 12
17195: PUSH
17196: LD_VAR 0 7
17200: ARRAY
17201: PUSH
17202: LD_INT 2
17204: ARRAY
17205: PPUSH
17206: CALL_OW 488
17210: NOT
17211: PUSH
17212: LD_VAR 0 12
17216: PUSH
17217: LD_VAR 0 7
17221: ARRAY
17222: PUSH
17223: LD_INT 1
17225: ARRAY
17226: PPUSH
17227: LD_VAR 0 12
17231: PUSH
17232: LD_VAR 0 7
17236: ARRAY
17237: PUSH
17238: LD_INT 2
17240: ARRAY
17241: PPUSH
17242: CALL_OW 428
17246: PUSH
17247: LD_INT 0
17249: GREATER
17250: OR
17251: PUSH
17252: LD_VAR 0 12
17256: PUSH
17257: LD_VAR 0 7
17261: ARRAY
17262: PUSH
17263: LD_INT 1
17265: ARRAY
17266: PPUSH
17267: LD_VAR 0 12
17271: PUSH
17272: LD_VAR 0 7
17276: ARRAY
17277: PUSH
17278: LD_INT 2
17280: ARRAY
17281: PPUSH
17282: CALL_OW 351
17286: OR
17287: IFFALSE 17293
// exit ;
17289: POP
17290: POP
17291: GO 17585
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17293: LD_ADDR_VAR 0 8
17297: PUSH
17298: LD_VAR 0 12
17302: PUSH
17303: LD_VAR 0 7
17307: ARRAY
17308: PUSH
17309: LD_INT 1
17311: ARRAY
17312: PPUSH
17313: LD_VAR 0 12
17317: PUSH
17318: LD_VAR 0 7
17322: ARRAY
17323: PUSH
17324: LD_INT 2
17326: ARRAY
17327: PPUSH
17328: CALL_OW 546
17332: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17333: LD_VAR 0 8
17337: PUSH
17338: LD_INT 1
17340: ARRAY
17341: PUSH
17342: LD_VAR 0 8
17346: PUSH
17347: LD_INT 2
17349: ARRAY
17350: PUSH
17351: LD_VAR 0 13
17355: PUSH
17356: LD_INT 2
17358: PLUS
17359: GREATER
17360: OR
17361: PUSH
17362: LD_VAR 0 8
17366: PUSH
17367: LD_INT 2
17369: ARRAY
17370: PUSH
17371: LD_VAR 0 13
17375: PUSH
17376: LD_INT 2
17378: MINUS
17379: LESS
17380: OR
17381: PUSH
17382: LD_VAR 0 8
17386: PUSH
17387: LD_INT 3
17389: ARRAY
17390: PUSH
17391: LD_INT 0
17393: PUSH
17394: LD_INT 8
17396: PUSH
17397: LD_INT 9
17399: PUSH
17400: LD_INT 10
17402: PUSH
17403: LD_INT 11
17405: PUSH
17406: LD_INT 12
17408: PUSH
17409: LD_INT 13
17411: PUSH
17412: LD_INT 16
17414: PUSH
17415: LD_INT 17
17417: PUSH
17418: LD_INT 18
17420: PUSH
17421: LD_INT 19
17423: PUSH
17424: LD_INT 20
17426: PUSH
17427: LD_INT 21
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: IN
17445: NOT
17446: OR
17447: PUSH
17448: LD_VAR 0 8
17452: PUSH
17453: LD_INT 5
17455: ARRAY
17456: NOT
17457: OR
17458: PUSH
17459: LD_VAR 0 8
17463: PUSH
17464: LD_INT 6
17466: ARRAY
17467: PUSH
17468: LD_INT 1
17470: PUSH
17471: LD_INT 2
17473: PUSH
17474: LD_INT 7
17476: PUSH
17477: LD_INT 9
17479: PUSH
17480: LD_INT 10
17482: PUSH
17483: LD_INT 11
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: IN
17494: NOT
17495: OR
17496: IFFALSE 17502
// exit ;
17498: POP
17499: POP
17500: GO 17585
// end ;
17502: GO 17173
17504: POP
17505: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17506: LD_VAR 0 9
17510: PPUSH
17511: LD_VAR 0 3
17515: PPUSH
17516: LD_VAR 0 4
17520: PPUSH
17521: LD_INT 20
17523: PPUSH
17524: CALL 9508 0 4
17528: PUSH
17529: LD_INT 4
17531: ARRAY
17532: IFFALSE 17536
// exit ;
17534: GO 17585
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17536: LD_VAR 0 2
17540: PUSH
17541: LD_INT 29
17543: PUSH
17544: LD_INT 30
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: IN
17551: PUSH
17552: LD_VAR 0 3
17556: PPUSH
17557: LD_VAR 0 4
17561: PPUSH
17562: LD_VAR 0 9
17566: PPUSH
17567: CALL_OW 440
17571: NOT
17572: AND
17573: IFFALSE 17577
// exit ;
17575: GO 17585
// result := true ;
17577: LD_ADDR_VAR 0 6
17581: PUSH
17582: LD_INT 1
17584: ST_TO_ADDR
// end ;
17585: LD_VAR 0 6
17589: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17590: LD_INT 0
17592: PPUSH
17593: PPUSH
17594: PPUSH
17595: PPUSH
17596: PPUSH
17597: PPUSH
17598: PPUSH
17599: PPUSH
17600: PPUSH
17601: PPUSH
17602: PPUSH
17603: PPUSH
17604: PPUSH
17605: PPUSH
17606: PPUSH
17607: PPUSH
17608: PPUSH
17609: PPUSH
17610: PPUSH
17611: PPUSH
17612: PPUSH
17613: PPUSH
17614: PPUSH
17615: PPUSH
17616: PPUSH
17617: PPUSH
17618: PPUSH
17619: PPUSH
17620: PPUSH
17621: PPUSH
17622: PPUSH
17623: PPUSH
17624: PPUSH
17625: PPUSH
17626: PPUSH
17627: PPUSH
17628: PPUSH
17629: PPUSH
17630: PPUSH
17631: PPUSH
17632: PPUSH
17633: PPUSH
17634: PPUSH
17635: PPUSH
17636: PPUSH
17637: PPUSH
17638: PPUSH
17639: PPUSH
17640: PPUSH
17641: PPUSH
17642: PPUSH
17643: PPUSH
17644: PPUSH
17645: PPUSH
17646: PPUSH
17647: PPUSH
17648: PPUSH
17649: PPUSH
// result = [ ] ;
17650: LD_ADDR_VAR 0 7
17654: PUSH
17655: EMPTY
17656: ST_TO_ADDR
// temp_list = [ ] ;
17657: LD_ADDR_VAR 0 9
17661: PUSH
17662: EMPTY
17663: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17664: LD_VAR 0 4
17668: PUSH
17669: LD_INT 0
17671: PUSH
17672: LD_INT 1
17674: PUSH
17675: LD_INT 2
17677: PUSH
17678: LD_INT 3
17680: PUSH
17681: LD_INT 4
17683: PUSH
17684: LD_INT 5
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: LIST
17691: LIST
17692: LIST
17693: LIST
17694: IN
17695: NOT
17696: PUSH
17697: LD_VAR 0 1
17701: PUSH
17702: LD_INT 0
17704: PUSH
17705: LD_INT 1
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: IN
17712: PUSH
17713: LD_VAR 0 5
17717: PUSH
17718: LD_INT 1
17720: PUSH
17721: LD_INT 2
17723: PUSH
17724: LD_INT 3
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: LIST
17731: IN
17732: NOT
17733: AND
17734: OR
17735: IFFALSE 17739
// exit ;
17737: GO 36130
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17739: LD_VAR 0 1
17743: PUSH
17744: LD_INT 6
17746: PUSH
17747: LD_INT 7
17749: PUSH
17750: LD_INT 8
17752: PUSH
17753: LD_INT 13
17755: PUSH
17756: LD_INT 12
17758: PUSH
17759: LD_INT 15
17761: PUSH
17762: LD_INT 11
17764: PUSH
17765: LD_INT 14
17767: PUSH
17768: LD_INT 10
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: IN
17782: IFFALSE 17792
// btype = b_lab ;
17784: LD_ADDR_VAR 0 1
17788: PUSH
17789: LD_INT 6
17791: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17792: LD_VAR 0 6
17796: PUSH
17797: LD_INT 0
17799: PUSH
17800: LD_INT 1
17802: PUSH
17803: LD_INT 2
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: LIST
17810: IN
17811: NOT
17812: PUSH
17813: LD_VAR 0 1
17817: PUSH
17818: LD_INT 0
17820: PUSH
17821: LD_INT 1
17823: PUSH
17824: LD_INT 2
17826: PUSH
17827: LD_INT 3
17829: PUSH
17830: LD_INT 6
17832: PUSH
17833: LD_INT 36
17835: PUSH
17836: LD_INT 4
17838: PUSH
17839: LD_INT 5
17841: PUSH
17842: LD_INT 31
17844: PUSH
17845: LD_INT 32
17847: PUSH
17848: LD_INT 33
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: LIST
17855: LIST
17856: LIST
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: LIST
17862: LIST
17863: IN
17864: NOT
17865: PUSH
17866: LD_VAR 0 6
17870: PUSH
17871: LD_INT 1
17873: EQUAL
17874: AND
17875: OR
17876: PUSH
17877: LD_VAR 0 1
17881: PUSH
17882: LD_INT 2
17884: PUSH
17885: LD_INT 3
17887: PUSH
17888: EMPTY
17889: LIST
17890: LIST
17891: IN
17892: NOT
17893: PUSH
17894: LD_VAR 0 6
17898: PUSH
17899: LD_INT 2
17901: EQUAL
17902: AND
17903: OR
17904: IFFALSE 17914
// mode = 0 ;
17906: LD_ADDR_VAR 0 6
17910: PUSH
17911: LD_INT 0
17913: ST_TO_ADDR
// case mode of 0 :
17914: LD_VAR 0 6
17918: PUSH
17919: LD_INT 0
17921: DOUBLE
17922: EQUAL
17923: IFTRUE 17927
17925: GO 29380
17927: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17928: LD_ADDR_VAR 0 11
17932: PUSH
17933: LD_INT 0
17935: PUSH
17936: LD_INT 0
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: PUSH
17943: LD_INT 0
17945: PUSH
17946: LD_INT 1
17948: NEG
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: LD_INT 1
17956: PUSH
17957: LD_INT 0
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PUSH
17964: LD_INT 1
17966: PUSH
17967: LD_INT 1
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: PUSH
17974: LD_INT 0
17976: PUSH
17977: LD_INT 1
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: PUSH
17984: LD_INT 1
17986: NEG
17987: PUSH
17988: LD_INT 0
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: PUSH
17995: LD_INT 1
17997: NEG
17998: PUSH
17999: LD_INT 1
18001: NEG
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: PUSH
18007: LD_INT 1
18009: NEG
18010: PUSH
18011: LD_INT 2
18013: NEG
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: PUSH
18019: LD_INT 0
18021: PUSH
18022: LD_INT 2
18024: NEG
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: PUSH
18030: LD_INT 1
18032: PUSH
18033: LD_INT 1
18035: NEG
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PUSH
18041: LD_INT 1
18043: PUSH
18044: LD_INT 2
18046: PUSH
18047: EMPTY
18048: LIST
18049: LIST
18050: PUSH
18051: LD_INT 0
18053: PUSH
18054: LD_INT 2
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PUSH
18061: LD_INT 1
18063: NEG
18064: PUSH
18065: LD_INT 1
18067: PUSH
18068: EMPTY
18069: LIST
18070: LIST
18071: PUSH
18072: LD_INT 1
18074: PUSH
18075: LD_INT 3
18077: PUSH
18078: EMPTY
18079: LIST
18080: LIST
18081: PUSH
18082: LD_INT 0
18084: PUSH
18085: LD_INT 3
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: PUSH
18092: LD_INT 1
18094: NEG
18095: PUSH
18096: LD_INT 2
18098: PUSH
18099: EMPTY
18100: LIST
18101: LIST
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: LIST
18114: LIST
18115: LIST
18116: LIST
18117: LIST
18118: LIST
18119: LIST
18120: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18121: LD_ADDR_VAR 0 12
18125: PUSH
18126: LD_INT 0
18128: PUSH
18129: LD_INT 0
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: PUSH
18136: LD_INT 0
18138: PUSH
18139: LD_INT 1
18141: NEG
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PUSH
18147: LD_INT 1
18149: PUSH
18150: LD_INT 0
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PUSH
18157: LD_INT 1
18159: PUSH
18160: LD_INT 1
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: LD_INT 0
18169: PUSH
18170: LD_INT 1
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PUSH
18177: LD_INT 1
18179: NEG
18180: PUSH
18181: LD_INT 0
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PUSH
18188: LD_INT 1
18190: NEG
18191: PUSH
18192: LD_INT 1
18194: NEG
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: PUSH
18200: LD_INT 1
18202: PUSH
18203: LD_INT 1
18205: NEG
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PUSH
18211: LD_INT 2
18213: PUSH
18214: LD_INT 0
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: PUSH
18221: LD_INT 2
18223: PUSH
18224: LD_INT 1
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: PUSH
18231: LD_INT 1
18233: NEG
18234: PUSH
18235: LD_INT 1
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: PUSH
18242: LD_INT 2
18244: NEG
18245: PUSH
18246: LD_INT 0
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: LD_INT 2
18255: NEG
18256: PUSH
18257: LD_INT 1
18259: NEG
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: PUSH
18265: LD_INT 2
18267: NEG
18268: PUSH
18269: LD_INT 1
18271: PUSH
18272: EMPTY
18273: LIST
18274: LIST
18275: PUSH
18276: LD_INT 3
18278: NEG
18279: PUSH
18280: LD_INT 0
18282: PUSH
18283: EMPTY
18284: LIST
18285: LIST
18286: PUSH
18287: LD_INT 3
18289: NEG
18290: PUSH
18291: LD_INT 1
18293: NEG
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: LIST
18303: LIST
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: LIST
18310: LIST
18311: LIST
18312: LIST
18313: LIST
18314: LIST
18315: LIST
18316: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18317: LD_ADDR_VAR 0 13
18321: PUSH
18322: LD_INT 0
18324: PUSH
18325: LD_INT 0
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PUSH
18332: LD_INT 0
18334: PUSH
18335: LD_INT 1
18337: NEG
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: PUSH
18343: LD_INT 1
18345: PUSH
18346: LD_INT 0
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: PUSH
18353: LD_INT 1
18355: PUSH
18356: LD_INT 1
18358: PUSH
18359: EMPTY
18360: LIST
18361: LIST
18362: PUSH
18363: LD_INT 0
18365: PUSH
18366: LD_INT 1
18368: PUSH
18369: EMPTY
18370: LIST
18371: LIST
18372: PUSH
18373: LD_INT 1
18375: NEG
18376: PUSH
18377: LD_INT 0
18379: PUSH
18380: EMPTY
18381: LIST
18382: LIST
18383: PUSH
18384: LD_INT 1
18386: NEG
18387: PUSH
18388: LD_INT 1
18390: NEG
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: PUSH
18396: LD_INT 1
18398: NEG
18399: PUSH
18400: LD_INT 2
18402: NEG
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PUSH
18408: LD_INT 2
18410: PUSH
18411: LD_INT 1
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: LD_INT 2
18420: PUSH
18421: LD_INT 2
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: PUSH
18428: LD_INT 1
18430: PUSH
18431: LD_INT 2
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PUSH
18438: LD_INT 2
18440: NEG
18441: PUSH
18442: LD_INT 1
18444: NEG
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: PUSH
18450: LD_INT 2
18452: NEG
18453: PUSH
18454: LD_INT 2
18456: NEG
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: PUSH
18462: LD_INT 2
18464: NEG
18465: PUSH
18466: LD_INT 3
18468: NEG
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: PUSH
18474: LD_INT 3
18476: NEG
18477: PUSH
18478: LD_INT 2
18480: NEG
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: PUSH
18486: LD_INT 3
18488: NEG
18489: PUSH
18490: LD_INT 3
18492: NEG
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18516: LD_ADDR_VAR 0 14
18520: PUSH
18521: LD_INT 0
18523: PUSH
18524: LD_INT 0
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: PUSH
18531: LD_INT 0
18533: PUSH
18534: LD_INT 1
18536: NEG
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: PUSH
18542: LD_INT 1
18544: PUSH
18545: LD_INT 0
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: LD_INT 1
18554: PUSH
18555: LD_INT 1
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: LD_INT 0
18564: PUSH
18565: LD_INT 1
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: PUSH
18572: LD_INT 1
18574: NEG
18575: PUSH
18576: LD_INT 0
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: PUSH
18583: LD_INT 1
18585: NEG
18586: PUSH
18587: LD_INT 1
18589: NEG
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: PUSH
18595: LD_INT 1
18597: NEG
18598: PUSH
18599: LD_INT 2
18601: NEG
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: PUSH
18607: LD_INT 0
18609: PUSH
18610: LD_INT 2
18612: NEG
18613: PUSH
18614: EMPTY
18615: LIST
18616: LIST
18617: PUSH
18618: LD_INT 1
18620: PUSH
18621: LD_INT 1
18623: NEG
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: PUSH
18629: LD_INT 1
18631: PUSH
18632: LD_INT 2
18634: PUSH
18635: EMPTY
18636: LIST
18637: LIST
18638: PUSH
18639: LD_INT 0
18641: PUSH
18642: LD_INT 2
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: PUSH
18649: LD_INT 1
18651: NEG
18652: PUSH
18653: LD_INT 1
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: PUSH
18660: LD_INT 1
18662: NEG
18663: PUSH
18664: LD_INT 3
18666: NEG
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: PUSH
18672: LD_INT 0
18674: PUSH
18675: LD_INT 3
18677: NEG
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PUSH
18683: LD_INT 1
18685: PUSH
18686: LD_INT 2
18688: NEG
18689: PUSH
18690: EMPTY
18691: LIST
18692: LIST
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18712: LD_ADDR_VAR 0 15
18716: PUSH
18717: LD_INT 0
18719: PUSH
18720: LD_INT 0
18722: PUSH
18723: EMPTY
18724: LIST
18725: LIST
18726: PUSH
18727: LD_INT 0
18729: PUSH
18730: LD_INT 1
18732: NEG
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: PUSH
18738: LD_INT 1
18740: PUSH
18741: LD_INT 0
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PUSH
18748: LD_INT 1
18750: PUSH
18751: LD_INT 1
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: PUSH
18758: LD_INT 0
18760: PUSH
18761: LD_INT 1
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: PUSH
18768: LD_INT 1
18770: NEG
18771: PUSH
18772: LD_INT 0
18774: PUSH
18775: EMPTY
18776: LIST
18777: LIST
18778: PUSH
18779: LD_INT 1
18781: NEG
18782: PUSH
18783: LD_INT 1
18785: NEG
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PUSH
18791: LD_INT 1
18793: PUSH
18794: LD_INT 1
18796: NEG
18797: PUSH
18798: EMPTY
18799: LIST
18800: LIST
18801: PUSH
18802: LD_INT 2
18804: PUSH
18805: LD_INT 0
18807: PUSH
18808: EMPTY
18809: LIST
18810: LIST
18811: PUSH
18812: LD_INT 2
18814: PUSH
18815: LD_INT 1
18817: PUSH
18818: EMPTY
18819: LIST
18820: LIST
18821: PUSH
18822: LD_INT 1
18824: NEG
18825: PUSH
18826: LD_INT 1
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: PUSH
18833: LD_INT 2
18835: NEG
18836: PUSH
18837: LD_INT 0
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: PUSH
18844: LD_INT 2
18846: NEG
18847: PUSH
18848: LD_INT 1
18850: NEG
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PUSH
18856: LD_INT 2
18858: PUSH
18859: LD_INT 1
18861: NEG
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: PUSH
18867: LD_INT 3
18869: PUSH
18870: LD_INT 0
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PUSH
18877: LD_INT 3
18879: PUSH
18880: LD_INT 1
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18905: LD_ADDR_VAR 0 16
18909: PUSH
18910: LD_INT 0
18912: PUSH
18913: LD_INT 0
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: PUSH
18920: LD_INT 0
18922: PUSH
18923: LD_INT 1
18925: NEG
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: PUSH
18931: LD_INT 1
18933: PUSH
18934: LD_INT 0
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: PUSH
18941: LD_INT 1
18943: PUSH
18944: LD_INT 1
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: LD_INT 0
18953: PUSH
18954: LD_INT 1
18956: PUSH
18957: EMPTY
18958: LIST
18959: LIST
18960: PUSH
18961: LD_INT 1
18963: NEG
18964: PUSH
18965: LD_INT 0
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: PUSH
18972: LD_INT 1
18974: NEG
18975: PUSH
18976: LD_INT 1
18978: NEG
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: PUSH
18984: LD_INT 1
18986: NEG
18987: PUSH
18988: LD_INT 2
18990: NEG
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: PUSH
18996: LD_INT 2
18998: PUSH
18999: LD_INT 1
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: PUSH
19006: LD_INT 2
19008: PUSH
19009: LD_INT 2
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: PUSH
19016: LD_INT 1
19018: PUSH
19019: LD_INT 2
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: PUSH
19026: LD_INT 2
19028: NEG
19029: PUSH
19030: LD_INT 1
19032: NEG
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 2
19040: NEG
19041: PUSH
19042: LD_INT 2
19044: NEG
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PUSH
19050: LD_INT 3
19052: PUSH
19053: LD_INT 2
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: PUSH
19060: LD_INT 3
19062: PUSH
19063: LD_INT 3
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: PUSH
19070: LD_INT 2
19072: PUSH
19073: LD_INT 3
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19098: LD_ADDR_VAR 0 17
19102: PUSH
19103: LD_INT 0
19105: PUSH
19106: LD_INT 0
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: PUSH
19113: LD_INT 0
19115: PUSH
19116: LD_INT 1
19118: NEG
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PUSH
19124: LD_INT 1
19126: PUSH
19127: LD_INT 0
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: PUSH
19134: LD_INT 1
19136: PUSH
19137: LD_INT 1
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: PUSH
19144: LD_INT 0
19146: PUSH
19147: LD_INT 1
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: PUSH
19154: LD_INT 1
19156: NEG
19157: PUSH
19158: LD_INT 0
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: PUSH
19165: LD_INT 1
19167: NEG
19168: PUSH
19169: LD_INT 1
19171: NEG
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PUSH
19177: LD_INT 1
19179: NEG
19180: PUSH
19181: LD_INT 2
19183: NEG
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: PUSH
19189: LD_INT 0
19191: PUSH
19192: LD_INT 2
19194: NEG
19195: PUSH
19196: EMPTY
19197: LIST
19198: LIST
19199: PUSH
19200: LD_INT 1
19202: PUSH
19203: LD_INT 1
19205: NEG
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: PUSH
19211: LD_INT 2
19213: PUSH
19214: LD_INT 0
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: PUSH
19221: LD_INT 2
19223: PUSH
19224: LD_INT 1
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: PUSH
19231: LD_INT 2
19233: PUSH
19234: LD_INT 2
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: PUSH
19241: LD_INT 1
19243: PUSH
19244: LD_INT 2
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: LD_INT 0
19253: PUSH
19254: LD_INT 2
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PUSH
19261: LD_INT 1
19263: NEG
19264: PUSH
19265: LD_INT 1
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: PUSH
19272: LD_INT 2
19274: NEG
19275: PUSH
19276: LD_INT 0
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: PUSH
19283: LD_INT 2
19285: NEG
19286: PUSH
19287: LD_INT 1
19289: NEG
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: PUSH
19295: LD_INT 2
19297: NEG
19298: PUSH
19299: LD_INT 2
19301: NEG
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: LIST
19311: LIST
19312: LIST
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19328: LD_ADDR_VAR 0 18
19332: PUSH
19333: LD_INT 0
19335: PUSH
19336: LD_INT 0
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: PUSH
19343: LD_INT 0
19345: PUSH
19346: LD_INT 1
19348: NEG
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: PUSH
19354: LD_INT 1
19356: PUSH
19357: LD_INT 0
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: PUSH
19364: LD_INT 1
19366: PUSH
19367: LD_INT 1
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PUSH
19374: LD_INT 0
19376: PUSH
19377: LD_INT 1
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: PUSH
19384: LD_INT 1
19386: NEG
19387: PUSH
19388: LD_INT 0
19390: PUSH
19391: EMPTY
19392: LIST
19393: LIST
19394: PUSH
19395: LD_INT 1
19397: NEG
19398: PUSH
19399: LD_INT 1
19401: NEG
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: PUSH
19407: LD_INT 1
19409: NEG
19410: PUSH
19411: LD_INT 2
19413: NEG
19414: PUSH
19415: EMPTY
19416: LIST
19417: LIST
19418: PUSH
19419: LD_INT 0
19421: PUSH
19422: LD_INT 2
19424: NEG
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: PUSH
19430: LD_INT 1
19432: PUSH
19433: LD_INT 1
19435: NEG
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: PUSH
19441: LD_INT 2
19443: PUSH
19444: LD_INT 0
19446: PUSH
19447: EMPTY
19448: LIST
19449: LIST
19450: PUSH
19451: LD_INT 2
19453: PUSH
19454: LD_INT 1
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: PUSH
19461: LD_INT 2
19463: PUSH
19464: LD_INT 2
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PUSH
19471: LD_INT 1
19473: PUSH
19474: LD_INT 2
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PUSH
19481: LD_INT 0
19483: PUSH
19484: LD_INT 2
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: PUSH
19491: LD_INT 1
19493: NEG
19494: PUSH
19495: LD_INT 1
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: PUSH
19502: LD_INT 2
19504: NEG
19505: PUSH
19506: LD_INT 0
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: PUSH
19513: LD_INT 2
19515: NEG
19516: PUSH
19517: LD_INT 1
19519: NEG
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: PUSH
19525: LD_INT 2
19527: NEG
19528: PUSH
19529: LD_INT 2
19531: NEG
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19558: LD_ADDR_VAR 0 19
19562: PUSH
19563: LD_INT 0
19565: PUSH
19566: LD_INT 0
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: PUSH
19573: LD_INT 0
19575: PUSH
19576: LD_INT 1
19578: NEG
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: PUSH
19584: LD_INT 1
19586: PUSH
19587: LD_INT 0
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: PUSH
19594: LD_INT 1
19596: PUSH
19597: LD_INT 1
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: PUSH
19604: LD_INT 0
19606: PUSH
19607: LD_INT 1
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: PUSH
19614: LD_INT 1
19616: NEG
19617: PUSH
19618: LD_INT 0
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: PUSH
19625: LD_INT 1
19627: NEG
19628: PUSH
19629: LD_INT 1
19631: NEG
19632: PUSH
19633: EMPTY
19634: LIST
19635: LIST
19636: PUSH
19637: LD_INT 1
19639: NEG
19640: PUSH
19641: LD_INT 2
19643: NEG
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: PUSH
19649: LD_INT 0
19651: PUSH
19652: LD_INT 2
19654: NEG
19655: PUSH
19656: EMPTY
19657: LIST
19658: LIST
19659: PUSH
19660: LD_INT 1
19662: PUSH
19663: LD_INT 1
19665: NEG
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: PUSH
19671: LD_INT 2
19673: PUSH
19674: LD_INT 0
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: PUSH
19681: LD_INT 2
19683: PUSH
19684: LD_INT 1
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: PUSH
19691: LD_INT 2
19693: PUSH
19694: LD_INT 2
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PUSH
19701: LD_INT 1
19703: PUSH
19704: LD_INT 2
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: LD_INT 0
19713: PUSH
19714: LD_INT 2
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: LD_INT 1
19723: NEG
19724: PUSH
19725: LD_INT 1
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: PUSH
19732: LD_INT 2
19734: NEG
19735: PUSH
19736: LD_INT 0
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PUSH
19743: LD_INT 2
19745: NEG
19746: PUSH
19747: LD_INT 1
19749: NEG
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: PUSH
19755: LD_INT 2
19757: NEG
19758: PUSH
19759: LD_INT 2
19761: NEG
19762: PUSH
19763: EMPTY
19764: LIST
19765: LIST
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19788: LD_ADDR_VAR 0 20
19792: PUSH
19793: LD_INT 0
19795: PUSH
19796: LD_INT 0
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: LD_INT 0
19805: PUSH
19806: LD_INT 1
19808: NEG
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: PUSH
19814: LD_INT 1
19816: PUSH
19817: LD_INT 0
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: PUSH
19824: LD_INT 1
19826: PUSH
19827: LD_INT 1
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PUSH
19834: LD_INT 0
19836: PUSH
19837: LD_INT 1
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: PUSH
19844: LD_INT 1
19846: NEG
19847: PUSH
19848: LD_INT 0
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: PUSH
19855: LD_INT 1
19857: NEG
19858: PUSH
19859: LD_INT 1
19861: NEG
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: PUSH
19867: LD_INT 1
19869: NEG
19870: PUSH
19871: LD_INT 2
19873: NEG
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: PUSH
19879: LD_INT 0
19881: PUSH
19882: LD_INT 2
19884: NEG
19885: PUSH
19886: EMPTY
19887: LIST
19888: LIST
19889: PUSH
19890: LD_INT 1
19892: PUSH
19893: LD_INT 1
19895: NEG
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: PUSH
19901: LD_INT 2
19903: PUSH
19904: LD_INT 0
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: PUSH
19911: LD_INT 2
19913: PUSH
19914: LD_INT 1
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PUSH
19921: LD_INT 2
19923: PUSH
19924: LD_INT 2
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: PUSH
19931: LD_INT 1
19933: PUSH
19934: LD_INT 2
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: PUSH
19941: LD_INT 0
19943: PUSH
19944: LD_INT 2
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: PUSH
19951: LD_INT 1
19953: NEG
19954: PUSH
19955: LD_INT 1
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: PUSH
19962: LD_INT 2
19964: NEG
19965: PUSH
19966: LD_INT 0
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: PUSH
19973: LD_INT 2
19975: NEG
19976: PUSH
19977: LD_INT 1
19979: NEG
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: PUSH
19985: LD_INT 2
19987: NEG
19988: PUSH
19989: LD_INT 2
19991: NEG
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20018: LD_ADDR_VAR 0 21
20022: PUSH
20023: LD_INT 0
20025: PUSH
20026: LD_INT 0
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: PUSH
20033: LD_INT 0
20035: PUSH
20036: LD_INT 1
20038: NEG
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: PUSH
20044: LD_INT 1
20046: PUSH
20047: LD_INT 0
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: PUSH
20054: LD_INT 1
20056: PUSH
20057: LD_INT 1
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: PUSH
20064: LD_INT 0
20066: PUSH
20067: LD_INT 1
20069: PUSH
20070: EMPTY
20071: LIST
20072: LIST
20073: PUSH
20074: LD_INT 1
20076: NEG
20077: PUSH
20078: LD_INT 0
20080: PUSH
20081: EMPTY
20082: LIST
20083: LIST
20084: PUSH
20085: LD_INT 1
20087: NEG
20088: PUSH
20089: LD_INT 1
20091: NEG
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: LD_INT 1
20099: NEG
20100: PUSH
20101: LD_INT 2
20103: NEG
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: PUSH
20109: LD_INT 0
20111: PUSH
20112: LD_INT 2
20114: NEG
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: PUSH
20120: LD_INT 1
20122: PUSH
20123: LD_INT 1
20125: NEG
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: PUSH
20131: LD_INT 2
20133: PUSH
20134: LD_INT 0
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PUSH
20141: LD_INT 2
20143: PUSH
20144: LD_INT 1
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: PUSH
20151: LD_INT 2
20153: PUSH
20154: LD_INT 2
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: PUSH
20161: LD_INT 1
20163: PUSH
20164: LD_INT 2
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PUSH
20171: LD_INT 0
20173: PUSH
20174: LD_INT 2
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: PUSH
20181: LD_INT 1
20183: NEG
20184: PUSH
20185: LD_INT 1
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: PUSH
20192: LD_INT 2
20194: NEG
20195: PUSH
20196: LD_INT 0
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: PUSH
20203: LD_INT 2
20205: NEG
20206: PUSH
20207: LD_INT 1
20209: NEG
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: PUSH
20215: LD_INT 2
20217: NEG
20218: PUSH
20219: LD_INT 2
20221: NEG
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20248: LD_ADDR_VAR 0 22
20252: PUSH
20253: LD_INT 0
20255: PUSH
20256: LD_INT 0
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: PUSH
20263: LD_INT 0
20265: PUSH
20266: LD_INT 1
20268: NEG
20269: PUSH
20270: EMPTY
20271: LIST
20272: LIST
20273: PUSH
20274: LD_INT 1
20276: PUSH
20277: LD_INT 0
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: PUSH
20284: LD_INT 1
20286: PUSH
20287: LD_INT 1
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: PUSH
20294: LD_INT 0
20296: PUSH
20297: LD_INT 1
20299: PUSH
20300: EMPTY
20301: LIST
20302: LIST
20303: PUSH
20304: LD_INT 1
20306: NEG
20307: PUSH
20308: LD_INT 0
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: PUSH
20315: LD_INT 1
20317: NEG
20318: PUSH
20319: LD_INT 1
20321: NEG
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: PUSH
20327: LD_INT 1
20329: NEG
20330: PUSH
20331: LD_INT 2
20333: NEG
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: PUSH
20339: LD_INT 0
20341: PUSH
20342: LD_INT 2
20344: NEG
20345: PUSH
20346: EMPTY
20347: LIST
20348: LIST
20349: PUSH
20350: LD_INT 1
20352: PUSH
20353: LD_INT 1
20355: NEG
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: PUSH
20361: LD_INT 2
20363: PUSH
20364: LD_INT 0
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: PUSH
20371: LD_INT 2
20373: PUSH
20374: LD_INT 1
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: PUSH
20381: LD_INT 2
20383: PUSH
20384: LD_INT 2
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: PUSH
20391: LD_INT 1
20393: PUSH
20394: LD_INT 2
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: PUSH
20401: LD_INT 0
20403: PUSH
20404: LD_INT 2
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: PUSH
20411: LD_INT 1
20413: NEG
20414: PUSH
20415: LD_INT 1
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: PUSH
20422: LD_INT 2
20424: NEG
20425: PUSH
20426: LD_INT 0
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PUSH
20433: LD_INT 2
20435: NEG
20436: PUSH
20437: LD_INT 1
20439: NEG
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: PUSH
20445: LD_INT 2
20447: NEG
20448: PUSH
20449: LD_INT 2
20451: NEG
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20478: LD_ADDR_VAR 0 23
20482: PUSH
20483: LD_INT 0
20485: PUSH
20486: LD_INT 0
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: PUSH
20493: LD_INT 0
20495: PUSH
20496: LD_INT 1
20498: NEG
20499: PUSH
20500: EMPTY
20501: LIST
20502: LIST
20503: PUSH
20504: LD_INT 1
20506: PUSH
20507: LD_INT 0
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: PUSH
20514: LD_INT 1
20516: PUSH
20517: LD_INT 1
20519: PUSH
20520: EMPTY
20521: LIST
20522: LIST
20523: PUSH
20524: LD_INT 0
20526: PUSH
20527: LD_INT 1
20529: PUSH
20530: EMPTY
20531: LIST
20532: LIST
20533: PUSH
20534: LD_INT 1
20536: NEG
20537: PUSH
20538: LD_INT 0
20540: PUSH
20541: EMPTY
20542: LIST
20543: LIST
20544: PUSH
20545: LD_INT 1
20547: NEG
20548: PUSH
20549: LD_INT 1
20551: NEG
20552: PUSH
20553: EMPTY
20554: LIST
20555: LIST
20556: PUSH
20557: LD_INT 1
20559: NEG
20560: PUSH
20561: LD_INT 2
20563: NEG
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: PUSH
20569: LD_INT 0
20571: PUSH
20572: LD_INT 2
20574: NEG
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: PUSH
20580: LD_INT 1
20582: PUSH
20583: LD_INT 1
20585: NEG
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: PUSH
20591: LD_INT 2
20593: PUSH
20594: LD_INT 0
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: PUSH
20601: LD_INT 2
20603: PUSH
20604: LD_INT 1
20606: PUSH
20607: EMPTY
20608: LIST
20609: LIST
20610: PUSH
20611: LD_INT 2
20613: PUSH
20614: LD_INT 2
20616: PUSH
20617: EMPTY
20618: LIST
20619: LIST
20620: PUSH
20621: LD_INT 1
20623: PUSH
20624: LD_INT 2
20626: PUSH
20627: EMPTY
20628: LIST
20629: LIST
20630: PUSH
20631: LD_INT 0
20633: PUSH
20634: LD_INT 2
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: PUSH
20641: LD_INT 1
20643: NEG
20644: PUSH
20645: LD_INT 1
20647: PUSH
20648: EMPTY
20649: LIST
20650: LIST
20651: PUSH
20652: LD_INT 2
20654: NEG
20655: PUSH
20656: LD_INT 0
20658: PUSH
20659: EMPTY
20660: LIST
20661: LIST
20662: PUSH
20663: LD_INT 2
20665: NEG
20666: PUSH
20667: LD_INT 1
20669: NEG
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: PUSH
20675: LD_INT 2
20677: NEG
20678: PUSH
20679: LD_INT 2
20681: NEG
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: PUSH
20687: LD_INT 2
20689: NEG
20690: PUSH
20691: LD_INT 3
20693: NEG
20694: PUSH
20695: EMPTY
20696: LIST
20697: LIST
20698: PUSH
20699: LD_INT 1
20701: NEG
20702: PUSH
20703: LD_INT 3
20705: NEG
20706: PUSH
20707: EMPTY
20708: LIST
20709: LIST
20710: PUSH
20711: LD_INT 1
20713: PUSH
20714: LD_INT 2
20716: NEG
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: PUSH
20722: LD_INT 2
20724: PUSH
20725: LD_INT 1
20727: NEG
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: PUSH
20733: EMPTY
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20758: LD_ADDR_VAR 0 24
20762: PUSH
20763: LD_INT 0
20765: PUSH
20766: LD_INT 0
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: PUSH
20773: LD_INT 0
20775: PUSH
20776: LD_INT 1
20778: NEG
20779: PUSH
20780: EMPTY
20781: LIST
20782: LIST
20783: PUSH
20784: LD_INT 1
20786: PUSH
20787: LD_INT 0
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: PUSH
20794: LD_INT 1
20796: PUSH
20797: LD_INT 1
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: PUSH
20804: LD_INT 0
20806: PUSH
20807: LD_INT 1
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: PUSH
20814: LD_INT 1
20816: NEG
20817: PUSH
20818: LD_INT 0
20820: PUSH
20821: EMPTY
20822: LIST
20823: LIST
20824: PUSH
20825: LD_INT 1
20827: NEG
20828: PUSH
20829: LD_INT 1
20831: NEG
20832: PUSH
20833: EMPTY
20834: LIST
20835: LIST
20836: PUSH
20837: LD_INT 1
20839: NEG
20840: PUSH
20841: LD_INT 2
20843: NEG
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: PUSH
20849: LD_INT 0
20851: PUSH
20852: LD_INT 2
20854: NEG
20855: PUSH
20856: EMPTY
20857: LIST
20858: LIST
20859: PUSH
20860: LD_INT 1
20862: PUSH
20863: LD_INT 1
20865: NEG
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: PUSH
20871: LD_INT 2
20873: PUSH
20874: LD_INT 0
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: PUSH
20881: LD_INT 2
20883: PUSH
20884: LD_INT 1
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: PUSH
20891: LD_INT 2
20893: PUSH
20894: LD_INT 2
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: PUSH
20901: LD_INT 1
20903: PUSH
20904: LD_INT 2
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: PUSH
20911: LD_INT 0
20913: PUSH
20914: LD_INT 2
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: PUSH
20921: LD_INT 1
20923: NEG
20924: PUSH
20925: LD_INT 1
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: PUSH
20932: LD_INT 2
20934: NEG
20935: PUSH
20936: LD_INT 0
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: PUSH
20943: LD_INT 2
20945: NEG
20946: PUSH
20947: LD_INT 1
20949: NEG
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: PUSH
20955: LD_INT 2
20957: NEG
20958: PUSH
20959: LD_INT 2
20961: NEG
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PUSH
20967: LD_INT 1
20969: PUSH
20970: LD_INT 2
20972: NEG
20973: PUSH
20974: EMPTY
20975: LIST
20976: LIST
20977: PUSH
20978: LD_INT 2
20980: PUSH
20981: LD_INT 1
20983: NEG
20984: PUSH
20985: EMPTY
20986: LIST
20987: LIST
20988: PUSH
20989: LD_INT 3
20991: PUSH
20992: LD_INT 1
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: PUSH
20999: LD_INT 3
21001: PUSH
21002: LD_INT 2
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: PUSH
21009: EMPTY
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21034: LD_ADDR_VAR 0 25
21038: PUSH
21039: LD_INT 0
21041: PUSH
21042: LD_INT 0
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: PUSH
21049: LD_INT 0
21051: PUSH
21052: LD_INT 1
21054: NEG
21055: PUSH
21056: EMPTY
21057: LIST
21058: LIST
21059: PUSH
21060: LD_INT 1
21062: PUSH
21063: LD_INT 0
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: PUSH
21070: LD_INT 1
21072: PUSH
21073: LD_INT 1
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: PUSH
21080: LD_INT 0
21082: PUSH
21083: LD_INT 1
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: PUSH
21090: LD_INT 1
21092: NEG
21093: PUSH
21094: LD_INT 0
21096: PUSH
21097: EMPTY
21098: LIST
21099: LIST
21100: PUSH
21101: LD_INT 1
21103: NEG
21104: PUSH
21105: LD_INT 1
21107: NEG
21108: PUSH
21109: EMPTY
21110: LIST
21111: LIST
21112: PUSH
21113: LD_INT 1
21115: NEG
21116: PUSH
21117: LD_INT 2
21119: NEG
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: PUSH
21125: LD_INT 0
21127: PUSH
21128: LD_INT 2
21130: NEG
21131: PUSH
21132: EMPTY
21133: LIST
21134: LIST
21135: PUSH
21136: LD_INT 1
21138: PUSH
21139: LD_INT 1
21141: NEG
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: PUSH
21147: LD_INT 2
21149: PUSH
21150: LD_INT 0
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: PUSH
21157: LD_INT 2
21159: PUSH
21160: LD_INT 1
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: PUSH
21167: LD_INT 2
21169: PUSH
21170: LD_INT 2
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: PUSH
21177: LD_INT 1
21179: PUSH
21180: LD_INT 2
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: PUSH
21187: LD_INT 0
21189: PUSH
21190: LD_INT 2
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: PUSH
21197: LD_INT 1
21199: NEG
21200: PUSH
21201: LD_INT 1
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: PUSH
21208: LD_INT 2
21210: NEG
21211: PUSH
21212: LD_INT 0
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: PUSH
21219: LD_INT 2
21221: NEG
21222: PUSH
21223: LD_INT 1
21225: NEG
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: PUSH
21231: LD_INT 2
21233: NEG
21234: PUSH
21235: LD_INT 2
21237: NEG
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: PUSH
21243: LD_INT 3
21245: PUSH
21246: LD_INT 1
21248: PUSH
21249: EMPTY
21250: LIST
21251: LIST
21252: PUSH
21253: LD_INT 3
21255: PUSH
21256: LD_INT 2
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: PUSH
21263: LD_INT 2
21265: PUSH
21266: LD_INT 3
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: PUSH
21273: LD_INT 1
21275: PUSH
21276: LD_INT 3
21278: PUSH
21279: EMPTY
21280: LIST
21281: LIST
21282: PUSH
21283: EMPTY
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21308: LD_ADDR_VAR 0 26
21312: PUSH
21313: LD_INT 0
21315: PUSH
21316: LD_INT 0
21318: PUSH
21319: EMPTY
21320: LIST
21321: LIST
21322: PUSH
21323: LD_INT 0
21325: PUSH
21326: LD_INT 1
21328: NEG
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: PUSH
21334: LD_INT 1
21336: PUSH
21337: LD_INT 0
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PUSH
21344: LD_INT 1
21346: PUSH
21347: LD_INT 1
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: PUSH
21354: LD_INT 0
21356: PUSH
21357: LD_INT 1
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: PUSH
21364: LD_INT 1
21366: NEG
21367: PUSH
21368: LD_INT 0
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PUSH
21375: LD_INT 1
21377: NEG
21378: PUSH
21379: LD_INT 1
21381: NEG
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: LD_INT 1
21389: NEG
21390: PUSH
21391: LD_INT 2
21393: NEG
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: LD_INT 0
21401: PUSH
21402: LD_INT 2
21404: NEG
21405: PUSH
21406: EMPTY
21407: LIST
21408: LIST
21409: PUSH
21410: LD_INT 1
21412: PUSH
21413: LD_INT 1
21415: NEG
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: PUSH
21421: LD_INT 2
21423: PUSH
21424: LD_INT 0
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: PUSH
21431: LD_INT 2
21433: PUSH
21434: LD_INT 1
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: PUSH
21441: LD_INT 2
21443: PUSH
21444: LD_INT 2
21446: PUSH
21447: EMPTY
21448: LIST
21449: LIST
21450: PUSH
21451: LD_INT 1
21453: PUSH
21454: LD_INT 2
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: PUSH
21461: LD_INT 0
21463: PUSH
21464: LD_INT 2
21466: PUSH
21467: EMPTY
21468: LIST
21469: LIST
21470: PUSH
21471: LD_INT 1
21473: NEG
21474: PUSH
21475: LD_INT 1
21477: PUSH
21478: EMPTY
21479: LIST
21480: LIST
21481: PUSH
21482: LD_INT 2
21484: NEG
21485: PUSH
21486: LD_INT 0
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: PUSH
21493: LD_INT 2
21495: NEG
21496: PUSH
21497: LD_INT 1
21499: NEG
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: PUSH
21505: LD_INT 2
21507: NEG
21508: PUSH
21509: LD_INT 2
21511: NEG
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: PUSH
21517: LD_INT 2
21519: PUSH
21520: LD_INT 3
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: PUSH
21527: LD_INT 1
21529: PUSH
21530: LD_INT 3
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: PUSH
21537: LD_INT 1
21539: NEG
21540: PUSH
21541: LD_INT 2
21543: PUSH
21544: EMPTY
21545: LIST
21546: LIST
21547: PUSH
21548: LD_INT 2
21550: NEG
21551: PUSH
21552: LD_INT 1
21554: PUSH
21555: EMPTY
21556: LIST
21557: LIST
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21584: LD_ADDR_VAR 0 27
21588: PUSH
21589: LD_INT 0
21591: PUSH
21592: LD_INT 0
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: PUSH
21599: LD_INT 0
21601: PUSH
21602: LD_INT 1
21604: NEG
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: PUSH
21610: LD_INT 1
21612: PUSH
21613: LD_INT 0
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: PUSH
21620: LD_INT 1
21622: PUSH
21623: LD_INT 1
21625: PUSH
21626: EMPTY
21627: LIST
21628: LIST
21629: PUSH
21630: LD_INT 0
21632: PUSH
21633: LD_INT 1
21635: PUSH
21636: EMPTY
21637: LIST
21638: LIST
21639: PUSH
21640: LD_INT 1
21642: NEG
21643: PUSH
21644: LD_INT 0
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: PUSH
21651: LD_INT 1
21653: NEG
21654: PUSH
21655: LD_INT 1
21657: NEG
21658: PUSH
21659: EMPTY
21660: LIST
21661: LIST
21662: PUSH
21663: LD_INT 1
21665: NEG
21666: PUSH
21667: LD_INT 2
21669: NEG
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: PUSH
21675: LD_INT 0
21677: PUSH
21678: LD_INT 2
21680: NEG
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: PUSH
21686: LD_INT 1
21688: PUSH
21689: LD_INT 1
21691: NEG
21692: PUSH
21693: EMPTY
21694: LIST
21695: LIST
21696: PUSH
21697: LD_INT 2
21699: PUSH
21700: LD_INT 0
21702: PUSH
21703: EMPTY
21704: LIST
21705: LIST
21706: PUSH
21707: LD_INT 2
21709: PUSH
21710: LD_INT 1
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: PUSH
21717: LD_INT 2
21719: PUSH
21720: LD_INT 2
21722: PUSH
21723: EMPTY
21724: LIST
21725: LIST
21726: PUSH
21727: LD_INT 1
21729: PUSH
21730: LD_INT 2
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: PUSH
21737: LD_INT 0
21739: PUSH
21740: LD_INT 2
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: PUSH
21747: LD_INT 1
21749: NEG
21750: PUSH
21751: LD_INT 1
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: PUSH
21758: LD_INT 2
21760: NEG
21761: PUSH
21762: LD_INT 0
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: PUSH
21769: LD_INT 2
21771: NEG
21772: PUSH
21773: LD_INT 1
21775: NEG
21776: PUSH
21777: EMPTY
21778: LIST
21779: LIST
21780: PUSH
21781: LD_INT 2
21783: NEG
21784: PUSH
21785: LD_INT 2
21787: NEG
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: PUSH
21793: LD_INT 1
21795: NEG
21796: PUSH
21797: LD_INT 2
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PUSH
21804: LD_INT 2
21806: NEG
21807: PUSH
21808: LD_INT 1
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PUSH
21815: LD_INT 3
21817: NEG
21818: PUSH
21819: LD_INT 1
21821: NEG
21822: PUSH
21823: EMPTY
21824: LIST
21825: LIST
21826: PUSH
21827: LD_INT 3
21829: NEG
21830: PUSH
21831: LD_INT 2
21833: NEG
21834: PUSH
21835: EMPTY
21836: LIST
21837: LIST
21838: PUSH
21839: EMPTY
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21864: LD_ADDR_VAR 0 28
21868: PUSH
21869: LD_INT 0
21871: PUSH
21872: LD_INT 0
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: PUSH
21879: LD_INT 0
21881: PUSH
21882: LD_INT 1
21884: NEG
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: LD_INT 1
21892: PUSH
21893: LD_INT 0
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: PUSH
21900: LD_INT 1
21902: PUSH
21903: LD_INT 1
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: PUSH
21910: LD_INT 0
21912: PUSH
21913: LD_INT 1
21915: PUSH
21916: EMPTY
21917: LIST
21918: LIST
21919: PUSH
21920: LD_INT 1
21922: NEG
21923: PUSH
21924: LD_INT 0
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: PUSH
21931: LD_INT 1
21933: NEG
21934: PUSH
21935: LD_INT 1
21937: NEG
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: PUSH
21943: LD_INT 1
21945: NEG
21946: PUSH
21947: LD_INT 2
21949: NEG
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: PUSH
21955: LD_INT 0
21957: PUSH
21958: LD_INT 2
21960: NEG
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: PUSH
21966: LD_INT 1
21968: PUSH
21969: LD_INT 1
21971: NEG
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: LD_INT 2
21979: PUSH
21980: LD_INT 0
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 2
21989: PUSH
21990: LD_INT 1
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PUSH
21997: LD_INT 2
21999: PUSH
22000: LD_INT 2
22002: PUSH
22003: EMPTY
22004: LIST
22005: LIST
22006: PUSH
22007: LD_INT 1
22009: PUSH
22010: LD_INT 2
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: PUSH
22017: LD_INT 0
22019: PUSH
22020: LD_INT 2
22022: PUSH
22023: EMPTY
22024: LIST
22025: LIST
22026: PUSH
22027: LD_INT 1
22029: NEG
22030: PUSH
22031: LD_INT 1
22033: PUSH
22034: EMPTY
22035: LIST
22036: LIST
22037: PUSH
22038: LD_INT 2
22040: NEG
22041: PUSH
22042: LD_INT 0
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: PUSH
22049: LD_INT 2
22051: NEG
22052: PUSH
22053: LD_INT 1
22055: NEG
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: PUSH
22061: LD_INT 2
22063: NEG
22064: PUSH
22065: LD_INT 2
22067: NEG
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: PUSH
22073: LD_INT 2
22075: NEG
22076: PUSH
22077: LD_INT 3
22079: NEG
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: PUSH
22085: LD_INT 1
22087: NEG
22088: PUSH
22089: LD_INT 3
22091: NEG
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: PUSH
22097: LD_INT 3
22099: NEG
22100: PUSH
22101: LD_INT 1
22103: NEG
22104: PUSH
22105: EMPTY
22106: LIST
22107: LIST
22108: PUSH
22109: LD_INT 3
22111: NEG
22112: PUSH
22113: LD_INT 2
22115: NEG
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22146: LD_ADDR_VAR 0 29
22150: PUSH
22151: LD_INT 0
22153: PUSH
22154: LD_INT 0
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: PUSH
22161: LD_INT 0
22163: PUSH
22164: LD_INT 1
22166: NEG
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: PUSH
22172: LD_INT 1
22174: PUSH
22175: LD_INT 0
22177: PUSH
22178: EMPTY
22179: LIST
22180: LIST
22181: PUSH
22182: LD_INT 1
22184: PUSH
22185: LD_INT 1
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: PUSH
22192: LD_INT 0
22194: PUSH
22195: LD_INT 1
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: PUSH
22202: LD_INT 1
22204: NEG
22205: PUSH
22206: LD_INT 0
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: PUSH
22213: LD_INT 1
22215: NEG
22216: PUSH
22217: LD_INT 1
22219: NEG
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: PUSH
22225: LD_INT 1
22227: NEG
22228: PUSH
22229: LD_INT 2
22231: NEG
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: PUSH
22237: LD_INT 0
22239: PUSH
22240: LD_INT 2
22242: NEG
22243: PUSH
22244: EMPTY
22245: LIST
22246: LIST
22247: PUSH
22248: LD_INT 1
22250: PUSH
22251: LD_INT 1
22253: NEG
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: PUSH
22259: LD_INT 2
22261: PUSH
22262: LD_INT 0
22264: PUSH
22265: EMPTY
22266: LIST
22267: LIST
22268: PUSH
22269: LD_INT 2
22271: PUSH
22272: LD_INT 1
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: PUSH
22279: LD_INT 1
22281: PUSH
22282: LD_INT 2
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PUSH
22289: LD_INT 0
22291: PUSH
22292: LD_INT 2
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: PUSH
22299: LD_INT 1
22301: NEG
22302: PUSH
22303: LD_INT 1
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PUSH
22310: LD_INT 2
22312: NEG
22313: PUSH
22314: LD_INT 1
22316: NEG
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PUSH
22322: LD_INT 2
22324: NEG
22325: PUSH
22326: LD_INT 2
22328: NEG
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: PUSH
22334: LD_INT 2
22336: NEG
22337: PUSH
22338: LD_INT 3
22340: NEG
22341: PUSH
22342: EMPTY
22343: LIST
22344: LIST
22345: PUSH
22346: LD_INT 2
22348: PUSH
22349: LD_INT 1
22351: NEG
22352: PUSH
22353: EMPTY
22354: LIST
22355: LIST
22356: PUSH
22357: LD_INT 3
22359: PUSH
22360: LD_INT 1
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: PUSH
22367: LD_INT 1
22369: PUSH
22370: LD_INT 3
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: PUSH
22377: LD_INT 1
22379: NEG
22380: PUSH
22381: LD_INT 2
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: PUSH
22388: LD_INT 3
22390: NEG
22391: PUSH
22392: LD_INT 2
22394: NEG
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22425: LD_ADDR_VAR 0 30
22429: PUSH
22430: LD_INT 0
22432: PUSH
22433: LD_INT 0
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PUSH
22440: LD_INT 0
22442: PUSH
22443: LD_INT 1
22445: NEG
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: PUSH
22451: LD_INT 1
22453: PUSH
22454: LD_INT 0
22456: PUSH
22457: EMPTY
22458: LIST
22459: LIST
22460: PUSH
22461: LD_INT 1
22463: PUSH
22464: LD_INT 1
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: PUSH
22471: LD_INT 0
22473: PUSH
22474: LD_INT 1
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: PUSH
22481: LD_INT 1
22483: NEG
22484: PUSH
22485: LD_INT 0
22487: PUSH
22488: EMPTY
22489: LIST
22490: LIST
22491: PUSH
22492: LD_INT 1
22494: NEG
22495: PUSH
22496: LD_INT 1
22498: NEG
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: PUSH
22504: LD_INT 1
22506: NEG
22507: PUSH
22508: LD_INT 2
22510: NEG
22511: PUSH
22512: EMPTY
22513: LIST
22514: LIST
22515: PUSH
22516: LD_INT 0
22518: PUSH
22519: LD_INT 2
22521: NEG
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: PUSH
22527: LD_INT 1
22529: PUSH
22530: LD_INT 1
22532: NEG
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: PUSH
22538: LD_INT 2
22540: PUSH
22541: LD_INT 0
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PUSH
22548: LD_INT 2
22550: PUSH
22551: LD_INT 1
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: PUSH
22558: LD_INT 2
22560: PUSH
22561: LD_INT 2
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: PUSH
22568: LD_INT 1
22570: PUSH
22571: LD_INT 2
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 1
22580: NEG
22581: PUSH
22582: LD_INT 1
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: PUSH
22589: LD_INT 2
22591: NEG
22592: PUSH
22593: LD_INT 0
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: PUSH
22600: LD_INT 2
22602: NEG
22603: PUSH
22604: LD_INT 1
22606: NEG
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: PUSH
22612: LD_INT 1
22614: NEG
22615: PUSH
22616: LD_INT 3
22618: NEG
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: PUSH
22624: LD_INT 1
22626: PUSH
22627: LD_INT 2
22629: NEG
22630: PUSH
22631: EMPTY
22632: LIST
22633: LIST
22634: PUSH
22635: LD_INT 3
22637: PUSH
22638: LD_INT 2
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: PUSH
22645: LD_INT 2
22647: PUSH
22648: LD_INT 3
22650: PUSH
22651: EMPTY
22652: LIST
22653: LIST
22654: PUSH
22655: LD_INT 2
22657: NEG
22658: PUSH
22659: LD_INT 1
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: PUSH
22666: LD_INT 3
22668: NEG
22669: PUSH
22670: LD_INT 1
22672: NEG
22673: PUSH
22674: EMPTY
22675: LIST
22676: LIST
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22703: LD_ADDR_VAR 0 31
22707: PUSH
22708: LD_INT 0
22710: PUSH
22711: LD_INT 0
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PUSH
22718: LD_INT 0
22720: PUSH
22721: LD_INT 1
22723: NEG
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: PUSH
22729: LD_INT 1
22731: PUSH
22732: LD_INT 0
22734: PUSH
22735: EMPTY
22736: LIST
22737: LIST
22738: PUSH
22739: LD_INT 1
22741: PUSH
22742: LD_INT 1
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: PUSH
22749: LD_INT 0
22751: PUSH
22752: LD_INT 1
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: PUSH
22759: LD_INT 1
22761: NEG
22762: PUSH
22763: LD_INT 0
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: PUSH
22770: LD_INT 1
22772: NEG
22773: PUSH
22774: LD_INT 1
22776: NEG
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: PUSH
22782: LD_INT 1
22784: NEG
22785: PUSH
22786: LD_INT 2
22788: NEG
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: PUSH
22794: LD_INT 1
22796: PUSH
22797: LD_INT 1
22799: NEG
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: PUSH
22805: LD_INT 2
22807: PUSH
22808: LD_INT 0
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: PUSH
22815: LD_INT 2
22817: PUSH
22818: LD_INT 1
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: PUSH
22825: LD_INT 2
22827: PUSH
22828: LD_INT 2
22830: PUSH
22831: EMPTY
22832: LIST
22833: LIST
22834: PUSH
22835: LD_INT 1
22837: PUSH
22838: LD_INT 2
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: PUSH
22845: LD_INT 0
22847: PUSH
22848: LD_INT 2
22850: PUSH
22851: EMPTY
22852: LIST
22853: LIST
22854: PUSH
22855: LD_INT 1
22857: NEG
22858: PUSH
22859: LD_INT 1
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: PUSH
22866: LD_INT 2
22868: NEG
22869: PUSH
22870: LD_INT 1
22872: NEG
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PUSH
22878: LD_INT 2
22880: NEG
22881: PUSH
22882: LD_INT 2
22884: NEG
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: PUSH
22890: LD_INT 2
22892: NEG
22893: PUSH
22894: LD_INT 3
22896: NEG
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: PUSH
22902: LD_INT 2
22904: PUSH
22905: LD_INT 1
22907: NEG
22908: PUSH
22909: EMPTY
22910: LIST
22911: LIST
22912: PUSH
22913: LD_INT 3
22915: PUSH
22916: LD_INT 1
22918: PUSH
22919: EMPTY
22920: LIST
22921: LIST
22922: PUSH
22923: LD_INT 1
22925: PUSH
22926: LD_INT 3
22928: PUSH
22929: EMPTY
22930: LIST
22931: LIST
22932: PUSH
22933: LD_INT 1
22935: NEG
22936: PUSH
22937: LD_INT 2
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 3
22946: NEG
22947: PUSH
22948: LD_INT 2
22950: NEG
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22981: LD_ADDR_VAR 0 32
22985: PUSH
22986: LD_INT 0
22988: PUSH
22989: LD_INT 0
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: LD_INT 0
22998: PUSH
22999: LD_INT 1
23001: NEG
23002: PUSH
23003: EMPTY
23004: LIST
23005: LIST
23006: PUSH
23007: LD_INT 1
23009: PUSH
23010: LD_INT 0
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: PUSH
23017: LD_INT 1
23019: PUSH
23020: LD_INT 1
23022: PUSH
23023: EMPTY
23024: LIST
23025: LIST
23026: PUSH
23027: LD_INT 0
23029: PUSH
23030: LD_INT 1
23032: PUSH
23033: EMPTY
23034: LIST
23035: LIST
23036: PUSH
23037: LD_INT 1
23039: NEG
23040: PUSH
23041: LD_INT 0
23043: PUSH
23044: EMPTY
23045: LIST
23046: LIST
23047: PUSH
23048: LD_INT 1
23050: NEG
23051: PUSH
23052: LD_INT 1
23054: NEG
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PUSH
23060: LD_INT 1
23062: NEG
23063: PUSH
23064: LD_INT 2
23066: NEG
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: PUSH
23072: LD_INT 0
23074: PUSH
23075: LD_INT 2
23077: NEG
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: PUSH
23083: LD_INT 1
23085: PUSH
23086: LD_INT 1
23088: NEG
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: PUSH
23094: LD_INT 2
23096: PUSH
23097: LD_INT 1
23099: PUSH
23100: EMPTY
23101: LIST
23102: LIST
23103: PUSH
23104: LD_INT 2
23106: PUSH
23107: LD_INT 2
23109: PUSH
23110: EMPTY
23111: LIST
23112: LIST
23113: PUSH
23114: LD_INT 1
23116: PUSH
23117: LD_INT 2
23119: PUSH
23120: EMPTY
23121: LIST
23122: LIST
23123: PUSH
23124: LD_INT 0
23126: PUSH
23127: LD_INT 2
23129: PUSH
23130: EMPTY
23131: LIST
23132: LIST
23133: PUSH
23134: LD_INT 1
23136: NEG
23137: PUSH
23138: LD_INT 1
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: PUSH
23145: LD_INT 2
23147: NEG
23148: PUSH
23149: LD_INT 0
23151: PUSH
23152: EMPTY
23153: LIST
23154: LIST
23155: PUSH
23156: LD_INT 2
23158: NEG
23159: PUSH
23160: LD_INT 1
23162: NEG
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: PUSH
23168: LD_INT 1
23170: NEG
23171: PUSH
23172: LD_INT 3
23174: NEG
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: PUSH
23180: LD_INT 1
23182: PUSH
23183: LD_INT 2
23185: NEG
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PUSH
23191: LD_INT 3
23193: PUSH
23194: LD_INT 2
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: PUSH
23201: LD_INT 2
23203: PUSH
23204: LD_INT 3
23206: PUSH
23207: EMPTY
23208: LIST
23209: LIST
23210: PUSH
23211: LD_INT 2
23213: NEG
23214: PUSH
23215: LD_INT 1
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: PUSH
23222: LD_INT 3
23224: NEG
23225: PUSH
23226: LD_INT 1
23228: NEG
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23259: LD_ADDR_VAR 0 33
23263: PUSH
23264: LD_INT 0
23266: PUSH
23267: LD_INT 0
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: PUSH
23274: LD_INT 0
23276: PUSH
23277: LD_INT 1
23279: NEG
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: PUSH
23285: LD_INT 1
23287: PUSH
23288: LD_INT 0
23290: PUSH
23291: EMPTY
23292: LIST
23293: LIST
23294: PUSH
23295: LD_INT 1
23297: PUSH
23298: LD_INT 1
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: PUSH
23305: LD_INT 0
23307: PUSH
23308: LD_INT 1
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: PUSH
23315: LD_INT 1
23317: NEG
23318: PUSH
23319: LD_INT 0
23321: PUSH
23322: EMPTY
23323: LIST
23324: LIST
23325: PUSH
23326: LD_INT 1
23328: NEG
23329: PUSH
23330: LD_INT 1
23332: NEG
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: PUSH
23338: LD_INT 1
23340: NEG
23341: PUSH
23342: LD_INT 2
23344: NEG
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: PUSH
23350: LD_INT 1
23352: PUSH
23353: LD_INT 1
23355: NEG
23356: PUSH
23357: EMPTY
23358: LIST
23359: LIST
23360: PUSH
23361: LD_INT 2
23363: PUSH
23364: LD_INT 0
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: PUSH
23371: LD_INT 2
23373: PUSH
23374: LD_INT 1
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: PUSH
23381: LD_INT 1
23383: PUSH
23384: LD_INT 2
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: PUSH
23391: LD_INT 0
23393: PUSH
23394: LD_INT 2
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: PUSH
23401: LD_INT 1
23403: NEG
23404: PUSH
23405: LD_INT 1
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: PUSH
23412: LD_INT 2
23414: NEG
23415: PUSH
23416: LD_INT 0
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: PUSH
23423: LD_INT 2
23425: NEG
23426: PUSH
23427: LD_INT 1
23429: NEG
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: PUSH
23435: LD_INT 2
23437: NEG
23438: PUSH
23439: LD_INT 2
23441: NEG
23442: PUSH
23443: EMPTY
23444: LIST
23445: LIST
23446: PUSH
23447: LD_INT 2
23449: NEG
23450: PUSH
23451: LD_INT 3
23453: NEG
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: PUSH
23459: LD_INT 2
23461: PUSH
23462: LD_INT 1
23464: NEG
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: PUSH
23470: LD_INT 3
23472: PUSH
23473: LD_INT 1
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: PUSH
23480: LD_INT 1
23482: PUSH
23483: LD_INT 3
23485: PUSH
23486: EMPTY
23487: LIST
23488: LIST
23489: PUSH
23490: LD_INT 1
23492: NEG
23493: PUSH
23494: LD_INT 2
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: PUSH
23501: LD_INT 3
23503: NEG
23504: PUSH
23505: LD_INT 2
23507: NEG
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: PUSH
23513: EMPTY
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23538: LD_ADDR_VAR 0 34
23542: PUSH
23543: LD_INT 0
23545: PUSH
23546: LD_INT 0
23548: PUSH
23549: EMPTY
23550: LIST
23551: LIST
23552: PUSH
23553: LD_INT 0
23555: PUSH
23556: LD_INT 1
23558: NEG
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: PUSH
23564: LD_INT 1
23566: PUSH
23567: LD_INT 0
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: PUSH
23574: LD_INT 1
23576: PUSH
23577: LD_INT 1
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: PUSH
23584: LD_INT 0
23586: PUSH
23587: LD_INT 1
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: PUSH
23594: LD_INT 1
23596: NEG
23597: PUSH
23598: LD_INT 0
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: PUSH
23605: LD_INT 1
23607: NEG
23608: PUSH
23609: LD_INT 1
23611: NEG
23612: PUSH
23613: EMPTY
23614: LIST
23615: LIST
23616: PUSH
23617: LD_INT 1
23619: NEG
23620: PUSH
23621: LD_INT 2
23623: NEG
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: PUSH
23629: LD_INT 0
23631: PUSH
23632: LD_INT 2
23634: NEG
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: PUSH
23640: LD_INT 1
23642: PUSH
23643: LD_INT 1
23645: NEG
23646: PUSH
23647: EMPTY
23648: LIST
23649: LIST
23650: PUSH
23651: LD_INT 2
23653: PUSH
23654: LD_INT 1
23656: PUSH
23657: EMPTY
23658: LIST
23659: LIST
23660: PUSH
23661: LD_INT 2
23663: PUSH
23664: LD_INT 2
23666: PUSH
23667: EMPTY
23668: LIST
23669: LIST
23670: PUSH
23671: LD_INT 1
23673: PUSH
23674: LD_INT 2
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: PUSH
23681: LD_INT 1
23683: NEG
23684: PUSH
23685: LD_INT 1
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: PUSH
23692: LD_INT 2
23694: NEG
23695: PUSH
23696: LD_INT 0
23698: PUSH
23699: EMPTY
23700: LIST
23701: LIST
23702: PUSH
23703: LD_INT 2
23705: NEG
23706: PUSH
23707: LD_INT 1
23709: NEG
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: PUSH
23715: LD_INT 2
23717: NEG
23718: PUSH
23719: LD_INT 2
23721: NEG
23722: PUSH
23723: EMPTY
23724: LIST
23725: LIST
23726: PUSH
23727: LD_INT 1
23729: NEG
23730: PUSH
23731: LD_INT 3
23733: NEG
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: PUSH
23739: LD_INT 1
23741: PUSH
23742: LD_INT 2
23744: NEG
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: PUSH
23750: LD_INT 3
23752: PUSH
23753: LD_INT 2
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: PUSH
23760: LD_INT 2
23762: PUSH
23763: LD_INT 3
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: PUSH
23770: LD_INT 2
23772: NEG
23773: PUSH
23774: LD_INT 1
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: PUSH
23781: LD_INT 3
23783: NEG
23784: PUSH
23785: LD_INT 1
23787: NEG
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23818: LD_ADDR_VAR 0 35
23822: PUSH
23823: LD_INT 0
23825: PUSH
23826: LD_INT 0
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 0
23835: PUSH
23836: LD_INT 1
23838: NEG
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 1
23846: PUSH
23847: LD_INT 0
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: PUSH
23854: LD_INT 1
23856: PUSH
23857: LD_INT 1
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: PUSH
23864: LD_INT 0
23866: PUSH
23867: LD_INT 1
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PUSH
23874: LD_INT 1
23876: NEG
23877: PUSH
23878: LD_INT 0
23880: PUSH
23881: EMPTY
23882: LIST
23883: LIST
23884: PUSH
23885: LD_INT 1
23887: NEG
23888: PUSH
23889: LD_INT 1
23891: NEG
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: PUSH
23897: LD_INT 2
23899: PUSH
23900: LD_INT 1
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: PUSH
23907: LD_INT 2
23909: NEG
23910: PUSH
23911: LD_INT 1
23913: NEG
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: PUSH
23919: EMPTY
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23930: LD_ADDR_VAR 0 36
23934: PUSH
23935: LD_INT 0
23937: PUSH
23938: LD_INT 0
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PUSH
23945: LD_INT 0
23947: PUSH
23948: LD_INT 1
23950: NEG
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PUSH
23956: LD_INT 1
23958: PUSH
23959: LD_INT 0
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: PUSH
23966: LD_INT 1
23968: PUSH
23969: LD_INT 1
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: PUSH
23976: LD_INT 0
23978: PUSH
23979: LD_INT 1
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: PUSH
23986: LD_INT 1
23988: NEG
23989: PUSH
23990: LD_INT 0
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PUSH
23997: LD_INT 1
23999: NEG
24000: PUSH
24001: LD_INT 1
24003: NEG
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: PUSH
24009: LD_INT 1
24011: NEG
24012: PUSH
24013: LD_INT 2
24015: NEG
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: PUSH
24021: LD_INT 1
24023: PUSH
24024: LD_INT 2
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24042: LD_ADDR_VAR 0 37
24046: PUSH
24047: LD_INT 0
24049: PUSH
24050: LD_INT 0
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: PUSH
24057: LD_INT 0
24059: PUSH
24060: LD_INT 1
24062: NEG
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 1
24070: PUSH
24071: LD_INT 0
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 1
24080: PUSH
24081: LD_INT 1
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PUSH
24088: LD_INT 0
24090: PUSH
24091: LD_INT 1
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: PUSH
24098: LD_INT 1
24100: NEG
24101: PUSH
24102: LD_INT 0
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: PUSH
24109: LD_INT 1
24111: NEG
24112: PUSH
24113: LD_INT 1
24115: NEG
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: PUSH
24121: LD_INT 1
24123: PUSH
24124: LD_INT 1
24126: NEG
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: PUSH
24132: LD_INT 1
24134: NEG
24135: PUSH
24136: LD_INT 1
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24154: LD_ADDR_VAR 0 38
24158: PUSH
24159: LD_INT 0
24161: PUSH
24162: LD_INT 0
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 0
24171: PUSH
24172: LD_INT 1
24174: NEG
24175: PUSH
24176: EMPTY
24177: LIST
24178: LIST
24179: PUSH
24180: LD_INT 1
24182: PUSH
24183: LD_INT 0
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PUSH
24190: LD_INT 1
24192: PUSH
24193: LD_INT 1
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: PUSH
24200: LD_INT 0
24202: PUSH
24203: LD_INT 1
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: PUSH
24210: LD_INT 1
24212: NEG
24213: PUSH
24214: LD_INT 0
24216: PUSH
24217: EMPTY
24218: LIST
24219: LIST
24220: PUSH
24221: LD_INT 1
24223: NEG
24224: PUSH
24225: LD_INT 1
24227: NEG
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 2
24235: PUSH
24236: LD_INT 1
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PUSH
24243: LD_INT 2
24245: NEG
24246: PUSH
24247: LD_INT 1
24249: NEG
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24266: LD_ADDR_VAR 0 39
24270: PUSH
24271: LD_INT 0
24273: PUSH
24274: LD_INT 0
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: PUSH
24281: LD_INT 0
24283: PUSH
24284: LD_INT 1
24286: NEG
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: PUSH
24292: LD_INT 1
24294: PUSH
24295: LD_INT 0
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: PUSH
24302: LD_INT 1
24304: PUSH
24305: LD_INT 1
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: PUSH
24312: LD_INT 0
24314: PUSH
24315: LD_INT 1
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: PUSH
24322: LD_INT 1
24324: NEG
24325: PUSH
24326: LD_INT 0
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: PUSH
24333: LD_INT 1
24335: NEG
24336: PUSH
24337: LD_INT 1
24339: NEG
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: PUSH
24345: LD_INT 1
24347: NEG
24348: PUSH
24349: LD_INT 2
24351: NEG
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: PUSH
24357: LD_INT 1
24359: PUSH
24360: LD_INT 2
24362: PUSH
24363: EMPTY
24364: LIST
24365: LIST
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24378: LD_ADDR_VAR 0 40
24382: PUSH
24383: LD_INT 0
24385: PUSH
24386: LD_INT 0
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PUSH
24393: LD_INT 0
24395: PUSH
24396: LD_INT 1
24398: NEG
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: PUSH
24404: LD_INT 1
24406: PUSH
24407: LD_INT 0
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: PUSH
24414: LD_INT 1
24416: PUSH
24417: LD_INT 1
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PUSH
24424: LD_INT 0
24426: PUSH
24427: LD_INT 1
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: PUSH
24434: LD_INT 1
24436: NEG
24437: PUSH
24438: LD_INT 0
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: PUSH
24445: LD_INT 1
24447: NEG
24448: PUSH
24449: LD_INT 1
24451: NEG
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: PUSH
24457: LD_INT 1
24459: PUSH
24460: LD_INT 1
24462: NEG
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PUSH
24468: LD_INT 1
24470: NEG
24471: PUSH
24472: LD_INT 1
24474: PUSH
24475: EMPTY
24476: LIST
24477: LIST
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24490: LD_ADDR_VAR 0 41
24494: PUSH
24495: LD_INT 0
24497: PUSH
24498: LD_INT 0
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: PUSH
24505: LD_INT 0
24507: PUSH
24508: LD_INT 1
24510: NEG
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: PUSH
24516: LD_INT 1
24518: PUSH
24519: LD_INT 0
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: PUSH
24526: LD_INT 1
24528: PUSH
24529: LD_INT 1
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: PUSH
24536: LD_INT 0
24538: PUSH
24539: LD_INT 1
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: PUSH
24546: LD_INT 1
24548: NEG
24549: PUSH
24550: LD_INT 0
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: PUSH
24557: LD_INT 1
24559: NEG
24560: PUSH
24561: LD_INT 1
24563: NEG
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PUSH
24569: LD_INT 1
24571: NEG
24572: PUSH
24573: LD_INT 2
24575: NEG
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: PUSH
24581: LD_INT 1
24583: PUSH
24584: LD_INT 1
24586: NEG
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: PUSH
24592: LD_INT 2
24594: PUSH
24595: LD_INT 0
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PUSH
24602: LD_INT 2
24604: PUSH
24605: LD_INT 1
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: PUSH
24612: LD_INT 2
24614: PUSH
24615: LD_INT 2
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PUSH
24622: LD_INT 1
24624: PUSH
24625: LD_INT 2
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: PUSH
24632: LD_INT 1
24634: NEG
24635: PUSH
24636: LD_INT 1
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PUSH
24643: LD_INT 2
24645: NEG
24646: PUSH
24647: LD_INT 0
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: PUSH
24654: LD_INT 2
24656: NEG
24657: PUSH
24658: LD_INT 1
24660: NEG
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: PUSH
24666: LD_INT 2
24668: NEG
24669: PUSH
24670: LD_INT 2
24672: NEG
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: PUSH
24678: LD_INT 2
24680: NEG
24681: PUSH
24682: LD_INT 3
24684: NEG
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 2
24692: PUSH
24693: LD_INT 1
24695: NEG
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: PUSH
24701: LD_INT 3
24703: PUSH
24704: LD_INT 0
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: LD_INT 3
24713: PUSH
24714: LD_INT 1
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: LD_INT 3
24723: PUSH
24724: LD_INT 2
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: PUSH
24731: LD_INT 3
24733: PUSH
24734: LD_INT 3
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: PUSH
24741: LD_INT 2
24743: PUSH
24744: LD_INT 3
24746: PUSH
24747: EMPTY
24748: LIST
24749: LIST
24750: PUSH
24751: LD_INT 2
24753: NEG
24754: PUSH
24755: LD_INT 1
24757: PUSH
24758: EMPTY
24759: LIST
24760: LIST
24761: PUSH
24762: LD_INT 3
24764: NEG
24765: PUSH
24766: LD_INT 0
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: LD_INT 3
24775: NEG
24776: PUSH
24777: LD_INT 1
24779: NEG
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PUSH
24785: LD_INT 3
24787: NEG
24788: PUSH
24789: LD_INT 2
24791: NEG
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: PUSH
24797: LD_INT 3
24799: NEG
24800: PUSH
24801: LD_INT 3
24803: NEG
24804: PUSH
24805: EMPTY
24806: LIST
24807: LIST
24808: PUSH
24809: EMPTY
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24840: LD_ADDR_VAR 0 42
24844: PUSH
24845: LD_INT 0
24847: PUSH
24848: LD_INT 0
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: PUSH
24855: LD_INT 0
24857: PUSH
24858: LD_INT 1
24860: NEG
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: PUSH
24866: LD_INT 1
24868: PUSH
24869: LD_INT 0
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: LD_INT 1
24878: PUSH
24879: LD_INT 1
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: PUSH
24886: LD_INT 0
24888: PUSH
24889: LD_INT 1
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: PUSH
24896: LD_INT 1
24898: NEG
24899: PUSH
24900: LD_INT 0
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: PUSH
24907: LD_INT 1
24909: NEG
24910: PUSH
24911: LD_INT 1
24913: NEG
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: PUSH
24919: LD_INT 1
24921: NEG
24922: PUSH
24923: LD_INT 2
24925: NEG
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: PUSH
24931: LD_INT 0
24933: PUSH
24934: LD_INT 2
24936: NEG
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: PUSH
24942: LD_INT 1
24944: PUSH
24945: LD_INT 1
24947: NEG
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PUSH
24953: LD_INT 2
24955: PUSH
24956: LD_INT 1
24958: PUSH
24959: EMPTY
24960: LIST
24961: LIST
24962: PUSH
24963: LD_INT 2
24965: PUSH
24966: LD_INT 2
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: PUSH
24973: LD_INT 1
24975: PUSH
24976: LD_INT 2
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: PUSH
24983: LD_INT 0
24985: PUSH
24986: LD_INT 2
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: PUSH
24993: LD_INT 1
24995: NEG
24996: PUSH
24997: LD_INT 1
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PUSH
25004: LD_INT 2
25006: NEG
25007: PUSH
25008: LD_INT 1
25010: NEG
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: LD_INT 2
25018: NEG
25019: PUSH
25020: LD_INT 2
25022: NEG
25023: PUSH
25024: EMPTY
25025: LIST
25026: LIST
25027: PUSH
25028: LD_INT 2
25030: NEG
25031: PUSH
25032: LD_INT 3
25034: NEG
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: PUSH
25040: LD_INT 1
25042: NEG
25043: PUSH
25044: LD_INT 3
25046: NEG
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: LD_INT 0
25054: PUSH
25055: LD_INT 3
25057: NEG
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PUSH
25063: LD_INT 1
25065: PUSH
25066: LD_INT 2
25068: NEG
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PUSH
25074: LD_INT 3
25076: PUSH
25077: LD_INT 2
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: PUSH
25084: LD_INT 3
25086: PUSH
25087: LD_INT 3
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: PUSH
25094: LD_INT 2
25096: PUSH
25097: LD_INT 3
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: LD_INT 1
25106: PUSH
25107: LD_INT 3
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: PUSH
25114: LD_INT 0
25116: PUSH
25117: LD_INT 3
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: PUSH
25124: LD_INT 1
25126: NEG
25127: PUSH
25128: LD_INT 2
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: PUSH
25135: LD_INT 3
25137: NEG
25138: PUSH
25139: LD_INT 2
25141: NEG
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PUSH
25147: LD_INT 3
25149: NEG
25150: PUSH
25151: LD_INT 3
25153: NEG
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25190: LD_ADDR_VAR 0 43
25194: PUSH
25195: LD_INT 0
25197: PUSH
25198: LD_INT 0
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: PUSH
25205: LD_INT 0
25207: PUSH
25208: LD_INT 1
25210: NEG
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 1
25218: PUSH
25219: LD_INT 0
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: PUSH
25226: LD_INT 1
25228: PUSH
25229: LD_INT 1
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: PUSH
25236: LD_INT 0
25238: PUSH
25239: LD_INT 1
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: PUSH
25246: LD_INT 1
25248: NEG
25249: PUSH
25250: LD_INT 0
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: PUSH
25257: LD_INT 1
25259: NEG
25260: PUSH
25261: LD_INT 1
25263: NEG
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: LD_INT 1
25271: NEG
25272: PUSH
25273: LD_INT 2
25275: NEG
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PUSH
25281: LD_INT 0
25283: PUSH
25284: LD_INT 2
25286: NEG
25287: PUSH
25288: EMPTY
25289: LIST
25290: LIST
25291: PUSH
25292: LD_INT 1
25294: PUSH
25295: LD_INT 1
25297: NEG
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PUSH
25303: LD_INT 2
25305: PUSH
25306: LD_INT 0
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: PUSH
25313: LD_INT 2
25315: PUSH
25316: LD_INT 1
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: PUSH
25323: LD_INT 1
25325: PUSH
25326: LD_INT 2
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PUSH
25333: LD_INT 0
25335: PUSH
25336: LD_INT 2
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PUSH
25343: LD_INT 1
25345: NEG
25346: PUSH
25347: LD_INT 1
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PUSH
25354: LD_INT 2
25356: NEG
25357: PUSH
25358: LD_INT 0
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: PUSH
25365: LD_INT 2
25367: NEG
25368: PUSH
25369: LD_INT 1
25371: NEG
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: PUSH
25377: LD_INT 1
25379: NEG
25380: PUSH
25381: LD_INT 3
25383: NEG
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: PUSH
25389: LD_INT 0
25391: PUSH
25392: LD_INT 3
25394: NEG
25395: PUSH
25396: EMPTY
25397: LIST
25398: LIST
25399: PUSH
25400: LD_INT 1
25402: PUSH
25403: LD_INT 2
25405: NEG
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: PUSH
25411: LD_INT 2
25413: PUSH
25414: LD_INT 1
25416: NEG
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: LD_INT 3
25424: PUSH
25425: LD_INT 0
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: LD_INT 3
25434: PUSH
25435: LD_INT 1
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: LD_INT 1
25444: PUSH
25445: LD_INT 3
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: PUSH
25452: LD_INT 0
25454: PUSH
25455: LD_INT 3
25457: PUSH
25458: EMPTY
25459: LIST
25460: LIST
25461: PUSH
25462: LD_INT 1
25464: NEG
25465: PUSH
25466: LD_INT 2
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: PUSH
25473: LD_INT 2
25475: NEG
25476: PUSH
25477: LD_INT 1
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: PUSH
25484: LD_INT 3
25486: NEG
25487: PUSH
25488: LD_INT 0
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: LD_INT 3
25497: NEG
25498: PUSH
25499: LD_INT 1
25501: NEG
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: PUSH
25507: EMPTY
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25538: LD_ADDR_VAR 0 44
25542: PUSH
25543: LD_INT 0
25545: PUSH
25546: LD_INT 0
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: PUSH
25553: LD_INT 0
25555: PUSH
25556: LD_INT 1
25558: NEG
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: PUSH
25564: LD_INT 1
25566: PUSH
25567: LD_INT 0
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: LD_INT 1
25576: PUSH
25577: LD_INT 1
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: LD_INT 0
25586: PUSH
25587: LD_INT 1
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: PUSH
25594: LD_INT 1
25596: NEG
25597: PUSH
25598: LD_INT 0
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PUSH
25605: LD_INT 1
25607: NEG
25608: PUSH
25609: LD_INT 1
25611: NEG
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PUSH
25617: LD_INT 1
25619: NEG
25620: PUSH
25621: LD_INT 2
25623: NEG
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: LD_INT 1
25631: PUSH
25632: LD_INT 1
25634: NEG
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: PUSH
25640: LD_INT 2
25642: PUSH
25643: LD_INT 0
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: LD_INT 2
25652: PUSH
25653: LD_INT 1
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: PUSH
25660: LD_INT 2
25662: PUSH
25663: LD_INT 2
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: LD_INT 1
25672: PUSH
25673: LD_INT 2
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: PUSH
25680: LD_INT 1
25682: NEG
25683: PUSH
25684: LD_INT 1
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 2
25693: NEG
25694: PUSH
25695: LD_INT 0
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: PUSH
25702: LD_INT 2
25704: NEG
25705: PUSH
25706: LD_INT 1
25708: NEG
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: LD_INT 2
25716: NEG
25717: PUSH
25718: LD_INT 2
25720: NEG
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: LD_INT 2
25728: NEG
25729: PUSH
25730: LD_INT 3
25732: NEG
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: PUSH
25738: LD_INT 2
25740: PUSH
25741: LD_INT 1
25743: NEG
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PUSH
25749: LD_INT 3
25751: PUSH
25752: LD_INT 0
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: LD_INT 3
25761: PUSH
25762: LD_INT 1
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: LD_INT 3
25771: PUSH
25772: LD_INT 2
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: PUSH
25779: LD_INT 3
25781: PUSH
25782: LD_INT 3
25784: PUSH
25785: EMPTY
25786: LIST
25787: LIST
25788: PUSH
25789: LD_INT 2
25791: PUSH
25792: LD_INT 3
25794: PUSH
25795: EMPTY
25796: LIST
25797: LIST
25798: PUSH
25799: LD_INT 2
25801: NEG
25802: PUSH
25803: LD_INT 1
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: PUSH
25810: LD_INT 3
25812: NEG
25813: PUSH
25814: LD_INT 0
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PUSH
25821: LD_INT 3
25823: NEG
25824: PUSH
25825: LD_INT 1
25827: NEG
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: PUSH
25833: LD_INT 3
25835: NEG
25836: PUSH
25837: LD_INT 2
25839: NEG
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PUSH
25845: LD_INT 3
25847: NEG
25848: PUSH
25849: LD_INT 3
25851: NEG
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25888: LD_ADDR_VAR 0 45
25892: PUSH
25893: LD_INT 0
25895: PUSH
25896: LD_INT 0
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: PUSH
25903: LD_INT 0
25905: PUSH
25906: LD_INT 1
25908: NEG
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: LD_INT 1
25916: PUSH
25917: LD_INT 0
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: LD_INT 1
25926: PUSH
25927: LD_INT 1
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: PUSH
25934: LD_INT 0
25936: PUSH
25937: LD_INT 1
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: PUSH
25944: LD_INT 1
25946: NEG
25947: PUSH
25948: LD_INT 0
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: PUSH
25955: LD_INT 1
25957: NEG
25958: PUSH
25959: LD_INT 1
25961: NEG
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: PUSH
25967: LD_INT 1
25969: NEG
25970: PUSH
25971: LD_INT 2
25973: NEG
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PUSH
25979: LD_INT 0
25981: PUSH
25982: LD_INT 2
25984: NEG
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: PUSH
25990: LD_INT 1
25992: PUSH
25993: LD_INT 1
25995: NEG
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: PUSH
26001: LD_INT 2
26003: PUSH
26004: LD_INT 1
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: PUSH
26011: LD_INT 2
26013: PUSH
26014: LD_INT 2
26016: PUSH
26017: EMPTY
26018: LIST
26019: LIST
26020: PUSH
26021: LD_INT 1
26023: PUSH
26024: LD_INT 2
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PUSH
26031: LD_INT 0
26033: PUSH
26034: LD_INT 2
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: LD_INT 1
26043: NEG
26044: PUSH
26045: LD_INT 1
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: LD_INT 2
26054: NEG
26055: PUSH
26056: LD_INT 1
26058: NEG
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 2
26066: NEG
26067: PUSH
26068: LD_INT 2
26070: NEG
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: PUSH
26076: LD_INT 2
26078: NEG
26079: PUSH
26080: LD_INT 3
26082: NEG
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: PUSH
26088: LD_INT 1
26090: NEG
26091: PUSH
26092: LD_INT 3
26094: NEG
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 0
26102: PUSH
26103: LD_INT 3
26105: NEG
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: PUSH
26111: LD_INT 1
26113: PUSH
26114: LD_INT 2
26116: NEG
26117: PUSH
26118: EMPTY
26119: LIST
26120: LIST
26121: PUSH
26122: LD_INT 3
26124: PUSH
26125: LD_INT 2
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: PUSH
26132: LD_INT 3
26134: PUSH
26135: LD_INT 3
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: PUSH
26142: LD_INT 2
26144: PUSH
26145: LD_INT 3
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: PUSH
26152: LD_INT 1
26154: PUSH
26155: LD_INT 3
26157: PUSH
26158: EMPTY
26159: LIST
26160: LIST
26161: PUSH
26162: LD_INT 0
26164: PUSH
26165: LD_INT 3
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: PUSH
26172: LD_INT 1
26174: NEG
26175: PUSH
26176: LD_INT 2
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: PUSH
26183: LD_INT 3
26185: NEG
26186: PUSH
26187: LD_INT 2
26189: NEG
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: LD_INT 3
26197: NEG
26198: PUSH
26199: LD_INT 3
26201: NEG
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: LIST
26211: LIST
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: LIST
26217: LIST
26218: LIST
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26238: LD_ADDR_VAR 0 46
26242: PUSH
26243: LD_INT 0
26245: PUSH
26246: LD_INT 0
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 0
26255: PUSH
26256: LD_INT 1
26258: NEG
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: PUSH
26264: LD_INT 1
26266: PUSH
26267: LD_INT 0
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: PUSH
26274: LD_INT 1
26276: PUSH
26277: LD_INT 1
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: PUSH
26284: LD_INT 0
26286: PUSH
26287: LD_INT 1
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: PUSH
26294: LD_INT 1
26296: NEG
26297: PUSH
26298: LD_INT 0
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PUSH
26305: LD_INT 1
26307: NEG
26308: PUSH
26309: LD_INT 1
26311: NEG
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: LD_INT 1
26319: NEG
26320: PUSH
26321: LD_INT 2
26323: NEG
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 0
26331: PUSH
26332: LD_INT 2
26334: NEG
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PUSH
26340: LD_INT 1
26342: PUSH
26343: LD_INT 1
26345: NEG
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: LD_INT 2
26353: PUSH
26354: LD_INT 0
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 2
26363: PUSH
26364: LD_INT 1
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 1
26373: PUSH
26374: LD_INT 2
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: LD_INT 0
26383: PUSH
26384: LD_INT 2
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: PUSH
26391: LD_INT 1
26393: NEG
26394: PUSH
26395: LD_INT 1
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: PUSH
26402: LD_INT 2
26404: NEG
26405: PUSH
26406: LD_INT 0
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: PUSH
26413: LD_INT 2
26415: NEG
26416: PUSH
26417: LD_INT 1
26419: NEG
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 1
26427: NEG
26428: PUSH
26429: LD_INT 3
26431: NEG
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: LD_INT 0
26439: PUSH
26440: LD_INT 3
26442: NEG
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 1
26450: PUSH
26451: LD_INT 2
26453: NEG
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: PUSH
26459: LD_INT 2
26461: PUSH
26462: LD_INT 1
26464: NEG
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PUSH
26470: LD_INT 3
26472: PUSH
26473: LD_INT 0
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: LD_INT 3
26482: PUSH
26483: LD_INT 1
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: PUSH
26490: LD_INT 1
26492: PUSH
26493: LD_INT 3
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: LD_INT 0
26502: PUSH
26503: LD_INT 3
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 1
26512: NEG
26513: PUSH
26514: LD_INT 2
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: LD_INT 2
26523: NEG
26524: PUSH
26525: LD_INT 1
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: LD_INT 3
26534: NEG
26535: PUSH
26536: LD_INT 0
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: LD_INT 3
26545: NEG
26546: PUSH
26547: LD_INT 1
26549: NEG
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26586: LD_ADDR_VAR 0 47
26590: PUSH
26591: LD_INT 0
26593: PUSH
26594: LD_INT 0
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 0
26603: PUSH
26604: LD_INT 1
26606: NEG
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: PUSH
26612: LD_INT 1
26614: PUSH
26615: LD_INT 0
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: PUSH
26622: LD_INT 1
26624: PUSH
26625: LD_INT 1
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: PUSH
26632: LD_INT 0
26634: PUSH
26635: LD_INT 1
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PUSH
26642: LD_INT 1
26644: NEG
26645: PUSH
26646: LD_INT 0
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PUSH
26653: LD_INT 1
26655: NEG
26656: PUSH
26657: LD_INT 1
26659: NEG
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: LD_INT 1
26667: NEG
26668: PUSH
26669: LD_INT 2
26671: NEG
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: LD_INT 0
26679: PUSH
26680: LD_INT 2
26682: NEG
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: PUSH
26688: LD_INT 1
26690: PUSH
26691: LD_INT 1
26693: NEG
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: PUSH
26699: LD_INT 2
26701: NEG
26702: PUSH
26703: LD_INT 1
26705: NEG
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: PUSH
26711: LD_INT 2
26713: NEG
26714: PUSH
26715: LD_INT 2
26717: NEG
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26737: LD_ADDR_VAR 0 48
26741: PUSH
26742: LD_INT 0
26744: PUSH
26745: LD_INT 0
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PUSH
26752: LD_INT 0
26754: PUSH
26755: LD_INT 1
26757: NEG
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: PUSH
26763: LD_INT 1
26765: PUSH
26766: LD_INT 0
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: PUSH
26773: LD_INT 1
26775: PUSH
26776: LD_INT 1
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: PUSH
26783: LD_INT 0
26785: PUSH
26786: LD_INT 1
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: PUSH
26793: LD_INT 1
26795: NEG
26796: PUSH
26797: LD_INT 0
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: PUSH
26804: LD_INT 1
26806: NEG
26807: PUSH
26808: LD_INT 1
26810: NEG
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: LD_INT 1
26818: NEG
26819: PUSH
26820: LD_INT 2
26822: NEG
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: LD_INT 0
26830: PUSH
26831: LD_INT 2
26833: NEG
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: PUSH
26839: LD_INT 1
26841: PUSH
26842: LD_INT 1
26844: NEG
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: LD_INT 2
26852: PUSH
26853: LD_INT 0
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: PUSH
26860: LD_INT 2
26862: PUSH
26863: LD_INT 1
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26884: LD_ADDR_VAR 0 49
26888: PUSH
26889: LD_INT 0
26891: PUSH
26892: LD_INT 0
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: LD_INT 0
26901: PUSH
26902: LD_INT 1
26904: NEG
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PUSH
26910: LD_INT 1
26912: PUSH
26913: LD_INT 0
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 1
26922: PUSH
26923: LD_INT 1
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PUSH
26930: LD_INT 0
26932: PUSH
26933: LD_INT 1
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: PUSH
26940: LD_INT 1
26942: NEG
26943: PUSH
26944: LD_INT 0
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: PUSH
26951: LD_INT 1
26953: NEG
26954: PUSH
26955: LD_INT 1
26957: NEG
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: LD_INT 1
26965: PUSH
26966: LD_INT 1
26968: NEG
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PUSH
26974: LD_INT 2
26976: PUSH
26977: LD_INT 0
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: PUSH
26984: LD_INT 2
26986: PUSH
26987: LD_INT 1
26989: PUSH
26990: EMPTY
26991: LIST
26992: LIST
26993: PUSH
26994: LD_INT 2
26996: PUSH
26997: LD_INT 2
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: PUSH
27004: LD_INT 1
27006: PUSH
27007: LD_INT 2
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: PUSH
27014: EMPTY
27015: LIST
27016: LIST
27017: LIST
27018: LIST
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27028: LD_ADDR_VAR 0 50
27032: PUSH
27033: LD_INT 0
27035: PUSH
27036: LD_INT 0
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: PUSH
27043: LD_INT 0
27045: PUSH
27046: LD_INT 1
27048: NEG
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: LD_INT 1
27056: PUSH
27057: LD_INT 0
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PUSH
27064: LD_INT 1
27066: PUSH
27067: LD_INT 1
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PUSH
27074: LD_INT 0
27076: PUSH
27077: LD_INT 1
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PUSH
27084: LD_INT 1
27086: NEG
27087: PUSH
27088: LD_INT 0
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 1
27097: NEG
27098: PUSH
27099: LD_INT 1
27101: NEG
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: LD_INT 2
27109: PUSH
27110: LD_INT 1
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: LD_INT 2
27119: PUSH
27120: LD_INT 2
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 1
27129: PUSH
27130: LD_INT 2
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: PUSH
27137: LD_INT 0
27139: PUSH
27140: LD_INT 2
27142: PUSH
27143: EMPTY
27144: LIST
27145: LIST
27146: PUSH
27147: LD_INT 1
27149: NEG
27150: PUSH
27151: LD_INT 1
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27172: LD_ADDR_VAR 0 51
27176: PUSH
27177: LD_INT 0
27179: PUSH
27180: LD_INT 0
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: LD_INT 0
27189: PUSH
27190: LD_INT 1
27192: NEG
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: PUSH
27198: LD_INT 1
27200: PUSH
27201: LD_INT 0
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: PUSH
27208: LD_INT 1
27210: PUSH
27211: LD_INT 1
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: LD_INT 0
27220: PUSH
27221: LD_INT 1
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: PUSH
27228: LD_INT 1
27230: NEG
27231: PUSH
27232: LD_INT 0
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: PUSH
27239: LD_INT 1
27241: NEG
27242: PUSH
27243: LD_INT 1
27245: NEG
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PUSH
27251: LD_INT 1
27253: PUSH
27254: LD_INT 2
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: PUSH
27261: LD_INT 0
27263: PUSH
27264: LD_INT 2
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: PUSH
27271: LD_INT 1
27273: NEG
27274: PUSH
27275: LD_INT 1
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: PUSH
27282: LD_INT 2
27284: NEG
27285: PUSH
27286: LD_INT 0
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 2
27295: NEG
27296: PUSH
27297: LD_INT 1
27299: NEG
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: LIST
27313: LIST
27314: LIST
27315: LIST
27316: LIST
27317: LIST
27318: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27319: LD_ADDR_VAR 0 52
27323: PUSH
27324: LD_INT 0
27326: PUSH
27327: LD_INT 0
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: LD_INT 0
27336: PUSH
27337: LD_INT 1
27339: NEG
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: LD_INT 1
27347: PUSH
27348: LD_INT 0
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: PUSH
27355: LD_INT 1
27357: PUSH
27358: LD_INT 1
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: LD_INT 0
27367: PUSH
27368: LD_INT 1
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: PUSH
27375: LD_INT 1
27377: NEG
27378: PUSH
27379: LD_INT 0
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: LD_INT 1
27388: NEG
27389: PUSH
27390: LD_INT 1
27392: NEG
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: LD_INT 1
27400: NEG
27401: PUSH
27402: LD_INT 2
27404: NEG
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: PUSH
27410: LD_INT 1
27412: NEG
27413: PUSH
27414: LD_INT 1
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PUSH
27421: LD_INT 2
27423: NEG
27424: PUSH
27425: LD_INT 0
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: LD_INT 2
27434: NEG
27435: PUSH
27436: LD_INT 1
27438: NEG
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: LD_INT 2
27446: NEG
27447: PUSH
27448: LD_INT 2
27450: NEG
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: LIST
27465: LIST
27466: LIST
27467: LIST
27468: LIST
27469: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27470: LD_ADDR_VAR 0 53
27474: PUSH
27475: LD_INT 0
27477: PUSH
27478: LD_INT 0
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: LD_INT 0
27487: PUSH
27488: LD_INT 1
27490: NEG
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: PUSH
27496: LD_INT 1
27498: PUSH
27499: LD_INT 0
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PUSH
27506: LD_INT 1
27508: PUSH
27509: LD_INT 1
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: LD_INT 0
27518: PUSH
27519: LD_INT 1
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: PUSH
27526: LD_INT 1
27528: NEG
27529: PUSH
27530: LD_INT 0
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: PUSH
27537: LD_INT 1
27539: NEG
27540: PUSH
27541: LD_INT 1
27543: NEG
27544: PUSH
27545: EMPTY
27546: LIST
27547: LIST
27548: PUSH
27549: LD_INT 1
27551: NEG
27552: PUSH
27553: LD_INT 2
27555: NEG
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: PUSH
27561: LD_INT 0
27563: PUSH
27564: LD_INT 2
27566: NEG
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: LD_INT 1
27574: PUSH
27575: LD_INT 1
27577: NEG
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PUSH
27583: LD_INT 2
27585: PUSH
27586: LD_INT 0
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: PUSH
27593: LD_INT 2
27595: PUSH
27596: LD_INT 1
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 2
27605: PUSH
27606: LD_INT 2
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 1
27615: PUSH
27616: LD_INT 2
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PUSH
27623: LD_INT 0
27625: PUSH
27626: LD_INT 2
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: PUSH
27633: LD_INT 1
27635: NEG
27636: PUSH
27637: LD_INT 1
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: PUSH
27644: LD_INT 2
27646: NEG
27647: PUSH
27648: LD_INT 0
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 2
27657: NEG
27658: PUSH
27659: LD_INT 1
27661: NEG
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: PUSH
27667: LD_INT 2
27669: NEG
27670: PUSH
27671: LD_INT 2
27673: NEG
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27700: LD_ADDR_VAR 0 54
27704: PUSH
27705: LD_INT 0
27707: PUSH
27708: LD_INT 0
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: PUSH
27715: LD_INT 0
27717: PUSH
27718: LD_INT 1
27720: NEG
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: PUSH
27726: LD_INT 1
27728: PUSH
27729: LD_INT 0
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: LD_INT 1
27738: PUSH
27739: LD_INT 1
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: PUSH
27746: LD_INT 0
27748: PUSH
27749: LD_INT 1
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: PUSH
27756: LD_INT 1
27758: NEG
27759: PUSH
27760: LD_INT 0
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PUSH
27767: LD_INT 1
27769: NEG
27770: PUSH
27771: LD_INT 1
27773: NEG
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PUSH
27779: LD_INT 1
27781: NEG
27782: PUSH
27783: LD_INT 2
27785: NEG
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: PUSH
27791: LD_INT 0
27793: PUSH
27794: LD_INT 2
27796: NEG
27797: PUSH
27798: EMPTY
27799: LIST
27800: LIST
27801: PUSH
27802: LD_INT 1
27804: PUSH
27805: LD_INT 1
27807: NEG
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: PUSH
27813: LD_INT 2
27815: PUSH
27816: LD_INT 0
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: PUSH
27823: LD_INT 2
27825: PUSH
27826: LD_INT 1
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: PUSH
27833: LD_INT 2
27835: PUSH
27836: LD_INT 2
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: PUSH
27843: LD_INT 1
27845: PUSH
27846: LD_INT 2
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: PUSH
27853: LD_INT 0
27855: PUSH
27856: LD_INT 2
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 1
27865: NEG
27866: PUSH
27867: LD_INT 1
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: LD_INT 2
27876: NEG
27877: PUSH
27878: LD_INT 0
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 2
27887: NEG
27888: PUSH
27889: LD_INT 1
27891: NEG
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: PUSH
27897: LD_INT 2
27899: NEG
27900: PUSH
27901: LD_INT 2
27903: NEG
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: LIST
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27930: LD_ADDR_VAR 0 55
27934: PUSH
27935: LD_INT 0
27937: PUSH
27938: LD_INT 0
27940: PUSH
27941: EMPTY
27942: LIST
27943: LIST
27944: PUSH
27945: LD_INT 0
27947: PUSH
27948: LD_INT 1
27950: NEG
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: PUSH
27956: LD_INT 1
27958: PUSH
27959: LD_INT 0
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: PUSH
27966: LD_INT 1
27968: PUSH
27969: LD_INT 1
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: PUSH
27976: LD_INT 0
27978: PUSH
27979: LD_INT 1
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: PUSH
27986: LD_INT 1
27988: NEG
27989: PUSH
27990: LD_INT 0
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PUSH
27997: LD_INT 1
27999: NEG
28000: PUSH
28001: LD_INT 1
28003: NEG
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: PUSH
28009: LD_INT 1
28011: NEG
28012: PUSH
28013: LD_INT 2
28015: NEG
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: PUSH
28021: LD_INT 0
28023: PUSH
28024: LD_INT 2
28026: NEG
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PUSH
28032: LD_INT 1
28034: PUSH
28035: LD_INT 1
28037: NEG
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PUSH
28043: LD_INT 2
28045: PUSH
28046: LD_INT 0
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PUSH
28053: LD_INT 2
28055: PUSH
28056: LD_INT 1
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: LD_INT 2
28065: PUSH
28066: LD_INT 2
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: PUSH
28073: LD_INT 1
28075: PUSH
28076: LD_INT 2
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 0
28085: PUSH
28086: LD_INT 2
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: PUSH
28093: LD_INT 1
28095: NEG
28096: PUSH
28097: LD_INT 1
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PUSH
28104: LD_INT 2
28106: NEG
28107: PUSH
28108: LD_INT 0
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: PUSH
28115: LD_INT 2
28117: NEG
28118: PUSH
28119: LD_INT 1
28121: NEG
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: PUSH
28127: LD_INT 2
28129: NEG
28130: PUSH
28131: LD_INT 2
28133: NEG
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: LIST
28146: LIST
28147: LIST
28148: LIST
28149: LIST
28150: LIST
28151: LIST
28152: LIST
28153: LIST
28154: LIST
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28160: LD_ADDR_VAR 0 56
28164: PUSH
28165: LD_INT 0
28167: PUSH
28168: LD_INT 0
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: PUSH
28175: LD_INT 0
28177: PUSH
28178: LD_INT 1
28180: NEG
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: PUSH
28186: LD_INT 1
28188: PUSH
28189: LD_INT 0
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: LD_INT 1
28198: PUSH
28199: LD_INT 1
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: LD_INT 0
28208: PUSH
28209: LD_INT 1
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: LD_INT 1
28218: NEG
28219: PUSH
28220: LD_INT 0
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: LD_INT 1
28229: NEG
28230: PUSH
28231: LD_INT 1
28233: NEG
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PUSH
28239: LD_INT 1
28241: NEG
28242: PUSH
28243: LD_INT 2
28245: NEG
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: LD_INT 0
28253: PUSH
28254: LD_INT 2
28256: NEG
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: PUSH
28262: LD_INT 1
28264: PUSH
28265: LD_INT 1
28267: NEG
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: PUSH
28273: LD_INT 2
28275: PUSH
28276: LD_INT 0
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: PUSH
28283: LD_INT 2
28285: PUSH
28286: LD_INT 1
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: PUSH
28293: LD_INT 2
28295: PUSH
28296: LD_INT 2
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PUSH
28303: LD_INT 1
28305: PUSH
28306: LD_INT 2
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: LD_INT 0
28315: PUSH
28316: LD_INT 2
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: PUSH
28323: LD_INT 1
28325: NEG
28326: PUSH
28327: LD_INT 1
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: PUSH
28334: LD_INT 2
28336: NEG
28337: PUSH
28338: LD_INT 0
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: PUSH
28345: LD_INT 2
28347: NEG
28348: PUSH
28349: LD_INT 1
28351: NEG
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: LD_INT 2
28359: NEG
28360: PUSH
28361: LD_INT 2
28363: NEG
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: LIST
28373: LIST
28374: LIST
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28390: LD_ADDR_VAR 0 57
28394: PUSH
28395: LD_INT 0
28397: PUSH
28398: LD_INT 0
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: PUSH
28405: LD_INT 0
28407: PUSH
28408: LD_INT 1
28410: NEG
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: PUSH
28416: LD_INT 1
28418: PUSH
28419: LD_INT 0
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PUSH
28426: LD_INT 1
28428: PUSH
28429: LD_INT 1
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: LD_INT 0
28438: PUSH
28439: LD_INT 1
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: PUSH
28446: LD_INT 1
28448: NEG
28449: PUSH
28450: LD_INT 0
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PUSH
28457: LD_INT 1
28459: NEG
28460: PUSH
28461: LD_INT 1
28463: NEG
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: LD_INT 1
28471: NEG
28472: PUSH
28473: LD_INT 2
28475: NEG
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: LD_INT 0
28483: PUSH
28484: LD_INT 2
28486: NEG
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: LD_INT 1
28494: PUSH
28495: LD_INT 1
28497: NEG
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 2
28505: PUSH
28506: LD_INT 0
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PUSH
28513: LD_INT 2
28515: PUSH
28516: LD_INT 1
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: PUSH
28523: LD_INT 2
28525: PUSH
28526: LD_INT 2
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: PUSH
28533: LD_INT 1
28535: PUSH
28536: LD_INT 2
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: LD_INT 0
28545: PUSH
28546: LD_INT 2
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: LD_INT 1
28555: NEG
28556: PUSH
28557: LD_INT 1
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PUSH
28564: LD_INT 2
28566: NEG
28567: PUSH
28568: LD_INT 0
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: LD_INT 2
28577: NEG
28578: PUSH
28579: LD_INT 1
28581: NEG
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PUSH
28587: LD_INT 2
28589: NEG
28590: PUSH
28591: LD_INT 2
28593: NEG
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: LIST
28615: LIST
28616: LIST
28617: LIST
28618: LIST
28619: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28620: LD_ADDR_VAR 0 58
28624: PUSH
28625: LD_INT 0
28627: PUSH
28628: LD_INT 0
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: PUSH
28635: LD_INT 0
28637: PUSH
28638: LD_INT 1
28640: NEG
28641: PUSH
28642: EMPTY
28643: LIST
28644: LIST
28645: PUSH
28646: LD_INT 1
28648: PUSH
28649: LD_INT 0
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: PUSH
28656: LD_INT 1
28658: PUSH
28659: LD_INT 1
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: PUSH
28666: LD_INT 0
28668: PUSH
28669: LD_INT 1
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: PUSH
28676: LD_INT 1
28678: NEG
28679: PUSH
28680: LD_INT 0
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: PUSH
28687: LD_INT 1
28689: NEG
28690: PUSH
28691: LD_INT 1
28693: NEG
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: LD_INT 1
28701: NEG
28702: PUSH
28703: LD_INT 2
28705: NEG
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PUSH
28711: LD_INT 0
28713: PUSH
28714: LD_INT 2
28716: NEG
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: LD_INT 1
28724: PUSH
28725: LD_INT 1
28727: NEG
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: LD_INT 2
28735: PUSH
28736: LD_INT 0
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: PUSH
28743: LD_INT 2
28745: PUSH
28746: LD_INT 1
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: LD_INT 2
28755: PUSH
28756: LD_INT 2
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: PUSH
28763: LD_INT 1
28765: PUSH
28766: LD_INT 2
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 0
28775: PUSH
28776: LD_INT 2
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: LD_INT 1
28785: NEG
28786: PUSH
28787: LD_INT 1
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: LD_INT 2
28796: NEG
28797: PUSH
28798: LD_INT 0
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 2
28807: NEG
28808: PUSH
28809: LD_INT 1
28811: NEG
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: LD_INT 2
28819: NEG
28820: PUSH
28821: LD_INT 2
28823: NEG
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28850: LD_ADDR_VAR 0 59
28854: PUSH
28855: LD_INT 0
28857: PUSH
28858: LD_INT 0
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: PUSH
28865: LD_INT 0
28867: PUSH
28868: LD_INT 1
28870: NEG
28871: PUSH
28872: EMPTY
28873: LIST
28874: LIST
28875: PUSH
28876: LD_INT 1
28878: PUSH
28879: LD_INT 0
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: PUSH
28886: LD_INT 1
28888: PUSH
28889: LD_INT 1
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PUSH
28896: LD_INT 0
28898: PUSH
28899: LD_INT 1
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: PUSH
28906: LD_INT 1
28908: NEG
28909: PUSH
28910: LD_INT 0
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: PUSH
28917: LD_INT 1
28919: NEG
28920: PUSH
28921: LD_INT 1
28923: NEG
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: LIST
28933: LIST
28934: LIST
28935: LIST
28936: LIST
28937: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28938: LD_ADDR_VAR 0 60
28942: PUSH
28943: LD_INT 0
28945: PUSH
28946: LD_INT 0
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: LD_INT 0
28955: PUSH
28956: LD_INT 1
28958: NEG
28959: PUSH
28960: EMPTY
28961: LIST
28962: LIST
28963: PUSH
28964: LD_INT 1
28966: PUSH
28967: LD_INT 0
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: PUSH
28974: LD_INT 1
28976: PUSH
28977: LD_INT 1
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: PUSH
28984: LD_INT 0
28986: PUSH
28987: LD_INT 1
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: PUSH
28994: LD_INT 1
28996: NEG
28997: PUSH
28998: LD_INT 0
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PUSH
29005: LD_INT 1
29007: NEG
29008: PUSH
29009: LD_INT 1
29011: NEG
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29026: LD_ADDR_VAR 0 61
29030: PUSH
29031: LD_INT 0
29033: PUSH
29034: LD_INT 0
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: PUSH
29041: LD_INT 0
29043: PUSH
29044: LD_INT 1
29046: NEG
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PUSH
29052: LD_INT 1
29054: PUSH
29055: LD_INT 0
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: PUSH
29062: LD_INT 1
29064: PUSH
29065: LD_INT 1
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PUSH
29072: LD_INT 0
29074: PUSH
29075: LD_INT 1
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: PUSH
29082: LD_INT 1
29084: NEG
29085: PUSH
29086: LD_INT 0
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: PUSH
29093: LD_INT 1
29095: NEG
29096: PUSH
29097: LD_INT 1
29099: NEG
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29114: LD_ADDR_VAR 0 62
29118: PUSH
29119: LD_INT 0
29121: PUSH
29122: LD_INT 0
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 0
29131: PUSH
29132: LD_INT 1
29134: NEG
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PUSH
29140: LD_INT 1
29142: PUSH
29143: LD_INT 0
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: LD_INT 1
29152: PUSH
29153: LD_INT 1
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PUSH
29160: LD_INT 0
29162: PUSH
29163: LD_INT 1
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: PUSH
29170: LD_INT 1
29172: NEG
29173: PUSH
29174: LD_INT 0
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PUSH
29181: LD_INT 1
29183: NEG
29184: PUSH
29185: LD_INT 1
29187: NEG
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: LIST
29197: LIST
29198: LIST
29199: LIST
29200: LIST
29201: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29202: LD_ADDR_VAR 0 63
29206: PUSH
29207: LD_INT 0
29209: PUSH
29210: LD_INT 0
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: PUSH
29217: LD_INT 0
29219: PUSH
29220: LD_INT 1
29222: NEG
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PUSH
29228: LD_INT 1
29230: PUSH
29231: LD_INT 0
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PUSH
29238: LD_INT 1
29240: PUSH
29241: LD_INT 1
29243: PUSH
29244: EMPTY
29245: LIST
29246: LIST
29247: PUSH
29248: LD_INT 0
29250: PUSH
29251: LD_INT 1
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: PUSH
29258: LD_INT 1
29260: NEG
29261: PUSH
29262: LD_INT 0
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: LD_INT 1
29271: NEG
29272: PUSH
29273: LD_INT 1
29275: NEG
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: LIST
29288: LIST
29289: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29290: LD_ADDR_VAR 0 64
29294: PUSH
29295: LD_INT 0
29297: PUSH
29298: LD_INT 0
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: LD_INT 0
29307: PUSH
29308: LD_INT 1
29310: NEG
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PUSH
29316: LD_INT 1
29318: PUSH
29319: LD_INT 0
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: PUSH
29326: LD_INT 1
29328: PUSH
29329: LD_INT 1
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: PUSH
29336: LD_INT 0
29338: PUSH
29339: LD_INT 1
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: PUSH
29346: LD_INT 1
29348: NEG
29349: PUSH
29350: LD_INT 0
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: PUSH
29357: LD_INT 1
29359: NEG
29360: PUSH
29361: LD_INT 1
29363: NEG
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: ST_TO_ADDR
// end ; 1 :
29378: GO 35275
29380: LD_INT 1
29382: DOUBLE
29383: EQUAL
29384: IFTRUE 29388
29386: GO 32011
29388: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29389: LD_ADDR_VAR 0 11
29393: PUSH
29394: LD_INT 1
29396: NEG
29397: PUSH
29398: LD_INT 3
29400: NEG
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: LD_INT 0
29408: PUSH
29409: LD_INT 3
29411: NEG
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PUSH
29417: LD_INT 1
29419: PUSH
29420: LD_INT 2
29422: NEG
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: LIST
29432: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29433: LD_ADDR_VAR 0 12
29437: PUSH
29438: LD_INT 2
29440: PUSH
29441: LD_INT 1
29443: NEG
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: PUSH
29449: LD_INT 3
29451: PUSH
29452: LD_INT 0
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PUSH
29459: LD_INT 3
29461: PUSH
29462: LD_INT 1
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: LIST
29473: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29474: LD_ADDR_VAR 0 13
29478: PUSH
29479: LD_INT 3
29481: PUSH
29482: LD_INT 2
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: LD_INT 3
29491: PUSH
29492: LD_INT 3
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: LD_INT 2
29501: PUSH
29502: LD_INT 3
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: LIST
29513: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29514: LD_ADDR_VAR 0 14
29518: PUSH
29519: LD_INT 1
29521: PUSH
29522: LD_INT 3
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: PUSH
29529: LD_INT 0
29531: PUSH
29532: LD_INT 3
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PUSH
29539: LD_INT 1
29541: NEG
29542: PUSH
29543: LD_INT 2
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: LIST
29554: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29555: LD_ADDR_VAR 0 15
29559: PUSH
29560: LD_INT 2
29562: NEG
29563: PUSH
29564: LD_INT 1
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 3
29573: NEG
29574: PUSH
29575: LD_INT 0
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 3
29584: NEG
29585: PUSH
29586: LD_INT 1
29588: NEG
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: LIST
29598: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29599: LD_ADDR_VAR 0 16
29603: PUSH
29604: LD_INT 2
29606: NEG
29607: PUSH
29608: LD_INT 3
29610: NEG
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: PUSH
29616: LD_INT 3
29618: NEG
29619: PUSH
29620: LD_INT 2
29622: NEG
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 3
29630: NEG
29631: PUSH
29632: LD_INT 3
29634: NEG
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: LIST
29644: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29645: LD_ADDR_VAR 0 17
29649: PUSH
29650: LD_INT 1
29652: NEG
29653: PUSH
29654: LD_INT 3
29656: NEG
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: PUSH
29662: LD_INT 0
29664: PUSH
29665: LD_INT 3
29667: NEG
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PUSH
29673: LD_INT 1
29675: PUSH
29676: LD_INT 2
29678: NEG
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: LIST
29688: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29689: LD_ADDR_VAR 0 18
29693: PUSH
29694: LD_INT 2
29696: PUSH
29697: LD_INT 1
29699: NEG
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: LD_INT 3
29707: PUSH
29708: LD_INT 0
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 3
29717: PUSH
29718: LD_INT 1
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: LIST
29729: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29730: LD_ADDR_VAR 0 19
29734: PUSH
29735: LD_INT 3
29737: PUSH
29738: LD_INT 2
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: PUSH
29745: LD_INT 3
29747: PUSH
29748: LD_INT 3
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: PUSH
29755: LD_INT 2
29757: PUSH
29758: LD_INT 3
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: EMPTY
29766: LIST
29767: LIST
29768: LIST
29769: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29770: LD_ADDR_VAR 0 20
29774: PUSH
29775: LD_INT 1
29777: PUSH
29778: LD_INT 3
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: LD_INT 0
29787: PUSH
29788: LD_INT 3
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: LD_INT 1
29797: NEG
29798: PUSH
29799: LD_INT 2
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: LIST
29810: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29811: LD_ADDR_VAR 0 21
29815: PUSH
29816: LD_INT 2
29818: NEG
29819: PUSH
29820: LD_INT 1
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: PUSH
29827: LD_INT 3
29829: NEG
29830: PUSH
29831: LD_INT 0
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PUSH
29838: LD_INT 3
29840: NEG
29841: PUSH
29842: LD_INT 1
29844: NEG
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: LIST
29854: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29855: LD_ADDR_VAR 0 22
29859: PUSH
29860: LD_INT 2
29862: NEG
29863: PUSH
29864: LD_INT 3
29866: NEG
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: LD_INT 3
29874: NEG
29875: PUSH
29876: LD_INT 2
29878: NEG
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 3
29886: NEG
29887: PUSH
29888: LD_INT 3
29890: NEG
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: LIST
29900: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29901: LD_ADDR_VAR 0 23
29905: PUSH
29906: LD_INT 0
29908: PUSH
29909: LD_INT 3
29911: NEG
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: PUSH
29917: LD_INT 1
29919: NEG
29920: PUSH
29921: LD_INT 4
29923: NEG
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: LD_INT 1
29931: PUSH
29932: LD_INT 3
29934: NEG
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: LIST
29944: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29945: LD_ADDR_VAR 0 24
29949: PUSH
29950: LD_INT 3
29952: PUSH
29953: LD_INT 0
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: PUSH
29960: LD_INT 3
29962: PUSH
29963: LD_INT 1
29965: NEG
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: LD_INT 4
29973: PUSH
29974: LD_INT 1
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: LIST
29985: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29986: LD_ADDR_VAR 0 25
29990: PUSH
29991: LD_INT 3
29993: PUSH
29994: LD_INT 3
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: LD_INT 4
30003: PUSH
30004: LD_INT 3
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: PUSH
30011: LD_INT 3
30013: PUSH
30014: LD_INT 4
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: LIST
30025: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30026: LD_ADDR_VAR 0 26
30030: PUSH
30031: LD_INT 0
30033: PUSH
30034: LD_INT 3
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: PUSH
30041: LD_INT 1
30043: PUSH
30044: LD_INT 4
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: PUSH
30051: LD_INT 1
30053: NEG
30054: PUSH
30055: LD_INT 3
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: LIST
30066: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30067: LD_ADDR_VAR 0 27
30071: PUSH
30072: LD_INT 3
30074: NEG
30075: PUSH
30076: LD_INT 0
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: LD_INT 3
30085: NEG
30086: PUSH
30087: LD_INT 1
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 4
30096: NEG
30097: PUSH
30098: LD_INT 1
30100: NEG
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: LIST
30110: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30111: LD_ADDR_VAR 0 28
30115: PUSH
30116: LD_INT 3
30118: NEG
30119: PUSH
30120: LD_INT 3
30122: NEG
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: PUSH
30128: LD_INT 3
30130: NEG
30131: PUSH
30132: LD_INT 4
30134: NEG
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: LD_INT 4
30142: NEG
30143: PUSH
30144: LD_INT 3
30146: NEG
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: LIST
30156: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30157: LD_ADDR_VAR 0 29
30161: PUSH
30162: LD_INT 1
30164: NEG
30165: PUSH
30166: LD_INT 3
30168: NEG
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 0
30176: PUSH
30177: LD_INT 3
30179: NEG
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: LD_INT 1
30187: PUSH
30188: LD_INT 2
30190: NEG
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: PUSH
30196: LD_INT 1
30198: NEG
30199: PUSH
30200: LD_INT 4
30202: NEG
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: LD_INT 0
30210: PUSH
30211: LD_INT 4
30213: NEG
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PUSH
30219: LD_INT 1
30221: PUSH
30222: LD_INT 3
30224: NEG
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: LD_INT 1
30232: NEG
30233: PUSH
30234: LD_INT 5
30236: NEG
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 0
30244: PUSH
30245: LD_INT 5
30247: NEG
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: PUSH
30253: LD_INT 1
30255: PUSH
30256: LD_INT 4
30258: NEG
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 1
30266: NEG
30267: PUSH
30268: LD_INT 6
30270: NEG
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 0
30278: PUSH
30279: LD_INT 6
30281: NEG
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: LD_INT 1
30289: PUSH
30290: LD_INT 5
30292: NEG
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30312: LD_ADDR_VAR 0 30
30316: PUSH
30317: LD_INT 2
30319: PUSH
30320: LD_INT 1
30322: NEG
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: PUSH
30328: LD_INT 3
30330: PUSH
30331: LD_INT 0
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: PUSH
30338: LD_INT 3
30340: PUSH
30341: LD_INT 1
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PUSH
30348: LD_INT 3
30350: PUSH
30351: LD_INT 1
30353: NEG
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PUSH
30359: LD_INT 4
30361: PUSH
30362: LD_INT 0
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 4
30371: PUSH
30372: LD_INT 1
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 4
30381: PUSH
30382: LD_INT 1
30384: NEG
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: LD_INT 5
30392: PUSH
30393: LD_INT 0
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: PUSH
30400: LD_INT 5
30402: PUSH
30403: LD_INT 1
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: PUSH
30410: LD_INT 5
30412: PUSH
30413: LD_INT 1
30415: NEG
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 6
30423: PUSH
30424: LD_INT 0
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 6
30433: PUSH
30434: LD_INT 1
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: LIST
30445: LIST
30446: LIST
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30455: LD_ADDR_VAR 0 31
30459: PUSH
30460: LD_INT 3
30462: PUSH
30463: LD_INT 2
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: PUSH
30470: LD_INT 3
30472: PUSH
30473: LD_INT 3
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 2
30482: PUSH
30483: LD_INT 3
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PUSH
30490: LD_INT 4
30492: PUSH
30493: LD_INT 3
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 4
30502: PUSH
30503: LD_INT 4
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 3
30512: PUSH
30513: LD_INT 4
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 5
30522: PUSH
30523: LD_INT 4
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: LD_INT 5
30532: PUSH
30533: LD_INT 5
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: LD_INT 4
30542: PUSH
30543: LD_INT 5
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PUSH
30550: LD_INT 6
30552: PUSH
30553: LD_INT 5
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PUSH
30560: LD_INT 6
30562: PUSH
30563: LD_INT 6
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: LD_INT 5
30572: PUSH
30573: LD_INT 6
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: EMPTY
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30594: LD_ADDR_VAR 0 32
30598: PUSH
30599: LD_INT 1
30601: PUSH
30602: LD_INT 3
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: PUSH
30609: LD_INT 0
30611: PUSH
30612: LD_INT 3
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: PUSH
30619: LD_INT 1
30621: NEG
30622: PUSH
30623: LD_INT 2
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 1
30632: PUSH
30633: LD_INT 4
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: LD_INT 0
30642: PUSH
30643: LD_INT 4
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: PUSH
30650: LD_INT 1
30652: NEG
30653: PUSH
30654: LD_INT 3
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 1
30663: PUSH
30664: LD_INT 5
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 0
30673: PUSH
30674: LD_INT 5
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: LD_INT 1
30683: NEG
30684: PUSH
30685: LD_INT 4
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: PUSH
30692: LD_INT 1
30694: PUSH
30695: LD_INT 6
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 0
30704: PUSH
30705: LD_INT 6
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: PUSH
30712: LD_INT 1
30714: NEG
30715: PUSH
30716: LD_INT 5
30718: PUSH
30719: EMPTY
30720: LIST
30721: LIST
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30737: LD_ADDR_VAR 0 33
30741: PUSH
30742: LD_INT 2
30744: NEG
30745: PUSH
30746: LD_INT 1
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: PUSH
30753: LD_INT 3
30755: NEG
30756: PUSH
30757: LD_INT 0
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: PUSH
30764: LD_INT 3
30766: NEG
30767: PUSH
30768: LD_INT 1
30770: NEG
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PUSH
30776: LD_INT 3
30778: NEG
30779: PUSH
30780: LD_INT 1
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 4
30789: NEG
30790: PUSH
30791: LD_INT 0
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: PUSH
30798: LD_INT 4
30800: NEG
30801: PUSH
30802: LD_INT 1
30804: NEG
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 4
30812: NEG
30813: PUSH
30814: LD_INT 1
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: LD_INT 5
30823: NEG
30824: PUSH
30825: LD_INT 0
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: LD_INT 5
30834: NEG
30835: PUSH
30836: LD_INT 1
30838: NEG
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: LD_INT 5
30846: NEG
30847: PUSH
30848: LD_INT 1
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PUSH
30855: LD_INT 6
30857: NEG
30858: PUSH
30859: LD_INT 0
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: PUSH
30866: LD_INT 6
30868: NEG
30869: PUSH
30870: LD_INT 1
30872: NEG
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: EMPTY
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30892: LD_ADDR_VAR 0 34
30896: PUSH
30897: LD_INT 2
30899: NEG
30900: PUSH
30901: LD_INT 3
30903: NEG
30904: PUSH
30905: EMPTY
30906: LIST
30907: LIST
30908: PUSH
30909: LD_INT 3
30911: NEG
30912: PUSH
30913: LD_INT 2
30915: NEG
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: LD_INT 3
30923: NEG
30924: PUSH
30925: LD_INT 3
30927: NEG
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: LD_INT 3
30935: NEG
30936: PUSH
30937: LD_INT 4
30939: NEG
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: LD_INT 4
30947: NEG
30948: PUSH
30949: LD_INT 3
30951: NEG
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: LD_INT 4
30959: NEG
30960: PUSH
30961: LD_INT 4
30963: NEG
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: PUSH
30969: LD_INT 4
30971: NEG
30972: PUSH
30973: LD_INT 5
30975: NEG
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: LD_INT 5
30983: NEG
30984: PUSH
30985: LD_INT 4
30987: NEG
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: LD_INT 5
30995: NEG
30996: PUSH
30997: LD_INT 5
30999: NEG
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 5
31007: NEG
31008: PUSH
31009: LD_INT 6
31011: NEG
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: LD_INT 6
31019: NEG
31020: PUSH
31021: LD_INT 5
31023: NEG
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PUSH
31029: LD_INT 6
31031: NEG
31032: PUSH
31033: LD_INT 6
31035: NEG
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31055: LD_ADDR_VAR 0 41
31059: PUSH
31060: LD_INT 0
31062: PUSH
31063: LD_INT 2
31065: NEG
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 1
31073: NEG
31074: PUSH
31075: LD_INT 3
31077: NEG
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: LD_INT 1
31085: PUSH
31086: LD_INT 2
31088: NEG
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: LIST
31098: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31099: LD_ADDR_VAR 0 42
31103: PUSH
31104: LD_INT 2
31106: PUSH
31107: LD_INT 0
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: PUSH
31114: LD_INT 2
31116: PUSH
31117: LD_INT 1
31119: NEG
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: LD_INT 3
31127: PUSH
31128: LD_INT 1
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: LIST
31139: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31140: LD_ADDR_VAR 0 43
31144: PUSH
31145: LD_INT 2
31147: PUSH
31148: LD_INT 2
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: PUSH
31155: LD_INT 3
31157: PUSH
31158: LD_INT 2
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: LD_INT 2
31167: PUSH
31168: LD_INT 3
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: LIST
31179: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31180: LD_ADDR_VAR 0 44
31184: PUSH
31185: LD_INT 0
31187: PUSH
31188: LD_INT 2
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: LD_INT 1
31197: PUSH
31198: LD_INT 3
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: LD_INT 1
31207: NEG
31208: PUSH
31209: LD_INT 2
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: LIST
31220: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31221: LD_ADDR_VAR 0 45
31225: PUSH
31226: LD_INT 2
31228: NEG
31229: PUSH
31230: LD_INT 0
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: LD_INT 2
31239: NEG
31240: PUSH
31241: LD_INT 1
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: PUSH
31248: LD_INT 3
31250: NEG
31251: PUSH
31252: LD_INT 1
31254: NEG
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: LIST
31264: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31265: LD_ADDR_VAR 0 46
31269: PUSH
31270: LD_INT 2
31272: NEG
31273: PUSH
31274: LD_INT 2
31276: NEG
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 2
31284: NEG
31285: PUSH
31286: LD_INT 3
31288: NEG
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 3
31296: NEG
31297: PUSH
31298: LD_INT 2
31300: NEG
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: LIST
31310: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31311: LD_ADDR_VAR 0 47
31315: PUSH
31316: LD_INT 2
31318: NEG
31319: PUSH
31320: LD_INT 3
31322: NEG
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 1
31330: NEG
31331: PUSH
31332: LD_INT 3
31334: NEG
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31344: LD_ADDR_VAR 0 48
31348: PUSH
31349: LD_INT 1
31351: PUSH
31352: LD_INT 2
31354: NEG
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 2
31362: PUSH
31363: LD_INT 1
31365: NEG
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31375: LD_ADDR_VAR 0 49
31379: PUSH
31380: LD_INT 3
31382: PUSH
31383: LD_INT 1
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: LD_INT 3
31392: PUSH
31393: LD_INT 2
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31404: LD_ADDR_VAR 0 50
31408: PUSH
31409: LD_INT 2
31411: PUSH
31412: LD_INT 3
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PUSH
31419: LD_INT 1
31421: PUSH
31422: LD_INT 3
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31433: LD_ADDR_VAR 0 51
31437: PUSH
31438: LD_INT 1
31440: NEG
31441: PUSH
31442: LD_INT 2
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: PUSH
31449: LD_INT 2
31451: NEG
31452: PUSH
31453: LD_INT 1
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31464: LD_ADDR_VAR 0 52
31468: PUSH
31469: LD_INT 3
31471: NEG
31472: PUSH
31473: LD_INT 1
31475: NEG
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: LD_INT 3
31483: NEG
31484: PUSH
31485: LD_INT 2
31487: NEG
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31497: LD_ADDR_VAR 0 53
31501: PUSH
31502: LD_INT 1
31504: NEG
31505: PUSH
31506: LD_INT 3
31508: NEG
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: LD_INT 0
31516: PUSH
31517: LD_INT 3
31519: NEG
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: PUSH
31525: LD_INT 1
31527: PUSH
31528: LD_INT 2
31530: NEG
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: LIST
31540: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31541: LD_ADDR_VAR 0 54
31545: PUSH
31546: LD_INT 2
31548: PUSH
31549: LD_INT 1
31551: NEG
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: LD_INT 3
31559: PUSH
31560: LD_INT 0
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 3
31569: PUSH
31570: LD_INT 1
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: LIST
31581: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31582: LD_ADDR_VAR 0 55
31586: PUSH
31587: LD_INT 3
31589: PUSH
31590: LD_INT 2
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: LD_INT 3
31599: PUSH
31600: LD_INT 3
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 2
31609: PUSH
31610: LD_INT 3
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: LIST
31621: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31622: LD_ADDR_VAR 0 56
31626: PUSH
31627: LD_INT 1
31629: PUSH
31630: LD_INT 3
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 0
31639: PUSH
31640: LD_INT 3
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PUSH
31647: LD_INT 1
31649: NEG
31650: PUSH
31651: LD_INT 2
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: LIST
31662: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31663: LD_ADDR_VAR 0 57
31667: PUSH
31668: LD_INT 2
31670: NEG
31671: PUSH
31672: LD_INT 1
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: LD_INT 3
31681: NEG
31682: PUSH
31683: LD_INT 0
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 3
31692: NEG
31693: PUSH
31694: LD_INT 1
31696: NEG
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: LIST
31706: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31707: LD_ADDR_VAR 0 58
31711: PUSH
31712: LD_INT 2
31714: NEG
31715: PUSH
31716: LD_INT 3
31718: NEG
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: LD_INT 3
31726: NEG
31727: PUSH
31728: LD_INT 2
31730: NEG
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 3
31738: NEG
31739: PUSH
31740: LD_INT 3
31742: NEG
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: LIST
31752: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31753: LD_ADDR_VAR 0 59
31757: PUSH
31758: LD_INT 1
31760: NEG
31761: PUSH
31762: LD_INT 2
31764: NEG
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 0
31772: PUSH
31773: LD_INT 2
31775: NEG
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 1
31783: PUSH
31784: LD_INT 1
31786: NEG
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: LIST
31796: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31797: LD_ADDR_VAR 0 60
31801: PUSH
31802: LD_INT 1
31804: PUSH
31805: LD_INT 1
31807: NEG
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: PUSH
31813: LD_INT 2
31815: PUSH
31816: LD_INT 0
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: PUSH
31823: LD_INT 2
31825: PUSH
31826: LD_INT 1
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: LIST
31837: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31838: LD_ADDR_VAR 0 61
31842: PUSH
31843: LD_INT 2
31845: PUSH
31846: LD_INT 1
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: LD_INT 2
31855: PUSH
31856: LD_INT 2
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: PUSH
31863: LD_INT 1
31865: PUSH
31866: LD_INT 2
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: LIST
31877: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31878: LD_ADDR_VAR 0 62
31882: PUSH
31883: LD_INT 1
31885: PUSH
31886: LD_INT 2
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: LD_INT 0
31895: PUSH
31896: LD_INT 2
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: PUSH
31903: LD_INT 1
31905: NEG
31906: PUSH
31907: LD_INT 1
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: LIST
31918: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31919: LD_ADDR_VAR 0 63
31923: PUSH
31924: LD_INT 1
31926: NEG
31927: PUSH
31928: LD_INT 1
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 2
31937: NEG
31938: PUSH
31939: LD_INT 0
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 2
31948: NEG
31949: PUSH
31950: LD_INT 1
31952: NEG
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: LIST
31962: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31963: LD_ADDR_VAR 0 64
31967: PUSH
31968: LD_INT 1
31970: NEG
31971: PUSH
31972: LD_INT 2
31974: NEG
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 2
31982: NEG
31983: PUSH
31984: LD_INT 1
31986: NEG
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 2
31994: NEG
31995: PUSH
31996: LD_INT 2
31998: NEG
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: LIST
32008: ST_TO_ADDR
// end ; 2 :
32009: GO 35275
32011: LD_INT 2
32013: DOUBLE
32014: EQUAL
32015: IFTRUE 32019
32017: GO 35274
32019: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32020: LD_ADDR_VAR 0 29
32024: PUSH
32025: LD_INT 4
32027: PUSH
32028: LD_INT 0
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 4
32037: PUSH
32038: LD_INT 1
32040: NEG
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 5
32048: PUSH
32049: LD_INT 0
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 5
32058: PUSH
32059: LD_INT 1
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PUSH
32066: LD_INT 4
32068: PUSH
32069: LD_INT 1
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PUSH
32076: LD_INT 3
32078: PUSH
32079: LD_INT 0
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 3
32088: PUSH
32089: LD_INT 1
32091: NEG
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 3
32099: PUSH
32100: LD_INT 2
32102: NEG
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 5
32110: PUSH
32111: LD_INT 2
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: LD_INT 3
32120: PUSH
32121: LD_INT 3
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 3
32130: PUSH
32131: LD_INT 2
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: PUSH
32138: LD_INT 4
32140: PUSH
32141: LD_INT 3
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: PUSH
32148: LD_INT 4
32150: PUSH
32151: LD_INT 4
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 3
32160: PUSH
32161: LD_INT 4
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PUSH
32168: LD_INT 2
32170: PUSH
32171: LD_INT 3
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: PUSH
32178: LD_INT 2
32180: PUSH
32181: LD_INT 2
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PUSH
32188: LD_INT 4
32190: PUSH
32191: LD_INT 2
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 2
32200: PUSH
32201: LD_INT 4
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PUSH
32208: LD_INT 0
32210: PUSH
32211: LD_INT 4
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: LD_INT 0
32220: PUSH
32221: LD_INT 3
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: PUSH
32228: LD_INT 1
32230: PUSH
32231: LD_INT 4
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: LD_INT 1
32240: PUSH
32241: LD_INT 5
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PUSH
32248: LD_INT 0
32250: PUSH
32251: LD_INT 5
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: PUSH
32258: LD_INT 1
32260: NEG
32261: PUSH
32262: LD_INT 4
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PUSH
32269: LD_INT 1
32271: NEG
32272: PUSH
32273: LD_INT 3
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PUSH
32280: LD_INT 2
32282: PUSH
32283: LD_INT 5
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 2
32292: NEG
32293: PUSH
32294: LD_INT 3
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 3
32303: NEG
32304: PUSH
32305: LD_INT 0
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 3
32314: NEG
32315: PUSH
32316: LD_INT 1
32318: NEG
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 2
32326: NEG
32327: PUSH
32328: LD_INT 0
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PUSH
32335: LD_INT 2
32337: NEG
32338: PUSH
32339: LD_INT 1
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 3
32348: NEG
32349: PUSH
32350: LD_INT 1
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 4
32359: NEG
32360: PUSH
32361: LD_INT 0
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 4
32370: NEG
32371: PUSH
32372: LD_INT 1
32374: NEG
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 4
32382: NEG
32383: PUSH
32384: LD_INT 2
32386: NEG
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 2
32394: NEG
32395: PUSH
32396: LD_INT 2
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 4
32405: NEG
32406: PUSH
32407: LD_INT 4
32409: NEG
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: LD_INT 4
32417: NEG
32418: PUSH
32419: LD_INT 5
32421: NEG
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 3
32429: NEG
32430: PUSH
32431: LD_INT 4
32433: NEG
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: PUSH
32439: LD_INT 3
32441: NEG
32442: PUSH
32443: LD_INT 3
32445: NEG
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PUSH
32451: LD_INT 4
32453: NEG
32454: PUSH
32455: LD_INT 3
32457: NEG
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: PUSH
32463: LD_INT 5
32465: NEG
32466: PUSH
32467: LD_INT 4
32469: NEG
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: LD_INT 5
32477: NEG
32478: PUSH
32479: LD_INT 5
32481: NEG
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 3
32489: NEG
32490: PUSH
32491: LD_INT 5
32493: NEG
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 5
32501: NEG
32502: PUSH
32503: LD_INT 3
32505: NEG
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32558: LD_ADDR_VAR 0 30
32562: PUSH
32563: LD_INT 4
32565: PUSH
32566: LD_INT 4
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: PUSH
32573: LD_INT 4
32575: PUSH
32576: LD_INT 3
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: PUSH
32583: LD_INT 5
32585: PUSH
32586: LD_INT 4
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: PUSH
32593: LD_INT 5
32595: PUSH
32596: LD_INT 5
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: PUSH
32603: LD_INT 4
32605: PUSH
32606: LD_INT 5
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PUSH
32613: LD_INT 3
32615: PUSH
32616: LD_INT 4
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: LD_INT 3
32625: PUSH
32626: LD_INT 3
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 5
32635: PUSH
32636: LD_INT 3
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PUSH
32643: LD_INT 3
32645: PUSH
32646: LD_INT 5
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: PUSH
32653: LD_INT 0
32655: PUSH
32656: LD_INT 3
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: PUSH
32663: LD_INT 0
32665: PUSH
32666: LD_INT 2
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: PUSH
32673: LD_INT 1
32675: PUSH
32676: LD_INT 3
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: PUSH
32683: LD_INT 1
32685: PUSH
32686: LD_INT 4
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: PUSH
32693: LD_INT 0
32695: PUSH
32696: LD_INT 4
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: LD_INT 1
32705: NEG
32706: PUSH
32707: LD_INT 3
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: LD_INT 1
32716: NEG
32717: PUSH
32718: LD_INT 2
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 2
32727: PUSH
32728: LD_INT 4
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: LD_INT 2
32737: NEG
32738: PUSH
32739: LD_INT 2
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: LD_INT 4
32748: NEG
32749: PUSH
32750: LD_INT 0
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PUSH
32757: LD_INT 4
32759: NEG
32760: PUSH
32761: LD_INT 1
32763: NEG
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 3
32771: NEG
32772: PUSH
32773: LD_INT 0
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: LD_INT 3
32782: NEG
32783: PUSH
32784: LD_INT 1
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 4
32793: NEG
32794: PUSH
32795: LD_INT 1
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 5
32804: NEG
32805: PUSH
32806: LD_INT 0
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 5
32815: NEG
32816: PUSH
32817: LD_INT 1
32819: NEG
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PUSH
32825: LD_INT 5
32827: NEG
32828: PUSH
32829: LD_INT 2
32831: NEG
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: LD_INT 3
32839: NEG
32840: PUSH
32841: LD_INT 2
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 3
32850: NEG
32851: PUSH
32852: LD_INT 3
32854: NEG
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: PUSH
32860: LD_INT 3
32862: NEG
32863: PUSH
32864: LD_INT 4
32866: NEG
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: PUSH
32872: LD_INT 2
32874: NEG
32875: PUSH
32876: LD_INT 3
32878: NEG
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: PUSH
32884: LD_INT 2
32886: NEG
32887: PUSH
32888: LD_INT 2
32890: NEG
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: PUSH
32896: LD_INT 3
32898: NEG
32899: PUSH
32900: LD_INT 2
32902: NEG
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 4
32910: NEG
32911: PUSH
32912: LD_INT 3
32914: NEG
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: LD_INT 4
32922: NEG
32923: PUSH
32924: LD_INT 4
32926: NEG
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 2
32934: NEG
32935: PUSH
32936: LD_INT 4
32938: NEG
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: PUSH
32944: LD_INT 4
32946: NEG
32947: PUSH
32948: LD_INT 2
32950: NEG
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: PUSH
32956: LD_INT 0
32958: PUSH
32959: LD_INT 4
32961: NEG
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: PUSH
32967: LD_INT 0
32969: PUSH
32970: LD_INT 5
32972: NEG
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: LD_INT 1
32980: PUSH
32981: LD_INT 4
32983: NEG
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 1
32991: PUSH
32992: LD_INT 3
32994: NEG
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 0
33002: PUSH
33003: LD_INT 3
33005: NEG
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 1
33013: NEG
33014: PUSH
33015: LD_INT 4
33017: NEG
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 1
33025: NEG
33026: PUSH
33027: LD_INT 5
33029: NEG
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PUSH
33035: LD_INT 2
33037: PUSH
33038: LD_INT 3
33040: NEG
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: PUSH
33046: LD_INT 2
33048: NEG
33049: PUSH
33050: LD_INT 5
33052: NEG
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33105: LD_ADDR_VAR 0 31
33109: PUSH
33110: LD_INT 0
33112: PUSH
33113: LD_INT 4
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: PUSH
33120: LD_INT 0
33122: PUSH
33123: LD_INT 3
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: LD_INT 1
33132: PUSH
33133: LD_INT 4
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: LD_INT 1
33142: PUSH
33143: LD_INT 5
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: PUSH
33150: LD_INT 0
33152: PUSH
33153: LD_INT 5
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: PUSH
33160: LD_INT 1
33162: NEG
33163: PUSH
33164: LD_INT 4
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: PUSH
33171: LD_INT 1
33173: NEG
33174: PUSH
33175: LD_INT 3
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 2
33184: PUSH
33185: LD_INT 5
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 2
33194: NEG
33195: PUSH
33196: LD_INT 3
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: LD_INT 3
33205: NEG
33206: PUSH
33207: LD_INT 0
33209: PUSH
33210: EMPTY
33211: LIST
33212: LIST
33213: PUSH
33214: LD_INT 3
33216: NEG
33217: PUSH
33218: LD_INT 1
33220: NEG
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: LD_INT 2
33228: NEG
33229: PUSH
33230: LD_INT 0
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: LD_INT 2
33239: NEG
33240: PUSH
33241: LD_INT 1
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: LD_INT 3
33250: NEG
33251: PUSH
33252: LD_INT 1
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 4
33261: NEG
33262: PUSH
33263: LD_INT 0
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: LD_INT 4
33272: NEG
33273: PUSH
33274: LD_INT 1
33276: NEG
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: PUSH
33282: LD_INT 4
33284: NEG
33285: PUSH
33286: LD_INT 2
33288: NEG
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: PUSH
33294: LD_INT 2
33296: NEG
33297: PUSH
33298: LD_INT 2
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 4
33307: NEG
33308: PUSH
33309: LD_INT 4
33311: NEG
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 4
33319: NEG
33320: PUSH
33321: LD_INT 5
33323: NEG
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PUSH
33329: LD_INT 3
33331: NEG
33332: PUSH
33333: LD_INT 4
33335: NEG
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: PUSH
33341: LD_INT 3
33343: NEG
33344: PUSH
33345: LD_INT 3
33347: NEG
33348: PUSH
33349: EMPTY
33350: LIST
33351: LIST
33352: PUSH
33353: LD_INT 4
33355: NEG
33356: PUSH
33357: LD_INT 3
33359: NEG
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: PUSH
33365: LD_INT 5
33367: NEG
33368: PUSH
33369: LD_INT 4
33371: NEG
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 5
33379: NEG
33380: PUSH
33381: LD_INT 5
33383: NEG
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 3
33391: NEG
33392: PUSH
33393: LD_INT 5
33395: NEG
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: PUSH
33401: LD_INT 5
33403: NEG
33404: PUSH
33405: LD_INT 3
33407: NEG
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: LD_INT 0
33415: PUSH
33416: LD_INT 3
33418: NEG
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: LD_INT 0
33426: PUSH
33427: LD_INT 4
33429: NEG
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 1
33437: PUSH
33438: LD_INT 3
33440: NEG
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: PUSH
33446: LD_INT 1
33448: PUSH
33449: LD_INT 2
33451: NEG
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: PUSH
33457: LD_INT 0
33459: PUSH
33460: LD_INT 2
33462: NEG
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 1
33470: NEG
33471: PUSH
33472: LD_INT 3
33474: NEG
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 1
33482: NEG
33483: PUSH
33484: LD_INT 4
33486: NEG
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 2
33494: PUSH
33495: LD_INT 2
33497: NEG
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 2
33505: NEG
33506: PUSH
33507: LD_INT 4
33509: NEG
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: PUSH
33515: LD_INT 4
33517: PUSH
33518: LD_INT 0
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 4
33527: PUSH
33528: LD_INT 1
33530: NEG
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: LD_INT 5
33538: PUSH
33539: LD_INT 0
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: PUSH
33546: LD_INT 5
33548: PUSH
33549: LD_INT 1
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: PUSH
33556: LD_INT 4
33558: PUSH
33559: LD_INT 1
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: PUSH
33566: LD_INT 3
33568: PUSH
33569: LD_INT 0
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: PUSH
33576: LD_INT 3
33578: PUSH
33579: LD_INT 1
33581: NEG
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: PUSH
33587: LD_INT 3
33589: PUSH
33590: LD_INT 2
33592: NEG
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 5
33600: PUSH
33601: LD_INT 2
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: LIST
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33655: LD_ADDR_VAR 0 32
33659: PUSH
33660: LD_INT 4
33662: NEG
33663: PUSH
33664: LD_INT 0
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: LD_INT 4
33673: NEG
33674: PUSH
33675: LD_INT 1
33677: NEG
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 3
33685: NEG
33686: PUSH
33687: LD_INT 0
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: LD_INT 3
33696: NEG
33697: PUSH
33698: LD_INT 1
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: PUSH
33705: LD_INT 4
33707: NEG
33708: PUSH
33709: LD_INT 1
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: LD_INT 5
33718: NEG
33719: PUSH
33720: LD_INT 0
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: PUSH
33727: LD_INT 5
33729: NEG
33730: PUSH
33731: LD_INT 1
33733: NEG
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: LD_INT 5
33741: NEG
33742: PUSH
33743: LD_INT 2
33745: NEG
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: PUSH
33751: LD_INT 3
33753: NEG
33754: PUSH
33755: LD_INT 2
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PUSH
33762: LD_INT 3
33764: NEG
33765: PUSH
33766: LD_INT 3
33768: NEG
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: PUSH
33774: LD_INT 3
33776: NEG
33777: PUSH
33778: LD_INT 4
33780: NEG
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: PUSH
33786: LD_INT 2
33788: NEG
33789: PUSH
33790: LD_INT 3
33792: NEG
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: PUSH
33798: LD_INT 2
33800: NEG
33801: PUSH
33802: LD_INT 2
33804: NEG
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PUSH
33810: LD_INT 3
33812: NEG
33813: PUSH
33814: LD_INT 2
33816: NEG
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 4
33824: NEG
33825: PUSH
33826: LD_INT 3
33828: NEG
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 4
33836: NEG
33837: PUSH
33838: LD_INT 4
33840: NEG
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 2
33848: NEG
33849: PUSH
33850: LD_INT 4
33852: NEG
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 4
33860: NEG
33861: PUSH
33862: LD_INT 2
33864: NEG
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: PUSH
33870: LD_INT 0
33872: PUSH
33873: LD_INT 4
33875: NEG
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PUSH
33881: LD_INT 0
33883: PUSH
33884: LD_INT 5
33886: NEG
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 1
33894: PUSH
33895: LD_INT 4
33897: NEG
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PUSH
33903: LD_INT 1
33905: PUSH
33906: LD_INT 3
33908: NEG
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: PUSH
33914: LD_INT 0
33916: PUSH
33917: LD_INT 3
33919: NEG
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: PUSH
33925: LD_INT 1
33927: NEG
33928: PUSH
33929: LD_INT 4
33931: NEG
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_INT 1
33939: NEG
33940: PUSH
33941: LD_INT 5
33943: NEG
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 2
33951: PUSH
33952: LD_INT 3
33954: NEG
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: PUSH
33960: LD_INT 2
33962: NEG
33963: PUSH
33964: LD_INT 5
33966: NEG
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: PUSH
33972: LD_INT 3
33974: PUSH
33975: LD_INT 0
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: PUSH
33982: LD_INT 3
33984: PUSH
33985: LD_INT 1
33987: NEG
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 4
33995: PUSH
33996: LD_INT 0
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PUSH
34003: LD_INT 4
34005: PUSH
34006: LD_INT 1
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PUSH
34013: LD_INT 3
34015: PUSH
34016: LD_INT 1
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: PUSH
34023: LD_INT 2
34025: PUSH
34026: LD_INT 0
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: PUSH
34033: LD_INT 2
34035: PUSH
34036: LD_INT 1
34038: NEG
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: PUSH
34044: LD_INT 2
34046: PUSH
34047: LD_INT 2
34049: NEG
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: PUSH
34055: LD_INT 4
34057: PUSH
34058: LD_INT 2
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 4
34067: PUSH
34068: LD_INT 4
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 4
34077: PUSH
34078: LD_INT 3
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: LD_INT 5
34087: PUSH
34088: LD_INT 4
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: PUSH
34095: LD_INT 5
34097: PUSH
34098: LD_INT 5
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 4
34107: PUSH
34108: LD_INT 5
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: PUSH
34115: LD_INT 3
34117: PUSH
34118: LD_INT 4
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: PUSH
34125: LD_INT 3
34127: PUSH
34128: LD_INT 3
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 5
34137: PUSH
34138: LD_INT 3
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: PUSH
34145: LD_INT 3
34147: PUSH
34148: LD_INT 5
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: LIST
34168: LIST
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34202: LD_ADDR_VAR 0 33
34206: PUSH
34207: LD_INT 4
34209: NEG
34210: PUSH
34211: LD_INT 4
34213: NEG
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PUSH
34219: LD_INT 4
34221: NEG
34222: PUSH
34223: LD_INT 5
34225: NEG
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: PUSH
34231: LD_INT 3
34233: NEG
34234: PUSH
34235: LD_INT 4
34237: NEG
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: PUSH
34243: LD_INT 3
34245: NEG
34246: PUSH
34247: LD_INT 3
34249: NEG
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_INT 4
34257: NEG
34258: PUSH
34259: LD_INT 3
34261: NEG
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: LD_INT 5
34269: NEG
34270: PUSH
34271: LD_INT 4
34273: NEG
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: PUSH
34279: LD_INT 5
34281: NEG
34282: PUSH
34283: LD_INT 5
34285: NEG
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: LD_INT 3
34293: NEG
34294: PUSH
34295: LD_INT 5
34297: NEG
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: PUSH
34303: LD_INT 5
34305: NEG
34306: PUSH
34307: LD_INT 3
34309: NEG
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 0
34317: PUSH
34318: LD_INT 3
34320: NEG
34321: PUSH
34322: EMPTY
34323: LIST
34324: LIST
34325: PUSH
34326: LD_INT 0
34328: PUSH
34329: LD_INT 4
34331: NEG
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: LD_INT 1
34339: PUSH
34340: LD_INT 3
34342: NEG
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: PUSH
34348: LD_INT 1
34350: PUSH
34351: LD_INT 2
34353: NEG
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: LD_INT 0
34361: PUSH
34362: LD_INT 2
34364: NEG
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: LD_INT 1
34372: NEG
34373: PUSH
34374: LD_INT 3
34376: NEG
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PUSH
34382: LD_INT 1
34384: NEG
34385: PUSH
34386: LD_INT 4
34388: NEG
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: PUSH
34394: LD_INT 2
34396: PUSH
34397: LD_INT 2
34399: NEG
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 2
34407: NEG
34408: PUSH
34409: LD_INT 4
34411: NEG
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: PUSH
34417: LD_INT 4
34419: PUSH
34420: LD_INT 0
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: PUSH
34427: LD_INT 4
34429: PUSH
34430: LD_INT 1
34432: NEG
34433: PUSH
34434: EMPTY
34435: LIST
34436: LIST
34437: PUSH
34438: LD_INT 5
34440: PUSH
34441: LD_INT 0
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: PUSH
34448: LD_INT 5
34450: PUSH
34451: LD_INT 1
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: LD_INT 4
34460: PUSH
34461: LD_INT 1
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: LD_INT 3
34470: PUSH
34471: LD_INT 0
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: LD_INT 3
34480: PUSH
34481: LD_INT 1
34483: NEG
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 3
34491: PUSH
34492: LD_INT 2
34494: NEG
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 5
34502: PUSH
34503: LD_INT 2
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: LD_INT 3
34512: PUSH
34513: LD_INT 3
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: LD_INT 3
34522: PUSH
34523: LD_INT 2
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 4
34532: PUSH
34533: LD_INT 3
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 4
34542: PUSH
34543: LD_INT 4
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: LD_INT 3
34552: PUSH
34553: LD_INT 4
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: LD_INT 2
34562: PUSH
34563: LD_INT 3
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PUSH
34570: LD_INT 2
34572: PUSH
34573: LD_INT 2
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: LD_INT 4
34582: PUSH
34583: LD_INT 2
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: LD_INT 2
34592: PUSH
34593: LD_INT 4
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 0
34602: PUSH
34603: LD_INT 4
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: PUSH
34610: LD_INT 0
34612: PUSH
34613: LD_INT 3
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: LD_INT 1
34622: PUSH
34623: LD_INT 4
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: LD_INT 1
34632: PUSH
34633: LD_INT 5
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: PUSH
34640: LD_INT 0
34642: PUSH
34643: LD_INT 5
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 1
34652: NEG
34653: PUSH
34654: LD_INT 4
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 1
34663: NEG
34664: PUSH
34665: LD_INT 3
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 2
34674: PUSH
34675: LD_INT 5
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 2
34684: NEG
34685: PUSH
34686: LD_INT 3
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34740: LD_ADDR_VAR 0 34
34744: PUSH
34745: LD_INT 0
34747: PUSH
34748: LD_INT 4
34750: NEG
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 0
34758: PUSH
34759: LD_INT 5
34761: NEG
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 1
34769: PUSH
34770: LD_INT 4
34772: NEG
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 1
34780: PUSH
34781: LD_INT 3
34783: NEG
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: LD_INT 0
34791: PUSH
34792: LD_INT 3
34794: NEG
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PUSH
34800: LD_INT 1
34802: NEG
34803: PUSH
34804: LD_INT 4
34806: NEG
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PUSH
34812: LD_INT 1
34814: NEG
34815: PUSH
34816: LD_INT 5
34818: NEG
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: LD_INT 2
34826: PUSH
34827: LD_INT 3
34829: NEG
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PUSH
34835: LD_INT 2
34837: NEG
34838: PUSH
34839: LD_INT 5
34841: NEG
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: LD_INT 3
34849: PUSH
34850: LD_INT 0
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_INT 3
34859: PUSH
34860: LD_INT 1
34862: NEG
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: LD_INT 4
34870: PUSH
34871: LD_INT 0
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_INT 4
34880: PUSH
34881: LD_INT 1
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: LD_INT 3
34890: PUSH
34891: LD_INT 1
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PUSH
34898: LD_INT 2
34900: PUSH
34901: LD_INT 0
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: LD_INT 2
34910: PUSH
34911: LD_INT 1
34913: NEG
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: LD_INT 2
34921: PUSH
34922: LD_INT 2
34924: NEG
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: LD_INT 4
34932: PUSH
34933: LD_INT 2
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: PUSH
34940: LD_INT 4
34942: PUSH
34943: LD_INT 4
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 4
34952: PUSH
34953: LD_INT 3
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: LD_INT 5
34962: PUSH
34963: LD_INT 4
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: PUSH
34970: LD_INT 5
34972: PUSH
34973: LD_INT 5
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: PUSH
34980: LD_INT 4
34982: PUSH
34983: LD_INT 5
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: PUSH
34990: LD_INT 3
34992: PUSH
34993: LD_INT 4
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 3
35002: PUSH
35003: LD_INT 3
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 5
35012: PUSH
35013: LD_INT 3
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 3
35022: PUSH
35023: LD_INT 5
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: LD_INT 0
35032: PUSH
35033: LD_INT 3
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: LD_INT 0
35042: PUSH
35043: LD_INT 2
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: LD_INT 1
35052: PUSH
35053: LD_INT 3
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PUSH
35060: LD_INT 1
35062: PUSH
35063: LD_INT 4
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: PUSH
35070: LD_INT 0
35072: PUSH
35073: LD_INT 4
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: PUSH
35080: LD_INT 1
35082: NEG
35083: PUSH
35084: LD_INT 3
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PUSH
35091: LD_INT 1
35093: NEG
35094: PUSH
35095: LD_INT 2
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 2
35104: PUSH
35105: LD_INT 4
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: LD_INT 2
35114: NEG
35115: PUSH
35116: LD_INT 2
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 4
35125: NEG
35126: PUSH
35127: LD_INT 0
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 4
35136: NEG
35137: PUSH
35138: LD_INT 1
35140: NEG
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: PUSH
35146: LD_INT 3
35148: NEG
35149: PUSH
35150: LD_INT 0
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: LD_INT 3
35159: NEG
35160: PUSH
35161: LD_INT 1
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 4
35170: NEG
35171: PUSH
35172: LD_INT 1
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PUSH
35179: LD_INT 5
35181: NEG
35182: PUSH
35183: LD_INT 0
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: PUSH
35190: LD_INT 5
35192: NEG
35193: PUSH
35194: LD_INT 1
35196: NEG
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: PUSH
35202: LD_INT 5
35204: NEG
35205: PUSH
35206: LD_INT 2
35208: NEG
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 3
35216: NEG
35217: PUSH
35218: LD_INT 2
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: LIST
35241: LIST
35242: LIST
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: LIST
35254: LIST
35255: LIST
35256: LIST
35257: LIST
35258: LIST
35259: LIST
35260: LIST
35261: LIST
35262: LIST
35263: LIST
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: LIST
35269: LIST
35270: LIST
35271: ST_TO_ADDR
// end ; end ;
35272: GO 35275
35274: POP
// case btype of b_depot , b_warehouse :
35275: LD_VAR 0 1
35279: PUSH
35280: LD_INT 0
35282: DOUBLE
35283: EQUAL
35284: IFTRUE 35294
35286: LD_INT 1
35288: DOUBLE
35289: EQUAL
35290: IFTRUE 35294
35292: GO 35495
35294: POP
// case nation of nation_american :
35295: LD_VAR 0 5
35299: PUSH
35300: LD_INT 1
35302: DOUBLE
35303: EQUAL
35304: IFTRUE 35308
35306: GO 35364
35308: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35309: LD_ADDR_VAR 0 9
35313: PUSH
35314: LD_VAR 0 11
35318: PUSH
35319: LD_VAR 0 12
35323: PUSH
35324: LD_VAR 0 13
35328: PUSH
35329: LD_VAR 0 14
35333: PUSH
35334: LD_VAR 0 15
35338: PUSH
35339: LD_VAR 0 16
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: PUSH
35352: LD_VAR 0 4
35356: PUSH
35357: LD_INT 1
35359: PLUS
35360: ARRAY
35361: ST_TO_ADDR
35362: GO 35493
35364: LD_INT 2
35366: DOUBLE
35367: EQUAL
35368: IFTRUE 35372
35370: GO 35428
35372: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35373: LD_ADDR_VAR 0 9
35377: PUSH
35378: LD_VAR 0 17
35382: PUSH
35383: LD_VAR 0 18
35387: PUSH
35388: LD_VAR 0 19
35392: PUSH
35393: LD_VAR 0 20
35397: PUSH
35398: LD_VAR 0 21
35402: PUSH
35403: LD_VAR 0 22
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: PUSH
35416: LD_VAR 0 4
35420: PUSH
35421: LD_INT 1
35423: PLUS
35424: ARRAY
35425: ST_TO_ADDR
35426: GO 35493
35428: LD_INT 3
35430: DOUBLE
35431: EQUAL
35432: IFTRUE 35436
35434: GO 35492
35436: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35437: LD_ADDR_VAR 0 9
35441: PUSH
35442: LD_VAR 0 23
35446: PUSH
35447: LD_VAR 0 24
35451: PUSH
35452: LD_VAR 0 25
35456: PUSH
35457: LD_VAR 0 26
35461: PUSH
35462: LD_VAR 0 27
35466: PUSH
35467: LD_VAR 0 28
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: LIST
35476: LIST
35477: LIST
35478: LIST
35479: PUSH
35480: LD_VAR 0 4
35484: PUSH
35485: LD_INT 1
35487: PLUS
35488: ARRAY
35489: ST_TO_ADDR
35490: GO 35493
35492: POP
35493: GO 36048
35495: LD_INT 2
35497: DOUBLE
35498: EQUAL
35499: IFTRUE 35509
35501: LD_INT 3
35503: DOUBLE
35504: EQUAL
35505: IFTRUE 35509
35507: GO 35565
35509: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35510: LD_ADDR_VAR 0 9
35514: PUSH
35515: LD_VAR 0 29
35519: PUSH
35520: LD_VAR 0 30
35524: PUSH
35525: LD_VAR 0 31
35529: PUSH
35530: LD_VAR 0 32
35534: PUSH
35535: LD_VAR 0 33
35539: PUSH
35540: LD_VAR 0 34
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: PUSH
35553: LD_VAR 0 4
35557: PUSH
35558: LD_INT 1
35560: PLUS
35561: ARRAY
35562: ST_TO_ADDR
35563: GO 36048
35565: LD_INT 16
35567: DOUBLE
35568: EQUAL
35569: IFTRUE 35627
35571: LD_INT 17
35573: DOUBLE
35574: EQUAL
35575: IFTRUE 35627
35577: LD_INT 18
35579: DOUBLE
35580: EQUAL
35581: IFTRUE 35627
35583: LD_INT 19
35585: DOUBLE
35586: EQUAL
35587: IFTRUE 35627
35589: LD_INT 22
35591: DOUBLE
35592: EQUAL
35593: IFTRUE 35627
35595: LD_INT 20
35597: DOUBLE
35598: EQUAL
35599: IFTRUE 35627
35601: LD_INT 21
35603: DOUBLE
35604: EQUAL
35605: IFTRUE 35627
35607: LD_INT 23
35609: DOUBLE
35610: EQUAL
35611: IFTRUE 35627
35613: LD_INT 24
35615: DOUBLE
35616: EQUAL
35617: IFTRUE 35627
35619: LD_INT 25
35621: DOUBLE
35622: EQUAL
35623: IFTRUE 35627
35625: GO 35683
35627: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35628: LD_ADDR_VAR 0 9
35632: PUSH
35633: LD_VAR 0 35
35637: PUSH
35638: LD_VAR 0 36
35642: PUSH
35643: LD_VAR 0 37
35647: PUSH
35648: LD_VAR 0 38
35652: PUSH
35653: LD_VAR 0 39
35657: PUSH
35658: LD_VAR 0 40
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: LIST
35670: PUSH
35671: LD_VAR 0 4
35675: PUSH
35676: LD_INT 1
35678: PLUS
35679: ARRAY
35680: ST_TO_ADDR
35681: GO 36048
35683: LD_INT 6
35685: DOUBLE
35686: EQUAL
35687: IFTRUE 35739
35689: LD_INT 7
35691: DOUBLE
35692: EQUAL
35693: IFTRUE 35739
35695: LD_INT 8
35697: DOUBLE
35698: EQUAL
35699: IFTRUE 35739
35701: LD_INT 13
35703: DOUBLE
35704: EQUAL
35705: IFTRUE 35739
35707: LD_INT 12
35709: DOUBLE
35710: EQUAL
35711: IFTRUE 35739
35713: LD_INT 15
35715: DOUBLE
35716: EQUAL
35717: IFTRUE 35739
35719: LD_INT 11
35721: DOUBLE
35722: EQUAL
35723: IFTRUE 35739
35725: LD_INT 14
35727: DOUBLE
35728: EQUAL
35729: IFTRUE 35739
35731: LD_INT 10
35733: DOUBLE
35734: EQUAL
35735: IFTRUE 35739
35737: GO 35795
35739: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35740: LD_ADDR_VAR 0 9
35744: PUSH
35745: LD_VAR 0 41
35749: PUSH
35750: LD_VAR 0 42
35754: PUSH
35755: LD_VAR 0 43
35759: PUSH
35760: LD_VAR 0 44
35764: PUSH
35765: LD_VAR 0 45
35769: PUSH
35770: LD_VAR 0 46
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: LIST
35779: LIST
35780: LIST
35781: LIST
35782: PUSH
35783: LD_VAR 0 4
35787: PUSH
35788: LD_INT 1
35790: PLUS
35791: ARRAY
35792: ST_TO_ADDR
35793: GO 36048
35795: LD_INT 36
35797: DOUBLE
35798: EQUAL
35799: IFTRUE 35803
35801: GO 35859
35803: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35804: LD_ADDR_VAR 0 9
35808: PUSH
35809: LD_VAR 0 47
35813: PUSH
35814: LD_VAR 0 48
35818: PUSH
35819: LD_VAR 0 49
35823: PUSH
35824: LD_VAR 0 50
35828: PUSH
35829: LD_VAR 0 51
35833: PUSH
35834: LD_VAR 0 52
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: PUSH
35847: LD_VAR 0 4
35851: PUSH
35852: LD_INT 1
35854: PLUS
35855: ARRAY
35856: ST_TO_ADDR
35857: GO 36048
35859: LD_INT 4
35861: DOUBLE
35862: EQUAL
35863: IFTRUE 35885
35865: LD_INT 5
35867: DOUBLE
35868: EQUAL
35869: IFTRUE 35885
35871: LD_INT 34
35873: DOUBLE
35874: EQUAL
35875: IFTRUE 35885
35877: LD_INT 37
35879: DOUBLE
35880: EQUAL
35881: IFTRUE 35885
35883: GO 35941
35885: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35886: LD_ADDR_VAR 0 9
35890: PUSH
35891: LD_VAR 0 53
35895: PUSH
35896: LD_VAR 0 54
35900: PUSH
35901: LD_VAR 0 55
35905: PUSH
35906: LD_VAR 0 56
35910: PUSH
35911: LD_VAR 0 57
35915: PUSH
35916: LD_VAR 0 58
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: LIST
35925: LIST
35926: LIST
35927: LIST
35928: PUSH
35929: LD_VAR 0 4
35933: PUSH
35934: LD_INT 1
35936: PLUS
35937: ARRAY
35938: ST_TO_ADDR
35939: GO 36048
35941: LD_INT 31
35943: DOUBLE
35944: EQUAL
35945: IFTRUE 35991
35947: LD_INT 32
35949: DOUBLE
35950: EQUAL
35951: IFTRUE 35991
35953: LD_INT 33
35955: DOUBLE
35956: EQUAL
35957: IFTRUE 35991
35959: LD_INT 27
35961: DOUBLE
35962: EQUAL
35963: IFTRUE 35991
35965: LD_INT 26
35967: DOUBLE
35968: EQUAL
35969: IFTRUE 35991
35971: LD_INT 28
35973: DOUBLE
35974: EQUAL
35975: IFTRUE 35991
35977: LD_INT 29
35979: DOUBLE
35980: EQUAL
35981: IFTRUE 35991
35983: LD_INT 30
35985: DOUBLE
35986: EQUAL
35987: IFTRUE 35991
35989: GO 36047
35991: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35992: LD_ADDR_VAR 0 9
35996: PUSH
35997: LD_VAR 0 59
36001: PUSH
36002: LD_VAR 0 60
36006: PUSH
36007: LD_VAR 0 61
36011: PUSH
36012: LD_VAR 0 62
36016: PUSH
36017: LD_VAR 0 63
36021: PUSH
36022: LD_VAR 0 64
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: PUSH
36035: LD_VAR 0 4
36039: PUSH
36040: LD_INT 1
36042: PLUS
36043: ARRAY
36044: ST_TO_ADDR
36045: GO 36048
36047: POP
// temp_list2 = [ ] ;
36048: LD_ADDR_VAR 0 10
36052: PUSH
36053: EMPTY
36054: ST_TO_ADDR
// for i in temp_list do
36055: LD_ADDR_VAR 0 8
36059: PUSH
36060: LD_VAR 0 9
36064: PUSH
36065: FOR_IN
36066: IFFALSE 36118
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36068: LD_ADDR_VAR 0 10
36072: PUSH
36073: LD_VAR 0 10
36077: PUSH
36078: LD_VAR 0 8
36082: PUSH
36083: LD_INT 1
36085: ARRAY
36086: PUSH
36087: LD_VAR 0 2
36091: PLUS
36092: PUSH
36093: LD_VAR 0 8
36097: PUSH
36098: LD_INT 2
36100: ARRAY
36101: PUSH
36102: LD_VAR 0 3
36106: PLUS
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: EMPTY
36113: LIST
36114: ADD
36115: ST_TO_ADDR
36116: GO 36065
36118: POP
36119: POP
// result = temp_list2 ;
36120: LD_ADDR_VAR 0 7
36124: PUSH
36125: LD_VAR 0 10
36129: ST_TO_ADDR
// end ;
36130: LD_VAR 0 7
36134: RET
// export function EnemyInRange ( unit , dist ) ; begin
36135: LD_INT 0
36137: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36138: LD_ADDR_VAR 0 3
36142: PUSH
36143: LD_VAR 0 1
36147: PPUSH
36148: CALL_OW 255
36152: PPUSH
36153: LD_VAR 0 1
36157: PPUSH
36158: CALL_OW 250
36162: PPUSH
36163: LD_VAR 0 1
36167: PPUSH
36168: CALL_OW 251
36172: PPUSH
36173: LD_VAR 0 2
36177: PPUSH
36178: CALL 9508 0 4
36182: PUSH
36183: LD_INT 4
36185: ARRAY
36186: ST_TO_ADDR
// end ;
36187: LD_VAR 0 3
36191: RET
// export function PlayerSeeMe ( unit ) ; begin
36192: LD_INT 0
36194: PPUSH
// result := See ( your_side , unit ) ;
36195: LD_ADDR_VAR 0 2
36199: PUSH
36200: LD_OWVAR 2
36204: PPUSH
36205: LD_VAR 0 1
36209: PPUSH
36210: CALL_OW 292
36214: ST_TO_ADDR
// end ;
36215: LD_VAR 0 2
36219: RET
// export function ReverseDir ( unit ) ; begin
36220: LD_INT 0
36222: PPUSH
// if not unit then
36223: LD_VAR 0 1
36227: NOT
36228: IFFALSE 36232
// exit ;
36230: GO 36255
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36232: LD_ADDR_VAR 0 2
36236: PUSH
36237: LD_VAR 0 1
36241: PPUSH
36242: CALL_OW 254
36246: PUSH
36247: LD_INT 3
36249: PLUS
36250: PUSH
36251: LD_INT 6
36253: MOD
36254: ST_TO_ADDR
// end ;
36255: LD_VAR 0 2
36259: RET
// export function ReverseArray ( array ) ; var i ; begin
36260: LD_INT 0
36262: PPUSH
36263: PPUSH
// if not array then
36264: LD_VAR 0 1
36268: NOT
36269: IFFALSE 36273
// exit ;
36271: GO 36328
// result := [ ] ;
36273: LD_ADDR_VAR 0 2
36277: PUSH
36278: EMPTY
36279: ST_TO_ADDR
// for i := array downto 1 do
36280: LD_ADDR_VAR 0 3
36284: PUSH
36285: DOUBLE
36286: LD_VAR 0 1
36290: INC
36291: ST_TO_ADDR
36292: LD_INT 1
36294: PUSH
36295: FOR_DOWNTO
36296: IFFALSE 36326
// result := Join ( result , array [ i ] ) ;
36298: LD_ADDR_VAR 0 2
36302: PUSH
36303: LD_VAR 0 2
36307: PPUSH
36308: LD_VAR 0 1
36312: PUSH
36313: LD_VAR 0 3
36317: ARRAY
36318: PPUSH
36319: CALL 40971 0 2
36323: ST_TO_ADDR
36324: GO 36295
36326: POP
36327: POP
// end ;
36328: LD_VAR 0 2
36332: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36333: LD_INT 0
36335: PPUSH
36336: PPUSH
36337: PPUSH
36338: PPUSH
36339: PPUSH
36340: PPUSH
// if not unit or not hexes then
36341: LD_VAR 0 1
36345: NOT
36346: PUSH
36347: LD_VAR 0 2
36351: NOT
36352: OR
36353: IFFALSE 36357
// exit ;
36355: GO 36480
// dist := 9999 ;
36357: LD_ADDR_VAR 0 5
36361: PUSH
36362: LD_INT 9999
36364: ST_TO_ADDR
// for i = 1 to hexes do
36365: LD_ADDR_VAR 0 4
36369: PUSH
36370: DOUBLE
36371: LD_INT 1
36373: DEC
36374: ST_TO_ADDR
36375: LD_VAR 0 2
36379: PUSH
36380: FOR_TO
36381: IFFALSE 36468
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36383: LD_ADDR_VAR 0 6
36387: PUSH
36388: LD_VAR 0 1
36392: PPUSH
36393: LD_VAR 0 2
36397: PUSH
36398: LD_VAR 0 4
36402: ARRAY
36403: PUSH
36404: LD_INT 1
36406: ARRAY
36407: PPUSH
36408: LD_VAR 0 2
36412: PUSH
36413: LD_VAR 0 4
36417: ARRAY
36418: PUSH
36419: LD_INT 2
36421: ARRAY
36422: PPUSH
36423: CALL_OW 297
36427: ST_TO_ADDR
// if tdist < dist then
36428: LD_VAR 0 6
36432: PUSH
36433: LD_VAR 0 5
36437: LESS
36438: IFFALSE 36466
// begin hex := hexes [ i ] ;
36440: LD_ADDR_VAR 0 8
36444: PUSH
36445: LD_VAR 0 2
36449: PUSH
36450: LD_VAR 0 4
36454: ARRAY
36455: ST_TO_ADDR
// dist := tdist ;
36456: LD_ADDR_VAR 0 5
36460: PUSH
36461: LD_VAR 0 6
36465: ST_TO_ADDR
// end ; end ;
36466: GO 36380
36468: POP
36469: POP
// result := hex ;
36470: LD_ADDR_VAR 0 3
36474: PUSH
36475: LD_VAR 0 8
36479: ST_TO_ADDR
// end ;
36480: LD_VAR 0 3
36484: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36485: LD_INT 0
36487: PPUSH
36488: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36489: LD_VAR 0 1
36493: NOT
36494: PUSH
36495: LD_VAR 0 1
36499: PUSH
36500: LD_INT 21
36502: PUSH
36503: LD_INT 2
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: LD_INT 23
36512: PUSH
36513: LD_INT 2
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: PPUSH
36524: CALL_OW 69
36528: IN
36529: NOT
36530: OR
36531: IFFALSE 36535
// exit ;
36533: GO 36582
// for i = 1 to 3 do
36535: LD_ADDR_VAR 0 3
36539: PUSH
36540: DOUBLE
36541: LD_INT 1
36543: DEC
36544: ST_TO_ADDR
36545: LD_INT 3
36547: PUSH
36548: FOR_TO
36549: IFFALSE 36580
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36551: LD_VAR 0 1
36555: PPUSH
36556: CALL_OW 250
36560: PPUSH
36561: LD_VAR 0 1
36565: PPUSH
36566: CALL_OW 251
36570: PPUSH
36571: LD_INT 1
36573: PPUSH
36574: CALL_OW 453
36578: GO 36548
36580: POP
36581: POP
// end ;
36582: LD_VAR 0 2
36586: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36587: LD_INT 0
36589: PPUSH
36590: PPUSH
36591: PPUSH
36592: PPUSH
36593: PPUSH
36594: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
36595: LD_VAR 0 1
36599: NOT
36600: PUSH
36601: LD_VAR 0 2
36605: NOT
36606: OR
36607: PUSH
36608: LD_VAR 0 1
36612: PPUSH
36613: CALL_OW 314
36617: OR
36618: IFFALSE 36622
// exit ;
36620: GO 37089
// if GetLives ( i ) < 250 then
36622: LD_VAR 0 4
36626: PPUSH
36627: CALL_OW 256
36631: PUSH
36632: LD_INT 250
36634: LESS
36635: IFFALSE 36648
// begin ComAutodestruct ( i ) ;
36637: LD_VAR 0 4
36641: PPUSH
36642: CALL 36485 0 1
// exit ;
36646: GO 37089
// end ; x := GetX ( enemy_unit ) ;
36648: LD_ADDR_VAR 0 7
36652: PUSH
36653: LD_VAR 0 2
36657: PPUSH
36658: CALL_OW 250
36662: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36663: LD_ADDR_VAR 0 8
36667: PUSH
36668: LD_VAR 0 2
36672: PPUSH
36673: CALL_OW 251
36677: ST_TO_ADDR
// if not x or not y then
36678: LD_VAR 0 7
36682: NOT
36683: PUSH
36684: LD_VAR 0 8
36688: NOT
36689: OR
36690: IFFALSE 36694
// exit ;
36692: GO 37089
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36694: LD_ADDR_VAR 0 6
36698: PUSH
36699: LD_VAR 0 7
36703: PPUSH
36704: LD_INT 0
36706: PPUSH
36707: LD_INT 4
36709: PPUSH
36710: CALL_OW 272
36714: PUSH
36715: LD_VAR 0 8
36719: PPUSH
36720: LD_INT 0
36722: PPUSH
36723: LD_INT 4
36725: PPUSH
36726: CALL_OW 273
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_VAR 0 7
36739: PPUSH
36740: LD_INT 1
36742: PPUSH
36743: LD_INT 4
36745: PPUSH
36746: CALL_OW 272
36750: PUSH
36751: LD_VAR 0 8
36755: PPUSH
36756: LD_INT 1
36758: PPUSH
36759: LD_INT 4
36761: PPUSH
36762: CALL_OW 273
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_VAR 0 7
36775: PPUSH
36776: LD_INT 2
36778: PPUSH
36779: LD_INT 4
36781: PPUSH
36782: CALL_OW 272
36786: PUSH
36787: LD_VAR 0 8
36791: PPUSH
36792: LD_INT 2
36794: PPUSH
36795: LD_INT 4
36797: PPUSH
36798: CALL_OW 273
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PUSH
36807: LD_VAR 0 7
36811: PPUSH
36812: LD_INT 3
36814: PPUSH
36815: LD_INT 4
36817: PPUSH
36818: CALL_OW 272
36822: PUSH
36823: LD_VAR 0 8
36827: PPUSH
36828: LD_INT 3
36830: PPUSH
36831: LD_INT 4
36833: PPUSH
36834: CALL_OW 273
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: PUSH
36843: LD_VAR 0 7
36847: PPUSH
36848: LD_INT 4
36850: PPUSH
36851: LD_INT 4
36853: PPUSH
36854: CALL_OW 272
36858: PUSH
36859: LD_VAR 0 8
36863: PPUSH
36864: LD_INT 4
36866: PPUSH
36867: LD_INT 4
36869: PPUSH
36870: CALL_OW 273
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: LD_VAR 0 7
36883: PPUSH
36884: LD_INT 5
36886: PPUSH
36887: LD_INT 4
36889: PPUSH
36890: CALL_OW 272
36894: PUSH
36895: LD_VAR 0 8
36899: PPUSH
36900: LD_INT 5
36902: PPUSH
36903: LD_INT 4
36905: PPUSH
36906: CALL_OW 273
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: ST_TO_ADDR
// for i = tmp downto 1 do
36923: LD_ADDR_VAR 0 4
36927: PUSH
36928: DOUBLE
36929: LD_VAR 0 6
36933: INC
36934: ST_TO_ADDR
36935: LD_INT 1
36937: PUSH
36938: FOR_DOWNTO
36939: IFFALSE 37040
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36941: LD_VAR 0 6
36945: PUSH
36946: LD_VAR 0 4
36950: ARRAY
36951: PUSH
36952: LD_INT 1
36954: ARRAY
36955: PPUSH
36956: LD_VAR 0 6
36960: PUSH
36961: LD_VAR 0 4
36965: ARRAY
36966: PUSH
36967: LD_INT 2
36969: ARRAY
36970: PPUSH
36971: CALL_OW 488
36975: NOT
36976: PUSH
36977: LD_VAR 0 6
36981: PUSH
36982: LD_VAR 0 4
36986: ARRAY
36987: PUSH
36988: LD_INT 1
36990: ARRAY
36991: PPUSH
36992: LD_VAR 0 6
36996: PUSH
36997: LD_VAR 0 4
37001: ARRAY
37002: PUSH
37003: LD_INT 2
37005: ARRAY
37006: PPUSH
37007: CALL_OW 428
37011: PUSH
37012: LD_INT 0
37014: NONEQUAL
37015: OR
37016: IFFALSE 37038
// tmp := Delete ( tmp , i ) ;
37018: LD_ADDR_VAR 0 6
37022: PUSH
37023: LD_VAR 0 6
37027: PPUSH
37028: LD_VAR 0 4
37032: PPUSH
37033: CALL_OW 3
37037: ST_TO_ADDR
37038: GO 36938
37040: POP
37041: POP
// j := GetClosestHex ( unit , tmp ) ;
37042: LD_ADDR_VAR 0 5
37046: PUSH
37047: LD_VAR 0 1
37051: PPUSH
37052: LD_VAR 0 6
37056: PPUSH
37057: CALL 36333 0 2
37061: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
37062: LD_VAR 0 1
37066: PPUSH
37067: LD_VAR 0 5
37071: PUSH
37072: LD_INT 1
37074: ARRAY
37075: PPUSH
37076: LD_VAR 0 5
37080: PUSH
37081: LD_INT 2
37083: ARRAY
37084: PPUSH
37085: CALL_OW 111
// end ;
37089: LD_VAR 0 3
37093: RET
// export function PrepareApemanSoldier ( ) ; begin
37094: LD_INT 0
37096: PPUSH
// uc_nation := 0 ;
37097: LD_ADDR_OWVAR 21
37101: PUSH
37102: LD_INT 0
37104: ST_TO_ADDR
// hc_sex := sex_male ;
37105: LD_ADDR_OWVAR 27
37109: PUSH
37110: LD_INT 1
37112: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
37113: LD_ADDR_OWVAR 28
37117: PUSH
37118: LD_INT 15
37120: ST_TO_ADDR
// hc_gallery :=  ;
37121: LD_ADDR_OWVAR 33
37125: PUSH
37126: LD_STRING 
37128: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37129: LD_ADDR_OWVAR 31
37133: PUSH
37134: LD_INT 0
37136: PPUSH
37137: LD_INT 3
37139: PPUSH
37140: CALL_OW 12
37144: PUSH
37145: LD_INT 0
37147: PPUSH
37148: LD_INT 3
37150: PPUSH
37151: CALL_OW 12
37155: PUSH
37156: LD_INT 0
37158: PUSH
37159: LD_INT 0
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: ST_TO_ADDR
// end ;
37168: LD_VAR 0 1
37172: RET
// export function PrepareApemanEngineer ( ) ; begin
37173: LD_INT 0
37175: PPUSH
// uc_nation := 0 ;
37176: LD_ADDR_OWVAR 21
37180: PUSH
37181: LD_INT 0
37183: ST_TO_ADDR
// hc_sex := sex_male ;
37184: LD_ADDR_OWVAR 27
37188: PUSH
37189: LD_INT 1
37191: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
37192: LD_ADDR_OWVAR 28
37196: PUSH
37197: LD_INT 16
37199: ST_TO_ADDR
// hc_gallery :=  ;
37200: LD_ADDR_OWVAR 33
37204: PUSH
37205: LD_STRING 
37207: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37208: LD_ADDR_OWVAR 31
37212: PUSH
37213: LD_INT 0
37215: PPUSH
37216: LD_INT 3
37218: PPUSH
37219: CALL_OW 12
37223: PUSH
37224: LD_INT 0
37226: PPUSH
37227: LD_INT 3
37229: PPUSH
37230: CALL_OW 12
37234: PUSH
37235: LD_INT 0
37237: PUSH
37238: LD_INT 0
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: ST_TO_ADDR
// end ;
37247: LD_VAR 0 1
37251: RET
// export function PrepareApeman ( agressivity ) ; begin
37252: LD_INT 0
37254: PPUSH
// uc_side := 0 ;
37255: LD_ADDR_OWVAR 20
37259: PUSH
37260: LD_INT 0
37262: ST_TO_ADDR
// uc_nation := 0 ;
37263: LD_ADDR_OWVAR 21
37267: PUSH
37268: LD_INT 0
37270: ST_TO_ADDR
// hc_sex := sex_male ;
37271: LD_ADDR_OWVAR 27
37275: PUSH
37276: LD_INT 1
37278: ST_TO_ADDR
// hc_class := class_apeman ;
37279: LD_ADDR_OWVAR 28
37283: PUSH
37284: LD_INT 12
37286: ST_TO_ADDR
// hc_gallery :=  ;
37287: LD_ADDR_OWVAR 33
37291: PUSH
37292: LD_STRING 
37294: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37295: LD_ADDR_OWVAR 35
37299: PUSH
37300: LD_VAR 0 1
37304: NEG
37305: PPUSH
37306: LD_VAR 0 1
37310: PPUSH
37311: CALL_OW 12
37315: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37316: LD_ADDR_OWVAR 31
37320: PUSH
37321: LD_INT 0
37323: PPUSH
37324: LD_INT 3
37326: PPUSH
37327: CALL_OW 12
37331: PUSH
37332: LD_INT 0
37334: PPUSH
37335: LD_INT 3
37337: PPUSH
37338: CALL_OW 12
37342: PUSH
37343: LD_INT 0
37345: PUSH
37346: LD_INT 0
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: ST_TO_ADDR
// end ;
37355: LD_VAR 0 2
37359: RET
// export function PrepareTiger ( agressivity ) ; begin
37360: LD_INT 0
37362: PPUSH
// uc_side := 0 ;
37363: LD_ADDR_OWVAR 20
37367: PUSH
37368: LD_INT 0
37370: ST_TO_ADDR
// uc_nation := 0 ;
37371: LD_ADDR_OWVAR 21
37375: PUSH
37376: LD_INT 0
37378: ST_TO_ADDR
// hc_class := class_tiger ;
37379: LD_ADDR_OWVAR 28
37383: PUSH
37384: LD_INT 14
37386: ST_TO_ADDR
// hc_gallery :=  ;
37387: LD_ADDR_OWVAR 33
37391: PUSH
37392: LD_STRING 
37394: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37395: LD_ADDR_OWVAR 35
37399: PUSH
37400: LD_VAR 0 1
37404: NEG
37405: PPUSH
37406: LD_VAR 0 1
37410: PPUSH
37411: CALL_OW 12
37415: ST_TO_ADDR
// end ;
37416: LD_VAR 0 2
37420: RET
// export function PrepareEnchidna ( ) ; begin
37421: LD_INT 0
37423: PPUSH
// uc_side := 0 ;
37424: LD_ADDR_OWVAR 20
37428: PUSH
37429: LD_INT 0
37431: ST_TO_ADDR
// uc_nation := 0 ;
37432: LD_ADDR_OWVAR 21
37436: PUSH
37437: LD_INT 0
37439: ST_TO_ADDR
// hc_class := class_baggie ;
37440: LD_ADDR_OWVAR 28
37444: PUSH
37445: LD_INT 13
37447: ST_TO_ADDR
// hc_gallery :=  ;
37448: LD_ADDR_OWVAR 33
37452: PUSH
37453: LD_STRING 
37455: ST_TO_ADDR
// end ;
37456: LD_VAR 0 1
37460: RET
// export function PrepareFrog ( ) ; begin
37461: LD_INT 0
37463: PPUSH
// uc_side := 0 ;
37464: LD_ADDR_OWVAR 20
37468: PUSH
37469: LD_INT 0
37471: ST_TO_ADDR
// uc_nation := 0 ;
37472: LD_ADDR_OWVAR 21
37476: PUSH
37477: LD_INT 0
37479: ST_TO_ADDR
// hc_class := class_frog ;
37480: LD_ADDR_OWVAR 28
37484: PUSH
37485: LD_INT 19
37487: ST_TO_ADDR
// hc_gallery :=  ;
37488: LD_ADDR_OWVAR 33
37492: PUSH
37493: LD_STRING 
37495: ST_TO_ADDR
// end ;
37496: LD_VAR 0 1
37500: RET
// export function PrepareFish ( ) ; begin
37501: LD_INT 0
37503: PPUSH
// uc_side := 0 ;
37504: LD_ADDR_OWVAR 20
37508: PUSH
37509: LD_INT 0
37511: ST_TO_ADDR
// uc_nation := 0 ;
37512: LD_ADDR_OWVAR 21
37516: PUSH
37517: LD_INT 0
37519: ST_TO_ADDR
// hc_class := class_fish ;
37520: LD_ADDR_OWVAR 28
37524: PUSH
37525: LD_INT 20
37527: ST_TO_ADDR
// hc_gallery :=  ;
37528: LD_ADDR_OWVAR 33
37532: PUSH
37533: LD_STRING 
37535: ST_TO_ADDR
// end ;
37536: LD_VAR 0 1
37540: RET
// export function PrepareBird ( ) ; begin
37541: LD_INT 0
37543: PPUSH
// uc_side := 0 ;
37544: LD_ADDR_OWVAR 20
37548: PUSH
37549: LD_INT 0
37551: ST_TO_ADDR
// uc_nation := 0 ;
37552: LD_ADDR_OWVAR 21
37556: PUSH
37557: LD_INT 0
37559: ST_TO_ADDR
// hc_class := class_phororhacos ;
37560: LD_ADDR_OWVAR 28
37564: PUSH
37565: LD_INT 18
37567: ST_TO_ADDR
// hc_gallery :=  ;
37568: LD_ADDR_OWVAR 33
37572: PUSH
37573: LD_STRING 
37575: ST_TO_ADDR
// end ;
37576: LD_VAR 0 1
37580: RET
// export function PrepareHorse ( ) ; begin
37581: LD_INT 0
37583: PPUSH
// uc_side := 0 ;
37584: LD_ADDR_OWVAR 20
37588: PUSH
37589: LD_INT 0
37591: ST_TO_ADDR
// uc_nation := 0 ;
37592: LD_ADDR_OWVAR 21
37596: PUSH
37597: LD_INT 0
37599: ST_TO_ADDR
// hc_class := class_horse ;
37600: LD_ADDR_OWVAR 28
37604: PUSH
37605: LD_INT 21
37607: ST_TO_ADDR
// hc_gallery :=  ;
37608: LD_ADDR_OWVAR 33
37612: PUSH
37613: LD_STRING 
37615: ST_TO_ADDR
// end ;
37616: LD_VAR 0 1
37620: RET
// export function PrepareMastodont ( ) ; begin
37621: LD_INT 0
37623: PPUSH
// uc_side := 0 ;
37624: LD_ADDR_OWVAR 20
37628: PUSH
37629: LD_INT 0
37631: ST_TO_ADDR
// uc_nation := 0 ;
37632: LD_ADDR_OWVAR 21
37636: PUSH
37637: LD_INT 0
37639: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37640: LD_ADDR_OWVAR 37
37644: PUSH
37645: LD_INT 31
37647: ST_TO_ADDR
// vc_control := control_rider ;
37648: LD_ADDR_OWVAR 38
37652: PUSH
37653: LD_INT 4
37655: ST_TO_ADDR
// end ;
37656: LD_VAR 0 1
37660: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37661: LD_INT 0
37663: PPUSH
37664: PPUSH
37665: PPUSH
// uc_side = 0 ;
37666: LD_ADDR_OWVAR 20
37670: PUSH
37671: LD_INT 0
37673: ST_TO_ADDR
// uc_nation = 0 ;
37674: LD_ADDR_OWVAR 21
37678: PUSH
37679: LD_INT 0
37681: ST_TO_ADDR
// InitHc_All ( ) ;
37682: CALL_OW 584
// InitVc ;
37686: CALL_OW 20
// if mastodonts then
37690: LD_VAR 0 6
37694: IFFALSE 37761
// for i = 1 to mastodonts do
37696: LD_ADDR_VAR 0 11
37700: PUSH
37701: DOUBLE
37702: LD_INT 1
37704: DEC
37705: ST_TO_ADDR
37706: LD_VAR 0 6
37710: PUSH
37711: FOR_TO
37712: IFFALSE 37759
// begin vc_chassis := 31 ;
37714: LD_ADDR_OWVAR 37
37718: PUSH
37719: LD_INT 31
37721: ST_TO_ADDR
// vc_control := control_rider ;
37722: LD_ADDR_OWVAR 38
37726: PUSH
37727: LD_INT 4
37729: ST_TO_ADDR
// animal := CreateVehicle ;
37730: LD_ADDR_VAR 0 12
37734: PUSH
37735: CALL_OW 45
37739: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37740: LD_VAR 0 12
37744: PPUSH
37745: LD_VAR 0 8
37749: PPUSH
37750: LD_INT 0
37752: PPUSH
37753: CALL 39889 0 3
// end ;
37757: GO 37711
37759: POP
37760: POP
// if horses then
37761: LD_VAR 0 5
37765: IFFALSE 37832
// for i = 1 to horses do
37767: LD_ADDR_VAR 0 11
37771: PUSH
37772: DOUBLE
37773: LD_INT 1
37775: DEC
37776: ST_TO_ADDR
37777: LD_VAR 0 5
37781: PUSH
37782: FOR_TO
37783: IFFALSE 37830
// begin hc_class := 21 ;
37785: LD_ADDR_OWVAR 28
37789: PUSH
37790: LD_INT 21
37792: ST_TO_ADDR
// hc_gallery :=  ;
37793: LD_ADDR_OWVAR 33
37797: PUSH
37798: LD_STRING 
37800: ST_TO_ADDR
// animal := CreateHuman ;
37801: LD_ADDR_VAR 0 12
37805: PUSH
37806: CALL_OW 44
37810: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37811: LD_VAR 0 12
37815: PPUSH
37816: LD_VAR 0 8
37820: PPUSH
37821: LD_INT 0
37823: PPUSH
37824: CALL 39889 0 3
// end ;
37828: GO 37782
37830: POP
37831: POP
// if birds then
37832: LD_VAR 0 1
37836: IFFALSE 37903
// for i = 1 to birds do
37838: LD_ADDR_VAR 0 11
37842: PUSH
37843: DOUBLE
37844: LD_INT 1
37846: DEC
37847: ST_TO_ADDR
37848: LD_VAR 0 1
37852: PUSH
37853: FOR_TO
37854: IFFALSE 37901
// begin hc_class := 18 ;
37856: LD_ADDR_OWVAR 28
37860: PUSH
37861: LD_INT 18
37863: ST_TO_ADDR
// hc_gallery =  ;
37864: LD_ADDR_OWVAR 33
37868: PUSH
37869: LD_STRING 
37871: ST_TO_ADDR
// animal := CreateHuman ;
37872: LD_ADDR_VAR 0 12
37876: PUSH
37877: CALL_OW 44
37881: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37882: LD_VAR 0 12
37886: PPUSH
37887: LD_VAR 0 8
37891: PPUSH
37892: LD_INT 0
37894: PPUSH
37895: CALL 39889 0 3
// end ;
37899: GO 37853
37901: POP
37902: POP
// if tigers then
37903: LD_VAR 0 2
37907: IFFALSE 37991
// for i = 1 to tigers do
37909: LD_ADDR_VAR 0 11
37913: PUSH
37914: DOUBLE
37915: LD_INT 1
37917: DEC
37918: ST_TO_ADDR
37919: LD_VAR 0 2
37923: PUSH
37924: FOR_TO
37925: IFFALSE 37989
// begin hc_class = class_tiger ;
37927: LD_ADDR_OWVAR 28
37931: PUSH
37932: LD_INT 14
37934: ST_TO_ADDR
// hc_gallery =  ;
37935: LD_ADDR_OWVAR 33
37939: PUSH
37940: LD_STRING 
37942: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37943: LD_ADDR_OWVAR 35
37947: PUSH
37948: LD_INT 7
37950: NEG
37951: PPUSH
37952: LD_INT 7
37954: PPUSH
37955: CALL_OW 12
37959: ST_TO_ADDR
// animal := CreateHuman ;
37960: LD_ADDR_VAR 0 12
37964: PUSH
37965: CALL_OW 44
37969: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37970: LD_VAR 0 12
37974: PPUSH
37975: LD_VAR 0 8
37979: PPUSH
37980: LD_INT 0
37982: PPUSH
37983: CALL 39889 0 3
// end ;
37987: GO 37924
37989: POP
37990: POP
// if apemans then
37991: LD_VAR 0 3
37995: IFFALSE 38118
// for i = 1 to apemans do
37997: LD_ADDR_VAR 0 11
38001: PUSH
38002: DOUBLE
38003: LD_INT 1
38005: DEC
38006: ST_TO_ADDR
38007: LD_VAR 0 3
38011: PUSH
38012: FOR_TO
38013: IFFALSE 38116
// begin hc_class = class_apeman ;
38015: LD_ADDR_OWVAR 28
38019: PUSH
38020: LD_INT 12
38022: ST_TO_ADDR
// hc_gallery =  ;
38023: LD_ADDR_OWVAR 33
38027: PUSH
38028: LD_STRING 
38030: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
38031: LD_ADDR_OWVAR 35
38035: PUSH
38036: LD_INT 2
38038: NEG
38039: PPUSH
38040: LD_INT 2
38042: PPUSH
38043: CALL_OW 12
38047: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38048: LD_ADDR_OWVAR 31
38052: PUSH
38053: LD_INT 1
38055: PPUSH
38056: LD_INT 3
38058: PPUSH
38059: CALL_OW 12
38063: PUSH
38064: LD_INT 1
38066: PPUSH
38067: LD_INT 3
38069: PPUSH
38070: CALL_OW 12
38074: PUSH
38075: LD_INT 0
38077: PUSH
38078: LD_INT 0
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: LIST
38085: LIST
38086: ST_TO_ADDR
// animal := CreateHuman ;
38087: LD_ADDR_VAR 0 12
38091: PUSH
38092: CALL_OW 44
38096: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38097: LD_VAR 0 12
38101: PPUSH
38102: LD_VAR 0 8
38106: PPUSH
38107: LD_INT 0
38109: PPUSH
38110: CALL 39889 0 3
// end ;
38114: GO 38012
38116: POP
38117: POP
// if enchidnas then
38118: LD_VAR 0 4
38122: IFFALSE 38189
// for i = 1 to enchidnas do
38124: LD_ADDR_VAR 0 11
38128: PUSH
38129: DOUBLE
38130: LD_INT 1
38132: DEC
38133: ST_TO_ADDR
38134: LD_VAR 0 4
38138: PUSH
38139: FOR_TO
38140: IFFALSE 38187
// begin hc_class = 13 ;
38142: LD_ADDR_OWVAR 28
38146: PUSH
38147: LD_INT 13
38149: ST_TO_ADDR
// hc_gallery =  ;
38150: LD_ADDR_OWVAR 33
38154: PUSH
38155: LD_STRING 
38157: ST_TO_ADDR
// animal := CreateHuman ;
38158: LD_ADDR_VAR 0 12
38162: PUSH
38163: CALL_OW 44
38167: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38168: LD_VAR 0 12
38172: PPUSH
38173: LD_VAR 0 8
38177: PPUSH
38178: LD_INT 0
38180: PPUSH
38181: CALL 39889 0 3
// end ;
38185: GO 38139
38187: POP
38188: POP
// if fishes then
38189: LD_VAR 0 7
38193: IFFALSE 38260
// for i = 1 to fishes do
38195: LD_ADDR_VAR 0 11
38199: PUSH
38200: DOUBLE
38201: LD_INT 1
38203: DEC
38204: ST_TO_ADDR
38205: LD_VAR 0 7
38209: PUSH
38210: FOR_TO
38211: IFFALSE 38258
// begin hc_class = 20 ;
38213: LD_ADDR_OWVAR 28
38217: PUSH
38218: LD_INT 20
38220: ST_TO_ADDR
// hc_gallery =  ;
38221: LD_ADDR_OWVAR 33
38225: PUSH
38226: LD_STRING 
38228: ST_TO_ADDR
// animal := CreateHuman ;
38229: LD_ADDR_VAR 0 12
38233: PUSH
38234: CALL_OW 44
38238: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
38239: LD_VAR 0 12
38243: PPUSH
38244: LD_VAR 0 9
38248: PPUSH
38249: LD_INT 0
38251: PPUSH
38252: CALL 39889 0 3
// end ;
38256: GO 38210
38258: POP
38259: POP
// end ;
38260: LD_VAR 0 10
38264: RET
// export function WantHeal ( sci , unit ) ; begin
38265: LD_INT 0
38267: PPUSH
// if GetTaskList ( sci ) > 0 then
38268: LD_VAR 0 1
38272: PPUSH
38273: CALL_OW 437
38277: PUSH
38278: LD_INT 0
38280: GREATER
38281: IFFALSE 38351
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38283: LD_VAR 0 1
38287: PPUSH
38288: CALL_OW 437
38292: PUSH
38293: LD_INT 1
38295: ARRAY
38296: PUSH
38297: LD_INT 1
38299: ARRAY
38300: PUSH
38301: LD_STRING l
38303: EQUAL
38304: PUSH
38305: LD_VAR 0 1
38309: PPUSH
38310: CALL_OW 437
38314: PUSH
38315: LD_INT 1
38317: ARRAY
38318: PUSH
38319: LD_INT 4
38321: ARRAY
38322: PUSH
38323: LD_VAR 0 2
38327: EQUAL
38328: AND
38329: IFFALSE 38341
// result := true else
38331: LD_ADDR_VAR 0 3
38335: PUSH
38336: LD_INT 1
38338: ST_TO_ADDR
38339: GO 38349
// result := false ;
38341: LD_ADDR_VAR 0 3
38345: PUSH
38346: LD_INT 0
38348: ST_TO_ADDR
// end else
38349: GO 38359
// result := false ;
38351: LD_ADDR_VAR 0 3
38355: PUSH
38356: LD_INT 0
38358: ST_TO_ADDR
// end ;
38359: LD_VAR 0 3
38363: RET
// export function HealTarget ( sci ) ; begin
38364: LD_INT 0
38366: PPUSH
// if not sci then
38367: LD_VAR 0 1
38371: NOT
38372: IFFALSE 38376
// exit ;
38374: GO 38441
// result := 0 ;
38376: LD_ADDR_VAR 0 2
38380: PUSH
38381: LD_INT 0
38383: ST_TO_ADDR
// if GetTaskList ( sci ) then
38384: LD_VAR 0 1
38388: PPUSH
38389: CALL_OW 437
38393: IFFALSE 38441
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38395: LD_VAR 0 1
38399: PPUSH
38400: CALL_OW 437
38404: PUSH
38405: LD_INT 1
38407: ARRAY
38408: PUSH
38409: LD_INT 1
38411: ARRAY
38412: PUSH
38413: LD_STRING l
38415: EQUAL
38416: IFFALSE 38441
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38418: LD_ADDR_VAR 0 2
38422: PUSH
38423: LD_VAR 0 1
38427: PPUSH
38428: CALL_OW 437
38432: PUSH
38433: LD_INT 1
38435: ARRAY
38436: PUSH
38437: LD_INT 4
38439: ARRAY
38440: ST_TO_ADDR
// end ;
38441: LD_VAR 0 2
38445: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38446: LD_INT 0
38448: PPUSH
38449: PPUSH
38450: PPUSH
38451: PPUSH
// if not base_units then
38452: LD_VAR 0 1
38456: NOT
38457: IFFALSE 38461
// exit ;
38459: GO 38548
// result := false ;
38461: LD_ADDR_VAR 0 2
38465: PUSH
38466: LD_INT 0
38468: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38469: LD_ADDR_VAR 0 5
38473: PUSH
38474: LD_VAR 0 1
38478: PPUSH
38479: LD_INT 21
38481: PUSH
38482: LD_INT 3
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PPUSH
38489: CALL_OW 72
38493: ST_TO_ADDR
// if not tmp then
38494: LD_VAR 0 5
38498: NOT
38499: IFFALSE 38503
// exit ;
38501: GO 38548
// for i in tmp do
38503: LD_ADDR_VAR 0 3
38507: PUSH
38508: LD_VAR 0 5
38512: PUSH
38513: FOR_IN
38514: IFFALSE 38546
// begin result := EnemyInRange ( i , 22 ) ;
38516: LD_ADDR_VAR 0 2
38520: PUSH
38521: LD_VAR 0 3
38525: PPUSH
38526: LD_INT 22
38528: PPUSH
38529: CALL 36135 0 2
38533: ST_TO_ADDR
// if result then
38534: LD_VAR 0 2
38538: IFFALSE 38544
// exit ;
38540: POP
38541: POP
38542: GO 38548
// end ;
38544: GO 38513
38546: POP
38547: POP
// end ;
38548: LD_VAR 0 2
38552: RET
// export function FilterByTag ( units , tag ) ; begin
38553: LD_INT 0
38555: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38556: LD_ADDR_VAR 0 3
38560: PUSH
38561: LD_VAR 0 1
38565: PPUSH
38566: LD_INT 120
38568: PUSH
38569: LD_VAR 0 2
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PPUSH
38578: CALL_OW 72
38582: ST_TO_ADDR
// end ;
38583: LD_VAR 0 3
38587: RET
// export function IsDriver ( un ) ; begin
38588: LD_INT 0
38590: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38591: LD_ADDR_VAR 0 2
38595: PUSH
38596: LD_VAR 0 1
38600: PUSH
38601: LD_INT 55
38603: PUSH
38604: EMPTY
38605: LIST
38606: PPUSH
38607: CALL_OW 69
38611: IN
38612: ST_TO_ADDR
// end ;
38613: LD_VAR 0 2
38617: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38618: LD_INT 0
38620: PPUSH
38621: PPUSH
// list := [ ] ;
38622: LD_ADDR_VAR 0 5
38626: PUSH
38627: EMPTY
38628: ST_TO_ADDR
// case d of 0 :
38629: LD_VAR 0 3
38633: PUSH
38634: LD_INT 0
38636: DOUBLE
38637: EQUAL
38638: IFTRUE 38642
38640: GO 38775
38642: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38643: LD_ADDR_VAR 0 5
38647: PUSH
38648: LD_VAR 0 1
38652: PUSH
38653: LD_INT 4
38655: MINUS
38656: PUSH
38657: LD_VAR 0 2
38661: PUSH
38662: LD_INT 4
38664: MINUS
38665: PUSH
38666: LD_INT 2
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: LIST
38673: PUSH
38674: LD_VAR 0 1
38678: PUSH
38679: LD_INT 3
38681: MINUS
38682: PUSH
38683: LD_VAR 0 2
38687: PUSH
38688: LD_INT 1
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: LIST
38695: PUSH
38696: LD_VAR 0 1
38700: PUSH
38701: LD_INT 4
38703: PLUS
38704: PUSH
38705: LD_VAR 0 2
38709: PUSH
38710: LD_INT 4
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: LIST
38717: PUSH
38718: LD_VAR 0 1
38722: PUSH
38723: LD_INT 3
38725: PLUS
38726: PUSH
38727: LD_VAR 0 2
38731: PUSH
38732: LD_INT 3
38734: PLUS
38735: PUSH
38736: LD_INT 5
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: LIST
38743: PUSH
38744: LD_VAR 0 1
38748: PUSH
38749: LD_VAR 0 2
38753: PUSH
38754: LD_INT 4
38756: PLUS
38757: PUSH
38758: LD_INT 0
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: LIST
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: ST_TO_ADDR
// end ; 1 :
38773: GO 39473
38775: LD_INT 1
38777: DOUBLE
38778: EQUAL
38779: IFTRUE 38783
38781: GO 38916
38783: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38784: LD_ADDR_VAR 0 5
38788: PUSH
38789: LD_VAR 0 1
38793: PUSH
38794: LD_VAR 0 2
38798: PUSH
38799: LD_INT 4
38801: MINUS
38802: PUSH
38803: LD_INT 3
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: LIST
38810: PUSH
38811: LD_VAR 0 1
38815: PUSH
38816: LD_INT 3
38818: MINUS
38819: PUSH
38820: LD_VAR 0 2
38824: PUSH
38825: LD_INT 3
38827: MINUS
38828: PUSH
38829: LD_INT 2
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: LIST
38836: PUSH
38837: LD_VAR 0 1
38841: PUSH
38842: LD_INT 4
38844: MINUS
38845: PUSH
38846: LD_VAR 0 2
38850: PUSH
38851: LD_INT 1
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: LIST
38858: PUSH
38859: LD_VAR 0 1
38863: PUSH
38864: LD_VAR 0 2
38868: PUSH
38869: LD_INT 3
38871: PLUS
38872: PUSH
38873: LD_INT 0
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: LIST
38880: PUSH
38881: LD_VAR 0 1
38885: PUSH
38886: LD_INT 4
38888: PLUS
38889: PUSH
38890: LD_VAR 0 2
38894: PUSH
38895: LD_INT 4
38897: PLUS
38898: PUSH
38899: LD_INT 5
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: LIST
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: ST_TO_ADDR
// end ; 2 :
38914: GO 39473
38916: LD_INT 2
38918: DOUBLE
38919: EQUAL
38920: IFTRUE 38924
38922: GO 39053
38924: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38925: LD_ADDR_VAR 0 5
38929: PUSH
38930: LD_VAR 0 1
38934: PUSH
38935: LD_VAR 0 2
38939: PUSH
38940: LD_INT 3
38942: MINUS
38943: PUSH
38944: LD_INT 3
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: LIST
38951: PUSH
38952: LD_VAR 0 1
38956: PUSH
38957: LD_INT 4
38959: PLUS
38960: PUSH
38961: LD_VAR 0 2
38965: PUSH
38966: LD_INT 4
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: LIST
38973: PUSH
38974: LD_VAR 0 1
38978: PUSH
38979: LD_VAR 0 2
38983: PUSH
38984: LD_INT 4
38986: PLUS
38987: PUSH
38988: LD_INT 0
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: LIST
38995: PUSH
38996: LD_VAR 0 1
39000: PUSH
39001: LD_INT 3
39003: MINUS
39004: PUSH
39005: LD_VAR 0 2
39009: PUSH
39010: LD_INT 1
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: LIST
39017: PUSH
39018: LD_VAR 0 1
39022: PUSH
39023: LD_INT 4
39025: MINUS
39026: PUSH
39027: LD_VAR 0 2
39031: PUSH
39032: LD_INT 4
39034: MINUS
39035: PUSH
39036: LD_INT 2
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: LIST
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: ST_TO_ADDR
// end ; 3 :
39051: GO 39473
39053: LD_INT 3
39055: DOUBLE
39056: EQUAL
39057: IFTRUE 39061
39059: GO 39194
39061: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39062: LD_ADDR_VAR 0 5
39066: PUSH
39067: LD_VAR 0 1
39071: PUSH
39072: LD_INT 3
39074: PLUS
39075: PUSH
39076: LD_VAR 0 2
39080: PUSH
39081: LD_INT 4
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: LIST
39088: PUSH
39089: LD_VAR 0 1
39093: PUSH
39094: LD_INT 4
39096: PLUS
39097: PUSH
39098: LD_VAR 0 2
39102: PUSH
39103: LD_INT 4
39105: PLUS
39106: PUSH
39107: LD_INT 5
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: LIST
39114: PUSH
39115: LD_VAR 0 1
39119: PUSH
39120: LD_INT 4
39122: MINUS
39123: PUSH
39124: LD_VAR 0 2
39128: PUSH
39129: LD_INT 1
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: LIST
39136: PUSH
39137: LD_VAR 0 1
39141: PUSH
39142: LD_VAR 0 2
39146: PUSH
39147: LD_INT 4
39149: MINUS
39150: PUSH
39151: LD_INT 3
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: LIST
39158: PUSH
39159: LD_VAR 0 1
39163: PUSH
39164: LD_INT 3
39166: MINUS
39167: PUSH
39168: LD_VAR 0 2
39172: PUSH
39173: LD_INT 3
39175: MINUS
39176: PUSH
39177: LD_INT 2
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: LIST
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: ST_TO_ADDR
// end ; 4 :
39192: GO 39473
39194: LD_INT 4
39196: DOUBLE
39197: EQUAL
39198: IFTRUE 39202
39200: GO 39335
39202: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
39203: LD_ADDR_VAR 0 5
39207: PUSH
39208: LD_VAR 0 1
39212: PUSH
39213: LD_VAR 0 2
39217: PUSH
39218: LD_INT 4
39220: PLUS
39221: PUSH
39222: LD_INT 0
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: LIST
39229: PUSH
39230: LD_VAR 0 1
39234: PUSH
39235: LD_INT 3
39237: PLUS
39238: PUSH
39239: LD_VAR 0 2
39243: PUSH
39244: LD_INT 3
39246: PLUS
39247: PUSH
39248: LD_INT 5
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: LIST
39255: PUSH
39256: LD_VAR 0 1
39260: PUSH
39261: LD_INT 4
39263: PLUS
39264: PUSH
39265: LD_VAR 0 2
39269: PUSH
39270: LD_INT 4
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: LIST
39277: PUSH
39278: LD_VAR 0 1
39282: PUSH
39283: LD_VAR 0 2
39287: PUSH
39288: LD_INT 3
39290: MINUS
39291: PUSH
39292: LD_INT 3
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: LIST
39299: PUSH
39300: LD_VAR 0 1
39304: PUSH
39305: LD_INT 4
39307: MINUS
39308: PUSH
39309: LD_VAR 0 2
39313: PUSH
39314: LD_INT 4
39316: MINUS
39317: PUSH
39318: LD_INT 2
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: LIST
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: ST_TO_ADDR
// end ; 5 :
39333: GO 39473
39335: LD_INT 5
39337: DOUBLE
39338: EQUAL
39339: IFTRUE 39343
39341: GO 39472
39343: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39344: LD_ADDR_VAR 0 5
39348: PUSH
39349: LD_VAR 0 1
39353: PUSH
39354: LD_INT 4
39356: MINUS
39357: PUSH
39358: LD_VAR 0 2
39362: PUSH
39363: LD_INT 1
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: LIST
39370: PUSH
39371: LD_VAR 0 1
39375: PUSH
39376: LD_VAR 0 2
39380: PUSH
39381: LD_INT 4
39383: MINUS
39384: PUSH
39385: LD_INT 3
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: LIST
39392: PUSH
39393: LD_VAR 0 1
39397: PUSH
39398: LD_INT 4
39400: PLUS
39401: PUSH
39402: LD_VAR 0 2
39406: PUSH
39407: LD_INT 4
39409: PLUS
39410: PUSH
39411: LD_INT 5
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: LIST
39418: PUSH
39419: LD_VAR 0 1
39423: PUSH
39424: LD_INT 3
39426: PLUS
39427: PUSH
39428: LD_VAR 0 2
39432: PUSH
39433: LD_INT 4
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: LIST
39440: PUSH
39441: LD_VAR 0 1
39445: PUSH
39446: LD_VAR 0 2
39450: PUSH
39451: LD_INT 3
39453: PLUS
39454: PUSH
39455: LD_INT 0
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: LIST
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: ST_TO_ADDR
// end ; end ;
39470: GO 39473
39472: POP
// result := list ;
39473: LD_ADDR_VAR 0 4
39477: PUSH
39478: LD_VAR 0 5
39482: ST_TO_ADDR
// end ;
39483: LD_VAR 0 4
39487: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39488: LD_INT 0
39490: PPUSH
39491: PPUSH
39492: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39493: LD_VAR 0 1
39497: NOT
39498: PUSH
39499: LD_VAR 0 2
39503: PUSH
39504: LD_INT 1
39506: PUSH
39507: LD_INT 2
39509: PUSH
39510: LD_INT 3
39512: PUSH
39513: LD_INT 4
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: IN
39522: NOT
39523: OR
39524: IFFALSE 39528
// exit ;
39526: GO 39611
// tmp := [ ] ;
39528: LD_ADDR_VAR 0 5
39532: PUSH
39533: EMPTY
39534: ST_TO_ADDR
// for i in units do
39535: LD_ADDR_VAR 0 4
39539: PUSH
39540: LD_VAR 0 1
39544: PUSH
39545: FOR_IN
39546: IFFALSE 39580
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39548: LD_ADDR_VAR 0 5
39552: PUSH
39553: LD_VAR 0 5
39557: PPUSH
39558: LD_VAR 0 4
39562: PPUSH
39563: LD_VAR 0 2
39567: PPUSH
39568: CALL_OW 259
39572: PPUSH
39573: CALL 40971 0 2
39577: ST_TO_ADDR
39578: GO 39545
39580: POP
39581: POP
// if not tmp then
39582: LD_VAR 0 5
39586: NOT
39587: IFFALSE 39591
// exit ;
39589: GO 39611
// result := SortListByListDesc ( units , tmp ) ;
39591: LD_ADDR_VAR 0 3
39595: PUSH
39596: LD_VAR 0 1
39600: PPUSH
39601: LD_VAR 0 5
39605: PPUSH
39606: CALL_OW 77
39610: ST_TO_ADDR
// end ;
39611: LD_VAR 0 3
39615: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39616: LD_INT 0
39618: PPUSH
39619: PPUSH
39620: PPUSH
// result := false ;
39621: LD_ADDR_VAR 0 3
39625: PUSH
39626: LD_INT 0
39628: ST_TO_ADDR
// if not building then
39629: LD_VAR 0 2
39633: NOT
39634: IFFALSE 39638
// exit ;
39636: GO 39776
// x := GetX ( building ) ;
39638: LD_ADDR_VAR 0 4
39642: PUSH
39643: LD_VAR 0 2
39647: PPUSH
39648: CALL_OW 250
39652: ST_TO_ADDR
// y := GetY ( building ) ;
39653: LD_ADDR_VAR 0 5
39657: PUSH
39658: LD_VAR 0 2
39662: PPUSH
39663: CALL_OW 251
39667: ST_TO_ADDR
// if not x or not y then
39668: LD_VAR 0 4
39672: NOT
39673: PUSH
39674: LD_VAR 0 5
39678: NOT
39679: OR
39680: IFFALSE 39684
// exit ;
39682: GO 39776
// if GetTaskList ( unit ) then
39684: LD_VAR 0 1
39688: PPUSH
39689: CALL_OW 437
39693: IFFALSE 39776
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39695: LD_STRING e
39697: PUSH
39698: LD_VAR 0 1
39702: PPUSH
39703: CALL_OW 437
39707: PUSH
39708: LD_INT 1
39710: ARRAY
39711: PUSH
39712: LD_INT 1
39714: ARRAY
39715: EQUAL
39716: PUSH
39717: LD_VAR 0 4
39721: PUSH
39722: LD_VAR 0 1
39726: PPUSH
39727: CALL_OW 437
39731: PUSH
39732: LD_INT 1
39734: ARRAY
39735: PUSH
39736: LD_INT 2
39738: ARRAY
39739: EQUAL
39740: AND
39741: PUSH
39742: LD_VAR 0 5
39746: PUSH
39747: LD_VAR 0 1
39751: PPUSH
39752: CALL_OW 437
39756: PUSH
39757: LD_INT 1
39759: ARRAY
39760: PUSH
39761: LD_INT 3
39763: ARRAY
39764: EQUAL
39765: AND
39766: IFFALSE 39776
// result := true end ;
39768: LD_ADDR_VAR 0 3
39772: PUSH
39773: LD_INT 1
39775: ST_TO_ADDR
// end ;
39776: LD_VAR 0 3
39780: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39781: LD_INT 0
39783: PPUSH
// result := false ;
39784: LD_ADDR_VAR 0 4
39788: PUSH
39789: LD_INT 0
39791: ST_TO_ADDR
// if GetTaskList ( unit ) then
39792: LD_VAR 0 1
39796: PPUSH
39797: CALL_OW 437
39801: IFFALSE 39884
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39803: LD_STRING M
39805: PUSH
39806: LD_VAR 0 1
39810: PPUSH
39811: CALL_OW 437
39815: PUSH
39816: LD_INT 1
39818: ARRAY
39819: PUSH
39820: LD_INT 1
39822: ARRAY
39823: EQUAL
39824: PUSH
39825: LD_VAR 0 2
39829: PUSH
39830: LD_VAR 0 1
39834: PPUSH
39835: CALL_OW 437
39839: PUSH
39840: LD_INT 1
39842: ARRAY
39843: PUSH
39844: LD_INT 2
39846: ARRAY
39847: EQUAL
39848: AND
39849: PUSH
39850: LD_VAR 0 3
39854: PUSH
39855: LD_VAR 0 1
39859: PPUSH
39860: CALL_OW 437
39864: PUSH
39865: LD_INT 1
39867: ARRAY
39868: PUSH
39869: LD_INT 3
39871: ARRAY
39872: EQUAL
39873: AND
39874: IFFALSE 39884
// result := true ;
39876: LD_ADDR_VAR 0 4
39880: PUSH
39881: LD_INT 1
39883: ST_TO_ADDR
// end ; end ;
39884: LD_VAR 0 4
39888: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39889: LD_INT 0
39891: PPUSH
39892: PPUSH
39893: PPUSH
39894: PPUSH
// if not unit or not area then
39895: LD_VAR 0 1
39899: NOT
39900: PUSH
39901: LD_VAR 0 2
39905: NOT
39906: OR
39907: IFFALSE 39911
// exit ;
39909: GO 40074
// tmp := AreaToList ( area , i ) ;
39911: LD_ADDR_VAR 0 6
39915: PUSH
39916: LD_VAR 0 2
39920: PPUSH
39921: LD_VAR 0 5
39925: PPUSH
39926: CALL_OW 517
39930: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39931: LD_ADDR_VAR 0 5
39935: PUSH
39936: DOUBLE
39937: LD_INT 1
39939: DEC
39940: ST_TO_ADDR
39941: LD_VAR 0 6
39945: PUSH
39946: LD_INT 1
39948: ARRAY
39949: PUSH
39950: FOR_TO
39951: IFFALSE 40072
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39953: LD_ADDR_VAR 0 7
39957: PUSH
39958: LD_VAR 0 6
39962: PUSH
39963: LD_INT 1
39965: ARRAY
39966: PUSH
39967: LD_VAR 0 5
39971: ARRAY
39972: PUSH
39973: LD_VAR 0 6
39977: PUSH
39978: LD_INT 2
39980: ARRAY
39981: PUSH
39982: LD_VAR 0 5
39986: ARRAY
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
39992: LD_INT 92
39994: PUSH
39995: LD_VAR 0 7
39999: PUSH
40000: LD_INT 1
40002: ARRAY
40003: PUSH
40004: LD_VAR 0 7
40008: PUSH
40009: LD_INT 2
40011: ARRAY
40012: PUSH
40013: LD_INT 3
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: PPUSH
40022: CALL_OW 69
40026: PUSH
40027: LD_INT 0
40029: EQUAL
40030: IFFALSE 40070
// begin PlaceUnitArea ( unit , area , mode ) ;
40032: LD_VAR 0 1
40036: PPUSH
40037: LD_VAR 0 2
40041: PPUSH
40042: LD_VAR 0 3
40046: PPUSH
40047: CALL_OW 49
// result := IsPlaced ( unit ) ;
40051: LD_ADDR_VAR 0 4
40055: PUSH
40056: LD_VAR 0 1
40060: PPUSH
40061: CALL_OW 305
40065: ST_TO_ADDR
// exit ;
40066: POP
40067: POP
40068: GO 40074
// end ; end ;
40070: GO 39950
40072: POP
40073: POP
// end ;
40074: LD_VAR 0 4
40078: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40079: LD_INT 0
40081: PPUSH
40082: PPUSH
40083: PPUSH
// if not side or side > 8 then
40084: LD_VAR 0 1
40088: NOT
40089: PUSH
40090: LD_VAR 0 1
40094: PUSH
40095: LD_INT 8
40097: GREATER
40098: OR
40099: IFFALSE 40103
// exit ;
40101: GO 40290
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40103: LD_ADDR_VAR 0 4
40107: PUSH
40108: LD_INT 22
40110: PUSH
40111: LD_VAR 0 1
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 21
40122: PUSH
40123: LD_INT 3
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PPUSH
40134: CALL_OW 69
40138: ST_TO_ADDR
// if not tmp then
40139: LD_VAR 0 4
40143: NOT
40144: IFFALSE 40148
// exit ;
40146: GO 40290
// enable_addtolog := true ;
40148: LD_ADDR_OWVAR 81
40152: PUSH
40153: LD_INT 1
40155: ST_TO_ADDR
// AddToLog ( [ ) ;
40156: LD_STRING [
40158: PPUSH
40159: CALL_OW 561
// for i in tmp do
40163: LD_ADDR_VAR 0 3
40167: PUSH
40168: LD_VAR 0 4
40172: PUSH
40173: FOR_IN
40174: IFFALSE 40281
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
40176: LD_STRING [
40178: PUSH
40179: LD_VAR 0 3
40183: PPUSH
40184: CALL_OW 266
40188: STR
40189: PUSH
40190: LD_STRING , 
40192: STR
40193: PUSH
40194: LD_VAR 0 3
40198: PPUSH
40199: CALL_OW 250
40203: STR
40204: PUSH
40205: LD_STRING , 
40207: STR
40208: PUSH
40209: LD_VAR 0 3
40213: PPUSH
40214: CALL_OW 251
40218: STR
40219: PUSH
40220: LD_STRING , 
40222: STR
40223: PUSH
40224: LD_VAR 0 3
40228: PPUSH
40229: CALL_OW 254
40233: STR
40234: PUSH
40235: LD_STRING , 
40237: STR
40238: PUSH
40239: LD_VAR 0 3
40243: PPUSH
40244: LD_INT 1
40246: PPUSH
40247: CALL_OW 268
40251: STR
40252: PUSH
40253: LD_STRING , 
40255: STR
40256: PUSH
40257: LD_VAR 0 3
40261: PPUSH
40262: LD_INT 2
40264: PPUSH
40265: CALL_OW 268
40269: STR
40270: PUSH
40271: LD_STRING ],
40273: STR
40274: PPUSH
40275: CALL_OW 561
// end ;
40279: GO 40173
40281: POP
40282: POP
// AddToLog ( ]; ) ;
40283: LD_STRING ];
40285: PPUSH
40286: CALL_OW 561
// end ;
40290: LD_VAR 0 2
40294: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40295: LD_INT 0
40297: PPUSH
40298: PPUSH
40299: PPUSH
40300: PPUSH
40301: PPUSH
// if not area or not rate or not max then
40302: LD_VAR 0 1
40306: NOT
40307: PUSH
40308: LD_VAR 0 2
40312: NOT
40313: OR
40314: PUSH
40315: LD_VAR 0 4
40319: NOT
40320: OR
40321: IFFALSE 40325
// exit ;
40323: GO 40514
// while 1 do
40325: LD_INT 1
40327: IFFALSE 40514
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40329: LD_ADDR_VAR 0 9
40333: PUSH
40334: LD_VAR 0 1
40338: PPUSH
40339: LD_INT 1
40341: PPUSH
40342: CALL_OW 287
40346: PUSH
40347: LD_INT 10
40349: MUL
40350: ST_TO_ADDR
// r := rate / 10 ;
40351: LD_ADDR_VAR 0 7
40355: PUSH
40356: LD_VAR 0 2
40360: PUSH
40361: LD_INT 10
40363: DIVREAL
40364: ST_TO_ADDR
// time := 1 1$00 ;
40365: LD_ADDR_VAR 0 8
40369: PUSH
40370: LD_INT 2100
40372: ST_TO_ADDR
// if amount < min then
40373: LD_VAR 0 9
40377: PUSH
40378: LD_VAR 0 3
40382: LESS
40383: IFFALSE 40401
// r := r * 2 else
40385: LD_ADDR_VAR 0 7
40389: PUSH
40390: LD_VAR 0 7
40394: PUSH
40395: LD_INT 2
40397: MUL
40398: ST_TO_ADDR
40399: GO 40427
// if amount > max then
40401: LD_VAR 0 9
40405: PUSH
40406: LD_VAR 0 4
40410: GREATER
40411: IFFALSE 40427
// r := r / 2 ;
40413: LD_ADDR_VAR 0 7
40417: PUSH
40418: LD_VAR 0 7
40422: PUSH
40423: LD_INT 2
40425: DIVREAL
40426: ST_TO_ADDR
// time := time / r ;
40427: LD_ADDR_VAR 0 8
40431: PUSH
40432: LD_VAR 0 8
40436: PUSH
40437: LD_VAR 0 7
40441: DIVREAL
40442: ST_TO_ADDR
// if time < 0 then
40443: LD_VAR 0 8
40447: PUSH
40448: LD_INT 0
40450: LESS
40451: IFFALSE 40468
// time := time * - 1 ;
40453: LD_ADDR_VAR 0 8
40457: PUSH
40458: LD_VAR 0 8
40462: PUSH
40463: LD_INT 1
40465: NEG
40466: MUL
40467: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40468: LD_VAR 0 8
40472: PUSH
40473: LD_INT 35
40475: PPUSH
40476: LD_INT 875
40478: PPUSH
40479: CALL_OW 12
40483: PLUS
40484: PPUSH
40485: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40489: LD_INT 1
40491: PPUSH
40492: LD_INT 5
40494: PPUSH
40495: CALL_OW 12
40499: PPUSH
40500: LD_VAR 0 1
40504: PPUSH
40505: LD_INT 1
40507: PPUSH
40508: CALL_OW 55
// end ;
40512: GO 40325
// end ;
40514: LD_VAR 0 5
40518: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40519: LD_INT 0
40521: PPUSH
40522: PPUSH
40523: PPUSH
40524: PPUSH
40525: PPUSH
40526: PPUSH
40527: PPUSH
40528: PPUSH
// if not turrets or not factories then
40529: LD_VAR 0 1
40533: NOT
40534: PUSH
40535: LD_VAR 0 2
40539: NOT
40540: OR
40541: IFFALSE 40545
// exit ;
40543: GO 40852
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40545: LD_ADDR_VAR 0 10
40549: PUSH
40550: LD_INT 5
40552: PUSH
40553: LD_INT 6
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 2
40562: PUSH
40563: LD_INT 4
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: LD_INT 3
40572: PUSH
40573: LD_INT 5
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 24
40587: PUSH
40588: LD_INT 25
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 23
40597: PUSH
40598: LD_INT 27
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 42
40611: PUSH
40612: LD_INT 43
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 44
40621: PUSH
40622: LD_INT 46
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 45
40631: PUSH
40632: LD_INT 47
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: LIST
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: LIST
40648: ST_TO_ADDR
// result := [ ] ;
40649: LD_ADDR_VAR 0 3
40653: PUSH
40654: EMPTY
40655: ST_TO_ADDR
// for i in turrets do
40656: LD_ADDR_VAR 0 4
40660: PUSH
40661: LD_VAR 0 1
40665: PUSH
40666: FOR_IN
40667: IFFALSE 40850
// begin nat := GetNation ( i ) ;
40669: LD_ADDR_VAR 0 7
40673: PUSH
40674: LD_VAR 0 4
40678: PPUSH
40679: CALL_OW 248
40683: ST_TO_ADDR
// weapon := 0 ;
40684: LD_ADDR_VAR 0 8
40688: PUSH
40689: LD_INT 0
40691: ST_TO_ADDR
// if not nat then
40692: LD_VAR 0 7
40696: NOT
40697: IFFALSE 40701
// continue ;
40699: GO 40666
// for j in list [ nat ] do
40701: LD_ADDR_VAR 0 5
40705: PUSH
40706: LD_VAR 0 10
40710: PUSH
40711: LD_VAR 0 7
40715: ARRAY
40716: PUSH
40717: FOR_IN
40718: IFFALSE 40759
// if GetBWeapon ( i ) = j [ 1 ] then
40720: LD_VAR 0 4
40724: PPUSH
40725: CALL_OW 269
40729: PUSH
40730: LD_VAR 0 5
40734: PUSH
40735: LD_INT 1
40737: ARRAY
40738: EQUAL
40739: IFFALSE 40757
// begin weapon := j [ 2 ] ;
40741: LD_ADDR_VAR 0 8
40745: PUSH
40746: LD_VAR 0 5
40750: PUSH
40751: LD_INT 2
40753: ARRAY
40754: ST_TO_ADDR
// break ;
40755: GO 40759
// end ;
40757: GO 40717
40759: POP
40760: POP
// if not weapon then
40761: LD_VAR 0 8
40765: NOT
40766: IFFALSE 40770
// continue ;
40768: GO 40666
// for k in factories do
40770: LD_ADDR_VAR 0 6
40774: PUSH
40775: LD_VAR 0 2
40779: PUSH
40780: FOR_IN
40781: IFFALSE 40846
// begin weapons := AvailableWeaponList ( k ) ;
40783: LD_ADDR_VAR 0 9
40787: PUSH
40788: LD_VAR 0 6
40792: PPUSH
40793: CALL_OW 478
40797: ST_TO_ADDR
// if not weapons then
40798: LD_VAR 0 9
40802: NOT
40803: IFFALSE 40807
// continue ;
40805: GO 40780
// if weapon in weapons then
40807: LD_VAR 0 8
40811: PUSH
40812: LD_VAR 0 9
40816: IN
40817: IFFALSE 40844
// begin result := [ i , weapon ] ;
40819: LD_ADDR_VAR 0 3
40823: PUSH
40824: LD_VAR 0 4
40828: PUSH
40829: LD_VAR 0 8
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: ST_TO_ADDR
// exit ;
40838: POP
40839: POP
40840: POP
40841: POP
40842: GO 40852
// end ; end ;
40844: GO 40780
40846: POP
40847: POP
// end ;
40848: GO 40666
40850: POP
40851: POP
// end ;
40852: LD_VAR 0 3
40856: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40857: LD_INT 0
40859: PPUSH
// if not side or side > 8 then
40860: LD_VAR 0 3
40864: NOT
40865: PUSH
40866: LD_VAR 0 3
40870: PUSH
40871: LD_INT 8
40873: GREATER
40874: OR
40875: IFFALSE 40879
// exit ;
40877: GO 40938
// if not range then
40879: LD_VAR 0 4
40883: NOT
40884: IFFALSE 40895
// range := - 12 ;
40886: LD_ADDR_VAR 0 4
40890: PUSH
40891: LD_INT 12
40893: NEG
40894: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40895: LD_VAR 0 1
40899: PPUSH
40900: LD_VAR 0 2
40904: PPUSH
40905: LD_VAR 0 3
40909: PPUSH
40910: LD_VAR 0 4
40914: PPUSH
40915: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40919: LD_VAR 0 1
40923: PPUSH
40924: LD_VAR 0 2
40928: PPUSH
40929: LD_VAR 0 3
40933: PPUSH
40934: CALL_OW 331
// end ;
40938: LD_VAR 0 5
40942: RET
// export function Video ( mode ) ; begin
40943: LD_INT 0
40945: PPUSH
// ingame_video = mode ;
40946: LD_ADDR_OWVAR 52
40950: PUSH
40951: LD_VAR 0 1
40955: ST_TO_ADDR
// interface_hidden = mode ;
40956: LD_ADDR_OWVAR 54
40960: PUSH
40961: LD_VAR 0 1
40965: ST_TO_ADDR
// end ;
40966: LD_VAR 0 2
40970: RET
// export function Join ( array , element ) ; begin
40971: LD_INT 0
40973: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40974: LD_ADDR_VAR 0 3
40978: PUSH
40979: LD_VAR 0 1
40983: PPUSH
40984: LD_VAR 0 1
40988: PUSH
40989: LD_INT 1
40991: PLUS
40992: PPUSH
40993: LD_VAR 0 2
40997: PPUSH
40998: CALL_OW 1
41002: ST_TO_ADDR
// end ;
41003: LD_VAR 0 3
41007: RET
// export function JoinUnion ( array , element ) ; begin
41008: LD_INT 0
41010: PPUSH
// result := array union element ;
41011: LD_ADDR_VAR 0 3
41015: PUSH
41016: LD_VAR 0 1
41020: PUSH
41021: LD_VAR 0 2
41025: UNION
41026: ST_TO_ADDR
// end ;
41027: LD_VAR 0 3
41031: RET
// export function GetBehemoths ( side ) ; begin
41032: LD_INT 0
41034: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
41035: LD_ADDR_VAR 0 2
41039: PUSH
41040: LD_INT 22
41042: PUSH
41043: LD_VAR 0 1
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 31
41054: PUSH
41055: LD_INT 25
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PPUSH
41066: CALL_OW 69
41070: ST_TO_ADDR
// end ;
41071: LD_VAR 0 2
41075: RET
// export function Shuffle ( array ) ; var i , index ; begin
41076: LD_INT 0
41078: PPUSH
41079: PPUSH
41080: PPUSH
// result := [ ] ;
41081: LD_ADDR_VAR 0 2
41085: PUSH
41086: EMPTY
41087: ST_TO_ADDR
// if not array then
41088: LD_VAR 0 1
41092: NOT
41093: IFFALSE 41097
// exit ;
41095: GO 41196
// Randomize ;
41097: CALL_OW 10
// for i = array downto 1 do
41101: LD_ADDR_VAR 0 3
41105: PUSH
41106: DOUBLE
41107: LD_VAR 0 1
41111: INC
41112: ST_TO_ADDR
41113: LD_INT 1
41115: PUSH
41116: FOR_DOWNTO
41117: IFFALSE 41194
// begin index := rand ( 1 , array ) ;
41119: LD_ADDR_VAR 0 4
41123: PUSH
41124: LD_INT 1
41126: PPUSH
41127: LD_VAR 0 1
41131: PPUSH
41132: CALL_OW 12
41136: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41137: LD_ADDR_VAR 0 2
41141: PUSH
41142: LD_VAR 0 2
41146: PPUSH
41147: LD_VAR 0 2
41151: PUSH
41152: LD_INT 1
41154: PLUS
41155: PPUSH
41156: LD_VAR 0 1
41160: PUSH
41161: LD_VAR 0 4
41165: ARRAY
41166: PPUSH
41167: CALL_OW 2
41171: ST_TO_ADDR
// array := Delete ( array , index ) ;
41172: LD_ADDR_VAR 0 1
41176: PUSH
41177: LD_VAR 0 1
41181: PPUSH
41182: LD_VAR 0 4
41186: PPUSH
41187: CALL_OW 3
41191: ST_TO_ADDR
// end ;
41192: GO 41116
41194: POP
41195: POP
// end ;
41196: LD_VAR 0 2
41200: RET
// export function GetBaseMaterials ( base ) ; begin
41201: LD_INT 0
41203: PPUSH
// result := [ 0 , 0 , 0 ] ;
41204: LD_ADDR_VAR 0 2
41208: PUSH
41209: LD_INT 0
41211: PUSH
41212: LD_INT 0
41214: PUSH
41215: LD_INT 0
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: LIST
41222: ST_TO_ADDR
// if not base then
41223: LD_VAR 0 1
41227: NOT
41228: IFFALSE 41232
// exit ;
41230: GO 41281
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
41232: LD_ADDR_VAR 0 2
41236: PUSH
41237: LD_VAR 0 1
41241: PPUSH
41242: LD_INT 1
41244: PPUSH
41245: CALL_OW 275
41249: PUSH
41250: LD_VAR 0 1
41254: PPUSH
41255: LD_INT 2
41257: PPUSH
41258: CALL_OW 275
41262: PUSH
41263: LD_VAR 0 1
41267: PPUSH
41268: LD_INT 3
41270: PPUSH
41271: CALL_OW 275
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: LIST
41280: ST_TO_ADDR
// end ;
41281: LD_VAR 0 2
41285: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41286: LD_INT 0
41288: PPUSH
41289: PPUSH
// result := array ;
41290: LD_ADDR_VAR 0 3
41294: PUSH
41295: LD_VAR 0 1
41299: ST_TO_ADDR
// if size >= result then
41300: LD_VAR 0 2
41304: PUSH
41305: LD_VAR 0 3
41309: GREATEREQUAL
41310: IFFALSE 41314
// exit ;
41312: GO 41364
// if size then
41314: LD_VAR 0 2
41318: IFFALSE 41364
// for i := array downto size do
41320: LD_ADDR_VAR 0 4
41324: PUSH
41325: DOUBLE
41326: LD_VAR 0 1
41330: INC
41331: ST_TO_ADDR
41332: LD_VAR 0 2
41336: PUSH
41337: FOR_DOWNTO
41338: IFFALSE 41362
// result := Delete ( result , result ) ;
41340: LD_ADDR_VAR 0 3
41344: PUSH
41345: LD_VAR 0 3
41349: PPUSH
41350: LD_VAR 0 3
41354: PPUSH
41355: CALL_OW 3
41359: ST_TO_ADDR
41360: GO 41337
41362: POP
41363: POP
// end ;
41364: LD_VAR 0 3
41368: RET
// export function ComExit ( unit ) ; var tmp ; begin
41369: LD_INT 0
41371: PPUSH
41372: PPUSH
// if not IsInUnit ( unit ) then
41373: LD_VAR 0 1
41377: PPUSH
41378: CALL_OW 310
41382: NOT
41383: IFFALSE 41387
// exit ;
41385: GO 41447
// tmp := IsInUnit ( unit ) ;
41387: LD_ADDR_VAR 0 3
41391: PUSH
41392: LD_VAR 0 1
41396: PPUSH
41397: CALL_OW 310
41401: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41402: LD_VAR 0 3
41406: PPUSH
41407: CALL_OW 247
41411: PUSH
41412: LD_INT 2
41414: EQUAL
41415: IFFALSE 41428
// ComExitVehicle ( unit ) else
41417: LD_VAR 0 1
41421: PPUSH
41422: CALL_OW 121
41426: GO 41437
// ComExitBuilding ( unit ) ;
41428: LD_VAR 0 1
41432: PPUSH
41433: CALL_OW 122
// result := tmp ;
41437: LD_ADDR_VAR 0 2
41441: PUSH
41442: LD_VAR 0 3
41446: ST_TO_ADDR
// end ;
41447: LD_VAR 0 2
41451: RET
// export function ComExitAll ( units ) ; var i ; begin
41452: LD_INT 0
41454: PPUSH
41455: PPUSH
// if not units then
41456: LD_VAR 0 1
41460: NOT
41461: IFFALSE 41465
// exit ;
41463: GO 41491
// for i in units do
41465: LD_ADDR_VAR 0 3
41469: PUSH
41470: LD_VAR 0 1
41474: PUSH
41475: FOR_IN
41476: IFFALSE 41489
// ComExit ( i ) ;
41478: LD_VAR 0 3
41482: PPUSH
41483: CALL 41369 0 1
41487: GO 41475
41489: POP
41490: POP
// end ;
41491: LD_VAR 0 2
41495: RET
// export function ResetHc ; begin
41496: LD_INT 0
41498: PPUSH
// InitHc ;
41499: CALL_OW 19
// hc_importance := 0 ;
41503: LD_ADDR_OWVAR 32
41507: PUSH
41508: LD_INT 0
41510: ST_TO_ADDR
// end ;
41511: LD_VAR 0 1
41515: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41516: LD_INT 0
41518: PPUSH
41519: PPUSH
41520: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41521: LD_ADDR_VAR 0 6
41525: PUSH
41526: LD_VAR 0 1
41530: PUSH
41531: LD_VAR 0 3
41535: PLUS
41536: PUSH
41537: LD_INT 2
41539: DIV
41540: ST_TO_ADDR
// if _x < 0 then
41541: LD_VAR 0 6
41545: PUSH
41546: LD_INT 0
41548: LESS
41549: IFFALSE 41566
// _x := _x * - 1 ;
41551: LD_ADDR_VAR 0 6
41555: PUSH
41556: LD_VAR 0 6
41560: PUSH
41561: LD_INT 1
41563: NEG
41564: MUL
41565: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41566: LD_ADDR_VAR 0 7
41570: PUSH
41571: LD_VAR 0 2
41575: PUSH
41576: LD_VAR 0 4
41580: PLUS
41581: PUSH
41582: LD_INT 2
41584: DIV
41585: ST_TO_ADDR
// if _y < 0 then
41586: LD_VAR 0 7
41590: PUSH
41591: LD_INT 0
41593: LESS
41594: IFFALSE 41611
// _y := _y * - 1 ;
41596: LD_ADDR_VAR 0 7
41600: PUSH
41601: LD_VAR 0 7
41605: PUSH
41606: LD_INT 1
41608: NEG
41609: MUL
41610: ST_TO_ADDR
// result := [ _x , _y ] ;
41611: LD_ADDR_VAR 0 5
41615: PUSH
41616: LD_VAR 0 6
41620: PUSH
41621: LD_VAR 0 7
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: ST_TO_ADDR
// end ;
41630: LD_VAR 0 5
41634: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41635: LD_INT 0
41637: PPUSH
41638: PPUSH
41639: PPUSH
41640: PPUSH
// task := GetTaskList ( unit ) ;
41641: LD_ADDR_VAR 0 7
41645: PUSH
41646: LD_VAR 0 1
41650: PPUSH
41651: CALL_OW 437
41655: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41656: LD_VAR 0 7
41660: NOT
41661: PUSH
41662: LD_VAR 0 1
41666: PPUSH
41667: LD_VAR 0 2
41671: PPUSH
41672: CALL_OW 308
41676: NOT
41677: AND
41678: IFFALSE 41682
// exit ;
41680: GO 41800
// if IsInArea ( unit , area ) then
41682: LD_VAR 0 1
41686: PPUSH
41687: LD_VAR 0 2
41691: PPUSH
41692: CALL_OW 308
41696: IFFALSE 41714
// begin ComMoveToArea ( unit , goAway ) ;
41698: LD_VAR 0 1
41702: PPUSH
41703: LD_VAR 0 3
41707: PPUSH
41708: CALL_OW 113
// exit ;
41712: GO 41800
// end ; if task [ 1 ] [ 1 ] <> M then
41714: LD_VAR 0 7
41718: PUSH
41719: LD_INT 1
41721: ARRAY
41722: PUSH
41723: LD_INT 1
41725: ARRAY
41726: PUSH
41727: LD_STRING M
41729: NONEQUAL
41730: IFFALSE 41734
// exit ;
41732: GO 41800
// x := task [ 1 ] [ 2 ] ;
41734: LD_ADDR_VAR 0 5
41738: PUSH
41739: LD_VAR 0 7
41743: PUSH
41744: LD_INT 1
41746: ARRAY
41747: PUSH
41748: LD_INT 2
41750: ARRAY
41751: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41752: LD_ADDR_VAR 0 6
41756: PUSH
41757: LD_VAR 0 7
41761: PUSH
41762: LD_INT 1
41764: ARRAY
41765: PUSH
41766: LD_INT 3
41768: ARRAY
41769: ST_TO_ADDR
// if InArea ( x , y , area ) then
41770: LD_VAR 0 5
41774: PPUSH
41775: LD_VAR 0 6
41779: PPUSH
41780: LD_VAR 0 2
41784: PPUSH
41785: CALL_OW 309
41789: IFFALSE 41800
// ComStop ( unit ) ;
41791: LD_VAR 0 1
41795: PPUSH
41796: CALL_OW 141
// end ;
41800: LD_VAR 0 4
41804: RET
// export function Abs ( value ) ; begin
41805: LD_INT 0
41807: PPUSH
// result := value ;
41808: LD_ADDR_VAR 0 2
41812: PUSH
41813: LD_VAR 0 1
41817: ST_TO_ADDR
// if value < 0 then
41818: LD_VAR 0 1
41822: PUSH
41823: LD_INT 0
41825: LESS
41826: IFFALSE 41843
// result := value * - 1 ;
41828: LD_ADDR_VAR 0 2
41832: PUSH
41833: LD_VAR 0 1
41837: PUSH
41838: LD_INT 1
41840: NEG
41841: MUL
41842: ST_TO_ADDR
// end ;
41843: LD_VAR 0 2
41847: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41848: LD_INT 0
41850: PPUSH
41851: PPUSH
41852: PPUSH
41853: PPUSH
41854: PPUSH
41855: PPUSH
41856: PPUSH
41857: PPUSH
// if not unit or not building then
41858: LD_VAR 0 1
41862: NOT
41863: PUSH
41864: LD_VAR 0 2
41868: NOT
41869: OR
41870: IFFALSE 41874
// exit ;
41872: GO 42100
// x := GetX ( building ) ;
41874: LD_ADDR_VAR 0 4
41878: PUSH
41879: LD_VAR 0 2
41883: PPUSH
41884: CALL_OW 250
41888: ST_TO_ADDR
// y := GetY ( building ) ;
41889: LD_ADDR_VAR 0 6
41893: PUSH
41894: LD_VAR 0 2
41898: PPUSH
41899: CALL_OW 251
41903: ST_TO_ADDR
// d := GetDir ( building ) ;
41904: LD_ADDR_VAR 0 8
41908: PUSH
41909: LD_VAR 0 2
41913: PPUSH
41914: CALL_OW 254
41918: ST_TO_ADDR
// r := 4 ;
41919: LD_ADDR_VAR 0 9
41923: PUSH
41924: LD_INT 4
41926: ST_TO_ADDR
// for i := 1 to 5 do
41927: LD_ADDR_VAR 0 10
41931: PUSH
41932: DOUBLE
41933: LD_INT 1
41935: DEC
41936: ST_TO_ADDR
41937: LD_INT 5
41939: PUSH
41940: FOR_TO
41941: IFFALSE 42098
// begin _x := ShiftX ( x , d , r + i ) ;
41943: LD_ADDR_VAR 0 5
41947: PUSH
41948: LD_VAR 0 4
41952: PPUSH
41953: LD_VAR 0 8
41957: PPUSH
41958: LD_VAR 0 9
41962: PUSH
41963: LD_VAR 0 10
41967: PLUS
41968: PPUSH
41969: CALL_OW 272
41973: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41974: LD_ADDR_VAR 0 7
41978: PUSH
41979: LD_VAR 0 6
41983: PPUSH
41984: LD_VAR 0 8
41988: PPUSH
41989: LD_VAR 0 9
41993: PUSH
41994: LD_VAR 0 10
41998: PLUS
41999: PPUSH
42000: CALL_OW 273
42004: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
42005: LD_VAR 0 5
42009: PPUSH
42010: LD_VAR 0 7
42014: PPUSH
42015: CALL_OW 488
42019: PUSH
42020: LD_VAR 0 5
42024: PPUSH
42025: LD_VAR 0 7
42029: PPUSH
42030: CALL_OW 428
42034: PPUSH
42035: CALL_OW 247
42039: PUSH
42040: LD_INT 3
42042: PUSH
42043: LD_INT 2
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: IN
42050: NOT
42051: AND
42052: IFFALSE 42096
// begin ComMoveXY ( unit , _x , _y ) ;
42054: LD_VAR 0 1
42058: PPUSH
42059: LD_VAR 0 5
42063: PPUSH
42064: LD_VAR 0 7
42068: PPUSH
42069: CALL_OW 111
// result := [ _x , _y ] ;
42073: LD_ADDR_VAR 0 3
42077: PUSH
42078: LD_VAR 0 5
42082: PUSH
42083: LD_VAR 0 7
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: ST_TO_ADDR
// exit ;
42092: POP
42093: POP
42094: GO 42100
// end ; end ;
42096: GO 41940
42098: POP
42099: POP
// end ;
42100: LD_VAR 0 3
42104: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42105: LD_INT 0
42107: PPUSH
42108: PPUSH
42109: PPUSH
// result := 0 ;
42110: LD_ADDR_VAR 0 3
42114: PUSH
42115: LD_INT 0
42117: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42118: LD_VAR 0 1
42122: PUSH
42123: LD_INT 0
42125: LESS
42126: PUSH
42127: LD_VAR 0 1
42131: PUSH
42132: LD_INT 8
42134: GREATER
42135: OR
42136: PUSH
42137: LD_VAR 0 2
42141: PUSH
42142: LD_INT 0
42144: LESS
42145: OR
42146: PUSH
42147: LD_VAR 0 2
42151: PUSH
42152: LD_INT 8
42154: GREATER
42155: OR
42156: IFFALSE 42160
// exit ;
42158: GO 42235
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
42160: LD_ADDR_VAR 0 4
42164: PUSH
42165: LD_INT 22
42167: PUSH
42168: LD_VAR 0 2
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PPUSH
42177: CALL_OW 69
42181: PUSH
42182: FOR_IN
42183: IFFALSE 42233
// begin un := UnitShoot ( i ) ;
42185: LD_ADDR_VAR 0 5
42189: PUSH
42190: LD_VAR 0 4
42194: PPUSH
42195: CALL_OW 504
42199: ST_TO_ADDR
// if GetSide ( un ) = side1 then
42200: LD_VAR 0 5
42204: PPUSH
42205: CALL_OW 255
42209: PUSH
42210: LD_VAR 0 1
42214: EQUAL
42215: IFFALSE 42231
// begin result := un ;
42217: LD_ADDR_VAR 0 3
42221: PUSH
42222: LD_VAR 0 5
42226: ST_TO_ADDR
// exit ;
42227: POP
42228: POP
42229: GO 42235
// end ; end ;
42231: GO 42182
42233: POP
42234: POP
// end ;
42235: LD_VAR 0 3
42239: RET
// export function GetCargoBay ( units ) ; begin
42240: LD_INT 0
42242: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42243: LD_ADDR_VAR 0 2
42247: PUSH
42248: LD_VAR 0 1
42252: PPUSH
42253: LD_INT 2
42255: PUSH
42256: LD_INT 34
42258: PUSH
42259: LD_INT 12
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 34
42268: PUSH
42269: LD_INT 51
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 34
42278: PUSH
42279: LD_INT 32
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 34
42288: PUSH
42289: LD_INT 89
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: PPUSH
42303: CALL_OW 72
42307: ST_TO_ADDR
// end ;
42308: LD_VAR 0 2
42312: RET
// export function Negate ( value ) ; begin
42313: LD_INT 0
42315: PPUSH
// result := not value ;
42316: LD_ADDR_VAR 0 2
42320: PUSH
42321: LD_VAR 0 1
42325: NOT
42326: ST_TO_ADDR
// end ;
42327: LD_VAR 0 2
42331: RET
// export function Inc ( value ) ; begin
42332: LD_INT 0
42334: PPUSH
// result := value + 1 ;
42335: LD_ADDR_VAR 0 2
42339: PUSH
42340: LD_VAR 0 1
42344: PUSH
42345: LD_INT 1
42347: PLUS
42348: ST_TO_ADDR
// end ;
42349: LD_VAR 0 2
42353: RET
// export function Dec ( value ) ; begin
42354: LD_INT 0
42356: PPUSH
// result := value - 1 ;
42357: LD_ADDR_VAR 0 2
42361: PUSH
42362: LD_VAR 0 1
42366: PUSH
42367: LD_INT 1
42369: MINUS
42370: ST_TO_ADDR
// end ;
42371: LD_VAR 0 2
42375: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42376: LD_INT 0
42378: PPUSH
42379: PPUSH
42380: PPUSH
42381: PPUSH
42382: PPUSH
42383: PPUSH
42384: PPUSH
42385: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42386: LD_VAR 0 1
42390: PPUSH
42391: LD_VAR 0 2
42395: PPUSH
42396: CALL_OW 488
42400: NOT
42401: PUSH
42402: LD_VAR 0 3
42406: PPUSH
42407: LD_VAR 0 4
42411: PPUSH
42412: CALL_OW 488
42416: NOT
42417: OR
42418: IFFALSE 42431
// begin result := - 1 ;
42420: LD_ADDR_VAR 0 5
42424: PUSH
42425: LD_INT 1
42427: NEG
42428: ST_TO_ADDR
// exit ;
42429: GO 42666
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42431: LD_ADDR_VAR 0 12
42435: PUSH
42436: LD_VAR 0 1
42440: PPUSH
42441: LD_VAR 0 2
42445: PPUSH
42446: LD_VAR 0 3
42450: PPUSH
42451: LD_VAR 0 4
42455: PPUSH
42456: CALL 41516 0 4
42460: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42461: LD_ADDR_VAR 0 11
42465: PUSH
42466: LD_VAR 0 1
42470: PPUSH
42471: LD_VAR 0 2
42475: PPUSH
42476: LD_VAR 0 12
42480: PUSH
42481: LD_INT 1
42483: ARRAY
42484: PPUSH
42485: LD_VAR 0 12
42489: PUSH
42490: LD_INT 2
42492: ARRAY
42493: PPUSH
42494: CALL_OW 298
42498: ST_TO_ADDR
// distance := 9999 ;
42499: LD_ADDR_VAR 0 10
42503: PUSH
42504: LD_INT 9999
42506: ST_TO_ADDR
// for i := 0 to 5 do
42507: LD_ADDR_VAR 0 6
42511: PUSH
42512: DOUBLE
42513: LD_INT 0
42515: DEC
42516: ST_TO_ADDR
42517: LD_INT 5
42519: PUSH
42520: FOR_TO
42521: IFFALSE 42664
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42523: LD_ADDR_VAR 0 7
42527: PUSH
42528: LD_VAR 0 1
42532: PPUSH
42533: LD_VAR 0 6
42537: PPUSH
42538: LD_VAR 0 11
42542: PPUSH
42543: CALL_OW 272
42547: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42548: LD_ADDR_VAR 0 8
42552: PUSH
42553: LD_VAR 0 2
42557: PPUSH
42558: LD_VAR 0 6
42562: PPUSH
42563: LD_VAR 0 11
42567: PPUSH
42568: CALL_OW 273
42572: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42573: LD_VAR 0 7
42577: PPUSH
42578: LD_VAR 0 8
42582: PPUSH
42583: CALL_OW 488
42587: NOT
42588: IFFALSE 42592
// continue ;
42590: GO 42520
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42592: LD_ADDR_VAR 0 9
42596: PUSH
42597: LD_VAR 0 12
42601: PUSH
42602: LD_INT 1
42604: ARRAY
42605: PPUSH
42606: LD_VAR 0 12
42610: PUSH
42611: LD_INT 2
42613: ARRAY
42614: PPUSH
42615: LD_VAR 0 7
42619: PPUSH
42620: LD_VAR 0 8
42624: PPUSH
42625: CALL_OW 298
42629: ST_TO_ADDR
// if tmp < distance then
42630: LD_VAR 0 9
42634: PUSH
42635: LD_VAR 0 10
42639: LESS
42640: IFFALSE 42662
// begin result := i ;
42642: LD_ADDR_VAR 0 5
42646: PUSH
42647: LD_VAR 0 6
42651: ST_TO_ADDR
// distance := tmp ;
42652: LD_ADDR_VAR 0 10
42656: PUSH
42657: LD_VAR 0 9
42661: ST_TO_ADDR
// end ; end ;
42662: GO 42520
42664: POP
42665: POP
// end ;
42666: LD_VAR 0 5
42670: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42671: LD_INT 0
42673: PPUSH
42674: PPUSH
// if not driver or not IsInUnit ( driver ) then
42675: LD_VAR 0 1
42679: NOT
42680: PUSH
42681: LD_VAR 0 1
42685: PPUSH
42686: CALL_OW 310
42690: NOT
42691: OR
42692: IFFALSE 42696
// exit ;
42694: GO 42786
// vehicle := IsInUnit ( driver ) ;
42696: LD_ADDR_VAR 0 3
42700: PUSH
42701: LD_VAR 0 1
42705: PPUSH
42706: CALL_OW 310
42710: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42711: LD_VAR 0 1
42715: PPUSH
42716: LD_STRING \
42718: PUSH
42719: LD_INT 0
42721: PUSH
42722: LD_INT 0
42724: PUSH
42725: LD_INT 0
42727: PUSH
42728: LD_INT 0
42730: PUSH
42731: LD_INT 0
42733: PUSH
42734: LD_INT 0
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: PUSH
42746: LD_STRING E
42748: PUSH
42749: LD_INT 0
42751: PUSH
42752: LD_INT 0
42754: PUSH
42755: LD_VAR 0 3
42759: PUSH
42760: LD_INT 0
42762: PUSH
42763: LD_INT 0
42765: PUSH
42766: LD_INT 0
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PPUSH
42782: CALL_OW 446
// end ;
42786: LD_VAR 0 2
42790: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42791: LD_INT 0
42793: PPUSH
42794: PPUSH
// if not driver or not IsInUnit ( driver ) then
42795: LD_VAR 0 1
42799: NOT
42800: PUSH
42801: LD_VAR 0 1
42805: PPUSH
42806: CALL_OW 310
42810: NOT
42811: OR
42812: IFFALSE 42816
// exit ;
42814: GO 42906
// vehicle := IsInUnit ( driver ) ;
42816: LD_ADDR_VAR 0 3
42820: PUSH
42821: LD_VAR 0 1
42825: PPUSH
42826: CALL_OW 310
42830: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42831: LD_VAR 0 1
42835: PPUSH
42836: LD_STRING \
42838: PUSH
42839: LD_INT 0
42841: PUSH
42842: LD_INT 0
42844: PUSH
42845: LD_INT 0
42847: PUSH
42848: LD_INT 0
42850: PUSH
42851: LD_INT 0
42853: PUSH
42854: LD_INT 0
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: PUSH
42866: LD_STRING E
42868: PUSH
42869: LD_INT 0
42871: PUSH
42872: LD_INT 0
42874: PUSH
42875: LD_VAR 0 3
42879: PUSH
42880: LD_INT 0
42882: PUSH
42883: LD_INT 0
42885: PUSH
42886: LD_INT 0
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PPUSH
42902: CALL_OW 447
// end ;
42906: LD_VAR 0 2
42910: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42911: LD_INT 0
42913: PPUSH
42914: PPUSH
42915: PPUSH
// tmp := [ ] ;
42916: LD_ADDR_VAR 0 5
42920: PUSH
42921: EMPTY
42922: ST_TO_ADDR
// for i in units do
42923: LD_ADDR_VAR 0 4
42927: PUSH
42928: LD_VAR 0 1
42932: PUSH
42933: FOR_IN
42934: IFFALSE 42972
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42936: LD_ADDR_VAR 0 5
42940: PUSH
42941: LD_VAR 0 5
42945: PPUSH
42946: LD_VAR 0 5
42950: PUSH
42951: LD_INT 1
42953: PLUS
42954: PPUSH
42955: LD_VAR 0 4
42959: PPUSH
42960: CALL_OW 256
42964: PPUSH
42965: CALL_OW 2
42969: ST_TO_ADDR
42970: GO 42933
42972: POP
42973: POP
// if not tmp then
42974: LD_VAR 0 5
42978: NOT
42979: IFFALSE 42983
// exit ;
42981: GO 43031
// if asc then
42983: LD_VAR 0 2
42987: IFFALSE 43011
// result := SortListByListAsc ( units , tmp ) else
42989: LD_ADDR_VAR 0 3
42993: PUSH
42994: LD_VAR 0 1
42998: PPUSH
42999: LD_VAR 0 5
43003: PPUSH
43004: CALL_OW 76
43008: ST_TO_ADDR
43009: GO 43031
// result := SortListByListDesc ( units , tmp ) ;
43011: LD_ADDR_VAR 0 3
43015: PUSH
43016: LD_VAR 0 1
43020: PPUSH
43021: LD_VAR 0 5
43025: PPUSH
43026: CALL_OW 77
43030: ST_TO_ADDR
// end ;
43031: LD_VAR 0 3
43035: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43036: LD_INT 0
43038: PPUSH
43039: PPUSH
// task := GetTaskList ( mech ) ;
43040: LD_ADDR_VAR 0 4
43044: PUSH
43045: LD_VAR 0 1
43049: PPUSH
43050: CALL_OW 437
43054: ST_TO_ADDR
// if not task then
43055: LD_VAR 0 4
43059: NOT
43060: IFFALSE 43064
// exit ;
43062: GO 43106
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43064: LD_ADDR_VAR 0 3
43068: PUSH
43069: LD_VAR 0 4
43073: PUSH
43074: LD_INT 1
43076: ARRAY
43077: PUSH
43078: LD_INT 1
43080: ARRAY
43081: PUSH
43082: LD_STRING r
43084: EQUAL
43085: PUSH
43086: LD_VAR 0 4
43090: PUSH
43091: LD_INT 1
43093: ARRAY
43094: PUSH
43095: LD_INT 4
43097: ARRAY
43098: PUSH
43099: LD_VAR 0 2
43103: EQUAL
43104: AND
43105: ST_TO_ADDR
// end ;
43106: LD_VAR 0 3
43110: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
43111: LD_INT 0
43113: PPUSH
// SetDir ( unit , d ) ;
43114: LD_VAR 0 1
43118: PPUSH
43119: LD_VAR 0 4
43123: PPUSH
43124: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
43128: LD_VAR 0 1
43132: PPUSH
43133: LD_VAR 0 2
43137: PPUSH
43138: LD_VAR 0 3
43142: PPUSH
43143: LD_VAR 0 5
43147: PPUSH
43148: CALL_OW 48
// end ;
43152: LD_VAR 0 6
43156: RET
// export function ToNaturalNumber ( number ) ; begin
43157: LD_INT 0
43159: PPUSH
// result := number div 1 ;
43160: LD_ADDR_VAR 0 2
43164: PUSH
43165: LD_VAR 0 1
43169: PUSH
43170: LD_INT 1
43172: DIV
43173: ST_TO_ADDR
// if number < 0 then
43174: LD_VAR 0 1
43178: PUSH
43179: LD_INT 0
43181: LESS
43182: IFFALSE 43192
// result := 0 ;
43184: LD_ADDR_VAR 0 2
43188: PUSH
43189: LD_INT 0
43191: ST_TO_ADDR
// end ;
43192: LD_VAR 0 2
43196: RET
// export function SortByClass ( units , class ) ; var un ; begin
43197: LD_INT 0
43199: PPUSH
43200: PPUSH
// if not units or not class then
43201: LD_VAR 0 1
43205: NOT
43206: PUSH
43207: LD_VAR 0 2
43211: NOT
43212: OR
43213: IFFALSE 43217
// exit ;
43215: GO 43312
// result := [ ] ;
43217: LD_ADDR_VAR 0 3
43221: PUSH
43222: EMPTY
43223: ST_TO_ADDR
// for un in units do
43224: LD_ADDR_VAR 0 4
43228: PUSH
43229: LD_VAR 0 1
43233: PUSH
43234: FOR_IN
43235: IFFALSE 43310
// if GetClass ( un ) = class then
43237: LD_VAR 0 4
43241: PPUSH
43242: CALL_OW 257
43246: PUSH
43247: LD_VAR 0 2
43251: EQUAL
43252: IFFALSE 43279
// result := Insert ( result , 1 , un ) else
43254: LD_ADDR_VAR 0 3
43258: PUSH
43259: LD_VAR 0 3
43263: PPUSH
43264: LD_INT 1
43266: PPUSH
43267: LD_VAR 0 4
43271: PPUSH
43272: CALL_OW 2
43276: ST_TO_ADDR
43277: GO 43308
// result := Replace ( result , result + 1 , un ) ;
43279: LD_ADDR_VAR 0 3
43283: PUSH
43284: LD_VAR 0 3
43288: PPUSH
43289: LD_VAR 0 3
43293: PUSH
43294: LD_INT 1
43296: PLUS
43297: PPUSH
43298: LD_VAR 0 4
43302: PPUSH
43303: CALL_OW 1
43307: ST_TO_ADDR
43308: GO 43234
43310: POP
43311: POP
// end ;
43312: LD_VAR 0 3
43316: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43317: LD_INT 0
43319: PPUSH
43320: PPUSH
43321: PPUSH
43322: PPUSH
43323: PPUSH
43324: PPUSH
43325: PPUSH
// result := [ ] ;
43326: LD_ADDR_VAR 0 4
43330: PUSH
43331: EMPTY
43332: ST_TO_ADDR
// if x - r < 0 then
43333: LD_VAR 0 1
43337: PUSH
43338: LD_VAR 0 3
43342: MINUS
43343: PUSH
43344: LD_INT 0
43346: LESS
43347: IFFALSE 43359
// min_x := 0 else
43349: LD_ADDR_VAR 0 8
43353: PUSH
43354: LD_INT 0
43356: ST_TO_ADDR
43357: GO 43375
// min_x := x - r ;
43359: LD_ADDR_VAR 0 8
43363: PUSH
43364: LD_VAR 0 1
43368: PUSH
43369: LD_VAR 0 3
43373: MINUS
43374: ST_TO_ADDR
// if y - r < 0 then
43375: LD_VAR 0 2
43379: PUSH
43380: LD_VAR 0 3
43384: MINUS
43385: PUSH
43386: LD_INT 0
43388: LESS
43389: IFFALSE 43401
// min_y := 0 else
43391: LD_ADDR_VAR 0 7
43395: PUSH
43396: LD_INT 0
43398: ST_TO_ADDR
43399: GO 43417
// min_y := y - r ;
43401: LD_ADDR_VAR 0 7
43405: PUSH
43406: LD_VAR 0 2
43410: PUSH
43411: LD_VAR 0 3
43415: MINUS
43416: ST_TO_ADDR
// max_x := x + r ;
43417: LD_ADDR_VAR 0 9
43421: PUSH
43422: LD_VAR 0 1
43426: PUSH
43427: LD_VAR 0 3
43431: PLUS
43432: ST_TO_ADDR
// max_y := y + r ;
43433: LD_ADDR_VAR 0 10
43437: PUSH
43438: LD_VAR 0 2
43442: PUSH
43443: LD_VAR 0 3
43447: PLUS
43448: ST_TO_ADDR
// for _x = min_x to max_x do
43449: LD_ADDR_VAR 0 5
43453: PUSH
43454: DOUBLE
43455: LD_VAR 0 8
43459: DEC
43460: ST_TO_ADDR
43461: LD_VAR 0 9
43465: PUSH
43466: FOR_TO
43467: IFFALSE 43568
// for _y = min_y to max_y do
43469: LD_ADDR_VAR 0 6
43473: PUSH
43474: DOUBLE
43475: LD_VAR 0 7
43479: DEC
43480: ST_TO_ADDR
43481: LD_VAR 0 10
43485: PUSH
43486: FOR_TO
43487: IFFALSE 43564
// begin if not ValidHex ( _x , _y ) then
43489: LD_VAR 0 5
43493: PPUSH
43494: LD_VAR 0 6
43498: PPUSH
43499: CALL_OW 488
43503: NOT
43504: IFFALSE 43508
// continue ;
43506: GO 43486
// if GetResourceTypeXY ( _x , _y ) then
43508: LD_VAR 0 5
43512: PPUSH
43513: LD_VAR 0 6
43517: PPUSH
43518: CALL_OW 283
43522: IFFALSE 43562
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43524: LD_ADDR_VAR 0 4
43528: PUSH
43529: LD_VAR 0 4
43533: PPUSH
43534: LD_VAR 0 4
43538: PUSH
43539: LD_INT 1
43541: PLUS
43542: PPUSH
43543: LD_VAR 0 5
43547: PUSH
43548: LD_VAR 0 6
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PPUSH
43557: CALL_OW 1
43561: ST_TO_ADDR
// end ;
43562: GO 43486
43564: POP
43565: POP
43566: GO 43466
43568: POP
43569: POP
// end ;
43570: LD_VAR 0 4
43574: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43575: LD_INT 0
43577: PPUSH
43578: PPUSH
43579: PPUSH
43580: PPUSH
43581: PPUSH
43582: PPUSH
43583: PPUSH
43584: PPUSH
// if not units then
43585: LD_VAR 0 1
43589: NOT
43590: IFFALSE 43594
// exit ;
43592: GO 44118
// result := UnitFilter ( units , [ f_ok ] ) ;
43594: LD_ADDR_VAR 0 3
43598: PUSH
43599: LD_VAR 0 1
43603: PPUSH
43604: LD_INT 50
43606: PUSH
43607: EMPTY
43608: LIST
43609: PPUSH
43610: CALL_OW 72
43614: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43615: LD_ADDR_VAR 0 8
43619: PUSH
43620: LD_VAR 0 1
43624: PUSH
43625: LD_INT 1
43627: ARRAY
43628: PPUSH
43629: CALL_OW 255
43633: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43634: LD_ADDR_VAR 0 10
43638: PUSH
43639: LD_INT 29
43641: PUSH
43642: LD_INT 91
43644: PUSH
43645: LD_INT 49
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: LIST
43652: ST_TO_ADDR
// if not result then
43653: LD_VAR 0 3
43657: NOT
43658: IFFALSE 43662
// exit ;
43660: GO 44118
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43662: LD_ADDR_VAR 0 5
43666: PUSH
43667: LD_INT 81
43669: PUSH
43670: LD_VAR 0 8
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PPUSH
43679: CALL_OW 69
43683: ST_TO_ADDR
// for i in result do
43684: LD_ADDR_VAR 0 4
43688: PUSH
43689: LD_VAR 0 3
43693: PUSH
43694: FOR_IN
43695: IFFALSE 44116
// begin tag := GetTag ( i ) + 1 ;
43697: LD_ADDR_VAR 0 9
43701: PUSH
43702: LD_VAR 0 4
43706: PPUSH
43707: CALL_OW 110
43711: PUSH
43712: LD_INT 1
43714: PLUS
43715: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
43716: LD_ADDR_VAR 0 7
43720: PUSH
43721: LD_VAR 0 4
43725: PPUSH
43726: CALL_OW 250
43730: PPUSH
43731: LD_VAR 0 4
43735: PPUSH
43736: CALL_OW 251
43740: PPUSH
43741: LD_INT 6
43743: PPUSH
43744: CALL 43317 0 3
43748: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
43749: LD_VAR 0 4
43753: PPUSH
43754: CALL_OW 247
43758: PUSH
43759: LD_INT 2
43761: EQUAL
43762: PUSH
43763: LD_VAR 0 7
43767: AND
43768: PUSH
43769: LD_VAR 0 4
43773: PPUSH
43774: CALL_OW 264
43778: PUSH
43779: LD_VAR 0 10
43783: IN
43784: NOT
43785: AND
43786: IFFALSE 43825
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43788: LD_VAR 0 4
43792: PPUSH
43793: LD_VAR 0 7
43797: PUSH
43798: LD_INT 1
43800: ARRAY
43801: PUSH
43802: LD_INT 1
43804: ARRAY
43805: PPUSH
43806: LD_VAR 0 7
43810: PUSH
43811: LD_INT 1
43813: ARRAY
43814: PUSH
43815: LD_INT 2
43817: ARRAY
43818: PPUSH
43819: CALL_OW 116
43823: GO 44114
// if path > tag then
43825: LD_VAR 0 2
43829: PUSH
43830: LD_VAR 0 9
43834: GREATER
43835: IFFALSE 44043
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43837: LD_ADDR_VAR 0 6
43841: PUSH
43842: LD_VAR 0 5
43846: PPUSH
43847: LD_INT 91
43849: PUSH
43850: LD_VAR 0 4
43854: PUSH
43855: LD_INT 8
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: LIST
43862: PPUSH
43863: CALL_OW 72
43867: ST_TO_ADDR
// if nearEnemy then
43868: LD_VAR 0 6
43872: IFFALSE 43941
// begin if GetWeapon ( i ) = ru_time_lapser then
43874: LD_VAR 0 4
43878: PPUSH
43879: CALL_OW 264
43883: PUSH
43884: LD_INT 49
43886: EQUAL
43887: IFFALSE 43915
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43889: LD_VAR 0 4
43893: PPUSH
43894: LD_VAR 0 6
43898: PPUSH
43899: LD_VAR 0 4
43903: PPUSH
43904: CALL_OW 74
43908: PPUSH
43909: CALL_OW 112
43913: GO 43939
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43915: LD_VAR 0 4
43919: PPUSH
43920: LD_VAR 0 6
43924: PPUSH
43925: LD_VAR 0 4
43929: PPUSH
43930: CALL_OW 74
43934: PPUSH
43935: CALL 45043 0 2
// end else
43939: GO 44041
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43941: LD_VAR 0 4
43945: PPUSH
43946: LD_VAR 0 2
43950: PUSH
43951: LD_VAR 0 9
43955: ARRAY
43956: PUSH
43957: LD_INT 1
43959: ARRAY
43960: PPUSH
43961: LD_VAR 0 2
43965: PUSH
43966: LD_VAR 0 9
43970: ARRAY
43971: PUSH
43972: LD_INT 2
43974: ARRAY
43975: PPUSH
43976: CALL_OW 297
43980: PUSH
43981: LD_INT 6
43983: GREATER
43984: IFFALSE 44027
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43986: LD_VAR 0 4
43990: PPUSH
43991: LD_VAR 0 2
43995: PUSH
43996: LD_VAR 0 9
44000: ARRAY
44001: PUSH
44002: LD_INT 1
44004: ARRAY
44005: PPUSH
44006: LD_VAR 0 2
44010: PUSH
44011: LD_VAR 0 9
44015: ARRAY
44016: PUSH
44017: LD_INT 2
44019: ARRAY
44020: PPUSH
44021: CALL_OW 114
44025: GO 44041
// SetTag ( i , tag ) ;
44027: LD_VAR 0 4
44031: PPUSH
44032: LD_VAR 0 9
44036: PPUSH
44037: CALL_OW 109
// end else
44041: GO 44114
// if enemy then
44043: LD_VAR 0 5
44047: IFFALSE 44114
// begin if GetWeapon ( i ) = ru_time_lapser then
44049: LD_VAR 0 4
44053: PPUSH
44054: CALL_OW 264
44058: PUSH
44059: LD_INT 49
44061: EQUAL
44062: IFFALSE 44090
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
44064: LD_VAR 0 4
44068: PPUSH
44069: LD_VAR 0 5
44073: PPUSH
44074: LD_VAR 0 4
44078: PPUSH
44079: CALL_OW 74
44083: PPUSH
44084: CALL_OW 112
44088: GO 44114
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
44090: LD_VAR 0 4
44094: PPUSH
44095: LD_VAR 0 5
44099: PPUSH
44100: LD_VAR 0 4
44104: PPUSH
44105: CALL_OW 74
44109: PPUSH
44110: CALL 45043 0 2
// end ; end ;
44114: GO 43694
44116: POP
44117: POP
// end ;
44118: LD_VAR 0 3
44122: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
44123: LD_INT 0
44125: PPUSH
44126: PPUSH
44127: PPUSH
// if not unit or IsInUnit ( unit ) then
44128: LD_VAR 0 1
44132: NOT
44133: PUSH
44134: LD_VAR 0 1
44138: PPUSH
44139: CALL_OW 310
44143: OR
44144: IFFALSE 44148
// exit ;
44146: GO 44239
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
44148: LD_ADDR_VAR 0 4
44152: PUSH
44153: LD_VAR 0 1
44157: PPUSH
44158: CALL_OW 250
44162: PPUSH
44163: LD_VAR 0 2
44167: PPUSH
44168: LD_INT 1
44170: PPUSH
44171: CALL_OW 272
44175: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
44176: LD_ADDR_VAR 0 5
44180: PUSH
44181: LD_VAR 0 1
44185: PPUSH
44186: CALL_OW 251
44190: PPUSH
44191: LD_VAR 0 2
44195: PPUSH
44196: LD_INT 1
44198: PPUSH
44199: CALL_OW 273
44203: ST_TO_ADDR
// if ValidHex ( x , y ) then
44204: LD_VAR 0 4
44208: PPUSH
44209: LD_VAR 0 5
44213: PPUSH
44214: CALL_OW 488
44218: IFFALSE 44239
// ComTurnXY ( unit , x , y ) ;
44220: LD_VAR 0 1
44224: PPUSH
44225: LD_VAR 0 4
44229: PPUSH
44230: LD_VAR 0 5
44234: PPUSH
44235: CALL_OW 118
// end ;
44239: LD_VAR 0 3
44243: RET
// export function SeeUnits ( side , units ) ; var i ; begin
44244: LD_INT 0
44246: PPUSH
44247: PPUSH
// result := false ;
44248: LD_ADDR_VAR 0 3
44252: PUSH
44253: LD_INT 0
44255: ST_TO_ADDR
// if not units then
44256: LD_VAR 0 2
44260: NOT
44261: IFFALSE 44265
// exit ;
44263: GO 44310
// for i in units do
44265: LD_ADDR_VAR 0 4
44269: PUSH
44270: LD_VAR 0 2
44274: PUSH
44275: FOR_IN
44276: IFFALSE 44308
// if See ( side , i ) then
44278: LD_VAR 0 1
44282: PPUSH
44283: LD_VAR 0 4
44287: PPUSH
44288: CALL_OW 292
44292: IFFALSE 44306
// begin result := true ;
44294: LD_ADDR_VAR 0 3
44298: PUSH
44299: LD_INT 1
44301: ST_TO_ADDR
// exit ;
44302: POP
44303: POP
44304: GO 44310
// end ;
44306: GO 44275
44308: POP
44309: POP
// end ;
44310: LD_VAR 0 3
44314: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44315: LD_INT 0
44317: PPUSH
44318: PPUSH
44319: PPUSH
44320: PPUSH
// if not unit or not points then
44321: LD_VAR 0 1
44325: NOT
44326: PUSH
44327: LD_VAR 0 2
44331: NOT
44332: OR
44333: IFFALSE 44337
// exit ;
44335: GO 44427
// dist := 99999 ;
44337: LD_ADDR_VAR 0 5
44341: PUSH
44342: LD_INT 99999
44344: ST_TO_ADDR
// for i in points do
44345: LD_ADDR_VAR 0 4
44349: PUSH
44350: LD_VAR 0 2
44354: PUSH
44355: FOR_IN
44356: IFFALSE 44425
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44358: LD_ADDR_VAR 0 6
44362: PUSH
44363: LD_VAR 0 1
44367: PPUSH
44368: LD_VAR 0 4
44372: PUSH
44373: LD_INT 1
44375: ARRAY
44376: PPUSH
44377: LD_VAR 0 4
44381: PUSH
44382: LD_INT 2
44384: ARRAY
44385: PPUSH
44386: CALL_OW 297
44390: ST_TO_ADDR
// if tmpDist < dist then
44391: LD_VAR 0 6
44395: PUSH
44396: LD_VAR 0 5
44400: LESS
44401: IFFALSE 44423
// begin result := i ;
44403: LD_ADDR_VAR 0 3
44407: PUSH
44408: LD_VAR 0 4
44412: ST_TO_ADDR
// dist := tmpDist ;
44413: LD_ADDR_VAR 0 5
44417: PUSH
44418: LD_VAR 0 6
44422: ST_TO_ADDR
// end ; end ;
44423: GO 44355
44425: POP
44426: POP
// end ;
44427: LD_VAR 0 3
44431: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44432: LD_INT 0
44434: PPUSH
// uc_side := side ;
44435: LD_ADDR_OWVAR 20
44439: PUSH
44440: LD_VAR 0 1
44444: ST_TO_ADDR
// uc_nation := 3 ;
44445: LD_ADDR_OWVAR 21
44449: PUSH
44450: LD_INT 3
44452: ST_TO_ADDR
// vc_chassis := 25 ;
44453: LD_ADDR_OWVAR 37
44457: PUSH
44458: LD_INT 25
44460: ST_TO_ADDR
// vc_engine := engine_siberite ;
44461: LD_ADDR_OWVAR 39
44465: PUSH
44466: LD_INT 3
44468: ST_TO_ADDR
// vc_control := control_computer ;
44469: LD_ADDR_OWVAR 38
44473: PUSH
44474: LD_INT 3
44476: ST_TO_ADDR
// vc_weapon := 59 ;
44477: LD_ADDR_OWVAR 40
44481: PUSH
44482: LD_INT 59
44484: ST_TO_ADDR
// result := CreateVehicle ;
44485: LD_ADDR_VAR 0 5
44489: PUSH
44490: CALL_OW 45
44494: ST_TO_ADDR
// SetDir ( result , d ) ;
44495: LD_VAR 0 5
44499: PPUSH
44500: LD_VAR 0 4
44504: PPUSH
44505: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44509: LD_VAR 0 5
44513: PPUSH
44514: LD_VAR 0 2
44518: PPUSH
44519: LD_VAR 0 3
44523: PPUSH
44524: LD_INT 0
44526: PPUSH
44527: CALL_OW 48
// end ;
44531: LD_VAR 0 5
44535: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44536: LD_INT 0
44538: PPUSH
44539: PPUSH
44540: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44541: LD_ADDR_VAR 0 2
44545: PUSH
44546: LD_INT 0
44548: PUSH
44549: LD_INT 0
44551: PUSH
44552: LD_INT 0
44554: PUSH
44555: LD_INT 0
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44564: LD_VAR 0 1
44568: NOT
44569: PUSH
44570: LD_VAR 0 1
44574: PPUSH
44575: CALL_OW 264
44579: PUSH
44580: LD_INT 12
44582: PUSH
44583: LD_INT 51
44585: PUSH
44586: LD_INT 32
44588: PUSH
44589: LD_INT 89
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: IN
44598: NOT
44599: OR
44600: IFFALSE 44604
// exit ;
44602: GO 44702
// for i := 1 to 3 do
44604: LD_ADDR_VAR 0 3
44608: PUSH
44609: DOUBLE
44610: LD_INT 1
44612: DEC
44613: ST_TO_ADDR
44614: LD_INT 3
44616: PUSH
44617: FOR_TO
44618: IFFALSE 44700
// begin tmp := GetCargo ( cargo , i ) ;
44620: LD_ADDR_VAR 0 4
44624: PUSH
44625: LD_VAR 0 1
44629: PPUSH
44630: LD_VAR 0 3
44634: PPUSH
44635: CALL_OW 289
44639: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44640: LD_ADDR_VAR 0 2
44644: PUSH
44645: LD_VAR 0 2
44649: PPUSH
44650: LD_VAR 0 3
44654: PPUSH
44655: LD_VAR 0 4
44659: PPUSH
44660: CALL_OW 1
44664: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44665: LD_ADDR_VAR 0 2
44669: PUSH
44670: LD_VAR 0 2
44674: PPUSH
44675: LD_INT 4
44677: PPUSH
44678: LD_VAR 0 2
44682: PUSH
44683: LD_INT 4
44685: ARRAY
44686: PUSH
44687: LD_VAR 0 4
44691: PLUS
44692: PPUSH
44693: CALL_OW 1
44697: ST_TO_ADDR
// end ;
44698: GO 44617
44700: POP
44701: POP
// end ;
44702: LD_VAR 0 2
44706: RET
// export function Length ( array ) ; begin
44707: LD_INT 0
44709: PPUSH
// result := array + 0 ;
44710: LD_ADDR_VAR 0 2
44714: PUSH
44715: LD_VAR 0 1
44719: PUSH
44720: LD_INT 0
44722: PLUS
44723: ST_TO_ADDR
// end ;
44724: LD_VAR 0 2
44728: RET
// export function PrepareArray ( array ) ; begin
44729: LD_INT 0
44731: PPUSH
// result := array diff 0 ;
44732: LD_ADDR_VAR 0 2
44736: PUSH
44737: LD_VAR 0 1
44741: PUSH
44742: LD_INT 0
44744: DIFF
44745: ST_TO_ADDR
// if not result [ 1 ] then
44746: LD_VAR 0 2
44750: PUSH
44751: LD_INT 1
44753: ARRAY
44754: NOT
44755: IFFALSE 44775
// result := Delete ( result , 1 ) ;
44757: LD_ADDR_VAR 0 2
44761: PUSH
44762: LD_VAR 0 2
44766: PPUSH
44767: LD_INT 1
44769: PPUSH
44770: CALL_OW 3
44774: ST_TO_ADDR
// end ;
44775: LD_VAR 0 2
44779: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44780: LD_INT 0
44782: PPUSH
44783: PPUSH
44784: PPUSH
44785: PPUSH
// sibRocketRange := 25 ;
44786: LD_ADDR_VAR 0 6
44790: PUSH
44791: LD_INT 25
44793: ST_TO_ADDR
// result := false ;
44794: LD_ADDR_VAR 0 4
44798: PUSH
44799: LD_INT 0
44801: ST_TO_ADDR
// for i := 0 to 5 do
44802: LD_ADDR_VAR 0 5
44806: PUSH
44807: DOUBLE
44808: LD_INT 0
44810: DEC
44811: ST_TO_ADDR
44812: LD_INT 5
44814: PUSH
44815: FOR_TO
44816: IFFALSE 44883
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44818: LD_VAR 0 1
44822: PPUSH
44823: LD_VAR 0 5
44827: PPUSH
44828: LD_VAR 0 6
44832: PPUSH
44833: CALL_OW 272
44837: PPUSH
44838: LD_VAR 0 2
44842: PPUSH
44843: LD_VAR 0 5
44847: PPUSH
44848: LD_VAR 0 6
44852: PPUSH
44853: CALL_OW 273
44857: PPUSH
44858: LD_VAR 0 3
44862: PPUSH
44863: CALL_OW 309
44867: IFFALSE 44881
// begin result := true ;
44869: LD_ADDR_VAR 0 4
44873: PUSH
44874: LD_INT 1
44876: ST_TO_ADDR
// exit ;
44877: POP
44878: POP
44879: GO 44885
// end ;
44881: GO 44815
44883: POP
44884: POP
// end ;
44885: LD_VAR 0 4
44889: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
44890: LD_INT 0
44892: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
44893: LD_VAR 0 1
44897: PPUSH
44898: LD_VAR 0 2
44902: PPUSH
44903: LD_INT 0
44905: PPUSH
44906: LD_INT 0
44908: PPUSH
44909: LD_INT 1
44911: PPUSH
44912: LD_INT 0
44914: PPUSH
44915: CALL_OW 587
// end ;
44919: LD_VAR 0 3
44923: RET
// export function CenterOnNow ( unit ) ; begin
44924: LD_INT 0
44926: PPUSH
// result := IsInUnit ( unit ) ;
44927: LD_ADDR_VAR 0 2
44931: PUSH
44932: LD_VAR 0 1
44936: PPUSH
44937: CALL_OW 310
44941: ST_TO_ADDR
// if not result then
44942: LD_VAR 0 2
44946: NOT
44947: IFFALSE 44959
// result := unit ;
44949: LD_ADDR_VAR 0 2
44953: PUSH
44954: LD_VAR 0 1
44958: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
44959: LD_VAR 0 1
44963: PPUSH
44964: CALL_OW 87
// end ;
44968: LD_VAR 0 2
44972: RET
// export function ComMoveHex ( unit , hex ) ; begin
44973: LD_INT 0
44975: PPUSH
// if not hex then
44976: LD_VAR 0 2
44980: NOT
44981: IFFALSE 44985
// exit ;
44983: GO 45038
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
44985: LD_VAR 0 2
44989: PUSH
44990: LD_INT 1
44992: ARRAY
44993: PPUSH
44994: LD_VAR 0 2
44998: PUSH
44999: LD_INT 2
45001: ARRAY
45002: PPUSH
45003: CALL_OW 428
45007: IFFALSE 45011
// exit ;
45009: GO 45038
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
45011: LD_VAR 0 1
45015: PPUSH
45016: LD_VAR 0 2
45020: PUSH
45021: LD_INT 1
45023: ARRAY
45024: PPUSH
45025: LD_VAR 0 2
45029: PUSH
45030: LD_INT 2
45032: ARRAY
45033: PPUSH
45034: CALL_OW 111
// end ;
45038: LD_VAR 0 3
45042: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
45043: LD_INT 0
45045: PPUSH
45046: PPUSH
45047: PPUSH
// if not unit or not enemy then
45048: LD_VAR 0 1
45052: NOT
45053: PUSH
45054: LD_VAR 0 2
45058: NOT
45059: OR
45060: IFFALSE 45064
// exit ;
45062: GO 45188
// x := GetX ( enemy ) ;
45064: LD_ADDR_VAR 0 4
45068: PUSH
45069: LD_VAR 0 2
45073: PPUSH
45074: CALL_OW 250
45078: ST_TO_ADDR
// y := GetY ( enemy ) ;
45079: LD_ADDR_VAR 0 5
45083: PUSH
45084: LD_VAR 0 2
45088: PPUSH
45089: CALL_OW 251
45093: ST_TO_ADDR
// if ValidHex ( x , y ) then
45094: LD_VAR 0 4
45098: PPUSH
45099: LD_VAR 0 5
45103: PPUSH
45104: CALL_OW 488
45108: IFFALSE 45188
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
45110: LD_VAR 0 2
45114: PPUSH
45115: CALL_OW 247
45119: PUSH
45120: LD_INT 3
45122: PUSH
45123: LD_INT 2
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: IN
45130: PUSH
45131: LD_VAR 0 1
45135: PPUSH
45136: CALL_OW 255
45140: PPUSH
45141: LD_VAR 0 2
45145: PPUSH
45146: CALL_OW 292
45150: AND
45151: IFFALSE 45169
// ComAttackUnit ( unit , enemy ) else
45153: LD_VAR 0 1
45157: PPUSH
45158: LD_VAR 0 2
45162: PPUSH
45163: CALL_OW 115
45167: GO 45188
// ComAgressiveMove ( unit , x , y ) ;
45169: LD_VAR 0 1
45173: PPUSH
45174: LD_VAR 0 4
45178: PPUSH
45179: LD_VAR 0 5
45183: PPUSH
45184: CALL_OW 114
// end ;
45188: LD_VAR 0 3
45192: RET
