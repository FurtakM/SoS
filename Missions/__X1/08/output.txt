// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// PrepareArabian ;
   8: CALL 65 0 0
// PrepareRussian ;
  12: CALL 1514 0 0
// PrepareHeike ;
  16: CALL 614 0 0
// Action ;
  20: CALL 2694 0 0
// end ;
  24: END
// export debug , prefix , startAttackOnKabul , startAttackOnHeike ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// prefix := 07_ ;
  36: LD_ADDR_EXP 2
  40: PUSH
  41: LD_STRING 07_
  43: ST_TO_ADDR
// startAttackOnKabul := false ;
  44: LD_ADDR_EXP 3
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// startAttackOnHeike := false ;
  52: LD_ADDR_EXP 4
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// end ; end_of_file
  60: LD_VAR 0 1
  64: RET
// export function PrepareArabian ; var i , un , lives ; begin
  65: LD_INT 0
  67: PPUSH
  68: PPUSH
  69: PPUSH
  70: PPUSH
// SetBName ( ar_dep , newkabul ) ;
  71: LD_INT 2
  73: PPUSH
  74: LD_STRING newkabul
  76: PPUSH
  77: CALL_OW 500
// uc_side := 5 ;
  81: LD_ADDR_OWVAR 20
  85: PUSH
  86: LD_INT 5
  88: ST_TO_ADDR
// uc_nation := 2 ;
  89: LD_ADDR_OWVAR 21
  93: PUSH
  94: LD_INT 2
  96: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do
  97: LD_ADDR_VAR 0 2
 101: PUSH
 102: LD_INT 22
 104: PUSH
 105: LD_INT 2
 107: PUSH
 108: EMPTY
 109: LIST
 110: LIST
 111: PUSH
 112: LD_INT 21
 114: PUSH
 115: LD_INT 3
 117: PUSH
 118: EMPTY
 119: LIST
 120: LIST
 121: PUSH
 122: EMPTY
 123: LIST
 124: LIST
 125: PPUSH
 126: CALL_OW 69
 130: PUSH
 131: FOR_IN
 132: IFFALSE 266
// begin SetSide ( i , 5 ) ;
 134: LD_VAR 0 2
 138: PPUSH
 139: LD_INT 5
 141: PPUSH
 142: CALL_OW 235
// lives := rand ( 248 , 510 ) ;
 146: LD_ADDR_VAR 0 4
 150: PUSH
 151: LD_INT 248
 153: PPUSH
 154: LD_INT 510
 156: PPUSH
 157: CALL_OW 12
 161: ST_TO_ADDR
// SetLives ( i , lives ) ;
 162: LD_VAR 0 2
 166: PPUSH
 167: LD_VAR 0 4
 171: PPUSH
 172: CALL_OW 234
// if GetBType ( i ) = b_bunker then
 176: LD_VAR 0 2
 180: PPUSH
 181: CALL_OW 266
 185: PUSH
 186: LD_INT 32
 188: EQUAL
 189: IFFALSE 264
// begin PlaceWeaponTurret ( i , [ ar_double_machine_gun , ar_gun , ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] ) ;
 191: LD_VAR 0 2
 195: PPUSH
 196: LD_INT 24
 198: PUSH
 199: LD_INT 27
 201: PUSH
 202: LD_INT 25
 204: PUSH
 205: LD_INT 28
 207: PUSH
 208: EMPTY
 209: LIST
 210: LIST
 211: LIST
 212: LIST
 213: PUSH
 214: LD_INT 1
 216: PPUSH
 217: LD_INT 4
 219: PPUSH
 220: CALL_OW 12
 224: ARRAY
 225: PPUSH
 226: CALL_OW 431
// if lives > 250 then
 230: LD_VAR 0 4
 234: PUSH
 235: LD_INT 250
 237: GREATER
 238: IFFALSE 264
// begin PrepareSoldier ( false , 6 ) ;
 240: LD_INT 0
 242: PPUSH
 243: LD_INT 6
 245: PPUSH
 246: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
 250: CALL_OW 44
 254: PPUSH
 255: LD_VAR 0 2
 259: PPUSH
 260: CALL_OW 52
// end ; end ; end ;
 264: GO 131
 266: POP
 267: POP
// for i := 1 to 9 do
 268: LD_ADDR_VAR 0 2
 272: PUSH
 273: DOUBLE
 274: LD_INT 1
 276: DEC
 277: ST_TO_ADDR
 278: LD_INT 9
 280: PUSH
 281: FOR_TO
 282: IFFALSE 361
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 0 ) ;
 284: LD_INT 0
 286: PPUSH
 287: LD_INT 1
 289: PPUSH
 290: LD_INT 4
 292: PPUSH
 293: CALL_OW 12
 297: PPUSH
 298: LD_INT 0
 300: PPUSH
 301: CALL_OW 380
// un := CreateHuman ;
 305: LD_ADDR_VAR 0 3
 309: PUSH
 310: CALL_OW 44
 314: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 315: LD_VAR 0 3
 319: PPUSH
 320: LD_INT 0
 322: PPUSH
 323: LD_INT 5
 325: PPUSH
 326: CALL_OW 12
 330: PPUSH
 331: CALL_OW 233
// PlaceUnitArea ( un , kabulDeadArea , false ) ;
 335: LD_VAR 0 3
 339: PPUSH
 340: LD_INT 1
 342: PPUSH
 343: LD_INT 0
 345: PPUSH
 346: CALL_OW 49
// KillUnit ( un ) ;
 350: LD_VAR 0 3
 354: PPUSH
 355: CALL_OW 66
// end ;
 359: GO 281
 361: POP
 362: POP
// for i := 1 to 3 do
 363: LD_ADDR_VAR 0 2
 367: PUSH
 368: DOUBLE
 369: LD_INT 1
 371: DEC
 372: ST_TO_ADDR
 373: LD_INT 3
 375: PUSH
 376: FOR_TO
 377: IFFALSE 531
// begin vc_chassis := ar_medium_trike ;
 379: LD_ADDR_OWVAR 37
 383: PUSH
 384: LD_INT 13
 386: ST_TO_ADDR
// vc_engine := [ engine_solar , engine_combustion ] [ rand ( 1 , 2 ) ] ;
 387: LD_ADDR_OWVAR 39
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 1
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: PUSH
 402: LD_INT 1
 404: PPUSH
 405: LD_INT 2
 407: PPUSH
 408: CALL_OW 12
 412: ARRAY
 413: ST_TO_ADDR
// vc_control := [ control_manual , control_remote ] [ rand ( 1 , 2 ) ] ;
 414: LD_ADDR_OWVAR 38
 418: PUSH
 419: LD_INT 1
 421: PUSH
 422: LD_INT 2
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: PUSH
 429: LD_INT 1
 431: PPUSH
 432: LD_INT 2
 434: PPUSH
 435: CALL_OW 12
 439: ARRAY
 440: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_gatling_gun , ar_gun ] [ rand ( 1 , 3 ) ] ;
 441: LD_ADDR_OWVAR 40
 445: PUSH
 446: LD_INT 24
 448: PUSH
 449: LD_INT 25
 451: PUSH
 452: LD_INT 27
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: LIST
 459: PUSH
 460: LD_INT 1
 462: PPUSH
 463: LD_INT 3
 465: PPUSH
 466: CALL_OW 12
 470: ARRAY
 471: ST_TO_ADDR
// un := CreateVehicle ;
 472: LD_ADDR_VAR 0 3
 476: PUSH
 477: CALL_OW 45
 481: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 482: LD_VAR 0 3
 486: PPUSH
 487: LD_INT 0
 489: PPUSH
 490: LD_INT 5
 492: PPUSH
 493: CALL_OW 12
 497: PPUSH
 498: CALL_OW 233
// PlaceUnitArea ( un , kabulVDeadArea , false ) ;
 502: LD_VAR 0 3
 506: PPUSH
 507: LD_INT 2
 509: PPUSH
 510: LD_INT 0
 512: PPUSH
 513: CALL_OW 49
// SetLives ( un , 200 ) ;
 517: LD_VAR 0 3
 521: PPUSH
 522: LD_INT 200
 524: PPUSH
 525: CALL_OW 234
// end ;
 529: GO 376
 531: POP
 532: POP
// for i := 1 to 3 do
 533: LD_ADDR_VAR 0 2
 537: PUSH
 538: DOUBLE
 539: LD_INT 1
 541: DEC
 542: ST_TO_ADDR
 543: LD_INT 3
 545: PUSH
 546: FOR_TO
 547: IFFALSE 607
// begin PrepareSoldier ( false , 6 ) ;
 549: LD_INT 0
 551: PPUSH
 552: LD_INT 6
 554: PPUSH
 555: CALL_OW 381
// un := CreateHuman ;
 559: LD_ADDR_VAR 0 3
 563: PUSH
 564: CALL_OW 44
 568: ST_TO_ADDR
// PlaceUnitXYR ( un , 106 , 47 , 4 , false ) ;
 569: LD_VAR 0 3
 573: PPUSH
 574: LD_INT 106
 576: PPUSH
 577: LD_INT 47
 579: PPUSH
 580: LD_INT 4
 582: PPUSH
 583: LD_INT 0
 585: PPUSH
 586: CALL_OW 50
// ComAgressiveMove ( un , 71 , 53 ) ;
 590: LD_VAR 0 3
 594: PPUSH
 595: LD_INT 71
 597: PPUSH
 598: LD_INT 53
 600: PPUSH
 601: CALL_OW 114
// end ;
 605: GO 546
 607: POP
 608: POP
// end ;
 609: LD_VAR 0 1
 613: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad ; export function PrepareHeike ; var i , tmp , un , veh ; begin
 614: LD_INT 0
 616: PPUSH
 617: PPUSH
 618: PPUSH
 619: PPUSH
 620: PPUSH
// uc_side := 5 ;
 621: LD_ADDR_OWVAR 20
 625: PUSH
 626: LD_INT 5
 628: ST_TO_ADDR
// uc_nation := 1 ;
 629: LD_ADDR_OWVAR 21
 633: PUSH
 634: LD_INT 1
 636: ST_TO_ADDR
// americanSquad := [ ] ;
 637: LD_ADDR_EXP 17
 641: PUSH
 642: EMPTY
 643: ST_TO_ADDR
// if not americanSquad then
 644: LD_EXP 17
 648: NOT
 649: IFFALSE 714
// begin for i := 1 to 4 do
 651: LD_ADDR_VAR 0 2
 655: PUSH
 656: DOUBLE
 657: LD_INT 1
 659: DEC
 660: ST_TO_ADDR
 661: LD_INT 4
 663: PUSH
 664: FOR_TO
 665: IFFALSE 710
// begin PrepareHuman ( false , rand ( 2 , 4 ) , 6 ) ;
 667: LD_INT 0
 669: PPUSH
 670: LD_INT 2
 672: PPUSH
 673: LD_INT 4
 675: PPUSH
 676: CALL_OW 12
 680: PPUSH
 681: LD_INT 6
 683: PPUSH
 684: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 688: LD_ADDR_EXP 17
 692: PUSH
 693: LD_EXP 17
 697: PPUSH
 698: CALL_OW 44
 702: PPUSH
 703: CALL 40942 0 2
 707: ST_TO_ADDR
// end ;
 708: GO 664
 710: POP
 711: POP
// end else
 712: GO 765
// begin for i in americanSquad do
 714: LD_ADDR_VAR 0 2
 718: PUSH
 719: LD_EXP 17
 723: PUSH
 724: FOR_IN
 725: IFFALSE 763
// if GetClass ( i ) in [ class_sniper , class_soldier ] then
 727: LD_VAR 0 2
 731: PPUSH
 732: CALL_OW 257
 736: PUSH
 737: LD_INT 5
 739: PUSH
 740: LD_INT 1
 742: PUSH
 743: EMPTY
 744: LIST
 745: LIST
 746: IN
 747: IFFALSE 761
// SetClass ( i , class_engineer ) ;
 749: LD_VAR 0 2
 753: PPUSH
 754: LD_INT 2
 756: PPUSH
 757: CALL_OW 336
 761: GO 724
 763: POP
 764: POP
// end ; uc_side := 2 ;
 765: LD_ADDR_OWVAR 20
 769: PUSH
 770: LD_INT 2
 772: ST_TO_ADDR
// uc_nation := 2 ;
 773: LD_ADDR_OWVAR 21
 777: PUSH
 778: LD_INT 2
 780: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 781: LD_ADDR_EXP 5
 785: PUSH
 786: LD_STRING Heike
 788: PPUSH
 789: LD_EXP 1
 793: NOT
 794: PPUSH
 795: LD_EXP 2
 799: PPUSH
 800: CALL 3650 0 3
 804: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 805: LD_ADDR_EXP 8
 809: PUSH
 810: LD_STRING Ibrahim
 812: PPUSH
 813: LD_EXP 1
 817: NOT
 818: PPUSH
 819: LD_EXP 2
 823: PPUSH
 824: CALL 3650 0 3
 828: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 829: LD_ADDR_EXP 6
 833: PUSH
 834: LD_STRING Givi
 836: PPUSH
 837: LD_EXP 1
 841: NOT
 842: PPUSH
 843: LD_EXP 2
 847: PPUSH
 848: CALL 3650 0 3
 852: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 853: LD_ADDR_EXP 9
 857: PUSH
 858: LD_STRING Kamil
 860: PPUSH
 861: LD_EXP 1
 865: NOT
 866: PPUSH
 867: LD_EXP 2
 871: PPUSH
 872: CALL 3650 0 3
 876: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 877: LD_ADDR_EXP 10
 881: PUSH
 882: LD_STRING Kaia
 884: PPUSH
 885: LD_EXP 1
 889: NOT
 890: PPUSH
 891: LD_EXP 2
 895: PPUSH
 896: CALL 3650 0 3
 900: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 901: LD_ADDR_EXP 11
 905: PUSH
 906: LD_STRING Sophia
 908: PPUSH
 909: LD_EXP 1
 913: NOT
 914: PPUSH
 915: LD_EXP 2
 919: PPUSH
 920: CALL 3650 0 3
 924: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 925: LD_ADDR_EXP 12
 929: PUSH
 930: LD_STRING Markov
 932: PPUSH
 933: LD_EXP 1
 937: NOT
 938: PPUSH
 939: LD_EXP 2
 943: PPUSH
 944: CALL 3650 0 3
 948: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 949: LD_ADDR_EXP 15
 953: PUSH
 954: LD_STRING Aviradze
 956: PPUSH
 957: LD_EXP 1
 961: NOT
 962: PPUSH
 963: LD_EXP 2
 967: PPUSH
 968: CALL 3650 0 3
 972: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 973: LD_ADDR_EXP 14
 977: PUSH
 978: LD_STRING Kurt
 980: PPUSH
 981: LD_EXP 1
 985: NOT
 986: PPUSH
 987: LD_EXP 2
 991: PPUSH
 992: CALL 3650 0 3
 996: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 997: LD_ADDR_EXP 7
1001: PUSH
1002: LD_STRING Mike
1004: PPUSH
1005: LD_EXP 1
1009: NOT
1010: PPUSH
1011: LD_EXP 2
1015: PPUSH
1016: CALL 3650 0 3
1020: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
1021: LD_ADDR_EXP 13
1025: PUSH
1026: LD_STRING Olaf
1028: PPUSH
1029: LD_EXP 1
1033: NOT
1034: PPUSH
1035: LD_EXP 2
1039: PPUSH
1040: CALL 3650 0 3
1044: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
1045: LD_ADDR_EXP 16
1049: PUSH
1050: LD_STRING 07_others
1052: PPUSH
1053: CALL_OW 31
1057: ST_TO_ADDR
// veh := [ [ ar_half_tracked , engine_combustion , control_manual , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] , ] ;
1058: LD_ADDR_VAR 0 5
1062: PUSH
1063: LD_INT 14
1065: PUSH
1066: LD_INT 1
1068: PUSH
1069: LD_INT 1
1071: PUSH
1072: LD_INT 25
1074: PUSH
1075: EMPTY
1076: LIST
1077: LIST
1078: LIST
1079: LIST
1080: PUSH
1081: LD_INT 14
1083: PUSH
1084: LD_INT 1
1086: PUSH
1087: LD_INT 1
1089: PUSH
1090: LD_INT 27
1092: PUSH
1093: EMPTY
1094: LIST
1095: LIST
1096: LIST
1097: LIST
1098: PUSH
1099: LD_INT 14
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: LD_INT 1
1107: PUSH
1108: LD_INT 27
1110: PUSH
1111: EMPTY
1112: LIST
1113: LIST
1114: LIST
1115: LIST
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: LIST
1121: ST_TO_ADDR
// for i in veh do
1122: LD_ADDR_VAR 0 2
1126: PUSH
1127: LD_VAR 0 5
1131: PUSH
1132: FOR_IN
1133: IFFALSE 1238
// begin vc_chassis := i [ 1 ] ;
1135: LD_ADDR_OWVAR 37
1139: PUSH
1140: LD_VAR 0 2
1144: PUSH
1145: LD_INT 1
1147: ARRAY
1148: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
1149: LD_ADDR_OWVAR 39
1153: PUSH
1154: LD_VAR 0 2
1158: PUSH
1159: LD_INT 2
1161: ARRAY
1162: ST_TO_ADDR
// vc_control := i [ 3 ] ;
1163: LD_ADDR_OWVAR 38
1167: PUSH
1168: LD_VAR 0 2
1172: PUSH
1173: LD_INT 3
1175: ARRAY
1176: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
1177: LD_ADDR_OWVAR 40
1181: PUSH
1182: LD_VAR 0 2
1186: PUSH
1187: LD_INT 4
1189: ARRAY
1190: ST_TO_ADDR
// vc_fuel_battery := 25 ;
1191: LD_ADDR_OWVAR 41
1195: PUSH
1196: LD_INT 25
1198: ST_TO_ADDR
// un := CreateVehicle ;
1199: LD_ADDR_VAR 0 4
1203: PUSH
1204: CALL_OW 45
1208: ST_TO_ADDR
// SetDir ( un , 0 ) ;
1209: LD_VAR 0 4
1213: PPUSH
1214: LD_INT 0
1216: PPUSH
1217: CALL_OW 233
// PlaceUnitArea ( un , heikeVehArea , false ) ;
1221: LD_VAR 0 4
1225: PPUSH
1226: LD_INT 7
1228: PPUSH
1229: LD_INT 0
1231: PPUSH
1232: CALL_OW 49
// end ;
1236: GO 1132
1238: POP
1239: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad union americanSquad ;
1240: LD_ADDR_VAR 0 3
1244: PUSH
1245: LD_EXP 7
1249: PUSH
1250: LD_EXP 8
1254: PUSH
1255: LD_EXP 9
1259: PUSH
1260: LD_EXP 10
1264: PUSH
1265: LD_EXP 11
1269: PUSH
1270: LD_EXP 12
1274: PUSH
1275: LD_EXP 13
1279: PUSH
1280: LD_EXP 14
1284: PUSH
1285: LD_EXP 15
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: PUSH
1301: LD_EXP 16
1305: UNION
1306: PUSH
1307: LD_EXP 17
1311: UNION
1312: ST_TO_ADDR
// for i in tmp do
1313: LD_ADDR_VAR 0 2
1317: PUSH
1318: LD_VAR 0 3
1322: PUSH
1323: FOR_IN
1324: IFFALSE 1444
// begin if GetClass ( i ) in [ class_mechanic , class_engineer , class_scientistic ] and FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) then
1326: LD_VAR 0 2
1330: PPUSH
1331: CALL_OW 257
1335: PUSH
1336: LD_INT 3
1338: PUSH
1339: LD_INT 2
1341: PUSH
1342: LD_INT 4
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: LIST
1349: IN
1350: PUSH
1351: LD_INT 22
1353: PUSH
1354: LD_INT 2
1356: PUSH
1357: EMPTY
1358: LIST
1359: LIST
1360: PUSH
1361: LD_INT 58
1363: PUSH
1364: EMPTY
1365: LIST
1366: PUSH
1367: EMPTY
1368: LIST
1369: LIST
1370: PPUSH
1371: CALL_OW 69
1375: AND
1376: IFFALSE 1418
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) [ 1 ] ) else
1378: LD_VAR 0 2
1382: PPUSH
1383: LD_INT 22
1385: PUSH
1386: LD_INT 2
1388: PUSH
1389: EMPTY
1390: LIST
1391: LIST
1392: PUSH
1393: LD_INT 58
1395: PUSH
1396: EMPTY
1397: LIST
1398: PUSH
1399: EMPTY
1400: LIST
1401: LIST
1402: PPUSH
1403: CALL_OW 69
1407: PUSH
1408: LD_INT 1
1410: ARRAY
1411: PPUSH
1412: CALL_OW 52
1416: GO 1433
// PlaceUnitArea ( i , heikePeopleArea , false ) ;
1418: LD_VAR 0 2
1422: PPUSH
1423: LD_INT 6
1425: PPUSH
1426: LD_INT 0
1428: PPUSH
1429: CALL_OW 49
// ComHold ( i ) ;
1433: LD_VAR 0 2
1437: PPUSH
1438: CALL_OW 140
// end ;
1442: GO 1323
1444: POP
1445: POP
// PlaceUnitArea ( Heike , heikeArea , false ) ;
1446: LD_EXP 5
1450: PPUSH
1451: LD_INT 5
1453: PPUSH
1454: LD_INT 0
1456: PPUSH
1457: CALL_OW 49
// ComTurnUnit ( Heike , ar_dep ) ;
1461: LD_EXP 5
1465: PPUSH
1466: LD_INT 2
1468: PPUSH
1469: CALL_OW 119
// if Givi then
1473: LD_EXP 6
1477: IFFALSE 1509
// begin PlaceUnitXY ( Givi , 129 , 158 , false ) ;
1479: LD_EXP 6
1483: PPUSH
1484: LD_INT 129
1486: PPUSH
1487: LD_INT 158
1489: PPUSH
1490: LD_INT 0
1492: PPUSH
1493: CALL_OW 48
// ComTurnUnit ( Givi , ar_dep ) ;
1497: LD_EXP 6
1501: PPUSH
1502: LD_INT 2
1504: PPUSH
1505: CALL_OW 119
// end ; end ; end_of_file
1509: LD_VAR 0 1
1513: RET
// export kabulAttackers , heikeAttackers , Burlak ; export function PrepareRussian ; var i , un ; begin
1514: LD_INT 0
1516: PPUSH
1517: PPUSH
1518: PPUSH
// uc_side := 3 ;
1519: LD_ADDR_OWVAR 20
1523: PUSH
1524: LD_INT 3
1526: ST_TO_ADDR
// uc_nation := 3 ;
1527: LD_ADDR_OWVAR 21
1531: PUSH
1532: LD_INT 3
1534: ST_TO_ADDR
// Burlak := NewCharacter ( Burlak ) ;
1535: LD_ADDR_EXP 20
1539: PUSH
1540: LD_STRING Burlak
1542: PPUSH
1543: CALL_OW 25
1547: ST_TO_ADDR
// kabulAttackers := [ ] ;
1548: LD_ADDR_EXP 18
1552: PUSH
1553: EMPTY
1554: ST_TO_ADDR
// heikeAttackers := [ ] ;
1555: LD_ADDR_EXP 19
1559: PUSH
1560: EMPTY
1561: ST_TO_ADDR
// for i := 1 to 9 do
1562: LD_ADDR_VAR 0 2
1566: PUSH
1567: DOUBLE
1568: LD_INT 1
1570: DEC
1571: ST_TO_ADDR
1572: LD_INT 9
1574: PUSH
1575: FOR_TO
1576: IFFALSE 1668
// begin PrepareHuman ( false , class_soldier , 0 ) ;
1578: LD_INT 0
1580: PPUSH
1581: LD_INT 1
1583: PPUSH
1584: LD_INT 0
1586: PPUSH
1587: CALL_OW 380
// un := CreateHuman ;
1591: LD_ADDR_VAR 0 3
1595: PUSH
1596: CALL_OW 44
1600: ST_TO_ADDR
// if Prob ( 40 ) then
1601: LD_INT 40
1603: PPUSH
1604: CALL_OW 13
1608: IFFALSE 1622
// SetClass ( un , class_bazooker ) ;
1610: LD_VAR 0 3
1614: PPUSH
1615: LD_INT 9
1617: PPUSH
1618: CALL_OW 336
// SetDir ( un , rand ( 0 , 5 ) ) ;
1622: LD_VAR 0 3
1626: PPUSH
1627: LD_INT 0
1629: PPUSH
1630: LD_INT 5
1632: PPUSH
1633: CALL_OW 12
1637: PPUSH
1638: CALL_OW 233
// PlaceUnitArea ( un , KabulRuDead , false ) ;
1642: LD_VAR 0 3
1646: PPUSH
1647: LD_INT 10
1649: PPUSH
1650: LD_INT 0
1652: PPUSH
1653: CALL_OW 49
// KillUnit ( un ) ;
1657: LD_VAR 0 3
1661: PPUSH
1662: CALL_OW 66
// end ;
1666: GO 1575
1668: POP
1669: POP
// for i := 1 to 9 do
1670: LD_ADDR_VAR 0 2
1674: PUSH
1675: DOUBLE
1676: LD_INT 1
1678: DEC
1679: ST_TO_ADDR
1680: LD_INT 9
1682: PUSH
1683: FOR_TO
1684: IFFALSE 1905
// begin if rand ( 0 , 1 ) then
1686: LD_INT 0
1688: PPUSH
1689: LD_INT 1
1691: PPUSH
1692: CALL_OW 12
1696: IFFALSE 1759
// begin PrepareHuman ( false , class_soldier , 7 ) ;
1698: LD_INT 0
1700: PPUSH
1701: LD_INT 1
1703: PPUSH
1704: LD_INT 7
1706: PPUSH
1707: CALL_OW 380
// un := CreateHuman ;
1711: LD_ADDR_VAR 0 3
1715: PUSH
1716: CALL_OW 44
1720: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1721: LD_VAR 0 3
1725: PPUSH
1726: LD_INT 1
1728: PPUSH
1729: CALL_OW 233
// PlaceUnitArea ( un , kabulRuArea , false ) ;
1733: LD_VAR 0 3
1737: PPUSH
1738: LD_INT 3
1740: PPUSH
1741: LD_INT 0
1743: PPUSH
1744: CALL_OW 49
// ComHold ( un ) ;
1748: LD_VAR 0 3
1752: PPUSH
1753: CALL_OW 140
// end else
1757: GO 1874
// begin vc_chassis := ru_medium_tracked ;
1759: LD_ADDR_OWVAR 37
1763: PUSH
1764: LD_INT 22
1766: ST_TO_ADDR
// vc_engine := engine_combustion ;
1767: LD_ADDR_OWVAR 39
1771: PUSH
1772: LD_INT 1
1774: ST_TO_ADDR
// vc_control := control_manual ;
1775: LD_ADDR_OWVAR 38
1779: PUSH
1780: LD_INT 1
1782: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
1783: LD_ADDR_OWVAR 40
1787: PUSH
1788: LD_INT 44
1790: PUSH
1791: LD_INT 43
1793: PUSH
1794: LD_INT 45
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: LIST
1801: PUSH
1802: LD_INT 1
1804: PPUSH
1805: LD_INT 3
1807: PPUSH
1808: CALL_OW 12
1812: ARRAY
1813: ST_TO_ADDR
// un := CreateVehicle ;
1814: LD_ADDR_VAR 0 3
1818: PUSH
1819: CALL_OW 45
1823: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1824: LD_VAR 0 3
1828: PPUSH
1829: LD_INT 1
1831: PPUSH
1832: CALL_OW 233
// PlaceUnitArea ( un , kabulRuArea , false ) ;
1836: LD_VAR 0 3
1840: PPUSH
1841: LD_INT 3
1843: PPUSH
1844: LD_INT 0
1846: PPUSH
1847: CALL_OW 49
// ComHold ( un ) ;
1851: LD_VAR 0 3
1855: PPUSH
1856: CALL_OW 140
// PlaceHumanInUnit ( CreateHuman , un ) ;
1860: CALL_OW 44
1864: PPUSH
1865: LD_VAR 0 3
1869: PPUSH
1870: CALL_OW 52
// end ; kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
1874: LD_ADDR_EXP 18
1878: PUSH
1879: LD_EXP 18
1883: PPUSH
1884: LD_EXP 18
1888: PUSH
1889: LD_INT 1
1891: PLUS
1892: PPUSH
1893: LD_VAR 0 3
1897: PPUSH
1898: CALL_OW 1
1902: ST_TO_ADDR
// end ;
1903: GO 1683
1905: POP
1906: POP
// for i := 1 to 5 do
1907: LD_ADDR_VAR 0 2
1911: PUSH
1912: DOUBLE
1913: LD_INT 1
1915: DEC
1916: ST_TO_ADDR
1917: LD_INT 5
1919: PUSH
1920: FOR_TO
1921: IFFALSE 2154
// begin if rand ( 0 , 1 ) then
1923: LD_INT 0
1925: PPUSH
1926: LD_INT 1
1928: PPUSH
1929: CALL_OW 12
1933: IFFALSE 2008
// begin PrepareHuman ( false , class_soldier , 7 ) ;
1935: LD_INT 0
1937: PPUSH
1938: LD_INT 1
1940: PPUSH
1941: LD_INT 7
1943: PPUSH
1944: CALL_OW 380
// un := CreateHuman ;
1948: LD_ADDR_VAR 0 3
1952: PUSH
1953: CALL_OW 44
1957: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1958: LD_VAR 0 3
1962: PPUSH
1963: LD_INT 1
1965: PPUSH
1966: CALL_OW 233
// SetClass ( un , class_bazooker ) ;
1970: LD_VAR 0 3
1974: PPUSH
1975: LD_INT 9
1977: PPUSH
1978: CALL_OW 336
// PlaceUnitArea ( un , kabulRu2Area , false ) ;
1982: LD_VAR 0 3
1986: PPUSH
1987: LD_INT 8
1989: PPUSH
1990: LD_INT 0
1992: PPUSH
1993: CALL_OW 49
// ComHold ( un ) ;
1997: LD_VAR 0 3
2001: PPUSH
2002: CALL_OW 140
// end else
2006: GO 2123
// begin vc_chassis := ru_heavy_wheeled ;
2008: LD_ADDR_OWVAR 37
2012: PUSH
2013: LD_INT 23
2015: ST_TO_ADDR
// vc_engine := engine_combustion ;
2016: LD_ADDR_OWVAR 39
2020: PUSH
2021: LD_INT 1
2023: ST_TO_ADDR
// vc_control := control_manual ;
2024: LD_ADDR_OWVAR 38
2028: PUSH
2029: LD_INT 1
2031: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
2032: LD_ADDR_OWVAR 40
2036: PUSH
2037: LD_INT 44
2039: PUSH
2040: LD_INT 43
2042: PUSH
2043: LD_INT 45
2045: PUSH
2046: EMPTY
2047: LIST
2048: LIST
2049: LIST
2050: PUSH
2051: LD_INT 1
2053: PPUSH
2054: LD_INT 3
2056: PPUSH
2057: CALL_OW 12
2061: ARRAY
2062: ST_TO_ADDR
// un := CreateVehicle ;
2063: LD_ADDR_VAR 0 3
2067: PUSH
2068: CALL_OW 45
2072: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2073: LD_VAR 0 3
2077: PPUSH
2078: LD_INT 4
2080: PPUSH
2081: CALL_OW 233
// PlaceUnitArea ( un , kabulRu2Area , false ) ;
2085: LD_VAR 0 3
2089: PPUSH
2090: LD_INT 8
2092: PPUSH
2093: LD_INT 0
2095: PPUSH
2096: CALL_OW 49
// ComHold ( un ) ;
2100: LD_VAR 0 3
2104: PPUSH
2105: CALL_OW 140
// PlaceHumanInUnit ( CreateHuman , un ) ;
2109: CALL_OW 44
2113: PPUSH
2114: LD_VAR 0 3
2118: PPUSH
2119: CALL_OW 52
// end ; kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
2123: LD_ADDR_EXP 18
2127: PUSH
2128: LD_EXP 18
2132: PPUSH
2133: LD_EXP 18
2137: PUSH
2138: LD_INT 1
2140: PLUS
2141: PPUSH
2142: LD_VAR 0 3
2146: PPUSH
2147: CALL_OW 1
2151: ST_TO_ADDR
// end ;
2152: GO 1920
2154: POP
2155: POP
// for i := 1 to 5 do
2156: LD_ADDR_VAR 0 2
2160: PUSH
2161: DOUBLE
2162: LD_INT 1
2164: DEC
2165: ST_TO_ADDR
2166: LD_INT 5
2168: PUSH
2169: FOR_TO
2170: IFFALSE 2274
// begin PrepareHuman ( false , class_soldier , 7 ) ;
2172: LD_INT 0
2174: PPUSH
2175: LD_INT 1
2177: PPUSH
2178: LD_INT 7
2180: PPUSH
2181: CALL_OW 380
// un := CreateHuman ;
2185: LD_ADDR_VAR 0 3
2189: PUSH
2190: CALL_OW 44
2194: ST_TO_ADDR
// SetDir ( un , 0 ) ;
2195: LD_VAR 0 3
2199: PPUSH
2200: LD_INT 0
2202: PPUSH
2203: CALL_OW 233
// SetClass ( un , class_bazooker ) ;
2207: LD_VAR 0 3
2211: PPUSH
2212: LD_INT 9
2214: PPUSH
2215: CALL_OW 336
// PlaceUnitArea ( un , kabulRu3Area , false ) ;
2219: LD_VAR 0 3
2223: PPUSH
2224: LD_INT 9
2226: PPUSH
2227: LD_INT 0
2229: PPUSH
2230: CALL_OW 49
// ComHold ( un ) ;
2234: LD_VAR 0 3
2238: PPUSH
2239: CALL_OW 140
// kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
2243: LD_ADDR_EXP 18
2247: PUSH
2248: LD_EXP 18
2252: PPUSH
2253: LD_EXP 18
2257: PUSH
2258: LD_INT 1
2260: PLUS
2261: PPUSH
2262: LD_VAR 0 3
2266: PPUSH
2267: CALL_OW 1
2271: ST_TO_ADDR
// end ;
2272: GO 2169
2274: POP
2275: POP
// for i := 1 to 12 do
2276: LD_ADDR_VAR 0 2
2280: PUSH
2281: DOUBLE
2282: LD_INT 1
2284: DEC
2285: ST_TO_ADDR
2286: LD_INT 12
2288: PUSH
2289: FOR_TO
2290: IFFALSE 2541
// begin if Prob ( 22 ) then
2292: LD_INT 22
2294: PPUSH
2295: CALL_OW 13
2299: IFFALSE 2362
// begin PrepareHuman ( false , class_soldier , 10 ) ;
2301: LD_INT 0
2303: PPUSH
2304: LD_INT 1
2306: PPUSH
2307: LD_INT 10
2309: PPUSH
2310: CALL_OW 380
// un := CreateHuman ;
2314: LD_ADDR_VAR 0 3
2318: PUSH
2319: CALL_OW 44
2323: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2324: LD_VAR 0 3
2328: PPUSH
2329: LD_INT 3
2331: PPUSH
2332: CALL_OW 233
// PlaceUnitArea ( un , heikeRuArea , false ) ;
2336: LD_VAR 0 3
2340: PPUSH
2341: LD_INT 4
2343: PPUSH
2344: LD_INT 0
2346: PPUSH
2347: CALL_OW 49
// ComHold ( un ) ;
2351: LD_VAR 0 3
2355: PPUSH
2356: CALL_OW 140
// end else
2360: GO 2510
// begin vc_chassis := [ ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] ;
2362: LD_ADDR_OWVAR 37
2366: PUSH
2367: LD_INT 22
2369: PUSH
2370: LD_INT 24
2372: PUSH
2373: EMPTY
2374: LIST
2375: LIST
2376: PUSH
2377: LD_INT 1
2379: PPUSH
2380: LD_INT 2
2382: PPUSH
2383: CALL_OW 12
2387: ARRAY
2388: ST_TO_ADDR
// vc_engine := engine_combustion ;
2389: LD_ADDR_OWVAR 39
2393: PUSH
2394: LD_INT 1
2396: ST_TO_ADDR
// vc_control := control_manual ;
2397: LD_ADDR_OWVAR 38
2401: PUSH
2402: LD_INT 1
2404: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 4 ) ] ;
2405: LD_ADDR_OWVAR 40
2409: PUSH
2410: LD_INT 44
2412: PUSH
2413: LD_INT 43
2415: PUSH
2416: LD_INT 43
2418: PUSH
2419: LD_INT 45
2421: PUSH
2422: EMPTY
2423: LIST
2424: LIST
2425: LIST
2426: LIST
2427: PUSH
2428: LD_INT 1
2430: PPUSH
2431: LD_INT 4
2433: PPUSH
2434: CALL_OW 12
2438: ARRAY
2439: ST_TO_ADDR
// un := CreateVehicle ;
2440: LD_ADDR_VAR 0 3
2444: PUSH
2445: CALL_OW 45
2449: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2450: LD_VAR 0 3
2454: PPUSH
2455: LD_INT 3
2457: PPUSH
2458: CALL_OW 233
// PlaceUnitArea ( un , heikeRuArea , false ) ;
2462: LD_VAR 0 3
2466: PPUSH
2467: LD_INT 4
2469: PPUSH
2470: LD_INT 0
2472: PPUSH
2473: CALL_OW 49
// ComHold ( un ) ;
2477: LD_VAR 0 3
2481: PPUSH
2482: CALL_OW 140
// PrepareMechanic ( false , 10 ) ;
2486: LD_INT 0
2488: PPUSH
2489: LD_INT 10
2491: PPUSH
2492: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
2496: CALL_OW 44
2500: PPUSH
2501: LD_VAR 0 3
2505: PPUSH
2506: CALL_OW 52
// end ; heikeAttackers := Replace ( heikeAttackers , heikeAttackers + 1 , un ) ;
2510: LD_ADDR_EXP 19
2514: PUSH
2515: LD_EXP 19
2519: PPUSH
2520: LD_EXP 19
2524: PUSH
2525: LD_INT 1
2527: PLUS
2528: PPUSH
2529: LD_VAR 0 3
2533: PPUSH
2534: CALL_OW 1
2538: ST_TO_ADDR
// end ;
2539: GO 2289
2541: POP
2542: POP
// end ;
2543: LD_VAR 0 1
2547: RET
// every 0 0$2 trigger startAttackOnKabul and kabulAttackers do var i ;
2548: LD_EXP 3
2552: PUSH
2553: LD_EXP 18
2557: AND
2558: IFFALSE 2618
2560: GO 2562
2562: DISABLE
2563: LD_INT 0
2565: PPUSH
// begin enable ;
2566: ENABLE
// for i in kabulAttackers do
2567: LD_ADDR_VAR 0 1
2571: PUSH
2572: LD_EXP 18
2576: PUSH
2577: FOR_IN
2578: IFFALSE 2616
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 5 ] ) , i ) ) ;
2580: LD_VAR 0 1
2584: PPUSH
2585: LD_INT 22
2587: PUSH
2588: LD_INT 5
2590: PUSH
2591: EMPTY
2592: LIST
2593: LIST
2594: PPUSH
2595: CALL_OW 69
2599: PPUSH
2600: LD_VAR 0 1
2604: PPUSH
2605: CALL_OW 74
2609: PPUSH
2610: CALL_OW 115
2614: GO 2577
2616: POP
2617: POP
// end ;
2618: PPOPN 1
2620: END
// every 0 0$1 trigger startAttackOnHeike and heikeAttackers do var i ;
2621: LD_EXP 4
2625: PUSH
2626: LD_EXP 19
2630: AND
2631: IFFALSE 2691
2633: GO 2635
2635: DISABLE
2636: LD_INT 0
2638: PPUSH
// begin enable ;
2639: ENABLE
// for i in heikeAttackers do
2640: LD_ADDR_VAR 0 1
2644: PUSH
2645: LD_EXP 19
2649: PUSH
2650: FOR_IN
2651: IFFALSE 2689
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ) ;
2653: LD_VAR 0 1
2657: PPUSH
2658: LD_INT 22
2660: PUSH
2661: LD_INT 2
2663: PUSH
2664: EMPTY
2665: LIST
2666: LIST
2667: PPUSH
2668: CALL_OW 69
2672: PPUSH
2673: LD_VAR 0 1
2677: PPUSH
2678: CALL_OW 74
2682: PPUSH
2683: CALL_OW 115
2687: GO 2650
2689: POP
2690: POP
// end ; end_of_file
2691: PPOPN 1
2693: END
// export function Action ; var i ; begin
2694: LD_INT 0
2696: PPUSH
2697: PPUSH
// Video ( true ) ;
2698: LD_INT 1
2700: PPUSH
2701: CALL 40914 0 1
// PlaceSeeing ( 111 , 168 , 2 , - 25 ) ;
2705: LD_INT 111
2707: PPUSH
2708: LD_INT 168
2710: PPUSH
2711: LD_INT 2
2713: PPUSH
2714: LD_INT 25
2716: NEG
2717: PPUSH
2718: CALL_OW 330
// PlaceSeeing ( 102 , 47 , 2 , - 40 ) ;
2722: LD_INT 102
2724: PPUSH
2725: LD_INT 47
2727: PPUSH
2728: LD_INT 2
2730: PPUSH
2731: LD_INT 40
2733: NEG
2734: PPUSH
2735: CALL_OW 330
// CenterNowOnUnits ( Heike ) ;
2739: LD_EXP 5
2743: PPUSH
2744: CALL_OW 87
// startAttackOnKabul := true ;
2748: LD_ADDR_EXP 3
2752: PUSH
2753: LD_INT 1
2755: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2756: LD_INT 70
2758: PPUSH
2759: CALL_OW 67
// CenterOnXY ( 102 , 47 ) ;
2763: LD_INT 102
2765: PPUSH
2766: LD_INT 47
2768: PPUSH
2769: CALL_OW 84
// if Givi then
2773: LD_EXP 6
2777: IFFALSE 2968
// begin ComMoveXY ( Givi , 113 , 162 ) ;
2779: LD_EXP 6
2783: PPUSH
2784: LD_INT 113
2786: PPUSH
2787: LD_INT 162
2789: PPUSH
2790: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
2794: LD_EXP 6
2798: PPUSH
2799: LD_EXP 5
2803: PPUSH
2804: CALL_OW 179
// Say ( Givi , DG-Intro-1 ) ;
2808: LD_EXP 6
2812: PPUSH
2813: LD_STRING DG-Intro-1
2815: PPUSH
2816: CALL_OW 88
// Say ( Givi , DG-Intro-2 ) ;
2820: LD_EXP 6
2824: PPUSH
2825: LD_STRING DG-Intro-2
2827: PPUSH
2828: CALL_OW 88
// CenterOnUnits ( Heike ) ;
2832: LD_EXP 5
2836: PPUSH
2837: CALL_OW 85
// RemoveSeeing ( 102 , 47 , 2 ) ;
2841: LD_INT 102
2843: PPUSH
2844: LD_INT 47
2846: PPUSH
2847: LD_INT 2
2849: PPUSH
2850: CALL_OW 331
// wait ( 0 0$0.3 ) ;
2854: LD_INT 10
2856: PPUSH
2857: CALL_OW 67
// Say ( Heike , DH-Intro-3 ) ;
2861: LD_EXP 5
2865: PPUSH
2866: LD_STRING DH-Intro-3
2868: PPUSH
2869: CALL_OW 88
// if Mike then
2873: LD_EXP 7
2877: IFFALSE 2966
// begin PlaceSeeing ( 92 , 129 , 2 , - 18 ) ;
2879: LD_INT 92
2881: PPUSH
2882: LD_INT 129
2884: PPUSH
2885: LD_INT 2
2887: PPUSH
2888: LD_INT 18
2890: NEG
2891: PPUSH
2892: CALL_OW 330
// CenterOnXY ( 92 , 129 ) ;
2896: LD_INT 92
2898: PPUSH
2899: LD_INT 129
2901: PPUSH
2902: CALL_OW 84
// ComTurnUnit ( [ Mike , Kaia ] , Heike ) ;
2906: LD_EXP 7
2910: PUSH
2911: LD_EXP 10
2915: PUSH
2916: EMPTY
2917: LIST
2918: LIST
2919: PPUSH
2920: LD_EXP 5
2924: PPUSH
2925: CALL_OW 119
// Say ( Mike , DM-Intro-4 ) ;
2929: LD_EXP 7
2933: PPUSH
2934: LD_STRING DM-Intro-4
2936: PPUSH
2937: CALL_OW 88
// Say ( Kaia , DK-Intro-5 ) ;
2941: LD_EXP 10
2945: PPUSH
2946: LD_STRING DK-Intro-5
2948: PPUSH
2949: CALL_OW 88
// RemoveSeeing ( 92 , 129 , 2 ) ;
2953: LD_INT 92
2955: PPUSH
2956: LD_INT 129
2958: PPUSH
2959: LD_INT 2
2961: PPUSH
2962: CALL_OW 331
// end ; end else
2966: GO 3221
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-1 ) then
2968: LD_EXP 16
2972: PPUSH
2973: LD_INT 26
2975: PUSH
2976: LD_INT 1
2978: PUSH
2979: EMPTY
2980: LIST
2981: LIST
2982: PPUSH
2983: CALL_OW 72
2987: PUSH
2988: LD_INT 1
2990: ARRAY
2991: PPUSH
2992: LD_STRING DArm-Intro-b-1
2994: PPUSH
2995: CALL_OW 88
2999: NOT
3000: IFFALSE 3033
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-1 ) ;
3002: LD_EXP 16
3006: PPUSH
3007: LD_INT 26
3009: PUSH
3010: LD_INT 2
3012: PUSH
3013: EMPTY
3014: LIST
3015: LIST
3016: PPUSH
3017: CALL_OW 72
3021: PUSH
3022: LD_INT 1
3024: ARRAY
3025: PPUSH
3026: LD_STRING DArf-Intro-b-1
3028: PPUSH
3029: CALL_OW 88
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-2 ) then
3033: LD_EXP 16
3037: PPUSH
3038: LD_INT 26
3040: PUSH
3041: LD_INT 1
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PPUSH
3048: CALL_OW 72
3052: PUSH
3053: LD_INT 1
3055: ARRAY
3056: PPUSH
3057: LD_STRING DArm-Intro-b-2
3059: PPUSH
3060: CALL_OW 88
3064: NOT
3065: IFFALSE 3098
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-2 ) ;
3067: LD_EXP 16
3071: PPUSH
3072: LD_INT 26
3074: PUSH
3075: LD_INT 2
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: PPUSH
3082: CALL_OW 72
3086: PUSH
3087: LD_INT 1
3089: ARRAY
3090: PPUSH
3091: LD_STRING DArf-Intro-b-2
3093: PPUSH
3094: CALL_OW 88
// if Kaia then
3098: LD_EXP 10
3102: IFFALSE 3116
// Say ( Kaia , DK-Intro-5 ) ;
3104: LD_EXP 10
3108: PPUSH
3109: LD_STRING DK-Intro-5
3111: PPUSH
3112: CALL_OW 88
// PlaceSeeing ( 92 , 129 , 2 , - 18 ) ;
3116: LD_INT 92
3118: PPUSH
3119: LD_INT 129
3121: PPUSH
3122: LD_INT 2
3124: PPUSH
3125: LD_INT 18
3127: NEG
3128: PPUSH
3129: CALL_OW 330
// CenterOnXY ( 92 , 129 ) ;
3133: LD_INT 92
3135: PPUSH
3136: LD_INT 129
3138: PPUSH
3139: CALL_OW 84
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-4 ) then
3143: LD_EXP 16
3147: PPUSH
3148: LD_INT 26
3150: PUSH
3151: LD_INT 1
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: PPUSH
3158: CALL_OW 72
3162: PUSH
3163: LD_INT 1
3165: ARRAY
3166: PPUSH
3167: LD_STRING DArm-Intro-b-4
3169: PPUSH
3170: CALL_OW 88
3174: NOT
3175: IFFALSE 3208
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-4 ) ;
3177: LD_EXP 16
3181: PPUSH
3182: LD_INT 26
3184: PUSH
3185: LD_INT 2
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PPUSH
3192: CALL_OW 72
3196: PUSH
3197: LD_INT 1
3199: ARRAY
3200: PPUSH
3201: LD_STRING DArf-Intro-b-4
3203: PPUSH
3204: CALL_OW 88
// RemoveSeeing ( 92 , 129 , 2 ) ;
3208: LD_INT 92
3210: PPUSH
3211: LD_INT 129
3213: PPUSH
3214: LD_INT 2
3216: PPUSH
3217: CALL_OW 331
// end ; CenterOnUnits ( Heike ) ;
3221: LD_EXP 5
3225: PPUSH
3226: CALL_OW 85
// SayRadio ( Burlak , DB-Intro-6 ) ;
3230: LD_EXP 20
3234: PPUSH
3235: LD_STRING DB-Intro-6
3237: PPUSH
3238: CALL_OW 94
// Say ( Heike , DH-Intro-7 ) ;
3242: LD_EXP 5
3246: PPUSH
3247: LD_STRING DH-Intro-7
3249: PPUSH
3250: CALL_OW 88
// SayRadio ( Burlak , DB-Intro-8 ) ;
3254: LD_EXP 20
3258: PPUSH
3259: LD_STRING DB-Intro-8
3261: PPUSH
3262: CALL_OW 94
// SayRadio ( Burlak , DB-Intro-9 ) ;
3266: LD_EXP 20
3270: PPUSH
3271: LD_STRING DB-Intro-9
3273: PPUSH
3274: CALL_OW 94
// if Givi then
3278: LD_EXP 6
3282: IFFALSE 3310
// begin Say ( Givi , DG-Intro-10 ) ;
3284: LD_EXP 6
3288: PPUSH
3289: LD_STRING DG-Intro-10
3291: PPUSH
3292: CALL_OW 88
// Say ( Kaia , DK-Intro-11 ) ;
3296: LD_EXP 10
3300: PPUSH
3301: LD_STRING DK-Intro-11
3303: PPUSH
3304: CALL_OW 88
// end else
3308: GO 3375
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-10 ) then
3310: LD_EXP 16
3314: PPUSH
3315: LD_INT 26
3317: PUSH
3318: LD_INT 1
3320: PUSH
3321: EMPTY
3322: LIST
3323: LIST
3324: PPUSH
3325: CALL_OW 72
3329: PUSH
3330: LD_INT 1
3332: ARRAY
3333: PPUSH
3334: LD_STRING DArm-Intro-b-10
3336: PPUSH
3337: CALL_OW 88
3341: NOT
3342: IFFALSE 3375
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-10 ) ;
3344: LD_EXP 16
3348: PPUSH
3349: LD_INT 26
3351: PUSH
3352: LD_INT 2
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PPUSH
3359: CALL_OW 72
3363: PUSH
3364: LD_INT 1
3366: ARRAY
3367: PPUSH
3368: LD_STRING DArf-Intro-b-10
3370: PPUSH
3371: CALL_OW 88
// Say ( Mike , DM-Intro-12 ) ;
3375: LD_EXP 7
3379: PPUSH
3380: LD_STRING DM-Intro-12
3382: PPUSH
3383: CALL_OW 88
// Say ( Kurt , DKs-Intro-13 ) ;
3387: LD_EXP 14
3391: PPUSH
3392: LD_STRING DKs-Intro-13
3394: PPUSH
3395: CALL_OW 88
// Say ( Kamil , DKam-Intro-14 ) ;
3399: LD_EXP 9
3403: PPUSH
3404: LD_STRING DKam-Intro-14
3406: PPUSH
3407: CALL_OW 88
// case Query ( QSurrender ) of 1 :
3411: LD_STRING QSurrender
3413: PPUSH
3414: CALL_OW 97
3418: PUSH
3419: LD_INT 1
3421: DOUBLE
3422: EQUAL
3423: IFTRUE 3427
3425: GO 3446
3427: POP
// begin Say ( Heike , DH-Intro-16 ) ;
3428: LD_EXP 5
3432: PPUSH
3433: LD_STRING DH-Intro-16
3435: PPUSH
3436: CALL_OW 88
// missionEnd ;
3440: CALL 3632 0 0
// end ; 2 :
3444: GO 3490
3446: LD_INT 2
3448: DOUBLE
3449: EQUAL
3450: IFTRUE 3454
3452: GO 3489
3454: POP
// begin Say ( Heike , DH-Intro-a-16 ) ;
3455: LD_EXP 5
3459: PPUSH
3460: LD_STRING DH-Intro-a-16
3462: PPUSH
3463: CALL_OW 88
// SayRadio ( Burlak , DB-Intro-a-17 ) ;
3467: LD_EXP 20
3471: PPUSH
3472: LD_STRING DB-Intro-a-17
3474: PPUSH
3475: CALL_OW 94
// startAttackOnHeike := true ;
3479: LD_ADDR_EXP 4
3483: PUSH
3484: LD_INT 1
3486: ST_TO_ADDR
// end ; end ;
3487: GO 3490
3489: POP
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
3490: LD_ADDR_VAR 0 2
3494: PUSH
3495: LD_INT 22
3497: PUSH
3498: LD_INT 2
3500: PUSH
3501: EMPTY
3502: LIST
3503: LIST
3504: PPUSH
3505: CALL_OW 69
3509: PUSH
3510: FOR_IN
3511: IFFALSE 3530
// ComAgressiveMove ( i , 98 , 143 ) ;
3513: LD_VAR 0 2
3517: PPUSH
3518: LD_INT 98
3520: PPUSH
3521: LD_INT 143
3523: PPUSH
3524: CALL_OW 114
3528: GO 3510
3530: POP
3531: POP
// ComAgressiveMove ( Heike , 84 , 116 ) ;
3532: LD_EXP 5
3536: PPUSH
3537: LD_INT 84
3539: PPUSH
3540: LD_INT 116
3542: PPUSH
3543: CALL_OW 114
// CenterOnXY ( 98 , 143 ) ;
3547: LD_INT 98
3549: PPUSH
3550: LD_INT 143
3552: PPUSH
3553: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
3557: LD_INT 35
3559: PPUSH
3560: CALL_OW 67
// until IsDead ( Heike ) ;
3564: LD_EXP 5
3568: PPUSH
3569: CALL_OW 301
3573: IFFALSE 3557
// wait ( 0 0$3 ) ;
3575: LD_INT 105
3577: PPUSH
3578: CALL_OW 67
// YouLost ( HeikeNoSurrender ) ;
3582: LD_STRING HeikeNoSurrender
3584: PPUSH
3585: CALL_OW 104
// end ;
3589: LD_VAR 0 1
3593: RET
// every 0 0$1 trigger GetLives ( Heike ) < 900 do
3594: LD_EXP 5
3598: PPUSH
3599: CALL_OW 256
3603: PUSH
3604: LD_INT 900
3606: LESS
3607: IFFALSE 3631
3609: GO 3611
3611: DISABLE
// begin wait ( 0 0$3 ) ;
3612: LD_INT 105
3614: PPUSH
3615: CALL_OW 67
// SetLives ( Heike , 100 ) ;
3619: LD_EXP 5
3623: PPUSH
3624: LD_INT 100
3626: PPUSH
3627: CALL_OW 234
// end ;
3631: END
// function MissionEnd ( ) ; begin
3632: LD_INT 0
3634: PPUSH
// ChangeMap ( 1 , %_cont ) ;
3635: LD_INT 1
3637: PPUSH
3638: LD_STRING %_cont
3640: PPUSH
3641: CALL_OW 340
// end ; end_of_file
3645: LD_VAR 0 1
3649: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
3650: LD_INT 0
3652: PPUSH
3653: PPUSH
// if exist_mode then
3654: LD_VAR 0 2
3658: IFFALSE 3683
// unit := CreateCharacter ( prefix & ident ) else
3660: LD_ADDR_VAR 0 5
3664: PUSH
3665: LD_VAR 0 3
3669: PUSH
3670: LD_VAR 0 1
3674: STR
3675: PPUSH
3676: CALL_OW 34
3680: ST_TO_ADDR
3681: GO 3698
// unit := NewCharacter ( ident ) ;
3683: LD_ADDR_VAR 0 5
3687: PUSH
3688: LD_VAR 0 1
3692: PPUSH
3693: CALL_OW 25
3697: ST_TO_ADDR
// result := unit ;
3698: LD_ADDR_VAR 0 4
3702: PUSH
3703: LD_VAR 0 5
3707: ST_TO_ADDR
// end ;
3708: LD_VAR 0 4
3712: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3713: LD_INT 0
3715: PPUSH
3716: PPUSH
// if not side or not nation then
3717: LD_VAR 0 1
3721: NOT
3722: PUSH
3723: LD_VAR 0 2
3727: NOT
3728: OR
3729: IFFALSE 3733
// exit ;
3731: GO 4501
// case nation of nation_american :
3733: LD_VAR 0 2
3737: PUSH
3738: LD_INT 1
3740: DOUBLE
3741: EQUAL
3742: IFTRUE 3746
3744: GO 3960
3746: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
3747: LD_ADDR_VAR 0 4
3751: PUSH
3752: LD_INT 35
3754: PUSH
3755: LD_INT 45
3757: PUSH
3758: LD_INT 46
3760: PUSH
3761: LD_INT 47
3763: PUSH
3764: LD_INT 82
3766: PUSH
3767: LD_INT 83
3769: PUSH
3770: LD_INT 84
3772: PUSH
3773: LD_INT 85
3775: PUSH
3776: LD_INT 86
3778: PUSH
3779: LD_INT 1
3781: PUSH
3782: LD_INT 2
3784: PUSH
3785: LD_INT 6
3787: PUSH
3788: LD_INT 15
3790: PUSH
3791: LD_INT 16
3793: PUSH
3794: LD_INT 7
3796: PUSH
3797: LD_INT 12
3799: PUSH
3800: LD_INT 13
3802: PUSH
3803: LD_INT 10
3805: PUSH
3806: LD_INT 14
3808: PUSH
3809: LD_INT 20
3811: PUSH
3812: LD_INT 21
3814: PUSH
3815: LD_INT 22
3817: PUSH
3818: LD_INT 25
3820: PUSH
3821: LD_INT 32
3823: PUSH
3824: LD_INT 27
3826: PUSH
3827: LD_INT 36
3829: PUSH
3830: LD_INT 69
3832: PUSH
3833: LD_INT 39
3835: PUSH
3836: LD_INT 34
3838: PUSH
3839: LD_INT 40
3841: PUSH
3842: LD_INT 48
3844: PUSH
3845: LD_INT 49
3847: PUSH
3848: LD_INT 50
3850: PUSH
3851: LD_INT 51
3853: PUSH
3854: LD_INT 52
3856: PUSH
3857: LD_INT 53
3859: PUSH
3860: LD_INT 54
3862: PUSH
3863: LD_INT 55
3865: PUSH
3866: LD_INT 56
3868: PUSH
3869: LD_INT 57
3871: PUSH
3872: LD_INT 58
3874: PUSH
3875: LD_INT 59
3877: PUSH
3878: LD_INT 60
3880: PUSH
3881: LD_INT 61
3883: PUSH
3884: LD_INT 62
3886: PUSH
3887: LD_INT 80
3889: PUSH
3890: LD_INT 82
3892: PUSH
3893: LD_INT 83
3895: PUSH
3896: LD_INT 84
3898: PUSH
3899: LD_INT 85
3901: PUSH
3902: LD_INT 86
3904: PUSH
3905: EMPTY
3906: LIST
3907: LIST
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: LIST
3916: LIST
3917: LIST
3918: LIST
3919: LIST
3920: LIST
3921: LIST
3922: LIST
3923: LIST
3924: LIST
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: LIST
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: LIST
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: LIST
3951: LIST
3952: LIST
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: ST_TO_ADDR
3958: GO 4425
3960: LD_INT 2
3962: DOUBLE
3963: EQUAL
3964: IFTRUE 3968
3966: GO 4194
3968: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3969: LD_ADDR_VAR 0 4
3973: PUSH
3974: LD_INT 35
3976: PUSH
3977: LD_INT 45
3979: PUSH
3980: LD_INT 46
3982: PUSH
3983: LD_INT 47
3985: PUSH
3986: LD_INT 82
3988: PUSH
3989: LD_INT 83
3991: PUSH
3992: LD_INT 84
3994: PUSH
3995: LD_INT 85
3997: PUSH
3998: LD_INT 87
4000: PUSH
4001: LD_INT 70
4003: PUSH
4004: LD_INT 1
4006: PUSH
4007: LD_INT 11
4009: PUSH
4010: LD_INT 3
4012: PUSH
4013: LD_INT 4
4015: PUSH
4016: LD_INT 5
4018: PUSH
4019: LD_INT 6
4021: PUSH
4022: LD_INT 15
4024: PUSH
4025: LD_INT 18
4027: PUSH
4028: LD_INT 7
4030: PUSH
4031: LD_INT 17
4033: PUSH
4034: LD_INT 8
4036: PUSH
4037: LD_INT 20
4039: PUSH
4040: LD_INT 21
4042: PUSH
4043: LD_INT 22
4045: PUSH
4046: LD_INT 72
4048: PUSH
4049: LD_INT 26
4051: PUSH
4052: LD_INT 69
4054: PUSH
4055: LD_INT 39
4057: PUSH
4058: LD_INT 40
4060: PUSH
4061: LD_INT 41
4063: PUSH
4064: LD_INT 42
4066: PUSH
4067: LD_INT 43
4069: PUSH
4070: LD_INT 48
4072: PUSH
4073: LD_INT 49
4075: PUSH
4076: LD_INT 50
4078: PUSH
4079: LD_INT 51
4081: PUSH
4082: LD_INT 52
4084: PUSH
4085: LD_INT 53
4087: PUSH
4088: LD_INT 54
4090: PUSH
4091: LD_INT 55
4093: PUSH
4094: LD_INT 56
4096: PUSH
4097: LD_INT 60
4099: PUSH
4100: LD_INT 61
4102: PUSH
4103: LD_INT 62
4105: PUSH
4106: LD_INT 66
4108: PUSH
4109: LD_INT 67
4111: PUSH
4112: LD_INT 68
4114: PUSH
4115: LD_INT 81
4117: PUSH
4118: LD_INT 82
4120: PUSH
4121: LD_INT 83
4123: PUSH
4124: LD_INT 84
4126: PUSH
4127: LD_INT 85
4129: PUSH
4130: LD_INT 87
4132: PUSH
4133: LD_INT 88
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: LIST
4140: LIST
4141: LIST
4142: LIST
4143: LIST
4144: LIST
4145: LIST
4146: LIST
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: LIST
4152: LIST
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: LIST
4170: LIST
4171: LIST
4172: LIST
4173: LIST
4174: LIST
4175: LIST
4176: LIST
4177: LIST
4178: LIST
4179: LIST
4180: LIST
4181: LIST
4182: LIST
4183: LIST
4184: LIST
4185: LIST
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: LIST
4191: ST_TO_ADDR
4192: GO 4425
4194: LD_INT 3
4196: DOUBLE
4197: EQUAL
4198: IFTRUE 4202
4200: GO 4424
4202: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
4203: LD_ADDR_VAR 0 4
4207: PUSH
4208: LD_INT 46
4210: PUSH
4211: LD_INT 47
4213: PUSH
4214: LD_INT 1
4216: PUSH
4217: LD_INT 2
4219: PUSH
4220: LD_INT 82
4222: PUSH
4223: LD_INT 83
4225: PUSH
4226: LD_INT 84
4228: PUSH
4229: LD_INT 85
4231: PUSH
4232: LD_INT 86
4234: PUSH
4235: LD_INT 11
4237: PUSH
4238: LD_INT 9
4240: PUSH
4241: LD_INT 20
4243: PUSH
4244: LD_INT 19
4246: PUSH
4247: LD_INT 21
4249: PUSH
4250: LD_INT 24
4252: PUSH
4253: LD_INT 22
4255: PUSH
4256: LD_INT 25
4258: PUSH
4259: LD_INT 28
4261: PUSH
4262: LD_INT 29
4264: PUSH
4265: LD_INT 30
4267: PUSH
4268: LD_INT 31
4270: PUSH
4271: LD_INT 37
4273: PUSH
4274: LD_INT 38
4276: PUSH
4277: LD_INT 32
4279: PUSH
4280: LD_INT 27
4282: PUSH
4283: LD_INT 33
4285: PUSH
4286: LD_INT 69
4288: PUSH
4289: LD_INT 39
4291: PUSH
4292: LD_INT 34
4294: PUSH
4295: LD_INT 40
4297: PUSH
4298: LD_INT 71
4300: PUSH
4301: LD_INT 23
4303: PUSH
4304: LD_INT 44
4306: PUSH
4307: LD_INT 48
4309: PUSH
4310: LD_INT 49
4312: PUSH
4313: LD_INT 50
4315: PUSH
4316: LD_INT 51
4318: PUSH
4319: LD_INT 52
4321: PUSH
4322: LD_INT 53
4324: PUSH
4325: LD_INT 54
4327: PUSH
4328: LD_INT 55
4330: PUSH
4331: LD_INT 56
4333: PUSH
4334: LD_INT 57
4336: PUSH
4337: LD_INT 58
4339: PUSH
4340: LD_INT 59
4342: PUSH
4343: LD_INT 63
4345: PUSH
4346: LD_INT 64
4348: PUSH
4349: LD_INT 65
4351: PUSH
4352: LD_INT 82
4354: PUSH
4355: LD_INT 83
4357: PUSH
4358: LD_INT 84
4360: PUSH
4361: LD_INT 85
4363: PUSH
4364: LD_INT 86
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: LIST
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: LIST
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: LIST
4388: LIST
4389: LIST
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: LIST
4400: LIST
4401: LIST
4402: LIST
4403: LIST
4404: LIST
4405: LIST
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: LIST
4421: ST_TO_ADDR
4422: GO 4425
4424: POP
// if state > - 1 and state < 3 then
4425: LD_VAR 0 3
4429: PUSH
4430: LD_INT 1
4432: NEG
4433: GREATER
4434: PUSH
4435: LD_VAR 0 3
4439: PUSH
4440: LD_INT 3
4442: LESS
4443: AND
4444: IFFALSE 4501
// for i in result do
4446: LD_ADDR_VAR 0 5
4450: PUSH
4451: LD_VAR 0 4
4455: PUSH
4456: FOR_IN
4457: IFFALSE 4499
// if GetTech ( i , side ) <> state then
4459: LD_VAR 0 5
4463: PPUSH
4464: LD_VAR 0 1
4468: PPUSH
4469: CALL_OW 321
4473: PUSH
4474: LD_VAR 0 3
4478: NONEQUAL
4479: IFFALSE 4497
// result := result diff i ;
4481: LD_ADDR_VAR 0 4
4485: PUSH
4486: LD_VAR 0 4
4490: PUSH
4491: LD_VAR 0 5
4495: DIFF
4496: ST_TO_ADDR
4497: GO 4456
4499: POP
4500: POP
// end ;
4501: LD_VAR 0 4
4505: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
4506: LD_INT 0
4508: PPUSH
4509: PPUSH
4510: PPUSH
// result := true ;
4511: LD_ADDR_VAR 0 3
4515: PUSH
4516: LD_INT 1
4518: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
4519: LD_ADDR_VAR 0 5
4523: PUSH
4524: LD_VAR 0 2
4528: PPUSH
4529: CALL_OW 480
4533: ST_TO_ADDR
// if not tmp then
4534: LD_VAR 0 5
4538: NOT
4539: IFFALSE 4543
// exit ;
4541: GO 4592
// for i in tmp do
4543: LD_ADDR_VAR 0 4
4547: PUSH
4548: LD_VAR 0 5
4552: PUSH
4553: FOR_IN
4554: IFFALSE 4590
// if GetTech ( i , side ) <> state_researched then
4556: LD_VAR 0 4
4560: PPUSH
4561: LD_VAR 0 1
4565: PPUSH
4566: CALL_OW 321
4570: PUSH
4571: LD_INT 2
4573: NONEQUAL
4574: IFFALSE 4588
// begin result := false ;
4576: LD_ADDR_VAR 0 3
4580: PUSH
4581: LD_INT 0
4583: ST_TO_ADDR
// exit ;
4584: POP
4585: POP
4586: GO 4592
// end ;
4588: GO 4553
4590: POP
4591: POP
// end ;
4592: LD_VAR 0 3
4596: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
4597: LD_INT 0
4599: PPUSH
4600: PPUSH
4601: PPUSH
4602: PPUSH
4603: PPUSH
4604: PPUSH
4605: PPUSH
4606: PPUSH
4607: PPUSH
4608: PPUSH
4609: PPUSH
4610: PPUSH
4611: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
4612: LD_VAR 0 1
4616: NOT
4617: PUSH
4618: LD_VAR 0 1
4622: PPUSH
4623: CALL_OW 257
4627: PUSH
4628: LD_INT 9
4630: NONEQUAL
4631: OR
4632: IFFALSE 4636
// exit ;
4634: GO 5209
// side := GetSide ( unit ) ;
4636: LD_ADDR_VAR 0 9
4640: PUSH
4641: LD_VAR 0 1
4645: PPUSH
4646: CALL_OW 255
4650: ST_TO_ADDR
// tech_space := tech_spacanom ;
4651: LD_ADDR_VAR 0 12
4655: PUSH
4656: LD_INT 29
4658: ST_TO_ADDR
// tech_time := tech_taurad ;
4659: LD_ADDR_VAR 0 13
4663: PUSH
4664: LD_INT 28
4666: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4667: LD_ADDR_VAR 0 11
4671: PUSH
4672: LD_VAR 0 1
4676: PPUSH
4677: CALL_OW 310
4681: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4682: LD_VAR 0 11
4686: PPUSH
4687: CALL_OW 247
4691: PUSH
4692: LD_INT 2
4694: EQUAL
4695: IFFALSE 4699
// exit ;
4697: GO 5209
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4699: LD_ADDR_VAR 0 8
4703: PUSH
4704: LD_INT 81
4706: PUSH
4707: LD_VAR 0 9
4711: PUSH
4712: EMPTY
4713: LIST
4714: LIST
4715: PUSH
4716: LD_INT 3
4718: PUSH
4719: LD_INT 21
4721: PUSH
4722: LD_INT 3
4724: PUSH
4725: EMPTY
4726: LIST
4727: LIST
4728: PUSH
4729: EMPTY
4730: LIST
4731: LIST
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: PPUSH
4737: CALL_OW 69
4741: ST_TO_ADDR
// if not tmp then
4742: LD_VAR 0 8
4746: NOT
4747: IFFALSE 4751
// exit ;
4749: GO 5209
// if in_unit then
4751: LD_VAR 0 11
4755: IFFALSE 4779
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4757: LD_ADDR_VAR 0 10
4761: PUSH
4762: LD_VAR 0 8
4766: PPUSH
4767: LD_VAR 0 11
4771: PPUSH
4772: CALL_OW 74
4776: ST_TO_ADDR
4777: GO 4799
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4779: LD_ADDR_VAR 0 10
4783: PUSH
4784: LD_VAR 0 8
4788: PPUSH
4789: LD_VAR 0 1
4793: PPUSH
4794: CALL_OW 74
4798: ST_TO_ADDR
// if not enemy then
4799: LD_VAR 0 10
4803: NOT
4804: IFFALSE 4808
// exit ;
4806: GO 5209
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4808: LD_VAR 0 11
4812: PUSH
4813: LD_VAR 0 11
4817: PPUSH
4818: LD_VAR 0 10
4822: PPUSH
4823: CALL_OW 296
4827: PUSH
4828: LD_INT 13
4830: GREATER
4831: AND
4832: PUSH
4833: LD_VAR 0 1
4837: PPUSH
4838: LD_VAR 0 10
4842: PPUSH
4843: CALL_OW 296
4847: PUSH
4848: LD_INT 12
4850: GREATER
4851: OR
4852: IFFALSE 4856
// exit ;
4854: GO 5209
// missile := [ 1 ] ;
4856: LD_ADDR_VAR 0 14
4860: PUSH
4861: LD_INT 1
4863: PUSH
4864: EMPTY
4865: LIST
4866: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4867: LD_VAR 0 9
4871: PPUSH
4872: LD_VAR 0 12
4876: PPUSH
4877: CALL_OW 325
4881: IFFALSE 4910
// missile := Replace ( missile , missile + 1 , 2 ) ;
4883: LD_ADDR_VAR 0 14
4887: PUSH
4888: LD_VAR 0 14
4892: PPUSH
4893: LD_VAR 0 14
4897: PUSH
4898: LD_INT 1
4900: PLUS
4901: PPUSH
4902: LD_INT 2
4904: PPUSH
4905: CALL_OW 1
4909: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4910: LD_VAR 0 9
4914: PPUSH
4915: LD_VAR 0 13
4919: PPUSH
4920: CALL_OW 325
4924: PUSH
4925: LD_VAR 0 10
4929: PPUSH
4930: CALL_OW 255
4934: PPUSH
4935: LD_VAR 0 13
4939: PPUSH
4940: CALL_OW 325
4944: NOT
4945: AND
4946: IFFALSE 4975
// missile := Replace ( missile , missile + 1 , 3 ) ;
4948: LD_ADDR_VAR 0 14
4952: PUSH
4953: LD_VAR 0 14
4957: PPUSH
4958: LD_VAR 0 14
4962: PUSH
4963: LD_INT 1
4965: PLUS
4966: PPUSH
4967: LD_INT 3
4969: PPUSH
4970: CALL_OW 1
4974: ST_TO_ADDR
// if missile < 2 then
4975: LD_VAR 0 14
4979: PUSH
4980: LD_INT 2
4982: LESS
4983: IFFALSE 4987
// exit ;
4985: GO 5209
// x := GetX ( enemy ) ;
4987: LD_ADDR_VAR 0 4
4991: PUSH
4992: LD_VAR 0 10
4996: PPUSH
4997: CALL_OW 250
5001: ST_TO_ADDR
// y := GetY ( enemy ) ;
5002: LD_ADDR_VAR 0 5
5006: PUSH
5007: LD_VAR 0 10
5011: PPUSH
5012: CALL_OW 251
5016: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
5017: LD_ADDR_VAR 0 6
5021: PUSH
5022: LD_VAR 0 4
5026: PUSH
5027: LD_INT 1
5029: NEG
5030: PPUSH
5031: LD_INT 1
5033: PPUSH
5034: CALL_OW 12
5038: PLUS
5039: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
5040: LD_ADDR_VAR 0 7
5044: PUSH
5045: LD_VAR 0 5
5049: PUSH
5050: LD_INT 1
5052: NEG
5053: PPUSH
5054: LD_INT 1
5056: PPUSH
5057: CALL_OW 12
5061: PLUS
5062: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5063: LD_VAR 0 6
5067: PPUSH
5068: LD_VAR 0 7
5072: PPUSH
5073: CALL_OW 488
5077: NOT
5078: IFFALSE 5100
// begin _x := x ;
5080: LD_ADDR_VAR 0 6
5084: PUSH
5085: LD_VAR 0 4
5089: ST_TO_ADDR
// _y := y ;
5090: LD_ADDR_VAR 0 7
5094: PUSH
5095: LD_VAR 0 5
5099: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
5100: LD_ADDR_VAR 0 3
5104: PUSH
5105: LD_INT 1
5107: PPUSH
5108: LD_VAR 0 14
5112: PPUSH
5113: CALL_OW 12
5117: ST_TO_ADDR
// case i of 1 :
5118: LD_VAR 0 3
5122: PUSH
5123: LD_INT 1
5125: DOUBLE
5126: EQUAL
5127: IFTRUE 5131
5129: GO 5148
5131: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
5132: LD_VAR 0 1
5136: PPUSH
5137: LD_VAR 0 10
5141: PPUSH
5142: CALL_OW 115
5146: GO 5209
5148: LD_INT 2
5150: DOUBLE
5151: EQUAL
5152: IFTRUE 5156
5154: GO 5178
5156: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
5157: LD_VAR 0 1
5161: PPUSH
5162: LD_VAR 0 6
5166: PPUSH
5167: LD_VAR 0 7
5171: PPUSH
5172: CALL_OW 153
5176: GO 5209
5178: LD_INT 3
5180: DOUBLE
5181: EQUAL
5182: IFTRUE 5186
5184: GO 5208
5186: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
5187: LD_VAR 0 1
5191: PPUSH
5192: LD_VAR 0 6
5196: PPUSH
5197: LD_VAR 0 7
5201: PPUSH
5202: CALL_OW 154
5206: GO 5209
5208: POP
// end ;
5209: LD_VAR 0 2
5213: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
5214: LD_INT 0
5216: PPUSH
5217: PPUSH
5218: PPUSH
5219: PPUSH
5220: PPUSH
5221: PPUSH
// if not unit or not building then
5222: LD_VAR 0 1
5226: NOT
5227: PUSH
5228: LD_VAR 0 2
5232: NOT
5233: OR
5234: IFFALSE 5238
// exit ;
5236: GO 5396
// x := GetX ( building ) ;
5238: LD_ADDR_VAR 0 5
5242: PUSH
5243: LD_VAR 0 2
5247: PPUSH
5248: CALL_OW 250
5252: ST_TO_ADDR
// y := GetY ( building ) ;
5253: LD_ADDR_VAR 0 6
5257: PUSH
5258: LD_VAR 0 2
5262: PPUSH
5263: CALL_OW 251
5267: ST_TO_ADDR
// for i = 0 to 5 do
5268: LD_ADDR_VAR 0 4
5272: PUSH
5273: DOUBLE
5274: LD_INT 0
5276: DEC
5277: ST_TO_ADDR
5278: LD_INT 5
5280: PUSH
5281: FOR_TO
5282: IFFALSE 5394
// begin _x := ShiftX ( x , i , 3 ) ;
5284: LD_ADDR_VAR 0 7
5288: PUSH
5289: LD_VAR 0 5
5293: PPUSH
5294: LD_VAR 0 4
5298: PPUSH
5299: LD_INT 3
5301: PPUSH
5302: CALL_OW 272
5306: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
5307: LD_ADDR_VAR 0 8
5311: PUSH
5312: LD_VAR 0 6
5316: PPUSH
5317: LD_VAR 0 4
5321: PPUSH
5322: LD_INT 3
5324: PPUSH
5325: CALL_OW 273
5329: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5330: LD_VAR 0 7
5334: PPUSH
5335: LD_VAR 0 8
5339: PPUSH
5340: CALL_OW 488
5344: NOT
5345: IFFALSE 5349
// continue ;
5347: GO 5281
// if HexInfo ( _x , _y ) = 0 then
5349: LD_VAR 0 7
5353: PPUSH
5354: LD_VAR 0 8
5358: PPUSH
5359: CALL_OW 428
5363: PUSH
5364: LD_INT 0
5366: EQUAL
5367: IFFALSE 5392
// begin ComMoveXY ( unit , _x , _y ) ;
5369: LD_VAR 0 1
5373: PPUSH
5374: LD_VAR 0 7
5378: PPUSH
5379: LD_VAR 0 8
5383: PPUSH
5384: CALL_OW 111
// exit ;
5388: POP
5389: POP
5390: GO 5396
// end ; end ;
5392: GO 5281
5394: POP
5395: POP
// end ;
5396: LD_VAR 0 3
5400: RET
// export function ScanBase ( side , base_area ) ; begin
5401: LD_INT 0
5403: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
5404: LD_ADDR_VAR 0 3
5408: PUSH
5409: LD_VAR 0 2
5413: PPUSH
5414: LD_INT 81
5416: PUSH
5417: LD_VAR 0 1
5421: PUSH
5422: EMPTY
5423: LIST
5424: LIST
5425: PPUSH
5426: CALL_OW 70
5430: ST_TO_ADDR
// end ;
5431: LD_VAR 0 3
5435: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
5436: LD_INT 0
5438: PPUSH
5439: PPUSH
5440: PPUSH
5441: PPUSH
// result := false ;
5442: LD_ADDR_VAR 0 2
5446: PUSH
5447: LD_INT 0
5449: ST_TO_ADDR
// side := GetSide ( unit ) ;
5450: LD_ADDR_VAR 0 3
5454: PUSH
5455: LD_VAR 0 1
5459: PPUSH
5460: CALL_OW 255
5464: ST_TO_ADDR
// nat := GetNation ( unit ) ;
5465: LD_ADDR_VAR 0 4
5469: PUSH
5470: LD_VAR 0 1
5474: PPUSH
5475: CALL_OW 248
5479: ST_TO_ADDR
// case nat of 1 :
5480: LD_VAR 0 4
5484: PUSH
5485: LD_INT 1
5487: DOUBLE
5488: EQUAL
5489: IFTRUE 5493
5491: GO 5504
5493: POP
// tech := tech_lassight ; 2 :
5494: LD_ADDR_VAR 0 5
5498: PUSH
5499: LD_INT 12
5501: ST_TO_ADDR
5502: GO 5543
5504: LD_INT 2
5506: DOUBLE
5507: EQUAL
5508: IFTRUE 5512
5510: GO 5523
5512: POP
// tech := tech_mortar ; 3 :
5513: LD_ADDR_VAR 0 5
5517: PUSH
5518: LD_INT 41
5520: ST_TO_ADDR
5521: GO 5543
5523: LD_INT 3
5525: DOUBLE
5526: EQUAL
5527: IFTRUE 5531
5529: GO 5542
5531: POP
// tech := tech_bazooka ; end ;
5532: LD_ADDR_VAR 0 5
5536: PUSH
5537: LD_INT 44
5539: ST_TO_ADDR
5540: GO 5543
5542: POP
// if Researched ( side , tech ) then
5543: LD_VAR 0 3
5547: PPUSH
5548: LD_VAR 0 5
5552: PPUSH
5553: CALL_OW 325
5557: IFFALSE 5584
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
5559: LD_ADDR_VAR 0 2
5563: PUSH
5564: LD_INT 5
5566: PUSH
5567: LD_INT 8
5569: PUSH
5570: LD_INT 9
5572: PUSH
5573: EMPTY
5574: LIST
5575: LIST
5576: LIST
5577: PUSH
5578: LD_VAR 0 4
5582: ARRAY
5583: ST_TO_ADDR
// end ;
5584: LD_VAR 0 2
5588: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
5589: LD_INT 0
5591: PPUSH
5592: PPUSH
5593: PPUSH
// if not mines then
5594: LD_VAR 0 2
5598: NOT
5599: IFFALSE 5603
// exit ;
5601: GO 5747
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5603: LD_ADDR_VAR 0 5
5607: PUSH
5608: LD_INT 81
5610: PUSH
5611: LD_VAR 0 1
5615: PUSH
5616: EMPTY
5617: LIST
5618: LIST
5619: PUSH
5620: LD_INT 3
5622: PUSH
5623: LD_INT 21
5625: PUSH
5626: LD_INT 3
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: PUSH
5633: EMPTY
5634: LIST
5635: LIST
5636: PUSH
5637: EMPTY
5638: LIST
5639: LIST
5640: PPUSH
5641: CALL_OW 69
5645: ST_TO_ADDR
// for i in mines do
5646: LD_ADDR_VAR 0 4
5650: PUSH
5651: LD_VAR 0 2
5655: PUSH
5656: FOR_IN
5657: IFFALSE 5745
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5659: LD_VAR 0 4
5663: PUSH
5664: LD_INT 1
5666: ARRAY
5667: PPUSH
5668: LD_VAR 0 4
5672: PUSH
5673: LD_INT 2
5675: ARRAY
5676: PPUSH
5677: CALL_OW 458
5681: NOT
5682: IFFALSE 5686
// continue ;
5684: GO 5656
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5686: LD_VAR 0 4
5690: PUSH
5691: LD_INT 1
5693: ARRAY
5694: PPUSH
5695: LD_VAR 0 4
5699: PUSH
5700: LD_INT 2
5702: ARRAY
5703: PPUSH
5704: CALL_OW 428
5708: PUSH
5709: LD_VAR 0 5
5713: IN
5714: IFFALSE 5743
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5716: LD_VAR 0 4
5720: PUSH
5721: LD_INT 1
5723: ARRAY
5724: PPUSH
5725: LD_VAR 0 4
5729: PUSH
5730: LD_INT 2
5732: ARRAY
5733: PPUSH
5734: LD_VAR 0 1
5738: PPUSH
5739: CALL_OW 456
// end ;
5743: GO 5656
5745: POP
5746: POP
// end ;
5747: LD_VAR 0 3
5751: RET
// export function Count ( array ) ; begin
5752: LD_INT 0
5754: PPUSH
// result := array + 0 ;
5755: LD_ADDR_VAR 0 2
5759: PUSH
5760: LD_VAR 0 1
5764: PUSH
5765: LD_INT 0
5767: PLUS
5768: ST_TO_ADDR
// end ;
5769: LD_VAR 0 2
5773: RET
// export function IsEmpty ( building ) ; begin
5774: LD_INT 0
5776: PPUSH
// if not building then
5777: LD_VAR 0 1
5781: NOT
5782: IFFALSE 5786
// exit ;
5784: GO 5829
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5786: LD_ADDR_VAR 0 2
5790: PUSH
5791: LD_VAR 0 1
5795: PUSH
5796: LD_INT 22
5798: PUSH
5799: LD_VAR 0 1
5803: PPUSH
5804: CALL_OW 255
5808: PUSH
5809: EMPTY
5810: LIST
5811: LIST
5812: PUSH
5813: LD_INT 58
5815: PUSH
5816: EMPTY
5817: LIST
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: PPUSH
5823: CALL_OW 69
5827: IN
5828: ST_TO_ADDR
// end ;
5829: LD_VAR 0 2
5833: RET
// export function IsNotFull ( building ) ; var places ; begin
5834: LD_INT 0
5836: PPUSH
5837: PPUSH
// if not building then
5838: LD_VAR 0 1
5842: NOT
5843: IFFALSE 5847
// exit ;
5845: GO 5875
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5847: LD_ADDR_VAR 0 2
5851: PUSH
5852: LD_VAR 0 1
5856: PPUSH
5857: LD_INT 3
5859: PUSH
5860: LD_INT 62
5862: PUSH
5863: EMPTY
5864: LIST
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: PPUSH
5870: CALL_OW 72
5874: ST_TO_ADDR
// end ;
5875: LD_VAR 0 2
5879: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5880: LD_INT 0
5882: PPUSH
5883: PPUSH
5884: PPUSH
5885: PPUSH
// tmp := [ ] ;
5886: LD_ADDR_VAR 0 3
5890: PUSH
5891: EMPTY
5892: ST_TO_ADDR
// list := [ ] ;
5893: LD_ADDR_VAR 0 5
5897: PUSH
5898: EMPTY
5899: ST_TO_ADDR
// for i = 16 to 25 do
5900: LD_ADDR_VAR 0 4
5904: PUSH
5905: DOUBLE
5906: LD_INT 16
5908: DEC
5909: ST_TO_ADDR
5910: LD_INT 25
5912: PUSH
5913: FOR_TO
5914: IFFALSE 5987
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5916: LD_ADDR_VAR 0 3
5920: PUSH
5921: LD_VAR 0 3
5925: PUSH
5926: LD_INT 22
5928: PUSH
5929: LD_VAR 0 1
5933: PPUSH
5934: CALL_OW 255
5938: PUSH
5939: EMPTY
5940: LIST
5941: LIST
5942: PUSH
5943: LD_INT 91
5945: PUSH
5946: LD_VAR 0 1
5950: PUSH
5951: LD_INT 6
5953: PUSH
5954: EMPTY
5955: LIST
5956: LIST
5957: LIST
5958: PUSH
5959: LD_INT 30
5961: PUSH
5962: LD_VAR 0 4
5966: PUSH
5967: EMPTY
5968: LIST
5969: LIST
5970: PUSH
5971: EMPTY
5972: LIST
5973: LIST
5974: LIST
5975: PUSH
5976: EMPTY
5977: LIST
5978: PPUSH
5979: CALL_OW 69
5983: ADD
5984: ST_TO_ADDR
5985: GO 5913
5987: POP
5988: POP
// for i = 1 to tmp do
5989: LD_ADDR_VAR 0 4
5993: PUSH
5994: DOUBLE
5995: LD_INT 1
5997: DEC
5998: ST_TO_ADDR
5999: LD_VAR 0 3
6003: PUSH
6004: FOR_TO
6005: IFFALSE 6093
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
6007: LD_ADDR_VAR 0 5
6011: PUSH
6012: LD_VAR 0 5
6016: PUSH
6017: LD_VAR 0 3
6021: PUSH
6022: LD_VAR 0 4
6026: ARRAY
6027: PPUSH
6028: CALL_OW 266
6032: PUSH
6033: LD_VAR 0 3
6037: PUSH
6038: LD_VAR 0 4
6042: ARRAY
6043: PPUSH
6044: CALL_OW 250
6048: PUSH
6049: LD_VAR 0 3
6053: PUSH
6054: LD_VAR 0 4
6058: ARRAY
6059: PPUSH
6060: CALL_OW 251
6064: PUSH
6065: LD_VAR 0 3
6069: PUSH
6070: LD_VAR 0 4
6074: ARRAY
6075: PPUSH
6076: CALL_OW 254
6080: PUSH
6081: EMPTY
6082: LIST
6083: LIST
6084: LIST
6085: LIST
6086: PUSH
6087: EMPTY
6088: LIST
6089: ADD
6090: ST_TO_ADDR
6091: GO 6004
6093: POP
6094: POP
// result := list ;
6095: LD_ADDR_VAR 0 2
6099: PUSH
6100: LD_VAR 0 5
6104: ST_TO_ADDR
// end ;
6105: LD_VAR 0 2
6109: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
6110: LD_INT 0
6112: PPUSH
6113: PPUSH
6114: PPUSH
6115: PPUSH
6116: PPUSH
6117: PPUSH
6118: PPUSH
// if not factory then
6119: LD_VAR 0 1
6123: NOT
6124: IFFALSE 6128
// exit ;
6126: GO 6721
// if control = control_apeman then
6128: LD_VAR 0 4
6132: PUSH
6133: LD_INT 5
6135: EQUAL
6136: IFFALSE 6245
// begin tmp := UnitsInside ( factory ) ;
6138: LD_ADDR_VAR 0 8
6142: PUSH
6143: LD_VAR 0 1
6147: PPUSH
6148: CALL_OW 313
6152: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
6153: LD_VAR 0 8
6157: PPUSH
6158: LD_INT 25
6160: PUSH
6161: LD_INT 12
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: PPUSH
6168: CALL_OW 72
6172: NOT
6173: IFFALSE 6183
// control := control_manual ;
6175: LD_ADDR_VAR 0 4
6179: PUSH
6180: LD_INT 1
6182: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
6183: LD_ADDR_VAR 0 8
6187: PUSH
6188: LD_VAR 0 1
6192: PPUSH
6193: CALL 5880 0 1
6197: ST_TO_ADDR
// if tmp then
6198: LD_VAR 0 8
6202: IFFALSE 6245
// begin for i in tmp do
6204: LD_ADDR_VAR 0 7
6208: PUSH
6209: LD_VAR 0 8
6213: PUSH
6214: FOR_IN
6215: IFFALSE 6243
// if i [ 1 ] = b_ext_radio then
6217: LD_VAR 0 7
6221: PUSH
6222: LD_INT 1
6224: ARRAY
6225: PUSH
6226: LD_INT 22
6228: EQUAL
6229: IFFALSE 6241
// begin control := control_remote ;
6231: LD_ADDR_VAR 0 4
6235: PUSH
6236: LD_INT 2
6238: ST_TO_ADDR
// break ;
6239: GO 6243
// end ;
6241: GO 6214
6243: POP
6244: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6245: LD_VAR 0 1
6249: PPUSH
6250: LD_VAR 0 2
6254: PPUSH
6255: LD_VAR 0 3
6259: PPUSH
6260: LD_VAR 0 4
6264: PPUSH
6265: LD_VAR 0 5
6269: PPUSH
6270: CALL_OW 448
6274: IFFALSE 6309
// begin result := [ chassis , engine , control , weapon ] ;
6276: LD_ADDR_VAR 0 6
6280: PUSH
6281: LD_VAR 0 2
6285: PUSH
6286: LD_VAR 0 3
6290: PUSH
6291: LD_VAR 0 4
6295: PUSH
6296: LD_VAR 0 5
6300: PUSH
6301: EMPTY
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: ST_TO_ADDR
// exit ;
6307: GO 6721
// end ; _chassis := AvailableChassisList ( factory ) ;
6309: LD_ADDR_VAR 0 9
6313: PUSH
6314: LD_VAR 0 1
6318: PPUSH
6319: CALL_OW 475
6323: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
6324: LD_ADDR_VAR 0 11
6328: PUSH
6329: LD_VAR 0 1
6333: PPUSH
6334: CALL_OW 476
6338: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
6339: LD_ADDR_VAR 0 12
6343: PUSH
6344: LD_VAR 0 1
6348: PPUSH
6349: CALL_OW 477
6353: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
6354: LD_ADDR_VAR 0 10
6358: PUSH
6359: LD_VAR 0 1
6363: PPUSH
6364: CALL_OW 478
6368: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
6369: LD_VAR 0 9
6373: NOT
6374: PUSH
6375: LD_VAR 0 11
6379: NOT
6380: OR
6381: PUSH
6382: LD_VAR 0 12
6386: NOT
6387: OR
6388: PUSH
6389: LD_VAR 0 10
6393: NOT
6394: OR
6395: IFFALSE 6430
// begin result := [ chassis , engine , control , weapon ] ;
6397: LD_ADDR_VAR 0 6
6401: PUSH
6402: LD_VAR 0 2
6406: PUSH
6407: LD_VAR 0 3
6411: PUSH
6412: LD_VAR 0 4
6416: PUSH
6417: LD_VAR 0 5
6421: PUSH
6422: EMPTY
6423: LIST
6424: LIST
6425: LIST
6426: LIST
6427: ST_TO_ADDR
// exit ;
6428: GO 6721
// end ; if not chassis in _chassis then
6430: LD_VAR 0 2
6434: PUSH
6435: LD_VAR 0 9
6439: IN
6440: NOT
6441: IFFALSE 6467
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
6443: LD_ADDR_VAR 0 2
6447: PUSH
6448: LD_VAR 0 9
6452: PUSH
6453: LD_INT 1
6455: PPUSH
6456: LD_VAR 0 9
6460: PPUSH
6461: CALL_OW 12
6465: ARRAY
6466: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
6467: LD_VAR 0 2
6471: PPUSH
6472: LD_VAR 0 3
6476: PPUSH
6477: CALL 6726 0 2
6481: NOT
6482: IFFALSE 6541
// repeat engine := _engine [ 1 ] ;
6484: LD_ADDR_VAR 0 3
6488: PUSH
6489: LD_VAR 0 11
6493: PUSH
6494: LD_INT 1
6496: ARRAY
6497: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
6498: LD_ADDR_VAR 0 11
6502: PUSH
6503: LD_VAR 0 11
6507: PPUSH
6508: LD_INT 1
6510: PPUSH
6511: CALL_OW 3
6515: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
6516: LD_VAR 0 2
6520: PPUSH
6521: LD_VAR 0 3
6525: PPUSH
6526: CALL 6726 0 2
6530: PUSH
6531: LD_VAR 0 11
6535: PUSH
6536: EMPTY
6537: EQUAL
6538: OR
6539: IFFALSE 6484
// if not control in _control then
6541: LD_VAR 0 4
6545: PUSH
6546: LD_VAR 0 12
6550: IN
6551: NOT
6552: IFFALSE 6578
// control := _control [ rand ( 1 , _control ) ] ;
6554: LD_ADDR_VAR 0 4
6558: PUSH
6559: LD_VAR 0 12
6563: PUSH
6564: LD_INT 1
6566: PPUSH
6567: LD_VAR 0 12
6571: PPUSH
6572: CALL_OW 12
6576: ARRAY
6577: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
6578: LD_VAR 0 2
6582: PPUSH
6583: LD_VAR 0 5
6587: PPUSH
6588: CALL 6946 0 2
6592: NOT
6593: IFFALSE 6652
// repeat weapon := _weapon [ 1 ] ;
6595: LD_ADDR_VAR 0 5
6599: PUSH
6600: LD_VAR 0 10
6604: PUSH
6605: LD_INT 1
6607: ARRAY
6608: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
6609: LD_ADDR_VAR 0 10
6613: PUSH
6614: LD_VAR 0 10
6618: PPUSH
6619: LD_INT 1
6621: PPUSH
6622: CALL_OW 3
6626: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6627: LD_VAR 0 2
6631: PPUSH
6632: LD_VAR 0 5
6636: PPUSH
6637: CALL 6946 0 2
6641: PUSH
6642: LD_VAR 0 10
6646: PUSH
6647: EMPTY
6648: EQUAL
6649: OR
6650: IFFALSE 6595
// result := [ ] ;
6652: LD_ADDR_VAR 0 6
6656: PUSH
6657: EMPTY
6658: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6659: LD_VAR 0 1
6663: PPUSH
6664: LD_VAR 0 2
6668: PPUSH
6669: LD_VAR 0 3
6673: PPUSH
6674: LD_VAR 0 4
6678: PPUSH
6679: LD_VAR 0 5
6683: PPUSH
6684: CALL_OW 448
6688: IFFALSE 6721
// result := [ chassis , engine , control , weapon ] ;
6690: LD_ADDR_VAR 0 6
6694: PUSH
6695: LD_VAR 0 2
6699: PUSH
6700: LD_VAR 0 3
6704: PUSH
6705: LD_VAR 0 4
6709: PUSH
6710: LD_VAR 0 5
6714: PUSH
6715: EMPTY
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: ST_TO_ADDR
// end ;
6721: LD_VAR 0 6
6725: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6726: LD_INT 0
6728: PPUSH
// if not chassis or not engine then
6729: LD_VAR 0 1
6733: NOT
6734: PUSH
6735: LD_VAR 0 2
6739: NOT
6740: OR
6741: IFFALSE 6745
// exit ;
6743: GO 6941
// case engine of engine_solar :
6745: LD_VAR 0 2
6749: PUSH
6750: LD_INT 2
6752: DOUBLE
6753: EQUAL
6754: IFTRUE 6758
6756: GO 6796
6758: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6759: LD_ADDR_VAR 0 3
6763: PUSH
6764: LD_INT 11
6766: PUSH
6767: LD_INT 12
6769: PUSH
6770: LD_INT 13
6772: PUSH
6773: LD_INT 14
6775: PUSH
6776: LD_INT 1
6778: PUSH
6779: LD_INT 2
6781: PUSH
6782: LD_INT 3
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: LIST
6792: LIST
6793: ST_TO_ADDR
6794: GO 6925
6796: LD_INT 1
6798: DOUBLE
6799: EQUAL
6800: IFTRUE 6804
6802: GO 6866
6804: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6805: LD_ADDR_VAR 0 3
6809: PUSH
6810: LD_INT 11
6812: PUSH
6813: LD_INT 12
6815: PUSH
6816: LD_INT 13
6818: PUSH
6819: LD_INT 14
6821: PUSH
6822: LD_INT 1
6824: PUSH
6825: LD_INT 2
6827: PUSH
6828: LD_INT 3
6830: PUSH
6831: LD_INT 4
6833: PUSH
6834: LD_INT 5
6836: PUSH
6837: LD_INT 21
6839: PUSH
6840: LD_INT 23
6842: PUSH
6843: LD_INT 22
6845: PUSH
6846: LD_INT 24
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: LIST
6856: LIST
6857: LIST
6858: LIST
6859: LIST
6860: LIST
6861: LIST
6862: LIST
6863: ST_TO_ADDR
6864: GO 6925
6866: LD_INT 3
6868: DOUBLE
6869: EQUAL
6870: IFTRUE 6874
6872: GO 6924
6874: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6875: LD_ADDR_VAR 0 3
6879: PUSH
6880: LD_INT 13
6882: PUSH
6883: LD_INT 14
6885: PUSH
6886: LD_INT 2
6888: PUSH
6889: LD_INT 3
6891: PUSH
6892: LD_INT 4
6894: PUSH
6895: LD_INT 5
6897: PUSH
6898: LD_INT 21
6900: PUSH
6901: LD_INT 22
6903: PUSH
6904: LD_INT 23
6906: PUSH
6907: LD_INT 24
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: ST_TO_ADDR
6922: GO 6925
6924: POP
// result := ( chassis in result ) ;
6925: LD_ADDR_VAR 0 3
6929: PUSH
6930: LD_VAR 0 1
6934: PUSH
6935: LD_VAR 0 3
6939: IN
6940: ST_TO_ADDR
// end ;
6941: LD_VAR 0 3
6945: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6946: LD_INT 0
6948: PPUSH
// if not chassis or not weapon then
6949: LD_VAR 0 1
6953: NOT
6954: PUSH
6955: LD_VAR 0 2
6959: NOT
6960: OR
6961: IFFALSE 6965
// exit ;
6963: GO 8025
// case weapon of us_machine_gun :
6965: LD_VAR 0 2
6969: PUSH
6970: LD_INT 2
6972: DOUBLE
6973: EQUAL
6974: IFTRUE 6978
6976: GO 7008
6978: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6979: LD_ADDR_VAR 0 3
6983: PUSH
6984: LD_INT 1
6986: PUSH
6987: LD_INT 2
6989: PUSH
6990: LD_INT 3
6992: PUSH
6993: LD_INT 4
6995: PUSH
6996: LD_INT 5
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: ST_TO_ADDR
7006: GO 8009
7008: LD_INT 3
7010: DOUBLE
7011: EQUAL
7012: IFTRUE 7016
7014: GO 7046
7016: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
7017: LD_ADDR_VAR 0 3
7021: PUSH
7022: LD_INT 1
7024: PUSH
7025: LD_INT 2
7027: PUSH
7028: LD_INT 3
7030: PUSH
7031: LD_INT 4
7033: PUSH
7034: LD_INT 5
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: LIST
7043: ST_TO_ADDR
7044: GO 8009
7046: LD_INT 11
7048: DOUBLE
7049: EQUAL
7050: IFTRUE 7054
7052: GO 7084
7054: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
7055: LD_ADDR_VAR 0 3
7059: PUSH
7060: LD_INT 1
7062: PUSH
7063: LD_INT 2
7065: PUSH
7066: LD_INT 3
7068: PUSH
7069: LD_INT 4
7071: PUSH
7072: LD_INT 5
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: LIST
7079: LIST
7080: LIST
7081: ST_TO_ADDR
7082: GO 8009
7084: LD_INT 4
7086: DOUBLE
7087: EQUAL
7088: IFTRUE 7092
7090: GO 7118
7092: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
7093: LD_ADDR_VAR 0 3
7097: PUSH
7098: LD_INT 2
7100: PUSH
7101: LD_INT 3
7103: PUSH
7104: LD_INT 4
7106: PUSH
7107: LD_INT 5
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: ST_TO_ADDR
7116: GO 8009
7118: LD_INT 5
7120: DOUBLE
7121: EQUAL
7122: IFTRUE 7126
7124: GO 7152
7126: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
7127: LD_ADDR_VAR 0 3
7131: PUSH
7132: LD_INT 2
7134: PUSH
7135: LD_INT 3
7137: PUSH
7138: LD_INT 4
7140: PUSH
7141: LD_INT 5
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: ST_TO_ADDR
7150: GO 8009
7152: LD_INT 9
7154: DOUBLE
7155: EQUAL
7156: IFTRUE 7160
7158: GO 7186
7160: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
7161: LD_ADDR_VAR 0 3
7165: PUSH
7166: LD_INT 2
7168: PUSH
7169: LD_INT 3
7171: PUSH
7172: LD_INT 4
7174: PUSH
7175: LD_INT 5
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: ST_TO_ADDR
7184: GO 8009
7186: LD_INT 7
7188: DOUBLE
7189: EQUAL
7190: IFTRUE 7194
7192: GO 7220
7194: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
7195: LD_ADDR_VAR 0 3
7199: PUSH
7200: LD_INT 2
7202: PUSH
7203: LD_INT 3
7205: PUSH
7206: LD_INT 4
7208: PUSH
7209: LD_INT 5
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: ST_TO_ADDR
7218: GO 8009
7220: LD_INT 12
7222: DOUBLE
7223: EQUAL
7224: IFTRUE 7228
7226: GO 7254
7228: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
7229: LD_ADDR_VAR 0 3
7233: PUSH
7234: LD_INT 2
7236: PUSH
7237: LD_INT 3
7239: PUSH
7240: LD_INT 4
7242: PUSH
7243: LD_INT 5
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: LIST
7250: LIST
7251: ST_TO_ADDR
7252: GO 8009
7254: LD_INT 13
7256: DOUBLE
7257: EQUAL
7258: IFTRUE 7262
7260: GO 7288
7262: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
7263: LD_ADDR_VAR 0 3
7267: PUSH
7268: LD_INT 2
7270: PUSH
7271: LD_INT 3
7273: PUSH
7274: LD_INT 4
7276: PUSH
7277: LD_INT 5
7279: PUSH
7280: EMPTY
7281: LIST
7282: LIST
7283: LIST
7284: LIST
7285: ST_TO_ADDR
7286: GO 8009
7288: LD_INT 14
7290: DOUBLE
7291: EQUAL
7292: IFTRUE 7296
7294: GO 7314
7296: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
7297: LD_ADDR_VAR 0 3
7301: PUSH
7302: LD_INT 4
7304: PUSH
7305: LD_INT 5
7307: PUSH
7308: EMPTY
7309: LIST
7310: LIST
7311: ST_TO_ADDR
7312: GO 8009
7314: LD_INT 6
7316: DOUBLE
7317: EQUAL
7318: IFTRUE 7322
7320: GO 7340
7322: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
7323: LD_ADDR_VAR 0 3
7327: PUSH
7328: LD_INT 4
7330: PUSH
7331: LD_INT 5
7333: PUSH
7334: EMPTY
7335: LIST
7336: LIST
7337: ST_TO_ADDR
7338: GO 8009
7340: LD_INT 10
7342: DOUBLE
7343: EQUAL
7344: IFTRUE 7348
7346: GO 7366
7348: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
7349: LD_ADDR_VAR 0 3
7353: PUSH
7354: LD_INT 4
7356: PUSH
7357: LD_INT 5
7359: PUSH
7360: EMPTY
7361: LIST
7362: LIST
7363: ST_TO_ADDR
7364: GO 8009
7366: LD_INT 22
7368: DOUBLE
7369: EQUAL
7370: IFTRUE 7374
7372: GO 7400
7374: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
7375: LD_ADDR_VAR 0 3
7379: PUSH
7380: LD_INT 11
7382: PUSH
7383: LD_INT 12
7385: PUSH
7386: LD_INT 13
7388: PUSH
7389: LD_INT 14
7391: PUSH
7392: EMPTY
7393: LIST
7394: LIST
7395: LIST
7396: LIST
7397: ST_TO_ADDR
7398: GO 8009
7400: LD_INT 23
7402: DOUBLE
7403: EQUAL
7404: IFTRUE 7408
7406: GO 7434
7408: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
7409: LD_ADDR_VAR 0 3
7413: PUSH
7414: LD_INT 11
7416: PUSH
7417: LD_INT 12
7419: PUSH
7420: LD_INT 13
7422: PUSH
7423: LD_INT 14
7425: PUSH
7426: EMPTY
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: ST_TO_ADDR
7432: GO 8009
7434: LD_INT 24
7436: DOUBLE
7437: EQUAL
7438: IFTRUE 7442
7440: GO 7468
7442: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
7443: LD_ADDR_VAR 0 3
7447: PUSH
7448: LD_INT 11
7450: PUSH
7451: LD_INT 12
7453: PUSH
7454: LD_INT 13
7456: PUSH
7457: LD_INT 14
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: ST_TO_ADDR
7466: GO 8009
7468: LD_INT 30
7470: DOUBLE
7471: EQUAL
7472: IFTRUE 7476
7474: GO 7502
7476: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
7477: LD_ADDR_VAR 0 3
7481: PUSH
7482: LD_INT 11
7484: PUSH
7485: LD_INT 12
7487: PUSH
7488: LD_INT 13
7490: PUSH
7491: LD_INT 14
7493: PUSH
7494: EMPTY
7495: LIST
7496: LIST
7497: LIST
7498: LIST
7499: ST_TO_ADDR
7500: GO 8009
7502: LD_INT 25
7504: DOUBLE
7505: EQUAL
7506: IFTRUE 7510
7508: GO 7528
7510: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
7511: LD_ADDR_VAR 0 3
7515: PUSH
7516: LD_INT 13
7518: PUSH
7519: LD_INT 14
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: ST_TO_ADDR
7526: GO 8009
7528: LD_INT 27
7530: DOUBLE
7531: EQUAL
7532: IFTRUE 7536
7534: GO 7554
7536: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
7537: LD_ADDR_VAR 0 3
7541: PUSH
7542: LD_INT 13
7544: PUSH
7545: LD_INT 14
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: ST_TO_ADDR
7552: GO 8009
7554: LD_INT 92
7556: DOUBLE
7557: EQUAL
7558: IFTRUE 7562
7560: GO 7588
7562: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
7563: LD_ADDR_VAR 0 3
7567: PUSH
7568: LD_INT 11
7570: PUSH
7571: LD_INT 12
7573: PUSH
7574: LD_INT 13
7576: PUSH
7577: LD_INT 14
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: LIST
7584: LIST
7585: ST_TO_ADDR
7586: GO 8009
7588: LD_INT 28
7590: DOUBLE
7591: EQUAL
7592: IFTRUE 7596
7594: GO 7614
7596: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
7597: LD_ADDR_VAR 0 3
7601: PUSH
7602: LD_INT 13
7604: PUSH
7605: LD_INT 14
7607: PUSH
7608: EMPTY
7609: LIST
7610: LIST
7611: ST_TO_ADDR
7612: GO 8009
7614: LD_INT 29
7616: DOUBLE
7617: EQUAL
7618: IFTRUE 7622
7620: GO 7640
7622: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7623: LD_ADDR_VAR 0 3
7627: PUSH
7628: LD_INT 13
7630: PUSH
7631: LD_INT 14
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: ST_TO_ADDR
7638: GO 8009
7640: LD_INT 31
7642: DOUBLE
7643: EQUAL
7644: IFTRUE 7648
7646: GO 7666
7648: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7649: LD_ADDR_VAR 0 3
7653: PUSH
7654: LD_INT 13
7656: PUSH
7657: LD_INT 14
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: ST_TO_ADDR
7664: GO 8009
7666: LD_INT 26
7668: DOUBLE
7669: EQUAL
7670: IFTRUE 7674
7672: GO 7692
7674: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7675: LD_ADDR_VAR 0 3
7679: PUSH
7680: LD_INT 13
7682: PUSH
7683: LD_INT 14
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: ST_TO_ADDR
7690: GO 8009
7692: LD_INT 42
7694: DOUBLE
7695: EQUAL
7696: IFTRUE 7700
7698: GO 7726
7700: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7701: LD_ADDR_VAR 0 3
7705: PUSH
7706: LD_INT 21
7708: PUSH
7709: LD_INT 22
7711: PUSH
7712: LD_INT 23
7714: PUSH
7715: LD_INT 24
7717: PUSH
7718: EMPTY
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: ST_TO_ADDR
7724: GO 8009
7726: LD_INT 43
7728: DOUBLE
7729: EQUAL
7730: IFTRUE 7734
7732: GO 7760
7734: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7735: LD_ADDR_VAR 0 3
7739: PUSH
7740: LD_INT 21
7742: PUSH
7743: LD_INT 22
7745: PUSH
7746: LD_INT 23
7748: PUSH
7749: LD_INT 24
7751: PUSH
7752: EMPTY
7753: LIST
7754: LIST
7755: LIST
7756: LIST
7757: ST_TO_ADDR
7758: GO 8009
7760: LD_INT 44
7762: DOUBLE
7763: EQUAL
7764: IFTRUE 7768
7766: GO 7794
7768: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7769: LD_ADDR_VAR 0 3
7773: PUSH
7774: LD_INT 21
7776: PUSH
7777: LD_INT 22
7779: PUSH
7780: LD_INT 23
7782: PUSH
7783: LD_INT 24
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: ST_TO_ADDR
7792: GO 8009
7794: LD_INT 45
7796: DOUBLE
7797: EQUAL
7798: IFTRUE 7802
7800: GO 7828
7802: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7803: LD_ADDR_VAR 0 3
7807: PUSH
7808: LD_INT 21
7810: PUSH
7811: LD_INT 22
7813: PUSH
7814: LD_INT 23
7816: PUSH
7817: LD_INT 24
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: ST_TO_ADDR
7826: GO 8009
7828: LD_INT 49
7830: DOUBLE
7831: EQUAL
7832: IFTRUE 7836
7834: GO 7862
7836: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7837: LD_ADDR_VAR 0 3
7841: PUSH
7842: LD_INT 21
7844: PUSH
7845: LD_INT 22
7847: PUSH
7848: LD_INT 23
7850: PUSH
7851: LD_INT 24
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: ST_TO_ADDR
7860: GO 8009
7862: LD_INT 51
7864: DOUBLE
7865: EQUAL
7866: IFTRUE 7870
7868: GO 7896
7870: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7871: LD_ADDR_VAR 0 3
7875: PUSH
7876: LD_INT 21
7878: PUSH
7879: LD_INT 22
7881: PUSH
7882: LD_INT 23
7884: PUSH
7885: LD_INT 24
7887: PUSH
7888: EMPTY
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: ST_TO_ADDR
7894: GO 8009
7896: LD_INT 52
7898: DOUBLE
7899: EQUAL
7900: IFTRUE 7904
7902: GO 7930
7904: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7905: LD_ADDR_VAR 0 3
7909: PUSH
7910: LD_INT 21
7912: PUSH
7913: LD_INT 22
7915: PUSH
7916: LD_INT 23
7918: PUSH
7919: LD_INT 24
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: ST_TO_ADDR
7928: GO 8009
7930: LD_INT 53
7932: DOUBLE
7933: EQUAL
7934: IFTRUE 7938
7936: GO 7956
7938: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7939: LD_ADDR_VAR 0 3
7943: PUSH
7944: LD_INT 23
7946: PUSH
7947: LD_INT 24
7949: PUSH
7950: EMPTY
7951: LIST
7952: LIST
7953: ST_TO_ADDR
7954: GO 8009
7956: LD_INT 46
7958: DOUBLE
7959: EQUAL
7960: IFTRUE 7964
7962: GO 7982
7964: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7965: LD_ADDR_VAR 0 3
7969: PUSH
7970: LD_INT 23
7972: PUSH
7973: LD_INT 24
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: ST_TO_ADDR
7980: GO 8009
7982: LD_INT 47
7984: DOUBLE
7985: EQUAL
7986: IFTRUE 7990
7988: GO 8008
7990: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7991: LD_ADDR_VAR 0 3
7995: PUSH
7996: LD_INT 23
7998: PUSH
7999: LD_INT 24
8001: PUSH
8002: EMPTY
8003: LIST
8004: LIST
8005: ST_TO_ADDR
8006: GO 8009
8008: POP
// result := ( chassis in result ) ;
8009: LD_ADDR_VAR 0 3
8013: PUSH
8014: LD_VAR 0 1
8018: PUSH
8019: LD_VAR 0 3
8023: IN
8024: ST_TO_ADDR
// end ;
8025: LD_VAR 0 3
8029: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
8030: LD_INT 0
8032: PPUSH
8033: PPUSH
8034: PPUSH
8035: PPUSH
8036: PPUSH
8037: PPUSH
8038: PPUSH
// result := array ;
8039: LD_ADDR_VAR 0 5
8043: PUSH
8044: LD_VAR 0 1
8048: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
8049: LD_VAR 0 1
8053: NOT
8054: PUSH
8055: LD_VAR 0 2
8059: NOT
8060: OR
8061: PUSH
8062: LD_VAR 0 3
8066: NOT
8067: OR
8068: PUSH
8069: LD_VAR 0 2
8073: PUSH
8074: LD_VAR 0 1
8078: GREATER
8079: OR
8080: PUSH
8081: LD_VAR 0 3
8085: PUSH
8086: LD_VAR 0 1
8090: GREATER
8091: OR
8092: IFFALSE 8096
// exit ;
8094: GO 8392
// if direction then
8096: LD_VAR 0 4
8100: IFFALSE 8164
// begin d := 1 ;
8102: LD_ADDR_VAR 0 9
8106: PUSH
8107: LD_INT 1
8109: ST_TO_ADDR
// if i_from > i_to then
8110: LD_VAR 0 2
8114: PUSH
8115: LD_VAR 0 3
8119: GREATER
8120: IFFALSE 8146
// length := ( array - i_from ) + i_to else
8122: LD_ADDR_VAR 0 11
8126: PUSH
8127: LD_VAR 0 1
8131: PUSH
8132: LD_VAR 0 2
8136: MINUS
8137: PUSH
8138: LD_VAR 0 3
8142: PLUS
8143: ST_TO_ADDR
8144: GO 8162
// length := i_to - i_from ;
8146: LD_ADDR_VAR 0 11
8150: PUSH
8151: LD_VAR 0 3
8155: PUSH
8156: LD_VAR 0 2
8160: MINUS
8161: ST_TO_ADDR
// end else
8162: GO 8225
// begin d := - 1 ;
8164: LD_ADDR_VAR 0 9
8168: PUSH
8169: LD_INT 1
8171: NEG
8172: ST_TO_ADDR
// if i_from > i_to then
8173: LD_VAR 0 2
8177: PUSH
8178: LD_VAR 0 3
8182: GREATER
8183: IFFALSE 8203
// length := i_from - i_to else
8185: LD_ADDR_VAR 0 11
8189: PUSH
8190: LD_VAR 0 2
8194: PUSH
8195: LD_VAR 0 3
8199: MINUS
8200: ST_TO_ADDR
8201: GO 8225
// length := ( array - i_to ) + i_from ;
8203: LD_ADDR_VAR 0 11
8207: PUSH
8208: LD_VAR 0 1
8212: PUSH
8213: LD_VAR 0 3
8217: MINUS
8218: PUSH
8219: LD_VAR 0 2
8223: PLUS
8224: ST_TO_ADDR
// end ; if not length then
8225: LD_VAR 0 11
8229: NOT
8230: IFFALSE 8234
// exit ;
8232: GO 8392
// tmp := array ;
8234: LD_ADDR_VAR 0 10
8238: PUSH
8239: LD_VAR 0 1
8243: ST_TO_ADDR
// for i = 1 to length do
8244: LD_ADDR_VAR 0 6
8248: PUSH
8249: DOUBLE
8250: LD_INT 1
8252: DEC
8253: ST_TO_ADDR
8254: LD_VAR 0 11
8258: PUSH
8259: FOR_TO
8260: IFFALSE 8380
// begin for j = 1 to array do
8262: LD_ADDR_VAR 0 7
8266: PUSH
8267: DOUBLE
8268: LD_INT 1
8270: DEC
8271: ST_TO_ADDR
8272: LD_VAR 0 1
8276: PUSH
8277: FOR_TO
8278: IFFALSE 8366
// begin k := j + d ;
8280: LD_ADDR_VAR 0 8
8284: PUSH
8285: LD_VAR 0 7
8289: PUSH
8290: LD_VAR 0 9
8294: PLUS
8295: ST_TO_ADDR
// if k > array then
8296: LD_VAR 0 8
8300: PUSH
8301: LD_VAR 0 1
8305: GREATER
8306: IFFALSE 8316
// k := 1 ;
8308: LD_ADDR_VAR 0 8
8312: PUSH
8313: LD_INT 1
8315: ST_TO_ADDR
// if not k then
8316: LD_VAR 0 8
8320: NOT
8321: IFFALSE 8333
// k := array ;
8323: LD_ADDR_VAR 0 8
8327: PUSH
8328: LD_VAR 0 1
8332: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
8333: LD_ADDR_VAR 0 10
8337: PUSH
8338: LD_VAR 0 10
8342: PPUSH
8343: LD_VAR 0 8
8347: PPUSH
8348: LD_VAR 0 1
8352: PUSH
8353: LD_VAR 0 7
8357: ARRAY
8358: PPUSH
8359: CALL_OW 1
8363: ST_TO_ADDR
// end ;
8364: GO 8277
8366: POP
8367: POP
// array := tmp ;
8368: LD_ADDR_VAR 0 1
8372: PUSH
8373: LD_VAR 0 10
8377: ST_TO_ADDR
// end ;
8378: GO 8259
8380: POP
8381: POP
// result := array ;
8382: LD_ADDR_VAR 0 5
8386: PUSH
8387: LD_VAR 0 1
8391: ST_TO_ADDR
// end ;
8392: LD_VAR 0 5
8396: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
8397: LD_INT 0
8399: PPUSH
8400: PPUSH
// result := 0 ;
8401: LD_ADDR_VAR 0 3
8405: PUSH
8406: LD_INT 0
8408: ST_TO_ADDR
// if not array or not value in array then
8409: LD_VAR 0 1
8413: NOT
8414: PUSH
8415: LD_VAR 0 2
8419: PUSH
8420: LD_VAR 0 1
8424: IN
8425: NOT
8426: OR
8427: IFFALSE 8431
// exit ;
8429: GO 8485
// for i = 1 to array do
8431: LD_ADDR_VAR 0 4
8435: PUSH
8436: DOUBLE
8437: LD_INT 1
8439: DEC
8440: ST_TO_ADDR
8441: LD_VAR 0 1
8445: PUSH
8446: FOR_TO
8447: IFFALSE 8483
// if value = array [ i ] then
8449: LD_VAR 0 2
8453: PUSH
8454: LD_VAR 0 1
8458: PUSH
8459: LD_VAR 0 4
8463: ARRAY
8464: EQUAL
8465: IFFALSE 8481
// begin result := i ;
8467: LD_ADDR_VAR 0 3
8471: PUSH
8472: LD_VAR 0 4
8476: ST_TO_ADDR
// exit ;
8477: POP
8478: POP
8479: GO 8485
// end ;
8481: GO 8446
8483: POP
8484: POP
// end ;
8485: LD_VAR 0 3
8489: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
8490: LD_INT 0
8492: PPUSH
// vc_chassis := chassis ;
8493: LD_ADDR_OWVAR 37
8497: PUSH
8498: LD_VAR 0 1
8502: ST_TO_ADDR
// vc_engine := engine ;
8503: LD_ADDR_OWVAR 39
8507: PUSH
8508: LD_VAR 0 2
8512: ST_TO_ADDR
// vc_control := control ;
8513: LD_ADDR_OWVAR 38
8517: PUSH
8518: LD_VAR 0 3
8522: ST_TO_ADDR
// vc_weapon := weapon ;
8523: LD_ADDR_OWVAR 40
8527: PUSH
8528: LD_VAR 0 4
8532: ST_TO_ADDR
// vc_fuel_battery := fuel ;
8533: LD_ADDR_OWVAR 41
8537: PUSH
8538: LD_VAR 0 5
8542: ST_TO_ADDR
// end ;
8543: LD_VAR 0 6
8547: RET
// export function WantPlant ( unit ) ; var task ; begin
8548: LD_INT 0
8550: PPUSH
8551: PPUSH
// result := false ;
8552: LD_ADDR_VAR 0 2
8556: PUSH
8557: LD_INT 0
8559: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
8560: LD_ADDR_VAR 0 3
8564: PUSH
8565: LD_VAR 0 1
8569: PPUSH
8570: CALL_OW 437
8574: ST_TO_ADDR
// if task then
8575: LD_VAR 0 3
8579: IFFALSE 8607
// if task [ 1 ] [ 1 ] = p then
8581: LD_VAR 0 3
8585: PUSH
8586: LD_INT 1
8588: ARRAY
8589: PUSH
8590: LD_INT 1
8592: ARRAY
8593: PUSH
8594: LD_STRING p
8596: EQUAL
8597: IFFALSE 8607
// result := true ;
8599: LD_ADDR_VAR 0 2
8603: PUSH
8604: LD_INT 1
8606: ST_TO_ADDR
// end ;
8607: LD_VAR 0 2
8611: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8612: LD_INT 0
8614: PPUSH
8615: PPUSH
8616: PPUSH
8617: PPUSH
// if pos < 1 then
8618: LD_VAR 0 2
8622: PUSH
8623: LD_INT 1
8625: LESS
8626: IFFALSE 8630
// exit ;
8628: GO 8933
// if pos = 1 then
8630: LD_VAR 0 2
8634: PUSH
8635: LD_INT 1
8637: EQUAL
8638: IFFALSE 8671
// result := Replace ( arr , pos [ 1 ] , value ) else
8640: LD_ADDR_VAR 0 4
8644: PUSH
8645: LD_VAR 0 1
8649: PPUSH
8650: LD_VAR 0 2
8654: PUSH
8655: LD_INT 1
8657: ARRAY
8658: PPUSH
8659: LD_VAR 0 3
8663: PPUSH
8664: CALL_OW 1
8668: ST_TO_ADDR
8669: GO 8933
// begin tmp := arr ;
8671: LD_ADDR_VAR 0 6
8675: PUSH
8676: LD_VAR 0 1
8680: ST_TO_ADDR
// s_arr := [ tmp ] ;
8681: LD_ADDR_VAR 0 7
8685: PUSH
8686: LD_VAR 0 6
8690: PUSH
8691: EMPTY
8692: LIST
8693: ST_TO_ADDR
// for i = 1 to pos - 1 do
8694: LD_ADDR_VAR 0 5
8698: PUSH
8699: DOUBLE
8700: LD_INT 1
8702: DEC
8703: ST_TO_ADDR
8704: LD_VAR 0 2
8708: PUSH
8709: LD_INT 1
8711: MINUS
8712: PUSH
8713: FOR_TO
8714: IFFALSE 8759
// begin tmp := tmp [ pos [ i ] ] ;
8716: LD_ADDR_VAR 0 6
8720: PUSH
8721: LD_VAR 0 6
8725: PUSH
8726: LD_VAR 0 2
8730: PUSH
8731: LD_VAR 0 5
8735: ARRAY
8736: ARRAY
8737: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8738: LD_ADDR_VAR 0 7
8742: PUSH
8743: LD_VAR 0 7
8747: PUSH
8748: LD_VAR 0 6
8752: PUSH
8753: EMPTY
8754: LIST
8755: ADD
8756: ST_TO_ADDR
// end ;
8757: GO 8713
8759: POP
8760: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8761: LD_ADDR_VAR 0 6
8765: PUSH
8766: LD_VAR 0 6
8770: PPUSH
8771: LD_VAR 0 2
8775: PUSH
8776: LD_VAR 0 2
8780: ARRAY
8781: PPUSH
8782: LD_VAR 0 3
8786: PPUSH
8787: CALL_OW 1
8791: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8792: LD_ADDR_VAR 0 7
8796: PUSH
8797: LD_VAR 0 7
8801: PPUSH
8802: LD_VAR 0 7
8806: PPUSH
8807: LD_VAR 0 6
8811: PPUSH
8812: CALL_OW 1
8816: ST_TO_ADDR
// for i = s_arr downto 2 do
8817: LD_ADDR_VAR 0 5
8821: PUSH
8822: DOUBLE
8823: LD_VAR 0 7
8827: INC
8828: ST_TO_ADDR
8829: LD_INT 2
8831: PUSH
8832: FOR_DOWNTO
8833: IFFALSE 8917
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8835: LD_ADDR_VAR 0 6
8839: PUSH
8840: LD_VAR 0 7
8844: PUSH
8845: LD_VAR 0 5
8849: PUSH
8850: LD_INT 1
8852: MINUS
8853: ARRAY
8854: PPUSH
8855: LD_VAR 0 2
8859: PUSH
8860: LD_VAR 0 5
8864: PUSH
8865: LD_INT 1
8867: MINUS
8868: ARRAY
8869: PPUSH
8870: LD_VAR 0 7
8874: PUSH
8875: LD_VAR 0 5
8879: ARRAY
8880: PPUSH
8881: CALL_OW 1
8885: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8886: LD_ADDR_VAR 0 7
8890: PUSH
8891: LD_VAR 0 7
8895: PPUSH
8896: LD_VAR 0 5
8900: PUSH
8901: LD_INT 1
8903: MINUS
8904: PPUSH
8905: LD_VAR 0 6
8909: PPUSH
8910: CALL_OW 1
8914: ST_TO_ADDR
// end ;
8915: GO 8832
8917: POP
8918: POP
// result := s_arr [ 1 ] ;
8919: LD_ADDR_VAR 0 4
8923: PUSH
8924: LD_VAR 0 7
8928: PUSH
8929: LD_INT 1
8931: ARRAY
8932: ST_TO_ADDR
// end ; end ;
8933: LD_VAR 0 4
8937: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8938: LD_INT 0
8940: PPUSH
8941: PPUSH
// if not list then
8942: LD_VAR 0 1
8946: NOT
8947: IFFALSE 8951
// exit ;
8949: GO 9042
// i := list [ pos1 ] ;
8951: LD_ADDR_VAR 0 5
8955: PUSH
8956: LD_VAR 0 1
8960: PUSH
8961: LD_VAR 0 2
8965: ARRAY
8966: ST_TO_ADDR
// if not i then
8967: LD_VAR 0 5
8971: NOT
8972: IFFALSE 8976
// exit ;
8974: GO 9042
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8976: LD_ADDR_VAR 0 1
8980: PUSH
8981: LD_VAR 0 1
8985: PPUSH
8986: LD_VAR 0 2
8990: PPUSH
8991: LD_VAR 0 1
8995: PUSH
8996: LD_VAR 0 3
9000: ARRAY
9001: PPUSH
9002: CALL_OW 1
9006: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
9007: LD_ADDR_VAR 0 1
9011: PUSH
9012: LD_VAR 0 1
9016: PPUSH
9017: LD_VAR 0 3
9021: PPUSH
9022: LD_VAR 0 5
9026: PPUSH
9027: CALL_OW 1
9031: ST_TO_ADDR
// result := list ;
9032: LD_ADDR_VAR 0 4
9036: PUSH
9037: LD_VAR 0 1
9041: ST_TO_ADDR
// end ;
9042: LD_VAR 0 4
9046: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
9047: LD_INT 0
9049: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
9050: LD_ADDR_VAR 0 5
9054: PUSH
9055: LD_VAR 0 1
9059: PPUSH
9060: CALL_OW 250
9064: PPUSH
9065: LD_VAR 0 1
9069: PPUSH
9070: CALL_OW 251
9074: PPUSH
9075: LD_VAR 0 2
9079: PPUSH
9080: LD_VAR 0 3
9084: PPUSH
9085: LD_VAR 0 4
9089: PPUSH
9090: CALL 9100 0 5
9094: ST_TO_ADDR
// end ;
9095: LD_VAR 0 5
9099: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
9100: LD_INT 0
9102: PPUSH
9103: PPUSH
9104: PPUSH
9105: PPUSH
// if not list then
9106: LD_VAR 0 3
9110: NOT
9111: IFFALSE 9115
// exit ;
9113: GO 9503
// result := [ ] ;
9115: LD_ADDR_VAR 0 6
9119: PUSH
9120: EMPTY
9121: ST_TO_ADDR
// for i in list do
9122: LD_ADDR_VAR 0 7
9126: PUSH
9127: LD_VAR 0 3
9131: PUSH
9132: FOR_IN
9133: IFFALSE 9335
// begin tmp := GetDistUnitXY ( i , x , y ) ;
9135: LD_ADDR_VAR 0 9
9139: PUSH
9140: LD_VAR 0 7
9144: PPUSH
9145: LD_VAR 0 1
9149: PPUSH
9150: LD_VAR 0 2
9154: PPUSH
9155: CALL_OW 297
9159: ST_TO_ADDR
// if not result then
9160: LD_VAR 0 6
9164: NOT
9165: IFFALSE 9191
// result := [ [ i , tmp ] ] else
9167: LD_ADDR_VAR 0 6
9171: PUSH
9172: LD_VAR 0 7
9176: PUSH
9177: LD_VAR 0 9
9181: PUSH
9182: EMPTY
9183: LIST
9184: LIST
9185: PUSH
9186: EMPTY
9187: LIST
9188: ST_TO_ADDR
9189: GO 9333
// begin if result [ result ] [ 2 ] < tmp then
9191: LD_VAR 0 6
9195: PUSH
9196: LD_VAR 0 6
9200: ARRAY
9201: PUSH
9202: LD_INT 2
9204: ARRAY
9205: PUSH
9206: LD_VAR 0 9
9210: LESS
9211: IFFALSE 9253
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9213: LD_ADDR_VAR 0 6
9217: PUSH
9218: LD_VAR 0 6
9222: PPUSH
9223: LD_VAR 0 6
9227: PUSH
9228: LD_INT 1
9230: PLUS
9231: PPUSH
9232: LD_VAR 0 7
9236: PUSH
9237: LD_VAR 0 9
9241: PUSH
9242: EMPTY
9243: LIST
9244: LIST
9245: PPUSH
9246: CALL_OW 2
9250: ST_TO_ADDR
9251: GO 9333
// for j = 1 to result do
9253: LD_ADDR_VAR 0 8
9257: PUSH
9258: DOUBLE
9259: LD_INT 1
9261: DEC
9262: ST_TO_ADDR
9263: LD_VAR 0 6
9267: PUSH
9268: FOR_TO
9269: IFFALSE 9331
// begin if tmp < result [ j ] [ 2 ] then
9271: LD_VAR 0 9
9275: PUSH
9276: LD_VAR 0 6
9280: PUSH
9281: LD_VAR 0 8
9285: ARRAY
9286: PUSH
9287: LD_INT 2
9289: ARRAY
9290: LESS
9291: IFFALSE 9329
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9293: LD_ADDR_VAR 0 6
9297: PUSH
9298: LD_VAR 0 6
9302: PPUSH
9303: LD_VAR 0 8
9307: PPUSH
9308: LD_VAR 0 7
9312: PUSH
9313: LD_VAR 0 9
9317: PUSH
9318: EMPTY
9319: LIST
9320: LIST
9321: PPUSH
9322: CALL_OW 2
9326: ST_TO_ADDR
// break ;
9327: GO 9331
// end ; end ;
9329: GO 9268
9331: POP
9332: POP
// end ; end ;
9333: GO 9132
9335: POP
9336: POP
// if result and not asc then
9337: LD_VAR 0 6
9341: PUSH
9342: LD_VAR 0 4
9346: NOT
9347: AND
9348: IFFALSE 9423
// begin tmp := result ;
9350: LD_ADDR_VAR 0 9
9354: PUSH
9355: LD_VAR 0 6
9359: ST_TO_ADDR
// for i = tmp downto 1 do
9360: LD_ADDR_VAR 0 7
9364: PUSH
9365: DOUBLE
9366: LD_VAR 0 9
9370: INC
9371: ST_TO_ADDR
9372: LD_INT 1
9374: PUSH
9375: FOR_DOWNTO
9376: IFFALSE 9421
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9378: LD_ADDR_VAR 0 6
9382: PUSH
9383: LD_VAR 0 6
9387: PPUSH
9388: LD_VAR 0 9
9392: PUSH
9393: LD_VAR 0 7
9397: MINUS
9398: PUSH
9399: LD_INT 1
9401: PLUS
9402: PPUSH
9403: LD_VAR 0 9
9407: PUSH
9408: LD_VAR 0 7
9412: ARRAY
9413: PPUSH
9414: CALL_OW 1
9418: ST_TO_ADDR
9419: GO 9375
9421: POP
9422: POP
// end ; tmp := [ ] ;
9423: LD_ADDR_VAR 0 9
9427: PUSH
9428: EMPTY
9429: ST_TO_ADDR
// if mode then
9430: LD_VAR 0 5
9434: IFFALSE 9503
// begin for i = 1 to result do
9436: LD_ADDR_VAR 0 7
9440: PUSH
9441: DOUBLE
9442: LD_INT 1
9444: DEC
9445: ST_TO_ADDR
9446: LD_VAR 0 6
9450: PUSH
9451: FOR_TO
9452: IFFALSE 9491
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9454: LD_ADDR_VAR 0 9
9458: PUSH
9459: LD_VAR 0 9
9463: PPUSH
9464: LD_VAR 0 7
9468: PPUSH
9469: LD_VAR 0 6
9473: PUSH
9474: LD_VAR 0 7
9478: ARRAY
9479: PUSH
9480: LD_INT 1
9482: ARRAY
9483: PPUSH
9484: CALL_OW 1
9488: ST_TO_ADDR
9489: GO 9451
9491: POP
9492: POP
// result := tmp ;
9493: LD_ADDR_VAR 0 6
9497: PUSH
9498: LD_VAR 0 9
9502: ST_TO_ADDR
// end ; end ;
9503: LD_VAR 0 6
9507: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9508: LD_INT 0
9510: PPUSH
9511: PPUSH
9512: PPUSH
9513: PPUSH
9514: PPUSH
9515: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9516: LD_ADDR_VAR 0 5
9520: PUSH
9521: LD_INT 0
9523: PUSH
9524: LD_INT 0
9526: PUSH
9527: LD_INT 0
9529: PUSH
9530: EMPTY
9531: PUSH
9532: EMPTY
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: ST_TO_ADDR
// if not x or not y then
9538: LD_VAR 0 2
9542: NOT
9543: PUSH
9544: LD_VAR 0 3
9548: NOT
9549: OR
9550: IFFALSE 9554
// exit ;
9552: GO 11204
// if not range then
9554: LD_VAR 0 4
9558: NOT
9559: IFFALSE 9569
// range := 10 ;
9561: LD_ADDR_VAR 0 4
9565: PUSH
9566: LD_INT 10
9568: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9569: LD_ADDR_VAR 0 8
9573: PUSH
9574: LD_INT 81
9576: PUSH
9577: LD_VAR 0 1
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: PUSH
9586: LD_INT 92
9588: PUSH
9589: LD_VAR 0 2
9593: PUSH
9594: LD_VAR 0 3
9598: PUSH
9599: LD_VAR 0 4
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: PUSH
9610: LD_INT 3
9612: PUSH
9613: LD_INT 21
9615: PUSH
9616: LD_INT 3
9618: PUSH
9619: EMPTY
9620: LIST
9621: LIST
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: PUSH
9627: EMPTY
9628: LIST
9629: LIST
9630: LIST
9631: PPUSH
9632: CALL_OW 69
9636: ST_TO_ADDR
// if not tmp then
9637: LD_VAR 0 8
9641: NOT
9642: IFFALSE 9646
// exit ;
9644: GO 11204
// for i in tmp do
9646: LD_ADDR_VAR 0 6
9650: PUSH
9651: LD_VAR 0 8
9655: PUSH
9656: FOR_IN
9657: IFFALSE 11179
// begin points := [ 0 , 0 , 0 ] ;
9659: LD_ADDR_VAR 0 9
9663: PUSH
9664: LD_INT 0
9666: PUSH
9667: LD_INT 0
9669: PUSH
9670: LD_INT 0
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: LIST
9677: ST_TO_ADDR
// bpoints := 1 ;
9678: LD_ADDR_VAR 0 10
9682: PUSH
9683: LD_INT 1
9685: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9686: LD_VAR 0 6
9690: PPUSH
9691: CALL_OW 247
9695: PUSH
9696: LD_INT 1
9698: DOUBLE
9699: EQUAL
9700: IFTRUE 9704
9702: GO 10282
9704: POP
// begin if GetClass ( i ) = 1 then
9705: LD_VAR 0 6
9709: PPUSH
9710: CALL_OW 257
9714: PUSH
9715: LD_INT 1
9717: EQUAL
9718: IFFALSE 9739
// points := [ 10 , 5 , 3 ] ;
9720: LD_ADDR_VAR 0 9
9724: PUSH
9725: LD_INT 10
9727: PUSH
9728: LD_INT 5
9730: PUSH
9731: LD_INT 3
9733: PUSH
9734: EMPTY
9735: LIST
9736: LIST
9737: LIST
9738: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9739: LD_VAR 0 6
9743: PPUSH
9744: CALL_OW 257
9748: PUSH
9749: LD_INT 2
9751: PUSH
9752: LD_INT 3
9754: PUSH
9755: LD_INT 4
9757: PUSH
9758: EMPTY
9759: LIST
9760: LIST
9761: LIST
9762: IN
9763: IFFALSE 9784
// points := [ 3 , 2 , 1 ] ;
9765: LD_ADDR_VAR 0 9
9769: PUSH
9770: LD_INT 3
9772: PUSH
9773: LD_INT 2
9775: PUSH
9776: LD_INT 1
9778: PUSH
9779: EMPTY
9780: LIST
9781: LIST
9782: LIST
9783: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9784: LD_VAR 0 6
9788: PPUSH
9789: CALL_OW 257
9793: PUSH
9794: LD_INT 5
9796: EQUAL
9797: IFFALSE 9818
// points := [ 130 , 5 , 2 ] ;
9799: LD_ADDR_VAR 0 9
9803: PUSH
9804: LD_INT 130
9806: PUSH
9807: LD_INT 5
9809: PUSH
9810: LD_INT 2
9812: PUSH
9813: EMPTY
9814: LIST
9815: LIST
9816: LIST
9817: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9818: LD_VAR 0 6
9822: PPUSH
9823: CALL_OW 257
9827: PUSH
9828: LD_INT 8
9830: EQUAL
9831: IFFALSE 9852
// points := [ 35 , 35 , 30 ] ;
9833: LD_ADDR_VAR 0 9
9837: PUSH
9838: LD_INT 35
9840: PUSH
9841: LD_INT 35
9843: PUSH
9844: LD_INT 30
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: LIST
9851: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9852: LD_VAR 0 6
9856: PPUSH
9857: CALL_OW 257
9861: PUSH
9862: LD_INT 9
9864: EQUAL
9865: IFFALSE 9886
// points := [ 20 , 55 , 40 ] ;
9867: LD_ADDR_VAR 0 9
9871: PUSH
9872: LD_INT 20
9874: PUSH
9875: LD_INT 55
9877: PUSH
9878: LD_INT 40
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: LIST
9885: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9886: LD_VAR 0 6
9890: PPUSH
9891: CALL_OW 257
9895: PUSH
9896: LD_INT 12
9898: PUSH
9899: LD_INT 16
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: IN
9906: IFFALSE 9927
// points := [ 5 , 3 , 2 ] ;
9908: LD_ADDR_VAR 0 9
9912: PUSH
9913: LD_INT 5
9915: PUSH
9916: LD_INT 3
9918: PUSH
9919: LD_INT 2
9921: PUSH
9922: EMPTY
9923: LIST
9924: LIST
9925: LIST
9926: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9927: LD_VAR 0 6
9931: PPUSH
9932: CALL_OW 257
9936: PUSH
9937: LD_INT 17
9939: EQUAL
9940: IFFALSE 9961
// points := [ 100 , 50 , 75 ] ;
9942: LD_ADDR_VAR 0 9
9946: PUSH
9947: LD_INT 100
9949: PUSH
9950: LD_INT 50
9952: PUSH
9953: LD_INT 75
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: LIST
9960: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9961: LD_VAR 0 6
9965: PPUSH
9966: CALL_OW 257
9970: PUSH
9971: LD_INT 15
9973: EQUAL
9974: IFFALSE 9995
// points := [ 10 , 5 , 3 ] ;
9976: LD_ADDR_VAR 0 9
9980: PUSH
9981: LD_INT 10
9983: PUSH
9984: LD_INT 5
9986: PUSH
9987: LD_INT 3
9989: PUSH
9990: EMPTY
9991: LIST
9992: LIST
9993: LIST
9994: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9995: LD_VAR 0 6
9999: PPUSH
10000: CALL_OW 257
10004: PUSH
10005: LD_INT 14
10007: EQUAL
10008: IFFALSE 10029
// points := [ 10 , 0 , 0 ] ;
10010: LD_ADDR_VAR 0 9
10014: PUSH
10015: LD_INT 10
10017: PUSH
10018: LD_INT 0
10020: PUSH
10021: LD_INT 0
10023: PUSH
10024: EMPTY
10025: LIST
10026: LIST
10027: LIST
10028: ST_TO_ADDR
// if GetClass ( i ) = 11 then
10029: LD_VAR 0 6
10033: PPUSH
10034: CALL_OW 257
10038: PUSH
10039: LD_INT 11
10041: EQUAL
10042: IFFALSE 10063
// points := [ 30 , 10 , 5 ] ;
10044: LD_ADDR_VAR 0 9
10048: PUSH
10049: LD_INT 30
10051: PUSH
10052: LD_INT 10
10054: PUSH
10055: LD_INT 5
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: LIST
10062: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
10063: LD_VAR 0 1
10067: PPUSH
10068: LD_INT 5
10070: PPUSH
10071: CALL_OW 321
10075: PUSH
10076: LD_INT 2
10078: EQUAL
10079: IFFALSE 10096
// bpoints := bpoints * 1.8 ;
10081: LD_ADDR_VAR 0 10
10085: PUSH
10086: LD_VAR 0 10
10090: PUSH
10091: LD_REAL  1.80000000000000E+0000
10094: MUL
10095: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
10096: LD_VAR 0 6
10100: PPUSH
10101: CALL_OW 257
10105: PUSH
10106: LD_INT 1
10108: PUSH
10109: LD_INT 2
10111: PUSH
10112: LD_INT 3
10114: PUSH
10115: LD_INT 4
10117: PUSH
10118: EMPTY
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: IN
10124: PUSH
10125: LD_VAR 0 1
10129: PPUSH
10130: LD_INT 51
10132: PPUSH
10133: CALL_OW 321
10137: PUSH
10138: LD_INT 2
10140: EQUAL
10141: AND
10142: IFFALSE 10159
// bpoints := bpoints * 1.2 ;
10144: LD_ADDR_VAR 0 10
10148: PUSH
10149: LD_VAR 0 10
10153: PUSH
10154: LD_REAL  1.20000000000000E+0000
10157: MUL
10158: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
10159: LD_VAR 0 6
10163: PPUSH
10164: CALL_OW 257
10168: PUSH
10169: LD_INT 5
10171: PUSH
10172: LD_INT 7
10174: PUSH
10175: LD_INT 9
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: LIST
10182: IN
10183: PUSH
10184: LD_VAR 0 1
10188: PPUSH
10189: LD_INT 52
10191: PPUSH
10192: CALL_OW 321
10196: PUSH
10197: LD_INT 2
10199: EQUAL
10200: AND
10201: IFFALSE 10218
// bpoints := bpoints * 1.5 ;
10203: LD_ADDR_VAR 0 10
10207: PUSH
10208: LD_VAR 0 10
10212: PUSH
10213: LD_REAL  1.50000000000000E+0000
10216: MUL
10217: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10218: LD_VAR 0 1
10222: PPUSH
10223: LD_INT 66
10225: PPUSH
10226: CALL_OW 321
10230: PUSH
10231: LD_INT 2
10233: EQUAL
10234: IFFALSE 10251
// bpoints := bpoints * 1.1 ;
10236: LD_ADDR_VAR 0 10
10240: PUSH
10241: LD_VAR 0 10
10245: PUSH
10246: LD_REAL  1.10000000000000E+0000
10249: MUL
10250: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10251: LD_ADDR_VAR 0 10
10255: PUSH
10256: LD_VAR 0 10
10260: PUSH
10261: LD_VAR 0 6
10265: PPUSH
10266: LD_INT 1
10268: PPUSH
10269: CALL_OW 259
10273: PUSH
10274: LD_REAL  1.15000000000000E+0000
10277: MUL
10278: MUL
10279: ST_TO_ADDR
// end ; unit_vehicle :
10280: GO 11108
10282: LD_INT 2
10284: DOUBLE
10285: EQUAL
10286: IFTRUE 10290
10288: GO 11096
10290: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10291: LD_VAR 0 6
10295: PPUSH
10296: CALL_OW 264
10300: PUSH
10301: LD_INT 2
10303: PUSH
10304: LD_INT 42
10306: PUSH
10307: LD_INT 24
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: LIST
10314: IN
10315: IFFALSE 10336
// points := [ 25 , 5 , 3 ] ;
10317: LD_ADDR_VAR 0 9
10321: PUSH
10322: LD_INT 25
10324: PUSH
10325: LD_INT 5
10327: PUSH
10328: LD_INT 3
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: LIST
10335: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10336: LD_VAR 0 6
10340: PPUSH
10341: CALL_OW 264
10345: PUSH
10346: LD_INT 4
10348: PUSH
10349: LD_INT 43
10351: PUSH
10352: LD_INT 25
10354: PUSH
10355: EMPTY
10356: LIST
10357: LIST
10358: LIST
10359: IN
10360: IFFALSE 10381
// points := [ 40 , 15 , 5 ] ;
10362: LD_ADDR_VAR 0 9
10366: PUSH
10367: LD_INT 40
10369: PUSH
10370: LD_INT 15
10372: PUSH
10373: LD_INT 5
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: LIST
10380: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10381: LD_VAR 0 6
10385: PPUSH
10386: CALL_OW 264
10390: PUSH
10391: LD_INT 3
10393: PUSH
10394: LD_INT 23
10396: PUSH
10397: EMPTY
10398: LIST
10399: LIST
10400: IN
10401: IFFALSE 10422
// points := [ 7 , 25 , 8 ] ;
10403: LD_ADDR_VAR 0 9
10407: PUSH
10408: LD_INT 7
10410: PUSH
10411: LD_INT 25
10413: PUSH
10414: LD_INT 8
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: LIST
10421: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10422: LD_VAR 0 6
10426: PPUSH
10427: CALL_OW 264
10431: PUSH
10432: LD_INT 5
10434: PUSH
10435: LD_INT 27
10437: PUSH
10438: LD_INT 44
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: LIST
10445: IN
10446: IFFALSE 10467
// points := [ 14 , 50 , 16 ] ;
10448: LD_ADDR_VAR 0 9
10452: PUSH
10453: LD_INT 14
10455: PUSH
10456: LD_INT 50
10458: PUSH
10459: LD_INT 16
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: LIST
10466: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10467: LD_VAR 0 6
10471: PPUSH
10472: CALL_OW 264
10476: PUSH
10477: LD_INT 6
10479: PUSH
10480: LD_INT 46
10482: PUSH
10483: EMPTY
10484: LIST
10485: LIST
10486: IN
10487: IFFALSE 10508
// points := [ 32 , 120 , 70 ] ;
10489: LD_ADDR_VAR 0 9
10493: PUSH
10494: LD_INT 32
10496: PUSH
10497: LD_INT 120
10499: PUSH
10500: LD_INT 70
10502: PUSH
10503: EMPTY
10504: LIST
10505: LIST
10506: LIST
10507: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10508: LD_VAR 0 6
10512: PPUSH
10513: CALL_OW 264
10517: PUSH
10518: LD_INT 7
10520: PUSH
10521: LD_INT 28
10523: PUSH
10524: LD_INT 45
10526: PUSH
10527: LD_INT 92
10529: PUSH
10530: EMPTY
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: IN
10536: IFFALSE 10557
// points := [ 35 , 20 , 45 ] ;
10538: LD_ADDR_VAR 0 9
10542: PUSH
10543: LD_INT 35
10545: PUSH
10546: LD_INT 20
10548: PUSH
10549: LD_INT 45
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: LIST
10556: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10557: LD_VAR 0 6
10561: PPUSH
10562: CALL_OW 264
10566: PUSH
10567: LD_INT 47
10569: PUSH
10570: EMPTY
10571: LIST
10572: IN
10573: IFFALSE 10594
// points := [ 67 , 45 , 75 ] ;
10575: LD_ADDR_VAR 0 9
10579: PUSH
10580: LD_INT 67
10582: PUSH
10583: LD_INT 45
10585: PUSH
10586: LD_INT 75
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: LIST
10593: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10594: LD_VAR 0 6
10598: PPUSH
10599: CALL_OW 264
10603: PUSH
10604: LD_INT 26
10606: PUSH
10607: EMPTY
10608: LIST
10609: IN
10610: IFFALSE 10631
// points := [ 120 , 30 , 80 ] ;
10612: LD_ADDR_VAR 0 9
10616: PUSH
10617: LD_INT 120
10619: PUSH
10620: LD_INT 30
10622: PUSH
10623: LD_INT 80
10625: PUSH
10626: EMPTY
10627: LIST
10628: LIST
10629: LIST
10630: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10631: LD_VAR 0 6
10635: PPUSH
10636: CALL_OW 264
10640: PUSH
10641: LD_INT 22
10643: PUSH
10644: EMPTY
10645: LIST
10646: IN
10647: IFFALSE 10668
// points := [ 40 , 1 , 1 ] ;
10649: LD_ADDR_VAR 0 9
10653: PUSH
10654: LD_INT 40
10656: PUSH
10657: LD_INT 1
10659: PUSH
10660: LD_INT 1
10662: PUSH
10663: EMPTY
10664: LIST
10665: LIST
10666: LIST
10667: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10668: LD_VAR 0 6
10672: PPUSH
10673: CALL_OW 264
10677: PUSH
10678: LD_INT 29
10680: PUSH
10681: EMPTY
10682: LIST
10683: IN
10684: IFFALSE 10705
// points := [ 70 , 200 , 400 ] ;
10686: LD_ADDR_VAR 0 9
10690: PUSH
10691: LD_INT 70
10693: PUSH
10694: LD_INT 200
10696: PUSH
10697: LD_INT 400
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: LIST
10704: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10705: LD_VAR 0 6
10709: PPUSH
10710: CALL_OW 264
10714: PUSH
10715: LD_INT 14
10717: PUSH
10718: LD_INT 53
10720: PUSH
10721: EMPTY
10722: LIST
10723: LIST
10724: IN
10725: IFFALSE 10746
// points := [ 40 , 10 , 20 ] ;
10727: LD_ADDR_VAR 0 9
10731: PUSH
10732: LD_INT 40
10734: PUSH
10735: LD_INT 10
10737: PUSH
10738: LD_INT 20
10740: PUSH
10741: EMPTY
10742: LIST
10743: LIST
10744: LIST
10745: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10746: LD_VAR 0 6
10750: PPUSH
10751: CALL_OW 264
10755: PUSH
10756: LD_INT 9
10758: PUSH
10759: EMPTY
10760: LIST
10761: IN
10762: IFFALSE 10783
// points := [ 5 , 70 , 20 ] ;
10764: LD_ADDR_VAR 0 9
10768: PUSH
10769: LD_INT 5
10771: PUSH
10772: LD_INT 70
10774: PUSH
10775: LD_INT 20
10777: PUSH
10778: EMPTY
10779: LIST
10780: LIST
10781: LIST
10782: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10783: LD_VAR 0 6
10787: PPUSH
10788: CALL_OW 264
10792: PUSH
10793: LD_INT 10
10795: PUSH
10796: EMPTY
10797: LIST
10798: IN
10799: IFFALSE 10820
// points := [ 35 , 110 , 70 ] ;
10801: LD_ADDR_VAR 0 9
10805: PUSH
10806: LD_INT 35
10808: PUSH
10809: LD_INT 110
10811: PUSH
10812: LD_INT 70
10814: PUSH
10815: EMPTY
10816: LIST
10817: LIST
10818: LIST
10819: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10820: LD_VAR 0 6
10824: PPUSH
10825: CALL_OW 265
10829: PUSH
10830: LD_INT 25
10832: EQUAL
10833: IFFALSE 10854
// points := [ 80 , 65 , 100 ] ;
10835: LD_ADDR_VAR 0 9
10839: PUSH
10840: LD_INT 80
10842: PUSH
10843: LD_INT 65
10845: PUSH
10846: LD_INT 100
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: LIST
10853: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10854: LD_VAR 0 6
10858: PPUSH
10859: CALL_OW 263
10863: PUSH
10864: LD_INT 1
10866: EQUAL
10867: IFFALSE 10902
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10869: LD_ADDR_VAR 0 10
10873: PUSH
10874: LD_VAR 0 10
10878: PUSH
10879: LD_VAR 0 6
10883: PPUSH
10884: CALL_OW 311
10888: PPUSH
10889: LD_INT 3
10891: PPUSH
10892: CALL_OW 259
10896: PUSH
10897: LD_INT 4
10899: MUL
10900: MUL
10901: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10902: LD_VAR 0 6
10906: PPUSH
10907: CALL_OW 263
10911: PUSH
10912: LD_INT 2
10914: EQUAL
10915: IFFALSE 10966
// begin j := IsControledBy ( i ) ;
10917: LD_ADDR_VAR 0 7
10921: PUSH
10922: LD_VAR 0 6
10926: PPUSH
10927: CALL_OW 312
10931: ST_TO_ADDR
// if j then
10932: LD_VAR 0 7
10936: IFFALSE 10966
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10938: LD_ADDR_VAR 0 10
10942: PUSH
10943: LD_VAR 0 10
10947: PUSH
10948: LD_VAR 0 7
10952: PPUSH
10953: LD_INT 3
10955: PPUSH
10956: CALL_OW 259
10960: PUSH
10961: LD_INT 3
10963: MUL
10964: MUL
10965: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10966: LD_VAR 0 6
10970: PPUSH
10971: CALL_OW 264
10975: PUSH
10976: LD_INT 5
10978: PUSH
10979: LD_INT 6
10981: PUSH
10982: LD_INT 46
10984: PUSH
10985: LD_INT 44
10987: PUSH
10988: LD_INT 47
10990: PUSH
10991: LD_INT 45
10993: PUSH
10994: LD_INT 28
10996: PUSH
10997: LD_INT 7
10999: PUSH
11000: LD_INT 27
11002: PUSH
11003: LD_INT 29
11005: PUSH
11006: EMPTY
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: IN
11018: PUSH
11019: LD_VAR 0 1
11023: PPUSH
11024: LD_INT 52
11026: PPUSH
11027: CALL_OW 321
11031: PUSH
11032: LD_INT 2
11034: EQUAL
11035: AND
11036: IFFALSE 11053
// bpoints := bpoints * 1.2 ;
11038: LD_ADDR_VAR 0 10
11042: PUSH
11043: LD_VAR 0 10
11047: PUSH
11048: LD_REAL  1.20000000000000E+0000
11051: MUL
11052: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
11053: LD_VAR 0 6
11057: PPUSH
11058: CALL_OW 264
11062: PUSH
11063: LD_INT 6
11065: PUSH
11066: LD_INT 46
11068: PUSH
11069: LD_INT 47
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: LIST
11076: IN
11077: IFFALSE 11094
// bpoints := bpoints * 1.2 ;
11079: LD_ADDR_VAR 0 10
11083: PUSH
11084: LD_VAR 0 10
11088: PUSH
11089: LD_REAL  1.20000000000000E+0000
11092: MUL
11093: ST_TO_ADDR
// end ; unit_building :
11094: GO 11108
11096: LD_INT 3
11098: DOUBLE
11099: EQUAL
11100: IFTRUE 11104
11102: GO 11107
11104: POP
// ; end ;
11105: GO 11108
11107: POP
// for j = 1 to 3 do
11108: LD_ADDR_VAR 0 7
11112: PUSH
11113: DOUBLE
11114: LD_INT 1
11116: DEC
11117: ST_TO_ADDR
11118: LD_INT 3
11120: PUSH
11121: FOR_TO
11122: IFFALSE 11175
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
11124: LD_ADDR_VAR 0 5
11128: PUSH
11129: LD_VAR 0 5
11133: PPUSH
11134: LD_VAR 0 7
11138: PPUSH
11139: LD_VAR 0 5
11143: PUSH
11144: LD_VAR 0 7
11148: ARRAY
11149: PUSH
11150: LD_VAR 0 9
11154: PUSH
11155: LD_VAR 0 7
11159: ARRAY
11160: PUSH
11161: LD_VAR 0 10
11165: MUL
11166: PLUS
11167: PPUSH
11168: CALL_OW 1
11172: ST_TO_ADDR
11173: GO 11121
11175: POP
11176: POP
// end ;
11177: GO 9656
11179: POP
11180: POP
// result := Replace ( result , 4 , tmp ) ;
11181: LD_ADDR_VAR 0 5
11185: PUSH
11186: LD_VAR 0 5
11190: PPUSH
11191: LD_INT 4
11193: PPUSH
11194: LD_VAR 0 8
11198: PPUSH
11199: CALL_OW 1
11203: ST_TO_ADDR
// end ;
11204: LD_VAR 0 5
11208: RET
// export function DangerAtRange ( unit , range ) ; begin
11209: LD_INT 0
11211: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11212: LD_ADDR_VAR 0 3
11216: PUSH
11217: LD_VAR 0 1
11221: PPUSH
11222: CALL_OW 255
11226: PPUSH
11227: LD_VAR 0 1
11231: PPUSH
11232: CALL_OW 250
11236: PPUSH
11237: LD_VAR 0 1
11241: PPUSH
11242: CALL_OW 251
11246: PPUSH
11247: LD_VAR 0 2
11251: PPUSH
11252: CALL 9508 0 4
11256: ST_TO_ADDR
// end ;
11257: LD_VAR 0 3
11261: RET
// export function DangerInArea ( side , area ) ; begin
11262: LD_INT 0
11264: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11265: LD_ADDR_VAR 0 3
11269: PUSH
11270: LD_VAR 0 2
11274: PPUSH
11275: LD_INT 81
11277: PUSH
11278: LD_VAR 0 1
11282: PUSH
11283: EMPTY
11284: LIST
11285: LIST
11286: PPUSH
11287: CALL_OW 70
11291: ST_TO_ADDR
// end ;
11292: LD_VAR 0 3
11296: RET
// export function IsExtension ( b ) ; begin
11297: LD_INT 0
11299: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11300: LD_ADDR_VAR 0 2
11304: PUSH
11305: LD_VAR 0 1
11309: PUSH
11310: LD_INT 23
11312: PUSH
11313: LD_INT 20
11315: PUSH
11316: LD_INT 22
11318: PUSH
11319: LD_INT 17
11321: PUSH
11322: LD_INT 24
11324: PUSH
11325: LD_INT 21
11327: PUSH
11328: LD_INT 19
11330: PUSH
11331: LD_INT 16
11333: PUSH
11334: LD_INT 25
11336: PUSH
11337: LD_INT 18
11339: PUSH
11340: EMPTY
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: IN
11352: ST_TO_ADDR
// end ;
11353: LD_VAR 0 2
11357: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11358: LD_INT 0
11360: PPUSH
11361: PPUSH
11362: PPUSH
// result := [ ] ;
11363: LD_ADDR_VAR 0 4
11367: PUSH
11368: EMPTY
11369: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11370: LD_ADDR_VAR 0 5
11374: PUSH
11375: LD_VAR 0 2
11379: PPUSH
11380: LD_INT 21
11382: PUSH
11383: LD_INT 3
11385: PUSH
11386: EMPTY
11387: LIST
11388: LIST
11389: PPUSH
11390: CALL_OW 70
11394: ST_TO_ADDR
// if not tmp then
11395: LD_VAR 0 5
11399: NOT
11400: IFFALSE 11404
// exit ;
11402: GO 11468
// if checkLink then
11404: LD_VAR 0 3
11408: IFFALSE 11458
// begin for i in tmp do
11410: LD_ADDR_VAR 0 6
11414: PUSH
11415: LD_VAR 0 5
11419: PUSH
11420: FOR_IN
11421: IFFALSE 11456
// if GetBase ( i ) <> base then
11423: LD_VAR 0 6
11427: PPUSH
11428: CALL_OW 274
11432: PUSH
11433: LD_VAR 0 1
11437: NONEQUAL
11438: IFFALSE 11454
// ComLinkToBase ( base , i ) ;
11440: LD_VAR 0 1
11444: PPUSH
11445: LD_VAR 0 6
11449: PPUSH
11450: CALL_OW 169
11454: GO 11420
11456: POP
11457: POP
// end ; result := tmp ;
11458: LD_ADDR_VAR 0 4
11462: PUSH
11463: LD_VAR 0 5
11467: ST_TO_ADDR
// end ;
11468: LD_VAR 0 4
11472: RET
// export function ComComplete ( units , b ) ; var i ; begin
11473: LD_INT 0
11475: PPUSH
11476: PPUSH
// if not units then
11477: LD_VAR 0 1
11481: NOT
11482: IFFALSE 11486
// exit ;
11484: GO 11576
// for i in units do
11486: LD_ADDR_VAR 0 4
11490: PUSH
11491: LD_VAR 0 1
11495: PUSH
11496: FOR_IN
11497: IFFALSE 11574
// if BuildingStatus ( b ) = bs_build then
11499: LD_VAR 0 2
11503: PPUSH
11504: CALL_OW 461
11508: PUSH
11509: LD_INT 1
11511: EQUAL
11512: IFFALSE 11572
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11514: LD_VAR 0 4
11518: PPUSH
11519: LD_STRING h
11521: PUSH
11522: LD_VAR 0 2
11526: PPUSH
11527: CALL_OW 250
11531: PUSH
11532: LD_VAR 0 2
11536: PPUSH
11537: CALL_OW 251
11541: PUSH
11542: LD_VAR 0 2
11546: PUSH
11547: LD_INT 0
11549: PUSH
11550: LD_INT 0
11552: PUSH
11553: LD_INT 0
11555: PUSH
11556: EMPTY
11557: LIST
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: LIST
11564: PUSH
11565: EMPTY
11566: LIST
11567: PPUSH
11568: CALL_OW 446
11572: GO 11496
11574: POP
11575: POP
// end ;
11576: LD_VAR 0 3
11580: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11581: LD_INT 0
11583: PPUSH
11584: PPUSH
11585: PPUSH
11586: PPUSH
11587: PPUSH
11588: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11589: LD_VAR 0 1
11593: NOT
11594: PUSH
11595: LD_VAR 0 1
11599: PPUSH
11600: CALL_OW 263
11604: PUSH
11605: LD_INT 2
11607: NONEQUAL
11608: OR
11609: IFFALSE 11613
// exit ;
11611: GO 11929
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11613: LD_ADDR_VAR 0 6
11617: PUSH
11618: LD_INT 22
11620: PUSH
11621: LD_VAR 0 1
11625: PPUSH
11626: CALL_OW 255
11630: PUSH
11631: EMPTY
11632: LIST
11633: LIST
11634: PUSH
11635: LD_INT 2
11637: PUSH
11638: LD_INT 30
11640: PUSH
11641: LD_INT 36
11643: PUSH
11644: EMPTY
11645: LIST
11646: LIST
11647: PUSH
11648: LD_INT 34
11650: PUSH
11651: LD_INT 31
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: PUSH
11658: EMPTY
11659: LIST
11660: LIST
11661: LIST
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: PPUSH
11667: CALL_OW 69
11671: ST_TO_ADDR
// if not tmp then
11672: LD_VAR 0 6
11676: NOT
11677: IFFALSE 11681
// exit ;
11679: GO 11929
// result := [ ] ;
11681: LD_ADDR_VAR 0 2
11685: PUSH
11686: EMPTY
11687: ST_TO_ADDR
// for i in tmp do
11688: LD_ADDR_VAR 0 3
11692: PUSH
11693: LD_VAR 0 6
11697: PUSH
11698: FOR_IN
11699: IFFALSE 11770
// begin t := UnitsInside ( i ) ;
11701: LD_ADDR_VAR 0 4
11705: PUSH
11706: LD_VAR 0 3
11710: PPUSH
11711: CALL_OW 313
11715: ST_TO_ADDR
// if t then
11716: LD_VAR 0 4
11720: IFFALSE 11768
// for j in t do
11722: LD_ADDR_VAR 0 7
11726: PUSH
11727: LD_VAR 0 4
11731: PUSH
11732: FOR_IN
11733: IFFALSE 11766
// result := Replace ( result , result + 1 , j ) ;
11735: LD_ADDR_VAR 0 2
11739: PUSH
11740: LD_VAR 0 2
11744: PPUSH
11745: LD_VAR 0 2
11749: PUSH
11750: LD_INT 1
11752: PLUS
11753: PPUSH
11754: LD_VAR 0 7
11758: PPUSH
11759: CALL_OW 1
11763: ST_TO_ADDR
11764: GO 11732
11766: POP
11767: POP
// end ;
11768: GO 11698
11770: POP
11771: POP
// if not result then
11772: LD_VAR 0 2
11776: NOT
11777: IFFALSE 11781
// exit ;
11779: GO 11929
// mech := result [ 1 ] ;
11781: LD_ADDR_VAR 0 5
11785: PUSH
11786: LD_VAR 0 2
11790: PUSH
11791: LD_INT 1
11793: ARRAY
11794: ST_TO_ADDR
// if result > 1 then
11795: LD_VAR 0 2
11799: PUSH
11800: LD_INT 1
11802: GREATER
11803: IFFALSE 11915
// begin for i = 2 to result do
11805: LD_ADDR_VAR 0 3
11809: PUSH
11810: DOUBLE
11811: LD_INT 2
11813: DEC
11814: ST_TO_ADDR
11815: LD_VAR 0 2
11819: PUSH
11820: FOR_TO
11821: IFFALSE 11913
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11823: LD_ADDR_VAR 0 4
11827: PUSH
11828: LD_VAR 0 2
11832: PUSH
11833: LD_VAR 0 3
11837: ARRAY
11838: PPUSH
11839: LD_INT 3
11841: PPUSH
11842: CALL_OW 259
11846: PUSH
11847: LD_VAR 0 2
11851: PUSH
11852: LD_VAR 0 3
11856: ARRAY
11857: PPUSH
11858: CALL_OW 432
11862: MINUS
11863: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11864: LD_VAR 0 4
11868: PUSH
11869: LD_VAR 0 5
11873: PPUSH
11874: LD_INT 3
11876: PPUSH
11877: CALL_OW 259
11881: PUSH
11882: LD_VAR 0 5
11886: PPUSH
11887: CALL_OW 432
11891: MINUS
11892: GREATEREQUAL
11893: IFFALSE 11911
// mech := result [ i ] ;
11895: LD_ADDR_VAR 0 5
11899: PUSH
11900: LD_VAR 0 2
11904: PUSH
11905: LD_VAR 0 3
11909: ARRAY
11910: ST_TO_ADDR
// end ;
11911: GO 11820
11913: POP
11914: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11915: LD_VAR 0 1
11919: PPUSH
11920: LD_VAR 0 5
11924: PPUSH
11925: CALL_OW 135
// end ;
11929: LD_VAR 0 2
11933: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11934: LD_INT 0
11936: PPUSH
11937: PPUSH
11938: PPUSH
11939: PPUSH
11940: PPUSH
11941: PPUSH
11942: PPUSH
11943: PPUSH
11944: PPUSH
11945: PPUSH
11946: PPUSH
11947: PPUSH
11948: PPUSH
// result := [ ] ;
11949: LD_ADDR_VAR 0 7
11953: PUSH
11954: EMPTY
11955: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11956: LD_VAR 0 1
11960: PPUSH
11961: CALL_OW 266
11965: PUSH
11966: LD_INT 0
11968: PUSH
11969: LD_INT 1
11971: PUSH
11972: EMPTY
11973: LIST
11974: LIST
11975: IN
11976: NOT
11977: IFFALSE 11981
// exit ;
11979: GO 13615
// if name then
11981: LD_VAR 0 3
11985: IFFALSE 12001
// SetBName ( base_dep , name ) ;
11987: LD_VAR 0 1
11991: PPUSH
11992: LD_VAR 0 3
11996: PPUSH
11997: CALL_OW 500
// base := GetBase ( base_dep ) ;
12001: LD_ADDR_VAR 0 15
12005: PUSH
12006: LD_VAR 0 1
12010: PPUSH
12011: CALL_OW 274
12015: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12016: LD_ADDR_VAR 0 16
12020: PUSH
12021: LD_VAR 0 1
12025: PPUSH
12026: CALL_OW 255
12030: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
12031: LD_ADDR_VAR 0 17
12035: PUSH
12036: LD_VAR 0 1
12040: PPUSH
12041: CALL_OW 248
12045: ST_TO_ADDR
// if sources then
12046: LD_VAR 0 5
12050: IFFALSE 12097
// for i = 1 to 3 do
12052: LD_ADDR_VAR 0 8
12056: PUSH
12057: DOUBLE
12058: LD_INT 1
12060: DEC
12061: ST_TO_ADDR
12062: LD_INT 3
12064: PUSH
12065: FOR_TO
12066: IFFALSE 12095
// AddResourceType ( base , i , sources [ i ] ) ;
12068: LD_VAR 0 15
12072: PPUSH
12073: LD_VAR 0 8
12077: PPUSH
12078: LD_VAR 0 5
12082: PUSH
12083: LD_VAR 0 8
12087: ARRAY
12088: PPUSH
12089: CALL_OW 276
12093: GO 12065
12095: POP
12096: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
12097: LD_ADDR_VAR 0 18
12101: PUSH
12102: LD_VAR 0 15
12106: PPUSH
12107: LD_VAR 0 2
12111: PPUSH
12112: LD_INT 1
12114: PPUSH
12115: CALL 11358 0 3
12119: ST_TO_ADDR
// InitHc ;
12120: CALL_OW 19
// InitUc ;
12124: CALL_OW 18
// uc_side := side ;
12128: LD_ADDR_OWVAR 20
12132: PUSH
12133: LD_VAR 0 16
12137: ST_TO_ADDR
// uc_nation := nation ;
12138: LD_ADDR_OWVAR 21
12142: PUSH
12143: LD_VAR 0 17
12147: ST_TO_ADDR
// if buildings then
12148: LD_VAR 0 18
12152: IFFALSE 13474
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12154: LD_ADDR_VAR 0 19
12158: PUSH
12159: LD_VAR 0 18
12163: PPUSH
12164: LD_INT 2
12166: PUSH
12167: LD_INT 30
12169: PUSH
12170: LD_INT 29
12172: PUSH
12173: EMPTY
12174: LIST
12175: LIST
12176: PUSH
12177: LD_INT 30
12179: PUSH
12180: LD_INT 30
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: LIST
12191: PPUSH
12192: CALL_OW 72
12196: ST_TO_ADDR
// if tmp then
12197: LD_VAR 0 19
12201: IFFALSE 12249
// for i in tmp do
12203: LD_ADDR_VAR 0 8
12207: PUSH
12208: LD_VAR 0 19
12212: PUSH
12213: FOR_IN
12214: IFFALSE 12247
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12216: LD_VAR 0 8
12220: PPUSH
12221: CALL_OW 250
12225: PPUSH
12226: LD_VAR 0 8
12230: PPUSH
12231: CALL_OW 251
12235: PPUSH
12236: LD_VAR 0 16
12240: PPUSH
12241: CALL_OW 441
12245: GO 12213
12247: POP
12248: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12249: LD_VAR 0 18
12253: PPUSH
12254: LD_INT 2
12256: PUSH
12257: LD_INT 30
12259: PUSH
12260: LD_INT 32
12262: PUSH
12263: EMPTY
12264: LIST
12265: LIST
12266: PUSH
12267: LD_INT 30
12269: PUSH
12270: LD_INT 33
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: PUSH
12277: EMPTY
12278: LIST
12279: LIST
12280: LIST
12281: PPUSH
12282: CALL_OW 72
12286: IFFALSE 12374
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12288: LD_ADDR_VAR 0 8
12292: PUSH
12293: LD_VAR 0 18
12297: PPUSH
12298: LD_INT 2
12300: PUSH
12301: LD_INT 30
12303: PUSH
12304: LD_INT 32
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: PUSH
12311: LD_INT 30
12313: PUSH
12314: LD_INT 33
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: PUSH
12321: EMPTY
12322: LIST
12323: LIST
12324: LIST
12325: PPUSH
12326: CALL_OW 72
12330: PUSH
12331: FOR_IN
12332: IFFALSE 12372
// begin if not GetBWeapon ( i ) then
12334: LD_VAR 0 8
12338: PPUSH
12339: CALL_OW 269
12343: NOT
12344: IFFALSE 12370
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12346: LD_VAR 0 8
12350: PPUSH
12351: LD_VAR 0 8
12355: PPUSH
12356: LD_VAR 0 2
12360: PPUSH
12361: CALL 13620 0 2
12365: PPUSH
12366: CALL_OW 431
// end ;
12370: GO 12331
12372: POP
12373: POP
// end ; for i = 1 to personel do
12374: LD_ADDR_VAR 0 8
12378: PUSH
12379: DOUBLE
12380: LD_INT 1
12382: DEC
12383: ST_TO_ADDR
12384: LD_VAR 0 6
12388: PUSH
12389: FOR_TO
12390: IFFALSE 13454
// begin if i > 4 then
12392: LD_VAR 0 8
12396: PUSH
12397: LD_INT 4
12399: GREATER
12400: IFFALSE 12404
// break ;
12402: GO 13454
// case i of 1 :
12404: LD_VAR 0 8
12408: PUSH
12409: LD_INT 1
12411: DOUBLE
12412: EQUAL
12413: IFTRUE 12417
12415: GO 12497
12417: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12418: LD_ADDR_VAR 0 12
12422: PUSH
12423: LD_VAR 0 18
12427: PPUSH
12428: LD_INT 22
12430: PUSH
12431: LD_VAR 0 16
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: PUSH
12440: LD_INT 58
12442: PUSH
12443: EMPTY
12444: LIST
12445: PUSH
12446: LD_INT 2
12448: PUSH
12449: LD_INT 30
12451: PUSH
12452: LD_INT 32
12454: PUSH
12455: EMPTY
12456: LIST
12457: LIST
12458: PUSH
12459: LD_INT 30
12461: PUSH
12462: LD_INT 4
12464: PUSH
12465: EMPTY
12466: LIST
12467: LIST
12468: PUSH
12469: LD_INT 30
12471: PUSH
12472: LD_INT 5
12474: PUSH
12475: EMPTY
12476: LIST
12477: LIST
12478: PUSH
12479: EMPTY
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: PUSH
12485: EMPTY
12486: LIST
12487: LIST
12488: LIST
12489: PPUSH
12490: CALL_OW 72
12494: ST_TO_ADDR
12495: GO 12719
12497: LD_INT 2
12499: DOUBLE
12500: EQUAL
12501: IFTRUE 12505
12503: GO 12567
12505: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12506: LD_ADDR_VAR 0 12
12510: PUSH
12511: LD_VAR 0 18
12515: PPUSH
12516: LD_INT 22
12518: PUSH
12519: LD_VAR 0 16
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: PUSH
12528: LD_INT 2
12530: PUSH
12531: LD_INT 30
12533: PUSH
12534: LD_INT 0
12536: PUSH
12537: EMPTY
12538: LIST
12539: LIST
12540: PUSH
12541: LD_INT 30
12543: PUSH
12544: LD_INT 1
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: PUSH
12551: EMPTY
12552: LIST
12553: LIST
12554: LIST
12555: PUSH
12556: EMPTY
12557: LIST
12558: LIST
12559: PPUSH
12560: CALL_OW 72
12564: ST_TO_ADDR
12565: GO 12719
12567: LD_INT 3
12569: DOUBLE
12570: EQUAL
12571: IFTRUE 12575
12573: GO 12637
12575: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12576: LD_ADDR_VAR 0 12
12580: PUSH
12581: LD_VAR 0 18
12585: PPUSH
12586: LD_INT 22
12588: PUSH
12589: LD_VAR 0 16
12593: PUSH
12594: EMPTY
12595: LIST
12596: LIST
12597: PUSH
12598: LD_INT 2
12600: PUSH
12601: LD_INT 30
12603: PUSH
12604: LD_INT 2
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: PUSH
12611: LD_INT 30
12613: PUSH
12614: LD_INT 3
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: PUSH
12621: EMPTY
12622: LIST
12623: LIST
12624: LIST
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: PPUSH
12630: CALL_OW 72
12634: ST_TO_ADDR
12635: GO 12719
12637: LD_INT 4
12639: DOUBLE
12640: EQUAL
12641: IFTRUE 12645
12643: GO 12718
12645: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12646: LD_ADDR_VAR 0 12
12650: PUSH
12651: LD_VAR 0 18
12655: PPUSH
12656: LD_INT 22
12658: PUSH
12659: LD_VAR 0 16
12663: PUSH
12664: EMPTY
12665: LIST
12666: LIST
12667: PUSH
12668: LD_INT 2
12670: PUSH
12671: LD_INT 30
12673: PUSH
12674: LD_INT 6
12676: PUSH
12677: EMPTY
12678: LIST
12679: LIST
12680: PUSH
12681: LD_INT 30
12683: PUSH
12684: LD_INT 7
12686: PUSH
12687: EMPTY
12688: LIST
12689: LIST
12690: PUSH
12691: LD_INT 30
12693: PUSH
12694: LD_INT 8
12696: PUSH
12697: EMPTY
12698: LIST
12699: LIST
12700: PUSH
12701: EMPTY
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: PUSH
12707: EMPTY
12708: LIST
12709: LIST
12710: PPUSH
12711: CALL_OW 72
12715: ST_TO_ADDR
12716: GO 12719
12718: POP
// if i = 1 then
12719: LD_VAR 0 8
12723: PUSH
12724: LD_INT 1
12726: EQUAL
12727: IFFALSE 12838
// begin tmp := [ ] ;
12729: LD_ADDR_VAR 0 19
12733: PUSH
12734: EMPTY
12735: ST_TO_ADDR
// for j in f do
12736: LD_ADDR_VAR 0 9
12740: PUSH
12741: LD_VAR 0 12
12745: PUSH
12746: FOR_IN
12747: IFFALSE 12820
// if GetBType ( j ) = b_bunker then
12749: LD_VAR 0 9
12753: PPUSH
12754: CALL_OW 266
12758: PUSH
12759: LD_INT 32
12761: EQUAL
12762: IFFALSE 12789
// tmp := Insert ( tmp , 1 , j ) else
12764: LD_ADDR_VAR 0 19
12768: PUSH
12769: LD_VAR 0 19
12773: PPUSH
12774: LD_INT 1
12776: PPUSH
12777: LD_VAR 0 9
12781: PPUSH
12782: CALL_OW 2
12786: ST_TO_ADDR
12787: GO 12818
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12789: LD_ADDR_VAR 0 19
12793: PUSH
12794: LD_VAR 0 19
12798: PPUSH
12799: LD_VAR 0 19
12803: PUSH
12804: LD_INT 1
12806: PLUS
12807: PPUSH
12808: LD_VAR 0 9
12812: PPUSH
12813: CALL_OW 2
12817: ST_TO_ADDR
12818: GO 12746
12820: POP
12821: POP
// if tmp then
12822: LD_VAR 0 19
12826: IFFALSE 12838
// f := tmp ;
12828: LD_ADDR_VAR 0 12
12832: PUSH
12833: LD_VAR 0 19
12837: ST_TO_ADDR
// end ; x := personel [ i ] ;
12838: LD_ADDR_VAR 0 13
12842: PUSH
12843: LD_VAR 0 6
12847: PUSH
12848: LD_VAR 0 8
12852: ARRAY
12853: ST_TO_ADDR
// if x = - 1 then
12854: LD_VAR 0 13
12858: PUSH
12859: LD_INT 1
12861: NEG
12862: EQUAL
12863: IFFALSE 13072
// begin for j in f do
12865: LD_ADDR_VAR 0 9
12869: PUSH
12870: LD_VAR 0 12
12874: PUSH
12875: FOR_IN
12876: IFFALSE 13068
// repeat InitHc ;
12878: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12882: LD_VAR 0 9
12886: PPUSH
12887: CALL_OW 266
12891: PUSH
12892: LD_INT 5
12894: EQUAL
12895: IFFALSE 12965
// begin if UnitsInside ( j ) < 3 then
12897: LD_VAR 0 9
12901: PPUSH
12902: CALL_OW 313
12906: PUSH
12907: LD_INT 3
12909: LESS
12910: IFFALSE 12946
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12912: LD_INT 0
12914: PPUSH
12915: LD_INT 5
12917: PUSH
12918: LD_INT 8
12920: PUSH
12921: LD_INT 9
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: LIST
12928: PUSH
12929: LD_VAR 0 17
12933: ARRAY
12934: PPUSH
12935: LD_VAR 0 4
12939: PPUSH
12940: CALL_OW 380
12944: GO 12963
// PrepareHuman ( false , i , skill ) ;
12946: LD_INT 0
12948: PPUSH
12949: LD_VAR 0 8
12953: PPUSH
12954: LD_VAR 0 4
12958: PPUSH
12959: CALL_OW 380
// end else
12963: GO 12982
// PrepareHuman ( false , i , skill ) ;
12965: LD_INT 0
12967: PPUSH
12968: LD_VAR 0 8
12972: PPUSH
12973: LD_VAR 0 4
12977: PPUSH
12978: CALL_OW 380
// un := CreateHuman ;
12982: LD_ADDR_VAR 0 14
12986: PUSH
12987: CALL_OW 44
12991: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12992: LD_ADDR_VAR 0 7
12996: PUSH
12997: LD_VAR 0 7
13001: PPUSH
13002: LD_INT 1
13004: PPUSH
13005: LD_VAR 0 14
13009: PPUSH
13010: CALL_OW 2
13014: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13015: LD_VAR 0 14
13019: PPUSH
13020: LD_VAR 0 9
13024: PPUSH
13025: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13029: LD_VAR 0 9
13033: PPUSH
13034: CALL_OW 313
13038: PUSH
13039: LD_INT 6
13041: EQUAL
13042: PUSH
13043: LD_VAR 0 9
13047: PPUSH
13048: CALL_OW 266
13052: PUSH
13053: LD_INT 32
13055: PUSH
13056: LD_INT 31
13058: PUSH
13059: EMPTY
13060: LIST
13061: LIST
13062: IN
13063: OR
13064: IFFALSE 12878
13066: GO 12875
13068: POP
13069: POP
// end else
13070: GO 13452
// for j = 1 to x do
13072: LD_ADDR_VAR 0 9
13076: PUSH
13077: DOUBLE
13078: LD_INT 1
13080: DEC
13081: ST_TO_ADDR
13082: LD_VAR 0 13
13086: PUSH
13087: FOR_TO
13088: IFFALSE 13450
// begin InitHc ;
13090: CALL_OW 19
// if not f then
13094: LD_VAR 0 12
13098: NOT
13099: IFFALSE 13188
// begin PrepareHuman ( false , i , skill ) ;
13101: LD_INT 0
13103: PPUSH
13104: LD_VAR 0 8
13108: PPUSH
13109: LD_VAR 0 4
13113: PPUSH
13114: CALL_OW 380
// un := CreateHuman ;
13118: LD_ADDR_VAR 0 14
13122: PUSH
13123: CALL_OW 44
13127: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13128: LD_ADDR_VAR 0 7
13132: PUSH
13133: LD_VAR 0 7
13137: PPUSH
13138: LD_INT 1
13140: PPUSH
13141: LD_VAR 0 14
13145: PPUSH
13146: CALL_OW 2
13150: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13151: LD_VAR 0 14
13155: PPUSH
13156: LD_VAR 0 1
13160: PPUSH
13161: CALL_OW 250
13165: PPUSH
13166: LD_VAR 0 1
13170: PPUSH
13171: CALL_OW 251
13175: PPUSH
13176: LD_INT 10
13178: PPUSH
13179: LD_INT 0
13181: PPUSH
13182: CALL_OW 50
// continue ;
13186: GO 13087
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13188: LD_VAR 0 12
13192: PUSH
13193: LD_INT 1
13195: ARRAY
13196: PPUSH
13197: CALL_OW 313
13201: PUSH
13202: LD_VAR 0 12
13206: PUSH
13207: LD_INT 1
13209: ARRAY
13210: PPUSH
13211: CALL_OW 266
13215: PUSH
13216: LD_INT 32
13218: PUSH
13219: LD_INT 31
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: IN
13226: AND
13227: PUSH
13228: LD_VAR 0 12
13232: PUSH
13233: LD_INT 1
13235: ARRAY
13236: PPUSH
13237: CALL_OW 313
13241: PUSH
13242: LD_INT 6
13244: EQUAL
13245: OR
13246: IFFALSE 13266
// f := Delete ( f , 1 ) ;
13248: LD_ADDR_VAR 0 12
13252: PUSH
13253: LD_VAR 0 12
13257: PPUSH
13258: LD_INT 1
13260: PPUSH
13261: CALL_OW 3
13265: ST_TO_ADDR
// if not f then
13266: LD_VAR 0 12
13270: NOT
13271: IFFALSE 13289
// begin x := x + 2 ;
13273: LD_ADDR_VAR 0 13
13277: PUSH
13278: LD_VAR 0 13
13282: PUSH
13283: LD_INT 2
13285: PLUS
13286: ST_TO_ADDR
// continue ;
13287: GO 13087
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13289: LD_VAR 0 12
13293: PUSH
13294: LD_INT 1
13296: ARRAY
13297: PPUSH
13298: CALL_OW 266
13302: PUSH
13303: LD_INT 5
13305: EQUAL
13306: IFFALSE 13380
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13308: LD_VAR 0 12
13312: PUSH
13313: LD_INT 1
13315: ARRAY
13316: PPUSH
13317: CALL_OW 313
13321: PUSH
13322: LD_INT 3
13324: LESS
13325: IFFALSE 13361
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13327: LD_INT 0
13329: PPUSH
13330: LD_INT 5
13332: PUSH
13333: LD_INT 8
13335: PUSH
13336: LD_INT 9
13338: PUSH
13339: EMPTY
13340: LIST
13341: LIST
13342: LIST
13343: PUSH
13344: LD_VAR 0 17
13348: ARRAY
13349: PPUSH
13350: LD_VAR 0 4
13354: PPUSH
13355: CALL_OW 380
13359: GO 13378
// PrepareHuman ( false , i , skill ) ;
13361: LD_INT 0
13363: PPUSH
13364: LD_VAR 0 8
13368: PPUSH
13369: LD_VAR 0 4
13373: PPUSH
13374: CALL_OW 380
// end else
13378: GO 13397
// PrepareHuman ( false , i , skill ) ;
13380: LD_INT 0
13382: PPUSH
13383: LD_VAR 0 8
13387: PPUSH
13388: LD_VAR 0 4
13392: PPUSH
13393: CALL_OW 380
// un := CreateHuman ;
13397: LD_ADDR_VAR 0 14
13401: PUSH
13402: CALL_OW 44
13406: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13407: LD_ADDR_VAR 0 7
13411: PUSH
13412: LD_VAR 0 7
13416: PPUSH
13417: LD_INT 1
13419: PPUSH
13420: LD_VAR 0 14
13424: PPUSH
13425: CALL_OW 2
13429: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13430: LD_VAR 0 14
13434: PPUSH
13435: LD_VAR 0 12
13439: PUSH
13440: LD_INT 1
13442: ARRAY
13443: PPUSH
13444: CALL_OW 52
// end ;
13448: GO 13087
13450: POP
13451: POP
// end ;
13452: GO 12389
13454: POP
13455: POP
// result := result ^ buildings ;
13456: LD_ADDR_VAR 0 7
13460: PUSH
13461: LD_VAR 0 7
13465: PUSH
13466: LD_VAR 0 18
13470: ADD
13471: ST_TO_ADDR
// end else
13472: GO 13615
// begin for i = 1 to personel do
13474: LD_ADDR_VAR 0 8
13478: PUSH
13479: DOUBLE
13480: LD_INT 1
13482: DEC
13483: ST_TO_ADDR
13484: LD_VAR 0 6
13488: PUSH
13489: FOR_TO
13490: IFFALSE 13613
// begin if i > 4 then
13492: LD_VAR 0 8
13496: PUSH
13497: LD_INT 4
13499: GREATER
13500: IFFALSE 13504
// break ;
13502: GO 13613
// x := personel [ i ] ;
13504: LD_ADDR_VAR 0 13
13508: PUSH
13509: LD_VAR 0 6
13513: PUSH
13514: LD_VAR 0 8
13518: ARRAY
13519: ST_TO_ADDR
// if x = - 1 then
13520: LD_VAR 0 13
13524: PUSH
13525: LD_INT 1
13527: NEG
13528: EQUAL
13529: IFFALSE 13533
// continue ;
13531: GO 13489
// PrepareHuman ( false , i , skill ) ;
13533: LD_INT 0
13535: PPUSH
13536: LD_VAR 0 8
13540: PPUSH
13541: LD_VAR 0 4
13545: PPUSH
13546: CALL_OW 380
// un := CreateHuman ;
13550: LD_ADDR_VAR 0 14
13554: PUSH
13555: CALL_OW 44
13559: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13560: LD_VAR 0 14
13564: PPUSH
13565: LD_VAR 0 1
13569: PPUSH
13570: CALL_OW 250
13574: PPUSH
13575: LD_VAR 0 1
13579: PPUSH
13580: CALL_OW 251
13584: PPUSH
13585: LD_INT 10
13587: PPUSH
13588: LD_INT 0
13590: PPUSH
13591: CALL_OW 50
// result := result ^ un ;
13595: LD_ADDR_VAR 0 7
13599: PUSH
13600: LD_VAR 0 7
13604: PUSH
13605: LD_VAR 0 14
13609: ADD
13610: ST_TO_ADDR
// end ;
13611: GO 13489
13613: POP
13614: POP
// end ; end ;
13615: LD_VAR 0 7
13619: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13620: LD_INT 0
13622: PPUSH
13623: PPUSH
13624: PPUSH
13625: PPUSH
13626: PPUSH
13627: PPUSH
13628: PPUSH
13629: PPUSH
13630: PPUSH
13631: PPUSH
13632: PPUSH
13633: PPUSH
13634: PPUSH
13635: PPUSH
13636: PPUSH
13637: PPUSH
// result := false ;
13638: LD_ADDR_VAR 0 3
13642: PUSH
13643: LD_INT 0
13645: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13646: LD_VAR 0 1
13650: NOT
13651: PUSH
13652: LD_VAR 0 1
13656: PPUSH
13657: CALL_OW 266
13661: PUSH
13662: LD_INT 32
13664: PUSH
13665: LD_INT 33
13667: PUSH
13668: EMPTY
13669: LIST
13670: LIST
13671: IN
13672: NOT
13673: OR
13674: IFFALSE 13678
// exit ;
13676: GO 14787
// nat := GetNation ( tower ) ;
13678: LD_ADDR_VAR 0 12
13682: PUSH
13683: LD_VAR 0 1
13687: PPUSH
13688: CALL_OW 248
13692: ST_TO_ADDR
// side := GetSide ( tower ) ;
13693: LD_ADDR_VAR 0 16
13697: PUSH
13698: LD_VAR 0 1
13702: PPUSH
13703: CALL_OW 255
13707: ST_TO_ADDR
// x := GetX ( tower ) ;
13708: LD_ADDR_VAR 0 10
13712: PUSH
13713: LD_VAR 0 1
13717: PPUSH
13718: CALL_OW 250
13722: ST_TO_ADDR
// y := GetY ( tower ) ;
13723: LD_ADDR_VAR 0 11
13727: PUSH
13728: LD_VAR 0 1
13732: PPUSH
13733: CALL_OW 251
13737: ST_TO_ADDR
// if not x or not y then
13738: LD_VAR 0 10
13742: NOT
13743: PUSH
13744: LD_VAR 0 11
13748: NOT
13749: OR
13750: IFFALSE 13754
// exit ;
13752: GO 14787
// weapon := 0 ;
13754: LD_ADDR_VAR 0 18
13758: PUSH
13759: LD_INT 0
13761: ST_TO_ADDR
// fac_list := [ ] ;
13762: LD_ADDR_VAR 0 17
13766: PUSH
13767: EMPTY
13768: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13769: LD_ADDR_VAR 0 6
13773: PUSH
13774: LD_VAR 0 1
13778: PPUSH
13779: CALL_OW 274
13783: PPUSH
13784: LD_VAR 0 2
13788: PPUSH
13789: LD_INT 0
13791: PPUSH
13792: CALL 11358 0 3
13796: PPUSH
13797: LD_INT 30
13799: PUSH
13800: LD_INT 3
13802: PUSH
13803: EMPTY
13804: LIST
13805: LIST
13806: PPUSH
13807: CALL_OW 72
13811: ST_TO_ADDR
// if not factories then
13812: LD_VAR 0 6
13816: NOT
13817: IFFALSE 13821
// exit ;
13819: GO 14787
// for i in factories do
13821: LD_ADDR_VAR 0 8
13825: PUSH
13826: LD_VAR 0 6
13830: PUSH
13831: FOR_IN
13832: IFFALSE 13857
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13834: LD_ADDR_VAR 0 17
13838: PUSH
13839: LD_VAR 0 17
13843: PUSH
13844: LD_VAR 0 8
13848: PPUSH
13849: CALL_OW 478
13853: UNION
13854: ST_TO_ADDR
13855: GO 13831
13857: POP
13858: POP
// if not fac_list then
13859: LD_VAR 0 17
13863: NOT
13864: IFFALSE 13868
// exit ;
13866: GO 14787
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13868: LD_ADDR_VAR 0 5
13872: PUSH
13873: LD_INT 4
13875: PUSH
13876: LD_INT 5
13878: PUSH
13879: LD_INT 9
13881: PUSH
13882: LD_INT 10
13884: PUSH
13885: LD_INT 6
13887: PUSH
13888: LD_INT 7
13890: PUSH
13891: LD_INT 11
13893: PUSH
13894: EMPTY
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: PUSH
13903: LD_INT 27
13905: PUSH
13906: LD_INT 28
13908: PUSH
13909: LD_INT 26
13911: PUSH
13912: LD_INT 30
13914: PUSH
13915: EMPTY
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: PUSH
13921: LD_INT 43
13923: PUSH
13924: LD_INT 44
13926: PUSH
13927: LD_INT 46
13929: PUSH
13930: LD_INT 45
13932: PUSH
13933: LD_INT 47
13935: PUSH
13936: LD_INT 49
13938: PUSH
13939: EMPTY
13940: LIST
13941: LIST
13942: LIST
13943: LIST
13944: LIST
13945: LIST
13946: PUSH
13947: EMPTY
13948: LIST
13949: LIST
13950: LIST
13951: PUSH
13952: LD_VAR 0 12
13956: ARRAY
13957: ST_TO_ADDR
// list := list isect fac_list ;
13958: LD_ADDR_VAR 0 5
13962: PUSH
13963: LD_VAR 0 5
13967: PUSH
13968: LD_VAR 0 17
13972: ISECT
13973: ST_TO_ADDR
// if not list then
13974: LD_VAR 0 5
13978: NOT
13979: IFFALSE 13983
// exit ;
13981: GO 14787
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13983: LD_VAR 0 12
13987: PUSH
13988: LD_INT 3
13990: EQUAL
13991: PUSH
13992: LD_INT 49
13994: PUSH
13995: LD_VAR 0 5
13999: IN
14000: AND
14001: PUSH
14002: LD_INT 31
14004: PPUSH
14005: LD_VAR 0 16
14009: PPUSH
14010: CALL_OW 321
14014: PUSH
14015: LD_INT 2
14017: EQUAL
14018: AND
14019: IFFALSE 14079
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
14021: LD_INT 22
14023: PUSH
14024: LD_VAR 0 16
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: PUSH
14033: LD_INT 35
14035: PUSH
14036: LD_INT 49
14038: PUSH
14039: EMPTY
14040: LIST
14041: LIST
14042: PUSH
14043: LD_INT 91
14045: PUSH
14046: LD_VAR 0 1
14050: PUSH
14051: LD_INT 10
14053: PUSH
14054: EMPTY
14055: LIST
14056: LIST
14057: LIST
14058: PUSH
14059: EMPTY
14060: LIST
14061: LIST
14062: LIST
14063: PPUSH
14064: CALL_OW 69
14068: NOT
14069: IFFALSE 14079
// weapon := ru_time_lapser ;
14071: LD_ADDR_VAR 0 18
14075: PUSH
14076: LD_INT 49
14078: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
14079: LD_VAR 0 12
14083: PUSH
14084: LD_INT 1
14086: PUSH
14087: LD_INT 2
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: IN
14094: PUSH
14095: LD_INT 11
14097: PUSH
14098: LD_VAR 0 5
14102: IN
14103: PUSH
14104: LD_INT 30
14106: PUSH
14107: LD_VAR 0 5
14111: IN
14112: OR
14113: AND
14114: PUSH
14115: LD_INT 6
14117: PPUSH
14118: LD_VAR 0 16
14122: PPUSH
14123: CALL_OW 321
14127: PUSH
14128: LD_INT 2
14130: EQUAL
14131: AND
14132: IFFALSE 14297
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
14134: LD_INT 22
14136: PUSH
14137: LD_VAR 0 16
14141: PUSH
14142: EMPTY
14143: LIST
14144: LIST
14145: PUSH
14146: LD_INT 2
14148: PUSH
14149: LD_INT 35
14151: PUSH
14152: LD_INT 11
14154: PUSH
14155: EMPTY
14156: LIST
14157: LIST
14158: PUSH
14159: LD_INT 35
14161: PUSH
14162: LD_INT 30
14164: PUSH
14165: EMPTY
14166: LIST
14167: LIST
14168: PUSH
14169: EMPTY
14170: LIST
14171: LIST
14172: LIST
14173: PUSH
14174: LD_INT 91
14176: PUSH
14177: LD_VAR 0 1
14181: PUSH
14182: LD_INT 18
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: LIST
14189: PUSH
14190: EMPTY
14191: LIST
14192: LIST
14193: LIST
14194: PPUSH
14195: CALL_OW 69
14199: NOT
14200: PUSH
14201: LD_INT 22
14203: PUSH
14204: LD_VAR 0 16
14208: PUSH
14209: EMPTY
14210: LIST
14211: LIST
14212: PUSH
14213: LD_INT 2
14215: PUSH
14216: LD_INT 30
14218: PUSH
14219: LD_INT 32
14221: PUSH
14222: EMPTY
14223: LIST
14224: LIST
14225: PUSH
14226: LD_INT 30
14228: PUSH
14229: LD_INT 33
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: PUSH
14236: EMPTY
14237: LIST
14238: LIST
14239: LIST
14240: PUSH
14241: LD_INT 91
14243: PUSH
14244: LD_VAR 0 1
14248: PUSH
14249: LD_INT 12
14251: PUSH
14252: EMPTY
14253: LIST
14254: LIST
14255: LIST
14256: PUSH
14257: EMPTY
14258: LIST
14259: LIST
14260: LIST
14261: PUSH
14262: EMPTY
14263: LIST
14264: PPUSH
14265: CALL_OW 69
14269: PUSH
14270: LD_INT 2
14272: GREATER
14273: AND
14274: IFFALSE 14297
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14276: LD_ADDR_VAR 0 18
14280: PUSH
14281: LD_INT 11
14283: PUSH
14284: LD_INT 30
14286: PUSH
14287: EMPTY
14288: LIST
14289: LIST
14290: PUSH
14291: LD_VAR 0 12
14295: ARRAY
14296: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14297: LD_VAR 0 18
14301: NOT
14302: PUSH
14303: LD_INT 40
14305: PPUSH
14306: LD_VAR 0 16
14310: PPUSH
14311: CALL_OW 321
14315: PUSH
14316: LD_INT 2
14318: EQUAL
14319: AND
14320: PUSH
14321: LD_INT 7
14323: PUSH
14324: LD_VAR 0 5
14328: IN
14329: PUSH
14330: LD_INT 28
14332: PUSH
14333: LD_VAR 0 5
14337: IN
14338: OR
14339: PUSH
14340: LD_INT 45
14342: PUSH
14343: LD_VAR 0 5
14347: IN
14348: OR
14349: AND
14350: IFFALSE 14604
// begin hex := GetHexInfo ( x , y ) ;
14352: LD_ADDR_VAR 0 4
14356: PUSH
14357: LD_VAR 0 10
14361: PPUSH
14362: LD_VAR 0 11
14366: PPUSH
14367: CALL_OW 546
14371: ST_TO_ADDR
// if hex [ 1 ] then
14372: LD_VAR 0 4
14376: PUSH
14377: LD_INT 1
14379: ARRAY
14380: IFFALSE 14384
// exit ;
14382: GO 14787
// height := hex [ 2 ] ;
14384: LD_ADDR_VAR 0 15
14388: PUSH
14389: LD_VAR 0 4
14393: PUSH
14394: LD_INT 2
14396: ARRAY
14397: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14398: LD_ADDR_VAR 0 14
14402: PUSH
14403: LD_INT 0
14405: PUSH
14406: LD_INT 2
14408: PUSH
14409: LD_INT 3
14411: PUSH
14412: LD_INT 5
14414: PUSH
14415: EMPTY
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: ST_TO_ADDR
// for i in tmp do
14421: LD_ADDR_VAR 0 8
14425: PUSH
14426: LD_VAR 0 14
14430: PUSH
14431: FOR_IN
14432: IFFALSE 14602
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14434: LD_ADDR_VAR 0 9
14438: PUSH
14439: LD_VAR 0 10
14443: PPUSH
14444: LD_VAR 0 8
14448: PPUSH
14449: LD_INT 5
14451: PPUSH
14452: CALL_OW 272
14456: PUSH
14457: LD_VAR 0 11
14461: PPUSH
14462: LD_VAR 0 8
14466: PPUSH
14467: LD_INT 5
14469: PPUSH
14470: CALL_OW 273
14474: PUSH
14475: EMPTY
14476: LIST
14477: LIST
14478: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14479: LD_VAR 0 9
14483: PUSH
14484: LD_INT 1
14486: ARRAY
14487: PPUSH
14488: LD_VAR 0 9
14492: PUSH
14493: LD_INT 2
14495: ARRAY
14496: PPUSH
14497: CALL_OW 488
14501: IFFALSE 14600
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14503: LD_ADDR_VAR 0 4
14507: PUSH
14508: LD_VAR 0 9
14512: PUSH
14513: LD_INT 1
14515: ARRAY
14516: PPUSH
14517: LD_VAR 0 9
14521: PUSH
14522: LD_INT 2
14524: ARRAY
14525: PPUSH
14526: CALL_OW 546
14530: ST_TO_ADDR
// if hex [ 1 ] then
14531: LD_VAR 0 4
14535: PUSH
14536: LD_INT 1
14538: ARRAY
14539: IFFALSE 14543
// continue ;
14541: GO 14431
// h := hex [ 2 ] ;
14543: LD_ADDR_VAR 0 13
14547: PUSH
14548: LD_VAR 0 4
14552: PUSH
14553: LD_INT 2
14555: ARRAY
14556: ST_TO_ADDR
// if h + 7 < height then
14557: LD_VAR 0 13
14561: PUSH
14562: LD_INT 7
14564: PLUS
14565: PUSH
14566: LD_VAR 0 15
14570: LESS
14571: IFFALSE 14600
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14573: LD_ADDR_VAR 0 18
14577: PUSH
14578: LD_INT 7
14580: PUSH
14581: LD_INT 28
14583: PUSH
14584: LD_INT 45
14586: PUSH
14587: EMPTY
14588: LIST
14589: LIST
14590: LIST
14591: PUSH
14592: LD_VAR 0 12
14596: ARRAY
14597: ST_TO_ADDR
// break ;
14598: GO 14602
// end ; end ; end ;
14600: GO 14431
14602: POP
14603: POP
// end ; if not weapon then
14604: LD_VAR 0 18
14608: NOT
14609: IFFALSE 14669
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14611: LD_ADDR_VAR 0 5
14615: PUSH
14616: LD_VAR 0 5
14620: PUSH
14621: LD_INT 11
14623: PUSH
14624: LD_INT 30
14626: PUSH
14627: LD_INT 49
14629: PUSH
14630: EMPTY
14631: LIST
14632: LIST
14633: LIST
14634: DIFF
14635: ST_TO_ADDR
// if not list then
14636: LD_VAR 0 5
14640: NOT
14641: IFFALSE 14645
// exit ;
14643: GO 14787
// weapon := list [ rand ( 1 , list ) ] ;
14645: LD_ADDR_VAR 0 18
14649: PUSH
14650: LD_VAR 0 5
14654: PUSH
14655: LD_INT 1
14657: PPUSH
14658: LD_VAR 0 5
14662: PPUSH
14663: CALL_OW 12
14667: ARRAY
14668: ST_TO_ADDR
// end ; if weapon then
14669: LD_VAR 0 18
14673: IFFALSE 14787
// begin tmp := CostOfWeapon ( weapon ) ;
14675: LD_ADDR_VAR 0 14
14679: PUSH
14680: LD_VAR 0 18
14684: PPUSH
14685: CALL_OW 451
14689: ST_TO_ADDR
// j := GetBase ( tower ) ;
14690: LD_ADDR_VAR 0 9
14694: PUSH
14695: LD_VAR 0 1
14699: PPUSH
14700: CALL_OW 274
14704: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14705: LD_VAR 0 9
14709: PPUSH
14710: LD_INT 1
14712: PPUSH
14713: CALL_OW 275
14717: PUSH
14718: LD_VAR 0 14
14722: PUSH
14723: LD_INT 1
14725: ARRAY
14726: GREATEREQUAL
14727: PUSH
14728: LD_VAR 0 9
14732: PPUSH
14733: LD_INT 2
14735: PPUSH
14736: CALL_OW 275
14740: PUSH
14741: LD_VAR 0 14
14745: PUSH
14746: LD_INT 2
14748: ARRAY
14749: GREATEREQUAL
14750: AND
14751: PUSH
14752: LD_VAR 0 9
14756: PPUSH
14757: LD_INT 3
14759: PPUSH
14760: CALL_OW 275
14764: PUSH
14765: LD_VAR 0 14
14769: PUSH
14770: LD_INT 3
14772: ARRAY
14773: GREATEREQUAL
14774: AND
14775: IFFALSE 14787
// result := weapon ;
14777: LD_ADDR_VAR 0 3
14781: PUSH
14782: LD_VAR 0 18
14786: ST_TO_ADDR
// end ; end ;
14787: LD_VAR 0 3
14791: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14792: LD_INT 0
14794: PPUSH
14795: PPUSH
// result := true ;
14796: LD_ADDR_VAR 0 3
14800: PUSH
14801: LD_INT 1
14803: ST_TO_ADDR
// if array1 = array2 then
14804: LD_VAR 0 1
14808: PUSH
14809: LD_VAR 0 2
14813: EQUAL
14814: IFFALSE 14874
// begin for i = 1 to array1 do
14816: LD_ADDR_VAR 0 4
14820: PUSH
14821: DOUBLE
14822: LD_INT 1
14824: DEC
14825: ST_TO_ADDR
14826: LD_VAR 0 1
14830: PUSH
14831: FOR_TO
14832: IFFALSE 14870
// if array1 [ i ] <> array2 [ i ] then
14834: LD_VAR 0 1
14838: PUSH
14839: LD_VAR 0 4
14843: ARRAY
14844: PUSH
14845: LD_VAR 0 2
14849: PUSH
14850: LD_VAR 0 4
14854: ARRAY
14855: NONEQUAL
14856: IFFALSE 14868
// begin result := false ;
14858: LD_ADDR_VAR 0 3
14862: PUSH
14863: LD_INT 0
14865: ST_TO_ADDR
// break ;
14866: GO 14870
// end ;
14868: GO 14831
14870: POP
14871: POP
// end else
14872: GO 14882
// result := false ;
14874: LD_ADDR_VAR 0 3
14878: PUSH
14879: LD_INT 0
14881: ST_TO_ADDR
// end ;
14882: LD_VAR 0 3
14886: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14887: LD_INT 0
14889: PPUSH
14890: PPUSH
// if not array1 or not array2 then
14891: LD_VAR 0 1
14895: NOT
14896: PUSH
14897: LD_VAR 0 2
14901: NOT
14902: OR
14903: IFFALSE 14907
// exit ;
14905: GO 14971
// result := true ;
14907: LD_ADDR_VAR 0 3
14911: PUSH
14912: LD_INT 1
14914: ST_TO_ADDR
// for i = 1 to array1 do
14915: LD_ADDR_VAR 0 4
14919: PUSH
14920: DOUBLE
14921: LD_INT 1
14923: DEC
14924: ST_TO_ADDR
14925: LD_VAR 0 1
14929: PUSH
14930: FOR_TO
14931: IFFALSE 14969
// if array1 [ i ] <> array2 [ i ] then
14933: LD_VAR 0 1
14937: PUSH
14938: LD_VAR 0 4
14942: ARRAY
14943: PUSH
14944: LD_VAR 0 2
14948: PUSH
14949: LD_VAR 0 4
14953: ARRAY
14954: NONEQUAL
14955: IFFALSE 14967
// begin result := false ;
14957: LD_ADDR_VAR 0 3
14961: PUSH
14962: LD_INT 0
14964: ST_TO_ADDR
// break ;
14965: GO 14969
// end ;
14967: GO 14930
14969: POP
14970: POP
// end ;
14971: LD_VAR 0 3
14975: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14976: LD_INT 0
14978: PPUSH
14979: PPUSH
14980: PPUSH
// pom := GetBase ( fac ) ;
14981: LD_ADDR_VAR 0 5
14985: PUSH
14986: LD_VAR 0 1
14990: PPUSH
14991: CALL_OW 274
14995: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14996: LD_ADDR_VAR 0 4
15000: PUSH
15001: LD_VAR 0 2
15005: PUSH
15006: LD_INT 1
15008: ARRAY
15009: PPUSH
15010: LD_VAR 0 2
15014: PUSH
15015: LD_INT 2
15017: ARRAY
15018: PPUSH
15019: LD_VAR 0 2
15023: PUSH
15024: LD_INT 3
15026: ARRAY
15027: PPUSH
15028: LD_VAR 0 2
15032: PUSH
15033: LD_INT 4
15035: ARRAY
15036: PPUSH
15037: CALL_OW 449
15041: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15042: LD_ADDR_VAR 0 3
15046: PUSH
15047: LD_VAR 0 5
15051: PPUSH
15052: LD_INT 1
15054: PPUSH
15055: CALL_OW 275
15059: PUSH
15060: LD_VAR 0 4
15064: PUSH
15065: LD_INT 1
15067: ARRAY
15068: GREATEREQUAL
15069: PUSH
15070: LD_VAR 0 5
15074: PPUSH
15075: LD_INT 2
15077: PPUSH
15078: CALL_OW 275
15082: PUSH
15083: LD_VAR 0 4
15087: PUSH
15088: LD_INT 2
15090: ARRAY
15091: GREATEREQUAL
15092: AND
15093: PUSH
15094: LD_VAR 0 5
15098: PPUSH
15099: LD_INT 3
15101: PPUSH
15102: CALL_OW 275
15106: PUSH
15107: LD_VAR 0 4
15111: PUSH
15112: LD_INT 3
15114: ARRAY
15115: GREATEREQUAL
15116: AND
15117: ST_TO_ADDR
// end ;
15118: LD_VAR 0 3
15122: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
15123: LD_INT 0
15125: PPUSH
15126: PPUSH
15127: PPUSH
15128: PPUSH
// pom := GetBase ( building ) ;
15129: LD_ADDR_VAR 0 3
15133: PUSH
15134: LD_VAR 0 1
15138: PPUSH
15139: CALL_OW 274
15143: ST_TO_ADDR
// if not pom then
15144: LD_VAR 0 3
15148: NOT
15149: IFFALSE 15153
// exit ;
15151: GO 15323
// btype := GetBType ( building ) ;
15153: LD_ADDR_VAR 0 5
15157: PUSH
15158: LD_VAR 0 1
15162: PPUSH
15163: CALL_OW 266
15167: ST_TO_ADDR
// if btype = b_armoury then
15168: LD_VAR 0 5
15172: PUSH
15173: LD_INT 4
15175: EQUAL
15176: IFFALSE 15186
// btype := b_barracks ;
15178: LD_ADDR_VAR 0 5
15182: PUSH
15183: LD_INT 5
15185: ST_TO_ADDR
// if btype = b_depot then
15186: LD_VAR 0 5
15190: PUSH
15191: LD_INT 0
15193: EQUAL
15194: IFFALSE 15204
// btype := b_warehouse ;
15196: LD_ADDR_VAR 0 5
15200: PUSH
15201: LD_INT 1
15203: ST_TO_ADDR
// if btype = b_workshop then
15204: LD_VAR 0 5
15208: PUSH
15209: LD_INT 2
15211: EQUAL
15212: IFFALSE 15222
// btype := b_factory ;
15214: LD_ADDR_VAR 0 5
15218: PUSH
15219: LD_INT 3
15221: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15222: LD_ADDR_VAR 0 4
15226: PUSH
15227: LD_VAR 0 5
15231: PPUSH
15232: LD_VAR 0 1
15236: PPUSH
15237: CALL_OW 248
15241: PPUSH
15242: CALL_OW 450
15246: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15247: LD_ADDR_VAR 0 2
15251: PUSH
15252: LD_VAR 0 3
15256: PPUSH
15257: LD_INT 1
15259: PPUSH
15260: CALL_OW 275
15264: PUSH
15265: LD_VAR 0 4
15269: PUSH
15270: LD_INT 1
15272: ARRAY
15273: GREATEREQUAL
15274: PUSH
15275: LD_VAR 0 3
15279: PPUSH
15280: LD_INT 2
15282: PPUSH
15283: CALL_OW 275
15287: PUSH
15288: LD_VAR 0 4
15292: PUSH
15293: LD_INT 2
15295: ARRAY
15296: GREATEREQUAL
15297: AND
15298: PUSH
15299: LD_VAR 0 3
15303: PPUSH
15304: LD_INT 3
15306: PPUSH
15307: CALL_OW 275
15311: PUSH
15312: LD_VAR 0 4
15316: PUSH
15317: LD_INT 3
15319: ARRAY
15320: GREATEREQUAL
15321: AND
15322: ST_TO_ADDR
// end ;
15323: LD_VAR 0 2
15327: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15328: LD_INT 0
15330: PPUSH
15331: PPUSH
15332: PPUSH
// pom := GetBase ( building ) ;
15333: LD_ADDR_VAR 0 4
15337: PUSH
15338: LD_VAR 0 1
15342: PPUSH
15343: CALL_OW 274
15347: ST_TO_ADDR
// if not pom then
15348: LD_VAR 0 4
15352: NOT
15353: IFFALSE 15357
// exit ;
15355: GO 15458
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15357: LD_ADDR_VAR 0 5
15361: PUSH
15362: LD_VAR 0 2
15366: PPUSH
15367: LD_VAR 0 1
15371: PPUSH
15372: CALL_OW 248
15376: PPUSH
15377: CALL_OW 450
15381: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15382: LD_ADDR_VAR 0 3
15386: PUSH
15387: LD_VAR 0 4
15391: PPUSH
15392: LD_INT 1
15394: PPUSH
15395: CALL_OW 275
15399: PUSH
15400: LD_VAR 0 5
15404: PUSH
15405: LD_INT 1
15407: ARRAY
15408: GREATEREQUAL
15409: PUSH
15410: LD_VAR 0 4
15414: PPUSH
15415: LD_INT 2
15417: PPUSH
15418: CALL_OW 275
15422: PUSH
15423: LD_VAR 0 5
15427: PUSH
15428: LD_INT 2
15430: ARRAY
15431: GREATEREQUAL
15432: AND
15433: PUSH
15434: LD_VAR 0 4
15438: PPUSH
15439: LD_INT 3
15441: PPUSH
15442: CALL_OW 275
15446: PUSH
15447: LD_VAR 0 5
15451: PUSH
15452: LD_INT 3
15454: ARRAY
15455: GREATEREQUAL
15456: AND
15457: ST_TO_ADDR
// end ;
15458: LD_VAR 0 3
15462: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15463: LD_INT 0
15465: PPUSH
15466: PPUSH
15467: PPUSH
15468: PPUSH
15469: PPUSH
15470: PPUSH
15471: PPUSH
15472: PPUSH
15473: PPUSH
15474: PPUSH
15475: PPUSH
// result := false ;
15476: LD_ADDR_VAR 0 8
15480: PUSH
15481: LD_INT 0
15483: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15484: LD_VAR 0 5
15488: NOT
15489: PUSH
15490: LD_VAR 0 1
15494: NOT
15495: OR
15496: PUSH
15497: LD_VAR 0 2
15501: NOT
15502: OR
15503: PUSH
15504: LD_VAR 0 3
15508: NOT
15509: OR
15510: IFFALSE 15514
// exit ;
15512: GO 16328
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15514: LD_ADDR_VAR 0 14
15518: PUSH
15519: LD_VAR 0 1
15523: PPUSH
15524: LD_VAR 0 2
15528: PPUSH
15529: LD_VAR 0 3
15533: PPUSH
15534: LD_VAR 0 4
15538: PPUSH
15539: LD_VAR 0 5
15543: PUSH
15544: LD_INT 1
15546: ARRAY
15547: PPUSH
15548: CALL_OW 248
15552: PPUSH
15553: LD_INT 0
15555: PPUSH
15556: CALL 17561 0 6
15560: ST_TO_ADDR
// if not hexes then
15561: LD_VAR 0 14
15565: NOT
15566: IFFALSE 15570
// exit ;
15568: GO 16328
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15570: LD_ADDR_VAR 0 17
15574: PUSH
15575: LD_VAR 0 5
15579: PPUSH
15580: LD_INT 22
15582: PUSH
15583: LD_VAR 0 13
15587: PPUSH
15588: CALL_OW 255
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: PUSH
15597: LD_INT 2
15599: PUSH
15600: LD_INT 30
15602: PUSH
15603: LD_INT 0
15605: PUSH
15606: EMPTY
15607: LIST
15608: LIST
15609: PUSH
15610: LD_INT 30
15612: PUSH
15613: LD_INT 1
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: LIST
15624: PUSH
15625: EMPTY
15626: LIST
15627: LIST
15628: PPUSH
15629: CALL_OW 72
15633: ST_TO_ADDR
// for i = 1 to hexes do
15634: LD_ADDR_VAR 0 9
15638: PUSH
15639: DOUBLE
15640: LD_INT 1
15642: DEC
15643: ST_TO_ADDR
15644: LD_VAR 0 14
15648: PUSH
15649: FOR_TO
15650: IFFALSE 16326
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15652: LD_ADDR_VAR 0 13
15656: PUSH
15657: LD_VAR 0 14
15661: PUSH
15662: LD_VAR 0 9
15666: ARRAY
15667: PUSH
15668: LD_INT 1
15670: ARRAY
15671: PPUSH
15672: LD_VAR 0 14
15676: PUSH
15677: LD_VAR 0 9
15681: ARRAY
15682: PUSH
15683: LD_INT 2
15685: ARRAY
15686: PPUSH
15687: CALL_OW 428
15691: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15692: LD_VAR 0 14
15696: PUSH
15697: LD_VAR 0 9
15701: ARRAY
15702: PUSH
15703: LD_INT 1
15705: ARRAY
15706: PPUSH
15707: LD_VAR 0 14
15711: PUSH
15712: LD_VAR 0 9
15716: ARRAY
15717: PUSH
15718: LD_INT 2
15720: ARRAY
15721: PPUSH
15722: CALL_OW 351
15726: PUSH
15727: LD_VAR 0 14
15731: PUSH
15732: LD_VAR 0 9
15736: ARRAY
15737: PUSH
15738: LD_INT 1
15740: ARRAY
15741: PPUSH
15742: LD_VAR 0 14
15746: PUSH
15747: LD_VAR 0 9
15751: ARRAY
15752: PUSH
15753: LD_INT 2
15755: ARRAY
15756: PPUSH
15757: CALL_OW 488
15761: NOT
15762: OR
15763: PUSH
15764: LD_VAR 0 13
15768: PPUSH
15769: CALL_OW 247
15773: PUSH
15774: LD_INT 3
15776: EQUAL
15777: OR
15778: IFFALSE 15784
// exit ;
15780: POP
15781: POP
15782: GO 16328
// if not tmp then
15784: LD_VAR 0 13
15788: NOT
15789: IFFALSE 15793
// continue ;
15791: GO 15649
// result := true ;
15793: LD_ADDR_VAR 0 8
15797: PUSH
15798: LD_INT 1
15800: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15801: LD_VAR 0 6
15805: PUSH
15806: LD_VAR 0 13
15810: PPUSH
15811: CALL_OW 247
15815: PUSH
15816: LD_INT 2
15818: EQUAL
15819: AND
15820: PUSH
15821: LD_VAR 0 13
15825: PPUSH
15826: CALL_OW 263
15830: PUSH
15831: LD_INT 1
15833: EQUAL
15834: AND
15835: IFFALSE 15999
// begin if IsDrivenBy ( tmp ) then
15837: LD_VAR 0 13
15841: PPUSH
15842: CALL_OW 311
15846: IFFALSE 15850
// continue ;
15848: GO 15649
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15850: LD_VAR 0 6
15854: PPUSH
15855: LD_INT 3
15857: PUSH
15858: LD_INT 60
15860: PUSH
15861: EMPTY
15862: LIST
15863: PUSH
15864: EMPTY
15865: LIST
15866: LIST
15867: PUSH
15868: LD_INT 3
15870: PUSH
15871: LD_INT 55
15873: PUSH
15874: EMPTY
15875: LIST
15876: PUSH
15877: EMPTY
15878: LIST
15879: LIST
15880: PUSH
15881: EMPTY
15882: LIST
15883: LIST
15884: PPUSH
15885: CALL_OW 72
15889: IFFALSE 15997
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15891: LD_ADDR_VAR 0 18
15895: PUSH
15896: LD_VAR 0 6
15900: PPUSH
15901: LD_INT 3
15903: PUSH
15904: LD_INT 60
15906: PUSH
15907: EMPTY
15908: LIST
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PUSH
15914: LD_INT 3
15916: PUSH
15917: LD_INT 55
15919: PUSH
15920: EMPTY
15921: LIST
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: PUSH
15927: EMPTY
15928: LIST
15929: LIST
15930: PPUSH
15931: CALL_OW 72
15935: PUSH
15936: LD_INT 1
15938: ARRAY
15939: ST_TO_ADDR
// if IsInUnit ( driver ) then
15940: LD_VAR 0 18
15944: PPUSH
15945: CALL_OW 310
15949: IFFALSE 15960
// ComExit ( driver ) ;
15951: LD_VAR 0 18
15955: PPUSH
15956: CALL 41340 0 1
// AddComEnterUnit ( driver , tmp ) ;
15960: LD_VAR 0 18
15964: PPUSH
15965: LD_VAR 0 13
15969: PPUSH
15970: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15974: LD_VAR 0 18
15978: PPUSH
15979: LD_VAR 0 7
15983: PPUSH
15984: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15988: LD_VAR 0 18
15992: PPUSH
15993: CALL_OW 181
// end ; continue ;
15997: GO 15649
// end ; if not cleaners or not tmp in cleaners then
15999: LD_VAR 0 6
16003: NOT
16004: PUSH
16005: LD_VAR 0 13
16009: PUSH
16010: LD_VAR 0 6
16014: IN
16015: NOT
16016: OR
16017: IFFALSE 16324
// begin if dep then
16019: LD_VAR 0 17
16023: IFFALSE 16159
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
16025: LD_ADDR_VAR 0 16
16029: PUSH
16030: LD_VAR 0 17
16034: PUSH
16035: LD_INT 1
16037: ARRAY
16038: PPUSH
16039: CALL_OW 250
16043: PPUSH
16044: LD_VAR 0 17
16048: PUSH
16049: LD_INT 1
16051: ARRAY
16052: PPUSH
16053: CALL_OW 254
16057: PPUSH
16058: LD_INT 5
16060: PPUSH
16061: CALL_OW 272
16065: PUSH
16066: LD_VAR 0 17
16070: PUSH
16071: LD_INT 1
16073: ARRAY
16074: PPUSH
16075: CALL_OW 251
16079: PPUSH
16080: LD_VAR 0 17
16084: PUSH
16085: LD_INT 1
16087: ARRAY
16088: PPUSH
16089: CALL_OW 254
16093: PPUSH
16094: LD_INT 5
16096: PPUSH
16097: CALL_OW 273
16101: PUSH
16102: EMPTY
16103: LIST
16104: LIST
16105: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
16106: LD_VAR 0 16
16110: PUSH
16111: LD_INT 1
16113: ARRAY
16114: PPUSH
16115: LD_VAR 0 16
16119: PUSH
16120: LD_INT 2
16122: ARRAY
16123: PPUSH
16124: CALL_OW 488
16128: IFFALSE 16159
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16130: LD_VAR 0 13
16134: PPUSH
16135: LD_VAR 0 16
16139: PUSH
16140: LD_INT 1
16142: ARRAY
16143: PPUSH
16144: LD_VAR 0 16
16148: PUSH
16149: LD_INT 2
16151: ARRAY
16152: PPUSH
16153: CALL_OW 111
// continue ;
16157: GO 15649
// end ; end ; r := GetDir ( tmp ) ;
16159: LD_ADDR_VAR 0 15
16163: PUSH
16164: LD_VAR 0 13
16168: PPUSH
16169: CALL_OW 254
16173: ST_TO_ADDR
// if r = 5 then
16174: LD_VAR 0 15
16178: PUSH
16179: LD_INT 5
16181: EQUAL
16182: IFFALSE 16192
// r := 0 ;
16184: LD_ADDR_VAR 0 15
16188: PUSH
16189: LD_INT 0
16191: ST_TO_ADDR
// for j = r to 5 do
16192: LD_ADDR_VAR 0 10
16196: PUSH
16197: DOUBLE
16198: LD_VAR 0 15
16202: DEC
16203: ST_TO_ADDR
16204: LD_INT 5
16206: PUSH
16207: FOR_TO
16208: IFFALSE 16322
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16210: LD_ADDR_VAR 0 11
16214: PUSH
16215: LD_VAR 0 13
16219: PPUSH
16220: CALL_OW 250
16224: PPUSH
16225: LD_VAR 0 10
16229: PPUSH
16230: LD_INT 2
16232: PPUSH
16233: CALL_OW 272
16237: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16238: LD_ADDR_VAR 0 12
16242: PUSH
16243: LD_VAR 0 13
16247: PPUSH
16248: CALL_OW 251
16252: PPUSH
16253: LD_VAR 0 10
16257: PPUSH
16258: LD_INT 2
16260: PPUSH
16261: CALL_OW 273
16265: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16266: LD_VAR 0 11
16270: PPUSH
16271: LD_VAR 0 12
16275: PPUSH
16276: CALL_OW 488
16280: PUSH
16281: LD_VAR 0 11
16285: PPUSH
16286: LD_VAR 0 12
16290: PPUSH
16291: CALL_OW 428
16295: NOT
16296: AND
16297: IFFALSE 16320
// begin ComMoveXY ( tmp , _x , _y ) ;
16299: LD_VAR 0 13
16303: PPUSH
16304: LD_VAR 0 11
16308: PPUSH
16309: LD_VAR 0 12
16313: PPUSH
16314: CALL_OW 111
// break ;
16318: GO 16322
// end ; end ;
16320: GO 16207
16322: POP
16323: POP
// end ; end ;
16324: GO 15649
16326: POP
16327: POP
// end ;
16328: LD_VAR 0 8
16332: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16333: LD_INT 0
16335: PPUSH
// result := true ;
16336: LD_ADDR_VAR 0 3
16340: PUSH
16341: LD_INT 1
16343: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16344: LD_VAR 0 2
16348: PUSH
16349: LD_INT 24
16351: DOUBLE
16352: EQUAL
16353: IFTRUE 16363
16355: LD_INT 33
16357: DOUBLE
16358: EQUAL
16359: IFTRUE 16363
16361: GO 16388
16363: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16364: LD_ADDR_VAR 0 3
16368: PUSH
16369: LD_INT 32
16371: PPUSH
16372: LD_VAR 0 1
16376: PPUSH
16377: CALL_OW 321
16381: PUSH
16382: LD_INT 2
16384: EQUAL
16385: ST_TO_ADDR
16386: GO 16704
16388: LD_INT 20
16390: DOUBLE
16391: EQUAL
16392: IFTRUE 16396
16394: GO 16421
16396: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16397: LD_ADDR_VAR 0 3
16401: PUSH
16402: LD_INT 6
16404: PPUSH
16405: LD_VAR 0 1
16409: PPUSH
16410: CALL_OW 321
16414: PUSH
16415: LD_INT 2
16417: EQUAL
16418: ST_TO_ADDR
16419: GO 16704
16421: LD_INT 22
16423: DOUBLE
16424: EQUAL
16425: IFTRUE 16435
16427: LD_INT 36
16429: DOUBLE
16430: EQUAL
16431: IFTRUE 16435
16433: GO 16460
16435: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16436: LD_ADDR_VAR 0 3
16440: PUSH
16441: LD_INT 15
16443: PPUSH
16444: LD_VAR 0 1
16448: PPUSH
16449: CALL_OW 321
16453: PUSH
16454: LD_INT 2
16456: EQUAL
16457: ST_TO_ADDR
16458: GO 16704
16460: LD_INT 30
16462: DOUBLE
16463: EQUAL
16464: IFTRUE 16468
16466: GO 16493
16468: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16469: LD_ADDR_VAR 0 3
16473: PUSH
16474: LD_INT 20
16476: PPUSH
16477: LD_VAR 0 1
16481: PPUSH
16482: CALL_OW 321
16486: PUSH
16487: LD_INT 2
16489: EQUAL
16490: ST_TO_ADDR
16491: GO 16704
16493: LD_INT 28
16495: DOUBLE
16496: EQUAL
16497: IFTRUE 16507
16499: LD_INT 21
16501: DOUBLE
16502: EQUAL
16503: IFTRUE 16507
16505: GO 16532
16507: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16508: LD_ADDR_VAR 0 3
16512: PUSH
16513: LD_INT 21
16515: PPUSH
16516: LD_VAR 0 1
16520: PPUSH
16521: CALL_OW 321
16525: PUSH
16526: LD_INT 2
16528: EQUAL
16529: ST_TO_ADDR
16530: GO 16704
16532: LD_INT 16
16534: DOUBLE
16535: EQUAL
16536: IFTRUE 16540
16538: GO 16565
16540: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16541: LD_ADDR_VAR 0 3
16545: PUSH
16546: LD_INT 84
16548: PPUSH
16549: LD_VAR 0 1
16553: PPUSH
16554: CALL_OW 321
16558: PUSH
16559: LD_INT 2
16561: EQUAL
16562: ST_TO_ADDR
16563: GO 16704
16565: LD_INT 19
16567: DOUBLE
16568: EQUAL
16569: IFTRUE 16579
16571: LD_INT 23
16573: DOUBLE
16574: EQUAL
16575: IFTRUE 16579
16577: GO 16604
16579: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16580: LD_ADDR_VAR 0 3
16584: PUSH
16585: LD_INT 83
16587: PPUSH
16588: LD_VAR 0 1
16592: PPUSH
16593: CALL_OW 321
16597: PUSH
16598: LD_INT 2
16600: EQUAL
16601: ST_TO_ADDR
16602: GO 16704
16604: LD_INT 17
16606: DOUBLE
16607: EQUAL
16608: IFTRUE 16612
16610: GO 16637
16612: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16613: LD_ADDR_VAR 0 3
16617: PUSH
16618: LD_INT 39
16620: PPUSH
16621: LD_VAR 0 1
16625: PPUSH
16626: CALL_OW 321
16630: PUSH
16631: LD_INT 2
16633: EQUAL
16634: ST_TO_ADDR
16635: GO 16704
16637: LD_INT 18
16639: DOUBLE
16640: EQUAL
16641: IFTRUE 16645
16643: GO 16670
16645: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16646: LD_ADDR_VAR 0 3
16650: PUSH
16651: LD_INT 40
16653: PPUSH
16654: LD_VAR 0 1
16658: PPUSH
16659: CALL_OW 321
16663: PUSH
16664: LD_INT 2
16666: EQUAL
16667: ST_TO_ADDR
16668: GO 16704
16670: LD_INT 27
16672: DOUBLE
16673: EQUAL
16674: IFTRUE 16678
16676: GO 16703
16678: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16679: LD_ADDR_VAR 0 3
16683: PUSH
16684: LD_INT 35
16686: PPUSH
16687: LD_VAR 0 1
16691: PPUSH
16692: CALL_OW 321
16696: PUSH
16697: LD_INT 2
16699: EQUAL
16700: ST_TO_ADDR
16701: GO 16704
16703: POP
// end ;
16704: LD_VAR 0 3
16708: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16709: LD_INT 0
16711: PPUSH
16712: PPUSH
16713: PPUSH
16714: PPUSH
16715: PPUSH
16716: PPUSH
16717: PPUSH
16718: PPUSH
16719: PPUSH
16720: PPUSH
16721: PPUSH
// result := false ;
16722: LD_ADDR_VAR 0 6
16726: PUSH
16727: LD_INT 0
16729: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16730: LD_VAR 0 1
16734: NOT
16735: PUSH
16736: LD_VAR 0 1
16740: PPUSH
16741: CALL_OW 266
16745: PUSH
16746: LD_INT 0
16748: PUSH
16749: LD_INT 1
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: IN
16756: NOT
16757: OR
16758: PUSH
16759: LD_VAR 0 2
16763: NOT
16764: OR
16765: PUSH
16766: LD_VAR 0 5
16770: PUSH
16771: LD_INT 0
16773: PUSH
16774: LD_INT 1
16776: PUSH
16777: LD_INT 2
16779: PUSH
16780: LD_INT 3
16782: PUSH
16783: LD_INT 4
16785: PUSH
16786: LD_INT 5
16788: PUSH
16789: EMPTY
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: IN
16797: NOT
16798: OR
16799: PUSH
16800: LD_VAR 0 3
16804: PPUSH
16805: LD_VAR 0 4
16809: PPUSH
16810: CALL_OW 488
16814: NOT
16815: OR
16816: IFFALSE 16820
// exit ;
16818: GO 17556
// side := GetSide ( depot ) ;
16820: LD_ADDR_VAR 0 9
16824: PUSH
16825: LD_VAR 0 1
16829: PPUSH
16830: CALL_OW 255
16834: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16835: LD_VAR 0 9
16839: PPUSH
16840: LD_VAR 0 2
16844: PPUSH
16845: CALL 16333 0 2
16849: NOT
16850: IFFALSE 16854
// exit ;
16852: GO 17556
// pom := GetBase ( depot ) ;
16854: LD_ADDR_VAR 0 10
16858: PUSH
16859: LD_VAR 0 1
16863: PPUSH
16864: CALL_OW 274
16868: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16869: LD_ADDR_VAR 0 11
16873: PUSH
16874: LD_VAR 0 2
16878: PPUSH
16879: LD_VAR 0 1
16883: PPUSH
16884: CALL_OW 248
16888: PPUSH
16889: CALL_OW 450
16893: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16894: LD_VAR 0 10
16898: PPUSH
16899: LD_INT 1
16901: PPUSH
16902: CALL_OW 275
16906: PUSH
16907: LD_VAR 0 11
16911: PUSH
16912: LD_INT 1
16914: ARRAY
16915: GREATEREQUAL
16916: PUSH
16917: LD_VAR 0 10
16921: PPUSH
16922: LD_INT 2
16924: PPUSH
16925: CALL_OW 275
16929: PUSH
16930: LD_VAR 0 11
16934: PUSH
16935: LD_INT 2
16937: ARRAY
16938: GREATEREQUAL
16939: AND
16940: PUSH
16941: LD_VAR 0 10
16945: PPUSH
16946: LD_INT 3
16948: PPUSH
16949: CALL_OW 275
16953: PUSH
16954: LD_VAR 0 11
16958: PUSH
16959: LD_INT 3
16961: ARRAY
16962: GREATEREQUAL
16963: AND
16964: NOT
16965: IFFALSE 16969
// exit ;
16967: GO 17556
// if GetBType ( depot ) = b_depot then
16969: LD_VAR 0 1
16973: PPUSH
16974: CALL_OW 266
16978: PUSH
16979: LD_INT 0
16981: EQUAL
16982: IFFALSE 16994
// dist := 28 else
16984: LD_ADDR_VAR 0 14
16988: PUSH
16989: LD_INT 28
16991: ST_TO_ADDR
16992: GO 17002
// dist := 36 ;
16994: LD_ADDR_VAR 0 14
16998: PUSH
16999: LD_INT 36
17001: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
17002: LD_VAR 0 1
17006: PPUSH
17007: LD_VAR 0 3
17011: PPUSH
17012: LD_VAR 0 4
17016: PPUSH
17017: CALL_OW 297
17021: PUSH
17022: LD_VAR 0 14
17026: GREATER
17027: IFFALSE 17031
// exit ;
17029: GO 17556
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
17031: LD_ADDR_VAR 0 12
17035: PUSH
17036: LD_VAR 0 2
17040: PPUSH
17041: LD_VAR 0 3
17045: PPUSH
17046: LD_VAR 0 4
17050: PPUSH
17051: LD_VAR 0 5
17055: PPUSH
17056: LD_VAR 0 1
17060: PPUSH
17061: CALL_OW 248
17065: PPUSH
17066: LD_INT 0
17068: PPUSH
17069: CALL 17561 0 6
17073: ST_TO_ADDR
// if not hexes then
17074: LD_VAR 0 12
17078: NOT
17079: IFFALSE 17083
// exit ;
17081: GO 17556
// hex := GetHexInfo ( x , y ) ;
17083: LD_ADDR_VAR 0 15
17087: PUSH
17088: LD_VAR 0 3
17092: PPUSH
17093: LD_VAR 0 4
17097: PPUSH
17098: CALL_OW 546
17102: ST_TO_ADDR
// if hex [ 1 ] then
17103: LD_VAR 0 15
17107: PUSH
17108: LD_INT 1
17110: ARRAY
17111: IFFALSE 17115
// exit ;
17113: GO 17556
// height := hex [ 2 ] ;
17115: LD_ADDR_VAR 0 13
17119: PUSH
17120: LD_VAR 0 15
17124: PUSH
17125: LD_INT 2
17127: ARRAY
17128: ST_TO_ADDR
// for i = 1 to hexes do
17129: LD_ADDR_VAR 0 7
17133: PUSH
17134: DOUBLE
17135: LD_INT 1
17137: DEC
17138: ST_TO_ADDR
17139: LD_VAR 0 12
17143: PUSH
17144: FOR_TO
17145: IFFALSE 17475
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17147: LD_VAR 0 12
17151: PUSH
17152: LD_VAR 0 7
17156: ARRAY
17157: PUSH
17158: LD_INT 1
17160: ARRAY
17161: PPUSH
17162: LD_VAR 0 12
17166: PUSH
17167: LD_VAR 0 7
17171: ARRAY
17172: PUSH
17173: LD_INT 2
17175: ARRAY
17176: PPUSH
17177: CALL_OW 488
17181: NOT
17182: PUSH
17183: LD_VAR 0 12
17187: PUSH
17188: LD_VAR 0 7
17192: ARRAY
17193: PUSH
17194: LD_INT 1
17196: ARRAY
17197: PPUSH
17198: LD_VAR 0 12
17202: PUSH
17203: LD_VAR 0 7
17207: ARRAY
17208: PUSH
17209: LD_INT 2
17211: ARRAY
17212: PPUSH
17213: CALL_OW 428
17217: PUSH
17218: LD_INT 0
17220: GREATER
17221: OR
17222: PUSH
17223: LD_VAR 0 12
17227: PUSH
17228: LD_VAR 0 7
17232: ARRAY
17233: PUSH
17234: LD_INT 1
17236: ARRAY
17237: PPUSH
17238: LD_VAR 0 12
17242: PUSH
17243: LD_VAR 0 7
17247: ARRAY
17248: PUSH
17249: LD_INT 2
17251: ARRAY
17252: PPUSH
17253: CALL_OW 351
17257: OR
17258: IFFALSE 17264
// exit ;
17260: POP
17261: POP
17262: GO 17556
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17264: LD_ADDR_VAR 0 8
17268: PUSH
17269: LD_VAR 0 12
17273: PUSH
17274: LD_VAR 0 7
17278: ARRAY
17279: PUSH
17280: LD_INT 1
17282: ARRAY
17283: PPUSH
17284: LD_VAR 0 12
17288: PUSH
17289: LD_VAR 0 7
17293: ARRAY
17294: PUSH
17295: LD_INT 2
17297: ARRAY
17298: PPUSH
17299: CALL_OW 546
17303: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17304: LD_VAR 0 8
17308: PUSH
17309: LD_INT 1
17311: ARRAY
17312: PUSH
17313: LD_VAR 0 8
17317: PUSH
17318: LD_INT 2
17320: ARRAY
17321: PUSH
17322: LD_VAR 0 13
17326: PUSH
17327: LD_INT 2
17329: PLUS
17330: GREATER
17331: OR
17332: PUSH
17333: LD_VAR 0 8
17337: PUSH
17338: LD_INT 2
17340: ARRAY
17341: PUSH
17342: LD_VAR 0 13
17346: PUSH
17347: LD_INT 2
17349: MINUS
17350: LESS
17351: OR
17352: PUSH
17353: LD_VAR 0 8
17357: PUSH
17358: LD_INT 3
17360: ARRAY
17361: PUSH
17362: LD_INT 0
17364: PUSH
17365: LD_INT 8
17367: PUSH
17368: LD_INT 9
17370: PUSH
17371: LD_INT 10
17373: PUSH
17374: LD_INT 11
17376: PUSH
17377: LD_INT 12
17379: PUSH
17380: LD_INT 13
17382: PUSH
17383: LD_INT 16
17385: PUSH
17386: LD_INT 17
17388: PUSH
17389: LD_INT 18
17391: PUSH
17392: LD_INT 19
17394: PUSH
17395: LD_INT 20
17397: PUSH
17398: LD_INT 21
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: IN
17416: NOT
17417: OR
17418: PUSH
17419: LD_VAR 0 8
17423: PUSH
17424: LD_INT 5
17426: ARRAY
17427: NOT
17428: OR
17429: PUSH
17430: LD_VAR 0 8
17434: PUSH
17435: LD_INT 6
17437: ARRAY
17438: PUSH
17439: LD_INT 1
17441: PUSH
17442: LD_INT 2
17444: PUSH
17445: LD_INT 7
17447: PUSH
17448: LD_INT 9
17450: PUSH
17451: LD_INT 10
17453: PUSH
17454: LD_INT 11
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: IN
17465: NOT
17466: OR
17467: IFFALSE 17473
// exit ;
17469: POP
17470: POP
17471: GO 17556
// end ;
17473: GO 17144
17475: POP
17476: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17477: LD_VAR 0 9
17481: PPUSH
17482: LD_VAR 0 3
17486: PPUSH
17487: LD_VAR 0 4
17491: PPUSH
17492: LD_INT 20
17494: PPUSH
17495: CALL 9508 0 4
17499: PUSH
17500: LD_INT 4
17502: ARRAY
17503: IFFALSE 17507
// exit ;
17505: GO 17556
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17507: LD_VAR 0 2
17511: PUSH
17512: LD_INT 29
17514: PUSH
17515: LD_INT 30
17517: PUSH
17518: EMPTY
17519: LIST
17520: LIST
17521: IN
17522: PUSH
17523: LD_VAR 0 3
17527: PPUSH
17528: LD_VAR 0 4
17532: PPUSH
17533: LD_VAR 0 9
17537: PPUSH
17538: CALL_OW 440
17542: NOT
17543: AND
17544: IFFALSE 17548
// exit ;
17546: GO 17556
// result := true ;
17548: LD_ADDR_VAR 0 6
17552: PUSH
17553: LD_INT 1
17555: ST_TO_ADDR
// end ;
17556: LD_VAR 0 6
17560: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17561: LD_INT 0
17563: PPUSH
17564: PPUSH
17565: PPUSH
17566: PPUSH
17567: PPUSH
17568: PPUSH
17569: PPUSH
17570: PPUSH
17571: PPUSH
17572: PPUSH
17573: PPUSH
17574: PPUSH
17575: PPUSH
17576: PPUSH
17577: PPUSH
17578: PPUSH
17579: PPUSH
17580: PPUSH
17581: PPUSH
17582: PPUSH
17583: PPUSH
17584: PPUSH
17585: PPUSH
17586: PPUSH
17587: PPUSH
17588: PPUSH
17589: PPUSH
17590: PPUSH
17591: PPUSH
17592: PPUSH
17593: PPUSH
17594: PPUSH
17595: PPUSH
17596: PPUSH
17597: PPUSH
17598: PPUSH
17599: PPUSH
17600: PPUSH
17601: PPUSH
17602: PPUSH
17603: PPUSH
17604: PPUSH
17605: PPUSH
17606: PPUSH
17607: PPUSH
17608: PPUSH
17609: PPUSH
17610: PPUSH
17611: PPUSH
17612: PPUSH
17613: PPUSH
17614: PPUSH
17615: PPUSH
17616: PPUSH
17617: PPUSH
17618: PPUSH
17619: PPUSH
17620: PPUSH
// result = [ ] ;
17621: LD_ADDR_VAR 0 7
17625: PUSH
17626: EMPTY
17627: ST_TO_ADDR
// temp_list = [ ] ;
17628: LD_ADDR_VAR 0 9
17632: PUSH
17633: EMPTY
17634: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17635: LD_VAR 0 4
17639: PUSH
17640: LD_INT 0
17642: PUSH
17643: LD_INT 1
17645: PUSH
17646: LD_INT 2
17648: PUSH
17649: LD_INT 3
17651: PUSH
17652: LD_INT 4
17654: PUSH
17655: LD_INT 5
17657: PUSH
17658: EMPTY
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: LIST
17665: IN
17666: NOT
17667: PUSH
17668: LD_VAR 0 1
17672: PUSH
17673: LD_INT 0
17675: PUSH
17676: LD_INT 1
17678: PUSH
17679: EMPTY
17680: LIST
17681: LIST
17682: IN
17683: PUSH
17684: LD_VAR 0 5
17688: PUSH
17689: LD_INT 1
17691: PUSH
17692: LD_INT 2
17694: PUSH
17695: LD_INT 3
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: LIST
17702: IN
17703: NOT
17704: AND
17705: OR
17706: IFFALSE 17710
// exit ;
17708: GO 36101
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17710: LD_VAR 0 1
17714: PUSH
17715: LD_INT 6
17717: PUSH
17718: LD_INT 7
17720: PUSH
17721: LD_INT 8
17723: PUSH
17724: LD_INT 13
17726: PUSH
17727: LD_INT 12
17729: PUSH
17730: LD_INT 15
17732: PUSH
17733: LD_INT 11
17735: PUSH
17736: LD_INT 14
17738: PUSH
17739: LD_INT 10
17741: PUSH
17742: EMPTY
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: IN
17753: IFFALSE 17763
// btype = b_lab ;
17755: LD_ADDR_VAR 0 1
17759: PUSH
17760: LD_INT 6
17762: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17763: LD_VAR 0 6
17767: PUSH
17768: LD_INT 0
17770: PUSH
17771: LD_INT 1
17773: PUSH
17774: LD_INT 2
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: LIST
17781: IN
17782: NOT
17783: PUSH
17784: LD_VAR 0 1
17788: PUSH
17789: LD_INT 0
17791: PUSH
17792: LD_INT 1
17794: PUSH
17795: LD_INT 2
17797: PUSH
17798: LD_INT 3
17800: PUSH
17801: LD_INT 6
17803: PUSH
17804: LD_INT 36
17806: PUSH
17807: LD_INT 4
17809: PUSH
17810: LD_INT 5
17812: PUSH
17813: LD_INT 31
17815: PUSH
17816: LD_INT 32
17818: PUSH
17819: LD_INT 33
17821: PUSH
17822: EMPTY
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: IN
17835: NOT
17836: PUSH
17837: LD_VAR 0 6
17841: PUSH
17842: LD_INT 1
17844: EQUAL
17845: AND
17846: OR
17847: PUSH
17848: LD_VAR 0 1
17852: PUSH
17853: LD_INT 2
17855: PUSH
17856: LD_INT 3
17858: PUSH
17859: EMPTY
17860: LIST
17861: LIST
17862: IN
17863: NOT
17864: PUSH
17865: LD_VAR 0 6
17869: PUSH
17870: LD_INT 2
17872: EQUAL
17873: AND
17874: OR
17875: IFFALSE 17885
// mode = 0 ;
17877: LD_ADDR_VAR 0 6
17881: PUSH
17882: LD_INT 0
17884: ST_TO_ADDR
// case mode of 0 :
17885: LD_VAR 0 6
17889: PUSH
17890: LD_INT 0
17892: DOUBLE
17893: EQUAL
17894: IFTRUE 17898
17896: GO 29351
17898: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17899: LD_ADDR_VAR 0 11
17903: PUSH
17904: LD_INT 0
17906: PUSH
17907: LD_INT 0
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: PUSH
17914: LD_INT 0
17916: PUSH
17917: LD_INT 1
17919: NEG
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: PUSH
17925: LD_INT 1
17927: PUSH
17928: LD_INT 0
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: PUSH
17935: LD_INT 1
17937: PUSH
17938: LD_INT 1
17940: PUSH
17941: EMPTY
17942: LIST
17943: LIST
17944: PUSH
17945: LD_INT 0
17947: PUSH
17948: LD_INT 1
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: PUSH
17955: LD_INT 1
17957: NEG
17958: PUSH
17959: LD_INT 0
17961: PUSH
17962: EMPTY
17963: LIST
17964: LIST
17965: PUSH
17966: LD_INT 1
17968: NEG
17969: PUSH
17970: LD_INT 1
17972: NEG
17973: PUSH
17974: EMPTY
17975: LIST
17976: LIST
17977: PUSH
17978: LD_INT 1
17980: NEG
17981: PUSH
17982: LD_INT 2
17984: NEG
17985: PUSH
17986: EMPTY
17987: LIST
17988: LIST
17989: PUSH
17990: LD_INT 0
17992: PUSH
17993: LD_INT 2
17995: NEG
17996: PUSH
17997: EMPTY
17998: LIST
17999: LIST
18000: PUSH
18001: LD_INT 1
18003: PUSH
18004: LD_INT 1
18006: NEG
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: PUSH
18012: LD_INT 1
18014: PUSH
18015: LD_INT 2
18017: PUSH
18018: EMPTY
18019: LIST
18020: LIST
18021: PUSH
18022: LD_INT 0
18024: PUSH
18025: LD_INT 2
18027: PUSH
18028: EMPTY
18029: LIST
18030: LIST
18031: PUSH
18032: LD_INT 1
18034: NEG
18035: PUSH
18036: LD_INT 1
18038: PUSH
18039: EMPTY
18040: LIST
18041: LIST
18042: PUSH
18043: LD_INT 1
18045: PUSH
18046: LD_INT 3
18048: PUSH
18049: EMPTY
18050: LIST
18051: LIST
18052: PUSH
18053: LD_INT 0
18055: PUSH
18056: LD_INT 3
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: PUSH
18063: LD_INT 1
18065: NEG
18066: PUSH
18067: LD_INT 2
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: LIST
18078: LIST
18079: LIST
18080: LIST
18081: LIST
18082: LIST
18083: LIST
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: LIST
18091: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18092: LD_ADDR_VAR 0 12
18096: PUSH
18097: LD_INT 0
18099: PUSH
18100: LD_INT 0
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: PUSH
18107: LD_INT 0
18109: PUSH
18110: LD_INT 1
18112: NEG
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PUSH
18118: LD_INT 1
18120: PUSH
18121: LD_INT 0
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: PUSH
18128: LD_INT 1
18130: PUSH
18131: LD_INT 1
18133: PUSH
18134: EMPTY
18135: LIST
18136: LIST
18137: PUSH
18138: LD_INT 0
18140: PUSH
18141: LD_INT 1
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: PUSH
18148: LD_INT 1
18150: NEG
18151: PUSH
18152: LD_INT 0
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: LD_INT 1
18161: NEG
18162: PUSH
18163: LD_INT 1
18165: NEG
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PUSH
18171: LD_INT 1
18173: PUSH
18174: LD_INT 1
18176: NEG
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PUSH
18182: LD_INT 2
18184: PUSH
18185: LD_INT 0
18187: PUSH
18188: EMPTY
18189: LIST
18190: LIST
18191: PUSH
18192: LD_INT 2
18194: PUSH
18195: LD_INT 1
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: PUSH
18202: LD_INT 1
18204: NEG
18205: PUSH
18206: LD_INT 1
18208: PUSH
18209: EMPTY
18210: LIST
18211: LIST
18212: PUSH
18213: LD_INT 2
18215: NEG
18216: PUSH
18217: LD_INT 0
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: PUSH
18224: LD_INT 2
18226: NEG
18227: PUSH
18228: LD_INT 1
18230: NEG
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PUSH
18236: LD_INT 2
18238: NEG
18239: PUSH
18240: LD_INT 1
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PUSH
18247: LD_INT 3
18249: NEG
18250: PUSH
18251: LD_INT 0
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: PUSH
18258: LD_INT 3
18260: NEG
18261: PUSH
18262: LD_INT 1
18264: NEG
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: LIST
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: LIST
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18288: LD_ADDR_VAR 0 13
18292: PUSH
18293: LD_INT 0
18295: PUSH
18296: LD_INT 0
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: PUSH
18303: LD_INT 0
18305: PUSH
18306: LD_INT 1
18308: NEG
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: PUSH
18314: LD_INT 1
18316: PUSH
18317: LD_INT 0
18319: PUSH
18320: EMPTY
18321: LIST
18322: LIST
18323: PUSH
18324: LD_INT 1
18326: PUSH
18327: LD_INT 1
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: PUSH
18334: LD_INT 0
18336: PUSH
18337: LD_INT 1
18339: PUSH
18340: EMPTY
18341: LIST
18342: LIST
18343: PUSH
18344: LD_INT 1
18346: NEG
18347: PUSH
18348: LD_INT 0
18350: PUSH
18351: EMPTY
18352: LIST
18353: LIST
18354: PUSH
18355: LD_INT 1
18357: NEG
18358: PUSH
18359: LD_INT 1
18361: NEG
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: PUSH
18367: LD_INT 1
18369: NEG
18370: PUSH
18371: LD_INT 2
18373: NEG
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: PUSH
18379: LD_INT 2
18381: PUSH
18382: LD_INT 1
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: PUSH
18389: LD_INT 2
18391: PUSH
18392: LD_INT 2
18394: PUSH
18395: EMPTY
18396: LIST
18397: LIST
18398: PUSH
18399: LD_INT 1
18401: PUSH
18402: LD_INT 2
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: PUSH
18409: LD_INT 2
18411: NEG
18412: PUSH
18413: LD_INT 1
18415: NEG
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: PUSH
18421: LD_INT 2
18423: NEG
18424: PUSH
18425: LD_INT 2
18427: NEG
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PUSH
18433: LD_INT 2
18435: NEG
18436: PUSH
18437: LD_INT 3
18439: NEG
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PUSH
18445: LD_INT 3
18447: NEG
18448: PUSH
18449: LD_INT 2
18451: NEG
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PUSH
18457: LD_INT 3
18459: NEG
18460: PUSH
18461: LD_INT 3
18463: NEG
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18487: LD_ADDR_VAR 0 14
18491: PUSH
18492: LD_INT 0
18494: PUSH
18495: LD_INT 0
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: PUSH
18502: LD_INT 0
18504: PUSH
18505: LD_INT 1
18507: NEG
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: PUSH
18513: LD_INT 1
18515: PUSH
18516: LD_INT 0
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: PUSH
18523: LD_INT 1
18525: PUSH
18526: LD_INT 1
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: PUSH
18533: LD_INT 0
18535: PUSH
18536: LD_INT 1
18538: PUSH
18539: EMPTY
18540: LIST
18541: LIST
18542: PUSH
18543: LD_INT 1
18545: NEG
18546: PUSH
18547: LD_INT 0
18549: PUSH
18550: EMPTY
18551: LIST
18552: LIST
18553: PUSH
18554: LD_INT 1
18556: NEG
18557: PUSH
18558: LD_INT 1
18560: NEG
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: PUSH
18566: LD_INT 1
18568: NEG
18569: PUSH
18570: LD_INT 2
18572: NEG
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: PUSH
18578: LD_INT 0
18580: PUSH
18581: LD_INT 2
18583: NEG
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: PUSH
18589: LD_INT 1
18591: PUSH
18592: LD_INT 1
18594: NEG
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: PUSH
18600: LD_INT 1
18602: PUSH
18603: LD_INT 2
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PUSH
18610: LD_INT 0
18612: PUSH
18613: LD_INT 2
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: PUSH
18620: LD_INT 1
18622: NEG
18623: PUSH
18624: LD_INT 1
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: PUSH
18631: LD_INT 1
18633: NEG
18634: PUSH
18635: LD_INT 3
18637: NEG
18638: PUSH
18639: EMPTY
18640: LIST
18641: LIST
18642: PUSH
18643: LD_INT 0
18645: PUSH
18646: LD_INT 3
18648: NEG
18649: PUSH
18650: EMPTY
18651: LIST
18652: LIST
18653: PUSH
18654: LD_INT 1
18656: PUSH
18657: LD_INT 2
18659: NEG
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: LIST
18672: LIST
18673: LIST
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18683: LD_ADDR_VAR 0 15
18687: PUSH
18688: LD_INT 0
18690: PUSH
18691: LD_INT 0
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: PUSH
18698: LD_INT 0
18700: PUSH
18701: LD_INT 1
18703: NEG
18704: PUSH
18705: EMPTY
18706: LIST
18707: LIST
18708: PUSH
18709: LD_INT 1
18711: PUSH
18712: LD_INT 0
18714: PUSH
18715: EMPTY
18716: LIST
18717: LIST
18718: PUSH
18719: LD_INT 1
18721: PUSH
18722: LD_INT 1
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: PUSH
18729: LD_INT 0
18731: PUSH
18732: LD_INT 1
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: LD_INT 1
18741: NEG
18742: PUSH
18743: LD_INT 0
18745: PUSH
18746: EMPTY
18747: LIST
18748: LIST
18749: PUSH
18750: LD_INT 1
18752: NEG
18753: PUSH
18754: LD_INT 1
18756: NEG
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PUSH
18762: LD_INT 1
18764: PUSH
18765: LD_INT 1
18767: NEG
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: PUSH
18773: LD_INT 2
18775: PUSH
18776: LD_INT 0
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PUSH
18783: LD_INT 2
18785: PUSH
18786: LD_INT 1
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: LD_INT 1
18795: NEG
18796: PUSH
18797: LD_INT 1
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: PUSH
18804: LD_INT 2
18806: NEG
18807: PUSH
18808: LD_INT 0
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: PUSH
18815: LD_INT 2
18817: NEG
18818: PUSH
18819: LD_INT 1
18821: NEG
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: PUSH
18827: LD_INT 2
18829: PUSH
18830: LD_INT 1
18832: NEG
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: PUSH
18838: LD_INT 3
18840: PUSH
18841: LD_INT 0
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: PUSH
18848: LD_INT 3
18850: PUSH
18851: LD_INT 1
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18876: LD_ADDR_VAR 0 16
18880: PUSH
18881: LD_INT 0
18883: PUSH
18884: LD_INT 0
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: PUSH
18891: LD_INT 0
18893: PUSH
18894: LD_INT 1
18896: NEG
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: PUSH
18902: LD_INT 1
18904: PUSH
18905: LD_INT 0
18907: PUSH
18908: EMPTY
18909: LIST
18910: LIST
18911: PUSH
18912: LD_INT 1
18914: PUSH
18915: LD_INT 1
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: PUSH
18922: LD_INT 0
18924: PUSH
18925: LD_INT 1
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: PUSH
18932: LD_INT 1
18934: NEG
18935: PUSH
18936: LD_INT 0
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: PUSH
18943: LD_INT 1
18945: NEG
18946: PUSH
18947: LD_INT 1
18949: NEG
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PUSH
18955: LD_INT 1
18957: NEG
18958: PUSH
18959: LD_INT 2
18961: NEG
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PUSH
18967: LD_INT 2
18969: PUSH
18970: LD_INT 1
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: PUSH
18977: LD_INT 2
18979: PUSH
18980: LD_INT 2
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: PUSH
18987: LD_INT 1
18989: PUSH
18990: LD_INT 2
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: PUSH
18997: LD_INT 2
18999: NEG
19000: PUSH
19001: LD_INT 1
19003: NEG
19004: PUSH
19005: EMPTY
19006: LIST
19007: LIST
19008: PUSH
19009: LD_INT 2
19011: NEG
19012: PUSH
19013: LD_INT 2
19015: NEG
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: LD_INT 3
19023: PUSH
19024: LD_INT 2
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: PUSH
19031: LD_INT 3
19033: PUSH
19034: LD_INT 3
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: PUSH
19041: LD_INT 2
19043: PUSH
19044: LD_INT 3
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: LIST
19055: LIST
19056: LIST
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19069: LD_ADDR_VAR 0 17
19073: PUSH
19074: LD_INT 0
19076: PUSH
19077: LD_INT 0
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: PUSH
19084: LD_INT 0
19086: PUSH
19087: LD_INT 1
19089: NEG
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PUSH
19095: LD_INT 1
19097: PUSH
19098: LD_INT 0
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PUSH
19105: LD_INT 1
19107: PUSH
19108: LD_INT 1
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: PUSH
19115: LD_INT 0
19117: PUSH
19118: LD_INT 1
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PUSH
19125: LD_INT 1
19127: NEG
19128: PUSH
19129: LD_INT 0
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: LD_INT 1
19138: NEG
19139: PUSH
19140: LD_INT 1
19142: NEG
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: PUSH
19148: LD_INT 1
19150: NEG
19151: PUSH
19152: LD_INT 2
19154: NEG
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: PUSH
19160: LD_INT 0
19162: PUSH
19163: LD_INT 2
19165: NEG
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: PUSH
19171: LD_INT 1
19173: PUSH
19174: LD_INT 1
19176: NEG
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: PUSH
19182: LD_INT 2
19184: PUSH
19185: LD_INT 0
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PUSH
19192: LD_INT 2
19194: PUSH
19195: LD_INT 1
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: PUSH
19202: LD_INT 2
19204: PUSH
19205: LD_INT 2
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: PUSH
19212: LD_INT 1
19214: PUSH
19215: LD_INT 2
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: PUSH
19222: LD_INT 0
19224: PUSH
19225: LD_INT 2
19227: PUSH
19228: EMPTY
19229: LIST
19230: LIST
19231: PUSH
19232: LD_INT 1
19234: NEG
19235: PUSH
19236: LD_INT 1
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: PUSH
19243: LD_INT 2
19245: NEG
19246: PUSH
19247: LD_INT 0
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: PUSH
19254: LD_INT 2
19256: NEG
19257: PUSH
19258: LD_INT 1
19260: NEG
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: PUSH
19266: LD_INT 2
19268: NEG
19269: PUSH
19270: LD_INT 2
19272: NEG
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: LIST
19290: LIST
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19299: LD_ADDR_VAR 0 18
19303: PUSH
19304: LD_INT 0
19306: PUSH
19307: LD_INT 0
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: LD_INT 0
19316: PUSH
19317: LD_INT 1
19319: NEG
19320: PUSH
19321: EMPTY
19322: LIST
19323: LIST
19324: PUSH
19325: LD_INT 1
19327: PUSH
19328: LD_INT 0
19330: PUSH
19331: EMPTY
19332: LIST
19333: LIST
19334: PUSH
19335: LD_INT 1
19337: PUSH
19338: LD_INT 1
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: PUSH
19345: LD_INT 0
19347: PUSH
19348: LD_INT 1
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: PUSH
19355: LD_INT 1
19357: NEG
19358: PUSH
19359: LD_INT 0
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: LD_INT 1
19368: NEG
19369: PUSH
19370: LD_INT 1
19372: NEG
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PUSH
19378: LD_INT 1
19380: NEG
19381: PUSH
19382: LD_INT 2
19384: NEG
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: PUSH
19390: LD_INT 0
19392: PUSH
19393: LD_INT 2
19395: NEG
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: PUSH
19401: LD_INT 1
19403: PUSH
19404: LD_INT 1
19406: NEG
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: PUSH
19412: LD_INT 2
19414: PUSH
19415: LD_INT 0
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: PUSH
19422: LD_INT 2
19424: PUSH
19425: LD_INT 1
19427: PUSH
19428: EMPTY
19429: LIST
19430: LIST
19431: PUSH
19432: LD_INT 2
19434: PUSH
19435: LD_INT 2
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: PUSH
19442: LD_INT 1
19444: PUSH
19445: LD_INT 2
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: PUSH
19452: LD_INT 0
19454: PUSH
19455: LD_INT 2
19457: PUSH
19458: EMPTY
19459: LIST
19460: LIST
19461: PUSH
19462: LD_INT 1
19464: NEG
19465: PUSH
19466: LD_INT 1
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: PUSH
19473: LD_INT 2
19475: NEG
19476: PUSH
19477: LD_INT 0
19479: PUSH
19480: EMPTY
19481: LIST
19482: LIST
19483: PUSH
19484: LD_INT 2
19486: NEG
19487: PUSH
19488: LD_INT 1
19490: NEG
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: PUSH
19496: LD_INT 2
19498: NEG
19499: PUSH
19500: LD_INT 2
19502: NEG
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19529: LD_ADDR_VAR 0 19
19533: PUSH
19534: LD_INT 0
19536: PUSH
19537: LD_INT 0
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: PUSH
19544: LD_INT 0
19546: PUSH
19547: LD_INT 1
19549: NEG
19550: PUSH
19551: EMPTY
19552: LIST
19553: LIST
19554: PUSH
19555: LD_INT 1
19557: PUSH
19558: LD_INT 0
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: PUSH
19565: LD_INT 1
19567: PUSH
19568: LD_INT 1
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: PUSH
19575: LD_INT 0
19577: PUSH
19578: LD_INT 1
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: PUSH
19585: LD_INT 1
19587: NEG
19588: PUSH
19589: LD_INT 0
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PUSH
19596: LD_INT 1
19598: NEG
19599: PUSH
19600: LD_INT 1
19602: NEG
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: LD_INT 1
19610: NEG
19611: PUSH
19612: LD_INT 2
19614: NEG
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: PUSH
19620: LD_INT 0
19622: PUSH
19623: LD_INT 2
19625: NEG
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: PUSH
19631: LD_INT 1
19633: PUSH
19634: LD_INT 1
19636: NEG
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: PUSH
19642: LD_INT 2
19644: PUSH
19645: LD_INT 0
19647: PUSH
19648: EMPTY
19649: LIST
19650: LIST
19651: PUSH
19652: LD_INT 2
19654: PUSH
19655: LD_INT 1
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: PUSH
19662: LD_INT 2
19664: PUSH
19665: LD_INT 2
19667: PUSH
19668: EMPTY
19669: LIST
19670: LIST
19671: PUSH
19672: LD_INT 1
19674: PUSH
19675: LD_INT 2
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: PUSH
19682: LD_INT 0
19684: PUSH
19685: LD_INT 2
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: PUSH
19692: LD_INT 1
19694: NEG
19695: PUSH
19696: LD_INT 1
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: PUSH
19703: LD_INT 2
19705: NEG
19706: PUSH
19707: LD_INT 0
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: PUSH
19714: LD_INT 2
19716: NEG
19717: PUSH
19718: LD_INT 1
19720: NEG
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: PUSH
19726: LD_INT 2
19728: NEG
19729: PUSH
19730: LD_INT 2
19732: NEG
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19759: LD_ADDR_VAR 0 20
19763: PUSH
19764: LD_INT 0
19766: PUSH
19767: LD_INT 0
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PUSH
19774: LD_INT 0
19776: PUSH
19777: LD_INT 1
19779: NEG
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 1
19787: PUSH
19788: LD_INT 0
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: PUSH
19795: LD_INT 1
19797: PUSH
19798: LD_INT 1
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: PUSH
19805: LD_INT 0
19807: PUSH
19808: LD_INT 1
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: PUSH
19815: LD_INT 1
19817: NEG
19818: PUSH
19819: LD_INT 0
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: PUSH
19826: LD_INT 1
19828: NEG
19829: PUSH
19830: LD_INT 1
19832: NEG
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: LD_INT 1
19840: NEG
19841: PUSH
19842: LD_INT 2
19844: NEG
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: PUSH
19850: LD_INT 0
19852: PUSH
19853: LD_INT 2
19855: NEG
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: PUSH
19861: LD_INT 1
19863: PUSH
19864: LD_INT 1
19866: NEG
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: PUSH
19872: LD_INT 2
19874: PUSH
19875: LD_INT 0
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: PUSH
19882: LD_INT 2
19884: PUSH
19885: LD_INT 1
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: PUSH
19892: LD_INT 2
19894: PUSH
19895: LD_INT 2
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: PUSH
19902: LD_INT 1
19904: PUSH
19905: LD_INT 2
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: PUSH
19912: LD_INT 0
19914: PUSH
19915: LD_INT 2
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: PUSH
19922: LD_INT 1
19924: NEG
19925: PUSH
19926: LD_INT 1
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: PUSH
19933: LD_INT 2
19935: NEG
19936: PUSH
19937: LD_INT 0
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: PUSH
19944: LD_INT 2
19946: NEG
19947: PUSH
19948: LD_INT 1
19950: NEG
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: PUSH
19956: LD_INT 2
19958: NEG
19959: PUSH
19960: LD_INT 2
19962: NEG
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19989: LD_ADDR_VAR 0 21
19993: PUSH
19994: LD_INT 0
19996: PUSH
19997: LD_INT 0
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: PUSH
20004: LD_INT 0
20006: PUSH
20007: LD_INT 1
20009: NEG
20010: PUSH
20011: EMPTY
20012: LIST
20013: LIST
20014: PUSH
20015: LD_INT 1
20017: PUSH
20018: LD_INT 0
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: PUSH
20025: LD_INT 1
20027: PUSH
20028: LD_INT 1
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: PUSH
20035: LD_INT 0
20037: PUSH
20038: LD_INT 1
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: LD_INT 1
20047: NEG
20048: PUSH
20049: LD_INT 0
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: PUSH
20056: LD_INT 1
20058: NEG
20059: PUSH
20060: LD_INT 1
20062: NEG
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: PUSH
20068: LD_INT 1
20070: NEG
20071: PUSH
20072: LD_INT 2
20074: NEG
20075: PUSH
20076: EMPTY
20077: LIST
20078: LIST
20079: PUSH
20080: LD_INT 0
20082: PUSH
20083: LD_INT 2
20085: NEG
20086: PUSH
20087: EMPTY
20088: LIST
20089: LIST
20090: PUSH
20091: LD_INT 1
20093: PUSH
20094: LD_INT 1
20096: NEG
20097: PUSH
20098: EMPTY
20099: LIST
20100: LIST
20101: PUSH
20102: LD_INT 2
20104: PUSH
20105: LD_INT 0
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: PUSH
20112: LD_INT 2
20114: PUSH
20115: LD_INT 1
20117: PUSH
20118: EMPTY
20119: LIST
20120: LIST
20121: PUSH
20122: LD_INT 2
20124: PUSH
20125: LD_INT 2
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: PUSH
20132: LD_INT 1
20134: PUSH
20135: LD_INT 2
20137: PUSH
20138: EMPTY
20139: LIST
20140: LIST
20141: PUSH
20142: LD_INT 0
20144: PUSH
20145: LD_INT 2
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: PUSH
20152: LD_INT 1
20154: NEG
20155: PUSH
20156: LD_INT 1
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PUSH
20163: LD_INT 2
20165: NEG
20166: PUSH
20167: LD_INT 0
20169: PUSH
20170: EMPTY
20171: LIST
20172: LIST
20173: PUSH
20174: LD_INT 2
20176: NEG
20177: PUSH
20178: LD_INT 1
20180: NEG
20181: PUSH
20182: EMPTY
20183: LIST
20184: LIST
20185: PUSH
20186: LD_INT 2
20188: NEG
20189: PUSH
20190: LD_INT 2
20192: NEG
20193: PUSH
20194: EMPTY
20195: LIST
20196: LIST
20197: PUSH
20198: EMPTY
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20219: LD_ADDR_VAR 0 22
20223: PUSH
20224: LD_INT 0
20226: PUSH
20227: LD_INT 0
20229: PUSH
20230: EMPTY
20231: LIST
20232: LIST
20233: PUSH
20234: LD_INT 0
20236: PUSH
20237: LD_INT 1
20239: NEG
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: PUSH
20245: LD_INT 1
20247: PUSH
20248: LD_INT 0
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: PUSH
20255: LD_INT 1
20257: PUSH
20258: LD_INT 1
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: PUSH
20265: LD_INT 0
20267: PUSH
20268: LD_INT 1
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: LD_INT 1
20277: NEG
20278: PUSH
20279: LD_INT 0
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: PUSH
20286: LD_INT 1
20288: NEG
20289: PUSH
20290: LD_INT 1
20292: NEG
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: PUSH
20298: LD_INT 1
20300: NEG
20301: PUSH
20302: LD_INT 2
20304: NEG
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: PUSH
20310: LD_INT 0
20312: PUSH
20313: LD_INT 2
20315: NEG
20316: PUSH
20317: EMPTY
20318: LIST
20319: LIST
20320: PUSH
20321: LD_INT 1
20323: PUSH
20324: LD_INT 1
20326: NEG
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: PUSH
20332: LD_INT 2
20334: PUSH
20335: LD_INT 0
20337: PUSH
20338: EMPTY
20339: LIST
20340: LIST
20341: PUSH
20342: LD_INT 2
20344: PUSH
20345: LD_INT 1
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: PUSH
20352: LD_INT 2
20354: PUSH
20355: LD_INT 2
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: PUSH
20362: LD_INT 1
20364: PUSH
20365: LD_INT 2
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: PUSH
20372: LD_INT 0
20374: PUSH
20375: LD_INT 2
20377: PUSH
20378: EMPTY
20379: LIST
20380: LIST
20381: PUSH
20382: LD_INT 1
20384: NEG
20385: PUSH
20386: LD_INT 1
20388: PUSH
20389: EMPTY
20390: LIST
20391: LIST
20392: PUSH
20393: LD_INT 2
20395: NEG
20396: PUSH
20397: LD_INT 0
20399: PUSH
20400: EMPTY
20401: LIST
20402: LIST
20403: PUSH
20404: LD_INT 2
20406: NEG
20407: PUSH
20408: LD_INT 1
20410: NEG
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: PUSH
20416: LD_INT 2
20418: NEG
20419: PUSH
20420: LD_INT 2
20422: NEG
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: LIST
20448: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20449: LD_ADDR_VAR 0 23
20453: PUSH
20454: LD_INT 0
20456: PUSH
20457: LD_INT 0
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: PUSH
20464: LD_INT 0
20466: PUSH
20467: LD_INT 1
20469: NEG
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: PUSH
20475: LD_INT 1
20477: PUSH
20478: LD_INT 0
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: PUSH
20485: LD_INT 1
20487: PUSH
20488: LD_INT 1
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: PUSH
20495: LD_INT 0
20497: PUSH
20498: LD_INT 1
20500: PUSH
20501: EMPTY
20502: LIST
20503: LIST
20504: PUSH
20505: LD_INT 1
20507: NEG
20508: PUSH
20509: LD_INT 0
20511: PUSH
20512: EMPTY
20513: LIST
20514: LIST
20515: PUSH
20516: LD_INT 1
20518: NEG
20519: PUSH
20520: LD_INT 1
20522: NEG
20523: PUSH
20524: EMPTY
20525: LIST
20526: LIST
20527: PUSH
20528: LD_INT 1
20530: NEG
20531: PUSH
20532: LD_INT 2
20534: NEG
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: PUSH
20540: LD_INT 0
20542: PUSH
20543: LD_INT 2
20545: NEG
20546: PUSH
20547: EMPTY
20548: LIST
20549: LIST
20550: PUSH
20551: LD_INT 1
20553: PUSH
20554: LD_INT 1
20556: NEG
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: PUSH
20562: LD_INT 2
20564: PUSH
20565: LD_INT 0
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: PUSH
20572: LD_INT 2
20574: PUSH
20575: LD_INT 1
20577: PUSH
20578: EMPTY
20579: LIST
20580: LIST
20581: PUSH
20582: LD_INT 2
20584: PUSH
20585: LD_INT 2
20587: PUSH
20588: EMPTY
20589: LIST
20590: LIST
20591: PUSH
20592: LD_INT 1
20594: PUSH
20595: LD_INT 2
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: PUSH
20602: LD_INT 0
20604: PUSH
20605: LD_INT 2
20607: PUSH
20608: EMPTY
20609: LIST
20610: LIST
20611: PUSH
20612: LD_INT 1
20614: NEG
20615: PUSH
20616: LD_INT 1
20618: PUSH
20619: EMPTY
20620: LIST
20621: LIST
20622: PUSH
20623: LD_INT 2
20625: NEG
20626: PUSH
20627: LD_INT 0
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: PUSH
20634: LD_INT 2
20636: NEG
20637: PUSH
20638: LD_INT 1
20640: NEG
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: PUSH
20646: LD_INT 2
20648: NEG
20649: PUSH
20650: LD_INT 2
20652: NEG
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: PUSH
20658: LD_INT 2
20660: NEG
20661: PUSH
20662: LD_INT 3
20664: NEG
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: PUSH
20670: LD_INT 1
20672: NEG
20673: PUSH
20674: LD_INT 3
20676: NEG
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: PUSH
20682: LD_INT 1
20684: PUSH
20685: LD_INT 2
20687: NEG
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: PUSH
20693: LD_INT 2
20695: PUSH
20696: LD_INT 1
20698: NEG
20699: PUSH
20700: EMPTY
20701: LIST
20702: LIST
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20729: LD_ADDR_VAR 0 24
20733: PUSH
20734: LD_INT 0
20736: PUSH
20737: LD_INT 0
20739: PUSH
20740: EMPTY
20741: LIST
20742: LIST
20743: PUSH
20744: LD_INT 0
20746: PUSH
20747: LD_INT 1
20749: NEG
20750: PUSH
20751: EMPTY
20752: LIST
20753: LIST
20754: PUSH
20755: LD_INT 1
20757: PUSH
20758: LD_INT 0
20760: PUSH
20761: EMPTY
20762: LIST
20763: LIST
20764: PUSH
20765: LD_INT 1
20767: PUSH
20768: LD_INT 1
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: PUSH
20775: LD_INT 0
20777: PUSH
20778: LD_INT 1
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: PUSH
20785: LD_INT 1
20787: NEG
20788: PUSH
20789: LD_INT 0
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: PUSH
20796: LD_INT 1
20798: NEG
20799: PUSH
20800: LD_INT 1
20802: NEG
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: PUSH
20808: LD_INT 1
20810: NEG
20811: PUSH
20812: LD_INT 2
20814: NEG
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: PUSH
20820: LD_INT 0
20822: PUSH
20823: LD_INT 2
20825: NEG
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PUSH
20831: LD_INT 1
20833: PUSH
20834: LD_INT 1
20836: NEG
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: PUSH
20842: LD_INT 2
20844: PUSH
20845: LD_INT 0
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PUSH
20852: LD_INT 2
20854: PUSH
20855: LD_INT 1
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: PUSH
20862: LD_INT 2
20864: PUSH
20865: LD_INT 2
20867: PUSH
20868: EMPTY
20869: LIST
20870: LIST
20871: PUSH
20872: LD_INT 1
20874: PUSH
20875: LD_INT 2
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: PUSH
20882: LD_INT 0
20884: PUSH
20885: LD_INT 2
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: PUSH
20892: LD_INT 1
20894: NEG
20895: PUSH
20896: LD_INT 1
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: PUSH
20903: LD_INT 2
20905: NEG
20906: PUSH
20907: LD_INT 0
20909: PUSH
20910: EMPTY
20911: LIST
20912: LIST
20913: PUSH
20914: LD_INT 2
20916: NEG
20917: PUSH
20918: LD_INT 1
20920: NEG
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: PUSH
20926: LD_INT 2
20928: NEG
20929: PUSH
20930: LD_INT 2
20932: NEG
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: PUSH
20938: LD_INT 1
20940: PUSH
20941: LD_INT 2
20943: NEG
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: PUSH
20949: LD_INT 2
20951: PUSH
20952: LD_INT 1
20954: NEG
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: PUSH
20960: LD_INT 3
20962: PUSH
20963: LD_INT 1
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: PUSH
20970: LD_INT 3
20972: PUSH
20973: LD_INT 2
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21005: LD_ADDR_VAR 0 25
21009: PUSH
21010: LD_INT 0
21012: PUSH
21013: LD_INT 0
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: LD_INT 0
21022: PUSH
21023: LD_INT 1
21025: NEG
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: PUSH
21031: LD_INT 1
21033: PUSH
21034: LD_INT 0
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: PUSH
21041: LD_INT 1
21043: PUSH
21044: LD_INT 1
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: PUSH
21051: LD_INT 0
21053: PUSH
21054: LD_INT 1
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: PUSH
21061: LD_INT 1
21063: NEG
21064: PUSH
21065: LD_INT 0
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: PUSH
21072: LD_INT 1
21074: NEG
21075: PUSH
21076: LD_INT 1
21078: NEG
21079: PUSH
21080: EMPTY
21081: LIST
21082: LIST
21083: PUSH
21084: LD_INT 1
21086: NEG
21087: PUSH
21088: LD_INT 2
21090: NEG
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: PUSH
21096: LD_INT 0
21098: PUSH
21099: LD_INT 2
21101: NEG
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: PUSH
21107: LD_INT 1
21109: PUSH
21110: LD_INT 1
21112: NEG
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: PUSH
21118: LD_INT 2
21120: PUSH
21121: LD_INT 0
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PUSH
21128: LD_INT 2
21130: PUSH
21131: LD_INT 1
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PUSH
21138: LD_INT 2
21140: PUSH
21141: LD_INT 2
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: PUSH
21148: LD_INT 1
21150: PUSH
21151: LD_INT 2
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: PUSH
21158: LD_INT 0
21160: PUSH
21161: LD_INT 2
21163: PUSH
21164: EMPTY
21165: LIST
21166: LIST
21167: PUSH
21168: LD_INT 1
21170: NEG
21171: PUSH
21172: LD_INT 1
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: PUSH
21179: LD_INT 2
21181: NEG
21182: PUSH
21183: LD_INT 0
21185: PUSH
21186: EMPTY
21187: LIST
21188: LIST
21189: PUSH
21190: LD_INT 2
21192: NEG
21193: PUSH
21194: LD_INT 1
21196: NEG
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: PUSH
21202: LD_INT 2
21204: NEG
21205: PUSH
21206: LD_INT 2
21208: NEG
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: PUSH
21214: LD_INT 3
21216: PUSH
21217: LD_INT 1
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: PUSH
21224: LD_INT 3
21226: PUSH
21227: LD_INT 2
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: PUSH
21234: LD_INT 2
21236: PUSH
21237: LD_INT 3
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: PUSH
21244: LD_INT 1
21246: PUSH
21247: LD_INT 3
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21279: LD_ADDR_VAR 0 26
21283: PUSH
21284: LD_INT 0
21286: PUSH
21287: LD_INT 0
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: PUSH
21294: LD_INT 0
21296: PUSH
21297: LD_INT 1
21299: NEG
21300: PUSH
21301: EMPTY
21302: LIST
21303: LIST
21304: PUSH
21305: LD_INT 1
21307: PUSH
21308: LD_INT 0
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: PUSH
21315: LD_INT 1
21317: PUSH
21318: LD_INT 1
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: PUSH
21325: LD_INT 0
21327: PUSH
21328: LD_INT 1
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: PUSH
21335: LD_INT 1
21337: NEG
21338: PUSH
21339: LD_INT 0
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: PUSH
21346: LD_INT 1
21348: NEG
21349: PUSH
21350: LD_INT 1
21352: NEG
21353: PUSH
21354: EMPTY
21355: LIST
21356: LIST
21357: PUSH
21358: LD_INT 1
21360: NEG
21361: PUSH
21362: LD_INT 2
21364: NEG
21365: PUSH
21366: EMPTY
21367: LIST
21368: LIST
21369: PUSH
21370: LD_INT 0
21372: PUSH
21373: LD_INT 2
21375: NEG
21376: PUSH
21377: EMPTY
21378: LIST
21379: LIST
21380: PUSH
21381: LD_INT 1
21383: PUSH
21384: LD_INT 1
21386: NEG
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: PUSH
21392: LD_INT 2
21394: PUSH
21395: LD_INT 0
21397: PUSH
21398: EMPTY
21399: LIST
21400: LIST
21401: PUSH
21402: LD_INT 2
21404: PUSH
21405: LD_INT 1
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: PUSH
21412: LD_INT 2
21414: PUSH
21415: LD_INT 2
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PUSH
21422: LD_INT 1
21424: PUSH
21425: LD_INT 2
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: LD_INT 0
21434: PUSH
21435: LD_INT 2
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: LD_INT 1
21444: NEG
21445: PUSH
21446: LD_INT 1
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: PUSH
21453: LD_INT 2
21455: NEG
21456: PUSH
21457: LD_INT 0
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PUSH
21464: LD_INT 2
21466: NEG
21467: PUSH
21468: LD_INT 1
21470: NEG
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: PUSH
21476: LD_INT 2
21478: NEG
21479: PUSH
21480: LD_INT 2
21482: NEG
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: PUSH
21488: LD_INT 2
21490: PUSH
21491: LD_INT 3
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: PUSH
21498: LD_INT 1
21500: PUSH
21501: LD_INT 3
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: PUSH
21508: LD_INT 1
21510: NEG
21511: PUSH
21512: LD_INT 2
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: PUSH
21519: LD_INT 2
21521: NEG
21522: PUSH
21523: LD_INT 1
21525: PUSH
21526: EMPTY
21527: LIST
21528: LIST
21529: PUSH
21530: EMPTY
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21555: LD_ADDR_VAR 0 27
21559: PUSH
21560: LD_INT 0
21562: PUSH
21563: LD_INT 0
21565: PUSH
21566: EMPTY
21567: LIST
21568: LIST
21569: PUSH
21570: LD_INT 0
21572: PUSH
21573: LD_INT 1
21575: NEG
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: PUSH
21581: LD_INT 1
21583: PUSH
21584: LD_INT 0
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PUSH
21591: LD_INT 1
21593: PUSH
21594: LD_INT 1
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: PUSH
21601: LD_INT 0
21603: PUSH
21604: LD_INT 1
21606: PUSH
21607: EMPTY
21608: LIST
21609: LIST
21610: PUSH
21611: LD_INT 1
21613: NEG
21614: PUSH
21615: LD_INT 0
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: PUSH
21622: LD_INT 1
21624: NEG
21625: PUSH
21626: LD_INT 1
21628: NEG
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: PUSH
21634: LD_INT 1
21636: NEG
21637: PUSH
21638: LD_INT 2
21640: NEG
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: PUSH
21646: LD_INT 0
21648: PUSH
21649: LD_INT 2
21651: NEG
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: PUSH
21657: LD_INT 1
21659: PUSH
21660: LD_INT 1
21662: NEG
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: PUSH
21668: LD_INT 2
21670: PUSH
21671: LD_INT 0
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: PUSH
21678: LD_INT 2
21680: PUSH
21681: LD_INT 1
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: PUSH
21688: LD_INT 2
21690: PUSH
21691: LD_INT 2
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: PUSH
21698: LD_INT 1
21700: PUSH
21701: LD_INT 2
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: PUSH
21708: LD_INT 0
21710: PUSH
21711: LD_INT 2
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: PUSH
21718: LD_INT 1
21720: NEG
21721: PUSH
21722: LD_INT 1
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: PUSH
21729: LD_INT 2
21731: NEG
21732: PUSH
21733: LD_INT 0
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: PUSH
21740: LD_INT 2
21742: NEG
21743: PUSH
21744: LD_INT 1
21746: NEG
21747: PUSH
21748: EMPTY
21749: LIST
21750: LIST
21751: PUSH
21752: LD_INT 2
21754: NEG
21755: PUSH
21756: LD_INT 2
21758: NEG
21759: PUSH
21760: EMPTY
21761: LIST
21762: LIST
21763: PUSH
21764: LD_INT 1
21766: NEG
21767: PUSH
21768: LD_INT 2
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: PUSH
21775: LD_INT 2
21777: NEG
21778: PUSH
21779: LD_INT 1
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: PUSH
21786: LD_INT 3
21788: NEG
21789: PUSH
21790: LD_INT 1
21792: NEG
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: PUSH
21798: LD_INT 3
21800: NEG
21801: PUSH
21802: LD_INT 2
21804: NEG
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21835: LD_ADDR_VAR 0 28
21839: PUSH
21840: LD_INT 0
21842: PUSH
21843: LD_INT 0
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PUSH
21850: LD_INT 0
21852: PUSH
21853: LD_INT 1
21855: NEG
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: PUSH
21861: LD_INT 1
21863: PUSH
21864: LD_INT 0
21866: PUSH
21867: EMPTY
21868: LIST
21869: LIST
21870: PUSH
21871: LD_INT 1
21873: PUSH
21874: LD_INT 1
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: PUSH
21881: LD_INT 0
21883: PUSH
21884: LD_INT 1
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: PUSH
21891: LD_INT 1
21893: NEG
21894: PUSH
21895: LD_INT 0
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: PUSH
21902: LD_INT 1
21904: NEG
21905: PUSH
21906: LD_INT 1
21908: NEG
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PUSH
21914: LD_INT 1
21916: NEG
21917: PUSH
21918: LD_INT 2
21920: NEG
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: PUSH
21926: LD_INT 0
21928: PUSH
21929: LD_INT 2
21931: NEG
21932: PUSH
21933: EMPTY
21934: LIST
21935: LIST
21936: PUSH
21937: LD_INT 1
21939: PUSH
21940: LD_INT 1
21942: NEG
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: PUSH
21948: LD_INT 2
21950: PUSH
21951: LD_INT 0
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: PUSH
21958: LD_INT 2
21960: PUSH
21961: LD_INT 1
21963: PUSH
21964: EMPTY
21965: LIST
21966: LIST
21967: PUSH
21968: LD_INT 2
21970: PUSH
21971: LD_INT 2
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: PUSH
21978: LD_INT 1
21980: PUSH
21981: LD_INT 2
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: PUSH
21988: LD_INT 0
21990: PUSH
21991: LD_INT 2
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 1
22000: NEG
22001: PUSH
22002: LD_INT 1
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: PUSH
22009: LD_INT 2
22011: NEG
22012: PUSH
22013: LD_INT 0
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: PUSH
22020: LD_INT 2
22022: NEG
22023: PUSH
22024: LD_INT 1
22026: NEG
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: PUSH
22032: LD_INT 2
22034: NEG
22035: PUSH
22036: LD_INT 2
22038: NEG
22039: PUSH
22040: EMPTY
22041: LIST
22042: LIST
22043: PUSH
22044: LD_INT 2
22046: NEG
22047: PUSH
22048: LD_INT 3
22050: NEG
22051: PUSH
22052: EMPTY
22053: LIST
22054: LIST
22055: PUSH
22056: LD_INT 1
22058: NEG
22059: PUSH
22060: LD_INT 3
22062: NEG
22063: PUSH
22064: EMPTY
22065: LIST
22066: LIST
22067: PUSH
22068: LD_INT 3
22070: NEG
22071: PUSH
22072: LD_INT 1
22074: NEG
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: PUSH
22080: LD_INT 3
22082: NEG
22083: PUSH
22084: LD_INT 2
22086: NEG
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22117: LD_ADDR_VAR 0 29
22121: PUSH
22122: LD_INT 0
22124: PUSH
22125: LD_INT 0
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: PUSH
22132: LD_INT 0
22134: PUSH
22135: LD_INT 1
22137: NEG
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: PUSH
22143: LD_INT 1
22145: PUSH
22146: LD_INT 0
22148: PUSH
22149: EMPTY
22150: LIST
22151: LIST
22152: PUSH
22153: LD_INT 1
22155: PUSH
22156: LD_INT 1
22158: PUSH
22159: EMPTY
22160: LIST
22161: LIST
22162: PUSH
22163: LD_INT 0
22165: PUSH
22166: LD_INT 1
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: PUSH
22173: LD_INT 1
22175: NEG
22176: PUSH
22177: LD_INT 0
22179: PUSH
22180: EMPTY
22181: LIST
22182: LIST
22183: PUSH
22184: LD_INT 1
22186: NEG
22187: PUSH
22188: LD_INT 1
22190: NEG
22191: PUSH
22192: EMPTY
22193: LIST
22194: LIST
22195: PUSH
22196: LD_INT 1
22198: NEG
22199: PUSH
22200: LD_INT 2
22202: NEG
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: PUSH
22208: LD_INT 0
22210: PUSH
22211: LD_INT 2
22213: NEG
22214: PUSH
22215: EMPTY
22216: LIST
22217: LIST
22218: PUSH
22219: LD_INT 1
22221: PUSH
22222: LD_INT 1
22224: NEG
22225: PUSH
22226: EMPTY
22227: LIST
22228: LIST
22229: PUSH
22230: LD_INT 2
22232: PUSH
22233: LD_INT 0
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: PUSH
22240: LD_INT 2
22242: PUSH
22243: LD_INT 1
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: PUSH
22250: LD_INT 1
22252: PUSH
22253: LD_INT 2
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: PUSH
22260: LD_INT 0
22262: PUSH
22263: LD_INT 2
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: PUSH
22270: LD_INT 1
22272: NEG
22273: PUSH
22274: LD_INT 1
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: PUSH
22281: LD_INT 2
22283: NEG
22284: PUSH
22285: LD_INT 1
22287: NEG
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: PUSH
22293: LD_INT 2
22295: NEG
22296: PUSH
22297: LD_INT 2
22299: NEG
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: PUSH
22305: LD_INT 2
22307: NEG
22308: PUSH
22309: LD_INT 3
22311: NEG
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: PUSH
22317: LD_INT 2
22319: PUSH
22320: LD_INT 1
22322: NEG
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: PUSH
22328: LD_INT 3
22330: PUSH
22331: LD_INT 1
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: PUSH
22338: LD_INT 1
22340: PUSH
22341: LD_INT 3
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: PUSH
22348: LD_INT 1
22350: NEG
22351: PUSH
22352: LD_INT 2
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: PUSH
22359: LD_INT 3
22361: NEG
22362: PUSH
22363: LD_INT 2
22365: NEG
22366: PUSH
22367: EMPTY
22368: LIST
22369: LIST
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22396: LD_ADDR_VAR 0 30
22400: PUSH
22401: LD_INT 0
22403: PUSH
22404: LD_INT 0
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: PUSH
22411: LD_INT 0
22413: PUSH
22414: LD_INT 1
22416: NEG
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: PUSH
22422: LD_INT 1
22424: PUSH
22425: LD_INT 0
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: PUSH
22432: LD_INT 1
22434: PUSH
22435: LD_INT 1
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: PUSH
22442: LD_INT 0
22444: PUSH
22445: LD_INT 1
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: PUSH
22452: LD_INT 1
22454: NEG
22455: PUSH
22456: LD_INT 0
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PUSH
22463: LD_INT 1
22465: NEG
22466: PUSH
22467: LD_INT 1
22469: NEG
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: PUSH
22475: LD_INT 1
22477: NEG
22478: PUSH
22479: LD_INT 2
22481: NEG
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: PUSH
22487: LD_INT 0
22489: PUSH
22490: LD_INT 2
22492: NEG
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: PUSH
22498: LD_INT 1
22500: PUSH
22501: LD_INT 1
22503: NEG
22504: PUSH
22505: EMPTY
22506: LIST
22507: LIST
22508: PUSH
22509: LD_INT 2
22511: PUSH
22512: LD_INT 0
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: PUSH
22519: LD_INT 2
22521: PUSH
22522: LD_INT 1
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: PUSH
22529: LD_INT 2
22531: PUSH
22532: LD_INT 2
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 1
22541: PUSH
22542: LD_INT 2
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PUSH
22549: LD_INT 1
22551: NEG
22552: PUSH
22553: LD_INT 1
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: LD_INT 2
22562: NEG
22563: PUSH
22564: LD_INT 0
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PUSH
22571: LD_INT 2
22573: NEG
22574: PUSH
22575: LD_INT 1
22577: NEG
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PUSH
22583: LD_INT 1
22585: NEG
22586: PUSH
22587: LD_INT 3
22589: NEG
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: PUSH
22595: LD_INT 1
22597: PUSH
22598: LD_INT 2
22600: NEG
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: PUSH
22606: LD_INT 3
22608: PUSH
22609: LD_INT 2
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PUSH
22616: LD_INT 2
22618: PUSH
22619: LD_INT 3
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: PUSH
22626: LD_INT 2
22628: NEG
22629: PUSH
22630: LD_INT 1
22632: PUSH
22633: EMPTY
22634: LIST
22635: LIST
22636: PUSH
22637: LD_INT 3
22639: NEG
22640: PUSH
22641: LD_INT 1
22643: NEG
22644: PUSH
22645: EMPTY
22646: LIST
22647: LIST
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22674: LD_ADDR_VAR 0 31
22678: PUSH
22679: LD_INT 0
22681: PUSH
22682: LD_INT 0
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: PUSH
22689: LD_INT 0
22691: PUSH
22692: LD_INT 1
22694: NEG
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: PUSH
22700: LD_INT 1
22702: PUSH
22703: LD_INT 0
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: PUSH
22710: LD_INT 1
22712: PUSH
22713: LD_INT 1
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: PUSH
22720: LD_INT 0
22722: PUSH
22723: LD_INT 1
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: PUSH
22730: LD_INT 1
22732: NEG
22733: PUSH
22734: LD_INT 0
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PUSH
22741: LD_INT 1
22743: NEG
22744: PUSH
22745: LD_INT 1
22747: NEG
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: PUSH
22753: LD_INT 1
22755: NEG
22756: PUSH
22757: LD_INT 2
22759: NEG
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: PUSH
22765: LD_INT 1
22767: PUSH
22768: LD_INT 1
22770: NEG
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: PUSH
22776: LD_INT 2
22778: PUSH
22779: LD_INT 0
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: PUSH
22786: LD_INT 2
22788: PUSH
22789: LD_INT 1
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: PUSH
22796: LD_INT 2
22798: PUSH
22799: LD_INT 2
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: PUSH
22806: LD_INT 1
22808: PUSH
22809: LD_INT 2
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: PUSH
22816: LD_INT 0
22818: PUSH
22819: LD_INT 2
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: PUSH
22826: LD_INT 1
22828: NEG
22829: PUSH
22830: LD_INT 1
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: PUSH
22837: LD_INT 2
22839: NEG
22840: PUSH
22841: LD_INT 1
22843: NEG
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: PUSH
22849: LD_INT 2
22851: NEG
22852: PUSH
22853: LD_INT 2
22855: NEG
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: PUSH
22861: LD_INT 2
22863: NEG
22864: PUSH
22865: LD_INT 3
22867: NEG
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: PUSH
22873: LD_INT 2
22875: PUSH
22876: LD_INT 1
22878: NEG
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: PUSH
22884: LD_INT 3
22886: PUSH
22887: LD_INT 1
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: PUSH
22894: LD_INT 1
22896: PUSH
22897: LD_INT 3
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: PUSH
22904: LD_INT 1
22906: NEG
22907: PUSH
22908: LD_INT 2
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: PUSH
22915: LD_INT 3
22917: NEG
22918: PUSH
22919: LD_INT 2
22921: NEG
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: PUSH
22927: EMPTY
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22952: LD_ADDR_VAR 0 32
22956: PUSH
22957: LD_INT 0
22959: PUSH
22960: LD_INT 0
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: PUSH
22967: LD_INT 0
22969: PUSH
22970: LD_INT 1
22972: NEG
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: PUSH
22978: LD_INT 1
22980: PUSH
22981: LD_INT 0
22983: PUSH
22984: EMPTY
22985: LIST
22986: LIST
22987: PUSH
22988: LD_INT 1
22990: PUSH
22991: LD_INT 1
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: PUSH
22998: LD_INT 0
23000: PUSH
23001: LD_INT 1
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: PUSH
23008: LD_INT 1
23010: NEG
23011: PUSH
23012: LD_INT 0
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: PUSH
23019: LD_INT 1
23021: NEG
23022: PUSH
23023: LD_INT 1
23025: NEG
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: PUSH
23031: LD_INT 1
23033: NEG
23034: PUSH
23035: LD_INT 2
23037: NEG
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: PUSH
23043: LD_INT 0
23045: PUSH
23046: LD_INT 2
23048: NEG
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: PUSH
23054: LD_INT 1
23056: PUSH
23057: LD_INT 1
23059: NEG
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: PUSH
23065: LD_INT 2
23067: PUSH
23068: LD_INT 1
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: PUSH
23075: LD_INT 2
23077: PUSH
23078: LD_INT 2
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: PUSH
23085: LD_INT 1
23087: PUSH
23088: LD_INT 2
23090: PUSH
23091: EMPTY
23092: LIST
23093: LIST
23094: PUSH
23095: LD_INT 0
23097: PUSH
23098: LD_INT 2
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: PUSH
23105: LD_INT 1
23107: NEG
23108: PUSH
23109: LD_INT 1
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: PUSH
23116: LD_INT 2
23118: NEG
23119: PUSH
23120: LD_INT 0
23122: PUSH
23123: EMPTY
23124: LIST
23125: LIST
23126: PUSH
23127: LD_INT 2
23129: NEG
23130: PUSH
23131: LD_INT 1
23133: NEG
23134: PUSH
23135: EMPTY
23136: LIST
23137: LIST
23138: PUSH
23139: LD_INT 1
23141: NEG
23142: PUSH
23143: LD_INT 3
23145: NEG
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: LD_INT 1
23153: PUSH
23154: LD_INT 2
23156: NEG
23157: PUSH
23158: EMPTY
23159: LIST
23160: LIST
23161: PUSH
23162: LD_INT 3
23164: PUSH
23165: LD_INT 2
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: PUSH
23172: LD_INT 2
23174: PUSH
23175: LD_INT 3
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: PUSH
23182: LD_INT 2
23184: NEG
23185: PUSH
23186: LD_INT 1
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: PUSH
23193: LD_INT 3
23195: NEG
23196: PUSH
23197: LD_INT 1
23199: NEG
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PUSH
23205: EMPTY
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23230: LD_ADDR_VAR 0 33
23234: PUSH
23235: LD_INT 0
23237: PUSH
23238: LD_INT 0
23240: PUSH
23241: EMPTY
23242: LIST
23243: LIST
23244: PUSH
23245: LD_INT 0
23247: PUSH
23248: LD_INT 1
23250: NEG
23251: PUSH
23252: EMPTY
23253: LIST
23254: LIST
23255: PUSH
23256: LD_INT 1
23258: PUSH
23259: LD_INT 0
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: PUSH
23266: LD_INT 1
23268: PUSH
23269: LD_INT 1
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: PUSH
23276: LD_INT 0
23278: PUSH
23279: LD_INT 1
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: PUSH
23286: LD_INT 1
23288: NEG
23289: PUSH
23290: LD_INT 0
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: PUSH
23297: LD_INT 1
23299: NEG
23300: PUSH
23301: LD_INT 1
23303: NEG
23304: PUSH
23305: EMPTY
23306: LIST
23307: LIST
23308: PUSH
23309: LD_INT 1
23311: NEG
23312: PUSH
23313: LD_INT 2
23315: NEG
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: PUSH
23321: LD_INT 1
23323: PUSH
23324: LD_INT 1
23326: NEG
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: PUSH
23332: LD_INT 2
23334: PUSH
23335: LD_INT 0
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: PUSH
23342: LD_INT 2
23344: PUSH
23345: LD_INT 1
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: PUSH
23352: LD_INT 1
23354: PUSH
23355: LD_INT 2
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: PUSH
23362: LD_INT 0
23364: PUSH
23365: LD_INT 2
23367: PUSH
23368: EMPTY
23369: LIST
23370: LIST
23371: PUSH
23372: LD_INT 1
23374: NEG
23375: PUSH
23376: LD_INT 1
23378: PUSH
23379: EMPTY
23380: LIST
23381: LIST
23382: PUSH
23383: LD_INT 2
23385: NEG
23386: PUSH
23387: LD_INT 0
23389: PUSH
23390: EMPTY
23391: LIST
23392: LIST
23393: PUSH
23394: LD_INT 2
23396: NEG
23397: PUSH
23398: LD_INT 1
23400: NEG
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: PUSH
23406: LD_INT 2
23408: NEG
23409: PUSH
23410: LD_INT 2
23412: NEG
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: PUSH
23418: LD_INT 2
23420: NEG
23421: PUSH
23422: LD_INT 3
23424: NEG
23425: PUSH
23426: EMPTY
23427: LIST
23428: LIST
23429: PUSH
23430: LD_INT 2
23432: PUSH
23433: LD_INT 1
23435: NEG
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: LD_INT 3
23443: PUSH
23444: LD_INT 1
23446: PUSH
23447: EMPTY
23448: LIST
23449: LIST
23450: PUSH
23451: LD_INT 1
23453: PUSH
23454: LD_INT 3
23456: PUSH
23457: EMPTY
23458: LIST
23459: LIST
23460: PUSH
23461: LD_INT 1
23463: NEG
23464: PUSH
23465: LD_INT 2
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: PUSH
23472: LD_INT 3
23474: NEG
23475: PUSH
23476: LD_INT 2
23478: NEG
23479: PUSH
23480: EMPTY
23481: LIST
23482: LIST
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23509: LD_ADDR_VAR 0 34
23513: PUSH
23514: LD_INT 0
23516: PUSH
23517: LD_INT 0
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: PUSH
23524: LD_INT 0
23526: PUSH
23527: LD_INT 1
23529: NEG
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PUSH
23535: LD_INT 1
23537: PUSH
23538: LD_INT 0
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: PUSH
23545: LD_INT 1
23547: PUSH
23548: LD_INT 1
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: PUSH
23555: LD_INT 0
23557: PUSH
23558: LD_INT 1
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: PUSH
23565: LD_INT 1
23567: NEG
23568: PUSH
23569: LD_INT 0
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PUSH
23576: LD_INT 1
23578: NEG
23579: PUSH
23580: LD_INT 1
23582: NEG
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: PUSH
23588: LD_INT 1
23590: NEG
23591: PUSH
23592: LD_INT 2
23594: NEG
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: PUSH
23600: LD_INT 0
23602: PUSH
23603: LD_INT 2
23605: NEG
23606: PUSH
23607: EMPTY
23608: LIST
23609: LIST
23610: PUSH
23611: LD_INT 1
23613: PUSH
23614: LD_INT 1
23616: NEG
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: PUSH
23622: LD_INT 2
23624: PUSH
23625: LD_INT 1
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: PUSH
23632: LD_INT 2
23634: PUSH
23635: LD_INT 2
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: PUSH
23642: LD_INT 1
23644: PUSH
23645: LD_INT 2
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: PUSH
23652: LD_INT 1
23654: NEG
23655: PUSH
23656: LD_INT 1
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: PUSH
23663: LD_INT 2
23665: NEG
23666: PUSH
23667: LD_INT 0
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: PUSH
23674: LD_INT 2
23676: NEG
23677: PUSH
23678: LD_INT 1
23680: NEG
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: PUSH
23686: LD_INT 2
23688: NEG
23689: PUSH
23690: LD_INT 2
23692: NEG
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PUSH
23698: LD_INT 1
23700: NEG
23701: PUSH
23702: LD_INT 3
23704: NEG
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PUSH
23710: LD_INT 1
23712: PUSH
23713: LD_INT 2
23715: NEG
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: PUSH
23721: LD_INT 3
23723: PUSH
23724: LD_INT 2
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: PUSH
23731: LD_INT 2
23733: PUSH
23734: LD_INT 3
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: PUSH
23741: LD_INT 2
23743: NEG
23744: PUSH
23745: LD_INT 1
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: PUSH
23752: LD_INT 3
23754: NEG
23755: PUSH
23756: LD_INT 1
23758: NEG
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23789: LD_ADDR_VAR 0 35
23793: PUSH
23794: LD_INT 0
23796: PUSH
23797: LD_INT 0
23799: PUSH
23800: EMPTY
23801: LIST
23802: LIST
23803: PUSH
23804: LD_INT 0
23806: PUSH
23807: LD_INT 1
23809: NEG
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: PUSH
23815: LD_INT 1
23817: PUSH
23818: LD_INT 0
23820: PUSH
23821: EMPTY
23822: LIST
23823: LIST
23824: PUSH
23825: LD_INT 1
23827: PUSH
23828: LD_INT 1
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: PUSH
23835: LD_INT 0
23837: PUSH
23838: LD_INT 1
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: PUSH
23845: LD_INT 1
23847: NEG
23848: PUSH
23849: LD_INT 0
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: PUSH
23856: LD_INT 1
23858: NEG
23859: PUSH
23860: LD_INT 1
23862: NEG
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: PUSH
23868: LD_INT 2
23870: PUSH
23871: LD_INT 1
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: PUSH
23878: LD_INT 2
23880: NEG
23881: PUSH
23882: LD_INT 1
23884: NEG
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23901: LD_ADDR_VAR 0 36
23905: PUSH
23906: LD_INT 0
23908: PUSH
23909: LD_INT 0
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: PUSH
23916: LD_INT 0
23918: PUSH
23919: LD_INT 1
23921: NEG
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: PUSH
23927: LD_INT 1
23929: PUSH
23930: LD_INT 0
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: PUSH
23937: LD_INT 1
23939: PUSH
23940: LD_INT 1
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: LD_INT 0
23949: PUSH
23950: LD_INT 1
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: PUSH
23957: LD_INT 1
23959: NEG
23960: PUSH
23961: LD_INT 0
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: PUSH
23968: LD_INT 1
23970: NEG
23971: PUSH
23972: LD_INT 1
23974: NEG
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: PUSH
23980: LD_INT 1
23982: NEG
23983: PUSH
23984: LD_INT 2
23986: NEG
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: PUSH
23992: LD_INT 1
23994: PUSH
23995: LD_INT 2
23997: PUSH
23998: EMPTY
23999: LIST
24000: LIST
24001: PUSH
24002: EMPTY
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24013: LD_ADDR_VAR 0 37
24017: PUSH
24018: LD_INT 0
24020: PUSH
24021: LD_INT 0
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: PUSH
24028: LD_INT 0
24030: PUSH
24031: LD_INT 1
24033: NEG
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PUSH
24039: LD_INT 1
24041: PUSH
24042: LD_INT 0
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: PUSH
24049: LD_INT 1
24051: PUSH
24052: LD_INT 1
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: PUSH
24059: LD_INT 0
24061: PUSH
24062: LD_INT 1
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: PUSH
24069: LD_INT 1
24071: NEG
24072: PUSH
24073: LD_INT 0
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: PUSH
24080: LD_INT 1
24082: NEG
24083: PUSH
24084: LD_INT 1
24086: NEG
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: PUSH
24092: LD_INT 1
24094: PUSH
24095: LD_INT 1
24097: NEG
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: PUSH
24103: LD_INT 1
24105: NEG
24106: PUSH
24107: LD_INT 1
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24125: LD_ADDR_VAR 0 38
24129: PUSH
24130: LD_INT 0
24132: PUSH
24133: LD_INT 0
24135: PUSH
24136: EMPTY
24137: LIST
24138: LIST
24139: PUSH
24140: LD_INT 0
24142: PUSH
24143: LD_INT 1
24145: NEG
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: PUSH
24151: LD_INT 1
24153: PUSH
24154: LD_INT 0
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: PUSH
24161: LD_INT 1
24163: PUSH
24164: LD_INT 1
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: PUSH
24171: LD_INT 0
24173: PUSH
24174: LD_INT 1
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: PUSH
24181: LD_INT 1
24183: NEG
24184: PUSH
24185: LD_INT 0
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: PUSH
24192: LD_INT 1
24194: NEG
24195: PUSH
24196: LD_INT 1
24198: NEG
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: PUSH
24204: LD_INT 2
24206: PUSH
24207: LD_INT 1
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: PUSH
24214: LD_INT 2
24216: NEG
24217: PUSH
24218: LD_INT 1
24220: NEG
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: PUSH
24226: EMPTY
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24237: LD_ADDR_VAR 0 39
24241: PUSH
24242: LD_INT 0
24244: PUSH
24245: LD_INT 0
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: PUSH
24252: LD_INT 0
24254: PUSH
24255: LD_INT 1
24257: NEG
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PUSH
24263: LD_INT 1
24265: PUSH
24266: LD_INT 0
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: PUSH
24273: LD_INT 1
24275: PUSH
24276: LD_INT 1
24278: PUSH
24279: EMPTY
24280: LIST
24281: LIST
24282: PUSH
24283: LD_INT 0
24285: PUSH
24286: LD_INT 1
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: PUSH
24293: LD_INT 1
24295: NEG
24296: PUSH
24297: LD_INT 0
24299: PUSH
24300: EMPTY
24301: LIST
24302: LIST
24303: PUSH
24304: LD_INT 1
24306: NEG
24307: PUSH
24308: LD_INT 1
24310: NEG
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: PUSH
24316: LD_INT 1
24318: NEG
24319: PUSH
24320: LD_INT 2
24322: NEG
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: PUSH
24328: LD_INT 1
24330: PUSH
24331: LD_INT 2
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: PUSH
24338: EMPTY
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24349: LD_ADDR_VAR 0 40
24353: PUSH
24354: LD_INT 0
24356: PUSH
24357: LD_INT 0
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: PUSH
24364: LD_INT 0
24366: PUSH
24367: LD_INT 1
24369: NEG
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: PUSH
24375: LD_INT 1
24377: PUSH
24378: LD_INT 0
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PUSH
24385: LD_INT 1
24387: PUSH
24388: LD_INT 1
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: PUSH
24395: LD_INT 0
24397: PUSH
24398: LD_INT 1
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: PUSH
24405: LD_INT 1
24407: NEG
24408: PUSH
24409: LD_INT 0
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PUSH
24416: LD_INT 1
24418: NEG
24419: PUSH
24420: LD_INT 1
24422: NEG
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: PUSH
24428: LD_INT 1
24430: PUSH
24431: LD_INT 1
24433: NEG
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: PUSH
24439: LD_INT 1
24441: NEG
24442: PUSH
24443: LD_INT 1
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24461: LD_ADDR_VAR 0 41
24465: PUSH
24466: LD_INT 0
24468: PUSH
24469: LD_INT 0
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: PUSH
24476: LD_INT 0
24478: PUSH
24479: LD_INT 1
24481: NEG
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: PUSH
24487: LD_INT 1
24489: PUSH
24490: LD_INT 0
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 1
24499: PUSH
24500: LD_INT 1
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: PUSH
24507: LD_INT 0
24509: PUSH
24510: LD_INT 1
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: LD_INT 1
24519: NEG
24520: PUSH
24521: LD_INT 0
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: PUSH
24528: LD_INT 1
24530: NEG
24531: PUSH
24532: LD_INT 1
24534: NEG
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: LD_INT 1
24542: NEG
24543: PUSH
24544: LD_INT 2
24546: NEG
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PUSH
24552: LD_INT 1
24554: PUSH
24555: LD_INT 1
24557: NEG
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: PUSH
24563: LD_INT 2
24565: PUSH
24566: LD_INT 0
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: PUSH
24573: LD_INT 2
24575: PUSH
24576: LD_INT 1
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: PUSH
24583: LD_INT 2
24585: PUSH
24586: LD_INT 2
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: PUSH
24593: LD_INT 1
24595: PUSH
24596: LD_INT 2
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PUSH
24603: LD_INT 1
24605: NEG
24606: PUSH
24607: LD_INT 1
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: PUSH
24614: LD_INT 2
24616: NEG
24617: PUSH
24618: LD_INT 0
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: PUSH
24625: LD_INT 2
24627: NEG
24628: PUSH
24629: LD_INT 1
24631: NEG
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: PUSH
24637: LD_INT 2
24639: NEG
24640: PUSH
24641: LD_INT 2
24643: NEG
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: PUSH
24649: LD_INT 2
24651: NEG
24652: PUSH
24653: LD_INT 3
24655: NEG
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: PUSH
24661: LD_INT 2
24663: PUSH
24664: LD_INT 1
24666: NEG
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: PUSH
24672: LD_INT 3
24674: PUSH
24675: LD_INT 0
24677: PUSH
24678: EMPTY
24679: LIST
24680: LIST
24681: PUSH
24682: LD_INT 3
24684: PUSH
24685: LD_INT 1
24687: PUSH
24688: EMPTY
24689: LIST
24690: LIST
24691: PUSH
24692: LD_INT 3
24694: PUSH
24695: LD_INT 2
24697: PUSH
24698: EMPTY
24699: LIST
24700: LIST
24701: PUSH
24702: LD_INT 3
24704: PUSH
24705: LD_INT 3
24707: PUSH
24708: EMPTY
24709: LIST
24710: LIST
24711: PUSH
24712: LD_INT 2
24714: PUSH
24715: LD_INT 3
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: PUSH
24722: LD_INT 2
24724: NEG
24725: PUSH
24726: LD_INT 1
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: PUSH
24733: LD_INT 3
24735: NEG
24736: PUSH
24737: LD_INT 0
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PUSH
24744: LD_INT 3
24746: NEG
24747: PUSH
24748: LD_INT 1
24750: NEG
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: PUSH
24756: LD_INT 3
24758: NEG
24759: PUSH
24760: LD_INT 2
24762: NEG
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: PUSH
24768: LD_INT 3
24770: NEG
24771: PUSH
24772: LD_INT 3
24774: NEG
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24811: LD_ADDR_VAR 0 42
24815: PUSH
24816: LD_INT 0
24818: PUSH
24819: LD_INT 0
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: PUSH
24826: LD_INT 0
24828: PUSH
24829: LD_INT 1
24831: NEG
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: PUSH
24837: LD_INT 1
24839: PUSH
24840: LD_INT 0
24842: PUSH
24843: EMPTY
24844: LIST
24845: LIST
24846: PUSH
24847: LD_INT 1
24849: PUSH
24850: LD_INT 1
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 0
24859: PUSH
24860: LD_INT 1
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: PUSH
24867: LD_INT 1
24869: NEG
24870: PUSH
24871: LD_INT 0
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: PUSH
24878: LD_INT 1
24880: NEG
24881: PUSH
24882: LD_INT 1
24884: NEG
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PUSH
24890: LD_INT 1
24892: NEG
24893: PUSH
24894: LD_INT 2
24896: NEG
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: PUSH
24902: LD_INT 0
24904: PUSH
24905: LD_INT 2
24907: NEG
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: PUSH
24913: LD_INT 1
24915: PUSH
24916: LD_INT 1
24918: NEG
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: PUSH
24924: LD_INT 2
24926: PUSH
24927: LD_INT 1
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: PUSH
24934: LD_INT 2
24936: PUSH
24937: LD_INT 2
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: PUSH
24944: LD_INT 1
24946: PUSH
24947: LD_INT 2
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: PUSH
24954: LD_INT 0
24956: PUSH
24957: LD_INT 2
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: PUSH
24964: LD_INT 1
24966: NEG
24967: PUSH
24968: LD_INT 1
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: PUSH
24975: LD_INT 2
24977: NEG
24978: PUSH
24979: LD_INT 1
24981: NEG
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: PUSH
24987: LD_INT 2
24989: NEG
24990: PUSH
24991: LD_INT 2
24993: NEG
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: PUSH
24999: LD_INT 2
25001: NEG
25002: PUSH
25003: LD_INT 3
25005: NEG
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: PUSH
25011: LD_INT 1
25013: NEG
25014: PUSH
25015: LD_INT 3
25017: NEG
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PUSH
25023: LD_INT 0
25025: PUSH
25026: LD_INT 3
25028: NEG
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: PUSH
25034: LD_INT 1
25036: PUSH
25037: LD_INT 2
25039: NEG
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: LD_INT 3
25047: PUSH
25048: LD_INT 2
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: PUSH
25055: LD_INT 3
25057: PUSH
25058: LD_INT 3
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: PUSH
25065: LD_INT 2
25067: PUSH
25068: LD_INT 3
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PUSH
25075: LD_INT 1
25077: PUSH
25078: LD_INT 3
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: PUSH
25085: LD_INT 0
25087: PUSH
25088: LD_INT 3
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: LD_INT 1
25097: NEG
25098: PUSH
25099: LD_INT 2
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: PUSH
25106: LD_INT 3
25108: NEG
25109: PUSH
25110: LD_INT 2
25112: NEG
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: PUSH
25118: LD_INT 3
25120: NEG
25121: PUSH
25122: LD_INT 3
25124: NEG
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25161: LD_ADDR_VAR 0 43
25165: PUSH
25166: LD_INT 0
25168: PUSH
25169: LD_INT 0
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: LD_INT 0
25178: PUSH
25179: LD_INT 1
25181: NEG
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: PUSH
25187: LD_INT 1
25189: PUSH
25190: LD_INT 0
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: LD_INT 1
25199: PUSH
25200: LD_INT 1
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: LD_INT 0
25209: PUSH
25210: LD_INT 1
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 1
25219: NEG
25220: PUSH
25221: LD_INT 0
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 1
25230: NEG
25231: PUSH
25232: LD_INT 1
25234: NEG
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: LD_INT 1
25242: NEG
25243: PUSH
25244: LD_INT 2
25246: NEG
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PUSH
25252: LD_INT 0
25254: PUSH
25255: LD_INT 2
25257: NEG
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PUSH
25263: LD_INT 1
25265: PUSH
25266: LD_INT 1
25268: NEG
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: PUSH
25274: LD_INT 2
25276: PUSH
25277: LD_INT 0
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: PUSH
25284: LD_INT 2
25286: PUSH
25287: LD_INT 1
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: PUSH
25294: LD_INT 1
25296: PUSH
25297: LD_INT 2
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: PUSH
25304: LD_INT 0
25306: PUSH
25307: LD_INT 2
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 1
25316: NEG
25317: PUSH
25318: LD_INT 1
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PUSH
25325: LD_INT 2
25327: NEG
25328: PUSH
25329: LD_INT 0
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: PUSH
25336: LD_INT 2
25338: NEG
25339: PUSH
25340: LD_INT 1
25342: NEG
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: PUSH
25348: LD_INT 1
25350: NEG
25351: PUSH
25352: LD_INT 3
25354: NEG
25355: PUSH
25356: EMPTY
25357: LIST
25358: LIST
25359: PUSH
25360: LD_INT 0
25362: PUSH
25363: LD_INT 3
25365: NEG
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: LD_INT 1
25373: PUSH
25374: LD_INT 2
25376: NEG
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PUSH
25382: LD_INT 2
25384: PUSH
25385: LD_INT 1
25387: NEG
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: PUSH
25393: LD_INT 3
25395: PUSH
25396: LD_INT 0
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 3
25405: PUSH
25406: LD_INT 1
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PUSH
25413: LD_INT 1
25415: PUSH
25416: LD_INT 3
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: PUSH
25423: LD_INT 0
25425: PUSH
25426: LD_INT 3
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PUSH
25433: LD_INT 1
25435: NEG
25436: PUSH
25437: LD_INT 2
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: PUSH
25444: LD_INT 2
25446: NEG
25447: PUSH
25448: LD_INT 1
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: PUSH
25455: LD_INT 3
25457: NEG
25458: PUSH
25459: LD_INT 0
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PUSH
25466: LD_INT 3
25468: NEG
25469: PUSH
25470: LD_INT 1
25472: NEG
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25509: LD_ADDR_VAR 0 44
25513: PUSH
25514: LD_INT 0
25516: PUSH
25517: LD_INT 0
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 0
25526: PUSH
25527: LD_INT 1
25529: NEG
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: PUSH
25535: LD_INT 1
25537: PUSH
25538: LD_INT 0
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: PUSH
25545: LD_INT 1
25547: PUSH
25548: LD_INT 1
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: LD_INT 0
25557: PUSH
25558: LD_INT 1
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: PUSH
25565: LD_INT 1
25567: NEG
25568: PUSH
25569: LD_INT 0
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: LD_INT 1
25578: NEG
25579: PUSH
25580: LD_INT 1
25582: NEG
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: LD_INT 1
25590: NEG
25591: PUSH
25592: LD_INT 2
25594: NEG
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: PUSH
25600: LD_INT 1
25602: PUSH
25603: LD_INT 1
25605: NEG
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PUSH
25611: LD_INT 2
25613: PUSH
25614: LD_INT 0
25616: PUSH
25617: EMPTY
25618: LIST
25619: LIST
25620: PUSH
25621: LD_INT 2
25623: PUSH
25624: LD_INT 1
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: LD_INT 2
25633: PUSH
25634: LD_INT 2
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: PUSH
25641: LD_INT 1
25643: PUSH
25644: LD_INT 2
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: PUSH
25651: LD_INT 1
25653: NEG
25654: PUSH
25655: LD_INT 1
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: PUSH
25662: LD_INT 2
25664: NEG
25665: PUSH
25666: LD_INT 0
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: PUSH
25673: LD_INT 2
25675: NEG
25676: PUSH
25677: LD_INT 1
25679: NEG
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: LD_INT 2
25687: NEG
25688: PUSH
25689: LD_INT 2
25691: NEG
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: PUSH
25697: LD_INT 2
25699: NEG
25700: PUSH
25701: LD_INT 3
25703: NEG
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: LD_INT 2
25711: PUSH
25712: LD_INT 1
25714: NEG
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PUSH
25720: LD_INT 3
25722: PUSH
25723: LD_INT 0
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: PUSH
25730: LD_INT 3
25732: PUSH
25733: LD_INT 1
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: PUSH
25740: LD_INT 3
25742: PUSH
25743: LD_INT 2
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: PUSH
25750: LD_INT 3
25752: PUSH
25753: LD_INT 3
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PUSH
25760: LD_INT 2
25762: PUSH
25763: LD_INT 3
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PUSH
25770: LD_INT 2
25772: NEG
25773: PUSH
25774: LD_INT 1
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PUSH
25781: LD_INT 3
25783: NEG
25784: PUSH
25785: LD_INT 0
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: LD_INT 3
25794: NEG
25795: PUSH
25796: LD_INT 1
25798: NEG
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: PUSH
25804: LD_INT 3
25806: NEG
25807: PUSH
25808: LD_INT 2
25810: NEG
25811: PUSH
25812: EMPTY
25813: LIST
25814: LIST
25815: PUSH
25816: LD_INT 3
25818: NEG
25819: PUSH
25820: LD_INT 3
25822: NEG
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25859: LD_ADDR_VAR 0 45
25863: PUSH
25864: LD_INT 0
25866: PUSH
25867: LD_INT 0
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: LD_INT 0
25876: PUSH
25877: LD_INT 1
25879: NEG
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: PUSH
25885: LD_INT 1
25887: PUSH
25888: LD_INT 0
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: PUSH
25895: LD_INT 1
25897: PUSH
25898: LD_INT 1
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: LD_INT 0
25907: PUSH
25908: LD_INT 1
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 1
25917: NEG
25918: PUSH
25919: LD_INT 0
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 1
25928: NEG
25929: PUSH
25930: LD_INT 1
25932: NEG
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PUSH
25938: LD_INT 1
25940: NEG
25941: PUSH
25942: LD_INT 2
25944: NEG
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: PUSH
25950: LD_INT 0
25952: PUSH
25953: LD_INT 2
25955: NEG
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: PUSH
25961: LD_INT 1
25963: PUSH
25964: LD_INT 1
25966: NEG
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: LD_INT 2
25974: PUSH
25975: LD_INT 1
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PUSH
25982: LD_INT 2
25984: PUSH
25985: LD_INT 2
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PUSH
25992: LD_INT 1
25994: PUSH
25995: LD_INT 2
25997: PUSH
25998: EMPTY
25999: LIST
26000: LIST
26001: PUSH
26002: LD_INT 0
26004: PUSH
26005: LD_INT 2
26007: PUSH
26008: EMPTY
26009: LIST
26010: LIST
26011: PUSH
26012: LD_INT 1
26014: NEG
26015: PUSH
26016: LD_INT 1
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: PUSH
26023: LD_INT 2
26025: NEG
26026: PUSH
26027: LD_INT 1
26029: NEG
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: PUSH
26035: LD_INT 2
26037: NEG
26038: PUSH
26039: LD_INT 2
26041: NEG
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 2
26049: NEG
26050: PUSH
26051: LD_INT 3
26053: NEG
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 1
26061: NEG
26062: PUSH
26063: LD_INT 3
26065: NEG
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: LD_INT 0
26073: PUSH
26074: LD_INT 3
26076: NEG
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 1
26084: PUSH
26085: LD_INT 2
26087: NEG
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: PUSH
26093: LD_INT 3
26095: PUSH
26096: LD_INT 2
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: LD_INT 3
26105: PUSH
26106: LD_INT 3
26108: PUSH
26109: EMPTY
26110: LIST
26111: LIST
26112: PUSH
26113: LD_INT 2
26115: PUSH
26116: LD_INT 3
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PUSH
26123: LD_INT 1
26125: PUSH
26126: LD_INT 3
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PUSH
26133: LD_INT 0
26135: PUSH
26136: LD_INT 3
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: LD_INT 1
26145: NEG
26146: PUSH
26147: LD_INT 2
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 3
26156: NEG
26157: PUSH
26158: LD_INT 2
26160: NEG
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: PUSH
26166: LD_INT 3
26168: NEG
26169: PUSH
26170: LD_INT 3
26172: NEG
26173: PUSH
26174: EMPTY
26175: LIST
26176: LIST
26177: PUSH
26178: EMPTY
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: LIST
26199: LIST
26200: LIST
26201: LIST
26202: LIST
26203: LIST
26204: LIST
26205: LIST
26206: LIST
26207: LIST
26208: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26209: LD_ADDR_VAR 0 46
26213: PUSH
26214: LD_INT 0
26216: PUSH
26217: LD_INT 0
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: PUSH
26224: LD_INT 0
26226: PUSH
26227: LD_INT 1
26229: NEG
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: LD_INT 1
26237: PUSH
26238: LD_INT 0
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PUSH
26245: LD_INT 1
26247: PUSH
26248: LD_INT 1
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 0
26257: PUSH
26258: LD_INT 1
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 1
26267: NEG
26268: PUSH
26269: LD_INT 0
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: LD_INT 1
26278: NEG
26279: PUSH
26280: LD_INT 1
26282: NEG
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PUSH
26288: LD_INT 1
26290: NEG
26291: PUSH
26292: LD_INT 2
26294: NEG
26295: PUSH
26296: EMPTY
26297: LIST
26298: LIST
26299: PUSH
26300: LD_INT 0
26302: PUSH
26303: LD_INT 2
26305: NEG
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: PUSH
26311: LD_INT 1
26313: PUSH
26314: LD_INT 1
26316: NEG
26317: PUSH
26318: EMPTY
26319: LIST
26320: LIST
26321: PUSH
26322: LD_INT 2
26324: PUSH
26325: LD_INT 0
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PUSH
26332: LD_INT 2
26334: PUSH
26335: LD_INT 1
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: LD_INT 1
26344: PUSH
26345: LD_INT 2
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: PUSH
26352: LD_INT 0
26354: PUSH
26355: LD_INT 2
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PUSH
26362: LD_INT 1
26364: NEG
26365: PUSH
26366: LD_INT 1
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PUSH
26373: LD_INT 2
26375: NEG
26376: PUSH
26377: LD_INT 0
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: LD_INT 2
26386: NEG
26387: PUSH
26388: LD_INT 1
26390: NEG
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 1
26398: NEG
26399: PUSH
26400: LD_INT 3
26402: NEG
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: PUSH
26408: LD_INT 0
26410: PUSH
26411: LD_INT 3
26413: NEG
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: PUSH
26419: LD_INT 1
26421: PUSH
26422: LD_INT 2
26424: NEG
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: LD_INT 2
26432: PUSH
26433: LD_INT 1
26435: NEG
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: PUSH
26441: LD_INT 3
26443: PUSH
26444: LD_INT 0
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: LD_INT 3
26453: PUSH
26454: LD_INT 1
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: PUSH
26461: LD_INT 1
26463: PUSH
26464: LD_INT 3
26466: PUSH
26467: EMPTY
26468: LIST
26469: LIST
26470: PUSH
26471: LD_INT 0
26473: PUSH
26474: LD_INT 3
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: PUSH
26481: LD_INT 1
26483: NEG
26484: PUSH
26485: LD_INT 2
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PUSH
26492: LD_INT 2
26494: NEG
26495: PUSH
26496: LD_INT 1
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: LD_INT 3
26505: NEG
26506: PUSH
26507: LD_INT 0
26509: PUSH
26510: EMPTY
26511: LIST
26512: LIST
26513: PUSH
26514: LD_INT 3
26516: NEG
26517: PUSH
26518: LD_INT 1
26520: NEG
26521: PUSH
26522: EMPTY
26523: LIST
26524: LIST
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26557: LD_ADDR_VAR 0 47
26561: PUSH
26562: LD_INT 0
26564: PUSH
26565: LD_INT 0
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PUSH
26572: LD_INT 0
26574: PUSH
26575: LD_INT 1
26577: NEG
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 1
26585: PUSH
26586: LD_INT 0
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: PUSH
26593: LD_INT 1
26595: PUSH
26596: LD_INT 1
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PUSH
26603: LD_INT 0
26605: PUSH
26606: LD_INT 1
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: PUSH
26613: LD_INT 1
26615: NEG
26616: PUSH
26617: LD_INT 0
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 1
26626: NEG
26627: PUSH
26628: LD_INT 1
26630: NEG
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: LD_INT 1
26638: NEG
26639: PUSH
26640: LD_INT 2
26642: NEG
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PUSH
26648: LD_INT 0
26650: PUSH
26651: LD_INT 2
26653: NEG
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: LD_INT 1
26661: PUSH
26662: LD_INT 1
26664: NEG
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: LD_INT 2
26672: NEG
26673: PUSH
26674: LD_INT 1
26676: NEG
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PUSH
26682: LD_INT 2
26684: NEG
26685: PUSH
26686: LD_INT 2
26688: NEG
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26708: LD_ADDR_VAR 0 48
26712: PUSH
26713: LD_INT 0
26715: PUSH
26716: LD_INT 0
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: LD_INT 0
26725: PUSH
26726: LD_INT 1
26728: NEG
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: PUSH
26734: LD_INT 1
26736: PUSH
26737: LD_INT 0
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: PUSH
26744: LD_INT 1
26746: PUSH
26747: LD_INT 1
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: LD_INT 0
26756: PUSH
26757: LD_INT 1
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: PUSH
26764: LD_INT 1
26766: NEG
26767: PUSH
26768: LD_INT 0
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PUSH
26775: LD_INT 1
26777: NEG
26778: PUSH
26779: LD_INT 1
26781: NEG
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: PUSH
26787: LD_INT 1
26789: NEG
26790: PUSH
26791: LD_INT 2
26793: NEG
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PUSH
26799: LD_INT 0
26801: PUSH
26802: LD_INT 2
26804: NEG
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PUSH
26810: LD_INT 1
26812: PUSH
26813: LD_INT 1
26815: NEG
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PUSH
26821: LD_INT 2
26823: PUSH
26824: LD_INT 0
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PUSH
26831: LD_INT 2
26833: PUSH
26834: LD_INT 1
26836: PUSH
26837: EMPTY
26838: LIST
26839: LIST
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26855: LD_ADDR_VAR 0 49
26859: PUSH
26860: LD_INT 0
26862: PUSH
26863: LD_INT 0
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: PUSH
26870: LD_INT 0
26872: PUSH
26873: LD_INT 1
26875: NEG
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PUSH
26881: LD_INT 1
26883: PUSH
26884: LD_INT 0
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PUSH
26891: LD_INT 1
26893: PUSH
26894: LD_INT 1
26896: PUSH
26897: EMPTY
26898: LIST
26899: LIST
26900: PUSH
26901: LD_INT 0
26903: PUSH
26904: LD_INT 1
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: PUSH
26911: LD_INT 1
26913: NEG
26914: PUSH
26915: LD_INT 0
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: PUSH
26922: LD_INT 1
26924: NEG
26925: PUSH
26926: LD_INT 1
26928: NEG
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: PUSH
26934: LD_INT 1
26936: PUSH
26937: LD_INT 1
26939: NEG
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: PUSH
26945: LD_INT 2
26947: PUSH
26948: LD_INT 0
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: PUSH
26955: LD_INT 2
26957: PUSH
26958: LD_INT 1
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: PUSH
26965: LD_INT 2
26967: PUSH
26968: LD_INT 2
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: PUSH
26975: LD_INT 1
26977: PUSH
26978: LD_INT 2
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26999: LD_ADDR_VAR 0 50
27003: PUSH
27004: LD_INT 0
27006: PUSH
27007: LD_INT 0
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: PUSH
27014: LD_INT 0
27016: PUSH
27017: LD_INT 1
27019: NEG
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PUSH
27025: LD_INT 1
27027: PUSH
27028: LD_INT 0
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: PUSH
27035: LD_INT 1
27037: PUSH
27038: LD_INT 1
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PUSH
27045: LD_INT 0
27047: PUSH
27048: LD_INT 1
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: PUSH
27055: LD_INT 1
27057: NEG
27058: PUSH
27059: LD_INT 0
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PUSH
27066: LD_INT 1
27068: NEG
27069: PUSH
27070: LD_INT 1
27072: NEG
27073: PUSH
27074: EMPTY
27075: LIST
27076: LIST
27077: PUSH
27078: LD_INT 2
27080: PUSH
27081: LD_INT 1
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: PUSH
27088: LD_INT 2
27090: PUSH
27091: LD_INT 2
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: PUSH
27098: LD_INT 1
27100: PUSH
27101: LD_INT 2
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PUSH
27108: LD_INT 0
27110: PUSH
27111: LD_INT 2
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: PUSH
27118: LD_INT 1
27120: NEG
27121: PUSH
27122: LD_INT 1
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: LIST
27133: LIST
27134: LIST
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27143: LD_ADDR_VAR 0 51
27147: PUSH
27148: LD_INT 0
27150: PUSH
27151: LD_INT 0
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: PUSH
27158: LD_INT 0
27160: PUSH
27161: LD_INT 1
27163: NEG
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: PUSH
27169: LD_INT 1
27171: PUSH
27172: LD_INT 0
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: PUSH
27179: LD_INT 1
27181: PUSH
27182: LD_INT 1
27184: PUSH
27185: EMPTY
27186: LIST
27187: LIST
27188: PUSH
27189: LD_INT 0
27191: PUSH
27192: LD_INT 1
27194: PUSH
27195: EMPTY
27196: LIST
27197: LIST
27198: PUSH
27199: LD_INT 1
27201: NEG
27202: PUSH
27203: LD_INT 0
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: PUSH
27210: LD_INT 1
27212: NEG
27213: PUSH
27214: LD_INT 1
27216: NEG
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: PUSH
27222: LD_INT 1
27224: PUSH
27225: LD_INT 2
27227: PUSH
27228: EMPTY
27229: LIST
27230: LIST
27231: PUSH
27232: LD_INT 0
27234: PUSH
27235: LD_INT 2
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: LD_INT 1
27244: NEG
27245: PUSH
27246: LD_INT 1
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PUSH
27253: LD_INT 2
27255: NEG
27256: PUSH
27257: LD_INT 0
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PUSH
27264: LD_INT 2
27266: NEG
27267: PUSH
27268: LD_INT 1
27270: NEG
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: LIST
27280: LIST
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: LIST
27289: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27290: LD_ADDR_VAR 0 52
27294: PUSH
27295: LD_INT 0
27297: PUSH
27298: LD_INT 0
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PUSH
27305: LD_INT 0
27307: PUSH
27308: LD_INT 1
27310: NEG
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: PUSH
27316: LD_INT 1
27318: PUSH
27319: LD_INT 0
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: LD_INT 1
27328: PUSH
27329: LD_INT 1
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 0
27338: PUSH
27339: LD_INT 1
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: LD_INT 1
27348: NEG
27349: PUSH
27350: LD_INT 0
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 1
27359: NEG
27360: PUSH
27361: LD_INT 1
27363: NEG
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: PUSH
27369: LD_INT 1
27371: NEG
27372: PUSH
27373: LD_INT 2
27375: NEG
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: PUSH
27381: LD_INT 1
27383: NEG
27384: PUSH
27385: LD_INT 1
27387: PUSH
27388: EMPTY
27389: LIST
27390: LIST
27391: PUSH
27392: LD_INT 2
27394: NEG
27395: PUSH
27396: LD_INT 0
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PUSH
27403: LD_INT 2
27405: NEG
27406: PUSH
27407: LD_INT 1
27409: NEG
27410: PUSH
27411: EMPTY
27412: LIST
27413: LIST
27414: PUSH
27415: LD_INT 2
27417: NEG
27418: PUSH
27419: LD_INT 2
27421: NEG
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: PUSH
27427: EMPTY
27428: LIST
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27441: LD_ADDR_VAR 0 53
27445: PUSH
27446: LD_INT 0
27448: PUSH
27449: LD_INT 0
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: PUSH
27456: LD_INT 0
27458: PUSH
27459: LD_INT 1
27461: NEG
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PUSH
27467: LD_INT 1
27469: PUSH
27470: LD_INT 0
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 1
27479: PUSH
27480: LD_INT 1
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PUSH
27487: LD_INT 0
27489: PUSH
27490: LD_INT 1
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: LD_INT 1
27499: NEG
27500: PUSH
27501: LD_INT 0
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: PUSH
27508: LD_INT 1
27510: NEG
27511: PUSH
27512: LD_INT 1
27514: NEG
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 1
27522: NEG
27523: PUSH
27524: LD_INT 2
27526: NEG
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: PUSH
27532: LD_INT 0
27534: PUSH
27535: LD_INT 2
27537: NEG
27538: PUSH
27539: EMPTY
27540: LIST
27541: LIST
27542: PUSH
27543: LD_INT 1
27545: PUSH
27546: LD_INT 1
27548: NEG
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: PUSH
27554: LD_INT 2
27556: PUSH
27557: LD_INT 0
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: PUSH
27564: LD_INT 2
27566: PUSH
27567: LD_INT 1
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: LD_INT 2
27576: PUSH
27577: LD_INT 2
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PUSH
27584: LD_INT 1
27586: PUSH
27587: LD_INT 2
27589: PUSH
27590: EMPTY
27591: LIST
27592: LIST
27593: PUSH
27594: LD_INT 0
27596: PUSH
27597: LD_INT 2
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: PUSH
27604: LD_INT 1
27606: NEG
27607: PUSH
27608: LD_INT 1
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: PUSH
27615: LD_INT 2
27617: NEG
27618: PUSH
27619: LD_INT 0
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: PUSH
27626: LD_INT 2
27628: NEG
27629: PUSH
27630: LD_INT 1
27632: NEG
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PUSH
27638: LD_INT 2
27640: NEG
27641: PUSH
27642: LD_INT 2
27644: NEG
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27671: LD_ADDR_VAR 0 54
27675: PUSH
27676: LD_INT 0
27678: PUSH
27679: LD_INT 0
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PUSH
27686: LD_INT 0
27688: PUSH
27689: LD_INT 1
27691: NEG
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 1
27699: PUSH
27700: LD_INT 0
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: PUSH
27707: LD_INT 1
27709: PUSH
27710: LD_INT 1
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: PUSH
27717: LD_INT 0
27719: PUSH
27720: LD_INT 1
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 1
27729: NEG
27730: PUSH
27731: LD_INT 0
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: PUSH
27738: LD_INT 1
27740: NEG
27741: PUSH
27742: LD_INT 1
27744: NEG
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: PUSH
27750: LD_INT 1
27752: NEG
27753: PUSH
27754: LD_INT 2
27756: NEG
27757: PUSH
27758: EMPTY
27759: LIST
27760: LIST
27761: PUSH
27762: LD_INT 0
27764: PUSH
27765: LD_INT 2
27767: NEG
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: PUSH
27773: LD_INT 1
27775: PUSH
27776: LD_INT 1
27778: NEG
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: PUSH
27784: LD_INT 2
27786: PUSH
27787: LD_INT 0
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PUSH
27794: LD_INT 2
27796: PUSH
27797: LD_INT 1
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PUSH
27804: LD_INT 2
27806: PUSH
27807: LD_INT 2
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: PUSH
27814: LD_INT 1
27816: PUSH
27817: LD_INT 2
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PUSH
27824: LD_INT 0
27826: PUSH
27827: LD_INT 2
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: PUSH
27834: LD_INT 1
27836: NEG
27837: PUSH
27838: LD_INT 1
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PUSH
27845: LD_INT 2
27847: NEG
27848: PUSH
27849: LD_INT 0
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: PUSH
27856: LD_INT 2
27858: NEG
27859: PUSH
27860: LD_INT 1
27862: NEG
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: PUSH
27868: LD_INT 2
27870: NEG
27871: PUSH
27872: LD_INT 2
27874: NEG
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: LIST
27884: LIST
27885: LIST
27886: LIST
27887: LIST
27888: LIST
27889: LIST
27890: LIST
27891: LIST
27892: LIST
27893: LIST
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27901: LD_ADDR_VAR 0 55
27905: PUSH
27906: LD_INT 0
27908: PUSH
27909: LD_INT 0
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PUSH
27916: LD_INT 0
27918: PUSH
27919: LD_INT 1
27921: NEG
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PUSH
27927: LD_INT 1
27929: PUSH
27930: LD_INT 0
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 1
27939: PUSH
27940: LD_INT 1
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: LD_INT 0
27949: PUSH
27950: LD_INT 1
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: LD_INT 1
27959: NEG
27960: PUSH
27961: LD_INT 0
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: PUSH
27968: LD_INT 1
27970: NEG
27971: PUSH
27972: LD_INT 1
27974: NEG
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: PUSH
27980: LD_INT 1
27982: NEG
27983: PUSH
27984: LD_INT 2
27986: NEG
27987: PUSH
27988: EMPTY
27989: LIST
27990: LIST
27991: PUSH
27992: LD_INT 0
27994: PUSH
27995: LD_INT 2
27997: NEG
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: LD_INT 1
28005: PUSH
28006: LD_INT 1
28008: NEG
28009: PUSH
28010: EMPTY
28011: LIST
28012: LIST
28013: PUSH
28014: LD_INT 2
28016: PUSH
28017: LD_INT 0
28019: PUSH
28020: EMPTY
28021: LIST
28022: LIST
28023: PUSH
28024: LD_INT 2
28026: PUSH
28027: LD_INT 1
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: PUSH
28034: LD_INT 2
28036: PUSH
28037: LD_INT 2
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: PUSH
28044: LD_INT 1
28046: PUSH
28047: LD_INT 2
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PUSH
28054: LD_INT 0
28056: PUSH
28057: LD_INT 2
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PUSH
28064: LD_INT 1
28066: NEG
28067: PUSH
28068: LD_INT 1
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: PUSH
28075: LD_INT 2
28077: NEG
28078: PUSH
28079: LD_INT 0
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: PUSH
28086: LD_INT 2
28088: NEG
28089: PUSH
28090: LD_INT 1
28092: NEG
28093: PUSH
28094: EMPTY
28095: LIST
28096: LIST
28097: PUSH
28098: LD_INT 2
28100: NEG
28101: PUSH
28102: LD_INT 2
28104: NEG
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: LIST
28123: LIST
28124: LIST
28125: LIST
28126: LIST
28127: LIST
28128: LIST
28129: LIST
28130: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28131: LD_ADDR_VAR 0 56
28135: PUSH
28136: LD_INT 0
28138: PUSH
28139: LD_INT 0
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PUSH
28146: LD_INT 0
28148: PUSH
28149: LD_INT 1
28151: NEG
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PUSH
28157: LD_INT 1
28159: PUSH
28160: LD_INT 0
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 1
28169: PUSH
28170: LD_INT 1
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 0
28179: PUSH
28180: LD_INT 1
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 1
28189: NEG
28190: PUSH
28191: LD_INT 0
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PUSH
28198: LD_INT 1
28200: NEG
28201: PUSH
28202: LD_INT 1
28204: NEG
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 1
28212: NEG
28213: PUSH
28214: LD_INT 2
28216: NEG
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: PUSH
28222: LD_INT 0
28224: PUSH
28225: LD_INT 2
28227: NEG
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: PUSH
28233: LD_INT 1
28235: PUSH
28236: LD_INT 1
28238: NEG
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: PUSH
28244: LD_INT 2
28246: PUSH
28247: LD_INT 0
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PUSH
28254: LD_INT 2
28256: PUSH
28257: LD_INT 1
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: PUSH
28264: LD_INT 2
28266: PUSH
28267: LD_INT 2
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: PUSH
28274: LD_INT 1
28276: PUSH
28277: LD_INT 2
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: PUSH
28284: LD_INT 0
28286: PUSH
28287: LD_INT 2
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: PUSH
28294: LD_INT 1
28296: NEG
28297: PUSH
28298: LD_INT 1
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: PUSH
28305: LD_INT 2
28307: NEG
28308: PUSH
28309: LD_INT 0
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: PUSH
28316: LD_INT 2
28318: NEG
28319: PUSH
28320: LD_INT 1
28322: NEG
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 2
28330: NEG
28331: PUSH
28332: LD_INT 2
28334: NEG
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: LIST
28344: LIST
28345: LIST
28346: LIST
28347: LIST
28348: LIST
28349: LIST
28350: LIST
28351: LIST
28352: LIST
28353: LIST
28354: LIST
28355: LIST
28356: LIST
28357: LIST
28358: LIST
28359: LIST
28360: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28361: LD_ADDR_VAR 0 57
28365: PUSH
28366: LD_INT 0
28368: PUSH
28369: LD_INT 0
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PUSH
28376: LD_INT 0
28378: PUSH
28379: LD_INT 1
28381: NEG
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: LD_INT 1
28389: PUSH
28390: LD_INT 0
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 1
28399: PUSH
28400: LD_INT 1
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: LD_INT 0
28409: PUSH
28410: LD_INT 1
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 1
28419: NEG
28420: PUSH
28421: LD_INT 0
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: PUSH
28428: LD_INT 1
28430: NEG
28431: PUSH
28432: LD_INT 1
28434: NEG
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: LD_INT 1
28442: NEG
28443: PUSH
28444: LD_INT 2
28446: NEG
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: PUSH
28452: LD_INT 0
28454: PUSH
28455: LD_INT 2
28457: NEG
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PUSH
28463: LD_INT 1
28465: PUSH
28466: LD_INT 1
28468: NEG
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: PUSH
28474: LD_INT 2
28476: PUSH
28477: LD_INT 0
28479: PUSH
28480: EMPTY
28481: LIST
28482: LIST
28483: PUSH
28484: LD_INT 2
28486: PUSH
28487: LD_INT 1
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: PUSH
28494: LD_INT 2
28496: PUSH
28497: LD_INT 2
28499: PUSH
28500: EMPTY
28501: LIST
28502: LIST
28503: PUSH
28504: LD_INT 1
28506: PUSH
28507: LD_INT 2
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: PUSH
28514: LD_INT 0
28516: PUSH
28517: LD_INT 2
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: PUSH
28524: LD_INT 1
28526: NEG
28527: PUSH
28528: LD_INT 1
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: PUSH
28535: LD_INT 2
28537: NEG
28538: PUSH
28539: LD_INT 0
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: LD_INT 2
28548: NEG
28549: PUSH
28550: LD_INT 1
28552: NEG
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: PUSH
28558: LD_INT 2
28560: NEG
28561: PUSH
28562: LD_INT 2
28564: NEG
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: LIST
28580: LIST
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28591: LD_ADDR_VAR 0 58
28595: PUSH
28596: LD_INT 0
28598: PUSH
28599: LD_INT 0
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PUSH
28606: LD_INT 0
28608: PUSH
28609: LD_INT 1
28611: NEG
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: LD_INT 1
28619: PUSH
28620: LD_INT 0
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PUSH
28627: LD_INT 1
28629: PUSH
28630: LD_INT 1
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: LD_INT 0
28639: PUSH
28640: LD_INT 1
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: LD_INT 1
28649: NEG
28650: PUSH
28651: LD_INT 0
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: LD_INT 1
28660: NEG
28661: PUSH
28662: LD_INT 1
28664: NEG
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: LD_INT 1
28672: NEG
28673: PUSH
28674: LD_INT 2
28676: NEG
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: LD_INT 0
28684: PUSH
28685: LD_INT 2
28687: NEG
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: PUSH
28693: LD_INT 1
28695: PUSH
28696: LD_INT 1
28698: NEG
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: PUSH
28704: LD_INT 2
28706: PUSH
28707: LD_INT 0
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: PUSH
28714: LD_INT 2
28716: PUSH
28717: LD_INT 1
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: PUSH
28724: LD_INT 2
28726: PUSH
28727: LD_INT 2
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: PUSH
28734: LD_INT 1
28736: PUSH
28737: LD_INT 2
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: PUSH
28744: LD_INT 0
28746: PUSH
28747: LD_INT 2
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: PUSH
28754: LD_INT 1
28756: NEG
28757: PUSH
28758: LD_INT 1
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: PUSH
28765: LD_INT 2
28767: NEG
28768: PUSH
28769: LD_INT 0
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: PUSH
28776: LD_INT 2
28778: NEG
28779: PUSH
28780: LD_INT 1
28782: NEG
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PUSH
28788: LD_INT 2
28790: NEG
28791: PUSH
28792: LD_INT 2
28794: NEG
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: LIST
28804: LIST
28805: LIST
28806: LIST
28807: LIST
28808: LIST
28809: LIST
28810: LIST
28811: LIST
28812: LIST
28813: LIST
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: LIST
28819: LIST
28820: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28821: LD_ADDR_VAR 0 59
28825: PUSH
28826: LD_INT 0
28828: PUSH
28829: LD_INT 0
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: PUSH
28836: LD_INT 0
28838: PUSH
28839: LD_INT 1
28841: NEG
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PUSH
28847: LD_INT 1
28849: PUSH
28850: LD_INT 0
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 1
28859: PUSH
28860: LD_INT 1
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: PUSH
28867: LD_INT 0
28869: PUSH
28870: LD_INT 1
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: PUSH
28877: LD_INT 1
28879: NEG
28880: PUSH
28881: LD_INT 0
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: PUSH
28888: LD_INT 1
28890: NEG
28891: PUSH
28892: LD_INT 1
28894: NEG
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: LIST
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28909: LD_ADDR_VAR 0 60
28913: PUSH
28914: LD_INT 0
28916: PUSH
28917: LD_INT 0
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: LD_INT 0
28926: PUSH
28927: LD_INT 1
28929: NEG
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: PUSH
28935: LD_INT 1
28937: PUSH
28938: LD_INT 0
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: LD_INT 1
28947: PUSH
28948: LD_INT 1
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: PUSH
28955: LD_INT 0
28957: PUSH
28958: LD_INT 1
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: PUSH
28965: LD_INT 1
28967: NEG
28968: PUSH
28969: LD_INT 0
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: LD_INT 1
28978: NEG
28979: PUSH
28980: LD_INT 1
28982: NEG
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: LIST
28995: LIST
28996: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28997: LD_ADDR_VAR 0 61
29001: PUSH
29002: LD_INT 0
29004: PUSH
29005: LD_INT 0
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: LD_INT 0
29014: PUSH
29015: LD_INT 1
29017: NEG
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: PUSH
29023: LD_INT 1
29025: PUSH
29026: LD_INT 0
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: PUSH
29033: LD_INT 1
29035: PUSH
29036: LD_INT 1
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: PUSH
29043: LD_INT 0
29045: PUSH
29046: LD_INT 1
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: PUSH
29053: LD_INT 1
29055: NEG
29056: PUSH
29057: LD_INT 0
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: LD_INT 1
29066: NEG
29067: PUSH
29068: LD_INT 1
29070: NEG
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: LIST
29080: LIST
29081: LIST
29082: LIST
29083: LIST
29084: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29085: LD_ADDR_VAR 0 62
29089: PUSH
29090: LD_INT 0
29092: PUSH
29093: LD_INT 0
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PUSH
29100: LD_INT 0
29102: PUSH
29103: LD_INT 1
29105: NEG
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PUSH
29111: LD_INT 1
29113: PUSH
29114: LD_INT 0
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: PUSH
29121: LD_INT 1
29123: PUSH
29124: LD_INT 1
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 0
29133: PUSH
29134: LD_INT 1
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: LD_INT 1
29143: NEG
29144: PUSH
29145: LD_INT 0
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: LD_INT 1
29154: NEG
29155: PUSH
29156: LD_INT 1
29158: NEG
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29173: LD_ADDR_VAR 0 63
29177: PUSH
29178: LD_INT 0
29180: PUSH
29181: LD_INT 0
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: PUSH
29188: LD_INT 0
29190: PUSH
29191: LD_INT 1
29193: NEG
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 1
29201: PUSH
29202: LD_INT 0
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: PUSH
29209: LD_INT 1
29211: PUSH
29212: LD_INT 1
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: LD_INT 0
29221: PUSH
29222: LD_INT 1
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: LD_INT 1
29231: NEG
29232: PUSH
29233: LD_INT 0
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: PUSH
29240: LD_INT 1
29242: NEG
29243: PUSH
29244: LD_INT 1
29246: NEG
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: LIST
29256: LIST
29257: LIST
29258: LIST
29259: LIST
29260: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29261: LD_ADDR_VAR 0 64
29265: PUSH
29266: LD_INT 0
29268: PUSH
29269: LD_INT 0
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: PUSH
29276: LD_INT 0
29278: PUSH
29279: LD_INT 1
29281: NEG
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: LD_INT 1
29289: PUSH
29290: LD_INT 0
29292: PUSH
29293: EMPTY
29294: LIST
29295: LIST
29296: PUSH
29297: LD_INT 1
29299: PUSH
29300: LD_INT 1
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PUSH
29307: LD_INT 0
29309: PUSH
29310: LD_INT 1
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: LD_INT 1
29319: NEG
29320: PUSH
29321: LD_INT 0
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: LD_INT 1
29330: NEG
29331: PUSH
29332: LD_INT 1
29334: NEG
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: LIST
29344: LIST
29345: LIST
29346: LIST
29347: LIST
29348: ST_TO_ADDR
// end ; 1 :
29349: GO 35246
29351: LD_INT 1
29353: DOUBLE
29354: EQUAL
29355: IFTRUE 29359
29357: GO 31982
29359: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29360: LD_ADDR_VAR 0 11
29364: PUSH
29365: LD_INT 1
29367: NEG
29368: PUSH
29369: LD_INT 3
29371: NEG
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: PUSH
29377: LD_INT 0
29379: PUSH
29380: LD_INT 3
29382: NEG
29383: PUSH
29384: EMPTY
29385: LIST
29386: LIST
29387: PUSH
29388: LD_INT 1
29390: PUSH
29391: LD_INT 2
29393: NEG
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: LIST
29403: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29404: LD_ADDR_VAR 0 12
29408: PUSH
29409: LD_INT 2
29411: PUSH
29412: LD_INT 1
29414: NEG
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: PUSH
29420: LD_INT 3
29422: PUSH
29423: LD_INT 0
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PUSH
29430: LD_INT 3
29432: PUSH
29433: LD_INT 1
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: LIST
29444: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29445: LD_ADDR_VAR 0 13
29449: PUSH
29450: LD_INT 3
29452: PUSH
29453: LD_INT 2
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: PUSH
29460: LD_INT 3
29462: PUSH
29463: LD_INT 3
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 2
29472: PUSH
29473: LD_INT 3
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: LIST
29484: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29485: LD_ADDR_VAR 0 14
29489: PUSH
29490: LD_INT 1
29492: PUSH
29493: LD_INT 3
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: PUSH
29500: LD_INT 0
29502: PUSH
29503: LD_INT 3
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: PUSH
29510: LD_INT 1
29512: NEG
29513: PUSH
29514: LD_INT 2
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: LIST
29525: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29526: LD_ADDR_VAR 0 15
29530: PUSH
29531: LD_INT 2
29533: NEG
29534: PUSH
29535: LD_INT 1
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: PUSH
29542: LD_INT 3
29544: NEG
29545: PUSH
29546: LD_INT 0
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: PUSH
29553: LD_INT 3
29555: NEG
29556: PUSH
29557: LD_INT 1
29559: NEG
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: LIST
29569: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29570: LD_ADDR_VAR 0 16
29574: PUSH
29575: LD_INT 2
29577: NEG
29578: PUSH
29579: LD_INT 3
29581: NEG
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PUSH
29587: LD_INT 3
29589: NEG
29590: PUSH
29591: LD_INT 2
29593: NEG
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PUSH
29599: LD_INT 3
29601: NEG
29602: PUSH
29603: LD_INT 3
29605: NEG
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: LIST
29615: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29616: LD_ADDR_VAR 0 17
29620: PUSH
29621: LD_INT 1
29623: NEG
29624: PUSH
29625: LD_INT 3
29627: NEG
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 0
29635: PUSH
29636: LD_INT 3
29638: NEG
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: PUSH
29644: LD_INT 1
29646: PUSH
29647: LD_INT 2
29649: NEG
29650: PUSH
29651: EMPTY
29652: LIST
29653: LIST
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: LIST
29659: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29660: LD_ADDR_VAR 0 18
29664: PUSH
29665: LD_INT 2
29667: PUSH
29668: LD_INT 1
29670: NEG
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: PUSH
29676: LD_INT 3
29678: PUSH
29679: LD_INT 0
29681: PUSH
29682: EMPTY
29683: LIST
29684: LIST
29685: PUSH
29686: LD_INT 3
29688: PUSH
29689: LD_INT 1
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: LIST
29700: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29701: LD_ADDR_VAR 0 19
29705: PUSH
29706: LD_INT 3
29708: PUSH
29709: LD_INT 2
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: PUSH
29716: LD_INT 3
29718: PUSH
29719: LD_INT 3
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: PUSH
29726: LD_INT 2
29728: PUSH
29729: LD_INT 3
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: LIST
29740: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29741: LD_ADDR_VAR 0 20
29745: PUSH
29746: LD_INT 1
29748: PUSH
29749: LD_INT 3
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: PUSH
29756: LD_INT 0
29758: PUSH
29759: LD_INT 3
29761: PUSH
29762: EMPTY
29763: LIST
29764: LIST
29765: PUSH
29766: LD_INT 1
29768: NEG
29769: PUSH
29770: LD_INT 2
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: LIST
29781: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29782: LD_ADDR_VAR 0 21
29786: PUSH
29787: LD_INT 2
29789: NEG
29790: PUSH
29791: LD_INT 1
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: PUSH
29798: LD_INT 3
29800: NEG
29801: PUSH
29802: LD_INT 0
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: PUSH
29809: LD_INT 3
29811: NEG
29812: PUSH
29813: LD_INT 1
29815: NEG
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: LIST
29825: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29826: LD_ADDR_VAR 0 22
29830: PUSH
29831: LD_INT 2
29833: NEG
29834: PUSH
29835: LD_INT 3
29837: NEG
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: PUSH
29843: LD_INT 3
29845: NEG
29846: PUSH
29847: LD_INT 2
29849: NEG
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: LD_INT 3
29857: NEG
29858: PUSH
29859: LD_INT 3
29861: NEG
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: LIST
29871: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29872: LD_ADDR_VAR 0 23
29876: PUSH
29877: LD_INT 0
29879: PUSH
29880: LD_INT 3
29882: NEG
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: PUSH
29888: LD_INT 1
29890: NEG
29891: PUSH
29892: LD_INT 4
29894: NEG
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: LD_INT 1
29902: PUSH
29903: LD_INT 3
29905: NEG
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: LIST
29915: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29916: LD_ADDR_VAR 0 24
29920: PUSH
29921: LD_INT 3
29923: PUSH
29924: LD_INT 0
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: PUSH
29931: LD_INT 3
29933: PUSH
29934: LD_INT 1
29936: NEG
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: PUSH
29942: LD_INT 4
29944: PUSH
29945: LD_INT 1
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: LIST
29956: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29957: LD_ADDR_VAR 0 25
29961: PUSH
29962: LD_INT 3
29964: PUSH
29965: LD_INT 3
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PUSH
29972: LD_INT 4
29974: PUSH
29975: LD_INT 3
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: LD_INT 3
29984: PUSH
29985: LD_INT 4
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: LIST
29996: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29997: LD_ADDR_VAR 0 26
30001: PUSH
30002: LD_INT 0
30004: PUSH
30005: LD_INT 3
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 1
30014: PUSH
30015: LD_INT 4
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: LD_INT 1
30024: NEG
30025: PUSH
30026: LD_INT 3
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: PUSH
30033: EMPTY
30034: LIST
30035: LIST
30036: LIST
30037: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30038: LD_ADDR_VAR 0 27
30042: PUSH
30043: LD_INT 3
30045: NEG
30046: PUSH
30047: LD_INT 0
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: LD_INT 3
30056: NEG
30057: PUSH
30058: LD_INT 1
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: PUSH
30065: LD_INT 4
30067: NEG
30068: PUSH
30069: LD_INT 1
30071: NEG
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: LIST
30081: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30082: LD_ADDR_VAR 0 28
30086: PUSH
30087: LD_INT 3
30089: NEG
30090: PUSH
30091: LD_INT 3
30093: NEG
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PUSH
30099: LD_INT 3
30101: NEG
30102: PUSH
30103: LD_INT 4
30105: NEG
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PUSH
30111: LD_INT 4
30113: NEG
30114: PUSH
30115: LD_INT 3
30117: NEG
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: LIST
30127: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30128: LD_ADDR_VAR 0 29
30132: PUSH
30133: LD_INT 1
30135: NEG
30136: PUSH
30137: LD_INT 3
30139: NEG
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: LD_INT 0
30147: PUSH
30148: LD_INT 3
30150: NEG
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: PUSH
30156: LD_INT 1
30158: PUSH
30159: LD_INT 2
30161: NEG
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: PUSH
30167: LD_INT 1
30169: NEG
30170: PUSH
30171: LD_INT 4
30173: NEG
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PUSH
30179: LD_INT 0
30181: PUSH
30182: LD_INT 4
30184: NEG
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 1
30192: PUSH
30193: LD_INT 3
30195: NEG
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: PUSH
30201: LD_INT 1
30203: NEG
30204: PUSH
30205: LD_INT 5
30207: NEG
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: PUSH
30213: LD_INT 0
30215: PUSH
30216: LD_INT 5
30218: NEG
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: PUSH
30224: LD_INT 1
30226: PUSH
30227: LD_INT 4
30229: NEG
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: PUSH
30235: LD_INT 1
30237: NEG
30238: PUSH
30239: LD_INT 6
30241: NEG
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: LD_INT 0
30249: PUSH
30250: LD_INT 6
30252: NEG
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PUSH
30258: LD_INT 1
30260: PUSH
30261: LD_INT 5
30263: NEG
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: LIST
30273: LIST
30274: LIST
30275: LIST
30276: LIST
30277: LIST
30278: LIST
30279: LIST
30280: LIST
30281: LIST
30282: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30283: LD_ADDR_VAR 0 30
30287: PUSH
30288: LD_INT 2
30290: PUSH
30291: LD_INT 1
30293: NEG
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 3
30301: PUSH
30302: LD_INT 0
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 3
30311: PUSH
30312: LD_INT 1
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: LD_INT 3
30321: PUSH
30322: LD_INT 1
30324: NEG
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: LD_INT 4
30332: PUSH
30333: LD_INT 0
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 4
30342: PUSH
30343: LD_INT 1
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: LD_INT 4
30352: PUSH
30353: LD_INT 1
30355: NEG
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PUSH
30361: LD_INT 5
30363: PUSH
30364: LD_INT 0
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PUSH
30371: LD_INT 5
30373: PUSH
30374: LD_INT 1
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PUSH
30381: LD_INT 5
30383: PUSH
30384: LD_INT 1
30386: NEG
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: LD_INT 6
30394: PUSH
30395: LD_INT 0
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: LD_INT 6
30404: PUSH
30405: LD_INT 1
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: LIST
30418: LIST
30419: LIST
30420: LIST
30421: LIST
30422: LIST
30423: LIST
30424: LIST
30425: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30426: LD_ADDR_VAR 0 31
30430: PUSH
30431: LD_INT 3
30433: PUSH
30434: LD_INT 2
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 3
30443: PUSH
30444: LD_INT 3
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 2
30453: PUSH
30454: LD_INT 3
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PUSH
30461: LD_INT 4
30463: PUSH
30464: LD_INT 3
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PUSH
30471: LD_INT 4
30473: PUSH
30474: LD_INT 4
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PUSH
30481: LD_INT 3
30483: PUSH
30484: LD_INT 4
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: PUSH
30491: LD_INT 5
30493: PUSH
30494: LD_INT 4
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: LD_INT 5
30503: PUSH
30504: LD_INT 5
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 4
30513: PUSH
30514: LD_INT 5
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 6
30523: PUSH
30524: LD_INT 5
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: LD_INT 6
30533: PUSH
30534: LD_INT 6
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: PUSH
30541: LD_INT 5
30543: PUSH
30544: LD_INT 6
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30565: LD_ADDR_VAR 0 32
30569: PUSH
30570: LD_INT 1
30572: PUSH
30573: LD_INT 3
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 0
30582: PUSH
30583: LD_INT 3
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 1
30592: NEG
30593: PUSH
30594: LD_INT 2
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: LD_INT 1
30603: PUSH
30604: LD_INT 4
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: PUSH
30611: LD_INT 0
30613: PUSH
30614: LD_INT 4
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: PUSH
30621: LD_INT 1
30623: NEG
30624: PUSH
30625: LD_INT 3
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PUSH
30632: LD_INT 1
30634: PUSH
30635: LD_INT 5
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: PUSH
30642: LD_INT 0
30644: PUSH
30645: LD_INT 5
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: PUSH
30652: LD_INT 1
30654: NEG
30655: PUSH
30656: LD_INT 4
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PUSH
30663: LD_INT 1
30665: PUSH
30666: LD_INT 6
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PUSH
30673: LD_INT 0
30675: PUSH
30676: LD_INT 6
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 1
30685: NEG
30686: PUSH
30687: LD_INT 5
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30708: LD_ADDR_VAR 0 33
30712: PUSH
30713: LD_INT 2
30715: NEG
30716: PUSH
30717: LD_INT 1
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: LD_INT 3
30726: NEG
30727: PUSH
30728: LD_INT 0
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PUSH
30735: LD_INT 3
30737: NEG
30738: PUSH
30739: LD_INT 1
30741: NEG
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: LD_INT 3
30749: NEG
30750: PUSH
30751: LD_INT 1
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: LD_INT 4
30760: NEG
30761: PUSH
30762: LD_INT 0
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: LD_INT 4
30771: NEG
30772: PUSH
30773: LD_INT 1
30775: NEG
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: PUSH
30781: LD_INT 4
30783: NEG
30784: PUSH
30785: LD_INT 1
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: PUSH
30792: LD_INT 5
30794: NEG
30795: PUSH
30796: LD_INT 0
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: PUSH
30803: LD_INT 5
30805: NEG
30806: PUSH
30807: LD_INT 1
30809: NEG
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: LD_INT 5
30817: NEG
30818: PUSH
30819: LD_INT 1
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: LD_INT 6
30828: NEG
30829: PUSH
30830: LD_INT 0
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: PUSH
30837: LD_INT 6
30839: NEG
30840: PUSH
30841: LD_INT 1
30843: NEG
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: LIST
30862: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30863: LD_ADDR_VAR 0 34
30867: PUSH
30868: LD_INT 2
30870: NEG
30871: PUSH
30872: LD_INT 3
30874: NEG
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: PUSH
30880: LD_INT 3
30882: NEG
30883: PUSH
30884: LD_INT 2
30886: NEG
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: PUSH
30892: LD_INT 3
30894: NEG
30895: PUSH
30896: LD_INT 3
30898: NEG
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: LD_INT 3
30906: NEG
30907: PUSH
30908: LD_INT 4
30910: NEG
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: LD_INT 4
30918: NEG
30919: PUSH
30920: LD_INT 3
30922: NEG
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: LD_INT 4
30930: NEG
30931: PUSH
30932: LD_INT 4
30934: NEG
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 4
30942: NEG
30943: PUSH
30944: LD_INT 5
30946: NEG
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: PUSH
30952: LD_INT 5
30954: NEG
30955: PUSH
30956: LD_INT 4
30958: NEG
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PUSH
30964: LD_INT 5
30966: NEG
30967: PUSH
30968: LD_INT 5
30970: NEG
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: PUSH
30976: LD_INT 5
30978: NEG
30979: PUSH
30980: LD_INT 6
30982: NEG
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: PUSH
30988: LD_INT 6
30990: NEG
30991: PUSH
30992: LD_INT 5
30994: NEG
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: LD_INT 6
31002: NEG
31003: PUSH
31004: LD_INT 6
31006: NEG
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31026: LD_ADDR_VAR 0 41
31030: PUSH
31031: LD_INT 0
31033: PUSH
31034: LD_INT 2
31036: NEG
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PUSH
31042: LD_INT 1
31044: NEG
31045: PUSH
31046: LD_INT 3
31048: NEG
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: PUSH
31054: LD_INT 1
31056: PUSH
31057: LD_INT 2
31059: NEG
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: LIST
31069: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31070: LD_ADDR_VAR 0 42
31074: PUSH
31075: LD_INT 2
31077: PUSH
31078: LD_INT 0
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: LD_INT 2
31087: PUSH
31088: LD_INT 1
31090: NEG
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 3
31098: PUSH
31099: LD_INT 1
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: LIST
31110: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31111: LD_ADDR_VAR 0 43
31115: PUSH
31116: LD_INT 2
31118: PUSH
31119: LD_INT 2
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PUSH
31126: LD_INT 3
31128: PUSH
31129: LD_INT 2
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: LD_INT 2
31138: PUSH
31139: LD_INT 3
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: LIST
31150: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31151: LD_ADDR_VAR 0 44
31155: PUSH
31156: LD_INT 0
31158: PUSH
31159: LD_INT 2
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: LD_INT 1
31168: PUSH
31169: LD_INT 3
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: LD_INT 1
31178: NEG
31179: PUSH
31180: LD_INT 2
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: LIST
31191: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31192: LD_ADDR_VAR 0 45
31196: PUSH
31197: LD_INT 2
31199: NEG
31200: PUSH
31201: LD_INT 0
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: PUSH
31208: LD_INT 2
31210: NEG
31211: PUSH
31212: LD_INT 1
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PUSH
31219: LD_INT 3
31221: NEG
31222: PUSH
31223: LD_INT 1
31225: NEG
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: LIST
31235: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31236: LD_ADDR_VAR 0 46
31240: PUSH
31241: LD_INT 2
31243: NEG
31244: PUSH
31245: LD_INT 2
31247: NEG
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PUSH
31253: LD_INT 2
31255: NEG
31256: PUSH
31257: LD_INT 3
31259: NEG
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PUSH
31265: LD_INT 3
31267: NEG
31268: PUSH
31269: LD_INT 2
31271: NEG
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: LIST
31281: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31282: LD_ADDR_VAR 0 47
31286: PUSH
31287: LD_INT 2
31289: NEG
31290: PUSH
31291: LD_INT 3
31293: NEG
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: LD_INT 1
31301: NEG
31302: PUSH
31303: LD_INT 3
31305: NEG
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31315: LD_ADDR_VAR 0 48
31319: PUSH
31320: LD_INT 1
31322: PUSH
31323: LD_INT 2
31325: NEG
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 2
31333: PUSH
31334: LD_INT 1
31336: NEG
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31346: LD_ADDR_VAR 0 49
31350: PUSH
31351: LD_INT 3
31353: PUSH
31354: LD_INT 1
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: LD_INT 3
31363: PUSH
31364: LD_INT 2
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31375: LD_ADDR_VAR 0 50
31379: PUSH
31380: LD_INT 2
31382: PUSH
31383: LD_INT 3
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: LD_INT 1
31392: PUSH
31393: LD_INT 3
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31404: LD_ADDR_VAR 0 51
31408: PUSH
31409: LD_INT 1
31411: NEG
31412: PUSH
31413: LD_INT 2
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 2
31422: NEG
31423: PUSH
31424: LD_INT 1
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31435: LD_ADDR_VAR 0 52
31439: PUSH
31440: LD_INT 3
31442: NEG
31443: PUSH
31444: LD_INT 1
31446: NEG
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 3
31454: NEG
31455: PUSH
31456: LD_INT 2
31458: NEG
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31468: LD_ADDR_VAR 0 53
31472: PUSH
31473: LD_INT 1
31475: NEG
31476: PUSH
31477: LD_INT 3
31479: NEG
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PUSH
31485: LD_INT 0
31487: PUSH
31488: LD_INT 3
31490: NEG
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: PUSH
31496: LD_INT 1
31498: PUSH
31499: LD_INT 2
31501: NEG
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: LIST
31511: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31512: LD_ADDR_VAR 0 54
31516: PUSH
31517: LD_INT 2
31519: PUSH
31520: LD_INT 1
31522: NEG
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: LD_INT 3
31530: PUSH
31531: LD_INT 0
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 3
31540: PUSH
31541: LD_INT 1
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: LIST
31552: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31553: LD_ADDR_VAR 0 55
31557: PUSH
31558: LD_INT 3
31560: PUSH
31561: LD_INT 2
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: LD_INT 3
31570: PUSH
31571: LD_INT 3
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 2
31580: PUSH
31581: LD_INT 3
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: LIST
31592: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31593: LD_ADDR_VAR 0 56
31597: PUSH
31598: LD_INT 1
31600: PUSH
31601: LD_INT 3
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PUSH
31608: LD_INT 0
31610: PUSH
31611: LD_INT 3
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PUSH
31618: LD_INT 1
31620: NEG
31621: PUSH
31622: LD_INT 2
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: LIST
31633: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31634: LD_ADDR_VAR 0 57
31638: PUSH
31639: LD_INT 2
31641: NEG
31642: PUSH
31643: LD_INT 1
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: PUSH
31650: LD_INT 3
31652: NEG
31653: PUSH
31654: LD_INT 0
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PUSH
31661: LD_INT 3
31663: NEG
31664: PUSH
31665: LD_INT 1
31667: NEG
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: LIST
31677: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31678: LD_ADDR_VAR 0 58
31682: PUSH
31683: LD_INT 2
31685: NEG
31686: PUSH
31687: LD_INT 3
31689: NEG
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 3
31697: NEG
31698: PUSH
31699: LD_INT 2
31701: NEG
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 3
31709: NEG
31710: PUSH
31711: LD_INT 3
31713: NEG
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: LIST
31723: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31724: LD_ADDR_VAR 0 59
31728: PUSH
31729: LD_INT 1
31731: NEG
31732: PUSH
31733: LD_INT 2
31735: NEG
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 0
31743: PUSH
31744: LD_INT 2
31746: NEG
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: LD_INT 1
31754: PUSH
31755: LD_INT 1
31757: NEG
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: LIST
31767: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31768: LD_ADDR_VAR 0 60
31772: PUSH
31773: LD_INT 1
31775: PUSH
31776: LD_INT 1
31778: NEG
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: LD_INT 2
31786: PUSH
31787: LD_INT 0
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: PUSH
31794: LD_INT 2
31796: PUSH
31797: LD_INT 1
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: LIST
31808: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31809: LD_ADDR_VAR 0 61
31813: PUSH
31814: LD_INT 2
31816: PUSH
31817: LD_INT 1
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PUSH
31824: LD_INT 2
31826: PUSH
31827: LD_INT 2
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: PUSH
31834: LD_INT 1
31836: PUSH
31837: LD_INT 2
31839: PUSH
31840: EMPTY
31841: LIST
31842: LIST
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: LIST
31848: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31849: LD_ADDR_VAR 0 62
31853: PUSH
31854: LD_INT 1
31856: PUSH
31857: LD_INT 2
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: PUSH
31864: LD_INT 0
31866: PUSH
31867: LD_INT 2
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: PUSH
31874: LD_INT 1
31876: NEG
31877: PUSH
31878: LD_INT 1
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: LIST
31889: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31890: LD_ADDR_VAR 0 63
31894: PUSH
31895: LD_INT 1
31897: NEG
31898: PUSH
31899: LD_INT 1
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 2
31908: NEG
31909: PUSH
31910: LD_INT 0
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 2
31919: NEG
31920: PUSH
31921: LD_INT 1
31923: NEG
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: LIST
31933: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31934: LD_ADDR_VAR 0 64
31938: PUSH
31939: LD_INT 1
31941: NEG
31942: PUSH
31943: LD_INT 2
31945: NEG
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: LD_INT 2
31953: NEG
31954: PUSH
31955: LD_INT 1
31957: NEG
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: LD_INT 2
31965: NEG
31966: PUSH
31967: LD_INT 2
31969: NEG
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: LIST
31979: ST_TO_ADDR
// end ; 2 :
31980: GO 35246
31982: LD_INT 2
31984: DOUBLE
31985: EQUAL
31986: IFTRUE 31990
31988: GO 35245
31990: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31991: LD_ADDR_VAR 0 29
31995: PUSH
31996: LD_INT 4
31998: PUSH
31999: LD_INT 0
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PUSH
32006: LD_INT 4
32008: PUSH
32009: LD_INT 1
32011: NEG
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: LD_INT 5
32019: PUSH
32020: LD_INT 0
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: PUSH
32027: LD_INT 5
32029: PUSH
32030: LD_INT 1
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: LD_INT 4
32039: PUSH
32040: LD_INT 1
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: LD_INT 3
32049: PUSH
32050: LD_INT 0
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 3
32059: PUSH
32060: LD_INT 1
32062: NEG
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 3
32070: PUSH
32071: LD_INT 2
32073: NEG
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: PUSH
32079: LD_INT 5
32081: PUSH
32082: LD_INT 2
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: PUSH
32089: LD_INT 3
32091: PUSH
32092: LD_INT 3
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 3
32101: PUSH
32102: LD_INT 2
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: LD_INT 4
32111: PUSH
32112: LD_INT 3
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 4
32121: PUSH
32122: LD_INT 4
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 3
32131: PUSH
32132: LD_INT 4
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 2
32141: PUSH
32142: LD_INT 3
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: LD_INT 2
32151: PUSH
32152: LD_INT 2
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: LD_INT 4
32161: PUSH
32162: LD_INT 2
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: LD_INT 2
32171: PUSH
32172: LD_INT 4
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PUSH
32179: LD_INT 0
32181: PUSH
32182: LD_INT 4
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: LD_INT 0
32191: PUSH
32192: LD_INT 3
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PUSH
32199: LD_INT 1
32201: PUSH
32202: LD_INT 4
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: LD_INT 1
32211: PUSH
32212: LD_INT 5
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: LD_INT 0
32221: PUSH
32222: LD_INT 5
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PUSH
32229: LD_INT 1
32231: NEG
32232: PUSH
32233: LD_INT 4
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: LD_INT 1
32242: NEG
32243: PUSH
32244: LD_INT 3
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: LD_INT 2
32253: PUSH
32254: LD_INT 5
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: LD_INT 2
32263: NEG
32264: PUSH
32265: LD_INT 3
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: PUSH
32272: LD_INT 3
32274: NEG
32275: PUSH
32276: LD_INT 0
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 3
32285: NEG
32286: PUSH
32287: LD_INT 1
32289: NEG
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 2
32297: NEG
32298: PUSH
32299: LD_INT 0
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: PUSH
32306: LD_INT 2
32308: NEG
32309: PUSH
32310: LD_INT 1
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: LD_INT 3
32319: NEG
32320: PUSH
32321: LD_INT 1
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PUSH
32328: LD_INT 4
32330: NEG
32331: PUSH
32332: LD_INT 0
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PUSH
32339: LD_INT 4
32341: NEG
32342: PUSH
32343: LD_INT 1
32345: NEG
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: PUSH
32351: LD_INT 4
32353: NEG
32354: PUSH
32355: LD_INT 2
32357: NEG
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 2
32365: NEG
32366: PUSH
32367: LD_INT 2
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: PUSH
32374: LD_INT 4
32376: NEG
32377: PUSH
32378: LD_INT 4
32380: NEG
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PUSH
32386: LD_INT 4
32388: NEG
32389: PUSH
32390: LD_INT 5
32392: NEG
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 3
32400: NEG
32401: PUSH
32402: LD_INT 4
32404: NEG
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: PUSH
32410: LD_INT 3
32412: NEG
32413: PUSH
32414: LD_INT 3
32416: NEG
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: PUSH
32422: LD_INT 4
32424: NEG
32425: PUSH
32426: LD_INT 3
32428: NEG
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PUSH
32434: LD_INT 5
32436: NEG
32437: PUSH
32438: LD_INT 4
32440: NEG
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PUSH
32446: LD_INT 5
32448: NEG
32449: PUSH
32450: LD_INT 5
32452: NEG
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 3
32460: NEG
32461: PUSH
32462: LD_INT 5
32464: NEG
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: PUSH
32470: LD_INT 5
32472: NEG
32473: PUSH
32474: LD_INT 3
32476: NEG
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32529: LD_ADDR_VAR 0 30
32533: PUSH
32534: LD_INT 4
32536: PUSH
32537: LD_INT 4
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: LD_INT 4
32546: PUSH
32547: LD_INT 3
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 5
32556: PUSH
32557: LD_INT 4
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 5
32566: PUSH
32567: LD_INT 5
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PUSH
32574: LD_INT 4
32576: PUSH
32577: LD_INT 5
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 3
32586: PUSH
32587: LD_INT 4
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: LD_INT 3
32596: PUSH
32597: LD_INT 3
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PUSH
32604: LD_INT 5
32606: PUSH
32607: LD_INT 3
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PUSH
32614: LD_INT 3
32616: PUSH
32617: LD_INT 5
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: LD_INT 0
32626: PUSH
32627: LD_INT 3
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 0
32636: PUSH
32637: LD_INT 2
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 1
32646: PUSH
32647: LD_INT 3
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: LD_INT 1
32656: PUSH
32657: LD_INT 4
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: PUSH
32664: LD_INT 0
32666: PUSH
32667: LD_INT 4
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: PUSH
32674: LD_INT 1
32676: NEG
32677: PUSH
32678: LD_INT 3
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: PUSH
32685: LD_INT 1
32687: NEG
32688: PUSH
32689: LD_INT 2
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 2
32698: PUSH
32699: LD_INT 4
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 2
32708: NEG
32709: PUSH
32710: LD_INT 2
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: PUSH
32717: LD_INT 4
32719: NEG
32720: PUSH
32721: LD_INT 0
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 4
32730: NEG
32731: PUSH
32732: LD_INT 1
32734: NEG
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 3
32742: NEG
32743: PUSH
32744: LD_INT 0
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: LD_INT 3
32753: NEG
32754: PUSH
32755: LD_INT 1
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: PUSH
32762: LD_INT 4
32764: NEG
32765: PUSH
32766: LD_INT 1
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: PUSH
32773: LD_INT 5
32775: NEG
32776: PUSH
32777: LD_INT 0
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 5
32786: NEG
32787: PUSH
32788: LD_INT 1
32790: NEG
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 5
32798: NEG
32799: PUSH
32800: LD_INT 2
32802: NEG
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 3
32810: NEG
32811: PUSH
32812: LD_INT 2
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: LD_INT 3
32821: NEG
32822: PUSH
32823: LD_INT 3
32825: NEG
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 3
32833: NEG
32834: PUSH
32835: LD_INT 4
32837: NEG
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: PUSH
32843: LD_INT 2
32845: NEG
32846: PUSH
32847: LD_INT 3
32849: NEG
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: PUSH
32855: LD_INT 2
32857: NEG
32858: PUSH
32859: LD_INT 2
32861: NEG
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: LD_INT 3
32869: NEG
32870: PUSH
32871: LD_INT 2
32873: NEG
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: LD_INT 4
32881: NEG
32882: PUSH
32883: LD_INT 3
32885: NEG
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: PUSH
32891: LD_INT 4
32893: NEG
32894: PUSH
32895: LD_INT 4
32897: NEG
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: PUSH
32903: LD_INT 2
32905: NEG
32906: PUSH
32907: LD_INT 4
32909: NEG
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 4
32917: NEG
32918: PUSH
32919: LD_INT 2
32921: NEG
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 0
32929: PUSH
32930: LD_INT 4
32932: NEG
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 0
32940: PUSH
32941: LD_INT 5
32943: NEG
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 1
32951: PUSH
32952: LD_INT 4
32954: NEG
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 1
32962: PUSH
32963: LD_INT 3
32965: NEG
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: LD_INT 0
32973: PUSH
32974: LD_INT 3
32976: NEG
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PUSH
32982: LD_INT 1
32984: NEG
32985: PUSH
32986: LD_INT 4
32988: NEG
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: LD_INT 1
32996: NEG
32997: PUSH
32998: LD_INT 5
33000: NEG
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PUSH
33006: LD_INT 2
33008: PUSH
33009: LD_INT 3
33011: NEG
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 2
33019: NEG
33020: PUSH
33021: LD_INT 5
33023: NEG
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33076: LD_ADDR_VAR 0 31
33080: PUSH
33081: LD_INT 0
33083: PUSH
33084: LD_INT 4
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 0
33093: PUSH
33094: LD_INT 3
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 1
33103: PUSH
33104: LD_INT 4
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: LD_INT 1
33113: PUSH
33114: LD_INT 5
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: LD_INT 0
33123: PUSH
33124: LD_INT 5
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: PUSH
33131: LD_INT 1
33133: NEG
33134: PUSH
33135: LD_INT 4
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: PUSH
33142: LD_INT 1
33144: NEG
33145: PUSH
33146: LD_INT 3
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: PUSH
33153: LD_INT 2
33155: PUSH
33156: LD_INT 5
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 2
33165: NEG
33166: PUSH
33167: LD_INT 3
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 3
33176: NEG
33177: PUSH
33178: LD_INT 0
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 3
33187: NEG
33188: PUSH
33189: LD_INT 1
33191: NEG
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 2
33199: NEG
33200: PUSH
33201: LD_INT 0
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: LD_INT 2
33210: NEG
33211: PUSH
33212: LD_INT 1
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PUSH
33219: LD_INT 3
33221: NEG
33222: PUSH
33223: LD_INT 1
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: PUSH
33230: LD_INT 4
33232: NEG
33233: PUSH
33234: LD_INT 0
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: PUSH
33241: LD_INT 4
33243: NEG
33244: PUSH
33245: LD_INT 1
33247: NEG
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: PUSH
33253: LD_INT 4
33255: NEG
33256: PUSH
33257: LD_INT 2
33259: NEG
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 2
33267: NEG
33268: PUSH
33269: LD_INT 2
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: LD_INT 4
33278: NEG
33279: PUSH
33280: LD_INT 4
33282: NEG
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: PUSH
33288: LD_INT 4
33290: NEG
33291: PUSH
33292: LD_INT 5
33294: NEG
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 3
33302: NEG
33303: PUSH
33304: LD_INT 4
33306: NEG
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 3
33314: NEG
33315: PUSH
33316: LD_INT 3
33318: NEG
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: LD_INT 4
33326: NEG
33327: PUSH
33328: LD_INT 3
33330: NEG
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: PUSH
33336: LD_INT 5
33338: NEG
33339: PUSH
33340: LD_INT 4
33342: NEG
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: PUSH
33348: LD_INT 5
33350: NEG
33351: PUSH
33352: LD_INT 5
33354: NEG
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: LD_INT 3
33362: NEG
33363: PUSH
33364: LD_INT 5
33366: NEG
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 5
33374: NEG
33375: PUSH
33376: LD_INT 3
33378: NEG
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 0
33386: PUSH
33387: LD_INT 3
33389: NEG
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: LD_INT 0
33397: PUSH
33398: LD_INT 4
33400: NEG
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 1
33408: PUSH
33409: LD_INT 3
33411: NEG
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PUSH
33417: LD_INT 1
33419: PUSH
33420: LD_INT 2
33422: NEG
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 0
33430: PUSH
33431: LD_INT 2
33433: NEG
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 1
33441: NEG
33442: PUSH
33443: LD_INT 3
33445: NEG
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 1
33453: NEG
33454: PUSH
33455: LD_INT 4
33457: NEG
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PUSH
33463: LD_INT 2
33465: PUSH
33466: LD_INT 2
33468: NEG
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: LD_INT 2
33476: NEG
33477: PUSH
33478: LD_INT 4
33480: NEG
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: PUSH
33486: LD_INT 4
33488: PUSH
33489: LD_INT 0
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: PUSH
33496: LD_INT 4
33498: PUSH
33499: LD_INT 1
33501: NEG
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: PUSH
33507: LD_INT 5
33509: PUSH
33510: LD_INT 0
33512: PUSH
33513: EMPTY
33514: LIST
33515: LIST
33516: PUSH
33517: LD_INT 5
33519: PUSH
33520: LD_INT 1
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: PUSH
33527: LD_INT 4
33529: PUSH
33530: LD_INT 1
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: LD_INT 3
33539: PUSH
33540: LD_INT 0
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: LD_INT 3
33549: PUSH
33550: LD_INT 1
33552: NEG
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 3
33560: PUSH
33561: LD_INT 2
33563: NEG
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: PUSH
33569: LD_INT 5
33571: PUSH
33572: LD_INT 2
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33626: LD_ADDR_VAR 0 32
33630: PUSH
33631: LD_INT 4
33633: NEG
33634: PUSH
33635: LD_INT 0
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 4
33644: NEG
33645: PUSH
33646: LD_INT 1
33648: NEG
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 3
33656: NEG
33657: PUSH
33658: LD_INT 0
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 3
33667: NEG
33668: PUSH
33669: LD_INT 1
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: PUSH
33676: LD_INT 4
33678: NEG
33679: PUSH
33680: LD_INT 1
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: PUSH
33687: LD_INT 5
33689: NEG
33690: PUSH
33691: LD_INT 0
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: PUSH
33698: LD_INT 5
33700: NEG
33701: PUSH
33702: LD_INT 1
33704: NEG
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: LD_INT 5
33712: NEG
33713: PUSH
33714: LD_INT 2
33716: NEG
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: LD_INT 3
33724: NEG
33725: PUSH
33726: LD_INT 2
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: PUSH
33733: LD_INT 3
33735: NEG
33736: PUSH
33737: LD_INT 3
33739: NEG
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 3
33747: NEG
33748: PUSH
33749: LD_INT 4
33751: NEG
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: LD_INT 2
33759: NEG
33760: PUSH
33761: LD_INT 3
33763: NEG
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 2
33771: NEG
33772: PUSH
33773: LD_INT 2
33775: NEG
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: LD_INT 3
33783: NEG
33784: PUSH
33785: LD_INT 2
33787: NEG
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: PUSH
33793: LD_INT 4
33795: NEG
33796: PUSH
33797: LD_INT 3
33799: NEG
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PUSH
33805: LD_INT 4
33807: NEG
33808: PUSH
33809: LD_INT 4
33811: NEG
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PUSH
33817: LD_INT 2
33819: NEG
33820: PUSH
33821: LD_INT 4
33823: NEG
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 4
33831: NEG
33832: PUSH
33833: LD_INT 2
33835: NEG
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: LD_INT 0
33843: PUSH
33844: LD_INT 4
33846: NEG
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: LD_INT 0
33854: PUSH
33855: LD_INT 5
33857: NEG
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 1
33865: PUSH
33866: LD_INT 4
33868: NEG
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: LD_INT 1
33876: PUSH
33877: LD_INT 3
33879: NEG
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 0
33887: PUSH
33888: LD_INT 3
33890: NEG
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: LD_INT 1
33898: NEG
33899: PUSH
33900: LD_INT 4
33902: NEG
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: PUSH
33908: LD_INT 1
33910: NEG
33911: PUSH
33912: LD_INT 5
33914: NEG
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: LD_INT 2
33922: PUSH
33923: LD_INT 3
33925: NEG
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: LD_INT 2
33933: NEG
33934: PUSH
33935: LD_INT 5
33937: NEG
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: LD_INT 3
33945: PUSH
33946: LD_INT 0
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 3
33955: PUSH
33956: LD_INT 1
33958: NEG
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: LD_INT 4
33966: PUSH
33967: LD_INT 0
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: LD_INT 4
33976: PUSH
33977: LD_INT 1
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 3
33986: PUSH
33987: LD_INT 1
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: LD_INT 2
33996: PUSH
33997: LD_INT 0
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: LD_INT 2
34006: PUSH
34007: LD_INT 1
34009: NEG
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_INT 2
34017: PUSH
34018: LD_INT 2
34020: NEG
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: PUSH
34026: LD_INT 4
34028: PUSH
34029: LD_INT 2
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: PUSH
34036: LD_INT 4
34038: PUSH
34039: LD_INT 4
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: PUSH
34046: LD_INT 4
34048: PUSH
34049: LD_INT 3
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: PUSH
34056: LD_INT 5
34058: PUSH
34059: LD_INT 4
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PUSH
34066: LD_INT 5
34068: PUSH
34069: LD_INT 5
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PUSH
34076: LD_INT 4
34078: PUSH
34079: LD_INT 5
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: LD_INT 3
34088: PUSH
34089: LD_INT 4
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: PUSH
34096: LD_INT 3
34098: PUSH
34099: LD_INT 3
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PUSH
34106: LD_INT 5
34108: PUSH
34109: LD_INT 3
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 3
34118: PUSH
34119: LD_INT 5
34121: PUSH
34122: EMPTY
34123: LIST
34124: LIST
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: LIST
34130: LIST
34131: LIST
34132: LIST
34133: LIST
34134: LIST
34135: LIST
34136: LIST
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: LIST
34168: LIST
34169: LIST
34170: LIST
34171: LIST
34172: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34173: LD_ADDR_VAR 0 33
34177: PUSH
34178: LD_INT 4
34180: NEG
34181: PUSH
34182: LD_INT 4
34184: NEG
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: PUSH
34190: LD_INT 4
34192: NEG
34193: PUSH
34194: LD_INT 5
34196: NEG
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 3
34204: NEG
34205: PUSH
34206: LD_INT 4
34208: NEG
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: PUSH
34214: LD_INT 3
34216: NEG
34217: PUSH
34218: LD_INT 3
34220: NEG
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: PUSH
34226: LD_INT 4
34228: NEG
34229: PUSH
34230: LD_INT 3
34232: NEG
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: PUSH
34238: LD_INT 5
34240: NEG
34241: PUSH
34242: LD_INT 4
34244: NEG
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: PUSH
34250: LD_INT 5
34252: NEG
34253: PUSH
34254: LD_INT 5
34256: NEG
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: PUSH
34262: LD_INT 3
34264: NEG
34265: PUSH
34266: LD_INT 5
34268: NEG
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: LD_INT 5
34276: NEG
34277: PUSH
34278: LD_INT 3
34280: NEG
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: PUSH
34286: LD_INT 0
34288: PUSH
34289: LD_INT 3
34291: NEG
34292: PUSH
34293: EMPTY
34294: LIST
34295: LIST
34296: PUSH
34297: LD_INT 0
34299: PUSH
34300: LD_INT 4
34302: NEG
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 1
34310: PUSH
34311: LD_INT 3
34313: NEG
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_INT 1
34321: PUSH
34322: LD_INT 2
34324: NEG
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: PUSH
34330: LD_INT 0
34332: PUSH
34333: LD_INT 2
34335: NEG
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: LD_INT 1
34343: NEG
34344: PUSH
34345: LD_INT 3
34347: NEG
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: PUSH
34353: LD_INT 1
34355: NEG
34356: PUSH
34357: LD_INT 4
34359: NEG
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: PUSH
34365: LD_INT 2
34367: PUSH
34368: LD_INT 2
34370: NEG
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: PUSH
34376: LD_INT 2
34378: NEG
34379: PUSH
34380: LD_INT 4
34382: NEG
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: LD_INT 4
34390: PUSH
34391: LD_INT 0
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 4
34400: PUSH
34401: LD_INT 1
34403: NEG
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PUSH
34409: LD_INT 5
34411: PUSH
34412: LD_INT 0
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 5
34421: PUSH
34422: LD_INT 1
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 4
34431: PUSH
34432: LD_INT 1
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 3
34441: PUSH
34442: LD_INT 0
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 3
34451: PUSH
34452: LD_INT 1
34454: NEG
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: PUSH
34460: LD_INT 3
34462: PUSH
34463: LD_INT 2
34465: NEG
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: PUSH
34471: LD_INT 5
34473: PUSH
34474: LD_INT 2
34476: PUSH
34477: EMPTY
34478: LIST
34479: LIST
34480: PUSH
34481: LD_INT 3
34483: PUSH
34484: LD_INT 3
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: PUSH
34491: LD_INT 3
34493: PUSH
34494: LD_INT 2
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: PUSH
34501: LD_INT 4
34503: PUSH
34504: LD_INT 3
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 4
34513: PUSH
34514: LD_INT 4
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 3
34523: PUSH
34524: LD_INT 4
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 2
34533: PUSH
34534: LD_INT 3
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 2
34543: PUSH
34544: LD_INT 2
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 4
34553: PUSH
34554: LD_INT 2
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 2
34563: PUSH
34564: LD_INT 4
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 0
34573: PUSH
34574: LD_INT 4
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PUSH
34581: LD_INT 0
34583: PUSH
34584: LD_INT 3
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: LD_INT 1
34593: PUSH
34594: LD_INT 4
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 1
34603: PUSH
34604: LD_INT 5
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 0
34613: PUSH
34614: LD_INT 5
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: PUSH
34621: LD_INT 1
34623: NEG
34624: PUSH
34625: LD_INT 4
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 1
34634: NEG
34635: PUSH
34636: LD_INT 3
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 2
34645: PUSH
34646: LD_INT 5
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 2
34655: NEG
34656: PUSH
34657: LD_INT 3
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34711: LD_ADDR_VAR 0 34
34715: PUSH
34716: LD_INT 0
34718: PUSH
34719: LD_INT 4
34721: NEG
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: LD_INT 0
34729: PUSH
34730: LD_INT 5
34732: NEG
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: PUSH
34738: LD_INT 1
34740: PUSH
34741: LD_INT 4
34743: NEG
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: PUSH
34749: LD_INT 1
34751: PUSH
34752: LD_INT 3
34754: NEG
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 0
34762: PUSH
34763: LD_INT 3
34765: NEG
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 1
34773: NEG
34774: PUSH
34775: LD_INT 4
34777: NEG
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: LD_INT 1
34785: NEG
34786: PUSH
34787: LD_INT 5
34789: NEG
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 2
34797: PUSH
34798: LD_INT 3
34800: NEG
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 2
34808: NEG
34809: PUSH
34810: LD_INT 5
34812: NEG
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 3
34820: PUSH
34821: LD_INT 0
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: PUSH
34828: LD_INT 3
34830: PUSH
34831: LD_INT 1
34833: NEG
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 4
34841: PUSH
34842: LD_INT 0
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: PUSH
34849: LD_INT 4
34851: PUSH
34852: LD_INT 1
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PUSH
34859: LD_INT 3
34861: PUSH
34862: LD_INT 1
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: LD_INT 2
34871: PUSH
34872: LD_INT 0
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 2
34881: PUSH
34882: LD_INT 1
34884: NEG
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: PUSH
34890: LD_INT 2
34892: PUSH
34893: LD_INT 2
34895: NEG
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: PUSH
34901: LD_INT 4
34903: PUSH
34904: LD_INT 2
34906: PUSH
34907: EMPTY
34908: LIST
34909: LIST
34910: PUSH
34911: LD_INT 4
34913: PUSH
34914: LD_INT 4
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: PUSH
34921: LD_INT 4
34923: PUSH
34924: LD_INT 3
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: LD_INT 5
34933: PUSH
34934: LD_INT 4
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: LD_INT 5
34943: PUSH
34944: LD_INT 5
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: PUSH
34951: LD_INT 4
34953: PUSH
34954: LD_INT 5
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 3
34963: PUSH
34964: LD_INT 4
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: LD_INT 3
34973: PUSH
34974: LD_INT 3
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 5
34983: PUSH
34984: LD_INT 3
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 3
34993: PUSH
34994: LD_INT 5
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: LD_INT 0
35003: PUSH
35004: LD_INT 3
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: PUSH
35011: LD_INT 0
35013: PUSH
35014: LD_INT 2
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: LD_INT 1
35023: PUSH
35024: LD_INT 3
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: LD_INT 1
35033: PUSH
35034: LD_INT 4
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 0
35043: PUSH
35044: LD_INT 4
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 1
35053: NEG
35054: PUSH
35055: LD_INT 3
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: PUSH
35062: LD_INT 1
35064: NEG
35065: PUSH
35066: LD_INT 2
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PUSH
35073: LD_INT 2
35075: PUSH
35076: LD_INT 4
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: PUSH
35083: LD_INT 2
35085: NEG
35086: PUSH
35087: LD_INT 2
35089: PUSH
35090: EMPTY
35091: LIST
35092: LIST
35093: PUSH
35094: LD_INT 4
35096: NEG
35097: PUSH
35098: LD_INT 0
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: PUSH
35105: LD_INT 4
35107: NEG
35108: PUSH
35109: LD_INT 1
35111: NEG
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: PUSH
35117: LD_INT 3
35119: NEG
35120: PUSH
35121: LD_INT 0
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: PUSH
35128: LD_INT 3
35130: NEG
35131: PUSH
35132: LD_INT 1
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: LD_INT 4
35141: NEG
35142: PUSH
35143: LD_INT 1
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: PUSH
35150: LD_INT 5
35152: NEG
35153: PUSH
35154: LD_INT 0
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: LD_INT 5
35163: NEG
35164: PUSH
35165: LD_INT 1
35167: NEG
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PUSH
35173: LD_INT 5
35175: NEG
35176: PUSH
35177: LD_INT 2
35179: NEG
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: PUSH
35185: LD_INT 3
35187: NEG
35188: PUSH
35189: LD_INT 2
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: LIST
35200: LIST
35201: LIST
35202: LIST
35203: LIST
35204: LIST
35205: LIST
35206: LIST
35207: LIST
35208: LIST
35209: LIST
35210: LIST
35211: LIST
35212: LIST
35213: LIST
35214: LIST
35215: LIST
35216: LIST
35217: LIST
35218: LIST
35219: LIST
35220: LIST
35221: LIST
35222: LIST
35223: LIST
35224: LIST
35225: LIST
35226: LIST
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: LIST
35241: LIST
35242: ST_TO_ADDR
// end ; end ;
35243: GO 35246
35245: POP
// case btype of b_depot , b_warehouse :
35246: LD_VAR 0 1
35250: PUSH
35251: LD_INT 0
35253: DOUBLE
35254: EQUAL
35255: IFTRUE 35265
35257: LD_INT 1
35259: DOUBLE
35260: EQUAL
35261: IFTRUE 35265
35263: GO 35466
35265: POP
// case nation of nation_american :
35266: LD_VAR 0 5
35270: PUSH
35271: LD_INT 1
35273: DOUBLE
35274: EQUAL
35275: IFTRUE 35279
35277: GO 35335
35279: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35280: LD_ADDR_VAR 0 9
35284: PUSH
35285: LD_VAR 0 11
35289: PUSH
35290: LD_VAR 0 12
35294: PUSH
35295: LD_VAR 0 13
35299: PUSH
35300: LD_VAR 0 14
35304: PUSH
35305: LD_VAR 0 15
35309: PUSH
35310: LD_VAR 0 16
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: PUSH
35323: LD_VAR 0 4
35327: PUSH
35328: LD_INT 1
35330: PLUS
35331: ARRAY
35332: ST_TO_ADDR
35333: GO 35464
35335: LD_INT 2
35337: DOUBLE
35338: EQUAL
35339: IFTRUE 35343
35341: GO 35399
35343: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35344: LD_ADDR_VAR 0 9
35348: PUSH
35349: LD_VAR 0 17
35353: PUSH
35354: LD_VAR 0 18
35358: PUSH
35359: LD_VAR 0 19
35363: PUSH
35364: LD_VAR 0 20
35368: PUSH
35369: LD_VAR 0 21
35373: PUSH
35374: LD_VAR 0 22
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: PUSH
35387: LD_VAR 0 4
35391: PUSH
35392: LD_INT 1
35394: PLUS
35395: ARRAY
35396: ST_TO_ADDR
35397: GO 35464
35399: LD_INT 3
35401: DOUBLE
35402: EQUAL
35403: IFTRUE 35407
35405: GO 35463
35407: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35408: LD_ADDR_VAR 0 9
35412: PUSH
35413: LD_VAR 0 23
35417: PUSH
35418: LD_VAR 0 24
35422: PUSH
35423: LD_VAR 0 25
35427: PUSH
35428: LD_VAR 0 26
35432: PUSH
35433: LD_VAR 0 27
35437: PUSH
35438: LD_VAR 0 28
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: LIST
35447: LIST
35448: LIST
35449: LIST
35450: PUSH
35451: LD_VAR 0 4
35455: PUSH
35456: LD_INT 1
35458: PLUS
35459: ARRAY
35460: ST_TO_ADDR
35461: GO 35464
35463: POP
35464: GO 36019
35466: LD_INT 2
35468: DOUBLE
35469: EQUAL
35470: IFTRUE 35480
35472: LD_INT 3
35474: DOUBLE
35475: EQUAL
35476: IFTRUE 35480
35478: GO 35536
35480: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35481: LD_ADDR_VAR 0 9
35485: PUSH
35486: LD_VAR 0 29
35490: PUSH
35491: LD_VAR 0 30
35495: PUSH
35496: LD_VAR 0 31
35500: PUSH
35501: LD_VAR 0 32
35505: PUSH
35506: LD_VAR 0 33
35510: PUSH
35511: LD_VAR 0 34
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: LIST
35520: LIST
35521: LIST
35522: LIST
35523: PUSH
35524: LD_VAR 0 4
35528: PUSH
35529: LD_INT 1
35531: PLUS
35532: ARRAY
35533: ST_TO_ADDR
35534: GO 36019
35536: LD_INT 16
35538: DOUBLE
35539: EQUAL
35540: IFTRUE 35598
35542: LD_INT 17
35544: DOUBLE
35545: EQUAL
35546: IFTRUE 35598
35548: LD_INT 18
35550: DOUBLE
35551: EQUAL
35552: IFTRUE 35598
35554: LD_INT 19
35556: DOUBLE
35557: EQUAL
35558: IFTRUE 35598
35560: LD_INT 22
35562: DOUBLE
35563: EQUAL
35564: IFTRUE 35598
35566: LD_INT 20
35568: DOUBLE
35569: EQUAL
35570: IFTRUE 35598
35572: LD_INT 21
35574: DOUBLE
35575: EQUAL
35576: IFTRUE 35598
35578: LD_INT 23
35580: DOUBLE
35581: EQUAL
35582: IFTRUE 35598
35584: LD_INT 24
35586: DOUBLE
35587: EQUAL
35588: IFTRUE 35598
35590: LD_INT 25
35592: DOUBLE
35593: EQUAL
35594: IFTRUE 35598
35596: GO 35654
35598: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35599: LD_ADDR_VAR 0 9
35603: PUSH
35604: LD_VAR 0 35
35608: PUSH
35609: LD_VAR 0 36
35613: PUSH
35614: LD_VAR 0 37
35618: PUSH
35619: LD_VAR 0 38
35623: PUSH
35624: LD_VAR 0 39
35628: PUSH
35629: LD_VAR 0 40
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: PUSH
35642: LD_VAR 0 4
35646: PUSH
35647: LD_INT 1
35649: PLUS
35650: ARRAY
35651: ST_TO_ADDR
35652: GO 36019
35654: LD_INT 6
35656: DOUBLE
35657: EQUAL
35658: IFTRUE 35710
35660: LD_INT 7
35662: DOUBLE
35663: EQUAL
35664: IFTRUE 35710
35666: LD_INT 8
35668: DOUBLE
35669: EQUAL
35670: IFTRUE 35710
35672: LD_INT 13
35674: DOUBLE
35675: EQUAL
35676: IFTRUE 35710
35678: LD_INT 12
35680: DOUBLE
35681: EQUAL
35682: IFTRUE 35710
35684: LD_INT 15
35686: DOUBLE
35687: EQUAL
35688: IFTRUE 35710
35690: LD_INT 11
35692: DOUBLE
35693: EQUAL
35694: IFTRUE 35710
35696: LD_INT 14
35698: DOUBLE
35699: EQUAL
35700: IFTRUE 35710
35702: LD_INT 10
35704: DOUBLE
35705: EQUAL
35706: IFTRUE 35710
35708: GO 35766
35710: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35711: LD_ADDR_VAR 0 9
35715: PUSH
35716: LD_VAR 0 41
35720: PUSH
35721: LD_VAR 0 42
35725: PUSH
35726: LD_VAR 0 43
35730: PUSH
35731: LD_VAR 0 44
35735: PUSH
35736: LD_VAR 0 45
35740: PUSH
35741: LD_VAR 0 46
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: LIST
35750: LIST
35751: LIST
35752: LIST
35753: PUSH
35754: LD_VAR 0 4
35758: PUSH
35759: LD_INT 1
35761: PLUS
35762: ARRAY
35763: ST_TO_ADDR
35764: GO 36019
35766: LD_INT 36
35768: DOUBLE
35769: EQUAL
35770: IFTRUE 35774
35772: GO 35830
35774: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35775: LD_ADDR_VAR 0 9
35779: PUSH
35780: LD_VAR 0 47
35784: PUSH
35785: LD_VAR 0 48
35789: PUSH
35790: LD_VAR 0 49
35794: PUSH
35795: LD_VAR 0 50
35799: PUSH
35800: LD_VAR 0 51
35804: PUSH
35805: LD_VAR 0 52
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: LIST
35814: LIST
35815: LIST
35816: LIST
35817: PUSH
35818: LD_VAR 0 4
35822: PUSH
35823: LD_INT 1
35825: PLUS
35826: ARRAY
35827: ST_TO_ADDR
35828: GO 36019
35830: LD_INT 4
35832: DOUBLE
35833: EQUAL
35834: IFTRUE 35856
35836: LD_INT 5
35838: DOUBLE
35839: EQUAL
35840: IFTRUE 35856
35842: LD_INT 34
35844: DOUBLE
35845: EQUAL
35846: IFTRUE 35856
35848: LD_INT 37
35850: DOUBLE
35851: EQUAL
35852: IFTRUE 35856
35854: GO 35912
35856: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35857: LD_ADDR_VAR 0 9
35861: PUSH
35862: LD_VAR 0 53
35866: PUSH
35867: LD_VAR 0 54
35871: PUSH
35872: LD_VAR 0 55
35876: PUSH
35877: LD_VAR 0 56
35881: PUSH
35882: LD_VAR 0 57
35886: PUSH
35887: LD_VAR 0 58
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: PUSH
35900: LD_VAR 0 4
35904: PUSH
35905: LD_INT 1
35907: PLUS
35908: ARRAY
35909: ST_TO_ADDR
35910: GO 36019
35912: LD_INT 31
35914: DOUBLE
35915: EQUAL
35916: IFTRUE 35962
35918: LD_INT 32
35920: DOUBLE
35921: EQUAL
35922: IFTRUE 35962
35924: LD_INT 33
35926: DOUBLE
35927: EQUAL
35928: IFTRUE 35962
35930: LD_INT 27
35932: DOUBLE
35933: EQUAL
35934: IFTRUE 35962
35936: LD_INT 26
35938: DOUBLE
35939: EQUAL
35940: IFTRUE 35962
35942: LD_INT 28
35944: DOUBLE
35945: EQUAL
35946: IFTRUE 35962
35948: LD_INT 29
35950: DOUBLE
35951: EQUAL
35952: IFTRUE 35962
35954: LD_INT 30
35956: DOUBLE
35957: EQUAL
35958: IFTRUE 35962
35960: GO 36018
35962: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35963: LD_ADDR_VAR 0 9
35967: PUSH
35968: LD_VAR 0 59
35972: PUSH
35973: LD_VAR 0 60
35977: PUSH
35978: LD_VAR 0 61
35982: PUSH
35983: LD_VAR 0 62
35987: PUSH
35988: LD_VAR 0 63
35992: PUSH
35993: LD_VAR 0 64
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: LIST
36002: LIST
36003: LIST
36004: LIST
36005: PUSH
36006: LD_VAR 0 4
36010: PUSH
36011: LD_INT 1
36013: PLUS
36014: ARRAY
36015: ST_TO_ADDR
36016: GO 36019
36018: POP
// temp_list2 = [ ] ;
36019: LD_ADDR_VAR 0 10
36023: PUSH
36024: EMPTY
36025: ST_TO_ADDR
// for i in temp_list do
36026: LD_ADDR_VAR 0 8
36030: PUSH
36031: LD_VAR 0 9
36035: PUSH
36036: FOR_IN
36037: IFFALSE 36089
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36039: LD_ADDR_VAR 0 10
36043: PUSH
36044: LD_VAR 0 10
36048: PUSH
36049: LD_VAR 0 8
36053: PUSH
36054: LD_INT 1
36056: ARRAY
36057: PUSH
36058: LD_VAR 0 2
36062: PLUS
36063: PUSH
36064: LD_VAR 0 8
36068: PUSH
36069: LD_INT 2
36071: ARRAY
36072: PUSH
36073: LD_VAR 0 3
36077: PLUS
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: EMPTY
36084: LIST
36085: ADD
36086: ST_TO_ADDR
36087: GO 36036
36089: POP
36090: POP
// result = temp_list2 ;
36091: LD_ADDR_VAR 0 7
36095: PUSH
36096: LD_VAR 0 10
36100: ST_TO_ADDR
// end ;
36101: LD_VAR 0 7
36105: RET
// export function EnemyInRange ( unit , dist ) ; begin
36106: LD_INT 0
36108: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36109: LD_ADDR_VAR 0 3
36113: PUSH
36114: LD_VAR 0 1
36118: PPUSH
36119: CALL_OW 255
36123: PPUSH
36124: LD_VAR 0 1
36128: PPUSH
36129: CALL_OW 250
36133: PPUSH
36134: LD_VAR 0 1
36138: PPUSH
36139: CALL_OW 251
36143: PPUSH
36144: LD_VAR 0 2
36148: PPUSH
36149: CALL 9508 0 4
36153: PUSH
36154: LD_INT 4
36156: ARRAY
36157: ST_TO_ADDR
// end ;
36158: LD_VAR 0 3
36162: RET
// export function PlayerSeeMe ( unit ) ; begin
36163: LD_INT 0
36165: PPUSH
// result := See ( your_side , unit ) ;
36166: LD_ADDR_VAR 0 2
36170: PUSH
36171: LD_OWVAR 2
36175: PPUSH
36176: LD_VAR 0 1
36180: PPUSH
36181: CALL_OW 292
36185: ST_TO_ADDR
// end ;
36186: LD_VAR 0 2
36190: RET
// export function ReverseDir ( unit ) ; begin
36191: LD_INT 0
36193: PPUSH
// if not unit then
36194: LD_VAR 0 1
36198: NOT
36199: IFFALSE 36203
// exit ;
36201: GO 36226
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36203: LD_ADDR_VAR 0 2
36207: PUSH
36208: LD_VAR 0 1
36212: PPUSH
36213: CALL_OW 254
36217: PUSH
36218: LD_INT 3
36220: PLUS
36221: PUSH
36222: LD_INT 6
36224: MOD
36225: ST_TO_ADDR
// end ;
36226: LD_VAR 0 2
36230: RET
// export function ReverseArray ( array ) ; var i ; begin
36231: LD_INT 0
36233: PPUSH
36234: PPUSH
// if not array then
36235: LD_VAR 0 1
36239: NOT
36240: IFFALSE 36244
// exit ;
36242: GO 36299
// result := [ ] ;
36244: LD_ADDR_VAR 0 2
36248: PUSH
36249: EMPTY
36250: ST_TO_ADDR
// for i := array downto 1 do
36251: LD_ADDR_VAR 0 3
36255: PUSH
36256: DOUBLE
36257: LD_VAR 0 1
36261: INC
36262: ST_TO_ADDR
36263: LD_INT 1
36265: PUSH
36266: FOR_DOWNTO
36267: IFFALSE 36297
// result := Join ( result , array [ i ] ) ;
36269: LD_ADDR_VAR 0 2
36273: PUSH
36274: LD_VAR 0 2
36278: PPUSH
36279: LD_VAR 0 1
36283: PUSH
36284: LD_VAR 0 3
36288: ARRAY
36289: PPUSH
36290: CALL 40942 0 2
36294: ST_TO_ADDR
36295: GO 36266
36297: POP
36298: POP
// end ;
36299: LD_VAR 0 2
36303: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36304: LD_INT 0
36306: PPUSH
36307: PPUSH
36308: PPUSH
36309: PPUSH
36310: PPUSH
36311: PPUSH
// if not unit or not hexes then
36312: LD_VAR 0 1
36316: NOT
36317: PUSH
36318: LD_VAR 0 2
36322: NOT
36323: OR
36324: IFFALSE 36328
// exit ;
36326: GO 36451
// dist := 9999 ;
36328: LD_ADDR_VAR 0 5
36332: PUSH
36333: LD_INT 9999
36335: ST_TO_ADDR
// for i = 1 to hexes do
36336: LD_ADDR_VAR 0 4
36340: PUSH
36341: DOUBLE
36342: LD_INT 1
36344: DEC
36345: ST_TO_ADDR
36346: LD_VAR 0 2
36350: PUSH
36351: FOR_TO
36352: IFFALSE 36439
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36354: LD_ADDR_VAR 0 6
36358: PUSH
36359: LD_VAR 0 1
36363: PPUSH
36364: LD_VAR 0 2
36368: PUSH
36369: LD_VAR 0 4
36373: ARRAY
36374: PUSH
36375: LD_INT 1
36377: ARRAY
36378: PPUSH
36379: LD_VAR 0 2
36383: PUSH
36384: LD_VAR 0 4
36388: ARRAY
36389: PUSH
36390: LD_INT 2
36392: ARRAY
36393: PPUSH
36394: CALL_OW 297
36398: ST_TO_ADDR
// if tdist < dist then
36399: LD_VAR 0 6
36403: PUSH
36404: LD_VAR 0 5
36408: LESS
36409: IFFALSE 36437
// begin hex := hexes [ i ] ;
36411: LD_ADDR_VAR 0 8
36415: PUSH
36416: LD_VAR 0 2
36420: PUSH
36421: LD_VAR 0 4
36425: ARRAY
36426: ST_TO_ADDR
// dist := tdist ;
36427: LD_ADDR_VAR 0 5
36431: PUSH
36432: LD_VAR 0 6
36436: ST_TO_ADDR
// end ; end ;
36437: GO 36351
36439: POP
36440: POP
// result := hex ;
36441: LD_ADDR_VAR 0 3
36445: PUSH
36446: LD_VAR 0 8
36450: ST_TO_ADDR
// end ;
36451: LD_VAR 0 3
36455: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36456: LD_INT 0
36458: PPUSH
36459: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36460: LD_VAR 0 1
36464: NOT
36465: PUSH
36466: LD_VAR 0 1
36470: PUSH
36471: LD_INT 21
36473: PUSH
36474: LD_INT 2
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PUSH
36481: LD_INT 23
36483: PUSH
36484: LD_INT 2
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PPUSH
36495: CALL_OW 69
36499: IN
36500: NOT
36501: OR
36502: IFFALSE 36506
// exit ;
36504: GO 36553
// for i = 1 to 3 do
36506: LD_ADDR_VAR 0 3
36510: PUSH
36511: DOUBLE
36512: LD_INT 1
36514: DEC
36515: ST_TO_ADDR
36516: LD_INT 3
36518: PUSH
36519: FOR_TO
36520: IFFALSE 36551
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36522: LD_VAR 0 1
36526: PPUSH
36527: CALL_OW 250
36531: PPUSH
36532: LD_VAR 0 1
36536: PPUSH
36537: CALL_OW 251
36541: PPUSH
36542: LD_INT 1
36544: PPUSH
36545: CALL_OW 453
36549: GO 36519
36551: POP
36552: POP
// end ;
36553: LD_VAR 0 2
36557: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36558: LD_INT 0
36560: PPUSH
36561: PPUSH
36562: PPUSH
36563: PPUSH
36564: PPUSH
36565: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
36566: LD_VAR 0 1
36570: NOT
36571: PUSH
36572: LD_VAR 0 2
36576: NOT
36577: OR
36578: PUSH
36579: LD_VAR 0 1
36583: PPUSH
36584: CALL_OW 314
36588: OR
36589: IFFALSE 36593
// exit ;
36591: GO 37060
// if GetLives ( i ) < 250 then
36593: LD_VAR 0 4
36597: PPUSH
36598: CALL_OW 256
36602: PUSH
36603: LD_INT 250
36605: LESS
36606: IFFALSE 36619
// begin ComAutodestruct ( i ) ;
36608: LD_VAR 0 4
36612: PPUSH
36613: CALL 36456 0 1
// exit ;
36617: GO 37060
// end ; x := GetX ( enemy_unit ) ;
36619: LD_ADDR_VAR 0 7
36623: PUSH
36624: LD_VAR 0 2
36628: PPUSH
36629: CALL_OW 250
36633: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36634: LD_ADDR_VAR 0 8
36638: PUSH
36639: LD_VAR 0 2
36643: PPUSH
36644: CALL_OW 251
36648: ST_TO_ADDR
// if not x or not y then
36649: LD_VAR 0 7
36653: NOT
36654: PUSH
36655: LD_VAR 0 8
36659: NOT
36660: OR
36661: IFFALSE 36665
// exit ;
36663: GO 37060
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36665: LD_ADDR_VAR 0 6
36669: PUSH
36670: LD_VAR 0 7
36674: PPUSH
36675: LD_INT 0
36677: PPUSH
36678: LD_INT 4
36680: PPUSH
36681: CALL_OW 272
36685: PUSH
36686: LD_VAR 0 8
36690: PPUSH
36691: LD_INT 0
36693: PPUSH
36694: LD_INT 4
36696: PPUSH
36697: CALL_OW 273
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: PUSH
36706: LD_VAR 0 7
36710: PPUSH
36711: LD_INT 1
36713: PPUSH
36714: LD_INT 4
36716: PPUSH
36717: CALL_OW 272
36721: PUSH
36722: LD_VAR 0 8
36726: PPUSH
36727: LD_INT 1
36729: PPUSH
36730: LD_INT 4
36732: PPUSH
36733: CALL_OW 273
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: LD_VAR 0 7
36746: PPUSH
36747: LD_INT 2
36749: PPUSH
36750: LD_INT 4
36752: PPUSH
36753: CALL_OW 272
36757: PUSH
36758: LD_VAR 0 8
36762: PPUSH
36763: LD_INT 2
36765: PPUSH
36766: LD_INT 4
36768: PPUSH
36769: CALL_OW 273
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: PUSH
36778: LD_VAR 0 7
36782: PPUSH
36783: LD_INT 3
36785: PPUSH
36786: LD_INT 4
36788: PPUSH
36789: CALL_OW 272
36793: PUSH
36794: LD_VAR 0 8
36798: PPUSH
36799: LD_INT 3
36801: PPUSH
36802: LD_INT 4
36804: PPUSH
36805: CALL_OW 273
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: LD_VAR 0 7
36818: PPUSH
36819: LD_INT 4
36821: PPUSH
36822: LD_INT 4
36824: PPUSH
36825: CALL_OW 272
36829: PUSH
36830: LD_VAR 0 8
36834: PPUSH
36835: LD_INT 4
36837: PPUSH
36838: LD_INT 4
36840: PPUSH
36841: CALL_OW 273
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: PUSH
36850: LD_VAR 0 7
36854: PPUSH
36855: LD_INT 5
36857: PPUSH
36858: LD_INT 4
36860: PPUSH
36861: CALL_OW 272
36865: PUSH
36866: LD_VAR 0 8
36870: PPUSH
36871: LD_INT 5
36873: PPUSH
36874: LD_INT 4
36876: PPUSH
36877: CALL_OW 273
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: ST_TO_ADDR
// for i = tmp downto 1 do
36894: LD_ADDR_VAR 0 4
36898: PUSH
36899: DOUBLE
36900: LD_VAR 0 6
36904: INC
36905: ST_TO_ADDR
36906: LD_INT 1
36908: PUSH
36909: FOR_DOWNTO
36910: IFFALSE 37011
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36912: LD_VAR 0 6
36916: PUSH
36917: LD_VAR 0 4
36921: ARRAY
36922: PUSH
36923: LD_INT 1
36925: ARRAY
36926: PPUSH
36927: LD_VAR 0 6
36931: PUSH
36932: LD_VAR 0 4
36936: ARRAY
36937: PUSH
36938: LD_INT 2
36940: ARRAY
36941: PPUSH
36942: CALL_OW 488
36946: NOT
36947: PUSH
36948: LD_VAR 0 6
36952: PUSH
36953: LD_VAR 0 4
36957: ARRAY
36958: PUSH
36959: LD_INT 1
36961: ARRAY
36962: PPUSH
36963: LD_VAR 0 6
36967: PUSH
36968: LD_VAR 0 4
36972: ARRAY
36973: PUSH
36974: LD_INT 2
36976: ARRAY
36977: PPUSH
36978: CALL_OW 428
36982: PUSH
36983: LD_INT 0
36985: NONEQUAL
36986: OR
36987: IFFALSE 37009
// tmp := Delete ( tmp , i ) ;
36989: LD_ADDR_VAR 0 6
36993: PUSH
36994: LD_VAR 0 6
36998: PPUSH
36999: LD_VAR 0 4
37003: PPUSH
37004: CALL_OW 3
37008: ST_TO_ADDR
37009: GO 36909
37011: POP
37012: POP
// j := GetClosestHex ( unit , tmp ) ;
37013: LD_ADDR_VAR 0 5
37017: PUSH
37018: LD_VAR 0 1
37022: PPUSH
37023: LD_VAR 0 6
37027: PPUSH
37028: CALL 36304 0 2
37032: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
37033: LD_VAR 0 1
37037: PPUSH
37038: LD_VAR 0 5
37042: PUSH
37043: LD_INT 1
37045: ARRAY
37046: PPUSH
37047: LD_VAR 0 5
37051: PUSH
37052: LD_INT 2
37054: ARRAY
37055: PPUSH
37056: CALL_OW 111
// end ;
37060: LD_VAR 0 3
37064: RET
// export function PrepareApemanSoldier ( ) ; begin
37065: LD_INT 0
37067: PPUSH
// uc_nation := 0 ;
37068: LD_ADDR_OWVAR 21
37072: PUSH
37073: LD_INT 0
37075: ST_TO_ADDR
// hc_sex := sex_male ;
37076: LD_ADDR_OWVAR 27
37080: PUSH
37081: LD_INT 1
37083: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
37084: LD_ADDR_OWVAR 28
37088: PUSH
37089: LD_INT 15
37091: ST_TO_ADDR
// hc_gallery :=  ;
37092: LD_ADDR_OWVAR 33
37096: PUSH
37097: LD_STRING 
37099: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37100: LD_ADDR_OWVAR 31
37104: PUSH
37105: LD_INT 0
37107: PPUSH
37108: LD_INT 3
37110: PPUSH
37111: CALL_OW 12
37115: PUSH
37116: LD_INT 0
37118: PPUSH
37119: LD_INT 3
37121: PPUSH
37122: CALL_OW 12
37126: PUSH
37127: LD_INT 0
37129: PUSH
37130: LD_INT 0
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: LIST
37137: LIST
37138: ST_TO_ADDR
// end ;
37139: LD_VAR 0 1
37143: RET
// export function PrepareApemanEngineer ( ) ; begin
37144: LD_INT 0
37146: PPUSH
// uc_nation := 0 ;
37147: LD_ADDR_OWVAR 21
37151: PUSH
37152: LD_INT 0
37154: ST_TO_ADDR
// hc_sex := sex_male ;
37155: LD_ADDR_OWVAR 27
37159: PUSH
37160: LD_INT 1
37162: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
37163: LD_ADDR_OWVAR 28
37167: PUSH
37168: LD_INT 16
37170: ST_TO_ADDR
// hc_gallery :=  ;
37171: LD_ADDR_OWVAR 33
37175: PUSH
37176: LD_STRING 
37178: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37179: LD_ADDR_OWVAR 31
37183: PUSH
37184: LD_INT 0
37186: PPUSH
37187: LD_INT 3
37189: PPUSH
37190: CALL_OW 12
37194: PUSH
37195: LD_INT 0
37197: PPUSH
37198: LD_INT 3
37200: PPUSH
37201: CALL_OW 12
37205: PUSH
37206: LD_INT 0
37208: PUSH
37209: LD_INT 0
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: LIST
37216: LIST
37217: ST_TO_ADDR
// end ;
37218: LD_VAR 0 1
37222: RET
// export function PrepareApeman ( agressivity ) ; begin
37223: LD_INT 0
37225: PPUSH
// uc_side := 0 ;
37226: LD_ADDR_OWVAR 20
37230: PUSH
37231: LD_INT 0
37233: ST_TO_ADDR
// uc_nation := 0 ;
37234: LD_ADDR_OWVAR 21
37238: PUSH
37239: LD_INT 0
37241: ST_TO_ADDR
// hc_sex := sex_male ;
37242: LD_ADDR_OWVAR 27
37246: PUSH
37247: LD_INT 1
37249: ST_TO_ADDR
// hc_class := class_apeman ;
37250: LD_ADDR_OWVAR 28
37254: PUSH
37255: LD_INT 12
37257: ST_TO_ADDR
// hc_gallery :=  ;
37258: LD_ADDR_OWVAR 33
37262: PUSH
37263: LD_STRING 
37265: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37266: LD_ADDR_OWVAR 35
37270: PUSH
37271: LD_VAR 0 1
37275: NEG
37276: PPUSH
37277: LD_VAR 0 1
37281: PPUSH
37282: CALL_OW 12
37286: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37287: LD_ADDR_OWVAR 31
37291: PUSH
37292: LD_INT 0
37294: PPUSH
37295: LD_INT 3
37297: PPUSH
37298: CALL_OW 12
37302: PUSH
37303: LD_INT 0
37305: PPUSH
37306: LD_INT 3
37308: PPUSH
37309: CALL_OW 12
37313: PUSH
37314: LD_INT 0
37316: PUSH
37317: LD_INT 0
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: LIST
37324: LIST
37325: ST_TO_ADDR
// end ;
37326: LD_VAR 0 2
37330: RET
// export function PrepareTiger ( agressivity ) ; begin
37331: LD_INT 0
37333: PPUSH
// uc_side := 0 ;
37334: LD_ADDR_OWVAR 20
37338: PUSH
37339: LD_INT 0
37341: ST_TO_ADDR
// uc_nation := 0 ;
37342: LD_ADDR_OWVAR 21
37346: PUSH
37347: LD_INT 0
37349: ST_TO_ADDR
// hc_class := class_tiger ;
37350: LD_ADDR_OWVAR 28
37354: PUSH
37355: LD_INT 14
37357: ST_TO_ADDR
// hc_gallery :=  ;
37358: LD_ADDR_OWVAR 33
37362: PUSH
37363: LD_STRING 
37365: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37366: LD_ADDR_OWVAR 35
37370: PUSH
37371: LD_VAR 0 1
37375: NEG
37376: PPUSH
37377: LD_VAR 0 1
37381: PPUSH
37382: CALL_OW 12
37386: ST_TO_ADDR
// end ;
37387: LD_VAR 0 2
37391: RET
// export function PrepareEnchidna ( ) ; begin
37392: LD_INT 0
37394: PPUSH
// uc_side := 0 ;
37395: LD_ADDR_OWVAR 20
37399: PUSH
37400: LD_INT 0
37402: ST_TO_ADDR
// uc_nation := 0 ;
37403: LD_ADDR_OWVAR 21
37407: PUSH
37408: LD_INT 0
37410: ST_TO_ADDR
// hc_class := class_baggie ;
37411: LD_ADDR_OWVAR 28
37415: PUSH
37416: LD_INT 13
37418: ST_TO_ADDR
// hc_gallery :=  ;
37419: LD_ADDR_OWVAR 33
37423: PUSH
37424: LD_STRING 
37426: ST_TO_ADDR
// end ;
37427: LD_VAR 0 1
37431: RET
// export function PrepareFrog ( ) ; begin
37432: LD_INT 0
37434: PPUSH
// uc_side := 0 ;
37435: LD_ADDR_OWVAR 20
37439: PUSH
37440: LD_INT 0
37442: ST_TO_ADDR
// uc_nation := 0 ;
37443: LD_ADDR_OWVAR 21
37447: PUSH
37448: LD_INT 0
37450: ST_TO_ADDR
// hc_class := class_frog ;
37451: LD_ADDR_OWVAR 28
37455: PUSH
37456: LD_INT 19
37458: ST_TO_ADDR
// hc_gallery :=  ;
37459: LD_ADDR_OWVAR 33
37463: PUSH
37464: LD_STRING 
37466: ST_TO_ADDR
// end ;
37467: LD_VAR 0 1
37471: RET
// export function PrepareFish ( ) ; begin
37472: LD_INT 0
37474: PPUSH
// uc_side := 0 ;
37475: LD_ADDR_OWVAR 20
37479: PUSH
37480: LD_INT 0
37482: ST_TO_ADDR
// uc_nation := 0 ;
37483: LD_ADDR_OWVAR 21
37487: PUSH
37488: LD_INT 0
37490: ST_TO_ADDR
// hc_class := class_fish ;
37491: LD_ADDR_OWVAR 28
37495: PUSH
37496: LD_INT 20
37498: ST_TO_ADDR
// hc_gallery :=  ;
37499: LD_ADDR_OWVAR 33
37503: PUSH
37504: LD_STRING 
37506: ST_TO_ADDR
// end ;
37507: LD_VAR 0 1
37511: RET
// export function PrepareBird ( ) ; begin
37512: LD_INT 0
37514: PPUSH
// uc_side := 0 ;
37515: LD_ADDR_OWVAR 20
37519: PUSH
37520: LD_INT 0
37522: ST_TO_ADDR
// uc_nation := 0 ;
37523: LD_ADDR_OWVAR 21
37527: PUSH
37528: LD_INT 0
37530: ST_TO_ADDR
// hc_class := class_phororhacos ;
37531: LD_ADDR_OWVAR 28
37535: PUSH
37536: LD_INT 18
37538: ST_TO_ADDR
// hc_gallery :=  ;
37539: LD_ADDR_OWVAR 33
37543: PUSH
37544: LD_STRING 
37546: ST_TO_ADDR
// end ;
37547: LD_VAR 0 1
37551: RET
// export function PrepareHorse ( ) ; begin
37552: LD_INT 0
37554: PPUSH
// uc_side := 0 ;
37555: LD_ADDR_OWVAR 20
37559: PUSH
37560: LD_INT 0
37562: ST_TO_ADDR
// uc_nation := 0 ;
37563: LD_ADDR_OWVAR 21
37567: PUSH
37568: LD_INT 0
37570: ST_TO_ADDR
// hc_class := class_horse ;
37571: LD_ADDR_OWVAR 28
37575: PUSH
37576: LD_INT 21
37578: ST_TO_ADDR
// hc_gallery :=  ;
37579: LD_ADDR_OWVAR 33
37583: PUSH
37584: LD_STRING 
37586: ST_TO_ADDR
// end ;
37587: LD_VAR 0 1
37591: RET
// export function PrepareMastodont ( ) ; begin
37592: LD_INT 0
37594: PPUSH
// uc_side := 0 ;
37595: LD_ADDR_OWVAR 20
37599: PUSH
37600: LD_INT 0
37602: ST_TO_ADDR
// uc_nation := 0 ;
37603: LD_ADDR_OWVAR 21
37607: PUSH
37608: LD_INT 0
37610: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37611: LD_ADDR_OWVAR 37
37615: PUSH
37616: LD_INT 31
37618: ST_TO_ADDR
// vc_control := control_rider ;
37619: LD_ADDR_OWVAR 38
37623: PUSH
37624: LD_INT 4
37626: ST_TO_ADDR
// end ;
37627: LD_VAR 0 1
37631: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37632: LD_INT 0
37634: PPUSH
37635: PPUSH
37636: PPUSH
// uc_side = 0 ;
37637: LD_ADDR_OWVAR 20
37641: PUSH
37642: LD_INT 0
37644: ST_TO_ADDR
// uc_nation = 0 ;
37645: LD_ADDR_OWVAR 21
37649: PUSH
37650: LD_INT 0
37652: ST_TO_ADDR
// InitHc_All ( ) ;
37653: CALL_OW 584
// InitVc ;
37657: CALL_OW 20
// if mastodonts then
37661: LD_VAR 0 6
37665: IFFALSE 37732
// for i = 1 to mastodonts do
37667: LD_ADDR_VAR 0 11
37671: PUSH
37672: DOUBLE
37673: LD_INT 1
37675: DEC
37676: ST_TO_ADDR
37677: LD_VAR 0 6
37681: PUSH
37682: FOR_TO
37683: IFFALSE 37730
// begin vc_chassis := 31 ;
37685: LD_ADDR_OWVAR 37
37689: PUSH
37690: LD_INT 31
37692: ST_TO_ADDR
// vc_control := control_rider ;
37693: LD_ADDR_OWVAR 38
37697: PUSH
37698: LD_INT 4
37700: ST_TO_ADDR
// animal := CreateVehicle ;
37701: LD_ADDR_VAR 0 12
37705: PUSH
37706: CALL_OW 45
37710: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37711: LD_VAR 0 12
37715: PPUSH
37716: LD_VAR 0 8
37720: PPUSH
37721: LD_INT 0
37723: PPUSH
37724: CALL 39860 0 3
// end ;
37728: GO 37682
37730: POP
37731: POP
// if horses then
37732: LD_VAR 0 5
37736: IFFALSE 37803
// for i = 1 to horses do
37738: LD_ADDR_VAR 0 11
37742: PUSH
37743: DOUBLE
37744: LD_INT 1
37746: DEC
37747: ST_TO_ADDR
37748: LD_VAR 0 5
37752: PUSH
37753: FOR_TO
37754: IFFALSE 37801
// begin hc_class := 21 ;
37756: LD_ADDR_OWVAR 28
37760: PUSH
37761: LD_INT 21
37763: ST_TO_ADDR
// hc_gallery :=  ;
37764: LD_ADDR_OWVAR 33
37768: PUSH
37769: LD_STRING 
37771: ST_TO_ADDR
// animal := CreateHuman ;
37772: LD_ADDR_VAR 0 12
37776: PUSH
37777: CALL_OW 44
37781: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37782: LD_VAR 0 12
37786: PPUSH
37787: LD_VAR 0 8
37791: PPUSH
37792: LD_INT 0
37794: PPUSH
37795: CALL 39860 0 3
// end ;
37799: GO 37753
37801: POP
37802: POP
// if birds then
37803: LD_VAR 0 1
37807: IFFALSE 37874
// for i = 1 to birds do
37809: LD_ADDR_VAR 0 11
37813: PUSH
37814: DOUBLE
37815: LD_INT 1
37817: DEC
37818: ST_TO_ADDR
37819: LD_VAR 0 1
37823: PUSH
37824: FOR_TO
37825: IFFALSE 37872
// begin hc_class = 18 ;
37827: LD_ADDR_OWVAR 28
37831: PUSH
37832: LD_INT 18
37834: ST_TO_ADDR
// hc_gallery =  ;
37835: LD_ADDR_OWVAR 33
37839: PUSH
37840: LD_STRING 
37842: ST_TO_ADDR
// animal := CreateHuman ;
37843: LD_ADDR_VAR 0 12
37847: PUSH
37848: CALL_OW 44
37852: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37853: LD_VAR 0 12
37857: PPUSH
37858: LD_VAR 0 8
37862: PPUSH
37863: LD_INT 0
37865: PPUSH
37866: CALL 39860 0 3
// end ;
37870: GO 37824
37872: POP
37873: POP
// if tigers then
37874: LD_VAR 0 2
37878: IFFALSE 37962
// for i = 1 to tigers do
37880: LD_ADDR_VAR 0 11
37884: PUSH
37885: DOUBLE
37886: LD_INT 1
37888: DEC
37889: ST_TO_ADDR
37890: LD_VAR 0 2
37894: PUSH
37895: FOR_TO
37896: IFFALSE 37960
// begin hc_class = class_tiger ;
37898: LD_ADDR_OWVAR 28
37902: PUSH
37903: LD_INT 14
37905: ST_TO_ADDR
// hc_gallery =  ;
37906: LD_ADDR_OWVAR 33
37910: PUSH
37911: LD_STRING 
37913: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37914: LD_ADDR_OWVAR 35
37918: PUSH
37919: LD_INT 7
37921: NEG
37922: PPUSH
37923: LD_INT 7
37925: PPUSH
37926: CALL_OW 12
37930: ST_TO_ADDR
// animal := CreateHuman ;
37931: LD_ADDR_VAR 0 12
37935: PUSH
37936: CALL_OW 44
37940: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37941: LD_VAR 0 12
37945: PPUSH
37946: LD_VAR 0 8
37950: PPUSH
37951: LD_INT 0
37953: PPUSH
37954: CALL 39860 0 3
// end ;
37958: GO 37895
37960: POP
37961: POP
// if apemans then
37962: LD_VAR 0 3
37966: IFFALSE 38089
// for i = 1 to apemans do
37968: LD_ADDR_VAR 0 11
37972: PUSH
37973: DOUBLE
37974: LD_INT 1
37976: DEC
37977: ST_TO_ADDR
37978: LD_VAR 0 3
37982: PUSH
37983: FOR_TO
37984: IFFALSE 38087
// begin hc_class = class_apeman ;
37986: LD_ADDR_OWVAR 28
37990: PUSH
37991: LD_INT 12
37993: ST_TO_ADDR
// hc_gallery =  ;
37994: LD_ADDR_OWVAR 33
37998: PUSH
37999: LD_STRING 
38001: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
38002: LD_ADDR_OWVAR 35
38006: PUSH
38007: LD_INT 2
38009: NEG
38010: PPUSH
38011: LD_INT 2
38013: PPUSH
38014: CALL_OW 12
38018: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38019: LD_ADDR_OWVAR 31
38023: PUSH
38024: LD_INT 1
38026: PPUSH
38027: LD_INT 3
38029: PPUSH
38030: CALL_OW 12
38034: PUSH
38035: LD_INT 1
38037: PPUSH
38038: LD_INT 3
38040: PPUSH
38041: CALL_OW 12
38045: PUSH
38046: LD_INT 0
38048: PUSH
38049: LD_INT 0
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: ST_TO_ADDR
// animal := CreateHuman ;
38058: LD_ADDR_VAR 0 12
38062: PUSH
38063: CALL_OW 44
38067: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38068: LD_VAR 0 12
38072: PPUSH
38073: LD_VAR 0 8
38077: PPUSH
38078: LD_INT 0
38080: PPUSH
38081: CALL 39860 0 3
// end ;
38085: GO 37983
38087: POP
38088: POP
// if enchidnas then
38089: LD_VAR 0 4
38093: IFFALSE 38160
// for i = 1 to enchidnas do
38095: LD_ADDR_VAR 0 11
38099: PUSH
38100: DOUBLE
38101: LD_INT 1
38103: DEC
38104: ST_TO_ADDR
38105: LD_VAR 0 4
38109: PUSH
38110: FOR_TO
38111: IFFALSE 38158
// begin hc_class = 13 ;
38113: LD_ADDR_OWVAR 28
38117: PUSH
38118: LD_INT 13
38120: ST_TO_ADDR
// hc_gallery =  ;
38121: LD_ADDR_OWVAR 33
38125: PUSH
38126: LD_STRING 
38128: ST_TO_ADDR
// animal := CreateHuman ;
38129: LD_ADDR_VAR 0 12
38133: PUSH
38134: CALL_OW 44
38138: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38139: LD_VAR 0 12
38143: PPUSH
38144: LD_VAR 0 8
38148: PPUSH
38149: LD_INT 0
38151: PPUSH
38152: CALL 39860 0 3
// end ;
38156: GO 38110
38158: POP
38159: POP
// if fishes then
38160: LD_VAR 0 7
38164: IFFALSE 38231
// for i = 1 to fishes do
38166: LD_ADDR_VAR 0 11
38170: PUSH
38171: DOUBLE
38172: LD_INT 1
38174: DEC
38175: ST_TO_ADDR
38176: LD_VAR 0 7
38180: PUSH
38181: FOR_TO
38182: IFFALSE 38229
// begin hc_class = 20 ;
38184: LD_ADDR_OWVAR 28
38188: PUSH
38189: LD_INT 20
38191: ST_TO_ADDR
// hc_gallery =  ;
38192: LD_ADDR_OWVAR 33
38196: PUSH
38197: LD_STRING 
38199: ST_TO_ADDR
// animal := CreateHuman ;
38200: LD_ADDR_VAR 0 12
38204: PUSH
38205: CALL_OW 44
38209: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
38210: LD_VAR 0 12
38214: PPUSH
38215: LD_VAR 0 9
38219: PPUSH
38220: LD_INT 0
38222: PPUSH
38223: CALL 39860 0 3
// end ;
38227: GO 38181
38229: POP
38230: POP
// end ;
38231: LD_VAR 0 10
38235: RET
// export function WantHeal ( sci , unit ) ; begin
38236: LD_INT 0
38238: PPUSH
// if GetTaskList ( sci ) > 0 then
38239: LD_VAR 0 1
38243: PPUSH
38244: CALL_OW 437
38248: PUSH
38249: LD_INT 0
38251: GREATER
38252: IFFALSE 38322
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38254: LD_VAR 0 1
38258: PPUSH
38259: CALL_OW 437
38263: PUSH
38264: LD_INT 1
38266: ARRAY
38267: PUSH
38268: LD_INT 1
38270: ARRAY
38271: PUSH
38272: LD_STRING l
38274: EQUAL
38275: PUSH
38276: LD_VAR 0 1
38280: PPUSH
38281: CALL_OW 437
38285: PUSH
38286: LD_INT 1
38288: ARRAY
38289: PUSH
38290: LD_INT 4
38292: ARRAY
38293: PUSH
38294: LD_VAR 0 2
38298: EQUAL
38299: AND
38300: IFFALSE 38312
// result := true else
38302: LD_ADDR_VAR 0 3
38306: PUSH
38307: LD_INT 1
38309: ST_TO_ADDR
38310: GO 38320
// result := false ;
38312: LD_ADDR_VAR 0 3
38316: PUSH
38317: LD_INT 0
38319: ST_TO_ADDR
// end else
38320: GO 38330
// result := false ;
38322: LD_ADDR_VAR 0 3
38326: PUSH
38327: LD_INT 0
38329: ST_TO_ADDR
// end ;
38330: LD_VAR 0 3
38334: RET
// export function HealTarget ( sci ) ; begin
38335: LD_INT 0
38337: PPUSH
// if not sci then
38338: LD_VAR 0 1
38342: NOT
38343: IFFALSE 38347
// exit ;
38345: GO 38412
// result := 0 ;
38347: LD_ADDR_VAR 0 2
38351: PUSH
38352: LD_INT 0
38354: ST_TO_ADDR
// if GetTaskList ( sci ) then
38355: LD_VAR 0 1
38359: PPUSH
38360: CALL_OW 437
38364: IFFALSE 38412
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38366: LD_VAR 0 1
38370: PPUSH
38371: CALL_OW 437
38375: PUSH
38376: LD_INT 1
38378: ARRAY
38379: PUSH
38380: LD_INT 1
38382: ARRAY
38383: PUSH
38384: LD_STRING l
38386: EQUAL
38387: IFFALSE 38412
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38389: LD_ADDR_VAR 0 2
38393: PUSH
38394: LD_VAR 0 1
38398: PPUSH
38399: CALL_OW 437
38403: PUSH
38404: LD_INT 1
38406: ARRAY
38407: PUSH
38408: LD_INT 4
38410: ARRAY
38411: ST_TO_ADDR
// end ;
38412: LD_VAR 0 2
38416: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38417: LD_INT 0
38419: PPUSH
38420: PPUSH
38421: PPUSH
38422: PPUSH
// if not base_units then
38423: LD_VAR 0 1
38427: NOT
38428: IFFALSE 38432
// exit ;
38430: GO 38519
// result := false ;
38432: LD_ADDR_VAR 0 2
38436: PUSH
38437: LD_INT 0
38439: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38440: LD_ADDR_VAR 0 5
38444: PUSH
38445: LD_VAR 0 1
38449: PPUSH
38450: LD_INT 21
38452: PUSH
38453: LD_INT 3
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PPUSH
38460: CALL_OW 72
38464: ST_TO_ADDR
// if not tmp then
38465: LD_VAR 0 5
38469: NOT
38470: IFFALSE 38474
// exit ;
38472: GO 38519
// for i in tmp do
38474: LD_ADDR_VAR 0 3
38478: PUSH
38479: LD_VAR 0 5
38483: PUSH
38484: FOR_IN
38485: IFFALSE 38517
// begin result := EnemyInRange ( i , 22 ) ;
38487: LD_ADDR_VAR 0 2
38491: PUSH
38492: LD_VAR 0 3
38496: PPUSH
38497: LD_INT 22
38499: PPUSH
38500: CALL 36106 0 2
38504: ST_TO_ADDR
// if result then
38505: LD_VAR 0 2
38509: IFFALSE 38515
// exit ;
38511: POP
38512: POP
38513: GO 38519
// end ;
38515: GO 38484
38517: POP
38518: POP
// end ;
38519: LD_VAR 0 2
38523: RET
// export function FilterByTag ( units , tag ) ; begin
38524: LD_INT 0
38526: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38527: LD_ADDR_VAR 0 3
38531: PUSH
38532: LD_VAR 0 1
38536: PPUSH
38537: LD_INT 120
38539: PUSH
38540: LD_VAR 0 2
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PPUSH
38549: CALL_OW 72
38553: ST_TO_ADDR
// end ;
38554: LD_VAR 0 3
38558: RET
// export function IsDriver ( un ) ; begin
38559: LD_INT 0
38561: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38562: LD_ADDR_VAR 0 2
38566: PUSH
38567: LD_VAR 0 1
38571: PUSH
38572: LD_INT 55
38574: PUSH
38575: EMPTY
38576: LIST
38577: PPUSH
38578: CALL_OW 69
38582: IN
38583: ST_TO_ADDR
// end ;
38584: LD_VAR 0 2
38588: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38589: LD_INT 0
38591: PPUSH
38592: PPUSH
// list := [ ] ;
38593: LD_ADDR_VAR 0 5
38597: PUSH
38598: EMPTY
38599: ST_TO_ADDR
// case d of 0 :
38600: LD_VAR 0 3
38604: PUSH
38605: LD_INT 0
38607: DOUBLE
38608: EQUAL
38609: IFTRUE 38613
38611: GO 38746
38613: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38614: LD_ADDR_VAR 0 5
38618: PUSH
38619: LD_VAR 0 1
38623: PUSH
38624: LD_INT 4
38626: MINUS
38627: PUSH
38628: LD_VAR 0 2
38632: PUSH
38633: LD_INT 4
38635: MINUS
38636: PUSH
38637: LD_INT 2
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: LIST
38644: PUSH
38645: LD_VAR 0 1
38649: PUSH
38650: LD_INT 3
38652: MINUS
38653: PUSH
38654: LD_VAR 0 2
38658: PUSH
38659: LD_INT 1
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: LIST
38666: PUSH
38667: LD_VAR 0 1
38671: PUSH
38672: LD_INT 4
38674: PLUS
38675: PUSH
38676: LD_VAR 0 2
38680: PUSH
38681: LD_INT 4
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: LIST
38688: PUSH
38689: LD_VAR 0 1
38693: PUSH
38694: LD_INT 3
38696: PLUS
38697: PUSH
38698: LD_VAR 0 2
38702: PUSH
38703: LD_INT 3
38705: PLUS
38706: PUSH
38707: LD_INT 5
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: LIST
38714: PUSH
38715: LD_VAR 0 1
38719: PUSH
38720: LD_VAR 0 2
38724: PUSH
38725: LD_INT 4
38727: PLUS
38728: PUSH
38729: LD_INT 0
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: LIST
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: LIST
38741: LIST
38742: LIST
38743: ST_TO_ADDR
// end ; 1 :
38744: GO 39444
38746: LD_INT 1
38748: DOUBLE
38749: EQUAL
38750: IFTRUE 38754
38752: GO 38887
38754: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38755: LD_ADDR_VAR 0 5
38759: PUSH
38760: LD_VAR 0 1
38764: PUSH
38765: LD_VAR 0 2
38769: PUSH
38770: LD_INT 4
38772: MINUS
38773: PUSH
38774: LD_INT 3
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: LIST
38781: PUSH
38782: LD_VAR 0 1
38786: PUSH
38787: LD_INT 3
38789: MINUS
38790: PUSH
38791: LD_VAR 0 2
38795: PUSH
38796: LD_INT 3
38798: MINUS
38799: PUSH
38800: LD_INT 2
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: LIST
38807: PUSH
38808: LD_VAR 0 1
38812: PUSH
38813: LD_INT 4
38815: MINUS
38816: PUSH
38817: LD_VAR 0 2
38821: PUSH
38822: LD_INT 1
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: LIST
38829: PUSH
38830: LD_VAR 0 1
38834: PUSH
38835: LD_VAR 0 2
38839: PUSH
38840: LD_INT 3
38842: PLUS
38843: PUSH
38844: LD_INT 0
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: LIST
38851: PUSH
38852: LD_VAR 0 1
38856: PUSH
38857: LD_INT 4
38859: PLUS
38860: PUSH
38861: LD_VAR 0 2
38865: PUSH
38866: LD_INT 4
38868: PLUS
38869: PUSH
38870: LD_INT 5
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: LIST
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: ST_TO_ADDR
// end ; 2 :
38885: GO 39444
38887: LD_INT 2
38889: DOUBLE
38890: EQUAL
38891: IFTRUE 38895
38893: GO 39024
38895: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38896: LD_ADDR_VAR 0 5
38900: PUSH
38901: LD_VAR 0 1
38905: PUSH
38906: LD_VAR 0 2
38910: PUSH
38911: LD_INT 3
38913: MINUS
38914: PUSH
38915: LD_INT 3
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: LIST
38922: PUSH
38923: LD_VAR 0 1
38927: PUSH
38928: LD_INT 4
38930: PLUS
38931: PUSH
38932: LD_VAR 0 2
38936: PUSH
38937: LD_INT 4
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: LIST
38944: PUSH
38945: LD_VAR 0 1
38949: PUSH
38950: LD_VAR 0 2
38954: PUSH
38955: LD_INT 4
38957: PLUS
38958: PUSH
38959: LD_INT 0
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: LIST
38966: PUSH
38967: LD_VAR 0 1
38971: PUSH
38972: LD_INT 3
38974: MINUS
38975: PUSH
38976: LD_VAR 0 2
38980: PUSH
38981: LD_INT 1
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: LIST
38988: PUSH
38989: LD_VAR 0 1
38993: PUSH
38994: LD_INT 4
38996: MINUS
38997: PUSH
38998: LD_VAR 0 2
39002: PUSH
39003: LD_INT 4
39005: MINUS
39006: PUSH
39007: LD_INT 2
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: LIST
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: ST_TO_ADDR
// end ; 3 :
39022: GO 39444
39024: LD_INT 3
39026: DOUBLE
39027: EQUAL
39028: IFTRUE 39032
39030: GO 39165
39032: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39033: LD_ADDR_VAR 0 5
39037: PUSH
39038: LD_VAR 0 1
39042: PUSH
39043: LD_INT 3
39045: PLUS
39046: PUSH
39047: LD_VAR 0 2
39051: PUSH
39052: LD_INT 4
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: LIST
39059: PUSH
39060: LD_VAR 0 1
39064: PUSH
39065: LD_INT 4
39067: PLUS
39068: PUSH
39069: LD_VAR 0 2
39073: PUSH
39074: LD_INT 4
39076: PLUS
39077: PUSH
39078: LD_INT 5
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: LIST
39085: PUSH
39086: LD_VAR 0 1
39090: PUSH
39091: LD_INT 4
39093: MINUS
39094: PUSH
39095: LD_VAR 0 2
39099: PUSH
39100: LD_INT 1
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: LIST
39107: PUSH
39108: LD_VAR 0 1
39112: PUSH
39113: LD_VAR 0 2
39117: PUSH
39118: LD_INT 4
39120: MINUS
39121: PUSH
39122: LD_INT 3
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: LIST
39129: PUSH
39130: LD_VAR 0 1
39134: PUSH
39135: LD_INT 3
39137: MINUS
39138: PUSH
39139: LD_VAR 0 2
39143: PUSH
39144: LD_INT 3
39146: MINUS
39147: PUSH
39148: LD_INT 2
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: LIST
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: ST_TO_ADDR
// end ; 4 :
39163: GO 39444
39165: LD_INT 4
39167: DOUBLE
39168: EQUAL
39169: IFTRUE 39173
39171: GO 39306
39173: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
39174: LD_ADDR_VAR 0 5
39178: PUSH
39179: LD_VAR 0 1
39183: PUSH
39184: LD_VAR 0 2
39188: PUSH
39189: LD_INT 4
39191: PLUS
39192: PUSH
39193: LD_INT 0
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: LIST
39200: PUSH
39201: LD_VAR 0 1
39205: PUSH
39206: LD_INT 3
39208: PLUS
39209: PUSH
39210: LD_VAR 0 2
39214: PUSH
39215: LD_INT 3
39217: PLUS
39218: PUSH
39219: LD_INT 5
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: LIST
39226: PUSH
39227: LD_VAR 0 1
39231: PUSH
39232: LD_INT 4
39234: PLUS
39235: PUSH
39236: LD_VAR 0 2
39240: PUSH
39241: LD_INT 4
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: LIST
39248: PUSH
39249: LD_VAR 0 1
39253: PUSH
39254: LD_VAR 0 2
39258: PUSH
39259: LD_INT 3
39261: MINUS
39262: PUSH
39263: LD_INT 3
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: LIST
39270: PUSH
39271: LD_VAR 0 1
39275: PUSH
39276: LD_INT 4
39278: MINUS
39279: PUSH
39280: LD_VAR 0 2
39284: PUSH
39285: LD_INT 4
39287: MINUS
39288: PUSH
39289: LD_INT 2
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: LIST
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: ST_TO_ADDR
// end ; 5 :
39304: GO 39444
39306: LD_INT 5
39308: DOUBLE
39309: EQUAL
39310: IFTRUE 39314
39312: GO 39443
39314: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39315: LD_ADDR_VAR 0 5
39319: PUSH
39320: LD_VAR 0 1
39324: PUSH
39325: LD_INT 4
39327: MINUS
39328: PUSH
39329: LD_VAR 0 2
39333: PUSH
39334: LD_INT 1
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: LIST
39341: PUSH
39342: LD_VAR 0 1
39346: PUSH
39347: LD_VAR 0 2
39351: PUSH
39352: LD_INT 4
39354: MINUS
39355: PUSH
39356: LD_INT 3
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: LIST
39363: PUSH
39364: LD_VAR 0 1
39368: PUSH
39369: LD_INT 4
39371: PLUS
39372: PUSH
39373: LD_VAR 0 2
39377: PUSH
39378: LD_INT 4
39380: PLUS
39381: PUSH
39382: LD_INT 5
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: LIST
39389: PUSH
39390: LD_VAR 0 1
39394: PUSH
39395: LD_INT 3
39397: PLUS
39398: PUSH
39399: LD_VAR 0 2
39403: PUSH
39404: LD_INT 4
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: LIST
39411: PUSH
39412: LD_VAR 0 1
39416: PUSH
39417: LD_VAR 0 2
39421: PUSH
39422: LD_INT 3
39424: PLUS
39425: PUSH
39426: LD_INT 0
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: LIST
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: LIST
39438: LIST
39439: LIST
39440: ST_TO_ADDR
// end ; end ;
39441: GO 39444
39443: POP
// result := list ;
39444: LD_ADDR_VAR 0 4
39448: PUSH
39449: LD_VAR 0 5
39453: ST_TO_ADDR
// end ;
39454: LD_VAR 0 4
39458: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39459: LD_INT 0
39461: PPUSH
39462: PPUSH
39463: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39464: LD_VAR 0 1
39468: NOT
39469: PUSH
39470: LD_VAR 0 2
39474: PUSH
39475: LD_INT 1
39477: PUSH
39478: LD_INT 2
39480: PUSH
39481: LD_INT 3
39483: PUSH
39484: LD_INT 4
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: IN
39493: NOT
39494: OR
39495: IFFALSE 39499
// exit ;
39497: GO 39582
// tmp := [ ] ;
39499: LD_ADDR_VAR 0 5
39503: PUSH
39504: EMPTY
39505: ST_TO_ADDR
// for i in units do
39506: LD_ADDR_VAR 0 4
39510: PUSH
39511: LD_VAR 0 1
39515: PUSH
39516: FOR_IN
39517: IFFALSE 39551
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39519: LD_ADDR_VAR 0 5
39523: PUSH
39524: LD_VAR 0 5
39528: PPUSH
39529: LD_VAR 0 4
39533: PPUSH
39534: LD_VAR 0 2
39538: PPUSH
39539: CALL_OW 259
39543: PPUSH
39544: CALL 40942 0 2
39548: ST_TO_ADDR
39549: GO 39516
39551: POP
39552: POP
// if not tmp then
39553: LD_VAR 0 5
39557: NOT
39558: IFFALSE 39562
// exit ;
39560: GO 39582
// result := SortListByListDesc ( units , tmp ) ;
39562: LD_ADDR_VAR 0 3
39566: PUSH
39567: LD_VAR 0 1
39571: PPUSH
39572: LD_VAR 0 5
39576: PPUSH
39577: CALL_OW 77
39581: ST_TO_ADDR
// end ;
39582: LD_VAR 0 3
39586: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39587: LD_INT 0
39589: PPUSH
39590: PPUSH
39591: PPUSH
// result := false ;
39592: LD_ADDR_VAR 0 3
39596: PUSH
39597: LD_INT 0
39599: ST_TO_ADDR
// if not building then
39600: LD_VAR 0 2
39604: NOT
39605: IFFALSE 39609
// exit ;
39607: GO 39747
// x := GetX ( building ) ;
39609: LD_ADDR_VAR 0 4
39613: PUSH
39614: LD_VAR 0 2
39618: PPUSH
39619: CALL_OW 250
39623: ST_TO_ADDR
// y := GetY ( building ) ;
39624: LD_ADDR_VAR 0 5
39628: PUSH
39629: LD_VAR 0 2
39633: PPUSH
39634: CALL_OW 251
39638: ST_TO_ADDR
// if not x or not y then
39639: LD_VAR 0 4
39643: NOT
39644: PUSH
39645: LD_VAR 0 5
39649: NOT
39650: OR
39651: IFFALSE 39655
// exit ;
39653: GO 39747
// if GetTaskList ( unit ) then
39655: LD_VAR 0 1
39659: PPUSH
39660: CALL_OW 437
39664: IFFALSE 39747
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39666: LD_STRING e
39668: PUSH
39669: LD_VAR 0 1
39673: PPUSH
39674: CALL_OW 437
39678: PUSH
39679: LD_INT 1
39681: ARRAY
39682: PUSH
39683: LD_INT 1
39685: ARRAY
39686: EQUAL
39687: PUSH
39688: LD_VAR 0 4
39692: PUSH
39693: LD_VAR 0 1
39697: PPUSH
39698: CALL_OW 437
39702: PUSH
39703: LD_INT 1
39705: ARRAY
39706: PUSH
39707: LD_INT 2
39709: ARRAY
39710: EQUAL
39711: AND
39712: PUSH
39713: LD_VAR 0 5
39717: PUSH
39718: LD_VAR 0 1
39722: PPUSH
39723: CALL_OW 437
39727: PUSH
39728: LD_INT 1
39730: ARRAY
39731: PUSH
39732: LD_INT 3
39734: ARRAY
39735: EQUAL
39736: AND
39737: IFFALSE 39747
// result := true end ;
39739: LD_ADDR_VAR 0 3
39743: PUSH
39744: LD_INT 1
39746: ST_TO_ADDR
// end ;
39747: LD_VAR 0 3
39751: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39752: LD_INT 0
39754: PPUSH
// result := false ;
39755: LD_ADDR_VAR 0 4
39759: PUSH
39760: LD_INT 0
39762: ST_TO_ADDR
// if GetTaskList ( unit ) then
39763: LD_VAR 0 1
39767: PPUSH
39768: CALL_OW 437
39772: IFFALSE 39855
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39774: LD_STRING M
39776: PUSH
39777: LD_VAR 0 1
39781: PPUSH
39782: CALL_OW 437
39786: PUSH
39787: LD_INT 1
39789: ARRAY
39790: PUSH
39791: LD_INT 1
39793: ARRAY
39794: EQUAL
39795: PUSH
39796: LD_VAR 0 2
39800: PUSH
39801: LD_VAR 0 1
39805: PPUSH
39806: CALL_OW 437
39810: PUSH
39811: LD_INT 1
39813: ARRAY
39814: PUSH
39815: LD_INT 2
39817: ARRAY
39818: EQUAL
39819: AND
39820: PUSH
39821: LD_VAR 0 3
39825: PUSH
39826: LD_VAR 0 1
39830: PPUSH
39831: CALL_OW 437
39835: PUSH
39836: LD_INT 1
39838: ARRAY
39839: PUSH
39840: LD_INT 3
39842: ARRAY
39843: EQUAL
39844: AND
39845: IFFALSE 39855
// result := true ;
39847: LD_ADDR_VAR 0 4
39851: PUSH
39852: LD_INT 1
39854: ST_TO_ADDR
// end ; end ;
39855: LD_VAR 0 4
39859: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39860: LD_INT 0
39862: PPUSH
39863: PPUSH
39864: PPUSH
39865: PPUSH
// if not unit or not area then
39866: LD_VAR 0 1
39870: NOT
39871: PUSH
39872: LD_VAR 0 2
39876: NOT
39877: OR
39878: IFFALSE 39882
// exit ;
39880: GO 40045
// tmp := AreaToList ( area , i ) ;
39882: LD_ADDR_VAR 0 6
39886: PUSH
39887: LD_VAR 0 2
39891: PPUSH
39892: LD_VAR 0 5
39896: PPUSH
39897: CALL_OW 517
39901: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39902: LD_ADDR_VAR 0 5
39906: PUSH
39907: DOUBLE
39908: LD_INT 1
39910: DEC
39911: ST_TO_ADDR
39912: LD_VAR 0 6
39916: PUSH
39917: LD_INT 1
39919: ARRAY
39920: PUSH
39921: FOR_TO
39922: IFFALSE 40043
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39924: LD_ADDR_VAR 0 7
39928: PUSH
39929: LD_VAR 0 6
39933: PUSH
39934: LD_INT 1
39936: ARRAY
39937: PUSH
39938: LD_VAR 0 5
39942: ARRAY
39943: PUSH
39944: LD_VAR 0 6
39948: PUSH
39949: LD_INT 2
39951: ARRAY
39952: PUSH
39953: LD_VAR 0 5
39957: ARRAY
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
39963: LD_INT 92
39965: PUSH
39966: LD_VAR 0 7
39970: PUSH
39971: LD_INT 1
39973: ARRAY
39974: PUSH
39975: LD_VAR 0 7
39979: PUSH
39980: LD_INT 2
39982: ARRAY
39983: PUSH
39984: LD_INT 3
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: PPUSH
39993: CALL_OW 69
39997: PUSH
39998: LD_INT 0
40000: EQUAL
40001: IFFALSE 40041
// begin PlaceUnitArea ( unit , area , mode ) ;
40003: LD_VAR 0 1
40007: PPUSH
40008: LD_VAR 0 2
40012: PPUSH
40013: LD_VAR 0 3
40017: PPUSH
40018: CALL_OW 49
// result := IsPlaced ( unit ) ;
40022: LD_ADDR_VAR 0 4
40026: PUSH
40027: LD_VAR 0 1
40031: PPUSH
40032: CALL_OW 305
40036: ST_TO_ADDR
// exit ;
40037: POP
40038: POP
40039: GO 40045
// end ; end ;
40041: GO 39921
40043: POP
40044: POP
// end ;
40045: LD_VAR 0 4
40049: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40050: LD_INT 0
40052: PPUSH
40053: PPUSH
40054: PPUSH
// if not side or side > 8 then
40055: LD_VAR 0 1
40059: NOT
40060: PUSH
40061: LD_VAR 0 1
40065: PUSH
40066: LD_INT 8
40068: GREATER
40069: OR
40070: IFFALSE 40074
// exit ;
40072: GO 40261
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40074: LD_ADDR_VAR 0 4
40078: PUSH
40079: LD_INT 22
40081: PUSH
40082: LD_VAR 0 1
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 21
40093: PUSH
40094: LD_INT 3
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PPUSH
40105: CALL_OW 69
40109: ST_TO_ADDR
// if not tmp then
40110: LD_VAR 0 4
40114: NOT
40115: IFFALSE 40119
// exit ;
40117: GO 40261
// enable_addtolog := true ;
40119: LD_ADDR_OWVAR 81
40123: PUSH
40124: LD_INT 1
40126: ST_TO_ADDR
// AddToLog ( [ ) ;
40127: LD_STRING [
40129: PPUSH
40130: CALL_OW 561
// for i in tmp do
40134: LD_ADDR_VAR 0 3
40138: PUSH
40139: LD_VAR 0 4
40143: PUSH
40144: FOR_IN
40145: IFFALSE 40252
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
40147: LD_STRING [
40149: PUSH
40150: LD_VAR 0 3
40154: PPUSH
40155: CALL_OW 266
40159: STR
40160: PUSH
40161: LD_STRING , 
40163: STR
40164: PUSH
40165: LD_VAR 0 3
40169: PPUSH
40170: CALL_OW 250
40174: STR
40175: PUSH
40176: LD_STRING , 
40178: STR
40179: PUSH
40180: LD_VAR 0 3
40184: PPUSH
40185: CALL_OW 251
40189: STR
40190: PUSH
40191: LD_STRING , 
40193: STR
40194: PUSH
40195: LD_VAR 0 3
40199: PPUSH
40200: CALL_OW 254
40204: STR
40205: PUSH
40206: LD_STRING , 
40208: STR
40209: PUSH
40210: LD_VAR 0 3
40214: PPUSH
40215: LD_INT 1
40217: PPUSH
40218: CALL_OW 268
40222: STR
40223: PUSH
40224: LD_STRING , 
40226: STR
40227: PUSH
40228: LD_VAR 0 3
40232: PPUSH
40233: LD_INT 2
40235: PPUSH
40236: CALL_OW 268
40240: STR
40241: PUSH
40242: LD_STRING ],
40244: STR
40245: PPUSH
40246: CALL_OW 561
// end ;
40250: GO 40144
40252: POP
40253: POP
// AddToLog ( ]; ) ;
40254: LD_STRING ];
40256: PPUSH
40257: CALL_OW 561
// end ;
40261: LD_VAR 0 2
40265: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40266: LD_INT 0
40268: PPUSH
40269: PPUSH
40270: PPUSH
40271: PPUSH
40272: PPUSH
// if not area or not rate or not max then
40273: LD_VAR 0 1
40277: NOT
40278: PUSH
40279: LD_VAR 0 2
40283: NOT
40284: OR
40285: PUSH
40286: LD_VAR 0 4
40290: NOT
40291: OR
40292: IFFALSE 40296
// exit ;
40294: GO 40485
// while 1 do
40296: LD_INT 1
40298: IFFALSE 40485
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40300: LD_ADDR_VAR 0 9
40304: PUSH
40305: LD_VAR 0 1
40309: PPUSH
40310: LD_INT 1
40312: PPUSH
40313: CALL_OW 287
40317: PUSH
40318: LD_INT 10
40320: MUL
40321: ST_TO_ADDR
// r := rate / 10 ;
40322: LD_ADDR_VAR 0 7
40326: PUSH
40327: LD_VAR 0 2
40331: PUSH
40332: LD_INT 10
40334: DIVREAL
40335: ST_TO_ADDR
// time := 1 1$00 ;
40336: LD_ADDR_VAR 0 8
40340: PUSH
40341: LD_INT 2100
40343: ST_TO_ADDR
// if amount < min then
40344: LD_VAR 0 9
40348: PUSH
40349: LD_VAR 0 3
40353: LESS
40354: IFFALSE 40372
// r := r * 2 else
40356: LD_ADDR_VAR 0 7
40360: PUSH
40361: LD_VAR 0 7
40365: PUSH
40366: LD_INT 2
40368: MUL
40369: ST_TO_ADDR
40370: GO 40398
// if amount > max then
40372: LD_VAR 0 9
40376: PUSH
40377: LD_VAR 0 4
40381: GREATER
40382: IFFALSE 40398
// r := r / 2 ;
40384: LD_ADDR_VAR 0 7
40388: PUSH
40389: LD_VAR 0 7
40393: PUSH
40394: LD_INT 2
40396: DIVREAL
40397: ST_TO_ADDR
// time := time / r ;
40398: LD_ADDR_VAR 0 8
40402: PUSH
40403: LD_VAR 0 8
40407: PUSH
40408: LD_VAR 0 7
40412: DIVREAL
40413: ST_TO_ADDR
// if time < 0 then
40414: LD_VAR 0 8
40418: PUSH
40419: LD_INT 0
40421: LESS
40422: IFFALSE 40439
// time := time * - 1 ;
40424: LD_ADDR_VAR 0 8
40428: PUSH
40429: LD_VAR 0 8
40433: PUSH
40434: LD_INT 1
40436: NEG
40437: MUL
40438: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40439: LD_VAR 0 8
40443: PUSH
40444: LD_INT 35
40446: PPUSH
40447: LD_INT 875
40449: PPUSH
40450: CALL_OW 12
40454: PLUS
40455: PPUSH
40456: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40460: LD_INT 1
40462: PPUSH
40463: LD_INT 5
40465: PPUSH
40466: CALL_OW 12
40470: PPUSH
40471: LD_VAR 0 1
40475: PPUSH
40476: LD_INT 1
40478: PPUSH
40479: CALL_OW 55
// end ;
40483: GO 40296
// end ;
40485: LD_VAR 0 5
40489: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40490: LD_INT 0
40492: PPUSH
40493: PPUSH
40494: PPUSH
40495: PPUSH
40496: PPUSH
40497: PPUSH
40498: PPUSH
40499: PPUSH
// if not turrets or not factories then
40500: LD_VAR 0 1
40504: NOT
40505: PUSH
40506: LD_VAR 0 2
40510: NOT
40511: OR
40512: IFFALSE 40516
// exit ;
40514: GO 40823
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40516: LD_ADDR_VAR 0 10
40520: PUSH
40521: LD_INT 5
40523: PUSH
40524: LD_INT 6
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 2
40533: PUSH
40534: LD_INT 4
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 3
40543: PUSH
40544: LD_INT 5
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 24
40558: PUSH
40559: LD_INT 25
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 23
40568: PUSH
40569: LD_INT 27
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 42
40582: PUSH
40583: LD_INT 43
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 44
40592: PUSH
40593: LD_INT 46
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: LD_INT 45
40602: PUSH
40603: LD_INT 47
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: LIST
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: LIST
40619: ST_TO_ADDR
// result := [ ] ;
40620: LD_ADDR_VAR 0 3
40624: PUSH
40625: EMPTY
40626: ST_TO_ADDR
// for i in turrets do
40627: LD_ADDR_VAR 0 4
40631: PUSH
40632: LD_VAR 0 1
40636: PUSH
40637: FOR_IN
40638: IFFALSE 40821
// begin nat := GetNation ( i ) ;
40640: LD_ADDR_VAR 0 7
40644: PUSH
40645: LD_VAR 0 4
40649: PPUSH
40650: CALL_OW 248
40654: ST_TO_ADDR
// weapon := 0 ;
40655: LD_ADDR_VAR 0 8
40659: PUSH
40660: LD_INT 0
40662: ST_TO_ADDR
// if not nat then
40663: LD_VAR 0 7
40667: NOT
40668: IFFALSE 40672
// continue ;
40670: GO 40637
// for j in list [ nat ] do
40672: LD_ADDR_VAR 0 5
40676: PUSH
40677: LD_VAR 0 10
40681: PUSH
40682: LD_VAR 0 7
40686: ARRAY
40687: PUSH
40688: FOR_IN
40689: IFFALSE 40730
// if GetBWeapon ( i ) = j [ 1 ] then
40691: LD_VAR 0 4
40695: PPUSH
40696: CALL_OW 269
40700: PUSH
40701: LD_VAR 0 5
40705: PUSH
40706: LD_INT 1
40708: ARRAY
40709: EQUAL
40710: IFFALSE 40728
// begin weapon := j [ 2 ] ;
40712: LD_ADDR_VAR 0 8
40716: PUSH
40717: LD_VAR 0 5
40721: PUSH
40722: LD_INT 2
40724: ARRAY
40725: ST_TO_ADDR
// break ;
40726: GO 40730
// end ;
40728: GO 40688
40730: POP
40731: POP
// if not weapon then
40732: LD_VAR 0 8
40736: NOT
40737: IFFALSE 40741
// continue ;
40739: GO 40637
// for k in factories do
40741: LD_ADDR_VAR 0 6
40745: PUSH
40746: LD_VAR 0 2
40750: PUSH
40751: FOR_IN
40752: IFFALSE 40817
// begin weapons := AvailableWeaponList ( k ) ;
40754: LD_ADDR_VAR 0 9
40758: PUSH
40759: LD_VAR 0 6
40763: PPUSH
40764: CALL_OW 478
40768: ST_TO_ADDR
// if not weapons then
40769: LD_VAR 0 9
40773: NOT
40774: IFFALSE 40778
// continue ;
40776: GO 40751
// if weapon in weapons then
40778: LD_VAR 0 8
40782: PUSH
40783: LD_VAR 0 9
40787: IN
40788: IFFALSE 40815
// begin result := [ i , weapon ] ;
40790: LD_ADDR_VAR 0 3
40794: PUSH
40795: LD_VAR 0 4
40799: PUSH
40800: LD_VAR 0 8
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: ST_TO_ADDR
// exit ;
40809: POP
40810: POP
40811: POP
40812: POP
40813: GO 40823
// end ; end ;
40815: GO 40751
40817: POP
40818: POP
// end ;
40819: GO 40637
40821: POP
40822: POP
// end ;
40823: LD_VAR 0 3
40827: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40828: LD_INT 0
40830: PPUSH
// if not side or side > 8 then
40831: LD_VAR 0 3
40835: NOT
40836: PUSH
40837: LD_VAR 0 3
40841: PUSH
40842: LD_INT 8
40844: GREATER
40845: OR
40846: IFFALSE 40850
// exit ;
40848: GO 40909
// if not range then
40850: LD_VAR 0 4
40854: NOT
40855: IFFALSE 40866
// range := - 12 ;
40857: LD_ADDR_VAR 0 4
40861: PUSH
40862: LD_INT 12
40864: NEG
40865: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40866: LD_VAR 0 1
40870: PPUSH
40871: LD_VAR 0 2
40875: PPUSH
40876: LD_VAR 0 3
40880: PPUSH
40881: LD_VAR 0 4
40885: PPUSH
40886: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40890: LD_VAR 0 1
40894: PPUSH
40895: LD_VAR 0 2
40899: PPUSH
40900: LD_VAR 0 3
40904: PPUSH
40905: CALL_OW 331
// end ;
40909: LD_VAR 0 5
40913: RET
// export function Video ( mode ) ; begin
40914: LD_INT 0
40916: PPUSH
// ingame_video = mode ;
40917: LD_ADDR_OWVAR 52
40921: PUSH
40922: LD_VAR 0 1
40926: ST_TO_ADDR
// interface_hidden = mode ;
40927: LD_ADDR_OWVAR 54
40931: PUSH
40932: LD_VAR 0 1
40936: ST_TO_ADDR
// end ;
40937: LD_VAR 0 2
40941: RET
// export function Join ( array , element ) ; begin
40942: LD_INT 0
40944: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40945: LD_ADDR_VAR 0 3
40949: PUSH
40950: LD_VAR 0 1
40954: PPUSH
40955: LD_VAR 0 1
40959: PUSH
40960: LD_INT 1
40962: PLUS
40963: PPUSH
40964: LD_VAR 0 2
40968: PPUSH
40969: CALL_OW 1
40973: ST_TO_ADDR
// end ;
40974: LD_VAR 0 3
40978: RET
// export function JoinUnion ( array , element ) ; begin
40979: LD_INT 0
40981: PPUSH
// result := array union element ;
40982: LD_ADDR_VAR 0 3
40986: PUSH
40987: LD_VAR 0 1
40991: PUSH
40992: LD_VAR 0 2
40996: UNION
40997: ST_TO_ADDR
// end ;
40998: LD_VAR 0 3
41002: RET
// export function GetBehemoths ( side ) ; begin
41003: LD_INT 0
41005: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
41006: LD_ADDR_VAR 0 2
41010: PUSH
41011: LD_INT 22
41013: PUSH
41014: LD_VAR 0 1
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 31
41025: PUSH
41026: LD_INT 25
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PPUSH
41037: CALL_OW 69
41041: ST_TO_ADDR
// end ;
41042: LD_VAR 0 2
41046: RET
// export function Shuffle ( array ) ; var i , index ; begin
41047: LD_INT 0
41049: PPUSH
41050: PPUSH
41051: PPUSH
// result := [ ] ;
41052: LD_ADDR_VAR 0 2
41056: PUSH
41057: EMPTY
41058: ST_TO_ADDR
// if not array then
41059: LD_VAR 0 1
41063: NOT
41064: IFFALSE 41068
// exit ;
41066: GO 41167
// Randomize ;
41068: CALL_OW 10
// for i = array downto 1 do
41072: LD_ADDR_VAR 0 3
41076: PUSH
41077: DOUBLE
41078: LD_VAR 0 1
41082: INC
41083: ST_TO_ADDR
41084: LD_INT 1
41086: PUSH
41087: FOR_DOWNTO
41088: IFFALSE 41165
// begin index := rand ( 1 , array ) ;
41090: LD_ADDR_VAR 0 4
41094: PUSH
41095: LD_INT 1
41097: PPUSH
41098: LD_VAR 0 1
41102: PPUSH
41103: CALL_OW 12
41107: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41108: LD_ADDR_VAR 0 2
41112: PUSH
41113: LD_VAR 0 2
41117: PPUSH
41118: LD_VAR 0 2
41122: PUSH
41123: LD_INT 1
41125: PLUS
41126: PPUSH
41127: LD_VAR 0 1
41131: PUSH
41132: LD_VAR 0 4
41136: ARRAY
41137: PPUSH
41138: CALL_OW 2
41142: ST_TO_ADDR
// array := Delete ( array , index ) ;
41143: LD_ADDR_VAR 0 1
41147: PUSH
41148: LD_VAR 0 1
41152: PPUSH
41153: LD_VAR 0 4
41157: PPUSH
41158: CALL_OW 3
41162: ST_TO_ADDR
// end ;
41163: GO 41087
41165: POP
41166: POP
// end ;
41167: LD_VAR 0 2
41171: RET
// export function GetBaseMaterials ( base ) ; begin
41172: LD_INT 0
41174: PPUSH
// result := [ 0 , 0 , 0 ] ;
41175: LD_ADDR_VAR 0 2
41179: PUSH
41180: LD_INT 0
41182: PUSH
41183: LD_INT 0
41185: PUSH
41186: LD_INT 0
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: LIST
41193: ST_TO_ADDR
// if not base then
41194: LD_VAR 0 1
41198: NOT
41199: IFFALSE 41203
// exit ;
41201: GO 41252
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
41203: LD_ADDR_VAR 0 2
41207: PUSH
41208: LD_VAR 0 1
41212: PPUSH
41213: LD_INT 1
41215: PPUSH
41216: CALL_OW 275
41220: PUSH
41221: LD_VAR 0 1
41225: PPUSH
41226: LD_INT 2
41228: PPUSH
41229: CALL_OW 275
41233: PUSH
41234: LD_VAR 0 1
41238: PPUSH
41239: LD_INT 3
41241: PPUSH
41242: CALL_OW 275
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: LIST
41251: ST_TO_ADDR
// end ;
41252: LD_VAR 0 2
41256: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41257: LD_INT 0
41259: PPUSH
41260: PPUSH
// result := array ;
41261: LD_ADDR_VAR 0 3
41265: PUSH
41266: LD_VAR 0 1
41270: ST_TO_ADDR
// if size >= result then
41271: LD_VAR 0 2
41275: PUSH
41276: LD_VAR 0 3
41280: GREATEREQUAL
41281: IFFALSE 41285
// exit ;
41283: GO 41335
// if size then
41285: LD_VAR 0 2
41289: IFFALSE 41335
// for i := array downto size do
41291: LD_ADDR_VAR 0 4
41295: PUSH
41296: DOUBLE
41297: LD_VAR 0 1
41301: INC
41302: ST_TO_ADDR
41303: LD_VAR 0 2
41307: PUSH
41308: FOR_DOWNTO
41309: IFFALSE 41333
// result := Delete ( result , result ) ;
41311: LD_ADDR_VAR 0 3
41315: PUSH
41316: LD_VAR 0 3
41320: PPUSH
41321: LD_VAR 0 3
41325: PPUSH
41326: CALL_OW 3
41330: ST_TO_ADDR
41331: GO 41308
41333: POP
41334: POP
// end ;
41335: LD_VAR 0 3
41339: RET
// export function ComExit ( unit ) ; var tmp ; begin
41340: LD_INT 0
41342: PPUSH
41343: PPUSH
// if not IsInUnit ( unit ) then
41344: LD_VAR 0 1
41348: PPUSH
41349: CALL_OW 310
41353: NOT
41354: IFFALSE 41358
// exit ;
41356: GO 41418
// tmp := IsInUnit ( unit ) ;
41358: LD_ADDR_VAR 0 3
41362: PUSH
41363: LD_VAR 0 1
41367: PPUSH
41368: CALL_OW 310
41372: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41373: LD_VAR 0 3
41377: PPUSH
41378: CALL_OW 247
41382: PUSH
41383: LD_INT 2
41385: EQUAL
41386: IFFALSE 41399
// ComExitVehicle ( unit ) else
41388: LD_VAR 0 1
41392: PPUSH
41393: CALL_OW 121
41397: GO 41408
// ComExitBuilding ( unit ) ;
41399: LD_VAR 0 1
41403: PPUSH
41404: CALL_OW 122
// result := tmp ;
41408: LD_ADDR_VAR 0 2
41412: PUSH
41413: LD_VAR 0 3
41417: ST_TO_ADDR
// end ;
41418: LD_VAR 0 2
41422: RET
// export function ComExitAll ( units ) ; var i ; begin
41423: LD_INT 0
41425: PPUSH
41426: PPUSH
// if not units then
41427: LD_VAR 0 1
41431: NOT
41432: IFFALSE 41436
// exit ;
41434: GO 41462
// for i in units do
41436: LD_ADDR_VAR 0 3
41440: PUSH
41441: LD_VAR 0 1
41445: PUSH
41446: FOR_IN
41447: IFFALSE 41460
// ComExit ( i ) ;
41449: LD_VAR 0 3
41453: PPUSH
41454: CALL 41340 0 1
41458: GO 41446
41460: POP
41461: POP
// end ;
41462: LD_VAR 0 2
41466: RET
// export function ResetHc ; begin
41467: LD_INT 0
41469: PPUSH
// InitHc ;
41470: CALL_OW 19
// hc_importance := 0 ;
41474: LD_ADDR_OWVAR 32
41478: PUSH
41479: LD_INT 0
41481: ST_TO_ADDR
// end ;
41482: LD_VAR 0 1
41486: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41487: LD_INT 0
41489: PPUSH
41490: PPUSH
41491: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41492: LD_ADDR_VAR 0 6
41496: PUSH
41497: LD_VAR 0 1
41501: PUSH
41502: LD_VAR 0 3
41506: PLUS
41507: PUSH
41508: LD_INT 2
41510: DIV
41511: ST_TO_ADDR
// if _x < 0 then
41512: LD_VAR 0 6
41516: PUSH
41517: LD_INT 0
41519: LESS
41520: IFFALSE 41537
// _x := _x * - 1 ;
41522: LD_ADDR_VAR 0 6
41526: PUSH
41527: LD_VAR 0 6
41531: PUSH
41532: LD_INT 1
41534: NEG
41535: MUL
41536: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41537: LD_ADDR_VAR 0 7
41541: PUSH
41542: LD_VAR 0 2
41546: PUSH
41547: LD_VAR 0 4
41551: PLUS
41552: PUSH
41553: LD_INT 2
41555: DIV
41556: ST_TO_ADDR
// if _y < 0 then
41557: LD_VAR 0 7
41561: PUSH
41562: LD_INT 0
41564: LESS
41565: IFFALSE 41582
// _y := _y * - 1 ;
41567: LD_ADDR_VAR 0 7
41571: PUSH
41572: LD_VAR 0 7
41576: PUSH
41577: LD_INT 1
41579: NEG
41580: MUL
41581: ST_TO_ADDR
// result := [ _x , _y ] ;
41582: LD_ADDR_VAR 0 5
41586: PUSH
41587: LD_VAR 0 6
41591: PUSH
41592: LD_VAR 0 7
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: ST_TO_ADDR
// end ;
41601: LD_VAR 0 5
41605: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41606: LD_INT 0
41608: PPUSH
41609: PPUSH
41610: PPUSH
41611: PPUSH
// task := GetTaskList ( unit ) ;
41612: LD_ADDR_VAR 0 7
41616: PUSH
41617: LD_VAR 0 1
41621: PPUSH
41622: CALL_OW 437
41626: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41627: LD_VAR 0 7
41631: NOT
41632: PUSH
41633: LD_VAR 0 1
41637: PPUSH
41638: LD_VAR 0 2
41642: PPUSH
41643: CALL_OW 308
41647: NOT
41648: AND
41649: IFFALSE 41653
// exit ;
41651: GO 41771
// if IsInArea ( unit , area ) then
41653: LD_VAR 0 1
41657: PPUSH
41658: LD_VAR 0 2
41662: PPUSH
41663: CALL_OW 308
41667: IFFALSE 41685
// begin ComMoveToArea ( unit , goAway ) ;
41669: LD_VAR 0 1
41673: PPUSH
41674: LD_VAR 0 3
41678: PPUSH
41679: CALL_OW 113
// exit ;
41683: GO 41771
// end ; if task [ 1 ] [ 1 ] <> M then
41685: LD_VAR 0 7
41689: PUSH
41690: LD_INT 1
41692: ARRAY
41693: PUSH
41694: LD_INT 1
41696: ARRAY
41697: PUSH
41698: LD_STRING M
41700: NONEQUAL
41701: IFFALSE 41705
// exit ;
41703: GO 41771
// x := task [ 1 ] [ 2 ] ;
41705: LD_ADDR_VAR 0 5
41709: PUSH
41710: LD_VAR 0 7
41714: PUSH
41715: LD_INT 1
41717: ARRAY
41718: PUSH
41719: LD_INT 2
41721: ARRAY
41722: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41723: LD_ADDR_VAR 0 6
41727: PUSH
41728: LD_VAR 0 7
41732: PUSH
41733: LD_INT 1
41735: ARRAY
41736: PUSH
41737: LD_INT 3
41739: ARRAY
41740: ST_TO_ADDR
// if InArea ( x , y , area ) then
41741: LD_VAR 0 5
41745: PPUSH
41746: LD_VAR 0 6
41750: PPUSH
41751: LD_VAR 0 2
41755: PPUSH
41756: CALL_OW 309
41760: IFFALSE 41771
// ComStop ( unit ) ;
41762: LD_VAR 0 1
41766: PPUSH
41767: CALL_OW 141
// end ;
41771: LD_VAR 0 4
41775: RET
// export function Abs ( value ) ; begin
41776: LD_INT 0
41778: PPUSH
// result := value ;
41779: LD_ADDR_VAR 0 2
41783: PUSH
41784: LD_VAR 0 1
41788: ST_TO_ADDR
// if value < 0 then
41789: LD_VAR 0 1
41793: PUSH
41794: LD_INT 0
41796: LESS
41797: IFFALSE 41814
// result := value * - 1 ;
41799: LD_ADDR_VAR 0 2
41803: PUSH
41804: LD_VAR 0 1
41808: PUSH
41809: LD_INT 1
41811: NEG
41812: MUL
41813: ST_TO_ADDR
// end ;
41814: LD_VAR 0 2
41818: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41819: LD_INT 0
41821: PPUSH
41822: PPUSH
41823: PPUSH
41824: PPUSH
41825: PPUSH
41826: PPUSH
41827: PPUSH
41828: PPUSH
// if not unit or not building then
41829: LD_VAR 0 1
41833: NOT
41834: PUSH
41835: LD_VAR 0 2
41839: NOT
41840: OR
41841: IFFALSE 41845
// exit ;
41843: GO 42071
// x := GetX ( building ) ;
41845: LD_ADDR_VAR 0 4
41849: PUSH
41850: LD_VAR 0 2
41854: PPUSH
41855: CALL_OW 250
41859: ST_TO_ADDR
// y := GetY ( building ) ;
41860: LD_ADDR_VAR 0 6
41864: PUSH
41865: LD_VAR 0 2
41869: PPUSH
41870: CALL_OW 251
41874: ST_TO_ADDR
// d := GetDir ( building ) ;
41875: LD_ADDR_VAR 0 8
41879: PUSH
41880: LD_VAR 0 2
41884: PPUSH
41885: CALL_OW 254
41889: ST_TO_ADDR
// r := 4 ;
41890: LD_ADDR_VAR 0 9
41894: PUSH
41895: LD_INT 4
41897: ST_TO_ADDR
// for i := 1 to 5 do
41898: LD_ADDR_VAR 0 10
41902: PUSH
41903: DOUBLE
41904: LD_INT 1
41906: DEC
41907: ST_TO_ADDR
41908: LD_INT 5
41910: PUSH
41911: FOR_TO
41912: IFFALSE 42069
// begin _x := ShiftX ( x , d , r + i ) ;
41914: LD_ADDR_VAR 0 5
41918: PUSH
41919: LD_VAR 0 4
41923: PPUSH
41924: LD_VAR 0 8
41928: PPUSH
41929: LD_VAR 0 9
41933: PUSH
41934: LD_VAR 0 10
41938: PLUS
41939: PPUSH
41940: CALL_OW 272
41944: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41945: LD_ADDR_VAR 0 7
41949: PUSH
41950: LD_VAR 0 6
41954: PPUSH
41955: LD_VAR 0 8
41959: PPUSH
41960: LD_VAR 0 9
41964: PUSH
41965: LD_VAR 0 10
41969: PLUS
41970: PPUSH
41971: CALL_OW 273
41975: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41976: LD_VAR 0 5
41980: PPUSH
41981: LD_VAR 0 7
41985: PPUSH
41986: CALL_OW 488
41990: PUSH
41991: LD_VAR 0 5
41995: PPUSH
41996: LD_VAR 0 7
42000: PPUSH
42001: CALL_OW 428
42005: PPUSH
42006: CALL_OW 247
42010: PUSH
42011: LD_INT 3
42013: PUSH
42014: LD_INT 2
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: IN
42021: NOT
42022: AND
42023: IFFALSE 42067
// begin ComMoveXY ( unit , _x , _y ) ;
42025: LD_VAR 0 1
42029: PPUSH
42030: LD_VAR 0 5
42034: PPUSH
42035: LD_VAR 0 7
42039: PPUSH
42040: CALL_OW 111
// result := [ _x , _y ] ;
42044: LD_ADDR_VAR 0 3
42048: PUSH
42049: LD_VAR 0 5
42053: PUSH
42054: LD_VAR 0 7
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: ST_TO_ADDR
// exit ;
42063: POP
42064: POP
42065: GO 42071
// end ; end ;
42067: GO 41911
42069: POP
42070: POP
// end ;
42071: LD_VAR 0 3
42075: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42076: LD_INT 0
42078: PPUSH
42079: PPUSH
42080: PPUSH
// result := 0 ;
42081: LD_ADDR_VAR 0 3
42085: PUSH
42086: LD_INT 0
42088: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42089: LD_VAR 0 1
42093: PUSH
42094: LD_INT 0
42096: LESS
42097: PUSH
42098: LD_VAR 0 1
42102: PUSH
42103: LD_INT 8
42105: GREATER
42106: OR
42107: PUSH
42108: LD_VAR 0 2
42112: PUSH
42113: LD_INT 0
42115: LESS
42116: OR
42117: PUSH
42118: LD_VAR 0 2
42122: PUSH
42123: LD_INT 8
42125: GREATER
42126: OR
42127: IFFALSE 42131
// exit ;
42129: GO 42206
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
42131: LD_ADDR_VAR 0 4
42135: PUSH
42136: LD_INT 22
42138: PUSH
42139: LD_VAR 0 2
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PPUSH
42148: CALL_OW 69
42152: PUSH
42153: FOR_IN
42154: IFFALSE 42204
// begin un := UnitShoot ( i ) ;
42156: LD_ADDR_VAR 0 5
42160: PUSH
42161: LD_VAR 0 4
42165: PPUSH
42166: CALL_OW 504
42170: ST_TO_ADDR
// if GetSide ( un ) = side1 then
42171: LD_VAR 0 5
42175: PPUSH
42176: CALL_OW 255
42180: PUSH
42181: LD_VAR 0 1
42185: EQUAL
42186: IFFALSE 42202
// begin result := un ;
42188: LD_ADDR_VAR 0 3
42192: PUSH
42193: LD_VAR 0 5
42197: ST_TO_ADDR
// exit ;
42198: POP
42199: POP
42200: GO 42206
// end ; end ;
42202: GO 42153
42204: POP
42205: POP
// end ;
42206: LD_VAR 0 3
42210: RET
// export function GetCargoBay ( units ) ; begin
42211: LD_INT 0
42213: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42214: LD_ADDR_VAR 0 2
42218: PUSH
42219: LD_VAR 0 1
42223: PPUSH
42224: LD_INT 2
42226: PUSH
42227: LD_INT 34
42229: PUSH
42230: LD_INT 12
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 34
42239: PUSH
42240: LD_INT 51
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 34
42249: PUSH
42250: LD_INT 32
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 34
42259: PUSH
42260: LD_INT 89
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: PPUSH
42274: CALL_OW 72
42278: ST_TO_ADDR
// end ;
42279: LD_VAR 0 2
42283: RET
// export function Negate ( value ) ; begin
42284: LD_INT 0
42286: PPUSH
// result := not value ;
42287: LD_ADDR_VAR 0 2
42291: PUSH
42292: LD_VAR 0 1
42296: NOT
42297: ST_TO_ADDR
// end ;
42298: LD_VAR 0 2
42302: RET
// export function Inc ( value ) ; begin
42303: LD_INT 0
42305: PPUSH
// result := value + 1 ;
42306: LD_ADDR_VAR 0 2
42310: PUSH
42311: LD_VAR 0 1
42315: PUSH
42316: LD_INT 1
42318: PLUS
42319: ST_TO_ADDR
// end ;
42320: LD_VAR 0 2
42324: RET
// export function Dec ( value ) ; begin
42325: LD_INT 0
42327: PPUSH
// result := value - 1 ;
42328: LD_ADDR_VAR 0 2
42332: PUSH
42333: LD_VAR 0 1
42337: PUSH
42338: LD_INT 1
42340: MINUS
42341: ST_TO_ADDR
// end ;
42342: LD_VAR 0 2
42346: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42347: LD_INT 0
42349: PPUSH
42350: PPUSH
42351: PPUSH
42352: PPUSH
42353: PPUSH
42354: PPUSH
42355: PPUSH
42356: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42357: LD_VAR 0 1
42361: PPUSH
42362: LD_VAR 0 2
42366: PPUSH
42367: CALL_OW 488
42371: NOT
42372: PUSH
42373: LD_VAR 0 3
42377: PPUSH
42378: LD_VAR 0 4
42382: PPUSH
42383: CALL_OW 488
42387: NOT
42388: OR
42389: IFFALSE 42402
// begin result := - 1 ;
42391: LD_ADDR_VAR 0 5
42395: PUSH
42396: LD_INT 1
42398: NEG
42399: ST_TO_ADDR
// exit ;
42400: GO 42637
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42402: LD_ADDR_VAR 0 12
42406: PUSH
42407: LD_VAR 0 1
42411: PPUSH
42412: LD_VAR 0 2
42416: PPUSH
42417: LD_VAR 0 3
42421: PPUSH
42422: LD_VAR 0 4
42426: PPUSH
42427: CALL 41487 0 4
42431: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42432: LD_ADDR_VAR 0 11
42436: PUSH
42437: LD_VAR 0 1
42441: PPUSH
42442: LD_VAR 0 2
42446: PPUSH
42447: LD_VAR 0 12
42451: PUSH
42452: LD_INT 1
42454: ARRAY
42455: PPUSH
42456: LD_VAR 0 12
42460: PUSH
42461: LD_INT 2
42463: ARRAY
42464: PPUSH
42465: CALL_OW 298
42469: ST_TO_ADDR
// distance := 9999 ;
42470: LD_ADDR_VAR 0 10
42474: PUSH
42475: LD_INT 9999
42477: ST_TO_ADDR
// for i := 0 to 5 do
42478: LD_ADDR_VAR 0 6
42482: PUSH
42483: DOUBLE
42484: LD_INT 0
42486: DEC
42487: ST_TO_ADDR
42488: LD_INT 5
42490: PUSH
42491: FOR_TO
42492: IFFALSE 42635
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42494: LD_ADDR_VAR 0 7
42498: PUSH
42499: LD_VAR 0 1
42503: PPUSH
42504: LD_VAR 0 6
42508: PPUSH
42509: LD_VAR 0 11
42513: PPUSH
42514: CALL_OW 272
42518: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42519: LD_ADDR_VAR 0 8
42523: PUSH
42524: LD_VAR 0 2
42528: PPUSH
42529: LD_VAR 0 6
42533: PPUSH
42534: LD_VAR 0 11
42538: PPUSH
42539: CALL_OW 273
42543: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42544: LD_VAR 0 7
42548: PPUSH
42549: LD_VAR 0 8
42553: PPUSH
42554: CALL_OW 488
42558: NOT
42559: IFFALSE 42563
// continue ;
42561: GO 42491
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42563: LD_ADDR_VAR 0 9
42567: PUSH
42568: LD_VAR 0 12
42572: PUSH
42573: LD_INT 1
42575: ARRAY
42576: PPUSH
42577: LD_VAR 0 12
42581: PUSH
42582: LD_INT 2
42584: ARRAY
42585: PPUSH
42586: LD_VAR 0 7
42590: PPUSH
42591: LD_VAR 0 8
42595: PPUSH
42596: CALL_OW 298
42600: ST_TO_ADDR
// if tmp < distance then
42601: LD_VAR 0 9
42605: PUSH
42606: LD_VAR 0 10
42610: LESS
42611: IFFALSE 42633
// begin result := i ;
42613: LD_ADDR_VAR 0 5
42617: PUSH
42618: LD_VAR 0 6
42622: ST_TO_ADDR
// distance := tmp ;
42623: LD_ADDR_VAR 0 10
42627: PUSH
42628: LD_VAR 0 9
42632: ST_TO_ADDR
// end ; end ;
42633: GO 42491
42635: POP
42636: POP
// end ;
42637: LD_VAR 0 5
42641: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42642: LD_INT 0
42644: PPUSH
42645: PPUSH
// if not driver or not IsInUnit ( driver ) then
42646: LD_VAR 0 1
42650: NOT
42651: PUSH
42652: LD_VAR 0 1
42656: PPUSH
42657: CALL_OW 310
42661: NOT
42662: OR
42663: IFFALSE 42667
// exit ;
42665: GO 42757
// vehicle := IsInUnit ( driver ) ;
42667: LD_ADDR_VAR 0 3
42671: PUSH
42672: LD_VAR 0 1
42676: PPUSH
42677: CALL_OW 310
42681: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42682: LD_VAR 0 1
42686: PPUSH
42687: LD_STRING \
42689: PUSH
42690: LD_INT 0
42692: PUSH
42693: LD_INT 0
42695: PUSH
42696: LD_INT 0
42698: PUSH
42699: LD_INT 0
42701: PUSH
42702: LD_INT 0
42704: PUSH
42705: LD_INT 0
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: PUSH
42717: LD_STRING E
42719: PUSH
42720: LD_INT 0
42722: PUSH
42723: LD_INT 0
42725: PUSH
42726: LD_VAR 0 3
42730: PUSH
42731: LD_INT 0
42733: PUSH
42734: LD_INT 0
42736: PUSH
42737: LD_INT 0
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PPUSH
42753: CALL_OW 446
// end ;
42757: LD_VAR 0 2
42761: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42762: LD_INT 0
42764: PPUSH
42765: PPUSH
// if not driver or not IsInUnit ( driver ) then
42766: LD_VAR 0 1
42770: NOT
42771: PUSH
42772: LD_VAR 0 1
42776: PPUSH
42777: CALL_OW 310
42781: NOT
42782: OR
42783: IFFALSE 42787
// exit ;
42785: GO 42877
// vehicle := IsInUnit ( driver ) ;
42787: LD_ADDR_VAR 0 3
42791: PUSH
42792: LD_VAR 0 1
42796: PPUSH
42797: CALL_OW 310
42801: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42802: LD_VAR 0 1
42806: PPUSH
42807: LD_STRING \
42809: PUSH
42810: LD_INT 0
42812: PUSH
42813: LD_INT 0
42815: PUSH
42816: LD_INT 0
42818: PUSH
42819: LD_INT 0
42821: PUSH
42822: LD_INT 0
42824: PUSH
42825: LD_INT 0
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: PUSH
42837: LD_STRING E
42839: PUSH
42840: LD_INT 0
42842: PUSH
42843: LD_INT 0
42845: PUSH
42846: LD_VAR 0 3
42850: PUSH
42851: LD_INT 0
42853: PUSH
42854: LD_INT 0
42856: PUSH
42857: LD_INT 0
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PPUSH
42873: CALL_OW 447
// end ;
42877: LD_VAR 0 2
42881: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42882: LD_INT 0
42884: PPUSH
42885: PPUSH
42886: PPUSH
// tmp := [ ] ;
42887: LD_ADDR_VAR 0 5
42891: PUSH
42892: EMPTY
42893: ST_TO_ADDR
// for i in units do
42894: LD_ADDR_VAR 0 4
42898: PUSH
42899: LD_VAR 0 1
42903: PUSH
42904: FOR_IN
42905: IFFALSE 42943
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42907: LD_ADDR_VAR 0 5
42911: PUSH
42912: LD_VAR 0 5
42916: PPUSH
42917: LD_VAR 0 5
42921: PUSH
42922: LD_INT 1
42924: PLUS
42925: PPUSH
42926: LD_VAR 0 4
42930: PPUSH
42931: CALL_OW 256
42935: PPUSH
42936: CALL_OW 2
42940: ST_TO_ADDR
42941: GO 42904
42943: POP
42944: POP
// if not tmp then
42945: LD_VAR 0 5
42949: NOT
42950: IFFALSE 42954
// exit ;
42952: GO 43002
// if asc then
42954: LD_VAR 0 2
42958: IFFALSE 42982
// result := SortListByListAsc ( units , tmp ) else
42960: LD_ADDR_VAR 0 3
42964: PUSH
42965: LD_VAR 0 1
42969: PPUSH
42970: LD_VAR 0 5
42974: PPUSH
42975: CALL_OW 76
42979: ST_TO_ADDR
42980: GO 43002
// result := SortListByListDesc ( units , tmp ) ;
42982: LD_ADDR_VAR 0 3
42986: PUSH
42987: LD_VAR 0 1
42991: PPUSH
42992: LD_VAR 0 5
42996: PPUSH
42997: CALL_OW 77
43001: ST_TO_ADDR
// end ;
43002: LD_VAR 0 3
43006: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43007: LD_INT 0
43009: PPUSH
43010: PPUSH
// task := GetTaskList ( mech ) ;
43011: LD_ADDR_VAR 0 4
43015: PUSH
43016: LD_VAR 0 1
43020: PPUSH
43021: CALL_OW 437
43025: ST_TO_ADDR
// if not task then
43026: LD_VAR 0 4
43030: NOT
43031: IFFALSE 43035
// exit ;
43033: GO 43077
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43035: LD_ADDR_VAR 0 3
43039: PUSH
43040: LD_VAR 0 4
43044: PUSH
43045: LD_INT 1
43047: ARRAY
43048: PUSH
43049: LD_INT 1
43051: ARRAY
43052: PUSH
43053: LD_STRING r
43055: EQUAL
43056: PUSH
43057: LD_VAR 0 4
43061: PUSH
43062: LD_INT 1
43064: ARRAY
43065: PUSH
43066: LD_INT 4
43068: ARRAY
43069: PUSH
43070: LD_VAR 0 2
43074: EQUAL
43075: AND
43076: ST_TO_ADDR
// end ;
43077: LD_VAR 0 3
43081: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
43082: LD_INT 0
43084: PPUSH
// SetDir ( unit , d ) ;
43085: LD_VAR 0 1
43089: PPUSH
43090: LD_VAR 0 4
43094: PPUSH
43095: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
43099: LD_VAR 0 1
43103: PPUSH
43104: LD_VAR 0 2
43108: PPUSH
43109: LD_VAR 0 3
43113: PPUSH
43114: LD_VAR 0 5
43118: PPUSH
43119: CALL_OW 48
// end ;
43123: LD_VAR 0 6
43127: RET
// export function ToNaturalNumber ( number ) ; begin
43128: LD_INT 0
43130: PPUSH
// result := number div 1 ;
43131: LD_ADDR_VAR 0 2
43135: PUSH
43136: LD_VAR 0 1
43140: PUSH
43141: LD_INT 1
43143: DIV
43144: ST_TO_ADDR
// if number < 0 then
43145: LD_VAR 0 1
43149: PUSH
43150: LD_INT 0
43152: LESS
43153: IFFALSE 43163
// result := 0 ;
43155: LD_ADDR_VAR 0 2
43159: PUSH
43160: LD_INT 0
43162: ST_TO_ADDR
// end ;
43163: LD_VAR 0 2
43167: RET
// export function SortByClass ( units , class ) ; var un ; begin
43168: LD_INT 0
43170: PPUSH
43171: PPUSH
// if not units or not class then
43172: LD_VAR 0 1
43176: NOT
43177: PUSH
43178: LD_VAR 0 2
43182: NOT
43183: OR
43184: IFFALSE 43188
// exit ;
43186: GO 43283
// result := [ ] ;
43188: LD_ADDR_VAR 0 3
43192: PUSH
43193: EMPTY
43194: ST_TO_ADDR
// for un in units do
43195: LD_ADDR_VAR 0 4
43199: PUSH
43200: LD_VAR 0 1
43204: PUSH
43205: FOR_IN
43206: IFFALSE 43281
// if GetClass ( un ) = class then
43208: LD_VAR 0 4
43212: PPUSH
43213: CALL_OW 257
43217: PUSH
43218: LD_VAR 0 2
43222: EQUAL
43223: IFFALSE 43250
// result := Insert ( result , 1 , un ) else
43225: LD_ADDR_VAR 0 3
43229: PUSH
43230: LD_VAR 0 3
43234: PPUSH
43235: LD_INT 1
43237: PPUSH
43238: LD_VAR 0 4
43242: PPUSH
43243: CALL_OW 2
43247: ST_TO_ADDR
43248: GO 43279
// result := Replace ( result , result + 1 , un ) ;
43250: LD_ADDR_VAR 0 3
43254: PUSH
43255: LD_VAR 0 3
43259: PPUSH
43260: LD_VAR 0 3
43264: PUSH
43265: LD_INT 1
43267: PLUS
43268: PPUSH
43269: LD_VAR 0 4
43273: PPUSH
43274: CALL_OW 1
43278: ST_TO_ADDR
43279: GO 43205
43281: POP
43282: POP
// end ;
43283: LD_VAR 0 3
43287: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43288: LD_INT 0
43290: PPUSH
43291: PPUSH
43292: PPUSH
43293: PPUSH
43294: PPUSH
43295: PPUSH
43296: PPUSH
// result := [ ] ;
43297: LD_ADDR_VAR 0 4
43301: PUSH
43302: EMPTY
43303: ST_TO_ADDR
// if x - r < 0 then
43304: LD_VAR 0 1
43308: PUSH
43309: LD_VAR 0 3
43313: MINUS
43314: PUSH
43315: LD_INT 0
43317: LESS
43318: IFFALSE 43330
// min_x := 0 else
43320: LD_ADDR_VAR 0 8
43324: PUSH
43325: LD_INT 0
43327: ST_TO_ADDR
43328: GO 43346
// min_x := x - r ;
43330: LD_ADDR_VAR 0 8
43334: PUSH
43335: LD_VAR 0 1
43339: PUSH
43340: LD_VAR 0 3
43344: MINUS
43345: ST_TO_ADDR
// if y - r < 0 then
43346: LD_VAR 0 2
43350: PUSH
43351: LD_VAR 0 3
43355: MINUS
43356: PUSH
43357: LD_INT 0
43359: LESS
43360: IFFALSE 43372
// min_y := 0 else
43362: LD_ADDR_VAR 0 7
43366: PUSH
43367: LD_INT 0
43369: ST_TO_ADDR
43370: GO 43388
// min_y := y - r ;
43372: LD_ADDR_VAR 0 7
43376: PUSH
43377: LD_VAR 0 2
43381: PUSH
43382: LD_VAR 0 3
43386: MINUS
43387: ST_TO_ADDR
// max_x := x + r ;
43388: LD_ADDR_VAR 0 9
43392: PUSH
43393: LD_VAR 0 1
43397: PUSH
43398: LD_VAR 0 3
43402: PLUS
43403: ST_TO_ADDR
// max_y := y + r ;
43404: LD_ADDR_VAR 0 10
43408: PUSH
43409: LD_VAR 0 2
43413: PUSH
43414: LD_VAR 0 3
43418: PLUS
43419: ST_TO_ADDR
// for _x = min_x to max_x do
43420: LD_ADDR_VAR 0 5
43424: PUSH
43425: DOUBLE
43426: LD_VAR 0 8
43430: DEC
43431: ST_TO_ADDR
43432: LD_VAR 0 9
43436: PUSH
43437: FOR_TO
43438: IFFALSE 43539
// for _y = min_y to max_y do
43440: LD_ADDR_VAR 0 6
43444: PUSH
43445: DOUBLE
43446: LD_VAR 0 7
43450: DEC
43451: ST_TO_ADDR
43452: LD_VAR 0 10
43456: PUSH
43457: FOR_TO
43458: IFFALSE 43535
// begin if not ValidHex ( _x , _y ) then
43460: LD_VAR 0 5
43464: PPUSH
43465: LD_VAR 0 6
43469: PPUSH
43470: CALL_OW 488
43474: NOT
43475: IFFALSE 43479
// continue ;
43477: GO 43457
// if GetResourceTypeXY ( _x , _y ) then
43479: LD_VAR 0 5
43483: PPUSH
43484: LD_VAR 0 6
43488: PPUSH
43489: CALL_OW 283
43493: IFFALSE 43533
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43495: LD_ADDR_VAR 0 4
43499: PUSH
43500: LD_VAR 0 4
43504: PPUSH
43505: LD_VAR 0 4
43509: PUSH
43510: LD_INT 1
43512: PLUS
43513: PPUSH
43514: LD_VAR 0 5
43518: PUSH
43519: LD_VAR 0 6
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PPUSH
43528: CALL_OW 1
43532: ST_TO_ADDR
// end ;
43533: GO 43457
43535: POP
43536: POP
43537: GO 43437
43539: POP
43540: POP
// end ;
43541: LD_VAR 0 4
43545: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43546: LD_INT 0
43548: PPUSH
43549: PPUSH
43550: PPUSH
43551: PPUSH
43552: PPUSH
43553: PPUSH
43554: PPUSH
43555: PPUSH
// if not units then
43556: LD_VAR 0 1
43560: NOT
43561: IFFALSE 43565
// exit ;
43563: GO 44089
// result := UnitFilter ( units , [ f_ok ] ) ;
43565: LD_ADDR_VAR 0 3
43569: PUSH
43570: LD_VAR 0 1
43574: PPUSH
43575: LD_INT 50
43577: PUSH
43578: EMPTY
43579: LIST
43580: PPUSH
43581: CALL_OW 72
43585: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43586: LD_ADDR_VAR 0 8
43590: PUSH
43591: LD_VAR 0 1
43595: PUSH
43596: LD_INT 1
43598: ARRAY
43599: PPUSH
43600: CALL_OW 255
43604: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43605: LD_ADDR_VAR 0 10
43609: PUSH
43610: LD_INT 29
43612: PUSH
43613: LD_INT 91
43615: PUSH
43616: LD_INT 49
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: LIST
43623: ST_TO_ADDR
// if not result then
43624: LD_VAR 0 3
43628: NOT
43629: IFFALSE 43633
// exit ;
43631: GO 44089
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43633: LD_ADDR_VAR 0 5
43637: PUSH
43638: LD_INT 81
43640: PUSH
43641: LD_VAR 0 8
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PPUSH
43650: CALL_OW 69
43654: ST_TO_ADDR
// for i in result do
43655: LD_ADDR_VAR 0 4
43659: PUSH
43660: LD_VAR 0 3
43664: PUSH
43665: FOR_IN
43666: IFFALSE 44087
// begin tag := GetTag ( i ) + 1 ;
43668: LD_ADDR_VAR 0 9
43672: PUSH
43673: LD_VAR 0 4
43677: PPUSH
43678: CALL_OW 110
43682: PUSH
43683: LD_INT 1
43685: PLUS
43686: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
43687: LD_ADDR_VAR 0 7
43691: PUSH
43692: LD_VAR 0 4
43696: PPUSH
43697: CALL_OW 250
43701: PPUSH
43702: LD_VAR 0 4
43706: PPUSH
43707: CALL_OW 251
43711: PPUSH
43712: LD_INT 6
43714: PPUSH
43715: CALL 43288 0 3
43719: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
43720: LD_VAR 0 4
43724: PPUSH
43725: CALL_OW 247
43729: PUSH
43730: LD_INT 2
43732: EQUAL
43733: PUSH
43734: LD_VAR 0 7
43738: AND
43739: PUSH
43740: LD_VAR 0 4
43744: PPUSH
43745: CALL_OW 264
43749: PUSH
43750: LD_VAR 0 10
43754: IN
43755: NOT
43756: AND
43757: IFFALSE 43796
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43759: LD_VAR 0 4
43763: PPUSH
43764: LD_VAR 0 7
43768: PUSH
43769: LD_INT 1
43771: ARRAY
43772: PUSH
43773: LD_INT 1
43775: ARRAY
43776: PPUSH
43777: LD_VAR 0 7
43781: PUSH
43782: LD_INT 1
43784: ARRAY
43785: PUSH
43786: LD_INT 2
43788: ARRAY
43789: PPUSH
43790: CALL_OW 116
43794: GO 44085
// if path > tag then
43796: LD_VAR 0 2
43800: PUSH
43801: LD_VAR 0 9
43805: GREATER
43806: IFFALSE 44014
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43808: LD_ADDR_VAR 0 6
43812: PUSH
43813: LD_VAR 0 5
43817: PPUSH
43818: LD_INT 91
43820: PUSH
43821: LD_VAR 0 4
43825: PUSH
43826: LD_INT 8
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: LIST
43833: PPUSH
43834: CALL_OW 72
43838: ST_TO_ADDR
// if nearEnemy then
43839: LD_VAR 0 6
43843: IFFALSE 43912
// begin if GetWeapon ( i ) = ru_time_lapser then
43845: LD_VAR 0 4
43849: PPUSH
43850: CALL_OW 264
43854: PUSH
43855: LD_INT 49
43857: EQUAL
43858: IFFALSE 43886
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43860: LD_VAR 0 4
43864: PPUSH
43865: LD_VAR 0 6
43869: PPUSH
43870: LD_VAR 0 4
43874: PPUSH
43875: CALL_OW 74
43879: PPUSH
43880: CALL_OW 112
43884: GO 43910
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43886: LD_VAR 0 4
43890: PPUSH
43891: LD_VAR 0 6
43895: PPUSH
43896: LD_VAR 0 4
43900: PPUSH
43901: CALL_OW 74
43905: PPUSH
43906: CALL_OW 115
// end else
43910: GO 44012
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43912: LD_VAR 0 4
43916: PPUSH
43917: LD_VAR 0 2
43921: PUSH
43922: LD_VAR 0 9
43926: ARRAY
43927: PUSH
43928: LD_INT 1
43930: ARRAY
43931: PPUSH
43932: LD_VAR 0 2
43936: PUSH
43937: LD_VAR 0 9
43941: ARRAY
43942: PUSH
43943: LD_INT 2
43945: ARRAY
43946: PPUSH
43947: CALL_OW 297
43951: PUSH
43952: LD_INT 6
43954: GREATER
43955: IFFALSE 43998
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43957: LD_VAR 0 4
43961: PPUSH
43962: LD_VAR 0 2
43966: PUSH
43967: LD_VAR 0 9
43971: ARRAY
43972: PUSH
43973: LD_INT 1
43975: ARRAY
43976: PPUSH
43977: LD_VAR 0 2
43981: PUSH
43982: LD_VAR 0 9
43986: ARRAY
43987: PUSH
43988: LD_INT 2
43990: ARRAY
43991: PPUSH
43992: CALL_OW 114
43996: GO 44012
// SetTag ( i , tag ) ;
43998: LD_VAR 0 4
44002: PPUSH
44003: LD_VAR 0 9
44007: PPUSH
44008: CALL_OW 109
// end else
44012: GO 44085
// if enemy then
44014: LD_VAR 0 5
44018: IFFALSE 44085
// begin if GetWeapon ( i ) = ru_time_lapser then
44020: LD_VAR 0 4
44024: PPUSH
44025: CALL_OW 264
44029: PUSH
44030: LD_INT 49
44032: EQUAL
44033: IFFALSE 44061
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
44035: LD_VAR 0 4
44039: PPUSH
44040: LD_VAR 0 5
44044: PPUSH
44045: LD_VAR 0 4
44049: PPUSH
44050: CALL_OW 74
44054: PPUSH
44055: CALL_OW 112
44059: GO 44085
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
44061: LD_VAR 0 4
44065: PPUSH
44066: LD_VAR 0 5
44070: PPUSH
44071: LD_VAR 0 4
44075: PPUSH
44076: CALL_OW 74
44080: PPUSH
44081: CALL_OW 115
// end ; end ;
44085: GO 43665
44087: POP
44088: POP
// end ;
44089: LD_VAR 0 3
44093: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
44094: LD_INT 0
44096: PPUSH
44097: PPUSH
44098: PPUSH
// if not unit or IsInUnit ( unit ) then
44099: LD_VAR 0 1
44103: NOT
44104: PUSH
44105: LD_VAR 0 1
44109: PPUSH
44110: CALL_OW 310
44114: OR
44115: IFFALSE 44119
// exit ;
44117: GO 44210
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
44119: LD_ADDR_VAR 0 4
44123: PUSH
44124: LD_VAR 0 1
44128: PPUSH
44129: CALL_OW 250
44133: PPUSH
44134: LD_VAR 0 2
44138: PPUSH
44139: LD_INT 1
44141: PPUSH
44142: CALL_OW 272
44146: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
44147: LD_ADDR_VAR 0 5
44151: PUSH
44152: LD_VAR 0 1
44156: PPUSH
44157: CALL_OW 251
44161: PPUSH
44162: LD_VAR 0 2
44166: PPUSH
44167: LD_INT 1
44169: PPUSH
44170: CALL_OW 273
44174: ST_TO_ADDR
// if ValidHex ( x , y ) then
44175: LD_VAR 0 4
44179: PPUSH
44180: LD_VAR 0 5
44184: PPUSH
44185: CALL_OW 488
44189: IFFALSE 44210
// ComTurnXY ( unit , x , y ) ;
44191: LD_VAR 0 1
44195: PPUSH
44196: LD_VAR 0 4
44200: PPUSH
44201: LD_VAR 0 5
44205: PPUSH
44206: CALL_OW 118
// end ;
44210: LD_VAR 0 3
44214: RET
// export function SeeUnits ( side , units ) ; var i ; begin
44215: LD_INT 0
44217: PPUSH
44218: PPUSH
// result := false ;
44219: LD_ADDR_VAR 0 3
44223: PUSH
44224: LD_INT 0
44226: ST_TO_ADDR
// if not units then
44227: LD_VAR 0 2
44231: NOT
44232: IFFALSE 44236
// exit ;
44234: GO 44281
// for i in units do
44236: LD_ADDR_VAR 0 4
44240: PUSH
44241: LD_VAR 0 2
44245: PUSH
44246: FOR_IN
44247: IFFALSE 44279
// if See ( side , i ) then
44249: LD_VAR 0 1
44253: PPUSH
44254: LD_VAR 0 4
44258: PPUSH
44259: CALL_OW 292
44263: IFFALSE 44277
// begin result := true ;
44265: LD_ADDR_VAR 0 3
44269: PUSH
44270: LD_INT 1
44272: ST_TO_ADDR
// exit ;
44273: POP
44274: POP
44275: GO 44281
// end ;
44277: GO 44246
44279: POP
44280: POP
// end ;
44281: LD_VAR 0 3
44285: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44286: LD_INT 0
44288: PPUSH
44289: PPUSH
44290: PPUSH
44291: PPUSH
// if not unit or not points then
44292: LD_VAR 0 1
44296: NOT
44297: PUSH
44298: LD_VAR 0 2
44302: NOT
44303: OR
44304: IFFALSE 44308
// exit ;
44306: GO 44398
// dist := 99999 ;
44308: LD_ADDR_VAR 0 5
44312: PUSH
44313: LD_INT 99999
44315: ST_TO_ADDR
// for i in points do
44316: LD_ADDR_VAR 0 4
44320: PUSH
44321: LD_VAR 0 2
44325: PUSH
44326: FOR_IN
44327: IFFALSE 44396
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44329: LD_ADDR_VAR 0 6
44333: PUSH
44334: LD_VAR 0 1
44338: PPUSH
44339: LD_VAR 0 4
44343: PUSH
44344: LD_INT 1
44346: ARRAY
44347: PPUSH
44348: LD_VAR 0 4
44352: PUSH
44353: LD_INT 2
44355: ARRAY
44356: PPUSH
44357: CALL_OW 297
44361: ST_TO_ADDR
// if tmpDist < dist then
44362: LD_VAR 0 6
44366: PUSH
44367: LD_VAR 0 5
44371: LESS
44372: IFFALSE 44394
// begin result := i ;
44374: LD_ADDR_VAR 0 3
44378: PUSH
44379: LD_VAR 0 4
44383: ST_TO_ADDR
// dist := tmpDist ;
44384: LD_ADDR_VAR 0 5
44388: PUSH
44389: LD_VAR 0 6
44393: ST_TO_ADDR
// end ; end ;
44394: GO 44326
44396: POP
44397: POP
// end ;
44398: LD_VAR 0 3
44402: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44403: LD_INT 0
44405: PPUSH
// uc_side := side ;
44406: LD_ADDR_OWVAR 20
44410: PUSH
44411: LD_VAR 0 1
44415: ST_TO_ADDR
// uc_nation := 3 ;
44416: LD_ADDR_OWVAR 21
44420: PUSH
44421: LD_INT 3
44423: ST_TO_ADDR
// vc_chassis := 25 ;
44424: LD_ADDR_OWVAR 37
44428: PUSH
44429: LD_INT 25
44431: ST_TO_ADDR
// vc_engine := engine_siberite ;
44432: LD_ADDR_OWVAR 39
44436: PUSH
44437: LD_INT 3
44439: ST_TO_ADDR
// vc_control := control_computer ;
44440: LD_ADDR_OWVAR 38
44444: PUSH
44445: LD_INT 3
44447: ST_TO_ADDR
// vc_weapon := 59 ;
44448: LD_ADDR_OWVAR 40
44452: PUSH
44453: LD_INT 59
44455: ST_TO_ADDR
// result := CreateVehicle ;
44456: LD_ADDR_VAR 0 5
44460: PUSH
44461: CALL_OW 45
44465: ST_TO_ADDR
// SetDir ( result , d ) ;
44466: LD_VAR 0 5
44470: PPUSH
44471: LD_VAR 0 4
44475: PPUSH
44476: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44480: LD_VAR 0 5
44484: PPUSH
44485: LD_VAR 0 2
44489: PPUSH
44490: LD_VAR 0 3
44494: PPUSH
44495: LD_INT 0
44497: PPUSH
44498: CALL_OW 48
// end ;
44502: LD_VAR 0 5
44506: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44507: LD_INT 0
44509: PPUSH
44510: PPUSH
44511: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44512: LD_ADDR_VAR 0 2
44516: PUSH
44517: LD_INT 0
44519: PUSH
44520: LD_INT 0
44522: PUSH
44523: LD_INT 0
44525: PUSH
44526: LD_INT 0
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44535: LD_VAR 0 1
44539: NOT
44540: PUSH
44541: LD_VAR 0 1
44545: PPUSH
44546: CALL_OW 264
44550: PUSH
44551: LD_INT 12
44553: PUSH
44554: LD_INT 51
44556: PUSH
44557: LD_INT 32
44559: PUSH
44560: LD_INT 89
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: IN
44569: NOT
44570: OR
44571: IFFALSE 44575
// exit ;
44573: GO 44673
// for i := 1 to 3 do
44575: LD_ADDR_VAR 0 3
44579: PUSH
44580: DOUBLE
44581: LD_INT 1
44583: DEC
44584: ST_TO_ADDR
44585: LD_INT 3
44587: PUSH
44588: FOR_TO
44589: IFFALSE 44671
// begin tmp := GetCargo ( cargo , i ) ;
44591: LD_ADDR_VAR 0 4
44595: PUSH
44596: LD_VAR 0 1
44600: PPUSH
44601: LD_VAR 0 3
44605: PPUSH
44606: CALL_OW 289
44610: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44611: LD_ADDR_VAR 0 2
44615: PUSH
44616: LD_VAR 0 2
44620: PPUSH
44621: LD_VAR 0 3
44625: PPUSH
44626: LD_VAR 0 4
44630: PPUSH
44631: CALL_OW 1
44635: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44636: LD_ADDR_VAR 0 2
44640: PUSH
44641: LD_VAR 0 2
44645: PPUSH
44646: LD_INT 4
44648: PPUSH
44649: LD_VAR 0 2
44653: PUSH
44654: LD_INT 4
44656: ARRAY
44657: PUSH
44658: LD_VAR 0 4
44662: PLUS
44663: PPUSH
44664: CALL_OW 1
44668: ST_TO_ADDR
// end ;
44669: GO 44588
44671: POP
44672: POP
// end ;
44673: LD_VAR 0 2
44677: RET
// export function Length ( array ) ; begin
44678: LD_INT 0
44680: PPUSH
// result := array + 0 ;
44681: LD_ADDR_VAR 0 2
44685: PUSH
44686: LD_VAR 0 1
44690: PUSH
44691: LD_INT 0
44693: PLUS
44694: ST_TO_ADDR
// end ;
44695: LD_VAR 0 2
44699: RET
// export function PrepareArray ( array ) ; begin
44700: LD_INT 0
44702: PPUSH
// result := array diff 0 ;
44703: LD_ADDR_VAR 0 2
44707: PUSH
44708: LD_VAR 0 1
44712: PUSH
44713: LD_INT 0
44715: DIFF
44716: ST_TO_ADDR
// if not result [ 1 ] then
44717: LD_VAR 0 2
44721: PUSH
44722: LD_INT 1
44724: ARRAY
44725: NOT
44726: IFFALSE 44746
// result := Delete ( result , 1 ) ;
44728: LD_ADDR_VAR 0 2
44732: PUSH
44733: LD_VAR 0 2
44737: PPUSH
44738: LD_INT 1
44740: PPUSH
44741: CALL_OW 3
44745: ST_TO_ADDR
// end ;
44746: LD_VAR 0 2
44750: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44751: LD_INT 0
44753: PPUSH
44754: PPUSH
44755: PPUSH
44756: PPUSH
// sibRocketRange := 25 ;
44757: LD_ADDR_VAR 0 6
44761: PUSH
44762: LD_INT 25
44764: ST_TO_ADDR
// result := false ;
44765: LD_ADDR_VAR 0 4
44769: PUSH
44770: LD_INT 0
44772: ST_TO_ADDR
// for i := 0 to 5 do
44773: LD_ADDR_VAR 0 5
44777: PUSH
44778: DOUBLE
44779: LD_INT 0
44781: DEC
44782: ST_TO_ADDR
44783: LD_INT 5
44785: PUSH
44786: FOR_TO
44787: IFFALSE 44854
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44789: LD_VAR 0 1
44793: PPUSH
44794: LD_VAR 0 5
44798: PPUSH
44799: LD_VAR 0 6
44803: PPUSH
44804: CALL_OW 272
44808: PPUSH
44809: LD_VAR 0 2
44813: PPUSH
44814: LD_VAR 0 5
44818: PPUSH
44819: LD_VAR 0 6
44823: PPUSH
44824: CALL_OW 273
44828: PPUSH
44829: LD_VAR 0 3
44833: PPUSH
44834: CALL_OW 309
44838: IFFALSE 44852
// begin result := true ;
44840: LD_ADDR_VAR 0 4
44844: PUSH
44845: LD_INT 1
44847: ST_TO_ADDR
// exit ;
44848: POP
44849: POP
44850: GO 44856
// end ;
44852: GO 44786
44854: POP
44855: POP
// end ;
44856: LD_VAR 0 4
44860: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
44861: LD_INT 0
44863: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
44864: LD_VAR 0 1
44868: PPUSH
44869: LD_VAR 0 2
44873: PPUSH
44874: LD_INT 0
44876: PPUSH
44877: LD_INT 0
44879: PPUSH
44880: LD_INT 1
44882: PPUSH
44883: LD_INT 0
44885: PPUSH
44886: CALL_OW 587
// end ;
44890: LD_VAR 0 3
44894: RET
// export function CenterOnNow ( unit ) ; begin
44895: LD_INT 0
44897: PPUSH
// result := IsInUnit ( unit ) ;
44898: LD_ADDR_VAR 0 2
44902: PUSH
44903: LD_VAR 0 1
44907: PPUSH
44908: CALL_OW 310
44912: ST_TO_ADDR
// if not result then
44913: LD_VAR 0 2
44917: NOT
44918: IFFALSE 44930
// result := unit ;
44920: LD_ADDR_VAR 0 2
44924: PUSH
44925: LD_VAR 0 1
44929: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
44930: LD_VAR 0 1
44934: PPUSH
44935: CALL_OW 87
// end ;
44939: LD_VAR 0 2
44943: RET
// export function ComMoveHex ( unit , hex ) ; begin
44944: LD_INT 0
44946: PPUSH
// if not hex then
44947: LD_VAR 0 2
44951: NOT
44952: IFFALSE 44956
// exit ;
44954: GO 45009
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
44956: LD_VAR 0 2
44960: PUSH
44961: LD_INT 1
44963: ARRAY
44964: PPUSH
44965: LD_VAR 0 2
44969: PUSH
44970: LD_INT 2
44972: ARRAY
44973: PPUSH
44974: CALL_OW 428
44978: IFFALSE 44982
// exit ;
44980: GO 45009
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
44982: LD_VAR 0 1
44986: PPUSH
44987: LD_VAR 0 2
44991: PUSH
44992: LD_INT 1
44994: ARRAY
44995: PPUSH
44996: LD_VAR 0 2
45000: PUSH
45001: LD_INT 2
45003: ARRAY
45004: PPUSH
45005: CALL_OW 111
// end ;
45009: LD_VAR 0 3
45013: RET
