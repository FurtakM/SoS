// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// PrepareArabian ;
   8: CALL 65 0 0
// PrepareRussian ;
  12: CALL 1514 0 0
// PrepareHeike ;
  16: CALL 614 0 0
// Action ;
  20: CALL 2694 0 0
// end ;
  24: END
// export debug , prefix , startAttackOnKabul , startAttackOnHeike ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// prefix := 07_ ;
  36: LD_ADDR_EXP 2
  40: PUSH
  41: LD_STRING 07_
  43: ST_TO_ADDR
// startAttackOnKabul := false ;
  44: LD_ADDR_EXP 3
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// startAttackOnHeike := false ;
  52: LD_ADDR_EXP 4
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// end ; end_of_file
  60: LD_VAR 0 1
  64: RET
// export function PrepareArabian ; var i , un , lives ; begin
  65: LD_INT 0
  67: PPUSH
  68: PPUSH
  69: PPUSH
  70: PPUSH
// SetBName ( ar_dep , newkabul ) ;
  71: LD_INT 2
  73: PPUSH
  74: LD_STRING newkabul
  76: PPUSH
  77: CALL_OW 500
// uc_side := 5 ;
  81: LD_ADDR_OWVAR 20
  85: PUSH
  86: LD_INT 5
  88: ST_TO_ADDR
// uc_nation := 2 ;
  89: LD_ADDR_OWVAR 21
  93: PUSH
  94: LD_INT 2
  96: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do
  97: LD_ADDR_VAR 0 2
 101: PUSH
 102: LD_INT 22
 104: PUSH
 105: LD_INT 2
 107: PUSH
 108: EMPTY
 109: LIST
 110: LIST
 111: PUSH
 112: LD_INT 21
 114: PUSH
 115: LD_INT 3
 117: PUSH
 118: EMPTY
 119: LIST
 120: LIST
 121: PUSH
 122: EMPTY
 123: LIST
 124: LIST
 125: PPUSH
 126: CALL_OW 69
 130: PUSH
 131: FOR_IN
 132: IFFALSE 266
// begin SetSide ( i , 5 ) ;
 134: LD_VAR 0 2
 138: PPUSH
 139: LD_INT 5
 141: PPUSH
 142: CALL_OW 235
// lives := rand ( 248 , 510 ) ;
 146: LD_ADDR_VAR 0 4
 150: PUSH
 151: LD_INT 248
 153: PPUSH
 154: LD_INT 510
 156: PPUSH
 157: CALL_OW 12
 161: ST_TO_ADDR
// SetLives ( i , lives ) ;
 162: LD_VAR 0 2
 166: PPUSH
 167: LD_VAR 0 4
 171: PPUSH
 172: CALL_OW 234
// if GetBType ( i ) = b_bunker then
 176: LD_VAR 0 2
 180: PPUSH
 181: CALL_OW 266
 185: PUSH
 186: LD_INT 32
 188: EQUAL
 189: IFFALSE 264
// begin PlaceWeaponTurret ( i , [ ar_double_machine_gun , ar_gun , ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] ) ;
 191: LD_VAR 0 2
 195: PPUSH
 196: LD_INT 24
 198: PUSH
 199: LD_INT 27
 201: PUSH
 202: LD_INT 25
 204: PUSH
 205: LD_INT 28
 207: PUSH
 208: EMPTY
 209: LIST
 210: LIST
 211: LIST
 212: LIST
 213: PUSH
 214: LD_INT 1
 216: PPUSH
 217: LD_INT 4
 219: PPUSH
 220: CALL_OW 12
 224: ARRAY
 225: PPUSH
 226: CALL_OW 431
// if lives > 250 then
 230: LD_VAR 0 4
 234: PUSH
 235: LD_INT 250
 237: GREATER
 238: IFFALSE 264
// begin PrepareSoldier ( false , 6 ) ;
 240: LD_INT 0
 242: PPUSH
 243: LD_INT 6
 245: PPUSH
 246: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
 250: CALL_OW 44
 254: PPUSH
 255: LD_VAR 0 2
 259: PPUSH
 260: CALL_OW 52
// end ; end ; end ;
 264: GO 131
 266: POP
 267: POP
// for i := 1 to 9 do
 268: LD_ADDR_VAR 0 2
 272: PUSH
 273: DOUBLE
 274: LD_INT 1
 276: DEC
 277: ST_TO_ADDR
 278: LD_INT 9
 280: PUSH
 281: FOR_TO
 282: IFFALSE 361
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 0 ) ;
 284: LD_INT 0
 286: PPUSH
 287: LD_INT 1
 289: PPUSH
 290: LD_INT 4
 292: PPUSH
 293: CALL_OW 12
 297: PPUSH
 298: LD_INT 0
 300: PPUSH
 301: CALL_OW 380
// un := CreateHuman ;
 305: LD_ADDR_VAR 0 3
 309: PUSH
 310: CALL_OW 44
 314: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 315: LD_VAR 0 3
 319: PPUSH
 320: LD_INT 0
 322: PPUSH
 323: LD_INT 5
 325: PPUSH
 326: CALL_OW 12
 330: PPUSH
 331: CALL_OW 233
// PlaceUnitArea ( un , kabulDeadArea , false ) ;
 335: LD_VAR 0 3
 339: PPUSH
 340: LD_INT 1
 342: PPUSH
 343: LD_INT 0
 345: PPUSH
 346: CALL_OW 49
// KillUnit ( un ) ;
 350: LD_VAR 0 3
 354: PPUSH
 355: CALL_OW 66
// end ;
 359: GO 281
 361: POP
 362: POP
// for i := 1 to 3 do
 363: LD_ADDR_VAR 0 2
 367: PUSH
 368: DOUBLE
 369: LD_INT 1
 371: DEC
 372: ST_TO_ADDR
 373: LD_INT 3
 375: PUSH
 376: FOR_TO
 377: IFFALSE 531
// begin vc_chassis := ar_medium_trike ;
 379: LD_ADDR_OWVAR 37
 383: PUSH
 384: LD_INT 13
 386: ST_TO_ADDR
// vc_engine := [ engine_solar , engine_combustion ] [ rand ( 1 , 2 ) ] ;
 387: LD_ADDR_OWVAR 39
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 1
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: PUSH
 402: LD_INT 1
 404: PPUSH
 405: LD_INT 2
 407: PPUSH
 408: CALL_OW 12
 412: ARRAY
 413: ST_TO_ADDR
// vc_control := [ control_manual , control_remote ] [ rand ( 1 , 2 ) ] ;
 414: LD_ADDR_OWVAR 38
 418: PUSH
 419: LD_INT 1
 421: PUSH
 422: LD_INT 2
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: PUSH
 429: LD_INT 1
 431: PPUSH
 432: LD_INT 2
 434: PPUSH
 435: CALL_OW 12
 439: ARRAY
 440: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_gatling_gun , ar_gun ] [ rand ( 1 , 3 ) ] ;
 441: LD_ADDR_OWVAR 40
 445: PUSH
 446: LD_INT 24
 448: PUSH
 449: LD_INT 25
 451: PUSH
 452: LD_INT 27
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: LIST
 459: PUSH
 460: LD_INT 1
 462: PPUSH
 463: LD_INT 3
 465: PPUSH
 466: CALL_OW 12
 470: ARRAY
 471: ST_TO_ADDR
// un := CreateVehicle ;
 472: LD_ADDR_VAR 0 3
 476: PUSH
 477: CALL_OW 45
 481: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 482: LD_VAR 0 3
 486: PPUSH
 487: LD_INT 0
 489: PPUSH
 490: LD_INT 5
 492: PPUSH
 493: CALL_OW 12
 497: PPUSH
 498: CALL_OW 233
// PlaceUnitArea ( un , kabulVDeadArea , false ) ;
 502: LD_VAR 0 3
 506: PPUSH
 507: LD_INT 2
 509: PPUSH
 510: LD_INT 0
 512: PPUSH
 513: CALL_OW 49
// SetLives ( un , 200 ) ;
 517: LD_VAR 0 3
 521: PPUSH
 522: LD_INT 200
 524: PPUSH
 525: CALL_OW 234
// end ;
 529: GO 376
 531: POP
 532: POP
// for i := 1 to 3 do
 533: LD_ADDR_VAR 0 2
 537: PUSH
 538: DOUBLE
 539: LD_INT 1
 541: DEC
 542: ST_TO_ADDR
 543: LD_INT 3
 545: PUSH
 546: FOR_TO
 547: IFFALSE 607
// begin PrepareSoldier ( false , 6 ) ;
 549: LD_INT 0
 551: PPUSH
 552: LD_INT 6
 554: PPUSH
 555: CALL_OW 381
// un := CreateHuman ;
 559: LD_ADDR_VAR 0 3
 563: PUSH
 564: CALL_OW 44
 568: ST_TO_ADDR
// PlaceUnitXYR ( un , 106 , 47 , 4 , false ) ;
 569: LD_VAR 0 3
 573: PPUSH
 574: LD_INT 106
 576: PPUSH
 577: LD_INT 47
 579: PPUSH
 580: LD_INT 4
 582: PPUSH
 583: LD_INT 0
 585: PPUSH
 586: CALL_OW 50
// ComAgressiveMove ( un , 71 , 53 ) ;
 590: LD_VAR 0 3
 594: PPUSH
 595: LD_INT 71
 597: PPUSH
 598: LD_INT 53
 600: PPUSH
 601: CALL_OW 114
// end ;
 605: GO 546
 607: POP
 608: POP
// end ;
 609: LD_VAR 0 1
 613: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad ; export function PrepareHeike ; var i , tmp , un , veh ; begin
 614: LD_INT 0
 616: PPUSH
 617: PPUSH
 618: PPUSH
 619: PPUSH
 620: PPUSH
// uc_side := 5 ;
 621: LD_ADDR_OWVAR 20
 625: PUSH
 626: LD_INT 5
 628: ST_TO_ADDR
// uc_nation := 1 ;
 629: LD_ADDR_OWVAR 21
 633: PUSH
 634: LD_INT 1
 636: ST_TO_ADDR
// americanSquad := [ ] ;
 637: LD_ADDR_EXP 17
 641: PUSH
 642: EMPTY
 643: ST_TO_ADDR
// if not americanSquad then
 644: LD_EXP 17
 648: NOT
 649: IFFALSE 714
// begin for i := 1 to 4 do
 651: LD_ADDR_VAR 0 2
 655: PUSH
 656: DOUBLE
 657: LD_INT 1
 659: DEC
 660: ST_TO_ADDR
 661: LD_INT 4
 663: PUSH
 664: FOR_TO
 665: IFFALSE 710
// begin PrepareHuman ( false , rand ( 2 , 4 ) , 6 ) ;
 667: LD_INT 0
 669: PPUSH
 670: LD_INT 2
 672: PPUSH
 673: LD_INT 4
 675: PPUSH
 676: CALL_OW 12
 680: PPUSH
 681: LD_INT 6
 683: PPUSH
 684: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 688: LD_ADDR_EXP 17
 692: PUSH
 693: LD_EXP 17
 697: PPUSH
 698: CALL_OW 44
 702: PPUSH
 703: CALL 41085 0 2
 707: ST_TO_ADDR
// end ;
 708: GO 664
 710: POP
 711: POP
// end else
 712: GO 765
// begin for i in americanSquad do
 714: LD_ADDR_VAR 0 2
 718: PUSH
 719: LD_EXP 17
 723: PUSH
 724: FOR_IN
 725: IFFALSE 763
// if GetClass ( i ) in [ class_sniper , class_soldier ] then
 727: LD_VAR 0 2
 731: PPUSH
 732: CALL_OW 257
 736: PUSH
 737: LD_INT 5
 739: PUSH
 740: LD_INT 1
 742: PUSH
 743: EMPTY
 744: LIST
 745: LIST
 746: IN
 747: IFFALSE 761
// SetClass ( i , class_engineer ) ;
 749: LD_VAR 0 2
 753: PPUSH
 754: LD_INT 2
 756: PPUSH
 757: CALL_OW 336
 761: GO 724
 763: POP
 764: POP
// end ; uc_side := 2 ;
 765: LD_ADDR_OWVAR 20
 769: PUSH
 770: LD_INT 2
 772: ST_TO_ADDR
// uc_nation := 2 ;
 773: LD_ADDR_OWVAR 21
 777: PUSH
 778: LD_INT 2
 780: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 781: LD_ADDR_EXP 5
 785: PUSH
 786: LD_STRING Heike
 788: PPUSH
 789: LD_EXP 1
 793: NOT
 794: PPUSH
 795: LD_EXP 2
 799: PPUSH
 800: CALL 3650 0 3
 804: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 805: LD_ADDR_EXP 8
 809: PUSH
 810: LD_STRING Ibrahim
 812: PPUSH
 813: LD_EXP 1
 817: NOT
 818: PPUSH
 819: LD_EXP 2
 823: PPUSH
 824: CALL 3650 0 3
 828: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 829: LD_ADDR_EXP 6
 833: PUSH
 834: LD_STRING Givi
 836: PPUSH
 837: LD_EXP 1
 841: NOT
 842: PPUSH
 843: LD_EXP 2
 847: PPUSH
 848: CALL 3650 0 3
 852: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 853: LD_ADDR_EXP 9
 857: PUSH
 858: LD_STRING Kamil
 860: PPUSH
 861: LD_EXP 1
 865: NOT
 866: PPUSH
 867: LD_EXP 2
 871: PPUSH
 872: CALL 3650 0 3
 876: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 877: LD_ADDR_EXP 10
 881: PUSH
 882: LD_STRING Kaia
 884: PPUSH
 885: LD_EXP 1
 889: NOT
 890: PPUSH
 891: LD_EXP 2
 895: PPUSH
 896: CALL 3650 0 3
 900: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 901: LD_ADDR_EXP 11
 905: PUSH
 906: LD_STRING Sophia
 908: PPUSH
 909: LD_EXP 1
 913: NOT
 914: PPUSH
 915: LD_EXP 2
 919: PPUSH
 920: CALL 3650 0 3
 924: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 925: LD_ADDR_EXP 12
 929: PUSH
 930: LD_STRING Markov
 932: PPUSH
 933: LD_EXP 1
 937: NOT
 938: PPUSH
 939: LD_EXP 2
 943: PPUSH
 944: CALL 3650 0 3
 948: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 949: LD_ADDR_EXP 15
 953: PUSH
 954: LD_STRING Aviradze
 956: PPUSH
 957: LD_EXP 1
 961: NOT
 962: PPUSH
 963: LD_EXP 2
 967: PPUSH
 968: CALL 3650 0 3
 972: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 973: LD_ADDR_EXP 14
 977: PUSH
 978: LD_STRING Kurt
 980: PPUSH
 981: LD_EXP 1
 985: NOT
 986: PPUSH
 987: LD_EXP 2
 991: PPUSH
 992: CALL 3650 0 3
 996: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 997: LD_ADDR_EXP 7
1001: PUSH
1002: LD_STRING Mike
1004: PPUSH
1005: LD_EXP 1
1009: NOT
1010: PPUSH
1011: LD_EXP 2
1015: PPUSH
1016: CALL 3650 0 3
1020: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
1021: LD_ADDR_EXP 13
1025: PUSH
1026: LD_STRING Olaf
1028: PPUSH
1029: LD_EXP 1
1033: NOT
1034: PPUSH
1035: LD_EXP 2
1039: PPUSH
1040: CALL 3650 0 3
1044: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
1045: LD_ADDR_EXP 16
1049: PUSH
1050: LD_STRING 07_others
1052: PPUSH
1053: CALL_OW 31
1057: ST_TO_ADDR
// veh := [ [ ar_half_tracked , engine_combustion , control_manual , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] , ] ;
1058: LD_ADDR_VAR 0 5
1062: PUSH
1063: LD_INT 14
1065: PUSH
1066: LD_INT 1
1068: PUSH
1069: LD_INT 1
1071: PUSH
1072: LD_INT 25
1074: PUSH
1075: EMPTY
1076: LIST
1077: LIST
1078: LIST
1079: LIST
1080: PUSH
1081: LD_INT 14
1083: PUSH
1084: LD_INT 1
1086: PUSH
1087: LD_INT 1
1089: PUSH
1090: LD_INT 27
1092: PUSH
1093: EMPTY
1094: LIST
1095: LIST
1096: LIST
1097: LIST
1098: PUSH
1099: LD_INT 14
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: LD_INT 1
1107: PUSH
1108: LD_INT 27
1110: PUSH
1111: EMPTY
1112: LIST
1113: LIST
1114: LIST
1115: LIST
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: LIST
1121: ST_TO_ADDR
// for i in veh do
1122: LD_ADDR_VAR 0 2
1126: PUSH
1127: LD_VAR 0 5
1131: PUSH
1132: FOR_IN
1133: IFFALSE 1238
// begin vc_chassis := i [ 1 ] ;
1135: LD_ADDR_OWVAR 37
1139: PUSH
1140: LD_VAR 0 2
1144: PUSH
1145: LD_INT 1
1147: ARRAY
1148: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
1149: LD_ADDR_OWVAR 39
1153: PUSH
1154: LD_VAR 0 2
1158: PUSH
1159: LD_INT 2
1161: ARRAY
1162: ST_TO_ADDR
// vc_control := i [ 3 ] ;
1163: LD_ADDR_OWVAR 38
1167: PUSH
1168: LD_VAR 0 2
1172: PUSH
1173: LD_INT 3
1175: ARRAY
1176: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
1177: LD_ADDR_OWVAR 40
1181: PUSH
1182: LD_VAR 0 2
1186: PUSH
1187: LD_INT 4
1189: ARRAY
1190: ST_TO_ADDR
// vc_fuel_battery := 25 ;
1191: LD_ADDR_OWVAR 41
1195: PUSH
1196: LD_INT 25
1198: ST_TO_ADDR
// un := CreateVehicle ;
1199: LD_ADDR_VAR 0 4
1203: PUSH
1204: CALL_OW 45
1208: ST_TO_ADDR
// SetDir ( un , 0 ) ;
1209: LD_VAR 0 4
1213: PPUSH
1214: LD_INT 0
1216: PPUSH
1217: CALL_OW 233
// PlaceUnitArea ( un , heikeVehArea , false ) ;
1221: LD_VAR 0 4
1225: PPUSH
1226: LD_INT 7
1228: PPUSH
1229: LD_INT 0
1231: PPUSH
1232: CALL_OW 49
// end ;
1236: GO 1132
1238: POP
1239: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad union americanSquad ;
1240: LD_ADDR_VAR 0 3
1244: PUSH
1245: LD_EXP 7
1249: PUSH
1250: LD_EXP 8
1254: PUSH
1255: LD_EXP 9
1259: PUSH
1260: LD_EXP 10
1264: PUSH
1265: LD_EXP 11
1269: PUSH
1270: LD_EXP 12
1274: PUSH
1275: LD_EXP 13
1279: PUSH
1280: LD_EXP 14
1284: PUSH
1285: LD_EXP 15
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: PUSH
1301: LD_EXP 16
1305: UNION
1306: PUSH
1307: LD_EXP 17
1311: UNION
1312: ST_TO_ADDR
// for i in tmp do
1313: LD_ADDR_VAR 0 2
1317: PUSH
1318: LD_VAR 0 3
1322: PUSH
1323: FOR_IN
1324: IFFALSE 1444
// begin if GetClass ( i ) in [ class_mechanic , class_engineer , class_scientistic ] and FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) then
1326: LD_VAR 0 2
1330: PPUSH
1331: CALL_OW 257
1335: PUSH
1336: LD_INT 3
1338: PUSH
1339: LD_INT 2
1341: PUSH
1342: LD_INT 4
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: LIST
1349: IN
1350: PUSH
1351: LD_INT 22
1353: PUSH
1354: LD_INT 2
1356: PUSH
1357: EMPTY
1358: LIST
1359: LIST
1360: PUSH
1361: LD_INT 58
1363: PUSH
1364: EMPTY
1365: LIST
1366: PUSH
1367: EMPTY
1368: LIST
1369: LIST
1370: PPUSH
1371: CALL_OW 69
1375: AND
1376: IFFALSE 1418
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) [ 1 ] ) else
1378: LD_VAR 0 2
1382: PPUSH
1383: LD_INT 22
1385: PUSH
1386: LD_INT 2
1388: PUSH
1389: EMPTY
1390: LIST
1391: LIST
1392: PUSH
1393: LD_INT 58
1395: PUSH
1396: EMPTY
1397: LIST
1398: PUSH
1399: EMPTY
1400: LIST
1401: LIST
1402: PPUSH
1403: CALL_OW 69
1407: PUSH
1408: LD_INT 1
1410: ARRAY
1411: PPUSH
1412: CALL_OW 52
1416: GO 1433
// PlaceUnitArea ( i , heikePeopleArea , false ) ;
1418: LD_VAR 0 2
1422: PPUSH
1423: LD_INT 6
1425: PPUSH
1426: LD_INT 0
1428: PPUSH
1429: CALL_OW 49
// ComHold ( i ) ;
1433: LD_VAR 0 2
1437: PPUSH
1438: CALL_OW 140
// end ;
1442: GO 1323
1444: POP
1445: POP
// PlaceUnitArea ( Heike , heikeArea , false ) ;
1446: LD_EXP 5
1450: PPUSH
1451: LD_INT 5
1453: PPUSH
1454: LD_INT 0
1456: PPUSH
1457: CALL_OW 49
// ComTurnUnit ( Heike , ar_dep ) ;
1461: LD_EXP 5
1465: PPUSH
1466: LD_INT 2
1468: PPUSH
1469: CALL_OW 119
// if Givi then
1473: LD_EXP 6
1477: IFFALSE 1509
// begin PlaceUnitXY ( Givi , 129 , 158 , false ) ;
1479: LD_EXP 6
1483: PPUSH
1484: LD_INT 129
1486: PPUSH
1487: LD_INT 158
1489: PPUSH
1490: LD_INT 0
1492: PPUSH
1493: CALL_OW 48
// ComTurnUnit ( Givi , ar_dep ) ;
1497: LD_EXP 6
1501: PPUSH
1502: LD_INT 2
1504: PPUSH
1505: CALL_OW 119
// end ; end ; end_of_file
1509: LD_VAR 0 1
1513: RET
// export kabulAttackers , heikeAttackers , Burlak ; export function PrepareRussian ; var i , un ; begin
1514: LD_INT 0
1516: PPUSH
1517: PPUSH
1518: PPUSH
// uc_side := 3 ;
1519: LD_ADDR_OWVAR 20
1523: PUSH
1524: LD_INT 3
1526: ST_TO_ADDR
// uc_nation := 3 ;
1527: LD_ADDR_OWVAR 21
1531: PUSH
1532: LD_INT 3
1534: ST_TO_ADDR
// Burlak := NewCharacter ( Burlak ) ;
1535: LD_ADDR_EXP 20
1539: PUSH
1540: LD_STRING Burlak
1542: PPUSH
1543: CALL_OW 25
1547: ST_TO_ADDR
// kabulAttackers := [ ] ;
1548: LD_ADDR_EXP 18
1552: PUSH
1553: EMPTY
1554: ST_TO_ADDR
// heikeAttackers := [ ] ;
1555: LD_ADDR_EXP 19
1559: PUSH
1560: EMPTY
1561: ST_TO_ADDR
// for i := 1 to 9 do
1562: LD_ADDR_VAR 0 2
1566: PUSH
1567: DOUBLE
1568: LD_INT 1
1570: DEC
1571: ST_TO_ADDR
1572: LD_INT 9
1574: PUSH
1575: FOR_TO
1576: IFFALSE 1668
// begin PrepareHuman ( false , class_soldier , 0 ) ;
1578: LD_INT 0
1580: PPUSH
1581: LD_INT 1
1583: PPUSH
1584: LD_INT 0
1586: PPUSH
1587: CALL_OW 380
// un := CreateHuman ;
1591: LD_ADDR_VAR 0 3
1595: PUSH
1596: CALL_OW 44
1600: ST_TO_ADDR
// if Prob ( 40 ) then
1601: LD_INT 40
1603: PPUSH
1604: CALL_OW 13
1608: IFFALSE 1622
// SetClass ( un , class_bazooker ) ;
1610: LD_VAR 0 3
1614: PPUSH
1615: LD_INT 9
1617: PPUSH
1618: CALL_OW 336
// SetDir ( un , rand ( 0 , 5 ) ) ;
1622: LD_VAR 0 3
1626: PPUSH
1627: LD_INT 0
1629: PPUSH
1630: LD_INT 5
1632: PPUSH
1633: CALL_OW 12
1637: PPUSH
1638: CALL_OW 233
// PlaceUnitArea ( un , KabulRuDead , false ) ;
1642: LD_VAR 0 3
1646: PPUSH
1647: LD_INT 10
1649: PPUSH
1650: LD_INT 0
1652: PPUSH
1653: CALL_OW 49
// KillUnit ( un ) ;
1657: LD_VAR 0 3
1661: PPUSH
1662: CALL_OW 66
// end ;
1666: GO 1575
1668: POP
1669: POP
// for i := 1 to 9 do
1670: LD_ADDR_VAR 0 2
1674: PUSH
1675: DOUBLE
1676: LD_INT 1
1678: DEC
1679: ST_TO_ADDR
1680: LD_INT 9
1682: PUSH
1683: FOR_TO
1684: IFFALSE 1905
// begin if rand ( 0 , 1 ) then
1686: LD_INT 0
1688: PPUSH
1689: LD_INT 1
1691: PPUSH
1692: CALL_OW 12
1696: IFFALSE 1759
// begin PrepareHuman ( false , class_soldier , 7 ) ;
1698: LD_INT 0
1700: PPUSH
1701: LD_INT 1
1703: PPUSH
1704: LD_INT 7
1706: PPUSH
1707: CALL_OW 380
// un := CreateHuman ;
1711: LD_ADDR_VAR 0 3
1715: PUSH
1716: CALL_OW 44
1720: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1721: LD_VAR 0 3
1725: PPUSH
1726: LD_INT 1
1728: PPUSH
1729: CALL_OW 233
// PlaceUnitArea ( un , kabulRuArea , false ) ;
1733: LD_VAR 0 3
1737: PPUSH
1738: LD_INT 3
1740: PPUSH
1741: LD_INT 0
1743: PPUSH
1744: CALL_OW 49
// ComHold ( un ) ;
1748: LD_VAR 0 3
1752: PPUSH
1753: CALL_OW 140
// end else
1757: GO 1874
// begin vc_chassis := ru_medium_tracked ;
1759: LD_ADDR_OWVAR 37
1763: PUSH
1764: LD_INT 22
1766: ST_TO_ADDR
// vc_engine := engine_combustion ;
1767: LD_ADDR_OWVAR 39
1771: PUSH
1772: LD_INT 1
1774: ST_TO_ADDR
// vc_control := control_manual ;
1775: LD_ADDR_OWVAR 38
1779: PUSH
1780: LD_INT 1
1782: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
1783: LD_ADDR_OWVAR 40
1787: PUSH
1788: LD_INT 44
1790: PUSH
1791: LD_INT 43
1793: PUSH
1794: LD_INT 45
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: LIST
1801: PUSH
1802: LD_INT 1
1804: PPUSH
1805: LD_INT 3
1807: PPUSH
1808: CALL_OW 12
1812: ARRAY
1813: ST_TO_ADDR
// un := CreateVehicle ;
1814: LD_ADDR_VAR 0 3
1818: PUSH
1819: CALL_OW 45
1823: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1824: LD_VAR 0 3
1828: PPUSH
1829: LD_INT 1
1831: PPUSH
1832: CALL_OW 233
// PlaceUnitArea ( un , kabulRuArea , false ) ;
1836: LD_VAR 0 3
1840: PPUSH
1841: LD_INT 3
1843: PPUSH
1844: LD_INT 0
1846: PPUSH
1847: CALL_OW 49
// ComHold ( un ) ;
1851: LD_VAR 0 3
1855: PPUSH
1856: CALL_OW 140
// PlaceHumanInUnit ( CreateHuman , un ) ;
1860: CALL_OW 44
1864: PPUSH
1865: LD_VAR 0 3
1869: PPUSH
1870: CALL_OW 52
// end ; kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
1874: LD_ADDR_EXP 18
1878: PUSH
1879: LD_EXP 18
1883: PPUSH
1884: LD_EXP 18
1888: PUSH
1889: LD_INT 1
1891: PLUS
1892: PPUSH
1893: LD_VAR 0 3
1897: PPUSH
1898: CALL_OW 1
1902: ST_TO_ADDR
// end ;
1903: GO 1683
1905: POP
1906: POP
// for i := 1 to 5 do
1907: LD_ADDR_VAR 0 2
1911: PUSH
1912: DOUBLE
1913: LD_INT 1
1915: DEC
1916: ST_TO_ADDR
1917: LD_INT 5
1919: PUSH
1920: FOR_TO
1921: IFFALSE 2154
// begin if rand ( 0 , 1 ) then
1923: LD_INT 0
1925: PPUSH
1926: LD_INT 1
1928: PPUSH
1929: CALL_OW 12
1933: IFFALSE 2008
// begin PrepareHuman ( false , class_soldier , 7 ) ;
1935: LD_INT 0
1937: PPUSH
1938: LD_INT 1
1940: PPUSH
1941: LD_INT 7
1943: PPUSH
1944: CALL_OW 380
// un := CreateHuman ;
1948: LD_ADDR_VAR 0 3
1952: PUSH
1953: CALL_OW 44
1957: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1958: LD_VAR 0 3
1962: PPUSH
1963: LD_INT 1
1965: PPUSH
1966: CALL_OW 233
// SetClass ( un , class_bazooker ) ;
1970: LD_VAR 0 3
1974: PPUSH
1975: LD_INT 9
1977: PPUSH
1978: CALL_OW 336
// PlaceUnitArea ( un , kabulRu2Area , false ) ;
1982: LD_VAR 0 3
1986: PPUSH
1987: LD_INT 8
1989: PPUSH
1990: LD_INT 0
1992: PPUSH
1993: CALL_OW 49
// ComHold ( un ) ;
1997: LD_VAR 0 3
2001: PPUSH
2002: CALL_OW 140
// end else
2006: GO 2123
// begin vc_chassis := ru_heavy_wheeled ;
2008: LD_ADDR_OWVAR 37
2012: PUSH
2013: LD_INT 23
2015: ST_TO_ADDR
// vc_engine := engine_combustion ;
2016: LD_ADDR_OWVAR 39
2020: PUSH
2021: LD_INT 1
2023: ST_TO_ADDR
// vc_control := control_manual ;
2024: LD_ADDR_OWVAR 38
2028: PUSH
2029: LD_INT 1
2031: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
2032: LD_ADDR_OWVAR 40
2036: PUSH
2037: LD_INT 44
2039: PUSH
2040: LD_INT 43
2042: PUSH
2043: LD_INT 45
2045: PUSH
2046: EMPTY
2047: LIST
2048: LIST
2049: LIST
2050: PUSH
2051: LD_INT 1
2053: PPUSH
2054: LD_INT 3
2056: PPUSH
2057: CALL_OW 12
2061: ARRAY
2062: ST_TO_ADDR
// un := CreateVehicle ;
2063: LD_ADDR_VAR 0 3
2067: PUSH
2068: CALL_OW 45
2072: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2073: LD_VAR 0 3
2077: PPUSH
2078: LD_INT 4
2080: PPUSH
2081: CALL_OW 233
// PlaceUnitArea ( un , kabulRu2Area , false ) ;
2085: LD_VAR 0 3
2089: PPUSH
2090: LD_INT 8
2092: PPUSH
2093: LD_INT 0
2095: PPUSH
2096: CALL_OW 49
// ComHold ( un ) ;
2100: LD_VAR 0 3
2104: PPUSH
2105: CALL_OW 140
// PlaceHumanInUnit ( CreateHuman , un ) ;
2109: CALL_OW 44
2113: PPUSH
2114: LD_VAR 0 3
2118: PPUSH
2119: CALL_OW 52
// end ; kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
2123: LD_ADDR_EXP 18
2127: PUSH
2128: LD_EXP 18
2132: PPUSH
2133: LD_EXP 18
2137: PUSH
2138: LD_INT 1
2140: PLUS
2141: PPUSH
2142: LD_VAR 0 3
2146: PPUSH
2147: CALL_OW 1
2151: ST_TO_ADDR
// end ;
2152: GO 1920
2154: POP
2155: POP
// for i := 1 to 5 do
2156: LD_ADDR_VAR 0 2
2160: PUSH
2161: DOUBLE
2162: LD_INT 1
2164: DEC
2165: ST_TO_ADDR
2166: LD_INT 5
2168: PUSH
2169: FOR_TO
2170: IFFALSE 2274
// begin PrepareHuman ( false , class_soldier , 7 ) ;
2172: LD_INT 0
2174: PPUSH
2175: LD_INT 1
2177: PPUSH
2178: LD_INT 7
2180: PPUSH
2181: CALL_OW 380
// un := CreateHuman ;
2185: LD_ADDR_VAR 0 3
2189: PUSH
2190: CALL_OW 44
2194: ST_TO_ADDR
// SetDir ( un , 0 ) ;
2195: LD_VAR 0 3
2199: PPUSH
2200: LD_INT 0
2202: PPUSH
2203: CALL_OW 233
// SetClass ( un , class_bazooker ) ;
2207: LD_VAR 0 3
2211: PPUSH
2212: LD_INT 9
2214: PPUSH
2215: CALL_OW 336
// PlaceUnitArea ( un , kabulRu3Area , false ) ;
2219: LD_VAR 0 3
2223: PPUSH
2224: LD_INT 9
2226: PPUSH
2227: LD_INT 0
2229: PPUSH
2230: CALL_OW 49
// ComHold ( un ) ;
2234: LD_VAR 0 3
2238: PPUSH
2239: CALL_OW 140
// kabulAttackers := Replace ( kabulAttackers , kabulAttackers + 1 , un ) ;
2243: LD_ADDR_EXP 18
2247: PUSH
2248: LD_EXP 18
2252: PPUSH
2253: LD_EXP 18
2257: PUSH
2258: LD_INT 1
2260: PLUS
2261: PPUSH
2262: LD_VAR 0 3
2266: PPUSH
2267: CALL_OW 1
2271: ST_TO_ADDR
// end ;
2272: GO 2169
2274: POP
2275: POP
// for i := 1 to 12 do
2276: LD_ADDR_VAR 0 2
2280: PUSH
2281: DOUBLE
2282: LD_INT 1
2284: DEC
2285: ST_TO_ADDR
2286: LD_INT 12
2288: PUSH
2289: FOR_TO
2290: IFFALSE 2541
// begin if Prob ( 22 ) then
2292: LD_INT 22
2294: PPUSH
2295: CALL_OW 13
2299: IFFALSE 2362
// begin PrepareHuman ( false , class_soldier , 10 ) ;
2301: LD_INT 0
2303: PPUSH
2304: LD_INT 1
2306: PPUSH
2307: LD_INT 10
2309: PPUSH
2310: CALL_OW 380
// un := CreateHuman ;
2314: LD_ADDR_VAR 0 3
2318: PUSH
2319: CALL_OW 44
2323: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2324: LD_VAR 0 3
2328: PPUSH
2329: LD_INT 3
2331: PPUSH
2332: CALL_OW 233
// PlaceUnitArea ( un , heikeRuArea , false ) ;
2336: LD_VAR 0 3
2340: PPUSH
2341: LD_INT 4
2343: PPUSH
2344: LD_INT 0
2346: PPUSH
2347: CALL_OW 49
// ComHold ( un ) ;
2351: LD_VAR 0 3
2355: PPUSH
2356: CALL_OW 140
// end else
2360: GO 2510
// begin vc_chassis := [ ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] ;
2362: LD_ADDR_OWVAR 37
2366: PUSH
2367: LD_INT 22
2369: PUSH
2370: LD_INT 24
2372: PUSH
2373: EMPTY
2374: LIST
2375: LIST
2376: PUSH
2377: LD_INT 1
2379: PPUSH
2380: LD_INT 2
2382: PPUSH
2383: CALL_OW 12
2387: ARRAY
2388: ST_TO_ADDR
// vc_engine := engine_combustion ;
2389: LD_ADDR_OWVAR 39
2393: PUSH
2394: LD_INT 1
2396: ST_TO_ADDR
// vc_control := control_manual ;
2397: LD_ADDR_OWVAR 38
2401: PUSH
2402: LD_INT 1
2404: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_gatling_gun , ru_rocket_launcher ] [ rand ( 1 , 4 ) ] ;
2405: LD_ADDR_OWVAR 40
2409: PUSH
2410: LD_INT 44
2412: PUSH
2413: LD_INT 43
2415: PUSH
2416: LD_INT 43
2418: PUSH
2419: LD_INT 45
2421: PUSH
2422: EMPTY
2423: LIST
2424: LIST
2425: LIST
2426: LIST
2427: PUSH
2428: LD_INT 1
2430: PPUSH
2431: LD_INT 4
2433: PPUSH
2434: CALL_OW 12
2438: ARRAY
2439: ST_TO_ADDR
// un := CreateVehicle ;
2440: LD_ADDR_VAR 0 3
2444: PUSH
2445: CALL_OW 45
2449: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2450: LD_VAR 0 3
2454: PPUSH
2455: LD_INT 3
2457: PPUSH
2458: CALL_OW 233
// PlaceUnitArea ( un , heikeRuArea , false ) ;
2462: LD_VAR 0 3
2466: PPUSH
2467: LD_INT 4
2469: PPUSH
2470: LD_INT 0
2472: PPUSH
2473: CALL_OW 49
// ComHold ( un ) ;
2477: LD_VAR 0 3
2481: PPUSH
2482: CALL_OW 140
// PrepareMechanic ( false , 10 ) ;
2486: LD_INT 0
2488: PPUSH
2489: LD_INT 10
2491: PPUSH
2492: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
2496: CALL_OW 44
2500: PPUSH
2501: LD_VAR 0 3
2505: PPUSH
2506: CALL_OW 52
// end ; heikeAttackers := Replace ( heikeAttackers , heikeAttackers + 1 , un ) ;
2510: LD_ADDR_EXP 19
2514: PUSH
2515: LD_EXP 19
2519: PPUSH
2520: LD_EXP 19
2524: PUSH
2525: LD_INT 1
2527: PLUS
2528: PPUSH
2529: LD_VAR 0 3
2533: PPUSH
2534: CALL_OW 1
2538: ST_TO_ADDR
// end ;
2539: GO 2289
2541: POP
2542: POP
// end ;
2543: LD_VAR 0 1
2547: RET
// every 0 0$2 trigger startAttackOnKabul and kabulAttackers do var i ;
2548: LD_EXP 3
2552: PUSH
2553: LD_EXP 18
2557: AND
2558: IFFALSE 2618
2560: GO 2562
2562: DISABLE
2563: LD_INT 0
2565: PPUSH
// begin enable ;
2566: ENABLE
// for i in kabulAttackers do
2567: LD_ADDR_VAR 0 1
2571: PUSH
2572: LD_EXP 18
2576: PUSH
2577: FOR_IN
2578: IFFALSE 2616
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 5 ] ) , i ) ) ;
2580: LD_VAR 0 1
2584: PPUSH
2585: LD_INT 22
2587: PUSH
2588: LD_INT 5
2590: PUSH
2591: EMPTY
2592: LIST
2593: LIST
2594: PPUSH
2595: CALL_OW 69
2599: PPUSH
2600: LD_VAR 0 1
2604: PPUSH
2605: CALL_OW 74
2609: PPUSH
2610: CALL_OW 115
2614: GO 2577
2616: POP
2617: POP
// end ;
2618: PPOPN 1
2620: END
// every 0 0$1 trigger startAttackOnHeike and heikeAttackers do var i ;
2621: LD_EXP 4
2625: PUSH
2626: LD_EXP 19
2630: AND
2631: IFFALSE 2691
2633: GO 2635
2635: DISABLE
2636: LD_INT 0
2638: PPUSH
// begin enable ;
2639: ENABLE
// for i in heikeAttackers do
2640: LD_ADDR_VAR 0 1
2644: PUSH
2645: LD_EXP 19
2649: PUSH
2650: FOR_IN
2651: IFFALSE 2689
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ) ;
2653: LD_VAR 0 1
2657: PPUSH
2658: LD_INT 22
2660: PUSH
2661: LD_INT 2
2663: PUSH
2664: EMPTY
2665: LIST
2666: LIST
2667: PPUSH
2668: CALL_OW 69
2672: PPUSH
2673: LD_VAR 0 1
2677: PPUSH
2678: CALL_OW 74
2682: PPUSH
2683: CALL_OW 115
2687: GO 2650
2689: POP
2690: POP
// end ; end_of_file
2691: PPOPN 1
2693: END
// export function Action ; var i ; begin
2694: LD_INT 0
2696: PPUSH
2697: PPUSH
// Video ( true ) ;
2698: LD_INT 1
2700: PPUSH
2701: CALL 41057 0 1
// PlaceSeeing ( 111 , 168 , 2 , - 25 ) ;
2705: LD_INT 111
2707: PPUSH
2708: LD_INT 168
2710: PPUSH
2711: LD_INT 2
2713: PPUSH
2714: LD_INT 25
2716: NEG
2717: PPUSH
2718: CALL_OW 330
// PlaceSeeing ( 102 , 47 , 2 , - 40 ) ;
2722: LD_INT 102
2724: PPUSH
2725: LD_INT 47
2727: PPUSH
2728: LD_INT 2
2730: PPUSH
2731: LD_INT 40
2733: NEG
2734: PPUSH
2735: CALL_OW 330
// CenterNowOnUnits ( Heike ) ;
2739: LD_EXP 5
2743: PPUSH
2744: CALL_OW 87
// startAttackOnKabul := true ;
2748: LD_ADDR_EXP 3
2752: PUSH
2753: LD_INT 1
2755: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2756: LD_INT 70
2758: PPUSH
2759: CALL_OW 67
// CenterOnXY ( 102 , 47 ) ;
2763: LD_INT 102
2765: PPUSH
2766: LD_INT 47
2768: PPUSH
2769: CALL_OW 84
// if Givi then
2773: LD_EXP 6
2777: IFFALSE 2968
// begin ComMoveXY ( Givi , 113 , 162 ) ;
2779: LD_EXP 6
2783: PPUSH
2784: LD_INT 113
2786: PPUSH
2787: LD_INT 162
2789: PPUSH
2790: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
2794: LD_EXP 6
2798: PPUSH
2799: LD_EXP 5
2803: PPUSH
2804: CALL_OW 179
// Say ( Givi , DG-Intro-1 ) ;
2808: LD_EXP 6
2812: PPUSH
2813: LD_STRING DG-Intro-1
2815: PPUSH
2816: CALL_OW 88
// Say ( Givi , DG-Intro-2 ) ;
2820: LD_EXP 6
2824: PPUSH
2825: LD_STRING DG-Intro-2
2827: PPUSH
2828: CALL_OW 88
// CenterOnUnits ( Heike ) ;
2832: LD_EXP 5
2836: PPUSH
2837: CALL_OW 85
// RemoveSeeing ( 102 , 47 , 2 ) ;
2841: LD_INT 102
2843: PPUSH
2844: LD_INT 47
2846: PPUSH
2847: LD_INT 2
2849: PPUSH
2850: CALL_OW 331
// wait ( 0 0$0.3 ) ;
2854: LD_INT 10
2856: PPUSH
2857: CALL_OW 67
// Say ( Heike , DH-Intro-3 ) ;
2861: LD_EXP 5
2865: PPUSH
2866: LD_STRING DH-Intro-3
2868: PPUSH
2869: CALL_OW 88
// if Mike then
2873: LD_EXP 7
2877: IFFALSE 2966
// begin PlaceSeeing ( 92 , 129 , 2 , - 18 ) ;
2879: LD_INT 92
2881: PPUSH
2882: LD_INT 129
2884: PPUSH
2885: LD_INT 2
2887: PPUSH
2888: LD_INT 18
2890: NEG
2891: PPUSH
2892: CALL_OW 330
// CenterOnXY ( 92 , 129 ) ;
2896: LD_INT 92
2898: PPUSH
2899: LD_INT 129
2901: PPUSH
2902: CALL_OW 84
// ComTurnUnit ( [ Mike , Kaia ] , Heike ) ;
2906: LD_EXP 7
2910: PUSH
2911: LD_EXP 10
2915: PUSH
2916: EMPTY
2917: LIST
2918: LIST
2919: PPUSH
2920: LD_EXP 5
2924: PPUSH
2925: CALL_OW 119
// Say ( Mike , DM-Intro-4 ) ;
2929: LD_EXP 7
2933: PPUSH
2934: LD_STRING DM-Intro-4
2936: PPUSH
2937: CALL_OW 88
// Say ( Kaia , DK-Intro-5 ) ;
2941: LD_EXP 10
2945: PPUSH
2946: LD_STRING DK-Intro-5
2948: PPUSH
2949: CALL_OW 88
// RemoveSeeing ( 92 , 129 , 2 ) ;
2953: LD_INT 92
2955: PPUSH
2956: LD_INT 129
2958: PPUSH
2959: LD_INT 2
2961: PPUSH
2962: CALL_OW 331
// end ; end else
2966: GO 3221
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-1 ) then
2968: LD_EXP 16
2972: PPUSH
2973: LD_INT 26
2975: PUSH
2976: LD_INT 1
2978: PUSH
2979: EMPTY
2980: LIST
2981: LIST
2982: PPUSH
2983: CALL_OW 72
2987: PUSH
2988: LD_INT 1
2990: ARRAY
2991: PPUSH
2992: LD_STRING DArm-Intro-b-1
2994: PPUSH
2995: CALL_OW 88
2999: NOT
3000: IFFALSE 3033
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-1 ) ;
3002: LD_EXP 16
3006: PPUSH
3007: LD_INT 26
3009: PUSH
3010: LD_INT 2
3012: PUSH
3013: EMPTY
3014: LIST
3015: LIST
3016: PPUSH
3017: CALL_OW 72
3021: PUSH
3022: LD_INT 1
3024: ARRAY
3025: PPUSH
3026: LD_STRING DArf-Intro-b-1
3028: PPUSH
3029: CALL_OW 88
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-2 ) then
3033: LD_EXP 16
3037: PPUSH
3038: LD_INT 26
3040: PUSH
3041: LD_INT 1
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PPUSH
3048: CALL_OW 72
3052: PUSH
3053: LD_INT 1
3055: ARRAY
3056: PPUSH
3057: LD_STRING DArm-Intro-b-2
3059: PPUSH
3060: CALL_OW 88
3064: NOT
3065: IFFALSE 3098
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-2 ) ;
3067: LD_EXP 16
3071: PPUSH
3072: LD_INT 26
3074: PUSH
3075: LD_INT 2
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: PPUSH
3082: CALL_OW 72
3086: PUSH
3087: LD_INT 1
3089: ARRAY
3090: PPUSH
3091: LD_STRING DArf-Intro-b-2
3093: PPUSH
3094: CALL_OW 88
// if Kaia then
3098: LD_EXP 10
3102: IFFALSE 3116
// Say ( Kaia , DK-Intro-5 ) ;
3104: LD_EXP 10
3108: PPUSH
3109: LD_STRING DK-Intro-5
3111: PPUSH
3112: CALL_OW 88
// PlaceSeeing ( 92 , 129 , 2 , - 18 ) ;
3116: LD_INT 92
3118: PPUSH
3119: LD_INT 129
3121: PPUSH
3122: LD_INT 2
3124: PPUSH
3125: LD_INT 18
3127: NEG
3128: PPUSH
3129: CALL_OW 330
// CenterOnXY ( 92 , 129 ) ;
3133: LD_INT 92
3135: PPUSH
3136: LD_INT 129
3138: PPUSH
3139: CALL_OW 84
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-4 ) then
3143: LD_EXP 16
3147: PPUSH
3148: LD_INT 26
3150: PUSH
3151: LD_INT 1
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: PPUSH
3158: CALL_OW 72
3162: PUSH
3163: LD_INT 1
3165: ARRAY
3166: PPUSH
3167: LD_STRING DArm-Intro-b-4
3169: PPUSH
3170: CALL_OW 88
3174: NOT
3175: IFFALSE 3208
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-4 ) ;
3177: LD_EXP 16
3181: PPUSH
3182: LD_INT 26
3184: PUSH
3185: LD_INT 2
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PPUSH
3192: CALL_OW 72
3196: PUSH
3197: LD_INT 1
3199: ARRAY
3200: PPUSH
3201: LD_STRING DArf-Intro-b-4
3203: PPUSH
3204: CALL_OW 88
// RemoveSeeing ( 92 , 129 , 2 ) ;
3208: LD_INT 92
3210: PPUSH
3211: LD_INT 129
3213: PPUSH
3214: LD_INT 2
3216: PPUSH
3217: CALL_OW 331
// end ; CenterOnUnits ( Heike ) ;
3221: LD_EXP 5
3225: PPUSH
3226: CALL_OW 85
// SayRadio ( Burlak , DB-Intro-6 ) ;
3230: LD_EXP 20
3234: PPUSH
3235: LD_STRING DB-Intro-6
3237: PPUSH
3238: CALL_OW 94
// Say ( Heike , DH-Intro-7 ) ;
3242: LD_EXP 5
3246: PPUSH
3247: LD_STRING DH-Intro-7
3249: PPUSH
3250: CALL_OW 88
// SayRadio ( Burlak , DB-Intro-8 ) ;
3254: LD_EXP 20
3258: PPUSH
3259: LD_STRING DB-Intro-8
3261: PPUSH
3262: CALL_OW 94
// SayRadio ( Burlak , DB-Intro-9 ) ;
3266: LD_EXP 20
3270: PPUSH
3271: LD_STRING DB-Intro-9
3273: PPUSH
3274: CALL_OW 94
// if Givi then
3278: LD_EXP 6
3282: IFFALSE 3310
// begin Say ( Givi , DG-Intro-10 ) ;
3284: LD_EXP 6
3288: PPUSH
3289: LD_STRING DG-Intro-10
3291: PPUSH
3292: CALL_OW 88
// Say ( Kaia , DK-Intro-11 ) ;
3296: LD_EXP 10
3300: PPUSH
3301: LD_STRING DK-Intro-11
3303: PPUSH
3304: CALL_OW 88
// end else
3308: GO 3375
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Intro-b-10 ) then
3310: LD_EXP 16
3314: PPUSH
3315: LD_INT 26
3317: PUSH
3318: LD_INT 1
3320: PUSH
3321: EMPTY
3322: LIST
3323: LIST
3324: PPUSH
3325: CALL_OW 72
3329: PUSH
3330: LD_INT 1
3332: ARRAY
3333: PPUSH
3334: LD_STRING DArm-Intro-b-10
3336: PPUSH
3337: CALL_OW 88
3341: NOT
3342: IFFALSE 3375
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Intro-b-10 ) ;
3344: LD_EXP 16
3348: PPUSH
3349: LD_INT 26
3351: PUSH
3352: LD_INT 2
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PPUSH
3359: CALL_OW 72
3363: PUSH
3364: LD_INT 1
3366: ARRAY
3367: PPUSH
3368: LD_STRING DArf-Intro-b-10
3370: PPUSH
3371: CALL_OW 88
// Say ( Mike , DM-Intro-12 ) ;
3375: LD_EXP 7
3379: PPUSH
3380: LD_STRING DM-Intro-12
3382: PPUSH
3383: CALL_OW 88
// Say ( Kurt , DKs-Intro-13 ) ;
3387: LD_EXP 14
3391: PPUSH
3392: LD_STRING DKs-Intro-13
3394: PPUSH
3395: CALL_OW 88
// Say ( Kamil , DKam-Intro-14 ) ;
3399: LD_EXP 9
3403: PPUSH
3404: LD_STRING DKam-Intro-14
3406: PPUSH
3407: CALL_OW 88
// case Query ( QSurrender ) of 1 :
3411: LD_STRING QSurrender
3413: PPUSH
3414: CALL_OW 97
3418: PUSH
3419: LD_INT 1
3421: DOUBLE
3422: EQUAL
3423: IFTRUE 3427
3425: GO 3446
3427: POP
// begin Say ( Heike , DH-Intro-16 ) ;
3428: LD_EXP 5
3432: PPUSH
3433: LD_STRING DH-Intro-16
3435: PPUSH
3436: CALL_OW 88
// missionEnd ;
3440: CALL 3632 0 0
// end ; 2 :
3444: GO 3490
3446: LD_INT 2
3448: DOUBLE
3449: EQUAL
3450: IFTRUE 3454
3452: GO 3489
3454: POP
// begin Say ( Heike , DH-Intro-a-16 ) ;
3455: LD_EXP 5
3459: PPUSH
3460: LD_STRING DH-Intro-a-16
3462: PPUSH
3463: CALL_OW 88
// SayRadio ( Burlak , DB-Intro-a-17 ) ;
3467: LD_EXP 20
3471: PPUSH
3472: LD_STRING DB-Intro-a-17
3474: PPUSH
3475: CALL_OW 94
// startAttackOnHeike := true ;
3479: LD_ADDR_EXP 4
3483: PUSH
3484: LD_INT 1
3486: ST_TO_ADDR
// end ; end ;
3487: GO 3490
3489: POP
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
3490: LD_ADDR_VAR 0 2
3494: PUSH
3495: LD_INT 22
3497: PUSH
3498: LD_INT 2
3500: PUSH
3501: EMPTY
3502: LIST
3503: LIST
3504: PPUSH
3505: CALL_OW 69
3509: PUSH
3510: FOR_IN
3511: IFFALSE 3530
// ComAgressiveMove ( i , 98 , 143 ) ;
3513: LD_VAR 0 2
3517: PPUSH
3518: LD_INT 98
3520: PPUSH
3521: LD_INT 143
3523: PPUSH
3524: CALL_OW 114
3528: GO 3510
3530: POP
3531: POP
// ComAgressiveMove ( Heike , 84 , 116 ) ;
3532: LD_EXP 5
3536: PPUSH
3537: LD_INT 84
3539: PPUSH
3540: LD_INT 116
3542: PPUSH
3543: CALL_OW 114
// CenterOnXY ( 98 , 143 ) ;
3547: LD_INT 98
3549: PPUSH
3550: LD_INT 143
3552: PPUSH
3553: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
3557: LD_INT 35
3559: PPUSH
3560: CALL_OW 67
// until IsDead ( Heike ) ;
3564: LD_EXP 5
3568: PPUSH
3569: CALL_OW 301
3573: IFFALSE 3557
// wait ( 0 0$3 ) ;
3575: LD_INT 105
3577: PPUSH
3578: CALL_OW 67
// YouLost ( HeikeNoSurrender ) ;
3582: LD_STRING HeikeNoSurrender
3584: PPUSH
3585: CALL_OW 104
// end ;
3589: LD_VAR 0 1
3593: RET
// every 0 0$1 trigger GetLives ( Heike ) < 900 do
3594: LD_EXP 5
3598: PPUSH
3599: CALL_OW 256
3603: PUSH
3604: LD_INT 900
3606: LESS
3607: IFFALSE 3631
3609: GO 3611
3611: DISABLE
// begin wait ( 0 0$3 ) ;
3612: LD_INT 105
3614: PPUSH
3615: CALL_OW 67
// SetLives ( Heike , 100 ) ;
3619: LD_EXP 5
3623: PPUSH
3624: LD_INT 100
3626: PPUSH
3627: CALL_OW 234
// end ;
3631: END
// function MissionEnd ( ) ; begin
3632: LD_INT 0
3634: PPUSH
// ChangeMap ( 1 , %_cont ) ;
3635: LD_INT 1
3637: PPUSH
3638: LD_STRING %_cont
3640: PPUSH
3641: CALL_OW 340
// end ; end_of_file
3645: LD_VAR 0 1
3649: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
3650: LD_INT 0
3652: PPUSH
3653: PPUSH
// if exist_mode then
3654: LD_VAR 0 2
3658: IFFALSE 3683
// unit := CreateCharacter ( prefix & ident ) else
3660: LD_ADDR_VAR 0 5
3664: PUSH
3665: LD_VAR 0 3
3669: PUSH
3670: LD_VAR 0 1
3674: STR
3675: PPUSH
3676: CALL_OW 34
3680: ST_TO_ADDR
3681: GO 3698
// unit := NewCharacter ( ident ) ;
3683: LD_ADDR_VAR 0 5
3687: PUSH
3688: LD_VAR 0 1
3692: PPUSH
3693: CALL_OW 25
3697: ST_TO_ADDR
// result := unit ;
3698: LD_ADDR_VAR 0 4
3702: PUSH
3703: LD_VAR 0 5
3707: ST_TO_ADDR
// end ;
3708: LD_VAR 0 4
3712: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3713: LD_INT 0
3715: PPUSH
3716: PPUSH
// if not side or not nation then
3717: LD_VAR 0 1
3721: NOT
3722: PUSH
3723: LD_VAR 0 2
3727: NOT
3728: OR
3729: IFFALSE 3733
// exit ;
3731: GO 4501
// case nation of nation_american :
3733: LD_VAR 0 2
3737: PUSH
3738: LD_INT 1
3740: DOUBLE
3741: EQUAL
3742: IFTRUE 3746
3744: GO 3960
3746: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
3747: LD_ADDR_VAR 0 4
3751: PUSH
3752: LD_INT 35
3754: PUSH
3755: LD_INT 45
3757: PUSH
3758: LD_INT 46
3760: PUSH
3761: LD_INT 47
3763: PUSH
3764: LD_INT 82
3766: PUSH
3767: LD_INT 83
3769: PUSH
3770: LD_INT 84
3772: PUSH
3773: LD_INT 85
3775: PUSH
3776: LD_INT 86
3778: PUSH
3779: LD_INT 1
3781: PUSH
3782: LD_INT 2
3784: PUSH
3785: LD_INT 6
3787: PUSH
3788: LD_INT 15
3790: PUSH
3791: LD_INT 16
3793: PUSH
3794: LD_INT 7
3796: PUSH
3797: LD_INT 12
3799: PUSH
3800: LD_INT 13
3802: PUSH
3803: LD_INT 10
3805: PUSH
3806: LD_INT 14
3808: PUSH
3809: LD_INT 20
3811: PUSH
3812: LD_INT 21
3814: PUSH
3815: LD_INT 22
3817: PUSH
3818: LD_INT 25
3820: PUSH
3821: LD_INT 32
3823: PUSH
3824: LD_INT 27
3826: PUSH
3827: LD_INT 36
3829: PUSH
3830: LD_INT 69
3832: PUSH
3833: LD_INT 39
3835: PUSH
3836: LD_INT 34
3838: PUSH
3839: LD_INT 40
3841: PUSH
3842: LD_INT 48
3844: PUSH
3845: LD_INT 49
3847: PUSH
3848: LD_INT 50
3850: PUSH
3851: LD_INT 51
3853: PUSH
3854: LD_INT 52
3856: PUSH
3857: LD_INT 53
3859: PUSH
3860: LD_INT 54
3862: PUSH
3863: LD_INT 55
3865: PUSH
3866: LD_INT 56
3868: PUSH
3869: LD_INT 57
3871: PUSH
3872: LD_INT 58
3874: PUSH
3875: LD_INT 59
3877: PUSH
3878: LD_INT 60
3880: PUSH
3881: LD_INT 61
3883: PUSH
3884: LD_INT 62
3886: PUSH
3887: LD_INT 80
3889: PUSH
3890: LD_INT 82
3892: PUSH
3893: LD_INT 83
3895: PUSH
3896: LD_INT 84
3898: PUSH
3899: LD_INT 85
3901: PUSH
3902: LD_INT 86
3904: PUSH
3905: EMPTY
3906: LIST
3907: LIST
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: LIST
3916: LIST
3917: LIST
3918: LIST
3919: LIST
3920: LIST
3921: LIST
3922: LIST
3923: LIST
3924: LIST
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: LIST
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: LIST
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: LIST
3951: LIST
3952: LIST
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: ST_TO_ADDR
3958: GO 4425
3960: LD_INT 2
3962: DOUBLE
3963: EQUAL
3964: IFTRUE 3968
3966: GO 4194
3968: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3969: LD_ADDR_VAR 0 4
3973: PUSH
3974: LD_INT 35
3976: PUSH
3977: LD_INT 45
3979: PUSH
3980: LD_INT 46
3982: PUSH
3983: LD_INT 47
3985: PUSH
3986: LD_INT 82
3988: PUSH
3989: LD_INT 83
3991: PUSH
3992: LD_INT 84
3994: PUSH
3995: LD_INT 85
3997: PUSH
3998: LD_INT 87
4000: PUSH
4001: LD_INT 70
4003: PUSH
4004: LD_INT 1
4006: PUSH
4007: LD_INT 11
4009: PUSH
4010: LD_INT 3
4012: PUSH
4013: LD_INT 4
4015: PUSH
4016: LD_INT 5
4018: PUSH
4019: LD_INT 6
4021: PUSH
4022: LD_INT 15
4024: PUSH
4025: LD_INT 18
4027: PUSH
4028: LD_INT 7
4030: PUSH
4031: LD_INT 17
4033: PUSH
4034: LD_INT 8
4036: PUSH
4037: LD_INT 20
4039: PUSH
4040: LD_INT 21
4042: PUSH
4043: LD_INT 22
4045: PUSH
4046: LD_INT 72
4048: PUSH
4049: LD_INT 26
4051: PUSH
4052: LD_INT 69
4054: PUSH
4055: LD_INT 39
4057: PUSH
4058: LD_INT 40
4060: PUSH
4061: LD_INT 41
4063: PUSH
4064: LD_INT 42
4066: PUSH
4067: LD_INT 43
4069: PUSH
4070: LD_INT 48
4072: PUSH
4073: LD_INT 49
4075: PUSH
4076: LD_INT 50
4078: PUSH
4079: LD_INT 51
4081: PUSH
4082: LD_INT 52
4084: PUSH
4085: LD_INT 53
4087: PUSH
4088: LD_INT 54
4090: PUSH
4091: LD_INT 55
4093: PUSH
4094: LD_INT 56
4096: PUSH
4097: LD_INT 60
4099: PUSH
4100: LD_INT 61
4102: PUSH
4103: LD_INT 62
4105: PUSH
4106: LD_INT 66
4108: PUSH
4109: LD_INT 67
4111: PUSH
4112: LD_INT 68
4114: PUSH
4115: LD_INT 81
4117: PUSH
4118: LD_INT 82
4120: PUSH
4121: LD_INT 83
4123: PUSH
4124: LD_INT 84
4126: PUSH
4127: LD_INT 85
4129: PUSH
4130: LD_INT 87
4132: PUSH
4133: LD_INT 88
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: LIST
4140: LIST
4141: LIST
4142: LIST
4143: LIST
4144: LIST
4145: LIST
4146: LIST
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: LIST
4152: LIST
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: LIST
4170: LIST
4171: LIST
4172: LIST
4173: LIST
4174: LIST
4175: LIST
4176: LIST
4177: LIST
4178: LIST
4179: LIST
4180: LIST
4181: LIST
4182: LIST
4183: LIST
4184: LIST
4185: LIST
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: LIST
4191: ST_TO_ADDR
4192: GO 4425
4194: LD_INT 3
4196: DOUBLE
4197: EQUAL
4198: IFTRUE 4202
4200: GO 4424
4202: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
4203: LD_ADDR_VAR 0 4
4207: PUSH
4208: LD_INT 46
4210: PUSH
4211: LD_INT 47
4213: PUSH
4214: LD_INT 1
4216: PUSH
4217: LD_INT 2
4219: PUSH
4220: LD_INT 82
4222: PUSH
4223: LD_INT 83
4225: PUSH
4226: LD_INT 84
4228: PUSH
4229: LD_INT 85
4231: PUSH
4232: LD_INT 86
4234: PUSH
4235: LD_INT 11
4237: PUSH
4238: LD_INT 9
4240: PUSH
4241: LD_INT 20
4243: PUSH
4244: LD_INT 19
4246: PUSH
4247: LD_INT 21
4249: PUSH
4250: LD_INT 24
4252: PUSH
4253: LD_INT 22
4255: PUSH
4256: LD_INT 25
4258: PUSH
4259: LD_INT 28
4261: PUSH
4262: LD_INT 29
4264: PUSH
4265: LD_INT 30
4267: PUSH
4268: LD_INT 31
4270: PUSH
4271: LD_INT 37
4273: PUSH
4274: LD_INT 38
4276: PUSH
4277: LD_INT 32
4279: PUSH
4280: LD_INT 27
4282: PUSH
4283: LD_INT 33
4285: PUSH
4286: LD_INT 69
4288: PUSH
4289: LD_INT 39
4291: PUSH
4292: LD_INT 34
4294: PUSH
4295: LD_INT 40
4297: PUSH
4298: LD_INT 71
4300: PUSH
4301: LD_INT 23
4303: PUSH
4304: LD_INT 44
4306: PUSH
4307: LD_INT 48
4309: PUSH
4310: LD_INT 49
4312: PUSH
4313: LD_INT 50
4315: PUSH
4316: LD_INT 51
4318: PUSH
4319: LD_INT 52
4321: PUSH
4322: LD_INT 53
4324: PUSH
4325: LD_INT 54
4327: PUSH
4328: LD_INT 55
4330: PUSH
4331: LD_INT 56
4333: PUSH
4334: LD_INT 57
4336: PUSH
4337: LD_INT 58
4339: PUSH
4340: LD_INT 59
4342: PUSH
4343: LD_INT 63
4345: PUSH
4346: LD_INT 64
4348: PUSH
4349: LD_INT 65
4351: PUSH
4352: LD_INT 82
4354: PUSH
4355: LD_INT 83
4357: PUSH
4358: LD_INT 84
4360: PUSH
4361: LD_INT 85
4363: PUSH
4364: LD_INT 86
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: LIST
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: LIST
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: LIST
4388: LIST
4389: LIST
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: LIST
4400: LIST
4401: LIST
4402: LIST
4403: LIST
4404: LIST
4405: LIST
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: LIST
4421: ST_TO_ADDR
4422: GO 4425
4424: POP
// if state > - 1 and state < 3 then
4425: LD_VAR 0 3
4429: PUSH
4430: LD_INT 1
4432: NEG
4433: GREATER
4434: PUSH
4435: LD_VAR 0 3
4439: PUSH
4440: LD_INT 3
4442: LESS
4443: AND
4444: IFFALSE 4501
// for i in result do
4446: LD_ADDR_VAR 0 5
4450: PUSH
4451: LD_VAR 0 4
4455: PUSH
4456: FOR_IN
4457: IFFALSE 4499
// if GetTech ( i , side ) <> state then
4459: LD_VAR 0 5
4463: PPUSH
4464: LD_VAR 0 1
4468: PPUSH
4469: CALL_OW 321
4473: PUSH
4474: LD_VAR 0 3
4478: NONEQUAL
4479: IFFALSE 4497
// result := result diff i ;
4481: LD_ADDR_VAR 0 4
4485: PUSH
4486: LD_VAR 0 4
4490: PUSH
4491: LD_VAR 0 5
4495: DIFF
4496: ST_TO_ADDR
4497: GO 4456
4499: POP
4500: POP
// end ;
4501: LD_VAR 0 4
4505: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
4506: LD_INT 0
4508: PPUSH
4509: PPUSH
4510: PPUSH
// result := true ;
4511: LD_ADDR_VAR 0 3
4515: PUSH
4516: LD_INT 1
4518: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
4519: LD_ADDR_VAR 0 5
4523: PUSH
4524: LD_VAR 0 2
4528: PPUSH
4529: CALL_OW 480
4533: ST_TO_ADDR
// if not tmp then
4534: LD_VAR 0 5
4538: NOT
4539: IFFALSE 4543
// exit ;
4541: GO 4592
// for i in tmp do
4543: LD_ADDR_VAR 0 4
4547: PUSH
4548: LD_VAR 0 5
4552: PUSH
4553: FOR_IN
4554: IFFALSE 4590
// if GetTech ( i , side ) <> state_researched then
4556: LD_VAR 0 4
4560: PPUSH
4561: LD_VAR 0 1
4565: PPUSH
4566: CALL_OW 321
4570: PUSH
4571: LD_INT 2
4573: NONEQUAL
4574: IFFALSE 4588
// begin result := false ;
4576: LD_ADDR_VAR 0 3
4580: PUSH
4581: LD_INT 0
4583: ST_TO_ADDR
// exit ;
4584: POP
4585: POP
4586: GO 4592
// end ;
4588: GO 4553
4590: POP
4591: POP
// end ;
4592: LD_VAR 0 3
4596: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
4597: LD_INT 0
4599: PPUSH
4600: PPUSH
4601: PPUSH
4602: PPUSH
4603: PPUSH
4604: PPUSH
4605: PPUSH
4606: PPUSH
4607: PPUSH
4608: PPUSH
4609: PPUSH
4610: PPUSH
4611: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
4612: LD_VAR 0 1
4616: NOT
4617: PUSH
4618: LD_VAR 0 1
4622: PPUSH
4623: CALL_OW 257
4627: PUSH
4628: LD_INT 9
4630: NONEQUAL
4631: OR
4632: IFFALSE 4636
// exit ;
4634: GO 5209
// side := GetSide ( unit ) ;
4636: LD_ADDR_VAR 0 9
4640: PUSH
4641: LD_VAR 0 1
4645: PPUSH
4646: CALL_OW 255
4650: ST_TO_ADDR
// tech_space := tech_spacanom ;
4651: LD_ADDR_VAR 0 12
4655: PUSH
4656: LD_INT 29
4658: ST_TO_ADDR
// tech_time := tech_taurad ;
4659: LD_ADDR_VAR 0 13
4663: PUSH
4664: LD_INT 28
4666: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4667: LD_ADDR_VAR 0 11
4671: PUSH
4672: LD_VAR 0 1
4676: PPUSH
4677: CALL_OW 310
4681: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4682: LD_VAR 0 11
4686: PPUSH
4687: CALL_OW 247
4691: PUSH
4692: LD_INT 2
4694: EQUAL
4695: IFFALSE 4699
// exit ;
4697: GO 5209
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4699: LD_ADDR_VAR 0 8
4703: PUSH
4704: LD_INT 81
4706: PUSH
4707: LD_VAR 0 9
4711: PUSH
4712: EMPTY
4713: LIST
4714: LIST
4715: PUSH
4716: LD_INT 3
4718: PUSH
4719: LD_INT 21
4721: PUSH
4722: LD_INT 3
4724: PUSH
4725: EMPTY
4726: LIST
4727: LIST
4728: PUSH
4729: EMPTY
4730: LIST
4731: LIST
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: PPUSH
4737: CALL_OW 69
4741: ST_TO_ADDR
// if not tmp then
4742: LD_VAR 0 8
4746: NOT
4747: IFFALSE 4751
// exit ;
4749: GO 5209
// if in_unit then
4751: LD_VAR 0 11
4755: IFFALSE 4779
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4757: LD_ADDR_VAR 0 10
4761: PUSH
4762: LD_VAR 0 8
4766: PPUSH
4767: LD_VAR 0 11
4771: PPUSH
4772: CALL_OW 74
4776: ST_TO_ADDR
4777: GO 4799
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4779: LD_ADDR_VAR 0 10
4783: PUSH
4784: LD_VAR 0 8
4788: PPUSH
4789: LD_VAR 0 1
4793: PPUSH
4794: CALL_OW 74
4798: ST_TO_ADDR
// if not enemy then
4799: LD_VAR 0 10
4803: NOT
4804: IFFALSE 4808
// exit ;
4806: GO 5209
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4808: LD_VAR 0 11
4812: PUSH
4813: LD_VAR 0 11
4817: PPUSH
4818: LD_VAR 0 10
4822: PPUSH
4823: CALL_OW 296
4827: PUSH
4828: LD_INT 13
4830: GREATER
4831: AND
4832: PUSH
4833: LD_VAR 0 1
4837: PPUSH
4838: LD_VAR 0 10
4842: PPUSH
4843: CALL_OW 296
4847: PUSH
4848: LD_INT 12
4850: GREATER
4851: OR
4852: IFFALSE 4856
// exit ;
4854: GO 5209
// missile := [ 1 ] ;
4856: LD_ADDR_VAR 0 14
4860: PUSH
4861: LD_INT 1
4863: PUSH
4864: EMPTY
4865: LIST
4866: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4867: LD_VAR 0 9
4871: PPUSH
4872: LD_VAR 0 12
4876: PPUSH
4877: CALL_OW 325
4881: IFFALSE 4910
// missile := Replace ( missile , missile + 1 , 2 ) ;
4883: LD_ADDR_VAR 0 14
4887: PUSH
4888: LD_VAR 0 14
4892: PPUSH
4893: LD_VAR 0 14
4897: PUSH
4898: LD_INT 1
4900: PLUS
4901: PPUSH
4902: LD_INT 2
4904: PPUSH
4905: CALL_OW 1
4909: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4910: LD_VAR 0 9
4914: PPUSH
4915: LD_VAR 0 13
4919: PPUSH
4920: CALL_OW 325
4924: PUSH
4925: LD_VAR 0 10
4929: PPUSH
4930: CALL_OW 255
4934: PPUSH
4935: LD_VAR 0 13
4939: PPUSH
4940: CALL_OW 325
4944: NOT
4945: AND
4946: IFFALSE 4975
// missile := Replace ( missile , missile + 1 , 3 ) ;
4948: LD_ADDR_VAR 0 14
4952: PUSH
4953: LD_VAR 0 14
4957: PPUSH
4958: LD_VAR 0 14
4962: PUSH
4963: LD_INT 1
4965: PLUS
4966: PPUSH
4967: LD_INT 3
4969: PPUSH
4970: CALL_OW 1
4974: ST_TO_ADDR
// if missile < 2 then
4975: LD_VAR 0 14
4979: PUSH
4980: LD_INT 2
4982: LESS
4983: IFFALSE 4987
// exit ;
4985: GO 5209
// x := GetX ( enemy ) ;
4987: LD_ADDR_VAR 0 4
4991: PUSH
4992: LD_VAR 0 10
4996: PPUSH
4997: CALL_OW 250
5001: ST_TO_ADDR
// y := GetY ( enemy ) ;
5002: LD_ADDR_VAR 0 5
5006: PUSH
5007: LD_VAR 0 10
5011: PPUSH
5012: CALL_OW 251
5016: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
5017: LD_ADDR_VAR 0 6
5021: PUSH
5022: LD_VAR 0 4
5026: PUSH
5027: LD_INT 1
5029: NEG
5030: PPUSH
5031: LD_INT 1
5033: PPUSH
5034: CALL_OW 12
5038: PLUS
5039: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
5040: LD_ADDR_VAR 0 7
5044: PUSH
5045: LD_VAR 0 5
5049: PUSH
5050: LD_INT 1
5052: NEG
5053: PPUSH
5054: LD_INT 1
5056: PPUSH
5057: CALL_OW 12
5061: PLUS
5062: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5063: LD_VAR 0 6
5067: PPUSH
5068: LD_VAR 0 7
5072: PPUSH
5073: CALL_OW 488
5077: NOT
5078: IFFALSE 5100
// begin _x := x ;
5080: LD_ADDR_VAR 0 6
5084: PUSH
5085: LD_VAR 0 4
5089: ST_TO_ADDR
// _y := y ;
5090: LD_ADDR_VAR 0 7
5094: PUSH
5095: LD_VAR 0 5
5099: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
5100: LD_ADDR_VAR 0 3
5104: PUSH
5105: LD_INT 1
5107: PPUSH
5108: LD_VAR 0 14
5112: PPUSH
5113: CALL_OW 12
5117: ST_TO_ADDR
// case i of 1 :
5118: LD_VAR 0 3
5122: PUSH
5123: LD_INT 1
5125: DOUBLE
5126: EQUAL
5127: IFTRUE 5131
5129: GO 5148
5131: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
5132: LD_VAR 0 1
5136: PPUSH
5137: LD_VAR 0 10
5141: PPUSH
5142: CALL_OW 115
5146: GO 5209
5148: LD_INT 2
5150: DOUBLE
5151: EQUAL
5152: IFTRUE 5156
5154: GO 5178
5156: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
5157: LD_VAR 0 1
5161: PPUSH
5162: LD_VAR 0 6
5166: PPUSH
5167: LD_VAR 0 7
5171: PPUSH
5172: CALL_OW 153
5176: GO 5209
5178: LD_INT 3
5180: DOUBLE
5181: EQUAL
5182: IFTRUE 5186
5184: GO 5208
5186: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
5187: LD_VAR 0 1
5191: PPUSH
5192: LD_VAR 0 6
5196: PPUSH
5197: LD_VAR 0 7
5201: PPUSH
5202: CALL_OW 154
5206: GO 5209
5208: POP
// end ;
5209: LD_VAR 0 2
5213: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
5214: LD_INT 0
5216: PPUSH
5217: PPUSH
5218: PPUSH
5219: PPUSH
5220: PPUSH
5221: PPUSH
// if not unit or not building then
5222: LD_VAR 0 1
5226: NOT
5227: PUSH
5228: LD_VAR 0 2
5232: NOT
5233: OR
5234: IFFALSE 5238
// exit ;
5236: GO 5396
// x := GetX ( building ) ;
5238: LD_ADDR_VAR 0 5
5242: PUSH
5243: LD_VAR 0 2
5247: PPUSH
5248: CALL_OW 250
5252: ST_TO_ADDR
// y := GetY ( building ) ;
5253: LD_ADDR_VAR 0 6
5257: PUSH
5258: LD_VAR 0 2
5262: PPUSH
5263: CALL_OW 251
5267: ST_TO_ADDR
// for i = 0 to 5 do
5268: LD_ADDR_VAR 0 4
5272: PUSH
5273: DOUBLE
5274: LD_INT 0
5276: DEC
5277: ST_TO_ADDR
5278: LD_INT 5
5280: PUSH
5281: FOR_TO
5282: IFFALSE 5394
// begin _x := ShiftX ( x , i , 3 ) ;
5284: LD_ADDR_VAR 0 7
5288: PUSH
5289: LD_VAR 0 5
5293: PPUSH
5294: LD_VAR 0 4
5298: PPUSH
5299: LD_INT 3
5301: PPUSH
5302: CALL_OW 272
5306: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
5307: LD_ADDR_VAR 0 8
5311: PUSH
5312: LD_VAR 0 6
5316: PPUSH
5317: LD_VAR 0 4
5321: PPUSH
5322: LD_INT 3
5324: PPUSH
5325: CALL_OW 273
5329: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5330: LD_VAR 0 7
5334: PPUSH
5335: LD_VAR 0 8
5339: PPUSH
5340: CALL_OW 488
5344: NOT
5345: IFFALSE 5349
// continue ;
5347: GO 5281
// if HexInfo ( _x , _y ) = 0 then
5349: LD_VAR 0 7
5353: PPUSH
5354: LD_VAR 0 8
5358: PPUSH
5359: CALL_OW 428
5363: PUSH
5364: LD_INT 0
5366: EQUAL
5367: IFFALSE 5392
// begin ComMoveXY ( unit , _x , _y ) ;
5369: LD_VAR 0 1
5373: PPUSH
5374: LD_VAR 0 7
5378: PPUSH
5379: LD_VAR 0 8
5383: PPUSH
5384: CALL_OW 111
// exit ;
5388: POP
5389: POP
5390: GO 5396
// end ; end ;
5392: GO 5281
5394: POP
5395: POP
// end ;
5396: LD_VAR 0 3
5400: RET
// export function ScanBase ( side , base_area ) ; begin
5401: LD_INT 0
5403: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
5404: LD_ADDR_VAR 0 3
5408: PUSH
5409: LD_VAR 0 2
5413: PPUSH
5414: LD_INT 81
5416: PUSH
5417: LD_VAR 0 1
5421: PUSH
5422: EMPTY
5423: LIST
5424: LIST
5425: PPUSH
5426: CALL_OW 70
5430: ST_TO_ADDR
// end ;
5431: LD_VAR 0 3
5435: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
5436: LD_INT 0
5438: PPUSH
5439: PPUSH
5440: PPUSH
5441: PPUSH
// result := false ;
5442: LD_ADDR_VAR 0 2
5446: PUSH
5447: LD_INT 0
5449: ST_TO_ADDR
// side := GetSide ( unit ) ;
5450: LD_ADDR_VAR 0 3
5454: PUSH
5455: LD_VAR 0 1
5459: PPUSH
5460: CALL_OW 255
5464: ST_TO_ADDR
// nat := GetNation ( unit ) ;
5465: LD_ADDR_VAR 0 4
5469: PUSH
5470: LD_VAR 0 1
5474: PPUSH
5475: CALL_OW 248
5479: ST_TO_ADDR
// case nat of 1 :
5480: LD_VAR 0 4
5484: PUSH
5485: LD_INT 1
5487: DOUBLE
5488: EQUAL
5489: IFTRUE 5493
5491: GO 5504
5493: POP
// tech := tech_lassight ; 2 :
5494: LD_ADDR_VAR 0 5
5498: PUSH
5499: LD_INT 12
5501: ST_TO_ADDR
5502: GO 5543
5504: LD_INT 2
5506: DOUBLE
5507: EQUAL
5508: IFTRUE 5512
5510: GO 5523
5512: POP
// tech := tech_mortar ; 3 :
5513: LD_ADDR_VAR 0 5
5517: PUSH
5518: LD_INT 41
5520: ST_TO_ADDR
5521: GO 5543
5523: LD_INT 3
5525: DOUBLE
5526: EQUAL
5527: IFTRUE 5531
5529: GO 5542
5531: POP
// tech := tech_bazooka ; end ;
5532: LD_ADDR_VAR 0 5
5536: PUSH
5537: LD_INT 44
5539: ST_TO_ADDR
5540: GO 5543
5542: POP
// if Researched ( side , tech ) then
5543: LD_VAR 0 3
5547: PPUSH
5548: LD_VAR 0 5
5552: PPUSH
5553: CALL_OW 325
5557: IFFALSE 5584
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
5559: LD_ADDR_VAR 0 2
5563: PUSH
5564: LD_INT 5
5566: PUSH
5567: LD_INT 8
5569: PUSH
5570: LD_INT 9
5572: PUSH
5573: EMPTY
5574: LIST
5575: LIST
5576: LIST
5577: PUSH
5578: LD_VAR 0 4
5582: ARRAY
5583: ST_TO_ADDR
// end ;
5584: LD_VAR 0 2
5588: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
5589: LD_INT 0
5591: PPUSH
5592: PPUSH
5593: PPUSH
// if not mines then
5594: LD_VAR 0 2
5598: NOT
5599: IFFALSE 5603
// exit ;
5601: GO 5747
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5603: LD_ADDR_VAR 0 5
5607: PUSH
5608: LD_INT 81
5610: PUSH
5611: LD_VAR 0 1
5615: PUSH
5616: EMPTY
5617: LIST
5618: LIST
5619: PUSH
5620: LD_INT 3
5622: PUSH
5623: LD_INT 21
5625: PUSH
5626: LD_INT 3
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: PUSH
5633: EMPTY
5634: LIST
5635: LIST
5636: PUSH
5637: EMPTY
5638: LIST
5639: LIST
5640: PPUSH
5641: CALL_OW 69
5645: ST_TO_ADDR
// for i in mines do
5646: LD_ADDR_VAR 0 4
5650: PUSH
5651: LD_VAR 0 2
5655: PUSH
5656: FOR_IN
5657: IFFALSE 5745
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5659: LD_VAR 0 4
5663: PUSH
5664: LD_INT 1
5666: ARRAY
5667: PPUSH
5668: LD_VAR 0 4
5672: PUSH
5673: LD_INT 2
5675: ARRAY
5676: PPUSH
5677: CALL_OW 458
5681: NOT
5682: IFFALSE 5686
// continue ;
5684: GO 5656
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5686: LD_VAR 0 4
5690: PUSH
5691: LD_INT 1
5693: ARRAY
5694: PPUSH
5695: LD_VAR 0 4
5699: PUSH
5700: LD_INT 2
5702: ARRAY
5703: PPUSH
5704: CALL_OW 428
5708: PUSH
5709: LD_VAR 0 5
5713: IN
5714: IFFALSE 5743
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5716: LD_VAR 0 4
5720: PUSH
5721: LD_INT 1
5723: ARRAY
5724: PPUSH
5725: LD_VAR 0 4
5729: PUSH
5730: LD_INT 2
5732: ARRAY
5733: PPUSH
5734: LD_VAR 0 1
5738: PPUSH
5739: CALL_OW 456
// end ;
5743: GO 5656
5745: POP
5746: POP
// end ;
5747: LD_VAR 0 3
5751: RET
// export function Count ( array ) ; begin
5752: LD_INT 0
5754: PPUSH
// result := array + 0 ;
5755: LD_ADDR_VAR 0 2
5759: PUSH
5760: LD_VAR 0 1
5764: PUSH
5765: LD_INT 0
5767: PLUS
5768: ST_TO_ADDR
// end ;
5769: LD_VAR 0 2
5773: RET
// export function IsEmpty ( building ) ; begin
5774: LD_INT 0
5776: PPUSH
// if not building then
5777: LD_VAR 0 1
5781: NOT
5782: IFFALSE 5786
// exit ;
5784: GO 5829
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5786: LD_ADDR_VAR 0 2
5790: PUSH
5791: LD_VAR 0 1
5795: PUSH
5796: LD_INT 22
5798: PUSH
5799: LD_VAR 0 1
5803: PPUSH
5804: CALL_OW 255
5808: PUSH
5809: EMPTY
5810: LIST
5811: LIST
5812: PUSH
5813: LD_INT 58
5815: PUSH
5816: EMPTY
5817: LIST
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: PPUSH
5823: CALL_OW 69
5827: IN
5828: ST_TO_ADDR
// end ;
5829: LD_VAR 0 2
5833: RET
// export function IsNotFull ( building ) ; var places ; begin
5834: LD_INT 0
5836: PPUSH
5837: PPUSH
// if not building then
5838: LD_VAR 0 1
5842: NOT
5843: IFFALSE 5847
// exit ;
5845: GO 6018
// result := false ;
5847: LD_ADDR_VAR 0 2
5851: PUSH
5852: LD_INT 0
5854: ST_TO_ADDR
// places := 0 ;
5855: LD_ADDR_VAR 0 3
5859: PUSH
5860: LD_INT 0
5862: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
5863: LD_VAR 0 1
5867: PPUSH
5868: CALL_OW 266
5872: PUSH
5873: LD_INT 0
5875: DOUBLE
5876: EQUAL
5877: IFTRUE 5935
5879: LD_INT 1
5881: DOUBLE
5882: EQUAL
5883: IFTRUE 5935
5885: LD_INT 6
5887: DOUBLE
5888: EQUAL
5889: IFTRUE 5935
5891: LD_INT 7
5893: DOUBLE
5894: EQUAL
5895: IFTRUE 5935
5897: LD_INT 8
5899: DOUBLE
5900: EQUAL
5901: IFTRUE 5935
5903: LD_INT 4
5905: DOUBLE
5906: EQUAL
5907: IFTRUE 5935
5909: LD_INT 5
5911: DOUBLE
5912: EQUAL
5913: IFTRUE 5935
5915: LD_INT 2
5917: DOUBLE
5918: EQUAL
5919: IFTRUE 5935
5921: LD_INT 3
5923: DOUBLE
5924: EQUAL
5925: IFTRUE 5935
5927: LD_INT 35
5929: DOUBLE
5930: EQUAL
5931: IFTRUE 5935
5933: GO 5946
5935: POP
// places := 6 ; b_bunker , b_breastwork :
5936: LD_ADDR_VAR 0 3
5940: PUSH
5941: LD_INT 6
5943: ST_TO_ADDR
5944: GO 5991
5946: LD_INT 32
5948: DOUBLE
5949: EQUAL
5950: IFTRUE 5960
5952: LD_INT 31
5954: DOUBLE
5955: EQUAL
5956: IFTRUE 5960
5958: GO 5971
5960: POP
// places := 1 ; b_control_tower :
5961: LD_ADDR_VAR 0 3
5965: PUSH
5966: LD_INT 1
5968: ST_TO_ADDR
5969: GO 5991
5971: LD_INT 36
5973: DOUBLE
5974: EQUAL
5975: IFTRUE 5979
5977: GO 5990
5979: POP
// places := 3 ; end ;
5980: LD_ADDR_VAR 0 3
5984: PUSH
5985: LD_INT 3
5987: ST_TO_ADDR
5988: GO 5991
5990: POP
// if places then
5991: LD_VAR 0 3
5995: IFFALSE 6018
// result := UnitsInside ( building ) < places ;
5997: LD_ADDR_VAR 0 2
6001: PUSH
6002: LD_VAR 0 1
6006: PPUSH
6007: CALL_OW 313
6011: PUSH
6012: LD_VAR 0 3
6016: LESS
6017: ST_TO_ADDR
// end ;
6018: LD_VAR 0 2
6022: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
6023: LD_INT 0
6025: PPUSH
6026: PPUSH
6027: PPUSH
6028: PPUSH
// tmp := [ ] ;
6029: LD_ADDR_VAR 0 3
6033: PUSH
6034: EMPTY
6035: ST_TO_ADDR
// list := [ ] ;
6036: LD_ADDR_VAR 0 5
6040: PUSH
6041: EMPTY
6042: ST_TO_ADDR
// for i = 16 to 25 do
6043: LD_ADDR_VAR 0 4
6047: PUSH
6048: DOUBLE
6049: LD_INT 16
6051: DEC
6052: ST_TO_ADDR
6053: LD_INT 25
6055: PUSH
6056: FOR_TO
6057: IFFALSE 6130
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
6059: LD_ADDR_VAR 0 3
6063: PUSH
6064: LD_VAR 0 3
6068: PUSH
6069: LD_INT 22
6071: PUSH
6072: LD_VAR 0 1
6076: PPUSH
6077: CALL_OW 255
6081: PUSH
6082: EMPTY
6083: LIST
6084: LIST
6085: PUSH
6086: LD_INT 91
6088: PUSH
6089: LD_VAR 0 1
6093: PUSH
6094: LD_INT 6
6096: PUSH
6097: EMPTY
6098: LIST
6099: LIST
6100: LIST
6101: PUSH
6102: LD_INT 30
6104: PUSH
6105: LD_VAR 0 4
6109: PUSH
6110: EMPTY
6111: LIST
6112: LIST
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: LIST
6118: PUSH
6119: EMPTY
6120: LIST
6121: PPUSH
6122: CALL_OW 69
6126: ADD
6127: ST_TO_ADDR
6128: GO 6056
6130: POP
6131: POP
// for i = 1 to tmp do
6132: LD_ADDR_VAR 0 4
6136: PUSH
6137: DOUBLE
6138: LD_INT 1
6140: DEC
6141: ST_TO_ADDR
6142: LD_VAR 0 3
6146: PUSH
6147: FOR_TO
6148: IFFALSE 6236
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
6150: LD_ADDR_VAR 0 5
6154: PUSH
6155: LD_VAR 0 5
6159: PUSH
6160: LD_VAR 0 3
6164: PUSH
6165: LD_VAR 0 4
6169: ARRAY
6170: PPUSH
6171: CALL_OW 266
6175: PUSH
6176: LD_VAR 0 3
6180: PUSH
6181: LD_VAR 0 4
6185: ARRAY
6186: PPUSH
6187: CALL_OW 250
6191: PUSH
6192: LD_VAR 0 3
6196: PUSH
6197: LD_VAR 0 4
6201: ARRAY
6202: PPUSH
6203: CALL_OW 251
6207: PUSH
6208: LD_VAR 0 3
6212: PUSH
6213: LD_VAR 0 4
6217: ARRAY
6218: PPUSH
6219: CALL_OW 254
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: LIST
6228: LIST
6229: PUSH
6230: EMPTY
6231: LIST
6232: ADD
6233: ST_TO_ADDR
6234: GO 6147
6236: POP
6237: POP
// result := list ;
6238: LD_ADDR_VAR 0 2
6242: PUSH
6243: LD_VAR 0 5
6247: ST_TO_ADDR
// end ;
6248: LD_VAR 0 2
6252: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
6253: LD_INT 0
6255: PPUSH
6256: PPUSH
6257: PPUSH
6258: PPUSH
6259: PPUSH
6260: PPUSH
6261: PPUSH
// if not factory then
6262: LD_VAR 0 1
6266: NOT
6267: IFFALSE 6271
// exit ;
6269: GO 6864
// if control = control_apeman then
6271: LD_VAR 0 4
6275: PUSH
6276: LD_INT 5
6278: EQUAL
6279: IFFALSE 6388
// begin tmp := UnitsInside ( factory ) ;
6281: LD_ADDR_VAR 0 8
6285: PUSH
6286: LD_VAR 0 1
6290: PPUSH
6291: CALL_OW 313
6295: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
6296: LD_VAR 0 8
6300: PPUSH
6301: LD_INT 25
6303: PUSH
6304: LD_INT 12
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: PPUSH
6311: CALL_OW 72
6315: NOT
6316: IFFALSE 6326
// control := control_manual ;
6318: LD_ADDR_VAR 0 4
6322: PUSH
6323: LD_INT 1
6325: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
6326: LD_ADDR_VAR 0 8
6330: PUSH
6331: LD_VAR 0 1
6335: PPUSH
6336: CALL 6023 0 1
6340: ST_TO_ADDR
// if tmp then
6341: LD_VAR 0 8
6345: IFFALSE 6388
// begin for i in tmp do
6347: LD_ADDR_VAR 0 7
6351: PUSH
6352: LD_VAR 0 8
6356: PUSH
6357: FOR_IN
6358: IFFALSE 6386
// if i [ 1 ] = b_ext_radio then
6360: LD_VAR 0 7
6364: PUSH
6365: LD_INT 1
6367: ARRAY
6368: PUSH
6369: LD_INT 22
6371: EQUAL
6372: IFFALSE 6384
// begin control := control_remote ;
6374: LD_ADDR_VAR 0 4
6378: PUSH
6379: LD_INT 2
6381: ST_TO_ADDR
// break ;
6382: GO 6386
// end ;
6384: GO 6357
6386: POP
6387: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6388: LD_VAR 0 1
6392: PPUSH
6393: LD_VAR 0 2
6397: PPUSH
6398: LD_VAR 0 3
6402: PPUSH
6403: LD_VAR 0 4
6407: PPUSH
6408: LD_VAR 0 5
6412: PPUSH
6413: CALL_OW 448
6417: IFFALSE 6452
// begin result := [ chassis , engine , control , weapon ] ;
6419: LD_ADDR_VAR 0 6
6423: PUSH
6424: LD_VAR 0 2
6428: PUSH
6429: LD_VAR 0 3
6433: PUSH
6434: LD_VAR 0 4
6438: PUSH
6439: LD_VAR 0 5
6443: PUSH
6444: EMPTY
6445: LIST
6446: LIST
6447: LIST
6448: LIST
6449: ST_TO_ADDR
// exit ;
6450: GO 6864
// end ; _chassis := AvailableChassisList ( factory ) ;
6452: LD_ADDR_VAR 0 9
6456: PUSH
6457: LD_VAR 0 1
6461: PPUSH
6462: CALL_OW 475
6466: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
6467: LD_ADDR_VAR 0 11
6471: PUSH
6472: LD_VAR 0 1
6476: PPUSH
6477: CALL_OW 476
6481: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
6482: LD_ADDR_VAR 0 12
6486: PUSH
6487: LD_VAR 0 1
6491: PPUSH
6492: CALL_OW 477
6496: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
6497: LD_ADDR_VAR 0 10
6501: PUSH
6502: LD_VAR 0 1
6506: PPUSH
6507: CALL_OW 478
6511: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
6512: LD_VAR 0 9
6516: NOT
6517: PUSH
6518: LD_VAR 0 11
6522: NOT
6523: OR
6524: PUSH
6525: LD_VAR 0 12
6529: NOT
6530: OR
6531: PUSH
6532: LD_VAR 0 10
6536: NOT
6537: OR
6538: IFFALSE 6573
// begin result := [ chassis , engine , control , weapon ] ;
6540: LD_ADDR_VAR 0 6
6544: PUSH
6545: LD_VAR 0 2
6549: PUSH
6550: LD_VAR 0 3
6554: PUSH
6555: LD_VAR 0 4
6559: PUSH
6560: LD_VAR 0 5
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: ST_TO_ADDR
// exit ;
6571: GO 6864
// end ; if not chassis in _chassis then
6573: LD_VAR 0 2
6577: PUSH
6578: LD_VAR 0 9
6582: IN
6583: NOT
6584: IFFALSE 6610
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
6586: LD_ADDR_VAR 0 2
6590: PUSH
6591: LD_VAR 0 9
6595: PUSH
6596: LD_INT 1
6598: PPUSH
6599: LD_VAR 0 9
6603: PPUSH
6604: CALL_OW 12
6608: ARRAY
6609: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
6610: LD_VAR 0 2
6614: PPUSH
6615: LD_VAR 0 3
6619: PPUSH
6620: CALL 6869 0 2
6624: NOT
6625: IFFALSE 6684
// repeat engine := _engine [ 1 ] ;
6627: LD_ADDR_VAR 0 3
6631: PUSH
6632: LD_VAR 0 11
6636: PUSH
6637: LD_INT 1
6639: ARRAY
6640: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
6641: LD_ADDR_VAR 0 11
6645: PUSH
6646: LD_VAR 0 11
6650: PPUSH
6651: LD_INT 1
6653: PPUSH
6654: CALL_OW 3
6658: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
6659: LD_VAR 0 2
6663: PPUSH
6664: LD_VAR 0 3
6668: PPUSH
6669: CALL 6869 0 2
6673: PUSH
6674: LD_VAR 0 11
6678: PUSH
6679: EMPTY
6680: EQUAL
6681: OR
6682: IFFALSE 6627
// if not control in _control then
6684: LD_VAR 0 4
6688: PUSH
6689: LD_VAR 0 12
6693: IN
6694: NOT
6695: IFFALSE 6721
// control := _control [ rand ( 1 , _control ) ] ;
6697: LD_ADDR_VAR 0 4
6701: PUSH
6702: LD_VAR 0 12
6706: PUSH
6707: LD_INT 1
6709: PPUSH
6710: LD_VAR 0 12
6714: PPUSH
6715: CALL_OW 12
6719: ARRAY
6720: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
6721: LD_VAR 0 2
6725: PPUSH
6726: LD_VAR 0 5
6730: PPUSH
6731: CALL 7089 0 2
6735: NOT
6736: IFFALSE 6795
// repeat weapon := _weapon [ 1 ] ;
6738: LD_ADDR_VAR 0 5
6742: PUSH
6743: LD_VAR 0 10
6747: PUSH
6748: LD_INT 1
6750: ARRAY
6751: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
6752: LD_ADDR_VAR 0 10
6756: PUSH
6757: LD_VAR 0 10
6761: PPUSH
6762: LD_INT 1
6764: PPUSH
6765: CALL_OW 3
6769: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6770: LD_VAR 0 2
6774: PPUSH
6775: LD_VAR 0 5
6779: PPUSH
6780: CALL 7089 0 2
6784: PUSH
6785: LD_VAR 0 10
6789: PUSH
6790: EMPTY
6791: EQUAL
6792: OR
6793: IFFALSE 6738
// result := [ ] ;
6795: LD_ADDR_VAR 0 6
6799: PUSH
6800: EMPTY
6801: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6802: LD_VAR 0 1
6806: PPUSH
6807: LD_VAR 0 2
6811: PPUSH
6812: LD_VAR 0 3
6816: PPUSH
6817: LD_VAR 0 4
6821: PPUSH
6822: LD_VAR 0 5
6826: PPUSH
6827: CALL_OW 448
6831: IFFALSE 6864
// result := [ chassis , engine , control , weapon ] ;
6833: LD_ADDR_VAR 0 6
6837: PUSH
6838: LD_VAR 0 2
6842: PUSH
6843: LD_VAR 0 3
6847: PUSH
6848: LD_VAR 0 4
6852: PUSH
6853: LD_VAR 0 5
6857: PUSH
6858: EMPTY
6859: LIST
6860: LIST
6861: LIST
6862: LIST
6863: ST_TO_ADDR
// end ;
6864: LD_VAR 0 6
6868: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6869: LD_INT 0
6871: PPUSH
// if not chassis or not engine then
6872: LD_VAR 0 1
6876: NOT
6877: PUSH
6878: LD_VAR 0 2
6882: NOT
6883: OR
6884: IFFALSE 6888
// exit ;
6886: GO 7084
// case engine of engine_solar :
6888: LD_VAR 0 2
6892: PUSH
6893: LD_INT 2
6895: DOUBLE
6896: EQUAL
6897: IFTRUE 6901
6899: GO 6939
6901: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6902: LD_ADDR_VAR 0 3
6906: PUSH
6907: LD_INT 11
6909: PUSH
6910: LD_INT 12
6912: PUSH
6913: LD_INT 13
6915: PUSH
6916: LD_INT 14
6918: PUSH
6919: LD_INT 1
6921: PUSH
6922: LD_INT 2
6924: PUSH
6925: LD_INT 3
6927: PUSH
6928: EMPTY
6929: LIST
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: LIST
6936: ST_TO_ADDR
6937: GO 7068
6939: LD_INT 1
6941: DOUBLE
6942: EQUAL
6943: IFTRUE 6947
6945: GO 7009
6947: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6948: LD_ADDR_VAR 0 3
6952: PUSH
6953: LD_INT 11
6955: PUSH
6956: LD_INT 12
6958: PUSH
6959: LD_INT 13
6961: PUSH
6962: LD_INT 14
6964: PUSH
6965: LD_INT 1
6967: PUSH
6968: LD_INT 2
6970: PUSH
6971: LD_INT 3
6973: PUSH
6974: LD_INT 4
6976: PUSH
6977: LD_INT 5
6979: PUSH
6980: LD_INT 21
6982: PUSH
6983: LD_INT 23
6985: PUSH
6986: LD_INT 22
6988: PUSH
6989: LD_INT 24
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: ST_TO_ADDR
7007: GO 7068
7009: LD_INT 3
7011: DOUBLE
7012: EQUAL
7013: IFTRUE 7017
7015: GO 7067
7017: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7018: LD_ADDR_VAR 0 3
7022: PUSH
7023: LD_INT 13
7025: PUSH
7026: LD_INT 14
7028: PUSH
7029: LD_INT 2
7031: PUSH
7032: LD_INT 3
7034: PUSH
7035: LD_INT 4
7037: PUSH
7038: LD_INT 5
7040: PUSH
7041: LD_INT 21
7043: PUSH
7044: LD_INT 22
7046: PUSH
7047: LD_INT 23
7049: PUSH
7050: LD_INT 24
7052: PUSH
7053: EMPTY
7054: LIST
7055: LIST
7056: LIST
7057: LIST
7058: LIST
7059: LIST
7060: LIST
7061: LIST
7062: LIST
7063: LIST
7064: ST_TO_ADDR
7065: GO 7068
7067: POP
// result := ( chassis in result ) ;
7068: LD_ADDR_VAR 0 3
7072: PUSH
7073: LD_VAR 0 1
7077: PUSH
7078: LD_VAR 0 3
7082: IN
7083: ST_TO_ADDR
// end ;
7084: LD_VAR 0 3
7088: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
7089: LD_INT 0
7091: PPUSH
// if not chassis or not weapon then
7092: LD_VAR 0 1
7096: NOT
7097: PUSH
7098: LD_VAR 0 2
7102: NOT
7103: OR
7104: IFFALSE 7108
// exit ;
7106: GO 8168
// case weapon of us_machine_gun :
7108: LD_VAR 0 2
7112: PUSH
7113: LD_INT 2
7115: DOUBLE
7116: EQUAL
7117: IFTRUE 7121
7119: GO 7151
7121: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
7122: LD_ADDR_VAR 0 3
7126: PUSH
7127: LD_INT 1
7129: PUSH
7130: LD_INT 2
7132: PUSH
7133: LD_INT 3
7135: PUSH
7136: LD_INT 4
7138: PUSH
7139: LD_INT 5
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: LIST
7146: LIST
7147: LIST
7148: ST_TO_ADDR
7149: GO 8152
7151: LD_INT 3
7153: DOUBLE
7154: EQUAL
7155: IFTRUE 7159
7157: GO 7189
7159: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
7160: LD_ADDR_VAR 0 3
7164: PUSH
7165: LD_INT 1
7167: PUSH
7168: LD_INT 2
7170: PUSH
7171: LD_INT 3
7173: PUSH
7174: LD_INT 4
7176: PUSH
7177: LD_INT 5
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: LIST
7184: LIST
7185: LIST
7186: ST_TO_ADDR
7187: GO 8152
7189: LD_INT 11
7191: DOUBLE
7192: EQUAL
7193: IFTRUE 7197
7195: GO 7227
7197: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
7198: LD_ADDR_VAR 0 3
7202: PUSH
7203: LD_INT 1
7205: PUSH
7206: LD_INT 2
7208: PUSH
7209: LD_INT 3
7211: PUSH
7212: LD_INT 4
7214: PUSH
7215: LD_INT 5
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: ST_TO_ADDR
7225: GO 8152
7227: LD_INT 4
7229: DOUBLE
7230: EQUAL
7231: IFTRUE 7235
7233: GO 7261
7235: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
7236: LD_ADDR_VAR 0 3
7240: PUSH
7241: LD_INT 2
7243: PUSH
7244: LD_INT 3
7246: PUSH
7247: LD_INT 4
7249: PUSH
7250: LD_INT 5
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: LIST
7257: LIST
7258: ST_TO_ADDR
7259: GO 8152
7261: LD_INT 5
7263: DOUBLE
7264: EQUAL
7265: IFTRUE 7269
7267: GO 7295
7269: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
7270: LD_ADDR_VAR 0 3
7274: PUSH
7275: LD_INT 2
7277: PUSH
7278: LD_INT 3
7280: PUSH
7281: LD_INT 4
7283: PUSH
7284: LD_INT 5
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: LIST
7291: LIST
7292: ST_TO_ADDR
7293: GO 8152
7295: LD_INT 9
7297: DOUBLE
7298: EQUAL
7299: IFTRUE 7303
7301: GO 7329
7303: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
7304: LD_ADDR_VAR 0 3
7308: PUSH
7309: LD_INT 2
7311: PUSH
7312: LD_INT 3
7314: PUSH
7315: LD_INT 4
7317: PUSH
7318: LD_INT 5
7320: PUSH
7321: EMPTY
7322: LIST
7323: LIST
7324: LIST
7325: LIST
7326: ST_TO_ADDR
7327: GO 8152
7329: LD_INT 7
7331: DOUBLE
7332: EQUAL
7333: IFTRUE 7337
7335: GO 7363
7337: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
7338: LD_ADDR_VAR 0 3
7342: PUSH
7343: LD_INT 2
7345: PUSH
7346: LD_INT 3
7348: PUSH
7349: LD_INT 4
7351: PUSH
7352: LD_INT 5
7354: PUSH
7355: EMPTY
7356: LIST
7357: LIST
7358: LIST
7359: LIST
7360: ST_TO_ADDR
7361: GO 8152
7363: LD_INT 12
7365: DOUBLE
7366: EQUAL
7367: IFTRUE 7371
7369: GO 7397
7371: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
7372: LD_ADDR_VAR 0 3
7376: PUSH
7377: LD_INT 2
7379: PUSH
7380: LD_INT 3
7382: PUSH
7383: LD_INT 4
7385: PUSH
7386: LD_INT 5
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: LIST
7393: LIST
7394: ST_TO_ADDR
7395: GO 8152
7397: LD_INT 13
7399: DOUBLE
7400: EQUAL
7401: IFTRUE 7405
7403: GO 7431
7405: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
7406: LD_ADDR_VAR 0 3
7410: PUSH
7411: LD_INT 2
7413: PUSH
7414: LD_INT 3
7416: PUSH
7417: LD_INT 4
7419: PUSH
7420: LD_INT 5
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: ST_TO_ADDR
7429: GO 8152
7431: LD_INT 14
7433: DOUBLE
7434: EQUAL
7435: IFTRUE 7439
7437: GO 7457
7439: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
7440: LD_ADDR_VAR 0 3
7444: PUSH
7445: LD_INT 4
7447: PUSH
7448: LD_INT 5
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: ST_TO_ADDR
7455: GO 8152
7457: LD_INT 6
7459: DOUBLE
7460: EQUAL
7461: IFTRUE 7465
7463: GO 7483
7465: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
7466: LD_ADDR_VAR 0 3
7470: PUSH
7471: LD_INT 4
7473: PUSH
7474: LD_INT 5
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: ST_TO_ADDR
7481: GO 8152
7483: LD_INT 10
7485: DOUBLE
7486: EQUAL
7487: IFTRUE 7491
7489: GO 7509
7491: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
7492: LD_ADDR_VAR 0 3
7496: PUSH
7497: LD_INT 4
7499: PUSH
7500: LD_INT 5
7502: PUSH
7503: EMPTY
7504: LIST
7505: LIST
7506: ST_TO_ADDR
7507: GO 8152
7509: LD_INT 22
7511: DOUBLE
7512: EQUAL
7513: IFTRUE 7517
7515: GO 7543
7517: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
7518: LD_ADDR_VAR 0 3
7522: PUSH
7523: LD_INT 11
7525: PUSH
7526: LD_INT 12
7528: PUSH
7529: LD_INT 13
7531: PUSH
7532: LD_INT 14
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: ST_TO_ADDR
7541: GO 8152
7543: LD_INT 23
7545: DOUBLE
7546: EQUAL
7547: IFTRUE 7551
7549: GO 7577
7551: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
7552: LD_ADDR_VAR 0 3
7556: PUSH
7557: LD_INT 11
7559: PUSH
7560: LD_INT 12
7562: PUSH
7563: LD_INT 13
7565: PUSH
7566: LD_INT 14
7568: PUSH
7569: EMPTY
7570: LIST
7571: LIST
7572: LIST
7573: LIST
7574: ST_TO_ADDR
7575: GO 8152
7577: LD_INT 24
7579: DOUBLE
7580: EQUAL
7581: IFTRUE 7585
7583: GO 7611
7585: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
7586: LD_ADDR_VAR 0 3
7590: PUSH
7591: LD_INT 11
7593: PUSH
7594: LD_INT 12
7596: PUSH
7597: LD_INT 13
7599: PUSH
7600: LD_INT 14
7602: PUSH
7603: EMPTY
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: ST_TO_ADDR
7609: GO 8152
7611: LD_INT 30
7613: DOUBLE
7614: EQUAL
7615: IFTRUE 7619
7617: GO 7645
7619: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
7620: LD_ADDR_VAR 0 3
7624: PUSH
7625: LD_INT 11
7627: PUSH
7628: LD_INT 12
7630: PUSH
7631: LD_INT 13
7633: PUSH
7634: LD_INT 14
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: ST_TO_ADDR
7643: GO 8152
7645: LD_INT 25
7647: DOUBLE
7648: EQUAL
7649: IFTRUE 7653
7651: GO 7671
7653: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
7654: LD_ADDR_VAR 0 3
7658: PUSH
7659: LD_INT 13
7661: PUSH
7662: LD_INT 14
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: ST_TO_ADDR
7669: GO 8152
7671: LD_INT 27
7673: DOUBLE
7674: EQUAL
7675: IFTRUE 7679
7677: GO 7697
7679: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
7680: LD_ADDR_VAR 0 3
7684: PUSH
7685: LD_INT 13
7687: PUSH
7688: LD_INT 14
7690: PUSH
7691: EMPTY
7692: LIST
7693: LIST
7694: ST_TO_ADDR
7695: GO 8152
7697: LD_INT 92
7699: DOUBLE
7700: EQUAL
7701: IFTRUE 7705
7703: GO 7731
7705: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
7706: LD_ADDR_VAR 0 3
7710: PUSH
7711: LD_INT 11
7713: PUSH
7714: LD_INT 12
7716: PUSH
7717: LD_INT 13
7719: PUSH
7720: LD_INT 14
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: ST_TO_ADDR
7729: GO 8152
7731: LD_INT 28
7733: DOUBLE
7734: EQUAL
7735: IFTRUE 7739
7737: GO 7757
7739: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
7740: LD_ADDR_VAR 0 3
7744: PUSH
7745: LD_INT 13
7747: PUSH
7748: LD_INT 14
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: ST_TO_ADDR
7755: GO 8152
7757: LD_INT 29
7759: DOUBLE
7760: EQUAL
7761: IFTRUE 7765
7763: GO 7783
7765: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7766: LD_ADDR_VAR 0 3
7770: PUSH
7771: LD_INT 13
7773: PUSH
7774: LD_INT 14
7776: PUSH
7777: EMPTY
7778: LIST
7779: LIST
7780: ST_TO_ADDR
7781: GO 8152
7783: LD_INT 31
7785: DOUBLE
7786: EQUAL
7787: IFTRUE 7791
7789: GO 7809
7791: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7792: LD_ADDR_VAR 0 3
7796: PUSH
7797: LD_INT 13
7799: PUSH
7800: LD_INT 14
7802: PUSH
7803: EMPTY
7804: LIST
7805: LIST
7806: ST_TO_ADDR
7807: GO 8152
7809: LD_INT 26
7811: DOUBLE
7812: EQUAL
7813: IFTRUE 7817
7815: GO 7835
7817: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7818: LD_ADDR_VAR 0 3
7822: PUSH
7823: LD_INT 13
7825: PUSH
7826: LD_INT 14
7828: PUSH
7829: EMPTY
7830: LIST
7831: LIST
7832: ST_TO_ADDR
7833: GO 8152
7835: LD_INT 42
7837: DOUBLE
7838: EQUAL
7839: IFTRUE 7843
7841: GO 7869
7843: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7844: LD_ADDR_VAR 0 3
7848: PUSH
7849: LD_INT 21
7851: PUSH
7852: LD_INT 22
7854: PUSH
7855: LD_INT 23
7857: PUSH
7858: LD_INT 24
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: ST_TO_ADDR
7867: GO 8152
7869: LD_INT 43
7871: DOUBLE
7872: EQUAL
7873: IFTRUE 7877
7875: GO 7903
7877: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7878: LD_ADDR_VAR 0 3
7882: PUSH
7883: LD_INT 21
7885: PUSH
7886: LD_INT 22
7888: PUSH
7889: LD_INT 23
7891: PUSH
7892: LD_INT 24
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: ST_TO_ADDR
7901: GO 8152
7903: LD_INT 44
7905: DOUBLE
7906: EQUAL
7907: IFTRUE 7911
7909: GO 7937
7911: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7912: LD_ADDR_VAR 0 3
7916: PUSH
7917: LD_INT 21
7919: PUSH
7920: LD_INT 22
7922: PUSH
7923: LD_INT 23
7925: PUSH
7926: LD_INT 24
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: ST_TO_ADDR
7935: GO 8152
7937: LD_INT 45
7939: DOUBLE
7940: EQUAL
7941: IFTRUE 7945
7943: GO 7971
7945: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7946: LD_ADDR_VAR 0 3
7950: PUSH
7951: LD_INT 21
7953: PUSH
7954: LD_INT 22
7956: PUSH
7957: LD_INT 23
7959: PUSH
7960: LD_INT 24
7962: PUSH
7963: EMPTY
7964: LIST
7965: LIST
7966: LIST
7967: LIST
7968: ST_TO_ADDR
7969: GO 8152
7971: LD_INT 49
7973: DOUBLE
7974: EQUAL
7975: IFTRUE 7979
7977: GO 8005
7979: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7980: LD_ADDR_VAR 0 3
7984: PUSH
7985: LD_INT 21
7987: PUSH
7988: LD_INT 22
7990: PUSH
7991: LD_INT 23
7993: PUSH
7994: LD_INT 24
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: LIST
8001: LIST
8002: ST_TO_ADDR
8003: GO 8152
8005: LD_INT 51
8007: DOUBLE
8008: EQUAL
8009: IFTRUE 8013
8011: GO 8039
8013: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
8014: LD_ADDR_VAR 0 3
8018: PUSH
8019: LD_INT 21
8021: PUSH
8022: LD_INT 22
8024: PUSH
8025: LD_INT 23
8027: PUSH
8028: LD_INT 24
8030: PUSH
8031: EMPTY
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: ST_TO_ADDR
8037: GO 8152
8039: LD_INT 52
8041: DOUBLE
8042: EQUAL
8043: IFTRUE 8047
8045: GO 8073
8047: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
8048: LD_ADDR_VAR 0 3
8052: PUSH
8053: LD_INT 21
8055: PUSH
8056: LD_INT 22
8058: PUSH
8059: LD_INT 23
8061: PUSH
8062: LD_INT 24
8064: PUSH
8065: EMPTY
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: ST_TO_ADDR
8071: GO 8152
8073: LD_INT 53
8075: DOUBLE
8076: EQUAL
8077: IFTRUE 8081
8079: GO 8099
8081: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
8082: LD_ADDR_VAR 0 3
8086: PUSH
8087: LD_INT 23
8089: PUSH
8090: LD_INT 24
8092: PUSH
8093: EMPTY
8094: LIST
8095: LIST
8096: ST_TO_ADDR
8097: GO 8152
8099: LD_INT 46
8101: DOUBLE
8102: EQUAL
8103: IFTRUE 8107
8105: GO 8125
8107: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
8108: LD_ADDR_VAR 0 3
8112: PUSH
8113: LD_INT 23
8115: PUSH
8116: LD_INT 24
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: ST_TO_ADDR
8123: GO 8152
8125: LD_INT 47
8127: DOUBLE
8128: EQUAL
8129: IFTRUE 8133
8131: GO 8151
8133: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
8134: LD_ADDR_VAR 0 3
8138: PUSH
8139: LD_INT 23
8141: PUSH
8142: LD_INT 24
8144: PUSH
8145: EMPTY
8146: LIST
8147: LIST
8148: ST_TO_ADDR
8149: GO 8152
8151: POP
// result := ( chassis in result ) ;
8152: LD_ADDR_VAR 0 3
8156: PUSH
8157: LD_VAR 0 1
8161: PUSH
8162: LD_VAR 0 3
8166: IN
8167: ST_TO_ADDR
// end ;
8168: LD_VAR 0 3
8172: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
8173: LD_INT 0
8175: PPUSH
8176: PPUSH
8177: PPUSH
8178: PPUSH
8179: PPUSH
8180: PPUSH
8181: PPUSH
// result := array ;
8182: LD_ADDR_VAR 0 5
8186: PUSH
8187: LD_VAR 0 1
8191: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
8192: LD_VAR 0 1
8196: NOT
8197: PUSH
8198: LD_VAR 0 2
8202: NOT
8203: OR
8204: PUSH
8205: LD_VAR 0 3
8209: NOT
8210: OR
8211: PUSH
8212: LD_VAR 0 2
8216: PUSH
8217: LD_VAR 0 1
8221: GREATER
8222: OR
8223: PUSH
8224: LD_VAR 0 3
8228: PUSH
8229: LD_VAR 0 1
8233: GREATER
8234: OR
8235: IFFALSE 8239
// exit ;
8237: GO 8535
// if direction then
8239: LD_VAR 0 4
8243: IFFALSE 8307
// begin d := 1 ;
8245: LD_ADDR_VAR 0 9
8249: PUSH
8250: LD_INT 1
8252: ST_TO_ADDR
// if i_from > i_to then
8253: LD_VAR 0 2
8257: PUSH
8258: LD_VAR 0 3
8262: GREATER
8263: IFFALSE 8289
// length := ( array - i_from ) + i_to else
8265: LD_ADDR_VAR 0 11
8269: PUSH
8270: LD_VAR 0 1
8274: PUSH
8275: LD_VAR 0 2
8279: MINUS
8280: PUSH
8281: LD_VAR 0 3
8285: PLUS
8286: ST_TO_ADDR
8287: GO 8305
// length := i_to - i_from ;
8289: LD_ADDR_VAR 0 11
8293: PUSH
8294: LD_VAR 0 3
8298: PUSH
8299: LD_VAR 0 2
8303: MINUS
8304: ST_TO_ADDR
// end else
8305: GO 8368
// begin d := - 1 ;
8307: LD_ADDR_VAR 0 9
8311: PUSH
8312: LD_INT 1
8314: NEG
8315: ST_TO_ADDR
// if i_from > i_to then
8316: LD_VAR 0 2
8320: PUSH
8321: LD_VAR 0 3
8325: GREATER
8326: IFFALSE 8346
// length := i_from - i_to else
8328: LD_ADDR_VAR 0 11
8332: PUSH
8333: LD_VAR 0 2
8337: PUSH
8338: LD_VAR 0 3
8342: MINUS
8343: ST_TO_ADDR
8344: GO 8368
// length := ( array - i_to ) + i_from ;
8346: LD_ADDR_VAR 0 11
8350: PUSH
8351: LD_VAR 0 1
8355: PUSH
8356: LD_VAR 0 3
8360: MINUS
8361: PUSH
8362: LD_VAR 0 2
8366: PLUS
8367: ST_TO_ADDR
// end ; if not length then
8368: LD_VAR 0 11
8372: NOT
8373: IFFALSE 8377
// exit ;
8375: GO 8535
// tmp := array ;
8377: LD_ADDR_VAR 0 10
8381: PUSH
8382: LD_VAR 0 1
8386: ST_TO_ADDR
// for i = 1 to length do
8387: LD_ADDR_VAR 0 6
8391: PUSH
8392: DOUBLE
8393: LD_INT 1
8395: DEC
8396: ST_TO_ADDR
8397: LD_VAR 0 11
8401: PUSH
8402: FOR_TO
8403: IFFALSE 8523
// begin for j = 1 to array do
8405: LD_ADDR_VAR 0 7
8409: PUSH
8410: DOUBLE
8411: LD_INT 1
8413: DEC
8414: ST_TO_ADDR
8415: LD_VAR 0 1
8419: PUSH
8420: FOR_TO
8421: IFFALSE 8509
// begin k := j + d ;
8423: LD_ADDR_VAR 0 8
8427: PUSH
8428: LD_VAR 0 7
8432: PUSH
8433: LD_VAR 0 9
8437: PLUS
8438: ST_TO_ADDR
// if k > array then
8439: LD_VAR 0 8
8443: PUSH
8444: LD_VAR 0 1
8448: GREATER
8449: IFFALSE 8459
// k := 1 ;
8451: LD_ADDR_VAR 0 8
8455: PUSH
8456: LD_INT 1
8458: ST_TO_ADDR
// if not k then
8459: LD_VAR 0 8
8463: NOT
8464: IFFALSE 8476
// k := array ;
8466: LD_ADDR_VAR 0 8
8470: PUSH
8471: LD_VAR 0 1
8475: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
8476: LD_ADDR_VAR 0 10
8480: PUSH
8481: LD_VAR 0 10
8485: PPUSH
8486: LD_VAR 0 8
8490: PPUSH
8491: LD_VAR 0 1
8495: PUSH
8496: LD_VAR 0 7
8500: ARRAY
8501: PPUSH
8502: CALL_OW 1
8506: ST_TO_ADDR
// end ;
8507: GO 8420
8509: POP
8510: POP
// array := tmp ;
8511: LD_ADDR_VAR 0 1
8515: PUSH
8516: LD_VAR 0 10
8520: ST_TO_ADDR
// end ;
8521: GO 8402
8523: POP
8524: POP
// result := array ;
8525: LD_ADDR_VAR 0 5
8529: PUSH
8530: LD_VAR 0 1
8534: ST_TO_ADDR
// end ;
8535: LD_VAR 0 5
8539: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
8540: LD_INT 0
8542: PPUSH
8543: PPUSH
// result := 0 ;
8544: LD_ADDR_VAR 0 3
8548: PUSH
8549: LD_INT 0
8551: ST_TO_ADDR
// if not array or not value in array then
8552: LD_VAR 0 1
8556: NOT
8557: PUSH
8558: LD_VAR 0 2
8562: PUSH
8563: LD_VAR 0 1
8567: IN
8568: NOT
8569: OR
8570: IFFALSE 8574
// exit ;
8572: GO 8628
// for i = 1 to array do
8574: LD_ADDR_VAR 0 4
8578: PUSH
8579: DOUBLE
8580: LD_INT 1
8582: DEC
8583: ST_TO_ADDR
8584: LD_VAR 0 1
8588: PUSH
8589: FOR_TO
8590: IFFALSE 8626
// if value = array [ i ] then
8592: LD_VAR 0 2
8596: PUSH
8597: LD_VAR 0 1
8601: PUSH
8602: LD_VAR 0 4
8606: ARRAY
8607: EQUAL
8608: IFFALSE 8624
// begin result := i ;
8610: LD_ADDR_VAR 0 3
8614: PUSH
8615: LD_VAR 0 4
8619: ST_TO_ADDR
// exit ;
8620: POP
8621: POP
8622: GO 8628
// end ;
8624: GO 8589
8626: POP
8627: POP
// end ;
8628: LD_VAR 0 3
8632: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
8633: LD_INT 0
8635: PPUSH
// vc_chassis := chassis ;
8636: LD_ADDR_OWVAR 37
8640: PUSH
8641: LD_VAR 0 1
8645: ST_TO_ADDR
// vc_engine := engine ;
8646: LD_ADDR_OWVAR 39
8650: PUSH
8651: LD_VAR 0 2
8655: ST_TO_ADDR
// vc_control := control ;
8656: LD_ADDR_OWVAR 38
8660: PUSH
8661: LD_VAR 0 3
8665: ST_TO_ADDR
// vc_weapon := weapon ;
8666: LD_ADDR_OWVAR 40
8670: PUSH
8671: LD_VAR 0 4
8675: ST_TO_ADDR
// vc_fuel_battery := fuel ;
8676: LD_ADDR_OWVAR 41
8680: PUSH
8681: LD_VAR 0 5
8685: ST_TO_ADDR
// end ;
8686: LD_VAR 0 6
8690: RET
// export function WantPlant ( unit ) ; var task ; begin
8691: LD_INT 0
8693: PPUSH
8694: PPUSH
// result := false ;
8695: LD_ADDR_VAR 0 2
8699: PUSH
8700: LD_INT 0
8702: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
8703: LD_ADDR_VAR 0 3
8707: PUSH
8708: LD_VAR 0 1
8712: PPUSH
8713: CALL_OW 437
8717: ST_TO_ADDR
// if task then
8718: LD_VAR 0 3
8722: IFFALSE 8750
// if task [ 1 ] [ 1 ] = p then
8724: LD_VAR 0 3
8728: PUSH
8729: LD_INT 1
8731: ARRAY
8732: PUSH
8733: LD_INT 1
8735: ARRAY
8736: PUSH
8737: LD_STRING p
8739: EQUAL
8740: IFFALSE 8750
// result := true ;
8742: LD_ADDR_VAR 0 2
8746: PUSH
8747: LD_INT 1
8749: ST_TO_ADDR
// end ;
8750: LD_VAR 0 2
8754: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8755: LD_INT 0
8757: PPUSH
8758: PPUSH
8759: PPUSH
8760: PPUSH
// if pos < 1 then
8761: LD_VAR 0 2
8765: PUSH
8766: LD_INT 1
8768: LESS
8769: IFFALSE 8773
// exit ;
8771: GO 9076
// if pos = 1 then
8773: LD_VAR 0 2
8777: PUSH
8778: LD_INT 1
8780: EQUAL
8781: IFFALSE 8814
// result := Replace ( arr , pos [ 1 ] , value ) else
8783: LD_ADDR_VAR 0 4
8787: PUSH
8788: LD_VAR 0 1
8792: PPUSH
8793: LD_VAR 0 2
8797: PUSH
8798: LD_INT 1
8800: ARRAY
8801: PPUSH
8802: LD_VAR 0 3
8806: PPUSH
8807: CALL_OW 1
8811: ST_TO_ADDR
8812: GO 9076
// begin tmp := arr ;
8814: LD_ADDR_VAR 0 6
8818: PUSH
8819: LD_VAR 0 1
8823: ST_TO_ADDR
// s_arr := [ tmp ] ;
8824: LD_ADDR_VAR 0 7
8828: PUSH
8829: LD_VAR 0 6
8833: PUSH
8834: EMPTY
8835: LIST
8836: ST_TO_ADDR
// for i = 1 to pos - 1 do
8837: LD_ADDR_VAR 0 5
8841: PUSH
8842: DOUBLE
8843: LD_INT 1
8845: DEC
8846: ST_TO_ADDR
8847: LD_VAR 0 2
8851: PUSH
8852: LD_INT 1
8854: MINUS
8855: PUSH
8856: FOR_TO
8857: IFFALSE 8902
// begin tmp := tmp [ pos [ i ] ] ;
8859: LD_ADDR_VAR 0 6
8863: PUSH
8864: LD_VAR 0 6
8868: PUSH
8869: LD_VAR 0 2
8873: PUSH
8874: LD_VAR 0 5
8878: ARRAY
8879: ARRAY
8880: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8881: LD_ADDR_VAR 0 7
8885: PUSH
8886: LD_VAR 0 7
8890: PUSH
8891: LD_VAR 0 6
8895: PUSH
8896: EMPTY
8897: LIST
8898: ADD
8899: ST_TO_ADDR
// end ;
8900: GO 8856
8902: POP
8903: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8904: LD_ADDR_VAR 0 6
8908: PUSH
8909: LD_VAR 0 6
8913: PPUSH
8914: LD_VAR 0 2
8918: PUSH
8919: LD_VAR 0 2
8923: ARRAY
8924: PPUSH
8925: LD_VAR 0 3
8929: PPUSH
8930: CALL_OW 1
8934: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8935: LD_ADDR_VAR 0 7
8939: PUSH
8940: LD_VAR 0 7
8944: PPUSH
8945: LD_VAR 0 7
8949: PPUSH
8950: LD_VAR 0 6
8954: PPUSH
8955: CALL_OW 1
8959: ST_TO_ADDR
// for i = s_arr downto 2 do
8960: LD_ADDR_VAR 0 5
8964: PUSH
8965: DOUBLE
8966: LD_VAR 0 7
8970: INC
8971: ST_TO_ADDR
8972: LD_INT 2
8974: PUSH
8975: FOR_DOWNTO
8976: IFFALSE 9060
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8978: LD_ADDR_VAR 0 6
8982: PUSH
8983: LD_VAR 0 7
8987: PUSH
8988: LD_VAR 0 5
8992: PUSH
8993: LD_INT 1
8995: MINUS
8996: ARRAY
8997: PPUSH
8998: LD_VAR 0 2
9002: PUSH
9003: LD_VAR 0 5
9007: PUSH
9008: LD_INT 1
9010: MINUS
9011: ARRAY
9012: PPUSH
9013: LD_VAR 0 7
9017: PUSH
9018: LD_VAR 0 5
9022: ARRAY
9023: PPUSH
9024: CALL_OW 1
9028: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
9029: LD_ADDR_VAR 0 7
9033: PUSH
9034: LD_VAR 0 7
9038: PPUSH
9039: LD_VAR 0 5
9043: PUSH
9044: LD_INT 1
9046: MINUS
9047: PPUSH
9048: LD_VAR 0 6
9052: PPUSH
9053: CALL_OW 1
9057: ST_TO_ADDR
// end ;
9058: GO 8975
9060: POP
9061: POP
// result := s_arr [ 1 ] ;
9062: LD_ADDR_VAR 0 4
9066: PUSH
9067: LD_VAR 0 7
9071: PUSH
9072: LD_INT 1
9074: ARRAY
9075: ST_TO_ADDR
// end ; end ;
9076: LD_VAR 0 4
9080: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
9081: LD_INT 0
9083: PPUSH
9084: PPUSH
// if not list then
9085: LD_VAR 0 1
9089: NOT
9090: IFFALSE 9094
// exit ;
9092: GO 9185
// i := list [ pos1 ] ;
9094: LD_ADDR_VAR 0 5
9098: PUSH
9099: LD_VAR 0 1
9103: PUSH
9104: LD_VAR 0 2
9108: ARRAY
9109: ST_TO_ADDR
// if not i then
9110: LD_VAR 0 5
9114: NOT
9115: IFFALSE 9119
// exit ;
9117: GO 9185
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
9119: LD_ADDR_VAR 0 1
9123: PUSH
9124: LD_VAR 0 1
9128: PPUSH
9129: LD_VAR 0 2
9133: PPUSH
9134: LD_VAR 0 1
9138: PUSH
9139: LD_VAR 0 3
9143: ARRAY
9144: PPUSH
9145: CALL_OW 1
9149: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
9150: LD_ADDR_VAR 0 1
9154: PUSH
9155: LD_VAR 0 1
9159: PPUSH
9160: LD_VAR 0 3
9164: PPUSH
9165: LD_VAR 0 5
9169: PPUSH
9170: CALL_OW 1
9174: ST_TO_ADDR
// result := list ;
9175: LD_ADDR_VAR 0 4
9179: PUSH
9180: LD_VAR 0 1
9184: ST_TO_ADDR
// end ;
9185: LD_VAR 0 4
9189: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
9190: LD_INT 0
9192: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
9193: LD_ADDR_VAR 0 5
9197: PUSH
9198: LD_VAR 0 1
9202: PPUSH
9203: CALL_OW 250
9207: PPUSH
9208: LD_VAR 0 1
9212: PPUSH
9213: CALL_OW 251
9217: PPUSH
9218: LD_VAR 0 2
9222: PPUSH
9223: LD_VAR 0 3
9227: PPUSH
9228: LD_VAR 0 4
9232: PPUSH
9233: CALL 9243 0 5
9237: ST_TO_ADDR
// end ;
9238: LD_VAR 0 5
9242: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
9243: LD_INT 0
9245: PPUSH
9246: PPUSH
9247: PPUSH
9248: PPUSH
// if not list then
9249: LD_VAR 0 3
9253: NOT
9254: IFFALSE 9258
// exit ;
9256: GO 9646
// result := [ ] ;
9258: LD_ADDR_VAR 0 6
9262: PUSH
9263: EMPTY
9264: ST_TO_ADDR
// for i in list do
9265: LD_ADDR_VAR 0 7
9269: PUSH
9270: LD_VAR 0 3
9274: PUSH
9275: FOR_IN
9276: IFFALSE 9478
// begin tmp := GetDistUnitXY ( i , x , y ) ;
9278: LD_ADDR_VAR 0 9
9282: PUSH
9283: LD_VAR 0 7
9287: PPUSH
9288: LD_VAR 0 1
9292: PPUSH
9293: LD_VAR 0 2
9297: PPUSH
9298: CALL_OW 297
9302: ST_TO_ADDR
// if not result then
9303: LD_VAR 0 6
9307: NOT
9308: IFFALSE 9334
// result := [ [ i , tmp ] ] else
9310: LD_ADDR_VAR 0 6
9314: PUSH
9315: LD_VAR 0 7
9319: PUSH
9320: LD_VAR 0 9
9324: PUSH
9325: EMPTY
9326: LIST
9327: LIST
9328: PUSH
9329: EMPTY
9330: LIST
9331: ST_TO_ADDR
9332: GO 9476
// begin if result [ result ] [ 2 ] < tmp then
9334: LD_VAR 0 6
9338: PUSH
9339: LD_VAR 0 6
9343: ARRAY
9344: PUSH
9345: LD_INT 2
9347: ARRAY
9348: PUSH
9349: LD_VAR 0 9
9353: LESS
9354: IFFALSE 9396
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9356: LD_ADDR_VAR 0 6
9360: PUSH
9361: LD_VAR 0 6
9365: PPUSH
9366: LD_VAR 0 6
9370: PUSH
9371: LD_INT 1
9373: PLUS
9374: PPUSH
9375: LD_VAR 0 7
9379: PUSH
9380: LD_VAR 0 9
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: PPUSH
9389: CALL_OW 2
9393: ST_TO_ADDR
9394: GO 9476
// for j = 1 to result do
9396: LD_ADDR_VAR 0 8
9400: PUSH
9401: DOUBLE
9402: LD_INT 1
9404: DEC
9405: ST_TO_ADDR
9406: LD_VAR 0 6
9410: PUSH
9411: FOR_TO
9412: IFFALSE 9474
// begin if tmp < result [ j ] [ 2 ] then
9414: LD_VAR 0 9
9418: PUSH
9419: LD_VAR 0 6
9423: PUSH
9424: LD_VAR 0 8
9428: ARRAY
9429: PUSH
9430: LD_INT 2
9432: ARRAY
9433: LESS
9434: IFFALSE 9472
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9436: LD_ADDR_VAR 0 6
9440: PUSH
9441: LD_VAR 0 6
9445: PPUSH
9446: LD_VAR 0 8
9450: PPUSH
9451: LD_VAR 0 7
9455: PUSH
9456: LD_VAR 0 9
9460: PUSH
9461: EMPTY
9462: LIST
9463: LIST
9464: PPUSH
9465: CALL_OW 2
9469: ST_TO_ADDR
// break ;
9470: GO 9474
// end ; end ;
9472: GO 9411
9474: POP
9475: POP
// end ; end ;
9476: GO 9275
9478: POP
9479: POP
// if result and not asc then
9480: LD_VAR 0 6
9484: PUSH
9485: LD_VAR 0 4
9489: NOT
9490: AND
9491: IFFALSE 9566
// begin tmp := result ;
9493: LD_ADDR_VAR 0 9
9497: PUSH
9498: LD_VAR 0 6
9502: ST_TO_ADDR
// for i = tmp downto 1 do
9503: LD_ADDR_VAR 0 7
9507: PUSH
9508: DOUBLE
9509: LD_VAR 0 9
9513: INC
9514: ST_TO_ADDR
9515: LD_INT 1
9517: PUSH
9518: FOR_DOWNTO
9519: IFFALSE 9564
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9521: LD_ADDR_VAR 0 6
9525: PUSH
9526: LD_VAR 0 6
9530: PPUSH
9531: LD_VAR 0 9
9535: PUSH
9536: LD_VAR 0 7
9540: MINUS
9541: PUSH
9542: LD_INT 1
9544: PLUS
9545: PPUSH
9546: LD_VAR 0 9
9550: PUSH
9551: LD_VAR 0 7
9555: ARRAY
9556: PPUSH
9557: CALL_OW 1
9561: ST_TO_ADDR
9562: GO 9518
9564: POP
9565: POP
// end ; tmp := [ ] ;
9566: LD_ADDR_VAR 0 9
9570: PUSH
9571: EMPTY
9572: ST_TO_ADDR
// if mode then
9573: LD_VAR 0 5
9577: IFFALSE 9646
// begin for i = 1 to result do
9579: LD_ADDR_VAR 0 7
9583: PUSH
9584: DOUBLE
9585: LD_INT 1
9587: DEC
9588: ST_TO_ADDR
9589: LD_VAR 0 6
9593: PUSH
9594: FOR_TO
9595: IFFALSE 9634
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9597: LD_ADDR_VAR 0 9
9601: PUSH
9602: LD_VAR 0 9
9606: PPUSH
9607: LD_VAR 0 7
9611: PPUSH
9612: LD_VAR 0 6
9616: PUSH
9617: LD_VAR 0 7
9621: ARRAY
9622: PUSH
9623: LD_INT 1
9625: ARRAY
9626: PPUSH
9627: CALL_OW 1
9631: ST_TO_ADDR
9632: GO 9594
9634: POP
9635: POP
// result := tmp ;
9636: LD_ADDR_VAR 0 6
9640: PUSH
9641: LD_VAR 0 9
9645: ST_TO_ADDR
// end ; end ;
9646: LD_VAR 0 6
9650: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9651: LD_INT 0
9653: PPUSH
9654: PPUSH
9655: PPUSH
9656: PPUSH
9657: PPUSH
9658: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9659: LD_ADDR_VAR 0 5
9663: PUSH
9664: LD_INT 0
9666: PUSH
9667: LD_INT 0
9669: PUSH
9670: LD_INT 0
9672: PUSH
9673: EMPTY
9674: PUSH
9675: EMPTY
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: ST_TO_ADDR
// if not x or not y then
9681: LD_VAR 0 2
9685: NOT
9686: PUSH
9687: LD_VAR 0 3
9691: NOT
9692: OR
9693: IFFALSE 9697
// exit ;
9695: GO 11347
// if not range then
9697: LD_VAR 0 4
9701: NOT
9702: IFFALSE 9712
// range := 10 ;
9704: LD_ADDR_VAR 0 4
9708: PUSH
9709: LD_INT 10
9711: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9712: LD_ADDR_VAR 0 8
9716: PUSH
9717: LD_INT 81
9719: PUSH
9720: LD_VAR 0 1
9724: PUSH
9725: EMPTY
9726: LIST
9727: LIST
9728: PUSH
9729: LD_INT 92
9731: PUSH
9732: LD_VAR 0 2
9736: PUSH
9737: LD_VAR 0 3
9741: PUSH
9742: LD_VAR 0 4
9746: PUSH
9747: EMPTY
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: PUSH
9753: LD_INT 3
9755: PUSH
9756: LD_INT 21
9758: PUSH
9759: LD_INT 3
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: PUSH
9766: EMPTY
9767: LIST
9768: LIST
9769: PUSH
9770: EMPTY
9771: LIST
9772: LIST
9773: LIST
9774: PPUSH
9775: CALL_OW 69
9779: ST_TO_ADDR
// if not tmp then
9780: LD_VAR 0 8
9784: NOT
9785: IFFALSE 9789
// exit ;
9787: GO 11347
// for i in tmp do
9789: LD_ADDR_VAR 0 6
9793: PUSH
9794: LD_VAR 0 8
9798: PUSH
9799: FOR_IN
9800: IFFALSE 11322
// begin points := [ 0 , 0 , 0 ] ;
9802: LD_ADDR_VAR 0 9
9806: PUSH
9807: LD_INT 0
9809: PUSH
9810: LD_INT 0
9812: PUSH
9813: LD_INT 0
9815: PUSH
9816: EMPTY
9817: LIST
9818: LIST
9819: LIST
9820: ST_TO_ADDR
// bpoints := 1 ;
9821: LD_ADDR_VAR 0 10
9825: PUSH
9826: LD_INT 1
9828: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9829: LD_VAR 0 6
9833: PPUSH
9834: CALL_OW 247
9838: PUSH
9839: LD_INT 1
9841: DOUBLE
9842: EQUAL
9843: IFTRUE 9847
9845: GO 10425
9847: POP
// begin if GetClass ( i ) = 1 then
9848: LD_VAR 0 6
9852: PPUSH
9853: CALL_OW 257
9857: PUSH
9858: LD_INT 1
9860: EQUAL
9861: IFFALSE 9882
// points := [ 10 , 5 , 3 ] ;
9863: LD_ADDR_VAR 0 9
9867: PUSH
9868: LD_INT 10
9870: PUSH
9871: LD_INT 5
9873: PUSH
9874: LD_INT 3
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: LIST
9881: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9882: LD_VAR 0 6
9886: PPUSH
9887: CALL_OW 257
9891: PUSH
9892: LD_INT 2
9894: PUSH
9895: LD_INT 3
9897: PUSH
9898: LD_INT 4
9900: PUSH
9901: EMPTY
9902: LIST
9903: LIST
9904: LIST
9905: IN
9906: IFFALSE 9927
// points := [ 3 , 2 , 1 ] ;
9908: LD_ADDR_VAR 0 9
9912: PUSH
9913: LD_INT 3
9915: PUSH
9916: LD_INT 2
9918: PUSH
9919: LD_INT 1
9921: PUSH
9922: EMPTY
9923: LIST
9924: LIST
9925: LIST
9926: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9927: LD_VAR 0 6
9931: PPUSH
9932: CALL_OW 257
9936: PUSH
9937: LD_INT 5
9939: EQUAL
9940: IFFALSE 9961
// points := [ 130 , 5 , 2 ] ;
9942: LD_ADDR_VAR 0 9
9946: PUSH
9947: LD_INT 130
9949: PUSH
9950: LD_INT 5
9952: PUSH
9953: LD_INT 2
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: LIST
9960: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9961: LD_VAR 0 6
9965: PPUSH
9966: CALL_OW 257
9970: PUSH
9971: LD_INT 8
9973: EQUAL
9974: IFFALSE 9995
// points := [ 35 , 35 , 30 ] ;
9976: LD_ADDR_VAR 0 9
9980: PUSH
9981: LD_INT 35
9983: PUSH
9984: LD_INT 35
9986: PUSH
9987: LD_INT 30
9989: PUSH
9990: EMPTY
9991: LIST
9992: LIST
9993: LIST
9994: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9995: LD_VAR 0 6
9999: PPUSH
10000: CALL_OW 257
10004: PUSH
10005: LD_INT 9
10007: EQUAL
10008: IFFALSE 10029
// points := [ 20 , 55 , 40 ] ;
10010: LD_ADDR_VAR 0 9
10014: PUSH
10015: LD_INT 20
10017: PUSH
10018: LD_INT 55
10020: PUSH
10021: LD_INT 40
10023: PUSH
10024: EMPTY
10025: LIST
10026: LIST
10027: LIST
10028: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
10029: LD_VAR 0 6
10033: PPUSH
10034: CALL_OW 257
10038: PUSH
10039: LD_INT 12
10041: PUSH
10042: LD_INT 16
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: IN
10049: IFFALSE 10070
// points := [ 5 , 3 , 2 ] ;
10051: LD_ADDR_VAR 0 9
10055: PUSH
10056: LD_INT 5
10058: PUSH
10059: LD_INT 3
10061: PUSH
10062: LD_INT 2
10064: PUSH
10065: EMPTY
10066: LIST
10067: LIST
10068: LIST
10069: ST_TO_ADDR
// if GetClass ( i ) = 17 then
10070: LD_VAR 0 6
10074: PPUSH
10075: CALL_OW 257
10079: PUSH
10080: LD_INT 17
10082: EQUAL
10083: IFFALSE 10104
// points := [ 100 , 50 , 75 ] ;
10085: LD_ADDR_VAR 0 9
10089: PUSH
10090: LD_INT 100
10092: PUSH
10093: LD_INT 50
10095: PUSH
10096: LD_INT 75
10098: PUSH
10099: EMPTY
10100: LIST
10101: LIST
10102: LIST
10103: ST_TO_ADDR
// if GetClass ( i ) = 15 then
10104: LD_VAR 0 6
10108: PPUSH
10109: CALL_OW 257
10113: PUSH
10114: LD_INT 15
10116: EQUAL
10117: IFFALSE 10138
// points := [ 10 , 5 , 3 ] ;
10119: LD_ADDR_VAR 0 9
10123: PUSH
10124: LD_INT 10
10126: PUSH
10127: LD_INT 5
10129: PUSH
10130: LD_INT 3
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: LIST
10137: ST_TO_ADDR
// if GetClass ( i ) = 14 then
10138: LD_VAR 0 6
10142: PPUSH
10143: CALL_OW 257
10147: PUSH
10148: LD_INT 14
10150: EQUAL
10151: IFFALSE 10172
// points := [ 10 , 0 , 0 ] ;
10153: LD_ADDR_VAR 0 9
10157: PUSH
10158: LD_INT 10
10160: PUSH
10161: LD_INT 0
10163: PUSH
10164: LD_INT 0
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: LIST
10171: ST_TO_ADDR
// if GetClass ( i ) = 11 then
10172: LD_VAR 0 6
10176: PPUSH
10177: CALL_OW 257
10181: PUSH
10182: LD_INT 11
10184: EQUAL
10185: IFFALSE 10206
// points := [ 30 , 10 , 5 ] ;
10187: LD_ADDR_VAR 0 9
10191: PUSH
10192: LD_INT 30
10194: PUSH
10195: LD_INT 10
10197: PUSH
10198: LD_INT 5
10200: PUSH
10201: EMPTY
10202: LIST
10203: LIST
10204: LIST
10205: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
10206: LD_VAR 0 1
10210: PPUSH
10211: LD_INT 5
10213: PPUSH
10214: CALL_OW 321
10218: PUSH
10219: LD_INT 2
10221: EQUAL
10222: IFFALSE 10239
// bpoints := bpoints * 1.8 ;
10224: LD_ADDR_VAR 0 10
10228: PUSH
10229: LD_VAR 0 10
10233: PUSH
10234: LD_REAL  1.80000000000000E+0000
10237: MUL
10238: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
10239: LD_VAR 0 6
10243: PPUSH
10244: CALL_OW 257
10248: PUSH
10249: LD_INT 1
10251: PUSH
10252: LD_INT 2
10254: PUSH
10255: LD_INT 3
10257: PUSH
10258: LD_INT 4
10260: PUSH
10261: EMPTY
10262: LIST
10263: LIST
10264: LIST
10265: LIST
10266: IN
10267: PUSH
10268: LD_VAR 0 1
10272: PPUSH
10273: LD_INT 51
10275: PPUSH
10276: CALL_OW 321
10280: PUSH
10281: LD_INT 2
10283: EQUAL
10284: AND
10285: IFFALSE 10302
// bpoints := bpoints * 1.2 ;
10287: LD_ADDR_VAR 0 10
10291: PUSH
10292: LD_VAR 0 10
10296: PUSH
10297: LD_REAL  1.20000000000000E+0000
10300: MUL
10301: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
10302: LD_VAR 0 6
10306: PPUSH
10307: CALL_OW 257
10311: PUSH
10312: LD_INT 5
10314: PUSH
10315: LD_INT 7
10317: PUSH
10318: LD_INT 9
10320: PUSH
10321: EMPTY
10322: LIST
10323: LIST
10324: LIST
10325: IN
10326: PUSH
10327: LD_VAR 0 1
10331: PPUSH
10332: LD_INT 52
10334: PPUSH
10335: CALL_OW 321
10339: PUSH
10340: LD_INT 2
10342: EQUAL
10343: AND
10344: IFFALSE 10361
// bpoints := bpoints * 1.5 ;
10346: LD_ADDR_VAR 0 10
10350: PUSH
10351: LD_VAR 0 10
10355: PUSH
10356: LD_REAL  1.50000000000000E+0000
10359: MUL
10360: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10361: LD_VAR 0 1
10365: PPUSH
10366: LD_INT 66
10368: PPUSH
10369: CALL_OW 321
10373: PUSH
10374: LD_INT 2
10376: EQUAL
10377: IFFALSE 10394
// bpoints := bpoints * 1.1 ;
10379: LD_ADDR_VAR 0 10
10383: PUSH
10384: LD_VAR 0 10
10388: PUSH
10389: LD_REAL  1.10000000000000E+0000
10392: MUL
10393: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10394: LD_ADDR_VAR 0 10
10398: PUSH
10399: LD_VAR 0 10
10403: PUSH
10404: LD_VAR 0 6
10408: PPUSH
10409: LD_INT 1
10411: PPUSH
10412: CALL_OW 259
10416: PUSH
10417: LD_REAL  1.15000000000000E+0000
10420: MUL
10421: MUL
10422: ST_TO_ADDR
// end ; unit_vehicle :
10423: GO 11251
10425: LD_INT 2
10427: DOUBLE
10428: EQUAL
10429: IFTRUE 10433
10431: GO 11239
10433: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10434: LD_VAR 0 6
10438: PPUSH
10439: CALL_OW 264
10443: PUSH
10444: LD_INT 2
10446: PUSH
10447: LD_INT 42
10449: PUSH
10450: LD_INT 24
10452: PUSH
10453: EMPTY
10454: LIST
10455: LIST
10456: LIST
10457: IN
10458: IFFALSE 10479
// points := [ 25 , 5 , 3 ] ;
10460: LD_ADDR_VAR 0 9
10464: PUSH
10465: LD_INT 25
10467: PUSH
10468: LD_INT 5
10470: PUSH
10471: LD_INT 3
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: LIST
10478: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10479: LD_VAR 0 6
10483: PPUSH
10484: CALL_OW 264
10488: PUSH
10489: LD_INT 4
10491: PUSH
10492: LD_INT 43
10494: PUSH
10495: LD_INT 25
10497: PUSH
10498: EMPTY
10499: LIST
10500: LIST
10501: LIST
10502: IN
10503: IFFALSE 10524
// points := [ 40 , 15 , 5 ] ;
10505: LD_ADDR_VAR 0 9
10509: PUSH
10510: LD_INT 40
10512: PUSH
10513: LD_INT 15
10515: PUSH
10516: LD_INT 5
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: LIST
10523: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10524: LD_VAR 0 6
10528: PPUSH
10529: CALL_OW 264
10533: PUSH
10534: LD_INT 3
10536: PUSH
10537: LD_INT 23
10539: PUSH
10540: EMPTY
10541: LIST
10542: LIST
10543: IN
10544: IFFALSE 10565
// points := [ 7 , 25 , 8 ] ;
10546: LD_ADDR_VAR 0 9
10550: PUSH
10551: LD_INT 7
10553: PUSH
10554: LD_INT 25
10556: PUSH
10557: LD_INT 8
10559: PUSH
10560: EMPTY
10561: LIST
10562: LIST
10563: LIST
10564: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10565: LD_VAR 0 6
10569: PPUSH
10570: CALL_OW 264
10574: PUSH
10575: LD_INT 5
10577: PUSH
10578: LD_INT 27
10580: PUSH
10581: LD_INT 44
10583: PUSH
10584: EMPTY
10585: LIST
10586: LIST
10587: LIST
10588: IN
10589: IFFALSE 10610
// points := [ 14 , 50 , 16 ] ;
10591: LD_ADDR_VAR 0 9
10595: PUSH
10596: LD_INT 14
10598: PUSH
10599: LD_INT 50
10601: PUSH
10602: LD_INT 16
10604: PUSH
10605: EMPTY
10606: LIST
10607: LIST
10608: LIST
10609: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10610: LD_VAR 0 6
10614: PPUSH
10615: CALL_OW 264
10619: PUSH
10620: LD_INT 6
10622: PUSH
10623: LD_INT 46
10625: PUSH
10626: EMPTY
10627: LIST
10628: LIST
10629: IN
10630: IFFALSE 10651
// points := [ 32 , 120 , 70 ] ;
10632: LD_ADDR_VAR 0 9
10636: PUSH
10637: LD_INT 32
10639: PUSH
10640: LD_INT 120
10642: PUSH
10643: LD_INT 70
10645: PUSH
10646: EMPTY
10647: LIST
10648: LIST
10649: LIST
10650: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10651: LD_VAR 0 6
10655: PPUSH
10656: CALL_OW 264
10660: PUSH
10661: LD_INT 7
10663: PUSH
10664: LD_INT 28
10666: PUSH
10667: LD_INT 45
10669: PUSH
10670: LD_INT 92
10672: PUSH
10673: EMPTY
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: IN
10679: IFFALSE 10700
// points := [ 35 , 20 , 45 ] ;
10681: LD_ADDR_VAR 0 9
10685: PUSH
10686: LD_INT 35
10688: PUSH
10689: LD_INT 20
10691: PUSH
10692: LD_INT 45
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: LIST
10699: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10700: LD_VAR 0 6
10704: PPUSH
10705: CALL_OW 264
10709: PUSH
10710: LD_INT 47
10712: PUSH
10713: EMPTY
10714: LIST
10715: IN
10716: IFFALSE 10737
// points := [ 67 , 45 , 75 ] ;
10718: LD_ADDR_VAR 0 9
10722: PUSH
10723: LD_INT 67
10725: PUSH
10726: LD_INT 45
10728: PUSH
10729: LD_INT 75
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: LIST
10736: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10737: LD_VAR 0 6
10741: PPUSH
10742: CALL_OW 264
10746: PUSH
10747: LD_INT 26
10749: PUSH
10750: EMPTY
10751: LIST
10752: IN
10753: IFFALSE 10774
// points := [ 120 , 30 , 80 ] ;
10755: LD_ADDR_VAR 0 9
10759: PUSH
10760: LD_INT 120
10762: PUSH
10763: LD_INT 30
10765: PUSH
10766: LD_INT 80
10768: PUSH
10769: EMPTY
10770: LIST
10771: LIST
10772: LIST
10773: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10774: LD_VAR 0 6
10778: PPUSH
10779: CALL_OW 264
10783: PUSH
10784: LD_INT 22
10786: PUSH
10787: EMPTY
10788: LIST
10789: IN
10790: IFFALSE 10811
// points := [ 40 , 1 , 1 ] ;
10792: LD_ADDR_VAR 0 9
10796: PUSH
10797: LD_INT 40
10799: PUSH
10800: LD_INT 1
10802: PUSH
10803: LD_INT 1
10805: PUSH
10806: EMPTY
10807: LIST
10808: LIST
10809: LIST
10810: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10811: LD_VAR 0 6
10815: PPUSH
10816: CALL_OW 264
10820: PUSH
10821: LD_INT 29
10823: PUSH
10824: EMPTY
10825: LIST
10826: IN
10827: IFFALSE 10848
// points := [ 70 , 200 , 400 ] ;
10829: LD_ADDR_VAR 0 9
10833: PUSH
10834: LD_INT 70
10836: PUSH
10837: LD_INT 200
10839: PUSH
10840: LD_INT 400
10842: PUSH
10843: EMPTY
10844: LIST
10845: LIST
10846: LIST
10847: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10848: LD_VAR 0 6
10852: PPUSH
10853: CALL_OW 264
10857: PUSH
10858: LD_INT 14
10860: PUSH
10861: LD_INT 53
10863: PUSH
10864: EMPTY
10865: LIST
10866: LIST
10867: IN
10868: IFFALSE 10889
// points := [ 40 , 10 , 20 ] ;
10870: LD_ADDR_VAR 0 9
10874: PUSH
10875: LD_INT 40
10877: PUSH
10878: LD_INT 10
10880: PUSH
10881: LD_INT 20
10883: PUSH
10884: EMPTY
10885: LIST
10886: LIST
10887: LIST
10888: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10889: LD_VAR 0 6
10893: PPUSH
10894: CALL_OW 264
10898: PUSH
10899: LD_INT 9
10901: PUSH
10902: EMPTY
10903: LIST
10904: IN
10905: IFFALSE 10926
// points := [ 5 , 70 , 20 ] ;
10907: LD_ADDR_VAR 0 9
10911: PUSH
10912: LD_INT 5
10914: PUSH
10915: LD_INT 70
10917: PUSH
10918: LD_INT 20
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: LIST
10925: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10926: LD_VAR 0 6
10930: PPUSH
10931: CALL_OW 264
10935: PUSH
10936: LD_INT 10
10938: PUSH
10939: EMPTY
10940: LIST
10941: IN
10942: IFFALSE 10963
// points := [ 35 , 110 , 70 ] ;
10944: LD_ADDR_VAR 0 9
10948: PUSH
10949: LD_INT 35
10951: PUSH
10952: LD_INT 110
10954: PUSH
10955: LD_INT 70
10957: PUSH
10958: EMPTY
10959: LIST
10960: LIST
10961: LIST
10962: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10963: LD_VAR 0 6
10967: PPUSH
10968: CALL_OW 265
10972: PUSH
10973: LD_INT 25
10975: EQUAL
10976: IFFALSE 10997
// points := [ 80 , 65 , 100 ] ;
10978: LD_ADDR_VAR 0 9
10982: PUSH
10983: LD_INT 80
10985: PUSH
10986: LD_INT 65
10988: PUSH
10989: LD_INT 100
10991: PUSH
10992: EMPTY
10993: LIST
10994: LIST
10995: LIST
10996: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10997: LD_VAR 0 6
11001: PPUSH
11002: CALL_OW 263
11006: PUSH
11007: LD_INT 1
11009: EQUAL
11010: IFFALSE 11045
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
11012: LD_ADDR_VAR 0 10
11016: PUSH
11017: LD_VAR 0 10
11021: PUSH
11022: LD_VAR 0 6
11026: PPUSH
11027: CALL_OW 311
11031: PPUSH
11032: LD_INT 3
11034: PPUSH
11035: CALL_OW 259
11039: PUSH
11040: LD_INT 4
11042: MUL
11043: MUL
11044: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
11045: LD_VAR 0 6
11049: PPUSH
11050: CALL_OW 263
11054: PUSH
11055: LD_INT 2
11057: EQUAL
11058: IFFALSE 11109
// begin j := IsControledBy ( i ) ;
11060: LD_ADDR_VAR 0 7
11064: PUSH
11065: LD_VAR 0 6
11069: PPUSH
11070: CALL_OW 312
11074: ST_TO_ADDR
// if j then
11075: LD_VAR 0 7
11079: IFFALSE 11109
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
11081: LD_ADDR_VAR 0 10
11085: PUSH
11086: LD_VAR 0 10
11090: PUSH
11091: LD_VAR 0 7
11095: PPUSH
11096: LD_INT 3
11098: PPUSH
11099: CALL_OW 259
11103: PUSH
11104: LD_INT 3
11106: MUL
11107: MUL
11108: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
11109: LD_VAR 0 6
11113: PPUSH
11114: CALL_OW 264
11118: PUSH
11119: LD_INT 5
11121: PUSH
11122: LD_INT 6
11124: PUSH
11125: LD_INT 46
11127: PUSH
11128: LD_INT 44
11130: PUSH
11131: LD_INT 47
11133: PUSH
11134: LD_INT 45
11136: PUSH
11137: LD_INT 28
11139: PUSH
11140: LD_INT 7
11142: PUSH
11143: LD_INT 27
11145: PUSH
11146: LD_INT 29
11148: PUSH
11149: EMPTY
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: IN
11161: PUSH
11162: LD_VAR 0 1
11166: PPUSH
11167: LD_INT 52
11169: PPUSH
11170: CALL_OW 321
11174: PUSH
11175: LD_INT 2
11177: EQUAL
11178: AND
11179: IFFALSE 11196
// bpoints := bpoints * 1.2 ;
11181: LD_ADDR_VAR 0 10
11185: PUSH
11186: LD_VAR 0 10
11190: PUSH
11191: LD_REAL  1.20000000000000E+0000
11194: MUL
11195: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
11196: LD_VAR 0 6
11200: PPUSH
11201: CALL_OW 264
11205: PUSH
11206: LD_INT 6
11208: PUSH
11209: LD_INT 46
11211: PUSH
11212: LD_INT 47
11214: PUSH
11215: EMPTY
11216: LIST
11217: LIST
11218: LIST
11219: IN
11220: IFFALSE 11237
// bpoints := bpoints * 1.2 ;
11222: LD_ADDR_VAR 0 10
11226: PUSH
11227: LD_VAR 0 10
11231: PUSH
11232: LD_REAL  1.20000000000000E+0000
11235: MUL
11236: ST_TO_ADDR
// end ; unit_building :
11237: GO 11251
11239: LD_INT 3
11241: DOUBLE
11242: EQUAL
11243: IFTRUE 11247
11245: GO 11250
11247: POP
// ; end ;
11248: GO 11251
11250: POP
// for j = 1 to 3 do
11251: LD_ADDR_VAR 0 7
11255: PUSH
11256: DOUBLE
11257: LD_INT 1
11259: DEC
11260: ST_TO_ADDR
11261: LD_INT 3
11263: PUSH
11264: FOR_TO
11265: IFFALSE 11318
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
11267: LD_ADDR_VAR 0 5
11271: PUSH
11272: LD_VAR 0 5
11276: PPUSH
11277: LD_VAR 0 7
11281: PPUSH
11282: LD_VAR 0 5
11286: PUSH
11287: LD_VAR 0 7
11291: ARRAY
11292: PUSH
11293: LD_VAR 0 9
11297: PUSH
11298: LD_VAR 0 7
11302: ARRAY
11303: PUSH
11304: LD_VAR 0 10
11308: MUL
11309: PLUS
11310: PPUSH
11311: CALL_OW 1
11315: ST_TO_ADDR
11316: GO 11264
11318: POP
11319: POP
// end ;
11320: GO 9799
11322: POP
11323: POP
// result := Replace ( result , 4 , tmp ) ;
11324: LD_ADDR_VAR 0 5
11328: PUSH
11329: LD_VAR 0 5
11333: PPUSH
11334: LD_INT 4
11336: PPUSH
11337: LD_VAR 0 8
11341: PPUSH
11342: CALL_OW 1
11346: ST_TO_ADDR
// end ;
11347: LD_VAR 0 5
11351: RET
// export function DangerAtRange ( unit , range ) ; begin
11352: LD_INT 0
11354: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11355: LD_ADDR_VAR 0 3
11359: PUSH
11360: LD_VAR 0 1
11364: PPUSH
11365: CALL_OW 255
11369: PPUSH
11370: LD_VAR 0 1
11374: PPUSH
11375: CALL_OW 250
11379: PPUSH
11380: LD_VAR 0 1
11384: PPUSH
11385: CALL_OW 251
11389: PPUSH
11390: LD_VAR 0 2
11394: PPUSH
11395: CALL 9651 0 4
11399: ST_TO_ADDR
// end ;
11400: LD_VAR 0 3
11404: RET
// export function DangerInArea ( side , area ) ; begin
11405: LD_INT 0
11407: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11408: LD_ADDR_VAR 0 3
11412: PUSH
11413: LD_VAR 0 2
11417: PPUSH
11418: LD_INT 81
11420: PUSH
11421: LD_VAR 0 1
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: PPUSH
11430: CALL_OW 70
11434: ST_TO_ADDR
// end ;
11435: LD_VAR 0 3
11439: RET
// export function IsExtension ( b ) ; begin
11440: LD_INT 0
11442: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11443: LD_ADDR_VAR 0 2
11447: PUSH
11448: LD_VAR 0 1
11452: PUSH
11453: LD_INT 23
11455: PUSH
11456: LD_INT 20
11458: PUSH
11459: LD_INT 22
11461: PUSH
11462: LD_INT 17
11464: PUSH
11465: LD_INT 24
11467: PUSH
11468: LD_INT 21
11470: PUSH
11471: LD_INT 19
11473: PUSH
11474: LD_INT 16
11476: PUSH
11477: LD_INT 25
11479: PUSH
11480: LD_INT 18
11482: PUSH
11483: EMPTY
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: IN
11495: ST_TO_ADDR
// end ;
11496: LD_VAR 0 2
11500: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11501: LD_INT 0
11503: PPUSH
11504: PPUSH
11505: PPUSH
// result := [ ] ;
11506: LD_ADDR_VAR 0 4
11510: PUSH
11511: EMPTY
11512: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11513: LD_ADDR_VAR 0 5
11517: PUSH
11518: LD_VAR 0 2
11522: PPUSH
11523: LD_INT 21
11525: PUSH
11526: LD_INT 3
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: PPUSH
11533: CALL_OW 70
11537: ST_TO_ADDR
// if not tmp then
11538: LD_VAR 0 5
11542: NOT
11543: IFFALSE 11547
// exit ;
11545: GO 11611
// if checkLink then
11547: LD_VAR 0 3
11551: IFFALSE 11601
// begin for i in tmp do
11553: LD_ADDR_VAR 0 6
11557: PUSH
11558: LD_VAR 0 5
11562: PUSH
11563: FOR_IN
11564: IFFALSE 11599
// if GetBase ( i ) <> base then
11566: LD_VAR 0 6
11570: PPUSH
11571: CALL_OW 274
11575: PUSH
11576: LD_VAR 0 1
11580: NONEQUAL
11581: IFFALSE 11597
// ComLinkToBase ( base , i ) ;
11583: LD_VAR 0 1
11587: PPUSH
11588: LD_VAR 0 6
11592: PPUSH
11593: CALL_OW 169
11597: GO 11563
11599: POP
11600: POP
// end ; result := tmp ;
11601: LD_ADDR_VAR 0 4
11605: PUSH
11606: LD_VAR 0 5
11610: ST_TO_ADDR
// end ;
11611: LD_VAR 0 4
11615: RET
// export function ComComplete ( units , b ) ; var i ; begin
11616: LD_INT 0
11618: PPUSH
11619: PPUSH
// if not units then
11620: LD_VAR 0 1
11624: NOT
11625: IFFALSE 11629
// exit ;
11627: GO 11719
// for i in units do
11629: LD_ADDR_VAR 0 4
11633: PUSH
11634: LD_VAR 0 1
11638: PUSH
11639: FOR_IN
11640: IFFALSE 11717
// if BuildingStatus ( b ) = bs_build then
11642: LD_VAR 0 2
11646: PPUSH
11647: CALL_OW 461
11651: PUSH
11652: LD_INT 1
11654: EQUAL
11655: IFFALSE 11715
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11657: LD_VAR 0 4
11661: PPUSH
11662: LD_STRING h
11664: PUSH
11665: LD_VAR 0 2
11669: PPUSH
11670: CALL_OW 250
11674: PUSH
11675: LD_VAR 0 2
11679: PPUSH
11680: CALL_OW 251
11684: PUSH
11685: LD_VAR 0 2
11689: PUSH
11690: LD_INT 0
11692: PUSH
11693: LD_INT 0
11695: PUSH
11696: LD_INT 0
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: PUSH
11708: EMPTY
11709: LIST
11710: PPUSH
11711: CALL_OW 446
11715: GO 11639
11717: POP
11718: POP
// end ;
11719: LD_VAR 0 3
11723: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11724: LD_INT 0
11726: PPUSH
11727: PPUSH
11728: PPUSH
11729: PPUSH
11730: PPUSH
11731: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11732: LD_VAR 0 1
11736: NOT
11737: PUSH
11738: LD_VAR 0 1
11742: PPUSH
11743: CALL_OW 263
11747: PUSH
11748: LD_INT 2
11750: NONEQUAL
11751: OR
11752: IFFALSE 11756
// exit ;
11754: GO 12072
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11756: LD_ADDR_VAR 0 6
11760: PUSH
11761: LD_INT 22
11763: PUSH
11764: LD_VAR 0 1
11768: PPUSH
11769: CALL_OW 255
11773: PUSH
11774: EMPTY
11775: LIST
11776: LIST
11777: PUSH
11778: LD_INT 2
11780: PUSH
11781: LD_INT 30
11783: PUSH
11784: LD_INT 36
11786: PUSH
11787: EMPTY
11788: LIST
11789: LIST
11790: PUSH
11791: LD_INT 34
11793: PUSH
11794: LD_INT 31
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: PUSH
11801: EMPTY
11802: LIST
11803: LIST
11804: LIST
11805: PUSH
11806: EMPTY
11807: LIST
11808: LIST
11809: PPUSH
11810: CALL_OW 69
11814: ST_TO_ADDR
// if not tmp then
11815: LD_VAR 0 6
11819: NOT
11820: IFFALSE 11824
// exit ;
11822: GO 12072
// result := [ ] ;
11824: LD_ADDR_VAR 0 2
11828: PUSH
11829: EMPTY
11830: ST_TO_ADDR
// for i in tmp do
11831: LD_ADDR_VAR 0 3
11835: PUSH
11836: LD_VAR 0 6
11840: PUSH
11841: FOR_IN
11842: IFFALSE 11913
// begin t := UnitsInside ( i ) ;
11844: LD_ADDR_VAR 0 4
11848: PUSH
11849: LD_VAR 0 3
11853: PPUSH
11854: CALL_OW 313
11858: ST_TO_ADDR
// if t then
11859: LD_VAR 0 4
11863: IFFALSE 11911
// for j in t do
11865: LD_ADDR_VAR 0 7
11869: PUSH
11870: LD_VAR 0 4
11874: PUSH
11875: FOR_IN
11876: IFFALSE 11909
// result := Replace ( result , result + 1 , j ) ;
11878: LD_ADDR_VAR 0 2
11882: PUSH
11883: LD_VAR 0 2
11887: PPUSH
11888: LD_VAR 0 2
11892: PUSH
11893: LD_INT 1
11895: PLUS
11896: PPUSH
11897: LD_VAR 0 7
11901: PPUSH
11902: CALL_OW 1
11906: ST_TO_ADDR
11907: GO 11875
11909: POP
11910: POP
// end ;
11911: GO 11841
11913: POP
11914: POP
// if not result then
11915: LD_VAR 0 2
11919: NOT
11920: IFFALSE 11924
// exit ;
11922: GO 12072
// mech := result [ 1 ] ;
11924: LD_ADDR_VAR 0 5
11928: PUSH
11929: LD_VAR 0 2
11933: PUSH
11934: LD_INT 1
11936: ARRAY
11937: ST_TO_ADDR
// if result > 1 then
11938: LD_VAR 0 2
11942: PUSH
11943: LD_INT 1
11945: GREATER
11946: IFFALSE 12058
// begin for i = 2 to result do
11948: LD_ADDR_VAR 0 3
11952: PUSH
11953: DOUBLE
11954: LD_INT 2
11956: DEC
11957: ST_TO_ADDR
11958: LD_VAR 0 2
11962: PUSH
11963: FOR_TO
11964: IFFALSE 12056
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11966: LD_ADDR_VAR 0 4
11970: PUSH
11971: LD_VAR 0 2
11975: PUSH
11976: LD_VAR 0 3
11980: ARRAY
11981: PPUSH
11982: LD_INT 3
11984: PPUSH
11985: CALL_OW 259
11989: PUSH
11990: LD_VAR 0 2
11994: PUSH
11995: LD_VAR 0 3
11999: ARRAY
12000: PPUSH
12001: CALL_OW 432
12005: MINUS
12006: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
12007: LD_VAR 0 4
12011: PUSH
12012: LD_VAR 0 5
12016: PPUSH
12017: LD_INT 3
12019: PPUSH
12020: CALL_OW 259
12024: PUSH
12025: LD_VAR 0 5
12029: PPUSH
12030: CALL_OW 432
12034: MINUS
12035: GREATEREQUAL
12036: IFFALSE 12054
// mech := result [ i ] ;
12038: LD_ADDR_VAR 0 5
12042: PUSH
12043: LD_VAR 0 2
12047: PUSH
12048: LD_VAR 0 3
12052: ARRAY
12053: ST_TO_ADDR
// end ;
12054: GO 11963
12056: POP
12057: POP
// end ; ComLinkTo ( vehicle , mech ) ;
12058: LD_VAR 0 1
12062: PPUSH
12063: LD_VAR 0 5
12067: PPUSH
12068: CALL_OW 135
// end ;
12072: LD_VAR 0 2
12076: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
12077: LD_INT 0
12079: PPUSH
12080: PPUSH
12081: PPUSH
12082: PPUSH
12083: PPUSH
12084: PPUSH
12085: PPUSH
12086: PPUSH
12087: PPUSH
12088: PPUSH
12089: PPUSH
12090: PPUSH
12091: PPUSH
// result := [ ] ;
12092: LD_ADDR_VAR 0 7
12096: PUSH
12097: EMPTY
12098: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
12099: LD_VAR 0 1
12103: PPUSH
12104: CALL_OW 266
12108: PUSH
12109: LD_INT 0
12111: PUSH
12112: LD_INT 1
12114: PUSH
12115: EMPTY
12116: LIST
12117: LIST
12118: IN
12119: NOT
12120: IFFALSE 12124
// exit ;
12122: GO 13758
// if name then
12124: LD_VAR 0 3
12128: IFFALSE 12144
// SetBName ( base_dep , name ) ;
12130: LD_VAR 0 1
12134: PPUSH
12135: LD_VAR 0 3
12139: PPUSH
12140: CALL_OW 500
// base := GetBase ( base_dep ) ;
12144: LD_ADDR_VAR 0 15
12148: PUSH
12149: LD_VAR 0 1
12153: PPUSH
12154: CALL_OW 274
12158: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12159: LD_ADDR_VAR 0 16
12163: PUSH
12164: LD_VAR 0 1
12168: PPUSH
12169: CALL_OW 255
12173: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
12174: LD_ADDR_VAR 0 17
12178: PUSH
12179: LD_VAR 0 1
12183: PPUSH
12184: CALL_OW 248
12188: ST_TO_ADDR
// if sources then
12189: LD_VAR 0 5
12193: IFFALSE 12240
// for i = 1 to 3 do
12195: LD_ADDR_VAR 0 8
12199: PUSH
12200: DOUBLE
12201: LD_INT 1
12203: DEC
12204: ST_TO_ADDR
12205: LD_INT 3
12207: PUSH
12208: FOR_TO
12209: IFFALSE 12238
// AddResourceType ( base , i , sources [ i ] ) ;
12211: LD_VAR 0 15
12215: PPUSH
12216: LD_VAR 0 8
12220: PPUSH
12221: LD_VAR 0 5
12225: PUSH
12226: LD_VAR 0 8
12230: ARRAY
12231: PPUSH
12232: CALL_OW 276
12236: GO 12208
12238: POP
12239: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
12240: LD_ADDR_VAR 0 18
12244: PUSH
12245: LD_VAR 0 15
12249: PPUSH
12250: LD_VAR 0 2
12254: PPUSH
12255: LD_INT 1
12257: PPUSH
12258: CALL 11501 0 3
12262: ST_TO_ADDR
// InitHc ;
12263: CALL_OW 19
// InitUc ;
12267: CALL_OW 18
// uc_side := side ;
12271: LD_ADDR_OWVAR 20
12275: PUSH
12276: LD_VAR 0 16
12280: ST_TO_ADDR
// uc_nation := nation ;
12281: LD_ADDR_OWVAR 21
12285: PUSH
12286: LD_VAR 0 17
12290: ST_TO_ADDR
// if buildings then
12291: LD_VAR 0 18
12295: IFFALSE 13617
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12297: LD_ADDR_VAR 0 19
12301: PUSH
12302: LD_VAR 0 18
12306: PPUSH
12307: LD_INT 2
12309: PUSH
12310: LD_INT 30
12312: PUSH
12313: LD_INT 29
12315: PUSH
12316: EMPTY
12317: LIST
12318: LIST
12319: PUSH
12320: LD_INT 30
12322: PUSH
12323: LD_INT 30
12325: PUSH
12326: EMPTY
12327: LIST
12328: LIST
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: LIST
12334: PPUSH
12335: CALL_OW 72
12339: ST_TO_ADDR
// if tmp then
12340: LD_VAR 0 19
12344: IFFALSE 12392
// for i in tmp do
12346: LD_ADDR_VAR 0 8
12350: PUSH
12351: LD_VAR 0 19
12355: PUSH
12356: FOR_IN
12357: IFFALSE 12390
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12359: LD_VAR 0 8
12363: PPUSH
12364: CALL_OW 250
12368: PPUSH
12369: LD_VAR 0 8
12373: PPUSH
12374: CALL_OW 251
12378: PPUSH
12379: LD_VAR 0 16
12383: PPUSH
12384: CALL_OW 441
12388: GO 12356
12390: POP
12391: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12392: LD_VAR 0 18
12396: PPUSH
12397: LD_INT 2
12399: PUSH
12400: LD_INT 30
12402: PUSH
12403: LD_INT 32
12405: PUSH
12406: EMPTY
12407: LIST
12408: LIST
12409: PUSH
12410: LD_INT 30
12412: PUSH
12413: LD_INT 33
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: LIST
12424: PPUSH
12425: CALL_OW 72
12429: IFFALSE 12517
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12431: LD_ADDR_VAR 0 8
12435: PUSH
12436: LD_VAR 0 18
12440: PPUSH
12441: LD_INT 2
12443: PUSH
12444: LD_INT 30
12446: PUSH
12447: LD_INT 32
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: PUSH
12454: LD_INT 30
12456: PUSH
12457: LD_INT 33
12459: PUSH
12460: EMPTY
12461: LIST
12462: LIST
12463: PUSH
12464: EMPTY
12465: LIST
12466: LIST
12467: LIST
12468: PPUSH
12469: CALL_OW 72
12473: PUSH
12474: FOR_IN
12475: IFFALSE 12515
// begin if not GetBWeapon ( i ) then
12477: LD_VAR 0 8
12481: PPUSH
12482: CALL_OW 269
12486: NOT
12487: IFFALSE 12513
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12489: LD_VAR 0 8
12493: PPUSH
12494: LD_VAR 0 8
12498: PPUSH
12499: LD_VAR 0 2
12503: PPUSH
12504: CALL 13763 0 2
12508: PPUSH
12509: CALL_OW 431
// end ;
12513: GO 12474
12515: POP
12516: POP
// end ; for i = 1 to personel do
12517: LD_ADDR_VAR 0 8
12521: PUSH
12522: DOUBLE
12523: LD_INT 1
12525: DEC
12526: ST_TO_ADDR
12527: LD_VAR 0 6
12531: PUSH
12532: FOR_TO
12533: IFFALSE 13597
// begin if i > 4 then
12535: LD_VAR 0 8
12539: PUSH
12540: LD_INT 4
12542: GREATER
12543: IFFALSE 12547
// break ;
12545: GO 13597
// case i of 1 :
12547: LD_VAR 0 8
12551: PUSH
12552: LD_INT 1
12554: DOUBLE
12555: EQUAL
12556: IFTRUE 12560
12558: GO 12640
12560: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12561: LD_ADDR_VAR 0 12
12565: PUSH
12566: LD_VAR 0 18
12570: PPUSH
12571: LD_INT 22
12573: PUSH
12574: LD_VAR 0 16
12578: PUSH
12579: EMPTY
12580: LIST
12581: LIST
12582: PUSH
12583: LD_INT 58
12585: PUSH
12586: EMPTY
12587: LIST
12588: PUSH
12589: LD_INT 2
12591: PUSH
12592: LD_INT 30
12594: PUSH
12595: LD_INT 32
12597: PUSH
12598: EMPTY
12599: LIST
12600: LIST
12601: PUSH
12602: LD_INT 30
12604: PUSH
12605: LD_INT 4
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: PUSH
12612: LD_INT 30
12614: PUSH
12615: LD_INT 5
12617: PUSH
12618: EMPTY
12619: LIST
12620: LIST
12621: PUSH
12622: EMPTY
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: PUSH
12628: EMPTY
12629: LIST
12630: LIST
12631: LIST
12632: PPUSH
12633: CALL_OW 72
12637: ST_TO_ADDR
12638: GO 12862
12640: LD_INT 2
12642: DOUBLE
12643: EQUAL
12644: IFTRUE 12648
12646: GO 12710
12648: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12649: LD_ADDR_VAR 0 12
12653: PUSH
12654: LD_VAR 0 18
12658: PPUSH
12659: LD_INT 22
12661: PUSH
12662: LD_VAR 0 16
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: PUSH
12671: LD_INT 2
12673: PUSH
12674: LD_INT 30
12676: PUSH
12677: LD_INT 0
12679: PUSH
12680: EMPTY
12681: LIST
12682: LIST
12683: PUSH
12684: LD_INT 30
12686: PUSH
12687: LD_INT 1
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: PUSH
12694: EMPTY
12695: LIST
12696: LIST
12697: LIST
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: PPUSH
12703: CALL_OW 72
12707: ST_TO_ADDR
12708: GO 12862
12710: LD_INT 3
12712: DOUBLE
12713: EQUAL
12714: IFTRUE 12718
12716: GO 12780
12718: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12719: LD_ADDR_VAR 0 12
12723: PUSH
12724: LD_VAR 0 18
12728: PPUSH
12729: LD_INT 22
12731: PUSH
12732: LD_VAR 0 16
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: PUSH
12741: LD_INT 2
12743: PUSH
12744: LD_INT 30
12746: PUSH
12747: LD_INT 2
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: PUSH
12754: LD_INT 30
12756: PUSH
12757: LD_INT 3
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: PUSH
12764: EMPTY
12765: LIST
12766: LIST
12767: LIST
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: PPUSH
12773: CALL_OW 72
12777: ST_TO_ADDR
12778: GO 12862
12780: LD_INT 4
12782: DOUBLE
12783: EQUAL
12784: IFTRUE 12788
12786: GO 12861
12788: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12789: LD_ADDR_VAR 0 12
12793: PUSH
12794: LD_VAR 0 18
12798: PPUSH
12799: LD_INT 22
12801: PUSH
12802: LD_VAR 0 16
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: PUSH
12811: LD_INT 2
12813: PUSH
12814: LD_INT 30
12816: PUSH
12817: LD_INT 6
12819: PUSH
12820: EMPTY
12821: LIST
12822: LIST
12823: PUSH
12824: LD_INT 30
12826: PUSH
12827: LD_INT 7
12829: PUSH
12830: EMPTY
12831: LIST
12832: LIST
12833: PUSH
12834: LD_INT 30
12836: PUSH
12837: LD_INT 8
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: PUSH
12844: EMPTY
12845: LIST
12846: LIST
12847: LIST
12848: LIST
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: PPUSH
12854: CALL_OW 72
12858: ST_TO_ADDR
12859: GO 12862
12861: POP
// if i = 1 then
12862: LD_VAR 0 8
12866: PUSH
12867: LD_INT 1
12869: EQUAL
12870: IFFALSE 12981
// begin tmp := [ ] ;
12872: LD_ADDR_VAR 0 19
12876: PUSH
12877: EMPTY
12878: ST_TO_ADDR
// for j in f do
12879: LD_ADDR_VAR 0 9
12883: PUSH
12884: LD_VAR 0 12
12888: PUSH
12889: FOR_IN
12890: IFFALSE 12963
// if GetBType ( j ) = b_bunker then
12892: LD_VAR 0 9
12896: PPUSH
12897: CALL_OW 266
12901: PUSH
12902: LD_INT 32
12904: EQUAL
12905: IFFALSE 12932
// tmp := Insert ( tmp , 1 , j ) else
12907: LD_ADDR_VAR 0 19
12911: PUSH
12912: LD_VAR 0 19
12916: PPUSH
12917: LD_INT 1
12919: PPUSH
12920: LD_VAR 0 9
12924: PPUSH
12925: CALL_OW 2
12929: ST_TO_ADDR
12930: GO 12961
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12932: LD_ADDR_VAR 0 19
12936: PUSH
12937: LD_VAR 0 19
12941: PPUSH
12942: LD_VAR 0 19
12946: PUSH
12947: LD_INT 1
12949: PLUS
12950: PPUSH
12951: LD_VAR 0 9
12955: PPUSH
12956: CALL_OW 2
12960: ST_TO_ADDR
12961: GO 12889
12963: POP
12964: POP
// if tmp then
12965: LD_VAR 0 19
12969: IFFALSE 12981
// f := tmp ;
12971: LD_ADDR_VAR 0 12
12975: PUSH
12976: LD_VAR 0 19
12980: ST_TO_ADDR
// end ; x := personel [ i ] ;
12981: LD_ADDR_VAR 0 13
12985: PUSH
12986: LD_VAR 0 6
12990: PUSH
12991: LD_VAR 0 8
12995: ARRAY
12996: ST_TO_ADDR
// if x = - 1 then
12997: LD_VAR 0 13
13001: PUSH
13002: LD_INT 1
13004: NEG
13005: EQUAL
13006: IFFALSE 13215
// begin for j in f do
13008: LD_ADDR_VAR 0 9
13012: PUSH
13013: LD_VAR 0 12
13017: PUSH
13018: FOR_IN
13019: IFFALSE 13211
// repeat InitHc ;
13021: CALL_OW 19
// if GetBType ( j ) = b_barracks then
13025: LD_VAR 0 9
13029: PPUSH
13030: CALL_OW 266
13034: PUSH
13035: LD_INT 5
13037: EQUAL
13038: IFFALSE 13108
// begin if UnitsInside ( j ) < 3 then
13040: LD_VAR 0 9
13044: PPUSH
13045: CALL_OW 313
13049: PUSH
13050: LD_INT 3
13052: LESS
13053: IFFALSE 13089
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13055: LD_INT 0
13057: PPUSH
13058: LD_INT 5
13060: PUSH
13061: LD_INT 8
13063: PUSH
13064: LD_INT 9
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: LIST
13071: PUSH
13072: LD_VAR 0 17
13076: ARRAY
13077: PPUSH
13078: LD_VAR 0 4
13082: PPUSH
13083: CALL_OW 380
13087: GO 13106
// PrepareHuman ( false , i , skill ) ;
13089: LD_INT 0
13091: PPUSH
13092: LD_VAR 0 8
13096: PPUSH
13097: LD_VAR 0 4
13101: PPUSH
13102: CALL_OW 380
// end else
13106: GO 13125
// PrepareHuman ( false , i , skill ) ;
13108: LD_INT 0
13110: PPUSH
13111: LD_VAR 0 8
13115: PPUSH
13116: LD_VAR 0 4
13120: PPUSH
13121: CALL_OW 380
// un := CreateHuman ;
13125: LD_ADDR_VAR 0 14
13129: PUSH
13130: CALL_OW 44
13134: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13135: LD_ADDR_VAR 0 7
13139: PUSH
13140: LD_VAR 0 7
13144: PPUSH
13145: LD_INT 1
13147: PPUSH
13148: LD_VAR 0 14
13152: PPUSH
13153: CALL_OW 2
13157: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13158: LD_VAR 0 14
13162: PPUSH
13163: LD_VAR 0 9
13167: PPUSH
13168: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13172: LD_VAR 0 9
13176: PPUSH
13177: CALL_OW 313
13181: PUSH
13182: LD_INT 6
13184: EQUAL
13185: PUSH
13186: LD_VAR 0 9
13190: PPUSH
13191: CALL_OW 266
13195: PUSH
13196: LD_INT 32
13198: PUSH
13199: LD_INT 31
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: IN
13206: OR
13207: IFFALSE 13021
13209: GO 13018
13211: POP
13212: POP
// end else
13213: GO 13595
// for j = 1 to x do
13215: LD_ADDR_VAR 0 9
13219: PUSH
13220: DOUBLE
13221: LD_INT 1
13223: DEC
13224: ST_TO_ADDR
13225: LD_VAR 0 13
13229: PUSH
13230: FOR_TO
13231: IFFALSE 13593
// begin InitHc ;
13233: CALL_OW 19
// if not f then
13237: LD_VAR 0 12
13241: NOT
13242: IFFALSE 13331
// begin PrepareHuman ( false , i , skill ) ;
13244: LD_INT 0
13246: PPUSH
13247: LD_VAR 0 8
13251: PPUSH
13252: LD_VAR 0 4
13256: PPUSH
13257: CALL_OW 380
// un := CreateHuman ;
13261: LD_ADDR_VAR 0 14
13265: PUSH
13266: CALL_OW 44
13270: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13271: LD_ADDR_VAR 0 7
13275: PUSH
13276: LD_VAR 0 7
13280: PPUSH
13281: LD_INT 1
13283: PPUSH
13284: LD_VAR 0 14
13288: PPUSH
13289: CALL_OW 2
13293: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13294: LD_VAR 0 14
13298: PPUSH
13299: LD_VAR 0 1
13303: PPUSH
13304: CALL_OW 250
13308: PPUSH
13309: LD_VAR 0 1
13313: PPUSH
13314: CALL_OW 251
13318: PPUSH
13319: LD_INT 10
13321: PPUSH
13322: LD_INT 0
13324: PPUSH
13325: CALL_OW 50
// continue ;
13329: GO 13230
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13331: LD_VAR 0 12
13335: PUSH
13336: LD_INT 1
13338: ARRAY
13339: PPUSH
13340: CALL_OW 313
13344: PUSH
13345: LD_VAR 0 12
13349: PUSH
13350: LD_INT 1
13352: ARRAY
13353: PPUSH
13354: CALL_OW 266
13358: PUSH
13359: LD_INT 32
13361: PUSH
13362: LD_INT 31
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: IN
13369: AND
13370: PUSH
13371: LD_VAR 0 12
13375: PUSH
13376: LD_INT 1
13378: ARRAY
13379: PPUSH
13380: CALL_OW 313
13384: PUSH
13385: LD_INT 6
13387: EQUAL
13388: OR
13389: IFFALSE 13409
// f := Delete ( f , 1 ) ;
13391: LD_ADDR_VAR 0 12
13395: PUSH
13396: LD_VAR 0 12
13400: PPUSH
13401: LD_INT 1
13403: PPUSH
13404: CALL_OW 3
13408: ST_TO_ADDR
// if not f then
13409: LD_VAR 0 12
13413: NOT
13414: IFFALSE 13432
// begin x := x + 2 ;
13416: LD_ADDR_VAR 0 13
13420: PUSH
13421: LD_VAR 0 13
13425: PUSH
13426: LD_INT 2
13428: PLUS
13429: ST_TO_ADDR
// continue ;
13430: GO 13230
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13432: LD_VAR 0 12
13436: PUSH
13437: LD_INT 1
13439: ARRAY
13440: PPUSH
13441: CALL_OW 266
13445: PUSH
13446: LD_INT 5
13448: EQUAL
13449: IFFALSE 13523
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13451: LD_VAR 0 12
13455: PUSH
13456: LD_INT 1
13458: ARRAY
13459: PPUSH
13460: CALL_OW 313
13464: PUSH
13465: LD_INT 3
13467: LESS
13468: IFFALSE 13504
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13470: LD_INT 0
13472: PPUSH
13473: LD_INT 5
13475: PUSH
13476: LD_INT 8
13478: PUSH
13479: LD_INT 9
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: LIST
13486: PUSH
13487: LD_VAR 0 17
13491: ARRAY
13492: PPUSH
13493: LD_VAR 0 4
13497: PPUSH
13498: CALL_OW 380
13502: GO 13521
// PrepareHuman ( false , i , skill ) ;
13504: LD_INT 0
13506: PPUSH
13507: LD_VAR 0 8
13511: PPUSH
13512: LD_VAR 0 4
13516: PPUSH
13517: CALL_OW 380
// end else
13521: GO 13540
// PrepareHuman ( false , i , skill ) ;
13523: LD_INT 0
13525: PPUSH
13526: LD_VAR 0 8
13530: PPUSH
13531: LD_VAR 0 4
13535: PPUSH
13536: CALL_OW 380
// un := CreateHuman ;
13540: LD_ADDR_VAR 0 14
13544: PUSH
13545: CALL_OW 44
13549: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13550: LD_ADDR_VAR 0 7
13554: PUSH
13555: LD_VAR 0 7
13559: PPUSH
13560: LD_INT 1
13562: PPUSH
13563: LD_VAR 0 14
13567: PPUSH
13568: CALL_OW 2
13572: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13573: LD_VAR 0 14
13577: PPUSH
13578: LD_VAR 0 12
13582: PUSH
13583: LD_INT 1
13585: ARRAY
13586: PPUSH
13587: CALL_OW 52
// end ;
13591: GO 13230
13593: POP
13594: POP
// end ;
13595: GO 12532
13597: POP
13598: POP
// result := result ^ buildings ;
13599: LD_ADDR_VAR 0 7
13603: PUSH
13604: LD_VAR 0 7
13608: PUSH
13609: LD_VAR 0 18
13613: ADD
13614: ST_TO_ADDR
// end else
13615: GO 13758
// begin for i = 1 to personel do
13617: LD_ADDR_VAR 0 8
13621: PUSH
13622: DOUBLE
13623: LD_INT 1
13625: DEC
13626: ST_TO_ADDR
13627: LD_VAR 0 6
13631: PUSH
13632: FOR_TO
13633: IFFALSE 13756
// begin if i > 4 then
13635: LD_VAR 0 8
13639: PUSH
13640: LD_INT 4
13642: GREATER
13643: IFFALSE 13647
// break ;
13645: GO 13756
// x := personel [ i ] ;
13647: LD_ADDR_VAR 0 13
13651: PUSH
13652: LD_VAR 0 6
13656: PUSH
13657: LD_VAR 0 8
13661: ARRAY
13662: ST_TO_ADDR
// if x = - 1 then
13663: LD_VAR 0 13
13667: PUSH
13668: LD_INT 1
13670: NEG
13671: EQUAL
13672: IFFALSE 13676
// continue ;
13674: GO 13632
// PrepareHuman ( false , i , skill ) ;
13676: LD_INT 0
13678: PPUSH
13679: LD_VAR 0 8
13683: PPUSH
13684: LD_VAR 0 4
13688: PPUSH
13689: CALL_OW 380
// un := CreateHuman ;
13693: LD_ADDR_VAR 0 14
13697: PUSH
13698: CALL_OW 44
13702: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13703: LD_VAR 0 14
13707: PPUSH
13708: LD_VAR 0 1
13712: PPUSH
13713: CALL_OW 250
13717: PPUSH
13718: LD_VAR 0 1
13722: PPUSH
13723: CALL_OW 251
13727: PPUSH
13728: LD_INT 10
13730: PPUSH
13731: LD_INT 0
13733: PPUSH
13734: CALL_OW 50
// result := result ^ un ;
13738: LD_ADDR_VAR 0 7
13742: PUSH
13743: LD_VAR 0 7
13747: PUSH
13748: LD_VAR 0 14
13752: ADD
13753: ST_TO_ADDR
// end ;
13754: GO 13632
13756: POP
13757: POP
// end ; end ;
13758: LD_VAR 0 7
13762: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13763: LD_INT 0
13765: PPUSH
13766: PPUSH
13767: PPUSH
13768: PPUSH
13769: PPUSH
13770: PPUSH
13771: PPUSH
13772: PPUSH
13773: PPUSH
13774: PPUSH
13775: PPUSH
13776: PPUSH
13777: PPUSH
13778: PPUSH
13779: PPUSH
13780: PPUSH
// result := false ;
13781: LD_ADDR_VAR 0 3
13785: PUSH
13786: LD_INT 0
13788: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13789: LD_VAR 0 1
13793: NOT
13794: PUSH
13795: LD_VAR 0 1
13799: PPUSH
13800: CALL_OW 266
13804: PUSH
13805: LD_INT 32
13807: PUSH
13808: LD_INT 33
13810: PUSH
13811: EMPTY
13812: LIST
13813: LIST
13814: IN
13815: NOT
13816: OR
13817: IFFALSE 13821
// exit ;
13819: GO 14930
// nat := GetNation ( tower ) ;
13821: LD_ADDR_VAR 0 12
13825: PUSH
13826: LD_VAR 0 1
13830: PPUSH
13831: CALL_OW 248
13835: ST_TO_ADDR
// side := GetSide ( tower ) ;
13836: LD_ADDR_VAR 0 16
13840: PUSH
13841: LD_VAR 0 1
13845: PPUSH
13846: CALL_OW 255
13850: ST_TO_ADDR
// x := GetX ( tower ) ;
13851: LD_ADDR_VAR 0 10
13855: PUSH
13856: LD_VAR 0 1
13860: PPUSH
13861: CALL_OW 250
13865: ST_TO_ADDR
// y := GetY ( tower ) ;
13866: LD_ADDR_VAR 0 11
13870: PUSH
13871: LD_VAR 0 1
13875: PPUSH
13876: CALL_OW 251
13880: ST_TO_ADDR
// if not x or not y then
13881: LD_VAR 0 10
13885: NOT
13886: PUSH
13887: LD_VAR 0 11
13891: NOT
13892: OR
13893: IFFALSE 13897
// exit ;
13895: GO 14930
// weapon := 0 ;
13897: LD_ADDR_VAR 0 18
13901: PUSH
13902: LD_INT 0
13904: ST_TO_ADDR
// fac_list := [ ] ;
13905: LD_ADDR_VAR 0 17
13909: PUSH
13910: EMPTY
13911: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13912: LD_ADDR_VAR 0 6
13916: PUSH
13917: LD_VAR 0 1
13921: PPUSH
13922: CALL_OW 274
13926: PPUSH
13927: LD_VAR 0 2
13931: PPUSH
13932: LD_INT 0
13934: PPUSH
13935: CALL 11501 0 3
13939: PPUSH
13940: LD_INT 30
13942: PUSH
13943: LD_INT 3
13945: PUSH
13946: EMPTY
13947: LIST
13948: LIST
13949: PPUSH
13950: CALL_OW 72
13954: ST_TO_ADDR
// if not factories then
13955: LD_VAR 0 6
13959: NOT
13960: IFFALSE 13964
// exit ;
13962: GO 14930
// for i in factories do
13964: LD_ADDR_VAR 0 8
13968: PUSH
13969: LD_VAR 0 6
13973: PUSH
13974: FOR_IN
13975: IFFALSE 14000
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13977: LD_ADDR_VAR 0 17
13981: PUSH
13982: LD_VAR 0 17
13986: PUSH
13987: LD_VAR 0 8
13991: PPUSH
13992: CALL_OW 478
13996: UNION
13997: ST_TO_ADDR
13998: GO 13974
14000: POP
14001: POP
// if not fac_list then
14002: LD_VAR 0 17
14006: NOT
14007: IFFALSE 14011
// exit ;
14009: GO 14930
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
14011: LD_ADDR_VAR 0 5
14015: PUSH
14016: LD_INT 4
14018: PUSH
14019: LD_INT 5
14021: PUSH
14022: LD_INT 9
14024: PUSH
14025: LD_INT 10
14027: PUSH
14028: LD_INT 6
14030: PUSH
14031: LD_INT 7
14033: PUSH
14034: LD_INT 11
14036: PUSH
14037: EMPTY
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: PUSH
14046: LD_INT 27
14048: PUSH
14049: LD_INT 28
14051: PUSH
14052: LD_INT 26
14054: PUSH
14055: LD_INT 30
14057: PUSH
14058: EMPTY
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: PUSH
14064: LD_INT 43
14066: PUSH
14067: LD_INT 44
14069: PUSH
14070: LD_INT 46
14072: PUSH
14073: LD_INT 45
14075: PUSH
14076: LD_INT 47
14078: PUSH
14079: LD_INT 49
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: LIST
14094: PUSH
14095: LD_VAR 0 12
14099: ARRAY
14100: ST_TO_ADDR
// list := list isect fac_list ;
14101: LD_ADDR_VAR 0 5
14105: PUSH
14106: LD_VAR 0 5
14110: PUSH
14111: LD_VAR 0 17
14115: ISECT
14116: ST_TO_ADDR
// if not list then
14117: LD_VAR 0 5
14121: NOT
14122: IFFALSE 14126
// exit ;
14124: GO 14930
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
14126: LD_VAR 0 12
14130: PUSH
14131: LD_INT 3
14133: EQUAL
14134: PUSH
14135: LD_INT 49
14137: PUSH
14138: LD_VAR 0 5
14142: IN
14143: AND
14144: PUSH
14145: LD_INT 31
14147: PPUSH
14148: LD_VAR 0 16
14152: PPUSH
14153: CALL_OW 321
14157: PUSH
14158: LD_INT 2
14160: EQUAL
14161: AND
14162: IFFALSE 14222
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
14164: LD_INT 22
14166: PUSH
14167: LD_VAR 0 16
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: PUSH
14176: LD_INT 35
14178: PUSH
14179: LD_INT 49
14181: PUSH
14182: EMPTY
14183: LIST
14184: LIST
14185: PUSH
14186: LD_INT 91
14188: PUSH
14189: LD_VAR 0 1
14193: PUSH
14194: LD_INT 10
14196: PUSH
14197: EMPTY
14198: LIST
14199: LIST
14200: LIST
14201: PUSH
14202: EMPTY
14203: LIST
14204: LIST
14205: LIST
14206: PPUSH
14207: CALL_OW 69
14211: NOT
14212: IFFALSE 14222
// weapon := ru_time_lapser ;
14214: LD_ADDR_VAR 0 18
14218: PUSH
14219: LD_INT 49
14221: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
14222: LD_VAR 0 12
14226: PUSH
14227: LD_INT 1
14229: PUSH
14230: LD_INT 2
14232: PUSH
14233: EMPTY
14234: LIST
14235: LIST
14236: IN
14237: PUSH
14238: LD_INT 11
14240: PUSH
14241: LD_VAR 0 5
14245: IN
14246: PUSH
14247: LD_INT 30
14249: PUSH
14250: LD_VAR 0 5
14254: IN
14255: OR
14256: AND
14257: PUSH
14258: LD_INT 6
14260: PPUSH
14261: LD_VAR 0 16
14265: PPUSH
14266: CALL_OW 321
14270: PUSH
14271: LD_INT 2
14273: EQUAL
14274: AND
14275: IFFALSE 14440
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
14277: LD_INT 22
14279: PUSH
14280: LD_VAR 0 16
14284: PUSH
14285: EMPTY
14286: LIST
14287: LIST
14288: PUSH
14289: LD_INT 2
14291: PUSH
14292: LD_INT 35
14294: PUSH
14295: LD_INT 11
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: PUSH
14302: LD_INT 35
14304: PUSH
14305: LD_INT 30
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: LIST
14316: PUSH
14317: LD_INT 91
14319: PUSH
14320: LD_VAR 0 1
14324: PUSH
14325: LD_INT 18
14327: PUSH
14328: EMPTY
14329: LIST
14330: LIST
14331: LIST
14332: PUSH
14333: EMPTY
14334: LIST
14335: LIST
14336: LIST
14337: PPUSH
14338: CALL_OW 69
14342: NOT
14343: PUSH
14344: LD_INT 22
14346: PUSH
14347: LD_VAR 0 16
14351: PUSH
14352: EMPTY
14353: LIST
14354: LIST
14355: PUSH
14356: LD_INT 2
14358: PUSH
14359: LD_INT 30
14361: PUSH
14362: LD_INT 32
14364: PUSH
14365: EMPTY
14366: LIST
14367: LIST
14368: PUSH
14369: LD_INT 30
14371: PUSH
14372: LD_INT 33
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: PUSH
14379: EMPTY
14380: LIST
14381: LIST
14382: LIST
14383: PUSH
14384: LD_INT 91
14386: PUSH
14387: LD_VAR 0 1
14391: PUSH
14392: LD_INT 12
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: LIST
14399: PUSH
14400: EMPTY
14401: LIST
14402: LIST
14403: LIST
14404: PUSH
14405: EMPTY
14406: LIST
14407: PPUSH
14408: CALL_OW 69
14412: PUSH
14413: LD_INT 2
14415: GREATER
14416: AND
14417: IFFALSE 14440
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14419: LD_ADDR_VAR 0 18
14423: PUSH
14424: LD_INT 11
14426: PUSH
14427: LD_INT 30
14429: PUSH
14430: EMPTY
14431: LIST
14432: LIST
14433: PUSH
14434: LD_VAR 0 12
14438: ARRAY
14439: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14440: LD_VAR 0 18
14444: NOT
14445: PUSH
14446: LD_INT 40
14448: PPUSH
14449: LD_VAR 0 16
14453: PPUSH
14454: CALL_OW 321
14458: PUSH
14459: LD_INT 2
14461: EQUAL
14462: AND
14463: PUSH
14464: LD_INT 7
14466: PUSH
14467: LD_VAR 0 5
14471: IN
14472: PUSH
14473: LD_INT 28
14475: PUSH
14476: LD_VAR 0 5
14480: IN
14481: OR
14482: PUSH
14483: LD_INT 45
14485: PUSH
14486: LD_VAR 0 5
14490: IN
14491: OR
14492: AND
14493: IFFALSE 14747
// begin hex := GetHexInfo ( x , y ) ;
14495: LD_ADDR_VAR 0 4
14499: PUSH
14500: LD_VAR 0 10
14504: PPUSH
14505: LD_VAR 0 11
14509: PPUSH
14510: CALL_OW 546
14514: ST_TO_ADDR
// if hex [ 1 ] then
14515: LD_VAR 0 4
14519: PUSH
14520: LD_INT 1
14522: ARRAY
14523: IFFALSE 14527
// exit ;
14525: GO 14930
// height := hex [ 2 ] ;
14527: LD_ADDR_VAR 0 15
14531: PUSH
14532: LD_VAR 0 4
14536: PUSH
14537: LD_INT 2
14539: ARRAY
14540: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14541: LD_ADDR_VAR 0 14
14545: PUSH
14546: LD_INT 0
14548: PUSH
14549: LD_INT 2
14551: PUSH
14552: LD_INT 3
14554: PUSH
14555: LD_INT 5
14557: PUSH
14558: EMPTY
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: ST_TO_ADDR
// for i in tmp do
14564: LD_ADDR_VAR 0 8
14568: PUSH
14569: LD_VAR 0 14
14573: PUSH
14574: FOR_IN
14575: IFFALSE 14745
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14577: LD_ADDR_VAR 0 9
14581: PUSH
14582: LD_VAR 0 10
14586: PPUSH
14587: LD_VAR 0 8
14591: PPUSH
14592: LD_INT 5
14594: PPUSH
14595: CALL_OW 272
14599: PUSH
14600: LD_VAR 0 11
14604: PPUSH
14605: LD_VAR 0 8
14609: PPUSH
14610: LD_INT 5
14612: PPUSH
14613: CALL_OW 273
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14622: LD_VAR 0 9
14626: PUSH
14627: LD_INT 1
14629: ARRAY
14630: PPUSH
14631: LD_VAR 0 9
14635: PUSH
14636: LD_INT 2
14638: ARRAY
14639: PPUSH
14640: CALL_OW 488
14644: IFFALSE 14743
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14646: LD_ADDR_VAR 0 4
14650: PUSH
14651: LD_VAR 0 9
14655: PUSH
14656: LD_INT 1
14658: ARRAY
14659: PPUSH
14660: LD_VAR 0 9
14664: PUSH
14665: LD_INT 2
14667: ARRAY
14668: PPUSH
14669: CALL_OW 546
14673: ST_TO_ADDR
// if hex [ 1 ] then
14674: LD_VAR 0 4
14678: PUSH
14679: LD_INT 1
14681: ARRAY
14682: IFFALSE 14686
// continue ;
14684: GO 14574
// h := hex [ 2 ] ;
14686: LD_ADDR_VAR 0 13
14690: PUSH
14691: LD_VAR 0 4
14695: PUSH
14696: LD_INT 2
14698: ARRAY
14699: ST_TO_ADDR
// if h + 7 < height then
14700: LD_VAR 0 13
14704: PUSH
14705: LD_INT 7
14707: PLUS
14708: PUSH
14709: LD_VAR 0 15
14713: LESS
14714: IFFALSE 14743
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14716: LD_ADDR_VAR 0 18
14720: PUSH
14721: LD_INT 7
14723: PUSH
14724: LD_INT 28
14726: PUSH
14727: LD_INT 45
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: LIST
14734: PUSH
14735: LD_VAR 0 12
14739: ARRAY
14740: ST_TO_ADDR
// break ;
14741: GO 14745
// end ; end ; end ;
14743: GO 14574
14745: POP
14746: POP
// end ; if not weapon then
14747: LD_VAR 0 18
14751: NOT
14752: IFFALSE 14812
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14754: LD_ADDR_VAR 0 5
14758: PUSH
14759: LD_VAR 0 5
14763: PUSH
14764: LD_INT 11
14766: PUSH
14767: LD_INT 30
14769: PUSH
14770: LD_INT 49
14772: PUSH
14773: EMPTY
14774: LIST
14775: LIST
14776: LIST
14777: DIFF
14778: ST_TO_ADDR
// if not list then
14779: LD_VAR 0 5
14783: NOT
14784: IFFALSE 14788
// exit ;
14786: GO 14930
// weapon := list [ rand ( 1 , list ) ] ;
14788: LD_ADDR_VAR 0 18
14792: PUSH
14793: LD_VAR 0 5
14797: PUSH
14798: LD_INT 1
14800: PPUSH
14801: LD_VAR 0 5
14805: PPUSH
14806: CALL_OW 12
14810: ARRAY
14811: ST_TO_ADDR
// end ; if weapon then
14812: LD_VAR 0 18
14816: IFFALSE 14930
// begin tmp := CostOfWeapon ( weapon ) ;
14818: LD_ADDR_VAR 0 14
14822: PUSH
14823: LD_VAR 0 18
14827: PPUSH
14828: CALL_OW 451
14832: ST_TO_ADDR
// j := GetBase ( tower ) ;
14833: LD_ADDR_VAR 0 9
14837: PUSH
14838: LD_VAR 0 1
14842: PPUSH
14843: CALL_OW 274
14847: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14848: LD_VAR 0 9
14852: PPUSH
14853: LD_INT 1
14855: PPUSH
14856: CALL_OW 275
14860: PUSH
14861: LD_VAR 0 14
14865: PUSH
14866: LD_INT 1
14868: ARRAY
14869: GREATEREQUAL
14870: PUSH
14871: LD_VAR 0 9
14875: PPUSH
14876: LD_INT 2
14878: PPUSH
14879: CALL_OW 275
14883: PUSH
14884: LD_VAR 0 14
14888: PUSH
14889: LD_INT 2
14891: ARRAY
14892: GREATEREQUAL
14893: AND
14894: PUSH
14895: LD_VAR 0 9
14899: PPUSH
14900: LD_INT 3
14902: PPUSH
14903: CALL_OW 275
14907: PUSH
14908: LD_VAR 0 14
14912: PUSH
14913: LD_INT 3
14915: ARRAY
14916: GREATEREQUAL
14917: AND
14918: IFFALSE 14930
// result := weapon ;
14920: LD_ADDR_VAR 0 3
14924: PUSH
14925: LD_VAR 0 18
14929: ST_TO_ADDR
// end ; end ;
14930: LD_VAR 0 3
14934: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14935: LD_INT 0
14937: PPUSH
14938: PPUSH
// result := true ;
14939: LD_ADDR_VAR 0 3
14943: PUSH
14944: LD_INT 1
14946: ST_TO_ADDR
// if array1 = array2 then
14947: LD_VAR 0 1
14951: PUSH
14952: LD_VAR 0 2
14956: EQUAL
14957: IFFALSE 15017
// begin for i = 1 to array1 do
14959: LD_ADDR_VAR 0 4
14963: PUSH
14964: DOUBLE
14965: LD_INT 1
14967: DEC
14968: ST_TO_ADDR
14969: LD_VAR 0 1
14973: PUSH
14974: FOR_TO
14975: IFFALSE 15013
// if array1 [ i ] <> array2 [ i ] then
14977: LD_VAR 0 1
14981: PUSH
14982: LD_VAR 0 4
14986: ARRAY
14987: PUSH
14988: LD_VAR 0 2
14992: PUSH
14993: LD_VAR 0 4
14997: ARRAY
14998: NONEQUAL
14999: IFFALSE 15011
// begin result := false ;
15001: LD_ADDR_VAR 0 3
15005: PUSH
15006: LD_INT 0
15008: ST_TO_ADDR
// break ;
15009: GO 15013
// end ;
15011: GO 14974
15013: POP
15014: POP
// end else
15015: GO 15025
// result := false ;
15017: LD_ADDR_VAR 0 3
15021: PUSH
15022: LD_INT 0
15024: ST_TO_ADDR
// end ;
15025: LD_VAR 0 3
15029: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
15030: LD_INT 0
15032: PPUSH
15033: PPUSH
// if not array1 or not array2 then
15034: LD_VAR 0 1
15038: NOT
15039: PUSH
15040: LD_VAR 0 2
15044: NOT
15045: OR
15046: IFFALSE 15050
// exit ;
15048: GO 15114
// result := true ;
15050: LD_ADDR_VAR 0 3
15054: PUSH
15055: LD_INT 1
15057: ST_TO_ADDR
// for i = 1 to array1 do
15058: LD_ADDR_VAR 0 4
15062: PUSH
15063: DOUBLE
15064: LD_INT 1
15066: DEC
15067: ST_TO_ADDR
15068: LD_VAR 0 1
15072: PUSH
15073: FOR_TO
15074: IFFALSE 15112
// if array1 [ i ] <> array2 [ i ] then
15076: LD_VAR 0 1
15080: PUSH
15081: LD_VAR 0 4
15085: ARRAY
15086: PUSH
15087: LD_VAR 0 2
15091: PUSH
15092: LD_VAR 0 4
15096: ARRAY
15097: NONEQUAL
15098: IFFALSE 15110
// begin result := false ;
15100: LD_ADDR_VAR 0 3
15104: PUSH
15105: LD_INT 0
15107: ST_TO_ADDR
// break ;
15108: GO 15112
// end ;
15110: GO 15073
15112: POP
15113: POP
// end ;
15114: LD_VAR 0 3
15118: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
15119: LD_INT 0
15121: PPUSH
15122: PPUSH
15123: PPUSH
// pom := GetBase ( fac ) ;
15124: LD_ADDR_VAR 0 5
15128: PUSH
15129: LD_VAR 0 1
15133: PPUSH
15134: CALL_OW 274
15138: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
15139: LD_ADDR_VAR 0 4
15143: PUSH
15144: LD_VAR 0 2
15148: PUSH
15149: LD_INT 1
15151: ARRAY
15152: PPUSH
15153: LD_VAR 0 2
15157: PUSH
15158: LD_INT 2
15160: ARRAY
15161: PPUSH
15162: LD_VAR 0 2
15166: PUSH
15167: LD_INT 3
15169: ARRAY
15170: PPUSH
15171: LD_VAR 0 2
15175: PUSH
15176: LD_INT 4
15178: ARRAY
15179: PPUSH
15180: CALL_OW 449
15184: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15185: LD_ADDR_VAR 0 3
15189: PUSH
15190: LD_VAR 0 5
15194: PPUSH
15195: LD_INT 1
15197: PPUSH
15198: CALL_OW 275
15202: PUSH
15203: LD_VAR 0 4
15207: PUSH
15208: LD_INT 1
15210: ARRAY
15211: GREATEREQUAL
15212: PUSH
15213: LD_VAR 0 5
15217: PPUSH
15218: LD_INT 2
15220: PPUSH
15221: CALL_OW 275
15225: PUSH
15226: LD_VAR 0 4
15230: PUSH
15231: LD_INT 2
15233: ARRAY
15234: GREATEREQUAL
15235: AND
15236: PUSH
15237: LD_VAR 0 5
15241: PPUSH
15242: LD_INT 3
15244: PPUSH
15245: CALL_OW 275
15249: PUSH
15250: LD_VAR 0 4
15254: PUSH
15255: LD_INT 3
15257: ARRAY
15258: GREATEREQUAL
15259: AND
15260: ST_TO_ADDR
// end ;
15261: LD_VAR 0 3
15265: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
15266: LD_INT 0
15268: PPUSH
15269: PPUSH
15270: PPUSH
15271: PPUSH
// pom := GetBase ( building ) ;
15272: LD_ADDR_VAR 0 3
15276: PUSH
15277: LD_VAR 0 1
15281: PPUSH
15282: CALL_OW 274
15286: ST_TO_ADDR
// if not pom then
15287: LD_VAR 0 3
15291: NOT
15292: IFFALSE 15296
// exit ;
15294: GO 15466
// btype := GetBType ( building ) ;
15296: LD_ADDR_VAR 0 5
15300: PUSH
15301: LD_VAR 0 1
15305: PPUSH
15306: CALL_OW 266
15310: ST_TO_ADDR
// if btype = b_armoury then
15311: LD_VAR 0 5
15315: PUSH
15316: LD_INT 4
15318: EQUAL
15319: IFFALSE 15329
// btype := b_barracks ;
15321: LD_ADDR_VAR 0 5
15325: PUSH
15326: LD_INT 5
15328: ST_TO_ADDR
// if btype = b_depot then
15329: LD_VAR 0 5
15333: PUSH
15334: LD_INT 0
15336: EQUAL
15337: IFFALSE 15347
// btype := b_warehouse ;
15339: LD_ADDR_VAR 0 5
15343: PUSH
15344: LD_INT 1
15346: ST_TO_ADDR
// if btype = b_workshop then
15347: LD_VAR 0 5
15351: PUSH
15352: LD_INT 2
15354: EQUAL
15355: IFFALSE 15365
// btype := b_factory ;
15357: LD_ADDR_VAR 0 5
15361: PUSH
15362: LD_INT 3
15364: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15365: LD_ADDR_VAR 0 4
15369: PUSH
15370: LD_VAR 0 5
15374: PPUSH
15375: LD_VAR 0 1
15379: PPUSH
15380: CALL_OW 248
15384: PPUSH
15385: CALL_OW 450
15389: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15390: LD_ADDR_VAR 0 2
15394: PUSH
15395: LD_VAR 0 3
15399: PPUSH
15400: LD_INT 1
15402: PPUSH
15403: CALL_OW 275
15407: PUSH
15408: LD_VAR 0 4
15412: PUSH
15413: LD_INT 1
15415: ARRAY
15416: GREATEREQUAL
15417: PUSH
15418: LD_VAR 0 3
15422: PPUSH
15423: LD_INT 2
15425: PPUSH
15426: CALL_OW 275
15430: PUSH
15431: LD_VAR 0 4
15435: PUSH
15436: LD_INT 2
15438: ARRAY
15439: GREATEREQUAL
15440: AND
15441: PUSH
15442: LD_VAR 0 3
15446: PPUSH
15447: LD_INT 3
15449: PPUSH
15450: CALL_OW 275
15454: PUSH
15455: LD_VAR 0 4
15459: PUSH
15460: LD_INT 3
15462: ARRAY
15463: GREATEREQUAL
15464: AND
15465: ST_TO_ADDR
// end ;
15466: LD_VAR 0 2
15470: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15471: LD_INT 0
15473: PPUSH
15474: PPUSH
15475: PPUSH
// pom := GetBase ( building ) ;
15476: LD_ADDR_VAR 0 4
15480: PUSH
15481: LD_VAR 0 1
15485: PPUSH
15486: CALL_OW 274
15490: ST_TO_ADDR
// if not pom then
15491: LD_VAR 0 4
15495: NOT
15496: IFFALSE 15500
// exit ;
15498: GO 15601
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15500: LD_ADDR_VAR 0 5
15504: PUSH
15505: LD_VAR 0 2
15509: PPUSH
15510: LD_VAR 0 1
15514: PPUSH
15515: CALL_OW 248
15519: PPUSH
15520: CALL_OW 450
15524: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15525: LD_ADDR_VAR 0 3
15529: PUSH
15530: LD_VAR 0 4
15534: PPUSH
15535: LD_INT 1
15537: PPUSH
15538: CALL_OW 275
15542: PUSH
15543: LD_VAR 0 5
15547: PUSH
15548: LD_INT 1
15550: ARRAY
15551: GREATEREQUAL
15552: PUSH
15553: LD_VAR 0 4
15557: PPUSH
15558: LD_INT 2
15560: PPUSH
15561: CALL_OW 275
15565: PUSH
15566: LD_VAR 0 5
15570: PUSH
15571: LD_INT 2
15573: ARRAY
15574: GREATEREQUAL
15575: AND
15576: PUSH
15577: LD_VAR 0 4
15581: PPUSH
15582: LD_INT 3
15584: PPUSH
15585: CALL_OW 275
15589: PUSH
15590: LD_VAR 0 5
15594: PUSH
15595: LD_INT 3
15597: ARRAY
15598: GREATEREQUAL
15599: AND
15600: ST_TO_ADDR
// end ;
15601: LD_VAR 0 3
15605: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15606: LD_INT 0
15608: PPUSH
15609: PPUSH
15610: PPUSH
15611: PPUSH
15612: PPUSH
15613: PPUSH
15614: PPUSH
15615: PPUSH
15616: PPUSH
15617: PPUSH
15618: PPUSH
// result := false ;
15619: LD_ADDR_VAR 0 8
15623: PUSH
15624: LD_INT 0
15626: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15627: LD_VAR 0 5
15631: NOT
15632: PUSH
15633: LD_VAR 0 1
15637: NOT
15638: OR
15639: PUSH
15640: LD_VAR 0 2
15644: NOT
15645: OR
15646: PUSH
15647: LD_VAR 0 3
15651: NOT
15652: OR
15653: IFFALSE 15657
// exit ;
15655: GO 16471
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15657: LD_ADDR_VAR 0 14
15661: PUSH
15662: LD_VAR 0 1
15666: PPUSH
15667: LD_VAR 0 2
15671: PPUSH
15672: LD_VAR 0 3
15676: PPUSH
15677: LD_VAR 0 4
15681: PPUSH
15682: LD_VAR 0 5
15686: PUSH
15687: LD_INT 1
15689: ARRAY
15690: PPUSH
15691: CALL_OW 248
15695: PPUSH
15696: LD_INT 0
15698: PPUSH
15699: CALL 17704 0 6
15703: ST_TO_ADDR
// if not hexes then
15704: LD_VAR 0 14
15708: NOT
15709: IFFALSE 15713
// exit ;
15711: GO 16471
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15713: LD_ADDR_VAR 0 17
15717: PUSH
15718: LD_VAR 0 5
15722: PPUSH
15723: LD_INT 22
15725: PUSH
15726: LD_VAR 0 13
15730: PPUSH
15731: CALL_OW 255
15735: PUSH
15736: EMPTY
15737: LIST
15738: LIST
15739: PUSH
15740: LD_INT 2
15742: PUSH
15743: LD_INT 30
15745: PUSH
15746: LD_INT 0
15748: PUSH
15749: EMPTY
15750: LIST
15751: LIST
15752: PUSH
15753: LD_INT 30
15755: PUSH
15756: LD_INT 1
15758: PUSH
15759: EMPTY
15760: LIST
15761: LIST
15762: PUSH
15763: EMPTY
15764: LIST
15765: LIST
15766: LIST
15767: PUSH
15768: EMPTY
15769: LIST
15770: LIST
15771: PPUSH
15772: CALL_OW 72
15776: ST_TO_ADDR
// for i = 1 to hexes do
15777: LD_ADDR_VAR 0 9
15781: PUSH
15782: DOUBLE
15783: LD_INT 1
15785: DEC
15786: ST_TO_ADDR
15787: LD_VAR 0 14
15791: PUSH
15792: FOR_TO
15793: IFFALSE 16469
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15795: LD_ADDR_VAR 0 13
15799: PUSH
15800: LD_VAR 0 14
15804: PUSH
15805: LD_VAR 0 9
15809: ARRAY
15810: PUSH
15811: LD_INT 1
15813: ARRAY
15814: PPUSH
15815: LD_VAR 0 14
15819: PUSH
15820: LD_VAR 0 9
15824: ARRAY
15825: PUSH
15826: LD_INT 2
15828: ARRAY
15829: PPUSH
15830: CALL_OW 428
15834: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15835: LD_VAR 0 14
15839: PUSH
15840: LD_VAR 0 9
15844: ARRAY
15845: PUSH
15846: LD_INT 1
15848: ARRAY
15849: PPUSH
15850: LD_VAR 0 14
15854: PUSH
15855: LD_VAR 0 9
15859: ARRAY
15860: PUSH
15861: LD_INT 2
15863: ARRAY
15864: PPUSH
15865: CALL_OW 351
15869: PUSH
15870: LD_VAR 0 14
15874: PUSH
15875: LD_VAR 0 9
15879: ARRAY
15880: PUSH
15881: LD_INT 1
15883: ARRAY
15884: PPUSH
15885: LD_VAR 0 14
15889: PUSH
15890: LD_VAR 0 9
15894: ARRAY
15895: PUSH
15896: LD_INT 2
15898: ARRAY
15899: PPUSH
15900: CALL_OW 488
15904: NOT
15905: OR
15906: PUSH
15907: LD_VAR 0 13
15911: PPUSH
15912: CALL_OW 247
15916: PUSH
15917: LD_INT 3
15919: EQUAL
15920: OR
15921: IFFALSE 15927
// exit ;
15923: POP
15924: POP
15925: GO 16471
// if not tmp then
15927: LD_VAR 0 13
15931: NOT
15932: IFFALSE 15936
// continue ;
15934: GO 15792
// result := true ;
15936: LD_ADDR_VAR 0 8
15940: PUSH
15941: LD_INT 1
15943: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15944: LD_VAR 0 6
15948: PUSH
15949: LD_VAR 0 13
15953: PPUSH
15954: CALL_OW 247
15958: PUSH
15959: LD_INT 2
15961: EQUAL
15962: AND
15963: PUSH
15964: LD_VAR 0 13
15968: PPUSH
15969: CALL_OW 263
15973: PUSH
15974: LD_INT 1
15976: EQUAL
15977: AND
15978: IFFALSE 16142
// begin if IsDrivenBy ( tmp ) then
15980: LD_VAR 0 13
15984: PPUSH
15985: CALL_OW 311
15989: IFFALSE 15993
// continue ;
15991: GO 15792
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15993: LD_VAR 0 6
15997: PPUSH
15998: LD_INT 3
16000: PUSH
16001: LD_INT 60
16003: PUSH
16004: EMPTY
16005: LIST
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: PUSH
16011: LD_INT 3
16013: PUSH
16014: LD_INT 55
16016: PUSH
16017: EMPTY
16018: LIST
16019: PUSH
16020: EMPTY
16021: LIST
16022: LIST
16023: PUSH
16024: EMPTY
16025: LIST
16026: LIST
16027: PPUSH
16028: CALL_OW 72
16032: IFFALSE 16140
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
16034: LD_ADDR_VAR 0 18
16038: PUSH
16039: LD_VAR 0 6
16043: PPUSH
16044: LD_INT 3
16046: PUSH
16047: LD_INT 60
16049: PUSH
16050: EMPTY
16051: LIST
16052: PUSH
16053: EMPTY
16054: LIST
16055: LIST
16056: PUSH
16057: LD_INT 3
16059: PUSH
16060: LD_INT 55
16062: PUSH
16063: EMPTY
16064: LIST
16065: PUSH
16066: EMPTY
16067: LIST
16068: LIST
16069: PUSH
16070: EMPTY
16071: LIST
16072: LIST
16073: PPUSH
16074: CALL_OW 72
16078: PUSH
16079: LD_INT 1
16081: ARRAY
16082: ST_TO_ADDR
// if IsInUnit ( driver ) then
16083: LD_VAR 0 18
16087: PPUSH
16088: CALL_OW 310
16092: IFFALSE 16103
// ComExit ( driver ) ;
16094: LD_VAR 0 18
16098: PPUSH
16099: CALL 41483 0 1
// AddComEnterUnit ( driver , tmp ) ;
16103: LD_VAR 0 18
16107: PPUSH
16108: LD_VAR 0 13
16112: PPUSH
16113: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
16117: LD_VAR 0 18
16121: PPUSH
16122: LD_VAR 0 7
16126: PPUSH
16127: CALL_OW 173
// AddComExitVehicle ( driver ) ;
16131: LD_VAR 0 18
16135: PPUSH
16136: CALL_OW 181
// end ; continue ;
16140: GO 15792
// end ; if not cleaners or not tmp in cleaners then
16142: LD_VAR 0 6
16146: NOT
16147: PUSH
16148: LD_VAR 0 13
16152: PUSH
16153: LD_VAR 0 6
16157: IN
16158: NOT
16159: OR
16160: IFFALSE 16467
// begin if dep then
16162: LD_VAR 0 17
16166: IFFALSE 16302
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
16168: LD_ADDR_VAR 0 16
16172: PUSH
16173: LD_VAR 0 17
16177: PUSH
16178: LD_INT 1
16180: ARRAY
16181: PPUSH
16182: CALL_OW 250
16186: PPUSH
16187: LD_VAR 0 17
16191: PUSH
16192: LD_INT 1
16194: ARRAY
16195: PPUSH
16196: CALL_OW 254
16200: PPUSH
16201: LD_INT 5
16203: PPUSH
16204: CALL_OW 272
16208: PUSH
16209: LD_VAR 0 17
16213: PUSH
16214: LD_INT 1
16216: ARRAY
16217: PPUSH
16218: CALL_OW 251
16222: PPUSH
16223: LD_VAR 0 17
16227: PUSH
16228: LD_INT 1
16230: ARRAY
16231: PPUSH
16232: CALL_OW 254
16236: PPUSH
16237: LD_INT 5
16239: PPUSH
16240: CALL_OW 273
16244: PUSH
16245: EMPTY
16246: LIST
16247: LIST
16248: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
16249: LD_VAR 0 16
16253: PUSH
16254: LD_INT 1
16256: ARRAY
16257: PPUSH
16258: LD_VAR 0 16
16262: PUSH
16263: LD_INT 2
16265: ARRAY
16266: PPUSH
16267: CALL_OW 488
16271: IFFALSE 16302
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16273: LD_VAR 0 13
16277: PPUSH
16278: LD_VAR 0 16
16282: PUSH
16283: LD_INT 1
16285: ARRAY
16286: PPUSH
16287: LD_VAR 0 16
16291: PUSH
16292: LD_INT 2
16294: ARRAY
16295: PPUSH
16296: CALL_OW 111
// continue ;
16300: GO 15792
// end ; end ; r := GetDir ( tmp ) ;
16302: LD_ADDR_VAR 0 15
16306: PUSH
16307: LD_VAR 0 13
16311: PPUSH
16312: CALL_OW 254
16316: ST_TO_ADDR
// if r = 5 then
16317: LD_VAR 0 15
16321: PUSH
16322: LD_INT 5
16324: EQUAL
16325: IFFALSE 16335
// r := 0 ;
16327: LD_ADDR_VAR 0 15
16331: PUSH
16332: LD_INT 0
16334: ST_TO_ADDR
// for j = r to 5 do
16335: LD_ADDR_VAR 0 10
16339: PUSH
16340: DOUBLE
16341: LD_VAR 0 15
16345: DEC
16346: ST_TO_ADDR
16347: LD_INT 5
16349: PUSH
16350: FOR_TO
16351: IFFALSE 16465
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16353: LD_ADDR_VAR 0 11
16357: PUSH
16358: LD_VAR 0 13
16362: PPUSH
16363: CALL_OW 250
16367: PPUSH
16368: LD_VAR 0 10
16372: PPUSH
16373: LD_INT 2
16375: PPUSH
16376: CALL_OW 272
16380: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16381: LD_ADDR_VAR 0 12
16385: PUSH
16386: LD_VAR 0 13
16390: PPUSH
16391: CALL_OW 251
16395: PPUSH
16396: LD_VAR 0 10
16400: PPUSH
16401: LD_INT 2
16403: PPUSH
16404: CALL_OW 273
16408: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16409: LD_VAR 0 11
16413: PPUSH
16414: LD_VAR 0 12
16418: PPUSH
16419: CALL_OW 488
16423: PUSH
16424: LD_VAR 0 11
16428: PPUSH
16429: LD_VAR 0 12
16433: PPUSH
16434: CALL_OW 428
16438: NOT
16439: AND
16440: IFFALSE 16463
// begin ComMoveXY ( tmp , _x , _y ) ;
16442: LD_VAR 0 13
16446: PPUSH
16447: LD_VAR 0 11
16451: PPUSH
16452: LD_VAR 0 12
16456: PPUSH
16457: CALL_OW 111
// break ;
16461: GO 16465
// end ; end ;
16463: GO 16350
16465: POP
16466: POP
// end ; end ;
16467: GO 15792
16469: POP
16470: POP
// end ;
16471: LD_VAR 0 8
16475: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16476: LD_INT 0
16478: PPUSH
// result := true ;
16479: LD_ADDR_VAR 0 3
16483: PUSH
16484: LD_INT 1
16486: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16487: LD_VAR 0 2
16491: PUSH
16492: LD_INT 24
16494: DOUBLE
16495: EQUAL
16496: IFTRUE 16506
16498: LD_INT 33
16500: DOUBLE
16501: EQUAL
16502: IFTRUE 16506
16504: GO 16531
16506: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16507: LD_ADDR_VAR 0 3
16511: PUSH
16512: LD_INT 32
16514: PPUSH
16515: LD_VAR 0 1
16519: PPUSH
16520: CALL_OW 321
16524: PUSH
16525: LD_INT 2
16527: EQUAL
16528: ST_TO_ADDR
16529: GO 16847
16531: LD_INT 20
16533: DOUBLE
16534: EQUAL
16535: IFTRUE 16539
16537: GO 16564
16539: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16540: LD_ADDR_VAR 0 3
16544: PUSH
16545: LD_INT 6
16547: PPUSH
16548: LD_VAR 0 1
16552: PPUSH
16553: CALL_OW 321
16557: PUSH
16558: LD_INT 2
16560: EQUAL
16561: ST_TO_ADDR
16562: GO 16847
16564: LD_INT 22
16566: DOUBLE
16567: EQUAL
16568: IFTRUE 16578
16570: LD_INT 36
16572: DOUBLE
16573: EQUAL
16574: IFTRUE 16578
16576: GO 16603
16578: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16579: LD_ADDR_VAR 0 3
16583: PUSH
16584: LD_INT 15
16586: PPUSH
16587: LD_VAR 0 1
16591: PPUSH
16592: CALL_OW 321
16596: PUSH
16597: LD_INT 2
16599: EQUAL
16600: ST_TO_ADDR
16601: GO 16847
16603: LD_INT 30
16605: DOUBLE
16606: EQUAL
16607: IFTRUE 16611
16609: GO 16636
16611: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16612: LD_ADDR_VAR 0 3
16616: PUSH
16617: LD_INT 20
16619: PPUSH
16620: LD_VAR 0 1
16624: PPUSH
16625: CALL_OW 321
16629: PUSH
16630: LD_INT 2
16632: EQUAL
16633: ST_TO_ADDR
16634: GO 16847
16636: LD_INT 28
16638: DOUBLE
16639: EQUAL
16640: IFTRUE 16650
16642: LD_INT 21
16644: DOUBLE
16645: EQUAL
16646: IFTRUE 16650
16648: GO 16675
16650: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16651: LD_ADDR_VAR 0 3
16655: PUSH
16656: LD_INT 21
16658: PPUSH
16659: LD_VAR 0 1
16663: PPUSH
16664: CALL_OW 321
16668: PUSH
16669: LD_INT 2
16671: EQUAL
16672: ST_TO_ADDR
16673: GO 16847
16675: LD_INT 16
16677: DOUBLE
16678: EQUAL
16679: IFTRUE 16683
16681: GO 16708
16683: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16684: LD_ADDR_VAR 0 3
16688: PUSH
16689: LD_INT 84
16691: PPUSH
16692: LD_VAR 0 1
16696: PPUSH
16697: CALL_OW 321
16701: PUSH
16702: LD_INT 2
16704: EQUAL
16705: ST_TO_ADDR
16706: GO 16847
16708: LD_INT 19
16710: DOUBLE
16711: EQUAL
16712: IFTRUE 16722
16714: LD_INT 23
16716: DOUBLE
16717: EQUAL
16718: IFTRUE 16722
16720: GO 16747
16722: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16723: LD_ADDR_VAR 0 3
16727: PUSH
16728: LD_INT 83
16730: PPUSH
16731: LD_VAR 0 1
16735: PPUSH
16736: CALL_OW 321
16740: PUSH
16741: LD_INT 2
16743: EQUAL
16744: ST_TO_ADDR
16745: GO 16847
16747: LD_INT 17
16749: DOUBLE
16750: EQUAL
16751: IFTRUE 16755
16753: GO 16780
16755: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16756: LD_ADDR_VAR 0 3
16760: PUSH
16761: LD_INT 39
16763: PPUSH
16764: LD_VAR 0 1
16768: PPUSH
16769: CALL_OW 321
16773: PUSH
16774: LD_INT 2
16776: EQUAL
16777: ST_TO_ADDR
16778: GO 16847
16780: LD_INT 18
16782: DOUBLE
16783: EQUAL
16784: IFTRUE 16788
16786: GO 16813
16788: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16789: LD_ADDR_VAR 0 3
16793: PUSH
16794: LD_INT 40
16796: PPUSH
16797: LD_VAR 0 1
16801: PPUSH
16802: CALL_OW 321
16806: PUSH
16807: LD_INT 2
16809: EQUAL
16810: ST_TO_ADDR
16811: GO 16847
16813: LD_INT 27
16815: DOUBLE
16816: EQUAL
16817: IFTRUE 16821
16819: GO 16846
16821: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16822: LD_ADDR_VAR 0 3
16826: PUSH
16827: LD_INT 35
16829: PPUSH
16830: LD_VAR 0 1
16834: PPUSH
16835: CALL_OW 321
16839: PUSH
16840: LD_INT 2
16842: EQUAL
16843: ST_TO_ADDR
16844: GO 16847
16846: POP
// end ;
16847: LD_VAR 0 3
16851: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16852: LD_INT 0
16854: PPUSH
16855: PPUSH
16856: PPUSH
16857: PPUSH
16858: PPUSH
16859: PPUSH
16860: PPUSH
16861: PPUSH
16862: PPUSH
16863: PPUSH
16864: PPUSH
// result := false ;
16865: LD_ADDR_VAR 0 6
16869: PUSH
16870: LD_INT 0
16872: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16873: LD_VAR 0 1
16877: NOT
16878: PUSH
16879: LD_VAR 0 1
16883: PPUSH
16884: CALL_OW 266
16888: PUSH
16889: LD_INT 0
16891: PUSH
16892: LD_INT 1
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: IN
16899: NOT
16900: OR
16901: PUSH
16902: LD_VAR 0 2
16906: NOT
16907: OR
16908: PUSH
16909: LD_VAR 0 5
16913: PUSH
16914: LD_INT 0
16916: PUSH
16917: LD_INT 1
16919: PUSH
16920: LD_INT 2
16922: PUSH
16923: LD_INT 3
16925: PUSH
16926: LD_INT 4
16928: PUSH
16929: LD_INT 5
16931: PUSH
16932: EMPTY
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: IN
16940: NOT
16941: OR
16942: PUSH
16943: LD_VAR 0 3
16947: PPUSH
16948: LD_VAR 0 4
16952: PPUSH
16953: CALL_OW 488
16957: NOT
16958: OR
16959: IFFALSE 16963
// exit ;
16961: GO 17699
// side := GetSide ( depot ) ;
16963: LD_ADDR_VAR 0 9
16967: PUSH
16968: LD_VAR 0 1
16972: PPUSH
16973: CALL_OW 255
16977: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16978: LD_VAR 0 9
16982: PPUSH
16983: LD_VAR 0 2
16987: PPUSH
16988: CALL 16476 0 2
16992: NOT
16993: IFFALSE 16997
// exit ;
16995: GO 17699
// pom := GetBase ( depot ) ;
16997: LD_ADDR_VAR 0 10
17001: PUSH
17002: LD_VAR 0 1
17006: PPUSH
17007: CALL_OW 274
17011: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
17012: LD_ADDR_VAR 0 11
17016: PUSH
17017: LD_VAR 0 2
17021: PPUSH
17022: LD_VAR 0 1
17026: PPUSH
17027: CALL_OW 248
17031: PPUSH
17032: CALL_OW 450
17036: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17037: LD_VAR 0 10
17041: PPUSH
17042: LD_INT 1
17044: PPUSH
17045: CALL_OW 275
17049: PUSH
17050: LD_VAR 0 11
17054: PUSH
17055: LD_INT 1
17057: ARRAY
17058: GREATEREQUAL
17059: PUSH
17060: LD_VAR 0 10
17064: PPUSH
17065: LD_INT 2
17067: PPUSH
17068: CALL_OW 275
17072: PUSH
17073: LD_VAR 0 11
17077: PUSH
17078: LD_INT 2
17080: ARRAY
17081: GREATEREQUAL
17082: AND
17083: PUSH
17084: LD_VAR 0 10
17088: PPUSH
17089: LD_INT 3
17091: PPUSH
17092: CALL_OW 275
17096: PUSH
17097: LD_VAR 0 11
17101: PUSH
17102: LD_INT 3
17104: ARRAY
17105: GREATEREQUAL
17106: AND
17107: NOT
17108: IFFALSE 17112
// exit ;
17110: GO 17699
// if GetBType ( depot ) = b_depot then
17112: LD_VAR 0 1
17116: PPUSH
17117: CALL_OW 266
17121: PUSH
17122: LD_INT 0
17124: EQUAL
17125: IFFALSE 17137
// dist := 28 else
17127: LD_ADDR_VAR 0 14
17131: PUSH
17132: LD_INT 28
17134: ST_TO_ADDR
17135: GO 17145
// dist := 36 ;
17137: LD_ADDR_VAR 0 14
17141: PUSH
17142: LD_INT 36
17144: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
17145: LD_VAR 0 1
17149: PPUSH
17150: LD_VAR 0 3
17154: PPUSH
17155: LD_VAR 0 4
17159: PPUSH
17160: CALL_OW 297
17164: PUSH
17165: LD_VAR 0 14
17169: GREATER
17170: IFFALSE 17174
// exit ;
17172: GO 17699
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
17174: LD_ADDR_VAR 0 12
17178: PUSH
17179: LD_VAR 0 2
17183: PPUSH
17184: LD_VAR 0 3
17188: PPUSH
17189: LD_VAR 0 4
17193: PPUSH
17194: LD_VAR 0 5
17198: PPUSH
17199: LD_VAR 0 1
17203: PPUSH
17204: CALL_OW 248
17208: PPUSH
17209: LD_INT 0
17211: PPUSH
17212: CALL 17704 0 6
17216: ST_TO_ADDR
// if not hexes then
17217: LD_VAR 0 12
17221: NOT
17222: IFFALSE 17226
// exit ;
17224: GO 17699
// hex := GetHexInfo ( x , y ) ;
17226: LD_ADDR_VAR 0 15
17230: PUSH
17231: LD_VAR 0 3
17235: PPUSH
17236: LD_VAR 0 4
17240: PPUSH
17241: CALL_OW 546
17245: ST_TO_ADDR
// if hex [ 1 ] then
17246: LD_VAR 0 15
17250: PUSH
17251: LD_INT 1
17253: ARRAY
17254: IFFALSE 17258
// exit ;
17256: GO 17699
// height := hex [ 2 ] ;
17258: LD_ADDR_VAR 0 13
17262: PUSH
17263: LD_VAR 0 15
17267: PUSH
17268: LD_INT 2
17270: ARRAY
17271: ST_TO_ADDR
// for i = 1 to hexes do
17272: LD_ADDR_VAR 0 7
17276: PUSH
17277: DOUBLE
17278: LD_INT 1
17280: DEC
17281: ST_TO_ADDR
17282: LD_VAR 0 12
17286: PUSH
17287: FOR_TO
17288: IFFALSE 17618
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17290: LD_VAR 0 12
17294: PUSH
17295: LD_VAR 0 7
17299: ARRAY
17300: PUSH
17301: LD_INT 1
17303: ARRAY
17304: PPUSH
17305: LD_VAR 0 12
17309: PUSH
17310: LD_VAR 0 7
17314: ARRAY
17315: PUSH
17316: LD_INT 2
17318: ARRAY
17319: PPUSH
17320: CALL_OW 488
17324: NOT
17325: PUSH
17326: LD_VAR 0 12
17330: PUSH
17331: LD_VAR 0 7
17335: ARRAY
17336: PUSH
17337: LD_INT 1
17339: ARRAY
17340: PPUSH
17341: LD_VAR 0 12
17345: PUSH
17346: LD_VAR 0 7
17350: ARRAY
17351: PUSH
17352: LD_INT 2
17354: ARRAY
17355: PPUSH
17356: CALL_OW 428
17360: PUSH
17361: LD_INT 0
17363: GREATER
17364: OR
17365: PUSH
17366: LD_VAR 0 12
17370: PUSH
17371: LD_VAR 0 7
17375: ARRAY
17376: PUSH
17377: LD_INT 1
17379: ARRAY
17380: PPUSH
17381: LD_VAR 0 12
17385: PUSH
17386: LD_VAR 0 7
17390: ARRAY
17391: PUSH
17392: LD_INT 2
17394: ARRAY
17395: PPUSH
17396: CALL_OW 351
17400: OR
17401: IFFALSE 17407
// exit ;
17403: POP
17404: POP
17405: GO 17699
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17407: LD_ADDR_VAR 0 8
17411: PUSH
17412: LD_VAR 0 12
17416: PUSH
17417: LD_VAR 0 7
17421: ARRAY
17422: PUSH
17423: LD_INT 1
17425: ARRAY
17426: PPUSH
17427: LD_VAR 0 12
17431: PUSH
17432: LD_VAR 0 7
17436: ARRAY
17437: PUSH
17438: LD_INT 2
17440: ARRAY
17441: PPUSH
17442: CALL_OW 546
17446: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17447: LD_VAR 0 8
17451: PUSH
17452: LD_INT 1
17454: ARRAY
17455: PUSH
17456: LD_VAR 0 8
17460: PUSH
17461: LD_INT 2
17463: ARRAY
17464: PUSH
17465: LD_VAR 0 13
17469: PUSH
17470: LD_INT 2
17472: PLUS
17473: GREATER
17474: OR
17475: PUSH
17476: LD_VAR 0 8
17480: PUSH
17481: LD_INT 2
17483: ARRAY
17484: PUSH
17485: LD_VAR 0 13
17489: PUSH
17490: LD_INT 2
17492: MINUS
17493: LESS
17494: OR
17495: PUSH
17496: LD_VAR 0 8
17500: PUSH
17501: LD_INT 3
17503: ARRAY
17504: PUSH
17505: LD_INT 0
17507: PUSH
17508: LD_INT 8
17510: PUSH
17511: LD_INT 9
17513: PUSH
17514: LD_INT 10
17516: PUSH
17517: LD_INT 11
17519: PUSH
17520: LD_INT 12
17522: PUSH
17523: LD_INT 13
17525: PUSH
17526: LD_INT 16
17528: PUSH
17529: LD_INT 17
17531: PUSH
17532: LD_INT 18
17534: PUSH
17535: LD_INT 19
17537: PUSH
17538: LD_INT 20
17540: PUSH
17541: LD_INT 21
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: LIST
17548: LIST
17549: LIST
17550: LIST
17551: LIST
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: IN
17559: NOT
17560: OR
17561: PUSH
17562: LD_VAR 0 8
17566: PUSH
17567: LD_INT 5
17569: ARRAY
17570: NOT
17571: OR
17572: PUSH
17573: LD_VAR 0 8
17577: PUSH
17578: LD_INT 6
17580: ARRAY
17581: PUSH
17582: LD_INT 1
17584: PUSH
17585: LD_INT 2
17587: PUSH
17588: LD_INT 7
17590: PUSH
17591: LD_INT 9
17593: PUSH
17594: LD_INT 10
17596: PUSH
17597: LD_INT 11
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: IN
17608: NOT
17609: OR
17610: IFFALSE 17616
// exit ;
17612: POP
17613: POP
17614: GO 17699
// end ;
17616: GO 17287
17618: POP
17619: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17620: LD_VAR 0 9
17624: PPUSH
17625: LD_VAR 0 3
17629: PPUSH
17630: LD_VAR 0 4
17634: PPUSH
17635: LD_INT 20
17637: PPUSH
17638: CALL 9651 0 4
17642: PUSH
17643: LD_INT 4
17645: ARRAY
17646: IFFALSE 17650
// exit ;
17648: GO 17699
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17650: LD_VAR 0 2
17654: PUSH
17655: LD_INT 29
17657: PUSH
17658: LD_INT 30
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: IN
17665: PUSH
17666: LD_VAR 0 3
17670: PPUSH
17671: LD_VAR 0 4
17675: PPUSH
17676: LD_VAR 0 9
17680: PPUSH
17681: CALL_OW 440
17685: NOT
17686: AND
17687: IFFALSE 17691
// exit ;
17689: GO 17699
// result := true ;
17691: LD_ADDR_VAR 0 6
17695: PUSH
17696: LD_INT 1
17698: ST_TO_ADDR
// end ;
17699: LD_VAR 0 6
17703: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17704: LD_INT 0
17706: PPUSH
17707: PPUSH
17708: PPUSH
17709: PPUSH
17710: PPUSH
17711: PPUSH
17712: PPUSH
17713: PPUSH
17714: PPUSH
17715: PPUSH
17716: PPUSH
17717: PPUSH
17718: PPUSH
17719: PPUSH
17720: PPUSH
17721: PPUSH
17722: PPUSH
17723: PPUSH
17724: PPUSH
17725: PPUSH
17726: PPUSH
17727: PPUSH
17728: PPUSH
17729: PPUSH
17730: PPUSH
17731: PPUSH
17732: PPUSH
17733: PPUSH
17734: PPUSH
17735: PPUSH
17736: PPUSH
17737: PPUSH
17738: PPUSH
17739: PPUSH
17740: PPUSH
17741: PPUSH
17742: PPUSH
17743: PPUSH
17744: PPUSH
17745: PPUSH
17746: PPUSH
17747: PPUSH
17748: PPUSH
17749: PPUSH
17750: PPUSH
17751: PPUSH
17752: PPUSH
17753: PPUSH
17754: PPUSH
17755: PPUSH
17756: PPUSH
17757: PPUSH
17758: PPUSH
17759: PPUSH
17760: PPUSH
17761: PPUSH
17762: PPUSH
17763: PPUSH
// result = [ ] ;
17764: LD_ADDR_VAR 0 7
17768: PUSH
17769: EMPTY
17770: ST_TO_ADDR
// temp_list = [ ] ;
17771: LD_ADDR_VAR 0 9
17775: PUSH
17776: EMPTY
17777: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17778: LD_VAR 0 4
17782: PUSH
17783: LD_INT 0
17785: PUSH
17786: LD_INT 1
17788: PUSH
17789: LD_INT 2
17791: PUSH
17792: LD_INT 3
17794: PUSH
17795: LD_INT 4
17797: PUSH
17798: LD_INT 5
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: LIST
17805: LIST
17806: LIST
17807: LIST
17808: IN
17809: NOT
17810: PUSH
17811: LD_VAR 0 1
17815: PUSH
17816: LD_INT 0
17818: PUSH
17819: LD_INT 1
17821: PUSH
17822: EMPTY
17823: LIST
17824: LIST
17825: IN
17826: PUSH
17827: LD_VAR 0 5
17831: PUSH
17832: LD_INT 1
17834: PUSH
17835: LD_INT 2
17837: PUSH
17838: LD_INT 3
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: LIST
17845: IN
17846: NOT
17847: AND
17848: OR
17849: IFFALSE 17853
// exit ;
17851: GO 36244
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17853: LD_VAR 0 1
17857: PUSH
17858: LD_INT 6
17860: PUSH
17861: LD_INT 7
17863: PUSH
17864: LD_INT 8
17866: PUSH
17867: LD_INT 13
17869: PUSH
17870: LD_INT 12
17872: PUSH
17873: LD_INT 15
17875: PUSH
17876: LD_INT 11
17878: PUSH
17879: LD_INT 14
17881: PUSH
17882: LD_INT 10
17884: PUSH
17885: EMPTY
17886: LIST
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: LIST
17892: LIST
17893: LIST
17894: LIST
17895: IN
17896: IFFALSE 17906
// btype = b_lab ;
17898: LD_ADDR_VAR 0 1
17902: PUSH
17903: LD_INT 6
17905: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17906: LD_VAR 0 6
17910: PUSH
17911: LD_INT 0
17913: PUSH
17914: LD_INT 1
17916: PUSH
17917: LD_INT 2
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: LIST
17924: IN
17925: NOT
17926: PUSH
17927: LD_VAR 0 1
17931: PUSH
17932: LD_INT 0
17934: PUSH
17935: LD_INT 1
17937: PUSH
17938: LD_INT 2
17940: PUSH
17941: LD_INT 3
17943: PUSH
17944: LD_INT 6
17946: PUSH
17947: LD_INT 36
17949: PUSH
17950: LD_INT 4
17952: PUSH
17953: LD_INT 5
17955: PUSH
17956: LD_INT 31
17958: PUSH
17959: LD_INT 32
17961: PUSH
17962: LD_INT 33
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: IN
17978: NOT
17979: PUSH
17980: LD_VAR 0 6
17984: PUSH
17985: LD_INT 1
17987: EQUAL
17988: AND
17989: OR
17990: PUSH
17991: LD_VAR 0 1
17995: PUSH
17996: LD_INT 2
17998: PUSH
17999: LD_INT 3
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: IN
18006: NOT
18007: PUSH
18008: LD_VAR 0 6
18012: PUSH
18013: LD_INT 2
18015: EQUAL
18016: AND
18017: OR
18018: IFFALSE 18028
// mode = 0 ;
18020: LD_ADDR_VAR 0 6
18024: PUSH
18025: LD_INT 0
18027: ST_TO_ADDR
// case mode of 0 :
18028: LD_VAR 0 6
18032: PUSH
18033: LD_INT 0
18035: DOUBLE
18036: EQUAL
18037: IFTRUE 18041
18039: GO 29494
18041: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
18042: LD_ADDR_VAR 0 11
18046: PUSH
18047: LD_INT 0
18049: PUSH
18050: LD_INT 0
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: PUSH
18057: LD_INT 0
18059: PUSH
18060: LD_INT 1
18062: NEG
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: PUSH
18068: LD_INT 1
18070: PUSH
18071: LD_INT 0
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PUSH
18078: LD_INT 1
18080: PUSH
18081: LD_INT 1
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: LD_INT 0
18090: PUSH
18091: LD_INT 1
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PUSH
18098: LD_INT 1
18100: NEG
18101: PUSH
18102: LD_INT 0
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PUSH
18109: LD_INT 1
18111: NEG
18112: PUSH
18113: LD_INT 1
18115: NEG
18116: PUSH
18117: EMPTY
18118: LIST
18119: LIST
18120: PUSH
18121: LD_INT 1
18123: NEG
18124: PUSH
18125: LD_INT 2
18127: NEG
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: PUSH
18133: LD_INT 0
18135: PUSH
18136: LD_INT 2
18138: NEG
18139: PUSH
18140: EMPTY
18141: LIST
18142: LIST
18143: PUSH
18144: LD_INT 1
18146: PUSH
18147: LD_INT 1
18149: NEG
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: PUSH
18155: LD_INT 1
18157: PUSH
18158: LD_INT 2
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PUSH
18165: LD_INT 0
18167: PUSH
18168: LD_INT 2
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: PUSH
18175: LD_INT 1
18177: NEG
18178: PUSH
18179: LD_INT 1
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: PUSH
18186: LD_INT 1
18188: PUSH
18189: LD_INT 3
18191: PUSH
18192: EMPTY
18193: LIST
18194: LIST
18195: PUSH
18196: LD_INT 0
18198: PUSH
18199: LD_INT 3
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PUSH
18206: LD_INT 1
18208: NEG
18209: PUSH
18210: LD_INT 2
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: LIST
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18235: LD_ADDR_VAR 0 12
18239: PUSH
18240: LD_INT 0
18242: PUSH
18243: LD_INT 0
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PUSH
18250: LD_INT 0
18252: PUSH
18253: LD_INT 1
18255: NEG
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: PUSH
18261: LD_INT 1
18263: PUSH
18264: LD_INT 0
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: PUSH
18271: LD_INT 1
18273: PUSH
18274: LD_INT 1
18276: PUSH
18277: EMPTY
18278: LIST
18279: LIST
18280: PUSH
18281: LD_INT 0
18283: PUSH
18284: LD_INT 1
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: PUSH
18291: LD_INT 1
18293: NEG
18294: PUSH
18295: LD_INT 0
18297: PUSH
18298: EMPTY
18299: LIST
18300: LIST
18301: PUSH
18302: LD_INT 1
18304: NEG
18305: PUSH
18306: LD_INT 1
18308: NEG
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: PUSH
18314: LD_INT 1
18316: PUSH
18317: LD_INT 1
18319: NEG
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: PUSH
18325: LD_INT 2
18327: PUSH
18328: LD_INT 0
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: PUSH
18335: LD_INT 2
18337: PUSH
18338: LD_INT 1
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: PUSH
18345: LD_INT 1
18347: NEG
18348: PUSH
18349: LD_INT 1
18351: PUSH
18352: EMPTY
18353: LIST
18354: LIST
18355: PUSH
18356: LD_INT 2
18358: NEG
18359: PUSH
18360: LD_INT 0
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: PUSH
18367: LD_INT 2
18369: NEG
18370: PUSH
18371: LD_INT 1
18373: NEG
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: PUSH
18379: LD_INT 2
18381: NEG
18382: PUSH
18383: LD_INT 1
18385: PUSH
18386: EMPTY
18387: LIST
18388: LIST
18389: PUSH
18390: LD_INT 3
18392: NEG
18393: PUSH
18394: LD_INT 0
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: PUSH
18401: LD_INT 3
18403: NEG
18404: PUSH
18405: LD_INT 1
18407: NEG
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: LIST
18417: LIST
18418: LIST
18419: LIST
18420: LIST
18421: LIST
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18431: LD_ADDR_VAR 0 13
18435: PUSH
18436: LD_INT 0
18438: PUSH
18439: LD_INT 0
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: PUSH
18446: LD_INT 0
18448: PUSH
18449: LD_INT 1
18451: NEG
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PUSH
18457: LD_INT 1
18459: PUSH
18460: LD_INT 0
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PUSH
18467: LD_INT 1
18469: PUSH
18470: LD_INT 1
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: PUSH
18477: LD_INT 0
18479: PUSH
18480: LD_INT 1
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: PUSH
18487: LD_INT 1
18489: NEG
18490: PUSH
18491: LD_INT 0
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PUSH
18498: LD_INT 1
18500: NEG
18501: PUSH
18502: LD_INT 1
18504: NEG
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: PUSH
18510: LD_INT 1
18512: NEG
18513: PUSH
18514: LD_INT 2
18516: NEG
18517: PUSH
18518: EMPTY
18519: LIST
18520: LIST
18521: PUSH
18522: LD_INT 2
18524: PUSH
18525: LD_INT 1
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: PUSH
18532: LD_INT 2
18534: PUSH
18535: LD_INT 2
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: PUSH
18542: LD_INT 1
18544: PUSH
18545: LD_INT 2
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: LD_INT 2
18554: NEG
18555: PUSH
18556: LD_INT 1
18558: NEG
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PUSH
18564: LD_INT 2
18566: NEG
18567: PUSH
18568: LD_INT 2
18570: NEG
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: PUSH
18576: LD_INT 2
18578: NEG
18579: PUSH
18580: LD_INT 3
18582: NEG
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: PUSH
18588: LD_INT 3
18590: NEG
18591: PUSH
18592: LD_INT 2
18594: NEG
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: PUSH
18600: LD_INT 3
18602: NEG
18603: PUSH
18604: LD_INT 3
18606: NEG
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18630: LD_ADDR_VAR 0 14
18634: PUSH
18635: LD_INT 0
18637: PUSH
18638: LD_INT 0
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: PUSH
18645: LD_INT 0
18647: PUSH
18648: LD_INT 1
18650: NEG
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: PUSH
18656: LD_INT 1
18658: PUSH
18659: LD_INT 0
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PUSH
18666: LD_INT 1
18668: PUSH
18669: LD_INT 1
18671: PUSH
18672: EMPTY
18673: LIST
18674: LIST
18675: PUSH
18676: LD_INT 0
18678: PUSH
18679: LD_INT 1
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: PUSH
18686: LD_INT 1
18688: NEG
18689: PUSH
18690: LD_INT 0
18692: PUSH
18693: EMPTY
18694: LIST
18695: LIST
18696: PUSH
18697: LD_INT 1
18699: NEG
18700: PUSH
18701: LD_INT 1
18703: NEG
18704: PUSH
18705: EMPTY
18706: LIST
18707: LIST
18708: PUSH
18709: LD_INT 1
18711: NEG
18712: PUSH
18713: LD_INT 2
18715: NEG
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: LD_INT 0
18723: PUSH
18724: LD_INT 2
18726: NEG
18727: PUSH
18728: EMPTY
18729: LIST
18730: LIST
18731: PUSH
18732: LD_INT 1
18734: PUSH
18735: LD_INT 1
18737: NEG
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: PUSH
18743: LD_INT 1
18745: PUSH
18746: LD_INT 2
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: PUSH
18753: LD_INT 0
18755: PUSH
18756: LD_INT 2
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PUSH
18763: LD_INT 1
18765: NEG
18766: PUSH
18767: LD_INT 1
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: PUSH
18774: LD_INT 1
18776: NEG
18777: PUSH
18778: LD_INT 3
18780: NEG
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: PUSH
18786: LD_INT 0
18788: PUSH
18789: LD_INT 3
18791: NEG
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: PUSH
18797: LD_INT 1
18799: PUSH
18800: LD_INT 2
18802: NEG
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: PUSH
18808: EMPTY
18809: LIST
18810: LIST
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: LIST
18817: LIST
18818: LIST
18819: LIST
18820: LIST
18821: LIST
18822: LIST
18823: LIST
18824: LIST
18825: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18826: LD_ADDR_VAR 0 15
18830: PUSH
18831: LD_INT 0
18833: PUSH
18834: LD_INT 0
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: PUSH
18841: LD_INT 0
18843: PUSH
18844: LD_INT 1
18846: NEG
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: PUSH
18852: LD_INT 1
18854: PUSH
18855: LD_INT 0
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: PUSH
18862: LD_INT 1
18864: PUSH
18865: LD_INT 1
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: PUSH
18872: LD_INT 0
18874: PUSH
18875: LD_INT 1
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: PUSH
18882: LD_INT 1
18884: NEG
18885: PUSH
18886: LD_INT 0
18888: PUSH
18889: EMPTY
18890: LIST
18891: LIST
18892: PUSH
18893: LD_INT 1
18895: NEG
18896: PUSH
18897: LD_INT 1
18899: NEG
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: PUSH
18905: LD_INT 1
18907: PUSH
18908: LD_INT 1
18910: NEG
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: PUSH
18916: LD_INT 2
18918: PUSH
18919: LD_INT 0
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: PUSH
18926: LD_INT 2
18928: PUSH
18929: LD_INT 1
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: PUSH
18936: LD_INT 1
18938: NEG
18939: PUSH
18940: LD_INT 1
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: PUSH
18947: LD_INT 2
18949: NEG
18950: PUSH
18951: LD_INT 0
18953: PUSH
18954: EMPTY
18955: LIST
18956: LIST
18957: PUSH
18958: LD_INT 2
18960: NEG
18961: PUSH
18962: LD_INT 1
18964: NEG
18965: PUSH
18966: EMPTY
18967: LIST
18968: LIST
18969: PUSH
18970: LD_INT 2
18972: PUSH
18973: LD_INT 1
18975: NEG
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: PUSH
18981: LD_INT 3
18983: PUSH
18984: LD_INT 0
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: PUSH
18991: LD_INT 3
18993: PUSH
18994: LD_INT 1
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: LIST
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
19019: LD_ADDR_VAR 0 16
19023: PUSH
19024: LD_INT 0
19026: PUSH
19027: LD_INT 0
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: PUSH
19034: LD_INT 0
19036: PUSH
19037: LD_INT 1
19039: NEG
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: PUSH
19045: LD_INT 1
19047: PUSH
19048: LD_INT 0
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: PUSH
19055: LD_INT 1
19057: PUSH
19058: LD_INT 1
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: LD_INT 0
19067: PUSH
19068: LD_INT 1
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PUSH
19075: LD_INT 1
19077: NEG
19078: PUSH
19079: LD_INT 0
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: PUSH
19086: LD_INT 1
19088: NEG
19089: PUSH
19090: LD_INT 1
19092: NEG
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: PUSH
19098: LD_INT 1
19100: NEG
19101: PUSH
19102: LD_INT 2
19104: NEG
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: PUSH
19110: LD_INT 2
19112: PUSH
19113: LD_INT 1
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: PUSH
19120: LD_INT 2
19122: PUSH
19123: LD_INT 2
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: PUSH
19130: LD_INT 1
19132: PUSH
19133: LD_INT 2
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: PUSH
19140: LD_INT 2
19142: NEG
19143: PUSH
19144: LD_INT 1
19146: NEG
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: PUSH
19152: LD_INT 2
19154: NEG
19155: PUSH
19156: LD_INT 2
19158: NEG
19159: PUSH
19160: EMPTY
19161: LIST
19162: LIST
19163: PUSH
19164: LD_INT 3
19166: PUSH
19167: LD_INT 2
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PUSH
19174: LD_INT 3
19176: PUSH
19177: LD_INT 3
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: LD_INT 2
19186: PUSH
19187: LD_INT 3
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19212: LD_ADDR_VAR 0 17
19216: PUSH
19217: LD_INT 0
19219: PUSH
19220: LD_INT 0
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: PUSH
19227: LD_INT 0
19229: PUSH
19230: LD_INT 1
19232: NEG
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: PUSH
19238: LD_INT 1
19240: PUSH
19241: LD_INT 0
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: PUSH
19248: LD_INT 1
19250: PUSH
19251: LD_INT 1
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PUSH
19258: LD_INT 0
19260: PUSH
19261: LD_INT 1
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: PUSH
19268: LD_INT 1
19270: NEG
19271: PUSH
19272: LD_INT 0
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: PUSH
19279: LD_INT 1
19281: NEG
19282: PUSH
19283: LD_INT 1
19285: NEG
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: PUSH
19291: LD_INT 1
19293: NEG
19294: PUSH
19295: LD_INT 2
19297: NEG
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: PUSH
19303: LD_INT 0
19305: PUSH
19306: LD_INT 2
19308: NEG
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: LD_INT 1
19316: PUSH
19317: LD_INT 1
19319: NEG
19320: PUSH
19321: EMPTY
19322: LIST
19323: LIST
19324: PUSH
19325: LD_INT 2
19327: PUSH
19328: LD_INT 0
19330: PUSH
19331: EMPTY
19332: LIST
19333: LIST
19334: PUSH
19335: LD_INT 2
19337: PUSH
19338: LD_INT 1
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: PUSH
19345: LD_INT 2
19347: PUSH
19348: LD_INT 2
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: PUSH
19355: LD_INT 1
19357: PUSH
19358: LD_INT 2
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: PUSH
19365: LD_INT 0
19367: PUSH
19368: LD_INT 2
19370: PUSH
19371: EMPTY
19372: LIST
19373: LIST
19374: PUSH
19375: LD_INT 1
19377: NEG
19378: PUSH
19379: LD_INT 1
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: PUSH
19386: LD_INT 2
19388: NEG
19389: PUSH
19390: LD_INT 0
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: PUSH
19397: LD_INT 2
19399: NEG
19400: PUSH
19401: LD_INT 1
19403: NEG
19404: PUSH
19405: EMPTY
19406: LIST
19407: LIST
19408: PUSH
19409: LD_INT 2
19411: NEG
19412: PUSH
19413: LD_INT 2
19415: NEG
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19442: LD_ADDR_VAR 0 18
19446: PUSH
19447: LD_INT 0
19449: PUSH
19450: LD_INT 0
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: PUSH
19457: LD_INT 0
19459: PUSH
19460: LD_INT 1
19462: NEG
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PUSH
19468: LD_INT 1
19470: PUSH
19471: LD_INT 0
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: LD_INT 1
19480: PUSH
19481: LD_INT 1
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: LD_INT 0
19490: PUSH
19491: LD_INT 1
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PUSH
19498: LD_INT 1
19500: NEG
19501: PUSH
19502: LD_INT 0
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: LD_INT 1
19511: NEG
19512: PUSH
19513: LD_INT 1
19515: NEG
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PUSH
19521: LD_INT 1
19523: NEG
19524: PUSH
19525: LD_INT 2
19527: NEG
19528: PUSH
19529: EMPTY
19530: LIST
19531: LIST
19532: PUSH
19533: LD_INT 0
19535: PUSH
19536: LD_INT 2
19538: NEG
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: PUSH
19544: LD_INT 1
19546: PUSH
19547: LD_INT 1
19549: NEG
19550: PUSH
19551: EMPTY
19552: LIST
19553: LIST
19554: PUSH
19555: LD_INT 2
19557: PUSH
19558: LD_INT 0
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: PUSH
19565: LD_INT 2
19567: PUSH
19568: LD_INT 1
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: PUSH
19575: LD_INT 2
19577: PUSH
19578: LD_INT 2
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: PUSH
19585: LD_INT 1
19587: PUSH
19588: LD_INT 2
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: PUSH
19595: LD_INT 0
19597: PUSH
19598: LD_INT 2
19600: PUSH
19601: EMPTY
19602: LIST
19603: LIST
19604: PUSH
19605: LD_INT 1
19607: NEG
19608: PUSH
19609: LD_INT 1
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: PUSH
19616: LD_INT 2
19618: NEG
19619: PUSH
19620: LD_INT 0
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: PUSH
19627: LD_INT 2
19629: NEG
19630: PUSH
19631: LD_INT 1
19633: NEG
19634: PUSH
19635: EMPTY
19636: LIST
19637: LIST
19638: PUSH
19639: LD_INT 2
19641: NEG
19642: PUSH
19643: LD_INT 2
19645: NEG
19646: PUSH
19647: EMPTY
19648: LIST
19649: LIST
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19672: LD_ADDR_VAR 0 19
19676: PUSH
19677: LD_INT 0
19679: PUSH
19680: LD_INT 0
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: PUSH
19687: LD_INT 0
19689: PUSH
19690: LD_INT 1
19692: NEG
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: PUSH
19698: LD_INT 1
19700: PUSH
19701: LD_INT 0
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: PUSH
19708: LD_INT 1
19710: PUSH
19711: LD_INT 1
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PUSH
19718: LD_INT 0
19720: PUSH
19721: LD_INT 1
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: PUSH
19728: LD_INT 1
19730: NEG
19731: PUSH
19732: LD_INT 0
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: PUSH
19739: LD_INT 1
19741: NEG
19742: PUSH
19743: LD_INT 1
19745: NEG
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: PUSH
19751: LD_INT 1
19753: NEG
19754: PUSH
19755: LD_INT 2
19757: NEG
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 0
19765: PUSH
19766: LD_INT 2
19768: NEG
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PUSH
19774: LD_INT 1
19776: PUSH
19777: LD_INT 1
19779: NEG
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 2
19787: PUSH
19788: LD_INT 0
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: PUSH
19795: LD_INT 2
19797: PUSH
19798: LD_INT 1
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: PUSH
19805: LD_INT 2
19807: PUSH
19808: LD_INT 2
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: PUSH
19815: LD_INT 1
19817: PUSH
19818: LD_INT 2
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: PUSH
19825: LD_INT 0
19827: PUSH
19828: LD_INT 2
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: PUSH
19835: LD_INT 1
19837: NEG
19838: PUSH
19839: LD_INT 1
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: LD_INT 2
19848: NEG
19849: PUSH
19850: LD_INT 0
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: PUSH
19857: LD_INT 2
19859: NEG
19860: PUSH
19861: LD_INT 1
19863: NEG
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: PUSH
19869: LD_INT 2
19871: NEG
19872: PUSH
19873: LD_INT 2
19875: NEG
19876: PUSH
19877: EMPTY
19878: LIST
19879: LIST
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19902: LD_ADDR_VAR 0 20
19906: PUSH
19907: LD_INT 0
19909: PUSH
19910: LD_INT 0
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: PUSH
19917: LD_INT 0
19919: PUSH
19920: LD_INT 1
19922: NEG
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: PUSH
19928: LD_INT 1
19930: PUSH
19931: LD_INT 0
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: PUSH
19938: LD_INT 1
19940: PUSH
19941: LD_INT 1
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: PUSH
19948: LD_INT 0
19950: PUSH
19951: LD_INT 1
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PUSH
19958: LD_INT 1
19960: NEG
19961: PUSH
19962: LD_INT 0
19964: PUSH
19965: EMPTY
19966: LIST
19967: LIST
19968: PUSH
19969: LD_INT 1
19971: NEG
19972: PUSH
19973: LD_INT 1
19975: NEG
19976: PUSH
19977: EMPTY
19978: LIST
19979: LIST
19980: PUSH
19981: LD_INT 1
19983: NEG
19984: PUSH
19985: LD_INT 2
19987: NEG
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 0
19995: PUSH
19996: LD_INT 2
19998: NEG
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: PUSH
20004: LD_INT 1
20006: PUSH
20007: LD_INT 1
20009: NEG
20010: PUSH
20011: EMPTY
20012: LIST
20013: LIST
20014: PUSH
20015: LD_INT 2
20017: PUSH
20018: LD_INT 0
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: PUSH
20025: LD_INT 2
20027: PUSH
20028: LD_INT 1
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: PUSH
20035: LD_INT 2
20037: PUSH
20038: LD_INT 2
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: LD_INT 1
20047: PUSH
20048: LD_INT 2
20050: PUSH
20051: EMPTY
20052: LIST
20053: LIST
20054: PUSH
20055: LD_INT 0
20057: PUSH
20058: LD_INT 2
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: PUSH
20065: LD_INT 1
20067: NEG
20068: PUSH
20069: LD_INT 1
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: PUSH
20076: LD_INT 2
20078: NEG
20079: PUSH
20080: LD_INT 0
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: PUSH
20087: LD_INT 2
20089: NEG
20090: PUSH
20091: LD_INT 1
20093: NEG
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: PUSH
20099: LD_INT 2
20101: NEG
20102: PUSH
20103: LD_INT 2
20105: NEG
20106: PUSH
20107: EMPTY
20108: LIST
20109: LIST
20110: PUSH
20111: EMPTY
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20132: LD_ADDR_VAR 0 21
20136: PUSH
20137: LD_INT 0
20139: PUSH
20140: LD_INT 0
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: PUSH
20147: LD_INT 0
20149: PUSH
20150: LD_INT 1
20152: NEG
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: PUSH
20158: LD_INT 1
20160: PUSH
20161: LD_INT 0
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: PUSH
20168: LD_INT 1
20170: PUSH
20171: LD_INT 1
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: PUSH
20178: LD_INT 0
20180: PUSH
20181: LD_INT 1
20183: PUSH
20184: EMPTY
20185: LIST
20186: LIST
20187: PUSH
20188: LD_INT 1
20190: NEG
20191: PUSH
20192: LD_INT 0
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: PUSH
20199: LD_INT 1
20201: NEG
20202: PUSH
20203: LD_INT 1
20205: NEG
20206: PUSH
20207: EMPTY
20208: LIST
20209: LIST
20210: PUSH
20211: LD_INT 1
20213: NEG
20214: PUSH
20215: LD_INT 2
20217: NEG
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: PUSH
20223: LD_INT 0
20225: PUSH
20226: LD_INT 2
20228: NEG
20229: PUSH
20230: EMPTY
20231: LIST
20232: LIST
20233: PUSH
20234: LD_INT 1
20236: PUSH
20237: LD_INT 1
20239: NEG
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: PUSH
20245: LD_INT 2
20247: PUSH
20248: LD_INT 0
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: PUSH
20255: LD_INT 2
20257: PUSH
20258: LD_INT 1
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: PUSH
20265: LD_INT 2
20267: PUSH
20268: LD_INT 2
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: LD_INT 1
20277: PUSH
20278: LD_INT 2
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: PUSH
20285: LD_INT 0
20287: PUSH
20288: LD_INT 2
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: PUSH
20295: LD_INT 1
20297: NEG
20298: PUSH
20299: LD_INT 1
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: PUSH
20306: LD_INT 2
20308: NEG
20309: PUSH
20310: LD_INT 0
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: PUSH
20317: LD_INT 2
20319: NEG
20320: PUSH
20321: LD_INT 1
20323: NEG
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: PUSH
20329: LD_INT 2
20331: NEG
20332: PUSH
20333: LD_INT 2
20335: NEG
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20362: LD_ADDR_VAR 0 22
20366: PUSH
20367: LD_INT 0
20369: PUSH
20370: LD_INT 0
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: PUSH
20377: LD_INT 0
20379: PUSH
20380: LD_INT 1
20382: NEG
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: PUSH
20388: LD_INT 1
20390: PUSH
20391: LD_INT 0
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: PUSH
20398: LD_INT 1
20400: PUSH
20401: LD_INT 1
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: PUSH
20408: LD_INT 0
20410: PUSH
20411: LD_INT 1
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: PUSH
20418: LD_INT 1
20420: NEG
20421: PUSH
20422: LD_INT 0
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: PUSH
20429: LD_INT 1
20431: NEG
20432: PUSH
20433: LD_INT 1
20435: NEG
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: PUSH
20441: LD_INT 1
20443: NEG
20444: PUSH
20445: LD_INT 2
20447: NEG
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 0
20455: PUSH
20456: LD_INT 2
20458: NEG
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: PUSH
20464: LD_INT 1
20466: PUSH
20467: LD_INT 1
20469: NEG
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: PUSH
20475: LD_INT 2
20477: PUSH
20478: LD_INT 0
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: PUSH
20485: LD_INT 2
20487: PUSH
20488: LD_INT 1
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: PUSH
20495: LD_INT 2
20497: PUSH
20498: LD_INT 2
20500: PUSH
20501: EMPTY
20502: LIST
20503: LIST
20504: PUSH
20505: LD_INT 1
20507: PUSH
20508: LD_INT 2
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: PUSH
20515: LD_INT 0
20517: PUSH
20518: LD_INT 2
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: PUSH
20525: LD_INT 1
20527: NEG
20528: PUSH
20529: LD_INT 1
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: PUSH
20536: LD_INT 2
20538: NEG
20539: PUSH
20540: LD_INT 0
20542: PUSH
20543: EMPTY
20544: LIST
20545: LIST
20546: PUSH
20547: LD_INT 2
20549: NEG
20550: PUSH
20551: LD_INT 1
20553: NEG
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: PUSH
20559: LD_INT 2
20561: NEG
20562: PUSH
20563: LD_INT 2
20565: NEG
20566: PUSH
20567: EMPTY
20568: LIST
20569: LIST
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20592: LD_ADDR_VAR 0 23
20596: PUSH
20597: LD_INT 0
20599: PUSH
20600: LD_INT 0
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: PUSH
20607: LD_INT 0
20609: PUSH
20610: LD_INT 1
20612: NEG
20613: PUSH
20614: EMPTY
20615: LIST
20616: LIST
20617: PUSH
20618: LD_INT 1
20620: PUSH
20621: LD_INT 0
20623: PUSH
20624: EMPTY
20625: LIST
20626: LIST
20627: PUSH
20628: LD_INT 1
20630: PUSH
20631: LD_INT 1
20633: PUSH
20634: EMPTY
20635: LIST
20636: LIST
20637: PUSH
20638: LD_INT 0
20640: PUSH
20641: LD_INT 1
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: PUSH
20648: LD_INT 1
20650: NEG
20651: PUSH
20652: LD_INT 0
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: PUSH
20659: LD_INT 1
20661: NEG
20662: PUSH
20663: LD_INT 1
20665: NEG
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PUSH
20671: LD_INT 1
20673: NEG
20674: PUSH
20675: LD_INT 2
20677: NEG
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PUSH
20683: LD_INT 0
20685: PUSH
20686: LD_INT 2
20688: NEG
20689: PUSH
20690: EMPTY
20691: LIST
20692: LIST
20693: PUSH
20694: LD_INT 1
20696: PUSH
20697: LD_INT 1
20699: NEG
20700: PUSH
20701: EMPTY
20702: LIST
20703: LIST
20704: PUSH
20705: LD_INT 2
20707: PUSH
20708: LD_INT 0
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: PUSH
20715: LD_INT 2
20717: PUSH
20718: LD_INT 1
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: PUSH
20725: LD_INT 2
20727: PUSH
20728: LD_INT 2
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: PUSH
20735: LD_INT 1
20737: PUSH
20738: LD_INT 2
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: PUSH
20745: LD_INT 0
20747: PUSH
20748: LD_INT 2
20750: PUSH
20751: EMPTY
20752: LIST
20753: LIST
20754: PUSH
20755: LD_INT 1
20757: NEG
20758: PUSH
20759: LD_INT 1
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: PUSH
20766: LD_INT 2
20768: NEG
20769: PUSH
20770: LD_INT 0
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: PUSH
20777: LD_INT 2
20779: NEG
20780: PUSH
20781: LD_INT 1
20783: NEG
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: PUSH
20789: LD_INT 2
20791: NEG
20792: PUSH
20793: LD_INT 2
20795: NEG
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: PUSH
20801: LD_INT 2
20803: NEG
20804: PUSH
20805: LD_INT 3
20807: NEG
20808: PUSH
20809: EMPTY
20810: LIST
20811: LIST
20812: PUSH
20813: LD_INT 1
20815: NEG
20816: PUSH
20817: LD_INT 3
20819: NEG
20820: PUSH
20821: EMPTY
20822: LIST
20823: LIST
20824: PUSH
20825: LD_INT 1
20827: PUSH
20828: LD_INT 2
20830: NEG
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: PUSH
20836: LD_INT 2
20838: PUSH
20839: LD_INT 1
20841: NEG
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20872: LD_ADDR_VAR 0 24
20876: PUSH
20877: LD_INT 0
20879: PUSH
20880: LD_INT 0
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: PUSH
20887: LD_INT 0
20889: PUSH
20890: LD_INT 1
20892: NEG
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 1
20900: PUSH
20901: LD_INT 0
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: PUSH
20908: LD_INT 1
20910: PUSH
20911: LD_INT 1
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: PUSH
20918: LD_INT 0
20920: PUSH
20921: LD_INT 1
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: PUSH
20928: LD_INT 1
20930: NEG
20931: PUSH
20932: LD_INT 0
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: PUSH
20939: LD_INT 1
20941: NEG
20942: PUSH
20943: LD_INT 1
20945: NEG
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PUSH
20951: LD_INT 1
20953: NEG
20954: PUSH
20955: LD_INT 2
20957: NEG
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: PUSH
20963: LD_INT 0
20965: PUSH
20966: LD_INT 2
20968: NEG
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: PUSH
20974: LD_INT 1
20976: PUSH
20977: LD_INT 1
20979: NEG
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: PUSH
20985: LD_INT 2
20987: PUSH
20988: LD_INT 0
20990: PUSH
20991: EMPTY
20992: LIST
20993: LIST
20994: PUSH
20995: LD_INT 2
20997: PUSH
20998: LD_INT 1
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: PUSH
21005: LD_INT 2
21007: PUSH
21008: LD_INT 2
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: PUSH
21015: LD_INT 1
21017: PUSH
21018: LD_INT 2
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: PUSH
21025: LD_INT 0
21027: PUSH
21028: LD_INT 2
21030: PUSH
21031: EMPTY
21032: LIST
21033: LIST
21034: PUSH
21035: LD_INT 1
21037: NEG
21038: PUSH
21039: LD_INT 1
21041: PUSH
21042: EMPTY
21043: LIST
21044: LIST
21045: PUSH
21046: LD_INT 2
21048: NEG
21049: PUSH
21050: LD_INT 0
21052: PUSH
21053: EMPTY
21054: LIST
21055: LIST
21056: PUSH
21057: LD_INT 2
21059: NEG
21060: PUSH
21061: LD_INT 1
21063: NEG
21064: PUSH
21065: EMPTY
21066: LIST
21067: LIST
21068: PUSH
21069: LD_INT 2
21071: NEG
21072: PUSH
21073: LD_INT 2
21075: NEG
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: PUSH
21081: LD_INT 1
21083: PUSH
21084: LD_INT 2
21086: NEG
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: PUSH
21092: LD_INT 2
21094: PUSH
21095: LD_INT 1
21097: NEG
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: PUSH
21103: LD_INT 3
21105: PUSH
21106: LD_INT 1
21108: PUSH
21109: EMPTY
21110: LIST
21111: LIST
21112: PUSH
21113: LD_INT 3
21115: PUSH
21116: LD_INT 2
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21148: LD_ADDR_VAR 0 25
21152: PUSH
21153: LD_INT 0
21155: PUSH
21156: LD_INT 0
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: PUSH
21163: LD_INT 0
21165: PUSH
21166: LD_INT 1
21168: NEG
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: PUSH
21174: LD_INT 1
21176: PUSH
21177: LD_INT 0
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: PUSH
21184: LD_INT 1
21186: PUSH
21187: LD_INT 1
21189: PUSH
21190: EMPTY
21191: LIST
21192: LIST
21193: PUSH
21194: LD_INT 0
21196: PUSH
21197: LD_INT 1
21199: PUSH
21200: EMPTY
21201: LIST
21202: LIST
21203: PUSH
21204: LD_INT 1
21206: NEG
21207: PUSH
21208: LD_INT 0
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: PUSH
21215: LD_INT 1
21217: NEG
21218: PUSH
21219: LD_INT 1
21221: NEG
21222: PUSH
21223: EMPTY
21224: LIST
21225: LIST
21226: PUSH
21227: LD_INT 1
21229: NEG
21230: PUSH
21231: LD_INT 2
21233: NEG
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: PUSH
21239: LD_INT 0
21241: PUSH
21242: LD_INT 2
21244: NEG
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: PUSH
21250: LD_INT 1
21252: PUSH
21253: LD_INT 1
21255: NEG
21256: PUSH
21257: EMPTY
21258: LIST
21259: LIST
21260: PUSH
21261: LD_INT 2
21263: PUSH
21264: LD_INT 0
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: PUSH
21271: LD_INT 2
21273: PUSH
21274: LD_INT 1
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: PUSH
21281: LD_INT 2
21283: PUSH
21284: LD_INT 2
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: PUSH
21291: LD_INT 1
21293: PUSH
21294: LD_INT 2
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: PUSH
21301: LD_INT 0
21303: PUSH
21304: LD_INT 2
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: PUSH
21311: LD_INT 1
21313: NEG
21314: PUSH
21315: LD_INT 1
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: PUSH
21322: LD_INT 2
21324: NEG
21325: PUSH
21326: LD_INT 0
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: PUSH
21333: LD_INT 2
21335: NEG
21336: PUSH
21337: LD_INT 1
21339: NEG
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: PUSH
21345: LD_INT 2
21347: NEG
21348: PUSH
21349: LD_INT 2
21351: NEG
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PUSH
21357: LD_INT 3
21359: PUSH
21360: LD_INT 1
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: PUSH
21367: LD_INT 3
21369: PUSH
21370: LD_INT 2
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: PUSH
21377: LD_INT 2
21379: PUSH
21380: LD_INT 3
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: LD_INT 1
21389: PUSH
21390: LD_INT 3
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21422: LD_ADDR_VAR 0 26
21426: PUSH
21427: LD_INT 0
21429: PUSH
21430: LD_INT 0
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PUSH
21437: LD_INT 0
21439: PUSH
21440: LD_INT 1
21442: NEG
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: PUSH
21448: LD_INT 1
21450: PUSH
21451: LD_INT 0
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: PUSH
21458: LD_INT 1
21460: PUSH
21461: LD_INT 1
21463: PUSH
21464: EMPTY
21465: LIST
21466: LIST
21467: PUSH
21468: LD_INT 0
21470: PUSH
21471: LD_INT 1
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: PUSH
21478: LD_INT 1
21480: NEG
21481: PUSH
21482: LD_INT 0
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: PUSH
21489: LD_INT 1
21491: NEG
21492: PUSH
21493: LD_INT 1
21495: NEG
21496: PUSH
21497: EMPTY
21498: LIST
21499: LIST
21500: PUSH
21501: LD_INT 1
21503: NEG
21504: PUSH
21505: LD_INT 2
21507: NEG
21508: PUSH
21509: EMPTY
21510: LIST
21511: LIST
21512: PUSH
21513: LD_INT 0
21515: PUSH
21516: LD_INT 2
21518: NEG
21519: PUSH
21520: EMPTY
21521: LIST
21522: LIST
21523: PUSH
21524: LD_INT 1
21526: PUSH
21527: LD_INT 1
21529: NEG
21530: PUSH
21531: EMPTY
21532: LIST
21533: LIST
21534: PUSH
21535: LD_INT 2
21537: PUSH
21538: LD_INT 0
21540: PUSH
21541: EMPTY
21542: LIST
21543: LIST
21544: PUSH
21545: LD_INT 2
21547: PUSH
21548: LD_INT 1
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: PUSH
21555: LD_INT 2
21557: PUSH
21558: LD_INT 2
21560: PUSH
21561: EMPTY
21562: LIST
21563: LIST
21564: PUSH
21565: LD_INT 1
21567: PUSH
21568: LD_INT 2
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: PUSH
21575: LD_INT 0
21577: PUSH
21578: LD_INT 2
21580: PUSH
21581: EMPTY
21582: LIST
21583: LIST
21584: PUSH
21585: LD_INT 1
21587: NEG
21588: PUSH
21589: LD_INT 1
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: PUSH
21596: LD_INT 2
21598: NEG
21599: PUSH
21600: LD_INT 0
21602: PUSH
21603: EMPTY
21604: LIST
21605: LIST
21606: PUSH
21607: LD_INT 2
21609: NEG
21610: PUSH
21611: LD_INT 1
21613: NEG
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: LD_INT 2
21621: NEG
21622: PUSH
21623: LD_INT 2
21625: NEG
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: PUSH
21631: LD_INT 2
21633: PUSH
21634: LD_INT 3
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: PUSH
21641: LD_INT 1
21643: PUSH
21644: LD_INT 3
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: PUSH
21651: LD_INT 1
21653: NEG
21654: PUSH
21655: LD_INT 2
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PUSH
21662: LD_INT 2
21664: NEG
21665: PUSH
21666: LD_INT 1
21668: PUSH
21669: EMPTY
21670: LIST
21671: LIST
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21698: LD_ADDR_VAR 0 27
21702: PUSH
21703: LD_INT 0
21705: PUSH
21706: LD_INT 0
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: PUSH
21713: LD_INT 0
21715: PUSH
21716: LD_INT 1
21718: NEG
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: PUSH
21724: LD_INT 1
21726: PUSH
21727: LD_INT 0
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: PUSH
21734: LD_INT 1
21736: PUSH
21737: LD_INT 1
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: PUSH
21744: LD_INT 0
21746: PUSH
21747: LD_INT 1
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: PUSH
21754: LD_INT 1
21756: NEG
21757: PUSH
21758: LD_INT 0
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: PUSH
21765: LD_INT 1
21767: NEG
21768: PUSH
21769: LD_INT 1
21771: NEG
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: PUSH
21777: LD_INT 1
21779: NEG
21780: PUSH
21781: LD_INT 2
21783: NEG
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: PUSH
21789: LD_INT 0
21791: PUSH
21792: LD_INT 2
21794: NEG
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PUSH
21800: LD_INT 1
21802: PUSH
21803: LD_INT 1
21805: NEG
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: PUSH
21811: LD_INT 2
21813: PUSH
21814: LD_INT 0
21816: PUSH
21817: EMPTY
21818: LIST
21819: LIST
21820: PUSH
21821: LD_INT 2
21823: PUSH
21824: LD_INT 1
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: PUSH
21831: LD_INT 2
21833: PUSH
21834: LD_INT 2
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: PUSH
21841: LD_INT 1
21843: PUSH
21844: LD_INT 2
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: PUSH
21851: LD_INT 0
21853: PUSH
21854: LD_INT 2
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: PUSH
21861: LD_INT 1
21863: NEG
21864: PUSH
21865: LD_INT 1
21867: PUSH
21868: EMPTY
21869: LIST
21870: LIST
21871: PUSH
21872: LD_INT 2
21874: NEG
21875: PUSH
21876: LD_INT 0
21878: PUSH
21879: EMPTY
21880: LIST
21881: LIST
21882: PUSH
21883: LD_INT 2
21885: NEG
21886: PUSH
21887: LD_INT 1
21889: NEG
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: PUSH
21895: LD_INT 2
21897: NEG
21898: PUSH
21899: LD_INT 2
21901: NEG
21902: PUSH
21903: EMPTY
21904: LIST
21905: LIST
21906: PUSH
21907: LD_INT 1
21909: NEG
21910: PUSH
21911: LD_INT 2
21913: PUSH
21914: EMPTY
21915: LIST
21916: LIST
21917: PUSH
21918: LD_INT 2
21920: NEG
21921: PUSH
21922: LD_INT 1
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: PUSH
21929: LD_INT 3
21931: NEG
21932: PUSH
21933: LD_INT 1
21935: NEG
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: PUSH
21941: LD_INT 3
21943: NEG
21944: PUSH
21945: LD_INT 2
21947: NEG
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21978: LD_ADDR_VAR 0 28
21982: PUSH
21983: LD_INT 0
21985: PUSH
21986: LD_INT 0
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: PUSH
21993: LD_INT 0
21995: PUSH
21996: LD_INT 1
21998: NEG
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: PUSH
22004: LD_INT 1
22006: PUSH
22007: LD_INT 0
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: PUSH
22014: LD_INT 1
22016: PUSH
22017: LD_INT 1
22019: PUSH
22020: EMPTY
22021: LIST
22022: LIST
22023: PUSH
22024: LD_INT 0
22026: PUSH
22027: LD_INT 1
22029: PUSH
22030: EMPTY
22031: LIST
22032: LIST
22033: PUSH
22034: LD_INT 1
22036: NEG
22037: PUSH
22038: LD_INT 0
22040: PUSH
22041: EMPTY
22042: LIST
22043: LIST
22044: PUSH
22045: LD_INT 1
22047: NEG
22048: PUSH
22049: LD_INT 1
22051: NEG
22052: PUSH
22053: EMPTY
22054: LIST
22055: LIST
22056: PUSH
22057: LD_INT 1
22059: NEG
22060: PUSH
22061: LD_INT 2
22063: NEG
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: PUSH
22069: LD_INT 0
22071: PUSH
22072: LD_INT 2
22074: NEG
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: PUSH
22080: LD_INT 1
22082: PUSH
22083: LD_INT 1
22085: NEG
22086: PUSH
22087: EMPTY
22088: LIST
22089: LIST
22090: PUSH
22091: LD_INT 2
22093: PUSH
22094: LD_INT 0
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PUSH
22101: LD_INT 2
22103: PUSH
22104: LD_INT 1
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: PUSH
22111: LD_INT 2
22113: PUSH
22114: LD_INT 2
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: PUSH
22121: LD_INT 1
22123: PUSH
22124: LD_INT 2
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: PUSH
22131: LD_INT 0
22133: PUSH
22134: LD_INT 2
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: PUSH
22141: LD_INT 1
22143: NEG
22144: PUSH
22145: LD_INT 1
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: PUSH
22152: LD_INT 2
22154: NEG
22155: PUSH
22156: LD_INT 0
22158: PUSH
22159: EMPTY
22160: LIST
22161: LIST
22162: PUSH
22163: LD_INT 2
22165: NEG
22166: PUSH
22167: LD_INT 1
22169: NEG
22170: PUSH
22171: EMPTY
22172: LIST
22173: LIST
22174: PUSH
22175: LD_INT 2
22177: NEG
22178: PUSH
22179: LD_INT 2
22181: NEG
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: PUSH
22187: LD_INT 2
22189: NEG
22190: PUSH
22191: LD_INT 3
22193: NEG
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: PUSH
22199: LD_INT 1
22201: NEG
22202: PUSH
22203: LD_INT 3
22205: NEG
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: PUSH
22211: LD_INT 3
22213: NEG
22214: PUSH
22215: LD_INT 1
22217: NEG
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: PUSH
22223: LD_INT 3
22225: NEG
22226: PUSH
22227: LD_INT 2
22229: NEG
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22260: LD_ADDR_VAR 0 29
22264: PUSH
22265: LD_INT 0
22267: PUSH
22268: LD_INT 0
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PUSH
22275: LD_INT 0
22277: PUSH
22278: LD_INT 1
22280: NEG
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: PUSH
22286: LD_INT 1
22288: PUSH
22289: LD_INT 0
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PUSH
22296: LD_INT 1
22298: PUSH
22299: LD_INT 1
22301: PUSH
22302: EMPTY
22303: LIST
22304: LIST
22305: PUSH
22306: LD_INT 0
22308: PUSH
22309: LD_INT 1
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: PUSH
22316: LD_INT 1
22318: NEG
22319: PUSH
22320: LD_INT 0
22322: PUSH
22323: EMPTY
22324: LIST
22325: LIST
22326: PUSH
22327: LD_INT 1
22329: NEG
22330: PUSH
22331: LD_INT 1
22333: NEG
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: LD_INT 1
22341: NEG
22342: PUSH
22343: LD_INT 2
22345: NEG
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: PUSH
22351: LD_INT 0
22353: PUSH
22354: LD_INT 2
22356: NEG
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: PUSH
22362: LD_INT 1
22364: PUSH
22365: LD_INT 1
22367: NEG
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: PUSH
22373: LD_INT 2
22375: PUSH
22376: LD_INT 0
22378: PUSH
22379: EMPTY
22380: LIST
22381: LIST
22382: PUSH
22383: LD_INT 2
22385: PUSH
22386: LD_INT 1
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: PUSH
22393: LD_INT 1
22395: PUSH
22396: LD_INT 2
22398: PUSH
22399: EMPTY
22400: LIST
22401: LIST
22402: PUSH
22403: LD_INT 0
22405: PUSH
22406: LD_INT 2
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: PUSH
22413: LD_INT 1
22415: NEG
22416: PUSH
22417: LD_INT 1
22419: PUSH
22420: EMPTY
22421: LIST
22422: LIST
22423: PUSH
22424: LD_INT 2
22426: NEG
22427: PUSH
22428: LD_INT 1
22430: NEG
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: PUSH
22436: LD_INT 2
22438: NEG
22439: PUSH
22440: LD_INT 2
22442: NEG
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PUSH
22448: LD_INT 2
22450: NEG
22451: PUSH
22452: LD_INT 3
22454: NEG
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: PUSH
22460: LD_INT 2
22462: PUSH
22463: LD_INT 1
22465: NEG
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: PUSH
22471: LD_INT 3
22473: PUSH
22474: LD_INT 1
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: PUSH
22481: LD_INT 1
22483: PUSH
22484: LD_INT 3
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: PUSH
22491: LD_INT 1
22493: NEG
22494: PUSH
22495: LD_INT 2
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: PUSH
22502: LD_INT 3
22504: NEG
22505: PUSH
22506: LD_INT 2
22508: NEG
22509: PUSH
22510: EMPTY
22511: LIST
22512: LIST
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22539: LD_ADDR_VAR 0 30
22543: PUSH
22544: LD_INT 0
22546: PUSH
22547: LD_INT 0
22549: PUSH
22550: EMPTY
22551: LIST
22552: LIST
22553: PUSH
22554: LD_INT 0
22556: PUSH
22557: LD_INT 1
22559: NEG
22560: PUSH
22561: EMPTY
22562: LIST
22563: LIST
22564: PUSH
22565: LD_INT 1
22567: PUSH
22568: LD_INT 0
22570: PUSH
22571: EMPTY
22572: LIST
22573: LIST
22574: PUSH
22575: LD_INT 1
22577: PUSH
22578: LD_INT 1
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: PUSH
22585: LD_INT 0
22587: PUSH
22588: LD_INT 1
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: PUSH
22595: LD_INT 1
22597: NEG
22598: PUSH
22599: LD_INT 0
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: PUSH
22606: LD_INT 1
22608: NEG
22609: PUSH
22610: LD_INT 1
22612: NEG
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: PUSH
22618: LD_INT 1
22620: NEG
22621: PUSH
22622: LD_INT 2
22624: NEG
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: PUSH
22630: LD_INT 0
22632: PUSH
22633: LD_INT 2
22635: NEG
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PUSH
22641: LD_INT 1
22643: PUSH
22644: LD_INT 1
22646: NEG
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: PUSH
22652: LD_INT 2
22654: PUSH
22655: LD_INT 0
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: PUSH
22662: LD_INT 2
22664: PUSH
22665: LD_INT 1
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: PUSH
22672: LD_INT 2
22674: PUSH
22675: LD_INT 2
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: PUSH
22682: LD_INT 1
22684: PUSH
22685: LD_INT 2
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PUSH
22692: LD_INT 1
22694: NEG
22695: PUSH
22696: LD_INT 1
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: PUSH
22703: LD_INT 2
22705: NEG
22706: PUSH
22707: LD_INT 0
22709: PUSH
22710: EMPTY
22711: LIST
22712: LIST
22713: PUSH
22714: LD_INT 2
22716: NEG
22717: PUSH
22718: LD_INT 1
22720: NEG
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: PUSH
22726: LD_INT 1
22728: NEG
22729: PUSH
22730: LD_INT 3
22732: NEG
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: PUSH
22738: LD_INT 1
22740: PUSH
22741: LD_INT 2
22743: NEG
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: PUSH
22749: LD_INT 3
22751: PUSH
22752: LD_INT 2
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: PUSH
22759: LD_INT 2
22761: PUSH
22762: LD_INT 3
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: PUSH
22769: LD_INT 2
22771: NEG
22772: PUSH
22773: LD_INT 1
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: PUSH
22780: LD_INT 3
22782: NEG
22783: PUSH
22784: LD_INT 1
22786: NEG
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22817: LD_ADDR_VAR 0 31
22821: PUSH
22822: LD_INT 0
22824: PUSH
22825: LD_INT 0
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PUSH
22832: LD_INT 0
22834: PUSH
22835: LD_INT 1
22837: NEG
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: PUSH
22843: LD_INT 1
22845: PUSH
22846: LD_INT 0
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: PUSH
22853: LD_INT 1
22855: PUSH
22856: LD_INT 1
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: PUSH
22863: LD_INT 0
22865: PUSH
22866: LD_INT 1
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: PUSH
22873: LD_INT 1
22875: NEG
22876: PUSH
22877: LD_INT 0
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: PUSH
22884: LD_INT 1
22886: NEG
22887: PUSH
22888: LD_INT 1
22890: NEG
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: PUSH
22896: LD_INT 1
22898: NEG
22899: PUSH
22900: LD_INT 2
22902: NEG
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: PUSH
22908: LD_INT 1
22910: PUSH
22911: LD_INT 1
22913: NEG
22914: PUSH
22915: EMPTY
22916: LIST
22917: LIST
22918: PUSH
22919: LD_INT 2
22921: PUSH
22922: LD_INT 0
22924: PUSH
22925: EMPTY
22926: LIST
22927: LIST
22928: PUSH
22929: LD_INT 2
22931: PUSH
22932: LD_INT 1
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: PUSH
22939: LD_INT 2
22941: PUSH
22942: LD_INT 2
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PUSH
22949: LD_INT 1
22951: PUSH
22952: LD_INT 2
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PUSH
22959: LD_INT 0
22961: PUSH
22962: LD_INT 2
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: PUSH
22969: LD_INT 1
22971: NEG
22972: PUSH
22973: LD_INT 1
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: PUSH
22980: LD_INT 2
22982: NEG
22983: PUSH
22984: LD_INT 1
22986: NEG
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: PUSH
22992: LD_INT 2
22994: NEG
22995: PUSH
22996: LD_INT 2
22998: NEG
22999: PUSH
23000: EMPTY
23001: LIST
23002: LIST
23003: PUSH
23004: LD_INT 2
23006: NEG
23007: PUSH
23008: LD_INT 3
23010: NEG
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: PUSH
23016: LD_INT 2
23018: PUSH
23019: LD_INT 1
23021: NEG
23022: PUSH
23023: EMPTY
23024: LIST
23025: LIST
23026: PUSH
23027: LD_INT 3
23029: PUSH
23030: LD_INT 1
23032: PUSH
23033: EMPTY
23034: LIST
23035: LIST
23036: PUSH
23037: LD_INT 1
23039: PUSH
23040: LD_INT 3
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: PUSH
23047: LD_INT 1
23049: NEG
23050: PUSH
23051: LD_INT 2
23053: PUSH
23054: EMPTY
23055: LIST
23056: LIST
23057: PUSH
23058: LD_INT 3
23060: NEG
23061: PUSH
23062: LD_INT 2
23064: NEG
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: EMPTY
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23095: LD_ADDR_VAR 0 32
23099: PUSH
23100: LD_INT 0
23102: PUSH
23103: LD_INT 0
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: PUSH
23110: LD_INT 0
23112: PUSH
23113: LD_INT 1
23115: NEG
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: PUSH
23121: LD_INT 1
23123: PUSH
23124: LD_INT 0
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: PUSH
23131: LD_INT 1
23133: PUSH
23134: LD_INT 1
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PUSH
23141: LD_INT 0
23143: PUSH
23144: LD_INT 1
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: LD_INT 1
23153: NEG
23154: PUSH
23155: LD_INT 0
23157: PUSH
23158: EMPTY
23159: LIST
23160: LIST
23161: PUSH
23162: LD_INT 1
23164: NEG
23165: PUSH
23166: LD_INT 1
23168: NEG
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: PUSH
23174: LD_INT 1
23176: NEG
23177: PUSH
23178: LD_INT 2
23180: NEG
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: PUSH
23186: LD_INT 0
23188: PUSH
23189: LD_INT 2
23191: NEG
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: PUSH
23197: LD_INT 1
23199: PUSH
23200: LD_INT 1
23202: NEG
23203: PUSH
23204: EMPTY
23205: LIST
23206: LIST
23207: PUSH
23208: LD_INT 2
23210: PUSH
23211: LD_INT 1
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PUSH
23218: LD_INT 2
23220: PUSH
23221: LD_INT 2
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: PUSH
23228: LD_INT 1
23230: PUSH
23231: LD_INT 2
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: PUSH
23238: LD_INT 0
23240: PUSH
23241: LD_INT 2
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: PUSH
23248: LD_INT 1
23250: NEG
23251: PUSH
23252: LD_INT 1
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: PUSH
23259: LD_INT 2
23261: NEG
23262: PUSH
23263: LD_INT 0
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: PUSH
23270: LD_INT 2
23272: NEG
23273: PUSH
23274: LD_INT 1
23276: NEG
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: PUSH
23282: LD_INT 1
23284: NEG
23285: PUSH
23286: LD_INT 3
23288: NEG
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: PUSH
23294: LD_INT 1
23296: PUSH
23297: LD_INT 2
23299: NEG
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: PUSH
23305: LD_INT 3
23307: PUSH
23308: LD_INT 2
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: PUSH
23315: LD_INT 2
23317: PUSH
23318: LD_INT 3
23320: PUSH
23321: EMPTY
23322: LIST
23323: LIST
23324: PUSH
23325: LD_INT 2
23327: NEG
23328: PUSH
23329: LD_INT 1
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: PUSH
23336: LD_INT 3
23338: NEG
23339: PUSH
23340: LD_INT 1
23342: NEG
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23373: LD_ADDR_VAR 0 33
23377: PUSH
23378: LD_INT 0
23380: PUSH
23381: LD_INT 0
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: PUSH
23388: LD_INT 0
23390: PUSH
23391: LD_INT 1
23393: NEG
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: PUSH
23399: LD_INT 1
23401: PUSH
23402: LD_INT 0
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: PUSH
23409: LD_INT 1
23411: PUSH
23412: LD_INT 1
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: PUSH
23419: LD_INT 0
23421: PUSH
23422: LD_INT 1
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: PUSH
23429: LD_INT 1
23431: NEG
23432: PUSH
23433: LD_INT 0
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: PUSH
23440: LD_INT 1
23442: NEG
23443: PUSH
23444: LD_INT 1
23446: NEG
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: PUSH
23452: LD_INT 1
23454: NEG
23455: PUSH
23456: LD_INT 2
23458: NEG
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: LD_INT 1
23466: PUSH
23467: LD_INT 1
23469: NEG
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: PUSH
23475: LD_INT 2
23477: PUSH
23478: LD_INT 0
23480: PUSH
23481: EMPTY
23482: LIST
23483: LIST
23484: PUSH
23485: LD_INT 2
23487: PUSH
23488: LD_INT 1
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: PUSH
23495: LD_INT 1
23497: PUSH
23498: LD_INT 2
23500: PUSH
23501: EMPTY
23502: LIST
23503: LIST
23504: PUSH
23505: LD_INT 0
23507: PUSH
23508: LD_INT 2
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: PUSH
23515: LD_INT 1
23517: NEG
23518: PUSH
23519: LD_INT 1
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: PUSH
23526: LD_INT 2
23528: NEG
23529: PUSH
23530: LD_INT 0
23532: PUSH
23533: EMPTY
23534: LIST
23535: LIST
23536: PUSH
23537: LD_INT 2
23539: NEG
23540: PUSH
23541: LD_INT 1
23543: NEG
23544: PUSH
23545: EMPTY
23546: LIST
23547: LIST
23548: PUSH
23549: LD_INT 2
23551: NEG
23552: PUSH
23553: LD_INT 2
23555: NEG
23556: PUSH
23557: EMPTY
23558: LIST
23559: LIST
23560: PUSH
23561: LD_INT 2
23563: NEG
23564: PUSH
23565: LD_INT 3
23567: NEG
23568: PUSH
23569: EMPTY
23570: LIST
23571: LIST
23572: PUSH
23573: LD_INT 2
23575: PUSH
23576: LD_INT 1
23578: NEG
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: PUSH
23584: LD_INT 3
23586: PUSH
23587: LD_INT 1
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: PUSH
23594: LD_INT 1
23596: PUSH
23597: LD_INT 3
23599: PUSH
23600: EMPTY
23601: LIST
23602: LIST
23603: PUSH
23604: LD_INT 1
23606: NEG
23607: PUSH
23608: LD_INT 2
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: PUSH
23615: LD_INT 3
23617: NEG
23618: PUSH
23619: LD_INT 2
23621: NEG
23622: PUSH
23623: EMPTY
23624: LIST
23625: LIST
23626: PUSH
23627: EMPTY
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23652: LD_ADDR_VAR 0 34
23656: PUSH
23657: LD_INT 0
23659: PUSH
23660: LD_INT 0
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: PUSH
23667: LD_INT 0
23669: PUSH
23670: LD_INT 1
23672: NEG
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: PUSH
23678: LD_INT 1
23680: PUSH
23681: LD_INT 0
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: LD_INT 1
23690: PUSH
23691: LD_INT 1
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PUSH
23698: LD_INT 0
23700: PUSH
23701: LD_INT 1
23703: PUSH
23704: EMPTY
23705: LIST
23706: LIST
23707: PUSH
23708: LD_INT 1
23710: NEG
23711: PUSH
23712: LD_INT 0
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: PUSH
23719: LD_INT 1
23721: NEG
23722: PUSH
23723: LD_INT 1
23725: NEG
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: PUSH
23731: LD_INT 1
23733: NEG
23734: PUSH
23735: LD_INT 2
23737: NEG
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: PUSH
23743: LD_INT 0
23745: PUSH
23746: LD_INT 2
23748: NEG
23749: PUSH
23750: EMPTY
23751: LIST
23752: LIST
23753: PUSH
23754: LD_INT 1
23756: PUSH
23757: LD_INT 1
23759: NEG
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: PUSH
23765: LD_INT 2
23767: PUSH
23768: LD_INT 1
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: PUSH
23775: LD_INT 2
23777: PUSH
23778: LD_INT 2
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: PUSH
23785: LD_INT 1
23787: PUSH
23788: LD_INT 2
23790: PUSH
23791: EMPTY
23792: LIST
23793: LIST
23794: PUSH
23795: LD_INT 1
23797: NEG
23798: PUSH
23799: LD_INT 1
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: PUSH
23806: LD_INT 2
23808: NEG
23809: PUSH
23810: LD_INT 0
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: PUSH
23817: LD_INT 2
23819: NEG
23820: PUSH
23821: LD_INT 1
23823: NEG
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: PUSH
23829: LD_INT 2
23831: NEG
23832: PUSH
23833: LD_INT 2
23835: NEG
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: PUSH
23841: LD_INT 1
23843: NEG
23844: PUSH
23845: LD_INT 3
23847: NEG
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: PUSH
23853: LD_INT 1
23855: PUSH
23856: LD_INT 2
23858: NEG
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: PUSH
23864: LD_INT 3
23866: PUSH
23867: LD_INT 2
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PUSH
23874: LD_INT 2
23876: PUSH
23877: LD_INT 3
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: PUSH
23884: LD_INT 2
23886: NEG
23887: PUSH
23888: LD_INT 1
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: PUSH
23895: LD_INT 3
23897: NEG
23898: PUSH
23899: LD_INT 1
23901: NEG
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: PUSH
23907: EMPTY
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23932: LD_ADDR_VAR 0 35
23936: PUSH
23937: LD_INT 0
23939: PUSH
23940: LD_INT 0
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: LD_INT 0
23949: PUSH
23950: LD_INT 1
23952: NEG
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: PUSH
23958: LD_INT 1
23960: PUSH
23961: LD_INT 0
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: PUSH
23968: LD_INT 1
23970: PUSH
23971: LD_INT 1
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: PUSH
23978: LD_INT 0
23980: PUSH
23981: LD_INT 1
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PUSH
23988: LD_INT 1
23990: NEG
23991: PUSH
23992: LD_INT 0
23994: PUSH
23995: EMPTY
23996: LIST
23997: LIST
23998: PUSH
23999: LD_INT 1
24001: NEG
24002: PUSH
24003: LD_INT 1
24005: NEG
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: PUSH
24011: LD_INT 2
24013: PUSH
24014: LD_INT 1
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: PUSH
24021: LD_INT 2
24023: NEG
24024: PUSH
24025: LD_INT 1
24027: NEG
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24044: LD_ADDR_VAR 0 36
24048: PUSH
24049: LD_INT 0
24051: PUSH
24052: LD_INT 0
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: PUSH
24059: LD_INT 0
24061: PUSH
24062: LD_INT 1
24064: NEG
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: PUSH
24070: LD_INT 1
24072: PUSH
24073: LD_INT 0
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: PUSH
24080: LD_INT 1
24082: PUSH
24083: LD_INT 1
24085: PUSH
24086: EMPTY
24087: LIST
24088: LIST
24089: PUSH
24090: LD_INT 0
24092: PUSH
24093: LD_INT 1
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: PUSH
24100: LD_INT 1
24102: NEG
24103: PUSH
24104: LD_INT 0
24106: PUSH
24107: EMPTY
24108: LIST
24109: LIST
24110: PUSH
24111: LD_INT 1
24113: NEG
24114: PUSH
24115: LD_INT 1
24117: NEG
24118: PUSH
24119: EMPTY
24120: LIST
24121: LIST
24122: PUSH
24123: LD_INT 1
24125: NEG
24126: PUSH
24127: LD_INT 2
24129: NEG
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: PUSH
24135: LD_INT 1
24137: PUSH
24138: LD_INT 2
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24156: LD_ADDR_VAR 0 37
24160: PUSH
24161: LD_INT 0
24163: PUSH
24164: LD_INT 0
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: PUSH
24171: LD_INT 0
24173: PUSH
24174: LD_INT 1
24176: NEG
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: PUSH
24182: LD_INT 1
24184: PUSH
24185: LD_INT 0
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: PUSH
24192: LD_INT 1
24194: PUSH
24195: LD_INT 1
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: PUSH
24202: LD_INT 0
24204: PUSH
24205: LD_INT 1
24207: PUSH
24208: EMPTY
24209: LIST
24210: LIST
24211: PUSH
24212: LD_INT 1
24214: NEG
24215: PUSH
24216: LD_INT 0
24218: PUSH
24219: EMPTY
24220: LIST
24221: LIST
24222: PUSH
24223: LD_INT 1
24225: NEG
24226: PUSH
24227: LD_INT 1
24229: NEG
24230: PUSH
24231: EMPTY
24232: LIST
24233: LIST
24234: PUSH
24235: LD_INT 1
24237: PUSH
24238: LD_INT 1
24240: NEG
24241: PUSH
24242: EMPTY
24243: LIST
24244: LIST
24245: PUSH
24246: LD_INT 1
24248: NEG
24249: PUSH
24250: LD_INT 1
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24268: LD_ADDR_VAR 0 38
24272: PUSH
24273: LD_INT 0
24275: PUSH
24276: LD_INT 0
24278: PUSH
24279: EMPTY
24280: LIST
24281: LIST
24282: PUSH
24283: LD_INT 0
24285: PUSH
24286: LD_INT 1
24288: NEG
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: PUSH
24294: LD_INT 1
24296: PUSH
24297: LD_INT 0
24299: PUSH
24300: EMPTY
24301: LIST
24302: LIST
24303: PUSH
24304: LD_INT 1
24306: PUSH
24307: LD_INT 1
24309: PUSH
24310: EMPTY
24311: LIST
24312: LIST
24313: PUSH
24314: LD_INT 0
24316: PUSH
24317: LD_INT 1
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: PUSH
24324: LD_INT 1
24326: NEG
24327: PUSH
24328: LD_INT 0
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PUSH
24335: LD_INT 1
24337: NEG
24338: PUSH
24339: LD_INT 1
24341: NEG
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: PUSH
24347: LD_INT 2
24349: PUSH
24350: LD_INT 1
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: PUSH
24357: LD_INT 2
24359: NEG
24360: PUSH
24361: LD_INT 1
24363: NEG
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24380: LD_ADDR_VAR 0 39
24384: PUSH
24385: LD_INT 0
24387: PUSH
24388: LD_INT 0
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: PUSH
24395: LD_INT 0
24397: PUSH
24398: LD_INT 1
24400: NEG
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: PUSH
24406: LD_INT 1
24408: PUSH
24409: LD_INT 0
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PUSH
24416: LD_INT 1
24418: PUSH
24419: LD_INT 1
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: PUSH
24426: LD_INT 0
24428: PUSH
24429: LD_INT 1
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: PUSH
24436: LD_INT 1
24438: NEG
24439: PUSH
24440: LD_INT 0
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: PUSH
24447: LD_INT 1
24449: NEG
24450: PUSH
24451: LD_INT 1
24453: NEG
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: PUSH
24459: LD_INT 1
24461: NEG
24462: PUSH
24463: LD_INT 2
24465: NEG
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: PUSH
24471: LD_INT 1
24473: PUSH
24474: LD_INT 2
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: EMPTY
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24492: LD_ADDR_VAR 0 40
24496: PUSH
24497: LD_INT 0
24499: PUSH
24500: LD_INT 0
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: PUSH
24507: LD_INT 0
24509: PUSH
24510: LD_INT 1
24512: NEG
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: PUSH
24518: LD_INT 1
24520: PUSH
24521: LD_INT 0
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: PUSH
24528: LD_INT 1
24530: PUSH
24531: LD_INT 1
24533: PUSH
24534: EMPTY
24535: LIST
24536: LIST
24537: PUSH
24538: LD_INT 0
24540: PUSH
24541: LD_INT 1
24543: PUSH
24544: EMPTY
24545: LIST
24546: LIST
24547: PUSH
24548: LD_INT 1
24550: NEG
24551: PUSH
24552: LD_INT 0
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: PUSH
24559: LD_INT 1
24561: NEG
24562: PUSH
24563: LD_INT 1
24565: NEG
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: LD_INT 1
24573: PUSH
24574: LD_INT 1
24576: NEG
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: PUSH
24582: LD_INT 1
24584: NEG
24585: PUSH
24586: LD_INT 1
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: PUSH
24593: EMPTY
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24604: LD_ADDR_VAR 0 41
24608: PUSH
24609: LD_INT 0
24611: PUSH
24612: LD_INT 0
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: PUSH
24619: LD_INT 0
24621: PUSH
24622: LD_INT 1
24624: NEG
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PUSH
24630: LD_INT 1
24632: PUSH
24633: LD_INT 0
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: PUSH
24640: LD_INT 1
24642: PUSH
24643: LD_INT 1
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: PUSH
24650: LD_INT 0
24652: PUSH
24653: LD_INT 1
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PUSH
24660: LD_INT 1
24662: NEG
24663: PUSH
24664: LD_INT 0
24666: PUSH
24667: EMPTY
24668: LIST
24669: LIST
24670: PUSH
24671: LD_INT 1
24673: NEG
24674: PUSH
24675: LD_INT 1
24677: NEG
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: PUSH
24683: LD_INT 1
24685: NEG
24686: PUSH
24687: LD_INT 2
24689: NEG
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 1
24697: PUSH
24698: LD_INT 1
24700: NEG
24701: PUSH
24702: EMPTY
24703: LIST
24704: LIST
24705: PUSH
24706: LD_INT 2
24708: PUSH
24709: LD_INT 0
24711: PUSH
24712: EMPTY
24713: LIST
24714: LIST
24715: PUSH
24716: LD_INT 2
24718: PUSH
24719: LD_INT 1
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: PUSH
24726: LD_INT 2
24728: PUSH
24729: LD_INT 2
24731: PUSH
24732: EMPTY
24733: LIST
24734: LIST
24735: PUSH
24736: LD_INT 1
24738: PUSH
24739: LD_INT 2
24741: PUSH
24742: EMPTY
24743: LIST
24744: LIST
24745: PUSH
24746: LD_INT 1
24748: NEG
24749: PUSH
24750: LD_INT 1
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: PUSH
24757: LD_INT 2
24759: NEG
24760: PUSH
24761: LD_INT 0
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: PUSH
24768: LD_INT 2
24770: NEG
24771: PUSH
24772: LD_INT 1
24774: NEG
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: PUSH
24780: LD_INT 2
24782: NEG
24783: PUSH
24784: LD_INT 2
24786: NEG
24787: PUSH
24788: EMPTY
24789: LIST
24790: LIST
24791: PUSH
24792: LD_INT 2
24794: NEG
24795: PUSH
24796: LD_INT 3
24798: NEG
24799: PUSH
24800: EMPTY
24801: LIST
24802: LIST
24803: PUSH
24804: LD_INT 2
24806: PUSH
24807: LD_INT 1
24809: NEG
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: PUSH
24815: LD_INT 3
24817: PUSH
24818: LD_INT 0
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: PUSH
24825: LD_INT 3
24827: PUSH
24828: LD_INT 1
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: PUSH
24835: LD_INT 3
24837: PUSH
24838: LD_INT 2
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: PUSH
24845: LD_INT 3
24847: PUSH
24848: LD_INT 3
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: PUSH
24855: LD_INT 2
24857: PUSH
24858: LD_INT 3
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: PUSH
24865: LD_INT 2
24867: NEG
24868: PUSH
24869: LD_INT 1
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: LD_INT 3
24878: NEG
24879: PUSH
24880: LD_INT 0
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: PUSH
24887: LD_INT 3
24889: NEG
24890: PUSH
24891: LD_INT 1
24893: NEG
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PUSH
24899: LD_INT 3
24901: NEG
24902: PUSH
24903: LD_INT 2
24905: NEG
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: PUSH
24911: LD_INT 3
24913: NEG
24914: PUSH
24915: LD_INT 3
24917: NEG
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24954: LD_ADDR_VAR 0 42
24958: PUSH
24959: LD_INT 0
24961: PUSH
24962: LD_INT 0
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: PUSH
24969: LD_INT 0
24971: PUSH
24972: LD_INT 1
24974: NEG
24975: PUSH
24976: EMPTY
24977: LIST
24978: LIST
24979: PUSH
24980: LD_INT 1
24982: PUSH
24983: LD_INT 0
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: PUSH
24990: LD_INT 1
24992: PUSH
24993: LD_INT 1
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: LD_INT 0
25002: PUSH
25003: LD_INT 1
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: LD_INT 1
25012: NEG
25013: PUSH
25014: LD_INT 0
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 1
25023: NEG
25024: PUSH
25025: LD_INT 1
25027: NEG
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PUSH
25033: LD_INT 1
25035: NEG
25036: PUSH
25037: LD_INT 2
25039: NEG
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: LD_INT 0
25047: PUSH
25048: LD_INT 2
25050: NEG
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: PUSH
25056: LD_INT 1
25058: PUSH
25059: LD_INT 1
25061: NEG
25062: PUSH
25063: EMPTY
25064: LIST
25065: LIST
25066: PUSH
25067: LD_INT 2
25069: PUSH
25070: LD_INT 1
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: PUSH
25077: LD_INT 2
25079: PUSH
25080: LD_INT 2
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: LD_INT 1
25089: PUSH
25090: LD_INT 2
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: LD_INT 0
25099: PUSH
25100: LD_INT 2
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: PUSH
25107: LD_INT 1
25109: NEG
25110: PUSH
25111: LD_INT 1
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: PUSH
25118: LD_INT 2
25120: NEG
25121: PUSH
25122: LD_INT 1
25124: NEG
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PUSH
25130: LD_INT 2
25132: NEG
25133: PUSH
25134: LD_INT 2
25136: NEG
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: PUSH
25142: LD_INT 2
25144: NEG
25145: PUSH
25146: LD_INT 3
25148: NEG
25149: PUSH
25150: EMPTY
25151: LIST
25152: LIST
25153: PUSH
25154: LD_INT 1
25156: NEG
25157: PUSH
25158: LD_INT 3
25160: NEG
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: PUSH
25166: LD_INT 0
25168: PUSH
25169: LD_INT 3
25171: NEG
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: PUSH
25177: LD_INT 1
25179: PUSH
25180: LD_INT 2
25182: NEG
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: PUSH
25188: LD_INT 3
25190: PUSH
25191: LD_INT 2
25193: PUSH
25194: EMPTY
25195: LIST
25196: LIST
25197: PUSH
25198: LD_INT 3
25200: PUSH
25201: LD_INT 3
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: LD_INT 2
25210: PUSH
25211: LD_INT 3
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: PUSH
25218: LD_INT 1
25220: PUSH
25221: LD_INT 3
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 0
25230: PUSH
25231: LD_INT 3
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: PUSH
25238: LD_INT 1
25240: NEG
25241: PUSH
25242: LD_INT 2
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PUSH
25249: LD_INT 3
25251: NEG
25252: PUSH
25253: LD_INT 2
25255: NEG
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: PUSH
25261: LD_INT 3
25263: NEG
25264: PUSH
25265: LD_INT 3
25267: NEG
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25304: LD_ADDR_VAR 0 43
25308: PUSH
25309: LD_INT 0
25311: PUSH
25312: LD_INT 0
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: PUSH
25319: LD_INT 0
25321: PUSH
25322: LD_INT 1
25324: NEG
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: PUSH
25330: LD_INT 1
25332: PUSH
25333: LD_INT 0
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: PUSH
25340: LD_INT 1
25342: PUSH
25343: LD_INT 1
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PUSH
25350: LD_INT 0
25352: PUSH
25353: LD_INT 1
25355: PUSH
25356: EMPTY
25357: LIST
25358: LIST
25359: PUSH
25360: LD_INT 1
25362: NEG
25363: PUSH
25364: LD_INT 0
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: LD_INT 1
25373: NEG
25374: PUSH
25375: LD_INT 1
25377: NEG
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: LD_INT 1
25385: NEG
25386: PUSH
25387: LD_INT 2
25389: NEG
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: PUSH
25395: LD_INT 0
25397: PUSH
25398: LD_INT 2
25400: NEG
25401: PUSH
25402: EMPTY
25403: LIST
25404: LIST
25405: PUSH
25406: LD_INT 1
25408: PUSH
25409: LD_INT 1
25411: NEG
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: PUSH
25417: LD_INT 2
25419: PUSH
25420: LD_INT 0
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PUSH
25427: LD_INT 2
25429: PUSH
25430: LD_INT 1
25432: PUSH
25433: EMPTY
25434: LIST
25435: LIST
25436: PUSH
25437: LD_INT 1
25439: PUSH
25440: LD_INT 2
25442: PUSH
25443: EMPTY
25444: LIST
25445: LIST
25446: PUSH
25447: LD_INT 0
25449: PUSH
25450: LD_INT 2
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PUSH
25457: LD_INT 1
25459: NEG
25460: PUSH
25461: LD_INT 1
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: LD_INT 2
25470: NEG
25471: PUSH
25472: LD_INT 0
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: PUSH
25479: LD_INT 2
25481: NEG
25482: PUSH
25483: LD_INT 1
25485: NEG
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: PUSH
25491: LD_INT 1
25493: NEG
25494: PUSH
25495: LD_INT 3
25497: NEG
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: LD_INT 0
25505: PUSH
25506: LD_INT 3
25508: NEG
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PUSH
25514: LD_INT 1
25516: PUSH
25517: LD_INT 2
25519: NEG
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: PUSH
25525: LD_INT 2
25527: PUSH
25528: LD_INT 1
25530: NEG
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: PUSH
25536: LD_INT 3
25538: PUSH
25539: LD_INT 0
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: PUSH
25546: LD_INT 3
25548: PUSH
25549: LD_INT 1
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: PUSH
25556: LD_INT 1
25558: PUSH
25559: LD_INT 3
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PUSH
25566: LD_INT 0
25568: PUSH
25569: LD_INT 3
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: LD_INT 1
25578: NEG
25579: PUSH
25580: LD_INT 2
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: PUSH
25587: LD_INT 2
25589: NEG
25590: PUSH
25591: LD_INT 1
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: PUSH
25598: LD_INT 3
25600: NEG
25601: PUSH
25602: LD_INT 0
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PUSH
25609: LD_INT 3
25611: NEG
25612: PUSH
25613: LD_INT 1
25615: NEG
25616: PUSH
25617: EMPTY
25618: LIST
25619: LIST
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25652: LD_ADDR_VAR 0 44
25656: PUSH
25657: LD_INT 0
25659: PUSH
25660: LD_INT 0
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: PUSH
25667: LD_INT 0
25669: PUSH
25670: LD_INT 1
25672: NEG
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: PUSH
25678: LD_INT 1
25680: PUSH
25681: LD_INT 0
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: LD_INT 1
25690: PUSH
25691: LD_INT 1
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: PUSH
25698: LD_INT 0
25700: PUSH
25701: LD_INT 1
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PUSH
25708: LD_INT 1
25710: NEG
25711: PUSH
25712: LD_INT 0
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PUSH
25719: LD_INT 1
25721: NEG
25722: PUSH
25723: LD_INT 1
25725: NEG
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: LD_INT 1
25733: NEG
25734: PUSH
25735: LD_INT 2
25737: NEG
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 1
25745: PUSH
25746: LD_INT 1
25748: NEG
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PUSH
25754: LD_INT 2
25756: PUSH
25757: LD_INT 0
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: LD_INT 2
25766: PUSH
25767: LD_INT 1
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: LD_INT 2
25776: PUSH
25777: LD_INT 2
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PUSH
25784: LD_INT 1
25786: PUSH
25787: LD_INT 2
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: PUSH
25794: LD_INT 1
25796: NEG
25797: PUSH
25798: LD_INT 1
25800: PUSH
25801: EMPTY
25802: LIST
25803: LIST
25804: PUSH
25805: LD_INT 2
25807: NEG
25808: PUSH
25809: LD_INT 0
25811: PUSH
25812: EMPTY
25813: LIST
25814: LIST
25815: PUSH
25816: LD_INT 2
25818: NEG
25819: PUSH
25820: LD_INT 1
25822: NEG
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: PUSH
25828: LD_INT 2
25830: NEG
25831: PUSH
25832: LD_INT 2
25834: NEG
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: PUSH
25840: LD_INT 2
25842: NEG
25843: PUSH
25844: LD_INT 3
25846: NEG
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: PUSH
25852: LD_INT 2
25854: PUSH
25855: LD_INT 1
25857: NEG
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PUSH
25863: LD_INT 3
25865: PUSH
25866: LD_INT 0
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: PUSH
25873: LD_INT 3
25875: PUSH
25876: LD_INT 1
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: PUSH
25883: LD_INT 3
25885: PUSH
25886: LD_INT 2
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: PUSH
25893: LD_INT 3
25895: PUSH
25896: LD_INT 3
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: PUSH
25903: LD_INT 2
25905: PUSH
25906: LD_INT 3
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 2
25915: NEG
25916: PUSH
25917: LD_INT 1
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: LD_INT 3
25926: NEG
25927: PUSH
25928: LD_INT 0
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PUSH
25935: LD_INT 3
25937: NEG
25938: PUSH
25939: LD_INT 1
25941: NEG
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PUSH
25947: LD_INT 3
25949: NEG
25950: PUSH
25951: LD_INT 2
25953: NEG
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PUSH
25959: LD_INT 3
25961: NEG
25962: PUSH
25963: LD_INT 3
25965: NEG
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: LIST
25984: LIST
25985: LIST
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: LIST
25991: LIST
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26002: LD_ADDR_VAR 0 45
26006: PUSH
26007: LD_INT 0
26009: PUSH
26010: LD_INT 0
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PUSH
26017: LD_INT 0
26019: PUSH
26020: LD_INT 1
26022: NEG
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: LD_INT 1
26030: PUSH
26031: LD_INT 0
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: PUSH
26038: LD_INT 1
26040: PUSH
26041: LD_INT 1
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: PUSH
26048: LD_INT 0
26050: PUSH
26051: LD_INT 1
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: PUSH
26058: LD_INT 1
26060: NEG
26061: PUSH
26062: LD_INT 0
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: LD_INT 1
26071: NEG
26072: PUSH
26073: LD_INT 1
26075: NEG
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: LD_INT 1
26083: NEG
26084: PUSH
26085: LD_INT 2
26087: NEG
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: PUSH
26093: LD_INT 0
26095: PUSH
26096: LD_INT 2
26098: NEG
26099: PUSH
26100: EMPTY
26101: LIST
26102: LIST
26103: PUSH
26104: LD_INT 1
26106: PUSH
26107: LD_INT 1
26109: NEG
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: PUSH
26115: LD_INT 2
26117: PUSH
26118: LD_INT 1
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: PUSH
26125: LD_INT 2
26127: PUSH
26128: LD_INT 2
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PUSH
26135: LD_INT 1
26137: PUSH
26138: LD_INT 2
26140: PUSH
26141: EMPTY
26142: LIST
26143: LIST
26144: PUSH
26145: LD_INT 0
26147: PUSH
26148: LD_INT 2
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PUSH
26155: LD_INT 1
26157: NEG
26158: PUSH
26159: LD_INT 1
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: PUSH
26166: LD_INT 2
26168: NEG
26169: PUSH
26170: LD_INT 1
26172: NEG
26173: PUSH
26174: EMPTY
26175: LIST
26176: LIST
26177: PUSH
26178: LD_INT 2
26180: NEG
26181: PUSH
26182: LD_INT 2
26184: NEG
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: PUSH
26190: LD_INT 2
26192: NEG
26193: PUSH
26194: LD_INT 3
26196: NEG
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: PUSH
26202: LD_INT 1
26204: NEG
26205: PUSH
26206: LD_INT 3
26208: NEG
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: PUSH
26214: LD_INT 0
26216: PUSH
26217: LD_INT 3
26219: NEG
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PUSH
26225: LD_INT 1
26227: PUSH
26228: LD_INT 2
26230: NEG
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: PUSH
26236: LD_INT 3
26238: PUSH
26239: LD_INT 2
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: PUSH
26246: LD_INT 3
26248: PUSH
26249: LD_INT 3
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: PUSH
26256: LD_INT 2
26258: PUSH
26259: LD_INT 3
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PUSH
26266: LD_INT 1
26268: PUSH
26269: LD_INT 3
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: LD_INT 0
26278: PUSH
26279: LD_INT 3
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: PUSH
26286: LD_INT 1
26288: NEG
26289: PUSH
26290: LD_INT 2
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: PUSH
26297: LD_INT 3
26299: NEG
26300: PUSH
26301: LD_INT 2
26303: NEG
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PUSH
26309: LD_INT 3
26311: NEG
26312: PUSH
26313: LD_INT 3
26315: NEG
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: LIST
26325: LIST
26326: LIST
26327: LIST
26328: LIST
26329: LIST
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26352: LD_ADDR_VAR 0 46
26356: PUSH
26357: LD_INT 0
26359: PUSH
26360: LD_INT 0
26362: PUSH
26363: EMPTY
26364: LIST
26365: LIST
26366: PUSH
26367: LD_INT 0
26369: PUSH
26370: LD_INT 1
26372: NEG
26373: PUSH
26374: EMPTY
26375: LIST
26376: LIST
26377: PUSH
26378: LD_INT 1
26380: PUSH
26381: LD_INT 0
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: PUSH
26388: LD_INT 1
26390: PUSH
26391: LD_INT 1
26393: PUSH
26394: EMPTY
26395: LIST
26396: LIST
26397: PUSH
26398: LD_INT 0
26400: PUSH
26401: LD_INT 1
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: PUSH
26408: LD_INT 1
26410: NEG
26411: PUSH
26412: LD_INT 0
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: PUSH
26419: LD_INT 1
26421: NEG
26422: PUSH
26423: LD_INT 1
26425: NEG
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: PUSH
26431: LD_INT 1
26433: NEG
26434: PUSH
26435: LD_INT 2
26437: NEG
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PUSH
26443: LD_INT 0
26445: PUSH
26446: LD_INT 2
26448: NEG
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: LD_INT 1
26456: PUSH
26457: LD_INT 1
26459: NEG
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: LD_INT 2
26467: PUSH
26468: LD_INT 0
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: LD_INT 2
26477: PUSH
26478: LD_INT 1
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: LD_INT 1
26487: PUSH
26488: LD_INT 2
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: PUSH
26495: LD_INT 0
26497: PUSH
26498: LD_INT 2
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: PUSH
26505: LD_INT 1
26507: NEG
26508: PUSH
26509: LD_INT 1
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: PUSH
26516: LD_INT 2
26518: NEG
26519: PUSH
26520: LD_INT 0
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: LD_INT 2
26529: NEG
26530: PUSH
26531: LD_INT 1
26533: NEG
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: PUSH
26539: LD_INT 1
26541: NEG
26542: PUSH
26543: LD_INT 3
26545: NEG
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: LD_INT 0
26553: PUSH
26554: LD_INT 3
26556: NEG
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: PUSH
26562: LD_INT 1
26564: PUSH
26565: LD_INT 2
26567: NEG
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: PUSH
26573: LD_INT 2
26575: PUSH
26576: LD_INT 1
26578: NEG
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: PUSH
26584: LD_INT 3
26586: PUSH
26587: LD_INT 0
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 3
26596: PUSH
26597: LD_INT 1
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PUSH
26604: LD_INT 1
26606: PUSH
26607: LD_INT 3
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: LD_INT 0
26616: PUSH
26617: LD_INT 3
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 1
26626: NEG
26627: PUSH
26628: LD_INT 2
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: LD_INT 2
26637: NEG
26638: PUSH
26639: LD_INT 1
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: PUSH
26646: LD_INT 3
26648: NEG
26649: PUSH
26650: LD_INT 0
26652: PUSH
26653: EMPTY
26654: LIST
26655: LIST
26656: PUSH
26657: LD_INT 3
26659: NEG
26660: PUSH
26661: LD_INT 1
26663: NEG
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: LIST
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26700: LD_ADDR_VAR 0 47
26704: PUSH
26705: LD_INT 0
26707: PUSH
26708: LD_INT 0
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PUSH
26715: LD_INT 0
26717: PUSH
26718: LD_INT 1
26720: NEG
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: PUSH
26726: LD_INT 1
26728: PUSH
26729: LD_INT 0
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: PUSH
26736: LD_INT 1
26738: PUSH
26739: LD_INT 1
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: PUSH
26746: LD_INT 0
26748: PUSH
26749: LD_INT 1
26751: PUSH
26752: EMPTY
26753: LIST
26754: LIST
26755: PUSH
26756: LD_INT 1
26758: NEG
26759: PUSH
26760: LD_INT 0
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: PUSH
26767: LD_INT 1
26769: NEG
26770: PUSH
26771: LD_INT 1
26773: NEG
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: PUSH
26779: LD_INT 1
26781: NEG
26782: PUSH
26783: LD_INT 2
26785: NEG
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PUSH
26791: LD_INT 0
26793: PUSH
26794: LD_INT 2
26796: NEG
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: PUSH
26802: LD_INT 1
26804: PUSH
26805: LD_INT 1
26807: NEG
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: PUSH
26813: LD_INT 2
26815: NEG
26816: PUSH
26817: LD_INT 1
26819: NEG
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PUSH
26825: LD_INT 2
26827: NEG
26828: PUSH
26829: LD_INT 2
26831: NEG
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: PUSH
26837: EMPTY
26838: LIST
26839: LIST
26840: LIST
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26851: LD_ADDR_VAR 0 48
26855: PUSH
26856: LD_INT 0
26858: PUSH
26859: LD_INT 0
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PUSH
26866: LD_INT 0
26868: PUSH
26869: LD_INT 1
26871: NEG
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: PUSH
26877: LD_INT 1
26879: PUSH
26880: LD_INT 0
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PUSH
26887: LD_INT 1
26889: PUSH
26890: LD_INT 1
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: LD_INT 0
26899: PUSH
26900: LD_INT 1
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: PUSH
26907: LD_INT 1
26909: NEG
26910: PUSH
26911: LD_INT 0
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: LD_INT 1
26920: NEG
26921: PUSH
26922: LD_INT 1
26924: NEG
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PUSH
26930: LD_INT 1
26932: NEG
26933: PUSH
26934: LD_INT 2
26936: NEG
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PUSH
26942: LD_INT 0
26944: PUSH
26945: LD_INT 2
26947: NEG
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: LD_INT 1
26955: PUSH
26956: LD_INT 1
26958: NEG
26959: PUSH
26960: EMPTY
26961: LIST
26962: LIST
26963: PUSH
26964: LD_INT 2
26966: PUSH
26967: LD_INT 0
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PUSH
26974: LD_INT 2
26976: PUSH
26977: LD_INT 1
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26998: LD_ADDR_VAR 0 49
27002: PUSH
27003: LD_INT 0
27005: PUSH
27006: LD_INT 0
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: PUSH
27013: LD_INT 0
27015: PUSH
27016: LD_INT 1
27018: NEG
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: PUSH
27024: LD_INT 1
27026: PUSH
27027: LD_INT 0
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: PUSH
27034: LD_INT 1
27036: PUSH
27037: LD_INT 1
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: LD_INT 0
27046: PUSH
27047: LD_INT 1
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: LD_INT 1
27056: NEG
27057: PUSH
27058: LD_INT 0
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: PUSH
27065: LD_INT 1
27067: NEG
27068: PUSH
27069: LD_INT 1
27071: NEG
27072: PUSH
27073: EMPTY
27074: LIST
27075: LIST
27076: PUSH
27077: LD_INT 1
27079: PUSH
27080: LD_INT 1
27082: NEG
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: PUSH
27088: LD_INT 2
27090: PUSH
27091: LD_INT 0
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: PUSH
27098: LD_INT 2
27100: PUSH
27101: LD_INT 1
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PUSH
27108: LD_INT 2
27110: PUSH
27111: LD_INT 2
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: PUSH
27118: LD_INT 1
27120: PUSH
27121: LD_INT 2
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: LIST
27132: LIST
27133: LIST
27134: LIST
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27142: LD_ADDR_VAR 0 50
27146: PUSH
27147: LD_INT 0
27149: PUSH
27150: LD_INT 0
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PUSH
27157: LD_INT 0
27159: PUSH
27160: LD_INT 1
27162: NEG
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: PUSH
27168: LD_INT 1
27170: PUSH
27171: LD_INT 0
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: PUSH
27178: LD_INT 1
27180: PUSH
27181: LD_INT 1
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: PUSH
27188: LD_INT 0
27190: PUSH
27191: LD_INT 1
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: PUSH
27198: LD_INT 1
27200: NEG
27201: PUSH
27202: LD_INT 0
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: PUSH
27209: LD_INT 1
27211: NEG
27212: PUSH
27213: LD_INT 1
27215: NEG
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: LD_INT 2
27223: PUSH
27224: LD_INT 1
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PUSH
27231: LD_INT 2
27233: PUSH
27234: LD_INT 2
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: PUSH
27241: LD_INT 1
27243: PUSH
27244: LD_INT 2
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PUSH
27251: LD_INT 0
27253: PUSH
27254: LD_INT 2
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: PUSH
27261: LD_INT 1
27263: NEG
27264: PUSH
27265: LD_INT 1
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: LIST
27279: LIST
27280: LIST
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27286: LD_ADDR_VAR 0 51
27290: PUSH
27291: LD_INT 0
27293: PUSH
27294: LD_INT 0
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: PUSH
27301: LD_INT 0
27303: PUSH
27304: LD_INT 1
27306: NEG
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: PUSH
27312: LD_INT 1
27314: PUSH
27315: LD_INT 0
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 1
27324: PUSH
27325: LD_INT 1
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PUSH
27332: LD_INT 0
27334: PUSH
27335: LD_INT 1
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PUSH
27342: LD_INT 1
27344: NEG
27345: PUSH
27346: LD_INT 0
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: PUSH
27353: LD_INT 1
27355: NEG
27356: PUSH
27357: LD_INT 1
27359: NEG
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: LD_INT 1
27367: PUSH
27368: LD_INT 2
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: PUSH
27375: LD_INT 0
27377: PUSH
27378: LD_INT 2
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PUSH
27385: LD_INT 1
27387: NEG
27388: PUSH
27389: LD_INT 1
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: LD_INT 2
27398: NEG
27399: PUSH
27400: LD_INT 0
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: LD_INT 2
27409: NEG
27410: PUSH
27411: LD_INT 1
27413: NEG
27414: PUSH
27415: EMPTY
27416: LIST
27417: LIST
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: LIST
27431: LIST
27432: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27433: LD_ADDR_VAR 0 52
27437: PUSH
27438: LD_INT 0
27440: PUSH
27441: LD_INT 0
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: PUSH
27448: LD_INT 0
27450: PUSH
27451: LD_INT 1
27453: NEG
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PUSH
27459: LD_INT 1
27461: PUSH
27462: LD_INT 0
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: PUSH
27469: LD_INT 1
27471: PUSH
27472: LD_INT 1
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: PUSH
27479: LD_INT 0
27481: PUSH
27482: LD_INT 1
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: LD_INT 1
27491: NEG
27492: PUSH
27493: LD_INT 0
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: LD_INT 1
27502: NEG
27503: PUSH
27504: LD_INT 1
27506: NEG
27507: PUSH
27508: EMPTY
27509: LIST
27510: LIST
27511: PUSH
27512: LD_INT 1
27514: NEG
27515: PUSH
27516: LD_INT 2
27518: NEG
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: PUSH
27524: LD_INT 1
27526: NEG
27527: PUSH
27528: LD_INT 1
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: PUSH
27535: LD_INT 2
27537: NEG
27538: PUSH
27539: LD_INT 0
27541: PUSH
27542: EMPTY
27543: LIST
27544: LIST
27545: PUSH
27546: LD_INT 2
27548: NEG
27549: PUSH
27550: LD_INT 1
27552: NEG
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 2
27560: NEG
27561: PUSH
27562: LD_INT 2
27564: NEG
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27584: LD_ADDR_VAR 0 53
27588: PUSH
27589: LD_INT 0
27591: PUSH
27592: LD_INT 0
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PUSH
27599: LD_INT 0
27601: PUSH
27602: LD_INT 1
27604: NEG
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: LD_INT 1
27612: PUSH
27613: LD_INT 0
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: PUSH
27620: LD_INT 1
27622: PUSH
27623: LD_INT 1
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: LD_INT 0
27632: PUSH
27633: LD_INT 1
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: LD_INT 1
27642: NEG
27643: PUSH
27644: LD_INT 0
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: LD_INT 1
27653: NEG
27654: PUSH
27655: LD_INT 1
27657: NEG
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PUSH
27663: LD_INT 1
27665: NEG
27666: PUSH
27667: LD_INT 2
27669: NEG
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: LD_INT 0
27677: PUSH
27678: LD_INT 2
27680: NEG
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PUSH
27686: LD_INT 1
27688: PUSH
27689: LD_INT 1
27691: NEG
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 2
27699: PUSH
27700: LD_INT 0
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: PUSH
27707: LD_INT 2
27709: PUSH
27710: LD_INT 1
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: PUSH
27717: LD_INT 2
27719: PUSH
27720: LD_INT 2
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 1
27729: PUSH
27730: LD_INT 2
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: LD_INT 0
27739: PUSH
27740: LD_INT 2
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_INT 1
27749: NEG
27750: PUSH
27751: LD_INT 1
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: PUSH
27758: LD_INT 2
27760: NEG
27761: PUSH
27762: LD_INT 0
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PUSH
27769: LD_INT 2
27771: NEG
27772: PUSH
27773: LD_INT 1
27775: NEG
27776: PUSH
27777: EMPTY
27778: LIST
27779: LIST
27780: PUSH
27781: LD_INT 2
27783: NEG
27784: PUSH
27785: LD_INT 2
27787: NEG
27788: PUSH
27789: EMPTY
27790: LIST
27791: LIST
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27814: LD_ADDR_VAR 0 54
27818: PUSH
27819: LD_INT 0
27821: PUSH
27822: LD_INT 0
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: LD_INT 0
27831: PUSH
27832: LD_INT 1
27834: NEG
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: PUSH
27840: LD_INT 1
27842: PUSH
27843: LD_INT 0
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: PUSH
27850: LD_INT 1
27852: PUSH
27853: LD_INT 1
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PUSH
27860: LD_INT 0
27862: PUSH
27863: LD_INT 1
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: PUSH
27870: LD_INT 1
27872: NEG
27873: PUSH
27874: LD_INT 0
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PUSH
27881: LD_INT 1
27883: NEG
27884: PUSH
27885: LD_INT 1
27887: NEG
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: LD_INT 1
27895: NEG
27896: PUSH
27897: LD_INT 2
27899: NEG
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 0
27907: PUSH
27908: LD_INT 2
27910: NEG
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PUSH
27916: LD_INT 1
27918: PUSH
27919: LD_INT 1
27921: NEG
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PUSH
27927: LD_INT 2
27929: PUSH
27930: LD_INT 0
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 2
27939: PUSH
27940: LD_INT 1
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: LD_INT 2
27949: PUSH
27950: LD_INT 2
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: LD_INT 1
27959: PUSH
27960: LD_INT 2
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: LD_INT 0
27969: PUSH
27970: LD_INT 2
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PUSH
27977: LD_INT 1
27979: NEG
27980: PUSH
27981: LD_INT 1
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PUSH
27988: LD_INT 2
27990: NEG
27991: PUSH
27992: LD_INT 0
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: PUSH
27999: LD_INT 2
28001: NEG
28002: PUSH
28003: LD_INT 1
28005: NEG
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: PUSH
28011: LD_INT 2
28013: NEG
28014: PUSH
28015: LD_INT 2
28017: NEG
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28044: LD_ADDR_VAR 0 55
28048: PUSH
28049: LD_INT 0
28051: PUSH
28052: LD_INT 0
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: LD_INT 0
28061: PUSH
28062: LD_INT 1
28064: NEG
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: LD_INT 1
28072: PUSH
28073: LD_INT 0
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: LD_INT 1
28082: PUSH
28083: LD_INT 1
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: LD_INT 0
28092: PUSH
28093: LD_INT 1
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: LD_INT 1
28102: NEG
28103: PUSH
28104: LD_INT 0
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: PUSH
28111: LD_INT 1
28113: NEG
28114: PUSH
28115: LD_INT 1
28117: NEG
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: LD_INT 1
28125: NEG
28126: PUSH
28127: LD_INT 2
28129: NEG
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: LD_INT 0
28137: PUSH
28138: LD_INT 2
28140: NEG
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PUSH
28146: LD_INT 1
28148: PUSH
28149: LD_INT 1
28151: NEG
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PUSH
28157: LD_INT 2
28159: PUSH
28160: LD_INT 0
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 2
28169: PUSH
28170: LD_INT 1
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 2
28179: PUSH
28180: LD_INT 2
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 1
28189: PUSH
28190: LD_INT 2
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: LD_INT 0
28199: PUSH
28200: LD_INT 2
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PUSH
28207: LD_INT 1
28209: NEG
28210: PUSH
28211: LD_INT 1
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: PUSH
28218: LD_INT 2
28220: NEG
28221: PUSH
28222: LD_INT 0
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: LD_INT 2
28231: NEG
28232: PUSH
28233: LD_INT 1
28235: NEG
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: LD_INT 2
28243: NEG
28244: PUSH
28245: LD_INT 2
28247: NEG
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: LIST
28257: LIST
28258: LIST
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28274: LD_ADDR_VAR 0 56
28278: PUSH
28279: LD_INT 0
28281: PUSH
28282: LD_INT 0
28284: PUSH
28285: EMPTY
28286: LIST
28287: LIST
28288: PUSH
28289: LD_INT 0
28291: PUSH
28292: LD_INT 1
28294: NEG
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: PUSH
28300: LD_INT 1
28302: PUSH
28303: LD_INT 0
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: PUSH
28310: LD_INT 1
28312: PUSH
28313: LD_INT 1
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: LD_INT 0
28322: PUSH
28323: LD_INT 1
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PUSH
28330: LD_INT 1
28332: NEG
28333: PUSH
28334: LD_INT 0
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PUSH
28341: LD_INT 1
28343: NEG
28344: PUSH
28345: LD_INT 1
28347: NEG
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: PUSH
28353: LD_INT 1
28355: NEG
28356: PUSH
28357: LD_INT 2
28359: NEG
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: PUSH
28365: LD_INT 0
28367: PUSH
28368: LD_INT 2
28370: NEG
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PUSH
28376: LD_INT 1
28378: PUSH
28379: LD_INT 1
28381: NEG
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: LD_INT 2
28389: PUSH
28390: LD_INT 0
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 2
28399: PUSH
28400: LD_INT 1
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: LD_INT 2
28409: PUSH
28410: LD_INT 2
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 1
28419: PUSH
28420: LD_INT 2
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 0
28429: PUSH
28430: LD_INT 2
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 1
28439: NEG
28440: PUSH
28441: LD_INT 1
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: LD_INT 2
28450: NEG
28451: PUSH
28452: LD_INT 0
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: PUSH
28459: LD_INT 2
28461: NEG
28462: PUSH
28463: LD_INT 1
28465: NEG
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PUSH
28471: LD_INT 2
28473: NEG
28474: PUSH
28475: LD_INT 2
28477: NEG
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: LIST
28487: LIST
28488: LIST
28489: LIST
28490: LIST
28491: LIST
28492: LIST
28493: LIST
28494: LIST
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28504: LD_ADDR_VAR 0 57
28508: PUSH
28509: LD_INT 0
28511: PUSH
28512: LD_INT 0
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: PUSH
28519: LD_INT 0
28521: PUSH
28522: LD_INT 1
28524: NEG
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: LD_INT 1
28532: PUSH
28533: LD_INT 0
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: LD_INT 1
28542: PUSH
28543: LD_INT 1
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 0
28552: PUSH
28553: LD_INT 1
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: LD_INT 1
28562: NEG
28563: PUSH
28564: LD_INT 0
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PUSH
28571: LD_INT 1
28573: NEG
28574: PUSH
28575: LD_INT 1
28577: NEG
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: LD_INT 1
28585: NEG
28586: PUSH
28587: LD_INT 2
28589: NEG
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: LD_INT 0
28597: PUSH
28598: LD_INT 2
28600: NEG
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PUSH
28606: LD_INT 1
28608: PUSH
28609: LD_INT 1
28611: NEG
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: LD_INT 2
28619: PUSH
28620: LD_INT 0
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PUSH
28627: LD_INT 2
28629: PUSH
28630: LD_INT 1
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: LD_INT 2
28639: PUSH
28640: LD_INT 2
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: LD_INT 1
28649: PUSH
28650: LD_INT 2
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: LD_INT 0
28659: PUSH
28660: LD_INT 2
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PUSH
28667: LD_INT 1
28669: NEG
28670: PUSH
28671: LD_INT 1
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: PUSH
28678: LD_INT 2
28680: NEG
28681: PUSH
28682: LD_INT 0
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PUSH
28689: LD_INT 2
28691: NEG
28692: PUSH
28693: LD_INT 1
28695: NEG
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: LD_INT 2
28703: NEG
28704: PUSH
28705: LD_INT 2
28707: NEG
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: LIST
28717: LIST
28718: LIST
28719: LIST
28720: LIST
28721: LIST
28722: LIST
28723: LIST
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28734: LD_ADDR_VAR 0 58
28738: PUSH
28739: LD_INT 0
28741: PUSH
28742: LD_INT 0
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: PUSH
28749: LD_INT 0
28751: PUSH
28752: LD_INT 1
28754: NEG
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 1
28762: PUSH
28763: LD_INT 0
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: LD_INT 1
28772: PUSH
28773: LD_INT 1
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: LD_INT 0
28782: PUSH
28783: LD_INT 1
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: PUSH
28790: LD_INT 1
28792: NEG
28793: PUSH
28794: LD_INT 0
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: LD_INT 1
28803: NEG
28804: PUSH
28805: LD_INT 1
28807: NEG
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: LD_INT 1
28815: NEG
28816: PUSH
28817: LD_INT 2
28819: NEG
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 0
28827: PUSH
28828: LD_INT 2
28830: NEG
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: PUSH
28836: LD_INT 1
28838: PUSH
28839: LD_INT 1
28841: NEG
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PUSH
28847: LD_INT 2
28849: PUSH
28850: LD_INT 0
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 2
28859: PUSH
28860: LD_INT 1
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: PUSH
28867: LD_INT 2
28869: PUSH
28870: LD_INT 2
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: PUSH
28877: LD_INT 1
28879: PUSH
28880: LD_INT 2
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: PUSH
28887: LD_INT 0
28889: PUSH
28890: LD_INT 2
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: PUSH
28897: LD_INT 1
28899: NEG
28900: PUSH
28901: LD_INT 1
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: PUSH
28908: LD_INT 2
28910: NEG
28911: PUSH
28912: LD_INT 0
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: PUSH
28919: LD_INT 2
28921: NEG
28922: PUSH
28923: LD_INT 1
28925: NEG
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: PUSH
28931: LD_INT 2
28933: NEG
28934: PUSH
28935: LD_INT 2
28937: NEG
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: LIST
28950: LIST
28951: LIST
28952: LIST
28953: LIST
28954: LIST
28955: LIST
28956: LIST
28957: LIST
28958: LIST
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28964: LD_ADDR_VAR 0 59
28968: PUSH
28969: LD_INT 0
28971: PUSH
28972: LD_INT 0
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: PUSH
28979: LD_INT 0
28981: PUSH
28982: LD_INT 1
28984: NEG
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PUSH
28990: LD_INT 1
28992: PUSH
28993: LD_INT 0
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: LD_INT 1
29002: PUSH
29003: LD_INT 1
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: LD_INT 0
29012: PUSH
29013: LD_INT 1
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: LD_INT 1
29022: NEG
29023: PUSH
29024: LD_INT 0
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PUSH
29031: LD_INT 1
29033: NEG
29034: PUSH
29035: LD_INT 1
29037: NEG
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: LIST
29047: LIST
29048: LIST
29049: LIST
29050: LIST
29051: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29052: LD_ADDR_VAR 0 60
29056: PUSH
29057: LD_INT 0
29059: PUSH
29060: LD_INT 0
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: LD_INT 0
29069: PUSH
29070: LD_INT 1
29072: NEG
29073: PUSH
29074: EMPTY
29075: LIST
29076: LIST
29077: PUSH
29078: LD_INT 1
29080: PUSH
29081: LD_INT 0
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: LD_INT 1
29090: PUSH
29091: LD_INT 1
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: LD_INT 0
29100: PUSH
29101: LD_INT 1
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PUSH
29108: LD_INT 1
29110: NEG
29111: PUSH
29112: LD_INT 0
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: LD_INT 1
29121: NEG
29122: PUSH
29123: LD_INT 1
29125: NEG
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29140: LD_ADDR_VAR 0 61
29144: PUSH
29145: LD_INT 0
29147: PUSH
29148: LD_INT 0
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: PUSH
29155: LD_INT 0
29157: PUSH
29158: LD_INT 1
29160: NEG
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PUSH
29166: LD_INT 1
29168: PUSH
29169: LD_INT 0
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: PUSH
29176: LD_INT 1
29178: PUSH
29179: LD_INT 1
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PUSH
29186: LD_INT 0
29188: PUSH
29189: LD_INT 1
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: PUSH
29196: LD_INT 1
29198: NEG
29199: PUSH
29200: LD_INT 0
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: PUSH
29207: LD_INT 1
29209: NEG
29210: PUSH
29211: LD_INT 1
29213: NEG
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29228: LD_ADDR_VAR 0 62
29232: PUSH
29233: LD_INT 0
29235: PUSH
29236: LD_INT 0
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 0
29245: PUSH
29246: LD_INT 1
29248: NEG
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PUSH
29254: LD_INT 1
29256: PUSH
29257: LD_INT 0
29259: PUSH
29260: EMPTY
29261: LIST
29262: LIST
29263: PUSH
29264: LD_INT 1
29266: PUSH
29267: LD_INT 1
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: PUSH
29274: LD_INT 0
29276: PUSH
29277: LD_INT 1
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: LD_INT 1
29286: NEG
29287: PUSH
29288: LD_INT 0
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: PUSH
29295: LD_INT 1
29297: NEG
29298: PUSH
29299: LD_INT 1
29301: NEG
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: LIST
29313: LIST
29314: LIST
29315: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29316: LD_ADDR_VAR 0 63
29320: PUSH
29321: LD_INT 0
29323: PUSH
29324: LD_INT 0
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: LD_INT 0
29333: PUSH
29334: LD_INT 1
29336: NEG
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: PUSH
29342: LD_INT 1
29344: PUSH
29345: LD_INT 0
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: LD_INT 1
29354: PUSH
29355: LD_INT 1
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: LD_INT 0
29364: PUSH
29365: LD_INT 1
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: LD_INT 1
29374: NEG
29375: PUSH
29376: LD_INT 0
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_INT 1
29385: NEG
29386: PUSH
29387: LD_INT 1
29389: NEG
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29404: LD_ADDR_VAR 0 64
29408: PUSH
29409: LD_INT 0
29411: PUSH
29412: LD_INT 0
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PUSH
29419: LD_INT 0
29421: PUSH
29422: LD_INT 1
29424: NEG
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PUSH
29430: LD_INT 1
29432: PUSH
29433: LD_INT 0
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: LD_INT 1
29442: PUSH
29443: LD_INT 1
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: LD_INT 0
29452: PUSH
29453: LD_INT 1
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: PUSH
29460: LD_INT 1
29462: NEG
29463: PUSH
29464: LD_INT 0
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: PUSH
29471: LD_INT 1
29473: NEG
29474: PUSH
29475: LD_INT 1
29477: NEG
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: LIST
29487: LIST
29488: LIST
29489: LIST
29490: LIST
29491: ST_TO_ADDR
// end ; 1 :
29492: GO 35389
29494: LD_INT 1
29496: DOUBLE
29497: EQUAL
29498: IFTRUE 29502
29500: GO 32125
29502: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29503: LD_ADDR_VAR 0 11
29507: PUSH
29508: LD_INT 1
29510: NEG
29511: PUSH
29512: LD_INT 3
29514: NEG
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PUSH
29520: LD_INT 0
29522: PUSH
29523: LD_INT 3
29525: NEG
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: PUSH
29531: LD_INT 1
29533: PUSH
29534: LD_INT 2
29536: NEG
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: LIST
29546: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29547: LD_ADDR_VAR 0 12
29551: PUSH
29552: LD_INT 2
29554: PUSH
29555: LD_INT 1
29557: NEG
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: PUSH
29563: LD_INT 3
29565: PUSH
29566: LD_INT 0
29568: PUSH
29569: EMPTY
29570: LIST
29571: LIST
29572: PUSH
29573: LD_INT 3
29575: PUSH
29576: LD_INT 1
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: LIST
29587: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29588: LD_ADDR_VAR 0 13
29592: PUSH
29593: LD_INT 3
29595: PUSH
29596: LD_INT 2
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PUSH
29603: LD_INT 3
29605: PUSH
29606: LD_INT 3
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: PUSH
29613: LD_INT 2
29615: PUSH
29616: LD_INT 3
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: LIST
29627: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29628: LD_ADDR_VAR 0 14
29632: PUSH
29633: LD_INT 1
29635: PUSH
29636: LD_INT 3
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: PUSH
29643: LD_INT 0
29645: PUSH
29646: LD_INT 3
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PUSH
29653: LD_INT 1
29655: NEG
29656: PUSH
29657: LD_INT 2
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: LIST
29668: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29669: LD_ADDR_VAR 0 15
29673: PUSH
29674: LD_INT 2
29676: NEG
29677: PUSH
29678: LD_INT 1
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: LD_INT 3
29687: NEG
29688: PUSH
29689: LD_INT 0
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: PUSH
29696: LD_INT 3
29698: NEG
29699: PUSH
29700: LD_INT 1
29702: NEG
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: LIST
29712: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29713: LD_ADDR_VAR 0 16
29717: PUSH
29718: LD_INT 2
29720: NEG
29721: PUSH
29722: LD_INT 3
29724: NEG
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 3
29732: NEG
29733: PUSH
29734: LD_INT 2
29736: NEG
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: PUSH
29742: LD_INT 3
29744: NEG
29745: PUSH
29746: LD_INT 3
29748: NEG
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: LIST
29758: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29759: LD_ADDR_VAR 0 17
29763: PUSH
29764: LD_INT 1
29766: NEG
29767: PUSH
29768: LD_INT 3
29770: NEG
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PUSH
29776: LD_INT 0
29778: PUSH
29779: LD_INT 3
29781: NEG
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: PUSH
29787: LD_INT 1
29789: PUSH
29790: LD_INT 2
29792: NEG
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: LIST
29802: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29803: LD_ADDR_VAR 0 18
29807: PUSH
29808: LD_INT 2
29810: PUSH
29811: LD_INT 1
29813: NEG
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: LD_INT 3
29821: PUSH
29822: LD_INT 0
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 3
29831: PUSH
29832: LD_INT 1
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: LIST
29843: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29844: LD_ADDR_VAR 0 19
29848: PUSH
29849: LD_INT 3
29851: PUSH
29852: LD_INT 2
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: PUSH
29859: LD_INT 3
29861: PUSH
29862: LD_INT 3
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: PUSH
29869: LD_INT 2
29871: PUSH
29872: LD_INT 3
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: LIST
29883: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29884: LD_ADDR_VAR 0 20
29888: PUSH
29889: LD_INT 1
29891: PUSH
29892: LD_INT 3
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: PUSH
29899: LD_INT 0
29901: PUSH
29902: LD_INT 3
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PUSH
29909: LD_INT 1
29911: NEG
29912: PUSH
29913: LD_INT 2
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: LIST
29924: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29925: LD_ADDR_VAR 0 21
29929: PUSH
29930: LD_INT 2
29932: NEG
29933: PUSH
29934: LD_INT 1
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: LD_INT 3
29943: NEG
29944: PUSH
29945: LD_INT 0
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: LD_INT 3
29954: NEG
29955: PUSH
29956: LD_INT 1
29958: NEG
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: LIST
29968: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29969: LD_ADDR_VAR 0 22
29973: PUSH
29974: LD_INT 2
29976: NEG
29977: PUSH
29978: LD_INT 3
29980: NEG
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: LD_INT 3
29988: NEG
29989: PUSH
29990: LD_INT 2
29992: NEG
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: LD_INT 3
30000: NEG
30001: PUSH
30002: LD_INT 3
30004: NEG
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: LIST
30014: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
30015: LD_ADDR_VAR 0 23
30019: PUSH
30020: LD_INT 0
30022: PUSH
30023: LD_INT 3
30025: NEG
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: PUSH
30031: LD_INT 1
30033: NEG
30034: PUSH
30035: LD_INT 4
30037: NEG
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: PUSH
30043: LD_INT 1
30045: PUSH
30046: LD_INT 3
30048: NEG
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: LIST
30058: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30059: LD_ADDR_VAR 0 24
30063: PUSH
30064: LD_INT 3
30066: PUSH
30067: LD_INT 0
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: LD_INT 3
30076: PUSH
30077: LD_INT 1
30079: NEG
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: PUSH
30085: LD_INT 4
30087: PUSH
30088: LD_INT 1
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: LIST
30099: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30100: LD_ADDR_VAR 0 25
30104: PUSH
30105: LD_INT 3
30107: PUSH
30108: LD_INT 3
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: PUSH
30115: LD_INT 4
30117: PUSH
30118: LD_INT 3
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PUSH
30125: LD_INT 3
30127: PUSH
30128: LD_INT 4
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: LIST
30139: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30140: LD_ADDR_VAR 0 26
30144: PUSH
30145: LD_INT 0
30147: PUSH
30148: LD_INT 3
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: PUSH
30155: LD_INT 1
30157: PUSH
30158: LD_INT 4
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: LD_INT 1
30167: NEG
30168: PUSH
30169: LD_INT 3
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: LIST
30180: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30181: LD_ADDR_VAR 0 27
30185: PUSH
30186: LD_INT 3
30188: NEG
30189: PUSH
30190: LD_INT 0
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PUSH
30197: LD_INT 3
30199: NEG
30200: PUSH
30201: LD_INT 1
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: LD_INT 4
30210: NEG
30211: PUSH
30212: LD_INT 1
30214: NEG
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: LIST
30224: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30225: LD_ADDR_VAR 0 28
30229: PUSH
30230: LD_INT 3
30232: NEG
30233: PUSH
30234: LD_INT 3
30236: NEG
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 3
30244: NEG
30245: PUSH
30246: LD_INT 4
30248: NEG
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: LD_INT 4
30256: NEG
30257: PUSH
30258: LD_INT 3
30260: NEG
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: LIST
30270: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30271: LD_ADDR_VAR 0 29
30275: PUSH
30276: LD_INT 1
30278: NEG
30279: PUSH
30280: LD_INT 3
30282: NEG
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 0
30290: PUSH
30291: LD_INT 3
30293: NEG
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 1
30301: PUSH
30302: LD_INT 2
30304: NEG
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: LD_INT 1
30312: NEG
30313: PUSH
30314: LD_INT 4
30316: NEG
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: LD_INT 0
30324: PUSH
30325: LD_INT 4
30327: NEG
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: LD_INT 1
30335: PUSH
30336: LD_INT 3
30338: NEG
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 1
30346: NEG
30347: PUSH
30348: LD_INT 5
30350: NEG
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: LD_INT 0
30358: PUSH
30359: LD_INT 5
30361: NEG
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: LD_INT 1
30369: PUSH
30370: LD_INT 4
30372: NEG
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: PUSH
30378: LD_INT 1
30380: NEG
30381: PUSH
30382: LD_INT 6
30384: NEG
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: LD_INT 0
30392: PUSH
30393: LD_INT 6
30395: NEG
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: PUSH
30401: LD_INT 1
30403: PUSH
30404: LD_INT 5
30406: NEG
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: LIST
30418: LIST
30419: LIST
30420: LIST
30421: LIST
30422: LIST
30423: LIST
30424: LIST
30425: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30426: LD_ADDR_VAR 0 30
30430: PUSH
30431: LD_INT 2
30433: PUSH
30434: LD_INT 1
30436: NEG
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: LD_INT 3
30444: PUSH
30445: LD_INT 0
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: LD_INT 3
30454: PUSH
30455: LD_INT 1
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: LD_INT 3
30464: PUSH
30465: LD_INT 1
30467: NEG
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PUSH
30473: LD_INT 4
30475: PUSH
30476: LD_INT 0
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: PUSH
30483: LD_INT 4
30485: PUSH
30486: LD_INT 1
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: LD_INT 4
30495: PUSH
30496: LD_INT 1
30498: NEG
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: LD_INT 5
30506: PUSH
30507: LD_INT 0
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: PUSH
30514: LD_INT 5
30516: PUSH
30517: LD_INT 1
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: LD_INT 5
30526: PUSH
30527: LD_INT 1
30529: NEG
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: LD_INT 6
30537: PUSH
30538: LD_INT 0
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: PUSH
30545: LD_INT 6
30547: PUSH
30548: LD_INT 1
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30569: LD_ADDR_VAR 0 31
30573: PUSH
30574: LD_INT 3
30576: PUSH
30577: LD_INT 2
30579: PUSH
30580: EMPTY
30581: LIST
30582: LIST
30583: PUSH
30584: LD_INT 3
30586: PUSH
30587: LD_INT 3
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: PUSH
30594: LD_INT 2
30596: PUSH
30597: LD_INT 3
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: LD_INT 4
30606: PUSH
30607: LD_INT 3
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 4
30616: PUSH
30617: LD_INT 4
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 3
30626: PUSH
30627: LD_INT 4
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: LD_INT 5
30636: PUSH
30637: LD_INT 4
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PUSH
30644: LD_INT 5
30646: PUSH
30647: LD_INT 5
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: LD_INT 4
30656: PUSH
30657: LD_INT 5
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: LD_INT 6
30666: PUSH
30667: LD_INT 5
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: LD_INT 6
30676: PUSH
30677: LD_INT 6
30679: PUSH
30680: EMPTY
30681: LIST
30682: LIST
30683: PUSH
30684: LD_INT 5
30686: PUSH
30687: LD_INT 6
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30708: LD_ADDR_VAR 0 32
30712: PUSH
30713: LD_INT 1
30715: PUSH
30716: LD_INT 3
30718: PUSH
30719: EMPTY
30720: LIST
30721: LIST
30722: PUSH
30723: LD_INT 0
30725: PUSH
30726: LD_INT 3
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: LD_INT 1
30735: NEG
30736: PUSH
30737: LD_INT 2
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: LD_INT 1
30746: PUSH
30747: LD_INT 4
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: PUSH
30754: LD_INT 0
30756: PUSH
30757: LD_INT 4
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: PUSH
30764: LD_INT 1
30766: NEG
30767: PUSH
30768: LD_INT 3
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PUSH
30775: LD_INT 1
30777: PUSH
30778: LD_INT 5
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: PUSH
30785: LD_INT 0
30787: PUSH
30788: LD_INT 5
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: LD_INT 1
30797: NEG
30798: PUSH
30799: LD_INT 4
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: PUSH
30806: LD_INT 1
30808: PUSH
30809: LD_INT 6
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: LD_INT 0
30818: PUSH
30819: LD_INT 6
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: LD_INT 1
30828: NEG
30829: PUSH
30830: LD_INT 5
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: LIST
30844: LIST
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30851: LD_ADDR_VAR 0 33
30855: PUSH
30856: LD_INT 2
30858: NEG
30859: PUSH
30860: LD_INT 1
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: LD_INT 3
30869: NEG
30870: PUSH
30871: LD_INT 0
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 3
30880: NEG
30881: PUSH
30882: LD_INT 1
30884: NEG
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: LD_INT 3
30892: NEG
30893: PUSH
30894: LD_INT 1
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: PUSH
30901: LD_INT 4
30903: NEG
30904: PUSH
30905: LD_INT 0
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: PUSH
30912: LD_INT 4
30914: NEG
30915: PUSH
30916: LD_INT 1
30918: NEG
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: PUSH
30924: LD_INT 4
30926: NEG
30927: PUSH
30928: LD_INT 1
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: PUSH
30935: LD_INT 5
30937: NEG
30938: PUSH
30939: LD_INT 0
30941: PUSH
30942: EMPTY
30943: LIST
30944: LIST
30945: PUSH
30946: LD_INT 5
30948: NEG
30949: PUSH
30950: LD_INT 1
30952: NEG
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: PUSH
30958: LD_INT 5
30960: NEG
30961: PUSH
30962: LD_INT 1
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: PUSH
30969: LD_INT 6
30971: NEG
30972: PUSH
30973: LD_INT 0
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: LD_INT 6
30982: NEG
30983: PUSH
30984: LD_INT 1
30986: NEG
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: LIST
31002: LIST
31003: LIST
31004: LIST
31005: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
31006: LD_ADDR_VAR 0 34
31010: PUSH
31011: LD_INT 2
31013: NEG
31014: PUSH
31015: LD_INT 3
31017: NEG
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: PUSH
31023: LD_INT 3
31025: NEG
31026: PUSH
31027: LD_INT 2
31029: NEG
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: PUSH
31035: LD_INT 3
31037: NEG
31038: PUSH
31039: LD_INT 3
31041: NEG
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: PUSH
31047: LD_INT 3
31049: NEG
31050: PUSH
31051: LD_INT 4
31053: NEG
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: PUSH
31059: LD_INT 4
31061: NEG
31062: PUSH
31063: LD_INT 3
31065: NEG
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 4
31073: NEG
31074: PUSH
31075: LD_INT 4
31077: NEG
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: LD_INT 4
31085: NEG
31086: PUSH
31087: LD_INT 5
31089: NEG
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 5
31097: NEG
31098: PUSH
31099: LD_INT 4
31101: NEG
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: LD_INT 5
31109: NEG
31110: PUSH
31111: LD_INT 5
31113: NEG
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 5
31121: NEG
31122: PUSH
31123: LD_INT 6
31125: NEG
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: PUSH
31131: LD_INT 6
31133: NEG
31134: PUSH
31135: LD_INT 5
31137: NEG
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: LD_INT 6
31145: NEG
31146: PUSH
31147: LD_INT 6
31149: NEG
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: LIST
31163: LIST
31164: LIST
31165: LIST
31166: LIST
31167: LIST
31168: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31169: LD_ADDR_VAR 0 41
31173: PUSH
31174: LD_INT 0
31176: PUSH
31177: LD_INT 2
31179: NEG
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: LD_INT 1
31187: NEG
31188: PUSH
31189: LD_INT 3
31191: NEG
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: PUSH
31197: LD_INT 1
31199: PUSH
31200: LD_INT 2
31202: NEG
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: LIST
31212: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31213: LD_ADDR_VAR 0 42
31217: PUSH
31218: LD_INT 2
31220: PUSH
31221: LD_INT 0
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: LD_INT 2
31230: PUSH
31231: LD_INT 1
31233: NEG
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: PUSH
31239: LD_INT 3
31241: PUSH
31242: LD_INT 1
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: LIST
31253: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31254: LD_ADDR_VAR 0 43
31258: PUSH
31259: LD_INT 2
31261: PUSH
31262: LD_INT 2
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: LD_INT 3
31271: PUSH
31272: LD_INT 2
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 2
31281: PUSH
31282: LD_INT 3
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: LIST
31293: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31294: LD_ADDR_VAR 0 44
31298: PUSH
31299: LD_INT 0
31301: PUSH
31302: LD_INT 2
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: PUSH
31309: LD_INT 1
31311: PUSH
31312: LD_INT 3
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 1
31321: NEG
31322: PUSH
31323: LD_INT 2
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: LIST
31334: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31335: LD_ADDR_VAR 0 45
31339: PUSH
31340: LD_INT 2
31342: NEG
31343: PUSH
31344: LD_INT 0
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: LD_INT 2
31353: NEG
31354: PUSH
31355: LD_INT 1
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: PUSH
31362: LD_INT 3
31364: NEG
31365: PUSH
31366: LD_INT 1
31368: NEG
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: LIST
31378: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31379: LD_ADDR_VAR 0 46
31383: PUSH
31384: LD_INT 2
31386: NEG
31387: PUSH
31388: LD_INT 2
31390: NEG
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: PUSH
31396: LD_INT 2
31398: NEG
31399: PUSH
31400: LD_INT 3
31402: NEG
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 3
31410: NEG
31411: PUSH
31412: LD_INT 2
31414: NEG
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: LIST
31424: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31425: LD_ADDR_VAR 0 47
31429: PUSH
31430: LD_INT 2
31432: NEG
31433: PUSH
31434: LD_INT 3
31436: NEG
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 1
31444: NEG
31445: PUSH
31446: LD_INT 3
31448: NEG
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31458: LD_ADDR_VAR 0 48
31462: PUSH
31463: LD_INT 1
31465: PUSH
31466: LD_INT 2
31468: NEG
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PUSH
31474: LD_INT 2
31476: PUSH
31477: LD_INT 1
31479: NEG
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31489: LD_ADDR_VAR 0 49
31493: PUSH
31494: LD_INT 3
31496: PUSH
31497: LD_INT 1
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PUSH
31504: LD_INT 3
31506: PUSH
31507: LD_INT 2
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31518: LD_ADDR_VAR 0 50
31522: PUSH
31523: LD_INT 2
31525: PUSH
31526: LD_INT 3
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: PUSH
31533: LD_INT 1
31535: PUSH
31536: LD_INT 3
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31547: LD_ADDR_VAR 0 51
31551: PUSH
31552: LD_INT 1
31554: NEG
31555: PUSH
31556: LD_INT 2
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 2
31565: NEG
31566: PUSH
31567: LD_INT 1
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31578: LD_ADDR_VAR 0 52
31582: PUSH
31583: LD_INT 3
31585: NEG
31586: PUSH
31587: LD_INT 1
31589: NEG
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: LD_INT 3
31597: NEG
31598: PUSH
31599: LD_INT 2
31601: NEG
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31611: LD_ADDR_VAR 0 53
31615: PUSH
31616: LD_INT 1
31618: NEG
31619: PUSH
31620: LD_INT 3
31622: NEG
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: PUSH
31628: LD_INT 0
31630: PUSH
31631: LD_INT 3
31633: NEG
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: PUSH
31639: LD_INT 1
31641: PUSH
31642: LD_INT 2
31644: NEG
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: LIST
31654: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31655: LD_ADDR_VAR 0 54
31659: PUSH
31660: LD_INT 2
31662: PUSH
31663: LD_INT 1
31665: NEG
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: PUSH
31671: LD_INT 3
31673: PUSH
31674: LD_INT 0
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: LD_INT 3
31683: PUSH
31684: LD_INT 1
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: LIST
31695: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31696: LD_ADDR_VAR 0 55
31700: PUSH
31701: LD_INT 3
31703: PUSH
31704: LD_INT 2
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 3
31713: PUSH
31714: LD_INT 3
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: LD_INT 2
31723: PUSH
31724: LD_INT 3
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: LIST
31735: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31736: LD_ADDR_VAR 0 56
31740: PUSH
31741: LD_INT 1
31743: PUSH
31744: LD_INT 3
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 0
31753: PUSH
31754: LD_INT 3
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PUSH
31761: LD_INT 1
31763: NEG
31764: PUSH
31765: LD_INT 2
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: LIST
31776: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31777: LD_ADDR_VAR 0 57
31781: PUSH
31782: LD_INT 2
31784: NEG
31785: PUSH
31786: LD_INT 1
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: PUSH
31793: LD_INT 3
31795: NEG
31796: PUSH
31797: LD_INT 0
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: PUSH
31804: LD_INT 3
31806: NEG
31807: PUSH
31808: LD_INT 1
31810: NEG
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: LIST
31820: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31821: LD_ADDR_VAR 0 58
31825: PUSH
31826: LD_INT 2
31828: NEG
31829: PUSH
31830: LD_INT 3
31832: NEG
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 3
31840: NEG
31841: PUSH
31842: LD_INT 2
31844: NEG
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PUSH
31850: LD_INT 3
31852: NEG
31853: PUSH
31854: LD_INT 3
31856: NEG
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: LIST
31866: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31867: LD_ADDR_VAR 0 59
31871: PUSH
31872: LD_INT 1
31874: NEG
31875: PUSH
31876: LD_INT 2
31878: NEG
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: PUSH
31884: LD_INT 0
31886: PUSH
31887: LD_INT 2
31889: NEG
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 1
31897: PUSH
31898: LD_INT 1
31900: NEG
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: LIST
31910: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31911: LD_ADDR_VAR 0 60
31915: PUSH
31916: LD_INT 1
31918: PUSH
31919: LD_INT 1
31921: NEG
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 2
31929: PUSH
31930: LD_INT 0
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PUSH
31937: LD_INT 2
31939: PUSH
31940: LD_INT 1
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: LIST
31951: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31952: LD_ADDR_VAR 0 61
31956: PUSH
31957: LD_INT 2
31959: PUSH
31960: LD_INT 1
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: LD_INT 2
31969: PUSH
31970: LD_INT 2
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: LD_INT 1
31979: PUSH
31980: LD_INT 2
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: LIST
31991: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31992: LD_ADDR_VAR 0 62
31996: PUSH
31997: LD_INT 1
31999: PUSH
32000: LD_INT 2
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: PUSH
32007: LD_INT 0
32009: PUSH
32010: LD_INT 2
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: LD_INT 1
32019: NEG
32020: PUSH
32021: LD_INT 1
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: LIST
32032: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32033: LD_ADDR_VAR 0 63
32037: PUSH
32038: LD_INT 1
32040: NEG
32041: PUSH
32042: LD_INT 1
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: PUSH
32049: LD_INT 2
32051: NEG
32052: PUSH
32053: LD_INT 0
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: PUSH
32060: LD_INT 2
32062: NEG
32063: PUSH
32064: LD_INT 1
32066: NEG
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: LIST
32076: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32077: LD_ADDR_VAR 0 64
32081: PUSH
32082: LD_INT 1
32084: NEG
32085: PUSH
32086: LD_INT 2
32088: NEG
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 2
32096: NEG
32097: PUSH
32098: LD_INT 1
32100: NEG
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 2
32108: NEG
32109: PUSH
32110: LD_INT 2
32112: NEG
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: LIST
32122: ST_TO_ADDR
// end ; 2 :
32123: GO 35389
32125: LD_INT 2
32127: DOUBLE
32128: EQUAL
32129: IFTRUE 32133
32131: GO 35388
32133: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32134: LD_ADDR_VAR 0 29
32138: PUSH
32139: LD_INT 4
32141: PUSH
32142: LD_INT 0
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: LD_INT 4
32151: PUSH
32152: LD_INT 1
32154: NEG
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: PUSH
32160: LD_INT 5
32162: PUSH
32163: LD_INT 0
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 5
32172: PUSH
32173: LD_INT 1
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: LD_INT 4
32182: PUSH
32183: LD_INT 1
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: LD_INT 3
32192: PUSH
32193: LD_INT 0
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: LD_INT 3
32202: PUSH
32203: LD_INT 1
32205: NEG
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: PUSH
32211: LD_INT 3
32213: PUSH
32214: LD_INT 2
32216: NEG
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: LD_INT 5
32224: PUSH
32225: LD_INT 2
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PUSH
32232: LD_INT 3
32234: PUSH
32235: LD_INT 3
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 3
32244: PUSH
32245: LD_INT 2
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PUSH
32252: LD_INT 4
32254: PUSH
32255: LD_INT 3
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: PUSH
32262: LD_INT 4
32264: PUSH
32265: LD_INT 4
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: PUSH
32272: LD_INT 3
32274: PUSH
32275: LD_INT 4
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: PUSH
32282: LD_INT 2
32284: PUSH
32285: LD_INT 3
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: PUSH
32292: LD_INT 2
32294: PUSH
32295: LD_INT 2
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: LD_INT 4
32304: PUSH
32305: LD_INT 2
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 2
32314: PUSH
32315: LD_INT 4
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 0
32324: PUSH
32325: LD_INT 4
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: PUSH
32332: LD_INT 0
32334: PUSH
32335: LD_INT 3
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: LD_INT 1
32344: PUSH
32345: LD_INT 4
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PUSH
32352: LD_INT 1
32354: PUSH
32355: LD_INT 5
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PUSH
32362: LD_INT 0
32364: PUSH
32365: LD_INT 5
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: PUSH
32372: LD_INT 1
32374: NEG
32375: PUSH
32376: LD_INT 4
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: PUSH
32383: LD_INT 1
32385: NEG
32386: PUSH
32387: LD_INT 3
32389: PUSH
32390: EMPTY
32391: LIST
32392: LIST
32393: PUSH
32394: LD_INT 2
32396: PUSH
32397: LD_INT 5
32399: PUSH
32400: EMPTY
32401: LIST
32402: LIST
32403: PUSH
32404: LD_INT 2
32406: NEG
32407: PUSH
32408: LD_INT 3
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: LD_INT 3
32417: NEG
32418: PUSH
32419: LD_INT 0
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: LD_INT 3
32428: NEG
32429: PUSH
32430: LD_INT 1
32432: NEG
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: LD_INT 2
32440: NEG
32441: PUSH
32442: LD_INT 0
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PUSH
32449: LD_INT 2
32451: NEG
32452: PUSH
32453: LD_INT 1
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: PUSH
32460: LD_INT 3
32462: NEG
32463: PUSH
32464: LD_INT 1
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: LD_INT 4
32473: NEG
32474: PUSH
32475: LD_INT 0
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 4
32484: NEG
32485: PUSH
32486: LD_INT 1
32488: NEG
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: PUSH
32494: LD_INT 4
32496: NEG
32497: PUSH
32498: LD_INT 2
32500: NEG
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: PUSH
32506: LD_INT 2
32508: NEG
32509: PUSH
32510: LD_INT 2
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: LD_INT 4
32519: NEG
32520: PUSH
32521: LD_INT 4
32523: NEG
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 4
32531: NEG
32532: PUSH
32533: LD_INT 5
32535: NEG
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: PUSH
32541: LD_INT 3
32543: NEG
32544: PUSH
32545: LD_INT 4
32547: NEG
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 3
32555: NEG
32556: PUSH
32557: LD_INT 3
32559: NEG
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 4
32567: NEG
32568: PUSH
32569: LD_INT 3
32571: NEG
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: LD_INT 5
32579: NEG
32580: PUSH
32581: LD_INT 4
32583: NEG
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: LD_INT 5
32591: NEG
32592: PUSH
32593: LD_INT 5
32595: NEG
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: LD_INT 3
32603: NEG
32604: PUSH
32605: LD_INT 5
32607: NEG
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PUSH
32613: LD_INT 5
32615: NEG
32616: PUSH
32617: LD_INT 3
32619: NEG
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32672: LD_ADDR_VAR 0 30
32676: PUSH
32677: LD_INT 4
32679: PUSH
32680: LD_INT 4
32682: PUSH
32683: EMPTY
32684: LIST
32685: LIST
32686: PUSH
32687: LD_INT 4
32689: PUSH
32690: LD_INT 3
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: PUSH
32697: LD_INT 5
32699: PUSH
32700: LD_INT 4
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: LD_INT 5
32709: PUSH
32710: LD_INT 5
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: PUSH
32717: LD_INT 4
32719: PUSH
32720: LD_INT 5
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: PUSH
32727: LD_INT 3
32729: PUSH
32730: LD_INT 4
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: PUSH
32737: LD_INT 3
32739: PUSH
32740: LD_INT 3
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 5
32749: PUSH
32750: LD_INT 3
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PUSH
32757: LD_INT 3
32759: PUSH
32760: LD_INT 5
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 0
32769: PUSH
32770: LD_INT 3
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: PUSH
32777: LD_INT 0
32779: PUSH
32780: LD_INT 2
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: LD_INT 1
32789: PUSH
32790: LD_INT 3
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: LD_INT 1
32799: PUSH
32800: LD_INT 4
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 0
32809: PUSH
32810: LD_INT 4
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PUSH
32817: LD_INT 1
32819: NEG
32820: PUSH
32821: LD_INT 3
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 1
32830: NEG
32831: PUSH
32832: LD_INT 2
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: PUSH
32839: LD_INT 2
32841: PUSH
32842: LD_INT 4
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: PUSH
32849: LD_INT 2
32851: NEG
32852: PUSH
32853: LD_INT 2
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: PUSH
32860: LD_INT 4
32862: NEG
32863: PUSH
32864: LD_INT 0
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PUSH
32871: LD_INT 4
32873: NEG
32874: PUSH
32875: LD_INT 1
32877: NEG
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: PUSH
32883: LD_INT 3
32885: NEG
32886: PUSH
32887: LD_INT 0
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 3
32896: NEG
32897: PUSH
32898: LD_INT 1
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: LD_INT 4
32907: NEG
32908: PUSH
32909: LD_INT 1
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: PUSH
32916: LD_INT 5
32918: NEG
32919: PUSH
32920: LD_INT 0
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 5
32929: NEG
32930: PUSH
32931: LD_INT 1
32933: NEG
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: PUSH
32939: LD_INT 5
32941: NEG
32942: PUSH
32943: LD_INT 2
32945: NEG
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: PUSH
32951: LD_INT 3
32953: NEG
32954: PUSH
32955: LD_INT 2
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PUSH
32962: LD_INT 3
32964: NEG
32965: PUSH
32966: LD_INT 3
32968: NEG
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: PUSH
32974: LD_INT 3
32976: NEG
32977: PUSH
32978: LD_INT 4
32980: NEG
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PUSH
32986: LD_INT 2
32988: NEG
32989: PUSH
32990: LD_INT 3
32992: NEG
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: PUSH
32998: LD_INT 2
33000: NEG
33001: PUSH
33002: LD_INT 2
33004: NEG
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 3
33012: NEG
33013: PUSH
33014: LD_INT 2
33016: NEG
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 4
33024: NEG
33025: PUSH
33026: LD_INT 3
33028: NEG
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 4
33036: NEG
33037: PUSH
33038: LD_INT 4
33040: NEG
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: PUSH
33046: LD_INT 2
33048: NEG
33049: PUSH
33050: LD_INT 4
33052: NEG
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 4
33060: NEG
33061: PUSH
33062: LD_INT 2
33064: NEG
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 0
33072: PUSH
33073: LD_INT 4
33075: NEG
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 0
33083: PUSH
33084: LD_INT 5
33086: NEG
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: PUSH
33092: LD_INT 1
33094: PUSH
33095: LD_INT 4
33097: NEG
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PUSH
33103: LD_INT 1
33105: PUSH
33106: LD_INT 3
33108: NEG
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: PUSH
33114: LD_INT 0
33116: PUSH
33117: LD_INT 3
33119: NEG
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PUSH
33125: LD_INT 1
33127: NEG
33128: PUSH
33129: LD_INT 4
33131: NEG
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: PUSH
33137: LD_INT 1
33139: NEG
33140: PUSH
33141: LD_INT 5
33143: NEG
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PUSH
33149: LD_INT 2
33151: PUSH
33152: LD_INT 3
33154: NEG
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: PUSH
33160: LD_INT 2
33162: NEG
33163: PUSH
33164: LD_INT 5
33166: NEG
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33219: LD_ADDR_VAR 0 31
33223: PUSH
33224: LD_INT 0
33226: PUSH
33227: LD_INT 4
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: PUSH
33234: LD_INT 0
33236: PUSH
33237: LD_INT 3
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PUSH
33244: LD_INT 1
33246: PUSH
33247: LD_INT 4
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: PUSH
33254: LD_INT 1
33256: PUSH
33257: LD_INT 5
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PUSH
33264: LD_INT 0
33266: PUSH
33267: LD_INT 5
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 1
33276: NEG
33277: PUSH
33278: LD_INT 4
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 1
33287: NEG
33288: PUSH
33289: LD_INT 3
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: LD_INT 2
33298: PUSH
33299: LD_INT 5
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: PUSH
33306: LD_INT 2
33308: NEG
33309: PUSH
33310: LD_INT 3
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 3
33319: NEG
33320: PUSH
33321: LD_INT 0
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: LD_INT 3
33330: NEG
33331: PUSH
33332: LD_INT 1
33334: NEG
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 2
33342: NEG
33343: PUSH
33344: LD_INT 0
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 2
33353: NEG
33354: PUSH
33355: LD_INT 1
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: PUSH
33362: LD_INT 3
33364: NEG
33365: PUSH
33366: LD_INT 1
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PUSH
33373: LD_INT 4
33375: NEG
33376: PUSH
33377: LD_INT 0
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 4
33386: NEG
33387: PUSH
33388: LD_INT 1
33390: NEG
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PUSH
33396: LD_INT 4
33398: NEG
33399: PUSH
33400: LD_INT 2
33402: NEG
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 2
33410: NEG
33411: PUSH
33412: LD_INT 2
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: PUSH
33419: LD_INT 4
33421: NEG
33422: PUSH
33423: LD_INT 4
33425: NEG
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: PUSH
33431: LD_INT 4
33433: NEG
33434: PUSH
33435: LD_INT 5
33437: NEG
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PUSH
33443: LD_INT 3
33445: NEG
33446: PUSH
33447: LD_INT 4
33449: NEG
33450: PUSH
33451: EMPTY
33452: LIST
33453: LIST
33454: PUSH
33455: LD_INT 3
33457: NEG
33458: PUSH
33459: LD_INT 3
33461: NEG
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: PUSH
33467: LD_INT 4
33469: NEG
33470: PUSH
33471: LD_INT 3
33473: NEG
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PUSH
33479: LD_INT 5
33481: NEG
33482: PUSH
33483: LD_INT 4
33485: NEG
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 5
33493: NEG
33494: PUSH
33495: LD_INT 5
33497: NEG
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 3
33505: NEG
33506: PUSH
33507: LD_INT 5
33509: NEG
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: PUSH
33515: LD_INT 5
33517: NEG
33518: PUSH
33519: LD_INT 3
33521: NEG
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: PUSH
33527: LD_INT 0
33529: PUSH
33530: LD_INT 3
33532: NEG
33533: PUSH
33534: EMPTY
33535: LIST
33536: LIST
33537: PUSH
33538: LD_INT 0
33540: PUSH
33541: LD_INT 4
33543: NEG
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 1
33551: PUSH
33552: LD_INT 3
33554: NEG
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 1
33562: PUSH
33563: LD_INT 2
33565: NEG
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 0
33573: PUSH
33574: LD_INT 2
33576: NEG
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 1
33584: NEG
33585: PUSH
33586: LD_INT 3
33588: NEG
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: PUSH
33594: LD_INT 1
33596: NEG
33597: PUSH
33598: LD_INT 4
33600: NEG
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 2
33608: PUSH
33609: LD_INT 2
33611: NEG
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: PUSH
33617: LD_INT 2
33619: NEG
33620: PUSH
33621: LD_INT 4
33623: NEG
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: LD_INT 4
33631: PUSH
33632: LD_INT 0
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: LD_INT 4
33641: PUSH
33642: LD_INT 1
33644: NEG
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 5
33652: PUSH
33653: LD_INT 0
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: LD_INT 5
33662: PUSH
33663: LD_INT 1
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: PUSH
33670: LD_INT 4
33672: PUSH
33673: LD_INT 1
33675: PUSH
33676: EMPTY
33677: LIST
33678: LIST
33679: PUSH
33680: LD_INT 3
33682: PUSH
33683: LD_INT 0
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: PUSH
33690: LD_INT 3
33692: PUSH
33693: LD_INT 1
33695: NEG
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 3
33703: PUSH
33704: LD_INT 2
33706: NEG
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 5
33714: PUSH
33715: LD_INT 2
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33769: LD_ADDR_VAR 0 32
33773: PUSH
33774: LD_INT 4
33776: NEG
33777: PUSH
33778: LD_INT 0
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 4
33787: NEG
33788: PUSH
33789: LD_INT 1
33791: NEG
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: LD_INT 3
33799: NEG
33800: PUSH
33801: LD_INT 0
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PUSH
33808: LD_INT 3
33810: NEG
33811: PUSH
33812: LD_INT 1
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 4
33821: NEG
33822: PUSH
33823: LD_INT 1
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PUSH
33830: LD_INT 5
33832: NEG
33833: PUSH
33834: LD_INT 0
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: LD_INT 5
33843: NEG
33844: PUSH
33845: LD_INT 1
33847: NEG
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 5
33855: NEG
33856: PUSH
33857: LD_INT 2
33859: NEG
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PUSH
33865: LD_INT 3
33867: NEG
33868: PUSH
33869: LD_INT 2
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PUSH
33876: LD_INT 3
33878: NEG
33879: PUSH
33880: LD_INT 3
33882: NEG
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: PUSH
33888: LD_INT 3
33890: NEG
33891: PUSH
33892: LD_INT 4
33894: NEG
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: PUSH
33900: LD_INT 2
33902: NEG
33903: PUSH
33904: LD_INT 3
33906: NEG
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: PUSH
33912: LD_INT 2
33914: NEG
33915: PUSH
33916: LD_INT 2
33918: NEG
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PUSH
33924: LD_INT 3
33926: NEG
33927: PUSH
33928: LD_INT 2
33930: NEG
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: PUSH
33936: LD_INT 4
33938: NEG
33939: PUSH
33940: LD_INT 3
33942: NEG
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: PUSH
33948: LD_INT 4
33950: NEG
33951: PUSH
33952: LD_INT 4
33954: NEG
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: PUSH
33960: LD_INT 2
33962: NEG
33963: PUSH
33964: LD_INT 4
33966: NEG
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: PUSH
33972: LD_INT 4
33974: NEG
33975: PUSH
33976: LD_INT 2
33978: NEG
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 0
33986: PUSH
33987: LD_INT 4
33989: NEG
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: LD_INT 0
33997: PUSH
33998: LD_INT 5
34000: NEG
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: PUSH
34006: LD_INT 1
34008: PUSH
34009: LD_INT 4
34011: NEG
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: LD_INT 1
34019: PUSH
34020: LD_INT 3
34022: NEG
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 0
34030: PUSH
34031: LD_INT 3
34033: NEG
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 1
34041: NEG
34042: PUSH
34043: LD_INT 4
34045: NEG
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 1
34053: NEG
34054: PUSH
34055: LD_INT 5
34057: NEG
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 2
34065: PUSH
34066: LD_INT 3
34068: NEG
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 2
34076: NEG
34077: PUSH
34078: LD_INT 5
34080: NEG
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: LD_INT 3
34088: PUSH
34089: LD_INT 0
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: PUSH
34096: LD_INT 3
34098: PUSH
34099: LD_INT 1
34101: NEG
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 4
34109: PUSH
34110: LD_INT 0
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 4
34119: PUSH
34120: LD_INT 1
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 3
34129: PUSH
34130: LD_INT 1
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: PUSH
34137: LD_INT 2
34139: PUSH
34140: LD_INT 0
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: LD_INT 2
34149: PUSH
34150: LD_INT 1
34152: NEG
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: PUSH
34158: LD_INT 2
34160: PUSH
34161: LD_INT 2
34163: NEG
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PUSH
34169: LD_INT 4
34171: PUSH
34172: LD_INT 2
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: PUSH
34179: LD_INT 4
34181: PUSH
34182: LD_INT 4
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: PUSH
34189: LD_INT 4
34191: PUSH
34192: LD_INT 3
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: PUSH
34199: LD_INT 5
34201: PUSH
34202: LD_INT 4
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: PUSH
34209: LD_INT 5
34211: PUSH
34212: LD_INT 5
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PUSH
34219: LD_INT 4
34221: PUSH
34222: LD_INT 5
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: PUSH
34229: LD_INT 3
34231: PUSH
34232: LD_INT 4
34234: PUSH
34235: EMPTY
34236: LIST
34237: LIST
34238: PUSH
34239: LD_INT 3
34241: PUSH
34242: LD_INT 3
34244: PUSH
34245: EMPTY
34246: LIST
34247: LIST
34248: PUSH
34249: LD_INT 5
34251: PUSH
34252: LD_INT 3
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: PUSH
34259: LD_INT 3
34261: PUSH
34262: LD_INT 5
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: LIST
34312: LIST
34313: LIST
34314: LIST
34315: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34316: LD_ADDR_VAR 0 33
34320: PUSH
34321: LD_INT 4
34323: NEG
34324: PUSH
34325: LD_INT 4
34327: NEG
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PUSH
34333: LD_INT 4
34335: NEG
34336: PUSH
34337: LD_INT 5
34339: NEG
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 3
34347: NEG
34348: PUSH
34349: LD_INT 4
34351: NEG
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: LD_INT 3
34359: NEG
34360: PUSH
34361: LD_INT 3
34363: NEG
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: PUSH
34369: LD_INT 4
34371: NEG
34372: PUSH
34373: LD_INT 3
34375: NEG
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PUSH
34381: LD_INT 5
34383: NEG
34384: PUSH
34385: LD_INT 4
34387: NEG
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: LD_INT 5
34395: NEG
34396: PUSH
34397: LD_INT 5
34399: NEG
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 3
34407: NEG
34408: PUSH
34409: LD_INT 5
34411: NEG
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: PUSH
34417: LD_INT 5
34419: NEG
34420: PUSH
34421: LD_INT 3
34423: NEG
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 0
34431: PUSH
34432: LD_INT 3
34434: NEG
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 0
34442: PUSH
34443: LD_INT 4
34445: NEG
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: PUSH
34451: LD_INT 1
34453: PUSH
34454: LD_INT 3
34456: NEG
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: PUSH
34462: LD_INT 1
34464: PUSH
34465: LD_INT 2
34467: NEG
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: PUSH
34473: LD_INT 0
34475: PUSH
34476: LD_INT 2
34478: NEG
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: LD_INT 1
34486: NEG
34487: PUSH
34488: LD_INT 3
34490: NEG
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PUSH
34496: LD_INT 1
34498: NEG
34499: PUSH
34500: LD_INT 4
34502: NEG
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PUSH
34508: LD_INT 2
34510: PUSH
34511: LD_INT 2
34513: NEG
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: PUSH
34519: LD_INT 2
34521: NEG
34522: PUSH
34523: LD_INT 4
34525: NEG
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 4
34533: PUSH
34534: LD_INT 0
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 4
34543: PUSH
34544: LD_INT 1
34546: NEG
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 5
34554: PUSH
34555: LD_INT 0
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: PUSH
34562: LD_INT 5
34564: PUSH
34565: LD_INT 1
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PUSH
34572: LD_INT 4
34574: PUSH
34575: LD_INT 1
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 3
34584: PUSH
34585: LD_INT 0
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 3
34594: PUSH
34595: LD_INT 1
34597: NEG
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: LD_INT 3
34605: PUSH
34606: LD_INT 2
34608: NEG
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: PUSH
34614: LD_INT 5
34616: PUSH
34617: LD_INT 2
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PUSH
34624: LD_INT 3
34626: PUSH
34627: LD_INT 3
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: PUSH
34634: LD_INT 3
34636: PUSH
34637: LD_INT 2
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: LD_INT 4
34646: PUSH
34647: LD_INT 3
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 4
34656: PUSH
34657: LD_INT 4
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: PUSH
34664: LD_INT 3
34666: PUSH
34667: LD_INT 4
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 2
34676: PUSH
34677: LD_INT 3
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 2
34686: PUSH
34687: LD_INT 2
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 4
34696: PUSH
34697: LD_INT 2
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: LD_INT 2
34706: PUSH
34707: LD_INT 4
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: LD_INT 0
34716: PUSH
34717: LD_INT 4
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: LD_INT 0
34726: PUSH
34727: LD_INT 3
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 1
34736: PUSH
34737: LD_INT 4
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 1
34746: PUSH
34747: LD_INT 5
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 0
34756: PUSH
34757: LD_INT 5
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: PUSH
34764: LD_INT 1
34766: NEG
34767: PUSH
34768: LD_INT 4
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 1
34777: NEG
34778: PUSH
34779: LD_INT 3
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: LD_INT 2
34788: PUSH
34789: LD_INT 5
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 2
34798: NEG
34799: PUSH
34800: LD_INT 3
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34854: LD_ADDR_VAR 0 34
34858: PUSH
34859: LD_INT 0
34861: PUSH
34862: LD_INT 4
34864: NEG
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: PUSH
34870: LD_INT 0
34872: PUSH
34873: LD_INT 5
34875: NEG
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: PUSH
34881: LD_INT 1
34883: PUSH
34884: LD_INT 4
34886: NEG
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PUSH
34892: LD_INT 1
34894: PUSH
34895: LD_INT 3
34897: NEG
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PUSH
34903: LD_INT 0
34905: PUSH
34906: LD_INT 3
34908: NEG
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: PUSH
34914: LD_INT 1
34916: NEG
34917: PUSH
34918: LD_INT 4
34920: NEG
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: PUSH
34926: LD_INT 1
34928: NEG
34929: PUSH
34930: LD_INT 5
34932: NEG
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: PUSH
34938: LD_INT 2
34940: PUSH
34941: LD_INT 3
34943: NEG
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: PUSH
34949: LD_INT 2
34951: NEG
34952: PUSH
34953: LD_INT 5
34955: NEG
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 3
34963: PUSH
34964: LD_INT 0
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: LD_INT 3
34973: PUSH
34974: LD_INT 1
34976: NEG
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: PUSH
34982: LD_INT 4
34984: PUSH
34985: LD_INT 0
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: PUSH
34992: LD_INT 4
34994: PUSH
34995: LD_INT 1
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 3
35004: PUSH
35005: LD_INT 1
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: LD_INT 2
35014: PUSH
35015: LD_INT 0
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PUSH
35022: LD_INT 2
35024: PUSH
35025: LD_INT 1
35027: NEG
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PUSH
35033: LD_INT 2
35035: PUSH
35036: LD_INT 2
35038: NEG
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PUSH
35044: LD_INT 4
35046: PUSH
35047: LD_INT 2
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: PUSH
35054: LD_INT 4
35056: PUSH
35057: LD_INT 4
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: LD_INT 4
35066: PUSH
35067: LD_INT 3
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: PUSH
35074: LD_INT 5
35076: PUSH
35077: LD_INT 4
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: PUSH
35084: LD_INT 5
35086: PUSH
35087: LD_INT 5
35089: PUSH
35090: EMPTY
35091: LIST
35092: LIST
35093: PUSH
35094: LD_INT 4
35096: PUSH
35097: LD_INT 5
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: PUSH
35104: LD_INT 3
35106: PUSH
35107: LD_INT 4
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: PUSH
35114: LD_INT 3
35116: PUSH
35117: LD_INT 3
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 5
35126: PUSH
35127: LD_INT 3
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 3
35136: PUSH
35137: LD_INT 5
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: LD_INT 0
35146: PUSH
35147: LD_INT 3
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 0
35156: PUSH
35157: LD_INT 2
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: PUSH
35164: LD_INT 1
35166: PUSH
35167: LD_INT 3
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: LD_INT 1
35176: PUSH
35177: LD_INT 4
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_INT 0
35186: PUSH
35187: LD_INT 4
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 1
35196: NEG
35197: PUSH
35198: LD_INT 3
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: LD_INT 1
35207: NEG
35208: PUSH
35209: LD_INT 2
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: LD_INT 2
35218: PUSH
35219: LD_INT 4
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PUSH
35226: LD_INT 2
35228: NEG
35229: PUSH
35230: LD_INT 2
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: PUSH
35237: LD_INT 4
35239: NEG
35240: PUSH
35241: LD_INT 0
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: PUSH
35248: LD_INT 4
35250: NEG
35251: PUSH
35252: LD_INT 1
35254: NEG
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 3
35262: NEG
35263: PUSH
35264: LD_INT 0
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: LD_INT 3
35273: NEG
35274: PUSH
35275: LD_INT 1
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: PUSH
35282: LD_INT 4
35284: NEG
35285: PUSH
35286: LD_INT 1
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PUSH
35293: LD_INT 5
35295: NEG
35296: PUSH
35297: LD_INT 0
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: PUSH
35304: LD_INT 5
35306: NEG
35307: PUSH
35308: LD_INT 1
35310: NEG
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PUSH
35316: LD_INT 5
35318: NEG
35319: PUSH
35320: LD_INT 2
35322: NEG
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: LD_INT 3
35330: NEG
35331: PUSH
35332: LD_INT 2
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: ST_TO_ADDR
// end ; end ;
35386: GO 35389
35388: POP
// case btype of b_depot , b_warehouse :
35389: LD_VAR 0 1
35393: PUSH
35394: LD_INT 0
35396: DOUBLE
35397: EQUAL
35398: IFTRUE 35408
35400: LD_INT 1
35402: DOUBLE
35403: EQUAL
35404: IFTRUE 35408
35406: GO 35609
35408: POP
// case nation of nation_american :
35409: LD_VAR 0 5
35413: PUSH
35414: LD_INT 1
35416: DOUBLE
35417: EQUAL
35418: IFTRUE 35422
35420: GO 35478
35422: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35423: LD_ADDR_VAR 0 9
35427: PUSH
35428: LD_VAR 0 11
35432: PUSH
35433: LD_VAR 0 12
35437: PUSH
35438: LD_VAR 0 13
35442: PUSH
35443: LD_VAR 0 14
35447: PUSH
35448: LD_VAR 0 15
35452: PUSH
35453: LD_VAR 0 16
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: LIST
35462: LIST
35463: LIST
35464: LIST
35465: PUSH
35466: LD_VAR 0 4
35470: PUSH
35471: LD_INT 1
35473: PLUS
35474: ARRAY
35475: ST_TO_ADDR
35476: GO 35607
35478: LD_INT 2
35480: DOUBLE
35481: EQUAL
35482: IFTRUE 35486
35484: GO 35542
35486: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35487: LD_ADDR_VAR 0 9
35491: PUSH
35492: LD_VAR 0 17
35496: PUSH
35497: LD_VAR 0 18
35501: PUSH
35502: LD_VAR 0 19
35506: PUSH
35507: LD_VAR 0 20
35511: PUSH
35512: LD_VAR 0 21
35516: PUSH
35517: LD_VAR 0 22
35521: PUSH
35522: EMPTY
35523: LIST
35524: LIST
35525: LIST
35526: LIST
35527: LIST
35528: LIST
35529: PUSH
35530: LD_VAR 0 4
35534: PUSH
35535: LD_INT 1
35537: PLUS
35538: ARRAY
35539: ST_TO_ADDR
35540: GO 35607
35542: LD_INT 3
35544: DOUBLE
35545: EQUAL
35546: IFTRUE 35550
35548: GO 35606
35550: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35551: LD_ADDR_VAR 0 9
35555: PUSH
35556: LD_VAR 0 23
35560: PUSH
35561: LD_VAR 0 24
35565: PUSH
35566: LD_VAR 0 25
35570: PUSH
35571: LD_VAR 0 26
35575: PUSH
35576: LD_VAR 0 27
35580: PUSH
35581: LD_VAR 0 28
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: LIST
35590: LIST
35591: LIST
35592: LIST
35593: PUSH
35594: LD_VAR 0 4
35598: PUSH
35599: LD_INT 1
35601: PLUS
35602: ARRAY
35603: ST_TO_ADDR
35604: GO 35607
35606: POP
35607: GO 36162
35609: LD_INT 2
35611: DOUBLE
35612: EQUAL
35613: IFTRUE 35623
35615: LD_INT 3
35617: DOUBLE
35618: EQUAL
35619: IFTRUE 35623
35621: GO 35679
35623: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35624: LD_ADDR_VAR 0 9
35628: PUSH
35629: LD_VAR 0 29
35633: PUSH
35634: LD_VAR 0 30
35638: PUSH
35639: LD_VAR 0 31
35643: PUSH
35644: LD_VAR 0 32
35648: PUSH
35649: LD_VAR 0 33
35653: PUSH
35654: LD_VAR 0 34
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: PUSH
35667: LD_VAR 0 4
35671: PUSH
35672: LD_INT 1
35674: PLUS
35675: ARRAY
35676: ST_TO_ADDR
35677: GO 36162
35679: LD_INT 16
35681: DOUBLE
35682: EQUAL
35683: IFTRUE 35741
35685: LD_INT 17
35687: DOUBLE
35688: EQUAL
35689: IFTRUE 35741
35691: LD_INT 18
35693: DOUBLE
35694: EQUAL
35695: IFTRUE 35741
35697: LD_INT 19
35699: DOUBLE
35700: EQUAL
35701: IFTRUE 35741
35703: LD_INT 22
35705: DOUBLE
35706: EQUAL
35707: IFTRUE 35741
35709: LD_INT 20
35711: DOUBLE
35712: EQUAL
35713: IFTRUE 35741
35715: LD_INT 21
35717: DOUBLE
35718: EQUAL
35719: IFTRUE 35741
35721: LD_INT 23
35723: DOUBLE
35724: EQUAL
35725: IFTRUE 35741
35727: LD_INT 24
35729: DOUBLE
35730: EQUAL
35731: IFTRUE 35741
35733: LD_INT 25
35735: DOUBLE
35736: EQUAL
35737: IFTRUE 35741
35739: GO 35797
35741: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35742: LD_ADDR_VAR 0 9
35746: PUSH
35747: LD_VAR 0 35
35751: PUSH
35752: LD_VAR 0 36
35756: PUSH
35757: LD_VAR 0 37
35761: PUSH
35762: LD_VAR 0 38
35766: PUSH
35767: LD_VAR 0 39
35771: PUSH
35772: LD_VAR 0 40
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: LIST
35781: LIST
35782: LIST
35783: LIST
35784: PUSH
35785: LD_VAR 0 4
35789: PUSH
35790: LD_INT 1
35792: PLUS
35793: ARRAY
35794: ST_TO_ADDR
35795: GO 36162
35797: LD_INT 6
35799: DOUBLE
35800: EQUAL
35801: IFTRUE 35853
35803: LD_INT 7
35805: DOUBLE
35806: EQUAL
35807: IFTRUE 35853
35809: LD_INT 8
35811: DOUBLE
35812: EQUAL
35813: IFTRUE 35853
35815: LD_INT 13
35817: DOUBLE
35818: EQUAL
35819: IFTRUE 35853
35821: LD_INT 12
35823: DOUBLE
35824: EQUAL
35825: IFTRUE 35853
35827: LD_INT 15
35829: DOUBLE
35830: EQUAL
35831: IFTRUE 35853
35833: LD_INT 11
35835: DOUBLE
35836: EQUAL
35837: IFTRUE 35853
35839: LD_INT 14
35841: DOUBLE
35842: EQUAL
35843: IFTRUE 35853
35845: LD_INT 10
35847: DOUBLE
35848: EQUAL
35849: IFTRUE 35853
35851: GO 35909
35853: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35854: LD_ADDR_VAR 0 9
35858: PUSH
35859: LD_VAR 0 41
35863: PUSH
35864: LD_VAR 0 42
35868: PUSH
35869: LD_VAR 0 43
35873: PUSH
35874: LD_VAR 0 44
35878: PUSH
35879: LD_VAR 0 45
35883: PUSH
35884: LD_VAR 0 46
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: LIST
35893: LIST
35894: LIST
35895: LIST
35896: PUSH
35897: LD_VAR 0 4
35901: PUSH
35902: LD_INT 1
35904: PLUS
35905: ARRAY
35906: ST_TO_ADDR
35907: GO 36162
35909: LD_INT 36
35911: DOUBLE
35912: EQUAL
35913: IFTRUE 35917
35915: GO 35973
35917: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35918: LD_ADDR_VAR 0 9
35922: PUSH
35923: LD_VAR 0 47
35927: PUSH
35928: LD_VAR 0 48
35932: PUSH
35933: LD_VAR 0 49
35937: PUSH
35938: LD_VAR 0 50
35942: PUSH
35943: LD_VAR 0 51
35947: PUSH
35948: LD_VAR 0 52
35952: PUSH
35953: EMPTY
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: LIST
35959: LIST
35960: PUSH
35961: LD_VAR 0 4
35965: PUSH
35966: LD_INT 1
35968: PLUS
35969: ARRAY
35970: ST_TO_ADDR
35971: GO 36162
35973: LD_INT 4
35975: DOUBLE
35976: EQUAL
35977: IFTRUE 35999
35979: LD_INT 5
35981: DOUBLE
35982: EQUAL
35983: IFTRUE 35999
35985: LD_INT 34
35987: DOUBLE
35988: EQUAL
35989: IFTRUE 35999
35991: LD_INT 37
35993: DOUBLE
35994: EQUAL
35995: IFTRUE 35999
35997: GO 36055
35999: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
36000: LD_ADDR_VAR 0 9
36004: PUSH
36005: LD_VAR 0 53
36009: PUSH
36010: LD_VAR 0 54
36014: PUSH
36015: LD_VAR 0 55
36019: PUSH
36020: LD_VAR 0 56
36024: PUSH
36025: LD_VAR 0 57
36029: PUSH
36030: LD_VAR 0 58
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: LIST
36039: LIST
36040: LIST
36041: LIST
36042: PUSH
36043: LD_VAR 0 4
36047: PUSH
36048: LD_INT 1
36050: PLUS
36051: ARRAY
36052: ST_TO_ADDR
36053: GO 36162
36055: LD_INT 31
36057: DOUBLE
36058: EQUAL
36059: IFTRUE 36105
36061: LD_INT 32
36063: DOUBLE
36064: EQUAL
36065: IFTRUE 36105
36067: LD_INT 33
36069: DOUBLE
36070: EQUAL
36071: IFTRUE 36105
36073: LD_INT 27
36075: DOUBLE
36076: EQUAL
36077: IFTRUE 36105
36079: LD_INT 26
36081: DOUBLE
36082: EQUAL
36083: IFTRUE 36105
36085: LD_INT 28
36087: DOUBLE
36088: EQUAL
36089: IFTRUE 36105
36091: LD_INT 29
36093: DOUBLE
36094: EQUAL
36095: IFTRUE 36105
36097: LD_INT 30
36099: DOUBLE
36100: EQUAL
36101: IFTRUE 36105
36103: GO 36161
36105: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
36106: LD_ADDR_VAR 0 9
36110: PUSH
36111: LD_VAR 0 59
36115: PUSH
36116: LD_VAR 0 60
36120: PUSH
36121: LD_VAR 0 61
36125: PUSH
36126: LD_VAR 0 62
36130: PUSH
36131: LD_VAR 0 63
36135: PUSH
36136: LD_VAR 0 64
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: LIST
36148: PUSH
36149: LD_VAR 0 4
36153: PUSH
36154: LD_INT 1
36156: PLUS
36157: ARRAY
36158: ST_TO_ADDR
36159: GO 36162
36161: POP
// temp_list2 = [ ] ;
36162: LD_ADDR_VAR 0 10
36166: PUSH
36167: EMPTY
36168: ST_TO_ADDR
// for i in temp_list do
36169: LD_ADDR_VAR 0 8
36173: PUSH
36174: LD_VAR 0 9
36178: PUSH
36179: FOR_IN
36180: IFFALSE 36232
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36182: LD_ADDR_VAR 0 10
36186: PUSH
36187: LD_VAR 0 10
36191: PUSH
36192: LD_VAR 0 8
36196: PUSH
36197: LD_INT 1
36199: ARRAY
36200: PUSH
36201: LD_VAR 0 2
36205: PLUS
36206: PUSH
36207: LD_VAR 0 8
36211: PUSH
36212: LD_INT 2
36214: ARRAY
36215: PUSH
36216: LD_VAR 0 3
36220: PLUS
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: PUSH
36226: EMPTY
36227: LIST
36228: ADD
36229: ST_TO_ADDR
36230: GO 36179
36232: POP
36233: POP
// result = temp_list2 ;
36234: LD_ADDR_VAR 0 7
36238: PUSH
36239: LD_VAR 0 10
36243: ST_TO_ADDR
// end ;
36244: LD_VAR 0 7
36248: RET
// export function EnemyInRange ( unit , dist ) ; begin
36249: LD_INT 0
36251: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36252: LD_ADDR_VAR 0 3
36256: PUSH
36257: LD_VAR 0 1
36261: PPUSH
36262: CALL_OW 255
36266: PPUSH
36267: LD_VAR 0 1
36271: PPUSH
36272: CALL_OW 250
36276: PPUSH
36277: LD_VAR 0 1
36281: PPUSH
36282: CALL_OW 251
36286: PPUSH
36287: LD_VAR 0 2
36291: PPUSH
36292: CALL 9651 0 4
36296: PUSH
36297: LD_INT 4
36299: ARRAY
36300: ST_TO_ADDR
// end ;
36301: LD_VAR 0 3
36305: RET
// export function PlayerSeeMe ( unit ) ; begin
36306: LD_INT 0
36308: PPUSH
// result := See ( your_side , unit ) ;
36309: LD_ADDR_VAR 0 2
36313: PUSH
36314: LD_OWVAR 2
36318: PPUSH
36319: LD_VAR 0 1
36323: PPUSH
36324: CALL_OW 292
36328: ST_TO_ADDR
// end ;
36329: LD_VAR 0 2
36333: RET
// export function ReverseDir ( unit ) ; begin
36334: LD_INT 0
36336: PPUSH
// if not unit then
36337: LD_VAR 0 1
36341: NOT
36342: IFFALSE 36346
// exit ;
36344: GO 36369
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36346: LD_ADDR_VAR 0 2
36350: PUSH
36351: LD_VAR 0 1
36355: PPUSH
36356: CALL_OW 254
36360: PUSH
36361: LD_INT 3
36363: PLUS
36364: PUSH
36365: LD_INT 6
36367: MOD
36368: ST_TO_ADDR
// end ;
36369: LD_VAR 0 2
36373: RET
// export function ReverseArray ( array ) ; var i ; begin
36374: LD_INT 0
36376: PPUSH
36377: PPUSH
// if not array then
36378: LD_VAR 0 1
36382: NOT
36383: IFFALSE 36387
// exit ;
36385: GO 36442
// result := [ ] ;
36387: LD_ADDR_VAR 0 2
36391: PUSH
36392: EMPTY
36393: ST_TO_ADDR
// for i := array downto 1 do
36394: LD_ADDR_VAR 0 3
36398: PUSH
36399: DOUBLE
36400: LD_VAR 0 1
36404: INC
36405: ST_TO_ADDR
36406: LD_INT 1
36408: PUSH
36409: FOR_DOWNTO
36410: IFFALSE 36440
// result := Join ( result , array [ i ] ) ;
36412: LD_ADDR_VAR 0 2
36416: PUSH
36417: LD_VAR 0 2
36421: PPUSH
36422: LD_VAR 0 1
36426: PUSH
36427: LD_VAR 0 3
36431: ARRAY
36432: PPUSH
36433: CALL 41085 0 2
36437: ST_TO_ADDR
36438: GO 36409
36440: POP
36441: POP
// end ;
36442: LD_VAR 0 2
36446: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36447: LD_INT 0
36449: PPUSH
36450: PPUSH
36451: PPUSH
36452: PPUSH
36453: PPUSH
36454: PPUSH
// if not unit or not hexes then
36455: LD_VAR 0 1
36459: NOT
36460: PUSH
36461: LD_VAR 0 2
36465: NOT
36466: OR
36467: IFFALSE 36471
// exit ;
36469: GO 36594
// dist := 9999 ;
36471: LD_ADDR_VAR 0 5
36475: PUSH
36476: LD_INT 9999
36478: ST_TO_ADDR
// for i = 1 to hexes do
36479: LD_ADDR_VAR 0 4
36483: PUSH
36484: DOUBLE
36485: LD_INT 1
36487: DEC
36488: ST_TO_ADDR
36489: LD_VAR 0 2
36493: PUSH
36494: FOR_TO
36495: IFFALSE 36582
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36497: LD_ADDR_VAR 0 6
36501: PUSH
36502: LD_VAR 0 1
36506: PPUSH
36507: LD_VAR 0 2
36511: PUSH
36512: LD_VAR 0 4
36516: ARRAY
36517: PUSH
36518: LD_INT 1
36520: ARRAY
36521: PPUSH
36522: LD_VAR 0 2
36526: PUSH
36527: LD_VAR 0 4
36531: ARRAY
36532: PUSH
36533: LD_INT 2
36535: ARRAY
36536: PPUSH
36537: CALL_OW 297
36541: ST_TO_ADDR
// if tdist < dist then
36542: LD_VAR 0 6
36546: PUSH
36547: LD_VAR 0 5
36551: LESS
36552: IFFALSE 36580
// begin hex := hexes [ i ] ;
36554: LD_ADDR_VAR 0 8
36558: PUSH
36559: LD_VAR 0 2
36563: PUSH
36564: LD_VAR 0 4
36568: ARRAY
36569: ST_TO_ADDR
// dist := tdist ;
36570: LD_ADDR_VAR 0 5
36574: PUSH
36575: LD_VAR 0 6
36579: ST_TO_ADDR
// end ; end ;
36580: GO 36494
36582: POP
36583: POP
// result := hex ;
36584: LD_ADDR_VAR 0 3
36588: PUSH
36589: LD_VAR 0 8
36593: ST_TO_ADDR
// end ;
36594: LD_VAR 0 3
36598: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36599: LD_INT 0
36601: PPUSH
36602: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36603: LD_VAR 0 1
36607: NOT
36608: PUSH
36609: LD_VAR 0 1
36613: PUSH
36614: LD_INT 21
36616: PUSH
36617: LD_INT 2
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 23
36626: PUSH
36627: LD_INT 2
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PPUSH
36638: CALL_OW 69
36642: IN
36643: NOT
36644: OR
36645: IFFALSE 36649
// exit ;
36647: GO 36696
// for i = 1 to 3 do
36649: LD_ADDR_VAR 0 3
36653: PUSH
36654: DOUBLE
36655: LD_INT 1
36657: DEC
36658: ST_TO_ADDR
36659: LD_INT 3
36661: PUSH
36662: FOR_TO
36663: IFFALSE 36694
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36665: LD_VAR 0 1
36669: PPUSH
36670: CALL_OW 250
36674: PPUSH
36675: LD_VAR 0 1
36679: PPUSH
36680: CALL_OW 251
36684: PPUSH
36685: LD_INT 1
36687: PPUSH
36688: CALL_OW 453
36692: GO 36662
36694: POP
36695: POP
// end ;
36696: LD_VAR 0 2
36700: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36701: LD_INT 0
36703: PPUSH
36704: PPUSH
36705: PPUSH
36706: PPUSH
36707: PPUSH
36708: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
36709: LD_VAR 0 1
36713: NOT
36714: PUSH
36715: LD_VAR 0 2
36719: NOT
36720: OR
36721: PUSH
36722: LD_VAR 0 1
36726: PPUSH
36727: CALL_OW 314
36731: OR
36732: IFFALSE 36736
// exit ;
36734: GO 37203
// if GetLives ( i ) < 250 then
36736: LD_VAR 0 4
36740: PPUSH
36741: CALL_OW 256
36745: PUSH
36746: LD_INT 250
36748: LESS
36749: IFFALSE 36762
// begin ComAutodestruct ( i ) ;
36751: LD_VAR 0 4
36755: PPUSH
36756: CALL 36599 0 1
// exit ;
36760: GO 37203
// end ; x := GetX ( enemy_unit ) ;
36762: LD_ADDR_VAR 0 7
36766: PUSH
36767: LD_VAR 0 2
36771: PPUSH
36772: CALL_OW 250
36776: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36777: LD_ADDR_VAR 0 8
36781: PUSH
36782: LD_VAR 0 2
36786: PPUSH
36787: CALL_OW 251
36791: ST_TO_ADDR
// if not x or not y then
36792: LD_VAR 0 7
36796: NOT
36797: PUSH
36798: LD_VAR 0 8
36802: NOT
36803: OR
36804: IFFALSE 36808
// exit ;
36806: GO 37203
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36808: LD_ADDR_VAR 0 6
36812: PUSH
36813: LD_VAR 0 7
36817: PPUSH
36818: LD_INT 0
36820: PPUSH
36821: LD_INT 4
36823: PPUSH
36824: CALL_OW 272
36828: PUSH
36829: LD_VAR 0 8
36833: PPUSH
36834: LD_INT 0
36836: PPUSH
36837: LD_INT 4
36839: PPUSH
36840: CALL_OW 273
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_VAR 0 7
36853: PPUSH
36854: LD_INT 1
36856: PPUSH
36857: LD_INT 4
36859: PPUSH
36860: CALL_OW 272
36864: PUSH
36865: LD_VAR 0 8
36869: PPUSH
36870: LD_INT 1
36872: PPUSH
36873: LD_INT 4
36875: PPUSH
36876: CALL_OW 273
36880: PUSH
36881: EMPTY
36882: LIST
36883: LIST
36884: PUSH
36885: LD_VAR 0 7
36889: PPUSH
36890: LD_INT 2
36892: PPUSH
36893: LD_INT 4
36895: PPUSH
36896: CALL_OW 272
36900: PUSH
36901: LD_VAR 0 8
36905: PPUSH
36906: LD_INT 2
36908: PPUSH
36909: LD_INT 4
36911: PPUSH
36912: CALL_OW 273
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: PUSH
36921: LD_VAR 0 7
36925: PPUSH
36926: LD_INT 3
36928: PPUSH
36929: LD_INT 4
36931: PPUSH
36932: CALL_OW 272
36936: PUSH
36937: LD_VAR 0 8
36941: PPUSH
36942: LD_INT 3
36944: PPUSH
36945: LD_INT 4
36947: PPUSH
36948: CALL_OW 273
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: LD_VAR 0 7
36961: PPUSH
36962: LD_INT 4
36964: PPUSH
36965: LD_INT 4
36967: PPUSH
36968: CALL_OW 272
36972: PUSH
36973: LD_VAR 0 8
36977: PPUSH
36978: LD_INT 4
36980: PPUSH
36981: LD_INT 4
36983: PPUSH
36984: CALL_OW 273
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: LD_VAR 0 7
36997: PPUSH
36998: LD_INT 5
37000: PPUSH
37001: LD_INT 4
37003: PPUSH
37004: CALL_OW 272
37008: PUSH
37009: LD_VAR 0 8
37013: PPUSH
37014: LD_INT 5
37016: PPUSH
37017: LD_INT 4
37019: PPUSH
37020: CALL_OW 273
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: ST_TO_ADDR
// for i = tmp downto 1 do
37037: LD_ADDR_VAR 0 4
37041: PUSH
37042: DOUBLE
37043: LD_VAR 0 6
37047: INC
37048: ST_TO_ADDR
37049: LD_INT 1
37051: PUSH
37052: FOR_DOWNTO
37053: IFFALSE 37154
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
37055: LD_VAR 0 6
37059: PUSH
37060: LD_VAR 0 4
37064: ARRAY
37065: PUSH
37066: LD_INT 1
37068: ARRAY
37069: PPUSH
37070: LD_VAR 0 6
37074: PUSH
37075: LD_VAR 0 4
37079: ARRAY
37080: PUSH
37081: LD_INT 2
37083: ARRAY
37084: PPUSH
37085: CALL_OW 488
37089: NOT
37090: PUSH
37091: LD_VAR 0 6
37095: PUSH
37096: LD_VAR 0 4
37100: ARRAY
37101: PUSH
37102: LD_INT 1
37104: ARRAY
37105: PPUSH
37106: LD_VAR 0 6
37110: PUSH
37111: LD_VAR 0 4
37115: ARRAY
37116: PUSH
37117: LD_INT 2
37119: ARRAY
37120: PPUSH
37121: CALL_OW 428
37125: PUSH
37126: LD_INT 0
37128: NONEQUAL
37129: OR
37130: IFFALSE 37152
// tmp := Delete ( tmp , i ) ;
37132: LD_ADDR_VAR 0 6
37136: PUSH
37137: LD_VAR 0 6
37141: PPUSH
37142: LD_VAR 0 4
37146: PPUSH
37147: CALL_OW 3
37151: ST_TO_ADDR
37152: GO 37052
37154: POP
37155: POP
// j := GetClosestHex ( unit , tmp ) ;
37156: LD_ADDR_VAR 0 5
37160: PUSH
37161: LD_VAR 0 1
37165: PPUSH
37166: LD_VAR 0 6
37170: PPUSH
37171: CALL 36447 0 2
37175: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
37176: LD_VAR 0 1
37180: PPUSH
37181: LD_VAR 0 5
37185: PUSH
37186: LD_INT 1
37188: ARRAY
37189: PPUSH
37190: LD_VAR 0 5
37194: PUSH
37195: LD_INT 2
37197: ARRAY
37198: PPUSH
37199: CALL_OW 111
// end ;
37203: LD_VAR 0 3
37207: RET
// export function PrepareApemanSoldier ( ) ; begin
37208: LD_INT 0
37210: PPUSH
// uc_nation := 0 ;
37211: LD_ADDR_OWVAR 21
37215: PUSH
37216: LD_INT 0
37218: ST_TO_ADDR
// hc_sex := sex_male ;
37219: LD_ADDR_OWVAR 27
37223: PUSH
37224: LD_INT 1
37226: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
37227: LD_ADDR_OWVAR 28
37231: PUSH
37232: LD_INT 15
37234: ST_TO_ADDR
// hc_gallery :=  ;
37235: LD_ADDR_OWVAR 33
37239: PUSH
37240: LD_STRING 
37242: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37243: LD_ADDR_OWVAR 31
37247: PUSH
37248: LD_INT 0
37250: PPUSH
37251: LD_INT 3
37253: PPUSH
37254: CALL_OW 12
37258: PUSH
37259: LD_INT 0
37261: PPUSH
37262: LD_INT 3
37264: PPUSH
37265: CALL_OW 12
37269: PUSH
37270: LD_INT 0
37272: PUSH
37273: LD_INT 0
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: ST_TO_ADDR
// end ;
37282: LD_VAR 0 1
37286: RET
// export function PrepareApemanEngineer ( ) ; begin
37287: LD_INT 0
37289: PPUSH
// uc_nation := 0 ;
37290: LD_ADDR_OWVAR 21
37294: PUSH
37295: LD_INT 0
37297: ST_TO_ADDR
// hc_sex := sex_male ;
37298: LD_ADDR_OWVAR 27
37302: PUSH
37303: LD_INT 1
37305: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
37306: LD_ADDR_OWVAR 28
37310: PUSH
37311: LD_INT 16
37313: ST_TO_ADDR
// hc_gallery :=  ;
37314: LD_ADDR_OWVAR 33
37318: PUSH
37319: LD_STRING 
37321: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37322: LD_ADDR_OWVAR 31
37326: PUSH
37327: LD_INT 0
37329: PPUSH
37330: LD_INT 3
37332: PPUSH
37333: CALL_OW 12
37337: PUSH
37338: LD_INT 0
37340: PPUSH
37341: LD_INT 3
37343: PPUSH
37344: CALL_OW 12
37348: PUSH
37349: LD_INT 0
37351: PUSH
37352: LD_INT 0
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: ST_TO_ADDR
// end ;
37361: LD_VAR 0 1
37365: RET
// export function PrepareApeman ( agressivity ) ; begin
37366: LD_INT 0
37368: PPUSH
// uc_side := 0 ;
37369: LD_ADDR_OWVAR 20
37373: PUSH
37374: LD_INT 0
37376: ST_TO_ADDR
// uc_nation := 0 ;
37377: LD_ADDR_OWVAR 21
37381: PUSH
37382: LD_INT 0
37384: ST_TO_ADDR
// hc_sex := sex_male ;
37385: LD_ADDR_OWVAR 27
37389: PUSH
37390: LD_INT 1
37392: ST_TO_ADDR
// hc_class := class_apeman ;
37393: LD_ADDR_OWVAR 28
37397: PUSH
37398: LD_INT 12
37400: ST_TO_ADDR
// hc_gallery :=  ;
37401: LD_ADDR_OWVAR 33
37405: PUSH
37406: LD_STRING 
37408: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37409: LD_ADDR_OWVAR 35
37413: PUSH
37414: LD_VAR 0 1
37418: NEG
37419: PPUSH
37420: LD_VAR 0 1
37424: PPUSH
37425: CALL_OW 12
37429: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37430: LD_ADDR_OWVAR 31
37434: PUSH
37435: LD_INT 0
37437: PPUSH
37438: LD_INT 3
37440: PPUSH
37441: CALL_OW 12
37445: PUSH
37446: LD_INT 0
37448: PPUSH
37449: LD_INT 3
37451: PPUSH
37452: CALL_OW 12
37456: PUSH
37457: LD_INT 0
37459: PUSH
37460: LD_INT 0
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: ST_TO_ADDR
// end ;
37469: LD_VAR 0 2
37473: RET
// export function PrepareTiger ( agressivity ) ; begin
37474: LD_INT 0
37476: PPUSH
// uc_side := 0 ;
37477: LD_ADDR_OWVAR 20
37481: PUSH
37482: LD_INT 0
37484: ST_TO_ADDR
// uc_nation := 0 ;
37485: LD_ADDR_OWVAR 21
37489: PUSH
37490: LD_INT 0
37492: ST_TO_ADDR
// hc_class := class_tiger ;
37493: LD_ADDR_OWVAR 28
37497: PUSH
37498: LD_INT 14
37500: ST_TO_ADDR
// hc_gallery :=  ;
37501: LD_ADDR_OWVAR 33
37505: PUSH
37506: LD_STRING 
37508: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37509: LD_ADDR_OWVAR 35
37513: PUSH
37514: LD_VAR 0 1
37518: NEG
37519: PPUSH
37520: LD_VAR 0 1
37524: PPUSH
37525: CALL_OW 12
37529: ST_TO_ADDR
// end ;
37530: LD_VAR 0 2
37534: RET
// export function PrepareEnchidna ( ) ; begin
37535: LD_INT 0
37537: PPUSH
// uc_side := 0 ;
37538: LD_ADDR_OWVAR 20
37542: PUSH
37543: LD_INT 0
37545: ST_TO_ADDR
// uc_nation := 0 ;
37546: LD_ADDR_OWVAR 21
37550: PUSH
37551: LD_INT 0
37553: ST_TO_ADDR
// hc_class := class_baggie ;
37554: LD_ADDR_OWVAR 28
37558: PUSH
37559: LD_INT 13
37561: ST_TO_ADDR
// hc_gallery :=  ;
37562: LD_ADDR_OWVAR 33
37566: PUSH
37567: LD_STRING 
37569: ST_TO_ADDR
// end ;
37570: LD_VAR 0 1
37574: RET
// export function PrepareFrog ( ) ; begin
37575: LD_INT 0
37577: PPUSH
// uc_side := 0 ;
37578: LD_ADDR_OWVAR 20
37582: PUSH
37583: LD_INT 0
37585: ST_TO_ADDR
// uc_nation := 0 ;
37586: LD_ADDR_OWVAR 21
37590: PUSH
37591: LD_INT 0
37593: ST_TO_ADDR
// hc_class := class_frog ;
37594: LD_ADDR_OWVAR 28
37598: PUSH
37599: LD_INT 19
37601: ST_TO_ADDR
// hc_gallery :=  ;
37602: LD_ADDR_OWVAR 33
37606: PUSH
37607: LD_STRING 
37609: ST_TO_ADDR
// end ;
37610: LD_VAR 0 1
37614: RET
// export function PrepareFish ( ) ; begin
37615: LD_INT 0
37617: PPUSH
// uc_side := 0 ;
37618: LD_ADDR_OWVAR 20
37622: PUSH
37623: LD_INT 0
37625: ST_TO_ADDR
// uc_nation := 0 ;
37626: LD_ADDR_OWVAR 21
37630: PUSH
37631: LD_INT 0
37633: ST_TO_ADDR
// hc_class := class_fish ;
37634: LD_ADDR_OWVAR 28
37638: PUSH
37639: LD_INT 20
37641: ST_TO_ADDR
// hc_gallery :=  ;
37642: LD_ADDR_OWVAR 33
37646: PUSH
37647: LD_STRING 
37649: ST_TO_ADDR
// end ;
37650: LD_VAR 0 1
37654: RET
// export function PrepareBird ( ) ; begin
37655: LD_INT 0
37657: PPUSH
// uc_side := 0 ;
37658: LD_ADDR_OWVAR 20
37662: PUSH
37663: LD_INT 0
37665: ST_TO_ADDR
// uc_nation := 0 ;
37666: LD_ADDR_OWVAR 21
37670: PUSH
37671: LD_INT 0
37673: ST_TO_ADDR
// hc_class := class_phororhacos ;
37674: LD_ADDR_OWVAR 28
37678: PUSH
37679: LD_INT 18
37681: ST_TO_ADDR
// hc_gallery :=  ;
37682: LD_ADDR_OWVAR 33
37686: PUSH
37687: LD_STRING 
37689: ST_TO_ADDR
// end ;
37690: LD_VAR 0 1
37694: RET
// export function PrepareHorse ( ) ; begin
37695: LD_INT 0
37697: PPUSH
// uc_side := 0 ;
37698: LD_ADDR_OWVAR 20
37702: PUSH
37703: LD_INT 0
37705: ST_TO_ADDR
// uc_nation := 0 ;
37706: LD_ADDR_OWVAR 21
37710: PUSH
37711: LD_INT 0
37713: ST_TO_ADDR
// hc_class := class_horse ;
37714: LD_ADDR_OWVAR 28
37718: PUSH
37719: LD_INT 21
37721: ST_TO_ADDR
// hc_gallery :=  ;
37722: LD_ADDR_OWVAR 33
37726: PUSH
37727: LD_STRING 
37729: ST_TO_ADDR
// end ;
37730: LD_VAR 0 1
37734: RET
// export function PrepareMastodont ( ) ; begin
37735: LD_INT 0
37737: PPUSH
// uc_side := 0 ;
37738: LD_ADDR_OWVAR 20
37742: PUSH
37743: LD_INT 0
37745: ST_TO_ADDR
// uc_nation := 0 ;
37746: LD_ADDR_OWVAR 21
37750: PUSH
37751: LD_INT 0
37753: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37754: LD_ADDR_OWVAR 37
37758: PUSH
37759: LD_INT 31
37761: ST_TO_ADDR
// vc_control := control_rider ;
37762: LD_ADDR_OWVAR 38
37766: PUSH
37767: LD_INT 4
37769: ST_TO_ADDR
// end ;
37770: LD_VAR 0 1
37774: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37775: LD_INT 0
37777: PPUSH
37778: PPUSH
37779: PPUSH
// uc_side = 0 ;
37780: LD_ADDR_OWVAR 20
37784: PUSH
37785: LD_INT 0
37787: ST_TO_ADDR
// uc_nation = 0 ;
37788: LD_ADDR_OWVAR 21
37792: PUSH
37793: LD_INT 0
37795: ST_TO_ADDR
// InitHc_All ( ) ;
37796: CALL_OW 584
// InitVc ;
37800: CALL_OW 20
// if mastodonts then
37804: LD_VAR 0 6
37808: IFFALSE 37875
// for i = 1 to mastodonts do
37810: LD_ADDR_VAR 0 11
37814: PUSH
37815: DOUBLE
37816: LD_INT 1
37818: DEC
37819: ST_TO_ADDR
37820: LD_VAR 0 6
37824: PUSH
37825: FOR_TO
37826: IFFALSE 37873
// begin vc_chassis := 31 ;
37828: LD_ADDR_OWVAR 37
37832: PUSH
37833: LD_INT 31
37835: ST_TO_ADDR
// vc_control := control_rider ;
37836: LD_ADDR_OWVAR 38
37840: PUSH
37841: LD_INT 4
37843: ST_TO_ADDR
// animal := CreateVehicle ;
37844: LD_ADDR_VAR 0 12
37848: PUSH
37849: CALL_OW 45
37853: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37854: LD_VAR 0 12
37858: PPUSH
37859: LD_VAR 0 8
37863: PPUSH
37864: LD_INT 0
37866: PPUSH
37867: CALL 40003 0 3
// end ;
37871: GO 37825
37873: POP
37874: POP
// if horses then
37875: LD_VAR 0 5
37879: IFFALSE 37946
// for i = 1 to horses do
37881: LD_ADDR_VAR 0 11
37885: PUSH
37886: DOUBLE
37887: LD_INT 1
37889: DEC
37890: ST_TO_ADDR
37891: LD_VAR 0 5
37895: PUSH
37896: FOR_TO
37897: IFFALSE 37944
// begin hc_class := 21 ;
37899: LD_ADDR_OWVAR 28
37903: PUSH
37904: LD_INT 21
37906: ST_TO_ADDR
// hc_gallery :=  ;
37907: LD_ADDR_OWVAR 33
37911: PUSH
37912: LD_STRING 
37914: ST_TO_ADDR
// animal := CreateHuman ;
37915: LD_ADDR_VAR 0 12
37919: PUSH
37920: CALL_OW 44
37924: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37925: LD_VAR 0 12
37929: PPUSH
37930: LD_VAR 0 8
37934: PPUSH
37935: LD_INT 0
37937: PPUSH
37938: CALL 40003 0 3
// end ;
37942: GO 37896
37944: POP
37945: POP
// if birds then
37946: LD_VAR 0 1
37950: IFFALSE 38017
// for i = 1 to birds do
37952: LD_ADDR_VAR 0 11
37956: PUSH
37957: DOUBLE
37958: LD_INT 1
37960: DEC
37961: ST_TO_ADDR
37962: LD_VAR 0 1
37966: PUSH
37967: FOR_TO
37968: IFFALSE 38015
// begin hc_class = 18 ;
37970: LD_ADDR_OWVAR 28
37974: PUSH
37975: LD_INT 18
37977: ST_TO_ADDR
// hc_gallery =  ;
37978: LD_ADDR_OWVAR 33
37982: PUSH
37983: LD_STRING 
37985: ST_TO_ADDR
// animal := CreateHuman ;
37986: LD_ADDR_VAR 0 12
37990: PUSH
37991: CALL_OW 44
37995: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37996: LD_VAR 0 12
38000: PPUSH
38001: LD_VAR 0 8
38005: PPUSH
38006: LD_INT 0
38008: PPUSH
38009: CALL 40003 0 3
// end ;
38013: GO 37967
38015: POP
38016: POP
// if tigers then
38017: LD_VAR 0 2
38021: IFFALSE 38105
// for i = 1 to tigers do
38023: LD_ADDR_VAR 0 11
38027: PUSH
38028: DOUBLE
38029: LD_INT 1
38031: DEC
38032: ST_TO_ADDR
38033: LD_VAR 0 2
38037: PUSH
38038: FOR_TO
38039: IFFALSE 38103
// begin hc_class = class_tiger ;
38041: LD_ADDR_OWVAR 28
38045: PUSH
38046: LD_INT 14
38048: ST_TO_ADDR
// hc_gallery =  ;
38049: LD_ADDR_OWVAR 33
38053: PUSH
38054: LD_STRING 
38056: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
38057: LD_ADDR_OWVAR 35
38061: PUSH
38062: LD_INT 7
38064: NEG
38065: PPUSH
38066: LD_INT 7
38068: PPUSH
38069: CALL_OW 12
38073: ST_TO_ADDR
// animal := CreateHuman ;
38074: LD_ADDR_VAR 0 12
38078: PUSH
38079: CALL_OW 44
38083: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38084: LD_VAR 0 12
38088: PPUSH
38089: LD_VAR 0 8
38093: PPUSH
38094: LD_INT 0
38096: PPUSH
38097: CALL 40003 0 3
// end ;
38101: GO 38038
38103: POP
38104: POP
// if apemans then
38105: LD_VAR 0 3
38109: IFFALSE 38232
// for i = 1 to apemans do
38111: LD_ADDR_VAR 0 11
38115: PUSH
38116: DOUBLE
38117: LD_INT 1
38119: DEC
38120: ST_TO_ADDR
38121: LD_VAR 0 3
38125: PUSH
38126: FOR_TO
38127: IFFALSE 38230
// begin hc_class = class_apeman ;
38129: LD_ADDR_OWVAR 28
38133: PUSH
38134: LD_INT 12
38136: ST_TO_ADDR
// hc_gallery =  ;
38137: LD_ADDR_OWVAR 33
38141: PUSH
38142: LD_STRING 
38144: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
38145: LD_ADDR_OWVAR 35
38149: PUSH
38150: LD_INT 2
38152: NEG
38153: PPUSH
38154: LD_INT 2
38156: PPUSH
38157: CALL_OW 12
38161: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38162: LD_ADDR_OWVAR 31
38166: PUSH
38167: LD_INT 1
38169: PPUSH
38170: LD_INT 3
38172: PPUSH
38173: CALL_OW 12
38177: PUSH
38178: LD_INT 1
38180: PPUSH
38181: LD_INT 3
38183: PPUSH
38184: CALL_OW 12
38188: PUSH
38189: LD_INT 0
38191: PUSH
38192: LD_INT 0
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: ST_TO_ADDR
// animal := CreateHuman ;
38201: LD_ADDR_VAR 0 12
38205: PUSH
38206: CALL_OW 44
38210: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38211: LD_VAR 0 12
38215: PPUSH
38216: LD_VAR 0 8
38220: PPUSH
38221: LD_INT 0
38223: PPUSH
38224: CALL 40003 0 3
// end ;
38228: GO 38126
38230: POP
38231: POP
// if enchidnas then
38232: LD_VAR 0 4
38236: IFFALSE 38303
// for i = 1 to enchidnas do
38238: LD_ADDR_VAR 0 11
38242: PUSH
38243: DOUBLE
38244: LD_INT 1
38246: DEC
38247: ST_TO_ADDR
38248: LD_VAR 0 4
38252: PUSH
38253: FOR_TO
38254: IFFALSE 38301
// begin hc_class = 13 ;
38256: LD_ADDR_OWVAR 28
38260: PUSH
38261: LD_INT 13
38263: ST_TO_ADDR
// hc_gallery =  ;
38264: LD_ADDR_OWVAR 33
38268: PUSH
38269: LD_STRING 
38271: ST_TO_ADDR
// animal := CreateHuman ;
38272: LD_ADDR_VAR 0 12
38276: PUSH
38277: CALL_OW 44
38281: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38282: LD_VAR 0 12
38286: PPUSH
38287: LD_VAR 0 8
38291: PPUSH
38292: LD_INT 0
38294: PPUSH
38295: CALL 40003 0 3
// end ;
38299: GO 38253
38301: POP
38302: POP
// if fishes then
38303: LD_VAR 0 7
38307: IFFALSE 38374
// for i = 1 to fishes do
38309: LD_ADDR_VAR 0 11
38313: PUSH
38314: DOUBLE
38315: LD_INT 1
38317: DEC
38318: ST_TO_ADDR
38319: LD_VAR 0 7
38323: PUSH
38324: FOR_TO
38325: IFFALSE 38372
// begin hc_class = 20 ;
38327: LD_ADDR_OWVAR 28
38331: PUSH
38332: LD_INT 20
38334: ST_TO_ADDR
// hc_gallery =  ;
38335: LD_ADDR_OWVAR 33
38339: PUSH
38340: LD_STRING 
38342: ST_TO_ADDR
// animal := CreateHuman ;
38343: LD_ADDR_VAR 0 12
38347: PUSH
38348: CALL_OW 44
38352: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
38353: LD_VAR 0 12
38357: PPUSH
38358: LD_VAR 0 9
38362: PPUSH
38363: LD_INT 0
38365: PPUSH
38366: CALL 40003 0 3
// end ;
38370: GO 38324
38372: POP
38373: POP
// end ;
38374: LD_VAR 0 10
38378: RET
// export function WantHeal ( sci , unit ) ; begin
38379: LD_INT 0
38381: PPUSH
// if GetTaskList ( sci ) > 0 then
38382: LD_VAR 0 1
38386: PPUSH
38387: CALL_OW 437
38391: PUSH
38392: LD_INT 0
38394: GREATER
38395: IFFALSE 38465
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38397: LD_VAR 0 1
38401: PPUSH
38402: CALL_OW 437
38406: PUSH
38407: LD_INT 1
38409: ARRAY
38410: PUSH
38411: LD_INT 1
38413: ARRAY
38414: PUSH
38415: LD_STRING l
38417: EQUAL
38418: PUSH
38419: LD_VAR 0 1
38423: PPUSH
38424: CALL_OW 437
38428: PUSH
38429: LD_INT 1
38431: ARRAY
38432: PUSH
38433: LD_INT 4
38435: ARRAY
38436: PUSH
38437: LD_VAR 0 2
38441: EQUAL
38442: AND
38443: IFFALSE 38455
// result := true else
38445: LD_ADDR_VAR 0 3
38449: PUSH
38450: LD_INT 1
38452: ST_TO_ADDR
38453: GO 38463
// result := false ;
38455: LD_ADDR_VAR 0 3
38459: PUSH
38460: LD_INT 0
38462: ST_TO_ADDR
// end else
38463: GO 38473
// result := false ;
38465: LD_ADDR_VAR 0 3
38469: PUSH
38470: LD_INT 0
38472: ST_TO_ADDR
// end ;
38473: LD_VAR 0 3
38477: RET
// export function HealTarget ( sci ) ; begin
38478: LD_INT 0
38480: PPUSH
// if not sci then
38481: LD_VAR 0 1
38485: NOT
38486: IFFALSE 38490
// exit ;
38488: GO 38555
// result := 0 ;
38490: LD_ADDR_VAR 0 2
38494: PUSH
38495: LD_INT 0
38497: ST_TO_ADDR
// if GetTaskList ( sci ) then
38498: LD_VAR 0 1
38502: PPUSH
38503: CALL_OW 437
38507: IFFALSE 38555
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38509: LD_VAR 0 1
38513: PPUSH
38514: CALL_OW 437
38518: PUSH
38519: LD_INT 1
38521: ARRAY
38522: PUSH
38523: LD_INT 1
38525: ARRAY
38526: PUSH
38527: LD_STRING l
38529: EQUAL
38530: IFFALSE 38555
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38532: LD_ADDR_VAR 0 2
38536: PUSH
38537: LD_VAR 0 1
38541: PPUSH
38542: CALL_OW 437
38546: PUSH
38547: LD_INT 1
38549: ARRAY
38550: PUSH
38551: LD_INT 4
38553: ARRAY
38554: ST_TO_ADDR
// end ;
38555: LD_VAR 0 2
38559: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38560: LD_INT 0
38562: PPUSH
38563: PPUSH
38564: PPUSH
38565: PPUSH
// if not base_units then
38566: LD_VAR 0 1
38570: NOT
38571: IFFALSE 38575
// exit ;
38573: GO 38662
// result := false ;
38575: LD_ADDR_VAR 0 2
38579: PUSH
38580: LD_INT 0
38582: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38583: LD_ADDR_VAR 0 5
38587: PUSH
38588: LD_VAR 0 1
38592: PPUSH
38593: LD_INT 21
38595: PUSH
38596: LD_INT 3
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PPUSH
38603: CALL_OW 72
38607: ST_TO_ADDR
// if not tmp then
38608: LD_VAR 0 5
38612: NOT
38613: IFFALSE 38617
// exit ;
38615: GO 38662
// for i in tmp do
38617: LD_ADDR_VAR 0 3
38621: PUSH
38622: LD_VAR 0 5
38626: PUSH
38627: FOR_IN
38628: IFFALSE 38660
// begin result := EnemyInRange ( i , 22 ) ;
38630: LD_ADDR_VAR 0 2
38634: PUSH
38635: LD_VAR 0 3
38639: PPUSH
38640: LD_INT 22
38642: PPUSH
38643: CALL 36249 0 2
38647: ST_TO_ADDR
// if result then
38648: LD_VAR 0 2
38652: IFFALSE 38658
// exit ;
38654: POP
38655: POP
38656: GO 38662
// end ;
38658: GO 38627
38660: POP
38661: POP
// end ;
38662: LD_VAR 0 2
38666: RET
// export function FilterByTag ( units , tag ) ; begin
38667: LD_INT 0
38669: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38670: LD_ADDR_VAR 0 3
38674: PUSH
38675: LD_VAR 0 1
38679: PPUSH
38680: LD_INT 120
38682: PUSH
38683: LD_VAR 0 2
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PPUSH
38692: CALL_OW 72
38696: ST_TO_ADDR
// end ;
38697: LD_VAR 0 3
38701: RET
// export function IsDriver ( un ) ; begin
38702: LD_INT 0
38704: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38705: LD_ADDR_VAR 0 2
38709: PUSH
38710: LD_VAR 0 1
38714: PUSH
38715: LD_INT 55
38717: PUSH
38718: EMPTY
38719: LIST
38720: PPUSH
38721: CALL_OW 69
38725: IN
38726: ST_TO_ADDR
// end ;
38727: LD_VAR 0 2
38731: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38732: LD_INT 0
38734: PPUSH
38735: PPUSH
// list := [ ] ;
38736: LD_ADDR_VAR 0 5
38740: PUSH
38741: EMPTY
38742: ST_TO_ADDR
// case d of 0 :
38743: LD_VAR 0 3
38747: PUSH
38748: LD_INT 0
38750: DOUBLE
38751: EQUAL
38752: IFTRUE 38756
38754: GO 38889
38756: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38757: LD_ADDR_VAR 0 5
38761: PUSH
38762: LD_VAR 0 1
38766: PUSH
38767: LD_INT 4
38769: MINUS
38770: PUSH
38771: LD_VAR 0 2
38775: PUSH
38776: LD_INT 4
38778: MINUS
38779: PUSH
38780: LD_INT 2
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: LIST
38787: PUSH
38788: LD_VAR 0 1
38792: PUSH
38793: LD_INT 3
38795: MINUS
38796: PUSH
38797: LD_VAR 0 2
38801: PUSH
38802: LD_INT 1
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: LIST
38809: PUSH
38810: LD_VAR 0 1
38814: PUSH
38815: LD_INT 4
38817: PLUS
38818: PUSH
38819: LD_VAR 0 2
38823: PUSH
38824: LD_INT 4
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: LIST
38831: PUSH
38832: LD_VAR 0 1
38836: PUSH
38837: LD_INT 3
38839: PLUS
38840: PUSH
38841: LD_VAR 0 2
38845: PUSH
38846: LD_INT 3
38848: PLUS
38849: PUSH
38850: LD_INT 5
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: LIST
38857: PUSH
38858: LD_VAR 0 1
38862: PUSH
38863: LD_VAR 0 2
38867: PUSH
38868: LD_INT 4
38870: PLUS
38871: PUSH
38872: LD_INT 0
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: LIST
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: ST_TO_ADDR
// end ; 1 :
38887: GO 39587
38889: LD_INT 1
38891: DOUBLE
38892: EQUAL
38893: IFTRUE 38897
38895: GO 39030
38897: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38898: LD_ADDR_VAR 0 5
38902: PUSH
38903: LD_VAR 0 1
38907: PUSH
38908: LD_VAR 0 2
38912: PUSH
38913: LD_INT 4
38915: MINUS
38916: PUSH
38917: LD_INT 3
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: LIST
38924: PUSH
38925: LD_VAR 0 1
38929: PUSH
38930: LD_INT 3
38932: MINUS
38933: PUSH
38934: LD_VAR 0 2
38938: PUSH
38939: LD_INT 3
38941: MINUS
38942: PUSH
38943: LD_INT 2
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: LIST
38950: PUSH
38951: LD_VAR 0 1
38955: PUSH
38956: LD_INT 4
38958: MINUS
38959: PUSH
38960: LD_VAR 0 2
38964: PUSH
38965: LD_INT 1
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: LIST
38972: PUSH
38973: LD_VAR 0 1
38977: PUSH
38978: LD_VAR 0 2
38982: PUSH
38983: LD_INT 3
38985: PLUS
38986: PUSH
38987: LD_INT 0
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: LIST
38994: PUSH
38995: LD_VAR 0 1
38999: PUSH
39000: LD_INT 4
39002: PLUS
39003: PUSH
39004: LD_VAR 0 2
39008: PUSH
39009: LD_INT 4
39011: PLUS
39012: PUSH
39013: LD_INT 5
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: LIST
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: LIST
39027: ST_TO_ADDR
// end ; 2 :
39028: GO 39587
39030: LD_INT 2
39032: DOUBLE
39033: EQUAL
39034: IFTRUE 39038
39036: GO 39167
39038: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
39039: LD_ADDR_VAR 0 5
39043: PUSH
39044: LD_VAR 0 1
39048: PUSH
39049: LD_VAR 0 2
39053: PUSH
39054: LD_INT 3
39056: MINUS
39057: PUSH
39058: LD_INT 3
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: LIST
39065: PUSH
39066: LD_VAR 0 1
39070: PUSH
39071: LD_INT 4
39073: PLUS
39074: PUSH
39075: LD_VAR 0 2
39079: PUSH
39080: LD_INT 4
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: LIST
39087: PUSH
39088: LD_VAR 0 1
39092: PUSH
39093: LD_VAR 0 2
39097: PUSH
39098: LD_INT 4
39100: PLUS
39101: PUSH
39102: LD_INT 0
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: LIST
39109: PUSH
39110: LD_VAR 0 1
39114: PUSH
39115: LD_INT 3
39117: MINUS
39118: PUSH
39119: LD_VAR 0 2
39123: PUSH
39124: LD_INT 1
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: LIST
39131: PUSH
39132: LD_VAR 0 1
39136: PUSH
39137: LD_INT 4
39139: MINUS
39140: PUSH
39141: LD_VAR 0 2
39145: PUSH
39146: LD_INT 4
39148: MINUS
39149: PUSH
39150: LD_INT 2
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: LIST
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: ST_TO_ADDR
// end ; 3 :
39165: GO 39587
39167: LD_INT 3
39169: DOUBLE
39170: EQUAL
39171: IFTRUE 39175
39173: GO 39308
39175: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39176: LD_ADDR_VAR 0 5
39180: PUSH
39181: LD_VAR 0 1
39185: PUSH
39186: LD_INT 3
39188: PLUS
39189: PUSH
39190: LD_VAR 0 2
39194: PUSH
39195: LD_INT 4
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: LIST
39202: PUSH
39203: LD_VAR 0 1
39207: PUSH
39208: LD_INT 4
39210: PLUS
39211: PUSH
39212: LD_VAR 0 2
39216: PUSH
39217: LD_INT 4
39219: PLUS
39220: PUSH
39221: LD_INT 5
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: LIST
39228: PUSH
39229: LD_VAR 0 1
39233: PUSH
39234: LD_INT 4
39236: MINUS
39237: PUSH
39238: LD_VAR 0 2
39242: PUSH
39243: LD_INT 1
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: LIST
39250: PUSH
39251: LD_VAR 0 1
39255: PUSH
39256: LD_VAR 0 2
39260: PUSH
39261: LD_INT 4
39263: MINUS
39264: PUSH
39265: LD_INT 3
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: LIST
39272: PUSH
39273: LD_VAR 0 1
39277: PUSH
39278: LD_INT 3
39280: MINUS
39281: PUSH
39282: LD_VAR 0 2
39286: PUSH
39287: LD_INT 3
39289: MINUS
39290: PUSH
39291: LD_INT 2
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: LIST
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: ST_TO_ADDR
// end ; 4 :
39306: GO 39587
39308: LD_INT 4
39310: DOUBLE
39311: EQUAL
39312: IFTRUE 39316
39314: GO 39449
39316: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
39317: LD_ADDR_VAR 0 5
39321: PUSH
39322: LD_VAR 0 1
39326: PUSH
39327: LD_VAR 0 2
39331: PUSH
39332: LD_INT 4
39334: PLUS
39335: PUSH
39336: LD_INT 0
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: LIST
39343: PUSH
39344: LD_VAR 0 1
39348: PUSH
39349: LD_INT 3
39351: PLUS
39352: PUSH
39353: LD_VAR 0 2
39357: PUSH
39358: LD_INT 3
39360: PLUS
39361: PUSH
39362: LD_INT 5
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: LIST
39369: PUSH
39370: LD_VAR 0 1
39374: PUSH
39375: LD_INT 4
39377: PLUS
39378: PUSH
39379: LD_VAR 0 2
39383: PUSH
39384: LD_INT 4
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: LIST
39391: PUSH
39392: LD_VAR 0 1
39396: PUSH
39397: LD_VAR 0 2
39401: PUSH
39402: LD_INT 3
39404: MINUS
39405: PUSH
39406: LD_INT 3
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: LIST
39413: PUSH
39414: LD_VAR 0 1
39418: PUSH
39419: LD_INT 4
39421: MINUS
39422: PUSH
39423: LD_VAR 0 2
39427: PUSH
39428: LD_INT 4
39430: MINUS
39431: PUSH
39432: LD_INT 2
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: LIST
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: LIST
39444: LIST
39445: LIST
39446: ST_TO_ADDR
// end ; 5 :
39447: GO 39587
39449: LD_INT 5
39451: DOUBLE
39452: EQUAL
39453: IFTRUE 39457
39455: GO 39586
39457: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39458: LD_ADDR_VAR 0 5
39462: PUSH
39463: LD_VAR 0 1
39467: PUSH
39468: LD_INT 4
39470: MINUS
39471: PUSH
39472: LD_VAR 0 2
39476: PUSH
39477: LD_INT 1
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: LIST
39484: PUSH
39485: LD_VAR 0 1
39489: PUSH
39490: LD_VAR 0 2
39494: PUSH
39495: LD_INT 4
39497: MINUS
39498: PUSH
39499: LD_INT 3
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: LIST
39506: PUSH
39507: LD_VAR 0 1
39511: PUSH
39512: LD_INT 4
39514: PLUS
39515: PUSH
39516: LD_VAR 0 2
39520: PUSH
39521: LD_INT 4
39523: PLUS
39524: PUSH
39525: LD_INT 5
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: LIST
39532: PUSH
39533: LD_VAR 0 1
39537: PUSH
39538: LD_INT 3
39540: PLUS
39541: PUSH
39542: LD_VAR 0 2
39546: PUSH
39547: LD_INT 4
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: LIST
39554: PUSH
39555: LD_VAR 0 1
39559: PUSH
39560: LD_VAR 0 2
39564: PUSH
39565: LD_INT 3
39567: PLUS
39568: PUSH
39569: LD_INT 0
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: LIST
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: ST_TO_ADDR
// end ; end ;
39584: GO 39587
39586: POP
// result := list ;
39587: LD_ADDR_VAR 0 4
39591: PUSH
39592: LD_VAR 0 5
39596: ST_TO_ADDR
// end ;
39597: LD_VAR 0 4
39601: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39602: LD_INT 0
39604: PPUSH
39605: PPUSH
39606: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39607: LD_VAR 0 1
39611: NOT
39612: PUSH
39613: LD_VAR 0 2
39617: PUSH
39618: LD_INT 1
39620: PUSH
39621: LD_INT 2
39623: PUSH
39624: LD_INT 3
39626: PUSH
39627: LD_INT 4
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: LIST
39634: LIST
39635: IN
39636: NOT
39637: OR
39638: IFFALSE 39642
// exit ;
39640: GO 39725
// tmp := [ ] ;
39642: LD_ADDR_VAR 0 5
39646: PUSH
39647: EMPTY
39648: ST_TO_ADDR
// for i in units do
39649: LD_ADDR_VAR 0 4
39653: PUSH
39654: LD_VAR 0 1
39658: PUSH
39659: FOR_IN
39660: IFFALSE 39694
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39662: LD_ADDR_VAR 0 5
39666: PUSH
39667: LD_VAR 0 5
39671: PPUSH
39672: LD_VAR 0 4
39676: PPUSH
39677: LD_VAR 0 2
39681: PPUSH
39682: CALL_OW 259
39686: PPUSH
39687: CALL 41085 0 2
39691: ST_TO_ADDR
39692: GO 39659
39694: POP
39695: POP
// if not tmp then
39696: LD_VAR 0 5
39700: NOT
39701: IFFALSE 39705
// exit ;
39703: GO 39725
// result := SortListByListDesc ( units , tmp ) ;
39705: LD_ADDR_VAR 0 3
39709: PUSH
39710: LD_VAR 0 1
39714: PPUSH
39715: LD_VAR 0 5
39719: PPUSH
39720: CALL_OW 77
39724: ST_TO_ADDR
// end ;
39725: LD_VAR 0 3
39729: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39730: LD_INT 0
39732: PPUSH
39733: PPUSH
39734: PPUSH
// result := false ;
39735: LD_ADDR_VAR 0 3
39739: PUSH
39740: LD_INT 0
39742: ST_TO_ADDR
// if not building then
39743: LD_VAR 0 2
39747: NOT
39748: IFFALSE 39752
// exit ;
39750: GO 39890
// x := GetX ( building ) ;
39752: LD_ADDR_VAR 0 4
39756: PUSH
39757: LD_VAR 0 2
39761: PPUSH
39762: CALL_OW 250
39766: ST_TO_ADDR
// y := GetY ( building ) ;
39767: LD_ADDR_VAR 0 5
39771: PUSH
39772: LD_VAR 0 2
39776: PPUSH
39777: CALL_OW 251
39781: ST_TO_ADDR
// if not x or not y then
39782: LD_VAR 0 4
39786: NOT
39787: PUSH
39788: LD_VAR 0 5
39792: NOT
39793: OR
39794: IFFALSE 39798
// exit ;
39796: GO 39890
// if GetTaskList ( unit ) then
39798: LD_VAR 0 1
39802: PPUSH
39803: CALL_OW 437
39807: IFFALSE 39890
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39809: LD_STRING e
39811: PUSH
39812: LD_VAR 0 1
39816: PPUSH
39817: CALL_OW 437
39821: PUSH
39822: LD_INT 1
39824: ARRAY
39825: PUSH
39826: LD_INT 1
39828: ARRAY
39829: EQUAL
39830: PUSH
39831: LD_VAR 0 4
39835: PUSH
39836: LD_VAR 0 1
39840: PPUSH
39841: CALL_OW 437
39845: PUSH
39846: LD_INT 1
39848: ARRAY
39849: PUSH
39850: LD_INT 2
39852: ARRAY
39853: EQUAL
39854: AND
39855: PUSH
39856: LD_VAR 0 5
39860: PUSH
39861: LD_VAR 0 1
39865: PPUSH
39866: CALL_OW 437
39870: PUSH
39871: LD_INT 1
39873: ARRAY
39874: PUSH
39875: LD_INT 3
39877: ARRAY
39878: EQUAL
39879: AND
39880: IFFALSE 39890
// result := true end ;
39882: LD_ADDR_VAR 0 3
39886: PUSH
39887: LD_INT 1
39889: ST_TO_ADDR
// end ;
39890: LD_VAR 0 3
39894: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39895: LD_INT 0
39897: PPUSH
// result := false ;
39898: LD_ADDR_VAR 0 4
39902: PUSH
39903: LD_INT 0
39905: ST_TO_ADDR
// if GetTaskList ( unit ) then
39906: LD_VAR 0 1
39910: PPUSH
39911: CALL_OW 437
39915: IFFALSE 39998
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39917: LD_STRING M
39919: PUSH
39920: LD_VAR 0 1
39924: PPUSH
39925: CALL_OW 437
39929: PUSH
39930: LD_INT 1
39932: ARRAY
39933: PUSH
39934: LD_INT 1
39936: ARRAY
39937: EQUAL
39938: PUSH
39939: LD_VAR 0 2
39943: PUSH
39944: LD_VAR 0 1
39948: PPUSH
39949: CALL_OW 437
39953: PUSH
39954: LD_INT 1
39956: ARRAY
39957: PUSH
39958: LD_INT 2
39960: ARRAY
39961: EQUAL
39962: AND
39963: PUSH
39964: LD_VAR 0 3
39968: PUSH
39969: LD_VAR 0 1
39973: PPUSH
39974: CALL_OW 437
39978: PUSH
39979: LD_INT 1
39981: ARRAY
39982: PUSH
39983: LD_INT 3
39985: ARRAY
39986: EQUAL
39987: AND
39988: IFFALSE 39998
// result := true ;
39990: LD_ADDR_VAR 0 4
39994: PUSH
39995: LD_INT 1
39997: ST_TO_ADDR
// end ; end ;
39998: LD_VAR 0 4
40002: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
40003: LD_INT 0
40005: PPUSH
40006: PPUSH
40007: PPUSH
40008: PPUSH
// if not unit or not area then
40009: LD_VAR 0 1
40013: NOT
40014: PUSH
40015: LD_VAR 0 2
40019: NOT
40020: OR
40021: IFFALSE 40025
// exit ;
40023: GO 40188
// tmp := AreaToList ( area , i ) ;
40025: LD_ADDR_VAR 0 6
40029: PUSH
40030: LD_VAR 0 2
40034: PPUSH
40035: LD_VAR 0 5
40039: PPUSH
40040: CALL_OW 517
40044: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
40045: LD_ADDR_VAR 0 5
40049: PUSH
40050: DOUBLE
40051: LD_INT 1
40053: DEC
40054: ST_TO_ADDR
40055: LD_VAR 0 6
40059: PUSH
40060: LD_INT 1
40062: ARRAY
40063: PUSH
40064: FOR_TO
40065: IFFALSE 40186
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
40067: LD_ADDR_VAR 0 7
40071: PUSH
40072: LD_VAR 0 6
40076: PUSH
40077: LD_INT 1
40079: ARRAY
40080: PUSH
40081: LD_VAR 0 5
40085: ARRAY
40086: PUSH
40087: LD_VAR 0 6
40091: PUSH
40092: LD_INT 2
40094: ARRAY
40095: PUSH
40096: LD_VAR 0 5
40100: ARRAY
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
40106: LD_INT 92
40108: PUSH
40109: LD_VAR 0 7
40113: PUSH
40114: LD_INT 1
40116: ARRAY
40117: PUSH
40118: LD_VAR 0 7
40122: PUSH
40123: LD_INT 2
40125: ARRAY
40126: PUSH
40127: LD_INT 3
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: PPUSH
40136: CALL_OW 69
40140: PUSH
40141: LD_INT 0
40143: EQUAL
40144: IFFALSE 40184
// begin PlaceUnitArea ( unit , area , mode ) ;
40146: LD_VAR 0 1
40150: PPUSH
40151: LD_VAR 0 2
40155: PPUSH
40156: LD_VAR 0 3
40160: PPUSH
40161: CALL_OW 49
// result := IsPlaced ( unit ) ;
40165: LD_ADDR_VAR 0 4
40169: PUSH
40170: LD_VAR 0 1
40174: PPUSH
40175: CALL_OW 305
40179: ST_TO_ADDR
// exit ;
40180: POP
40181: POP
40182: GO 40188
// end ; end ;
40184: GO 40064
40186: POP
40187: POP
// end ;
40188: LD_VAR 0 4
40192: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40193: LD_INT 0
40195: PPUSH
40196: PPUSH
40197: PPUSH
// if not side or side > 8 then
40198: LD_VAR 0 1
40202: NOT
40203: PUSH
40204: LD_VAR 0 1
40208: PUSH
40209: LD_INT 8
40211: GREATER
40212: OR
40213: IFFALSE 40217
// exit ;
40215: GO 40404
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40217: LD_ADDR_VAR 0 4
40221: PUSH
40222: LD_INT 22
40224: PUSH
40225: LD_VAR 0 1
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 21
40236: PUSH
40237: LD_INT 3
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PPUSH
40248: CALL_OW 69
40252: ST_TO_ADDR
// if not tmp then
40253: LD_VAR 0 4
40257: NOT
40258: IFFALSE 40262
// exit ;
40260: GO 40404
// enable_addtolog := true ;
40262: LD_ADDR_OWVAR 81
40266: PUSH
40267: LD_INT 1
40269: ST_TO_ADDR
// AddToLog ( [ ) ;
40270: LD_STRING [
40272: PPUSH
40273: CALL_OW 561
// for i in tmp do
40277: LD_ADDR_VAR 0 3
40281: PUSH
40282: LD_VAR 0 4
40286: PUSH
40287: FOR_IN
40288: IFFALSE 40395
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
40290: LD_STRING [
40292: PUSH
40293: LD_VAR 0 3
40297: PPUSH
40298: CALL_OW 266
40302: STR
40303: PUSH
40304: LD_STRING , 
40306: STR
40307: PUSH
40308: LD_VAR 0 3
40312: PPUSH
40313: CALL_OW 250
40317: STR
40318: PUSH
40319: LD_STRING , 
40321: STR
40322: PUSH
40323: LD_VAR 0 3
40327: PPUSH
40328: CALL_OW 251
40332: STR
40333: PUSH
40334: LD_STRING , 
40336: STR
40337: PUSH
40338: LD_VAR 0 3
40342: PPUSH
40343: CALL_OW 254
40347: STR
40348: PUSH
40349: LD_STRING , 
40351: STR
40352: PUSH
40353: LD_VAR 0 3
40357: PPUSH
40358: LD_INT 1
40360: PPUSH
40361: CALL_OW 268
40365: STR
40366: PUSH
40367: LD_STRING , 
40369: STR
40370: PUSH
40371: LD_VAR 0 3
40375: PPUSH
40376: LD_INT 2
40378: PPUSH
40379: CALL_OW 268
40383: STR
40384: PUSH
40385: LD_STRING ],
40387: STR
40388: PPUSH
40389: CALL_OW 561
// end ;
40393: GO 40287
40395: POP
40396: POP
// AddToLog ( ]; ) ;
40397: LD_STRING ];
40399: PPUSH
40400: CALL_OW 561
// end ;
40404: LD_VAR 0 2
40408: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40409: LD_INT 0
40411: PPUSH
40412: PPUSH
40413: PPUSH
40414: PPUSH
40415: PPUSH
// if not area or not rate or not max then
40416: LD_VAR 0 1
40420: NOT
40421: PUSH
40422: LD_VAR 0 2
40426: NOT
40427: OR
40428: PUSH
40429: LD_VAR 0 4
40433: NOT
40434: OR
40435: IFFALSE 40439
// exit ;
40437: GO 40628
// while 1 do
40439: LD_INT 1
40441: IFFALSE 40628
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40443: LD_ADDR_VAR 0 9
40447: PUSH
40448: LD_VAR 0 1
40452: PPUSH
40453: LD_INT 1
40455: PPUSH
40456: CALL_OW 287
40460: PUSH
40461: LD_INT 10
40463: MUL
40464: ST_TO_ADDR
// r := rate / 10 ;
40465: LD_ADDR_VAR 0 7
40469: PUSH
40470: LD_VAR 0 2
40474: PUSH
40475: LD_INT 10
40477: DIVREAL
40478: ST_TO_ADDR
// time := 1 1$00 ;
40479: LD_ADDR_VAR 0 8
40483: PUSH
40484: LD_INT 2100
40486: ST_TO_ADDR
// if amount < min then
40487: LD_VAR 0 9
40491: PUSH
40492: LD_VAR 0 3
40496: LESS
40497: IFFALSE 40515
// r := r * 2 else
40499: LD_ADDR_VAR 0 7
40503: PUSH
40504: LD_VAR 0 7
40508: PUSH
40509: LD_INT 2
40511: MUL
40512: ST_TO_ADDR
40513: GO 40541
// if amount > max then
40515: LD_VAR 0 9
40519: PUSH
40520: LD_VAR 0 4
40524: GREATER
40525: IFFALSE 40541
// r := r / 2 ;
40527: LD_ADDR_VAR 0 7
40531: PUSH
40532: LD_VAR 0 7
40536: PUSH
40537: LD_INT 2
40539: DIVREAL
40540: ST_TO_ADDR
// time := time / r ;
40541: LD_ADDR_VAR 0 8
40545: PUSH
40546: LD_VAR 0 8
40550: PUSH
40551: LD_VAR 0 7
40555: DIVREAL
40556: ST_TO_ADDR
// if time < 0 then
40557: LD_VAR 0 8
40561: PUSH
40562: LD_INT 0
40564: LESS
40565: IFFALSE 40582
// time := time * - 1 ;
40567: LD_ADDR_VAR 0 8
40571: PUSH
40572: LD_VAR 0 8
40576: PUSH
40577: LD_INT 1
40579: NEG
40580: MUL
40581: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40582: LD_VAR 0 8
40586: PUSH
40587: LD_INT 35
40589: PPUSH
40590: LD_INT 875
40592: PPUSH
40593: CALL_OW 12
40597: PLUS
40598: PPUSH
40599: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40603: LD_INT 1
40605: PPUSH
40606: LD_INT 5
40608: PPUSH
40609: CALL_OW 12
40613: PPUSH
40614: LD_VAR 0 1
40618: PPUSH
40619: LD_INT 1
40621: PPUSH
40622: CALL_OW 55
// end ;
40626: GO 40439
// end ;
40628: LD_VAR 0 5
40632: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40633: LD_INT 0
40635: PPUSH
40636: PPUSH
40637: PPUSH
40638: PPUSH
40639: PPUSH
40640: PPUSH
40641: PPUSH
40642: PPUSH
// if not turrets or not factories then
40643: LD_VAR 0 1
40647: NOT
40648: PUSH
40649: LD_VAR 0 2
40653: NOT
40654: OR
40655: IFFALSE 40659
// exit ;
40657: GO 40966
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40659: LD_ADDR_VAR 0 10
40663: PUSH
40664: LD_INT 5
40666: PUSH
40667: LD_INT 6
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 2
40676: PUSH
40677: LD_INT 4
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 3
40686: PUSH
40687: LD_INT 5
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 24
40701: PUSH
40702: LD_INT 25
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 23
40711: PUSH
40712: LD_INT 27
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 42
40725: PUSH
40726: LD_INT 43
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 44
40735: PUSH
40736: LD_INT 46
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 45
40745: PUSH
40746: LD_INT 47
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: LIST
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: LIST
40762: ST_TO_ADDR
// result := [ ] ;
40763: LD_ADDR_VAR 0 3
40767: PUSH
40768: EMPTY
40769: ST_TO_ADDR
// for i in turrets do
40770: LD_ADDR_VAR 0 4
40774: PUSH
40775: LD_VAR 0 1
40779: PUSH
40780: FOR_IN
40781: IFFALSE 40964
// begin nat := GetNation ( i ) ;
40783: LD_ADDR_VAR 0 7
40787: PUSH
40788: LD_VAR 0 4
40792: PPUSH
40793: CALL_OW 248
40797: ST_TO_ADDR
// weapon := 0 ;
40798: LD_ADDR_VAR 0 8
40802: PUSH
40803: LD_INT 0
40805: ST_TO_ADDR
// if not nat then
40806: LD_VAR 0 7
40810: NOT
40811: IFFALSE 40815
// continue ;
40813: GO 40780
// for j in list [ nat ] do
40815: LD_ADDR_VAR 0 5
40819: PUSH
40820: LD_VAR 0 10
40824: PUSH
40825: LD_VAR 0 7
40829: ARRAY
40830: PUSH
40831: FOR_IN
40832: IFFALSE 40873
// if GetBWeapon ( i ) = j [ 1 ] then
40834: LD_VAR 0 4
40838: PPUSH
40839: CALL_OW 269
40843: PUSH
40844: LD_VAR 0 5
40848: PUSH
40849: LD_INT 1
40851: ARRAY
40852: EQUAL
40853: IFFALSE 40871
// begin weapon := j [ 2 ] ;
40855: LD_ADDR_VAR 0 8
40859: PUSH
40860: LD_VAR 0 5
40864: PUSH
40865: LD_INT 2
40867: ARRAY
40868: ST_TO_ADDR
// break ;
40869: GO 40873
// end ;
40871: GO 40831
40873: POP
40874: POP
// if not weapon then
40875: LD_VAR 0 8
40879: NOT
40880: IFFALSE 40884
// continue ;
40882: GO 40780
// for k in factories do
40884: LD_ADDR_VAR 0 6
40888: PUSH
40889: LD_VAR 0 2
40893: PUSH
40894: FOR_IN
40895: IFFALSE 40960
// begin weapons := AvailableWeaponList ( k ) ;
40897: LD_ADDR_VAR 0 9
40901: PUSH
40902: LD_VAR 0 6
40906: PPUSH
40907: CALL_OW 478
40911: ST_TO_ADDR
// if not weapons then
40912: LD_VAR 0 9
40916: NOT
40917: IFFALSE 40921
// continue ;
40919: GO 40894
// if weapon in weapons then
40921: LD_VAR 0 8
40925: PUSH
40926: LD_VAR 0 9
40930: IN
40931: IFFALSE 40958
// begin result := [ i , weapon ] ;
40933: LD_ADDR_VAR 0 3
40937: PUSH
40938: LD_VAR 0 4
40942: PUSH
40943: LD_VAR 0 8
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: ST_TO_ADDR
// exit ;
40952: POP
40953: POP
40954: POP
40955: POP
40956: GO 40966
// end ; end ;
40958: GO 40894
40960: POP
40961: POP
// end ;
40962: GO 40780
40964: POP
40965: POP
// end ;
40966: LD_VAR 0 3
40970: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40971: LD_INT 0
40973: PPUSH
// if not side or side > 8 then
40974: LD_VAR 0 3
40978: NOT
40979: PUSH
40980: LD_VAR 0 3
40984: PUSH
40985: LD_INT 8
40987: GREATER
40988: OR
40989: IFFALSE 40993
// exit ;
40991: GO 41052
// if not range then
40993: LD_VAR 0 4
40997: NOT
40998: IFFALSE 41009
// range := - 12 ;
41000: LD_ADDR_VAR 0 4
41004: PUSH
41005: LD_INT 12
41007: NEG
41008: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
41009: LD_VAR 0 1
41013: PPUSH
41014: LD_VAR 0 2
41018: PPUSH
41019: LD_VAR 0 3
41023: PPUSH
41024: LD_VAR 0 4
41028: PPUSH
41029: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
41033: LD_VAR 0 1
41037: PPUSH
41038: LD_VAR 0 2
41042: PPUSH
41043: LD_VAR 0 3
41047: PPUSH
41048: CALL_OW 331
// end ;
41052: LD_VAR 0 5
41056: RET
// export function Video ( mode ) ; begin
41057: LD_INT 0
41059: PPUSH
// ingame_video = mode ;
41060: LD_ADDR_OWVAR 52
41064: PUSH
41065: LD_VAR 0 1
41069: ST_TO_ADDR
// interface_hidden = mode ;
41070: LD_ADDR_OWVAR 54
41074: PUSH
41075: LD_VAR 0 1
41079: ST_TO_ADDR
// end ;
41080: LD_VAR 0 2
41084: RET
// export function Join ( array , element ) ; begin
41085: LD_INT 0
41087: PPUSH
// result := Replace ( array , array + 1 , element ) ;
41088: LD_ADDR_VAR 0 3
41092: PUSH
41093: LD_VAR 0 1
41097: PPUSH
41098: LD_VAR 0 1
41102: PUSH
41103: LD_INT 1
41105: PLUS
41106: PPUSH
41107: LD_VAR 0 2
41111: PPUSH
41112: CALL_OW 1
41116: ST_TO_ADDR
// end ;
41117: LD_VAR 0 3
41121: RET
// export function JoinUnion ( array , element ) ; begin
41122: LD_INT 0
41124: PPUSH
// result := array union element ;
41125: LD_ADDR_VAR 0 3
41129: PUSH
41130: LD_VAR 0 1
41134: PUSH
41135: LD_VAR 0 2
41139: UNION
41140: ST_TO_ADDR
// end ;
41141: LD_VAR 0 3
41145: RET
// export function GetBehemoths ( side ) ; begin
41146: LD_INT 0
41148: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
41149: LD_ADDR_VAR 0 2
41153: PUSH
41154: LD_INT 22
41156: PUSH
41157: LD_VAR 0 1
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 31
41168: PUSH
41169: LD_INT 25
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PPUSH
41180: CALL_OW 69
41184: ST_TO_ADDR
// end ;
41185: LD_VAR 0 2
41189: RET
// export function Shuffle ( array ) ; var i , index ; begin
41190: LD_INT 0
41192: PPUSH
41193: PPUSH
41194: PPUSH
// result := [ ] ;
41195: LD_ADDR_VAR 0 2
41199: PUSH
41200: EMPTY
41201: ST_TO_ADDR
// if not array then
41202: LD_VAR 0 1
41206: NOT
41207: IFFALSE 41211
// exit ;
41209: GO 41310
// Randomize ;
41211: CALL_OW 10
// for i = array downto 1 do
41215: LD_ADDR_VAR 0 3
41219: PUSH
41220: DOUBLE
41221: LD_VAR 0 1
41225: INC
41226: ST_TO_ADDR
41227: LD_INT 1
41229: PUSH
41230: FOR_DOWNTO
41231: IFFALSE 41308
// begin index := rand ( 1 , array ) ;
41233: LD_ADDR_VAR 0 4
41237: PUSH
41238: LD_INT 1
41240: PPUSH
41241: LD_VAR 0 1
41245: PPUSH
41246: CALL_OW 12
41250: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41251: LD_ADDR_VAR 0 2
41255: PUSH
41256: LD_VAR 0 2
41260: PPUSH
41261: LD_VAR 0 2
41265: PUSH
41266: LD_INT 1
41268: PLUS
41269: PPUSH
41270: LD_VAR 0 1
41274: PUSH
41275: LD_VAR 0 4
41279: ARRAY
41280: PPUSH
41281: CALL_OW 2
41285: ST_TO_ADDR
// array := Delete ( array , index ) ;
41286: LD_ADDR_VAR 0 1
41290: PUSH
41291: LD_VAR 0 1
41295: PPUSH
41296: LD_VAR 0 4
41300: PPUSH
41301: CALL_OW 3
41305: ST_TO_ADDR
// end ;
41306: GO 41230
41308: POP
41309: POP
// end ;
41310: LD_VAR 0 2
41314: RET
// export function GetBaseMaterials ( base ) ; begin
41315: LD_INT 0
41317: PPUSH
// result := [ 0 , 0 , 0 ] ;
41318: LD_ADDR_VAR 0 2
41322: PUSH
41323: LD_INT 0
41325: PUSH
41326: LD_INT 0
41328: PUSH
41329: LD_INT 0
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: LIST
41336: ST_TO_ADDR
// if not base then
41337: LD_VAR 0 1
41341: NOT
41342: IFFALSE 41346
// exit ;
41344: GO 41395
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
41346: LD_ADDR_VAR 0 2
41350: PUSH
41351: LD_VAR 0 1
41355: PPUSH
41356: LD_INT 1
41358: PPUSH
41359: CALL_OW 275
41363: PUSH
41364: LD_VAR 0 1
41368: PPUSH
41369: LD_INT 2
41371: PPUSH
41372: CALL_OW 275
41376: PUSH
41377: LD_VAR 0 1
41381: PPUSH
41382: LD_INT 3
41384: PPUSH
41385: CALL_OW 275
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: LIST
41394: ST_TO_ADDR
// end ;
41395: LD_VAR 0 2
41399: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41400: LD_INT 0
41402: PPUSH
41403: PPUSH
// result := array ;
41404: LD_ADDR_VAR 0 3
41408: PUSH
41409: LD_VAR 0 1
41413: ST_TO_ADDR
// if size >= result then
41414: LD_VAR 0 2
41418: PUSH
41419: LD_VAR 0 3
41423: GREATEREQUAL
41424: IFFALSE 41428
// exit ;
41426: GO 41478
// if size then
41428: LD_VAR 0 2
41432: IFFALSE 41478
// for i := array downto size do
41434: LD_ADDR_VAR 0 4
41438: PUSH
41439: DOUBLE
41440: LD_VAR 0 1
41444: INC
41445: ST_TO_ADDR
41446: LD_VAR 0 2
41450: PUSH
41451: FOR_DOWNTO
41452: IFFALSE 41476
// result := Delete ( result , result ) ;
41454: LD_ADDR_VAR 0 3
41458: PUSH
41459: LD_VAR 0 3
41463: PPUSH
41464: LD_VAR 0 3
41468: PPUSH
41469: CALL_OW 3
41473: ST_TO_ADDR
41474: GO 41451
41476: POP
41477: POP
// end ;
41478: LD_VAR 0 3
41482: RET
// export function ComExit ( unit ) ; var tmp ; begin
41483: LD_INT 0
41485: PPUSH
41486: PPUSH
// if not IsInUnit ( unit ) then
41487: LD_VAR 0 1
41491: PPUSH
41492: CALL_OW 310
41496: NOT
41497: IFFALSE 41501
// exit ;
41499: GO 41561
// tmp := IsInUnit ( unit ) ;
41501: LD_ADDR_VAR 0 3
41505: PUSH
41506: LD_VAR 0 1
41510: PPUSH
41511: CALL_OW 310
41515: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41516: LD_VAR 0 3
41520: PPUSH
41521: CALL_OW 247
41525: PUSH
41526: LD_INT 2
41528: EQUAL
41529: IFFALSE 41542
// ComExitVehicle ( unit ) else
41531: LD_VAR 0 1
41535: PPUSH
41536: CALL_OW 121
41540: GO 41551
// ComExitBuilding ( unit ) ;
41542: LD_VAR 0 1
41546: PPUSH
41547: CALL_OW 122
// result := tmp ;
41551: LD_ADDR_VAR 0 2
41555: PUSH
41556: LD_VAR 0 3
41560: ST_TO_ADDR
// end ;
41561: LD_VAR 0 2
41565: RET
// export function ComExitAll ( units ) ; var i ; begin
41566: LD_INT 0
41568: PPUSH
41569: PPUSH
// if not units then
41570: LD_VAR 0 1
41574: NOT
41575: IFFALSE 41579
// exit ;
41577: GO 41605
// for i in units do
41579: LD_ADDR_VAR 0 3
41583: PUSH
41584: LD_VAR 0 1
41588: PUSH
41589: FOR_IN
41590: IFFALSE 41603
// ComExit ( i ) ;
41592: LD_VAR 0 3
41596: PPUSH
41597: CALL 41483 0 1
41601: GO 41589
41603: POP
41604: POP
// end ;
41605: LD_VAR 0 2
41609: RET
// export function ResetHc ; begin
41610: LD_INT 0
41612: PPUSH
// InitHc ;
41613: CALL_OW 19
// hc_importance := 0 ;
41617: LD_ADDR_OWVAR 32
41621: PUSH
41622: LD_INT 0
41624: ST_TO_ADDR
// end ;
41625: LD_VAR 0 1
41629: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41630: LD_INT 0
41632: PPUSH
41633: PPUSH
41634: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41635: LD_ADDR_VAR 0 6
41639: PUSH
41640: LD_VAR 0 1
41644: PUSH
41645: LD_VAR 0 3
41649: PLUS
41650: PUSH
41651: LD_INT 2
41653: DIV
41654: ST_TO_ADDR
// if _x < 0 then
41655: LD_VAR 0 6
41659: PUSH
41660: LD_INT 0
41662: LESS
41663: IFFALSE 41680
// _x := _x * - 1 ;
41665: LD_ADDR_VAR 0 6
41669: PUSH
41670: LD_VAR 0 6
41674: PUSH
41675: LD_INT 1
41677: NEG
41678: MUL
41679: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41680: LD_ADDR_VAR 0 7
41684: PUSH
41685: LD_VAR 0 2
41689: PUSH
41690: LD_VAR 0 4
41694: PLUS
41695: PUSH
41696: LD_INT 2
41698: DIV
41699: ST_TO_ADDR
// if _y < 0 then
41700: LD_VAR 0 7
41704: PUSH
41705: LD_INT 0
41707: LESS
41708: IFFALSE 41725
// _y := _y * - 1 ;
41710: LD_ADDR_VAR 0 7
41714: PUSH
41715: LD_VAR 0 7
41719: PUSH
41720: LD_INT 1
41722: NEG
41723: MUL
41724: ST_TO_ADDR
// result := [ _x , _y ] ;
41725: LD_ADDR_VAR 0 5
41729: PUSH
41730: LD_VAR 0 6
41734: PUSH
41735: LD_VAR 0 7
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: ST_TO_ADDR
// end ;
41744: LD_VAR 0 5
41748: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41749: LD_INT 0
41751: PPUSH
41752: PPUSH
41753: PPUSH
41754: PPUSH
// task := GetTaskList ( unit ) ;
41755: LD_ADDR_VAR 0 7
41759: PUSH
41760: LD_VAR 0 1
41764: PPUSH
41765: CALL_OW 437
41769: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41770: LD_VAR 0 7
41774: NOT
41775: PUSH
41776: LD_VAR 0 1
41780: PPUSH
41781: LD_VAR 0 2
41785: PPUSH
41786: CALL_OW 308
41790: NOT
41791: AND
41792: IFFALSE 41796
// exit ;
41794: GO 41914
// if IsInArea ( unit , area ) then
41796: LD_VAR 0 1
41800: PPUSH
41801: LD_VAR 0 2
41805: PPUSH
41806: CALL_OW 308
41810: IFFALSE 41828
// begin ComMoveToArea ( unit , goAway ) ;
41812: LD_VAR 0 1
41816: PPUSH
41817: LD_VAR 0 3
41821: PPUSH
41822: CALL_OW 113
// exit ;
41826: GO 41914
// end ; if task [ 1 ] [ 1 ] <> M then
41828: LD_VAR 0 7
41832: PUSH
41833: LD_INT 1
41835: ARRAY
41836: PUSH
41837: LD_INT 1
41839: ARRAY
41840: PUSH
41841: LD_STRING M
41843: NONEQUAL
41844: IFFALSE 41848
// exit ;
41846: GO 41914
// x := task [ 1 ] [ 2 ] ;
41848: LD_ADDR_VAR 0 5
41852: PUSH
41853: LD_VAR 0 7
41857: PUSH
41858: LD_INT 1
41860: ARRAY
41861: PUSH
41862: LD_INT 2
41864: ARRAY
41865: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41866: LD_ADDR_VAR 0 6
41870: PUSH
41871: LD_VAR 0 7
41875: PUSH
41876: LD_INT 1
41878: ARRAY
41879: PUSH
41880: LD_INT 3
41882: ARRAY
41883: ST_TO_ADDR
// if InArea ( x , y , area ) then
41884: LD_VAR 0 5
41888: PPUSH
41889: LD_VAR 0 6
41893: PPUSH
41894: LD_VAR 0 2
41898: PPUSH
41899: CALL_OW 309
41903: IFFALSE 41914
// ComStop ( unit ) ;
41905: LD_VAR 0 1
41909: PPUSH
41910: CALL_OW 141
// end ;
41914: LD_VAR 0 4
41918: RET
// export function Abs ( value ) ; begin
41919: LD_INT 0
41921: PPUSH
// result := value ;
41922: LD_ADDR_VAR 0 2
41926: PUSH
41927: LD_VAR 0 1
41931: ST_TO_ADDR
// if value < 0 then
41932: LD_VAR 0 1
41936: PUSH
41937: LD_INT 0
41939: LESS
41940: IFFALSE 41957
// result := value * - 1 ;
41942: LD_ADDR_VAR 0 2
41946: PUSH
41947: LD_VAR 0 1
41951: PUSH
41952: LD_INT 1
41954: NEG
41955: MUL
41956: ST_TO_ADDR
// end ;
41957: LD_VAR 0 2
41961: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41962: LD_INT 0
41964: PPUSH
41965: PPUSH
41966: PPUSH
41967: PPUSH
41968: PPUSH
41969: PPUSH
41970: PPUSH
41971: PPUSH
// if not unit or not building then
41972: LD_VAR 0 1
41976: NOT
41977: PUSH
41978: LD_VAR 0 2
41982: NOT
41983: OR
41984: IFFALSE 41988
// exit ;
41986: GO 42214
// x := GetX ( building ) ;
41988: LD_ADDR_VAR 0 4
41992: PUSH
41993: LD_VAR 0 2
41997: PPUSH
41998: CALL_OW 250
42002: ST_TO_ADDR
// y := GetY ( building ) ;
42003: LD_ADDR_VAR 0 6
42007: PUSH
42008: LD_VAR 0 2
42012: PPUSH
42013: CALL_OW 251
42017: ST_TO_ADDR
// d := GetDir ( building ) ;
42018: LD_ADDR_VAR 0 8
42022: PUSH
42023: LD_VAR 0 2
42027: PPUSH
42028: CALL_OW 254
42032: ST_TO_ADDR
// r := 4 ;
42033: LD_ADDR_VAR 0 9
42037: PUSH
42038: LD_INT 4
42040: ST_TO_ADDR
// for i := 1 to 5 do
42041: LD_ADDR_VAR 0 10
42045: PUSH
42046: DOUBLE
42047: LD_INT 1
42049: DEC
42050: ST_TO_ADDR
42051: LD_INT 5
42053: PUSH
42054: FOR_TO
42055: IFFALSE 42212
// begin _x := ShiftX ( x , d , r + i ) ;
42057: LD_ADDR_VAR 0 5
42061: PUSH
42062: LD_VAR 0 4
42066: PPUSH
42067: LD_VAR 0 8
42071: PPUSH
42072: LD_VAR 0 9
42076: PUSH
42077: LD_VAR 0 10
42081: PLUS
42082: PPUSH
42083: CALL_OW 272
42087: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
42088: LD_ADDR_VAR 0 7
42092: PUSH
42093: LD_VAR 0 6
42097: PPUSH
42098: LD_VAR 0 8
42102: PPUSH
42103: LD_VAR 0 9
42107: PUSH
42108: LD_VAR 0 10
42112: PLUS
42113: PPUSH
42114: CALL_OW 273
42118: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
42119: LD_VAR 0 5
42123: PPUSH
42124: LD_VAR 0 7
42128: PPUSH
42129: CALL_OW 488
42133: PUSH
42134: LD_VAR 0 5
42138: PPUSH
42139: LD_VAR 0 7
42143: PPUSH
42144: CALL_OW 428
42148: PPUSH
42149: CALL_OW 247
42153: PUSH
42154: LD_INT 3
42156: PUSH
42157: LD_INT 2
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: IN
42164: NOT
42165: AND
42166: IFFALSE 42210
// begin ComMoveXY ( unit , _x , _y ) ;
42168: LD_VAR 0 1
42172: PPUSH
42173: LD_VAR 0 5
42177: PPUSH
42178: LD_VAR 0 7
42182: PPUSH
42183: CALL_OW 111
// result := [ _x , _y ] ;
42187: LD_ADDR_VAR 0 3
42191: PUSH
42192: LD_VAR 0 5
42196: PUSH
42197: LD_VAR 0 7
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: ST_TO_ADDR
// exit ;
42206: POP
42207: POP
42208: GO 42214
// end ; end ;
42210: GO 42054
42212: POP
42213: POP
// end ;
42214: LD_VAR 0 3
42218: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42219: LD_INT 0
42221: PPUSH
42222: PPUSH
42223: PPUSH
// result := 0 ;
42224: LD_ADDR_VAR 0 3
42228: PUSH
42229: LD_INT 0
42231: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42232: LD_VAR 0 1
42236: PUSH
42237: LD_INT 0
42239: LESS
42240: PUSH
42241: LD_VAR 0 1
42245: PUSH
42246: LD_INT 8
42248: GREATER
42249: OR
42250: PUSH
42251: LD_VAR 0 2
42255: PUSH
42256: LD_INT 0
42258: LESS
42259: OR
42260: PUSH
42261: LD_VAR 0 2
42265: PUSH
42266: LD_INT 8
42268: GREATER
42269: OR
42270: IFFALSE 42274
// exit ;
42272: GO 42349
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
42274: LD_ADDR_VAR 0 4
42278: PUSH
42279: LD_INT 22
42281: PUSH
42282: LD_VAR 0 2
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PPUSH
42291: CALL_OW 69
42295: PUSH
42296: FOR_IN
42297: IFFALSE 42347
// begin un := UnitShoot ( i ) ;
42299: LD_ADDR_VAR 0 5
42303: PUSH
42304: LD_VAR 0 4
42308: PPUSH
42309: CALL_OW 504
42313: ST_TO_ADDR
// if GetSide ( un ) = side1 then
42314: LD_VAR 0 5
42318: PPUSH
42319: CALL_OW 255
42323: PUSH
42324: LD_VAR 0 1
42328: EQUAL
42329: IFFALSE 42345
// begin result := un ;
42331: LD_ADDR_VAR 0 3
42335: PUSH
42336: LD_VAR 0 5
42340: ST_TO_ADDR
// exit ;
42341: POP
42342: POP
42343: GO 42349
// end ; end ;
42345: GO 42296
42347: POP
42348: POP
// end ;
42349: LD_VAR 0 3
42353: RET
// export function GetCargoBay ( units ) ; begin
42354: LD_INT 0
42356: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42357: LD_ADDR_VAR 0 2
42361: PUSH
42362: LD_VAR 0 1
42366: PPUSH
42367: LD_INT 2
42369: PUSH
42370: LD_INT 34
42372: PUSH
42373: LD_INT 12
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 34
42382: PUSH
42383: LD_INT 51
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 34
42392: PUSH
42393: LD_INT 32
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 34
42402: PUSH
42403: LD_INT 89
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: PPUSH
42417: CALL_OW 72
42421: ST_TO_ADDR
// end ;
42422: LD_VAR 0 2
42426: RET
// export function Negate ( value ) ; begin
42427: LD_INT 0
42429: PPUSH
// result := not value ;
42430: LD_ADDR_VAR 0 2
42434: PUSH
42435: LD_VAR 0 1
42439: NOT
42440: ST_TO_ADDR
// end ;
42441: LD_VAR 0 2
42445: RET
// export function Inc ( value ) ; begin
42446: LD_INT 0
42448: PPUSH
// result := value + 1 ;
42449: LD_ADDR_VAR 0 2
42453: PUSH
42454: LD_VAR 0 1
42458: PUSH
42459: LD_INT 1
42461: PLUS
42462: ST_TO_ADDR
// end ;
42463: LD_VAR 0 2
42467: RET
// export function Dec ( value ) ; begin
42468: LD_INT 0
42470: PPUSH
// result := value - 1 ;
42471: LD_ADDR_VAR 0 2
42475: PUSH
42476: LD_VAR 0 1
42480: PUSH
42481: LD_INT 1
42483: MINUS
42484: ST_TO_ADDR
// end ;
42485: LD_VAR 0 2
42489: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42490: LD_INT 0
42492: PPUSH
42493: PPUSH
42494: PPUSH
42495: PPUSH
42496: PPUSH
42497: PPUSH
42498: PPUSH
42499: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42500: LD_VAR 0 1
42504: PPUSH
42505: LD_VAR 0 2
42509: PPUSH
42510: CALL_OW 488
42514: NOT
42515: PUSH
42516: LD_VAR 0 3
42520: PPUSH
42521: LD_VAR 0 4
42525: PPUSH
42526: CALL_OW 488
42530: NOT
42531: OR
42532: IFFALSE 42545
// begin result := - 1 ;
42534: LD_ADDR_VAR 0 5
42538: PUSH
42539: LD_INT 1
42541: NEG
42542: ST_TO_ADDR
// exit ;
42543: GO 42780
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42545: LD_ADDR_VAR 0 12
42549: PUSH
42550: LD_VAR 0 1
42554: PPUSH
42555: LD_VAR 0 2
42559: PPUSH
42560: LD_VAR 0 3
42564: PPUSH
42565: LD_VAR 0 4
42569: PPUSH
42570: CALL 41630 0 4
42574: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42575: LD_ADDR_VAR 0 11
42579: PUSH
42580: LD_VAR 0 1
42584: PPUSH
42585: LD_VAR 0 2
42589: PPUSH
42590: LD_VAR 0 12
42594: PUSH
42595: LD_INT 1
42597: ARRAY
42598: PPUSH
42599: LD_VAR 0 12
42603: PUSH
42604: LD_INT 2
42606: ARRAY
42607: PPUSH
42608: CALL_OW 298
42612: ST_TO_ADDR
// distance := 9999 ;
42613: LD_ADDR_VAR 0 10
42617: PUSH
42618: LD_INT 9999
42620: ST_TO_ADDR
// for i := 0 to 5 do
42621: LD_ADDR_VAR 0 6
42625: PUSH
42626: DOUBLE
42627: LD_INT 0
42629: DEC
42630: ST_TO_ADDR
42631: LD_INT 5
42633: PUSH
42634: FOR_TO
42635: IFFALSE 42778
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42637: LD_ADDR_VAR 0 7
42641: PUSH
42642: LD_VAR 0 1
42646: PPUSH
42647: LD_VAR 0 6
42651: PPUSH
42652: LD_VAR 0 11
42656: PPUSH
42657: CALL_OW 272
42661: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42662: LD_ADDR_VAR 0 8
42666: PUSH
42667: LD_VAR 0 2
42671: PPUSH
42672: LD_VAR 0 6
42676: PPUSH
42677: LD_VAR 0 11
42681: PPUSH
42682: CALL_OW 273
42686: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42687: LD_VAR 0 7
42691: PPUSH
42692: LD_VAR 0 8
42696: PPUSH
42697: CALL_OW 488
42701: NOT
42702: IFFALSE 42706
// continue ;
42704: GO 42634
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42706: LD_ADDR_VAR 0 9
42710: PUSH
42711: LD_VAR 0 12
42715: PUSH
42716: LD_INT 1
42718: ARRAY
42719: PPUSH
42720: LD_VAR 0 12
42724: PUSH
42725: LD_INT 2
42727: ARRAY
42728: PPUSH
42729: LD_VAR 0 7
42733: PPUSH
42734: LD_VAR 0 8
42738: PPUSH
42739: CALL_OW 298
42743: ST_TO_ADDR
// if tmp < distance then
42744: LD_VAR 0 9
42748: PUSH
42749: LD_VAR 0 10
42753: LESS
42754: IFFALSE 42776
// begin result := i ;
42756: LD_ADDR_VAR 0 5
42760: PUSH
42761: LD_VAR 0 6
42765: ST_TO_ADDR
// distance := tmp ;
42766: LD_ADDR_VAR 0 10
42770: PUSH
42771: LD_VAR 0 9
42775: ST_TO_ADDR
// end ; end ;
42776: GO 42634
42778: POP
42779: POP
// end ;
42780: LD_VAR 0 5
42784: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42785: LD_INT 0
42787: PPUSH
42788: PPUSH
// if not driver or not IsInUnit ( driver ) then
42789: LD_VAR 0 1
42793: NOT
42794: PUSH
42795: LD_VAR 0 1
42799: PPUSH
42800: CALL_OW 310
42804: NOT
42805: OR
42806: IFFALSE 42810
// exit ;
42808: GO 42900
// vehicle := IsInUnit ( driver ) ;
42810: LD_ADDR_VAR 0 3
42814: PUSH
42815: LD_VAR 0 1
42819: PPUSH
42820: CALL_OW 310
42824: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42825: LD_VAR 0 1
42829: PPUSH
42830: LD_STRING \
42832: PUSH
42833: LD_INT 0
42835: PUSH
42836: LD_INT 0
42838: PUSH
42839: LD_INT 0
42841: PUSH
42842: LD_INT 0
42844: PUSH
42845: LD_INT 0
42847: PUSH
42848: LD_INT 0
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: PUSH
42860: LD_STRING E
42862: PUSH
42863: LD_INT 0
42865: PUSH
42866: LD_INT 0
42868: PUSH
42869: LD_VAR 0 3
42873: PUSH
42874: LD_INT 0
42876: PUSH
42877: LD_INT 0
42879: PUSH
42880: LD_INT 0
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PPUSH
42896: CALL_OW 446
// end ;
42900: LD_VAR 0 2
42904: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42905: LD_INT 0
42907: PPUSH
42908: PPUSH
// if not driver or not IsInUnit ( driver ) then
42909: LD_VAR 0 1
42913: NOT
42914: PUSH
42915: LD_VAR 0 1
42919: PPUSH
42920: CALL_OW 310
42924: NOT
42925: OR
42926: IFFALSE 42930
// exit ;
42928: GO 43020
// vehicle := IsInUnit ( driver ) ;
42930: LD_ADDR_VAR 0 3
42934: PUSH
42935: LD_VAR 0 1
42939: PPUSH
42940: CALL_OW 310
42944: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42945: LD_VAR 0 1
42949: PPUSH
42950: LD_STRING \
42952: PUSH
42953: LD_INT 0
42955: PUSH
42956: LD_INT 0
42958: PUSH
42959: LD_INT 0
42961: PUSH
42962: LD_INT 0
42964: PUSH
42965: LD_INT 0
42967: PUSH
42968: LD_INT 0
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: PUSH
42980: LD_STRING E
42982: PUSH
42983: LD_INT 0
42985: PUSH
42986: LD_INT 0
42988: PUSH
42989: LD_VAR 0 3
42993: PUSH
42994: LD_INT 0
42996: PUSH
42997: LD_INT 0
42999: PUSH
43000: LD_INT 0
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PPUSH
43016: CALL_OW 447
// end ;
43020: LD_VAR 0 2
43024: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
43025: LD_INT 0
43027: PPUSH
43028: PPUSH
43029: PPUSH
// tmp := [ ] ;
43030: LD_ADDR_VAR 0 5
43034: PUSH
43035: EMPTY
43036: ST_TO_ADDR
// for i in units do
43037: LD_ADDR_VAR 0 4
43041: PUSH
43042: LD_VAR 0 1
43046: PUSH
43047: FOR_IN
43048: IFFALSE 43086
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
43050: LD_ADDR_VAR 0 5
43054: PUSH
43055: LD_VAR 0 5
43059: PPUSH
43060: LD_VAR 0 5
43064: PUSH
43065: LD_INT 1
43067: PLUS
43068: PPUSH
43069: LD_VAR 0 4
43073: PPUSH
43074: CALL_OW 256
43078: PPUSH
43079: CALL_OW 2
43083: ST_TO_ADDR
43084: GO 43047
43086: POP
43087: POP
// if not tmp then
43088: LD_VAR 0 5
43092: NOT
43093: IFFALSE 43097
// exit ;
43095: GO 43145
// if asc then
43097: LD_VAR 0 2
43101: IFFALSE 43125
// result := SortListByListAsc ( units , tmp ) else
43103: LD_ADDR_VAR 0 3
43107: PUSH
43108: LD_VAR 0 1
43112: PPUSH
43113: LD_VAR 0 5
43117: PPUSH
43118: CALL_OW 76
43122: ST_TO_ADDR
43123: GO 43145
// result := SortListByListDesc ( units , tmp ) ;
43125: LD_ADDR_VAR 0 3
43129: PUSH
43130: LD_VAR 0 1
43134: PPUSH
43135: LD_VAR 0 5
43139: PPUSH
43140: CALL_OW 77
43144: ST_TO_ADDR
// end ;
43145: LD_VAR 0 3
43149: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43150: LD_INT 0
43152: PPUSH
43153: PPUSH
// task := GetTaskList ( mech ) ;
43154: LD_ADDR_VAR 0 4
43158: PUSH
43159: LD_VAR 0 1
43163: PPUSH
43164: CALL_OW 437
43168: ST_TO_ADDR
// if not task then
43169: LD_VAR 0 4
43173: NOT
43174: IFFALSE 43178
// exit ;
43176: GO 43220
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43178: LD_ADDR_VAR 0 3
43182: PUSH
43183: LD_VAR 0 4
43187: PUSH
43188: LD_INT 1
43190: ARRAY
43191: PUSH
43192: LD_INT 1
43194: ARRAY
43195: PUSH
43196: LD_STRING r
43198: EQUAL
43199: PUSH
43200: LD_VAR 0 4
43204: PUSH
43205: LD_INT 1
43207: ARRAY
43208: PUSH
43209: LD_INT 4
43211: ARRAY
43212: PUSH
43213: LD_VAR 0 2
43217: EQUAL
43218: AND
43219: ST_TO_ADDR
// end ;
43220: LD_VAR 0 3
43224: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
43225: LD_INT 0
43227: PPUSH
// SetDir ( unit , d ) ;
43228: LD_VAR 0 1
43232: PPUSH
43233: LD_VAR 0 4
43237: PPUSH
43238: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
43242: LD_VAR 0 1
43246: PPUSH
43247: LD_VAR 0 2
43251: PPUSH
43252: LD_VAR 0 3
43256: PPUSH
43257: LD_VAR 0 5
43261: PPUSH
43262: CALL_OW 48
// end ;
43266: LD_VAR 0 6
43270: RET
// export function ToNaturalNumber ( number ) ; begin
43271: LD_INT 0
43273: PPUSH
// result := number div 1 ;
43274: LD_ADDR_VAR 0 2
43278: PUSH
43279: LD_VAR 0 1
43283: PUSH
43284: LD_INT 1
43286: DIV
43287: ST_TO_ADDR
// if number < 0 then
43288: LD_VAR 0 1
43292: PUSH
43293: LD_INT 0
43295: LESS
43296: IFFALSE 43306
// result := 0 ;
43298: LD_ADDR_VAR 0 2
43302: PUSH
43303: LD_INT 0
43305: ST_TO_ADDR
// end ;
43306: LD_VAR 0 2
43310: RET
// export function SortByClass ( units , class ) ; var un ; begin
43311: LD_INT 0
43313: PPUSH
43314: PPUSH
// if not units or not class then
43315: LD_VAR 0 1
43319: NOT
43320: PUSH
43321: LD_VAR 0 2
43325: NOT
43326: OR
43327: IFFALSE 43331
// exit ;
43329: GO 43426
// result := [ ] ;
43331: LD_ADDR_VAR 0 3
43335: PUSH
43336: EMPTY
43337: ST_TO_ADDR
// for un in units do
43338: LD_ADDR_VAR 0 4
43342: PUSH
43343: LD_VAR 0 1
43347: PUSH
43348: FOR_IN
43349: IFFALSE 43424
// if GetClass ( un ) = class then
43351: LD_VAR 0 4
43355: PPUSH
43356: CALL_OW 257
43360: PUSH
43361: LD_VAR 0 2
43365: EQUAL
43366: IFFALSE 43393
// result := Insert ( result , 1 , un ) else
43368: LD_ADDR_VAR 0 3
43372: PUSH
43373: LD_VAR 0 3
43377: PPUSH
43378: LD_INT 1
43380: PPUSH
43381: LD_VAR 0 4
43385: PPUSH
43386: CALL_OW 2
43390: ST_TO_ADDR
43391: GO 43422
// result := Replace ( result , result + 1 , un ) ;
43393: LD_ADDR_VAR 0 3
43397: PUSH
43398: LD_VAR 0 3
43402: PPUSH
43403: LD_VAR 0 3
43407: PUSH
43408: LD_INT 1
43410: PLUS
43411: PPUSH
43412: LD_VAR 0 4
43416: PPUSH
43417: CALL_OW 1
43421: ST_TO_ADDR
43422: GO 43348
43424: POP
43425: POP
// end ;
43426: LD_VAR 0 3
43430: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43431: LD_INT 0
43433: PPUSH
43434: PPUSH
43435: PPUSH
43436: PPUSH
43437: PPUSH
43438: PPUSH
43439: PPUSH
// result := [ ] ;
43440: LD_ADDR_VAR 0 4
43444: PUSH
43445: EMPTY
43446: ST_TO_ADDR
// if x - r < 0 then
43447: LD_VAR 0 1
43451: PUSH
43452: LD_VAR 0 3
43456: MINUS
43457: PUSH
43458: LD_INT 0
43460: LESS
43461: IFFALSE 43473
// min_x := 0 else
43463: LD_ADDR_VAR 0 8
43467: PUSH
43468: LD_INT 0
43470: ST_TO_ADDR
43471: GO 43489
// min_x := x - r ;
43473: LD_ADDR_VAR 0 8
43477: PUSH
43478: LD_VAR 0 1
43482: PUSH
43483: LD_VAR 0 3
43487: MINUS
43488: ST_TO_ADDR
// if y - r < 0 then
43489: LD_VAR 0 2
43493: PUSH
43494: LD_VAR 0 3
43498: MINUS
43499: PUSH
43500: LD_INT 0
43502: LESS
43503: IFFALSE 43515
// min_y := 0 else
43505: LD_ADDR_VAR 0 7
43509: PUSH
43510: LD_INT 0
43512: ST_TO_ADDR
43513: GO 43531
// min_y := y - r ;
43515: LD_ADDR_VAR 0 7
43519: PUSH
43520: LD_VAR 0 2
43524: PUSH
43525: LD_VAR 0 3
43529: MINUS
43530: ST_TO_ADDR
// max_x := x + r ;
43531: LD_ADDR_VAR 0 9
43535: PUSH
43536: LD_VAR 0 1
43540: PUSH
43541: LD_VAR 0 3
43545: PLUS
43546: ST_TO_ADDR
// max_y := y + r ;
43547: LD_ADDR_VAR 0 10
43551: PUSH
43552: LD_VAR 0 2
43556: PUSH
43557: LD_VAR 0 3
43561: PLUS
43562: ST_TO_ADDR
// for _x = min_x to max_x do
43563: LD_ADDR_VAR 0 5
43567: PUSH
43568: DOUBLE
43569: LD_VAR 0 8
43573: DEC
43574: ST_TO_ADDR
43575: LD_VAR 0 9
43579: PUSH
43580: FOR_TO
43581: IFFALSE 43682
// for _y = min_y to max_y do
43583: LD_ADDR_VAR 0 6
43587: PUSH
43588: DOUBLE
43589: LD_VAR 0 7
43593: DEC
43594: ST_TO_ADDR
43595: LD_VAR 0 10
43599: PUSH
43600: FOR_TO
43601: IFFALSE 43678
// begin if not ValidHex ( _x , _y ) then
43603: LD_VAR 0 5
43607: PPUSH
43608: LD_VAR 0 6
43612: PPUSH
43613: CALL_OW 488
43617: NOT
43618: IFFALSE 43622
// continue ;
43620: GO 43600
// if GetResourceTypeXY ( _x , _y ) then
43622: LD_VAR 0 5
43626: PPUSH
43627: LD_VAR 0 6
43631: PPUSH
43632: CALL_OW 283
43636: IFFALSE 43676
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43638: LD_ADDR_VAR 0 4
43642: PUSH
43643: LD_VAR 0 4
43647: PPUSH
43648: LD_VAR 0 4
43652: PUSH
43653: LD_INT 1
43655: PLUS
43656: PPUSH
43657: LD_VAR 0 5
43661: PUSH
43662: LD_VAR 0 6
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PPUSH
43671: CALL_OW 1
43675: ST_TO_ADDR
// end ;
43676: GO 43600
43678: POP
43679: POP
43680: GO 43580
43682: POP
43683: POP
// end ;
43684: LD_VAR 0 4
43688: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43689: LD_INT 0
43691: PPUSH
43692: PPUSH
43693: PPUSH
43694: PPUSH
43695: PPUSH
43696: PPUSH
43697: PPUSH
43698: PPUSH
// if not units then
43699: LD_VAR 0 1
43703: NOT
43704: IFFALSE 43708
// exit ;
43706: GO 44232
// result := UnitFilter ( units , [ f_ok ] ) ;
43708: LD_ADDR_VAR 0 3
43712: PUSH
43713: LD_VAR 0 1
43717: PPUSH
43718: LD_INT 50
43720: PUSH
43721: EMPTY
43722: LIST
43723: PPUSH
43724: CALL_OW 72
43728: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43729: LD_ADDR_VAR 0 8
43733: PUSH
43734: LD_VAR 0 1
43738: PUSH
43739: LD_INT 1
43741: ARRAY
43742: PPUSH
43743: CALL_OW 255
43747: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43748: LD_ADDR_VAR 0 10
43752: PUSH
43753: LD_INT 29
43755: PUSH
43756: LD_INT 91
43758: PUSH
43759: LD_INT 49
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: LIST
43766: ST_TO_ADDR
// if not result then
43767: LD_VAR 0 3
43771: NOT
43772: IFFALSE 43776
// exit ;
43774: GO 44232
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43776: LD_ADDR_VAR 0 5
43780: PUSH
43781: LD_INT 81
43783: PUSH
43784: LD_VAR 0 8
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PPUSH
43793: CALL_OW 69
43797: ST_TO_ADDR
// for i in result do
43798: LD_ADDR_VAR 0 4
43802: PUSH
43803: LD_VAR 0 3
43807: PUSH
43808: FOR_IN
43809: IFFALSE 44230
// begin tag := GetTag ( i ) + 1 ;
43811: LD_ADDR_VAR 0 9
43815: PUSH
43816: LD_VAR 0 4
43820: PPUSH
43821: CALL_OW 110
43825: PUSH
43826: LD_INT 1
43828: PLUS
43829: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
43830: LD_ADDR_VAR 0 7
43834: PUSH
43835: LD_VAR 0 4
43839: PPUSH
43840: CALL_OW 250
43844: PPUSH
43845: LD_VAR 0 4
43849: PPUSH
43850: CALL_OW 251
43854: PPUSH
43855: LD_INT 6
43857: PPUSH
43858: CALL 43431 0 3
43862: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
43863: LD_VAR 0 4
43867: PPUSH
43868: CALL_OW 247
43872: PUSH
43873: LD_INT 2
43875: EQUAL
43876: PUSH
43877: LD_VAR 0 7
43881: AND
43882: PUSH
43883: LD_VAR 0 4
43887: PPUSH
43888: CALL_OW 264
43892: PUSH
43893: LD_VAR 0 10
43897: IN
43898: NOT
43899: AND
43900: IFFALSE 43939
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43902: LD_VAR 0 4
43906: PPUSH
43907: LD_VAR 0 7
43911: PUSH
43912: LD_INT 1
43914: ARRAY
43915: PUSH
43916: LD_INT 1
43918: ARRAY
43919: PPUSH
43920: LD_VAR 0 7
43924: PUSH
43925: LD_INT 1
43927: ARRAY
43928: PUSH
43929: LD_INT 2
43931: ARRAY
43932: PPUSH
43933: CALL_OW 116
43937: GO 44228
// if path > tag then
43939: LD_VAR 0 2
43943: PUSH
43944: LD_VAR 0 9
43948: GREATER
43949: IFFALSE 44157
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43951: LD_ADDR_VAR 0 6
43955: PUSH
43956: LD_VAR 0 5
43960: PPUSH
43961: LD_INT 91
43963: PUSH
43964: LD_VAR 0 4
43968: PUSH
43969: LD_INT 8
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: LIST
43976: PPUSH
43977: CALL_OW 72
43981: ST_TO_ADDR
// if nearEnemy then
43982: LD_VAR 0 6
43986: IFFALSE 44055
// begin if GetWeapon ( i ) = ru_time_lapser then
43988: LD_VAR 0 4
43992: PPUSH
43993: CALL_OW 264
43997: PUSH
43998: LD_INT 49
44000: EQUAL
44001: IFFALSE 44029
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
44003: LD_VAR 0 4
44007: PPUSH
44008: LD_VAR 0 6
44012: PPUSH
44013: LD_VAR 0 4
44017: PPUSH
44018: CALL_OW 74
44022: PPUSH
44023: CALL_OW 112
44027: GO 44053
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
44029: LD_VAR 0 4
44033: PPUSH
44034: LD_VAR 0 6
44038: PPUSH
44039: LD_VAR 0 4
44043: PPUSH
44044: CALL_OW 74
44048: PPUSH
44049: CALL_OW 115
// end else
44053: GO 44155
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
44055: LD_VAR 0 4
44059: PPUSH
44060: LD_VAR 0 2
44064: PUSH
44065: LD_VAR 0 9
44069: ARRAY
44070: PUSH
44071: LD_INT 1
44073: ARRAY
44074: PPUSH
44075: LD_VAR 0 2
44079: PUSH
44080: LD_VAR 0 9
44084: ARRAY
44085: PUSH
44086: LD_INT 2
44088: ARRAY
44089: PPUSH
44090: CALL_OW 297
44094: PUSH
44095: LD_INT 6
44097: GREATER
44098: IFFALSE 44141
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
44100: LD_VAR 0 4
44104: PPUSH
44105: LD_VAR 0 2
44109: PUSH
44110: LD_VAR 0 9
44114: ARRAY
44115: PUSH
44116: LD_INT 1
44118: ARRAY
44119: PPUSH
44120: LD_VAR 0 2
44124: PUSH
44125: LD_VAR 0 9
44129: ARRAY
44130: PUSH
44131: LD_INT 2
44133: ARRAY
44134: PPUSH
44135: CALL_OW 114
44139: GO 44155
// SetTag ( i , tag ) ;
44141: LD_VAR 0 4
44145: PPUSH
44146: LD_VAR 0 9
44150: PPUSH
44151: CALL_OW 109
// end else
44155: GO 44228
// if enemy then
44157: LD_VAR 0 5
44161: IFFALSE 44228
// begin if GetWeapon ( i ) = ru_time_lapser then
44163: LD_VAR 0 4
44167: PPUSH
44168: CALL_OW 264
44172: PUSH
44173: LD_INT 49
44175: EQUAL
44176: IFFALSE 44204
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
44178: LD_VAR 0 4
44182: PPUSH
44183: LD_VAR 0 5
44187: PPUSH
44188: LD_VAR 0 4
44192: PPUSH
44193: CALL_OW 74
44197: PPUSH
44198: CALL_OW 112
44202: GO 44228
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
44204: LD_VAR 0 4
44208: PPUSH
44209: LD_VAR 0 5
44213: PPUSH
44214: LD_VAR 0 4
44218: PPUSH
44219: CALL_OW 74
44223: PPUSH
44224: CALL_OW 115
// end ; end ;
44228: GO 43808
44230: POP
44231: POP
// end ;
44232: LD_VAR 0 3
44236: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
44237: LD_INT 0
44239: PPUSH
44240: PPUSH
44241: PPUSH
// if not unit or IsInUnit ( unit ) then
44242: LD_VAR 0 1
44246: NOT
44247: PUSH
44248: LD_VAR 0 1
44252: PPUSH
44253: CALL_OW 310
44257: OR
44258: IFFALSE 44262
// exit ;
44260: GO 44353
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
44262: LD_ADDR_VAR 0 4
44266: PUSH
44267: LD_VAR 0 1
44271: PPUSH
44272: CALL_OW 250
44276: PPUSH
44277: LD_VAR 0 2
44281: PPUSH
44282: LD_INT 1
44284: PPUSH
44285: CALL_OW 272
44289: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
44290: LD_ADDR_VAR 0 5
44294: PUSH
44295: LD_VAR 0 1
44299: PPUSH
44300: CALL_OW 251
44304: PPUSH
44305: LD_VAR 0 2
44309: PPUSH
44310: LD_INT 1
44312: PPUSH
44313: CALL_OW 273
44317: ST_TO_ADDR
// if ValidHex ( x , y ) then
44318: LD_VAR 0 4
44322: PPUSH
44323: LD_VAR 0 5
44327: PPUSH
44328: CALL_OW 488
44332: IFFALSE 44353
// ComTurnXY ( unit , x , y ) ;
44334: LD_VAR 0 1
44338: PPUSH
44339: LD_VAR 0 4
44343: PPUSH
44344: LD_VAR 0 5
44348: PPUSH
44349: CALL_OW 118
// end ;
44353: LD_VAR 0 3
44357: RET
// export function SeeUnits ( side , units ) ; var i ; begin
44358: LD_INT 0
44360: PPUSH
44361: PPUSH
// result := false ;
44362: LD_ADDR_VAR 0 3
44366: PUSH
44367: LD_INT 0
44369: ST_TO_ADDR
// if not units then
44370: LD_VAR 0 2
44374: NOT
44375: IFFALSE 44379
// exit ;
44377: GO 44424
// for i in units do
44379: LD_ADDR_VAR 0 4
44383: PUSH
44384: LD_VAR 0 2
44388: PUSH
44389: FOR_IN
44390: IFFALSE 44422
// if See ( side , i ) then
44392: LD_VAR 0 1
44396: PPUSH
44397: LD_VAR 0 4
44401: PPUSH
44402: CALL_OW 292
44406: IFFALSE 44420
// begin result := true ;
44408: LD_ADDR_VAR 0 3
44412: PUSH
44413: LD_INT 1
44415: ST_TO_ADDR
// exit ;
44416: POP
44417: POP
44418: GO 44424
// end ;
44420: GO 44389
44422: POP
44423: POP
// end ;
44424: LD_VAR 0 3
44428: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44429: LD_INT 0
44431: PPUSH
44432: PPUSH
44433: PPUSH
44434: PPUSH
// if not unit or not points then
44435: LD_VAR 0 1
44439: NOT
44440: PUSH
44441: LD_VAR 0 2
44445: NOT
44446: OR
44447: IFFALSE 44451
// exit ;
44449: GO 44541
// dist := 99999 ;
44451: LD_ADDR_VAR 0 5
44455: PUSH
44456: LD_INT 99999
44458: ST_TO_ADDR
// for i in points do
44459: LD_ADDR_VAR 0 4
44463: PUSH
44464: LD_VAR 0 2
44468: PUSH
44469: FOR_IN
44470: IFFALSE 44539
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44472: LD_ADDR_VAR 0 6
44476: PUSH
44477: LD_VAR 0 1
44481: PPUSH
44482: LD_VAR 0 4
44486: PUSH
44487: LD_INT 1
44489: ARRAY
44490: PPUSH
44491: LD_VAR 0 4
44495: PUSH
44496: LD_INT 2
44498: ARRAY
44499: PPUSH
44500: CALL_OW 297
44504: ST_TO_ADDR
// if tmpDist < dist then
44505: LD_VAR 0 6
44509: PUSH
44510: LD_VAR 0 5
44514: LESS
44515: IFFALSE 44537
// begin result := i ;
44517: LD_ADDR_VAR 0 3
44521: PUSH
44522: LD_VAR 0 4
44526: ST_TO_ADDR
// dist := tmpDist ;
44527: LD_ADDR_VAR 0 5
44531: PUSH
44532: LD_VAR 0 6
44536: ST_TO_ADDR
// end ; end ;
44537: GO 44469
44539: POP
44540: POP
// end ;
44541: LD_VAR 0 3
44545: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44546: LD_INT 0
44548: PPUSH
// uc_side := side ;
44549: LD_ADDR_OWVAR 20
44553: PUSH
44554: LD_VAR 0 1
44558: ST_TO_ADDR
// uc_nation := 3 ;
44559: LD_ADDR_OWVAR 21
44563: PUSH
44564: LD_INT 3
44566: ST_TO_ADDR
// vc_chassis := 25 ;
44567: LD_ADDR_OWVAR 37
44571: PUSH
44572: LD_INT 25
44574: ST_TO_ADDR
// vc_engine := engine_siberite ;
44575: LD_ADDR_OWVAR 39
44579: PUSH
44580: LD_INT 3
44582: ST_TO_ADDR
// vc_control := control_computer ;
44583: LD_ADDR_OWVAR 38
44587: PUSH
44588: LD_INT 3
44590: ST_TO_ADDR
// vc_weapon := 59 ;
44591: LD_ADDR_OWVAR 40
44595: PUSH
44596: LD_INT 59
44598: ST_TO_ADDR
// result := CreateVehicle ;
44599: LD_ADDR_VAR 0 5
44603: PUSH
44604: CALL_OW 45
44608: ST_TO_ADDR
// SetDir ( result , d ) ;
44609: LD_VAR 0 5
44613: PPUSH
44614: LD_VAR 0 4
44618: PPUSH
44619: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44623: LD_VAR 0 5
44627: PPUSH
44628: LD_VAR 0 2
44632: PPUSH
44633: LD_VAR 0 3
44637: PPUSH
44638: LD_INT 0
44640: PPUSH
44641: CALL_OW 48
// end ;
44645: LD_VAR 0 5
44649: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44650: LD_INT 0
44652: PPUSH
44653: PPUSH
44654: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44655: LD_ADDR_VAR 0 2
44659: PUSH
44660: LD_INT 0
44662: PUSH
44663: LD_INT 0
44665: PUSH
44666: LD_INT 0
44668: PUSH
44669: LD_INT 0
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44678: LD_VAR 0 1
44682: NOT
44683: PUSH
44684: LD_VAR 0 1
44688: PPUSH
44689: CALL_OW 264
44693: PUSH
44694: LD_INT 12
44696: PUSH
44697: LD_INT 51
44699: PUSH
44700: LD_INT 32
44702: PUSH
44703: LD_INT 89
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: IN
44712: NOT
44713: OR
44714: IFFALSE 44718
// exit ;
44716: GO 44816
// for i := 1 to 3 do
44718: LD_ADDR_VAR 0 3
44722: PUSH
44723: DOUBLE
44724: LD_INT 1
44726: DEC
44727: ST_TO_ADDR
44728: LD_INT 3
44730: PUSH
44731: FOR_TO
44732: IFFALSE 44814
// begin tmp := GetCargo ( cargo , i ) ;
44734: LD_ADDR_VAR 0 4
44738: PUSH
44739: LD_VAR 0 1
44743: PPUSH
44744: LD_VAR 0 3
44748: PPUSH
44749: CALL_OW 289
44753: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44754: LD_ADDR_VAR 0 2
44758: PUSH
44759: LD_VAR 0 2
44763: PPUSH
44764: LD_VAR 0 3
44768: PPUSH
44769: LD_VAR 0 4
44773: PPUSH
44774: CALL_OW 1
44778: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44779: LD_ADDR_VAR 0 2
44783: PUSH
44784: LD_VAR 0 2
44788: PPUSH
44789: LD_INT 4
44791: PPUSH
44792: LD_VAR 0 2
44796: PUSH
44797: LD_INT 4
44799: ARRAY
44800: PUSH
44801: LD_VAR 0 4
44805: PLUS
44806: PPUSH
44807: CALL_OW 1
44811: ST_TO_ADDR
// end ;
44812: GO 44731
44814: POP
44815: POP
// end ;
44816: LD_VAR 0 2
44820: RET
// export function Length ( array ) ; begin
44821: LD_INT 0
44823: PPUSH
// result := array + 0 ;
44824: LD_ADDR_VAR 0 2
44828: PUSH
44829: LD_VAR 0 1
44833: PUSH
44834: LD_INT 0
44836: PLUS
44837: ST_TO_ADDR
// end ;
44838: LD_VAR 0 2
44842: RET
// export function PrepareArray ( array ) ; begin
44843: LD_INT 0
44845: PPUSH
// result := array diff 0 ;
44846: LD_ADDR_VAR 0 2
44850: PUSH
44851: LD_VAR 0 1
44855: PUSH
44856: LD_INT 0
44858: DIFF
44859: ST_TO_ADDR
// if not result [ 1 ] then
44860: LD_VAR 0 2
44864: PUSH
44865: LD_INT 1
44867: ARRAY
44868: NOT
44869: IFFALSE 44889
// result := Delete ( result , 1 ) ;
44871: LD_ADDR_VAR 0 2
44875: PUSH
44876: LD_VAR 0 2
44880: PPUSH
44881: LD_INT 1
44883: PPUSH
44884: CALL_OW 3
44888: ST_TO_ADDR
// end ;
44889: LD_VAR 0 2
44893: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44894: LD_INT 0
44896: PPUSH
44897: PPUSH
44898: PPUSH
44899: PPUSH
// sibRocketRange := 25 ;
44900: LD_ADDR_VAR 0 6
44904: PUSH
44905: LD_INT 25
44907: ST_TO_ADDR
// result := false ;
44908: LD_ADDR_VAR 0 4
44912: PUSH
44913: LD_INT 0
44915: ST_TO_ADDR
// for i := 0 to 5 do
44916: LD_ADDR_VAR 0 5
44920: PUSH
44921: DOUBLE
44922: LD_INT 0
44924: DEC
44925: ST_TO_ADDR
44926: LD_INT 5
44928: PUSH
44929: FOR_TO
44930: IFFALSE 44997
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44932: LD_VAR 0 1
44936: PPUSH
44937: LD_VAR 0 5
44941: PPUSH
44942: LD_VAR 0 6
44946: PPUSH
44947: CALL_OW 272
44951: PPUSH
44952: LD_VAR 0 2
44956: PPUSH
44957: LD_VAR 0 5
44961: PPUSH
44962: LD_VAR 0 6
44966: PPUSH
44967: CALL_OW 273
44971: PPUSH
44972: LD_VAR 0 3
44976: PPUSH
44977: CALL_OW 309
44981: IFFALSE 44995
// begin result := true ;
44983: LD_ADDR_VAR 0 4
44987: PUSH
44988: LD_INT 1
44990: ST_TO_ADDR
// exit ;
44991: POP
44992: POP
44993: GO 44999
// end ;
44995: GO 44929
44997: POP
44998: POP
// end ;
44999: LD_VAR 0 4
45003: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
45004: LD_INT 0
45006: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
45007: LD_VAR 0 1
45011: PPUSH
45012: LD_VAR 0 2
45016: PPUSH
45017: LD_INT 0
45019: PPUSH
45020: LD_INT 0
45022: PPUSH
45023: LD_INT 1
45025: PPUSH
45026: LD_INT 0
45028: PPUSH
45029: CALL_OW 587
// end ;
45033: LD_VAR 0 3
45037: RET
// export function CenterOnNow ( unit ) ; begin
45038: LD_INT 0
45040: PPUSH
// result := IsInUnit ( unit ) ;
45041: LD_ADDR_VAR 0 2
45045: PUSH
45046: LD_VAR 0 1
45050: PPUSH
45051: CALL_OW 310
45055: ST_TO_ADDR
// if not result then
45056: LD_VAR 0 2
45060: NOT
45061: IFFALSE 45073
// result := unit ;
45063: LD_ADDR_VAR 0 2
45067: PUSH
45068: LD_VAR 0 1
45072: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
45073: LD_VAR 0 1
45077: PPUSH
45078: CALL_OW 87
// end ;
45082: LD_VAR 0 2
45086: RET
